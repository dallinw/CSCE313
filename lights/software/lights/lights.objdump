
lights.elf:     file format elf32-littlenios2
lights.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x080001b4

Program Header:
    LOAD off    0x00001000 vaddr 0x08000000 paddr 0x08000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x08000020 paddr 0x08000020 align 2**12
         filesz 0x00003d44 memsz 0x00003d44 flags r-x
    LOAD off    0x00004d64 vaddr 0x08003d64 paddr 0x080053f4 align 2**12
         filesz 0x00001690 memsz 0x00001690 flags rw-
    LOAD off    0x00006a84 vaddr 0x08006a84 paddr 0x08006a84 align 2**12
         filesz 0x00000000 memsz 0x000002b8 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  08000000  08000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000194  08000020  08000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00003b38  080001b4  080001b4  000011b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000078  08003cec  08003cec  00004cec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001690  08003d64  080053f4  00004d64  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000002b8  08006a84  08006a84  00006a84  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000023  00000000  00000000  000063f4  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000558  00000000  00000000  00006418  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 000009eb  00000000  00000000  00006970  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0000aeb8  00000000  00000000  0000735b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00002691  00000000  00000000  00012213  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00007374  00000000  00000000  000148a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  000009c8  00000000  00000000  0001bc18  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00000cea  00000000  00000000  0001c5e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00000f95  00000000  00000000  0001d2ca  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000030  00000000  00000000  0001e260  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000090  00000000  00000000  0001e290  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  000200c8  2**0
                  CONTENTS, READONLY
 18 .cpu          00000005  00000000  00000000  000200cb  2**0
                  CONTENTS, READONLY
 19 .simulation_enabled 00000001  00000000  00000000  000200d0  2**0
                  CONTENTS, READONLY
 20 .sysid_hash   00000004  00000000  00000000  000200d1  2**0
                  CONTENTS, READONLY
 21 .sysid_base   00000004  00000000  00000000  000200d5  2**0
                  CONTENTS, READONLY
 22 .sysid_time   00000004  00000000  00000000  000200d9  2**0
                  CONTENTS, READONLY
 23 .stderr_dev   0000000b  00000000  00000000  000200dd  2**0
                  CONTENTS, READONLY
 24 .stdin_dev    0000000b  00000000  00000000  000200e8  2**0
                  CONTENTS, READONLY
 25 .stdout_dev   0000000b  00000000  00000000  000200f3  2**0
                  CONTENTS, READONLY
 26 .sopc_system_name 0000000b  00000000  00000000  000200fe  2**0
                  CONTENTS, READONLY
 27 .quartus_project_dir 00000020  00000000  00000000  00020109  2**0
                  CONTENTS, READONLY
 28 .jdi          000042c8  00000000  00000000  00020129  2**0
                  CONTENTS, READONLY
 29 .sopcinfo     0007fee8  00000000  00000000  000243f1  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
08000000 l    d  .entry	00000000 .entry
08000020 l    d  .exceptions	00000000 .exceptions
080001b4 l    d  .text	00000000 .text
08003cec l    d  .rodata	00000000 .rodata
08003d64 l    d  .rwdata	00000000 .rwdata
08006a84 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
080001fc l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 alt_load.c
08000310 l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
08003d64 l     O .rwdata	00001060 jtag_uart_0
08004dc4 l     O .rwdata	00000054 video_pixel_buffer_dma_0
08000664 l     F .text	00000038 alt_dev_reg
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
080008a4 l     F .text	00000228 altera_avalon_jtag_uart_irq
08000acc l     F .text	000000b0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_up_avalon_video_pixel_buffer_dma.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_close.c
08002904 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
080029a8 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
08002a88 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
08002f40 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
0800307c l     F .text	000000dc alt_file_locked
080032e0 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_irq.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 impure.c
08004fc0 l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
08003ad4 l     F .text	00000004 register_fini
00000000 l    df *ABS*	00000000 alt_exit.c
08003c88 l     F .text	00000040 alt_sim_halt
0800037c g     F .text	0000006c alt_main
08001db4 g     F .text	000003d0 alt_up_pixel_buffer_dma_draw_vline
08006aac g     O .bss	00000100 alt_irq
080053f4 g       *ABS*	00000000 __flash_rwdata_start
08001188 g     F .text	000001a0 alt_up_pixel_buffer_dma_draw
00000000  w      *UND*	00000000 __errno
08001148 g     F .text	00000040 alt_up_pixel_buffer_dma_open_dev
08000000 g     F .entry	0000001c __reset
08000020 g       *ABS*	00000000 __flash_exceptions_start
08006aa8 g     O .bss	00000004 errno
08006a94 g     O .bss	00000004 alt_argv
0800d3c0 g       *ABS*	00000000 _gp
08001328 g     F .text	00000058 alt_up_pixel_buffer_dma_change_back_buffer_address
08004e40 g     O .rwdata	00000180 alt_fd_list
08002bb0 g     F .text	00000094 alt_find_dev
0800388c g     F .text	000000a0 memcpy
08003004 g     F .text	00000078 alt_io_redirect
08003cec g       *ABS*	00000000 __DTOR_END__
08003544 g     F .text	00000020 altera_nios2_irq_init
080013d8 g     F .text	00000034 alt_up_pixel_buffer_dma_check_swap_buffers_status
08000ce4 g     F .text	00000224 altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
08001a64 g     F .text	00000350 alt_up_pixel_buffer_dma_draw_hline
0800373c g     F .text	00000090 alt_icache_flush
08002248 g     F .text	000000d0 helper_plot_pixel
080053d8 g     O .rwdata	00000004 alt_max_fd
0800140c g     F .text	00000164 alt_up_pixel_buffer_dma_clear_screen
080053f0 g     O .rwdata	00000004 _global_impure_ptr
08006d3c g       *ABS*	00000000 __bss_end
08002e48 g     F .text	000000f8 alt_iic_isr_register
08001570 g     F .text	000004f4 alt_up_pixel_buffer_dma_draw_box
08003438 g     F .text	0000010c alt_tick
08002e00 g     F .text	00000048 alt_ic_irq_enabled
080033a0 g     F .text	00000098 alt_alarm_stop
08006a9c g     O .bss	00000004 alt_irq_active
080000ec g     F .exceptions	000000c8 alt_irq_handler
08004e18 g     O .rwdata	00000028 alt_dev_null
08002964 g     F .text	00000044 alt_dcache_flush_all
08002184 g     F .text	000000c4 alt_up_pixel_buffer_dma_draw_rectangle
080053f4 g       *ABS*	00000000 __ram_rwdata_end
080053d0 g     O .rwdata	00000008 alt_dev_list
08002318 g     F .text	0000039c alt_up_pixel_buffer_dma_draw_line
08003d64 g       *ABS*	00000000 __ram_rodata_end
08006d3c g       *ABS*	00000000 end
080007e4 g     F .text	000000c0 altera_avalon_jtag_uart_init
08003ce8 g       *ABS*	00000000 __CTOR_LIST__
10000000 g       *ABS*	00000000 __alt_stack_pointer
08000f08 g     F .text	00000240 altera_avalon_jtag_uart_write
08003ad8 g     F .text	000001b0 __call_exitprocs
080001b4 g     F .text	0000004c _start
08006aa0 g     O .bss	00000004 _alt_tick_rate
08006aa4 g     O .bss	00000004 _alt_nticks
0800041c g     F .text	00000248 alt_sys_init
080039a0 g     F .text	00000134 __register_exitproc
08000b7c g     F .text	00000074 altera_avalon_jtag_uart_close
08003d64 g       *ABS*	00000000 __ram_rwdata_start
08003cec g       *ABS*	00000000 __ram_rodata_start
0800069c g     F .text	00000058 altera_avalon_jtag_uart_read_fd
08003684 g     F .text	000000b8 alt_get_fd
08003818 g     F .text	00000074 memcmp
0800074c g     F .text	00000048 altera_avalon_jtag_uart_close_fd
08006a84 g     O .bss	00000004 col
08006d3c g       *ABS*	00000000 __alt_stack_base
08000794 g     F .text	00000050 altera_avalon_jtag_uart_ioctl_fd
08003564 g     F .text	00000120 alt_find_file
080029d4 g     F .text	000000b4 alt_dev_llist_insert
08006a84 g       *ABS*	00000000 __bss_start
08000200 g     F .text	00000090 main
08006a98 g     O .bss	00000004 alt_envp
08001380 g     F .text	00000058 alt_up_pixel_buffer_dma_swap_buffers
080006f4 g     F .text	00000058 altera_avalon_jtag_uart_write_fd
08006bac g     O .bss	00000190 _atexit0
080053dc g     O .rwdata	00000004 alt_errno
08003cec g       *ABS*	00000000 __CTOR_END__
08003cec g       *ABS*	00000000 __flash_rodata_start
08003cec g       *ABS*	00000000 __DTOR_LIST__
11000000 g       *ABS*	00000000 __alt_mem_sram_0
080003e8 g     F .text	00000034 alt_irq_init
08003340 g     F .text	00000060 alt_release_fd
080037cc g     F .text	00000014 atexit
08006a88 g     O .bss	00000004 my_pixel_buffer
080053ec g     O .rwdata	00000004 _impure_ptr
08006a90 g     O .bss	00000004 alt_argc
08002b4c g     F .text	00000064 _do_dtors
08000000 g       *ABS*	00000000 __alt_mem_sdram_0
08000020 g       .exceptions	00000000 alt_irq_entry
080053c0 g     O .rwdata	00000004 num_rows
080053c8 g     O .rwdata	00000008 alt_fs_list
08000020 g       *ABS*	00000000 __ram_exceptions_start
08002c74 g     F .text	00000050 alt_ic_isr_register
080053f4 g       *ABS*	00000000 _edata
08006d3c g       *ABS*	00000000 _end
080001b4 g       *ABS*	00000000 __ram_exceptions_end
08000bf0 g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
08002d60 g     F .text	000000a0 alt_ic_irq_disable
080037e0 g     F .text	00000038 exit
10000000 g       *ABS*	00000000 __alt_data_end
08000020 g     F .exceptions	00000000 alt_exception
08003cc8 g     F .text	00000020 _exit
080026b4 g     F .text	00000154 alt_alarm_start
0800392c g     F .text	00000074 strlen
08003158 g     F .text	00000188 open
08002c44 g     F .text	00000030 alt_icache_flush_all
080053e0 g     O .rwdata	00000004 alt_priority_mask
080053c4 g     O .rwdata	00000004 num_cols
08002cc4 g     F .text	0000009c alt_ic_irq_enable
080053e4 g     O .rwdata	00000008 alt_alarm_list
08002ae8 g     F .text	00000064 _do_ctors
08002808 g     F .text	000000fc close
08000290 g     F .text	00000080 alt_load
08006a8c g     O .bss	00000004 row
00000000  w      *UND*	00000000 free



Disassembly of section .entry:

08000000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && !defined(ALT_SIM_OPTIMIZE)
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
 8000000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
 8000004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
 8000008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
 800000c:	00bffd16 	blt	zero,r2,8000004 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 8000010:	00420034 	movhi	at,2048
    ori r1, r1, %lo(_start)
 8000014:	08406d14 	ori	at,at,436
    jmp r1
 8000018:	0800683a 	jmp	at
 800001c:	00000000 	call	0 <__alt_mem_sdram_0-0x8000000>

Disassembly of section .exceptions:

08000020 <alt_exception>:
         * Process an exception.  For all exceptions we must preserve all
         * caller saved registers on the stack (See the Nios2 ABI
         * documentation for details).
         */

        addi  sp, sp, -76
 8000020:	deffed04 	addi	sp,sp,-76

#endif

#endif

        stw   ra,  0(sp)
 8000024:	dfc00015 	stw	ra,0(sp)
        /*
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */

        stw   r1,   8(sp)
 8000028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 800002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 8000030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 8000034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 8000038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 800003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 8000040:	d9c00815 	stw	r7,32(sp)

        rdctl r5, estatus
 8000044:	000b307a 	rdctl	r5,estatus

        stw   r8,  36(sp)
 8000048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 800004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 8000050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 8000054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 8000058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 800005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 8000060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 8000064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 8000068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 800006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 8000070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 8000074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 8000078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 800007c:	10000326 	beq	r2,zero,800008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 8000080:	20000226 	beq	r4,zero,800008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 8000084:	80000ec0 	call	80000ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 8000088:	00000306 	br	8000098 <alt_exception+0x78>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
 800008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
 8000090:	e8bfff17 	ldw	r2,-4(ea)
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
 8000094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 8000098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 800009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 80000a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 80000a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 80000a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 80000ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 80000b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 80000b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 80000b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 80000bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 80000c0:	d9c00817 	ldw	r7,32(sp)
#ifdef ALT_STACK_CHECK
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif
#endif

        ldw   r8,  36(sp)
 80000c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 80000c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 80000cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 80000d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 80000d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 80000d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 80000dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 80000e0:	dbc01017 	ldw	r15,64(sp)
#endif

        ldw   sp,  76(sp)

#else
        addi  sp, sp, 76
 80000e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 80000e8:	ef80083a 	eret

080000ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 80000ec:	defff904 	addi	sp,sp,-28
 80000f0:	dfc00615 	stw	ra,24(sp)
 80000f4:	df000515 	stw	fp,20(sp)
 80000f8:	df000504 	addi	fp,sp,20
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 80000fc:	0005313a 	rdctl	r2,ipending
 8000100:	e0bffc15 	stw	r2,-16(fp)

  return active;
 8000104:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 8000108:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
 800010c:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 8000110:	00800044 	movi	r2,1
 8000114:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 8000118:	e0ffff17 	ldw	r3,-4(fp)
 800011c:	e0bffe17 	ldw	r2,-8(fp)
 8000120:	1884703a 	and	r2,r3,r2
 8000124:	1005003a 	cmpeq	r2,r2,zero
 8000128:	1000161e 	bne	r2,zero,8000184 <alt_irq_handler+0x98>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 800012c:	e0bffd17 	ldw	r2,-12(fp)
 8000130:	00c20034 	movhi	r3,2048
 8000134:	18daab04 	addi	r3,r3,27308
 8000138:	100490fa 	slli	r2,r2,3
 800013c:	10c5883a 	add	r2,r2,r3
 8000140:	11400017 	ldw	r5,0(r2)
 8000144:	e0bffd17 	ldw	r2,-12(fp)
 8000148:	00c20034 	movhi	r3,2048
 800014c:	18daab04 	addi	r3,r3,27308
 8000150:	100490fa 	slli	r2,r2,3
 8000154:	10c5883a 	add	r2,r2,r3
 8000158:	10800104 	addi	r2,r2,4
 800015c:	11000017 	ldw	r4,0(r2)
 8000160:	283ee83a 	callr	r5
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 8000164:	0005313a 	rdctl	r2,ipending
 8000168:	e0bffb15 	stw	r2,-20(fp)

  return active;
 800016c:	e0bffb17 	ldw	r2,-20(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
 8000170:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
 8000174:	e0bfff17 	ldw	r2,-4(fp)
 8000178:	1004c03a 	cmpne	r2,r2,zero
 800017c:	103fe31e 	bne	r2,zero,800010c <alt_irq_handler+0x20>
 8000180:	00000706 	br	80001a0 <alt_irq_handler+0xb4>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
 8000184:	e0bffe17 	ldw	r2,-8(fp)
 8000188:	1085883a 	add	r2,r2,r2
 800018c:	e0bffe15 	stw	r2,-8(fp)
      i++;
 8000190:	e0bffd17 	ldw	r2,-12(fp)
 8000194:	10800044 	addi	r2,r2,1
 8000198:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 800019c:	003fde06 	br	8000118 <alt_irq_handler+0x2c>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
 80001a0:	e037883a 	mov	sp,fp
 80001a4:	dfc00117 	ldw	ra,4(sp)
 80001a8:	df000017 	ldw	fp,0(sp)
 80001ac:	dec00204 	addi	sp,sp,8
 80001b0:	f800283a 	ret

Disassembly of section .text:

080001b4 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
 80001b4:	00840014 	movui	r2,4096
#endif

0:
    initd 0(r2)
 80001b8:	10000033 	initd	0(r2)
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
 80001bc:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
 80001c0:	00bffd16 	blt	zero,r2,80001b8 <_start+0x4>
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 80001c4:	06c40034 	movhi	sp,4096
    ori sp, sp, %lo(__alt_stack_pointer)
 80001c8:	dec00014 	ori	sp,sp,0

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
 80001cc:	06820034 	movhi	gp,2048
    ori gp, gp, %lo(_gp)
 80001d0:	d6b4f014 	ori	gp,gp,54208
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 80001d4:	00820034 	movhi	r2,2048
    ori r2, r2, %lo(__bss_start)
 80001d8:	109aa114 	ori	r2,r2,27268

    movhi r3, %hi(__bss_end)
 80001dc:	00c20034 	movhi	r3,2048
    ori r3, r3, %lo(__bss_end)
 80001e0:	18db4f14 	ori	r3,r3,27964

    beq r2, r3, 1f
 80001e4:	10c00326 	beq	r2,r3,80001f4 <_start+0x40>

0:
    stw zero, (r2)
 80001e8:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 80001ec:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 80001f0:	10fffd36 	bltu	r2,r3,80001e8 <_start+0x34>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 80001f4:	80002900 	call	8000290 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 80001f8:	800037c0 	call	800037c <alt_main>

080001fc <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 80001fc:	003fff06 	br	80001fc <alt_after_alt_main>

08000200 <main>:
const int num_cols = 320; //from 240
float row;
float col;

int main()
{
 8000200:	defffb04 	addi	sp,sp,-20
*/

	//pixel buffer

	//alt_up_pixel_buffer_dma_dev *my_pixel_buffer; //declare global var
	my_pixel_buffer=alt_up_pixel_buffer_dma_open_dev("/dev/video_pixel_buffer_dma_0"); //assign it
 8000204:	01020034 	movhi	r4,2048
 8000208:	210f3b04 	addi	r4,r4,15596
const int num_cols = 320; //from 240
float row;
float col;

int main()
{
 800020c:	dfc00415 	stw	ra,16(sp)
 8000210:	dcc00315 	stw	r19,12(sp)
 8000214:	dc800215 	stw	r18,8(sp)
 8000218:	dc400115 	stw	r17,4(sp)
 800021c:	dc000015 	stw	r16,0(sp)
*/

	//pixel buffer

	//alt_up_pixel_buffer_dma_dev *my_pixel_buffer; //declare global var
	my_pixel_buffer=alt_up_pixel_buffer_dma_open_dev("/dev/video_pixel_buffer_dma_0"); //assign it
 8000220:	80011480 	call	8001148 <alt_up_pixel_buffer_dma_open_dev>
	alt_up_pixel_buffer_dma_clear_screen(my_pixel_buffer,0);//clear_screen();
 8000224:	1009883a 	mov	r4,r2
 8000228:	000b883a 	mov	r5,zero
*/

	//pixel buffer

	//alt_up_pixel_buffer_dma_dev *my_pixel_buffer; //declare global var
	my_pixel_buffer=alt_up_pixel_buffer_dma_open_dev("/dev/video_pixel_buffer_dma_0"); //assign it
 800022c:	d0a5b215 	stw	r2,-26936(gp)
	alt_up_pixel_buffer_dma_clear_screen(my_pixel_buffer,0);//clear_screen();
 8000230:	800140c0 	call	800140c <alt_up_pixel_buffer_dma_clear_screen>
 8000234:	0025883a 	mov	r18,zero
 8000238:	0027883a 	mov	r19,zero

	while (1) {
		int i, j;
		for (i = 0; i < num_rows; i++) {
			for (j = 0; j < num_cols; j++) {
				alt_up_pixel_buffer_dma_draw(my_pixel_buffer, (i*320*3) + (i*320*3<<8) + (i*320*3<<16),j,i );
 800023c:	9804923a 	slli	r2,r19,8
 8000240:	9806943a 	slli	r3,r19,16
 8000244:	0021883a 	mov	r16,zero
 8000248:	14c5883a 	add	r2,r2,r19
 800024c:	10e3883a 	add	r17,r2,r3
 8000250:	d125b217 	ldw	r4,-26936(gp)
 8000254:	800d883a 	mov	r6,r16
 8000258:	880b883a 	mov	r5,r17
 800025c:	900f883a 	mov	r7,r18
 8000260:	80011880 	call	8001188 <alt_up_pixel_buffer_dma_draw>


	while (1) {
		int i, j;
		for (i = 0; i < num_rows; i++) {
			for (j = 0; j < num_cols; j++) {
 8000264:	84000044 	addi	r16,r16,1
 8000268:	00805004 	movi	r2,320
 800026c:	80bff81e 	bne	r16,r2,8000250 <main+0x50>
	alt_up_pixel_buffer_dma_clear_screen(my_pixel_buffer,0);//clear_screen();


	while (1) {
		int i, j;
		for (i = 0; i < num_rows; i++) {
 8000270:	94800044 	addi	r18,r18,1
 8000274:	00803c04 	movi	r2,240
 8000278:	9cc0f004 	addi	r19,r19,960
 800027c:	90bfef1e 	bne	r18,r2,800023c <main+0x3c>
			for (j = 0; j < num_cols; j++) {
				alt_up_pixel_buffer_dma_draw(my_pixel_buffer, (i*320*3) + (i*320*3<<8) + (i*320*3<<16),j,i );
			}
		}
		alt_up_pixel_buffer_dma_clear_screen(my_pixel_buffer,0);
 8000280:	d125b217 	ldw	r4,-26936(gp)
 8000284:	000b883a 	mov	r5,zero
 8000288:	800140c0 	call	800140c <alt_up_pixel_buffer_dma_clear_screen>
 800028c:	003fe906 	br	8000234 <main+0x34>

08000290 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 8000290:	defffe04 	addi	sp,sp,-8
 8000294:	dfc00115 	stw	ra,4(sp)
 8000298:	df000015 	stw	fp,0(sp)
 800029c:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
 80002a0:	01020034 	movhi	r4,2048
 80002a4:	2114fd04 	addi	r4,r4,21492
 80002a8:	01420034 	movhi	r5,2048
 80002ac:	294f5904 	addi	r5,r5,15716
 80002b0:	01820034 	movhi	r6,2048
 80002b4:	3194fd04 	addi	r6,r6,21492
 80002b8:	80003100 	call	8000310 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
 80002bc:	01020034 	movhi	r4,2048
 80002c0:	21000804 	addi	r4,r4,32
 80002c4:	01420034 	movhi	r5,2048
 80002c8:	29400804 	addi	r5,r5,32
 80002cc:	01820034 	movhi	r6,2048
 80002d0:	31806d04 	addi	r6,r6,436
 80002d4:	80003100 	call	8000310 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
 80002d8:	01020034 	movhi	r4,2048
 80002dc:	210f3b04 	addi	r4,r4,15596
 80002e0:	01420034 	movhi	r5,2048
 80002e4:	294f3b04 	addi	r5,r5,15596
 80002e8:	01820034 	movhi	r6,2048
 80002ec:	318f5904 	addi	r6,r6,15716
 80002f0:	80003100 	call	8000310 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 80002f4:	80029640 	call	8002964 <alt_dcache_flush_all>
  alt_icache_flush_all();
 80002f8:	8002c440 	call	8002c44 <alt_icache_flush_all>
}
 80002fc:	e037883a 	mov	sp,fp
 8000300:	dfc00117 	ldw	ra,4(sp)
 8000304:	df000017 	ldw	fp,0(sp)
 8000308:	dec00204 	addi	sp,sp,8
 800030c:	f800283a 	ret

08000310 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
 8000310:	defffc04 	addi	sp,sp,-16
 8000314:	df000315 	stw	fp,12(sp)
 8000318:	df000304 	addi	fp,sp,12
 800031c:	e13ffd15 	stw	r4,-12(fp)
 8000320:	e17ffe15 	stw	r5,-8(fp)
 8000324:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
 8000328:	e0fffe17 	ldw	r3,-8(fp)
 800032c:	e0bffd17 	ldw	r2,-12(fp)
 8000330:	18800e26 	beq	r3,r2,800036c <alt_load_section+0x5c>
  {
    while( to != end )
 8000334:	00000a06 	br	8000360 <alt_load_section+0x50>
    {
      *to++ = *from++;
 8000338:	e0bffd17 	ldw	r2,-12(fp)
 800033c:	10c00017 	ldw	r3,0(r2)
 8000340:	e0bffe17 	ldw	r2,-8(fp)
 8000344:	10c00015 	stw	r3,0(r2)
 8000348:	e0bffe17 	ldw	r2,-8(fp)
 800034c:	10800104 	addi	r2,r2,4
 8000350:	e0bffe15 	stw	r2,-8(fp)
 8000354:	e0bffd17 	ldw	r2,-12(fp)
 8000358:	10800104 	addi	r2,r2,4
 800035c:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
 8000360:	e0fffe17 	ldw	r3,-8(fp)
 8000364:	e0bfff17 	ldw	r2,-4(fp)
 8000368:	18bff31e 	bne	r3,r2,8000338 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
 800036c:	e037883a 	mov	sp,fp
 8000370:	df000017 	ldw	fp,0(sp)
 8000374:	dec00104 	addi	sp,sp,4
 8000378:	f800283a 	ret

0800037c <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 800037c:	defffd04 	addi	sp,sp,-12
 8000380:	dfc00215 	stw	ra,8(sp)
 8000384:	df000115 	stw	fp,4(sp)
 8000388:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 800038c:	0009883a 	mov	r4,zero
 8000390:	80003e80 	call	80003e8 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 8000394:	800041c0 	call	800041c <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 8000398:	01020034 	movhi	r4,2048
 800039c:	210f4304 	addi	r4,r4,15628
 80003a0:	01420034 	movhi	r5,2048
 80003a4:	294f4304 	addi	r5,r5,15628
 80003a8:	01820034 	movhi	r6,2048
 80003ac:	318f4304 	addi	r6,r6,15628
 80003b0:	80030040 	call	8003004 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
 80003b4:	8002ae80 	call	8002ae8 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
 80003b8:	01020034 	movhi	r4,2048
 80003bc:	210ad304 	addi	r4,r4,11084
 80003c0:	80037cc0 	call	80037cc <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 80003c4:	d125b417 	ldw	r4,-26928(gp)
 80003c8:	d165b517 	ldw	r5,-26924(gp)
 80003cc:	d1a5b617 	ldw	r6,-26920(gp)
 80003d0:	80002000 	call	8000200 <main>
 80003d4:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
 80003d8:	01000044 	movi	r4,1
 80003dc:	80028080 	call	8002808 <close>
  exit (result);
 80003e0:	e13fff17 	ldw	r4,-4(fp)
 80003e4:	80037e00 	call	80037e0 <exit>

080003e8 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 80003e8:	defffd04 	addi	sp,sp,-12
 80003ec:	dfc00215 	stw	ra,8(sp)
 80003f0:	df000115 	stw	fp,4(sp)
 80003f4:	df000104 	addi	fp,sp,4
 80003f8:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_IRQ_INIT ( CPU_0, cpu_0);
 80003fc:	80035440 	call	8003544 <altera_nios2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 8000400:	00800044 	movi	r2,1
 8000404:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 8000408:	e037883a 	mov	sp,fp
 800040c:	dfc00117 	ldw	ra,4(sp)
 8000410:	df000017 	ldw	fp,0(sp)
 8000414:	dec00204 	addi	sp,sp,8
 8000418:	f800283a 	ret

0800041c <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 800041c:	defffd04 	addi	sp,sp,-12
 8000420:	dfc00215 	stw	ra,8(sp)
 8000424:	df000115 	stw	fp,4(sp)
 8000428:	df000104 	addi	fp,sp,4
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
 800042c:	01020034 	movhi	r4,2048
 8000430:	210f6304 	addi	r4,r4,15756
 8000434:	000b883a 	mov	r5,zero
 8000438:	000d883a 	mov	r6,zero
 800043c:	80007e40 	call	80007e4 <altera_avalon_jtag_uart_init>
 8000440:	01020034 	movhi	r4,2048
 8000444:	210f5904 	addi	r4,r4,15716
 8000448:	80006640 	call	8000664 <alt_dev_reg>
    ALTERA_AVALON_PERFORMANCE_COUNTER_INIT ( PERFORMANCE_COUNTER_0, performance_counter_0);
 800044c:	0007883a 	mov	r3,zero
 8000450:	00800044 	movi	r2,1
 8000454:	18800035 	stwio	r2,0(r3)
    ALTERA_AVALON_SYSID_INIT ( SYSID, sysid);
    ALTERA_UP_AVALON_VIDEO_PIXEL_BUFFER_DMA_INIT ( VIDEO_PIXEL_BUFFER_DMA_0, video_pixel_buffer_dma_0);
 8000458:	00820034 	movhi	r2,2048
 800045c:	10937104 	addi	r2,r2,19908
 8000460:	10800a17 	ldw	r2,40(r2)
 8000464:	10800017 	ldw	r2,0(r2)
 8000468:	1007883a 	mov	r3,r2
 800046c:	00820034 	movhi	r2,2048
 8000470:	10937104 	addi	r2,r2,19908
 8000474:	10c00b15 	stw	r3,44(r2)
 8000478:	00820034 	movhi	r2,2048
 800047c:	10937104 	addi	r2,r2,19908
 8000480:	10800a17 	ldw	r2,40(r2)
 8000484:	10800104 	addi	r2,r2,4
 8000488:	10800017 	ldw	r2,0(r2)
 800048c:	1007883a 	mov	r3,r2
 8000490:	00820034 	movhi	r2,2048
 8000494:	10937104 	addi	r2,r2,19908
 8000498:	10c00c15 	stw	r3,48(r2)
 800049c:	00820034 	movhi	r2,2048
 80004a0:	10937104 	addi	r2,r2,19908
 80004a4:	10800a17 	ldw	r2,40(r2)
 80004a8:	10800204 	addi	r2,r2,8
 80004ac:	10800017 	ldw	r2,0(r2)
 80004b0:	10ffffcc 	andi	r3,r2,65535
 80004b4:	00820034 	movhi	r2,2048
 80004b8:	10937104 	addi	r2,r2,19908
 80004bc:	10c00f15 	stw	r3,60(r2)
 80004c0:	00820034 	movhi	r2,2048
 80004c4:	10937104 	addi	r2,r2,19908
 80004c8:	10800a17 	ldw	r2,40(r2)
 80004cc:	10800204 	addi	r2,r2,8
 80004d0:	10800017 	ldw	r2,0(r2)
 80004d4:	1005d43a 	srai	r2,r2,16
 80004d8:	10ffffcc 	andi	r3,r2,65535
 80004dc:	00820034 	movhi	r2,2048
 80004e0:	10937104 	addi	r2,r2,19908
 80004e4:	10c01015 	stw	r3,64(r2)
 80004e8:	00820034 	movhi	r2,2048
 80004ec:	10937104 	addi	r2,r2,19908
 80004f0:	10800a17 	ldw	r2,40(r2)
 80004f4:	10800304 	addi	r2,r2,12
 80004f8:	10800017 	ldw	r2,0(r2)
 80004fc:	1005d07a 	srai	r2,r2,1
 8000500:	10c0004c 	andi	r3,r2,1
 8000504:	00820034 	movhi	r2,2048
 8000508:	10937104 	addi	r2,r2,19908
 800050c:	10c00d15 	stw	r3,52(r2)
 8000510:	00820034 	movhi	r2,2048
 8000514:	10937104 	addi	r2,r2,19908
 8000518:	10800a17 	ldw	r2,40(r2)
 800051c:	10800304 	addi	r2,r2,12
 8000520:	10800017 	ldw	r2,0(r2)
 8000524:	1005d13a 	srai	r2,r2,4
 8000528:	10c003cc 	andi	r3,r2,15
 800052c:	00820034 	movhi	r2,2048
 8000530:	10937104 	addi	r2,r2,19908
 8000534:	10c00e15 	stw	r3,56(r2)
 8000538:	00820034 	movhi	r2,2048
 800053c:	10937104 	addi	r2,r2,19908
 8000540:	10800a17 	ldw	r2,40(r2)
 8000544:	10800304 	addi	r2,r2,12
 8000548:	10800017 	ldw	r2,0(r2)
 800054c:	1005d43a 	srai	r2,r2,16
 8000550:	1007883a 	mov	r3,r2
 8000554:	00bfffc4 	movi	r2,-1
 8000558:	1884703a 	and	r2,r3,r2
 800055c:	e0bfff45 	stb	r2,-3(fp)
 8000560:	00820034 	movhi	r2,2048
 8000564:	10937104 	addi	r2,r2,19908
 8000568:	10800a17 	ldw	r2,40(r2)
 800056c:	10800304 	addi	r2,r2,12
 8000570:	10800017 	ldw	r2,0(r2)
 8000574:	1005d63a 	srai	r2,r2,24
 8000578:	1007883a 	mov	r3,r2
 800057c:	00bfffc4 	movi	r2,-1
 8000580:	1884703a 	and	r2,r3,r2
 8000584:	e0bfff05 	stb	r2,-4(fp)
 8000588:	00820034 	movhi	r2,2048
 800058c:	10937104 	addi	r2,r2,19908
 8000590:	10800e17 	ldw	r2,56(r2)
 8000594:	10800058 	cmpnei	r2,r2,1
 8000598:	1000041e 	bne	r2,zero,80005ac <alt_sys_init+0x190>
 800059c:	00820034 	movhi	r2,2048
 80005a0:	10937104 	addi	r2,r2,19908
 80005a4:	10001115 	stw	zero,68(r2)
 80005a8:	00000e06 	br	80005e4 <alt_sys_init+0x1c8>
 80005ac:	00820034 	movhi	r2,2048
 80005b0:	10937104 	addi	r2,r2,19908
 80005b4:	10800e17 	ldw	r2,56(r2)
 80005b8:	10800098 	cmpnei	r2,r2,2
 80005bc:	1000051e 	bne	r2,zero,80005d4 <alt_sys_init+0x1b8>
 80005c0:	00c20034 	movhi	r3,2048
 80005c4:	18d37104 	addi	r3,r3,19908
 80005c8:	00800044 	movi	r2,1
 80005cc:	18801115 	stw	r2,68(r3)
 80005d0:	00000406 	br	80005e4 <alt_sys_init+0x1c8>
 80005d4:	00c20034 	movhi	r3,2048
 80005d8:	18d37104 	addi	r3,r3,19908
 80005dc:	00800084 	movi	r2,2
 80005e0:	18801115 	stw	r2,68(r3)
 80005e4:	e0ffff43 	ldbu	r3,-3(fp)
 80005e8:	00800804 	movi	r2,32
 80005ec:	10c7c83a 	sub	r3,r2,r3
 80005f0:	00bfffc4 	movi	r2,-1
 80005f4:	10c6d83a 	srl	r3,r2,r3
 80005f8:	00820034 	movhi	r2,2048
 80005fc:	10937104 	addi	r2,r2,19908
 8000600:	10c01215 	stw	r3,72(r2)
 8000604:	e0ffff43 	ldbu	r3,-3(fp)
 8000608:	00820034 	movhi	r2,2048
 800060c:	10937104 	addi	r2,r2,19908
 8000610:	10801117 	ldw	r2,68(r2)
 8000614:	1887883a 	add	r3,r3,r2
 8000618:	00820034 	movhi	r2,2048
 800061c:	10937104 	addi	r2,r2,19908
 8000620:	10c01315 	stw	r3,76(r2)
 8000624:	e0ffff03 	ldbu	r3,-4(fp)
 8000628:	00800804 	movi	r2,32
 800062c:	10c7c83a 	sub	r3,r2,r3
 8000630:	00bfffc4 	movi	r2,-1
 8000634:	10c6d83a 	srl	r3,r2,r3
 8000638:	00820034 	movhi	r2,2048
 800063c:	10937104 	addi	r2,r2,19908
 8000640:	10c01415 	stw	r3,80(r2)
 8000644:	01020034 	movhi	r4,2048
 8000648:	21137104 	addi	r4,r4,19908
 800064c:	80006640 	call	8000664 <alt_dev_reg>
}
 8000650:	e037883a 	mov	sp,fp
 8000654:	dfc00117 	ldw	ra,4(sp)
 8000658:	df000017 	ldw	fp,0(sp)
 800065c:	dec00204 	addi	sp,sp,8
 8000660:	f800283a 	ret

08000664 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
 8000664:	defffd04 	addi	sp,sp,-12
 8000668:	dfc00215 	stw	ra,8(sp)
 800066c:	df000115 	stw	fp,4(sp)
 8000670:	df000104 	addi	fp,sp,4
 8000674:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 8000678:	e13fff17 	ldw	r4,-4(fp)
 800067c:	01420034 	movhi	r5,2048
 8000680:	2954f404 	addi	r5,r5,21456
 8000684:	80029d40 	call	80029d4 <alt_dev_llist_insert>
}
 8000688:	e037883a 	mov	sp,fp
 800068c:	dfc00117 	ldw	ra,4(sp)
 8000690:	df000017 	ldw	fp,0(sp)
 8000694:	dec00204 	addi	sp,sp,8
 8000698:	f800283a 	ret

0800069c <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 800069c:	defffa04 	addi	sp,sp,-24
 80006a0:	dfc00515 	stw	ra,20(sp)
 80006a4:	df000415 	stw	fp,16(sp)
 80006a8:	df000404 	addi	fp,sp,16
 80006ac:	e13ffd15 	stw	r4,-12(fp)
 80006b0:	e17ffe15 	stw	r5,-8(fp)
 80006b4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 80006b8:	e0bffd17 	ldw	r2,-12(fp)
 80006bc:	10800017 	ldw	r2,0(r2)
 80006c0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 80006c4:	e0bffc17 	ldw	r2,-16(fp)
 80006c8:	11000a04 	addi	r4,r2,40
 80006cc:	e0bffd17 	ldw	r2,-12(fp)
 80006d0:	11c00217 	ldw	r7,8(r2)
 80006d4:	e17ffe17 	ldw	r5,-8(fp)
 80006d8:	e1bfff17 	ldw	r6,-4(fp)
 80006dc:	8000ce40 	call	8000ce4 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
 80006e0:	e037883a 	mov	sp,fp
 80006e4:	dfc00117 	ldw	ra,4(sp)
 80006e8:	df000017 	ldw	fp,0(sp)
 80006ec:	dec00204 	addi	sp,sp,8
 80006f0:	f800283a 	ret

080006f4 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 80006f4:	defffa04 	addi	sp,sp,-24
 80006f8:	dfc00515 	stw	ra,20(sp)
 80006fc:	df000415 	stw	fp,16(sp)
 8000700:	df000404 	addi	fp,sp,16
 8000704:	e13ffd15 	stw	r4,-12(fp)
 8000708:	e17ffe15 	stw	r5,-8(fp)
 800070c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 8000710:	e0bffd17 	ldw	r2,-12(fp)
 8000714:	10800017 	ldw	r2,0(r2)
 8000718:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 800071c:	e0bffc17 	ldw	r2,-16(fp)
 8000720:	11000a04 	addi	r4,r2,40
 8000724:	e0bffd17 	ldw	r2,-12(fp)
 8000728:	11c00217 	ldw	r7,8(r2)
 800072c:	e17ffe17 	ldw	r5,-8(fp)
 8000730:	e1bfff17 	ldw	r6,-4(fp)
 8000734:	8000f080 	call	8000f08 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
 8000738:	e037883a 	mov	sp,fp
 800073c:	dfc00117 	ldw	ra,4(sp)
 8000740:	df000017 	ldw	fp,0(sp)
 8000744:	dec00204 	addi	sp,sp,8
 8000748:	f800283a 	ret

0800074c <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
 800074c:	defffc04 	addi	sp,sp,-16
 8000750:	dfc00315 	stw	ra,12(sp)
 8000754:	df000215 	stw	fp,8(sp)
 8000758:	df000204 	addi	fp,sp,8
 800075c:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 8000760:	e0bfff17 	ldw	r2,-4(fp)
 8000764:	10800017 	ldw	r2,0(r2)
 8000768:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
 800076c:	e0bffe17 	ldw	r2,-8(fp)
 8000770:	11000a04 	addi	r4,r2,40
 8000774:	e0bfff17 	ldw	r2,-4(fp)
 8000778:	11400217 	ldw	r5,8(r2)
 800077c:	8000b7c0 	call	8000b7c <altera_avalon_jtag_uart_close>
}
 8000780:	e037883a 	mov	sp,fp
 8000784:	dfc00117 	ldw	ra,4(sp)
 8000788:	df000017 	ldw	fp,0(sp)
 800078c:	dec00204 	addi	sp,sp,8
 8000790:	f800283a 	ret

08000794 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
 8000794:	defffa04 	addi	sp,sp,-24
 8000798:	dfc00515 	stw	ra,20(sp)
 800079c:	df000415 	stw	fp,16(sp)
 80007a0:	df000404 	addi	fp,sp,16
 80007a4:	e13ffd15 	stw	r4,-12(fp)
 80007a8:	e17ffe15 	stw	r5,-8(fp)
 80007ac:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
 80007b0:	e0bffd17 	ldw	r2,-12(fp)
 80007b4:	10800017 	ldw	r2,0(r2)
 80007b8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
 80007bc:	e0bffc17 	ldw	r2,-16(fp)
 80007c0:	11000a04 	addi	r4,r2,40
 80007c4:	e17ffe17 	ldw	r5,-8(fp)
 80007c8:	e1bfff17 	ldw	r6,-4(fp)
 80007cc:	8000bf00 	call	8000bf0 <altera_avalon_jtag_uart_ioctl>
}
 80007d0:	e037883a 	mov	sp,fp
 80007d4:	dfc00117 	ldw	ra,4(sp)
 80007d8:	df000017 	ldw	fp,0(sp)
 80007dc:	dec00204 	addi	sp,sp,8
 80007e0:	f800283a 	ret

080007e4 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
 80007e4:	defffa04 	addi	sp,sp,-24
 80007e8:	dfc00515 	stw	ra,20(sp)
 80007ec:	df000415 	stw	fp,16(sp)
 80007f0:	df000404 	addi	fp,sp,16
 80007f4:	e13ffd15 	stw	r4,-12(fp)
 80007f8:	e17ffe15 	stw	r5,-8(fp)
 80007fc:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 8000800:	e0fffd17 	ldw	r3,-12(fp)
 8000804:	00800044 	movi	r2,1
 8000808:	18800815 	stw	r2,32(r3)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
 800080c:	e0bffd17 	ldw	r2,-12(fp)
 8000810:	10800017 	ldw	r2,0(r2)
 8000814:	11000104 	addi	r4,r2,4
 8000818:	e0bffd17 	ldw	r2,-12(fp)
 800081c:	10800817 	ldw	r2,32(r2)
 8000820:	1007883a 	mov	r3,r2
 8000824:	2005883a 	mov	r2,r4
 8000828:	10c00035 	stwio	r3,0(r2)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
 800082c:	e13ffe17 	ldw	r4,-8(fp)
 8000830:	e17fff17 	ldw	r5,-4(fp)
 8000834:	d8000015 	stw	zero,0(sp)
 8000838:	01820034 	movhi	r6,2048
 800083c:	31822904 	addi	r6,r6,2212
 8000840:	e1fffd17 	ldw	r7,-12(fp)
 8000844:	8002c740 	call	8002c74 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
 8000848:	e0bffd17 	ldw	r2,-12(fp)
 800084c:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
 8000850:	e0bffd17 	ldw	r2,-12(fp)
 8000854:	11000204 	addi	r4,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 8000858:	00820034 	movhi	r2,2048
 800085c:	109aa804 	addi	r2,r2,27296
 8000860:	10800017 	ldw	r2,0(r2)
 8000864:	100b883a 	mov	r5,r2
 8000868:	01820034 	movhi	r6,2048
 800086c:	3182b304 	addi	r6,r6,2764
 8000870:	e1fffd17 	ldw	r7,-12(fp)
 8000874:	80026b40 	call	80026b4 <alt_alarm_start>
 8000878:	1004403a 	cmpge	r2,r2,zero
 800087c:	1000041e 	bne	r2,zero,8000890 <altera_avalon_jtag_uart_init+0xac>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
 8000880:	e0fffd17 	ldw	r3,-12(fp)
 8000884:	00a00034 	movhi	r2,32768
 8000888:	10bfffc4 	addi	r2,r2,-1
 800088c:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
 8000890:	e037883a 	mov	sp,fp
 8000894:	dfc00117 	ldw	ra,4(sp)
 8000898:	df000017 	ldw	fp,0(sp)
 800089c:	dec00204 	addi	sp,sp,8
 80008a0:	f800283a 	ret

080008a4 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
 80008a4:	defff804 	addi	sp,sp,-32
 80008a8:	df000715 	stw	fp,28(sp)
 80008ac:	df000704 	addi	fp,sp,28
 80008b0:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
 80008b4:	e0bfff17 	ldw	r2,-4(fp)
 80008b8:	e0bffe15 	stw	r2,-8(fp)
  unsigned int base = sp->base;
 80008bc:	e0bffe17 	ldw	r2,-8(fp)
 80008c0:	10800017 	ldw	r2,0(r2)
 80008c4:	e0bffd15 	stw	r2,-12(fp)
 80008c8:	00000006 	br	80008cc <altera_avalon_jtag_uart_irq+0x28>
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 80008cc:	e0bffd17 	ldw	r2,-12(fp)
 80008d0:	10800104 	addi	r2,r2,4
 80008d4:	10800037 	ldwio	r2,0(r2)
 80008d8:	e0bffc15 	stw	r2,-16(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
 80008dc:	e0bffc17 	ldw	r2,-16(fp)
 80008e0:	1080c00c 	andi	r2,r2,768
 80008e4:	1005003a 	cmpeq	r2,r2,zero
 80008e8:	1000741e 	bne	r2,zero,8000abc <altera_avalon_jtag_uart_irq+0x218>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
 80008ec:	e0bffc17 	ldw	r2,-16(fp)
 80008f0:	1080400c 	andi	r2,r2,256
 80008f4:	1005003a 	cmpeq	r2,r2,zero
 80008f8:	1000351e 	bne	r2,zero,80009d0 <altera_avalon_jtag_uart_irq+0x12c>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
 80008fc:	00800074 	movhi	r2,1
 8000900:	e0bffb15 	stw	r2,-20(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 8000904:	e0bffe17 	ldw	r2,-8(fp)
 8000908:	10800a17 	ldw	r2,40(r2)
 800090c:	10800044 	addi	r2,r2,1
 8000910:	1081ffcc 	andi	r2,r2,2047
 8000914:	e0bffa15 	stw	r2,-24(fp)
        if (next == sp->rx_out)
 8000918:	e0bffe17 	ldw	r2,-8(fp)
 800091c:	10c00b17 	ldw	r3,44(r2)
 8000920:	e0bffa17 	ldw	r2,-24(fp)
 8000924:	18801626 	beq	r3,r2,8000980 <altera_avalon_jtag_uart_irq+0xdc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 8000928:	e0bffd17 	ldw	r2,-12(fp)
 800092c:	10800037 	ldwio	r2,0(r2)
 8000930:	e0bffb15 	stw	r2,-20(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
 8000934:	e0bffb17 	ldw	r2,-20(fp)
 8000938:	10a0000c 	andi	r2,r2,32768
 800093c:	1005003a 	cmpeq	r2,r2,zero
 8000940:	10000f1e 	bne	r2,zero,8000980 <altera_avalon_jtag_uart_irq+0xdc>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 8000944:	e0bffe17 	ldw	r2,-8(fp)
 8000948:	10c00a17 	ldw	r3,40(r2)
 800094c:	e0bffb17 	ldw	r2,-20(fp)
 8000950:	1009883a 	mov	r4,r2
 8000954:	e0bffe17 	ldw	r2,-8(fp)
 8000958:	1885883a 	add	r2,r3,r2
 800095c:	10800e04 	addi	r2,r2,56
 8000960:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 8000964:	e0bffe17 	ldw	r2,-8(fp)
 8000968:	10800a17 	ldw	r2,40(r2)
 800096c:	10800044 	addi	r2,r2,1
 8000970:	10c1ffcc 	andi	r3,r2,2047
 8000974:	e0bffe17 	ldw	r2,-8(fp)
 8000978:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
 800097c:	003fe106 	br	8000904 <altera_avalon_jtag_uart_irq+0x60>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
 8000980:	e0bffb17 	ldw	r2,-20(fp)
 8000984:	10bfffec 	andhi	r2,r2,65535
 8000988:	1005003a 	cmpeq	r2,r2,zero
 800098c:	1000101e 	bne	r2,zero,80009d0 <altera_avalon_jtag_uart_irq+0x12c>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 8000990:	e0bffe17 	ldw	r2,-8(fp)
 8000994:	10c00817 	ldw	r3,32(r2)
 8000998:	00bfff84 	movi	r2,-2
 800099c:	1886703a 	and	r3,r3,r2
 80009a0:	e0bffe17 	ldw	r2,-8(fp)
 80009a4:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
 80009a8:	e0bffd17 	ldw	r2,-12(fp)
 80009ac:	11000104 	addi	r4,r2,4
 80009b0:	e0bffe17 	ldw	r2,-8(fp)
 80009b4:	10800817 	ldw	r2,32(r2)
 80009b8:	1007883a 	mov	r3,r2
 80009bc:	2005883a 	mov	r2,r4
 80009c0:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 80009c4:	e0bffd17 	ldw	r2,-12(fp)
 80009c8:	10800104 	addi	r2,r2,4
 80009cc:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
 80009d0:	e0bffc17 	ldw	r2,-16(fp)
 80009d4:	1080800c 	andi	r2,r2,512
 80009d8:	1005003a 	cmpeq	r2,r2,zero
 80009dc:	103fbb1e 	bne	r2,zero,80008cc <altera_avalon_jtag_uart_irq+0x28>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
 80009e0:	e0bffc17 	ldw	r2,-16(fp)
 80009e4:	10bfffec 	andhi	r2,r2,65535
 80009e8:	1004d43a 	srli	r2,r2,16
 80009ec:	e0bff915 	stw	r2,-28(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
 80009f0:	00001506 	br	8000a48 <altera_avalon_jtag_uart_irq+0x1a4>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
 80009f4:	e13ffd17 	ldw	r4,-12(fp)
 80009f8:	e0bffe17 	ldw	r2,-8(fp)
 80009fc:	10c00d17 	ldw	r3,52(r2)
 8000a00:	e0bffe17 	ldw	r2,-8(fp)
 8000a04:	1885883a 	add	r2,r3,r2
 8000a08:	10820e04 	addi	r2,r2,2104
 8000a0c:	10800003 	ldbu	r2,0(r2)
 8000a10:	10c03fcc 	andi	r3,r2,255
 8000a14:	18c0201c 	xori	r3,r3,128
 8000a18:	18ffe004 	addi	r3,r3,-128
 8000a1c:	2005883a 	mov	r2,r4
 8000a20:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 8000a24:	e0bffe17 	ldw	r2,-8(fp)
 8000a28:	10800d17 	ldw	r2,52(r2)
 8000a2c:	10800044 	addi	r2,r2,1
 8000a30:	10c1ffcc 	andi	r3,r2,2047
 8000a34:	e0bffe17 	ldw	r2,-8(fp)
 8000a38:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
 8000a3c:	e0bff917 	ldw	r2,-28(fp)
 8000a40:	10bfffc4 	addi	r2,r2,-1
 8000a44:	e0bff915 	stw	r2,-28(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
 8000a48:	e0bff917 	ldw	r2,-28(fp)
 8000a4c:	1005003a 	cmpeq	r2,r2,zero
 8000a50:	1000051e 	bne	r2,zero,8000a68 <altera_avalon_jtag_uart_irq+0x1c4>
 8000a54:	e0bffe17 	ldw	r2,-8(fp)
 8000a58:	10c00d17 	ldw	r3,52(r2)
 8000a5c:	e0bffe17 	ldw	r2,-8(fp)
 8000a60:	10800c17 	ldw	r2,48(r2)
 8000a64:	18bfe31e 	bne	r3,r2,80009f4 <altera_avalon_jtag_uart_irq+0x150>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
 8000a68:	e0bff917 	ldw	r2,-28(fp)
 8000a6c:	1005003a 	cmpeq	r2,r2,zero
 8000a70:	103f961e 	bne	r2,zero,80008cc <altera_avalon_jtag_uart_irq+0x28>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 8000a74:	e0bffe17 	ldw	r2,-8(fp)
 8000a78:	10c00817 	ldw	r3,32(r2)
 8000a7c:	00bfff44 	movi	r2,-3
 8000a80:	1886703a 	and	r3,r3,r2
 8000a84:	e0bffe17 	ldw	r2,-8(fp)
 8000a88:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 8000a8c:	e0bffe17 	ldw	r2,-8(fp)
 8000a90:	10800017 	ldw	r2,0(r2)
 8000a94:	11000104 	addi	r4,r2,4
 8000a98:	e0bffe17 	ldw	r2,-8(fp)
 8000a9c:	10800817 	ldw	r2,32(r2)
 8000aa0:	1007883a 	mov	r3,r2
 8000aa4:	2005883a 	mov	r2,r4
 8000aa8:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 8000aac:	e0bffd17 	ldw	r2,-12(fp)
 8000ab0:	10800104 	addi	r2,r2,4
 8000ab4:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
 8000ab8:	003f8406 	br	80008cc <altera_avalon_jtag_uart_irq+0x28>
}
 8000abc:	e037883a 	mov	sp,fp
 8000ac0:	df000017 	ldw	fp,0(sp)
 8000ac4:	dec00104 	addi	sp,sp,4
 8000ac8:	f800283a 	ret

08000acc <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
 8000acc:	defffc04 	addi	sp,sp,-16
 8000ad0:	df000315 	stw	fp,12(sp)
 8000ad4:	df000304 	addi	fp,sp,12
 8000ad8:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
 8000adc:	e0bfff17 	ldw	r2,-4(fp)
 8000ae0:	e0bffe15 	stw	r2,-8(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
 8000ae4:	e0bffe17 	ldw	r2,-8(fp)
 8000ae8:	10800017 	ldw	r2,0(r2)
 8000aec:	10800104 	addi	r2,r2,4
 8000af0:	10800037 	ldwio	r2,0(r2)
 8000af4:	e0bffd15 	stw	r2,-12(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
 8000af8:	e0bffd17 	ldw	r2,-12(fp)
 8000afc:	1081000c 	andi	r2,r2,1024
 8000b00:	1005003a 	cmpeq	r2,r2,zero
 8000b04:	10000c1e 	bne	r2,zero,8000b38 <altera_avalon_jtag_uart_timeout+0x6c>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
 8000b08:	e0bffe17 	ldw	r2,-8(fp)
 8000b0c:	10800017 	ldw	r2,0(r2)
 8000b10:	11000104 	addi	r4,r2,4
 8000b14:	e0bffe17 	ldw	r2,-8(fp)
 8000b18:	10800817 	ldw	r2,32(r2)
 8000b1c:	10810014 	ori	r2,r2,1024
 8000b20:	1007883a 	mov	r3,r2
 8000b24:	2005883a 	mov	r2,r4
 8000b28:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
 8000b2c:	e0bffe17 	ldw	r2,-8(fp)
 8000b30:	10000915 	stw	zero,36(r2)
 8000b34:	00000a06 	br	8000b60 <altera_avalon_jtag_uart_timeout+0x94>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
 8000b38:	e0bffe17 	ldw	r2,-8(fp)
 8000b3c:	10c00917 	ldw	r3,36(r2)
 8000b40:	00a00034 	movhi	r2,32768
 8000b44:	10bfff04 	addi	r2,r2,-4
 8000b48:	10c00536 	bltu	r2,r3,8000b60 <altera_avalon_jtag_uart_timeout+0x94>
    sp->host_inactive++;
 8000b4c:	e0bffe17 	ldw	r2,-8(fp)
 8000b50:	10800917 	ldw	r2,36(r2)
 8000b54:	10c00044 	addi	r3,r2,1
 8000b58:	e0bffe17 	ldw	r2,-8(fp)
 8000b5c:	10c00915 	stw	r3,36(r2)
 8000b60:	00820034 	movhi	r2,2048
 8000b64:	109aa804 	addi	r2,r2,27296
 8000b68:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
 8000b6c:	e037883a 	mov	sp,fp
 8000b70:	df000017 	ldw	fp,0(sp)
 8000b74:	dec00104 	addi	sp,sp,4
 8000b78:	f800283a 	ret

08000b7c <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
 8000b7c:	defffc04 	addi	sp,sp,-16
 8000b80:	df000315 	stw	fp,12(sp)
 8000b84:	df000304 	addi	fp,sp,12
 8000b88:	e13ffd15 	stw	r4,-12(fp)
 8000b8c:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 8000b90:	00000706 	br	8000bb0 <altera_avalon_jtag_uart_close+0x34>
    if (flags & O_NONBLOCK) {
 8000b94:	e0bffe17 	ldw	r2,-8(fp)
 8000b98:	1090000c 	andi	r2,r2,16384
 8000b9c:	1005003a 	cmpeq	r2,r2,zero
 8000ba0:	1000031e 	bne	r2,zero,8000bb0 <altera_avalon_jtag_uart_close+0x34>
      return -EWOULDBLOCK; 
 8000ba4:	00bffd44 	movi	r2,-11
 8000ba8:	e0bfff15 	stw	r2,-4(fp)
 8000bac:	00000b06 	br	8000bdc <altera_avalon_jtag_uart_close+0x60>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 8000bb0:	e0bffd17 	ldw	r2,-12(fp)
 8000bb4:	10c00d17 	ldw	r3,52(r2)
 8000bb8:	e0bffd17 	ldw	r2,-12(fp)
 8000bbc:	10800c17 	ldw	r2,48(r2)
 8000bc0:	18800526 	beq	r3,r2,8000bd8 <altera_avalon_jtag_uart_close+0x5c>
 8000bc4:	e0bffd17 	ldw	r2,-12(fp)
 8000bc8:	10c00917 	ldw	r3,36(r2)
 8000bcc:	e0bffd17 	ldw	r2,-12(fp)
 8000bd0:	10800117 	ldw	r2,4(r2)
 8000bd4:	18bfef36 	bltu	r3,r2,8000b94 <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
 8000bd8:	e03fff15 	stw	zero,-4(fp)
 8000bdc:	e0bfff17 	ldw	r2,-4(fp)
}
 8000be0:	e037883a 	mov	sp,fp
 8000be4:	df000017 	ldw	fp,0(sp)
 8000be8:	dec00104 	addi	sp,sp,4
 8000bec:	f800283a 	ret

08000bf0 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
 8000bf0:	defff804 	addi	sp,sp,-32
 8000bf4:	df000715 	stw	fp,28(sp)
 8000bf8:	df000704 	addi	fp,sp,28
 8000bfc:	e13ffb15 	stw	r4,-20(fp)
 8000c00:	e17ffc15 	stw	r5,-16(fp)
 8000c04:	e1bffd15 	stw	r6,-12(fp)
  int rc = -ENOTTY;
 8000c08:	00bff9c4 	movi	r2,-25
 8000c0c:	e0bffa15 	stw	r2,-24(fp)

  switch (req)
 8000c10:	e0bffc17 	ldw	r2,-16(fp)
 8000c14:	e0bfff15 	stw	r2,-4(fp)
 8000c18:	e0ffff17 	ldw	r3,-4(fp)
 8000c1c:	189a8060 	cmpeqi	r2,r3,27137
 8000c20:	1000041e 	bne	r2,zero,8000c34 <altera_avalon_jtag_uart_ioctl+0x44>
 8000c24:	e0ffff17 	ldw	r3,-4(fp)
 8000c28:	189a80a0 	cmpeqi	r2,r3,27138
 8000c2c:	10001b1e 	bne	r2,zero,8000c9c <altera_avalon_jtag_uart_ioctl+0xac>
 8000c30:	00002706 	br	8000cd0 <altera_avalon_jtag_uart_ioctl+0xe0>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
 8000c34:	e0bffb17 	ldw	r2,-20(fp)
 8000c38:	10c00117 	ldw	r3,4(r2)
 8000c3c:	00a00034 	movhi	r2,32768
 8000c40:	10bfffc4 	addi	r2,r2,-1
 8000c44:	18802226 	beq	r3,r2,8000cd0 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
 8000c48:	e0bffd17 	ldw	r2,-12(fp)
 8000c4c:	10800017 	ldw	r2,0(r2)
 8000c50:	e0bff915 	stw	r2,-28(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
 8000c54:	e0bff917 	ldw	r2,-28(fp)
 8000c58:	10800090 	cmplti	r2,r2,2
 8000c5c:	1000071e 	bne	r2,zero,8000c7c <altera_avalon_jtag_uart_ioctl+0x8c>
 8000c60:	e0fff917 	ldw	r3,-28(fp)
 8000c64:	00a00034 	movhi	r2,32768
 8000c68:	10bfffc4 	addi	r2,r2,-1
 8000c6c:	18800326 	beq	r3,r2,8000c7c <altera_avalon_jtag_uart_ioctl+0x8c>
 8000c70:	e0bff917 	ldw	r2,-28(fp)
 8000c74:	e0bffe15 	stw	r2,-8(fp)
 8000c78:	00000306 	br	8000c88 <altera_avalon_jtag_uart_ioctl+0x98>
 8000c7c:	00e00034 	movhi	r3,32768
 8000c80:	18ffff84 	addi	r3,r3,-2
 8000c84:	e0fffe15 	stw	r3,-8(fp)
 8000c88:	e0bffb17 	ldw	r2,-20(fp)
 8000c8c:	e0fffe17 	ldw	r3,-8(fp)
 8000c90:	10c00115 	stw	r3,4(r2)
      rc = 0;
 8000c94:	e03ffa15 	stw	zero,-24(fp)
    }
    break;
 8000c98:	00000d06 	br	8000cd0 <altera_avalon_jtag_uart_ioctl+0xe0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
 8000c9c:	e0bffb17 	ldw	r2,-20(fp)
 8000ca0:	10c00117 	ldw	r3,4(r2)
 8000ca4:	00a00034 	movhi	r2,32768
 8000ca8:	10bfffc4 	addi	r2,r2,-1
 8000cac:	18800826 	beq	r3,r2,8000cd0 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
 8000cb0:	e13ffd17 	ldw	r4,-12(fp)
 8000cb4:	e0bffb17 	ldw	r2,-20(fp)
 8000cb8:	10c00917 	ldw	r3,36(r2)
 8000cbc:	e0bffb17 	ldw	r2,-20(fp)
 8000cc0:	10800117 	ldw	r2,4(r2)
 8000cc4:	1885803a 	cmpltu	r2,r3,r2
 8000cc8:	20800015 	stw	r2,0(r4)
      rc = 0;
 8000ccc:	e03ffa15 	stw	zero,-24(fp)

  default:
    break;
  }

  return rc;
 8000cd0:	e0bffa17 	ldw	r2,-24(fp)
}
 8000cd4:	e037883a 	mov	sp,fp
 8000cd8:	df000017 	ldw	fp,0(sp)
 8000cdc:	dec00104 	addi	sp,sp,4
 8000ce0:	f800283a 	ret

08000ce4 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
 8000ce4:	defff204 	addi	sp,sp,-56
 8000ce8:	dfc00d15 	stw	ra,52(sp)
 8000cec:	df000c15 	stw	fp,48(sp)
 8000cf0:	df000c04 	addi	fp,sp,48
 8000cf4:	e13ffb15 	stw	r4,-20(fp)
 8000cf8:	e17ffc15 	stw	r5,-16(fp)
 8000cfc:	e1bffd15 	stw	r6,-12(fp)
 8000d00:	e1fffe15 	stw	r7,-8(fp)
  char * ptr = buffer;
 8000d04:	e0bffc17 	ldw	r2,-16(fp)
 8000d08:	e0bffa15 	stw	r2,-24(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 8000d0c:	00004806 	br	8000e30 <altera_avalon_jtag_uart_read+0x14c>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
 8000d10:	e0bffb17 	ldw	r2,-20(fp)
 8000d14:	10800a17 	ldw	r2,40(r2)
 8000d18:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
 8000d1c:	e0bffb17 	ldw	r2,-20(fp)
 8000d20:	10800b17 	ldw	r2,44(r2)
 8000d24:	e0bff615 	stw	r2,-40(fp)

      if (in >= out)
 8000d28:	e0fff717 	ldw	r3,-36(fp)
 8000d2c:	e0bff617 	ldw	r2,-40(fp)
 8000d30:	18800536 	bltu	r3,r2,8000d48 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
 8000d34:	e0bff717 	ldw	r2,-36(fp)
 8000d38:	e0fff617 	ldw	r3,-40(fp)
 8000d3c:	10c5c83a 	sub	r2,r2,r3
 8000d40:	e0bff815 	stw	r2,-32(fp)
 8000d44:	00000406 	br	8000d58 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
 8000d48:	00820004 	movi	r2,2048
 8000d4c:	e0fff617 	ldw	r3,-40(fp)
 8000d50:	10c5c83a 	sub	r2,r2,r3
 8000d54:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
 8000d58:	e0bff817 	ldw	r2,-32(fp)
 8000d5c:	1005003a 	cmpeq	r2,r2,zero
 8000d60:	10001f1e 	bne	r2,zero,8000de0 <altera_avalon_jtag_uart_read+0xfc>
        break; /* No more data available */

      if (n > space)
 8000d64:	e0fffd17 	ldw	r3,-12(fp)
 8000d68:	e0bff817 	ldw	r2,-32(fp)
 8000d6c:	1880022e 	bgeu	r3,r2,8000d78 <altera_avalon_jtag_uart_read+0x94>
        n = space;
 8000d70:	e0bffd17 	ldw	r2,-12(fp)
 8000d74:	e0bff815 	stw	r2,-32(fp)

      memcpy(ptr, sp->rx_buf + out, n);
 8000d78:	e0bffb17 	ldw	r2,-20(fp)
 8000d7c:	10c00e04 	addi	r3,r2,56
 8000d80:	e0bff617 	ldw	r2,-40(fp)
 8000d84:	1887883a 	add	r3,r3,r2
 8000d88:	e0bffa17 	ldw	r2,-24(fp)
 8000d8c:	1009883a 	mov	r4,r2
 8000d90:	180b883a 	mov	r5,r3
 8000d94:	e1bff817 	ldw	r6,-32(fp)
 8000d98:	800388c0 	call	800388c <memcpy>
      ptr   += n;
 8000d9c:	e0fff817 	ldw	r3,-32(fp)
 8000da0:	e0bffa17 	ldw	r2,-24(fp)
 8000da4:	10c5883a 	add	r2,r2,r3
 8000da8:	e0bffa15 	stw	r2,-24(fp)
      space -= n;
 8000dac:	e0fffd17 	ldw	r3,-12(fp)
 8000db0:	e0bff817 	ldw	r2,-32(fp)
 8000db4:	1885c83a 	sub	r2,r3,r2
 8000db8:	e0bffd15 	stw	r2,-12(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 8000dbc:	e0fff617 	ldw	r3,-40(fp)
 8000dc0:	e0bff817 	ldw	r2,-32(fp)
 8000dc4:	1885883a 	add	r2,r3,r2
 8000dc8:	10c1ffcc 	andi	r3,r2,2047
 8000dcc:	e0bffb17 	ldw	r2,-20(fp)
 8000dd0:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
 8000dd4:	e0bffd17 	ldw	r2,-12(fp)
 8000dd8:	10800048 	cmpgei	r2,r2,1
 8000ddc:	103fcc1e 	bne	r2,zero,8000d10 <altera_avalon_jtag_uart_read+0x2c>

    /* If we read any data then return it */
    if (ptr != buffer)
 8000de0:	e0fffa17 	ldw	r3,-24(fp)
 8000de4:	e0bffc17 	ldw	r2,-16(fp)
 8000de8:	1880141e 	bne	r3,r2,8000e3c <altera_avalon_jtag_uart_read+0x158>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
 8000dec:	e0bffe17 	ldw	r2,-8(fp)
 8000df0:	1090000c 	andi	r2,r2,16384
 8000df4:	1004c03a 	cmpne	r2,r2,zero
 8000df8:	1000101e 	bne	r2,zero,8000e3c <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
 8000dfc:	e0bffb17 	ldw	r2,-20(fp)
 8000e00:	10c00a17 	ldw	r3,40(r2)
 8000e04:	e0bff717 	ldw	r2,-36(fp)
 8000e08:	1880051e 	bne	r3,r2,8000e20 <altera_avalon_jtag_uart_read+0x13c>
 8000e0c:	e0bffb17 	ldw	r2,-20(fp)
 8000e10:	10c00917 	ldw	r3,36(r2)
 8000e14:	e0bffb17 	ldw	r2,-20(fp)
 8000e18:	10800117 	ldw	r2,4(r2)
 8000e1c:	18bff736 	bltu	r3,r2,8000dfc <altera_avalon_jtag_uart_read+0x118>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
 8000e20:	e0bffb17 	ldw	r2,-20(fp)
 8000e24:	10c00a17 	ldw	r3,40(r2)
 8000e28:	e0bff717 	ldw	r2,-36(fp)
 8000e2c:	18800326 	beq	r3,r2,8000e3c <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 8000e30:	e0bffd17 	ldw	r2,-12(fp)
 8000e34:	10800048 	cmpgei	r2,r2,1
 8000e38:	103fb51e 	bne	r2,zero,8000d10 <altera_avalon_jtag_uart_read+0x2c>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
 8000e3c:	e0fffa17 	ldw	r3,-24(fp)
 8000e40:	e0bffc17 	ldw	r2,-16(fp)
 8000e44:	18801926 	beq	r3,r2,8000eac <altera_avalon_jtag_uart_read+0x1c8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8000e48:	0005303a 	rdctl	r2,status
 8000e4c:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8000e50:	e0fff517 	ldw	r3,-44(fp)
 8000e54:	00bfff84 	movi	r2,-2
 8000e58:	1884703a 	and	r2,r3,r2
 8000e5c:	1001703a 	wrctl	status,r2
  
  return context;
 8000e60:	e0bff517 	ldw	r2,-44(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
 8000e64:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 8000e68:	e0bffb17 	ldw	r2,-20(fp)
 8000e6c:	10800817 	ldw	r2,32(r2)
 8000e70:	10c00054 	ori	r3,r2,1
 8000e74:	e0bffb17 	ldw	r2,-20(fp)
 8000e78:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 8000e7c:	e0bffb17 	ldw	r2,-20(fp)
 8000e80:	10800017 	ldw	r2,0(r2)
 8000e84:	11000104 	addi	r4,r2,4
 8000e88:	e0bffb17 	ldw	r2,-20(fp)
 8000e8c:	10800817 	ldw	r2,32(r2)
 8000e90:	1007883a 	mov	r3,r2
 8000e94:	2005883a 	mov	r2,r4
 8000e98:	10c00035 	stwio	r3,0(r2)
 8000e9c:	e0bff917 	ldw	r2,-28(fp)
 8000ea0:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8000ea4:	e0bff417 	ldw	r2,-48(fp)
 8000ea8:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
 8000eac:	e0fffa17 	ldw	r3,-24(fp)
 8000eb0:	e0bffc17 	ldw	r2,-16(fp)
 8000eb4:	18800526 	beq	r3,r2,8000ecc <altera_avalon_jtag_uart_read+0x1e8>
    return ptr - buffer;
 8000eb8:	e0fffa17 	ldw	r3,-24(fp)
 8000ebc:	e0bffc17 	ldw	r2,-16(fp)
 8000ec0:	1887c83a 	sub	r3,r3,r2
 8000ec4:	e0ffff15 	stw	r3,-4(fp)
 8000ec8:	00000906 	br	8000ef0 <altera_avalon_jtag_uart_read+0x20c>
  else if (flags & O_NONBLOCK)
 8000ecc:	e0bffe17 	ldw	r2,-8(fp)
 8000ed0:	1090000c 	andi	r2,r2,16384
 8000ed4:	1005003a 	cmpeq	r2,r2,zero
 8000ed8:	1000031e 	bne	r2,zero,8000ee8 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
 8000edc:	00bffd44 	movi	r2,-11
 8000ee0:	e0bfff15 	stw	r2,-4(fp)
 8000ee4:	00000206 	br	8000ef0 <altera_avalon_jtag_uart_read+0x20c>
  else
    return -EIO;
 8000ee8:	00bffec4 	movi	r2,-5
 8000eec:	e0bfff15 	stw	r2,-4(fp)
 8000ef0:	e0bfff17 	ldw	r2,-4(fp)
}
 8000ef4:	e037883a 	mov	sp,fp
 8000ef8:	dfc00117 	ldw	ra,4(sp)
 8000efc:	df000017 	ldw	fp,0(sp)
 8000f00:	dec00204 	addi	sp,sp,8
 8000f04:	f800283a 	ret

08000f08 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 8000f08:	defff204 	addi	sp,sp,-56
 8000f0c:	dfc00d15 	stw	ra,52(sp)
 8000f10:	df000c15 	stw	fp,48(sp)
 8000f14:	df000c04 	addi	fp,sp,48
 8000f18:	e13ffb15 	stw	r4,-20(fp)
 8000f1c:	e17ffc15 	stw	r5,-16(fp)
 8000f20:	e1bffd15 	stw	r6,-12(fp)
 8000f24:	e1fffe15 	stw	r7,-8(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
 8000f28:	e03ff915 	stw	zero,-28(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
 8000f2c:	e0bffc17 	ldw	r2,-16(fp)
 8000f30:	e0bff615 	stw	r2,-40(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 8000f34:	00003a06 	br	8001020 <altera_avalon_jtag_uart_write+0x118>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
 8000f38:	e0bffb17 	ldw	r2,-20(fp)
 8000f3c:	10800c17 	ldw	r2,48(r2)
 8000f40:	e0bffa15 	stw	r2,-24(fp)
      out = sp->tx_out;
 8000f44:	e0bffb17 	ldw	r2,-20(fp)
 8000f48:	10800d17 	ldw	r2,52(r2)
 8000f4c:	e0bff915 	stw	r2,-28(fp)

      if (in < out)
 8000f50:	e0fffa17 	ldw	r3,-24(fp)
 8000f54:	e0bff917 	ldw	r2,-28(fp)
 8000f58:	1880062e 	bgeu	r3,r2,8000f74 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
 8000f5c:	e0fff917 	ldw	r3,-28(fp)
 8000f60:	e0bffa17 	ldw	r2,-24(fp)
 8000f64:	1885c83a 	sub	r2,r3,r2
 8000f68:	10bfffc4 	addi	r2,r2,-1
 8000f6c:	e0bff815 	stw	r2,-32(fp)
 8000f70:	00000c06 	br	8000fa4 <altera_avalon_jtag_uart_write+0x9c>
      else if (out > 0)
 8000f74:	e0bff917 	ldw	r2,-28(fp)
 8000f78:	1005003a 	cmpeq	r2,r2,zero
 8000f7c:	1000051e 	bne	r2,zero,8000f94 <altera_avalon_jtag_uart_write+0x8c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
 8000f80:	00820004 	movi	r2,2048
 8000f84:	e0fffa17 	ldw	r3,-24(fp)
 8000f88:	10c5c83a 	sub	r2,r2,r3
 8000f8c:	e0bff815 	stw	r2,-32(fp)
 8000f90:	00000406 	br	8000fa4 <altera_avalon_jtag_uart_write+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
 8000f94:	0081ffc4 	movi	r2,2047
 8000f98:	e0fffa17 	ldw	r3,-24(fp)
 8000f9c:	10c5c83a 	sub	r2,r2,r3
 8000fa0:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
 8000fa4:	e0bff817 	ldw	r2,-32(fp)
 8000fa8:	1005003a 	cmpeq	r2,r2,zero
 8000fac:	10001f1e 	bne	r2,zero,800102c <altera_avalon_jtag_uart_write+0x124>
        break;

      if (n > count)
 8000fb0:	e0fffd17 	ldw	r3,-12(fp)
 8000fb4:	e0bff817 	ldw	r2,-32(fp)
 8000fb8:	1880022e 	bgeu	r3,r2,8000fc4 <altera_avalon_jtag_uart_write+0xbc>
        n = count;
 8000fbc:	e0bffd17 	ldw	r2,-12(fp)
 8000fc0:	e0bff815 	stw	r2,-32(fp)

      memcpy(sp->tx_buf + in, ptr, n);
 8000fc4:	e0bffb17 	ldw	r2,-20(fp)
 8000fc8:	10c20e04 	addi	r3,r2,2104
 8000fcc:	e0bffa17 	ldw	r2,-24(fp)
 8000fd0:	1885883a 	add	r2,r3,r2
 8000fd4:	e0fffc17 	ldw	r3,-16(fp)
 8000fd8:	1009883a 	mov	r4,r2
 8000fdc:	180b883a 	mov	r5,r3
 8000fe0:	e1bff817 	ldw	r6,-32(fp)
 8000fe4:	800388c0 	call	800388c <memcpy>
      ptr   += n;
 8000fe8:	e0fff817 	ldw	r3,-32(fp)
 8000fec:	e0bffc17 	ldw	r2,-16(fp)
 8000ff0:	10c5883a 	add	r2,r2,r3
 8000ff4:	e0bffc15 	stw	r2,-16(fp)
      count -= n;
 8000ff8:	e0fffd17 	ldw	r3,-12(fp)
 8000ffc:	e0bff817 	ldw	r2,-32(fp)
 8001000:	1885c83a 	sub	r2,r3,r2
 8001004:	e0bffd15 	stw	r2,-12(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 8001008:	e0fffa17 	ldw	r3,-24(fp)
 800100c:	e0bff817 	ldw	r2,-32(fp)
 8001010:	1885883a 	add	r2,r3,r2
 8001014:	10c1ffcc 	andi	r3,r2,2047
 8001018:	e0bffb17 	ldw	r2,-20(fp)
 800101c:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 8001020:	e0bffd17 	ldw	r2,-12(fp)
 8001024:	10800048 	cmpgei	r2,r2,1
 8001028:	103fc31e 	bne	r2,zero,8000f38 <altera_avalon_jtag_uart_write+0x30>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 800102c:	0005303a 	rdctl	r2,status
 8001030:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8001034:	e0fff517 	ldw	r3,-44(fp)
 8001038:	00bfff84 	movi	r2,-2
 800103c:	1884703a 	and	r2,r3,r2
 8001040:	1001703a 	wrctl	status,r2
  
  return context;
 8001044:	e0bff517 	ldw	r2,-44(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
 8001048:	e0bff715 	stw	r2,-36(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 800104c:	e0bffb17 	ldw	r2,-20(fp)
 8001050:	10800817 	ldw	r2,32(r2)
 8001054:	10c00094 	ori	r3,r2,2
 8001058:	e0bffb17 	ldw	r2,-20(fp)
 800105c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 8001060:	e0bffb17 	ldw	r2,-20(fp)
 8001064:	10800017 	ldw	r2,0(r2)
 8001068:	11000104 	addi	r4,r2,4
 800106c:	e0bffb17 	ldw	r2,-20(fp)
 8001070:	10800817 	ldw	r2,32(r2)
 8001074:	1007883a 	mov	r3,r2
 8001078:	2005883a 	mov	r2,r4
 800107c:	10c00035 	stwio	r3,0(r2)
 8001080:	e0bff717 	ldw	r2,-36(fp)
 8001084:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8001088:	e0bff417 	ldw	r2,-48(fp)
 800108c:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
 8001090:	e0bffd17 	ldw	r2,-12(fp)
 8001094:	10800050 	cmplti	r2,r2,1
 8001098:	1000111e 	bne	r2,zero,80010e0 <altera_avalon_jtag_uart_write+0x1d8>
    {
      if (flags & O_NONBLOCK)
 800109c:	e0bffe17 	ldw	r2,-8(fp)
 80010a0:	1090000c 	andi	r2,r2,16384
 80010a4:	1004c03a 	cmpne	r2,r2,zero
 80010a8:	1000101e 	bne	r2,zero,80010ec <altera_avalon_jtag_uart_write+0x1e4>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
 80010ac:	e0bffb17 	ldw	r2,-20(fp)
 80010b0:	10c00d17 	ldw	r3,52(r2)
 80010b4:	e0bff917 	ldw	r2,-28(fp)
 80010b8:	1880051e 	bne	r3,r2,80010d0 <altera_avalon_jtag_uart_write+0x1c8>
 80010bc:	e0bffb17 	ldw	r2,-20(fp)
 80010c0:	10c00917 	ldw	r3,36(r2)
 80010c4:	e0bffb17 	ldw	r2,-20(fp)
 80010c8:	10800117 	ldw	r2,4(r2)
 80010cc:	18bff736 	bltu	r3,r2,80010ac <altera_avalon_jtag_uart_write+0x1a4>
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
 80010d0:	e0bffb17 	ldw	r2,-20(fp)
 80010d4:	10c00d17 	ldw	r3,52(r2)
 80010d8:	e0bff917 	ldw	r2,-28(fp)
 80010dc:	18800326 	beq	r3,r2,80010ec <altera_avalon_jtag_uart_write+0x1e4>
        break;
    }
  }
  while (count > 0);
 80010e0:	e0bffd17 	ldw	r2,-12(fp)
 80010e4:	10800048 	cmpgei	r2,r2,1
 80010e8:	103fcd1e 	bne	r2,zero,8001020 <altera_avalon_jtag_uart_write+0x118>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
 80010ec:	e0fffc17 	ldw	r3,-16(fp)
 80010f0:	e0bff617 	ldw	r2,-40(fp)
 80010f4:	18800526 	beq	r3,r2,800110c <altera_avalon_jtag_uart_write+0x204>
    return ptr - start;
 80010f8:	e0fffc17 	ldw	r3,-16(fp)
 80010fc:	e0bff617 	ldw	r2,-40(fp)
 8001100:	1887c83a 	sub	r3,r3,r2
 8001104:	e0ffff15 	stw	r3,-4(fp)
 8001108:	00000906 	br	8001130 <altera_avalon_jtag_uart_write+0x228>
  else if (flags & O_NONBLOCK)
 800110c:	e0bffe17 	ldw	r2,-8(fp)
 8001110:	1090000c 	andi	r2,r2,16384
 8001114:	1005003a 	cmpeq	r2,r2,zero
 8001118:	1000031e 	bne	r2,zero,8001128 <altera_avalon_jtag_uart_write+0x220>
    return -EWOULDBLOCK;
 800111c:	00bffd44 	movi	r2,-11
 8001120:	e0bfff15 	stw	r2,-4(fp)
 8001124:	00000206 	br	8001130 <altera_avalon_jtag_uart_write+0x228>
  else
    return -EIO; /* Host not connected */
 8001128:	00bffec4 	movi	r2,-5
 800112c:	e0bfff15 	stw	r2,-4(fp)
 8001130:	e0bfff17 	ldw	r2,-4(fp)
}
 8001134:	e037883a 	mov	sp,fp
 8001138:	dfc00117 	ldw	ra,4(sp)
 800113c:	df000017 	ldw	fp,0(sp)
 8001140:	dec00204 	addi	sp,sp,8
 8001144:	f800283a 	ret

08001148 <alt_up_pixel_buffer_dma_open_dev>:

#include "altera_up_avalon_video_pixel_buffer_dma.h"

#define ABS(x)	((x >= 0) ? (x) : (-(x)))

alt_up_pixel_buffer_dma_dev* alt_up_pixel_buffer_dma_open_dev(const char* name) {
 8001148:	defffc04 	addi	sp,sp,-16
 800114c:	dfc00315 	stw	ra,12(sp)
 8001150:	df000215 	stw	fp,8(sp)
 8001154:	df000204 	addi	fp,sp,8
 8001158:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_pixel_buffer_dma_dev *dev = (alt_up_pixel_buffer_dma_dev*)alt_find_dev(name, &alt_dev_list);
 800115c:	e13fff17 	ldw	r4,-4(fp)
 8001160:	01420034 	movhi	r5,2048
 8001164:	2954f404 	addi	r5,r5,21456
 8001168:	8002bb00 	call	8002bb0 <alt_find_dev>
 800116c:	e0bffe15 	stw	r2,-8(fp)

  return dev;
 8001170:	e0bffe17 	ldw	r2,-8(fp)
}
 8001174:	e037883a 	mov	sp,fp
 8001178:	dfc00117 	ldw	ra,4(sp)
 800117c:	df000017 	ldw	fp,0(sp)
 8001180:	dec00204 	addi	sp,sp,8
 8001184:	f800283a 	ret

08001188 <alt_up_pixel_buffer_dma_draw>:

int alt_up_pixel_buffer_dma_draw(alt_up_pixel_buffer_dma_dev *pixel_buffer, unsigned int color, unsigned int x, unsigned int y)
/* This function draws a pixel to the back buffer.
 */
{
 8001188:	defff904 	addi	sp,sp,-28
 800118c:	df000615 	stw	fp,24(sp)
 8001190:	df000604 	addi	fp,sp,24
 8001194:	e13ffb15 	stw	r4,-20(fp)
 8001198:	e17ffc15 	stw	r5,-16(fp)
 800119c:	e1bffd15 	stw	r6,-12(fp)
 80011a0:	e1fffe15 	stw	r7,-8(fp)
	// boundary check
	if (x >= pixel_buffer->x_resolution || y >= pixel_buffer->y_resolution )
 80011a4:	e0bffb17 	ldw	r2,-20(fp)
 80011a8:	10c00f17 	ldw	r3,60(r2)
 80011ac:	e0bffd17 	ldw	r2,-12(fp)
 80011b0:	10c0042e 	bgeu	r2,r3,80011c4 <alt_up_pixel_buffer_dma_draw+0x3c>
 80011b4:	e0bffb17 	ldw	r2,-20(fp)
 80011b8:	10c01017 	ldw	r3,64(r2)
 80011bc:	e0bffe17 	ldw	r2,-8(fp)
 80011c0:	10c00336 	bltu	r2,r3,80011d0 <alt_up_pixel_buffer_dma_draw+0x48>
		return -1;
 80011c4:	00bfffc4 	movi	r2,-1
 80011c8:	e0bfff15 	stw	r2,-4(fp)
 80011cc:	00005106 	br	8001314 <alt_up_pixel_buffer_dma_draw+0x18c>

	unsigned int addr = 0;
 80011d0:	e03ffa15 	stw	zero,-24(fp)
	/* Check the mode VGA Pixel Buffer is using. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
 80011d4:	e0bffb17 	ldw	r2,-20(fp)
 80011d8:	10800d17 	ldw	r2,52(r2)
 80011dc:	1004c03a 	cmpne	r2,r2,zero
 80011e0:	1000151e 	bne	r2,zero,8001238 <alt_up_pixel_buffer_dma_draw+0xb0>
		/* For X-Y addressing mode, the address format is | unused | Y | X |. So shift bits for coordinates X and Y into their respective locations. */
		addr |= ((x & pixel_buffer->x_coord_mask) << pixel_buffer->x_coord_offset);
 80011e4:	e0bffb17 	ldw	r2,-20(fp)
 80011e8:	10c01217 	ldw	r3,72(r2)
 80011ec:	e0bffd17 	ldw	r2,-12(fp)
 80011f0:	1886703a 	and	r3,r3,r2
 80011f4:	e0bffb17 	ldw	r2,-20(fp)
 80011f8:	10801117 	ldw	r2,68(r2)
 80011fc:	1886983a 	sll	r3,r3,r2
 8001200:	e0bffa17 	ldw	r2,-24(fp)
 8001204:	10c4b03a 	or	r2,r2,r3
 8001208:	e0bffa15 	stw	r2,-24(fp)
		addr |= ((y & pixel_buffer->y_coord_mask) << pixel_buffer->y_coord_offset);
 800120c:	e0bffb17 	ldw	r2,-20(fp)
 8001210:	10c01417 	ldw	r3,80(r2)
 8001214:	e0bffe17 	ldw	r2,-8(fp)
 8001218:	1886703a 	and	r3,r3,r2
 800121c:	e0bffb17 	ldw	r2,-20(fp)
 8001220:	10801317 	ldw	r2,76(r2)
 8001224:	1886983a 	sll	r3,r3,r2
 8001228:	e0bffa17 	ldw	r2,-24(fp)
 800122c:	10c4b03a 	or	r2,r2,r3
 8001230:	e0bffa15 	stw	r2,-24(fp)
 8001234:	00001706 	br	8001294 <alt_up_pixel_buffer_dma_draw+0x10c>
	} else {
		/* In a consecutive addressing mode, the pixels are stored in consecutive memory locations. So the address of a pixel at (x,y) can be computed as
		 * (y*x_resolution + x).*/
		addr += ((x & pixel_buffer->x_coord_mask) << pixel_buffer->x_coord_offset);
 8001238:	e0bffb17 	ldw	r2,-20(fp)
 800123c:	10c01217 	ldw	r3,72(r2)
 8001240:	e0bffd17 	ldw	r2,-12(fp)
 8001244:	1886703a 	and	r3,r3,r2
 8001248:	e0bffb17 	ldw	r2,-20(fp)
 800124c:	10801117 	ldw	r2,68(r2)
 8001250:	1886983a 	sll	r3,r3,r2
 8001254:	e0bffa17 	ldw	r2,-24(fp)
 8001258:	10c5883a 	add	r2,r2,r3
 800125c:	e0bffa15 	stw	r2,-24(fp)
		addr += (((y & pixel_buffer->y_coord_mask) * pixel_buffer->x_resolution) << pixel_buffer->x_coord_offset);
 8001260:	e0bffb17 	ldw	r2,-20(fp)
 8001264:	10c01417 	ldw	r3,80(r2)
 8001268:	e0bffe17 	ldw	r2,-8(fp)
 800126c:	1886703a 	and	r3,r3,r2
 8001270:	e0bffb17 	ldw	r2,-20(fp)
 8001274:	10800f17 	ldw	r2,60(r2)
 8001278:	1887383a 	mul	r3,r3,r2
 800127c:	e0bffb17 	ldw	r2,-20(fp)
 8001280:	10801117 	ldw	r2,68(r2)
 8001284:	1886983a 	sll	r3,r3,r2
 8001288:	e0bffa17 	ldw	r2,-24(fp)
 800128c:	10c5883a 	add	r2,r2,r3
 8001290:	e0bffa15 	stw	r2,-24(fp)
	}
	/* Now, depending on the color depth, write the pixel color to the specified memory location. */
	if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
 8001294:	e0bffb17 	ldw	r2,-20(fp)
 8001298:	10800e17 	ldw	r2,56(r2)
 800129c:	10800058 	cmpnei	r2,r2,1
 80012a0:	1000081e 	bne	r2,zero,80012c4 <alt_up_pixel_buffer_dma_draw+0x13c>
		IOWR_8DIRECT(pixel_buffer->back_buffer_start_address, addr, color);
 80012a4:	e0bffb17 	ldw	r2,-20(fp)
 80012a8:	10800c17 	ldw	r2,48(r2)
 80012ac:	1007883a 	mov	r3,r2
 80012b0:	e0bffa17 	ldw	r2,-24(fp)
 80012b4:	1885883a 	add	r2,r3,r2
 80012b8:	e0fffc17 	ldw	r3,-16(fp)
 80012bc:	10c00025 	stbio	r3,0(r2)
 80012c0:	00001306 	br	8001310 <alt_up_pixel_buffer_dma_draw+0x188>
	} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
 80012c4:	e0bffb17 	ldw	r2,-20(fp)
 80012c8:	10800e17 	ldw	r2,56(r2)
 80012cc:	10800098 	cmpnei	r2,r2,2
 80012d0:	1000081e 	bne	r2,zero,80012f4 <alt_up_pixel_buffer_dma_draw+0x16c>
		IOWR_16DIRECT(pixel_buffer->back_buffer_start_address, addr, color);
 80012d4:	e0bffb17 	ldw	r2,-20(fp)
 80012d8:	10800c17 	ldw	r2,48(r2)
 80012dc:	1007883a 	mov	r3,r2
 80012e0:	e0bffa17 	ldw	r2,-24(fp)
 80012e4:	1885883a 	add	r2,r3,r2
 80012e8:	e0fffc17 	ldw	r3,-16(fp)
 80012ec:	10c0002d 	sthio	r3,0(r2)
 80012f0:	00000706 	br	8001310 <alt_up_pixel_buffer_dma_draw+0x188>
	} else {
		IOWR_32DIRECT(pixel_buffer->back_buffer_start_address, addr, color);
 80012f4:	e0bffb17 	ldw	r2,-20(fp)
 80012f8:	10800c17 	ldw	r2,48(r2)
 80012fc:	1007883a 	mov	r3,r2
 8001300:	e0bffa17 	ldw	r2,-24(fp)
 8001304:	1885883a 	add	r2,r3,r2
 8001308:	e0fffc17 	ldw	r3,-16(fp)
 800130c:	10c00035 	stwio	r3,0(r2)
	}

	return 0;
 8001310:	e03fff15 	stw	zero,-4(fp)
 8001314:	e0bfff17 	ldw	r2,-4(fp)
}
 8001318:	e037883a 	mov	sp,fp
 800131c:	df000017 	ldw	fp,0(sp)
 8001320:	dec00104 	addi	sp,sp,4
 8001324:	f800283a 	ret

08001328 <alt_up_pixel_buffer_dma_change_back_buffer_address>:

int alt_up_pixel_buffer_dma_change_back_buffer_address(alt_up_pixel_buffer_dma_dev *pixel_buffer, unsigned int new_address)
/* This function changes the memory address for the back buffer. */
{
 8001328:	defffd04 	addi	sp,sp,-12
 800132c:	df000215 	stw	fp,8(sp)
 8001330:	df000204 	addi	fp,sp,8
 8001334:	e13ffe15 	stw	r4,-8(fp)
 8001338:	e17fff15 	stw	r5,-4(fp)
	IOWR_32DIRECT(pixel_buffer->base, 4, new_address);
 800133c:	e0bffe17 	ldw	r2,-8(fp)
 8001340:	10800a17 	ldw	r2,40(r2)
 8001344:	10800104 	addi	r2,r2,4
 8001348:	e0ffff17 	ldw	r3,-4(fp)
 800134c:	10c00035 	stwio	r3,0(r2)
	pixel_buffer->back_buffer_start_address = IORD_32DIRECT(pixel_buffer->base, 4);
 8001350:	e0bffe17 	ldw	r2,-8(fp)
 8001354:	10800a17 	ldw	r2,40(r2)
 8001358:	10800104 	addi	r2,r2,4
 800135c:	10800037 	ldwio	r2,0(r2)
 8001360:	1007883a 	mov	r3,r2
 8001364:	e0bffe17 	ldw	r2,-8(fp)
 8001368:	10c00c15 	stw	r3,48(r2)
	return 0;
 800136c:	0005883a 	mov	r2,zero
}
 8001370:	e037883a 	mov	sp,fp
 8001374:	df000017 	ldw	fp,0(sp)
 8001378:	dec00104 	addi	sp,sp,4
 800137c:	f800283a 	ret

08001380 <alt_up_pixel_buffer_dma_swap_buffers>:

int alt_up_pixel_buffer_dma_swap_buffers(alt_up_pixel_buffer_dma_dev *pixel_buffer)
/* This function swaps the front and back buffers. At the next refresh cycle the back buffer will be drawn on the screen
 * and will become the front buffer. */
{
 8001380:	defffe04 	addi	sp,sp,-8
 8001384:	df000115 	stw	fp,4(sp)
 8001388:	df000104 	addi	fp,sp,4
 800138c:	e13fff15 	stw	r4,-4(fp)
	register unsigned int temp = pixel_buffer->back_buffer_start_address;
 8001390:	e0bfff17 	ldw	r2,-4(fp)
 8001394:	11000c17 	ldw	r4,48(r2)
	IOWR_32DIRECT(pixel_buffer->base, 0, 1);
 8001398:	e0bfff17 	ldw	r2,-4(fp)
 800139c:	10800a17 	ldw	r2,40(r2)
 80013a0:	1007883a 	mov	r3,r2
 80013a4:	00800044 	movi	r2,1
 80013a8:	18800035 	stwio	r2,0(r3)
	pixel_buffer->back_buffer_start_address = pixel_buffer->buffer_start_address;
 80013ac:	e0bfff17 	ldw	r2,-4(fp)
 80013b0:	10c00b17 	ldw	r3,44(r2)
 80013b4:	e0bfff17 	ldw	r2,-4(fp)
 80013b8:	10c00c15 	stw	r3,48(r2)
	pixel_buffer->buffer_start_address = temp;
 80013bc:	e0bfff17 	ldw	r2,-4(fp)
 80013c0:	11000b15 	stw	r4,44(r2)
	return 0;
 80013c4:	0005883a 	mov	r2,zero
}
 80013c8:	e037883a 	mov	sp,fp
 80013cc:	df000017 	ldw	fp,0(sp)
 80013d0:	dec00104 	addi	sp,sp,4
 80013d4:	f800283a 	ret

080013d8 <alt_up_pixel_buffer_dma_check_swap_buffers_status>:
int alt_up_pixel_buffer_dma_check_swap_buffers_status(alt_up_pixel_buffer_dma_dev *pixel_buffer)
/* This function checks if the buffer swap has occured. Since the buffer swap only happens after an entire screen is drawn,
 * it is important to wait for this function to return 0 before proceeding to draw on either buffer. When both front and the back buffers
 * have the same address calling the alt_up_pixel_buffer_dma_swap_buffers(...) function and then waiting for this function to return 0, causes your program to
 * wait for the screen to refresh. */
{
 80013d8:	defffe04 	addi	sp,sp,-8
 80013dc:	df000115 	stw	fp,4(sp)
 80013e0:	df000104 	addi	fp,sp,4
 80013e4:	e13fff15 	stw	r4,-4(fp)
	return (IORD_32DIRECT(pixel_buffer->base, 12) & 0x1);
 80013e8:	e0bfff17 	ldw	r2,-4(fp)
 80013ec:	10800a17 	ldw	r2,40(r2)
 80013f0:	10800304 	addi	r2,r2,12
 80013f4:	10800037 	ldwio	r2,0(r2)
 80013f8:	1080004c 	andi	r2,r2,1
}
 80013fc:	e037883a 	mov	sp,fp
 8001400:	df000017 	ldw	fp,0(sp)
 8001404:	dec00104 	addi	sp,sp,4
 8001408:	f800283a 	ret

0800140c <alt_up_pixel_buffer_dma_clear_screen>:

void alt_up_pixel_buffer_dma_clear_screen(alt_up_pixel_buffer_dma_dev *pixel_buffer, int backbuffer)
/* This function clears the screen by setting each pixel to a black color. */
{
 800140c:	defff604 	addi	sp,sp,-40
 8001410:	df000915 	stw	fp,36(sp)
 8001414:	df000904 	addi	fp,sp,36
 8001418:	e13ff715 	stw	r4,-36(fp)
 800141c:	e17ff815 	stw	r5,-32(fp)
	register unsigned int addr;
	register unsigned int limit_x, limit_y;
	
	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
 8001420:	e0bff817 	ldw	r2,-32(fp)
 8001424:	10800058 	cmpnei	r2,r2,1
 8001428:	1000041e 	bne	r2,zero,800143c <alt_up_pixel_buffer_dma_clear_screen+0x30>
		addr = pixel_buffer->back_buffer_start_address;
 800142c:	e0bff717 	ldw	r2,-36(fp)
 8001430:	10800c17 	ldw	r2,48(r2)
 8001434:	e0bfff15 	stw	r2,-4(fp)
 8001438:	00000306 	br	8001448 <alt_up_pixel_buffer_dma_clear_screen+0x3c>
	else
		addr = pixel_buffer->buffer_start_address;
 800143c:	e0bff717 	ldw	r2,-36(fp)
 8001440:	10800b17 	ldw	r2,44(r2)
 8001444:	e0bfff15 	stw	r2,-4(fp)
	limit_x = pixel_buffer->x_resolution;
 8001448:	e0bff717 	ldw	r2,-36(fp)
 800144c:	10800f17 	ldw	r2,60(r2)
 8001450:	e0bffe15 	stw	r2,-8(fp)
	/* In 16 and 32-bit color modes we use twice or four times more memory for the display buffer.*/
	if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
 8001454:	e0bff717 	ldw	r2,-36(fp)
 8001458:	10800e17 	ldw	r2,56(r2)
 800145c:	10800098 	cmpnei	r2,r2,2
 8001460:	1000051e 	bne	r2,zero,8001478 <alt_up_pixel_buffer_dma_clear_screen+0x6c>
		limit_x = limit_x << 1;
 8001464:	e0fffe17 	ldw	r3,-8(fp)
 8001468:	e0fffe17 	ldw	r3,-8(fp)
 800146c:	18c5883a 	add	r2,r3,r3
 8001470:	e0bffe15 	stw	r2,-8(fp)
 8001474:	00000506 	br	800148c <alt_up_pixel_buffer_dma_clear_screen+0x80>
	} else {
		limit_x = limit_x << 2;
 8001478:	e13ffe17 	ldw	r4,-8(fp)
 800147c:	e13ffe17 	ldw	r4,-8(fp)
 8001480:	2105883a 	add	r2,r4,r4
 8001484:	1085883a 	add	r2,r2,r2
 8001488:	e0bffe15 	stw	r2,-8(fp)
	}	
	limit_y = pixel_buffer->y_resolution;
 800148c:	e0bff717 	ldw	r2,-36(fp)
 8001490:	10801017 	ldw	r2,64(r2)
 8001494:	e0bffd15 	stw	r2,-12(fp)

	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
 8001498:	e0bff717 	ldw	r2,-36(fp)
 800149c:	10800d17 	ldw	r2,52(r2)
 80014a0:	1004c03a 	cmpne	r2,r2,zero
 80014a4:	10001e1e 	bne	r2,zero,8001520 <alt_up_pixel_buffer_dma_clear_screen+0x114>
		/* Clear the screen when the VGA is set up in an XY addressing mode. */
		register unsigned int x,y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
 80014a8:	e0bff717 	ldw	r2,-36(fp)
 80014ac:	10801317 	ldw	r2,76(r2)
 80014b0:	e0bffa15 	stw	r2,-24(fp)

		for (y = 0; y < limit_y; y++)
 80014b4:	e03ffb15 	stw	zero,-20(fp)
 80014b8:	00001506 	br	8001510 <alt_up_pixel_buffer_dma_clear_screen+0x104>
		{
			for (x = 0; x < limit_x; x = x + 4)
 80014bc:	e03ffc15 	stw	zero,-16(fp)
 80014c0:	00000706 	br	80014e0 <alt_up_pixel_buffer_dma_clear_screen+0xd4>
			{
				IOWR_32DIRECT(addr, x, 0);
 80014c4:	e0ffff17 	ldw	r3,-4(fp)
 80014c8:	e0bffc17 	ldw	r2,-16(fp)
 80014cc:	1885883a 	add	r2,r3,r2
 80014d0:	10000035 	stwio	zero,0(r2)
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;

		for (y = 0; y < limit_y; y++)
		{
			for (x = 0; x < limit_x; x = x + 4)
 80014d4:	e0bffc17 	ldw	r2,-16(fp)
 80014d8:	10800104 	addi	r2,r2,4
 80014dc:	e0bffc15 	stw	r2,-16(fp)
 80014e0:	e0fffc17 	ldw	r3,-16(fp)
 80014e4:	e13ffe17 	ldw	r4,-8(fp)
 80014e8:	193ff636 	bltu	r3,r4,80014c4 <alt_up_pixel_buffer_dma_clear_screen+0xb8>
			{
				IOWR_32DIRECT(addr, x, 0);
			}
			addr = addr + (1 << offset_y);
 80014ec:	e0fffa17 	ldw	r3,-24(fp)
 80014f0:	00800044 	movi	r2,1
 80014f4:	10c4983a 	sll	r2,r2,r3
 80014f8:	e0ffff17 	ldw	r3,-4(fp)
 80014fc:	1887883a 	add	r3,r3,r2
 8001500:	e0ffff15 	stw	r3,-4(fp)
		/* Clear the screen when the VGA is set up in an XY addressing mode. */
		register unsigned int x,y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;

		for (y = 0; y < limit_y; y++)
 8001504:	e13ffb17 	ldw	r4,-20(fp)
 8001508:	21000044 	addi	r4,r4,1
 800150c:	e13ffb15 	stw	r4,-20(fp)
 8001510:	e0bffb17 	ldw	r2,-20(fp)
 8001514:	e0fffd17 	ldw	r3,-12(fp)
 8001518:	10ffe836 	bltu	r2,r3,80014bc <alt_up_pixel_buffer_dma_clear_screen+0xb0>
 800151c:	00001006 	br	8001560 <alt_up_pixel_buffer_dma_clear_screen+0x154>
			addr = addr + (1 << offset_y);
		}
	} else {
		/* Clear the screen when the VGA is set up in a linear addressing mode. */
		register int x;
		limit_y = limit_x*limit_y;	
 8001520:	e13ffd17 	ldw	r4,-12(fp)
 8001524:	e0bffe17 	ldw	r2,-8(fp)
 8001528:	2089383a 	mul	r4,r4,r2
 800152c:	e13ffd15 	stw	r4,-12(fp)

		for (x = 0; x < limit_y; x = x + 4)
 8001530:	e03ff915 	stw	zero,-28(fp)
 8001534:	00000706 	br	8001554 <alt_up_pixel_buffer_dma_clear_screen+0x148>
		{
			IOWR_32DIRECT(addr, x, 0);
 8001538:	e0ffff17 	ldw	r3,-4(fp)
 800153c:	e0bff917 	ldw	r2,-28(fp)
 8001540:	1885883a 	add	r2,r3,r2
 8001544:	10000035 	stwio	zero,0(r2)
	} else {
		/* Clear the screen when the VGA is set up in a linear addressing mode. */
		register int x;
		limit_y = limit_x*limit_y;	

		for (x = 0; x < limit_y; x = x + 4)
 8001548:	e0fff917 	ldw	r3,-28(fp)
 800154c:	18c00104 	addi	r3,r3,4
 8001550:	e0fff915 	stw	r3,-28(fp)
 8001554:	e0bff917 	ldw	r2,-28(fp)
 8001558:	e13ffd17 	ldw	r4,-12(fp)
 800155c:	113ff636 	bltu	r2,r4,8001538 <alt_up_pixel_buffer_dma_clear_screen+0x12c>
		{
			IOWR_32DIRECT(addr, x, 0);
		}
	}
}
 8001560:	e037883a 	mov	sp,fp
 8001564:	df000017 	ldw	fp,0(sp)
 8001568:	dec00104 	addi	sp,sp,4
 800156c:	f800283a 	ret

08001570 <alt_up_pixel_buffer_dma_draw_box>:

void alt_up_pixel_buffer_dma_draw_box(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int y0, int x1, int y1, int color, int backbuffer)
/* This function draws a filled box. */
{
 8001570:	deffed04 	addi	sp,sp,-76
 8001574:	df001215 	stw	fp,72(sp)
 8001578:	df001204 	addi	fp,sp,72
 800157c:	e13fee15 	stw	r4,-72(fp)
 8001580:	e17fef15 	stw	r5,-68(fp)
 8001584:	e1bff015 	stw	r6,-64(fp)
 8001588:	e1fff115 	stw	r7,-60(fp)
	register unsigned int addr;
	register unsigned int limit_x = pixel_buffer->x_resolution;
 800158c:	e0bfee17 	ldw	r2,-72(fp)
 8001590:	10800f17 	ldw	r2,60(r2)
 8001594:	e0bffe15 	stw	r2,-8(fp)
	register unsigned int limit_y = pixel_buffer->y_resolution;
 8001598:	e0bfee17 	ldw	r2,-72(fp)
 800159c:	10801017 	ldw	r2,64(r2)
 80015a0:	e0bffd15 	stw	r2,-12(fp)
	register unsigned int temp;
	register unsigned int l_x = x0;
 80015a4:	e0bfef17 	ldw	r2,-68(fp)
 80015a8:	e0bffb15 	stw	r2,-20(fp)
	register unsigned int r_x = x1;
 80015ac:	e0fff117 	ldw	r3,-60(fp)
 80015b0:	e0fffa15 	stw	r3,-24(fp)
	register unsigned int t_y = y0;
 80015b4:	e13ff017 	ldw	r4,-64(fp)
 80015b8:	e13ff915 	stw	r4,-28(fp)
	register unsigned int b_y = y1;
 80015bc:	e0800117 	ldw	r2,4(fp)
 80015c0:	e0bff815 	stw	r2,-32(fp)
	register unsigned int local_color = color;
 80015c4:	e0c00217 	ldw	r3,8(fp)
 80015c8:	e0fff715 	stw	r3,-36(fp)
	
	/* Check coordinates */
	if (l_x > r_x)
 80015cc:	e13ffa17 	ldw	r4,-24(fp)
 80015d0:	e0bffb17 	ldw	r2,-20(fp)
 80015d4:	2080062e 	bgeu	r4,r2,80015f0 <alt_up_pixel_buffer_dma_draw_box+0x80>
	{
		temp = l_x;
 80015d8:	e0fffb17 	ldw	r3,-20(fp)
 80015dc:	e0fffc15 	stw	r3,-16(fp)
		l_x = r_x;
 80015e0:	e13ffa17 	ldw	r4,-24(fp)
 80015e4:	e13ffb15 	stw	r4,-20(fp)
		r_x = temp;
 80015e8:	e0bffc17 	ldw	r2,-16(fp)
 80015ec:	e0bffa15 	stw	r2,-24(fp)
	}
	if (t_y > b_y)
 80015f0:	e0fff817 	ldw	r3,-32(fp)
 80015f4:	e13ff917 	ldw	r4,-28(fp)
 80015f8:	1900062e 	bgeu	r3,r4,8001614 <alt_up_pixel_buffer_dma_draw_box+0xa4>
	{
		temp = t_y;
 80015fc:	e0bff917 	ldw	r2,-28(fp)
 8001600:	e0bffc15 	stw	r2,-16(fp)
		t_y = b_y;
 8001604:	e0fff817 	ldw	r3,-32(fp)
 8001608:	e0fff915 	stw	r3,-28(fp)
		b_y = temp;
 800160c:	e13ffc17 	ldw	r4,-16(fp)
 8001610:	e13ff815 	stw	r4,-32(fp)
	}
	if ((l_x >= limit_x) || (t_y >= limit_y) || (r_x < 0) || (b_y < 0))
 8001614:	e0bffb17 	ldw	r2,-20(fp)
 8001618:	e0fffe17 	ldw	r3,-8(fp)
 800161c:	10c10d2e 	bgeu	r2,r3,8001a54 <alt_up_pixel_buffer_dma_draw_box+0x4e4>
 8001620:	e13ff917 	ldw	r4,-28(fp)
 8001624:	e0bffd17 	ldw	r2,-12(fp)
 8001628:	20800136 	bltu	r4,r2,8001630 <alt_up_pixel_buffer_dma_draw_box+0xc0>
	{
		/* Drawing outside of the window, so don't bother. */
		return;
 800162c:	00010906 	br	8001a54 <alt_up_pixel_buffer_dma_draw_box+0x4e4>
	/* Clip the box and draw only within the confines of the screen. */
	if (l_x < 0)
	{
		l_x = 0;
	}
	if (r_x >= limit_x)
 8001630:	e0fffa17 	ldw	r3,-24(fp)
 8001634:	e13ffe17 	ldw	r4,-8(fp)
 8001638:	19000336 	bltu	r3,r4,8001648 <alt_up_pixel_buffer_dma_draw_box+0xd8>
	{
		r_x = limit_x - 1;
 800163c:	e0bffe17 	ldw	r2,-8(fp)
 8001640:	10bfffc4 	addi	r2,r2,-1
 8001644:	e0bffa15 	stw	r2,-24(fp)
	}
	if (t_y < 0)
	{
		t_y = 0;
	}
	if (b_y >= limit_y)
 8001648:	e0fff817 	ldw	r3,-32(fp)
 800164c:	e13ffd17 	ldw	r4,-12(fp)
 8001650:	19000336 	bltu	r3,r4,8001660 <alt_up_pixel_buffer_dma_draw_box+0xf0>
	{
		b_y = limit_y - 1;
 8001654:	e0bffd17 	ldw	r2,-12(fp)
 8001658:	10bfffc4 	addi	r2,r2,-1
 800165c:	e0bff815 	stw	r2,-32(fp)
	}

	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
 8001660:	e0800317 	ldw	r2,12(fp)
 8001664:	10800058 	cmpnei	r2,r2,1
 8001668:	1000041e 	bne	r2,zero,800167c <alt_up_pixel_buffer_dma_draw_box+0x10c>
		addr = pixel_buffer->back_buffer_start_address;
 800166c:	e0bfee17 	ldw	r2,-72(fp)
 8001670:	10800c17 	ldw	r2,48(r2)
 8001674:	e0bfff15 	stw	r2,-4(fp)
 8001678:	00000306 	br	8001688 <alt_up_pixel_buffer_dma_draw_box+0x118>
	else
		addr = pixel_buffer->buffer_start_address;
 800167c:	e0bfee17 	ldw	r2,-72(fp)
 8001680:	10800b17 	ldw	r2,44(r2)
 8001684:	e0bfff15 	stw	r2,-4(fp)

	/* Draw the box using one of the addressing modes. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
 8001688:	e0bfee17 	ldw	r2,-72(fp)
 800168c:	10800d17 	ldw	r2,52(r2)
 8001690:	1004c03a 	cmpne	r2,r2,zero
 8001694:	1000721e 	bne	r2,zero,8001860 <alt_up_pixel_buffer_dma_draw_box+0x2f0>
		/* Draw a box of a given color on the screen using the XY addressing mode. */
		register unsigned int x,y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
 8001698:	e0bfee17 	ldw	r2,-72(fp)
 800169c:	10801317 	ldw	r2,76(r2)
 80016a0:	e0bff415 	stw	r2,-48(fp)
		addr = addr + (t_y << offset_y);
 80016a4:	e0bff417 	ldw	r2,-48(fp)
 80016a8:	e0fff917 	ldw	r3,-28(fp)
 80016ac:	1884983a 	sll	r2,r3,r2
 80016b0:	e13fff17 	ldw	r4,-4(fp)
 80016b4:	2089883a 	add	r4,r4,r2
 80016b8:	e13fff15 	stw	r4,-4(fp)
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
 80016bc:	e0bfee17 	ldw	r2,-72(fp)
 80016c0:	10800e17 	ldw	r2,56(r2)
 80016c4:	10800058 	cmpnei	r2,r2,1
 80016c8:	10001e1e 	bne	r2,zero,8001744 <alt_up_pixel_buffer_dma_draw_box+0x1d4>
			for (y = t_y; y <= b_y; y++)
 80016cc:	e0bff917 	ldw	r2,-28(fp)
 80016d0:	e0bff515 	stw	r2,-44(fp)
 80016d4:	00001706 	br	8001734 <alt_up_pixel_buffer_dma_draw_box+0x1c4>
			{
				for (x = l_x; x <= r_x; x++)
 80016d8:	e0fffb17 	ldw	r3,-20(fp)
 80016dc:	e0fff615 	stw	r3,-40(fp)
 80016e0:	00000806 	br	8001704 <alt_up_pixel_buffer_dma_draw_box+0x194>
				{
					IOWR_8DIRECT(addr, x, local_color);
 80016e4:	e0ffff17 	ldw	r3,-4(fp)
 80016e8:	e0bff617 	ldw	r2,-40(fp)
 80016ec:	1885883a 	add	r2,r3,r2
 80016f0:	e0fff717 	ldw	r3,-36(fp)
 80016f4:	10c00025 	stbio	r3,0(r2)
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
 80016f8:	e13ff617 	ldw	r4,-40(fp)
 80016fc:	21000044 	addi	r4,r4,1
 8001700:	e13ff615 	stw	r4,-40(fp)
 8001704:	e0bffa17 	ldw	r2,-24(fp)
 8001708:	e0fff617 	ldw	r3,-40(fp)
 800170c:	10fff52e 	bgeu	r2,r3,80016e4 <alt_up_pixel_buffer_dma_draw_box+0x174>
				{
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + (1 << offset_y);
 8001710:	e0fff417 	ldw	r3,-48(fp)
 8001714:	00800044 	movi	r2,1
 8001718:	10c4983a 	sll	r2,r2,r3
 800171c:	e13fff17 	ldw	r4,-4(fp)
 8001720:	2089883a 	add	r4,r4,r2
 8001724:	e13fff15 	stw	r4,-4(fp)
		addr = addr + (t_y << offset_y);
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
 8001728:	e0bff517 	ldw	r2,-44(fp)
 800172c:	10800044 	addi	r2,r2,1
 8001730:	e0bff515 	stw	r2,-44(fp)
 8001734:	e0fff817 	ldw	r3,-32(fp)
 8001738:	e13ff517 	ldw	r4,-44(fp)
 800173c:	193fe62e 	bgeu	r3,r4,80016d8 <alt_up_pixel_buffer_dma_draw_box+0x168>
 8001740:	0000c406 	br	8001a54 <alt_up_pixel_buffer_dma_draw_box+0x4e4>
				{
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
 8001744:	e0bfee17 	ldw	r2,-72(fp)
 8001748:	10800e17 	ldw	r2,56(r2)
 800174c:	10800098 	cmpnei	r2,r2,2
 8001750:	1000211e 	bne	r2,zero,80017d8 <alt_up_pixel_buffer_dma_draw_box+0x268>
			for (y = t_y; y <= b_y; y++)
 8001754:	e0bff917 	ldw	r2,-28(fp)
 8001758:	e0bff515 	stw	r2,-44(fp)
 800175c:	00001a06 	br	80017c8 <alt_up_pixel_buffer_dma_draw_box+0x258>
			{
				for (x = l_x; x <= r_x; x++)
 8001760:	e0fffb17 	ldw	r3,-20(fp)
 8001764:	e0fff615 	stw	r3,-40(fp)
 8001768:	00000b06 	br	8001798 <alt_up_pixel_buffer_dma_draw_box+0x228>
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
 800176c:	e13ff617 	ldw	r4,-40(fp)
 8001770:	e13ff617 	ldw	r4,-40(fp)
 8001774:	2105883a 	add	r2,r4,r4
 8001778:	1007883a 	mov	r3,r2
 800177c:	e0bfff17 	ldw	r2,-4(fp)
 8001780:	1885883a 	add	r2,r3,r2
 8001784:	e0fff717 	ldw	r3,-36(fp)
 8001788:	10c0002d 	sthio	r3,0(r2)
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
 800178c:	e0bff617 	ldw	r2,-40(fp)
 8001790:	10800044 	addi	r2,r2,1
 8001794:	e0bff615 	stw	r2,-40(fp)
 8001798:	e0fffa17 	ldw	r3,-24(fp)
 800179c:	e13ff617 	ldw	r4,-40(fp)
 80017a0:	193ff22e 	bgeu	r3,r4,800176c <alt_up_pixel_buffer_dma_draw_box+0x1fc>
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
				}
				addr = addr + (1 << offset_y);
 80017a4:	e0fff417 	ldw	r3,-48(fp)
 80017a8:	00800044 	movi	r2,1
 80017ac:	10c4983a 	sll	r2,r2,r3
 80017b0:	e0ffff17 	ldw	r3,-4(fp)
 80017b4:	1887883a 	add	r3,r3,r2
 80017b8:	e0ffff15 	stw	r3,-4(fp)
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
 80017bc:	e13ff517 	ldw	r4,-44(fp)
 80017c0:	21000044 	addi	r4,r4,1
 80017c4:	e13ff515 	stw	r4,-44(fp)
 80017c8:	e0bff817 	ldw	r2,-32(fp)
 80017cc:	e0fff517 	ldw	r3,-44(fp)
 80017d0:	10ffe32e 	bgeu	r2,r3,8001760 <alt_up_pixel_buffer_dma_draw_box+0x1f0>
 80017d4:	00009f06 	br	8001a54 <alt_up_pixel_buffer_dma_draw_box+0x4e4>
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
 80017d8:	e13ff917 	ldw	r4,-28(fp)
 80017dc:	e13ff515 	stw	r4,-44(fp)
 80017e0:	00001b06 	br	8001850 <alt_up_pixel_buffer_dma_draw_box+0x2e0>
			{
				for (x = l_x; x <= r_x; x++)
 80017e4:	e0bffb17 	ldw	r2,-20(fp)
 80017e8:	e0bff615 	stw	r2,-40(fp)
 80017ec:	00000c06 	br	8001820 <alt_up_pixel_buffer_dma_draw_box+0x2b0>
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
 80017f0:	e0fff617 	ldw	r3,-40(fp)
 80017f4:	e0fff617 	ldw	r3,-40(fp)
 80017f8:	18c5883a 	add	r2,r3,r3
 80017fc:	1085883a 	add	r2,r2,r2
 8001800:	1007883a 	mov	r3,r2
 8001804:	e0bfff17 	ldw	r2,-4(fp)
 8001808:	1885883a 	add	r2,r3,r2
 800180c:	e0fff717 	ldw	r3,-36(fp)
 8001810:	10c00035 	stwio	r3,0(r2)
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
 8001814:	e13ff617 	ldw	r4,-40(fp)
 8001818:	21000044 	addi	r4,r4,1
 800181c:	e13ff615 	stw	r4,-40(fp)
 8001820:	e0bffa17 	ldw	r2,-24(fp)
 8001824:	e0fff617 	ldw	r3,-40(fp)
 8001828:	10fff12e 	bgeu	r2,r3,80017f0 <alt_up_pixel_buffer_dma_draw_box+0x280>
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
				}
				addr = addr + (1 << offset_y);
 800182c:	e0fff417 	ldw	r3,-48(fp)
 8001830:	00800044 	movi	r2,1
 8001834:	10c4983a 	sll	r2,r2,r3
 8001838:	e13fff17 	ldw	r4,-4(fp)
 800183c:	2089883a 	add	r4,r4,r2
 8001840:	e13fff15 	stw	r4,-4(fp)
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
 8001844:	e0bff517 	ldw	r2,-44(fp)
 8001848:	10800044 	addi	r2,r2,1
 800184c:	e0bff515 	stw	r2,-44(fp)
 8001850:	e0fff817 	ldw	r3,-32(fp)
 8001854:	e13ff517 	ldw	r4,-44(fp)
 8001858:	193fe22e 	bgeu	r3,r4,80017e4 <alt_up_pixel_buffer_dma_draw_box+0x274>
 800185c:	00007d06 	br	8001a54 <alt_up_pixel_buffer_dma_draw_box+0x4e4>
	} else {
		/* Draw a box of a given color on the screen using the linear addressing mode. */
		register unsigned int x,y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
 8001860:	e0bfee17 	ldw	r2,-72(fp)
 8001864:	10800e17 	ldw	r2,56(r2)
 8001868:	10800058 	cmpnei	r2,r2,1
 800186c:	1000221e 	bne	r2,zero,80018f8 <alt_up_pixel_buffer_dma_draw_box+0x388>
			addr = addr + t_y * limit_x;
 8001870:	e0fff917 	ldw	r3,-28(fp)
 8001874:	e13ffe17 	ldw	r4,-8(fp)
 8001878:	1905383a 	mul	r2,r3,r4
 800187c:	e0ffff17 	ldw	r3,-4(fp)
 8001880:	1887883a 	add	r3,r3,r2
 8001884:	e0ffff15 	stw	r3,-4(fp)
			for (y = t_y; y <= b_y; y++)
 8001888:	e13ff917 	ldw	r4,-28(fp)
 800188c:	e13ff215 	stw	r4,-56(fp)
 8001890:	00001506 	br	80018e8 <alt_up_pixel_buffer_dma_draw_box+0x378>
			{
				for (x = l_x; x <= r_x; x++)
 8001894:	e0bffb17 	ldw	r2,-20(fp)
 8001898:	e0bff315 	stw	r2,-52(fp)
 800189c:	00000806 	br	80018c0 <alt_up_pixel_buffer_dma_draw_box+0x350>
				{
					IOWR_8DIRECT(addr, x, local_color);
 80018a0:	e0ffff17 	ldw	r3,-4(fp)
 80018a4:	e0bff317 	ldw	r2,-52(fp)
 80018a8:	1885883a 	add	r2,r3,r2
 80018ac:	e0fff717 	ldw	r3,-36(fp)
 80018b0:	10c00025 	stbio	r3,0(r2)
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
 80018b4:	e0fff317 	ldw	r3,-52(fp)
 80018b8:	18c00044 	addi	r3,r3,1
 80018bc:	e0fff315 	stw	r3,-52(fp)
 80018c0:	e13ffa17 	ldw	r4,-24(fp)
 80018c4:	e0bff317 	ldw	r2,-52(fp)
 80018c8:	20bff52e 	bgeu	r4,r2,80018a0 <alt_up_pixel_buffer_dma_draw_box+0x330>
				{
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + limit_x;
 80018cc:	e0ffff17 	ldw	r3,-4(fp)
 80018d0:	e13ffe17 	ldw	r4,-8(fp)
 80018d4:	1907883a 	add	r3,r3,r4
 80018d8:	e0ffff15 	stw	r3,-4(fp)
		register unsigned int x,y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
 80018dc:	e0bff217 	ldw	r2,-56(fp)
 80018e0:	10800044 	addi	r2,r2,1
 80018e4:	e0bff215 	stw	r2,-56(fp)
 80018e8:	e0fff817 	ldw	r3,-32(fp)
 80018ec:	e13ff217 	ldw	r4,-56(fp)
 80018f0:	193fe82e 	bgeu	r3,r4,8001894 <alt_up_pixel_buffer_dma_draw_box+0x324>
 80018f4:	00005706 	br	8001a54 <alt_up_pixel_buffer_dma_draw_box+0x4e4>
				{
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
 80018f8:	e0bfee17 	ldw	r2,-72(fp)
 80018fc:	10800e17 	ldw	r2,56(r2)
 8001900:	10800098 	cmpnei	r2,r2,2
 8001904:	1000291e 	bne	r2,zero,80019ac <alt_up_pixel_buffer_dma_draw_box+0x43c>
			limit_x = limit_x << 1;
 8001908:	e0fffe17 	ldw	r3,-8(fp)
 800190c:	e0fffe17 	ldw	r3,-8(fp)
 8001910:	18c5883a 	add	r2,r3,r3
 8001914:	e0bffe15 	stw	r2,-8(fp)
			addr = addr + t_y * limit_x;
 8001918:	e13ff917 	ldw	r4,-28(fp)
 800191c:	e0fffe17 	ldw	r3,-8(fp)
 8001920:	20c5383a 	mul	r2,r4,r3
 8001924:	e13fff17 	ldw	r4,-4(fp)
 8001928:	2089883a 	add	r4,r4,r2
 800192c:	e13fff15 	stw	r4,-4(fp)
			for (y = t_y; y <= b_y; y++)
 8001930:	e0bff917 	ldw	r2,-28(fp)
 8001934:	e0bff215 	stw	r2,-56(fp)
 8001938:	00001806 	br	800199c <alt_up_pixel_buffer_dma_draw_box+0x42c>
			{
				for (x = l_x; x <= r_x; x++)
 800193c:	e0fffb17 	ldw	r3,-20(fp)
 8001940:	e0fff315 	stw	r3,-52(fp)
 8001944:	00000b06 	br	8001974 <alt_up_pixel_buffer_dma_draw_box+0x404>
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
 8001948:	e13ff317 	ldw	r4,-52(fp)
 800194c:	e13ff317 	ldw	r4,-52(fp)
 8001950:	2105883a 	add	r2,r4,r4
 8001954:	1007883a 	mov	r3,r2
 8001958:	e0bfff17 	ldw	r2,-4(fp)
 800195c:	1885883a 	add	r2,r3,r2
 8001960:	e0fff717 	ldw	r3,-36(fp)
 8001964:	10c0002d 	sthio	r3,0(r2)
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
 8001968:	e0bff317 	ldw	r2,-52(fp)
 800196c:	10800044 	addi	r2,r2,1
 8001970:	e0bff315 	stw	r2,-52(fp)
 8001974:	e0fffa17 	ldw	r3,-24(fp)
 8001978:	e13ff317 	ldw	r4,-52(fp)
 800197c:	193ff22e 	bgeu	r3,r4,8001948 <alt_up_pixel_buffer_dma_draw_box+0x3d8>
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
				}
				addr = addr + limit_x;
 8001980:	e0bfff17 	ldw	r2,-4(fp)
 8001984:	e0fffe17 	ldw	r3,-8(fp)
 8001988:	10c5883a 	add	r2,r2,r3
 800198c:	e0bfff15 	stw	r2,-4(fp)
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
 8001990:	e13ff217 	ldw	r4,-56(fp)
 8001994:	21000044 	addi	r4,r4,1
 8001998:	e13ff215 	stw	r4,-56(fp)
 800199c:	e0bff817 	ldw	r2,-32(fp)
 80019a0:	e0fff217 	ldw	r3,-56(fp)
 80019a4:	10ffe52e 	bgeu	r2,r3,800193c <alt_up_pixel_buffer_dma_draw_box+0x3cc>
 80019a8:	00002a06 	br	8001a54 <alt_up_pixel_buffer_dma_draw_box+0x4e4>
				addr = addr + limit_x;
			}
		}
		else
		{
			limit_x = limit_x << 2;
 80019ac:	e13ffe17 	ldw	r4,-8(fp)
 80019b0:	e13ffe17 	ldw	r4,-8(fp)
 80019b4:	2105883a 	add	r2,r4,r4
 80019b8:	1085883a 	add	r2,r2,r2
 80019bc:	e0bffe15 	stw	r2,-8(fp)
			addr = addr + t_y * limit_x;
 80019c0:	e0fff917 	ldw	r3,-28(fp)
 80019c4:	e13ffe17 	ldw	r4,-8(fp)
 80019c8:	1905383a 	mul	r2,r3,r4
 80019cc:	e0ffff17 	ldw	r3,-4(fp)
 80019d0:	1887883a 	add	r3,r3,r2
 80019d4:	e0ffff15 	stw	r3,-4(fp)
			for (y = t_y; y <= b_y; y++)
 80019d8:	e13ff917 	ldw	r4,-28(fp)
 80019dc:	e13ff215 	stw	r4,-56(fp)
 80019e0:	00001906 	br	8001a48 <alt_up_pixel_buffer_dma_draw_box+0x4d8>
			{
				for (x = l_x; x <= r_x; x++)
 80019e4:	e0bffb17 	ldw	r2,-20(fp)
 80019e8:	e0bff315 	stw	r2,-52(fp)
 80019ec:	00000c06 	br	8001a20 <alt_up_pixel_buffer_dma_draw_box+0x4b0>
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
 80019f0:	e0fff317 	ldw	r3,-52(fp)
 80019f4:	e0fff317 	ldw	r3,-52(fp)
 80019f8:	18c5883a 	add	r2,r3,r3
 80019fc:	1085883a 	add	r2,r2,r2
 8001a00:	1007883a 	mov	r3,r2
 8001a04:	e0bfff17 	ldw	r2,-4(fp)
 8001a08:	1885883a 	add	r2,r3,r2
 8001a0c:	e0fff717 	ldw	r3,-36(fp)
 8001a10:	10c00035 	stwio	r3,0(r2)
		{
			limit_x = limit_x << 2;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
 8001a14:	e13ff317 	ldw	r4,-52(fp)
 8001a18:	21000044 	addi	r4,r4,1
 8001a1c:	e13ff315 	stw	r4,-52(fp)
 8001a20:	e0bffa17 	ldw	r2,-24(fp)
 8001a24:	e0fff317 	ldw	r3,-52(fp)
 8001a28:	10fff12e 	bgeu	r2,r3,80019f0 <alt_up_pixel_buffer_dma_draw_box+0x480>
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
				}
				addr = addr + limit_x;
 8001a2c:	e13fff17 	ldw	r4,-4(fp)
 8001a30:	e0bffe17 	ldw	r2,-8(fp)
 8001a34:	2089883a 	add	r4,r4,r2
 8001a38:	e13fff15 	stw	r4,-4(fp)
		}
		else
		{
			limit_x = limit_x << 2;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
 8001a3c:	e0fff217 	ldw	r3,-56(fp)
 8001a40:	18c00044 	addi	r3,r3,1
 8001a44:	e0fff215 	stw	r3,-56(fp)
 8001a48:	e13ff817 	ldw	r4,-32(fp)
 8001a4c:	e0bff217 	ldw	r2,-56(fp)
 8001a50:	20bfe42e 	bgeu	r4,r2,80019e4 <alt_up_pixel_buffer_dma_draw_box+0x474>
				}
				addr = addr + limit_x;
			}
		}
	}
}
 8001a54:	e037883a 	mov	sp,fp
 8001a58:	df000017 	ldw	fp,0(sp)
 8001a5c:	dec00104 	addi	sp,sp,4
 8001a60:	f800283a 	ret

08001a64 <alt_up_pixel_buffer_dma_draw_hline>:

void alt_up_pixel_buffer_dma_draw_hline(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int x1, int y, int color, int backbuffer)
/* This method draws a horizontal line. This method is faster than using the line method because we know the direction of the line. */
{
 8001a64:	defff204 	addi	sp,sp,-56
 8001a68:	df000d15 	stw	fp,52(sp)
 8001a6c:	df000d04 	addi	fp,sp,52
 8001a70:	e13ff315 	stw	r4,-52(fp)
 8001a74:	e17ff415 	stw	r5,-48(fp)
 8001a78:	e1bff515 	stw	r6,-44(fp)
 8001a7c:	e1fff615 	stw	r7,-40(fp)
	register unsigned int addr;
	register unsigned int limit_x = pixel_buffer->x_resolution;
 8001a80:	e0bff317 	ldw	r2,-52(fp)
 8001a84:	10800f17 	ldw	r2,60(r2)
 8001a88:	e0bffe15 	stw	r2,-8(fp)
	register unsigned int limit_y = pixel_buffer->y_resolution;
 8001a8c:	e0bff317 	ldw	r2,-52(fp)
 8001a90:	10801017 	ldw	r2,64(r2)
 8001a94:	e0bffd15 	stw	r2,-12(fp)
	register unsigned int temp;
	register unsigned int l_x = x0;
 8001a98:	e0bff417 	ldw	r2,-48(fp)
 8001a9c:	e0bffc15 	stw	r2,-16(fp)
	register unsigned int r_x = x1;
 8001aa0:	e0fff517 	ldw	r3,-44(fp)
 8001aa4:	e0fffb15 	stw	r3,-20(fp)
	register unsigned int line_y = y;
 8001aa8:	e13ff617 	ldw	r4,-40(fp)
 8001aac:	e13ffa15 	stw	r4,-24(fp)
	register unsigned int local_color = color;
 8001ab0:	e0800117 	ldw	r2,4(fp)
 8001ab4:	e0bff915 	stw	r2,-28(fp)
	
	/* Check coordinates */
	if (l_x > r_x)
 8001ab8:	e0fffb17 	ldw	r3,-20(fp)
 8001abc:	e13ffc17 	ldw	r4,-16(fp)
 8001ac0:	1900042e 	bgeu	r3,r4,8001ad4 <alt_up_pixel_buffer_dma_draw_hline+0x70>
	{
		temp = l_x;
 8001ac4:	e0bffc17 	ldw	r2,-16(fp)
		l_x = r_x;
 8001ac8:	e0fffb17 	ldw	r3,-20(fp)
 8001acc:	e0fffc15 	stw	r3,-16(fp)
		r_x = temp;
 8001ad0:	e0bffb15 	stw	r2,-20(fp)
	}
	if ((l_x >= limit_x) || (line_y >= limit_y) || (r_x < 0) || (line_y < 0))
 8001ad4:	e13ffc17 	ldw	r4,-16(fp)
 8001ad8:	e0bffe17 	ldw	r2,-8(fp)
 8001adc:	2080b12e 	bgeu	r4,r2,8001da4 <alt_up_pixel_buffer_dma_draw_hline+0x340>
 8001ae0:	e0fffa17 	ldw	r3,-24(fp)
 8001ae4:	e13ffd17 	ldw	r4,-12(fp)
 8001ae8:	19000136 	bltu	r3,r4,8001af0 <alt_up_pixel_buffer_dma_draw_hline+0x8c>
	{
		/* Drawing outside of the window, so don't bother. */
		return;
 8001aec:	0000ad06 	br	8001da4 <alt_up_pixel_buffer_dma_draw_hline+0x340>
	/* Clip the box and draw only within the confines of the screen. */
	if (l_x < 0)
	{
		l_x = 0;
	}
	if (r_x >= limit_x)
 8001af0:	e0bffb17 	ldw	r2,-20(fp)
 8001af4:	e0fffe17 	ldw	r3,-8(fp)
 8001af8:	10c00336 	bltu	r2,r3,8001b08 <alt_up_pixel_buffer_dma_draw_hline+0xa4>
	{
		r_x = limit_x - 1;
 8001afc:	e13ffe17 	ldw	r4,-8(fp)
 8001b00:	213fffc4 	addi	r4,r4,-1
 8001b04:	e13ffb15 	stw	r4,-20(fp)
	}

	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
 8001b08:	e0800217 	ldw	r2,8(fp)
 8001b0c:	10800058 	cmpnei	r2,r2,1
 8001b10:	1000041e 	bne	r2,zero,8001b24 <alt_up_pixel_buffer_dma_draw_hline+0xc0>
		addr = pixel_buffer->back_buffer_start_address;
 8001b14:	e0bff317 	ldw	r2,-52(fp)
 8001b18:	10800c17 	ldw	r2,48(r2)
 8001b1c:	e0bfff15 	stw	r2,-4(fp)
 8001b20:	00000306 	br	8001b30 <alt_up_pixel_buffer_dma_draw_hline+0xcc>
	else
		addr = pixel_buffer->buffer_start_address;
 8001b24:	e0bff317 	ldw	r2,-52(fp)
 8001b28:	10800b17 	ldw	r2,44(r2)
 8001b2c:	e0bfff15 	stw	r2,-4(fp)

	/* Draw a horizontal line using one of the addressing modes. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
 8001b30:	e0bff317 	ldw	r2,-52(fp)
 8001b34:	10800d17 	ldw	r2,52(r2)
 8001b38:	1004c03a 	cmpne	r2,r2,zero
 8001b3c:	1000431e 	bne	r2,zero,8001c4c <alt_up_pixel_buffer_dma_draw_hline+0x1e8>
		/* Draw a horizontal line of a given color on the screen using the XY addressing mode. */
		register unsigned int x;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
 8001b40:	e0bff317 	ldw	r2,-52(fp)
 8001b44:	10801317 	ldw	r2,76(r2)
		addr = addr + (line_y << offset_y);
 8001b48:	e0fffa17 	ldw	r3,-24(fp)
 8001b4c:	1884983a 	sll	r2,r3,r2
 8001b50:	e13fff17 	ldw	r4,-4(fp)
 8001b54:	2089883a 	add	r4,r4,r2
 8001b58:	e13fff15 	stw	r4,-4(fp)
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a horizontal line. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
 8001b5c:	e0bff317 	ldw	r2,-52(fp)
 8001b60:	10800e17 	ldw	r2,56(r2)
 8001b64:	10800058 	cmpnei	r2,r2,1
 8001b68:	10000f1e 	bne	r2,zero,8001ba8 <alt_up_pixel_buffer_dma_draw_hline+0x144>
			for (x = l_x; x <= r_x; x++)
 8001b6c:	e0bffc17 	ldw	r2,-16(fp)
 8001b70:	e0bff815 	stw	r2,-32(fp)
 8001b74:	00000806 	br	8001b98 <alt_up_pixel_buffer_dma_draw_hline+0x134>
			{
				IOWR_8DIRECT(addr, x, local_color);
 8001b78:	e0ffff17 	ldw	r3,-4(fp)
 8001b7c:	e0bff817 	ldw	r2,-32(fp)
 8001b80:	1885883a 	add	r2,r3,r2
 8001b84:	e0fff917 	ldw	r3,-28(fp)
 8001b88:	10c00025 	stbio	r3,0(r2)
		addr = addr + (line_y << offset_y);
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a horizontal line. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (x = l_x; x <= r_x; x++)
 8001b8c:	e0fff817 	ldw	r3,-32(fp)
 8001b90:	18c00044 	addi	r3,r3,1
 8001b94:	e0fff815 	stw	r3,-32(fp)
 8001b98:	e13ffb17 	ldw	r4,-20(fp)
 8001b9c:	e0bff817 	ldw	r2,-32(fp)
 8001ba0:	20bff52e 	bgeu	r4,r2,8001b78 <alt_up_pixel_buffer_dma_draw_hline+0x114>
 8001ba4:	00007f06 	br	8001da4 <alt_up_pixel_buffer_dma_draw_hline+0x340>
			{
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
 8001ba8:	e0bff317 	ldw	r2,-52(fp)
 8001bac:	10800e17 	ldw	r2,56(r2)
 8001bb0:	10800098 	cmpnei	r2,r2,2
 8001bb4:	1000121e 	bne	r2,zero,8001c00 <alt_up_pixel_buffer_dma_draw_hline+0x19c>
			for (x = l_x; x <= r_x; x++)
 8001bb8:	e0fffc17 	ldw	r3,-16(fp)
 8001bbc:	e0fff815 	stw	r3,-32(fp)
 8001bc0:	00000b06 	br	8001bf0 <alt_up_pixel_buffer_dma_draw_hline+0x18c>
			{
				IOWR_16DIRECT(addr, x << 1, local_color);
 8001bc4:	e13ff817 	ldw	r4,-32(fp)
 8001bc8:	e13ff817 	ldw	r4,-32(fp)
 8001bcc:	2105883a 	add	r2,r4,r4
 8001bd0:	1007883a 	mov	r3,r2
 8001bd4:	e0bfff17 	ldw	r2,-4(fp)
 8001bd8:	1885883a 	add	r2,r3,r2
 8001bdc:	e0fff917 	ldw	r3,-28(fp)
 8001be0:	10c0002d 	sthio	r3,0(r2)
			for (x = l_x; x <= r_x; x++)
			{
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (x = l_x; x <= r_x; x++)
 8001be4:	e0bff817 	ldw	r2,-32(fp)
 8001be8:	10800044 	addi	r2,r2,1
 8001bec:	e0bff815 	stw	r2,-32(fp)
 8001bf0:	e0fffb17 	ldw	r3,-20(fp)
 8001bf4:	e13ff817 	ldw	r4,-32(fp)
 8001bf8:	193ff22e 	bgeu	r3,r4,8001bc4 <alt_up_pixel_buffer_dma_draw_hline+0x160>
 8001bfc:	00006906 	br	8001da4 <alt_up_pixel_buffer_dma_draw_hline+0x340>
				IOWR_16DIRECT(addr, x << 1, local_color);
			}
		}
		else
		{
			for (x = l_x; x <= r_x; x++)
 8001c00:	e0bffc17 	ldw	r2,-16(fp)
 8001c04:	e0bff815 	stw	r2,-32(fp)
 8001c08:	00000c06 	br	8001c3c <alt_up_pixel_buffer_dma_draw_hline+0x1d8>
			{
				IOWR_32DIRECT(addr, x << 2, local_color);
 8001c0c:	e0fff817 	ldw	r3,-32(fp)
 8001c10:	e0fff817 	ldw	r3,-32(fp)
 8001c14:	18c5883a 	add	r2,r3,r3
 8001c18:	1085883a 	add	r2,r2,r2
 8001c1c:	1007883a 	mov	r3,r2
 8001c20:	e0bfff17 	ldw	r2,-4(fp)
 8001c24:	1885883a 	add	r2,r3,r2
 8001c28:	e0fff917 	ldw	r3,-28(fp)
 8001c2c:	10c00035 	stwio	r3,0(r2)
				IOWR_16DIRECT(addr, x << 1, local_color);
			}
		}
		else
		{
			for (x = l_x; x <= r_x; x++)
 8001c30:	e13ff817 	ldw	r4,-32(fp)
 8001c34:	21000044 	addi	r4,r4,1
 8001c38:	e13ff815 	stw	r4,-32(fp)
 8001c3c:	e0bffb17 	ldw	r2,-20(fp)
 8001c40:	e0fff817 	ldw	r3,-32(fp)
 8001c44:	10fff12e 	bgeu	r2,r3,8001c0c <alt_up_pixel_buffer_dma_draw_hline+0x1a8>
 8001c48:	00005606 	br	8001da4 <alt_up_pixel_buffer_dma_draw_hline+0x340>
	} else {
		/* Draw a horizontal line of a given color on the screen using the linear addressing mode. */
		register unsigned int x;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
 8001c4c:	e0bff317 	ldw	r2,-52(fp)
 8001c50:	10800e17 	ldw	r2,56(r2)
 8001c54:	10800058 	cmpnei	r2,r2,1
 8001c58:	1000151e 	bne	r2,zero,8001cb0 <alt_up_pixel_buffer_dma_draw_hline+0x24c>
			addr = addr + line_y * limit_x;
 8001c5c:	e13ffa17 	ldw	r4,-24(fp)
 8001c60:	e0fffe17 	ldw	r3,-8(fp)
 8001c64:	20c5383a 	mul	r2,r4,r3
 8001c68:	e13fff17 	ldw	r4,-4(fp)
 8001c6c:	2089883a 	add	r4,r4,r2
 8001c70:	e13fff15 	stw	r4,-4(fp)
			for (x = l_x; x <= r_x; x++)
 8001c74:	e0bffc17 	ldw	r2,-16(fp)
 8001c78:	e0bff715 	stw	r2,-36(fp)
 8001c7c:	00000806 	br	8001ca0 <alt_up_pixel_buffer_dma_draw_hline+0x23c>
			{
				IOWR_8DIRECT(addr, x, local_color);
 8001c80:	e0ffff17 	ldw	r3,-4(fp)
 8001c84:	e0bff717 	ldw	r2,-36(fp)
 8001c88:	1885883a 	add	r2,r3,r2
 8001c8c:	e0fff917 	ldw	r3,-28(fp)
 8001c90:	10c00025 	stbio	r3,0(r2)
		register unsigned int x;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + line_y * limit_x;
			for (x = l_x; x <= r_x; x++)
 8001c94:	e0fff717 	ldw	r3,-36(fp)
 8001c98:	18c00044 	addi	r3,r3,1
 8001c9c:	e0fff715 	stw	r3,-36(fp)
 8001ca0:	e13ffb17 	ldw	r4,-20(fp)
 8001ca4:	e0bff717 	ldw	r2,-36(fp)
 8001ca8:	20bff52e 	bgeu	r4,r2,8001c80 <alt_up_pixel_buffer_dma_draw_hline+0x21c>
 8001cac:	00003d06 	br	8001da4 <alt_up_pixel_buffer_dma_draw_hline+0x340>
			{
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
 8001cb0:	e0bff317 	ldw	r2,-52(fp)
 8001cb4:	10800e17 	ldw	r2,56(r2)
 8001cb8:	10800098 	cmpnei	r2,r2,2
 8001cbc:	10001c1e 	bne	r2,zero,8001d30 <alt_up_pixel_buffer_dma_draw_hline+0x2cc>
			limit_x = limit_x << 1;
 8001cc0:	e0fffe17 	ldw	r3,-8(fp)
 8001cc4:	e0fffe17 	ldw	r3,-8(fp)
 8001cc8:	18c5883a 	add	r2,r3,r3
 8001ccc:	e0bffe15 	stw	r2,-8(fp)
			addr = addr + line_y * limit_x;
 8001cd0:	e13ffa17 	ldw	r4,-24(fp)
 8001cd4:	e0fffe17 	ldw	r3,-8(fp)
 8001cd8:	20c5383a 	mul	r2,r4,r3
 8001cdc:	e13fff17 	ldw	r4,-4(fp)
 8001ce0:	2089883a 	add	r4,r4,r2
 8001ce4:	e13fff15 	stw	r4,-4(fp)
			for (x = l_x; x <= r_x; x++)
 8001ce8:	e0bffc17 	ldw	r2,-16(fp)
 8001cec:	e0bff715 	stw	r2,-36(fp)
 8001cf0:	00000b06 	br	8001d20 <alt_up_pixel_buffer_dma_draw_hline+0x2bc>
			{
				IOWR_16DIRECT(addr, x << 1, local_color);
 8001cf4:	e0fff717 	ldw	r3,-36(fp)
 8001cf8:	e0fff717 	ldw	r3,-36(fp)
 8001cfc:	18c5883a 	add	r2,r3,r3
 8001d00:	1007883a 	mov	r3,r2
 8001d04:	e0bfff17 	ldw	r2,-4(fp)
 8001d08:	1885883a 	add	r2,r3,r2
 8001d0c:	e0fff917 	ldw	r3,-28(fp)
 8001d10:	10c0002d 	sthio	r3,0(r2)
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + line_y * limit_x;
			for (x = l_x; x <= r_x; x++)
 8001d14:	e13ff717 	ldw	r4,-36(fp)
 8001d18:	21000044 	addi	r4,r4,1
 8001d1c:	e13ff715 	stw	r4,-36(fp)
 8001d20:	e0bffb17 	ldw	r2,-20(fp)
 8001d24:	e0fff717 	ldw	r3,-36(fp)
 8001d28:	10fff22e 	bgeu	r2,r3,8001cf4 <alt_up_pixel_buffer_dma_draw_hline+0x290>
 8001d2c:	00001d06 	br	8001da4 <alt_up_pixel_buffer_dma_draw_hline+0x340>
				IOWR_16DIRECT(addr, x << 1, local_color);
			}
		}
		else
		{
			limit_x = limit_x << 2;
 8001d30:	e13ffe17 	ldw	r4,-8(fp)
 8001d34:	e13ffe17 	ldw	r4,-8(fp)
 8001d38:	2105883a 	add	r2,r4,r4
 8001d3c:	1085883a 	add	r2,r2,r2
 8001d40:	e0bffe15 	stw	r2,-8(fp)
			addr = addr + line_y * limit_x;
 8001d44:	e0fffa17 	ldw	r3,-24(fp)
 8001d48:	e13ffe17 	ldw	r4,-8(fp)
 8001d4c:	1905383a 	mul	r2,r3,r4
 8001d50:	e0ffff17 	ldw	r3,-4(fp)
 8001d54:	1887883a 	add	r3,r3,r2
 8001d58:	e0ffff15 	stw	r3,-4(fp)
			for (x = l_x; x <= r_x; x++)
 8001d5c:	e13ffc17 	ldw	r4,-16(fp)
 8001d60:	e13ff715 	stw	r4,-36(fp)
 8001d64:	00000c06 	br	8001d98 <alt_up_pixel_buffer_dma_draw_hline+0x334>
			{
				IOWR_32DIRECT(addr, x << 2, local_color);
 8001d68:	e0fff717 	ldw	r3,-36(fp)
 8001d6c:	e0fff717 	ldw	r3,-36(fp)
 8001d70:	18c5883a 	add	r2,r3,r3
 8001d74:	1085883a 	add	r2,r2,r2
 8001d78:	1007883a 	mov	r3,r2
 8001d7c:	e0bfff17 	ldw	r2,-4(fp)
 8001d80:	1885883a 	add	r2,r3,r2
 8001d84:	e0fff917 	ldw	r3,-28(fp)
 8001d88:	10c00035 	stwio	r3,0(r2)
		}
		else
		{
			limit_x = limit_x << 2;
			addr = addr + line_y * limit_x;
			for (x = l_x; x <= r_x; x++)
 8001d8c:	e13ff717 	ldw	r4,-36(fp)
 8001d90:	21000044 	addi	r4,r4,1
 8001d94:	e13ff715 	stw	r4,-36(fp)
 8001d98:	e0bffb17 	ldw	r2,-20(fp)
 8001d9c:	e0fff717 	ldw	r3,-36(fp)
 8001da0:	10fff12e 	bgeu	r2,r3,8001d68 <alt_up_pixel_buffer_dma_draw_hline+0x304>
				IOWR_32DIRECT(addr, x << 2, local_color);
			}
			addr = addr + limit_x;
		}
	}
}
 8001da4:	e037883a 	mov	sp,fp
 8001da8:	df000017 	ldw	fp,0(sp)
 8001dac:	dec00104 	addi	sp,sp,4
 8001db0:	f800283a 	ret

08001db4 <alt_up_pixel_buffer_dma_draw_vline>:


void alt_up_pixel_buffer_dma_draw_vline(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x, int y0, int y1, int color, int backbuffer)
/* This method draws a vertical line. This method is faster than using the line method because we know the direction of the line. */

{
 8001db4:	defff104 	addi	sp,sp,-60
 8001db8:	df000e15 	stw	fp,56(sp)
 8001dbc:	df000e04 	addi	fp,sp,56
 8001dc0:	e13ff215 	stw	r4,-56(fp)
 8001dc4:	e17ff315 	stw	r5,-52(fp)
 8001dc8:	e1bff415 	stw	r6,-48(fp)
 8001dcc:	e1fff515 	stw	r7,-44(fp)
	register unsigned int addr;
	register unsigned int limit_x = pixel_buffer->x_resolution;
 8001dd0:	e0bff217 	ldw	r2,-56(fp)
 8001dd4:	10800f17 	ldw	r2,60(r2)
 8001dd8:	e0bffe15 	stw	r2,-8(fp)
	register unsigned int limit_y = pixel_buffer->y_resolution;
 8001ddc:	e0bff217 	ldw	r2,-56(fp)
 8001de0:	10801017 	ldw	r2,64(r2)
 8001de4:	e0bffd15 	stw	r2,-12(fp)
	register unsigned int temp;
	register unsigned int line_x = x;
 8001de8:	e0bff317 	ldw	r2,-52(fp)
 8001dec:	e0bffc15 	stw	r2,-16(fp)
	register unsigned int t_y = y0;
 8001df0:	e0fff417 	ldw	r3,-48(fp)
 8001df4:	e0fffb15 	stw	r3,-20(fp)
	register unsigned int b_y = y1;
 8001df8:	e13ff517 	ldw	r4,-44(fp)
 8001dfc:	e13ffa15 	stw	r4,-24(fp)
	register unsigned int local_color = color;
 8001e00:	e0800117 	ldw	r2,4(fp)
 8001e04:	e0bff915 	stw	r2,-28(fp)
	
	/* Check coordinates */
	if (t_y > b_y)
 8001e08:	e0fffa17 	ldw	r3,-24(fp)
 8001e0c:	e13ffb17 	ldw	r4,-20(fp)
 8001e10:	1900042e 	bgeu	r3,r4,8001e24 <alt_up_pixel_buffer_dma_draw_vline+0x70>
	{
		temp = t_y;
 8001e14:	e0bffb17 	ldw	r2,-20(fp)
		t_y = b_y;
 8001e18:	e0fffa17 	ldw	r3,-24(fp)
 8001e1c:	e0fffb15 	stw	r3,-20(fp)
		b_y = temp;
 8001e20:	e0bffa15 	stw	r2,-24(fp)
	}
	if ((line_x >= limit_x) || (t_y >= limit_y) || (line_x < 0) || (b_y < 0))
 8001e24:	e13ffc17 	ldw	r4,-16(fp)
 8001e28:	e0bffe17 	ldw	r2,-8(fp)
 8001e2c:	2080d12e 	bgeu	r4,r2,8002174 <alt_up_pixel_buffer_dma_draw_vline+0x3c0>
 8001e30:	e0fffb17 	ldw	r3,-20(fp)
 8001e34:	e13ffd17 	ldw	r4,-12(fp)
 8001e38:	19000136 	bltu	r3,r4,8001e40 <alt_up_pixel_buffer_dma_draw_vline+0x8c>
	{
		/* Drawing outside of the window, so don't bother. */
		return;
 8001e3c:	0000cd06 	br	8002174 <alt_up_pixel_buffer_dma_draw_vline+0x3c0>
	/* Clip the box and draw only within the confines of the screen. */
	if (t_y < 0)
	{
		t_y = 0;
	}
	if (b_y >= limit_y)
 8001e40:	e0bffa17 	ldw	r2,-24(fp)
 8001e44:	e0fffd17 	ldw	r3,-12(fp)
 8001e48:	10c00336 	bltu	r2,r3,8001e58 <alt_up_pixel_buffer_dma_draw_vline+0xa4>
	{
		b_y = limit_y - 1;
 8001e4c:	e13ffd17 	ldw	r4,-12(fp)
 8001e50:	213fffc4 	addi	r4,r4,-1
 8001e54:	e13ffa15 	stw	r4,-24(fp)
	}

	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
 8001e58:	e0800217 	ldw	r2,8(fp)
 8001e5c:	10800058 	cmpnei	r2,r2,1
 8001e60:	1000041e 	bne	r2,zero,8001e74 <alt_up_pixel_buffer_dma_draw_vline+0xc0>
		addr = pixel_buffer->back_buffer_start_address;
 8001e64:	e0bff217 	ldw	r2,-56(fp)
 8001e68:	10800c17 	ldw	r2,48(r2)
 8001e6c:	e0bfff15 	stw	r2,-4(fp)
 8001e70:	00000306 	br	8001e80 <alt_up_pixel_buffer_dma_draw_vline+0xcc>
	else
		addr = pixel_buffer->buffer_start_address;
 8001e74:	e0bff217 	ldw	r2,-56(fp)
 8001e78:	10800b17 	ldw	r2,44(r2)
 8001e7c:	e0bfff15 	stw	r2,-4(fp)

	/* Draw the vertical line using one of the addressing modes. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
 8001e80:	e0bff217 	ldw	r2,-56(fp)
 8001e84:	10800d17 	ldw	r2,52(r2)
 8001e88:	1004c03a 	cmpne	r2,r2,zero
 8001e8c:	1000571e 	bne	r2,zero,8001fec <alt_up_pixel_buffer_dma_draw_vline+0x238>
		/* Draw a vertical line of a given color on the screen using the XY addressing mode. */
		register unsigned int y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
 8001e90:	e0bff217 	ldw	r2,-56(fp)
 8001e94:	10801317 	ldw	r2,76(r2)
 8001e98:	e0bff715 	stw	r2,-36(fp)
		addr = addr + (t_y << offset_y);
 8001e9c:	e0bff717 	ldw	r2,-36(fp)
 8001ea0:	e0fffb17 	ldw	r3,-20(fp)
 8001ea4:	1884983a 	sll	r2,r3,r2
 8001ea8:	e13fff17 	ldw	r4,-4(fp)
 8001eac:	2089883a 	add	r4,r4,r2
 8001eb0:	e13fff15 	stw	r4,-4(fp)
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
 8001eb4:	e0bff217 	ldw	r2,-56(fp)
 8001eb8:	10800e17 	ldw	r2,56(r2)
 8001ebc:	10800058 	cmpnei	r2,r2,1
 8001ec0:	1000151e 	bne	r2,zero,8001f18 <alt_up_pixel_buffer_dma_draw_vline+0x164>
			for (y = t_y; y <= b_y; y++)
 8001ec4:	e0bffb17 	ldw	r2,-20(fp)
 8001ec8:	e0bff815 	stw	r2,-32(fp)
 8001ecc:	00000e06 	br	8001f08 <alt_up_pixel_buffer_dma_draw_vline+0x154>
			{
				IOWR_8DIRECT(addr, line_x, local_color);
 8001ed0:	e0ffff17 	ldw	r3,-4(fp)
 8001ed4:	e0bffc17 	ldw	r2,-16(fp)
 8001ed8:	1885883a 	add	r2,r3,r2
 8001edc:	e0fff917 	ldw	r3,-28(fp)
 8001ee0:	10c00025 	stbio	r3,0(r2)
				addr = addr + (1 << offset_y);
 8001ee4:	e0fff717 	ldw	r3,-36(fp)
 8001ee8:	00800044 	movi	r2,1
 8001eec:	10c4983a 	sll	r2,r2,r3
 8001ef0:	e0ffff17 	ldw	r3,-4(fp)
 8001ef4:	1887883a 	add	r3,r3,r2
 8001ef8:	e0ffff15 	stw	r3,-4(fp)
		addr = addr + (t_y << offset_y);
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
 8001efc:	e13ff817 	ldw	r4,-32(fp)
 8001f00:	21000044 	addi	r4,r4,1
 8001f04:	e13ff815 	stw	r4,-32(fp)
 8001f08:	e0bffa17 	ldw	r2,-24(fp)
 8001f0c:	e0fff817 	ldw	r3,-32(fp)
 8001f10:	10ffef2e 	bgeu	r2,r3,8001ed0 <alt_up_pixel_buffer_dma_draw_vline+0x11c>
 8001f14:	00009706 	br	8002174 <alt_up_pixel_buffer_dma_draw_vline+0x3c0>
			{
				IOWR_8DIRECT(addr, line_x, local_color);
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
 8001f18:	e0bff217 	ldw	r2,-56(fp)
 8001f1c:	10800e17 	ldw	r2,56(r2)
 8001f20:	10800098 	cmpnei	r2,r2,2
 8001f24:	1000181e 	bne	r2,zero,8001f88 <alt_up_pixel_buffer_dma_draw_vline+0x1d4>
			for (y = t_y; y <= b_y; y++)
 8001f28:	e13ffb17 	ldw	r4,-20(fp)
 8001f2c:	e13ff815 	stw	r4,-32(fp)
 8001f30:	00001106 	br	8001f78 <alt_up_pixel_buffer_dma_draw_vline+0x1c4>
			{
				IOWR_16DIRECT(addr, line_x << 1, local_color);
 8001f34:	e0fffc17 	ldw	r3,-16(fp)
 8001f38:	e0fffc17 	ldw	r3,-16(fp)
 8001f3c:	18c5883a 	add	r2,r3,r3
 8001f40:	1007883a 	mov	r3,r2
 8001f44:	e0bfff17 	ldw	r2,-4(fp)
 8001f48:	1885883a 	add	r2,r3,r2
 8001f4c:	e0fff917 	ldw	r3,-28(fp)
 8001f50:	10c0002d 	sthio	r3,0(r2)
				addr = addr + (1 << offset_y);
 8001f54:	e0fff717 	ldw	r3,-36(fp)
 8001f58:	00800044 	movi	r2,1
 8001f5c:	10c4983a 	sll	r2,r2,r3
 8001f60:	e13fff17 	ldw	r4,-4(fp)
 8001f64:	2089883a 	add	r4,r4,r2
 8001f68:	e13fff15 	stw	r4,-4(fp)
			{
				IOWR_8DIRECT(addr, line_x, local_color);
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
 8001f6c:	e0bff817 	ldw	r2,-32(fp)
 8001f70:	10800044 	addi	r2,r2,1
 8001f74:	e0bff815 	stw	r2,-32(fp)
 8001f78:	e0fffa17 	ldw	r3,-24(fp)
 8001f7c:	e13ff817 	ldw	r4,-32(fp)
 8001f80:	193fec2e 	bgeu	r3,r4,8001f34 <alt_up_pixel_buffer_dma_draw_vline+0x180>
 8001f84:	00007b06 	br	8002174 <alt_up_pixel_buffer_dma_draw_vline+0x3c0>
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
 8001f88:	e0bffb17 	ldw	r2,-20(fp)
 8001f8c:	e0bff815 	stw	r2,-32(fp)
 8001f90:	00001206 	br	8001fdc <alt_up_pixel_buffer_dma_draw_vline+0x228>
			{
				IOWR_32DIRECT(addr, line_x << 2, local_color);
 8001f94:	e0fffc17 	ldw	r3,-16(fp)
 8001f98:	e0fffc17 	ldw	r3,-16(fp)
 8001f9c:	18c5883a 	add	r2,r3,r3
 8001fa0:	1085883a 	add	r2,r2,r2
 8001fa4:	1007883a 	mov	r3,r2
 8001fa8:	e0bfff17 	ldw	r2,-4(fp)
 8001fac:	1885883a 	add	r2,r3,r2
 8001fb0:	e0fff917 	ldw	r3,-28(fp)
 8001fb4:	10c00035 	stwio	r3,0(r2)
				addr = addr + (1 << offset_y);
 8001fb8:	e0fff717 	ldw	r3,-36(fp)
 8001fbc:	00800044 	movi	r2,1
 8001fc0:	10c4983a 	sll	r2,r2,r3
 8001fc4:	e13fff17 	ldw	r4,-4(fp)
 8001fc8:	2089883a 	add	r4,r4,r2
 8001fcc:	e13fff15 	stw	r4,-4(fp)
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
 8001fd0:	e0bff817 	ldw	r2,-32(fp)
 8001fd4:	10800044 	addi	r2,r2,1
 8001fd8:	e0bff815 	stw	r2,-32(fp)
 8001fdc:	e0fffa17 	ldw	r3,-24(fp)
 8001fe0:	e13ff817 	ldw	r4,-32(fp)
 8001fe4:	193feb2e 	bgeu	r3,r4,8001f94 <alt_up_pixel_buffer_dma_draw_vline+0x1e0>
 8001fe8:	00006206 	br	8002174 <alt_up_pixel_buffer_dma_draw_vline+0x3c0>
	} else {
		/* Draw a vertical line of a given color on the screen using the linear addressing mode. */
		register unsigned int y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
 8001fec:	e0bff217 	ldw	r2,-56(fp)
 8001ff0:	10800e17 	ldw	r2,56(r2)
 8001ff4:	10800058 	cmpnei	r2,r2,1
 8001ff8:	1000191e 	bne	r2,zero,8002060 <alt_up_pixel_buffer_dma_draw_vline+0x2ac>
			addr = addr + t_y * limit_x;
 8001ffc:	e0fffb17 	ldw	r3,-20(fp)
 8002000:	e13ffe17 	ldw	r4,-8(fp)
 8002004:	1905383a 	mul	r2,r3,r4
 8002008:	e0ffff17 	ldw	r3,-4(fp)
 800200c:	1887883a 	add	r3,r3,r2
 8002010:	e0ffff15 	stw	r3,-4(fp)
			for (y = t_y; y <= b_y; y++)
 8002014:	e13ffb17 	ldw	r4,-20(fp)
 8002018:	e13ff615 	stw	r4,-40(fp)
 800201c:	00000c06 	br	8002050 <alt_up_pixel_buffer_dma_draw_vline+0x29c>
			{
				IOWR_8DIRECT(addr, line_x, local_color);
 8002020:	e0ffff17 	ldw	r3,-4(fp)
 8002024:	e0bffc17 	ldw	r2,-16(fp)
 8002028:	1885883a 	add	r2,r3,r2
 800202c:	e0fff917 	ldw	r3,-28(fp)
 8002030:	10c00025 	stbio	r3,0(r2)
				addr = addr + limit_x;
 8002034:	e0bfff17 	ldw	r2,-4(fp)
 8002038:	e0fffe17 	ldw	r3,-8(fp)
 800203c:	10c5883a 	add	r2,r2,r3
 8002040:	e0bfff15 	stw	r2,-4(fp)
		register unsigned int y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
 8002044:	e13ff617 	ldw	r4,-40(fp)
 8002048:	21000044 	addi	r4,r4,1
 800204c:	e13ff615 	stw	r4,-40(fp)
 8002050:	e0bffa17 	ldw	r2,-24(fp)
 8002054:	e0fff617 	ldw	r3,-40(fp)
 8002058:	10fff12e 	bgeu	r2,r3,8002020 <alt_up_pixel_buffer_dma_draw_vline+0x26c>
 800205c:	00004506 	br	8002174 <alt_up_pixel_buffer_dma_draw_vline+0x3c0>
			{
				IOWR_8DIRECT(addr, line_x, local_color);
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
 8002060:	e0bff217 	ldw	r2,-56(fp)
 8002064:	10800e17 	ldw	r2,56(r2)
 8002068:	10800098 	cmpnei	r2,r2,2
 800206c:	1000201e 	bne	r2,zero,80020f0 <alt_up_pixel_buffer_dma_draw_vline+0x33c>
			limit_x = limit_x << 1;
 8002070:	e13ffe17 	ldw	r4,-8(fp)
 8002074:	e13ffe17 	ldw	r4,-8(fp)
 8002078:	2105883a 	add	r2,r4,r4
 800207c:	e0bffe15 	stw	r2,-8(fp)
			addr = addr + t_y * limit_x;
 8002080:	e0fffb17 	ldw	r3,-20(fp)
 8002084:	e13ffe17 	ldw	r4,-8(fp)
 8002088:	1905383a 	mul	r2,r3,r4
 800208c:	e0ffff17 	ldw	r3,-4(fp)
 8002090:	1887883a 	add	r3,r3,r2
 8002094:	e0ffff15 	stw	r3,-4(fp)
			for (y = t_y; y <= b_y; y++)
 8002098:	e13ffb17 	ldw	r4,-20(fp)
 800209c:	e13ff615 	stw	r4,-40(fp)
 80020a0:	00000f06 	br	80020e0 <alt_up_pixel_buffer_dma_draw_vline+0x32c>
			{
				IOWR_16DIRECT(addr, line_x << 1, local_color);
 80020a4:	e0fffc17 	ldw	r3,-16(fp)
 80020a8:	e0fffc17 	ldw	r3,-16(fp)
 80020ac:	18c5883a 	add	r2,r3,r3
 80020b0:	1007883a 	mov	r3,r2
 80020b4:	e0bfff17 	ldw	r2,-4(fp)
 80020b8:	1885883a 	add	r2,r3,r2
 80020bc:	e0fff917 	ldw	r3,-28(fp)
 80020c0:	10c0002d 	sthio	r3,0(r2)
				addr = addr + limit_x;
 80020c4:	e13fff17 	ldw	r4,-4(fp)
 80020c8:	e0bffe17 	ldw	r2,-8(fp)
 80020cc:	2089883a 	add	r4,r4,r2
 80020d0:	e13fff15 	stw	r4,-4(fp)
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
 80020d4:	e0fff617 	ldw	r3,-40(fp)
 80020d8:	18c00044 	addi	r3,r3,1
 80020dc:	e0fff615 	stw	r3,-40(fp)
 80020e0:	e13ffa17 	ldw	r4,-24(fp)
 80020e4:	e0bff617 	ldw	r2,-40(fp)
 80020e8:	20bfee2e 	bgeu	r4,r2,80020a4 <alt_up_pixel_buffer_dma_draw_vline+0x2f0>
 80020ec:	00002106 	br	8002174 <alt_up_pixel_buffer_dma_draw_vline+0x3c0>
				addr = addr + limit_x;
			}
		}
		else
		{
			limit_x = limit_x << 2;
 80020f0:	e0fffe17 	ldw	r3,-8(fp)
 80020f4:	e0fffe17 	ldw	r3,-8(fp)
 80020f8:	18c5883a 	add	r2,r3,r3
 80020fc:	1085883a 	add	r2,r2,r2
 8002100:	e0bffe15 	stw	r2,-8(fp)
			addr = addr + t_y * limit_x;
 8002104:	e13ffb17 	ldw	r4,-20(fp)
 8002108:	e0fffe17 	ldw	r3,-8(fp)
 800210c:	20c5383a 	mul	r2,r4,r3
 8002110:	e13fff17 	ldw	r4,-4(fp)
 8002114:	2089883a 	add	r4,r4,r2
 8002118:	e13fff15 	stw	r4,-4(fp)
			for (y = t_y; y <= b_y; y++)
 800211c:	e0bffb17 	ldw	r2,-20(fp)
 8002120:	e0bff615 	stw	r2,-40(fp)
 8002124:	00001006 	br	8002168 <alt_up_pixel_buffer_dma_draw_vline+0x3b4>
			{
				IOWR_32DIRECT(addr, line_x << 2, local_color);
 8002128:	e0fffc17 	ldw	r3,-16(fp)
 800212c:	e0fffc17 	ldw	r3,-16(fp)
 8002130:	18c5883a 	add	r2,r3,r3
 8002134:	1085883a 	add	r2,r2,r2
 8002138:	1007883a 	mov	r3,r2
 800213c:	e0bfff17 	ldw	r2,-4(fp)
 8002140:	1885883a 	add	r2,r3,r2
 8002144:	e0fff917 	ldw	r3,-28(fp)
 8002148:	10c00035 	stwio	r3,0(r2)
				addr = addr + limit_x;
 800214c:	e13fff17 	ldw	r4,-4(fp)
 8002150:	e0bffe17 	ldw	r2,-8(fp)
 8002154:	2089883a 	add	r4,r4,r2
 8002158:	e13fff15 	stw	r4,-4(fp)
		}
		else
		{
			limit_x = limit_x << 2;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
 800215c:	e0fff617 	ldw	r3,-40(fp)
 8002160:	18c00044 	addi	r3,r3,1
 8002164:	e0fff615 	stw	r3,-40(fp)
 8002168:	e13ffa17 	ldw	r4,-24(fp)
 800216c:	e0bff617 	ldw	r2,-40(fp)
 8002170:	20bfed2e 	bgeu	r4,r2,8002128 <alt_up_pixel_buffer_dma_draw_vline+0x374>
				IOWR_32DIRECT(addr, line_x << 2, local_color);
				addr = addr + limit_x;
			}
		}
	}
}
 8002174:	e037883a 	mov	sp,fp
 8002178:	df000017 	ldw	fp,0(sp)
 800217c:	dec00104 	addi	sp,sp,4
 8002180:	f800283a 	ret

08002184 <alt_up_pixel_buffer_dma_draw_rectangle>:

void alt_up_pixel_buffer_dma_draw_rectangle(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int y0, int x1, int y1, int color, int backbuffer)
{
 8002184:	defff804 	addi	sp,sp,-32
 8002188:	dfc00715 	stw	ra,28(sp)
 800218c:	df000615 	stw	fp,24(sp)
 8002190:	df000604 	addi	fp,sp,24
 8002194:	e13ffc15 	stw	r4,-16(fp)
 8002198:	e17ffd15 	stw	r5,-12(fp)
 800219c:	e1bffe15 	stw	r6,-8(fp)
 80021a0:	e1ffff15 	stw	r7,-4(fp)
	alt_up_pixel_buffer_dma_draw_hline(pixel_buffer, x0, x1, y0, color, backbuffer);
 80021a4:	e0800317 	ldw	r2,12(fp)
 80021a8:	d8800015 	stw	r2,0(sp)
 80021ac:	e0800417 	ldw	r2,16(fp)
 80021b0:	d8800115 	stw	r2,4(sp)
 80021b4:	e13ffc17 	ldw	r4,-16(fp)
 80021b8:	e17ffd17 	ldw	r5,-12(fp)
 80021bc:	e1bfff17 	ldw	r6,-4(fp)
 80021c0:	e1fffe17 	ldw	r7,-8(fp)
 80021c4:	8001a640 	call	8001a64 <alt_up_pixel_buffer_dma_draw_hline>
	alt_up_pixel_buffer_dma_draw_hline(pixel_buffer, x0, x1, y1, color, backbuffer);
 80021c8:	e0800317 	ldw	r2,12(fp)
 80021cc:	d8800015 	stw	r2,0(sp)
 80021d0:	e0800417 	ldw	r2,16(fp)
 80021d4:	d8800115 	stw	r2,4(sp)
 80021d8:	e13ffc17 	ldw	r4,-16(fp)
 80021dc:	e17ffd17 	ldw	r5,-12(fp)
 80021e0:	e1bfff17 	ldw	r6,-4(fp)
 80021e4:	e1c00217 	ldw	r7,8(fp)
 80021e8:	8001a640 	call	8001a64 <alt_up_pixel_buffer_dma_draw_hline>
	alt_up_pixel_buffer_dma_draw_vline(pixel_buffer, x0, y0, y1, color, backbuffer);
 80021ec:	e0800317 	ldw	r2,12(fp)
 80021f0:	d8800015 	stw	r2,0(sp)
 80021f4:	e0800417 	ldw	r2,16(fp)
 80021f8:	d8800115 	stw	r2,4(sp)
 80021fc:	e13ffc17 	ldw	r4,-16(fp)
 8002200:	e17ffd17 	ldw	r5,-12(fp)
 8002204:	e1bffe17 	ldw	r6,-8(fp)
 8002208:	e1c00217 	ldw	r7,8(fp)
 800220c:	8001db40 	call	8001db4 <alt_up_pixel_buffer_dma_draw_vline>
	alt_up_pixel_buffer_dma_draw_vline(pixel_buffer, x1, y0, y1, color, backbuffer);
 8002210:	e0800317 	ldw	r2,12(fp)
 8002214:	d8800015 	stw	r2,0(sp)
 8002218:	e0800417 	ldw	r2,16(fp)
 800221c:	d8800115 	stw	r2,4(sp)
 8002220:	e13ffc17 	ldw	r4,-16(fp)
 8002224:	e17fff17 	ldw	r5,-4(fp)
 8002228:	e1bffe17 	ldw	r6,-8(fp)
 800222c:	e1c00217 	ldw	r7,8(fp)
 8002230:	8001db40 	call	8001db4 <alt_up_pixel_buffer_dma_draw_vline>
}
 8002234:	e037883a 	mov	sp,fp
 8002238:	dfc00117 	ldw	ra,4(sp)
 800223c:	df000017 	ldw	fp,0(sp)
 8002240:	dec00204 	addi	sp,sp,8
 8002244:	f800283a 	ret

08002248 <helper_plot_pixel>:

void helper_plot_pixel(register unsigned int buffer_start, register int line_size, register int x, register int y, register int color, register int mode)
/* This is a helper function that draws a pixel at a given location. Note that no boundary checks are made,
 * so drawing off-screen may cause unpredictable side effects. */
{
 8002248:	defffb04 	addi	sp,sp,-20
 800224c:	df000415 	stw	fp,16(sp)
 8002250:	df000404 	addi	fp,sp,16
 8002254:	e13ffc15 	stw	r4,-16(fp)
 8002258:	e17ffd15 	stw	r5,-12(fp)
 800225c:	e1bffe15 	stw	r6,-8(fp)
 8002260:	e1ffff15 	stw	r7,-4(fp)
	if (mode == 0)
 8002264:	e0c00217 	ldw	r3,8(fp)
 8002268:	1804c03a 	cmpne	r2,r3,zero
 800226c:	10000b1e 	bne	r2,zero,800229c <helper_plot_pixel+0x54>
		IOWR_8DIRECT(buffer_start, line_size*y+x, color);
 8002270:	e13ffd17 	ldw	r4,-12(fp)
 8002274:	e0ffff17 	ldw	r3,-4(fp)
 8002278:	20c5383a 	mul	r2,r4,r3
 800227c:	e13ffe17 	ldw	r4,-8(fp)
 8002280:	1105883a 	add	r2,r2,r4
 8002284:	1007883a 	mov	r3,r2
 8002288:	e0bffc17 	ldw	r2,-16(fp)
 800228c:	1885883a 	add	r2,r3,r2
 8002290:	e0c00117 	ldw	r3,4(fp)
 8002294:	10c00025 	stbio	r3,0(r2)
 8002298:	00001b06 	br	8002308 <helper_plot_pixel+0xc0>
	else if (mode == 1)
 800229c:	e1000217 	ldw	r4,8(fp)
 80022a0:	20800058 	cmpnei	r2,r4,1
 80022a4:	10000c1e 	bne	r2,zero,80022d8 <helper_plot_pixel+0x90>
		IOWR_16DIRECT(buffer_start, (line_size*y+x) << 1, color);
 80022a8:	e0fffd17 	ldw	r3,-12(fp)
 80022ac:	e13fff17 	ldw	r4,-4(fp)
 80022b0:	1905383a 	mul	r2,r3,r4
 80022b4:	e0fffe17 	ldw	r3,-8(fp)
 80022b8:	10c5883a 	add	r2,r2,r3
 80022bc:	1085883a 	add	r2,r2,r2
 80022c0:	1007883a 	mov	r3,r2
 80022c4:	e0bffc17 	ldw	r2,-16(fp)
 80022c8:	1885883a 	add	r2,r3,r2
 80022cc:	e1000117 	ldw	r4,4(fp)
 80022d0:	1100002d 	sthio	r4,0(r2)
 80022d4:	00000c06 	br	8002308 <helper_plot_pixel+0xc0>
	else
		IOWR_32DIRECT(buffer_start, (line_size*y+x) << 2, color);
 80022d8:	e0fffd17 	ldw	r3,-12(fp)
 80022dc:	e13fff17 	ldw	r4,-4(fp)
 80022e0:	1905383a 	mul	r2,r3,r4
 80022e4:	e0fffe17 	ldw	r3,-8(fp)
 80022e8:	10c5883a 	add	r2,r2,r3
 80022ec:	1085883a 	add	r2,r2,r2
 80022f0:	1085883a 	add	r2,r2,r2
 80022f4:	1007883a 	mov	r3,r2
 80022f8:	e0bffc17 	ldw	r2,-16(fp)
 80022fc:	1885883a 	add	r2,r3,r2
 8002300:	e1000117 	ldw	r4,4(fp)
 8002304:	11000035 	stwio	r4,0(r2)
}
 8002308:	e037883a 	mov	sp,fp
 800230c:	df000017 	ldw	fp,0(sp)
 8002310:	dec00104 	addi	sp,sp,4
 8002314:	f800283a 	ret

08002318 <alt_up_pixel_buffer_dma_draw_line>:

void alt_up_pixel_buffer_dma_draw_line(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int y0, int x1, int y1, int color, int backbuffer)
/* This function draws a line between points (x0, y0) and (x1, y1). The function does not check if it draws a pixel within screen boundaries.
 * users should ensure that the line is drawn within the screen boundaries. */
{
 8002318:	deffe404 	addi	sp,sp,-112
 800231c:	dfc01b15 	stw	ra,108(sp)
 8002320:	df001a15 	stw	fp,104(sp)
 8002324:	df001a04 	addi	fp,sp,104
 8002328:	e13fe815 	stw	r4,-96(fp)
 800232c:	e17fe915 	stw	r5,-92(fp)
 8002330:	e1bfea15 	stw	r6,-88(fp)
 8002334:	e1ffeb15 	stw	r7,-84(fp)
	register int x_0 = x0;
 8002338:	e0bfe917 	ldw	r2,-92(fp)
 800233c:	e0bffa15 	stw	r2,-24(fp)
	register int y_0 = y0;
 8002340:	e0ffea17 	ldw	r3,-88(fp)
 8002344:	e0fff915 	stw	r3,-28(fp)
	register int x_1 = x1;
 8002348:	e13feb17 	ldw	r4,-84(fp)
 800234c:	e13ff815 	stw	r4,-32(fp)
	register int y_1 = y1;
 8002350:	e0800217 	ldw	r2,8(fp)
 8002354:	e0bff715 	stw	r2,-36(fp)
	register char steep = (ABS(y_1 - y_0) > ABS(x_1 - x_0)) ? 1 : 0;
 8002358:	e0fff717 	ldw	r3,-36(fp)
 800235c:	e13ff917 	ldw	r4,-28(fp)
 8002360:	1905c83a 	sub	r2,r3,r4
 8002364:	e0bfff15 	stw	r2,-4(fp)
 8002368:	e0ffff17 	ldw	r3,-4(fp)
 800236c:	1804403a 	cmpge	r2,r3,zero
 8002370:	1000031e 	bne	r2,zero,8002380 <alt_up_pixel_buffer_dma_draw_line+0x68>
 8002374:	e13fff17 	ldw	r4,-4(fp)
 8002378:	0109c83a 	sub	r4,zero,r4
 800237c:	e13fff15 	stw	r4,-4(fp)
 8002380:	e0fff817 	ldw	r3,-32(fp)
 8002384:	e13ffa17 	ldw	r4,-24(fp)
 8002388:	1905c83a 	sub	r2,r3,r4
 800238c:	e0bffe15 	stw	r2,-8(fp)
 8002390:	e0fffe17 	ldw	r3,-8(fp)
 8002394:	1804403a 	cmpge	r2,r3,zero
 8002398:	1000031e 	bne	r2,zero,80023a8 <alt_up_pixel_buffer_dma_draw_line+0x90>
 800239c:	e13ffe17 	ldw	r4,-8(fp)
 80023a0:	0109c83a 	sub	r4,zero,r4
 80023a4:	e13ffe15 	stw	r4,-8(fp)
 80023a8:	e0fffe17 	ldw	r3,-8(fp)
 80023ac:	e13fff17 	ldw	r4,-4(fp)
 80023b0:	1904803a 	cmplt	r2,r3,r4
 80023b4:	e0bff605 	stb	r2,-40(fp)
	register int deltax, deltay, error, ystep, x, y;
	register int color_mode =	(pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) ? 0 :
								(pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) ? 1 : 2;
 80023b8:	e0bfe817 	ldw	r2,-96(fp)
 80023bc:	10800e17 	ldw	r2,56(r2)
 80023c0:	10800060 	cmpeqi	r2,r2,1
 80023c4:	10000c1e 	bne	r2,zero,80023f8 <alt_up_pixel_buffer_dma_draw_line+0xe0>
 80023c8:	e0bfe817 	ldw	r2,-96(fp)
 80023cc:	10800e17 	ldw	r2,56(r2)
 80023d0:	10800098 	cmpnei	r2,r2,2
 80023d4:	1000031e 	bne	r2,zero,80023e4 <alt_up_pixel_buffer_dma_draw_line+0xcc>
 80023d8:	00800044 	movi	r2,1
 80023dc:	e0bffc15 	stw	r2,-16(fp)
 80023e0:	00000206 	br	80023ec <alt_up_pixel_buffer_dma_draw_line+0xd4>
 80023e4:	00c00084 	movi	r3,2
 80023e8:	e0fffc15 	stw	r3,-16(fp)
 80023ec:	e13ffc17 	ldw	r4,-16(fp)
 80023f0:	e13ffd15 	stw	r4,-12(fp)
 80023f4:	00000106 	br	80023fc <alt_up_pixel_buffer_dma_draw_line+0xe4>
 80023f8:	e03ffd15 	stw	zero,-12(fp)
 80023fc:	e0bffd17 	ldw	r2,-12(fp)
 8002400:	e0bfef15 	stw	r2,-68(fp)
	register int line_color = color;
 8002404:	e0c00317 	ldw	r3,12(fp)
 8002408:	e0ffee15 	stw	r3,-72(fp)
	register unsigned int buffer_start;
	register int line_size = (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) ? (1 << (pixel_buffer->y_coord_offset-color_mode)) : pixel_buffer->x_resolution;
 800240c:	e0bfe817 	ldw	r2,-96(fp)
 8002410:	10800d17 	ldw	r2,52(r2)
 8002414:	1004c03a 	cmpne	r2,r2,zero
 8002418:	1000091e 	bne	r2,zero,8002440 <alt_up_pixel_buffer_dma_draw_line+0x128>
 800241c:	e0bfe817 	ldw	r2,-96(fp)
 8002420:	10c01317 	ldw	r3,76(r2)
 8002424:	e0bfef17 	ldw	r2,-68(fp)
 8002428:	1885c83a 	sub	r2,r3,r2
 800242c:	1007883a 	mov	r3,r2
 8002430:	00800044 	movi	r2,1
 8002434:	10c4983a 	sll	r2,r2,r3
 8002438:	e0bffb15 	stw	r2,-20(fp)
 800243c:	00000306 	br	800244c <alt_up_pixel_buffer_dma_draw_line+0x134>
 8002440:	e0bfe817 	ldw	r2,-96(fp)
 8002444:	10800f17 	ldw	r2,60(r2)
 8002448:	e0bffb15 	stw	r2,-20(fp)
 800244c:	e13ffb17 	ldw	r4,-20(fp)
 8002450:	e13fec15 	stw	r4,-80(fp)

	if (backbuffer == 1)
 8002454:	e0800417 	ldw	r2,16(fp)
 8002458:	10800058 	cmpnei	r2,r2,1
 800245c:	1000041e 	bne	r2,zero,8002470 <alt_up_pixel_buffer_dma_draw_line+0x158>
		buffer_start = pixel_buffer->back_buffer_start_address;
 8002460:	e0bfe817 	ldw	r2,-96(fp)
 8002464:	10800c17 	ldw	r2,48(r2)
 8002468:	e0bfed15 	stw	r2,-76(fp)
 800246c:	00000306 	br	800247c <alt_up_pixel_buffer_dma_draw_line+0x164>
	else
		buffer_start = pixel_buffer->buffer_start_address;
 8002470:	e0bfe817 	ldw	r2,-96(fp)
 8002474:	10800b17 	ldw	r2,44(r2)
 8002478:	e0bfed15 	stw	r2,-76(fp)

	/* Preprocessing inputs */
	if (steep > 0) {
 800247c:	e0fff603 	ldbu	r3,-40(fp)
 8002480:	18803fcc 	andi	r2,r3,255
 8002484:	1080201c 	xori	r2,r2,128
 8002488:	10bfe004 	addi	r2,r2,-128
 800248c:	10800050 	cmplti	r2,r2,1
 8002490:	10000c1e 	bne	r2,zero,80024c4 <alt_up_pixel_buffer_dma_draw_line+0x1ac>
		// Swap x_0 and y_0
		error = x_0;
 8002494:	e13ffa17 	ldw	r4,-24(fp)
 8002498:	e13ff315 	stw	r4,-52(fp)
		x_0 = y_0;
 800249c:	e0bff917 	ldw	r2,-28(fp)
 80024a0:	e0bffa15 	stw	r2,-24(fp)
		y_0 = error;
 80024a4:	e0fff317 	ldw	r3,-52(fp)
 80024a8:	e0fff915 	stw	r3,-28(fp)
		// Swap x_1 and y_1
		error = x_1;
 80024ac:	e13ff817 	ldw	r4,-32(fp)
 80024b0:	e13ff315 	stw	r4,-52(fp)
		x_1 = y_1;
 80024b4:	e0bff717 	ldw	r2,-36(fp)
 80024b8:	e0bff815 	stw	r2,-32(fp)
		y_1 = error;
 80024bc:	e0fff317 	ldw	r3,-52(fp)
 80024c0:	e0fff715 	stw	r3,-36(fp)
	}
	if (x_0 > x_1) {
 80024c4:	e13ff817 	ldw	r4,-32(fp)
 80024c8:	e0bffa17 	ldw	r2,-24(fp)
 80024cc:	20800c0e 	bge	r4,r2,8002500 <alt_up_pixel_buffer_dma_draw_line+0x1e8>
		// Swap x_0 and x_1
		error = x_0;
 80024d0:	e0fffa17 	ldw	r3,-24(fp)
 80024d4:	e0fff315 	stw	r3,-52(fp)
		x_0 = x_1;
 80024d8:	e13ff817 	ldw	r4,-32(fp)
 80024dc:	e13ffa15 	stw	r4,-24(fp)
		x_1 = error;
 80024e0:	e0bff317 	ldw	r2,-52(fp)
 80024e4:	e0bff815 	stw	r2,-32(fp)
		// Swap y_0 and y_1
		error = y_0;
 80024e8:	e0fff917 	ldw	r3,-28(fp)
 80024ec:	e0fff315 	stw	r3,-52(fp)
		y_0 = y_1;
 80024f0:	e13ff717 	ldw	r4,-36(fp)
 80024f4:	e13ff915 	stw	r4,-28(fp)
		y_1 = error;
 80024f8:	e0bff317 	ldw	r2,-52(fp)
 80024fc:	e0bff715 	stw	r2,-36(fp)
	}

	/* Setup local variables */
	deltax = x_1 - x_0;
 8002500:	e0fff817 	ldw	r3,-32(fp)
 8002504:	e13ffa17 	ldw	r4,-24(fp)
 8002508:	1907c83a 	sub	r3,r3,r4
 800250c:	e0fff515 	stw	r3,-44(fp)
	deltay = ABS(y_1 - y_0);
 8002510:	e0fff717 	ldw	r3,-36(fp)
 8002514:	e13ff917 	ldw	r4,-28(fp)
 8002518:	1905c83a 	sub	r2,r3,r4
 800251c:	e0bff415 	stw	r2,-48(fp)
 8002520:	e0fff417 	ldw	r3,-48(fp)
 8002524:	1804403a 	cmpge	r2,r3,zero
 8002528:	1000031e 	bne	r2,zero,8002538 <alt_up_pixel_buffer_dma_draw_line+0x220>
 800252c:	e13ff417 	ldw	r4,-48(fp)
 8002530:	0109c83a 	sub	r4,zero,r4
 8002534:	e13ff415 	stw	r4,-48(fp)
	error = -(deltax / 2); 
 8002538:	e0fff517 	ldw	r3,-44(fp)
 800253c:	1804d7fa 	srli	r2,r3,31
 8002540:	e13ff517 	ldw	r4,-44(fp)
 8002544:	1105883a 	add	r2,r2,r4
 8002548:	1005d07a 	srai	r2,r2,1
 800254c:	0085c83a 	sub	r2,zero,r2
 8002550:	e0bff315 	stw	r2,-52(fp)
	y = y_0;
 8002554:	e0bff917 	ldw	r2,-28(fp)
 8002558:	e0bff015 	stw	r2,-64(fp)
	if (y_0 < y_1)
 800255c:	e0fff917 	ldw	r3,-28(fp)
 8002560:	e13ff717 	ldw	r4,-36(fp)
 8002564:	1900030e 	bge	r3,r4,8002574 <alt_up_pixel_buffer_dma_draw_line+0x25c>
		ystep = 1;
 8002568:	00800044 	movi	r2,1
 800256c:	e0bff215 	stw	r2,-56(fp)
 8002570:	00000206 	br	800257c <alt_up_pixel_buffer_dma_draw_line+0x264>
	else
		ystep = -1;
 8002574:	00ffffc4 	movi	r3,-1
 8002578:	e0fff215 	stw	r3,-56(fp)

	/* Draw a line - either go along the x axis (steep = 0) or along the y axis (steep = 1). The code is replicated to
	 * compile well on low optimization levels. */
	if (steep == 1)
 800257c:	e13ff603 	ldbu	r4,-40(fp)
 8002580:	20803fcc 	andi	r2,r4,255
 8002584:	1080201c 	xori	r2,r2,128
 8002588:	10bfe004 	addi	r2,r2,-128
 800258c:	10800058 	cmpnei	r2,r2,1
 8002590:	1000221e 	bne	r2,zero,800261c <alt_up_pixel_buffer_dma_draw_line+0x304>
	{
		for (x=x_0; x <= x_1; x++) {
 8002594:	e0bffa17 	ldw	r2,-24(fp)
 8002598:	e0bff115 	stw	r2,-60(fp)
 800259c:	00001b06 	br	800260c <alt_up_pixel_buffer_dma_draw_line+0x2f4>
			helper_plot_pixel(buffer_start, line_size, y, x, line_color, color_mode);
 80025a0:	e0ffee17 	ldw	r3,-72(fp)
 80025a4:	d8c00015 	stw	r3,0(sp)
 80025a8:	e13fef17 	ldw	r4,-68(fp)
 80025ac:	d9000115 	stw	r4,4(sp)
 80025b0:	e13fed17 	ldw	r4,-76(fp)
 80025b4:	e17fec17 	ldw	r5,-80(fp)
 80025b8:	e1bff017 	ldw	r6,-64(fp)
 80025bc:	e1fff117 	ldw	r7,-60(fp)
 80025c0:	80022480 	call	8002248 <helper_plot_pixel>
			error = error + deltay;
 80025c4:	e0bff317 	ldw	r2,-52(fp)
 80025c8:	e0fff417 	ldw	r3,-48(fp)
 80025cc:	10c5883a 	add	r2,r2,r3
 80025d0:	e0bff315 	stw	r2,-52(fp)
			if (error > 0) {
 80025d4:	e13ff317 	ldw	r4,-52(fp)
 80025d8:	20800050 	cmplti	r2,r4,1
 80025dc:	1000081e 	bne	r2,zero,8002600 <alt_up_pixel_buffer_dma_draw_line+0x2e8>
				y = y + ystep;
 80025e0:	e0bff017 	ldw	r2,-64(fp)
 80025e4:	e0fff217 	ldw	r3,-56(fp)
 80025e8:	10c5883a 	add	r2,r2,r3
 80025ec:	e0bff015 	stw	r2,-64(fp)
				error = error - deltax;
 80025f0:	e13ff317 	ldw	r4,-52(fp)
 80025f4:	e0bff517 	ldw	r2,-44(fp)
 80025f8:	2089c83a 	sub	r4,r4,r2
 80025fc:	e13ff315 	stw	r4,-52(fp)

	/* Draw a line - either go along the x axis (steep = 0) or along the y axis (steep = 1). The code is replicated to
	 * compile well on low optimization levels. */
	if (steep == 1)
	{
		for (x=x_0; x <= x_1; x++) {
 8002600:	e0fff117 	ldw	r3,-60(fp)
 8002604:	18c00044 	addi	r3,r3,1
 8002608:	e0fff115 	stw	r3,-60(fp)
 800260c:	e13ff817 	ldw	r4,-32(fp)
 8002610:	e0bff117 	ldw	r2,-60(fp)
 8002614:	20bfe20e 	bge	r4,r2,80025a0 <alt_up_pixel_buffer_dma_draw_line+0x288>
 8002618:	00002106 	br	80026a0 <alt_up_pixel_buffer_dma_draw_line+0x388>
			}
		}
	}
	else
	{
		for (x=x_0; x <= x_1; x++) {
 800261c:	e0fffa17 	ldw	r3,-24(fp)
 8002620:	e0fff115 	stw	r3,-60(fp)
 8002624:	00001b06 	br	8002694 <alt_up_pixel_buffer_dma_draw_line+0x37c>
			helper_plot_pixel(buffer_start, line_size, x, y, line_color, color_mode);
 8002628:	e13fee17 	ldw	r4,-72(fp)
 800262c:	d9000015 	stw	r4,0(sp)
 8002630:	e0bfef17 	ldw	r2,-68(fp)
 8002634:	d8800115 	stw	r2,4(sp)
 8002638:	e13fed17 	ldw	r4,-76(fp)
 800263c:	e17fec17 	ldw	r5,-80(fp)
 8002640:	e1bff117 	ldw	r6,-60(fp)
 8002644:	e1fff017 	ldw	r7,-64(fp)
 8002648:	80022480 	call	8002248 <helper_plot_pixel>
			error = error + deltay;
 800264c:	e0fff317 	ldw	r3,-52(fp)
 8002650:	e13ff417 	ldw	r4,-48(fp)
 8002654:	1907883a 	add	r3,r3,r4
 8002658:	e0fff315 	stw	r3,-52(fp)
			if (error > 0) {
 800265c:	e0fff317 	ldw	r3,-52(fp)
 8002660:	18800050 	cmplti	r2,r3,1
 8002664:	1000081e 	bne	r2,zero,8002688 <alt_up_pixel_buffer_dma_draw_line+0x370>
				y = y + ystep;
 8002668:	e13ff017 	ldw	r4,-64(fp)
 800266c:	e0bff217 	ldw	r2,-56(fp)
 8002670:	2089883a 	add	r4,r4,r2
 8002674:	e13ff015 	stw	r4,-64(fp)
				error = error - deltax;
 8002678:	e0fff317 	ldw	r3,-52(fp)
 800267c:	e13ff517 	ldw	r4,-44(fp)
 8002680:	1907c83a 	sub	r3,r3,r4
 8002684:	e0fff315 	stw	r3,-52(fp)
			}
		}
	}
	else
	{
		for (x=x_0; x <= x_1; x++) {
 8002688:	e0bff117 	ldw	r2,-60(fp)
 800268c:	10800044 	addi	r2,r2,1
 8002690:	e0bff115 	stw	r2,-60(fp)
 8002694:	e0fff817 	ldw	r3,-32(fp)
 8002698:	e13ff117 	ldw	r4,-60(fp)
 800269c:	193fe20e 	bge	r3,r4,8002628 <alt_up_pixel_buffer_dma_draw_line+0x310>
				y = y + ystep;
				error = error - deltax;
			}
		}
	}
}
 80026a0:	e037883a 	mov	sp,fp
 80026a4:	dfc00117 	ldw	ra,4(sp)
 80026a8:	df000017 	ldw	fp,0(sp)
 80026ac:	dec00204 	addi	sp,sp,8
 80026b0:	f800283a 	ret

080026b4 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
 80026b4:	defff404 	addi	sp,sp,-48
 80026b8:	df000b15 	stw	fp,44(sp)
 80026bc:	df000b04 	addi	fp,sp,44
 80026c0:	e13ffb15 	stw	r4,-20(fp)
 80026c4:	e17ffc15 	stw	r5,-16(fp)
 80026c8:	e1bffd15 	stw	r6,-12(fp)
 80026cc:	e1fffe15 	stw	r7,-8(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
 80026d0:	e03ff915 	stw	zero,-28(fp)
 80026d4:	00820034 	movhi	r2,2048
 80026d8:	109aa804 	addi	r2,r2,27296
 80026dc:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
 80026e0:	1005003a 	cmpeq	r2,r2,zero
 80026e4:	1000411e 	bne	r2,zero,80027ec <alt_alarm_start+0x138>
  {
    if (alarm)
 80026e8:	e0bffb17 	ldw	r2,-20(fp)
 80026ec:	1005003a 	cmpeq	r2,r2,zero
 80026f0:	10003b1e 	bne	r2,zero,80027e0 <alt_alarm_start+0x12c>
    {
      alarm->callback = callback;
 80026f4:	e0fffb17 	ldw	r3,-20(fp)
 80026f8:	e0bffd17 	ldw	r2,-12(fp)
 80026fc:	18800315 	stw	r2,12(r3)
      alarm->context  = context;
 8002700:	e0fffb17 	ldw	r3,-20(fp)
 8002704:	e0bffe17 	ldw	r2,-8(fp)
 8002708:	18800515 	stw	r2,20(r3)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 800270c:	0005303a 	rdctl	r2,status
 8002710:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8002714:	e0fff817 	ldw	r3,-32(fp)
 8002718:	00bfff84 	movi	r2,-2
 800271c:	1884703a 	and	r2,r3,r2
 8002720:	1001703a 	wrctl	status,r2
  
  return context;
 8002724:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
 8002728:	e0bffa15 	stw	r2,-24(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 800272c:	00820034 	movhi	r2,2048
 8002730:	109aa904 	addi	r2,r2,27300
 8002734:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
 8002738:	e0bff915 	stw	r2,-28(fp)
      
      alarm->time = nticks + current_nticks + 1; 
 800273c:	e0fffc17 	ldw	r3,-16(fp)
 8002740:	e0bff917 	ldw	r2,-28(fp)
 8002744:	1885883a 	add	r2,r3,r2
 8002748:	10c00044 	addi	r3,r2,1
 800274c:	e0bffb17 	ldw	r2,-20(fp)
 8002750:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
 8002754:	e0bffb17 	ldw	r2,-20(fp)
 8002758:	10c00217 	ldw	r3,8(r2)
 800275c:	e0bff917 	ldw	r2,-28(fp)
 8002760:	1880042e 	bgeu	r3,r2,8002774 <alt_alarm_start+0xc0>
      {
        alarm->rollover = 1;
 8002764:	e0fffb17 	ldw	r3,-20(fp)
 8002768:	00800044 	movi	r2,1
 800276c:	18800405 	stb	r2,16(r3)
 8002770:	00000206 	br	800277c <alt_alarm_start+0xc8>
      }
      else
      {
        alarm->rollover = 0;
 8002774:	e0bffb17 	ldw	r2,-20(fp)
 8002778:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
 800277c:	e0fffb17 	ldw	r3,-20(fp)
 8002780:	00820034 	movhi	r2,2048
 8002784:	1094f904 	addi	r2,r2,21476
 8002788:	e0bff615 	stw	r2,-40(fp)
 800278c:	e0fff715 	stw	r3,-36(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 8002790:	e0fff717 	ldw	r3,-36(fp)
 8002794:	e0bff617 	ldw	r2,-40(fp)
 8002798:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
 800279c:	e0bff617 	ldw	r2,-40(fp)
 80027a0:	10c00017 	ldw	r3,0(r2)
 80027a4:	e0bff717 	ldw	r2,-36(fp)
 80027a8:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 80027ac:	e0bff617 	ldw	r2,-40(fp)
 80027b0:	10c00017 	ldw	r3,0(r2)
 80027b4:	e0bff717 	ldw	r2,-36(fp)
 80027b8:	18800115 	stw	r2,4(r3)
  list->next           = entry;
 80027bc:	e0fff617 	ldw	r3,-40(fp)
 80027c0:	e0bff717 	ldw	r2,-36(fp)
 80027c4:	18800015 	stw	r2,0(r3)
 80027c8:	e0bffa17 	ldw	r2,-24(fp)
 80027cc:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 80027d0:	e0bff517 	ldw	r2,-44(fp)
 80027d4:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
 80027d8:	e03fff15 	stw	zero,-4(fp)
 80027dc:	00000506 	br	80027f4 <alt_alarm_start+0x140>
    }
    else
    {
      return -EINVAL;
 80027e0:	00bffa84 	movi	r2,-22
 80027e4:	e0bfff15 	stw	r2,-4(fp)
 80027e8:	00000206 	br	80027f4 <alt_alarm_start+0x140>
    }
  }
  else
  {
    return -ENOTSUP;
 80027ec:	00bfde84 	movi	r2,-134
 80027f0:	e0bfff15 	stw	r2,-4(fp)
 80027f4:	e0bfff17 	ldw	r2,-4(fp)
  }
}
 80027f8:	e037883a 	mov	sp,fp
 80027fc:	df000017 	ldw	fp,0(sp)
 8002800:	dec00104 	addi	sp,sp,4
 8002804:	f800283a 	ret

08002808 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 8002808:	defff804 	addi	sp,sp,-32
 800280c:	dfc00715 	stw	ra,28(sp)
 8002810:	df000615 	stw	fp,24(sp)
 8002814:	df000604 	addi	fp,sp,24
 8002818:	e13ffc15 	stw	r4,-16(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 800281c:	e0bffc17 	ldw	r2,-16(fp)
 8002820:	1004803a 	cmplt	r2,r2,zero
 8002824:	1000081e 	bne	r2,zero,8002848 <close+0x40>
 8002828:	e0bffc17 	ldw	r2,-16(fp)
 800282c:	10800324 	muli	r2,r2,12
 8002830:	1007883a 	mov	r3,r2
 8002834:	00820034 	movhi	r2,2048
 8002838:	10939004 	addi	r2,r2,20032
 800283c:	1887883a 	add	r3,r3,r2
 8002840:	e0ffff15 	stw	r3,-4(fp)
 8002844:	00000106 	br	800284c <close+0x44>
 8002848:	e03fff15 	stw	zero,-4(fp)
 800284c:	e0bfff17 	ldw	r2,-4(fp)
 8002850:	e0bffb15 	stw	r2,-20(fp)

  if (fd)
 8002854:	e0bffb17 	ldw	r2,-20(fp)
 8002858:	1005003a 	cmpeq	r2,r2,zero
 800285c:	10001d1e 	bne	r2,zero,80028d4 <close+0xcc>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 8002860:	e0bffb17 	ldw	r2,-20(fp)
 8002864:	10800017 	ldw	r2,0(r2)
 8002868:	10800417 	ldw	r2,16(r2)
 800286c:	1005003a 	cmpeq	r2,r2,zero
 8002870:	1000071e 	bne	r2,zero,8002890 <close+0x88>
 8002874:	e0bffb17 	ldw	r2,-20(fp)
 8002878:	10800017 	ldw	r2,0(r2)
 800287c:	10800417 	ldw	r2,16(r2)
 8002880:	e13ffb17 	ldw	r4,-20(fp)
 8002884:	103ee83a 	callr	r2
 8002888:	e0bffe15 	stw	r2,-8(fp)
 800288c:	00000106 	br	8002894 <close+0x8c>
 8002890:	e03ffe15 	stw	zero,-8(fp)
 8002894:	e0bffe17 	ldw	r2,-8(fp)
 8002898:	e0bffa15 	stw	r2,-24(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 800289c:	e13ffc17 	ldw	r4,-16(fp)
 80028a0:	80033400 	call	8003340 <alt_release_fd>
    if (rval < 0)
 80028a4:	e0bffa17 	ldw	r2,-24(fp)
 80028a8:	1004403a 	cmpge	r2,r2,zero
 80028ac:	1000071e 	bne	r2,zero,80028cc <close+0xc4>
    {
      ALT_ERRNO = -rval;
 80028b0:	80029040 	call	8002904 <alt_get_errno>
 80028b4:	e0fffa17 	ldw	r3,-24(fp)
 80028b8:	00c7c83a 	sub	r3,zero,r3
 80028bc:	10c00015 	stw	r3,0(r2)
      return -1;
 80028c0:	00bfffc4 	movi	r2,-1
 80028c4:	e0bffd15 	stw	r2,-12(fp)
 80028c8:	00000806 	br	80028ec <close+0xe4>
    }
    return 0;
 80028cc:	e03ffd15 	stw	zero,-12(fp)
 80028d0:	00000606 	br	80028ec <close+0xe4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 80028d4:	80029040 	call	8002904 <alt_get_errno>
 80028d8:	1007883a 	mov	r3,r2
 80028dc:	00801444 	movi	r2,81
 80028e0:	18800015 	stw	r2,0(r3)
    return -1;
 80028e4:	00bfffc4 	movi	r2,-1
 80028e8:	e0bffd15 	stw	r2,-12(fp)
 80028ec:	e0bffd17 	ldw	r2,-12(fp)
  }
}
 80028f0:	e037883a 	mov	sp,fp
 80028f4:	dfc00117 	ldw	ra,4(sp)
 80028f8:	df000017 	ldw	fp,0(sp)
 80028fc:	dec00204 	addi	sp,sp,8
 8002900:	f800283a 	ret

08002904 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 8002904:	defffd04 	addi	sp,sp,-12
 8002908:	dfc00215 	stw	ra,8(sp)
 800290c:	df000115 	stw	fp,4(sp)
 8002910:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 8002914:	00820034 	movhi	r2,2048
 8002918:	1094f704 	addi	r2,r2,21468
 800291c:	10800017 	ldw	r2,0(r2)
 8002920:	1005003a 	cmpeq	r2,r2,zero
 8002924:	1000061e 	bne	r2,zero,8002940 <alt_get_errno+0x3c>
 8002928:	00820034 	movhi	r2,2048
 800292c:	1094f704 	addi	r2,r2,21468
 8002930:	10800017 	ldw	r2,0(r2)
 8002934:	103ee83a 	callr	r2
 8002938:	e0bfff15 	stw	r2,-4(fp)
 800293c:	00000306 	br	800294c <alt_get_errno+0x48>
 8002940:	00820034 	movhi	r2,2048
 8002944:	109aaa04 	addi	r2,r2,27304
 8002948:	e0bfff15 	stw	r2,-4(fp)
 800294c:	e0bfff17 	ldw	r2,-4(fp)
}
 8002950:	e037883a 	mov	sp,fp
 8002954:	dfc00117 	ldw	ra,4(sp)
 8002958:	df000017 	ldw	fp,0(sp)
 800295c:	dec00204 	addi	sp,sp,8
 8002960:	f800283a 	ret

08002964 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 8002964:	defffe04 	addi	sp,sp,-8
 8002968:	df000115 	stw	fp,4(sp)
 800296c:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
 8002970:	e03fff15 	stw	zero,-4(fp)
 8002974:	00000506 	br	800298c <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
 8002978:	e0bfff17 	ldw	r2,-4(fp)
 800297c:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
 8002980:	e0bfff17 	ldw	r2,-4(fp)
 8002984:	10800804 	addi	r2,r2,32
 8002988:	e0bfff15 	stw	r2,-4(fp)
 800298c:	e0bfff17 	ldw	r2,-4(fp)
 8002990:	10840030 	cmpltui	r2,r2,4096
 8002994:	103ff81e 	bne	r2,zero,8002978 <alt_dcache_flush_all+0x14>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 8002998:	e037883a 	mov	sp,fp
 800299c:	df000017 	ldw	fp,0(sp)
 80029a0:	dec00104 	addi	sp,sp,4
 80029a4:	f800283a 	ret

080029a8 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 80029a8:	defffc04 	addi	sp,sp,-16
 80029ac:	df000315 	stw	fp,12(sp)
 80029b0:	df000304 	addi	fp,sp,12
 80029b4:	e13ffd15 	stw	r4,-12(fp)
 80029b8:	e17ffe15 	stw	r5,-8(fp)
 80029bc:	e1bfff15 	stw	r6,-4(fp)
  return len;
 80029c0:	e0bfff17 	ldw	r2,-4(fp)
}
 80029c4:	e037883a 	mov	sp,fp
 80029c8:	df000017 	ldw	fp,0(sp)
 80029cc:	dec00104 	addi	sp,sp,4
 80029d0:	f800283a 	ret

080029d4 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
 80029d4:	defff904 	addi	sp,sp,-28
 80029d8:	dfc00615 	stw	ra,24(sp)
 80029dc:	df000515 	stw	fp,20(sp)
 80029e0:	df000504 	addi	fp,sp,20
 80029e4:	e13ffd15 	stw	r4,-12(fp)
 80029e8:	e17ffe15 	stw	r5,-8(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
 80029ec:	e0bffd17 	ldw	r2,-12(fp)
 80029f0:	1005003a 	cmpeq	r2,r2,zero
 80029f4:	1000041e 	bne	r2,zero,8002a08 <alt_dev_llist_insert+0x34>
 80029f8:	e0bffd17 	ldw	r2,-12(fp)
 80029fc:	10800217 	ldw	r2,8(r2)
 8002a00:	1004c03a 	cmpne	r2,r2,zero
 8002a04:	1000071e 	bne	r2,zero,8002a24 <alt_dev_llist_insert+0x50>
  {
    ALT_ERRNO = EINVAL;
 8002a08:	8002a880 	call	8002a88 <alt_get_errno>
 8002a0c:	1007883a 	mov	r3,r2
 8002a10:	00800584 	movi	r2,22
 8002a14:	18800015 	stw	r2,0(r3)
    return -EINVAL;
 8002a18:	00bffa84 	movi	r2,-22
 8002a1c:	e0bfff15 	stw	r2,-4(fp)
 8002a20:	00001306 	br	8002a70 <alt_dev_llist_insert+0x9c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
 8002a24:	e0fffd17 	ldw	r3,-12(fp)
 8002a28:	e0bffe17 	ldw	r2,-8(fp)
 8002a2c:	e0bffb15 	stw	r2,-20(fp)
 8002a30:	e0fffc15 	stw	r3,-16(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 8002a34:	e0fffc17 	ldw	r3,-16(fp)
 8002a38:	e0bffb17 	ldw	r2,-20(fp)
 8002a3c:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
 8002a40:	e0bffb17 	ldw	r2,-20(fp)
 8002a44:	10c00017 	ldw	r3,0(r2)
 8002a48:	e0bffc17 	ldw	r2,-16(fp)
 8002a4c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 8002a50:	e0bffb17 	ldw	r2,-20(fp)
 8002a54:	10c00017 	ldw	r3,0(r2)
 8002a58:	e0bffc17 	ldw	r2,-16(fp)
 8002a5c:	18800115 	stw	r2,4(r3)
  list->next           = entry;
 8002a60:	e0fffb17 	ldw	r3,-20(fp)
 8002a64:	e0bffc17 	ldw	r2,-16(fp)
 8002a68:	18800015 	stw	r2,0(r3)

  return 0;  
 8002a6c:	e03fff15 	stw	zero,-4(fp)
 8002a70:	e0bfff17 	ldw	r2,-4(fp)
}
 8002a74:	e037883a 	mov	sp,fp
 8002a78:	dfc00117 	ldw	ra,4(sp)
 8002a7c:	df000017 	ldw	fp,0(sp)
 8002a80:	dec00204 	addi	sp,sp,8
 8002a84:	f800283a 	ret

08002a88 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 8002a88:	defffd04 	addi	sp,sp,-12
 8002a8c:	dfc00215 	stw	ra,8(sp)
 8002a90:	df000115 	stw	fp,4(sp)
 8002a94:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 8002a98:	00820034 	movhi	r2,2048
 8002a9c:	1094f704 	addi	r2,r2,21468
 8002aa0:	10800017 	ldw	r2,0(r2)
 8002aa4:	1005003a 	cmpeq	r2,r2,zero
 8002aa8:	1000061e 	bne	r2,zero,8002ac4 <alt_get_errno+0x3c>
 8002aac:	00820034 	movhi	r2,2048
 8002ab0:	1094f704 	addi	r2,r2,21468
 8002ab4:	10800017 	ldw	r2,0(r2)
 8002ab8:	103ee83a 	callr	r2
 8002abc:	e0bfff15 	stw	r2,-4(fp)
 8002ac0:	00000306 	br	8002ad0 <alt_get_errno+0x48>
 8002ac4:	00820034 	movhi	r2,2048
 8002ac8:	109aaa04 	addi	r2,r2,27304
 8002acc:	e0bfff15 	stw	r2,-4(fp)
 8002ad0:	e0bfff17 	ldw	r2,-4(fp)
}
 8002ad4:	e037883a 	mov	sp,fp
 8002ad8:	dfc00117 	ldw	ra,4(sp)
 8002adc:	df000017 	ldw	fp,0(sp)
 8002ae0:	dec00204 	addi	sp,sp,8
 8002ae4:	f800283a 	ret

08002ae8 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
 8002ae8:	defffd04 	addi	sp,sp,-12
 8002aec:	dfc00215 	stw	ra,8(sp)
 8002af0:	df000115 	stw	fp,4(sp)
 8002af4:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 8002af8:	00bfff04 	movi	r2,-4
 8002afc:	00c20034 	movhi	r3,2048
 8002b00:	18cf3b04 	addi	r3,r3,15596
 8002b04:	1885883a 	add	r2,r3,r2
 8002b08:	e0bfff15 	stw	r2,-4(fp)
 8002b0c:	00000606 	br	8002b28 <_do_ctors+0x40>
        (*ctor) (); 
 8002b10:	e0bfff17 	ldw	r2,-4(fp)
 8002b14:	10800017 	ldw	r2,0(r2)
 8002b18:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 8002b1c:	e0bfff17 	ldw	r2,-4(fp)
 8002b20:	10bfff04 	addi	r2,r2,-4
 8002b24:	e0bfff15 	stw	r2,-4(fp)
 8002b28:	e0ffff17 	ldw	r3,-4(fp)
 8002b2c:	00820034 	movhi	r2,2048
 8002b30:	108f3a04 	addi	r2,r2,15592
 8002b34:	18bff62e 	bgeu	r3,r2,8002b10 <_do_ctors+0x28>
        (*ctor) (); 
}
 8002b38:	e037883a 	mov	sp,fp
 8002b3c:	dfc00117 	ldw	ra,4(sp)
 8002b40:	df000017 	ldw	fp,0(sp)
 8002b44:	dec00204 	addi	sp,sp,8
 8002b48:	f800283a 	ret

08002b4c <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
 8002b4c:	defffd04 	addi	sp,sp,-12
 8002b50:	dfc00215 	stw	ra,8(sp)
 8002b54:	df000115 	stw	fp,4(sp)
 8002b58:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 8002b5c:	00bfff04 	movi	r2,-4
 8002b60:	00c20034 	movhi	r3,2048
 8002b64:	18cf3b04 	addi	r3,r3,15596
 8002b68:	1885883a 	add	r2,r3,r2
 8002b6c:	e0bfff15 	stw	r2,-4(fp)
 8002b70:	00000606 	br	8002b8c <_do_dtors+0x40>
        (*dtor) (); 
 8002b74:	e0bfff17 	ldw	r2,-4(fp)
 8002b78:	10800017 	ldw	r2,0(r2)
 8002b7c:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 8002b80:	e0bfff17 	ldw	r2,-4(fp)
 8002b84:	10bfff04 	addi	r2,r2,-4
 8002b88:	e0bfff15 	stw	r2,-4(fp)
 8002b8c:	e0ffff17 	ldw	r3,-4(fp)
 8002b90:	00820034 	movhi	r2,2048
 8002b94:	108f3b04 	addi	r2,r2,15596
 8002b98:	18bff62e 	bgeu	r3,r2,8002b74 <_do_dtors+0x28>
        (*dtor) (); 
}
 8002b9c:	e037883a 	mov	sp,fp
 8002ba0:	dfc00117 	ldw	ra,4(sp)
 8002ba4:	df000017 	ldw	fp,0(sp)
 8002ba8:	dec00204 	addi	sp,sp,8
 8002bac:	f800283a 	ret

08002bb0 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 8002bb0:	defff904 	addi	sp,sp,-28
 8002bb4:	dfc00615 	stw	ra,24(sp)
 8002bb8:	df000515 	stw	fp,20(sp)
 8002bbc:	df000504 	addi	fp,sp,20
 8002bc0:	e13ffd15 	stw	r4,-12(fp)
 8002bc4:	e17ffe15 	stw	r5,-8(fp)
  alt_dev* next = (alt_dev*) llist->next;
 8002bc8:	e0bffe17 	ldw	r2,-8(fp)
 8002bcc:	10800017 	ldw	r2,0(r2)
 8002bd0:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
 8002bd4:	e13ffd17 	ldw	r4,-12(fp)
 8002bd8:	800392c0 	call	800392c <strlen>
 8002bdc:	10800044 	addi	r2,r2,1
 8002be0:	e0bffb15 	stw	r2,-20(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 8002be4:	00000d06 	br	8002c1c <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 8002be8:	e0bffc17 	ldw	r2,-16(fp)
 8002bec:	11000217 	ldw	r4,8(r2)
 8002bf0:	e1bffb17 	ldw	r6,-20(fp)
 8002bf4:	e17ffd17 	ldw	r5,-12(fp)
 8002bf8:	80038180 	call	8003818 <memcmp>
 8002bfc:	1004c03a 	cmpne	r2,r2,zero
 8002c00:	1000031e 	bne	r2,zero,8002c10 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
 8002c04:	e0bffc17 	ldw	r2,-16(fp)
 8002c08:	e0bfff15 	stw	r2,-4(fp)
 8002c0c:	00000706 	br	8002c2c <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
 8002c10:	e0bffc17 	ldw	r2,-16(fp)
 8002c14:	10800017 	ldw	r2,0(r2)
 8002c18:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 8002c1c:	e0fffe17 	ldw	r3,-8(fp)
 8002c20:	e0bffc17 	ldw	r2,-16(fp)
 8002c24:	10fff01e 	bne	r2,r3,8002be8 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
 8002c28:	e03fff15 	stw	zero,-4(fp)
 8002c2c:	e0bfff17 	ldw	r2,-4(fp)
}
 8002c30:	e037883a 	mov	sp,fp
 8002c34:	dfc00117 	ldw	ra,4(sp)
 8002c38:	df000017 	ldw	fp,0(sp)
 8002c3c:	dec00204 	addi	sp,sp,8
 8002c40:	f800283a 	ret

08002c44 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 8002c44:	defffe04 	addi	sp,sp,-8
 8002c48:	dfc00115 	stw	ra,4(sp)
 8002c4c:	df000015 	stw	fp,0(sp)
 8002c50:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
 8002c54:	0009883a 	mov	r4,zero
 8002c58:	01440004 	movi	r5,4096
 8002c5c:	800373c0 	call	800373c <alt_icache_flush>
#endif
}
 8002c60:	e037883a 	mov	sp,fp
 8002c64:	dfc00117 	ldw	ra,4(sp)
 8002c68:	df000017 	ldw	fp,0(sp)
 8002c6c:	dec00204 	addi	sp,sp,8
 8002c70:	f800283a 	ret

08002c74 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 8002c74:	defff904 	addi	sp,sp,-28
 8002c78:	dfc00615 	stw	ra,24(sp)
 8002c7c:	df000515 	stw	fp,20(sp)
 8002c80:	df000504 	addi	fp,sp,20
 8002c84:	e13ffc15 	stw	r4,-16(fp)
 8002c88:	e17ffd15 	stw	r5,-12(fp)
 8002c8c:	e1bffe15 	stw	r6,-8(fp)
 8002c90:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
 8002c94:	e0800217 	ldw	r2,8(fp)
 8002c98:	d8800015 	stw	r2,0(sp)
 8002c9c:	e13ffc17 	ldw	r4,-16(fp)
 8002ca0:	e17ffd17 	ldw	r5,-12(fp)
 8002ca4:	e1bffe17 	ldw	r6,-8(fp)
 8002ca8:	e1ffff17 	ldw	r7,-4(fp)
 8002cac:	8002e480 	call	8002e48 <alt_iic_isr_register>
}  
 8002cb0:	e037883a 	mov	sp,fp
 8002cb4:	dfc00117 	ldw	ra,4(sp)
 8002cb8:	df000017 	ldw	fp,0(sp)
 8002cbc:	dec00204 	addi	sp,sp,8
 8002cc0:	f800283a 	ret

08002cc4 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
 8002cc4:	defff904 	addi	sp,sp,-28
 8002cc8:	df000615 	stw	fp,24(sp)
 8002ccc:	df000604 	addi	fp,sp,24
 8002cd0:	e13ffe15 	stw	r4,-8(fp)
 8002cd4:	e17fff15 	stw	r5,-4(fp)
 8002cd8:	e0bfff17 	ldw	r2,-4(fp)
 8002cdc:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8002ce0:	0005303a 	rdctl	r2,status
 8002ce4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8002ce8:	e0fffb17 	ldw	r3,-20(fp)
 8002cec:	00bfff84 	movi	r2,-2
 8002cf0:	1884703a 	and	r2,r3,r2
 8002cf4:	1001703a 	wrctl	status,r2
  
  return context;
 8002cf8:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 8002cfc:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active |= (1 << id);
 8002d00:	e0fffc17 	ldw	r3,-16(fp)
 8002d04:	00800044 	movi	r2,1
 8002d08:	10c4983a 	sll	r2,r2,r3
 8002d0c:	1007883a 	mov	r3,r2
 8002d10:	00820034 	movhi	r2,2048
 8002d14:	109aa704 	addi	r2,r2,27292
 8002d18:	10800017 	ldw	r2,0(r2)
 8002d1c:	1886b03a 	or	r3,r3,r2
 8002d20:	00820034 	movhi	r2,2048
 8002d24:	109aa704 	addi	r2,r2,27292
 8002d28:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 8002d2c:	00820034 	movhi	r2,2048
 8002d30:	109aa704 	addi	r2,r2,27292
 8002d34:	10800017 	ldw	r2,0(r2)
 8002d38:	100170fa 	wrctl	ienable,r2
 8002d3c:	e0bffd17 	ldw	r2,-12(fp)
 8002d40:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8002d44:	e0bffa17 	ldw	r2,-24(fp)
 8002d48:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 8002d4c:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
 8002d50:	e037883a 	mov	sp,fp
 8002d54:	df000017 	ldw	fp,0(sp)
 8002d58:	dec00104 	addi	sp,sp,4
 8002d5c:	f800283a 	ret

08002d60 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
 8002d60:	defff904 	addi	sp,sp,-28
 8002d64:	df000615 	stw	fp,24(sp)
 8002d68:	df000604 	addi	fp,sp,24
 8002d6c:	e13ffe15 	stw	r4,-8(fp)
 8002d70:	e17fff15 	stw	r5,-4(fp)
 8002d74:	e0bfff17 	ldw	r2,-4(fp)
 8002d78:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8002d7c:	0005303a 	rdctl	r2,status
 8002d80:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8002d84:	e0fffb17 	ldw	r3,-20(fp)
 8002d88:	00bfff84 	movi	r2,-2
 8002d8c:	1884703a 	and	r2,r3,r2
 8002d90:	1001703a 	wrctl	status,r2
  
  return context;
 8002d94:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 8002d98:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active &= ~(1 << id);
 8002d9c:	e0fffc17 	ldw	r3,-16(fp)
 8002da0:	00800044 	movi	r2,1
 8002da4:	10c4983a 	sll	r2,r2,r3
 8002da8:	0084303a 	nor	r2,zero,r2
 8002dac:	1007883a 	mov	r3,r2
 8002db0:	00820034 	movhi	r2,2048
 8002db4:	109aa704 	addi	r2,r2,27292
 8002db8:	10800017 	ldw	r2,0(r2)
 8002dbc:	1886703a 	and	r3,r3,r2
 8002dc0:	00820034 	movhi	r2,2048
 8002dc4:	109aa704 	addi	r2,r2,27292
 8002dc8:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 8002dcc:	00820034 	movhi	r2,2048
 8002dd0:	109aa704 	addi	r2,r2,27292
 8002dd4:	10800017 	ldw	r2,0(r2)
 8002dd8:	100170fa 	wrctl	ienable,r2
 8002ddc:	e0bffd17 	ldw	r2,-12(fp)
 8002de0:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8002de4:	e0bffa17 	ldw	r2,-24(fp)
 8002de8:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 8002dec:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
 8002df0:	e037883a 	mov	sp,fp
 8002df4:	df000017 	ldw	fp,0(sp)
 8002df8:	dec00104 	addi	sp,sp,4
 8002dfc:	f800283a 	ret

08002e00 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
 8002e00:	defffc04 	addi	sp,sp,-16
 8002e04:	df000315 	stw	fp,12(sp)
 8002e08:	df000304 	addi	fp,sp,12
 8002e0c:	e13ffe15 	stw	r4,-8(fp)
 8002e10:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
 8002e14:	000530fa 	rdctl	r2,ienable
 8002e18:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
 8002e1c:	e0ffff17 	ldw	r3,-4(fp)
 8002e20:	00800044 	movi	r2,1
 8002e24:	10c4983a 	sll	r2,r2,r3
 8002e28:	1007883a 	mov	r3,r2
 8002e2c:	e0bffd17 	ldw	r2,-12(fp)
 8002e30:	1884703a 	and	r2,r3,r2
 8002e34:	1004c03a 	cmpne	r2,r2,zero
}
 8002e38:	e037883a 	mov	sp,fp
 8002e3c:	df000017 	ldw	fp,0(sp)
 8002e40:	dec00104 	addi	sp,sp,4
 8002e44:	f800283a 	ret

08002e48 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 8002e48:	defff404 	addi	sp,sp,-48
 8002e4c:	dfc00b15 	stw	ra,44(sp)
 8002e50:	df000a15 	stw	fp,40(sp)
 8002e54:	df000a04 	addi	fp,sp,40
 8002e58:	e13ffb15 	stw	r4,-20(fp)
 8002e5c:	e17ffc15 	stw	r5,-16(fp)
 8002e60:	e1bffd15 	stw	r6,-12(fp)
 8002e64:	e1fffe15 	stw	r7,-8(fp)
  int rc = -EINVAL;  
 8002e68:	00bffa84 	movi	r2,-22
 8002e6c:	e0bffa15 	stw	r2,-24(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
 8002e70:	e0bffc17 	ldw	r2,-16(fp)
 8002e74:	e0bff915 	stw	r2,-28(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 8002e78:	e0bff917 	ldw	r2,-28(fp)
 8002e7c:	10800808 	cmpgei	r2,r2,32
 8002e80:	1000291e 	bne	r2,zero,8002f28 <alt_iic_isr_register+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8002e84:	0005303a 	rdctl	r2,status
 8002e88:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8002e8c:	e0fff717 	ldw	r3,-36(fp)
 8002e90:	00bfff84 	movi	r2,-2
 8002e94:	1884703a 	and	r2,r3,r2
 8002e98:	1001703a 	wrctl	status,r2
  
  return context;
 8002e9c:	e0bff717 	ldw	r2,-36(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
 8002ea0:	e0bff815 	stw	r2,-32(fp)

    alt_irq[id].handler = isr;
 8002ea4:	e0bff917 	ldw	r2,-28(fp)
 8002ea8:	00c20034 	movhi	r3,2048
 8002eac:	18daab04 	addi	r3,r3,27308
 8002eb0:	100490fa 	slli	r2,r2,3
 8002eb4:	10c7883a 	add	r3,r2,r3
 8002eb8:	e0bffd17 	ldw	r2,-12(fp)
 8002ebc:	18800015 	stw	r2,0(r3)
    alt_irq[id].context = isr_context;
 8002ec0:	e0bff917 	ldw	r2,-28(fp)
 8002ec4:	00c20034 	movhi	r3,2048
 8002ec8:	18daab04 	addi	r3,r3,27308
 8002ecc:	100490fa 	slli	r2,r2,3
 8002ed0:	10c5883a 	add	r2,r2,r3
 8002ed4:	10c00104 	addi	r3,r2,4
 8002ed8:	e0bffe17 	ldw	r2,-8(fp)
 8002edc:	18800015 	stw	r2,0(r3)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
 8002ee0:	e0bffd17 	ldw	r2,-12(fp)
 8002ee4:	1005003a 	cmpeq	r2,r2,zero
 8002ee8:	1000051e 	bne	r2,zero,8002f00 <alt_iic_isr_register+0xb8>
 8002eec:	e17ff917 	ldw	r5,-28(fp)
 8002ef0:	e13ffb17 	ldw	r4,-20(fp)
 8002ef4:	8002cc40 	call	8002cc4 <alt_ic_irq_enable>
 8002ef8:	e0bfff15 	stw	r2,-4(fp)
 8002efc:	00000406 	br	8002f10 <alt_iic_isr_register+0xc8>
 8002f00:	e17ff917 	ldw	r5,-28(fp)
 8002f04:	e13ffb17 	ldw	r4,-20(fp)
 8002f08:	8002d600 	call	8002d60 <alt_ic_irq_disable>
 8002f0c:	e0bfff15 	stw	r2,-4(fp)
 8002f10:	e0bfff17 	ldw	r2,-4(fp)
 8002f14:	e0bffa15 	stw	r2,-24(fp)
 8002f18:	e0bff817 	ldw	r2,-32(fp)
 8002f1c:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8002f20:	e0bff617 	ldw	r2,-40(fp)
 8002f24:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
 8002f28:	e0bffa17 	ldw	r2,-24(fp)
}
 8002f2c:	e037883a 	mov	sp,fp
 8002f30:	dfc00117 	ldw	ra,4(sp)
 8002f34:	df000017 	ldw	fp,0(sp)
 8002f38:	dec00204 	addi	sp,sp,8
 8002f3c:	f800283a 	ret

08002f40 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
 8002f40:	defff904 	addi	sp,sp,-28
 8002f44:	dfc00615 	stw	ra,24(sp)
 8002f48:	df000515 	stw	fp,20(sp)
 8002f4c:	df000504 	addi	fp,sp,20
 8002f50:	e13ffc15 	stw	r4,-16(fp)
 8002f54:	e17ffd15 	stw	r5,-12(fp)
 8002f58:	e1bffe15 	stw	r6,-8(fp)
 8002f5c:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
 8002f60:	e13ffd17 	ldw	r4,-12(fp)
 8002f64:	e17ffe17 	ldw	r5,-8(fp)
 8002f68:	e1bfff17 	ldw	r6,-4(fp)
 8002f6c:	80031580 	call	8003158 <open>
 8002f70:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
 8002f74:	e0bffb17 	ldw	r2,-20(fp)
 8002f78:	1004803a 	cmplt	r2,r2,zero
 8002f7c:	10001c1e 	bne	r2,zero,8002ff0 <alt_open_fd+0xb0>
  {
    fd->dev      = alt_fd_list[old].dev;
 8002f80:	e0bffb17 	ldw	r2,-20(fp)
 8002f84:	00c20034 	movhi	r3,2048
 8002f88:	18d39004 	addi	r3,r3,20032
 8002f8c:	10800324 	muli	r2,r2,12
 8002f90:	10c5883a 	add	r2,r2,r3
 8002f94:	10c00017 	ldw	r3,0(r2)
 8002f98:	e0bffc17 	ldw	r2,-16(fp)
 8002f9c:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
 8002fa0:	e0bffb17 	ldw	r2,-20(fp)
 8002fa4:	00c20034 	movhi	r3,2048
 8002fa8:	18d39004 	addi	r3,r3,20032
 8002fac:	10800324 	muli	r2,r2,12
 8002fb0:	10c5883a 	add	r2,r2,r3
 8002fb4:	10800104 	addi	r2,r2,4
 8002fb8:	10c00017 	ldw	r3,0(r2)
 8002fbc:	e0bffc17 	ldw	r2,-16(fp)
 8002fc0:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 8002fc4:	e0bffb17 	ldw	r2,-20(fp)
 8002fc8:	00c20034 	movhi	r3,2048
 8002fcc:	18d39004 	addi	r3,r3,20032
 8002fd0:	10800324 	muli	r2,r2,12
 8002fd4:	10c5883a 	add	r2,r2,r3
 8002fd8:	10800204 	addi	r2,r2,8
 8002fdc:	10c00017 	ldw	r3,0(r2)
 8002fe0:	e0bffc17 	ldw	r2,-16(fp)
 8002fe4:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
 8002fe8:	e13ffb17 	ldw	r4,-20(fp)
 8002fec:	80033400 	call	8003340 <alt_release_fd>
  }
} 
 8002ff0:	e037883a 	mov	sp,fp
 8002ff4:	dfc00117 	ldw	ra,4(sp)
 8002ff8:	df000017 	ldw	fp,0(sp)
 8002ffc:	dec00204 	addi	sp,sp,8
 8003000:	f800283a 	ret

08003004 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 8003004:	defffb04 	addi	sp,sp,-20
 8003008:	dfc00415 	stw	ra,16(sp)
 800300c:	df000315 	stw	fp,12(sp)
 8003010:	df000304 	addi	fp,sp,12
 8003014:	e13ffd15 	stw	r4,-12(fp)
 8003018:	e17ffe15 	stw	r5,-8(fp)
 800301c:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 8003020:	01020034 	movhi	r4,2048
 8003024:	21139304 	addi	r4,r4,20044
 8003028:	e17ffd17 	ldw	r5,-12(fp)
 800302c:	01800044 	movi	r6,1
 8003030:	01c07fc4 	movi	r7,511
 8003034:	8002f400 	call	8002f40 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 8003038:	01020034 	movhi	r4,2048
 800303c:	21139004 	addi	r4,r4,20032
 8003040:	e17ffe17 	ldw	r5,-8(fp)
 8003044:	000d883a 	mov	r6,zero
 8003048:	01c07fc4 	movi	r7,511
 800304c:	8002f400 	call	8002f40 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 8003050:	01020034 	movhi	r4,2048
 8003054:	21139604 	addi	r4,r4,20056
 8003058:	e17fff17 	ldw	r5,-4(fp)
 800305c:	01800044 	movi	r6,1
 8003060:	01c07fc4 	movi	r7,511
 8003064:	8002f400 	call	8002f40 <alt_open_fd>
}  
 8003068:	e037883a 	mov	sp,fp
 800306c:	dfc00117 	ldw	ra,4(sp)
 8003070:	df000017 	ldw	fp,0(sp)
 8003074:	dec00204 	addi	sp,sp,8
 8003078:	f800283a 	ret

0800307c <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
 800307c:	defffc04 	addi	sp,sp,-16
 8003080:	df000315 	stw	fp,12(sp)
 8003084:	df000304 	addi	fp,sp,12
 8003088:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 800308c:	e0bffe17 	ldw	r2,-8(fp)
 8003090:	10800217 	ldw	r2,8(r2)
 8003094:	10d00034 	orhi	r3,r2,16384
 8003098:	e0bffe17 	ldw	r2,-8(fp)
 800309c:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 80030a0:	e03ffd15 	stw	zero,-12(fp)
 80030a4:	00002006 	br	8003128 <alt_file_locked+0xac>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 80030a8:	e0bffd17 	ldw	r2,-12(fp)
 80030ac:	00c20034 	movhi	r3,2048
 80030b0:	18d39004 	addi	r3,r3,20032
 80030b4:	10800324 	muli	r2,r2,12
 80030b8:	10c5883a 	add	r2,r2,r3
 80030bc:	10c00017 	ldw	r3,0(r2)
 80030c0:	e0bffe17 	ldw	r2,-8(fp)
 80030c4:	10800017 	ldw	r2,0(r2)
 80030c8:	1880141e 	bne	r3,r2,800311c <alt_file_locked+0xa0>
 80030cc:	e0bffd17 	ldw	r2,-12(fp)
 80030d0:	00c20034 	movhi	r3,2048
 80030d4:	18d39004 	addi	r3,r3,20032
 80030d8:	10800324 	muli	r2,r2,12
 80030dc:	10c5883a 	add	r2,r2,r3
 80030e0:	10800204 	addi	r2,r2,8
 80030e4:	10800017 	ldw	r2,0(r2)
 80030e8:	1004403a 	cmpge	r2,r2,zero
 80030ec:	10000b1e 	bne	r2,zero,800311c <alt_file_locked+0xa0>
 80030f0:	e0bffd17 	ldw	r2,-12(fp)
 80030f4:	10800324 	muli	r2,r2,12
 80030f8:	1007883a 	mov	r3,r2
 80030fc:	00820034 	movhi	r2,2048
 8003100:	10939004 	addi	r2,r2,20032
 8003104:	1887883a 	add	r3,r3,r2
 8003108:	e0bffe17 	ldw	r2,-8(fp)
 800310c:	18800326 	beq	r3,r2,800311c <alt_file_locked+0xa0>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
 8003110:	00bffcc4 	movi	r2,-13
 8003114:	e0bfff15 	stw	r2,-4(fp)
 8003118:	00000a06 	br	8003144 <alt_file_locked+0xc8>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 800311c:	e0bffd17 	ldw	r2,-12(fp)
 8003120:	10800044 	addi	r2,r2,1
 8003124:	e0bffd15 	stw	r2,-12(fp)
 8003128:	00820034 	movhi	r2,2048
 800312c:	1094f604 	addi	r2,r2,21464
 8003130:	10800017 	ldw	r2,0(r2)
 8003134:	1007883a 	mov	r3,r2
 8003138:	e0bffd17 	ldw	r2,-12(fp)
 800313c:	18bfda2e 	bgeu	r3,r2,80030a8 <alt_file_locked+0x2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
 8003140:	e03fff15 	stw	zero,-4(fp)
 8003144:	e0bfff17 	ldw	r2,-4(fp)
}
 8003148:	e037883a 	mov	sp,fp
 800314c:	df000017 	ldw	fp,0(sp)
 8003150:	dec00104 	addi	sp,sp,4
 8003154:	f800283a 	ret

08003158 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 8003158:	defff404 	addi	sp,sp,-48
 800315c:	dfc00b15 	stw	ra,44(sp)
 8003160:	df000a15 	stw	fp,40(sp)
 8003164:	df000a04 	addi	fp,sp,40
 8003168:	e13ffb15 	stw	r4,-20(fp)
 800316c:	e17ffc15 	stw	r5,-16(fp)
 8003170:	e1bffd15 	stw	r6,-12(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
 8003174:	00bfffc4 	movi	r2,-1
 8003178:	e0bff815 	stw	r2,-32(fp)
  int status = -ENODEV;
 800317c:	00bffb44 	movi	r2,-19
 8003180:	e0bff715 	stw	r2,-36(fp)
  int isafs = 0;
 8003184:	e03ff615 	stw	zero,-40(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 8003188:	e13ffb17 	ldw	r4,-20(fp)
 800318c:	01420034 	movhi	r5,2048
 8003190:	2954f404 	addi	r5,r5,21456
 8003194:	8002bb00 	call	8002bb0 <alt_find_dev>
 8003198:	e0bffa15 	stw	r2,-24(fp)
 800319c:	e0bffa17 	ldw	r2,-24(fp)
 80031a0:	1004c03a 	cmpne	r2,r2,zero
 80031a4:	1000051e 	bne	r2,zero,80031bc <open+0x64>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 80031a8:	e13ffb17 	ldw	r4,-20(fp)
 80031ac:	80035640 	call	8003564 <alt_find_file>
 80031b0:	e0bffa15 	stw	r2,-24(fp)
    isafs = 1;
 80031b4:	00800044 	movi	r2,1
 80031b8:	e0bff615 	stw	r2,-40(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 80031bc:	e0bffa17 	ldw	r2,-24(fp)
 80031c0:	1005003a 	cmpeq	r2,r2,zero
 80031c4:	1000301e 	bne	r2,zero,8003288 <open+0x130>
  {
    if ((index = alt_get_fd (dev)) < 0)
 80031c8:	e13ffa17 	ldw	r4,-24(fp)
 80031cc:	80036840 	call	8003684 <alt_get_fd>
 80031d0:	e0bff815 	stw	r2,-32(fp)
 80031d4:	e0bff817 	ldw	r2,-32(fp)
 80031d8:	1004403a 	cmpge	r2,r2,zero
 80031dc:	1000031e 	bne	r2,zero,80031ec <open+0x94>
    {
      status = index;
 80031e0:	e0bff817 	ldw	r2,-32(fp)
 80031e4:	e0bff715 	stw	r2,-36(fp)
 80031e8:	00002906 	br	8003290 <open+0x138>
    }
    else
    {
      fd = &alt_fd_list[index];
 80031ec:	e0bff817 	ldw	r2,-32(fp)
 80031f0:	10800324 	muli	r2,r2,12
 80031f4:	1007883a 	mov	r3,r2
 80031f8:	00820034 	movhi	r2,2048
 80031fc:	10939004 	addi	r2,r2,20032
 8003200:	1885883a 	add	r2,r3,r2
 8003204:	e0bff915 	stw	r2,-28(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 8003208:	e0fffc17 	ldw	r3,-16(fp)
 800320c:	00900034 	movhi	r2,16384
 8003210:	10bfffc4 	addi	r2,r2,-1
 8003214:	1886703a 	and	r3,r3,r2
 8003218:	e0bff917 	ldw	r2,-28(fp)
 800321c:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
 8003220:	e0bff617 	ldw	r2,-40(fp)
 8003224:	1004c03a 	cmpne	r2,r2,zero
 8003228:	1000061e 	bne	r2,zero,8003244 <open+0xec>
 800322c:	e13ff917 	ldw	r4,-28(fp)
 8003230:	800307c0 	call	800307c <alt_file_locked>
 8003234:	e0bff715 	stw	r2,-36(fp)
 8003238:	e0bff717 	ldw	r2,-36(fp)
 800323c:	1004803a 	cmplt	r2,r2,zero
 8003240:	1000131e 	bne	r2,zero,8003290 <open+0x138>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 8003244:	e0bffa17 	ldw	r2,-24(fp)
 8003248:	10800317 	ldw	r2,12(r2)
 800324c:	1005003a 	cmpeq	r2,r2,zero
 8003250:	1000091e 	bne	r2,zero,8003278 <open+0x120>
 8003254:	e0bffa17 	ldw	r2,-24(fp)
 8003258:	10800317 	ldw	r2,12(r2)
 800325c:	e13ff917 	ldw	r4,-28(fp)
 8003260:	e17ffb17 	ldw	r5,-20(fp)
 8003264:	e1bffc17 	ldw	r6,-16(fp)
 8003268:	e1fffd17 	ldw	r7,-12(fp)
 800326c:	103ee83a 	callr	r2
 8003270:	e0bfff15 	stw	r2,-4(fp)
 8003274:	00000106 	br	800327c <open+0x124>
 8003278:	e03fff15 	stw	zero,-4(fp)
 800327c:	e0bfff17 	ldw	r2,-4(fp)
 8003280:	e0bff715 	stw	r2,-36(fp)
 8003284:	00000206 	br	8003290 <open+0x138>
      }
    }
  }
  else
  {
    status = -ENODEV;
 8003288:	00bffb44 	movi	r2,-19
 800328c:	e0bff715 	stw	r2,-36(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 8003290:	e0bff717 	ldw	r2,-36(fp)
 8003294:	1004403a 	cmpge	r2,r2,zero
 8003298:	1000091e 	bne	r2,zero,80032c0 <open+0x168>
  {
    alt_release_fd (index);  
 800329c:	e13ff817 	ldw	r4,-32(fp)
 80032a0:	80033400 	call	8003340 <alt_release_fd>
    ALT_ERRNO = -status;
 80032a4:	80032e00 	call	80032e0 <alt_get_errno>
 80032a8:	e0fff717 	ldw	r3,-36(fp)
 80032ac:	00c7c83a 	sub	r3,zero,r3
 80032b0:	10c00015 	stw	r3,0(r2)
    return -1;
 80032b4:	00bfffc4 	movi	r2,-1
 80032b8:	e0bffe15 	stw	r2,-8(fp)
 80032bc:	00000206 	br	80032c8 <open+0x170>
  }
  
  /* return the reference upon success */

  return index;
 80032c0:	e0bff817 	ldw	r2,-32(fp)
 80032c4:	e0bffe15 	stw	r2,-8(fp)
 80032c8:	e0bffe17 	ldw	r2,-8(fp)
}
 80032cc:	e037883a 	mov	sp,fp
 80032d0:	dfc00117 	ldw	ra,4(sp)
 80032d4:	df000017 	ldw	fp,0(sp)
 80032d8:	dec00204 	addi	sp,sp,8
 80032dc:	f800283a 	ret

080032e0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 80032e0:	defffd04 	addi	sp,sp,-12
 80032e4:	dfc00215 	stw	ra,8(sp)
 80032e8:	df000115 	stw	fp,4(sp)
 80032ec:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 80032f0:	00820034 	movhi	r2,2048
 80032f4:	1094f704 	addi	r2,r2,21468
 80032f8:	10800017 	ldw	r2,0(r2)
 80032fc:	1005003a 	cmpeq	r2,r2,zero
 8003300:	1000061e 	bne	r2,zero,800331c <alt_get_errno+0x3c>
 8003304:	00820034 	movhi	r2,2048
 8003308:	1094f704 	addi	r2,r2,21468
 800330c:	10800017 	ldw	r2,0(r2)
 8003310:	103ee83a 	callr	r2
 8003314:	e0bfff15 	stw	r2,-4(fp)
 8003318:	00000306 	br	8003328 <alt_get_errno+0x48>
 800331c:	00820034 	movhi	r2,2048
 8003320:	109aaa04 	addi	r2,r2,27304
 8003324:	e0bfff15 	stw	r2,-4(fp)
 8003328:	e0bfff17 	ldw	r2,-4(fp)
}
 800332c:	e037883a 	mov	sp,fp
 8003330:	dfc00117 	ldw	ra,4(sp)
 8003334:	df000017 	ldw	fp,0(sp)
 8003338:	dec00204 	addi	sp,sp,8
 800333c:	f800283a 	ret

08003340 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 8003340:	defffe04 	addi	sp,sp,-8
 8003344:	df000115 	stw	fp,4(sp)
 8003348:	df000104 	addi	fp,sp,4
 800334c:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
 8003350:	e0bfff17 	ldw	r2,-4(fp)
 8003354:	108000d0 	cmplti	r2,r2,3
 8003358:	10000d1e 	bne	r2,zero,8003390 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
 800335c:	e0bfff17 	ldw	r2,-4(fp)
 8003360:	00c20034 	movhi	r3,2048
 8003364:	18d39004 	addi	r3,r3,20032
 8003368:	10800324 	muli	r2,r2,12
 800336c:	10c5883a 	add	r2,r2,r3
 8003370:	10800204 	addi	r2,r2,8
 8003374:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
 8003378:	e0bfff17 	ldw	r2,-4(fp)
 800337c:	00c20034 	movhi	r3,2048
 8003380:	18d39004 	addi	r3,r3,20032
 8003384:	10800324 	muli	r2,r2,12
 8003388:	10c5883a 	add	r2,r2,r3
 800338c:	10000015 	stw	zero,0(r2)
  }
}
 8003390:	e037883a 	mov	sp,fp
 8003394:	df000017 	ldw	fp,0(sp)
 8003398:	dec00104 	addi	sp,sp,4
 800339c:	f800283a 	ret

080033a0 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
 80033a0:	defffa04 	addi	sp,sp,-24
 80033a4:	df000515 	stw	fp,20(sp)
 80033a8:	df000504 	addi	fp,sp,20
 80033ac:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 80033b0:	0005303a 	rdctl	r2,status
 80033b4:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 80033b8:	e0fffd17 	ldw	r3,-12(fp)
 80033bc:	00bfff84 	movi	r2,-2
 80033c0:	1884703a 	and	r2,r3,r2
 80033c4:	1001703a 	wrctl	status,r2
  
  return context;
 80033c8:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
 80033cc:	e0bffe15 	stw	r2,-8(fp)
  alt_llist_remove (&alarm->llist);
 80033d0:	e0bfff17 	ldw	r2,-4(fp)
 80033d4:	e0bffc15 	stw	r2,-16(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 80033d8:	e0bffc17 	ldw	r2,-16(fp)
 80033dc:	10c00017 	ldw	r3,0(r2)
 80033e0:	e0bffc17 	ldw	r2,-16(fp)
 80033e4:	10800117 	ldw	r2,4(r2)
 80033e8:	18800115 	stw	r2,4(r3)
  entry->previous->next = entry->next;
 80033ec:	e0bffc17 	ldw	r2,-16(fp)
 80033f0:	10c00117 	ldw	r3,4(r2)
 80033f4:	e0bffc17 	ldw	r2,-16(fp)
 80033f8:	10800017 	ldw	r2,0(r2)
 80033fc:	18800015 	stw	r2,0(r3)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 8003400:	e0fffc17 	ldw	r3,-16(fp)
 8003404:	e0bffc17 	ldw	r2,-16(fp)
 8003408:	18800115 	stw	r2,4(r3)
  entry->next     = entry;
 800340c:	e0fffc17 	ldw	r3,-16(fp)
 8003410:	e0bffc17 	ldw	r2,-16(fp)
 8003414:	18800015 	stw	r2,0(r3)
 8003418:	e0bffe17 	ldw	r2,-8(fp)
 800341c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8003420:	e0bffb17 	ldw	r2,-20(fp)
 8003424:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
 8003428:	e037883a 	mov	sp,fp
 800342c:	df000017 	ldw	fp,0(sp)
 8003430:	dec00104 	addi	sp,sp,4
 8003434:	f800283a 	ret

08003438 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 8003438:	defffb04 	addi	sp,sp,-20
 800343c:	dfc00415 	stw	ra,16(sp)
 8003440:	df000315 	stw	fp,12(sp)
 8003444:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 8003448:	d0a00917 	ldw	r2,-32732(gp)
 800344c:	e0bffe15 	stw	r2,-8(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 8003450:	d0a5b917 	ldw	r2,-26908(gp)
 8003454:	10800044 	addi	r2,r2,1
 8003458:	d0a5b915 	stw	r2,-26908(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 800345c:	00003106 	br	8003524 <alt_tick+0xec>
  {
    next = (alt_alarm*) alarm->llist.next;
 8003460:	e0bffe17 	ldw	r2,-8(fp)
 8003464:	10800017 	ldw	r2,0(r2)
 8003468:	e0bfff15 	stw	r2,-4(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 800346c:	e0bffe17 	ldw	r2,-8(fp)
 8003470:	10800403 	ldbu	r2,16(r2)
 8003474:	10803fcc 	andi	r2,r2,255
 8003478:	1005003a 	cmpeq	r2,r2,zero
 800347c:	1000051e 	bne	r2,zero,8003494 <alt_tick+0x5c>
 8003480:	d0a5b917 	ldw	r2,-26908(gp)
 8003484:	1004c03a 	cmpne	r2,r2,zero
 8003488:	1000021e 	bne	r2,zero,8003494 <alt_tick+0x5c>
    {
      alarm->rollover = 0;
 800348c:	e0bffe17 	ldw	r2,-8(fp)
 8003490:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 8003494:	e0bffe17 	ldw	r2,-8(fp)
 8003498:	10c00217 	ldw	r3,8(r2)
 800349c:	d0a5b917 	ldw	r2,-26908(gp)
 80034a0:	10c01e36 	bltu	r2,r3,800351c <alt_tick+0xe4>
 80034a4:	e0bffe17 	ldw	r2,-8(fp)
 80034a8:	10800403 	ldbu	r2,16(r2)
 80034ac:	10803fcc 	andi	r2,r2,255
 80034b0:	1004c03a 	cmpne	r2,r2,zero
 80034b4:	1000191e 	bne	r2,zero,800351c <alt_tick+0xe4>
    {
      next_callback = alarm->callback (alarm->context);
 80034b8:	e0bffe17 	ldw	r2,-8(fp)
 80034bc:	10c00317 	ldw	r3,12(r2)
 80034c0:	e0bffe17 	ldw	r2,-8(fp)
 80034c4:	11000517 	ldw	r4,20(r2)
 80034c8:	183ee83a 	callr	r3
 80034cc:	e0bffd15 	stw	r2,-12(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 80034d0:	e0bffd17 	ldw	r2,-12(fp)
 80034d4:	1004c03a 	cmpne	r2,r2,zero
 80034d8:	1000031e 	bne	r2,zero,80034e8 <alt_tick+0xb0>
      {
        alt_alarm_stop (alarm);
 80034dc:	e13ffe17 	ldw	r4,-8(fp)
 80034e0:	80033a00 	call	80033a0 <alt_alarm_stop>
 80034e4:	00000d06 	br	800351c <alt_tick+0xe4>
      }
      else
      {
        alarm->time += next_callback;
 80034e8:	e0bffe17 	ldw	r2,-8(fp)
 80034ec:	10c00217 	ldw	r3,8(r2)
 80034f0:	e0bffd17 	ldw	r2,-12(fp)
 80034f4:	1887883a 	add	r3,r3,r2
 80034f8:	e0bffe17 	ldw	r2,-8(fp)
 80034fc:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 8003500:	e0bffe17 	ldw	r2,-8(fp)
 8003504:	10c00217 	ldw	r3,8(r2)
 8003508:	d0a5b917 	ldw	r2,-26908(gp)
 800350c:	1880032e 	bgeu	r3,r2,800351c <alt_tick+0xe4>
        {
          alarm->rollover = 1;
 8003510:	e0fffe17 	ldw	r3,-8(fp)
 8003514:	00800044 	movi	r2,1
 8003518:	18800405 	stb	r2,16(r3)
        }
      }
    }
    alarm = next;
 800351c:	e0bfff17 	ldw	r2,-4(fp)
 8003520:	e0bffe15 	stw	r2,-8(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 8003524:	d0e00904 	addi	r3,gp,-32732
 8003528:	e0bffe17 	ldw	r2,-8(fp)
 800352c:	10ffcc1e 	bne	r2,r3,8003460 <alt_tick+0x28>
  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
}
 8003530:	e037883a 	mov	sp,fp
 8003534:	dfc00117 	ldw	ra,4(sp)
 8003538:	df000017 	ldw	fp,0(sp)
 800353c:	dec00204 	addi	sp,sp,8
 8003540:	f800283a 	ret

08003544 <altera_nios2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_irq_init(void) 
{
 8003544:	deffff04 	addi	sp,sp,-4
 8003548:	df000015 	stw	fp,0(sp)
 800354c:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 8003550:	000170fa 	wrctl	ienable,zero
}
 8003554:	e037883a 	mov	sp,fp
 8003558:	df000017 	ldw	fp,0(sp)
 800355c:	dec00104 	addi	sp,sp,4
 8003560:	f800283a 	ret

08003564 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 8003564:	defffa04 	addi	sp,sp,-24
 8003568:	dfc00515 	stw	ra,20(sp)
 800356c:	df000415 	stw	fp,16(sp)
 8003570:	df000404 	addi	fp,sp,16
 8003574:	e13ffe15 	stw	r4,-8(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 8003578:	00820034 	movhi	r2,2048
 800357c:	1094f204 	addi	r2,r2,21448
 8003580:	10800017 	ldw	r2,0(r2)
 8003584:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 8003588:	00003306 	br	8003658 <alt_find_file+0xf4>
  {
    len = strlen(next->name);
 800358c:	e0bffd17 	ldw	r2,-12(fp)
 8003590:	11000217 	ldw	r4,8(r2)
 8003594:	800392c0 	call	800392c <strlen>
 8003598:	e0bffc15 	stw	r2,-16(fp)
    
    if (next->name[len-1] == '/')
 800359c:	e0bffd17 	ldw	r2,-12(fp)
 80035a0:	10c00217 	ldw	r3,8(r2)
 80035a4:	e0bffc17 	ldw	r2,-16(fp)
 80035a8:	1885883a 	add	r2,r3,r2
 80035ac:	10bfffc4 	addi	r2,r2,-1
 80035b0:	10800003 	ldbu	r2,0(r2)
 80035b4:	10803fcc 	andi	r2,r2,255
 80035b8:	1080201c 	xori	r2,r2,128
 80035bc:	10bfe004 	addi	r2,r2,-128
 80035c0:	10800bd8 	cmpnei	r2,r2,47
 80035c4:	1000031e 	bne	r2,zero,80035d4 <alt_find_file+0x70>
    {
      len -= 1;
 80035c8:	e0bffc17 	ldw	r2,-16(fp)
 80035cc:	10bfffc4 	addi	r2,r2,-1
 80035d0:	e0bffc15 	stw	r2,-16(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 80035d4:	e0bffc17 	ldw	r2,-16(fp)
 80035d8:	1007883a 	mov	r3,r2
 80035dc:	e0bffe17 	ldw	r2,-8(fp)
 80035e0:	1885883a 	add	r2,r3,r2
 80035e4:	10800003 	ldbu	r2,0(r2)
 80035e8:	10803fcc 	andi	r2,r2,255
 80035ec:	1080201c 	xori	r2,r2,128
 80035f0:	10bfe004 	addi	r2,r2,-128
 80035f4:	10800be0 	cmpeqi	r2,r2,47
 80035f8:	10000a1e 	bne	r2,zero,8003624 <alt_find_file+0xc0>
 80035fc:	e0bffc17 	ldw	r2,-16(fp)
 8003600:	1007883a 	mov	r3,r2
 8003604:	e0bffe17 	ldw	r2,-8(fp)
 8003608:	1885883a 	add	r2,r3,r2
 800360c:	10800003 	ldbu	r2,0(r2)
 8003610:	10803fcc 	andi	r2,r2,255
 8003614:	1080201c 	xori	r2,r2,128
 8003618:	10bfe004 	addi	r2,r2,-128
 800361c:	1004c03a 	cmpne	r2,r2,zero
 8003620:	10000a1e 	bne	r2,zero,800364c <alt_find_file+0xe8>
 8003624:	e0bffd17 	ldw	r2,-12(fp)
 8003628:	11000217 	ldw	r4,8(r2)
 800362c:	e1bffc17 	ldw	r6,-16(fp)
 8003630:	e17ffe17 	ldw	r5,-8(fp)
 8003634:	80038180 	call	8003818 <memcmp>
 8003638:	1004c03a 	cmpne	r2,r2,zero
 800363c:	1000031e 	bne	r2,zero,800364c <alt_find_file+0xe8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
 8003640:	e0bffd17 	ldw	r2,-12(fp)
 8003644:	e0bfff15 	stw	r2,-4(fp)
 8003648:	00000806 	br	800366c <alt_find_file+0x108>
    }
    next = (alt_dev*) next->llist.next;
 800364c:	e0bffd17 	ldw	r2,-12(fp)
 8003650:	10800017 	ldw	r2,0(r2)
 8003654:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 8003658:	00c20034 	movhi	r3,2048
 800365c:	18d4f204 	addi	r3,r3,21448
 8003660:	e0bffd17 	ldw	r2,-12(fp)
 8003664:	10ffc91e 	bne	r2,r3,800358c <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
 8003668:	e03fff15 	stw	zero,-4(fp)
 800366c:	e0bfff17 	ldw	r2,-4(fp)
}
 8003670:	e037883a 	mov	sp,fp
 8003674:	dfc00117 	ldw	ra,4(sp)
 8003678:	df000017 	ldw	fp,0(sp)
 800367c:	dec00204 	addi	sp,sp,8
 8003680:	f800283a 	ret

08003684 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 8003684:	defffc04 	addi	sp,sp,-16
 8003688:	df000315 	stw	fp,12(sp)
 800368c:	df000304 	addi	fp,sp,12
 8003690:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
 8003694:	00bffa04 	movi	r2,-24
 8003698:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 800369c:	e03ffe15 	stw	zero,-8(fp)
 80036a0:	00001e06 	br	800371c <alt_get_fd+0x98>
  {
    if (!alt_fd_list[i].dev)
 80036a4:	e0bffe17 	ldw	r2,-8(fp)
 80036a8:	00c20034 	movhi	r3,2048
 80036ac:	18d39004 	addi	r3,r3,20032
 80036b0:	10800324 	muli	r2,r2,12
 80036b4:	10c5883a 	add	r2,r2,r3
 80036b8:	10800017 	ldw	r2,0(r2)
 80036bc:	1004c03a 	cmpne	r2,r2,zero
 80036c0:	1000131e 	bne	r2,zero,8003710 <alt_get_fd+0x8c>
    {
      alt_fd_list[i].dev = dev;
 80036c4:	e0bffe17 	ldw	r2,-8(fp)
 80036c8:	00c20034 	movhi	r3,2048
 80036cc:	18d39004 	addi	r3,r3,20032
 80036d0:	10800324 	muli	r2,r2,12
 80036d4:	10c7883a 	add	r3,r2,r3
 80036d8:	e0bfff17 	ldw	r2,-4(fp)
 80036dc:	18800015 	stw	r2,0(r3)
      if (i > alt_max_fd)
 80036e0:	00820034 	movhi	r2,2048
 80036e4:	1094f604 	addi	r2,r2,21464
 80036e8:	10c00017 	ldw	r3,0(r2)
 80036ec:	e0bffe17 	ldw	r2,-8(fp)
 80036f0:	1880040e 	bge	r3,r2,8003704 <alt_get_fd+0x80>
      {
        alt_max_fd = i;
 80036f4:	00c20034 	movhi	r3,2048
 80036f8:	18d4f604 	addi	r3,r3,21464
 80036fc:	e0bffe17 	ldw	r2,-8(fp)
 8003700:	18800015 	stw	r2,0(r3)
      }
      rc = i;
 8003704:	e0bffe17 	ldw	r2,-8(fp)
 8003708:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
 800370c:	00000606 	br	8003728 <alt_get_fd+0xa4>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 8003710:	e0bffe17 	ldw	r2,-8(fp)
 8003714:	10800044 	addi	r2,r2,1
 8003718:	e0bffe15 	stw	r2,-8(fp)
 800371c:	e0bffe17 	ldw	r2,-8(fp)
 8003720:	10800810 	cmplti	r2,r2,32
 8003724:	103fdf1e 	bne	r2,zero,80036a4 <alt_get_fd+0x20>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
 8003728:	e0bffd17 	ldw	r2,-12(fp)
}
 800372c:	e037883a 	mov	sp,fp
 8003730:	df000017 	ldw	fp,0(sp)
 8003734:	dec00104 	addi	sp,sp,4
 8003738:	f800283a 	ret

0800373c <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
 800373c:	defffb04 	addi	sp,sp,-20
 8003740:	df000415 	stw	fp,16(sp)
 8003744:	df000404 	addi	fp,sp,16
 8003748:	e13ffe15 	stw	r4,-8(fp)
 800374c:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
 8003750:	e0bfff17 	ldw	r2,-4(fp)
 8003754:	10840070 	cmpltui	r2,r2,4097
 8003758:	1000021e 	bne	r2,zero,8003764 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
 800375c:	00840004 	movi	r2,4096
 8003760:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
 8003764:	e0fffe17 	ldw	r3,-8(fp)
 8003768:	e0bfff17 	ldw	r2,-4(fp)
 800376c:	1885883a 	add	r2,r3,r2
 8003770:	e0bffc15 	stw	r2,-16(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 8003774:	e0bffe17 	ldw	r2,-8(fp)
 8003778:	e0bffd15 	stw	r2,-12(fp)
 800377c:	00000506 	br	8003794 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
 8003780:	e0bffd17 	ldw	r2,-12(fp)
 8003784:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 8003788:	e0bffd17 	ldw	r2,-12(fp)
 800378c:	10800804 	addi	r2,r2,32
 8003790:	e0bffd15 	stw	r2,-12(fp)
 8003794:	e0fffd17 	ldw	r3,-12(fp)
 8003798:	e0bffc17 	ldw	r2,-16(fp)
 800379c:	18bff836 	bltu	r3,r2,8003780 <alt_icache_flush+0x44>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
 80037a0:	e0bffe17 	ldw	r2,-8(fp)
 80037a4:	108007cc 	andi	r2,r2,31
 80037a8:	1005003a 	cmpeq	r2,r2,zero
 80037ac:	1000021e 	bne	r2,zero,80037b8 <alt_icache_flush+0x7c>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
 80037b0:	e0bffd17 	ldw	r2,-12(fp)
 80037b4:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
 80037b8:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
 80037bc:	e037883a 	mov	sp,fp
 80037c0:	df000017 	ldw	fp,0(sp)
 80037c4:	dec00104 	addi	sp,sp,4
 80037c8:	f800283a 	ret

080037cc <atexit>:
 80037cc:	200b883a 	mov	r5,r4
 80037d0:	000d883a 	mov	r6,zero
 80037d4:	0009883a 	mov	r4,zero
 80037d8:	000f883a 	mov	r7,zero
 80037dc:	80039a01 	jmpi	80039a0 <__register_exitproc>

080037e0 <exit>:
 80037e0:	defffe04 	addi	sp,sp,-8
 80037e4:	000b883a 	mov	r5,zero
 80037e8:	dc000015 	stw	r16,0(sp)
 80037ec:	dfc00115 	stw	ra,4(sp)
 80037f0:	2021883a 	mov	r16,r4
 80037f4:	8003ad80 	call	8003ad8 <__call_exitprocs>
 80037f8:	00820034 	movhi	r2,2048
 80037fc:	1094fc04 	addi	r2,r2,21488
 8003800:	11000017 	ldw	r4,0(r2)
 8003804:	20800f17 	ldw	r2,60(r4)
 8003808:	10000126 	beq	r2,zero,8003810 <exit+0x30>
 800380c:	103ee83a 	callr	r2
 8003810:	8009883a 	mov	r4,r16
 8003814:	8003cc80 	call	8003cc8 <_exit>

08003818 <memcmp>:
 8003818:	00c000c4 	movi	r3,3
 800381c:	1980032e 	bgeu	r3,r6,800382c <memcmp+0x14>
 8003820:	2144b03a 	or	r2,r4,r5
 8003824:	10c4703a 	and	r2,r2,r3
 8003828:	10000f26 	beq	r2,zero,8003868 <memcmp+0x50>
 800382c:	31ffffc4 	addi	r7,r6,-1
 8003830:	3000061e 	bne	r6,zero,800384c <memcmp+0x34>
 8003834:	00000a06 	br	8003860 <memcmp+0x48>
 8003838:	39ffffc4 	addi	r7,r7,-1
 800383c:	00bfffc4 	movi	r2,-1
 8003840:	21000044 	addi	r4,r4,1
 8003844:	29400044 	addi	r5,r5,1
 8003848:	38800526 	beq	r7,r2,8003860 <memcmp+0x48>
 800384c:	20c00003 	ldbu	r3,0(r4)
 8003850:	28800003 	ldbu	r2,0(r5)
 8003854:	18bff826 	beq	r3,r2,8003838 <memcmp+0x20>
 8003858:	1885c83a 	sub	r2,r3,r2
 800385c:	f800283a 	ret
 8003860:	0005883a 	mov	r2,zero
 8003864:	f800283a 	ret
 8003868:	180f883a 	mov	r7,r3
 800386c:	20c00017 	ldw	r3,0(r4)
 8003870:	28800017 	ldw	r2,0(r5)
 8003874:	18bfed1e 	bne	r3,r2,800382c <memcmp+0x14>
 8003878:	31bfff04 	addi	r6,r6,-4
 800387c:	21000104 	addi	r4,r4,4
 8003880:	29400104 	addi	r5,r5,4
 8003884:	39bff936 	bltu	r7,r6,800386c <memcmp+0x54>
 8003888:	003fe806 	br	800382c <memcmp+0x14>

0800388c <memcpy>:
 800388c:	01c003c4 	movi	r7,15
 8003890:	2007883a 	mov	r3,r4
 8003894:	3980032e 	bgeu	r7,r6,80038a4 <memcpy+0x18>
 8003898:	2904b03a 	or	r2,r5,r4
 800389c:	108000cc 	andi	r2,r2,3
 80038a0:	10000926 	beq	r2,zero,80038c8 <memcpy+0x3c>
 80038a4:	30000626 	beq	r6,zero,80038c0 <memcpy+0x34>
 80038a8:	30cd883a 	add	r6,r6,r3
 80038ac:	28800003 	ldbu	r2,0(r5)
 80038b0:	29400044 	addi	r5,r5,1
 80038b4:	18800005 	stb	r2,0(r3)
 80038b8:	18c00044 	addi	r3,r3,1
 80038bc:	30fffb1e 	bne	r6,r3,80038ac <memcpy+0x20>
 80038c0:	2005883a 	mov	r2,r4
 80038c4:	f800283a 	ret
 80038c8:	3811883a 	mov	r8,r7
 80038cc:	200f883a 	mov	r7,r4
 80038d0:	28c00017 	ldw	r3,0(r5)
 80038d4:	31bffc04 	addi	r6,r6,-16
 80038d8:	38c00015 	stw	r3,0(r7)
 80038dc:	28800117 	ldw	r2,4(r5)
 80038e0:	38800115 	stw	r2,4(r7)
 80038e4:	28c00217 	ldw	r3,8(r5)
 80038e8:	38c00215 	stw	r3,8(r7)
 80038ec:	28800317 	ldw	r2,12(r5)
 80038f0:	29400404 	addi	r5,r5,16
 80038f4:	38800315 	stw	r2,12(r7)
 80038f8:	39c00404 	addi	r7,r7,16
 80038fc:	41bff436 	bltu	r8,r6,80038d0 <memcpy+0x44>
 8003900:	008000c4 	movi	r2,3
 8003904:	1180072e 	bgeu	r2,r6,8003924 <memcpy+0x98>
 8003908:	1007883a 	mov	r3,r2
 800390c:	28800017 	ldw	r2,0(r5)
 8003910:	31bfff04 	addi	r6,r6,-4
 8003914:	29400104 	addi	r5,r5,4
 8003918:	38800015 	stw	r2,0(r7)
 800391c:	39c00104 	addi	r7,r7,4
 8003920:	19bffa36 	bltu	r3,r6,800390c <memcpy+0x80>
 8003924:	3807883a 	mov	r3,r7
 8003928:	003fde06 	br	80038a4 <memcpy+0x18>

0800392c <strlen>:
 800392c:	208000cc 	andi	r2,r4,3
 8003930:	2011883a 	mov	r8,r4
 8003934:	1000161e 	bne	r2,zero,8003990 <strlen+0x64>
 8003938:	20c00017 	ldw	r3,0(r4)
 800393c:	017fbff4 	movhi	r5,65279
 8003940:	297fbfc4 	addi	r5,r5,-257
 8003944:	01e02074 	movhi	r7,32897
 8003948:	39e02004 	addi	r7,r7,-32640
 800394c:	1945883a 	add	r2,r3,r5
 8003950:	11c4703a 	and	r2,r2,r7
 8003954:	00c6303a 	nor	r3,zero,r3
 8003958:	1886703a 	and	r3,r3,r2
 800395c:	18000c1e 	bne	r3,zero,8003990 <strlen+0x64>
 8003960:	280d883a 	mov	r6,r5
 8003964:	380b883a 	mov	r5,r7
 8003968:	21000104 	addi	r4,r4,4
 800396c:	20800017 	ldw	r2,0(r4)
 8003970:	1187883a 	add	r3,r2,r6
 8003974:	1946703a 	and	r3,r3,r5
 8003978:	0084303a 	nor	r2,zero,r2
 800397c:	10c4703a 	and	r2,r2,r3
 8003980:	103ff926 	beq	r2,zero,8003968 <strlen+0x3c>
 8003984:	20800007 	ldb	r2,0(r4)
 8003988:	10000326 	beq	r2,zero,8003998 <strlen+0x6c>
 800398c:	21000044 	addi	r4,r4,1
 8003990:	20800007 	ldb	r2,0(r4)
 8003994:	103ffd1e 	bne	r2,zero,800398c <strlen+0x60>
 8003998:	2205c83a 	sub	r2,r4,r8
 800399c:	f800283a 	ret

080039a0 <__register_exitproc>:
 80039a0:	defffa04 	addi	sp,sp,-24
 80039a4:	00820034 	movhi	r2,2048
 80039a8:	1094fc04 	addi	r2,r2,21488
 80039ac:	dc000015 	stw	r16,0(sp)
 80039b0:	14000017 	ldw	r16,0(r2)
 80039b4:	dd000415 	stw	r20,16(sp)
 80039b8:	2829883a 	mov	r20,r5
 80039bc:	81405217 	ldw	r5,328(r16)
 80039c0:	dcc00315 	stw	r19,12(sp)
 80039c4:	dc800215 	stw	r18,8(sp)
 80039c8:	dc400115 	stw	r17,4(sp)
 80039cc:	dfc00515 	stw	ra,20(sp)
 80039d0:	2023883a 	mov	r17,r4
 80039d4:	3027883a 	mov	r19,r6
 80039d8:	3825883a 	mov	r18,r7
 80039dc:	28002526 	beq	r5,zero,8003a74 <__register_exitproc+0xd4>
 80039e0:	29000117 	ldw	r4,4(r5)
 80039e4:	008007c4 	movi	r2,31
 80039e8:	11002716 	blt	r2,r4,8003a88 <__register_exitproc+0xe8>
 80039ec:	8800101e 	bne	r17,zero,8003a30 <__register_exitproc+0x90>
 80039f0:	2105883a 	add	r2,r4,r4
 80039f4:	1085883a 	add	r2,r2,r2
 80039f8:	20c00044 	addi	r3,r4,1
 80039fc:	1145883a 	add	r2,r2,r5
 8003a00:	0009883a 	mov	r4,zero
 8003a04:	15000215 	stw	r20,8(r2)
 8003a08:	28c00115 	stw	r3,4(r5)
 8003a0c:	2005883a 	mov	r2,r4
 8003a10:	dfc00517 	ldw	ra,20(sp)
 8003a14:	dd000417 	ldw	r20,16(sp)
 8003a18:	dcc00317 	ldw	r19,12(sp)
 8003a1c:	dc800217 	ldw	r18,8(sp)
 8003a20:	dc400117 	ldw	r17,4(sp)
 8003a24:	dc000017 	ldw	r16,0(sp)
 8003a28:	dec00604 	addi	sp,sp,24
 8003a2c:	f800283a 	ret
 8003a30:	29802204 	addi	r6,r5,136
 8003a34:	00800044 	movi	r2,1
 8003a38:	110e983a 	sll	r7,r2,r4
 8003a3c:	30c04017 	ldw	r3,256(r6)
 8003a40:	2105883a 	add	r2,r4,r4
 8003a44:	1085883a 	add	r2,r2,r2
 8003a48:	1185883a 	add	r2,r2,r6
 8003a4c:	19c6b03a 	or	r3,r3,r7
 8003a50:	14802015 	stw	r18,128(r2)
 8003a54:	14c00015 	stw	r19,0(r2)
 8003a58:	00800084 	movi	r2,2
 8003a5c:	30c04015 	stw	r3,256(r6)
 8003a60:	88bfe31e 	bne	r17,r2,80039f0 <__register_exitproc+0x50>
 8003a64:	30804117 	ldw	r2,260(r6)
 8003a68:	11c4b03a 	or	r2,r2,r7
 8003a6c:	30804115 	stw	r2,260(r6)
 8003a70:	003fdf06 	br	80039f0 <__register_exitproc+0x50>
 8003a74:	00820034 	movhi	r2,2048
 8003a78:	109aeb04 	addi	r2,r2,27564
 8003a7c:	100b883a 	mov	r5,r2
 8003a80:	80805215 	stw	r2,328(r16)
 8003a84:	003fd606 	br	80039e0 <__register_exitproc+0x40>
 8003a88:	00800034 	movhi	r2,0
 8003a8c:	10800004 	addi	r2,r2,0
 8003a90:	1000021e 	bne	r2,zero,8003a9c <__register_exitproc+0xfc>
 8003a94:	013fffc4 	movi	r4,-1
 8003a98:	003fdc06 	br	8003a0c <__register_exitproc+0x6c>
 8003a9c:	01006404 	movi	r4,400
 8003aa0:	103ee83a 	callr	r2
 8003aa4:	1007883a 	mov	r3,r2
 8003aa8:	103ffa26 	beq	r2,zero,8003a94 <__register_exitproc+0xf4>
 8003aac:	80805217 	ldw	r2,328(r16)
 8003ab0:	180b883a 	mov	r5,r3
 8003ab4:	18000115 	stw	zero,4(r3)
 8003ab8:	18800015 	stw	r2,0(r3)
 8003abc:	80c05215 	stw	r3,328(r16)
 8003ac0:	18006215 	stw	zero,392(r3)
 8003ac4:	18006315 	stw	zero,396(r3)
 8003ac8:	0009883a 	mov	r4,zero
 8003acc:	883fc826 	beq	r17,zero,80039f0 <__register_exitproc+0x50>
 8003ad0:	003fd706 	br	8003a30 <__register_exitproc+0x90>

08003ad4 <register_fini>:
 8003ad4:	f800283a 	ret

08003ad8 <__call_exitprocs>:
 8003ad8:	00820034 	movhi	r2,2048
 8003adc:	1094fc04 	addi	r2,r2,21488
 8003ae0:	10800017 	ldw	r2,0(r2)
 8003ae4:	defff304 	addi	sp,sp,-52
 8003ae8:	df000b15 	stw	fp,44(sp)
 8003aec:	d8800115 	stw	r2,4(sp)
 8003af0:	00800034 	movhi	r2,0
 8003af4:	10800004 	addi	r2,r2,0
 8003af8:	1005003a 	cmpeq	r2,r2,zero
 8003afc:	d8800215 	stw	r2,8(sp)
 8003b00:	d8800117 	ldw	r2,4(sp)
 8003b04:	dd400815 	stw	r21,32(sp)
 8003b08:	dd000715 	stw	r20,28(sp)
 8003b0c:	10805204 	addi	r2,r2,328
 8003b10:	dfc00c15 	stw	ra,48(sp)
 8003b14:	ddc00a15 	stw	r23,40(sp)
 8003b18:	dd800915 	stw	r22,36(sp)
 8003b1c:	dcc00615 	stw	r19,24(sp)
 8003b20:	dc800515 	stw	r18,20(sp)
 8003b24:	dc400415 	stw	r17,16(sp)
 8003b28:	dc000315 	stw	r16,12(sp)
 8003b2c:	282b883a 	mov	r21,r5
 8003b30:	2039883a 	mov	fp,r4
 8003b34:	d8800015 	stw	r2,0(sp)
 8003b38:	2829003a 	cmpeq	r20,r5,zero
 8003b3c:	d8800117 	ldw	r2,4(sp)
 8003b40:	14405217 	ldw	r17,328(r2)
 8003b44:	88001026 	beq	r17,zero,8003b88 <__call_exitprocs+0xb0>
 8003b48:	ddc00017 	ldw	r23,0(sp)
 8003b4c:	88800117 	ldw	r2,4(r17)
 8003b50:	8c802204 	addi	r18,r17,136
 8003b54:	143fffc4 	addi	r16,r2,-1
 8003b58:	80000916 	blt	r16,zero,8003b80 <__call_exitprocs+0xa8>
 8003b5c:	05bfffc4 	movi	r22,-1
 8003b60:	a000151e 	bne	r20,zero,8003bb8 <__call_exitprocs+0xe0>
 8003b64:	8409883a 	add	r4,r16,r16
 8003b68:	2105883a 	add	r2,r4,r4
 8003b6c:	1485883a 	add	r2,r2,r18
 8003b70:	10c02017 	ldw	r3,128(r2)
 8003b74:	a8c01126 	beq	r21,r3,8003bbc <__call_exitprocs+0xe4>
 8003b78:	843fffc4 	addi	r16,r16,-1
 8003b7c:	85bff81e 	bne	r16,r22,8003b60 <__call_exitprocs+0x88>
 8003b80:	d8800217 	ldw	r2,8(sp)
 8003b84:	10003126 	beq	r2,zero,8003c4c <__call_exitprocs+0x174>
 8003b88:	dfc00c17 	ldw	ra,48(sp)
 8003b8c:	df000b17 	ldw	fp,44(sp)
 8003b90:	ddc00a17 	ldw	r23,40(sp)
 8003b94:	dd800917 	ldw	r22,36(sp)
 8003b98:	dd400817 	ldw	r21,32(sp)
 8003b9c:	dd000717 	ldw	r20,28(sp)
 8003ba0:	dcc00617 	ldw	r19,24(sp)
 8003ba4:	dc800517 	ldw	r18,20(sp)
 8003ba8:	dc400417 	ldw	r17,16(sp)
 8003bac:	dc000317 	ldw	r16,12(sp)
 8003bb0:	dec00d04 	addi	sp,sp,52
 8003bb4:	f800283a 	ret
 8003bb8:	8409883a 	add	r4,r16,r16
 8003bbc:	88c00117 	ldw	r3,4(r17)
 8003bc0:	2105883a 	add	r2,r4,r4
 8003bc4:	1445883a 	add	r2,r2,r17
 8003bc8:	18ffffc4 	addi	r3,r3,-1
 8003bcc:	11800217 	ldw	r6,8(r2)
 8003bd0:	1c001526 	beq	r3,r16,8003c28 <__call_exitprocs+0x150>
 8003bd4:	10000215 	stw	zero,8(r2)
 8003bd8:	303fe726 	beq	r6,zero,8003b78 <__call_exitprocs+0xa0>
 8003bdc:	00c00044 	movi	r3,1
 8003be0:	1c06983a 	sll	r3,r3,r16
 8003be4:	90804017 	ldw	r2,256(r18)
 8003be8:	8cc00117 	ldw	r19,4(r17)
 8003bec:	1884703a 	and	r2,r3,r2
 8003bf0:	10001426 	beq	r2,zero,8003c44 <__call_exitprocs+0x16c>
 8003bf4:	90804117 	ldw	r2,260(r18)
 8003bf8:	1884703a 	and	r2,r3,r2
 8003bfc:	10000c1e 	bne	r2,zero,8003c30 <__call_exitprocs+0x158>
 8003c00:	2105883a 	add	r2,r4,r4
 8003c04:	1485883a 	add	r2,r2,r18
 8003c08:	11400017 	ldw	r5,0(r2)
 8003c0c:	e009883a 	mov	r4,fp
 8003c10:	303ee83a 	callr	r6
 8003c14:	88800117 	ldw	r2,4(r17)
 8003c18:	98bfc81e 	bne	r19,r2,8003b3c <__call_exitprocs+0x64>
 8003c1c:	b8800017 	ldw	r2,0(r23)
 8003c20:	147fd526 	beq	r2,r17,8003b78 <__call_exitprocs+0xa0>
 8003c24:	003fc506 	br	8003b3c <__call_exitprocs+0x64>
 8003c28:	8c000115 	stw	r16,4(r17)
 8003c2c:	003fea06 	br	8003bd8 <__call_exitprocs+0x100>
 8003c30:	2105883a 	add	r2,r4,r4
 8003c34:	1485883a 	add	r2,r2,r18
 8003c38:	11000017 	ldw	r4,0(r2)
 8003c3c:	303ee83a 	callr	r6
 8003c40:	003ff406 	br	8003c14 <__call_exitprocs+0x13c>
 8003c44:	303ee83a 	callr	r6
 8003c48:	003ff206 	br	8003c14 <__call_exitprocs+0x13c>
 8003c4c:	88800117 	ldw	r2,4(r17)
 8003c50:	1000081e 	bne	r2,zero,8003c74 <__call_exitprocs+0x19c>
 8003c54:	89000017 	ldw	r4,0(r17)
 8003c58:	20000726 	beq	r4,zero,8003c78 <__call_exitprocs+0x1a0>
 8003c5c:	b9000015 	stw	r4,0(r23)
 8003c60:	8809883a 	mov	r4,r17
 8003c64:	00000000 	call	0 <__alt_mem_sdram_0-0x8000000>
 8003c68:	bc400017 	ldw	r17,0(r23)
 8003c6c:	883fb71e 	bne	r17,zero,8003b4c <__call_exitprocs+0x74>
 8003c70:	003fc506 	br	8003b88 <__call_exitprocs+0xb0>
 8003c74:	89000017 	ldw	r4,0(r17)
 8003c78:	882f883a 	mov	r23,r17
 8003c7c:	2023883a 	mov	r17,r4
 8003c80:	883fb21e 	bne	r17,zero,8003b4c <__call_exitprocs+0x74>
 8003c84:	003fc006 	br	8003b88 <__call_exitprocs+0xb0>

08003c88 <alt_sim_halt>:

/*
 * Routine called on exit.
 */
static ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
 8003c88:	defffd04 	addi	sp,sp,-12
 8003c8c:	df000215 	stw	fp,8(sp)
 8003c90:	df000204 	addi	fp,sp,8
 8003c94:	e13fff15 	stw	r4,-4(fp)
  int r2 = exit_code;
 8003c98:	e0bfff17 	ldw	r2,-4(fp)
 8003c9c:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 8003ca0:	e0bffe17 	ldw	r2,-8(fp)
 8003ca4:	1005003a 	cmpeq	r2,r2,zero
 8003ca8:	1000021e 	bne	r2,zero,8003cb4 <alt_sim_halt+0x2c>
    ALT_SIM_FAIL();
 8003cac:	002af070 	cmpltui	zero,zero,43969
 8003cb0:	00000106 	br	8003cb8 <alt_sim_halt+0x30>
  } else {
    ALT_SIM_PASS();
 8003cb4:	002af0b0 	cmpltui	zero,zero,43970
  }
#endif /* DEBUG_STUB */
}
 8003cb8:	e037883a 	mov	sp,fp
 8003cbc:	df000017 	ldw	fp,0(sp)
 8003cc0:	dec00104 	addi	sp,sp,4
 8003cc4:	f800283a 	ret

08003cc8 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 8003cc8:	defffd04 	addi	sp,sp,-12
 8003ccc:	dfc00215 	stw	ra,8(sp)
 8003cd0:	df000115 	stw	fp,4(sp)
 8003cd4:	df000104 	addi	fp,sp,4
 8003cd8:	e13fff15 	stw	r4,-4(fp)
  ALT_OS_STOP();

  /* Provide notification to the simulator that we've stopped */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_SIM_HALT().\r\n");
  ALT_SIM_HALT(exit_code);
 8003cdc:	e13fff17 	ldw	r4,-4(fp)
 8003ce0:	8003c880 	call	8003c88 <alt_sim_halt>

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 8003ce4:	003fff06 	br	8003ce4 <_exit+0x1c>
 8003ce8:	08003ad4 	ori	zero,at,235
