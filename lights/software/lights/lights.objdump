
lights.elf:     file format elf32-littlenios2
lights.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x080001b4

Program Header:
    LOAD off    0x00001000 vaddr 0x08000000 paddr 0x08000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x08000020 paddr 0x08000020 align 2**12
         filesz 0x000186dc memsz 0x000186dc flags r-x
    LOAD off    0x000196fc vaddr 0x080186fc paddr 0x0801a5c4 align 2**12
         filesz 0x00001ec8 memsz 0x00001ec8 flags rw-
    LOAD off    0x0001c48c vaddr 0x0801c48c paddr 0x0801c48c align 2**12
         filesz 0x00000000 memsz 0x00000304 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  08000000  08000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000194  08000020  08000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00017138  080001b4  080001b4  000011b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00001410  080172ec  080172ec  000182ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001ec8  080186fc  0801a5c4  000196fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000304  0801c48c  0801c48c  0001c48c  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000023  00000000  00000000  0001b5c4  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00001358  00000000  00000000  0001b5e8  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 000023ee  00000000  00000000  0001c940  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00036df6  00000000  00000000  0001ed2e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000bf82  00000000  00000000  00055b24  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0001fc14  00000000  00000000  00061aa6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00002bc4  00000000  00000000  000816bc  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0000340f  00000000  00000000  00084280  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000108a7  00000000  00000000  0008768f  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000060  00000000  00000000  00097f38  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000b38  00000000  00000000  00097f98  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0009d888  2**0
                  CONTENTS, READONLY
 18 .cpu          00000005  00000000  00000000  0009d88b  2**0
                  CONTENTS, READONLY
 19 .simulation_enabled 00000001  00000000  00000000  0009d890  2**0
                  CONTENTS, READONLY
 20 .sysid_hash   00000004  00000000  00000000  0009d891  2**0
                  CONTENTS, READONLY
 21 .sysid_base   00000004  00000000  00000000  0009d895  2**0
                  CONTENTS, READONLY
 22 .sysid_time   00000004  00000000  00000000  0009d899  2**0
                  CONTENTS, READONLY
 23 .stderr_dev   00000005  00000000  00000000  0009d89d  2**0
                  CONTENTS, READONLY
 24 .stdin_dev    0000000b  00000000  00000000  0009d8a2  2**0
                  CONTENTS, READONLY
 25 .stdout_dev   0000000b  00000000  00000000  0009d8ad  2**0
                  CONTENTS, READONLY
 26 .sopc_system_name 0000000b  00000000  00000000  0009d8b8  2**0
                  CONTENTS, READONLY
 27 .quartus_project_dir 00000020  00000000  00000000  0009d8c3  2**0
                  CONTENTS, READONLY
 28 .jdi          000084a4  00000000  00000000  0009d8e3  2**0
                  CONTENTS, READONLY
 29 .sopcinfo     000cf611  00000000  00000000  000a5d87  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
08000000 l    d  .entry	00000000 .entry
08000020 l    d  .exceptions	00000000 .exceptions
080001b4 l    d  .text	00000000 .text
080172ec l    d  .rodata	00000000 .rodata
080186fc l    d  .rwdata	00000000 .rwdata
0801c48c l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
080001fc l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 sf_cos.c
00000000 l    df *ABS*	00000000 sf_floor.c
00000000 l    df *ABS*	00000000 sf_sin.c
00000000 l    df *ABS*	00000000 ef_rem_pio2.c
08017500 l     O .rodata	00000318 two_over_pi
08017480 l     O .rodata	00000080 npio2_hw
00000000 l    df *ABS*	00000000 kf_cos.c
00000000 l    df *ABS*	00000000 kf_rem_pio2.c
08017818 l     O .rodata	0000000c init_jk
08017824 l     O .rodata	0000002c PIo2
00000000 l    df *ABS*	00000000 kf_sin.c
00000000 l    df *ABS*	00000000 sf_fabs.c
00000000 l    df *ABS*	00000000 sf_scalbn.c
00000000 l    df *ABS*	00000000 sf_copysign.c
00000000 l    df *ABS*	00000000 fp-bit.c
080025fc l     F .text	000001e4 _fpadd_parts
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
08002ea4 l     F .text	0000007c udivmodsi4
00000000 l    df *ABS*	00000000 lib2-divtable.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 fopen.c
00000000 l    df *ABS*	00000000 fread.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fseek.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 impure.c
080187fc l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 openr.c
00000000 l    df *ABS*	00000000 perror.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 refill.c
080050d0 l     F .text	0000001c lflush
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strerror.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 u_strerr.c
00000000 l    df *ABS*	00000000 vfprintf.c
08005998 l     F .text	00000058 __sprint_r
0801817a l     O .rodata	00000010 blanks.3452
0801816a l     O .rodata	00000010 zeroes.3453
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 dtoa.c
08007ae4 l     F .text	00000218 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
080094e0 l     F .text	00000058 std
080095ec l     F .text	00000008 __fp_lock
080095f4 l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 flags.c
00000000 l    df *ABS*	00000000 fputc.c
00000000 l    df *ABS*	00000000 fputs.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 locale.c
0801a578 l     O .rwdata	00000004 charset
080181ac l     O .rodata	00000030 lconv
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
080182f4 l     O .rodata	0000000c p05.2458
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_isinfd.c
00000000 l    df *ABS*	00000000 s_isnand.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 dp-bit.c
0800cbd8 l     F .text	00000410 _fpadd_parts
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 alt_close.c
0800e000 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0800e060 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0800e160 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
0800e280 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0800e360 l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0800e4bc l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_open.c
0800e5c8 l     F .text	000000dc alt_file_locked
0800e82c l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_read.c
0800e9ac l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
0801a594 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
0800ec48 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
080191b8 l     O .rwdata	000000d8 cfi_flash_0
08019290 l     O .rwdata	00001060 jtag_uart_0
0801a2f0 l     O .rwdata	00000120 lcd_0
0801a410 l     O .rwdata	0000003c mailbox_0
0801a44c l     O .rwdata	0000003c mailbox_1
0801a488 l     O .rwdata	00000030 altera_ro_zipfs
0801a4b8 l     O .rwdata	00000048 video_character_buffer_with_dma_0
0801a500 l     O .rwdata	00000054 video_pixel_buffer_dma_0
0800f03c l     F .text	00000038 alt_dev_reg
00000000 l    df *ABS*	00000000 altera_avalon_cfi_flash.c
0800f110 l     F .text	00000038 alt_flash_device_register
00000000 l    df *ABS*	00000000 altera_avalon_cfi_flash_table.c
0800ff00 l     F .text	0000007c alt_read_16bit_query_entry
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
08010f8c l     F .text	00000228 altera_avalon_jtag_uart_irq
080111b4 l     F .text	000000b0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_lcd_16207.c
0801a598 l     O .rwdata	00000004 colstart
08011830 l     F .text	000000b8 lcd_write_command
080118e8 l     F .text	000000d4 lcd_write_data
080119bc l     F .text	000000c4 lcd_clear_screen
08011a80 l     F .text	000001ec lcd_repaint_screen
08011c6c l     F .text	000000c8 lcd_scroll_up
08011d34 l     F .text	000002d0 lcd_handle_escape
08012510 l     F .text	000000cc alt_lcd_16207_timeout
00000000 l    df *ABS*	00000000 altera_avalon_lcd_16207_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_mailbox.c
080128c8 l     F .text	0000006c alt_avalon_mutex_reg
08012934 l     F .text	00000060 alt_get_errno
08012ac8 l     F .text	00000050 alt_mailbox_increment_ptr
00000000 l    df *ABS*	00000000 altera_avalon_mutex.c
08012c98 l     F .text	0000007c alt_mutex_trylock
08012d6c l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 altera_avalon_performance_counter.c
00000000 l    df *ABS*	00000000 altera_ro_zipfs.c
08013124 l     F .text	00000074 read_word
08013198 l     F .text	00000050 read_word_inc
080131e8 l     F .text	00000048 read_half_word
08013230 l     F .text	00000050 read_half_word_inc
08013280 l     F .text	00000118 check_file_header
080134c4 l     F .text	000000a0 check_directory_table
08013564 l     F .text	000000ac find_directory_entry
08013610 l     F .text	00000160 find_file_entry_by_name
08013770 l     F .text	00000180 find_file_entry
00000000 l    df *ABS*	00000000 altera_up_avalon_video_character_buffer_with_dma.c
00000000 l    df *ABS*	00000000 altera_up_avalon_video_pixel_buffer_dma.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
080157c8 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_flash_dev.c
00000000 l    df *ABS*	00000000 alt_fs_reg.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
08015fb8 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 altera_nios2_irq.c
00000000 l    df *ABS*	00000000 altera_avalon_cfi_flash_amd.c
0801668c l     F .text	000000bc alt_write_word_amd
08016568 l     F .text	00000124 alt_wait_for_command_to_complete_amd
00000000 l    df *ABS*	00000000 altera_avalon_cfi_flash_intel.c
08016940 l     F .text	0000018c alt_unlock_block_intel
08016acc l     F .text	000000dc alt_write_word_intel
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 ctype_.c
08018579 l     O .rodata	00000180 _ctype_b
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 strncmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
08017068 l     F .text	00000004 register_fini
00000000 l    df *ABS*	00000000 alt_exit.c
0801721c l     F .text	00000040 alt_sim_halt
0800a7bc g     F .text	00000094 _mprec_log10
0800a8a8 g     F .text	00000088 __any_on
08009fa8 g     F .text	00000070 _isatty_r
080182cc g     O .rodata	00000028 __mprec_tinytens
0800e51c g     F .text	0000006c alt_main
08012b18 g     F .text	000000a8 altera_avalon_mailbox_pend
08014c04 g     F .text	000003d0 alt_up_pixel_buffer_dma_draw_vline
08004e58 g     F .text	000000a0 _puts_r
0800f9c0 g     F .text	00000048 alt_read_query_entry_32bit
0801c500 g     O .bss	00000100 alt_irq
0801a560 g     O .rwdata	00000004 div_amt
0800a0dc g     F .text	00000078 _lseek_r
0800f148 g     F .text	000002c0 alt_flash_cfi_write
0801a5c4 g       *ABS*	00000000 __flash_rwdata_start
080097a0 g     F .text	000000a0 __sflags
0800d6f8 g     F .text	00000088 __eqdf2
0801c790 g       *ABS*	00000000 __alt_heap_start
08012bc0 g     F .text	000000d8 altera_avalon_mailbox_get
08004de0 g     F .text	00000044 printf
08005164 g     F .text	00000068 __sseek
08009548 g     F .text	000000a4 __sinit
08013100 g     F .text	00000024 alt_get_cpu_freq
0800bd28 g     F .text	00000130 __swbuf_r
08013e28 g     F .text	00000114 alt_up_char_buffer_string
0800a03c g     F .text	00000084 _setlocale_r
08009648 g     F .text	00000068 __sfmoreglue
0800e5a8 g     F .text	00000020 __malloc_unlock
080052a8 g     F .text	00000674 strerror
08013d58 g     F .text	000000d0 alt_up_char_buffer_draw
0800a238 g     F .text	000000e0 memmove
08009638 g     F .text	00000010 _cleanup
08012e2c g     F .text	00000040 altera_avalon_mutex_trylock
0800a930 g     F .text	000000bc _Balloc
08002d84 g     F .text	00000094 __fixsfsi
08013fd8 g     F .text	000001a0 alt_up_pixel_buffer_dma_draw
0800d808 g     F .text	00000088 __gtdf2
00000000  w      *UND*	00000000 __errno
0800fb4c g     F .text	00000048 alt_write_flash_command_32bit_device_16bit_mode
08013f98 g     F .text	00000040 alt_up_pixel_buffer_dma_open_dev
08000000 g     F .entry	0000001c __reset
08001044 g     F .text	0000053c __ieee754_rem_pio2f
08012ec8 g     F .text	0000007c altera_avalon_mutex_is_mine
08000020 g       *ABS*	00000000 __flash_exceptions_start
080042d8 g     F .text	00000074 _fstat_r
0800f664 g     F .text	000002d8 alt_flash_program_block
0801c4a4 g     O .bss	00000004 errno
08002e6c g     F .text	00000038 __make_dp
0801c4c4 g     O .bss	00000004 alt_argv
08022554 g       *ABS*	00000000 _gp
08016298 g     F .text	00000030 usleep
080027e0 g     F .text	00000070 __subsf3
08014178 g     F .text	00000058 alt_up_pixel_buffer_dma_change_back_buffer_address
08019038 g     O .rwdata	00000180 alt_fd_list
080158f0 g     F .text	00000094 alt_find_dev
08004c48 g     F .text	000000a0 memcpy
08013f3c g     F .text	0000005c alt_up_char_buffer_clear
0800962c g     F .text	0000000c _cleanup_r
0800d9a0 g     F .text	000000f8 __floatsidf
0801c48c g     O .bss	00000004 bool_dec
08004dcc g     F .text	00000014 perror
08015b74 g     F .text	00000090 alt_fs_reg
0801607c g     F .text	00000078 alt_io_redirect
0800d918 g     F .text	00000088 __ltdf2
080172ec g       *ABS*	00000000 __DTOR_END__
08004ef8 g     F .text	00000014 puts
080138f0 g     F .text	00000098 alt_ro_zipfs_open
080162c8 g     F .text	00000020 altera_nios2_irq_init
0800a70c g     F .text	000000b0 __ratio
0801c490 g     O .bss	00000004 scount
08012a0c g     F .text	000000bc altera_avalon_mailbox_post
08014228 g     F .text	00000034 alt_up_pixel_buffer_dma_check_swap_buffers_status
080113cc g     F .text	00000224 altera_avalon_jtag_uart_read
080044f4 g     F .text	00000014 malloc
08004e24 g     F .text	00000034 _printf_r
00003000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
08002fe0 g     F .text	00000008 __udivsi3
0800e1c0 g     F .text	000000c0 isatty
080181dc g     O .rodata	000000c8 __mprec_tens
080129ec g     F .text	00000020 altera_avalon_mailbox_close
080148b4 g     F .text	00000350 alt_up_pixel_buffer_dma_draw_hline
0800a018 g     F .text	00000008 __locale_charset
08002c74 g     F .text	00000078 __lesf2
08016cf4 g     F .text	00000090 alt_icache_flush
0801c4a8 g     O .bss	00000004 __malloc_top_pad
080130a0 g     F .text	00000040 perf_get_num_starts
0801a574 g     O .rwdata	00000004 __mb_cur_max
0800a020 g     F .text	0000000c _localeconv_r
0800b028 g     F .text	0000003c __i2b
0800998c g     F .text	0000049c __sfvwrite_r
080050ec g     F .text	00000070 _sbrk_r
08016748 g     F .text	00000084 alt_program_intel
08015098 g     F .text	000000d0 helper_plot_pixel
08002488 g     F .text	00000010 fabsf
0800b590 g     F .text	00000078 _read_r
08015658 g     F .text	00000078 alt_dcache_flush
08019004 g     O .rwdata	0000000c __lc_ctype
0801a58c g     O .rwdata	00000004 alt_max_fd
0800f93c g     F .text	00000040 alt_read_query_entry_8bit
0800dd04 g     F .text	00000138 __unpack_d
0800bf28 g     F .text	00000110 _fclose_r
080167cc g     F .text	00000174 alt_erase_block_intel
080094ac g     F .text	00000034 fflush
0801c4ac g     O .bss	00000004 __malloc_max_sbrked_mem
08002e18 g     F .text	00000054 __extendsfdf2
0800d068 g     F .text	00000074 __adddf3
0800a5ec g     F .text	00000120 __b2d
0801425c g     F .text	00000164 alt_up_pixel_buffer_dma_clear_screen
0800c628 g     F .text	000005b0 __umoddi3
0800e3cc g     F .text	000000f0 lseek
08012f44 g     F .text	00000058 altera_avalon_mutex_first_lock
0801a568 g     O .rwdata	00000004 _global_impure_ptr
0800b608 g     F .text	000005f4 _realloc_r
080022cc g     F .text	000001bc __kernel_sinf
0801c790 g       *ABS*	00000000 __bss_end
08015ec0 g     F .text	000000f8 alt_iic_isr_register
080143c0 g     F .text	000004f4 alt_up_pixel_buffer_dma_draw_box
0801618c g     F .text	0000010c alt_tick
0800c04c g     F .text	000005dc __udivdi3
080182a4 g     O .rodata	00000028 __mprec_bigtens
0800b284 g     F .text	00000120 __s2b
0800db70 g     F .text	00000194 __floatunsidf
0800a50c g     F .text	00000060 __mcmp
0801a5c0 g     O .rwdata	00000004 __ctype_ptr
08009614 g     F .text	00000018 __fp_lock_all
08015e78 g     F .text	00000048 alt_ic_irq_enabled
080160f4 g     F .text	00000098 alt_alarm_stop
08000db0 g     F .text	000000c0 cosf
0801c4cc g     O .bss	00000004 alt_irq_active
08013a84 g     F .text	00000148 alt_ro_zipfs_seek
080000ec g     F .exceptions	000000c8 alt_irq_handler
08019010 g     O .rwdata	00000028 alt_dev_null
08012d14 g     F .text	00000058 altera_avalon_mutex_open
08003268 g     F .text	000000c8 __unpack_f
0800fe54 g     F .text	000000ac alt_set_flash_algorithm_func
080156d0 g     F .text	00000044 alt_dcache_flush_all
0800a3d8 g     F .text	00000070 __hi0bits
08014fd4 g     F .text	000000c4 alt_up_pixel_buffer_dma_draw_rectangle
0800da98 g     F .text	000000d8 __fixdfsi
08001580 g     F .text	000002bc __kernel_cosf
0800fa08 g     F .text	0000003c alt_write_flash_command_8bit_device_8bit_mode
0801a5c4 g       *ABS*	00000000 __ram_rwdata_end
0801a584 g     O .rwdata	00000008 alt_dev_list
080098a4 g     F .text	00000058 _fputc_r
0800eb28 g     F .text	00000120 write
0800b4a8 g     F .text	000000e8 _putc_r
08015168 g     F .text	0000039c alt_up_pixel_buffer_dma_draw_line
08002b0c g     F .text	00000078 __gtsf2
0801a5a4 g     O .rwdata	00000008 alt_mutex_list
080186fc g       *ABS*	00000000 __ram_rodata_end
0800e08c g     F .text	000000d4 fstat
08010ca8 g     F .text	000000dc alt_check_primary_table
0800b164 g     F .text	00000120 __pow5mult
0801c4b4 g     O .bss	00000004 __nlocale_changed
08002fe8 g     F .text	00000008 __umodsi3
0800f498 g     F .text	00000068 alt_flash_cfi_read
0800fbdc g     F .text	00000034 alt_write_native_8bit
0801c790 g       *ABS*	00000000 end
08003108 g     F .text	00000160 __pack_f
0800fa44 g     F .text	0000007c alt_write_flash_command_16bit_device_8bit_mode
08012004 g     F .text	0000050c altera_avalon_lcd_16207_write
08013c94 g     F .text	00000084 alt_up_char_buffer_init
080042b4 g     F .text	00000024 fseek
0800ff7c g     F .text	00000580 alt_read_cfi_table
08010ecc g     F .text	000000c0 altera_avalon_jtag_uart_init
080172e8 g       *ABS*	00000000 __CTOR_LIST__
08400000 g       *ABS*	00000000 __alt_stack_pointer
08003088 g     F .text	00000080 __clzsi2
080115f0 g     F .text	00000240 altera_avalon_jtag_uart_write
08012770 g     F .text	00000158 alt_avalon_mailbox_init
0800f074 g     F .text	0000009c alt_flash_cfi_init
08009538 g     F .text	00000004 __sfp_lock_acquire
0800a154 g     F .text	000000e4 memchr
080059f0 g     F .text	00001eac ___vfprintf_internal_r
10800000 g       *ABS*	00000000 __alt_mem_cfi_flash_0
08003b64 g     F .text	00000314 _free_r
0801706c g     F .text	000001b0 __call_exitprocs
0801c4b8 g     O .bss	00000004 __mlocale_changed
0801a570 g     O .rwdata	00000004 __malloc_sbrk_base
080001b4 g     F .text	0000004c _start
0801c4d0 g     O .bss	00000004 _alt_tick_rate
08005990 g     F .text	00000008 _user_strerror
0800acf4 g     F .text	0000014c __lshift
0801c4d4 g     O .bss	00000004 _alt_nticks
0800e88c g     F .text	00000120 read
0800ecdc g     F .text	00000360 alt_sys_init
08002cec g     F .text	00000098 __floatsisf
08004ce8 g     F .text	00000078 _open_r
08016f34 g     F .text	00000134 __register_exitproc
08016e44 g     F .text	000000f0 strncmp
08012e6c g     F .text	0000005c altera_avalon_mutex_unlock
0800f97c g     F .text	00000044 alt_read_query_entry_16bit
0800ae40 g     F .text	000001e8 __multiply
08011264 g     F .text	00000074 altera_avalon_jtag_uart_close
080186fc g       *ABS*	00000000 __ram_rwdata_start
080172ec g       *ABS*	00000000 __ram_rodata_start
0801c4d8 g     O .bss	00000028 __malloc_current_mallinfo
00004000 g       *ABS*	00000000 __alt_mem_onchip_memory2_1
08002a94 g     F .text	00000078 __eqsf2
0800fc74 g     F .text	000001e0 alt_set_flash_width_func
0800a9ec g     F .text	0000017c __d2b
08010d84 g     F .text	00000058 altera_avalon_jtag_uart_read_fd
08015c04 g     F .text	000000b8 alt_get_fd
08016ba8 g     F .text	0000014c alt_busy_sleep
0800de3c g     F .text	000000c8 __fpcmp_parts_d
08007a74 g     F .text	00000070 _close_r
08016350 g     F .text	00000218 alt_erase_block_amd
08012f9c g     F .text	000000b0 perf_get_section_time
08016dd0 g     F .text	00000074 memcmp
08010e34 g     F .text	00000048 altera_avalon_jtag_uart_close_fd
0801c494 g     O .bss	00000004 col
0801c790 g       *ABS*	00000000 __alt_stack_base
08010e7c g     F .text	00000050 altera_avalon_jtag_uart_ioctl_fd
08007938 g     F .text	0000013c __swsetup_r
080104fc g     F .text	000007ac alt_read_cfi_width
0800d4a0 g     F .text	00000258 __divdf3
080096b0 g     F .text	000000f0 __sfp
0800a850 g     F .text	00000058 __copybits
0801304c g     F .text	00000054 perf_get_total_time
08018bfc g     O .rwdata	00000408 __malloc_av_
08009544 g     F .text	00000004 __sinit_lock_release
0800d0dc g     F .text	000003c4 __muldf3
08005248 g     F .text	00000060 __sread
08017850 g     O .rodata	00000010 __thenan_sf
080039f8 g     F .text	00000040 fread
08015984 g     F .text	00000120 alt_find_file
08015714 g     F .text	000000b4 alt_dev_llist_insert
0800e588 g     F .text	00000020 __malloc_lock
0800ea6c g     F .text	000000bc sbrk
08002498 g     F .text	0000014c scalbnf
080092b0 g     F .text	000001fc _fflush_r
0800be74 g     F .text	000000b4 _calloc_r
0801a5ac g     O .rwdata	00000008 alt_flash_dev_list
0800fb08 g     F .text	00000044 alt_write_flash_command_16bit_device_16bit_mode
080186fc g     O .rwdata	00000100 __divsi3_table
080037e0 g     F .text	0000001c fopen
0801c48c g       *ABS*	00000000 __bss_start
0800a318 g     F .text	00000098 memset
08000200 g     F .text	00000bb0 main
0801c4c8 g     O .bss	00000004 alt_envp
0801c4b0 g     O .bss	00000004 __malloc_max_total_mem
080141d0 g     F .text	00000058 alt_up_pixel_buffer_dma_swap_buffers
08013d18 g     F .text	00000040 alt_up_char_buffer_open_dev
08010ddc g     F .text	00000058 altera_avalon_jtag_uart_write_fd
0800be58 g     F .text	0000001c __swbuf
0801c498 g     O .bss	00000004 rcount
08002bfc g     F .text	00000078 __ltsf2
080037fc g     F .text	000001fc _fread_r
080125dc g     F .text	0000013c altera_avalon_lcd_16207_init
0800515c g     F .text	00000008 __sclose
08400000 g       *ABS*	00000000 __alt_heap_limit
0800c038 g     F .text	00000014 fclose
0801c600 g     O .bss	00000190 _atexit0
08012dec g     F .text	00000040 altera_avalon_mutex_lock
08007cfc g     F .text	000015b4 _dtoa_r
08004508 g     F .text	00000740 _malloc_r
0801a590 g     O .rwdata	00000004 alt_errno
0800fb94 g     F .text	00000048 alt_write_flash_command_32bit_device_32bit_mode
08009ef0 g     F .text	000000b8 _fwalk
0800f500 g     F .text	00000164 alt_write_value_to_flash
0800fc10 g     F .text	00000034 alt_write_native_16bit
0800b3a4 g     F .text	00000104 putc
08002f20 g     F .text	00000060 __divsi3
08013988 g     F .text	000000fc alt_ro_zipfs_read
08018300 g     O .rodata	00000014 __thenan_df
08003a38 g     F .text	0000012c _malloc_trim_r
080172ec g       *ABS*	00000000 __CTOR_END__
080028b4 g     F .text	000001e0 __mulsf3
08013c3c g     F .text	00000058 alt_ro_zipfs_check_valid
0800bc6c g     F .text	000000bc strcmp
080172ec g       *ABS*	00000000 __flash_rodata_start
080172ec g       *ABS*	00000000 __DTOR_LIST__
0800d780 g     F .text	00000088 __nedf2
08013bcc g     F .text	00000070 alt_ro_zipfs_fstat
11000000 g       *ABS*	00000000 __alt_mem_sram_0
0800eca8 g     F .text	00000034 alt_irq_init
0800ea0c g     F .text	00000060 alt_release_fd
080025e4 g     F .text	00000018 copysignf
08017860 g     O .rodata	00000100 __clz_tab
0801c4bc g     O .bss	00000004 _PathLocale
08016d84 g     F .text	00000014 atexit
0801c49c g     O .bss	00000004 my_pixel_buffer
08002b84 g     F .text	00000078 __gesf2
080078c0 g     F .text	00000078 _write_r
0800a0c0 g     F .text	0000001c setlocale
0801a564 g     O .rwdata	00000004 _impure_ptr
0801c4c0 g     O .bss	00000004 alt_argc
0801588c g     F .text	00000064 _do_dtors
08003e78 g     F .text	0000043c _fseek_r
08004f0c g     F .text	000001c4 __srefill_r
08000000 g       *ABS*	00000000 __alt_mem_sdram_0
08000020 g       .exceptions	00000000 alt_irq_entry
0800a56c g     F .text	00000080 __ulp
0800bbfc g     F .text	00000040 __isinfd
080095fc g     F .text	00000018 __fp_unlock_all
08012718 g     F .text	00000058 altera_avalon_lcd_16207_write_fd
0801a59c g     O .rwdata	00000008 alt_mailbox_list
08009840 g     F .text	00000064 fputc
0801a554 g     O .rwdata	00000004 num_rows
0801a57c g     O .rwdata	00000008 alt_fs_list
08000f84 g     F .text	000000c0 sinf
0800fac0 g     F .text	00000048 alt_write_flash_command_32bit_device_8bit_mode
08000020 g       *ABS*	00000000 __ram_exceptions_start
0800a02c g     F .text	00000010 localeconv
08015cec g     F .text	00000050 alt_ic_isr_register
0801a5c4 g       *ABS*	00000000 _edata
0801c790 g       *ABS*	00000000 _end
08015aa4 g     F .text	0000007c alt_flash_open_dev
080001b4 g       *ABS*	00000000 __ram_exceptions_end
080112d8 g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
080098fc g     F .text	00000074 _fputs_r
08015dd8 g     F .text	000000a0 alt_ic_irq_disable
080051cc g     F .text	0000007c __swrite
0801a56c g     O .rwdata	00000004 __malloc_trim_threshold
080130e0 g     F .text	00000020 alt_get_performance_counter_base
08004d60 g     F .text	0000006c _perror_r
08016d98 g     F .text	00000038 exit
08009e28 g     F .text	000000c8 _fwalk_reent
0800ab68 g     F .text	0000018c __mdiff
08015b20 g     F .text	00000054 alt_flash_close_dev
08002f80 g     F .text	00000060 __modsi3
08400000 g       *ABS*	00000000 __alt_data_end
08000020 g     F .exceptions	00000000 alt_exception
0800953c g     F .text	00000004 __sfp_lock_release
0801a55c g     O .rwdata	00000004 shift_amt
08018478 g     O .rodata	00000101 _ctype_
08012994 g     F .text	00000058 altera_avalon_mailbox_open
08003330 g     F .text	000000a8 __fpcmp_parts_f
080036ec g     F .text	000000f4 _fopen_r
0801725c g     F .text	00000020 _exit
0800bc3c g     F .text	00000030 __isnand
0800183c g     F .text	00000a90 __kernel_rem_pio2f
08015504 g     F .text	00000154 alt_alarm_start
08002ff0 g     F .text	00000098 __muldi3
0800434c g     F .text	00000194 __smakebuf_r
0800fc44 g     F .text	00000030 alt_write_native_32bit
0800591c g     F .text	00000074 strlen
0800e6a4 g     F .text	00000188 open
0800d890 g     F .text	00000088 __gedf2
0800f408 g     F .text	00000090 alt_flash_cfi_get_info
08015cbc g     F .text	00000030 alt_icache_flush_all
08000e70 g     F .text	00000114 floorf
08009970 g     F .text	0000001c fputs
0801a5b4 g     O .rwdata	00000004 alt_priority_mask
0801a558 g     O .rwdata	00000004 num_cols
08015d3c g     F .text	0000009c alt_ic_irq_enable
0800789c g     F .text	00000024 __vfprintf_internal
08012dcc g     F .text	00000020 altera_avalon_mutex_close
0800cfe8 g     F .text	00000080 __subdf3
0800a448 g     F .text	000000c4 __lo0bits
0801a5b8 g     O .rwdata	00000008 alt_alarm_list
08015828 g     F .text	00000064 _do_ctors
0800df04 g     F .text	000000fc close
08002850 g     F .text	00000064 __addsf3
080162e8 g     F .text	00000068 alt_program_amd
0800e2e0 g     F .text	00000080 alt_load
0801c4a0 g     O .bss	00000004 row
080033d8 g     F .text	00000314 __pack_d
080044e0 g     F .text	00000014 free
08009540 g     F .text	00000004 __sinit_lock_acquire
0800b064 g     F .text	00000100 __multadd
0800a3b0 g     F .text	00000028 _Bfree
08013398 g     F .text	0000012c check_directory_header



Disassembly of section .entry:

08000000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && !defined(ALT_SIM_OPTIMIZE)
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
 8000000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
 8000004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
 8000008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
 800000c:	00bffd16 	blt	zero,r2,8000004 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 8000010:	00420034 	movhi	at,2048
    ori r1, r1, %lo(_start)
 8000014:	08406d14 	ori	at,at,436
    jmp r1
 8000018:	0800683a 	jmp	at
 800001c:	00000000 	call	0 <__alt_mem_onchip_memory2_0-0x3000>

Disassembly of section .exceptions:

08000020 <alt_exception>:
         * Process an exception.  For all exceptions we must preserve all
         * caller saved registers on the stack (See the Nios2 ABI
         * documentation for details).
         */

        addi  sp, sp, -76
 8000020:	deffed04 	addi	sp,sp,-76

#endif

#endif

        stw   ra,  0(sp)
 8000024:	dfc00015 	stw	ra,0(sp)
        /*
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */

        stw   r1,   8(sp)
 8000028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 800002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 8000030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 8000034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 8000038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 800003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 8000040:	d9c00815 	stw	r7,32(sp)

        rdctl r5, estatus
 8000044:	000b307a 	rdctl	r5,estatus

        stw   r8,  36(sp)
 8000048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 800004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 8000050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 8000054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 8000058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 800005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 8000060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 8000064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 8000068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 800006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 8000070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 8000074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 8000078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 800007c:	10000326 	beq	r2,zero,800008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 8000080:	20000226 	beq	r4,zero,800008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 8000084:	80000ec0 	call	80000ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 8000088:	00000306 	br	8000098 <alt_exception+0x78>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
 800008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
 8000090:	e8bfff17 	ldw	r2,-4(ea)
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
 8000094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 8000098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 800009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 80000a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 80000a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 80000a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 80000ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 80000b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 80000b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 80000b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 80000bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 80000c0:	d9c00817 	ldw	r7,32(sp)
#ifdef ALT_STACK_CHECK
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif
#endif

        ldw   r8,  36(sp)
 80000c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 80000c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 80000cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 80000d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 80000d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 80000d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 80000dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 80000e0:	dbc01017 	ldw	r15,64(sp)
#endif

        ldw   sp,  76(sp)

#else
        addi  sp, sp, 76
 80000e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 80000e8:	ef80083a 	eret

080000ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 80000ec:	defff904 	addi	sp,sp,-28
 80000f0:	dfc00615 	stw	ra,24(sp)
 80000f4:	df000515 	stw	fp,20(sp)
 80000f8:	df000504 	addi	fp,sp,20
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 80000fc:	0005313a 	rdctl	r2,ipending
 8000100:	e0bffc15 	stw	r2,-16(fp)

  return active;
 8000104:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 8000108:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
 800010c:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 8000110:	00800044 	movi	r2,1
 8000114:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 8000118:	e0ffff17 	ldw	r3,-4(fp)
 800011c:	e0bffe17 	ldw	r2,-8(fp)
 8000120:	1884703a 	and	r2,r3,r2
 8000124:	1005003a 	cmpeq	r2,r2,zero
 8000128:	1000161e 	bne	r2,zero,8000184 <alt_irq_handler+0x98>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 800012c:	e0bffd17 	ldw	r2,-12(fp)
 8000130:	00c200b4 	movhi	r3,2050
 8000134:	18f14004 	addi	r3,r3,-15104
 8000138:	100490fa 	slli	r2,r2,3
 800013c:	10c5883a 	add	r2,r2,r3
 8000140:	11400017 	ldw	r5,0(r2)
 8000144:	e0bffd17 	ldw	r2,-12(fp)
 8000148:	00c200b4 	movhi	r3,2050
 800014c:	18f14004 	addi	r3,r3,-15104
 8000150:	100490fa 	slli	r2,r2,3
 8000154:	10c5883a 	add	r2,r2,r3
 8000158:	10800104 	addi	r2,r2,4
 800015c:	11000017 	ldw	r4,0(r2)
 8000160:	283ee83a 	callr	r5
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 8000164:	0005313a 	rdctl	r2,ipending
 8000168:	e0bffb15 	stw	r2,-20(fp)

  return active;
 800016c:	e0bffb17 	ldw	r2,-20(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
 8000170:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
 8000174:	e0bfff17 	ldw	r2,-4(fp)
 8000178:	1004c03a 	cmpne	r2,r2,zero
 800017c:	103fe31e 	bne	r2,zero,800010c <alt_irq_handler+0x20>
 8000180:	00000706 	br	80001a0 <alt_irq_handler+0xb4>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
 8000184:	e0bffe17 	ldw	r2,-8(fp)
 8000188:	1085883a 	add	r2,r2,r2
 800018c:	e0bffe15 	stw	r2,-8(fp)
      i++;
 8000190:	e0bffd17 	ldw	r2,-12(fp)
 8000194:	10800044 	addi	r2,r2,1
 8000198:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 800019c:	003fde06 	br	8000118 <alt_irq_handler+0x2c>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
 80001a0:	e037883a 	mov	sp,fp
 80001a4:	dfc00117 	ldw	ra,4(sp)
 80001a8:	df000017 	ldw	fp,0(sp)
 80001ac:	dec00204 	addi	sp,sp,8
 80001b0:	f800283a 	ret

Disassembly of section .text:

080001b4 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
 80001b4:	00840014 	movui	r2,4096
#endif

0:
    initd 0(r2)
 80001b8:	10000033 	initd	0(r2)
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
 80001bc:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
 80001c0:	00bffd16 	blt	zero,r2,80001b8 <_start+0x4>
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 80001c4:	06c21034 	movhi	sp,2112
    ori sp, sp, %lo(__alt_stack_pointer)
 80001c8:	dec00014 	ori	sp,sp,0

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
 80001cc:	068200b4 	movhi	gp,2050
    ori gp, gp, %lo(_gp)
 80001d0:	d6895514 	ori	gp,gp,9556
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 80001d4:	00820074 	movhi	r2,2049
    ori r2, r2, %lo(__bss_start)
 80001d8:	10b12314 	ori	r2,r2,50316

    movhi r3, %hi(__bss_end)
 80001dc:	00c20074 	movhi	r3,2049
    ori r3, r3, %lo(__bss_end)
 80001e0:	18f1e414 	ori	r3,r3,51088

    beq r2, r3, 1f
 80001e4:	10c00326 	beq	r2,r3,80001f4 <_start+0x40>

0:
    stw zero, (r2)
 80001e8:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 80001ec:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 80001f0:	10fffd36 	bltu	r2,r3,80001e8 <_start+0x34>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 80001f4:	800e2e00 	call	800e2e0 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 80001f8:	800e51c0 	call	800e51c <alt_main>

080001fc <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 80001fc:	003fff06 	br	80001fc <alt_after_alt_main>

08000200 <main>:
int rcount;
int bool_dec;
float scount;

int main()
{
 8000200:	deffdc04 	addi	sp,sp,-144

	// open the .dat file
	FILE *myfile;
	//myfile = fopen("my_fs/myfile.dat","rb");
	myfile=fopen("my_fs/myfile.dat","rb");
 8000204:	01020074 	movhi	r4,2049
 8000208:	211cbb04 	addi	r4,r4,29420
 800020c:	01420074 	movhi	r5,2049
 8000210:	295cc004 	addi	r5,r5,29440
int rcount;
int bool_dec;
float scount;

int main()
{
 8000214:	dc001a15 	stw	r16,104(sp)
 8000218:	dfc02315 	stw	ra,140(sp)
 800021c:	df002215 	stw	fp,136(sp)
 8000220:	ddc02115 	stw	r23,132(sp)
 8000224:	dd802015 	stw	r22,128(sp)
 8000228:	dd401f15 	stw	r21,124(sp)
 800022c:	dd001e15 	stw	r20,120(sp)
 8000230:	dcc01d15 	stw	r19,116(sp)
 8000234:	dc801c15 	stw	r18,112(sp)
 8000238:	dc401b15 	stw	r17,108(sp)

	// open the .dat file
	FILE *myfile;
	//myfile = fopen("my_fs/myfile.dat","rb");
	myfile=fopen("my_fs/myfile.dat","rb");
 800023c:	80037e00 	call	80037e0 <fopen>
 8000240:	1021883a 	mov	r16,r2
	if(myfile==NULL) perror ("error opening datafile");
 8000244:	1000031e 	bne	r2,zero,8000254 <main+0x54>
 8000248:	01020074 	movhi	r4,2049
 800024c:	211cc104 	addi	r4,r4,29444
 8000250:	8004dcc0 	call	8004dcc <perror>

	alt_u32 keys;
	alt_u32 current_value = 1;
	alt_u32 current_state = 3;
	alt_u8 *my_image;
	my_image = (alt_u8 *)malloc(320*240*3);
 8000254:	01000134 	movhi	r4,4
 8000258:	21210004 	addi	r4,r4,-31744
 800025c:	80044f40 	call	80044f4 <malloc>
	fread(my_image,sizeof(alt_u8),320*240*3,myfile);
 8000260:	800f883a 	mov	r7,r16
 8000264:	01400044 	movi	r5,1
 8000268:	01800134 	movhi	r6,4
 800026c:	31a10004 	addi	r6,r6,-31744
 8000270:	1009883a 	mov	r4,r2

	alt_u32 keys;
	alt_u32 current_value = 1;
	alt_u32 current_state = 3;
	alt_u8 *my_image;
	my_image = (alt_u8 *)malloc(320*240*3);
 8000274:	d8800915 	stw	r2,36(sp)
	fread(my_image,sizeof(alt_u8),320*240*3,myfile);
 8000278:	80039f80 	call	80039f8 <fread>
	//declaring mailboxes
	alt_u32 message = 0;
	alt_mailbox_dev* mailbox_0;
	alt_mailbox_dev* mailbox_1;

	mailbox_0 = altera_avalon_mailbox_open("/dev/mailbox_0");
 800027c:	01020074 	movhi	r4,2049
 8000280:	211cc704 	addi	r4,r4,29468
 8000284:	80129940 	call	8012994 <altera_avalon_mailbox_open>
	mailbox_1 = altera_avalon_mailbox_open("/dev/mailbox_1");
 8000288:	01020074 	movhi	r4,2049
 800028c:	211ccb04 	addi	r4,r4,29484
	//declaring mailboxes
	alt_u32 message = 0;
	alt_mailbox_dev* mailbox_0;
	alt_mailbox_dev* mailbox_1;

	mailbox_0 = altera_avalon_mailbox_open("/dev/mailbox_0");
 8000290:	d8801215 	stw	r2,72(sp)
	mailbox_1 = altera_avalon_mailbox_open("/dev/mailbox_1");
 8000294:	80129940 	call	8012994 <altera_avalon_mailbox_open>
 8000298:	d8801115 	stw	r2,68(sp)

	int cpuid = __builtin_rdctl(5);
 800029c:	0005317a 	rdctl	r2,cpuid
*/

	//pixel buffer

	//alt_up_pixel_buffer_dma_dev *my_pixel_buffer; //declare global var
	my_pixel_buffer=alt_up_pixel_buffer_dma_open_dev("/dev/video_pixel_buffer_dma_0"); //assign it
 80002a0:	01020074 	movhi	r4,2049
 80002a4:	211ccf04 	addi	r4,r4,29500
	alt_mailbox_dev* mailbox_1;

	mailbox_0 = altera_avalon_mailbox_open("/dev/mailbox_0");
	mailbox_1 = altera_avalon_mailbox_open("/dev/mailbox_1");

	int cpuid = __builtin_rdctl(5);
 80002a8:	d8801015 	stw	r2,64(sp)
*/

	//pixel buffer

	//alt_up_pixel_buffer_dma_dev *my_pixel_buffer; //declare global var
	my_pixel_buffer=alt_up_pixel_buffer_dma_open_dev("/dev/video_pixel_buffer_dma_0"); //assign it
 80002ac:	8013f980 	call	8013f98 <alt_up_pixel_buffer_dma_open_dev>
	alt_up_pixel_buffer_dma_clear_screen(my_pixel_buffer,0);//clear_screen();
 80002b0:	1009883a 	mov	r4,r2
 80002b4:	000b883a 	mov	r5,zero
*/

	//pixel buffer

	//alt_up_pixel_buffer_dma_dev *my_pixel_buffer; //declare global var
	my_pixel_buffer=alt_up_pixel_buffer_dma_open_dev("/dev/video_pixel_buffer_dma_0"); //assign it
 80002b8:	d0a7d215 	stw	r2,-24760(gp)
	alt_up_pixel_buffer_dma_clear_screen(my_pixel_buffer,0);//clear_screen();
 80002bc:	801425c0 	call	801425c <alt_up_pixel_buffer_dma_clear_screen>

	//character buffer
	alt_up_char_buffer_dev *my_char_buffer; //declare global var
	my_char_buffer = alt_up_char_buffer_open_dev("/dev/video_character_buffer_with_dma_0");
 80002c0:	01020074 	movhi	r4,2049
 80002c4:	211cd704 	addi	r4,r4,29532
 80002c8:	8013d180 	call	8013d18 <alt_up_char_buffer_open_dev>
 80002cc:	d8800f15 	stw	r2,60(sp)
	if(!my_char_buffer) printf ("error opening character buffer\n");
 80002d0:	1000031e 	bne	r2,zero,80002e0 <main+0xe0>
 80002d4:	01020074 	movhi	r4,2049
 80002d8:	211ce104 	addi	r4,r4,29572
 80002dc:	8004ef80 	call	8004ef8 <puts>
	alt_up_char_buffer_clear(my_char_buffer);
 80002e0:	d9000f17 	ldw	r4,60(sp)
 80002e4:	8013f3c0 	call	8013f3c <alt_up_char_buffer_clear>
 80002e8:	d9401017 	ldw	r5,64(sp)
 80002ec:	00c000c4 	movi	r3,3
 80002f0:	d8c01315 	stw	r3,76(sp)
 80002f4:	280ac03a 	cmpne	r5,r5,zero
 80002f8:	d9401715 	stw	r5,92(sp)

	//write_text("Video works!");

	while (1) {
	keys=IORD_ALTERA_AVALON_PIO_DATA(KEYS_BASE);
 80002fc:	00844834 	movhi	r2,4384
 8000300:	10940404 	addi	r2,r2,20496
 8000304:	14000037 	ldwio	r16,0(r2)

	// detect key press
	if ((keys != 7) && (keys != current_state)) {
 8000308:	00c001c4 	movi	r3,7
 800030c:	80c0d526 	beq	r16,r3,8000664 <main+0x464>
 8000310:	d8801317 	ldw	r2,76(sp)
 8000314:	1400d326 	beq	r2,r16,8000664 <main+0x464>
		alt_up_pixel_buffer_dma_clear_screen(my_pixel_buffer,0);
 8000318:	d127d217 	ldw	r4,-24760(gp)
 800031c:	000b883a 	mov	r5,zero
 8000320:	801425c0 	call	801425c <alt_up_pixel_buffer_dma_clear_screen>
		if (keys == 3)  printf("key 3 pressed\n");
 8000324:	008000c4 	movi	r2,3
 8000328:	80812226 	beq	r16,r2,80007b4 <main+0x5b4>
		else if (keys == 5) {
 800032c:	00800144 	movi	r2,5
 8000330:	80811826 	beq	r16,r2,8000794 <main+0x594>
			rcount = 10;
			alt_up_char_buffer_clear(my_char_buffer);
			printf("key 2 pressed\n");
		}

		else if (keys == 6) {
 8000334:	00800184 	movi	r2,6
 8000338:	80812526 	beq	r16,r2,80007d0 <main+0x5d0>
			} else if(bool_dec == 0) {
				scount-=0.1f;
				printf("scount is incrementing to:");
				printf("%f\n", scount);
				if (scount <=1.0f) {
					bool_dec = 1;
 800033c:	dc001315 	stw	r16,76(sp)
 8000340:	8007883a 	mov	r3,r16
		}
	}

	// Continuously rotate the image clockwise; 10 degree increments
	// As fast as the processor can handle
	else if (current_state == 5) {
 8000344:	00800144 	movi	r2,5
 8000348:	1880f026 	beq	r3,r2,800070c <main+0x50c>
	}

	// Shrink the image in 10% increments until it is 10% of the original
	// Grow the image back to original size
	// Repeat as fast as the processor can handle
	else if (current_state == 6) {
 800034c:	00800184 	movi	r2,6
 8000350:	18bfea1e 	bne	r3,r2,80002fc <main+0xfc>
		//shrinking: only execute on cpu0
		if(cpuid == 0){
 8000354:	d9401717 	ldw	r5,92(sp)
 8000358:	283fe81e 	bne	r5,zero,80002fc <main+0xfc>
			alt_up_pixel_buffer_dma_clear_screen(my_pixel_buffer,0);
 800035c:	d127d217 	ldw	r4,-24760(gp)
			printf("scount before drawing is:");
			printf("%f\n", scount);
 8000360:	d8000c15 	stw	zero,48(sp)
	// Grow the image back to original size
	// Repeat as fast as the processor can handle
	else if (current_state == 6) {
		//shrinking: only execute on cpu0
		if(cpuid == 0){
			alt_up_pixel_buffer_dma_clear_screen(my_pixel_buffer,0);
 8000364:	801425c0 	call	801425c <alt_up_pixel_buffer_dma_clear_screen>
			printf("scount before drawing is:");
 8000368:	01020074 	movhi	r4,2049
 800036c:	211d0a04 	addi	r4,r4,29736
 8000370:	8004de00 	call	8004de0 <printf>
			printf("%f\n", scount);
 8000374:	d127cf17 	ldw	r4,-24772(gp)
 8000378:	8002e180 	call	8002e18 <__extendsfdf2>
 800037c:	180d883a 	mov	r6,r3
 8000380:	01020074 	movhi	r4,2049
 8000384:	211d1104 	addi	r4,r4,29764
 8000388:	100b883a 	mov	r5,r2
 800038c:	8004de00 	call	8004de0 <printf>
			int i, j;
			for(i=0; i<num_rows-1; i++){
			//break if key press
			keys=IORD_ALTERA_AVALON_PIO_DATA(KEYS_BASE);
 8000390:	00844834 	movhi	r2,4384
 8000394:	10940404 	addi	r2,r2,20496
 8000398:	10c00037 	ldwio	r3,0(r2)
				if (keys != 7 && keys != 6) {
 800039c:	00800044 	movi	r2,1
 80003a0:	18fffe84 	addi	r3,r3,-6
 80003a4:	10c09236 	bltu	r2,r3,80005f0 <main+0x3f0>
int rcount;
int bool_dec;
float scount;

int main()
{
 80003a8:	d8800c17 	ldw	r2,48(sp)
 80003ac:	0025883a 	mov	r18,zero
 80003b0:	113fe204 	addi	r4,r2,-120
 80003b4:	8002cec0 	call	8002cec <__floatsisf>
 80003b8:	d8800a15 	stw	r2,40(sp)
				for(j=0; j<num_cols-1; j++) {
					//center transformation
					int offset_i = i - num_rows/2;
					int offset_j = j - num_cols/2;
					//shrink/grow 10%
					row = offset_i*scount+num_rows/2;
 80003bc:	d9400a17 	ldw	r5,40(sp)
 80003c0:	d427cf17 	ldw	r16,-24772(gp)
 80003c4:	00d0bc34 	movhi	r3,17136
					col = offset_j*scount+num_cols/2;
 80003c8:	913fd804 	addi	r4,r18,-160
				for(j=0; j<num_cols-1; j++) {
					//center transformation
					int offset_i = i - num_rows/2;
					int offset_j = j - num_cols/2;
					//shrink/grow 10%
					row = offset_i*scount+num_rows/2;
 80003cc:	8145ff32 	custom	252,r2,r16,r5
 80003d0:	10e9ff72 	custom	253,r20,r2,r3
 80003d4:	d527d315 	stw	r20,-24756(gp)
					col = offset_j*scount+num_cols/2;
 80003d8:	8002cec0 	call	8002cec <__floatsisf>
 80003dc:	80a1ff32 	custom	252,r16,r16,r2
 80003e0:	0090c834 	movhi	r2,17184
 80003e4:	80a1ff72 	custom	253,r16,r16,r2

					if(col>num_cols || col<0 || row>num_rows || row<0) continue;
 80003e8:	8009883a 	mov	r4,r16
 80003ec:	0150e834 	movhi	r5,17312
					//center transformation
					int offset_i = i - num_rows/2;
					int offset_j = j - num_cols/2;
					//shrink/grow 10%
					row = offset_i*scount+num_rows/2;
					col = offset_j*scount+num_cols/2;
 80003f0:	d427d015 	stw	r16,-24768(gp)

					if(col>num_cols || col<0 || row>num_rows || row<0) continue;
 80003f4:	8002b0c0 	call	8002b0c <__gtsf2>
 80003f8:	00807516 	blt	zero,r2,80005d0 <main+0x3d0>
 80003fc:	8009883a 	mov	r4,r16
 8000400:	000b883a 	mov	r5,zero
 8000404:	8002bfc0 	call	8002bfc <__ltsf2>
 8000408:	10007116 	blt	r2,zero,80005d0 <main+0x3d0>
 800040c:	a009883a 	mov	r4,r20
 8000410:	0150dc34 	movhi	r5,17264
 8000414:	8002b0c0 	call	8002b0c <__gtsf2>
 8000418:	00806d16 	blt	zero,r2,80005d0 <main+0x3d0>
 800041c:	a009883a 	mov	r4,r20
 8000420:	000b883a 	mov	r5,zero
 8000424:	8002bfc0 	call	8002bfc <__ltsf2>
 8000428:	10006916 	blt	r2,zero,80005d0 <main+0x3d0>


					//interpolation: cut and pasted from above; should be put in a function
					int rowf = (int)floorf(row);
 800042c:	a009883a 	mov	r4,r20
 8000430:	8000e700 	call	8000e70 <floorf>
 8000434:	1009883a 	mov	r4,r2
 8000438:	8002d840 	call	8002d84 <__fixsfsi>
					int colf = (int)floorf(col);
 800043c:	8009883a 	mov	r4,r16

					if(col>num_cols || col<0 || row>num_rows || row<0) continue;


					//interpolation: cut and pasted from above; should be put in a function
					int rowf = (int)floorf(row);
 8000440:	1027883a 	mov	r19,r2
					int colf = (int)floorf(col);
 8000444:	8000e700 	call	8000e70 <floorf>
 8000448:	1009883a 	mov	r4,r2
 800044c:	8002d840 	call	8002d84 <__fixsfsi>
 8000450:	1023883a 	mov	r17,r2
					float rfrac = row-rowf;
 8000454:	9809883a 	mov	r4,r19
 8000458:	8002cec0 	call	8002cec <__floatsisf>
					float cfrac = col-colf;
 800045c:	8809883a 	mov	r4,r17


					//interpolation: cut and pasted from above; should be put in a function
					int rowf = (int)floorf(row);
					int colf = (int)floorf(col);
					float rfrac = row-rowf;
 8000460:	a0a9ffb2 	custom	254,r20,r20,r2
					float weight2 = rfrac*(1.0-cfrac);
					float weight3 = rfrac*cfrac;
					float weight4 = (1.0-rfrac)*cfrac;


					int pixel1 = (rowf*320*3 + colf*3);
 8000464:	9cc0f024 	muli	r19,r19,960

					//interpolation: cut and pasted from above; should be put in a function
					int rowf = (int)floorf(row);
					int colf = (int)floorf(col);
					float rfrac = row-rowf;
					float cfrac = col-colf;
 8000468:	8002cec0 	call	8002cec <__floatsisf>
					float weight2 = rfrac*(1.0-cfrac);
					float weight3 = rfrac*cfrac;
					float weight4 = (1.0-rfrac)*cfrac;


					int pixel1 = (rowf*320*3 + colf*3);
 800046c:	8c47883a 	add	r3,r17,r17
 8000470:	1c47883a 	add	r3,r3,r17
 8000474:	98e7883a 	add	r19,r19,r3
						weight4*my_image[pixel4]);

					int in2 = (int) (weight1*my_image[pixel1+1] +
						weight2*my_image[pixel2+1] +
						weight3*my_image[pixel3+1] +
						weight4*my_image[pixel4+1]);
 8000478:	d8c00917 	ldw	r3,36(sp)
 800047c:	d9400917 	ldw	r5,36(sp)

					//interpolation: cut and pasted from above; should be put in a function
					int rowf = (int)floorf(row);
					int colf = (int)floorf(col);
					float rfrac = row-rowf;
					float cfrac = col-colf;
 8000480:	8085ffb2 	custom	254,r2,r16,r2
						weight4*my_image[pixel4]);

					int in2 = (int) (weight1*my_image[pixel1+1] +
						weight2*my_image[pixel2+1] +
						weight3*my_image[pixel3+1] +
						weight4*my_image[pixel4+1]);
 8000484:	1cc7883a 	add	r3,r3,r19
 8000488:	d8c01415 	stw	r3,80(sp)
						weight2*my_image[pixel2+2] +
						weight3*my_image[pixel3+2] +
						weight4*my_image[pixel4+2]);

					//draw_pixel(row, col, my_image);
					alt_up_pixel_buffer_dma_draw(my_pixel_buffer,(in3 +(in2<<8) +(in1<<16)),j,i);
 800048c:	19000043 	ldbu	r4,1(r3)
					int colf = (int)floorf(col);
					float rfrac = row-rowf;
					float cfrac = col-colf;


					float weight1 = (1.0-rfrac)*(1.0-cfrac);
 8000490:	044fe034 	movhi	r17,16256
					float weight3 = rfrac*cfrac;
					float weight4 = (1.0-rfrac)*cfrac;


					int pixel1 = (rowf*320*3 + colf*3);
					int pixel2 = ((rowf + 1)*320*3 + colf*3);
 8000494:	98c0f004 	addi	r3,r19,960
						weight4*my_image[pixel4]);

					int in2 = (int) (weight1*my_image[pixel1+1] +
						weight2*my_image[pixel2+1] +
						weight3*my_image[pixel3+1] +
						weight4*my_image[pixel4+1]);
 8000498:	28f9883a 	add	fp,r5,r3
					int colf = (int)floorf(col);
					float rfrac = row-rowf;
					float cfrac = col-colf;


					float weight1 = (1.0-rfrac)*(1.0-cfrac);
 800049c:	8887ffb2 	custom	254,r3,r17,r2
 80004a0:	8d23ffb2 	custom	254,r17,r17,r20
					float weight2 = rfrac*(1.0-cfrac);
					float weight3 = rfrac*cfrac;
					float weight4 = (1.0-rfrac)*cfrac;
 80004a4:	144bff32 	custom	252,r5,r2,r17
					float rfrac = row-rowf;
					float cfrac = col-colf;


					float weight1 = (1.0-rfrac)*(1.0-cfrac);
					float weight2 = rfrac*(1.0-cfrac);
 80004a8:	a0edff32 	custom	252,r22,r20,r3
					float weight3 = rfrac*cfrac;
 80004ac:	a0a9ff32 	custom	252,r20,r20,r2
						weight4*my_image[pixel4]);

					int in2 = (int) (weight1*my_image[pixel1+1] +
						weight2*my_image[pixel2+1] +
						weight3*my_image[pixel3+1] +
						weight4*my_image[pixel4+1]);
 80004b0:	d8800917 	ldw	r2,36(sp)
					float weight4 = (1.0-rfrac)*cfrac;


					int pixel1 = (rowf*320*3 + colf*3);
					int pixel2 = ((rowf + 1)*320*3 + colf*3);
					int pixel3 = ((rowf + 1)*320*3 + (colf + 1)*3);
 80004b4:	9dc0f0c4 	addi	r23,r19,963
					int pixel4 = (rowf*320*3 + (colf + 1)*3);
 80004b8:	9cc000c4 	addi	r19,r19,3


					float weight1 = (1.0-rfrac)*(1.0-cfrac);
					float weight2 = rfrac*(1.0-cfrac);
					float weight3 = rfrac*cfrac;
					float weight4 = (1.0-rfrac)*cfrac;
 80004bc:	d9400b15 	stw	r5,44(sp)
					int colf = (int)floorf(col);
					float rfrac = row-rowf;
					float cfrac = col-colf;


					float weight1 = (1.0-rfrac)*(1.0-cfrac);
 80004c0:	88e3ff32 	custom	252,r17,r17,r3
						weight4*my_image[pixel4]);

					int in2 = (int) (weight1*my_image[pixel1+1] +
						weight2*my_image[pixel2+1] +
						weight3*my_image[pixel3+1] +
						weight4*my_image[pixel4+1]);
 80004c4:	15ef883a 	add	r23,r2,r23
 80004c8:	14e7883a 	add	r19,r2,r19
						weight2*my_image[pixel2+2] +
						weight3*my_image[pixel3+2] +
						weight4*my_image[pixel4+2]);

					//draw_pixel(row, col, my_image);
					alt_up_pixel_buffer_dma_draw(my_pixel_buffer,(in3 +(in2<<8) +(in1<<16)),j,i);
 80004cc:	8002cec0 	call	8002cec <__floatsisf>
 80004d0:	d0e7d217 	ldw	r3,-24760(gp)
 80004d4:	e1000043 	ldbu	r4,1(fp)
 80004d8:	88a1ff32 	custom	252,r16,r17,r2
 80004dc:	d8c01515 	stw	r3,84(sp)
 80004e0:	8002cec0 	call	8002cec <__floatsisf>
 80004e4:	b9000043 	ldbu	r4,1(r23)
 80004e8:	b085ff32 	custom	252,r2,r22,r2
 80004ec:	80a1ff72 	custom	253,r16,r16,r2
 80004f0:	8002cec0 	call	8002cec <__floatsisf>
 80004f4:	99000043 	ldbu	r4,1(r19)
 80004f8:	a085ff32 	custom	252,r2,r20,r2
 80004fc:	80a1ff72 	custom	253,r16,r16,r2
 8000500:	8002cec0 	call	8002cec <__floatsisf>
 8000504:	d9400b17 	ldw	r5,44(sp)
 8000508:	2885ff32 	custom	252,r2,r5,r2
 800050c:	8089ff72 	custom	253,r4,r16,r2
 8000510:	8002d840 	call	8002d84 <__fixsfsi>
 8000514:	d8c01417 	ldw	r3,80(sp)
 8000518:	1004923a 	slli	r2,r2,8
 800051c:	19000083 	ldbu	r4,2(r3)
 8000520:	d8801615 	stw	r2,88(sp)
 8000524:	8002cec0 	call	8002cec <__floatsisf>
 8000528:	e1000083 	ldbu	r4,2(fp)
 800052c:	88a1ff32 	custom	252,r16,r17,r2
 8000530:	8002cec0 	call	8002cec <__floatsisf>
 8000534:	b9000083 	ldbu	r4,2(r23)
 8000538:	b085ff32 	custom	252,r2,r22,r2
 800053c:	80a1ff72 	custom	253,r16,r16,r2
 8000540:	8002cec0 	call	8002cec <__floatsisf>
 8000544:	99000083 	ldbu	r4,2(r19)
 8000548:	a085ff32 	custom	252,r2,r20,r2
 800054c:	80a1ff72 	custom	253,r16,r16,r2
 8000550:	8002cec0 	call	8002cec <__floatsisf>
 8000554:	d9400b17 	ldw	r5,44(sp)
 8000558:	2885ff32 	custom	252,r2,r5,r2
 800055c:	8089ff72 	custom	253,r4,r16,r2
 8000560:	8002d840 	call	8002d84 <__fixsfsi>
 8000564:	102b883a 	mov	r21,r2
 8000568:	d8801417 	ldw	r2,80(sp)
 800056c:	11000003 	ldbu	r4,0(r2)
 8000570:	8002cec0 	call	8002cec <__floatsisf>
 8000574:	e1000003 	ldbu	r4,0(fp)
 8000578:	88a3ff32 	custom	252,r17,r17,r2
 800057c:	8002cec0 	call	8002cec <__floatsisf>
 8000580:	b9000003 	ldbu	r4,0(r23)
 8000584:	b0adff32 	custom	252,r22,r22,r2
 8000588:	8da3ff72 	custom	253,r17,r17,r22
 800058c:	8002cec0 	call	8002cec <__floatsisf>
 8000590:	99000003 	ldbu	r4,0(r19)
 8000594:	a0a9ff32 	custom	252,r20,r20,r2
 8000598:	8d23ff72 	custom	253,r17,r17,r20
 800059c:	8002cec0 	call	8002cec <__floatsisf>
 80005a0:	d8c00b17 	ldw	r3,44(sp)
 80005a4:	1885ff32 	custom	252,r2,r3,r2
 80005a8:	8889ff72 	custom	253,r4,r17,r2
 80005ac:	8002d840 	call	8002d84 <__fixsfsi>
 80005b0:	1004943a 	slli	r2,r2,16
 80005b4:	d9001517 	ldw	r4,84(sp)
 80005b8:	d9c00c17 	ldw	r7,48(sp)
 80005bc:	a8ab883a 	add	r21,r21,r2
 80005c0:	d8801617 	ldw	r2,88(sp)
 80005c4:	900d883a 	mov	r6,r18
 80005c8:	154b883a 	add	r5,r2,r21
 80005cc:	8013fd80 	call	8013fd8 <alt_up_pixel_buffer_dma_draw>
			//break if key press
			keys=IORD_ALTERA_AVALON_PIO_DATA(KEYS_BASE);
				if (keys != 7 && keys != 6) {
					break;
				}
				for(j=0; j<num_cols-1; j++) {
 80005d0:	94800044 	addi	r18,r18,1
 80005d4:	00804fc4 	movi	r2,319
 80005d8:	90bf781e 	bne	r18,r2,80003bc <main+0x1bc>
		if(cpuid == 0){
			alt_up_pixel_buffer_dma_clear_screen(my_pixel_buffer,0);
			printf("scount before drawing is:");
			printf("%f\n", scount);
			int i, j;
			for(i=0; i<num_rows-1; i++){
 80005dc:	d8c00c17 	ldw	r3,48(sp)
 80005e0:	00803bc4 	movi	r2,239
 80005e4:	18c00044 	addi	r3,r3,1
 80005e8:	d8c00c15 	stw	r3,48(sp)
 80005ec:	18bf681e 	bne	r3,r2,8000390 <main+0x190>

					//draw_pixel(row, col, my_image);
					alt_up_pixel_buffer_dma_draw(my_pixel_buffer,(in3 +(in2<<8) +(in1<<16)),j,i);
				}
			}
			if(bool_dec == 1) {
 80005f0:	d0a7ce17 	ldw	r2,-24776(gp)
 80005f4:	04000044 	movi	r16,1
 80005f8:	1401d326 	beq	r2,r16,8000d48 <main+0xb48>
				printf("scount is decrementing to:");
				printf("%f\n", scount);
				if (scount >=1.9f) {
					bool_dec = 0;
				}
			} else if(bool_dec == 0) {
 80005fc:	103f3f1e 	bne	r2,zero,80002fc <main+0xfc>
				scount-=0.1f;
 8000600:	d0a7cf17 	ldw	r2,-24772(gp)
 8000604:	00cf7374 	movhi	r3,15821
 8000608:	18f33344 	addi	r3,r3,-13107
				printf("scount is incrementing to:");
 800060c:	01020074 	movhi	r4,2049
 8000610:	211d1904 	addi	r4,r4,29796
				printf("%f\n", scount);
				if (scount >=1.9f) {
					bool_dec = 0;
				}
			} else if(bool_dec == 0) {
				scount-=0.1f;
 8000614:	10c5ffb2 	custom	254,r2,r2,r3
 8000618:	d0a7cf15 	stw	r2,-24772(gp)
				printf("scount is incrementing to:");
 800061c:	8004de00 	call	8004de0 <printf>
				printf("%f\n", scount);
 8000620:	d127cf17 	ldw	r4,-24772(gp)
 8000624:	8002e180 	call	8002e18 <__extendsfdf2>
 8000628:	100b883a 	mov	r5,r2
 800062c:	01020074 	movhi	r4,2049
 8000630:	211d1104 	addi	r4,r4,29764
 8000634:	180d883a 	mov	r6,r3
 8000638:	8004de00 	call	8004de0 <printf>
				if (scount <=1.0f) {
 800063c:	d127cf17 	ldw	r4,-24772(gp)
 8000640:	014fe034 	movhi	r5,16256
 8000644:	8002c740 	call	8002c74 <__lesf2>
 8000648:	00bf2c16 	blt	zero,r2,80002fc <main+0xfc>
					bool_dec = 1;
 800064c:	d427ce15 	stw	r16,-24776(gp)
	alt_up_char_buffer_clear(my_char_buffer);

	//write_text("Video works!");

	while (1) {
	keys=IORD_ALTERA_AVALON_PIO_DATA(KEYS_BASE);
 8000650:	00844834 	movhi	r2,4384
 8000654:	10940404 	addi	r2,r2,20496
 8000658:	14000037 	ldwio	r16,0(r2)

	// detect key press
	if ((keys != 7) && (keys != current_state)) {
 800065c:	00c001c4 	movi	r3,7
 8000660:	80ff2b1e 	bne	r16,r3,8000310 <main+0x110>
		}
		current_state=keys;
	}

	//default state: display image and text
	if (current_state == 3) {
 8000664:	d8c01317 	ldw	r3,76(sp)
 8000668:	008000c4 	movi	r2,3
 800066c:	18bf351e 	bne	r3,r2,8000344 <main+0x144>

		// only run this part on CPU 0
		if(cpuid == 0){
 8000670:	d9401717 	ldw	r5,92(sp)
 8000674:	283f211e 	bne	r5,zero,80002fc <main+0xfc>
			// Display the unaltered image to the VGA
			alt_up_char_buffer_string(my_char_buffer, "Original Image!",0,59);
 8000678:	d9000f17 	ldw	r4,60(sp)
 800067c:	01420074 	movhi	r5,2049
 8000680:	295cf504 	addi	r5,r5,29652
 8000684:	000d883a 	mov	r6,zero
 8000688:	01c00ec4 	movi	r7,59
 800068c:	8013e280 	call	8013e28 <alt_up_char_buffer_string>
 8000690:	dd000917 	ldw	r20,36(sp)
 8000694:	0025883a 	mov	r18,zero
			int i, j;

			for(i=0; i<239; i++){
				//break if key press
				keys = keys=IORD_ALTERA_AVALON_PIO_DATA(KEYS_BASE);
 8000698:	00844834 	movhi	r2,4384
 800069c:	10940404 	addi	r2,r2,20496
 80006a0:	11000037 	ldwio	r4,0(r2)
				if (keys != 7 && keys != 3) {
 80006a4:	00c001c4 	movi	r3,7
 80006a8:	20c00226 	beq	r4,r3,80006b4 <main+0x4b4>
 80006ac:	008000c4 	movi	r2,3
 80006b0:	20bf121e 	bne	r4,r2,80002fc <main+0xfc>
					break;
 80006b4:	a021883a 	mov	r16,r20
 80006b8:	0023883a 	mov	r17,zero
 80006bc:	04c05004 	movi	r19,320
				}
				for(j=0; j<320; j++) {
					alt_up_pixel_buffer_dma_draw(my_pixel_buffer,(my_image[(i*320*3+j*3+2)]) +(my_image[(i*320*3+j*3+1)]<<8) +(my_image[(i*320*3+j*3+0)]<<16),j,i);
 80006c0:	80800003 	ldbu	r2,0(r16)
 80006c4:	80c00043 	ldbu	r3,1(r16)
 80006c8:	81400083 	ldbu	r5,2(r16)
 80006cc:	1004943a 	slli	r2,r2,16
 80006d0:	1806923a 	slli	r3,r3,8
 80006d4:	d127d217 	ldw	r4,-24760(gp)
 80006d8:	288b883a 	add	r5,r5,r2
 80006dc:	880d883a 	mov	r6,r17
 80006e0:	194b883a 	add	r5,r3,r5
 80006e4:	900f883a 	mov	r7,r18
				//break if key press
				keys = keys=IORD_ALTERA_AVALON_PIO_DATA(KEYS_BASE);
				if (keys != 7 && keys != 3) {
					break;
				}
				for(j=0; j<320; j++) {
 80006e8:	8c400044 	addi	r17,r17,1
					alt_up_pixel_buffer_dma_draw(my_pixel_buffer,(my_image[(i*320*3+j*3+2)]) +(my_image[(i*320*3+j*3+1)]<<8) +(my_image[(i*320*3+j*3+0)]<<16),j,i);
 80006ec:	8013fd80 	call	8013fd8 <alt_up_pixel_buffer_dma_draw>
				//break if key press
				keys = keys=IORD_ALTERA_AVALON_PIO_DATA(KEYS_BASE);
				if (keys != 7 && keys != 3) {
					break;
				}
				for(j=0; j<320; j++) {
 80006f0:	840000c4 	addi	r16,r16,3
 80006f4:	8cfff21e 	bne	r17,r19,80006c0 <main+0x4c0>
		if(cpuid == 0){
			// Display the unaltered image to the VGA
			alt_up_char_buffer_string(my_char_buffer, "Original Image!",0,59);
			int i, j;

			for(i=0; i<239; i++){
 80006f8:	94800044 	addi	r18,r18,1
 80006fc:	00803bc4 	movi	r2,239
 8000700:	a500f004 	addi	r20,r20,960
 8000704:	90bfe41e 	bne	r18,r2,8000698 <main+0x498>
 8000708:	003efc06 	br	80002fc <main+0xfc>
	}

	// Continuously rotate the image clockwise; 10 degree increments
	// As fast as the processor can handle
	else if (current_state == 5) {
		alt_up_pixel_buffer_dma_clear_screen(my_pixel_buffer,0);
 800070c:	d127d217 	ldw	r4,-24760(gp)
 8000710:	000b883a 	mov	r5,zero
 8000714:	801425c0 	call	801425c <alt_up_pixel_buffer_dma_clear_screen>
		int i, j;


		#ifdef FIXED_POINT

		int sine = (int) (sinf(rcount*(M_PI/180))*div_amt);
 8000718:	d127d117 	ldw	r4,-24764(gp)
 800071c:	8002cec0 	call	8002cec <__floatsisf>
 8000720:	d1200317 	ldw	r4,-32756(gp)
 8000724:	00cf23f4 	movhi	r3,15503
 8000728:	18fe8d44 	addi	r3,r3,-1483
 800072c:	10e1ff32 	custom	252,r16,r2,r3
 8000730:	8002cec0 	call	8002cec <__floatsisf>
 8000734:	8009883a 	mov	r4,r16
 8000738:	1023883a 	mov	r17,r2
 800073c:	8000f840 	call	8000f84 <sinf>
 8000740:	1449ff32 	custom	252,r4,r2,r17
 8000744:	8002d840 	call	8002d84 <__fixsfsi>
		int cosine = (int)(cosf(rcount*(M_PI/180))*div_amt);
 8000748:	8009883a 	mov	r4,r16
		int i, j;


		#ifdef FIXED_POINT

		int sine = (int) (sinf(rcount*(M_PI/180))*div_amt);
 800074c:	1025883a 	mov	r18,r2
		int cosine = (int)(cosf(rcount*(M_PI/180))*div_amt);
 8000750:	8000db00 	call	8000db0 <cosf>
 8000754:	8889ff32 	custom	252,r4,r17,r2
 8000758:	8002d840 	call	8002d84 <__fixsfsi>
 800075c:	d8800d15 	stw	r2,52(sp)
		#endif



		//reset performance counter
		PERF_RESET(PERFORMANCE_COUNTER_0_BASE);
 8000760:	01000044 	movi	r4,1
 8000764:	0005883a 	mov	r2,zero
 8000768:	11000035 	stwio	r4,0(r2)
		PERF_START_MEASURING(PERFORMANCE_COUNTER_0_BASE);
 800076c:	00c00104 	movi	r3,4
 8000770:	18000035 	stwio	zero,0(r3)

		if(cpuid == 0){
 8000774:	d9401717 	ldw	r5,92(sp)
 8000778:	28001f26 	beq	r5,zero,80007f8 <main+0x5f8>

		altera_avalon_mailbox_post(mailbox_1, message);
		altera_avalon_mailbox_pend(mailbox_0);
		}

		if(cpuid ==1){
 800077c:	d9401017 	ldw	r5,64(sp)
 8000780:	2900be26 	beq	r5,r4,8000a7c <main+0x87c>
		altera_avalon_mailbox_post(mailbox_0, message);
		altera_avalon_mailbox_pend(mailbox_1);
		int time = perf_get_total_time ((void*) PERFORMANCE_COUNTER_0_BASE);
		printf("Average time %d\n", time/(320*240));
		}
		rcount+=10;
 8000784:	d0a7d117 	ldw	r2,-24764(gp)
 8000788:	10800284 	addi	r2,r2,10
 800078c:	d0a7d115 	stw	r2,-24764(gp)
 8000790:	003eda06 	br	80002fc <main+0xfc>
	if ((keys != 7) && (keys != current_state)) {
		alt_up_pixel_buffer_dma_clear_screen(my_pixel_buffer,0);
		if (keys == 3)  printf("key 3 pressed\n");
		else if (keys == 5) {
			rcount = 10;
			alt_up_char_buffer_clear(my_char_buffer);
 8000794:	d9000f17 	ldw	r4,60(sp)
	// detect key press
	if ((keys != 7) && (keys != current_state)) {
		alt_up_pixel_buffer_dma_clear_screen(my_pixel_buffer,0);
		if (keys == 3)  printf("key 3 pressed\n");
		else if (keys == 5) {
			rcount = 10;
 8000798:	00800284 	movi	r2,10
 800079c:	d0a7d115 	stw	r2,-24764(gp)
			alt_up_char_buffer_clear(my_char_buffer);
 80007a0:	8013f3c0 	call	8013f3c <alt_up_char_buffer_clear>
			printf("key 2 pressed\n");
 80007a4:	01020074 	movhi	r4,2049
 80007a8:	211ced04 	addi	r4,r4,29620
 80007ac:	8004ef80 	call	8004ef8 <puts>
 80007b0:	003ee206 	br	800033c <main+0x13c>
	keys=IORD_ALTERA_AVALON_PIO_DATA(KEYS_BASE);

	// detect key press
	if ((keys != 7) && (keys != current_state)) {
		alt_up_pixel_buffer_dma_clear_screen(my_pixel_buffer,0);
		if (keys == 3)  printf("key 3 pressed\n");
 80007b4:	01020074 	movhi	r4,2049
 80007b8:	211ce904 	addi	r4,r4,29604
 80007bc:	8004ef80 	call	8004ef8 <puts>

	//default state: display image and text
	if (current_state == 3) {

		// only run this part on CPU 0
		if(cpuid == 0){
 80007c0:	d9401717 	ldw	r5,92(sp)
	keys=IORD_ALTERA_AVALON_PIO_DATA(KEYS_BASE);

	// detect key press
	if ((keys != 7) && (keys != current_state)) {
		alt_up_pixel_buffer_dma_clear_screen(my_pixel_buffer,0);
		if (keys == 3)  printf("key 3 pressed\n");
 80007c4:	dc001315 	stw	r16,76(sp)

	//default state: display image and text
	if (current_state == 3) {

		// only run this part on CPU 0
		if(cpuid == 0){
 80007c8:	283ecc1e 	bne	r5,zero,80002fc <main+0xfc>
 80007cc:	003faa06 	br	8000678 <main+0x478>
		}

		else if (keys == 6) {
			bool_dec = 1;
			scount = 1.0f;
			alt_up_char_buffer_clear(my_char_buffer);
 80007d0:	d9000f17 	ldw	r4,60(sp)
			printf("key 2 pressed\n");
		}

		else if (keys == 6) {
			bool_dec = 1;
			scount = 1.0f;
 80007d4:	00cfe034 	movhi	r3,16256
			alt_up_char_buffer_clear(my_char_buffer);
			printf("key 2 pressed\n");
		}

		else if (keys == 6) {
			bool_dec = 1;
 80007d8:	00800044 	movi	r2,1
			scount = 1.0f;
 80007dc:	d0e7cf15 	stw	r3,-24772(gp)
			alt_up_char_buffer_clear(my_char_buffer);
			printf("key 2 pressed\n");
		}

		else if (keys == 6) {
			bool_dec = 1;
 80007e0:	d0a7ce15 	stw	r2,-24776(gp)
			scount = 1.0f;
			alt_up_char_buffer_clear(my_char_buffer);
 80007e4:	8013f3c0 	call	8013f3c <alt_up_char_buffer_clear>
			printf("key 1 pressed\n");
 80007e8:	01020074 	movhi	r4,2049
 80007ec:	211cf104 	addi	r4,r4,29636
 80007f0:	8004ef80 	call	8004ef8 <puts>
 80007f4:	003ed106 	br	800033c <main+0x13c>
		//reset performance counter
		PERF_RESET(PERFORMANCE_COUNTER_0_BASE);
		PERF_START_MEASURING(PERFORMANCE_COUNTER_0_BASE);

		if(cpuid == 0){
		printf("%d cpuid_first_loop: \n", cpuid);
 80007f8:	01020074 	movhi	r4,2049
 80007fc:	211cf904 	addi	r4,r4,29668
 8000800:	8004de00 	call	8004de0 <printf>
 8000804:	d8800d17 	ldw	r2,52(sp)
 8000808:	d8c00d17 	ldw	r3,52(sp)
 800080c:	d8000015 	stw	zero,0(sp)
 8000810:	113fe224 	muli	r4,r2,-120
 8000814:	90bfd824 	muli	r2,r18,-160
 8000818:	197fd824 	muli	r5,r3,-160
 800081c:	90ffe224 	muli	r3,r18,-120
 8000820:	2089c83a 	sub	r4,r4,r2
 8000824:	00bc0014 	movui	r2,61440
 8000828:	2089883a 	add	r4,r4,r2
 800082c:	d8800d17 	ldw	r2,52(sp)
 8000830:	28cb883a 	add	r5,r5,r3
 8000834:	00c00074 	movhi	r3,1
 8000838:	18d00004 	addi	r3,r3,16384
 800083c:	28cb883a 	add	r5,r5,r3
 8000840:	d9400515 	stw	r5,20(sp)
 8000844:	1085883a 	add	r2,r2,r2
 8000848:	048bc83a 	sub	r5,zero,r18
 800084c:	94a5883a 	add	r18,r18,r18
 8000850:	d9000815 	stw	r4,32(sp)
 8000854:	d9401915 	stw	r5,100(sp)
 8000858:	d8800715 	stw	r2,28(sp)
 800085c:	dc800615 	stw	r18,24(sp)
		for(i=cpuid; i<num_rows-1; i+=2){
			//break if key press
			keys = keys=IORD_ALTERA_AVALON_PIO_DATA(KEYS_BASE);
 8000860:	00844834 	movhi	r2,4384
 8000864:	10940404 	addi	r2,r2,20496
 8000868:	11000037 	ldwio	r4,0(r2)
			if (keys != 7 && keys != 5) {
 800086c:	00c001c4 	movi	r3,7
 8000870:	20c00226 	beq	r4,r3,800087c <main+0x67c>
 8000874:	00800144 	movi	r2,5
 8000878:	2080741e 	bne	r4,r2,8000a4c <main+0x84c>
				break;
 800087c:	dcc00517 	ldw	r19,20(sp)
 8000880:	dd000817 	ldw	r20,32(sp)
 8000884:	002b883a 	mov	r21,zero
 8000888:	00000706 	br	80008a8 <main+0x6a8>
			}



			for(j=0; j<num_cols-1; j++) {
 800088c:	d8800d17 	ldw	r2,52(sp)
 8000890:	d8c01917 	ldw	r3,100(sp)
 8000894:	ad400044 	addi	r21,r21,1
 8000898:	98a7883a 	add	r19,r19,r2
 800089c:	00804fc4 	movi	r2,319
 80008a0:	a0e9883a 	add	r20,r20,r3
 80008a4:	a8805b26 	beq	r21,r2,8000a14 <main+0x814>
				#ifdef FIXED_POINT
				//calcuate row&col value from fixed point sine/cosine
				alt_u32 rowi = (offset_i*cosine-offset_j*sine + (num_rows*512)/2);
				alt_u32 coli = (offset_i*sine+offset_j*cosine + (num_cols*512)/2);
				//check bounds
				if(coli>(num_cols*512) || coli<0 || rowi>(num_rows*512) || rowi<(0)) continue;
 80008a8:	008000f4 	movhi	r2,3
 80008ac:	10a00004 	addi	r2,r2,-32768
 80008b0:	14fff636 	bltu	r2,r19,800088c <main+0x68c>
				//'floor' for interpolation
				rowf = rowi/512*512;
 80008b4:	a008d27a 	srli	r4,r20,9
				colf = coli/512*512;
 80008b8:	980ed27a 	srli	r7,r19,9
				alt_u32 rfrac = (rowi-rowf)/512;
				alt_u32 cfrac = (coli-colf)/512;

				//calculate weights; divide by 512^2

				alt_u32 weight1 = (512-rfrac)*(512-cfrac);
 80008bc:	01408004 	movi	r5,512
				alt_u32 rowi = (offset_i*cosine-offset_j*sine + (num_rows*512)/2);
				alt_u32 coli = (offset_i*sine+offset_j*cosine + (num_cols*512)/2);
				//check bounds
				if(coli>(num_cols*512) || coli<0 || rowi>(num_rows*512) || rowi<(0)) continue;
				//'floor' for interpolation
				rowf = rowi/512*512;
 80008c0:	2008927a 	slli	r4,r4,9
				colf = coli/512*512;
 80008c4:	380e927a 	slli	r7,r7,9
						weight4*my_image[pixel4+2]);



				//draw_pixel
				alt_up_pixel_buffer_dma_draw(my_pixel_buffer,(in3 +(in2<<8) +(in1<<16)),j,i);
 80008c8:	a80d883a 	mov	r6,r21
				if(coli>(num_cols*512) || coli<0 || rowi>(num_rows*512) || rowi<(0)) continue;
				//'floor' for interpolation
				rowf = rowi/512*512;
				colf = coli/512*512;

				alt_u32 rfrac = (rowi-rowf)/512;
 80008cc:	a107c83a 	sub	r3,r20,r4
				alt_u32 cfrac = (coli-colf)/512;
 80008d0:	99c5c83a 	sub	r2,r19,r7
 80008d4:	1004d27a 	srli	r2,r2,9
				if(coli>(num_cols*512) || coli<0 || rowi>(num_rows*512) || rowi<(0)) continue;
				//'floor' for interpolation
				rowf = rowi/512*512;
				colf = coli/512*512;

				alt_u32 rfrac = (rowi-rowf)/512;
 80008d8:	1806d27a 	srli	r3,r3,9
				weight4 /= 512*512;
				//reset rowf&colf values for pixel calculations
				rowf /= 512;
				colf /= 512;
				#endif
				int pixel1 = rowf*320*3 + colf*3;
 80008dc:	2013883a 	mov	r9,r4
				alt_u32 rfrac = (rowi-rowf)/512;
				alt_u32 cfrac = (coli-colf)/512;

				//calculate weights; divide by 512^2

				alt_u32 weight1 = (512-rfrac)*(512-cfrac);
 80008e0:	28d1c83a 	sub	r8,r5,r3
 80008e4:	288bc83a 	sub	r5,r5,r2
				alt_u32 weight2 = rfrac*(512-cfrac);
				alt_u32 weight3 = rfrac*cfrac;
				alt_u32 weight4 = (512-rfrac)*cfrac;
 80008e8:	1219383a 	mul	r12,r2,r8
				alt_u32 cfrac = (coli-colf)/512;

				//calculate weights; divide by 512^2

				alt_u32 weight1 = (512-rfrac)*(512-cfrac);
				alt_u32 weight2 = rfrac*(512-cfrac);
 80008ec:	195f383a 	mul	r15,r3,r5
				alt_u32 weight3 = rfrac*cfrac;
 80008f0:	1887383a 	mul	r3,r3,r2
				#ifdef FIXED_POINT
				//calcuate row&col value from fixed point sine/cosine
				alt_u32 rowi = (offset_i*cosine-offset_j*sine + (num_rows*512)/2);
				alt_u32 coli = (offset_i*sine+offset_j*cosine + (num_cols*512)/2);
				//check bounds
				if(coli>(num_cols*512) || coli<0 || rowi>(num_rows*512) || rowi<(0)) continue;
 80008f4:	008000b4 	movhi	r2,2
 80008f8:	10b80004 	addi	r2,r2,-8192
				alt_u32 rfrac = (rowi-rowf)/512;
				alt_u32 cfrac = (coli-colf)/512;

				//calculate weights; divide by 512^2

				alt_u32 weight1 = (512-rfrac)*(512-cfrac);
 80008fc:	414b383a 	mul	r5,r8,r5
				weight4 /= 512*512;
				//reset rowf&colf values for pixel calculations
				rowf /= 512;
				colf /= 512;
				#endif
				int pixel1 = rowf*320*3 + colf*3;
 8000900:	3811883a 	mov	r8,r7
						weight4*my_image[pixel4+2]);



				//draw_pixel
				alt_up_pixel_buffer_dma_draw(my_pixel_buffer,(in3 +(in2<<8) +(in1<<16)),j,i);
 8000904:	d9c00017 	ldw	r7,0(sp)
				#ifdef FIXED_POINT
				//calcuate row&col value from fixed point sine/cosine
				alt_u32 rowi = (offset_i*cosine-offset_j*sine + (num_rows*512)/2);
				alt_u32 coli = (offset_i*sine+offset_j*cosine + (num_cols*512)/2);
				//check bounds
				if(coli>(num_cols*512) || coli<0 || rowi>(num_rows*512) || rowi<(0)) continue;
 8000908:	153fe036 	bltu	r2,r20,800088c <main+0x68c>
						weight4*my_image[pixel4+2]);



				//draw_pixel
				alt_up_pixel_buffer_dma_draw(my_pixel_buffer,(in3 +(in2<<8) +(in1<<16)),j,i);
 800090c:	d127d217 	ldw	r4,-24760(gp)
				alt_u32 weight2 = rfrac*(512-cfrac);
				alt_u32 weight3 = rfrac*cfrac;
				alt_u32 weight4 = (512-rfrac)*cfrac;


				weight1 /= 512*512;
 8000910:	282ed4ba 	srli	r23,r5,18
				//printf("weight1: %d\n" , weight1);
				weight2 /= 512*512;
 8000914:	783ed4ba 	srli	ra,r15,18
				weight3 /= 512*512;
 8000918:	1838d4ba 	srli	fp,r3,18
				weight4 /= 512*512;
 800091c:	602cd4ba 	srli	r22,r12,18
				//reset rowf&colf values for pixel calculations
				rowf /= 512;
				colf /= 512;
				#endif
				int pixel1 = rowf*320*3 + colf*3;
 8000920:	48005016 	blt	r9,zero,8000a64 <main+0x864>
 8000924:	4805d27a 	srai	r2,r9,9
 8000928:	1140f024 	muli	r5,r2,960
 800092c:	40005116 	blt	r8,zero,8000a74 <main+0x874>
 8000930:	4005d27a 	srai	r2,r8,9
				break;
			}



			for(j=0; j<num_cols-1; j++) {
 8000934:	ad400044 	addi	r21,r21,1
				weight4 /= 512*512;
				//reset rowf&colf values for pixel calculations
				rowf /= 512;
				colf /= 512;
				#endif
				int pixel1 = rowf*320*3 + colf*3;
 8000938:	1087883a 	add	r3,r2,r2
 800093c:	1887883a 	add	r3,r3,r2
 8000940:	28c7883a 	add	r3,r5,r3
						weight4*my_image[pixel4]);

				int in2 = (int) (weight1*my_image[pixel1+1] +
						weight2*my_image[pixel2+1] +
						weight3*my_image[pixel3+1] +
						weight4*my_image[pixel4+1]);
 8000944:	d9400917 	ldw	r5,36(sp)
				//reset rowf&colf values for pixel calculations
				rowf /= 512;
				colf /= 512;
				#endif
				int pixel1 = rowf*320*3 + colf*3;
				int pixel2 = (rowf + 1)*320*3 + colf*3;
 8000948:	1a80f004 	addi	r10,r3,960
				int pixel3 = (rowf + 1)*320*3 + (colf + 1)*3;
 800094c:	1ac0f0c4 	addi	r11,r3,963
				int pixel4 = rowf*320*3 + (colf + 1)*3;
 8000950:	1a4000c4 	addi	r9,r3,3
						weight4*my_image[pixel4]);

				int in2 = (int) (weight1*my_image[pixel1+1] +
						weight2*my_image[pixel2+1] +
						weight3*my_image[pixel3+1] +
						weight4*my_image[pixel4+1]);
 8000954:	2a95883a 	add	r10,r5,r10
 8000958:	2a53883a 	add	r9,r5,r9
 800095c:	2ad7883a 	add	r11,r5,r11
 8000960:	28c7883a 	add	r3,r5,r3
						weight4*my_image[pixel4+2]);



				//draw_pixel
				alt_up_pixel_buffer_dma_draw(my_pixel_buffer,(in3 +(in2<<8) +(in1<<16)),j,i);
 8000964:	1a000003 	ldbu	r8,0(r3)
 8000968:	54000003 	ldbu	r16,0(r10)
 800096c:	4b400003 	ldbu	r13,0(r9)
 8000970:	5b800003 	ldbu	r14,0(r11)
 8000974:	18800043 	ldbu	r2,1(r3)
 8000978:	54800043 	ldbu	r18,1(r10)
 800097c:	4b000043 	ldbu	r12,1(r9)
 8000980:	5c400043 	ldbu	r17,1(r11)
 8000984:	19400083 	ldbu	r5,2(r3)
 8000988:	53c00083 	ldbu	r15,2(r10)
 800098c:	fc21383a 	mul	r16,ra,r16
 8000990:	e39d383a 	mul	r14,fp,r14
 8000994:	48c00083 	ldbu	r3,2(r9)
 8000998:	5a800083 	ldbu	r10,2(r11)
 800099c:	ba11383a 	mul	r8,r23,r8
 80009a0:	b35b383a 	mul	r13,r22,r13
 80009a4:	fca5383a 	mul	r18,ra,r18
 80009a8:	b885383a 	mul	r2,r23,r2
 80009ac:	b319383a 	mul	r12,r22,r12
 80009b0:	e463383a 	mul	r17,fp,r17
 80009b4:	6b9b883a 	add	r13,r13,r14
 80009b8:	fbdf383a 	mul	r15,ra,r15
 80009bc:	e295383a 	mul	r10,fp,r10
 80009c0:	4411883a 	add	r8,r8,r16
 80009c4:	b94b383a 	mul	r5,r23,r5
 80009c8:	b0c7383a 	mul	r3,r22,r3
 80009cc:	6459883a 	add	r12,r12,r17
 80009d0:	4351883a 	add	r8,r8,r13
 80009d4:	1485883a 	add	r2,r2,r18
 80009d8:	1305883a 	add	r2,r2,r12
 80009dc:	4010943a 	slli	r8,r8,16
 80009e0:	1a87883a 	add	r3,r3,r10
 80009e4:	2bcb883a 	add	r5,r5,r15
 80009e8:	1004923a 	slli	r2,r2,8
 80009ec:	28cb883a 	add	r5,r5,r3
 80009f0:	2a0b883a 	add	r5,r5,r8
 80009f4:	114b883a 	add	r5,r2,r5
 80009f8:	8013fd80 	call	8013fd8 <alt_up_pixel_buffer_dma_draw>
				break;
			}



			for(j=0; j<num_cols-1; j++) {
 80009fc:	d8800d17 	ldw	r2,52(sp)
 8000a00:	d8c01917 	ldw	r3,100(sp)
 8000a04:	98a7883a 	add	r19,r19,r2
 8000a08:	00804fc4 	movi	r2,319
 8000a0c:	a0e9883a 	add	r20,r20,r3
 8000a10:	a8bfa51e 	bne	r21,r2,80008a8 <main+0x6a8>
		PERF_RESET(PERFORMANCE_COUNTER_0_BASE);
		PERF_START_MEASURING(PERFORMANCE_COUNTER_0_BASE);

		if(cpuid == 0){
		printf("%d cpuid_first_loop: \n", cpuid);
		for(i=cpuid; i<num_rows-1; i+=2){
 8000a14:	d9400017 	ldw	r5,0(sp)
 8000a18:	d8800817 	ldw	r2,32(sp)
 8000a1c:	d8c00717 	ldw	r3,28(sp)
 8000a20:	29400084 	addi	r5,r5,2
 8000a24:	d9400015 	stw	r5,0(sp)
 8000a28:	10c5883a 	add	r2,r2,r3
 8000a2c:	d9400517 	ldw	r5,20(sp)
 8000a30:	d8800815 	stw	r2,32(sp)
 8000a34:	d8800617 	ldw	r2,24(sp)
 8000a38:	d8c00017 	ldw	r3,0(sp)
 8000a3c:	288b883a 	add	r5,r5,r2
 8000a40:	00803c04 	movi	r2,240
 8000a44:	d9400515 	stw	r5,20(sp)
 8000a48:	18bf851e 	bne	r3,r2,8000860 <main+0x660>

			}

		}

		altera_avalon_mailbox_post(mailbox_1, message);
 8000a4c:	d9001117 	ldw	r4,68(sp)
 8000a50:	000b883a 	mov	r5,zero
 8000a54:	8012a0c0 	call	8012a0c <altera_avalon_mailbox_post>
		altera_avalon_mailbox_pend(mailbox_0);
 8000a58:	d9001217 	ldw	r4,72(sp)
 8000a5c:	8012b180 	call	8012b18 <altera_avalon_mailbox_pend>
 8000a60:	003f4806 	br	8000784 <main+0x584>
				weight4 /= 512*512;
				//reset rowf&colf values for pixel calculations
				rowf /= 512;
				colf /= 512;
				#endif
				int pixel1 = rowf*320*3 + colf*3;
 8000a64:	4a407fc4 	addi	r9,r9,511
 8000a68:	4805d27a 	srai	r2,r9,9
 8000a6c:	1140f024 	muli	r5,r2,960
 8000a70:	403faf0e 	bge	r8,zero,8000930 <main+0x730>
 8000a74:	42007fc4 	addi	r8,r8,511
 8000a78:	003fad06 	br	8000930 <main+0x730>
		altera_avalon_mailbox_post(mailbox_1, message);
		altera_avalon_mailbox_pend(mailbox_0);
		}

		if(cpuid ==1){
		printf("%d cpuid_second_loop: \n", cpuid);
 8000a7c:	01020074 	movhi	r4,2049
 8000a80:	211cff04 	addi	r4,r4,29692
 8000a84:	8004de00 	call	8004de0 <printf>
 8000a88:	d8800d17 	ldw	r2,52(sp)
 8000a8c:	d8c00d17 	ldw	r3,52(sp)
 8000a90:	113fe2a4 	muli	r4,r2,-118
 8000a94:	90bfd824 	muli	r2,r18,-160
 8000a98:	197fd824 	muli	r5,r3,-160
 8000a9c:	90ffe2a4 	muli	r3,r18,-118
 8000aa0:	2089c83a 	sub	r4,r4,r2
 8000aa4:	00bc0014 	movui	r2,61440
 8000aa8:	2089883a 	add	r4,r4,r2
 8000aac:	d8800d17 	ldw	r2,52(sp)
 8000ab0:	28cb883a 	add	r5,r5,r3
 8000ab4:	00c00074 	movhi	r3,1
 8000ab8:	18d00004 	addi	r3,r3,16384
 8000abc:	28cb883a 	add	r5,r5,r3
 8000ac0:	d9400315 	stw	r5,12(sp)
 8000ac4:	1085883a 	add	r2,r2,r2
 8000ac8:	048bc83a 	sub	r5,zero,r18
 8000acc:	00c00084 	movi	r3,2
 8000ad0:	94a5883a 	add	r18,r18,r18
 8000ad4:	d9000115 	stw	r4,4(sp)
 8000ad8:	d9401815 	stw	r5,96(sp)
 8000adc:	d8800215 	stw	r2,8(sp)
 8000ae0:	dc800415 	stw	r18,16(sp)
 8000ae4:	d8c00e15 	stw	r3,56(sp)
		for(i=cpuid + 1; i<num_rows-1; i+=2){
				//break if key press
				keys = keys=IORD_ALTERA_AVALON_PIO_DATA(KEYS_BASE);
 8000ae8:	00844834 	movhi	r2,4384
 8000aec:	10940404 	addi	r2,r2,20496
 8000af0:	11000037 	ldwio	r4,0(r2)
				if (keys != 7 && keys != 5) {
 8000af4:	00c001c4 	movi	r3,7
 8000af8:	20c00226 	beq	r4,r3,8000b04 <main+0x904>
 8000afc:	00800144 	movi	r2,5
 8000b00:	2080741e 	bne	r4,r2,8000cd4 <main+0xad4>
					break;
 8000b04:	dcc00317 	ldw	r19,12(sp)
 8000b08:	dd000117 	ldw	r20,4(sp)
 8000b0c:	002b883a 	mov	r21,zero
 8000b10:	00000706 	br	8000b30 <main+0x930>
				}

				for(j=0; j<num_cols-1; j++) {
 8000b14:	d8800d17 	ldw	r2,52(sp)
 8000b18:	d8c01817 	ldw	r3,96(sp)
 8000b1c:	ad400044 	addi	r21,r21,1
 8000b20:	98a7883a 	add	r19,r19,r2
 8000b24:	00804fc4 	movi	r2,319
 8000b28:	a0e9883a 	add	r20,r20,r3
 8000b2c:	a8805b26 	beq	r21,r2,8000c9c <main+0xa9c>
					#ifdef FIXED_POINT
					//calcuate row&col value from fixed point sine/cosine
					alt_u32 rowi = (offset_i*cosine-offset_j*sine + (num_rows*512)/2);
					alt_u32 coli = (offset_i*sine+offset_j*cosine + (num_cols*512)/2);
					//check bounds
					if(coli>(num_cols*512) || coli<0 || rowi>(num_rows*512) || rowi<(0)) continue;
 8000b30:	008000f4 	movhi	r2,3
 8000b34:	10a00004 	addi	r2,r2,-32768
 8000b38:	14fff636 	bltu	r2,r19,8000b14 <main+0x914>
					//'floor' for interpolation
					rowf = rowi/512*512;
 8000b3c:	a008d27a 	srli	r4,r20,9
					colf = coli/512*512;
 8000b40:	980ed27a 	srli	r7,r19,9
					alt_u32 rfrac = (rowi-rowf)/512;
					alt_u32 cfrac = (coli-colf)/512;

					//calculate weights; divide by 512^2

					alt_u32 weight1 = (512-rfrac)*(512-cfrac);
 8000b44:	01408004 	movi	r5,512
					alt_u32 rowi = (offset_i*cosine-offset_j*sine + (num_rows*512)/2);
					alt_u32 coli = (offset_i*sine+offset_j*cosine + (num_cols*512)/2);
					//check bounds
					if(coli>(num_cols*512) || coli<0 || rowi>(num_rows*512) || rowi<(0)) continue;
					//'floor' for interpolation
					rowf = rowi/512*512;
 8000b48:	2008927a 	slli	r4,r4,9
					colf = coli/512*512;
 8000b4c:	380e927a 	slli	r7,r7,9
							weight2*my_image[pixel2+2] +
							weight3*my_image[pixel3+2] +
							weight4*my_image[pixel4+2]);

					//draw_pixel
					alt_up_pixel_buffer_dma_draw(my_pixel_buffer,(in3 +(in2<<8) +(in1<<16)),j,i);
 8000b50:	a80d883a 	mov	r6,r21
					if(coli>(num_cols*512) || coli<0 || rowi>(num_rows*512) || rowi<(0)) continue;
					//'floor' for interpolation
					rowf = rowi/512*512;
					colf = coli/512*512;

					alt_u32 rfrac = (rowi-rowf)/512;
 8000b54:	a107c83a 	sub	r3,r20,r4
					alt_u32 cfrac = (coli-colf)/512;
 8000b58:	99c5c83a 	sub	r2,r19,r7
 8000b5c:	1004d27a 	srli	r2,r2,9
					if(coli>(num_cols*512) || coli<0 || rowi>(num_rows*512) || rowi<(0)) continue;
					//'floor' for interpolation
					rowf = rowi/512*512;
					colf = coli/512*512;

					alt_u32 rfrac = (rowi-rowf)/512;
 8000b60:	1806d27a 	srli	r3,r3,9
					weight4 /= 512*512;
					//reset rowf&colf values for pixel calculations
					rowf /= 512;
					colf /= 512;
					#endif
					int pixel1 = rowf*320*3 + colf*3;
 8000b64:	2013883a 	mov	r9,r4
					alt_u32 rfrac = (rowi-rowf)/512;
					alt_u32 cfrac = (coli-colf)/512;

					//calculate weights; divide by 512^2

					alt_u32 weight1 = (512-rfrac)*(512-cfrac);
 8000b68:	28d1c83a 	sub	r8,r5,r3
 8000b6c:	288bc83a 	sub	r5,r5,r2
					alt_u32 weight2 = rfrac*(512-cfrac);
					alt_u32 weight3 = rfrac*cfrac;
					alt_u32 weight4 = (512-rfrac)*cfrac;
 8000b70:	1219383a 	mul	r12,r2,r8
					alt_u32 cfrac = (coli-colf)/512;

					//calculate weights; divide by 512^2

					alt_u32 weight1 = (512-rfrac)*(512-cfrac);
					alt_u32 weight2 = rfrac*(512-cfrac);
 8000b74:	195f383a 	mul	r15,r3,r5
					alt_u32 weight3 = rfrac*cfrac;
 8000b78:	1887383a 	mul	r3,r3,r2
					#ifdef FIXED_POINT
					//calcuate row&col value from fixed point sine/cosine
					alt_u32 rowi = (offset_i*cosine-offset_j*sine + (num_rows*512)/2);
					alt_u32 coli = (offset_i*sine+offset_j*cosine + (num_cols*512)/2);
					//check bounds
					if(coli>(num_cols*512) || coli<0 || rowi>(num_rows*512) || rowi<(0)) continue;
 8000b7c:	008000b4 	movhi	r2,2
 8000b80:	10b80004 	addi	r2,r2,-8192
					alt_u32 rfrac = (rowi-rowf)/512;
					alt_u32 cfrac = (coli-colf)/512;

					//calculate weights; divide by 512^2

					alt_u32 weight1 = (512-rfrac)*(512-cfrac);
 8000b84:	414b383a 	mul	r5,r8,r5
					weight4 /= 512*512;
					//reset rowf&colf values for pixel calculations
					rowf /= 512;
					colf /= 512;
					#endif
					int pixel1 = rowf*320*3 + colf*3;
 8000b88:	3811883a 	mov	r8,r7
							weight2*my_image[pixel2+2] +
							weight3*my_image[pixel3+2] +
							weight4*my_image[pixel4+2]);

					//draw_pixel
					alt_up_pixel_buffer_dma_draw(my_pixel_buffer,(in3 +(in2<<8) +(in1<<16)),j,i);
 8000b8c:	d9c00e17 	ldw	r7,56(sp)
					#ifdef FIXED_POINT
					//calcuate row&col value from fixed point sine/cosine
					alt_u32 rowi = (offset_i*cosine-offset_j*sine + (num_rows*512)/2);
					alt_u32 coli = (offset_i*sine+offset_j*cosine + (num_cols*512)/2);
					//check bounds
					if(coli>(num_cols*512) || coli<0 || rowi>(num_rows*512) || rowi<(0)) continue;
 8000b90:	153fe036 	bltu	r2,r20,8000b14 <main+0x914>
							weight2*my_image[pixel2+2] +
							weight3*my_image[pixel3+2] +
							weight4*my_image[pixel4+2]);

					//draw_pixel
					alt_up_pixel_buffer_dma_draw(my_pixel_buffer,(in3 +(in2<<8) +(in1<<16)),j,i);
 8000b94:	d127d217 	ldw	r4,-24760(gp)
					alt_u32 weight2 = rfrac*(512-cfrac);
					alt_u32 weight3 = rfrac*cfrac;
					alt_u32 weight4 = (512-rfrac)*cfrac;


					weight1 /= 512*512;
 8000b98:	282ed4ba 	srli	r23,r5,18
					//printf("weight1: %d\n" , weight1);
					weight2 /= 512*512;
 8000b9c:	7838d4ba 	srli	fp,r15,18
					weight3 /= 512*512;
 8000ba0:	183ed4ba 	srli	ra,r3,18
					weight4 /= 512*512;
 8000ba4:	602cd4ba 	srli	r22,r12,18
					//reset rowf&colf values for pixel calculations
					rowf /= 512;
					colf /= 512;
					#endif
					int pixel1 = rowf*320*3 + colf*3;
 8000ba8:	48006116 	blt	r9,zero,8000d30 <main+0xb30>
 8000bac:	4805d27a 	srai	r2,r9,9
 8000bb0:	1140f024 	muli	r5,r2,960
 8000bb4:	40006216 	blt	r8,zero,8000d40 <main+0xb40>
 8000bb8:	4005d27a 	srai	r2,r8,9
				keys = keys=IORD_ALTERA_AVALON_PIO_DATA(KEYS_BASE);
				if (keys != 7 && keys != 5) {
					break;
				}

				for(j=0; j<num_cols-1; j++) {
 8000bbc:	ad400044 	addi	r21,r21,1
					weight4 /= 512*512;
					//reset rowf&colf values for pixel calculations
					rowf /= 512;
					colf /= 512;
					#endif
					int pixel1 = rowf*320*3 + colf*3;
 8000bc0:	1087883a 	add	r3,r2,r2
 8000bc4:	1887883a 	add	r3,r3,r2
 8000bc8:	28c7883a 	add	r3,r5,r3
							weight4*my_image[pixel4]);

					int in2 = (int) (weight1*my_image[pixel1+1] +
							weight2*my_image[pixel2+1] +
							weight3*my_image[pixel3+1] +
							weight4*my_image[pixel4+1]);
 8000bcc:	d9400917 	ldw	r5,36(sp)
					//reset rowf&colf values for pixel calculations
					rowf /= 512;
					colf /= 512;
					#endif
					int pixel1 = rowf*320*3 + colf*3;
					int pixel2 = (rowf + 1)*320*3 + colf*3;
 8000bd0:	1a80f004 	addi	r10,r3,960
					int pixel3 = (rowf + 1)*320*3 + (colf + 1)*3;
 8000bd4:	1ac0f0c4 	addi	r11,r3,963
					int pixel4 = rowf*320*3 + (colf + 1)*3;
 8000bd8:	1a4000c4 	addi	r9,r3,3
							weight4*my_image[pixel4]);

					int in2 = (int) (weight1*my_image[pixel1+1] +
							weight2*my_image[pixel2+1] +
							weight3*my_image[pixel3+1] +
							weight4*my_image[pixel4+1]);
 8000bdc:	2a95883a 	add	r10,r5,r10
 8000be0:	2a53883a 	add	r9,r5,r9
 8000be4:	2ad7883a 	add	r11,r5,r11
 8000be8:	28c7883a 	add	r3,r5,r3
							weight2*my_image[pixel2+2] +
							weight3*my_image[pixel3+2] +
							weight4*my_image[pixel4+2]);

					//draw_pixel
					alt_up_pixel_buffer_dma_draw(my_pixel_buffer,(in3 +(in2<<8) +(in1<<16)),j,i);
 8000bec:	1a000003 	ldbu	r8,0(r3)
 8000bf0:	54000003 	ldbu	r16,0(r10)
 8000bf4:	4b400003 	ldbu	r13,0(r9)
 8000bf8:	5b800003 	ldbu	r14,0(r11)
 8000bfc:	18800043 	ldbu	r2,1(r3)
 8000c00:	54800043 	ldbu	r18,1(r10)
 8000c04:	4b000043 	ldbu	r12,1(r9)
 8000c08:	5c400043 	ldbu	r17,1(r11)
 8000c0c:	19400083 	ldbu	r5,2(r3)
 8000c10:	53c00083 	ldbu	r15,2(r10)
 8000c14:	fb9d383a 	mul	r14,ra,r14
 8000c18:	48c00083 	ldbu	r3,2(r9)
 8000c1c:	5a800083 	ldbu	r10,2(r11)
 8000c20:	ba11383a 	mul	r8,r23,r8
 8000c24:	e421383a 	mul	r16,fp,r16
 8000c28:	b35b383a 	mul	r13,r22,r13
 8000c2c:	fc63383a 	mul	r17,ra,r17
 8000c30:	b885383a 	mul	r2,r23,r2
 8000c34:	e4a5383a 	mul	r18,fp,r18
 8000c38:	b319383a 	mul	r12,r22,r12
 8000c3c:	6b9b883a 	add	r13,r13,r14
 8000c40:	e3df383a 	mul	r15,fp,r15
 8000c44:	fa95383a 	mul	r10,ra,r10
 8000c48:	4411883a 	add	r8,r8,r16
 8000c4c:	b94b383a 	mul	r5,r23,r5
 8000c50:	b0c7383a 	mul	r3,r22,r3
 8000c54:	6459883a 	add	r12,r12,r17
 8000c58:	4351883a 	add	r8,r8,r13
 8000c5c:	1485883a 	add	r2,r2,r18
 8000c60:	1305883a 	add	r2,r2,r12
 8000c64:	4010943a 	slli	r8,r8,16
 8000c68:	1a87883a 	add	r3,r3,r10
 8000c6c:	2bcb883a 	add	r5,r5,r15
 8000c70:	1004923a 	slli	r2,r2,8
 8000c74:	28cb883a 	add	r5,r5,r3
 8000c78:	2a0b883a 	add	r5,r5,r8
 8000c7c:	114b883a 	add	r5,r2,r5
 8000c80:	8013fd80 	call	8013fd8 <alt_up_pixel_buffer_dma_draw>
				keys = keys=IORD_ALTERA_AVALON_PIO_DATA(KEYS_BASE);
				if (keys != 7 && keys != 5) {
					break;
				}

				for(j=0; j<num_cols-1; j++) {
 8000c84:	d8800d17 	ldw	r2,52(sp)
 8000c88:	d8c01817 	ldw	r3,96(sp)
 8000c8c:	98a7883a 	add	r19,r19,r2
 8000c90:	00804fc4 	movi	r2,319
 8000c94:	a0e9883a 	add	r20,r20,r3
 8000c98:	a8bfa51e 	bne	r21,r2,8000b30 <main+0x930>
		altera_avalon_mailbox_pend(mailbox_0);
		}

		if(cpuid ==1){
		printf("%d cpuid_second_loop: \n", cpuid);
		for(i=cpuid + 1; i<num_rows-1; i+=2){
 8000c9c:	d9400e17 	ldw	r5,56(sp)
 8000ca0:	d8800117 	ldw	r2,4(sp)
 8000ca4:	d8c00217 	ldw	r3,8(sp)
 8000ca8:	29400084 	addi	r5,r5,2
 8000cac:	d9400e15 	stw	r5,56(sp)
 8000cb0:	10c5883a 	add	r2,r2,r3
 8000cb4:	d9400317 	ldw	r5,12(sp)
 8000cb8:	d8800115 	stw	r2,4(sp)
 8000cbc:	d8800417 	ldw	r2,16(sp)
 8000cc0:	d8c00e17 	ldw	r3,56(sp)
 8000cc4:	288b883a 	add	r5,r5,r2
 8000cc8:	00803c04 	movi	r2,240
 8000ccc:	d9400315 	stw	r5,12(sp)
 8000cd0:	18bf851e 	bne	r3,r2,8000ae8 <main+0x8e8>
					alt_up_pixel_buffer_dma_draw(my_pixel_buffer,(in3 +(in2<<8) +(in1<<16)),j,i);

					}
				}

		altera_avalon_mailbox_post(mailbox_0, message);
 8000cd4:	d9001217 	ldw	r4,72(sp)
 8000cd8:	000b883a 	mov	r5,zero
 8000cdc:	8012a0c0 	call	8012a0c <altera_avalon_mailbox_post>
		altera_avalon_mailbox_pend(mailbox_1);
 8000ce0:	d9001117 	ldw	r4,68(sp)
 8000ce4:	8012b180 	call	8012b18 <altera_avalon_mailbox_pend>
		int time = perf_get_total_time ((void*) PERFORMANCE_COUNTER_0_BASE);
 8000ce8:	0009883a 	mov	r4,zero
 8000cec:	801304c0 	call	801304c <perf_get_total_time>
		printf("Average time %d\n", time/(320*240));
 8000cf0:	01400074 	movhi	r5,1
 8000cf4:	294b0004 	addi	r5,r5,11264
					}
				}

		altera_avalon_mailbox_post(mailbox_0, message);
		altera_avalon_mailbox_pend(mailbox_1);
		int time = perf_get_total_time ((void*) PERFORMANCE_COUNTER_0_BASE);
 8000cf8:	100d883a 	mov	r6,r2
		printf("Average time %d\n", time/(320*240));
 8000cfc:	1146b03a 	or	r3,r2,r5
 8000d00:	008003c4 	movi	r2,15
 8000d04:	10c02636 	bltu	r2,r3,8000da0 <main+0xba0>
 8000d08:	3004913a 	slli	r2,r6,4
 8000d0c:	1144b03a 	or	r2,r2,r5
 8000d10:	014200b4 	movhi	r5,2050
 8000d14:	2961bf04 	addi	r5,r5,-30980
 8000d18:	1145883a 	add	r2,r2,r5
 8000d1c:	11400003 	ldbu	r5,0(r2)
 8000d20:	01020074 	movhi	r4,2049
 8000d24:	211d0504 	addi	r4,r4,29716
 8000d28:	8004de00 	call	8004de0 <printf>
 8000d2c:	003e9506 	br	8000784 <main+0x584>
					weight4 /= 512*512;
					//reset rowf&colf values for pixel calculations
					rowf /= 512;
					colf /= 512;
					#endif
					int pixel1 = rowf*320*3 + colf*3;
 8000d30:	4a407fc4 	addi	r9,r9,511
 8000d34:	4805d27a 	srai	r2,r9,9
 8000d38:	1140f024 	muli	r5,r2,960
 8000d3c:	403f9e0e 	bge	r8,zero,8000bb8 <main+0x9b8>
 8000d40:	42007fc4 	addi	r8,r8,511
 8000d44:	003f9c06 	br	8000bb8 <main+0x9b8>
					//draw_pixel(row, col, my_image);
					alt_up_pixel_buffer_dma_draw(my_pixel_buffer,(in3 +(in2<<8) +(in1<<16)),j,i);
				}
			}
			if(bool_dec == 1) {
				scount+=0.1f;
 8000d48:	d0a7cf17 	ldw	r2,-24772(gp)
 8000d4c:	00cf7374 	movhi	r3,15821
 8000d50:	18f33344 	addi	r3,r3,-13107
				printf("scount is decrementing to:");
 8000d54:	01020074 	movhi	r4,2049
 8000d58:	211d1204 	addi	r4,r4,29768
					//draw_pixel(row, col, my_image);
					alt_up_pixel_buffer_dma_draw(my_pixel_buffer,(in3 +(in2<<8) +(in1<<16)),j,i);
				}
			}
			if(bool_dec == 1) {
				scount+=0.1f;
 8000d5c:	10c5ff72 	custom	253,r2,r2,r3
 8000d60:	d0a7cf15 	stw	r2,-24772(gp)
				printf("scount is decrementing to:");
 8000d64:	8004de00 	call	8004de0 <printf>
				printf("%f\n", scount);
 8000d68:	d127cf17 	ldw	r4,-24772(gp)
 8000d6c:	8002e180 	call	8002e18 <__extendsfdf2>
 8000d70:	100b883a 	mov	r5,r2
 8000d74:	01020074 	movhi	r4,2049
 8000d78:	211d1104 	addi	r4,r4,29764
 8000d7c:	180d883a 	mov	r6,r3
 8000d80:	8004de00 	call	8004de0 <printf>
				if (scount >=1.9f) {
 8000d84:	d127cf17 	ldw	r4,-24772(gp)
 8000d88:	014ffcf4 	movhi	r5,16371
 8000d8c:	294cccc4 	addi	r5,r5,13107
 8000d90:	8002b840 	call	8002b84 <__gesf2>
 8000d94:	103d5916 	blt	r2,zero,80002fc <main+0xfc>
					bool_dec = 0;
 8000d98:	d027ce15 	stw	zero,-24776(gp)
 8000d9c:	003d5706 	br	80002fc <main+0xfc>
				}

		altera_avalon_mailbox_post(mailbox_0, message);
		altera_avalon_mailbox_pend(mailbox_1);
		int time = perf_get_total_time ((void*) PERFORMANCE_COUNTER_0_BASE);
		printf("Average time %d\n", time/(320*240));
 8000da0:	3009883a 	mov	r4,r6
 8000da4:	8002f200 	call	8002f20 <__divsi3>
 8000da8:	100b883a 	mov	r5,r2
 8000dac:	003fdc06 	br	8000d20 <main+0xb20>

08000db0 <cosf>:
 8000db0:	00a00034 	movhi	r2,32768
 8000db4:	10bfffc4 	addi	r2,r2,-1
 8000db8:	defffd04 	addi	sp,sp,-12
 8000dbc:	110c703a 	and	r6,r2,r4
 8000dc0:	00cfd274 	movhi	r3,16201
 8000dc4:	18c3f604 	addi	r3,r3,4056
 8000dc8:	dfc00215 	stw	ra,8(sp)
 8000dcc:	200b883a 	mov	r5,r4
 8000dd0:	1980130e 	bge	r3,r6,8000e20 <cosf+0x70>
 8000dd4:	009fe034 	movhi	r2,32640
 8000dd8:	10bfffc4 	addi	r2,r2,-1
 8000ddc:	1180040e 	bge	r2,r6,8000df0 <cosf+0x40>
 8000de0:	80027e00 	call	80027e0 <__subsf3>
 8000de4:	dfc00217 	ldw	ra,8(sp)
 8000de8:	dec00304 	addi	sp,sp,12
 8000dec:	f800283a 	ret
 8000df0:	d80b883a 	mov	r5,sp
 8000df4:	80010440 	call	8001044 <__ieee754_rem_pio2f>
 8000df8:	118000cc 	andi	r6,r2,3
 8000dfc:	00c00044 	movi	r3,1
 8000e00:	30c00c26 	beq	r6,r3,8000e34 <cosf+0x84>
 8000e04:	00800084 	movi	r2,2
 8000e08:	30801426 	beq	r6,r2,8000e5c <cosf+0xac>
 8000e0c:	30000e1e 	bne	r6,zero,8000e48 <cosf+0x98>
 8000e10:	d9000017 	ldw	r4,0(sp)
 8000e14:	d9400117 	ldw	r5,4(sp)
 8000e18:	80015800 	call	8001580 <__kernel_cosf>
 8000e1c:	003ff106 	br	8000de4 <cosf+0x34>
 8000e20:	000b883a 	mov	r5,zero
 8000e24:	80015800 	call	8001580 <__kernel_cosf>
 8000e28:	dfc00217 	ldw	ra,8(sp)
 8000e2c:	dec00304 	addi	sp,sp,12
 8000e30:	f800283a 	ret
 8000e34:	d9000017 	ldw	r4,0(sp)
 8000e38:	d9400117 	ldw	r5,4(sp)
 8000e3c:	80022cc0 	call	80022cc <__kernel_sinf>
 8000e40:	10a0003c 	xorhi	r2,r2,32768
 8000e44:	003fe706 	br	8000de4 <cosf+0x34>
 8000e48:	d9000017 	ldw	r4,0(sp)
 8000e4c:	d9400117 	ldw	r5,4(sp)
 8000e50:	180d883a 	mov	r6,r3
 8000e54:	80022cc0 	call	80022cc <__kernel_sinf>
 8000e58:	003fe206 	br	8000de4 <cosf+0x34>
 8000e5c:	d9000017 	ldw	r4,0(sp)
 8000e60:	d9400117 	ldw	r5,4(sp)
 8000e64:	80015800 	call	8001580 <__kernel_cosf>
 8000e68:	10a0003c 	xorhi	r2,r2,32768
 8000e6c:	003fdd06 	br	8000de4 <cosf+0x34>

08000e70 <floorf>:
 8000e70:	defffc04 	addi	sp,sp,-16
 8000e74:	00a00034 	movhi	r2,32768
 8000e78:	10bfffc4 	addi	r2,r2,-1
 8000e7c:	dc400115 	stw	r17,4(sp)
 8000e80:	20a2703a 	and	r17,r4,r2
 8000e84:	8806d5fa 	srli	r3,r17,23
 8000e88:	dc000015 	stw	r16,0(sp)
 8000e8c:	00800584 	movi	r2,22
 8000e90:	1c3fe044 	addi	r16,r3,-127
 8000e94:	dc800215 	stw	r18,8(sp)
 8000e98:	dfc00315 	stw	ra,12(sp)
 8000e9c:	200b883a 	mov	r5,r4
 8000ea0:	2025883a 	mov	r18,r4
 8000ea4:	14001816 	blt	r2,r16,8000f08 <floorf+0x98>
 8000ea8:	80002316 	blt	r16,zero,8000f38 <floorf+0xc8>
 8000eac:	00802034 	movhi	r2,128
 8000eb0:	10bfffc4 	addi	r2,r2,-1
 8000eb4:	1423d83a 	sra	r17,r2,r16
 8000eb8:	2446703a 	and	r3,r4,r17
 8000ebc:	18000b26 	beq	r3,zero,8000eec <floorf+0x7c>
 8000ec0:	015c52b4 	movhi	r5,29002
 8000ec4:	297cb284 	addi	r5,r5,-3382
 8000ec8:	80028500 	call	8002850 <__addsf3>
 8000ecc:	1009883a 	mov	r4,r2
 8000ed0:	000b883a 	mov	r5,zero
 8000ed4:	8002b0c0 	call	8002b0c <__gtsf2>
 8000ed8:	0080030e 	bge	zero,r2,8000ee8 <floorf+0x78>
 8000edc:	90002116 	blt	r18,zero,8000f64 <floorf+0xf4>
 8000ee0:	0444303a 	nor	r2,zero,r17
 8000ee4:	90a4703a 	and	r18,r18,r2
 8000ee8:	900b883a 	mov	r5,r18
 8000eec:	2805883a 	mov	r2,r5
 8000ef0:	dfc00317 	ldw	ra,12(sp)
 8000ef4:	dc800217 	ldw	r18,8(sp)
 8000ef8:	dc400117 	ldw	r17,4(sp)
 8000efc:	dc000017 	ldw	r16,0(sp)
 8000f00:	dec00404 	addi	sp,sp,16
 8000f04:	f800283a 	ret
 8000f08:	009fe034 	movhi	r2,32640
 8000f0c:	10bfffc4 	addi	r2,r2,-1
 8000f10:	147ff62e 	bgeu	r2,r17,8000eec <floorf+0x7c>
 8000f14:	80028500 	call	8002850 <__addsf3>
 8000f18:	100b883a 	mov	r5,r2
 8000f1c:	2805883a 	mov	r2,r5
 8000f20:	dfc00317 	ldw	ra,12(sp)
 8000f24:	dc800217 	ldw	r18,8(sp)
 8000f28:	dc400117 	ldw	r17,4(sp)
 8000f2c:	dc000017 	ldw	r16,0(sp)
 8000f30:	dec00404 	addi	sp,sp,16
 8000f34:	f800283a 	ret
 8000f38:	015c52b4 	movhi	r5,29002
 8000f3c:	297cb284 	addi	r5,r5,-3382
 8000f40:	80028500 	call	8002850 <__addsf3>
 8000f44:	1009883a 	mov	r4,r2
 8000f48:	000b883a 	mov	r5,zero
 8000f4c:	8002b0c0 	call	8002b0c <__gtsf2>
 8000f50:	00bfe50e 	bge	zero,r2,8000ee8 <floorf+0x78>
 8000f54:	90000716 	blt	r18,zero,8000f74 <floorf+0x104>
 8000f58:	0025883a 	mov	r18,zero
 8000f5c:	900b883a 	mov	r5,r18
 8000f60:	003fe206 	br	8000eec <floorf+0x7c>
 8000f64:	00802034 	movhi	r2,128
 8000f68:	1405d83a 	sra	r2,r2,r16
 8000f6c:	90a5883a 	add	r18,r18,r2
 8000f70:	003fdb06 	br	8000ee0 <floorf+0x70>
 8000f74:	883fdc26 	beq	r17,zero,8000ee8 <floorf+0x78>
 8000f78:	04afe034 	movhi	r18,49024
 8000f7c:	900b883a 	mov	r5,r18
 8000f80:	003fda06 	br	8000eec <floorf+0x7c>

08000f84 <sinf>:
 8000f84:	00a00034 	movhi	r2,32768
 8000f88:	10bfffc4 	addi	r2,r2,-1
 8000f8c:	defffd04 	addi	sp,sp,-12
 8000f90:	110c703a 	and	r6,r2,r4
 8000f94:	00cfd274 	movhi	r3,16201
 8000f98:	18c3f604 	addi	r3,r3,4056
 8000f9c:	dfc00215 	stw	ra,8(sp)
 8000fa0:	200b883a 	mov	r5,r4
 8000fa4:	1980130e 	bge	r3,r6,8000ff4 <sinf+0x70>
 8000fa8:	009fe034 	movhi	r2,32640
 8000fac:	10bfffc4 	addi	r2,r2,-1
 8000fb0:	1180040e 	bge	r2,r6,8000fc4 <sinf+0x40>
 8000fb4:	80027e00 	call	80027e0 <__subsf3>
 8000fb8:	dfc00217 	ldw	ra,8(sp)
 8000fbc:	dec00304 	addi	sp,sp,12
 8000fc0:	f800283a 	ret
 8000fc4:	d80b883a 	mov	r5,sp
 8000fc8:	80010440 	call	8001044 <__ieee754_rem_pio2f>
 8000fcc:	10c000cc 	andi	r3,r2,3
 8000fd0:	01800044 	movi	r6,1
 8000fd4:	19800d26 	beq	r3,r6,800100c <sinf+0x88>
 8000fd8:	00800084 	movi	r2,2
 8000fdc:	18801426 	beq	r3,r2,8001030 <sinf+0xac>
 8000fe0:	18000e1e 	bne	r3,zero,800101c <sinf+0x98>
 8000fe4:	d9000017 	ldw	r4,0(sp)
 8000fe8:	d9400117 	ldw	r5,4(sp)
 8000fec:	80022cc0 	call	80022cc <__kernel_sinf>
 8000ff0:	003ff106 	br	8000fb8 <sinf+0x34>
 8000ff4:	000b883a 	mov	r5,zero
 8000ff8:	000d883a 	mov	r6,zero
 8000ffc:	80022cc0 	call	80022cc <__kernel_sinf>
 8001000:	dfc00217 	ldw	ra,8(sp)
 8001004:	dec00304 	addi	sp,sp,12
 8001008:	f800283a 	ret
 800100c:	d9000017 	ldw	r4,0(sp)
 8001010:	d9400117 	ldw	r5,4(sp)
 8001014:	80015800 	call	8001580 <__kernel_cosf>
 8001018:	003fe706 	br	8000fb8 <sinf+0x34>
 800101c:	d9000017 	ldw	r4,0(sp)
 8001020:	d9400117 	ldw	r5,4(sp)
 8001024:	80015800 	call	8001580 <__kernel_cosf>
 8001028:	10a0003c 	xorhi	r2,r2,32768
 800102c:	003fe206 	br	8000fb8 <sinf+0x34>
 8001030:	d9000017 	ldw	r4,0(sp)
 8001034:	d9400117 	ldw	r5,4(sp)
 8001038:	80022cc0 	call	80022cc <__kernel_sinf>
 800103c:	10a0003c 	xorhi	r2,r2,32768
 8001040:	003fdd06 	br	8000fb8 <sinf+0x34>

08001044 <__ieee754_rem_pio2f>:
 8001044:	defff104 	addi	sp,sp,-60
 8001048:	00a00034 	movhi	r2,32768
 800104c:	10bfffc4 	addi	r2,r2,-1
 8001050:	dcc00815 	stw	r19,32(sp)
 8001054:	20a6703a 	and	r19,r4,r2
 8001058:	008fd274 	movhi	r2,16201
 800105c:	1083f604 	addi	r2,r2,4056
 8001060:	dd800b15 	stw	r22,44(sp)
 8001064:	dd000915 	stw	r20,36(sp)
 8001068:	dfc00e15 	stw	ra,56(sp)
 800106c:	df000d15 	stw	fp,52(sp)
 8001070:	ddc00c15 	stw	r23,48(sp)
 8001074:	dd400a15 	stw	r21,40(sp)
 8001078:	dc800715 	stw	r18,28(sp)
 800107c:	dc400615 	stw	r17,24(sp)
 8001080:	dc000515 	stw	r16,20(sp)
 8001084:	202d883a 	mov	r22,r4
 8001088:	2829883a 	mov	r20,r5
 800108c:	14c01016 	blt	r2,r19,80010d0 <__ieee754_rem_pio2f+0x8c>
 8001090:	a1000015 	stw	r4,0(r20)
 8001094:	002b883a 	mov	r21,zero
 8001098:	28000115 	stw	zero,4(r5)
 800109c:	a805883a 	mov	r2,r21
 80010a0:	dfc00e17 	ldw	ra,56(sp)
 80010a4:	df000d17 	ldw	fp,52(sp)
 80010a8:	ddc00c17 	ldw	r23,48(sp)
 80010ac:	dd800b17 	ldw	r22,44(sp)
 80010b0:	dd400a17 	ldw	r21,40(sp)
 80010b4:	dd000917 	ldw	r20,36(sp)
 80010b8:	dcc00817 	ldw	r19,32(sp)
 80010bc:	dc800717 	ldw	r18,28(sp)
 80010c0:	dc400617 	ldw	r17,24(sp)
 80010c4:	dc000517 	ldw	r16,20(sp)
 80010c8:	dec00f04 	addi	sp,sp,60
 80010cc:	f800283a 	ret
 80010d0:	009005f4 	movhi	r2,16407
 80010d4:	10b2f8c4 	addi	r2,r2,-13341
 80010d8:	14c00c0e 	bge	r2,r19,800110c <__ieee754_rem_pio2f+0xc8>
 80010dc:	0090d274 	movhi	r2,17225
 80010e0:	1083e004 	addi	r2,r2,3968
 80010e4:	14c0220e 	bge	r2,r19,8001170 <__ieee754_rem_pio2f+0x12c>
 80010e8:	009fe034 	movhi	r2,32640
 80010ec:	10bfffc4 	addi	r2,r2,-1
 80010f0:	14c0930e 	bge	r2,r19,8001340 <__ieee754_rem_pio2f+0x2fc>
 80010f4:	200b883a 	mov	r5,r4
 80010f8:	80027e00 	call	80027e0 <__subsf3>
 80010fc:	002b883a 	mov	r21,zero
 8001100:	a0800015 	stw	r2,0(r20)
 8001104:	a0800115 	stw	r2,4(r20)
 8001108:	003fe406 	br	800109c <__ieee754_rem_pio2f+0x58>
 800110c:	0100740e 	bge	zero,r4,80012e0 <__ieee754_rem_pio2f+0x29c>
 8001110:	014ff274 	movhi	r5,16329
 8001114:	2943e004 	addi	r5,r5,3968
 8001118:	80027e00 	call	80027e0 <__subsf3>
 800111c:	1023883a 	mov	r17,r2
 8001120:	00bffc04 	movi	r2,-16
 8001124:	9884703a 	and	r2,r19,r2
 8001128:	00cff274 	movhi	r3,16329
 800112c:	18c3f404 	addi	r3,r3,4048
 8001130:	10c0c026 	beq	r2,r3,8001434 <__ieee754_rem_pio2f+0x3f0>
 8001134:	040dcd74 	movhi	r16,14133
 8001138:	841110c4 	addi	r16,r16,17475
 800113c:	8809883a 	mov	r4,r17
 8001140:	800b883a 	mov	r5,r16
 8001144:	80027e00 	call	80027e0 <__subsf3>
 8001148:	100b883a 	mov	r5,r2
 800114c:	8809883a 	mov	r4,r17
 8001150:	a0800015 	stw	r2,0(r20)
 8001154:	80027e00 	call	80027e0 <__subsf3>
 8001158:	1009883a 	mov	r4,r2
 800115c:	800b883a 	mov	r5,r16
 8001160:	80027e00 	call	80027e0 <__subsf3>
 8001164:	05400044 	movi	r21,1
 8001168:	a0800115 	stw	r2,4(r20)
 800116c:	003fcb06 	br	800109c <__ieee754_rem_pio2f+0x58>
 8001170:	80024880 	call	8002488 <fabsf>
 8001174:	1009883a 	mov	r4,r2
 8001178:	014fc8f4 	movhi	r5,16163
 800117c:	297e6104 	addi	r5,r5,-1660
 8001180:	1023883a 	mov	r17,r2
 8001184:	80028b40 	call	80028b4 <__mulsf3>
 8001188:	1009883a 	mov	r4,r2
 800118c:	014fc034 	movhi	r5,16128
 8001190:	80028500 	call	8002850 <__addsf3>
 8001194:	1009883a 	mov	r4,r2
 8001198:	8002d840 	call	8002d84 <__fixsfsi>
 800119c:	1009883a 	mov	r4,r2
 80011a0:	102b883a 	mov	r21,r2
 80011a4:	8002cec0 	call	8002cec <__floatsisf>
 80011a8:	1009883a 	mov	r4,r2
 80011ac:	016ff274 	movhi	r5,49097
 80011b0:	2943e004 	addi	r5,r5,3968
 80011b4:	1021883a 	mov	r16,r2
 80011b8:	80028b40 	call	80028b4 <__mulsf3>
 80011bc:	100b883a 	mov	r5,r2
 80011c0:	8809883a 	mov	r4,r17
 80011c4:	80028500 	call	8002850 <__addsf3>
 80011c8:	014dcd74 	movhi	r5,14133
 80011cc:	295110c4 	addi	r5,r5,17475
 80011d0:	8009883a 	mov	r4,r16
 80011d4:	102f883a 	mov	r23,r2
 80011d8:	80028b40 	call	80028b4 <__mulsf3>
 80011dc:	100b883a 	mov	r5,r2
 80011e0:	1023883a 	mov	r17,r2
 80011e4:	008007c4 	movi	r2,31
 80011e8:	8039883a 	mov	fp,r16
 80011ec:	b825883a 	mov	r18,r23
 80011f0:	1540a40e 	bge	r2,r21,8001484 <__ieee754_rem_pio2f+0x440>
 80011f4:	9009883a 	mov	r4,r18
 80011f8:	880b883a 	mov	r5,r17
 80011fc:	80027e00 	call	80027e0 <__subsf3>
 8001200:	1006d5fa 	srli	r3,r2,23
 8001204:	982fd5fa 	srai	r23,r19,23
 8001208:	a0800015 	stw	r2,0(r20)
 800120c:	18c03fcc 	andi	r3,r3,255
 8001210:	b8c7c83a 	sub	r3,r23,r3
 8001214:	00800204 	movi	r2,8
 8001218:	10c0220e 	bge	r2,r3,80012a4 <__ieee754_rem_pio2f+0x260>
 800121c:	e009883a 	mov	r4,fp
 8001220:	014dcd74 	movhi	r5,14133
 8001224:	29510004 	addi	r5,r5,17408
 8001228:	80028b40 	call	80028b4 <__mulsf3>
 800122c:	100b883a 	mov	r5,r2
 8001230:	9009883a 	mov	r4,r18
 8001234:	1023883a 	mov	r17,r2
 8001238:	80027e00 	call	80027e0 <__subsf3>
 800123c:	1027883a 	mov	r19,r2
 8001240:	e009883a 	mov	r4,fp
 8001244:	014ba1b4 	movhi	r5,11910
 8001248:	2968c204 	addi	r5,r5,-23800
 800124c:	80028b40 	call	80028b4 <__mulsf3>
 8001250:	9009883a 	mov	r4,r18
 8001254:	980b883a 	mov	r5,r19
 8001258:	1021883a 	mov	r16,r2
 800125c:	80027e00 	call	80027e0 <__subsf3>
 8001260:	1009883a 	mov	r4,r2
 8001264:	880b883a 	mov	r5,r17
 8001268:	80027e00 	call	80027e0 <__subsf3>
 800126c:	100b883a 	mov	r5,r2
 8001270:	8009883a 	mov	r4,r16
 8001274:	80027e00 	call	80027e0 <__subsf3>
 8001278:	100b883a 	mov	r5,r2
 800127c:	9809883a 	mov	r4,r19
 8001280:	1023883a 	mov	r17,r2
 8001284:	80027e00 	call	80027e0 <__subsf3>
 8001288:	1006d5fa 	srli	r3,r2,23
 800128c:	a0800015 	stw	r2,0(r20)
 8001290:	00800644 	movi	r2,25
 8001294:	18c03fcc 	andi	r3,r3,255
 8001298:	b8c7c83a 	sub	r3,r23,r3
 800129c:	10c09a16 	blt	r2,r3,8001508 <__ieee754_rem_pio2f+0x4c4>
 80012a0:	9825883a 	mov	r18,r19
 80012a4:	a1400017 	ldw	r5,0(r20)
 80012a8:	9009883a 	mov	r4,r18
 80012ac:	80027e00 	call	80027e0 <__subsf3>
 80012b0:	1009883a 	mov	r4,r2
 80012b4:	880b883a 	mov	r5,r17
 80012b8:	80027e00 	call	80027e0 <__subsf3>
 80012bc:	a0800115 	stw	r2,4(r20)
 80012c0:	b03f760e 	bge	r22,zero,800109c <__ieee754_rem_pio2f+0x58>
 80012c4:	a0c00017 	ldw	r3,0(r20)
 80012c8:	10a0003c 	xorhi	r2,r2,32768
 80012cc:	056bc83a 	sub	r21,zero,r21
 80012d0:	18e0003c 	xorhi	r3,r3,32768
 80012d4:	a0800115 	stw	r2,4(r20)
 80012d8:	a0c00015 	stw	r3,0(r20)
 80012dc:	003f6f06 	br	800109c <__ieee754_rem_pio2f+0x58>
 80012e0:	014ff274 	movhi	r5,16329
 80012e4:	2943e004 	addi	r5,r5,3968
 80012e8:	80028500 	call	8002850 <__addsf3>
 80012ec:	1023883a 	mov	r17,r2
 80012f0:	00bffc04 	movi	r2,-16
 80012f4:	9884703a 	and	r2,r19,r2
 80012f8:	00cff274 	movhi	r3,16329
 80012fc:	18c3f404 	addi	r3,r3,4048
 8001300:	10c06d26 	beq	r2,r3,80014b8 <__ieee754_rem_pio2f+0x474>
 8001304:	040dcd74 	movhi	r16,14133
 8001308:	841110c4 	addi	r16,r16,17475
 800130c:	8809883a 	mov	r4,r17
 8001310:	800b883a 	mov	r5,r16
 8001314:	80028500 	call	8002850 <__addsf3>
 8001318:	100b883a 	mov	r5,r2
 800131c:	8809883a 	mov	r4,r17
 8001320:	a0800015 	stw	r2,0(r20)
 8001324:	80027e00 	call	80027e0 <__subsf3>
 8001328:	1009883a 	mov	r4,r2
 800132c:	800b883a 	mov	r5,r16
 8001330:	80028500 	call	8002850 <__addsf3>
 8001334:	057fffc4 	movi	r21,-1
 8001338:	a0800115 	stw	r2,4(r20)
 800133c:	003f5706 	br	800109c <__ieee754_rem_pio2f+0x58>
 8001340:	9805d5fa 	srai	r2,r19,23
 8001344:	0490e034 	movhi	r18,17280
 8001348:	054000c4 	movi	r21,3
 800134c:	15ffde84 	addi	r23,r2,-134
 8001350:	b82295fa 	slli	r17,r23,23
 8001354:	9c63c83a 	sub	r17,r19,r17
 8001358:	8809883a 	mov	r4,r17
 800135c:	8002d840 	call	8002d84 <__fixsfsi>
 8001360:	1009883a 	mov	r4,r2
 8001364:	8002cec0 	call	8002cec <__floatsisf>
 8001368:	100b883a 	mov	r5,r2
 800136c:	8809883a 	mov	r4,r17
 8001370:	d8800215 	stw	r2,8(sp)
 8001374:	80027e00 	call	80027e0 <__subsf3>
 8001378:	1009883a 	mov	r4,r2
 800137c:	900b883a 	mov	r5,r18
 8001380:	80028b40 	call	80028b4 <__mulsf3>
 8001384:	1009883a 	mov	r4,r2
 8001388:	1021883a 	mov	r16,r2
 800138c:	8002d840 	call	8002d84 <__fixsfsi>
 8001390:	1009883a 	mov	r4,r2
 8001394:	8002cec0 	call	8002cec <__floatsisf>
 8001398:	100b883a 	mov	r5,r2
 800139c:	8009883a 	mov	r4,r16
 80013a0:	d8800315 	stw	r2,12(sp)
 80013a4:	80027e00 	call	80027e0 <__subsf3>
 80013a8:	1009883a 	mov	r4,r2
 80013ac:	900b883a 	mov	r5,r18
 80013b0:	80028b40 	call	80028b4 <__mulsf3>
 80013b4:	d8800415 	stw	r2,16(sp)
 80013b8:	00000106 	br	80013c0 <__ieee754_rem_pio2f+0x37c>
 80013bc:	802b883a 	mov	r21,r16
 80013c0:	ac3fffc4 	addi	r16,r21,-1
 80013c4:	8405883a 	add	r2,r16,r16
 80013c8:	1085883a 	add	r2,r2,r2
 80013cc:	d8c00204 	addi	r3,sp,8
 80013d0:	10c5883a 	add	r2,r2,r3
 80013d4:	11000017 	ldw	r4,0(r2)
 80013d8:	000b883a 	mov	r5,zero
 80013dc:	8002a940 	call	8002a94 <__eqsf2>
 80013e0:	103ff626 	beq	r2,zero,80013bc <__ieee754_rem_pio2f+0x378>
 80013e4:	a80f883a 	mov	r7,r21
 80013e8:	00800084 	movi	r2,2
 80013ec:	00c20074 	movhi	r3,2049
 80013f0:	18dd4004 	addi	r3,r3,29952
 80013f4:	b80d883a 	mov	r6,r23
 80013f8:	d9000204 	addi	r4,sp,8
 80013fc:	a00b883a 	mov	r5,r20
 8001400:	d8800015 	stw	r2,0(sp)
 8001404:	d8c00115 	stw	r3,4(sp)
 8001408:	800183c0 	call	800183c <__kernel_rem_pio2f>
 800140c:	102b883a 	mov	r21,r2
 8001410:	b03f220e 	bge	r22,zero,800109c <__ieee754_rem_pio2f+0x58>
 8001414:	a0c00017 	ldw	r3,0(r20)
 8001418:	a0800117 	ldw	r2,4(r20)
 800141c:	056bc83a 	sub	r21,zero,r21
 8001420:	18e0003c 	xorhi	r3,r3,32768
 8001424:	10a0003c 	xorhi	r2,r2,32768
 8001428:	a0800115 	stw	r2,4(r20)
 800142c:	a0c00015 	stw	r3,0(r20)
 8001430:	003f1a06 	br	800109c <__ieee754_rem_pio2f+0x58>
 8001434:	8809883a 	mov	r4,r17
 8001438:	014dcd74 	movhi	r5,14133
 800143c:	29510004 	addi	r5,r5,17408
 8001440:	80027e00 	call	80027e0 <__subsf3>
 8001444:	044ba1b4 	movhi	r17,11910
 8001448:	8c68c204 	addi	r17,r17,-23800
 800144c:	1009883a 	mov	r4,r2
 8001450:	880b883a 	mov	r5,r17
 8001454:	1021883a 	mov	r16,r2
 8001458:	80027e00 	call	80027e0 <__subsf3>
 800145c:	100b883a 	mov	r5,r2
 8001460:	8009883a 	mov	r4,r16
 8001464:	a0800015 	stw	r2,0(r20)
 8001468:	80027e00 	call	80027e0 <__subsf3>
 800146c:	1009883a 	mov	r4,r2
 8001470:	880b883a 	mov	r5,r17
 8001474:	80027e00 	call	80027e0 <__subsf3>
 8001478:	05400044 	movi	r21,1
 800147c:	a0800115 	stw	r2,4(r20)
 8001480:	003f0606 	br	800109c <__ieee754_rem_pio2f+0x58>
 8001484:	ad47883a 	add	r3,r21,r21
 8001488:	00820074 	movhi	r2,2049
 800148c:	109d2004 	addi	r2,r2,29824
 8001490:	18c7883a 	add	r3,r3,r3
 8001494:	1887883a 	add	r3,r3,r2
 8001498:	193fff17 	ldw	r4,-4(r3)
 800149c:	00bfc004 	movi	r2,-256
 80014a0:	9884703a 	and	r2,r19,r2
 80014a4:	113f5326 	beq	r2,r4,80011f4 <__ieee754_rem_pio2f+0x1b0>
 80014a8:	b809883a 	mov	r4,r23
 80014ac:	80027e00 	call	80027e0 <__subsf3>
 80014b0:	a0800015 	stw	r2,0(r20)
 80014b4:	003f7b06 	br	80012a4 <__ieee754_rem_pio2f+0x260>
 80014b8:	8809883a 	mov	r4,r17
 80014bc:	014dcd74 	movhi	r5,14133
 80014c0:	29510004 	addi	r5,r5,17408
 80014c4:	80028500 	call	8002850 <__addsf3>
 80014c8:	044ba1b4 	movhi	r17,11910
 80014cc:	8c68c204 	addi	r17,r17,-23800
 80014d0:	1009883a 	mov	r4,r2
 80014d4:	880b883a 	mov	r5,r17
 80014d8:	1021883a 	mov	r16,r2
 80014dc:	80028500 	call	8002850 <__addsf3>
 80014e0:	100b883a 	mov	r5,r2
 80014e4:	8009883a 	mov	r4,r16
 80014e8:	a0800015 	stw	r2,0(r20)
 80014ec:	80027e00 	call	80027e0 <__subsf3>
 80014f0:	1009883a 	mov	r4,r2
 80014f4:	880b883a 	mov	r5,r17
 80014f8:	80028500 	call	8002850 <__addsf3>
 80014fc:	057fffc4 	movi	r21,-1
 8001500:	a0800115 	stw	r2,4(r20)
 8001504:	003ee506 	br	800109c <__ieee754_rem_pio2f+0x58>
 8001508:	e009883a 	mov	r4,fp
 800150c:	014ba1b4 	movhi	r5,11910
 8001510:	2968c004 	addi	r5,r5,-23808
 8001514:	80028b40 	call	80028b4 <__mulsf3>
 8001518:	100b883a 	mov	r5,r2
 800151c:	9809883a 	mov	r4,r19
 8001520:	1025883a 	mov	r18,r2
 8001524:	80027e00 	call	80027e0 <__subsf3>
 8001528:	1021883a 	mov	r16,r2
 800152c:	e009883a 	mov	r4,fp
 8001530:	01492374 	movhi	r5,9357
 8001534:	294c4c84 	addi	r5,r5,12594
 8001538:	80028b40 	call	80028b4 <__mulsf3>
 800153c:	9809883a 	mov	r4,r19
 8001540:	800b883a 	mov	r5,r16
 8001544:	1023883a 	mov	r17,r2
 8001548:	80027e00 	call	80027e0 <__subsf3>
 800154c:	1009883a 	mov	r4,r2
 8001550:	900b883a 	mov	r5,r18
 8001554:	80027e00 	call	80027e0 <__subsf3>
 8001558:	100b883a 	mov	r5,r2
 800155c:	8809883a 	mov	r4,r17
 8001560:	80027e00 	call	80027e0 <__subsf3>
 8001564:	100b883a 	mov	r5,r2
 8001568:	8009883a 	mov	r4,r16
 800156c:	1023883a 	mov	r17,r2
 8001570:	8025883a 	mov	r18,r16
 8001574:	80027e00 	call	80027e0 <__subsf3>
 8001578:	a0800015 	stw	r2,0(r20)
 800157c:	003f4906 	br	80012a4 <__ieee754_rem_pio2f+0x260>

08001580 <__kernel_cosf>:
 8001580:	defff904 	addi	sp,sp,-28
 8001584:	00a00034 	movhi	r2,32768
 8001588:	10bfffc4 	addi	r2,r2,-1
 800158c:	dc400115 	stw	r17,4(sp)
 8001590:	1122703a 	and	r17,r2,r4
 8001594:	008c8034 	movhi	r2,12800
 8001598:	10bfffc4 	addi	r2,r2,-1
 800159c:	dd400515 	stw	r21,20(sp)
 80015a0:	dcc00315 	stw	r19,12(sp)
 80015a4:	dfc00615 	stw	ra,24(sp)
 80015a8:	dd000415 	stw	r20,16(sp)
 80015ac:	dc800215 	stw	r18,8(sp)
 80015b0:	dc000015 	stw	r16,0(sp)
 80015b4:	2027883a 	mov	r19,r4
 80015b8:	282b883a 	mov	r21,r5
 80015bc:	14404b16 	blt	r2,r17,80016ec <__kernel_cosf+0x16c>
 80015c0:	8002d840 	call	8002d84 <__fixsfsi>
 80015c4:	10009326 	beq	r2,zero,8001814 <__kernel_cosf+0x294>
 80015c8:	9809883a 	mov	r4,r19
 80015cc:	980b883a 	mov	r5,r19
 80015d0:	80028b40 	call	80028b4 <__mulsf3>
 80015d4:	1009883a 	mov	r4,r2
 80015d8:	016b5234 	movhi	r5,44360
 80015dc:	2975d384 	addi	r5,r5,-10418
 80015e0:	1021883a 	mov	r16,r2
 80015e4:	80028b40 	call	80028b4 <__mulsf3>
 80015e8:	1009883a 	mov	r4,r2
 80015ec:	014c43f4 	movhi	r5,12559
 80015f0:	295d3d84 	addi	r5,r5,29942
 80015f4:	80028500 	call	8002850 <__addsf3>
 80015f8:	100b883a 	mov	r5,r2
 80015fc:	8009883a 	mov	r4,r16
 8001600:	80028b40 	call	80028b4 <__mulsf3>
 8001604:	1009883a 	mov	r4,r2
 8001608:	014d2534 	movhi	r5,13460
 800160c:	297c9f04 	addi	r5,r5,-3460
 8001610:	80027e00 	call	80027e0 <__subsf3>
 8001614:	100b883a 	mov	r5,r2
 8001618:	8009883a 	mov	r4,r16
 800161c:	80028b40 	call	80028b4 <__mulsf3>
 8001620:	1009883a 	mov	r4,r2
 8001624:	014df434 	movhi	r5,14288
 8001628:	29434044 	addi	r5,r5,3329
 800162c:	80028500 	call	8002850 <__addsf3>
 8001630:	100b883a 	mov	r5,r2
 8001634:	8009883a 	mov	r4,r16
 8001638:	80028b40 	call	80028b4 <__mulsf3>
 800163c:	1009883a 	mov	r4,r2
 8001640:	014eadb4 	movhi	r5,15030
 8001644:	2942d844 	addi	r5,r5,2913
 8001648:	80027e00 	call	80027e0 <__subsf3>
 800164c:	100b883a 	mov	r5,r2
 8001650:	8009883a 	mov	r4,r16
 8001654:	80028b40 	call	80028b4 <__mulsf3>
 8001658:	1009883a 	mov	r4,r2
 800165c:	014f4af4 	movhi	r5,15659
 8001660:	296aaac4 	addi	r5,r5,-21845
 8001664:	80028500 	call	8002850 <__addsf3>
 8001668:	100b883a 	mov	r5,r2
 800166c:	8009883a 	mov	r4,r16
 8001670:	80028b40 	call	80028b4 <__mulsf3>
 8001674:	1025883a 	mov	r18,r2
 8001678:	8009883a 	mov	r4,r16
 800167c:	014fc034 	movhi	r5,16128
 8001680:	80028b40 	call	80028b4 <__mulsf3>
 8001684:	8009883a 	mov	r4,r16
 8001688:	900b883a 	mov	r5,r18
 800168c:	1023883a 	mov	r17,r2
 8001690:	80028b40 	call	80028b4 <__mulsf3>
 8001694:	9809883a 	mov	r4,r19
 8001698:	a80b883a 	mov	r5,r21
 800169c:	1021883a 	mov	r16,r2
 80016a0:	80028b40 	call	80028b4 <__mulsf3>
 80016a4:	100b883a 	mov	r5,r2
 80016a8:	8009883a 	mov	r4,r16
 80016ac:	80027e00 	call	80027e0 <__subsf3>
 80016b0:	100b883a 	mov	r5,r2
 80016b4:	8809883a 	mov	r4,r17
 80016b8:	80027e00 	call	80027e0 <__subsf3>
 80016bc:	100b883a 	mov	r5,r2
 80016c0:	010fe034 	movhi	r4,16256
 80016c4:	80027e00 	call	80027e0 <__subsf3>
 80016c8:	dfc00617 	ldw	ra,24(sp)
 80016cc:	dd400517 	ldw	r21,20(sp)
 80016d0:	dd000417 	ldw	r20,16(sp)
 80016d4:	dcc00317 	ldw	r19,12(sp)
 80016d8:	dc800217 	ldw	r18,8(sp)
 80016dc:	dc400117 	ldw	r17,4(sp)
 80016e0:	dc000017 	ldw	r16,0(sp)
 80016e4:	dec00704 	addi	sp,sp,28
 80016e8:	f800283a 	ret
 80016ec:	200b883a 	mov	r5,r4
 80016f0:	80028b40 	call	80028b4 <__mulsf3>
 80016f4:	1009883a 	mov	r4,r2
 80016f8:	016b5234 	movhi	r5,44360
 80016fc:	2975d384 	addi	r5,r5,-10418
 8001700:	1021883a 	mov	r16,r2
 8001704:	80028b40 	call	80028b4 <__mulsf3>
 8001708:	1009883a 	mov	r4,r2
 800170c:	014c43f4 	movhi	r5,12559
 8001710:	295d3d84 	addi	r5,r5,29942
 8001714:	80028500 	call	8002850 <__addsf3>
 8001718:	100b883a 	mov	r5,r2
 800171c:	8009883a 	mov	r4,r16
 8001720:	80028b40 	call	80028b4 <__mulsf3>
 8001724:	1009883a 	mov	r4,r2
 8001728:	014d2534 	movhi	r5,13460
 800172c:	297c9f04 	addi	r5,r5,-3460
 8001730:	80027e00 	call	80027e0 <__subsf3>
 8001734:	100b883a 	mov	r5,r2
 8001738:	8009883a 	mov	r4,r16
 800173c:	80028b40 	call	80028b4 <__mulsf3>
 8001740:	1009883a 	mov	r4,r2
 8001744:	014df434 	movhi	r5,14288
 8001748:	29434044 	addi	r5,r5,3329
 800174c:	80028500 	call	8002850 <__addsf3>
 8001750:	100b883a 	mov	r5,r2
 8001754:	8009883a 	mov	r4,r16
 8001758:	80028b40 	call	80028b4 <__mulsf3>
 800175c:	1009883a 	mov	r4,r2
 8001760:	014eadb4 	movhi	r5,15030
 8001764:	2942d844 	addi	r5,r5,2913
 8001768:	80027e00 	call	80027e0 <__subsf3>
 800176c:	100b883a 	mov	r5,r2
 8001770:	8009883a 	mov	r4,r16
 8001774:	80028b40 	call	80028b4 <__mulsf3>
 8001778:	1009883a 	mov	r4,r2
 800177c:	014f4af4 	movhi	r5,15659
 8001780:	296aaac4 	addi	r5,r5,-21845
 8001784:	80028500 	call	8002850 <__addsf3>
 8001788:	100b883a 	mov	r5,r2
 800178c:	8009883a 	mov	r4,r16
 8001790:	80028b40 	call	80028b4 <__mulsf3>
 8001794:	1025883a 	mov	r18,r2
 8001798:	008fa6b4 	movhi	r2,16026
 800179c:	10a66644 	addi	r2,r2,-26215
 80017a0:	147fb50e 	bge	r2,r17,8001678 <__kernel_cosf+0xf8>
 80017a4:	008fd234 	movhi	r2,16200
 80017a8:	14401c0e 	bge	r2,r17,800181c <__kernel_cosf+0x29c>
 80017ac:	044fa434 	movhi	r17,16016
 80017b0:	050fce34 	movhi	r20,16184
 80017b4:	8009883a 	mov	r4,r16
 80017b8:	014fc034 	movhi	r5,16128
 80017bc:	80028b40 	call	80028b4 <__mulsf3>
 80017c0:	1009883a 	mov	r4,r2
 80017c4:	880b883a 	mov	r5,r17
 80017c8:	80027e00 	call	80027e0 <__subsf3>
 80017cc:	8009883a 	mov	r4,r16
 80017d0:	900b883a 	mov	r5,r18
 80017d4:	1023883a 	mov	r17,r2
 80017d8:	80028b40 	call	80028b4 <__mulsf3>
 80017dc:	9809883a 	mov	r4,r19
 80017e0:	a80b883a 	mov	r5,r21
 80017e4:	1021883a 	mov	r16,r2
 80017e8:	80028b40 	call	80028b4 <__mulsf3>
 80017ec:	100b883a 	mov	r5,r2
 80017f0:	8009883a 	mov	r4,r16
 80017f4:	80027e00 	call	80027e0 <__subsf3>
 80017f8:	100b883a 	mov	r5,r2
 80017fc:	8809883a 	mov	r4,r17
 8001800:	80027e00 	call	80027e0 <__subsf3>
 8001804:	100b883a 	mov	r5,r2
 8001808:	a009883a 	mov	r4,r20
 800180c:	80027e00 	call	80027e0 <__subsf3>
 8001810:	003fad06 	br	80016c8 <__kernel_cosf+0x148>
 8001814:	008fe034 	movhi	r2,16256
 8001818:	003fab06 	br	80016c8 <__kernel_cosf+0x148>
 800181c:	00bfc034 	movhi	r2,65280
 8001820:	8885883a 	add	r2,r17,r2
 8001824:	100b883a 	mov	r5,r2
 8001828:	010fe034 	movhi	r4,16256
 800182c:	1023883a 	mov	r17,r2
 8001830:	80027e00 	call	80027e0 <__subsf3>
 8001834:	1029883a 	mov	r20,r2
 8001838:	003fde06 	br	80017b4 <__kernel_cosf+0x234>

0800183c <__kernel_rem_pio2f>:
 800183c:	deff9804 	addi	sp,sp,-416
 8001840:	d8806817 	ldw	r2,416(sp)
 8001844:	ddc06515 	stw	r23,404(sp)
 8001848:	dfc06715 	stw	ra,412(sp)
 800184c:	1087883a 	add	r3,r2,r2
 8001850:	18c7883a 	add	r3,r3,r3
 8001854:	00820074 	movhi	r2,2049
 8001858:	109e0604 	addi	r2,r2,30744
 800185c:	1887883a 	add	r3,r3,r2
 8001860:	1dc00017 	ldw	r23,0(r3)
 8001864:	30bfff44 	addi	r2,r6,-3
 8001868:	38ffffc4 	addi	r3,r7,-1
 800186c:	df006615 	stw	fp,408(sp)
 8001870:	dd806415 	stw	r22,400(sp)
 8001874:	dd406315 	stw	r21,396(sp)
 8001878:	dd006215 	stw	r20,392(sp)
 800187c:	dcc06115 	stw	r19,388(sp)
 8001880:	dc806015 	stw	r18,384(sp)
 8001884:	dc405f15 	stw	r17,380(sp)
 8001888:	dc005e15 	stw	r16,376(sp)
 800188c:	d9c05915 	stw	r7,356(sp)
 8001890:	d9005715 	stw	r4,348(sp)
 8001894:	d9405815 	stw	r5,352(sp)
 8001898:	d8c05615 	stw	r3,344(sp)
 800189c:	10024716 	blt	r2,zero,80021bc <__kernel_rem_pio2f+0x980>
 80018a0:	1005d0fa 	srai	r2,r2,3
 80018a4:	d8805015 	stw	r2,320(sp)
 80018a8:	10024816 	blt	r2,zero,80021cc <__kernel_rem_pio2f+0x990>
 80018ac:	d9005017 	ldw	r4,320(sp)
 80018b0:	d9405617 	ldw	r5,344(sp)
 80018b4:	20bffe24 	muli	r2,r4,-8
 80018b8:	b947883a 	add	r3,r23,r5
 80018bc:	3085883a 	add	r2,r6,r2
 80018c0:	173ffe04 	addi	fp,r2,-8
 80018c4:	18001116 	blt	r3,zero,800190c <__kernel_rem_pio2f+0xd0>
 80018c8:	2161c83a 	sub	r16,r4,r5
 80018cc:	d9c06917 	ldw	r7,420(sp)
 80018d0:	8405883a 	add	r2,r16,r16
 80018d4:	1085883a 	add	r2,r2,r2
 80018d8:	38a3883a 	add	r17,r7,r2
 80018dc:	80e7883a 	add	r19,r16,r3
 80018e0:	dc801404 	addi	r18,sp,80
 80018e4:	00000106 	br	80018ec <__kernel_rem_pio2f+0xb0>
 80018e8:	84000044 	addi	r16,r16,1
 80018ec:	0005883a 	mov	r2,zero
 80018f0:	80000216 	blt	r16,zero,80018fc <__kernel_rem_pio2f+0xc0>
 80018f4:	89000017 	ldw	r4,0(r17)
 80018f8:	8002cec0 	call	8002cec <__floatsisf>
 80018fc:	90800015 	stw	r2,0(r18)
 8001900:	8c400104 	addi	r17,r17,4
 8001904:	94800104 	addi	r18,r18,4
 8001908:	84fff71e 	bne	r16,r19,80018e8 <__kernel_rem_pio2f+0xac>
 800190c:	b8001c16 	blt	r23,zero,8001980 <__kernel_rem_pio2f+0x144>
 8001910:	dcc05617 	ldw	r19,344(sp)
 8001914:	da005917 	ldw	r8,356(sp)
 8001918:	dd003c04 	addi	r20,sp,240
 800191c:	982a403a 	cmpge	r21,r19,zero
 8001920:	ba2d883a 	add	r22,r23,r8
 8001924:	a801ad26 	beq	r21,zero,8001fdc <__kernel_rem_pio2f+0x7a0>
 8001928:	dc405717 	ldw	r17,348(sp)
 800192c:	0021883a 	mov	r16,zero
 8001930:	0025883a 	mov	r18,zero
 8001934:	9c05c83a 	sub	r2,r19,r16
 8001938:	1085883a 	add	r2,r2,r2
 800193c:	1085883a 	add	r2,r2,r2
 8001940:	16c5883a 	add	r2,r2,sp
 8001944:	89000017 	ldw	r4,0(r17)
 8001948:	11401417 	ldw	r5,80(r2)
 800194c:	84000044 	addi	r16,r16,1
 8001950:	8c400104 	addi	r17,r17,4
 8001954:	80028b40 	call	80028b4 <__mulsf3>
 8001958:	100b883a 	mov	r5,r2
 800195c:	9009883a 	mov	r4,r18
 8001960:	80028500 	call	8002850 <__addsf3>
 8001964:	1025883a 	mov	r18,r2
 8001968:	d8805917 	ldw	r2,356(sp)
 800196c:	143ff11e 	bne	r2,r16,8001934 <__kernel_rem_pio2f+0xf8>
 8001970:	9cc00044 	addi	r19,r19,1
 8001974:	a4800015 	stw	r18,0(r20)
 8001978:	a5000104 	addi	r20,r20,4
 800197c:	9dbfe91e 	bne	r19,r22,8001924 <__kernel_rem_pio2f+0xe8>
 8001980:	bdc5883a 	add	r2,r23,r23
 8001984:	d9005617 	ldw	r4,344(sp)
 8001988:	15c7883a 	add	r3,r2,r23
 800198c:	1dc7883a 	add	r3,r3,r23
 8001990:	1085883a 	add	r2,r2,r2
 8001994:	2008403a 	cmpge	r4,r4,zero
 8001998:	16c5883a 	add	r2,r2,sp
 800199c:	1ec7883a 	add	r3,r3,sp
 80019a0:	e1400050 	cmplti	r5,fp,1
 80019a4:	b82d883a 	mov	r22,r23
 80019a8:	d9005d15 	stw	r4,372(sp)
 80019ac:	d8805a15 	stw	r2,360(sp)
 80019b0:	d8c05c15 	stw	r3,368(sp)
 80019b4:	d9405b15 	stw	r5,364(sp)
 80019b8:	b5a3883a 	add	r17,r22,r22
 80019bc:	8c45883a 	add	r2,r17,r17
 80019c0:	16c5883a 	add	r2,r2,sp
 80019c4:	14803c17 	ldw	r18,240(r2)
 80019c8:	05801c0e 	bge	zero,r22,8001a3c <__kernel_rem_pio2f+0x200>
 80019cc:	15003c04 	addi	r20,r2,240
 80019d0:	b027883a 	mov	r19,r22
 80019d4:	d82b883a 	mov	r21,sp
 80019d8:	014ee034 	movhi	r5,15232
 80019dc:	9009883a 	mov	r4,r18
 80019e0:	80028b40 	call	80028b4 <__mulsf3>
 80019e4:	1009883a 	mov	r4,r2
 80019e8:	8002d840 	call	8002d84 <__fixsfsi>
 80019ec:	1009883a 	mov	r4,r2
 80019f0:	8002cec0 	call	8002cec <__floatsisf>
 80019f4:	1009883a 	mov	r4,r2
 80019f8:	0170e034 	movhi	r5,50048
 80019fc:	1021883a 	mov	r16,r2
 8001a00:	80028b40 	call	80028b4 <__mulsf3>
 8001a04:	1009883a 	mov	r4,r2
 8001a08:	900b883a 	mov	r5,r18
 8001a0c:	80028500 	call	8002850 <__addsf3>
 8001a10:	1009883a 	mov	r4,r2
 8001a14:	8002d840 	call	8002d84 <__fixsfsi>
 8001a18:	a8800015 	stw	r2,0(r21)
 8001a1c:	a53fff04 	addi	r20,r20,-4
 8001a20:	a1400017 	ldw	r5,0(r20)
 8001a24:	8009883a 	mov	r4,r16
 8001a28:	9cffffc4 	addi	r19,r19,-1
 8001a2c:	80028500 	call	8002850 <__addsf3>
 8001a30:	1025883a 	mov	r18,r2
 8001a34:	ad400104 	addi	r21,r21,4
 8001a38:	983fe71e 	bne	r19,zero,80019d8 <__kernel_rem_pio2f+0x19c>
 8001a3c:	9009883a 	mov	r4,r18
 8001a40:	e00b883a 	mov	r5,fp
 8001a44:	80024980 	call	8002498 <scalbnf>
 8001a48:	1009883a 	mov	r4,r2
 8001a4c:	014f8034 	movhi	r5,15872
 8001a50:	1021883a 	mov	r16,r2
 8001a54:	80028b40 	call	80028b4 <__mulsf3>
 8001a58:	1009883a 	mov	r4,r2
 8001a5c:	8000e700 	call	8000e70 <floorf>
 8001a60:	1009883a 	mov	r4,r2
 8001a64:	01704034 	movhi	r5,49408
 8001a68:	80028b40 	call	80028b4 <__mulsf3>
 8001a6c:	100b883a 	mov	r5,r2
 8001a70:	8009883a 	mov	r4,r16
 8001a74:	80028500 	call	8002850 <__addsf3>
 8001a78:	1009883a 	mov	r4,r2
 8001a7c:	1021883a 	mov	r16,r2
 8001a80:	8002d840 	call	8002d84 <__fixsfsi>
 8001a84:	1009883a 	mov	r4,r2
 8001a88:	d8805515 	stw	r2,340(sp)
 8001a8c:	8002cec0 	call	8002cec <__floatsisf>
 8001a90:	100b883a 	mov	r5,r2
 8001a94:	8009883a 	mov	r4,r16
 8001a98:	80027e00 	call	80027e0 <__subsf3>
 8001a9c:	d9c05b17 	ldw	r7,364(sp)
 8001aa0:	1027883a 	mov	r19,r2
 8001aa4:	38012b1e 	bne	r7,zero,8001f54 <__kernel_rem_pio2f+0x718>
 8001aa8:	b0bfffc4 	addi	r2,r22,-1
 8001aac:	1085883a 	add	r2,r2,r2
 8001ab0:	1085883a 	add	r2,r2,r2
 8001ab4:	16c5883a 	add	r2,r2,sp
 8001ab8:	11400017 	ldw	r5,0(r2)
 8001abc:	00c00204 	movi	r3,8
 8001ac0:	1f07c83a 	sub	r3,r3,fp
 8001ac4:	28cdd83a 	sra	r6,r5,r3
 8001ac8:	010001c4 	movi	r4,7
 8001acc:	da005517 	ldw	r8,340(sp)
 8001ad0:	30c6983a 	sll	r3,r6,r3
 8001ad4:	2709c83a 	sub	r4,r4,fp
 8001ad8:	4191883a 	add	r8,r8,r6
 8001adc:	28cbc83a 	sub	r5,r5,r3
 8001ae0:	2909d83a 	sra	r4,r5,r4
 8001ae4:	da005515 	stw	r8,340(sp)
 8001ae8:	11400015 	stw	r5,0(r2)
 8001aec:	d9005415 	stw	r4,336(sp)
 8001af0:	d8c05417 	ldw	r3,336(sp)
 8001af4:	00c0220e 	bge	zero,r3,8001b80 <__kernel_rem_pio2f+0x344>
 8001af8:	d9005517 	ldw	r4,340(sp)
 8001afc:	21000044 	addi	r4,r4,1
 8001b00:	d9005515 	stw	r4,340(sp)
 8001b04:	0581450e 	bge	zero,r22,800201c <__kernel_rem_pio2f+0x7e0>
 8001b08:	0021883a 	mov	r16,zero
 8001b0c:	000b883a 	mov	r5,zero
 8001b10:	d809883a 	mov	r4,sp
 8001b14:	01c04004 	movi	r7,256
 8001b18:	01803fc4 	movi	r6,255
 8001b1c:	00000706 	br	8001b3c <__kernel_rem_pio2f+0x300>
 8001b20:	38c5c83a 	sub	r2,r7,r3
 8001b24:	18000226 	beq	r3,zero,8001b30 <__kernel_rem_pio2f+0x2f4>
 8001b28:	04000044 	movi	r16,1
 8001b2c:	20800015 	stw	r2,0(r4)
 8001b30:	29400044 	addi	r5,r5,1
 8001b34:	21000104 	addi	r4,r4,4
 8001b38:	b1400826 	beq	r22,r5,8001b5c <__kernel_rem_pio2f+0x320>
 8001b3c:	8004c03a 	cmpne	r2,r16,zero
 8001b40:	20c00017 	ldw	r3,0(r4)
 8001b44:	103ff626 	beq	r2,zero,8001b20 <__kernel_rem_pio2f+0x2e4>
 8001b48:	30c5c83a 	sub	r2,r6,r3
 8001b4c:	29400044 	addi	r5,r5,1
 8001b50:	20800015 	stw	r2,0(r4)
 8001b54:	21000104 	addi	r4,r4,4
 8001b58:	b17ff81e 	bne	r22,r5,8001b3c <__kernel_rem_pio2f+0x300>
 8001b5c:	d9405b17 	ldw	r5,364(sp)
 8001b60:	2800041e 	bne	r5,zero,8001b74 <__kernel_rem_pio2f+0x338>
 8001b64:	00800044 	movi	r2,1
 8001b68:	e0810126 	beq	fp,r2,8001f70 <__kernel_rem_pio2f+0x734>
 8001b6c:	00800084 	movi	r2,2
 8001b70:	e0810726 	beq	fp,r2,8001f90 <__kernel_rem_pio2f+0x754>
 8001b74:	d9c05417 	ldw	r7,336(sp)
 8001b78:	00800084 	movi	r2,2
 8001b7c:	38806126 	beq	r7,r2,8001d04 <__kernel_rem_pio2f+0x4c8>
 8001b80:	9809883a 	mov	r4,r19
 8001b84:	000b883a 	mov	r5,zero
 8001b88:	8002a940 	call	8002a94 <__eqsf2>
 8001b8c:	1000701e 	bne	r2,zero,8001d50 <__kernel_rem_pio2f+0x514>
 8001b90:	b1bfffc4 	addi	r6,r22,-1
 8001b94:	35c00b16 	blt	r6,r23,8001bc4 <__kernel_rem_pio2f+0x388>
 8001b98:	3185883a 	add	r2,r6,r6
 8001b9c:	1085883a 	add	r2,r2,r2
 8001ba0:	16c9883a 	add	r4,r2,sp
 8001ba4:	3007883a 	mov	r3,r6
 8001ba8:	000b883a 	mov	r5,zero
 8001bac:	20800017 	ldw	r2,0(r4)
 8001bb0:	18ffffc4 	addi	r3,r3,-1
 8001bb4:	213fff04 	addi	r4,r4,-4
 8001bb8:	288ab03a 	or	r5,r5,r2
 8001bbc:	1dfffb0e 	bge	r3,r23,8001bac <__kernel_rem_pio2f+0x370>
 8001bc0:	2800681e 	bne	r5,zero,8001d64 <__kernel_rem_pio2f+0x528>
 8001bc4:	da005a17 	ldw	r8,360(sp)
 8001bc8:	40bfff17 	ldw	r2,-4(r8)
 8001bcc:	1000fe1e 	bne	r2,zero,8001fc8 <__kernel_rem_pio2f+0x78c>
 8001bd0:	d8805c17 	ldw	r2,368(sp)
 8001bd4:	01000044 	movi	r4,1
 8001bd8:	10ffff04 	addi	r3,r2,-4
 8001bdc:	18ffff04 	addi	r3,r3,-4
 8001be0:	18800017 	ldw	r2,0(r3)
 8001be4:	21000044 	addi	r4,r4,1
 8001be8:	103ffc26 	beq	r2,zero,8001bdc <__kernel_rem_pio2f+0x3a0>
 8001bec:	b12b883a 	add	r21,r22,r4
 8001bf0:	b4000044 	addi	r16,r22,1
 8001bf4:	ac00020e 	bge	r21,r16,8001c00 <__kernel_rem_pio2f+0x3c4>
 8001bf8:	a82d883a 	mov	r22,r21
 8001bfc:	003f6e06 	br	80019b8 <__kernel_rem_pio2f+0x17c>
 8001c00:	d8c05017 	ldw	r3,320(sp)
 8001c04:	d9005917 	ldw	r4,356(sp)
 8001c08:	da006917 	ldw	r8,420(sp)
 8001c0c:	b0c5883a 	add	r2,r22,r3
 8001c10:	b10f883a 	add	r7,r22,r4
 8001c14:	1085883a 	add	r2,r2,r2
 8001c18:	1085883a 	add	r2,r2,r2
 8001c1c:	39cb883a 	add	r5,r7,r7
 8001c20:	840d883a 	add	r6,r16,r16
 8001c24:	4085883a 	add	r2,r8,r2
 8001c28:	294b883a 	add	r5,r5,r5
 8001c2c:	318d883a 	add	r6,r6,r6
 8001c30:	d8c01404 	addi	r3,sp,80
 8001c34:	d9003c04 	addi	r4,sp,240
 8001c38:	1947883a 	add	r3,r3,r5
 8001c3c:	2189883a 	add	r4,r4,r6
 8001c40:	10800104 	addi	r2,r2,4
 8001c44:	d8c05215 	stw	r3,328(sp)
 8001c48:	d9005115 	stw	r4,324(sp)
 8001c4c:	d8805315 	stw	r2,332(sp)
 8001c50:	382d883a 	mov	r22,r7
 8001c54:	d8805317 	ldw	r2,332(sp)
 8001c58:	11000017 	ldw	r4,0(r2)
 8001c5c:	8002cec0 	call	8002cec <__floatsisf>
 8001c60:	d8c05217 	ldw	r3,328(sp)
 8001c64:	d9005d17 	ldw	r4,372(sp)
 8001c68:	18800015 	stw	r2,0(r3)
 8001c6c:	20002326 	beq	r4,zero,8001cfc <__kernel_rem_pio2f+0x4c0>
 8001c70:	b585883a 	add	r2,r22,r22
 8001c74:	1585883a 	add	r2,r2,r22
 8001c78:	1585883a 	add	r2,r2,r22
 8001c7c:	dc405717 	ldw	r17,348(sp)
 8001c80:	16c5883a 	add	r2,r2,sp
 8001c84:	14801404 	addi	r18,r2,80
 8001c88:	0029883a 	mov	r20,zero
 8001c8c:	0027883a 	mov	r19,zero
 8001c90:	89000017 	ldw	r4,0(r17)
 8001c94:	91400017 	ldw	r5,0(r18)
 8001c98:	a5000044 	addi	r20,r20,1
 8001c9c:	94bfff04 	addi	r18,r18,-4
 8001ca0:	80028b40 	call	80028b4 <__mulsf3>
 8001ca4:	100b883a 	mov	r5,r2
 8001ca8:	9809883a 	mov	r4,r19
 8001cac:	80028500 	call	8002850 <__addsf3>
 8001cb0:	d9405917 	ldw	r5,356(sp)
 8001cb4:	1027883a 	mov	r19,r2
 8001cb8:	8c400104 	addi	r17,r17,4
 8001cbc:	2d3ff41e 	bne	r5,r20,8001c90 <__kernel_rem_pio2f+0x454>
 8001cc0:	d9c05117 	ldw	r7,324(sp)
 8001cc4:	da005317 	ldw	r8,332(sp)
 8001cc8:	d8805217 	ldw	r2,328(sp)
 8001ccc:	3cc00015 	stw	r19,0(r7)
 8001cd0:	42000104 	addi	r8,r8,4
 8001cd4:	10800104 	addi	r2,r2,4
 8001cd8:	39c00104 	addi	r7,r7,4
 8001cdc:	84000044 	addi	r16,r16,1
 8001ce0:	da005315 	stw	r8,332(sp)
 8001ce4:	d8805215 	stw	r2,328(sp)
 8001ce8:	d9c05115 	stw	r7,324(sp)
 8001cec:	b5800044 	addi	r22,r22,1
 8001cf0:	ac3fd80e 	bge	r21,r16,8001c54 <__kernel_rem_pio2f+0x418>
 8001cf4:	a82d883a 	mov	r22,r21
 8001cf8:	003f2f06 	br	80019b8 <__kernel_rem_pio2f+0x17c>
 8001cfc:	0027883a 	mov	r19,zero
 8001d00:	003fef06 	br	8001cc0 <__kernel_rem_pio2f+0x484>
 8001d04:	050fe034 	movhi	r20,16256
 8001d08:	980b883a 	mov	r5,r19
 8001d0c:	a009883a 	mov	r4,r20
 8001d10:	80027e00 	call	80027e0 <__subsf3>
 8001d14:	1025883a 	mov	r18,r2
 8001d18:	8005003a 	cmpeq	r2,r16,zero
 8001d1c:	9027883a 	mov	r19,r18
 8001d20:	103f971e 	bne	r2,zero,8001b80 <__kernel_rem_pio2f+0x344>
 8001d24:	a009883a 	mov	r4,r20
 8001d28:	e00b883a 	mov	r5,fp
 8001d2c:	80024980 	call	8002498 <scalbnf>
 8001d30:	100b883a 	mov	r5,r2
 8001d34:	9009883a 	mov	r4,r18
 8001d38:	80027e00 	call	80027e0 <__subsf3>
 8001d3c:	1027883a 	mov	r19,r2
 8001d40:	9809883a 	mov	r4,r19
 8001d44:	000b883a 	mov	r5,zero
 8001d48:	8002a940 	call	8002a94 <__eqsf2>
 8001d4c:	103f9026 	beq	r2,zero,8001b90 <__kernel_rem_pio2f+0x354>
 8001d50:	9809883a 	mov	r4,r19
 8001d54:	000b883a 	mov	r5,zero
 8001d58:	8002a940 	call	8002a94 <__eqsf2>
 8001d5c:	10011d1e 	bne	r2,zero,80021d4 <__kernel_rem_pio2f+0x998>
 8001d60:	b1bfffc4 	addi	r6,r22,-1
 8001d64:	3185883a 	add	r2,r6,r6
 8001d68:	1085883a 	add	r2,r2,r2
 8001d6c:	16c5883a 	add	r2,r2,sp
 8001d70:	10c00017 	ldw	r3,0(r2)
 8001d74:	e73ffe04 	addi	fp,fp,-8
 8001d78:	18013c1e 	bne	r3,zero,800226c <__kernel_rem_pio2f+0xa30>
 8001d7c:	302d883a 	mov	r22,r6
 8001d80:	1007883a 	mov	r3,r2
 8001d84:	18ffff04 	addi	r3,r3,-4
 8001d88:	18800017 	ldw	r2,0(r3)
 8001d8c:	b5bfffc4 	addi	r22,r22,-1
 8001d90:	e73ffe04 	addi	fp,fp,-8
 8001d94:	103ffb26 	beq	r2,zero,8001d84 <__kernel_rem_pio2f+0x548>
 8001d98:	e00b883a 	mov	r5,fp
 8001d9c:	010fe034 	movhi	r4,16256
 8001da0:	80024980 	call	8002498 <scalbnf>
 8001da4:	1025883a 	mov	r18,r2
 8001da8:	b0003416 	blt	r22,zero,8001e7c <__kernel_rem_pio2f+0x640>
 8001dac:	b585883a 	add	r2,r22,r22
 8001db0:	1085883a 	add	r2,r2,r2
 8001db4:	16e1883a 	add	r16,r2,sp
 8001db8:	b023883a 	mov	r17,r22
 8001dbc:	04ffffc4 	movi	r19,-1
 8001dc0:	81000017 	ldw	r4,0(r16)
 8001dc4:	8c7fffc4 	addi	r17,r17,-1
 8001dc8:	8002cec0 	call	8002cec <__floatsisf>
 8001dcc:	900b883a 	mov	r5,r18
 8001dd0:	1009883a 	mov	r4,r2
 8001dd4:	80028b40 	call	80028b4 <__mulsf3>
 8001dd8:	80803c15 	stw	r2,240(r16)
 8001ddc:	9009883a 	mov	r4,r18
 8001de0:	014ee034 	movhi	r5,15232
 8001de4:	80028b40 	call	80028b4 <__mulsf3>
 8001de8:	1025883a 	mov	r18,r2
 8001dec:	843fff04 	addi	r16,r16,-4
 8001df0:	8cfff31e 	bne	r17,r19,8001dc0 <__kernel_rem_pio2f+0x584>
 8001df4:	b02b883a 	mov	r21,r22
 8001df8:	0029883a 	mov	r20,zero
 8001dfc:	b838403a 	cmpge	fp,r23,zero
 8001e00:	e0007c26 	beq	fp,zero,8001ff4 <__kernel_rem_pio2f+0x7b8>
 8001e04:	a0007b16 	blt	r20,zero,8001ff4 <__kernel_rem_pio2f+0x7b8>
 8001e08:	ad45883a 	add	r2,r21,r21
 8001e0c:	1085883a 	add	r2,r2,r2
 8001e10:	d8c03c04 	addi	r3,sp,240
 8001e14:	18a5883a 	add	r18,r3,r2
 8001e18:	0021883a 	mov	r16,zero
 8001e1c:	0027883a 	mov	r19,zero
 8001e20:	04420074 	movhi	r17,2049
 8001e24:	8c5e0904 	addi	r17,r17,30756
 8001e28:	00000106 	br	8001e30 <__kernel_rem_pio2f+0x5f4>
 8001e2c:	a4000b16 	blt	r20,r16,8001e5c <__kernel_rem_pio2f+0x620>
 8001e30:	89000017 	ldw	r4,0(r17)
 8001e34:	91400017 	ldw	r5,0(r18)
 8001e38:	84000044 	addi	r16,r16,1
 8001e3c:	8c400104 	addi	r17,r17,4
 8001e40:	80028b40 	call	80028b4 <__mulsf3>
 8001e44:	100b883a 	mov	r5,r2
 8001e48:	9809883a 	mov	r4,r19
 8001e4c:	80028500 	call	8002850 <__addsf3>
 8001e50:	94800104 	addi	r18,r18,4
 8001e54:	1027883a 	mov	r19,r2
 8001e58:	bc3ff40e 	bge	r23,r16,8001e2c <__kernel_rem_pio2f+0x5f0>
 8001e5c:	a505883a 	add	r2,r20,r20
 8001e60:	1085883a 	add	r2,r2,r2
 8001e64:	16c5883a 	add	r2,r2,sp
 8001e68:	14c02815 	stw	r19,160(r2)
 8001e6c:	ad7fffc4 	addi	r21,r21,-1
 8001e70:	00bfffc4 	movi	r2,-1
 8001e74:	a5000044 	addi	r20,r20,1
 8001e78:	a8bfe11e 	bne	r21,r2,8001e00 <__kernel_rem_pio2f+0x5c4>
 8001e7c:	d8c06817 	ldw	r3,416(sp)
 8001e80:	00800084 	movi	r2,2
 8001e84:	10c06a16 	blt	r2,r3,8002030 <__kernel_rem_pio2f+0x7f4>
 8001e88:	00c0b70e 	bge	zero,r3,8002168 <__kernel_rem_pio2f+0x92c>
 8001e8c:	b0010916 	blt	r22,zero,80022b4 <__kernel_rem_pio2f+0xa78>
 8001e90:	b585883a 	add	r2,r22,r22
 8001e94:	1085883a 	add	r2,r2,r2
 8001e98:	16c5883a 	add	r2,r2,sp
 8001e9c:	14402804 	addi	r17,r2,160
 8001ea0:	b021883a 	mov	r16,r22
 8001ea4:	0005883a 	mov	r2,zero
 8001ea8:	04bfffc4 	movi	r18,-1
 8001eac:	89400017 	ldw	r5,0(r17)
 8001eb0:	1009883a 	mov	r4,r2
 8001eb4:	843fffc4 	addi	r16,r16,-1
 8001eb8:	80028500 	call	8002850 <__addsf3>
 8001ebc:	8c7fff04 	addi	r17,r17,-4
 8001ec0:	84bffa1e 	bne	r16,r18,8001eac <__kernel_rem_pio2f+0x670>
 8001ec4:	da005417 	ldw	r8,336(sp)
 8001ec8:	4000e61e 	bne	r8,zero,8002264 <__kernel_rem_pio2f+0xa28>
 8001ecc:	1007883a 	mov	r3,r2
 8001ed0:	d9405817 	ldw	r5,352(sp)
 8001ed4:	d9002817 	ldw	r4,160(sp)
 8001ed8:	28c00015 	stw	r3,0(r5)
 8001edc:	100b883a 	mov	r5,r2
 8001ee0:	80027e00 	call	80027e0 <__subsf3>
 8001ee4:	0580080e 	bge	zero,r22,8001f08 <__kernel_rem_pio2f+0x6cc>
 8001ee8:	0023883a 	mov	r17,zero
 8001eec:	dc002904 	addi	r16,sp,164
 8001ef0:	81400017 	ldw	r5,0(r16)
 8001ef4:	1009883a 	mov	r4,r2
 8001ef8:	8c400044 	addi	r17,r17,1
 8001efc:	80028500 	call	8002850 <__addsf3>
 8001f00:	84000104 	addi	r16,r16,4
 8001f04:	8dbffa1e 	bne	r17,r22,8001ef0 <__kernel_rem_pio2f+0x6b4>
 8001f08:	d9c05417 	ldw	r7,336(sp)
 8001f0c:	38000126 	beq	r7,zero,8001f14 <__kernel_rem_pio2f+0x6d8>
 8001f10:	10a0003c 	xorhi	r2,r2,32768
 8001f14:	da005817 	ldw	r8,352(sp)
 8001f18:	40800115 	stw	r2,4(r8)
 8001f1c:	da005517 	ldw	r8,340(sp)
 8001f20:	408001cc 	andi	r2,r8,7
 8001f24:	dfc06717 	ldw	ra,412(sp)
 8001f28:	df006617 	ldw	fp,408(sp)
 8001f2c:	ddc06517 	ldw	r23,404(sp)
 8001f30:	dd806417 	ldw	r22,400(sp)
 8001f34:	dd406317 	ldw	r21,396(sp)
 8001f38:	dd006217 	ldw	r20,392(sp)
 8001f3c:	dcc06117 	ldw	r19,388(sp)
 8001f40:	dc806017 	ldw	r18,384(sp)
 8001f44:	dc405f17 	ldw	r17,380(sp)
 8001f48:	dc005e17 	ldw	r16,376(sp)
 8001f4c:	dec06804 	addi	sp,sp,416
 8001f50:	f800283a 	ret
 8001f54:	e000161e 	bne	fp,zero,8001fb0 <__kernel_rem_pio2f+0x774>
 8001f58:	8c45883a 	add	r2,r17,r17
 8001f5c:	16c5883a 	add	r2,r2,sp
 8001f60:	10ffff17 	ldw	r3,-4(r2)
 8001f64:	1807d23a 	srai	r3,r3,8
 8001f68:	d8c05415 	stw	r3,336(sp)
 8001f6c:	003ee006 	br	8001af0 <__kernel_rem_pio2f+0x2b4>
 8001f70:	b705c83a 	sub	r2,r22,fp
 8001f74:	1085883a 	add	r2,r2,r2
 8001f78:	1085883a 	add	r2,r2,r2
 8001f7c:	16c5883a 	add	r2,r2,sp
 8001f80:	10c00017 	ldw	r3,0(r2)
 8001f84:	18c01fcc 	andi	r3,r3,127
 8001f88:	10c00015 	stw	r3,0(r2)
 8001f8c:	003ef906 	br	8001b74 <__kernel_rem_pio2f+0x338>
 8001f90:	b0bfffc4 	addi	r2,r22,-1
 8001f94:	1085883a 	add	r2,r2,r2
 8001f98:	1085883a 	add	r2,r2,r2
 8001f9c:	16c5883a 	add	r2,r2,sp
 8001fa0:	10c00017 	ldw	r3,0(r2)
 8001fa4:	18c00fcc 	andi	r3,r3,63
 8001fa8:	10c00015 	stw	r3,0(r2)
 8001fac:	003ef106 	br	8001b74 <__kernel_rem_pio2f+0x338>
 8001fb0:	1009883a 	mov	r4,r2
 8001fb4:	014fc034 	movhi	r5,16128
 8001fb8:	8002b840 	call	8002b84 <__gesf2>
 8001fbc:	1000190e 	bge	r2,zero,8002024 <__kernel_rem_pio2f+0x7e8>
 8001fc0:	d8005415 	stw	zero,336(sp)
 8001fc4:	003eee06 	br	8001b80 <__kernel_rem_pio2f+0x344>
 8001fc8:	01000044 	movi	r4,1
 8001fcc:	b12b883a 	add	r21,r22,r4
 8001fd0:	b4000044 	addi	r16,r22,1
 8001fd4:	ac3f0816 	blt	r21,r16,8001bf8 <__kernel_rem_pio2f+0x3bc>
 8001fd8:	003f0906 	br	8001c00 <__kernel_rem_pio2f+0x3c4>
 8001fdc:	0025883a 	mov	r18,zero
 8001fe0:	9cc00044 	addi	r19,r19,1
 8001fe4:	a4800015 	stw	r18,0(r20)
 8001fe8:	a5000104 	addi	r20,r20,4
 8001fec:	9dbe4d1e 	bne	r19,r22,8001924 <__kernel_rem_pio2f+0xe8>
 8001ff0:	003e6306 	br	8001980 <__kernel_rem_pio2f+0x144>
 8001ff4:	a505883a 	add	r2,r20,r20
 8001ff8:	1085883a 	add	r2,r2,r2
 8001ffc:	16c5883a 	add	r2,r2,sp
 8002000:	0027883a 	mov	r19,zero
 8002004:	14c02815 	stw	r19,160(r2)
 8002008:	ad7fffc4 	addi	r21,r21,-1
 800200c:	00bfffc4 	movi	r2,-1
 8002010:	a5000044 	addi	r20,r20,1
 8002014:	a8bf7a1e 	bne	r21,r2,8001e00 <__kernel_rem_pio2f+0x5c4>
 8002018:	003f9806 	br	8001e7c <__kernel_rem_pio2f+0x640>
 800201c:	0021883a 	mov	r16,zero
 8002020:	003ece06 	br	8001b5c <__kernel_rem_pio2f+0x320>
 8002024:	00800084 	movi	r2,2
 8002028:	d8805415 	stw	r2,336(sp)
 800202c:	003eb206 	br	8001af8 <__kernel_rem_pio2f+0x2bc>
 8002030:	d9006817 	ldw	r4,416(sp)
 8002034:	008000c4 	movi	r2,3
 8002038:	20bfb81e 	bne	r4,r2,8001f1c <__kernel_rem_pio2f+0x6e0>
 800203c:	0580190e 	bge	zero,r22,80020a4 <__kernel_rem_pio2f+0x868>
 8002040:	b021883a 	mov	r16,r22
 8002044:	00000106 	br	800204c <__kernel_rem_pio2f+0x810>
 8002048:	a821883a 	mov	r16,r21
 800204c:	857fffc4 	addi	r21,r16,-1
 8002050:	ad63883a 	add	r17,r21,r21
 8002054:	8421883a 	add	r16,r16,r16
 8002058:	8c63883a 	add	r17,r17,r17
 800205c:	8421883a 	add	r16,r16,r16
 8002060:	8ee3883a 	add	r17,r17,sp
 8002064:	86e1883a 	add	r16,r16,sp
 8002068:	8c802817 	ldw	r18,160(r17)
 800206c:	84c02817 	ldw	r19,160(r16)
 8002070:	9009883a 	mov	r4,r18
 8002074:	980b883a 	mov	r5,r19
 8002078:	80028500 	call	8002850 <__addsf3>
 800207c:	100b883a 	mov	r5,r2
 8002080:	9009883a 	mov	r4,r18
 8002084:	1029883a 	mov	r20,r2
 8002088:	80027e00 	call	80027e0 <__subsf3>
 800208c:	100b883a 	mov	r5,r2
 8002090:	9809883a 	mov	r4,r19
 8002094:	80028500 	call	8002850 <__addsf3>
 8002098:	80802815 	stw	r2,160(r16)
 800209c:	8d002815 	stw	r20,160(r17)
 80020a0:	a83fe91e 	bne	r21,zero,8002048 <__kernel_rem_pio2f+0x80c>
 80020a4:	00800044 	movi	r2,1
 80020a8:	1580840e 	bge	r2,r22,80022bc <__kernel_rem_pio2f+0xa80>
 80020ac:	b007883a 	mov	r3,r22
 80020b0:	1cffffc4 	addi	r19,r3,-1
 80020b4:	18e1883a 	add	r16,r3,r3
 80020b8:	9ce3883a 	add	r17,r19,r19
 80020bc:	8c63883a 	add	r17,r17,r17
 80020c0:	8421883a 	add	r16,r16,r16
 80020c4:	8ee3883a 	add	r17,r17,sp
 80020c8:	86e1883a 	add	r16,r16,sp
 80020cc:	8c802817 	ldw	r18,160(r17)
 80020d0:	85002817 	ldw	r20,160(r16)
 80020d4:	9009883a 	mov	r4,r18
 80020d8:	a00b883a 	mov	r5,r20
 80020dc:	80028500 	call	8002850 <__addsf3>
 80020e0:	100b883a 	mov	r5,r2
 80020e4:	9009883a 	mov	r4,r18
 80020e8:	102b883a 	mov	r21,r2
 80020ec:	80027e00 	call	80027e0 <__subsf3>
 80020f0:	100b883a 	mov	r5,r2
 80020f4:	a009883a 	mov	r4,r20
 80020f8:	80028500 	call	8002850 <__addsf3>
 80020fc:	80802815 	stw	r2,160(r16)
 8002100:	01000044 	movi	r4,1
 8002104:	9807883a 	mov	r3,r19
 8002108:	8d402815 	stw	r21,160(r17)
 800210c:	993fe81e 	bne	r19,r4,80020b0 <__kernel_rem_pio2f+0x874>
 8002110:	b585883a 	add	r2,r22,r22
 8002114:	1085883a 	add	r2,r2,r2
 8002118:	16c5883a 	add	r2,r2,sp
 800211c:	2025883a 	mov	r18,r4
 8002120:	b021883a 	mov	r16,r22
 8002124:	14402804 	addi	r17,r2,160
 8002128:	0009883a 	mov	r4,zero
 800212c:	89400017 	ldw	r5,0(r17)
 8002130:	843fffc4 	addi	r16,r16,-1
 8002134:	8c7fff04 	addi	r17,r17,-4
 8002138:	80028500 	call	8002850 <__addsf3>
 800213c:	1009883a 	mov	r4,r2
 8002140:	84bffa1e 	bne	r16,r18,800212c <__kernel_rem_pio2f+0x8f0>
 8002144:	d8805417 	ldw	r2,336(sp)
 8002148:	1000501e 	bne	r2,zero,800228c <__kernel_rem_pio2f+0xa50>
 800214c:	d8802817 	ldw	r2,160(sp)
 8002150:	d8c02917 	ldw	r3,164(sp)
 8002154:	d9405817 	ldw	r5,352(sp)
 8002158:	29000215 	stw	r4,8(r5)
 800215c:	28800015 	stw	r2,0(r5)
 8002160:	28c00115 	stw	r3,4(r5)
 8002164:	003f6d06 	br	8001f1c <__kernel_rem_pio2f+0x6e0>
 8002168:	183f6c1e 	bne	r3,zero,8001f1c <__kernel_rem_pio2f+0x6e0>
 800216c:	b0005516 	blt	r22,zero,80022c4 <__kernel_rem_pio2f+0xa88>
 8002170:	b585883a 	add	r2,r22,r22
 8002174:	1085883a 	add	r2,r2,r2
 8002178:	16c5883a 	add	r2,r2,sp
 800217c:	14402804 	addi	r17,r2,160
 8002180:	b021883a 	mov	r16,r22
 8002184:	0005883a 	mov	r2,zero
 8002188:	04bfffc4 	movi	r18,-1
 800218c:	89400017 	ldw	r5,0(r17)
 8002190:	1009883a 	mov	r4,r2
 8002194:	843fffc4 	addi	r16,r16,-1
 8002198:	80028500 	call	8002850 <__addsf3>
 800219c:	8c7fff04 	addi	r17,r17,-4
 80021a0:	84bffa1e 	bne	r16,r18,800218c <__kernel_rem_pio2f+0x950>
 80021a4:	d9405417 	ldw	r5,336(sp)
 80021a8:	28000126 	beq	r5,zero,80021b0 <__kernel_rem_pio2f+0x974>
 80021ac:	10a0003c 	xorhi	r2,r2,32768
 80021b0:	d9c05817 	ldw	r7,352(sp)
 80021b4:	38800015 	stw	r2,0(r7)
 80021b8:	003f5806 	br	8001f1c <__kernel_rem_pio2f+0x6e0>
 80021bc:	30800104 	addi	r2,r6,4
 80021c0:	1005d0fa 	srai	r2,r2,3
 80021c4:	d8805015 	stw	r2,320(sp)
 80021c8:	103db80e 	bge	r2,zero,80018ac <__kernel_rem_pio2f+0x70>
 80021cc:	d8005015 	stw	zero,320(sp)
 80021d0:	003db606 	br	80018ac <__kernel_rem_pio2f+0x70>
 80021d4:	9809883a 	mov	r4,r19
 80021d8:	070bc83a 	sub	r5,zero,fp
 80021dc:	80024980 	call	8002498 <scalbnf>
 80021e0:	1009883a 	mov	r4,r2
 80021e4:	0150e034 	movhi	r5,17280
 80021e8:	1027883a 	mov	r19,r2
 80021ec:	8002b840 	call	8002b84 <__gesf2>
 80021f0:	10002016 	blt	r2,zero,8002274 <__kernel_rem_pio2f+0xa38>
 80021f4:	014ee034 	movhi	r5,15232
 80021f8:	9809883a 	mov	r4,r19
 80021fc:	80028b40 	call	80028b4 <__mulsf3>
 8002200:	1009883a 	mov	r4,r2
 8002204:	8002d840 	call	8002d84 <__fixsfsi>
 8002208:	1009883a 	mov	r4,r2
 800220c:	8002cec0 	call	8002cec <__floatsisf>
 8002210:	1009883a 	mov	r4,r2
 8002214:	0170e034 	movhi	r5,50048
 8002218:	1025883a 	mov	r18,r2
 800221c:	80028b40 	call	80028b4 <__mulsf3>
 8002220:	100b883a 	mov	r5,r2
 8002224:	9809883a 	mov	r4,r19
 8002228:	80028500 	call	8002850 <__addsf3>
 800222c:	1009883a 	mov	r4,r2
 8002230:	8c63883a 	add	r17,r17,r17
 8002234:	b5800044 	addi	r22,r22,1
 8002238:	8002d840 	call	8002d84 <__fixsfsi>
 800223c:	8ee3883a 	add	r17,r17,sp
 8002240:	b5a1883a 	add	r16,r22,r22
 8002244:	8421883a 	add	r16,r16,r16
 8002248:	9009883a 	mov	r4,r18
 800224c:	88800015 	stw	r2,0(r17)
 8002250:	86e1883a 	add	r16,r16,sp
 8002254:	8002d840 	call	8002d84 <__fixsfsi>
 8002258:	e7000204 	addi	fp,fp,8
 800225c:	80800015 	stw	r2,0(r16)
 8002260:	003ecd06 	br	8001d98 <__kernel_rem_pio2f+0x55c>
 8002264:	10e0003c 	xorhi	r3,r2,32768
 8002268:	003f1906 	br	8001ed0 <__kernel_rem_pio2f+0x694>
 800226c:	302d883a 	mov	r22,r6
 8002270:	003ec906 	br	8001d98 <__kernel_rem_pio2f+0x55c>
 8002274:	8c61883a 	add	r16,r17,r17
 8002278:	9809883a 	mov	r4,r19
 800227c:	86e1883a 	add	r16,r16,sp
 8002280:	8002d840 	call	8002d84 <__fixsfsi>
 8002284:	80800015 	stw	r2,0(r16)
 8002288:	003ec306 	br	8001d98 <__kernel_rem_pio2f+0x55c>
 800228c:	d8c02817 	ldw	r3,160(sp)
 8002290:	d8802917 	ldw	r2,164(sp)
 8002294:	d9c05817 	ldw	r7,352(sp)
 8002298:	2120003c 	xorhi	r4,r4,32768
 800229c:	18e0003c 	xorhi	r3,r3,32768
 80022a0:	10a0003c 	xorhi	r2,r2,32768
 80022a4:	39000215 	stw	r4,8(r7)
 80022a8:	38c00015 	stw	r3,0(r7)
 80022ac:	38800115 	stw	r2,4(r7)
 80022b0:	003f1a06 	br	8001f1c <__kernel_rem_pio2f+0x6e0>
 80022b4:	0005883a 	mov	r2,zero
 80022b8:	003f0206 	br	8001ec4 <__kernel_rem_pio2f+0x688>
 80022bc:	0009883a 	mov	r4,zero
 80022c0:	003fa006 	br	8002144 <__kernel_rem_pio2f+0x908>
 80022c4:	0005883a 	mov	r2,zero
 80022c8:	003fb606 	br	80021a4 <__kernel_rem_pio2f+0x968>

080022cc <__kernel_sinf>:
 80022cc:	00e00034 	movhi	r3,32768
 80022d0:	18ffffc4 	addi	r3,r3,-1
 80022d4:	defff904 	addi	sp,sp,-28
 80022d8:	1906703a 	and	r3,r3,r4
 80022dc:	008c8034 	movhi	r2,12800
 80022e0:	10bfffc4 	addi	r2,r2,-1
 80022e4:	dd400515 	stw	r21,20(sp)
 80022e8:	dc800215 	stw	r18,8(sp)
 80022ec:	dc000015 	stw	r16,0(sp)
 80022f0:	dfc00615 	stw	ra,24(sp)
 80022f4:	dd000415 	stw	r20,16(sp)
 80022f8:	dcc00315 	stw	r19,12(sp)
 80022fc:	dc400115 	stw	r17,4(sp)
 8002300:	2025883a 	mov	r18,r4
 8002304:	3021883a 	mov	r16,r6
 8002308:	282b883a 	mov	r21,r5
 800230c:	10c00216 	blt	r2,r3,8002318 <__kernel_sinf+0x4c>
 8002310:	8002d840 	call	8002d84 <__fixsfsi>
 8002314:	10004326 	beq	r2,zero,8002424 <__kernel_sinf+0x158>
 8002318:	9009883a 	mov	r4,r18
 800231c:	900b883a 	mov	r5,r18
 8002320:	80028b40 	call	80028b4 <__mulsf3>
 8002324:	1023883a 	mov	r17,r2
 8002328:	9009883a 	mov	r4,r18
 800232c:	100b883a 	mov	r5,r2
 8002330:	80028b40 	call	80028b4 <__mulsf3>
 8002334:	8809883a 	mov	r4,r17
 8002338:	014bcbf4 	movhi	r5,12079
 800233c:	297274c4 	addi	r5,r5,-13869
 8002340:	1029883a 	mov	r20,r2
 8002344:	80028b40 	call	80028b4 <__mulsf3>
 8002348:	1009883a 	mov	r4,r2
 800234c:	014cb5f4 	movhi	r5,13015
 8002350:	294bcd04 	addi	r5,r5,12084
 8002354:	80027e00 	call	80027e0 <__subsf3>
 8002358:	100b883a 	mov	r5,r2
 800235c:	8809883a 	mov	r4,r17
 8002360:	80028b40 	call	80028b4 <__mulsf3>
 8002364:	1009883a 	mov	r4,r2
 8002368:	014d8e74 	movhi	r5,13881
 800236c:	297bc6c4 	addi	r5,r5,-4325
 8002370:	80028500 	call	8002850 <__addsf3>
 8002374:	100b883a 	mov	r5,r2
 8002378:	8809883a 	mov	r4,r17
 800237c:	80028b40 	call	80028b4 <__mulsf3>
 8002380:	1009883a 	mov	r4,r2
 8002384:	014e5434 	movhi	r5,14672
 8002388:	29434044 	addi	r5,r5,3329
 800238c:	80027e00 	call	80027e0 <__subsf3>
 8002390:	100b883a 	mov	r5,r2
 8002394:	8809883a 	mov	r4,r17
 8002398:	80028b40 	call	80028b4 <__mulsf3>
 800239c:	1009883a 	mov	r4,r2
 80023a0:	014f0274 	movhi	r5,15369
 80023a4:	29622244 	addi	r5,r5,-30583
 80023a8:	80028500 	call	8002850 <__addsf3>
 80023ac:	1027883a 	mov	r19,r2
 80023b0:	a809883a 	mov	r4,r21
 80023b4:	014fc034 	movhi	r5,16128
 80023b8:	80002426 	beq	r16,zero,800244c <__kernel_sinf+0x180>
 80023bc:	80028b40 	call	80028b4 <__mulsf3>
 80023c0:	a009883a 	mov	r4,r20
 80023c4:	980b883a 	mov	r5,r19
 80023c8:	1021883a 	mov	r16,r2
 80023cc:	80028b40 	call	80028b4 <__mulsf3>
 80023d0:	100b883a 	mov	r5,r2
 80023d4:	8009883a 	mov	r4,r16
 80023d8:	80027e00 	call	80027e0 <__subsf3>
 80023dc:	100b883a 	mov	r5,r2
 80023e0:	8809883a 	mov	r4,r17
 80023e4:	80028b40 	call	80028b4 <__mulsf3>
 80023e8:	1009883a 	mov	r4,r2
 80023ec:	a80b883a 	mov	r5,r21
 80023f0:	80027e00 	call	80027e0 <__subsf3>
 80023f4:	a009883a 	mov	r4,r20
 80023f8:	014f8af4 	movhi	r5,15915
 80023fc:	296aaac4 	addi	r5,r5,-21845
 8002400:	1021883a 	mov	r16,r2
 8002404:	80028b40 	call	80028b4 <__mulsf3>
 8002408:	100b883a 	mov	r5,r2
 800240c:	8009883a 	mov	r4,r16
 8002410:	80028500 	call	8002850 <__addsf3>
 8002414:	100b883a 	mov	r5,r2
 8002418:	9009883a 	mov	r4,r18
 800241c:	80027e00 	call	80027e0 <__subsf3>
 8002420:	1025883a 	mov	r18,r2
 8002424:	9005883a 	mov	r2,r18
 8002428:	dfc00617 	ldw	ra,24(sp)
 800242c:	dd400517 	ldw	r21,20(sp)
 8002430:	dd000417 	ldw	r20,16(sp)
 8002434:	dcc00317 	ldw	r19,12(sp)
 8002438:	dc800217 	ldw	r18,8(sp)
 800243c:	dc400117 	ldw	r17,4(sp)
 8002440:	dc000017 	ldw	r16,0(sp)
 8002444:	dec00704 	addi	sp,sp,28
 8002448:	f800283a 	ret
 800244c:	100b883a 	mov	r5,r2
 8002450:	8809883a 	mov	r4,r17
 8002454:	80028b40 	call	80028b4 <__mulsf3>
 8002458:	1009883a 	mov	r4,r2
 800245c:	014f8af4 	movhi	r5,15915
 8002460:	296aaac4 	addi	r5,r5,-21845
 8002464:	80027e00 	call	80027e0 <__subsf3>
 8002468:	100b883a 	mov	r5,r2
 800246c:	a009883a 	mov	r4,r20
 8002470:	80028b40 	call	80028b4 <__mulsf3>
 8002474:	100b883a 	mov	r5,r2
 8002478:	9009883a 	mov	r4,r18
 800247c:	80028500 	call	8002850 <__addsf3>
 8002480:	1025883a 	mov	r18,r2
 8002484:	003fe706 	br	8002424 <__kernel_sinf+0x158>

08002488 <fabsf>:
 8002488:	00a00034 	movhi	r2,32768
 800248c:	10bfffc4 	addi	r2,r2,-1
 8002490:	2084703a 	and	r2,r4,r2
 8002494:	f800283a 	ret

08002498 <scalbnf>:
 8002498:	00a00034 	movhi	r2,32768
 800249c:	10bfffc4 	addi	r2,r2,-1
 80024a0:	defffe04 	addi	sp,sp,-8
 80024a4:	2086703a 	and	r3,r4,r2
 80024a8:	dc000015 	stw	r16,0(sp)
 80024ac:	dfc00115 	stw	ra,4(sp)
 80024b0:	200d883a 	mov	r6,r4
 80024b4:	200f883a 	mov	r7,r4
 80024b8:	2821883a 	mov	r16,r5
 80024bc:	18001a26 	beq	r3,zero,8002528 <scalbnf+0x90>
 80024c0:	009fe034 	movhi	r2,32640
 80024c4:	10bfffc4 	addi	r2,r2,-1
 80024c8:	10c01c36 	bltu	r2,r3,800253c <scalbnf+0xa4>
 80024cc:	00802034 	movhi	r2,128
 80024d0:	10bfffc4 	addi	r2,r2,-1
 80024d4:	10c02136 	bltu	r2,r3,800255c <scalbnf+0xc4>
 80024d8:	01530034 	movhi	r5,19456
 80024dc:	80028b40 	call	80028b4 <__mulsf3>
 80024e0:	1009883a 	mov	r4,r2
 80024e4:	100d883a 	mov	r6,r2
 80024e8:	00bffff4 	movhi	r2,65535
 80024ec:	108f2c04 	addi	r2,r2,15536
 80024f0:	80802616 	blt	r16,r2,800258c <scalbnf+0xf4>
 80024f4:	209fe02c 	andhi	r2,r4,32640
 80024f8:	1005d5fa 	srai	r2,r2,23
 80024fc:	200f883a 	mov	r7,r4
 8002500:	10bff9c4 	addi	r2,r2,-25
 8002504:	1407883a 	add	r3,r2,r16
 8002508:	00803f84 	movi	r2,254
 800250c:	10c01516 	blt	r2,r3,8002564 <scalbnf+0xcc>
 8002510:	00c0230e 	bge	zero,r3,80025a0 <scalbnf+0x108>
 8002514:	180695fa 	slli	r3,r3,23
 8002518:	00a02034 	movhi	r2,32896
 800251c:	10bfffc4 	addi	r2,r2,-1
 8002520:	3884703a 	and	r2,r7,r2
 8002524:	10ccb03a 	or	r6,r2,r3
 8002528:	3005883a 	mov	r2,r6
 800252c:	dfc00117 	ldw	ra,4(sp)
 8002530:	dc000017 	ldw	r16,0(sp)
 8002534:	dec00204 	addi	sp,sp,8
 8002538:	f800283a 	ret
 800253c:	200b883a 	mov	r5,r4
 8002540:	80028500 	call	8002850 <__addsf3>
 8002544:	100d883a 	mov	r6,r2
 8002548:	3005883a 	mov	r2,r6
 800254c:	dfc00117 	ldw	ra,4(sp)
 8002550:	dc000017 	ldw	r16,0(sp)
 8002554:	dec00204 	addi	sp,sp,8
 8002558:	f800283a 	ret
 800255c:	1804d5fa 	srli	r2,r3,23
 8002560:	003fe806 	br	8002504 <scalbnf+0x6c>
 8002564:	041c52b4 	movhi	r16,29002
 8002568:	843cb284 	addi	r16,r16,-3382
 800256c:	300b883a 	mov	r5,r6
 8002570:	8009883a 	mov	r4,r16
 8002574:	80025e40 	call	80025e4 <copysignf>
 8002578:	1009883a 	mov	r4,r2
 800257c:	800b883a 	mov	r5,r16
 8002580:	80028b40 	call	80028b4 <__mulsf3>
 8002584:	100d883a 	mov	r6,r2
 8002588:	003fe706 	br	8002528 <scalbnf+0x90>
 800258c:	014368b4 	movhi	r5,3490
 8002590:	29509804 	addi	r5,r5,16992
 8002594:	80028b40 	call	80028b4 <__mulsf3>
 8002598:	100d883a 	mov	r6,r2
 800259c:	003fe206 	br	8002528 <scalbnf+0x90>
 80025a0:	00bffa84 	movi	r2,-22
 80025a4:	1880050e 	bge	r3,r2,80025bc <scalbnf+0x124>
 80025a8:	00b0d414 	movui	r2,50000
 80025ac:	143fed16 	blt	r2,r16,8002564 <scalbnf+0xcc>
 80025b0:	040368b4 	movhi	r16,3490
 80025b4:	84109804 	addi	r16,r16,16992
 80025b8:	003fec06 	br	800256c <scalbnf+0xd4>
 80025bc:	18800644 	addi	r2,r3,25
 80025c0:	100495fa 	slli	r2,r2,23
 80025c4:	01202034 	movhi	r4,32896
 80025c8:	213fffc4 	addi	r4,r4,-1
 80025cc:	3908703a 	and	r4,r7,r4
 80025d0:	2088b03a 	or	r4,r4,r2
 80025d4:	014cc034 	movhi	r5,13056
 80025d8:	80028b40 	call	80028b4 <__mulsf3>
 80025dc:	100d883a 	mov	r6,r2
 80025e0:	003fd106 	br	8002528 <scalbnf+0x90>

080025e4 <copysignf>:
 80025e4:	00a00034 	movhi	r2,32768
 80025e8:	10bfffc4 	addi	r2,r2,-1
 80025ec:	2088703a 	and	r4,r4,r2
 80025f0:	28a0002c 	andhi	r2,r5,32768
 80025f4:	2084b03a 	or	r2,r4,r2
 80025f8:	f800283a 	ret

080025fc <_fpadd_parts>:
 80025fc:	21c00017 	ldw	r7,0(r4)
 8002600:	02000044 	movi	r8,1
 8002604:	41c0332e 	bgeu	r8,r7,80026d4 <_fpadd_parts+0xd8>
 8002608:	28800017 	ldw	r2,0(r5)
 800260c:	4080462e 	bgeu	r8,r2,8002728 <_fpadd_parts+0x12c>
 8002610:	00c00104 	movi	r3,4
 8002614:	38c06b26 	beq	r7,r3,80027c4 <_fpadd_parts+0x1c8>
 8002618:	10c04326 	beq	r2,r3,8002728 <_fpadd_parts+0x12c>
 800261c:	00c00084 	movi	r3,2
 8002620:	10c02e26 	beq	r2,r3,80026dc <_fpadd_parts+0xe0>
 8002624:	38c04026 	beq	r7,r3,8002728 <_fpadd_parts+0x12c>
 8002628:	22800217 	ldw	r10,8(r4)
 800262c:	28c00217 	ldw	r3,8(r5)
 8002630:	23000317 	ldw	r12,12(r4)
 8002634:	2a400317 	ldw	r9,12(r5)
 8002638:	50cfc83a 	sub	r7,r10,r3
 800263c:	3817883a 	mov	r11,r7
 8002640:	38004f16 	blt	r7,zero,8002780 <_fpadd_parts+0x184>
 8002644:	008007c4 	movi	r2,31
 8002648:	11c03316 	blt	r2,r7,8002718 <_fpadd_parts+0x11c>
 800264c:	02c0540e 	bge	zero,r11,80027a0 <_fpadd_parts+0x1a4>
 8002650:	41c4983a 	sll	r2,r8,r7
 8002654:	49c6d83a 	srl	r3,r9,r7
 8002658:	10bfffc4 	addi	r2,r2,-1
 800265c:	4884703a 	and	r2,r9,r2
 8002660:	1004c03a 	cmpne	r2,r2,zero
 8002664:	1892b03a 	or	r9,r3,r2
 8002668:	20c00117 	ldw	r3,4(r4)
 800266c:	28800117 	ldw	r2,4(r5)
 8002670:	18803c26 	beq	r3,r2,8002764 <_fpadd_parts+0x168>
 8002674:	18002f26 	beq	r3,zero,8002734 <_fpadd_parts+0x138>
 8002678:	4b05c83a 	sub	r2,r9,r12
 800267c:	10004216 	blt	r2,zero,8002788 <_fpadd_parts+0x18c>
 8002680:	32800215 	stw	r10,8(r6)
 8002684:	30800315 	stw	r2,12(r6)
 8002688:	30000115 	stw	zero,4(r6)
 800268c:	31000317 	ldw	r4,12(r6)
 8002690:	01d00034 	movhi	r7,16384
 8002694:	39ffff84 	addi	r7,r7,-2
 8002698:	20bfffc4 	addi	r2,r4,-1
 800269c:	2007883a 	mov	r3,r4
 80026a0:	38800836 	bltu	r7,r2,80026c4 <_fpadd_parts+0xc8>
 80026a4:	31400217 	ldw	r5,8(r6)
 80026a8:	18c9883a 	add	r4,r3,r3
 80026ac:	20bfffc4 	addi	r2,r4,-1
 80026b0:	297fffc4 	addi	r5,r5,-1
 80026b4:	2007883a 	mov	r3,r4
 80026b8:	38bffb2e 	bgeu	r7,r2,80026a8 <_fpadd_parts+0xac>
 80026bc:	31400215 	stw	r5,8(r6)
 80026c0:	31000315 	stw	r4,12(r6)
 80026c4:	008000c4 	movi	r2,3
 80026c8:	30800015 	stw	r2,0(r6)
 80026cc:	20001b16 	blt	r4,zero,800273c <_fpadd_parts+0x140>
 80026d0:	3009883a 	mov	r4,r6
 80026d4:	2005883a 	mov	r2,r4
 80026d8:	f800283a 	ret
 80026dc:	38fffd1e 	bne	r7,r3,80026d4 <_fpadd_parts+0xd8>
 80026e0:	31c00015 	stw	r7,0(r6)
 80026e4:	20800117 	ldw	r2,4(r4)
 80026e8:	30800115 	stw	r2,4(r6)
 80026ec:	20c00217 	ldw	r3,8(r4)
 80026f0:	30c00215 	stw	r3,8(r6)
 80026f4:	20800317 	ldw	r2,12(r4)
 80026f8:	30800315 	stw	r2,12(r6)
 80026fc:	20c00117 	ldw	r3,4(r4)
 8002700:	28800117 	ldw	r2,4(r5)
 8002704:	3009883a 	mov	r4,r6
 8002708:	1886703a 	and	r3,r3,r2
 800270c:	2005883a 	mov	r2,r4
 8002710:	30c00115 	stw	r3,4(r6)
 8002714:	f800283a 	ret
 8002718:	1a801716 	blt	r3,r10,8002778 <_fpadd_parts+0x17c>
 800271c:	1815883a 	mov	r10,r3
 8002720:	0019883a 	mov	r12,zero
 8002724:	003fd006 	br	8002668 <_fpadd_parts+0x6c>
 8002728:	2809883a 	mov	r4,r5
 800272c:	2005883a 	mov	r2,r4
 8002730:	f800283a 	ret
 8002734:	6245c83a 	sub	r2,r12,r9
 8002738:	003fd006 	br	800267c <_fpadd_parts+0x80>
 800273c:	30800217 	ldw	r2,8(r6)
 8002740:	2006d07a 	srli	r3,r4,1
 8002744:	2100004c 	andi	r4,r4,1
 8002748:	10800044 	addi	r2,r2,1
 800274c:	1906b03a 	or	r3,r3,r4
 8002750:	3009883a 	mov	r4,r6
 8002754:	30800215 	stw	r2,8(r6)
 8002758:	2005883a 	mov	r2,r4
 800275c:	30c00315 	stw	r3,12(r6)
 8002760:	f800283a 	ret
 8002764:	4b09883a 	add	r4,r9,r12
 8002768:	30c00115 	stw	r3,4(r6)
 800276c:	32800215 	stw	r10,8(r6)
 8002770:	31000315 	stw	r4,12(r6)
 8002774:	003fd306 	br	80026c4 <_fpadd_parts+0xc8>
 8002778:	0013883a 	mov	r9,zero
 800277c:	003fba06 	br	8002668 <_fpadd_parts+0x6c>
 8002780:	01cfc83a 	sub	r7,zero,r7
 8002784:	003faf06 	br	8002644 <_fpadd_parts+0x48>
 8002788:	0089c83a 	sub	r4,zero,r2
 800278c:	00800044 	movi	r2,1
 8002790:	30800115 	stw	r2,4(r6)
 8002794:	32800215 	stw	r10,8(r6)
 8002798:	31000315 	stw	r4,12(r6)
 800279c:	003fbb06 	br	800268c <_fpadd_parts+0x90>
 80027a0:	583fb126 	beq	r11,zero,8002668 <_fpadd_parts+0x6c>
 80027a4:	41c4983a 	sll	r2,r8,r7
 80027a8:	61c6d83a 	srl	r3,r12,r7
 80027ac:	51d5883a 	add	r10,r10,r7
 80027b0:	10bfffc4 	addi	r2,r2,-1
 80027b4:	6084703a 	and	r2,r12,r2
 80027b8:	1004c03a 	cmpne	r2,r2,zero
 80027bc:	1898b03a 	or	r12,r3,r2
 80027c0:	003fa906 	br	8002668 <_fpadd_parts+0x6c>
 80027c4:	11ffc31e 	bne	r2,r7,80026d4 <_fpadd_parts+0xd8>
 80027c8:	28c00117 	ldw	r3,4(r5)
 80027cc:	20800117 	ldw	r2,4(r4)
 80027d0:	10ffc026 	beq	r2,r3,80026d4 <_fpadd_parts+0xd8>
 80027d4:	01020074 	movhi	r4,2049
 80027d8:	211e1404 	addi	r4,r4,30800
 80027dc:	003fbd06 	br	80026d4 <_fpadd_parts+0xd8>

080027e0 <__subsf3>:
 80027e0:	deffef04 	addi	sp,sp,-68
 80027e4:	dcc00f15 	stw	r19,60(sp)
 80027e8:	dcc00204 	addi	r19,sp,8
 80027ec:	dc400e15 	stw	r17,56(sp)
 80027f0:	d9000015 	stw	r4,0(sp)
 80027f4:	d9400115 	stw	r5,4(sp)
 80027f8:	d809883a 	mov	r4,sp
 80027fc:	980b883a 	mov	r5,r19
 8002800:	dc400604 	addi	r17,sp,24
 8002804:	dfc01015 	stw	ra,64(sp)
 8002808:	80032680 	call	8003268 <__unpack_f>
 800280c:	d9000104 	addi	r4,sp,4
 8002810:	880b883a 	mov	r5,r17
 8002814:	80032680 	call	8003268 <__unpack_f>
 8002818:	d8800717 	ldw	r2,28(sp)
 800281c:	9809883a 	mov	r4,r19
 8002820:	880b883a 	mov	r5,r17
 8002824:	d9800a04 	addi	r6,sp,40
 8002828:	1080005c 	xori	r2,r2,1
 800282c:	d8800715 	stw	r2,28(sp)
 8002830:	80025fc0 	call	80025fc <_fpadd_parts>
 8002834:	1009883a 	mov	r4,r2
 8002838:	80031080 	call	8003108 <__pack_f>
 800283c:	dfc01017 	ldw	ra,64(sp)
 8002840:	dcc00f17 	ldw	r19,60(sp)
 8002844:	dc400e17 	ldw	r17,56(sp)
 8002848:	dec01104 	addi	sp,sp,68
 800284c:	f800283a 	ret

08002850 <__addsf3>:
 8002850:	deffef04 	addi	sp,sp,-68
 8002854:	dcc00f15 	stw	r19,60(sp)
 8002858:	dcc00204 	addi	r19,sp,8
 800285c:	dc400e15 	stw	r17,56(sp)
 8002860:	d9000015 	stw	r4,0(sp)
 8002864:	d9400115 	stw	r5,4(sp)
 8002868:	d809883a 	mov	r4,sp
 800286c:	980b883a 	mov	r5,r19
 8002870:	dc400604 	addi	r17,sp,24
 8002874:	dfc01015 	stw	ra,64(sp)
 8002878:	80032680 	call	8003268 <__unpack_f>
 800287c:	d9000104 	addi	r4,sp,4
 8002880:	880b883a 	mov	r5,r17
 8002884:	80032680 	call	8003268 <__unpack_f>
 8002888:	d9800a04 	addi	r6,sp,40
 800288c:	9809883a 	mov	r4,r19
 8002890:	880b883a 	mov	r5,r17
 8002894:	80025fc0 	call	80025fc <_fpadd_parts>
 8002898:	1009883a 	mov	r4,r2
 800289c:	80031080 	call	8003108 <__pack_f>
 80028a0:	dfc01017 	ldw	ra,64(sp)
 80028a4:	dcc00f17 	ldw	r19,60(sp)
 80028a8:	dc400e17 	ldw	r17,56(sp)
 80028ac:	dec01104 	addi	sp,sp,68
 80028b0:	f800283a 	ret

080028b4 <__mulsf3>:
 80028b4:	deffef04 	addi	sp,sp,-68
 80028b8:	dc400f15 	stw	r17,60(sp)
 80028bc:	dc400204 	addi	r17,sp,8
 80028c0:	dc000e15 	stw	r16,56(sp)
 80028c4:	d9000015 	stw	r4,0(sp)
 80028c8:	d9400115 	stw	r5,4(sp)
 80028cc:	d809883a 	mov	r4,sp
 80028d0:	880b883a 	mov	r5,r17
 80028d4:	dc000604 	addi	r16,sp,24
 80028d8:	dfc01015 	stw	ra,64(sp)
 80028dc:	80032680 	call	8003268 <__unpack_f>
 80028e0:	d9000104 	addi	r4,sp,4
 80028e4:	800b883a 	mov	r5,r16
 80028e8:	80032680 	call	8003268 <__unpack_f>
 80028ec:	d9000217 	ldw	r4,8(sp)
 80028f0:	00800044 	movi	r2,1
 80028f4:	01400104 	movi	r5,4
 80028f8:	1100142e 	bgeu	r2,r4,800294c <__mulsf3+0x98>
 80028fc:	d8c00617 	ldw	r3,24(sp)
 8002900:	10c0052e 	bgeu	r2,r3,8002918 <__mulsf3+0x64>
 8002904:	21400f26 	beq	r4,r5,8002944 <__mulsf3+0x90>
 8002908:	19405d26 	beq	r3,r5,8002a80 <__mulsf3+0x1cc>
 800290c:	00800084 	movi	r2,2
 8002910:	20800e26 	beq	r4,r2,800294c <__mulsf3+0x98>
 8002914:	1880181e 	bne	r3,r2,8002978 <__mulsf3+0xc4>
 8002918:	d8c00717 	ldw	r3,28(sp)
 800291c:	d8800317 	ldw	r2,12(sp)
 8002920:	8009883a 	mov	r4,r16
 8002924:	10c4c03a 	cmpne	r2,r2,r3
 8002928:	d8800715 	stw	r2,28(sp)
 800292c:	80031080 	call	8003108 <__pack_f>
 8002930:	dfc01017 	ldw	ra,64(sp)
 8002934:	dc400f17 	ldw	r17,60(sp)
 8002938:	dc000e17 	ldw	r16,56(sp)
 800293c:	dec01104 	addi	sp,sp,68
 8002940:	f800283a 	ret
 8002944:	00800084 	movi	r2,2
 8002948:	18804f26 	beq	r3,r2,8002a88 <__mulsf3+0x1d4>
 800294c:	d8800317 	ldw	r2,12(sp)
 8002950:	d8c00717 	ldw	r3,28(sp)
 8002954:	8809883a 	mov	r4,r17
 8002958:	10c4c03a 	cmpne	r2,r2,r3
 800295c:	d8800315 	stw	r2,12(sp)
 8002960:	80031080 	call	8003108 <__pack_f>
 8002964:	dfc01017 	ldw	ra,64(sp)
 8002968:	dc400f17 	ldw	r17,60(sp)
 800296c:	dc000e17 	ldw	r16,56(sp)
 8002970:	dec01104 	addi	sp,sp,68
 8002974:	f800283a 	ret
 8002978:	d8800517 	ldw	r2,20(sp)
 800297c:	da000917 	ldw	r8,36(sp)
 8002980:	0013883a 	mov	r9,zero
 8002984:	0007883a 	mov	r3,zero
 8002988:	480f883a 	mov	r7,r9
 800298c:	180b883a 	mov	r5,r3
 8002990:	400d883a 	mov	r6,r8
 8002994:	1009883a 	mov	r4,r2
 8002998:	8002ff00 	call	8002ff0 <__muldi3>
 800299c:	da800417 	ldw	r10,16(sp)
 80029a0:	d9800817 	ldw	r6,32(sp)
 80029a4:	da400317 	ldw	r9,12(sp)
 80029a8:	52800084 	addi	r10,r10,2
 80029ac:	3295883a 	add	r10,r6,r10
 80029b0:	d9800717 	ldw	r6,28(sp)
 80029b4:	180b883a 	mov	r5,r3
 80029b8:	180f883a 	mov	r7,r3
 80029bc:	4992c03a 	cmpne	r9,r9,r6
 80029c0:	da400b15 	stw	r9,44(sp)
 80029c4:	1007883a 	mov	r3,r2
 80029c8:	da800c15 	stw	r10,48(sp)
 80029cc:	2800070e 	bge	r5,zero,80029ec <__mulsf3+0x138>
 80029d0:	2880004c 	andi	r2,r5,1
 80029d4:	1005003a 	cmpeq	r2,r2,zero
 80029d8:	500d883a 	mov	r6,r10
 80029dc:	10001e26 	beq	r2,zero,8002a58 <__mulsf3+0x1a4>
 80029e0:	380ed07a 	srli	r7,r7,1
 80029e4:	31800044 	addi	r6,r6,1
 80029e8:	d9800c15 	stw	r6,48(sp)
 80029ec:	01100034 	movhi	r4,16384
 80029f0:	213fffc4 	addi	r4,r4,-1
 80029f4:	21c00b36 	bltu	r4,r7,8002a24 <__mulsf3+0x170>
 80029f8:	d8800c17 	ldw	r2,48(sp)
 80029fc:	00000206 	br	8002a08 <__mulsf3+0x154>
 8002a00:	18c7883a 	add	r3,r3,r3
 8002a04:	21c00636 	bltu	r4,r7,8002a20 <__mulsf3+0x16c>
 8002a08:	10bfffc4 	addi	r2,r2,-1
 8002a0c:	39cf883a 	add	r7,r7,r7
 8002a10:	183ffb0e 	bge	r3,zero,8002a00 <__mulsf3+0x14c>
 8002a14:	39c00054 	ori	r7,r7,1
 8002a18:	18c7883a 	add	r3,r3,r3
 8002a1c:	21fffa2e 	bgeu	r4,r7,8002a08 <__mulsf3+0x154>
 8002a20:	d8800c15 	stw	r2,48(sp)
 8002a24:	39001fcc 	andi	r4,r7,127
 8002a28:	00801004 	movi	r2,64
 8002a2c:	20800d26 	beq	r4,r2,8002a64 <__mulsf3+0x1b0>
 8002a30:	008000c4 	movi	r2,3
 8002a34:	d9000a04 	addi	r4,sp,40
 8002a38:	d9c00d15 	stw	r7,52(sp)
 8002a3c:	d8800a15 	stw	r2,40(sp)
 8002a40:	80031080 	call	8003108 <__pack_f>
 8002a44:	dfc01017 	ldw	ra,64(sp)
 8002a48:	dc400f17 	ldw	r17,60(sp)
 8002a4c:	dc000e17 	ldw	r16,56(sp)
 8002a50:	dec01104 	addi	sp,sp,68
 8002a54:	f800283a 	ret
 8002a58:	1804d07a 	srli	r2,r3,1
 8002a5c:	10e00034 	orhi	r3,r2,32768
 8002a60:	003fdf06 	br	80029e0 <__mulsf3+0x12c>
 8002a64:	3880200c 	andi	r2,r7,128
 8002a68:	103ff11e 	bne	r2,zero,8002a30 <__mulsf3+0x17c>
 8002a6c:	183ff026 	beq	r3,zero,8002a30 <__mulsf3+0x17c>
 8002a70:	3907883a 	add	r3,r7,r4
 8002a74:	00bfe004 	movi	r2,-128
 8002a78:	188e703a 	and	r7,r3,r2
 8002a7c:	003fec06 	br	8002a30 <__mulsf3+0x17c>
 8002a80:	00800084 	movi	r2,2
 8002a84:	20bfa41e 	bne	r4,r2,8002918 <__mulsf3+0x64>
 8002a88:	01020074 	movhi	r4,2049
 8002a8c:	211e1404 	addi	r4,r4,30800
 8002a90:	003fb306 	br	8002960 <__mulsf3+0xac>

08002a94 <__eqsf2>:
 8002a94:	defff304 	addi	sp,sp,-52
 8002a98:	dc400b15 	stw	r17,44(sp)
 8002a9c:	dc400204 	addi	r17,sp,8
 8002aa0:	dc000a15 	stw	r16,40(sp)
 8002aa4:	d9000015 	stw	r4,0(sp)
 8002aa8:	d9400115 	stw	r5,4(sp)
 8002aac:	d809883a 	mov	r4,sp
 8002ab0:	880b883a 	mov	r5,r17
 8002ab4:	dc000604 	addi	r16,sp,24
 8002ab8:	dfc00c15 	stw	ra,48(sp)
 8002abc:	80032680 	call	8003268 <__unpack_f>
 8002ac0:	d9000104 	addi	r4,sp,4
 8002ac4:	800b883a 	mov	r5,r16
 8002ac8:	80032680 	call	8003268 <__unpack_f>
 8002acc:	d8800217 	ldw	r2,8(sp)
 8002ad0:	00c00044 	movi	r3,1
 8002ad4:	180d883a 	mov	r6,r3
 8002ad8:	1880062e 	bgeu	r3,r2,8002af4 <__eqsf2+0x60>
 8002adc:	d8800617 	ldw	r2,24(sp)
 8002ae0:	8809883a 	mov	r4,r17
 8002ae4:	800b883a 	mov	r5,r16
 8002ae8:	1880022e 	bgeu	r3,r2,8002af4 <__eqsf2+0x60>
 8002aec:	80033300 	call	8003330 <__fpcmp_parts_f>
 8002af0:	100d883a 	mov	r6,r2
 8002af4:	3005883a 	mov	r2,r6
 8002af8:	dfc00c17 	ldw	ra,48(sp)
 8002afc:	dc400b17 	ldw	r17,44(sp)
 8002b00:	dc000a17 	ldw	r16,40(sp)
 8002b04:	dec00d04 	addi	sp,sp,52
 8002b08:	f800283a 	ret

08002b0c <__gtsf2>:
 8002b0c:	defff304 	addi	sp,sp,-52
 8002b10:	dc400b15 	stw	r17,44(sp)
 8002b14:	dc400204 	addi	r17,sp,8
 8002b18:	dc000a15 	stw	r16,40(sp)
 8002b1c:	d9000015 	stw	r4,0(sp)
 8002b20:	d9400115 	stw	r5,4(sp)
 8002b24:	d809883a 	mov	r4,sp
 8002b28:	880b883a 	mov	r5,r17
 8002b2c:	dc000604 	addi	r16,sp,24
 8002b30:	dfc00c15 	stw	ra,48(sp)
 8002b34:	80032680 	call	8003268 <__unpack_f>
 8002b38:	d9000104 	addi	r4,sp,4
 8002b3c:	800b883a 	mov	r5,r16
 8002b40:	80032680 	call	8003268 <__unpack_f>
 8002b44:	d8800217 	ldw	r2,8(sp)
 8002b48:	00c00044 	movi	r3,1
 8002b4c:	01bfffc4 	movi	r6,-1
 8002b50:	1880062e 	bgeu	r3,r2,8002b6c <__gtsf2+0x60>
 8002b54:	d8800617 	ldw	r2,24(sp)
 8002b58:	8809883a 	mov	r4,r17
 8002b5c:	800b883a 	mov	r5,r16
 8002b60:	1880022e 	bgeu	r3,r2,8002b6c <__gtsf2+0x60>
 8002b64:	80033300 	call	8003330 <__fpcmp_parts_f>
 8002b68:	100d883a 	mov	r6,r2
 8002b6c:	3005883a 	mov	r2,r6
 8002b70:	dfc00c17 	ldw	ra,48(sp)
 8002b74:	dc400b17 	ldw	r17,44(sp)
 8002b78:	dc000a17 	ldw	r16,40(sp)
 8002b7c:	dec00d04 	addi	sp,sp,52
 8002b80:	f800283a 	ret

08002b84 <__gesf2>:
 8002b84:	defff304 	addi	sp,sp,-52
 8002b88:	dc400b15 	stw	r17,44(sp)
 8002b8c:	dc400204 	addi	r17,sp,8
 8002b90:	dc000a15 	stw	r16,40(sp)
 8002b94:	d9000015 	stw	r4,0(sp)
 8002b98:	d9400115 	stw	r5,4(sp)
 8002b9c:	d809883a 	mov	r4,sp
 8002ba0:	880b883a 	mov	r5,r17
 8002ba4:	dc000604 	addi	r16,sp,24
 8002ba8:	dfc00c15 	stw	ra,48(sp)
 8002bac:	80032680 	call	8003268 <__unpack_f>
 8002bb0:	d9000104 	addi	r4,sp,4
 8002bb4:	800b883a 	mov	r5,r16
 8002bb8:	80032680 	call	8003268 <__unpack_f>
 8002bbc:	d8800217 	ldw	r2,8(sp)
 8002bc0:	00c00044 	movi	r3,1
 8002bc4:	01bfffc4 	movi	r6,-1
 8002bc8:	1880062e 	bgeu	r3,r2,8002be4 <__gesf2+0x60>
 8002bcc:	d8800617 	ldw	r2,24(sp)
 8002bd0:	8809883a 	mov	r4,r17
 8002bd4:	800b883a 	mov	r5,r16
 8002bd8:	1880022e 	bgeu	r3,r2,8002be4 <__gesf2+0x60>
 8002bdc:	80033300 	call	8003330 <__fpcmp_parts_f>
 8002be0:	100d883a 	mov	r6,r2
 8002be4:	3005883a 	mov	r2,r6
 8002be8:	dfc00c17 	ldw	ra,48(sp)
 8002bec:	dc400b17 	ldw	r17,44(sp)
 8002bf0:	dc000a17 	ldw	r16,40(sp)
 8002bf4:	dec00d04 	addi	sp,sp,52
 8002bf8:	f800283a 	ret

08002bfc <__ltsf2>:
 8002bfc:	defff304 	addi	sp,sp,-52
 8002c00:	dc400b15 	stw	r17,44(sp)
 8002c04:	dc400204 	addi	r17,sp,8
 8002c08:	dc000a15 	stw	r16,40(sp)
 8002c0c:	d9000015 	stw	r4,0(sp)
 8002c10:	d9400115 	stw	r5,4(sp)
 8002c14:	d809883a 	mov	r4,sp
 8002c18:	880b883a 	mov	r5,r17
 8002c1c:	dc000604 	addi	r16,sp,24
 8002c20:	dfc00c15 	stw	ra,48(sp)
 8002c24:	80032680 	call	8003268 <__unpack_f>
 8002c28:	d9000104 	addi	r4,sp,4
 8002c2c:	800b883a 	mov	r5,r16
 8002c30:	80032680 	call	8003268 <__unpack_f>
 8002c34:	d8800217 	ldw	r2,8(sp)
 8002c38:	00c00044 	movi	r3,1
 8002c3c:	180d883a 	mov	r6,r3
 8002c40:	1880062e 	bgeu	r3,r2,8002c5c <__ltsf2+0x60>
 8002c44:	d8800617 	ldw	r2,24(sp)
 8002c48:	8809883a 	mov	r4,r17
 8002c4c:	800b883a 	mov	r5,r16
 8002c50:	1880022e 	bgeu	r3,r2,8002c5c <__ltsf2+0x60>
 8002c54:	80033300 	call	8003330 <__fpcmp_parts_f>
 8002c58:	100d883a 	mov	r6,r2
 8002c5c:	3005883a 	mov	r2,r6
 8002c60:	dfc00c17 	ldw	ra,48(sp)
 8002c64:	dc400b17 	ldw	r17,44(sp)
 8002c68:	dc000a17 	ldw	r16,40(sp)
 8002c6c:	dec00d04 	addi	sp,sp,52
 8002c70:	f800283a 	ret

08002c74 <__lesf2>:
 8002c74:	defff304 	addi	sp,sp,-52
 8002c78:	dc400b15 	stw	r17,44(sp)
 8002c7c:	dc400204 	addi	r17,sp,8
 8002c80:	dc000a15 	stw	r16,40(sp)
 8002c84:	d9000015 	stw	r4,0(sp)
 8002c88:	d9400115 	stw	r5,4(sp)
 8002c8c:	d809883a 	mov	r4,sp
 8002c90:	880b883a 	mov	r5,r17
 8002c94:	dc000604 	addi	r16,sp,24
 8002c98:	dfc00c15 	stw	ra,48(sp)
 8002c9c:	80032680 	call	8003268 <__unpack_f>
 8002ca0:	d9000104 	addi	r4,sp,4
 8002ca4:	800b883a 	mov	r5,r16
 8002ca8:	80032680 	call	8003268 <__unpack_f>
 8002cac:	d8800217 	ldw	r2,8(sp)
 8002cb0:	00c00044 	movi	r3,1
 8002cb4:	180d883a 	mov	r6,r3
 8002cb8:	1880062e 	bgeu	r3,r2,8002cd4 <__lesf2+0x60>
 8002cbc:	d8800617 	ldw	r2,24(sp)
 8002cc0:	8809883a 	mov	r4,r17
 8002cc4:	800b883a 	mov	r5,r16
 8002cc8:	1880022e 	bgeu	r3,r2,8002cd4 <__lesf2+0x60>
 8002ccc:	80033300 	call	8003330 <__fpcmp_parts_f>
 8002cd0:	100d883a 	mov	r6,r2
 8002cd4:	3005883a 	mov	r2,r6
 8002cd8:	dfc00c17 	ldw	ra,48(sp)
 8002cdc:	dc400b17 	ldw	r17,44(sp)
 8002ce0:	dc000a17 	ldw	r16,40(sp)
 8002ce4:	dec00d04 	addi	sp,sp,52
 8002ce8:	f800283a 	ret

08002cec <__floatsisf>:
 8002cec:	2006d7fa 	srli	r3,r4,31
 8002cf0:	defffa04 	addi	sp,sp,-24
 8002cf4:	008000c4 	movi	r2,3
 8002cf8:	dfc00515 	stw	ra,20(sp)
 8002cfc:	dc000415 	stw	r16,16(sp)
 8002d00:	d8800015 	stw	r2,0(sp)
 8002d04:	d8c00115 	stw	r3,4(sp)
 8002d08:	2000081e 	bne	r4,zero,8002d2c <__floatsisf+0x40>
 8002d0c:	00800084 	movi	r2,2
 8002d10:	d8800015 	stw	r2,0(sp)
 8002d14:	d809883a 	mov	r4,sp
 8002d18:	80031080 	call	8003108 <__pack_f>
 8002d1c:	dfc00517 	ldw	ra,20(sp)
 8002d20:	dc000417 	ldw	r16,16(sp)
 8002d24:	dec00604 	addi	sp,sp,24
 8002d28:	f800283a 	ret
 8002d2c:	00800784 	movi	r2,30
 8002d30:	1807003a 	cmpeq	r3,r3,zero
 8002d34:	d8800215 	stw	r2,8(sp)
 8002d38:	18000e1e 	bne	r3,zero,8002d74 <__floatsisf+0x88>
 8002d3c:	00a00034 	movhi	r2,32768
 8002d40:	20800e26 	beq	r4,r2,8002d7c <__floatsisf+0x90>
 8002d44:	0121c83a 	sub	r16,zero,r4
 8002d48:	8009883a 	mov	r4,r16
 8002d4c:	dc000315 	stw	r16,12(sp)
 8002d50:	80030880 	call	8003088 <__clzsi2>
 8002d54:	117fffc4 	addi	r5,r2,-1
 8002d58:	017fee0e 	bge	zero,r5,8002d14 <__floatsisf+0x28>
 8002d5c:	d8800217 	ldw	r2,8(sp)
 8002d60:	8146983a 	sll	r3,r16,r5
 8002d64:	1145c83a 	sub	r2,r2,r5
 8002d68:	d8c00315 	stw	r3,12(sp)
 8002d6c:	d8800215 	stw	r2,8(sp)
 8002d70:	003fe806 	br	8002d14 <__floatsisf+0x28>
 8002d74:	2021883a 	mov	r16,r4
 8002d78:	003ff306 	br	8002d48 <__floatsisf+0x5c>
 8002d7c:	00b3c034 	movhi	r2,52992
 8002d80:	003fe606 	br	8002d1c <__floatsisf+0x30>

08002d84 <__fixsfsi>:
 8002d84:	defffa04 	addi	sp,sp,-24
 8002d88:	d9000015 	stw	r4,0(sp)
 8002d8c:	d9400104 	addi	r5,sp,4
 8002d90:	d809883a 	mov	r4,sp
 8002d94:	dfc00515 	stw	ra,20(sp)
 8002d98:	80032680 	call	8003268 <__unpack_f>
 8002d9c:	d8c00117 	ldw	r3,4(sp)
 8002da0:	00800084 	movi	r2,2
 8002da4:	1880041e 	bne	r3,r2,8002db8 <__fixsfsi+0x34>
 8002da8:	0005883a 	mov	r2,zero
 8002dac:	dfc00517 	ldw	ra,20(sp)
 8002db0:	dec00604 	addi	sp,sp,24
 8002db4:	f800283a 	ret
 8002db8:	00800044 	movi	r2,1
 8002dbc:	10fffa2e 	bgeu	r2,r3,8002da8 <__fixsfsi+0x24>
 8002dc0:	00800104 	movi	r2,4
 8002dc4:	18800426 	beq	r3,r2,8002dd8 <__fixsfsi+0x54>
 8002dc8:	d8800317 	ldw	r2,12(sp)
 8002dcc:	103ff616 	blt	r2,zero,8002da8 <__fixsfsi+0x24>
 8002dd0:	00c00784 	movi	r3,30
 8002dd4:	1880070e 	bge	r3,r2,8002df4 <__fixsfsi+0x70>
 8002dd8:	d8800217 	ldw	r2,8(sp)
 8002ddc:	10000c1e 	bne	r2,zero,8002e10 <__fixsfsi+0x8c>
 8002de0:	00a00034 	movhi	r2,32768
 8002de4:	10bfffc4 	addi	r2,r2,-1
 8002de8:	dfc00517 	ldw	ra,20(sp)
 8002dec:	dec00604 	addi	sp,sp,24
 8002df0:	f800283a 	ret
 8002df4:	1885c83a 	sub	r2,r3,r2
 8002df8:	d9000217 	ldw	r4,8(sp)
 8002dfc:	d8c00417 	ldw	r3,16(sp)
 8002e00:	1884d83a 	srl	r2,r3,r2
 8002e04:	203fe926 	beq	r4,zero,8002dac <__fixsfsi+0x28>
 8002e08:	0085c83a 	sub	r2,zero,r2
 8002e0c:	003fe706 	br	8002dac <__fixsfsi+0x28>
 8002e10:	00a00034 	movhi	r2,32768
 8002e14:	003fe506 	br	8002dac <__fixsfsi+0x28>

08002e18 <__extendsfdf2>:
 8002e18:	defff904 	addi	sp,sp,-28
 8002e1c:	d9000115 	stw	r4,4(sp)
 8002e20:	d9400204 	addi	r5,sp,8
 8002e24:	d9000104 	addi	r4,sp,4
 8002e28:	dfc00615 	stw	ra,24(sp)
 8002e2c:	80032680 	call	8003268 <__unpack_f>
 8002e30:	d9c00517 	ldw	r7,20(sp)
 8002e34:	0011883a 	mov	r8,zero
 8002e38:	400697ba 	slli	r3,r8,30
 8002e3c:	3812d0ba 	srli	r9,r7,2
 8002e40:	380497ba 	slli	r2,r7,30
 8002e44:	d9000217 	ldw	r4,8(sp)
 8002e48:	d9400317 	ldw	r5,12(sp)
 8002e4c:	d9800417 	ldw	r6,16(sp)
 8002e50:	48c6b03a 	or	r3,r9,r3
 8002e54:	100f883a 	mov	r7,r2
 8002e58:	d8c00015 	stw	r3,0(sp)
 8002e5c:	8002e6c0 	call	8002e6c <__make_dp>
 8002e60:	dfc00617 	ldw	ra,24(sp)
 8002e64:	dec00704 	addi	sp,sp,28
 8002e68:	f800283a 	ret

08002e6c <__make_dp>:
 8002e6c:	defff904 	addi	sp,sp,-28
 8002e70:	d8c00717 	ldw	r3,28(sp)
 8002e74:	d9000015 	stw	r4,0(sp)
 8002e78:	d809883a 	mov	r4,sp
 8002e7c:	dfc00515 	stw	ra,20(sp)
 8002e80:	d9c00615 	stw	r7,24(sp)
 8002e84:	d9400115 	stw	r5,4(sp)
 8002e88:	d9800215 	stw	r6,8(sp)
 8002e8c:	d8c00415 	stw	r3,16(sp)
 8002e90:	d9c00315 	stw	r7,12(sp)
 8002e94:	80033d80 	call	80033d8 <__pack_d>
 8002e98:	dfc00517 	ldw	ra,20(sp)
 8002e9c:	dec00704 	addi	sp,sp,28
 8002ea0:	f800283a 	ret

08002ea4 <udivmodsi4>:
 8002ea4:	29001b2e 	bgeu	r5,r4,8002f14 <udivmodsi4+0x70>
 8002ea8:	28001a16 	blt	r5,zero,8002f14 <udivmodsi4+0x70>
 8002eac:	00800044 	movi	r2,1
 8002eb0:	0007883a 	mov	r3,zero
 8002eb4:	01c007c4 	movi	r7,31
 8002eb8:	00000306 	br	8002ec8 <udivmodsi4+0x24>
 8002ebc:	19c01326 	beq	r3,r7,8002f0c <udivmodsi4+0x68>
 8002ec0:	18c00044 	addi	r3,r3,1
 8002ec4:	28000416 	blt	r5,zero,8002ed8 <udivmodsi4+0x34>
 8002ec8:	294b883a 	add	r5,r5,r5
 8002ecc:	1085883a 	add	r2,r2,r2
 8002ed0:	293ffa36 	bltu	r5,r4,8002ebc <udivmodsi4+0x18>
 8002ed4:	10000d26 	beq	r2,zero,8002f0c <udivmodsi4+0x68>
 8002ed8:	0007883a 	mov	r3,zero
 8002edc:	21400236 	bltu	r4,r5,8002ee8 <udivmodsi4+0x44>
 8002ee0:	2149c83a 	sub	r4,r4,r5
 8002ee4:	1886b03a 	or	r3,r3,r2
 8002ee8:	1004d07a 	srli	r2,r2,1
 8002eec:	280ad07a 	srli	r5,r5,1
 8002ef0:	103ffa1e 	bne	r2,zero,8002edc <udivmodsi4+0x38>
 8002ef4:	30000226 	beq	r6,zero,8002f00 <udivmodsi4+0x5c>
 8002ef8:	2005883a 	mov	r2,r4
 8002efc:	f800283a 	ret
 8002f00:	1809883a 	mov	r4,r3
 8002f04:	2005883a 	mov	r2,r4
 8002f08:	f800283a 	ret
 8002f0c:	0007883a 	mov	r3,zero
 8002f10:	003ff806 	br	8002ef4 <udivmodsi4+0x50>
 8002f14:	00800044 	movi	r2,1
 8002f18:	0007883a 	mov	r3,zero
 8002f1c:	003fef06 	br	8002edc <udivmodsi4+0x38>

08002f20 <__divsi3>:
 8002f20:	defffe04 	addi	sp,sp,-8
 8002f24:	dc000015 	stw	r16,0(sp)
 8002f28:	dfc00115 	stw	ra,4(sp)
 8002f2c:	0021883a 	mov	r16,zero
 8002f30:	20000c16 	blt	r4,zero,8002f64 <__divsi3+0x44>
 8002f34:	000d883a 	mov	r6,zero
 8002f38:	28000e16 	blt	r5,zero,8002f74 <__divsi3+0x54>
 8002f3c:	8002ea40 	call	8002ea4 <udivmodsi4>
 8002f40:	1007883a 	mov	r3,r2
 8002f44:	8005003a 	cmpeq	r2,r16,zero
 8002f48:	1000011e 	bne	r2,zero,8002f50 <__divsi3+0x30>
 8002f4c:	00c7c83a 	sub	r3,zero,r3
 8002f50:	1805883a 	mov	r2,r3
 8002f54:	dfc00117 	ldw	ra,4(sp)
 8002f58:	dc000017 	ldw	r16,0(sp)
 8002f5c:	dec00204 	addi	sp,sp,8
 8002f60:	f800283a 	ret
 8002f64:	0109c83a 	sub	r4,zero,r4
 8002f68:	04000044 	movi	r16,1
 8002f6c:	000d883a 	mov	r6,zero
 8002f70:	283ff20e 	bge	r5,zero,8002f3c <__divsi3+0x1c>
 8002f74:	014bc83a 	sub	r5,zero,r5
 8002f78:	8021003a 	cmpeq	r16,r16,zero
 8002f7c:	003fef06 	br	8002f3c <__divsi3+0x1c>

08002f80 <__modsi3>:
 8002f80:	deffff04 	addi	sp,sp,-4
 8002f84:	dfc00015 	stw	ra,0(sp)
 8002f88:	01800044 	movi	r6,1
 8002f8c:	2807883a 	mov	r3,r5
 8002f90:	20000416 	blt	r4,zero,8002fa4 <__modsi3+0x24>
 8002f94:	28000c16 	blt	r5,zero,8002fc8 <__modsi3+0x48>
 8002f98:	dfc00017 	ldw	ra,0(sp)
 8002f9c:	dec00104 	addi	sp,sp,4
 8002fa0:	8002ea41 	jmpi	8002ea4 <udivmodsi4>
 8002fa4:	0109c83a 	sub	r4,zero,r4
 8002fa8:	28000b16 	blt	r5,zero,8002fd8 <__modsi3+0x58>
 8002fac:	180b883a 	mov	r5,r3
 8002fb0:	01800044 	movi	r6,1
 8002fb4:	8002ea40 	call	8002ea4 <udivmodsi4>
 8002fb8:	0085c83a 	sub	r2,zero,r2
 8002fbc:	dfc00017 	ldw	ra,0(sp)
 8002fc0:	dec00104 	addi	sp,sp,4
 8002fc4:	f800283a 	ret
 8002fc8:	014bc83a 	sub	r5,zero,r5
 8002fcc:	dfc00017 	ldw	ra,0(sp)
 8002fd0:	dec00104 	addi	sp,sp,4
 8002fd4:	8002ea41 	jmpi	8002ea4 <udivmodsi4>
 8002fd8:	0147c83a 	sub	r3,zero,r5
 8002fdc:	003ff306 	br	8002fac <__modsi3+0x2c>

08002fe0 <__udivsi3>:
 8002fe0:	000d883a 	mov	r6,zero
 8002fe4:	8002ea41 	jmpi	8002ea4 <udivmodsi4>

08002fe8 <__umodsi3>:
 8002fe8:	01800044 	movi	r6,1
 8002fec:	8002ea41 	jmpi	8002ea4 <udivmodsi4>

08002ff0 <__muldi3>:
 8002ff0:	2011883a 	mov	r8,r4
 8002ff4:	427fffcc 	andi	r9,r8,65535
 8002ff8:	4018d43a 	srli	r12,r8,16
 8002ffc:	32bfffcc 	andi	r10,r6,65535
 8003000:	3016d43a 	srli	r11,r6,16
 8003004:	4a85383a 	mul	r2,r9,r10
 8003008:	6295383a 	mul	r10,r12,r10
 800300c:	4ad3383a 	mul	r9,r9,r11
 8003010:	113fffcc 	andi	r4,r2,65535
 8003014:	1004d43a 	srli	r2,r2,16
 8003018:	4a93883a 	add	r9,r9,r10
 800301c:	3807883a 	mov	r3,r7
 8003020:	1245883a 	add	r2,r2,r9
 8003024:	280f883a 	mov	r7,r5
 8003028:	180b883a 	mov	r5,r3
 800302c:	1006943a 	slli	r3,r2,16
 8003030:	defffd04 	addi	sp,sp,-12
 8003034:	dc800215 	stw	r18,8(sp)
 8003038:	1907883a 	add	r3,r3,r4
 800303c:	dc400115 	stw	r17,4(sp)
 8003040:	dc000015 	stw	r16,0(sp)
 8003044:	4165383a 	mul	r18,r8,r5
 8003048:	31e3383a 	mul	r17,r6,r7
 800304c:	1012d43a 	srli	r9,r2,16
 8003050:	62d9383a 	mul	r12,r12,r11
 8003054:	181f883a 	mov	r15,r3
 8003058:	1280022e 	bgeu	r2,r10,8003064 <__muldi3+0x74>
 800305c:	00800074 	movhi	r2,1
 8003060:	6099883a 	add	r12,r12,r2
 8003064:	624d883a 	add	r6,r12,r9
 8003068:	9187883a 	add	r3,r18,r6
 800306c:	88c7883a 	add	r3,r17,r3
 8003070:	7805883a 	mov	r2,r15
 8003074:	dc800217 	ldw	r18,8(sp)
 8003078:	dc400117 	ldw	r17,4(sp)
 800307c:	dc000017 	ldw	r16,0(sp)
 8003080:	dec00304 	addi	sp,sp,12
 8003084:	f800283a 	ret

08003088 <__clzsi2>:
 8003088:	00bfffd4 	movui	r2,65535
 800308c:	11000e36 	bltu	r2,r4,80030c8 <__clzsi2+0x40>
 8003090:	00803fc4 	movi	r2,255
 8003094:	01400204 	movi	r5,8
 8003098:	0007883a 	mov	r3,zero
 800309c:	11001036 	bltu	r2,r4,80030e0 <__clzsi2+0x58>
 80030a0:	000b883a 	mov	r5,zero
 80030a4:	20c6d83a 	srl	r3,r4,r3
 80030a8:	00820074 	movhi	r2,2049
 80030ac:	109e1804 	addi	r2,r2,30816
 80030b0:	1887883a 	add	r3,r3,r2
 80030b4:	18800003 	ldbu	r2,0(r3)
 80030b8:	00c00804 	movi	r3,32
 80030bc:	2885883a 	add	r2,r5,r2
 80030c0:	1885c83a 	sub	r2,r3,r2
 80030c4:	f800283a 	ret
 80030c8:	01400404 	movi	r5,16
 80030cc:	00804034 	movhi	r2,256
 80030d0:	10bfffc4 	addi	r2,r2,-1
 80030d4:	2807883a 	mov	r3,r5
 80030d8:	113ff22e 	bgeu	r2,r4,80030a4 <__clzsi2+0x1c>
 80030dc:	01400604 	movi	r5,24
 80030e0:	2807883a 	mov	r3,r5
 80030e4:	20c6d83a 	srl	r3,r4,r3
 80030e8:	00820074 	movhi	r2,2049
 80030ec:	109e1804 	addi	r2,r2,30816
 80030f0:	1887883a 	add	r3,r3,r2
 80030f4:	18800003 	ldbu	r2,0(r3)
 80030f8:	00c00804 	movi	r3,32
 80030fc:	2885883a 	add	r2,r5,r2
 8003100:	1885c83a 	sub	r2,r3,r2
 8003104:	f800283a 	ret

08003108 <__pack_f>:
 8003108:	20c00017 	ldw	r3,0(r4)
 800310c:	01c00044 	movi	r7,1
 8003110:	21800317 	ldw	r6,12(r4)
 8003114:	21400117 	ldw	r5,4(r4)
 8003118:	38c02d2e 	bgeu	r7,r3,80031d0 <__pack_f+0xc8>
 800311c:	00800104 	movi	r2,4
 8003120:	18802826 	beq	r3,r2,80031c4 <__pack_f+0xbc>
 8003124:	00800084 	movi	r2,2
 8003128:	18800126 	beq	r3,r2,8003130 <__pack_f+0x28>
 800312c:	3000101e 	bne	r6,zero,8003170 <__pack_f+0x68>
 8003130:	000d883a 	mov	r6,zero
 8003134:	0007883a 	mov	r3,zero
 8003138:	19003fcc 	andi	r4,r3,255
 800313c:	200895fa 	slli	r4,r4,23
 8003140:	00c02034 	movhi	r3,128
 8003144:	18ffffc4 	addi	r3,r3,-1
 8003148:	30c6703a 	and	r3,r6,r3
 800314c:	10a0002c 	andhi	r2,r2,32768
 8003150:	10c4b03a 	or	r2,r2,r3
 8003154:	280a97fa 	slli	r5,r5,31
 8003158:	1104b03a 	or	r2,r2,r4
 800315c:	00e00034 	movhi	r3,32768
 8003160:	18ffffc4 	addi	r3,r3,-1
 8003164:	10c4703a 	and	r2,r2,r3
 8003168:	1144b03a 	or	r2,r2,r5
 800316c:	f800283a 	ret
 8003170:	21000217 	ldw	r4,8(r4)
 8003174:	00bfe084 	movi	r2,-126
 8003178:	20801b16 	blt	r4,r2,80031e8 <__pack_f+0xe0>
 800317c:	00801fc4 	movi	r2,127
 8003180:	11001016 	blt	r2,r4,80031c4 <__pack_f+0xbc>
 8003184:	308e703a 	and	r7,r6,r2
 8003188:	2087883a 	add	r3,r4,r2
 800318c:	00801004 	movi	r2,64
 8003190:	38800526 	beq	r7,r2,80031a8 <__pack_f+0xa0>
 8003194:	31800fc4 	addi	r6,r6,63
 8003198:	30000716 	blt	r6,zero,80031b8 <__pack_f+0xb0>
 800319c:	300490ba 	slli	r2,r6,2
 80031a0:	100cd27a 	srli	r6,r2,9
 80031a4:	003fe406 	br	8003138 <__pack_f+0x30>
 80031a8:	3080200c 	andi	r2,r6,128
 80031ac:	103ffa26 	beq	r2,zero,8003198 <__pack_f+0x90>
 80031b0:	31cd883a 	add	r6,r6,r7
 80031b4:	003ff806 	br	8003198 <__pack_f+0x90>
 80031b8:	300cd07a 	srli	r6,r6,1
 80031bc:	18c00044 	addi	r3,r3,1
 80031c0:	003ff606 	br	800319c <__pack_f+0x94>
 80031c4:	000d883a 	mov	r6,zero
 80031c8:	00ffffc4 	movi	r3,-1
 80031cc:	003fda06 	br	8003138 <__pack_f+0x30>
 80031d0:	31800434 	orhi	r6,r6,16
 80031d4:	00802034 	movhi	r2,128
 80031d8:	10bfffc4 	addi	r2,r2,-1
 80031dc:	308c703a 	and	r6,r6,r2
 80031e0:	00ffffc4 	movi	r3,-1
 80031e4:	003fd406 	br	8003138 <__pack_f+0x30>
 80031e8:	1109c83a 	sub	r4,r2,r4
 80031ec:	00800644 	movi	r2,25
 80031f0:	11001216 	blt	r2,r4,800323c <__pack_f+0x134>
 80031f4:	3904983a 	sll	r2,r7,r4
 80031f8:	3106d83a 	srl	r3,r6,r4
 80031fc:	10bfffc4 	addi	r2,r2,-1
 8003200:	3084703a 	and	r2,r6,r2
 8003204:	1004c03a 	cmpne	r2,r2,zero
 8003208:	1886b03a 	or	r3,r3,r2
 800320c:	19001fcc 	andi	r4,r3,127
 8003210:	00801004 	movi	r2,64
 8003214:	20800c26 	beq	r4,r2,8003248 <__pack_f+0x140>
 8003218:	18c00fc4 	addi	r3,r3,63
 800321c:	00900034 	movhi	r2,16384
 8003220:	10bfffc4 	addi	r2,r2,-1
 8003224:	180cd1fa 	srli	r6,r3,7
 8003228:	10c7803a 	cmpltu	r3,r2,r3
 800322c:	00802034 	movhi	r2,128
 8003230:	10bfffc4 	addi	r2,r2,-1
 8003234:	308c703a 	and	r6,r6,r2
 8003238:	003fbf06 	br	8003138 <__pack_f+0x30>
 800323c:	0007883a 	mov	r3,zero
 8003240:	000d883a 	mov	r6,zero
 8003244:	003ff906 	br	800322c <__pack_f+0x124>
 8003248:	1880200c 	andi	r2,r3,128
 800324c:	10000126 	beq	r2,zero,8003254 <__pack_f+0x14c>
 8003250:	1907883a 	add	r3,r3,r4
 8003254:	180cd1fa 	srli	r6,r3,7
 8003258:	00900034 	movhi	r2,16384
 800325c:	10bfffc4 	addi	r2,r2,-1
 8003260:	10c7803a 	cmpltu	r3,r2,r3
 8003264:	003ff106 	br	800322c <__pack_f+0x124>

08003268 <__unpack_f>:
 8003268:	21800017 	ldw	r6,0(r4)
 800326c:	00c02034 	movhi	r3,128
 8003270:	18ffffc4 	addi	r3,r3,-1
 8003274:	3004d5fa 	srli	r2,r6,23
 8003278:	3008d7fa 	srli	r4,r6,31
 800327c:	30ce703a 	and	r7,r6,r3
 8003280:	10c03fcc 	andi	r3,r2,255
 8003284:	29000115 	stw	r4,4(r5)
 8003288:	1800131e 	bne	r3,zero,80032d8 <__unpack_f+0x70>
 800328c:	38000f26 	beq	r7,zero,80032cc <__unpack_f+0x64>
 8003290:	380691fa 	slli	r3,r7,7
 8003294:	01bfe084 	movi	r6,-126
 8003298:	008000c4 	movi	r2,3
 800329c:	01100034 	movhi	r4,16384
 80032a0:	213fffc4 	addi	r4,r4,-1
 80032a4:	28800015 	stw	r2,0(r5)
 80032a8:	29800215 	stw	r6,8(r5)
 80032ac:	20c00536 	bltu	r4,r3,80032c4 <__unpack_f+0x5c>
 80032b0:	3005883a 	mov	r2,r6
 80032b4:	18c7883a 	add	r3,r3,r3
 80032b8:	10bfffc4 	addi	r2,r2,-1
 80032bc:	20fffd2e 	bgeu	r4,r3,80032b4 <__unpack_f+0x4c>
 80032c0:	28800215 	stw	r2,8(r5)
 80032c4:	28c00315 	stw	r3,12(r5)
 80032c8:	f800283a 	ret
 80032cc:	00800084 	movi	r2,2
 80032d0:	28800015 	stw	r2,0(r5)
 80032d4:	f800283a 	ret
 80032d8:	00803fc4 	movi	r2,255
 80032dc:	18800826 	beq	r3,r2,8003300 <__unpack_f+0x98>
 80032e0:	380491fa 	slli	r2,r7,7
 80032e4:	18ffe044 	addi	r3,r3,-127
 80032e8:	28c00215 	stw	r3,8(r5)
 80032ec:	10900034 	orhi	r2,r2,16384
 80032f0:	28800315 	stw	r2,12(r5)
 80032f4:	008000c4 	movi	r2,3
 80032f8:	28800015 	stw	r2,0(r5)
 80032fc:	f800283a 	ret
 8003300:	3800031e 	bne	r7,zero,8003310 <__unpack_f+0xa8>
 8003304:	00800104 	movi	r2,4
 8003308:	28800015 	stw	r2,0(r5)
 800330c:	f800283a 	ret
 8003310:	3080042c 	andhi	r2,r6,16
 8003314:	10000426 	beq	r2,zero,8003328 <__unpack_f+0xc0>
 8003318:	00800044 	movi	r2,1
 800331c:	28800015 	stw	r2,0(r5)
 8003320:	29c00315 	stw	r7,12(r5)
 8003324:	f800283a 	ret
 8003328:	28000015 	stw	zero,0(r5)
 800332c:	003ffc06 	br	8003320 <__unpack_f+0xb8>

08003330 <__fpcmp_parts_f>:
 8003330:	21800017 	ldw	r6,0(r4)
 8003334:	00c00044 	movi	r3,1
 8003338:	19800a2e 	bgeu	r3,r6,8003364 <__fpcmp_parts_f+0x34>
 800333c:	28800017 	ldw	r2,0(r5)
 8003340:	1880082e 	bgeu	r3,r2,8003364 <__fpcmp_parts_f+0x34>
 8003344:	00c00104 	movi	r3,4
 8003348:	30c01e26 	beq	r6,r3,80033c4 <__fpcmp_parts_f+0x94>
 800334c:	10c01a26 	beq	r2,r3,80033b8 <__fpcmp_parts_f+0x88>
 8003350:	00c00084 	movi	r3,2
 8003354:	30c00526 	beq	r6,r3,800336c <__fpcmp_parts_f+0x3c>
 8003358:	10c0071e 	bne	r2,r3,8003378 <__fpcmp_parts_f+0x48>
 800335c:	20800117 	ldw	r2,4(r4)
 8003360:	1000091e 	bne	r2,zero,8003388 <__fpcmp_parts_f+0x58>
 8003364:	00800044 	movi	r2,1
 8003368:	f800283a 	ret
 800336c:	10c0121e 	bne	r2,r3,80033b8 <__fpcmp_parts_f+0x88>
 8003370:	0005883a 	mov	r2,zero
 8003374:	f800283a 	ret
 8003378:	20c00117 	ldw	r3,4(r4)
 800337c:	28800117 	ldw	r2,4(r5)
 8003380:	18800326 	beq	r3,r2,8003390 <__fpcmp_parts_f+0x60>
 8003384:	183ff726 	beq	r3,zero,8003364 <__fpcmp_parts_f+0x34>
 8003388:	00bfffc4 	movi	r2,-1
 800338c:	f800283a 	ret
 8003390:	21800217 	ldw	r6,8(r4)
 8003394:	28800217 	ldw	r2,8(r5)
 8003398:	11bffa16 	blt	r2,r6,8003384 <__fpcmp_parts_f+0x54>
 800339c:	30800416 	blt	r6,r2,80033b0 <__fpcmp_parts_f+0x80>
 80033a0:	21000317 	ldw	r4,12(r4)
 80033a4:	29400317 	ldw	r5,12(r5)
 80033a8:	293ff636 	bltu	r5,r4,8003384 <__fpcmp_parts_f+0x54>
 80033ac:	217ff02e 	bgeu	r4,r5,8003370 <__fpcmp_parts_f+0x40>
 80033b0:	183fec1e 	bne	r3,zero,8003364 <__fpcmp_parts_f+0x34>
 80033b4:	003ff406 	br	8003388 <__fpcmp_parts_f+0x58>
 80033b8:	28800117 	ldw	r2,4(r5)
 80033bc:	103fe91e 	bne	r2,zero,8003364 <__fpcmp_parts_f+0x34>
 80033c0:	003ff106 	br	8003388 <__fpcmp_parts_f+0x58>
 80033c4:	11bfe51e 	bne	r2,r6,800335c <__fpcmp_parts_f+0x2c>
 80033c8:	28c00117 	ldw	r3,4(r5)
 80033cc:	20800117 	ldw	r2,4(r4)
 80033d0:	1885c83a 	sub	r2,r3,r2
 80033d4:	f800283a 	ret

080033d8 <__pack_d>:
 80033d8:	20c00017 	ldw	r3,0(r4)
 80033dc:	defffd04 	addi	sp,sp,-12
 80033e0:	dc000015 	stw	r16,0(sp)
 80033e4:	dc800215 	stw	r18,8(sp)
 80033e8:	dc400115 	stw	r17,4(sp)
 80033ec:	00800044 	movi	r2,1
 80033f0:	22000317 	ldw	r8,12(r4)
 80033f4:	001f883a 	mov	r15,zero
 80033f8:	22400417 	ldw	r9,16(r4)
 80033fc:	24000117 	ldw	r16,4(r4)
 8003400:	10c0552e 	bgeu	r2,r3,8003558 <__pack_d+0x180>
 8003404:	00800104 	movi	r2,4
 8003408:	18804f26 	beq	r3,r2,8003548 <__pack_d+0x170>
 800340c:	00800084 	movi	r2,2
 8003410:	18800226 	beq	r3,r2,800341c <__pack_d+0x44>
 8003414:	4244b03a 	or	r2,r8,r9
 8003418:	10001a1e 	bne	r2,zero,8003484 <__pack_d+0xac>
 800341c:	000d883a 	mov	r6,zero
 8003420:	000f883a 	mov	r7,zero
 8003424:	0011883a 	mov	r8,zero
 8003428:	00800434 	movhi	r2,16
 800342c:	10bfffc4 	addi	r2,r2,-1
 8003430:	301d883a 	mov	r14,r6
 8003434:	3884703a 	and	r2,r7,r2
 8003438:	400a953a 	slli	r5,r8,20
 800343c:	79bffc2c 	andhi	r6,r15,65520
 8003440:	308cb03a 	or	r6,r6,r2
 8003444:	00e00434 	movhi	r3,32784
 8003448:	18ffffc4 	addi	r3,r3,-1
 800344c:	800497fa 	slli	r2,r16,31
 8003450:	30c6703a 	and	r3,r6,r3
 8003454:	1946b03a 	or	r3,r3,r5
 8003458:	01600034 	movhi	r5,32768
 800345c:	297fffc4 	addi	r5,r5,-1
 8003460:	194a703a 	and	r5,r3,r5
 8003464:	288ab03a 	or	r5,r5,r2
 8003468:	2807883a 	mov	r3,r5
 800346c:	7005883a 	mov	r2,r14
 8003470:	dc800217 	ldw	r18,8(sp)
 8003474:	dc400117 	ldw	r17,4(sp)
 8003478:	dc000017 	ldw	r16,0(sp)
 800347c:	dec00304 	addi	sp,sp,12
 8003480:	f800283a 	ret
 8003484:	21000217 	ldw	r4,8(r4)
 8003488:	00bf0084 	movi	r2,-1022
 800348c:	20803f16 	blt	r4,r2,800358c <__pack_d+0x1b4>
 8003490:	0080ffc4 	movi	r2,1023
 8003494:	11002c16 	blt	r2,r4,8003548 <__pack_d+0x170>
 8003498:	00803fc4 	movi	r2,255
 800349c:	408c703a 	and	r6,r8,r2
 80034a0:	00802004 	movi	r2,128
 80034a4:	0007883a 	mov	r3,zero
 80034a8:	000f883a 	mov	r7,zero
 80034ac:	2280ffc4 	addi	r10,r4,1023
 80034b0:	30801e26 	beq	r6,r2,800352c <__pack_d+0x154>
 80034b4:	00801fc4 	movi	r2,127
 80034b8:	4089883a 	add	r4,r8,r2
 80034bc:	220d803a 	cmpltu	r6,r4,r8
 80034c0:	324d883a 	add	r6,r6,r9
 80034c4:	2011883a 	mov	r8,r4
 80034c8:	3013883a 	mov	r9,r6
 80034cc:	00880034 	movhi	r2,8192
 80034d0:	10bfffc4 	addi	r2,r2,-1
 80034d4:	12400d36 	bltu	r2,r9,800350c <__pack_d+0x134>
 80034d8:	4804963a 	slli	r2,r9,24
 80034dc:	400cd23a 	srli	r6,r8,8
 80034e0:	480ed23a 	srli	r7,r9,8
 80034e4:	013fffc4 	movi	r4,-1
 80034e8:	118cb03a 	or	r6,r2,r6
 80034ec:	01400434 	movhi	r5,16
 80034f0:	297fffc4 	addi	r5,r5,-1
 80034f4:	3104703a 	and	r2,r6,r4
 80034f8:	3946703a 	and	r3,r7,r5
 80034fc:	5201ffcc 	andi	r8,r10,2047
 8003500:	100d883a 	mov	r6,r2
 8003504:	180f883a 	mov	r7,r3
 8003508:	003fc706 	br	8003428 <__pack_d+0x50>
 800350c:	480897fa 	slli	r4,r9,31
 8003510:	4004d07a 	srli	r2,r8,1
 8003514:	4806d07a 	srli	r3,r9,1
 8003518:	52800044 	addi	r10,r10,1
 800351c:	2084b03a 	or	r2,r4,r2
 8003520:	1011883a 	mov	r8,r2
 8003524:	1813883a 	mov	r9,r3
 8003528:	003feb06 	br	80034d8 <__pack_d+0x100>
 800352c:	383fe11e 	bne	r7,zero,80034b4 <__pack_d+0xdc>
 8003530:	01004004 	movi	r4,256
 8003534:	4104703a 	and	r2,r8,r4
 8003538:	10c4b03a 	or	r2,r2,r3
 800353c:	103fe326 	beq	r2,zero,80034cc <__pack_d+0xf4>
 8003540:	3005883a 	mov	r2,r6
 8003544:	003fdc06 	br	80034b8 <__pack_d+0xe0>
 8003548:	000d883a 	mov	r6,zero
 800354c:	000f883a 	mov	r7,zero
 8003550:	0201ffc4 	movi	r8,2047
 8003554:	003fb406 	br	8003428 <__pack_d+0x50>
 8003558:	0005883a 	mov	r2,zero
 800355c:	00c00234 	movhi	r3,8
 8003560:	408cb03a 	or	r6,r8,r2
 8003564:	48ceb03a 	or	r7,r9,r3
 8003568:	013fffc4 	movi	r4,-1
 800356c:	01400434 	movhi	r5,16
 8003570:	297fffc4 	addi	r5,r5,-1
 8003574:	3104703a 	and	r2,r6,r4
 8003578:	3946703a 	and	r3,r7,r5
 800357c:	100d883a 	mov	r6,r2
 8003580:	180f883a 	mov	r7,r3
 8003584:	0201ffc4 	movi	r8,2047
 8003588:	003fa706 	br	8003428 <__pack_d+0x50>
 800358c:	1109c83a 	sub	r4,r2,r4
 8003590:	00800e04 	movi	r2,56
 8003594:	11004316 	blt	r2,r4,80036a4 <__pack_d+0x2cc>
 8003598:	21fff804 	addi	r7,r4,-32
 800359c:	38004516 	blt	r7,zero,80036b4 <__pack_d+0x2dc>
 80035a0:	49d8d83a 	srl	r12,r9,r7
 80035a4:	001b883a 	mov	r13,zero
 80035a8:	0023883a 	mov	r17,zero
 80035ac:	01400044 	movi	r5,1
 80035b0:	0025883a 	mov	r18,zero
 80035b4:	38004716 	blt	r7,zero,80036d4 <__pack_d+0x2fc>
 80035b8:	29d6983a 	sll	r11,r5,r7
 80035bc:	0015883a 	mov	r10,zero
 80035c0:	00bfffc4 	movi	r2,-1
 80035c4:	5089883a 	add	r4,r10,r2
 80035c8:	588b883a 	add	r5,r11,r2
 80035cc:	228d803a 	cmpltu	r6,r4,r10
 80035d0:	314b883a 	add	r5,r6,r5
 80035d4:	4104703a 	and	r2,r8,r4
 80035d8:	4946703a 	and	r3,r9,r5
 80035dc:	10c4b03a 	or	r2,r2,r3
 80035e0:	10000226 	beq	r2,zero,80035ec <__pack_d+0x214>
 80035e4:	04400044 	movi	r17,1
 80035e8:	0025883a 	mov	r18,zero
 80035ec:	00803fc4 	movi	r2,255
 80035f0:	644eb03a 	or	r7,r12,r17
 80035f4:	3892703a 	and	r9,r7,r2
 80035f8:	00802004 	movi	r2,128
 80035fc:	6c90b03a 	or	r8,r13,r18
 8003600:	0015883a 	mov	r10,zero
 8003604:	48801626 	beq	r9,r2,8003660 <__pack_d+0x288>
 8003608:	01001fc4 	movi	r4,127
 800360c:	3905883a 	add	r2,r7,r4
 8003610:	11cd803a 	cmpltu	r6,r2,r7
 8003614:	320d883a 	add	r6,r6,r8
 8003618:	100f883a 	mov	r7,r2
 800361c:	00840034 	movhi	r2,4096
 8003620:	10bfffc4 	addi	r2,r2,-1
 8003624:	3011883a 	mov	r8,r6
 8003628:	0007883a 	mov	r3,zero
 800362c:	11801b36 	bltu	r2,r6,800369c <__pack_d+0x2c4>
 8003630:	4004963a 	slli	r2,r8,24
 8003634:	3808d23a 	srli	r4,r7,8
 8003638:	400ad23a 	srli	r5,r8,8
 800363c:	1813883a 	mov	r9,r3
 8003640:	1108b03a 	or	r4,r2,r4
 8003644:	00bfffc4 	movi	r2,-1
 8003648:	00c00434 	movhi	r3,16
 800364c:	18ffffc4 	addi	r3,r3,-1
 8003650:	208c703a 	and	r6,r4,r2
 8003654:	28ce703a 	and	r7,r5,r3
 8003658:	4a01ffcc 	andi	r8,r9,2047
 800365c:	003f7206 	br	8003428 <__pack_d+0x50>
 8003660:	503fe91e 	bne	r10,zero,8003608 <__pack_d+0x230>
 8003664:	01004004 	movi	r4,256
 8003668:	3904703a 	and	r2,r7,r4
 800366c:	0007883a 	mov	r3,zero
 8003670:	10c4b03a 	or	r2,r2,r3
 8003674:	10000626 	beq	r2,zero,8003690 <__pack_d+0x2b8>
 8003678:	3a45883a 	add	r2,r7,r9
 800367c:	11cd803a 	cmpltu	r6,r2,r7
 8003680:	320d883a 	add	r6,r6,r8
 8003684:	100f883a 	mov	r7,r2
 8003688:	3011883a 	mov	r8,r6
 800368c:	0007883a 	mov	r3,zero
 8003690:	00840034 	movhi	r2,4096
 8003694:	10bfffc4 	addi	r2,r2,-1
 8003698:	123fe52e 	bgeu	r2,r8,8003630 <__pack_d+0x258>
 800369c:	00c00044 	movi	r3,1
 80036a0:	003fe306 	br	8003630 <__pack_d+0x258>
 80036a4:	0009883a 	mov	r4,zero
 80036a8:	0013883a 	mov	r9,zero
 80036ac:	000b883a 	mov	r5,zero
 80036b0:	003fe406 	br	8003644 <__pack_d+0x26c>
 80036b4:	4a47883a 	add	r3,r9,r9
 80036b8:	008007c4 	movi	r2,31
 80036bc:	1105c83a 	sub	r2,r2,r4
 80036c0:	1886983a 	sll	r3,r3,r2
 80036c4:	4118d83a 	srl	r12,r8,r4
 80036c8:	491ad83a 	srl	r13,r9,r4
 80036cc:	1b18b03a 	or	r12,r3,r12
 80036d0:	003fb506 	br	80035a8 <__pack_d+0x1d0>
 80036d4:	2806d07a 	srli	r3,r5,1
 80036d8:	008007c4 	movi	r2,31
 80036dc:	1105c83a 	sub	r2,r2,r4
 80036e0:	1896d83a 	srl	r11,r3,r2
 80036e4:	2914983a 	sll	r10,r5,r4
 80036e8:	003fb506 	br	80035c0 <__pack_d+0x1e8>

080036ec <_fopen_r>:
 80036ec:	defffa04 	addi	sp,sp,-24
 80036f0:	dcc00415 	stw	r19,16(sp)
 80036f4:	2827883a 	mov	r19,r5
 80036f8:	300b883a 	mov	r5,r6
 80036fc:	d80d883a 	mov	r6,sp
 8003700:	dc800315 	stw	r18,12(sp)
 8003704:	dc400215 	stw	r17,8(sp)
 8003708:	dc000115 	stw	r16,4(sp)
 800370c:	dfc00515 	stw	ra,20(sp)
 8003710:	2021883a 	mov	r16,r4
 8003714:	80097a00 	call	80097a0 <__sflags>
 8003718:	1025883a 	mov	r18,r2
 800371c:	8009883a 	mov	r4,r16
 8003720:	0023883a 	mov	r17,zero
 8003724:	1000081e 	bne	r2,zero,8003748 <_fopen_r+0x5c>
 8003728:	8805883a 	mov	r2,r17
 800372c:	dfc00517 	ldw	ra,20(sp)
 8003730:	dcc00417 	ldw	r19,16(sp)
 8003734:	dc800317 	ldw	r18,12(sp)
 8003738:	dc400217 	ldw	r17,8(sp)
 800373c:	dc000117 	ldw	r16,4(sp)
 8003740:	dec00604 	addi	sp,sp,24
 8003744:	f800283a 	ret
 8003748:	80096b00 	call	80096b0 <__sfp>
 800374c:	1023883a 	mov	r17,r2
 8003750:	980b883a 	mov	r5,r19
 8003754:	8009883a 	mov	r4,r16
 8003758:	01c06d84 	movi	r7,438
 800375c:	103ff226 	beq	r2,zero,8003728 <_fopen_r+0x3c>
 8003760:	d9800017 	ldw	r6,0(sp)
 8003764:	8004ce80 	call	8004ce8 <_open_r>
 8003768:	10001816 	blt	r2,zero,80037cc <_fopen_r+0xe0>
 800376c:	00c20034 	movhi	r3,2048
 8003770:	18d47304 	addi	r3,r3,20940
 8003774:	923fffcc 	andi	r8,r18,65535
 8003778:	8880038d 	sth	r2,14(r17)
 800377c:	00820034 	movhi	r2,2048
 8003780:	10949204 	addi	r2,r2,21064
 8003784:	88800815 	stw	r2,32(r17)
 8003788:	88c00915 	stw	r3,36(r17)
 800378c:	00820034 	movhi	r2,2048
 8003790:	10945904 	addi	r2,r2,20836
 8003794:	00c20034 	movhi	r3,2048
 8003798:	18d45704 	addi	r3,r3,20828
 800379c:	4200400c 	andi	r8,r8,256
 80037a0:	8c80030d 	sth	r18,12(r17)
 80037a4:	8009883a 	mov	r4,r16
 80037a8:	880b883a 	mov	r5,r17
 80037ac:	000d883a 	mov	r6,zero
 80037b0:	01c00084 	movi	r7,2
 80037b4:	88800a15 	stw	r2,40(r17)
 80037b8:	88c00b15 	stw	r3,44(r17)
 80037bc:	8c400715 	stw	r17,28(r17)
 80037c0:	403fd926 	beq	r8,zero,8003728 <_fopen_r+0x3c>
 80037c4:	8003e780 	call	8003e78 <_fseek_r>
 80037c8:	003fd706 	br	8003728 <_fopen_r+0x3c>
 80037cc:	80095380 	call	8009538 <__sfp_lock_acquire>
 80037d0:	8800030d 	sth	zero,12(r17)
 80037d4:	800953c0 	call	800953c <__sfp_lock_release>
 80037d8:	0023883a 	mov	r17,zero
 80037dc:	003fd206 	br	8003728 <_fopen_r+0x3c>

080037e0 <fopen>:
 80037e0:	018200b4 	movhi	r6,2050
 80037e4:	31a95904 	addi	r6,r6,-23196
 80037e8:	2007883a 	mov	r3,r4
 80037ec:	31000017 	ldw	r4,0(r6)
 80037f0:	280d883a 	mov	r6,r5
 80037f4:	180b883a 	mov	r5,r3
 80037f8:	80036ec1 	jmpi	80036ec <_fopen_r>

080037fc <_fread_r>:
 80037fc:	defff504 	addi	sp,sp,-44
 8003800:	ddc00815 	stw	r23,32(sp)
 8003804:	39af383a 	mul	r23,r7,r6
 8003808:	df000915 	stw	fp,36(sp)
 800380c:	dd800715 	stw	r22,28(sp)
 8003810:	dcc00415 	stw	r19,16(sp)
 8003814:	dc000115 	stw	r16,4(sp)
 8003818:	dfc00a15 	stw	ra,40(sp)
 800381c:	dd400615 	stw	r21,24(sp)
 8003820:	dd000515 	stw	r20,20(sp)
 8003824:	dc800315 	stw	r18,12(sp)
 8003828:	dc400215 	stw	r17,8(sp)
 800382c:	d9800015 	stw	r6,0(sp)
 8003830:	3839883a 	mov	fp,r7
 8003834:	2821883a 	mov	r16,r5
 8003838:	202d883a 	mov	r22,r4
 800383c:	dcc00b17 	ldw	r19,44(sp)
 8003840:	b8005926 	beq	r23,zero,80039a8 <_fread_r+0x1ac>
 8003844:	20000226 	beq	r4,zero,8003850 <_fread_r+0x54>
 8003848:	20800e17 	ldw	r2,56(r4)
 800384c:	10005826 	beq	r2,zero,80039b0 <_fread_r+0x1b4>
 8003850:	9c400117 	ldw	r17,4(r19)
 8003854:	88005916 	blt	r17,zero,80039bc <_fread_r+0x1c0>
 8003858:	9880030b 	ldhu	r2,12(r19)
 800385c:	8029883a 	mov	r20,r16
 8003860:	1080008c 	andi	r2,r2,2
 8003864:	1000221e 	bne	r2,zero,80038f0 <_fread_r+0xf4>
 8003868:	b825883a 	mov	r18,r23
 800386c:	00000106 	br	8003874 <_fread_r+0x78>
 8003870:	9c400117 	ldw	r17,4(r19)
 8003874:	a009883a 	mov	r4,r20
 8003878:	880d883a 	mov	r6,r17
 800387c:	8c80542e 	bgeu	r17,r18,80039d0 <_fread_r+0x1d4>
 8003880:	99400017 	ldw	r5,0(r19)
 8003884:	a469883a 	add	r20,r20,r17
 8003888:	9465c83a 	sub	r18,r18,r17
 800388c:	8004c480 	call	8004c48 <memcpy>
 8003890:	98800017 	ldw	r2,0(r19)
 8003894:	b009883a 	mov	r4,r22
 8003898:	980b883a 	mov	r5,r19
 800389c:	1461883a 	add	r16,r2,r17
 80038a0:	9c000015 	stw	r16,0(r19)
 80038a4:	8004f0c0 	call	8004f0c <__srefill_r>
 80038a8:	103ff126 	beq	r2,zero,8003870 <_fread_r+0x74>
 80038ac:	d9400017 	ldw	r5,0(sp)
 80038b0:	bc89c83a 	sub	r4,r23,r18
 80038b4:	8002fe00 	call	8002fe0 <__udivsi3>
 80038b8:	1039883a 	mov	fp,r2
 80038bc:	e005883a 	mov	r2,fp
 80038c0:	dfc00a17 	ldw	ra,40(sp)
 80038c4:	df000917 	ldw	fp,36(sp)
 80038c8:	ddc00817 	ldw	r23,32(sp)
 80038cc:	dd800717 	ldw	r22,28(sp)
 80038d0:	dd400617 	ldw	r21,24(sp)
 80038d4:	dd000517 	ldw	r20,20(sp)
 80038d8:	dcc00417 	ldw	r19,16(sp)
 80038dc:	dc800317 	ldw	r18,12(sp)
 80038e0:	dc400217 	ldw	r17,8(sp)
 80038e4:	dc000117 	ldw	r16,4(sp)
 80038e8:	dec00b04 	addi	sp,sp,44
 80038ec:	f800283a 	ret
 80038f0:	b825883a 	mov	r18,r23
 80038f4:	8dc03436 	bltu	r17,r23,80039c8 <_fread_r+0x1cc>
 80038f8:	99400017 	ldw	r5,0(r19)
 80038fc:	a009883a 	mov	r4,r20
 8003900:	900d883a 	mov	r6,r18
 8003904:	8004c480 	call	8004c48 <memcpy>
 8003908:	9c000017 	ldw	r16,0(r19)
 800390c:	98800117 	ldw	r2,4(r19)
 8003910:	99400c17 	ldw	r5,48(r19)
 8003914:	84a1883a 	add	r16,r16,r18
 8003918:	14a3c83a 	sub	r17,r2,r18
 800391c:	a4ab883a 	add	r21,r20,r18
 8003920:	9c400115 	stw	r17,4(r19)
 8003924:	9c000015 	stw	r16,0(r19)
 8003928:	bca9c83a 	sub	r20,r23,r18
 800392c:	28000826 	beq	r5,zero,8003950 <_fread_r+0x154>
 8003930:	a03fe226 	beq	r20,zero,80038bc <_fread_r+0xc0>
 8003934:	98801004 	addi	r2,r19,64
 8003938:	28800326 	beq	r5,r2,8003948 <_fread_r+0x14c>
 800393c:	b009883a 	mov	r4,r22
 8003940:	8003b640 	call	8003b64 <_free_r>
 8003944:	9c000017 	ldw	r16,0(r19)
 8003948:	98000c15 	stw	zero,48(r19)
 800394c:	00000106 	br	8003954 <_fread_r+0x158>
 8003950:	a03fda26 	beq	r20,zero,80038bc <_fread_r+0xc0>
 8003954:	9c800417 	ldw	r18,16(r19)
 8003958:	9c400517 	ldw	r17,20(r19)
 800395c:	9d400015 	stw	r21,0(r19)
 8003960:	9d400415 	stw	r21,16(r19)
 8003964:	9d000515 	stw	r20,20(r19)
 8003968:	b009883a 	mov	r4,r22
 800396c:	980b883a 	mov	r5,r19
 8003970:	8004f0c0 	call	8004f0c <__srefill_r>
 8003974:	98c00117 	ldw	r3,4(r19)
 8003978:	9c800415 	stw	r18,16(r19)
 800397c:	9c400515 	stw	r17,20(r19)
 8003980:	a8eb883a 	add	r21,r21,r3
 8003984:	9c000015 	stw	r16,0(r19)
 8003988:	a0e9c83a 	sub	r20,r20,r3
 800398c:	98000115 	stw	zero,4(r19)
 8003990:	103fef26 	beq	r2,zero,8003950 <_fread_r+0x154>
 8003994:	d9400017 	ldw	r5,0(sp)
 8003998:	bd09c83a 	sub	r4,r23,r20
 800399c:	8002fe00 	call	8002fe0 <__udivsi3>
 80039a0:	1039883a 	mov	fp,r2
 80039a4:	003fc506 	br	80038bc <_fread_r+0xc0>
 80039a8:	0039883a 	mov	fp,zero
 80039ac:	003fc306 	br	80038bc <_fread_r+0xc0>
 80039b0:	80095480 	call	8009548 <__sinit>
 80039b4:	9c400117 	ldw	r17,4(r19)
 80039b8:	883fa70e 	bge	r17,zero,8003858 <_fread_r+0x5c>
 80039bc:	0023883a 	mov	r17,zero
 80039c0:	98000115 	stw	zero,4(r19)
 80039c4:	003fa406 	br	8003858 <_fread_r+0x5c>
 80039c8:	8825883a 	mov	r18,r17
 80039cc:	003fca06 	br	80038f8 <_fread_r+0xfc>
 80039d0:	99400017 	ldw	r5,0(r19)
 80039d4:	900d883a 	mov	r6,r18
 80039d8:	8004c480 	call	8004c48 <memcpy>
 80039dc:	98c00117 	ldw	r3,4(r19)
 80039e0:	98800017 	ldw	r2,0(r19)
 80039e4:	1c87c83a 	sub	r3,r3,r18
 80039e8:	1485883a 	add	r2,r2,r18
 80039ec:	98800015 	stw	r2,0(r19)
 80039f0:	98c00115 	stw	r3,4(r19)
 80039f4:	003fb106 	br	80038bc <_fread_r+0xc0>

080039f8 <fread>:
 80039f8:	008200b4 	movhi	r2,2050
 80039fc:	10a95904 	addi	r2,r2,-23196
 8003a00:	2017883a 	mov	r11,r4
 8003a04:	11000017 	ldw	r4,0(r2)
 8003a08:	defffe04 	addi	sp,sp,-8
 8003a0c:	3013883a 	mov	r9,r6
 8003a10:	2805883a 	mov	r2,r5
 8003a14:	d9c00015 	stw	r7,0(sp)
 8003a18:	580b883a 	mov	r5,r11
 8003a1c:	100d883a 	mov	r6,r2
 8003a20:	480f883a 	mov	r7,r9
 8003a24:	dfc00115 	stw	ra,4(sp)
 8003a28:	80037fc0 	call	80037fc <_fread_r>
 8003a2c:	dfc00117 	ldw	ra,4(sp)
 8003a30:	dec00204 	addi	sp,sp,8
 8003a34:	f800283a 	ret

08003a38 <_malloc_trim_r>:
 8003a38:	defffb04 	addi	sp,sp,-20
 8003a3c:	dcc00315 	stw	r19,12(sp)
 8003a40:	04c200b4 	movhi	r19,2050
 8003a44:	9ce2ff04 	addi	r19,r19,-29700
 8003a48:	dc800215 	stw	r18,8(sp)
 8003a4c:	dc400115 	stw	r17,4(sp)
 8003a50:	dc000015 	stw	r16,0(sp)
 8003a54:	2823883a 	mov	r17,r5
 8003a58:	2025883a 	mov	r18,r4
 8003a5c:	dfc00415 	stw	ra,16(sp)
 8003a60:	800e5880 	call	800e588 <__malloc_lock>
 8003a64:	98800217 	ldw	r2,8(r19)
 8003a68:	9009883a 	mov	r4,r18
 8003a6c:	000b883a 	mov	r5,zero
 8003a70:	10c00117 	ldw	r3,4(r2)
 8003a74:	00bfff04 	movi	r2,-4
 8003a78:	18a0703a 	and	r16,r3,r2
 8003a7c:	8463c83a 	sub	r17,r16,r17
 8003a80:	8c43fbc4 	addi	r17,r17,4079
 8003a84:	8822d33a 	srli	r17,r17,12
 8003a88:	0083ffc4 	movi	r2,4095
 8003a8c:	8c7fffc4 	addi	r17,r17,-1
 8003a90:	8822933a 	slli	r17,r17,12
 8003a94:	1440060e 	bge	r2,r17,8003ab0 <_malloc_trim_r+0x78>
 8003a98:	80050ec0 	call	80050ec <_sbrk_r>
 8003a9c:	98c00217 	ldw	r3,8(r19)
 8003aa0:	9009883a 	mov	r4,r18
 8003aa4:	044bc83a 	sub	r5,zero,r17
 8003aa8:	80c7883a 	add	r3,r16,r3
 8003aac:	10c00926 	beq	r2,r3,8003ad4 <_malloc_trim_r+0x9c>
 8003ab0:	800e5a80 	call	800e5a8 <__malloc_unlock>
 8003ab4:	0005883a 	mov	r2,zero
 8003ab8:	dfc00417 	ldw	ra,16(sp)
 8003abc:	dcc00317 	ldw	r19,12(sp)
 8003ac0:	dc800217 	ldw	r18,8(sp)
 8003ac4:	dc400117 	ldw	r17,4(sp)
 8003ac8:	dc000017 	ldw	r16,0(sp)
 8003acc:	dec00504 	addi	sp,sp,20
 8003ad0:	f800283a 	ret
 8003ad4:	9009883a 	mov	r4,r18
 8003ad8:	80050ec0 	call	80050ec <_sbrk_r>
 8003adc:	844dc83a 	sub	r6,r16,r17
 8003ae0:	00ffffc4 	movi	r3,-1
 8003ae4:	9009883a 	mov	r4,r18
 8003ae8:	000b883a 	mov	r5,zero
 8003aec:	01c200b4 	movhi	r7,2050
 8003af0:	39f13604 	addi	r7,r7,-15144
 8003af4:	31800054 	ori	r6,r6,1
 8003af8:	10c00926 	beq	r2,r3,8003b20 <_malloc_trim_r+0xe8>
 8003afc:	38800017 	ldw	r2,0(r7)
 8003b00:	98c00217 	ldw	r3,8(r19)
 8003b04:	9009883a 	mov	r4,r18
 8003b08:	1445c83a 	sub	r2,r2,r17
 8003b0c:	38800015 	stw	r2,0(r7)
 8003b10:	19800115 	stw	r6,4(r3)
 8003b14:	800e5a80 	call	800e5a8 <__malloc_unlock>
 8003b18:	00800044 	movi	r2,1
 8003b1c:	003fe606 	br	8003ab8 <_malloc_trim_r+0x80>
 8003b20:	80050ec0 	call	80050ec <_sbrk_r>
 8003b24:	99800217 	ldw	r6,8(r19)
 8003b28:	100f883a 	mov	r7,r2
 8003b2c:	9009883a 	mov	r4,r18
 8003b30:	1187c83a 	sub	r3,r2,r6
 8003b34:	008003c4 	movi	r2,15
 8003b38:	19400054 	ori	r5,r3,1
 8003b3c:	10ffdc0e 	bge	r2,r3,8003ab0 <_malloc_trim_r+0x78>
 8003b40:	008200b4 	movhi	r2,2050
 8003b44:	10a95c04 	addi	r2,r2,-23184
 8003b48:	10c00017 	ldw	r3,0(r2)
 8003b4c:	008200b4 	movhi	r2,2050
 8003b50:	10b13604 	addi	r2,r2,-15144
 8003b54:	31400115 	stw	r5,4(r6)
 8003b58:	38c7c83a 	sub	r3,r7,r3
 8003b5c:	10c00015 	stw	r3,0(r2)
 8003b60:	003fd306 	br	8003ab0 <_malloc_trim_r+0x78>

08003b64 <_free_r>:
 8003b64:	defffd04 	addi	sp,sp,-12
 8003b68:	dc400115 	stw	r17,4(sp)
 8003b6c:	dc000015 	stw	r16,0(sp)
 8003b70:	dfc00215 	stw	ra,8(sp)
 8003b74:	2821883a 	mov	r16,r5
 8003b78:	2023883a 	mov	r17,r4
 8003b7c:	28005a26 	beq	r5,zero,8003ce8 <_free_r+0x184>
 8003b80:	800e5880 	call	800e588 <__malloc_lock>
 8003b84:	823ffe04 	addi	r8,r16,-8
 8003b88:	41400117 	ldw	r5,4(r8)
 8003b8c:	00bfff84 	movi	r2,-2
 8003b90:	028200b4 	movhi	r10,2050
 8003b94:	52a2ff04 	addi	r10,r10,-29700
 8003b98:	288e703a 	and	r7,r5,r2
 8003b9c:	41cd883a 	add	r6,r8,r7
 8003ba0:	30c00117 	ldw	r3,4(r6)
 8003ba4:	51000217 	ldw	r4,8(r10)
 8003ba8:	00bfff04 	movi	r2,-4
 8003bac:	1892703a 	and	r9,r3,r2
 8003bb0:	5017883a 	mov	r11,r10
 8003bb4:	31006726 	beq	r6,r4,8003d54 <_free_r+0x1f0>
 8003bb8:	2880004c 	andi	r2,r5,1
 8003bbc:	1005003a 	cmpeq	r2,r2,zero
 8003bc0:	32400115 	stw	r9,4(r6)
 8003bc4:	10001a1e 	bne	r2,zero,8003c30 <_free_r+0xcc>
 8003bc8:	000b883a 	mov	r5,zero
 8003bcc:	3247883a 	add	r3,r6,r9
 8003bd0:	18800117 	ldw	r2,4(r3)
 8003bd4:	1080004c 	andi	r2,r2,1
 8003bd8:	1000231e 	bne	r2,zero,8003c68 <_free_r+0x104>
 8003bdc:	280ac03a 	cmpne	r5,r5,zero
 8003be0:	3a4f883a 	add	r7,r7,r9
 8003be4:	2800451e 	bne	r5,zero,8003cfc <_free_r+0x198>
 8003be8:	31000217 	ldw	r4,8(r6)
 8003bec:	008200b4 	movhi	r2,2050
 8003bf0:	10a30104 	addi	r2,r2,-29692
 8003bf4:	20807b26 	beq	r4,r2,8003de4 <_free_r+0x280>
 8003bf8:	30800317 	ldw	r2,12(r6)
 8003bfc:	3a07883a 	add	r3,r7,r8
 8003c00:	19c00015 	stw	r7,0(r3)
 8003c04:	11000215 	stw	r4,8(r2)
 8003c08:	20800315 	stw	r2,12(r4)
 8003c0c:	38800054 	ori	r2,r7,1
 8003c10:	40800115 	stw	r2,4(r8)
 8003c14:	28001a26 	beq	r5,zero,8003c80 <_free_r+0x11c>
 8003c18:	8809883a 	mov	r4,r17
 8003c1c:	dfc00217 	ldw	ra,8(sp)
 8003c20:	dc400117 	ldw	r17,4(sp)
 8003c24:	dc000017 	ldw	r16,0(sp)
 8003c28:	dec00304 	addi	sp,sp,12
 8003c2c:	800e5a81 	jmpi	800e5a8 <__malloc_unlock>
 8003c30:	80bffe17 	ldw	r2,-8(r16)
 8003c34:	50c00204 	addi	r3,r10,8
 8003c38:	4091c83a 	sub	r8,r8,r2
 8003c3c:	41000217 	ldw	r4,8(r8)
 8003c40:	388f883a 	add	r7,r7,r2
 8003c44:	20c06126 	beq	r4,r3,8003dcc <_free_r+0x268>
 8003c48:	40800317 	ldw	r2,12(r8)
 8003c4c:	3247883a 	add	r3,r6,r9
 8003c50:	000b883a 	mov	r5,zero
 8003c54:	11000215 	stw	r4,8(r2)
 8003c58:	20800315 	stw	r2,12(r4)
 8003c5c:	18800117 	ldw	r2,4(r3)
 8003c60:	1080004c 	andi	r2,r2,1
 8003c64:	103fdd26 	beq	r2,zero,8003bdc <_free_r+0x78>
 8003c68:	38800054 	ori	r2,r7,1
 8003c6c:	3a07883a 	add	r3,r7,r8
 8003c70:	280ac03a 	cmpne	r5,r5,zero
 8003c74:	40800115 	stw	r2,4(r8)
 8003c78:	19c00015 	stw	r7,0(r3)
 8003c7c:	283fe61e 	bne	r5,zero,8003c18 <_free_r+0xb4>
 8003c80:	00807fc4 	movi	r2,511
 8003c84:	11c01f2e 	bgeu	r2,r7,8003d04 <_free_r+0x1a0>
 8003c88:	3806d27a 	srli	r3,r7,9
 8003c8c:	1800481e 	bne	r3,zero,8003db0 <_free_r+0x24c>
 8003c90:	3804d0fa 	srli	r2,r7,3
 8003c94:	100690fa 	slli	r3,r2,3
 8003c98:	1acd883a 	add	r6,r3,r11
 8003c9c:	31400217 	ldw	r5,8(r6)
 8003ca0:	31405926 	beq	r6,r5,8003e08 <_free_r+0x2a4>
 8003ca4:	28800117 	ldw	r2,4(r5)
 8003ca8:	00ffff04 	movi	r3,-4
 8003cac:	10c4703a 	and	r2,r2,r3
 8003cb0:	3880022e 	bgeu	r7,r2,8003cbc <_free_r+0x158>
 8003cb4:	29400217 	ldw	r5,8(r5)
 8003cb8:	317ffa1e 	bne	r6,r5,8003ca4 <_free_r+0x140>
 8003cbc:	29800317 	ldw	r6,12(r5)
 8003cc0:	41800315 	stw	r6,12(r8)
 8003cc4:	41400215 	stw	r5,8(r8)
 8003cc8:	8809883a 	mov	r4,r17
 8003ccc:	2a000315 	stw	r8,12(r5)
 8003cd0:	32000215 	stw	r8,8(r6)
 8003cd4:	dfc00217 	ldw	ra,8(sp)
 8003cd8:	dc400117 	ldw	r17,4(sp)
 8003cdc:	dc000017 	ldw	r16,0(sp)
 8003ce0:	dec00304 	addi	sp,sp,12
 8003ce4:	800e5a81 	jmpi	800e5a8 <__malloc_unlock>
 8003ce8:	dfc00217 	ldw	ra,8(sp)
 8003cec:	dc400117 	ldw	r17,4(sp)
 8003cf0:	dc000017 	ldw	r16,0(sp)
 8003cf4:	dec00304 	addi	sp,sp,12
 8003cf8:	f800283a 	ret
 8003cfc:	31000217 	ldw	r4,8(r6)
 8003d00:	003fbd06 	br	8003bf8 <_free_r+0x94>
 8003d04:	3806d0fa 	srli	r3,r7,3
 8003d08:	00800044 	movi	r2,1
 8003d0c:	51400117 	ldw	r5,4(r10)
 8003d10:	180890fa 	slli	r4,r3,3
 8003d14:	1807d0ba 	srai	r3,r3,2
 8003d18:	22c9883a 	add	r4,r4,r11
 8003d1c:	21800217 	ldw	r6,8(r4)
 8003d20:	10c4983a 	sll	r2,r2,r3
 8003d24:	41000315 	stw	r4,12(r8)
 8003d28:	41800215 	stw	r6,8(r8)
 8003d2c:	288ab03a 	or	r5,r5,r2
 8003d30:	22000215 	stw	r8,8(r4)
 8003d34:	8809883a 	mov	r4,r17
 8003d38:	51400115 	stw	r5,4(r10)
 8003d3c:	32000315 	stw	r8,12(r6)
 8003d40:	dfc00217 	ldw	ra,8(sp)
 8003d44:	dc400117 	ldw	r17,4(sp)
 8003d48:	dc000017 	ldw	r16,0(sp)
 8003d4c:	dec00304 	addi	sp,sp,12
 8003d50:	800e5a81 	jmpi	800e5a8 <__malloc_unlock>
 8003d54:	2880004c 	andi	r2,r5,1
 8003d58:	3a4d883a 	add	r6,r7,r9
 8003d5c:	1000071e 	bne	r2,zero,8003d7c <_free_r+0x218>
 8003d60:	80bffe17 	ldw	r2,-8(r16)
 8003d64:	4091c83a 	sub	r8,r8,r2
 8003d68:	41000317 	ldw	r4,12(r8)
 8003d6c:	40c00217 	ldw	r3,8(r8)
 8003d70:	308d883a 	add	r6,r6,r2
 8003d74:	20c00215 	stw	r3,8(r4)
 8003d78:	19000315 	stw	r4,12(r3)
 8003d7c:	008200b4 	movhi	r2,2050
 8003d80:	10a95b04 	addi	r2,r2,-23188
 8003d84:	11000017 	ldw	r4,0(r2)
 8003d88:	30c00054 	ori	r3,r6,1
 8003d8c:	52000215 	stw	r8,8(r10)
 8003d90:	40c00115 	stw	r3,4(r8)
 8003d94:	313fa036 	bltu	r6,r4,8003c18 <_free_r+0xb4>
 8003d98:	008200b4 	movhi	r2,2050
 8003d9c:	10b12a04 	addi	r2,r2,-15192
 8003da0:	11400017 	ldw	r5,0(r2)
 8003da4:	8809883a 	mov	r4,r17
 8003da8:	8003a380 	call	8003a38 <_malloc_trim_r>
 8003dac:	003f9a06 	br	8003c18 <_free_r+0xb4>
 8003db0:	00800104 	movi	r2,4
 8003db4:	10c0072e 	bgeu	r2,r3,8003dd4 <_free_r+0x270>
 8003db8:	00800504 	movi	r2,20
 8003dbc:	10c01936 	bltu	r2,r3,8003e24 <_free_r+0x2c0>
 8003dc0:	188016c4 	addi	r2,r3,91
 8003dc4:	100690fa 	slli	r3,r2,3
 8003dc8:	003fb306 	br	8003c98 <_free_r+0x134>
 8003dcc:	01400044 	movi	r5,1
 8003dd0:	003f7e06 	br	8003bcc <_free_r+0x68>
 8003dd4:	3804d1ba 	srli	r2,r7,6
 8003dd8:	10800e04 	addi	r2,r2,56
 8003ddc:	100690fa 	slli	r3,r2,3
 8003de0:	003fad06 	br	8003c98 <_free_r+0x134>
 8003de4:	22000315 	stw	r8,12(r4)
 8003de8:	22000215 	stw	r8,8(r4)
 8003dec:	3a05883a 	add	r2,r7,r8
 8003df0:	38c00054 	ori	r3,r7,1
 8003df4:	11c00015 	stw	r7,0(r2)
 8003df8:	41000215 	stw	r4,8(r8)
 8003dfc:	40c00115 	stw	r3,4(r8)
 8003e00:	41000315 	stw	r4,12(r8)
 8003e04:	003f8406 	br	8003c18 <_free_r+0xb4>
 8003e08:	1005d0ba 	srai	r2,r2,2
 8003e0c:	00c00044 	movi	r3,1
 8003e10:	51000117 	ldw	r4,4(r10)
 8003e14:	1886983a 	sll	r3,r3,r2
 8003e18:	20c8b03a 	or	r4,r4,r3
 8003e1c:	51000115 	stw	r4,4(r10)
 8003e20:	003fa706 	br	8003cc0 <_free_r+0x15c>
 8003e24:	00801504 	movi	r2,84
 8003e28:	10c00436 	bltu	r2,r3,8003e3c <_free_r+0x2d8>
 8003e2c:	3804d33a 	srli	r2,r7,12
 8003e30:	10801b84 	addi	r2,r2,110
 8003e34:	100690fa 	slli	r3,r2,3
 8003e38:	003f9706 	br	8003c98 <_free_r+0x134>
 8003e3c:	00805504 	movi	r2,340
 8003e40:	10c00436 	bltu	r2,r3,8003e54 <_free_r+0x2f0>
 8003e44:	3804d3fa 	srli	r2,r7,15
 8003e48:	10801dc4 	addi	r2,r2,119
 8003e4c:	100690fa 	slli	r3,r2,3
 8003e50:	003f9106 	br	8003c98 <_free_r+0x134>
 8003e54:	00815504 	movi	r2,1364
 8003e58:	10c0032e 	bgeu	r2,r3,8003e68 <_free_r+0x304>
 8003e5c:	00801f84 	movi	r2,126
 8003e60:	00c0fc04 	movi	r3,1008
 8003e64:	003f8c06 	br	8003c98 <_free_r+0x134>
 8003e68:	3804d4ba 	srli	r2,r7,18
 8003e6c:	10801f04 	addi	r2,r2,124
 8003e70:	100690fa 	slli	r3,r2,3
 8003e74:	003f8806 	br	8003c98 <_free_r+0x134>

08003e78 <_fseek_r>:
 8003e78:	deffe804 	addi	sp,sp,-96
 8003e7c:	dd801515 	stw	r22,84(sp)
 8003e80:	dcc01215 	stw	r19,72(sp)
 8003e84:	dc801115 	stw	r18,68(sp)
 8003e88:	dc000f15 	stw	r16,60(sp)
 8003e8c:	dfc01715 	stw	ra,92(sp)
 8003e90:	ddc01615 	stw	r23,88(sp)
 8003e94:	dd401415 	stw	r21,80(sp)
 8003e98:	dd001315 	stw	r20,76(sp)
 8003e9c:	dc401015 	stw	r17,64(sp)
 8003ea0:	2025883a 	mov	r18,r4
 8003ea4:	2821883a 	mov	r16,r5
 8003ea8:	302d883a 	mov	r22,r6
 8003eac:	3827883a 	mov	r19,r7
 8003eb0:	20000226 	beq	r4,zero,8003ebc <_fseek_r+0x44>
 8003eb4:	20800e17 	ldw	r2,56(r4)
 8003eb8:	10007826 	beq	r2,zero,800409c <_fseek_r+0x224>
 8003ebc:	8080030b 	ldhu	r2,12(r16)
 8003ec0:	00c04204 	movi	r3,264
 8003ec4:	1080420c 	andi	r2,r2,264
 8003ec8:	10c07926 	beq	r2,r3,80040b0 <_fseek_r+0x238>
 8003ecc:	85400a17 	ldw	r21,40(r16)
 8003ed0:	a800ea26 	beq	r21,zero,800427c <_fseek_r+0x404>
 8003ed4:	00800044 	movi	r2,1
 8003ed8:	98805f26 	beq	r19,r2,8004058 <_fseek_r+0x1e0>
 8003edc:	00800084 	movi	r2,2
 8003ee0:	98801026 	beq	r19,r2,8003f24 <_fseek_r+0xac>
 8003ee4:	98000f26 	beq	r19,zero,8003f24 <_fseek_r+0xac>
 8003ee8:	00800584 	movi	r2,22
 8003eec:	013fffc4 	movi	r4,-1
 8003ef0:	90800015 	stw	r2,0(r18)
 8003ef4:	2005883a 	mov	r2,r4
 8003ef8:	dfc01717 	ldw	ra,92(sp)
 8003efc:	ddc01617 	ldw	r23,88(sp)
 8003f00:	dd801517 	ldw	r22,84(sp)
 8003f04:	dd401417 	ldw	r21,80(sp)
 8003f08:	dd001317 	ldw	r20,76(sp)
 8003f0c:	dcc01217 	ldw	r19,72(sp)
 8003f10:	dc801117 	ldw	r18,68(sp)
 8003f14:	dc401017 	ldw	r17,64(sp)
 8003f18:	dc000f17 	ldw	r16,60(sp)
 8003f1c:	dec01804 	addi	sp,sp,96
 8003f20:	f800283a 	ret
 8003f24:	81800417 	ldw	r6,16(r16)
 8003f28:	0023883a 	mov	r17,zero
 8003f2c:	002f883a 	mov	r23,zero
 8003f30:	3000a626 	beq	r6,zero,80041cc <_fseek_r+0x354>
 8003f34:	8100030b 	ldhu	r4,12(r16)
 8003f38:	2082068c 	andi	r2,r4,2074
 8003f3c:	1000081e 	bne	r2,zero,8003f60 <_fseek_r+0xe8>
 8003f40:	2081000c 	andi	r2,r4,1024
 8003f44:	10001b1e 	bne	r2,zero,8003fb4 <_fseek_r+0x13c>
 8003f48:	00820034 	movhi	r2,2048
 8003f4c:	10945904 	addi	r2,r2,20836
 8003f50:	a8800926 	beq	r21,r2,8003f78 <_fseek_r+0x100>
 8003f54:	8080030b 	ldhu	r2,12(r16)
 8003f58:	10820014 	ori	r2,r2,2048
 8003f5c:	8080030d 	sth	r2,12(r16)
 8003f60:	9009883a 	mov	r4,r18
 8003f64:	800b883a 	mov	r5,r16
 8003f68:	80092b00 	call	80092b0 <_fflush_r>
 8003f6c:	1000a326 	beq	r2,zero,80041fc <_fseek_r+0x384>
 8003f70:	013fffc4 	movi	r4,-1
 8003f74:	003fdf06 	br	8003ef4 <_fseek_r+0x7c>
 8003f78:	8140038f 	ldh	r5,14(r16)
 8003f7c:	283ff516 	blt	r5,zero,8003f54 <_fseek_r+0xdc>
 8003f80:	9009883a 	mov	r4,r18
 8003f84:	d80d883a 	mov	r6,sp
 8003f88:	80042d80 	call	80042d8 <_fstat_r>
 8003f8c:	103ff11e 	bne	r2,zero,8003f54 <_fseek_r+0xdc>
 8003f90:	d8800117 	ldw	r2,4(sp)
 8003f94:	00e00014 	movui	r3,32768
 8003f98:	10bc000c 	andi	r2,r2,61440
 8003f9c:	10ffed1e 	bne	r2,r3,8003f54 <_fseek_r+0xdc>
 8003fa0:	80c0030b 	ldhu	r3,12(r16)
 8003fa4:	00810004 	movi	r2,1024
 8003fa8:	80801315 	stw	r2,76(r16)
 8003fac:	1886b03a 	or	r3,r3,r2
 8003fb0:	80c0030d 	sth	r3,12(r16)
 8003fb4:	9800701e 	bne	r19,zero,8004178 <_fseek_r+0x300>
 8003fb8:	b029883a 	mov	r20,r22
 8003fbc:	b804c03a 	cmpne	r2,r23,zero
 8003fc0:	10003f1e 	bne	r2,zero,80040c0 <_fseek_r+0x248>
 8003fc4:	8100030b 	ldhu	r4,12(r16)
 8003fc8:	2084000c 	andi	r2,r4,4096
 8003fcc:	1000a126 	beq	r2,zero,8004254 <_fseek_r+0x3dc>
 8003fd0:	81801417 	ldw	r6,80(r16)
 8003fd4:	80c00117 	ldw	r3,4(r16)
 8003fd8:	81400c17 	ldw	r5,48(r16)
 8003fdc:	30e3c83a 	sub	r17,r6,r3
 8003fe0:	28008026 	beq	r5,zero,80041e4 <_fseek_r+0x36c>
 8003fe4:	81c00f17 	ldw	r7,60(r16)
 8003fe8:	89e3c83a 	sub	r17,r17,r7
 8003fec:	80800e17 	ldw	r2,56(r16)
 8003ff0:	81800417 	ldw	r6,16(r16)
 8003ff4:	88c7883a 	add	r3,r17,r3
 8003ff8:	1185c83a 	sub	r2,r2,r6
 8003ffc:	11cf883a 	add	r7,r2,r7
 8004000:	1887c83a 	sub	r3,r3,r2
 8004004:	2088000c 	andi	r2,r4,8192
 8004008:	10003e1e 	bne	r2,zero,8004104 <_fseek_r+0x28c>
 800400c:	a0c03d16 	blt	r20,r3,8004104 <_fseek_r+0x28c>
 8004010:	38c5883a 	add	r2,r7,r3
 8004014:	a0803b2e 	bgeu	r20,r2,8004104 <_fseek_r+0x28c>
 8004018:	a0c5c83a 	sub	r2,r20,r3
 800401c:	3887c83a 	sub	r3,r7,r2
 8004020:	3085883a 	add	r2,r6,r2
 8004024:	80800015 	stw	r2,0(r16)
 8004028:	80c00115 	stw	r3,4(r16)
 800402c:	28000526 	beq	r5,zero,8004044 <_fseek_r+0x1cc>
 8004030:	80801004 	addi	r2,r16,64
 8004034:	28800226 	beq	r5,r2,8004040 <_fseek_r+0x1c8>
 8004038:	9009883a 	mov	r4,r18
 800403c:	8003b640 	call	8003b64 <_free_r>
 8004040:	80000c15 	stw	zero,48(r16)
 8004044:	8080030b 	ldhu	r2,12(r16)
 8004048:	0009883a 	mov	r4,zero
 800404c:	10bff7cc 	andi	r2,r2,65503
 8004050:	8080030d 	sth	r2,12(r16)
 8004054:	003fa706 	br	8003ef4 <_fseek_r+0x7c>
 8004058:	9009883a 	mov	r4,r18
 800405c:	800b883a 	mov	r5,r16
 8004060:	80092b00 	call	80092b0 <_fflush_r>
 8004064:	8100030b 	ldhu	r4,12(r16)
 8004068:	2084000c 	andi	r2,r4,4096
 800406c:	10008726 	beq	r2,zero,800428c <_fseek_r+0x414>
 8004070:	84401417 	ldw	r17,80(r16)
 8004074:	2080010c 	andi	r2,r4,4
 8004078:	1000171e 	bne	r2,zero,80040d8 <_fseek_r+0x260>
 800407c:	2080020c 	andi	r2,r4,8
 8004080:	10003b26 	beq	r2,zero,8004170 <_fseek_r+0x2f8>
 8004084:	80800017 	ldw	r2,0(r16)
 8004088:	10003926 	beq	r2,zero,8004170 <_fseek_r+0x2f8>
 800408c:	81800417 	ldw	r6,16(r16)
 8004090:	1185c83a 	sub	r2,r2,r6
 8004094:	88a3883a 	add	r17,r17,r2
 8004098:	00001606 	br	80040f4 <_fseek_r+0x27c>
 800409c:	80095480 	call	8009548 <__sinit>
 80040a0:	8080030b 	ldhu	r2,12(r16)
 80040a4:	00c04204 	movi	r3,264
 80040a8:	1080420c 	andi	r2,r2,264
 80040ac:	10ff871e 	bne	r2,r3,8003ecc <_fseek_r+0x54>
 80040b0:	9009883a 	mov	r4,r18
 80040b4:	800b883a 	mov	r5,r16
 80040b8:	80092b00 	call	80092b0 <_fflush_r>
 80040bc:	003f8306 	br	8003ecc <_fseek_r+0x54>
 80040c0:	81400c17 	ldw	r5,48(r16)
 80040c4:	28004526 	beq	r5,zero,80041dc <_fseek_r+0x364>
 80040c8:	8100030b 	ldhu	r4,12(r16)
 80040cc:	80c00117 	ldw	r3,4(r16)
 80040d0:	81c00f17 	ldw	r7,60(r16)
 80040d4:	003fc506 	br	8003fec <_fseek_r+0x174>
 80040d8:	80c00117 	ldw	r3,4(r16)
 80040dc:	80800c17 	ldw	r2,48(r16)
 80040e0:	88e3c83a 	sub	r17,r17,r3
 80040e4:	10002226 	beq	r2,zero,8004170 <_fseek_r+0x2f8>
 80040e8:	81c00f17 	ldw	r7,60(r16)
 80040ec:	81800417 	ldw	r6,16(r16)
 80040f0:	89e3c83a 	sub	r17,r17,r7
 80040f4:	b46d883a 	add	r22,r22,r17
 80040f8:	0027883a 	mov	r19,zero
 80040fc:	05c00044 	movi	r23,1
 8004100:	003f8b06 	br	8003f30 <_fseek_r+0xb8>
 8004104:	80801317 	ldw	r2,76(r16)
 8004108:	81400717 	ldw	r5,28(r16)
 800410c:	9009883a 	mov	r4,r18
 8004110:	0085c83a 	sub	r2,zero,r2
 8004114:	a0a2703a 	and	r17,r20,r2
 8004118:	880d883a 	mov	r6,r17
 800411c:	000f883a 	mov	r7,zero
 8004120:	a83ee83a 	callr	r21
 8004124:	00ffffc4 	movi	r3,-1
 8004128:	10ff8d26 	beq	r2,r3,8003f60 <_fseek_r+0xe8>
 800412c:	80800417 	ldw	r2,16(r16)
 8004130:	81400c17 	ldw	r5,48(r16)
 8004134:	80000115 	stw	zero,4(r16)
 8004138:	80800015 	stw	r2,0(r16)
 800413c:	28000526 	beq	r5,zero,8004154 <_fseek_r+0x2dc>
 8004140:	80801004 	addi	r2,r16,64
 8004144:	28800226 	beq	r5,r2,8004150 <_fseek_r+0x2d8>
 8004148:	9009883a 	mov	r4,r18
 800414c:	8003b640 	call	8003b64 <_free_r>
 8004150:	80000c15 	stw	zero,48(r16)
 8004154:	8080030b 	ldhu	r2,12(r16)
 8004158:	a463c83a 	sub	r17,r20,r17
 800415c:	10bff7cc 	andi	r2,r2,65503
 8004160:	8080030d 	sth	r2,12(r16)
 8004164:	88000c1e 	bne	r17,zero,8004198 <_fseek_r+0x320>
 8004168:	0009883a 	mov	r4,zero
 800416c:	003f6106 	br	8003ef4 <_fseek_r+0x7c>
 8004170:	81800417 	ldw	r6,16(r16)
 8004174:	003fdf06 	br	80040f4 <_fseek_r+0x27c>
 8004178:	8140038f 	ldh	r5,14(r16)
 800417c:	9009883a 	mov	r4,r18
 8004180:	d80d883a 	mov	r6,sp
 8004184:	80042d80 	call	80042d8 <_fstat_r>
 8004188:	103f751e 	bne	r2,zero,8003f60 <_fseek_r+0xe8>
 800418c:	d8800417 	ldw	r2,16(sp)
 8004190:	b0a9883a 	add	r20,r22,r2
 8004194:	003f8906 	br	8003fbc <_fseek_r+0x144>
 8004198:	9009883a 	mov	r4,r18
 800419c:	800b883a 	mov	r5,r16
 80041a0:	8004f0c0 	call	8004f0c <__srefill_r>
 80041a4:	103f6e1e 	bne	r2,zero,8003f60 <_fseek_r+0xe8>
 80041a8:	80c00117 	ldw	r3,4(r16)
 80041ac:	1c7f6c36 	bltu	r3,r17,8003f60 <_fseek_r+0xe8>
 80041b0:	80800017 	ldw	r2,0(r16)
 80041b4:	1c47c83a 	sub	r3,r3,r17
 80041b8:	0009883a 	mov	r4,zero
 80041bc:	1445883a 	add	r2,r2,r17
 80041c0:	80c00115 	stw	r3,4(r16)
 80041c4:	80800015 	stw	r2,0(r16)
 80041c8:	003f4a06 	br	8003ef4 <_fseek_r+0x7c>
 80041cc:	9009883a 	mov	r4,r18
 80041d0:	800b883a 	mov	r5,r16
 80041d4:	800434c0 	call	800434c <__smakebuf_r>
 80041d8:	003f5606 	br	8003f34 <_fseek_r+0xbc>
 80041dc:	8100030b 	ldhu	r4,12(r16)
 80041e0:	80c00117 	ldw	r3,4(r16)
 80041e4:	80800017 	ldw	r2,0(r16)
 80041e8:	81800417 	ldw	r6,16(r16)
 80041ec:	1185c83a 	sub	r2,r2,r6
 80041f0:	10cf883a 	add	r7,r2,r3
 80041f4:	8887c83a 	sub	r3,r17,r2
 80041f8:	003f8206 	br	8004004 <_fseek_r+0x18c>
 80041fc:	81400717 	ldw	r5,28(r16)
 8004200:	b00d883a 	mov	r6,r22
 8004204:	980f883a 	mov	r7,r19
 8004208:	9009883a 	mov	r4,r18
 800420c:	a83ee83a 	callr	r21
 8004210:	00ffffc4 	movi	r3,-1
 8004214:	10ff5626 	beq	r2,r3,8003f70 <_fseek_r+0xf8>
 8004218:	81400c17 	ldw	r5,48(r16)
 800421c:	28000526 	beq	r5,zero,8004234 <_fseek_r+0x3bc>
 8004220:	80801004 	addi	r2,r16,64
 8004224:	28800226 	beq	r5,r2,8004230 <_fseek_r+0x3b8>
 8004228:	9009883a 	mov	r4,r18
 800422c:	8003b640 	call	8003b64 <_free_r>
 8004230:	80000c15 	stw	zero,48(r16)
 8004234:	8080030b 	ldhu	r2,12(r16)
 8004238:	80c00417 	ldw	r3,16(r16)
 800423c:	0009883a 	mov	r4,zero
 8004240:	10bdf7cc 	andi	r2,r2,63455
 8004244:	8080030d 	sth	r2,12(r16)
 8004248:	80c00015 	stw	r3,0(r16)
 800424c:	80000115 	stw	zero,4(r16)
 8004250:	003f2806 	br	8003ef4 <_fseek_r+0x7c>
 8004254:	81400717 	ldw	r5,28(r16)
 8004258:	000d883a 	mov	r6,zero
 800425c:	9009883a 	mov	r4,r18
 8004260:	01c00044 	movi	r7,1
 8004264:	a83ee83a 	callr	r21
 8004268:	100d883a 	mov	r6,r2
 800426c:	00bfffc4 	movi	r2,-1
 8004270:	30bf3b26 	beq	r6,r2,8003f60 <_fseek_r+0xe8>
 8004274:	8100030b 	ldhu	r4,12(r16)
 8004278:	003f5606 	br	8003fd4 <_fseek_r+0x15c>
 800427c:	00800744 	movi	r2,29
 8004280:	013fffc4 	movi	r4,-1
 8004284:	90800015 	stw	r2,0(r18)
 8004288:	003f1a06 	br	8003ef4 <_fseek_r+0x7c>
 800428c:	81400717 	ldw	r5,28(r16)
 8004290:	980f883a 	mov	r7,r19
 8004294:	9009883a 	mov	r4,r18
 8004298:	000d883a 	mov	r6,zero
 800429c:	a83ee83a 	callr	r21
 80042a0:	1023883a 	mov	r17,r2
 80042a4:	00bfffc4 	movi	r2,-1
 80042a8:	88bf3126 	beq	r17,r2,8003f70 <_fseek_r+0xf8>
 80042ac:	8100030b 	ldhu	r4,12(r16)
 80042b0:	003f7006 	br	8004074 <_fseek_r+0x1fc>

080042b4 <fseek>:
 80042b4:	008200b4 	movhi	r2,2050
 80042b8:	10a95904 	addi	r2,r2,-23196
 80042bc:	2013883a 	mov	r9,r4
 80042c0:	11000017 	ldw	r4,0(r2)
 80042c4:	2805883a 	mov	r2,r5
 80042c8:	300f883a 	mov	r7,r6
 80042cc:	480b883a 	mov	r5,r9
 80042d0:	100d883a 	mov	r6,r2
 80042d4:	8003e781 	jmpi	8003e78 <_fseek_r>

080042d8 <_fstat_r>:
 80042d8:	defffd04 	addi	sp,sp,-12
 80042dc:	dc000015 	stw	r16,0(sp)
 80042e0:	040200b4 	movhi	r16,2050
 80042e4:	84312904 	addi	r16,r16,-15196
 80042e8:	dc400115 	stw	r17,4(sp)
 80042ec:	80000015 	stw	zero,0(r16)
 80042f0:	2023883a 	mov	r17,r4
 80042f4:	2809883a 	mov	r4,r5
 80042f8:	300b883a 	mov	r5,r6
 80042fc:	dfc00215 	stw	ra,8(sp)
 8004300:	800e08c0 	call	800e08c <fstat>
 8004304:	1007883a 	mov	r3,r2
 8004308:	00bfffc4 	movi	r2,-1
 800430c:	18800626 	beq	r3,r2,8004328 <_fstat_r+0x50>
 8004310:	1805883a 	mov	r2,r3
 8004314:	dfc00217 	ldw	ra,8(sp)
 8004318:	dc400117 	ldw	r17,4(sp)
 800431c:	dc000017 	ldw	r16,0(sp)
 8004320:	dec00304 	addi	sp,sp,12
 8004324:	f800283a 	ret
 8004328:	80800017 	ldw	r2,0(r16)
 800432c:	103ff826 	beq	r2,zero,8004310 <_fstat_r+0x38>
 8004330:	88800015 	stw	r2,0(r17)
 8004334:	1805883a 	mov	r2,r3
 8004338:	dfc00217 	ldw	ra,8(sp)
 800433c:	dc400117 	ldw	r17,4(sp)
 8004340:	dc000017 	ldw	r16,0(sp)
 8004344:	dec00304 	addi	sp,sp,12
 8004348:	f800283a 	ret

0800434c <__smakebuf_r>:
 800434c:	2880030b 	ldhu	r2,12(r5)
 8004350:	deffed04 	addi	sp,sp,-76
 8004354:	dc401015 	stw	r17,64(sp)
 8004358:	1080008c 	andi	r2,r2,2
 800435c:	dc000f15 	stw	r16,60(sp)
 8004360:	dfc01215 	stw	ra,72(sp)
 8004364:	dc801115 	stw	r18,68(sp)
 8004368:	2821883a 	mov	r16,r5
 800436c:	2023883a 	mov	r17,r4
 8004370:	10000b26 	beq	r2,zero,80043a0 <__smakebuf_r+0x54>
 8004374:	28c010c4 	addi	r3,r5,67
 8004378:	00800044 	movi	r2,1
 800437c:	28800515 	stw	r2,20(r5)
 8004380:	28c00415 	stw	r3,16(r5)
 8004384:	28c00015 	stw	r3,0(r5)
 8004388:	dfc01217 	ldw	ra,72(sp)
 800438c:	dc801117 	ldw	r18,68(sp)
 8004390:	dc401017 	ldw	r17,64(sp)
 8004394:	dc000f17 	ldw	r16,60(sp)
 8004398:	dec01304 	addi	sp,sp,76
 800439c:	f800283a 	ret
 80043a0:	2940038f 	ldh	r5,14(r5)
 80043a4:	28002116 	blt	r5,zero,800442c <__smakebuf_r+0xe0>
 80043a8:	d80d883a 	mov	r6,sp
 80043ac:	80042d80 	call	80042d8 <_fstat_r>
 80043b0:	10001e16 	blt	r2,zero,800442c <__smakebuf_r+0xe0>
 80043b4:	d8800117 	ldw	r2,4(sp)
 80043b8:	00e00014 	movui	r3,32768
 80043bc:	113c000c 	andi	r4,r2,61440
 80043c0:	20c03126 	beq	r4,r3,8004488 <__smakebuf_r+0x13c>
 80043c4:	8080030b 	ldhu	r2,12(r16)
 80043c8:	00c80004 	movi	r3,8192
 80043cc:	10820014 	ori	r2,r2,2048
 80043d0:	8080030d 	sth	r2,12(r16)
 80043d4:	20c01e26 	beq	r4,r3,8004450 <__smakebuf_r+0x104>
 80043d8:	04810004 	movi	r18,1024
 80043dc:	8809883a 	mov	r4,r17
 80043e0:	900b883a 	mov	r5,r18
 80043e4:	80045080 	call	8004508 <_malloc_r>
 80043e8:	1009883a 	mov	r4,r2
 80043ec:	10003126 	beq	r2,zero,80044b4 <__smakebuf_r+0x168>
 80043f0:	80c0030b 	ldhu	r3,12(r16)
 80043f4:	00820074 	movhi	r2,2049
 80043f8:	10a58b04 	addi	r2,r2,-27092
 80043fc:	88800f15 	stw	r2,60(r17)
 8004400:	18c02014 	ori	r3,r3,128
 8004404:	84800515 	stw	r18,20(r16)
 8004408:	80c0030d 	sth	r3,12(r16)
 800440c:	81000415 	stw	r4,16(r16)
 8004410:	81000015 	stw	r4,0(r16)
 8004414:	dfc01217 	ldw	ra,72(sp)
 8004418:	dc801117 	ldw	r18,68(sp)
 800441c:	dc401017 	ldw	r17,64(sp)
 8004420:	dc000f17 	ldw	r16,60(sp)
 8004424:	dec01304 	addi	sp,sp,76
 8004428:	f800283a 	ret
 800442c:	80c0030b 	ldhu	r3,12(r16)
 8004430:	1880200c 	andi	r2,r3,128
 8004434:	10000426 	beq	r2,zero,8004448 <__smakebuf_r+0xfc>
 8004438:	04801004 	movi	r18,64
 800443c:	18820014 	ori	r2,r3,2048
 8004440:	8080030d 	sth	r2,12(r16)
 8004444:	003fe506 	br	80043dc <__smakebuf_r+0x90>
 8004448:	04810004 	movi	r18,1024
 800444c:	003ffb06 	br	800443c <__smakebuf_r+0xf0>
 8004450:	8140038f 	ldh	r5,14(r16)
 8004454:	8809883a 	mov	r4,r17
 8004458:	8009fa80 	call	8009fa8 <_isatty_r>
 800445c:	103fde26 	beq	r2,zero,80043d8 <__smakebuf_r+0x8c>
 8004460:	8080030b 	ldhu	r2,12(r16)
 8004464:	80c010c4 	addi	r3,r16,67
 8004468:	04810004 	movi	r18,1024
 800446c:	10800054 	ori	r2,r2,1
 8004470:	8080030d 	sth	r2,12(r16)
 8004474:	00800044 	movi	r2,1
 8004478:	80c00415 	stw	r3,16(r16)
 800447c:	80800515 	stw	r2,20(r16)
 8004480:	80c00015 	stw	r3,0(r16)
 8004484:	003fd506 	br	80043dc <__smakebuf_r+0x90>
 8004488:	80c00a17 	ldw	r3,40(r16)
 800448c:	00820034 	movhi	r2,2048
 8004490:	10945904 	addi	r2,r2,20836
 8004494:	18bfcb1e 	bne	r3,r2,80043c4 <__smakebuf_r+0x78>
 8004498:	8080030b 	ldhu	r2,12(r16)
 800449c:	00c10004 	movi	r3,1024
 80044a0:	1825883a 	mov	r18,r3
 80044a4:	10c4b03a 	or	r2,r2,r3
 80044a8:	8080030d 	sth	r2,12(r16)
 80044ac:	80c01315 	stw	r3,76(r16)
 80044b0:	003fca06 	br	80043dc <__smakebuf_r+0x90>
 80044b4:	8100030b 	ldhu	r4,12(r16)
 80044b8:	2080800c 	andi	r2,r4,512
 80044bc:	103fb21e 	bne	r2,zero,8004388 <__smakebuf_r+0x3c>
 80044c0:	80c010c4 	addi	r3,r16,67
 80044c4:	21000094 	ori	r4,r4,2
 80044c8:	00800044 	movi	r2,1
 80044cc:	80800515 	stw	r2,20(r16)
 80044d0:	8100030d 	sth	r4,12(r16)
 80044d4:	80c00415 	stw	r3,16(r16)
 80044d8:	80c00015 	stw	r3,0(r16)
 80044dc:	003faa06 	br	8004388 <__smakebuf_r+0x3c>

080044e0 <free>:
 80044e0:	008200b4 	movhi	r2,2050
 80044e4:	10a95904 	addi	r2,r2,-23196
 80044e8:	200b883a 	mov	r5,r4
 80044ec:	11000017 	ldw	r4,0(r2)
 80044f0:	8003b641 	jmpi	8003b64 <_free_r>

080044f4 <malloc>:
 80044f4:	008200b4 	movhi	r2,2050
 80044f8:	10a95904 	addi	r2,r2,-23196
 80044fc:	200b883a 	mov	r5,r4
 8004500:	11000017 	ldw	r4,0(r2)
 8004504:	80045081 	jmpi	8004508 <_malloc_r>

08004508 <_malloc_r>:
 8004508:	defff604 	addi	sp,sp,-40
 800450c:	28c002c4 	addi	r3,r5,11
 8004510:	00800584 	movi	r2,22
 8004514:	dc800215 	stw	r18,8(sp)
 8004518:	dfc00915 	stw	ra,36(sp)
 800451c:	df000815 	stw	fp,32(sp)
 8004520:	ddc00715 	stw	r23,28(sp)
 8004524:	dd800615 	stw	r22,24(sp)
 8004528:	dd400515 	stw	r21,20(sp)
 800452c:	dd000415 	stw	r20,16(sp)
 8004530:	dcc00315 	stw	r19,12(sp)
 8004534:	dc400115 	stw	r17,4(sp)
 8004538:	dc000015 	stw	r16,0(sp)
 800453c:	2025883a 	mov	r18,r4
 8004540:	10c01236 	bltu	r2,r3,800458c <_malloc_r+0x84>
 8004544:	04400404 	movi	r17,16
 8004548:	8940142e 	bgeu	r17,r5,800459c <_malloc_r+0x94>
 800454c:	00800304 	movi	r2,12
 8004550:	0007883a 	mov	r3,zero
 8004554:	90800015 	stw	r2,0(r18)
 8004558:	1805883a 	mov	r2,r3
 800455c:	dfc00917 	ldw	ra,36(sp)
 8004560:	df000817 	ldw	fp,32(sp)
 8004564:	ddc00717 	ldw	r23,28(sp)
 8004568:	dd800617 	ldw	r22,24(sp)
 800456c:	dd400517 	ldw	r21,20(sp)
 8004570:	dd000417 	ldw	r20,16(sp)
 8004574:	dcc00317 	ldw	r19,12(sp)
 8004578:	dc800217 	ldw	r18,8(sp)
 800457c:	dc400117 	ldw	r17,4(sp)
 8004580:	dc000017 	ldw	r16,0(sp)
 8004584:	dec00a04 	addi	sp,sp,40
 8004588:	f800283a 	ret
 800458c:	00bffe04 	movi	r2,-8
 8004590:	18a2703a 	and	r17,r3,r2
 8004594:	883fed16 	blt	r17,zero,800454c <_malloc_r+0x44>
 8004598:	897fec36 	bltu	r17,r5,800454c <_malloc_r+0x44>
 800459c:	9009883a 	mov	r4,r18
 80045a0:	800e5880 	call	800e588 <__malloc_lock>
 80045a4:	00807dc4 	movi	r2,503
 80045a8:	14402b2e 	bgeu	r2,r17,8004658 <_malloc_r+0x150>
 80045ac:	8806d27a 	srli	r3,r17,9
 80045b0:	18003f1e 	bne	r3,zero,80046b0 <_malloc_r+0x1a8>
 80045b4:	880cd0fa 	srli	r6,r17,3
 80045b8:	300490fa 	slli	r2,r6,3
 80045bc:	02c200b4 	movhi	r11,2050
 80045c0:	5ae2ff04 	addi	r11,r11,-29700
 80045c4:	12cb883a 	add	r5,r2,r11
 80045c8:	2c000317 	ldw	r16,12(r5)
 80045cc:	580f883a 	mov	r7,r11
 80045d0:	2c00041e 	bne	r5,r16,80045e4 <_malloc_r+0xdc>
 80045d4:	00000a06 	br	8004600 <_malloc_r+0xf8>
 80045d8:	1800860e 	bge	r3,zero,80047f4 <_malloc_r+0x2ec>
 80045dc:	84000317 	ldw	r16,12(r16)
 80045e0:	2c000726 	beq	r5,r16,8004600 <_malloc_r+0xf8>
 80045e4:	80800117 	ldw	r2,4(r16)
 80045e8:	00ffff04 	movi	r3,-4
 80045ec:	10c8703a 	and	r4,r2,r3
 80045f0:	2447c83a 	sub	r3,r4,r17
 80045f4:	008003c4 	movi	r2,15
 80045f8:	10fff70e 	bge	r2,r3,80045d8 <_malloc_r+0xd0>
 80045fc:	31bfffc4 	addi	r6,r6,-1
 8004600:	32400044 	addi	r9,r6,1
 8004604:	028200b4 	movhi	r10,2050
 8004608:	52a30104 	addi	r10,r10,-29692
 800460c:	54000217 	ldw	r16,8(r10)
 8004610:	8280a026 	beq	r16,r10,8004894 <_malloc_r+0x38c>
 8004614:	80800117 	ldw	r2,4(r16)
 8004618:	00ffff04 	movi	r3,-4
 800461c:	10ca703a 	and	r5,r2,r3
 8004620:	2c4dc83a 	sub	r6,r5,r17
 8004624:	008003c4 	movi	r2,15
 8004628:	11808316 	blt	r2,r6,8004838 <_malloc_r+0x330>
 800462c:	52800315 	stw	r10,12(r10)
 8004630:	52800215 	stw	r10,8(r10)
 8004634:	30002916 	blt	r6,zero,80046dc <_malloc_r+0x1d4>
 8004638:	8147883a 	add	r3,r16,r5
 800463c:	18800117 	ldw	r2,4(r3)
 8004640:	9009883a 	mov	r4,r18
 8004644:	10800054 	ori	r2,r2,1
 8004648:	18800115 	stw	r2,4(r3)
 800464c:	800e5a80 	call	800e5a8 <__malloc_unlock>
 8004650:	80c00204 	addi	r3,r16,8
 8004654:	003fc006 	br	8004558 <_malloc_r+0x50>
 8004658:	02c200b4 	movhi	r11,2050
 800465c:	5ae2ff04 	addi	r11,r11,-29700
 8004660:	8ac5883a 	add	r2,r17,r11
 8004664:	14000317 	ldw	r16,12(r2)
 8004668:	580f883a 	mov	r7,r11
 800466c:	8806d0fa 	srli	r3,r17,3
 8004670:	14006c26 	beq	r2,r16,8004824 <_malloc_r+0x31c>
 8004674:	80c00117 	ldw	r3,4(r16)
 8004678:	00bfff04 	movi	r2,-4
 800467c:	81800317 	ldw	r6,12(r16)
 8004680:	1886703a 	and	r3,r3,r2
 8004684:	80c7883a 	add	r3,r16,r3
 8004688:	18800117 	ldw	r2,4(r3)
 800468c:	81400217 	ldw	r5,8(r16)
 8004690:	9009883a 	mov	r4,r18
 8004694:	10800054 	ori	r2,r2,1
 8004698:	18800115 	stw	r2,4(r3)
 800469c:	31400215 	stw	r5,8(r6)
 80046a0:	29800315 	stw	r6,12(r5)
 80046a4:	800e5a80 	call	800e5a8 <__malloc_unlock>
 80046a8:	80c00204 	addi	r3,r16,8
 80046ac:	003faa06 	br	8004558 <_malloc_r+0x50>
 80046b0:	00800104 	movi	r2,4
 80046b4:	10c0052e 	bgeu	r2,r3,80046cc <_malloc_r+0x1c4>
 80046b8:	00800504 	movi	r2,20
 80046bc:	10c07836 	bltu	r2,r3,80048a0 <_malloc_r+0x398>
 80046c0:	198016c4 	addi	r6,r3,91
 80046c4:	300490fa 	slli	r2,r6,3
 80046c8:	003fbc06 	br	80045bc <_malloc_r+0xb4>
 80046cc:	8804d1ba 	srli	r2,r17,6
 80046d0:	11800e04 	addi	r6,r2,56
 80046d4:	300490fa 	slli	r2,r6,3
 80046d8:	003fb806 	br	80045bc <_malloc_r+0xb4>
 80046dc:	00807fc4 	movi	r2,511
 80046e0:	1140bb36 	bltu	r2,r5,80049d0 <_malloc_r+0x4c8>
 80046e4:	2806d0fa 	srli	r3,r5,3
 80046e8:	573ffe04 	addi	fp,r10,-8
 80046ec:	00800044 	movi	r2,1
 80046f0:	180890fa 	slli	r4,r3,3
 80046f4:	1807d0ba 	srai	r3,r3,2
 80046f8:	e1c00117 	ldw	r7,4(fp)
 80046fc:	5909883a 	add	r4,r11,r4
 8004700:	21400217 	ldw	r5,8(r4)
 8004704:	10c4983a 	sll	r2,r2,r3
 8004708:	81000315 	stw	r4,12(r16)
 800470c:	81400215 	stw	r5,8(r16)
 8004710:	388eb03a 	or	r7,r7,r2
 8004714:	2c000315 	stw	r16,12(r5)
 8004718:	24000215 	stw	r16,8(r4)
 800471c:	e1c00115 	stw	r7,4(fp)
 8004720:	4807883a 	mov	r3,r9
 8004724:	4800cd16 	blt	r9,zero,8004a5c <_malloc_r+0x554>
 8004728:	1807d0ba 	srai	r3,r3,2
 800472c:	00800044 	movi	r2,1
 8004730:	10c8983a 	sll	r4,r2,r3
 8004734:	39004436 	bltu	r7,r4,8004848 <_malloc_r+0x340>
 8004738:	21c4703a 	and	r2,r4,r7
 800473c:	10000a1e 	bne	r2,zero,8004768 <_malloc_r+0x260>
 8004740:	2109883a 	add	r4,r4,r4
 8004744:	00bfff04 	movi	r2,-4
 8004748:	4884703a 	and	r2,r9,r2
 800474c:	3906703a 	and	r3,r7,r4
 8004750:	12400104 	addi	r9,r2,4
 8004754:	1800041e 	bne	r3,zero,8004768 <_malloc_r+0x260>
 8004758:	2109883a 	add	r4,r4,r4
 800475c:	3904703a 	and	r2,r7,r4
 8004760:	4a400104 	addi	r9,r9,4
 8004764:	103ffc26 	beq	r2,zero,8004758 <_malloc_r+0x250>
 8004768:	480490fa 	slli	r2,r9,3
 800476c:	4819883a 	mov	r12,r9
 8004770:	023fff04 	movi	r8,-4
 8004774:	589b883a 	add	r13,r11,r2
 8004778:	6807883a 	mov	r3,r13
 800477c:	014003c4 	movi	r5,15
 8004780:	1c000317 	ldw	r16,12(r3)
 8004784:	1c00041e 	bne	r3,r16,8004798 <_malloc_r+0x290>
 8004788:	0000a706 	br	8004a28 <_malloc_r+0x520>
 800478c:	3000ab0e 	bge	r6,zero,8004a3c <_malloc_r+0x534>
 8004790:	84000317 	ldw	r16,12(r16)
 8004794:	1c00a426 	beq	r3,r16,8004a28 <_malloc_r+0x520>
 8004798:	80800117 	ldw	r2,4(r16)
 800479c:	1204703a 	and	r2,r2,r8
 80047a0:	144dc83a 	sub	r6,r2,r17
 80047a4:	29bff90e 	bge	r5,r6,800478c <_malloc_r+0x284>
 80047a8:	81000317 	ldw	r4,12(r16)
 80047ac:	80c00217 	ldw	r3,8(r16)
 80047b0:	89400054 	ori	r5,r17,1
 80047b4:	8445883a 	add	r2,r16,r17
 80047b8:	20c00215 	stw	r3,8(r4)
 80047bc:	19000315 	stw	r4,12(r3)
 80047c0:	81400115 	stw	r5,4(r16)
 80047c4:	1187883a 	add	r3,r2,r6
 80047c8:	31000054 	ori	r4,r6,1
 80047cc:	50800315 	stw	r2,12(r10)
 80047d0:	50800215 	stw	r2,8(r10)
 80047d4:	19800015 	stw	r6,0(r3)
 80047d8:	11000115 	stw	r4,4(r2)
 80047dc:	12800215 	stw	r10,8(r2)
 80047e0:	12800315 	stw	r10,12(r2)
 80047e4:	9009883a 	mov	r4,r18
 80047e8:	800e5a80 	call	800e5a8 <__malloc_unlock>
 80047ec:	80c00204 	addi	r3,r16,8
 80047f0:	003f5906 	br	8004558 <_malloc_r+0x50>
 80047f4:	8109883a 	add	r4,r16,r4
 80047f8:	20800117 	ldw	r2,4(r4)
 80047fc:	80c00217 	ldw	r3,8(r16)
 8004800:	81400317 	ldw	r5,12(r16)
 8004804:	10800054 	ori	r2,r2,1
 8004808:	20800115 	stw	r2,4(r4)
 800480c:	28c00215 	stw	r3,8(r5)
 8004810:	19400315 	stw	r5,12(r3)
 8004814:	9009883a 	mov	r4,r18
 8004818:	800e5a80 	call	800e5a8 <__malloc_unlock>
 800481c:	80c00204 	addi	r3,r16,8
 8004820:	003f4d06 	br	8004558 <_malloc_r+0x50>
 8004824:	80800204 	addi	r2,r16,8
 8004828:	14000317 	ldw	r16,12(r2)
 800482c:	143f911e 	bne	r2,r16,8004674 <_malloc_r+0x16c>
 8004830:	1a400084 	addi	r9,r3,2
 8004834:	003f7306 	br	8004604 <_malloc_r+0xfc>
 8004838:	88c00054 	ori	r3,r17,1
 800483c:	8445883a 	add	r2,r16,r17
 8004840:	80c00115 	stw	r3,4(r16)
 8004844:	003fdf06 	br	80047c4 <_malloc_r+0x2bc>
 8004848:	e4000217 	ldw	r16,8(fp)
 800484c:	00bfff04 	movi	r2,-4
 8004850:	80c00117 	ldw	r3,4(r16)
 8004854:	802d883a 	mov	r22,r16
 8004858:	18aa703a 	and	r21,r3,r2
 800485c:	ac401636 	bltu	r21,r17,80048b8 <_malloc_r+0x3b0>
 8004860:	ac49c83a 	sub	r4,r21,r17
 8004864:	008003c4 	movi	r2,15
 8004868:	1100130e 	bge	r2,r4,80048b8 <_malloc_r+0x3b0>
 800486c:	88800054 	ori	r2,r17,1
 8004870:	8447883a 	add	r3,r16,r17
 8004874:	80800115 	stw	r2,4(r16)
 8004878:	20800054 	ori	r2,r4,1
 800487c:	18800115 	stw	r2,4(r3)
 8004880:	e0c00215 	stw	r3,8(fp)
 8004884:	9009883a 	mov	r4,r18
 8004888:	800e5a80 	call	800e5a8 <__malloc_unlock>
 800488c:	80c00204 	addi	r3,r16,8
 8004890:	003f3106 	br	8004558 <_malloc_r+0x50>
 8004894:	39c00117 	ldw	r7,4(r7)
 8004898:	573ffe04 	addi	fp,r10,-8
 800489c:	003fa006 	br	8004720 <_malloc_r+0x218>
 80048a0:	00801504 	movi	r2,84
 80048a4:	10c06736 	bltu	r2,r3,8004a44 <_malloc_r+0x53c>
 80048a8:	8804d33a 	srli	r2,r17,12
 80048ac:	11801b84 	addi	r6,r2,110
 80048b0:	300490fa 	slli	r2,r6,3
 80048b4:	003f4106 	br	80045bc <_malloc_r+0xb4>
 80048b8:	d0a7d517 	ldw	r2,-24748(gp)
 80048bc:	d0e00717 	ldw	r3,-32740(gp)
 80048c0:	053fffc4 	movi	r20,-1
 80048c4:	10800404 	addi	r2,r2,16
 80048c8:	88a7883a 	add	r19,r17,r2
 80048cc:	1d000326 	beq	r3,r20,80048dc <_malloc_r+0x3d4>
 80048d0:	98c3ffc4 	addi	r3,r19,4095
 80048d4:	00bc0004 	movi	r2,-4096
 80048d8:	18a6703a 	and	r19,r3,r2
 80048dc:	9009883a 	mov	r4,r18
 80048e0:	980b883a 	mov	r5,r19
 80048e4:	80050ec0 	call	80050ec <_sbrk_r>
 80048e8:	1009883a 	mov	r4,r2
 80048ec:	15000426 	beq	r2,r20,8004900 <_malloc_r+0x3f8>
 80048f0:	854b883a 	add	r5,r16,r21
 80048f4:	1029883a 	mov	r20,r2
 80048f8:	11405a2e 	bgeu	r2,r5,8004a64 <_malloc_r+0x55c>
 80048fc:	87000c26 	beq	r16,fp,8004930 <_malloc_r+0x428>
 8004900:	e4000217 	ldw	r16,8(fp)
 8004904:	80c00117 	ldw	r3,4(r16)
 8004908:	00bfff04 	movi	r2,-4
 800490c:	1884703a 	and	r2,r3,r2
 8004910:	14400336 	bltu	r2,r17,8004920 <_malloc_r+0x418>
 8004914:	1449c83a 	sub	r4,r2,r17
 8004918:	008003c4 	movi	r2,15
 800491c:	113fd316 	blt	r2,r4,800486c <_malloc_r+0x364>
 8004920:	9009883a 	mov	r4,r18
 8004924:	800e5a80 	call	800e5a8 <__malloc_unlock>
 8004928:	0007883a 	mov	r3,zero
 800492c:	003f0a06 	br	8004558 <_malloc_r+0x50>
 8004930:	05c200b4 	movhi	r23,2050
 8004934:	bdf13604 	addi	r23,r23,-15144
 8004938:	b8800017 	ldw	r2,0(r23)
 800493c:	988d883a 	add	r6,r19,r2
 8004940:	b9800015 	stw	r6,0(r23)
 8004944:	d0e00717 	ldw	r3,-32740(gp)
 8004948:	00bfffc4 	movi	r2,-1
 800494c:	18808e26 	beq	r3,r2,8004b88 <_malloc_r+0x680>
 8004950:	2145c83a 	sub	r2,r4,r5
 8004954:	3085883a 	add	r2,r6,r2
 8004958:	b8800015 	stw	r2,0(r23)
 800495c:	20c001cc 	andi	r3,r4,7
 8004960:	18005f1e 	bne	r3,zero,8004ae0 <_malloc_r+0x5d8>
 8004964:	000b883a 	mov	r5,zero
 8004968:	a4c5883a 	add	r2,r20,r19
 800496c:	1083ffcc 	andi	r2,r2,4095
 8004970:	00c40004 	movi	r3,4096
 8004974:	1887c83a 	sub	r3,r3,r2
 8004978:	28e7883a 	add	r19,r5,r3
 800497c:	9009883a 	mov	r4,r18
 8004980:	980b883a 	mov	r5,r19
 8004984:	80050ec0 	call	80050ec <_sbrk_r>
 8004988:	1007883a 	mov	r3,r2
 800498c:	00bfffc4 	movi	r2,-1
 8004990:	18807a26 	beq	r3,r2,8004b7c <_malloc_r+0x674>
 8004994:	1d05c83a 	sub	r2,r3,r20
 8004998:	9885883a 	add	r2,r19,r2
 800499c:	10c00054 	ori	r3,r2,1
 80049a0:	b8800017 	ldw	r2,0(r23)
 80049a4:	a021883a 	mov	r16,r20
 80049a8:	a0c00115 	stw	r3,4(r20)
 80049ac:	9885883a 	add	r2,r19,r2
 80049b0:	b8800015 	stw	r2,0(r23)
 80049b4:	e5000215 	stw	r20,8(fp)
 80049b8:	b7003626 	beq	r22,fp,8004a94 <_malloc_r+0x58c>
 80049bc:	018003c4 	movi	r6,15
 80049c0:	35404b36 	bltu	r6,r21,8004af0 <_malloc_r+0x5e8>
 80049c4:	00800044 	movi	r2,1
 80049c8:	a0800115 	stw	r2,4(r20)
 80049cc:	003fcd06 	br	8004904 <_malloc_r+0x3fc>
 80049d0:	2808d27a 	srli	r4,r5,9
 80049d4:	2000371e 	bne	r4,zero,8004ab4 <_malloc_r+0x5ac>
 80049d8:	2808d0fa 	srli	r4,r5,3
 80049dc:	200690fa 	slli	r3,r4,3
 80049e0:	1ad1883a 	add	r8,r3,r11
 80049e4:	41800217 	ldw	r6,8(r8)
 80049e8:	41805b26 	beq	r8,r6,8004b58 <_malloc_r+0x650>
 80049ec:	30800117 	ldw	r2,4(r6)
 80049f0:	00ffff04 	movi	r3,-4
 80049f4:	10c4703a 	and	r2,r2,r3
 80049f8:	2880022e 	bgeu	r5,r2,8004a04 <_malloc_r+0x4fc>
 80049fc:	31800217 	ldw	r6,8(r6)
 8004a00:	41bffa1e 	bne	r8,r6,80049ec <_malloc_r+0x4e4>
 8004a04:	32000317 	ldw	r8,12(r6)
 8004a08:	39c00117 	ldw	r7,4(r7)
 8004a0c:	82000315 	stw	r8,12(r16)
 8004a10:	81800215 	stw	r6,8(r16)
 8004a14:	070200b4 	movhi	fp,2050
 8004a18:	e722ff04 	addi	fp,fp,-29700
 8004a1c:	34000315 	stw	r16,12(r6)
 8004a20:	44000215 	stw	r16,8(r8)
 8004a24:	003f3e06 	br	8004720 <_malloc_r+0x218>
 8004a28:	63000044 	addi	r12,r12,1
 8004a2c:	608000cc 	andi	r2,r12,3
 8004a30:	10005d26 	beq	r2,zero,8004ba8 <_malloc_r+0x6a0>
 8004a34:	18c00204 	addi	r3,r3,8
 8004a38:	003f5106 	br	8004780 <_malloc_r+0x278>
 8004a3c:	8089883a 	add	r4,r16,r2
 8004a40:	003f6d06 	br	80047f8 <_malloc_r+0x2f0>
 8004a44:	00805504 	movi	r2,340
 8004a48:	10c02036 	bltu	r2,r3,8004acc <_malloc_r+0x5c4>
 8004a4c:	8804d3fa 	srli	r2,r17,15
 8004a50:	11801dc4 	addi	r6,r2,119
 8004a54:	300490fa 	slli	r2,r6,3
 8004a58:	003ed806 	br	80045bc <_malloc_r+0xb4>
 8004a5c:	48c000c4 	addi	r3,r9,3
 8004a60:	003f3106 	br	8004728 <_malloc_r+0x220>
 8004a64:	05c200b4 	movhi	r23,2050
 8004a68:	bdf13604 	addi	r23,r23,-15144
 8004a6c:	b8800017 	ldw	r2,0(r23)
 8004a70:	988d883a 	add	r6,r19,r2
 8004a74:	b9800015 	stw	r6,0(r23)
 8004a78:	293fb21e 	bne	r5,r4,8004944 <_malloc_r+0x43c>
 8004a7c:	2083ffcc 	andi	r2,r4,4095
 8004a80:	103fb01e 	bne	r2,zero,8004944 <_malloc_r+0x43c>
 8004a84:	e4000217 	ldw	r16,8(fp)
 8004a88:	9d45883a 	add	r2,r19,r21
 8004a8c:	10800054 	ori	r2,r2,1
 8004a90:	80800115 	stw	r2,4(r16)
 8004a94:	b8c00017 	ldw	r3,0(r23)
 8004a98:	d0a7d617 	ldw	r2,-24744(gp)
 8004a9c:	10c0012e 	bgeu	r2,r3,8004aa4 <_malloc_r+0x59c>
 8004aa0:	d0e7d615 	stw	r3,-24744(gp)
 8004aa4:	d0a7d717 	ldw	r2,-24740(gp)
 8004aa8:	10ff962e 	bgeu	r2,r3,8004904 <_malloc_r+0x3fc>
 8004aac:	d0e7d715 	stw	r3,-24740(gp)
 8004ab0:	003f9406 	br	8004904 <_malloc_r+0x3fc>
 8004ab4:	00800104 	movi	r2,4
 8004ab8:	11001e36 	bltu	r2,r4,8004b34 <_malloc_r+0x62c>
 8004abc:	2804d1ba 	srli	r2,r5,6
 8004ac0:	11000e04 	addi	r4,r2,56
 8004ac4:	200690fa 	slli	r3,r4,3
 8004ac8:	003fc506 	br	80049e0 <_malloc_r+0x4d8>
 8004acc:	00815504 	movi	r2,1364
 8004ad0:	10c01d2e 	bgeu	r2,r3,8004b48 <_malloc_r+0x640>
 8004ad4:	01801f84 	movi	r6,126
 8004ad8:	0080fc04 	movi	r2,1008
 8004adc:	003eb706 	br	80045bc <_malloc_r+0xb4>
 8004ae0:	00800204 	movi	r2,8
 8004ae4:	10cbc83a 	sub	r5,r2,r3
 8004ae8:	2169883a 	add	r20,r4,r5
 8004aec:	003f9e06 	br	8004968 <_malloc_r+0x460>
 8004af0:	00bffe04 	movi	r2,-8
 8004af4:	a93ffd04 	addi	r4,r21,-12
 8004af8:	2088703a 	and	r4,r4,r2
 8004afc:	b10b883a 	add	r5,r22,r4
 8004b00:	00c00144 	movi	r3,5
 8004b04:	28c00215 	stw	r3,8(r5)
 8004b08:	28c00115 	stw	r3,4(r5)
 8004b0c:	b0800117 	ldw	r2,4(r22)
 8004b10:	1080004c 	andi	r2,r2,1
 8004b14:	2084b03a 	or	r2,r4,r2
 8004b18:	b0800115 	stw	r2,4(r22)
 8004b1c:	313fdd2e 	bgeu	r6,r4,8004a94 <_malloc_r+0x58c>
 8004b20:	b1400204 	addi	r5,r22,8
 8004b24:	9009883a 	mov	r4,r18
 8004b28:	8003b640 	call	8003b64 <_free_r>
 8004b2c:	e4000217 	ldw	r16,8(fp)
 8004b30:	003fd806 	br	8004a94 <_malloc_r+0x58c>
 8004b34:	00800504 	movi	r2,20
 8004b38:	11001536 	bltu	r2,r4,8004b90 <_malloc_r+0x688>
 8004b3c:	210016c4 	addi	r4,r4,91
 8004b40:	200690fa 	slli	r3,r4,3
 8004b44:	003fa606 	br	80049e0 <_malloc_r+0x4d8>
 8004b48:	8804d4ba 	srli	r2,r17,18
 8004b4c:	11801f04 	addi	r6,r2,124
 8004b50:	300490fa 	slli	r2,r6,3
 8004b54:	003e9906 	br	80045bc <_malloc_r+0xb4>
 8004b58:	2009d0ba 	srai	r4,r4,2
 8004b5c:	014200b4 	movhi	r5,2050
 8004b60:	2962ff04 	addi	r5,r5,-29700
 8004b64:	00c00044 	movi	r3,1
 8004b68:	28800117 	ldw	r2,4(r5)
 8004b6c:	1906983a 	sll	r3,r3,r4
 8004b70:	10c4b03a 	or	r2,r2,r3
 8004b74:	28800115 	stw	r2,4(r5)
 8004b78:	003fa306 	br	8004a08 <_malloc_r+0x500>
 8004b7c:	0027883a 	mov	r19,zero
 8004b80:	00c00044 	movi	r3,1
 8004b84:	003f8606 	br	80049a0 <_malloc_r+0x498>
 8004b88:	d1200715 	stw	r4,-32740(gp)
 8004b8c:	003f7306 	br	800495c <_malloc_r+0x454>
 8004b90:	00801504 	movi	r2,84
 8004b94:	11001936 	bltu	r2,r4,8004bfc <_malloc_r+0x6f4>
 8004b98:	2804d33a 	srli	r2,r5,12
 8004b9c:	11001b84 	addi	r4,r2,110
 8004ba0:	200690fa 	slli	r3,r4,3
 8004ba4:	003f8e06 	br	80049e0 <_malloc_r+0x4d8>
 8004ba8:	480b883a 	mov	r5,r9
 8004bac:	6807883a 	mov	r3,r13
 8004bb0:	288000cc 	andi	r2,r5,3
 8004bb4:	18fffe04 	addi	r3,r3,-8
 8004bb8:	297fffc4 	addi	r5,r5,-1
 8004bbc:	10001526 	beq	r2,zero,8004c14 <_malloc_r+0x70c>
 8004bc0:	18800217 	ldw	r2,8(r3)
 8004bc4:	10fffa26 	beq	r2,r3,8004bb0 <_malloc_r+0x6a8>
 8004bc8:	2109883a 	add	r4,r4,r4
 8004bcc:	393f1e36 	bltu	r7,r4,8004848 <_malloc_r+0x340>
 8004bd0:	203f1d26 	beq	r4,zero,8004848 <_malloc_r+0x340>
 8004bd4:	21c4703a 	and	r2,r4,r7
 8004bd8:	10000226 	beq	r2,zero,8004be4 <_malloc_r+0x6dc>
 8004bdc:	6013883a 	mov	r9,r12
 8004be0:	003ee106 	br	8004768 <_malloc_r+0x260>
 8004be4:	2109883a 	add	r4,r4,r4
 8004be8:	3904703a 	and	r2,r7,r4
 8004bec:	63000104 	addi	r12,r12,4
 8004bf0:	103ffc26 	beq	r2,zero,8004be4 <_malloc_r+0x6dc>
 8004bf4:	6013883a 	mov	r9,r12
 8004bf8:	003edb06 	br	8004768 <_malloc_r+0x260>
 8004bfc:	00805504 	movi	r2,340
 8004c00:	11000836 	bltu	r2,r4,8004c24 <_malloc_r+0x71c>
 8004c04:	2804d3fa 	srli	r2,r5,15
 8004c08:	11001dc4 	addi	r4,r2,119
 8004c0c:	200690fa 	slli	r3,r4,3
 8004c10:	003f7306 	br	80049e0 <_malloc_r+0x4d8>
 8004c14:	0104303a 	nor	r2,zero,r4
 8004c18:	388e703a 	and	r7,r7,r2
 8004c1c:	e1c00115 	stw	r7,4(fp)
 8004c20:	003fe906 	br	8004bc8 <_malloc_r+0x6c0>
 8004c24:	00815504 	movi	r2,1364
 8004c28:	1100032e 	bgeu	r2,r4,8004c38 <_malloc_r+0x730>
 8004c2c:	01001f84 	movi	r4,126
 8004c30:	00c0fc04 	movi	r3,1008
 8004c34:	003f6a06 	br	80049e0 <_malloc_r+0x4d8>
 8004c38:	2804d4ba 	srli	r2,r5,18
 8004c3c:	11001f04 	addi	r4,r2,124
 8004c40:	200690fa 	slli	r3,r4,3
 8004c44:	003f6606 	br	80049e0 <_malloc_r+0x4d8>

08004c48 <memcpy>:
 8004c48:	01c003c4 	movi	r7,15
 8004c4c:	2007883a 	mov	r3,r4
 8004c50:	3980032e 	bgeu	r7,r6,8004c60 <memcpy+0x18>
 8004c54:	2904b03a 	or	r2,r5,r4
 8004c58:	108000cc 	andi	r2,r2,3
 8004c5c:	10000926 	beq	r2,zero,8004c84 <memcpy+0x3c>
 8004c60:	30000626 	beq	r6,zero,8004c7c <memcpy+0x34>
 8004c64:	30cd883a 	add	r6,r6,r3
 8004c68:	28800003 	ldbu	r2,0(r5)
 8004c6c:	29400044 	addi	r5,r5,1
 8004c70:	18800005 	stb	r2,0(r3)
 8004c74:	18c00044 	addi	r3,r3,1
 8004c78:	30fffb1e 	bne	r6,r3,8004c68 <memcpy+0x20>
 8004c7c:	2005883a 	mov	r2,r4
 8004c80:	f800283a 	ret
 8004c84:	3811883a 	mov	r8,r7
 8004c88:	200f883a 	mov	r7,r4
 8004c8c:	28c00017 	ldw	r3,0(r5)
 8004c90:	31bffc04 	addi	r6,r6,-16
 8004c94:	38c00015 	stw	r3,0(r7)
 8004c98:	28800117 	ldw	r2,4(r5)
 8004c9c:	38800115 	stw	r2,4(r7)
 8004ca0:	28c00217 	ldw	r3,8(r5)
 8004ca4:	38c00215 	stw	r3,8(r7)
 8004ca8:	28800317 	ldw	r2,12(r5)
 8004cac:	29400404 	addi	r5,r5,16
 8004cb0:	38800315 	stw	r2,12(r7)
 8004cb4:	39c00404 	addi	r7,r7,16
 8004cb8:	41bff436 	bltu	r8,r6,8004c8c <memcpy+0x44>
 8004cbc:	008000c4 	movi	r2,3
 8004cc0:	1180072e 	bgeu	r2,r6,8004ce0 <memcpy+0x98>
 8004cc4:	1007883a 	mov	r3,r2
 8004cc8:	28800017 	ldw	r2,0(r5)
 8004ccc:	31bfff04 	addi	r6,r6,-4
 8004cd0:	29400104 	addi	r5,r5,4
 8004cd4:	38800015 	stw	r2,0(r7)
 8004cd8:	39c00104 	addi	r7,r7,4
 8004cdc:	19bffa36 	bltu	r3,r6,8004cc8 <memcpy+0x80>
 8004ce0:	3807883a 	mov	r3,r7
 8004ce4:	003fde06 	br	8004c60 <memcpy+0x18>

08004ce8 <_open_r>:
 8004ce8:	defffd04 	addi	sp,sp,-12
 8004cec:	dc000015 	stw	r16,0(sp)
 8004cf0:	040200b4 	movhi	r16,2050
 8004cf4:	84312904 	addi	r16,r16,-15196
 8004cf8:	dc400115 	stw	r17,4(sp)
 8004cfc:	80000015 	stw	zero,0(r16)
 8004d00:	2023883a 	mov	r17,r4
 8004d04:	2809883a 	mov	r4,r5
 8004d08:	300b883a 	mov	r5,r6
 8004d0c:	380d883a 	mov	r6,r7
 8004d10:	dfc00215 	stw	ra,8(sp)
 8004d14:	800e6a40 	call	800e6a4 <open>
 8004d18:	1007883a 	mov	r3,r2
 8004d1c:	00bfffc4 	movi	r2,-1
 8004d20:	18800626 	beq	r3,r2,8004d3c <_open_r+0x54>
 8004d24:	1805883a 	mov	r2,r3
 8004d28:	dfc00217 	ldw	ra,8(sp)
 8004d2c:	dc400117 	ldw	r17,4(sp)
 8004d30:	dc000017 	ldw	r16,0(sp)
 8004d34:	dec00304 	addi	sp,sp,12
 8004d38:	f800283a 	ret
 8004d3c:	80800017 	ldw	r2,0(r16)
 8004d40:	103ff826 	beq	r2,zero,8004d24 <_open_r+0x3c>
 8004d44:	88800015 	stw	r2,0(r17)
 8004d48:	1805883a 	mov	r2,r3
 8004d4c:	dfc00217 	ldw	ra,8(sp)
 8004d50:	dc400117 	ldw	r17,4(sp)
 8004d54:	dc000017 	ldw	r16,0(sp)
 8004d58:	dec00304 	addi	sp,sp,12
 8004d5c:	f800283a 	ret

08004d60 <_perror_r>:
 8004d60:	defffe04 	addi	sp,sp,-8
 8004d64:	dc000015 	stw	r16,0(sp)
 8004d68:	dfc00115 	stw	ra,4(sp)
 8004d6c:	2021883a 	mov	r16,r4
 8004d70:	28000326 	beq	r5,zero,8004d80 <_perror_r+0x20>
 8004d74:	28800007 	ldb	r2,0(r5)
 8004d78:	2809883a 	mov	r4,r5
 8004d7c:	10000c1e 	bne	r2,zero,8004db0 <_perror_r+0x50>
 8004d80:	81000017 	ldw	r4,0(r16)
 8004d84:	80052a80 	call	80052a8 <strerror>
 8004d88:	1009883a 	mov	r4,r2
 8004d8c:	10000226 	beq	r2,zero,8004d98 <_perror_r+0x38>
 8004d90:	81400317 	ldw	r5,12(r16)
 8004d94:	80099700 	call	8009970 <fputs>
 8004d98:	81400317 	ldw	r5,12(r16)
 8004d9c:	01000284 	movi	r4,10
 8004da0:	dfc00117 	ldw	ra,4(sp)
 8004da4:	dc000017 	ldw	r16,0(sp)
 8004da8:	dec00204 	addi	sp,sp,8
 8004dac:	80098401 	jmpi	8009840 <fputc>
 8004db0:	81400317 	ldw	r5,12(r16)
 8004db4:	80099700 	call	8009970 <fputs>
 8004db8:	81400317 	ldw	r5,12(r16)
 8004dbc:	01020074 	movhi	r4,2049
 8004dc0:	211e5904 	addi	r4,r4,31076
 8004dc4:	80099700 	call	8009970 <fputs>
 8004dc8:	003fed06 	br	8004d80 <_perror_r+0x20>

08004dcc <perror>:
 8004dcc:	008200b4 	movhi	r2,2050
 8004dd0:	10a95904 	addi	r2,r2,-23196
 8004dd4:	200b883a 	mov	r5,r4
 8004dd8:	11000017 	ldw	r4,0(r2)
 8004ddc:	8004d601 	jmpi	8004d60 <_perror_r>

08004de0 <printf>:
 8004de0:	defffb04 	addi	sp,sp,-20
 8004de4:	dfc00115 	stw	ra,4(sp)
 8004de8:	d9400215 	stw	r5,8(sp)
 8004dec:	d9800315 	stw	r6,12(sp)
 8004df0:	d9c00415 	stw	r7,16(sp)
 8004df4:	008200b4 	movhi	r2,2050
 8004df8:	10a95904 	addi	r2,r2,-23196
 8004dfc:	10c00017 	ldw	r3,0(r2)
 8004e00:	200b883a 	mov	r5,r4
 8004e04:	d8800204 	addi	r2,sp,8
 8004e08:	19000217 	ldw	r4,8(r3)
 8004e0c:	100d883a 	mov	r6,r2
 8004e10:	d8800015 	stw	r2,0(sp)
 8004e14:	800789c0 	call	800789c <__vfprintf_internal>
 8004e18:	dfc00117 	ldw	ra,4(sp)
 8004e1c:	dec00504 	addi	sp,sp,20
 8004e20:	f800283a 	ret

08004e24 <_printf_r>:
 8004e24:	defffc04 	addi	sp,sp,-16
 8004e28:	dfc00115 	stw	ra,4(sp)
 8004e2c:	d9800215 	stw	r6,8(sp)
 8004e30:	d9c00315 	stw	r7,12(sp)
 8004e34:	280d883a 	mov	r6,r5
 8004e38:	21400217 	ldw	r5,8(r4)
 8004e3c:	d8c00204 	addi	r3,sp,8
 8004e40:	180f883a 	mov	r7,r3
 8004e44:	d8c00015 	stw	r3,0(sp)
 8004e48:	80059f00 	call	80059f0 <___vfprintf_internal_r>
 8004e4c:	dfc00117 	ldw	ra,4(sp)
 8004e50:	dec00404 	addi	sp,sp,16
 8004e54:	f800283a 	ret

08004e58 <_puts_r>:
 8004e58:	defff604 	addi	sp,sp,-40
 8004e5c:	dc400715 	stw	r17,28(sp)
 8004e60:	2023883a 	mov	r17,r4
 8004e64:	2809883a 	mov	r4,r5
 8004e68:	dfc00915 	stw	ra,36(sp)
 8004e6c:	dcc00815 	stw	r19,32(sp)
 8004e70:	2827883a 	mov	r19,r5
 8004e74:	800591c0 	call	800591c <strlen>
 8004e78:	89400217 	ldw	r5,8(r17)
 8004e7c:	00c20074 	movhi	r3,2049
 8004e80:	18de5a04 	addi	r3,r3,31080
 8004e84:	01c00044 	movi	r7,1
 8004e88:	12000044 	addi	r8,r2,1
 8004e8c:	d8c00515 	stw	r3,20(sp)
 8004e90:	d9c00615 	stw	r7,24(sp)
 8004e94:	d8c00304 	addi	r3,sp,12
 8004e98:	01c00084 	movi	r7,2
 8004e9c:	8809883a 	mov	r4,r17
 8004ea0:	d80d883a 	mov	r6,sp
 8004ea4:	d8c00015 	stw	r3,0(sp)
 8004ea8:	dcc00315 	stw	r19,12(sp)
 8004eac:	da000215 	stw	r8,8(sp)
 8004eb0:	d9c00115 	stw	r7,4(sp)
 8004eb4:	d8800415 	stw	r2,16(sp)
 8004eb8:	800998c0 	call	800998c <__sfvwrite_r>
 8004ebc:	00ffffc4 	movi	r3,-1
 8004ec0:	10000626 	beq	r2,zero,8004edc <_puts_r+0x84>
 8004ec4:	1805883a 	mov	r2,r3
 8004ec8:	dfc00917 	ldw	ra,36(sp)
 8004ecc:	dcc00817 	ldw	r19,32(sp)
 8004ed0:	dc400717 	ldw	r17,28(sp)
 8004ed4:	dec00a04 	addi	sp,sp,40
 8004ed8:	f800283a 	ret
 8004edc:	00c00284 	movi	r3,10
 8004ee0:	1805883a 	mov	r2,r3
 8004ee4:	dfc00917 	ldw	ra,36(sp)
 8004ee8:	dcc00817 	ldw	r19,32(sp)
 8004eec:	dc400717 	ldw	r17,28(sp)
 8004ef0:	dec00a04 	addi	sp,sp,40
 8004ef4:	f800283a 	ret

08004ef8 <puts>:
 8004ef8:	008200b4 	movhi	r2,2050
 8004efc:	10a95904 	addi	r2,r2,-23196
 8004f00:	200b883a 	mov	r5,r4
 8004f04:	11000017 	ldw	r4,0(r2)
 8004f08:	8004e581 	jmpi	8004e58 <_puts_r>

08004f0c <__srefill_r>:
 8004f0c:	defffd04 	addi	sp,sp,-12
 8004f10:	dc400115 	stw	r17,4(sp)
 8004f14:	dc000015 	stw	r16,0(sp)
 8004f18:	dfc00215 	stw	ra,8(sp)
 8004f1c:	2023883a 	mov	r17,r4
 8004f20:	2821883a 	mov	r16,r5
 8004f24:	20000226 	beq	r4,zero,8004f30 <__srefill_r+0x24>
 8004f28:	20800e17 	ldw	r2,56(r4)
 8004f2c:	10004126 	beq	r2,zero,8005034 <__srefill_r+0x128>
 8004f30:	80c0030b 	ldhu	r3,12(r16)
 8004f34:	80000115 	stw	zero,4(r16)
 8004f38:	1880080c 	andi	r2,r3,32
 8004f3c:	1000361e 	bne	r2,zero,8005018 <__srefill_r+0x10c>
 8004f40:	1880010c 	andi	r2,r3,4
 8004f44:	1000211e 	bne	r2,zero,8004fcc <__srefill_r+0xc0>
 8004f48:	1880040c 	andi	r2,r3,16
 8004f4c:	10005026 	beq	r2,zero,8005090 <__srefill_r+0x184>
 8004f50:	1880020c 	andi	r2,r3,8
 8004f54:	1000541e 	bne	r2,zero,80050a8 <__srefill_r+0x19c>
 8004f58:	8080030b 	ldhu	r2,12(r16)
 8004f5c:	10800114 	ori	r2,r2,4
 8004f60:	8080030d 	sth	r2,12(r16)
 8004f64:	80800417 	ldw	r2,16(r16)
 8004f68:	10004526 	beq	r2,zero,8005080 <__srefill_r+0x174>
 8004f6c:	8080030b 	ldhu	r2,12(r16)
 8004f70:	108000cc 	andi	r2,r2,3
 8004f74:	1000361e 	bne	r2,zero,8005050 <__srefill_r+0x144>
 8004f78:	81800417 	ldw	r6,16(r16)
 8004f7c:	80c00817 	ldw	r3,32(r16)
 8004f80:	81400717 	ldw	r5,28(r16)
 8004f84:	81c00517 	ldw	r7,20(r16)
 8004f88:	8809883a 	mov	r4,r17
 8004f8c:	81800015 	stw	r6,0(r16)
 8004f90:	183ee83a 	callr	r3
 8004f94:	80c0030b 	ldhu	r3,12(r16)
 8004f98:	1009883a 	mov	r4,r2
 8004f9c:	80800115 	stw	r2,4(r16)
 8004fa0:	00b7ffc4 	movi	r2,-8193
 8004fa4:	1884703a 	and	r2,r3,r2
 8004fa8:	8080030d 	sth	r2,12(r16)
 8004fac:	0100230e 	bge	zero,r4,800503c <__srefill_r+0x130>
 8004fb0:	0009883a 	mov	r4,zero
 8004fb4:	2005883a 	mov	r2,r4
 8004fb8:	dfc00217 	ldw	ra,8(sp)
 8004fbc:	dc400117 	ldw	r17,4(sp)
 8004fc0:	dc000017 	ldw	r16,0(sp)
 8004fc4:	dec00304 	addi	sp,sp,12
 8004fc8:	f800283a 	ret
 8004fcc:	81400c17 	ldw	r5,48(r16)
 8004fd0:	283fe426 	beq	r5,zero,8004f64 <__srefill_r+0x58>
 8004fd4:	80801004 	addi	r2,r16,64
 8004fd8:	28800226 	beq	r5,r2,8004fe4 <__srefill_r+0xd8>
 8004fdc:	8809883a 	mov	r4,r17
 8004fe0:	8003b640 	call	8003b64 <_free_r>
 8004fe4:	80800f17 	ldw	r2,60(r16)
 8004fe8:	80000c15 	stw	zero,48(r16)
 8004fec:	80800115 	stw	r2,4(r16)
 8004ff0:	103fdc26 	beq	r2,zero,8004f64 <__srefill_r+0x58>
 8004ff4:	80800e17 	ldw	r2,56(r16)
 8004ff8:	0009883a 	mov	r4,zero
 8004ffc:	80800015 	stw	r2,0(r16)
 8005000:	2005883a 	mov	r2,r4
 8005004:	dfc00217 	ldw	ra,8(sp)
 8005008:	dc400117 	ldw	r17,4(sp)
 800500c:	dc000017 	ldw	r16,0(sp)
 8005010:	dec00304 	addi	sp,sp,12
 8005014:	f800283a 	ret
 8005018:	013fffc4 	movi	r4,-1
 800501c:	2005883a 	mov	r2,r4
 8005020:	dfc00217 	ldw	ra,8(sp)
 8005024:	dc400117 	ldw	r17,4(sp)
 8005028:	dc000017 	ldw	r16,0(sp)
 800502c:	dec00304 	addi	sp,sp,12
 8005030:	f800283a 	ret
 8005034:	80095480 	call	8009548 <__sinit>
 8005038:	003fbd06 	br	8004f30 <__srefill_r+0x24>
 800503c:	20000b1e 	bne	r4,zero,800506c <__srefill_r+0x160>
 8005040:	10800814 	ori	r2,r2,32
 8005044:	013fffc4 	movi	r4,-1
 8005048:	8080030d 	sth	r2,12(r16)
 800504c:	003fd906 	br	8004fb4 <__srefill_r+0xa8>
 8005050:	008200b4 	movhi	r2,2050
 8005054:	10a95a04 	addi	r2,r2,-23192
 8005058:	11000017 	ldw	r4,0(r2)
 800505c:	01420034 	movhi	r5,2048
 8005060:	29543404 	addi	r5,r5,20688
 8005064:	8009ef00 	call	8009ef0 <_fwalk>
 8005068:	003fc306 	br	8004f78 <__srefill_r+0x6c>
 800506c:	10801014 	ori	r2,r2,64
 8005070:	013fffc4 	movi	r4,-1
 8005074:	8080030d 	sth	r2,12(r16)
 8005078:	80000115 	stw	zero,4(r16)
 800507c:	003fcd06 	br	8004fb4 <__srefill_r+0xa8>
 8005080:	8809883a 	mov	r4,r17
 8005084:	800b883a 	mov	r5,r16
 8005088:	800434c0 	call	800434c <__smakebuf_r>
 800508c:	003fb706 	br	8004f6c <__srefill_r+0x60>
 8005090:	18c01014 	ori	r3,r3,64
 8005094:	00800244 	movi	r2,9
 8005098:	013fffc4 	movi	r4,-1
 800509c:	88800015 	stw	r2,0(r17)
 80050a0:	80c0030d 	sth	r3,12(r16)
 80050a4:	003fc306 	br	8004fb4 <__srefill_r+0xa8>
 80050a8:	8809883a 	mov	r4,r17
 80050ac:	800b883a 	mov	r5,r16
 80050b0:	80092b00 	call	80092b0 <_fflush_r>
 80050b4:	103fd81e 	bne	r2,zero,8005018 <__srefill_r+0x10c>
 80050b8:	8080030b 	ldhu	r2,12(r16)
 80050bc:	80000215 	stw	zero,8(r16)
 80050c0:	80000615 	stw	zero,24(r16)
 80050c4:	10bffdcc 	andi	r2,r2,65527
 80050c8:	8080030d 	sth	r2,12(r16)
 80050cc:	003fa206 	br	8004f58 <__srefill_r+0x4c>

080050d0 <lflush>:
 80050d0:	20c0030b 	ldhu	r3,12(r4)
 80050d4:	01400244 	movi	r5,9
 80050d8:	0005883a 	mov	r2,zero
 80050dc:	18c0024c 	andi	r3,r3,9
 80050e0:	19400126 	beq	r3,r5,80050e8 <lflush+0x18>
 80050e4:	f800283a 	ret
 80050e8:	80094ac1 	jmpi	80094ac <fflush>

080050ec <_sbrk_r>:
 80050ec:	defffd04 	addi	sp,sp,-12
 80050f0:	dc000015 	stw	r16,0(sp)
 80050f4:	040200b4 	movhi	r16,2050
 80050f8:	84312904 	addi	r16,r16,-15196
 80050fc:	dc400115 	stw	r17,4(sp)
 8005100:	80000015 	stw	zero,0(r16)
 8005104:	2023883a 	mov	r17,r4
 8005108:	2809883a 	mov	r4,r5
 800510c:	dfc00215 	stw	ra,8(sp)
 8005110:	800ea6c0 	call	800ea6c <sbrk>
 8005114:	1007883a 	mov	r3,r2
 8005118:	00bfffc4 	movi	r2,-1
 800511c:	18800626 	beq	r3,r2,8005138 <_sbrk_r+0x4c>
 8005120:	1805883a 	mov	r2,r3
 8005124:	dfc00217 	ldw	ra,8(sp)
 8005128:	dc400117 	ldw	r17,4(sp)
 800512c:	dc000017 	ldw	r16,0(sp)
 8005130:	dec00304 	addi	sp,sp,12
 8005134:	f800283a 	ret
 8005138:	80800017 	ldw	r2,0(r16)
 800513c:	103ff826 	beq	r2,zero,8005120 <_sbrk_r+0x34>
 8005140:	88800015 	stw	r2,0(r17)
 8005144:	1805883a 	mov	r2,r3
 8005148:	dfc00217 	ldw	ra,8(sp)
 800514c:	dc400117 	ldw	r17,4(sp)
 8005150:	dc000017 	ldw	r16,0(sp)
 8005154:	dec00304 	addi	sp,sp,12
 8005158:	f800283a 	ret

0800515c <__sclose>:
 800515c:	2940038f 	ldh	r5,14(r5)
 8005160:	8007a741 	jmpi	8007a74 <_close_r>

08005164 <__sseek>:
 8005164:	defffe04 	addi	sp,sp,-8
 8005168:	dc000015 	stw	r16,0(sp)
 800516c:	2821883a 	mov	r16,r5
 8005170:	2940038f 	ldh	r5,14(r5)
 8005174:	dfc00115 	stw	ra,4(sp)
 8005178:	800a0dc0 	call	800a0dc <_lseek_r>
 800517c:	1007883a 	mov	r3,r2
 8005180:	00bfffc4 	movi	r2,-1
 8005184:	18800926 	beq	r3,r2,80051ac <__sseek+0x48>
 8005188:	8080030b 	ldhu	r2,12(r16)
 800518c:	80c01415 	stw	r3,80(r16)
 8005190:	10840014 	ori	r2,r2,4096
 8005194:	8080030d 	sth	r2,12(r16)
 8005198:	1805883a 	mov	r2,r3
 800519c:	dfc00117 	ldw	ra,4(sp)
 80051a0:	dc000017 	ldw	r16,0(sp)
 80051a4:	dec00204 	addi	sp,sp,8
 80051a8:	f800283a 	ret
 80051ac:	8080030b 	ldhu	r2,12(r16)
 80051b0:	10bbffcc 	andi	r2,r2,61439
 80051b4:	8080030d 	sth	r2,12(r16)
 80051b8:	1805883a 	mov	r2,r3
 80051bc:	dfc00117 	ldw	ra,4(sp)
 80051c0:	dc000017 	ldw	r16,0(sp)
 80051c4:	dec00204 	addi	sp,sp,8
 80051c8:	f800283a 	ret

080051cc <__swrite>:
 80051cc:	2880030b 	ldhu	r2,12(r5)
 80051d0:	defffb04 	addi	sp,sp,-20
 80051d4:	dcc00315 	stw	r19,12(sp)
 80051d8:	1080400c 	andi	r2,r2,256
 80051dc:	dc800215 	stw	r18,8(sp)
 80051e0:	dc400115 	stw	r17,4(sp)
 80051e4:	dc000015 	stw	r16,0(sp)
 80051e8:	3027883a 	mov	r19,r6
 80051ec:	3825883a 	mov	r18,r7
 80051f0:	dfc00415 	stw	ra,16(sp)
 80051f4:	2821883a 	mov	r16,r5
 80051f8:	000d883a 	mov	r6,zero
 80051fc:	01c00084 	movi	r7,2
 8005200:	2023883a 	mov	r17,r4
 8005204:	10000226 	beq	r2,zero,8005210 <__swrite+0x44>
 8005208:	2940038f 	ldh	r5,14(r5)
 800520c:	800a0dc0 	call	800a0dc <_lseek_r>
 8005210:	8080030b 	ldhu	r2,12(r16)
 8005214:	8140038f 	ldh	r5,14(r16)
 8005218:	8809883a 	mov	r4,r17
 800521c:	10bbffcc 	andi	r2,r2,61439
 8005220:	980d883a 	mov	r6,r19
 8005224:	900f883a 	mov	r7,r18
 8005228:	8080030d 	sth	r2,12(r16)
 800522c:	dfc00417 	ldw	ra,16(sp)
 8005230:	dcc00317 	ldw	r19,12(sp)
 8005234:	dc800217 	ldw	r18,8(sp)
 8005238:	dc400117 	ldw	r17,4(sp)
 800523c:	dc000017 	ldw	r16,0(sp)
 8005240:	dec00504 	addi	sp,sp,20
 8005244:	80078c01 	jmpi	80078c0 <_write_r>

08005248 <__sread>:
 8005248:	defffe04 	addi	sp,sp,-8
 800524c:	dc000015 	stw	r16,0(sp)
 8005250:	2821883a 	mov	r16,r5
 8005254:	2940038f 	ldh	r5,14(r5)
 8005258:	dfc00115 	stw	ra,4(sp)
 800525c:	800b5900 	call	800b590 <_read_r>
 8005260:	1007883a 	mov	r3,r2
 8005264:	10000816 	blt	r2,zero,8005288 <__sread+0x40>
 8005268:	80801417 	ldw	r2,80(r16)
 800526c:	10c5883a 	add	r2,r2,r3
 8005270:	80801415 	stw	r2,80(r16)
 8005274:	1805883a 	mov	r2,r3
 8005278:	dfc00117 	ldw	ra,4(sp)
 800527c:	dc000017 	ldw	r16,0(sp)
 8005280:	dec00204 	addi	sp,sp,8
 8005284:	f800283a 	ret
 8005288:	8080030b 	ldhu	r2,12(r16)
 800528c:	10bbffcc 	andi	r2,r2,61439
 8005290:	8080030d 	sth	r2,12(r16)
 8005294:	1805883a 	mov	r2,r3
 8005298:	dfc00117 	ldw	ra,4(sp)
 800529c:	dc000017 	ldw	r16,0(sp)
 80052a0:	dec00204 	addi	sp,sp,8
 80052a4:	f800283a 	ret

080052a8 <strerror>:
 80052a8:	deffff04 	addi	sp,sp,-4
 80052ac:	00802184 	movi	r2,134
 80052b0:	dfc00015 	stw	ra,0(sp)
 80052b4:	200b883a 	mov	r5,r4
 80052b8:	11008e36 	bltu	r2,r4,80054f4 <strerror+0x24c>
 80052bc:	2105883a 	add	r2,r4,r4
 80052c0:	1085883a 	add	r2,r2,r2
 80052c4:	00c20034 	movhi	r3,2048
 80052c8:	18d4b604 	addi	r3,r3,21208
 80052cc:	10c5883a 	add	r2,r2,r3
 80052d0:	11000017 	ldw	r4,0(r2)
 80052d4:	2000683a 	jmp	r4
 80052d8:	080054f4 	orhi	zero,at,339
 80052dc:	0800552c 	andhi	zero,at,340
 80052e0:	08005538 	rdprs	zero,at,340
 80052e4:	08005544 	addi	zero,at,341
 80052e8:	08005550 	cmplti	zero,at,341
 80052ec:	0800555c 	xori	zero,at,341
 80052f0:	08005568 	cmpgeui	zero,at,341
 80052f4:	08005574 	orhi	zero,at,341
 80052f8:	08005580 	call	800558 <__alt_mem_onchip_memory2_1+0x7fc558>
 80052fc:	0800558c 	andi	zero,at,342
 8005300:	08005598 	cmpnei	zero,at,342
 8005304:	080055a4 	muli	zero,at,342
 8005308:	080055b0 	cmpltui	zero,at,342
 800530c:	080055bc 	xorhi	zero,at,342
 8005310:	080055c8 	cmpgei	zero,at,343
 8005314:	080055d4 	ori	zero,at,343
 8005318:	080055e0 	cmpeqi	zero,at,343
 800531c:	080055ec 	andhi	zero,at,343
 8005320:	080055f8 	rdprs	zero,at,343
 8005324:	08005604 	addi	zero,at,344
 8005328:	08005610 	cmplti	zero,at,344
 800532c:	0800561c 	xori	zero,at,344
 8005330:	08005628 	cmpgeui	zero,at,344
 8005334:	08005634 	orhi	zero,at,344
 8005338:	08005640 	call	800564 <__alt_mem_onchip_memory2_1+0x7fc564>
 800533c:	0800564c 	andi	zero,at,345
 8005340:	08005658 	cmpnei	zero,at,345
 8005344:	08005664 	muli	zero,at,345
 8005348:	08005670 	cmpltui	zero,at,345
 800534c:	0800567c 	xorhi	zero,at,345
 8005350:	08005688 	cmpgei	zero,at,346
 8005354:	08005694 	ori	zero,at,346
 8005358:	080056a0 	cmpeqi	zero,at,346
 800535c:	080056ac 	andhi	zero,at,346
 8005360:	080056b8 	rdprs	zero,at,346
 8005364:	080056c4 	addi	zero,at,347
 8005368:	080056d0 	cmplti	zero,at,347
 800536c:	080054f4 	orhi	zero,at,339
 8005370:	080054f4 	orhi	zero,at,339
 8005374:	080054f4 	orhi	zero,at,339
 8005378:	080054f4 	orhi	zero,at,339
 800537c:	080054f4 	orhi	zero,at,339
 8005380:	080054f4 	orhi	zero,at,339
 8005384:	080054f4 	orhi	zero,at,339
 8005388:	080054f4 	orhi	zero,at,339
 800538c:	080056dc 	xori	zero,at,347
 8005390:	080056e8 	cmpgeui	zero,at,347
 8005394:	080054f4 	orhi	zero,at,339
 8005398:	080054f4 	orhi	zero,at,339
 800539c:	080054f4 	orhi	zero,at,339
 80053a0:	080054f4 	orhi	zero,at,339
 80053a4:	080054f4 	orhi	zero,at,339
 80053a8:	080054f4 	orhi	zero,at,339
 80053ac:	080054f4 	orhi	zero,at,339
 80053b0:	080054f4 	orhi	zero,at,339
 80053b4:	080054f4 	orhi	zero,at,339
 80053b8:	080054f4 	orhi	zero,at,339
 80053bc:	080054f4 	orhi	zero,at,339
 80053c0:	080054f4 	orhi	zero,at,339
 80053c4:	080054f4 	orhi	zero,at,339
 80053c8:	080056f4 	orhi	zero,at,347
 80053cc:	080054f4 	orhi	zero,at,339
 80053d0:	08005700 	call	800570 <__alt_mem_onchip_memory2_1+0x7fc570>
 80053d4:	0800570c 	andi	zero,at,348
 80053d8:	08005718 	cmpnei	zero,at,348
 80053dc:	08005724 	muli	zero,at,348
 80053e0:	08005730 	cmpltui	zero,at,348
 80053e4:	0800573c 	xorhi	zero,at,348
 80053e8:	08005748 	cmpgei	zero,at,349
 80053ec:	08005754 	ori	zero,at,349
 80053f0:	08005760 	cmpeqi	zero,at,349
 80053f4:	0800576c 	andhi	zero,at,349
 80053f8:	080054f4 	orhi	zero,at,339
 80053fc:	080054f4 	orhi	zero,at,339
 8005400:	08005778 	rdprs	zero,at,349
 8005404:	080054f4 	orhi	zero,at,339
 8005408:	080054f4 	orhi	zero,at,339
 800540c:	08005784 	addi	zero,at,350
 8005410:	080054f4 	orhi	zero,at,339
 8005414:	080054f4 	orhi	zero,at,339
 8005418:	080054f4 	orhi	zero,at,339
 800541c:	080054f4 	orhi	zero,at,339
 8005420:	080054f4 	orhi	zero,at,339
 8005424:	08005790 	cmplti	zero,at,350
 8005428:	0800579c 	xori	zero,at,350
 800542c:	080057a8 	cmpgeui	zero,at,350
 8005430:	080057b4 	orhi	zero,at,350
 8005434:	080057c0 	call	80057c <__alt_mem_onchip_memory2_1+0x7fc57c>
 8005438:	080057cc 	andi	zero,at,351
 800543c:	080057d8 	cmpnei	zero,at,351
 8005440:	080057e4 	muli	zero,at,351
 8005444:	080057f0 	cmpltui	zero,at,351
 8005448:	080057fc 	xorhi	zero,at,351
 800544c:	080054f4 	orhi	zero,at,339
 8005450:	080054f4 	orhi	zero,at,339
 8005454:	08005808 	cmpgei	zero,at,352
 8005458:	080054f4 	orhi	zero,at,339
 800545c:	080054f4 	orhi	zero,at,339
 8005460:	080054f4 	orhi	zero,at,339
 8005464:	080054f4 	orhi	zero,at,339
 8005468:	080054f4 	orhi	zero,at,339
 800546c:	080054f4 	orhi	zero,at,339
 8005470:	080054f4 	orhi	zero,at,339
 8005474:	080054f4 	orhi	zero,at,339
 8005478:	080054f4 	orhi	zero,at,339
 800547c:	08005814 	ori	zero,at,352
 8005480:	08005820 	cmpeqi	zero,at,352
 8005484:	0800582c 	andhi	zero,at,352
 8005488:	08005838 	rdprs	zero,at,352
 800548c:	08005844 	addi	zero,at,353
 8005490:	08005850 	cmplti	zero,at,353
 8005494:	0800585c 	xori	zero,at,353
 8005498:	08005868 	cmpgeui	zero,at,353
 800549c:	08005874 	orhi	zero,at,353
 80054a0:	08005880 	call	800588 <__alt_mem_onchip_memory2_1+0x7fc588>
 80054a4:	0800588c 	andi	zero,at,354
 80054a8:	08005898 	cmpnei	zero,at,354
 80054ac:	080058a4 	muli	zero,at,354
 80054b0:	080058b0 	cmpltui	zero,at,354
 80054b4:	080058bc 	xorhi	zero,at,354
 80054b8:	080058c8 	cmpgei	zero,at,355
 80054bc:	080058d4 	ori	zero,at,355
 80054c0:	080058e0 	cmpeqi	zero,at,355
 80054c4:	080058ec 	andhi	zero,at,355
 80054c8:	080058f8 	rdprs	zero,at,355
 80054cc:	080054f4 	orhi	zero,at,339
 80054d0:	080054f4 	orhi	zero,at,339
 80054d4:	08005904 	addi	zero,at,356
 80054d8:	08005910 	cmplti	zero,at,356
 80054dc:	080054f4 	orhi	zero,at,339
 80054e0:	080054f4 	orhi	zero,at,339
 80054e4:	080054f4 	orhi	zero,at,339
 80054e8:	080054f4 	orhi	zero,at,339
 80054ec:	080054f4 	orhi	zero,at,339
 80054f0:	08005520 	cmpeqi	zero,at,340
 80054f4:	2809883a 	mov	r4,r5
 80054f8:	80059900 	call	8005990 <_user_strerror>
 80054fc:	10000326 	beq	r2,zero,800550c <strerror+0x264>
 8005500:	dfc00017 	ldw	ra,0(sp)
 8005504:	dec00104 	addi	sp,sp,4
 8005508:	f800283a 	ret
 800550c:	00820074 	movhi	r2,2049
 8005510:	109d0904 	addi	r2,r2,29732
 8005514:	dfc00017 	ldw	ra,0(sp)
 8005518:	dec00104 	addi	sp,sp,4
 800551c:	f800283a 	ret
 8005520:	00820074 	movhi	r2,2049
 8005524:	109f1604 	addi	r2,r2,31832
 8005528:	003ff506 	br	8005500 <strerror+0x258>
 800552c:	00820074 	movhi	r2,2049
 8005530:	109e6604 	addi	r2,r2,31128
 8005534:	003ff206 	br	8005500 <strerror+0x258>
 8005538:	00820074 	movhi	r2,2049
 800553c:	109e6904 	addi	r2,r2,31140
 8005540:	003fef06 	br	8005500 <strerror+0x258>
 8005544:	00820074 	movhi	r2,2049
 8005548:	109e7004 	addi	r2,r2,31168
 800554c:	003fec06 	br	8005500 <strerror+0x258>
 8005550:	00820074 	movhi	r2,2049
 8005554:	109e7404 	addi	r2,r2,31184
 8005558:	003fe906 	br	8005500 <strerror+0x258>
 800555c:	00820074 	movhi	r2,2049
 8005560:	109e7a04 	addi	r2,r2,31208
 8005564:	003fe606 	br	8005500 <strerror+0x258>
 8005568:	00820074 	movhi	r2,2049
 800556c:	109e7d04 	addi	r2,r2,31220
 8005570:	003fe306 	br	8005500 <strerror+0x258>
 8005574:	00820074 	movhi	r2,2049
 8005578:	109e8404 	addi	r2,r2,31248
 800557c:	003fe006 	br	8005500 <strerror+0x258>
 8005580:	00820074 	movhi	r2,2049
 8005584:	109e8904 	addi	r2,r2,31268
 8005588:	003fdd06 	br	8005500 <strerror+0x258>
 800558c:	00820074 	movhi	r2,2049
 8005590:	109e9504 	addi	r2,r2,31316
 8005594:	003fda06 	br	8005500 <strerror+0x258>
 8005598:	00820074 	movhi	r2,2049
 800559c:	109e9904 	addi	r2,r2,31332
 80055a0:	003fd706 	br	8005500 <strerror+0x258>
 80055a4:	00820074 	movhi	r2,2049
 80055a8:	109ea404 	addi	r2,r2,31376
 80055ac:	003fd406 	br	8005500 <strerror+0x258>
 80055b0:	00820074 	movhi	r2,2049
 80055b4:	109ea904 	addi	r2,r2,31396
 80055b8:	003fd106 	br	8005500 <strerror+0x258>
 80055bc:	00820074 	movhi	r2,2049
 80055c0:	109eae04 	addi	r2,r2,31416
 80055c4:	003fce06 	br	8005500 <strerror+0x258>
 80055c8:	00820074 	movhi	r2,2049
 80055cc:	109eb304 	addi	r2,r2,31436
 80055d0:	003fcb06 	br	8005500 <strerror+0x258>
 80055d4:	00820074 	movhi	r2,2049
 80055d8:	109eb604 	addi	r2,r2,31448
 80055dc:	003fc806 	br	8005500 <strerror+0x258>
 80055e0:	00820074 	movhi	r2,2049
 80055e4:	109ebc04 	addi	r2,r2,31472
 80055e8:	003fc506 	br	8005500 <strerror+0x258>
 80055ec:	00820074 	movhi	r2,2049
 80055f0:	109ec204 	addi	r2,r2,31496
 80055f4:	003fc206 	br	8005500 <strerror+0x258>
 80055f8:	00820074 	movhi	r2,2049
 80055fc:	109ec504 	addi	r2,r2,31508
 8005600:	003fbf06 	br	8005500 <strerror+0x258>
 8005604:	00820074 	movhi	r2,2049
 8005608:	109eca04 	addi	r2,r2,31528
 800560c:	003fbc06 	br	8005500 <strerror+0x258>
 8005610:	00820074 	movhi	r2,2049
 8005614:	109ece04 	addi	r2,r2,31544
 8005618:	003fb906 	br	8005500 <strerror+0x258>
 800561c:	00820074 	movhi	r2,2049
 8005620:	109ede04 	addi	r2,r2,31608
 8005624:	003fb606 	br	8005500 <strerror+0x258>
 8005628:	00820074 	movhi	r2,2049
 800562c:	109ee204 	addi	r2,r2,31624
 8005630:	003fb306 	br	8005500 <strerror+0x258>
 8005634:	00820074 	movhi	r2,2049
 8005638:	109ef004 	addi	r2,r2,31680
 800563c:	003fb006 	br	8005500 <strerror+0x258>
 8005640:	00820074 	movhi	r2,2049
 8005644:	109ef804 	addi	r2,r2,31712
 8005648:	003fad06 	br	8005500 <strerror+0x258>
 800564c:	00820074 	movhi	r2,2049
 8005650:	109efd04 	addi	r2,r2,31732
 8005654:	003faa06 	br	8005500 <strerror+0x258>
 8005658:	00820074 	movhi	r2,2049
 800565c:	109f0304 	addi	r2,r2,31756
 8005660:	003fa706 	br	8005500 <strerror+0x258>
 8005664:	00820074 	movhi	r2,2049
 8005668:	109f0704 	addi	r2,r2,31772
 800566c:	003fa406 	br	8005500 <strerror+0x258>
 8005670:	00820074 	movhi	r2,2049
 8005674:	109f1004 	addi	r2,r2,31808
 8005678:	003fa106 	br	8005500 <strerror+0x258>
 800567c:	00820074 	movhi	r2,2049
 8005680:	109f1a04 	addi	r2,r2,31848
 8005684:	003f9e06 	br	8005500 <strerror+0x258>
 8005688:	00820074 	movhi	r2,2049
 800568c:	109f1e04 	addi	r2,r2,31864
 8005690:	003f9b06 	br	8005500 <strerror+0x258>
 8005694:	00820074 	movhi	r2,2049
 8005698:	109f2404 	addi	r2,r2,31888
 800569c:	003f9806 	br	8005500 <strerror+0x258>
 80056a0:	00820074 	movhi	r2,2049
 80056a4:	109f2804 	addi	r2,r2,31904
 80056a8:	003f9506 	br	8005500 <strerror+0x258>
 80056ac:	00820074 	movhi	r2,2049
 80056b0:	109f2b04 	addi	r2,r2,31916
 80056b4:	003f9206 	br	8005500 <strerror+0x258>
 80056b8:	00820074 	movhi	r2,2049
 80056bc:	109f2f04 	addi	r2,r2,31932
 80056c0:	003f8f06 	br	8005500 <strerror+0x258>
 80056c4:	00820074 	movhi	r2,2049
 80056c8:	109f3404 	addi	r2,r2,31952
 80056cc:	003f8c06 	br	8005500 <strerror+0x258>
 80056d0:	00820074 	movhi	r2,2049
 80056d4:	109f3b04 	addi	r2,r2,31980
 80056d8:	003f8906 	br	8005500 <strerror+0x258>
 80056dc:	00820074 	movhi	r2,2049
 80056e0:	109f4004 	addi	r2,r2,32000
 80056e4:	003f8606 	br	8005500 <strerror+0x258>
 80056e8:	00820074 	movhi	r2,2049
 80056ec:	109f4904 	addi	r2,r2,32036
 80056f0:	003f8306 	br	8005500 <strerror+0x258>
 80056f4:	00820074 	movhi	r2,2049
 80056f8:	109f4b04 	addi	r2,r2,32044
 80056fc:	003f8006 	br	8005500 <strerror+0x258>
 8005700:	00820074 	movhi	r2,2049
 8005704:	109f4f04 	addi	r2,r2,32060
 8005708:	003f7d06 	br	8005500 <strerror+0x258>
 800570c:	00820074 	movhi	r2,2049
 8005710:	109f5504 	addi	r2,r2,32084
 8005714:	003f7a06 	br	8005500 <strerror+0x258>
 8005718:	00820074 	movhi	r2,2049
 800571c:	109f5a04 	addi	r2,r2,32104
 8005720:	003f7706 	br	8005500 <strerror+0x258>
 8005724:	00820074 	movhi	r2,2049
 8005728:	109f6204 	addi	r2,r2,32136
 800572c:	003f7406 	br	8005500 <strerror+0x258>
 8005730:	00820074 	movhi	r2,2049
 8005734:	109f6504 	addi	r2,r2,32148
 8005738:	003f7106 	br	8005500 <strerror+0x258>
 800573c:	00820074 	movhi	r2,2049
 8005740:	109f6a04 	addi	r2,r2,32168
 8005744:	003f6e06 	br	8005500 <strerror+0x258>
 8005748:	00820074 	movhi	r2,2049
 800574c:	109f7004 	addi	r2,r2,32192
 8005750:	003f6b06 	br	8005500 <strerror+0x258>
 8005754:	00820074 	movhi	r2,2049
 8005758:	109f7404 	addi	r2,r2,32208
 800575c:	003f6806 	br	8005500 <strerror+0x258>
 8005760:	00820074 	movhi	r2,2049
 8005764:	109f7804 	addi	r2,r2,32224
 8005768:	003f6506 	br	8005500 <strerror+0x258>
 800576c:	00820074 	movhi	r2,2049
 8005770:	109f7d04 	addi	r2,r2,32244
 8005774:	003f6206 	br	8005500 <strerror+0x258>
 8005778:	00820074 	movhi	r2,2049
 800577c:	109f8604 	addi	r2,r2,32280
 8005780:	003f5f06 	br	8005500 <strerror+0x258>
 8005784:	00820074 	movhi	r2,2049
 8005788:	109f8b04 	addi	r2,r2,32300
 800578c:	003f5c06 	br	8005500 <strerror+0x258>
 8005790:	00820074 	movhi	r2,2049
 8005794:	109f8e04 	addi	r2,r2,32312
 8005798:	003f5906 	br	8005500 <strerror+0x258>
 800579c:	00820074 	movhi	r2,2049
 80057a0:	109f9804 	addi	r2,r2,32352
 80057a4:	003f5606 	br	8005500 <strerror+0x258>
 80057a8:	00820074 	movhi	r2,2049
 80057ac:	109fa204 	addi	r2,r2,32392
 80057b0:	003f5306 	br	8005500 <strerror+0x258>
 80057b4:	00820074 	movhi	r2,2049
 80057b8:	109faa04 	addi	r2,r2,32424
 80057bc:	003f5006 	br	8005500 <strerror+0x258>
 80057c0:	00820074 	movhi	r2,2049
 80057c4:	109fba04 	addi	r2,r2,32488
 80057c8:	003f4d06 	br	8005500 <strerror+0x258>
 80057cc:	00820074 	movhi	r2,2049
 80057d0:	109fc404 	addi	r2,r2,32528
 80057d4:	003f4a06 	br	8005500 <strerror+0x258>
 80057d8:	00820074 	movhi	r2,2049
 80057dc:	109fcb04 	addi	r2,r2,32556
 80057e0:	003f4706 	br	8005500 <strerror+0x258>
 80057e4:	00820074 	movhi	r2,2049
 80057e8:	109fcf04 	addi	r2,r2,32572
 80057ec:	003f4406 	br	8005500 <strerror+0x258>
 80057f0:	00820074 	movhi	r2,2049
 80057f4:	109fd404 	addi	r2,r2,32592
 80057f8:	003f4106 	br	8005500 <strerror+0x258>
 80057fc:	00820074 	movhi	r2,2049
 8005800:	109fdb04 	addi	r2,r2,32620
 8005804:	003f3e06 	br	8005500 <strerror+0x258>
 8005808:	008200b4 	movhi	r2,2050
 800580c:	10a03b04 	addi	r2,r2,-32532
 8005810:	003f3b06 	br	8005500 <strerror+0x258>
 8005814:	00820074 	movhi	r2,2049
 8005818:	109fe104 	addi	r2,r2,32644
 800581c:	003f3806 	br	8005500 <strerror+0x258>
 8005820:	00820074 	movhi	r2,2049
 8005824:	109fe804 	addi	r2,r2,32672
 8005828:	003f3506 	br	8005500 <strerror+0x258>
 800582c:	00820074 	movhi	r2,2049
 8005830:	109ff404 	addi	r2,r2,32720
 8005834:	003f3206 	br	8005500 <strerror+0x258>
 8005838:	00820074 	movhi	r2,2049
 800583c:	109ffc04 	addi	r2,r2,32752
 8005840:	003f2f06 	br	8005500 <strerror+0x258>
 8005844:	008200b4 	movhi	r2,2050
 8005848:	10a00404 	addi	r2,r2,-32752
 800584c:	003f2c06 	br	8005500 <strerror+0x258>
 8005850:	008200b4 	movhi	r2,2050
 8005854:	10a00a04 	addi	r2,r2,-32728
 8005858:	003f2906 	br	8005500 <strerror+0x258>
 800585c:	008200b4 	movhi	r2,2050
 8005860:	10a01304 	addi	r2,r2,-32692
 8005864:	003f2606 	br	8005500 <strerror+0x258>
 8005868:	008200b4 	movhi	r2,2050
 800586c:	10a01804 	addi	r2,r2,-32672
 8005870:	003f2306 	br	8005500 <strerror+0x258>
 8005874:	008200b4 	movhi	r2,2050
 8005878:	10a01e04 	addi	r2,r2,-32648
 800587c:	003f2006 	br	8005500 <strerror+0x258>
 8005880:	00820074 	movhi	r2,2049
 8005884:	109f4304 	addi	r2,r2,32012
 8005888:	003f1d06 	br	8005500 <strerror+0x258>
 800588c:	00820074 	movhi	r2,2049
 8005890:	109ee704 	addi	r2,r2,31644
 8005894:	003f1a06 	br	8005500 <strerror+0x258>
 8005898:	00820074 	movhi	r2,2049
 800589c:	109e6004 	addi	r2,r2,31104
 80058a0:	003f1706 	br	8005500 <strerror+0x258>
 80058a4:	00820074 	movhi	r2,2049
 80058a8:	109ed204 	addi	r2,r2,31560
 80058ac:	003f1406 	br	8005500 <strerror+0x258>
 80058b0:	00820074 	movhi	r2,2049
 80058b4:	109f0b04 	addi	r2,r2,31788
 80058b8:	003f1106 	br	8005500 <strerror+0x258>
 80058bc:	00820074 	movhi	r2,2049
 80058c0:	109ed604 	addi	r2,r2,31576
 80058c4:	003f0e06 	br	8005500 <strerror+0x258>
 80058c8:	00820074 	movhi	r2,2049
 80058cc:	109e8e04 	addi	r2,r2,31288
 80058d0:	003f0b06 	br	8005500 <strerror+0x258>
 80058d4:	00820074 	movhi	r2,2049
 80058d8:	109e9c04 	addi	r2,r2,31344
 80058dc:	003f0806 	br	8005500 <strerror+0x258>
 80058e0:	00820074 	movhi	r2,2049
 80058e4:	109e5b04 	addi	r2,r2,31084
 80058e8:	003f0506 	br	8005500 <strerror+0x258>
 80058ec:	00820074 	movhi	r2,2049
 80058f0:	109f8104 	addi	r2,r2,32260
 80058f4:	003f0206 	br	8005500 <strerror+0x258>
 80058f8:	008200b4 	movhi	r2,2050
 80058fc:	10a02d04 	addi	r2,r2,-32588
 8005900:	003eff06 	br	8005500 <strerror+0x258>
 8005904:	008200b4 	movhi	r2,2050
 8005908:	10a03404 	addi	r2,r2,-32560
 800590c:	003efc06 	br	8005500 <strerror+0x258>
 8005910:	008200b4 	movhi	r2,2050
 8005914:	10a02704 	addi	r2,r2,-32612
 8005918:	003ef906 	br	8005500 <strerror+0x258>

0800591c <strlen>:
 800591c:	208000cc 	andi	r2,r4,3
 8005920:	2011883a 	mov	r8,r4
 8005924:	1000161e 	bne	r2,zero,8005980 <strlen+0x64>
 8005928:	20c00017 	ldw	r3,0(r4)
 800592c:	017fbff4 	movhi	r5,65279
 8005930:	297fbfc4 	addi	r5,r5,-257
 8005934:	01e02074 	movhi	r7,32897
 8005938:	39e02004 	addi	r7,r7,-32640
 800593c:	1945883a 	add	r2,r3,r5
 8005940:	11c4703a 	and	r2,r2,r7
 8005944:	00c6303a 	nor	r3,zero,r3
 8005948:	1886703a 	and	r3,r3,r2
 800594c:	18000c1e 	bne	r3,zero,8005980 <strlen+0x64>
 8005950:	280d883a 	mov	r6,r5
 8005954:	380b883a 	mov	r5,r7
 8005958:	21000104 	addi	r4,r4,4
 800595c:	20800017 	ldw	r2,0(r4)
 8005960:	1187883a 	add	r3,r2,r6
 8005964:	1946703a 	and	r3,r3,r5
 8005968:	0084303a 	nor	r2,zero,r2
 800596c:	10c4703a 	and	r2,r2,r3
 8005970:	103ff926 	beq	r2,zero,8005958 <strlen+0x3c>
 8005974:	20800007 	ldb	r2,0(r4)
 8005978:	10000326 	beq	r2,zero,8005988 <strlen+0x6c>
 800597c:	21000044 	addi	r4,r4,1
 8005980:	20800007 	ldb	r2,0(r4)
 8005984:	103ffd1e 	bne	r2,zero,800597c <strlen+0x60>
 8005988:	2205c83a 	sub	r2,r4,r8
 800598c:	f800283a 	ret

08005990 <_user_strerror>:
 8005990:	0005883a 	mov	r2,zero
 8005994:	f800283a 	ret

08005998 <__sprint_r>:
 8005998:	30800217 	ldw	r2,8(r6)
 800599c:	defffe04 	addi	sp,sp,-8
 80059a0:	dc000015 	stw	r16,0(sp)
 80059a4:	dfc00115 	stw	ra,4(sp)
 80059a8:	3021883a 	mov	r16,r6
 80059ac:	0007883a 	mov	r3,zero
 80059b0:	1000061e 	bne	r2,zero,80059cc <__sprint_r+0x34>
 80059b4:	1805883a 	mov	r2,r3
 80059b8:	30000115 	stw	zero,4(r6)
 80059bc:	dfc00117 	ldw	ra,4(sp)
 80059c0:	dc000017 	ldw	r16,0(sp)
 80059c4:	dec00204 	addi	sp,sp,8
 80059c8:	f800283a 	ret
 80059cc:	800998c0 	call	800998c <__sfvwrite_r>
 80059d0:	1007883a 	mov	r3,r2
 80059d4:	1805883a 	mov	r2,r3
 80059d8:	80000115 	stw	zero,4(r16)
 80059dc:	80000215 	stw	zero,8(r16)
 80059e0:	dfc00117 	ldw	ra,4(sp)
 80059e4:	dc000017 	ldw	r16,0(sp)
 80059e8:	dec00204 	addi	sp,sp,8
 80059ec:	f800283a 	ret

080059f0 <___vfprintf_internal_r>:
 80059f0:	defea404 	addi	sp,sp,-1392
 80059f4:	dd815815 	stw	r22,1376(sp)
 80059f8:	dc015215 	stw	r16,1352(sp)
 80059fc:	d9c15115 	stw	r7,1348(sp)
 8005a00:	dfc15b15 	stw	ra,1388(sp)
 8005a04:	df015a15 	stw	fp,1384(sp)
 8005a08:	ddc15915 	stw	r23,1380(sp)
 8005a0c:	dd415715 	stw	r21,1372(sp)
 8005a10:	dd015615 	stw	r20,1368(sp)
 8005a14:	dcc15515 	stw	r19,1364(sp)
 8005a18:	dc815415 	stw	r18,1360(sp)
 8005a1c:	dc415315 	stw	r17,1356(sp)
 8005a20:	282d883a 	mov	r22,r5
 8005a24:	3021883a 	mov	r16,r6
 8005a28:	d9014f15 	stw	r4,1340(sp)
 8005a2c:	800a0200 	call	800a020 <_localeconv_r>
 8005a30:	10800017 	ldw	r2,0(r2)
 8005a34:	d9c15117 	ldw	r7,1348(sp)
 8005a38:	d8814915 	stw	r2,1316(sp)
 8005a3c:	d8814f17 	ldw	r2,1340(sp)
 8005a40:	10000226 	beq	r2,zero,8005a4c <___vfprintf_internal_r+0x5c>
 8005a44:	10800e17 	ldw	r2,56(r2)
 8005a48:	10020d26 	beq	r2,zero,8006280 <___vfprintf_internal_r+0x890>
 8005a4c:	b080030b 	ldhu	r2,12(r22)
 8005a50:	1080020c 	andi	r2,r2,8
 8005a54:	10020e26 	beq	r2,zero,8006290 <___vfprintf_internal_r+0x8a0>
 8005a58:	b0800417 	ldw	r2,16(r22)
 8005a5c:	10020c26 	beq	r2,zero,8006290 <___vfprintf_internal_r+0x8a0>
 8005a60:	b200030b 	ldhu	r8,12(r22)
 8005a64:	00800284 	movi	r2,10
 8005a68:	40c0068c 	andi	r3,r8,26
 8005a6c:	18802f1e 	bne	r3,r2,8005b2c <___vfprintf_internal_r+0x13c>
 8005a70:	b080038f 	ldh	r2,14(r22)
 8005a74:	10002d16 	blt	r2,zero,8005b2c <___vfprintf_internal_r+0x13c>
 8005a78:	b240038b 	ldhu	r9,14(r22)
 8005a7c:	b2800717 	ldw	r10,28(r22)
 8005a80:	b2c00917 	ldw	r11,36(r22)
 8005a84:	d9014f17 	ldw	r4,1340(sp)
 8005a88:	dc402904 	addi	r17,sp,164
 8005a8c:	d8804004 	addi	r2,sp,256
 8005a90:	00c10004 	movi	r3,1024
 8005a94:	423fff4c 	andi	r8,r8,65533
 8005a98:	800d883a 	mov	r6,r16
 8005a9c:	880b883a 	mov	r5,r17
 8005aa0:	da002c0d 	sth	r8,176(sp)
 8005aa4:	da402c8d 	sth	r9,178(sp)
 8005aa8:	da803015 	stw	r10,192(sp)
 8005aac:	dac03215 	stw	r11,200(sp)
 8005ab0:	d8802d15 	stw	r2,180(sp)
 8005ab4:	d8c02e15 	stw	r3,184(sp)
 8005ab8:	d8802915 	stw	r2,164(sp)
 8005abc:	d8c02b15 	stw	r3,172(sp)
 8005ac0:	d8002f15 	stw	zero,188(sp)
 8005ac4:	80059f00 	call	80059f0 <___vfprintf_internal_r>
 8005ac8:	d8814b15 	stw	r2,1324(sp)
 8005acc:	10000416 	blt	r2,zero,8005ae0 <___vfprintf_internal_r+0xf0>
 8005ad0:	d9014f17 	ldw	r4,1340(sp)
 8005ad4:	880b883a 	mov	r5,r17
 8005ad8:	80092b00 	call	80092b0 <_fflush_r>
 8005adc:	1002321e 	bne	r2,zero,80063a8 <___vfprintf_internal_r+0x9b8>
 8005ae0:	d8802c0b 	ldhu	r2,176(sp)
 8005ae4:	1080100c 	andi	r2,r2,64
 8005ae8:	10000326 	beq	r2,zero,8005af8 <___vfprintf_internal_r+0x108>
 8005aec:	b080030b 	ldhu	r2,12(r22)
 8005af0:	10801014 	ori	r2,r2,64
 8005af4:	b080030d 	sth	r2,12(r22)
 8005af8:	d8814b17 	ldw	r2,1324(sp)
 8005afc:	dfc15b17 	ldw	ra,1388(sp)
 8005b00:	df015a17 	ldw	fp,1384(sp)
 8005b04:	ddc15917 	ldw	r23,1380(sp)
 8005b08:	dd815817 	ldw	r22,1376(sp)
 8005b0c:	dd415717 	ldw	r21,1372(sp)
 8005b10:	dd015617 	ldw	r20,1368(sp)
 8005b14:	dcc15517 	ldw	r19,1364(sp)
 8005b18:	dc815417 	ldw	r18,1360(sp)
 8005b1c:	dc415317 	ldw	r17,1356(sp)
 8005b20:	dc015217 	ldw	r16,1352(sp)
 8005b24:	dec15c04 	addi	sp,sp,1392
 8005b28:	f800283a 	ret
 8005b2c:	0005883a 	mov	r2,zero
 8005b30:	0007883a 	mov	r3,zero
 8005b34:	dd401904 	addi	r21,sp,100
 8005b38:	d8814215 	stw	r2,1288(sp)
 8005b3c:	802f883a 	mov	r23,r16
 8005b40:	d8c14315 	stw	r3,1292(sp)
 8005b44:	d8014b15 	stw	zero,1324(sp)
 8005b48:	d8014815 	stw	zero,1312(sp)
 8005b4c:	d8014415 	stw	zero,1296(sp)
 8005b50:	d8014715 	stw	zero,1308(sp)
 8005b54:	dd400c15 	stw	r21,48(sp)
 8005b58:	d8000e15 	stw	zero,56(sp)
 8005b5c:	d8000d15 	stw	zero,52(sp)
 8005b60:	b8800007 	ldb	r2,0(r23)
 8005b64:	10001926 	beq	r2,zero,8005bcc <___vfprintf_internal_r+0x1dc>
 8005b68:	00c00944 	movi	r3,37
 8005b6c:	10c01726 	beq	r2,r3,8005bcc <___vfprintf_internal_r+0x1dc>
 8005b70:	b821883a 	mov	r16,r23
 8005b74:	00000106 	br	8005b7c <___vfprintf_internal_r+0x18c>
 8005b78:	10c00326 	beq	r2,r3,8005b88 <___vfprintf_internal_r+0x198>
 8005b7c:	84000044 	addi	r16,r16,1
 8005b80:	80800007 	ldb	r2,0(r16)
 8005b84:	103ffc1e 	bne	r2,zero,8005b78 <___vfprintf_internal_r+0x188>
 8005b88:	85e7c83a 	sub	r19,r16,r23
 8005b8c:	98000e26 	beq	r19,zero,8005bc8 <___vfprintf_internal_r+0x1d8>
 8005b90:	dc800e17 	ldw	r18,56(sp)
 8005b94:	dc400d17 	ldw	r17,52(sp)
 8005b98:	008001c4 	movi	r2,7
 8005b9c:	94e5883a 	add	r18,r18,r19
 8005ba0:	8c400044 	addi	r17,r17,1
 8005ba4:	adc00015 	stw	r23,0(r21)
 8005ba8:	dc800e15 	stw	r18,56(sp)
 8005bac:	acc00115 	stw	r19,4(r21)
 8005bb0:	dc400d15 	stw	r17,52(sp)
 8005bb4:	14428b16 	blt	r2,r17,80065e4 <___vfprintf_internal_r+0xbf4>
 8005bb8:	ad400204 	addi	r21,r21,8
 8005bbc:	d9014b17 	ldw	r4,1324(sp)
 8005bc0:	24c9883a 	add	r4,r4,r19
 8005bc4:	d9014b15 	stw	r4,1324(sp)
 8005bc8:	802f883a 	mov	r23,r16
 8005bcc:	b8800007 	ldb	r2,0(r23)
 8005bd0:	10013c26 	beq	r2,zero,80060c4 <___vfprintf_internal_r+0x6d4>
 8005bd4:	bdc00044 	addi	r23,r23,1
 8005bd8:	d8000405 	stb	zero,16(sp)
 8005bdc:	b8c00007 	ldb	r3,0(r23)
 8005be0:	04ffffc4 	movi	r19,-1
 8005be4:	d8014c15 	stw	zero,1328(sp)
 8005be8:	d8014a15 	stw	zero,1320(sp)
 8005bec:	d8c14d15 	stw	r3,1332(sp)
 8005bf0:	bdc00044 	addi	r23,r23,1
 8005bf4:	d9414d17 	ldw	r5,1332(sp)
 8005bf8:	00801604 	movi	r2,88
 8005bfc:	28fff804 	addi	r3,r5,-32
 8005c00:	10c06036 	bltu	r2,r3,8005d84 <___vfprintf_internal_r+0x394>
 8005c04:	18c5883a 	add	r2,r3,r3
 8005c08:	1085883a 	add	r2,r2,r2
 8005c0c:	00c20034 	movhi	r3,2048
 8005c10:	18d70804 	addi	r3,r3,23584
 8005c14:	10c5883a 	add	r2,r2,r3
 8005c18:	11000017 	ldw	r4,0(r2)
 8005c1c:	2000683a 	jmp	r4
 8005c20:	08006b94 	ori	zero,at,430
 8005c24:	08005d84 	addi	zero,at,374
 8005c28:	08005d84 	addi	zero,at,374
 8005c2c:	08006b80 	call	8006b8 <__alt_mem_onchip_memory2_1+0x7fc6b8>
 8005c30:	08005d84 	addi	zero,at,374
 8005c34:	08005d84 	addi	zero,at,374
 8005c38:	08005d84 	addi	zero,at,374
 8005c3c:	08005d84 	addi	zero,at,374
 8005c40:	08005d84 	addi	zero,at,374
 8005c44:	08005d84 	addi	zero,at,374
 8005c48:	08006960 	cmpeqi	zero,at,421
 8005c4c:	08006b70 	cmpltui	zero,at,429
 8005c50:	08005d84 	addi	zero,at,374
 8005c54:	08006978 	rdprs	zero,at,421
 8005c58:	08006c0c 	andi	zero,at,432
 8005c5c:	08005d84 	addi	zero,at,374
 8005c60:	08006bf8 	rdprs	zero,at,431
 8005c64:	08006bc0 	call	8006bc <__alt_mem_onchip_memory2_1+0x7fc6bc>
 8005c68:	08006bc0 	call	8006bc <__alt_mem_onchip_memory2_1+0x7fc6bc>
 8005c6c:	08006bc0 	call	8006bc <__alt_mem_onchip_memory2_1+0x7fc6bc>
 8005c70:	08006bc0 	call	8006bc <__alt_mem_onchip_memory2_1+0x7fc6bc>
 8005c74:	08006bc0 	call	8006bc <__alt_mem_onchip_memory2_1+0x7fc6bc>
 8005c78:	08006bc0 	call	8006bc <__alt_mem_onchip_memory2_1+0x7fc6bc>
 8005c7c:	08006bc0 	call	8006bc <__alt_mem_onchip_memory2_1+0x7fc6bc>
 8005c80:	08006bc0 	call	8006bc <__alt_mem_onchip_memory2_1+0x7fc6bc>
 8005c84:	08006bc0 	call	8006bc <__alt_mem_onchip_memory2_1+0x7fc6bc>
 8005c88:	08005d84 	addi	zero,at,374
 8005c8c:	08005d84 	addi	zero,at,374
 8005c90:	08005d84 	addi	zero,at,374
 8005c94:	08005d84 	addi	zero,at,374
 8005c98:	08005d84 	addi	zero,at,374
 8005c9c:	08005d84 	addi	zero,at,374
 8005ca0:	08005d84 	addi	zero,at,374
 8005ca4:	08005d84 	addi	zero,at,374
 8005ca8:	08005d84 	addi	zero,at,374
 8005cac:	08005d84 	addi	zero,at,374
 8005cb0:	080063dc 	xori	zero,at,399
 8005cb4:	08006a48 	cmpgei	zero,at,425
 8005cb8:	08005d84 	addi	zero,at,374
 8005cbc:	08006a48 	cmpgei	zero,at,425
 8005cc0:	08005d84 	addi	zero,at,374
 8005cc4:	08005d84 	addi	zero,at,374
 8005cc8:	08005d84 	addi	zero,at,374
 8005ccc:	08005d84 	addi	zero,at,374
 8005cd0:	08006bac 	andhi	zero,at,430
 8005cd4:	08005d84 	addi	zero,at,374
 8005cd8:	08005d84 	addi	zero,at,374
 8005cdc:	08006490 	cmplti	zero,at,402
 8005ce0:	08005d84 	addi	zero,at,374
 8005ce4:	08005d84 	addi	zero,at,374
 8005ce8:	08005d84 	addi	zero,at,374
 8005cec:	08005d84 	addi	zero,at,374
 8005cf0:	08005d84 	addi	zero,at,374
 8005cf4:	080064dc 	xori	zero,at,403
 8005cf8:	08005d84 	addi	zero,at,374
 8005cfc:	08005d84 	addi	zero,at,374
 8005d00:	08006afc 	xorhi	zero,at,427
 8005d04:	08005d84 	addi	zero,at,374
 8005d08:	08005d84 	addi	zero,at,374
 8005d0c:	08005d84 	addi	zero,at,374
 8005d10:	08005d84 	addi	zero,at,374
 8005d14:	08005d84 	addi	zero,at,374
 8005d18:	08005d84 	addi	zero,at,374
 8005d1c:	08005d84 	addi	zero,at,374
 8005d20:	08005d84 	addi	zero,at,374
 8005d24:	08005d84 	addi	zero,at,374
 8005d28:	08005d84 	addi	zero,at,374
 8005d2c:	08006ad0 	cmplti	zero,at,427
 8005d30:	080063e8 	cmpgeui	zero,at,399
 8005d34:	08006a48 	cmpgei	zero,at,425
 8005d38:	08006a48 	cmpgei	zero,at,425
 8005d3c:	08006a48 	cmpgei	zero,at,425
 8005d40:	08006a34 	orhi	zero,at,424
 8005d44:	080063e8 	cmpgeui	zero,at,399
 8005d48:	08005d84 	addi	zero,at,374
 8005d4c:	08005d84 	addi	zero,at,374
 8005d50:	080069bc 	xorhi	zero,at,422
 8005d54:	08005d84 	addi	zero,at,374
 8005d58:	0800698c 	andi	zero,at,422
 8005d5c:	0800649c 	xori	zero,at,402
 8005d60:	080069ec 	andhi	zero,at,423
 8005d64:	080069d8 	cmpnei	zero,at,423
 8005d68:	08005d84 	addi	zero,at,374
 8005d6c:	08006c68 	cmpgeui	zero,at,433
 8005d70:	08005d84 	addi	zero,at,374
 8005d74:	080064e8 	cmpgeui	zero,at,403
 8005d78:	08005d84 	addi	zero,at,374
 8005d7c:	08005d84 	addi	zero,at,374
 8005d80:	08006b60 	cmpeqi	zero,at,429
 8005d84:	d9014d17 	ldw	r4,1332(sp)
 8005d88:	2000ce26 	beq	r4,zero,80060c4 <___vfprintf_internal_r+0x6d4>
 8005d8c:	01400044 	movi	r5,1
 8005d90:	d9800f04 	addi	r6,sp,60
 8005d94:	d9c14015 	stw	r7,1280(sp)
 8005d98:	d9414515 	stw	r5,1300(sp)
 8005d9c:	d9814115 	stw	r6,1284(sp)
 8005da0:	280f883a 	mov	r7,r5
 8005da4:	d9000f05 	stb	r4,60(sp)
 8005da8:	d8000405 	stb	zero,16(sp)
 8005dac:	d8014615 	stw	zero,1304(sp)
 8005db0:	d8c14c17 	ldw	r3,1328(sp)
 8005db4:	1880008c 	andi	r2,r3,2
 8005db8:	1005003a 	cmpeq	r2,r2,zero
 8005dbc:	d8815015 	stw	r2,1344(sp)
 8005dc0:	1000031e 	bne	r2,zero,8005dd0 <___vfprintf_internal_r+0x3e0>
 8005dc4:	d9014517 	ldw	r4,1300(sp)
 8005dc8:	21000084 	addi	r4,r4,2
 8005dcc:	d9014515 	stw	r4,1300(sp)
 8005dd0:	d9414c17 	ldw	r5,1328(sp)
 8005dd4:	2940210c 	andi	r5,r5,132
 8005dd8:	d9414e15 	stw	r5,1336(sp)
 8005ddc:	28002d1e 	bne	r5,zero,8005e94 <___vfprintf_internal_r+0x4a4>
 8005de0:	d9814a17 	ldw	r6,1320(sp)
 8005de4:	d8814517 	ldw	r2,1300(sp)
 8005de8:	30a1c83a 	sub	r16,r6,r2
 8005dec:	0400290e 	bge	zero,r16,8005e94 <___vfprintf_internal_r+0x4a4>
 8005df0:	00800404 	movi	r2,16
 8005df4:	1404580e 	bge	r2,r16,8006f58 <___vfprintf_internal_r+0x1568>
 8005df8:	dc800e17 	ldw	r18,56(sp)
 8005dfc:	dc400d17 	ldw	r17,52(sp)
 8005e00:	1027883a 	mov	r19,r2
 8005e04:	070200b4 	movhi	fp,2050
 8005e08:	e7205e84 	addi	fp,fp,-32390
 8005e0c:	050001c4 	movi	r20,7
 8005e10:	00000306 	br	8005e20 <___vfprintf_internal_r+0x430>
 8005e14:	843ffc04 	addi	r16,r16,-16
 8005e18:	ad400204 	addi	r21,r21,8
 8005e1c:	9c00130e 	bge	r19,r16,8005e6c <___vfprintf_internal_r+0x47c>
 8005e20:	94800404 	addi	r18,r18,16
 8005e24:	8c400044 	addi	r17,r17,1
 8005e28:	af000015 	stw	fp,0(r21)
 8005e2c:	acc00115 	stw	r19,4(r21)
 8005e30:	dc800e15 	stw	r18,56(sp)
 8005e34:	dc400d15 	stw	r17,52(sp)
 8005e38:	a47ff60e 	bge	r20,r17,8005e14 <___vfprintf_internal_r+0x424>
 8005e3c:	d9014f17 	ldw	r4,1340(sp)
 8005e40:	b00b883a 	mov	r5,r22
 8005e44:	d9800c04 	addi	r6,sp,48
 8005e48:	d9c15115 	stw	r7,1348(sp)
 8005e4c:	80059980 	call	8005998 <__sprint_r>
 8005e50:	d9c15117 	ldw	r7,1348(sp)
 8005e54:	10009e1e 	bne	r2,zero,80060d0 <___vfprintf_internal_r+0x6e0>
 8005e58:	843ffc04 	addi	r16,r16,-16
 8005e5c:	dc800e17 	ldw	r18,56(sp)
 8005e60:	dc400d17 	ldw	r17,52(sp)
 8005e64:	dd401904 	addi	r21,sp,100
 8005e68:	9c3fed16 	blt	r19,r16,8005e20 <___vfprintf_internal_r+0x430>
 8005e6c:	9425883a 	add	r18,r18,r16
 8005e70:	8c400044 	addi	r17,r17,1
 8005e74:	008001c4 	movi	r2,7
 8005e78:	af000015 	stw	fp,0(r21)
 8005e7c:	ac000115 	stw	r16,4(r21)
 8005e80:	dc800e15 	stw	r18,56(sp)
 8005e84:	dc400d15 	stw	r17,52(sp)
 8005e88:	1441f516 	blt	r2,r17,8006660 <___vfprintf_internal_r+0xc70>
 8005e8c:	ad400204 	addi	r21,r21,8
 8005e90:	00000206 	br	8005e9c <___vfprintf_internal_r+0x4ac>
 8005e94:	dc800e17 	ldw	r18,56(sp)
 8005e98:	dc400d17 	ldw	r17,52(sp)
 8005e9c:	d8800407 	ldb	r2,16(sp)
 8005ea0:	10000b26 	beq	r2,zero,8005ed0 <___vfprintf_internal_r+0x4e0>
 8005ea4:	00800044 	movi	r2,1
 8005ea8:	94800044 	addi	r18,r18,1
 8005eac:	8c400044 	addi	r17,r17,1
 8005eb0:	a8800115 	stw	r2,4(r21)
 8005eb4:	d8c00404 	addi	r3,sp,16
 8005eb8:	008001c4 	movi	r2,7
 8005ebc:	a8c00015 	stw	r3,0(r21)
 8005ec0:	dc800e15 	stw	r18,56(sp)
 8005ec4:	dc400d15 	stw	r17,52(sp)
 8005ec8:	1441da16 	blt	r2,r17,8006634 <___vfprintf_internal_r+0xc44>
 8005ecc:	ad400204 	addi	r21,r21,8
 8005ed0:	d9015017 	ldw	r4,1344(sp)
 8005ed4:	20000b1e 	bne	r4,zero,8005f04 <___vfprintf_internal_r+0x514>
 8005ed8:	d8800444 	addi	r2,sp,17
 8005edc:	94800084 	addi	r18,r18,2
 8005ee0:	8c400044 	addi	r17,r17,1
 8005ee4:	a8800015 	stw	r2,0(r21)
 8005ee8:	00c00084 	movi	r3,2
 8005eec:	008001c4 	movi	r2,7
 8005ef0:	a8c00115 	stw	r3,4(r21)
 8005ef4:	dc800e15 	stw	r18,56(sp)
 8005ef8:	dc400d15 	stw	r17,52(sp)
 8005efc:	1441c216 	blt	r2,r17,8006608 <___vfprintf_internal_r+0xc18>
 8005f00:	ad400204 	addi	r21,r21,8
 8005f04:	d9414e17 	ldw	r5,1336(sp)
 8005f08:	00802004 	movi	r2,128
 8005f0c:	2880b126 	beq	r5,r2,80061d4 <___vfprintf_internal_r+0x7e4>
 8005f10:	d8c14617 	ldw	r3,1304(sp)
 8005f14:	19e1c83a 	sub	r16,r3,r7
 8005f18:	0400260e 	bge	zero,r16,8005fb4 <___vfprintf_internal_r+0x5c4>
 8005f1c:	00800404 	movi	r2,16
 8005f20:	1403c90e 	bge	r2,r16,8006e48 <___vfprintf_internal_r+0x1458>
 8005f24:	1027883a 	mov	r19,r2
 8005f28:	070200b4 	movhi	fp,2050
 8005f2c:	e7205a84 	addi	fp,fp,-32406
 8005f30:	050001c4 	movi	r20,7
 8005f34:	00000306 	br	8005f44 <___vfprintf_internal_r+0x554>
 8005f38:	843ffc04 	addi	r16,r16,-16
 8005f3c:	ad400204 	addi	r21,r21,8
 8005f40:	9c00130e 	bge	r19,r16,8005f90 <___vfprintf_internal_r+0x5a0>
 8005f44:	94800404 	addi	r18,r18,16
 8005f48:	8c400044 	addi	r17,r17,1
 8005f4c:	af000015 	stw	fp,0(r21)
 8005f50:	acc00115 	stw	r19,4(r21)
 8005f54:	dc800e15 	stw	r18,56(sp)
 8005f58:	dc400d15 	stw	r17,52(sp)
 8005f5c:	a47ff60e 	bge	r20,r17,8005f38 <___vfprintf_internal_r+0x548>
 8005f60:	d9014f17 	ldw	r4,1340(sp)
 8005f64:	b00b883a 	mov	r5,r22
 8005f68:	d9800c04 	addi	r6,sp,48
 8005f6c:	d9c15115 	stw	r7,1348(sp)
 8005f70:	80059980 	call	8005998 <__sprint_r>
 8005f74:	d9c15117 	ldw	r7,1348(sp)
 8005f78:	1000551e 	bne	r2,zero,80060d0 <___vfprintf_internal_r+0x6e0>
 8005f7c:	843ffc04 	addi	r16,r16,-16
 8005f80:	dc800e17 	ldw	r18,56(sp)
 8005f84:	dc400d17 	ldw	r17,52(sp)
 8005f88:	dd401904 	addi	r21,sp,100
 8005f8c:	9c3fed16 	blt	r19,r16,8005f44 <___vfprintf_internal_r+0x554>
 8005f90:	9425883a 	add	r18,r18,r16
 8005f94:	8c400044 	addi	r17,r17,1
 8005f98:	008001c4 	movi	r2,7
 8005f9c:	af000015 	stw	fp,0(r21)
 8005fa0:	ac000115 	stw	r16,4(r21)
 8005fa4:	dc800e15 	stw	r18,56(sp)
 8005fa8:	dc400d15 	stw	r17,52(sp)
 8005fac:	14418216 	blt	r2,r17,80065b8 <___vfprintf_internal_r+0xbc8>
 8005fb0:	ad400204 	addi	r21,r21,8
 8005fb4:	d9014c17 	ldw	r4,1328(sp)
 8005fb8:	2080400c 	andi	r2,r4,256
 8005fbc:	10004a1e 	bne	r2,zero,80060e8 <___vfprintf_internal_r+0x6f8>
 8005fc0:	d9414117 	ldw	r5,1284(sp)
 8005fc4:	91e5883a 	add	r18,r18,r7
 8005fc8:	8c400044 	addi	r17,r17,1
 8005fcc:	008001c4 	movi	r2,7
 8005fd0:	a9400015 	stw	r5,0(r21)
 8005fd4:	a9c00115 	stw	r7,4(r21)
 8005fd8:	dc800e15 	stw	r18,56(sp)
 8005fdc:	dc400d15 	stw	r17,52(sp)
 8005fe0:	14416716 	blt	r2,r17,8006580 <___vfprintf_internal_r+0xb90>
 8005fe4:	a8c00204 	addi	r3,r21,8
 8005fe8:	d9814c17 	ldw	r6,1328(sp)
 8005fec:	3080010c 	andi	r2,r6,4
 8005ff0:	10002826 	beq	r2,zero,8006094 <___vfprintf_internal_r+0x6a4>
 8005ff4:	d8814a17 	ldw	r2,1320(sp)
 8005ff8:	d9014517 	ldw	r4,1300(sp)
 8005ffc:	1121c83a 	sub	r16,r2,r4
 8006000:	0400240e 	bge	zero,r16,8006094 <___vfprintf_internal_r+0x6a4>
 8006004:	00800404 	movi	r2,16
 8006008:	14044f0e 	bge	r2,r16,8007148 <___vfprintf_internal_r+0x1758>
 800600c:	dc400d17 	ldw	r17,52(sp)
 8006010:	1027883a 	mov	r19,r2
 8006014:	070200b4 	movhi	fp,2050
 8006018:	e7205e84 	addi	fp,fp,-32390
 800601c:	050001c4 	movi	r20,7
 8006020:	00000306 	br	8006030 <___vfprintf_internal_r+0x640>
 8006024:	843ffc04 	addi	r16,r16,-16
 8006028:	18c00204 	addi	r3,r3,8
 800602c:	9c00110e 	bge	r19,r16,8006074 <___vfprintf_internal_r+0x684>
 8006030:	94800404 	addi	r18,r18,16
 8006034:	8c400044 	addi	r17,r17,1
 8006038:	1f000015 	stw	fp,0(r3)
 800603c:	1cc00115 	stw	r19,4(r3)
 8006040:	dc800e15 	stw	r18,56(sp)
 8006044:	dc400d15 	stw	r17,52(sp)
 8006048:	a47ff60e 	bge	r20,r17,8006024 <___vfprintf_internal_r+0x634>
 800604c:	d9014f17 	ldw	r4,1340(sp)
 8006050:	b00b883a 	mov	r5,r22
 8006054:	d9800c04 	addi	r6,sp,48
 8006058:	80059980 	call	8005998 <__sprint_r>
 800605c:	10001c1e 	bne	r2,zero,80060d0 <___vfprintf_internal_r+0x6e0>
 8006060:	843ffc04 	addi	r16,r16,-16
 8006064:	dc800e17 	ldw	r18,56(sp)
 8006068:	dc400d17 	ldw	r17,52(sp)
 800606c:	d8c01904 	addi	r3,sp,100
 8006070:	9c3fef16 	blt	r19,r16,8006030 <___vfprintf_internal_r+0x640>
 8006074:	9425883a 	add	r18,r18,r16
 8006078:	8c400044 	addi	r17,r17,1
 800607c:	008001c4 	movi	r2,7
 8006080:	1f000015 	stw	fp,0(r3)
 8006084:	1c000115 	stw	r16,4(r3)
 8006088:	dc800e15 	stw	r18,56(sp)
 800608c:	dc400d15 	stw	r17,52(sp)
 8006090:	1440cb16 	blt	r2,r17,80063c0 <___vfprintf_internal_r+0x9d0>
 8006094:	d8814a17 	ldw	r2,1320(sp)
 8006098:	d9414517 	ldw	r5,1300(sp)
 800609c:	1140010e 	bge	r2,r5,80060a4 <___vfprintf_internal_r+0x6b4>
 80060a0:	2805883a 	mov	r2,r5
 80060a4:	d9814b17 	ldw	r6,1324(sp)
 80060a8:	308d883a 	add	r6,r6,r2
 80060ac:	d9814b15 	stw	r6,1324(sp)
 80060b0:	90013b1e 	bne	r18,zero,80065a0 <___vfprintf_internal_r+0xbb0>
 80060b4:	d9c14017 	ldw	r7,1280(sp)
 80060b8:	dd401904 	addi	r21,sp,100
 80060bc:	d8000d15 	stw	zero,52(sp)
 80060c0:	003ea706 	br	8005b60 <___vfprintf_internal_r+0x170>
 80060c4:	d8800e17 	ldw	r2,56(sp)
 80060c8:	10053f1e 	bne	r2,zero,80075c8 <___vfprintf_internal_r+0x1bd8>
 80060cc:	d8000d15 	stw	zero,52(sp)
 80060d0:	b080030b 	ldhu	r2,12(r22)
 80060d4:	1080100c 	andi	r2,r2,64
 80060d8:	103e8726 	beq	r2,zero,8005af8 <___vfprintf_internal_r+0x108>
 80060dc:	00bfffc4 	movi	r2,-1
 80060e0:	d8814b15 	stw	r2,1324(sp)
 80060e4:	003e8406 	br	8005af8 <___vfprintf_internal_r+0x108>
 80060e8:	d9814d17 	ldw	r6,1332(sp)
 80060ec:	00801944 	movi	r2,101
 80060f0:	11806e16 	blt	r2,r6,80062ac <___vfprintf_internal_r+0x8bc>
 80060f4:	d9414717 	ldw	r5,1308(sp)
 80060f8:	00c00044 	movi	r3,1
 80060fc:	1943430e 	bge	r3,r5,8006e0c <___vfprintf_internal_r+0x141c>
 8006100:	d8814117 	ldw	r2,1284(sp)
 8006104:	94800044 	addi	r18,r18,1
 8006108:	8c400044 	addi	r17,r17,1
 800610c:	a8800015 	stw	r2,0(r21)
 8006110:	008001c4 	movi	r2,7
 8006114:	a8c00115 	stw	r3,4(r21)
 8006118:	dc800e15 	stw	r18,56(sp)
 800611c:	dc400d15 	stw	r17,52(sp)
 8006120:	1441ca16 	blt	r2,r17,800684c <___vfprintf_internal_r+0xe5c>
 8006124:	a8c00204 	addi	r3,r21,8
 8006128:	d9014917 	ldw	r4,1316(sp)
 800612c:	00800044 	movi	r2,1
 8006130:	94800044 	addi	r18,r18,1
 8006134:	8c400044 	addi	r17,r17,1
 8006138:	18800115 	stw	r2,4(r3)
 800613c:	008001c4 	movi	r2,7
 8006140:	19000015 	stw	r4,0(r3)
 8006144:	dc800e15 	stw	r18,56(sp)
 8006148:	dc400d15 	stw	r17,52(sp)
 800614c:	1441b616 	blt	r2,r17,8006828 <___vfprintf_internal_r+0xe38>
 8006150:	1cc00204 	addi	r19,r3,8
 8006154:	d9014217 	ldw	r4,1288(sp)
 8006158:	d9414317 	ldw	r5,1292(sp)
 800615c:	000d883a 	mov	r6,zero
 8006160:	000f883a 	mov	r7,zero
 8006164:	800d7800 	call	800d780 <__nedf2>
 8006168:	10017426 	beq	r2,zero,800673c <___vfprintf_internal_r+0xd4c>
 800616c:	d9414717 	ldw	r5,1308(sp)
 8006170:	d9814117 	ldw	r6,1284(sp)
 8006174:	8c400044 	addi	r17,r17,1
 8006178:	2c85883a 	add	r2,r5,r18
 800617c:	14bfffc4 	addi	r18,r2,-1
 8006180:	28bfffc4 	addi	r2,r5,-1
 8006184:	30c00044 	addi	r3,r6,1
 8006188:	98800115 	stw	r2,4(r19)
 800618c:	008001c4 	movi	r2,7
 8006190:	98c00015 	stw	r3,0(r19)
 8006194:	dc800e15 	stw	r18,56(sp)
 8006198:	dc400d15 	stw	r17,52(sp)
 800619c:	14418e16 	blt	r2,r17,80067d8 <___vfprintf_internal_r+0xde8>
 80061a0:	9cc00204 	addi	r19,r19,8
 80061a4:	d9414817 	ldw	r5,1312(sp)
 80061a8:	d8800804 	addi	r2,sp,32
 80061ac:	8c400044 	addi	r17,r17,1
 80061b0:	9165883a 	add	r18,r18,r5
 80061b4:	98800015 	stw	r2,0(r19)
 80061b8:	008001c4 	movi	r2,7
 80061bc:	99400115 	stw	r5,4(r19)
 80061c0:	dc800e15 	stw	r18,56(sp)
 80061c4:	dc400d15 	stw	r17,52(sp)
 80061c8:	1440ed16 	blt	r2,r17,8006580 <___vfprintf_internal_r+0xb90>
 80061cc:	98c00204 	addi	r3,r19,8
 80061d0:	003f8506 	br	8005fe8 <___vfprintf_internal_r+0x5f8>
 80061d4:	d9814a17 	ldw	r6,1320(sp)
 80061d8:	d8814517 	ldw	r2,1300(sp)
 80061dc:	30a1c83a 	sub	r16,r6,r2
 80061e0:	043f4b0e 	bge	zero,r16,8005f10 <___vfprintf_internal_r+0x520>
 80061e4:	00800404 	movi	r2,16
 80061e8:	1404340e 	bge	r2,r16,80072bc <___vfprintf_internal_r+0x18cc>
 80061ec:	1027883a 	mov	r19,r2
 80061f0:	070200b4 	movhi	fp,2050
 80061f4:	e7205a84 	addi	fp,fp,-32406
 80061f8:	050001c4 	movi	r20,7
 80061fc:	00000306 	br	800620c <___vfprintf_internal_r+0x81c>
 8006200:	843ffc04 	addi	r16,r16,-16
 8006204:	ad400204 	addi	r21,r21,8
 8006208:	9c00130e 	bge	r19,r16,8006258 <___vfprintf_internal_r+0x868>
 800620c:	94800404 	addi	r18,r18,16
 8006210:	8c400044 	addi	r17,r17,1
 8006214:	af000015 	stw	fp,0(r21)
 8006218:	acc00115 	stw	r19,4(r21)
 800621c:	dc800e15 	stw	r18,56(sp)
 8006220:	dc400d15 	stw	r17,52(sp)
 8006224:	a47ff60e 	bge	r20,r17,8006200 <___vfprintf_internal_r+0x810>
 8006228:	d9014f17 	ldw	r4,1340(sp)
 800622c:	b00b883a 	mov	r5,r22
 8006230:	d9800c04 	addi	r6,sp,48
 8006234:	d9c15115 	stw	r7,1348(sp)
 8006238:	80059980 	call	8005998 <__sprint_r>
 800623c:	d9c15117 	ldw	r7,1348(sp)
 8006240:	103fa31e 	bne	r2,zero,80060d0 <___vfprintf_internal_r+0x6e0>
 8006244:	843ffc04 	addi	r16,r16,-16
 8006248:	dc800e17 	ldw	r18,56(sp)
 800624c:	dc400d17 	ldw	r17,52(sp)
 8006250:	dd401904 	addi	r21,sp,100
 8006254:	9c3fed16 	blt	r19,r16,800620c <___vfprintf_internal_r+0x81c>
 8006258:	9425883a 	add	r18,r18,r16
 800625c:	8c400044 	addi	r17,r17,1
 8006260:	008001c4 	movi	r2,7
 8006264:	af000015 	stw	fp,0(r21)
 8006268:	ac000115 	stw	r16,4(r21)
 800626c:	dc800e15 	stw	r18,56(sp)
 8006270:	dc400d15 	stw	r17,52(sp)
 8006274:	14416116 	blt	r2,r17,80067fc <___vfprintf_internal_r+0xe0c>
 8006278:	ad400204 	addi	r21,r21,8
 800627c:	003f2406 	br	8005f10 <___vfprintf_internal_r+0x520>
 8006280:	d9014f17 	ldw	r4,1340(sp)
 8006284:	80095480 	call	8009548 <__sinit>
 8006288:	d9c15117 	ldw	r7,1348(sp)
 800628c:	003def06 	br	8005a4c <___vfprintf_internal_r+0x5c>
 8006290:	d9014f17 	ldw	r4,1340(sp)
 8006294:	b00b883a 	mov	r5,r22
 8006298:	d9c15115 	stw	r7,1348(sp)
 800629c:	80079380 	call	8007938 <__swsetup_r>
 80062a0:	d9c15117 	ldw	r7,1348(sp)
 80062a4:	103dee26 	beq	r2,zero,8005a60 <___vfprintf_internal_r+0x70>
 80062a8:	003f8c06 	br	80060dc <___vfprintf_internal_r+0x6ec>
 80062ac:	d9014217 	ldw	r4,1288(sp)
 80062b0:	d9414317 	ldw	r5,1292(sp)
 80062b4:	000d883a 	mov	r6,zero
 80062b8:	000f883a 	mov	r7,zero
 80062bc:	800d6f80 	call	800d6f8 <__eqdf2>
 80062c0:	1000f21e 	bne	r2,zero,800668c <___vfprintf_internal_r+0xc9c>
 80062c4:	00820074 	movhi	r2,2049
 80062c8:	109cd604 	addi	r2,r2,29528
 80062cc:	94800044 	addi	r18,r18,1
 80062d0:	8c400044 	addi	r17,r17,1
 80062d4:	a8800015 	stw	r2,0(r21)
 80062d8:	00c00044 	movi	r3,1
 80062dc:	008001c4 	movi	r2,7
 80062e0:	a8c00115 	stw	r3,4(r21)
 80062e4:	dc800e15 	stw	r18,56(sp)
 80062e8:	dc400d15 	stw	r17,52(sp)
 80062ec:	1442fa16 	blt	r2,r17,8006ed8 <___vfprintf_internal_r+0x14e8>
 80062f0:	a8c00204 	addi	r3,r21,8
 80062f4:	d8800517 	ldw	r2,20(sp)
 80062f8:	d9014717 	ldw	r4,1308(sp)
 80062fc:	11015c0e 	bge	r2,r4,8006870 <___vfprintf_internal_r+0xe80>
 8006300:	dc400d17 	ldw	r17,52(sp)
 8006304:	d9814917 	ldw	r6,1316(sp)
 8006308:	00800044 	movi	r2,1
 800630c:	94800044 	addi	r18,r18,1
 8006310:	8c400044 	addi	r17,r17,1
 8006314:	18800115 	stw	r2,4(r3)
 8006318:	008001c4 	movi	r2,7
 800631c:	19800015 	stw	r6,0(r3)
 8006320:	dc800e15 	stw	r18,56(sp)
 8006324:	dc400d15 	stw	r17,52(sp)
 8006328:	14431016 	blt	r2,r17,8006f6c <___vfprintf_internal_r+0x157c>
 800632c:	18c00204 	addi	r3,r3,8
 8006330:	d8814717 	ldw	r2,1308(sp)
 8006334:	143fffc4 	addi	r16,r2,-1
 8006338:	043f2b0e 	bge	zero,r16,8005fe8 <___vfprintf_internal_r+0x5f8>
 800633c:	00800404 	movi	r2,16
 8006340:	1402a20e 	bge	r2,r16,8006dcc <___vfprintf_internal_r+0x13dc>
 8006344:	dc400d17 	ldw	r17,52(sp)
 8006348:	1027883a 	mov	r19,r2
 800634c:	070200b4 	movhi	fp,2050
 8006350:	e7205a84 	addi	fp,fp,-32406
 8006354:	050001c4 	movi	r20,7
 8006358:	00000306 	br	8006368 <___vfprintf_internal_r+0x978>
 800635c:	18c00204 	addi	r3,r3,8
 8006360:	843ffc04 	addi	r16,r16,-16
 8006364:	9c029c0e 	bge	r19,r16,8006dd8 <___vfprintf_internal_r+0x13e8>
 8006368:	94800404 	addi	r18,r18,16
 800636c:	8c400044 	addi	r17,r17,1
 8006370:	1f000015 	stw	fp,0(r3)
 8006374:	1cc00115 	stw	r19,4(r3)
 8006378:	dc800e15 	stw	r18,56(sp)
 800637c:	dc400d15 	stw	r17,52(sp)
 8006380:	a47ff60e 	bge	r20,r17,800635c <___vfprintf_internal_r+0x96c>
 8006384:	d9014f17 	ldw	r4,1340(sp)
 8006388:	b00b883a 	mov	r5,r22
 800638c:	d9800c04 	addi	r6,sp,48
 8006390:	80059980 	call	8005998 <__sprint_r>
 8006394:	103f4e1e 	bne	r2,zero,80060d0 <___vfprintf_internal_r+0x6e0>
 8006398:	dc800e17 	ldw	r18,56(sp)
 800639c:	dc400d17 	ldw	r17,52(sp)
 80063a0:	d8c01904 	addi	r3,sp,100
 80063a4:	003fee06 	br	8006360 <___vfprintf_internal_r+0x970>
 80063a8:	d8802c0b 	ldhu	r2,176(sp)
 80063ac:	00ffffc4 	movi	r3,-1
 80063b0:	d8c14b15 	stw	r3,1324(sp)
 80063b4:	1080100c 	andi	r2,r2,64
 80063b8:	103dcc1e 	bne	r2,zero,8005aec <___vfprintf_internal_r+0xfc>
 80063bc:	003dce06 	br	8005af8 <___vfprintf_internal_r+0x108>
 80063c0:	d9014f17 	ldw	r4,1340(sp)
 80063c4:	b00b883a 	mov	r5,r22
 80063c8:	d9800c04 	addi	r6,sp,48
 80063cc:	80059980 	call	8005998 <__sprint_r>
 80063d0:	103f3f1e 	bne	r2,zero,80060d0 <___vfprintf_internal_r+0x6e0>
 80063d4:	dc800e17 	ldw	r18,56(sp)
 80063d8:	003f2e06 	br	8006094 <___vfprintf_internal_r+0x6a4>
 80063dc:	d9414c17 	ldw	r5,1328(sp)
 80063e0:	29400414 	ori	r5,r5,16
 80063e4:	d9414c15 	stw	r5,1328(sp)
 80063e8:	d9814c17 	ldw	r6,1328(sp)
 80063ec:	3080080c 	andi	r2,r6,32
 80063f0:	10014f1e 	bne	r2,zero,8006930 <___vfprintf_internal_r+0xf40>
 80063f4:	d8c14c17 	ldw	r3,1328(sp)
 80063f8:	1880040c 	andi	r2,r3,16
 80063fc:	1002ea1e 	bne	r2,zero,8006fa8 <___vfprintf_internal_r+0x15b8>
 8006400:	d9014c17 	ldw	r4,1328(sp)
 8006404:	2080100c 	andi	r2,r4,64
 8006408:	1002e726 	beq	r2,zero,8006fa8 <___vfprintf_internal_r+0x15b8>
 800640c:	3880000f 	ldh	r2,0(r7)
 8006410:	39c00104 	addi	r7,r7,4
 8006414:	d9c14015 	stw	r7,1280(sp)
 8006418:	1023d7fa 	srai	r17,r2,31
 800641c:	1021883a 	mov	r16,r2
 8006420:	88037216 	blt	r17,zero,80071ec <___vfprintf_internal_r+0x17fc>
 8006424:	01000044 	movi	r4,1
 8006428:	98000416 	blt	r19,zero,800643c <___vfprintf_internal_r+0xa4c>
 800642c:	d8c14c17 	ldw	r3,1328(sp)
 8006430:	00bfdfc4 	movi	r2,-129
 8006434:	1886703a 	and	r3,r3,r2
 8006438:	d8c14c15 	stw	r3,1328(sp)
 800643c:	8444b03a 	or	r2,r16,r17
 8006440:	1002261e 	bne	r2,zero,8006cdc <___vfprintf_internal_r+0x12ec>
 8006444:	9802251e 	bne	r19,zero,8006cdc <___vfprintf_internal_r+0x12ec>
 8006448:	20803fcc 	andi	r2,r4,255
 800644c:	10029b26 	beq	r2,zero,8006ebc <___vfprintf_internal_r+0x14cc>
 8006450:	d8c01904 	addi	r3,sp,100
 8006454:	dd000f04 	addi	r20,sp,60
 8006458:	d8c14115 	stw	r3,1284(sp)
 800645c:	d8c14117 	ldw	r3,1284(sp)
 8006460:	dcc14515 	stw	r19,1300(sp)
 8006464:	a0c5c83a 	sub	r2,r20,r3
 8006468:	11c00a04 	addi	r7,r2,40
 800646c:	99c0010e 	bge	r19,r7,8006474 <___vfprintf_internal_r+0xa84>
 8006470:	d9c14515 	stw	r7,1300(sp)
 8006474:	dcc14615 	stw	r19,1304(sp)
 8006478:	d8800407 	ldb	r2,16(sp)
 800647c:	103e4c26 	beq	r2,zero,8005db0 <___vfprintf_internal_r+0x3c0>
 8006480:	d8814517 	ldw	r2,1300(sp)
 8006484:	10800044 	addi	r2,r2,1
 8006488:	d8814515 	stw	r2,1300(sp)
 800648c:	003e4806 	br	8005db0 <___vfprintf_internal_r+0x3c0>
 8006490:	d9814c17 	ldw	r6,1328(sp)
 8006494:	31800414 	ori	r6,r6,16
 8006498:	d9814c15 	stw	r6,1328(sp)
 800649c:	d8c14c17 	ldw	r3,1328(sp)
 80064a0:	1880080c 	andi	r2,r3,32
 80064a4:	1001271e 	bne	r2,zero,8006944 <___vfprintf_internal_r+0xf54>
 80064a8:	d9414c17 	ldw	r5,1328(sp)
 80064ac:	2880040c 	andi	r2,r5,16
 80064b0:	1002b61e 	bne	r2,zero,8006f8c <___vfprintf_internal_r+0x159c>
 80064b4:	d9814c17 	ldw	r6,1328(sp)
 80064b8:	3080100c 	andi	r2,r6,64
 80064bc:	1002b326 	beq	r2,zero,8006f8c <___vfprintf_internal_r+0x159c>
 80064c0:	3c00000b 	ldhu	r16,0(r7)
 80064c4:	0009883a 	mov	r4,zero
 80064c8:	39c00104 	addi	r7,r7,4
 80064cc:	0023883a 	mov	r17,zero
 80064d0:	d9c14015 	stw	r7,1280(sp)
 80064d4:	d8000405 	stb	zero,16(sp)
 80064d8:	003fd306 	br	8006428 <___vfprintf_internal_r+0xa38>
 80064dc:	d9014c17 	ldw	r4,1328(sp)
 80064e0:	21000414 	ori	r4,r4,16
 80064e4:	d9014c15 	stw	r4,1328(sp)
 80064e8:	d9414c17 	ldw	r5,1328(sp)
 80064ec:	2880080c 	andi	r2,r5,32
 80064f0:	1001081e 	bne	r2,zero,8006914 <___vfprintf_internal_r+0xf24>
 80064f4:	d8c14c17 	ldw	r3,1328(sp)
 80064f8:	1880040c 	andi	r2,r3,16
 80064fc:	1002b01e 	bne	r2,zero,8006fc0 <___vfprintf_internal_r+0x15d0>
 8006500:	d9014c17 	ldw	r4,1328(sp)
 8006504:	2080100c 	andi	r2,r4,64
 8006508:	1002ad26 	beq	r2,zero,8006fc0 <___vfprintf_internal_r+0x15d0>
 800650c:	3c00000b 	ldhu	r16,0(r7)
 8006510:	01000044 	movi	r4,1
 8006514:	39c00104 	addi	r7,r7,4
 8006518:	0023883a 	mov	r17,zero
 800651c:	d9c14015 	stw	r7,1280(sp)
 8006520:	d8000405 	stb	zero,16(sp)
 8006524:	003fc006 	br	8006428 <___vfprintf_internal_r+0xa38>
 8006528:	d9014f17 	ldw	r4,1340(sp)
 800652c:	b00b883a 	mov	r5,r22
 8006530:	d9800c04 	addi	r6,sp,48
 8006534:	80059980 	call	8005998 <__sprint_r>
 8006538:	103ee51e 	bne	r2,zero,80060d0 <___vfprintf_internal_r+0x6e0>
 800653c:	dc800e17 	ldw	r18,56(sp)
 8006540:	d8c01904 	addi	r3,sp,100
 8006544:	d9814c17 	ldw	r6,1328(sp)
 8006548:	3080004c 	andi	r2,r6,1
 800654c:	1005003a 	cmpeq	r2,r2,zero
 8006550:	103ea51e 	bne	r2,zero,8005fe8 <___vfprintf_internal_r+0x5f8>
 8006554:	00800044 	movi	r2,1
 8006558:	dc400d17 	ldw	r17,52(sp)
 800655c:	18800115 	stw	r2,4(r3)
 8006560:	d8814917 	ldw	r2,1316(sp)
 8006564:	94800044 	addi	r18,r18,1
 8006568:	8c400044 	addi	r17,r17,1
 800656c:	18800015 	stw	r2,0(r3)
 8006570:	008001c4 	movi	r2,7
 8006574:	dc800e15 	stw	r18,56(sp)
 8006578:	dc400d15 	stw	r17,52(sp)
 800657c:	14421e0e 	bge	r2,r17,8006df8 <___vfprintf_internal_r+0x1408>
 8006580:	d9014f17 	ldw	r4,1340(sp)
 8006584:	b00b883a 	mov	r5,r22
 8006588:	d9800c04 	addi	r6,sp,48
 800658c:	80059980 	call	8005998 <__sprint_r>
 8006590:	103ecf1e 	bne	r2,zero,80060d0 <___vfprintf_internal_r+0x6e0>
 8006594:	dc800e17 	ldw	r18,56(sp)
 8006598:	d8c01904 	addi	r3,sp,100
 800659c:	003e9206 	br	8005fe8 <___vfprintf_internal_r+0x5f8>
 80065a0:	d9014f17 	ldw	r4,1340(sp)
 80065a4:	b00b883a 	mov	r5,r22
 80065a8:	d9800c04 	addi	r6,sp,48
 80065ac:	80059980 	call	8005998 <__sprint_r>
 80065b0:	103ec026 	beq	r2,zero,80060b4 <___vfprintf_internal_r+0x6c4>
 80065b4:	003ec606 	br	80060d0 <___vfprintf_internal_r+0x6e0>
 80065b8:	d9014f17 	ldw	r4,1340(sp)
 80065bc:	b00b883a 	mov	r5,r22
 80065c0:	d9800c04 	addi	r6,sp,48
 80065c4:	d9c15115 	stw	r7,1348(sp)
 80065c8:	80059980 	call	8005998 <__sprint_r>
 80065cc:	d9c15117 	ldw	r7,1348(sp)
 80065d0:	103ebf1e 	bne	r2,zero,80060d0 <___vfprintf_internal_r+0x6e0>
 80065d4:	dc800e17 	ldw	r18,56(sp)
 80065d8:	dc400d17 	ldw	r17,52(sp)
 80065dc:	dd401904 	addi	r21,sp,100
 80065e0:	003e7406 	br	8005fb4 <___vfprintf_internal_r+0x5c4>
 80065e4:	d9014f17 	ldw	r4,1340(sp)
 80065e8:	b00b883a 	mov	r5,r22
 80065ec:	d9800c04 	addi	r6,sp,48
 80065f0:	d9c15115 	stw	r7,1348(sp)
 80065f4:	80059980 	call	8005998 <__sprint_r>
 80065f8:	d9c15117 	ldw	r7,1348(sp)
 80065fc:	103eb41e 	bne	r2,zero,80060d0 <___vfprintf_internal_r+0x6e0>
 8006600:	dd401904 	addi	r21,sp,100
 8006604:	003d6d06 	br	8005bbc <___vfprintf_internal_r+0x1cc>
 8006608:	d9014f17 	ldw	r4,1340(sp)
 800660c:	b00b883a 	mov	r5,r22
 8006610:	d9800c04 	addi	r6,sp,48
 8006614:	d9c15115 	stw	r7,1348(sp)
 8006618:	80059980 	call	8005998 <__sprint_r>
 800661c:	d9c15117 	ldw	r7,1348(sp)
 8006620:	103eab1e 	bne	r2,zero,80060d0 <___vfprintf_internal_r+0x6e0>
 8006624:	dc800e17 	ldw	r18,56(sp)
 8006628:	dc400d17 	ldw	r17,52(sp)
 800662c:	dd401904 	addi	r21,sp,100
 8006630:	003e3406 	br	8005f04 <___vfprintf_internal_r+0x514>
 8006634:	d9014f17 	ldw	r4,1340(sp)
 8006638:	b00b883a 	mov	r5,r22
 800663c:	d9800c04 	addi	r6,sp,48
 8006640:	d9c15115 	stw	r7,1348(sp)
 8006644:	80059980 	call	8005998 <__sprint_r>
 8006648:	d9c15117 	ldw	r7,1348(sp)
 800664c:	103ea01e 	bne	r2,zero,80060d0 <___vfprintf_internal_r+0x6e0>
 8006650:	dc800e17 	ldw	r18,56(sp)
 8006654:	dc400d17 	ldw	r17,52(sp)
 8006658:	dd401904 	addi	r21,sp,100
 800665c:	003e1c06 	br	8005ed0 <___vfprintf_internal_r+0x4e0>
 8006660:	d9014f17 	ldw	r4,1340(sp)
 8006664:	b00b883a 	mov	r5,r22
 8006668:	d9800c04 	addi	r6,sp,48
 800666c:	d9c15115 	stw	r7,1348(sp)
 8006670:	80059980 	call	8005998 <__sprint_r>
 8006674:	d9c15117 	ldw	r7,1348(sp)
 8006678:	103e951e 	bne	r2,zero,80060d0 <___vfprintf_internal_r+0x6e0>
 800667c:	dc800e17 	ldw	r18,56(sp)
 8006680:	dc400d17 	ldw	r17,52(sp)
 8006684:	dd401904 	addi	r21,sp,100
 8006688:	003e0406 	br	8005e9c <___vfprintf_internal_r+0x4ac>
 800668c:	d9000517 	ldw	r4,20(sp)
 8006690:	0102520e 	bge	zero,r4,8006fdc <___vfprintf_internal_r+0x15ec>
 8006694:	d9814717 	ldw	r6,1308(sp)
 8006698:	21807a16 	blt	r4,r6,8006884 <___vfprintf_internal_r+0xe94>
 800669c:	d8814117 	ldw	r2,1284(sp)
 80066a0:	91a5883a 	add	r18,r18,r6
 80066a4:	8c400044 	addi	r17,r17,1
 80066a8:	a8800015 	stw	r2,0(r21)
 80066ac:	008001c4 	movi	r2,7
 80066b0:	a9800115 	stw	r6,4(r21)
 80066b4:	dc800e15 	stw	r18,56(sp)
 80066b8:	dc400d15 	stw	r17,52(sp)
 80066bc:	1442f616 	blt	r2,r17,8007298 <___vfprintf_internal_r+0x18a8>
 80066c0:	a8c00204 	addi	r3,r21,8
 80066c4:	d9414717 	ldw	r5,1308(sp)
 80066c8:	2161c83a 	sub	r16,r4,r5
 80066cc:	043f9d0e 	bge	zero,r16,8006544 <___vfprintf_internal_r+0xb54>
 80066d0:	00800404 	movi	r2,16
 80066d4:	1402130e 	bge	r2,r16,8006f24 <___vfprintf_internal_r+0x1534>
 80066d8:	dc400d17 	ldw	r17,52(sp)
 80066dc:	1027883a 	mov	r19,r2
 80066e0:	070200b4 	movhi	fp,2050
 80066e4:	e7205a84 	addi	fp,fp,-32406
 80066e8:	050001c4 	movi	r20,7
 80066ec:	00000306 	br	80066fc <___vfprintf_internal_r+0xd0c>
 80066f0:	18c00204 	addi	r3,r3,8
 80066f4:	843ffc04 	addi	r16,r16,-16
 80066f8:	9c020d0e 	bge	r19,r16,8006f30 <___vfprintf_internal_r+0x1540>
 80066fc:	94800404 	addi	r18,r18,16
 8006700:	8c400044 	addi	r17,r17,1
 8006704:	1f000015 	stw	fp,0(r3)
 8006708:	1cc00115 	stw	r19,4(r3)
 800670c:	dc800e15 	stw	r18,56(sp)
 8006710:	dc400d15 	stw	r17,52(sp)
 8006714:	a47ff60e 	bge	r20,r17,80066f0 <___vfprintf_internal_r+0xd00>
 8006718:	d9014f17 	ldw	r4,1340(sp)
 800671c:	b00b883a 	mov	r5,r22
 8006720:	d9800c04 	addi	r6,sp,48
 8006724:	80059980 	call	8005998 <__sprint_r>
 8006728:	103e691e 	bne	r2,zero,80060d0 <___vfprintf_internal_r+0x6e0>
 800672c:	dc800e17 	ldw	r18,56(sp)
 8006730:	dc400d17 	ldw	r17,52(sp)
 8006734:	d8c01904 	addi	r3,sp,100
 8006738:	003fee06 	br	80066f4 <___vfprintf_internal_r+0xd04>
 800673c:	d8814717 	ldw	r2,1308(sp)
 8006740:	143fffc4 	addi	r16,r2,-1
 8006744:	043e970e 	bge	zero,r16,80061a4 <___vfprintf_internal_r+0x7b4>
 8006748:	00800404 	movi	r2,16
 800674c:	1400180e 	bge	r2,r16,80067b0 <___vfprintf_internal_r+0xdc0>
 8006750:	1029883a 	mov	r20,r2
 8006754:	070200b4 	movhi	fp,2050
 8006758:	e7205a84 	addi	fp,fp,-32406
 800675c:	054001c4 	movi	r21,7
 8006760:	00000306 	br	8006770 <___vfprintf_internal_r+0xd80>
 8006764:	9cc00204 	addi	r19,r19,8
 8006768:	843ffc04 	addi	r16,r16,-16
 800676c:	a400120e 	bge	r20,r16,80067b8 <___vfprintf_internal_r+0xdc8>
 8006770:	94800404 	addi	r18,r18,16
 8006774:	8c400044 	addi	r17,r17,1
 8006778:	9f000015 	stw	fp,0(r19)
 800677c:	9d000115 	stw	r20,4(r19)
 8006780:	dc800e15 	stw	r18,56(sp)
 8006784:	dc400d15 	stw	r17,52(sp)
 8006788:	ac7ff60e 	bge	r21,r17,8006764 <___vfprintf_internal_r+0xd74>
 800678c:	d9014f17 	ldw	r4,1340(sp)
 8006790:	b00b883a 	mov	r5,r22
 8006794:	d9800c04 	addi	r6,sp,48
 8006798:	80059980 	call	8005998 <__sprint_r>
 800679c:	103e4c1e 	bne	r2,zero,80060d0 <___vfprintf_internal_r+0x6e0>
 80067a0:	dc800e17 	ldw	r18,56(sp)
 80067a4:	dc400d17 	ldw	r17,52(sp)
 80067a8:	dcc01904 	addi	r19,sp,100
 80067ac:	003fee06 	br	8006768 <___vfprintf_internal_r+0xd78>
 80067b0:	070200b4 	movhi	fp,2050
 80067b4:	e7205a84 	addi	fp,fp,-32406
 80067b8:	9425883a 	add	r18,r18,r16
 80067bc:	8c400044 	addi	r17,r17,1
 80067c0:	008001c4 	movi	r2,7
 80067c4:	9f000015 	stw	fp,0(r19)
 80067c8:	9c000115 	stw	r16,4(r19)
 80067cc:	dc800e15 	stw	r18,56(sp)
 80067d0:	dc400d15 	stw	r17,52(sp)
 80067d4:	147e720e 	bge	r2,r17,80061a0 <___vfprintf_internal_r+0x7b0>
 80067d8:	d9014f17 	ldw	r4,1340(sp)
 80067dc:	b00b883a 	mov	r5,r22
 80067e0:	d9800c04 	addi	r6,sp,48
 80067e4:	80059980 	call	8005998 <__sprint_r>
 80067e8:	103e391e 	bne	r2,zero,80060d0 <___vfprintf_internal_r+0x6e0>
 80067ec:	dc800e17 	ldw	r18,56(sp)
 80067f0:	dc400d17 	ldw	r17,52(sp)
 80067f4:	dcc01904 	addi	r19,sp,100
 80067f8:	003e6a06 	br	80061a4 <___vfprintf_internal_r+0x7b4>
 80067fc:	d9014f17 	ldw	r4,1340(sp)
 8006800:	b00b883a 	mov	r5,r22
 8006804:	d9800c04 	addi	r6,sp,48
 8006808:	d9c15115 	stw	r7,1348(sp)
 800680c:	80059980 	call	8005998 <__sprint_r>
 8006810:	d9c15117 	ldw	r7,1348(sp)
 8006814:	103e2e1e 	bne	r2,zero,80060d0 <___vfprintf_internal_r+0x6e0>
 8006818:	dc800e17 	ldw	r18,56(sp)
 800681c:	dc400d17 	ldw	r17,52(sp)
 8006820:	dd401904 	addi	r21,sp,100
 8006824:	003dba06 	br	8005f10 <___vfprintf_internal_r+0x520>
 8006828:	d9014f17 	ldw	r4,1340(sp)
 800682c:	b00b883a 	mov	r5,r22
 8006830:	d9800c04 	addi	r6,sp,48
 8006834:	80059980 	call	8005998 <__sprint_r>
 8006838:	103e251e 	bne	r2,zero,80060d0 <___vfprintf_internal_r+0x6e0>
 800683c:	dc800e17 	ldw	r18,56(sp)
 8006840:	dc400d17 	ldw	r17,52(sp)
 8006844:	dcc01904 	addi	r19,sp,100
 8006848:	003e4206 	br	8006154 <___vfprintf_internal_r+0x764>
 800684c:	d9014f17 	ldw	r4,1340(sp)
 8006850:	b00b883a 	mov	r5,r22
 8006854:	d9800c04 	addi	r6,sp,48
 8006858:	80059980 	call	8005998 <__sprint_r>
 800685c:	103e1c1e 	bne	r2,zero,80060d0 <___vfprintf_internal_r+0x6e0>
 8006860:	dc800e17 	ldw	r18,56(sp)
 8006864:	dc400d17 	ldw	r17,52(sp)
 8006868:	d8c01904 	addi	r3,sp,100
 800686c:	003e2e06 	br	8006128 <___vfprintf_internal_r+0x738>
 8006870:	d9414c17 	ldw	r5,1328(sp)
 8006874:	2880004c 	andi	r2,r5,1
 8006878:	1005003a 	cmpeq	r2,r2,zero
 800687c:	103dda1e 	bne	r2,zero,8005fe8 <___vfprintf_internal_r+0x5f8>
 8006880:	003e9f06 	br	8006300 <___vfprintf_internal_r+0x910>
 8006884:	d8c14117 	ldw	r3,1284(sp)
 8006888:	9125883a 	add	r18,r18,r4
 800688c:	8c400044 	addi	r17,r17,1
 8006890:	008001c4 	movi	r2,7
 8006894:	a8c00015 	stw	r3,0(r21)
 8006898:	a9000115 	stw	r4,4(r21)
 800689c:	dc800e15 	stw	r18,56(sp)
 80068a0:	dc400d15 	stw	r17,52(sp)
 80068a4:	14426616 	blt	r2,r17,8007240 <___vfprintf_internal_r+0x1850>
 80068a8:	a8c00204 	addi	r3,r21,8
 80068ac:	d9414917 	ldw	r5,1316(sp)
 80068b0:	00800044 	movi	r2,1
 80068b4:	94800044 	addi	r18,r18,1
 80068b8:	8c400044 	addi	r17,r17,1
 80068bc:	18800115 	stw	r2,4(r3)
 80068c0:	008001c4 	movi	r2,7
 80068c4:	19400015 	stw	r5,0(r3)
 80068c8:	dc800e15 	stw	r18,56(sp)
 80068cc:	dc400d15 	stw	r17,52(sp)
 80068d0:	2021883a 	mov	r16,r4
 80068d4:	14425016 	blt	r2,r17,8007218 <___vfprintf_internal_r+0x1828>
 80068d8:	19400204 	addi	r5,r3,8
 80068dc:	d9814717 	ldw	r6,1308(sp)
 80068e0:	8c400044 	addi	r17,r17,1
 80068e4:	dc400d15 	stw	r17,52(sp)
 80068e8:	3107c83a 	sub	r3,r6,r4
 80068ec:	d9014117 	ldw	r4,1284(sp)
 80068f0:	90e5883a 	add	r18,r18,r3
 80068f4:	28c00115 	stw	r3,4(r5)
 80068f8:	8105883a 	add	r2,r16,r4
 80068fc:	28800015 	stw	r2,0(r5)
 8006900:	008001c4 	movi	r2,7
 8006904:	dc800e15 	stw	r18,56(sp)
 8006908:	147f1d16 	blt	r2,r17,8006580 <___vfprintf_internal_r+0xb90>
 800690c:	28c00204 	addi	r3,r5,8
 8006910:	003db506 	br	8005fe8 <___vfprintf_internal_r+0x5f8>
 8006914:	3c000017 	ldw	r16,0(r7)
 8006918:	3c400117 	ldw	r17,4(r7)
 800691c:	39800204 	addi	r6,r7,8
 8006920:	01000044 	movi	r4,1
 8006924:	d9814015 	stw	r6,1280(sp)
 8006928:	d8000405 	stb	zero,16(sp)
 800692c:	003ebe06 	br	8006428 <___vfprintf_internal_r+0xa38>
 8006930:	3c000017 	ldw	r16,0(r7)
 8006934:	3c400117 	ldw	r17,4(r7)
 8006938:	38800204 	addi	r2,r7,8
 800693c:	d8814015 	stw	r2,1280(sp)
 8006940:	003eb706 	br	8006420 <___vfprintf_internal_r+0xa30>
 8006944:	3c000017 	ldw	r16,0(r7)
 8006948:	3c400117 	ldw	r17,4(r7)
 800694c:	39000204 	addi	r4,r7,8
 8006950:	d9014015 	stw	r4,1280(sp)
 8006954:	0009883a 	mov	r4,zero
 8006958:	d8000405 	stb	zero,16(sp)
 800695c:	003eb206 	br	8006428 <___vfprintf_internal_r+0xa38>
 8006960:	38c00017 	ldw	r3,0(r7)
 8006964:	39c00104 	addi	r7,r7,4
 8006968:	d8c14a15 	stw	r3,1320(sp)
 800696c:	1800d10e 	bge	r3,zero,8006cb4 <___vfprintf_internal_r+0x12c4>
 8006970:	00c7c83a 	sub	r3,zero,r3
 8006974:	d8c14a15 	stw	r3,1320(sp)
 8006978:	d9014c17 	ldw	r4,1328(sp)
 800697c:	b8c00007 	ldb	r3,0(r23)
 8006980:	21000114 	ori	r4,r4,4
 8006984:	d9014c15 	stw	r4,1328(sp)
 8006988:	003c9806 	br	8005bec <___vfprintf_internal_r+0x1fc>
 800698c:	d9814c17 	ldw	r6,1328(sp)
 8006990:	3080080c 	andi	r2,r6,32
 8006994:	1001f026 	beq	r2,zero,8007158 <___vfprintf_internal_r+0x1768>
 8006998:	d9014b17 	ldw	r4,1324(sp)
 800699c:	38800017 	ldw	r2,0(r7)
 80069a0:	39c00104 	addi	r7,r7,4
 80069a4:	d9c14015 	stw	r7,1280(sp)
 80069a8:	2007d7fa 	srai	r3,r4,31
 80069ac:	d9c14017 	ldw	r7,1280(sp)
 80069b0:	11000015 	stw	r4,0(r2)
 80069b4:	10c00115 	stw	r3,4(r2)
 80069b8:	003c6906 	br	8005b60 <___vfprintf_internal_r+0x170>
 80069bc:	b8c00007 	ldb	r3,0(r23)
 80069c0:	00801b04 	movi	r2,108
 80069c4:	18824f26 	beq	r3,r2,8007304 <___vfprintf_internal_r+0x1914>
 80069c8:	d9414c17 	ldw	r5,1328(sp)
 80069cc:	29400414 	ori	r5,r5,16
 80069d0:	d9414c15 	stw	r5,1328(sp)
 80069d4:	003c8506 	br	8005bec <___vfprintf_internal_r+0x1fc>
 80069d8:	d9814c17 	ldw	r6,1328(sp)
 80069dc:	b8c00007 	ldb	r3,0(r23)
 80069e0:	31800814 	ori	r6,r6,32
 80069e4:	d9814c15 	stw	r6,1328(sp)
 80069e8:	003c8006 	br	8005bec <___vfprintf_internal_r+0x1fc>
 80069ec:	d8814c17 	ldw	r2,1328(sp)
 80069f0:	3c000017 	ldw	r16,0(r7)
 80069f4:	00c01e04 	movi	r3,120
 80069f8:	10800094 	ori	r2,r2,2
 80069fc:	d8814c15 	stw	r2,1328(sp)
 8006a00:	39c00104 	addi	r7,r7,4
 8006a04:	014200b4 	movhi	r5,2050
 8006a08:	29604404 	addi	r5,r5,-32496
 8006a0c:	00800c04 	movi	r2,48
 8006a10:	0023883a 	mov	r17,zero
 8006a14:	01000084 	movi	r4,2
 8006a18:	d9c14015 	stw	r7,1280(sp)
 8006a1c:	d8c14d15 	stw	r3,1332(sp)
 8006a20:	d9414415 	stw	r5,1296(sp)
 8006a24:	d8800445 	stb	r2,17(sp)
 8006a28:	d8c00485 	stb	r3,18(sp)
 8006a2c:	d8000405 	stb	zero,16(sp)
 8006a30:	003e7d06 	br	8006428 <___vfprintf_internal_r+0xa38>
 8006a34:	d8814c17 	ldw	r2,1328(sp)
 8006a38:	b8c00007 	ldb	r3,0(r23)
 8006a3c:	10801014 	ori	r2,r2,64
 8006a40:	d8814c15 	stw	r2,1328(sp)
 8006a44:	003c6906 	br	8005bec <___vfprintf_internal_r+0x1fc>
 8006a48:	d9414c17 	ldw	r5,1328(sp)
 8006a4c:	2880020c 	andi	r2,r5,8
 8006a50:	1001df26 	beq	r2,zero,80071d0 <___vfprintf_internal_r+0x17e0>
 8006a54:	39800017 	ldw	r6,0(r7)
 8006a58:	38800204 	addi	r2,r7,8
 8006a5c:	d8814015 	stw	r2,1280(sp)
 8006a60:	d9814215 	stw	r6,1288(sp)
 8006a64:	39c00117 	ldw	r7,4(r7)
 8006a68:	d9c14315 	stw	r7,1292(sp)
 8006a6c:	d9014217 	ldw	r4,1288(sp)
 8006a70:	d9414317 	ldw	r5,1292(sp)
 8006a74:	800bbfc0 	call	800bbfc <__isinfd>
 8006a78:	10021726 	beq	r2,zero,80072d8 <___vfprintf_internal_r+0x18e8>
 8006a7c:	d9014217 	ldw	r4,1288(sp)
 8006a80:	d9414317 	ldw	r5,1292(sp)
 8006a84:	000d883a 	mov	r6,zero
 8006a88:	000f883a 	mov	r7,zero
 8006a8c:	800d9180 	call	800d918 <__ltdf2>
 8006a90:	1002ca16 	blt	r2,zero,80075bc <___vfprintf_internal_r+0x1bcc>
 8006a94:	d9414d17 	ldw	r5,1332(sp)
 8006a98:	008011c4 	movi	r2,71
 8006a9c:	11420a16 	blt	r2,r5,80072c8 <___vfprintf_internal_r+0x18d8>
 8006aa0:	018200b4 	movhi	r6,2050
 8006aa4:	31a04904 	addi	r6,r6,-32476
 8006aa8:	d9814115 	stw	r6,1284(sp)
 8006aac:	d9014c17 	ldw	r4,1328(sp)
 8006ab0:	00c000c4 	movi	r3,3
 8006ab4:	00bfdfc4 	movi	r2,-129
 8006ab8:	2088703a 	and	r4,r4,r2
 8006abc:	180f883a 	mov	r7,r3
 8006ac0:	d8c14515 	stw	r3,1300(sp)
 8006ac4:	d9014c15 	stw	r4,1328(sp)
 8006ac8:	d8014615 	stw	zero,1304(sp)
 8006acc:	003e6a06 	br	8006478 <___vfprintf_internal_r+0xa88>
 8006ad0:	38800017 	ldw	r2,0(r7)
 8006ad4:	00c00044 	movi	r3,1
 8006ad8:	39c00104 	addi	r7,r7,4
 8006adc:	d9c14015 	stw	r7,1280(sp)
 8006ae0:	d9000f04 	addi	r4,sp,60
 8006ae4:	180f883a 	mov	r7,r3
 8006ae8:	d8c14515 	stw	r3,1300(sp)
 8006aec:	d9014115 	stw	r4,1284(sp)
 8006af0:	d8800f05 	stb	r2,60(sp)
 8006af4:	d8000405 	stb	zero,16(sp)
 8006af8:	003cac06 	br	8005dac <___vfprintf_internal_r+0x3bc>
 8006afc:	014200b4 	movhi	r5,2050
 8006b00:	29604f04 	addi	r5,r5,-32452
 8006b04:	d9414415 	stw	r5,1296(sp)
 8006b08:	d9814c17 	ldw	r6,1328(sp)
 8006b0c:	3080080c 	andi	r2,r6,32
 8006b10:	1000f926 	beq	r2,zero,8006ef8 <___vfprintf_internal_r+0x1508>
 8006b14:	3c000017 	ldw	r16,0(r7)
 8006b18:	3c400117 	ldw	r17,4(r7)
 8006b1c:	38800204 	addi	r2,r7,8
 8006b20:	d8814015 	stw	r2,1280(sp)
 8006b24:	d9414c17 	ldw	r5,1328(sp)
 8006b28:	2880004c 	andi	r2,r5,1
 8006b2c:	1005003a 	cmpeq	r2,r2,zero
 8006b30:	1000b31e 	bne	r2,zero,8006e00 <___vfprintf_internal_r+0x1410>
 8006b34:	8444b03a 	or	r2,r16,r17
 8006b38:	1000b126 	beq	r2,zero,8006e00 <___vfprintf_internal_r+0x1410>
 8006b3c:	d9814d17 	ldw	r6,1332(sp)
 8006b40:	29400094 	ori	r5,r5,2
 8006b44:	00800c04 	movi	r2,48
 8006b48:	01000084 	movi	r4,2
 8006b4c:	d9414c15 	stw	r5,1328(sp)
 8006b50:	d8800445 	stb	r2,17(sp)
 8006b54:	d9800485 	stb	r6,18(sp)
 8006b58:	d8000405 	stb	zero,16(sp)
 8006b5c:	003e3206 	br	8006428 <___vfprintf_internal_r+0xa38>
 8006b60:	018200b4 	movhi	r6,2050
 8006b64:	31a04404 	addi	r6,r6,-32496
 8006b68:	d9814415 	stw	r6,1296(sp)
 8006b6c:	003fe606 	br	8006b08 <___vfprintf_internal_r+0x1118>
 8006b70:	00800ac4 	movi	r2,43
 8006b74:	d8800405 	stb	r2,16(sp)
 8006b78:	b8c00007 	ldb	r3,0(r23)
 8006b7c:	003c1b06 	br	8005bec <___vfprintf_internal_r+0x1fc>
 8006b80:	d8814c17 	ldw	r2,1328(sp)
 8006b84:	b8c00007 	ldb	r3,0(r23)
 8006b88:	10800054 	ori	r2,r2,1
 8006b8c:	d8814c15 	stw	r2,1328(sp)
 8006b90:	003c1606 	br	8005bec <___vfprintf_internal_r+0x1fc>
 8006b94:	d8800407 	ldb	r2,16(sp)
 8006b98:	1000461e 	bne	r2,zero,8006cb4 <___vfprintf_internal_r+0x12c4>
 8006b9c:	00800804 	movi	r2,32
 8006ba0:	d8800405 	stb	r2,16(sp)
 8006ba4:	b8c00007 	ldb	r3,0(r23)
 8006ba8:	003c1006 	br	8005bec <___vfprintf_internal_r+0x1fc>
 8006bac:	d9814c17 	ldw	r6,1328(sp)
 8006bb0:	b8c00007 	ldb	r3,0(r23)
 8006bb4:	31800214 	ori	r6,r6,8
 8006bb8:	d9814c15 	stw	r6,1328(sp)
 8006bbc:	003c0b06 	br	8005bec <___vfprintf_internal_r+0x1fc>
 8006bc0:	0007883a 	mov	r3,zero
 8006bc4:	01000244 	movi	r4,9
 8006bc8:	188002a4 	muli	r2,r3,10
 8006bcc:	b8c00007 	ldb	r3,0(r23)
 8006bd0:	d9814d17 	ldw	r6,1332(sp)
 8006bd4:	bdc00044 	addi	r23,r23,1
 8006bd8:	d8c14d15 	stw	r3,1332(sp)
 8006bdc:	d9414d17 	ldw	r5,1332(sp)
 8006be0:	3085883a 	add	r2,r6,r2
 8006be4:	10fff404 	addi	r3,r2,-48
 8006be8:	28bff404 	addi	r2,r5,-48
 8006bec:	20bff62e 	bgeu	r4,r2,8006bc8 <___vfprintf_internal_r+0x11d8>
 8006bf0:	d8c14a15 	stw	r3,1320(sp)
 8006bf4:	003bff06 	br	8005bf4 <___vfprintf_internal_r+0x204>
 8006bf8:	d9414c17 	ldw	r5,1328(sp)
 8006bfc:	b8c00007 	ldb	r3,0(r23)
 8006c00:	29402014 	ori	r5,r5,128
 8006c04:	d9414c15 	stw	r5,1328(sp)
 8006c08:	003bf806 	br	8005bec <___vfprintf_internal_r+0x1fc>
 8006c0c:	b8c00007 	ldb	r3,0(r23)
 8006c10:	00800a84 	movi	r2,42
 8006c14:	bdc00044 	addi	r23,r23,1
 8006c18:	18831526 	beq	r3,r2,8007870 <___vfprintf_internal_r+0x1e80>
 8006c1c:	d8c14d15 	stw	r3,1332(sp)
 8006c20:	18bff404 	addi	r2,r3,-48
 8006c24:	00c00244 	movi	r3,9
 8006c28:	18827836 	bltu	r3,r2,800760c <___vfprintf_internal_r+0x1c1c>
 8006c2c:	000d883a 	mov	r6,zero
 8006c30:	308002a4 	muli	r2,r6,10
 8006c34:	b9800007 	ldb	r6,0(r23)
 8006c38:	d9414d17 	ldw	r5,1332(sp)
 8006c3c:	bdc00044 	addi	r23,r23,1
 8006c40:	d9814d15 	stw	r6,1332(sp)
 8006c44:	d9014d17 	ldw	r4,1332(sp)
 8006c48:	1145883a 	add	r2,r2,r5
 8006c4c:	11bff404 	addi	r6,r2,-48
 8006c50:	20bff404 	addi	r2,r4,-48
 8006c54:	18bff62e 	bgeu	r3,r2,8006c30 <___vfprintf_internal_r+0x1240>
 8006c58:	3027883a 	mov	r19,r6
 8006c5c:	303be50e 	bge	r6,zero,8005bf4 <___vfprintf_internal_r+0x204>
 8006c60:	04ffffc4 	movi	r19,-1
 8006c64:	003be306 	br	8005bf4 <___vfprintf_internal_r+0x204>
 8006c68:	d8000405 	stb	zero,16(sp)
 8006c6c:	39800017 	ldw	r6,0(r7)
 8006c70:	39c00104 	addi	r7,r7,4
 8006c74:	d9c14015 	stw	r7,1280(sp)
 8006c78:	d9814115 	stw	r6,1284(sp)
 8006c7c:	3001c926 	beq	r6,zero,80073a4 <___vfprintf_internal_r+0x19b4>
 8006c80:	98000e16 	blt	r19,zero,8006cbc <___vfprintf_internal_r+0x12cc>
 8006c84:	d9014117 	ldw	r4,1284(sp)
 8006c88:	000b883a 	mov	r5,zero
 8006c8c:	980d883a 	mov	r6,r19
 8006c90:	800a1540 	call	800a154 <memchr>
 8006c94:	10025926 	beq	r2,zero,80075fc <___vfprintf_internal_r+0x1c0c>
 8006c98:	d8c14117 	ldw	r3,1284(sp)
 8006c9c:	10cfc83a 	sub	r7,r2,r3
 8006ca0:	99c19e16 	blt	r19,r7,800731c <___vfprintf_internal_r+0x192c>
 8006ca4:	d9c14515 	stw	r7,1300(sp)
 8006ca8:	38000916 	blt	r7,zero,8006cd0 <___vfprintf_internal_r+0x12e0>
 8006cac:	d8014615 	stw	zero,1304(sp)
 8006cb0:	003df106 	br	8006478 <___vfprintf_internal_r+0xa88>
 8006cb4:	b8c00007 	ldb	r3,0(r23)
 8006cb8:	003bcc06 	br	8005bec <___vfprintf_internal_r+0x1fc>
 8006cbc:	d9014117 	ldw	r4,1284(sp)
 8006cc0:	800591c0 	call	800591c <strlen>
 8006cc4:	d8814515 	stw	r2,1300(sp)
 8006cc8:	100f883a 	mov	r7,r2
 8006ccc:	103ff70e 	bge	r2,zero,8006cac <___vfprintf_internal_r+0x12bc>
 8006cd0:	d8014515 	stw	zero,1300(sp)
 8006cd4:	d8014615 	stw	zero,1304(sp)
 8006cd8:	003de706 	br	8006478 <___vfprintf_internal_r+0xa88>
 8006cdc:	20c03fcc 	andi	r3,r4,255
 8006ce0:	00800044 	movi	r2,1
 8006ce4:	18802d26 	beq	r3,r2,8006d9c <___vfprintf_internal_r+0x13ac>
 8006ce8:	18800e36 	bltu	r3,r2,8006d24 <___vfprintf_internal_r+0x1334>
 8006cec:	00800084 	movi	r2,2
 8006cf0:	1880fa26 	beq	r3,r2,80070dc <___vfprintf_internal_r+0x16ec>
 8006cf4:	010200b4 	movhi	r4,2050
 8006cf8:	21205404 	addi	r4,r4,-32432
 8006cfc:	800591c0 	call	800591c <strlen>
 8006d00:	100f883a 	mov	r7,r2
 8006d04:	dcc14515 	stw	r19,1300(sp)
 8006d08:	9880010e 	bge	r19,r2,8006d10 <___vfprintf_internal_r+0x1320>
 8006d0c:	d8814515 	stw	r2,1300(sp)
 8006d10:	008200b4 	movhi	r2,2050
 8006d14:	10a05404 	addi	r2,r2,-32432
 8006d18:	dcc14615 	stw	r19,1304(sp)
 8006d1c:	d8814115 	stw	r2,1284(sp)
 8006d20:	003dd506 	br	8006478 <___vfprintf_internal_r+0xa88>
 8006d24:	d9401904 	addi	r5,sp,100
 8006d28:	dd000f04 	addi	r20,sp,60
 8006d2c:	d9414115 	stw	r5,1284(sp)
 8006d30:	880a977a 	slli	r5,r17,29
 8006d34:	d9814117 	ldw	r6,1284(sp)
 8006d38:	8004d0fa 	srli	r2,r16,3
 8006d3c:	8806d0fa 	srli	r3,r17,3
 8006d40:	810001cc 	andi	r4,r16,7
 8006d44:	2884b03a 	or	r2,r5,r2
 8006d48:	31bfffc4 	addi	r6,r6,-1
 8006d4c:	21000c04 	addi	r4,r4,48
 8006d50:	d9814115 	stw	r6,1284(sp)
 8006d54:	10cab03a 	or	r5,r2,r3
 8006d58:	31000005 	stb	r4,0(r6)
 8006d5c:	1021883a 	mov	r16,r2
 8006d60:	1823883a 	mov	r17,r3
 8006d64:	283ff21e 	bne	r5,zero,8006d30 <___vfprintf_internal_r+0x1340>
 8006d68:	d8c14c17 	ldw	r3,1328(sp)
 8006d6c:	1880004c 	andi	r2,r3,1
 8006d70:	1005003a 	cmpeq	r2,r2,zero
 8006d74:	103db91e 	bne	r2,zero,800645c <___vfprintf_internal_r+0xa6c>
 8006d78:	20803fcc 	andi	r2,r4,255
 8006d7c:	1080201c 	xori	r2,r2,128
 8006d80:	10bfe004 	addi	r2,r2,-128
 8006d84:	00c00c04 	movi	r3,48
 8006d88:	10fdb426 	beq	r2,r3,800645c <___vfprintf_internal_r+0xa6c>
 8006d8c:	31bfffc4 	addi	r6,r6,-1
 8006d90:	d9814115 	stw	r6,1284(sp)
 8006d94:	30c00005 	stb	r3,0(r6)
 8006d98:	003db006 	br	800645c <___vfprintf_internal_r+0xa6c>
 8006d9c:	88800068 	cmpgeui	r2,r17,1
 8006da0:	10002c1e 	bne	r2,zero,8006e54 <___vfprintf_internal_r+0x1464>
 8006da4:	8800021e 	bne	r17,zero,8006db0 <___vfprintf_internal_r+0x13c0>
 8006da8:	00800244 	movi	r2,9
 8006dac:	14002936 	bltu	r2,r16,8006e54 <___vfprintf_internal_r+0x1464>
 8006db0:	d90018c4 	addi	r4,sp,99
 8006db4:	dd000f04 	addi	r20,sp,60
 8006db8:	d9014115 	stw	r4,1284(sp)
 8006dbc:	d9014117 	ldw	r4,1284(sp)
 8006dc0:	80800c04 	addi	r2,r16,48
 8006dc4:	20800005 	stb	r2,0(r4)
 8006dc8:	003da406 	br	800645c <___vfprintf_internal_r+0xa6c>
 8006dcc:	dc400d17 	ldw	r17,52(sp)
 8006dd0:	070200b4 	movhi	fp,2050
 8006dd4:	e7205a84 	addi	fp,fp,-32406
 8006dd8:	9425883a 	add	r18,r18,r16
 8006ddc:	8c400044 	addi	r17,r17,1
 8006de0:	008001c4 	movi	r2,7
 8006de4:	1f000015 	stw	fp,0(r3)
 8006de8:	1c000115 	stw	r16,4(r3)
 8006dec:	dc800e15 	stw	r18,56(sp)
 8006df0:	dc400d15 	stw	r17,52(sp)
 8006df4:	147de216 	blt	r2,r17,8006580 <___vfprintf_internal_r+0xb90>
 8006df8:	18c00204 	addi	r3,r3,8
 8006dfc:	003c7a06 	br	8005fe8 <___vfprintf_internal_r+0x5f8>
 8006e00:	01000084 	movi	r4,2
 8006e04:	d8000405 	stb	zero,16(sp)
 8006e08:	003d8706 	br	8006428 <___vfprintf_internal_r+0xa38>
 8006e0c:	d9814c17 	ldw	r6,1328(sp)
 8006e10:	30c4703a 	and	r2,r6,r3
 8006e14:	1005003a 	cmpeq	r2,r2,zero
 8006e18:	103cb926 	beq	r2,zero,8006100 <___vfprintf_internal_r+0x710>
 8006e1c:	d9014117 	ldw	r4,1284(sp)
 8006e20:	94800044 	addi	r18,r18,1
 8006e24:	8c400044 	addi	r17,r17,1
 8006e28:	008001c4 	movi	r2,7
 8006e2c:	a9000015 	stw	r4,0(r21)
 8006e30:	a8c00115 	stw	r3,4(r21)
 8006e34:	dc800e15 	stw	r18,56(sp)
 8006e38:	dc400d15 	stw	r17,52(sp)
 8006e3c:	147e6616 	blt	r2,r17,80067d8 <___vfprintf_internal_r+0xde8>
 8006e40:	acc00204 	addi	r19,r21,8
 8006e44:	003cd706 	br	80061a4 <___vfprintf_internal_r+0x7b4>
 8006e48:	070200b4 	movhi	fp,2050
 8006e4c:	e7205a84 	addi	fp,fp,-32406
 8006e50:	003c4f06 	br	8005f90 <___vfprintf_internal_r+0x5a0>
 8006e54:	dd000f04 	addi	r20,sp,60
 8006e58:	dc801904 	addi	r18,sp,100
 8006e5c:	8009883a 	mov	r4,r16
 8006e60:	880b883a 	mov	r5,r17
 8006e64:	01800284 	movi	r6,10
 8006e68:	000f883a 	mov	r7,zero
 8006e6c:	800c6280 	call	800c628 <__umoddi3>
 8006e70:	12000c04 	addi	r8,r2,48
 8006e74:	94bfffc4 	addi	r18,r18,-1
 8006e78:	8009883a 	mov	r4,r16
 8006e7c:	880b883a 	mov	r5,r17
 8006e80:	01800284 	movi	r6,10
 8006e84:	000f883a 	mov	r7,zero
 8006e88:	92000005 	stb	r8,0(r18)
 8006e8c:	800c04c0 	call	800c04c <__udivdi3>
 8006e90:	1009883a 	mov	r4,r2
 8006e94:	1021883a 	mov	r16,r2
 8006e98:	18800068 	cmpgeui	r2,r3,1
 8006e9c:	1823883a 	mov	r17,r3
 8006ea0:	103fee1e 	bne	r2,zero,8006e5c <___vfprintf_internal_r+0x146c>
 8006ea4:	1800021e 	bne	r3,zero,8006eb0 <___vfprintf_internal_r+0x14c0>
 8006ea8:	00800244 	movi	r2,9
 8006eac:	113feb36 	bltu	r2,r4,8006e5c <___vfprintf_internal_r+0x146c>
 8006eb0:	94bfffc4 	addi	r18,r18,-1
 8006eb4:	dc814115 	stw	r18,1284(sp)
 8006eb8:	003fc006 	br	8006dbc <___vfprintf_internal_r+0x13cc>
 8006ebc:	d9014c17 	ldw	r4,1328(sp)
 8006ec0:	2080004c 	andi	r2,r4,1
 8006ec4:	10009a1e 	bne	r2,zero,8007130 <___vfprintf_internal_r+0x1740>
 8006ec8:	d9401904 	addi	r5,sp,100
 8006ecc:	dd000f04 	addi	r20,sp,60
 8006ed0:	d9414115 	stw	r5,1284(sp)
 8006ed4:	003d6106 	br	800645c <___vfprintf_internal_r+0xa6c>
 8006ed8:	d9014f17 	ldw	r4,1340(sp)
 8006edc:	b00b883a 	mov	r5,r22
 8006ee0:	d9800c04 	addi	r6,sp,48
 8006ee4:	80059980 	call	8005998 <__sprint_r>
 8006ee8:	103c791e 	bne	r2,zero,80060d0 <___vfprintf_internal_r+0x6e0>
 8006eec:	dc800e17 	ldw	r18,56(sp)
 8006ef0:	d8c01904 	addi	r3,sp,100
 8006ef4:	003cff06 	br	80062f4 <___vfprintf_internal_r+0x904>
 8006ef8:	d8c14c17 	ldw	r3,1328(sp)
 8006efc:	1880040c 	andi	r2,r3,16
 8006f00:	1000711e 	bne	r2,zero,80070c8 <___vfprintf_internal_r+0x16d8>
 8006f04:	d9014c17 	ldw	r4,1328(sp)
 8006f08:	2080100c 	andi	r2,r4,64
 8006f0c:	10006e26 	beq	r2,zero,80070c8 <___vfprintf_internal_r+0x16d8>
 8006f10:	3c00000b 	ldhu	r16,0(r7)
 8006f14:	0023883a 	mov	r17,zero
 8006f18:	39c00104 	addi	r7,r7,4
 8006f1c:	d9c14015 	stw	r7,1280(sp)
 8006f20:	003f0006 	br	8006b24 <___vfprintf_internal_r+0x1134>
 8006f24:	dc400d17 	ldw	r17,52(sp)
 8006f28:	070200b4 	movhi	fp,2050
 8006f2c:	e7205a84 	addi	fp,fp,-32406
 8006f30:	9425883a 	add	r18,r18,r16
 8006f34:	8c400044 	addi	r17,r17,1
 8006f38:	008001c4 	movi	r2,7
 8006f3c:	1f000015 	stw	fp,0(r3)
 8006f40:	1c000115 	stw	r16,4(r3)
 8006f44:	dc800e15 	stw	r18,56(sp)
 8006f48:	dc400d15 	stw	r17,52(sp)
 8006f4c:	147d7616 	blt	r2,r17,8006528 <___vfprintf_internal_r+0xb38>
 8006f50:	18c00204 	addi	r3,r3,8
 8006f54:	003d7b06 	br	8006544 <___vfprintf_internal_r+0xb54>
 8006f58:	dc800e17 	ldw	r18,56(sp)
 8006f5c:	dc400d17 	ldw	r17,52(sp)
 8006f60:	070200b4 	movhi	fp,2050
 8006f64:	e7205e84 	addi	fp,fp,-32390
 8006f68:	003bc006 	br	8005e6c <___vfprintf_internal_r+0x47c>
 8006f6c:	d9014f17 	ldw	r4,1340(sp)
 8006f70:	b00b883a 	mov	r5,r22
 8006f74:	d9800c04 	addi	r6,sp,48
 8006f78:	80059980 	call	8005998 <__sprint_r>
 8006f7c:	103c541e 	bne	r2,zero,80060d0 <___vfprintf_internal_r+0x6e0>
 8006f80:	dc800e17 	ldw	r18,56(sp)
 8006f84:	d8c01904 	addi	r3,sp,100
 8006f88:	003ce906 	br	8006330 <___vfprintf_internal_r+0x940>
 8006f8c:	3c000017 	ldw	r16,0(r7)
 8006f90:	0009883a 	mov	r4,zero
 8006f94:	39c00104 	addi	r7,r7,4
 8006f98:	0023883a 	mov	r17,zero
 8006f9c:	d9c14015 	stw	r7,1280(sp)
 8006fa0:	d8000405 	stb	zero,16(sp)
 8006fa4:	003d2006 	br	8006428 <___vfprintf_internal_r+0xa38>
 8006fa8:	38800017 	ldw	r2,0(r7)
 8006fac:	39c00104 	addi	r7,r7,4
 8006fb0:	d9c14015 	stw	r7,1280(sp)
 8006fb4:	1023d7fa 	srai	r17,r2,31
 8006fb8:	1021883a 	mov	r16,r2
 8006fbc:	003d1806 	br	8006420 <___vfprintf_internal_r+0xa30>
 8006fc0:	3c000017 	ldw	r16,0(r7)
 8006fc4:	01000044 	movi	r4,1
 8006fc8:	39c00104 	addi	r7,r7,4
 8006fcc:	0023883a 	mov	r17,zero
 8006fd0:	d9c14015 	stw	r7,1280(sp)
 8006fd4:	d8000405 	stb	zero,16(sp)
 8006fd8:	003d1306 	br	8006428 <___vfprintf_internal_r+0xa38>
 8006fdc:	00820074 	movhi	r2,2049
 8006fe0:	109cd604 	addi	r2,r2,29528
 8006fe4:	94800044 	addi	r18,r18,1
 8006fe8:	8c400044 	addi	r17,r17,1
 8006fec:	a8800015 	stw	r2,0(r21)
 8006ff0:	00c00044 	movi	r3,1
 8006ff4:	008001c4 	movi	r2,7
 8006ff8:	a8c00115 	stw	r3,4(r21)
 8006ffc:	dc800e15 	stw	r18,56(sp)
 8007000:	dc400d15 	stw	r17,52(sp)
 8007004:	1440ca16 	blt	r2,r17,8007330 <___vfprintf_internal_r+0x1940>
 8007008:	a8c00204 	addi	r3,r21,8
 800700c:	2000061e 	bne	r4,zero,8007028 <___vfprintf_internal_r+0x1638>
 8007010:	d9414717 	ldw	r5,1308(sp)
 8007014:	2800041e 	bne	r5,zero,8007028 <___vfprintf_internal_r+0x1638>
 8007018:	d9814c17 	ldw	r6,1328(sp)
 800701c:	3080004c 	andi	r2,r6,1
 8007020:	1005003a 	cmpeq	r2,r2,zero
 8007024:	103bf01e 	bne	r2,zero,8005fe8 <___vfprintf_internal_r+0x5f8>
 8007028:	00800044 	movi	r2,1
 800702c:	dc400d17 	ldw	r17,52(sp)
 8007030:	18800115 	stw	r2,4(r3)
 8007034:	d8814917 	ldw	r2,1316(sp)
 8007038:	94800044 	addi	r18,r18,1
 800703c:	8c400044 	addi	r17,r17,1
 8007040:	18800015 	stw	r2,0(r3)
 8007044:	008001c4 	movi	r2,7
 8007048:	dc800e15 	stw	r18,56(sp)
 800704c:	dc400d15 	stw	r17,52(sp)
 8007050:	1440ca16 	blt	r2,r17,800737c <___vfprintf_internal_r+0x198c>
 8007054:	18c00204 	addi	r3,r3,8
 8007058:	0121c83a 	sub	r16,zero,r4
 800705c:	0400500e 	bge	zero,r16,80071a0 <___vfprintf_internal_r+0x17b0>
 8007060:	00800404 	movi	r2,16
 8007064:	1400800e 	bge	r2,r16,8007268 <___vfprintf_internal_r+0x1878>
 8007068:	1027883a 	mov	r19,r2
 800706c:	070200b4 	movhi	fp,2050
 8007070:	e7205a84 	addi	fp,fp,-32406
 8007074:	050001c4 	movi	r20,7
 8007078:	00000306 	br	8007088 <___vfprintf_internal_r+0x1698>
 800707c:	18c00204 	addi	r3,r3,8
 8007080:	843ffc04 	addi	r16,r16,-16
 8007084:	9c007a0e 	bge	r19,r16,8007270 <___vfprintf_internal_r+0x1880>
 8007088:	94800404 	addi	r18,r18,16
 800708c:	8c400044 	addi	r17,r17,1
 8007090:	1f000015 	stw	fp,0(r3)
 8007094:	1cc00115 	stw	r19,4(r3)
 8007098:	dc800e15 	stw	r18,56(sp)
 800709c:	dc400d15 	stw	r17,52(sp)
 80070a0:	a47ff60e 	bge	r20,r17,800707c <___vfprintf_internal_r+0x168c>
 80070a4:	d9014f17 	ldw	r4,1340(sp)
 80070a8:	b00b883a 	mov	r5,r22
 80070ac:	d9800c04 	addi	r6,sp,48
 80070b0:	80059980 	call	8005998 <__sprint_r>
 80070b4:	103c061e 	bne	r2,zero,80060d0 <___vfprintf_internal_r+0x6e0>
 80070b8:	dc800e17 	ldw	r18,56(sp)
 80070bc:	dc400d17 	ldw	r17,52(sp)
 80070c0:	d8c01904 	addi	r3,sp,100
 80070c4:	003fee06 	br	8007080 <___vfprintf_internal_r+0x1690>
 80070c8:	3c000017 	ldw	r16,0(r7)
 80070cc:	0023883a 	mov	r17,zero
 80070d0:	39c00104 	addi	r7,r7,4
 80070d4:	d9c14015 	stw	r7,1280(sp)
 80070d8:	003e9206 	br	8006b24 <___vfprintf_internal_r+0x1134>
 80070dc:	d9401904 	addi	r5,sp,100
 80070e0:	dd000f04 	addi	r20,sp,60
 80070e4:	d9414115 	stw	r5,1284(sp)
 80070e8:	d9814417 	ldw	r6,1296(sp)
 80070ec:	880a973a 	slli	r5,r17,28
 80070f0:	8004d13a 	srli	r2,r16,4
 80070f4:	810003cc 	andi	r4,r16,15
 80070f8:	3109883a 	add	r4,r6,r4
 80070fc:	2884b03a 	or	r2,r5,r2
 8007100:	21400003 	ldbu	r5,0(r4)
 8007104:	d9014117 	ldw	r4,1284(sp)
 8007108:	8806d13a 	srli	r3,r17,4
 800710c:	1021883a 	mov	r16,r2
 8007110:	213fffc4 	addi	r4,r4,-1
 8007114:	d9014115 	stw	r4,1284(sp)
 8007118:	d9814117 	ldw	r6,1284(sp)
 800711c:	10c8b03a 	or	r4,r2,r3
 8007120:	1823883a 	mov	r17,r3
 8007124:	31400005 	stb	r5,0(r6)
 8007128:	203fef1e 	bne	r4,zero,80070e8 <___vfprintf_internal_r+0x16f8>
 800712c:	003ccb06 	br	800645c <___vfprintf_internal_r+0xa6c>
 8007130:	00800c04 	movi	r2,48
 8007134:	d98018c4 	addi	r6,sp,99
 8007138:	dd000f04 	addi	r20,sp,60
 800713c:	d88018c5 	stb	r2,99(sp)
 8007140:	d9814115 	stw	r6,1284(sp)
 8007144:	003cc506 	br	800645c <___vfprintf_internal_r+0xa6c>
 8007148:	dc400d17 	ldw	r17,52(sp)
 800714c:	070200b4 	movhi	fp,2050
 8007150:	e7205e84 	addi	fp,fp,-32390
 8007154:	003bc706 	br	8006074 <___vfprintf_internal_r+0x684>
 8007158:	d9414c17 	ldw	r5,1328(sp)
 800715c:	2880040c 	andi	r2,r5,16
 8007160:	10007c26 	beq	r2,zero,8007354 <___vfprintf_internal_r+0x1964>
 8007164:	38800017 	ldw	r2,0(r7)
 8007168:	39c00104 	addi	r7,r7,4
 800716c:	d9c14015 	stw	r7,1280(sp)
 8007170:	d9814b17 	ldw	r6,1324(sp)
 8007174:	d9c14017 	ldw	r7,1280(sp)
 8007178:	11800015 	stw	r6,0(r2)
 800717c:	003a7806 	br	8005b60 <___vfprintf_internal_r+0x170>
 8007180:	d9014f17 	ldw	r4,1340(sp)
 8007184:	b00b883a 	mov	r5,r22
 8007188:	d9800c04 	addi	r6,sp,48
 800718c:	80059980 	call	8005998 <__sprint_r>
 8007190:	103bcf1e 	bne	r2,zero,80060d0 <___vfprintf_internal_r+0x6e0>
 8007194:	dc800e17 	ldw	r18,56(sp)
 8007198:	dc400d17 	ldw	r17,52(sp)
 800719c:	d8c01904 	addi	r3,sp,100
 80071a0:	d9014717 	ldw	r4,1308(sp)
 80071a4:	d9414117 	ldw	r5,1284(sp)
 80071a8:	8c400044 	addi	r17,r17,1
 80071ac:	9125883a 	add	r18,r18,r4
 80071b0:	008001c4 	movi	r2,7
 80071b4:	19400015 	stw	r5,0(r3)
 80071b8:	19000115 	stw	r4,4(r3)
 80071bc:	dc800e15 	stw	r18,56(sp)
 80071c0:	dc400d15 	stw	r17,52(sp)
 80071c4:	147cee16 	blt	r2,r17,8006580 <___vfprintf_internal_r+0xb90>
 80071c8:	18c00204 	addi	r3,r3,8
 80071cc:	003b8606 	br	8005fe8 <___vfprintf_internal_r+0x5f8>
 80071d0:	38c00017 	ldw	r3,0(r7)
 80071d4:	39000204 	addi	r4,r7,8
 80071d8:	d9014015 	stw	r4,1280(sp)
 80071dc:	d8c14215 	stw	r3,1288(sp)
 80071e0:	39c00117 	ldw	r7,4(r7)
 80071e4:	d9c14315 	stw	r7,1292(sp)
 80071e8:	003e2006 	br	8006a6c <___vfprintf_internal_r+0x107c>
 80071ec:	0005883a 	mov	r2,zero
 80071f0:	1409c83a 	sub	r4,r2,r16
 80071f4:	1105803a 	cmpltu	r2,r2,r4
 80071f8:	044bc83a 	sub	r5,zero,r17
 80071fc:	2885c83a 	sub	r2,r5,r2
 8007200:	2021883a 	mov	r16,r4
 8007204:	1023883a 	mov	r17,r2
 8007208:	01000044 	movi	r4,1
 800720c:	00800b44 	movi	r2,45
 8007210:	d8800405 	stb	r2,16(sp)
 8007214:	003c8406 	br	8006428 <___vfprintf_internal_r+0xa38>
 8007218:	d9014f17 	ldw	r4,1340(sp)
 800721c:	b00b883a 	mov	r5,r22
 8007220:	d9800c04 	addi	r6,sp,48
 8007224:	80059980 	call	8005998 <__sprint_r>
 8007228:	103ba91e 	bne	r2,zero,80060d0 <___vfprintf_internal_r+0x6e0>
 800722c:	dc800e17 	ldw	r18,56(sp)
 8007230:	dc400d17 	ldw	r17,52(sp)
 8007234:	d9000517 	ldw	r4,20(sp)
 8007238:	d9401904 	addi	r5,sp,100
 800723c:	003da706 	br	80068dc <___vfprintf_internal_r+0xeec>
 8007240:	d9014f17 	ldw	r4,1340(sp)
 8007244:	b00b883a 	mov	r5,r22
 8007248:	d9800c04 	addi	r6,sp,48
 800724c:	80059980 	call	8005998 <__sprint_r>
 8007250:	103b9f1e 	bne	r2,zero,80060d0 <___vfprintf_internal_r+0x6e0>
 8007254:	dc800e17 	ldw	r18,56(sp)
 8007258:	dc400d17 	ldw	r17,52(sp)
 800725c:	d9000517 	ldw	r4,20(sp)
 8007260:	d8c01904 	addi	r3,sp,100
 8007264:	003d9106 	br	80068ac <___vfprintf_internal_r+0xebc>
 8007268:	070200b4 	movhi	fp,2050
 800726c:	e7205a84 	addi	fp,fp,-32406
 8007270:	9425883a 	add	r18,r18,r16
 8007274:	8c400044 	addi	r17,r17,1
 8007278:	008001c4 	movi	r2,7
 800727c:	1f000015 	stw	fp,0(r3)
 8007280:	1c000115 	stw	r16,4(r3)
 8007284:	dc800e15 	stw	r18,56(sp)
 8007288:	dc400d15 	stw	r17,52(sp)
 800728c:	147fbc16 	blt	r2,r17,8007180 <___vfprintf_internal_r+0x1790>
 8007290:	18c00204 	addi	r3,r3,8
 8007294:	003fc206 	br	80071a0 <___vfprintf_internal_r+0x17b0>
 8007298:	d9014f17 	ldw	r4,1340(sp)
 800729c:	b00b883a 	mov	r5,r22
 80072a0:	d9800c04 	addi	r6,sp,48
 80072a4:	80059980 	call	8005998 <__sprint_r>
 80072a8:	103b891e 	bne	r2,zero,80060d0 <___vfprintf_internal_r+0x6e0>
 80072ac:	dc800e17 	ldw	r18,56(sp)
 80072b0:	d9000517 	ldw	r4,20(sp)
 80072b4:	d8c01904 	addi	r3,sp,100
 80072b8:	003d0206 	br	80066c4 <___vfprintf_internal_r+0xcd4>
 80072bc:	070200b4 	movhi	fp,2050
 80072c0:	e7205a84 	addi	fp,fp,-32406
 80072c4:	003be406 	br	8006258 <___vfprintf_internal_r+0x868>
 80072c8:	008200b4 	movhi	r2,2050
 80072cc:	10a04a04 	addi	r2,r2,-32472
 80072d0:	d8814115 	stw	r2,1284(sp)
 80072d4:	003df506 	br	8006aac <___vfprintf_internal_r+0x10bc>
 80072d8:	d9014217 	ldw	r4,1288(sp)
 80072dc:	d9414317 	ldw	r5,1292(sp)
 80072e0:	800bc3c0 	call	800bc3c <__isnand>
 80072e4:	10003926 	beq	r2,zero,80073cc <___vfprintf_internal_r+0x19dc>
 80072e8:	d9414d17 	ldw	r5,1332(sp)
 80072ec:	008011c4 	movi	r2,71
 80072f0:	1140ce16 	blt	r2,r5,800762c <___vfprintf_internal_r+0x1c3c>
 80072f4:	018200b4 	movhi	r6,2050
 80072f8:	31a04b04 	addi	r6,r6,-32468
 80072fc:	d9814115 	stw	r6,1284(sp)
 8007300:	003dea06 	br	8006aac <___vfprintf_internal_r+0x10bc>
 8007304:	d9014c17 	ldw	r4,1328(sp)
 8007308:	bdc00044 	addi	r23,r23,1
 800730c:	b8c00007 	ldb	r3,0(r23)
 8007310:	21000814 	ori	r4,r4,32
 8007314:	d9014c15 	stw	r4,1328(sp)
 8007318:	003a3406 	br	8005bec <___vfprintf_internal_r+0x1fc>
 800731c:	dcc14515 	stw	r19,1300(sp)
 8007320:	98011016 	blt	r19,zero,8007764 <___vfprintf_internal_r+0x1d74>
 8007324:	980f883a 	mov	r7,r19
 8007328:	d8014615 	stw	zero,1304(sp)
 800732c:	003c5206 	br	8006478 <___vfprintf_internal_r+0xa88>
 8007330:	d9014f17 	ldw	r4,1340(sp)
 8007334:	b00b883a 	mov	r5,r22
 8007338:	d9800c04 	addi	r6,sp,48
 800733c:	80059980 	call	8005998 <__sprint_r>
 8007340:	103b631e 	bne	r2,zero,80060d0 <___vfprintf_internal_r+0x6e0>
 8007344:	dc800e17 	ldw	r18,56(sp)
 8007348:	d9000517 	ldw	r4,20(sp)
 800734c:	d8c01904 	addi	r3,sp,100
 8007350:	003f2e06 	br	800700c <___vfprintf_internal_r+0x161c>
 8007354:	d8c14c17 	ldw	r3,1328(sp)
 8007358:	1880100c 	andi	r2,r3,64
 800735c:	1000a026 	beq	r2,zero,80075e0 <___vfprintf_internal_r+0x1bf0>
 8007360:	38800017 	ldw	r2,0(r7)
 8007364:	39c00104 	addi	r7,r7,4
 8007368:	d9c14015 	stw	r7,1280(sp)
 800736c:	d9014b17 	ldw	r4,1324(sp)
 8007370:	d9c14017 	ldw	r7,1280(sp)
 8007374:	1100000d 	sth	r4,0(r2)
 8007378:	0039f906 	br	8005b60 <___vfprintf_internal_r+0x170>
 800737c:	d9014f17 	ldw	r4,1340(sp)
 8007380:	b00b883a 	mov	r5,r22
 8007384:	d9800c04 	addi	r6,sp,48
 8007388:	80059980 	call	8005998 <__sprint_r>
 800738c:	103b501e 	bne	r2,zero,80060d0 <___vfprintf_internal_r+0x6e0>
 8007390:	dc800e17 	ldw	r18,56(sp)
 8007394:	dc400d17 	ldw	r17,52(sp)
 8007398:	d9000517 	ldw	r4,20(sp)
 800739c:	d8c01904 	addi	r3,sp,100
 80073a0:	003f2d06 	br	8007058 <___vfprintf_internal_r+0x1668>
 80073a4:	00800184 	movi	r2,6
 80073a8:	14c09a36 	bltu	r2,r19,8007614 <___vfprintf_internal_r+0x1c24>
 80073ac:	dcc14515 	stw	r19,1300(sp)
 80073b0:	9800010e 	bge	r19,zero,80073b8 <___vfprintf_internal_r+0x19c8>
 80073b4:	d8014515 	stw	zero,1300(sp)
 80073b8:	008200b4 	movhi	r2,2050
 80073bc:	10a04d04 	addi	r2,r2,-32460
 80073c0:	980f883a 	mov	r7,r19
 80073c4:	d8814115 	stw	r2,1284(sp)
 80073c8:	003a7806 	br	8005dac <___vfprintf_internal_r+0x3bc>
 80073cc:	00bfffc4 	movi	r2,-1
 80073d0:	9880e226 	beq	r19,r2,800775c <___vfprintf_internal_r+0x1d6c>
 80073d4:	d9414d17 	ldw	r5,1332(sp)
 80073d8:	008019c4 	movi	r2,103
 80073dc:	2880dc26 	beq	r5,r2,8007750 <___vfprintf_internal_r+0x1d60>
 80073e0:	008011c4 	movi	r2,71
 80073e4:	2880da26 	beq	r5,r2,8007750 <___vfprintf_internal_r+0x1d60>
 80073e8:	d9414c17 	ldw	r5,1328(sp)
 80073ec:	d9014317 	ldw	r4,1292(sp)
 80073f0:	d9814217 	ldw	r6,1288(sp)
 80073f4:	29404014 	ori	r5,r5,256
 80073f8:	d9414c15 	stw	r5,1328(sp)
 80073fc:	2000cc16 	blt	r4,zero,8007730 <___vfprintf_internal_r+0x1d40>
 8007400:	3021883a 	mov	r16,r6
 8007404:	2023883a 	mov	r17,r4
 8007408:	0039883a 	mov	fp,zero
 800740c:	d9414d17 	ldw	r5,1332(sp)
 8007410:	00801984 	movi	r2,102
 8007414:	2880b726 	beq	r5,r2,80076f4 <___vfprintf_internal_r+0x1d04>
 8007418:	00801184 	movi	r2,70
 800741c:	2880b526 	beq	r5,r2,80076f4 <___vfprintf_internal_r+0x1d04>
 8007420:	00801944 	movi	r2,101
 8007424:	2880c826 	beq	r5,r2,8007748 <___vfprintf_internal_r+0x1d58>
 8007428:	00801144 	movi	r2,69
 800742c:	2880c626 	beq	r5,r2,8007748 <___vfprintf_internal_r+0x1d58>
 8007430:	9829883a 	mov	r20,r19
 8007434:	d9014f17 	ldw	r4,1340(sp)
 8007438:	d8800504 	addi	r2,sp,20
 800743c:	880d883a 	mov	r6,r17
 8007440:	d8800115 	stw	r2,4(sp)
 8007444:	d8c00604 	addi	r3,sp,24
 8007448:	d8800704 	addi	r2,sp,28
 800744c:	800b883a 	mov	r5,r16
 8007450:	01c00084 	movi	r7,2
 8007454:	d8c00215 	stw	r3,8(sp)
 8007458:	d8800315 	stw	r2,12(sp)
 800745c:	dd000015 	stw	r20,0(sp)
 8007460:	8007cfc0 	call	8007cfc <_dtoa_r>
 8007464:	d9814d17 	ldw	r6,1332(sp)
 8007468:	d8814115 	stw	r2,1284(sp)
 800746c:	008019c4 	movi	r2,103
 8007470:	30809526 	beq	r6,r2,80076c8 <___vfprintf_internal_r+0x1cd8>
 8007474:	d8c14d17 	ldw	r3,1332(sp)
 8007478:	008011c4 	movi	r2,71
 800747c:	18809226 	beq	r3,r2,80076c8 <___vfprintf_internal_r+0x1cd8>
 8007480:	d9414117 	ldw	r5,1284(sp)
 8007484:	d9814d17 	ldw	r6,1332(sp)
 8007488:	00801984 	movi	r2,102
 800748c:	2d25883a 	add	r18,r5,r20
 8007490:	30808626 	beq	r6,r2,80076ac <___vfprintf_internal_r+0x1cbc>
 8007494:	00801184 	movi	r2,70
 8007498:	30808426 	beq	r6,r2,80076ac <___vfprintf_internal_r+0x1cbc>
 800749c:	000d883a 	mov	r6,zero
 80074a0:	000f883a 	mov	r7,zero
 80074a4:	880b883a 	mov	r5,r17
 80074a8:	8009883a 	mov	r4,r16
 80074ac:	800d6f80 	call	800d6f8 <__eqdf2>
 80074b0:	1000751e 	bne	r2,zero,8007688 <___vfprintf_internal_r+0x1c98>
 80074b4:	9005883a 	mov	r2,r18
 80074b8:	dc800715 	stw	r18,28(sp)
 80074bc:	d9014117 	ldw	r4,1284(sp)
 80074c0:	d9414d17 	ldw	r5,1332(sp)
 80074c4:	00c019c4 	movi	r3,103
 80074c8:	1125c83a 	sub	r18,r2,r4
 80074cc:	28c06826 	beq	r5,r3,8007670 <___vfprintf_internal_r+0x1c80>
 80074d0:	008011c4 	movi	r2,71
 80074d4:	28806626 	beq	r5,r2,8007670 <___vfprintf_internal_r+0x1c80>
 80074d8:	d9000517 	ldw	r4,20(sp)
 80074dc:	d8c14d17 	ldw	r3,1332(sp)
 80074e0:	00801944 	movi	r2,101
 80074e4:	10c05516 	blt	r2,r3,800763c <___vfprintf_internal_r+0x1c4c>
 80074e8:	213fffc4 	addi	r4,r4,-1
 80074ec:	d9000515 	stw	r4,20(sp)
 80074f0:	d8c00805 	stb	r3,32(sp)
 80074f4:	2021883a 	mov	r16,r4
 80074f8:	2000c116 	blt	r4,zero,8007800 <___vfprintf_internal_r+0x1e10>
 80074fc:	00800ac4 	movi	r2,43
 8007500:	d8800845 	stb	r2,33(sp)
 8007504:	00800244 	movi	r2,9
 8007508:	1400af0e 	bge	r2,r16,80077c8 <___vfprintf_internal_r+0x1dd8>
 800750c:	1027883a 	mov	r19,r2
 8007510:	dc400b84 	addi	r17,sp,46
 8007514:	8009883a 	mov	r4,r16
 8007518:	01400284 	movi	r5,10
 800751c:	8002f800 	call	8002f80 <__modsi3>
 8007520:	10800c04 	addi	r2,r2,48
 8007524:	8c7fffc4 	addi	r17,r17,-1
 8007528:	8009883a 	mov	r4,r16
 800752c:	01400284 	movi	r5,10
 8007530:	88800005 	stb	r2,0(r17)
 8007534:	8002f200 	call	8002f20 <__divsi3>
 8007538:	1021883a 	mov	r16,r2
 800753c:	98bff516 	blt	r19,r2,8007514 <___vfprintf_internal_r+0x1b24>
 8007540:	10c00c04 	addi	r3,r2,48
 8007544:	d88009c4 	addi	r2,sp,39
 8007548:	108001c4 	addi	r2,r2,7
 800754c:	897fffc4 	addi	r5,r17,-1
 8007550:	88ffffc5 	stb	r3,-1(r17)
 8007554:	2880a72e 	bgeu	r5,r2,80077f4 <___vfprintf_internal_r+0x1e04>
 8007558:	1009883a 	mov	r4,r2
 800755c:	d9800804 	addi	r6,sp,32
 8007560:	d8c00884 	addi	r3,sp,34
 8007564:	28800003 	ldbu	r2,0(r5)
 8007568:	29400044 	addi	r5,r5,1
 800756c:	18800005 	stb	r2,0(r3)
 8007570:	18c00044 	addi	r3,r3,1
 8007574:	293ffb36 	bltu	r5,r4,8007564 <___vfprintf_internal_r+0x1b74>
 8007578:	1987c83a 	sub	r3,r3,r6
 800757c:	00800044 	movi	r2,1
 8007580:	d8c14815 	stw	r3,1312(sp)
 8007584:	90cf883a 	add	r7,r18,r3
 8007588:	1480960e 	bge	r2,r18,80077e4 <___vfprintf_internal_r+0x1df4>
 800758c:	39c00044 	addi	r7,r7,1
 8007590:	d9c14515 	stw	r7,1300(sp)
 8007594:	38003416 	blt	r7,zero,8007668 <___vfprintf_internal_r+0x1c78>
 8007598:	e0803fcc 	andi	r2,fp,255
 800759c:	1080201c 	xori	r2,r2,128
 80075a0:	10bfe004 	addi	r2,r2,-128
 80075a4:	10004e26 	beq	r2,zero,80076e0 <___vfprintf_internal_r+0x1cf0>
 80075a8:	00800b44 	movi	r2,45
 80075ac:	dc814715 	stw	r18,1308(sp)
 80075b0:	d8014615 	stw	zero,1304(sp)
 80075b4:	d8800405 	stb	r2,16(sp)
 80075b8:	003bb106 	br	8006480 <___vfprintf_internal_r+0xa90>
 80075bc:	00800b44 	movi	r2,45
 80075c0:	d8800405 	stb	r2,16(sp)
 80075c4:	003d3306 	br	8006a94 <___vfprintf_internal_r+0x10a4>
 80075c8:	d9014f17 	ldw	r4,1340(sp)
 80075cc:	b00b883a 	mov	r5,r22
 80075d0:	d9800c04 	addi	r6,sp,48
 80075d4:	80059980 	call	8005998 <__sprint_r>
 80075d8:	103abd1e 	bne	r2,zero,80060d0 <___vfprintf_internal_r+0x6e0>
 80075dc:	003abb06 	br	80060cc <___vfprintf_internal_r+0x6dc>
 80075e0:	38800017 	ldw	r2,0(r7)
 80075e4:	39c00104 	addi	r7,r7,4
 80075e8:	d9c14015 	stw	r7,1280(sp)
 80075ec:	d9414b17 	ldw	r5,1324(sp)
 80075f0:	d9c14017 	ldw	r7,1280(sp)
 80075f4:	11400015 	stw	r5,0(r2)
 80075f8:	00395906 	br	8005b60 <___vfprintf_internal_r+0x170>
 80075fc:	980f883a 	mov	r7,r19
 8007600:	dcc14515 	stw	r19,1300(sp)
 8007604:	d8014615 	stw	zero,1304(sp)
 8007608:	003b9b06 	br	8006478 <___vfprintf_internal_r+0xa88>
 800760c:	0027883a 	mov	r19,zero
 8007610:	00397806 	br	8005bf4 <___vfprintf_internal_r+0x204>
 8007614:	00c200b4 	movhi	r3,2050
 8007618:	18e04d04 	addi	r3,r3,-32460
 800761c:	100f883a 	mov	r7,r2
 8007620:	d8814515 	stw	r2,1300(sp)
 8007624:	d8c14115 	stw	r3,1284(sp)
 8007628:	0039e006 	br	8005dac <___vfprintf_internal_r+0x3bc>
 800762c:	008200b4 	movhi	r2,2050
 8007630:	10a04c04 	addi	r2,r2,-32464
 8007634:	d8814115 	stw	r2,1284(sp)
 8007638:	003d1c06 	br	8006aac <___vfprintf_internal_r+0x10bc>
 800763c:	d9414d17 	ldw	r5,1332(sp)
 8007640:	00801984 	movi	r2,102
 8007644:	28804926 	beq	r5,r2,800776c <___vfprintf_internal_r+0x1d7c>
 8007648:	200f883a 	mov	r7,r4
 800764c:	24805716 	blt	r4,r18,80077ac <___vfprintf_internal_r+0x1dbc>
 8007650:	d9414c17 	ldw	r5,1328(sp)
 8007654:	2880004c 	andi	r2,r5,1
 8007658:	10000126 	beq	r2,zero,8007660 <___vfprintf_internal_r+0x1c70>
 800765c:	21c00044 	addi	r7,r4,1
 8007660:	d9c14515 	stw	r7,1300(sp)
 8007664:	383fcc0e 	bge	r7,zero,8007598 <___vfprintf_internal_r+0x1ba8>
 8007668:	d8014515 	stw	zero,1300(sp)
 800766c:	003fca06 	br	8007598 <___vfprintf_internal_r+0x1ba8>
 8007670:	d9000517 	ldw	r4,20(sp)
 8007674:	00bfff04 	movi	r2,-4
 8007678:	1100480e 	bge	r2,r4,800779c <___vfprintf_internal_r+0x1dac>
 800767c:	99004716 	blt	r19,r4,800779c <___vfprintf_internal_r+0x1dac>
 8007680:	d8c14d15 	stw	r3,1332(sp)
 8007684:	003ff006 	br	8007648 <___vfprintf_internal_r+0x1c58>
 8007688:	d8800717 	ldw	r2,28(sp)
 800768c:	14bf8b2e 	bgeu	r2,r18,80074bc <___vfprintf_internal_r+0x1acc>
 8007690:	9007883a 	mov	r3,r18
 8007694:	01000c04 	movi	r4,48
 8007698:	11000005 	stb	r4,0(r2)
 800769c:	10800044 	addi	r2,r2,1
 80076a0:	d8800715 	stw	r2,28(sp)
 80076a4:	18bffc1e 	bne	r3,r2,8007698 <___vfprintf_internal_r+0x1ca8>
 80076a8:	003f8406 	br	80074bc <___vfprintf_internal_r+0x1acc>
 80076ac:	d8814117 	ldw	r2,1284(sp)
 80076b0:	10c00007 	ldb	r3,0(r2)
 80076b4:	00800c04 	movi	r2,48
 80076b8:	18805b26 	beq	r3,r2,8007828 <___vfprintf_internal_r+0x1e38>
 80076bc:	d9000517 	ldw	r4,20(sp)
 80076c0:	9125883a 	add	r18,r18,r4
 80076c4:	003f7506 	br	800749c <___vfprintf_internal_r+0x1aac>
 80076c8:	d9014c17 	ldw	r4,1328(sp)
 80076cc:	2080004c 	andi	r2,r4,1
 80076d0:	1005003a 	cmpeq	r2,r2,zero
 80076d4:	103f6a26 	beq	r2,zero,8007480 <___vfprintf_internal_r+0x1a90>
 80076d8:	d8800717 	ldw	r2,28(sp)
 80076dc:	003f7706 	br	80074bc <___vfprintf_internal_r+0x1acc>
 80076e0:	d9c14515 	stw	r7,1300(sp)
 80076e4:	38004d16 	blt	r7,zero,800781c <___vfprintf_internal_r+0x1e2c>
 80076e8:	dc814715 	stw	r18,1308(sp)
 80076ec:	d8014615 	stw	zero,1304(sp)
 80076f0:	003b6106 	br	8006478 <___vfprintf_internal_r+0xa88>
 80076f4:	d9014f17 	ldw	r4,1340(sp)
 80076f8:	d8800504 	addi	r2,sp,20
 80076fc:	d8800115 	stw	r2,4(sp)
 8007700:	d8c00604 	addi	r3,sp,24
 8007704:	d8800704 	addi	r2,sp,28
 8007708:	800b883a 	mov	r5,r16
 800770c:	880d883a 	mov	r6,r17
 8007710:	01c000c4 	movi	r7,3
 8007714:	d8c00215 	stw	r3,8(sp)
 8007718:	d8800315 	stw	r2,12(sp)
 800771c:	dcc00015 	stw	r19,0(sp)
 8007720:	9829883a 	mov	r20,r19
 8007724:	8007cfc0 	call	8007cfc <_dtoa_r>
 8007728:	d8814115 	stw	r2,1284(sp)
 800772c:	003f5106 	br	8007474 <___vfprintf_internal_r+0x1a84>
 8007730:	d8c14217 	ldw	r3,1288(sp)
 8007734:	d9014317 	ldw	r4,1292(sp)
 8007738:	07000b44 	movi	fp,45
 800773c:	1821883a 	mov	r16,r3
 8007740:	2460003c 	xorhi	r17,r4,32768
 8007744:	003f3106 	br	800740c <___vfprintf_internal_r+0x1a1c>
 8007748:	9d000044 	addi	r20,r19,1
 800774c:	003f3906 	br	8007434 <___vfprintf_internal_r+0x1a44>
 8007750:	983f251e 	bne	r19,zero,80073e8 <___vfprintf_internal_r+0x19f8>
 8007754:	04c00044 	movi	r19,1
 8007758:	003f2306 	br	80073e8 <___vfprintf_internal_r+0x19f8>
 800775c:	04c00184 	movi	r19,6
 8007760:	003f2106 	br	80073e8 <___vfprintf_internal_r+0x19f8>
 8007764:	d8014515 	stw	zero,1300(sp)
 8007768:	003eee06 	br	8007324 <___vfprintf_internal_r+0x1934>
 800776c:	200f883a 	mov	r7,r4
 8007770:	0100370e 	bge	zero,r4,8007850 <___vfprintf_internal_r+0x1e60>
 8007774:	9800031e 	bne	r19,zero,8007784 <___vfprintf_internal_r+0x1d94>
 8007778:	d9814c17 	ldw	r6,1328(sp)
 800777c:	3080004c 	andi	r2,r6,1
 8007780:	103fb726 	beq	r2,zero,8007660 <___vfprintf_internal_r+0x1c70>
 8007784:	20800044 	addi	r2,r4,1
 8007788:	98a7883a 	add	r19,r19,r2
 800778c:	dcc14515 	stw	r19,1300(sp)
 8007790:	980f883a 	mov	r7,r19
 8007794:	983f800e 	bge	r19,zero,8007598 <___vfprintf_internal_r+0x1ba8>
 8007798:	003fb306 	br	8007668 <___vfprintf_internal_r+0x1c78>
 800779c:	d9814d17 	ldw	r6,1332(sp)
 80077a0:	31bfff84 	addi	r6,r6,-2
 80077a4:	d9814d15 	stw	r6,1332(sp)
 80077a8:	003f4c06 	br	80074dc <___vfprintf_internal_r+0x1aec>
 80077ac:	0100180e 	bge	zero,r4,8007810 <___vfprintf_internal_r+0x1e20>
 80077b0:	00800044 	movi	r2,1
 80077b4:	1485883a 	add	r2,r2,r18
 80077b8:	d8814515 	stw	r2,1300(sp)
 80077bc:	100f883a 	mov	r7,r2
 80077c0:	103f750e 	bge	r2,zero,8007598 <___vfprintf_internal_r+0x1ba8>
 80077c4:	003fa806 	br	8007668 <___vfprintf_internal_r+0x1c78>
 80077c8:	80c00c04 	addi	r3,r16,48
 80077cc:	00800c04 	movi	r2,48
 80077d0:	d8c008c5 	stb	r3,35(sp)
 80077d4:	d9800804 	addi	r6,sp,32
 80077d8:	d8c00904 	addi	r3,sp,36
 80077dc:	d8800885 	stb	r2,34(sp)
 80077e0:	003f6506 	br	8007578 <___vfprintf_internal_r+0x1b88>
 80077e4:	d9014c17 	ldw	r4,1328(sp)
 80077e8:	2084703a 	and	r2,r4,r2
 80077ec:	103f9c26 	beq	r2,zero,8007660 <___vfprintf_internal_r+0x1c70>
 80077f0:	003f6606 	br	800758c <___vfprintf_internal_r+0x1b9c>
 80077f4:	d9800804 	addi	r6,sp,32
 80077f8:	d8c00884 	addi	r3,sp,34
 80077fc:	003f5e06 	br	8007578 <___vfprintf_internal_r+0x1b88>
 8007800:	00800b44 	movi	r2,45
 8007804:	0121c83a 	sub	r16,zero,r4
 8007808:	d8800845 	stb	r2,33(sp)
 800780c:	003f3d06 	br	8007504 <___vfprintf_internal_r+0x1b14>
 8007810:	00800084 	movi	r2,2
 8007814:	1105c83a 	sub	r2,r2,r4
 8007818:	003fe606 	br	80077b4 <___vfprintf_internal_r+0x1dc4>
 800781c:	d8014515 	stw	zero,1300(sp)
 8007820:	dc814715 	stw	r18,1308(sp)
 8007824:	003fb106 	br	80076ec <___vfprintf_internal_r+0x1cfc>
 8007828:	000d883a 	mov	r6,zero
 800782c:	000f883a 	mov	r7,zero
 8007830:	8009883a 	mov	r4,r16
 8007834:	880b883a 	mov	r5,r17
 8007838:	800d7800 	call	800d780 <__nedf2>
 800783c:	103f9f26 	beq	r2,zero,80076bc <___vfprintf_internal_r+0x1ccc>
 8007840:	00800044 	movi	r2,1
 8007844:	1509c83a 	sub	r4,r2,r20
 8007848:	d9000515 	stw	r4,20(sp)
 800784c:	003f9b06 	br	80076bc <___vfprintf_internal_r+0x1ccc>
 8007850:	98000d1e 	bne	r19,zero,8007888 <___vfprintf_internal_r+0x1e98>
 8007854:	d8c14c17 	ldw	r3,1328(sp)
 8007858:	1880004c 	andi	r2,r3,1
 800785c:	10000a1e 	bne	r2,zero,8007888 <___vfprintf_internal_r+0x1e98>
 8007860:	01000044 	movi	r4,1
 8007864:	200f883a 	mov	r7,r4
 8007868:	d9014515 	stw	r4,1300(sp)
 800786c:	003f4a06 	br	8007598 <___vfprintf_internal_r+0x1ba8>
 8007870:	3cc00017 	ldw	r19,0(r7)
 8007874:	39c00104 	addi	r7,r7,4
 8007878:	983d0e0e 	bge	r19,zero,8006cb4 <___vfprintf_internal_r+0x12c4>
 800787c:	b8c00007 	ldb	r3,0(r23)
 8007880:	04ffffc4 	movi	r19,-1
 8007884:	0038d906 	br	8005bec <___vfprintf_internal_r+0x1fc>
 8007888:	9cc00084 	addi	r19,r19,2
 800788c:	dcc14515 	stw	r19,1300(sp)
 8007890:	980f883a 	mov	r7,r19
 8007894:	983f400e 	bge	r19,zero,8007598 <___vfprintf_internal_r+0x1ba8>
 8007898:	003f7306 	br	8007668 <___vfprintf_internal_r+0x1c78>

0800789c <__vfprintf_internal>:
 800789c:	008200b4 	movhi	r2,2050
 80078a0:	10a95904 	addi	r2,r2,-23196
 80078a4:	2013883a 	mov	r9,r4
 80078a8:	11000017 	ldw	r4,0(r2)
 80078ac:	2805883a 	mov	r2,r5
 80078b0:	300f883a 	mov	r7,r6
 80078b4:	480b883a 	mov	r5,r9
 80078b8:	100d883a 	mov	r6,r2
 80078bc:	80059f01 	jmpi	80059f0 <___vfprintf_internal_r>

080078c0 <_write_r>:
 80078c0:	defffd04 	addi	sp,sp,-12
 80078c4:	dc000015 	stw	r16,0(sp)
 80078c8:	040200b4 	movhi	r16,2050
 80078cc:	84312904 	addi	r16,r16,-15196
 80078d0:	dc400115 	stw	r17,4(sp)
 80078d4:	80000015 	stw	zero,0(r16)
 80078d8:	2023883a 	mov	r17,r4
 80078dc:	2809883a 	mov	r4,r5
 80078e0:	300b883a 	mov	r5,r6
 80078e4:	380d883a 	mov	r6,r7
 80078e8:	dfc00215 	stw	ra,8(sp)
 80078ec:	800eb280 	call	800eb28 <write>
 80078f0:	1007883a 	mov	r3,r2
 80078f4:	00bfffc4 	movi	r2,-1
 80078f8:	18800626 	beq	r3,r2,8007914 <_write_r+0x54>
 80078fc:	1805883a 	mov	r2,r3
 8007900:	dfc00217 	ldw	ra,8(sp)
 8007904:	dc400117 	ldw	r17,4(sp)
 8007908:	dc000017 	ldw	r16,0(sp)
 800790c:	dec00304 	addi	sp,sp,12
 8007910:	f800283a 	ret
 8007914:	80800017 	ldw	r2,0(r16)
 8007918:	103ff826 	beq	r2,zero,80078fc <_write_r+0x3c>
 800791c:	88800015 	stw	r2,0(r17)
 8007920:	1805883a 	mov	r2,r3
 8007924:	dfc00217 	ldw	ra,8(sp)
 8007928:	dc400117 	ldw	r17,4(sp)
 800792c:	dc000017 	ldw	r16,0(sp)
 8007930:	dec00304 	addi	sp,sp,12
 8007934:	f800283a 	ret

08007938 <__swsetup_r>:
 8007938:	008200b4 	movhi	r2,2050
 800793c:	10a95904 	addi	r2,r2,-23196
 8007940:	10c00017 	ldw	r3,0(r2)
 8007944:	defffd04 	addi	sp,sp,-12
 8007948:	dc400115 	stw	r17,4(sp)
 800794c:	dc000015 	stw	r16,0(sp)
 8007950:	dfc00215 	stw	ra,8(sp)
 8007954:	2023883a 	mov	r17,r4
 8007958:	2821883a 	mov	r16,r5
 800795c:	18000226 	beq	r3,zero,8007968 <__swsetup_r+0x30>
 8007960:	18800e17 	ldw	r2,56(r3)
 8007964:	10001f26 	beq	r2,zero,80079e4 <__swsetup_r+0xac>
 8007968:	8100030b 	ldhu	r4,12(r16)
 800796c:	2080020c 	andi	r2,r4,8
 8007970:	10002826 	beq	r2,zero,8007a14 <__swsetup_r+0xdc>
 8007974:	81400417 	ldw	r5,16(r16)
 8007978:	28001d26 	beq	r5,zero,80079f0 <__swsetup_r+0xb8>
 800797c:	2080004c 	andi	r2,r4,1
 8007980:	1005003a 	cmpeq	r2,r2,zero
 8007984:	10000b26 	beq	r2,zero,80079b4 <__swsetup_r+0x7c>
 8007988:	2080008c 	andi	r2,r4,2
 800798c:	10001226 	beq	r2,zero,80079d8 <__swsetup_r+0xa0>
 8007990:	0005883a 	mov	r2,zero
 8007994:	80800215 	stw	r2,8(r16)
 8007998:	28000b26 	beq	r5,zero,80079c8 <__swsetup_r+0x90>
 800799c:	0005883a 	mov	r2,zero
 80079a0:	dfc00217 	ldw	ra,8(sp)
 80079a4:	dc400117 	ldw	r17,4(sp)
 80079a8:	dc000017 	ldw	r16,0(sp)
 80079ac:	dec00304 	addi	sp,sp,12
 80079b0:	f800283a 	ret
 80079b4:	80800517 	ldw	r2,20(r16)
 80079b8:	80000215 	stw	zero,8(r16)
 80079bc:	0085c83a 	sub	r2,zero,r2
 80079c0:	80800615 	stw	r2,24(r16)
 80079c4:	283ff51e 	bne	r5,zero,800799c <__swsetup_r+0x64>
 80079c8:	2080200c 	andi	r2,r4,128
 80079cc:	103ff326 	beq	r2,zero,800799c <__swsetup_r+0x64>
 80079d0:	00bfffc4 	movi	r2,-1
 80079d4:	003ff206 	br	80079a0 <__swsetup_r+0x68>
 80079d8:	80800517 	ldw	r2,20(r16)
 80079dc:	80800215 	stw	r2,8(r16)
 80079e0:	003fed06 	br	8007998 <__swsetup_r+0x60>
 80079e4:	1809883a 	mov	r4,r3
 80079e8:	80095480 	call	8009548 <__sinit>
 80079ec:	003fde06 	br	8007968 <__swsetup_r+0x30>
 80079f0:	20c0a00c 	andi	r3,r4,640
 80079f4:	00808004 	movi	r2,512
 80079f8:	18bfe026 	beq	r3,r2,800797c <__swsetup_r+0x44>
 80079fc:	8809883a 	mov	r4,r17
 8007a00:	800b883a 	mov	r5,r16
 8007a04:	800434c0 	call	800434c <__smakebuf_r>
 8007a08:	8100030b 	ldhu	r4,12(r16)
 8007a0c:	81400417 	ldw	r5,16(r16)
 8007a10:	003fda06 	br	800797c <__swsetup_r+0x44>
 8007a14:	2080040c 	andi	r2,r4,16
 8007a18:	103fed26 	beq	r2,zero,80079d0 <__swsetup_r+0x98>
 8007a1c:	2080010c 	andi	r2,r4,4
 8007a20:	10001226 	beq	r2,zero,8007a6c <__swsetup_r+0x134>
 8007a24:	81400c17 	ldw	r5,48(r16)
 8007a28:	28000526 	beq	r5,zero,8007a40 <__swsetup_r+0x108>
 8007a2c:	80801004 	addi	r2,r16,64
 8007a30:	28800226 	beq	r5,r2,8007a3c <__swsetup_r+0x104>
 8007a34:	8809883a 	mov	r4,r17
 8007a38:	8003b640 	call	8003b64 <_free_r>
 8007a3c:	80000c15 	stw	zero,48(r16)
 8007a40:	8080030b 	ldhu	r2,12(r16)
 8007a44:	81400417 	ldw	r5,16(r16)
 8007a48:	80000115 	stw	zero,4(r16)
 8007a4c:	10bff6cc 	andi	r2,r2,65499
 8007a50:	8080030d 	sth	r2,12(r16)
 8007a54:	81400015 	stw	r5,0(r16)
 8007a58:	8080030b 	ldhu	r2,12(r16)
 8007a5c:	10800214 	ori	r2,r2,8
 8007a60:	113fffcc 	andi	r4,r2,65535
 8007a64:	8080030d 	sth	r2,12(r16)
 8007a68:	003fc306 	br	8007978 <__swsetup_r+0x40>
 8007a6c:	81400417 	ldw	r5,16(r16)
 8007a70:	003ff906 	br	8007a58 <__swsetup_r+0x120>

08007a74 <_close_r>:
 8007a74:	defffd04 	addi	sp,sp,-12
 8007a78:	dc000015 	stw	r16,0(sp)
 8007a7c:	040200b4 	movhi	r16,2050
 8007a80:	84312904 	addi	r16,r16,-15196
 8007a84:	dc400115 	stw	r17,4(sp)
 8007a88:	80000015 	stw	zero,0(r16)
 8007a8c:	2023883a 	mov	r17,r4
 8007a90:	2809883a 	mov	r4,r5
 8007a94:	dfc00215 	stw	ra,8(sp)
 8007a98:	800df040 	call	800df04 <close>
 8007a9c:	1007883a 	mov	r3,r2
 8007aa0:	00bfffc4 	movi	r2,-1
 8007aa4:	18800626 	beq	r3,r2,8007ac0 <_close_r+0x4c>
 8007aa8:	1805883a 	mov	r2,r3
 8007aac:	dfc00217 	ldw	ra,8(sp)
 8007ab0:	dc400117 	ldw	r17,4(sp)
 8007ab4:	dc000017 	ldw	r16,0(sp)
 8007ab8:	dec00304 	addi	sp,sp,12
 8007abc:	f800283a 	ret
 8007ac0:	80800017 	ldw	r2,0(r16)
 8007ac4:	103ff826 	beq	r2,zero,8007aa8 <_close_r+0x34>
 8007ac8:	88800015 	stw	r2,0(r17)
 8007acc:	1805883a 	mov	r2,r3
 8007ad0:	dfc00217 	ldw	ra,8(sp)
 8007ad4:	dc400117 	ldw	r17,4(sp)
 8007ad8:	dc000017 	ldw	r16,0(sp)
 8007adc:	dec00304 	addi	sp,sp,12
 8007ae0:	f800283a 	ret

08007ae4 <quorem>:
 8007ae4:	28c00417 	ldw	r3,16(r5)
 8007ae8:	20800417 	ldw	r2,16(r4)
 8007aec:	defff604 	addi	sp,sp,-40
 8007af0:	ddc00715 	stw	r23,28(sp)
 8007af4:	dd400515 	stw	r21,20(sp)
 8007af8:	dfc00915 	stw	ra,36(sp)
 8007afc:	df000815 	stw	fp,32(sp)
 8007b00:	dd800615 	stw	r22,24(sp)
 8007b04:	dd000415 	stw	r20,16(sp)
 8007b08:	dcc00315 	stw	r19,12(sp)
 8007b0c:	dc800215 	stw	r18,8(sp)
 8007b10:	dc400115 	stw	r17,4(sp)
 8007b14:	dc000015 	stw	r16,0(sp)
 8007b18:	202f883a 	mov	r23,r4
 8007b1c:	282b883a 	mov	r21,r5
 8007b20:	10c07416 	blt	r2,r3,8007cf4 <quorem+0x210>
 8007b24:	1c7fffc4 	addi	r17,r3,-1
 8007b28:	8c45883a 	add	r2,r17,r17
 8007b2c:	1085883a 	add	r2,r2,r2
 8007b30:	2c000504 	addi	r16,r5,20
 8007b34:	24c00504 	addi	r19,r4,20
 8007b38:	14ed883a 	add	r22,r2,r19
 8007b3c:	80a5883a 	add	r18,r16,r2
 8007b40:	b7000017 	ldw	fp,0(r22)
 8007b44:	91400017 	ldw	r5,0(r18)
 8007b48:	e009883a 	mov	r4,fp
 8007b4c:	29400044 	addi	r5,r5,1
 8007b50:	8002fe00 	call	8002fe0 <__udivsi3>
 8007b54:	1029883a 	mov	r20,r2
 8007b58:	10003c1e 	bne	r2,zero,8007c4c <quorem+0x168>
 8007b5c:	a80b883a 	mov	r5,r21
 8007b60:	b809883a 	mov	r4,r23
 8007b64:	800a50c0 	call	800a50c <__mcmp>
 8007b68:	10002b16 	blt	r2,zero,8007c18 <quorem+0x134>
 8007b6c:	a5000044 	addi	r20,r20,1
 8007b70:	980f883a 	mov	r7,r19
 8007b74:	0011883a 	mov	r8,zero
 8007b78:	0009883a 	mov	r4,zero
 8007b7c:	81400017 	ldw	r5,0(r16)
 8007b80:	38c00017 	ldw	r3,0(r7)
 8007b84:	84000104 	addi	r16,r16,4
 8007b88:	28bfffcc 	andi	r2,r5,65535
 8007b8c:	2085883a 	add	r2,r4,r2
 8007b90:	11bfffcc 	andi	r6,r2,65535
 8007b94:	193fffcc 	andi	r4,r3,65535
 8007b98:	1004d43a 	srli	r2,r2,16
 8007b9c:	280ad43a 	srli	r5,r5,16
 8007ba0:	2189c83a 	sub	r4,r4,r6
 8007ba4:	2209883a 	add	r4,r4,r8
 8007ba8:	1806d43a 	srli	r3,r3,16
 8007bac:	288b883a 	add	r5,r5,r2
 8007bb0:	200dd43a 	srai	r6,r4,16
 8007bb4:	28bfffcc 	andi	r2,r5,65535
 8007bb8:	1887c83a 	sub	r3,r3,r2
 8007bbc:	1987883a 	add	r3,r3,r6
 8007bc0:	3900000d 	sth	r4,0(r7)
 8007bc4:	38c0008d 	sth	r3,2(r7)
 8007bc8:	2808d43a 	srli	r4,r5,16
 8007bcc:	39c00104 	addi	r7,r7,4
 8007bd0:	1811d43a 	srai	r8,r3,16
 8007bd4:	943fe92e 	bgeu	r18,r16,8007b7c <quorem+0x98>
 8007bd8:	8c45883a 	add	r2,r17,r17
 8007bdc:	1085883a 	add	r2,r2,r2
 8007be0:	9885883a 	add	r2,r19,r2
 8007be4:	10c00017 	ldw	r3,0(r2)
 8007be8:	18000b1e 	bne	r3,zero,8007c18 <quorem+0x134>
 8007bec:	113fff04 	addi	r4,r2,-4
 8007bf0:	9900082e 	bgeu	r19,r4,8007c14 <quorem+0x130>
 8007bf4:	10bfff17 	ldw	r2,-4(r2)
 8007bf8:	10000326 	beq	r2,zero,8007c08 <quorem+0x124>
 8007bfc:	00000506 	br	8007c14 <quorem+0x130>
 8007c00:	20800017 	ldw	r2,0(r4)
 8007c04:	1000031e 	bne	r2,zero,8007c14 <quorem+0x130>
 8007c08:	213fff04 	addi	r4,r4,-4
 8007c0c:	8c7fffc4 	addi	r17,r17,-1
 8007c10:	993ffb36 	bltu	r19,r4,8007c00 <quorem+0x11c>
 8007c14:	bc400415 	stw	r17,16(r23)
 8007c18:	a005883a 	mov	r2,r20
 8007c1c:	dfc00917 	ldw	ra,36(sp)
 8007c20:	df000817 	ldw	fp,32(sp)
 8007c24:	ddc00717 	ldw	r23,28(sp)
 8007c28:	dd800617 	ldw	r22,24(sp)
 8007c2c:	dd400517 	ldw	r21,20(sp)
 8007c30:	dd000417 	ldw	r20,16(sp)
 8007c34:	dcc00317 	ldw	r19,12(sp)
 8007c38:	dc800217 	ldw	r18,8(sp)
 8007c3c:	dc400117 	ldw	r17,4(sp)
 8007c40:	dc000017 	ldw	r16,0(sp)
 8007c44:	dec00a04 	addi	sp,sp,40
 8007c48:	f800283a 	ret
 8007c4c:	980f883a 	mov	r7,r19
 8007c50:	8011883a 	mov	r8,r16
 8007c54:	0013883a 	mov	r9,zero
 8007c58:	000d883a 	mov	r6,zero
 8007c5c:	40c00017 	ldw	r3,0(r8)
 8007c60:	39000017 	ldw	r4,0(r7)
 8007c64:	42000104 	addi	r8,r8,4
 8007c68:	18bfffcc 	andi	r2,r3,65535
 8007c6c:	a085383a 	mul	r2,r20,r2
 8007c70:	1806d43a 	srli	r3,r3,16
 8007c74:	217fffcc 	andi	r5,r4,65535
 8007c78:	3085883a 	add	r2,r6,r2
 8007c7c:	11bfffcc 	andi	r6,r2,65535
 8007c80:	a0c7383a 	mul	r3,r20,r3
 8007c84:	1004d43a 	srli	r2,r2,16
 8007c88:	298bc83a 	sub	r5,r5,r6
 8007c8c:	2a4b883a 	add	r5,r5,r9
 8007c90:	2008d43a 	srli	r4,r4,16
 8007c94:	1887883a 	add	r3,r3,r2
 8007c98:	280dd43a 	srai	r6,r5,16
 8007c9c:	18bfffcc 	andi	r2,r3,65535
 8007ca0:	2089c83a 	sub	r4,r4,r2
 8007ca4:	2189883a 	add	r4,r4,r6
 8007ca8:	3900008d 	sth	r4,2(r7)
 8007cac:	3940000d 	sth	r5,0(r7)
 8007cb0:	180cd43a 	srli	r6,r3,16
 8007cb4:	39c00104 	addi	r7,r7,4
 8007cb8:	2013d43a 	srai	r9,r4,16
 8007cbc:	923fe72e 	bgeu	r18,r8,8007c5c <quorem+0x178>
 8007cc0:	e03fa61e 	bne	fp,zero,8007b5c <quorem+0x78>
 8007cc4:	b0ffff04 	addi	r3,r22,-4
 8007cc8:	98c0082e 	bgeu	r19,r3,8007cec <quorem+0x208>
 8007ccc:	b0bfff17 	ldw	r2,-4(r22)
 8007cd0:	10000326 	beq	r2,zero,8007ce0 <quorem+0x1fc>
 8007cd4:	00000506 	br	8007cec <quorem+0x208>
 8007cd8:	18800017 	ldw	r2,0(r3)
 8007cdc:	1000031e 	bne	r2,zero,8007cec <quorem+0x208>
 8007ce0:	18ffff04 	addi	r3,r3,-4
 8007ce4:	8c7fffc4 	addi	r17,r17,-1
 8007ce8:	98fffb36 	bltu	r19,r3,8007cd8 <quorem+0x1f4>
 8007cec:	bc400415 	stw	r17,16(r23)
 8007cf0:	003f9a06 	br	8007b5c <quorem+0x78>
 8007cf4:	0005883a 	mov	r2,zero
 8007cf8:	003fc806 	br	8007c1c <quorem+0x138>

08007cfc <_dtoa_r>:
 8007cfc:	22001017 	ldw	r8,64(r4)
 8007d00:	deffda04 	addi	sp,sp,-152
 8007d04:	dd402115 	stw	r21,132(sp)
 8007d08:	dd002015 	stw	r20,128(sp)
 8007d0c:	dc801e15 	stw	r18,120(sp)
 8007d10:	dc401d15 	stw	r17,116(sp)
 8007d14:	dfc02515 	stw	ra,148(sp)
 8007d18:	df002415 	stw	fp,144(sp)
 8007d1c:	ddc02315 	stw	r23,140(sp)
 8007d20:	dd802215 	stw	r22,136(sp)
 8007d24:	dcc01f15 	stw	r19,124(sp)
 8007d28:	dc001c15 	stw	r16,112(sp)
 8007d2c:	d9001615 	stw	r4,88(sp)
 8007d30:	3023883a 	mov	r17,r6
 8007d34:	2829883a 	mov	r20,r5
 8007d38:	d9c01715 	stw	r7,92(sp)
 8007d3c:	dc802817 	ldw	r18,160(sp)
 8007d40:	302b883a 	mov	r21,r6
 8007d44:	40000a26 	beq	r8,zero,8007d70 <_dtoa_r+0x74>
 8007d48:	20801117 	ldw	r2,68(r4)
 8007d4c:	400b883a 	mov	r5,r8
 8007d50:	40800115 	stw	r2,4(r8)
 8007d54:	20c01117 	ldw	r3,68(r4)
 8007d58:	00800044 	movi	r2,1
 8007d5c:	10c4983a 	sll	r2,r2,r3
 8007d60:	40800215 	stw	r2,8(r8)
 8007d64:	800a3b00 	call	800a3b0 <_Bfree>
 8007d68:	d8c01617 	ldw	r3,88(sp)
 8007d6c:	18001015 	stw	zero,64(r3)
 8007d70:	8800a316 	blt	r17,zero,8008000 <_dtoa_r+0x304>
 8007d74:	90000015 	stw	zero,0(r18)
 8007d78:	a8dffc2c 	andhi	r3,r21,32752
 8007d7c:	009ffc34 	movhi	r2,32752
 8007d80:	18809126 	beq	r3,r2,8007fc8 <_dtoa_r+0x2cc>
 8007d84:	000d883a 	mov	r6,zero
 8007d88:	000f883a 	mov	r7,zero
 8007d8c:	a009883a 	mov	r4,r20
 8007d90:	a80b883a 	mov	r5,r21
 8007d94:	dd001215 	stw	r20,72(sp)
 8007d98:	dd401315 	stw	r21,76(sp)
 8007d9c:	800d7800 	call	800d780 <__nedf2>
 8007da0:	1000171e 	bne	r2,zero,8007e00 <_dtoa_r+0x104>
 8007da4:	d9802717 	ldw	r6,156(sp)
 8007da8:	00800044 	movi	r2,1
 8007dac:	30800015 	stw	r2,0(r6)
 8007db0:	d8802917 	ldw	r2,164(sp)
 8007db4:	10029b26 	beq	r2,zero,8008824 <_dtoa_r+0xb28>
 8007db8:	d9002917 	ldw	r4,164(sp)
 8007dbc:	00820074 	movhi	r2,2049
 8007dc0:	109cd644 	addi	r2,r2,29529
 8007dc4:	10ffffc4 	addi	r3,r2,-1
 8007dc8:	20800015 	stw	r2,0(r4)
 8007dcc:	1805883a 	mov	r2,r3
 8007dd0:	dfc02517 	ldw	ra,148(sp)
 8007dd4:	df002417 	ldw	fp,144(sp)
 8007dd8:	ddc02317 	ldw	r23,140(sp)
 8007ddc:	dd802217 	ldw	r22,136(sp)
 8007de0:	dd402117 	ldw	r21,132(sp)
 8007de4:	dd002017 	ldw	r20,128(sp)
 8007de8:	dcc01f17 	ldw	r19,124(sp)
 8007dec:	dc801e17 	ldw	r18,120(sp)
 8007df0:	dc401d17 	ldw	r17,116(sp)
 8007df4:	dc001c17 	ldw	r16,112(sp)
 8007df8:	dec02604 	addi	sp,sp,152
 8007dfc:	f800283a 	ret
 8007e00:	d9001617 	ldw	r4,88(sp)
 8007e04:	d9401217 	ldw	r5,72(sp)
 8007e08:	d8800104 	addi	r2,sp,4
 8007e0c:	a80d883a 	mov	r6,r21
 8007e10:	d9c00204 	addi	r7,sp,8
 8007e14:	d8800015 	stw	r2,0(sp)
 8007e18:	800a9ec0 	call	800a9ec <__d2b>
 8007e1c:	d8800715 	stw	r2,28(sp)
 8007e20:	a804d53a 	srli	r2,r21,20
 8007e24:	1101ffcc 	andi	r4,r2,2047
 8007e28:	20008626 	beq	r4,zero,8008044 <_dtoa_r+0x348>
 8007e2c:	d8c01217 	ldw	r3,72(sp)
 8007e30:	00800434 	movhi	r2,16
 8007e34:	10bfffc4 	addi	r2,r2,-1
 8007e38:	ddc00117 	ldw	r23,4(sp)
 8007e3c:	a884703a 	and	r2,r21,r2
 8007e40:	1811883a 	mov	r8,r3
 8007e44:	124ffc34 	orhi	r9,r2,16368
 8007e48:	25bf0044 	addi	r22,r4,-1023
 8007e4c:	d8000815 	stw	zero,32(sp)
 8007e50:	0005883a 	mov	r2,zero
 8007e54:	00cffe34 	movhi	r3,16376
 8007e58:	480b883a 	mov	r5,r9
 8007e5c:	4009883a 	mov	r4,r8
 8007e60:	180f883a 	mov	r7,r3
 8007e64:	100d883a 	mov	r6,r2
 8007e68:	800cfe80 	call	800cfe8 <__subdf3>
 8007e6c:	0218dbf4 	movhi	r8,25455
 8007e70:	4210d844 	addi	r8,r8,17249
 8007e74:	024ff4f4 	movhi	r9,16339
 8007e78:	4a61e9c4 	addi	r9,r9,-30809
 8007e7c:	480f883a 	mov	r7,r9
 8007e80:	400d883a 	mov	r6,r8
 8007e84:	180b883a 	mov	r5,r3
 8007e88:	1009883a 	mov	r4,r2
 8007e8c:	800d0dc0 	call	800d0dc <__muldf3>
 8007e90:	0222d874 	movhi	r8,35681
 8007e94:	42322cc4 	addi	r8,r8,-14157
 8007e98:	024ff1f4 	movhi	r9,16327
 8007e9c:	4a628a04 	addi	r9,r9,-30168
 8007ea0:	480f883a 	mov	r7,r9
 8007ea4:	400d883a 	mov	r6,r8
 8007ea8:	180b883a 	mov	r5,r3
 8007eac:	1009883a 	mov	r4,r2
 8007eb0:	800d0680 	call	800d068 <__adddf3>
 8007eb4:	b009883a 	mov	r4,r22
 8007eb8:	1021883a 	mov	r16,r2
 8007ebc:	1823883a 	mov	r17,r3
 8007ec0:	800d9a00 	call	800d9a0 <__floatsidf>
 8007ec4:	021427f4 	movhi	r8,20639
 8007ec8:	421e7ec4 	addi	r8,r8,31227
 8007ecc:	024ff4f4 	movhi	r9,16339
 8007ed0:	4a5104c4 	addi	r9,r9,17427
 8007ed4:	480f883a 	mov	r7,r9
 8007ed8:	400d883a 	mov	r6,r8
 8007edc:	180b883a 	mov	r5,r3
 8007ee0:	1009883a 	mov	r4,r2
 8007ee4:	800d0dc0 	call	800d0dc <__muldf3>
 8007ee8:	180f883a 	mov	r7,r3
 8007eec:	880b883a 	mov	r5,r17
 8007ef0:	100d883a 	mov	r6,r2
 8007ef4:	8009883a 	mov	r4,r16
 8007ef8:	800d0680 	call	800d068 <__adddf3>
 8007efc:	1009883a 	mov	r4,r2
 8007f00:	180b883a 	mov	r5,r3
 8007f04:	1021883a 	mov	r16,r2
 8007f08:	1823883a 	mov	r17,r3
 8007f0c:	800da980 	call	800da98 <__fixdfsi>
 8007f10:	000d883a 	mov	r6,zero
 8007f14:	000f883a 	mov	r7,zero
 8007f18:	8009883a 	mov	r4,r16
 8007f1c:	880b883a 	mov	r5,r17
 8007f20:	d8800d15 	stw	r2,52(sp)
 8007f24:	800d9180 	call	800d918 <__ltdf2>
 8007f28:	10031716 	blt	r2,zero,8008b88 <_dtoa_r+0xe8c>
 8007f2c:	d8c00d17 	ldw	r3,52(sp)
 8007f30:	00800584 	movi	r2,22
 8007f34:	10c1482e 	bgeu	r2,r3,8008458 <_dtoa_r+0x75c>
 8007f38:	01000044 	movi	r4,1
 8007f3c:	d9000c15 	stw	r4,48(sp)
 8007f40:	bd85c83a 	sub	r2,r23,r22
 8007f44:	11bfffc4 	addi	r6,r2,-1
 8007f48:	30030b16 	blt	r6,zero,8008b78 <_dtoa_r+0xe7c>
 8007f4c:	d9800a15 	stw	r6,40(sp)
 8007f50:	d8001115 	stw	zero,68(sp)
 8007f54:	d8c00d17 	ldw	r3,52(sp)
 8007f58:	1802ff16 	blt	r3,zero,8008b58 <_dtoa_r+0xe5c>
 8007f5c:	d9000a17 	ldw	r4,40(sp)
 8007f60:	d8c00915 	stw	r3,36(sp)
 8007f64:	d8001015 	stw	zero,64(sp)
 8007f68:	20c9883a 	add	r4,r4,r3
 8007f6c:	d9000a15 	stw	r4,40(sp)
 8007f70:	d9001717 	ldw	r4,92(sp)
 8007f74:	00800244 	movi	r2,9
 8007f78:	11004636 	bltu	r2,r4,8008094 <_dtoa_r+0x398>
 8007f7c:	00800144 	movi	r2,5
 8007f80:	11020416 	blt	r2,r4,8008794 <_dtoa_r+0xa98>
 8007f84:	04400044 	movi	r17,1
 8007f88:	d8c01717 	ldw	r3,92(sp)
 8007f8c:	00800144 	movi	r2,5
 8007f90:	10c1ed36 	bltu	r2,r3,8008748 <_dtoa_r+0xa4c>
 8007f94:	18c5883a 	add	r2,r3,r3
 8007f98:	1085883a 	add	r2,r2,r2
 8007f9c:	00c20034 	movhi	r3,2048
 8007fa0:	18dfec04 	addi	r3,r3,32688
 8007fa4:	10c5883a 	add	r2,r2,r3
 8007fa8:	11000017 	ldw	r4,0(r2)
 8007fac:	2000683a 	jmp	r4
 8007fb0:	0800809c 	xori	zero,at,514
 8007fb4:	0800809c 	xori	zero,at,514
 8007fb8:	08008a9c 	xori	zero,at,554
 8007fbc:	08008a74 	orhi	zero,at,553
 8007fc0:	08008ab8 	rdprs	zero,at,554
 8007fc4:	08008ac4 	addi	zero,at,555
 8007fc8:	d9002717 	ldw	r4,156(sp)
 8007fcc:	0089c3c4 	movi	r2,9999
 8007fd0:	20800015 	stw	r2,0(r4)
 8007fd4:	a0001026 	beq	r20,zero,8008018 <_dtoa_r+0x31c>
 8007fd8:	00c200b4 	movhi	r3,2050
 8007fdc:	18e06604 	addi	r3,r3,-32360
 8007fe0:	d9802917 	ldw	r6,164(sp)
 8007fe4:	303f7926 	beq	r6,zero,8007dcc <_dtoa_r+0xd0>
 8007fe8:	188000c7 	ldb	r2,3(r3)
 8007fec:	190000c4 	addi	r4,r3,3
 8007ff0:	1000101e 	bne	r2,zero,8008034 <_dtoa_r+0x338>
 8007ff4:	d8802917 	ldw	r2,164(sp)
 8007ff8:	11000015 	stw	r4,0(r2)
 8007ffc:	003f7306 	br	8007dcc <_dtoa_r+0xd0>
 8008000:	00a00034 	movhi	r2,32768
 8008004:	10bfffc4 	addi	r2,r2,-1
 8008008:	00c00044 	movi	r3,1
 800800c:	88aa703a 	and	r21,r17,r2
 8008010:	90c00015 	stw	r3,0(r18)
 8008014:	003f5806 	br	8007d78 <_dtoa_r+0x7c>
 8008018:	00800434 	movhi	r2,16
 800801c:	10bfffc4 	addi	r2,r2,-1
 8008020:	a884703a 	and	r2,r21,r2
 8008024:	103fec1e 	bne	r2,zero,8007fd8 <_dtoa_r+0x2dc>
 8008028:	00c200b4 	movhi	r3,2050
 800802c:	18e06304 	addi	r3,r3,-32372
 8008030:	003feb06 	br	8007fe0 <_dtoa_r+0x2e4>
 8008034:	d8802917 	ldw	r2,164(sp)
 8008038:	19000204 	addi	r4,r3,8
 800803c:	11000015 	stw	r4,0(r2)
 8008040:	003f6206 	br	8007dcc <_dtoa_r+0xd0>
 8008044:	ddc00117 	ldw	r23,4(sp)
 8008048:	d8800217 	ldw	r2,8(sp)
 800804c:	01000804 	movi	r4,32
 8008050:	b8c10c84 	addi	r3,r23,1074
 8008054:	18a3883a 	add	r17,r3,r2
 8008058:	2441b80e 	bge	r4,r17,800873c <_dtoa_r+0xa40>
 800805c:	00c01004 	movi	r3,64
 8008060:	1c47c83a 	sub	r3,r3,r17
 8008064:	88bff804 	addi	r2,r17,-32
 8008068:	a8c6983a 	sll	r3,r21,r3
 800806c:	a084d83a 	srl	r2,r20,r2
 8008070:	1888b03a 	or	r4,r3,r2
 8008074:	800db700 	call	800db70 <__floatunsidf>
 8008078:	1011883a 	mov	r8,r2
 800807c:	00bf8434 	movhi	r2,65040
 8008080:	01000044 	movi	r4,1
 8008084:	10d3883a 	add	r9,r2,r3
 8008088:	8dbef344 	addi	r22,r17,-1075
 800808c:	d9000815 	stw	r4,32(sp)
 8008090:	003f6f06 	br	8007e50 <_dtoa_r+0x154>
 8008094:	d8001715 	stw	zero,92(sp)
 8008098:	04400044 	movi	r17,1
 800809c:	00bfffc4 	movi	r2,-1
 80080a0:	00c00044 	movi	r3,1
 80080a4:	d8800e15 	stw	r2,56(sp)
 80080a8:	d8002615 	stw	zero,152(sp)
 80080ac:	d8800f15 	stw	r2,60(sp)
 80080b0:	d8c00b15 	stw	r3,44(sp)
 80080b4:	1021883a 	mov	r16,r2
 80080b8:	d8801617 	ldw	r2,88(sp)
 80080bc:	10001115 	stw	zero,68(r2)
 80080c0:	d8801617 	ldw	r2,88(sp)
 80080c4:	11401117 	ldw	r5,68(r2)
 80080c8:	1009883a 	mov	r4,r2
 80080cc:	800a9300 	call	800a930 <_Balloc>
 80080d0:	d8c01617 	ldw	r3,88(sp)
 80080d4:	d8800515 	stw	r2,20(sp)
 80080d8:	18801015 	stw	r2,64(r3)
 80080dc:	00800384 	movi	r2,14
 80080e0:	14006836 	bltu	r2,r16,8008284 <_dtoa_r+0x588>
 80080e4:	8805003a 	cmpeq	r2,r17,zero
 80080e8:	1000661e 	bne	r2,zero,8008284 <_dtoa_r+0x588>
 80080ec:	d9000d17 	ldw	r4,52(sp)
 80080f0:	0102300e 	bge	zero,r4,80089b4 <_dtoa_r+0xcb8>
 80080f4:	208003cc 	andi	r2,r4,15
 80080f8:	100490fa 	slli	r2,r2,3
 80080fc:	2025d13a 	srai	r18,r4,4
 8008100:	00c200b4 	movhi	r3,2050
 8008104:	18e07704 	addi	r3,r3,-32292
 8008108:	10c5883a 	add	r2,r2,r3
 800810c:	90c0040c 	andi	r3,r18,16
 8008110:	14000017 	ldw	r16,0(r2)
 8008114:	14400117 	ldw	r17,4(r2)
 8008118:	18036a1e 	bne	r3,zero,8008ec4 <_dtoa_r+0x11c8>
 800811c:	05800084 	movi	r22,2
 8008120:	90001026 	beq	r18,zero,8008164 <_dtoa_r+0x468>
 8008124:	04c200b4 	movhi	r19,2050
 8008128:	9ce0a904 	addi	r19,r19,-32092
 800812c:	9080004c 	andi	r2,r18,1
 8008130:	1005003a 	cmpeq	r2,r2,zero
 8008134:	1000081e 	bne	r2,zero,8008158 <_dtoa_r+0x45c>
 8008138:	99800017 	ldw	r6,0(r19)
 800813c:	99c00117 	ldw	r7,4(r19)
 8008140:	880b883a 	mov	r5,r17
 8008144:	8009883a 	mov	r4,r16
 8008148:	800d0dc0 	call	800d0dc <__muldf3>
 800814c:	1021883a 	mov	r16,r2
 8008150:	b5800044 	addi	r22,r22,1
 8008154:	1823883a 	mov	r17,r3
 8008158:	9025d07a 	srai	r18,r18,1
 800815c:	9cc00204 	addi	r19,r19,8
 8008160:	903ff21e 	bne	r18,zero,800812c <_dtoa_r+0x430>
 8008164:	a80b883a 	mov	r5,r21
 8008168:	a009883a 	mov	r4,r20
 800816c:	880f883a 	mov	r7,r17
 8008170:	800d883a 	mov	r6,r16
 8008174:	800d4a00 	call	800d4a0 <__divdf3>
 8008178:	1029883a 	mov	r20,r2
 800817c:	182b883a 	mov	r21,r3
 8008180:	d8c00c17 	ldw	r3,48(sp)
 8008184:	1805003a 	cmpeq	r2,r3,zero
 8008188:	1000081e 	bne	r2,zero,80081ac <_dtoa_r+0x4b0>
 800818c:	0005883a 	mov	r2,zero
 8008190:	00cffc34 	movhi	r3,16368
 8008194:	180f883a 	mov	r7,r3
 8008198:	a009883a 	mov	r4,r20
 800819c:	a80b883a 	mov	r5,r21
 80081a0:	100d883a 	mov	r6,r2
 80081a4:	800d9180 	call	800d918 <__ltdf2>
 80081a8:	1003fe16 	blt	r2,zero,80091a4 <_dtoa_r+0x14a8>
 80081ac:	b009883a 	mov	r4,r22
 80081b0:	800d9a00 	call	800d9a0 <__floatsidf>
 80081b4:	180b883a 	mov	r5,r3
 80081b8:	1009883a 	mov	r4,r2
 80081bc:	a00d883a 	mov	r6,r20
 80081c0:	a80f883a 	mov	r7,r21
 80081c4:	800d0dc0 	call	800d0dc <__muldf3>
 80081c8:	0011883a 	mov	r8,zero
 80081cc:	02500734 	movhi	r9,16412
 80081d0:	1009883a 	mov	r4,r2
 80081d4:	180b883a 	mov	r5,r3
 80081d8:	480f883a 	mov	r7,r9
 80081dc:	400d883a 	mov	r6,r8
 80081e0:	800d0680 	call	800d068 <__adddf3>
 80081e4:	d9000f17 	ldw	r4,60(sp)
 80081e8:	102d883a 	mov	r22,r2
 80081ec:	00bf3034 	movhi	r2,64704
 80081f0:	18b9883a 	add	fp,r3,r2
 80081f4:	e02f883a 	mov	r23,fp
 80081f8:	20028f1e 	bne	r4,zero,8008c38 <_dtoa_r+0xf3c>
 80081fc:	0005883a 	mov	r2,zero
 8008200:	00d00534 	movhi	r3,16404
 8008204:	a009883a 	mov	r4,r20
 8008208:	a80b883a 	mov	r5,r21
 800820c:	180f883a 	mov	r7,r3
 8008210:	100d883a 	mov	r6,r2
 8008214:	800cfe80 	call	800cfe8 <__subdf3>
 8008218:	1009883a 	mov	r4,r2
 800821c:	e00f883a 	mov	r7,fp
 8008220:	180b883a 	mov	r5,r3
 8008224:	b00d883a 	mov	r6,r22
 8008228:	1025883a 	mov	r18,r2
 800822c:	1827883a 	mov	r19,r3
 8008230:	800d8080 	call	800d808 <__gtdf2>
 8008234:	00834f16 	blt	zero,r2,8008f74 <_dtoa_r+0x1278>
 8008238:	e0e0003c 	xorhi	r3,fp,32768
 800823c:	9009883a 	mov	r4,r18
 8008240:	980b883a 	mov	r5,r19
 8008244:	180f883a 	mov	r7,r3
 8008248:	b00d883a 	mov	r6,r22
 800824c:	800d9180 	call	800d918 <__ltdf2>
 8008250:	1000080e 	bge	r2,zero,8008274 <_dtoa_r+0x578>
 8008254:	0027883a 	mov	r19,zero
 8008258:	0025883a 	mov	r18,zero
 800825c:	d8802617 	ldw	r2,152(sp)
 8008260:	df000517 	ldw	fp,20(sp)
 8008264:	d8000615 	stw	zero,24(sp)
 8008268:	0084303a 	nor	r2,zero,r2
 800826c:	d8800d15 	stw	r2,52(sp)
 8008270:	00019b06 	br	80088e0 <_dtoa_r+0xbe4>
 8008274:	d9801217 	ldw	r6,72(sp)
 8008278:	d8801317 	ldw	r2,76(sp)
 800827c:	3029883a 	mov	r20,r6
 8008280:	102b883a 	mov	r21,r2
 8008284:	d8c00217 	ldw	r3,8(sp)
 8008288:	18008516 	blt	r3,zero,80084a0 <_dtoa_r+0x7a4>
 800828c:	d9000d17 	ldw	r4,52(sp)
 8008290:	00800384 	movi	r2,14
 8008294:	11008216 	blt	r2,r4,80084a0 <_dtoa_r+0x7a4>
 8008298:	200490fa 	slli	r2,r4,3
 800829c:	d9802617 	ldw	r6,152(sp)
 80082a0:	00c200b4 	movhi	r3,2050
 80082a4:	18e07704 	addi	r3,r3,-32292
 80082a8:	10c5883a 	add	r2,r2,r3
 80082ac:	14800017 	ldw	r18,0(r2)
 80082b0:	14c00117 	ldw	r19,4(r2)
 80082b4:	30031e16 	blt	r6,zero,8008f30 <_dtoa_r+0x1234>
 80082b8:	d9000517 	ldw	r4,20(sp)
 80082bc:	d8c00f17 	ldw	r3,60(sp)
 80082c0:	a823883a 	mov	r17,r21
 80082c4:	a021883a 	mov	r16,r20
 80082c8:	192b883a 	add	r21,r3,r4
 80082cc:	2039883a 	mov	fp,r4
 80082d0:	00000f06 	br	8008310 <_dtoa_r+0x614>
 80082d4:	0005883a 	mov	r2,zero
 80082d8:	00d00934 	movhi	r3,16420
 80082dc:	5009883a 	mov	r4,r10
 80082e0:	580b883a 	mov	r5,r11
 80082e4:	180f883a 	mov	r7,r3
 80082e8:	100d883a 	mov	r6,r2
 80082ec:	800d0dc0 	call	800d0dc <__muldf3>
 80082f0:	180b883a 	mov	r5,r3
 80082f4:	000d883a 	mov	r6,zero
 80082f8:	000f883a 	mov	r7,zero
 80082fc:	1009883a 	mov	r4,r2
 8008300:	1021883a 	mov	r16,r2
 8008304:	1823883a 	mov	r17,r3
 8008308:	800d7800 	call	800d780 <__nedf2>
 800830c:	10004526 	beq	r2,zero,8008424 <_dtoa_r+0x728>
 8008310:	900d883a 	mov	r6,r18
 8008314:	980f883a 	mov	r7,r19
 8008318:	8009883a 	mov	r4,r16
 800831c:	880b883a 	mov	r5,r17
 8008320:	800d4a00 	call	800d4a0 <__divdf3>
 8008324:	180b883a 	mov	r5,r3
 8008328:	1009883a 	mov	r4,r2
 800832c:	800da980 	call	800da98 <__fixdfsi>
 8008330:	1009883a 	mov	r4,r2
 8008334:	1029883a 	mov	r20,r2
 8008338:	800d9a00 	call	800d9a0 <__floatsidf>
 800833c:	180f883a 	mov	r7,r3
 8008340:	9009883a 	mov	r4,r18
 8008344:	980b883a 	mov	r5,r19
 8008348:	100d883a 	mov	r6,r2
 800834c:	800d0dc0 	call	800d0dc <__muldf3>
 8008350:	180f883a 	mov	r7,r3
 8008354:	880b883a 	mov	r5,r17
 8008358:	8009883a 	mov	r4,r16
 800835c:	100d883a 	mov	r6,r2
 8008360:	800cfe80 	call	800cfe8 <__subdf3>
 8008364:	1015883a 	mov	r10,r2
 8008368:	a0800c04 	addi	r2,r20,48
 800836c:	e0800005 	stb	r2,0(fp)
 8008370:	e7000044 	addi	fp,fp,1
 8008374:	1817883a 	mov	r11,r3
 8008378:	e57fd61e 	bne	fp,r21,80082d4 <_dtoa_r+0x5d8>
 800837c:	500d883a 	mov	r6,r10
 8008380:	180f883a 	mov	r7,r3
 8008384:	5009883a 	mov	r4,r10
 8008388:	180b883a 	mov	r5,r3
 800838c:	800d0680 	call	800d068 <__adddf3>
 8008390:	100d883a 	mov	r6,r2
 8008394:	9009883a 	mov	r4,r18
 8008398:	980b883a 	mov	r5,r19
 800839c:	180f883a 	mov	r7,r3
 80083a0:	1021883a 	mov	r16,r2
 80083a4:	1823883a 	mov	r17,r3
 80083a8:	800d9180 	call	800d918 <__ltdf2>
 80083ac:	10000816 	blt	r2,zero,80083d0 <_dtoa_r+0x6d4>
 80083b0:	980b883a 	mov	r5,r19
 80083b4:	800d883a 	mov	r6,r16
 80083b8:	880f883a 	mov	r7,r17
 80083bc:	9009883a 	mov	r4,r18
 80083c0:	800d6f80 	call	800d6f8 <__eqdf2>
 80083c4:	1000171e 	bne	r2,zero,8008424 <_dtoa_r+0x728>
 80083c8:	a080004c 	andi	r2,r20,1
 80083cc:	10001526 	beq	r2,zero,8008424 <_dtoa_r+0x728>
 80083d0:	d8800d17 	ldw	r2,52(sp)
 80083d4:	d8800415 	stw	r2,16(sp)
 80083d8:	e009883a 	mov	r4,fp
 80083dc:	213fffc4 	addi	r4,r4,-1
 80083e0:	20c00007 	ldb	r3,0(r4)
 80083e4:	00800e44 	movi	r2,57
 80083e8:	1880081e 	bne	r3,r2,800840c <_dtoa_r+0x710>
 80083ec:	d8800517 	ldw	r2,20(sp)
 80083f0:	113ffa1e 	bne	r2,r4,80083dc <_dtoa_r+0x6e0>
 80083f4:	d8c00417 	ldw	r3,16(sp)
 80083f8:	d9800517 	ldw	r6,20(sp)
 80083fc:	00800c04 	movi	r2,48
 8008400:	18c00044 	addi	r3,r3,1
 8008404:	d8c00415 	stw	r3,16(sp)
 8008408:	30800005 	stb	r2,0(r6)
 800840c:	20800003 	ldbu	r2,0(r4)
 8008410:	d8c00417 	ldw	r3,16(sp)
 8008414:	27000044 	addi	fp,r4,1
 8008418:	10800044 	addi	r2,r2,1
 800841c:	d8c00d15 	stw	r3,52(sp)
 8008420:	20800005 	stb	r2,0(r4)
 8008424:	d9001617 	ldw	r4,88(sp)
 8008428:	d9400717 	ldw	r5,28(sp)
 800842c:	800a3b00 	call	800a3b0 <_Bfree>
 8008430:	e0000005 	stb	zero,0(fp)
 8008434:	d9800d17 	ldw	r6,52(sp)
 8008438:	d8c02717 	ldw	r3,156(sp)
 800843c:	d9002917 	ldw	r4,164(sp)
 8008440:	30800044 	addi	r2,r6,1
 8008444:	18800015 	stw	r2,0(r3)
 8008448:	20029c26 	beq	r4,zero,8008ebc <_dtoa_r+0x11c0>
 800844c:	d8c00517 	ldw	r3,20(sp)
 8008450:	27000015 	stw	fp,0(r4)
 8008454:	003e5d06 	br	8007dcc <_dtoa_r+0xd0>
 8008458:	d9800d17 	ldw	r6,52(sp)
 800845c:	00c200b4 	movhi	r3,2050
 8008460:	18e07704 	addi	r3,r3,-32292
 8008464:	d9001217 	ldw	r4,72(sp)
 8008468:	300490fa 	slli	r2,r6,3
 800846c:	d9401317 	ldw	r5,76(sp)
 8008470:	10c5883a 	add	r2,r2,r3
 8008474:	12000017 	ldw	r8,0(r2)
 8008478:	12400117 	ldw	r9,4(r2)
 800847c:	400d883a 	mov	r6,r8
 8008480:	480f883a 	mov	r7,r9
 8008484:	800d9180 	call	800d918 <__ltdf2>
 8008488:	1000030e 	bge	r2,zero,8008498 <_dtoa_r+0x79c>
 800848c:	d8800d17 	ldw	r2,52(sp)
 8008490:	10bfffc4 	addi	r2,r2,-1
 8008494:	d8800d15 	stw	r2,52(sp)
 8008498:	d8000c15 	stw	zero,48(sp)
 800849c:	003ea806 	br	8007f40 <_dtoa_r+0x244>
 80084a0:	d9000b17 	ldw	r4,44(sp)
 80084a4:	202cc03a 	cmpne	r22,r4,zero
 80084a8:	b000c71e 	bne	r22,zero,80087c8 <_dtoa_r+0xacc>
 80084ac:	dc001117 	ldw	r16,68(sp)
 80084b0:	dc801017 	ldw	r18,64(sp)
 80084b4:	0027883a 	mov	r19,zero
 80084b8:	04000b0e 	bge	zero,r16,80084e8 <_dtoa_r+0x7ec>
 80084bc:	d8c00a17 	ldw	r3,40(sp)
 80084c0:	00c0090e 	bge	zero,r3,80084e8 <_dtoa_r+0x7ec>
 80084c4:	8005883a 	mov	r2,r16
 80084c8:	1c011316 	blt	r3,r16,8008918 <_dtoa_r+0xc1c>
 80084cc:	d9000a17 	ldw	r4,40(sp)
 80084d0:	d9801117 	ldw	r6,68(sp)
 80084d4:	80a1c83a 	sub	r16,r16,r2
 80084d8:	2089c83a 	sub	r4,r4,r2
 80084dc:	308dc83a 	sub	r6,r6,r2
 80084e0:	d9000a15 	stw	r4,40(sp)
 80084e4:	d9801115 	stw	r6,68(sp)
 80084e8:	d8801017 	ldw	r2,64(sp)
 80084ec:	0080150e 	bge	zero,r2,8008544 <_dtoa_r+0x848>
 80084f0:	d8c00b17 	ldw	r3,44(sp)
 80084f4:	1805003a 	cmpeq	r2,r3,zero
 80084f8:	1001c91e 	bne	r2,zero,8008c20 <_dtoa_r+0xf24>
 80084fc:	04800e0e 	bge	zero,r18,8008538 <_dtoa_r+0x83c>
 8008500:	d9001617 	ldw	r4,88(sp)
 8008504:	980b883a 	mov	r5,r19
 8008508:	900d883a 	mov	r6,r18
 800850c:	800b1640 	call	800b164 <__pow5mult>
 8008510:	d9001617 	ldw	r4,88(sp)
 8008514:	d9800717 	ldw	r6,28(sp)
 8008518:	100b883a 	mov	r5,r2
 800851c:	1027883a 	mov	r19,r2
 8008520:	800ae400 	call	800ae40 <__multiply>
 8008524:	d9001617 	ldw	r4,88(sp)
 8008528:	d9400717 	ldw	r5,28(sp)
 800852c:	1023883a 	mov	r17,r2
 8008530:	800a3b00 	call	800a3b0 <_Bfree>
 8008534:	dc400715 	stw	r17,28(sp)
 8008538:	d9001017 	ldw	r4,64(sp)
 800853c:	248dc83a 	sub	r6,r4,r18
 8008540:	30010e1e 	bne	r6,zero,800897c <_dtoa_r+0xc80>
 8008544:	d9001617 	ldw	r4,88(sp)
 8008548:	04400044 	movi	r17,1
 800854c:	880b883a 	mov	r5,r17
 8008550:	800b0280 	call	800b028 <__i2b>
 8008554:	d9800917 	ldw	r6,36(sp)
 8008558:	1025883a 	mov	r18,r2
 800855c:	0180040e 	bge	zero,r6,8008570 <_dtoa_r+0x874>
 8008560:	d9001617 	ldw	r4,88(sp)
 8008564:	100b883a 	mov	r5,r2
 8008568:	800b1640 	call	800b164 <__pow5mult>
 800856c:	1025883a 	mov	r18,r2
 8008570:	d8801717 	ldw	r2,92(sp)
 8008574:	8880f30e 	bge	r17,r2,8008944 <_dtoa_r+0xc48>
 8008578:	0023883a 	mov	r17,zero
 800857c:	d9800917 	ldw	r6,36(sp)
 8008580:	30019e1e 	bne	r6,zero,8008bfc <_dtoa_r+0xf00>
 8008584:	00c00044 	movi	r3,1
 8008588:	d9000a17 	ldw	r4,40(sp)
 800858c:	20c5883a 	add	r2,r4,r3
 8008590:	10c007cc 	andi	r3,r2,31
 8008594:	1800841e 	bne	r3,zero,80087a8 <_dtoa_r+0xaac>
 8008598:	00800704 	movi	r2,28
 800859c:	d9000a17 	ldw	r4,40(sp)
 80085a0:	d9801117 	ldw	r6,68(sp)
 80085a4:	80a1883a 	add	r16,r16,r2
 80085a8:	2089883a 	add	r4,r4,r2
 80085ac:	308d883a 	add	r6,r6,r2
 80085b0:	d9000a15 	stw	r4,40(sp)
 80085b4:	d9801115 	stw	r6,68(sp)
 80085b8:	d8801117 	ldw	r2,68(sp)
 80085bc:	0080050e 	bge	zero,r2,80085d4 <_dtoa_r+0x8d8>
 80085c0:	d9400717 	ldw	r5,28(sp)
 80085c4:	d9001617 	ldw	r4,88(sp)
 80085c8:	100d883a 	mov	r6,r2
 80085cc:	800acf40 	call	800acf4 <__lshift>
 80085d0:	d8800715 	stw	r2,28(sp)
 80085d4:	d8c00a17 	ldw	r3,40(sp)
 80085d8:	00c0050e 	bge	zero,r3,80085f0 <_dtoa_r+0x8f4>
 80085dc:	d9001617 	ldw	r4,88(sp)
 80085e0:	900b883a 	mov	r5,r18
 80085e4:	180d883a 	mov	r6,r3
 80085e8:	800acf40 	call	800acf4 <__lshift>
 80085ec:	1025883a 	mov	r18,r2
 80085f0:	d9000c17 	ldw	r4,48(sp)
 80085f4:	2005003a 	cmpeq	r2,r4,zero
 80085f8:	10016f26 	beq	r2,zero,8008bb8 <_dtoa_r+0xebc>
 80085fc:	d9000f17 	ldw	r4,60(sp)
 8008600:	0102170e 	bge	zero,r4,8008e60 <_dtoa_r+0x1164>
 8008604:	d9800b17 	ldw	r6,44(sp)
 8008608:	3005003a 	cmpeq	r2,r6,zero
 800860c:	1000881e 	bne	r2,zero,8008830 <_dtoa_r+0xb34>
 8008610:	0400050e 	bge	zero,r16,8008628 <_dtoa_r+0x92c>
 8008614:	d9001617 	ldw	r4,88(sp)
 8008618:	980b883a 	mov	r5,r19
 800861c:	800d883a 	mov	r6,r16
 8008620:	800acf40 	call	800acf4 <__lshift>
 8008624:	1027883a 	mov	r19,r2
 8008628:	8804c03a 	cmpne	r2,r17,zero
 800862c:	1002541e 	bne	r2,zero,8008f80 <_dtoa_r+0x1284>
 8008630:	980b883a 	mov	r5,r19
 8008634:	dd800517 	ldw	r22,20(sp)
 8008638:	dcc00615 	stw	r19,24(sp)
 800863c:	a700004c 	andi	fp,r20,1
 8008640:	2827883a 	mov	r19,r5
 8008644:	d9000717 	ldw	r4,28(sp)
 8008648:	900b883a 	mov	r5,r18
 800864c:	8007ae40 	call	8007ae4 <quorem>
 8008650:	d9000717 	ldw	r4,28(sp)
 8008654:	d9400617 	ldw	r5,24(sp)
 8008658:	1023883a 	mov	r17,r2
 800865c:	8dc00c04 	addi	r23,r17,48
 8008660:	800a50c0 	call	800a50c <__mcmp>
 8008664:	d9001617 	ldw	r4,88(sp)
 8008668:	900b883a 	mov	r5,r18
 800866c:	980d883a 	mov	r6,r19
 8008670:	1029883a 	mov	r20,r2
 8008674:	800ab680 	call	800ab68 <__mdiff>
 8008678:	102b883a 	mov	r21,r2
 800867c:	10800317 	ldw	r2,12(r2)
 8008680:	1001281e 	bne	r2,zero,8008b24 <_dtoa_r+0xe28>
 8008684:	d9000717 	ldw	r4,28(sp)
 8008688:	a80b883a 	mov	r5,r21
 800868c:	800a50c0 	call	800a50c <__mcmp>
 8008690:	d9001617 	ldw	r4,88(sp)
 8008694:	1021883a 	mov	r16,r2
 8008698:	a80b883a 	mov	r5,r21
 800869c:	800a3b00 	call	800a3b0 <_Bfree>
 80086a0:	8000041e 	bne	r16,zero,80086b4 <_dtoa_r+0x9b8>
 80086a4:	d8801717 	ldw	r2,92(sp)
 80086a8:	1000021e 	bne	r2,zero,80086b4 <_dtoa_r+0x9b8>
 80086ac:	e004c03a 	cmpne	r2,fp,zero
 80086b0:	10011726 	beq	r2,zero,8008b10 <_dtoa_r+0xe14>
 80086b4:	a0010616 	blt	r20,zero,8008ad0 <_dtoa_r+0xdd4>
 80086b8:	a000041e 	bne	r20,zero,80086cc <_dtoa_r+0x9d0>
 80086bc:	d8c01717 	ldw	r3,92(sp)
 80086c0:	1800021e 	bne	r3,zero,80086cc <_dtoa_r+0x9d0>
 80086c4:	e004c03a 	cmpne	r2,fp,zero
 80086c8:	10010126 	beq	r2,zero,8008ad0 <_dtoa_r+0xdd4>
 80086cc:	04023d16 	blt	zero,r16,8008fc4 <_dtoa_r+0x12c8>
 80086d0:	b5c00005 	stb	r23,0(r22)
 80086d4:	d9800517 	ldw	r6,20(sp)
 80086d8:	d9000f17 	ldw	r4,60(sp)
 80086dc:	b5800044 	addi	r22,r22,1
 80086e0:	3105883a 	add	r2,r6,r4
 80086e4:	b0806526 	beq	r22,r2,800887c <_dtoa_r+0xb80>
 80086e8:	d9400717 	ldw	r5,28(sp)
 80086ec:	d9001617 	ldw	r4,88(sp)
 80086f0:	01800284 	movi	r6,10
 80086f4:	000f883a 	mov	r7,zero
 80086f8:	800b0640 	call	800b064 <__multadd>
 80086fc:	d8800715 	stw	r2,28(sp)
 8008700:	d8800617 	ldw	r2,24(sp)
 8008704:	14c10c26 	beq	r2,r19,8008b38 <_dtoa_r+0xe3c>
 8008708:	d9400617 	ldw	r5,24(sp)
 800870c:	d9001617 	ldw	r4,88(sp)
 8008710:	01800284 	movi	r6,10
 8008714:	000f883a 	mov	r7,zero
 8008718:	800b0640 	call	800b064 <__multadd>
 800871c:	d9001617 	ldw	r4,88(sp)
 8008720:	980b883a 	mov	r5,r19
 8008724:	01800284 	movi	r6,10
 8008728:	000f883a 	mov	r7,zero
 800872c:	d8800615 	stw	r2,24(sp)
 8008730:	800b0640 	call	800b064 <__multadd>
 8008734:	1027883a 	mov	r19,r2
 8008738:	003fc206 	br	8008644 <_dtoa_r+0x948>
 800873c:	2445c83a 	sub	r2,r4,r17
 8008740:	a088983a 	sll	r4,r20,r2
 8008744:	003e4b06 	br	8008074 <_dtoa_r+0x378>
 8008748:	01bfffc4 	movi	r6,-1
 800874c:	00800044 	movi	r2,1
 8008750:	d9800e15 	stw	r6,56(sp)
 8008754:	d9800f15 	stw	r6,60(sp)
 8008758:	d8800b15 	stw	r2,44(sp)
 800875c:	d8c01617 	ldw	r3,88(sp)
 8008760:	008005c4 	movi	r2,23
 8008764:	18001115 	stw	zero,68(r3)
 8008768:	1580082e 	bgeu	r2,r22,800878c <_dtoa_r+0xa90>
 800876c:	00c00104 	movi	r3,4
 8008770:	0009883a 	mov	r4,zero
 8008774:	18c7883a 	add	r3,r3,r3
 8008778:	18800504 	addi	r2,r3,20
 800877c:	21000044 	addi	r4,r4,1
 8008780:	b0bffc2e 	bgeu	r22,r2,8008774 <_dtoa_r+0xa78>
 8008784:	d9801617 	ldw	r6,88(sp)
 8008788:	31001115 	stw	r4,68(r6)
 800878c:	dc000f17 	ldw	r16,60(sp)
 8008790:	003e4b06 	br	80080c0 <_dtoa_r+0x3c4>
 8008794:	d9801717 	ldw	r6,92(sp)
 8008798:	0023883a 	mov	r17,zero
 800879c:	31bfff04 	addi	r6,r6,-4
 80087a0:	d9801715 	stw	r6,92(sp)
 80087a4:	003df806 	br	8007f88 <_dtoa_r+0x28c>
 80087a8:	00800804 	movi	r2,32
 80087ac:	10c9c83a 	sub	r4,r2,r3
 80087b0:	00c00104 	movi	r3,4
 80087b4:	19005a16 	blt	r3,r4,8008920 <_dtoa_r+0xc24>
 80087b8:	008000c4 	movi	r2,3
 80087bc:	113f7e16 	blt	r2,r4,80085b8 <_dtoa_r+0x8bc>
 80087c0:	20800704 	addi	r2,r4,28
 80087c4:	003f7506 	br	800859c <_dtoa_r+0x8a0>
 80087c8:	d9801717 	ldw	r6,92(sp)
 80087cc:	00800044 	movi	r2,1
 80087d0:	1180a10e 	bge	r2,r6,8008a58 <_dtoa_r+0xd5c>
 80087d4:	d9800f17 	ldw	r6,60(sp)
 80087d8:	d8c01017 	ldw	r3,64(sp)
 80087dc:	30bfffc4 	addi	r2,r6,-1
 80087e0:	1881c616 	blt	r3,r2,8008efc <_dtoa_r+0x1200>
 80087e4:	18a5c83a 	sub	r18,r3,r2
 80087e8:	d8800f17 	ldw	r2,60(sp)
 80087ec:	10026216 	blt	r2,zero,8009178 <_dtoa_r+0x147c>
 80087f0:	dc001117 	ldw	r16,68(sp)
 80087f4:	1007883a 	mov	r3,r2
 80087f8:	d9800a17 	ldw	r6,40(sp)
 80087fc:	d8801117 	ldw	r2,68(sp)
 8008800:	d9001617 	ldw	r4,88(sp)
 8008804:	30cd883a 	add	r6,r6,r3
 8008808:	10c5883a 	add	r2,r2,r3
 800880c:	01400044 	movi	r5,1
 8008810:	d9800a15 	stw	r6,40(sp)
 8008814:	d8801115 	stw	r2,68(sp)
 8008818:	800b0280 	call	800b028 <__i2b>
 800881c:	1027883a 	mov	r19,r2
 8008820:	003f2506 	br	80084b8 <_dtoa_r+0x7bc>
 8008824:	00c20074 	movhi	r3,2049
 8008828:	18dcd604 	addi	r3,r3,29528
 800882c:	003d6706 	br	8007dcc <_dtoa_r+0xd0>
 8008830:	dd800517 	ldw	r22,20(sp)
 8008834:	04000044 	movi	r16,1
 8008838:	00000706 	br	8008858 <_dtoa_r+0xb5c>
 800883c:	d9400717 	ldw	r5,28(sp)
 8008840:	d9001617 	ldw	r4,88(sp)
 8008844:	01800284 	movi	r6,10
 8008848:	000f883a 	mov	r7,zero
 800884c:	800b0640 	call	800b064 <__multadd>
 8008850:	d8800715 	stw	r2,28(sp)
 8008854:	84000044 	addi	r16,r16,1
 8008858:	d9000717 	ldw	r4,28(sp)
 800885c:	900b883a 	mov	r5,r18
 8008860:	8007ae40 	call	8007ae4 <quorem>
 8008864:	15c00c04 	addi	r23,r2,48
 8008868:	b5c00005 	stb	r23,0(r22)
 800886c:	d8c00f17 	ldw	r3,60(sp)
 8008870:	b5800044 	addi	r22,r22,1
 8008874:	80fff116 	blt	r16,r3,800883c <_dtoa_r+0xb40>
 8008878:	d8000615 	stw	zero,24(sp)
 800887c:	d9400717 	ldw	r5,28(sp)
 8008880:	d9001617 	ldw	r4,88(sp)
 8008884:	01800044 	movi	r6,1
 8008888:	800acf40 	call	800acf4 <__lshift>
 800888c:	1009883a 	mov	r4,r2
 8008890:	900b883a 	mov	r5,r18
 8008894:	d8800715 	stw	r2,28(sp)
 8008898:	800a50c0 	call	800a50c <__mcmp>
 800889c:	00803c0e 	bge	zero,r2,8008990 <_dtoa_r+0xc94>
 80088a0:	b009883a 	mov	r4,r22
 80088a4:	213fffc4 	addi	r4,r4,-1
 80088a8:	21400003 	ldbu	r5,0(r4)
 80088ac:	00800e44 	movi	r2,57
 80088b0:	28c03fcc 	andi	r3,r5,255
 80088b4:	18c0201c 	xori	r3,r3,128
 80088b8:	18ffe004 	addi	r3,r3,-128
 80088bc:	1881981e 	bne	r3,r2,8008f20 <_dtoa_r+0x1224>
 80088c0:	d9800517 	ldw	r6,20(sp)
 80088c4:	21bff71e 	bne	r4,r6,80088a4 <_dtoa_r+0xba8>
 80088c8:	d8800d17 	ldw	r2,52(sp)
 80088cc:	37000044 	addi	fp,r6,1
 80088d0:	10800044 	addi	r2,r2,1
 80088d4:	d8800d15 	stw	r2,52(sp)
 80088d8:	00800c44 	movi	r2,49
 80088dc:	30800005 	stb	r2,0(r6)
 80088e0:	d9001617 	ldw	r4,88(sp)
 80088e4:	900b883a 	mov	r5,r18
 80088e8:	800a3b00 	call	800a3b0 <_Bfree>
 80088ec:	983ecd26 	beq	r19,zero,8008424 <_dtoa_r+0x728>
 80088f0:	d8c00617 	ldw	r3,24(sp)
 80088f4:	18000426 	beq	r3,zero,8008908 <_dtoa_r+0xc0c>
 80088f8:	1cc00326 	beq	r3,r19,8008908 <_dtoa_r+0xc0c>
 80088fc:	d9001617 	ldw	r4,88(sp)
 8008900:	180b883a 	mov	r5,r3
 8008904:	800a3b00 	call	800a3b0 <_Bfree>
 8008908:	d9001617 	ldw	r4,88(sp)
 800890c:	980b883a 	mov	r5,r19
 8008910:	800a3b00 	call	800a3b0 <_Bfree>
 8008914:	003ec306 	br	8008424 <_dtoa_r+0x728>
 8008918:	1805883a 	mov	r2,r3
 800891c:	003eeb06 	br	80084cc <_dtoa_r+0x7d0>
 8008920:	d9800a17 	ldw	r6,40(sp)
 8008924:	d8c01117 	ldw	r3,68(sp)
 8008928:	20bfff04 	addi	r2,r4,-4
 800892c:	308d883a 	add	r6,r6,r2
 8008930:	1887883a 	add	r3,r3,r2
 8008934:	80a1883a 	add	r16,r16,r2
 8008938:	d9800a15 	stw	r6,40(sp)
 800893c:	d8c01115 	stw	r3,68(sp)
 8008940:	003f1d06 	br	80085b8 <_dtoa_r+0x8bc>
 8008944:	a03f0c1e 	bne	r20,zero,8008578 <_dtoa_r+0x87c>
 8008948:	00800434 	movhi	r2,16
 800894c:	10bfffc4 	addi	r2,r2,-1
 8008950:	a884703a 	and	r2,r21,r2
 8008954:	103f081e 	bne	r2,zero,8008578 <_dtoa_r+0x87c>
 8008958:	a89ffc2c 	andhi	r2,r21,32752
 800895c:	103f0626 	beq	r2,zero,8008578 <_dtoa_r+0x87c>
 8008960:	d8c01117 	ldw	r3,68(sp)
 8008964:	d9000a17 	ldw	r4,40(sp)
 8008968:	18c00044 	addi	r3,r3,1
 800896c:	21000044 	addi	r4,r4,1
 8008970:	d8c01115 	stw	r3,68(sp)
 8008974:	d9000a15 	stw	r4,40(sp)
 8008978:	003f0006 	br	800857c <_dtoa_r+0x880>
 800897c:	d9400717 	ldw	r5,28(sp)
 8008980:	d9001617 	ldw	r4,88(sp)
 8008984:	800b1640 	call	800b164 <__pow5mult>
 8008988:	d8800715 	stw	r2,28(sp)
 800898c:	003eed06 	br	8008544 <_dtoa_r+0x848>
 8008990:	1000021e 	bne	r2,zero,800899c <_dtoa_r+0xca0>
 8008994:	b880004c 	andi	r2,r23,1
 8008998:	103fc11e 	bne	r2,zero,80088a0 <_dtoa_r+0xba4>
 800899c:	b5bfffc4 	addi	r22,r22,-1
 80089a0:	b0c00007 	ldb	r3,0(r22)
 80089a4:	00800c04 	movi	r2,48
 80089a8:	18bffc26 	beq	r3,r2,800899c <_dtoa_r+0xca0>
 80089ac:	b7000044 	addi	fp,r22,1
 80089b0:	003fcb06 	br	80088e0 <_dtoa_r+0xbe4>
 80089b4:	d9800d17 	ldw	r6,52(sp)
 80089b8:	018fc83a 	sub	r7,zero,r6
 80089bc:	3801f726 	beq	r7,zero,800919c <_dtoa_r+0x14a0>
 80089c0:	398003cc 	andi	r6,r7,15
 80089c4:	300c90fa 	slli	r6,r6,3
 80089c8:	014200b4 	movhi	r5,2050
 80089cc:	29607704 	addi	r5,r5,-32292
 80089d0:	d9001217 	ldw	r4,72(sp)
 80089d4:	314d883a 	add	r6,r6,r5
 80089d8:	30c00117 	ldw	r3,4(r6)
 80089dc:	30800017 	ldw	r2,0(r6)
 80089e0:	d9401317 	ldw	r5,76(sp)
 80089e4:	3821d13a 	srai	r16,r7,4
 80089e8:	100d883a 	mov	r6,r2
 80089ec:	180f883a 	mov	r7,r3
 80089f0:	800d0dc0 	call	800d0dc <__muldf3>
 80089f4:	1011883a 	mov	r8,r2
 80089f8:	1813883a 	mov	r9,r3
 80089fc:	1029883a 	mov	r20,r2
 8008a00:	182b883a 	mov	r21,r3
 8008a04:	8001e526 	beq	r16,zero,800919c <_dtoa_r+0x14a0>
 8008a08:	05800084 	movi	r22,2
 8008a0c:	044200b4 	movhi	r17,2050
 8008a10:	8c60a904 	addi	r17,r17,-32092
 8008a14:	8080004c 	andi	r2,r16,1
 8008a18:	1005003a 	cmpeq	r2,r2,zero
 8008a1c:	1000081e 	bne	r2,zero,8008a40 <_dtoa_r+0xd44>
 8008a20:	89800017 	ldw	r6,0(r17)
 8008a24:	89c00117 	ldw	r7,4(r17)
 8008a28:	480b883a 	mov	r5,r9
 8008a2c:	4009883a 	mov	r4,r8
 8008a30:	800d0dc0 	call	800d0dc <__muldf3>
 8008a34:	1011883a 	mov	r8,r2
 8008a38:	b5800044 	addi	r22,r22,1
 8008a3c:	1813883a 	mov	r9,r3
 8008a40:	8021d07a 	srai	r16,r16,1
 8008a44:	8c400204 	addi	r17,r17,8
 8008a48:	803ff21e 	bne	r16,zero,8008a14 <_dtoa_r+0xd18>
 8008a4c:	4029883a 	mov	r20,r8
 8008a50:	482b883a 	mov	r21,r9
 8008a54:	003dca06 	br	8008180 <_dtoa_r+0x484>
 8008a58:	d9000817 	ldw	r4,32(sp)
 8008a5c:	2005003a 	cmpeq	r2,r4,zero
 8008a60:	1001f61e 	bne	r2,zero,800923c <_dtoa_r+0x1540>
 8008a64:	dc001117 	ldw	r16,68(sp)
 8008a68:	dc801017 	ldw	r18,64(sp)
 8008a6c:	18c10cc4 	addi	r3,r3,1075
 8008a70:	003f6106 	br	80087f8 <_dtoa_r+0xafc>
 8008a74:	d8000b15 	stw	zero,44(sp)
 8008a78:	d9802617 	ldw	r6,152(sp)
 8008a7c:	d8c00d17 	ldw	r3,52(sp)
 8008a80:	30800044 	addi	r2,r6,1
 8008a84:	18ad883a 	add	r22,r3,r2
 8008a88:	b13fffc4 	addi	r4,r22,-1
 8008a8c:	d9000e15 	stw	r4,56(sp)
 8008a90:	0581f60e 	bge	zero,r22,800926c <_dtoa_r+0x1570>
 8008a94:	dd800f15 	stw	r22,60(sp)
 8008a98:	003f3006 	br	800875c <_dtoa_r+0xa60>
 8008a9c:	d8000b15 	stw	zero,44(sp)
 8008aa0:	d9002617 	ldw	r4,152(sp)
 8008aa4:	0101eb0e 	bge	zero,r4,8009254 <_dtoa_r+0x1558>
 8008aa8:	202d883a 	mov	r22,r4
 8008aac:	d9000e15 	stw	r4,56(sp)
 8008ab0:	d9000f15 	stw	r4,60(sp)
 8008ab4:	003f2906 	br	800875c <_dtoa_r+0xa60>
 8008ab8:	01800044 	movi	r6,1
 8008abc:	d9800b15 	stw	r6,44(sp)
 8008ac0:	003ff706 	br	8008aa0 <_dtoa_r+0xda4>
 8008ac4:	01000044 	movi	r4,1
 8008ac8:	d9000b15 	stw	r4,44(sp)
 8008acc:	003fea06 	br	8008a78 <_dtoa_r+0xd7c>
 8008ad0:	04000c0e 	bge	zero,r16,8008b04 <_dtoa_r+0xe08>
 8008ad4:	d9400717 	ldw	r5,28(sp)
 8008ad8:	d9001617 	ldw	r4,88(sp)
 8008adc:	01800044 	movi	r6,1
 8008ae0:	800acf40 	call	800acf4 <__lshift>
 8008ae4:	1009883a 	mov	r4,r2
 8008ae8:	900b883a 	mov	r5,r18
 8008aec:	d8800715 	stw	r2,28(sp)
 8008af0:	800a50c0 	call	800a50c <__mcmp>
 8008af4:	0081e00e 	bge	zero,r2,8009278 <_dtoa_r+0x157c>
 8008af8:	bdc00044 	addi	r23,r23,1
 8008afc:	00800e84 	movi	r2,58
 8008b00:	b881a226 	beq	r23,r2,800918c <_dtoa_r+0x1490>
 8008b04:	b7000044 	addi	fp,r22,1
 8008b08:	b5c00005 	stb	r23,0(r22)
 8008b0c:	003f7406 	br	80088e0 <_dtoa_r+0xbe4>
 8008b10:	00800e44 	movi	r2,57
 8008b14:	b8819d26 	beq	r23,r2,800918c <_dtoa_r+0x1490>
 8008b18:	053ffa0e 	bge	zero,r20,8008b04 <_dtoa_r+0xe08>
 8008b1c:	8dc00c44 	addi	r23,r17,49
 8008b20:	003ff806 	br	8008b04 <_dtoa_r+0xe08>
 8008b24:	d9001617 	ldw	r4,88(sp)
 8008b28:	a80b883a 	mov	r5,r21
 8008b2c:	04000044 	movi	r16,1
 8008b30:	800a3b00 	call	800a3b0 <_Bfree>
 8008b34:	003edf06 	br	80086b4 <_dtoa_r+0x9b8>
 8008b38:	d9001617 	ldw	r4,88(sp)
 8008b3c:	980b883a 	mov	r5,r19
 8008b40:	01800284 	movi	r6,10
 8008b44:	000f883a 	mov	r7,zero
 8008b48:	800b0640 	call	800b064 <__multadd>
 8008b4c:	1027883a 	mov	r19,r2
 8008b50:	d8800615 	stw	r2,24(sp)
 8008b54:	003ebb06 	br	8008644 <_dtoa_r+0x948>
 8008b58:	d9801117 	ldw	r6,68(sp)
 8008b5c:	d8800d17 	ldw	r2,52(sp)
 8008b60:	d8000915 	stw	zero,36(sp)
 8008b64:	308dc83a 	sub	r6,r6,r2
 8008b68:	0087c83a 	sub	r3,zero,r2
 8008b6c:	d9801115 	stw	r6,68(sp)
 8008b70:	d8c01015 	stw	r3,64(sp)
 8008b74:	003cfe06 	br	8007f70 <_dtoa_r+0x274>
 8008b78:	018dc83a 	sub	r6,zero,r6
 8008b7c:	d9801115 	stw	r6,68(sp)
 8008b80:	d8000a15 	stw	zero,40(sp)
 8008b84:	003cf306 	br	8007f54 <_dtoa_r+0x258>
 8008b88:	d9000d17 	ldw	r4,52(sp)
 8008b8c:	800d9a00 	call	800d9a0 <__floatsidf>
 8008b90:	880b883a 	mov	r5,r17
 8008b94:	8009883a 	mov	r4,r16
 8008b98:	180f883a 	mov	r7,r3
 8008b9c:	100d883a 	mov	r6,r2
 8008ba0:	800d7800 	call	800d780 <__nedf2>
 8008ba4:	103ce126 	beq	r2,zero,8007f2c <_dtoa_r+0x230>
 8008ba8:	d9800d17 	ldw	r6,52(sp)
 8008bac:	31bfffc4 	addi	r6,r6,-1
 8008bb0:	d9800d15 	stw	r6,52(sp)
 8008bb4:	003cdd06 	br	8007f2c <_dtoa_r+0x230>
 8008bb8:	d9000717 	ldw	r4,28(sp)
 8008bbc:	900b883a 	mov	r5,r18
 8008bc0:	800a50c0 	call	800a50c <__mcmp>
 8008bc4:	103e8d0e 	bge	r2,zero,80085fc <_dtoa_r+0x900>
 8008bc8:	d9400717 	ldw	r5,28(sp)
 8008bcc:	d9001617 	ldw	r4,88(sp)
 8008bd0:	01800284 	movi	r6,10
 8008bd4:	000f883a 	mov	r7,zero
 8008bd8:	800b0640 	call	800b064 <__multadd>
 8008bdc:	d9800d17 	ldw	r6,52(sp)
 8008be0:	d8800715 	stw	r2,28(sp)
 8008be4:	31bfffc4 	addi	r6,r6,-1
 8008be8:	d9800d15 	stw	r6,52(sp)
 8008bec:	b001a71e 	bne	r22,zero,800928c <_dtoa_r+0x1590>
 8008bf0:	d8800e17 	ldw	r2,56(sp)
 8008bf4:	d8800f15 	stw	r2,60(sp)
 8008bf8:	003e8006 	br	80085fc <_dtoa_r+0x900>
 8008bfc:	90800417 	ldw	r2,16(r18)
 8008c00:	1085883a 	add	r2,r2,r2
 8008c04:	1085883a 	add	r2,r2,r2
 8008c08:	1485883a 	add	r2,r2,r18
 8008c0c:	11000417 	ldw	r4,16(r2)
 8008c10:	800a3d80 	call	800a3d8 <__hi0bits>
 8008c14:	00c00804 	movi	r3,32
 8008c18:	1887c83a 	sub	r3,r3,r2
 8008c1c:	003e5a06 	br	8008588 <_dtoa_r+0x88c>
 8008c20:	d9400717 	ldw	r5,28(sp)
 8008c24:	d9801017 	ldw	r6,64(sp)
 8008c28:	d9001617 	ldw	r4,88(sp)
 8008c2c:	800b1640 	call	800b164 <__pow5mult>
 8008c30:	d8800715 	stw	r2,28(sp)
 8008c34:	003e4306 	br	8008544 <_dtoa_r+0x848>
 8008c38:	d9800f17 	ldw	r6,60(sp)
 8008c3c:	d8800d17 	ldw	r2,52(sp)
 8008c40:	d9800315 	stw	r6,12(sp)
 8008c44:	d8800415 	stw	r2,16(sp)
 8008c48:	d8c00b17 	ldw	r3,44(sp)
 8008c4c:	1805003a 	cmpeq	r2,r3,zero
 8008c50:	1000e21e 	bne	r2,zero,8008fdc <_dtoa_r+0x12e0>
 8008c54:	d9000317 	ldw	r4,12(sp)
 8008c58:	0005883a 	mov	r2,zero
 8008c5c:	00cff834 	movhi	r3,16352
 8008c60:	200c90fa 	slli	r6,r4,3
 8008c64:	010200b4 	movhi	r4,2050
 8008c68:	21207704 	addi	r4,r4,-32292
 8008c6c:	180b883a 	mov	r5,r3
 8008c70:	310d883a 	add	r6,r6,r4
 8008c74:	327fff17 	ldw	r9,-4(r6)
 8008c78:	323ffe17 	ldw	r8,-8(r6)
 8008c7c:	1009883a 	mov	r4,r2
 8008c80:	480f883a 	mov	r7,r9
 8008c84:	400d883a 	mov	r6,r8
 8008c88:	800d4a00 	call	800d4a0 <__divdf3>
 8008c8c:	180b883a 	mov	r5,r3
 8008c90:	b00d883a 	mov	r6,r22
 8008c94:	b80f883a 	mov	r7,r23
 8008c98:	1009883a 	mov	r4,r2
 8008c9c:	800cfe80 	call	800cfe8 <__subdf3>
 8008ca0:	a80b883a 	mov	r5,r21
 8008ca4:	a009883a 	mov	r4,r20
 8008ca8:	d8c01915 	stw	r3,100(sp)
 8008cac:	d8801815 	stw	r2,96(sp)
 8008cb0:	800da980 	call	800da98 <__fixdfsi>
 8008cb4:	1009883a 	mov	r4,r2
 8008cb8:	1027883a 	mov	r19,r2
 8008cbc:	800d9a00 	call	800d9a0 <__floatsidf>
 8008cc0:	a80b883a 	mov	r5,r21
 8008cc4:	a009883a 	mov	r4,r20
 8008cc8:	180f883a 	mov	r7,r3
 8008ccc:	100d883a 	mov	r6,r2
 8008cd0:	800cfe80 	call	800cfe8 <__subdf3>
 8008cd4:	d9801817 	ldw	r6,96(sp)
 8008cd8:	1823883a 	mov	r17,r3
 8008cdc:	d8801415 	stw	r2,80(sp)
 8008ce0:	302d883a 	mov	r22,r6
 8008ce4:	d9800517 	ldw	r6,20(sp)
 8008ce8:	9cc00c04 	addi	r19,r19,48
 8008cec:	dc401515 	stw	r17,84(sp)
 8008cf0:	d8c01917 	ldw	r3,100(sp)
 8008cf4:	34c00005 	stb	r19,0(r6)
 8008cf8:	d8800517 	ldw	r2,20(sp)
 8008cfc:	d9401917 	ldw	r5,100(sp)
 8008d00:	d9801417 	ldw	r6,80(sp)
 8008d04:	b009883a 	mov	r4,r22
 8008d08:	880f883a 	mov	r7,r17
 8008d0c:	182f883a 	mov	r23,r3
 8008d10:	17000044 	addi	fp,r2,1
 8008d14:	800d8080 	call	800d808 <__gtdf2>
 8008d18:	00804e16 	blt	zero,r2,8008e54 <_dtoa_r+0x1158>
 8008d1c:	d9801417 	ldw	r6,80(sp)
 8008d20:	0005883a 	mov	r2,zero
 8008d24:	00cffc34 	movhi	r3,16368
 8008d28:	180b883a 	mov	r5,r3
 8008d2c:	880f883a 	mov	r7,r17
 8008d30:	1009883a 	mov	r4,r2
 8008d34:	800cfe80 	call	800cfe8 <__subdf3>
 8008d38:	d9401917 	ldw	r5,100(sp)
 8008d3c:	180f883a 	mov	r7,r3
 8008d40:	b009883a 	mov	r4,r22
 8008d44:	100d883a 	mov	r6,r2
 8008d48:	800d8080 	call	800d808 <__gtdf2>
 8008d4c:	00bda216 	blt	zero,r2,80083d8 <_dtoa_r+0x6dc>
 8008d50:	d8c00317 	ldw	r3,12(sp)
 8008d54:	00800044 	movi	r2,1
 8008d58:	10c01216 	blt	r2,r3,8008da4 <_dtoa_r+0x10a8>
 8008d5c:	003d4506 	br	8008274 <_dtoa_r+0x578>
 8008d60:	d9801417 	ldw	r6,80(sp)
 8008d64:	0005883a 	mov	r2,zero
 8008d68:	00cffc34 	movhi	r3,16368
 8008d6c:	180b883a 	mov	r5,r3
 8008d70:	880f883a 	mov	r7,r17
 8008d74:	1009883a 	mov	r4,r2
 8008d78:	800cfe80 	call	800cfe8 <__subdf3>
 8008d7c:	d9c01b17 	ldw	r7,108(sp)
 8008d80:	180b883a 	mov	r5,r3
 8008d84:	1009883a 	mov	r4,r2
 8008d88:	b00d883a 	mov	r6,r22
 8008d8c:	800d9180 	call	800d918 <__ltdf2>
 8008d90:	103d9116 	blt	r2,zero,80083d8 <_dtoa_r+0x6dc>
 8008d94:	d9800517 	ldw	r6,20(sp)
 8008d98:	d9000317 	ldw	r4,12(sp)
 8008d9c:	3105883a 	add	r2,r6,r4
 8008da0:	e0bd3426 	beq	fp,r2,8008274 <_dtoa_r+0x578>
 8008da4:	04500934 	movhi	r17,16420
 8008da8:	0021883a 	mov	r16,zero
 8008dac:	b80b883a 	mov	r5,r23
 8008db0:	b009883a 	mov	r4,r22
 8008db4:	800d883a 	mov	r6,r16
 8008db8:	880f883a 	mov	r7,r17
 8008dbc:	800d0dc0 	call	800d0dc <__muldf3>
 8008dc0:	d9401517 	ldw	r5,84(sp)
 8008dc4:	d9001417 	ldw	r4,80(sp)
 8008dc8:	880f883a 	mov	r7,r17
 8008dcc:	000d883a 	mov	r6,zero
 8008dd0:	d8801a15 	stw	r2,104(sp)
 8008dd4:	d8c01b15 	stw	r3,108(sp)
 8008dd8:	800d0dc0 	call	800d0dc <__muldf3>
 8008ddc:	180b883a 	mov	r5,r3
 8008de0:	1009883a 	mov	r4,r2
 8008de4:	1823883a 	mov	r17,r3
 8008de8:	1021883a 	mov	r16,r2
 8008dec:	800da980 	call	800da98 <__fixdfsi>
 8008df0:	1009883a 	mov	r4,r2
 8008df4:	102b883a 	mov	r21,r2
 8008df8:	800d9a00 	call	800d9a0 <__floatsidf>
 8008dfc:	880b883a 	mov	r5,r17
 8008e00:	8009883a 	mov	r4,r16
 8008e04:	180f883a 	mov	r7,r3
 8008e08:	100d883a 	mov	r6,r2
 8008e0c:	800cfe80 	call	800cfe8 <__subdf3>
 8008e10:	1021883a 	mov	r16,r2
 8008e14:	d9001b17 	ldw	r4,108(sp)
 8008e18:	1823883a 	mov	r17,r3
 8008e1c:	dc001415 	stw	r16,80(sp)
 8008e20:	ad400c04 	addi	r21,r21,48
 8008e24:	dc401515 	stw	r17,84(sp)
 8008e28:	d8801a17 	ldw	r2,104(sp)
 8008e2c:	e5400005 	stb	r21,0(fp)
 8008e30:	202f883a 	mov	r23,r4
 8008e34:	d9c01b17 	ldw	r7,108(sp)
 8008e38:	d9001417 	ldw	r4,80(sp)
 8008e3c:	880b883a 	mov	r5,r17
 8008e40:	100d883a 	mov	r6,r2
 8008e44:	102d883a 	mov	r22,r2
 8008e48:	e7000044 	addi	fp,fp,1
 8008e4c:	800d9180 	call	800d918 <__ltdf2>
 8008e50:	103fc30e 	bge	r2,zero,8008d60 <_dtoa_r+0x1064>
 8008e54:	d9000417 	ldw	r4,16(sp)
 8008e58:	d9000d15 	stw	r4,52(sp)
 8008e5c:	003d7106 	br	8008424 <_dtoa_r+0x728>
 8008e60:	d9801717 	ldw	r6,92(sp)
 8008e64:	00800084 	movi	r2,2
 8008e68:	11bde60e 	bge	r2,r6,8008604 <_dtoa_r+0x908>
 8008e6c:	203cfb1e 	bne	r4,zero,800825c <_dtoa_r+0x560>
 8008e70:	d9001617 	ldw	r4,88(sp)
 8008e74:	900b883a 	mov	r5,r18
 8008e78:	01800144 	movi	r6,5
 8008e7c:	000f883a 	mov	r7,zero
 8008e80:	800b0640 	call	800b064 <__multadd>
 8008e84:	d9000717 	ldw	r4,28(sp)
 8008e88:	100b883a 	mov	r5,r2
 8008e8c:	1025883a 	mov	r18,r2
 8008e90:	800a50c0 	call	800a50c <__mcmp>
 8008e94:	00bcf10e 	bge	zero,r2,800825c <_dtoa_r+0x560>
 8008e98:	d8c00d17 	ldw	r3,52(sp)
 8008e9c:	d9000517 	ldw	r4,20(sp)
 8008ea0:	d8000615 	stw	zero,24(sp)
 8008ea4:	18c00044 	addi	r3,r3,1
 8008ea8:	d8c00d15 	stw	r3,52(sp)
 8008eac:	00800c44 	movi	r2,49
 8008eb0:	27000044 	addi	fp,r4,1
 8008eb4:	20800005 	stb	r2,0(r4)
 8008eb8:	003e8906 	br	80088e0 <_dtoa_r+0xbe4>
 8008ebc:	d8c00517 	ldw	r3,20(sp)
 8008ec0:	003bc206 	br	8007dcc <_dtoa_r+0xd0>
 8008ec4:	018200b4 	movhi	r6,2050
 8008ec8:	31a0a904 	addi	r6,r6,-32092
 8008ecc:	30c00917 	ldw	r3,36(r6)
 8008ed0:	30800817 	ldw	r2,32(r6)
 8008ed4:	d9001217 	ldw	r4,72(sp)
 8008ed8:	d9401317 	ldw	r5,76(sp)
 8008edc:	180f883a 	mov	r7,r3
 8008ee0:	100d883a 	mov	r6,r2
 8008ee4:	800d4a00 	call	800d4a0 <__divdf3>
 8008ee8:	948003cc 	andi	r18,r18,15
 8008eec:	058000c4 	movi	r22,3
 8008ef0:	1029883a 	mov	r20,r2
 8008ef4:	182b883a 	mov	r21,r3
 8008ef8:	003c8906 	br	8008120 <_dtoa_r+0x424>
 8008efc:	d9001017 	ldw	r4,64(sp)
 8008f00:	d9800917 	ldw	r6,36(sp)
 8008f04:	0025883a 	mov	r18,zero
 8008f08:	1105c83a 	sub	r2,r2,r4
 8008f0c:	2089883a 	add	r4,r4,r2
 8008f10:	308d883a 	add	r6,r6,r2
 8008f14:	d9001015 	stw	r4,64(sp)
 8008f18:	d9800915 	stw	r6,36(sp)
 8008f1c:	003e3206 	br	80087e8 <_dtoa_r+0xaec>
 8008f20:	28800044 	addi	r2,r5,1
 8008f24:	27000044 	addi	fp,r4,1
 8008f28:	20800005 	stb	r2,0(r4)
 8008f2c:	003e6c06 	br	80088e0 <_dtoa_r+0xbe4>
 8008f30:	d8800f17 	ldw	r2,60(sp)
 8008f34:	00bce016 	blt	zero,r2,80082b8 <_dtoa_r+0x5bc>
 8008f38:	d9800f17 	ldw	r6,60(sp)
 8008f3c:	303cc51e 	bne	r6,zero,8008254 <_dtoa_r+0x558>
 8008f40:	0005883a 	mov	r2,zero
 8008f44:	00d00534 	movhi	r3,16404
 8008f48:	980b883a 	mov	r5,r19
 8008f4c:	180f883a 	mov	r7,r3
 8008f50:	9009883a 	mov	r4,r18
 8008f54:	100d883a 	mov	r6,r2
 8008f58:	800d0dc0 	call	800d0dc <__muldf3>
 8008f5c:	180b883a 	mov	r5,r3
 8008f60:	a80f883a 	mov	r7,r21
 8008f64:	1009883a 	mov	r4,r2
 8008f68:	a00d883a 	mov	r6,r20
 8008f6c:	800d8900 	call	800d890 <__gedf2>
 8008f70:	103cb80e 	bge	r2,zero,8008254 <_dtoa_r+0x558>
 8008f74:	0027883a 	mov	r19,zero
 8008f78:	0025883a 	mov	r18,zero
 8008f7c:	003fc606 	br	8008e98 <_dtoa_r+0x119c>
 8008f80:	99400117 	ldw	r5,4(r19)
 8008f84:	d9001617 	ldw	r4,88(sp)
 8008f88:	800a9300 	call	800a930 <_Balloc>
 8008f8c:	99800417 	ldw	r6,16(r19)
 8008f90:	11000304 	addi	r4,r2,12
 8008f94:	99400304 	addi	r5,r19,12
 8008f98:	318d883a 	add	r6,r6,r6
 8008f9c:	318d883a 	add	r6,r6,r6
 8008fa0:	31800204 	addi	r6,r6,8
 8008fa4:	1023883a 	mov	r17,r2
 8008fa8:	8004c480 	call	8004c48 <memcpy>
 8008fac:	d9001617 	ldw	r4,88(sp)
 8008fb0:	880b883a 	mov	r5,r17
 8008fb4:	01800044 	movi	r6,1
 8008fb8:	800acf40 	call	800acf4 <__lshift>
 8008fbc:	100b883a 	mov	r5,r2
 8008fc0:	003d9c06 	br	8008634 <_dtoa_r+0x938>
 8008fc4:	00800e44 	movi	r2,57
 8008fc8:	b8807026 	beq	r23,r2,800918c <_dtoa_r+0x1490>
 8008fcc:	b8800044 	addi	r2,r23,1
 8008fd0:	b7000044 	addi	fp,r22,1
 8008fd4:	b0800005 	stb	r2,0(r22)
 8008fd8:	003e4106 	br	80088e0 <_dtoa_r+0xbe4>
 8008fdc:	d8800317 	ldw	r2,12(sp)
 8008fe0:	018200b4 	movhi	r6,2050
 8008fe4:	31a07704 	addi	r6,r6,-32292
 8008fe8:	b009883a 	mov	r4,r22
 8008fec:	100e90fa 	slli	r7,r2,3
 8008ff0:	b80b883a 	mov	r5,r23
 8008ff4:	398f883a 	add	r7,r7,r6
 8008ff8:	38bffe17 	ldw	r2,-8(r7)
 8008ffc:	d9800517 	ldw	r6,20(sp)
 8009000:	38ffff17 	ldw	r3,-4(r7)
 8009004:	37000044 	addi	fp,r6,1
 8009008:	180f883a 	mov	r7,r3
 800900c:	100d883a 	mov	r6,r2
 8009010:	800d0dc0 	call	800d0dc <__muldf3>
 8009014:	a80b883a 	mov	r5,r21
 8009018:	a009883a 	mov	r4,r20
 800901c:	182f883a 	mov	r23,r3
 8009020:	102d883a 	mov	r22,r2
 8009024:	800da980 	call	800da98 <__fixdfsi>
 8009028:	1009883a 	mov	r4,r2
 800902c:	1027883a 	mov	r19,r2
 8009030:	800d9a00 	call	800d9a0 <__floatsidf>
 8009034:	a80b883a 	mov	r5,r21
 8009038:	a009883a 	mov	r4,r20
 800903c:	180f883a 	mov	r7,r3
 8009040:	100d883a 	mov	r6,r2
 8009044:	800cfe80 	call	800cfe8 <__subdf3>
 8009048:	180b883a 	mov	r5,r3
 800904c:	d8c00517 	ldw	r3,20(sp)
 8009050:	9cc00c04 	addi	r19,r19,48
 8009054:	1009883a 	mov	r4,r2
 8009058:	1cc00005 	stb	r19,0(r3)
 800905c:	2021883a 	mov	r16,r4
 8009060:	d9000317 	ldw	r4,12(sp)
 8009064:	00800044 	movi	r2,1
 8009068:	2823883a 	mov	r17,r5
 800906c:	20802226 	beq	r4,r2,80090f8 <_dtoa_r+0x13fc>
 8009070:	1029883a 	mov	r20,r2
 8009074:	0005883a 	mov	r2,zero
 8009078:	00d00934 	movhi	r3,16420
 800907c:	180f883a 	mov	r7,r3
 8009080:	100d883a 	mov	r6,r2
 8009084:	880b883a 	mov	r5,r17
 8009088:	8009883a 	mov	r4,r16
 800908c:	800d0dc0 	call	800d0dc <__muldf3>
 8009090:	180b883a 	mov	r5,r3
 8009094:	1009883a 	mov	r4,r2
 8009098:	1823883a 	mov	r17,r3
 800909c:	1021883a 	mov	r16,r2
 80090a0:	800da980 	call	800da98 <__fixdfsi>
 80090a4:	1009883a 	mov	r4,r2
 80090a8:	102b883a 	mov	r21,r2
 80090ac:	800d9a00 	call	800d9a0 <__floatsidf>
 80090b0:	880b883a 	mov	r5,r17
 80090b4:	8009883a 	mov	r4,r16
 80090b8:	180f883a 	mov	r7,r3
 80090bc:	100d883a 	mov	r6,r2
 80090c0:	800cfe80 	call	800cfe8 <__subdf3>
 80090c4:	180b883a 	mov	r5,r3
 80090c8:	d8c00517 	ldw	r3,20(sp)
 80090cc:	1009883a 	mov	r4,r2
 80090d0:	ad400c04 	addi	r21,r21,48
 80090d4:	1d05883a 	add	r2,r3,r20
 80090d8:	15400005 	stb	r21,0(r2)
 80090dc:	2021883a 	mov	r16,r4
 80090e0:	d9000317 	ldw	r4,12(sp)
 80090e4:	a5000044 	addi	r20,r20,1
 80090e8:	2823883a 	mov	r17,r5
 80090ec:	a13fe11e 	bne	r20,r4,8009074 <_dtoa_r+0x1378>
 80090f0:	e505883a 	add	r2,fp,r20
 80090f4:	173fffc4 	addi	fp,r2,-1
 80090f8:	0025883a 	mov	r18,zero
 80090fc:	04cff834 	movhi	r19,16352
 8009100:	b009883a 	mov	r4,r22
 8009104:	b80b883a 	mov	r5,r23
 8009108:	900d883a 	mov	r6,r18
 800910c:	980f883a 	mov	r7,r19
 8009110:	800d0680 	call	800d068 <__adddf3>
 8009114:	180b883a 	mov	r5,r3
 8009118:	1009883a 	mov	r4,r2
 800911c:	800d883a 	mov	r6,r16
 8009120:	880f883a 	mov	r7,r17
 8009124:	800d9180 	call	800d918 <__ltdf2>
 8009128:	103cab16 	blt	r2,zero,80083d8 <_dtoa_r+0x6dc>
 800912c:	0009883a 	mov	r4,zero
 8009130:	980b883a 	mov	r5,r19
 8009134:	b80f883a 	mov	r7,r23
 8009138:	b00d883a 	mov	r6,r22
 800913c:	800cfe80 	call	800cfe8 <__subdf3>
 8009140:	180b883a 	mov	r5,r3
 8009144:	880f883a 	mov	r7,r17
 8009148:	1009883a 	mov	r4,r2
 800914c:	800d883a 	mov	r6,r16
 8009150:	800d8080 	call	800d808 <__gtdf2>
 8009154:	00bc470e 	bge	zero,r2,8008274 <_dtoa_r+0x578>
 8009158:	00c00c04 	movi	r3,48
 800915c:	e73fffc4 	addi	fp,fp,-1
 8009160:	e0800007 	ldb	r2,0(fp)
 8009164:	10fffd26 	beq	r2,r3,800915c <_dtoa_r+0x1460>
 8009168:	d9800417 	ldw	r6,16(sp)
 800916c:	e7000044 	addi	fp,fp,1
 8009170:	d9800d15 	stw	r6,52(sp)
 8009174:	003cab06 	br	8008424 <_dtoa_r+0x728>
 8009178:	d8c00f17 	ldw	r3,60(sp)
 800917c:	d9001117 	ldw	r4,68(sp)
 8009180:	20e1c83a 	sub	r16,r4,r3
 8009184:	0007883a 	mov	r3,zero
 8009188:	003d9b06 	br	80087f8 <_dtoa_r+0xafc>
 800918c:	00800e44 	movi	r2,57
 8009190:	b0800005 	stb	r2,0(r22)
 8009194:	b5800044 	addi	r22,r22,1
 8009198:	003dc106 	br	80088a0 <_dtoa_r+0xba4>
 800919c:	05800084 	movi	r22,2
 80091a0:	003bf706 	br	8008180 <_dtoa_r+0x484>
 80091a4:	d9000f17 	ldw	r4,60(sp)
 80091a8:	013c000e 	bge	zero,r4,80081ac <_dtoa_r+0x4b0>
 80091ac:	d9800e17 	ldw	r6,56(sp)
 80091b0:	01bc300e 	bge	zero,r6,8008274 <_dtoa_r+0x578>
 80091b4:	0005883a 	mov	r2,zero
 80091b8:	00d00934 	movhi	r3,16420
 80091bc:	a80b883a 	mov	r5,r21
 80091c0:	180f883a 	mov	r7,r3
 80091c4:	a009883a 	mov	r4,r20
 80091c8:	100d883a 	mov	r6,r2
 80091cc:	800d0dc0 	call	800d0dc <__muldf3>
 80091d0:	b1000044 	addi	r4,r22,1
 80091d4:	1021883a 	mov	r16,r2
 80091d8:	1823883a 	mov	r17,r3
 80091dc:	800d9a00 	call	800d9a0 <__floatsidf>
 80091e0:	880b883a 	mov	r5,r17
 80091e4:	8009883a 	mov	r4,r16
 80091e8:	180f883a 	mov	r7,r3
 80091ec:	100d883a 	mov	r6,r2
 80091f0:	800d0dc0 	call	800d0dc <__muldf3>
 80091f4:	0011883a 	mov	r8,zero
 80091f8:	02500734 	movhi	r9,16412
 80091fc:	180b883a 	mov	r5,r3
 8009200:	480f883a 	mov	r7,r9
 8009204:	1009883a 	mov	r4,r2
 8009208:	400d883a 	mov	r6,r8
 800920c:	800d0680 	call	800d068 <__adddf3>
 8009210:	102d883a 	mov	r22,r2
 8009214:	00bf3034 	movhi	r2,64704
 8009218:	10ef883a 	add	r23,r2,r3
 800921c:	d8800d17 	ldw	r2,52(sp)
 8009220:	d8c00e17 	ldw	r3,56(sp)
 8009224:	8029883a 	mov	r20,r16
 8009228:	10bfffc4 	addi	r2,r2,-1
 800922c:	882b883a 	mov	r21,r17
 8009230:	d8800415 	stw	r2,16(sp)
 8009234:	d8c00315 	stw	r3,12(sp)
 8009238:	003e8306 	br	8008c48 <_dtoa_r+0xf4c>
 800923c:	d8800117 	ldw	r2,4(sp)
 8009240:	dc001117 	ldw	r16,68(sp)
 8009244:	dc801017 	ldw	r18,64(sp)
 8009248:	00c00d84 	movi	r3,54
 800924c:	1887c83a 	sub	r3,r3,r2
 8009250:	003d6906 	br	80087f8 <_dtoa_r+0xafc>
 8009254:	01800044 	movi	r6,1
 8009258:	3021883a 	mov	r16,r6
 800925c:	d9800f15 	stw	r6,60(sp)
 8009260:	d9802615 	stw	r6,152(sp)
 8009264:	d9800e15 	stw	r6,56(sp)
 8009268:	003b9306 	br	80080b8 <_dtoa_r+0x3bc>
 800926c:	b021883a 	mov	r16,r22
 8009270:	dd800f15 	stw	r22,60(sp)
 8009274:	003b9006 	br	80080b8 <_dtoa_r+0x3bc>
 8009278:	103e221e 	bne	r2,zero,8008b04 <_dtoa_r+0xe08>
 800927c:	b880004c 	andi	r2,r23,1
 8009280:	1005003a 	cmpeq	r2,r2,zero
 8009284:	103e1f1e 	bne	r2,zero,8008b04 <_dtoa_r+0xe08>
 8009288:	003e1b06 	br	8008af8 <_dtoa_r+0xdfc>
 800928c:	d9001617 	ldw	r4,88(sp)
 8009290:	980b883a 	mov	r5,r19
 8009294:	01800284 	movi	r6,10
 8009298:	000f883a 	mov	r7,zero
 800929c:	800b0640 	call	800b064 <__multadd>
 80092a0:	d8c00e17 	ldw	r3,56(sp)
 80092a4:	1027883a 	mov	r19,r2
 80092a8:	d8c00f15 	stw	r3,60(sp)
 80092ac:	003cd306 	br	80085fc <_dtoa_r+0x900>

080092b0 <_fflush_r>:
 80092b0:	defffb04 	addi	sp,sp,-20
 80092b4:	dcc00315 	stw	r19,12(sp)
 80092b8:	dc800215 	stw	r18,8(sp)
 80092bc:	dfc00415 	stw	ra,16(sp)
 80092c0:	dc400115 	stw	r17,4(sp)
 80092c4:	dc000015 	stw	r16,0(sp)
 80092c8:	2027883a 	mov	r19,r4
 80092cc:	2825883a 	mov	r18,r5
 80092d0:	20000226 	beq	r4,zero,80092dc <_fflush_r+0x2c>
 80092d4:	20800e17 	ldw	r2,56(r4)
 80092d8:	10005626 	beq	r2,zero,8009434 <_fflush_r+0x184>
 80092dc:	9100030b 	ldhu	r4,12(r18)
 80092e0:	20ffffcc 	andi	r3,r4,65535
 80092e4:	18e0001c 	xori	r3,r3,32768
 80092e8:	18e00004 	addi	r3,r3,-32768
 80092ec:	1880020c 	andi	r2,r3,8
 80092f0:	1000261e 	bne	r2,zero,800938c <_fflush_r+0xdc>
 80092f4:	90c00117 	ldw	r3,4(r18)
 80092f8:	20820014 	ori	r2,r4,2048
 80092fc:	9080030d 	sth	r2,12(r18)
 8009300:	1009883a 	mov	r4,r2
 8009304:	00c0400e 	bge	zero,r3,8009408 <_fflush_r+0x158>
 8009308:	92000a17 	ldw	r8,40(r18)
 800930c:	40004026 	beq	r8,zero,8009410 <_fflush_r+0x160>
 8009310:	2084000c 	andi	r2,r4,4096
 8009314:	10005326 	beq	r2,zero,8009464 <_fflush_r+0x1b4>
 8009318:	94001417 	ldw	r16,80(r18)
 800931c:	9080030b 	ldhu	r2,12(r18)
 8009320:	1080010c 	andi	r2,r2,4
 8009324:	1000481e 	bne	r2,zero,8009448 <_fflush_r+0x198>
 8009328:	91400717 	ldw	r5,28(r18)
 800932c:	9809883a 	mov	r4,r19
 8009330:	800d883a 	mov	r6,r16
 8009334:	000f883a 	mov	r7,zero
 8009338:	403ee83a 	callr	r8
 800933c:	8080261e 	bne	r16,r2,80093d8 <_fflush_r+0x128>
 8009340:	9080030b 	ldhu	r2,12(r18)
 8009344:	91000417 	ldw	r4,16(r18)
 8009348:	90000115 	stw	zero,4(r18)
 800934c:	10bdffcc 	andi	r2,r2,63487
 8009350:	10ffffcc 	andi	r3,r2,65535
 8009354:	18c4000c 	andi	r3,r3,4096
 8009358:	9080030d 	sth	r2,12(r18)
 800935c:	91000015 	stw	r4,0(r18)
 8009360:	18002b26 	beq	r3,zero,8009410 <_fflush_r+0x160>
 8009364:	0007883a 	mov	r3,zero
 8009368:	1805883a 	mov	r2,r3
 800936c:	94001415 	stw	r16,80(r18)
 8009370:	dfc00417 	ldw	ra,16(sp)
 8009374:	dcc00317 	ldw	r19,12(sp)
 8009378:	dc800217 	ldw	r18,8(sp)
 800937c:	dc400117 	ldw	r17,4(sp)
 8009380:	dc000017 	ldw	r16,0(sp)
 8009384:	dec00504 	addi	sp,sp,20
 8009388:	f800283a 	ret
 800938c:	94400417 	ldw	r17,16(r18)
 8009390:	88001f26 	beq	r17,zero,8009410 <_fflush_r+0x160>
 8009394:	90800017 	ldw	r2,0(r18)
 8009398:	18c000cc 	andi	r3,r3,3
 800939c:	94400015 	stw	r17,0(r18)
 80093a0:	1461c83a 	sub	r16,r2,r17
 80093a4:	18002526 	beq	r3,zero,800943c <_fflush_r+0x18c>
 80093a8:	0005883a 	mov	r2,zero
 80093ac:	90800215 	stw	r2,8(r18)
 80093b0:	0400170e 	bge	zero,r16,8009410 <_fflush_r+0x160>
 80093b4:	90c00917 	ldw	r3,36(r18)
 80093b8:	91400717 	ldw	r5,28(r18)
 80093bc:	880d883a 	mov	r6,r17
 80093c0:	800f883a 	mov	r7,r16
 80093c4:	9809883a 	mov	r4,r19
 80093c8:	183ee83a 	callr	r3
 80093cc:	88a3883a 	add	r17,r17,r2
 80093d0:	80a1c83a 	sub	r16,r16,r2
 80093d4:	00bff616 	blt	zero,r2,80093b0 <_fflush_r+0x100>
 80093d8:	9080030b 	ldhu	r2,12(r18)
 80093dc:	00ffffc4 	movi	r3,-1
 80093e0:	10801014 	ori	r2,r2,64
 80093e4:	9080030d 	sth	r2,12(r18)
 80093e8:	1805883a 	mov	r2,r3
 80093ec:	dfc00417 	ldw	ra,16(sp)
 80093f0:	dcc00317 	ldw	r19,12(sp)
 80093f4:	dc800217 	ldw	r18,8(sp)
 80093f8:	dc400117 	ldw	r17,4(sp)
 80093fc:	dc000017 	ldw	r16,0(sp)
 8009400:	dec00504 	addi	sp,sp,20
 8009404:	f800283a 	ret
 8009408:	90800f17 	ldw	r2,60(r18)
 800940c:	00bfbe16 	blt	zero,r2,8009308 <_fflush_r+0x58>
 8009410:	0007883a 	mov	r3,zero
 8009414:	1805883a 	mov	r2,r3
 8009418:	dfc00417 	ldw	ra,16(sp)
 800941c:	dcc00317 	ldw	r19,12(sp)
 8009420:	dc800217 	ldw	r18,8(sp)
 8009424:	dc400117 	ldw	r17,4(sp)
 8009428:	dc000017 	ldw	r16,0(sp)
 800942c:	dec00504 	addi	sp,sp,20
 8009430:	f800283a 	ret
 8009434:	80095480 	call	8009548 <__sinit>
 8009438:	003fa806 	br	80092dc <_fflush_r+0x2c>
 800943c:	90800517 	ldw	r2,20(r18)
 8009440:	90800215 	stw	r2,8(r18)
 8009444:	003fda06 	br	80093b0 <_fflush_r+0x100>
 8009448:	90800117 	ldw	r2,4(r18)
 800944c:	90c00c17 	ldw	r3,48(r18)
 8009450:	80a1c83a 	sub	r16,r16,r2
 8009454:	183fb426 	beq	r3,zero,8009328 <_fflush_r+0x78>
 8009458:	90800f17 	ldw	r2,60(r18)
 800945c:	80a1c83a 	sub	r16,r16,r2
 8009460:	003fb106 	br	8009328 <_fflush_r+0x78>
 8009464:	91400717 	ldw	r5,28(r18)
 8009468:	9809883a 	mov	r4,r19
 800946c:	000d883a 	mov	r6,zero
 8009470:	01c00044 	movi	r7,1
 8009474:	403ee83a 	callr	r8
 8009478:	1021883a 	mov	r16,r2
 800947c:	00bfffc4 	movi	r2,-1
 8009480:	80800226 	beq	r16,r2,800948c <_fflush_r+0x1dc>
 8009484:	92000a17 	ldw	r8,40(r18)
 8009488:	003fa406 	br	800931c <_fflush_r+0x6c>
 800948c:	98c00017 	ldw	r3,0(r19)
 8009490:	00800744 	movi	r2,29
 8009494:	18bfde26 	beq	r3,r2,8009410 <_fflush_r+0x160>
 8009498:	9080030b 	ldhu	r2,12(r18)
 800949c:	8007883a 	mov	r3,r16
 80094a0:	10801014 	ori	r2,r2,64
 80094a4:	9080030d 	sth	r2,12(r18)
 80094a8:	003fcf06 	br	80093e8 <_fflush_r+0x138>

080094ac <fflush>:
 80094ac:	01420074 	movhi	r5,2049
 80094b0:	2964ac04 	addi	r5,r5,-27984
 80094b4:	2007883a 	mov	r3,r4
 80094b8:	20000526 	beq	r4,zero,80094d0 <fflush+0x24>
 80094bc:	008200b4 	movhi	r2,2050
 80094c0:	10a95904 	addi	r2,r2,-23196
 80094c4:	11000017 	ldw	r4,0(r2)
 80094c8:	180b883a 	mov	r5,r3
 80094cc:	80092b01 	jmpi	80092b0 <_fflush_r>
 80094d0:	008200b4 	movhi	r2,2050
 80094d4:	10a95a04 	addi	r2,r2,-23192
 80094d8:	11000017 	ldw	r4,0(r2)
 80094dc:	8009e281 	jmpi	8009e28 <_fwalk_reent>

080094e0 <std>:
 80094e0:	00820034 	movhi	r2,2048
 80094e4:	10945704 	addi	r2,r2,20828
 80094e8:	20800b15 	stw	r2,44(r4)
 80094ec:	00820034 	movhi	r2,2048
 80094f0:	10949204 	addi	r2,r2,21064
 80094f4:	20800815 	stw	r2,32(r4)
 80094f8:	00c20034 	movhi	r3,2048
 80094fc:	18d47304 	addi	r3,r3,20940
 8009500:	00820034 	movhi	r2,2048
 8009504:	10945904 	addi	r2,r2,20836
 8009508:	2140030d 	sth	r5,12(r4)
 800950c:	2180038d 	sth	r6,14(r4)
 8009510:	20c00915 	stw	r3,36(r4)
 8009514:	20800a15 	stw	r2,40(r4)
 8009518:	20000015 	stw	zero,0(r4)
 800951c:	20000115 	stw	zero,4(r4)
 8009520:	20000215 	stw	zero,8(r4)
 8009524:	20000415 	stw	zero,16(r4)
 8009528:	20000515 	stw	zero,20(r4)
 800952c:	20000615 	stw	zero,24(r4)
 8009530:	21000715 	stw	r4,28(r4)
 8009534:	f800283a 	ret

08009538 <__sfp_lock_acquire>:
 8009538:	f800283a 	ret

0800953c <__sfp_lock_release>:
 800953c:	f800283a 	ret

08009540 <__sinit_lock_acquire>:
 8009540:	f800283a 	ret

08009544 <__sinit_lock_release>:
 8009544:	f800283a 	ret

08009548 <__sinit>:
 8009548:	20800e17 	ldw	r2,56(r4)
 800954c:	defffd04 	addi	sp,sp,-12
 8009550:	dc400115 	stw	r17,4(sp)
 8009554:	dc000015 	stw	r16,0(sp)
 8009558:	dfc00215 	stw	ra,8(sp)
 800955c:	04400044 	movi	r17,1
 8009560:	01400104 	movi	r5,4
 8009564:	000d883a 	mov	r6,zero
 8009568:	2021883a 	mov	r16,r4
 800956c:	2200bb04 	addi	r8,r4,748
 8009570:	200f883a 	mov	r7,r4
 8009574:	10000526 	beq	r2,zero,800958c <__sinit+0x44>
 8009578:	dfc00217 	ldw	ra,8(sp)
 800957c:	dc400117 	ldw	r17,4(sp)
 8009580:	dc000017 	ldw	r16,0(sp)
 8009584:	dec00304 	addi	sp,sp,12
 8009588:	f800283a 	ret
 800958c:	21000117 	ldw	r4,4(r4)
 8009590:	00820074 	movhi	r2,2049
 8009594:	10a58b04 	addi	r2,r2,-27092
 8009598:	00c000c4 	movi	r3,3
 800959c:	80800f15 	stw	r2,60(r16)
 80095a0:	80c0b915 	stw	r3,740(r16)
 80095a4:	8200ba15 	stw	r8,744(r16)
 80095a8:	84400e15 	stw	r17,56(r16)
 80095ac:	8000b815 	stw	zero,736(r16)
 80095b0:	80094e00 	call	80094e0 <std>
 80095b4:	81000217 	ldw	r4,8(r16)
 80095b8:	880d883a 	mov	r6,r17
 80095bc:	800f883a 	mov	r7,r16
 80095c0:	01400284 	movi	r5,10
 80095c4:	80094e00 	call	80094e0 <std>
 80095c8:	81000317 	ldw	r4,12(r16)
 80095cc:	800f883a 	mov	r7,r16
 80095d0:	01400484 	movi	r5,18
 80095d4:	01800084 	movi	r6,2
 80095d8:	dfc00217 	ldw	ra,8(sp)
 80095dc:	dc400117 	ldw	r17,4(sp)
 80095e0:	dc000017 	ldw	r16,0(sp)
 80095e4:	dec00304 	addi	sp,sp,12
 80095e8:	80094e01 	jmpi	80094e0 <std>

080095ec <__fp_lock>:
 80095ec:	0005883a 	mov	r2,zero
 80095f0:	f800283a 	ret

080095f4 <__fp_unlock>:
 80095f4:	0005883a 	mov	r2,zero
 80095f8:	f800283a 	ret

080095fc <__fp_unlock_all>:
 80095fc:	008200b4 	movhi	r2,2050
 8009600:	10a95904 	addi	r2,r2,-23196
 8009604:	11000017 	ldw	r4,0(r2)
 8009608:	01420074 	movhi	r5,2049
 800960c:	29657d04 	addi	r5,r5,-27148
 8009610:	8009ef01 	jmpi	8009ef0 <_fwalk>

08009614 <__fp_lock_all>:
 8009614:	008200b4 	movhi	r2,2050
 8009618:	10a95904 	addi	r2,r2,-23196
 800961c:	11000017 	ldw	r4,0(r2)
 8009620:	01420074 	movhi	r5,2049
 8009624:	29657b04 	addi	r5,r5,-27156
 8009628:	8009ef01 	jmpi	8009ef0 <_fwalk>

0800962c <_cleanup_r>:
 800962c:	01420074 	movhi	r5,2049
 8009630:	29700e04 	addi	r5,r5,-16328
 8009634:	8009ef01 	jmpi	8009ef0 <_fwalk>

08009638 <_cleanup>:
 8009638:	008200b4 	movhi	r2,2050
 800963c:	10a95a04 	addi	r2,r2,-23192
 8009640:	11000017 	ldw	r4,0(r2)
 8009644:	800962c1 	jmpi	800962c <_cleanup_r>

08009648 <__sfmoreglue>:
 8009648:	defffc04 	addi	sp,sp,-16
 800964c:	dc400115 	stw	r17,4(sp)
 8009650:	2c401724 	muli	r17,r5,92
 8009654:	dc800215 	stw	r18,8(sp)
 8009658:	2825883a 	mov	r18,r5
 800965c:	89400304 	addi	r5,r17,12
 8009660:	dc000015 	stw	r16,0(sp)
 8009664:	dfc00315 	stw	ra,12(sp)
 8009668:	80045080 	call	8004508 <_malloc_r>
 800966c:	0021883a 	mov	r16,zero
 8009670:	880d883a 	mov	r6,r17
 8009674:	000b883a 	mov	r5,zero
 8009678:	10000626 	beq	r2,zero,8009694 <__sfmoreglue+0x4c>
 800967c:	11000304 	addi	r4,r2,12
 8009680:	14800115 	stw	r18,4(r2)
 8009684:	10000015 	stw	zero,0(r2)
 8009688:	11000215 	stw	r4,8(r2)
 800968c:	1021883a 	mov	r16,r2
 8009690:	800a3180 	call	800a318 <memset>
 8009694:	8005883a 	mov	r2,r16
 8009698:	dfc00317 	ldw	ra,12(sp)
 800969c:	dc800217 	ldw	r18,8(sp)
 80096a0:	dc400117 	ldw	r17,4(sp)
 80096a4:	dc000017 	ldw	r16,0(sp)
 80096a8:	dec00404 	addi	sp,sp,16
 80096ac:	f800283a 	ret

080096b0 <__sfp>:
 80096b0:	defffd04 	addi	sp,sp,-12
 80096b4:	008200b4 	movhi	r2,2050
 80096b8:	10a95a04 	addi	r2,r2,-23192
 80096bc:	dc000015 	stw	r16,0(sp)
 80096c0:	14000017 	ldw	r16,0(r2)
 80096c4:	dc400115 	stw	r17,4(sp)
 80096c8:	dfc00215 	stw	ra,8(sp)
 80096cc:	80800e17 	ldw	r2,56(r16)
 80096d0:	2023883a 	mov	r17,r4
 80096d4:	10002626 	beq	r2,zero,8009770 <__sfp+0xc0>
 80096d8:	8400b804 	addi	r16,r16,736
 80096dc:	80800117 	ldw	r2,4(r16)
 80096e0:	81000217 	ldw	r4,8(r16)
 80096e4:	10ffffc4 	addi	r3,r2,-1
 80096e8:	18000916 	blt	r3,zero,8009710 <__sfp+0x60>
 80096ec:	2080030f 	ldh	r2,12(r4)
 80096f0:	10000b26 	beq	r2,zero,8009720 <__sfp+0x70>
 80096f4:	017fffc4 	movi	r5,-1
 80096f8:	00000206 	br	8009704 <__sfp+0x54>
 80096fc:	2080030f 	ldh	r2,12(r4)
 8009700:	10000726 	beq	r2,zero,8009720 <__sfp+0x70>
 8009704:	18ffffc4 	addi	r3,r3,-1
 8009708:	21001704 	addi	r4,r4,92
 800970c:	197ffb1e 	bne	r3,r5,80096fc <__sfp+0x4c>
 8009710:	80800017 	ldw	r2,0(r16)
 8009714:	10001926 	beq	r2,zero,800977c <__sfp+0xcc>
 8009718:	1021883a 	mov	r16,r2
 800971c:	003fef06 	br	80096dc <__sfp+0x2c>
 8009720:	00bfffc4 	movi	r2,-1
 8009724:	00c00044 	movi	r3,1
 8009728:	2080038d 	sth	r2,14(r4)
 800972c:	20c0030d 	sth	r3,12(r4)
 8009730:	20000015 	stw	zero,0(r4)
 8009734:	20000215 	stw	zero,8(r4)
 8009738:	20000115 	stw	zero,4(r4)
 800973c:	20000415 	stw	zero,16(r4)
 8009740:	20000515 	stw	zero,20(r4)
 8009744:	20000615 	stw	zero,24(r4)
 8009748:	20000c15 	stw	zero,48(r4)
 800974c:	20000d15 	stw	zero,52(r4)
 8009750:	20001115 	stw	zero,68(r4)
 8009754:	20001215 	stw	zero,72(r4)
 8009758:	2005883a 	mov	r2,r4
 800975c:	dfc00217 	ldw	ra,8(sp)
 8009760:	dc400117 	ldw	r17,4(sp)
 8009764:	dc000017 	ldw	r16,0(sp)
 8009768:	dec00304 	addi	sp,sp,12
 800976c:	f800283a 	ret
 8009770:	8009883a 	mov	r4,r16
 8009774:	80095480 	call	8009548 <__sinit>
 8009778:	003fd706 	br	80096d8 <__sfp+0x28>
 800977c:	8809883a 	mov	r4,r17
 8009780:	01400104 	movi	r5,4
 8009784:	80096480 	call	8009648 <__sfmoreglue>
 8009788:	80800015 	stw	r2,0(r16)
 800978c:	103fe21e 	bne	r2,zero,8009718 <__sfp+0x68>
 8009790:	00800304 	movi	r2,12
 8009794:	0009883a 	mov	r4,zero
 8009798:	88800015 	stw	r2,0(r17)
 800979c:	003fee06 	br	8009758 <__sfp+0xa8>

080097a0 <__sflags>:
 80097a0:	28c00007 	ldb	r3,0(r5)
 80097a4:	00801c84 	movi	r2,114
 80097a8:	18800926 	beq	r3,r2,80097d0 <__sflags+0x30>
 80097ac:	00801dc4 	movi	r2,119
 80097b0:	18801426 	beq	r3,r2,8009804 <__sflags+0x64>
 80097b4:	00801844 	movi	r2,97
 80097b8:	18801626 	beq	r3,r2,8009814 <__sflags+0x74>
 80097bc:	0007883a 	mov	r3,zero
 80097c0:	00800584 	movi	r2,22
 80097c4:	20800015 	stw	r2,0(r4)
 80097c8:	1805883a 	mov	r2,r3
 80097cc:	f800283a 	ret
 80097d0:	000f883a 	mov	r7,zero
 80097d4:	0011883a 	mov	r8,zero
 80097d8:	00c00104 	movi	r3,4
 80097dc:	28800047 	ldb	r2,1(r5)
 80097e0:	10000426 	beq	r2,zero,80097f4 <__sflags+0x54>
 80097e4:	01000ac4 	movi	r4,43
 80097e8:	11000e26 	beq	r2,r4,8009824 <__sflags+0x84>
 80097ec:	28800087 	ldb	r2,2(r5)
 80097f0:	11000c26 	beq	r2,r4,8009824 <__sflags+0x84>
 80097f4:	3a04b03a 	or	r2,r7,r8
 80097f8:	30800015 	stw	r2,0(r6)
 80097fc:	1805883a 	mov	r2,r3
 8009800:	f800283a 	ret
 8009804:	01c00044 	movi	r7,1
 8009808:	02018004 	movi	r8,1536
 800980c:	00c00204 	movi	r3,8
 8009810:	003ff206 	br	80097dc <__sflags+0x3c>
 8009814:	01c00044 	movi	r7,1
 8009818:	02008204 	movi	r8,520
 800981c:	00c04204 	movi	r3,264
 8009820:	003fee06 	br	80097dc <__sflags+0x3c>
 8009824:	00bffcc4 	movi	r2,-13
 8009828:	1884703a 	and	r2,r3,r2
 800982c:	01c00084 	movi	r7,2
 8009830:	10c00414 	ori	r3,r2,16
 8009834:	3a04b03a 	or	r2,r7,r8
 8009838:	30800015 	stw	r2,0(r6)
 800983c:	003fef06 	br	80097fc <__sflags+0x5c>

08009840 <fputc>:
 8009840:	defffc04 	addi	sp,sp,-16
 8009844:	dc800215 	stw	r18,8(sp)
 8009848:	048200b4 	movhi	r18,2050
 800984c:	94a95904 	addi	r18,r18,-23196
 8009850:	90c00017 	ldw	r3,0(r18)
 8009854:	dc400115 	stw	r17,4(sp)
 8009858:	dc000015 	stw	r16,0(sp)
 800985c:	dfc00315 	stw	ra,12(sp)
 8009860:	2021883a 	mov	r16,r4
 8009864:	2823883a 	mov	r17,r5
 8009868:	18000326 	beq	r3,zero,8009878 <fputc+0x38>
 800986c:	18800e17 	ldw	r2,56(r3)
 8009870:	1809883a 	mov	r4,r3
 8009874:	10000926 	beq	r2,zero,800989c <fputc+0x5c>
 8009878:	91000017 	ldw	r4,0(r18)
 800987c:	800b883a 	mov	r5,r16
 8009880:	880d883a 	mov	r6,r17
 8009884:	dfc00317 	ldw	ra,12(sp)
 8009888:	dc800217 	ldw	r18,8(sp)
 800988c:	dc400117 	ldw	r17,4(sp)
 8009890:	dc000017 	ldw	r16,0(sp)
 8009894:	dec00404 	addi	sp,sp,16
 8009898:	800b4a81 	jmpi	800b4a8 <_putc_r>
 800989c:	80095480 	call	8009548 <__sinit>
 80098a0:	003ff506 	br	8009878 <fputc+0x38>

080098a4 <_fputc_r>:
 80098a4:	defffc04 	addi	sp,sp,-16
 80098a8:	dc800215 	stw	r18,8(sp)
 80098ac:	dc400115 	stw	r17,4(sp)
 80098b0:	dc000015 	stw	r16,0(sp)
 80098b4:	dfc00315 	stw	ra,12(sp)
 80098b8:	2021883a 	mov	r16,r4
 80098bc:	2823883a 	mov	r17,r5
 80098c0:	3025883a 	mov	r18,r6
 80098c4:	20000226 	beq	r4,zero,80098d0 <_fputc_r+0x2c>
 80098c8:	20800e17 	ldw	r2,56(r4)
 80098cc:	10000926 	beq	r2,zero,80098f4 <_fputc_r+0x50>
 80098d0:	8009883a 	mov	r4,r16
 80098d4:	880b883a 	mov	r5,r17
 80098d8:	900d883a 	mov	r6,r18
 80098dc:	dfc00317 	ldw	ra,12(sp)
 80098e0:	dc800217 	ldw	r18,8(sp)
 80098e4:	dc400117 	ldw	r17,4(sp)
 80098e8:	dc000017 	ldw	r16,0(sp)
 80098ec:	dec00404 	addi	sp,sp,16
 80098f0:	800b4a81 	jmpi	800b4a8 <_putc_r>
 80098f4:	80095480 	call	8009548 <__sinit>
 80098f8:	003ff506 	br	80098d0 <_fputc_r+0x2c>

080098fc <_fputs_r>:
 80098fc:	defff804 	addi	sp,sp,-32
 8009900:	dc000515 	stw	r16,20(sp)
 8009904:	2021883a 	mov	r16,r4
 8009908:	2809883a 	mov	r4,r5
 800990c:	dc400615 	stw	r17,24(sp)
 8009910:	dfc00715 	stw	ra,28(sp)
 8009914:	3023883a 	mov	r17,r6
 8009918:	d9400015 	stw	r5,0(sp)
 800991c:	800591c0 	call	800591c <strlen>
 8009920:	00c00044 	movi	r3,1
 8009924:	d8800115 	stw	r2,4(sp)
 8009928:	d8c00315 	stw	r3,12(sp)
 800992c:	d8800415 	stw	r2,16(sp)
 8009930:	dec00215 	stw	sp,8(sp)
 8009934:	80000326 	beq	r16,zero,8009944 <_fputs_r+0x48>
 8009938:	80800e17 	ldw	r2,56(r16)
 800993c:	8009883a 	mov	r4,r16
 8009940:	10000926 	beq	r2,zero,8009968 <_fputs_r+0x6c>
 8009944:	8009883a 	mov	r4,r16
 8009948:	880b883a 	mov	r5,r17
 800994c:	d9800204 	addi	r6,sp,8
 8009950:	800998c0 	call	800998c <__sfvwrite_r>
 8009954:	dfc00717 	ldw	ra,28(sp)
 8009958:	dc400617 	ldw	r17,24(sp)
 800995c:	dc000517 	ldw	r16,20(sp)
 8009960:	dec00804 	addi	sp,sp,32
 8009964:	f800283a 	ret
 8009968:	80095480 	call	8009548 <__sinit>
 800996c:	003ff506 	br	8009944 <_fputs_r+0x48>

08009970 <fputs>:
 8009970:	018200b4 	movhi	r6,2050
 8009974:	31a95904 	addi	r6,r6,-23196
 8009978:	2007883a 	mov	r3,r4
 800997c:	31000017 	ldw	r4,0(r6)
 8009980:	280d883a 	mov	r6,r5
 8009984:	180b883a 	mov	r5,r3
 8009988:	80098fc1 	jmpi	80098fc <_fputs_r>

0800998c <__sfvwrite_r>:
 800998c:	30800217 	ldw	r2,8(r6)
 8009990:	defff504 	addi	sp,sp,-44
 8009994:	df000915 	stw	fp,36(sp)
 8009998:	dd800715 	stw	r22,28(sp)
 800999c:	dc800315 	stw	r18,12(sp)
 80099a0:	dfc00a15 	stw	ra,40(sp)
 80099a4:	ddc00815 	stw	r23,32(sp)
 80099a8:	dd400615 	stw	r21,24(sp)
 80099ac:	dd000515 	stw	r20,20(sp)
 80099b0:	dcc00415 	stw	r19,16(sp)
 80099b4:	dc400215 	stw	r17,8(sp)
 80099b8:	dc000115 	stw	r16,4(sp)
 80099bc:	302d883a 	mov	r22,r6
 80099c0:	2039883a 	mov	fp,r4
 80099c4:	2825883a 	mov	r18,r5
 80099c8:	10001c26 	beq	r2,zero,8009a3c <__sfvwrite_r+0xb0>
 80099cc:	29c0030b 	ldhu	r7,12(r5)
 80099d0:	3880020c 	andi	r2,r7,8
 80099d4:	10002726 	beq	r2,zero,8009a74 <__sfvwrite_r+0xe8>
 80099d8:	28800417 	ldw	r2,16(r5)
 80099dc:	10002526 	beq	r2,zero,8009a74 <__sfvwrite_r+0xe8>
 80099e0:	3880008c 	andi	r2,r7,2
 80099e4:	b5400017 	ldw	r21,0(r22)
 80099e8:	10002826 	beq	r2,zero,8009a8c <__sfvwrite_r+0x100>
 80099ec:	0021883a 	mov	r16,zero
 80099f0:	0023883a 	mov	r17,zero
 80099f4:	880d883a 	mov	r6,r17
 80099f8:	e009883a 	mov	r4,fp
 80099fc:	00810004 	movi	r2,1024
 8009a00:	80006e26 	beq	r16,zero,8009bbc <__sfvwrite_r+0x230>
 8009a04:	800f883a 	mov	r7,r16
 8009a08:	91400717 	ldw	r5,28(r18)
 8009a0c:	1400012e 	bgeu	r2,r16,8009a14 <__sfvwrite_r+0x88>
 8009a10:	100f883a 	mov	r7,r2
 8009a14:	90c00917 	ldw	r3,36(r18)
 8009a18:	183ee83a 	callr	r3
 8009a1c:	1007883a 	mov	r3,r2
 8009a20:	80a1c83a 	sub	r16,r16,r2
 8009a24:	88a3883a 	add	r17,r17,r2
 8009a28:	00806d0e 	bge	zero,r2,8009be0 <__sfvwrite_r+0x254>
 8009a2c:	b0800217 	ldw	r2,8(r22)
 8009a30:	10c5c83a 	sub	r2,r2,r3
 8009a34:	b0800215 	stw	r2,8(r22)
 8009a38:	103fee1e 	bne	r2,zero,80099f4 <__sfvwrite_r+0x68>
 8009a3c:	0009883a 	mov	r4,zero
 8009a40:	2005883a 	mov	r2,r4
 8009a44:	dfc00a17 	ldw	ra,40(sp)
 8009a48:	df000917 	ldw	fp,36(sp)
 8009a4c:	ddc00817 	ldw	r23,32(sp)
 8009a50:	dd800717 	ldw	r22,28(sp)
 8009a54:	dd400617 	ldw	r21,24(sp)
 8009a58:	dd000517 	ldw	r20,20(sp)
 8009a5c:	dcc00417 	ldw	r19,16(sp)
 8009a60:	dc800317 	ldw	r18,12(sp)
 8009a64:	dc400217 	ldw	r17,8(sp)
 8009a68:	dc000117 	ldw	r16,4(sp)
 8009a6c:	dec00b04 	addi	sp,sp,44
 8009a70:	f800283a 	ret
 8009a74:	80079380 	call	8007938 <__swsetup_r>
 8009a78:	1000e41e 	bne	r2,zero,8009e0c <__sfvwrite_r+0x480>
 8009a7c:	91c0030b 	ldhu	r7,12(r18)
 8009a80:	b5400017 	ldw	r21,0(r22)
 8009a84:	3880008c 	andi	r2,r7,2
 8009a88:	103fd81e 	bne	r2,zero,80099ec <__sfvwrite_r+0x60>
 8009a8c:	3880004c 	andi	r2,r7,1
 8009a90:	1005003a 	cmpeq	r2,r2,zero
 8009a94:	10005726 	beq	r2,zero,8009bf4 <__sfvwrite_r+0x268>
 8009a98:	0029883a 	mov	r20,zero
 8009a9c:	002f883a 	mov	r23,zero
 8009aa0:	a0004226 	beq	r20,zero,8009bac <__sfvwrite_r+0x220>
 8009aa4:	3880800c 	andi	r2,r7,512
 8009aa8:	94000217 	ldw	r16,8(r18)
 8009aac:	10008b26 	beq	r2,zero,8009cdc <__sfvwrite_r+0x350>
 8009ab0:	800d883a 	mov	r6,r16
 8009ab4:	a400a536 	bltu	r20,r16,8009d4c <__sfvwrite_r+0x3c0>
 8009ab8:	3881200c 	andi	r2,r7,1152
 8009abc:	10002726 	beq	r2,zero,8009b5c <__sfvwrite_r+0x1d0>
 8009ac0:	90800517 	ldw	r2,20(r18)
 8009ac4:	92000417 	ldw	r8,16(r18)
 8009ac8:	91400017 	ldw	r5,0(r18)
 8009acc:	1087883a 	add	r3,r2,r2
 8009ad0:	1887883a 	add	r3,r3,r2
 8009ad4:	1808d7fa 	srli	r4,r3,31
 8009ad8:	2a21c83a 	sub	r16,r5,r8
 8009adc:	80800044 	addi	r2,r16,1
 8009ae0:	20c9883a 	add	r4,r4,r3
 8009ae4:	2027d07a 	srai	r19,r4,1
 8009ae8:	a085883a 	add	r2,r20,r2
 8009aec:	980d883a 	mov	r6,r19
 8009af0:	9880022e 	bgeu	r19,r2,8009afc <__sfvwrite_r+0x170>
 8009af4:	1027883a 	mov	r19,r2
 8009af8:	100d883a 	mov	r6,r2
 8009afc:	3881000c 	andi	r2,r7,1024
 8009b00:	1000b826 	beq	r2,zero,8009de4 <__sfvwrite_r+0x458>
 8009b04:	300b883a 	mov	r5,r6
 8009b08:	e009883a 	mov	r4,fp
 8009b0c:	80045080 	call	8004508 <_malloc_r>
 8009b10:	10003126 	beq	r2,zero,8009bd8 <__sfvwrite_r+0x24c>
 8009b14:	91400417 	ldw	r5,16(r18)
 8009b18:	1009883a 	mov	r4,r2
 8009b1c:	800d883a 	mov	r6,r16
 8009b20:	1023883a 	mov	r17,r2
 8009b24:	8004c480 	call	8004c48 <memcpy>
 8009b28:	90c0030b 	ldhu	r3,12(r18)
 8009b2c:	00beffc4 	movi	r2,-1025
 8009b30:	1886703a 	and	r3,r3,r2
 8009b34:	18c02014 	ori	r3,r3,128
 8009b38:	90c0030d 	sth	r3,12(r18)
 8009b3c:	9c07c83a 	sub	r3,r19,r16
 8009b40:	8c05883a 	add	r2,r17,r16
 8009b44:	a00d883a 	mov	r6,r20
 8009b48:	a021883a 	mov	r16,r20
 8009b4c:	90800015 	stw	r2,0(r18)
 8009b50:	90c00215 	stw	r3,8(r18)
 8009b54:	94400415 	stw	r17,16(r18)
 8009b58:	94c00515 	stw	r19,20(r18)
 8009b5c:	91000017 	ldw	r4,0(r18)
 8009b60:	b80b883a 	mov	r5,r23
 8009b64:	a023883a 	mov	r17,r20
 8009b68:	800a2380 	call	800a238 <memmove>
 8009b6c:	90c00217 	ldw	r3,8(r18)
 8009b70:	90800017 	ldw	r2,0(r18)
 8009b74:	a027883a 	mov	r19,r20
 8009b78:	1c07c83a 	sub	r3,r3,r16
 8009b7c:	1405883a 	add	r2,r2,r16
 8009b80:	90c00215 	stw	r3,8(r18)
 8009b84:	a021883a 	mov	r16,r20
 8009b88:	90800015 	stw	r2,0(r18)
 8009b8c:	b0800217 	ldw	r2,8(r22)
 8009b90:	1405c83a 	sub	r2,r2,r16
 8009b94:	b0800215 	stw	r2,8(r22)
 8009b98:	103fa826 	beq	r2,zero,8009a3c <__sfvwrite_r+0xb0>
 8009b9c:	a469c83a 	sub	r20,r20,r17
 8009ba0:	91c0030b 	ldhu	r7,12(r18)
 8009ba4:	bcef883a 	add	r23,r23,r19
 8009ba8:	a03fbe1e 	bne	r20,zero,8009aa4 <__sfvwrite_r+0x118>
 8009bac:	adc00017 	ldw	r23,0(r21)
 8009bb0:	ad000117 	ldw	r20,4(r21)
 8009bb4:	ad400204 	addi	r21,r21,8
 8009bb8:	003fb906 	br	8009aa0 <__sfvwrite_r+0x114>
 8009bbc:	ac400017 	ldw	r17,0(r21)
 8009bc0:	ac000117 	ldw	r16,4(r21)
 8009bc4:	ad400204 	addi	r21,r21,8
 8009bc8:	003f8a06 	br	80099f4 <__sfvwrite_r+0x68>
 8009bcc:	91400417 	ldw	r5,16(r18)
 8009bd0:	e009883a 	mov	r4,fp
 8009bd4:	8003b640 	call	8003b64 <_free_r>
 8009bd8:	00800304 	movi	r2,12
 8009bdc:	e0800015 	stw	r2,0(fp)
 8009be0:	9080030b 	ldhu	r2,12(r18)
 8009be4:	013fffc4 	movi	r4,-1
 8009be8:	10801014 	ori	r2,r2,64
 8009bec:	9080030d 	sth	r2,12(r18)
 8009bf0:	003f9306 	br	8009a40 <__sfvwrite_r+0xb4>
 8009bf4:	0027883a 	mov	r19,zero
 8009bf8:	002f883a 	mov	r23,zero
 8009bfc:	d8000015 	stw	zero,0(sp)
 8009c00:	0029883a 	mov	r20,zero
 8009c04:	98001e26 	beq	r19,zero,8009c80 <__sfvwrite_r+0x2f4>
 8009c08:	d8c00017 	ldw	r3,0(sp)
 8009c0c:	1804c03a 	cmpne	r2,r3,zero
 8009c10:	10005e26 	beq	r2,zero,8009d8c <__sfvwrite_r+0x400>
 8009c14:	9821883a 	mov	r16,r19
 8009c18:	a4c0012e 	bgeu	r20,r19,8009c20 <__sfvwrite_r+0x294>
 8009c1c:	a021883a 	mov	r16,r20
 8009c20:	91000017 	ldw	r4,0(r18)
 8009c24:	90800417 	ldw	r2,16(r18)
 8009c28:	91800217 	ldw	r6,8(r18)
 8009c2c:	91c00517 	ldw	r7,20(r18)
 8009c30:	1100022e 	bgeu	r2,r4,8009c3c <__sfvwrite_r+0x2b0>
 8009c34:	31e3883a 	add	r17,r6,r7
 8009c38:	8c001616 	blt	r17,r16,8009c94 <__sfvwrite_r+0x308>
 8009c3c:	81c03816 	blt	r16,r7,8009d20 <__sfvwrite_r+0x394>
 8009c40:	90c00917 	ldw	r3,36(r18)
 8009c44:	91400717 	ldw	r5,28(r18)
 8009c48:	e009883a 	mov	r4,fp
 8009c4c:	b80d883a 	mov	r6,r23
 8009c50:	183ee83a 	callr	r3
 8009c54:	1023883a 	mov	r17,r2
 8009c58:	00bfe10e 	bge	zero,r2,8009be0 <__sfvwrite_r+0x254>
 8009c5c:	a469c83a 	sub	r20,r20,r17
 8009c60:	a0001826 	beq	r20,zero,8009cc4 <__sfvwrite_r+0x338>
 8009c64:	b0800217 	ldw	r2,8(r22)
 8009c68:	1445c83a 	sub	r2,r2,r17
 8009c6c:	b0800215 	stw	r2,8(r22)
 8009c70:	103f7226 	beq	r2,zero,8009a3c <__sfvwrite_r+0xb0>
 8009c74:	9c67c83a 	sub	r19,r19,r17
 8009c78:	bc6f883a 	add	r23,r23,r17
 8009c7c:	983fe21e 	bne	r19,zero,8009c08 <__sfvwrite_r+0x27c>
 8009c80:	adc00017 	ldw	r23,0(r21)
 8009c84:	acc00117 	ldw	r19,4(r21)
 8009c88:	ad400204 	addi	r21,r21,8
 8009c8c:	d8000015 	stw	zero,0(sp)
 8009c90:	003fdc06 	br	8009c04 <__sfvwrite_r+0x278>
 8009c94:	b80b883a 	mov	r5,r23
 8009c98:	880d883a 	mov	r6,r17
 8009c9c:	800a2380 	call	800a238 <memmove>
 8009ca0:	90c00017 	ldw	r3,0(r18)
 8009ca4:	e009883a 	mov	r4,fp
 8009ca8:	900b883a 	mov	r5,r18
 8009cac:	1c47883a 	add	r3,r3,r17
 8009cb0:	90c00015 	stw	r3,0(r18)
 8009cb4:	80092b00 	call	80092b0 <_fflush_r>
 8009cb8:	103fc91e 	bne	r2,zero,8009be0 <__sfvwrite_r+0x254>
 8009cbc:	a469c83a 	sub	r20,r20,r17
 8009cc0:	a03fe81e 	bne	r20,zero,8009c64 <__sfvwrite_r+0x2d8>
 8009cc4:	e009883a 	mov	r4,fp
 8009cc8:	900b883a 	mov	r5,r18
 8009ccc:	80092b00 	call	80092b0 <_fflush_r>
 8009cd0:	103fc31e 	bne	r2,zero,8009be0 <__sfvwrite_r+0x254>
 8009cd4:	d8000015 	stw	zero,0(sp)
 8009cd8:	003fe206 	br	8009c64 <__sfvwrite_r+0x2d8>
 8009cdc:	91000017 	ldw	r4,0(r18)
 8009ce0:	90800417 	ldw	r2,16(r18)
 8009ce4:	1100022e 	bgeu	r2,r4,8009cf0 <__sfvwrite_r+0x364>
 8009ce8:	8023883a 	mov	r17,r16
 8009cec:	85003136 	bltu	r16,r20,8009db4 <__sfvwrite_r+0x428>
 8009cf0:	91c00517 	ldw	r7,20(r18)
 8009cf4:	a1c01836 	bltu	r20,r7,8009d58 <__sfvwrite_r+0x3cc>
 8009cf8:	90c00917 	ldw	r3,36(r18)
 8009cfc:	91400717 	ldw	r5,28(r18)
 8009d00:	e009883a 	mov	r4,fp
 8009d04:	b80d883a 	mov	r6,r23
 8009d08:	183ee83a 	callr	r3
 8009d0c:	1021883a 	mov	r16,r2
 8009d10:	00bfb30e 	bge	zero,r2,8009be0 <__sfvwrite_r+0x254>
 8009d14:	1023883a 	mov	r17,r2
 8009d18:	1027883a 	mov	r19,r2
 8009d1c:	003f9b06 	br	8009b8c <__sfvwrite_r+0x200>
 8009d20:	b80b883a 	mov	r5,r23
 8009d24:	800d883a 	mov	r6,r16
 8009d28:	800a2380 	call	800a238 <memmove>
 8009d2c:	90c00217 	ldw	r3,8(r18)
 8009d30:	90800017 	ldw	r2,0(r18)
 8009d34:	8023883a 	mov	r17,r16
 8009d38:	1c07c83a 	sub	r3,r3,r16
 8009d3c:	1405883a 	add	r2,r2,r16
 8009d40:	90c00215 	stw	r3,8(r18)
 8009d44:	90800015 	stw	r2,0(r18)
 8009d48:	003fc406 	br	8009c5c <__sfvwrite_r+0x2d0>
 8009d4c:	a00d883a 	mov	r6,r20
 8009d50:	a021883a 	mov	r16,r20
 8009d54:	003f8106 	br	8009b5c <__sfvwrite_r+0x1d0>
 8009d58:	b80b883a 	mov	r5,r23
 8009d5c:	a00d883a 	mov	r6,r20
 8009d60:	800a2380 	call	800a238 <memmove>
 8009d64:	90c00217 	ldw	r3,8(r18)
 8009d68:	90800017 	ldw	r2,0(r18)
 8009d6c:	a021883a 	mov	r16,r20
 8009d70:	1d07c83a 	sub	r3,r3,r20
 8009d74:	1505883a 	add	r2,r2,r20
 8009d78:	a023883a 	mov	r17,r20
 8009d7c:	a027883a 	mov	r19,r20
 8009d80:	90c00215 	stw	r3,8(r18)
 8009d84:	90800015 	stw	r2,0(r18)
 8009d88:	003f8006 	br	8009b8c <__sfvwrite_r+0x200>
 8009d8c:	b809883a 	mov	r4,r23
 8009d90:	01400284 	movi	r5,10
 8009d94:	980d883a 	mov	r6,r19
 8009d98:	800a1540 	call	800a154 <memchr>
 8009d9c:	10001726 	beq	r2,zero,8009dfc <__sfvwrite_r+0x470>
 8009da0:	15c5c83a 	sub	r2,r2,r23
 8009da4:	15000044 	addi	r20,r2,1
 8009da8:	00800044 	movi	r2,1
 8009dac:	d8800015 	stw	r2,0(sp)
 8009db0:	003f9806 	br	8009c14 <__sfvwrite_r+0x288>
 8009db4:	b80b883a 	mov	r5,r23
 8009db8:	800d883a 	mov	r6,r16
 8009dbc:	800a2380 	call	800a238 <memmove>
 8009dc0:	90c00017 	ldw	r3,0(r18)
 8009dc4:	e009883a 	mov	r4,fp
 8009dc8:	900b883a 	mov	r5,r18
 8009dcc:	1c07883a 	add	r3,r3,r16
 8009dd0:	90c00015 	stw	r3,0(r18)
 8009dd4:	8027883a 	mov	r19,r16
 8009dd8:	80092b00 	call	80092b0 <_fflush_r>
 8009ddc:	103f6b26 	beq	r2,zero,8009b8c <__sfvwrite_r+0x200>
 8009de0:	003f7f06 	br	8009be0 <__sfvwrite_r+0x254>
 8009de4:	400b883a 	mov	r5,r8
 8009de8:	e009883a 	mov	r4,fp
 8009dec:	800b6080 	call	800b608 <_realloc_r>
 8009df0:	103f7626 	beq	r2,zero,8009bcc <__sfvwrite_r+0x240>
 8009df4:	1023883a 	mov	r17,r2
 8009df8:	003f5006 	br	8009b3c <__sfvwrite_r+0x1b0>
 8009dfc:	00c00044 	movi	r3,1
 8009e00:	9d000044 	addi	r20,r19,1
 8009e04:	d8c00015 	stw	r3,0(sp)
 8009e08:	003f8206 	br	8009c14 <__sfvwrite_r+0x288>
 8009e0c:	9080030b 	ldhu	r2,12(r18)
 8009e10:	00c00244 	movi	r3,9
 8009e14:	013fffc4 	movi	r4,-1
 8009e18:	10801014 	ori	r2,r2,64
 8009e1c:	9080030d 	sth	r2,12(r18)
 8009e20:	e0c00015 	stw	r3,0(fp)
 8009e24:	003f0606 	br	8009a40 <__sfvwrite_r+0xb4>

08009e28 <_fwalk_reent>:
 8009e28:	defff704 	addi	sp,sp,-36
 8009e2c:	dcc00315 	stw	r19,12(sp)
 8009e30:	24c0b804 	addi	r19,r4,736
 8009e34:	dd800615 	stw	r22,24(sp)
 8009e38:	dd400515 	stw	r21,20(sp)
 8009e3c:	dfc00815 	stw	ra,32(sp)
 8009e40:	ddc00715 	stw	r23,28(sp)
 8009e44:	dd000415 	stw	r20,16(sp)
 8009e48:	dc800215 	stw	r18,8(sp)
 8009e4c:	dc400115 	stw	r17,4(sp)
 8009e50:	dc000015 	stw	r16,0(sp)
 8009e54:	202b883a 	mov	r21,r4
 8009e58:	282d883a 	mov	r22,r5
 8009e5c:	80095380 	call	8009538 <__sfp_lock_acquire>
 8009e60:	98002126 	beq	r19,zero,8009ee8 <_fwalk_reent+0xc0>
 8009e64:	002f883a 	mov	r23,zero
 8009e68:	9c800117 	ldw	r18,4(r19)
 8009e6c:	9c000217 	ldw	r16,8(r19)
 8009e70:	90bfffc4 	addi	r2,r18,-1
 8009e74:	10000d16 	blt	r2,zero,8009eac <_fwalk_reent+0x84>
 8009e78:	0023883a 	mov	r17,zero
 8009e7c:	053fffc4 	movi	r20,-1
 8009e80:	8080030f 	ldh	r2,12(r16)
 8009e84:	8c400044 	addi	r17,r17,1
 8009e88:	10000626 	beq	r2,zero,8009ea4 <_fwalk_reent+0x7c>
 8009e8c:	8080038f 	ldh	r2,14(r16)
 8009e90:	800b883a 	mov	r5,r16
 8009e94:	a809883a 	mov	r4,r21
 8009e98:	15000226 	beq	r2,r20,8009ea4 <_fwalk_reent+0x7c>
 8009e9c:	b03ee83a 	callr	r22
 8009ea0:	b8aeb03a 	or	r23,r23,r2
 8009ea4:	84001704 	addi	r16,r16,92
 8009ea8:	947ff51e 	bne	r18,r17,8009e80 <_fwalk_reent+0x58>
 8009eac:	9cc00017 	ldw	r19,0(r19)
 8009eb0:	983fed1e 	bne	r19,zero,8009e68 <_fwalk_reent+0x40>
 8009eb4:	800953c0 	call	800953c <__sfp_lock_release>
 8009eb8:	b805883a 	mov	r2,r23
 8009ebc:	dfc00817 	ldw	ra,32(sp)
 8009ec0:	ddc00717 	ldw	r23,28(sp)
 8009ec4:	dd800617 	ldw	r22,24(sp)
 8009ec8:	dd400517 	ldw	r21,20(sp)
 8009ecc:	dd000417 	ldw	r20,16(sp)
 8009ed0:	dcc00317 	ldw	r19,12(sp)
 8009ed4:	dc800217 	ldw	r18,8(sp)
 8009ed8:	dc400117 	ldw	r17,4(sp)
 8009edc:	dc000017 	ldw	r16,0(sp)
 8009ee0:	dec00904 	addi	sp,sp,36
 8009ee4:	f800283a 	ret
 8009ee8:	002f883a 	mov	r23,zero
 8009eec:	003ff106 	br	8009eb4 <_fwalk_reent+0x8c>

08009ef0 <_fwalk>:
 8009ef0:	defff804 	addi	sp,sp,-32
 8009ef4:	dcc00315 	stw	r19,12(sp)
 8009ef8:	24c0b804 	addi	r19,r4,736
 8009efc:	dd400515 	stw	r21,20(sp)
 8009f00:	dfc00715 	stw	ra,28(sp)
 8009f04:	dd800615 	stw	r22,24(sp)
 8009f08:	dd000415 	stw	r20,16(sp)
 8009f0c:	dc800215 	stw	r18,8(sp)
 8009f10:	dc400115 	stw	r17,4(sp)
 8009f14:	dc000015 	stw	r16,0(sp)
 8009f18:	282b883a 	mov	r21,r5
 8009f1c:	80095380 	call	8009538 <__sfp_lock_acquire>
 8009f20:	98001f26 	beq	r19,zero,8009fa0 <_fwalk+0xb0>
 8009f24:	002d883a 	mov	r22,zero
 8009f28:	9c800117 	ldw	r18,4(r19)
 8009f2c:	9c000217 	ldw	r16,8(r19)
 8009f30:	90bfffc4 	addi	r2,r18,-1
 8009f34:	10000c16 	blt	r2,zero,8009f68 <_fwalk+0x78>
 8009f38:	0023883a 	mov	r17,zero
 8009f3c:	053fffc4 	movi	r20,-1
 8009f40:	8080030f 	ldh	r2,12(r16)
 8009f44:	8c400044 	addi	r17,r17,1
 8009f48:	10000526 	beq	r2,zero,8009f60 <_fwalk+0x70>
 8009f4c:	8080038f 	ldh	r2,14(r16)
 8009f50:	8009883a 	mov	r4,r16
 8009f54:	15000226 	beq	r2,r20,8009f60 <_fwalk+0x70>
 8009f58:	a83ee83a 	callr	r21
 8009f5c:	b0acb03a 	or	r22,r22,r2
 8009f60:	84001704 	addi	r16,r16,92
 8009f64:	947ff61e 	bne	r18,r17,8009f40 <_fwalk+0x50>
 8009f68:	9cc00017 	ldw	r19,0(r19)
 8009f6c:	983fee1e 	bne	r19,zero,8009f28 <_fwalk+0x38>
 8009f70:	800953c0 	call	800953c <__sfp_lock_release>
 8009f74:	b005883a 	mov	r2,r22
 8009f78:	dfc00717 	ldw	ra,28(sp)
 8009f7c:	dd800617 	ldw	r22,24(sp)
 8009f80:	dd400517 	ldw	r21,20(sp)
 8009f84:	dd000417 	ldw	r20,16(sp)
 8009f88:	dcc00317 	ldw	r19,12(sp)
 8009f8c:	dc800217 	ldw	r18,8(sp)
 8009f90:	dc400117 	ldw	r17,4(sp)
 8009f94:	dc000017 	ldw	r16,0(sp)
 8009f98:	dec00804 	addi	sp,sp,32
 8009f9c:	f800283a 	ret
 8009fa0:	002d883a 	mov	r22,zero
 8009fa4:	003ff206 	br	8009f70 <_fwalk+0x80>

08009fa8 <_isatty_r>:
 8009fa8:	defffd04 	addi	sp,sp,-12
 8009fac:	dc000015 	stw	r16,0(sp)
 8009fb0:	040200b4 	movhi	r16,2050
 8009fb4:	84312904 	addi	r16,r16,-15196
 8009fb8:	dc400115 	stw	r17,4(sp)
 8009fbc:	80000015 	stw	zero,0(r16)
 8009fc0:	2023883a 	mov	r17,r4
 8009fc4:	2809883a 	mov	r4,r5
 8009fc8:	dfc00215 	stw	ra,8(sp)
 8009fcc:	800e1c00 	call	800e1c0 <isatty>
 8009fd0:	1007883a 	mov	r3,r2
 8009fd4:	00bfffc4 	movi	r2,-1
 8009fd8:	18800626 	beq	r3,r2,8009ff4 <_isatty_r+0x4c>
 8009fdc:	1805883a 	mov	r2,r3
 8009fe0:	dfc00217 	ldw	ra,8(sp)
 8009fe4:	dc400117 	ldw	r17,4(sp)
 8009fe8:	dc000017 	ldw	r16,0(sp)
 8009fec:	dec00304 	addi	sp,sp,12
 8009ff0:	f800283a 	ret
 8009ff4:	80800017 	ldw	r2,0(r16)
 8009ff8:	103ff826 	beq	r2,zero,8009fdc <_isatty_r+0x34>
 8009ffc:	88800015 	stw	r2,0(r17)
 800a000:	1805883a 	mov	r2,r3
 800a004:	dfc00217 	ldw	ra,8(sp)
 800a008:	dc400117 	ldw	r17,4(sp)
 800a00c:	dc000017 	ldw	r16,0(sp)
 800a010:	dec00304 	addi	sp,sp,12
 800a014:	f800283a 	ret

0800a018 <__locale_charset>:
 800a018:	d0a00917 	ldw	r2,-32732(gp)
 800a01c:	f800283a 	ret

0800a020 <_localeconv_r>:
 800a020:	008200b4 	movhi	r2,2050
 800a024:	10a06b04 	addi	r2,r2,-32340
 800a028:	f800283a 	ret

0800a02c <localeconv>:
 800a02c:	008200b4 	movhi	r2,2050
 800a030:	10a95904 	addi	r2,r2,-23196
 800a034:	11000017 	ldw	r4,0(r2)
 800a038:	800a0201 	jmpi	800a020 <_localeconv_r>

0800a03c <_setlocale_r>:
 800a03c:	defffc04 	addi	sp,sp,-16
 800a040:	00c20074 	movhi	r3,2049
 800a044:	18de5804 	addi	r3,r3,31072
 800a048:	dc800215 	stw	r18,8(sp)
 800a04c:	dc400115 	stw	r17,4(sp)
 800a050:	dc000015 	stw	r16,0(sp)
 800a054:	2023883a 	mov	r17,r4
 800a058:	2825883a 	mov	r18,r5
 800a05c:	dfc00315 	stw	ra,12(sp)
 800a060:	3021883a 	mov	r16,r6
 800a064:	3009883a 	mov	r4,r6
 800a068:	180b883a 	mov	r5,r3
 800a06c:	30000926 	beq	r6,zero,800a094 <_setlocale_r+0x58>
 800a070:	800bc6c0 	call	800bc6c <strcmp>
 800a074:	8009883a 	mov	r4,r16
 800a078:	01420074 	movhi	r5,2049
 800a07c:	295d0904 	addi	r5,r5,29732
 800a080:	10000b1e 	bne	r2,zero,800a0b0 <_setlocale_r+0x74>
 800a084:	8c000d15 	stw	r16,52(r17)
 800a088:	8c800c15 	stw	r18,48(r17)
 800a08c:	00c20074 	movhi	r3,2049
 800a090:	18de5804 	addi	r3,r3,31072
 800a094:	1805883a 	mov	r2,r3
 800a098:	dfc00317 	ldw	ra,12(sp)
 800a09c:	dc800217 	ldw	r18,8(sp)
 800a0a0:	dc400117 	ldw	r17,4(sp)
 800a0a4:	dc000017 	ldw	r16,0(sp)
 800a0a8:	dec00404 	addi	sp,sp,16
 800a0ac:	f800283a 	ret
 800a0b0:	800bc6c0 	call	800bc6c <strcmp>
 800a0b4:	0007883a 	mov	r3,zero
 800a0b8:	103ff226 	beq	r2,zero,800a084 <_setlocale_r+0x48>
 800a0bc:	003ff506 	br	800a094 <_setlocale_r+0x58>

0800a0c0 <setlocale>:
 800a0c0:	018200b4 	movhi	r6,2050
 800a0c4:	31a95904 	addi	r6,r6,-23196
 800a0c8:	2007883a 	mov	r3,r4
 800a0cc:	31000017 	ldw	r4,0(r6)
 800a0d0:	280d883a 	mov	r6,r5
 800a0d4:	180b883a 	mov	r5,r3
 800a0d8:	800a03c1 	jmpi	800a03c <_setlocale_r>

0800a0dc <_lseek_r>:
 800a0dc:	defffd04 	addi	sp,sp,-12
 800a0e0:	dc000015 	stw	r16,0(sp)
 800a0e4:	040200b4 	movhi	r16,2050
 800a0e8:	84312904 	addi	r16,r16,-15196
 800a0ec:	dc400115 	stw	r17,4(sp)
 800a0f0:	80000015 	stw	zero,0(r16)
 800a0f4:	2023883a 	mov	r17,r4
 800a0f8:	2809883a 	mov	r4,r5
 800a0fc:	300b883a 	mov	r5,r6
 800a100:	380d883a 	mov	r6,r7
 800a104:	dfc00215 	stw	ra,8(sp)
 800a108:	800e3cc0 	call	800e3cc <lseek>
 800a10c:	1007883a 	mov	r3,r2
 800a110:	00bfffc4 	movi	r2,-1
 800a114:	18800626 	beq	r3,r2,800a130 <_lseek_r+0x54>
 800a118:	1805883a 	mov	r2,r3
 800a11c:	dfc00217 	ldw	ra,8(sp)
 800a120:	dc400117 	ldw	r17,4(sp)
 800a124:	dc000017 	ldw	r16,0(sp)
 800a128:	dec00304 	addi	sp,sp,12
 800a12c:	f800283a 	ret
 800a130:	80800017 	ldw	r2,0(r16)
 800a134:	103ff826 	beq	r2,zero,800a118 <_lseek_r+0x3c>
 800a138:	88800015 	stw	r2,0(r17)
 800a13c:	1805883a 	mov	r2,r3
 800a140:	dfc00217 	ldw	ra,8(sp)
 800a144:	dc400117 	ldw	r17,4(sp)
 800a148:	dc000017 	ldw	r16,0(sp)
 800a14c:	dec00304 	addi	sp,sp,12
 800a150:	f800283a 	ret

0800a154 <memchr>:
 800a154:	008000c4 	movi	r2,3
 800a158:	29403fcc 	andi	r5,r5,255
 800a15c:	2007883a 	mov	r3,r4
 800a160:	1180022e 	bgeu	r2,r6,800a16c <memchr+0x18>
 800a164:	2084703a 	and	r2,r4,r2
 800a168:	10000b26 	beq	r2,zero,800a198 <memchr+0x44>
 800a16c:	313fffc4 	addi	r4,r6,-1
 800a170:	3000051e 	bne	r6,zero,800a188 <memchr+0x34>
 800a174:	00002c06 	br	800a228 <memchr+0xd4>
 800a178:	213fffc4 	addi	r4,r4,-1
 800a17c:	00bfffc4 	movi	r2,-1
 800a180:	18c00044 	addi	r3,r3,1
 800a184:	20802826 	beq	r4,r2,800a228 <memchr+0xd4>
 800a188:	18800003 	ldbu	r2,0(r3)
 800a18c:	28bffa1e 	bne	r5,r2,800a178 <memchr+0x24>
 800a190:	1805883a 	mov	r2,r3
 800a194:	f800283a 	ret
 800a198:	0011883a 	mov	r8,zero
 800a19c:	0007883a 	mov	r3,zero
 800a1a0:	01c00104 	movi	r7,4
 800a1a4:	4004923a 	slli	r2,r8,8
 800a1a8:	18c00044 	addi	r3,r3,1
 800a1ac:	1151883a 	add	r8,r2,r5
 800a1b0:	19fffc1e 	bne	r3,r7,800a1a4 <memchr+0x50>
 800a1b4:	02bfbff4 	movhi	r10,65279
 800a1b8:	52bfbfc4 	addi	r10,r10,-257
 800a1bc:	02602074 	movhi	r9,32897
 800a1c0:	4a602004 	addi	r9,r9,-32640
 800a1c4:	02c000c4 	movi	r11,3
 800a1c8:	20800017 	ldw	r2,0(r4)
 800a1cc:	31bfff04 	addi	r6,r6,-4
 800a1d0:	200f883a 	mov	r7,r4
 800a1d4:	1204f03a 	xor	r2,r2,r8
 800a1d8:	1287883a 	add	r3,r2,r10
 800a1dc:	1a46703a 	and	r3,r3,r9
 800a1e0:	0084303a 	nor	r2,zero,r2
 800a1e4:	10c4703a 	and	r2,r2,r3
 800a1e8:	10000b26 	beq	r2,zero,800a218 <memchr+0xc4>
 800a1ec:	20800003 	ldbu	r2,0(r4)
 800a1f0:	28800f26 	beq	r5,r2,800a230 <memchr+0xdc>
 800a1f4:	20800043 	ldbu	r2,1(r4)
 800a1f8:	21c00044 	addi	r7,r4,1
 800a1fc:	28800c26 	beq	r5,r2,800a230 <memchr+0xdc>
 800a200:	20800083 	ldbu	r2,2(r4)
 800a204:	21c00084 	addi	r7,r4,2
 800a208:	28800926 	beq	r5,r2,800a230 <memchr+0xdc>
 800a20c:	208000c3 	ldbu	r2,3(r4)
 800a210:	21c000c4 	addi	r7,r4,3
 800a214:	28800626 	beq	r5,r2,800a230 <memchr+0xdc>
 800a218:	21000104 	addi	r4,r4,4
 800a21c:	59bfea36 	bltu	r11,r6,800a1c8 <memchr+0x74>
 800a220:	2007883a 	mov	r3,r4
 800a224:	003fd106 	br	800a16c <memchr+0x18>
 800a228:	0005883a 	mov	r2,zero
 800a22c:	f800283a 	ret
 800a230:	3805883a 	mov	r2,r7
 800a234:	f800283a 	ret

0800a238 <memmove>:
 800a238:	2807883a 	mov	r3,r5
 800a23c:	2011883a 	mov	r8,r4
 800a240:	29000c2e 	bgeu	r5,r4,800a274 <memmove+0x3c>
 800a244:	298f883a 	add	r7,r5,r6
 800a248:	21c00a2e 	bgeu	r4,r7,800a274 <memmove+0x3c>
 800a24c:	30000726 	beq	r6,zero,800a26c <memmove+0x34>
 800a250:	2187883a 	add	r3,r4,r6
 800a254:	198dc83a 	sub	r6,r3,r6
 800a258:	39ffffc4 	addi	r7,r7,-1
 800a25c:	38800003 	ldbu	r2,0(r7)
 800a260:	18ffffc4 	addi	r3,r3,-1
 800a264:	18800005 	stb	r2,0(r3)
 800a268:	19bffb1e 	bne	r3,r6,800a258 <memmove+0x20>
 800a26c:	2005883a 	mov	r2,r4
 800a270:	f800283a 	ret
 800a274:	01c003c4 	movi	r7,15
 800a278:	39800a36 	bltu	r7,r6,800a2a4 <memmove+0x6c>
 800a27c:	303ffb26 	beq	r6,zero,800a26c <memmove+0x34>
 800a280:	400f883a 	mov	r7,r8
 800a284:	320d883a 	add	r6,r6,r8
 800a288:	28800003 	ldbu	r2,0(r5)
 800a28c:	29400044 	addi	r5,r5,1
 800a290:	38800005 	stb	r2,0(r7)
 800a294:	39c00044 	addi	r7,r7,1
 800a298:	39bffb1e 	bne	r7,r6,800a288 <memmove+0x50>
 800a29c:	2005883a 	mov	r2,r4
 800a2a0:	f800283a 	ret
 800a2a4:	1904b03a 	or	r2,r3,r4
 800a2a8:	108000cc 	andi	r2,r2,3
 800a2ac:	103ff31e 	bne	r2,zero,800a27c <memmove+0x44>
 800a2b0:	3811883a 	mov	r8,r7
 800a2b4:	180b883a 	mov	r5,r3
 800a2b8:	200f883a 	mov	r7,r4
 800a2bc:	28c00017 	ldw	r3,0(r5)
 800a2c0:	31bffc04 	addi	r6,r6,-16
 800a2c4:	38c00015 	stw	r3,0(r7)
 800a2c8:	28800117 	ldw	r2,4(r5)
 800a2cc:	38800115 	stw	r2,4(r7)
 800a2d0:	28c00217 	ldw	r3,8(r5)
 800a2d4:	38c00215 	stw	r3,8(r7)
 800a2d8:	28800317 	ldw	r2,12(r5)
 800a2dc:	29400404 	addi	r5,r5,16
 800a2e0:	38800315 	stw	r2,12(r7)
 800a2e4:	39c00404 	addi	r7,r7,16
 800a2e8:	41bff436 	bltu	r8,r6,800a2bc <memmove+0x84>
 800a2ec:	008000c4 	movi	r2,3
 800a2f0:	1180072e 	bgeu	r2,r6,800a310 <memmove+0xd8>
 800a2f4:	1007883a 	mov	r3,r2
 800a2f8:	28800017 	ldw	r2,0(r5)
 800a2fc:	31bfff04 	addi	r6,r6,-4
 800a300:	29400104 	addi	r5,r5,4
 800a304:	38800015 	stw	r2,0(r7)
 800a308:	39c00104 	addi	r7,r7,4
 800a30c:	19bffa36 	bltu	r3,r6,800a2f8 <memmove+0xc0>
 800a310:	3811883a 	mov	r8,r7
 800a314:	003fd906 	br	800a27c <memmove+0x44>

0800a318 <memset>:
 800a318:	008000c4 	movi	r2,3
 800a31c:	29403fcc 	andi	r5,r5,255
 800a320:	2007883a 	mov	r3,r4
 800a324:	1180022e 	bgeu	r2,r6,800a330 <memset+0x18>
 800a328:	2084703a 	and	r2,r4,r2
 800a32c:	10000826 	beq	r2,zero,800a350 <memset+0x38>
 800a330:	30000526 	beq	r6,zero,800a348 <memset+0x30>
 800a334:	2805883a 	mov	r2,r5
 800a338:	30cd883a 	add	r6,r6,r3
 800a33c:	18800005 	stb	r2,0(r3)
 800a340:	18c00044 	addi	r3,r3,1
 800a344:	19bffd1e 	bne	r3,r6,800a33c <memset+0x24>
 800a348:	2005883a 	mov	r2,r4
 800a34c:	f800283a 	ret
 800a350:	2804923a 	slli	r2,r5,8
 800a354:	020003c4 	movi	r8,15
 800a358:	200f883a 	mov	r7,r4
 800a35c:	2884b03a 	or	r2,r5,r2
 800a360:	1006943a 	slli	r3,r2,16
 800a364:	10c6b03a 	or	r3,r2,r3
 800a368:	41800a2e 	bgeu	r8,r6,800a394 <memset+0x7c>
 800a36c:	4005883a 	mov	r2,r8
 800a370:	31bffc04 	addi	r6,r6,-16
 800a374:	38c00015 	stw	r3,0(r7)
 800a378:	38c00115 	stw	r3,4(r7)
 800a37c:	38c00215 	stw	r3,8(r7)
 800a380:	38c00315 	stw	r3,12(r7)
 800a384:	39c00404 	addi	r7,r7,16
 800a388:	11bff936 	bltu	r2,r6,800a370 <memset+0x58>
 800a38c:	008000c4 	movi	r2,3
 800a390:	1180052e 	bgeu	r2,r6,800a3a8 <memset+0x90>
 800a394:	31bfff04 	addi	r6,r6,-4
 800a398:	008000c4 	movi	r2,3
 800a39c:	38c00015 	stw	r3,0(r7)
 800a3a0:	39c00104 	addi	r7,r7,4
 800a3a4:	11bffb36 	bltu	r2,r6,800a394 <memset+0x7c>
 800a3a8:	3807883a 	mov	r3,r7
 800a3ac:	003fe006 	br	800a330 <memset+0x18>

0800a3b0 <_Bfree>:
 800a3b0:	28000826 	beq	r5,zero,800a3d4 <_Bfree+0x24>
 800a3b4:	28800117 	ldw	r2,4(r5)
 800a3b8:	21001317 	ldw	r4,76(r4)
 800a3bc:	1085883a 	add	r2,r2,r2
 800a3c0:	1085883a 	add	r2,r2,r2
 800a3c4:	1105883a 	add	r2,r2,r4
 800a3c8:	10c00017 	ldw	r3,0(r2)
 800a3cc:	28c00015 	stw	r3,0(r5)
 800a3d0:	11400015 	stw	r5,0(r2)
 800a3d4:	f800283a 	ret

0800a3d8 <__hi0bits>:
 800a3d8:	20bfffec 	andhi	r2,r4,65535
 800a3dc:	10001426 	beq	r2,zero,800a430 <__hi0bits+0x58>
 800a3e0:	0007883a 	mov	r3,zero
 800a3e4:	20bfc02c 	andhi	r2,r4,65280
 800a3e8:	1000021e 	bne	r2,zero,800a3f4 <__hi0bits+0x1c>
 800a3ec:	2008923a 	slli	r4,r4,8
 800a3f0:	18c00204 	addi	r3,r3,8
 800a3f4:	20bc002c 	andhi	r2,r4,61440
 800a3f8:	1000021e 	bne	r2,zero,800a404 <__hi0bits+0x2c>
 800a3fc:	2008913a 	slli	r4,r4,4
 800a400:	18c00104 	addi	r3,r3,4
 800a404:	20b0002c 	andhi	r2,r4,49152
 800a408:	1000031e 	bne	r2,zero,800a418 <__hi0bits+0x40>
 800a40c:	2105883a 	add	r2,r4,r4
 800a410:	18c00084 	addi	r3,r3,2
 800a414:	1089883a 	add	r4,r2,r2
 800a418:	20000316 	blt	r4,zero,800a428 <__hi0bits+0x50>
 800a41c:	2090002c 	andhi	r2,r4,16384
 800a420:	10000626 	beq	r2,zero,800a43c <__hi0bits+0x64>
 800a424:	18c00044 	addi	r3,r3,1
 800a428:	1805883a 	mov	r2,r3
 800a42c:	f800283a 	ret
 800a430:	2008943a 	slli	r4,r4,16
 800a434:	00c00404 	movi	r3,16
 800a438:	003fea06 	br	800a3e4 <__hi0bits+0xc>
 800a43c:	00c00804 	movi	r3,32
 800a440:	1805883a 	mov	r2,r3
 800a444:	f800283a 	ret

0800a448 <__lo0bits>:
 800a448:	20c00017 	ldw	r3,0(r4)
 800a44c:	188001cc 	andi	r2,r3,7
 800a450:	10000a26 	beq	r2,zero,800a47c <__lo0bits+0x34>
 800a454:	1880004c 	andi	r2,r3,1
 800a458:	1005003a 	cmpeq	r2,r2,zero
 800a45c:	10002126 	beq	r2,zero,800a4e4 <__lo0bits+0x9c>
 800a460:	1880008c 	andi	r2,r3,2
 800a464:	1000251e 	bne	r2,zero,800a4fc <__lo0bits+0xb4>
 800a468:	1804d0ba 	srli	r2,r3,2
 800a46c:	01400084 	movi	r5,2
 800a470:	20800015 	stw	r2,0(r4)
 800a474:	2805883a 	mov	r2,r5
 800a478:	f800283a 	ret
 800a47c:	18bfffcc 	andi	r2,r3,65535
 800a480:	10001526 	beq	r2,zero,800a4d8 <__lo0bits+0x90>
 800a484:	000b883a 	mov	r5,zero
 800a488:	18803fcc 	andi	r2,r3,255
 800a48c:	1000021e 	bne	r2,zero,800a498 <__lo0bits+0x50>
 800a490:	1806d23a 	srli	r3,r3,8
 800a494:	29400204 	addi	r5,r5,8
 800a498:	188003cc 	andi	r2,r3,15
 800a49c:	1000021e 	bne	r2,zero,800a4a8 <__lo0bits+0x60>
 800a4a0:	1806d13a 	srli	r3,r3,4
 800a4a4:	29400104 	addi	r5,r5,4
 800a4a8:	188000cc 	andi	r2,r3,3
 800a4ac:	1000021e 	bne	r2,zero,800a4b8 <__lo0bits+0x70>
 800a4b0:	1806d0ba 	srli	r3,r3,2
 800a4b4:	29400084 	addi	r5,r5,2
 800a4b8:	1880004c 	andi	r2,r3,1
 800a4bc:	1000031e 	bne	r2,zero,800a4cc <__lo0bits+0x84>
 800a4c0:	1806d07a 	srli	r3,r3,1
 800a4c4:	18000a26 	beq	r3,zero,800a4f0 <__lo0bits+0xa8>
 800a4c8:	29400044 	addi	r5,r5,1
 800a4cc:	2805883a 	mov	r2,r5
 800a4d0:	20c00015 	stw	r3,0(r4)
 800a4d4:	f800283a 	ret
 800a4d8:	1806d43a 	srli	r3,r3,16
 800a4dc:	01400404 	movi	r5,16
 800a4e0:	003fe906 	br	800a488 <__lo0bits+0x40>
 800a4e4:	000b883a 	mov	r5,zero
 800a4e8:	2805883a 	mov	r2,r5
 800a4ec:	f800283a 	ret
 800a4f0:	01400804 	movi	r5,32
 800a4f4:	2805883a 	mov	r2,r5
 800a4f8:	f800283a 	ret
 800a4fc:	1804d07a 	srli	r2,r3,1
 800a500:	01400044 	movi	r5,1
 800a504:	20800015 	stw	r2,0(r4)
 800a508:	003fda06 	br	800a474 <__lo0bits+0x2c>

0800a50c <__mcmp>:
 800a50c:	20800417 	ldw	r2,16(r4)
 800a510:	28c00417 	ldw	r3,16(r5)
 800a514:	10cfc83a 	sub	r7,r2,r3
 800a518:	38000c1e 	bne	r7,zero,800a54c <__mcmp+0x40>
 800a51c:	18c5883a 	add	r2,r3,r3
 800a520:	1085883a 	add	r2,r2,r2
 800a524:	10c00504 	addi	r3,r2,20
 800a528:	21000504 	addi	r4,r4,20
 800a52c:	28cb883a 	add	r5,r5,r3
 800a530:	2085883a 	add	r2,r4,r2
 800a534:	10bfff04 	addi	r2,r2,-4
 800a538:	297fff04 	addi	r5,r5,-4
 800a53c:	11800017 	ldw	r6,0(r2)
 800a540:	28c00017 	ldw	r3,0(r5)
 800a544:	30c0031e 	bne	r6,r3,800a554 <__mcmp+0x48>
 800a548:	20bffa36 	bltu	r4,r2,800a534 <__mcmp+0x28>
 800a54c:	3805883a 	mov	r2,r7
 800a550:	f800283a 	ret
 800a554:	30c00336 	bltu	r6,r3,800a564 <__mcmp+0x58>
 800a558:	01c00044 	movi	r7,1
 800a55c:	3805883a 	mov	r2,r7
 800a560:	f800283a 	ret
 800a564:	01ffffc4 	movi	r7,-1
 800a568:	003ff806 	br	800a54c <__mcmp+0x40>

0800a56c <__ulp>:
 800a56c:	295ffc2c 	andhi	r5,r5,32752
 800a570:	013f3034 	movhi	r4,64704
 800a574:	290b883a 	add	r5,r5,r4
 800a578:	0145c83a 	sub	r2,zero,r5
 800a57c:	1007d53a 	srai	r3,r2,20
 800a580:	000d883a 	mov	r6,zero
 800a584:	0140040e 	bge	zero,r5,800a598 <__ulp+0x2c>
 800a588:	280f883a 	mov	r7,r5
 800a58c:	3807883a 	mov	r3,r7
 800a590:	3005883a 	mov	r2,r6
 800a594:	f800283a 	ret
 800a598:	008004c4 	movi	r2,19
 800a59c:	193ffb04 	addi	r4,r3,-20
 800a5a0:	10c00c0e 	bge	r2,r3,800a5d4 <__ulp+0x68>
 800a5a4:	008007c4 	movi	r2,31
 800a5a8:	1107c83a 	sub	r3,r2,r4
 800a5ac:	00800784 	movi	r2,30
 800a5b0:	01400044 	movi	r5,1
 800a5b4:	11000216 	blt	r2,r4,800a5c0 <__ulp+0x54>
 800a5b8:	00800044 	movi	r2,1
 800a5bc:	10ca983a 	sll	r5,r2,r3
 800a5c0:	000f883a 	mov	r7,zero
 800a5c4:	280d883a 	mov	r6,r5
 800a5c8:	3807883a 	mov	r3,r7
 800a5cc:	3005883a 	mov	r2,r6
 800a5d0:	f800283a 	ret
 800a5d4:	00800234 	movhi	r2,8
 800a5d8:	10cfd83a 	sra	r7,r2,r3
 800a5dc:	000d883a 	mov	r6,zero
 800a5e0:	3005883a 	mov	r2,r6
 800a5e4:	3807883a 	mov	r3,r7
 800a5e8:	f800283a 	ret

0800a5ec <__b2d>:
 800a5ec:	20800417 	ldw	r2,16(r4)
 800a5f0:	defff904 	addi	sp,sp,-28
 800a5f4:	dd000415 	stw	r20,16(sp)
 800a5f8:	1085883a 	add	r2,r2,r2
 800a5fc:	25000504 	addi	r20,r4,20
 800a600:	1085883a 	add	r2,r2,r2
 800a604:	dc000015 	stw	r16,0(sp)
 800a608:	a0a1883a 	add	r16,r20,r2
 800a60c:	dd400515 	stw	r21,20(sp)
 800a610:	857fff17 	ldw	r21,-4(r16)
 800a614:	dc400115 	stw	r17,4(sp)
 800a618:	dfc00615 	stw	ra,24(sp)
 800a61c:	a809883a 	mov	r4,r21
 800a620:	2823883a 	mov	r17,r5
 800a624:	dcc00315 	stw	r19,12(sp)
 800a628:	dc800215 	stw	r18,8(sp)
 800a62c:	800a3d80 	call	800a3d8 <__hi0bits>
 800a630:	100b883a 	mov	r5,r2
 800a634:	00800804 	movi	r2,32
 800a638:	1145c83a 	sub	r2,r2,r5
 800a63c:	88800015 	stw	r2,0(r17)
 800a640:	00800284 	movi	r2,10
 800a644:	80ffff04 	addi	r3,r16,-4
 800a648:	11401416 	blt	r2,r5,800a69c <__b2d+0xb0>
 800a64c:	008002c4 	movi	r2,11
 800a650:	1149c83a 	sub	r4,r2,r5
 800a654:	a0c02736 	bltu	r20,r3,800a6f4 <__b2d+0x108>
 800a658:	000d883a 	mov	r6,zero
 800a65c:	28800544 	addi	r2,r5,21
 800a660:	a906d83a 	srl	r3,r21,r4
 800a664:	a884983a 	sll	r2,r21,r2
 800a668:	1ccffc34 	orhi	r19,r3,16368
 800a66c:	11a4b03a 	or	r18,r2,r6
 800a670:	9005883a 	mov	r2,r18
 800a674:	9807883a 	mov	r3,r19
 800a678:	dfc00617 	ldw	ra,24(sp)
 800a67c:	dd400517 	ldw	r21,20(sp)
 800a680:	dd000417 	ldw	r20,16(sp)
 800a684:	dcc00317 	ldw	r19,12(sp)
 800a688:	dc800217 	ldw	r18,8(sp)
 800a68c:	dc400117 	ldw	r17,4(sp)
 800a690:	dc000017 	ldw	r16,0(sp)
 800a694:	dec00704 	addi	sp,sp,28
 800a698:	f800283a 	ret
 800a69c:	a0c00e36 	bltu	r20,r3,800a6d8 <__b2d+0xec>
 800a6a0:	293ffd44 	addi	r4,r5,-11
 800a6a4:	000d883a 	mov	r6,zero
 800a6a8:	20000f26 	beq	r4,zero,800a6e8 <__b2d+0xfc>
 800a6ac:	00800804 	movi	r2,32
 800a6b0:	110bc83a 	sub	r5,r2,r4
 800a6b4:	a0c01236 	bltu	r20,r3,800a700 <__b2d+0x114>
 800a6b8:	000f883a 	mov	r7,zero
 800a6bc:	a904983a 	sll	r2,r21,r4
 800a6c0:	3146d83a 	srl	r3,r6,r5
 800a6c4:	3108983a 	sll	r4,r6,r4
 800a6c8:	108ffc34 	orhi	r2,r2,16368
 800a6cc:	18a6b03a 	or	r19,r3,r2
 800a6d0:	3924b03a 	or	r18,r7,r4
 800a6d4:	003fe606 	br	800a670 <__b2d+0x84>
 800a6d8:	293ffd44 	addi	r4,r5,-11
 800a6dc:	81bffe17 	ldw	r6,-8(r16)
 800a6e0:	80fffe04 	addi	r3,r16,-8
 800a6e4:	203ff11e 	bne	r4,zero,800a6ac <__b2d+0xc0>
 800a6e8:	accffc34 	orhi	r19,r21,16368
 800a6ec:	3025883a 	mov	r18,r6
 800a6f0:	003fdf06 	br	800a670 <__b2d+0x84>
 800a6f4:	18bfff17 	ldw	r2,-4(r3)
 800a6f8:	110cd83a 	srl	r6,r2,r4
 800a6fc:	003fd706 	br	800a65c <__b2d+0x70>
 800a700:	18bfff17 	ldw	r2,-4(r3)
 800a704:	114ed83a 	srl	r7,r2,r5
 800a708:	003fec06 	br	800a6bc <__b2d+0xd0>

0800a70c <__ratio>:
 800a70c:	defff904 	addi	sp,sp,-28
 800a710:	dc400215 	stw	r17,8(sp)
 800a714:	2823883a 	mov	r17,r5
 800a718:	d80b883a 	mov	r5,sp
 800a71c:	dfc00615 	stw	ra,24(sp)
 800a720:	dd000515 	stw	r20,20(sp)
 800a724:	dcc00415 	stw	r19,16(sp)
 800a728:	dc800315 	stw	r18,12(sp)
 800a72c:	2025883a 	mov	r18,r4
 800a730:	800a5ec0 	call	800a5ec <__b2d>
 800a734:	8809883a 	mov	r4,r17
 800a738:	d9400104 	addi	r5,sp,4
 800a73c:	1027883a 	mov	r19,r2
 800a740:	1829883a 	mov	r20,r3
 800a744:	800a5ec0 	call	800a5ec <__b2d>
 800a748:	89000417 	ldw	r4,16(r17)
 800a74c:	91c00417 	ldw	r7,16(r18)
 800a750:	d9800117 	ldw	r6,4(sp)
 800a754:	180b883a 	mov	r5,r3
 800a758:	390fc83a 	sub	r7,r7,r4
 800a75c:	1009883a 	mov	r4,r2
 800a760:	d8800017 	ldw	r2,0(sp)
 800a764:	380e917a 	slli	r7,r7,5
 800a768:	2011883a 	mov	r8,r4
 800a76c:	1185c83a 	sub	r2,r2,r6
 800a770:	11c5883a 	add	r2,r2,r7
 800a774:	1006953a 	slli	r3,r2,20
 800a778:	2813883a 	mov	r9,r5
 800a77c:	00800d0e 	bge	zero,r2,800a7b4 <__ratio+0xa8>
 800a780:	1d29883a 	add	r20,r3,r20
 800a784:	a00b883a 	mov	r5,r20
 800a788:	480f883a 	mov	r7,r9
 800a78c:	9809883a 	mov	r4,r19
 800a790:	400d883a 	mov	r6,r8
 800a794:	800d4a00 	call	800d4a0 <__divdf3>
 800a798:	dfc00617 	ldw	ra,24(sp)
 800a79c:	dd000517 	ldw	r20,20(sp)
 800a7a0:	dcc00417 	ldw	r19,16(sp)
 800a7a4:	dc800317 	ldw	r18,12(sp)
 800a7a8:	dc400217 	ldw	r17,8(sp)
 800a7ac:	dec00704 	addi	sp,sp,28
 800a7b0:	f800283a 	ret
 800a7b4:	28d3c83a 	sub	r9,r5,r3
 800a7b8:	003ff206 	br	800a784 <__ratio+0x78>

0800a7bc <_mprec_log10>:
 800a7bc:	defffe04 	addi	sp,sp,-8
 800a7c0:	008005c4 	movi	r2,23
 800a7c4:	dc000015 	stw	r16,0(sp)
 800a7c8:	dfc00115 	stw	ra,4(sp)
 800a7cc:	2021883a 	mov	r16,r4
 800a7d0:	11000c16 	blt	r2,r4,800a804 <_mprec_log10+0x48>
 800a7d4:	200490fa 	slli	r2,r4,3
 800a7d8:	00c200b4 	movhi	r3,2050
 800a7dc:	18e07704 	addi	r3,r3,-32292
 800a7e0:	10c5883a 	add	r2,r2,r3
 800a7e4:	12400117 	ldw	r9,4(r2)
 800a7e8:	12000017 	ldw	r8,0(r2)
 800a7ec:	4807883a 	mov	r3,r9
 800a7f0:	4005883a 	mov	r2,r8
 800a7f4:	dfc00117 	ldw	ra,4(sp)
 800a7f8:	dc000017 	ldw	r16,0(sp)
 800a7fc:	dec00204 	addi	sp,sp,8
 800a800:	f800283a 	ret
 800a804:	0011883a 	mov	r8,zero
 800a808:	024ffc34 	movhi	r9,16368
 800a80c:	0005883a 	mov	r2,zero
 800a810:	00d00934 	movhi	r3,16420
 800a814:	480b883a 	mov	r5,r9
 800a818:	4009883a 	mov	r4,r8
 800a81c:	180f883a 	mov	r7,r3
 800a820:	100d883a 	mov	r6,r2
 800a824:	800d0dc0 	call	800d0dc <__muldf3>
 800a828:	843fffc4 	addi	r16,r16,-1
 800a82c:	1011883a 	mov	r8,r2
 800a830:	1813883a 	mov	r9,r3
 800a834:	803ff51e 	bne	r16,zero,800a80c <_mprec_log10+0x50>
 800a838:	4005883a 	mov	r2,r8
 800a83c:	4807883a 	mov	r3,r9
 800a840:	dfc00117 	ldw	ra,4(sp)
 800a844:	dc000017 	ldw	r16,0(sp)
 800a848:	dec00204 	addi	sp,sp,8
 800a84c:	f800283a 	ret

0800a850 <__copybits>:
 800a850:	297fffc4 	addi	r5,r5,-1
 800a854:	30800417 	ldw	r2,16(r6)
 800a858:	280bd17a 	srai	r5,r5,5
 800a85c:	31800504 	addi	r6,r6,20
 800a860:	1085883a 	add	r2,r2,r2
 800a864:	294b883a 	add	r5,r5,r5
 800a868:	294b883a 	add	r5,r5,r5
 800a86c:	1085883a 	add	r2,r2,r2
 800a870:	290b883a 	add	r5,r5,r4
 800a874:	3087883a 	add	r3,r6,r2
 800a878:	29400104 	addi	r5,r5,4
 800a87c:	30c0052e 	bgeu	r6,r3,800a894 <__copybits+0x44>
 800a880:	30800017 	ldw	r2,0(r6)
 800a884:	31800104 	addi	r6,r6,4
 800a888:	20800015 	stw	r2,0(r4)
 800a88c:	21000104 	addi	r4,r4,4
 800a890:	30fffb36 	bltu	r6,r3,800a880 <__copybits+0x30>
 800a894:	2140032e 	bgeu	r4,r5,800a8a4 <__copybits+0x54>
 800a898:	20000015 	stw	zero,0(r4)
 800a89c:	21000104 	addi	r4,r4,4
 800a8a0:	217ffd36 	bltu	r4,r5,800a898 <__copybits+0x48>
 800a8a4:	f800283a 	ret

0800a8a8 <__any_on>:
 800a8a8:	20800417 	ldw	r2,16(r4)
 800a8ac:	2807d17a 	srai	r3,r5,5
 800a8b0:	21000504 	addi	r4,r4,20
 800a8b4:	10c00d0e 	bge	r2,r3,800a8ec <__any_on+0x44>
 800a8b8:	1085883a 	add	r2,r2,r2
 800a8bc:	1085883a 	add	r2,r2,r2
 800a8c0:	208d883a 	add	r6,r4,r2
 800a8c4:	2180182e 	bgeu	r4,r6,800a928 <__any_on+0x80>
 800a8c8:	30bfff17 	ldw	r2,-4(r6)
 800a8cc:	30ffff04 	addi	r3,r6,-4
 800a8d0:	1000041e 	bne	r2,zero,800a8e4 <__any_on+0x3c>
 800a8d4:	20c0142e 	bgeu	r4,r3,800a928 <__any_on+0x80>
 800a8d8:	18ffff04 	addi	r3,r3,-4
 800a8dc:	18800017 	ldw	r2,0(r3)
 800a8e0:	103ffc26 	beq	r2,zero,800a8d4 <__any_on+0x2c>
 800a8e4:	00800044 	movi	r2,1
 800a8e8:	f800283a 	ret
 800a8ec:	18800a0e 	bge	r3,r2,800a918 <__any_on+0x70>
 800a8f0:	294007cc 	andi	r5,r5,31
 800a8f4:	28000826 	beq	r5,zero,800a918 <__any_on+0x70>
 800a8f8:	18c5883a 	add	r2,r3,r3
 800a8fc:	1085883a 	add	r2,r2,r2
 800a900:	208d883a 	add	r6,r4,r2
 800a904:	30c00017 	ldw	r3,0(r6)
 800a908:	1944d83a 	srl	r2,r3,r5
 800a90c:	1144983a 	sll	r2,r2,r5
 800a910:	18bff41e 	bne	r3,r2,800a8e4 <__any_on+0x3c>
 800a914:	003feb06 	br	800a8c4 <__any_on+0x1c>
 800a918:	18c5883a 	add	r2,r3,r3
 800a91c:	1085883a 	add	r2,r2,r2
 800a920:	208d883a 	add	r6,r4,r2
 800a924:	003fe706 	br	800a8c4 <__any_on+0x1c>
 800a928:	0005883a 	mov	r2,zero
 800a92c:	f800283a 	ret

0800a930 <_Balloc>:
 800a930:	20c01317 	ldw	r3,76(r4)
 800a934:	defffb04 	addi	sp,sp,-20
 800a938:	dcc00315 	stw	r19,12(sp)
 800a93c:	dc800215 	stw	r18,8(sp)
 800a940:	dfc00415 	stw	ra,16(sp)
 800a944:	2825883a 	mov	r18,r5
 800a948:	dc400115 	stw	r17,4(sp)
 800a94c:	dc000015 	stw	r16,0(sp)
 800a950:	2027883a 	mov	r19,r4
 800a954:	01800404 	movi	r6,16
 800a958:	01400104 	movi	r5,4
 800a95c:	18001726 	beq	r3,zero,800a9bc <_Balloc+0x8c>
 800a960:	01400044 	movi	r5,1
 800a964:	9485883a 	add	r2,r18,r18
 800a968:	2ca2983a 	sll	r17,r5,r18
 800a96c:	1085883a 	add	r2,r2,r2
 800a970:	10c7883a 	add	r3,r2,r3
 800a974:	1c000017 	ldw	r16,0(r3)
 800a978:	8c4d883a 	add	r6,r17,r17
 800a97c:	318d883a 	add	r6,r6,r6
 800a980:	9809883a 	mov	r4,r19
 800a984:	31800504 	addi	r6,r6,20
 800a988:	80001226 	beq	r16,zero,800a9d4 <_Balloc+0xa4>
 800a98c:	80800017 	ldw	r2,0(r16)
 800a990:	18800015 	stw	r2,0(r3)
 800a994:	80000415 	stw	zero,16(r16)
 800a998:	80000315 	stw	zero,12(r16)
 800a99c:	8005883a 	mov	r2,r16
 800a9a0:	dfc00417 	ldw	ra,16(sp)
 800a9a4:	dcc00317 	ldw	r19,12(sp)
 800a9a8:	dc800217 	ldw	r18,8(sp)
 800a9ac:	dc400117 	ldw	r17,4(sp)
 800a9b0:	dc000017 	ldw	r16,0(sp)
 800a9b4:	dec00504 	addi	sp,sp,20
 800a9b8:	f800283a 	ret
 800a9bc:	800be740 	call	800be74 <_calloc_r>
 800a9c0:	1007883a 	mov	r3,r2
 800a9c4:	0021883a 	mov	r16,zero
 800a9c8:	98801315 	stw	r2,76(r19)
 800a9cc:	103fe41e 	bne	r2,zero,800a960 <_Balloc+0x30>
 800a9d0:	003ff206 	br	800a99c <_Balloc+0x6c>
 800a9d4:	800be740 	call	800be74 <_calloc_r>
 800a9d8:	103ff026 	beq	r2,zero,800a99c <_Balloc+0x6c>
 800a9dc:	1021883a 	mov	r16,r2
 800a9e0:	14800115 	stw	r18,4(r2)
 800a9e4:	14400215 	stw	r17,8(r2)
 800a9e8:	003fea06 	br	800a994 <_Balloc+0x64>

0800a9ec <__d2b>:
 800a9ec:	defff504 	addi	sp,sp,-44
 800a9f0:	dcc00515 	stw	r19,20(sp)
 800a9f4:	04c00044 	movi	r19,1
 800a9f8:	dc000215 	stw	r16,8(sp)
 800a9fc:	2821883a 	mov	r16,r5
 800aa00:	980b883a 	mov	r5,r19
 800aa04:	ddc00915 	stw	r23,36(sp)
 800aa08:	dd800815 	stw	r22,32(sp)
 800aa0c:	dd400715 	stw	r21,28(sp)
 800aa10:	dd000615 	stw	r20,24(sp)
 800aa14:	dc800415 	stw	r18,16(sp)
 800aa18:	dc400315 	stw	r17,12(sp)
 800aa1c:	dfc00a15 	stw	ra,40(sp)
 800aa20:	3023883a 	mov	r17,r6
 800aa24:	382d883a 	mov	r22,r7
 800aa28:	ddc00b17 	ldw	r23,44(sp)
 800aa2c:	800a9300 	call	800a930 <_Balloc>
 800aa30:	1025883a 	mov	r18,r2
 800aa34:	00a00034 	movhi	r2,32768
 800aa38:	10bfffc4 	addi	r2,r2,-1
 800aa3c:	8888703a 	and	r4,r17,r2
 800aa40:	202ad53a 	srli	r21,r4,20
 800aa44:	00800434 	movhi	r2,16
 800aa48:	10bfffc4 	addi	r2,r2,-1
 800aa4c:	8886703a 	and	r3,r17,r2
 800aa50:	a829003a 	cmpeq	r20,r21,zero
 800aa54:	800b883a 	mov	r5,r16
 800aa58:	d8c00115 	stw	r3,4(sp)
 800aa5c:	94000504 	addi	r16,r18,20
 800aa60:	a000021e 	bne	r20,zero,800aa6c <__d2b+0x80>
 800aa64:	18c00434 	orhi	r3,r3,16
 800aa68:	d8c00115 	stw	r3,4(sp)
 800aa6c:	28002726 	beq	r5,zero,800ab0c <__d2b+0x120>
 800aa70:	d809883a 	mov	r4,sp
 800aa74:	d9400015 	stw	r5,0(sp)
 800aa78:	800a4480 	call	800a448 <__lo0bits>
 800aa7c:	100d883a 	mov	r6,r2
 800aa80:	10003526 	beq	r2,zero,800ab58 <__d2b+0x16c>
 800aa84:	d8c00117 	ldw	r3,4(sp)
 800aa88:	00800804 	movi	r2,32
 800aa8c:	1185c83a 	sub	r2,r2,r6
 800aa90:	d9000017 	ldw	r4,0(sp)
 800aa94:	1886983a 	sll	r3,r3,r2
 800aa98:	1906b03a 	or	r3,r3,r4
 800aa9c:	90c00515 	stw	r3,20(r18)
 800aaa0:	d8c00117 	ldw	r3,4(sp)
 800aaa4:	1986d83a 	srl	r3,r3,r6
 800aaa8:	d8c00115 	stw	r3,4(sp)
 800aaac:	180b003a 	cmpeq	r5,r3,zero
 800aab0:	00800084 	movi	r2,2
 800aab4:	114bc83a 	sub	r5,r2,r5
 800aab8:	80c00115 	stw	r3,4(r16)
 800aabc:	91400415 	stw	r5,16(r18)
 800aac0:	a0001a1e 	bne	r20,zero,800ab2c <__d2b+0x140>
 800aac4:	3545883a 	add	r2,r6,r21
 800aac8:	10bef344 	addi	r2,r2,-1075
 800aacc:	00c00d44 	movi	r3,53
 800aad0:	b0800015 	stw	r2,0(r22)
 800aad4:	1987c83a 	sub	r3,r3,r6
 800aad8:	b8c00015 	stw	r3,0(r23)
 800aadc:	9005883a 	mov	r2,r18
 800aae0:	dfc00a17 	ldw	ra,40(sp)
 800aae4:	ddc00917 	ldw	r23,36(sp)
 800aae8:	dd800817 	ldw	r22,32(sp)
 800aaec:	dd400717 	ldw	r21,28(sp)
 800aaf0:	dd000617 	ldw	r20,24(sp)
 800aaf4:	dcc00517 	ldw	r19,20(sp)
 800aaf8:	dc800417 	ldw	r18,16(sp)
 800aafc:	dc400317 	ldw	r17,12(sp)
 800ab00:	dc000217 	ldw	r16,8(sp)
 800ab04:	dec00b04 	addi	sp,sp,44
 800ab08:	f800283a 	ret
 800ab0c:	d9000104 	addi	r4,sp,4
 800ab10:	800a4480 	call	800a448 <__lo0bits>
 800ab14:	11800804 	addi	r6,r2,32
 800ab18:	d8800117 	ldw	r2,4(sp)
 800ab1c:	94c00415 	stw	r19,16(r18)
 800ab20:	980b883a 	mov	r5,r19
 800ab24:	90800515 	stw	r2,20(r18)
 800ab28:	a03fe626 	beq	r20,zero,800aac4 <__d2b+0xd8>
 800ab2c:	2945883a 	add	r2,r5,r5
 800ab30:	1085883a 	add	r2,r2,r2
 800ab34:	1405883a 	add	r2,r2,r16
 800ab38:	113fff17 	ldw	r4,-4(r2)
 800ab3c:	30fef384 	addi	r3,r6,-1074
 800ab40:	2820917a 	slli	r16,r5,5
 800ab44:	b0c00015 	stw	r3,0(r22)
 800ab48:	800a3d80 	call	800a3d8 <__hi0bits>
 800ab4c:	80a1c83a 	sub	r16,r16,r2
 800ab50:	bc000015 	stw	r16,0(r23)
 800ab54:	003fe106 	br	800aadc <__d2b+0xf0>
 800ab58:	d8800017 	ldw	r2,0(sp)
 800ab5c:	90800515 	stw	r2,20(r18)
 800ab60:	d8c00117 	ldw	r3,4(sp)
 800ab64:	003fd106 	br	800aaac <__d2b+0xc0>

0800ab68 <__mdiff>:
 800ab68:	defffb04 	addi	sp,sp,-20
 800ab6c:	dc000015 	stw	r16,0(sp)
 800ab70:	2821883a 	mov	r16,r5
 800ab74:	dc800215 	stw	r18,8(sp)
 800ab78:	300b883a 	mov	r5,r6
 800ab7c:	2025883a 	mov	r18,r4
 800ab80:	8009883a 	mov	r4,r16
 800ab84:	dc400115 	stw	r17,4(sp)
 800ab88:	dfc00415 	stw	ra,16(sp)
 800ab8c:	dcc00315 	stw	r19,12(sp)
 800ab90:	3023883a 	mov	r17,r6
 800ab94:	800a50c0 	call	800a50c <__mcmp>
 800ab98:	10004226 	beq	r2,zero,800aca4 <__mdiff+0x13c>
 800ab9c:	10005016 	blt	r2,zero,800ace0 <__mdiff+0x178>
 800aba0:	0027883a 	mov	r19,zero
 800aba4:	81400117 	ldw	r5,4(r16)
 800aba8:	9009883a 	mov	r4,r18
 800abac:	800a9300 	call	800a930 <_Balloc>
 800abb0:	1019883a 	mov	r12,r2
 800abb4:	82800417 	ldw	r10,16(r16)
 800abb8:	88800417 	ldw	r2,16(r17)
 800abbc:	81800504 	addi	r6,r16,20
 800abc0:	5287883a 	add	r3,r10,r10
 800abc4:	1085883a 	add	r2,r2,r2
 800abc8:	18c7883a 	add	r3,r3,r3
 800abcc:	1085883a 	add	r2,r2,r2
 800abd0:	8a000504 	addi	r8,r17,20
 800abd4:	64c00315 	stw	r19,12(r12)
 800abd8:	30db883a 	add	r13,r6,r3
 800abdc:	4097883a 	add	r11,r8,r2
 800abe0:	61c00504 	addi	r7,r12,20
 800abe4:	0013883a 	mov	r9,zero
 800abe8:	31000017 	ldw	r4,0(r6)
 800abec:	41400017 	ldw	r5,0(r8)
 800abf0:	42000104 	addi	r8,r8,4
 800abf4:	20bfffcc 	andi	r2,r4,65535
 800abf8:	28ffffcc 	andi	r3,r5,65535
 800abfc:	10c5c83a 	sub	r2,r2,r3
 800ac00:	1245883a 	add	r2,r2,r9
 800ac04:	2008d43a 	srli	r4,r4,16
 800ac08:	280ad43a 	srli	r5,r5,16
 800ac0c:	1007d43a 	srai	r3,r2,16
 800ac10:	3880000d 	sth	r2,0(r7)
 800ac14:	2149c83a 	sub	r4,r4,r5
 800ac18:	20c9883a 	add	r4,r4,r3
 800ac1c:	3900008d 	sth	r4,2(r7)
 800ac20:	31800104 	addi	r6,r6,4
 800ac24:	39c00104 	addi	r7,r7,4
 800ac28:	2013d43a 	srai	r9,r4,16
 800ac2c:	42ffee36 	bltu	r8,r11,800abe8 <__mdiff+0x80>
 800ac30:	33400c2e 	bgeu	r6,r13,800ac64 <__mdiff+0xfc>
 800ac34:	30800017 	ldw	r2,0(r6)
 800ac38:	31800104 	addi	r6,r6,4
 800ac3c:	10ffffcc 	andi	r3,r2,65535
 800ac40:	1a47883a 	add	r3,r3,r9
 800ac44:	1004d43a 	srli	r2,r2,16
 800ac48:	1809d43a 	srai	r4,r3,16
 800ac4c:	38c0000d 	sth	r3,0(r7)
 800ac50:	1105883a 	add	r2,r2,r4
 800ac54:	3880008d 	sth	r2,2(r7)
 800ac58:	1013d43a 	srai	r9,r2,16
 800ac5c:	39c00104 	addi	r7,r7,4
 800ac60:	337ff436 	bltu	r6,r13,800ac34 <__mdiff+0xcc>
 800ac64:	38bfff17 	ldw	r2,-4(r7)
 800ac68:	38ffff04 	addi	r3,r7,-4
 800ac6c:	1000041e 	bne	r2,zero,800ac80 <__mdiff+0x118>
 800ac70:	18ffff04 	addi	r3,r3,-4
 800ac74:	18800017 	ldw	r2,0(r3)
 800ac78:	52bfffc4 	addi	r10,r10,-1
 800ac7c:	103ffc26 	beq	r2,zero,800ac70 <__mdiff+0x108>
 800ac80:	6005883a 	mov	r2,r12
 800ac84:	62800415 	stw	r10,16(r12)
 800ac88:	dfc00417 	ldw	ra,16(sp)
 800ac8c:	dcc00317 	ldw	r19,12(sp)
 800ac90:	dc800217 	ldw	r18,8(sp)
 800ac94:	dc400117 	ldw	r17,4(sp)
 800ac98:	dc000017 	ldw	r16,0(sp)
 800ac9c:	dec00504 	addi	sp,sp,20
 800aca0:	f800283a 	ret
 800aca4:	9009883a 	mov	r4,r18
 800aca8:	000b883a 	mov	r5,zero
 800acac:	800a9300 	call	800a930 <_Balloc>
 800acb0:	1019883a 	mov	r12,r2
 800acb4:	00800044 	movi	r2,1
 800acb8:	60800415 	stw	r2,16(r12)
 800acbc:	6005883a 	mov	r2,r12
 800acc0:	60000515 	stw	zero,20(r12)
 800acc4:	dfc00417 	ldw	ra,16(sp)
 800acc8:	dcc00317 	ldw	r19,12(sp)
 800accc:	dc800217 	ldw	r18,8(sp)
 800acd0:	dc400117 	ldw	r17,4(sp)
 800acd4:	dc000017 	ldw	r16,0(sp)
 800acd8:	dec00504 	addi	sp,sp,20
 800acdc:	f800283a 	ret
 800ace0:	880d883a 	mov	r6,r17
 800ace4:	04c00044 	movi	r19,1
 800ace8:	8023883a 	mov	r17,r16
 800acec:	3021883a 	mov	r16,r6
 800acf0:	003fac06 	br	800aba4 <__mdiff+0x3c>

0800acf4 <__lshift>:
 800acf4:	defff904 	addi	sp,sp,-28
 800acf8:	28800417 	ldw	r2,16(r5)
 800acfc:	dc000015 	stw	r16,0(sp)
 800ad00:	3021d17a 	srai	r16,r6,5
 800ad04:	28c00217 	ldw	r3,8(r5)
 800ad08:	10800044 	addi	r2,r2,1
 800ad0c:	dc400115 	stw	r17,4(sp)
 800ad10:	80a3883a 	add	r17,r16,r2
 800ad14:	dd400515 	stw	r21,20(sp)
 800ad18:	dd000415 	stw	r20,16(sp)
 800ad1c:	dc800215 	stw	r18,8(sp)
 800ad20:	dfc00615 	stw	ra,24(sp)
 800ad24:	2825883a 	mov	r18,r5
 800ad28:	dcc00315 	stw	r19,12(sp)
 800ad2c:	3029883a 	mov	r20,r6
 800ad30:	202b883a 	mov	r21,r4
 800ad34:	29400117 	ldw	r5,4(r5)
 800ad38:	1c40030e 	bge	r3,r17,800ad48 <__lshift+0x54>
 800ad3c:	18c7883a 	add	r3,r3,r3
 800ad40:	29400044 	addi	r5,r5,1
 800ad44:	1c7ffd16 	blt	r3,r17,800ad3c <__lshift+0x48>
 800ad48:	a809883a 	mov	r4,r21
 800ad4c:	800a9300 	call	800a930 <_Balloc>
 800ad50:	1027883a 	mov	r19,r2
 800ad54:	11400504 	addi	r5,r2,20
 800ad58:	0400090e 	bge	zero,r16,800ad80 <__lshift+0x8c>
 800ad5c:	2805883a 	mov	r2,r5
 800ad60:	0007883a 	mov	r3,zero
 800ad64:	18c00044 	addi	r3,r3,1
 800ad68:	10000015 	stw	zero,0(r2)
 800ad6c:	10800104 	addi	r2,r2,4
 800ad70:	80fffc1e 	bne	r16,r3,800ad64 <__lshift+0x70>
 800ad74:	8405883a 	add	r2,r16,r16
 800ad78:	1085883a 	add	r2,r2,r2
 800ad7c:	288b883a 	add	r5,r5,r2
 800ad80:	90800417 	ldw	r2,16(r18)
 800ad84:	91000504 	addi	r4,r18,20
 800ad88:	a18007cc 	andi	r6,r20,31
 800ad8c:	1085883a 	add	r2,r2,r2
 800ad90:	1085883a 	add	r2,r2,r2
 800ad94:	208f883a 	add	r7,r4,r2
 800ad98:	30001e26 	beq	r6,zero,800ae14 <__lshift+0x120>
 800ad9c:	00800804 	movi	r2,32
 800ada0:	1191c83a 	sub	r8,r2,r6
 800ada4:	0007883a 	mov	r3,zero
 800ada8:	20800017 	ldw	r2,0(r4)
 800adac:	1184983a 	sll	r2,r2,r6
 800adb0:	1884b03a 	or	r2,r3,r2
 800adb4:	28800015 	stw	r2,0(r5)
 800adb8:	20c00017 	ldw	r3,0(r4)
 800adbc:	21000104 	addi	r4,r4,4
 800adc0:	29400104 	addi	r5,r5,4
 800adc4:	1a06d83a 	srl	r3,r3,r8
 800adc8:	21fff736 	bltu	r4,r7,800ada8 <__lshift+0xb4>
 800adcc:	28c00015 	stw	r3,0(r5)
 800add0:	18000126 	beq	r3,zero,800add8 <__lshift+0xe4>
 800add4:	8c400044 	addi	r17,r17,1
 800add8:	88bfffc4 	addi	r2,r17,-1
 800addc:	98800415 	stw	r2,16(r19)
 800ade0:	a809883a 	mov	r4,r21
 800ade4:	900b883a 	mov	r5,r18
 800ade8:	800a3b00 	call	800a3b0 <_Bfree>
 800adec:	9805883a 	mov	r2,r19
 800adf0:	dfc00617 	ldw	ra,24(sp)
 800adf4:	dd400517 	ldw	r21,20(sp)
 800adf8:	dd000417 	ldw	r20,16(sp)
 800adfc:	dcc00317 	ldw	r19,12(sp)
 800ae00:	dc800217 	ldw	r18,8(sp)
 800ae04:	dc400117 	ldw	r17,4(sp)
 800ae08:	dc000017 	ldw	r16,0(sp)
 800ae0c:	dec00704 	addi	sp,sp,28
 800ae10:	f800283a 	ret
 800ae14:	20800017 	ldw	r2,0(r4)
 800ae18:	21000104 	addi	r4,r4,4
 800ae1c:	28800015 	stw	r2,0(r5)
 800ae20:	29400104 	addi	r5,r5,4
 800ae24:	21ffec2e 	bgeu	r4,r7,800add8 <__lshift+0xe4>
 800ae28:	20800017 	ldw	r2,0(r4)
 800ae2c:	21000104 	addi	r4,r4,4
 800ae30:	28800015 	stw	r2,0(r5)
 800ae34:	29400104 	addi	r5,r5,4
 800ae38:	21fff636 	bltu	r4,r7,800ae14 <__lshift+0x120>
 800ae3c:	003fe606 	br	800add8 <__lshift+0xe4>

0800ae40 <__multiply>:
 800ae40:	defff904 	addi	sp,sp,-28
 800ae44:	dcc00315 	stw	r19,12(sp)
 800ae48:	dc800215 	stw	r18,8(sp)
 800ae4c:	2cc00417 	ldw	r19,16(r5)
 800ae50:	34800417 	ldw	r18,16(r6)
 800ae54:	dd000415 	stw	r20,16(sp)
 800ae58:	dc400115 	stw	r17,4(sp)
 800ae5c:	dfc00615 	stw	ra,24(sp)
 800ae60:	dd400515 	stw	r21,20(sp)
 800ae64:	dc000015 	stw	r16,0(sp)
 800ae68:	2823883a 	mov	r17,r5
 800ae6c:	3029883a 	mov	r20,r6
 800ae70:	9c80040e 	bge	r19,r18,800ae84 <__multiply+0x44>
 800ae74:	9027883a 	mov	r19,r18
 800ae78:	2c800417 	ldw	r18,16(r5)
 800ae7c:	2829883a 	mov	r20,r5
 800ae80:	3023883a 	mov	r17,r6
 800ae84:	88800217 	ldw	r2,8(r17)
 800ae88:	9ca1883a 	add	r16,r19,r18
 800ae8c:	89400117 	ldw	r5,4(r17)
 800ae90:	1400010e 	bge	r2,r16,800ae98 <__multiply+0x58>
 800ae94:	29400044 	addi	r5,r5,1
 800ae98:	800a9300 	call	800a930 <_Balloc>
 800ae9c:	102b883a 	mov	r21,r2
 800aea0:	8405883a 	add	r2,r16,r16
 800aea4:	1085883a 	add	r2,r2,r2
 800aea8:	a9000504 	addi	r4,r21,20
 800aeac:	209d883a 	add	r14,r4,r2
 800aeb0:	2380042e 	bgeu	r4,r14,800aec4 <__multiply+0x84>
 800aeb4:	2005883a 	mov	r2,r4
 800aeb8:	10000015 	stw	zero,0(r2)
 800aebc:	10800104 	addi	r2,r2,4
 800aec0:	13bffd36 	bltu	r2,r14,800aeb8 <__multiply+0x78>
 800aec4:	9485883a 	add	r2,r18,r18
 800aec8:	9cc7883a 	add	r3,r19,r19
 800aecc:	a1800504 	addi	r6,r20,20
 800aed0:	1085883a 	add	r2,r2,r2
 800aed4:	8b400504 	addi	r13,r17,20
 800aed8:	18c7883a 	add	r3,r3,r3
 800aedc:	309f883a 	add	r15,r6,r2
 800aee0:	68d7883a 	add	r11,r13,r3
 800aee4:	33c03b2e 	bgeu	r6,r15,800afd4 <__multiply+0x194>
 800aee8:	2019883a 	mov	r12,r4
 800aeec:	30800017 	ldw	r2,0(r6)
 800aef0:	127fffcc 	andi	r9,r2,65535
 800aef4:	48001826 	beq	r9,zero,800af58 <__multiply+0x118>
 800aef8:	6811883a 	mov	r8,r13
 800aefc:	600f883a 	mov	r7,r12
 800af00:	0015883a 	mov	r10,zero
 800af04:	40c00017 	ldw	r3,0(r8)
 800af08:	39400017 	ldw	r5,0(r7)
 800af0c:	42000104 	addi	r8,r8,4
 800af10:	193fffcc 	andi	r4,r3,65535
 800af14:	4909383a 	mul	r4,r9,r4
 800af18:	1806d43a 	srli	r3,r3,16
 800af1c:	28bfffcc 	andi	r2,r5,65535
 800af20:	5085883a 	add	r2,r10,r2
 800af24:	2089883a 	add	r4,r4,r2
 800af28:	48c7383a 	mul	r3,r9,r3
 800af2c:	280ad43a 	srli	r5,r5,16
 800af30:	2004d43a 	srli	r2,r4,16
 800af34:	3900000d 	sth	r4,0(r7)
 800af38:	1947883a 	add	r3,r3,r5
 800af3c:	10c5883a 	add	r2,r2,r3
 800af40:	3880008d 	sth	r2,2(r7)
 800af44:	1014d43a 	srli	r10,r2,16
 800af48:	39c00104 	addi	r7,r7,4
 800af4c:	42ffed36 	bltu	r8,r11,800af04 <__multiply+0xc4>
 800af50:	3a800015 	stw	r10,0(r7)
 800af54:	30800017 	ldw	r2,0(r6)
 800af58:	1012d43a 	srli	r9,r2,16
 800af5c:	48001926 	beq	r9,zero,800afc4 <__multiply+0x184>
 800af60:	60800017 	ldw	r2,0(r12)
 800af64:	6811883a 	mov	r8,r13
 800af68:	600f883a 	mov	r7,r12
 800af6c:	0015883a 	mov	r10,zero
 800af70:	100b883a 	mov	r5,r2
 800af74:	41000017 	ldw	r4,0(r8)
 800af78:	2806d43a 	srli	r3,r5,16
 800af7c:	3880000d 	sth	r2,0(r7)
 800af80:	20bfffcc 	andi	r2,r4,65535
 800af84:	4885383a 	mul	r2,r9,r2
 800af88:	50c7883a 	add	r3,r10,r3
 800af8c:	2008d43a 	srli	r4,r4,16
 800af90:	10c5883a 	add	r2,r2,r3
 800af94:	3880008d 	sth	r2,2(r7)
 800af98:	39c00104 	addi	r7,r7,4
 800af9c:	39400017 	ldw	r5,0(r7)
 800afa0:	4909383a 	mul	r4,r9,r4
 800afa4:	1004d43a 	srli	r2,r2,16
 800afa8:	28ffffcc 	andi	r3,r5,65535
 800afac:	20c9883a 	add	r4,r4,r3
 800afb0:	1105883a 	add	r2,r2,r4
 800afb4:	42000104 	addi	r8,r8,4
 800afb8:	1014d43a 	srli	r10,r2,16
 800afbc:	42ffed36 	bltu	r8,r11,800af74 <__multiply+0x134>
 800afc0:	38800015 	stw	r2,0(r7)
 800afc4:	31800104 	addi	r6,r6,4
 800afc8:	33c0022e 	bgeu	r6,r15,800afd4 <__multiply+0x194>
 800afcc:	63000104 	addi	r12,r12,4
 800afd0:	003fc606 	br	800aeec <__multiply+0xac>
 800afd4:	0400090e 	bge	zero,r16,800affc <__multiply+0x1bc>
 800afd8:	70bfff17 	ldw	r2,-4(r14)
 800afdc:	70ffff04 	addi	r3,r14,-4
 800afe0:	10000326 	beq	r2,zero,800aff0 <__multiply+0x1b0>
 800afe4:	00000506 	br	800affc <__multiply+0x1bc>
 800afe8:	18800017 	ldw	r2,0(r3)
 800afec:	1000031e 	bne	r2,zero,800affc <__multiply+0x1bc>
 800aff0:	843fffc4 	addi	r16,r16,-1
 800aff4:	18ffff04 	addi	r3,r3,-4
 800aff8:	803ffb1e 	bne	r16,zero,800afe8 <__multiply+0x1a8>
 800affc:	a805883a 	mov	r2,r21
 800b000:	ac000415 	stw	r16,16(r21)
 800b004:	dfc00617 	ldw	ra,24(sp)
 800b008:	dd400517 	ldw	r21,20(sp)
 800b00c:	dd000417 	ldw	r20,16(sp)
 800b010:	dcc00317 	ldw	r19,12(sp)
 800b014:	dc800217 	ldw	r18,8(sp)
 800b018:	dc400117 	ldw	r17,4(sp)
 800b01c:	dc000017 	ldw	r16,0(sp)
 800b020:	dec00704 	addi	sp,sp,28
 800b024:	f800283a 	ret

0800b028 <__i2b>:
 800b028:	defffd04 	addi	sp,sp,-12
 800b02c:	dc000015 	stw	r16,0(sp)
 800b030:	04000044 	movi	r16,1
 800b034:	dc800115 	stw	r18,4(sp)
 800b038:	2825883a 	mov	r18,r5
 800b03c:	800b883a 	mov	r5,r16
 800b040:	dfc00215 	stw	ra,8(sp)
 800b044:	800a9300 	call	800a930 <_Balloc>
 800b048:	14000415 	stw	r16,16(r2)
 800b04c:	14800515 	stw	r18,20(r2)
 800b050:	dfc00217 	ldw	ra,8(sp)
 800b054:	dc800117 	ldw	r18,4(sp)
 800b058:	dc000017 	ldw	r16,0(sp)
 800b05c:	dec00304 	addi	sp,sp,12
 800b060:	f800283a 	ret

0800b064 <__multadd>:
 800b064:	defffa04 	addi	sp,sp,-24
 800b068:	dc800215 	stw	r18,8(sp)
 800b06c:	2c800417 	ldw	r18,16(r5)
 800b070:	dd000415 	stw	r20,16(sp)
 800b074:	dcc00315 	stw	r19,12(sp)
 800b078:	dc000015 	stw	r16,0(sp)
 800b07c:	dfc00515 	stw	ra,20(sp)
 800b080:	3821883a 	mov	r16,r7
 800b084:	dc400115 	stw	r17,4(sp)
 800b088:	2827883a 	mov	r19,r5
 800b08c:	2029883a 	mov	r20,r4
 800b090:	2a000504 	addi	r8,r5,20
 800b094:	000f883a 	mov	r7,zero
 800b098:	40800017 	ldw	r2,0(r8)
 800b09c:	39c00044 	addi	r7,r7,1
 800b0a0:	10ffffcc 	andi	r3,r2,65535
 800b0a4:	1987383a 	mul	r3,r3,r6
 800b0a8:	1004d43a 	srli	r2,r2,16
 800b0ac:	1c07883a 	add	r3,r3,r16
 800b0b0:	180ad43a 	srli	r5,r3,16
 800b0b4:	1185383a 	mul	r2,r2,r6
 800b0b8:	18ffffcc 	andi	r3,r3,65535
 800b0bc:	1145883a 	add	r2,r2,r5
 800b0c0:	1008943a 	slli	r4,r2,16
 800b0c4:	1020d43a 	srli	r16,r2,16
 800b0c8:	20c9883a 	add	r4,r4,r3
 800b0cc:	41000015 	stw	r4,0(r8)
 800b0d0:	42000104 	addi	r8,r8,4
 800b0d4:	3cbff016 	blt	r7,r18,800b098 <__multadd+0x34>
 800b0d8:	80000826 	beq	r16,zero,800b0fc <__multadd+0x98>
 800b0dc:	98800217 	ldw	r2,8(r19)
 800b0e0:	90800f0e 	bge	r18,r2,800b120 <__multadd+0xbc>
 800b0e4:	9485883a 	add	r2,r18,r18
 800b0e8:	1085883a 	add	r2,r2,r2
 800b0ec:	14c5883a 	add	r2,r2,r19
 800b0f0:	90c00044 	addi	r3,r18,1
 800b0f4:	14000515 	stw	r16,20(r2)
 800b0f8:	98c00415 	stw	r3,16(r19)
 800b0fc:	9805883a 	mov	r2,r19
 800b100:	dfc00517 	ldw	ra,20(sp)
 800b104:	dd000417 	ldw	r20,16(sp)
 800b108:	dcc00317 	ldw	r19,12(sp)
 800b10c:	dc800217 	ldw	r18,8(sp)
 800b110:	dc400117 	ldw	r17,4(sp)
 800b114:	dc000017 	ldw	r16,0(sp)
 800b118:	dec00604 	addi	sp,sp,24
 800b11c:	f800283a 	ret
 800b120:	99400117 	ldw	r5,4(r19)
 800b124:	a009883a 	mov	r4,r20
 800b128:	29400044 	addi	r5,r5,1
 800b12c:	800a9300 	call	800a930 <_Balloc>
 800b130:	99800417 	ldw	r6,16(r19)
 800b134:	99400304 	addi	r5,r19,12
 800b138:	11000304 	addi	r4,r2,12
 800b13c:	318d883a 	add	r6,r6,r6
 800b140:	318d883a 	add	r6,r6,r6
 800b144:	31800204 	addi	r6,r6,8
 800b148:	1023883a 	mov	r17,r2
 800b14c:	8004c480 	call	8004c48 <memcpy>
 800b150:	980b883a 	mov	r5,r19
 800b154:	a009883a 	mov	r4,r20
 800b158:	800a3b00 	call	800a3b0 <_Bfree>
 800b15c:	8827883a 	mov	r19,r17
 800b160:	003fe006 	br	800b0e4 <__multadd+0x80>

0800b164 <__pow5mult>:
 800b164:	defffa04 	addi	sp,sp,-24
 800b168:	308000cc 	andi	r2,r6,3
 800b16c:	dd000415 	stw	r20,16(sp)
 800b170:	dcc00315 	stw	r19,12(sp)
 800b174:	dc000015 	stw	r16,0(sp)
 800b178:	dfc00515 	stw	ra,20(sp)
 800b17c:	dc800215 	stw	r18,8(sp)
 800b180:	dc400115 	stw	r17,4(sp)
 800b184:	3021883a 	mov	r16,r6
 800b188:	2027883a 	mov	r19,r4
 800b18c:	2829883a 	mov	r20,r5
 800b190:	10002b1e 	bne	r2,zero,800b240 <__pow5mult+0xdc>
 800b194:	8025d0ba 	srai	r18,r16,2
 800b198:	90001b26 	beq	r18,zero,800b208 <__pow5mult+0xa4>
 800b19c:	9c001217 	ldw	r16,72(r19)
 800b1a0:	8000081e 	bne	r16,zero,800b1c4 <__pow5mult+0x60>
 800b1a4:	00003006 	br	800b268 <__pow5mult+0x104>
 800b1a8:	800b883a 	mov	r5,r16
 800b1ac:	800d883a 	mov	r6,r16
 800b1b0:	9809883a 	mov	r4,r19
 800b1b4:	90001426 	beq	r18,zero,800b208 <__pow5mult+0xa4>
 800b1b8:	80800017 	ldw	r2,0(r16)
 800b1bc:	10001b26 	beq	r2,zero,800b22c <__pow5mult+0xc8>
 800b1c0:	1021883a 	mov	r16,r2
 800b1c4:	9080004c 	andi	r2,r18,1
 800b1c8:	1005003a 	cmpeq	r2,r2,zero
 800b1cc:	9025d07a 	srai	r18,r18,1
 800b1d0:	800d883a 	mov	r6,r16
 800b1d4:	9809883a 	mov	r4,r19
 800b1d8:	a00b883a 	mov	r5,r20
 800b1dc:	103ff21e 	bne	r2,zero,800b1a8 <__pow5mult+0x44>
 800b1e0:	800ae400 	call	800ae40 <__multiply>
 800b1e4:	a00b883a 	mov	r5,r20
 800b1e8:	9809883a 	mov	r4,r19
 800b1ec:	1023883a 	mov	r17,r2
 800b1f0:	800a3b00 	call	800a3b0 <_Bfree>
 800b1f4:	8829883a 	mov	r20,r17
 800b1f8:	800b883a 	mov	r5,r16
 800b1fc:	800d883a 	mov	r6,r16
 800b200:	9809883a 	mov	r4,r19
 800b204:	903fec1e 	bne	r18,zero,800b1b8 <__pow5mult+0x54>
 800b208:	a005883a 	mov	r2,r20
 800b20c:	dfc00517 	ldw	ra,20(sp)
 800b210:	dd000417 	ldw	r20,16(sp)
 800b214:	dcc00317 	ldw	r19,12(sp)
 800b218:	dc800217 	ldw	r18,8(sp)
 800b21c:	dc400117 	ldw	r17,4(sp)
 800b220:	dc000017 	ldw	r16,0(sp)
 800b224:	dec00604 	addi	sp,sp,24
 800b228:	f800283a 	ret
 800b22c:	800ae400 	call	800ae40 <__multiply>
 800b230:	80800015 	stw	r2,0(r16)
 800b234:	1021883a 	mov	r16,r2
 800b238:	10000015 	stw	zero,0(r2)
 800b23c:	003fe106 	br	800b1c4 <__pow5mult+0x60>
 800b240:	1085883a 	add	r2,r2,r2
 800b244:	00c200b4 	movhi	r3,2050
 800b248:	18e0bd04 	addi	r3,r3,-32012
 800b24c:	1085883a 	add	r2,r2,r2
 800b250:	10c5883a 	add	r2,r2,r3
 800b254:	11bfff17 	ldw	r6,-4(r2)
 800b258:	000f883a 	mov	r7,zero
 800b25c:	800b0640 	call	800b064 <__multadd>
 800b260:	1029883a 	mov	r20,r2
 800b264:	003fcb06 	br	800b194 <__pow5mult+0x30>
 800b268:	9809883a 	mov	r4,r19
 800b26c:	01409c44 	movi	r5,625
 800b270:	800b0280 	call	800b028 <__i2b>
 800b274:	98801215 	stw	r2,72(r19)
 800b278:	1021883a 	mov	r16,r2
 800b27c:	10000015 	stw	zero,0(r2)
 800b280:	003fd006 	br	800b1c4 <__pow5mult+0x60>

0800b284 <__s2b>:
 800b284:	defff904 	addi	sp,sp,-28
 800b288:	dcc00315 	stw	r19,12(sp)
 800b28c:	dc800215 	stw	r18,8(sp)
 800b290:	2827883a 	mov	r19,r5
 800b294:	2025883a 	mov	r18,r4
 800b298:	01400244 	movi	r5,9
 800b29c:	39000204 	addi	r4,r7,8
 800b2a0:	dd000415 	stw	r20,16(sp)
 800b2a4:	dc400115 	stw	r17,4(sp)
 800b2a8:	dfc00615 	stw	ra,24(sp)
 800b2ac:	dd400515 	stw	r21,20(sp)
 800b2b0:	dc000015 	stw	r16,0(sp)
 800b2b4:	3829883a 	mov	r20,r7
 800b2b8:	3023883a 	mov	r17,r6
 800b2bc:	8002f200 	call	8002f20 <__divsi3>
 800b2c0:	00c00044 	movi	r3,1
 800b2c4:	1880350e 	bge	r3,r2,800b39c <__s2b+0x118>
 800b2c8:	000b883a 	mov	r5,zero
 800b2cc:	18c7883a 	add	r3,r3,r3
 800b2d0:	29400044 	addi	r5,r5,1
 800b2d4:	18bffd16 	blt	r3,r2,800b2cc <__s2b+0x48>
 800b2d8:	9009883a 	mov	r4,r18
 800b2dc:	800a9300 	call	800a930 <_Balloc>
 800b2e0:	1011883a 	mov	r8,r2
 800b2e4:	d8800717 	ldw	r2,28(sp)
 800b2e8:	00c00044 	movi	r3,1
 800b2ec:	01800244 	movi	r6,9
 800b2f0:	40800515 	stw	r2,20(r8)
 800b2f4:	40c00415 	stw	r3,16(r8)
 800b2f8:	3440260e 	bge	r6,r17,800b394 <__s2b+0x110>
 800b2fc:	3021883a 	mov	r16,r6
 800b300:	99ab883a 	add	r21,r19,r6
 800b304:	9c05883a 	add	r2,r19,r16
 800b308:	11c00007 	ldb	r7,0(r2)
 800b30c:	400b883a 	mov	r5,r8
 800b310:	9009883a 	mov	r4,r18
 800b314:	39fff404 	addi	r7,r7,-48
 800b318:	01800284 	movi	r6,10
 800b31c:	800b0640 	call	800b064 <__multadd>
 800b320:	84000044 	addi	r16,r16,1
 800b324:	1011883a 	mov	r8,r2
 800b328:	8c3ff61e 	bne	r17,r16,800b304 <__s2b+0x80>
 800b32c:	ac45883a 	add	r2,r21,r17
 800b330:	117ffe04 	addi	r5,r2,-8
 800b334:	880d883a 	mov	r6,r17
 800b338:	35000c0e 	bge	r6,r20,800b36c <__s2b+0xe8>
 800b33c:	a185c83a 	sub	r2,r20,r6
 800b340:	2821883a 	mov	r16,r5
 800b344:	28a3883a 	add	r17,r5,r2
 800b348:	81c00007 	ldb	r7,0(r16)
 800b34c:	400b883a 	mov	r5,r8
 800b350:	9009883a 	mov	r4,r18
 800b354:	39fff404 	addi	r7,r7,-48
 800b358:	01800284 	movi	r6,10
 800b35c:	800b0640 	call	800b064 <__multadd>
 800b360:	84000044 	addi	r16,r16,1
 800b364:	1011883a 	mov	r8,r2
 800b368:	847ff71e 	bne	r16,r17,800b348 <__s2b+0xc4>
 800b36c:	4005883a 	mov	r2,r8
 800b370:	dfc00617 	ldw	ra,24(sp)
 800b374:	dd400517 	ldw	r21,20(sp)
 800b378:	dd000417 	ldw	r20,16(sp)
 800b37c:	dcc00317 	ldw	r19,12(sp)
 800b380:	dc800217 	ldw	r18,8(sp)
 800b384:	dc400117 	ldw	r17,4(sp)
 800b388:	dc000017 	ldw	r16,0(sp)
 800b38c:	dec00704 	addi	sp,sp,28
 800b390:	f800283a 	ret
 800b394:	99400284 	addi	r5,r19,10
 800b398:	003fe706 	br	800b338 <__s2b+0xb4>
 800b39c:	000b883a 	mov	r5,zero
 800b3a0:	003fcd06 	br	800b2d8 <__s2b+0x54>

0800b3a4 <putc>:
 800b3a4:	defffc04 	addi	sp,sp,-16
 800b3a8:	dc800215 	stw	r18,8(sp)
 800b3ac:	048200b4 	movhi	r18,2050
 800b3b0:	94a95904 	addi	r18,r18,-23196
 800b3b4:	90c00017 	ldw	r3,0(r18)
 800b3b8:	dc400115 	stw	r17,4(sp)
 800b3bc:	dc000015 	stw	r16,0(sp)
 800b3c0:	dfc00315 	stw	ra,12(sp)
 800b3c4:	2023883a 	mov	r17,r4
 800b3c8:	2821883a 	mov	r16,r5
 800b3cc:	18000226 	beq	r3,zero,800b3d8 <putc+0x34>
 800b3d0:	18800e17 	ldw	r2,56(r3)
 800b3d4:	10001126 	beq	r2,zero,800b41c <putc+0x78>
 800b3d8:	80800217 	ldw	r2,8(r16)
 800b3dc:	10ffffc4 	addi	r3,r2,-1
 800b3e0:	80c00215 	stw	r3,8(r16)
 800b3e4:	18001316 	blt	r3,zero,800b434 <putc+0x90>
 800b3e8:	80800017 	ldw	r2,0(r16)
 800b3ec:	14400005 	stb	r17,0(r2)
 800b3f0:	80c00017 	ldw	r3,0(r16)
 800b3f4:	18800044 	addi	r2,r3,1
 800b3f8:	18c00003 	ldbu	r3,0(r3)
 800b3fc:	80800015 	stw	r2,0(r16)
 800b400:	1805883a 	mov	r2,r3
 800b404:	dfc00317 	ldw	ra,12(sp)
 800b408:	dc800217 	ldw	r18,8(sp)
 800b40c:	dc400117 	ldw	r17,4(sp)
 800b410:	dc000017 	ldw	r16,0(sp)
 800b414:	dec00404 	addi	sp,sp,16
 800b418:	f800283a 	ret
 800b41c:	1809883a 	mov	r4,r3
 800b420:	80095480 	call	8009548 <__sinit>
 800b424:	80800217 	ldw	r2,8(r16)
 800b428:	10ffffc4 	addi	r3,r2,-1
 800b42c:	80c00215 	stw	r3,8(r16)
 800b430:	183fed0e 	bge	r3,zero,800b3e8 <putc+0x44>
 800b434:	80800617 	ldw	r2,24(r16)
 800b438:	18800f16 	blt	r3,r2,800b478 <putc+0xd4>
 800b43c:	80800017 	ldw	r2,0(r16)
 800b440:	14400005 	stb	r17,0(r2)
 800b444:	81000017 	ldw	r4,0(r16)
 800b448:	00800284 	movi	r2,10
 800b44c:	20c00003 	ldbu	r3,0(r4)
 800b450:	18801226 	beq	r3,r2,800b49c <putc+0xf8>
 800b454:	20800044 	addi	r2,r4,1
 800b458:	80800015 	stw	r2,0(r16)
 800b45c:	1805883a 	mov	r2,r3
 800b460:	dfc00317 	ldw	ra,12(sp)
 800b464:	dc800217 	ldw	r18,8(sp)
 800b468:	dc400117 	ldw	r17,4(sp)
 800b46c:	dc000017 	ldw	r16,0(sp)
 800b470:	dec00404 	addi	sp,sp,16
 800b474:	f800283a 	ret
 800b478:	91000017 	ldw	r4,0(r18)
 800b47c:	880b883a 	mov	r5,r17
 800b480:	800d883a 	mov	r6,r16
 800b484:	dfc00317 	ldw	ra,12(sp)
 800b488:	dc800217 	ldw	r18,8(sp)
 800b48c:	dc400117 	ldw	r17,4(sp)
 800b490:	dc000017 	ldw	r16,0(sp)
 800b494:	dec00404 	addi	sp,sp,16
 800b498:	800bd281 	jmpi	800bd28 <__swbuf_r>
 800b49c:	91000017 	ldw	r4,0(r18)
 800b4a0:	180b883a 	mov	r5,r3
 800b4a4:	003ff606 	br	800b480 <putc+0xdc>

0800b4a8 <_putc_r>:
 800b4a8:	defffc04 	addi	sp,sp,-16
 800b4ac:	dc400215 	stw	r17,8(sp)
 800b4b0:	dc000115 	stw	r16,4(sp)
 800b4b4:	dfc00315 	stw	ra,12(sp)
 800b4b8:	2021883a 	mov	r16,r4
 800b4bc:	2823883a 	mov	r17,r5
 800b4c0:	20000226 	beq	r4,zero,800b4cc <_putc_r+0x24>
 800b4c4:	20800e17 	ldw	r2,56(r4)
 800b4c8:	10001026 	beq	r2,zero,800b50c <_putc_r+0x64>
 800b4cc:	30800217 	ldw	r2,8(r6)
 800b4d0:	10ffffc4 	addi	r3,r2,-1
 800b4d4:	30c00215 	stw	r3,8(r6)
 800b4d8:	18001316 	blt	r3,zero,800b528 <_putc_r+0x80>
 800b4dc:	30800017 	ldw	r2,0(r6)
 800b4e0:	14400005 	stb	r17,0(r2)
 800b4e4:	30c00017 	ldw	r3,0(r6)
 800b4e8:	18800044 	addi	r2,r3,1
 800b4ec:	18c00003 	ldbu	r3,0(r3)
 800b4f0:	30800015 	stw	r2,0(r6)
 800b4f4:	1805883a 	mov	r2,r3
 800b4f8:	dfc00317 	ldw	ra,12(sp)
 800b4fc:	dc400217 	ldw	r17,8(sp)
 800b500:	dc000117 	ldw	r16,4(sp)
 800b504:	dec00404 	addi	sp,sp,16
 800b508:	f800283a 	ret
 800b50c:	d9800015 	stw	r6,0(sp)
 800b510:	80095480 	call	8009548 <__sinit>
 800b514:	d9800017 	ldw	r6,0(sp)
 800b518:	30800217 	ldw	r2,8(r6)
 800b51c:	10ffffc4 	addi	r3,r2,-1
 800b520:	30c00215 	stw	r3,8(r6)
 800b524:	183fed0e 	bge	r3,zero,800b4dc <_putc_r+0x34>
 800b528:	30800617 	ldw	r2,24(r6)
 800b52c:	18800e16 	blt	r3,r2,800b568 <_putc_r+0xc0>
 800b530:	30800017 	ldw	r2,0(r6)
 800b534:	14400005 	stb	r17,0(r2)
 800b538:	31000017 	ldw	r4,0(r6)
 800b53c:	00800284 	movi	r2,10
 800b540:	20c00003 	ldbu	r3,0(r4)
 800b544:	18800f26 	beq	r3,r2,800b584 <_putc_r+0xdc>
 800b548:	20800044 	addi	r2,r4,1
 800b54c:	30800015 	stw	r2,0(r6)
 800b550:	1805883a 	mov	r2,r3
 800b554:	dfc00317 	ldw	ra,12(sp)
 800b558:	dc400217 	ldw	r17,8(sp)
 800b55c:	dc000117 	ldw	r16,4(sp)
 800b560:	dec00404 	addi	sp,sp,16
 800b564:	f800283a 	ret
 800b568:	8009883a 	mov	r4,r16
 800b56c:	880b883a 	mov	r5,r17
 800b570:	dfc00317 	ldw	ra,12(sp)
 800b574:	dc400217 	ldw	r17,8(sp)
 800b578:	dc000117 	ldw	r16,4(sp)
 800b57c:	dec00404 	addi	sp,sp,16
 800b580:	800bd281 	jmpi	800bd28 <__swbuf_r>
 800b584:	8009883a 	mov	r4,r16
 800b588:	180b883a 	mov	r5,r3
 800b58c:	003ff806 	br	800b570 <_putc_r+0xc8>

0800b590 <_read_r>:
 800b590:	defffd04 	addi	sp,sp,-12
 800b594:	dc000015 	stw	r16,0(sp)
 800b598:	040200b4 	movhi	r16,2050
 800b59c:	84312904 	addi	r16,r16,-15196
 800b5a0:	dc400115 	stw	r17,4(sp)
 800b5a4:	80000015 	stw	zero,0(r16)
 800b5a8:	2023883a 	mov	r17,r4
 800b5ac:	2809883a 	mov	r4,r5
 800b5b0:	300b883a 	mov	r5,r6
 800b5b4:	380d883a 	mov	r6,r7
 800b5b8:	dfc00215 	stw	ra,8(sp)
 800b5bc:	800e88c0 	call	800e88c <read>
 800b5c0:	1007883a 	mov	r3,r2
 800b5c4:	00bfffc4 	movi	r2,-1
 800b5c8:	18800626 	beq	r3,r2,800b5e4 <_read_r+0x54>
 800b5cc:	1805883a 	mov	r2,r3
 800b5d0:	dfc00217 	ldw	ra,8(sp)
 800b5d4:	dc400117 	ldw	r17,4(sp)
 800b5d8:	dc000017 	ldw	r16,0(sp)
 800b5dc:	dec00304 	addi	sp,sp,12
 800b5e0:	f800283a 	ret
 800b5e4:	80800017 	ldw	r2,0(r16)
 800b5e8:	103ff826 	beq	r2,zero,800b5cc <_read_r+0x3c>
 800b5ec:	88800015 	stw	r2,0(r17)
 800b5f0:	1805883a 	mov	r2,r3
 800b5f4:	dfc00217 	ldw	ra,8(sp)
 800b5f8:	dc400117 	ldw	r17,4(sp)
 800b5fc:	dc000017 	ldw	r16,0(sp)
 800b600:	dec00304 	addi	sp,sp,12
 800b604:	f800283a 	ret

0800b608 <_realloc_r>:
 800b608:	defff404 	addi	sp,sp,-48
 800b60c:	dd800815 	stw	r22,32(sp)
 800b610:	dc800415 	stw	r18,16(sp)
 800b614:	dc400315 	stw	r17,12(sp)
 800b618:	dfc00b15 	stw	ra,44(sp)
 800b61c:	df000a15 	stw	fp,40(sp)
 800b620:	ddc00915 	stw	r23,36(sp)
 800b624:	dd400715 	stw	r21,28(sp)
 800b628:	dd000615 	stw	r20,24(sp)
 800b62c:	dcc00515 	stw	r19,20(sp)
 800b630:	dc000215 	stw	r16,8(sp)
 800b634:	2825883a 	mov	r18,r5
 800b638:	3023883a 	mov	r17,r6
 800b63c:	202d883a 	mov	r22,r4
 800b640:	2800c926 	beq	r5,zero,800b968 <_realloc_r+0x360>
 800b644:	800e5880 	call	800e588 <__malloc_lock>
 800b648:	943ffe04 	addi	r16,r18,-8
 800b64c:	88c002c4 	addi	r3,r17,11
 800b650:	00800584 	movi	r2,22
 800b654:	82000117 	ldw	r8,4(r16)
 800b658:	10c01b2e 	bgeu	r2,r3,800b6c8 <_realloc_r+0xc0>
 800b65c:	00bffe04 	movi	r2,-8
 800b660:	188e703a 	and	r7,r3,r2
 800b664:	3839883a 	mov	fp,r7
 800b668:	38001a16 	blt	r7,zero,800b6d4 <_realloc_r+0xcc>
 800b66c:	e4401936 	bltu	fp,r17,800b6d4 <_realloc_r+0xcc>
 800b670:	013fff04 	movi	r4,-4
 800b674:	4126703a 	and	r19,r8,r4
 800b678:	99c02616 	blt	r19,r7,800b714 <_realloc_r+0x10c>
 800b67c:	802b883a 	mov	r21,r16
 800b680:	9829883a 	mov	r20,r19
 800b684:	84000204 	addi	r16,r16,8
 800b688:	a80f883a 	mov	r7,r21
 800b68c:	a70dc83a 	sub	r6,r20,fp
 800b690:	008003c4 	movi	r2,15
 800b694:	1180c136 	bltu	r2,r6,800b99c <_realloc_r+0x394>
 800b698:	38800117 	ldw	r2,4(r7)
 800b69c:	a549883a 	add	r4,r20,r21
 800b6a0:	1080004c 	andi	r2,r2,1
 800b6a4:	a084b03a 	or	r2,r20,r2
 800b6a8:	38800115 	stw	r2,4(r7)
 800b6ac:	20c00117 	ldw	r3,4(r4)
 800b6b0:	18c00054 	ori	r3,r3,1
 800b6b4:	20c00115 	stw	r3,4(r4)
 800b6b8:	b009883a 	mov	r4,r22
 800b6bc:	800e5a80 	call	800e5a8 <__malloc_unlock>
 800b6c0:	8023883a 	mov	r17,r16
 800b6c4:	00000606 	br	800b6e0 <_realloc_r+0xd8>
 800b6c8:	01c00404 	movi	r7,16
 800b6cc:	3839883a 	mov	fp,r7
 800b6d0:	e47fe72e 	bgeu	fp,r17,800b670 <_realloc_r+0x68>
 800b6d4:	00800304 	movi	r2,12
 800b6d8:	0023883a 	mov	r17,zero
 800b6dc:	b0800015 	stw	r2,0(r22)
 800b6e0:	8805883a 	mov	r2,r17
 800b6e4:	dfc00b17 	ldw	ra,44(sp)
 800b6e8:	df000a17 	ldw	fp,40(sp)
 800b6ec:	ddc00917 	ldw	r23,36(sp)
 800b6f0:	dd800817 	ldw	r22,32(sp)
 800b6f4:	dd400717 	ldw	r21,28(sp)
 800b6f8:	dd000617 	ldw	r20,24(sp)
 800b6fc:	dcc00517 	ldw	r19,20(sp)
 800b700:	dc800417 	ldw	r18,16(sp)
 800b704:	dc400317 	ldw	r17,12(sp)
 800b708:	dc000217 	ldw	r16,8(sp)
 800b70c:	dec00c04 	addi	sp,sp,48
 800b710:	f800283a 	ret
 800b714:	008200b4 	movhi	r2,2050
 800b718:	10a2ff04 	addi	r2,r2,-29700
 800b71c:	12400217 	ldw	r9,8(r2)
 800b720:	84cd883a 	add	r6,r16,r19
 800b724:	802b883a 	mov	r21,r16
 800b728:	3240b926 	beq	r6,r9,800ba10 <_realloc_r+0x408>
 800b72c:	31400117 	ldw	r5,4(r6)
 800b730:	00bfff84 	movi	r2,-2
 800b734:	2884703a 	and	r2,r5,r2
 800b738:	1185883a 	add	r2,r2,r6
 800b73c:	10c00117 	ldw	r3,4(r2)
 800b740:	18c0004c 	andi	r3,r3,1
 800b744:	1807003a 	cmpeq	r3,r3,zero
 800b748:	1800a326 	beq	r3,zero,800b9d8 <_realloc_r+0x3d0>
 800b74c:	2908703a 	and	r4,r5,r4
 800b750:	9929883a 	add	r20,r19,r4
 800b754:	a1c0a30e 	bge	r20,r7,800b9e4 <_realloc_r+0x3dc>
 800b758:	4080004c 	andi	r2,r8,1
 800b75c:	1000551e 	bne	r2,zero,800b8b4 <_realloc_r+0x2ac>
 800b760:	80800017 	ldw	r2,0(r16)
 800b764:	80afc83a 	sub	r23,r16,r2
 800b768:	b8c00117 	ldw	r3,4(r23)
 800b76c:	00bfff04 	movi	r2,-4
 800b770:	1884703a 	and	r2,r3,r2
 800b774:	30002e26 	beq	r6,zero,800b830 <_realloc_r+0x228>
 800b778:	3240b926 	beq	r6,r9,800ba60 <_realloc_r+0x458>
 800b77c:	98a9883a 	add	r20,r19,r2
 800b780:	2509883a 	add	r4,r4,r20
 800b784:	d9000015 	stw	r4,0(sp)
 800b788:	21c02a16 	blt	r4,r7,800b834 <_realloc_r+0x22c>
 800b78c:	30800317 	ldw	r2,12(r6)
 800b790:	30c00217 	ldw	r3,8(r6)
 800b794:	01400904 	movi	r5,36
 800b798:	99bfff04 	addi	r6,r19,-4
 800b79c:	18800315 	stw	r2,12(r3)
 800b7a0:	10c00215 	stw	r3,8(r2)
 800b7a4:	b9000317 	ldw	r4,12(r23)
 800b7a8:	b8800217 	ldw	r2,8(r23)
 800b7ac:	b82b883a 	mov	r21,r23
 800b7b0:	bc000204 	addi	r16,r23,8
 800b7b4:	20800215 	stw	r2,8(r4)
 800b7b8:	11000315 	stw	r4,12(r2)
 800b7bc:	2980e436 	bltu	r5,r6,800bb50 <_realloc_r+0x548>
 800b7c0:	008004c4 	movi	r2,19
 800b7c4:	9009883a 	mov	r4,r18
 800b7c8:	8011883a 	mov	r8,r16
 800b7cc:	11800f2e 	bgeu	r2,r6,800b80c <_realloc_r+0x204>
 800b7d0:	90800017 	ldw	r2,0(r18)
 800b7d4:	ba000404 	addi	r8,r23,16
 800b7d8:	91000204 	addi	r4,r18,8
 800b7dc:	b8800215 	stw	r2,8(r23)
 800b7e0:	90c00117 	ldw	r3,4(r18)
 800b7e4:	008006c4 	movi	r2,27
 800b7e8:	b8c00315 	stw	r3,12(r23)
 800b7ec:	1180072e 	bgeu	r2,r6,800b80c <_realloc_r+0x204>
 800b7f0:	90c00217 	ldw	r3,8(r18)
 800b7f4:	ba000604 	addi	r8,r23,24
 800b7f8:	91000404 	addi	r4,r18,16
 800b7fc:	b8c00415 	stw	r3,16(r23)
 800b800:	90800317 	ldw	r2,12(r18)
 800b804:	b8800515 	stw	r2,20(r23)
 800b808:	3140e726 	beq	r6,r5,800bba8 <_realloc_r+0x5a0>
 800b80c:	20800017 	ldw	r2,0(r4)
 800b810:	dd000017 	ldw	r20,0(sp)
 800b814:	b80f883a 	mov	r7,r23
 800b818:	40800015 	stw	r2,0(r8)
 800b81c:	20c00117 	ldw	r3,4(r4)
 800b820:	40c00115 	stw	r3,4(r8)
 800b824:	20800217 	ldw	r2,8(r4)
 800b828:	40800215 	stw	r2,8(r8)
 800b82c:	003f9706 	br	800b68c <_realloc_r+0x84>
 800b830:	98a9883a 	add	r20,r19,r2
 800b834:	a1c01f16 	blt	r20,r7,800b8b4 <_realloc_r+0x2ac>
 800b838:	b8c00317 	ldw	r3,12(r23)
 800b83c:	b8800217 	ldw	r2,8(r23)
 800b840:	99bfff04 	addi	r6,r19,-4
 800b844:	01400904 	movi	r5,36
 800b848:	b82b883a 	mov	r21,r23
 800b84c:	18800215 	stw	r2,8(r3)
 800b850:	10c00315 	stw	r3,12(r2)
 800b854:	bc000204 	addi	r16,r23,8
 800b858:	2980c336 	bltu	r5,r6,800bb68 <_realloc_r+0x560>
 800b85c:	008004c4 	movi	r2,19
 800b860:	9009883a 	mov	r4,r18
 800b864:	8011883a 	mov	r8,r16
 800b868:	11800f2e 	bgeu	r2,r6,800b8a8 <_realloc_r+0x2a0>
 800b86c:	90800017 	ldw	r2,0(r18)
 800b870:	ba000404 	addi	r8,r23,16
 800b874:	91000204 	addi	r4,r18,8
 800b878:	b8800215 	stw	r2,8(r23)
 800b87c:	90c00117 	ldw	r3,4(r18)
 800b880:	008006c4 	movi	r2,27
 800b884:	b8c00315 	stw	r3,12(r23)
 800b888:	1180072e 	bgeu	r2,r6,800b8a8 <_realloc_r+0x2a0>
 800b88c:	90c00217 	ldw	r3,8(r18)
 800b890:	ba000604 	addi	r8,r23,24
 800b894:	91000404 	addi	r4,r18,16
 800b898:	b8c00415 	stw	r3,16(r23)
 800b89c:	90800317 	ldw	r2,12(r18)
 800b8a0:	b8800515 	stw	r2,20(r23)
 800b8a4:	3140c726 	beq	r6,r5,800bbc4 <_realloc_r+0x5bc>
 800b8a8:	20800017 	ldw	r2,0(r4)
 800b8ac:	b80f883a 	mov	r7,r23
 800b8b0:	003fd906 	br	800b818 <_realloc_r+0x210>
 800b8b4:	880b883a 	mov	r5,r17
 800b8b8:	b009883a 	mov	r4,r22
 800b8bc:	80045080 	call	8004508 <_malloc_r>
 800b8c0:	1023883a 	mov	r17,r2
 800b8c4:	10002526 	beq	r2,zero,800b95c <_realloc_r+0x354>
 800b8c8:	80800117 	ldw	r2,4(r16)
 800b8cc:	00ffff84 	movi	r3,-2
 800b8d0:	893ffe04 	addi	r4,r17,-8
 800b8d4:	10c4703a 	and	r2,r2,r3
 800b8d8:	8085883a 	add	r2,r16,r2
 800b8dc:	20809526 	beq	r4,r2,800bb34 <_realloc_r+0x52c>
 800b8e0:	99bfff04 	addi	r6,r19,-4
 800b8e4:	01c00904 	movi	r7,36
 800b8e8:	39804536 	bltu	r7,r6,800ba00 <_realloc_r+0x3f8>
 800b8ec:	008004c4 	movi	r2,19
 800b8f0:	9009883a 	mov	r4,r18
 800b8f4:	880b883a 	mov	r5,r17
 800b8f8:	11800f2e 	bgeu	r2,r6,800b938 <_realloc_r+0x330>
 800b8fc:	90800017 	ldw	r2,0(r18)
 800b900:	89400204 	addi	r5,r17,8
 800b904:	91000204 	addi	r4,r18,8
 800b908:	88800015 	stw	r2,0(r17)
 800b90c:	90c00117 	ldw	r3,4(r18)
 800b910:	008006c4 	movi	r2,27
 800b914:	88c00115 	stw	r3,4(r17)
 800b918:	1180072e 	bgeu	r2,r6,800b938 <_realloc_r+0x330>
 800b91c:	90c00217 	ldw	r3,8(r18)
 800b920:	89400404 	addi	r5,r17,16
 800b924:	91000404 	addi	r4,r18,16
 800b928:	88c00215 	stw	r3,8(r17)
 800b92c:	90800317 	ldw	r2,12(r18)
 800b930:	88800315 	stw	r2,12(r17)
 800b934:	31c09126 	beq	r6,r7,800bb7c <_realloc_r+0x574>
 800b938:	20800017 	ldw	r2,0(r4)
 800b93c:	28800015 	stw	r2,0(r5)
 800b940:	20c00117 	ldw	r3,4(r4)
 800b944:	28c00115 	stw	r3,4(r5)
 800b948:	20800217 	ldw	r2,8(r4)
 800b94c:	28800215 	stw	r2,8(r5)
 800b950:	900b883a 	mov	r5,r18
 800b954:	b009883a 	mov	r4,r22
 800b958:	8003b640 	call	8003b64 <_free_r>
 800b95c:	b009883a 	mov	r4,r22
 800b960:	800e5a80 	call	800e5a8 <__malloc_unlock>
 800b964:	003f5e06 	br	800b6e0 <_realloc_r+0xd8>
 800b968:	300b883a 	mov	r5,r6
 800b96c:	dfc00b17 	ldw	ra,44(sp)
 800b970:	df000a17 	ldw	fp,40(sp)
 800b974:	ddc00917 	ldw	r23,36(sp)
 800b978:	dd800817 	ldw	r22,32(sp)
 800b97c:	dd400717 	ldw	r21,28(sp)
 800b980:	dd000617 	ldw	r20,24(sp)
 800b984:	dcc00517 	ldw	r19,20(sp)
 800b988:	dc800417 	ldw	r18,16(sp)
 800b98c:	dc400317 	ldw	r17,12(sp)
 800b990:	dc000217 	ldw	r16,8(sp)
 800b994:	dec00c04 	addi	sp,sp,48
 800b998:	80045081 	jmpi	8004508 <_malloc_r>
 800b99c:	38800117 	ldw	r2,4(r7)
 800b9a0:	e54b883a 	add	r5,fp,r21
 800b9a4:	31000054 	ori	r4,r6,1
 800b9a8:	1080004c 	andi	r2,r2,1
 800b9ac:	1704b03a 	or	r2,r2,fp
 800b9b0:	38800115 	stw	r2,4(r7)
 800b9b4:	29000115 	stw	r4,4(r5)
 800b9b8:	2987883a 	add	r3,r5,r6
 800b9bc:	18800117 	ldw	r2,4(r3)
 800b9c0:	29400204 	addi	r5,r5,8
 800b9c4:	b009883a 	mov	r4,r22
 800b9c8:	10800054 	ori	r2,r2,1
 800b9cc:	18800115 	stw	r2,4(r3)
 800b9d0:	8003b640 	call	8003b64 <_free_r>
 800b9d4:	003f3806 	br	800b6b8 <_realloc_r+0xb0>
 800b9d8:	000d883a 	mov	r6,zero
 800b9dc:	0009883a 	mov	r4,zero
 800b9e0:	003f5d06 	br	800b758 <_realloc_r+0x150>
 800b9e4:	30c00217 	ldw	r3,8(r6)
 800b9e8:	30800317 	ldw	r2,12(r6)
 800b9ec:	800f883a 	mov	r7,r16
 800b9f0:	84000204 	addi	r16,r16,8
 800b9f4:	10c00215 	stw	r3,8(r2)
 800b9f8:	18800315 	stw	r2,12(r3)
 800b9fc:	003f2306 	br	800b68c <_realloc_r+0x84>
 800ba00:	8809883a 	mov	r4,r17
 800ba04:	900b883a 	mov	r5,r18
 800ba08:	800a2380 	call	800a238 <memmove>
 800ba0c:	003fd006 	br	800b950 <_realloc_r+0x348>
 800ba10:	30800117 	ldw	r2,4(r6)
 800ba14:	e0c00404 	addi	r3,fp,16
 800ba18:	1108703a 	and	r4,r2,r4
 800ba1c:	9905883a 	add	r2,r19,r4
 800ba20:	10ff4d16 	blt	r2,r3,800b758 <_realloc_r+0x150>
 800ba24:	1705c83a 	sub	r2,r2,fp
 800ba28:	870b883a 	add	r5,r16,fp
 800ba2c:	10800054 	ori	r2,r2,1
 800ba30:	28800115 	stw	r2,4(r5)
 800ba34:	80c00117 	ldw	r3,4(r16)
 800ba38:	008200b4 	movhi	r2,2050
 800ba3c:	10a2ff04 	addi	r2,r2,-29700
 800ba40:	b009883a 	mov	r4,r22
 800ba44:	18c0004c 	andi	r3,r3,1
 800ba48:	e0c6b03a 	or	r3,fp,r3
 800ba4c:	11400215 	stw	r5,8(r2)
 800ba50:	80c00115 	stw	r3,4(r16)
 800ba54:	800e5a80 	call	800e5a8 <__malloc_unlock>
 800ba58:	84400204 	addi	r17,r16,8
 800ba5c:	003f2006 	br	800b6e0 <_realloc_r+0xd8>
 800ba60:	98a9883a 	add	r20,r19,r2
 800ba64:	2509883a 	add	r4,r4,r20
 800ba68:	e0800404 	addi	r2,fp,16
 800ba6c:	d9000115 	stw	r4,4(sp)
 800ba70:	20bf7016 	blt	r4,r2,800b834 <_realloc_r+0x22c>
 800ba74:	b8c00317 	ldw	r3,12(r23)
 800ba78:	b8800217 	ldw	r2,8(r23)
 800ba7c:	99bfff04 	addi	r6,r19,-4
 800ba80:	01400904 	movi	r5,36
 800ba84:	18800215 	stw	r2,8(r3)
 800ba88:	10c00315 	stw	r3,12(r2)
 800ba8c:	bc400204 	addi	r17,r23,8
 800ba90:	29804136 	bltu	r5,r6,800bb98 <_realloc_r+0x590>
 800ba94:	008004c4 	movi	r2,19
 800ba98:	9009883a 	mov	r4,r18
 800ba9c:	880f883a 	mov	r7,r17
 800baa0:	11800f2e 	bgeu	r2,r6,800bae0 <_realloc_r+0x4d8>
 800baa4:	90800017 	ldw	r2,0(r18)
 800baa8:	b9c00404 	addi	r7,r23,16
 800baac:	91000204 	addi	r4,r18,8
 800bab0:	b8800215 	stw	r2,8(r23)
 800bab4:	90c00117 	ldw	r3,4(r18)
 800bab8:	008006c4 	movi	r2,27
 800babc:	b8c00315 	stw	r3,12(r23)
 800bac0:	1180072e 	bgeu	r2,r6,800bae0 <_realloc_r+0x4d8>
 800bac4:	90c00217 	ldw	r3,8(r18)
 800bac8:	b9c00604 	addi	r7,r23,24
 800bacc:	91000404 	addi	r4,r18,16
 800bad0:	b8c00415 	stw	r3,16(r23)
 800bad4:	90800317 	ldw	r2,12(r18)
 800bad8:	b8800515 	stw	r2,20(r23)
 800badc:	31404026 	beq	r6,r5,800bbe0 <_realloc_r+0x5d8>
 800bae0:	20800017 	ldw	r2,0(r4)
 800bae4:	38800015 	stw	r2,0(r7)
 800bae8:	20c00117 	ldw	r3,4(r4)
 800baec:	38c00115 	stw	r3,4(r7)
 800baf0:	20800217 	ldw	r2,8(r4)
 800baf4:	38800215 	stw	r2,8(r7)
 800baf8:	d8c00117 	ldw	r3,4(sp)
 800bafc:	bf0b883a 	add	r5,r23,fp
 800bb00:	b009883a 	mov	r4,r22
 800bb04:	1f05c83a 	sub	r2,r3,fp
 800bb08:	10800054 	ori	r2,r2,1
 800bb0c:	28800115 	stw	r2,4(r5)
 800bb10:	b8c00117 	ldw	r3,4(r23)
 800bb14:	008200b4 	movhi	r2,2050
 800bb18:	10a2ff04 	addi	r2,r2,-29700
 800bb1c:	11400215 	stw	r5,8(r2)
 800bb20:	18c0004c 	andi	r3,r3,1
 800bb24:	e0c6b03a 	or	r3,fp,r3
 800bb28:	b8c00115 	stw	r3,4(r23)
 800bb2c:	800e5a80 	call	800e5a8 <__malloc_unlock>
 800bb30:	003eeb06 	br	800b6e0 <_realloc_r+0xd8>
 800bb34:	20800117 	ldw	r2,4(r4)
 800bb38:	00ffff04 	movi	r3,-4
 800bb3c:	800f883a 	mov	r7,r16
 800bb40:	10c4703a 	and	r2,r2,r3
 800bb44:	98a9883a 	add	r20,r19,r2
 800bb48:	84000204 	addi	r16,r16,8
 800bb4c:	003ecf06 	br	800b68c <_realloc_r+0x84>
 800bb50:	900b883a 	mov	r5,r18
 800bb54:	8009883a 	mov	r4,r16
 800bb58:	800a2380 	call	800a238 <memmove>
 800bb5c:	dd000017 	ldw	r20,0(sp)
 800bb60:	b80f883a 	mov	r7,r23
 800bb64:	003ec906 	br	800b68c <_realloc_r+0x84>
 800bb68:	900b883a 	mov	r5,r18
 800bb6c:	8009883a 	mov	r4,r16
 800bb70:	800a2380 	call	800a238 <memmove>
 800bb74:	b80f883a 	mov	r7,r23
 800bb78:	003ec406 	br	800b68c <_realloc_r+0x84>
 800bb7c:	90c00417 	ldw	r3,16(r18)
 800bb80:	89400604 	addi	r5,r17,24
 800bb84:	91000604 	addi	r4,r18,24
 800bb88:	88c00415 	stw	r3,16(r17)
 800bb8c:	90800517 	ldw	r2,20(r18)
 800bb90:	88800515 	stw	r2,20(r17)
 800bb94:	003f6806 	br	800b938 <_realloc_r+0x330>
 800bb98:	900b883a 	mov	r5,r18
 800bb9c:	8809883a 	mov	r4,r17
 800bba0:	800a2380 	call	800a238 <memmove>
 800bba4:	003fd406 	br	800baf8 <_realloc_r+0x4f0>
 800bba8:	90c00417 	ldw	r3,16(r18)
 800bbac:	91000604 	addi	r4,r18,24
 800bbb0:	ba000804 	addi	r8,r23,32
 800bbb4:	b8c00615 	stw	r3,24(r23)
 800bbb8:	90800517 	ldw	r2,20(r18)
 800bbbc:	b8800715 	stw	r2,28(r23)
 800bbc0:	003f1206 	br	800b80c <_realloc_r+0x204>
 800bbc4:	90c00417 	ldw	r3,16(r18)
 800bbc8:	91000604 	addi	r4,r18,24
 800bbcc:	ba000804 	addi	r8,r23,32
 800bbd0:	b8c00615 	stw	r3,24(r23)
 800bbd4:	90800517 	ldw	r2,20(r18)
 800bbd8:	b8800715 	stw	r2,28(r23)
 800bbdc:	003f3206 	br	800b8a8 <_realloc_r+0x2a0>
 800bbe0:	90c00417 	ldw	r3,16(r18)
 800bbe4:	91000604 	addi	r4,r18,24
 800bbe8:	b9c00804 	addi	r7,r23,32
 800bbec:	b8c00615 	stw	r3,24(r23)
 800bbf0:	90800517 	ldw	r2,20(r18)
 800bbf4:	b8800715 	stw	r2,28(r23)
 800bbf8:	003fb906 	br	800bae0 <_realloc_r+0x4d8>

0800bbfc <__isinfd>:
 800bbfc:	200d883a 	mov	r6,r4
 800bc00:	0109c83a 	sub	r4,zero,r4
 800bc04:	2188b03a 	or	r4,r4,r6
 800bc08:	2008d7fa 	srli	r4,r4,31
 800bc0c:	00a00034 	movhi	r2,32768
 800bc10:	10bfffc4 	addi	r2,r2,-1
 800bc14:	1144703a 	and	r2,r2,r5
 800bc18:	2088b03a 	or	r4,r4,r2
 800bc1c:	009ffc34 	movhi	r2,32752
 800bc20:	1105c83a 	sub	r2,r2,r4
 800bc24:	0087c83a 	sub	r3,zero,r2
 800bc28:	10c4b03a 	or	r2,r2,r3
 800bc2c:	1004d7fa 	srli	r2,r2,31
 800bc30:	00c00044 	movi	r3,1
 800bc34:	1885c83a 	sub	r2,r3,r2
 800bc38:	f800283a 	ret

0800bc3c <__isnand>:
 800bc3c:	200d883a 	mov	r6,r4
 800bc40:	0109c83a 	sub	r4,zero,r4
 800bc44:	2188b03a 	or	r4,r4,r6
 800bc48:	2008d7fa 	srli	r4,r4,31
 800bc4c:	00a00034 	movhi	r2,32768
 800bc50:	10bfffc4 	addi	r2,r2,-1
 800bc54:	1144703a 	and	r2,r2,r5
 800bc58:	2088b03a 	or	r4,r4,r2
 800bc5c:	009ffc34 	movhi	r2,32752
 800bc60:	1105c83a 	sub	r2,r2,r4
 800bc64:	1004d7fa 	srli	r2,r2,31
 800bc68:	f800283a 	ret

0800bc6c <strcmp>:
 800bc6c:	2144b03a 	or	r2,r4,r5
 800bc70:	108000cc 	andi	r2,r2,3
 800bc74:	10001d1e 	bne	r2,zero,800bcec <strcmp+0x80>
 800bc78:	200f883a 	mov	r7,r4
 800bc7c:	28800017 	ldw	r2,0(r5)
 800bc80:	21000017 	ldw	r4,0(r4)
 800bc84:	280d883a 	mov	r6,r5
 800bc88:	2080161e 	bne	r4,r2,800bce4 <strcmp+0x78>
 800bc8c:	023fbff4 	movhi	r8,65279
 800bc90:	423fbfc4 	addi	r8,r8,-257
 800bc94:	2207883a 	add	r3,r4,r8
 800bc98:	01602074 	movhi	r5,32897
 800bc9c:	29602004 	addi	r5,r5,-32640
 800bca0:	1946703a 	and	r3,r3,r5
 800bca4:	0104303a 	nor	r2,zero,r4
 800bca8:	10c4703a 	and	r2,r2,r3
 800bcac:	10001c1e 	bne	r2,zero,800bd20 <strcmp+0xb4>
 800bcb0:	4013883a 	mov	r9,r8
 800bcb4:	2811883a 	mov	r8,r5
 800bcb8:	00000106 	br	800bcc0 <strcmp+0x54>
 800bcbc:	1800181e 	bne	r3,zero,800bd20 <strcmp+0xb4>
 800bcc0:	39c00104 	addi	r7,r7,4
 800bcc4:	39000017 	ldw	r4,0(r7)
 800bcc8:	31800104 	addi	r6,r6,4
 800bccc:	31400017 	ldw	r5,0(r6)
 800bcd0:	2245883a 	add	r2,r4,r9
 800bcd4:	1204703a 	and	r2,r2,r8
 800bcd8:	0106303a 	nor	r3,zero,r4
 800bcdc:	1886703a 	and	r3,r3,r2
 800bce0:	217ff626 	beq	r4,r5,800bcbc <strcmp+0x50>
 800bce4:	3809883a 	mov	r4,r7
 800bce8:	300b883a 	mov	r5,r6
 800bcec:	20c00007 	ldb	r3,0(r4)
 800bcf0:	1800051e 	bne	r3,zero,800bd08 <strcmp+0x9c>
 800bcf4:	00000606 	br	800bd10 <strcmp+0xa4>
 800bcf8:	21000044 	addi	r4,r4,1
 800bcfc:	20c00007 	ldb	r3,0(r4)
 800bd00:	29400044 	addi	r5,r5,1
 800bd04:	18000226 	beq	r3,zero,800bd10 <strcmp+0xa4>
 800bd08:	28800007 	ldb	r2,0(r5)
 800bd0c:	18bffa26 	beq	r3,r2,800bcf8 <strcmp+0x8c>
 800bd10:	20c00003 	ldbu	r3,0(r4)
 800bd14:	28800003 	ldbu	r2,0(r5)
 800bd18:	1885c83a 	sub	r2,r3,r2
 800bd1c:	f800283a 	ret
 800bd20:	0005883a 	mov	r2,zero
 800bd24:	f800283a 	ret

0800bd28 <__swbuf_r>:
 800bd28:	defffc04 	addi	sp,sp,-16
 800bd2c:	dc400215 	stw	r17,8(sp)
 800bd30:	dc000115 	stw	r16,4(sp)
 800bd34:	dfc00315 	stw	ra,12(sp)
 800bd38:	2023883a 	mov	r17,r4
 800bd3c:	2821883a 	mov	r16,r5
 800bd40:	20000226 	beq	r4,zero,800bd4c <__swbuf_r+0x24>
 800bd44:	20800e17 	ldw	r2,56(r4)
 800bd48:	10002f26 	beq	r2,zero,800be08 <__swbuf_r+0xe0>
 800bd4c:	3080030b 	ldhu	r2,12(r6)
 800bd50:	30c00617 	ldw	r3,24(r6)
 800bd54:	1080020c 	andi	r2,r2,8
 800bd58:	30c00215 	stw	r3,8(r6)
 800bd5c:	10002226 	beq	r2,zero,800bde8 <__swbuf_r+0xc0>
 800bd60:	30c00417 	ldw	r3,16(r6)
 800bd64:	18002026 	beq	r3,zero,800bde8 <__swbuf_r+0xc0>
 800bd68:	31000017 	ldw	r4,0(r6)
 800bd6c:	30800517 	ldw	r2,20(r6)
 800bd70:	20c7c83a 	sub	r3,r4,r3
 800bd74:	18802f0e 	bge	r3,r2,800be34 <__swbuf_r+0x10c>
 800bd78:	19400044 	addi	r5,r3,1
 800bd7c:	30800217 	ldw	r2,8(r6)
 800bd80:	84003fcc 	andi	r16,r16,255
 800bd84:	20c00044 	addi	r3,r4,1
 800bd88:	10bfffc4 	addi	r2,r2,-1
 800bd8c:	30800215 	stw	r2,8(r6)
 800bd90:	24000005 	stb	r16,0(r4)
 800bd94:	30800517 	ldw	r2,20(r6)
 800bd98:	30c00015 	stw	r3,0(r6)
 800bd9c:	11400c26 	beq	r2,r5,800bdd0 <__swbuf_r+0xa8>
 800bda0:	3080030b 	ldhu	r2,12(r6)
 800bda4:	1080004c 	andi	r2,r2,1
 800bda8:	1005003a 	cmpeq	r2,r2,zero
 800bdac:	10000626 	beq	r2,zero,800bdc8 <__swbuf_r+0xa0>
 800bdb0:	8005883a 	mov	r2,r16
 800bdb4:	dfc00317 	ldw	ra,12(sp)
 800bdb8:	dc400217 	ldw	r17,8(sp)
 800bdbc:	dc000117 	ldw	r16,4(sp)
 800bdc0:	dec00404 	addi	sp,sp,16
 800bdc4:	f800283a 	ret
 800bdc8:	00800284 	movi	r2,10
 800bdcc:	80bff81e 	bne	r16,r2,800bdb0 <__swbuf_r+0x88>
 800bdd0:	8809883a 	mov	r4,r17
 800bdd4:	300b883a 	mov	r5,r6
 800bdd8:	80092b00 	call	80092b0 <_fflush_r>
 800bddc:	103ff426 	beq	r2,zero,800bdb0 <__swbuf_r+0x88>
 800bde0:	043fffc4 	movi	r16,-1
 800bde4:	003ff206 	br	800bdb0 <__swbuf_r+0x88>
 800bde8:	300b883a 	mov	r5,r6
 800bdec:	8809883a 	mov	r4,r17
 800bdf0:	d9800015 	stw	r6,0(sp)
 800bdf4:	80079380 	call	8007938 <__swsetup_r>
 800bdf8:	d9800017 	ldw	r6,0(sp)
 800bdfc:	1000061e 	bne	r2,zero,800be18 <__swbuf_r+0xf0>
 800be00:	30c00417 	ldw	r3,16(r6)
 800be04:	003fd806 	br	800bd68 <__swbuf_r+0x40>
 800be08:	d9800015 	stw	r6,0(sp)
 800be0c:	80095480 	call	8009548 <__sinit>
 800be10:	d9800017 	ldw	r6,0(sp)
 800be14:	003fcd06 	br	800bd4c <__swbuf_r+0x24>
 800be18:	3080030b 	ldhu	r2,12(r6)
 800be1c:	00c00244 	movi	r3,9
 800be20:	043fffc4 	movi	r16,-1
 800be24:	10801014 	ori	r2,r2,64
 800be28:	3080030d 	sth	r2,12(r6)
 800be2c:	88c00015 	stw	r3,0(r17)
 800be30:	003fdf06 	br	800bdb0 <__swbuf_r+0x88>
 800be34:	300b883a 	mov	r5,r6
 800be38:	8809883a 	mov	r4,r17
 800be3c:	d9800015 	stw	r6,0(sp)
 800be40:	80092b00 	call	80092b0 <_fflush_r>
 800be44:	d9800017 	ldw	r6,0(sp)
 800be48:	103fe51e 	bne	r2,zero,800bde0 <__swbuf_r+0xb8>
 800be4c:	31000017 	ldw	r4,0(r6)
 800be50:	01400044 	movi	r5,1
 800be54:	003fc906 	br	800bd7c <__swbuf_r+0x54>

0800be58 <__swbuf>:
 800be58:	018200b4 	movhi	r6,2050
 800be5c:	31a95904 	addi	r6,r6,-23196
 800be60:	2007883a 	mov	r3,r4
 800be64:	31000017 	ldw	r4,0(r6)
 800be68:	280d883a 	mov	r6,r5
 800be6c:	180b883a 	mov	r5,r3
 800be70:	800bd281 	jmpi	800bd28 <__swbuf_r>

0800be74 <_calloc_r>:
 800be74:	298b383a 	mul	r5,r5,r6
 800be78:	defffe04 	addi	sp,sp,-8
 800be7c:	dc000015 	stw	r16,0(sp)
 800be80:	dfc00115 	stw	ra,4(sp)
 800be84:	80045080 	call	8004508 <_malloc_r>
 800be88:	1021883a 	mov	r16,r2
 800be8c:	01c00904 	movi	r7,36
 800be90:	10000d26 	beq	r2,zero,800bec8 <_calloc_r+0x54>
 800be94:	10ffff17 	ldw	r3,-4(r2)
 800be98:	1009883a 	mov	r4,r2
 800be9c:	00bfff04 	movi	r2,-4
 800bea0:	1886703a 	and	r3,r3,r2
 800bea4:	1887883a 	add	r3,r3,r2
 800bea8:	180d883a 	mov	r6,r3
 800beac:	000b883a 	mov	r5,zero
 800beb0:	38c01736 	bltu	r7,r3,800bf10 <_calloc_r+0x9c>
 800beb4:	008004c4 	movi	r2,19
 800beb8:	10c00836 	bltu	r2,r3,800bedc <_calloc_r+0x68>
 800bebc:	20000215 	stw	zero,8(r4)
 800bec0:	20000015 	stw	zero,0(r4)
 800bec4:	20000115 	stw	zero,4(r4)
 800bec8:	8005883a 	mov	r2,r16
 800becc:	dfc00117 	ldw	ra,4(sp)
 800bed0:	dc000017 	ldw	r16,0(sp)
 800bed4:	dec00204 	addi	sp,sp,8
 800bed8:	f800283a 	ret
 800bedc:	008006c4 	movi	r2,27
 800bee0:	80000015 	stw	zero,0(r16)
 800bee4:	80000115 	stw	zero,4(r16)
 800bee8:	81000204 	addi	r4,r16,8
 800beec:	10fff32e 	bgeu	r2,r3,800bebc <_calloc_r+0x48>
 800bef0:	80000215 	stw	zero,8(r16)
 800bef4:	80000315 	stw	zero,12(r16)
 800bef8:	81000404 	addi	r4,r16,16
 800befc:	19ffef1e 	bne	r3,r7,800bebc <_calloc_r+0x48>
 800bf00:	81000604 	addi	r4,r16,24
 800bf04:	80000415 	stw	zero,16(r16)
 800bf08:	80000515 	stw	zero,20(r16)
 800bf0c:	003feb06 	br	800bebc <_calloc_r+0x48>
 800bf10:	800a3180 	call	800a318 <memset>
 800bf14:	8005883a 	mov	r2,r16
 800bf18:	dfc00117 	ldw	ra,4(sp)
 800bf1c:	dc000017 	ldw	r16,0(sp)
 800bf20:	dec00204 	addi	sp,sp,8
 800bf24:	f800283a 	ret

0800bf28 <_fclose_r>:
 800bf28:	defffc04 	addi	sp,sp,-16
 800bf2c:	dc400115 	stw	r17,4(sp)
 800bf30:	dc000015 	stw	r16,0(sp)
 800bf34:	dfc00315 	stw	ra,12(sp)
 800bf38:	dc800215 	stw	r18,8(sp)
 800bf3c:	2821883a 	mov	r16,r5
 800bf40:	2023883a 	mov	r17,r4
 800bf44:	28002926 	beq	r5,zero,800bfec <_fclose_r+0xc4>
 800bf48:	80095380 	call	8009538 <__sfp_lock_acquire>
 800bf4c:	88000226 	beq	r17,zero,800bf58 <_fclose_r+0x30>
 800bf50:	88800e17 	ldw	r2,56(r17)
 800bf54:	10002d26 	beq	r2,zero,800c00c <_fclose_r+0xe4>
 800bf58:	8080030f 	ldh	r2,12(r16)
 800bf5c:	10002226 	beq	r2,zero,800bfe8 <_fclose_r+0xc0>
 800bf60:	8809883a 	mov	r4,r17
 800bf64:	800b883a 	mov	r5,r16
 800bf68:	80092b00 	call	80092b0 <_fflush_r>
 800bf6c:	1025883a 	mov	r18,r2
 800bf70:	80800b17 	ldw	r2,44(r16)
 800bf74:	10000426 	beq	r2,zero,800bf88 <_fclose_r+0x60>
 800bf78:	81400717 	ldw	r5,28(r16)
 800bf7c:	8809883a 	mov	r4,r17
 800bf80:	103ee83a 	callr	r2
 800bf84:	10002a16 	blt	r2,zero,800c030 <_fclose_r+0x108>
 800bf88:	8080030b 	ldhu	r2,12(r16)
 800bf8c:	1080200c 	andi	r2,r2,128
 800bf90:	1000231e 	bne	r2,zero,800c020 <_fclose_r+0xf8>
 800bf94:	81400c17 	ldw	r5,48(r16)
 800bf98:	28000526 	beq	r5,zero,800bfb0 <_fclose_r+0x88>
 800bf9c:	80801004 	addi	r2,r16,64
 800bfa0:	28800226 	beq	r5,r2,800bfac <_fclose_r+0x84>
 800bfa4:	8809883a 	mov	r4,r17
 800bfa8:	8003b640 	call	8003b64 <_free_r>
 800bfac:	80000c15 	stw	zero,48(r16)
 800bfb0:	81401117 	ldw	r5,68(r16)
 800bfb4:	28000326 	beq	r5,zero,800bfc4 <_fclose_r+0x9c>
 800bfb8:	8809883a 	mov	r4,r17
 800bfbc:	8003b640 	call	8003b64 <_free_r>
 800bfc0:	80001115 	stw	zero,68(r16)
 800bfc4:	8000030d 	sth	zero,12(r16)
 800bfc8:	800953c0 	call	800953c <__sfp_lock_release>
 800bfcc:	9005883a 	mov	r2,r18
 800bfd0:	dfc00317 	ldw	ra,12(sp)
 800bfd4:	dc800217 	ldw	r18,8(sp)
 800bfd8:	dc400117 	ldw	r17,4(sp)
 800bfdc:	dc000017 	ldw	r16,0(sp)
 800bfe0:	dec00404 	addi	sp,sp,16
 800bfe4:	f800283a 	ret
 800bfe8:	800953c0 	call	800953c <__sfp_lock_release>
 800bfec:	0025883a 	mov	r18,zero
 800bff0:	9005883a 	mov	r2,r18
 800bff4:	dfc00317 	ldw	ra,12(sp)
 800bff8:	dc800217 	ldw	r18,8(sp)
 800bffc:	dc400117 	ldw	r17,4(sp)
 800c000:	dc000017 	ldw	r16,0(sp)
 800c004:	dec00404 	addi	sp,sp,16
 800c008:	f800283a 	ret
 800c00c:	8809883a 	mov	r4,r17
 800c010:	80095480 	call	8009548 <__sinit>
 800c014:	8080030f 	ldh	r2,12(r16)
 800c018:	103fd11e 	bne	r2,zero,800bf60 <_fclose_r+0x38>
 800c01c:	003ff206 	br	800bfe8 <_fclose_r+0xc0>
 800c020:	81400417 	ldw	r5,16(r16)
 800c024:	8809883a 	mov	r4,r17
 800c028:	8003b640 	call	8003b64 <_free_r>
 800c02c:	003fd906 	br	800bf94 <_fclose_r+0x6c>
 800c030:	04bfffc4 	movi	r18,-1
 800c034:	003fd406 	br	800bf88 <_fclose_r+0x60>

0800c038 <fclose>:
 800c038:	008200b4 	movhi	r2,2050
 800c03c:	10a95904 	addi	r2,r2,-23196
 800c040:	200b883a 	mov	r5,r4
 800c044:	11000017 	ldw	r4,0(r2)
 800c048:	800bf281 	jmpi	800bf28 <_fclose_r>

0800c04c <__udivdi3>:
 800c04c:	defff004 	addi	sp,sp,-64
 800c050:	2005883a 	mov	r2,r4
 800c054:	3011883a 	mov	r8,r6
 800c058:	df000e15 	stw	fp,56(sp)
 800c05c:	dd000a15 	stw	r20,40(sp)
 800c060:	dc000615 	stw	r16,24(sp)
 800c064:	dfc00f15 	stw	ra,60(sp)
 800c068:	ddc00d15 	stw	r23,52(sp)
 800c06c:	dd800c15 	stw	r22,48(sp)
 800c070:	dd400b15 	stw	r21,44(sp)
 800c074:	dcc00915 	stw	r19,36(sp)
 800c078:	dc800815 	stw	r18,32(sp)
 800c07c:	dc400715 	stw	r17,28(sp)
 800c080:	4021883a 	mov	r16,r8
 800c084:	1039883a 	mov	fp,r2
 800c088:	2829883a 	mov	r20,r5
 800c08c:	38003b1e 	bne	r7,zero,800c17c <__udivdi3+0x130>
 800c090:	2a005c36 	bltu	r5,r8,800c204 <__udivdi3+0x1b8>
 800c094:	4000a626 	beq	r8,zero,800c330 <__udivdi3+0x2e4>
 800c098:	00bfffd4 	movui	r2,65535
 800c09c:	14009e36 	bltu	r2,r16,800c318 <__udivdi3+0x2cc>
 800c0a0:	00803fc4 	movi	r2,255
 800c0a4:	14013d36 	bltu	r2,r16,800c59c <__udivdi3+0x550>
 800c0a8:	000b883a 	mov	r5,zero
 800c0ac:	0005883a 	mov	r2,zero
 800c0b0:	8084d83a 	srl	r2,r16,r2
 800c0b4:	01020074 	movhi	r4,2049
 800c0b8:	211e1804 	addi	r4,r4,30816
 800c0bc:	01800804 	movi	r6,32
 800c0c0:	1105883a 	add	r2,r2,r4
 800c0c4:	10c00003 	ldbu	r3,0(r2)
 800c0c8:	28c7883a 	add	r3,r5,r3
 800c0cc:	30edc83a 	sub	r22,r6,r3
 800c0d0:	b000ee1e 	bne	r22,zero,800c48c <__udivdi3+0x440>
 800c0d4:	802ad43a 	srli	r21,r16,16
 800c0d8:	00800044 	movi	r2,1
 800c0dc:	a423c83a 	sub	r17,r20,r16
 800c0e0:	85ffffcc 	andi	r23,r16,65535
 800c0e4:	d8800315 	stw	r2,12(sp)
 800c0e8:	8809883a 	mov	r4,r17
 800c0ec:	a80b883a 	mov	r5,r21
 800c0f0:	8002fe00 	call	8002fe0 <__udivsi3>
 800c0f4:	8809883a 	mov	r4,r17
 800c0f8:	a80b883a 	mov	r5,r21
 800c0fc:	102d883a 	mov	r22,r2
 800c100:	8002fe80 	call	8002fe8 <__umodsi3>
 800c104:	1004943a 	slli	r2,r2,16
 800c108:	e006d43a 	srli	r3,fp,16
 800c10c:	bda3383a 	mul	r17,r23,r22
 800c110:	10c4b03a 	or	r2,r2,r3
 800c114:	1440042e 	bgeu	r2,r17,800c128 <__udivdi3+0xdc>
 800c118:	1405883a 	add	r2,r2,r16
 800c11c:	b5bfffc4 	addi	r22,r22,-1
 800c120:	14000136 	bltu	r2,r16,800c128 <__udivdi3+0xdc>
 800c124:	14413d36 	bltu	r2,r17,800c61c <__udivdi3+0x5d0>
 800c128:	1463c83a 	sub	r17,r2,r17
 800c12c:	8809883a 	mov	r4,r17
 800c130:	a80b883a 	mov	r5,r21
 800c134:	8002fe00 	call	8002fe0 <__udivsi3>
 800c138:	8809883a 	mov	r4,r17
 800c13c:	a80b883a 	mov	r5,r21
 800c140:	1029883a 	mov	r20,r2
 800c144:	8002fe80 	call	8002fe8 <__umodsi3>
 800c148:	1004943a 	slli	r2,r2,16
 800c14c:	bd09383a 	mul	r4,r23,r20
 800c150:	e0ffffcc 	andi	r3,fp,65535
 800c154:	10c4b03a 	or	r2,r2,r3
 800c158:	1100042e 	bgeu	r2,r4,800c16c <__udivdi3+0x120>
 800c15c:	8085883a 	add	r2,r16,r2
 800c160:	a53fffc4 	addi	r20,r20,-1
 800c164:	14000136 	bltu	r2,r16,800c16c <__udivdi3+0x120>
 800c168:	11012036 	bltu	r2,r4,800c5ec <__udivdi3+0x5a0>
 800c16c:	b004943a 	slli	r2,r22,16
 800c170:	d9000317 	ldw	r4,12(sp)
 800c174:	a084b03a 	or	r2,r20,r2
 800c178:	00001506 	br	800c1d0 <__udivdi3+0x184>
 800c17c:	380d883a 	mov	r6,r7
 800c180:	29c06236 	bltu	r5,r7,800c30c <__udivdi3+0x2c0>
 800c184:	00bfffd4 	movui	r2,65535
 800c188:	11c05a36 	bltu	r2,r7,800c2f4 <__udivdi3+0x2a8>
 800c18c:	00803fc4 	movi	r2,255
 800c190:	11c0fc36 	bltu	r2,r7,800c584 <__udivdi3+0x538>
 800c194:	000b883a 	mov	r5,zero
 800c198:	0005883a 	mov	r2,zero
 800c19c:	3084d83a 	srl	r2,r6,r2
 800c1a0:	01020074 	movhi	r4,2049
 800c1a4:	211e1804 	addi	r4,r4,30816
 800c1a8:	01c00804 	movi	r7,32
 800c1ac:	1105883a 	add	r2,r2,r4
 800c1b0:	10c00003 	ldbu	r3,0(r2)
 800c1b4:	28c7883a 	add	r3,r5,r3
 800c1b8:	38efc83a 	sub	r23,r7,r3
 800c1bc:	b800691e 	bne	r23,zero,800c364 <__udivdi3+0x318>
 800c1c0:	35000136 	bltu	r6,r20,800c1c8 <__udivdi3+0x17c>
 800c1c4:	e4005136 	bltu	fp,r16,800c30c <__udivdi3+0x2c0>
 800c1c8:	00800044 	movi	r2,1
 800c1cc:	0009883a 	mov	r4,zero
 800c1d0:	2007883a 	mov	r3,r4
 800c1d4:	dfc00f17 	ldw	ra,60(sp)
 800c1d8:	df000e17 	ldw	fp,56(sp)
 800c1dc:	ddc00d17 	ldw	r23,52(sp)
 800c1e0:	dd800c17 	ldw	r22,48(sp)
 800c1e4:	dd400b17 	ldw	r21,44(sp)
 800c1e8:	dd000a17 	ldw	r20,40(sp)
 800c1ec:	dcc00917 	ldw	r19,36(sp)
 800c1f0:	dc800817 	ldw	r18,32(sp)
 800c1f4:	dc400717 	ldw	r17,28(sp)
 800c1f8:	dc000617 	ldw	r16,24(sp)
 800c1fc:	dec01004 	addi	sp,sp,64
 800c200:	f800283a 	ret
 800c204:	00bfffd4 	movui	r2,65535
 800c208:	12005036 	bltu	r2,r8,800c34c <__udivdi3+0x300>
 800c20c:	00803fc4 	movi	r2,255
 800c210:	1200e836 	bltu	r2,r8,800c5b4 <__udivdi3+0x568>
 800c214:	000b883a 	mov	r5,zero
 800c218:	0005883a 	mov	r2,zero
 800c21c:	8084d83a 	srl	r2,r16,r2
 800c220:	01020074 	movhi	r4,2049
 800c224:	211e1804 	addi	r4,r4,30816
 800c228:	01800804 	movi	r6,32
 800c22c:	1105883a 	add	r2,r2,r4
 800c230:	10c00003 	ldbu	r3,0(r2)
 800c234:	28c7883a 	add	r3,r5,r3
 800c238:	30cbc83a 	sub	r5,r6,r3
 800c23c:	28000626 	beq	r5,zero,800c258 <__udivdi3+0x20c>
 800c240:	3145c83a 	sub	r2,r6,r5
 800c244:	e084d83a 	srl	r2,fp,r2
 800c248:	a146983a 	sll	r3,r20,r5
 800c24c:	e178983a 	sll	fp,fp,r5
 800c250:	8160983a 	sll	r16,r16,r5
 800c254:	18a8b03a 	or	r20,r3,r2
 800c258:	802ad43a 	srli	r21,r16,16
 800c25c:	a009883a 	mov	r4,r20
 800c260:	85ffffcc 	andi	r23,r16,65535
 800c264:	a80b883a 	mov	r5,r21
 800c268:	8002fe00 	call	8002fe0 <__udivsi3>
 800c26c:	a009883a 	mov	r4,r20
 800c270:	a80b883a 	mov	r5,r21
 800c274:	102d883a 	mov	r22,r2
 800c278:	8002fe80 	call	8002fe8 <__umodsi3>
 800c27c:	1004943a 	slli	r2,r2,16
 800c280:	e006d43a 	srli	r3,fp,16
 800c284:	bda3383a 	mul	r17,r23,r22
 800c288:	10c4b03a 	or	r2,r2,r3
 800c28c:	1440042e 	bgeu	r2,r17,800c2a0 <__udivdi3+0x254>
 800c290:	1405883a 	add	r2,r2,r16
 800c294:	b5bfffc4 	addi	r22,r22,-1
 800c298:	14000136 	bltu	r2,r16,800c2a0 <__udivdi3+0x254>
 800c29c:	1440d536 	bltu	r2,r17,800c5f4 <__udivdi3+0x5a8>
 800c2a0:	1463c83a 	sub	r17,r2,r17
 800c2a4:	8809883a 	mov	r4,r17
 800c2a8:	a80b883a 	mov	r5,r21
 800c2ac:	8002fe00 	call	8002fe0 <__udivsi3>
 800c2b0:	8809883a 	mov	r4,r17
 800c2b4:	a80b883a 	mov	r5,r21
 800c2b8:	1029883a 	mov	r20,r2
 800c2bc:	8002fe80 	call	8002fe8 <__umodsi3>
 800c2c0:	1004943a 	slli	r2,r2,16
 800c2c4:	bd09383a 	mul	r4,r23,r20
 800c2c8:	e0ffffcc 	andi	r3,fp,65535
 800c2cc:	10c4b03a 	or	r2,r2,r3
 800c2d0:	1100042e 	bgeu	r2,r4,800c2e4 <__udivdi3+0x298>
 800c2d4:	8085883a 	add	r2,r16,r2
 800c2d8:	a53fffc4 	addi	r20,r20,-1
 800c2dc:	14000136 	bltu	r2,r16,800c2e4 <__udivdi3+0x298>
 800c2e0:	1100c736 	bltu	r2,r4,800c600 <__udivdi3+0x5b4>
 800c2e4:	b004943a 	slli	r2,r22,16
 800c2e8:	0009883a 	mov	r4,zero
 800c2ec:	a084b03a 	or	r2,r20,r2
 800c2f0:	003fb706 	br	800c1d0 <__udivdi3+0x184>
 800c2f4:	00804034 	movhi	r2,256
 800c2f8:	10bfffc4 	addi	r2,r2,-1
 800c2fc:	11c0a436 	bltu	r2,r7,800c590 <__udivdi3+0x544>
 800c300:	01400404 	movi	r5,16
 800c304:	2805883a 	mov	r2,r5
 800c308:	003fa406 	br	800c19c <__udivdi3+0x150>
 800c30c:	0005883a 	mov	r2,zero
 800c310:	0009883a 	mov	r4,zero
 800c314:	003fae06 	br	800c1d0 <__udivdi3+0x184>
 800c318:	00804034 	movhi	r2,256
 800c31c:	10bfffc4 	addi	r2,r2,-1
 800c320:	1400a136 	bltu	r2,r16,800c5a8 <__udivdi3+0x55c>
 800c324:	01400404 	movi	r5,16
 800c328:	2805883a 	mov	r2,r5
 800c32c:	003f6006 	br	800c0b0 <__udivdi3+0x64>
 800c330:	01000044 	movi	r4,1
 800c334:	000b883a 	mov	r5,zero
 800c338:	8002fe00 	call	8002fe0 <__udivsi3>
 800c33c:	1021883a 	mov	r16,r2
 800c340:	00bfffd4 	movui	r2,65535
 800c344:	143ff436 	bltu	r2,r16,800c318 <__udivdi3+0x2cc>
 800c348:	003f5506 	br	800c0a0 <__udivdi3+0x54>
 800c34c:	00804034 	movhi	r2,256
 800c350:	10bfffc4 	addi	r2,r2,-1
 800c354:	12009a36 	bltu	r2,r8,800c5c0 <__udivdi3+0x574>
 800c358:	01400404 	movi	r5,16
 800c35c:	2805883a 	mov	r2,r5
 800c360:	003fae06 	br	800c21c <__udivdi3+0x1d0>
 800c364:	3dc5c83a 	sub	r2,r7,r23
 800c368:	35c8983a 	sll	r4,r6,r23
 800c36c:	8086d83a 	srl	r3,r16,r2
 800c370:	a0a2d83a 	srl	r17,r20,r2
 800c374:	e084d83a 	srl	r2,fp,r2
 800c378:	20eab03a 	or	r21,r4,r3
 800c37c:	a82cd43a 	srli	r22,r21,16
 800c380:	a5c6983a 	sll	r3,r20,r23
 800c384:	8809883a 	mov	r4,r17
 800c388:	b00b883a 	mov	r5,r22
 800c38c:	1886b03a 	or	r3,r3,r2
 800c390:	d8c00215 	stw	r3,8(sp)
 800c394:	8002fe00 	call	8002fe0 <__udivsi3>
 800c398:	8809883a 	mov	r4,r17
 800c39c:	b00b883a 	mov	r5,r22
 800c3a0:	1029883a 	mov	r20,r2
 800c3a4:	8002fe80 	call	8002fe8 <__umodsi3>
 800c3a8:	a8ffffcc 	andi	r3,r21,65535
 800c3ac:	d8c00515 	stw	r3,20(sp)
 800c3b0:	d9000217 	ldw	r4,8(sp)
 800c3b4:	d9400517 	ldw	r5,20(sp)
 800c3b8:	1004943a 	slli	r2,r2,16
 800c3bc:	2006d43a 	srli	r3,r4,16
 800c3c0:	85e0983a 	sll	r16,r16,r23
 800c3c4:	2d23383a 	mul	r17,r5,r20
 800c3c8:	10c4b03a 	or	r2,r2,r3
 800c3cc:	dc000015 	stw	r16,0(sp)
 800c3d0:	1440032e 	bgeu	r2,r17,800c3e0 <__udivdi3+0x394>
 800c3d4:	1545883a 	add	r2,r2,r21
 800c3d8:	a53fffc4 	addi	r20,r20,-1
 800c3dc:	15407f2e 	bgeu	r2,r21,800c5dc <__udivdi3+0x590>
 800c3e0:	1463c83a 	sub	r17,r2,r17
 800c3e4:	8809883a 	mov	r4,r17
 800c3e8:	b00b883a 	mov	r5,r22
 800c3ec:	8002fe00 	call	8002fe0 <__udivsi3>
 800c3f0:	8809883a 	mov	r4,r17
 800c3f4:	b00b883a 	mov	r5,r22
 800c3f8:	1021883a 	mov	r16,r2
 800c3fc:	8002fe80 	call	8002fe8 <__umodsi3>
 800c400:	d8c00517 	ldw	r3,20(sp)
 800c404:	d9000217 	ldw	r4,8(sp)
 800c408:	1004943a 	slli	r2,r2,16
 800c40c:	1c0f383a 	mul	r7,r3,r16
 800c410:	20ffffcc 	andi	r3,r4,65535
 800c414:	10e2b03a 	or	r17,r2,r3
 800c418:	89c0032e 	bgeu	r17,r7,800c428 <__udivdi3+0x3dc>
 800c41c:	8d63883a 	add	r17,r17,r21
 800c420:	843fffc4 	addi	r16,r16,-1
 800c424:	8d40692e 	bgeu	r17,r21,800c5cc <__udivdi3+0x580>
 800c428:	a008943a 	slli	r4,r20,16
 800c42c:	d9400017 	ldw	r5,0(sp)
 800c430:	89e3c83a 	sub	r17,r17,r7
 800c434:	8110b03a 	or	r8,r16,r4
 800c438:	280cd43a 	srli	r6,r5,16
 800c43c:	28ffffcc 	andi	r3,r5,65535
 800c440:	40bfffcc 	andi	r2,r8,65535
 800c444:	400ad43a 	srli	r5,r8,16
 800c448:	10d3383a 	mul	r9,r2,r3
 800c44c:	1185383a 	mul	r2,r2,r6
 800c450:	28c7383a 	mul	r3,r5,r3
 800c454:	4808d43a 	srli	r4,r9,16
 800c458:	298b383a 	mul	r5,r5,r6
 800c45c:	10c5883a 	add	r2,r2,r3
 800c460:	2089883a 	add	r4,r4,r2
 800c464:	20c0022e 	bgeu	r4,r3,800c470 <__udivdi3+0x424>
 800c468:	00800074 	movhi	r2,1
 800c46c:	288b883a 	add	r5,r5,r2
 800c470:	2004d43a 	srli	r2,r4,16
 800c474:	288b883a 	add	r5,r5,r2
 800c478:	89403f36 	bltu	r17,r5,800c578 <__udivdi3+0x52c>
 800c47c:	89403926 	beq	r17,r5,800c564 <__udivdi3+0x518>
 800c480:	4005883a 	mov	r2,r8
 800c484:	0009883a 	mov	r4,zero
 800c488:	003f5106 	br	800c1d0 <__udivdi3+0x184>
 800c48c:	85a0983a 	sll	r16,r16,r22
 800c490:	3585c83a 	sub	r2,r6,r22
 800c494:	a0a2d83a 	srl	r17,r20,r2
 800c498:	802ad43a 	srli	r21,r16,16
 800c49c:	e084d83a 	srl	r2,fp,r2
 800c4a0:	a586983a 	sll	r3,r20,r22
 800c4a4:	8809883a 	mov	r4,r17
 800c4a8:	a80b883a 	mov	r5,r21
 800c4ac:	1886b03a 	or	r3,r3,r2
 800c4b0:	d8c00115 	stw	r3,4(sp)
 800c4b4:	8002fe00 	call	8002fe0 <__udivsi3>
 800c4b8:	8809883a 	mov	r4,r17
 800c4bc:	a80b883a 	mov	r5,r21
 800c4c0:	d8800415 	stw	r2,16(sp)
 800c4c4:	8002fe80 	call	8002fe8 <__umodsi3>
 800c4c8:	d9000117 	ldw	r4,4(sp)
 800c4cc:	d9400417 	ldw	r5,16(sp)
 800c4d0:	1004943a 	slli	r2,r2,16
 800c4d4:	85ffffcc 	andi	r23,r16,65535
 800c4d8:	2006d43a 	srli	r3,r4,16
 800c4dc:	b963383a 	mul	r17,r23,r5
 800c4e0:	10c4b03a 	or	r2,r2,r3
 800c4e4:	1440042e 	bgeu	r2,r17,800c4f8 <__udivdi3+0x4ac>
 800c4e8:	297fffc4 	addi	r5,r5,-1
 800c4ec:	1405883a 	add	r2,r2,r16
 800c4f0:	d9400415 	stw	r5,16(sp)
 800c4f4:	1400442e 	bgeu	r2,r16,800c608 <__udivdi3+0x5bc>
 800c4f8:	1463c83a 	sub	r17,r2,r17
 800c4fc:	8809883a 	mov	r4,r17
 800c500:	a80b883a 	mov	r5,r21
 800c504:	8002fe00 	call	8002fe0 <__udivsi3>
 800c508:	8809883a 	mov	r4,r17
 800c50c:	a80b883a 	mov	r5,r21
 800c510:	1029883a 	mov	r20,r2
 800c514:	8002fe80 	call	8002fe8 <__umodsi3>
 800c518:	d9400117 	ldw	r5,4(sp)
 800c51c:	1004943a 	slli	r2,r2,16
 800c520:	bd09383a 	mul	r4,r23,r20
 800c524:	28ffffcc 	andi	r3,r5,65535
 800c528:	10c6b03a 	or	r3,r2,r3
 800c52c:	1900062e 	bgeu	r3,r4,800c548 <__udivdi3+0x4fc>
 800c530:	1c07883a 	add	r3,r3,r16
 800c534:	a53fffc4 	addi	r20,r20,-1
 800c538:	1c000336 	bltu	r3,r16,800c548 <__udivdi3+0x4fc>
 800c53c:	1900022e 	bgeu	r3,r4,800c548 <__udivdi3+0x4fc>
 800c540:	a53fffc4 	addi	r20,r20,-1
 800c544:	1c07883a 	add	r3,r3,r16
 800c548:	d9400417 	ldw	r5,16(sp)
 800c54c:	e5b8983a 	sll	fp,fp,r22
 800c550:	1923c83a 	sub	r17,r3,r4
 800c554:	2804943a 	slli	r2,r5,16
 800c558:	a0a8b03a 	or	r20,r20,r2
 800c55c:	dd000315 	stw	r20,12(sp)
 800c560:	003ee106 	br	800c0e8 <__udivdi3+0x9c>
 800c564:	2004943a 	slli	r2,r4,16
 800c568:	e5c8983a 	sll	r4,fp,r23
 800c56c:	48ffffcc 	andi	r3,r9,65535
 800c570:	10c5883a 	add	r2,r2,r3
 800c574:	20bfc22e 	bgeu	r4,r2,800c480 <__udivdi3+0x434>
 800c578:	40bfffc4 	addi	r2,r8,-1
 800c57c:	0009883a 	mov	r4,zero
 800c580:	003f1306 	br	800c1d0 <__udivdi3+0x184>
 800c584:	01400204 	movi	r5,8
 800c588:	2805883a 	mov	r2,r5
 800c58c:	003f0306 	br	800c19c <__udivdi3+0x150>
 800c590:	01400604 	movi	r5,24
 800c594:	2805883a 	mov	r2,r5
 800c598:	003f0006 	br	800c19c <__udivdi3+0x150>
 800c59c:	01400204 	movi	r5,8
 800c5a0:	2805883a 	mov	r2,r5
 800c5a4:	003ec206 	br	800c0b0 <__udivdi3+0x64>
 800c5a8:	01400604 	movi	r5,24
 800c5ac:	2805883a 	mov	r2,r5
 800c5b0:	003ebf06 	br	800c0b0 <__udivdi3+0x64>
 800c5b4:	01400204 	movi	r5,8
 800c5b8:	2805883a 	mov	r2,r5
 800c5bc:	003f1706 	br	800c21c <__udivdi3+0x1d0>
 800c5c0:	01400604 	movi	r5,24
 800c5c4:	2805883a 	mov	r2,r5
 800c5c8:	003f1406 	br	800c21c <__udivdi3+0x1d0>
 800c5cc:	89ff962e 	bgeu	r17,r7,800c428 <__udivdi3+0x3dc>
 800c5d0:	8d63883a 	add	r17,r17,r21
 800c5d4:	843fffc4 	addi	r16,r16,-1
 800c5d8:	003f9306 	br	800c428 <__udivdi3+0x3dc>
 800c5dc:	147f802e 	bgeu	r2,r17,800c3e0 <__udivdi3+0x394>
 800c5e0:	a53fffc4 	addi	r20,r20,-1
 800c5e4:	1545883a 	add	r2,r2,r21
 800c5e8:	003f7d06 	br	800c3e0 <__udivdi3+0x394>
 800c5ec:	a53fffc4 	addi	r20,r20,-1
 800c5f0:	003ede06 	br	800c16c <__udivdi3+0x120>
 800c5f4:	b5bfffc4 	addi	r22,r22,-1
 800c5f8:	1405883a 	add	r2,r2,r16
 800c5fc:	003f2806 	br	800c2a0 <__udivdi3+0x254>
 800c600:	a53fffc4 	addi	r20,r20,-1
 800c604:	003f3706 	br	800c2e4 <__udivdi3+0x298>
 800c608:	147fbb2e 	bgeu	r2,r17,800c4f8 <__udivdi3+0x4ac>
 800c60c:	297fffc4 	addi	r5,r5,-1
 800c610:	1405883a 	add	r2,r2,r16
 800c614:	d9400415 	stw	r5,16(sp)
 800c618:	003fb706 	br	800c4f8 <__udivdi3+0x4ac>
 800c61c:	b5bfffc4 	addi	r22,r22,-1
 800c620:	1405883a 	add	r2,r2,r16
 800c624:	003ec006 	br	800c128 <__udivdi3+0xdc>

0800c628 <__umoddi3>:
 800c628:	defff104 	addi	sp,sp,-60
 800c62c:	dd800b15 	stw	r22,44(sp)
 800c630:	dd000915 	stw	r20,36(sp)
 800c634:	dc000515 	stw	r16,20(sp)
 800c638:	dfc00e15 	stw	ra,56(sp)
 800c63c:	df000d15 	stw	fp,52(sp)
 800c640:	ddc00c15 	stw	r23,48(sp)
 800c644:	dd400a15 	stw	r21,40(sp)
 800c648:	dcc00815 	stw	r19,32(sp)
 800c64c:	dc800715 	stw	r18,28(sp)
 800c650:	dc400615 	stw	r17,24(sp)
 800c654:	3021883a 	mov	r16,r6
 800c658:	202d883a 	mov	r22,r4
 800c65c:	2829883a 	mov	r20,r5
 800c660:	38002b1e 	bne	r7,zero,800c710 <__umoddi3+0xe8>
 800c664:	29805036 	bltu	r5,r6,800c7a8 <__umoddi3+0x180>
 800c668:	30008a26 	beq	r6,zero,800c894 <__umoddi3+0x26c>
 800c66c:	00bfffd4 	movui	r2,65535
 800c670:	14008236 	bltu	r2,r16,800c87c <__umoddi3+0x254>
 800c674:	00803fc4 	movi	r2,255
 800c678:	14013636 	bltu	r2,r16,800cb54 <__umoddi3+0x52c>
 800c67c:	000b883a 	mov	r5,zero
 800c680:	0005883a 	mov	r2,zero
 800c684:	8084d83a 	srl	r2,r16,r2
 800c688:	01020074 	movhi	r4,2049
 800c68c:	211e1804 	addi	r4,r4,30816
 800c690:	01800804 	movi	r6,32
 800c694:	1105883a 	add	r2,r2,r4
 800c698:	10c00003 	ldbu	r3,0(r2)
 800c69c:	28c7883a 	add	r3,r5,r3
 800c6a0:	30efc83a 	sub	r23,r6,r3
 800c6a4:	b800941e 	bne	r23,zero,800c8f8 <__umoddi3+0x2d0>
 800c6a8:	802ad43a 	srli	r21,r16,16
 800c6ac:	a423c83a 	sub	r17,r20,r16
 800c6b0:	0039883a 	mov	fp,zero
 800c6b4:	853fffcc 	andi	r20,r16,65535
 800c6b8:	8809883a 	mov	r4,r17
 800c6bc:	a80b883a 	mov	r5,r21
 800c6c0:	8002fe00 	call	8002fe0 <__udivsi3>
 800c6c4:	8809883a 	mov	r4,r17
 800c6c8:	a80b883a 	mov	r5,r21
 800c6cc:	a0a3383a 	mul	r17,r20,r2
 800c6d0:	8002fe80 	call	8002fe8 <__umodsi3>
 800c6d4:	1004943a 	slli	r2,r2,16
 800c6d8:	b006d43a 	srli	r3,r22,16
 800c6dc:	10c4b03a 	or	r2,r2,r3
 800c6e0:	1440032e 	bgeu	r2,r17,800c6f0 <__umoddi3+0xc8>
 800c6e4:	1405883a 	add	r2,r2,r16
 800c6e8:	14000136 	bltu	r2,r16,800c6f0 <__umoddi3+0xc8>
 800c6ec:	14413536 	bltu	r2,r17,800cbc4 <__umoddi3+0x59c>
 800c6f0:	1463c83a 	sub	r17,r2,r17
 800c6f4:	8809883a 	mov	r4,r17
 800c6f8:	a80b883a 	mov	r5,r21
 800c6fc:	8002fe00 	call	8002fe0 <__udivsi3>
 800c700:	8809883a 	mov	r4,r17
 800c704:	a0a3383a 	mul	r17,r20,r2
 800c708:	a80b883a 	mov	r5,r21
 800c70c:	00004d06 	br	800c844 <__umoddi3+0x21c>
 800c710:	380d883a 	mov	r6,r7
 800c714:	29c0102e 	bgeu	r5,r7,800c758 <__umoddi3+0x130>
 800c718:	2011883a 	mov	r8,r4
 800c71c:	2813883a 	mov	r9,r5
 800c720:	4005883a 	mov	r2,r8
 800c724:	4807883a 	mov	r3,r9
 800c728:	dfc00e17 	ldw	ra,56(sp)
 800c72c:	df000d17 	ldw	fp,52(sp)
 800c730:	ddc00c17 	ldw	r23,48(sp)
 800c734:	dd800b17 	ldw	r22,44(sp)
 800c738:	dd400a17 	ldw	r21,40(sp)
 800c73c:	dd000917 	ldw	r20,36(sp)
 800c740:	dcc00817 	ldw	r19,32(sp)
 800c744:	dc800717 	ldw	r18,28(sp)
 800c748:	dc400617 	ldw	r17,24(sp)
 800c74c:	dc000517 	ldw	r16,20(sp)
 800c750:	dec00f04 	addi	sp,sp,60
 800c754:	f800283a 	ret
 800c758:	00bfffd4 	movui	r2,65535
 800c75c:	11c05a36 	bltu	r2,r7,800c8c8 <__umoddi3+0x2a0>
 800c760:	00803fc4 	movi	r2,255
 800c764:	11c0fe36 	bltu	r2,r7,800cb60 <__umoddi3+0x538>
 800c768:	000b883a 	mov	r5,zero
 800c76c:	0005883a 	mov	r2,zero
 800c770:	3084d83a 	srl	r2,r6,r2
 800c774:	01020074 	movhi	r4,2049
 800c778:	211e1804 	addi	r4,r4,30816
 800c77c:	01c00804 	movi	r7,32
 800c780:	1105883a 	add	r2,r2,r4
 800c784:	10c00003 	ldbu	r3,0(r2)
 800c788:	28c7883a 	add	r3,r5,r3
 800c78c:	38ebc83a 	sub	r21,r7,r3
 800c790:	a800851e 	bne	r21,zero,800c9a8 <__umoddi3+0x380>
 800c794:	35005236 	bltu	r6,r20,800c8e0 <__umoddi3+0x2b8>
 800c798:	b400512e 	bgeu	r22,r16,800c8e0 <__umoddi3+0x2b8>
 800c79c:	b011883a 	mov	r8,r22
 800c7a0:	a013883a 	mov	r9,r20
 800c7a4:	003fde06 	br	800c720 <__umoddi3+0xf8>
 800c7a8:	00bfffd4 	movui	r2,65535
 800c7ac:	11804036 	bltu	r2,r6,800c8b0 <__umoddi3+0x288>
 800c7b0:	00803fc4 	movi	r2,255
 800c7b4:	1180ed36 	bltu	r2,r6,800cb6c <__umoddi3+0x544>
 800c7b8:	000b883a 	mov	r5,zero
 800c7bc:	0005883a 	mov	r2,zero
 800c7c0:	8084d83a 	srl	r2,r16,r2
 800c7c4:	01020074 	movhi	r4,2049
 800c7c8:	211e1804 	addi	r4,r4,30816
 800c7cc:	01800804 	movi	r6,32
 800c7d0:	1105883a 	add	r2,r2,r4
 800c7d4:	10c00003 	ldbu	r3,0(r2)
 800c7d8:	28c7883a 	add	r3,r5,r3
 800c7dc:	30c7c83a 	sub	r3,r6,r3
 800c7e0:	1800bf1e 	bne	r3,zero,800cae0 <__umoddi3+0x4b8>
 800c7e4:	0039883a 	mov	fp,zero
 800c7e8:	802ad43a 	srli	r21,r16,16
 800c7ec:	a009883a 	mov	r4,r20
 800c7f0:	85ffffcc 	andi	r23,r16,65535
 800c7f4:	a80b883a 	mov	r5,r21
 800c7f8:	8002fe00 	call	8002fe0 <__udivsi3>
 800c7fc:	a009883a 	mov	r4,r20
 800c800:	a80b883a 	mov	r5,r21
 800c804:	b8a3383a 	mul	r17,r23,r2
 800c808:	8002fe80 	call	8002fe8 <__umodsi3>
 800c80c:	1004943a 	slli	r2,r2,16
 800c810:	b006d43a 	srli	r3,r22,16
 800c814:	10c4b03a 	or	r2,r2,r3
 800c818:	1440032e 	bgeu	r2,r17,800c828 <__umoddi3+0x200>
 800c81c:	1405883a 	add	r2,r2,r16
 800c820:	14000136 	bltu	r2,r16,800c828 <__umoddi3+0x200>
 800c824:	1440e536 	bltu	r2,r17,800cbbc <__umoddi3+0x594>
 800c828:	1463c83a 	sub	r17,r2,r17
 800c82c:	8809883a 	mov	r4,r17
 800c830:	a80b883a 	mov	r5,r21
 800c834:	8002fe00 	call	8002fe0 <__udivsi3>
 800c838:	8809883a 	mov	r4,r17
 800c83c:	b8a3383a 	mul	r17,r23,r2
 800c840:	a80b883a 	mov	r5,r21
 800c844:	8002fe80 	call	8002fe8 <__umodsi3>
 800c848:	1004943a 	slli	r2,r2,16
 800c84c:	b0ffffcc 	andi	r3,r22,65535
 800c850:	10c4b03a 	or	r2,r2,r3
 800c854:	1440042e 	bgeu	r2,r17,800c868 <__umoddi3+0x240>
 800c858:	1405883a 	add	r2,r2,r16
 800c85c:	14000236 	bltu	r2,r16,800c868 <__umoddi3+0x240>
 800c860:	1440012e 	bgeu	r2,r17,800c868 <__umoddi3+0x240>
 800c864:	1405883a 	add	r2,r2,r16
 800c868:	1445c83a 	sub	r2,r2,r17
 800c86c:	1724d83a 	srl	r18,r2,fp
 800c870:	0013883a 	mov	r9,zero
 800c874:	9011883a 	mov	r8,r18
 800c878:	003fa906 	br	800c720 <__umoddi3+0xf8>
 800c87c:	00804034 	movhi	r2,256
 800c880:	10bfffc4 	addi	r2,r2,-1
 800c884:	1400b036 	bltu	r2,r16,800cb48 <__umoddi3+0x520>
 800c888:	01400404 	movi	r5,16
 800c88c:	2805883a 	mov	r2,r5
 800c890:	003f7c06 	br	800c684 <__umoddi3+0x5c>
 800c894:	01000044 	movi	r4,1
 800c898:	000b883a 	mov	r5,zero
 800c89c:	8002fe00 	call	8002fe0 <__udivsi3>
 800c8a0:	1021883a 	mov	r16,r2
 800c8a4:	00bfffd4 	movui	r2,65535
 800c8a8:	143ff436 	bltu	r2,r16,800c87c <__umoddi3+0x254>
 800c8ac:	003f7106 	br	800c674 <__umoddi3+0x4c>
 800c8b0:	00804034 	movhi	r2,256
 800c8b4:	10bfffc4 	addi	r2,r2,-1
 800c8b8:	1180af36 	bltu	r2,r6,800cb78 <__umoddi3+0x550>
 800c8bc:	01400404 	movi	r5,16
 800c8c0:	2805883a 	mov	r2,r5
 800c8c4:	003fbe06 	br	800c7c0 <__umoddi3+0x198>
 800c8c8:	00804034 	movhi	r2,256
 800c8cc:	10bfffc4 	addi	r2,r2,-1
 800c8d0:	11c0ac36 	bltu	r2,r7,800cb84 <__umoddi3+0x55c>
 800c8d4:	01400404 	movi	r5,16
 800c8d8:	2805883a 	mov	r2,r5
 800c8dc:	003fa406 	br	800c770 <__umoddi3+0x148>
 800c8e0:	b409c83a 	sub	r4,r22,r16
 800c8e4:	b105803a 	cmpltu	r2,r22,r4
 800c8e8:	a187c83a 	sub	r3,r20,r6
 800c8ec:	18a9c83a 	sub	r20,r3,r2
 800c8f0:	202d883a 	mov	r22,r4
 800c8f4:	003fa906 	br	800c79c <__umoddi3+0x174>
 800c8f8:	85e0983a 	sll	r16,r16,r23
 800c8fc:	35c5c83a 	sub	r2,r6,r23
 800c900:	a0a2d83a 	srl	r17,r20,r2
 800c904:	802ad43a 	srli	r21,r16,16
 800c908:	b084d83a 	srl	r2,r22,r2
 800c90c:	a5c6983a 	sll	r3,r20,r23
 800c910:	8809883a 	mov	r4,r17
 800c914:	a80b883a 	mov	r5,r21
 800c918:	1886b03a 	or	r3,r3,r2
 800c91c:	d8c00115 	stw	r3,4(sp)
 800c920:	853fffcc 	andi	r20,r16,65535
 800c924:	8002fe00 	call	8002fe0 <__udivsi3>
 800c928:	8809883a 	mov	r4,r17
 800c92c:	a80b883a 	mov	r5,r21
 800c930:	a0a3383a 	mul	r17,r20,r2
 800c934:	8002fe80 	call	8002fe8 <__umodsi3>
 800c938:	d9000117 	ldw	r4,4(sp)
 800c93c:	1004943a 	slli	r2,r2,16
 800c940:	b839883a 	mov	fp,r23
 800c944:	2006d43a 	srli	r3,r4,16
 800c948:	10c4b03a 	or	r2,r2,r3
 800c94c:	1440022e 	bgeu	r2,r17,800c958 <__umoddi3+0x330>
 800c950:	1405883a 	add	r2,r2,r16
 800c954:	1400962e 	bgeu	r2,r16,800cbb0 <__umoddi3+0x588>
 800c958:	1463c83a 	sub	r17,r2,r17
 800c95c:	8809883a 	mov	r4,r17
 800c960:	a80b883a 	mov	r5,r21
 800c964:	8002fe00 	call	8002fe0 <__udivsi3>
 800c968:	8809883a 	mov	r4,r17
 800c96c:	a80b883a 	mov	r5,r21
 800c970:	a0a3383a 	mul	r17,r20,r2
 800c974:	8002fe80 	call	8002fe8 <__umodsi3>
 800c978:	d9400117 	ldw	r5,4(sp)
 800c97c:	1004943a 	slli	r2,r2,16
 800c980:	28ffffcc 	andi	r3,r5,65535
 800c984:	10c4b03a 	or	r2,r2,r3
 800c988:	1440042e 	bgeu	r2,r17,800c99c <__umoddi3+0x374>
 800c98c:	1405883a 	add	r2,r2,r16
 800c990:	14000236 	bltu	r2,r16,800c99c <__umoddi3+0x374>
 800c994:	1440012e 	bgeu	r2,r17,800c99c <__umoddi3+0x374>
 800c998:	1405883a 	add	r2,r2,r16
 800c99c:	b5ec983a 	sll	r22,r22,r23
 800c9a0:	1463c83a 	sub	r17,r2,r17
 800c9a4:	003f4406 	br	800c6b8 <__umoddi3+0x90>
 800c9a8:	3d4fc83a 	sub	r7,r7,r21
 800c9ac:	3546983a 	sll	r3,r6,r21
 800c9b0:	81c4d83a 	srl	r2,r16,r7
 800c9b4:	a1e2d83a 	srl	r17,r20,r7
 800c9b8:	a54c983a 	sll	r6,r20,r21
 800c9bc:	18aeb03a 	or	r23,r3,r2
 800c9c0:	b828d43a 	srli	r20,r23,16
 800c9c4:	b1c4d83a 	srl	r2,r22,r7
 800c9c8:	8809883a 	mov	r4,r17
 800c9cc:	a00b883a 	mov	r5,r20
 800c9d0:	308cb03a 	or	r6,r6,r2
 800c9d4:	d9c00315 	stw	r7,12(sp)
 800c9d8:	d9800215 	stw	r6,8(sp)
 800c9dc:	8002fe00 	call	8002fe0 <__udivsi3>
 800c9e0:	8809883a 	mov	r4,r17
 800c9e4:	a00b883a 	mov	r5,r20
 800c9e8:	1039883a 	mov	fp,r2
 800c9ec:	8002fe80 	call	8002fe8 <__umodsi3>
 800c9f0:	b8ffffcc 	andi	r3,r23,65535
 800c9f4:	d8c00415 	stw	r3,16(sp)
 800c9f8:	d9000217 	ldw	r4,8(sp)
 800c9fc:	d9400417 	ldw	r5,16(sp)
 800ca00:	1004943a 	slli	r2,r2,16
 800ca04:	2006d43a 	srli	r3,r4,16
 800ca08:	8560983a 	sll	r16,r16,r21
 800ca0c:	2f23383a 	mul	r17,r5,fp
 800ca10:	10c4b03a 	or	r2,r2,r3
 800ca14:	dc000015 	stw	r16,0(sp)
 800ca18:	b56c983a 	sll	r22,r22,r21
 800ca1c:	1440032e 	bgeu	r2,r17,800ca2c <__umoddi3+0x404>
 800ca20:	15c5883a 	add	r2,r2,r23
 800ca24:	e73fffc4 	addi	fp,fp,-1
 800ca28:	15c05d2e 	bgeu	r2,r23,800cba0 <__umoddi3+0x578>
 800ca2c:	1463c83a 	sub	r17,r2,r17
 800ca30:	8809883a 	mov	r4,r17
 800ca34:	a00b883a 	mov	r5,r20
 800ca38:	8002fe00 	call	8002fe0 <__udivsi3>
 800ca3c:	8809883a 	mov	r4,r17
 800ca40:	a00b883a 	mov	r5,r20
 800ca44:	1021883a 	mov	r16,r2
 800ca48:	8002fe80 	call	8002fe8 <__umodsi3>
 800ca4c:	d8c00417 	ldw	r3,16(sp)
 800ca50:	d9000217 	ldw	r4,8(sp)
 800ca54:	1004943a 	slli	r2,r2,16
 800ca58:	1c23383a 	mul	r17,r3,r16
 800ca5c:	20ffffcc 	andi	r3,r4,65535
 800ca60:	10ceb03a 	or	r7,r2,r3
 800ca64:	3c40032e 	bgeu	r7,r17,800ca74 <__umoddi3+0x44c>
 800ca68:	3dcf883a 	add	r7,r7,r23
 800ca6c:	843fffc4 	addi	r16,r16,-1
 800ca70:	3dc0472e 	bgeu	r7,r23,800cb90 <__umoddi3+0x568>
 800ca74:	e004943a 	slli	r2,fp,16
 800ca78:	d9400017 	ldw	r5,0(sp)
 800ca7c:	3c4fc83a 	sub	r7,r7,r17
 800ca80:	8084b03a 	or	r2,r16,r2
 800ca84:	28ffffcc 	andi	r3,r5,65535
 800ca88:	280cd43a 	srli	r6,r5,16
 800ca8c:	100ad43a 	srli	r5,r2,16
 800ca90:	10bfffcc 	andi	r2,r2,65535
 800ca94:	10d1383a 	mul	r8,r2,r3
 800ca98:	28c7383a 	mul	r3,r5,r3
 800ca9c:	1185383a 	mul	r2,r2,r6
 800caa0:	4008d43a 	srli	r4,r8,16
 800caa4:	298b383a 	mul	r5,r5,r6
 800caa8:	10c5883a 	add	r2,r2,r3
 800caac:	2089883a 	add	r4,r4,r2
 800cab0:	20c0022e 	bgeu	r4,r3,800cabc <__umoddi3+0x494>
 800cab4:	00800074 	movhi	r2,1
 800cab8:	288b883a 	add	r5,r5,r2
 800cabc:	2004d43a 	srli	r2,r4,16
 800cac0:	2008943a 	slli	r4,r4,16
 800cac4:	40ffffcc 	andi	r3,r8,65535
 800cac8:	288b883a 	add	r5,r5,r2
 800cacc:	20c9883a 	add	r4,r4,r3
 800cad0:	39400b36 	bltu	r7,r5,800cb00 <__umoddi3+0x4d8>
 800cad4:	39403d26 	beq	r7,r5,800cbcc <__umoddi3+0x5a4>
 800cad8:	394bc83a 	sub	r5,r7,r5
 800cadc:	00000f06 	br	800cb1c <__umoddi3+0x4f4>
 800cae0:	30c5c83a 	sub	r2,r6,r3
 800cae4:	1839883a 	mov	fp,r3
 800cae8:	b084d83a 	srl	r2,r22,r2
 800caec:	a0c6983a 	sll	r3,r20,r3
 800caf0:	8720983a 	sll	r16,r16,fp
 800caf4:	b72c983a 	sll	r22,r22,fp
 800caf8:	18a8b03a 	or	r20,r3,r2
 800cafc:	003f3a06 	br	800c7e8 <__umoddi3+0x1c0>
 800cb00:	d8c00017 	ldw	r3,0(sp)
 800cb04:	20c5c83a 	sub	r2,r4,r3
 800cb08:	2089803a 	cmpltu	r4,r4,r2
 800cb0c:	2dc7c83a 	sub	r3,r5,r23
 800cb10:	1907c83a 	sub	r3,r3,r4
 800cb14:	38cbc83a 	sub	r5,r7,r3
 800cb18:	1009883a 	mov	r4,r2
 800cb1c:	b105c83a 	sub	r2,r22,r4
 800cb20:	b087803a 	cmpltu	r3,r22,r2
 800cb24:	28c7c83a 	sub	r3,r5,r3
 800cb28:	d9400317 	ldw	r5,12(sp)
 800cb2c:	1544d83a 	srl	r2,r2,r21
 800cb30:	1948983a 	sll	r4,r3,r5
 800cb34:	1d46d83a 	srl	r3,r3,r21
 800cb38:	20a4b03a 	or	r18,r4,r2
 800cb3c:	9011883a 	mov	r8,r18
 800cb40:	1813883a 	mov	r9,r3
 800cb44:	003ef606 	br	800c720 <__umoddi3+0xf8>
 800cb48:	01400604 	movi	r5,24
 800cb4c:	2805883a 	mov	r2,r5
 800cb50:	003ecc06 	br	800c684 <__umoddi3+0x5c>
 800cb54:	01400204 	movi	r5,8
 800cb58:	2805883a 	mov	r2,r5
 800cb5c:	003ec906 	br	800c684 <__umoddi3+0x5c>
 800cb60:	01400204 	movi	r5,8
 800cb64:	2805883a 	mov	r2,r5
 800cb68:	003f0106 	br	800c770 <__umoddi3+0x148>
 800cb6c:	01400204 	movi	r5,8
 800cb70:	2805883a 	mov	r2,r5
 800cb74:	003f1206 	br	800c7c0 <__umoddi3+0x198>
 800cb78:	01400604 	movi	r5,24
 800cb7c:	2805883a 	mov	r2,r5
 800cb80:	003f0f06 	br	800c7c0 <__umoddi3+0x198>
 800cb84:	01400604 	movi	r5,24
 800cb88:	2805883a 	mov	r2,r5
 800cb8c:	003ef806 	br	800c770 <__umoddi3+0x148>
 800cb90:	3c7fb82e 	bgeu	r7,r17,800ca74 <__umoddi3+0x44c>
 800cb94:	843fffc4 	addi	r16,r16,-1
 800cb98:	3dcf883a 	add	r7,r7,r23
 800cb9c:	003fb506 	br	800ca74 <__umoddi3+0x44c>
 800cba0:	147fa22e 	bgeu	r2,r17,800ca2c <__umoddi3+0x404>
 800cba4:	e73fffc4 	addi	fp,fp,-1
 800cba8:	15c5883a 	add	r2,r2,r23
 800cbac:	003f9f06 	br	800ca2c <__umoddi3+0x404>
 800cbb0:	147f692e 	bgeu	r2,r17,800c958 <__umoddi3+0x330>
 800cbb4:	1405883a 	add	r2,r2,r16
 800cbb8:	003f6706 	br	800c958 <__umoddi3+0x330>
 800cbbc:	1405883a 	add	r2,r2,r16
 800cbc0:	003f1906 	br	800c828 <__umoddi3+0x200>
 800cbc4:	1405883a 	add	r2,r2,r16
 800cbc8:	003ec906 	br	800c6f0 <__umoddi3+0xc8>
 800cbcc:	b13fcc36 	bltu	r22,r4,800cb00 <__umoddi3+0x4d8>
 800cbd0:	000b883a 	mov	r5,zero
 800cbd4:	003fd106 	br	800cb1c <__umoddi3+0x4f4>

0800cbd8 <_fpadd_parts>:
 800cbd8:	defff804 	addi	sp,sp,-32
 800cbdc:	dcc00315 	stw	r19,12(sp)
 800cbe0:	2027883a 	mov	r19,r4
 800cbe4:	21000017 	ldw	r4,0(r4)
 800cbe8:	00c00044 	movi	r3,1
 800cbec:	dd400515 	stw	r21,20(sp)
 800cbf0:	dd000415 	stw	r20,16(sp)
 800cbf4:	ddc00715 	stw	r23,28(sp)
 800cbf8:	dd800615 	stw	r22,24(sp)
 800cbfc:	dc800215 	stw	r18,8(sp)
 800cc00:	dc400115 	stw	r17,4(sp)
 800cc04:	dc000015 	stw	r16,0(sp)
 800cc08:	282b883a 	mov	r21,r5
 800cc0c:	3029883a 	mov	r20,r6
 800cc10:	1900632e 	bgeu	r3,r4,800cda0 <_fpadd_parts+0x1c8>
 800cc14:	28800017 	ldw	r2,0(r5)
 800cc18:	1880812e 	bgeu	r3,r2,800ce20 <_fpadd_parts+0x248>
 800cc1c:	00c00104 	movi	r3,4
 800cc20:	20c0dc26 	beq	r4,r3,800cf94 <_fpadd_parts+0x3bc>
 800cc24:	10c07e26 	beq	r2,r3,800ce20 <_fpadd_parts+0x248>
 800cc28:	00c00084 	movi	r3,2
 800cc2c:	10c06726 	beq	r2,r3,800cdcc <_fpadd_parts+0x1f4>
 800cc30:	20c07b26 	beq	r4,r3,800ce20 <_fpadd_parts+0x248>
 800cc34:	9dc00217 	ldw	r23,8(r19)
 800cc38:	28c00217 	ldw	r3,8(r5)
 800cc3c:	9c400317 	ldw	r17,12(r19)
 800cc40:	2bc00317 	ldw	r15,12(r5)
 800cc44:	b8cdc83a 	sub	r6,r23,r3
 800cc48:	9c800417 	ldw	r18,16(r19)
 800cc4c:	2c000417 	ldw	r16,16(r5)
 800cc50:	3009883a 	mov	r4,r6
 800cc54:	30009716 	blt	r6,zero,800ceb4 <_fpadd_parts+0x2dc>
 800cc58:	00800fc4 	movi	r2,63
 800cc5c:	11806b16 	blt	r2,r6,800ce0c <_fpadd_parts+0x234>
 800cc60:	0100a40e 	bge	zero,r4,800cef4 <_fpadd_parts+0x31c>
 800cc64:	35bff804 	addi	r22,r6,-32
 800cc68:	b000bc16 	blt	r22,zero,800cf5c <_fpadd_parts+0x384>
 800cc6c:	8596d83a 	srl	r11,r16,r22
 800cc70:	0019883a 	mov	r12,zero
 800cc74:	0013883a 	mov	r9,zero
 800cc78:	01000044 	movi	r4,1
 800cc7c:	0015883a 	mov	r10,zero
 800cc80:	b000be16 	blt	r22,zero,800cf7c <_fpadd_parts+0x3a4>
 800cc84:	2590983a 	sll	r8,r4,r22
 800cc88:	000f883a 	mov	r7,zero
 800cc8c:	00bfffc4 	movi	r2,-1
 800cc90:	3889883a 	add	r4,r7,r2
 800cc94:	408b883a 	add	r5,r8,r2
 800cc98:	21cd803a 	cmpltu	r6,r4,r7
 800cc9c:	314b883a 	add	r5,r6,r5
 800cca0:	7904703a 	and	r2,r15,r4
 800cca4:	8146703a 	and	r3,r16,r5
 800cca8:	10c4b03a 	or	r2,r2,r3
 800ccac:	10000226 	beq	r2,zero,800ccb8 <_fpadd_parts+0xe0>
 800ccb0:	02400044 	movi	r9,1
 800ccb4:	0015883a 	mov	r10,zero
 800ccb8:	5a5eb03a 	or	r15,r11,r9
 800ccbc:	62a0b03a 	or	r16,r12,r10
 800ccc0:	99400117 	ldw	r5,4(r19)
 800ccc4:	a8800117 	ldw	r2,4(r21)
 800ccc8:	28806e26 	beq	r5,r2,800ce84 <_fpadd_parts+0x2ac>
 800cccc:	28006626 	beq	r5,zero,800ce68 <_fpadd_parts+0x290>
 800ccd0:	7c45c83a 	sub	r2,r15,r17
 800ccd4:	7889803a 	cmpltu	r4,r15,r2
 800ccd8:	8487c83a 	sub	r3,r16,r18
 800ccdc:	1909c83a 	sub	r4,r3,r4
 800cce0:	100d883a 	mov	r6,r2
 800cce4:	200f883a 	mov	r7,r4
 800cce8:	38007716 	blt	r7,zero,800cec8 <_fpadd_parts+0x2f0>
 800ccec:	a5c00215 	stw	r23,8(r20)
 800ccf0:	a1c00415 	stw	r7,16(r20)
 800ccf4:	a0000115 	stw	zero,4(r20)
 800ccf8:	a1800315 	stw	r6,12(r20)
 800ccfc:	a2000317 	ldw	r8,12(r20)
 800cd00:	a2400417 	ldw	r9,16(r20)
 800cd04:	00bfffc4 	movi	r2,-1
 800cd08:	408b883a 	add	r5,r8,r2
 800cd0c:	2a09803a 	cmpltu	r4,r5,r8
 800cd10:	488d883a 	add	r6,r9,r2
 800cd14:	01c40034 	movhi	r7,4096
 800cd18:	39ffffc4 	addi	r7,r7,-1
 800cd1c:	218d883a 	add	r6,r4,r6
 800cd20:	39801736 	bltu	r7,r6,800cd80 <_fpadd_parts+0x1a8>
 800cd24:	31c06526 	beq	r6,r7,800cebc <_fpadd_parts+0x2e4>
 800cd28:	a3000217 	ldw	r12,8(r20)
 800cd2c:	4209883a 	add	r4,r8,r8
 800cd30:	00bfffc4 	movi	r2,-1
 800cd34:	220f803a 	cmpltu	r7,r4,r8
 800cd38:	4a4b883a 	add	r5,r9,r9
 800cd3c:	394f883a 	add	r7,r7,r5
 800cd40:	2095883a 	add	r10,r4,r2
 800cd44:	3897883a 	add	r11,r7,r2
 800cd48:	510d803a 	cmpltu	r6,r10,r4
 800cd4c:	6099883a 	add	r12,r12,r2
 800cd50:	32d7883a 	add	r11,r6,r11
 800cd54:	00840034 	movhi	r2,4096
 800cd58:	10bfffc4 	addi	r2,r2,-1
 800cd5c:	2011883a 	mov	r8,r4
 800cd60:	3813883a 	mov	r9,r7
 800cd64:	a1000315 	stw	r4,12(r20)
 800cd68:	a1c00415 	stw	r7,16(r20)
 800cd6c:	a3000215 	stw	r12,8(r20)
 800cd70:	12c00336 	bltu	r2,r11,800cd80 <_fpadd_parts+0x1a8>
 800cd74:	58bfed1e 	bne	r11,r2,800cd2c <_fpadd_parts+0x154>
 800cd78:	00bfff84 	movi	r2,-2
 800cd7c:	12bfeb2e 	bgeu	r2,r10,800cd2c <_fpadd_parts+0x154>
 800cd80:	a2800417 	ldw	r10,16(r20)
 800cd84:	008000c4 	movi	r2,3
 800cd88:	00c80034 	movhi	r3,8192
 800cd8c:	18ffffc4 	addi	r3,r3,-1
 800cd90:	a2400317 	ldw	r9,12(r20)
 800cd94:	a0800015 	stw	r2,0(r20)
 800cd98:	1a802336 	bltu	r3,r10,800ce28 <_fpadd_parts+0x250>
 800cd9c:	a027883a 	mov	r19,r20
 800cda0:	9805883a 	mov	r2,r19
 800cda4:	ddc00717 	ldw	r23,28(sp)
 800cda8:	dd800617 	ldw	r22,24(sp)
 800cdac:	dd400517 	ldw	r21,20(sp)
 800cdb0:	dd000417 	ldw	r20,16(sp)
 800cdb4:	dcc00317 	ldw	r19,12(sp)
 800cdb8:	dc800217 	ldw	r18,8(sp)
 800cdbc:	dc400117 	ldw	r17,4(sp)
 800cdc0:	dc000017 	ldw	r16,0(sp)
 800cdc4:	dec00804 	addi	sp,sp,32
 800cdc8:	f800283a 	ret
 800cdcc:	20fff41e 	bne	r4,r3,800cda0 <_fpadd_parts+0x1c8>
 800cdd0:	31000015 	stw	r4,0(r6)
 800cdd4:	98800117 	ldw	r2,4(r19)
 800cdd8:	30800115 	stw	r2,4(r6)
 800cddc:	98c00217 	ldw	r3,8(r19)
 800cde0:	30c00215 	stw	r3,8(r6)
 800cde4:	98800317 	ldw	r2,12(r19)
 800cde8:	30800315 	stw	r2,12(r6)
 800cdec:	98c00417 	ldw	r3,16(r19)
 800cdf0:	30c00415 	stw	r3,16(r6)
 800cdf4:	98800117 	ldw	r2,4(r19)
 800cdf8:	28c00117 	ldw	r3,4(r5)
 800cdfc:	3027883a 	mov	r19,r6
 800ce00:	10c4703a 	and	r2,r2,r3
 800ce04:	30800115 	stw	r2,4(r6)
 800ce08:	003fe506 	br	800cda0 <_fpadd_parts+0x1c8>
 800ce0c:	1dc02616 	blt	r3,r23,800cea8 <_fpadd_parts+0x2d0>
 800ce10:	0023883a 	mov	r17,zero
 800ce14:	182f883a 	mov	r23,r3
 800ce18:	0025883a 	mov	r18,zero
 800ce1c:	003fa806 	br	800ccc0 <_fpadd_parts+0xe8>
 800ce20:	a827883a 	mov	r19,r21
 800ce24:	003fde06 	br	800cda0 <_fpadd_parts+0x1c8>
 800ce28:	01800044 	movi	r6,1
 800ce2c:	500497fa 	slli	r2,r10,31
 800ce30:	4808d07a 	srli	r4,r9,1
 800ce34:	518ad83a 	srl	r5,r10,r6
 800ce38:	a2000217 	ldw	r8,8(r20)
 800ce3c:	1108b03a 	or	r4,r2,r4
 800ce40:	0007883a 	mov	r3,zero
 800ce44:	4984703a 	and	r2,r9,r6
 800ce48:	208cb03a 	or	r6,r4,r2
 800ce4c:	28ceb03a 	or	r7,r5,r3
 800ce50:	42000044 	addi	r8,r8,1
 800ce54:	a027883a 	mov	r19,r20
 800ce58:	a1c00415 	stw	r7,16(r20)
 800ce5c:	a2000215 	stw	r8,8(r20)
 800ce60:	a1800315 	stw	r6,12(r20)
 800ce64:	003fce06 	br	800cda0 <_fpadd_parts+0x1c8>
 800ce68:	8bc5c83a 	sub	r2,r17,r15
 800ce6c:	8889803a 	cmpltu	r4,r17,r2
 800ce70:	9407c83a 	sub	r3,r18,r16
 800ce74:	1909c83a 	sub	r4,r3,r4
 800ce78:	100d883a 	mov	r6,r2
 800ce7c:	200f883a 	mov	r7,r4
 800ce80:	003f9906 	br	800cce8 <_fpadd_parts+0x110>
 800ce84:	7c45883a 	add	r2,r15,r17
 800ce88:	13c9803a 	cmpltu	r4,r2,r15
 800ce8c:	8487883a 	add	r3,r16,r18
 800ce90:	20c9883a 	add	r4,r4,r3
 800ce94:	a1400115 	stw	r5,4(r20)
 800ce98:	a5c00215 	stw	r23,8(r20)
 800ce9c:	a0800315 	stw	r2,12(r20)
 800cea0:	a1000415 	stw	r4,16(r20)
 800cea4:	003fb606 	br	800cd80 <_fpadd_parts+0x1a8>
 800cea8:	001f883a 	mov	r15,zero
 800ceac:	0021883a 	mov	r16,zero
 800ceb0:	003f8306 	br	800ccc0 <_fpadd_parts+0xe8>
 800ceb4:	018dc83a 	sub	r6,zero,r6
 800ceb8:	003f6706 	br	800cc58 <_fpadd_parts+0x80>
 800cebc:	00bfff84 	movi	r2,-2
 800cec0:	117faf36 	bltu	r2,r5,800cd80 <_fpadd_parts+0x1a8>
 800cec4:	003f9806 	br	800cd28 <_fpadd_parts+0x150>
 800cec8:	0005883a 	mov	r2,zero
 800cecc:	1189c83a 	sub	r4,r2,r6
 800ced0:	1105803a 	cmpltu	r2,r2,r4
 800ced4:	01cbc83a 	sub	r5,zero,r7
 800ced8:	2885c83a 	sub	r2,r5,r2
 800cedc:	01800044 	movi	r6,1
 800cee0:	a1800115 	stw	r6,4(r20)
 800cee4:	a5c00215 	stw	r23,8(r20)
 800cee8:	a1000315 	stw	r4,12(r20)
 800ceec:	a0800415 	stw	r2,16(r20)
 800cef0:	003f8206 	br	800ccfc <_fpadd_parts+0x124>
 800cef4:	203f7226 	beq	r4,zero,800ccc0 <_fpadd_parts+0xe8>
 800cef8:	35bff804 	addi	r22,r6,-32
 800cefc:	b9af883a 	add	r23,r23,r6
 800cf00:	b0003116 	blt	r22,zero,800cfc8 <_fpadd_parts+0x3f0>
 800cf04:	959ad83a 	srl	r13,r18,r22
 800cf08:	001d883a 	mov	r14,zero
 800cf0c:	000f883a 	mov	r7,zero
 800cf10:	01000044 	movi	r4,1
 800cf14:	0011883a 	mov	r8,zero
 800cf18:	b0002516 	blt	r22,zero,800cfb0 <_fpadd_parts+0x3d8>
 800cf1c:	2594983a 	sll	r10,r4,r22
 800cf20:	0013883a 	mov	r9,zero
 800cf24:	00bfffc4 	movi	r2,-1
 800cf28:	4889883a 	add	r4,r9,r2
 800cf2c:	508b883a 	add	r5,r10,r2
 800cf30:	224d803a 	cmpltu	r6,r4,r9
 800cf34:	314b883a 	add	r5,r6,r5
 800cf38:	8904703a 	and	r2,r17,r4
 800cf3c:	9146703a 	and	r3,r18,r5
 800cf40:	10c4b03a 	or	r2,r2,r3
 800cf44:	10000226 	beq	r2,zero,800cf50 <_fpadd_parts+0x378>
 800cf48:	01c00044 	movi	r7,1
 800cf4c:	0011883a 	mov	r8,zero
 800cf50:	69e2b03a 	or	r17,r13,r7
 800cf54:	7224b03a 	or	r18,r14,r8
 800cf58:	003f5906 	br	800ccc0 <_fpadd_parts+0xe8>
 800cf5c:	8407883a 	add	r3,r16,r16
 800cf60:	008007c4 	movi	r2,31
 800cf64:	1185c83a 	sub	r2,r2,r6
 800cf68:	1886983a 	sll	r3,r3,r2
 800cf6c:	7996d83a 	srl	r11,r15,r6
 800cf70:	8198d83a 	srl	r12,r16,r6
 800cf74:	1ad6b03a 	or	r11,r3,r11
 800cf78:	003f3e06 	br	800cc74 <_fpadd_parts+0x9c>
 800cf7c:	2006d07a 	srli	r3,r4,1
 800cf80:	008007c4 	movi	r2,31
 800cf84:	1185c83a 	sub	r2,r2,r6
 800cf88:	1890d83a 	srl	r8,r3,r2
 800cf8c:	218e983a 	sll	r7,r4,r6
 800cf90:	003f3e06 	br	800cc8c <_fpadd_parts+0xb4>
 800cf94:	113f821e 	bne	r2,r4,800cda0 <_fpadd_parts+0x1c8>
 800cf98:	28c00117 	ldw	r3,4(r5)
 800cf9c:	98800117 	ldw	r2,4(r19)
 800cfa0:	10ff7f26 	beq	r2,r3,800cda0 <_fpadd_parts+0x1c8>
 800cfa4:	04c200b4 	movhi	r19,2050
 800cfa8:	9ce0c004 	addi	r19,r19,-32000
 800cfac:	003f7c06 	br	800cda0 <_fpadd_parts+0x1c8>
 800cfb0:	2006d07a 	srli	r3,r4,1
 800cfb4:	008007c4 	movi	r2,31
 800cfb8:	1185c83a 	sub	r2,r2,r6
 800cfbc:	1894d83a 	srl	r10,r3,r2
 800cfc0:	2192983a 	sll	r9,r4,r6
 800cfc4:	003fd706 	br	800cf24 <_fpadd_parts+0x34c>
 800cfc8:	9487883a 	add	r3,r18,r18
 800cfcc:	008007c4 	movi	r2,31
 800cfd0:	1185c83a 	sub	r2,r2,r6
 800cfd4:	1886983a 	sll	r3,r3,r2
 800cfd8:	899ad83a 	srl	r13,r17,r6
 800cfdc:	919cd83a 	srl	r14,r18,r6
 800cfe0:	1b5ab03a 	or	r13,r3,r13
 800cfe4:	003fc906 	br	800cf0c <_fpadd_parts+0x334>

0800cfe8 <__subdf3>:
 800cfe8:	deffea04 	addi	sp,sp,-88
 800cfec:	dcc01415 	stw	r19,80(sp)
 800cff0:	dcc00404 	addi	r19,sp,16
 800cff4:	2011883a 	mov	r8,r4
 800cff8:	2813883a 	mov	r9,r5
 800cffc:	dc401315 	stw	r17,76(sp)
 800d000:	d809883a 	mov	r4,sp
 800d004:	980b883a 	mov	r5,r19
 800d008:	dc400904 	addi	r17,sp,36
 800d00c:	dfc01515 	stw	ra,84(sp)
 800d010:	da400115 	stw	r9,4(sp)
 800d014:	d9c00315 	stw	r7,12(sp)
 800d018:	da000015 	stw	r8,0(sp)
 800d01c:	d9800215 	stw	r6,8(sp)
 800d020:	800dd040 	call	800dd04 <__unpack_d>
 800d024:	d9000204 	addi	r4,sp,8
 800d028:	880b883a 	mov	r5,r17
 800d02c:	800dd040 	call	800dd04 <__unpack_d>
 800d030:	d8800a17 	ldw	r2,40(sp)
 800d034:	880b883a 	mov	r5,r17
 800d038:	9809883a 	mov	r4,r19
 800d03c:	d9800e04 	addi	r6,sp,56
 800d040:	1080005c 	xori	r2,r2,1
 800d044:	d8800a15 	stw	r2,40(sp)
 800d048:	800cbd80 	call	800cbd8 <_fpadd_parts>
 800d04c:	1009883a 	mov	r4,r2
 800d050:	80033d80 	call	80033d8 <__pack_d>
 800d054:	dfc01517 	ldw	ra,84(sp)
 800d058:	dcc01417 	ldw	r19,80(sp)
 800d05c:	dc401317 	ldw	r17,76(sp)
 800d060:	dec01604 	addi	sp,sp,88
 800d064:	f800283a 	ret

0800d068 <__adddf3>:
 800d068:	deffea04 	addi	sp,sp,-88
 800d06c:	dcc01415 	stw	r19,80(sp)
 800d070:	dcc00404 	addi	r19,sp,16
 800d074:	2011883a 	mov	r8,r4
 800d078:	2813883a 	mov	r9,r5
 800d07c:	dc401315 	stw	r17,76(sp)
 800d080:	d809883a 	mov	r4,sp
 800d084:	980b883a 	mov	r5,r19
 800d088:	dc400904 	addi	r17,sp,36
 800d08c:	dfc01515 	stw	ra,84(sp)
 800d090:	da400115 	stw	r9,4(sp)
 800d094:	d9c00315 	stw	r7,12(sp)
 800d098:	da000015 	stw	r8,0(sp)
 800d09c:	d9800215 	stw	r6,8(sp)
 800d0a0:	800dd040 	call	800dd04 <__unpack_d>
 800d0a4:	d9000204 	addi	r4,sp,8
 800d0a8:	880b883a 	mov	r5,r17
 800d0ac:	800dd040 	call	800dd04 <__unpack_d>
 800d0b0:	d9800e04 	addi	r6,sp,56
 800d0b4:	9809883a 	mov	r4,r19
 800d0b8:	880b883a 	mov	r5,r17
 800d0bc:	800cbd80 	call	800cbd8 <_fpadd_parts>
 800d0c0:	1009883a 	mov	r4,r2
 800d0c4:	80033d80 	call	80033d8 <__pack_d>
 800d0c8:	dfc01517 	ldw	ra,84(sp)
 800d0cc:	dcc01417 	ldw	r19,80(sp)
 800d0d0:	dc401317 	ldw	r17,76(sp)
 800d0d4:	dec01604 	addi	sp,sp,88
 800d0d8:	f800283a 	ret

0800d0dc <__muldf3>:
 800d0dc:	deffe004 	addi	sp,sp,-128
 800d0e0:	dc401815 	stw	r17,96(sp)
 800d0e4:	dc400404 	addi	r17,sp,16
 800d0e8:	2011883a 	mov	r8,r4
 800d0ec:	2813883a 	mov	r9,r5
 800d0f0:	dc001715 	stw	r16,92(sp)
 800d0f4:	d809883a 	mov	r4,sp
 800d0f8:	880b883a 	mov	r5,r17
 800d0fc:	dc000904 	addi	r16,sp,36
 800d100:	dfc01f15 	stw	ra,124(sp)
 800d104:	da400115 	stw	r9,4(sp)
 800d108:	d9c00315 	stw	r7,12(sp)
 800d10c:	da000015 	stw	r8,0(sp)
 800d110:	d9800215 	stw	r6,8(sp)
 800d114:	ddc01e15 	stw	r23,120(sp)
 800d118:	dd801d15 	stw	r22,116(sp)
 800d11c:	dd401c15 	stw	r21,112(sp)
 800d120:	dd001b15 	stw	r20,108(sp)
 800d124:	dcc01a15 	stw	r19,104(sp)
 800d128:	dc801915 	stw	r18,100(sp)
 800d12c:	800dd040 	call	800dd04 <__unpack_d>
 800d130:	d9000204 	addi	r4,sp,8
 800d134:	800b883a 	mov	r5,r16
 800d138:	800dd040 	call	800dd04 <__unpack_d>
 800d13c:	d9000417 	ldw	r4,16(sp)
 800d140:	00800044 	movi	r2,1
 800d144:	1100102e 	bgeu	r2,r4,800d188 <__muldf3+0xac>
 800d148:	d8c00917 	ldw	r3,36(sp)
 800d14c:	10c0062e 	bgeu	r2,r3,800d168 <__muldf3+0x8c>
 800d150:	00800104 	movi	r2,4
 800d154:	20800a26 	beq	r4,r2,800d180 <__muldf3+0xa4>
 800d158:	1880cc26 	beq	r3,r2,800d48c <__muldf3+0x3b0>
 800d15c:	00800084 	movi	r2,2
 800d160:	20800926 	beq	r4,r2,800d188 <__muldf3+0xac>
 800d164:	1880191e 	bne	r3,r2,800d1cc <__muldf3+0xf0>
 800d168:	d8c00a17 	ldw	r3,40(sp)
 800d16c:	d8800517 	ldw	r2,20(sp)
 800d170:	8009883a 	mov	r4,r16
 800d174:	10c4c03a 	cmpne	r2,r2,r3
 800d178:	d8800a15 	stw	r2,40(sp)
 800d17c:	00000706 	br	800d19c <__muldf3+0xc0>
 800d180:	00800084 	movi	r2,2
 800d184:	1880c326 	beq	r3,r2,800d494 <__muldf3+0x3b8>
 800d188:	d8800517 	ldw	r2,20(sp)
 800d18c:	d8c00a17 	ldw	r3,40(sp)
 800d190:	8809883a 	mov	r4,r17
 800d194:	10c4c03a 	cmpne	r2,r2,r3
 800d198:	d8800515 	stw	r2,20(sp)
 800d19c:	80033d80 	call	80033d8 <__pack_d>
 800d1a0:	dfc01f17 	ldw	ra,124(sp)
 800d1a4:	ddc01e17 	ldw	r23,120(sp)
 800d1a8:	dd801d17 	ldw	r22,116(sp)
 800d1ac:	dd401c17 	ldw	r21,112(sp)
 800d1b0:	dd001b17 	ldw	r20,108(sp)
 800d1b4:	dcc01a17 	ldw	r19,104(sp)
 800d1b8:	dc801917 	ldw	r18,100(sp)
 800d1bc:	dc401817 	ldw	r17,96(sp)
 800d1c0:	dc001717 	ldw	r16,92(sp)
 800d1c4:	dec02004 	addi	sp,sp,128
 800d1c8:	f800283a 	ret
 800d1cc:	dd800717 	ldw	r22,28(sp)
 800d1d0:	dc800c17 	ldw	r18,48(sp)
 800d1d4:	002b883a 	mov	r21,zero
 800d1d8:	0023883a 	mov	r17,zero
 800d1dc:	a80b883a 	mov	r5,r21
 800d1e0:	b00d883a 	mov	r6,r22
 800d1e4:	880f883a 	mov	r7,r17
 800d1e8:	ddc00817 	ldw	r23,32(sp)
 800d1ec:	dcc00d17 	ldw	r19,52(sp)
 800d1f0:	9009883a 	mov	r4,r18
 800d1f4:	8002ff00 	call	8002ff0 <__muldi3>
 800d1f8:	001b883a 	mov	r13,zero
 800d1fc:	680f883a 	mov	r7,r13
 800d200:	b009883a 	mov	r4,r22
 800d204:	000b883a 	mov	r5,zero
 800d208:	980d883a 	mov	r6,r19
 800d20c:	b82d883a 	mov	r22,r23
 800d210:	002f883a 	mov	r23,zero
 800d214:	db401615 	stw	r13,88(sp)
 800d218:	d8801315 	stw	r2,76(sp)
 800d21c:	d8c01415 	stw	r3,80(sp)
 800d220:	dcc01515 	stw	r19,84(sp)
 800d224:	8002ff00 	call	8002ff0 <__muldi3>
 800d228:	b00d883a 	mov	r6,r22
 800d22c:	000b883a 	mov	r5,zero
 800d230:	9009883a 	mov	r4,r18
 800d234:	b80f883a 	mov	r7,r23
 800d238:	1021883a 	mov	r16,r2
 800d23c:	1823883a 	mov	r17,r3
 800d240:	8002ff00 	call	8002ff0 <__muldi3>
 800d244:	8085883a 	add	r2,r16,r2
 800d248:	140d803a 	cmpltu	r6,r2,r16
 800d24c:	88c7883a 	add	r3,r17,r3
 800d250:	30cd883a 	add	r6,r6,r3
 800d254:	1029883a 	mov	r20,r2
 800d258:	302b883a 	mov	r21,r6
 800d25c:	da801317 	ldw	r10,76(sp)
 800d260:	dac01417 	ldw	r11,80(sp)
 800d264:	db001517 	ldw	r12,84(sp)
 800d268:	db401617 	ldw	r13,88(sp)
 800d26c:	3440612e 	bgeu	r6,r17,800d3f4 <__muldf3+0x318>
 800d270:	0009883a 	mov	r4,zero
 800d274:	5105883a 	add	r2,r10,r4
 800d278:	128d803a 	cmpltu	r6,r2,r10
 800d27c:	5d07883a 	add	r3,r11,r20
 800d280:	30cd883a 	add	r6,r6,r3
 800d284:	0021883a 	mov	r16,zero
 800d288:	04400044 	movi	r17,1
 800d28c:	1025883a 	mov	r18,r2
 800d290:	3027883a 	mov	r19,r6
 800d294:	32c06236 	bltu	r6,r11,800d420 <__muldf3+0x344>
 800d298:	59807a26 	beq	r11,r6,800d484 <__muldf3+0x3a8>
 800d29c:	680b883a 	mov	r5,r13
 800d2a0:	b80f883a 	mov	r7,r23
 800d2a4:	6009883a 	mov	r4,r12
 800d2a8:	b00d883a 	mov	r6,r22
 800d2ac:	8002ff00 	call	8002ff0 <__muldi3>
 800d2b0:	1009883a 	mov	r4,r2
 800d2b4:	000f883a 	mov	r7,zero
 800d2b8:	1545883a 	add	r2,r2,r21
 800d2bc:	1111803a 	cmpltu	r8,r2,r4
 800d2c0:	19c7883a 	add	r3,r3,r7
 800d2c4:	40c7883a 	add	r3,r8,r3
 800d2c8:	88cb883a 	add	r5,r17,r3
 800d2cc:	d8c00617 	ldw	r3,24(sp)
 800d2d0:	8089883a 	add	r4,r16,r2
 800d2d4:	d8800b17 	ldw	r2,44(sp)
 800d2d8:	18c00104 	addi	r3,r3,4
 800d2dc:	240d803a 	cmpltu	r6,r4,r16
 800d2e0:	10c7883a 	add	r3,r2,r3
 800d2e4:	2013883a 	mov	r9,r4
 800d2e8:	d8800a17 	ldw	r2,40(sp)
 800d2ec:	d9000517 	ldw	r4,20(sp)
 800d2f0:	314d883a 	add	r6,r6,r5
 800d2f4:	3015883a 	mov	r10,r6
 800d2f8:	2088c03a 	cmpne	r4,r4,r2
 800d2fc:	00880034 	movhi	r2,8192
 800d300:	10bfffc4 	addi	r2,r2,-1
 800d304:	d9000f15 	stw	r4,60(sp)
 800d308:	d8c01015 	stw	r3,64(sp)
 800d30c:	1180162e 	bgeu	r2,r6,800d368 <__muldf3+0x28c>
 800d310:	1811883a 	mov	r8,r3
 800d314:	101f883a 	mov	r15,r2
 800d318:	980497fa 	slli	r2,r19,31
 800d31c:	9016d07a 	srli	r11,r18,1
 800d320:	500697fa 	slli	r3,r10,31
 800d324:	480cd07a 	srli	r6,r9,1
 800d328:	500ed07a 	srli	r7,r10,1
 800d32c:	12d6b03a 	or	r11,r2,r11
 800d330:	00800044 	movi	r2,1
 800d334:	198cb03a 	or	r6,r3,r6
 800d338:	4888703a 	and	r4,r9,r2
 800d33c:	9818d07a 	srli	r12,r19,1
 800d340:	001b883a 	mov	r13,zero
 800d344:	03a00034 	movhi	r14,32768
 800d348:	3013883a 	mov	r9,r6
 800d34c:	3815883a 	mov	r10,r7
 800d350:	4091883a 	add	r8,r8,r2
 800d354:	20000226 	beq	r4,zero,800d360 <__muldf3+0x284>
 800d358:	5b64b03a 	or	r18,r11,r13
 800d35c:	63a6b03a 	or	r19,r12,r14
 800d360:	7abfed36 	bltu	r15,r10,800d318 <__muldf3+0x23c>
 800d364:	da001015 	stw	r8,64(sp)
 800d368:	00840034 	movhi	r2,4096
 800d36c:	10bfffc4 	addi	r2,r2,-1
 800d370:	12801436 	bltu	r2,r10,800d3c4 <__muldf3+0x2e8>
 800d374:	da001017 	ldw	r8,64(sp)
 800d378:	101f883a 	mov	r15,r2
 800d37c:	4a45883a 	add	r2,r9,r9
 800d380:	124d803a 	cmpltu	r6,r2,r9
 800d384:	5287883a 	add	r3,r10,r10
 800d388:	9497883a 	add	r11,r18,r18
 800d38c:	5c8f803a 	cmpltu	r7,r11,r18
 800d390:	9cd9883a 	add	r12,r19,r19
 800d394:	01000044 	movi	r4,1
 800d398:	30cd883a 	add	r6,r6,r3
 800d39c:	3b0f883a 	add	r7,r7,r12
 800d3a0:	423fffc4 	addi	r8,r8,-1
 800d3a4:	1013883a 	mov	r9,r2
 800d3a8:	3015883a 	mov	r10,r6
 800d3ac:	111ab03a 	or	r13,r2,r4
 800d3b0:	98003016 	blt	r19,zero,800d474 <__muldf3+0x398>
 800d3b4:	5825883a 	mov	r18,r11
 800d3b8:	3827883a 	mov	r19,r7
 800d3bc:	7abfef2e 	bgeu	r15,r10,800d37c <__muldf3+0x2a0>
 800d3c0:	da001015 	stw	r8,64(sp)
 800d3c4:	00803fc4 	movi	r2,255
 800d3c8:	488e703a 	and	r7,r9,r2
 800d3cc:	00802004 	movi	r2,128
 800d3d0:	0007883a 	mov	r3,zero
 800d3d4:	0011883a 	mov	r8,zero
 800d3d8:	38801826 	beq	r7,r2,800d43c <__muldf3+0x360>
 800d3dc:	008000c4 	movi	r2,3
 800d3e0:	d9000e04 	addi	r4,sp,56
 800d3e4:	da801215 	stw	r10,72(sp)
 800d3e8:	d8800e15 	stw	r2,56(sp)
 800d3ec:	da401115 	stw	r9,68(sp)
 800d3f0:	003f6a06 	br	800d19c <__muldf3+0xc0>
 800d3f4:	89802126 	beq	r17,r6,800d47c <__muldf3+0x3a0>
 800d3f8:	0009883a 	mov	r4,zero
 800d3fc:	5105883a 	add	r2,r10,r4
 800d400:	128d803a 	cmpltu	r6,r2,r10
 800d404:	5d07883a 	add	r3,r11,r20
 800d408:	30cd883a 	add	r6,r6,r3
 800d40c:	0021883a 	mov	r16,zero
 800d410:	0023883a 	mov	r17,zero
 800d414:	1025883a 	mov	r18,r2
 800d418:	3027883a 	mov	r19,r6
 800d41c:	32ff9e2e 	bgeu	r6,r11,800d298 <__muldf3+0x1bc>
 800d420:	00800044 	movi	r2,1
 800d424:	8089883a 	add	r4,r16,r2
 800d428:	240d803a 	cmpltu	r6,r4,r16
 800d42c:	344d883a 	add	r6,r6,r17
 800d430:	2021883a 	mov	r16,r4
 800d434:	3023883a 	mov	r17,r6
 800d438:	003f9806 	br	800d29c <__muldf3+0x1c0>
 800d43c:	403fe71e 	bne	r8,zero,800d3dc <__muldf3+0x300>
 800d440:	01004004 	movi	r4,256
 800d444:	4904703a 	and	r2,r9,r4
 800d448:	10c4b03a 	or	r2,r2,r3
 800d44c:	103fe31e 	bne	r2,zero,800d3dc <__muldf3+0x300>
 800d450:	94c4b03a 	or	r2,r18,r19
 800d454:	103fe126 	beq	r2,zero,800d3dc <__muldf3+0x300>
 800d458:	49c5883a 	add	r2,r9,r7
 800d45c:	1251803a 	cmpltu	r8,r2,r9
 800d460:	4291883a 	add	r8,r8,r10
 800d464:	013fc004 	movi	r4,-256
 800d468:	1112703a 	and	r9,r2,r4
 800d46c:	4015883a 	mov	r10,r8
 800d470:	003fda06 	br	800d3dc <__muldf3+0x300>
 800d474:	6813883a 	mov	r9,r13
 800d478:	003fce06 	br	800d3b4 <__muldf3+0x2d8>
 800d47c:	143f7c36 	bltu	r2,r16,800d270 <__muldf3+0x194>
 800d480:	003fdd06 	br	800d3f8 <__muldf3+0x31c>
 800d484:	12bf852e 	bgeu	r2,r10,800d29c <__muldf3+0x1c0>
 800d488:	003fe506 	br	800d420 <__muldf3+0x344>
 800d48c:	00800084 	movi	r2,2
 800d490:	20bf351e 	bne	r4,r2,800d168 <__muldf3+0x8c>
 800d494:	010200b4 	movhi	r4,2050
 800d498:	2120c004 	addi	r4,r4,-32000
 800d49c:	003f3f06 	br	800d19c <__muldf3+0xc0>

0800d4a0 <__divdf3>:
 800d4a0:	deffed04 	addi	sp,sp,-76
 800d4a4:	dcc01115 	stw	r19,68(sp)
 800d4a8:	dcc00404 	addi	r19,sp,16
 800d4ac:	2011883a 	mov	r8,r4
 800d4b0:	2813883a 	mov	r9,r5
 800d4b4:	dc000e15 	stw	r16,56(sp)
 800d4b8:	d809883a 	mov	r4,sp
 800d4bc:	980b883a 	mov	r5,r19
 800d4c0:	dc000904 	addi	r16,sp,36
 800d4c4:	dfc01215 	stw	ra,72(sp)
 800d4c8:	da400115 	stw	r9,4(sp)
 800d4cc:	d9c00315 	stw	r7,12(sp)
 800d4d0:	da000015 	stw	r8,0(sp)
 800d4d4:	d9800215 	stw	r6,8(sp)
 800d4d8:	dc801015 	stw	r18,64(sp)
 800d4dc:	dc400f15 	stw	r17,60(sp)
 800d4e0:	800dd040 	call	800dd04 <__unpack_d>
 800d4e4:	d9000204 	addi	r4,sp,8
 800d4e8:	800b883a 	mov	r5,r16
 800d4ec:	800dd040 	call	800dd04 <__unpack_d>
 800d4f0:	d9000417 	ldw	r4,16(sp)
 800d4f4:	00800044 	movi	r2,1
 800d4f8:	11000b2e 	bgeu	r2,r4,800d528 <__divdf3+0x88>
 800d4fc:	d9400917 	ldw	r5,36(sp)
 800d500:	1140762e 	bgeu	r2,r5,800d6dc <__divdf3+0x23c>
 800d504:	d8800517 	ldw	r2,20(sp)
 800d508:	d8c00a17 	ldw	r3,40(sp)
 800d50c:	01800104 	movi	r6,4
 800d510:	10c4f03a 	xor	r2,r2,r3
 800d514:	d8800515 	stw	r2,20(sp)
 800d518:	21800226 	beq	r4,r6,800d524 <__divdf3+0x84>
 800d51c:	00800084 	movi	r2,2
 800d520:	2080141e 	bne	r4,r2,800d574 <__divdf3+0xd4>
 800d524:	29000926 	beq	r5,r4,800d54c <__divdf3+0xac>
 800d528:	9809883a 	mov	r4,r19
 800d52c:	80033d80 	call	80033d8 <__pack_d>
 800d530:	dfc01217 	ldw	ra,72(sp)
 800d534:	dcc01117 	ldw	r19,68(sp)
 800d538:	dc801017 	ldw	r18,64(sp)
 800d53c:	dc400f17 	ldw	r17,60(sp)
 800d540:	dc000e17 	ldw	r16,56(sp)
 800d544:	dec01304 	addi	sp,sp,76
 800d548:	f800283a 	ret
 800d54c:	010200b4 	movhi	r4,2050
 800d550:	2120c004 	addi	r4,r4,-32000
 800d554:	80033d80 	call	80033d8 <__pack_d>
 800d558:	dfc01217 	ldw	ra,72(sp)
 800d55c:	dcc01117 	ldw	r19,68(sp)
 800d560:	dc801017 	ldw	r18,64(sp)
 800d564:	dc400f17 	ldw	r17,60(sp)
 800d568:	dc000e17 	ldw	r16,56(sp)
 800d56c:	dec01304 	addi	sp,sp,76
 800d570:	f800283a 	ret
 800d574:	29805b26 	beq	r5,r6,800d6e4 <__divdf3+0x244>
 800d578:	28802d26 	beq	r5,r2,800d630 <__divdf3+0x190>
 800d57c:	d8c00617 	ldw	r3,24(sp)
 800d580:	d8800b17 	ldw	r2,44(sp)
 800d584:	d9c00817 	ldw	r7,32(sp)
 800d588:	dc400d17 	ldw	r17,52(sp)
 800d58c:	188bc83a 	sub	r5,r3,r2
 800d590:	d9800717 	ldw	r6,28(sp)
 800d594:	dc000c17 	ldw	r16,48(sp)
 800d598:	d9400615 	stw	r5,24(sp)
 800d59c:	3c403836 	bltu	r7,r17,800d680 <__divdf3+0x1e0>
 800d5a0:	89c03626 	beq	r17,r7,800d67c <__divdf3+0x1dc>
 800d5a4:	0015883a 	mov	r10,zero
 800d5a8:	001d883a 	mov	r14,zero
 800d5ac:	02c40034 	movhi	r11,4096
 800d5b0:	001f883a 	mov	r15,zero
 800d5b4:	003f883a 	mov	ra,zero
 800d5b8:	04800f44 	movi	r18,61
 800d5bc:	00000f06 	br	800d5fc <__divdf3+0x15c>
 800d5c0:	601d883a 	mov	r14,r12
 800d5c4:	681f883a 	mov	r15,r13
 800d5c8:	400d883a 	mov	r6,r8
 800d5cc:	100f883a 	mov	r7,r2
 800d5d0:	3191883a 	add	r8,r6,r6
 800d5d4:	5808d07a 	srli	r4,r11,1
 800d5d8:	4185803a 	cmpltu	r2,r8,r6
 800d5dc:	39d3883a 	add	r9,r7,r7
 800d5e0:	28c6b03a 	or	r3,r5,r3
 800d5e4:	1245883a 	add	r2,r2,r9
 800d5e8:	1815883a 	mov	r10,r3
 800d5ec:	2017883a 	mov	r11,r4
 800d5f0:	400d883a 	mov	r6,r8
 800d5f4:	100f883a 	mov	r7,r2
 800d5f8:	fc801726 	beq	ra,r18,800d658 <__divdf3+0x1b8>
 800d5fc:	580a97fa 	slli	r5,r11,31
 800d600:	5006d07a 	srli	r3,r10,1
 800d604:	ffc00044 	addi	ra,ra,1
 800d608:	3c7ff136 	bltu	r7,r17,800d5d0 <__divdf3+0x130>
 800d60c:	3411c83a 	sub	r8,r6,r16
 800d610:	3205803a 	cmpltu	r2,r6,r8
 800d614:	3c53c83a 	sub	r9,r7,r17
 800d618:	7298b03a 	or	r12,r14,r10
 800d61c:	7adab03a 	or	r13,r15,r11
 800d620:	4885c83a 	sub	r2,r9,r2
 800d624:	89ffe61e 	bne	r17,r7,800d5c0 <__divdf3+0x120>
 800d628:	343fe936 	bltu	r6,r16,800d5d0 <__divdf3+0x130>
 800d62c:	003fe406 	br	800d5c0 <__divdf3+0x120>
 800d630:	9809883a 	mov	r4,r19
 800d634:	d9800415 	stw	r6,16(sp)
 800d638:	80033d80 	call	80033d8 <__pack_d>
 800d63c:	dfc01217 	ldw	ra,72(sp)
 800d640:	dcc01117 	ldw	r19,68(sp)
 800d644:	dc801017 	ldw	r18,64(sp)
 800d648:	dc400f17 	ldw	r17,60(sp)
 800d64c:	dc000e17 	ldw	r16,56(sp)
 800d650:	dec01304 	addi	sp,sp,76
 800d654:	f800283a 	ret
 800d658:	00803fc4 	movi	r2,255
 800d65c:	7090703a 	and	r8,r14,r2
 800d660:	00802004 	movi	r2,128
 800d664:	0007883a 	mov	r3,zero
 800d668:	0013883a 	mov	r9,zero
 800d66c:	40800d26 	beq	r8,r2,800d6a4 <__divdf3+0x204>
 800d670:	dbc00815 	stw	r15,32(sp)
 800d674:	db800715 	stw	r14,28(sp)
 800d678:	003fab06 	br	800d528 <__divdf3+0x88>
 800d67c:	343fc92e 	bgeu	r6,r16,800d5a4 <__divdf3+0x104>
 800d680:	3185883a 	add	r2,r6,r6
 800d684:	1189803a 	cmpltu	r4,r2,r6
 800d688:	39c7883a 	add	r3,r7,r7
 800d68c:	20c9883a 	add	r4,r4,r3
 800d690:	297fffc4 	addi	r5,r5,-1
 800d694:	100d883a 	mov	r6,r2
 800d698:	200f883a 	mov	r7,r4
 800d69c:	d9400615 	stw	r5,24(sp)
 800d6a0:	003fc006 	br	800d5a4 <__divdf3+0x104>
 800d6a4:	483ff21e 	bne	r9,zero,800d670 <__divdf3+0x1d0>
 800d6a8:	01004004 	movi	r4,256
 800d6ac:	7104703a 	and	r2,r14,r4
 800d6b0:	10c4b03a 	or	r2,r2,r3
 800d6b4:	103fee1e 	bne	r2,zero,800d670 <__divdf3+0x1d0>
 800d6b8:	31c4b03a 	or	r2,r6,r7
 800d6bc:	103fec26 	beq	r2,zero,800d670 <__divdf3+0x1d0>
 800d6c0:	7205883a 	add	r2,r14,r8
 800d6c4:	1391803a 	cmpltu	r8,r2,r14
 800d6c8:	43d1883a 	add	r8,r8,r15
 800d6cc:	013fc004 	movi	r4,-256
 800d6d0:	111c703a 	and	r14,r2,r4
 800d6d4:	401f883a 	mov	r15,r8
 800d6d8:	003fe506 	br	800d670 <__divdf3+0x1d0>
 800d6dc:	8009883a 	mov	r4,r16
 800d6e0:	003f9206 	br	800d52c <__divdf3+0x8c>
 800d6e4:	9809883a 	mov	r4,r19
 800d6e8:	d8000715 	stw	zero,28(sp)
 800d6ec:	d8000815 	stw	zero,32(sp)
 800d6f0:	d8000615 	stw	zero,24(sp)
 800d6f4:	003f8d06 	br	800d52c <__divdf3+0x8c>

0800d6f8 <__eqdf2>:
 800d6f8:	deffef04 	addi	sp,sp,-68
 800d6fc:	dc400f15 	stw	r17,60(sp)
 800d700:	dc400404 	addi	r17,sp,16
 800d704:	2005883a 	mov	r2,r4
 800d708:	2807883a 	mov	r3,r5
 800d70c:	dc000e15 	stw	r16,56(sp)
 800d710:	d809883a 	mov	r4,sp
 800d714:	880b883a 	mov	r5,r17
 800d718:	dc000904 	addi	r16,sp,36
 800d71c:	d8c00115 	stw	r3,4(sp)
 800d720:	d8800015 	stw	r2,0(sp)
 800d724:	d9800215 	stw	r6,8(sp)
 800d728:	dfc01015 	stw	ra,64(sp)
 800d72c:	d9c00315 	stw	r7,12(sp)
 800d730:	800dd040 	call	800dd04 <__unpack_d>
 800d734:	d9000204 	addi	r4,sp,8
 800d738:	800b883a 	mov	r5,r16
 800d73c:	800dd040 	call	800dd04 <__unpack_d>
 800d740:	d8800417 	ldw	r2,16(sp)
 800d744:	00c00044 	movi	r3,1
 800d748:	180d883a 	mov	r6,r3
 800d74c:	1880062e 	bgeu	r3,r2,800d768 <__eqdf2+0x70>
 800d750:	d8800917 	ldw	r2,36(sp)
 800d754:	8809883a 	mov	r4,r17
 800d758:	800b883a 	mov	r5,r16
 800d75c:	1880022e 	bgeu	r3,r2,800d768 <__eqdf2+0x70>
 800d760:	800de3c0 	call	800de3c <__fpcmp_parts_d>
 800d764:	100d883a 	mov	r6,r2
 800d768:	3005883a 	mov	r2,r6
 800d76c:	dfc01017 	ldw	ra,64(sp)
 800d770:	dc400f17 	ldw	r17,60(sp)
 800d774:	dc000e17 	ldw	r16,56(sp)
 800d778:	dec01104 	addi	sp,sp,68
 800d77c:	f800283a 	ret

0800d780 <__nedf2>:
 800d780:	deffef04 	addi	sp,sp,-68
 800d784:	dc400f15 	stw	r17,60(sp)
 800d788:	dc400404 	addi	r17,sp,16
 800d78c:	2005883a 	mov	r2,r4
 800d790:	2807883a 	mov	r3,r5
 800d794:	dc000e15 	stw	r16,56(sp)
 800d798:	d809883a 	mov	r4,sp
 800d79c:	880b883a 	mov	r5,r17
 800d7a0:	dc000904 	addi	r16,sp,36
 800d7a4:	d8c00115 	stw	r3,4(sp)
 800d7a8:	d8800015 	stw	r2,0(sp)
 800d7ac:	d9800215 	stw	r6,8(sp)
 800d7b0:	dfc01015 	stw	ra,64(sp)
 800d7b4:	d9c00315 	stw	r7,12(sp)
 800d7b8:	800dd040 	call	800dd04 <__unpack_d>
 800d7bc:	d9000204 	addi	r4,sp,8
 800d7c0:	800b883a 	mov	r5,r16
 800d7c4:	800dd040 	call	800dd04 <__unpack_d>
 800d7c8:	d8800417 	ldw	r2,16(sp)
 800d7cc:	00c00044 	movi	r3,1
 800d7d0:	180d883a 	mov	r6,r3
 800d7d4:	1880062e 	bgeu	r3,r2,800d7f0 <__nedf2+0x70>
 800d7d8:	d8800917 	ldw	r2,36(sp)
 800d7dc:	8809883a 	mov	r4,r17
 800d7e0:	800b883a 	mov	r5,r16
 800d7e4:	1880022e 	bgeu	r3,r2,800d7f0 <__nedf2+0x70>
 800d7e8:	800de3c0 	call	800de3c <__fpcmp_parts_d>
 800d7ec:	100d883a 	mov	r6,r2
 800d7f0:	3005883a 	mov	r2,r6
 800d7f4:	dfc01017 	ldw	ra,64(sp)
 800d7f8:	dc400f17 	ldw	r17,60(sp)
 800d7fc:	dc000e17 	ldw	r16,56(sp)
 800d800:	dec01104 	addi	sp,sp,68
 800d804:	f800283a 	ret

0800d808 <__gtdf2>:
 800d808:	deffef04 	addi	sp,sp,-68
 800d80c:	dc400f15 	stw	r17,60(sp)
 800d810:	dc400404 	addi	r17,sp,16
 800d814:	2005883a 	mov	r2,r4
 800d818:	2807883a 	mov	r3,r5
 800d81c:	dc000e15 	stw	r16,56(sp)
 800d820:	d809883a 	mov	r4,sp
 800d824:	880b883a 	mov	r5,r17
 800d828:	dc000904 	addi	r16,sp,36
 800d82c:	d8c00115 	stw	r3,4(sp)
 800d830:	d8800015 	stw	r2,0(sp)
 800d834:	d9800215 	stw	r6,8(sp)
 800d838:	dfc01015 	stw	ra,64(sp)
 800d83c:	d9c00315 	stw	r7,12(sp)
 800d840:	800dd040 	call	800dd04 <__unpack_d>
 800d844:	d9000204 	addi	r4,sp,8
 800d848:	800b883a 	mov	r5,r16
 800d84c:	800dd040 	call	800dd04 <__unpack_d>
 800d850:	d8800417 	ldw	r2,16(sp)
 800d854:	00c00044 	movi	r3,1
 800d858:	01bfffc4 	movi	r6,-1
 800d85c:	1880062e 	bgeu	r3,r2,800d878 <__gtdf2+0x70>
 800d860:	d8800917 	ldw	r2,36(sp)
 800d864:	8809883a 	mov	r4,r17
 800d868:	800b883a 	mov	r5,r16
 800d86c:	1880022e 	bgeu	r3,r2,800d878 <__gtdf2+0x70>
 800d870:	800de3c0 	call	800de3c <__fpcmp_parts_d>
 800d874:	100d883a 	mov	r6,r2
 800d878:	3005883a 	mov	r2,r6
 800d87c:	dfc01017 	ldw	ra,64(sp)
 800d880:	dc400f17 	ldw	r17,60(sp)
 800d884:	dc000e17 	ldw	r16,56(sp)
 800d888:	dec01104 	addi	sp,sp,68
 800d88c:	f800283a 	ret

0800d890 <__gedf2>:
 800d890:	deffef04 	addi	sp,sp,-68
 800d894:	dc400f15 	stw	r17,60(sp)
 800d898:	dc400404 	addi	r17,sp,16
 800d89c:	2005883a 	mov	r2,r4
 800d8a0:	2807883a 	mov	r3,r5
 800d8a4:	dc000e15 	stw	r16,56(sp)
 800d8a8:	d809883a 	mov	r4,sp
 800d8ac:	880b883a 	mov	r5,r17
 800d8b0:	dc000904 	addi	r16,sp,36
 800d8b4:	d8c00115 	stw	r3,4(sp)
 800d8b8:	d8800015 	stw	r2,0(sp)
 800d8bc:	d9800215 	stw	r6,8(sp)
 800d8c0:	dfc01015 	stw	ra,64(sp)
 800d8c4:	d9c00315 	stw	r7,12(sp)
 800d8c8:	800dd040 	call	800dd04 <__unpack_d>
 800d8cc:	d9000204 	addi	r4,sp,8
 800d8d0:	800b883a 	mov	r5,r16
 800d8d4:	800dd040 	call	800dd04 <__unpack_d>
 800d8d8:	d8800417 	ldw	r2,16(sp)
 800d8dc:	00c00044 	movi	r3,1
 800d8e0:	01bfffc4 	movi	r6,-1
 800d8e4:	1880062e 	bgeu	r3,r2,800d900 <__gedf2+0x70>
 800d8e8:	d8800917 	ldw	r2,36(sp)
 800d8ec:	8809883a 	mov	r4,r17
 800d8f0:	800b883a 	mov	r5,r16
 800d8f4:	1880022e 	bgeu	r3,r2,800d900 <__gedf2+0x70>
 800d8f8:	800de3c0 	call	800de3c <__fpcmp_parts_d>
 800d8fc:	100d883a 	mov	r6,r2
 800d900:	3005883a 	mov	r2,r6
 800d904:	dfc01017 	ldw	ra,64(sp)
 800d908:	dc400f17 	ldw	r17,60(sp)
 800d90c:	dc000e17 	ldw	r16,56(sp)
 800d910:	dec01104 	addi	sp,sp,68
 800d914:	f800283a 	ret

0800d918 <__ltdf2>:
 800d918:	deffef04 	addi	sp,sp,-68
 800d91c:	dc400f15 	stw	r17,60(sp)
 800d920:	dc400404 	addi	r17,sp,16
 800d924:	2005883a 	mov	r2,r4
 800d928:	2807883a 	mov	r3,r5
 800d92c:	dc000e15 	stw	r16,56(sp)
 800d930:	d809883a 	mov	r4,sp
 800d934:	880b883a 	mov	r5,r17
 800d938:	dc000904 	addi	r16,sp,36
 800d93c:	d8c00115 	stw	r3,4(sp)
 800d940:	d8800015 	stw	r2,0(sp)
 800d944:	d9800215 	stw	r6,8(sp)
 800d948:	dfc01015 	stw	ra,64(sp)
 800d94c:	d9c00315 	stw	r7,12(sp)
 800d950:	800dd040 	call	800dd04 <__unpack_d>
 800d954:	d9000204 	addi	r4,sp,8
 800d958:	800b883a 	mov	r5,r16
 800d95c:	800dd040 	call	800dd04 <__unpack_d>
 800d960:	d8800417 	ldw	r2,16(sp)
 800d964:	00c00044 	movi	r3,1
 800d968:	180d883a 	mov	r6,r3
 800d96c:	1880062e 	bgeu	r3,r2,800d988 <__ltdf2+0x70>
 800d970:	d8800917 	ldw	r2,36(sp)
 800d974:	8809883a 	mov	r4,r17
 800d978:	800b883a 	mov	r5,r16
 800d97c:	1880022e 	bgeu	r3,r2,800d988 <__ltdf2+0x70>
 800d980:	800de3c0 	call	800de3c <__fpcmp_parts_d>
 800d984:	100d883a 	mov	r6,r2
 800d988:	3005883a 	mov	r2,r6
 800d98c:	dfc01017 	ldw	ra,64(sp)
 800d990:	dc400f17 	ldw	r17,60(sp)
 800d994:	dc000e17 	ldw	r16,56(sp)
 800d998:	dec01104 	addi	sp,sp,68
 800d99c:	f800283a 	ret

0800d9a0 <__floatsidf>:
 800d9a0:	2006d7fa 	srli	r3,r4,31
 800d9a4:	defff604 	addi	sp,sp,-40
 800d9a8:	008000c4 	movi	r2,3
 800d9ac:	dfc00915 	stw	ra,36(sp)
 800d9b0:	dcc00815 	stw	r19,32(sp)
 800d9b4:	dc800715 	stw	r18,28(sp)
 800d9b8:	dc400615 	stw	r17,24(sp)
 800d9bc:	dc000515 	stw	r16,20(sp)
 800d9c0:	d8800015 	stw	r2,0(sp)
 800d9c4:	d8c00115 	stw	r3,4(sp)
 800d9c8:	20000f1e 	bne	r4,zero,800da08 <__floatsidf+0x68>
 800d9cc:	00800084 	movi	r2,2
 800d9d0:	d8800015 	stw	r2,0(sp)
 800d9d4:	d809883a 	mov	r4,sp
 800d9d8:	80033d80 	call	80033d8 <__pack_d>
 800d9dc:	1009883a 	mov	r4,r2
 800d9e0:	180b883a 	mov	r5,r3
 800d9e4:	2005883a 	mov	r2,r4
 800d9e8:	2807883a 	mov	r3,r5
 800d9ec:	dfc00917 	ldw	ra,36(sp)
 800d9f0:	dcc00817 	ldw	r19,32(sp)
 800d9f4:	dc800717 	ldw	r18,28(sp)
 800d9f8:	dc400617 	ldw	r17,24(sp)
 800d9fc:	dc000517 	ldw	r16,20(sp)
 800da00:	dec00a04 	addi	sp,sp,40
 800da04:	f800283a 	ret
 800da08:	00800f04 	movi	r2,60
 800da0c:	1807003a 	cmpeq	r3,r3,zero
 800da10:	d8800215 	stw	r2,8(sp)
 800da14:	18001126 	beq	r3,zero,800da5c <__floatsidf+0xbc>
 800da18:	0027883a 	mov	r19,zero
 800da1c:	2025883a 	mov	r18,r4
 800da20:	d9000315 	stw	r4,12(sp)
 800da24:	dcc00415 	stw	r19,16(sp)
 800da28:	80030880 	call	8003088 <__clzsi2>
 800da2c:	11000744 	addi	r4,r2,29
 800da30:	013fe80e 	bge	zero,r4,800d9d4 <__floatsidf+0x34>
 800da34:	10bfff44 	addi	r2,r2,-3
 800da38:	10000c16 	blt	r2,zero,800da6c <__floatsidf+0xcc>
 800da3c:	90a2983a 	sll	r17,r18,r2
 800da40:	0021883a 	mov	r16,zero
 800da44:	d8800217 	ldw	r2,8(sp)
 800da48:	dc400415 	stw	r17,16(sp)
 800da4c:	dc000315 	stw	r16,12(sp)
 800da50:	1105c83a 	sub	r2,r2,r4
 800da54:	d8800215 	stw	r2,8(sp)
 800da58:	003fde06 	br	800d9d4 <__floatsidf+0x34>
 800da5c:	00a00034 	movhi	r2,32768
 800da60:	20800a26 	beq	r4,r2,800da8c <__floatsidf+0xec>
 800da64:	0109c83a 	sub	r4,zero,r4
 800da68:	003feb06 	br	800da18 <__floatsidf+0x78>
 800da6c:	9006d07a 	srli	r3,r18,1
 800da70:	008007c4 	movi	r2,31
 800da74:	1105c83a 	sub	r2,r2,r4
 800da78:	1886d83a 	srl	r3,r3,r2
 800da7c:	9922983a 	sll	r17,r19,r4
 800da80:	9120983a 	sll	r16,r18,r4
 800da84:	1c62b03a 	or	r17,r3,r17
 800da88:	003fee06 	br	800da44 <__floatsidf+0xa4>
 800da8c:	0009883a 	mov	r4,zero
 800da90:	01707834 	movhi	r5,49632
 800da94:	003fd306 	br	800d9e4 <__floatsidf+0x44>

0800da98 <__fixdfsi>:
 800da98:	defff804 	addi	sp,sp,-32
 800da9c:	2005883a 	mov	r2,r4
 800daa0:	2807883a 	mov	r3,r5
 800daa4:	d809883a 	mov	r4,sp
 800daa8:	d9400204 	addi	r5,sp,8
 800daac:	d8c00115 	stw	r3,4(sp)
 800dab0:	d8800015 	stw	r2,0(sp)
 800dab4:	dfc00715 	stw	ra,28(sp)
 800dab8:	800dd040 	call	800dd04 <__unpack_d>
 800dabc:	d8c00217 	ldw	r3,8(sp)
 800dac0:	00800084 	movi	r2,2
 800dac4:	1880051e 	bne	r3,r2,800dadc <__fixdfsi+0x44>
 800dac8:	0007883a 	mov	r3,zero
 800dacc:	1805883a 	mov	r2,r3
 800dad0:	dfc00717 	ldw	ra,28(sp)
 800dad4:	dec00804 	addi	sp,sp,32
 800dad8:	f800283a 	ret
 800dadc:	00800044 	movi	r2,1
 800dae0:	10fff92e 	bgeu	r2,r3,800dac8 <__fixdfsi+0x30>
 800dae4:	00800104 	movi	r2,4
 800dae8:	18800426 	beq	r3,r2,800dafc <__fixdfsi+0x64>
 800daec:	d8c00417 	ldw	r3,16(sp)
 800daf0:	183ff516 	blt	r3,zero,800dac8 <__fixdfsi+0x30>
 800daf4:	00800784 	movi	r2,30
 800daf8:	10c0080e 	bge	r2,r3,800db1c <__fixdfsi+0x84>
 800dafc:	d8800317 	ldw	r2,12(sp)
 800db00:	1000121e 	bne	r2,zero,800db4c <__fixdfsi+0xb4>
 800db04:	00e00034 	movhi	r3,32768
 800db08:	18ffffc4 	addi	r3,r3,-1
 800db0c:	1805883a 	mov	r2,r3
 800db10:	dfc00717 	ldw	ra,28(sp)
 800db14:	dec00804 	addi	sp,sp,32
 800db18:	f800283a 	ret
 800db1c:	00800f04 	movi	r2,60
 800db20:	10d1c83a 	sub	r8,r2,r3
 800db24:	40bff804 	addi	r2,r8,-32
 800db28:	d9800517 	ldw	r6,20(sp)
 800db2c:	d9c00617 	ldw	r7,24(sp)
 800db30:	10000816 	blt	r2,zero,800db54 <__fixdfsi+0xbc>
 800db34:	3888d83a 	srl	r4,r7,r2
 800db38:	d8800317 	ldw	r2,12(sp)
 800db3c:	2007883a 	mov	r3,r4
 800db40:	103fe226 	beq	r2,zero,800dacc <__fixdfsi+0x34>
 800db44:	0107c83a 	sub	r3,zero,r4
 800db48:	003fe006 	br	800dacc <__fixdfsi+0x34>
 800db4c:	00e00034 	movhi	r3,32768
 800db50:	003fde06 	br	800dacc <__fixdfsi+0x34>
 800db54:	39c7883a 	add	r3,r7,r7
 800db58:	008007c4 	movi	r2,31
 800db5c:	1205c83a 	sub	r2,r2,r8
 800db60:	1886983a 	sll	r3,r3,r2
 800db64:	3208d83a 	srl	r4,r6,r8
 800db68:	1908b03a 	or	r4,r3,r4
 800db6c:	003ff206 	br	800db38 <__fixdfsi+0xa0>

0800db70 <__floatunsidf>:
 800db70:	defff204 	addi	sp,sp,-56
 800db74:	dfc00d15 	stw	ra,52(sp)
 800db78:	ddc00c15 	stw	r23,48(sp)
 800db7c:	dd800b15 	stw	r22,44(sp)
 800db80:	dd400a15 	stw	r21,40(sp)
 800db84:	dd000915 	stw	r20,36(sp)
 800db88:	dcc00815 	stw	r19,32(sp)
 800db8c:	dc800715 	stw	r18,28(sp)
 800db90:	dc400615 	stw	r17,24(sp)
 800db94:	dc000515 	stw	r16,20(sp)
 800db98:	d8000115 	stw	zero,4(sp)
 800db9c:	20000f1e 	bne	r4,zero,800dbdc <__floatunsidf+0x6c>
 800dba0:	00800084 	movi	r2,2
 800dba4:	d8800015 	stw	r2,0(sp)
 800dba8:	d809883a 	mov	r4,sp
 800dbac:	80033d80 	call	80033d8 <__pack_d>
 800dbb0:	dfc00d17 	ldw	ra,52(sp)
 800dbb4:	ddc00c17 	ldw	r23,48(sp)
 800dbb8:	dd800b17 	ldw	r22,44(sp)
 800dbbc:	dd400a17 	ldw	r21,40(sp)
 800dbc0:	dd000917 	ldw	r20,36(sp)
 800dbc4:	dcc00817 	ldw	r19,32(sp)
 800dbc8:	dc800717 	ldw	r18,28(sp)
 800dbcc:	dc400617 	ldw	r17,24(sp)
 800dbd0:	dc000517 	ldw	r16,20(sp)
 800dbd4:	dec00e04 	addi	sp,sp,56
 800dbd8:	f800283a 	ret
 800dbdc:	008000c4 	movi	r2,3
 800dbe0:	00c00f04 	movi	r3,60
 800dbe4:	002f883a 	mov	r23,zero
 800dbe8:	202d883a 	mov	r22,r4
 800dbec:	d8800015 	stw	r2,0(sp)
 800dbf0:	d8c00215 	stw	r3,8(sp)
 800dbf4:	d9000315 	stw	r4,12(sp)
 800dbf8:	ddc00415 	stw	r23,16(sp)
 800dbfc:	80030880 	call	8003088 <__clzsi2>
 800dc00:	12400744 	addi	r9,r2,29
 800dc04:	48000b16 	blt	r9,zero,800dc34 <__floatunsidf+0xc4>
 800dc08:	483fe726 	beq	r9,zero,800dba8 <__floatunsidf+0x38>
 800dc0c:	10bfff44 	addi	r2,r2,-3
 800dc10:	10002e16 	blt	r2,zero,800dccc <__floatunsidf+0x15c>
 800dc14:	b0a2983a 	sll	r17,r22,r2
 800dc18:	0021883a 	mov	r16,zero
 800dc1c:	d8800217 	ldw	r2,8(sp)
 800dc20:	dc400415 	stw	r17,16(sp)
 800dc24:	dc000315 	stw	r16,12(sp)
 800dc28:	1245c83a 	sub	r2,r2,r9
 800dc2c:	d8800215 	stw	r2,8(sp)
 800dc30:	003fdd06 	br	800dba8 <__floatunsidf+0x38>
 800dc34:	0255c83a 	sub	r10,zero,r9
 800dc38:	51bff804 	addi	r6,r10,-32
 800dc3c:	30001b16 	blt	r6,zero,800dcac <__floatunsidf+0x13c>
 800dc40:	b9a8d83a 	srl	r20,r23,r6
 800dc44:	002b883a 	mov	r21,zero
 800dc48:	000f883a 	mov	r7,zero
 800dc4c:	01000044 	movi	r4,1
 800dc50:	0011883a 	mov	r8,zero
 800dc54:	30002516 	blt	r6,zero,800dcec <__floatunsidf+0x17c>
 800dc58:	21a6983a 	sll	r19,r4,r6
 800dc5c:	0025883a 	mov	r18,zero
 800dc60:	00bfffc4 	movi	r2,-1
 800dc64:	9089883a 	add	r4,r18,r2
 800dc68:	988b883a 	add	r5,r19,r2
 800dc6c:	248d803a 	cmpltu	r6,r4,r18
 800dc70:	314b883a 	add	r5,r6,r5
 800dc74:	b104703a 	and	r2,r22,r4
 800dc78:	b946703a 	and	r3,r23,r5
 800dc7c:	10c4b03a 	or	r2,r2,r3
 800dc80:	10000226 	beq	r2,zero,800dc8c <__floatunsidf+0x11c>
 800dc84:	01c00044 	movi	r7,1
 800dc88:	0011883a 	mov	r8,zero
 800dc8c:	d9000217 	ldw	r4,8(sp)
 800dc90:	a1c4b03a 	or	r2,r20,r7
 800dc94:	aa06b03a 	or	r3,r21,r8
 800dc98:	2249c83a 	sub	r4,r4,r9
 800dc9c:	d8c00415 	stw	r3,16(sp)
 800dca0:	d9000215 	stw	r4,8(sp)
 800dca4:	d8800315 	stw	r2,12(sp)
 800dca8:	003fbf06 	br	800dba8 <__floatunsidf+0x38>
 800dcac:	bdc7883a 	add	r3,r23,r23
 800dcb0:	008007c4 	movi	r2,31
 800dcb4:	1285c83a 	sub	r2,r2,r10
 800dcb8:	1886983a 	sll	r3,r3,r2
 800dcbc:	b2a8d83a 	srl	r20,r22,r10
 800dcc0:	baaad83a 	srl	r21,r23,r10
 800dcc4:	1d28b03a 	or	r20,r3,r20
 800dcc8:	003fdf06 	br	800dc48 <__floatunsidf+0xd8>
 800dccc:	b006d07a 	srli	r3,r22,1
 800dcd0:	008007c4 	movi	r2,31
 800dcd4:	1245c83a 	sub	r2,r2,r9
 800dcd8:	1886d83a 	srl	r3,r3,r2
 800dcdc:	ba62983a 	sll	r17,r23,r9
 800dce0:	b260983a 	sll	r16,r22,r9
 800dce4:	1c62b03a 	or	r17,r3,r17
 800dce8:	003fcc06 	br	800dc1c <__floatunsidf+0xac>
 800dcec:	2006d07a 	srli	r3,r4,1
 800dcf0:	008007c4 	movi	r2,31
 800dcf4:	1285c83a 	sub	r2,r2,r10
 800dcf8:	18a6d83a 	srl	r19,r3,r2
 800dcfc:	22a4983a 	sll	r18,r4,r10
 800dd00:	003fd706 	br	800dc60 <__floatunsidf+0xf0>

0800dd04 <__unpack_d>:
 800dd04:	20c00117 	ldw	r3,4(r4)
 800dd08:	22400017 	ldw	r9,0(r4)
 800dd0c:	00800434 	movhi	r2,16
 800dd10:	10bfffc4 	addi	r2,r2,-1
 800dd14:	1808d53a 	srli	r4,r3,20
 800dd18:	180cd7fa 	srli	r6,r3,31
 800dd1c:	1894703a 	and	r10,r3,r2
 800dd20:	2201ffcc 	andi	r8,r4,2047
 800dd24:	281b883a 	mov	r13,r5
 800dd28:	4817883a 	mov	r11,r9
 800dd2c:	29800115 	stw	r6,4(r5)
 800dd30:	5019883a 	mov	r12,r10
 800dd34:	40001e1e 	bne	r8,zero,800ddb0 <__unpack_d+0xac>
 800dd38:	4a84b03a 	or	r2,r9,r10
 800dd3c:	10001926 	beq	r2,zero,800dda4 <__unpack_d+0xa0>
 800dd40:	4804d63a 	srli	r2,r9,24
 800dd44:	500c923a 	slli	r6,r10,8
 800dd48:	013f0084 	movi	r4,-1022
 800dd4c:	00c40034 	movhi	r3,4096
 800dd50:	18ffffc4 	addi	r3,r3,-1
 800dd54:	118cb03a 	or	r6,r2,r6
 800dd58:	008000c4 	movi	r2,3
 800dd5c:	480a923a 	slli	r5,r9,8
 800dd60:	68800015 	stw	r2,0(r13)
 800dd64:	69000215 	stw	r4,8(r13)
 800dd68:	19800b36 	bltu	r3,r6,800dd98 <__unpack_d+0x94>
 800dd6c:	200f883a 	mov	r7,r4
 800dd70:	1811883a 	mov	r8,r3
 800dd74:	2945883a 	add	r2,r5,r5
 800dd78:	1149803a 	cmpltu	r4,r2,r5
 800dd7c:	3187883a 	add	r3,r6,r6
 800dd80:	20c9883a 	add	r4,r4,r3
 800dd84:	100b883a 	mov	r5,r2
 800dd88:	200d883a 	mov	r6,r4
 800dd8c:	39ffffc4 	addi	r7,r7,-1
 800dd90:	413ff82e 	bgeu	r8,r4,800dd74 <__unpack_d+0x70>
 800dd94:	69c00215 	stw	r7,8(r13)
 800dd98:	69800415 	stw	r6,16(r13)
 800dd9c:	69400315 	stw	r5,12(r13)
 800dda0:	f800283a 	ret
 800dda4:	00800084 	movi	r2,2
 800dda8:	28800015 	stw	r2,0(r5)
 800ddac:	f800283a 	ret
 800ddb0:	0081ffc4 	movi	r2,2047
 800ddb4:	40800f26 	beq	r8,r2,800ddf4 <__unpack_d+0xf0>
 800ddb8:	480cd63a 	srli	r6,r9,24
 800ddbc:	5006923a 	slli	r3,r10,8
 800ddc0:	4804923a 	slli	r2,r9,8
 800ddc4:	0009883a 	mov	r4,zero
 800ddc8:	30c6b03a 	or	r3,r6,r3
 800ddcc:	01440034 	movhi	r5,4096
 800ddd0:	110cb03a 	or	r6,r2,r4
 800ddd4:	423f0044 	addi	r8,r8,-1023
 800ddd8:	194eb03a 	or	r7,r3,r5
 800dddc:	008000c4 	movi	r2,3
 800dde0:	69c00415 	stw	r7,16(r13)
 800dde4:	6a000215 	stw	r8,8(r13)
 800dde8:	68800015 	stw	r2,0(r13)
 800ddec:	69800315 	stw	r6,12(r13)
 800ddf0:	f800283a 	ret
 800ddf4:	4a84b03a 	or	r2,r9,r10
 800ddf8:	1000031e 	bne	r2,zero,800de08 <__unpack_d+0x104>
 800ddfc:	00800104 	movi	r2,4
 800de00:	28800015 	stw	r2,0(r5)
 800de04:	f800283a 	ret
 800de08:	0009883a 	mov	r4,zero
 800de0c:	01400234 	movhi	r5,8
 800de10:	4904703a 	and	r2,r9,r4
 800de14:	5146703a 	and	r3,r10,r5
 800de18:	10c4b03a 	or	r2,r2,r3
 800de1c:	10000526 	beq	r2,zero,800de34 <__unpack_d+0x130>
 800de20:	00800044 	movi	r2,1
 800de24:	68800015 	stw	r2,0(r13)
 800de28:	6b000415 	stw	r12,16(r13)
 800de2c:	6ac00315 	stw	r11,12(r13)
 800de30:	f800283a 	ret
 800de34:	68000015 	stw	zero,0(r13)
 800de38:	003ffb06 	br	800de28 <__unpack_d+0x124>

0800de3c <__fpcmp_parts_d>:
 800de3c:	21800017 	ldw	r6,0(r4)
 800de40:	00c00044 	movi	r3,1
 800de44:	19800a2e 	bgeu	r3,r6,800de70 <__fpcmp_parts_d+0x34>
 800de48:	28800017 	ldw	r2,0(r5)
 800de4c:	1880082e 	bgeu	r3,r2,800de70 <__fpcmp_parts_d+0x34>
 800de50:	00c00104 	movi	r3,4
 800de54:	30c02626 	beq	r6,r3,800def0 <__fpcmp_parts_d+0xb4>
 800de58:	10c02226 	beq	r2,r3,800dee4 <__fpcmp_parts_d+0xa8>
 800de5c:	00c00084 	movi	r3,2
 800de60:	30c00526 	beq	r6,r3,800de78 <__fpcmp_parts_d+0x3c>
 800de64:	10c0071e 	bne	r2,r3,800de84 <__fpcmp_parts_d+0x48>
 800de68:	20800117 	ldw	r2,4(r4)
 800de6c:	1000091e 	bne	r2,zero,800de94 <__fpcmp_parts_d+0x58>
 800de70:	00800044 	movi	r2,1
 800de74:	f800283a 	ret
 800de78:	10c01a1e 	bne	r2,r3,800dee4 <__fpcmp_parts_d+0xa8>
 800de7c:	0005883a 	mov	r2,zero
 800de80:	f800283a 	ret
 800de84:	22000117 	ldw	r8,4(r4)
 800de88:	28800117 	ldw	r2,4(r5)
 800de8c:	40800326 	beq	r8,r2,800de9c <__fpcmp_parts_d+0x60>
 800de90:	403ff726 	beq	r8,zero,800de70 <__fpcmp_parts_d+0x34>
 800de94:	00bfffc4 	movi	r2,-1
 800de98:	f800283a 	ret
 800de9c:	20c00217 	ldw	r3,8(r4)
 800dea0:	28800217 	ldw	r2,8(r5)
 800dea4:	10fffa16 	blt	r2,r3,800de90 <__fpcmp_parts_d+0x54>
 800dea8:	18800916 	blt	r3,r2,800ded0 <__fpcmp_parts_d+0x94>
 800deac:	21c00417 	ldw	r7,16(r4)
 800deb0:	28c00417 	ldw	r3,16(r5)
 800deb4:	21800317 	ldw	r6,12(r4)
 800deb8:	28800317 	ldw	r2,12(r5)
 800debc:	19fff436 	bltu	r3,r7,800de90 <__fpcmp_parts_d+0x54>
 800dec0:	38c00526 	beq	r7,r3,800ded8 <__fpcmp_parts_d+0x9c>
 800dec4:	38c00236 	bltu	r7,r3,800ded0 <__fpcmp_parts_d+0x94>
 800dec8:	19ffec1e 	bne	r3,r7,800de7c <__fpcmp_parts_d+0x40>
 800decc:	30bfeb2e 	bgeu	r6,r2,800de7c <__fpcmp_parts_d+0x40>
 800ded0:	403fe71e 	bne	r8,zero,800de70 <__fpcmp_parts_d+0x34>
 800ded4:	003fef06 	br	800de94 <__fpcmp_parts_d+0x58>
 800ded8:	11bffa2e 	bgeu	r2,r6,800dec4 <__fpcmp_parts_d+0x88>
 800dedc:	403fe426 	beq	r8,zero,800de70 <__fpcmp_parts_d+0x34>
 800dee0:	003fec06 	br	800de94 <__fpcmp_parts_d+0x58>
 800dee4:	28800117 	ldw	r2,4(r5)
 800dee8:	103fe11e 	bne	r2,zero,800de70 <__fpcmp_parts_d+0x34>
 800deec:	003fe906 	br	800de94 <__fpcmp_parts_d+0x58>
 800def0:	11bfdd1e 	bne	r2,r6,800de68 <__fpcmp_parts_d+0x2c>
 800def4:	28c00117 	ldw	r3,4(r5)
 800def8:	20800117 	ldw	r2,4(r4)
 800defc:	1885c83a 	sub	r2,r3,r2
 800df00:	f800283a 	ret

0800df04 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 800df04:	defff804 	addi	sp,sp,-32
 800df08:	dfc00715 	stw	ra,28(sp)
 800df0c:	df000615 	stw	fp,24(sp)
 800df10:	df000604 	addi	fp,sp,24
 800df14:	e13ffc15 	stw	r4,-16(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 800df18:	e0bffc17 	ldw	r2,-16(fp)
 800df1c:	1004803a 	cmplt	r2,r2,zero
 800df20:	1000081e 	bne	r2,zero,800df44 <close+0x40>
 800df24:	e0bffc17 	ldw	r2,-16(fp)
 800df28:	10800324 	muli	r2,r2,12
 800df2c:	1007883a 	mov	r3,r2
 800df30:	008200b4 	movhi	r2,2050
 800df34:	10a40e04 	addi	r2,r2,-28616
 800df38:	1887883a 	add	r3,r3,r2
 800df3c:	e0ffff15 	stw	r3,-4(fp)
 800df40:	00000106 	br	800df48 <close+0x44>
 800df44:	e03fff15 	stw	zero,-4(fp)
 800df48:	e0bfff17 	ldw	r2,-4(fp)
 800df4c:	e0bffb15 	stw	r2,-20(fp)

  if (fd)
 800df50:	e0bffb17 	ldw	r2,-20(fp)
 800df54:	1005003a 	cmpeq	r2,r2,zero
 800df58:	10001d1e 	bne	r2,zero,800dfd0 <close+0xcc>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 800df5c:	e0bffb17 	ldw	r2,-20(fp)
 800df60:	10800017 	ldw	r2,0(r2)
 800df64:	10800417 	ldw	r2,16(r2)
 800df68:	1005003a 	cmpeq	r2,r2,zero
 800df6c:	1000071e 	bne	r2,zero,800df8c <close+0x88>
 800df70:	e0bffb17 	ldw	r2,-20(fp)
 800df74:	10800017 	ldw	r2,0(r2)
 800df78:	10800417 	ldw	r2,16(r2)
 800df7c:	e13ffb17 	ldw	r4,-20(fp)
 800df80:	103ee83a 	callr	r2
 800df84:	e0bffe15 	stw	r2,-8(fp)
 800df88:	00000106 	br	800df90 <close+0x8c>
 800df8c:	e03ffe15 	stw	zero,-8(fp)
 800df90:	e0bffe17 	ldw	r2,-8(fp)
 800df94:	e0bffa15 	stw	r2,-24(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 800df98:	e13ffc17 	ldw	r4,-16(fp)
 800df9c:	800ea0c0 	call	800ea0c <alt_release_fd>
    if (rval < 0)
 800dfa0:	e0bffa17 	ldw	r2,-24(fp)
 800dfa4:	1004403a 	cmpge	r2,r2,zero
 800dfa8:	1000071e 	bne	r2,zero,800dfc8 <close+0xc4>
    {
      ALT_ERRNO = -rval;
 800dfac:	800e0000 	call	800e000 <alt_get_errno>
 800dfb0:	e0fffa17 	ldw	r3,-24(fp)
 800dfb4:	00c7c83a 	sub	r3,zero,r3
 800dfb8:	10c00015 	stw	r3,0(r2)
      return -1;
 800dfbc:	00bfffc4 	movi	r2,-1
 800dfc0:	e0bffd15 	stw	r2,-12(fp)
 800dfc4:	00000806 	br	800dfe8 <close+0xe4>
    }
    return 0;
 800dfc8:	e03ffd15 	stw	zero,-12(fp)
 800dfcc:	00000606 	br	800dfe8 <close+0xe4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 800dfd0:	800e0000 	call	800e000 <alt_get_errno>
 800dfd4:	1007883a 	mov	r3,r2
 800dfd8:	00801444 	movi	r2,81
 800dfdc:	18800015 	stw	r2,0(r3)
    return -1;
 800dfe0:	00bfffc4 	movi	r2,-1
 800dfe4:	e0bffd15 	stw	r2,-12(fp)
 800dfe8:	e0bffd17 	ldw	r2,-12(fp)
  }
}
 800dfec:	e037883a 	mov	sp,fp
 800dff0:	dfc00117 	ldw	ra,4(sp)
 800dff4:	df000017 	ldw	fp,0(sp)
 800dff8:	dec00204 	addi	sp,sp,8
 800dffc:	f800283a 	ret

0800e000 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 800e000:	defffd04 	addi	sp,sp,-12
 800e004:	dfc00215 	stw	ra,8(sp)
 800e008:	df000115 	stw	fp,4(sp)
 800e00c:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 800e010:	008200b4 	movhi	r2,2050
 800e014:	10a96404 	addi	r2,r2,-23152
 800e018:	10800017 	ldw	r2,0(r2)
 800e01c:	1005003a 	cmpeq	r2,r2,zero
 800e020:	1000061e 	bne	r2,zero,800e03c <alt_get_errno+0x3c>
 800e024:	008200b4 	movhi	r2,2050
 800e028:	10a96404 	addi	r2,r2,-23152
 800e02c:	10800017 	ldw	r2,0(r2)
 800e030:	103ee83a 	callr	r2
 800e034:	e0bfff15 	stw	r2,-4(fp)
 800e038:	00000306 	br	800e048 <alt_get_errno+0x48>
 800e03c:	008200b4 	movhi	r2,2050
 800e040:	10b12904 	addi	r2,r2,-15196
 800e044:	e0bfff15 	stw	r2,-4(fp)
 800e048:	e0bfff17 	ldw	r2,-4(fp)
}
 800e04c:	e037883a 	mov	sp,fp
 800e050:	dfc00117 	ldw	ra,4(sp)
 800e054:	df000017 	ldw	fp,0(sp)
 800e058:	dec00204 	addi	sp,sp,8
 800e05c:	f800283a 	ret

0800e060 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 800e060:	defffc04 	addi	sp,sp,-16
 800e064:	df000315 	stw	fp,12(sp)
 800e068:	df000304 	addi	fp,sp,12
 800e06c:	e13ffd15 	stw	r4,-12(fp)
 800e070:	e17ffe15 	stw	r5,-8(fp)
 800e074:	e1bfff15 	stw	r6,-4(fp)
  return len;
 800e078:	e0bfff17 	ldw	r2,-4(fp)
}
 800e07c:	e037883a 	mov	sp,fp
 800e080:	df000017 	ldw	fp,0(sp)
 800e084:	dec00104 	addi	sp,sp,4
 800e088:	f800283a 	ret

0800e08c <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
 800e08c:	defff904 	addi	sp,sp,-28
 800e090:	dfc00615 	stw	ra,24(sp)
 800e094:	df000515 	stw	fp,20(sp)
 800e098:	df000504 	addi	fp,sp,20
 800e09c:	e13ffc15 	stw	r4,-16(fp)
 800e0a0:	e17ffd15 	stw	r5,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 800e0a4:	e0bffc17 	ldw	r2,-16(fp)
 800e0a8:	1004803a 	cmplt	r2,r2,zero
 800e0ac:	1000081e 	bne	r2,zero,800e0d0 <fstat+0x44>
 800e0b0:	e0bffc17 	ldw	r2,-16(fp)
 800e0b4:	10800324 	muli	r2,r2,12
 800e0b8:	1007883a 	mov	r3,r2
 800e0bc:	008200b4 	movhi	r2,2050
 800e0c0:	10a40e04 	addi	r2,r2,-28616
 800e0c4:	1887883a 	add	r3,r3,r2
 800e0c8:	e0ffff15 	stw	r3,-4(fp)
 800e0cc:	00000106 	br	800e0d4 <fstat+0x48>
 800e0d0:	e03fff15 	stw	zero,-4(fp)
 800e0d4:	e0bfff17 	ldw	r2,-4(fp)
 800e0d8:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 800e0dc:	e0bffb17 	ldw	r2,-20(fp)
 800e0e0:	1005003a 	cmpeq	r2,r2,zero
 800e0e4:	1000121e 	bne	r2,zero,800e130 <fstat+0xa4>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
 800e0e8:	e0bffb17 	ldw	r2,-20(fp)
 800e0ec:	10800017 	ldw	r2,0(r2)
 800e0f0:	10800817 	ldw	r2,32(r2)
 800e0f4:	1005003a 	cmpeq	r2,r2,zero
 800e0f8:	1000081e 	bne	r2,zero,800e11c <fstat+0x90>
    {
      return fd->dev->fstat(fd, st);
 800e0fc:	e0bffb17 	ldw	r2,-20(fp)
 800e100:	10800017 	ldw	r2,0(r2)
 800e104:	10800817 	ldw	r2,32(r2)
 800e108:	e13ffb17 	ldw	r4,-20(fp)
 800e10c:	e17ffd17 	ldw	r5,-12(fp)
 800e110:	103ee83a 	callr	r2
 800e114:	e0bffe15 	stw	r2,-8(fp)
 800e118:	00000b06 	br	800e148 <fstat+0xbc>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
 800e11c:	e0fffd17 	ldw	r3,-12(fp)
 800e120:	00880004 	movi	r2,8192
 800e124:	18800115 	stw	r2,4(r3)
      return 0;
 800e128:	e03ffe15 	stw	zero,-8(fp)
 800e12c:	00000606 	br	800e148 <fstat+0xbc>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 800e130:	800e1600 	call	800e160 <alt_get_errno>
 800e134:	1007883a 	mov	r3,r2
 800e138:	00801444 	movi	r2,81
 800e13c:	18800015 	stw	r2,0(r3)
    return -1;
 800e140:	00bfffc4 	movi	r2,-1
 800e144:	e0bffe15 	stw	r2,-8(fp)
 800e148:	e0bffe17 	ldw	r2,-8(fp)
  }
}
 800e14c:	e037883a 	mov	sp,fp
 800e150:	dfc00117 	ldw	ra,4(sp)
 800e154:	df000017 	ldw	fp,0(sp)
 800e158:	dec00204 	addi	sp,sp,8
 800e15c:	f800283a 	ret

0800e160 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 800e160:	defffd04 	addi	sp,sp,-12
 800e164:	dfc00215 	stw	ra,8(sp)
 800e168:	df000115 	stw	fp,4(sp)
 800e16c:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 800e170:	008200b4 	movhi	r2,2050
 800e174:	10a96404 	addi	r2,r2,-23152
 800e178:	10800017 	ldw	r2,0(r2)
 800e17c:	1005003a 	cmpeq	r2,r2,zero
 800e180:	1000061e 	bne	r2,zero,800e19c <alt_get_errno+0x3c>
 800e184:	008200b4 	movhi	r2,2050
 800e188:	10a96404 	addi	r2,r2,-23152
 800e18c:	10800017 	ldw	r2,0(r2)
 800e190:	103ee83a 	callr	r2
 800e194:	e0bfff15 	stw	r2,-4(fp)
 800e198:	00000306 	br	800e1a8 <alt_get_errno+0x48>
 800e19c:	008200b4 	movhi	r2,2050
 800e1a0:	10b12904 	addi	r2,r2,-15196
 800e1a4:	e0bfff15 	stw	r2,-4(fp)
 800e1a8:	e0bfff17 	ldw	r2,-4(fp)
}
 800e1ac:	e037883a 	mov	sp,fp
 800e1b0:	dfc00117 	ldw	ra,4(sp)
 800e1b4:	df000017 	ldw	fp,0(sp)
 800e1b8:	dec00204 	addi	sp,sp,8
 800e1bc:	f800283a 	ret

0800e1c0 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
 800e1c0:	deffeb04 	addi	sp,sp,-84
 800e1c4:	dfc01415 	stw	ra,80(sp)
 800e1c8:	df001315 	stw	fp,76(sp)
 800e1cc:	df001304 	addi	fp,sp,76
 800e1d0:	e13ffd15 	stw	r4,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 800e1d4:	e0bffd17 	ldw	r2,-12(fp)
 800e1d8:	1004803a 	cmplt	r2,r2,zero
 800e1dc:	1000081e 	bne	r2,zero,800e200 <isatty+0x40>
 800e1e0:	e0bffd17 	ldw	r2,-12(fp)
 800e1e4:	10800324 	muli	r2,r2,12
 800e1e8:	1007883a 	mov	r3,r2
 800e1ec:	008200b4 	movhi	r2,2050
 800e1f0:	10a40e04 	addi	r2,r2,-28616
 800e1f4:	1887883a 	add	r3,r3,r2
 800e1f8:	e0ffff15 	stw	r3,-4(fp)
 800e1fc:	00000106 	br	800e204 <isatty+0x44>
 800e200:	e03fff15 	stw	zero,-4(fp)
 800e204:	e0bfff17 	ldw	r2,-4(fp)
 800e208:	e0bfed15 	stw	r2,-76(fp)
  
  if (fd)
 800e20c:	e0bfed17 	ldw	r2,-76(fp)
 800e210:	1005003a 	cmpeq	r2,r2,zero
 800e214:	10000f1e 	bne	r2,zero,800e254 <isatty+0x94>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
 800e218:	e0bfed17 	ldw	r2,-76(fp)
 800e21c:	10800017 	ldw	r2,0(r2)
 800e220:	10800817 	ldw	r2,32(r2)
 800e224:	1004c03a 	cmpne	r2,r2,zero
 800e228:	1000031e 	bne	r2,zero,800e238 <isatty+0x78>
    {
      return 1;
 800e22c:	00800044 	movi	r2,1
 800e230:	e0bffe15 	stw	r2,-8(fp)
 800e234:	00000c06 	br	800e268 <isatty+0xa8>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
 800e238:	e17fee04 	addi	r5,fp,-72
 800e23c:	e13ffd17 	ldw	r4,-12(fp)
 800e240:	800e08c0 	call	800e08c <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
 800e244:	e0bfef17 	ldw	r2,-68(fp)
 800e248:	10880020 	cmpeqi	r2,r2,8192
 800e24c:	e0bffe15 	stw	r2,-8(fp)
 800e250:	00000506 	br	800e268 <isatty+0xa8>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 800e254:	800e2800 	call	800e280 <alt_get_errno>
 800e258:	1007883a 	mov	r3,r2
 800e25c:	00801444 	movi	r2,81
 800e260:	18800015 	stw	r2,0(r3)
    return 0;
 800e264:	e03ffe15 	stw	zero,-8(fp)
 800e268:	e0bffe17 	ldw	r2,-8(fp)
  }
}
 800e26c:	e037883a 	mov	sp,fp
 800e270:	dfc00117 	ldw	ra,4(sp)
 800e274:	df000017 	ldw	fp,0(sp)
 800e278:	dec00204 	addi	sp,sp,8
 800e27c:	f800283a 	ret

0800e280 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 800e280:	defffd04 	addi	sp,sp,-12
 800e284:	dfc00215 	stw	ra,8(sp)
 800e288:	df000115 	stw	fp,4(sp)
 800e28c:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 800e290:	008200b4 	movhi	r2,2050
 800e294:	10a96404 	addi	r2,r2,-23152
 800e298:	10800017 	ldw	r2,0(r2)
 800e29c:	1005003a 	cmpeq	r2,r2,zero
 800e2a0:	1000061e 	bne	r2,zero,800e2bc <alt_get_errno+0x3c>
 800e2a4:	008200b4 	movhi	r2,2050
 800e2a8:	10a96404 	addi	r2,r2,-23152
 800e2ac:	10800017 	ldw	r2,0(r2)
 800e2b0:	103ee83a 	callr	r2
 800e2b4:	e0bfff15 	stw	r2,-4(fp)
 800e2b8:	00000306 	br	800e2c8 <alt_get_errno+0x48>
 800e2bc:	008200b4 	movhi	r2,2050
 800e2c0:	10b12904 	addi	r2,r2,-15196
 800e2c4:	e0bfff15 	stw	r2,-4(fp)
 800e2c8:	e0bfff17 	ldw	r2,-4(fp)
}
 800e2cc:	e037883a 	mov	sp,fp
 800e2d0:	dfc00117 	ldw	ra,4(sp)
 800e2d4:	df000017 	ldw	fp,0(sp)
 800e2d8:	dec00204 	addi	sp,sp,8
 800e2dc:	f800283a 	ret

0800e2e0 <alt_load>:
 800e2e0:	defffe04 	addi	sp,sp,-8
 800e2e4:	dfc00115 	stw	ra,4(sp)
 800e2e8:	df000015 	stw	fp,0(sp)
 800e2ec:	d839883a 	mov	fp,sp
 800e2f0:	010200b4 	movhi	r4,2050
 800e2f4:	21297104 	addi	r4,r4,-23100
 800e2f8:	014200b4 	movhi	r5,2050
 800e2fc:	2961bf04 	addi	r5,r5,-30980
 800e300:	018200b4 	movhi	r6,2050
 800e304:	31a97104 	addi	r6,r6,-23100
 800e308:	800e3600 	call	800e360 <alt_load_section>
 800e30c:	01020034 	movhi	r4,2048
 800e310:	21000804 	addi	r4,r4,32
 800e314:	01420034 	movhi	r5,2048
 800e318:	29400804 	addi	r5,r5,32
 800e31c:	01820034 	movhi	r6,2048
 800e320:	31806d04 	addi	r6,r6,436
 800e324:	800e3600 	call	800e360 <alt_load_section>
 800e328:	01020074 	movhi	r4,2049
 800e32c:	211cbb04 	addi	r4,r4,29420
 800e330:	01420074 	movhi	r5,2049
 800e334:	295cbb04 	addi	r5,r5,29420
 800e338:	018200b4 	movhi	r6,2050
 800e33c:	31a1bf04 	addi	r6,r6,-30980
 800e340:	800e3600 	call	800e360 <alt_load_section>
 800e344:	80156d00 	call	80156d0 <alt_dcache_flush_all>
 800e348:	8015cbc0 	call	8015cbc <alt_icache_flush_all>
 800e34c:	e037883a 	mov	sp,fp
 800e350:	dfc00117 	ldw	ra,4(sp)
 800e354:	df000017 	ldw	fp,0(sp)
 800e358:	dec00204 	addi	sp,sp,8
 800e35c:	f800283a 	ret

0800e360 <alt_load_section>:
 800e360:	defffc04 	addi	sp,sp,-16
 800e364:	df000315 	stw	fp,12(sp)
 800e368:	df000304 	addi	fp,sp,12
 800e36c:	e13ffd15 	stw	r4,-12(fp)
 800e370:	e17ffe15 	stw	r5,-8(fp)
 800e374:	e1bfff15 	stw	r6,-4(fp)
 800e378:	e0fffe17 	ldw	r3,-8(fp)
 800e37c:	e0bffd17 	ldw	r2,-12(fp)
 800e380:	18800e26 	beq	r3,r2,800e3bc <alt_load_section+0x5c>
 800e384:	00000a06 	br	800e3b0 <alt_load_section+0x50>
 800e388:	e0bffd17 	ldw	r2,-12(fp)
 800e38c:	10c00017 	ldw	r3,0(r2)
 800e390:	e0bffe17 	ldw	r2,-8(fp)
 800e394:	10c00015 	stw	r3,0(r2)
 800e398:	e0bffe17 	ldw	r2,-8(fp)
 800e39c:	10800104 	addi	r2,r2,4
 800e3a0:	e0bffe15 	stw	r2,-8(fp)
 800e3a4:	e0bffd17 	ldw	r2,-12(fp)
 800e3a8:	10800104 	addi	r2,r2,4
 800e3ac:	e0bffd15 	stw	r2,-12(fp)
 800e3b0:	e0fffe17 	ldw	r3,-8(fp)
 800e3b4:	e0bfff17 	ldw	r2,-4(fp)
 800e3b8:	18bff31e 	bne	r3,r2,800e388 <alt_load_section+0x28>
 800e3bc:	e037883a 	mov	sp,fp
 800e3c0:	df000017 	ldw	fp,0(sp)
 800e3c4:	dec00104 	addi	sp,sp,4
 800e3c8:	f800283a 	ret

0800e3cc <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
 800e3cc:	defff804 	addi	sp,sp,-32
 800e3d0:	dfc00715 	stw	ra,28(sp)
 800e3d4:	df000615 	stw	fp,24(sp)
 800e3d8:	df000604 	addi	fp,sp,24
 800e3dc:	e13ffc15 	stw	r4,-16(fp)
 800e3e0:	e17ffd15 	stw	r5,-12(fp)
 800e3e4:	e1bffe15 	stw	r6,-8(fp)
  alt_fd* fd;
  off_t   rc = 0; 
 800e3e8:	e03ffa15 	stw	zero,-24(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 800e3ec:	e0bffc17 	ldw	r2,-16(fp)
 800e3f0:	1004803a 	cmplt	r2,r2,zero
 800e3f4:	1000081e 	bne	r2,zero,800e418 <lseek+0x4c>
 800e3f8:	e0bffc17 	ldw	r2,-16(fp)
 800e3fc:	10800324 	muli	r2,r2,12
 800e400:	1007883a 	mov	r3,r2
 800e404:	008200b4 	movhi	r2,2050
 800e408:	10a40e04 	addi	r2,r2,-28616
 800e40c:	1887883a 	add	r3,r3,r2
 800e410:	e0ffff15 	stw	r3,-4(fp)
 800e414:	00000106 	br	800e41c <lseek+0x50>
 800e418:	e03fff15 	stw	zero,-4(fp)
 800e41c:	e0bfff17 	ldw	r2,-4(fp)
 800e420:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd) 
 800e424:	e0bffb17 	ldw	r2,-20(fp)
 800e428:	1005003a 	cmpeq	r2,r2,zero
 800e42c:	1000111e 	bne	r2,zero,800e474 <lseek+0xa8>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
 800e430:	e0bffb17 	ldw	r2,-20(fp)
 800e434:	10800017 	ldw	r2,0(r2)
 800e438:	10800717 	ldw	r2,28(r2)
 800e43c:	1005003a 	cmpeq	r2,r2,zero
 800e440:	1000091e 	bne	r2,zero,800e468 <lseek+0x9c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
 800e444:	e0bffb17 	ldw	r2,-20(fp)
 800e448:	10800017 	ldw	r2,0(r2)
 800e44c:	10800717 	ldw	r2,28(r2)
 800e450:	e13ffb17 	ldw	r4,-20(fp)
 800e454:	e17ffd17 	ldw	r5,-12(fp)
 800e458:	e1bffe17 	ldw	r6,-8(fp)
 800e45c:	103ee83a 	callr	r2
 800e460:	e0bffa15 	stw	r2,-24(fp)
 800e464:	00000506 	br	800e47c <lseek+0xb0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
 800e468:	00bfde84 	movi	r2,-134
 800e46c:	e0bffa15 	stw	r2,-24(fp)
 800e470:	00000206 	br	800e47c <lseek+0xb0>
    }
  }
  else  
  {
    rc = -EBADFD;
 800e474:	00bfebc4 	movi	r2,-81
 800e478:	e0bffa15 	stw	r2,-24(fp)
  }

  if (rc < 0)
 800e47c:	e0bffa17 	ldw	r2,-24(fp)
 800e480:	1004403a 	cmpge	r2,r2,zero
 800e484:	1000071e 	bne	r2,zero,800e4a4 <lseek+0xd8>
  {
    ALT_ERRNO = -rc;
 800e488:	800e4bc0 	call	800e4bc <alt_get_errno>
 800e48c:	1007883a 	mov	r3,r2
 800e490:	e0bffa17 	ldw	r2,-24(fp)
 800e494:	0085c83a 	sub	r2,zero,r2
 800e498:	18800015 	stw	r2,0(r3)
    rc = -1;
 800e49c:	00bfffc4 	movi	r2,-1
 800e4a0:	e0bffa15 	stw	r2,-24(fp)
  }

  return rc;
 800e4a4:	e0bffa17 	ldw	r2,-24(fp)
}
 800e4a8:	e037883a 	mov	sp,fp
 800e4ac:	dfc00117 	ldw	ra,4(sp)
 800e4b0:	df000017 	ldw	fp,0(sp)
 800e4b4:	dec00204 	addi	sp,sp,8
 800e4b8:	f800283a 	ret

0800e4bc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 800e4bc:	defffd04 	addi	sp,sp,-12
 800e4c0:	dfc00215 	stw	ra,8(sp)
 800e4c4:	df000115 	stw	fp,4(sp)
 800e4c8:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 800e4cc:	008200b4 	movhi	r2,2050
 800e4d0:	10a96404 	addi	r2,r2,-23152
 800e4d4:	10800017 	ldw	r2,0(r2)
 800e4d8:	1005003a 	cmpeq	r2,r2,zero
 800e4dc:	1000061e 	bne	r2,zero,800e4f8 <alt_get_errno+0x3c>
 800e4e0:	008200b4 	movhi	r2,2050
 800e4e4:	10a96404 	addi	r2,r2,-23152
 800e4e8:	10800017 	ldw	r2,0(r2)
 800e4ec:	103ee83a 	callr	r2
 800e4f0:	e0bfff15 	stw	r2,-4(fp)
 800e4f4:	00000306 	br	800e504 <alt_get_errno+0x48>
 800e4f8:	008200b4 	movhi	r2,2050
 800e4fc:	10b12904 	addi	r2,r2,-15196
 800e500:	e0bfff15 	stw	r2,-4(fp)
 800e504:	e0bfff17 	ldw	r2,-4(fp)
}
 800e508:	e037883a 	mov	sp,fp
 800e50c:	dfc00117 	ldw	ra,4(sp)
 800e510:	df000017 	ldw	fp,0(sp)
 800e514:	dec00204 	addi	sp,sp,8
 800e518:	f800283a 	ret

0800e51c <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 800e51c:	defffd04 	addi	sp,sp,-12
 800e520:	dfc00215 	stw	ra,8(sp)
 800e524:	df000115 	stw	fp,4(sp)
 800e528:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 800e52c:	0009883a 	mov	r4,zero
 800e530:	800eca80 	call	800eca8 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 800e534:	800ecdc0 	call	800ecdc <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 800e538:	010200b4 	movhi	r4,2050
 800e53c:	2120c804 	addi	r4,r4,-31968
 800e540:	014200b4 	movhi	r5,2050
 800e544:	2960c804 	addi	r5,r5,-31968
 800e548:	018200b4 	movhi	r6,2050
 800e54c:	31a0cd04 	addi	r6,r6,-31948
 800e550:	801607c0 	call	801607c <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
 800e554:	80158280 	call	8015828 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
 800e558:	01020074 	movhi	r4,2049
 800e55c:	21162304 	addi	r4,r4,22668
 800e560:	8016d840 	call	8016d84 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 800e564:	d127db17 	ldw	r4,-24724(gp)
 800e568:	d167dc17 	ldw	r5,-24720(gp)
 800e56c:	d1a7dd17 	ldw	r6,-24716(gp)
 800e570:	80002000 	call	8000200 <main>
 800e574:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
 800e578:	01000044 	movi	r4,1
 800e57c:	800df040 	call	800df04 <close>
  exit (result);
 800e580:	e13fff17 	ldw	r4,-4(fp)
 800e584:	8016d980 	call	8016d98 <exit>

0800e588 <__malloc_lock>:
 800e588:	defffe04 	addi	sp,sp,-8
 800e58c:	df000115 	stw	fp,4(sp)
 800e590:	df000104 	addi	fp,sp,4
 800e594:	e13fff15 	stw	r4,-4(fp)
 800e598:	e037883a 	mov	sp,fp
 800e59c:	df000017 	ldw	fp,0(sp)
 800e5a0:	dec00104 	addi	sp,sp,4
 800e5a4:	f800283a 	ret

0800e5a8 <__malloc_unlock>:
 800e5a8:	defffe04 	addi	sp,sp,-8
 800e5ac:	df000115 	stw	fp,4(sp)
 800e5b0:	df000104 	addi	fp,sp,4
 800e5b4:	e13fff15 	stw	r4,-4(fp)
 800e5b8:	e037883a 	mov	sp,fp
 800e5bc:	df000017 	ldw	fp,0(sp)
 800e5c0:	dec00104 	addi	sp,sp,4
 800e5c4:	f800283a 	ret

0800e5c8 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
 800e5c8:	defffc04 	addi	sp,sp,-16
 800e5cc:	df000315 	stw	fp,12(sp)
 800e5d0:	df000304 	addi	fp,sp,12
 800e5d4:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 800e5d8:	e0bffe17 	ldw	r2,-8(fp)
 800e5dc:	10800217 	ldw	r2,8(r2)
 800e5e0:	10d00034 	orhi	r3,r2,16384
 800e5e4:	e0bffe17 	ldw	r2,-8(fp)
 800e5e8:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 800e5ec:	e03ffd15 	stw	zero,-12(fp)
 800e5f0:	00002006 	br	800e674 <alt_file_locked+0xac>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 800e5f4:	e0bffd17 	ldw	r2,-12(fp)
 800e5f8:	00c200b4 	movhi	r3,2050
 800e5fc:	18e40e04 	addi	r3,r3,-28616
 800e600:	10800324 	muli	r2,r2,12
 800e604:	10c5883a 	add	r2,r2,r3
 800e608:	10c00017 	ldw	r3,0(r2)
 800e60c:	e0bffe17 	ldw	r2,-8(fp)
 800e610:	10800017 	ldw	r2,0(r2)
 800e614:	1880141e 	bne	r3,r2,800e668 <alt_file_locked+0xa0>
 800e618:	e0bffd17 	ldw	r2,-12(fp)
 800e61c:	00c200b4 	movhi	r3,2050
 800e620:	18e40e04 	addi	r3,r3,-28616
 800e624:	10800324 	muli	r2,r2,12
 800e628:	10c5883a 	add	r2,r2,r3
 800e62c:	10800204 	addi	r2,r2,8
 800e630:	10800017 	ldw	r2,0(r2)
 800e634:	1004403a 	cmpge	r2,r2,zero
 800e638:	10000b1e 	bne	r2,zero,800e668 <alt_file_locked+0xa0>
 800e63c:	e0bffd17 	ldw	r2,-12(fp)
 800e640:	10800324 	muli	r2,r2,12
 800e644:	1007883a 	mov	r3,r2
 800e648:	008200b4 	movhi	r2,2050
 800e64c:	10a40e04 	addi	r2,r2,-28616
 800e650:	1887883a 	add	r3,r3,r2
 800e654:	e0bffe17 	ldw	r2,-8(fp)
 800e658:	18800326 	beq	r3,r2,800e668 <alt_file_locked+0xa0>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
 800e65c:	00bffcc4 	movi	r2,-13
 800e660:	e0bfff15 	stw	r2,-4(fp)
 800e664:	00000a06 	br	800e690 <alt_file_locked+0xc8>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 800e668:	e0bffd17 	ldw	r2,-12(fp)
 800e66c:	10800044 	addi	r2,r2,1
 800e670:	e0bffd15 	stw	r2,-12(fp)
 800e674:	008200b4 	movhi	r2,2050
 800e678:	10a96304 	addi	r2,r2,-23156
 800e67c:	10800017 	ldw	r2,0(r2)
 800e680:	1007883a 	mov	r3,r2
 800e684:	e0bffd17 	ldw	r2,-12(fp)
 800e688:	18bfda2e 	bgeu	r3,r2,800e5f4 <alt_file_locked+0x2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
 800e68c:	e03fff15 	stw	zero,-4(fp)
 800e690:	e0bfff17 	ldw	r2,-4(fp)
}
 800e694:	e037883a 	mov	sp,fp
 800e698:	df000017 	ldw	fp,0(sp)
 800e69c:	dec00104 	addi	sp,sp,4
 800e6a0:	f800283a 	ret

0800e6a4 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 800e6a4:	defff404 	addi	sp,sp,-48
 800e6a8:	dfc00b15 	stw	ra,44(sp)
 800e6ac:	df000a15 	stw	fp,40(sp)
 800e6b0:	df000a04 	addi	fp,sp,40
 800e6b4:	e13ffb15 	stw	r4,-20(fp)
 800e6b8:	e17ffc15 	stw	r5,-16(fp)
 800e6bc:	e1bffd15 	stw	r6,-12(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
 800e6c0:	00bfffc4 	movi	r2,-1
 800e6c4:	e0bff815 	stw	r2,-32(fp)
  int status = -ENODEV;
 800e6c8:	00bffb44 	movi	r2,-19
 800e6cc:	e0bff715 	stw	r2,-36(fp)
  int isafs = 0;
 800e6d0:	e03ff615 	stw	zero,-40(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 800e6d4:	e13ffb17 	ldw	r4,-20(fp)
 800e6d8:	014200b4 	movhi	r5,2050
 800e6dc:	29696104 	addi	r5,r5,-23164
 800e6e0:	80158f00 	call	80158f0 <alt_find_dev>
 800e6e4:	e0bffa15 	stw	r2,-24(fp)
 800e6e8:	e0bffa17 	ldw	r2,-24(fp)
 800e6ec:	1004c03a 	cmpne	r2,r2,zero
 800e6f0:	1000051e 	bne	r2,zero,800e708 <open+0x64>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 800e6f4:	e13ffb17 	ldw	r4,-20(fp)
 800e6f8:	80159840 	call	8015984 <alt_find_file>
 800e6fc:	e0bffa15 	stw	r2,-24(fp)
    isafs = 1;
 800e700:	00800044 	movi	r2,1
 800e704:	e0bff615 	stw	r2,-40(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 800e708:	e0bffa17 	ldw	r2,-24(fp)
 800e70c:	1005003a 	cmpeq	r2,r2,zero
 800e710:	1000301e 	bne	r2,zero,800e7d4 <open+0x130>
  {
    if ((index = alt_get_fd (dev)) < 0)
 800e714:	e13ffa17 	ldw	r4,-24(fp)
 800e718:	8015c040 	call	8015c04 <alt_get_fd>
 800e71c:	e0bff815 	stw	r2,-32(fp)
 800e720:	e0bff817 	ldw	r2,-32(fp)
 800e724:	1004403a 	cmpge	r2,r2,zero
 800e728:	1000031e 	bne	r2,zero,800e738 <open+0x94>
    {
      status = index;
 800e72c:	e0bff817 	ldw	r2,-32(fp)
 800e730:	e0bff715 	stw	r2,-36(fp)
 800e734:	00002906 	br	800e7dc <open+0x138>
    }
    else
    {
      fd = &alt_fd_list[index];
 800e738:	e0bff817 	ldw	r2,-32(fp)
 800e73c:	10800324 	muli	r2,r2,12
 800e740:	1007883a 	mov	r3,r2
 800e744:	008200b4 	movhi	r2,2050
 800e748:	10a40e04 	addi	r2,r2,-28616
 800e74c:	1885883a 	add	r2,r3,r2
 800e750:	e0bff915 	stw	r2,-28(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 800e754:	e0fffc17 	ldw	r3,-16(fp)
 800e758:	00900034 	movhi	r2,16384
 800e75c:	10bfffc4 	addi	r2,r2,-1
 800e760:	1886703a 	and	r3,r3,r2
 800e764:	e0bff917 	ldw	r2,-28(fp)
 800e768:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
 800e76c:	e0bff617 	ldw	r2,-40(fp)
 800e770:	1004c03a 	cmpne	r2,r2,zero
 800e774:	1000061e 	bne	r2,zero,800e790 <open+0xec>
 800e778:	e13ff917 	ldw	r4,-28(fp)
 800e77c:	800e5c80 	call	800e5c8 <alt_file_locked>
 800e780:	e0bff715 	stw	r2,-36(fp)
 800e784:	e0bff717 	ldw	r2,-36(fp)
 800e788:	1004803a 	cmplt	r2,r2,zero
 800e78c:	1000131e 	bne	r2,zero,800e7dc <open+0x138>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 800e790:	e0bffa17 	ldw	r2,-24(fp)
 800e794:	10800317 	ldw	r2,12(r2)
 800e798:	1005003a 	cmpeq	r2,r2,zero
 800e79c:	1000091e 	bne	r2,zero,800e7c4 <open+0x120>
 800e7a0:	e0bffa17 	ldw	r2,-24(fp)
 800e7a4:	10800317 	ldw	r2,12(r2)
 800e7a8:	e13ff917 	ldw	r4,-28(fp)
 800e7ac:	e17ffb17 	ldw	r5,-20(fp)
 800e7b0:	e1bffc17 	ldw	r6,-16(fp)
 800e7b4:	e1fffd17 	ldw	r7,-12(fp)
 800e7b8:	103ee83a 	callr	r2
 800e7bc:	e0bfff15 	stw	r2,-4(fp)
 800e7c0:	00000106 	br	800e7c8 <open+0x124>
 800e7c4:	e03fff15 	stw	zero,-4(fp)
 800e7c8:	e0bfff17 	ldw	r2,-4(fp)
 800e7cc:	e0bff715 	stw	r2,-36(fp)
 800e7d0:	00000206 	br	800e7dc <open+0x138>
      }
    }
  }
  else
  {
    status = -ENODEV;
 800e7d4:	00bffb44 	movi	r2,-19
 800e7d8:	e0bff715 	stw	r2,-36(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 800e7dc:	e0bff717 	ldw	r2,-36(fp)
 800e7e0:	1004403a 	cmpge	r2,r2,zero
 800e7e4:	1000091e 	bne	r2,zero,800e80c <open+0x168>
  {
    alt_release_fd (index);  
 800e7e8:	e13ff817 	ldw	r4,-32(fp)
 800e7ec:	800ea0c0 	call	800ea0c <alt_release_fd>
    ALT_ERRNO = -status;
 800e7f0:	800e82c0 	call	800e82c <alt_get_errno>
 800e7f4:	e0fff717 	ldw	r3,-36(fp)
 800e7f8:	00c7c83a 	sub	r3,zero,r3
 800e7fc:	10c00015 	stw	r3,0(r2)
    return -1;
 800e800:	00bfffc4 	movi	r2,-1
 800e804:	e0bffe15 	stw	r2,-8(fp)
 800e808:	00000206 	br	800e814 <open+0x170>
  }
  
  /* return the reference upon success */

  return index;
 800e80c:	e0bff817 	ldw	r2,-32(fp)
 800e810:	e0bffe15 	stw	r2,-8(fp)
 800e814:	e0bffe17 	ldw	r2,-8(fp)
}
 800e818:	e037883a 	mov	sp,fp
 800e81c:	dfc00117 	ldw	ra,4(sp)
 800e820:	df000017 	ldw	fp,0(sp)
 800e824:	dec00204 	addi	sp,sp,8
 800e828:	f800283a 	ret

0800e82c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 800e82c:	defffd04 	addi	sp,sp,-12
 800e830:	dfc00215 	stw	ra,8(sp)
 800e834:	df000115 	stw	fp,4(sp)
 800e838:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 800e83c:	008200b4 	movhi	r2,2050
 800e840:	10a96404 	addi	r2,r2,-23152
 800e844:	10800017 	ldw	r2,0(r2)
 800e848:	1005003a 	cmpeq	r2,r2,zero
 800e84c:	1000061e 	bne	r2,zero,800e868 <alt_get_errno+0x3c>
 800e850:	008200b4 	movhi	r2,2050
 800e854:	10a96404 	addi	r2,r2,-23152
 800e858:	10800017 	ldw	r2,0(r2)
 800e85c:	103ee83a 	callr	r2
 800e860:	e0bfff15 	stw	r2,-4(fp)
 800e864:	00000306 	br	800e874 <alt_get_errno+0x48>
 800e868:	008200b4 	movhi	r2,2050
 800e86c:	10b12904 	addi	r2,r2,-15196
 800e870:	e0bfff15 	stw	r2,-4(fp)
 800e874:	e0bfff17 	ldw	r2,-4(fp)
}
 800e878:	e037883a 	mov	sp,fp
 800e87c:	dfc00117 	ldw	ra,4(sp)
 800e880:	df000017 	ldw	fp,0(sp)
 800e884:	dec00204 	addi	sp,sp,8
 800e888:	f800283a 	ret

0800e88c <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
 800e88c:	defff704 	addi	sp,sp,-36
 800e890:	dfc00815 	stw	ra,32(sp)
 800e894:	df000715 	stw	fp,28(sp)
 800e898:	df000704 	addi	fp,sp,28
 800e89c:	e13ffb15 	stw	r4,-20(fp)
 800e8a0:	e17ffc15 	stw	r5,-16(fp)
 800e8a4:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 800e8a8:	e0bffb17 	ldw	r2,-20(fp)
 800e8ac:	1004803a 	cmplt	r2,r2,zero
 800e8b0:	1000081e 	bne	r2,zero,800e8d4 <read+0x48>
 800e8b4:	e0bffb17 	ldw	r2,-20(fp)
 800e8b8:	10800324 	muli	r2,r2,12
 800e8bc:	1007883a 	mov	r3,r2
 800e8c0:	008200b4 	movhi	r2,2050
 800e8c4:	10a40e04 	addi	r2,r2,-28616
 800e8c8:	1887883a 	add	r3,r3,r2
 800e8cc:	e0ffff15 	stw	r3,-4(fp)
 800e8d0:	00000106 	br	800e8d8 <read+0x4c>
 800e8d4:	e03fff15 	stw	zero,-4(fp)
 800e8d8:	e0bfff17 	ldw	r2,-4(fp)
 800e8dc:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
 800e8e0:	e0bffa17 	ldw	r2,-24(fp)
 800e8e4:	1005003a 	cmpeq	r2,r2,zero
 800e8e8:	1000241e 	bne	r2,zero,800e97c <read+0xf0>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 800e8ec:	e0bffa17 	ldw	r2,-24(fp)
 800e8f0:	10800217 	ldw	r2,8(r2)
 800e8f4:	108000cc 	andi	r2,r2,3
 800e8f8:	10800060 	cmpeqi	r2,r2,1
 800e8fc:	10001a1e 	bne	r2,zero,800e968 <read+0xdc>
 800e900:	e0bffa17 	ldw	r2,-24(fp)
 800e904:	10800017 	ldw	r2,0(r2)
 800e908:	10800517 	ldw	r2,20(r2)
 800e90c:	1005003a 	cmpeq	r2,r2,zero
 800e910:	1000151e 	bne	r2,zero,800e968 <read+0xdc>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
 800e914:	e0bffa17 	ldw	r2,-24(fp)
 800e918:	10800017 	ldw	r2,0(r2)
 800e91c:	10800517 	ldw	r2,20(r2)
 800e920:	e17ffc17 	ldw	r5,-16(fp)
 800e924:	e1bffd17 	ldw	r6,-12(fp)
 800e928:	e13ffa17 	ldw	r4,-24(fp)
 800e92c:	103ee83a 	callr	r2
 800e930:	e0bff915 	stw	r2,-28(fp)
 800e934:	e0bff917 	ldw	r2,-28(fp)
 800e938:	1004403a 	cmpge	r2,r2,zero
 800e93c:	1000071e 	bne	r2,zero,800e95c <read+0xd0>
        {
          ALT_ERRNO = -rval;
 800e940:	800e9ac0 	call	800e9ac <alt_get_errno>
 800e944:	e0fff917 	ldw	r3,-28(fp)
 800e948:	00c7c83a 	sub	r3,zero,r3
 800e94c:	10c00015 	stw	r3,0(r2)
          return -1;
 800e950:	00bfffc4 	movi	r2,-1
 800e954:	e0bffe15 	stw	r2,-8(fp)
 800e958:	00000e06 	br	800e994 <read+0x108>
        }
        return rval;
 800e95c:	e0bff917 	ldw	r2,-28(fp)
 800e960:	e0bffe15 	stw	r2,-8(fp)
 800e964:	00000b06 	br	800e994 <read+0x108>
      }
      else
      {
        ALT_ERRNO = EACCES;
 800e968:	800e9ac0 	call	800e9ac <alt_get_errno>
 800e96c:	1007883a 	mov	r3,r2
 800e970:	00800344 	movi	r2,13
 800e974:	18800015 	stw	r2,0(r3)
 800e978:	00000406 	br	800e98c <read+0x100>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
 800e97c:	800e9ac0 	call	800e9ac <alt_get_errno>
 800e980:	1007883a 	mov	r3,r2
 800e984:	00801444 	movi	r2,81
 800e988:	18800015 	stw	r2,0(r3)
  }
  return -1;
 800e98c:	00bfffc4 	movi	r2,-1
 800e990:	e0bffe15 	stw	r2,-8(fp)
 800e994:	e0bffe17 	ldw	r2,-8(fp)
}
 800e998:	e037883a 	mov	sp,fp
 800e99c:	dfc00117 	ldw	ra,4(sp)
 800e9a0:	df000017 	ldw	fp,0(sp)
 800e9a4:	dec00204 	addi	sp,sp,8
 800e9a8:	f800283a 	ret

0800e9ac <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 800e9ac:	defffd04 	addi	sp,sp,-12
 800e9b0:	dfc00215 	stw	ra,8(sp)
 800e9b4:	df000115 	stw	fp,4(sp)
 800e9b8:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 800e9bc:	008200b4 	movhi	r2,2050
 800e9c0:	10a96404 	addi	r2,r2,-23152
 800e9c4:	10800017 	ldw	r2,0(r2)
 800e9c8:	1005003a 	cmpeq	r2,r2,zero
 800e9cc:	1000061e 	bne	r2,zero,800e9e8 <alt_get_errno+0x3c>
 800e9d0:	008200b4 	movhi	r2,2050
 800e9d4:	10a96404 	addi	r2,r2,-23152
 800e9d8:	10800017 	ldw	r2,0(r2)
 800e9dc:	103ee83a 	callr	r2
 800e9e0:	e0bfff15 	stw	r2,-4(fp)
 800e9e4:	00000306 	br	800e9f4 <alt_get_errno+0x48>
 800e9e8:	008200b4 	movhi	r2,2050
 800e9ec:	10b12904 	addi	r2,r2,-15196
 800e9f0:	e0bfff15 	stw	r2,-4(fp)
 800e9f4:	e0bfff17 	ldw	r2,-4(fp)
}
 800e9f8:	e037883a 	mov	sp,fp
 800e9fc:	dfc00117 	ldw	ra,4(sp)
 800ea00:	df000017 	ldw	fp,0(sp)
 800ea04:	dec00204 	addi	sp,sp,8
 800ea08:	f800283a 	ret

0800ea0c <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 800ea0c:	defffe04 	addi	sp,sp,-8
 800ea10:	df000115 	stw	fp,4(sp)
 800ea14:	df000104 	addi	fp,sp,4
 800ea18:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
 800ea1c:	e0bfff17 	ldw	r2,-4(fp)
 800ea20:	108000d0 	cmplti	r2,r2,3
 800ea24:	10000d1e 	bne	r2,zero,800ea5c <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
 800ea28:	e0bfff17 	ldw	r2,-4(fp)
 800ea2c:	00c200b4 	movhi	r3,2050
 800ea30:	18e40e04 	addi	r3,r3,-28616
 800ea34:	10800324 	muli	r2,r2,12
 800ea38:	10c5883a 	add	r2,r2,r3
 800ea3c:	10800204 	addi	r2,r2,8
 800ea40:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
 800ea44:	e0bfff17 	ldw	r2,-4(fp)
 800ea48:	00c200b4 	movhi	r3,2050
 800ea4c:	18e40e04 	addi	r3,r3,-28616
 800ea50:	10800324 	muli	r2,r2,12
 800ea54:	10c5883a 	add	r2,r2,r3
 800ea58:	10000015 	stw	zero,0(r2)
  }
}
 800ea5c:	e037883a 	mov	sp,fp
 800ea60:	df000017 	ldw	fp,0(sp)
 800ea64:	dec00104 	addi	sp,sp,4
 800ea68:	f800283a 	ret

0800ea6c <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
 800ea6c:	defff804 	addi	sp,sp,-32
 800ea70:	df000715 	stw	fp,28(sp)
 800ea74:	df000704 	addi	fp,sp,28
 800ea78:	e13ffe15 	stw	r4,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 800ea7c:	0005303a 	rdctl	r2,status
 800ea80:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 800ea84:	e0fffb17 	ldw	r3,-20(fp)
 800ea88:	00bfff84 	movi	r2,-2
 800ea8c:	1884703a 	and	r2,r3,r2
 800ea90:	1001703a 	wrctl	status,r2
  
  return context;
 800ea94:	e0bffb17 	ldw	r2,-20(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
 800ea98:	e0bffd15 	stw	r2,-12(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
 800ea9c:	d0a01017 	ldw	r2,-32704(gp)
 800eaa0:	10c000c4 	addi	r3,r2,3
 800eaa4:	00bfff04 	movi	r2,-4
 800eaa8:	1884703a 	and	r2,r3,r2
 800eaac:	d0a01015 	stw	r2,-32704(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
 800eab0:	d0e01017 	ldw	r3,-32704(gp)
 800eab4:	e0bffe17 	ldw	r2,-8(fp)
 800eab8:	1887883a 	add	r3,r3,r2
 800eabc:	00821034 	movhi	r2,2112
 800eac0:	10800004 	addi	r2,r2,0
 800eac4:	10c0072e 	bgeu	r2,r3,800eae4 <sbrk+0x78>
 800eac8:	e0bffd17 	ldw	r2,-12(fp)
 800eacc:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 800ead0:	e0bffa17 	ldw	r2,-24(fp)
 800ead4:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
 800ead8:	00bfffc4 	movi	r2,-1
 800eadc:	e0bfff15 	stw	r2,-4(fp)
 800eae0:	00000c06 	br	800eb14 <sbrk+0xa8>
  }
#endif

  prev_heap_end = heap_end; 
 800eae4:	d0a01017 	ldw	r2,-32704(gp)
 800eae8:	e0bffc15 	stw	r2,-16(fp)
  heap_end += incr; 
 800eaec:	d0e01017 	ldw	r3,-32704(gp)
 800eaf0:	e0bffe17 	ldw	r2,-8(fp)
 800eaf4:	1885883a 	add	r2,r3,r2
 800eaf8:	d0a01015 	stw	r2,-32704(gp)
 800eafc:	e0bffd17 	ldw	r2,-12(fp)
 800eb00:	e0bff915 	stw	r2,-28(fp)
 800eb04:	e0bff917 	ldw	r2,-28(fp)
 800eb08:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
 800eb0c:	e0bffc17 	ldw	r2,-16(fp)
 800eb10:	e0bfff15 	stw	r2,-4(fp)
 800eb14:	e0bfff17 	ldw	r2,-4(fp)
} 
 800eb18:	e037883a 	mov	sp,fp
 800eb1c:	df000017 	ldw	fp,0(sp)
 800eb20:	dec00104 	addi	sp,sp,4
 800eb24:	f800283a 	ret

0800eb28 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
 800eb28:	defff704 	addi	sp,sp,-36
 800eb2c:	dfc00815 	stw	ra,32(sp)
 800eb30:	df000715 	stw	fp,28(sp)
 800eb34:	df000704 	addi	fp,sp,28
 800eb38:	e13ffb15 	stw	r4,-20(fp)
 800eb3c:	e17ffc15 	stw	r5,-16(fp)
 800eb40:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 800eb44:	e0bffb17 	ldw	r2,-20(fp)
 800eb48:	1004803a 	cmplt	r2,r2,zero
 800eb4c:	1000081e 	bne	r2,zero,800eb70 <write+0x48>
 800eb50:	e0bffb17 	ldw	r2,-20(fp)
 800eb54:	10800324 	muli	r2,r2,12
 800eb58:	1007883a 	mov	r3,r2
 800eb5c:	008200b4 	movhi	r2,2050
 800eb60:	10a40e04 	addi	r2,r2,-28616
 800eb64:	1887883a 	add	r3,r3,r2
 800eb68:	e0ffff15 	stw	r3,-4(fp)
 800eb6c:	00000106 	br	800eb74 <write+0x4c>
 800eb70:	e03fff15 	stw	zero,-4(fp)
 800eb74:	e0bfff17 	ldw	r2,-4(fp)
 800eb78:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
 800eb7c:	e0bffa17 	ldw	r2,-24(fp)
 800eb80:	1005003a 	cmpeq	r2,r2,zero
 800eb84:	1000241e 	bne	r2,zero,800ec18 <write+0xf0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
 800eb88:	e0bffa17 	ldw	r2,-24(fp)
 800eb8c:	10800217 	ldw	r2,8(r2)
 800eb90:	108000cc 	andi	r2,r2,3
 800eb94:	1005003a 	cmpeq	r2,r2,zero
 800eb98:	10001a1e 	bne	r2,zero,800ec04 <write+0xdc>
 800eb9c:	e0bffa17 	ldw	r2,-24(fp)
 800eba0:	10800017 	ldw	r2,0(r2)
 800eba4:	10800617 	ldw	r2,24(r2)
 800eba8:	1005003a 	cmpeq	r2,r2,zero
 800ebac:	1000151e 	bne	r2,zero,800ec04 <write+0xdc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
 800ebb0:	e0bffa17 	ldw	r2,-24(fp)
 800ebb4:	10800017 	ldw	r2,0(r2)
 800ebb8:	10800617 	ldw	r2,24(r2)
 800ebbc:	e17ffc17 	ldw	r5,-16(fp)
 800ebc0:	e1bffd17 	ldw	r6,-12(fp)
 800ebc4:	e13ffa17 	ldw	r4,-24(fp)
 800ebc8:	103ee83a 	callr	r2
 800ebcc:	e0bff915 	stw	r2,-28(fp)
 800ebd0:	e0bff917 	ldw	r2,-28(fp)
 800ebd4:	1004403a 	cmpge	r2,r2,zero
 800ebd8:	1000071e 	bne	r2,zero,800ebf8 <write+0xd0>
      {
        ALT_ERRNO = -rval;
 800ebdc:	800ec480 	call	800ec48 <alt_get_errno>
 800ebe0:	e0fff917 	ldw	r3,-28(fp)
 800ebe4:	00c7c83a 	sub	r3,zero,r3
 800ebe8:	10c00015 	stw	r3,0(r2)
        return -1;
 800ebec:	00bfffc4 	movi	r2,-1
 800ebf0:	e0bffe15 	stw	r2,-8(fp)
 800ebf4:	00000e06 	br	800ec30 <write+0x108>
      }
      return rval;
 800ebf8:	e0bff917 	ldw	r2,-28(fp)
 800ebfc:	e0bffe15 	stw	r2,-8(fp)
 800ec00:	00000b06 	br	800ec30 <write+0x108>
    }
    else
    {
      ALT_ERRNO = EACCES;
 800ec04:	800ec480 	call	800ec48 <alt_get_errno>
 800ec08:	1007883a 	mov	r3,r2
 800ec0c:	00800344 	movi	r2,13
 800ec10:	18800015 	stw	r2,0(r3)
 800ec14:	00000406 	br	800ec28 <write+0x100>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
 800ec18:	800ec480 	call	800ec48 <alt_get_errno>
 800ec1c:	1007883a 	mov	r3,r2
 800ec20:	00801444 	movi	r2,81
 800ec24:	18800015 	stw	r2,0(r3)
  }
  return -1;
 800ec28:	00bfffc4 	movi	r2,-1
 800ec2c:	e0bffe15 	stw	r2,-8(fp)
 800ec30:	e0bffe17 	ldw	r2,-8(fp)
}
 800ec34:	e037883a 	mov	sp,fp
 800ec38:	dfc00117 	ldw	ra,4(sp)
 800ec3c:	df000017 	ldw	fp,0(sp)
 800ec40:	dec00204 	addi	sp,sp,8
 800ec44:	f800283a 	ret

0800ec48 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 800ec48:	defffd04 	addi	sp,sp,-12
 800ec4c:	dfc00215 	stw	ra,8(sp)
 800ec50:	df000115 	stw	fp,4(sp)
 800ec54:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 800ec58:	008200b4 	movhi	r2,2050
 800ec5c:	10a96404 	addi	r2,r2,-23152
 800ec60:	10800017 	ldw	r2,0(r2)
 800ec64:	1005003a 	cmpeq	r2,r2,zero
 800ec68:	1000061e 	bne	r2,zero,800ec84 <alt_get_errno+0x3c>
 800ec6c:	008200b4 	movhi	r2,2050
 800ec70:	10a96404 	addi	r2,r2,-23152
 800ec74:	10800017 	ldw	r2,0(r2)
 800ec78:	103ee83a 	callr	r2
 800ec7c:	e0bfff15 	stw	r2,-4(fp)
 800ec80:	00000306 	br	800ec90 <alt_get_errno+0x48>
 800ec84:	008200b4 	movhi	r2,2050
 800ec88:	10b12904 	addi	r2,r2,-15196
 800ec8c:	e0bfff15 	stw	r2,-4(fp)
 800ec90:	e0bfff17 	ldw	r2,-4(fp)
}
 800ec94:	e037883a 	mov	sp,fp
 800ec98:	dfc00117 	ldw	ra,4(sp)
 800ec9c:	df000017 	ldw	fp,0(sp)
 800eca0:	dec00204 	addi	sp,sp,8
 800eca4:	f800283a 	ret

0800eca8 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 800eca8:	defffd04 	addi	sp,sp,-12
 800ecac:	dfc00215 	stw	ra,8(sp)
 800ecb0:	df000115 	stw	fp,4(sp)
 800ecb4:	df000104 	addi	fp,sp,4
 800ecb8:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_IRQ_INIT ( CPU_0, cpu_0);
 800ecbc:	80162c80 	call	80162c8 <altera_nios2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 800ecc0:	00800044 	movi	r2,1
 800ecc4:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 800ecc8:	e037883a 	mov	sp,fp
 800eccc:	dfc00117 	ldw	ra,4(sp)
 800ecd0:	df000017 	ldw	fp,0(sp)
 800ecd4:	dec00204 	addi	sp,sp,8
 800ecd8:	f800283a 	ret

0800ecdc <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 800ecdc:	defffd04 	addi	sp,sp,-12
 800ece0:	dfc00215 	stw	ra,8(sp)
 800ece4:	df000115 	stw	fp,4(sp)
 800ece8:	df000104 	addi	fp,sp,4
    ALTERA_AVALON_CFI_FLASH_INIT ( CFI_FLASH_0, cfi_flash_0);
 800ecec:	010200b4 	movhi	r4,2050
 800ecf0:	21246e04 	addi	r4,r4,-28232
 800ecf4:	800f0740 	call	800f074 <alt_flash_cfi_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
 800ecf8:	010200b4 	movhi	r4,2050
 800ecfc:	2124ae04 	addi	r4,r4,-27976
 800ed00:	000b883a 	mov	r5,zero
 800ed04:	000d883a 	mov	r6,zero
 800ed08:	8010ecc0 	call	8010ecc <altera_avalon_jtag_uart_init>
 800ed0c:	010200b4 	movhi	r4,2050
 800ed10:	2124a404 	addi	r4,r4,-28016
 800ed14:	800f03c0 	call	800f03c <alt_dev_reg>
    ALTERA_AVALON_LCD_16207_INIT ( LCD_0, lcd_0);
 800ed18:	010200b4 	movhi	r4,2050
 800ed1c:	2128c604 	addi	r4,r4,-23784
 800ed20:	80125dc0 	call	80125dc <altera_avalon_lcd_16207_init>
 800ed24:	010200b4 	movhi	r4,2050
 800ed28:	2128bc04 	addi	r4,r4,-23824
 800ed2c:	800f03c0 	call	800f03c <alt_dev_reg>
    ALTERA_AVALON_MAILBOX_INIT ( MAILBOX_0, mailbox_0);
 800ed30:	010200b4 	movhi	r4,2050
 800ed34:	21290404 	addi	r4,r4,-23536
 800ed38:	80127700 	call	8012770 <alt_avalon_mailbox_init>
    ALTERA_AVALON_MAILBOX_INIT ( MAILBOX_1, mailbox_1);
 800ed3c:	010200b4 	movhi	r4,2050
 800ed40:	21291304 	addi	r4,r4,-23476
 800ed44:	80127700 	call	8012770 <alt_avalon_mailbox_init>
    ALTERA_AVALON_PERFORMANCE_COUNTER_INIT ( PERFORMANCE_COUNTER_0, performance_counter_0);
 800ed48:	0007883a 	mov	r3,zero
 800ed4c:	00800044 	movi	r2,1
 800ed50:	18800035 	stwio	r2,0(r3)
    ALTERA_AVALON_SYSID_INIT ( SYSID, sysid);
    ALTERA_RO_ZIPFS_INIT ( ALTERA_RO_ZIPFS, altera_ro_zipfs);
 800ed54:	010200b4 	movhi	r4,2050
 800ed58:	21292204 	addi	r4,r4,-23416
 800ed5c:	8013c3c0 	call	8013c3c <alt_ro_zipfs_check_valid>
 800ed60:	1005003a 	cmpeq	r2,r2,zero
 800ed64:	1000031e 	bne	r2,zero,800ed74 <alt_sys_init+0x98>
 800ed68:	010200b4 	movhi	r4,2050
 800ed6c:	21292204 	addi	r4,r4,-23416
 800ed70:	8015b740 	call	8015b74 <alt_fs_reg>
    ALTERA_UP_AVALON_VIDEO_CHARACTER_BUFFER_WITH_DMA_INIT ( VIDEO_CHARACTER_BUFFER_WITH_DMA_0, video_character_buffer_with_dma_0);
 800ed74:	008200b4 	movhi	r2,2050
 800ed78:	10a92e04 	addi	r2,r2,-23368
 800ed7c:	10800a17 	ldw	r2,40(r2)
 800ed80:	10800104 	addi	r2,r2,4
 800ed84:	10800017 	ldw	r2,0(r2)
 800ed88:	10ffffcc 	andi	r3,r2,65535
 800ed8c:	008200b4 	movhi	r2,2050
 800ed90:	10a92e04 	addi	r2,r2,-23368
 800ed94:	10c00c15 	stw	r3,48(r2)
 800ed98:	008200b4 	movhi	r2,2050
 800ed9c:	10a92e04 	addi	r2,r2,-23368
 800eda0:	10800a17 	ldw	r2,40(r2)
 800eda4:	10800104 	addi	r2,r2,4
 800eda8:	10800017 	ldw	r2,0(r2)
 800edac:	1005d43a 	srai	r2,r2,16
 800edb0:	10ffffcc 	andi	r3,r2,65535
 800edb4:	008200b4 	movhi	r2,2050
 800edb8:	10a92e04 	addi	r2,r2,-23368
 800edbc:	10c00d15 	stw	r3,52(r2)
 800edc0:	008200b4 	movhi	r2,2050
 800edc4:	10a92e04 	addi	r2,r2,-23368
 800edc8:	10800c17 	ldw	r2,48(r2)
 800edcc:	10801068 	cmpgeui	r2,r2,65
 800edd0:	1000081e 	bne	r2,zero,800edf4 <alt_sys_init+0x118>
 800edd4:	00c200b4 	movhi	r3,2050
 800edd8:	18e92e04 	addi	r3,r3,-23368
 800eddc:	00800fc4 	movi	r2,63
 800ede0:	18800f15 	stw	r2,60(r3)
 800ede4:	00c200b4 	movhi	r3,2050
 800ede8:	18e92e04 	addi	r3,r3,-23368
 800edec:	00800184 	movi	r2,6
 800edf0:	18801015 	stw	r2,64(r3)
 800edf4:	008200b4 	movhi	r2,2050
 800edf8:	10a92e04 	addi	r2,r2,-23368
 800edfc:	10800d17 	ldw	r2,52(r2)
 800ee00:	10800868 	cmpgeui	r2,r2,33
 800ee04:	1000041e 	bne	r2,zero,800ee18 <alt_sys_init+0x13c>
 800ee08:	00c200b4 	movhi	r3,2050
 800ee0c:	18e92e04 	addi	r3,r3,-23368
 800ee10:	008007c4 	movi	r2,31
 800ee14:	18801115 	stw	r2,68(r3)
 800ee18:	010200b4 	movhi	r4,2050
 800ee1c:	21292e04 	addi	r4,r4,-23368
 800ee20:	8013c940 	call	8013c94 <alt_up_char_buffer_init>
 800ee24:	010200b4 	movhi	r4,2050
 800ee28:	21292e04 	addi	r4,r4,-23368
 800ee2c:	800f03c0 	call	800f03c <alt_dev_reg>
    ALTERA_UP_AVALON_VIDEO_PIXEL_BUFFER_DMA_INIT ( VIDEO_PIXEL_BUFFER_DMA_0, video_pixel_buffer_dma_0);
 800ee30:	008200b4 	movhi	r2,2050
 800ee34:	10a94004 	addi	r2,r2,-23296
 800ee38:	10800a17 	ldw	r2,40(r2)
 800ee3c:	10800017 	ldw	r2,0(r2)
 800ee40:	1007883a 	mov	r3,r2
 800ee44:	008200b4 	movhi	r2,2050
 800ee48:	10a94004 	addi	r2,r2,-23296
 800ee4c:	10c00b15 	stw	r3,44(r2)
 800ee50:	008200b4 	movhi	r2,2050
 800ee54:	10a94004 	addi	r2,r2,-23296
 800ee58:	10800a17 	ldw	r2,40(r2)
 800ee5c:	10800104 	addi	r2,r2,4
 800ee60:	10800017 	ldw	r2,0(r2)
 800ee64:	1007883a 	mov	r3,r2
 800ee68:	008200b4 	movhi	r2,2050
 800ee6c:	10a94004 	addi	r2,r2,-23296
 800ee70:	10c00c15 	stw	r3,48(r2)
 800ee74:	008200b4 	movhi	r2,2050
 800ee78:	10a94004 	addi	r2,r2,-23296
 800ee7c:	10800a17 	ldw	r2,40(r2)
 800ee80:	10800204 	addi	r2,r2,8
 800ee84:	10800017 	ldw	r2,0(r2)
 800ee88:	10ffffcc 	andi	r3,r2,65535
 800ee8c:	008200b4 	movhi	r2,2050
 800ee90:	10a94004 	addi	r2,r2,-23296
 800ee94:	10c00f15 	stw	r3,60(r2)
 800ee98:	008200b4 	movhi	r2,2050
 800ee9c:	10a94004 	addi	r2,r2,-23296
 800eea0:	10800a17 	ldw	r2,40(r2)
 800eea4:	10800204 	addi	r2,r2,8
 800eea8:	10800017 	ldw	r2,0(r2)
 800eeac:	1005d43a 	srai	r2,r2,16
 800eeb0:	10ffffcc 	andi	r3,r2,65535
 800eeb4:	008200b4 	movhi	r2,2050
 800eeb8:	10a94004 	addi	r2,r2,-23296
 800eebc:	10c01015 	stw	r3,64(r2)
 800eec0:	008200b4 	movhi	r2,2050
 800eec4:	10a94004 	addi	r2,r2,-23296
 800eec8:	10800a17 	ldw	r2,40(r2)
 800eecc:	10800304 	addi	r2,r2,12
 800eed0:	10800017 	ldw	r2,0(r2)
 800eed4:	1005d07a 	srai	r2,r2,1
 800eed8:	10c0004c 	andi	r3,r2,1
 800eedc:	008200b4 	movhi	r2,2050
 800eee0:	10a94004 	addi	r2,r2,-23296
 800eee4:	10c00d15 	stw	r3,52(r2)
 800eee8:	008200b4 	movhi	r2,2050
 800eeec:	10a94004 	addi	r2,r2,-23296
 800eef0:	10800a17 	ldw	r2,40(r2)
 800eef4:	10800304 	addi	r2,r2,12
 800eef8:	10800017 	ldw	r2,0(r2)
 800eefc:	1005d13a 	srai	r2,r2,4
 800ef00:	10c003cc 	andi	r3,r2,15
 800ef04:	008200b4 	movhi	r2,2050
 800ef08:	10a94004 	addi	r2,r2,-23296
 800ef0c:	10c00e15 	stw	r3,56(r2)
 800ef10:	008200b4 	movhi	r2,2050
 800ef14:	10a94004 	addi	r2,r2,-23296
 800ef18:	10800a17 	ldw	r2,40(r2)
 800ef1c:	10800304 	addi	r2,r2,12
 800ef20:	10800017 	ldw	r2,0(r2)
 800ef24:	1005d43a 	srai	r2,r2,16
 800ef28:	1007883a 	mov	r3,r2
 800ef2c:	00bfffc4 	movi	r2,-1
 800ef30:	1884703a 	and	r2,r3,r2
 800ef34:	e0bfff45 	stb	r2,-3(fp)
 800ef38:	008200b4 	movhi	r2,2050
 800ef3c:	10a94004 	addi	r2,r2,-23296
 800ef40:	10800a17 	ldw	r2,40(r2)
 800ef44:	10800304 	addi	r2,r2,12
 800ef48:	10800017 	ldw	r2,0(r2)
 800ef4c:	1005d63a 	srai	r2,r2,24
 800ef50:	1007883a 	mov	r3,r2
 800ef54:	00bfffc4 	movi	r2,-1
 800ef58:	1884703a 	and	r2,r3,r2
 800ef5c:	e0bfff05 	stb	r2,-4(fp)
 800ef60:	008200b4 	movhi	r2,2050
 800ef64:	10a94004 	addi	r2,r2,-23296
 800ef68:	10800e17 	ldw	r2,56(r2)
 800ef6c:	10800058 	cmpnei	r2,r2,1
 800ef70:	1000041e 	bne	r2,zero,800ef84 <alt_sys_init+0x2a8>
 800ef74:	008200b4 	movhi	r2,2050
 800ef78:	10a94004 	addi	r2,r2,-23296
 800ef7c:	10001115 	stw	zero,68(r2)
 800ef80:	00000e06 	br	800efbc <alt_sys_init+0x2e0>
 800ef84:	008200b4 	movhi	r2,2050
 800ef88:	10a94004 	addi	r2,r2,-23296
 800ef8c:	10800e17 	ldw	r2,56(r2)
 800ef90:	10800098 	cmpnei	r2,r2,2
 800ef94:	1000051e 	bne	r2,zero,800efac <alt_sys_init+0x2d0>
 800ef98:	00c200b4 	movhi	r3,2050
 800ef9c:	18e94004 	addi	r3,r3,-23296
 800efa0:	00800044 	movi	r2,1
 800efa4:	18801115 	stw	r2,68(r3)
 800efa8:	00000406 	br	800efbc <alt_sys_init+0x2e0>
 800efac:	00c200b4 	movhi	r3,2050
 800efb0:	18e94004 	addi	r3,r3,-23296
 800efb4:	00800084 	movi	r2,2
 800efb8:	18801115 	stw	r2,68(r3)
 800efbc:	e0ffff43 	ldbu	r3,-3(fp)
 800efc0:	00800804 	movi	r2,32
 800efc4:	10c7c83a 	sub	r3,r2,r3
 800efc8:	00bfffc4 	movi	r2,-1
 800efcc:	10c6d83a 	srl	r3,r2,r3
 800efd0:	008200b4 	movhi	r2,2050
 800efd4:	10a94004 	addi	r2,r2,-23296
 800efd8:	10c01215 	stw	r3,72(r2)
 800efdc:	e0ffff43 	ldbu	r3,-3(fp)
 800efe0:	008200b4 	movhi	r2,2050
 800efe4:	10a94004 	addi	r2,r2,-23296
 800efe8:	10801117 	ldw	r2,68(r2)
 800efec:	1887883a 	add	r3,r3,r2
 800eff0:	008200b4 	movhi	r2,2050
 800eff4:	10a94004 	addi	r2,r2,-23296
 800eff8:	10c01315 	stw	r3,76(r2)
 800effc:	e0ffff03 	ldbu	r3,-4(fp)
 800f000:	00800804 	movi	r2,32
 800f004:	10c7c83a 	sub	r3,r2,r3
 800f008:	00bfffc4 	movi	r2,-1
 800f00c:	10c6d83a 	srl	r3,r2,r3
 800f010:	008200b4 	movhi	r2,2050
 800f014:	10a94004 	addi	r2,r2,-23296
 800f018:	10c01415 	stw	r3,80(r2)
 800f01c:	010200b4 	movhi	r4,2050
 800f020:	21294004 	addi	r4,r4,-23296
 800f024:	800f03c0 	call	800f03c <alt_dev_reg>
}
 800f028:	e037883a 	mov	sp,fp
 800f02c:	dfc00117 	ldw	ra,4(sp)
 800f030:	df000017 	ldw	fp,0(sp)
 800f034:	dec00204 	addi	sp,sp,8
 800f038:	f800283a 	ret

0800f03c <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
 800f03c:	defffd04 	addi	sp,sp,-12
 800f040:	dfc00215 	stw	ra,8(sp)
 800f044:	df000115 	stw	fp,4(sp)
 800f048:	df000104 	addi	fp,sp,4
 800f04c:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 800f050:	e13fff17 	ldw	r4,-4(fp)
 800f054:	014200b4 	movhi	r5,2050
 800f058:	29696104 	addi	r5,r5,-23164
 800f05c:	80157140 	call	8015714 <alt_dev_llist_insert>
}
 800f060:	e037883a 	mov	sp,fp
 800f064:	dfc00117 	ldw	ra,4(sp)
 800f068:	df000017 	ldw	fp,0(sp)
 800f06c:	dec00204 	addi	sp,sp,8
 800f070:	f800283a 	ret

0800f074 <alt_flash_cfi_init>:
 800f074:	defffc04 	addi	sp,sp,-16
 800f078:	dfc00315 	stw	ra,12(sp)
 800f07c:	df000215 	stw	fp,8(sp)
 800f080:	df000204 	addi	fp,sp,8
 800f084:	e13fff15 	stw	r4,-4(fp)
 800f088:	e03ffe15 	stw	zero,-8(fp)
 800f08c:	e13fff17 	ldw	r4,-4(fp)
 800f090:	80104fc0 	call	80104fc <alt_read_cfi_width>
 800f094:	e0bffe15 	stw	r2,-8(fp)
 800f098:	e0bffe17 	ldw	r2,-8(fp)
 800f09c:	1004c03a 	cmpne	r2,r2,zero
 800f0a0:	1000031e 	bne	r2,zero,800f0b0 <alt_flash_cfi_init+0x3c>
 800f0a4:	e13fff17 	ldw	r4,-4(fp)
 800f0a8:	800fc740 	call	800fc74 <alt_set_flash_width_func>
 800f0ac:	e0bffe15 	stw	r2,-8(fp)
 800f0b0:	e0bffe17 	ldw	r2,-8(fp)
 800f0b4:	1004c03a 	cmpne	r2,r2,zero
 800f0b8:	1000031e 	bne	r2,zero,800f0c8 <alt_flash_cfi_init+0x54>
 800f0bc:	e13fff17 	ldw	r4,-4(fp)
 800f0c0:	800ff7c0 	call	800ff7c <alt_read_cfi_table>
 800f0c4:	e0bffe15 	stw	r2,-8(fp)
 800f0c8:	e0bffe17 	ldw	r2,-8(fp)
 800f0cc:	1004c03a 	cmpne	r2,r2,zero
 800f0d0:	1000031e 	bne	r2,zero,800f0e0 <alt_flash_cfi_init+0x6c>
 800f0d4:	e13fff17 	ldw	r4,-4(fp)
 800f0d8:	800fe540 	call	800fe54 <alt_set_flash_algorithm_func>
 800f0dc:	e0bffe15 	stw	r2,-8(fp)
 800f0e0:	e0bffe17 	ldw	r2,-8(fp)
 800f0e4:	1004c03a 	cmpne	r2,r2,zero
 800f0e8:	1000031e 	bne	r2,zero,800f0f8 <alt_flash_cfi_init+0x84>
 800f0ec:	e13fff17 	ldw	r4,-4(fp)
 800f0f0:	800f1100 	call	800f110 <alt_flash_device_register>
 800f0f4:	e0bffe15 	stw	r2,-8(fp)
 800f0f8:	e0bffe17 	ldw	r2,-8(fp)
 800f0fc:	e037883a 	mov	sp,fp
 800f100:	dfc00117 	ldw	ra,4(sp)
 800f104:	df000017 	ldw	fp,0(sp)
 800f108:	dec00204 	addi	sp,sp,8
 800f10c:	f800283a 	ret

0800f110 <alt_flash_device_register>:
 800f110:	defffd04 	addi	sp,sp,-12
 800f114:	dfc00215 	stw	ra,8(sp)
 800f118:	df000115 	stw	fp,4(sp)
 800f11c:	df000104 	addi	fp,sp,4
 800f120:	e13fff15 	stw	r4,-4(fp)
 800f124:	e13fff17 	ldw	r4,-4(fp)
 800f128:	014200b4 	movhi	r5,2050
 800f12c:	29696b04 	addi	r5,r5,-23124
 800f130:	80157140 	call	8015714 <alt_dev_llist_insert>
 800f134:	e037883a 	mov	sp,fp
 800f138:	dfc00117 	ldw	ra,4(sp)
 800f13c:	df000017 	ldw	fp,0(sp)
 800f140:	dec00204 	addi	sp,sp,8
 800f144:	f800283a 	ret

0800f148 <alt_flash_cfi_write>:
 800f148:	deffef04 	addi	sp,sp,-68
 800f14c:	dfc01015 	stw	ra,64(sp)
 800f150:	df000f15 	stw	fp,60(sp)
 800f154:	df000f04 	addi	fp,sp,60
 800f158:	e13ffa15 	stw	r4,-24(fp)
 800f15c:	e17ffb15 	stw	r5,-20(fp)
 800f160:	e1bffc15 	stw	r6,-16(fp)
 800f164:	e1fffd15 	stw	r7,-12(fp)
 800f168:	e03ff915 	stw	zero,-28(fp)
 800f16c:	e0bffd17 	ldw	r2,-12(fp)
 800f170:	e0bff515 	stw	r2,-44(fp)
 800f174:	e0bffb17 	ldw	r2,-20(fp)
 800f178:	e0bff315 	stw	r2,-52(fp)
 800f17c:	e0bffa17 	ldw	r2,-24(fp)
 800f180:	e0bff215 	stw	r2,-56(fp)
 800f184:	e03ff815 	stw	zero,-32(fp)
 800f188:	00008e06 	br	800f3c4 <alt_flash_cfi_write+0x27c>
 800f18c:	e0bff817 	ldw	r2,-32(fp)
 800f190:	e0fff217 	ldw	r3,-56(fp)
 800f194:	1004913a 	slli	r2,r2,4
 800f198:	10c5883a 	add	r2,r2,r3
 800f19c:	10800d04 	addi	r2,r2,52
 800f1a0:	10c00017 	ldw	r3,0(r2)
 800f1a4:	e0bffb17 	ldw	r2,-20(fp)
 800f1a8:	10c08316 	blt	r2,r3,800f3b8 <alt_flash_cfi_write+0x270>
 800f1ac:	e0bff817 	ldw	r2,-32(fp)
 800f1b0:	e0fff217 	ldw	r3,-56(fp)
 800f1b4:	1004913a 	slli	r2,r2,4
 800f1b8:	10c5883a 	add	r2,r2,r3
 800f1bc:	10800d04 	addi	r2,r2,52
 800f1c0:	11000017 	ldw	r4,0(r2)
 800f1c4:	e0bff817 	ldw	r2,-32(fp)
 800f1c8:	e0fff217 	ldw	r3,-56(fp)
 800f1cc:	1004913a 	slli	r2,r2,4
 800f1d0:	10c5883a 	add	r2,r2,r3
 800f1d4:	10800e04 	addi	r2,r2,56
 800f1d8:	10800017 	ldw	r2,0(r2)
 800f1dc:	2087883a 	add	r3,r4,r2
 800f1e0:	e0bffb17 	ldw	r2,-20(fp)
 800f1e4:	10c0740e 	bge	r2,r3,800f3b8 <alt_flash_cfi_write+0x270>
 800f1e8:	e0bff817 	ldw	r2,-32(fp)
 800f1ec:	e0fff217 	ldw	r3,-56(fp)
 800f1f0:	1004913a 	slli	r2,r2,4
 800f1f4:	10c5883a 	add	r2,r2,r3
 800f1f8:	10800d04 	addi	r2,r2,52
 800f1fc:	10800017 	ldw	r2,0(r2)
 800f200:	e0bff415 	stw	r2,-48(fp)
 800f204:	e03ff715 	stw	zero,-36(fp)
 800f208:	00006306 	br	800f398 <alt_flash_cfi_write+0x250>
 800f20c:	e0fffb17 	ldw	r3,-20(fp)
 800f210:	e0bff417 	ldw	r2,-48(fp)
 800f214:	18805416 	blt	r3,r2,800f368 <alt_flash_cfi_write+0x220>
 800f218:	e0bff817 	ldw	r2,-32(fp)
 800f21c:	e0fff217 	ldw	r3,-56(fp)
 800f220:	1004913a 	slli	r2,r2,4
 800f224:	10c5883a 	add	r2,r2,r3
 800f228:	10801004 	addi	r2,r2,64
 800f22c:	10c00017 	ldw	r3,0(r2)
 800f230:	e0bff417 	ldw	r2,-48(fp)
 800f234:	1887883a 	add	r3,r3,r2
 800f238:	e0bffb17 	ldw	r2,-20(fp)
 800f23c:	10c04a0e 	bge	r2,r3,800f368 <alt_flash_cfi_write+0x220>
 800f240:	e0bff817 	ldw	r2,-32(fp)
 800f244:	e0fff217 	ldw	r3,-56(fp)
 800f248:	1004913a 	slli	r2,r2,4
 800f24c:	10c5883a 	add	r2,r2,r3
 800f250:	10801004 	addi	r2,r2,64
 800f254:	10c00017 	ldw	r3,0(r2)
 800f258:	e0bff417 	ldw	r2,-48(fp)
 800f25c:	1887883a 	add	r3,r3,r2
 800f260:	e0bffb17 	ldw	r2,-20(fp)
 800f264:	1885c83a 	sub	r2,r3,r2
 800f268:	e0bff615 	stw	r2,-40(fp)
 800f26c:	e0bff617 	ldw	r2,-40(fp)
 800f270:	e0bfff15 	stw	r2,-4(fp)
 800f274:	e0fffd17 	ldw	r3,-12(fp)
 800f278:	e0fffe15 	stw	r3,-8(fp)
 800f27c:	e0bfff17 	ldw	r2,-4(fp)
 800f280:	e0fffe17 	ldw	r3,-8(fp)
 800f284:	10c0020e 	bge	r2,r3,800f290 <alt_flash_cfi_write+0x148>
 800f288:	e0bfff17 	ldw	r2,-4(fp)
 800f28c:	e0bffe15 	stw	r2,-8(fp)
 800f290:	e0fffe17 	ldw	r3,-8(fp)
 800f294:	e0fff615 	stw	r3,-40(fp)
 800f298:	e0bff217 	ldw	r2,-56(fp)
 800f29c:	10800a17 	ldw	r2,40(r2)
 800f2a0:	1007883a 	mov	r3,r2
 800f2a4:	e0bffb17 	ldw	r2,-20(fp)
 800f2a8:	188b883a 	add	r5,r3,r2
 800f2ac:	e1bff617 	ldw	r6,-40(fp)
 800f2b0:	e13ffc17 	ldw	r4,-16(fp)
 800f2b4:	8016dd00 	call	8016dd0 <memcmp>
 800f2b8:	1005003a 	cmpeq	r2,r2,zero
 800f2bc:	1000131e 	bne	r2,zero,800f30c <alt_flash_cfi_write+0x1c4>
 800f2c0:	e0bff217 	ldw	r2,-56(fp)
 800f2c4:	10800817 	ldw	r2,32(r2)
 800f2c8:	e13ff217 	ldw	r4,-56(fp)
 800f2cc:	e17ff417 	ldw	r5,-48(fp)
 800f2d0:	103ee83a 	callr	r2
 800f2d4:	e0bff915 	stw	r2,-28(fp)
 800f2d8:	e0bff917 	ldw	r2,-28(fp)
 800f2dc:	1004c03a 	cmpne	r2,r2,zero
 800f2e0:	10000a1e 	bne	r2,zero,800f30c <alt_flash_cfi_write+0x1c4>
 800f2e4:	e0bff217 	ldw	r2,-56(fp)
 800f2e8:	10c00917 	ldw	r3,36(r2)
 800f2ec:	e13ff217 	ldw	r4,-56(fp)
 800f2f0:	e0bff617 	ldw	r2,-40(fp)
 800f2f4:	d8800015 	stw	r2,0(sp)
 800f2f8:	e17ff417 	ldw	r5,-48(fp)
 800f2fc:	e1bffb17 	ldw	r6,-20(fp)
 800f300:	e1fffc17 	ldw	r7,-16(fp)
 800f304:	183ee83a 	callr	r3
 800f308:	e0bff915 	stw	r2,-28(fp)
 800f30c:	e0fffd17 	ldw	r3,-12(fp)
 800f310:	e0bff617 	ldw	r2,-40(fp)
 800f314:	18802f26 	beq	r3,r2,800f3d4 <alt_flash_cfi_write+0x28c>
 800f318:	e0bff917 	ldw	r2,-28(fp)
 800f31c:	1004c03a 	cmpne	r2,r2,zero
 800f320:	10002c1e 	bne	r2,zero,800f3d4 <alt_flash_cfi_write+0x28c>
 800f324:	e0fffd17 	ldw	r3,-12(fp)
 800f328:	e0bff617 	ldw	r2,-40(fp)
 800f32c:	1885c83a 	sub	r2,r3,r2
 800f330:	e0bffd15 	stw	r2,-12(fp)
 800f334:	e0bff817 	ldw	r2,-32(fp)
 800f338:	e0fff217 	ldw	r3,-56(fp)
 800f33c:	1004913a 	slli	r2,r2,4
 800f340:	10c5883a 	add	r2,r2,r3
 800f344:	10801004 	addi	r2,r2,64
 800f348:	10c00017 	ldw	r3,0(r2)
 800f34c:	e0bff417 	ldw	r2,-48(fp)
 800f350:	1885883a 	add	r2,r3,r2
 800f354:	e0bffb15 	stw	r2,-20(fp)
 800f358:	e0fffc17 	ldw	r3,-16(fp)
 800f35c:	e0bff617 	ldw	r2,-40(fp)
 800f360:	1885883a 	add	r2,r3,r2
 800f364:	e0bffc15 	stw	r2,-16(fp)
 800f368:	e0bff817 	ldw	r2,-32(fp)
 800f36c:	e0fff217 	ldw	r3,-56(fp)
 800f370:	1004913a 	slli	r2,r2,4
 800f374:	10c5883a 	add	r2,r2,r3
 800f378:	10801004 	addi	r2,r2,64
 800f37c:	10c00017 	ldw	r3,0(r2)
 800f380:	e0bff417 	ldw	r2,-48(fp)
 800f384:	10c5883a 	add	r2,r2,r3
 800f388:	e0bff415 	stw	r2,-48(fp)
 800f38c:	e0bff717 	ldw	r2,-36(fp)
 800f390:	10800044 	addi	r2,r2,1
 800f394:	e0bff715 	stw	r2,-36(fp)
 800f398:	e0bff817 	ldw	r2,-32(fp)
 800f39c:	e0fff217 	ldw	r3,-56(fp)
 800f3a0:	1004913a 	slli	r2,r2,4
 800f3a4:	10c5883a 	add	r2,r2,r3
 800f3a8:	10800f04 	addi	r2,r2,60
 800f3ac:	10c00017 	ldw	r3,0(r2)
 800f3b0:	e0bff717 	ldw	r2,-36(fp)
 800f3b4:	10ff9516 	blt	r2,r3,800f20c <alt_flash_cfi_write+0xc4>
 800f3b8:	e0bff817 	ldw	r2,-32(fp)
 800f3bc:	10800044 	addi	r2,r2,1
 800f3c0:	e0bff815 	stw	r2,-32(fp)
 800f3c4:	e0bff217 	ldw	r2,-56(fp)
 800f3c8:	10c00c17 	ldw	r3,48(r2)
 800f3cc:	e0bff817 	ldw	r2,-32(fp)
 800f3d0:	10ff6e16 	blt	r2,r3,800f18c <alt_flash_cfi_write+0x44>
 800f3d4:	e0bff217 	ldw	r2,-56(fp)
 800f3d8:	10800a17 	ldw	r2,40(r2)
 800f3dc:	1007883a 	mov	r3,r2
 800f3e0:	e0bff317 	ldw	r2,-52(fp)
 800f3e4:	1889883a 	add	r4,r3,r2
 800f3e8:	e17ff517 	ldw	r5,-44(fp)
 800f3ec:	80156580 	call	8015658 <alt_dcache_flush>
 800f3f0:	e0bff917 	ldw	r2,-28(fp)
 800f3f4:	e037883a 	mov	sp,fp
 800f3f8:	dfc00117 	ldw	ra,4(sp)
 800f3fc:	df000017 	ldw	fp,0(sp)
 800f400:	dec00204 	addi	sp,sp,8
 800f404:	f800283a 	ret

0800f408 <alt_flash_cfi_get_info>:
 800f408:	defffa04 	addi	sp,sp,-24
 800f40c:	df000515 	stw	fp,20(sp)
 800f410:	df000504 	addi	fp,sp,20
 800f414:	e13ffd15 	stw	r4,-12(fp)
 800f418:	e17ffe15 	stw	r5,-8(fp)
 800f41c:	e1bfff15 	stw	r6,-4(fp)
 800f420:	e03ffc15 	stw	zero,-16(fp)
 800f424:	e0bffd17 	ldw	r2,-12(fp)
 800f428:	e0bffb15 	stw	r2,-20(fp)
 800f42c:	e0bffb17 	ldw	r2,-20(fp)
 800f430:	10c00c17 	ldw	r3,48(r2)
 800f434:	e0bfff17 	ldw	r2,-4(fp)
 800f438:	10c00015 	stw	r3,0(r2)
 800f43c:	e0bffb17 	ldw	r2,-20(fp)
 800f440:	10800c17 	ldw	r2,48(r2)
 800f444:	1004c03a 	cmpne	r2,r2,zero
 800f448:	1000031e 	bne	r2,zero,800f458 <alt_flash_cfi_get_info+0x50>
 800f44c:	00bffec4 	movi	r2,-5
 800f450:	e0bffc15 	stw	r2,-16(fp)
 800f454:	00000b06 	br	800f484 <alt_flash_cfi_get_info+0x7c>
 800f458:	e0bffb17 	ldw	r2,-20(fp)
 800f45c:	10800c17 	ldw	r2,48(r2)
 800f460:	10800250 	cmplti	r2,r2,9
 800f464:	1000031e 	bne	r2,zero,800f474 <alt_flash_cfi_get_info+0x6c>
 800f468:	00bffd04 	movi	r2,-12
 800f46c:	e0bffc15 	stw	r2,-16(fp)
 800f470:	00000406 	br	800f484 <alt_flash_cfi_get_info+0x7c>
 800f474:	e0bffb17 	ldw	r2,-20(fp)
 800f478:	10c00d04 	addi	r3,r2,52
 800f47c:	e0bffe17 	ldw	r2,-8(fp)
 800f480:	10c00015 	stw	r3,0(r2)
 800f484:	e0bffc17 	ldw	r2,-16(fp)
 800f488:	e037883a 	mov	sp,fp
 800f48c:	df000017 	ldw	fp,0(sp)
 800f490:	dec00104 	addi	sp,sp,4
 800f494:	f800283a 	ret

0800f498 <alt_flash_cfi_read>:
 800f498:	defff904 	addi	sp,sp,-28
 800f49c:	dfc00615 	stw	ra,24(sp)
 800f4a0:	df000515 	stw	fp,20(sp)
 800f4a4:	df000504 	addi	fp,sp,20
 800f4a8:	e13ffc15 	stw	r4,-16(fp)
 800f4ac:	e17ffd15 	stw	r5,-12(fp)
 800f4b0:	e1bffe15 	stw	r6,-8(fp)
 800f4b4:	e1ffff15 	stw	r7,-4(fp)
 800f4b8:	e0bffc17 	ldw	r2,-16(fp)
 800f4bc:	e0bffb15 	stw	r2,-20(fp)
 800f4c0:	e0bffb17 	ldw	r2,-20(fp)
 800f4c4:	10800a17 	ldw	r2,40(r2)
 800f4c8:	1007883a 	mov	r3,r2
 800f4cc:	e0bffd17 	ldw	r2,-12(fp)
 800f4d0:	1887883a 	add	r3,r3,r2
 800f4d4:	e1bfff17 	ldw	r6,-4(fp)
 800f4d8:	e0bffe17 	ldw	r2,-8(fp)
 800f4dc:	1009883a 	mov	r4,r2
 800f4e0:	180b883a 	mov	r5,r3
 800f4e4:	8004c480 	call	8004c48 <memcpy>
 800f4e8:	0005883a 	mov	r2,zero
 800f4ec:	e037883a 	mov	sp,fp
 800f4f0:	dfc00117 	ldw	ra,4(sp)
 800f4f4:	df000017 	ldw	fp,0(sp)
 800f4f8:	dec00204 	addi	sp,sp,8
 800f4fc:	f800283a 	ret

0800f500 <alt_write_value_to_flash>:
 800f500:	defffa04 	addi	sp,sp,-24
 800f504:	df000515 	stw	fp,20(sp)
 800f508:	df000504 	addi	fp,sp,20
 800f50c:	e13ffd15 	stw	r4,-12(fp)
 800f510:	e17ffe15 	stw	r5,-8(fp)
 800f514:	e1bfff15 	stw	r6,-4(fp)
 800f518:	e0bffd17 	ldw	r2,-12(fp)
 800f51c:	10802e17 	ldw	r2,184(r2)
 800f520:	10800058 	cmpnei	r2,r2,1
 800f524:	10000b1e 	bne	r2,zero,800f554 <alt_write_value_to_flash+0x54>
 800f528:	e0bffd17 	ldw	r2,-12(fp)
 800f52c:	10800a17 	ldw	r2,40(r2)
 800f530:	1007883a 	mov	r3,r2
 800f534:	e0bffe17 	ldw	r2,-8(fp)
 800f538:	1889883a 	add	r4,r3,r2
 800f53c:	e0bfff17 	ldw	r2,-4(fp)
 800f540:	10800003 	ldbu	r2,0(r2)
 800f544:	10c03fcc 	andi	r3,r2,255
 800f548:	2005883a 	mov	r2,r4
 800f54c:	10c00025 	stbio	r3,0(r2)
 800f550:	00004006 	br	800f654 <alt_write_value_to_flash+0x154>
 800f554:	e0bffd17 	ldw	r2,-12(fp)
 800f558:	10802e17 	ldw	r2,184(r2)
 800f55c:	10800098 	cmpnei	r2,r2,2
 800f560:	1000151e 	bne	r2,zero,800f5b8 <alt_write_value_to_flash+0xb8>
 800f564:	e0bfff17 	ldw	r2,-4(fp)
 800f568:	10800003 	ldbu	r2,0(r2)
 800f56c:	10803fcc 	andi	r2,r2,255
 800f570:	e0bffc0d 	sth	r2,-16(fp)
 800f574:	e0bfff17 	ldw	r2,-4(fp)
 800f578:	10800044 	addi	r2,r2,1
 800f57c:	10800003 	ldbu	r2,0(r2)
 800f580:	10803fcc 	andi	r2,r2,255
 800f584:	1004923a 	slli	r2,r2,8
 800f588:	1007883a 	mov	r3,r2
 800f58c:	e0bffc0b 	ldhu	r2,-16(fp)
 800f590:	1884b03a 	or	r2,r3,r2
 800f594:	e0bffc0d 	sth	r2,-16(fp)
 800f598:	e0bffd17 	ldw	r2,-12(fp)
 800f59c:	10800a17 	ldw	r2,40(r2)
 800f5a0:	1007883a 	mov	r3,r2
 800f5a4:	e0bffe17 	ldw	r2,-8(fp)
 800f5a8:	1885883a 	add	r2,r3,r2
 800f5ac:	e0fffc0b 	ldhu	r3,-16(fp)
 800f5b0:	10c0002d 	sthio	r3,0(r2)
 800f5b4:	00002706 	br	800f654 <alt_write_value_to_flash+0x154>
 800f5b8:	e0bffd17 	ldw	r2,-12(fp)
 800f5bc:	10802e17 	ldw	r2,184(r2)
 800f5c0:	10800118 	cmpnei	r2,r2,4
 800f5c4:	1000231e 	bne	r2,zero,800f654 <alt_write_value_to_flash+0x154>
 800f5c8:	e0bfff17 	ldw	r2,-4(fp)
 800f5cc:	10800003 	ldbu	r2,0(r2)
 800f5d0:	10803fcc 	andi	r2,r2,255
 800f5d4:	e0bffb15 	stw	r2,-20(fp)
 800f5d8:	e0bfff17 	ldw	r2,-4(fp)
 800f5dc:	10800044 	addi	r2,r2,1
 800f5e0:	10800003 	ldbu	r2,0(r2)
 800f5e4:	10803fcc 	andi	r2,r2,255
 800f5e8:	1006923a 	slli	r3,r2,8
 800f5ec:	e0bffb17 	ldw	r2,-20(fp)
 800f5f0:	10c4b03a 	or	r2,r2,r3
 800f5f4:	e0bffb15 	stw	r2,-20(fp)
 800f5f8:	e0bfff17 	ldw	r2,-4(fp)
 800f5fc:	10800084 	addi	r2,r2,2
 800f600:	10800003 	ldbu	r2,0(r2)
 800f604:	10803fcc 	andi	r2,r2,255
 800f608:	1006943a 	slli	r3,r2,16
 800f60c:	e0bffb17 	ldw	r2,-20(fp)
 800f610:	10c4b03a 	or	r2,r2,r3
 800f614:	e0bffb15 	stw	r2,-20(fp)
 800f618:	e0bfff17 	ldw	r2,-4(fp)
 800f61c:	108000c4 	addi	r2,r2,3
 800f620:	10800003 	ldbu	r2,0(r2)
 800f624:	10803fcc 	andi	r2,r2,255
 800f628:	1006963a 	slli	r3,r2,24
 800f62c:	e0bffb17 	ldw	r2,-20(fp)
 800f630:	10c4b03a 	or	r2,r2,r3
 800f634:	e0bffb15 	stw	r2,-20(fp)
 800f638:	e0bffd17 	ldw	r2,-12(fp)
 800f63c:	10800a17 	ldw	r2,40(r2)
 800f640:	1007883a 	mov	r3,r2
 800f644:	e0bffe17 	ldw	r2,-8(fp)
 800f648:	1885883a 	add	r2,r3,r2
 800f64c:	e0fffb17 	ldw	r3,-20(fp)
 800f650:	10c00035 	stwio	r3,0(r2)
 800f654:	e037883a 	mov	sp,fp
 800f658:	df000017 	ldw	fp,0(sp)
 800f65c:	dec00104 	addi	sp,sp,4
 800f660:	f800283a 	ret

0800f664 <alt_flash_program_block>:
 800f664:	defff304 	addi	sp,sp,-52
 800f668:	dfc00c15 	stw	ra,48(sp)
 800f66c:	df000b15 	stw	fp,44(sp)
 800f670:	df000b04 	addi	fp,sp,44
 800f674:	e13ffc15 	stw	r4,-16(fp)
 800f678:	e17ffd15 	stw	r5,-12(fp)
 800f67c:	e1bffe15 	stw	r6,-8(fp)
 800f680:	e1ffff15 	stw	r7,-4(fp)
 800f684:	e03ffa15 	stw	zero,-24(fp)
 800f688:	e0bffc17 	ldw	r2,-16(fp)
 800f68c:	10800a17 	ldw	r2,40(r2)
 800f690:	1007883a 	mov	r3,r2
 800f694:	e0bffd17 	ldw	r2,-12(fp)
 800f698:	1885883a 	add	r2,r3,r2
 800f69c:	1009883a 	mov	r4,r2
 800f6a0:	e0bffc17 	ldw	r2,-16(fp)
 800f6a4:	11402e17 	ldw	r5,184(r2)
 800f6a8:	8002f800 	call	8002f80 <__modsi3>
 800f6ac:	e0bff915 	stw	r2,-28(fp)
 800f6b0:	e0bff917 	ldw	r2,-28(fp)
 800f6b4:	1005003a 	cmpeq	r2,r2,zero
 800f6b8:	10003a1e 	bne	r2,zero,800f7a4 <alt_flash_program_block+0x140>
 800f6bc:	e0bffc17 	ldw	r2,-16(fp)
 800f6c0:	10c02e17 	ldw	r3,184(r2)
 800f6c4:	e0bff917 	ldw	r2,-28(fp)
 800f6c8:	1885c83a 	sub	r2,r3,r2
 800f6cc:	e0bff815 	stw	r2,-32(fp)
 800f6d0:	e03ff615 	stw	zero,-40(fp)
 800f6d4:	00001206 	br	800f720 <alt_flash_program_block+0xbc>
 800f6d8:	e17ff617 	ldw	r5,-40(fp)
 800f6dc:	e0bffc17 	ldw	r2,-16(fp)
 800f6e0:	10800a17 	ldw	r2,40(r2)
 800f6e4:	1009883a 	mov	r4,r2
 800f6e8:	e0fffd17 	ldw	r3,-12(fp)
 800f6ec:	e0bff917 	ldw	r2,-28(fp)
 800f6f0:	1887c83a 	sub	r3,r3,r2
 800f6f4:	e0bff617 	ldw	r2,-40(fp)
 800f6f8:	1885883a 	add	r2,r3,r2
 800f6fc:	2085883a 	add	r2,r4,r2
 800f700:	10800023 	ldbuio	r2,0(r2)
 800f704:	1007883a 	mov	r3,r2
 800f708:	e0bffb04 	addi	r2,fp,-20
 800f70c:	1145883a 	add	r2,r2,r5
 800f710:	10c00005 	stb	r3,0(r2)
 800f714:	e0bff617 	ldw	r2,-40(fp)
 800f718:	10800044 	addi	r2,r2,1
 800f71c:	e0bff615 	stw	r2,-40(fp)
 800f720:	e0fff617 	ldw	r3,-40(fp)
 800f724:	e0bff917 	ldw	r2,-28(fp)
 800f728:	18bfeb16 	blt	r3,r2,800f6d8 <alt_flash_program_block+0x74>
 800f72c:	e03ff615 	stw	zero,-40(fp)
 800f730:	00000e06 	br	800f76c <alt_flash_program_block+0x108>
 800f734:	e0fff917 	ldw	r3,-28(fp)
 800f738:	e0bff617 	ldw	r2,-40(fp)
 800f73c:	1889883a 	add	r4,r3,r2
 800f740:	e0bff617 	ldw	r2,-40(fp)
 800f744:	1007883a 	mov	r3,r2
 800f748:	e0bffe17 	ldw	r2,-8(fp)
 800f74c:	1885883a 	add	r2,r3,r2
 800f750:	10c00003 	ldbu	r3,0(r2)
 800f754:	e0bffb04 	addi	r2,fp,-20
 800f758:	1105883a 	add	r2,r2,r4
 800f75c:	10c00005 	stb	r3,0(r2)
 800f760:	e0bff617 	ldw	r2,-40(fp)
 800f764:	10800044 	addi	r2,r2,1
 800f768:	e0bff615 	stw	r2,-40(fp)
 800f76c:	e0fff617 	ldw	r3,-40(fp)
 800f770:	e0bff817 	ldw	r2,-32(fp)
 800f774:	18bfef16 	blt	r3,r2,800f734 <alt_flash_program_block+0xd0>
 800f778:	e0fffd17 	ldw	r3,-12(fp)
 800f77c:	e0bff917 	ldw	r2,-28(fp)
 800f780:	188bc83a 	sub	r5,r3,r2
 800f784:	e1bffb04 	addi	r6,fp,-20
 800f788:	e0800217 	ldw	r2,8(fp)
 800f78c:	e13ffc17 	ldw	r4,-16(fp)
 800f790:	103ee83a 	callr	r2
 800f794:	e0bffa15 	stw	r2,-24(fp)
 800f798:	e0bff817 	ldw	r2,-32(fp)
 800f79c:	e0bff615 	stw	r2,-40(fp)
 800f7a0:	00000106 	br	800f7a8 <alt_flash_program_block+0x144>
 800f7a4:	e03ff615 	stw	zero,-40(fp)
 800f7a8:	e0fffd17 	ldw	r3,-12(fp)
 800f7ac:	e0bfff17 	ldw	r2,-4(fp)
 800f7b0:	1889883a 	add	r4,r3,r2
 800f7b4:	e0bffc17 	ldw	r2,-16(fp)
 800f7b8:	11402e17 	ldw	r5,184(r2)
 800f7bc:	8002f800 	call	8002f80 <__modsi3>
 800f7c0:	e0bff715 	stw	r2,-36(fp)
 800f7c4:	00001006 	br	800f808 <alt_flash_program_block+0x1a4>
 800f7c8:	e0fffd17 	ldw	r3,-12(fp)
 800f7cc:	e0bff617 	ldw	r2,-40(fp)
 800f7d0:	188b883a 	add	r5,r3,r2
 800f7d4:	e0bff617 	ldw	r2,-40(fp)
 800f7d8:	1007883a 	mov	r3,r2
 800f7dc:	e0bffe17 	ldw	r2,-8(fp)
 800f7e0:	188d883a 	add	r6,r3,r2
 800f7e4:	e0800217 	ldw	r2,8(fp)
 800f7e8:	e13ffc17 	ldw	r4,-16(fp)
 800f7ec:	103ee83a 	callr	r2
 800f7f0:	e0bffa15 	stw	r2,-24(fp)
 800f7f4:	e0bffc17 	ldw	r2,-16(fp)
 800f7f8:	10c02e17 	ldw	r3,184(r2)
 800f7fc:	e0bff617 	ldw	r2,-40(fp)
 800f800:	10c5883a 	add	r2,r2,r3
 800f804:	e0bff615 	stw	r2,-40(fp)
 800f808:	e0bffa17 	ldw	r2,-24(fp)
 800f80c:	1004c03a 	cmpne	r2,r2,zero
 800f810:	1000051e 	bne	r2,zero,800f828 <alt_flash_program_block+0x1c4>
 800f814:	e0ffff17 	ldw	r3,-4(fp)
 800f818:	e0bff717 	ldw	r2,-36(fp)
 800f81c:	1887c83a 	sub	r3,r3,r2
 800f820:	e0bff617 	ldw	r2,-40(fp)
 800f824:	10ffe816 	blt	r2,r3,800f7c8 <alt_flash_program_block+0x164>
 800f828:	e0bff717 	ldw	r2,-36(fp)
 800f82c:	1005003a 	cmpeq	r2,r2,zero
 800f830:	10003c1e 	bne	r2,zero,800f924 <alt_flash_program_block+0x2c0>
 800f834:	e0bffa17 	ldw	r2,-24(fp)
 800f838:	1004c03a 	cmpne	r2,r2,zero
 800f83c:	1000391e 	bne	r2,zero,800f924 <alt_flash_program_block+0x2c0>
 800f840:	e0bffc17 	ldw	r2,-16(fp)
 800f844:	10c02e17 	ldw	r3,184(r2)
 800f848:	e0bff717 	ldw	r2,-36(fp)
 800f84c:	1885c83a 	sub	r2,r3,r2
 800f850:	e0bff915 	stw	r2,-28(fp)
 800f854:	e03ff515 	stw	zero,-44(fp)
 800f858:	00000e06 	br	800f894 <alt_flash_program_block+0x230>
 800f85c:	e13ff517 	ldw	r4,-44(fp)
 800f860:	e0bff617 	ldw	r2,-40(fp)
 800f864:	1007883a 	mov	r3,r2
 800f868:	e0bffe17 	ldw	r2,-8(fp)
 800f86c:	1887883a 	add	r3,r3,r2
 800f870:	e0bff517 	ldw	r2,-44(fp)
 800f874:	1885883a 	add	r2,r3,r2
 800f878:	10c00003 	ldbu	r3,0(r2)
 800f87c:	e0bffb04 	addi	r2,fp,-20
 800f880:	1105883a 	add	r2,r2,r4
 800f884:	10c00005 	stb	r3,0(r2)
 800f888:	e0bff517 	ldw	r2,-44(fp)
 800f88c:	10800044 	addi	r2,r2,1
 800f890:	e0bff515 	stw	r2,-44(fp)
 800f894:	e0fff517 	ldw	r3,-44(fp)
 800f898:	e0bff717 	ldw	r2,-36(fp)
 800f89c:	18bfef16 	blt	r3,r2,800f85c <alt_flash_program_block+0x1f8>
 800f8a0:	e03ff515 	stw	zero,-44(fp)
 800f8a4:	00001406 	br	800f8f8 <alt_flash_program_block+0x294>
 800f8a8:	e0fff717 	ldw	r3,-36(fp)
 800f8ac:	e0bff517 	ldw	r2,-44(fp)
 800f8b0:	188b883a 	add	r5,r3,r2
 800f8b4:	e0bffc17 	ldw	r2,-16(fp)
 800f8b8:	10800a17 	ldw	r2,40(r2)
 800f8bc:	1009883a 	mov	r4,r2
 800f8c0:	e0fffd17 	ldw	r3,-12(fp)
 800f8c4:	e0bfff17 	ldw	r2,-4(fp)
 800f8c8:	1887883a 	add	r3,r3,r2
 800f8cc:	e0bff517 	ldw	r2,-44(fp)
 800f8d0:	1885883a 	add	r2,r3,r2
 800f8d4:	2085883a 	add	r2,r4,r2
 800f8d8:	10800023 	ldbuio	r2,0(r2)
 800f8dc:	1007883a 	mov	r3,r2
 800f8e0:	e0bffb04 	addi	r2,fp,-20
 800f8e4:	1145883a 	add	r2,r2,r5
 800f8e8:	10c00005 	stb	r3,0(r2)
 800f8ec:	e0bff517 	ldw	r2,-44(fp)
 800f8f0:	10800044 	addi	r2,r2,1
 800f8f4:	e0bff515 	stw	r2,-44(fp)
 800f8f8:	e0fff517 	ldw	r3,-44(fp)
 800f8fc:	e0bff917 	ldw	r2,-28(fp)
 800f900:	18bfe916 	blt	r3,r2,800f8a8 <alt_flash_program_block+0x244>
 800f904:	e0fffd17 	ldw	r3,-12(fp)
 800f908:	e0bff617 	ldw	r2,-40(fp)
 800f90c:	188b883a 	add	r5,r3,r2
 800f910:	e1bffb04 	addi	r6,fp,-20
 800f914:	e0800217 	ldw	r2,8(fp)
 800f918:	e13ffc17 	ldw	r4,-16(fp)
 800f91c:	103ee83a 	callr	r2
 800f920:	e0bffa15 	stw	r2,-24(fp)
 800f924:	e0bffa17 	ldw	r2,-24(fp)
 800f928:	e037883a 	mov	sp,fp
 800f92c:	dfc00117 	ldw	ra,4(sp)
 800f930:	df000017 	ldw	fp,0(sp)
 800f934:	dec00204 	addi	sp,sp,8
 800f938:	f800283a 	ret

0800f93c <alt_read_query_entry_8bit>:
 800f93c:	defffd04 	addi	sp,sp,-12
 800f940:	df000215 	stw	fp,8(sp)
 800f944:	df000204 	addi	fp,sp,8
 800f948:	e13ffe15 	stw	r4,-8(fp)
 800f94c:	e17fff15 	stw	r5,-4(fp)
 800f950:	e0bffe17 	ldw	r2,-8(fp)
 800f954:	10800a17 	ldw	r2,40(r2)
 800f958:	1007883a 	mov	r3,r2
 800f95c:	e0bfff17 	ldw	r2,-4(fp)
 800f960:	1885883a 	add	r2,r3,r2
 800f964:	10800023 	ldbuio	r2,0(r2)
 800f968:	10803fcc 	andi	r2,r2,255
 800f96c:	e037883a 	mov	sp,fp
 800f970:	df000017 	ldw	fp,0(sp)
 800f974:	dec00104 	addi	sp,sp,4
 800f978:	f800283a 	ret

0800f97c <alt_read_query_entry_16bit>:
 800f97c:	defffd04 	addi	sp,sp,-12
 800f980:	df000215 	stw	fp,8(sp)
 800f984:	df000204 	addi	fp,sp,8
 800f988:	e13ffe15 	stw	r4,-8(fp)
 800f98c:	e17fff15 	stw	r5,-4(fp)
 800f990:	e0bffe17 	ldw	r2,-8(fp)
 800f994:	10800a17 	ldw	r2,40(r2)
 800f998:	1007883a 	mov	r3,r2
 800f99c:	e0bfff17 	ldw	r2,-4(fp)
 800f9a0:	1085883a 	add	r2,r2,r2
 800f9a4:	1885883a 	add	r2,r3,r2
 800f9a8:	1080002b 	ldhuio	r2,0(r2)
 800f9ac:	10803fcc 	andi	r2,r2,255
 800f9b0:	e037883a 	mov	sp,fp
 800f9b4:	df000017 	ldw	fp,0(sp)
 800f9b8:	dec00104 	addi	sp,sp,4
 800f9bc:	f800283a 	ret

0800f9c0 <alt_read_query_entry_32bit>:
 800f9c0:	defffd04 	addi	sp,sp,-12
 800f9c4:	df000215 	stw	fp,8(sp)
 800f9c8:	df000204 	addi	fp,sp,8
 800f9cc:	e13ffe15 	stw	r4,-8(fp)
 800f9d0:	e17fff15 	stw	r5,-4(fp)
 800f9d4:	e0bffe17 	ldw	r2,-8(fp)
 800f9d8:	10800a17 	ldw	r2,40(r2)
 800f9dc:	1007883a 	mov	r3,r2
 800f9e0:	e0bfff17 	ldw	r2,-4(fp)
 800f9e4:	1085883a 	add	r2,r2,r2
 800f9e8:	1085883a 	add	r2,r2,r2
 800f9ec:	1885883a 	add	r2,r3,r2
 800f9f0:	10800037 	ldwio	r2,0(r2)
 800f9f4:	10803fcc 	andi	r2,r2,255
 800f9f8:	e037883a 	mov	sp,fp
 800f9fc:	df000017 	ldw	fp,0(sp)
 800fa00:	dec00104 	addi	sp,sp,4
 800fa04:	f800283a 	ret

0800fa08 <alt_write_flash_command_8bit_device_8bit_mode>:
 800fa08:	defffc04 	addi	sp,sp,-16
 800fa0c:	df000315 	stw	fp,12(sp)
 800fa10:	df000304 	addi	fp,sp,12
 800fa14:	e13ffd15 	stw	r4,-12(fp)
 800fa18:	e17ffe15 	stw	r5,-8(fp)
 800fa1c:	e1bfff05 	stb	r6,-4(fp)
 800fa20:	e0fffd17 	ldw	r3,-12(fp)
 800fa24:	e0bffe17 	ldw	r2,-8(fp)
 800fa28:	1885883a 	add	r2,r3,r2
 800fa2c:	e0ffff03 	ldbu	r3,-4(fp)
 800fa30:	10c00025 	stbio	r3,0(r2)
 800fa34:	e037883a 	mov	sp,fp
 800fa38:	df000017 	ldw	fp,0(sp)
 800fa3c:	dec00104 	addi	sp,sp,4
 800fa40:	f800283a 	ret

0800fa44 <alt_write_flash_command_16bit_device_8bit_mode>:
 800fa44:	defffc04 	addi	sp,sp,-16
 800fa48:	df000315 	stw	fp,12(sp)
 800fa4c:	df000304 	addi	fp,sp,12
 800fa50:	e13ffd15 	stw	r4,-12(fp)
 800fa54:	e17ffe15 	stw	r5,-8(fp)
 800fa58:	e1bfff05 	stb	r6,-4(fp)
 800fa5c:	e0bffe17 	ldw	r2,-8(fp)
 800fa60:	1080004c 	andi	r2,r2,1
 800fa64:	10803fcc 	andi	r2,r2,255
 800fa68:	1005003a 	cmpeq	r2,r2,zero
 800fa6c:	1000081e 	bne	r2,zero,800fa90 <alt_write_flash_command_16bit_device_8bit_mode+0x4c>
 800fa70:	e0bffe17 	ldw	r2,-8(fp)
 800fa74:	1085883a 	add	r2,r2,r2
 800fa78:	1007883a 	mov	r3,r2
 800fa7c:	e0bffd17 	ldw	r2,-12(fp)
 800fa80:	1885883a 	add	r2,r3,r2
 800fa84:	e0ffff03 	ldbu	r3,-4(fp)
 800fa88:	10c00025 	stbio	r3,0(r2)
 800fa8c:	00000806 	br	800fab0 <alt_write_flash_command_16bit_device_8bit_mode+0x6c>
 800fa90:	e0bffe17 	ldw	r2,-8(fp)
 800fa94:	1085883a 	add	r2,r2,r2
 800fa98:	1007883a 	mov	r3,r2
 800fa9c:	e0bffd17 	ldw	r2,-12(fp)
 800faa0:	1885883a 	add	r2,r3,r2
 800faa4:	10800044 	addi	r2,r2,1
 800faa8:	e0ffff03 	ldbu	r3,-4(fp)
 800faac:	10c00025 	stbio	r3,0(r2)
 800fab0:	e037883a 	mov	sp,fp
 800fab4:	df000017 	ldw	fp,0(sp)
 800fab8:	dec00104 	addi	sp,sp,4
 800fabc:	f800283a 	ret

0800fac0 <alt_write_flash_command_32bit_device_8bit_mode>:
 800fac0:	defffc04 	addi	sp,sp,-16
 800fac4:	df000315 	stw	fp,12(sp)
 800fac8:	df000304 	addi	fp,sp,12
 800facc:	e13ffd15 	stw	r4,-12(fp)
 800fad0:	e17ffe15 	stw	r5,-8(fp)
 800fad4:	e1bfff05 	stb	r6,-4(fp)
 800fad8:	e0bffe17 	ldw	r2,-8(fp)
 800fadc:	1085883a 	add	r2,r2,r2
 800fae0:	1085883a 	add	r2,r2,r2
 800fae4:	1007883a 	mov	r3,r2
 800fae8:	e0bffd17 	ldw	r2,-12(fp)
 800faec:	1885883a 	add	r2,r3,r2
 800faf0:	e0ffff03 	ldbu	r3,-4(fp)
 800faf4:	10c00025 	stbio	r3,0(r2)
 800faf8:	e037883a 	mov	sp,fp
 800fafc:	df000017 	ldw	fp,0(sp)
 800fb00:	dec00104 	addi	sp,sp,4
 800fb04:	f800283a 	ret

0800fb08 <alt_write_flash_command_16bit_device_16bit_mode>:
 800fb08:	defffc04 	addi	sp,sp,-16
 800fb0c:	df000315 	stw	fp,12(sp)
 800fb10:	df000304 	addi	fp,sp,12
 800fb14:	e13ffd15 	stw	r4,-12(fp)
 800fb18:	e17ffe15 	stw	r5,-8(fp)
 800fb1c:	e1bfff05 	stb	r6,-4(fp)
 800fb20:	e0bffe17 	ldw	r2,-8(fp)
 800fb24:	1085883a 	add	r2,r2,r2
 800fb28:	1007883a 	mov	r3,r2
 800fb2c:	e0bffd17 	ldw	r2,-12(fp)
 800fb30:	1885883a 	add	r2,r3,r2
 800fb34:	e0ffff03 	ldbu	r3,-4(fp)
 800fb38:	10c0002d 	sthio	r3,0(r2)
 800fb3c:	e037883a 	mov	sp,fp
 800fb40:	df000017 	ldw	fp,0(sp)
 800fb44:	dec00104 	addi	sp,sp,4
 800fb48:	f800283a 	ret

0800fb4c <alt_write_flash_command_32bit_device_16bit_mode>:
 800fb4c:	defffc04 	addi	sp,sp,-16
 800fb50:	df000315 	stw	fp,12(sp)
 800fb54:	df000304 	addi	fp,sp,12
 800fb58:	e13ffd15 	stw	r4,-12(fp)
 800fb5c:	e17ffe15 	stw	r5,-8(fp)
 800fb60:	e1bfff05 	stb	r6,-4(fp)
 800fb64:	e0bffe17 	ldw	r2,-8(fp)
 800fb68:	1085883a 	add	r2,r2,r2
 800fb6c:	1085883a 	add	r2,r2,r2
 800fb70:	1007883a 	mov	r3,r2
 800fb74:	e0bffd17 	ldw	r2,-12(fp)
 800fb78:	1885883a 	add	r2,r3,r2
 800fb7c:	e0ffff03 	ldbu	r3,-4(fp)
 800fb80:	10c0002d 	sthio	r3,0(r2)
 800fb84:	e037883a 	mov	sp,fp
 800fb88:	df000017 	ldw	fp,0(sp)
 800fb8c:	dec00104 	addi	sp,sp,4
 800fb90:	f800283a 	ret

0800fb94 <alt_write_flash_command_32bit_device_32bit_mode>:
 800fb94:	defffc04 	addi	sp,sp,-16
 800fb98:	df000315 	stw	fp,12(sp)
 800fb9c:	df000304 	addi	fp,sp,12
 800fba0:	e13ffd15 	stw	r4,-12(fp)
 800fba4:	e17ffe15 	stw	r5,-8(fp)
 800fba8:	e1bfff05 	stb	r6,-4(fp)
 800fbac:	e0bffe17 	ldw	r2,-8(fp)
 800fbb0:	1085883a 	add	r2,r2,r2
 800fbb4:	1085883a 	add	r2,r2,r2
 800fbb8:	1007883a 	mov	r3,r2
 800fbbc:	e0bffd17 	ldw	r2,-12(fp)
 800fbc0:	1885883a 	add	r2,r3,r2
 800fbc4:	e0ffff03 	ldbu	r3,-4(fp)
 800fbc8:	10c00035 	stwio	r3,0(r2)
 800fbcc:	e037883a 	mov	sp,fp
 800fbd0:	df000017 	ldw	fp,0(sp)
 800fbd4:	dec00104 	addi	sp,sp,4
 800fbd8:	f800283a 	ret

0800fbdc <alt_write_native_8bit>:
 800fbdc:	defffd04 	addi	sp,sp,-12
 800fbe0:	df000215 	stw	fp,8(sp)
 800fbe4:	df000204 	addi	fp,sp,8
 800fbe8:	e13ffe15 	stw	r4,-8(fp)
 800fbec:	e17fff15 	stw	r5,-4(fp)
 800fbf0:	e0bfff17 	ldw	r2,-4(fp)
 800fbf4:	10c03fcc 	andi	r3,r2,255
 800fbf8:	e0bffe17 	ldw	r2,-8(fp)
 800fbfc:	10c00025 	stbio	r3,0(r2)
 800fc00:	e037883a 	mov	sp,fp
 800fc04:	df000017 	ldw	fp,0(sp)
 800fc08:	dec00104 	addi	sp,sp,4
 800fc0c:	f800283a 	ret

0800fc10 <alt_write_native_16bit>:
 800fc10:	defffd04 	addi	sp,sp,-12
 800fc14:	df000215 	stw	fp,8(sp)
 800fc18:	df000204 	addi	fp,sp,8
 800fc1c:	e13ffe15 	stw	r4,-8(fp)
 800fc20:	e17fff15 	stw	r5,-4(fp)
 800fc24:	e0bfff17 	ldw	r2,-4(fp)
 800fc28:	10ffffcc 	andi	r3,r2,65535
 800fc2c:	e0bffe17 	ldw	r2,-8(fp)
 800fc30:	10c0002d 	sthio	r3,0(r2)
 800fc34:	e037883a 	mov	sp,fp
 800fc38:	df000017 	ldw	fp,0(sp)
 800fc3c:	dec00104 	addi	sp,sp,4
 800fc40:	f800283a 	ret

0800fc44 <alt_write_native_32bit>:
 800fc44:	defffd04 	addi	sp,sp,-12
 800fc48:	df000215 	stw	fp,8(sp)
 800fc4c:	df000204 	addi	fp,sp,8
 800fc50:	e13ffe15 	stw	r4,-8(fp)
 800fc54:	e17fff15 	stw	r5,-4(fp)
 800fc58:	e0ffff17 	ldw	r3,-4(fp)
 800fc5c:	e0bffe17 	ldw	r2,-8(fp)
 800fc60:	10c00035 	stwio	r3,0(r2)
 800fc64:	e037883a 	mov	sp,fp
 800fc68:	df000017 	ldw	fp,0(sp)
 800fc6c:	dec00104 	addi	sp,sp,4
 800fc70:	f800283a 	ret

0800fc74 <alt_set_flash_width_func>:
 800fc74:	defffb04 	addi	sp,sp,-20
 800fc78:	df000415 	stw	fp,16(sp)
 800fc7c:	df000404 	addi	fp,sp,16
 800fc80:	e13ffd15 	stw	r4,-12(fp)
 800fc84:	e03ffc15 	stw	zero,-16(fp)
 800fc88:	e0bffd17 	ldw	r2,-12(fp)
 800fc8c:	10802e17 	ldw	r2,184(r2)
 800fc90:	e0bfff15 	stw	r2,-4(fp)
 800fc94:	e0ffff17 	ldw	r3,-4(fp)
 800fc98:	188000a0 	cmpeqi	r2,r3,2
 800fc9c:	1000261e 	bne	r2,zero,800fd38 <alt_set_flash_width_func+0xc4>
 800fca0:	e0ffff17 	ldw	r3,-4(fp)
 800fca4:	18800120 	cmpeqi	r2,r3,4
 800fca8:	1000391e 	bne	r2,zero,800fd90 <alt_set_flash_width_func+0x11c>
 800fcac:	e0ffff17 	ldw	r3,-4(fp)
 800fcb0:	18800060 	cmpeqi	r2,r3,1
 800fcb4:	1000011e 	bne	r2,zero,800fcbc <alt_set_flash_width_func+0x48>
 800fcb8:	00003e06 	br	800fdb4 <alt_set_flash_width_func+0x140>
 800fcbc:	e0fffd17 	ldw	r3,-12(fp)
 800fcc0:	00820074 	movhi	r2,2049
 800fcc4:	10bef704 	addi	r2,r2,-1060
 800fcc8:	18803515 	stw	r2,212(r3)
 800fccc:	e0bffd17 	ldw	r2,-12(fp)
 800fcd0:	10802f17 	ldw	r2,188(r2)
 800fcd4:	10800058 	cmpnei	r2,r2,1
 800fcd8:	1000051e 	bne	r2,zero,800fcf0 <alt_set_flash_width_func+0x7c>
 800fcdc:	e0fffd17 	ldw	r3,-12(fp)
 800fce0:	00820074 	movhi	r2,2049
 800fce4:	10be8204 	addi	r2,r2,-1528
 800fce8:	18803315 	stw	r2,204(r3)
 800fcec:	00003306 	br	800fdbc <alt_set_flash_width_func+0x148>
 800fcf0:	e0bffd17 	ldw	r2,-12(fp)
 800fcf4:	10802f17 	ldw	r2,188(r2)
 800fcf8:	10800098 	cmpnei	r2,r2,2
 800fcfc:	1000051e 	bne	r2,zero,800fd14 <alt_set_flash_width_func+0xa0>
 800fd00:	e0fffd17 	ldw	r3,-12(fp)
 800fd04:	00820074 	movhi	r2,2049
 800fd08:	10be9104 	addi	r2,r2,-1468
 800fd0c:	18803315 	stw	r2,204(r3)
 800fd10:	00002a06 	br	800fdbc <alt_set_flash_width_func+0x148>
 800fd14:	e0bffd17 	ldw	r2,-12(fp)
 800fd18:	10802f17 	ldw	r2,188(r2)
 800fd1c:	10800118 	cmpnei	r2,r2,4
 800fd20:	1000261e 	bne	r2,zero,800fdbc <alt_set_flash_width_func+0x148>
 800fd24:	e0fffd17 	ldw	r3,-12(fp)
 800fd28:	00820074 	movhi	r2,2049
 800fd2c:	10beb004 	addi	r2,r2,-1344
 800fd30:	18803315 	stw	r2,204(r3)
 800fd34:	00002106 	br	800fdbc <alt_set_flash_width_func+0x148>
 800fd38:	e0fffd17 	ldw	r3,-12(fp)
 800fd3c:	00820074 	movhi	r2,2049
 800fd40:	10bf0404 	addi	r2,r2,-1008
 800fd44:	18803515 	stw	r2,212(r3)
 800fd48:	e0bffd17 	ldw	r2,-12(fp)
 800fd4c:	10802f17 	ldw	r2,188(r2)
 800fd50:	10800098 	cmpnei	r2,r2,2
 800fd54:	1000051e 	bne	r2,zero,800fd6c <alt_set_flash_width_func+0xf8>
 800fd58:	e0fffd17 	ldw	r3,-12(fp)
 800fd5c:	00820074 	movhi	r2,2049
 800fd60:	10bec204 	addi	r2,r2,-1272
 800fd64:	18803315 	stw	r2,204(r3)
 800fd68:	00001406 	br	800fdbc <alt_set_flash_width_func+0x148>
 800fd6c:	e0bffd17 	ldw	r2,-12(fp)
 800fd70:	10802f17 	ldw	r2,188(r2)
 800fd74:	10800118 	cmpnei	r2,r2,4
 800fd78:	1000101e 	bne	r2,zero,800fdbc <alt_set_flash_width_func+0x148>
 800fd7c:	e0fffd17 	ldw	r3,-12(fp)
 800fd80:	00820074 	movhi	r2,2049
 800fd84:	10bed304 	addi	r2,r2,-1204
 800fd88:	18803315 	stw	r2,204(r3)
 800fd8c:	00000b06 	br	800fdbc <alt_set_flash_width_func+0x148>
 800fd90:	e0fffd17 	ldw	r3,-12(fp)
 800fd94:	00820074 	movhi	r2,2049
 800fd98:	10bf1104 	addi	r2,r2,-956
 800fd9c:	18803515 	stw	r2,212(r3)
 800fda0:	e0fffd17 	ldw	r3,-12(fp)
 800fda4:	00820074 	movhi	r2,2049
 800fda8:	10bee504 	addi	r2,r2,-1132
 800fdac:	18803315 	stw	r2,204(r3)
 800fdb0:	00000206 	br	800fdbc <alt_set_flash_width_func+0x148>
 800fdb4:	00bffcc4 	movi	r2,-13
 800fdb8:	e0bffc15 	stw	r2,-16(fp)
 800fdbc:	e0bffc17 	ldw	r2,-16(fp)
 800fdc0:	1004c03a 	cmpne	r2,r2,zero
 800fdc4:	10001e1e 	bne	r2,zero,800fe40 <alt_set_flash_width_func+0x1cc>
 800fdc8:	e0bffd17 	ldw	r2,-12(fp)
 800fdcc:	10802f17 	ldw	r2,188(r2)
 800fdd0:	e0bffe15 	stw	r2,-8(fp)
 800fdd4:	e0fffe17 	ldw	r3,-8(fp)
 800fdd8:	188000a0 	cmpeqi	r2,r3,2
 800fddc:	10000c1e 	bne	r2,zero,800fe10 <alt_set_flash_width_func+0x19c>
 800fde0:	e0fffe17 	ldw	r3,-8(fp)
 800fde4:	18800120 	cmpeqi	r2,r3,4
 800fde8:	10000e1e 	bne	r2,zero,800fe24 <alt_set_flash_width_func+0x1b0>
 800fdec:	e0fffe17 	ldw	r3,-8(fp)
 800fdf0:	18800060 	cmpeqi	r2,r3,1
 800fdf4:	1000011e 	bne	r2,zero,800fdfc <alt_set_flash_width_func+0x188>
 800fdf8:	00000f06 	br	800fe38 <alt_set_flash_width_func+0x1c4>
 800fdfc:	e0fffd17 	ldw	r3,-12(fp)
 800fe00:	00820074 	movhi	r2,2049
 800fe04:	10be4f04 	addi	r2,r2,-1732
 800fe08:	18803415 	stw	r2,208(r3)
 800fe0c:	00000c06 	br	800fe40 <alt_set_flash_width_func+0x1cc>
 800fe10:	e0fffd17 	ldw	r3,-12(fp)
 800fe14:	00820074 	movhi	r2,2049
 800fe18:	10be5f04 	addi	r2,r2,-1668
 800fe1c:	18803415 	stw	r2,208(r3)
 800fe20:	00000706 	br	800fe40 <alt_set_flash_width_func+0x1cc>
 800fe24:	e0fffd17 	ldw	r3,-12(fp)
 800fe28:	00820074 	movhi	r2,2049
 800fe2c:	10be7004 	addi	r2,r2,-1600
 800fe30:	18803415 	stw	r2,208(r3)
 800fe34:	00000206 	br	800fe40 <alt_set_flash_width_func+0x1cc>
 800fe38:	00bffcc4 	movi	r2,-13
 800fe3c:	e0bffc15 	stw	r2,-16(fp)
 800fe40:	e0bffc17 	ldw	r2,-16(fp)
 800fe44:	e037883a 	mov	sp,fp
 800fe48:	df000017 	ldw	fp,0(sp)
 800fe4c:	dec00104 	addi	sp,sp,4
 800fe50:	f800283a 	ret

0800fe54 <alt_set_flash_algorithm_func>:
 800fe54:	defffc04 	addi	sp,sp,-16
 800fe58:	df000315 	stw	fp,12(sp)
 800fe5c:	df000304 	addi	fp,sp,12
 800fe60:	e13ffe15 	stw	r4,-8(fp)
 800fe64:	e03ffd15 	stw	zero,-12(fp)
 800fe68:	e0bffe17 	ldw	r2,-8(fp)
 800fe6c:	10802d17 	ldw	r2,180(r2)
 800fe70:	e0bfff15 	stw	r2,-4(fp)
 800fe74:	e0ffff17 	ldw	r3,-4(fp)
 800fe78:	188000a0 	cmpeqi	r2,r3,2
 800fe7c:	1000071e 	bne	r2,zero,800fe9c <alt_set_flash_algorithm_func+0x48>
 800fe80:	e0ffff17 	ldw	r3,-4(fp)
 800fe84:	188000e0 	cmpeqi	r2,r3,3
 800fe88:	10000d1e 	bne	r2,zero,800fec0 <alt_set_flash_algorithm_func+0x6c>
 800fe8c:	e0ffff17 	ldw	r3,-4(fp)
 800fe90:	18800060 	cmpeqi	r2,r3,1
 800fe94:	10000a1e 	bne	r2,zero,800fec0 <alt_set_flash_algorithm_func+0x6c>
 800fe98:	00001206 	br	800fee4 <alt_set_flash_algorithm_func+0x90>
 800fe9c:	e0fffe17 	ldw	r3,-8(fp)
 800fea0:	00820074 	movhi	r2,2049
 800fea4:	1098d404 	addi	r2,r2,25424
 800fea8:	18800815 	stw	r2,32(r3)
 800feac:	e0fffe17 	ldw	r3,-8(fp)
 800feb0:	00820074 	movhi	r2,2049
 800feb4:	1098ba04 	addi	r2,r2,25320
 800feb8:	18800915 	stw	r2,36(r3)
 800febc:	00000b06 	br	800feec <alt_set_flash_algorithm_func+0x98>
 800fec0:	e0fffe17 	ldw	r3,-8(fp)
 800fec4:	00820074 	movhi	r2,2049
 800fec8:	1099f304 	addi	r2,r2,26572
 800fecc:	18800815 	stw	r2,32(r3)
 800fed0:	e0fffe17 	ldw	r3,-8(fp)
 800fed4:	00820074 	movhi	r2,2049
 800fed8:	1099d204 	addi	r2,r2,26440
 800fedc:	18800915 	stw	r2,36(r3)
 800fee0:	00000206 	br	800feec <alt_set_flash_algorithm_func+0x98>
 800fee4:	00bffec4 	movi	r2,-5
 800fee8:	e0bffd15 	stw	r2,-12(fp)
 800feec:	e0bffd17 	ldw	r2,-12(fp)
 800fef0:	e037883a 	mov	sp,fp
 800fef4:	df000017 	ldw	fp,0(sp)
 800fef8:	dec00104 	addi	sp,sp,4
 800fefc:	f800283a 	ret

0800ff00 <alt_read_16bit_query_entry>:
 800ff00:	defffb04 	addi	sp,sp,-20
 800ff04:	dfc00415 	stw	ra,16(sp)
 800ff08:	df000315 	stw	fp,12(sp)
 800ff0c:	df000304 	addi	fp,sp,12
 800ff10:	e13ffe15 	stw	r4,-8(fp)
 800ff14:	e17fff15 	stw	r5,-4(fp)
 800ff18:	e0bffe17 	ldw	r2,-8(fp)
 800ff1c:	10803417 	ldw	r2,208(r2)
 800ff20:	e13ffe17 	ldw	r4,-8(fp)
 800ff24:	e17fff17 	ldw	r5,-4(fp)
 800ff28:	103ee83a 	callr	r2
 800ff2c:	10803fcc 	andi	r2,r2,255
 800ff30:	e0bffd0d 	sth	r2,-12(fp)
 800ff34:	e0bffe17 	ldw	r2,-8(fp)
 800ff38:	10c03417 	ldw	r3,208(r2)
 800ff3c:	e0bfff17 	ldw	r2,-4(fp)
 800ff40:	11400044 	addi	r5,r2,1
 800ff44:	e13ffe17 	ldw	r4,-8(fp)
 800ff48:	183ee83a 	callr	r3
 800ff4c:	10803fcc 	andi	r2,r2,255
 800ff50:	1004923a 	slli	r2,r2,8
 800ff54:	1007883a 	mov	r3,r2
 800ff58:	e0bffd0b 	ldhu	r2,-12(fp)
 800ff5c:	1884b03a 	or	r2,r3,r2
 800ff60:	e0bffd0d 	sth	r2,-12(fp)
 800ff64:	e0bffd0b 	ldhu	r2,-12(fp)
 800ff68:	e037883a 	mov	sp,fp
 800ff6c:	dfc00117 	ldw	ra,4(sp)
 800ff70:	df000017 	ldw	fp,0(sp)
 800ff74:	dec00204 	addi	sp,sp,8
 800ff78:	f800283a 	ret

0800ff7c <alt_read_cfi_table>:
 800ff7c:	defff204 	addi	sp,sp,-56
 800ff80:	dfc00d15 	stw	ra,52(sp)
 800ff84:	df000c15 	stw	fp,48(sp)
 800ff88:	dc000b15 	stw	r16,44(sp)
 800ff8c:	df000b04 	addi	fp,sp,44
 800ff90:	e13fff15 	stw	r4,-4(fp)
 800ff94:	e03ffb15 	stw	zero,-20(fp)
 800ff98:	e03ffa15 	stw	zero,-24(fp)
 800ff9c:	e03ff615 	stw	zero,-40(fp)
 800ffa0:	e13fff17 	ldw	r4,-4(fp)
 800ffa4:	8010ca80 	call	8010ca8 <alt_check_primary_table>
 800ffa8:	e0bffb15 	stw	r2,-20(fp)
 800ffac:	e0bffb17 	ldw	r2,-20(fp)
 800ffb0:	1004c03a 	cmpne	r2,r2,zero
 800ffb4:	10014a1e 	bne	r2,zero,80104e0 <alt_read_cfi_table+0x564>
 800ffb8:	e0bfff17 	ldw	r2,-4(fp)
 800ffbc:	10803417 	ldw	r2,208(r2)
 800ffc0:	e13fff17 	ldw	r4,-4(fp)
 800ffc4:	014004c4 	movi	r5,19
 800ffc8:	103ee83a 	callr	r2
 800ffcc:	10c03fcc 	andi	r3,r2,255
 800ffd0:	e0bfff17 	ldw	r2,-4(fp)
 800ffd4:	10c02d15 	stw	r3,180(r2)
 800ffd8:	e0bfff17 	ldw	r2,-4(fp)
 800ffdc:	10803417 	ldw	r2,208(r2)
 800ffe0:	e13fff17 	ldw	r4,-4(fp)
 800ffe4:	014007c4 	movi	r5,31
 800ffe8:	103ee83a 	callr	r2
 800ffec:	10803fcc 	andi	r2,r2,255
 800fff0:	e0bff815 	stw	r2,-32(fp)
 800fff4:	e0bfff17 	ldw	r2,-4(fp)
 800fff8:	10803417 	ldw	r2,208(r2)
 800fffc:	e13fff17 	ldw	r4,-4(fp)
 8010000:	014008c4 	movi	r5,35
 8010004:	103ee83a 	callr	r2
 8010008:	10803fcc 	andi	r2,r2,255
 801000c:	e0bff715 	stw	r2,-36(fp)
 8010010:	e0bff817 	ldw	r2,-32(fp)
 8010014:	1005003a 	cmpeq	r2,r2,zero
 8010018:	1000031e 	bne	r2,zero,8010028 <alt_read_cfi_table+0xac>
 801001c:	e0bff717 	ldw	r2,-36(fp)
 8010020:	1004c03a 	cmpne	r2,r2,zero
 8010024:	1000041e 	bne	r2,zero,8010038 <alt_read_cfi_table+0xbc>
 8010028:	e0ffff17 	ldw	r3,-4(fp)
 801002c:	0080fa04 	movi	r2,1000
 8010030:	18803015 	stw	r2,192(r3)
 8010034:	00000706 	br	8010054 <alt_read_cfi_table+0xd8>
 8010038:	00c00044 	movi	r3,1
 801003c:	e0bff817 	ldw	r2,-32(fp)
 8010040:	1886983a 	sll	r3,r3,r2
 8010044:	e0bff717 	ldw	r2,-36(fp)
 8010048:	1886983a 	sll	r3,r3,r2
 801004c:	e0bfff17 	ldw	r2,-4(fp)
 8010050:	10c03015 	stw	r3,192(r2)
 8010054:	e0bfff17 	ldw	r2,-4(fp)
 8010058:	10803417 	ldw	r2,208(r2)
 801005c:	e13fff17 	ldw	r4,-4(fp)
 8010060:	01400844 	movi	r5,33
 8010064:	103ee83a 	callr	r2
 8010068:	10803fcc 	andi	r2,r2,255
 801006c:	e0bff815 	stw	r2,-32(fp)
 8010070:	e0bfff17 	ldw	r2,-4(fp)
 8010074:	10803417 	ldw	r2,208(r2)
 8010078:	e13fff17 	ldw	r4,-4(fp)
 801007c:	01400944 	movi	r5,37
 8010080:	103ee83a 	callr	r2
 8010084:	10803fcc 	andi	r2,r2,255
 8010088:	e0bff715 	stw	r2,-36(fp)
 801008c:	e0bff817 	ldw	r2,-32(fp)
 8010090:	1005003a 	cmpeq	r2,r2,zero
 8010094:	1000031e 	bne	r2,zero,80100a4 <alt_read_cfi_table+0x128>
 8010098:	e0bff717 	ldw	r2,-36(fp)
 801009c:	1004c03a 	cmpne	r2,r2,zero
 80100a0:	1000051e 	bne	r2,zero,80100b8 <alt_read_cfi_table+0x13c>
 80100a4:	e0ffff17 	ldw	r3,-4(fp)
 80100a8:	00804c74 	movhi	r2,305
 80100ac:	108b4004 	addi	r2,r2,11520
 80100b0:	18803115 	stw	r2,196(r3)
 80100b4:	00000806 	br	80100d8 <alt_read_cfi_table+0x15c>
 80100b8:	00c00044 	movi	r3,1
 80100bc:	e0bff817 	ldw	r2,-32(fp)
 80100c0:	1886983a 	sll	r3,r3,r2
 80100c4:	e0bff717 	ldw	r2,-36(fp)
 80100c8:	1884983a 	sll	r2,r3,r2
 80100cc:	10c0fa24 	muli	r3,r2,1000
 80100d0:	e0bfff17 	ldw	r2,-4(fp)
 80100d4:	10c03115 	stw	r3,196(r2)
 80100d8:	e0bfff17 	ldw	r2,-4(fp)
 80100dc:	10803417 	ldw	r2,208(r2)
 80100e0:	e13fff17 	ldw	r4,-4(fp)
 80100e4:	014009c4 	movi	r5,39
 80100e8:	103ee83a 	callr	r2
 80100ec:	10c03fcc 	andi	r3,r2,255
 80100f0:	00800044 	movi	r2,1
 80100f4:	10c4983a 	sll	r2,r2,r3
 80100f8:	e0bffc15 	stw	r2,-16(fp)
 80100fc:	e0bfff17 	ldw	r2,-4(fp)
 8010100:	10803417 	ldw	r2,208(r2)
 8010104:	e13fff17 	ldw	r4,-4(fp)
 8010108:	01400b04 	movi	r5,44
 801010c:	103ee83a 	callr	r2
 8010110:	10c03fcc 	andi	r3,r2,255
 8010114:	e0bfff17 	ldw	r2,-4(fp)
 8010118:	10c00c15 	stw	r3,48(r2)
 801011c:	e0bfff17 	ldw	r2,-4(fp)
 8010120:	10800c17 	ldw	r2,48(r2)
 8010124:	10800250 	cmplti	r2,r2,9
 8010128:	1000031e 	bne	r2,zero,8010138 <alt_read_cfi_table+0x1bc>
 801012c:	00bffd04 	movi	r2,-12
 8010130:	e0bffb15 	stw	r2,-20(fp)
 8010134:	00005e06 	br	80102b0 <alt_read_cfi_table+0x334>
 8010138:	e03ffe15 	stw	zero,-8(fp)
 801013c:	00005306 	br	801028c <alt_read_cfi_table+0x310>
 8010140:	e43ffe17 	ldw	r16,-8(fp)
 8010144:	e0bffe17 	ldw	r2,-8(fp)
 8010148:	1085883a 	add	r2,r2,r2
 801014c:	1085883a 	add	r2,r2,r2
 8010150:	11400b44 	addi	r5,r2,45
 8010154:	e13fff17 	ldw	r4,-4(fp)
 8010158:	800ff000 	call	800ff00 <alt_read_16bit_query_entry>
 801015c:	113fffcc 	andi	r4,r2,65535
 8010160:	e0ffff17 	ldw	r3,-4(fp)
 8010164:	8004913a 	slli	r2,r16,4
 8010168:	10c5883a 	add	r2,r2,r3
 801016c:	10800f04 	addi	r2,r2,60
 8010170:	11000015 	stw	r4,0(r2)
 8010174:	e17ffe17 	ldw	r5,-8(fp)
 8010178:	e0bffe17 	ldw	r2,-8(fp)
 801017c:	e0ffff17 	ldw	r3,-4(fp)
 8010180:	1004913a 	slli	r2,r2,4
 8010184:	10c5883a 	add	r2,r2,r3
 8010188:	10800f04 	addi	r2,r2,60
 801018c:	10800017 	ldw	r2,0(r2)
 8010190:	11000044 	addi	r4,r2,1
 8010194:	e0ffff17 	ldw	r3,-4(fp)
 8010198:	2804913a 	slli	r2,r5,4
 801019c:	10c5883a 	add	r2,r2,r3
 80101a0:	10800f04 	addi	r2,r2,60
 80101a4:	11000015 	stw	r4,0(r2)
 80101a8:	e43ffe17 	ldw	r16,-8(fp)
 80101ac:	e0bffe17 	ldw	r2,-8(fp)
 80101b0:	1085883a 	add	r2,r2,r2
 80101b4:	1085883a 	add	r2,r2,r2
 80101b8:	11400bc4 	addi	r5,r2,47
 80101bc:	e13fff17 	ldw	r4,-4(fp)
 80101c0:	800ff000 	call	800ff00 <alt_read_16bit_query_entry>
 80101c4:	113fffcc 	andi	r4,r2,65535
 80101c8:	e0ffff17 	ldw	r3,-4(fp)
 80101cc:	8004913a 	slli	r2,r16,4
 80101d0:	10c5883a 	add	r2,r2,r3
 80101d4:	10801004 	addi	r2,r2,64
 80101d8:	11000015 	stw	r4,0(r2)
 80101dc:	e17ffe17 	ldw	r5,-8(fp)
 80101e0:	e0bffe17 	ldw	r2,-8(fp)
 80101e4:	e0ffff17 	ldw	r3,-4(fp)
 80101e8:	1004913a 	slli	r2,r2,4
 80101ec:	10c5883a 	add	r2,r2,r3
 80101f0:	10801004 	addi	r2,r2,64
 80101f4:	10800017 	ldw	r2,0(r2)
 80101f8:	1008923a 	slli	r4,r2,8
 80101fc:	e0ffff17 	ldw	r3,-4(fp)
 8010200:	2804913a 	slli	r2,r5,4
 8010204:	10c5883a 	add	r2,r2,r3
 8010208:	10801004 	addi	r2,r2,64
 801020c:	11000015 	stw	r4,0(r2)
 8010210:	e17ffe17 	ldw	r5,-8(fp)
 8010214:	e0bffe17 	ldw	r2,-8(fp)
 8010218:	e0ffff17 	ldw	r3,-4(fp)
 801021c:	1004913a 	slli	r2,r2,4
 8010220:	10c5883a 	add	r2,r2,r3
 8010224:	10800f04 	addi	r2,r2,60
 8010228:	11000017 	ldw	r4,0(r2)
 801022c:	e0bffe17 	ldw	r2,-8(fp)
 8010230:	e0ffff17 	ldw	r3,-4(fp)
 8010234:	1004913a 	slli	r2,r2,4
 8010238:	10c5883a 	add	r2,r2,r3
 801023c:	10801004 	addi	r2,r2,64
 8010240:	10800017 	ldw	r2,0(r2)
 8010244:	2089383a 	mul	r4,r4,r2
 8010248:	e0ffff17 	ldw	r3,-4(fp)
 801024c:	2804913a 	slli	r2,r5,4
 8010250:	10c5883a 	add	r2,r2,r3
 8010254:	10800e04 	addi	r2,r2,56
 8010258:	11000015 	stw	r4,0(r2)
 801025c:	e0bffe17 	ldw	r2,-8(fp)
 8010260:	e0ffff17 	ldw	r3,-4(fp)
 8010264:	1004913a 	slli	r2,r2,4
 8010268:	10c5883a 	add	r2,r2,r3
 801026c:	10800e04 	addi	r2,r2,56
 8010270:	10c00017 	ldw	r3,0(r2)
 8010274:	e0bffa17 	ldw	r2,-24(fp)
 8010278:	10c5883a 	add	r2,r2,r3
 801027c:	e0bffa15 	stw	r2,-24(fp)
 8010280:	e0bffe17 	ldw	r2,-8(fp)
 8010284:	10800044 	addi	r2,r2,1
 8010288:	e0bffe15 	stw	r2,-8(fp)
 801028c:	e0bfff17 	ldw	r2,-4(fp)
 8010290:	10c00c17 	ldw	r3,48(r2)
 8010294:	e0bffe17 	ldw	r2,-8(fp)
 8010298:	10ffa916 	blt	r2,r3,8010140 <alt_read_cfi_table+0x1c4>
 801029c:	e0fffa17 	ldw	r3,-24(fp)
 80102a0:	e0bffc17 	ldw	r2,-16(fp)
 80102a4:	18800226 	beq	r3,r2,80102b0 <alt_read_cfi_table+0x334>
 80102a8:	00bffb44 	movi	r2,-19
 80102ac:	e0bffb15 	stw	r2,-20(fp)
 80102b0:	e0bfff17 	ldw	r2,-4(fp)
 80102b4:	10c03417 	ldw	r3,208(r2)
 80102b8:	e0bfff17 	ldw	r2,-4(fp)
 80102bc:	10803217 	ldw	r2,200(r2)
 80102c0:	114003c4 	addi	r5,r2,15
 80102c4:	e13fff17 	ldw	r4,-4(fp)
 80102c8:	183ee83a 	callr	r3
 80102cc:	e0bff505 	stb	r2,-44(fp)
 80102d0:	e0bfff17 	ldw	r2,-4(fp)
 80102d4:	10802d17 	ldw	r2,180(r2)
 80102d8:	10800098 	cmpnei	r2,r2,2
 80102dc:	1000601e 	bne	r2,zero,8010460 <alt_read_cfi_table+0x4e4>
 80102e0:	e0bff503 	ldbu	r2,-44(fp)
 80102e4:	108000d8 	cmpnei	r2,r2,3
 80102e8:	10005d1e 	bne	r2,zero,8010460 <alt_read_cfi_table+0x4e4>
 80102ec:	e0bfff17 	ldw	r2,-4(fp)
 80102f0:	10800c17 	ldw	r2,48(r2)
 80102f4:	10bfffc4 	addi	r2,r2,-1
 80102f8:	e0bffe15 	stw	r2,-8(fp)
 80102fc:	e03ffd15 	stw	zero,-12(fp)
 8010300:	00005406 	br	8010454 <alt_read_cfi_table+0x4d8>
 8010304:	e0bffe17 	ldw	r2,-8(fp)
 8010308:	e0ffff17 	ldw	r3,-4(fp)
 801030c:	1004913a 	slli	r2,r2,4
 8010310:	10c5883a 	add	r2,r2,r3
 8010314:	10800e04 	addi	r2,r2,56
 8010318:	10800017 	ldw	r2,0(r2)
 801031c:	e0bff915 	stw	r2,-28(fp)
 8010320:	e17ffe17 	ldw	r5,-8(fp)
 8010324:	e0bffd17 	ldw	r2,-12(fp)
 8010328:	e0ffff17 	ldw	r3,-4(fp)
 801032c:	1004913a 	slli	r2,r2,4
 8010330:	10c5883a 	add	r2,r2,r3
 8010334:	10800e04 	addi	r2,r2,56
 8010338:	11000017 	ldw	r4,0(r2)
 801033c:	e0ffff17 	ldw	r3,-4(fp)
 8010340:	2804913a 	slli	r2,r5,4
 8010344:	10c5883a 	add	r2,r2,r3
 8010348:	10800e04 	addi	r2,r2,56
 801034c:	11000015 	stw	r4,0(r2)
 8010350:	e0bffd17 	ldw	r2,-12(fp)
 8010354:	e0ffff17 	ldw	r3,-4(fp)
 8010358:	1004913a 	slli	r2,r2,4
 801035c:	10c5883a 	add	r2,r2,r3
 8010360:	10c00e04 	addi	r3,r2,56
 8010364:	e0bff917 	ldw	r2,-28(fp)
 8010368:	18800015 	stw	r2,0(r3)
 801036c:	e0bffe17 	ldw	r2,-8(fp)
 8010370:	e0ffff17 	ldw	r3,-4(fp)
 8010374:	1004913a 	slli	r2,r2,4
 8010378:	10c5883a 	add	r2,r2,r3
 801037c:	10801004 	addi	r2,r2,64
 8010380:	10800017 	ldw	r2,0(r2)
 8010384:	e0bff915 	stw	r2,-28(fp)
 8010388:	e17ffe17 	ldw	r5,-8(fp)
 801038c:	e0bffd17 	ldw	r2,-12(fp)
 8010390:	e0ffff17 	ldw	r3,-4(fp)
 8010394:	1004913a 	slli	r2,r2,4
 8010398:	10c5883a 	add	r2,r2,r3
 801039c:	10801004 	addi	r2,r2,64
 80103a0:	11000017 	ldw	r4,0(r2)
 80103a4:	e0ffff17 	ldw	r3,-4(fp)
 80103a8:	2804913a 	slli	r2,r5,4
 80103ac:	10c5883a 	add	r2,r2,r3
 80103b0:	10801004 	addi	r2,r2,64
 80103b4:	11000015 	stw	r4,0(r2)
 80103b8:	e0bffd17 	ldw	r2,-12(fp)
 80103bc:	e0ffff17 	ldw	r3,-4(fp)
 80103c0:	1004913a 	slli	r2,r2,4
 80103c4:	10c5883a 	add	r2,r2,r3
 80103c8:	10c01004 	addi	r3,r2,64
 80103cc:	e0bff917 	ldw	r2,-28(fp)
 80103d0:	18800015 	stw	r2,0(r3)
 80103d4:	e0bffe17 	ldw	r2,-8(fp)
 80103d8:	e0ffff17 	ldw	r3,-4(fp)
 80103dc:	1004913a 	slli	r2,r2,4
 80103e0:	10c5883a 	add	r2,r2,r3
 80103e4:	10800f04 	addi	r2,r2,60
 80103e8:	10800017 	ldw	r2,0(r2)
 80103ec:	e0bff915 	stw	r2,-28(fp)
 80103f0:	e17ffe17 	ldw	r5,-8(fp)
 80103f4:	e0bffd17 	ldw	r2,-12(fp)
 80103f8:	e0ffff17 	ldw	r3,-4(fp)
 80103fc:	1004913a 	slli	r2,r2,4
 8010400:	10c5883a 	add	r2,r2,r3
 8010404:	10800f04 	addi	r2,r2,60
 8010408:	11000017 	ldw	r4,0(r2)
 801040c:	e0ffff17 	ldw	r3,-4(fp)
 8010410:	2804913a 	slli	r2,r5,4
 8010414:	10c5883a 	add	r2,r2,r3
 8010418:	10800f04 	addi	r2,r2,60
 801041c:	11000015 	stw	r4,0(r2)
 8010420:	e0bffd17 	ldw	r2,-12(fp)
 8010424:	e0ffff17 	ldw	r3,-4(fp)
 8010428:	1004913a 	slli	r2,r2,4
 801042c:	10c5883a 	add	r2,r2,r3
 8010430:	10c00f04 	addi	r3,r2,60
 8010434:	e0bff917 	ldw	r2,-28(fp)
 8010438:	18800015 	stw	r2,0(r3)
 801043c:	e0bffe17 	ldw	r2,-8(fp)
 8010440:	10bfffc4 	addi	r2,r2,-1
 8010444:	e0bffe15 	stw	r2,-8(fp)
 8010448:	e0bffd17 	ldw	r2,-12(fp)
 801044c:	10800044 	addi	r2,r2,1
 8010450:	e0bffd15 	stw	r2,-12(fp)
 8010454:	e0fffd17 	ldw	r3,-12(fp)
 8010458:	e0bffe17 	ldw	r2,-8(fp)
 801045c:	10ffa90e 	bge	r2,r3,8010304 <alt_read_cfi_table+0x388>
 8010460:	e03ffe15 	stw	zero,-8(fp)
 8010464:	00001306 	br	80104b4 <alt_read_cfi_table+0x538>
 8010468:	e0bffe17 	ldw	r2,-8(fp)
 801046c:	e0ffff17 	ldw	r3,-4(fp)
 8010470:	1004913a 	slli	r2,r2,4
 8010474:	10c5883a 	add	r2,r2,r3
 8010478:	10c00d04 	addi	r3,r2,52
 801047c:	e0bff617 	ldw	r2,-40(fp)
 8010480:	18800015 	stw	r2,0(r3)
 8010484:	e0bffe17 	ldw	r2,-8(fp)
 8010488:	e0ffff17 	ldw	r3,-4(fp)
 801048c:	1004913a 	slli	r2,r2,4
 8010490:	10c5883a 	add	r2,r2,r3
 8010494:	10800e04 	addi	r2,r2,56
 8010498:	10c00017 	ldw	r3,0(r2)
 801049c:	e0bff617 	ldw	r2,-40(fp)
 80104a0:	10c5883a 	add	r2,r2,r3
 80104a4:	e0bff615 	stw	r2,-40(fp)
 80104a8:	e0bffe17 	ldw	r2,-8(fp)
 80104ac:	10800044 	addi	r2,r2,1
 80104b0:	e0bffe15 	stw	r2,-8(fp)
 80104b4:	e0bfff17 	ldw	r2,-4(fp)
 80104b8:	10c00c17 	ldw	r3,48(r2)
 80104bc:	e0bffe17 	ldw	r2,-8(fp)
 80104c0:	10ffe916 	blt	r2,r3,8010468 <alt_read_cfi_table+0x4ec>
 80104c4:	e0bfff17 	ldw	r2,-4(fp)
 80104c8:	10c03317 	ldw	r3,204(r2)
 80104cc:	e0bfff17 	ldw	r2,-4(fp)
 80104d0:	11000a17 	ldw	r4,40(r2)
 80104d4:	01401544 	movi	r5,85
 80104d8:	01803fc4 	movi	r6,255
 80104dc:	183ee83a 	callr	r3
 80104e0:	e0bffb17 	ldw	r2,-20(fp)
 80104e4:	e037883a 	mov	sp,fp
 80104e8:	dfc00217 	ldw	ra,8(sp)
 80104ec:	df000117 	ldw	fp,4(sp)
 80104f0:	dc000017 	ldw	r16,0(sp)
 80104f4:	dec00304 	addi	sp,sp,12
 80104f8:	f800283a 	ret

080104fc <alt_read_cfi_width>:
 80104fc:	defff704 	addi	sp,sp,-36
 8010500:	dfc00815 	stw	ra,32(sp)
 8010504:	df000715 	stw	fp,28(sp)
 8010508:	df000704 	addi	fp,sp,28
 801050c:	e13fff15 	stw	r4,-4(fp)
 8010510:	e03ff915 	stw	zero,-28(fp)
 8010514:	e0bfff17 	ldw	r2,-4(fp)
 8010518:	11000a17 	ldw	r4,40(r2)
 801051c:	01401544 	movi	r5,85
 8010520:	01802604 	movi	r6,152
 8010524:	800fa080 	call	800fa08 <alt_write_flash_command_8bit_device_8bit_mode>
 8010528:	e03ffb15 	stw	zero,-20(fp)
 801052c:	00000f06 	br	801056c <alt_read_cfi_width+0x70>
 8010530:	e13ffb17 	ldw	r4,-20(fp)
 8010534:	e0bfff17 	ldw	r2,-4(fp)
 8010538:	10800a17 	ldw	r2,40(r2)
 801053c:	1007883a 	mov	r3,r2
 8010540:	e0bffb17 	ldw	r2,-20(fp)
 8010544:	1885883a 	add	r2,r3,r2
 8010548:	10800404 	addi	r2,r2,16
 801054c:	10800023 	ldbuio	r2,0(r2)
 8010550:	1007883a 	mov	r3,r2
 8010554:	e0bffc04 	addi	r2,fp,-16
 8010558:	1105883a 	add	r2,r2,r4
 801055c:	10c00005 	stb	r3,0(r2)
 8010560:	e0bffb17 	ldw	r2,-20(fp)
 8010564:	10800044 	addi	r2,r2,1
 8010568:	e0bffb15 	stw	r2,-20(fp)
 801056c:	e0bffb17 	ldw	r2,-20(fp)
 8010570:	108000d0 	cmplti	r2,r2,3
 8010574:	103fee1e 	bne	r2,zero,8010530 <alt_read_cfi_width+0x34>
 8010578:	e0bffc03 	ldbu	r2,-16(fp)
 801057c:	10803fcc 	andi	r2,r2,255
 8010580:	10801458 	cmpnei	r2,r2,81
 8010584:	10001d1e 	bne	r2,zero,80105fc <alt_read_cfi_width+0x100>
 8010588:	e0bffc43 	ldbu	r2,-15(fp)
 801058c:	10803fcc 	andi	r2,r2,255
 8010590:	10801498 	cmpnei	r2,r2,82
 8010594:	1000191e 	bne	r2,zero,80105fc <alt_read_cfi_width+0x100>
 8010598:	e0bffc83 	ldbu	r2,-14(fp)
 801059c:	10803fcc 	andi	r2,r2,255
 80105a0:	10801658 	cmpnei	r2,r2,89
 80105a4:	1000151e 	bne	r2,zero,80105fc <alt_read_cfi_width+0x100>
 80105a8:	e0ffff17 	ldw	r3,-4(fp)
 80105ac:	00800044 	movi	r2,1
 80105b0:	18802e15 	stw	r2,184(r3)
 80105b4:	e0ffff17 	ldw	r3,-4(fp)
 80105b8:	00800044 	movi	r2,1
 80105bc:	18802f15 	stw	r2,188(r3)
 80105c0:	e0bfff17 	ldw	r2,-4(fp)
 80105c4:	10800a17 	ldw	r2,40(r2)
 80105c8:	10800a04 	addi	r2,r2,40
 80105cc:	1080002b 	ldhuio	r2,0(r2)
 80105d0:	e0bffa0d 	sth	r2,-24(fp)
 80105d4:	e0bffa0b 	ldhu	r2,-24(fp)
 80105d8:	10800044 	addi	r2,r2,1
 80105dc:	e0bffa0d 	sth	r2,-24(fp)
 80105e0:	e0bffa0b 	ldhu	r2,-24(fp)
 80105e4:	1080004c 	andi	r2,r2,1
 80105e8:	1004c03a 	cmpne	r2,r2,zero
 80105ec:	1001a81e 	bne	r2,zero,8010c90 <alt_read_cfi_width+0x794>
 80105f0:	00bffb44 	movi	r2,-19
 80105f4:	e0bff915 	stw	r2,-28(fp)
 80105f8:	0001a506 	br	8010c90 <alt_read_cfi_width+0x794>
 80105fc:	e0bfff17 	ldw	r2,-4(fp)
 8010600:	11000a17 	ldw	r4,40(r2)
 8010604:	01401544 	movi	r5,85
 8010608:	01802604 	movi	r6,152
 801060c:	800fa440 	call	800fa44 <alt_write_flash_command_16bit_device_8bit_mode>
 8010610:	e03ffb15 	stw	zero,-20(fp)
 8010614:	00000f06 	br	8010654 <alt_read_cfi_width+0x158>
 8010618:	e13ffb17 	ldw	r4,-20(fp)
 801061c:	e0bfff17 	ldw	r2,-4(fp)
 8010620:	10800a17 	ldw	r2,40(r2)
 8010624:	1007883a 	mov	r3,r2
 8010628:	e0bffb17 	ldw	r2,-20(fp)
 801062c:	1885883a 	add	r2,r3,r2
 8010630:	10800804 	addi	r2,r2,32
 8010634:	10800023 	ldbuio	r2,0(r2)
 8010638:	1007883a 	mov	r3,r2
 801063c:	e0bffc04 	addi	r2,fp,-16
 8010640:	1105883a 	add	r2,r2,r4
 8010644:	10c00005 	stb	r3,0(r2)
 8010648:	e0bffb17 	ldw	r2,-20(fp)
 801064c:	10800044 	addi	r2,r2,1
 8010650:	e0bffb15 	stw	r2,-20(fp)
 8010654:	e0bffb17 	ldw	r2,-20(fp)
 8010658:	10800190 	cmplti	r2,r2,6
 801065c:	103fee1e 	bne	r2,zero,8010618 <alt_read_cfi_width+0x11c>
 8010660:	e0bffc03 	ldbu	r2,-16(fp)
 8010664:	10803fcc 	andi	r2,r2,255
 8010668:	10801458 	cmpnei	r2,r2,81
 801066c:	1000291e 	bne	r2,zero,8010714 <alt_read_cfi_width+0x218>
 8010670:	e0bffc43 	ldbu	r2,-15(fp)
 8010674:	10803fcc 	andi	r2,r2,255
 8010678:	10801458 	cmpnei	r2,r2,81
 801067c:	1000251e 	bne	r2,zero,8010714 <alt_read_cfi_width+0x218>
 8010680:	e0bffc83 	ldbu	r2,-14(fp)
 8010684:	10803fcc 	andi	r2,r2,255
 8010688:	10801498 	cmpnei	r2,r2,82
 801068c:	1000211e 	bne	r2,zero,8010714 <alt_read_cfi_width+0x218>
 8010690:	e0bffcc3 	ldbu	r2,-13(fp)
 8010694:	10803fcc 	andi	r2,r2,255
 8010698:	10801498 	cmpnei	r2,r2,82
 801069c:	10001d1e 	bne	r2,zero,8010714 <alt_read_cfi_width+0x218>
 80106a0:	e0bffd03 	ldbu	r2,-12(fp)
 80106a4:	10803fcc 	andi	r2,r2,255
 80106a8:	10801658 	cmpnei	r2,r2,89
 80106ac:	1000191e 	bne	r2,zero,8010714 <alt_read_cfi_width+0x218>
 80106b0:	e0bffd43 	ldbu	r2,-11(fp)
 80106b4:	10803fcc 	andi	r2,r2,255
 80106b8:	10801658 	cmpnei	r2,r2,89
 80106bc:	1000151e 	bne	r2,zero,8010714 <alt_read_cfi_width+0x218>
 80106c0:	e0ffff17 	ldw	r3,-4(fp)
 80106c4:	00800044 	movi	r2,1
 80106c8:	18802e15 	stw	r2,184(r3)
 80106cc:	e0ffff17 	ldw	r3,-4(fp)
 80106d0:	00800084 	movi	r2,2
 80106d4:	18802f15 	stw	r2,188(r3)
 80106d8:	e0bfff17 	ldw	r2,-4(fp)
 80106dc:	10800a17 	ldw	r2,40(r2)
 80106e0:	10801404 	addi	r2,r2,80
 80106e4:	1080002b 	ldhuio	r2,0(r2)
 80106e8:	e0bffa0d 	sth	r2,-24(fp)
 80106ec:	e0bffa0b 	ldhu	r2,-24(fp)
 80106f0:	10800044 	addi	r2,r2,1
 80106f4:	e0bffa0d 	sth	r2,-24(fp)
 80106f8:	e0bffa0b 	ldhu	r2,-24(fp)
 80106fc:	1080004c 	andi	r2,r2,1
 8010700:	1004c03a 	cmpne	r2,r2,zero
 8010704:	1001621e 	bne	r2,zero,8010c90 <alt_read_cfi_width+0x794>
 8010708:	00bffb44 	movi	r2,-19
 801070c:	e0bff915 	stw	r2,-28(fp)
 8010710:	00015f06 	br	8010c90 <alt_read_cfi_width+0x794>
 8010714:	e0bfff17 	ldw	r2,-4(fp)
 8010718:	11000a17 	ldw	r4,40(r2)
 801071c:	01401544 	movi	r5,85
 8010720:	01802604 	movi	r6,152
 8010724:	800fb080 	call	800fb08 <alt_write_flash_command_16bit_device_16bit_mode>
 8010728:	e03ffb15 	stw	zero,-20(fp)
 801072c:	00000f06 	br	801076c <alt_read_cfi_width+0x270>
 8010730:	e13ffb17 	ldw	r4,-20(fp)
 8010734:	e0bfff17 	ldw	r2,-4(fp)
 8010738:	10800a17 	ldw	r2,40(r2)
 801073c:	1007883a 	mov	r3,r2
 8010740:	e0bffb17 	ldw	r2,-20(fp)
 8010744:	1885883a 	add	r2,r3,r2
 8010748:	10800804 	addi	r2,r2,32
 801074c:	10800023 	ldbuio	r2,0(r2)
 8010750:	1007883a 	mov	r3,r2
 8010754:	e0bffc04 	addi	r2,fp,-16
 8010758:	1105883a 	add	r2,r2,r4
 801075c:	10c00005 	stb	r3,0(r2)
 8010760:	e0bffb17 	ldw	r2,-20(fp)
 8010764:	10800044 	addi	r2,r2,1
 8010768:	e0bffb15 	stw	r2,-20(fp)
 801076c:	e0bffb17 	ldw	r2,-20(fp)
 8010770:	10800190 	cmplti	r2,r2,6
 8010774:	103fee1e 	bne	r2,zero,8010730 <alt_read_cfi_width+0x234>
 8010778:	e0bffc03 	ldbu	r2,-16(fp)
 801077c:	10803fcc 	andi	r2,r2,255
 8010780:	10801458 	cmpnei	r2,r2,81
 8010784:	1000291e 	bne	r2,zero,801082c <alt_read_cfi_width+0x330>
 8010788:	e0bffc43 	ldbu	r2,-15(fp)
 801078c:	10803fcc 	andi	r2,r2,255
 8010790:	1004c03a 	cmpne	r2,r2,zero
 8010794:	1000251e 	bne	r2,zero,801082c <alt_read_cfi_width+0x330>
 8010798:	e0bffc83 	ldbu	r2,-14(fp)
 801079c:	10803fcc 	andi	r2,r2,255
 80107a0:	10801498 	cmpnei	r2,r2,82
 80107a4:	1000211e 	bne	r2,zero,801082c <alt_read_cfi_width+0x330>
 80107a8:	e0bffcc3 	ldbu	r2,-13(fp)
 80107ac:	10803fcc 	andi	r2,r2,255
 80107b0:	1004c03a 	cmpne	r2,r2,zero
 80107b4:	10001d1e 	bne	r2,zero,801082c <alt_read_cfi_width+0x330>
 80107b8:	e0bffd03 	ldbu	r2,-12(fp)
 80107bc:	10803fcc 	andi	r2,r2,255
 80107c0:	10801658 	cmpnei	r2,r2,89
 80107c4:	1000191e 	bne	r2,zero,801082c <alt_read_cfi_width+0x330>
 80107c8:	e0bffd43 	ldbu	r2,-11(fp)
 80107cc:	10803fcc 	andi	r2,r2,255
 80107d0:	1004c03a 	cmpne	r2,r2,zero
 80107d4:	1000151e 	bne	r2,zero,801082c <alt_read_cfi_width+0x330>
 80107d8:	e0ffff17 	ldw	r3,-4(fp)
 80107dc:	00800084 	movi	r2,2
 80107e0:	18802e15 	stw	r2,184(r3)
 80107e4:	e0ffff17 	ldw	r3,-4(fp)
 80107e8:	00800084 	movi	r2,2
 80107ec:	18802f15 	stw	r2,188(r3)
 80107f0:	e0bfff17 	ldw	r2,-4(fp)
 80107f4:	10800a17 	ldw	r2,40(r2)
 80107f8:	10801404 	addi	r2,r2,80
 80107fc:	1080002b 	ldhuio	r2,0(r2)
 8010800:	e0bffa0d 	sth	r2,-24(fp)
 8010804:	e0bffa0b 	ldhu	r2,-24(fp)
 8010808:	10800044 	addi	r2,r2,1
 801080c:	e0bffa0d 	sth	r2,-24(fp)
 8010810:	e0bffa0b 	ldhu	r2,-24(fp)
 8010814:	1080008c 	andi	r2,r2,2
 8010818:	1004c03a 	cmpne	r2,r2,zero
 801081c:	10011c1e 	bne	r2,zero,8010c90 <alt_read_cfi_width+0x794>
 8010820:	00bffb44 	movi	r2,-19
 8010824:	e0bff915 	stw	r2,-28(fp)
 8010828:	00011906 	br	8010c90 <alt_read_cfi_width+0x794>
 801082c:	e0bfff17 	ldw	r2,-4(fp)
 8010830:	11000a17 	ldw	r4,40(r2)
 8010834:	01401544 	movi	r5,85
 8010838:	01802604 	movi	r6,152
 801083c:	800fb940 	call	800fb94 <alt_write_flash_command_32bit_device_32bit_mode>
 8010840:	e03ffb15 	stw	zero,-20(fp)
 8010844:	00000f06 	br	8010884 <alt_read_cfi_width+0x388>
 8010848:	e13ffb17 	ldw	r4,-20(fp)
 801084c:	e0bfff17 	ldw	r2,-4(fp)
 8010850:	10800a17 	ldw	r2,40(r2)
 8010854:	1007883a 	mov	r3,r2
 8010858:	e0bffb17 	ldw	r2,-20(fp)
 801085c:	1885883a 	add	r2,r3,r2
 8010860:	10801004 	addi	r2,r2,64
 8010864:	10800023 	ldbuio	r2,0(r2)
 8010868:	1007883a 	mov	r3,r2
 801086c:	e0bffc04 	addi	r2,fp,-16
 8010870:	1105883a 	add	r2,r2,r4
 8010874:	10c00005 	stb	r3,0(r2)
 8010878:	e0bffb17 	ldw	r2,-20(fp)
 801087c:	10800044 	addi	r2,r2,1
 8010880:	e0bffb15 	stw	r2,-20(fp)
 8010884:	e0bffb17 	ldw	r2,-20(fp)
 8010888:	10800310 	cmplti	r2,r2,12
 801088c:	103fee1e 	bne	r2,zero,8010848 <alt_read_cfi_width+0x34c>
 8010890:	e0bffc03 	ldbu	r2,-16(fp)
 8010894:	10803fcc 	andi	r2,r2,255
 8010898:	10801458 	cmpnei	r2,r2,81
 801089c:	1000411e 	bne	r2,zero,80109a4 <alt_read_cfi_width+0x4a8>
 80108a0:	e0bffc43 	ldbu	r2,-15(fp)
 80108a4:	10803fcc 	andi	r2,r2,255
 80108a8:	1004c03a 	cmpne	r2,r2,zero
 80108ac:	10003d1e 	bne	r2,zero,80109a4 <alt_read_cfi_width+0x4a8>
 80108b0:	e0bffc83 	ldbu	r2,-14(fp)
 80108b4:	10803fcc 	andi	r2,r2,255
 80108b8:	1004c03a 	cmpne	r2,r2,zero
 80108bc:	1000391e 	bne	r2,zero,80109a4 <alt_read_cfi_width+0x4a8>
 80108c0:	e0bffcc3 	ldbu	r2,-13(fp)
 80108c4:	10803fcc 	andi	r2,r2,255
 80108c8:	1004c03a 	cmpne	r2,r2,zero
 80108cc:	1000351e 	bne	r2,zero,80109a4 <alt_read_cfi_width+0x4a8>
 80108d0:	e0bffd03 	ldbu	r2,-12(fp)
 80108d4:	10803fcc 	andi	r2,r2,255
 80108d8:	10801498 	cmpnei	r2,r2,82
 80108dc:	1000311e 	bne	r2,zero,80109a4 <alt_read_cfi_width+0x4a8>
 80108e0:	e0bffd43 	ldbu	r2,-11(fp)
 80108e4:	10803fcc 	andi	r2,r2,255
 80108e8:	1004c03a 	cmpne	r2,r2,zero
 80108ec:	10002d1e 	bne	r2,zero,80109a4 <alt_read_cfi_width+0x4a8>
 80108f0:	e0bffd83 	ldbu	r2,-10(fp)
 80108f4:	10803fcc 	andi	r2,r2,255
 80108f8:	1004c03a 	cmpne	r2,r2,zero
 80108fc:	1000291e 	bne	r2,zero,80109a4 <alt_read_cfi_width+0x4a8>
 8010900:	e0bffdc3 	ldbu	r2,-9(fp)
 8010904:	10803fcc 	andi	r2,r2,255
 8010908:	1004c03a 	cmpne	r2,r2,zero
 801090c:	1000251e 	bne	r2,zero,80109a4 <alt_read_cfi_width+0x4a8>
 8010910:	e0bffe03 	ldbu	r2,-8(fp)
 8010914:	10803fcc 	andi	r2,r2,255
 8010918:	10801658 	cmpnei	r2,r2,89
 801091c:	1000211e 	bne	r2,zero,80109a4 <alt_read_cfi_width+0x4a8>
 8010920:	e0bffe43 	ldbu	r2,-7(fp)
 8010924:	10803fcc 	andi	r2,r2,255
 8010928:	1004c03a 	cmpne	r2,r2,zero
 801092c:	10001d1e 	bne	r2,zero,80109a4 <alt_read_cfi_width+0x4a8>
 8010930:	e0bffe83 	ldbu	r2,-6(fp)
 8010934:	10803fcc 	andi	r2,r2,255
 8010938:	1004c03a 	cmpne	r2,r2,zero
 801093c:	1000191e 	bne	r2,zero,80109a4 <alt_read_cfi_width+0x4a8>
 8010940:	e0bffec3 	ldbu	r2,-5(fp)
 8010944:	10803fcc 	andi	r2,r2,255
 8010948:	1004c03a 	cmpne	r2,r2,zero
 801094c:	1000151e 	bne	r2,zero,80109a4 <alt_read_cfi_width+0x4a8>
 8010950:	e0ffff17 	ldw	r3,-4(fp)
 8010954:	00800104 	movi	r2,4
 8010958:	18802e15 	stw	r2,184(r3)
 801095c:	e0ffff17 	ldw	r3,-4(fp)
 8010960:	00800104 	movi	r2,4
 8010964:	18802f15 	stw	r2,188(r3)
 8010968:	e0bfff17 	ldw	r2,-4(fp)
 801096c:	10800a17 	ldw	r2,40(r2)
 8010970:	10802804 	addi	r2,r2,160
 8010974:	10800037 	ldwio	r2,0(r2)
 8010978:	e0bffa0d 	sth	r2,-24(fp)
 801097c:	e0bffa0b 	ldhu	r2,-24(fp)
 8010980:	10800044 	addi	r2,r2,1
 8010984:	e0bffa0d 	sth	r2,-24(fp)
 8010988:	e0bffa0b 	ldhu	r2,-24(fp)
 801098c:	1080010c 	andi	r2,r2,4
 8010990:	1004c03a 	cmpne	r2,r2,zero
 8010994:	1000be1e 	bne	r2,zero,8010c90 <alt_read_cfi_width+0x794>
 8010998:	00bffb44 	movi	r2,-19
 801099c:	e0bff915 	stw	r2,-28(fp)
 80109a0:	0000bb06 	br	8010c90 <alt_read_cfi_width+0x794>
 80109a4:	e0bfff17 	ldw	r2,-4(fp)
 80109a8:	11000a17 	ldw	r4,40(r2)
 80109ac:	01401544 	movi	r5,85
 80109b0:	01802604 	movi	r6,152
 80109b4:	800fb4c0 	call	800fb4c <alt_write_flash_command_32bit_device_16bit_mode>
 80109b8:	e03ffb15 	stw	zero,-20(fp)
 80109bc:	00000f06 	br	80109fc <alt_read_cfi_width+0x500>
 80109c0:	e13ffb17 	ldw	r4,-20(fp)
 80109c4:	e0bfff17 	ldw	r2,-4(fp)
 80109c8:	10800a17 	ldw	r2,40(r2)
 80109cc:	1007883a 	mov	r3,r2
 80109d0:	e0bffb17 	ldw	r2,-20(fp)
 80109d4:	1885883a 	add	r2,r3,r2
 80109d8:	10801004 	addi	r2,r2,64
 80109dc:	10800023 	ldbuio	r2,0(r2)
 80109e0:	1007883a 	mov	r3,r2
 80109e4:	e0bffc04 	addi	r2,fp,-16
 80109e8:	1105883a 	add	r2,r2,r4
 80109ec:	10c00005 	stb	r3,0(r2)
 80109f0:	e0bffb17 	ldw	r2,-20(fp)
 80109f4:	10800044 	addi	r2,r2,1
 80109f8:	e0bffb15 	stw	r2,-20(fp)
 80109fc:	e0bffb17 	ldw	r2,-20(fp)
 8010a00:	10800310 	cmplti	r2,r2,12
 8010a04:	103fee1e 	bne	r2,zero,80109c0 <alt_read_cfi_width+0x4c4>
 8010a08:	e0bffc03 	ldbu	r2,-16(fp)
 8010a0c:	10803fcc 	andi	r2,r2,255
 8010a10:	10801458 	cmpnei	r2,r2,81
 8010a14:	1000411e 	bne	r2,zero,8010b1c <alt_read_cfi_width+0x620>
 8010a18:	e0bffc43 	ldbu	r2,-15(fp)
 8010a1c:	10803fcc 	andi	r2,r2,255
 8010a20:	1004c03a 	cmpne	r2,r2,zero
 8010a24:	10003d1e 	bne	r2,zero,8010b1c <alt_read_cfi_width+0x620>
 8010a28:	e0bffc83 	ldbu	r2,-14(fp)
 8010a2c:	10803fcc 	andi	r2,r2,255
 8010a30:	10801458 	cmpnei	r2,r2,81
 8010a34:	1000391e 	bne	r2,zero,8010b1c <alt_read_cfi_width+0x620>
 8010a38:	e0bffcc3 	ldbu	r2,-13(fp)
 8010a3c:	10803fcc 	andi	r2,r2,255
 8010a40:	1004c03a 	cmpne	r2,r2,zero
 8010a44:	1000351e 	bne	r2,zero,8010b1c <alt_read_cfi_width+0x620>
 8010a48:	e0bffd03 	ldbu	r2,-12(fp)
 8010a4c:	10803fcc 	andi	r2,r2,255
 8010a50:	10801498 	cmpnei	r2,r2,82
 8010a54:	1000311e 	bne	r2,zero,8010b1c <alt_read_cfi_width+0x620>
 8010a58:	e0bffd43 	ldbu	r2,-11(fp)
 8010a5c:	10803fcc 	andi	r2,r2,255
 8010a60:	1004c03a 	cmpne	r2,r2,zero
 8010a64:	10002d1e 	bne	r2,zero,8010b1c <alt_read_cfi_width+0x620>
 8010a68:	e0bffd83 	ldbu	r2,-10(fp)
 8010a6c:	10803fcc 	andi	r2,r2,255
 8010a70:	10801498 	cmpnei	r2,r2,82
 8010a74:	1000291e 	bne	r2,zero,8010b1c <alt_read_cfi_width+0x620>
 8010a78:	e0bffdc3 	ldbu	r2,-9(fp)
 8010a7c:	10803fcc 	andi	r2,r2,255
 8010a80:	1004c03a 	cmpne	r2,r2,zero
 8010a84:	1000251e 	bne	r2,zero,8010b1c <alt_read_cfi_width+0x620>
 8010a88:	e0bffe03 	ldbu	r2,-8(fp)
 8010a8c:	10803fcc 	andi	r2,r2,255
 8010a90:	10801658 	cmpnei	r2,r2,89
 8010a94:	1000211e 	bne	r2,zero,8010b1c <alt_read_cfi_width+0x620>
 8010a98:	e0bffe43 	ldbu	r2,-7(fp)
 8010a9c:	10803fcc 	andi	r2,r2,255
 8010aa0:	1004c03a 	cmpne	r2,r2,zero
 8010aa4:	10001d1e 	bne	r2,zero,8010b1c <alt_read_cfi_width+0x620>
 8010aa8:	e0bffe83 	ldbu	r2,-6(fp)
 8010aac:	10803fcc 	andi	r2,r2,255
 8010ab0:	10801658 	cmpnei	r2,r2,89
 8010ab4:	1000191e 	bne	r2,zero,8010b1c <alt_read_cfi_width+0x620>
 8010ab8:	e0bffec3 	ldbu	r2,-5(fp)
 8010abc:	10803fcc 	andi	r2,r2,255
 8010ac0:	1004c03a 	cmpne	r2,r2,zero
 8010ac4:	1000151e 	bne	r2,zero,8010b1c <alt_read_cfi_width+0x620>
 8010ac8:	e0ffff17 	ldw	r3,-4(fp)
 8010acc:	00800084 	movi	r2,2
 8010ad0:	18802e15 	stw	r2,184(r3)
 8010ad4:	e0ffff17 	ldw	r3,-4(fp)
 8010ad8:	00800104 	movi	r2,4
 8010adc:	18802f15 	stw	r2,188(r3)
 8010ae0:	e0bfff17 	ldw	r2,-4(fp)
 8010ae4:	10800a17 	ldw	r2,40(r2)
 8010ae8:	10802804 	addi	r2,r2,160
 8010aec:	10800037 	ldwio	r2,0(r2)
 8010af0:	e0bffa0d 	sth	r2,-24(fp)
 8010af4:	e0bffa0b 	ldhu	r2,-24(fp)
 8010af8:	10800044 	addi	r2,r2,1
 8010afc:	e0bffa0d 	sth	r2,-24(fp)
 8010b00:	e0bffa0b 	ldhu	r2,-24(fp)
 8010b04:	1080010c 	andi	r2,r2,4
 8010b08:	1004c03a 	cmpne	r2,r2,zero
 8010b0c:	1000601e 	bne	r2,zero,8010c90 <alt_read_cfi_width+0x794>
 8010b10:	00bffb44 	movi	r2,-19
 8010b14:	e0bff915 	stw	r2,-28(fp)
 8010b18:	00005d06 	br	8010c90 <alt_read_cfi_width+0x794>
 8010b1c:	e0bfff17 	ldw	r2,-4(fp)
 8010b20:	11000a17 	ldw	r4,40(r2)
 8010b24:	01401544 	movi	r5,85
 8010b28:	01802604 	movi	r6,152
 8010b2c:	800fac00 	call	800fac0 <alt_write_flash_command_32bit_device_8bit_mode>
 8010b30:	e03ffb15 	stw	zero,-20(fp)
 8010b34:	00000f06 	br	8010b74 <alt_read_cfi_width+0x678>
 8010b38:	e13ffb17 	ldw	r4,-20(fp)
 8010b3c:	e0bfff17 	ldw	r2,-4(fp)
 8010b40:	10800a17 	ldw	r2,40(r2)
 8010b44:	1007883a 	mov	r3,r2
 8010b48:	e0bffb17 	ldw	r2,-20(fp)
 8010b4c:	1885883a 	add	r2,r3,r2
 8010b50:	10801004 	addi	r2,r2,64
 8010b54:	10800023 	ldbuio	r2,0(r2)
 8010b58:	1007883a 	mov	r3,r2
 8010b5c:	e0bffc04 	addi	r2,fp,-16
 8010b60:	1105883a 	add	r2,r2,r4
 8010b64:	10c00005 	stb	r3,0(r2)
 8010b68:	e0bffb17 	ldw	r2,-20(fp)
 8010b6c:	10800044 	addi	r2,r2,1
 8010b70:	e0bffb15 	stw	r2,-20(fp)
 8010b74:	e0bffb17 	ldw	r2,-20(fp)
 8010b78:	10800310 	cmplti	r2,r2,12
 8010b7c:	103fee1e 	bne	r2,zero,8010b38 <alt_read_cfi_width+0x63c>
 8010b80:	e0bffc03 	ldbu	r2,-16(fp)
 8010b84:	10803fcc 	andi	r2,r2,255
 8010b88:	10801458 	cmpnei	r2,r2,81
 8010b8c:	1000401e 	bne	r2,zero,8010c90 <alt_read_cfi_width+0x794>
 8010b90:	e0bffc43 	ldbu	r2,-15(fp)
 8010b94:	10803fcc 	andi	r2,r2,255
 8010b98:	10801458 	cmpnei	r2,r2,81
 8010b9c:	10003c1e 	bne	r2,zero,8010c90 <alt_read_cfi_width+0x794>
 8010ba0:	e0bffc83 	ldbu	r2,-14(fp)
 8010ba4:	10803fcc 	andi	r2,r2,255
 8010ba8:	10801458 	cmpnei	r2,r2,81
 8010bac:	1000381e 	bne	r2,zero,8010c90 <alt_read_cfi_width+0x794>
 8010bb0:	e0bffcc3 	ldbu	r2,-13(fp)
 8010bb4:	10803fcc 	andi	r2,r2,255
 8010bb8:	10801458 	cmpnei	r2,r2,81
 8010bbc:	1000341e 	bne	r2,zero,8010c90 <alt_read_cfi_width+0x794>
 8010bc0:	e0bffd03 	ldbu	r2,-12(fp)
 8010bc4:	10803fcc 	andi	r2,r2,255
 8010bc8:	10801498 	cmpnei	r2,r2,82
 8010bcc:	1000301e 	bne	r2,zero,8010c90 <alt_read_cfi_width+0x794>
 8010bd0:	e0bffd43 	ldbu	r2,-11(fp)
 8010bd4:	10803fcc 	andi	r2,r2,255
 8010bd8:	10801498 	cmpnei	r2,r2,82
 8010bdc:	10002c1e 	bne	r2,zero,8010c90 <alt_read_cfi_width+0x794>
 8010be0:	e0bffd83 	ldbu	r2,-10(fp)
 8010be4:	10803fcc 	andi	r2,r2,255
 8010be8:	10801498 	cmpnei	r2,r2,82
 8010bec:	1000281e 	bne	r2,zero,8010c90 <alt_read_cfi_width+0x794>
 8010bf0:	e0bffdc3 	ldbu	r2,-9(fp)
 8010bf4:	10803fcc 	andi	r2,r2,255
 8010bf8:	10801498 	cmpnei	r2,r2,82
 8010bfc:	1000241e 	bne	r2,zero,8010c90 <alt_read_cfi_width+0x794>
 8010c00:	e0bffe03 	ldbu	r2,-8(fp)
 8010c04:	10803fcc 	andi	r2,r2,255
 8010c08:	10801658 	cmpnei	r2,r2,89
 8010c0c:	1000201e 	bne	r2,zero,8010c90 <alt_read_cfi_width+0x794>
 8010c10:	e0bffe43 	ldbu	r2,-7(fp)
 8010c14:	10803fcc 	andi	r2,r2,255
 8010c18:	10801658 	cmpnei	r2,r2,89
 8010c1c:	10001c1e 	bne	r2,zero,8010c90 <alt_read_cfi_width+0x794>
 8010c20:	e0bffe83 	ldbu	r2,-6(fp)
 8010c24:	10803fcc 	andi	r2,r2,255
 8010c28:	10801658 	cmpnei	r2,r2,89
 8010c2c:	1000181e 	bne	r2,zero,8010c90 <alt_read_cfi_width+0x794>
 8010c30:	e0bffec3 	ldbu	r2,-5(fp)
 8010c34:	10803fcc 	andi	r2,r2,255
 8010c38:	10801658 	cmpnei	r2,r2,89
 8010c3c:	1000141e 	bne	r2,zero,8010c90 <alt_read_cfi_width+0x794>
 8010c40:	e0ffff17 	ldw	r3,-4(fp)
 8010c44:	00800044 	movi	r2,1
 8010c48:	18802e15 	stw	r2,184(r3)
 8010c4c:	e0ffff17 	ldw	r3,-4(fp)
 8010c50:	00800104 	movi	r2,4
 8010c54:	18802f15 	stw	r2,188(r3)
 8010c58:	e0bfff17 	ldw	r2,-4(fp)
 8010c5c:	10800a17 	ldw	r2,40(r2)
 8010c60:	10802804 	addi	r2,r2,160
 8010c64:	10800037 	ldwio	r2,0(r2)
 8010c68:	e0bffa0d 	sth	r2,-24(fp)
 8010c6c:	e0bffa0b 	ldhu	r2,-24(fp)
 8010c70:	10800044 	addi	r2,r2,1
 8010c74:	e0bffa0d 	sth	r2,-24(fp)
 8010c78:	e0bffa0b 	ldhu	r2,-24(fp)
 8010c7c:	1080010c 	andi	r2,r2,4
 8010c80:	1004c03a 	cmpne	r2,r2,zero
 8010c84:	1000021e 	bne	r2,zero,8010c90 <alt_read_cfi_width+0x794>
 8010c88:	00bffb44 	movi	r2,-19
 8010c8c:	e0bff915 	stw	r2,-28(fp)
 8010c90:	e0bff917 	ldw	r2,-28(fp)
 8010c94:	e037883a 	mov	sp,fp
 8010c98:	dfc00117 	ldw	ra,4(sp)
 8010c9c:	df000017 	ldw	fp,0(sp)
 8010ca0:	dec00204 	addi	sp,sp,8
 8010ca4:	f800283a 	ret

08010ca8 <alt_check_primary_table>:
 8010ca8:	defff904 	addi	sp,sp,-28
 8010cac:	dfc00615 	stw	ra,24(sp)
 8010cb0:	df000515 	stw	fp,20(sp)
 8010cb4:	dc000415 	stw	r16,16(sp)
 8010cb8:	df000404 	addi	fp,sp,16
 8010cbc:	e13fff15 	stw	r4,-4(fp)
 8010cc0:	e03ffc15 	stw	zero,-16(fp)
 8010cc4:	e13fff17 	ldw	r4,-4(fp)
 8010cc8:	01400544 	movi	r5,21
 8010ccc:	800ff000 	call	800ff00 <alt_read_16bit_query_entry>
 8010cd0:	10ffffcc 	andi	r3,r2,65535
 8010cd4:	e0bfff17 	ldw	r2,-4(fp)
 8010cd8:	10c03215 	stw	r3,200(r2)
 8010cdc:	e03ffd15 	stw	zero,-12(fp)
 8010ce0:	00001006 	br	8010d24 <alt_check_primary_table+0x7c>
 8010ce4:	e43ffd17 	ldw	r16,-12(fp)
 8010ce8:	e0bfff17 	ldw	r2,-4(fp)
 8010cec:	11803417 	ldw	r6,208(r2)
 8010cf0:	e0bfff17 	ldw	r2,-4(fp)
 8010cf4:	10c03217 	ldw	r3,200(r2)
 8010cf8:	e0bffd17 	ldw	r2,-12(fp)
 8010cfc:	188b883a 	add	r5,r3,r2
 8010d00:	e13fff17 	ldw	r4,-4(fp)
 8010d04:	303ee83a 	callr	r6
 8010d08:	1007883a 	mov	r3,r2
 8010d0c:	e0bffe04 	addi	r2,fp,-8
 8010d10:	1405883a 	add	r2,r2,r16
 8010d14:	10c00005 	stb	r3,0(r2)
 8010d18:	e0bffd17 	ldw	r2,-12(fp)
 8010d1c:	10800044 	addi	r2,r2,1
 8010d20:	e0bffd15 	stw	r2,-12(fp)
 8010d24:	e0bffd17 	ldw	r2,-12(fp)
 8010d28:	108000d0 	cmplti	r2,r2,3
 8010d2c:	103fed1e 	bne	r2,zero,8010ce4 <alt_check_primary_table+0x3c>
 8010d30:	e0bffe03 	ldbu	r2,-8(fp)
 8010d34:	10803fcc 	andi	r2,r2,255
 8010d38:	10801418 	cmpnei	r2,r2,80
 8010d3c:	1000081e 	bne	r2,zero,8010d60 <alt_check_primary_table+0xb8>
 8010d40:	e0bffe43 	ldbu	r2,-7(fp)
 8010d44:	10803fcc 	andi	r2,r2,255
 8010d48:	10801498 	cmpnei	r2,r2,82
 8010d4c:	1000041e 	bne	r2,zero,8010d60 <alt_check_primary_table+0xb8>
 8010d50:	e0bffe83 	ldbu	r2,-6(fp)
 8010d54:	10803fcc 	andi	r2,r2,255
 8010d58:	10801260 	cmpeqi	r2,r2,73
 8010d5c:	1000021e 	bne	r2,zero,8010d68 <alt_check_primary_table+0xc0>
 8010d60:	00bffb44 	movi	r2,-19
 8010d64:	e0bffc15 	stw	r2,-16(fp)
 8010d68:	e0bffc17 	ldw	r2,-16(fp)
 8010d6c:	e037883a 	mov	sp,fp
 8010d70:	dfc00217 	ldw	ra,8(sp)
 8010d74:	df000117 	ldw	fp,4(sp)
 8010d78:	dc000017 	ldw	r16,0(sp)
 8010d7c:	dec00304 	addi	sp,sp,12
 8010d80:	f800283a 	ret

08010d84 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 8010d84:	defffa04 	addi	sp,sp,-24
 8010d88:	dfc00515 	stw	ra,20(sp)
 8010d8c:	df000415 	stw	fp,16(sp)
 8010d90:	df000404 	addi	fp,sp,16
 8010d94:	e13ffd15 	stw	r4,-12(fp)
 8010d98:	e17ffe15 	stw	r5,-8(fp)
 8010d9c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 8010da0:	e0bffd17 	ldw	r2,-12(fp)
 8010da4:	10800017 	ldw	r2,0(r2)
 8010da8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 8010dac:	e0bffc17 	ldw	r2,-16(fp)
 8010db0:	11000a04 	addi	r4,r2,40
 8010db4:	e0bffd17 	ldw	r2,-12(fp)
 8010db8:	11c00217 	ldw	r7,8(r2)
 8010dbc:	e17ffe17 	ldw	r5,-8(fp)
 8010dc0:	e1bfff17 	ldw	r6,-4(fp)
 8010dc4:	80113cc0 	call	80113cc <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
 8010dc8:	e037883a 	mov	sp,fp
 8010dcc:	dfc00117 	ldw	ra,4(sp)
 8010dd0:	df000017 	ldw	fp,0(sp)
 8010dd4:	dec00204 	addi	sp,sp,8
 8010dd8:	f800283a 	ret

08010ddc <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 8010ddc:	defffa04 	addi	sp,sp,-24
 8010de0:	dfc00515 	stw	ra,20(sp)
 8010de4:	df000415 	stw	fp,16(sp)
 8010de8:	df000404 	addi	fp,sp,16
 8010dec:	e13ffd15 	stw	r4,-12(fp)
 8010df0:	e17ffe15 	stw	r5,-8(fp)
 8010df4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 8010df8:	e0bffd17 	ldw	r2,-12(fp)
 8010dfc:	10800017 	ldw	r2,0(r2)
 8010e00:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 8010e04:	e0bffc17 	ldw	r2,-16(fp)
 8010e08:	11000a04 	addi	r4,r2,40
 8010e0c:	e0bffd17 	ldw	r2,-12(fp)
 8010e10:	11c00217 	ldw	r7,8(r2)
 8010e14:	e17ffe17 	ldw	r5,-8(fp)
 8010e18:	e1bfff17 	ldw	r6,-4(fp)
 8010e1c:	80115f00 	call	80115f0 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
 8010e20:	e037883a 	mov	sp,fp
 8010e24:	dfc00117 	ldw	ra,4(sp)
 8010e28:	df000017 	ldw	fp,0(sp)
 8010e2c:	dec00204 	addi	sp,sp,8
 8010e30:	f800283a 	ret

08010e34 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
 8010e34:	defffc04 	addi	sp,sp,-16
 8010e38:	dfc00315 	stw	ra,12(sp)
 8010e3c:	df000215 	stw	fp,8(sp)
 8010e40:	df000204 	addi	fp,sp,8
 8010e44:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 8010e48:	e0bfff17 	ldw	r2,-4(fp)
 8010e4c:	10800017 	ldw	r2,0(r2)
 8010e50:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
 8010e54:	e0bffe17 	ldw	r2,-8(fp)
 8010e58:	11000a04 	addi	r4,r2,40
 8010e5c:	e0bfff17 	ldw	r2,-4(fp)
 8010e60:	11400217 	ldw	r5,8(r2)
 8010e64:	80112640 	call	8011264 <altera_avalon_jtag_uart_close>
}
 8010e68:	e037883a 	mov	sp,fp
 8010e6c:	dfc00117 	ldw	ra,4(sp)
 8010e70:	df000017 	ldw	fp,0(sp)
 8010e74:	dec00204 	addi	sp,sp,8
 8010e78:	f800283a 	ret

08010e7c <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
 8010e7c:	defffa04 	addi	sp,sp,-24
 8010e80:	dfc00515 	stw	ra,20(sp)
 8010e84:	df000415 	stw	fp,16(sp)
 8010e88:	df000404 	addi	fp,sp,16
 8010e8c:	e13ffd15 	stw	r4,-12(fp)
 8010e90:	e17ffe15 	stw	r5,-8(fp)
 8010e94:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
 8010e98:	e0bffd17 	ldw	r2,-12(fp)
 8010e9c:	10800017 	ldw	r2,0(r2)
 8010ea0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
 8010ea4:	e0bffc17 	ldw	r2,-16(fp)
 8010ea8:	11000a04 	addi	r4,r2,40
 8010eac:	e17ffe17 	ldw	r5,-8(fp)
 8010eb0:	e1bfff17 	ldw	r6,-4(fp)
 8010eb4:	80112d80 	call	80112d8 <altera_avalon_jtag_uart_ioctl>
}
 8010eb8:	e037883a 	mov	sp,fp
 8010ebc:	dfc00117 	ldw	ra,4(sp)
 8010ec0:	df000017 	ldw	fp,0(sp)
 8010ec4:	dec00204 	addi	sp,sp,8
 8010ec8:	f800283a 	ret

08010ecc <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
 8010ecc:	defffa04 	addi	sp,sp,-24
 8010ed0:	dfc00515 	stw	ra,20(sp)
 8010ed4:	df000415 	stw	fp,16(sp)
 8010ed8:	df000404 	addi	fp,sp,16
 8010edc:	e13ffd15 	stw	r4,-12(fp)
 8010ee0:	e17ffe15 	stw	r5,-8(fp)
 8010ee4:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 8010ee8:	e0fffd17 	ldw	r3,-12(fp)
 8010eec:	00800044 	movi	r2,1
 8010ef0:	18800815 	stw	r2,32(r3)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
 8010ef4:	e0bffd17 	ldw	r2,-12(fp)
 8010ef8:	10800017 	ldw	r2,0(r2)
 8010efc:	11000104 	addi	r4,r2,4
 8010f00:	e0bffd17 	ldw	r2,-12(fp)
 8010f04:	10800817 	ldw	r2,32(r2)
 8010f08:	1007883a 	mov	r3,r2
 8010f0c:	2005883a 	mov	r2,r4
 8010f10:	10c00035 	stwio	r3,0(r2)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
 8010f14:	e13ffe17 	ldw	r4,-8(fp)
 8010f18:	e17fff17 	ldw	r5,-4(fp)
 8010f1c:	d8000015 	stw	zero,0(sp)
 8010f20:	01820074 	movhi	r6,2049
 8010f24:	3183e304 	addi	r6,r6,3980
 8010f28:	e1fffd17 	ldw	r7,-12(fp)
 8010f2c:	8015cec0 	call	8015cec <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
 8010f30:	e0bffd17 	ldw	r2,-12(fp)
 8010f34:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
 8010f38:	e0bffd17 	ldw	r2,-12(fp)
 8010f3c:	11000204 	addi	r4,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 8010f40:	008200b4 	movhi	r2,2050
 8010f44:	10b13404 	addi	r2,r2,-15152
 8010f48:	10800017 	ldw	r2,0(r2)
 8010f4c:	100b883a 	mov	r5,r2
 8010f50:	01820074 	movhi	r6,2049
 8010f54:	31846d04 	addi	r6,r6,4532
 8010f58:	e1fffd17 	ldw	r7,-12(fp)
 8010f5c:	80155040 	call	8015504 <alt_alarm_start>
 8010f60:	1004403a 	cmpge	r2,r2,zero
 8010f64:	1000041e 	bne	r2,zero,8010f78 <altera_avalon_jtag_uart_init+0xac>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
 8010f68:	e0fffd17 	ldw	r3,-12(fp)
 8010f6c:	00a00034 	movhi	r2,32768
 8010f70:	10bfffc4 	addi	r2,r2,-1
 8010f74:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
 8010f78:	e037883a 	mov	sp,fp
 8010f7c:	dfc00117 	ldw	ra,4(sp)
 8010f80:	df000017 	ldw	fp,0(sp)
 8010f84:	dec00204 	addi	sp,sp,8
 8010f88:	f800283a 	ret

08010f8c <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
 8010f8c:	defff804 	addi	sp,sp,-32
 8010f90:	df000715 	stw	fp,28(sp)
 8010f94:	df000704 	addi	fp,sp,28
 8010f98:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
 8010f9c:	e0bfff17 	ldw	r2,-4(fp)
 8010fa0:	e0bffe15 	stw	r2,-8(fp)
  unsigned int base = sp->base;
 8010fa4:	e0bffe17 	ldw	r2,-8(fp)
 8010fa8:	10800017 	ldw	r2,0(r2)
 8010fac:	e0bffd15 	stw	r2,-12(fp)
 8010fb0:	00000006 	br	8010fb4 <altera_avalon_jtag_uart_irq+0x28>
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 8010fb4:	e0bffd17 	ldw	r2,-12(fp)
 8010fb8:	10800104 	addi	r2,r2,4
 8010fbc:	10800037 	ldwio	r2,0(r2)
 8010fc0:	e0bffc15 	stw	r2,-16(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
 8010fc4:	e0bffc17 	ldw	r2,-16(fp)
 8010fc8:	1080c00c 	andi	r2,r2,768
 8010fcc:	1005003a 	cmpeq	r2,r2,zero
 8010fd0:	1000741e 	bne	r2,zero,80111a4 <altera_avalon_jtag_uart_irq+0x218>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
 8010fd4:	e0bffc17 	ldw	r2,-16(fp)
 8010fd8:	1080400c 	andi	r2,r2,256
 8010fdc:	1005003a 	cmpeq	r2,r2,zero
 8010fe0:	1000351e 	bne	r2,zero,80110b8 <altera_avalon_jtag_uart_irq+0x12c>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
 8010fe4:	00800074 	movhi	r2,1
 8010fe8:	e0bffb15 	stw	r2,-20(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 8010fec:	e0bffe17 	ldw	r2,-8(fp)
 8010ff0:	10800a17 	ldw	r2,40(r2)
 8010ff4:	10800044 	addi	r2,r2,1
 8010ff8:	1081ffcc 	andi	r2,r2,2047
 8010ffc:	e0bffa15 	stw	r2,-24(fp)
        if (next == sp->rx_out)
 8011000:	e0bffe17 	ldw	r2,-8(fp)
 8011004:	10c00b17 	ldw	r3,44(r2)
 8011008:	e0bffa17 	ldw	r2,-24(fp)
 801100c:	18801626 	beq	r3,r2,8011068 <altera_avalon_jtag_uart_irq+0xdc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 8011010:	e0bffd17 	ldw	r2,-12(fp)
 8011014:	10800037 	ldwio	r2,0(r2)
 8011018:	e0bffb15 	stw	r2,-20(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
 801101c:	e0bffb17 	ldw	r2,-20(fp)
 8011020:	10a0000c 	andi	r2,r2,32768
 8011024:	1005003a 	cmpeq	r2,r2,zero
 8011028:	10000f1e 	bne	r2,zero,8011068 <altera_avalon_jtag_uart_irq+0xdc>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 801102c:	e0bffe17 	ldw	r2,-8(fp)
 8011030:	10c00a17 	ldw	r3,40(r2)
 8011034:	e0bffb17 	ldw	r2,-20(fp)
 8011038:	1009883a 	mov	r4,r2
 801103c:	e0bffe17 	ldw	r2,-8(fp)
 8011040:	1885883a 	add	r2,r3,r2
 8011044:	10800e04 	addi	r2,r2,56
 8011048:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 801104c:	e0bffe17 	ldw	r2,-8(fp)
 8011050:	10800a17 	ldw	r2,40(r2)
 8011054:	10800044 	addi	r2,r2,1
 8011058:	10c1ffcc 	andi	r3,r2,2047
 801105c:	e0bffe17 	ldw	r2,-8(fp)
 8011060:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
 8011064:	003fe106 	br	8010fec <altera_avalon_jtag_uart_irq+0x60>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
 8011068:	e0bffb17 	ldw	r2,-20(fp)
 801106c:	10bfffec 	andhi	r2,r2,65535
 8011070:	1005003a 	cmpeq	r2,r2,zero
 8011074:	1000101e 	bne	r2,zero,80110b8 <altera_avalon_jtag_uart_irq+0x12c>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 8011078:	e0bffe17 	ldw	r2,-8(fp)
 801107c:	10c00817 	ldw	r3,32(r2)
 8011080:	00bfff84 	movi	r2,-2
 8011084:	1886703a 	and	r3,r3,r2
 8011088:	e0bffe17 	ldw	r2,-8(fp)
 801108c:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
 8011090:	e0bffd17 	ldw	r2,-12(fp)
 8011094:	11000104 	addi	r4,r2,4
 8011098:	e0bffe17 	ldw	r2,-8(fp)
 801109c:	10800817 	ldw	r2,32(r2)
 80110a0:	1007883a 	mov	r3,r2
 80110a4:	2005883a 	mov	r2,r4
 80110a8:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 80110ac:	e0bffd17 	ldw	r2,-12(fp)
 80110b0:	10800104 	addi	r2,r2,4
 80110b4:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
 80110b8:	e0bffc17 	ldw	r2,-16(fp)
 80110bc:	1080800c 	andi	r2,r2,512
 80110c0:	1005003a 	cmpeq	r2,r2,zero
 80110c4:	103fbb1e 	bne	r2,zero,8010fb4 <altera_avalon_jtag_uart_irq+0x28>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
 80110c8:	e0bffc17 	ldw	r2,-16(fp)
 80110cc:	10bfffec 	andhi	r2,r2,65535
 80110d0:	1004d43a 	srli	r2,r2,16
 80110d4:	e0bff915 	stw	r2,-28(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
 80110d8:	00001506 	br	8011130 <altera_avalon_jtag_uart_irq+0x1a4>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
 80110dc:	e13ffd17 	ldw	r4,-12(fp)
 80110e0:	e0bffe17 	ldw	r2,-8(fp)
 80110e4:	10c00d17 	ldw	r3,52(r2)
 80110e8:	e0bffe17 	ldw	r2,-8(fp)
 80110ec:	1885883a 	add	r2,r3,r2
 80110f0:	10820e04 	addi	r2,r2,2104
 80110f4:	10800003 	ldbu	r2,0(r2)
 80110f8:	10c03fcc 	andi	r3,r2,255
 80110fc:	18c0201c 	xori	r3,r3,128
 8011100:	18ffe004 	addi	r3,r3,-128
 8011104:	2005883a 	mov	r2,r4
 8011108:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 801110c:	e0bffe17 	ldw	r2,-8(fp)
 8011110:	10800d17 	ldw	r2,52(r2)
 8011114:	10800044 	addi	r2,r2,1
 8011118:	10c1ffcc 	andi	r3,r2,2047
 801111c:	e0bffe17 	ldw	r2,-8(fp)
 8011120:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
 8011124:	e0bff917 	ldw	r2,-28(fp)
 8011128:	10bfffc4 	addi	r2,r2,-1
 801112c:	e0bff915 	stw	r2,-28(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
 8011130:	e0bff917 	ldw	r2,-28(fp)
 8011134:	1005003a 	cmpeq	r2,r2,zero
 8011138:	1000051e 	bne	r2,zero,8011150 <altera_avalon_jtag_uart_irq+0x1c4>
 801113c:	e0bffe17 	ldw	r2,-8(fp)
 8011140:	10c00d17 	ldw	r3,52(r2)
 8011144:	e0bffe17 	ldw	r2,-8(fp)
 8011148:	10800c17 	ldw	r2,48(r2)
 801114c:	18bfe31e 	bne	r3,r2,80110dc <altera_avalon_jtag_uart_irq+0x150>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
 8011150:	e0bff917 	ldw	r2,-28(fp)
 8011154:	1005003a 	cmpeq	r2,r2,zero
 8011158:	103f961e 	bne	r2,zero,8010fb4 <altera_avalon_jtag_uart_irq+0x28>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 801115c:	e0bffe17 	ldw	r2,-8(fp)
 8011160:	10c00817 	ldw	r3,32(r2)
 8011164:	00bfff44 	movi	r2,-3
 8011168:	1886703a 	and	r3,r3,r2
 801116c:	e0bffe17 	ldw	r2,-8(fp)
 8011170:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 8011174:	e0bffe17 	ldw	r2,-8(fp)
 8011178:	10800017 	ldw	r2,0(r2)
 801117c:	11000104 	addi	r4,r2,4
 8011180:	e0bffe17 	ldw	r2,-8(fp)
 8011184:	10800817 	ldw	r2,32(r2)
 8011188:	1007883a 	mov	r3,r2
 801118c:	2005883a 	mov	r2,r4
 8011190:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 8011194:	e0bffd17 	ldw	r2,-12(fp)
 8011198:	10800104 	addi	r2,r2,4
 801119c:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
 80111a0:	003f8406 	br	8010fb4 <altera_avalon_jtag_uart_irq+0x28>
}
 80111a4:	e037883a 	mov	sp,fp
 80111a8:	df000017 	ldw	fp,0(sp)
 80111ac:	dec00104 	addi	sp,sp,4
 80111b0:	f800283a 	ret

080111b4 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
 80111b4:	defffc04 	addi	sp,sp,-16
 80111b8:	df000315 	stw	fp,12(sp)
 80111bc:	df000304 	addi	fp,sp,12
 80111c0:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
 80111c4:	e0bfff17 	ldw	r2,-4(fp)
 80111c8:	e0bffe15 	stw	r2,-8(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
 80111cc:	e0bffe17 	ldw	r2,-8(fp)
 80111d0:	10800017 	ldw	r2,0(r2)
 80111d4:	10800104 	addi	r2,r2,4
 80111d8:	10800037 	ldwio	r2,0(r2)
 80111dc:	e0bffd15 	stw	r2,-12(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
 80111e0:	e0bffd17 	ldw	r2,-12(fp)
 80111e4:	1081000c 	andi	r2,r2,1024
 80111e8:	1005003a 	cmpeq	r2,r2,zero
 80111ec:	10000c1e 	bne	r2,zero,8011220 <altera_avalon_jtag_uart_timeout+0x6c>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
 80111f0:	e0bffe17 	ldw	r2,-8(fp)
 80111f4:	10800017 	ldw	r2,0(r2)
 80111f8:	11000104 	addi	r4,r2,4
 80111fc:	e0bffe17 	ldw	r2,-8(fp)
 8011200:	10800817 	ldw	r2,32(r2)
 8011204:	10810014 	ori	r2,r2,1024
 8011208:	1007883a 	mov	r3,r2
 801120c:	2005883a 	mov	r2,r4
 8011210:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
 8011214:	e0bffe17 	ldw	r2,-8(fp)
 8011218:	10000915 	stw	zero,36(r2)
 801121c:	00000a06 	br	8011248 <altera_avalon_jtag_uart_timeout+0x94>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
 8011220:	e0bffe17 	ldw	r2,-8(fp)
 8011224:	10c00917 	ldw	r3,36(r2)
 8011228:	00a00034 	movhi	r2,32768
 801122c:	10bfff04 	addi	r2,r2,-4
 8011230:	10c00536 	bltu	r2,r3,8011248 <altera_avalon_jtag_uart_timeout+0x94>
    sp->host_inactive++;
 8011234:	e0bffe17 	ldw	r2,-8(fp)
 8011238:	10800917 	ldw	r2,36(r2)
 801123c:	10c00044 	addi	r3,r2,1
 8011240:	e0bffe17 	ldw	r2,-8(fp)
 8011244:	10c00915 	stw	r3,36(r2)
 8011248:	008200b4 	movhi	r2,2050
 801124c:	10b13404 	addi	r2,r2,-15152
 8011250:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
 8011254:	e037883a 	mov	sp,fp
 8011258:	df000017 	ldw	fp,0(sp)
 801125c:	dec00104 	addi	sp,sp,4
 8011260:	f800283a 	ret

08011264 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
 8011264:	defffc04 	addi	sp,sp,-16
 8011268:	df000315 	stw	fp,12(sp)
 801126c:	df000304 	addi	fp,sp,12
 8011270:	e13ffd15 	stw	r4,-12(fp)
 8011274:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 8011278:	00000706 	br	8011298 <altera_avalon_jtag_uart_close+0x34>
    if (flags & O_NONBLOCK) {
 801127c:	e0bffe17 	ldw	r2,-8(fp)
 8011280:	1090000c 	andi	r2,r2,16384
 8011284:	1005003a 	cmpeq	r2,r2,zero
 8011288:	1000031e 	bne	r2,zero,8011298 <altera_avalon_jtag_uart_close+0x34>
      return -EWOULDBLOCK; 
 801128c:	00bffd44 	movi	r2,-11
 8011290:	e0bfff15 	stw	r2,-4(fp)
 8011294:	00000b06 	br	80112c4 <altera_avalon_jtag_uart_close+0x60>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 8011298:	e0bffd17 	ldw	r2,-12(fp)
 801129c:	10c00d17 	ldw	r3,52(r2)
 80112a0:	e0bffd17 	ldw	r2,-12(fp)
 80112a4:	10800c17 	ldw	r2,48(r2)
 80112a8:	18800526 	beq	r3,r2,80112c0 <altera_avalon_jtag_uart_close+0x5c>
 80112ac:	e0bffd17 	ldw	r2,-12(fp)
 80112b0:	10c00917 	ldw	r3,36(r2)
 80112b4:	e0bffd17 	ldw	r2,-12(fp)
 80112b8:	10800117 	ldw	r2,4(r2)
 80112bc:	18bfef36 	bltu	r3,r2,801127c <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
 80112c0:	e03fff15 	stw	zero,-4(fp)
 80112c4:	e0bfff17 	ldw	r2,-4(fp)
}
 80112c8:	e037883a 	mov	sp,fp
 80112cc:	df000017 	ldw	fp,0(sp)
 80112d0:	dec00104 	addi	sp,sp,4
 80112d4:	f800283a 	ret

080112d8 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
 80112d8:	defff804 	addi	sp,sp,-32
 80112dc:	df000715 	stw	fp,28(sp)
 80112e0:	df000704 	addi	fp,sp,28
 80112e4:	e13ffb15 	stw	r4,-20(fp)
 80112e8:	e17ffc15 	stw	r5,-16(fp)
 80112ec:	e1bffd15 	stw	r6,-12(fp)
  int rc = -ENOTTY;
 80112f0:	00bff9c4 	movi	r2,-25
 80112f4:	e0bffa15 	stw	r2,-24(fp)

  switch (req)
 80112f8:	e0bffc17 	ldw	r2,-16(fp)
 80112fc:	e0bfff15 	stw	r2,-4(fp)
 8011300:	e0ffff17 	ldw	r3,-4(fp)
 8011304:	189a8060 	cmpeqi	r2,r3,27137
 8011308:	1000041e 	bne	r2,zero,801131c <altera_avalon_jtag_uart_ioctl+0x44>
 801130c:	e0ffff17 	ldw	r3,-4(fp)
 8011310:	189a80a0 	cmpeqi	r2,r3,27138
 8011314:	10001b1e 	bne	r2,zero,8011384 <altera_avalon_jtag_uart_ioctl+0xac>
 8011318:	00002706 	br	80113b8 <altera_avalon_jtag_uart_ioctl+0xe0>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
 801131c:	e0bffb17 	ldw	r2,-20(fp)
 8011320:	10c00117 	ldw	r3,4(r2)
 8011324:	00a00034 	movhi	r2,32768
 8011328:	10bfffc4 	addi	r2,r2,-1
 801132c:	18802226 	beq	r3,r2,80113b8 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
 8011330:	e0bffd17 	ldw	r2,-12(fp)
 8011334:	10800017 	ldw	r2,0(r2)
 8011338:	e0bff915 	stw	r2,-28(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
 801133c:	e0bff917 	ldw	r2,-28(fp)
 8011340:	10800090 	cmplti	r2,r2,2
 8011344:	1000071e 	bne	r2,zero,8011364 <altera_avalon_jtag_uart_ioctl+0x8c>
 8011348:	e0fff917 	ldw	r3,-28(fp)
 801134c:	00a00034 	movhi	r2,32768
 8011350:	10bfffc4 	addi	r2,r2,-1
 8011354:	18800326 	beq	r3,r2,8011364 <altera_avalon_jtag_uart_ioctl+0x8c>
 8011358:	e0bff917 	ldw	r2,-28(fp)
 801135c:	e0bffe15 	stw	r2,-8(fp)
 8011360:	00000306 	br	8011370 <altera_avalon_jtag_uart_ioctl+0x98>
 8011364:	00e00034 	movhi	r3,32768
 8011368:	18ffff84 	addi	r3,r3,-2
 801136c:	e0fffe15 	stw	r3,-8(fp)
 8011370:	e0bffb17 	ldw	r2,-20(fp)
 8011374:	e0fffe17 	ldw	r3,-8(fp)
 8011378:	10c00115 	stw	r3,4(r2)
      rc = 0;
 801137c:	e03ffa15 	stw	zero,-24(fp)
    }
    break;
 8011380:	00000d06 	br	80113b8 <altera_avalon_jtag_uart_ioctl+0xe0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
 8011384:	e0bffb17 	ldw	r2,-20(fp)
 8011388:	10c00117 	ldw	r3,4(r2)
 801138c:	00a00034 	movhi	r2,32768
 8011390:	10bfffc4 	addi	r2,r2,-1
 8011394:	18800826 	beq	r3,r2,80113b8 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
 8011398:	e13ffd17 	ldw	r4,-12(fp)
 801139c:	e0bffb17 	ldw	r2,-20(fp)
 80113a0:	10c00917 	ldw	r3,36(r2)
 80113a4:	e0bffb17 	ldw	r2,-20(fp)
 80113a8:	10800117 	ldw	r2,4(r2)
 80113ac:	1885803a 	cmpltu	r2,r3,r2
 80113b0:	20800015 	stw	r2,0(r4)
      rc = 0;
 80113b4:	e03ffa15 	stw	zero,-24(fp)

  default:
    break;
  }

  return rc;
 80113b8:	e0bffa17 	ldw	r2,-24(fp)
}
 80113bc:	e037883a 	mov	sp,fp
 80113c0:	df000017 	ldw	fp,0(sp)
 80113c4:	dec00104 	addi	sp,sp,4
 80113c8:	f800283a 	ret

080113cc <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
 80113cc:	defff204 	addi	sp,sp,-56
 80113d0:	dfc00d15 	stw	ra,52(sp)
 80113d4:	df000c15 	stw	fp,48(sp)
 80113d8:	df000c04 	addi	fp,sp,48
 80113dc:	e13ffb15 	stw	r4,-20(fp)
 80113e0:	e17ffc15 	stw	r5,-16(fp)
 80113e4:	e1bffd15 	stw	r6,-12(fp)
 80113e8:	e1fffe15 	stw	r7,-8(fp)
  char * ptr = buffer;
 80113ec:	e0bffc17 	ldw	r2,-16(fp)
 80113f0:	e0bffa15 	stw	r2,-24(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 80113f4:	00004806 	br	8011518 <altera_avalon_jtag_uart_read+0x14c>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
 80113f8:	e0bffb17 	ldw	r2,-20(fp)
 80113fc:	10800a17 	ldw	r2,40(r2)
 8011400:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
 8011404:	e0bffb17 	ldw	r2,-20(fp)
 8011408:	10800b17 	ldw	r2,44(r2)
 801140c:	e0bff615 	stw	r2,-40(fp)

      if (in >= out)
 8011410:	e0fff717 	ldw	r3,-36(fp)
 8011414:	e0bff617 	ldw	r2,-40(fp)
 8011418:	18800536 	bltu	r3,r2,8011430 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
 801141c:	e0bff717 	ldw	r2,-36(fp)
 8011420:	e0fff617 	ldw	r3,-40(fp)
 8011424:	10c5c83a 	sub	r2,r2,r3
 8011428:	e0bff815 	stw	r2,-32(fp)
 801142c:	00000406 	br	8011440 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
 8011430:	00820004 	movi	r2,2048
 8011434:	e0fff617 	ldw	r3,-40(fp)
 8011438:	10c5c83a 	sub	r2,r2,r3
 801143c:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
 8011440:	e0bff817 	ldw	r2,-32(fp)
 8011444:	1005003a 	cmpeq	r2,r2,zero
 8011448:	10001f1e 	bne	r2,zero,80114c8 <altera_avalon_jtag_uart_read+0xfc>
        break; /* No more data available */

      if (n > space)
 801144c:	e0fffd17 	ldw	r3,-12(fp)
 8011450:	e0bff817 	ldw	r2,-32(fp)
 8011454:	1880022e 	bgeu	r3,r2,8011460 <altera_avalon_jtag_uart_read+0x94>
        n = space;
 8011458:	e0bffd17 	ldw	r2,-12(fp)
 801145c:	e0bff815 	stw	r2,-32(fp)

      memcpy(ptr, sp->rx_buf + out, n);
 8011460:	e0bffb17 	ldw	r2,-20(fp)
 8011464:	10c00e04 	addi	r3,r2,56
 8011468:	e0bff617 	ldw	r2,-40(fp)
 801146c:	1887883a 	add	r3,r3,r2
 8011470:	e0bffa17 	ldw	r2,-24(fp)
 8011474:	1009883a 	mov	r4,r2
 8011478:	180b883a 	mov	r5,r3
 801147c:	e1bff817 	ldw	r6,-32(fp)
 8011480:	8004c480 	call	8004c48 <memcpy>
      ptr   += n;
 8011484:	e0fff817 	ldw	r3,-32(fp)
 8011488:	e0bffa17 	ldw	r2,-24(fp)
 801148c:	10c5883a 	add	r2,r2,r3
 8011490:	e0bffa15 	stw	r2,-24(fp)
      space -= n;
 8011494:	e0fffd17 	ldw	r3,-12(fp)
 8011498:	e0bff817 	ldw	r2,-32(fp)
 801149c:	1885c83a 	sub	r2,r3,r2
 80114a0:	e0bffd15 	stw	r2,-12(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 80114a4:	e0fff617 	ldw	r3,-40(fp)
 80114a8:	e0bff817 	ldw	r2,-32(fp)
 80114ac:	1885883a 	add	r2,r3,r2
 80114b0:	10c1ffcc 	andi	r3,r2,2047
 80114b4:	e0bffb17 	ldw	r2,-20(fp)
 80114b8:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
 80114bc:	e0bffd17 	ldw	r2,-12(fp)
 80114c0:	10800048 	cmpgei	r2,r2,1
 80114c4:	103fcc1e 	bne	r2,zero,80113f8 <altera_avalon_jtag_uart_read+0x2c>

    /* If we read any data then return it */
    if (ptr != buffer)
 80114c8:	e0fffa17 	ldw	r3,-24(fp)
 80114cc:	e0bffc17 	ldw	r2,-16(fp)
 80114d0:	1880141e 	bne	r3,r2,8011524 <altera_avalon_jtag_uart_read+0x158>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
 80114d4:	e0bffe17 	ldw	r2,-8(fp)
 80114d8:	1090000c 	andi	r2,r2,16384
 80114dc:	1004c03a 	cmpne	r2,r2,zero
 80114e0:	1000101e 	bne	r2,zero,8011524 <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
 80114e4:	e0bffb17 	ldw	r2,-20(fp)
 80114e8:	10c00a17 	ldw	r3,40(r2)
 80114ec:	e0bff717 	ldw	r2,-36(fp)
 80114f0:	1880051e 	bne	r3,r2,8011508 <altera_avalon_jtag_uart_read+0x13c>
 80114f4:	e0bffb17 	ldw	r2,-20(fp)
 80114f8:	10c00917 	ldw	r3,36(r2)
 80114fc:	e0bffb17 	ldw	r2,-20(fp)
 8011500:	10800117 	ldw	r2,4(r2)
 8011504:	18bff736 	bltu	r3,r2,80114e4 <altera_avalon_jtag_uart_read+0x118>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
 8011508:	e0bffb17 	ldw	r2,-20(fp)
 801150c:	10c00a17 	ldw	r3,40(r2)
 8011510:	e0bff717 	ldw	r2,-36(fp)
 8011514:	18800326 	beq	r3,r2,8011524 <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 8011518:	e0bffd17 	ldw	r2,-12(fp)
 801151c:	10800048 	cmpgei	r2,r2,1
 8011520:	103fb51e 	bne	r2,zero,80113f8 <altera_avalon_jtag_uart_read+0x2c>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
 8011524:	e0fffa17 	ldw	r3,-24(fp)
 8011528:	e0bffc17 	ldw	r2,-16(fp)
 801152c:	18801926 	beq	r3,r2,8011594 <altera_avalon_jtag_uart_read+0x1c8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8011530:	0005303a 	rdctl	r2,status
 8011534:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8011538:	e0fff517 	ldw	r3,-44(fp)
 801153c:	00bfff84 	movi	r2,-2
 8011540:	1884703a 	and	r2,r3,r2
 8011544:	1001703a 	wrctl	status,r2
  
  return context;
 8011548:	e0bff517 	ldw	r2,-44(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
 801154c:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 8011550:	e0bffb17 	ldw	r2,-20(fp)
 8011554:	10800817 	ldw	r2,32(r2)
 8011558:	10c00054 	ori	r3,r2,1
 801155c:	e0bffb17 	ldw	r2,-20(fp)
 8011560:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 8011564:	e0bffb17 	ldw	r2,-20(fp)
 8011568:	10800017 	ldw	r2,0(r2)
 801156c:	11000104 	addi	r4,r2,4
 8011570:	e0bffb17 	ldw	r2,-20(fp)
 8011574:	10800817 	ldw	r2,32(r2)
 8011578:	1007883a 	mov	r3,r2
 801157c:	2005883a 	mov	r2,r4
 8011580:	10c00035 	stwio	r3,0(r2)
 8011584:	e0bff917 	ldw	r2,-28(fp)
 8011588:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 801158c:	e0bff417 	ldw	r2,-48(fp)
 8011590:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
 8011594:	e0fffa17 	ldw	r3,-24(fp)
 8011598:	e0bffc17 	ldw	r2,-16(fp)
 801159c:	18800526 	beq	r3,r2,80115b4 <altera_avalon_jtag_uart_read+0x1e8>
    return ptr - buffer;
 80115a0:	e0fffa17 	ldw	r3,-24(fp)
 80115a4:	e0bffc17 	ldw	r2,-16(fp)
 80115a8:	1887c83a 	sub	r3,r3,r2
 80115ac:	e0ffff15 	stw	r3,-4(fp)
 80115b0:	00000906 	br	80115d8 <altera_avalon_jtag_uart_read+0x20c>
  else if (flags & O_NONBLOCK)
 80115b4:	e0bffe17 	ldw	r2,-8(fp)
 80115b8:	1090000c 	andi	r2,r2,16384
 80115bc:	1005003a 	cmpeq	r2,r2,zero
 80115c0:	1000031e 	bne	r2,zero,80115d0 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
 80115c4:	00bffd44 	movi	r2,-11
 80115c8:	e0bfff15 	stw	r2,-4(fp)
 80115cc:	00000206 	br	80115d8 <altera_avalon_jtag_uart_read+0x20c>
  else
    return -EIO;
 80115d0:	00bffec4 	movi	r2,-5
 80115d4:	e0bfff15 	stw	r2,-4(fp)
 80115d8:	e0bfff17 	ldw	r2,-4(fp)
}
 80115dc:	e037883a 	mov	sp,fp
 80115e0:	dfc00117 	ldw	ra,4(sp)
 80115e4:	df000017 	ldw	fp,0(sp)
 80115e8:	dec00204 	addi	sp,sp,8
 80115ec:	f800283a 	ret

080115f0 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 80115f0:	defff204 	addi	sp,sp,-56
 80115f4:	dfc00d15 	stw	ra,52(sp)
 80115f8:	df000c15 	stw	fp,48(sp)
 80115fc:	df000c04 	addi	fp,sp,48
 8011600:	e13ffb15 	stw	r4,-20(fp)
 8011604:	e17ffc15 	stw	r5,-16(fp)
 8011608:	e1bffd15 	stw	r6,-12(fp)
 801160c:	e1fffe15 	stw	r7,-8(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
 8011610:	e03ff915 	stw	zero,-28(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
 8011614:	e0bffc17 	ldw	r2,-16(fp)
 8011618:	e0bff615 	stw	r2,-40(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 801161c:	00003a06 	br	8011708 <altera_avalon_jtag_uart_write+0x118>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
 8011620:	e0bffb17 	ldw	r2,-20(fp)
 8011624:	10800c17 	ldw	r2,48(r2)
 8011628:	e0bffa15 	stw	r2,-24(fp)
      out = sp->tx_out;
 801162c:	e0bffb17 	ldw	r2,-20(fp)
 8011630:	10800d17 	ldw	r2,52(r2)
 8011634:	e0bff915 	stw	r2,-28(fp)

      if (in < out)
 8011638:	e0fffa17 	ldw	r3,-24(fp)
 801163c:	e0bff917 	ldw	r2,-28(fp)
 8011640:	1880062e 	bgeu	r3,r2,801165c <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
 8011644:	e0fff917 	ldw	r3,-28(fp)
 8011648:	e0bffa17 	ldw	r2,-24(fp)
 801164c:	1885c83a 	sub	r2,r3,r2
 8011650:	10bfffc4 	addi	r2,r2,-1
 8011654:	e0bff815 	stw	r2,-32(fp)
 8011658:	00000c06 	br	801168c <altera_avalon_jtag_uart_write+0x9c>
      else if (out > 0)
 801165c:	e0bff917 	ldw	r2,-28(fp)
 8011660:	1005003a 	cmpeq	r2,r2,zero
 8011664:	1000051e 	bne	r2,zero,801167c <altera_avalon_jtag_uart_write+0x8c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
 8011668:	00820004 	movi	r2,2048
 801166c:	e0fffa17 	ldw	r3,-24(fp)
 8011670:	10c5c83a 	sub	r2,r2,r3
 8011674:	e0bff815 	stw	r2,-32(fp)
 8011678:	00000406 	br	801168c <altera_avalon_jtag_uart_write+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
 801167c:	0081ffc4 	movi	r2,2047
 8011680:	e0fffa17 	ldw	r3,-24(fp)
 8011684:	10c5c83a 	sub	r2,r2,r3
 8011688:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
 801168c:	e0bff817 	ldw	r2,-32(fp)
 8011690:	1005003a 	cmpeq	r2,r2,zero
 8011694:	10001f1e 	bne	r2,zero,8011714 <altera_avalon_jtag_uart_write+0x124>
        break;

      if (n > count)
 8011698:	e0fffd17 	ldw	r3,-12(fp)
 801169c:	e0bff817 	ldw	r2,-32(fp)
 80116a0:	1880022e 	bgeu	r3,r2,80116ac <altera_avalon_jtag_uart_write+0xbc>
        n = count;
 80116a4:	e0bffd17 	ldw	r2,-12(fp)
 80116a8:	e0bff815 	stw	r2,-32(fp)

      memcpy(sp->tx_buf + in, ptr, n);
 80116ac:	e0bffb17 	ldw	r2,-20(fp)
 80116b0:	10c20e04 	addi	r3,r2,2104
 80116b4:	e0bffa17 	ldw	r2,-24(fp)
 80116b8:	1885883a 	add	r2,r3,r2
 80116bc:	e0fffc17 	ldw	r3,-16(fp)
 80116c0:	1009883a 	mov	r4,r2
 80116c4:	180b883a 	mov	r5,r3
 80116c8:	e1bff817 	ldw	r6,-32(fp)
 80116cc:	8004c480 	call	8004c48 <memcpy>
      ptr   += n;
 80116d0:	e0fff817 	ldw	r3,-32(fp)
 80116d4:	e0bffc17 	ldw	r2,-16(fp)
 80116d8:	10c5883a 	add	r2,r2,r3
 80116dc:	e0bffc15 	stw	r2,-16(fp)
      count -= n;
 80116e0:	e0fffd17 	ldw	r3,-12(fp)
 80116e4:	e0bff817 	ldw	r2,-32(fp)
 80116e8:	1885c83a 	sub	r2,r3,r2
 80116ec:	e0bffd15 	stw	r2,-12(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 80116f0:	e0fffa17 	ldw	r3,-24(fp)
 80116f4:	e0bff817 	ldw	r2,-32(fp)
 80116f8:	1885883a 	add	r2,r3,r2
 80116fc:	10c1ffcc 	andi	r3,r2,2047
 8011700:	e0bffb17 	ldw	r2,-20(fp)
 8011704:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 8011708:	e0bffd17 	ldw	r2,-12(fp)
 801170c:	10800048 	cmpgei	r2,r2,1
 8011710:	103fc31e 	bne	r2,zero,8011620 <altera_avalon_jtag_uart_write+0x30>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8011714:	0005303a 	rdctl	r2,status
 8011718:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 801171c:	e0fff517 	ldw	r3,-44(fp)
 8011720:	00bfff84 	movi	r2,-2
 8011724:	1884703a 	and	r2,r3,r2
 8011728:	1001703a 	wrctl	status,r2
  
  return context;
 801172c:	e0bff517 	ldw	r2,-44(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
 8011730:	e0bff715 	stw	r2,-36(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 8011734:	e0bffb17 	ldw	r2,-20(fp)
 8011738:	10800817 	ldw	r2,32(r2)
 801173c:	10c00094 	ori	r3,r2,2
 8011740:	e0bffb17 	ldw	r2,-20(fp)
 8011744:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 8011748:	e0bffb17 	ldw	r2,-20(fp)
 801174c:	10800017 	ldw	r2,0(r2)
 8011750:	11000104 	addi	r4,r2,4
 8011754:	e0bffb17 	ldw	r2,-20(fp)
 8011758:	10800817 	ldw	r2,32(r2)
 801175c:	1007883a 	mov	r3,r2
 8011760:	2005883a 	mov	r2,r4
 8011764:	10c00035 	stwio	r3,0(r2)
 8011768:	e0bff717 	ldw	r2,-36(fp)
 801176c:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8011770:	e0bff417 	ldw	r2,-48(fp)
 8011774:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
 8011778:	e0bffd17 	ldw	r2,-12(fp)
 801177c:	10800050 	cmplti	r2,r2,1
 8011780:	1000111e 	bne	r2,zero,80117c8 <altera_avalon_jtag_uart_write+0x1d8>
    {
      if (flags & O_NONBLOCK)
 8011784:	e0bffe17 	ldw	r2,-8(fp)
 8011788:	1090000c 	andi	r2,r2,16384
 801178c:	1004c03a 	cmpne	r2,r2,zero
 8011790:	1000101e 	bne	r2,zero,80117d4 <altera_avalon_jtag_uart_write+0x1e4>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
 8011794:	e0bffb17 	ldw	r2,-20(fp)
 8011798:	10c00d17 	ldw	r3,52(r2)
 801179c:	e0bff917 	ldw	r2,-28(fp)
 80117a0:	1880051e 	bne	r3,r2,80117b8 <altera_avalon_jtag_uart_write+0x1c8>
 80117a4:	e0bffb17 	ldw	r2,-20(fp)
 80117a8:	10c00917 	ldw	r3,36(r2)
 80117ac:	e0bffb17 	ldw	r2,-20(fp)
 80117b0:	10800117 	ldw	r2,4(r2)
 80117b4:	18bff736 	bltu	r3,r2,8011794 <altera_avalon_jtag_uart_write+0x1a4>
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
 80117b8:	e0bffb17 	ldw	r2,-20(fp)
 80117bc:	10c00d17 	ldw	r3,52(r2)
 80117c0:	e0bff917 	ldw	r2,-28(fp)
 80117c4:	18800326 	beq	r3,r2,80117d4 <altera_avalon_jtag_uart_write+0x1e4>
        break;
    }
  }
  while (count > 0);
 80117c8:	e0bffd17 	ldw	r2,-12(fp)
 80117cc:	10800048 	cmpgei	r2,r2,1
 80117d0:	103fcd1e 	bne	r2,zero,8011708 <altera_avalon_jtag_uart_write+0x118>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
 80117d4:	e0fffc17 	ldw	r3,-16(fp)
 80117d8:	e0bff617 	ldw	r2,-40(fp)
 80117dc:	18800526 	beq	r3,r2,80117f4 <altera_avalon_jtag_uart_write+0x204>
    return ptr - start;
 80117e0:	e0fffc17 	ldw	r3,-16(fp)
 80117e4:	e0bff617 	ldw	r2,-40(fp)
 80117e8:	1887c83a 	sub	r3,r3,r2
 80117ec:	e0ffff15 	stw	r3,-4(fp)
 80117f0:	00000906 	br	8011818 <altera_avalon_jtag_uart_write+0x228>
  else if (flags & O_NONBLOCK)
 80117f4:	e0bffe17 	ldw	r2,-8(fp)
 80117f8:	1090000c 	andi	r2,r2,16384
 80117fc:	1005003a 	cmpeq	r2,r2,zero
 8011800:	1000031e 	bne	r2,zero,8011810 <altera_avalon_jtag_uart_write+0x220>
    return -EWOULDBLOCK;
 8011804:	00bffd44 	movi	r2,-11
 8011808:	e0bfff15 	stw	r2,-4(fp)
 801180c:	00000206 	br	8011818 <altera_avalon_jtag_uart_write+0x228>
  else
    return -EIO; /* Host not connected */
 8011810:	00bffec4 	movi	r2,-5
 8011814:	e0bfff15 	stw	r2,-4(fp)
 8011818:	e0bfff17 	ldw	r2,-4(fp)
}
 801181c:	e037883a 	mov	sp,fp
 8011820:	dfc00117 	ldw	ra,4(sp)
 8011824:	df000017 	ldw	fp,0(sp)
 8011828:	dec00204 	addi	sp,sp,8
 801182c:	f800283a 	ret

08011830 <lcd_write_command>:

/* --------------------------------------------------------------------- */

static void lcd_write_command(altera_avalon_lcd_16207_state* sp, 
  unsigned char command)
{
 8011830:	defffa04 	addi	sp,sp,-24
 8011834:	dfc00515 	stw	ra,20(sp)
 8011838:	df000415 	stw	fp,16(sp)
 801183c:	df000404 	addi	fp,sp,16
 8011840:	e13ffe15 	stw	r4,-8(fp)
 8011844:	e17fff05 	stb	r5,-4(fp)
  unsigned int base = sp->base;
 8011848:	e0bffe17 	ldw	r2,-8(fp)
 801184c:	10800017 	ldw	r2,0(r2)
 8011850:	e0bffd15 	stw	r2,-12(fp)
  /* We impose a timeout on the driver in case the LCD panel isn't connected.
   * The first time we call this function the timeout is approx 25ms 
   * (assuming 5 cycles per loop and a 200MHz clock).  Obviously systems
   * with slower clocks, or debug builds, or slower memory will take longer.
   */
  int i = 1000000;
 8011854:	008003f4 	movhi	r2,15
 8011858:	10909004 	addi	r2,r2,16960
 801185c:	e0bffc15 	stw	r2,-16(fp)

  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
 8011860:	e0bffe17 	ldw	r2,-8(fp)
 8011864:	10800803 	ldbu	r2,32(r2)
 8011868:	10803fcc 	andi	r2,r2,255
 801186c:	1080201c 	xori	r2,r2,128
 8011870:	10bfe004 	addi	r2,r2,-128
 8011874:	1004c03a 	cmpne	r2,r2,zero
 8011878:	1000161e 	bne	r2,zero,80118d4 <lcd_write_command+0xa4>
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
 801187c:	00000a06 	br	80118a8 <lcd_write_command+0x78>
    if (--i == 0)
 8011880:	e0bffc17 	ldw	r2,-16(fp)
 8011884:	10bfffc4 	addi	r2,r2,-1
 8011888:	e0bffc15 	stw	r2,-16(fp)
 801188c:	e0bffc17 	ldw	r2,-16(fp)
 8011890:	1004c03a 	cmpne	r2,r2,zero
 8011894:	1000041e 	bne	r2,zero,80118a8 <lcd_write_command+0x78>
    {
      sp->broken = 1;
 8011898:	e0fffe17 	ldw	r3,-8(fp)
 801189c:	00800044 	movi	r2,1
 80118a0:	18800805 	stb	r2,32(r3)
      return;
 80118a4:	00000b06 	br	80118d4 <lcd_write_command+0xa4>
  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
 80118a8:	e0bffd17 	ldw	r2,-12(fp)
 80118ac:	10800104 	addi	r2,r2,4
 80118b0:	10800037 	ldwio	r2,0(r2)
 80118b4:	1080200c 	andi	r2,r2,128
 80118b8:	1004c03a 	cmpne	r2,r2,zero
 80118bc:	103ff01e 	bne	r2,zero,8011880 <lcd_write_command+0x50>
    }

  /* Despite what it says in the datasheet, the LCD isn't ready to accept
   * a write immediately after it returns BUSY=0.  Wait for 100us more.
   */
  usleep(100);
 80118c0:	01001904 	movi	r4,100
 80118c4:	80162980 	call	8016298 <usleep>

  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, command);
 80118c8:	e0bffd17 	ldw	r2,-12(fp)
 80118cc:	e0ffff03 	ldbu	r3,-4(fp)
 80118d0:	10c00035 	stwio	r3,0(r2)
}
 80118d4:	e037883a 	mov	sp,fp
 80118d8:	dfc00117 	ldw	ra,4(sp)
 80118dc:	df000017 	ldw	fp,0(sp)
 80118e0:	dec00204 	addi	sp,sp,8
 80118e4:	f800283a 	ret

080118e8 <lcd_write_data>:

/* --------------------------------------------------------------------- */

static void lcd_write_data(altera_avalon_lcd_16207_state* sp, 
  unsigned char data)
{
 80118e8:	defffa04 	addi	sp,sp,-24
 80118ec:	dfc00515 	stw	ra,20(sp)
 80118f0:	df000415 	stw	fp,16(sp)
 80118f4:	df000404 	addi	fp,sp,16
 80118f8:	e13ffe15 	stw	r4,-8(fp)
 80118fc:	e17fff05 	stb	r5,-4(fp)
  unsigned int base = sp->base;
 8011900:	e0bffe17 	ldw	r2,-8(fp)
 8011904:	10800017 	ldw	r2,0(r2)
 8011908:	e0bffd15 	stw	r2,-12(fp)
  /* We impose a timeout on the driver in case the LCD panel isn't connected.
   * The first time we call this function the timeout is approx 25ms 
   * (assuming 5 cycles per loop and a 200MHz clock).  Obviously systems
   * with slower clocks, or debug builds, or slower memory will take longer.
   */
  int i = 1000000;
 801190c:	008003f4 	movhi	r2,15
 8011910:	10909004 	addi	r2,r2,16960
 8011914:	e0bffc15 	stw	r2,-16(fp)

  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
 8011918:	e0bffe17 	ldw	r2,-8(fp)
 801191c:	10800803 	ldbu	r2,32(r2)
 8011920:	10803fcc 	andi	r2,r2,255
 8011924:	1080201c 	xori	r2,r2,128
 8011928:	10bfe004 	addi	r2,r2,-128
 801192c:	1004c03a 	cmpne	r2,r2,zero
 8011930:	10001d1e 	bne	r2,zero,80119a8 <lcd_write_data+0xc0>
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
 8011934:	00000a06 	br	8011960 <lcd_write_data+0x78>
    if (--i == 0)
 8011938:	e0bffc17 	ldw	r2,-16(fp)
 801193c:	10bfffc4 	addi	r2,r2,-1
 8011940:	e0bffc15 	stw	r2,-16(fp)
 8011944:	e0bffc17 	ldw	r2,-16(fp)
 8011948:	1004c03a 	cmpne	r2,r2,zero
 801194c:	1000041e 	bne	r2,zero,8011960 <lcd_write_data+0x78>
    {
      sp->broken = 1;
 8011950:	e0fffe17 	ldw	r3,-8(fp)
 8011954:	00800044 	movi	r2,1
 8011958:	18800805 	stb	r2,32(r3)
      return;
 801195c:	00001206 	br	80119a8 <lcd_write_data+0xc0>
  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
 8011960:	e0bffd17 	ldw	r2,-12(fp)
 8011964:	10800104 	addi	r2,r2,4
 8011968:	10800037 	ldwio	r2,0(r2)
 801196c:	1080200c 	andi	r2,r2,128
 8011970:	1004c03a 	cmpne	r2,r2,zero
 8011974:	103ff01e 	bne	r2,zero,8011938 <lcd_write_data+0x50>
    }

  /* Despite what it says in the datasheet, the LCD isn't ready to accept
   * a write immediately after it returns BUSY=0.  Wait for 100us more.
   */
  usleep(100);
 8011978:	01001904 	movi	r4,100
 801197c:	80162980 	call	8016298 <usleep>

  IOWR_ALTERA_AVALON_LCD_16207_DATA(base, data);
 8011980:	e0bffd17 	ldw	r2,-12(fp)
 8011984:	10800204 	addi	r2,r2,8
 8011988:	e0ffff03 	ldbu	r3,-4(fp)
 801198c:	10c00035 	stwio	r3,0(r2)

  sp->address++;
 8011990:	e0bffe17 	ldw	r2,-8(fp)
 8011994:	108008c3 	ldbu	r2,35(r2)
 8011998:	10800044 	addi	r2,r2,1
 801199c:	1007883a 	mov	r3,r2
 80119a0:	e0bffe17 	ldw	r2,-8(fp)
 80119a4:	10c008c5 	stb	r3,35(r2)
}
 80119a8:	e037883a 	mov	sp,fp
 80119ac:	dfc00117 	ldw	ra,4(sp)
 80119b0:	df000017 	ldw	fp,0(sp)
 80119b4:	dec00204 	addi	sp,sp,8
 80119b8:	f800283a 	ret

080119bc <lcd_clear_screen>:

/* --------------------------------------------------------------------- */

static void lcd_clear_screen(altera_avalon_lcd_16207_state* sp)
{
 80119bc:	defffc04 	addi	sp,sp,-16
 80119c0:	dfc00315 	stw	ra,12(sp)
 80119c4:	df000215 	stw	fp,8(sp)
 80119c8:	df000204 	addi	fp,sp,8
 80119cc:	e13fff15 	stw	r4,-4(fp)
  int y;

  lcd_write_command(sp, LCD_CMD_CLEAR);
 80119d0:	e13fff17 	ldw	r4,-4(fp)
 80119d4:	01400044 	movi	r5,1
 80119d8:	80118300 	call	8011830 <lcd_write_command>

  sp->x = 0;
 80119dc:	e0bfff17 	ldw	r2,-4(fp)
 80119e0:	10000845 	stb	zero,33(r2)
  sp->y = 0;
 80119e4:	e0bfff17 	ldw	r2,-4(fp)
 80119e8:	10000885 	stb	zero,34(r2)
  sp->address = 0;
 80119ec:	e0bfff17 	ldw	r2,-4(fp)
 80119f0:	100008c5 	stb	zero,35(r2)

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
 80119f4:	e03ffe15 	stw	zero,-8(fp)
 80119f8:	00001906 	br	8011a60 <lcd_clear_screen+0xa4>
  {
    memset(sp->line[y].data, ' ', sizeof(sp->line[0].data));
 80119fc:	e0bffe17 	ldw	r2,-8(fp)
 8011a00:	108018e4 	muli	r2,r2,99
 8011a04:	10c01004 	addi	r3,r2,64
 8011a08:	e0bfff17 	ldw	r2,-4(fp)
 8011a0c:	1889883a 	add	r4,r3,r2
 8011a10:	01400804 	movi	r5,32
 8011a14:	01801444 	movi	r6,81
 8011a18:	800a3180 	call	800a318 <memset>
    memset(sp->line[y].visible, ' ', sizeof(sp->line[0].visible));
 8011a1c:	e0bffe17 	ldw	r2,-8(fp)
 8011a20:	108018e4 	muli	r2,r2,99
 8011a24:	10c00c04 	addi	r3,r2,48
 8011a28:	e0bfff17 	ldw	r2,-4(fp)
 8011a2c:	1889883a 	add	r4,r3,r2
 8011a30:	01400804 	movi	r5,32
 8011a34:	01800404 	movi	r6,16
 8011a38:	800a3180 	call	800a318 <memset>
    sp->line[y].width = 0;
 8011a3c:	e0bffe17 	ldw	r2,-8(fp)
 8011a40:	e0ffff17 	ldw	r3,-4(fp)
 8011a44:	108018e4 	muli	r2,r2,99
 8011a48:	10c5883a 	add	r2,r2,r3
 8011a4c:	10802404 	addi	r2,r2,144
 8011a50:	10000045 	stb	zero,1(r2)

  sp->x = 0;
  sp->y = 0;
  sp->address = 0;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
 8011a54:	e0bffe17 	ldw	r2,-8(fp)
 8011a58:	10800044 	addi	r2,r2,1
 8011a5c:	e0bffe15 	stw	r2,-8(fp)
 8011a60:	e0bffe17 	ldw	r2,-8(fp)
 8011a64:	10800090 	cmplti	r2,r2,2
 8011a68:	103fe41e 	bne	r2,zero,80119fc <lcd_clear_screen+0x40>
  {
    memset(sp->line[y].data, ' ', sizeof(sp->line[0].data));
    memset(sp->line[y].visible, ' ', sizeof(sp->line[0].visible));
    sp->line[y].width = 0;
  }
}
 8011a6c:	e037883a 	mov	sp,fp
 8011a70:	dfc00117 	ldw	ra,4(sp)
 8011a74:	df000017 	ldw	fp,0(sp)
 8011a78:	dec00204 	addi	sp,sp,8
 8011a7c:	f800283a 	ret

08011a80 <lcd_repaint_screen>:

/* --------------------------------------------------------------------- */

static void lcd_repaint_screen(altera_avalon_lcd_16207_state* sp)
{
 8011a80:	defff604 	addi	sp,sp,-40
 8011a84:	dfc00915 	stw	ra,36(sp)
 8011a88:	df000815 	stw	fp,32(sp)
 8011a8c:	dc000715 	stw	r16,28(sp)
 8011a90:	df000704 	addi	fp,sp,28
 8011a94:	e13fff15 	stw	r4,-4(fp)
  /* scrollpos controls how much the lines have scrolled round.  The speed
   * each line scrolls at is controlled by its speed variable - while
   * scrolline lines will wrap at the position set by width
   */

  int scrollpos = sp->scrollpos;
 8011a98:	e0bfff17 	ldw	r2,-4(fp)
 8011a9c:	10800943 	ldbu	r2,37(r2)
 8011aa0:	10803fcc 	andi	r2,r2,255
 8011aa4:	1080201c 	xori	r2,r2,128
 8011aa8:	10bfe004 	addi	r2,r2,-128
 8011aac:	e0bffc15 	stw	r2,-16(fp)

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
 8011ab0:	e03ffe15 	stw	zero,-8(fp)
 8011ab4:	00006406 	br	8011c48 <lcd_repaint_screen+0x1c8>
  {
    int width  = sp->line[y].width;
 8011ab8:	e0bffe17 	ldw	r2,-8(fp)
 8011abc:	e0ffff17 	ldw	r3,-4(fp)
 8011ac0:	108018e4 	muli	r2,r2,99
 8011ac4:	10c5883a 	add	r2,r2,r3
 8011ac8:	10802404 	addi	r2,r2,144
 8011acc:	10800043 	ldbu	r2,1(r2)
 8011ad0:	10803fcc 	andi	r2,r2,255
 8011ad4:	1080201c 	xori	r2,r2,128
 8011ad8:	10bfe004 	addi	r2,r2,-128
 8011adc:	e0bffb15 	stw	r2,-20(fp)
    int offset = (scrollpos * sp->line[y].speed) >> 8;
 8011ae0:	e0bffe17 	ldw	r2,-8(fp)
 8011ae4:	e0ffff17 	ldw	r3,-4(fp)
 8011ae8:	108018e4 	muli	r2,r2,99
 8011aec:	10c5883a 	add	r2,r2,r3
 8011af0:	10802404 	addi	r2,r2,144
 8011af4:	10800083 	ldbu	r2,2(r2)
 8011af8:	10c03fcc 	andi	r3,r2,255
 8011afc:	e0bffc17 	ldw	r2,-16(fp)
 8011b00:	1885383a 	mul	r2,r3,r2
 8011b04:	1005d23a 	srai	r2,r2,8
 8011b08:	e0bffa15 	stw	r2,-24(fp)
    if (offset >= width)
 8011b0c:	e0fffa17 	ldw	r3,-24(fp)
 8011b10:	e0bffb17 	ldw	r2,-20(fp)
 8011b14:	18800116 	blt	r3,r2,8011b1c <lcd_repaint_screen+0x9c>
      offset = 0;
 8011b18:	e03ffa15 	stw	zero,-24(fp)

    for (x = 0 ; x < ALT_LCD_WIDTH ; x++)
 8011b1c:	e03ffd15 	stw	zero,-12(fp)
 8011b20:	00004306 	br	8011c30 <lcd_repaint_screen+0x1b0>
    {
      char c = sp->line[y].data[(x + offset) % width];
 8011b24:	e43ffe17 	ldw	r16,-8(fp)
 8011b28:	e0fffd17 	ldw	r3,-12(fp)
 8011b2c:	e0bffa17 	ldw	r2,-24(fp)
 8011b30:	1889883a 	add	r4,r3,r2
 8011b34:	e17ffb17 	ldw	r5,-20(fp)
 8011b38:	8002f800 	call	8002f80 <__modsi3>
 8011b3c:	1009883a 	mov	r4,r2
 8011b40:	e0ffff17 	ldw	r3,-4(fp)
 8011b44:	808018e4 	muli	r2,r16,99
 8011b48:	10c5883a 	add	r2,r2,r3
 8011b4c:	1105883a 	add	r2,r2,r4
 8011b50:	10801004 	addi	r2,r2,64
 8011b54:	10800003 	ldbu	r2,0(r2)
 8011b58:	e0bff945 	stb	r2,-27(fp)

      /* Writing data takes 40us, so don't do it unless required */
      if (sp->line[y].visible[x] != c)
 8011b5c:	e0bffe17 	ldw	r2,-8(fp)
 8011b60:	e13ffd17 	ldw	r4,-12(fp)
 8011b64:	e0ffff17 	ldw	r3,-4(fp)
 8011b68:	108018e4 	muli	r2,r2,99
 8011b6c:	10c5883a 	add	r2,r2,r3
 8011b70:	1105883a 	add	r2,r2,r4
 8011b74:	10800c04 	addi	r2,r2,48
 8011b78:	10800003 	ldbu	r2,0(r2)
 8011b7c:	10c03fcc 	andi	r3,r2,255
 8011b80:	18c0201c 	xori	r3,r3,128
 8011b84:	18ffe004 	addi	r3,r3,-128
 8011b88:	e0bff947 	ldb	r2,-27(fp)
 8011b8c:	18802526 	beq	r3,r2,8011c24 <lcd_repaint_screen+0x1a4>
      {
        unsigned char address = x + colstart[y];
 8011b90:	e0fffe17 	ldw	r3,-8(fp)
 8011b94:	d0a01104 	addi	r2,gp,-32700
 8011b98:	1885883a 	add	r2,r3,r2
 8011b9c:	10800003 	ldbu	r2,0(r2)
 8011ba0:	1007883a 	mov	r3,r2
 8011ba4:	e0bffd17 	ldw	r2,-12(fp)
 8011ba8:	1885883a 	add	r2,r3,r2
 8011bac:	e0bff905 	stb	r2,-28(fp)

        if (address != sp->address)
 8011bb0:	e0fff903 	ldbu	r3,-28(fp)
 8011bb4:	e0bfff17 	ldw	r2,-4(fp)
 8011bb8:	108008c3 	ldbu	r2,35(r2)
 8011bbc:	10803fcc 	andi	r2,r2,255
 8011bc0:	1080201c 	xori	r2,r2,128
 8011bc4:	10bfe004 	addi	r2,r2,-128
 8011bc8:	18800926 	beq	r3,r2,8011bf0 <lcd_repaint_screen+0x170>
        {
          lcd_write_command(sp, LCD_CMD_WRITE_DATA | address);
 8011bcc:	e0fff903 	ldbu	r3,-28(fp)
 8011bd0:	00bfe004 	movi	r2,-128
 8011bd4:	1884b03a 	or	r2,r3,r2
 8011bd8:	11403fcc 	andi	r5,r2,255
 8011bdc:	e13fff17 	ldw	r4,-4(fp)
 8011be0:	80118300 	call	8011830 <lcd_write_command>
          sp->address = address;
 8011be4:	e0fff903 	ldbu	r3,-28(fp)
 8011be8:	e0bfff17 	ldw	r2,-4(fp)
 8011bec:	10c008c5 	stb	r3,35(r2)
        }

        lcd_write_data(sp, c);
 8011bf0:	e0bff943 	ldbu	r2,-27(fp)
 8011bf4:	11403fcc 	andi	r5,r2,255
 8011bf8:	e13fff17 	ldw	r4,-4(fp)
 8011bfc:	80118e80 	call	80118e8 <lcd_write_data>
        sp->line[y].visible[x] = c;
 8011c00:	e0bffe17 	ldw	r2,-8(fp)
 8011c04:	e13ffd17 	ldw	r4,-12(fp)
 8011c08:	e0ffff17 	ldw	r3,-4(fp)
 8011c0c:	108018e4 	muli	r2,r2,99
 8011c10:	10c5883a 	add	r2,r2,r3
 8011c14:	1105883a 	add	r2,r2,r4
 8011c18:	10c00c04 	addi	r3,r2,48
 8011c1c:	e0bff943 	ldbu	r2,-27(fp)
 8011c20:	18800005 	stb	r2,0(r3)
    int width  = sp->line[y].width;
    int offset = (scrollpos * sp->line[y].speed) >> 8;
    if (offset >= width)
      offset = 0;

    for (x = 0 ; x < ALT_LCD_WIDTH ; x++)
 8011c24:	e0bffd17 	ldw	r2,-12(fp)
 8011c28:	10800044 	addi	r2,r2,1
 8011c2c:	e0bffd15 	stw	r2,-12(fp)
 8011c30:	e0bffd17 	ldw	r2,-12(fp)
 8011c34:	10800410 	cmplti	r2,r2,16
 8011c38:	103fba1e 	bne	r2,zero,8011b24 <lcd_repaint_screen+0xa4>
   * scrolline lines will wrap at the position set by width
   */

  int scrollpos = sp->scrollpos;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
 8011c3c:	e0bffe17 	ldw	r2,-8(fp)
 8011c40:	10800044 	addi	r2,r2,1
 8011c44:	e0bffe15 	stw	r2,-8(fp)
 8011c48:	e0bffe17 	ldw	r2,-8(fp)
 8011c4c:	10800090 	cmplti	r2,r2,2
 8011c50:	103f991e 	bne	r2,zero,8011ab8 <lcd_repaint_screen+0x38>
        lcd_write_data(sp, c);
        sp->line[y].visible[x] = c;
      }
    }
  }
}
 8011c54:	e037883a 	mov	sp,fp
 8011c58:	dfc00217 	ldw	ra,8(sp)
 8011c5c:	df000117 	ldw	fp,4(sp)
 8011c60:	dc000017 	ldw	r16,0(sp)
 8011c64:	dec00304 	addi	sp,sp,12
 8011c68:	f800283a 	ret

08011c6c <lcd_scroll_up>:

/* --------------------------------------------------------------------- */

static void lcd_scroll_up(altera_avalon_lcd_16207_state* sp)
{
 8011c6c:	defffc04 	addi	sp,sp,-16
 8011c70:	dfc00315 	stw	ra,12(sp)
 8011c74:	df000215 	stw	fp,8(sp)
 8011c78:	df000204 	addi	fp,sp,8
 8011c7c:	e13fff15 	stw	r4,-4(fp)
  int y;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
 8011c80:	e03ffe15 	stw	zero,-8(fp)
 8011c84:	00001d06 	br	8011cfc <lcd_scroll_up+0x90>
  {
    if (y < ALT_LCD_HEIGHT-1)
 8011c88:	e0bffe17 	ldw	r2,-8(fp)
 8011c8c:	10800048 	cmpgei	r2,r2,1
 8011c90:	10000f1e 	bne	r2,zero,8011cd0 <lcd_scroll_up+0x64>
      memcpy(sp->line[y].data, sp->line[y+1].data, ALT_LCD_VIRTUAL_WIDTH);
 8011c94:	e0bffe17 	ldw	r2,-8(fp)
 8011c98:	108018e4 	muli	r2,r2,99
 8011c9c:	10c01004 	addi	r3,r2,64
 8011ca0:	e0bfff17 	ldw	r2,-4(fp)
 8011ca4:	1889883a 	add	r4,r3,r2
 8011ca8:	e0bffe17 	ldw	r2,-8(fp)
 8011cac:	10800044 	addi	r2,r2,1
 8011cb0:	108018e4 	muli	r2,r2,99
 8011cb4:	10c01004 	addi	r3,r2,64
 8011cb8:	e0bfff17 	ldw	r2,-4(fp)
 8011cbc:	1885883a 	add	r2,r3,r2
 8011cc0:	100b883a 	mov	r5,r2
 8011cc4:	01801404 	movi	r6,80
 8011cc8:	8004c480 	call	8004c48 <memcpy>
 8011ccc:	00000806 	br	8011cf0 <lcd_scroll_up+0x84>
    else
      memset(sp->line[y].data, ' ', ALT_LCD_VIRTUAL_WIDTH);
 8011cd0:	e0bffe17 	ldw	r2,-8(fp)
 8011cd4:	108018e4 	muli	r2,r2,99
 8011cd8:	10c01004 	addi	r3,r2,64
 8011cdc:	e0bfff17 	ldw	r2,-4(fp)
 8011ce0:	1889883a 	add	r4,r3,r2
 8011ce4:	01400804 	movi	r5,32
 8011ce8:	01801404 	movi	r6,80
 8011cec:	800a3180 	call	800a318 <memset>

static void lcd_scroll_up(altera_avalon_lcd_16207_state* sp)
{
  int y;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
 8011cf0:	e0bffe17 	ldw	r2,-8(fp)
 8011cf4:	10800044 	addi	r2,r2,1
 8011cf8:	e0bffe15 	stw	r2,-8(fp)
 8011cfc:	e0bffe17 	ldw	r2,-8(fp)
 8011d00:	10800090 	cmplti	r2,r2,2
 8011d04:	103fe01e 	bne	r2,zero,8011c88 <lcd_scroll_up+0x1c>
      memcpy(sp->line[y].data, sp->line[y+1].data, ALT_LCD_VIRTUAL_WIDTH);
    else
      memset(sp->line[y].data, ' ', ALT_LCD_VIRTUAL_WIDTH);
  }

  sp->y--;
 8011d08:	e0bfff17 	ldw	r2,-4(fp)
 8011d0c:	10800883 	ldbu	r2,34(r2)
 8011d10:	10bfffc4 	addi	r2,r2,-1
 8011d14:	1007883a 	mov	r3,r2
 8011d18:	e0bfff17 	ldw	r2,-4(fp)
 8011d1c:	10c00885 	stb	r3,34(r2)
}
 8011d20:	e037883a 	mov	sp,fp
 8011d24:	dfc00117 	ldw	ra,4(sp)
 8011d28:	df000017 	ldw	fp,0(sp)
 8011d2c:	dec00204 	addi	sp,sp,8
 8011d30:	f800283a 	ret

08011d34 <lcd_handle_escape>:

/* --------------------------------------------------------------------- */

static void lcd_handle_escape(altera_avalon_lcd_16207_state* sp, char c)
{
 8011d34:	defff804 	addi	sp,sp,-32
 8011d38:	dfc00715 	stw	ra,28(sp)
 8011d3c:	df000615 	stw	fp,24(sp)
 8011d40:	df000604 	addi	fp,sp,24
 8011d44:	e13ffd15 	stw	r4,-12(fp)
 8011d48:	e17ffe05 	stb	r5,-8(fp)
  int parm1 = 0, parm2 = 0;
 8011d4c:	e03ffc15 	stw	zero,-16(fp)
 8011d50:	e03ffb15 	stw	zero,-20(fp)

  if (sp->escape[0] == '[')
 8011d54:	e0bffd17 	ldw	r2,-12(fp)
 8011d58:	10800a03 	ldbu	r2,40(r2)
 8011d5c:	10803fcc 	andi	r2,r2,255
 8011d60:	1080201c 	xori	r2,r2,128
 8011d64:	10bfe004 	addi	r2,r2,-128
 8011d68:	108016d8 	cmpnei	r2,r2,91
 8011d6c:	1000491e 	bne	r2,zero,8011e94 <lcd_handle_escape+0x160>
  {
    char * ptr = sp->escape+1;
 8011d70:	e0bffd17 	ldw	r2,-12(fp)
 8011d74:	10800a04 	addi	r2,r2,40
 8011d78:	10800044 	addi	r2,r2,1
 8011d7c:	e0bffa15 	stw	r2,-24(fp)
    while (isdigit(*ptr))
 8011d80:	00000d06 	br	8011db8 <lcd_handle_escape+0x84>
      parm1 = (parm1 * 10) + (*ptr++ - '0');
 8011d84:	e0bffc17 	ldw	r2,-16(fp)
 8011d88:	10c002a4 	muli	r3,r2,10
 8011d8c:	e0bffa17 	ldw	r2,-24(fp)
 8011d90:	10800003 	ldbu	r2,0(r2)
 8011d94:	10803fcc 	andi	r2,r2,255
 8011d98:	1080201c 	xori	r2,r2,128
 8011d9c:	10bfe004 	addi	r2,r2,-128
 8011da0:	1885883a 	add	r2,r3,r2
 8011da4:	10bff404 	addi	r2,r2,-48
 8011da8:	e0bffc15 	stw	r2,-16(fp)
 8011dac:	e0bffa17 	ldw	r2,-24(fp)
 8011db0:	10800044 	addi	r2,r2,1
 8011db4:	e0bffa15 	stw	r2,-24(fp)
  int parm1 = 0, parm2 = 0;

  if (sp->escape[0] == '[')
  {
    char * ptr = sp->escape+1;
    while (isdigit(*ptr))
 8011db8:	e0bffa17 	ldw	r2,-24(fp)
 8011dbc:	10800003 	ldbu	r2,0(r2)
 8011dc0:	10803fcc 	andi	r2,r2,255
 8011dc4:	1080201c 	xori	r2,r2,128
 8011dc8:	10bfe004 	addi	r2,r2,-128
 8011dcc:	1007883a 	mov	r3,r2
 8011dd0:	008200b4 	movhi	r2,2050
 8011dd4:	10a97004 	addi	r2,r2,-23104
 8011dd8:	10800017 	ldw	r2,0(r2)
 8011ddc:	1885883a 	add	r2,r3,r2
 8011de0:	10800003 	ldbu	r2,0(r2)
 8011de4:	10803fcc 	andi	r2,r2,255
 8011de8:	1080010c 	andi	r2,r2,4
 8011dec:	1004c03a 	cmpne	r2,r2,zero
 8011df0:	103fe41e 	bne	r2,zero,8011d84 <lcd_handle_escape+0x50>
      parm1 = (parm1 * 10) + (*ptr++ - '0');

    if (*ptr == ';')
 8011df4:	e0bffa17 	ldw	r2,-24(fp)
 8011df8:	10800003 	ldbu	r2,0(r2)
 8011dfc:	10803fcc 	andi	r2,r2,255
 8011e00:	1080201c 	xori	r2,r2,128
 8011e04:	10bfe004 	addi	r2,r2,-128
 8011e08:	10800ed8 	cmpnei	r2,r2,59
 8011e0c:	1000231e 	bne	r2,zero,8011e9c <lcd_handle_escape+0x168>
    {
      ptr++;
 8011e10:	e0bffa17 	ldw	r2,-24(fp)
 8011e14:	10800044 	addi	r2,r2,1
 8011e18:	e0bffa15 	stw	r2,-24(fp)
      while (isdigit(*ptr))
 8011e1c:	00000d06 	br	8011e54 <lcd_handle_escape+0x120>
        parm2 = (parm2 * 10) + (*ptr++ - '0');
 8011e20:	e0bffb17 	ldw	r2,-20(fp)
 8011e24:	10c002a4 	muli	r3,r2,10
 8011e28:	e0bffa17 	ldw	r2,-24(fp)
 8011e2c:	10800003 	ldbu	r2,0(r2)
 8011e30:	10803fcc 	andi	r2,r2,255
 8011e34:	1080201c 	xori	r2,r2,128
 8011e38:	10bfe004 	addi	r2,r2,-128
 8011e3c:	1885883a 	add	r2,r3,r2
 8011e40:	10bff404 	addi	r2,r2,-48
 8011e44:	e0bffb15 	stw	r2,-20(fp)
 8011e48:	e0bffa17 	ldw	r2,-24(fp)
 8011e4c:	10800044 	addi	r2,r2,1
 8011e50:	e0bffa15 	stw	r2,-24(fp)
      parm1 = (parm1 * 10) + (*ptr++ - '0');

    if (*ptr == ';')
    {
      ptr++;
      while (isdigit(*ptr))
 8011e54:	e0bffa17 	ldw	r2,-24(fp)
 8011e58:	10800003 	ldbu	r2,0(r2)
 8011e5c:	10803fcc 	andi	r2,r2,255
 8011e60:	1080201c 	xori	r2,r2,128
 8011e64:	10bfe004 	addi	r2,r2,-128
 8011e68:	1007883a 	mov	r3,r2
 8011e6c:	008200b4 	movhi	r2,2050
 8011e70:	10a97004 	addi	r2,r2,-23104
 8011e74:	10800017 	ldw	r2,0(r2)
 8011e78:	1885883a 	add	r2,r3,r2
 8011e7c:	10800003 	ldbu	r2,0(r2)
 8011e80:	10803fcc 	andi	r2,r2,255
 8011e84:	1080010c 	andi	r2,r2,4
 8011e88:	1004c03a 	cmpne	r2,r2,zero
 8011e8c:	103fe41e 	bne	r2,zero,8011e20 <lcd_handle_escape+0xec>
 8011e90:	00000206 	br	8011e9c <lcd_handle_escape+0x168>
        parm2 = (parm2 * 10) + (*ptr++ - '0');
    }
  }
  else
    parm1 = -1;
 8011e94:	00bfffc4 	movi	r2,-1
 8011e98:	e0bffc15 	stw	r2,-16(fp)

  switch (c)
 8011e9c:	e0bffe07 	ldb	r2,-8(fp)
 8011ea0:	e0bfff15 	stw	r2,-4(fp)
 8011ea4:	e0ffff17 	ldw	r3,-4(fp)
 8011ea8:	188012a0 	cmpeqi	r2,r3,74
 8011eac:	10002f1e 	bne	r2,zero,8011f6c <lcd_handle_escape+0x238>
 8011eb0:	e0ffff17 	ldw	r3,-4(fp)
 8011eb4:	188012c8 	cmpgei	r2,r3,75
 8011eb8:	1000041e 	bne	r2,zero,8011ecc <lcd_handle_escape+0x198>
 8011ebc:	e0ffff17 	ldw	r3,-4(fp)
 8011ec0:	18801220 	cmpeqi	r2,r3,72
 8011ec4:	1000081e 	bne	r2,zero,8011ee8 <lcd_handle_escape+0x1b4>
 8011ec8:	00004906 	br	8011ff0 <lcd_handle_escape+0x2bc>
 8011ecc:	e0ffff17 	ldw	r3,-4(fp)
 8011ed0:	188012e0 	cmpeqi	r2,r3,75
 8011ed4:	10002b1e 	bne	r2,zero,8011f84 <lcd_handle_escape+0x250>
 8011ed8:	e0ffff17 	ldw	r3,-4(fp)
 8011edc:	188019a0 	cmpeqi	r2,r3,102
 8011ee0:	1000011e 	bne	r2,zero,8011ee8 <lcd_handle_escape+0x1b4>
 8011ee4:	00004206 	br	8011ff0 <lcd_handle_escape+0x2bc>
  {
  case 'H': /* ESC '[' <y> ';' <x> 'H'  : Move cursor to location */
  case 'f': /* Same as above */
    if (parm2 > 0)
 8011ee8:	e0bffb17 	ldw	r2,-20(fp)
 8011eec:	10800050 	cmplti	r2,r2,1
 8011ef0:	1000051e 	bne	r2,zero,8011f08 <lcd_handle_escape+0x1d4>
      sp->x = parm2 - 1;
 8011ef4:	e0bffb17 	ldw	r2,-20(fp)
 8011ef8:	10bfffc4 	addi	r2,r2,-1
 8011efc:	1007883a 	mov	r3,r2
 8011f00:	e0bffd17 	ldw	r2,-12(fp)
 8011f04:	10c00845 	stb	r3,33(r2)
    if (parm1 > 0)
 8011f08:	e0bffc17 	ldw	r2,-16(fp)
 8011f0c:	10800050 	cmplti	r2,r2,1
 8011f10:	1000371e 	bne	r2,zero,8011ff0 <lcd_handle_escape+0x2bc>
    {
      sp->y = parm1 - 1;
 8011f14:	e0bffc17 	ldw	r2,-16(fp)
 8011f18:	10bfffc4 	addi	r2,r2,-1
 8011f1c:	1007883a 	mov	r3,r2
 8011f20:	e0bffd17 	ldw	r2,-12(fp)
 8011f24:	10c00885 	stb	r3,34(r2)
      if (sp->y > ALT_LCD_HEIGHT * 2)
 8011f28:	e0bffd17 	ldw	r2,-12(fp)
 8011f2c:	10800883 	ldbu	r2,34(r2)
 8011f30:	10803fcc 	andi	r2,r2,255
 8011f34:	10800170 	cmpltui	r2,r2,5
 8011f38:	1000061e 	bne	r2,zero,8011f54 <lcd_handle_escape+0x220>
        sp->y = ALT_LCD_HEIGHT * 2;
 8011f3c:	e0fffd17 	ldw	r3,-12(fp)
 8011f40:	00800104 	movi	r2,4
 8011f44:	18800885 	stb	r2,34(r3)
      while (sp->y > ALT_LCD_HEIGHT)
 8011f48:	00000206 	br	8011f54 <lcd_handle_escape+0x220>
        lcd_scroll_up(sp);
 8011f4c:	e13ffd17 	ldw	r4,-12(fp)
 8011f50:	8011c6c0 	call	8011c6c <lcd_scroll_up>
    if (parm1 > 0)
    {
      sp->y = parm1 - 1;
      if (sp->y > ALT_LCD_HEIGHT * 2)
        sp->y = ALT_LCD_HEIGHT * 2;
      while (sp->y > ALT_LCD_HEIGHT)
 8011f54:	e0bffd17 	ldw	r2,-12(fp)
 8011f58:	10800883 	ldbu	r2,34(r2)
 8011f5c:	10803fcc 	andi	r2,r2,255
 8011f60:	108000e8 	cmpgeui	r2,r2,3
 8011f64:	103ff91e 	bne	r2,zero,8011f4c <lcd_handle_escape+0x218>
        lcd_scroll_up(sp);
    }
    break;
 8011f68:	00002106 	br	8011ff0 <lcd_handle_escape+0x2bc>
    /*   ESC J      is clear to beginning of line    [unimplemented]
     *   ESC [ 0 J  is clear to bottom of screen     [unimplemented]
     *   ESC [ 1 J  is clear to beginning of screen  [unimplemented]
     *   ESC [ 2 J  is clear screen
     */
    if (parm1 == 2)
 8011f6c:	e0bffc17 	ldw	r2,-16(fp)
 8011f70:	10800098 	cmpnei	r2,r2,2
 8011f74:	10001e1e 	bne	r2,zero,8011ff0 <lcd_handle_escape+0x2bc>
      lcd_clear_screen(sp);
 8011f78:	e13ffd17 	ldw	r4,-12(fp)
 8011f7c:	80119bc0 	call	80119bc <lcd_clear_screen>
    break;
 8011f80:	00001b06 	br	8011ff0 <lcd_handle_escape+0x2bc>
    /*   ESC K      is clear to end of line
     *   ESC [ 0 K  is clear to end of line
     *   ESC [ 1 K  is clear to beginning of line    [unimplemented]
     *   ESC [ 2 K  is clear line                    [unimplemented]
     */
    if (parm1 < 1)
 8011f84:	e0bffc17 	ldw	r2,-16(fp)
 8011f88:	10800048 	cmpgei	r2,r2,1
 8011f8c:	1000181e 	bne	r2,zero,8011ff0 <lcd_handle_escape+0x2bc>
    {
      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
 8011f90:	e0bffd17 	ldw	r2,-12(fp)
 8011f94:	10800843 	ldbu	r2,33(r2)
 8011f98:	10803fcc 	andi	r2,r2,255
 8011f9c:	10801428 	cmpgeui	r2,r2,80
 8011fa0:	1000131e 	bne	r2,zero,8011ff0 <lcd_handle_escape+0x2bc>
        memset(sp->line[sp->y].data + sp->x, ' ', ALT_LCD_VIRTUAL_WIDTH - sp->x);
 8011fa4:	e0bffd17 	ldw	r2,-12(fp)
 8011fa8:	10800883 	ldbu	r2,34(r2)
 8011fac:	10803fcc 	andi	r2,r2,255
 8011fb0:	108018e4 	muli	r2,r2,99
 8011fb4:	10c01004 	addi	r3,r2,64
 8011fb8:	e0bffd17 	ldw	r2,-12(fp)
 8011fbc:	1887883a 	add	r3,r3,r2
 8011fc0:	e0bffd17 	ldw	r2,-12(fp)
 8011fc4:	10800843 	ldbu	r2,33(r2)
 8011fc8:	10803fcc 	andi	r2,r2,255
 8011fcc:	1889883a 	add	r4,r3,r2
 8011fd0:	e0bffd17 	ldw	r2,-12(fp)
 8011fd4:	10800843 	ldbu	r2,33(r2)
 8011fd8:	10c03fcc 	andi	r3,r2,255
 8011fdc:	00801404 	movi	r2,80
 8011fe0:	10c5c83a 	sub	r2,r2,r3
 8011fe4:	100d883a 	mov	r6,r2
 8011fe8:	01400804 	movi	r5,32
 8011fec:	800a3180 	call	800a318 <memset>
    }
    break;
  }
}
 8011ff0:	e037883a 	mov	sp,fp
 8011ff4:	dfc00117 	ldw	ra,4(sp)
 8011ff8:	df000017 	ldw	fp,0(sp)
 8011ffc:	dec00204 	addi	sp,sp,8
 8012000:	f800283a 	ret

08012004 <altera_avalon_lcd_16207_write>:

/* --------------------------------------------------------------------- */

int altera_avalon_lcd_16207_write(altera_avalon_lcd_16207_state* sp, 
  const char* ptr, int len, int flags)
{
 8012004:	defff204 	addi	sp,sp,-56
 8012008:	dfc00d15 	stw	ra,52(sp)
 801200c:	df000c15 	stw	fp,48(sp)
 8012010:	dc000b15 	stw	r16,44(sp)
 8012014:	df000b04 	addi	fp,sp,44
 8012018:	e13ffc15 	stw	r4,-16(fp)
 801201c:	e17ffd15 	stw	r5,-12(fp)
 8012020:	e1bffe15 	stw	r6,-8(fp)
 8012024:	e1ffff15 	stw	r7,-4(fp)
  const char* end = ptr + len;
 8012028:	e0bffe17 	ldw	r2,-8(fp)
 801202c:	1007883a 	mov	r3,r2
 8012030:	e0bffd17 	ldw	r2,-12(fp)
 8012034:	10c5883a 	add	r2,r2,r3
 8012038:	e0bffb15 	stw	r2,-20(fp)

  ALT_SEM_PEND (sp->write_lock, 0);

  /* Tell the routine which is called off the timer interrupt that the
   * foreground routines are active so it must not repaint the display. */
  sp->active = 1;
 801203c:	e0fffc17 	ldw	r3,-16(fp)
 8012040:	00800044 	movi	r2,1
 8012044:	188009c5 	stb	r2,39(r3)

  for ( ; ptr < end ; ptr++)
 8012048:	0000a206 	br	80122d4 <altera_avalon_lcd_16207_write+0x2d0>
  {
    char c = *ptr;
 801204c:	e0bffd17 	ldw	r2,-12(fp)
 8012050:	10800003 	ldbu	r2,0(r2)
 8012054:	e0bff805 	stb	r2,-32(fp)

    if (sp->esccount >= 0)
 8012058:	e0bffc17 	ldw	r2,-16(fp)
 801205c:	10800903 	ldbu	r2,36(r2)
 8012060:	10803fcc 	andi	r2,r2,255
 8012064:	1080201c 	xori	r2,r2,128
 8012068:	10bfe004 	addi	r2,r2,-128
 801206c:	1004803a 	cmplt	r2,r2,zero
 8012070:	10003b1e 	bne	r2,zero,8012160 <altera_avalon_lcd_16207_write+0x15c>
    {
      unsigned int esccount = sp->esccount;
 8012074:	e0bffc17 	ldw	r2,-16(fp)
 8012078:	10800903 	ldbu	r2,36(r2)
 801207c:	10803fcc 	andi	r2,r2,255
 8012080:	1080201c 	xori	r2,r2,128
 8012084:	10bfe004 	addi	r2,r2,-128
 8012088:	e0bff715 	stw	r2,-36(fp)

      /* Single character escape sequences can end with any character
       * Multi character escape sequences start with '[' and contain
       * digits and semicolons before terminating
       */
      if ((esccount == 0 && c != '[') ||
 801208c:	e0bff717 	ldw	r2,-36(fp)
 8012090:	1004c03a 	cmpne	r2,r2,zero
 8012094:	1000031e 	bne	r2,zero,80120a4 <altera_avalon_lcd_16207_write+0xa0>
 8012098:	e0bff807 	ldb	r2,-32(fp)
 801209c:	108016d8 	cmpnei	r2,r2,91
 80120a0:	1000111e 	bne	r2,zero,80120e8 <altera_avalon_lcd_16207_write+0xe4>
 80120a4:	e0bff717 	ldw	r2,-36(fp)
 80120a8:	1005003a 	cmpeq	r2,r2,zero
 80120ac:	10001a1e 	bne	r2,zero,8012118 <altera_avalon_lcd_16207_write+0x114>
 80120b0:	e0bff807 	ldb	r2,-32(fp)
 80120b4:	1007883a 	mov	r3,r2
 80120b8:	008200b4 	movhi	r2,2050
 80120bc:	10a97004 	addi	r2,r2,-23104
 80120c0:	10800017 	ldw	r2,0(r2)
 80120c4:	1885883a 	add	r2,r3,r2
 80120c8:	10800003 	ldbu	r2,0(r2)
 80120cc:	10803fcc 	andi	r2,r2,255
 80120d0:	1080010c 	andi	r2,r2,4
 80120d4:	1004c03a 	cmpne	r2,r2,zero
 80120d8:	10000f1e 	bne	r2,zero,8012118 <altera_avalon_lcd_16207_write+0x114>
 80120dc:	e0bff807 	ldb	r2,-32(fp)
 80120e0:	10800ee0 	cmpeqi	r2,r2,59
 80120e4:	10000c1e 	bne	r2,zero,8012118 <altera_avalon_lcd_16207_write+0x114>
          (esccount > 0 && !isdigit(c) && c != ';'))
      {
        sp->escape[esccount] = 0;
 80120e8:	e0fff717 	ldw	r3,-36(fp)
 80120ec:	e0bffc17 	ldw	r2,-16(fp)
 80120f0:	1885883a 	add	r2,r3,r2
 80120f4:	10800a04 	addi	r2,r2,40
 80120f8:	10000005 	stb	zero,0(r2)

        lcd_handle_escape(sp, c);
 80120fc:	e17ff807 	ldb	r5,-32(fp)
 8012100:	e13ffc17 	ldw	r4,-16(fp)
 8012104:	8011d340 	call	8011d34 <lcd_handle_escape>

        sp->esccount = -1;
 8012108:	e0fffc17 	ldw	r3,-16(fp)
 801210c:	00bfffc4 	movi	r2,-1
 8012110:	18800905 	stb	r2,36(r3)

      /* Single character escape sequences can end with any character
       * Multi character escape sequences start with '[' and contain
       * digits and semicolons before terminating
       */
      if ((esccount == 0 && c != '[') ||
 8012114:	00006c06 	br	80122c8 <altera_avalon_lcd_16207_write+0x2c4>

        lcd_handle_escape(sp, c);

        sp->esccount = -1;
      }
      else if (sp->esccount < sizeof(sp->escape)-1)
 8012118:	e0bffc17 	ldw	r2,-16(fp)
 801211c:	10800903 	ldbu	r2,36(r2)
 8012120:	10803fcc 	andi	r2,r2,255
 8012124:	108001e8 	cmpgeui	r2,r2,7
 8012128:	1000671e 	bne	r2,zero,80122c8 <altera_avalon_lcd_16207_write+0x2c4>
      {
        sp->escape[esccount] = c;
 801212c:	e0fff717 	ldw	r3,-36(fp)
 8012130:	e0bffc17 	ldw	r2,-16(fp)
 8012134:	1885883a 	add	r2,r3,r2
 8012138:	10c00a04 	addi	r3,r2,40
 801213c:	e0bff803 	ldbu	r2,-32(fp)
 8012140:	18800005 	stb	r2,0(r3)
        sp->esccount++;
 8012144:	e0bffc17 	ldw	r2,-16(fp)
 8012148:	10800903 	ldbu	r2,36(r2)
 801214c:	10800044 	addi	r2,r2,1
 8012150:	1007883a 	mov	r3,r2
 8012154:	e0bffc17 	ldw	r2,-16(fp)
 8012158:	10c00905 	stb	r3,36(r2)
 801215c:	00005a06 	br	80122c8 <altera_avalon_lcd_16207_write+0x2c4>
      }
    }
    else if (c == 27) /* ESC */
 8012160:	e0bff807 	ldb	r2,-32(fp)
 8012164:	108006d8 	cmpnei	r2,r2,27
 8012168:	1000031e 	bne	r2,zero,8012178 <altera_avalon_lcd_16207_write+0x174>
    {
      sp->esccount = 0;
 801216c:	e0bffc17 	ldw	r2,-16(fp)
 8012170:	10000905 	stb	zero,36(r2)
 8012174:	00005406 	br	80122c8 <altera_avalon_lcd_16207_write+0x2c4>
    }
    else if (c == '\r')
 8012178:	e0bff807 	ldb	r2,-32(fp)
 801217c:	10800358 	cmpnei	r2,r2,13
 8012180:	1000031e 	bne	r2,zero,8012190 <altera_avalon_lcd_16207_write+0x18c>
    {
      sp->x = 0;
 8012184:	e0bffc17 	ldw	r2,-16(fp)
 8012188:	10000845 	stb	zero,33(r2)
 801218c:	00004e06 	br	80122c8 <altera_avalon_lcd_16207_write+0x2c4>
    }
    else if (c == '\n')
 8012190:	e0bff807 	ldb	r2,-32(fp)
 8012194:	10800298 	cmpnei	r2,r2,10
 8012198:	1000101e 	bne	r2,zero,80121dc <altera_avalon_lcd_16207_write+0x1d8>
    {
      sp->x = 0;
 801219c:	e0bffc17 	ldw	r2,-16(fp)
 80121a0:	10000845 	stb	zero,33(r2)
      sp->y++;
 80121a4:	e0bffc17 	ldw	r2,-16(fp)
 80121a8:	10800883 	ldbu	r2,34(r2)
 80121ac:	10800044 	addi	r2,r2,1
 80121b0:	1007883a 	mov	r3,r2
 80121b4:	e0bffc17 	ldw	r2,-16(fp)
 80121b8:	10c00885 	stb	r3,34(r2)

      /* Let the cursor sit at X=0, Y=HEIGHT without scrolling so the user
       * can print two lines of data without losing one.
       */
      if (sp->y > ALT_LCD_HEIGHT)
 80121bc:	e0bffc17 	ldw	r2,-16(fp)
 80121c0:	10800883 	ldbu	r2,34(r2)
 80121c4:	10803fcc 	andi	r2,r2,255
 80121c8:	108000f0 	cmpltui	r2,r2,3
 80121cc:	10003e1e 	bne	r2,zero,80122c8 <altera_avalon_lcd_16207_write+0x2c4>
        lcd_scroll_up(sp);
 80121d0:	e13ffc17 	ldw	r4,-16(fp)
 80121d4:	8011c6c0 	call	8011c6c <lcd_scroll_up>
 80121d8:	00003b06 	br	80122c8 <altera_avalon_lcd_16207_write+0x2c4>
    }
    else if (c == '\b')
 80121dc:	e0bff807 	ldb	r2,-32(fp)
 80121e0:	10800218 	cmpnei	r2,r2,8
 80121e4:	10000c1e 	bne	r2,zero,8012218 <altera_avalon_lcd_16207_write+0x214>
    {
      if (sp->x > 0)
 80121e8:	e0bffc17 	ldw	r2,-16(fp)
 80121ec:	10800843 	ldbu	r2,33(r2)
 80121f0:	10803fcc 	andi	r2,r2,255
 80121f4:	1005003a 	cmpeq	r2,r2,zero
 80121f8:	1000331e 	bne	r2,zero,80122c8 <altera_avalon_lcd_16207_write+0x2c4>
        sp->x--;
 80121fc:	e0bffc17 	ldw	r2,-16(fp)
 8012200:	10800843 	ldbu	r2,33(r2)
 8012204:	10bfffc4 	addi	r2,r2,-1
 8012208:	1007883a 	mov	r3,r2
 801220c:	e0bffc17 	ldw	r2,-16(fp)
 8012210:	10c00845 	stb	r3,33(r2)
 8012214:	00002c06 	br	80122c8 <altera_avalon_lcd_16207_write+0x2c4>
    }
    else if (isprint(c))
 8012218:	e0bff807 	ldb	r2,-32(fp)
 801221c:	1007883a 	mov	r3,r2
 8012220:	008200b4 	movhi	r2,2050
 8012224:	10a97004 	addi	r2,r2,-23104
 8012228:	10800017 	ldw	r2,0(r2)
 801222c:	1885883a 	add	r2,r3,r2
 8012230:	10800003 	ldbu	r2,0(r2)
 8012234:	10803fcc 	andi	r2,r2,255
 8012238:	1080201c 	xori	r2,r2,128
 801223c:	10bfe004 	addi	r2,r2,-128
 8012240:	108025cc 	andi	r2,r2,151
 8012244:	1005003a 	cmpeq	r2,r2,zero
 8012248:	10001f1e 	bne	r2,zero,80122c8 <altera_avalon_lcd_16207_write+0x2c4>
    {
      /* If we didn't scroll on the last linefeed then we might need to do
       * it now. */
      if (sp->y >= ALT_LCD_HEIGHT)
 801224c:	e0bffc17 	ldw	r2,-16(fp)
 8012250:	10800883 	ldbu	r2,34(r2)
 8012254:	10803fcc 	andi	r2,r2,255
 8012258:	108000b0 	cmpltui	r2,r2,2
 801225c:	1000021e 	bne	r2,zero,8012268 <altera_avalon_lcd_16207_write+0x264>
        lcd_scroll_up(sp);
 8012260:	e13ffc17 	ldw	r4,-16(fp)
 8012264:	8011c6c0 	call	8011c6c <lcd_scroll_up>

      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
 8012268:	e0bffc17 	ldw	r2,-16(fp)
 801226c:	10800843 	ldbu	r2,33(r2)
 8012270:	10803fcc 	andi	r2,r2,255
 8012274:	10801428 	cmpgeui	r2,r2,80
 8012278:	10000d1e 	bne	r2,zero,80122b0 <altera_avalon_lcd_16207_write+0x2ac>
        sp->line[sp->y].data[sp->x] = c;
 801227c:	e0bffc17 	ldw	r2,-16(fp)
 8012280:	10800883 	ldbu	r2,34(r2)
 8012284:	11003fcc 	andi	r4,r2,255
 8012288:	e0bffc17 	ldw	r2,-16(fp)
 801228c:	10800843 	ldbu	r2,33(r2)
 8012290:	11403fcc 	andi	r5,r2,255
 8012294:	e0fffc17 	ldw	r3,-16(fp)
 8012298:	208018e4 	muli	r2,r4,99
 801229c:	10c5883a 	add	r2,r2,r3
 80122a0:	1145883a 	add	r2,r2,r5
 80122a4:	10c01004 	addi	r3,r2,64
 80122a8:	e0bff803 	ldbu	r2,-32(fp)
 80122ac:	18800005 	stb	r2,0(r3)

      sp->x++;
 80122b0:	e0bffc17 	ldw	r2,-16(fp)
 80122b4:	10800843 	ldbu	r2,33(r2)
 80122b8:	10800044 	addi	r2,r2,1
 80122bc:	1007883a 	mov	r3,r2
 80122c0:	e0bffc17 	ldw	r2,-16(fp)
 80122c4:	10c00845 	stb	r3,33(r2)

  /* Tell the routine which is called off the timer interrupt that the
   * foreground routines are active so it must not repaint the display. */
  sp->active = 1;

  for ( ; ptr < end ; ptr++)
 80122c8:	e0bffd17 	ldw	r2,-12(fp)
 80122cc:	10800044 	addi	r2,r2,1
 80122d0:	e0bffd15 	stw	r2,-12(fp)
 80122d4:	e0fffd17 	ldw	r3,-12(fp)
 80122d8:	e0bffb17 	ldw	r2,-20(fp)
 80122dc:	18bf5b36 	bltu	r3,r2,801204c <altera_avalon_lcd_16207_write+0x48>
      sp->x++;
    }
  }

  /* Recalculate the scrolling parameters */
  widthmax = ALT_LCD_WIDTH;
 80122e0:	00800404 	movi	r2,16
 80122e4:	e0bff915 	stw	r2,-28(fp)
  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
 80122e8:	e03ffa15 	stw	zero,-24(fp)
 80122ec:	00003606 	br	80123c8 <altera_avalon_lcd_16207_write+0x3c4>
  {
    int width;
    for (width = ALT_LCD_VIRTUAL_WIDTH ; width > 0 ; width--)
 80122f0:	00801404 	movi	r2,80
 80122f4:	e0bff615 	stw	r2,-40(fp)
 80122f8:	00001106 	br	8012340 <altera_avalon_lcd_16207_write+0x33c>
      if (sp->line[y].data[width-1] != ' ')
 80122fc:	e13ffa17 	ldw	r4,-24(fp)
 8012300:	e0bff617 	ldw	r2,-40(fp)
 8012304:	117fffc4 	addi	r5,r2,-1
 8012308:	e0fffc17 	ldw	r3,-16(fp)
 801230c:	208018e4 	muli	r2,r4,99
 8012310:	10c5883a 	add	r2,r2,r3
 8012314:	1145883a 	add	r2,r2,r5
 8012318:	10801004 	addi	r2,r2,64
 801231c:	10800003 	ldbu	r2,0(r2)
 8012320:	10803fcc 	andi	r2,r2,255
 8012324:	1080201c 	xori	r2,r2,128
 8012328:	10bfe004 	addi	r2,r2,-128
 801232c:	10800818 	cmpnei	r2,r2,32
 8012330:	1000061e 	bne	r2,zero,801234c <altera_avalon_lcd_16207_write+0x348>
  /* Recalculate the scrolling parameters */
  widthmax = ALT_LCD_WIDTH;
  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  {
    int width;
    for (width = ALT_LCD_VIRTUAL_WIDTH ; width > 0 ; width--)
 8012334:	e0bff617 	ldw	r2,-40(fp)
 8012338:	10bfffc4 	addi	r2,r2,-1
 801233c:	e0bff615 	stw	r2,-40(fp)
 8012340:	e0bff617 	ldw	r2,-40(fp)
 8012344:	10800048 	cmpgei	r2,r2,1
 8012348:	103fec1e 	bne	r2,zero,80122fc <altera_avalon_lcd_16207_write+0x2f8>

    /* The minimum width is the size of the LCD panel.  If the real width
     * is long enough to require scrolling then add an extra space so the
     * end of the message doesn't run into the beginning of it.
     */
    if (width <= ALT_LCD_WIDTH)
 801234c:	e0bff617 	ldw	r2,-40(fp)
 8012350:	10800448 	cmpgei	r2,r2,17
 8012354:	1000031e 	bne	r2,zero,8012364 <altera_avalon_lcd_16207_write+0x360>
      width = ALT_LCD_WIDTH;
 8012358:	00800404 	movi	r2,16
 801235c:	e0bff615 	stw	r2,-40(fp)
 8012360:	00000306 	br	8012370 <altera_avalon_lcd_16207_write+0x36c>
    else
      width++;
 8012364:	e0bff617 	ldw	r2,-40(fp)
 8012368:	10800044 	addi	r2,r2,1
 801236c:	e0bff615 	stw	r2,-40(fp)

    sp->line[y].width = width;
 8012370:	e13ffa17 	ldw	r4,-24(fp)
 8012374:	e0bff617 	ldw	r2,-40(fp)
 8012378:	100b883a 	mov	r5,r2
 801237c:	e0fffc17 	ldw	r3,-16(fp)
 8012380:	208018e4 	muli	r2,r4,99
 8012384:	10c5883a 	add	r2,r2,r3
 8012388:	10802404 	addi	r2,r2,144
 801238c:	11400045 	stb	r5,1(r2)
    if (widthmax < width)
 8012390:	e0fff917 	ldw	r3,-28(fp)
 8012394:	e0bff617 	ldw	r2,-40(fp)
 8012398:	1880020e 	bge	r3,r2,80123a4 <altera_avalon_lcd_16207_write+0x3a0>
      widthmax = width;
 801239c:	e0bff617 	ldw	r2,-40(fp)
 80123a0:	e0bff915 	stw	r2,-28(fp)
    sp->line[y].speed = 0; /* By default lines don't scroll */
 80123a4:	e0bffa17 	ldw	r2,-24(fp)
 80123a8:	e0fffc17 	ldw	r3,-16(fp)
 80123ac:	108018e4 	muli	r2,r2,99
 80123b0:	10c5883a 	add	r2,r2,r3
 80123b4:	10802404 	addi	r2,r2,144
 80123b8:	10000085 	stb	zero,2(r2)
    }
  }

  /* Recalculate the scrolling parameters */
  widthmax = ALT_LCD_WIDTH;
  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
 80123bc:	e0bffa17 	ldw	r2,-24(fp)
 80123c0:	10800044 	addi	r2,r2,1
 80123c4:	e0bffa15 	stw	r2,-24(fp)
 80123c8:	e0bffa17 	ldw	r2,-24(fp)
 80123cc:	10800090 	cmplti	r2,r2,2
 80123d0:	103fc71e 	bne	r2,zero,80122f0 <altera_avalon_lcd_16207_write+0x2ec>
    if (widthmax < width)
      widthmax = width;
    sp->line[y].speed = 0; /* By default lines don't scroll */
  }

  if (widthmax <= ALT_LCD_WIDTH)
 80123d4:	e0bff917 	ldw	r2,-28(fp)
 80123d8:	10800448 	cmpgei	r2,r2,17
 80123dc:	1000031e 	bne	r2,zero,80123ec <altera_avalon_lcd_16207_write+0x3e8>
    sp->scrollmax = 0;
 80123e0:	e0bffc17 	ldw	r2,-16(fp)
 80123e4:	10000985 	stb	zero,38(r2)
 80123e8:	00002d06 	br	80124a0 <altera_avalon_lcd_16207_write+0x49c>
  else
  {
    widthmax *= 2;
 80123ec:	e0bff917 	ldw	r2,-28(fp)
 80123f0:	1085883a 	add	r2,r2,r2
 80123f4:	e0bff915 	stw	r2,-28(fp)
    sp->scrollmax = widthmax;
 80123f8:	e0bff917 	ldw	r2,-28(fp)
 80123fc:	1007883a 	mov	r3,r2
 8012400:	e0bffc17 	ldw	r2,-16(fp)
 8012404:	10c00985 	stb	r3,38(r2)

    /* Now calculate how fast each of the other lines should go */
    for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
 8012408:	e03ffa15 	stw	zero,-24(fp)
 801240c:	00002106 	br	8012494 <altera_avalon_lcd_16207_write+0x490>
      if (sp->line[y].width > ALT_LCD_WIDTH)
 8012410:	e0bffa17 	ldw	r2,-24(fp)
 8012414:	e0fffc17 	ldw	r3,-16(fp)
 8012418:	108018e4 	muli	r2,r2,99
 801241c:	10c5883a 	add	r2,r2,r3
 8012420:	10802404 	addi	r2,r2,144
 8012424:	10800043 	ldbu	r2,1(r2)
 8012428:	10803fcc 	andi	r2,r2,255
 801242c:	1080201c 	xori	r2,r2,128
 8012430:	10bfe004 	addi	r2,r2,-128
 8012434:	10800450 	cmplti	r2,r2,17
 8012438:	1000131e 	bne	r2,zero,8012488 <altera_avalon_lcd_16207_write+0x484>
         */
#if 1
        /* This option makes all the lines scroll round at different speeds
         * which are chosen so that all the scrolls finish at the same time.
         */
        sp->line[y].speed = 256 * sp->line[y].width / widthmax;
 801243c:	e43ffa17 	ldw	r16,-24(fp)
 8012440:	e0bffa17 	ldw	r2,-24(fp)
 8012444:	e0fffc17 	ldw	r3,-16(fp)
 8012448:	108018e4 	muli	r2,r2,99
 801244c:	10c5883a 	add	r2,r2,r3
 8012450:	10802404 	addi	r2,r2,144
 8012454:	10800043 	ldbu	r2,1(r2)
 8012458:	10803fcc 	andi	r2,r2,255
 801245c:	1080201c 	xori	r2,r2,128
 8012460:	10bfe004 	addi	r2,r2,-128
 8012464:	1008923a 	slli	r4,r2,8
 8012468:	e17ff917 	ldw	r5,-28(fp)
 801246c:	8002f200 	call	8002f20 <__divsi3>
 8012470:	1009883a 	mov	r4,r2
 8012474:	e0fffc17 	ldw	r3,-16(fp)
 8012478:	808018e4 	muli	r2,r16,99
 801247c:	10c5883a 	add	r2,r2,r3
 8012480:	10802404 	addi	r2,r2,144
 8012484:	11000085 	stb	r4,2(r2)
  {
    widthmax *= 2;
    sp->scrollmax = widthmax;

    /* Now calculate how fast each of the other lines should go */
    for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
 8012488:	e0bffa17 	ldw	r2,-24(fp)
 801248c:	10800044 	addi	r2,r2,1
 8012490:	e0bffa15 	stw	r2,-24(fp)
 8012494:	e0bffa17 	ldw	r2,-24(fp)
 8012498:	10800090 	cmplti	r2,r2,2
 801249c:	103fdc1e 	bne	r2,zero,8012410 <altera_avalon_lcd_16207_write+0x40c>
   * (because active was set when the timer interrupt occurred).  If there
   * has been a missed repaint then paint again.  And again.  etc.
   */
  for ( ; ; )
  {
    int old_scrollpos = sp->scrollpos;
 80124a0:	e0bffc17 	ldw	r2,-16(fp)
 80124a4:	10800943 	ldbu	r2,37(r2)
 80124a8:	10803fcc 	andi	r2,r2,255
 80124ac:	1080201c 	xori	r2,r2,128
 80124b0:	10bfe004 	addi	r2,r2,-128
 80124b4:	e0bff515 	stw	r2,-44(fp)

    lcd_repaint_screen(sp);
 80124b8:	e13ffc17 	ldw	r4,-16(fp)
 80124bc:	8011a800 	call	8011a80 <lcd_repaint_screen>

    /* Let the timer routines repaint the display again */
    sp->active = 0;
 80124c0:	e0bffc17 	ldw	r2,-16(fp)
 80124c4:	100009c5 	stb	zero,39(r2)

    /* Have the timer routines tried to scroll while we were painting?
     * If not then we can exit */
    if (sp->scrollpos == old_scrollpos)
 80124c8:	e0bffc17 	ldw	r2,-16(fp)
 80124cc:	10800943 	ldbu	r2,37(r2)
 80124d0:	10c03fcc 	andi	r3,r2,255
 80124d4:	18c0201c 	xori	r3,r3,128
 80124d8:	18ffe004 	addi	r3,r3,-128
 80124dc:	e0bff517 	ldw	r2,-44(fp)
 80124e0:	18800426 	beq	r3,r2,80124f4 <altera_avalon_lcd_16207_write+0x4f0>
      break;

    /* We need to repaint again since the display scrolled while we were
     * painting last time */
    sp->active = 1;
 80124e4:	e0fffc17 	ldw	r3,-16(fp)
 80124e8:	00800044 	movi	r2,1
 80124ec:	188009c5 	stb	r2,39(r3)
  }
 80124f0:	003feb06 	br	80124a0 <altera_avalon_lcd_16207_write+0x49c>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->write_lock);

  return len;
 80124f4:	e0bffe17 	ldw	r2,-8(fp)
}
 80124f8:	e037883a 	mov	sp,fp
 80124fc:	dfc00217 	ldw	ra,8(sp)
 8012500:	df000117 	ldw	fp,4(sp)
 8012504:	dc000017 	ldw	r16,0(sp)
 8012508:	dec00304 	addi	sp,sp,12
 801250c:	f800283a 	ret

08012510 <alt_lcd_16207_timeout>:
/*
 * Timeout routine is called every second
 */

static alt_u32 alt_lcd_16207_timeout(void* context) 
{
 8012510:	defffc04 	addi	sp,sp,-16
 8012514:	dfc00315 	stw	ra,12(sp)
 8012518:	df000215 	stw	fp,8(sp)
 801251c:	df000204 	addi	fp,sp,8
 8012520:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_lcd_16207_state* sp = (altera_avalon_lcd_16207_state*)context;
 8012524:	e0bfff17 	ldw	r2,-4(fp)
 8012528:	e0bffe15 	stw	r2,-8(fp)

  /* Update the scrolling position */
  if (sp->scrollpos + 1 >= sp->scrollmax)
 801252c:	e0bffe17 	ldw	r2,-8(fp)
 8012530:	10800943 	ldbu	r2,37(r2)
 8012534:	10803fcc 	andi	r2,r2,255
 8012538:	1080201c 	xori	r2,r2,128
 801253c:	10bfe004 	addi	r2,r2,-128
 8012540:	10c00044 	addi	r3,r2,1
 8012544:	e0bffe17 	ldw	r2,-8(fp)
 8012548:	10800983 	ldbu	r2,38(r2)
 801254c:	10803fcc 	andi	r2,r2,255
 8012550:	1080201c 	xori	r2,r2,128
 8012554:	10bfe004 	addi	r2,r2,-128
 8012558:	18800316 	blt	r3,r2,8012568 <alt_lcd_16207_timeout+0x58>
    sp->scrollpos = 0;
 801255c:	e0bffe17 	ldw	r2,-8(fp)
 8012560:	10000945 	stb	zero,37(r2)
 8012564:	00000606 	br	8012580 <alt_lcd_16207_timeout+0x70>
  else
    sp->scrollpos = sp->scrollpos + 1;
 8012568:	e0bffe17 	ldw	r2,-8(fp)
 801256c:	10800943 	ldbu	r2,37(r2)
 8012570:	10800044 	addi	r2,r2,1
 8012574:	1007883a 	mov	r3,r2
 8012578:	e0bffe17 	ldw	r2,-8(fp)
 801257c:	10c00945 	stb	r3,37(r2)

  /* Repaint the panel unless the foreground will do it again soon */
  if (sp->scrollmax > 0 && !sp->active)
 8012580:	e0bffe17 	ldw	r2,-8(fp)
 8012584:	10800983 	ldbu	r2,38(r2)
 8012588:	10803fcc 	andi	r2,r2,255
 801258c:	1080201c 	xori	r2,r2,128
 8012590:	10bfe004 	addi	r2,r2,-128
 8012594:	10800050 	cmplti	r2,r2,1
 8012598:	1000091e 	bne	r2,zero,80125c0 <alt_lcd_16207_timeout+0xb0>
 801259c:	e0bffe17 	ldw	r2,-8(fp)
 80125a0:	108009c3 	ldbu	r2,39(r2)
 80125a4:	10803fcc 	andi	r2,r2,255
 80125a8:	1080201c 	xori	r2,r2,128
 80125ac:	10bfe004 	addi	r2,r2,-128
 80125b0:	1004c03a 	cmpne	r2,r2,zero
 80125b4:	1000021e 	bne	r2,zero,80125c0 <alt_lcd_16207_timeout+0xb0>
    lcd_repaint_screen(sp);
 80125b8:	e13ffe17 	ldw	r4,-8(fp)
 80125bc:	8011a800 	call	8011a80 <lcd_repaint_screen>

  return sp->period;
 80125c0:	e0bffe17 	ldw	r2,-8(fp)
 80125c4:	10800717 	ldw	r2,28(r2)
}
 80125c8:	e037883a 	mov	sp,fp
 80125cc:	dfc00117 	ldw	ra,4(sp)
 80125d0:	df000017 	ldw	fp,0(sp)
 80125d4:	dec00204 	addi	sp,sp,8
 80125d8:	f800283a 	ret

080125dc <altera_avalon_lcd_16207_init>:

/*
 * Called at boot time to initialise the LCD driver
 */
void altera_avalon_lcd_16207_init(altera_avalon_lcd_16207_state* sp)
{
 80125dc:	defffc04 	addi	sp,sp,-16
 80125e0:	dfc00315 	stw	ra,12(sp)
 80125e4:	df000215 	stw	fp,8(sp)
 80125e8:	df000204 	addi	fp,sp,8
 80125ec:	e13fff15 	stw	r4,-4(fp)
  unsigned int base = sp->base;
 80125f0:	e0bfff17 	ldw	r2,-4(fp)
 80125f4:	10800017 	ldw	r2,0(r2)
 80125f8:	e0bffe15 	stw	r2,-8(fp)

  /* Mark the device as functional */
  sp->broken = 0;
 80125fc:	e0bfff17 	ldw	r2,-4(fp)
 8012600:	10000805 	stb	zero,32(r2)
   * the BUSY bit in the status register doesn't work until the display
   * has been reset three times.
   */

  /* Wait for 15 ms then reset */
  usleep(15000);
 8012604:	010ea604 	movi	r4,15000
 8012608:	80162980 	call	8016298 <usleep>
  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT);
 801260c:	e0bffe17 	ldw	r2,-8(fp)
 8012610:	1007883a 	mov	r3,r2
 8012614:	00800c04 	movi	r2,48
 8012618:	18800035 	stwio	r2,0(r3)

  /* Wait for another 4.1ms and reset again */
  usleep(4100);  
 801261c:	01040104 	movi	r4,4100
 8012620:	80162980 	call	8016298 <usleep>
  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT);
 8012624:	e0bffe17 	ldw	r2,-8(fp)
 8012628:	1007883a 	mov	r3,r2
 801262c:	00800c04 	movi	r2,48
 8012630:	18800035 	stwio	r2,0(r3)

  /* Wait a further 1 ms and reset a third time */
  usleep(1000);
 8012634:	0100fa04 	movi	r4,1000
 8012638:	80162980 	call	8016298 <usleep>
  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT);
 801263c:	e0bffe17 	ldw	r2,-8(fp)
 8012640:	1007883a 	mov	r3,r2
 8012644:	00800c04 	movi	r2,48
 8012648:	18800035 	stwio	r2,0(r3)

  /* Setup interface parameters: 8 bit bus, 2 rows, 5x7 font */
  lcd_write_command(sp, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT | LCD_CMD_TWO_LINE);
 801264c:	e13fff17 	ldw	r4,-4(fp)
 8012650:	01400e04 	movi	r5,56
 8012654:	80118300 	call	8011830 <lcd_write_command>
  
  /* Turn display off */
  lcd_write_command(sp, LCD_CMD_ONOFF);
 8012658:	e13fff17 	ldw	r4,-4(fp)
 801265c:	01400204 	movi	r5,8
 8012660:	80118300 	call	8011830 <lcd_write_command>

  /* Clear display */
  lcd_clear_screen(sp);
 8012664:	e13fff17 	ldw	r4,-4(fp)
 8012668:	80119bc0 	call	80119bc <lcd_clear_screen>
  
  /* Set mode: increment after writing, don't shift display */
  lcd_write_command(sp, LCD_CMD_MODES | LCD_CMD_MODE_INC);
 801266c:	e13fff17 	ldw	r4,-4(fp)
 8012670:	01400184 	movi	r5,6
 8012674:	80118300 	call	8011830 <lcd_write_command>

  /* Turn display on */
  lcd_write_command(sp, LCD_CMD_ONOFF | LCD_CMD_ENABLE_DISP);
 8012678:	e13fff17 	ldw	r4,-4(fp)
 801267c:	01400304 	movi	r5,12
 8012680:	80118300 	call	8011830 <lcd_write_command>

  sp->esccount = -1;
 8012684:	e0ffff17 	ldw	r3,-4(fp)
 8012688:	00bfffc4 	movi	r2,-1
 801268c:	18800905 	stb	r2,36(r3)
  memset(sp->escape, 0, sizeof(sp->escape));
 8012690:	e0bfff17 	ldw	r2,-4(fp)
 8012694:	11000a04 	addi	r4,r2,40
 8012698:	000b883a 	mov	r5,zero
 801269c:	01800204 	movi	r6,8
 80126a0:	800a3180 	call	800a318 <memset>

  sp->scrollpos = 0;
 80126a4:	e0bfff17 	ldw	r2,-4(fp)
 80126a8:	10000945 	stb	zero,37(r2)
  sp->scrollmax = 0;
 80126ac:	e0bfff17 	ldw	r2,-4(fp)
 80126b0:	10000985 	stb	zero,38(r2)
  sp->active = 0;
 80126b4:	e0bfff17 	ldw	r2,-4(fp)
 80126b8:	100009c5 	stb	zero,39(r2)
 80126bc:	008200b4 	movhi	r2,2050
 80126c0:	10b13404 	addi	r2,r2,-15152
 80126c4:	10800017 	ldw	r2,0(r2)
 80126c8:	1009883a 	mov	r4,r2

  sp->period = alt_ticks_per_second() / 10; /* Call every 100ms */
 80126cc:	01400284 	movi	r5,10
 80126d0:	8002fe00 	call	8002fe0 <__udivsi3>
 80126d4:	1007883a 	mov	r3,r2
 80126d8:	e0bfff17 	ldw	r2,-4(fp)
 80126dc:	10c00715 	stw	r3,28(r2)

  alt_alarm_start(&sp->alarm, sp->period, &alt_lcd_16207_timeout, sp);
 80126e0:	e0bfff17 	ldw	r2,-4(fp)
 80126e4:	11000104 	addi	r4,r2,4
 80126e8:	e0bfff17 	ldw	r2,-4(fp)
 80126ec:	10800717 	ldw	r2,28(r2)
 80126f0:	100b883a 	mov	r5,r2
 80126f4:	01820074 	movhi	r6,2049
 80126f8:	31894404 	addi	r6,r6,9488
 80126fc:	e1ffff17 	ldw	r7,-4(fp)
 8012700:	80155040 	call	8015504 <alt_alarm_start>
}
 8012704:	e037883a 	mov	sp,fp
 8012708:	dfc00117 	ldw	ra,4(sp)
 801270c:	df000017 	ldw	fp,0(sp)
 8012710:	dec00204 	addi	sp,sp,8
 8012714:	f800283a 	ret

08012718 <altera_avalon_lcd_16207_write_fd>:
extern int altera_avalon_lcd_16207_write(altera_avalon_lcd_16207_state* sp,
  const char* ptr, int count, int flags);

int 
altera_avalon_lcd_16207_write_fd(alt_fd* fd, const char* buffer, int space)
{
 8012718:	defffa04 	addi	sp,sp,-24
 801271c:	dfc00515 	stw	ra,20(sp)
 8012720:	df000415 	stw	fp,16(sp)
 8012724:	df000404 	addi	fp,sp,16
 8012728:	e13ffd15 	stw	r4,-12(fp)
 801272c:	e17ffe15 	stw	r5,-8(fp)
 8012730:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_lcd_16207_dev* dev = (altera_avalon_lcd_16207_dev*) fd->dev; 
 8012734:	e0bffd17 	ldw	r2,-12(fp)
 8012738:	10800017 	ldw	r2,0(r2)
 801273c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_lcd_16207_write(&dev->state, buffer, space,
 8012740:	e0bffc17 	ldw	r2,-16(fp)
 8012744:	11000a04 	addi	r4,r2,40
 8012748:	e0bffd17 	ldw	r2,-12(fp)
 801274c:	11c00217 	ldw	r7,8(r2)
 8012750:	e17ffe17 	ldw	r5,-8(fp)
 8012754:	e1bfff17 	ldw	r6,-4(fp)
 8012758:	80120040 	call	8012004 <altera_avalon_lcd_16207_write>
      fd->fd_flags);
}
 801275c:	e037883a 	mov	sp,fp
 8012760:	dfc00117 	ldw	ra,4(sp)
 8012764:	df000017 	ldw	fp,0(sp)
 8012768:	dec00204 	addi	sp,sp,8
 801276c:	f800283a 	ret

08012770 <alt_avalon_mailbox_init>:

/*
 * Register a Mutex device
 */
int alt_avalon_mailbox_init (alt_mailbox_dev* dev)
{
 8012770:	defffa04 	addi	sp,sp,-24
 8012774:	dfc00515 	stw	ra,20(sp)
 8012778:	df000415 	stw	fp,16(sp)
 801277c:	df000404 	addi	fp,sp,16
 8012780:	e13fff15 	stw	r4,-4(fp)
  int ret_code;
  alt_mutex_dev* write_mutex, *read_mutex;
  extern alt_llist alt_mailbox_list;

  ret_code = alt_avalon_mutex_reg( &dev->write_mutex );
 8012784:	e0bfff17 	ldw	r2,-4(fp)
 8012788:	11000704 	addi	r4,r2,28
 801278c:	80128c80 	call	80128c8 <alt_avalon_mutex_reg>
 8012790:	e0bffe15 	stw	r2,-8(fp)

  if (!ret_code)
 8012794:	e0bffe17 	ldw	r2,-8(fp)
 8012798:	1004c03a 	cmpne	r2,r2,zero
 801279c:	1000041e 	bne	r2,zero,80127b0 <alt_avalon_mailbox_init+0x40>
  {
    ret_code = alt_avalon_mutex_reg( &dev->read_mutex );
 80127a0:	e0bfff17 	ldw	r2,-4(fp)
 80127a4:	11000b04 	addi	r4,r2,44
 80127a8:	80128c80 	call	80128c8 <alt_avalon_mutex_reg>
 80127ac:	e0bffe15 	stw	r2,-8(fp)
  }

  if (!ret_code)
 80127b0:	e0bffe17 	ldw	r2,-8(fp)
 80127b4:	1004c03a 	cmpne	r2,r2,zero
 80127b8:	1000041e 	bne	r2,zero,80127cc <alt_avalon_mailbox_init+0x5c>
  {
    ret_code = alt_dev_llist_insert((alt_dev_llist*) dev, &alt_mailbox_list);
 80127bc:	e13fff17 	ldw	r4,-4(fp)
 80127c0:	d1601204 	addi	r5,gp,-32696
 80127c4:	80157140 	call	8015714 <alt_dev_llist_insert>
 80127c8:	e0bffe15 	stw	r2,-8(fp)
  }

  if (!ret_code)
 80127cc:	e0bffe17 	ldw	r2,-8(fp)
 80127d0:	1004c03a 	cmpne	r2,r2,zero
 80127d4:	1000361e 	bne	r2,zero,80128b0 <alt_avalon_mailbox_init+0x140>
  {
    write_mutex = altera_avalon_mutex_open(dev->write_mutex.name);
 80127d8:	e0bfff17 	ldw	r2,-4(fp)
 80127dc:	11000917 	ldw	r4,36(r2)
 80127e0:	8012d140 	call	8012d14 <altera_avalon_mutex_open>
 80127e4:	e0bffd15 	stw	r2,-12(fp)
    if (write_mutex)
 80127e8:	e0bffd17 	ldw	r2,-12(fp)
 80127ec:	1005003a 	cmpeq	r2,r2,zero
 80127f0:	10002f1e 	bne	r2,zero,80128b0 <alt_avalon_mailbox_init+0x140>
    {
      read_mutex = altera_avalon_mutex_open(dev->read_mutex.name);
 80127f4:	e0bfff17 	ldw	r2,-4(fp)
 80127f8:	11000d17 	ldw	r4,52(r2)
 80127fc:	8012d140 	call	8012d14 <altera_avalon_mutex_open>
 8012800:	e0bffc15 	stw	r2,-16(fp)
      if (read_mutex)
 8012804:	e0bffc17 	ldw	r2,-16(fp)
 8012808:	1005003a 	cmpeq	r2,r2,zero
 801280c:	1000281e 	bne	r2,zero,80128b0 <alt_avalon_mailbox_init+0x140>
      {
        while (altera_avalon_mutex_first_lock(write_mutex))
 8012810:	00000f06 	br	8012850 <alt_avalon_mailbox_init+0xe0>
        {
          if (!altera_avalon_mutex_trylock(write_mutex, 1))
 8012814:	e13ffd17 	ldw	r4,-12(fp)
 8012818:	01400044 	movi	r5,1
 801281c:	8012e2c0 	call	8012e2c <altera_avalon_mutex_trylock>
 8012820:	1004c03a 	cmpne	r2,r2,zero
 8012824:	10000a1e 	bne	r2,zero,8012850 <alt_avalon_mailbox_init+0xe0>
          {
            IOWR((alt_u32)(dev->write_ptr), 0,
 8012828:	e0bfff17 	ldw	r2,-4(fp)
 801282c:	10800317 	ldw	r2,12(r2)
 8012830:	1009883a 	mov	r4,r2
 8012834:	e0bfff17 	ldw	r2,-4(fp)
 8012838:	10800517 	ldw	r2,20(r2)
 801283c:	1007883a 	mov	r3,r2
 8012840:	2005883a 	mov	r2,r4
 8012844:	10c00035 	stwio	r3,0(r2)
              (alt_u32) dev->mailbox_mem_start_ptr);
            altera_avalon_mutex_unlock(write_mutex);
 8012848:	e13ffd17 	ldw	r4,-12(fp)
 801284c:	8012e6c0 	call	8012e6c <altera_avalon_mutex_unlock>
    if (write_mutex)
    {
      read_mutex = altera_avalon_mutex_open(dev->read_mutex.name);
      if (read_mutex)
      {
        while (altera_avalon_mutex_first_lock(write_mutex))
 8012850:	e13ffd17 	ldw	r4,-12(fp)
 8012854:	8012f440 	call	8012f44 <altera_avalon_mutex_first_lock>
 8012858:	1004c03a 	cmpne	r2,r2,zero
 801285c:	103fed1e 	bne	r2,zero,8012814 <alt_avalon_mailbox_init+0xa4>
              (alt_u32) dev->mailbox_mem_start_ptr);
            altera_avalon_mutex_unlock(write_mutex);
          }
        }

        while (altera_avalon_mutex_first_lock(read_mutex))
 8012860:	00000f06 	br	80128a0 <alt_avalon_mailbox_init+0x130>
        {
          if (!altera_avalon_mutex_trylock(read_mutex, 1))
 8012864:	e13ffc17 	ldw	r4,-16(fp)
 8012868:	01400044 	movi	r5,1
 801286c:	8012e2c0 	call	8012e2c <altera_avalon_mutex_trylock>
 8012870:	1004c03a 	cmpne	r2,r2,zero
 8012874:	10000a1e 	bne	r2,zero,80128a0 <alt_avalon_mailbox_init+0x130>
          {
            IOWR((alt_u32)(dev->read_ptr), 0,
 8012878:	e0bfff17 	ldw	r2,-4(fp)
 801287c:	10800417 	ldw	r2,16(r2)
 8012880:	1009883a 	mov	r4,r2
 8012884:	e0bfff17 	ldw	r2,-4(fp)
 8012888:	10800517 	ldw	r2,20(r2)
 801288c:	1007883a 	mov	r3,r2
 8012890:	2005883a 	mov	r2,r4
 8012894:	10c00035 	stwio	r3,0(r2)
              (alt_u32) dev->mailbox_mem_start_ptr);
            altera_avalon_mutex_unlock(read_mutex);
 8012898:	e13ffc17 	ldw	r4,-16(fp)
 801289c:	8012e6c0 	call	8012e6c <altera_avalon_mutex_unlock>
              (alt_u32) dev->mailbox_mem_start_ptr);
            altera_avalon_mutex_unlock(write_mutex);
          }
        }

        while (altera_avalon_mutex_first_lock(read_mutex))
 80128a0:	e13ffc17 	ldw	r4,-16(fp)
 80128a4:	8012f440 	call	8012f44 <altera_avalon_mutex_first_lock>
 80128a8:	1004c03a 	cmpne	r2,r2,zero
 80128ac:	103fed1e 	bne	r2,zero,8012864 <alt_avalon_mailbox_init+0xf4>
          }
        }
      }
    }
  }
  return ret_code;
 80128b0:	e0bffe17 	ldw	r2,-8(fp)
}
 80128b4:	e037883a 	mov	sp,fp
 80128b8:	dfc00117 	ldw	ra,4(sp)
 80128bc:	df000017 	ldw	fp,0(sp)
 80128c0:	dec00204 	addi	sp,sp,8
 80128c4:	f800283a 	ret

080128c8 <alt_avalon_mutex_reg>:
/*
 * Register a Mutex device
 */

static ALT_INLINE int alt_avalon_mutex_reg (alt_mutex_dev* dev)
{
 80128c8:	defffc04 	addi	sp,sp,-16
 80128cc:	dfc00315 	stw	ra,12(sp)
 80128d0:	df000215 	stw	fp,8(sp)
 80128d4:	df000204 	addi	fp,sp,8
 80128d8:	e13fff15 	stw	r4,-4(fp)
 * HAL.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_no_error (void)
{
  return 0;
 80128dc:	0005883a 	mov	r2,zero
  int ret_code;
  extern alt_llist alt_mutex_list;
  ret_code = ALT_SEM_CREATE (&dev->lock, 1);
 80128e0:	e0bffe15 	stw	r2,-8(fp)
  if (!ret_code)
 80128e4:	e0bffe17 	ldw	r2,-8(fp)
 80128e8:	1004c03a 	cmpne	r2,r2,zero
 80128ec:	1000061e 	bne	r2,zero,8012908 <alt_avalon_mutex_reg+0x40>
  {
    ret_code = alt_dev_llist_insert((alt_dev_llist*) dev, &alt_mutex_list);
 80128f0:	e13fff17 	ldw	r4,-4(fp)
 80128f4:	014200b4 	movhi	r5,2050
 80128f8:	29696904 	addi	r5,r5,-23132
 80128fc:	80157140 	call	8015714 <alt_dev_llist_insert>
 8012900:	e0bffe15 	stw	r2,-8(fp)
 8012904:	00000506 	br	801291c <alt_avalon_mutex_reg+0x54>
  }
  else
  {
    ALT_ERRNO = ENOMEM;
 8012908:	80129340 	call	8012934 <alt_get_errno>
 801290c:	00c00304 	movi	r3,12
 8012910:	10c00015 	stw	r3,0(r2)
    ret_code = -ENOMEM;
 8012914:	00bffd04 	movi	r2,-12
 8012918:	e0bffe15 	stw	r2,-8(fp)
  }

  return ret_code;
 801291c:	e0bffe17 	ldw	r2,-8(fp)
}
 8012920:	e037883a 	mov	sp,fp
 8012924:	dfc00117 	ldw	ra,4(sp)
 8012928:	df000017 	ldw	fp,0(sp)
 801292c:	dec00204 	addi	sp,sp,8
 8012930:	f800283a 	ret

08012934 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 8012934:	defffd04 	addi	sp,sp,-12
 8012938:	dfc00215 	stw	ra,8(sp)
 801293c:	df000115 	stw	fp,4(sp)
 8012940:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 8012944:	008200b4 	movhi	r2,2050
 8012948:	10a96404 	addi	r2,r2,-23152
 801294c:	10800017 	ldw	r2,0(r2)
 8012950:	1005003a 	cmpeq	r2,r2,zero
 8012954:	1000061e 	bne	r2,zero,8012970 <alt_get_errno+0x3c>
 8012958:	008200b4 	movhi	r2,2050
 801295c:	10a96404 	addi	r2,r2,-23152
 8012960:	10800017 	ldw	r2,0(r2)
 8012964:	103ee83a 	callr	r2
 8012968:	e0bfff15 	stw	r2,-4(fp)
 801296c:	00000306 	br	801297c <alt_get_errno+0x48>
 8012970:	008200b4 	movhi	r2,2050
 8012974:	10b12904 	addi	r2,r2,-15196
 8012978:	e0bfff15 	stw	r2,-4(fp)
 801297c:	e0bfff17 	ldw	r2,-4(fp)
}
 8012980:	e037883a 	mov	sp,fp
 8012984:	dfc00117 	ldw	ra,4(sp)
 8012988:	df000017 	ldw	fp,0(sp)
 801298c:	dec00204 	addi	sp,sp,8
 8012990:	f800283a 	ret

08012994 <altera_avalon_mailbox_open>:
 * Search the list of registered mailboxes for one with the supplied name.
 *
 * The return value will be NULL on failure, and non-NULL otherwise.
 */
alt_mailbox_dev* altera_avalon_mailbox_open (const char* name)
{
 8012994:	defffc04 	addi	sp,sp,-16
 8012998:	dfc00315 	stw	ra,12(sp)
 801299c:	df000215 	stw	fp,8(sp)
 80129a0:	df000204 	addi	fp,sp,8
 80129a4:	e13fff15 	stw	r4,-4(fp)
  alt_mailbox_dev* dev;

  dev = (alt_mailbox_dev*) alt_find_dev (name, &alt_mailbox_list);
 80129a8:	e13fff17 	ldw	r4,-4(fp)
 80129ac:	d1601204 	addi	r5,gp,-32696
 80129b0:	80158f00 	call	80158f0 <alt_find_dev>
 80129b4:	e0bffe15 	stw	r2,-8(fp)

  if (NULL == dev)
 80129b8:	e0bffe17 	ldw	r2,-8(fp)
 80129bc:	1004c03a 	cmpne	r2,r2,zero
 80129c0:	1000041e 	bne	r2,zero,80129d4 <altera_avalon_mailbox_open+0x40>
  {
    ALT_ERRNO = ENODEV;
 80129c4:	80129340 	call	8012934 <alt_get_errno>
 80129c8:	1007883a 	mov	r3,r2
 80129cc:	008004c4 	movi	r2,19
 80129d0:	18800015 	stw	r2,0(r3)
  }

  return dev;
 80129d4:	e0bffe17 	ldw	r2,-8(fp)

}
 80129d8:	e037883a 	mov	sp,fp
 80129dc:	dfc00117 	ldw	ra,4(sp)
 80129e0:	df000017 	ldw	fp,0(sp)
 80129e4:	dec00204 	addi	sp,sp,8
 80129e8:	f800283a 	ret

080129ec <altera_avalon_mailbox_close>:
 * altera_avalon_mailbox_close - Does nothing at the moment, but included for 
 * completeness
 *
 */
void altera_avalon_mailbox_close (alt_mailbox_dev* dev)
{
 80129ec:	defffe04 	addi	sp,sp,-8
 80129f0:	df000115 	stw	fp,4(sp)
 80129f4:	df000104 	addi	fp,sp,4
 80129f8:	e13fff15 	stw	r4,-4(fp)
  return;
}
 80129fc:	e037883a 	mov	sp,fp
 8012a00:	df000017 	ldw	fp,0(sp)
 8012a04:	dec00104 	addi	sp,sp,4
 8012a08:	f800283a 	ret

08012a0c <altera_avalon_mailbox_post>:
 * 
 * Post a message to the mailbox
 *
 */
int altera_avalon_mailbox_post (alt_mailbox_dev* dev, alt_u32 msg)
{
 8012a0c:	defff904 	addi	sp,sp,-28
 8012a10:	dfc00615 	stw	ra,24(sp)
 8012a14:	df000515 	stw	fp,20(sp)
 8012a18:	df000504 	addi	fp,sp,20
 8012a1c:	e13ffe15 	stw	r4,-8(fp)
 8012a20:	e17fff15 	stw	r5,-4(fp)
  int ret_code = 0;
 8012a24:	e03ffd15 	stw	zero,-12(fp)
  *   Claim the Mutex on the write pointer 
  *
  *   The mutex function takes care of the thread sempahore if running
  *   in a multi-threaded environment
  */
  altera_avalon_mutex_lock( &dev->write_mutex, 1 );
 8012a28:	e0bffe17 	ldw	r2,-8(fp)
 8012a2c:	11000704 	addi	r4,r2,28
 8012a30:	01400044 	movi	r5,1
 8012a34:	8012dec0 	call	8012dec <altera_avalon_mutex_lock>

  temp = (alt_u32 *) IORD(dev->write_ptr, 0);
 8012a38:	e0bffe17 	ldw	r2,-8(fp)
 8012a3c:	10800317 	ldw	r2,12(r2)
 8012a40:	10800037 	ldwio	r2,0(r2)
 8012a44:	e0bffc15 	stw	r2,-16(fp)
  next_write = alt_mailbox_increment_ptr(dev, temp);
 8012a48:	e13ffe17 	ldw	r4,-8(fp)
 8012a4c:	e17ffc17 	ldw	r5,-16(fp)
 8012a50:	8012ac80 	call	8012ac8 <alt_mailbox_increment_ptr>
 8012a54:	e0bffb15 	stw	r2,-20(fp)

  if (next_write == ((alt_u32 *)IORD(dev->read_ptr, 0)) )
 8012a58:	e0bffe17 	ldw	r2,-8(fp)
 8012a5c:	10800417 	ldw	r2,16(r2)
 8012a60:	10800037 	ldwio	r2,0(r2)
 8012a64:	1007883a 	mov	r3,r2
 8012a68:	e0bffb17 	ldw	r2,-20(fp)
 8012a6c:	1880061e 	bne	r3,r2,8012a88 <altera_avalon_mailbox_post+0x7c>
  {
    ALT_ERRNO = EWOULDBLOCK;
 8012a70:	80129340 	call	8012934 <alt_get_errno>
 8012a74:	00c002c4 	movi	r3,11
 8012a78:	10c00015 	stw	r3,0(r2)
    ret_code = -EWOULDBLOCK;
 8012a7c:	00bffd44 	movi	r2,-11
 8012a80:	e0bffd15 	stw	r2,-12(fp)
 8012a84:	00000706 	br	8012aa4 <altera_avalon_mailbox_post+0x98>
  }
  else
  {
    IOWR(temp, 0, msg);
 8012a88:	e0bffc17 	ldw	r2,-16(fp)
 8012a8c:	e0ffff17 	ldw	r3,-4(fp)
 8012a90:	10c00035 	stwio	r3,0(r2)
    IOWR((alt_u32)(dev->write_ptr), 0, (alt_u32)next_write);
 8012a94:	e0bffe17 	ldw	r2,-8(fp)
 8012a98:	10800317 	ldw	r2,12(r2)
 8012a9c:	e0fffb17 	ldw	r3,-20(fp)
 8012aa0:	10c00035 	stwio	r3,0(r2)
  }

  altera_avalon_mutex_unlock( &dev->write_mutex );
 8012aa4:	e0bffe17 	ldw	r2,-8(fp)
 8012aa8:	11000704 	addi	r4,r2,28
 8012aac:	8012e6c0 	call	8012e6c <altera_avalon_mutex_unlock>

  return ret_code;
 8012ab0:	e0bffd17 	ldw	r2,-12(fp)

}
 8012ab4:	e037883a 	mov	sp,fp
 8012ab8:	dfc00117 	ldw	ra,4(sp)
 8012abc:	df000017 	ldw	fp,0(sp)
 8012ac0:	dec00204 	addi	sp,sp,8
 8012ac4:	f800283a 	ret

08012ac8 <alt_mailbox_increment_ptr>:
 *
 * Increment one of the pointers and if that would take it beyond the end
 * of the shared memory put it at the start
 */
static inline alt_u32* alt_mailbox_increment_ptr(alt_mailbox_dev* dev, alt_u32* ptr)
{
 8012ac8:	defffd04 	addi	sp,sp,-12
 8012acc:	df000215 	stw	fp,8(sp)
 8012ad0:	df000204 	addi	fp,sp,8
 8012ad4:	e13ffe15 	stw	r4,-8(fp)
 8012ad8:	e17fff15 	stw	r5,-4(fp)
  ptr += 1;
 8012adc:	e0bfff17 	ldw	r2,-4(fp)
 8012ae0:	10800104 	addi	r2,r2,4
 8012ae4:	e0bfff15 	stw	r2,-4(fp)

  if (ptr > dev->mailbox_mem_end_ptr)
 8012ae8:	e0bffe17 	ldw	r2,-8(fp)
 8012aec:	10c00617 	ldw	r3,24(r2)
 8012af0:	e0bfff17 	ldw	r2,-4(fp)
 8012af4:	1880032e 	bgeu	r3,r2,8012b04 <alt_mailbox_increment_ptr+0x3c>
  {
    ptr = dev->mailbox_mem_start_ptr;
 8012af8:	e0bffe17 	ldw	r2,-8(fp)
 8012afc:	10800517 	ldw	r2,20(r2)
 8012b00:	e0bfff15 	stw	r2,-4(fp)
  }

  return ptr;
 8012b04:	e0bfff17 	ldw	r2,-4(fp)
}
 8012b08:	e037883a 	mov	sp,fp
 8012b0c:	df000017 	ldw	fp,0(sp)
 8012b10:	dec00104 	addi	sp,sp,4
 8012b14:	f800283a 	ret

08012b18 <altera_avalon_mailbox_pend>:
 * 
 * Block until a message is available in the mailbox
 *
 */
alt_u32 altera_avalon_mailbox_pend (alt_mailbox_dev* dev)
{
 8012b18:	defffa04 	addi	sp,sp,-24
 8012b1c:	dfc00515 	stw	ra,20(sp)
 8012b20:	df000415 	stw	fp,16(sp)
 8012b24:	dc000315 	stw	r16,12(sp)
 8012b28:	df000304 	addi	fp,sp,12
 8012b2c:	e13fff15 	stw	r4,-4(fp)
  *   Claim the Mutex on the read pointer
  *
  *   The mutex function takes care of the thread sempahore if running
  *   in a multi-threaded environment
  */
  altera_avalon_mutex_lock( &dev->read_mutex, 1 );
 8012b30:	e0bfff17 	ldw	r2,-4(fp)
 8012b34:	11000b04 	addi	r4,r2,44
 8012b38:	01400044 	movi	r5,1
 8012b3c:	8012dec0 	call	8012dec <altera_avalon_mutex_lock>

  temp = (alt_u32 *)IORD(dev->read_ptr, 0);
 8012b40:	e0bfff17 	ldw	r2,-4(fp)
 8012b44:	10800417 	ldw	r2,16(r2)
 8012b48:	10800037 	ldwio	r2,0(r2)
 8012b4c:	e0bffd15 	stw	r2,-12(fp)

  while ( (alt_u32 *)(IORD(dev->write_ptr, 0)) == temp );
 8012b50:	e0bfff17 	ldw	r2,-4(fp)
 8012b54:	10800317 	ldw	r2,12(r2)
 8012b58:	10800037 	ldwio	r2,0(r2)
 8012b5c:	1007883a 	mov	r3,r2
 8012b60:	e0bffd17 	ldw	r2,-12(fp)
 8012b64:	18bffa26 	beq	r3,r2,8012b50 <altera_avalon_mailbox_pend+0x38>

  msg = IORD(temp, 0);
 8012b68:	e0bffd17 	ldw	r2,-12(fp)
 8012b6c:	10800037 	ldwio	r2,0(r2)
 8012b70:	e0bffe15 	stw	r2,-8(fp)

  IOWR( (alt_u32)(dev->read_ptr), 0,
 8012b74:	e0bfff17 	ldw	r2,-4(fp)
 8012b78:	10800417 	ldw	r2,16(r2)
 8012b7c:	1021883a 	mov	r16,r2
 8012b80:	e13fff17 	ldw	r4,-4(fp)
 8012b84:	e17ffd17 	ldw	r5,-12(fp)
 8012b88:	8012ac80 	call	8012ac8 <alt_mailbox_increment_ptr>
 8012b8c:	1007883a 	mov	r3,r2
 8012b90:	8005883a 	mov	r2,r16
 8012b94:	10c00035 	stwio	r3,0(r2)
    (alt_u32)(alt_mailbox_increment_ptr(dev, temp)) );

  altera_avalon_mutex_unlock( &dev->read_mutex );
 8012b98:	e0bfff17 	ldw	r2,-4(fp)
 8012b9c:	11000b04 	addi	r4,r2,44
 8012ba0:	8012e6c0 	call	8012e6c <altera_avalon_mutex_unlock>

  return msg;
 8012ba4:	e0bffe17 	ldw	r2,-8(fp)

}
 8012ba8:	e037883a 	mov	sp,fp
 8012bac:	dfc00217 	ldw	ra,8(sp)
 8012bb0:	df000117 	ldw	fp,4(sp)
 8012bb4:	dc000017 	ldw	r16,0(sp)
 8012bb8:	dec00304 	addi	sp,sp,12
 8012bbc:	f800283a 	ret

08012bc0 <altera_avalon_mailbox_get>:
 * If a message is available in the mailbox return it otherwise return NULL
 * i.e. this is Non-Blocking
 *
 */
alt_u32 altera_avalon_mailbox_get (alt_mailbox_dev* dev, int* err)
{
 8012bc0:	defff904 	addi	sp,sp,-28
 8012bc4:	dfc00615 	stw	ra,24(sp)
 8012bc8:	df000515 	stw	fp,20(sp)
 8012bcc:	dc000415 	stw	r16,16(sp)
 8012bd0:	df000404 	addi	fp,sp,16
 8012bd4:	e13ffe15 	stw	r4,-8(fp)
 8012bd8:	e17fff15 	stw	r5,-4(fp)
  alt_u32 msg;
  alt_u32* temp;
  *err = 0;
 8012bdc:	e0bfff17 	ldw	r2,-4(fp)
 8012be0:	10000015 	stw	zero,0(r2)
  *   Claim the Mutex on the read pointer 
  *
  *   The mutex function takes care of the thread sempahore if running
  *   in a multi-threaded environment
  */
  altera_avalon_mutex_lock( &dev->read_mutex, 1 );
 8012be4:	e0bffe17 	ldw	r2,-8(fp)
 8012be8:	11000b04 	addi	r4,r2,44
 8012bec:	01400044 	movi	r5,1
 8012bf0:	8012dec0 	call	8012dec <altera_avalon_mutex_lock>

  temp = (alt_u32 *)IORD(dev->read_ptr, 0);
 8012bf4:	e0bffe17 	ldw	r2,-8(fp)
 8012bf8:	10800417 	ldw	r2,16(r2)
 8012bfc:	10800037 	ldwio	r2,0(r2)
 8012c00:	e0bffc15 	stw	r2,-16(fp)

  if ( (alt_u32 *)(IORD(dev->write_ptr, 0)) == temp )
 8012c04:	e0bffe17 	ldw	r2,-8(fp)
 8012c08:	10800317 	ldw	r2,12(r2)
 8012c0c:	10800037 	ldwio	r2,0(r2)
 8012c10:	1007883a 	mov	r3,r2
 8012c14:	e0bffc17 	ldw	r2,-16(fp)
 8012c18:	1880091e 	bne	r3,r2,8012c40 <altera_avalon_mailbox_get+0x80>
  {
    *err = -EWOULDBLOCK;
 8012c1c:	e0ffff17 	ldw	r3,-4(fp)
 8012c20:	00bffd44 	movi	r2,-11
 8012c24:	18800015 	stw	r2,0(r3)
    ALT_ERRNO = EWOULDBLOCK;
 8012c28:	80129340 	call	8012934 <alt_get_errno>
 8012c2c:	1007883a 	mov	r3,r2
 8012c30:	008002c4 	movi	r2,11
 8012c34:	18800015 	stw	r2,0(r3)
    msg = 0;
 8012c38:	e03ffd15 	stw	zero,-12(fp)
 8012c3c:	00000c06 	br	8012c70 <altera_avalon_mailbox_get+0xb0>
  }
  else
  {
    msg = IORD(temp, 0);
 8012c40:	e0bffc17 	ldw	r2,-16(fp)
 8012c44:	10800037 	ldwio	r2,0(r2)
 8012c48:	e0bffd15 	stw	r2,-12(fp)
    IOWR(dev->read_ptr, 0,
 8012c4c:	e0bffe17 	ldw	r2,-8(fp)
 8012c50:	10800417 	ldw	r2,16(r2)
 8012c54:	1021883a 	mov	r16,r2
 8012c58:	e13ffe17 	ldw	r4,-8(fp)
 8012c5c:	e17ffc17 	ldw	r5,-16(fp)
 8012c60:	8012ac80 	call	8012ac8 <alt_mailbox_increment_ptr>
 8012c64:	1007883a 	mov	r3,r2
 8012c68:	8005883a 	mov	r2,r16
 8012c6c:	10c00035 	stwio	r3,0(r2)
      (alt_u32)(alt_mailbox_increment_ptr(dev, temp)) );
  }

  altera_avalon_mutex_unlock( &dev->read_mutex );
 8012c70:	e0bffe17 	ldw	r2,-8(fp)
 8012c74:	11000b04 	addi	r4,r2,44
 8012c78:	8012e6c0 	call	8012e6c <altera_avalon_mutex_unlock>

  return msg;
 8012c7c:	e0bffd17 	ldw	r2,-12(fp)

}
 8012c80:	e037883a 	mov	sp,fp
 8012c84:	dfc00217 	ldw	ra,8(sp)
 8012c88:	df000117 	ldw	fp,4(sp)
 8012c8c:	dc000017 	ldw	r16,0(sp)
 8012c90:	dec00304 	addi	sp,sp,12
 8012c94:	f800283a 	ret

08012c98 <alt_mutex_trylock>:
 *
 * returns 0 on success -1 otherwise
 *
 */
static int alt_mutex_trylock( alt_mutex_dev* dev, alt_u32 value )
{
 8012c98:	defff904 	addi	sp,sp,-28
 8012c9c:	df000615 	stw	fp,24(sp)
 8012ca0:	df000604 	addi	fp,sp,24
 8012ca4:	e13ffe15 	stw	r4,-8(fp)
 8012ca8:	e17fff15 	stw	r5,-4(fp)
  alt_u32 id, data, check;
  int ret_code = -1;
 8012cac:	00bfffc4 	movi	r2,-1
 8012cb0:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_READ_CPUID(id);
 8012cb4:	0005317a 	rdctl	r2,cpuid
 8012cb8:	e0bffd15 	stw	r2,-12(fp)

  /* the data we want the mutex to hold */
  data = (id << ALTERA_AVALON_MUTEX_MUTEX_OWNER_OFST) | value;
 8012cbc:	e0bffd17 	ldw	r2,-12(fp)
 8012cc0:	1006943a 	slli	r3,r2,16
 8012cc4:	e0bfff17 	ldw	r2,-4(fp)
 8012cc8:	1884b03a 	or	r2,r3,r2
 8012ccc:	e0bffc15 	stw	r2,-16(fp)

  /* attempt to write to the mutex */
  IOWR_ALTERA_AVALON_MUTEX_MUTEX(dev->mutex_base, data);
 8012cd0:	e0bffe17 	ldw	r2,-8(fp)
 8012cd4:	10800317 	ldw	r2,12(r2)
 8012cd8:	e0fffc17 	ldw	r3,-16(fp)
 8012cdc:	10c00035 	stwio	r3,0(r2)
  
  check = IORD_ALTERA_AVALON_MUTEX_MUTEX(dev->mutex_base);
 8012ce0:	e0bffe17 	ldw	r2,-8(fp)
 8012ce4:	10800317 	ldw	r2,12(r2)
 8012ce8:	10800037 	ldwio	r2,0(r2)
 8012cec:	e0bffb15 	stw	r2,-20(fp)

  if ( check == data)
 8012cf0:	e0fffb17 	ldw	r3,-20(fp)
 8012cf4:	e0bffc17 	ldw	r2,-16(fp)
 8012cf8:	1880011e 	bne	r3,r2,8012d00 <alt_mutex_trylock+0x68>
  {
    ret_code = 0;
 8012cfc:	e03ffa15 	stw	zero,-24(fp)
  }

  return ret_code;
 8012d00:	e0bffa17 	ldw	r2,-24(fp)
}
 8012d04:	e037883a 	mov	sp,fp
 8012d08:	df000017 	ldw	fp,0(sp)
 8012d0c:	dec00104 	addi	sp,sp,4
 8012d10:	f800283a 	ret

08012d14 <altera_avalon_mutex_open>:
 * Search the list of registered mutexes for one with the supplied name.
 *
 * The return value will be NULL on failure, and non-NULL otherwise.
 */
alt_mutex_dev* altera_avalon_mutex_open (const char* name)
{
 8012d14:	defffc04 	addi	sp,sp,-16
 8012d18:	dfc00315 	stw	ra,12(sp)
 8012d1c:	df000215 	stw	fp,8(sp)
 8012d20:	df000204 	addi	fp,sp,8
 8012d24:	e13fff15 	stw	r4,-4(fp)
  alt_mutex_dev* dev;

  dev = (alt_mutex_dev*) alt_find_dev (name, &alt_mutex_list);
 8012d28:	e13fff17 	ldw	r4,-4(fp)
 8012d2c:	d1601404 	addi	r5,gp,-32688
 8012d30:	80158f00 	call	80158f0 <alt_find_dev>
 8012d34:	e0bffe15 	stw	r2,-8(fp)

  if (NULL == dev)
 8012d38:	e0bffe17 	ldw	r2,-8(fp)
 8012d3c:	1004c03a 	cmpne	r2,r2,zero
 8012d40:	1000041e 	bne	r2,zero,8012d54 <altera_avalon_mutex_open+0x40>
  {
    ALT_ERRNO = ENODEV;
 8012d44:	8012d6c0 	call	8012d6c <alt_get_errno>
 8012d48:	1007883a 	mov	r3,r2
 8012d4c:	008004c4 	movi	r2,19
 8012d50:	18800015 	stw	r2,0(r3)
  }

  return dev;
 8012d54:	e0bffe17 	ldw	r2,-8(fp)
}
 8012d58:	e037883a 	mov	sp,fp
 8012d5c:	dfc00117 	ldw	ra,4(sp)
 8012d60:	df000017 	ldw	fp,0(sp)
 8012d64:	dec00204 	addi	sp,sp,8
 8012d68:	f800283a 	ret

08012d6c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 8012d6c:	defffd04 	addi	sp,sp,-12
 8012d70:	dfc00215 	stw	ra,8(sp)
 8012d74:	df000115 	stw	fp,4(sp)
 8012d78:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 8012d7c:	008200b4 	movhi	r2,2050
 8012d80:	10a96404 	addi	r2,r2,-23152
 8012d84:	10800017 	ldw	r2,0(r2)
 8012d88:	1005003a 	cmpeq	r2,r2,zero
 8012d8c:	1000061e 	bne	r2,zero,8012da8 <alt_get_errno+0x3c>
 8012d90:	008200b4 	movhi	r2,2050
 8012d94:	10a96404 	addi	r2,r2,-23152
 8012d98:	10800017 	ldw	r2,0(r2)
 8012d9c:	103ee83a 	callr	r2
 8012da0:	e0bfff15 	stw	r2,-4(fp)
 8012da4:	00000306 	br	8012db4 <alt_get_errno+0x48>
 8012da8:	008200b4 	movhi	r2,2050
 8012dac:	10b12904 	addi	r2,r2,-15196
 8012db0:	e0bfff15 	stw	r2,-4(fp)
 8012db4:	e0bfff17 	ldw	r2,-4(fp)
}
 8012db8:	e037883a 	mov	sp,fp
 8012dbc:	dfc00117 	ldw	ra,4(sp)
 8012dc0:	df000017 	ldw	fp,0(sp)
 8012dc4:	dec00204 	addi	sp,sp,8
 8012dc8:	f800283a 	ret

08012dcc <altera_avalon_mutex_close>:
 * altera_avalon_mutex_close - Does nothing at the moment, but included for 
 * completeness
 *
 */
void altera_avalon_mutex_close (alt_mutex_dev* dev)
{
 8012dcc:	defffe04 	addi	sp,sp,-8
 8012dd0:	df000115 	stw	fp,4(sp)
 8012dd4:	df000104 	addi	fp,sp,4
 8012dd8:	e13fff15 	stw	r4,-4(fp)
  return;
}
 8012ddc:	e037883a 	mov	sp,fp
 8012de0:	df000017 	ldw	fp,0(sp)
 8012de4:	dec00104 	addi	sp,sp,4
 8012de8:	f800283a 	ret

08012dec <altera_avalon_mutex_lock>:
/*
 * altera_avalon_mutex_lock - Lock the hardware mutex
 *
 */
void altera_avalon_mutex_lock( alt_mutex_dev* dev, alt_u32 value )
{
 8012dec:	defffc04 	addi	sp,sp,-16
 8012df0:	dfc00315 	stw	ra,12(sp)
 8012df4:	df000215 	stw	fp,8(sp)
 8012df8:	df000204 	addi	fp,sp,8
 8012dfc:	e13ffe15 	stw	r4,-8(fp)
 8012e00:	e17fff15 	stw	r5,-4(fp)
   * semaphore. This ensures that reading from the device is thread-safe.
   */

  ALT_SEM_PEND (dev->lock, 0);

  while ( alt_mutex_trylock( dev, value ) != 0);
 8012e04:	e13ffe17 	ldw	r4,-8(fp)
 8012e08:	e17fff17 	ldw	r5,-4(fp)
 8012e0c:	8012c980 	call	8012c98 <alt_mutex_trylock>
 8012e10:	1004c03a 	cmpne	r2,r2,zero
 8012e14:	103ffb1e 	bne	r2,zero,8012e04 <altera_avalon_mutex_lock+0x18>
}
 8012e18:	e037883a 	mov	sp,fp
 8012e1c:	dfc00117 	ldw	ra,4(sp)
 8012e20:	df000017 	ldw	fp,0(sp)
 8012e24:	dec00204 	addi	sp,sp,8
 8012e28:	f800283a 	ret

08012e2c <altera_avalon_mutex_trylock>:
 *
 * returns 0 on success -1 otherwise
 *
 */
int altera_avalon_mutex_trylock( alt_mutex_dev* dev, alt_u32 value )
{
 8012e2c:	defffb04 	addi	sp,sp,-20
 8012e30:	dfc00415 	stw	ra,16(sp)
 8012e34:	df000315 	stw	fp,12(sp)
 8012e38:	df000304 	addi	fp,sp,12
 8012e3c:	e13ffe15 	stw	r4,-8(fp)
 8012e40:	e17fff15 	stw	r5,-4(fp)
  int ret_code;

  ALT_SEM_PEND (dev->lock, 0);

  ret_code = alt_mutex_trylock( dev, value);
 8012e44:	e13ffe17 	ldw	r4,-8(fp)
 8012e48:	e17fff17 	ldw	r5,-4(fp)
 8012e4c:	8012c980 	call	8012c98 <alt_mutex_trylock>
 8012e50:	e0bffd15 	stw	r2,-12(fp)
  if (ret_code)
  {
    ALT_SEM_POST (dev->lock);
  }

  return ret_code;
 8012e54:	e0bffd17 	ldw	r2,-12(fp)
}
 8012e58:	e037883a 	mov	sp,fp
 8012e5c:	dfc00117 	ldw	ra,4(sp)
 8012e60:	df000017 	ldw	fp,0(sp)
 8012e64:	dec00204 	addi	sp,sp,8
 8012e68:	f800283a 	ret

08012e6c <altera_avalon_mutex_unlock>:
 * This function does not check that you own the Mutex if you try to release
 * a Mutex you do not own the behaviour is undefined
 *
 */
void altera_avalon_mutex_unlock( alt_mutex_dev* dev )
{
 8012e6c:	defffd04 	addi	sp,sp,-12
 8012e70:	df000215 	stw	fp,8(sp)
 8012e74:	df000204 	addi	fp,sp,8
 8012e78:	e13fff15 	stw	r4,-4(fp)
  alt_u32 id;
  NIOS2_READ_CPUID(id);
 8012e7c:	0005317a 	rdctl	r2,cpuid
 8012e80:	e0bffe15 	stw	r2,-8(fp)

  /*
  * This Mutex has been claimed and released since Reset so clear the Reset bit
  * This MUST happen before we release the MUTEX
  */
  IOWR_ALTERA_AVALON_MUTEX_RESET(dev->mutex_base, 
 8012e84:	e0bfff17 	ldw	r2,-4(fp)
 8012e88:	10800317 	ldw	r2,12(r2)
 8012e8c:	10800104 	addi	r2,r2,4
 8012e90:	1007883a 	mov	r3,r2
 8012e94:	00800044 	movi	r2,1
 8012e98:	18800035 	stwio	r2,0(r3)
                                  ALTERA_AVALON_MUTEX_RESET_RESET_MSK);
  IOWR_ALTERA_AVALON_MUTEX_MUTEX(dev->mutex_base, 
 8012e9c:	e0bfff17 	ldw	r2,-4(fp)
 8012ea0:	11000317 	ldw	r4,12(r2)
 8012ea4:	e0bffe17 	ldw	r2,-8(fp)
 8012ea8:	1004943a 	slli	r2,r2,16
 8012eac:	1007883a 	mov	r3,r2
 8012eb0:	2005883a 	mov	r2,r4
 8012eb4:	10c00035 	stwio	r3,0(r2)

  /*
  * Now that access to the hardware Mutex is complete, release the thread lock
  */
  ALT_SEM_POST (dev->lock);
}
 8012eb8:	e037883a 	mov	sp,fp
 8012ebc:	df000017 	ldw	fp,0(sp)
 8012ec0:	dec00104 	addi	sp,sp,4
 8012ec4:	f800283a 	ret

08012ec8 <altera_avalon_mutex_is_mine>:
 * altera_avalon_mutex_is_mine - Do I own the Mutex?
 *
 *  returns non zero if the mutex is owned by this CPU
 */
int altera_avalon_mutex_is_mine( alt_mutex_dev* dev )
{
 8012ec8:	defff904 	addi	sp,sp,-28
 8012ecc:	df000615 	stw	fp,24(sp)
 8012ed0:	df000604 	addi	fp,sp,24
 8012ed4:	e13fff15 	stw	r4,-4(fp)
  alt_u32 id, data, owner, value;
  int ret_code = 0;
 8012ed8:	e03ffa15 	stw	zero,-24(fp)

  NIOS2_READ_CPUID(id);
 8012edc:	0005317a 	rdctl	r2,cpuid
 8012ee0:	e0bffe15 	stw	r2,-8(fp)

  /* retrieve the contents of the mutex */
  data = IORD_ALTERA_AVALON_MUTEX_MUTEX(dev->mutex_base);
 8012ee4:	e0bfff17 	ldw	r2,-4(fp)
 8012ee8:	10800317 	ldw	r2,12(r2)
 8012eec:	10800037 	ldwio	r2,0(r2)
 8012ef0:	e0bffd15 	stw	r2,-12(fp)
  owner = (data & ALTERA_AVALON_MUTEX_MUTEX_OWNER_MSK) >> 
 8012ef4:	e0bffd17 	ldw	r2,-12(fp)
 8012ef8:	10bfffec 	andhi	r2,r2,65535
 8012efc:	1004d43a 	srli	r2,r2,16
 8012f00:	e0bffc15 	stw	r2,-16(fp)
              ALTERA_AVALON_MUTEX_MUTEX_OWNER_OFST;

  if (owner == id) 
 8012f04:	e0fffc17 	ldw	r3,-16(fp)
 8012f08:	e0bffe17 	ldw	r2,-8(fp)
 8012f0c:	1880081e 	bne	r3,r2,8012f30 <altera_avalon_mutex_is_mine+0x68>
  {
    value = (data & ALTERA_AVALON_MUTEX_MUTEX_VALUE_MSK) >> 
 8012f10:	e0bffd17 	ldw	r2,-12(fp)
 8012f14:	10bfffcc 	andi	r2,r2,65535
 8012f18:	e0bffb15 	stw	r2,-20(fp)
                  ALTERA_AVALON_MUTEX_MUTEX_VALUE_OFST;
    if (value != 0)
 8012f1c:	e0bffb17 	ldw	r2,-20(fp)
 8012f20:	1005003a 	cmpeq	r2,r2,zero
 8012f24:	1000021e 	bne	r2,zero,8012f30 <altera_avalon_mutex_is_mine+0x68>
    {
      ret_code = 1;
 8012f28:	00800044 	movi	r2,1
 8012f2c:	e0bffa15 	stw	r2,-24(fp)
    }
  }

  return ret_code;
 8012f30:	e0bffa17 	ldw	r2,-24(fp)
}
 8012f34:	e037883a 	mov	sp,fp
 8012f38:	df000017 	ldw	fp,0(sp)
 8012f3c:	dec00104 	addi	sp,sp,4
 8012f40:	f800283a 	ret

08012f44 <altera_avalon_mutex_first_lock>:
 *
 * Has this Mutex been released since reset if not return 1
 * otherwise return 0
 */
int altera_avalon_mutex_first_lock( alt_mutex_dev* dev )
{
 8012f44:	defffc04 	addi	sp,sp,-16
 8012f48:	df000315 	stw	fp,12(sp)
 8012f4c:	df000304 	addi	fp,sp,12
 8012f50:	e13fff15 	stw	r4,-4(fp)
  alt_u32 data;
  int ret_code = 0;
 8012f54:	e03ffd15 	stw	zero,-12(fp)

  data = IORD_ALTERA_AVALON_MUTEX_RESET(dev->mutex_base);
 8012f58:	e0bfff17 	ldw	r2,-4(fp)
 8012f5c:	10800317 	ldw	r2,12(r2)
 8012f60:	10800104 	addi	r2,r2,4
 8012f64:	10800037 	ldwio	r2,0(r2)
 8012f68:	e0bffe15 	stw	r2,-8(fp)

  if (data & ALTERA_AVALON_MUTEX_RESET_RESET_MSK) 
 8012f6c:	e0bffe17 	ldw	r2,-8(fp)
 8012f70:	1080004c 	andi	r2,r2,1
 8012f74:	10803fcc 	andi	r2,r2,255
 8012f78:	1005003a 	cmpeq	r2,r2,zero
 8012f7c:	1000021e 	bne	r2,zero,8012f88 <altera_avalon_mutex_first_lock+0x44>
  {
    ret_code = 1;
 8012f80:	00800044 	movi	r2,1
 8012f84:	e0bffd15 	stw	r2,-12(fp)
  }

  return ret_code;
 8012f88:	e0bffd17 	ldw	r2,-12(fp)
}
 8012f8c:	e037883a 	mov	sp,fp
 8012f90:	df000017 	ldw	fp,0(sp)
 8012f94:	dec00104 	addi	sp,sp,4
 8012f98:	f800283a 	ret

08012f9c <perf_get_section_time>:

#include "altera_avalon_performance_counter.h"
#include "system.h"

alt_u64 perf_get_section_time (void* hw_base_address, int which_section)
{
 8012f9c:	defff904 	addi	sp,sp,-28
 8012fa0:	df000615 	stw	fp,24(sp)
 8012fa4:	df000604 	addi	fp,sp,24
 8012fa8:	e13ffe15 	stw	r4,-8(fp)
 8012fac:	e17fff15 	stw	r5,-4(fp)
  alt_u32 lo;
  alt_u32 hi;
  alt_u64 result = 0;
 8012fb0:	e03ffa15 	stw	zero,-24(fp)
 8012fb4:	e03ffb15 	stw	zero,-20(fp)

  PERF_STOP_MEASURING(hw_base_address);
 8012fb8:	e0bffe17 	ldw	r2,-8(fp)
 8012fbc:	10000035 	stwio	zero,0(r2)
  lo = IORD(hw_base_address, ( which_section*4   ));
 8012fc0:	e0bfff17 	ldw	r2,-4(fp)
 8012fc4:	1004913a 	slli	r2,r2,4
 8012fc8:	1007883a 	mov	r3,r2
 8012fcc:	e0bffe17 	ldw	r2,-8(fp)
 8012fd0:	1885883a 	add	r2,r3,r2
 8012fd4:	10800037 	ldwio	r2,0(r2)
 8012fd8:	e0bffd15 	stw	r2,-12(fp)
  hi = IORD(hw_base_address, ((which_section*4)+1));
 8012fdc:	e0bfff17 	ldw	r2,-4(fp)
 8012fe0:	1004913a 	slli	r2,r2,4
 8012fe4:	1007883a 	mov	r3,r2
 8012fe8:	e0bffe17 	ldw	r2,-8(fp)
 8012fec:	1885883a 	add	r2,r3,r2
 8012ff0:	10800104 	addi	r2,r2,4
 8012ff4:	10800037 	ldwio	r2,0(r2)
 8012ff8:	e0bffc15 	stw	r2,-16(fp)

  result = ((alt_u64)(((alt_u64) hi) << ((alt_u64)32))) | 
 8012ffc:	e0bffc17 	ldw	r2,-16(fp)
 8013000:	0007883a 	mov	r3,zero
 8013004:	100a983a 	sll	r5,r2,zero
 8013008:	0009883a 	mov	r4,zero
 801300c:	e0bffd17 	ldw	r2,-12(fp)
 8013010:	0007883a 	mov	r3,zero
 8013014:	208cb03a 	or	r6,r4,r2
 8013018:	e1bffa15 	stw	r6,-24(fp)
 801301c:	28c4b03a 	or	r2,r5,r3
 8013020:	e0bffb15 	stw	r2,-20(fp)
           ((alt_u64)(((alt_u64) lo)                 ))  ;
  return result;
 8013024:	e17ffa17 	ldw	r5,-24(fp)
 8013028:	e1bffb17 	ldw	r6,-20(fp)
 801302c:	2807883a 	mov	r3,r5
 8013030:	3009883a 	mov	r4,r6
}
 8013034:	1805883a 	mov	r2,r3
 8013038:	2007883a 	mov	r3,r4
 801303c:	e037883a 	mov	sp,fp
 8013040:	df000017 	ldw	fp,0(sp)
 8013044:	dec00104 	addi	sp,sp,4
 8013048:	f800283a 	ret

0801304c <perf_get_total_time>:

alt_u64 perf_get_total_time   (void* hw_base_address)
{
 801304c:	defffd04 	addi	sp,sp,-12
 8013050:	dfc00215 	stw	ra,8(sp)
 8013054:	df000115 	stw	fp,4(sp)
 8013058:	df000104 	addi	fp,sp,4
 801305c:	e13fff15 	stw	r4,-4(fp)
  return perf_get_section_time (hw_base_address, 0);
 8013060:	e13fff17 	ldw	r4,-4(fp)
 8013064:	000b883a 	mov	r5,zero
 8013068:	8012f9c0 	call	8012f9c <perf_get_section_time>
 801306c:	1009883a 	mov	r4,r2
 8013070:	180b883a 	mov	r5,r3
 8013074:	200d883a 	mov	r6,r4
 8013078:	280f883a 	mov	r7,r5
 801307c:	3007883a 	mov	r3,r6
 8013080:	3809883a 	mov	r4,r7
}
 8013084:	1805883a 	mov	r2,r3
 8013088:	2007883a 	mov	r3,r4
 801308c:	e037883a 	mov	sp,fp
 8013090:	dfc00117 	ldw	ra,4(sp)
 8013094:	df000017 	ldw	fp,0(sp)
 8013098:	dec00204 	addi	sp,sp,8
 801309c:	f800283a 	ret

080130a0 <perf_get_num_starts>:

alt_u32 perf_get_num_starts   (void* hw_base_address, int which_section)
{
 80130a0:	defffd04 	addi	sp,sp,-12
 80130a4:	df000215 	stw	fp,8(sp)
 80130a8:	df000204 	addi	fp,sp,8
 80130ac:	e13ffe15 	stw	r4,-8(fp)
 80130b0:	e17fff15 	stw	r5,-4(fp)
  return IORD(hw_base_address, ((which_section*4)+2));
 80130b4:	e0bfff17 	ldw	r2,-4(fp)
 80130b8:	1004913a 	slli	r2,r2,4
 80130bc:	1007883a 	mov	r3,r2
 80130c0:	e0bffe17 	ldw	r2,-8(fp)
 80130c4:	1885883a 	add	r2,r3,r2
 80130c8:	10800204 	addi	r2,r2,8
 80130cc:	10800037 	ldwio	r2,0(r2)
}
 80130d0:	e037883a 	mov	sp,fp
 80130d4:	df000017 	ldw	fp,0(sp)
 80130d8:	dec00104 	addi	sp,sp,4
 80130dc:	f800283a 	ret

080130e0 <alt_get_performance_counter_base>:
 * in Nios II IDE just like is done for the system clock timer and
 * timestamp timer.
 */
void* 
alt_get_performance_counter_base()
{
 80130e0:	deffff04 	addi	sp,sp,-4
 80130e4:	df000015 	stw	fp,0(sp)
 80130e8:	d839883a 	mov	fp,sp
#ifdef PERFORMANCE_COUNTER_0_BASE
    return (void*)PERFORMANCE_COUNTER_0_BASE;
 80130ec:	0005883a 	mov	r2,zero
#else
    return (void*)0;
#endif
}
 80130f0:	e037883a 	mov	sp,fp
 80130f4:	df000017 	ldw	fp,0(sp)
 80130f8:	dec00104 	addi	sp,sp,4
 80130fc:	f800283a 	ret

08013100 <alt_get_cpu_freq>:
 * If the performance counter peripheral is in a different time domain,
 * this won't necessarily be the same frequency of the CPU.
 */
alt_u32 
alt_get_cpu_freq()
{
 8013100:	deffff04 	addi	sp,sp,-4
 8013104:	df000015 	stw	fp,0(sp)
 8013108:	d839883a 	mov	fp,sp
    return ALT_CPU_FREQ;
 801310c:	0080bef4 	movhi	r2,763
 8013110:	10bc2004 	addi	r2,r2,-3968
}
 8013114:	e037883a 	mov	sp,fp
 8013118:	df000017 	ldw	fp,0(sp)
 801311c:	dec00104 	addi	sp,sp,4
 8013120:	f800283a 	ret

08013124 <read_word>:
* reads a word from an address in flash
* this is necessary as we can't do 
* unaligned from an unaligned boundary in Nios II
*/
static alt_u32 read_word(alt_u8* current_ptr)
{
 8013124:	defffe04 	addi	sp,sp,-8
 8013128:	df000115 	stw	fp,4(sp)
 801312c:	df000104 	addi	fp,sp,4
 8013130:	e13fff15 	stw	r4,-4(fp)
  return (alt_u32)(*current_ptr | 
 8013134:	e0bfff17 	ldw	r2,-4(fp)
 8013138:	10800003 	ldbu	r2,0(r2)
 801313c:	10c03fcc 	andi	r3,r2,255
 8013140:	e0bfff17 	ldw	r2,-4(fp)
 8013144:	10800044 	addi	r2,r2,1
 8013148:	10800003 	ldbu	r2,0(r2)
 801314c:	10803fcc 	andi	r2,r2,255
 8013150:	1004923a 	slli	r2,r2,8
 8013154:	1886b03a 	or	r3,r3,r2
 8013158:	e0bfff17 	ldw	r2,-4(fp)
 801315c:	10800084 	addi	r2,r2,2
 8013160:	10800003 	ldbu	r2,0(r2)
 8013164:	10803fcc 	andi	r2,r2,255
 8013168:	1004943a 	slli	r2,r2,16
 801316c:	1886b03a 	or	r3,r3,r2
 8013170:	e0bfff17 	ldw	r2,-4(fp)
 8013174:	108000c4 	addi	r2,r2,3
 8013178:	10800003 	ldbu	r2,0(r2)
 801317c:	10803fcc 	andi	r2,r2,255
 8013180:	1004963a 	slli	r2,r2,24
 8013184:	1884b03a 	or	r2,r3,r2
         (*(current_ptr+1) << 8) | 
         (*(current_ptr+2) << 16) |
         (*(current_ptr+3) << 24 ));
}
 8013188:	e037883a 	mov	sp,fp
 801318c:	df000017 	ldw	fp,0(sp)
 8013190:	dec00104 	addi	sp,sp,4
 8013194:	f800283a 	ret

08013198 <read_word_inc>:
* reads a word from an address in flash, and increments the ptr
* this is necessary as we can't do 
* unaligned from an unaligned boundary in Nios II
*/
static alt_u32 read_word_inc(alt_u8** current_ptr)
{
 8013198:	defffc04 	addi	sp,sp,-16
 801319c:	dfc00315 	stw	ra,12(sp)
 80131a0:	df000215 	stw	fp,8(sp)
 80131a4:	df000204 	addi	fp,sp,8
 80131a8:	e13fff15 	stw	r4,-4(fp)
  alt_u32 value = read_word(*current_ptr);
 80131ac:	e0bfff17 	ldw	r2,-4(fp)
 80131b0:	11000017 	ldw	r4,0(r2)
 80131b4:	80131240 	call	8013124 <read_word>
 80131b8:	e0bffe15 	stw	r2,-8(fp)
  *current_ptr += 4;
 80131bc:	e0bfff17 	ldw	r2,-4(fp)
 80131c0:	10800017 	ldw	r2,0(r2)
 80131c4:	10c00104 	addi	r3,r2,4
 80131c8:	e0bfff17 	ldw	r2,-4(fp)
 80131cc:	10c00015 	stw	r3,0(r2)
  return value;
 80131d0:	e0bffe17 	ldw	r2,-8(fp)
}
 80131d4:	e037883a 	mov	sp,fp
 80131d8:	dfc00117 	ldw	ra,4(sp)
 80131dc:	df000017 	ldw	fp,0(sp)
 80131e0:	dec00204 	addi	sp,sp,8
 80131e4:	f800283a 	ret

080131e8 <read_half_word>:
* reads a half word from an address in flash
* this is necessary as we can't do 
* unaligned from an unaligned boundary in Nios II
*/
static alt_u16 read_half_word(alt_u8* current_ptr)
{
 80131e8:	defffe04 	addi	sp,sp,-8
 80131ec:	df000115 	stw	fp,4(sp)
 80131f0:	df000104 	addi	fp,sp,4
 80131f4:	e13fff15 	stw	r4,-4(fp)
  return (alt_u16)(*current_ptr | 
 80131f8:	e0bfff17 	ldw	r2,-4(fp)
 80131fc:	10800003 	ldbu	r2,0(r2)
 8013200:	10c03fcc 	andi	r3,r2,255
 8013204:	e0bfff17 	ldw	r2,-4(fp)
 8013208:	10800044 	addi	r2,r2,1
 801320c:	10800003 	ldbu	r2,0(r2)
 8013210:	10803fcc 	andi	r2,r2,255
 8013214:	1004923a 	slli	r2,r2,8
 8013218:	1884b03a 	or	r2,r3,r2
 801321c:	10bfffcc 	andi	r2,r2,65535
         (*(current_ptr+1) << 8));
}
 8013220:	e037883a 	mov	sp,fp
 8013224:	df000017 	ldw	fp,0(sp)
 8013228:	dec00104 	addi	sp,sp,4
 801322c:	f800283a 	ret

08013230 <read_half_word_inc>:
* reads a half word from an address in flash, and increment the ptr
* this is necessary as we can't do 
* unaligned from an unaligned boundary in Nios II
*/
static alt_u16 read_half_word_inc(alt_u8** current_ptr)
{
 8013230:	defffc04 	addi	sp,sp,-16
 8013234:	dfc00315 	stw	ra,12(sp)
 8013238:	df000215 	stw	fp,8(sp)
 801323c:	df000204 	addi	fp,sp,8
 8013240:	e13fff15 	stw	r4,-4(fp)
  alt_u16 value = read_word(*current_ptr);
 8013244:	e0bfff17 	ldw	r2,-4(fp)
 8013248:	11000017 	ldw	r4,0(r2)
 801324c:	80131240 	call	8013124 <read_word>
 8013250:	e0bffe0d 	sth	r2,-8(fp)
  *current_ptr += 2;
 8013254:	e0bfff17 	ldw	r2,-4(fp)
 8013258:	10800017 	ldw	r2,0(r2)
 801325c:	10c00084 	addi	r3,r2,2
 8013260:	e0bfff17 	ldw	r2,-4(fp)
 8013264:	10c00015 	stw	r3,0(r2)
  return value;
 8013268:	e0bffe0b 	ldhu	r2,-8(fp)
}
 801326c:	e037883a 	mov	sp,fp
 8013270:	dfc00117 	ldw	ra,4(sp)
 8013274:	df000017 	ldw	fp,0(sp)
 8013278:	dec00204 	addi	sp,sp,8
 801327c:	f800283a 	ret

08013280 <check_file_header>:
*
* Check that this is a file header we can cope with and inrement the current ptr 
* accordingly
*/
static int check_file_header(alt_u8** current_ptr)
{
 8013280:	defff704 	addi	sp,sp,-36
 8013284:	dfc00815 	stw	ra,32(sp)
 8013288:	df000715 	stw	fp,28(sp)
 801328c:	df000704 	addi	fp,sp,28
 8013290:	e13fff15 	stw	r4,-4(fp)
  int ret_code = -ENOENT;
 8013294:	00bfff84 	movi	r2,-2
 8013298:	e0bffe15 	stw	r2,-8(fp)
  alt_u16 name_len, extra_len, version, flags, compression;
  alt_u32 uncompressed_len, compressed_len;

  version = read_half_word_inc(current_ptr);
 801329c:	e13fff17 	ldw	r4,-4(fp)
 80132a0:	80132300 	call	8013230 <read_half_word_inc>
 80132a4:	e0bffc0d 	sth	r2,-16(fp)

  /* We can parse files designed for version 10 */
  if (version > 10)
 80132a8:	e0bffc0b 	ldhu	r2,-16(fp)
 80132ac:	108002e8 	cmpgeui	r2,r2,11
 80132b0:	1000331e 	bne	r2,zero,8013380 <check_file_header+0x100>
  {
    goto exit;
  }

  /* Read the flags, right now any flags are an error */
  flags = read_half_word_inc(current_ptr);
 80132b4:	e13fff17 	ldw	r4,-4(fp)
 80132b8:	80132300 	call	8013230 <read_half_word_inc>
 80132bc:	e0bffb8d 	sth	r2,-18(fp)

  if (flags )
 80132c0:	e0bffb8b 	ldhu	r2,-18(fp)
 80132c4:	1004c03a 	cmpne	r2,r2,zero
 80132c8:	10002d1e 	bne	r2,zero,8013380 <check_file_header+0x100>
  {
    goto exit;
  }

  compression = read_half_word_inc(current_ptr);
 80132cc:	e13fff17 	ldw	r4,-4(fp)
 80132d0:	80132300 	call	8013230 <read_half_word_inc>
 80132d4:	e0bffb0d 	sth	r2,-20(fp)

  /* Skip the mod times and the CRC */
  *current_ptr += 8;
 80132d8:	e0bfff17 	ldw	r2,-4(fp)
 80132dc:	10800017 	ldw	r2,0(r2)
 80132e0:	10c00204 	addi	r3,r2,8
 80132e4:	e0bfff17 	ldw	r2,-4(fp)
 80132e8:	10c00015 	stw	r3,0(r2)

  /* Read the compressed and uncompressed lengths, these should be the same */
  compressed_len = read_word_inc(current_ptr);
 80132ec:	e13fff17 	ldw	r4,-4(fp)
 80132f0:	80131980 	call	8013198 <read_word_inc>
 80132f4:	e0bff915 	stw	r2,-28(fp)
  uncompressed_len = read_word_inc(current_ptr);
 80132f8:	e13fff17 	ldw	r4,-4(fp)
 80132fc:	80131980 	call	8013198 <read_word_inc>
 8013300:	e0bffa15 	stw	r2,-24(fp)

  if ((compression) || (compressed_len != uncompressed_len))
 8013304:	e0bffb0b 	ldhu	r2,-20(fp)
 8013308:	1004c03a 	cmpne	r2,r2,zero
 801330c:	10001c1e 	bne	r2,zero,8013380 <check_file_header+0x100>
 8013310:	e0fff917 	ldw	r3,-28(fp)
 8013314:	e0bffa17 	ldw	r2,-24(fp)
 8013318:	1880191e 	bne	r3,r2,8013380 <check_file_header+0x100>
  {
    goto exit;
  }

  /* Read the length of the name and extra fields */
  name_len = read_half_word_inc(current_ptr);
 801331c:	e13fff17 	ldw	r4,-4(fp)
 8013320:	80132300 	call	8013230 <read_half_word_inc>
 8013324:	e0bffd0d 	sth	r2,-12(fp)
  extra_len = read_half_word_inc(current_ptr);
 8013328:	e13fff17 	ldw	r4,-4(fp)
 801332c:	80132300 	call	8013230 <read_half_word_inc>
 8013330:	e0bffc8d 	sth	r2,-14(fp)

  /* Skip the name and extra fields */
  *current_ptr += name_len;
 8013334:	e0bfff17 	ldw	r2,-4(fp)
 8013338:	10c00017 	ldw	r3,0(r2)
 801333c:	e0bffd0b 	ldhu	r2,-12(fp)
 8013340:	1887883a 	add	r3,r3,r2
 8013344:	e0bfff17 	ldw	r2,-4(fp)
 8013348:	10c00015 	stw	r3,0(r2)
  *current_ptr += extra_len;
 801334c:	e0bfff17 	ldw	r2,-4(fp)
 8013350:	10c00017 	ldw	r3,0(r2)
 8013354:	e0bffc8b 	ldhu	r2,-14(fp)
 8013358:	1887883a 	add	r3,r3,r2
 801335c:	e0bfff17 	ldw	r2,-4(fp)
 8013360:	10c00015 	stw	r3,0(r2)

  *current_ptr += compressed_len;
 8013364:	e0bfff17 	ldw	r2,-4(fp)
 8013368:	10c00017 	ldw	r3,0(r2)
 801336c:	e0bff917 	ldw	r2,-28(fp)
 8013370:	1887883a 	add	r3,r3,r2
 8013374:	e0bfff17 	ldw	r2,-4(fp)
 8013378:	10c00015 	stw	r3,0(r2)

  ret_code = 0;
 801337c:	e03ffe15 	stw	zero,-8(fp)

exit:
  return ret_code;
 8013380:	e0bffe17 	ldw	r2,-8(fp)
}
 8013384:	e037883a 	mov	sp,fp
 8013388:	dfc00117 	ldw	ra,4(sp)
 801338c:	df000017 	ldw	fp,0(sp)
 8013390:	dec00204 	addi	sp,sp,8
 8013394:	f800283a 	ret

08013398 <check_directory_header>:
* Sanity check an entry in the directory structure
* 
* returns 0 for success -ENOENT if not
*/
int check_directory_header(alt_u8** current_ptr)
{
 8013398:	defff704 	addi	sp,sp,-36
 801339c:	dfc00815 	stw	ra,32(sp)
 80133a0:	df000715 	stw	fp,28(sp)
 80133a4:	df000704 	addi	fp,sp,28
 80133a8:	e13fff15 	stw	r4,-4(fp)
  int ret_code = -ENOENT;
 80133ac:	00bfff84 	movi	r2,-2
 80133b0:	e0bffe15 	stw	r2,-8(fp)
  alt_u16 version, flags, compression, name_len, extra_len, comment_len;
  alt_u32 compressed_len, uncompressed_len;

  /* We don't care what version made this file */
  *current_ptr += 2;
 80133b4:	e0bfff17 	ldw	r2,-4(fp)
 80133b8:	10800017 	ldw	r2,0(r2)
 80133bc:	10c00084 	addi	r3,r2,2
 80133c0:	e0bfff17 	ldw	r2,-4(fp)
 80133c4:	10c00015 	stw	r3,0(r2)

  /* We can parse files designed for version 10 */
  version = read_half_word_inc(current_ptr);
 80133c8:	e13fff17 	ldw	r4,-4(fp)
 80133cc:	80132300 	call	8013230 <read_half_word_inc>
 80133d0:	e0bffd8d 	sth	r2,-10(fp)
  if (version > 10)
 80133d4:	e0bffd8b 	ldhu	r2,-10(fp)
 80133d8:	108002e8 	cmpgeui	r2,r2,11
 80133dc:	1000331e 	bne	r2,zero,80134ac <check_directory_header+0x114>
  {
    goto exit;
  }

  /* Read the flags, any set are an error */
  flags = read_half_word_inc(current_ptr);
 80133e0:	e13fff17 	ldw	r4,-4(fp)
 80133e4:	80132300 	call	8013230 <read_half_word_inc>
 80133e8:	e0bffd0d 	sth	r2,-12(fp)

  if (flags )
 80133ec:	e0bffd0b 	ldhu	r2,-12(fp)
 80133f0:	1004c03a 	cmpne	r2,r2,zero
 80133f4:	10002d1e 	bne	r2,zero,80134ac <check_directory_header+0x114>
  {
    goto exit;
  }

  compression = read_half_word_inc(current_ptr);
 80133f8:	e13fff17 	ldw	r4,-4(fp)
 80133fc:	80132300 	call	8013230 <read_half_word_inc>
 8013400:	e0bffc8d 	sth	r2,-14(fp)


  /* Skip the mod times and the CRC */
  *current_ptr += 8;
 8013404:	e0bfff17 	ldw	r2,-4(fp)
 8013408:	10800017 	ldw	r2,0(r2)
 801340c:	10c00204 	addi	r3,r2,8
 8013410:	e0bfff17 	ldw	r2,-4(fp)
 8013414:	10c00015 	stw	r3,0(r2)

  /* Read the compressed and uncompressed lengths,these should be the same */
  compressed_len = read_word_inc(current_ptr);
 8013418:	e13fff17 	ldw	r4,-4(fp)
 801341c:	80131980 	call	8013198 <read_word_inc>
 8013420:	e0bffa15 	stw	r2,-24(fp)
  uncompressed_len = read_word_inc(current_ptr);
 8013424:	e13fff17 	ldw	r4,-4(fp)
 8013428:	80131980 	call	8013198 <read_word_inc>
 801342c:	e0bff915 	stw	r2,-28(fp)

  if ((compression) || (compressed_len != uncompressed_len))
 8013430:	e0bffc8b 	ldhu	r2,-14(fp)
 8013434:	1004c03a 	cmpne	r2,r2,zero
 8013438:	10001c1e 	bne	r2,zero,80134ac <check_directory_header+0x114>
 801343c:	e0fffa17 	ldw	r3,-24(fp)
 8013440:	e0bff917 	ldw	r2,-28(fp)
 8013444:	1880191e 	bne	r3,r2,80134ac <check_directory_header+0x114>
  {
    goto exit;
  }

  /* Read the length of the name, extra fields and comment fields*/
  name_len = read_half_word_inc(current_ptr);
 8013448:	e13fff17 	ldw	r4,-4(fp)
 801344c:	80132300 	call	8013230 <read_half_word_inc>
 8013450:	e0bffc0d 	sth	r2,-16(fp)
  extra_len = read_half_word_inc(current_ptr);
 8013454:	e13fff17 	ldw	r4,-4(fp)
 8013458:	80132300 	call	8013230 <read_half_word_inc>
 801345c:	e0bffb8d 	sth	r2,-18(fp)
  comment_len = read_half_word_inc(current_ptr);
 8013460:	e13fff17 	ldw	r4,-4(fp)
 8013464:	80132300 	call	8013230 <read_half_word_inc>
 8013468:	e0bffb0d 	sth	r2,-20(fp)

  /* We don't care about the disk number, the file attributes or the offset */
  *current_ptr += 12;
 801346c:	e0bfff17 	ldw	r2,-4(fp)
 8013470:	10800017 	ldw	r2,0(r2)
 8013474:	10c00304 	addi	r3,r2,12
 8013478:	e0bfff17 	ldw	r2,-4(fp)
 801347c:	10c00015 	stw	r3,0(r2)

  *current_ptr += (name_len + extra_len + comment_len);
 8013480:	e0bfff17 	ldw	r2,-4(fp)
 8013484:	11000017 	ldw	r4,0(r2)
 8013488:	e0fffc0b 	ldhu	r3,-16(fp)
 801348c:	e0bffb8b 	ldhu	r2,-18(fp)
 8013490:	1887883a 	add	r3,r3,r2
 8013494:	e0bffb0b 	ldhu	r2,-20(fp)
 8013498:	1885883a 	add	r2,r3,r2
 801349c:	2087883a 	add	r3,r4,r2
 80134a0:	e0bfff17 	ldw	r2,-4(fp)
 80134a4:	10c00015 	stw	r3,0(r2)

  ret_code = 0;
 80134a8:	e03ffe15 	stw	zero,-8(fp)
exit:
  return ret_code;
 80134ac:	e0bffe17 	ldw	r2,-8(fp)
}
 80134b0:	e037883a 	mov	sp,fp
 80134b4:	dfc00117 	ldw	ra,4(sp)
 80134b8:	df000017 	ldw	fp,0(sp)
 80134bc:	dec00204 	addi	sp,sp,8
 80134c0:	f800283a 	ret

080134c4 <check_directory_table>:
* tokens are in the right place, none of the files are compressed etc.
* 
* returns 0 for success -ENOENT if not
*/
static int check_directory_table(alt_ro_zipfs_dev* dev)
{
 80134c4:	defff904 	addi	sp,sp,-28
 80134c8:	dfc00615 	stw	ra,24(sp)
 80134cc:	df000515 	stw	fp,20(sp)
 80134d0:	df000504 	addi	fp,sp,20
 80134d4:	e13ffe15 	stw	r4,-8(fp)
  int ret_code = 0;
 80134d8:	e03ffc15 	stw	zero,-16(fp)
  alt_u8* current_ptr = (alt_u8*)dev->directory;
 80134dc:	e0bffe17 	ldw	r2,-8(fp)
 80134e0:	10800b17 	ldw	r2,44(r2)
 80134e4:	e0bffd15 	stw	r2,-12(fp)
  alt_u32 token;

  while(1)
  {
    token = read_word_inc(&current_ptr);
 80134e8:	e13ffd04 	addi	r4,fp,-12
 80134ec:	80131980 	call	8013198 <read_word_inc>
 80134f0:	e0bffb15 	stw	r2,-20(fp)

    switch(token)
 80134f4:	e0bffb17 	ldw	r2,-20(fp)
 80134f8:	e0bfff15 	stw	r2,-4(fp)
 80134fc:	00808074 	movhi	r2,513
 8013500:	1092d404 	addi	r2,r2,19280
 8013504:	e0ffff17 	ldw	r3,-4(fp)
 8013508:	18800526 	beq	r3,r2,8013520 <check_directory_table+0x5c>
 801350c:	00818174 	movhi	r2,1541
 8013510:	1092d404 	addi	r2,r2,19280
 8013514:	e0ffff17 	ldw	r3,-4(fp)
 8013518:	18800826 	beq	r3,r2,801353c <check_directory_table+0x78>
 801351c:	00000906 	br	8013544 <check_directory_table+0x80>
    {
    case ZIP_DIRECTORY_RECORD:
      {
        ret_code = check_directory_header(&current_ptr);
 8013520:	e13ffd04 	addi	r4,fp,-12
 8013524:	80133980 	call	8013398 <check_directory_header>
 8013528:	e0bffc15 	stw	r2,-16(fp)
        if (ret_code)
 801352c:	e0bffc17 	ldw	r2,-16(fp)
 8013530:	1004c03a 	cmpne	r2,r2,zero
 8013534:	1000051e 	bne	r2,zero,801354c <check_directory_table+0x88>
      {
        ret_code = -ENOENT;
        goto exit;
      }
    }
  }
 8013538:	003feb06 	br	80134e8 <check_directory_table+0x24>
        }
        break;
      }
    case ZIP_END_OF_DIRECTORY_RECORD:
      {
        ret_code = 0;
 801353c:	e03ffc15 	stw	zero,-16(fp)
        goto exit;
 8013540:	00000206 	br	801354c <check_directory_table+0x88>
      }
    default:
      {
        ret_code = -ENOENT;
 8013544:	00bfff84 	movi	r2,-2
 8013548:	e0bffc15 	stw	r2,-16(fp)
      }
    }
  }

exit:
  return ret_code;
 801354c:	e0bffc17 	ldw	r2,-16(fp)
}
 8013550:	e037883a 	mov	sp,fp
 8013554:	dfc00117 	ldw	ra,4(sp)
 8013558:	df000017 	ldw	fp,0(sp)
 801355c:	dec00204 	addi	sp,sp,8
 8013560:	f800283a 	ret

08013564 <find_directory_entry>:
* tokens are in the right place, none of the files are comrpessed etc.
* 
* returns 0 for success -ENOENT if not
*/
static int find_directory_entry(alt_ro_zipfs_dev* dev)
{
 8013564:	defff904 	addi	sp,sp,-28
 8013568:	dfc00615 	stw	ra,24(sp)
 801356c:	df000515 	stw	fp,20(sp)
 8013570:	df000504 	addi	fp,sp,20
 8013574:	e13ffe15 	stw	r4,-8(fp)
  int ret_code = 0;
 8013578:	e03ffc15 	stw	zero,-16(fp)
  alt_u32 token;
  alt_u8* current_ptr = dev->base;
 801357c:	e0bffe17 	ldw	r2,-8(fp)
 8013580:	10800a17 	ldw	r2,40(r2)
 8013584:	e0bffd15 	stw	r2,-12(fp)

  while(1)
  {
    token = read_word_inc(&current_ptr);
 8013588:	e13ffd04 	addi	r4,fp,-12
 801358c:	80131980 	call	8013198 <read_word_inc>
 8013590:	e0bffb15 	stw	r2,-20(fp)

    switch(token)
 8013594:	e0bffb17 	ldw	r2,-20(fp)
 8013598:	e0bfff15 	stw	r2,-4(fp)
 801359c:	00808074 	movhi	r2,513
 80135a0:	1092d404 	addi	r2,r2,19280
 80135a4:	e0ffff17 	ldw	r3,-4(fp)
 80135a8:	18800c26 	beq	r3,r2,80135dc <find_directory_entry+0x78>
 80135ac:	008100f4 	movhi	r2,1027
 80135b0:	1092d404 	addi	r2,r2,19280
 80135b4:	e0ffff17 	ldw	r3,-4(fp)
 80135b8:	18800126 	beq	r3,r2,80135c0 <find_directory_entry+0x5c>
 80135bc:	00000c06 	br	80135f0 <find_directory_entry+0x8c>
    {
    case ZIP_FILE_RECORD:
      {
        ret_code = check_file_header(&current_ptr);
 80135c0:	e13ffd04 	addi	r4,fp,-12
 80135c4:	80132800 	call	8013280 <check_file_header>
 80135c8:	e0bffc15 	stw	r2,-16(fp)
        if(ret_code)
 80135cc:	e0bffc17 	ldw	r2,-16(fp)
 80135d0:	1004c03a 	cmpne	r2,r2,zero
 80135d4:	1000081e 	bne	r2,zero,80135f8 <find_directory_entry+0x94>
      {
        ret_code = -ENOENT;
        goto exit;
      }
    }
  }
 80135d8:	003feb06 	br	8013588 <find_directory_entry+0x24>
        }
        break;
      }
    case ZIP_DIRECTORY_RECORD:
      {
        dev->directory = current_ptr - 4;
 80135dc:	e0bffd17 	ldw	r2,-12(fp)
 80135e0:	10ffff04 	addi	r3,r2,-4
 80135e4:	e0bffe17 	ldw	r2,-8(fp)
 80135e8:	10c00b15 	stw	r3,44(r2)
        goto exit;
 80135ec:	00000206 	br	80135f8 <find_directory_entry+0x94>
      }
    default:
      {
        ret_code = -ENOENT;
 80135f0:	00bfff84 	movi	r2,-2
 80135f4:	e0bffc15 	stw	r2,-16(fp)
        goto exit;
      }
    }
  }
exit:
  return ret_code;
 80135f8:	e0bffc17 	ldw	r2,-16(fp)
}
 80135fc:	e037883a 	mov	sp,fp
 8013600:	dfc00117 	ldw	ra,4(sp)
 8013604:	df000017 	ldw	fp,0(sp)
 8013608:	dec00204 	addi	sp,sp,8
 801360c:	f800283a 	ret

08013610 <find_file_entry_by_name>:
*
* returns -ENOENT if fails
*/
static int find_file_entry_by_name( alt_ro_zipfs_dev* dev, alt_fd* fd, 
                                    const alt_u8* name)
{
 8013610:	defff504 	addi	sp,sp,-44
 8013614:	dfc00a15 	stw	ra,40(sp)
 8013618:	df000915 	stw	fp,36(sp)
 801361c:	df000904 	addi	fp,sp,36
 8013620:	e13ffd15 	stw	r4,-12(fp)
 8013624:	e17ffe15 	stw	r5,-8(fp)
 8013628:	e1bfff15 	stw	r6,-4(fp)
  int ret_code = -ENOENT;
 801362c:	00bfff84 	movi	r2,-2
 8013630:	e0bffc15 	stw	r2,-16(fp)
  alt_u32 token;
  alt_u8* current_ptr = dev->directory;
 8013634:	e0bffd17 	ldw	r2,-12(fp)
 8013638:	10800b17 	ldw	r2,44(r2)
 801363c:	e0bffa15 	stw	r2,-24(fp)
  alt_u16 name_len, extra_len, comment_len, extra_file_len;
  alt_u32 offset;

  current_ptr = dev->directory;
 8013640:	e0bffd17 	ldw	r2,-12(fp)
 8013644:	10800b17 	ldw	r2,44(r2)
 8013648:	e0bffa15 	stw	r2,-24(fp)

  while(1)
  {
    token = read_word(current_ptr);
 801364c:	e13ffa17 	ldw	r4,-24(fp)
 8013650:	80131240 	call	8013124 <read_word>
 8013654:	e0bffb15 	stw	r2,-20(fp)

    if(token != ZIP_DIRECTORY_RECORD)
 8013658:	e0fffb17 	ldw	r3,-20(fp)
 801365c:	00808074 	movhi	r2,513
 8013660:	1092d404 	addi	r2,r2,19280
 8013664:	18803c1e 	bne	r3,r2,8013758 <find_file_entry_by_name+0x148>
    {
      break;
    }

    offset = read_word(current_ptr + ZIP_DIR_OFFSET);
 8013668:	e0bffa17 	ldw	r2,-24(fp)
 801366c:	11000a84 	addi	r4,r2,42
 8013670:	80131240 	call	8013124 <read_word>
 8013674:	e0bff715 	stw	r2,-36(fp)
    name_len = read_half_word(current_ptr + ZIP_DIR_NAME_LEN);
 8013678:	e0bffa17 	ldw	r2,-24(fp)
 801367c:	11000704 	addi	r4,r2,28
 8013680:	80131e80 	call	80131e8 <read_half_word>
 8013684:	e0bff98d 	sth	r2,-26(fp)
    extra_len = read_half_word(current_ptr + ZIP_DIR_EXTRA_LEN);
 8013688:	e0bffa17 	ldw	r2,-24(fp)
 801368c:	11000784 	addi	r4,r2,30
 8013690:	80131e80 	call	80131e8 <read_half_word>
 8013694:	e0bff90d 	sth	r2,-28(fp)
    comment_len = read_half_word(current_ptr + ZIP_DIR_COMMENT_LEN);
 8013698:	e0bffa17 	ldw	r2,-24(fp)
 801369c:	11000804 	addi	r4,r2,32
 80136a0:	80131e80 	call	80131e8 <read_half_word>
 80136a4:	e0bff88d 	sth	r2,-30(fp)

    if ((strlen((const char *)name) == name_len) && 
 80136a8:	e13fff17 	ldw	r4,-4(fp)
 80136ac:	800591c0 	call	800591c <strlen>
 80136b0:	1007883a 	mov	r3,r2
 80136b4:	e0bff98b 	ldhu	r2,-26(fp)
 80136b8:	18801c1e 	bne	r3,r2,801372c <find_file_entry_by_name+0x11c>
 80136bc:	e0bffa17 	ldw	r2,-24(fp)
 80136c0:	10800b84 	addi	r2,r2,46
 80136c4:	1009883a 	mov	r4,r2
 80136c8:	e17fff17 	ldw	r5,-4(fp)
 80136cc:	e1bff98b 	ldhu	r6,-26(fp)
 80136d0:	8016e440 	call	8016e44 <strncmp>
 80136d4:	1004c03a 	cmpne	r2,r2,zero
 80136d8:	1000141e 	bne	r2,zero,801372c <find_file_entry_by_name+0x11c>
    (!strncmp((const char *)(current_ptr+ZIP_DIR_HEADER_SIZE), (const char *)name, name_len)))
    {
      extra_file_len = read_half_word(dev->base + offset + ZIP_FILE_EXTRA_LEN); 
 80136dc:	e0bffd17 	ldw	r2,-12(fp)
 80136e0:	10c00a17 	ldw	r3,40(r2)
 80136e4:	e0bff717 	ldw	r2,-36(fp)
 80136e8:	1885883a 	add	r2,r3,r2
 80136ec:	11000704 	addi	r4,r2,28
 80136f0:	80131e80 	call	80131e8 <read_half_word>
 80136f4:	e0bff80d 	sth	r2,-32(fp)
      fd->priv = dev->base + ZIP_FILE_HEADER_SIZE 
 80136f8:	e0bffd17 	ldw	r2,-12(fp)
 80136fc:	10c00a17 	ldw	r3,40(r2)
 8013700:	e0bff717 	ldw	r2,-36(fp)
 8013704:	1887883a 	add	r3,r3,r2
 8013708:	e0bff80b 	ldhu	r2,-32(fp)
 801370c:	1887883a 	add	r3,r3,r2
 8013710:	e0bff98b 	ldhu	r2,-26(fp)
 8013714:	1885883a 	add	r2,r3,r2
 8013718:	10c00784 	addi	r3,r2,30
 801371c:	e0bffe17 	ldw	r2,-8(fp)
 8013720:	10c00115 	stw	r3,4(r2)
                  + offset + extra_file_len + name_len;
      ret_code = 0;
 8013724:	e03ffc15 	stw	zero,-16(fp)
      break;
 8013728:	00000b06 	br	8013758 <find_file_entry_by_name+0x148>
    }
    current_ptr += ZIP_DIR_HEADER_SIZE + name_len + extra_len + comment_len;
 801372c:	e0fff98b 	ldhu	r3,-26(fp)
 8013730:	e0bff90b 	ldhu	r2,-28(fp)
 8013734:	1887883a 	add	r3,r3,r2
 8013738:	e0bff88b 	ldhu	r2,-30(fp)
 801373c:	1885883a 	add	r2,r3,r2
 8013740:	1007883a 	mov	r3,r2
 8013744:	e0bffa17 	ldw	r2,-24(fp)
 8013748:	1885883a 	add	r2,r3,r2
 801374c:	10800b84 	addi	r2,r2,46
 8013750:	e0bffa15 	stw	r2,-24(fp)
  }
 8013754:	003fbd06 	br	801364c <find_file_entry_by_name+0x3c>

  return ret_code;
 8013758:	e0bffc17 	ldw	r2,-16(fp)
}
 801375c:	e037883a 	mov	sp,fp
 8013760:	dfc00117 	ldw	ra,4(sp)
 8013764:	df000017 	ldw	fp,0(sp)
 8013768:	dec00204 	addi	sp,sp,8
 801376c:	f800283a 	ret

08013770 <find_file_entry>:
*
* returns -EBADF if fails
*/
static int find_file_entry( alt_ro_zipfs_dev* dev, alt_fd* fd, 
                            alt_u8** start, alt_u32* len)
{
 8013770:	defff304 	addi	sp,sp,-52
 8013774:	dfc00c15 	stw	ra,48(sp)
 8013778:	df000b15 	stw	fp,44(sp)
 801377c:	df000b04 	addi	fp,sp,44
 8013780:	e13ffc15 	stw	r4,-16(fp)
 8013784:	e17ffd15 	stw	r5,-12(fp)
 8013788:	e1bffe15 	stw	r6,-8(fp)
 801378c:	e1ffff15 	stw	r7,-4(fp)
  int ret_code = -EBADF;
 8013790:	00bffdc4 	movi	r2,-9
 8013794:	e0bffb15 	stw	r2,-20(fp)
  alt_u32 token;
  alt_u8* current_ptr = (alt_u8*)dev->directory;
 8013798:	e0bffc17 	ldw	r2,-16(fp)
 801379c:	10800b17 	ldw	r2,44(r2)
 80137a0:	e0bff915 	stw	r2,-28(fp)
  alt_u8* end;
  alt_u16 name_len, extra_len, comment_len, extra_file_len;
  alt_u32 offset;

  current_ptr = dev->directory;
 80137a4:	e0bffc17 	ldw	r2,-16(fp)
 80137a8:	10800b17 	ldw	r2,44(r2)
 80137ac:	e0bff915 	stw	r2,-28(fp)
 80137b0:	00000006 	br	80137b4 <find_file_entry+0x44>

  while(1)
  {
    token = read_word(current_ptr);
 80137b4:	e13ff917 	ldw	r4,-28(fp)
 80137b8:	80131240 	call	8013124 <read_word>
 80137bc:	e0bffa15 	stw	r2,-24(fp)

    if(token != ZIP_DIRECTORY_RECORD)
 80137c0:	e0fffa17 	ldw	r3,-24(fp)
 80137c4:	00808074 	movhi	r2,513
 80137c8:	1092d404 	addi	r2,r2,19280
 80137cc:	1880421e 	bne	r3,r2,80138d8 <find_file_entry+0x168>
    {
      break;
    }
    
    *len = read_word(current_ptr + ZIP_DIR_UNCOMPRESSED_LEN);
 80137d0:	e0bff917 	ldw	r2,-28(fp)
 80137d4:	11000604 	addi	r4,r2,24
 80137d8:	80131240 	call	8013124 <read_word>
 80137dc:	1007883a 	mov	r3,r2
 80137e0:	e0bfff17 	ldw	r2,-4(fp)
 80137e4:	10c00015 	stw	r3,0(r2)
    offset = read_word(current_ptr + ZIP_DIR_OFFSET);
 80137e8:	e0bff917 	ldw	r2,-28(fp)
 80137ec:	11000a84 	addi	r4,r2,42
 80137f0:	80131240 	call	8013124 <read_word>
 80137f4:	e0bff515 	stw	r2,-44(fp)
    name_len = read_half_word(current_ptr + ZIP_DIR_NAME_LEN);
 80137f8:	e0bff917 	ldw	r2,-28(fp)
 80137fc:	11000704 	addi	r4,r2,28
 8013800:	80131e80 	call	80131e8 <read_half_word>
 8013804:	e0bff78d 	sth	r2,-34(fp)
    extra_len = read_half_word(current_ptr + ZIP_DIR_EXTRA_LEN);
 8013808:	e0bff917 	ldw	r2,-28(fp)
 801380c:	11000784 	addi	r4,r2,30
 8013810:	80131e80 	call	80131e8 <read_half_word>
 8013814:	e0bff70d 	sth	r2,-36(fp)
    comment_len = read_half_word(current_ptr + ZIP_DIR_COMMENT_LEN);
 8013818:	e0bff917 	ldw	r2,-28(fp)
 801381c:	11000804 	addi	r4,r2,32
 8013820:	80131e80 	call	80131e8 <read_half_word>
 8013824:	e0bff68d 	sth	r2,-38(fp)
    current_ptr += ZIP_DIR_HEADER_SIZE + name_len + extra_len + comment_len;
 8013828:	e0fff78b 	ldhu	r3,-34(fp)
 801382c:	e0bff70b 	ldhu	r2,-36(fp)
 8013830:	1887883a 	add	r3,r3,r2
 8013834:	e0bff68b 	ldhu	r2,-38(fp)
 8013838:	1885883a 	add	r2,r3,r2
 801383c:	1007883a 	mov	r3,r2
 8013840:	e0bff917 	ldw	r2,-28(fp)
 8013844:	1885883a 	add	r2,r3,r2
 8013848:	10800b84 	addi	r2,r2,46
 801384c:	e0bff915 	stw	r2,-28(fp)

    extra_file_len = read_half_word(dev->base + offset + ZIP_FILE_EXTRA_LEN); 
 8013850:	e0bffc17 	ldw	r2,-16(fp)
 8013854:	10c00a17 	ldw	r3,40(r2)
 8013858:	e0bff517 	ldw	r2,-44(fp)
 801385c:	1885883a 	add	r2,r3,r2
 8013860:	11000704 	addi	r4,r2,28
 8013864:	80131e80 	call	80131e8 <read_half_word>
 8013868:	e0bff60d 	sth	r2,-40(fp)

    *start = dev->base + ZIP_FILE_HEADER_SIZE + offset + extra_file_len + name_len;
 801386c:	e0bffc17 	ldw	r2,-16(fp)
 8013870:	10c00a17 	ldw	r3,40(r2)
 8013874:	e0bff517 	ldw	r2,-44(fp)
 8013878:	1887883a 	add	r3,r3,r2
 801387c:	e0bff60b 	ldhu	r2,-40(fp)
 8013880:	1887883a 	add	r3,r3,r2
 8013884:	e0bff78b 	ldhu	r2,-34(fp)
 8013888:	1885883a 	add	r2,r3,r2
 801388c:	10c00784 	addi	r3,r2,30
 8013890:	e0bffe17 	ldw	r2,-8(fp)
 8013894:	10c00015 	stw	r3,0(r2)

    /* The plus 1 is for the End of file condition */
    end = *start + *len;
 8013898:	e0bffe17 	ldw	r2,-8(fp)
 801389c:	10c00017 	ldw	r3,0(r2)
 80138a0:	e0bfff17 	ldw	r2,-4(fp)
 80138a4:	10800017 	ldw	r2,0(r2)
 80138a8:	1885883a 	add	r2,r3,r2
 80138ac:	e0bff815 	stw	r2,-32(fp)
    if ((fd->priv >= *start ) &&
 80138b0:	e0bffd17 	ldw	r2,-12(fp)
 80138b4:	10c00117 	ldw	r3,4(r2)
 80138b8:	e0bffe17 	ldw	r2,-8(fp)
 80138bc:	10800017 	ldw	r2,0(r2)
 80138c0:	18bfbc36 	bltu	r3,r2,80137b4 <find_file_entry+0x44>
 80138c4:	e0bffd17 	ldw	r2,-12(fp)
 80138c8:	10c00117 	ldw	r3,4(r2)
 80138cc:	e0bff817 	ldw	r2,-32(fp)
 80138d0:	10ffb836 	bltu	r2,r3,80137b4 <find_file_entry+0x44>
        (fd->priv <= end))
    {
      ret_code = 0;
 80138d4:	e03ffb15 	stw	zero,-20(fp)
      break;
    }
  }

  return ret_code;
 80138d8:	e0bffb17 	ldw	r2,-20(fp)
}
 80138dc:	e037883a 	mov	sp,fp
 80138e0:	dfc00117 	ldw	ra,4(sp)
 80138e4:	df000017 	ldw	fp,0(sp)
 80138e8:	dec00204 	addi	sp,sp,8
 80138ec:	f800283a 	ret

080138f0 <alt_ro_zipfs_open>:
* Find the Central dircetory and then find the pointer to this file
* from that.
*
*/
int alt_ro_zipfs_open(alt_fd* fd, const char* name, int flags, int mode)
{
 80138f0:	defff804 	addi	sp,sp,-32
 80138f4:	dfc00715 	stw	ra,28(sp)
 80138f8:	df000615 	stw	fp,24(sp)
 80138fc:	df000604 	addi	fp,sp,24
 8013900:	e13ffc15 	stw	r4,-16(fp)
 8013904:	e17ffd15 	stw	r5,-12(fp)
 8013908:	e1bffe15 	stw	r6,-8(fp)
 801390c:	e1ffff15 	stw	r7,-4(fp)
  int ret_code = -EROFS;
 8013910:	00bff884 	movi	r2,-30
 8013914:	e0bffb15 	stw	r2,-20(fp)
  alt_ro_zipfs_dev* dev= (alt_ro_zipfs_dev*)fd->dev;
 8013918:	e0bffc17 	ldw	r2,-16(fp)
 801391c:	10800017 	ldw	r2,0(r2)
 8013920:	e0bffa15 	stw	r2,-24(fp)

#ifdef ALT_USE_DIRECT_DRIVERS
  ALT_LINK_ERROR("Error: Read-only ZIP filesystem not supported when direct drivers are used.");
#endif

  if (flags == O_RDONLY )
 8013924:	e0bffe17 	ldw	r2,-8(fp)
 8013928:	1004c03a 	cmpne	r2,r2,zero
 801392c:	1000101e 	bne	r2,zero,8013970 <alt_ro_zipfs_open+0x80>
  {
    if (dev->directory != NULL)
 8013930:	e0bffa17 	ldw	r2,-24(fp)
 8013934:	10800b17 	ldw	r2,44(r2)
 8013938:	1005003a 	cmpeq	r2,r2,zero
 801393c:	10000c1e 	bne	r2,zero,8013970 <alt_ro_zipfs_open+0x80>
    {
      ret_code = find_file_entry_by_name( dev, fd, 
 8013940:	e0bffa17 	ldw	r2,-24(fp)
 8013944:	11000217 	ldw	r4,8(r2)
 8013948:	800591c0 	call	800591c <strlen>
 801394c:	1007883a 	mov	r3,r2
 8013950:	e0bffd17 	ldw	r2,-12(fp)
 8013954:	1885883a 	add	r2,r3,r2
 8013958:	10800044 	addi	r2,r2,1
 801395c:	100d883a 	mov	r6,r2
 8013960:	e13ffa17 	ldw	r4,-24(fp)
 8013964:	e17ffc17 	ldw	r5,-16(fp)
 8013968:	80136100 	call	8013610 <find_file_entry_by_name>
 801396c:	e0bffb15 	stw	r2,-20(fp)
                                          (const alt_u8*)(name+strlen(dev->fs_dev.name)+1));
    }
  }

  return ret_code;
 8013970:	e0bffb17 	ldw	r2,-20(fp)
}
 8013974:	e037883a 	mov	sp,fp
 8013978:	dfc00117 	ldw	ra,4(sp)
 801397c:	df000017 	ldw	fp,0(sp)
 8013980:	dec00204 	addi	sp,sp,8
 8013984:	f800283a 	ret

08013988 <alt_ro_zipfs_read>:
* alt_ro_zipfs_read
*
* Read the file
*/
int alt_ro_zipfs_read(alt_fd* fd, char* ptr, int len)
{
 8013988:	defff104 	addi	sp,sp,-60
 801398c:	dfc00e15 	stw	ra,56(sp)
 8013990:	df000d15 	stw	fp,52(sp)
 8013994:	df000d04 	addi	fp,sp,52
 8013998:	e13ffb15 	stw	r4,-20(fp)
 801399c:	e17ffc15 	stw	r5,-16(fp)
 80139a0:	e1bffd15 	stw	r6,-12(fp)
  alt_ro_zipfs_dev* dev= (alt_ro_zipfs_dev*)fd->dev;
 80139a4:	e0bffb17 	ldw	r2,-20(fp)
 80139a8:	10800017 	ldw	r2,0(r2)
 80139ac:	e0bff815 	stw	r2,-32(fp)
  alt_u8 *start, *current;
  alt_u32 file_len;
  int amount_to_copy;
  alt_irq_context context;

  find_file_entry(dev, fd, &start, &file_len);
 80139b0:	e1bff904 	addi	r6,fp,-28
 80139b4:	e1fffa04 	addi	r7,fp,-24
 80139b8:	e13ff817 	ldw	r4,-32(fp)
 80139bc:	e17ffb17 	ldw	r5,-20(fp)
 80139c0:	80137700 	call	8013770 <find_file_entry>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 80139c4:	0005303a 	rdctl	r2,status
 80139c8:	e0bff415 	stw	r2,-48(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 80139cc:	e0fff417 	ldw	r3,-48(fp)
 80139d0:	00bfff84 	movi	r2,-2
 80139d4:	1884703a 	and	r2,r3,r2
 80139d8:	1001703a 	wrctl	status,r2
  
  return context;
 80139dc:	e0bff417 	ldw	r2,-48(fp)
  *
  * We could use a Mutex or a binary semaphore, but those would have 
  * a much bigger code footprint and disable interrupts for as many 
  * instructions anyway
  */
  context = alt_irq_disable_all();
 80139e0:	e0bff515 	stw	r2,-44(fp)
  current = fd->priv;
 80139e4:	e0bffb17 	ldw	r2,-20(fp)
 80139e8:	10800117 	ldw	r2,4(r2)
 80139ec:	e0bff715 	stw	r2,-36(fp)
  amount_to_copy = MIN(len, file_len - (current - start));
 80139f0:	e13ffa17 	ldw	r4,-24(fp)
 80139f4:	e0fff717 	ldw	r3,-36(fp)
 80139f8:	e0bff917 	ldw	r2,-28(fp)
 80139fc:	1885c83a 	sub	r2,r3,r2
 8013a00:	2085c83a 	sub	r2,r4,r2
 8013a04:	e0fffd17 	ldw	r3,-12(fp)
 8013a08:	e0ffff15 	stw	r3,-4(fp)
 8013a0c:	e0bffe15 	stw	r2,-8(fp)
 8013a10:	e0bfff17 	ldw	r2,-4(fp)
 8013a14:	e0fffe17 	ldw	r3,-8(fp)
 8013a18:	10c0022e 	bgeu	r2,r3,8013a24 <alt_ro_zipfs_read+0x9c>
 8013a1c:	e0bfff17 	ldw	r2,-4(fp)
 8013a20:	e0bffe15 	stw	r2,-8(fp)
 8013a24:	e0fffe17 	ldw	r3,-8(fp)
 8013a28:	e0fff615 	stw	r3,-40(fp)
  fd->priv += amount_to_copy;
 8013a2c:	e0bffb17 	ldw	r2,-20(fp)
 8013a30:	10c00117 	ldw	r3,4(r2)
 8013a34:	e0bff617 	ldw	r2,-40(fp)
 8013a38:	1887883a 	add	r3,r3,r2
 8013a3c:	e0bffb17 	ldw	r2,-20(fp)
 8013a40:	10c00115 	stw	r3,4(r2)
 8013a44:	e0bff517 	ldw	r2,-44(fp)
 8013a48:	e0bff315 	stw	r2,-52(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8013a4c:	e0bff317 	ldw	r2,-52(fp)
 8013a50:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(context);

  memcpy(ptr, current, amount_to_copy);
 8013a54:	e1bff617 	ldw	r6,-40(fp)
 8013a58:	e0bffc17 	ldw	r2,-16(fp)
 8013a5c:	e0fff717 	ldw	r3,-36(fp)
 8013a60:	1009883a 	mov	r4,r2
 8013a64:	180b883a 	mov	r5,r3
 8013a68:	8004c480 	call	8004c48 <memcpy>
  
  return amount_to_copy;
 8013a6c:	e0bff617 	ldw	r2,-40(fp)
}
 8013a70:	e037883a 	mov	sp,fp
 8013a74:	dfc00117 	ldw	ra,4(sp)
 8013a78:	df000017 	ldw	fp,0(sp)
 8013a7c:	dec00204 	addi	sp,sp,8
 8013a80:	f800283a 	ret

08013a84 <alt_ro_zipfs_seek>:
* Move around within a file
*
* returns -EROFS for a seek beyond the end of the file
*/
int alt_ro_zipfs_seek(alt_fd* fd, int ptr, int dir)
{
 8013a84:	defff604 	addi	sp,sp,-40
 8013a88:	dfc00915 	stw	ra,36(sp)
 8013a8c:	df000815 	stw	fp,32(sp)
 8013a90:	df000804 	addi	fp,sp,32
 8013a94:	e13ffc15 	stw	r4,-16(fp)
 8013a98:	e17ffd15 	stw	r5,-12(fp)
 8013a9c:	e1bffe15 	stw	r6,-8(fp)
  int ret_code;
  alt_ro_zipfs_dev* dev= (alt_ro_zipfs_dev*)fd->dev;
 8013aa0:	e0bffc17 	ldw	r2,-16(fp)
 8013aa4:	10800017 	ldw	r2,0(r2)
 8013aa8:	e0bff815 	stw	r2,-32(fp)
  alt_u8* start;
  alt_u32 len;

  find_file_entry(dev, fd, &start, &len);
 8013aac:	e1bffa04 	addi	r6,fp,-24
 8013ab0:	e1fffb04 	addi	r7,fp,-20
 8013ab4:	e13ff817 	ldw	r4,-32(fp)
 8013ab8:	e17ffc17 	ldw	r5,-16(fp)
 8013abc:	80137700 	call	8013770 <find_file_entry>

  switch(dir)
 8013ac0:	e0bffe17 	ldw	r2,-8(fp)
 8013ac4:	e0bfff15 	stw	r2,-4(fp)
 8013ac8:	e0ffff17 	ldw	r3,-4(fp)
 8013acc:	18800060 	cmpeqi	r2,r3,1
 8013ad0:	1000071e 	bne	r2,zero,8013af0 <alt_ro_zipfs_seek+0x6c>
 8013ad4:	e0ffff17 	ldw	r3,-4(fp)
 8013ad8:	188000a0 	cmpeqi	r2,r3,2
 8013adc:	1000221e 	bne	r2,zero,8013b68 <alt_ro_zipfs_seek+0xe4>
 8013ae0:	e0ffff17 	ldw	r3,-4(fp)
 8013ae4:	1805003a 	cmpeq	r2,r3,zero
 8013ae8:	1000131e 	bne	r2,zero,8013b38 <alt_ro_zipfs_seek+0xb4>
 8013aec:	00002b06 	br	8013b9c <alt_ro_zipfs_seek+0x118>
  {

  case SEEK_CUR:
    {
      /* Seek from current position */
      if ((fd->priv + ptr) > (start +len))
 8013af0:	e0bffc17 	ldw	r2,-16(fp)
 8013af4:	10c00117 	ldw	r3,4(r2)
 8013af8:	e0bffd17 	ldw	r2,-12(fp)
 8013afc:	1889883a 	add	r4,r3,r2
 8013b00:	e0fffa17 	ldw	r3,-24(fp)
 8013b04:	e0bffb17 	ldw	r2,-20(fp)
 8013b08:	1885883a 	add	r2,r3,r2
 8013b0c:	1100032e 	bgeu	r2,r4,8013b1c <alt_ro_zipfs_seek+0x98>
      {
        ret_code = -EINVAL;
 8013b10:	00bffa84 	movi	r2,-22
 8013b14:	e0bff915 	stw	r2,-28(fp)
        goto exit;
 8013b18:	00002606 	br	8013bb4 <alt_ro_zipfs_seek+0x130>
      }

      fd->priv += ptr;
 8013b1c:	e0bffc17 	ldw	r2,-16(fp)
 8013b20:	10c00117 	ldw	r3,4(r2)
 8013b24:	e0bffd17 	ldw	r2,-12(fp)
 8013b28:	1887883a 	add	r3,r3,r2
 8013b2c:	e0bffc17 	ldw	r2,-16(fp)
 8013b30:	10c00115 	stw	r3,4(r2)
      break;
 8013b34:	00001906 	br	8013b9c <alt_ro_zipfs_seek+0x118>
    }
  case SEEK_SET:
    {
      /* Seek from the beginning */
      if (ptr > len)
 8013b38:	e0fffd17 	ldw	r3,-12(fp)
 8013b3c:	e0bffb17 	ldw	r2,-20(fp)
 8013b40:	10c0032e 	bgeu	r2,r3,8013b50 <alt_ro_zipfs_seek+0xcc>
      {
        ret_code = -EINVAL;
 8013b44:	00bffa84 	movi	r2,-22
 8013b48:	e0bff915 	stw	r2,-28(fp)
        goto exit;
 8013b4c:	00001906 	br	8013bb4 <alt_ro_zipfs_seek+0x130>
      }

      fd->priv = start + ptr;
 8013b50:	e0fffa17 	ldw	r3,-24(fp)
 8013b54:	e0bffd17 	ldw	r2,-12(fp)
 8013b58:	1887883a 	add	r3,r3,r2
 8013b5c:	e0bffc17 	ldw	r2,-16(fp)
 8013b60:	10c00115 	stw	r3,4(r2)
      break;
 8013b64:	00000d06 	br	8013b9c <alt_ro_zipfs_seek+0x118>
    }
  case SEEK_END:
    {
      if(ptr > 0)
 8013b68:	e0bffd17 	ldw	r2,-12(fp)
 8013b6c:	10800050 	cmplti	r2,r2,1
 8013b70:	1000031e 	bne	r2,zero,8013b80 <alt_ro_zipfs_seek+0xfc>
      {
        ret_code = -EINVAL;
 8013b74:	00bffa84 	movi	r2,-22
 8013b78:	e0bff915 	stw	r2,-28(fp)
        goto exit;
 8013b7c:	00000d06 	br	8013bb4 <alt_ro_zipfs_seek+0x130>
      }

      fd->priv = start + ptr + len;
 8013b80:	e0fffa17 	ldw	r3,-24(fp)
 8013b84:	e0bffd17 	ldw	r2,-12(fp)
 8013b88:	1887883a 	add	r3,r3,r2
 8013b8c:	e0bffb17 	ldw	r2,-20(fp)
 8013b90:	1887883a 	add	r3,r3,r2
 8013b94:	e0bffc17 	ldw	r2,-16(fp)
 8013b98:	10c00115 	stw	r3,4(r2)
      break;
    }
  }
  ret_code = (int)(fd->priv - start);
 8013b9c:	e0bffc17 	ldw	r2,-16(fp)
 8013ba0:	10800117 	ldw	r2,4(r2)
 8013ba4:	1007883a 	mov	r3,r2
 8013ba8:	e0bffa17 	ldw	r2,-24(fp)
 8013bac:	1885c83a 	sub	r2,r3,r2
 8013bb0:	e0bff915 	stw	r2,-28(fp)

exit:
  return ret_code;
 8013bb4:	e0bff917 	ldw	r2,-28(fp)
}
 8013bb8:	e037883a 	mov	sp,fp
 8013bbc:	dfc00117 	ldw	ra,4(sp)
 8013bc0:	df000017 	ldw	fp,0(sp)
 8013bc4:	dec00204 	addi	sp,sp,8
 8013bc8:	f800283a 	ret

08013bcc <alt_ro_zipfs_fstat>:
* 
* Return the file status information, the only fields we fill in are
* the size and that this really is a file, not a device
*/
int alt_ro_zipfs_fstat(alt_fd* fd, struct stat* buf)
{
 8013bcc:	defff804 	addi	sp,sp,-32
 8013bd0:	dfc00715 	stw	ra,28(sp)
 8013bd4:	df000615 	stw	fp,24(sp)
 8013bd8:	df000604 	addi	fp,sp,24
 8013bdc:	e13ffe15 	stw	r4,-8(fp)
 8013be0:	e17fff15 	stw	r5,-4(fp)
  alt_ro_zipfs_dev* dev= (alt_ro_zipfs_dev*)fd->dev;
 8013be4:	e0bffe17 	ldw	r2,-8(fp)
 8013be8:	10800017 	ldw	r2,0(r2)
 8013bec:	e0bffb15 	stw	r2,-20(fp)
  alt_u8* start;
  alt_u32 len;
  int ret_code = 0;
 8013bf0:	e03ffa15 	stw	zero,-24(fp)

  find_file_entry(dev, fd, &start, &len);
 8013bf4:	e1bffc04 	addi	r6,fp,-16
 8013bf8:	e1fffd04 	addi	r7,fp,-12
 8013bfc:	e13ffb17 	ldw	r4,-20(fp)
 8013c00:	e17ffe17 	ldw	r5,-8(fp)
 8013c04:	80137700 	call	8013770 <find_file_entry>
  buf->st_mode = S_IFREG;
 8013c08:	e0ffff17 	ldw	r3,-4(fp)
 8013c0c:	00a00014 	movui	r2,32768
 8013c10:	18800115 	stw	r2,4(r3)
  buf->st_size = (off_t)len;
 8013c14:	e0bffd17 	ldw	r2,-12(fp)
 8013c18:	1007883a 	mov	r3,r2
 8013c1c:	e0bfff17 	ldw	r2,-4(fp)
 8013c20:	10c00415 	stw	r3,16(r2)

  return ret_code;
 8013c24:	e0bffa17 	ldw	r2,-24(fp)
}
 8013c28:	e037883a 	mov	sp,fp
 8013c2c:	dfc00117 	ldw	ra,4(sp)
 8013c30:	df000017 	ldw	fp,0(sp)
 8013c34:	dec00204 	addi	sp,sp,8
 8013c38:	f800283a 	ret

08013c3c <alt_ro_zipfs_check_valid>:
* check that the file system is a valid zip file
* if so return 1
*
*/
int alt_ro_zipfs_check_valid(alt_ro_zipfs_dev* dev)
{
 8013c3c:	defffc04 	addi	sp,sp,-16
 8013c40:	dfc00315 	stw	ra,12(sp)
 8013c44:	df000215 	stw	fp,8(sp)
 8013c48:	df000204 	addi	fp,sp,8
 8013c4c:	e13fff15 	stw	r4,-4(fp)
  int ret_code = 0;
 8013c50:	e03ffe15 	stw	zero,-8(fp)
  if (find_directory_entry(dev) != -ENOENT)
 8013c54:	e13fff17 	ldw	r4,-4(fp)
 8013c58:	80135640 	call	8013564 <find_directory_entry>
 8013c5c:	10bfffa0 	cmpeqi	r2,r2,-2
 8013c60:	1000061e 	bne	r2,zero,8013c7c <alt_ro_zipfs_check_valid+0x40>
  {
    if (check_directory_table(dev) != -ENOENT)
 8013c64:	e13fff17 	ldw	r4,-4(fp)
 8013c68:	80134c40 	call	80134c4 <check_directory_table>
 8013c6c:	10bfffa0 	cmpeqi	r2,r2,-2
 8013c70:	1000021e 	bne	r2,zero,8013c7c <alt_ro_zipfs_check_valid+0x40>
    {
      ret_code = 1;
 8013c74:	00800044 	movi	r2,1
 8013c78:	e0bffe15 	stw	r2,-8(fp)
    }
  }

  return ret_code;
 8013c7c:	e0bffe17 	ldw	r2,-8(fp)
}
 8013c80:	e037883a 	mov	sp,fp
 8013c84:	dfc00117 	ldw	ra,4(sp)
 8013c88:	df000017 	ldw	fp,0(sp)
 8013c8c:	dec00204 	addi	sp,sp,8
 8013c90:	f800283a 	ret

08013c94 <alt_up_char_buffer_init>:
#include <priv/alt_file.h>

#include "altera_up_avalon_video_character_buffer_with_dma.h"
#include "altera_up_avalon_video_character_buffer_with_dma_regs.h"

void alt_up_char_buffer_init(alt_up_char_buffer_dev *char_buffer) {
 8013c94:	defffc04 	addi	sp,sp,-16
 8013c98:	dfc00315 	stw	ra,12(sp)
 8013c9c:	df000215 	stw	fp,8(sp)
 8013ca0:	df000204 	addi	fp,sp,8
 8013ca4:	e13fff15 	stw	r4,-4(fp)
	char * name;
	name = (char *) char_buffer->dev.name;
 8013ca8:	e0bfff17 	ldw	r2,-4(fp)
 8013cac:	10800217 	ldw	r2,8(r2)
 8013cb0:	e0bffe15 	stw	r2,-8(fp)

	for ( ; (*name) != '\0'; name++) {
 8013cb4:	00000c06 	br	8013ce8 <alt_up_char_buffer_init+0x54>
		if (strcmp(name, "_avalon_char_buffer_slave") == 0) {
 8013cb8:	e13ffe17 	ldw	r4,-8(fp)
 8013cbc:	014200b4 	movhi	r5,2050
 8013cc0:	29611704 	addi	r5,r5,-31652
 8013cc4:	800bc6c0 	call	800bc6c <strcmp>
 8013cc8:	1004c03a 	cmpne	r2,r2,zero
 8013ccc:	1000031e 	bne	r2,zero,8013cdc <alt_up_char_buffer_init+0x48>
			(*name) = '\0';
 8013cd0:	e0bffe17 	ldw	r2,-8(fp)
 8013cd4:	10000005 	stb	zero,0(r2)
			break;
 8013cd8:	00000a06 	br	8013d04 <alt_up_char_buffer_init+0x70>

void alt_up_char_buffer_init(alt_up_char_buffer_dev *char_buffer) {
	char * name;
	name = (char *) char_buffer->dev.name;

	for ( ; (*name) != '\0'; name++) {
 8013cdc:	e0bffe17 	ldw	r2,-8(fp)
 8013ce0:	10800044 	addi	r2,r2,1
 8013ce4:	e0bffe15 	stw	r2,-8(fp)
 8013ce8:	e0bffe17 	ldw	r2,-8(fp)
 8013cec:	10800003 	ldbu	r2,0(r2)
 8013cf0:	10803fcc 	andi	r2,r2,255
 8013cf4:	1080201c 	xori	r2,r2,128
 8013cf8:	10bfe004 	addi	r2,r2,-128
 8013cfc:	1004c03a 	cmpne	r2,r2,zero
 8013d00:	103fed1e 	bne	r2,zero,8013cb8 <alt_up_char_buffer_init+0x24>
			break;
		}
	}
	
	return;
}
 8013d04:	e037883a 	mov	sp,fp
 8013d08:	dfc00117 	ldw	ra,4(sp)
 8013d0c:	df000017 	ldw	fp,0(sp)
 8013d10:	dec00204 	addi	sp,sp,8
 8013d14:	f800283a 	ret

08013d18 <alt_up_char_buffer_open_dev>:

alt_up_char_buffer_dev* alt_up_char_buffer_open_dev(const char* name) {
 8013d18:	defffc04 	addi	sp,sp,-16
 8013d1c:	dfc00315 	stw	ra,12(sp)
 8013d20:	df000215 	stw	fp,8(sp)
 8013d24:	df000204 	addi	fp,sp,8
 8013d28:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_char_buffer_dev *dev = (alt_up_char_buffer_dev *)alt_find_dev(name, &alt_dev_list);
 8013d2c:	e13fff17 	ldw	r4,-4(fp)
 8013d30:	014200b4 	movhi	r5,2050
 8013d34:	29696104 	addi	r5,r5,-23164
 8013d38:	80158f00 	call	80158f0 <alt_find_dev>
 8013d3c:	e0bffe15 	stw	r2,-8(fp)

  return dev;
 8013d40:	e0bffe17 	ldw	r2,-8(fp)
}
 8013d44:	e037883a 	mov	sp,fp
 8013d48:	dfc00117 	ldw	ra,4(sp)
 8013d4c:	df000017 	ldw	fp,0(sp)
 8013d50:	dec00204 	addi	sp,sp,8
 8013d54:	f800283a 	ret

08013d58 <alt_up_char_buffer_draw>:

int alt_up_char_buffer_draw(alt_up_char_buffer_dev *char_buffer, unsigned char ch, 
	unsigned int x, unsigned int y) {
 8013d58:	defff904 	addi	sp,sp,-28
 8013d5c:	df000615 	stw	fp,24(sp)
 8013d60:	df000604 	addi	fp,sp,24
 8013d64:	e13ffb15 	stw	r4,-20(fp)
 8013d68:	e1bffd15 	stw	r6,-12(fp)
 8013d6c:	e1fffe15 	stw	r7,-8(fp)
 8013d70:	e17ffc05 	stb	r5,-16(fp)
	// boundary check
	if (x >= char_buffer->x_resolution || y >= char_buffer->y_resolution )
 8013d74:	e0bffb17 	ldw	r2,-20(fp)
 8013d78:	10c00c17 	ldw	r3,48(r2)
 8013d7c:	e0bffd17 	ldw	r2,-12(fp)
 8013d80:	10c0042e 	bgeu	r2,r3,8013d94 <alt_up_char_buffer_draw+0x3c>
 8013d84:	e0bffb17 	ldw	r2,-20(fp)
 8013d88:	10c00d17 	ldw	r3,52(r2)
 8013d8c:	e0bffe17 	ldw	r2,-8(fp)
 8013d90:	10c00336 	bltu	r2,r3,8013da0 <alt_up_char_buffer_draw+0x48>
		return -1;
 8013d94:	00bfffc4 	movi	r2,-1
 8013d98:	e0bfff15 	stw	r2,-4(fp)
 8013d9c:	00001d06 	br	8013e14 <alt_up_char_buffer_draw+0xbc>
	
	unsigned int addr = 0;
 8013da0:	e03ffa15 	stw	zero,-24(fp)
	addr |= ((x & char_buffer->x_coord_mask) << char_buffer->x_coord_offset);
 8013da4:	e0bffb17 	ldw	r2,-20(fp)
 8013da8:	10c00f17 	ldw	r3,60(r2)
 8013dac:	e0bffd17 	ldw	r2,-12(fp)
 8013db0:	1886703a 	and	r3,r3,r2
 8013db4:	e0bffb17 	ldw	r2,-20(fp)
 8013db8:	10800e17 	ldw	r2,56(r2)
 8013dbc:	1886983a 	sll	r3,r3,r2
 8013dc0:	e0bffa17 	ldw	r2,-24(fp)
 8013dc4:	10c4b03a 	or	r2,r2,r3
 8013dc8:	e0bffa15 	stw	r2,-24(fp)
	addr |= ((y & char_buffer->y_coord_mask) << char_buffer->y_coord_offset);
 8013dcc:	e0bffb17 	ldw	r2,-20(fp)
 8013dd0:	10c01117 	ldw	r3,68(r2)
 8013dd4:	e0bffe17 	ldw	r2,-8(fp)
 8013dd8:	1886703a 	and	r3,r3,r2
 8013ddc:	e0bffb17 	ldw	r2,-20(fp)
 8013de0:	10801017 	ldw	r2,64(r2)
 8013de4:	1886983a 	sll	r3,r3,r2
 8013de8:	e0bffa17 	ldw	r2,-24(fp)
 8013dec:	10c4b03a 	or	r2,r2,r3
 8013df0:	e0bffa15 	stw	r2,-24(fp)
	IOWR_8DIRECT(char_buffer->buffer_base, addr, ch);
 8013df4:	e0bffb17 	ldw	r2,-20(fp)
 8013df8:	10800b17 	ldw	r2,44(r2)
 8013dfc:	1007883a 	mov	r3,r2
 8013e00:	e0bffa17 	ldw	r2,-24(fp)
 8013e04:	1885883a 	add	r2,r3,r2
 8013e08:	e0fffc03 	ldbu	r3,-16(fp)
 8013e0c:	10c00025 	stbio	r3,0(r2)

	return 0;
 8013e10:	e03fff15 	stw	zero,-4(fp)
 8013e14:	e0bfff17 	ldw	r2,-4(fp)
}
 8013e18:	e037883a 	mov	sp,fp
 8013e1c:	df000017 	ldw	fp,0(sp)
 8013e20:	dec00104 	addi	sp,sp,4
 8013e24:	f800283a 	ret

08013e28 <alt_up_char_buffer_string>:

int alt_up_char_buffer_string(alt_up_char_buffer_dev *char_buffer, const char *ptr, 
	unsigned int x, unsigned int y) {
 8013e28:	defff904 	addi	sp,sp,-28
 8013e2c:	df000615 	stw	fp,24(sp)
 8013e30:	df000604 	addi	fp,sp,24
 8013e34:	e13ffb15 	stw	r4,-20(fp)
 8013e38:	e17ffc15 	stw	r5,-16(fp)
 8013e3c:	e1bffd15 	stw	r6,-12(fp)
 8013e40:	e1fffe15 	stw	r7,-8(fp)
	// boundary check
	if (x >= char_buffer->x_resolution || y >= char_buffer->y_resolution )
 8013e44:	e0bffb17 	ldw	r2,-20(fp)
 8013e48:	10c00c17 	ldw	r3,48(r2)
 8013e4c:	e0bffd17 	ldw	r2,-12(fp)
 8013e50:	10c0042e 	bgeu	r2,r3,8013e64 <alt_up_char_buffer_string+0x3c>
 8013e54:	e0bffb17 	ldw	r2,-20(fp)
 8013e58:	10c00d17 	ldw	r3,52(r2)
 8013e5c:	e0bffe17 	ldw	r2,-8(fp)
 8013e60:	10c00336 	bltu	r2,r3,8013e70 <alt_up_char_buffer_string+0x48>
		return -1;
 8013e64:	00bfffc4 	movi	r2,-1
 8013e68:	e0bfff15 	stw	r2,-4(fp)
 8013e6c:	00002e06 	br	8013f28 <alt_up_char_buffer_string+0x100>
	
	unsigned int offset = 0;
 8013e70:	e03ffa15 	stw	zero,-24(fp)
	offset = (y << char_buffer->y_coord_offset) + x;
 8013e74:	e0bffb17 	ldw	r2,-20(fp)
 8013e78:	10801017 	ldw	r2,64(r2)
 8013e7c:	1007883a 	mov	r3,r2
 8013e80:	e0bffe17 	ldw	r2,-8(fp)
 8013e84:	10c6983a 	sll	r3,r2,r3
 8013e88:	e0bffd17 	ldw	r2,-12(fp)
 8013e8c:	1885883a 	add	r2,r3,r2
 8013e90:	e0bffa15 	stw	r2,-24(fp)

	while ( *ptr )
 8013e94:	00001c06 	br	8013f08 <alt_up_char_buffer_string+0xe0>
	{
		IOWR_8DIRECT(char_buffer->buffer_base, offset, *ptr);
 8013e98:	e0bffb17 	ldw	r2,-20(fp)
 8013e9c:	10800b17 	ldw	r2,44(r2)
 8013ea0:	1007883a 	mov	r3,r2
 8013ea4:	e0bffa17 	ldw	r2,-24(fp)
 8013ea8:	1889883a 	add	r4,r3,r2
 8013eac:	e0bffc17 	ldw	r2,-16(fp)
 8013eb0:	10800003 	ldbu	r2,0(r2)
 8013eb4:	10c03fcc 	andi	r3,r2,255
 8013eb8:	18c0201c 	xori	r3,r3,128
 8013ebc:	18ffe004 	addi	r3,r3,-128
 8013ec0:	2005883a 	mov	r2,r4
 8013ec4:	10c00025 	stbio	r3,0(r2)
		++ptr;
 8013ec8:	e0bffc17 	ldw	r2,-16(fp)
 8013ecc:	10800044 	addi	r2,r2,1
 8013ed0:	e0bffc15 	stw	r2,-16(fp)
		if (++x >= char_buffer->x_resolution)
 8013ed4:	e0bffd17 	ldw	r2,-12(fp)
 8013ed8:	10800044 	addi	r2,r2,1
 8013edc:	e0bffd15 	stw	r2,-12(fp)
 8013ee0:	e0bffb17 	ldw	r2,-20(fp)
 8013ee4:	10c00c17 	ldw	r3,48(r2)
 8013ee8:	e0bffd17 	ldw	r2,-12(fp)
 8013eec:	10c00336 	bltu	r2,r3,8013efc <alt_up_char_buffer_string+0xd4>
			return -1;
 8013ef0:	00bfffc4 	movi	r2,-1
 8013ef4:	e0bfff15 	stw	r2,-4(fp)
 8013ef8:	00000b06 	br	8013f28 <alt_up_char_buffer_string+0x100>
		++offset;
 8013efc:	e0bffa17 	ldw	r2,-24(fp)
 8013f00:	10800044 	addi	r2,r2,1
 8013f04:	e0bffa15 	stw	r2,-24(fp)
		return -1;
	
	unsigned int offset = 0;
	offset = (y << char_buffer->y_coord_offset) + x;

	while ( *ptr )
 8013f08:	e0bffc17 	ldw	r2,-16(fp)
 8013f0c:	10800003 	ldbu	r2,0(r2)
 8013f10:	10803fcc 	andi	r2,r2,255
 8013f14:	1080201c 	xori	r2,r2,128
 8013f18:	10bfe004 	addi	r2,r2,-128
 8013f1c:	1004c03a 	cmpne	r2,r2,zero
 8013f20:	103fdd1e 	bne	r2,zero,8013e98 <alt_up_char_buffer_string+0x70>
		++ptr;
		if (++x >= char_buffer->x_resolution)
			return -1;
		++offset;
	}
	return 0;
 8013f24:	e03fff15 	stw	zero,-4(fp)
 8013f28:	e0bfff17 	ldw	r2,-4(fp)
}
 8013f2c:	e037883a 	mov	sp,fp
 8013f30:	df000017 	ldw	fp,0(sp)
 8013f34:	dec00104 	addi	sp,sp,4
 8013f38:	f800283a 	ret

08013f3c <alt_up_char_buffer_clear>:

int alt_up_char_buffer_clear(alt_up_char_buffer_dev *char_buffer) {
 8013f3c:	defffe04 	addi	sp,sp,-8
 8013f40:	df000115 	stw	fp,4(sp)
 8013f44:	df000104 	addi	fp,sp,4
 8013f48:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALT_UP_CHAR_BUFFER_CLR_SCRN(char_buffer->ctrl_reg_base, 1);
 8013f4c:	e0bfff17 	ldw	r2,-4(fp)
 8013f50:	10800a17 	ldw	r2,40(r2)
 8013f54:	10800084 	addi	r2,r2,2
 8013f58:	1007883a 	mov	r3,r2
 8013f5c:	00800044 	movi	r2,1
 8013f60:	18800025 	stbio	r2,0(r3)
	while ((IORD_ALT_UP_CHAR_BUFFER_CLR_SCRN(char_buffer->ctrl_reg_base) & ALT_UP_CHAR_BUFFER_CLR_SCRN_MSK) >> ALT_UP_CHAR_BUFFER_CLR_SCRN_OFST);
 8013f64:	e0bfff17 	ldw	r2,-4(fp)
 8013f68:	10800a17 	ldw	r2,40(r2)
 8013f6c:	10800084 	addi	r2,r2,2
 8013f70:	10800023 	ldbuio	r2,0(r2)
 8013f74:	1080004c 	andi	r2,r2,1
 8013f78:	10803fcc 	andi	r2,r2,255
 8013f7c:	1004c03a 	cmpne	r2,r2,zero
 8013f80:	103ff81e 	bne	r2,zero,8013f64 <alt_up_char_buffer_clear+0x28>
	return 0;
 8013f84:	0005883a 	mov	r2,zero
}
 8013f88:	e037883a 	mov	sp,fp
 8013f8c:	df000017 	ldw	fp,0(sp)
 8013f90:	dec00104 	addi	sp,sp,4
 8013f94:	f800283a 	ret

08013f98 <alt_up_pixel_buffer_dma_open_dev>:

#include "altera_up_avalon_video_pixel_buffer_dma.h"

#define ABS(x)	((x >= 0) ? (x) : (-(x)))

alt_up_pixel_buffer_dma_dev* alt_up_pixel_buffer_dma_open_dev(const char* name) {
 8013f98:	defffc04 	addi	sp,sp,-16
 8013f9c:	dfc00315 	stw	ra,12(sp)
 8013fa0:	df000215 	stw	fp,8(sp)
 8013fa4:	df000204 	addi	fp,sp,8
 8013fa8:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_pixel_buffer_dma_dev *dev = (alt_up_pixel_buffer_dma_dev*)alt_find_dev(name, &alt_dev_list);
 8013fac:	e13fff17 	ldw	r4,-4(fp)
 8013fb0:	014200b4 	movhi	r5,2050
 8013fb4:	29696104 	addi	r5,r5,-23164
 8013fb8:	80158f00 	call	80158f0 <alt_find_dev>
 8013fbc:	e0bffe15 	stw	r2,-8(fp)

  return dev;
 8013fc0:	e0bffe17 	ldw	r2,-8(fp)
}
 8013fc4:	e037883a 	mov	sp,fp
 8013fc8:	dfc00117 	ldw	ra,4(sp)
 8013fcc:	df000017 	ldw	fp,0(sp)
 8013fd0:	dec00204 	addi	sp,sp,8
 8013fd4:	f800283a 	ret

08013fd8 <alt_up_pixel_buffer_dma_draw>:

int alt_up_pixel_buffer_dma_draw(alt_up_pixel_buffer_dma_dev *pixel_buffer, unsigned int color, unsigned int x, unsigned int y)
/* This function draws a pixel to the back buffer.
 */
{
 8013fd8:	defff904 	addi	sp,sp,-28
 8013fdc:	df000615 	stw	fp,24(sp)
 8013fe0:	df000604 	addi	fp,sp,24
 8013fe4:	e13ffb15 	stw	r4,-20(fp)
 8013fe8:	e17ffc15 	stw	r5,-16(fp)
 8013fec:	e1bffd15 	stw	r6,-12(fp)
 8013ff0:	e1fffe15 	stw	r7,-8(fp)
	// boundary check
	if (x >= pixel_buffer->x_resolution || y >= pixel_buffer->y_resolution )
 8013ff4:	e0bffb17 	ldw	r2,-20(fp)
 8013ff8:	10c00f17 	ldw	r3,60(r2)
 8013ffc:	e0bffd17 	ldw	r2,-12(fp)
 8014000:	10c0042e 	bgeu	r2,r3,8014014 <alt_up_pixel_buffer_dma_draw+0x3c>
 8014004:	e0bffb17 	ldw	r2,-20(fp)
 8014008:	10c01017 	ldw	r3,64(r2)
 801400c:	e0bffe17 	ldw	r2,-8(fp)
 8014010:	10c00336 	bltu	r2,r3,8014020 <alt_up_pixel_buffer_dma_draw+0x48>
		return -1;
 8014014:	00bfffc4 	movi	r2,-1
 8014018:	e0bfff15 	stw	r2,-4(fp)
 801401c:	00005106 	br	8014164 <alt_up_pixel_buffer_dma_draw+0x18c>

	unsigned int addr = 0;
 8014020:	e03ffa15 	stw	zero,-24(fp)
	/* Check the mode VGA Pixel Buffer is using. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
 8014024:	e0bffb17 	ldw	r2,-20(fp)
 8014028:	10800d17 	ldw	r2,52(r2)
 801402c:	1004c03a 	cmpne	r2,r2,zero
 8014030:	1000151e 	bne	r2,zero,8014088 <alt_up_pixel_buffer_dma_draw+0xb0>
		/* For X-Y addressing mode, the address format is | unused | Y | X |. So shift bits for coordinates X and Y into their respective locations. */
		addr |= ((x & pixel_buffer->x_coord_mask) << pixel_buffer->x_coord_offset);
 8014034:	e0bffb17 	ldw	r2,-20(fp)
 8014038:	10c01217 	ldw	r3,72(r2)
 801403c:	e0bffd17 	ldw	r2,-12(fp)
 8014040:	1886703a 	and	r3,r3,r2
 8014044:	e0bffb17 	ldw	r2,-20(fp)
 8014048:	10801117 	ldw	r2,68(r2)
 801404c:	1886983a 	sll	r3,r3,r2
 8014050:	e0bffa17 	ldw	r2,-24(fp)
 8014054:	10c4b03a 	or	r2,r2,r3
 8014058:	e0bffa15 	stw	r2,-24(fp)
		addr |= ((y & pixel_buffer->y_coord_mask) << pixel_buffer->y_coord_offset);
 801405c:	e0bffb17 	ldw	r2,-20(fp)
 8014060:	10c01417 	ldw	r3,80(r2)
 8014064:	e0bffe17 	ldw	r2,-8(fp)
 8014068:	1886703a 	and	r3,r3,r2
 801406c:	e0bffb17 	ldw	r2,-20(fp)
 8014070:	10801317 	ldw	r2,76(r2)
 8014074:	1886983a 	sll	r3,r3,r2
 8014078:	e0bffa17 	ldw	r2,-24(fp)
 801407c:	10c4b03a 	or	r2,r2,r3
 8014080:	e0bffa15 	stw	r2,-24(fp)
 8014084:	00001706 	br	80140e4 <alt_up_pixel_buffer_dma_draw+0x10c>
	} else {
		/* In a consecutive addressing mode, the pixels are stored in consecutive memory locations. So the address of a pixel at (x,y) can be computed as
		 * (y*x_resolution + x).*/
		addr += ((x & pixel_buffer->x_coord_mask) << pixel_buffer->x_coord_offset);
 8014088:	e0bffb17 	ldw	r2,-20(fp)
 801408c:	10c01217 	ldw	r3,72(r2)
 8014090:	e0bffd17 	ldw	r2,-12(fp)
 8014094:	1886703a 	and	r3,r3,r2
 8014098:	e0bffb17 	ldw	r2,-20(fp)
 801409c:	10801117 	ldw	r2,68(r2)
 80140a0:	1886983a 	sll	r3,r3,r2
 80140a4:	e0bffa17 	ldw	r2,-24(fp)
 80140a8:	10c5883a 	add	r2,r2,r3
 80140ac:	e0bffa15 	stw	r2,-24(fp)
		addr += (((y & pixel_buffer->y_coord_mask) * pixel_buffer->x_resolution) << pixel_buffer->x_coord_offset);
 80140b0:	e0bffb17 	ldw	r2,-20(fp)
 80140b4:	10c01417 	ldw	r3,80(r2)
 80140b8:	e0bffe17 	ldw	r2,-8(fp)
 80140bc:	1886703a 	and	r3,r3,r2
 80140c0:	e0bffb17 	ldw	r2,-20(fp)
 80140c4:	10800f17 	ldw	r2,60(r2)
 80140c8:	1887383a 	mul	r3,r3,r2
 80140cc:	e0bffb17 	ldw	r2,-20(fp)
 80140d0:	10801117 	ldw	r2,68(r2)
 80140d4:	1886983a 	sll	r3,r3,r2
 80140d8:	e0bffa17 	ldw	r2,-24(fp)
 80140dc:	10c5883a 	add	r2,r2,r3
 80140e0:	e0bffa15 	stw	r2,-24(fp)
	}
	/* Now, depending on the color depth, write the pixel color to the specified memory location. */
	if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
 80140e4:	e0bffb17 	ldw	r2,-20(fp)
 80140e8:	10800e17 	ldw	r2,56(r2)
 80140ec:	10800058 	cmpnei	r2,r2,1
 80140f0:	1000081e 	bne	r2,zero,8014114 <alt_up_pixel_buffer_dma_draw+0x13c>
		IOWR_8DIRECT(pixel_buffer->back_buffer_start_address, addr, color);
 80140f4:	e0bffb17 	ldw	r2,-20(fp)
 80140f8:	10800c17 	ldw	r2,48(r2)
 80140fc:	1007883a 	mov	r3,r2
 8014100:	e0bffa17 	ldw	r2,-24(fp)
 8014104:	1885883a 	add	r2,r3,r2
 8014108:	e0fffc17 	ldw	r3,-16(fp)
 801410c:	10c00025 	stbio	r3,0(r2)
 8014110:	00001306 	br	8014160 <alt_up_pixel_buffer_dma_draw+0x188>
	} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
 8014114:	e0bffb17 	ldw	r2,-20(fp)
 8014118:	10800e17 	ldw	r2,56(r2)
 801411c:	10800098 	cmpnei	r2,r2,2
 8014120:	1000081e 	bne	r2,zero,8014144 <alt_up_pixel_buffer_dma_draw+0x16c>
		IOWR_16DIRECT(pixel_buffer->back_buffer_start_address, addr, color);
 8014124:	e0bffb17 	ldw	r2,-20(fp)
 8014128:	10800c17 	ldw	r2,48(r2)
 801412c:	1007883a 	mov	r3,r2
 8014130:	e0bffa17 	ldw	r2,-24(fp)
 8014134:	1885883a 	add	r2,r3,r2
 8014138:	e0fffc17 	ldw	r3,-16(fp)
 801413c:	10c0002d 	sthio	r3,0(r2)
 8014140:	00000706 	br	8014160 <alt_up_pixel_buffer_dma_draw+0x188>
	} else {
		IOWR_32DIRECT(pixel_buffer->back_buffer_start_address, addr, color);
 8014144:	e0bffb17 	ldw	r2,-20(fp)
 8014148:	10800c17 	ldw	r2,48(r2)
 801414c:	1007883a 	mov	r3,r2
 8014150:	e0bffa17 	ldw	r2,-24(fp)
 8014154:	1885883a 	add	r2,r3,r2
 8014158:	e0fffc17 	ldw	r3,-16(fp)
 801415c:	10c00035 	stwio	r3,0(r2)
	}

	return 0;
 8014160:	e03fff15 	stw	zero,-4(fp)
 8014164:	e0bfff17 	ldw	r2,-4(fp)
}
 8014168:	e037883a 	mov	sp,fp
 801416c:	df000017 	ldw	fp,0(sp)
 8014170:	dec00104 	addi	sp,sp,4
 8014174:	f800283a 	ret

08014178 <alt_up_pixel_buffer_dma_change_back_buffer_address>:

int alt_up_pixel_buffer_dma_change_back_buffer_address(alt_up_pixel_buffer_dma_dev *pixel_buffer, unsigned int new_address)
/* This function changes the memory address for the back buffer. */
{
 8014178:	defffd04 	addi	sp,sp,-12
 801417c:	df000215 	stw	fp,8(sp)
 8014180:	df000204 	addi	fp,sp,8
 8014184:	e13ffe15 	stw	r4,-8(fp)
 8014188:	e17fff15 	stw	r5,-4(fp)
	IOWR_32DIRECT(pixel_buffer->base, 4, new_address);
 801418c:	e0bffe17 	ldw	r2,-8(fp)
 8014190:	10800a17 	ldw	r2,40(r2)
 8014194:	10800104 	addi	r2,r2,4
 8014198:	e0ffff17 	ldw	r3,-4(fp)
 801419c:	10c00035 	stwio	r3,0(r2)
	pixel_buffer->back_buffer_start_address = IORD_32DIRECT(pixel_buffer->base, 4);
 80141a0:	e0bffe17 	ldw	r2,-8(fp)
 80141a4:	10800a17 	ldw	r2,40(r2)
 80141a8:	10800104 	addi	r2,r2,4
 80141ac:	10800037 	ldwio	r2,0(r2)
 80141b0:	1007883a 	mov	r3,r2
 80141b4:	e0bffe17 	ldw	r2,-8(fp)
 80141b8:	10c00c15 	stw	r3,48(r2)
	return 0;
 80141bc:	0005883a 	mov	r2,zero
}
 80141c0:	e037883a 	mov	sp,fp
 80141c4:	df000017 	ldw	fp,0(sp)
 80141c8:	dec00104 	addi	sp,sp,4
 80141cc:	f800283a 	ret

080141d0 <alt_up_pixel_buffer_dma_swap_buffers>:

int alt_up_pixel_buffer_dma_swap_buffers(alt_up_pixel_buffer_dma_dev *pixel_buffer)
/* This function swaps the front and back buffers. At the next refresh cycle the back buffer will be drawn on the screen
 * and will become the front buffer. */
{
 80141d0:	defffe04 	addi	sp,sp,-8
 80141d4:	df000115 	stw	fp,4(sp)
 80141d8:	df000104 	addi	fp,sp,4
 80141dc:	e13fff15 	stw	r4,-4(fp)
	register unsigned int temp = pixel_buffer->back_buffer_start_address;
 80141e0:	e0bfff17 	ldw	r2,-4(fp)
 80141e4:	11000c17 	ldw	r4,48(r2)
	IOWR_32DIRECT(pixel_buffer->base, 0, 1);
 80141e8:	e0bfff17 	ldw	r2,-4(fp)
 80141ec:	10800a17 	ldw	r2,40(r2)
 80141f0:	1007883a 	mov	r3,r2
 80141f4:	00800044 	movi	r2,1
 80141f8:	18800035 	stwio	r2,0(r3)
	pixel_buffer->back_buffer_start_address = pixel_buffer->buffer_start_address;
 80141fc:	e0bfff17 	ldw	r2,-4(fp)
 8014200:	10c00b17 	ldw	r3,44(r2)
 8014204:	e0bfff17 	ldw	r2,-4(fp)
 8014208:	10c00c15 	stw	r3,48(r2)
	pixel_buffer->buffer_start_address = temp;
 801420c:	e0bfff17 	ldw	r2,-4(fp)
 8014210:	11000b15 	stw	r4,44(r2)
	return 0;
 8014214:	0005883a 	mov	r2,zero
}
 8014218:	e037883a 	mov	sp,fp
 801421c:	df000017 	ldw	fp,0(sp)
 8014220:	dec00104 	addi	sp,sp,4
 8014224:	f800283a 	ret

08014228 <alt_up_pixel_buffer_dma_check_swap_buffers_status>:
int alt_up_pixel_buffer_dma_check_swap_buffers_status(alt_up_pixel_buffer_dma_dev *pixel_buffer)
/* This function checks if the buffer swap has occured. Since the buffer swap only happens after an entire screen is drawn,
 * it is important to wait for this function to return 0 before proceeding to draw on either buffer. When both front and the back buffers
 * have the same address calling the alt_up_pixel_buffer_dma_swap_buffers(...) function and then waiting for this function to return 0, causes your program to
 * wait for the screen to refresh. */
{
 8014228:	defffe04 	addi	sp,sp,-8
 801422c:	df000115 	stw	fp,4(sp)
 8014230:	df000104 	addi	fp,sp,4
 8014234:	e13fff15 	stw	r4,-4(fp)
	return (IORD_32DIRECT(pixel_buffer->base, 12) & 0x1);
 8014238:	e0bfff17 	ldw	r2,-4(fp)
 801423c:	10800a17 	ldw	r2,40(r2)
 8014240:	10800304 	addi	r2,r2,12
 8014244:	10800037 	ldwio	r2,0(r2)
 8014248:	1080004c 	andi	r2,r2,1
}
 801424c:	e037883a 	mov	sp,fp
 8014250:	df000017 	ldw	fp,0(sp)
 8014254:	dec00104 	addi	sp,sp,4
 8014258:	f800283a 	ret

0801425c <alt_up_pixel_buffer_dma_clear_screen>:

void alt_up_pixel_buffer_dma_clear_screen(alt_up_pixel_buffer_dma_dev *pixel_buffer, int backbuffer)
/* This function clears the screen by setting each pixel to a black color. */
{
 801425c:	defff604 	addi	sp,sp,-40
 8014260:	df000915 	stw	fp,36(sp)
 8014264:	df000904 	addi	fp,sp,36
 8014268:	e13ff715 	stw	r4,-36(fp)
 801426c:	e17ff815 	stw	r5,-32(fp)
	register unsigned int addr;
	register unsigned int limit_x, limit_y;
	
	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
 8014270:	e0bff817 	ldw	r2,-32(fp)
 8014274:	10800058 	cmpnei	r2,r2,1
 8014278:	1000041e 	bne	r2,zero,801428c <alt_up_pixel_buffer_dma_clear_screen+0x30>
		addr = pixel_buffer->back_buffer_start_address;
 801427c:	e0bff717 	ldw	r2,-36(fp)
 8014280:	10800c17 	ldw	r2,48(r2)
 8014284:	e0bfff15 	stw	r2,-4(fp)
 8014288:	00000306 	br	8014298 <alt_up_pixel_buffer_dma_clear_screen+0x3c>
	else
		addr = pixel_buffer->buffer_start_address;
 801428c:	e0bff717 	ldw	r2,-36(fp)
 8014290:	10800b17 	ldw	r2,44(r2)
 8014294:	e0bfff15 	stw	r2,-4(fp)
	limit_x = pixel_buffer->x_resolution;
 8014298:	e0bff717 	ldw	r2,-36(fp)
 801429c:	10800f17 	ldw	r2,60(r2)
 80142a0:	e0bffe15 	stw	r2,-8(fp)
	/* In 16 and 32-bit color modes we use twice or four times more memory for the display buffer.*/
	if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
 80142a4:	e0bff717 	ldw	r2,-36(fp)
 80142a8:	10800e17 	ldw	r2,56(r2)
 80142ac:	10800098 	cmpnei	r2,r2,2
 80142b0:	1000051e 	bne	r2,zero,80142c8 <alt_up_pixel_buffer_dma_clear_screen+0x6c>
		limit_x = limit_x << 1;
 80142b4:	e0fffe17 	ldw	r3,-8(fp)
 80142b8:	e0fffe17 	ldw	r3,-8(fp)
 80142bc:	18c5883a 	add	r2,r3,r3
 80142c0:	e0bffe15 	stw	r2,-8(fp)
 80142c4:	00000506 	br	80142dc <alt_up_pixel_buffer_dma_clear_screen+0x80>
	} else {
		limit_x = limit_x << 2;
 80142c8:	e13ffe17 	ldw	r4,-8(fp)
 80142cc:	e13ffe17 	ldw	r4,-8(fp)
 80142d0:	2105883a 	add	r2,r4,r4
 80142d4:	1085883a 	add	r2,r2,r2
 80142d8:	e0bffe15 	stw	r2,-8(fp)
	}	
	limit_y = pixel_buffer->y_resolution;
 80142dc:	e0bff717 	ldw	r2,-36(fp)
 80142e0:	10801017 	ldw	r2,64(r2)
 80142e4:	e0bffd15 	stw	r2,-12(fp)

	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
 80142e8:	e0bff717 	ldw	r2,-36(fp)
 80142ec:	10800d17 	ldw	r2,52(r2)
 80142f0:	1004c03a 	cmpne	r2,r2,zero
 80142f4:	10001e1e 	bne	r2,zero,8014370 <alt_up_pixel_buffer_dma_clear_screen+0x114>
		/* Clear the screen when the VGA is set up in an XY addressing mode. */
		register unsigned int x,y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
 80142f8:	e0bff717 	ldw	r2,-36(fp)
 80142fc:	10801317 	ldw	r2,76(r2)
 8014300:	e0bffa15 	stw	r2,-24(fp)

		for (y = 0; y < limit_y; y++)
 8014304:	e03ffb15 	stw	zero,-20(fp)
 8014308:	00001506 	br	8014360 <alt_up_pixel_buffer_dma_clear_screen+0x104>
		{
			for (x = 0; x < limit_x; x = x + 4)
 801430c:	e03ffc15 	stw	zero,-16(fp)
 8014310:	00000706 	br	8014330 <alt_up_pixel_buffer_dma_clear_screen+0xd4>
			{
				IOWR_32DIRECT(addr, x, 0);
 8014314:	e0ffff17 	ldw	r3,-4(fp)
 8014318:	e0bffc17 	ldw	r2,-16(fp)
 801431c:	1885883a 	add	r2,r3,r2
 8014320:	10000035 	stwio	zero,0(r2)
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;

		for (y = 0; y < limit_y; y++)
		{
			for (x = 0; x < limit_x; x = x + 4)
 8014324:	e0bffc17 	ldw	r2,-16(fp)
 8014328:	10800104 	addi	r2,r2,4
 801432c:	e0bffc15 	stw	r2,-16(fp)
 8014330:	e0fffc17 	ldw	r3,-16(fp)
 8014334:	e13ffe17 	ldw	r4,-8(fp)
 8014338:	193ff636 	bltu	r3,r4,8014314 <alt_up_pixel_buffer_dma_clear_screen+0xb8>
			{
				IOWR_32DIRECT(addr, x, 0);
			}
			addr = addr + (1 << offset_y);
 801433c:	e0fffa17 	ldw	r3,-24(fp)
 8014340:	00800044 	movi	r2,1
 8014344:	10c4983a 	sll	r2,r2,r3
 8014348:	e0ffff17 	ldw	r3,-4(fp)
 801434c:	1887883a 	add	r3,r3,r2
 8014350:	e0ffff15 	stw	r3,-4(fp)
		/* Clear the screen when the VGA is set up in an XY addressing mode. */
		register unsigned int x,y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;

		for (y = 0; y < limit_y; y++)
 8014354:	e13ffb17 	ldw	r4,-20(fp)
 8014358:	21000044 	addi	r4,r4,1
 801435c:	e13ffb15 	stw	r4,-20(fp)
 8014360:	e0bffb17 	ldw	r2,-20(fp)
 8014364:	e0fffd17 	ldw	r3,-12(fp)
 8014368:	10ffe836 	bltu	r2,r3,801430c <alt_up_pixel_buffer_dma_clear_screen+0xb0>
 801436c:	00001006 	br	80143b0 <alt_up_pixel_buffer_dma_clear_screen+0x154>
			addr = addr + (1 << offset_y);
		}
	} else {
		/* Clear the screen when the VGA is set up in a linear addressing mode. */
		register int x;
		limit_y = limit_x*limit_y;	
 8014370:	e13ffd17 	ldw	r4,-12(fp)
 8014374:	e0bffe17 	ldw	r2,-8(fp)
 8014378:	2089383a 	mul	r4,r4,r2
 801437c:	e13ffd15 	stw	r4,-12(fp)

		for (x = 0; x < limit_y; x = x + 4)
 8014380:	e03ff915 	stw	zero,-28(fp)
 8014384:	00000706 	br	80143a4 <alt_up_pixel_buffer_dma_clear_screen+0x148>
		{
			IOWR_32DIRECT(addr, x, 0);
 8014388:	e0ffff17 	ldw	r3,-4(fp)
 801438c:	e0bff917 	ldw	r2,-28(fp)
 8014390:	1885883a 	add	r2,r3,r2
 8014394:	10000035 	stwio	zero,0(r2)
	} else {
		/* Clear the screen when the VGA is set up in a linear addressing mode. */
		register int x;
		limit_y = limit_x*limit_y;	

		for (x = 0; x < limit_y; x = x + 4)
 8014398:	e0fff917 	ldw	r3,-28(fp)
 801439c:	18c00104 	addi	r3,r3,4
 80143a0:	e0fff915 	stw	r3,-28(fp)
 80143a4:	e0bff917 	ldw	r2,-28(fp)
 80143a8:	e13ffd17 	ldw	r4,-12(fp)
 80143ac:	113ff636 	bltu	r2,r4,8014388 <alt_up_pixel_buffer_dma_clear_screen+0x12c>
		{
			IOWR_32DIRECT(addr, x, 0);
		}
	}
}
 80143b0:	e037883a 	mov	sp,fp
 80143b4:	df000017 	ldw	fp,0(sp)
 80143b8:	dec00104 	addi	sp,sp,4
 80143bc:	f800283a 	ret

080143c0 <alt_up_pixel_buffer_dma_draw_box>:

void alt_up_pixel_buffer_dma_draw_box(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int y0, int x1, int y1, int color, int backbuffer)
/* This function draws a filled box. */
{
 80143c0:	deffed04 	addi	sp,sp,-76
 80143c4:	df001215 	stw	fp,72(sp)
 80143c8:	df001204 	addi	fp,sp,72
 80143cc:	e13fee15 	stw	r4,-72(fp)
 80143d0:	e17fef15 	stw	r5,-68(fp)
 80143d4:	e1bff015 	stw	r6,-64(fp)
 80143d8:	e1fff115 	stw	r7,-60(fp)
	register unsigned int addr;
	register unsigned int limit_x = pixel_buffer->x_resolution;
 80143dc:	e0bfee17 	ldw	r2,-72(fp)
 80143e0:	10800f17 	ldw	r2,60(r2)
 80143e4:	e0bffe15 	stw	r2,-8(fp)
	register unsigned int limit_y = pixel_buffer->y_resolution;
 80143e8:	e0bfee17 	ldw	r2,-72(fp)
 80143ec:	10801017 	ldw	r2,64(r2)
 80143f0:	e0bffd15 	stw	r2,-12(fp)
	register unsigned int temp;
	register unsigned int l_x = x0;
 80143f4:	e0bfef17 	ldw	r2,-68(fp)
 80143f8:	e0bffb15 	stw	r2,-20(fp)
	register unsigned int r_x = x1;
 80143fc:	e0fff117 	ldw	r3,-60(fp)
 8014400:	e0fffa15 	stw	r3,-24(fp)
	register unsigned int t_y = y0;
 8014404:	e13ff017 	ldw	r4,-64(fp)
 8014408:	e13ff915 	stw	r4,-28(fp)
	register unsigned int b_y = y1;
 801440c:	e0800117 	ldw	r2,4(fp)
 8014410:	e0bff815 	stw	r2,-32(fp)
	register unsigned int local_color = color;
 8014414:	e0c00217 	ldw	r3,8(fp)
 8014418:	e0fff715 	stw	r3,-36(fp)
	
	/* Check coordinates */
	if (l_x > r_x)
 801441c:	e13ffa17 	ldw	r4,-24(fp)
 8014420:	e0bffb17 	ldw	r2,-20(fp)
 8014424:	2080062e 	bgeu	r4,r2,8014440 <alt_up_pixel_buffer_dma_draw_box+0x80>
	{
		temp = l_x;
 8014428:	e0fffb17 	ldw	r3,-20(fp)
 801442c:	e0fffc15 	stw	r3,-16(fp)
		l_x = r_x;
 8014430:	e13ffa17 	ldw	r4,-24(fp)
 8014434:	e13ffb15 	stw	r4,-20(fp)
		r_x = temp;
 8014438:	e0bffc17 	ldw	r2,-16(fp)
 801443c:	e0bffa15 	stw	r2,-24(fp)
	}
	if (t_y > b_y)
 8014440:	e0fff817 	ldw	r3,-32(fp)
 8014444:	e13ff917 	ldw	r4,-28(fp)
 8014448:	1900062e 	bgeu	r3,r4,8014464 <alt_up_pixel_buffer_dma_draw_box+0xa4>
	{
		temp = t_y;
 801444c:	e0bff917 	ldw	r2,-28(fp)
 8014450:	e0bffc15 	stw	r2,-16(fp)
		t_y = b_y;
 8014454:	e0fff817 	ldw	r3,-32(fp)
 8014458:	e0fff915 	stw	r3,-28(fp)
		b_y = temp;
 801445c:	e13ffc17 	ldw	r4,-16(fp)
 8014460:	e13ff815 	stw	r4,-32(fp)
	}
	if ((l_x >= limit_x) || (t_y >= limit_y) || (r_x < 0) || (b_y < 0))
 8014464:	e0bffb17 	ldw	r2,-20(fp)
 8014468:	e0fffe17 	ldw	r3,-8(fp)
 801446c:	10c10d2e 	bgeu	r2,r3,80148a4 <alt_up_pixel_buffer_dma_draw_box+0x4e4>
 8014470:	e13ff917 	ldw	r4,-28(fp)
 8014474:	e0bffd17 	ldw	r2,-12(fp)
 8014478:	20800136 	bltu	r4,r2,8014480 <alt_up_pixel_buffer_dma_draw_box+0xc0>
	{
		/* Drawing outside of the window, so don't bother. */
		return;
 801447c:	00010906 	br	80148a4 <alt_up_pixel_buffer_dma_draw_box+0x4e4>
	/* Clip the box and draw only within the confines of the screen. */
	if (l_x < 0)
	{
		l_x = 0;
	}
	if (r_x >= limit_x)
 8014480:	e0fffa17 	ldw	r3,-24(fp)
 8014484:	e13ffe17 	ldw	r4,-8(fp)
 8014488:	19000336 	bltu	r3,r4,8014498 <alt_up_pixel_buffer_dma_draw_box+0xd8>
	{
		r_x = limit_x - 1;
 801448c:	e0bffe17 	ldw	r2,-8(fp)
 8014490:	10bfffc4 	addi	r2,r2,-1
 8014494:	e0bffa15 	stw	r2,-24(fp)
	}
	if (t_y < 0)
	{
		t_y = 0;
	}
	if (b_y >= limit_y)
 8014498:	e0fff817 	ldw	r3,-32(fp)
 801449c:	e13ffd17 	ldw	r4,-12(fp)
 80144a0:	19000336 	bltu	r3,r4,80144b0 <alt_up_pixel_buffer_dma_draw_box+0xf0>
	{
		b_y = limit_y - 1;
 80144a4:	e0bffd17 	ldw	r2,-12(fp)
 80144a8:	10bfffc4 	addi	r2,r2,-1
 80144ac:	e0bff815 	stw	r2,-32(fp)
	}

	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
 80144b0:	e0800317 	ldw	r2,12(fp)
 80144b4:	10800058 	cmpnei	r2,r2,1
 80144b8:	1000041e 	bne	r2,zero,80144cc <alt_up_pixel_buffer_dma_draw_box+0x10c>
		addr = pixel_buffer->back_buffer_start_address;
 80144bc:	e0bfee17 	ldw	r2,-72(fp)
 80144c0:	10800c17 	ldw	r2,48(r2)
 80144c4:	e0bfff15 	stw	r2,-4(fp)
 80144c8:	00000306 	br	80144d8 <alt_up_pixel_buffer_dma_draw_box+0x118>
	else
		addr = pixel_buffer->buffer_start_address;
 80144cc:	e0bfee17 	ldw	r2,-72(fp)
 80144d0:	10800b17 	ldw	r2,44(r2)
 80144d4:	e0bfff15 	stw	r2,-4(fp)

	/* Draw the box using one of the addressing modes. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
 80144d8:	e0bfee17 	ldw	r2,-72(fp)
 80144dc:	10800d17 	ldw	r2,52(r2)
 80144e0:	1004c03a 	cmpne	r2,r2,zero
 80144e4:	1000721e 	bne	r2,zero,80146b0 <alt_up_pixel_buffer_dma_draw_box+0x2f0>
		/* Draw a box of a given color on the screen using the XY addressing mode. */
		register unsigned int x,y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
 80144e8:	e0bfee17 	ldw	r2,-72(fp)
 80144ec:	10801317 	ldw	r2,76(r2)
 80144f0:	e0bff415 	stw	r2,-48(fp)
		addr = addr + (t_y << offset_y);
 80144f4:	e0bff417 	ldw	r2,-48(fp)
 80144f8:	e0fff917 	ldw	r3,-28(fp)
 80144fc:	1884983a 	sll	r2,r3,r2
 8014500:	e13fff17 	ldw	r4,-4(fp)
 8014504:	2089883a 	add	r4,r4,r2
 8014508:	e13fff15 	stw	r4,-4(fp)
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
 801450c:	e0bfee17 	ldw	r2,-72(fp)
 8014510:	10800e17 	ldw	r2,56(r2)
 8014514:	10800058 	cmpnei	r2,r2,1
 8014518:	10001e1e 	bne	r2,zero,8014594 <alt_up_pixel_buffer_dma_draw_box+0x1d4>
			for (y = t_y; y <= b_y; y++)
 801451c:	e0bff917 	ldw	r2,-28(fp)
 8014520:	e0bff515 	stw	r2,-44(fp)
 8014524:	00001706 	br	8014584 <alt_up_pixel_buffer_dma_draw_box+0x1c4>
			{
				for (x = l_x; x <= r_x; x++)
 8014528:	e0fffb17 	ldw	r3,-20(fp)
 801452c:	e0fff615 	stw	r3,-40(fp)
 8014530:	00000806 	br	8014554 <alt_up_pixel_buffer_dma_draw_box+0x194>
				{
					IOWR_8DIRECT(addr, x, local_color);
 8014534:	e0ffff17 	ldw	r3,-4(fp)
 8014538:	e0bff617 	ldw	r2,-40(fp)
 801453c:	1885883a 	add	r2,r3,r2
 8014540:	e0fff717 	ldw	r3,-36(fp)
 8014544:	10c00025 	stbio	r3,0(r2)
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
 8014548:	e13ff617 	ldw	r4,-40(fp)
 801454c:	21000044 	addi	r4,r4,1
 8014550:	e13ff615 	stw	r4,-40(fp)
 8014554:	e0bffa17 	ldw	r2,-24(fp)
 8014558:	e0fff617 	ldw	r3,-40(fp)
 801455c:	10fff52e 	bgeu	r2,r3,8014534 <alt_up_pixel_buffer_dma_draw_box+0x174>
				{
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + (1 << offset_y);
 8014560:	e0fff417 	ldw	r3,-48(fp)
 8014564:	00800044 	movi	r2,1
 8014568:	10c4983a 	sll	r2,r2,r3
 801456c:	e13fff17 	ldw	r4,-4(fp)
 8014570:	2089883a 	add	r4,r4,r2
 8014574:	e13fff15 	stw	r4,-4(fp)
		addr = addr + (t_y << offset_y);
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
 8014578:	e0bff517 	ldw	r2,-44(fp)
 801457c:	10800044 	addi	r2,r2,1
 8014580:	e0bff515 	stw	r2,-44(fp)
 8014584:	e0fff817 	ldw	r3,-32(fp)
 8014588:	e13ff517 	ldw	r4,-44(fp)
 801458c:	193fe62e 	bgeu	r3,r4,8014528 <alt_up_pixel_buffer_dma_draw_box+0x168>
 8014590:	0000c406 	br	80148a4 <alt_up_pixel_buffer_dma_draw_box+0x4e4>
				{
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
 8014594:	e0bfee17 	ldw	r2,-72(fp)
 8014598:	10800e17 	ldw	r2,56(r2)
 801459c:	10800098 	cmpnei	r2,r2,2
 80145a0:	1000211e 	bne	r2,zero,8014628 <alt_up_pixel_buffer_dma_draw_box+0x268>
			for (y = t_y; y <= b_y; y++)
 80145a4:	e0bff917 	ldw	r2,-28(fp)
 80145a8:	e0bff515 	stw	r2,-44(fp)
 80145ac:	00001a06 	br	8014618 <alt_up_pixel_buffer_dma_draw_box+0x258>
			{
				for (x = l_x; x <= r_x; x++)
 80145b0:	e0fffb17 	ldw	r3,-20(fp)
 80145b4:	e0fff615 	stw	r3,-40(fp)
 80145b8:	00000b06 	br	80145e8 <alt_up_pixel_buffer_dma_draw_box+0x228>
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
 80145bc:	e13ff617 	ldw	r4,-40(fp)
 80145c0:	e13ff617 	ldw	r4,-40(fp)
 80145c4:	2105883a 	add	r2,r4,r4
 80145c8:	1007883a 	mov	r3,r2
 80145cc:	e0bfff17 	ldw	r2,-4(fp)
 80145d0:	1885883a 	add	r2,r3,r2
 80145d4:	e0fff717 	ldw	r3,-36(fp)
 80145d8:	10c0002d 	sthio	r3,0(r2)
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
 80145dc:	e0bff617 	ldw	r2,-40(fp)
 80145e0:	10800044 	addi	r2,r2,1
 80145e4:	e0bff615 	stw	r2,-40(fp)
 80145e8:	e0fffa17 	ldw	r3,-24(fp)
 80145ec:	e13ff617 	ldw	r4,-40(fp)
 80145f0:	193ff22e 	bgeu	r3,r4,80145bc <alt_up_pixel_buffer_dma_draw_box+0x1fc>
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
				}
				addr = addr + (1 << offset_y);
 80145f4:	e0fff417 	ldw	r3,-48(fp)
 80145f8:	00800044 	movi	r2,1
 80145fc:	10c4983a 	sll	r2,r2,r3
 8014600:	e0ffff17 	ldw	r3,-4(fp)
 8014604:	1887883a 	add	r3,r3,r2
 8014608:	e0ffff15 	stw	r3,-4(fp)
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
 801460c:	e13ff517 	ldw	r4,-44(fp)
 8014610:	21000044 	addi	r4,r4,1
 8014614:	e13ff515 	stw	r4,-44(fp)
 8014618:	e0bff817 	ldw	r2,-32(fp)
 801461c:	e0fff517 	ldw	r3,-44(fp)
 8014620:	10ffe32e 	bgeu	r2,r3,80145b0 <alt_up_pixel_buffer_dma_draw_box+0x1f0>
 8014624:	00009f06 	br	80148a4 <alt_up_pixel_buffer_dma_draw_box+0x4e4>
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
 8014628:	e13ff917 	ldw	r4,-28(fp)
 801462c:	e13ff515 	stw	r4,-44(fp)
 8014630:	00001b06 	br	80146a0 <alt_up_pixel_buffer_dma_draw_box+0x2e0>
			{
				for (x = l_x; x <= r_x; x++)
 8014634:	e0bffb17 	ldw	r2,-20(fp)
 8014638:	e0bff615 	stw	r2,-40(fp)
 801463c:	00000c06 	br	8014670 <alt_up_pixel_buffer_dma_draw_box+0x2b0>
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
 8014640:	e0fff617 	ldw	r3,-40(fp)
 8014644:	e0fff617 	ldw	r3,-40(fp)
 8014648:	18c5883a 	add	r2,r3,r3
 801464c:	1085883a 	add	r2,r2,r2
 8014650:	1007883a 	mov	r3,r2
 8014654:	e0bfff17 	ldw	r2,-4(fp)
 8014658:	1885883a 	add	r2,r3,r2
 801465c:	e0fff717 	ldw	r3,-36(fp)
 8014660:	10c00035 	stwio	r3,0(r2)
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
 8014664:	e13ff617 	ldw	r4,-40(fp)
 8014668:	21000044 	addi	r4,r4,1
 801466c:	e13ff615 	stw	r4,-40(fp)
 8014670:	e0bffa17 	ldw	r2,-24(fp)
 8014674:	e0fff617 	ldw	r3,-40(fp)
 8014678:	10fff12e 	bgeu	r2,r3,8014640 <alt_up_pixel_buffer_dma_draw_box+0x280>
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
				}
				addr = addr + (1 << offset_y);
 801467c:	e0fff417 	ldw	r3,-48(fp)
 8014680:	00800044 	movi	r2,1
 8014684:	10c4983a 	sll	r2,r2,r3
 8014688:	e13fff17 	ldw	r4,-4(fp)
 801468c:	2089883a 	add	r4,r4,r2
 8014690:	e13fff15 	stw	r4,-4(fp)
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
 8014694:	e0bff517 	ldw	r2,-44(fp)
 8014698:	10800044 	addi	r2,r2,1
 801469c:	e0bff515 	stw	r2,-44(fp)
 80146a0:	e0fff817 	ldw	r3,-32(fp)
 80146a4:	e13ff517 	ldw	r4,-44(fp)
 80146a8:	193fe22e 	bgeu	r3,r4,8014634 <alt_up_pixel_buffer_dma_draw_box+0x274>
 80146ac:	00007d06 	br	80148a4 <alt_up_pixel_buffer_dma_draw_box+0x4e4>
	} else {
		/* Draw a box of a given color on the screen using the linear addressing mode. */
		register unsigned int x,y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
 80146b0:	e0bfee17 	ldw	r2,-72(fp)
 80146b4:	10800e17 	ldw	r2,56(r2)
 80146b8:	10800058 	cmpnei	r2,r2,1
 80146bc:	1000221e 	bne	r2,zero,8014748 <alt_up_pixel_buffer_dma_draw_box+0x388>
			addr = addr + t_y * limit_x;
 80146c0:	e0fff917 	ldw	r3,-28(fp)
 80146c4:	e13ffe17 	ldw	r4,-8(fp)
 80146c8:	1905383a 	mul	r2,r3,r4
 80146cc:	e0ffff17 	ldw	r3,-4(fp)
 80146d0:	1887883a 	add	r3,r3,r2
 80146d4:	e0ffff15 	stw	r3,-4(fp)
			for (y = t_y; y <= b_y; y++)
 80146d8:	e13ff917 	ldw	r4,-28(fp)
 80146dc:	e13ff215 	stw	r4,-56(fp)
 80146e0:	00001506 	br	8014738 <alt_up_pixel_buffer_dma_draw_box+0x378>
			{
				for (x = l_x; x <= r_x; x++)
 80146e4:	e0bffb17 	ldw	r2,-20(fp)
 80146e8:	e0bff315 	stw	r2,-52(fp)
 80146ec:	00000806 	br	8014710 <alt_up_pixel_buffer_dma_draw_box+0x350>
				{
					IOWR_8DIRECT(addr, x, local_color);
 80146f0:	e0ffff17 	ldw	r3,-4(fp)
 80146f4:	e0bff317 	ldw	r2,-52(fp)
 80146f8:	1885883a 	add	r2,r3,r2
 80146fc:	e0fff717 	ldw	r3,-36(fp)
 8014700:	10c00025 	stbio	r3,0(r2)
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
 8014704:	e0fff317 	ldw	r3,-52(fp)
 8014708:	18c00044 	addi	r3,r3,1
 801470c:	e0fff315 	stw	r3,-52(fp)
 8014710:	e13ffa17 	ldw	r4,-24(fp)
 8014714:	e0bff317 	ldw	r2,-52(fp)
 8014718:	20bff52e 	bgeu	r4,r2,80146f0 <alt_up_pixel_buffer_dma_draw_box+0x330>
				{
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + limit_x;
 801471c:	e0ffff17 	ldw	r3,-4(fp)
 8014720:	e13ffe17 	ldw	r4,-8(fp)
 8014724:	1907883a 	add	r3,r3,r4
 8014728:	e0ffff15 	stw	r3,-4(fp)
		register unsigned int x,y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
 801472c:	e0bff217 	ldw	r2,-56(fp)
 8014730:	10800044 	addi	r2,r2,1
 8014734:	e0bff215 	stw	r2,-56(fp)
 8014738:	e0fff817 	ldw	r3,-32(fp)
 801473c:	e13ff217 	ldw	r4,-56(fp)
 8014740:	193fe82e 	bgeu	r3,r4,80146e4 <alt_up_pixel_buffer_dma_draw_box+0x324>
 8014744:	00005706 	br	80148a4 <alt_up_pixel_buffer_dma_draw_box+0x4e4>
				{
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
 8014748:	e0bfee17 	ldw	r2,-72(fp)
 801474c:	10800e17 	ldw	r2,56(r2)
 8014750:	10800098 	cmpnei	r2,r2,2
 8014754:	1000291e 	bne	r2,zero,80147fc <alt_up_pixel_buffer_dma_draw_box+0x43c>
			limit_x = limit_x << 1;
 8014758:	e0fffe17 	ldw	r3,-8(fp)
 801475c:	e0fffe17 	ldw	r3,-8(fp)
 8014760:	18c5883a 	add	r2,r3,r3
 8014764:	e0bffe15 	stw	r2,-8(fp)
			addr = addr + t_y * limit_x;
 8014768:	e13ff917 	ldw	r4,-28(fp)
 801476c:	e0fffe17 	ldw	r3,-8(fp)
 8014770:	20c5383a 	mul	r2,r4,r3
 8014774:	e13fff17 	ldw	r4,-4(fp)
 8014778:	2089883a 	add	r4,r4,r2
 801477c:	e13fff15 	stw	r4,-4(fp)
			for (y = t_y; y <= b_y; y++)
 8014780:	e0bff917 	ldw	r2,-28(fp)
 8014784:	e0bff215 	stw	r2,-56(fp)
 8014788:	00001806 	br	80147ec <alt_up_pixel_buffer_dma_draw_box+0x42c>
			{
				for (x = l_x; x <= r_x; x++)
 801478c:	e0fffb17 	ldw	r3,-20(fp)
 8014790:	e0fff315 	stw	r3,-52(fp)
 8014794:	00000b06 	br	80147c4 <alt_up_pixel_buffer_dma_draw_box+0x404>
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
 8014798:	e13ff317 	ldw	r4,-52(fp)
 801479c:	e13ff317 	ldw	r4,-52(fp)
 80147a0:	2105883a 	add	r2,r4,r4
 80147a4:	1007883a 	mov	r3,r2
 80147a8:	e0bfff17 	ldw	r2,-4(fp)
 80147ac:	1885883a 	add	r2,r3,r2
 80147b0:	e0fff717 	ldw	r3,-36(fp)
 80147b4:	10c0002d 	sthio	r3,0(r2)
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
 80147b8:	e0bff317 	ldw	r2,-52(fp)
 80147bc:	10800044 	addi	r2,r2,1
 80147c0:	e0bff315 	stw	r2,-52(fp)
 80147c4:	e0fffa17 	ldw	r3,-24(fp)
 80147c8:	e13ff317 	ldw	r4,-52(fp)
 80147cc:	193ff22e 	bgeu	r3,r4,8014798 <alt_up_pixel_buffer_dma_draw_box+0x3d8>
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
				}
				addr = addr + limit_x;
 80147d0:	e0bfff17 	ldw	r2,-4(fp)
 80147d4:	e0fffe17 	ldw	r3,-8(fp)
 80147d8:	10c5883a 	add	r2,r2,r3
 80147dc:	e0bfff15 	stw	r2,-4(fp)
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
 80147e0:	e13ff217 	ldw	r4,-56(fp)
 80147e4:	21000044 	addi	r4,r4,1
 80147e8:	e13ff215 	stw	r4,-56(fp)
 80147ec:	e0bff817 	ldw	r2,-32(fp)
 80147f0:	e0fff217 	ldw	r3,-56(fp)
 80147f4:	10ffe52e 	bgeu	r2,r3,801478c <alt_up_pixel_buffer_dma_draw_box+0x3cc>
 80147f8:	00002a06 	br	80148a4 <alt_up_pixel_buffer_dma_draw_box+0x4e4>
				addr = addr + limit_x;
			}
		}
		else
		{
			limit_x = limit_x << 2;
 80147fc:	e13ffe17 	ldw	r4,-8(fp)
 8014800:	e13ffe17 	ldw	r4,-8(fp)
 8014804:	2105883a 	add	r2,r4,r4
 8014808:	1085883a 	add	r2,r2,r2
 801480c:	e0bffe15 	stw	r2,-8(fp)
			addr = addr + t_y * limit_x;
 8014810:	e0fff917 	ldw	r3,-28(fp)
 8014814:	e13ffe17 	ldw	r4,-8(fp)
 8014818:	1905383a 	mul	r2,r3,r4
 801481c:	e0ffff17 	ldw	r3,-4(fp)
 8014820:	1887883a 	add	r3,r3,r2
 8014824:	e0ffff15 	stw	r3,-4(fp)
			for (y = t_y; y <= b_y; y++)
 8014828:	e13ff917 	ldw	r4,-28(fp)
 801482c:	e13ff215 	stw	r4,-56(fp)
 8014830:	00001906 	br	8014898 <alt_up_pixel_buffer_dma_draw_box+0x4d8>
			{
				for (x = l_x; x <= r_x; x++)
 8014834:	e0bffb17 	ldw	r2,-20(fp)
 8014838:	e0bff315 	stw	r2,-52(fp)
 801483c:	00000c06 	br	8014870 <alt_up_pixel_buffer_dma_draw_box+0x4b0>
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
 8014840:	e0fff317 	ldw	r3,-52(fp)
 8014844:	e0fff317 	ldw	r3,-52(fp)
 8014848:	18c5883a 	add	r2,r3,r3
 801484c:	1085883a 	add	r2,r2,r2
 8014850:	1007883a 	mov	r3,r2
 8014854:	e0bfff17 	ldw	r2,-4(fp)
 8014858:	1885883a 	add	r2,r3,r2
 801485c:	e0fff717 	ldw	r3,-36(fp)
 8014860:	10c00035 	stwio	r3,0(r2)
		{
			limit_x = limit_x << 2;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
 8014864:	e13ff317 	ldw	r4,-52(fp)
 8014868:	21000044 	addi	r4,r4,1
 801486c:	e13ff315 	stw	r4,-52(fp)
 8014870:	e0bffa17 	ldw	r2,-24(fp)
 8014874:	e0fff317 	ldw	r3,-52(fp)
 8014878:	10fff12e 	bgeu	r2,r3,8014840 <alt_up_pixel_buffer_dma_draw_box+0x480>
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
				}
				addr = addr + limit_x;
 801487c:	e13fff17 	ldw	r4,-4(fp)
 8014880:	e0bffe17 	ldw	r2,-8(fp)
 8014884:	2089883a 	add	r4,r4,r2
 8014888:	e13fff15 	stw	r4,-4(fp)
		}
		else
		{
			limit_x = limit_x << 2;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
 801488c:	e0fff217 	ldw	r3,-56(fp)
 8014890:	18c00044 	addi	r3,r3,1
 8014894:	e0fff215 	stw	r3,-56(fp)
 8014898:	e13ff817 	ldw	r4,-32(fp)
 801489c:	e0bff217 	ldw	r2,-56(fp)
 80148a0:	20bfe42e 	bgeu	r4,r2,8014834 <alt_up_pixel_buffer_dma_draw_box+0x474>
				}
				addr = addr + limit_x;
			}
		}
	}
}
 80148a4:	e037883a 	mov	sp,fp
 80148a8:	df000017 	ldw	fp,0(sp)
 80148ac:	dec00104 	addi	sp,sp,4
 80148b0:	f800283a 	ret

080148b4 <alt_up_pixel_buffer_dma_draw_hline>:

void alt_up_pixel_buffer_dma_draw_hline(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int x1, int y, int color, int backbuffer)
/* This method draws a horizontal line. This method is faster than using the line method because we know the direction of the line. */
{
 80148b4:	defff204 	addi	sp,sp,-56
 80148b8:	df000d15 	stw	fp,52(sp)
 80148bc:	df000d04 	addi	fp,sp,52
 80148c0:	e13ff315 	stw	r4,-52(fp)
 80148c4:	e17ff415 	stw	r5,-48(fp)
 80148c8:	e1bff515 	stw	r6,-44(fp)
 80148cc:	e1fff615 	stw	r7,-40(fp)
	register unsigned int addr;
	register unsigned int limit_x = pixel_buffer->x_resolution;
 80148d0:	e0bff317 	ldw	r2,-52(fp)
 80148d4:	10800f17 	ldw	r2,60(r2)
 80148d8:	e0bffe15 	stw	r2,-8(fp)
	register unsigned int limit_y = pixel_buffer->y_resolution;
 80148dc:	e0bff317 	ldw	r2,-52(fp)
 80148e0:	10801017 	ldw	r2,64(r2)
 80148e4:	e0bffd15 	stw	r2,-12(fp)
	register unsigned int temp;
	register unsigned int l_x = x0;
 80148e8:	e0bff417 	ldw	r2,-48(fp)
 80148ec:	e0bffc15 	stw	r2,-16(fp)
	register unsigned int r_x = x1;
 80148f0:	e0fff517 	ldw	r3,-44(fp)
 80148f4:	e0fffb15 	stw	r3,-20(fp)
	register unsigned int line_y = y;
 80148f8:	e13ff617 	ldw	r4,-40(fp)
 80148fc:	e13ffa15 	stw	r4,-24(fp)
	register unsigned int local_color = color;
 8014900:	e0800117 	ldw	r2,4(fp)
 8014904:	e0bff915 	stw	r2,-28(fp)
	
	/* Check coordinates */
	if (l_x > r_x)
 8014908:	e0fffb17 	ldw	r3,-20(fp)
 801490c:	e13ffc17 	ldw	r4,-16(fp)
 8014910:	1900042e 	bgeu	r3,r4,8014924 <alt_up_pixel_buffer_dma_draw_hline+0x70>
	{
		temp = l_x;
 8014914:	e0bffc17 	ldw	r2,-16(fp)
		l_x = r_x;
 8014918:	e0fffb17 	ldw	r3,-20(fp)
 801491c:	e0fffc15 	stw	r3,-16(fp)
		r_x = temp;
 8014920:	e0bffb15 	stw	r2,-20(fp)
	}
	if ((l_x >= limit_x) || (line_y >= limit_y) || (r_x < 0) || (line_y < 0))
 8014924:	e13ffc17 	ldw	r4,-16(fp)
 8014928:	e0bffe17 	ldw	r2,-8(fp)
 801492c:	2080b12e 	bgeu	r4,r2,8014bf4 <alt_up_pixel_buffer_dma_draw_hline+0x340>
 8014930:	e0fffa17 	ldw	r3,-24(fp)
 8014934:	e13ffd17 	ldw	r4,-12(fp)
 8014938:	19000136 	bltu	r3,r4,8014940 <alt_up_pixel_buffer_dma_draw_hline+0x8c>
	{
		/* Drawing outside of the window, so don't bother. */
		return;
 801493c:	0000ad06 	br	8014bf4 <alt_up_pixel_buffer_dma_draw_hline+0x340>
	/* Clip the box and draw only within the confines of the screen. */
	if (l_x < 0)
	{
		l_x = 0;
	}
	if (r_x >= limit_x)
 8014940:	e0bffb17 	ldw	r2,-20(fp)
 8014944:	e0fffe17 	ldw	r3,-8(fp)
 8014948:	10c00336 	bltu	r2,r3,8014958 <alt_up_pixel_buffer_dma_draw_hline+0xa4>
	{
		r_x = limit_x - 1;
 801494c:	e13ffe17 	ldw	r4,-8(fp)
 8014950:	213fffc4 	addi	r4,r4,-1
 8014954:	e13ffb15 	stw	r4,-20(fp)
	}

	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
 8014958:	e0800217 	ldw	r2,8(fp)
 801495c:	10800058 	cmpnei	r2,r2,1
 8014960:	1000041e 	bne	r2,zero,8014974 <alt_up_pixel_buffer_dma_draw_hline+0xc0>
		addr = pixel_buffer->back_buffer_start_address;
 8014964:	e0bff317 	ldw	r2,-52(fp)
 8014968:	10800c17 	ldw	r2,48(r2)
 801496c:	e0bfff15 	stw	r2,-4(fp)
 8014970:	00000306 	br	8014980 <alt_up_pixel_buffer_dma_draw_hline+0xcc>
	else
		addr = pixel_buffer->buffer_start_address;
 8014974:	e0bff317 	ldw	r2,-52(fp)
 8014978:	10800b17 	ldw	r2,44(r2)
 801497c:	e0bfff15 	stw	r2,-4(fp)

	/* Draw a horizontal line using one of the addressing modes. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
 8014980:	e0bff317 	ldw	r2,-52(fp)
 8014984:	10800d17 	ldw	r2,52(r2)
 8014988:	1004c03a 	cmpne	r2,r2,zero
 801498c:	1000431e 	bne	r2,zero,8014a9c <alt_up_pixel_buffer_dma_draw_hline+0x1e8>
		/* Draw a horizontal line of a given color on the screen using the XY addressing mode. */
		register unsigned int x;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
 8014990:	e0bff317 	ldw	r2,-52(fp)
 8014994:	10801317 	ldw	r2,76(r2)
		addr = addr + (line_y << offset_y);
 8014998:	e0fffa17 	ldw	r3,-24(fp)
 801499c:	1884983a 	sll	r2,r3,r2
 80149a0:	e13fff17 	ldw	r4,-4(fp)
 80149a4:	2089883a 	add	r4,r4,r2
 80149a8:	e13fff15 	stw	r4,-4(fp)
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a horizontal line. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
 80149ac:	e0bff317 	ldw	r2,-52(fp)
 80149b0:	10800e17 	ldw	r2,56(r2)
 80149b4:	10800058 	cmpnei	r2,r2,1
 80149b8:	10000f1e 	bne	r2,zero,80149f8 <alt_up_pixel_buffer_dma_draw_hline+0x144>
			for (x = l_x; x <= r_x; x++)
 80149bc:	e0bffc17 	ldw	r2,-16(fp)
 80149c0:	e0bff815 	stw	r2,-32(fp)
 80149c4:	00000806 	br	80149e8 <alt_up_pixel_buffer_dma_draw_hline+0x134>
			{
				IOWR_8DIRECT(addr, x, local_color);
 80149c8:	e0ffff17 	ldw	r3,-4(fp)
 80149cc:	e0bff817 	ldw	r2,-32(fp)
 80149d0:	1885883a 	add	r2,r3,r2
 80149d4:	e0fff917 	ldw	r3,-28(fp)
 80149d8:	10c00025 	stbio	r3,0(r2)
		addr = addr + (line_y << offset_y);
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a horizontal line. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (x = l_x; x <= r_x; x++)
 80149dc:	e0fff817 	ldw	r3,-32(fp)
 80149e0:	18c00044 	addi	r3,r3,1
 80149e4:	e0fff815 	stw	r3,-32(fp)
 80149e8:	e13ffb17 	ldw	r4,-20(fp)
 80149ec:	e0bff817 	ldw	r2,-32(fp)
 80149f0:	20bff52e 	bgeu	r4,r2,80149c8 <alt_up_pixel_buffer_dma_draw_hline+0x114>
 80149f4:	00007f06 	br	8014bf4 <alt_up_pixel_buffer_dma_draw_hline+0x340>
			{
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
 80149f8:	e0bff317 	ldw	r2,-52(fp)
 80149fc:	10800e17 	ldw	r2,56(r2)
 8014a00:	10800098 	cmpnei	r2,r2,2
 8014a04:	1000121e 	bne	r2,zero,8014a50 <alt_up_pixel_buffer_dma_draw_hline+0x19c>
			for (x = l_x; x <= r_x; x++)
 8014a08:	e0fffc17 	ldw	r3,-16(fp)
 8014a0c:	e0fff815 	stw	r3,-32(fp)
 8014a10:	00000b06 	br	8014a40 <alt_up_pixel_buffer_dma_draw_hline+0x18c>
			{
				IOWR_16DIRECT(addr, x << 1, local_color);
 8014a14:	e13ff817 	ldw	r4,-32(fp)
 8014a18:	e13ff817 	ldw	r4,-32(fp)
 8014a1c:	2105883a 	add	r2,r4,r4
 8014a20:	1007883a 	mov	r3,r2
 8014a24:	e0bfff17 	ldw	r2,-4(fp)
 8014a28:	1885883a 	add	r2,r3,r2
 8014a2c:	e0fff917 	ldw	r3,-28(fp)
 8014a30:	10c0002d 	sthio	r3,0(r2)
			for (x = l_x; x <= r_x; x++)
			{
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (x = l_x; x <= r_x; x++)
 8014a34:	e0bff817 	ldw	r2,-32(fp)
 8014a38:	10800044 	addi	r2,r2,1
 8014a3c:	e0bff815 	stw	r2,-32(fp)
 8014a40:	e0fffb17 	ldw	r3,-20(fp)
 8014a44:	e13ff817 	ldw	r4,-32(fp)
 8014a48:	193ff22e 	bgeu	r3,r4,8014a14 <alt_up_pixel_buffer_dma_draw_hline+0x160>
 8014a4c:	00006906 	br	8014bf4 <alt_up_pixel_buffer_dma_draw_hline+0x340>
				IOWR_16DIRECT(addr, x << 1, local_color);
			}
		}
		else
		{
			for (x = l_x; x <= r_x; x++)
 8014a50:	e0bffc17 	ldw	r2,-16(fp)
 8014a54:	e0bff815 	stw	r2,-32(fp)
 8014a58:	00000c06 	br	8014a8c <alt_up_pixel_buffer_dma_draw_hline+0x1d8>
			{
				IOWR_32DIRECT(addr, x << 2, local_color);
 8014a5c:	e0fff817 	ldw	r3,-32(fp)
 8014a60:	e0fff817 	ldw	r3,-32(fp)
 8014a64:	18c5883a 	add	r2,r3,r3
 8014a68:	1085883a 	add	r2,r2,r2
 8014a6c:	1007883a 	mov	r3,r2
 8014a70:	e0bfff17 	ldw	r2,-4(fp)
 8014a74:	1885883a 	add	r2,r3,r2
 8014a78:	e0fff917 	ldw	r3,-28(fp)
 8014a7c:	10c00035 	stwio	r3,0(r2)
				IOWR_16DIRECT(addr, x << 1, local_color);
			}
		}
		else
		{
			for (x = l_x; x <= r_x; x++)
 8014a80:	e13ff817 	ldw	r4,-32(fp)
 8014a84:	21000044 	addi	r4,r4,1
 8014a88:	e13ff815 	stw	r4,-32(fp)
 8014a8c:	e0bffb17 	ldw	r2,-20(fp)
 8014a90:	e0fff817 	ldw	r3,-32(fp)
 8014a94:	10fff12e 	bgeu	r2,r3,8014a5c <alt_up_pixel_buffer_dma_draw_hline+0x1a8>
 8014a98:	00005606 	br	8014bf4 <alt_up_pixel_buffer_dma_draw_hline+0x340>
	} else {
		/* Draw a horizontal line of a given color on the screen using the linear addressing mode. */
		register unsigned int x;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
 8014a9c:	e0bff317 	ldw	r2,-52(fp)
 8014aa0:	10800e17 	ldw	r2,56(r2)
 8014aa4:	10800058 	cmpnei	r2,r2,1
 8014aa8:	1000151e 	bne	r2,zero,8014b00 <alt_up_pixel_buffer_dma_draw_hline+0x24c>
			addr = addr + line_y * limit_x;
 8014aac:	e13ffa17 	ldw	r4,-24(fp)
 8014ab0:	e0fffe17 	ldw	r3,-8(fp)
 8014ab4:	20c5383a 	mul	r2,r4,r3
 8014ab8:	e13fff17 	ldw	r4,-4(fp)
 8014abc:	2089883a 	add	r4,r4,r2
 8014ac0:	e13fff15 	stw	r4,-4(fp)
			for (x = l_x; x <= r_x; x++)
 8014ac4:	e0bffc17 	ldw	r2,-16(fp)
 8014ac8:	e0bff715 	stw	r2,-36(fp)
 8014acc:	00000806 	br	8014af0 <alt_up_pixel_buffer_dma_draw_hline+0x23c>
			{
				IOWR_8DIRECT(addr, x, local_color);
 8014ad0:	e0ffff17 	ldw	r3,-4(fp)
 8014ad4:	e0bff717 	ldw	r2,-36(fp)
 8014ad8:	1885883a 	add	r2,r3,r2
 8014adc:	e0fff917 	ldw	r3,-28(fp)
 8014ae0:	10c00025 	stbio	r3,0(r2)
		register unsigned int x;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + line_y * limit_x;
			for (x = l_x; x <= r_x; x++)
 8014ae4:	e0fff717 	ldw	r3,-36(fp)
 8014ae8:	18c00044 	addi	r3,r3,1
 8014aec:	e0fff715 	stw	r3,-36(fp)
 8014af0:	e13ffb17 	ldw	r4,-20(fp)
 8014af4:	e0bff717 	ldw	r2,-36(fp)
 8014af8:	20bff52e 	bgeu	r4,r2,8014ad0 <alt_up_pixel_buffer_dma_draw_hline+0x21c>
 8014afc:	00003d06 	br	8014bf4 <alt_up_pixel_buffer_dma_draw_hline+0x340>
			{
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
 8014b00:	e0bff317 	ldw	r2,-52(fp)
 8014b04:	10800e17 	ldw	r2,56(r2)
 8014b08:	10800098 	cmpnei	r2,r2,2
 8014b0c:	10001c1e 	bne	r2,zero,8014b80 <alt_up_pixel_buffer_dma_draw_hline+0x2cc>
			limit_x = limit_x << 1;
 8014b10:	e0fffe17 	ldw	r3,-8(fp)
 8014b14:	e0fffe17 	ldw	r3,-8(fp)
 8014b18:	18c5883a 	add	r2,r3,r3
 8014b1c:	e0bffe15 	stw	r2,-8(fp)
			addr = addr + line_y * limit_x;
 8014b20:	e13ffa17 	ldw	r4,-24(fp)
 8014b24:	e0fffe17 	ldw	r3,-8(fp)
 8014b28:	20c5383a 	mul	r2,r4,r3
 8014b2c:	e13fff17 	ldw	r4,-4(fp)
 8014b30:	2089883a 	add	r4,r4,r2
 8014b34:	e13fff15 	stw	r4,-4(fp)
			for (x = l_x; x <= r_x; x++)
 8014b38:	e0bffc17 	ldw	r2,-16(fp)
 8014b3c:	e0bff715 	stw	r2,-36(fp)
 8014b40:	00000b06 	br	8014b70 <alt_up_pixel_buffer_dma_draw_hline+0x2bc>
			{
				IOWR_16DIRECT(addr, x << 1, local_color);
 8014b44:	e0fff717 	ldw	r3,-36(fp)
 8014b48:	e0fff717 	ldw	r3,-36(fp)
 8014b4c:	18c5883a 	add	r2,r3,r3
 8014b50:	1007883a 	mov	r3,r2
 8014b54:	e0bfff17 	ldw	r2,-4(fp)
 8014b58:	1885883a 	add	r2,r3,r2
 8014b5c:	e0fff917 	ldw	r3,-28(fp)
 8014b60:	10c0002d 	sthio	r3,0(r2)
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + line_y * limit_x;
			for (x = l_x; x <= r_x; x++)
 8014b64:	e13ff717 	ldw	r4,-36(fp)
 8014b68:	21000044 	addi	r4,r4,1
 8014b6c:	e13ff715 	stw	r4,-36(fp)
 8014b70:	e0bffb17 	ldw	r2,-20(fp)
 8014b74:	e0fff717 	ldw	r3,-36(fp)
 8014b78:	10fff22e 	bgeu	r2,r3,8014b44 <alt_up_pixel_buffer_dma_draw_hline+0x290>
 8014b7c:	00001d06 	br	8014bf4 <alt_up_pixel_buffer_dma_draw_hline+0x340>
				IOWR_16DIRECT(addr, x << 1, local_color);
			}
		}
		else
		{
			limit_x = limit_x << 2;
 8014b80:	e13ffe17 	ldw	r4,-8(fp)
 8014b84:	e13ffe17 	ldw	r4,-8(fp)
 8014b88:	2105883a 	add	r2,r4,r4
 8014b8c:	1085883a 	add	r2,r2,r2
 8014b90:	e0bffe15 	stw	r2,-8(fp)
			addr = addr + line_y * limit_x;
 8014b94:	e0fffa17 	ldw	r3,-24(fp)
 8014b98:	e13ffe17 	ldw	r4,-8(fp)
 8014b9c:	1905383a 	mul	r2,r3,r4
 8014ba0:	e0ffff17 	ldw	r3,-4(fp)
 8014ba4:	1887883a 	add	r3,r3,r2
 8014ba8:	e0ffff15 	stw	r3,-4(fp)
			for (x = l_x; x <= r_x; x++)
 8014bac:	e13ffc17 	ldw	r4,-16(fp)
 8014bb0:	e13ff715 	stw	r4,-36(fp)
 8014bb4:	00000c06 	br	8014be8 <alt_up_pixel_buffer_dma_draw_hline+0x334>
			{
				IOWR_32DIRECT(addr, x << 2, local_color);
 8014bb8:	e0fff717 	ldw	r3,-36(fp)
 8014bbc:	e0fff717 	ldw	r3,-36(fp)
 8014bc0:	18c5883a 	add	r2,r3,r3
 8014bc4:	1085883a 	add	r2,r2,r2
 8014bc8:	1007883a 	mov	r3,r2
 8014bcc:	e0bfff17 	ldw	r2,-4(fp)
 8014bd0:	1885883a 	add	r2,r3,r2
 8014bd4:	e0fff917 	ldw	r3,-28(fp)
 8014bd8:	10c00035 	stwio	r3,0(r2)
		}
		else
		{
			limit_x = limit_x << 2;
			addr = addr + line_y * limit_x;
			for (x = l_x; x <= r_x; x++)
 8014bdc:	e13ff717 	ldw	r4,-36(fp)
 8014be0:	21000044 	addi	r4,r4,1
 8014be4:	e13ff715 	stw	r4,-36(fp)
 8014be8:	e0bffb17 	ldw	r2,-20(fp)
 8014bec:	e0fff717 	ldw	r3,-36(fp)
 8014bf0:	10fff12e 	bgeu	r2,r3,8014bb8 <alt_up_pixel_buffer_dma_draw_hline+0x304>
				IOWR_32DIRECT(addr, x << 2, local_color);
			}
			addr = addr + limit_x;
		}
	}
}
 8014bf4:	e037883a 	mov	sp,fp
 8014bf8:	df000017 	ldw	fp,0(sp)
 8014bfc:	dec00104 	addi	sp,sp,4
 8014c00:	f800283a 	ret

08014c04 <alt_up_pixel_buffer_dma_draw_vline>:


void alt_up_pixel_buffer_dma_draw_vline(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x, int y0, int y1, int color, int backbuffer)
/* This method draws a vertical line. This method is faster than using the line method because we know the direction of the line. */

{
 8014c04:	defff104 	addi	sp,sp,-60
 8014c08:	df000e15 	stw	fp,56(sp)
 8014c0c:	df000e04 	addi	fp,sp,56
 8014c10:	e13ff215 	stw	r4,-56(fp)
 8014c14:	e17ff315 	stw	r5,-52(fp)
 8014c18:	e1bff415 	stw	r6,-48(fp)
 8014c1c:	e1fff515 	stw	r7,-44(fp)
	register unsigned int addr;
	register unsigned int limit_x = pixel_buffer->x_resolution;
 8014c20:	e0bff217 	ldw	r2,-56(fp)
 8014c24:	10800f17 	ldw	r2,60(r2)
 8014c28:	e0bffe15 	stw	r2,-8(fp)
	register unsigned int limit_y = pixel_buffer->y_resolution;
 8014c2c:	e0bff217 	ldw	r2,-56(fp)
 8014c30:	10801017 	ldw	r2,64(r2)
 8014c34:	e0bffd15 	stw	r2,-12(fp)
	register unsigned int temp;
	register unsigned int line_x = x;
 8014c38:	e0bff317 	ldw	r2,-52(fp)
 8014c3c:	e0bffc15 	stw	r2,-16(fp)
	register unsigned int t_y = y0;
 8014c40:	e0fff417 	ldw	r3,-48(fp)
 8014c44:	e0fffb15 	stw	r3,-20(fp)
	register unsigned int b_y = y1;
 8014c48:	e13ff517 	ldw	r4,-44(fp)
 8014c4c:	e13ffa15 	stw	r4,-24(fp)
	register unsigned int local_color = color;
 8014c50:	e0800117 	ldw	r2,4(fp)
 8014c54:	e0bff915 	stw	r2,-28(fp)
	
	/* Check coordinates */
	if (t_y > b_y)
 8014c58:	e0fffa17 	ldw	r3,-24(fp)
 8014c5c:	e13ffb17 	ldw	r4,-20(fp)
 8014c60:	1900042e 	bgeu	r3,r4,8014c74 <alt_up_pixel_buffer_dma_draw_vline+0x70>
	{
		temp = t_y;
 8014c64:	e0bffb17 	ldw	r2,-20(fp)
		t_y = b_y;
 8014c68:	e0fffa17 	ldw	r3,-24(fp)
 8014c6c:	e0fffb15 	stw	r3,-20(fp)
		b_y = temp;
 8014c70:	e0bffa15 	stw	r2,-24(fp)
	}
	if ((line_x >= limit_x) || (t_y >= limit_y) || (line_x < 0) || (b_y < 0))
 8014c74:	e13ffc17 	ldw	r4,-16(fp)
 8014c78:	e0bffe17 	ldw	r2,-8(fp)
 8014c7c:	2080d12e 	bgeu	r4,r2,8014fc4 <alt_up_pixel_buffer_dma_draw_vline+0x3c0>
 8014c80:	e0fffb17 	ldw	r3,-20(fp)
 8014c84:	e13ffd17 	ldw	r4,-12(fp)
 8014c88:	19000136 	bltu	r3,r4,8014c90 <alt_up_pixel_buffer_dma_draw_vline+0x8c>
	{
		/* Drawing outside of the window, so don't bother. */
		return;
 8014c8c:	0000cd06 	br	8014fc4 <alt_up_pixel_buffer_dma_draw_vline+0x3c0>
	/* Clip the box and draw only within the confines of the screen. */
	if (t_y < 0)
	{
		t_y = 0;
	}
	if (b_y >= limit_y)
 8014c90:	e0bffa17 	ldw	r2,-24(fp)
 8014c94:	e0fffd17 	ldw	r3,-12(fp)
 8014c98:	10c00336 	bltu	r2,r3,8014ca8 <alt_up_pixel_buffer_dma_draw_vline+0xa4>
	{
		b_y = limit_y - 1;
 8014c9c:	e13ffd17 	ldw	r4,-12(fp)
 8014ca0:	213fffc4 	addi	r4,r4,-1
 8014ca4:	e13ffa15 	stw	r4,-24(fp)
	}

	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
 8014ca8:	e0800217 	ldw	r2,8(fp)
 8014cac:	10800058 	cmpnei	r2,r2,1
 8014cb0:	1000041e 	bne	r2,zero,8014cc4 <alt_up_pixel_buffer_dma_draw_vline+0xc0>
		addr = pixel_buffer->back_buffer_start_address;
 8014cb4:	e0bff217 	ldw	r2,-56(fp)
 8014cb8:	10800c17 	ldw	r2,48(r2)
 8014cbc:	e0bfff15 	stw	r2,-4(fp)
 8014cc0:	00000306 	br	8014cd0 <alt_up_pixel_buffer_dma_draw_vline+0xcc>
	else
		addr = pixel_buffer->buffer_start_address;
 8014cc4:	e0bff217 	ldw	r2,-56(fp)
 8014cc8:	10800b17 	ldw	r2,44(r2)
 8014ccc:	e0bfff15 	stw	r2,-4(fp)

	/* Draw the vertical line using one of the addressing modes. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
 8014cd0:	e0bff217 	ldw	r2,-56(fp)
 8014cd4:	10800d17 	ldw	r2,52(r2)
 8014cd8:	1004c03a 	cmpne	r2,r2,zero
 8014cdc:	1000571e 	bne	r2,zero,8014e3c <alt_up_pixel_buffer_dma_draw_vline+0x238>
		/* Draw a vertical line of a given color on the screen using the XY addressing mode. */
		register unsigned int y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
 8014ce0:	e0bff217 	ldw	r2,-56(fp)
 8014ce4:	10801317 	ldw	r2,76(r2)
 8014ce8:	e0bff715 	stw	r2,-36(fp)
		addr = addr + (t_y << offset_y);
 8014cec:	e0bff717 	ldw	r2,-36(fp)
 8014cf0:	e0fffb17 	ldw	r3,-20(fp)
 8014cf4:	1884983a 	sll	r2,r3,r2
 8014cf8:	e13fff17 	ldw	r4,-4(fp)
 8014cfc:	2089883a 	add	r4,r4,r2
 8014d00:	e13fff15 	stw	r4,-4(fp)
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
 8014d04:	e0bff217 	ldw	r2,-56(fp)
 8014d08:	10800e17 	ldw	r2,56(r2)
 8014d0c:	10800058 	cmpnei	r2,r2,1
 8014d10:	1000151e 	bne	r2,zero,8014d68 <alt_up_pixel_buffer_dma_draw_vline+0x164>
			for (y = t_y; y <= b_y; y++)
 8014d14:	e0bffb17 	ldw	r2,-20(fp)
 8014d18:	e0bff815 	stw	r2,-32(fp)
 8014d1c:	00000e06 	br	8014d58 <alt_up_pixel_buffer_dma_draw_vline+0x154>
			{
				IOWR_8DIRECT(addr, line_x, local_color);
 8014d20:	e0ffff17 	ldw	r3,-4(fp)
 8014d24:	e0bffc17 	ldw	r2,-16(fp)
 8014d28:	1885883a 	add	r2,r3,r2
 8014d2c:	e0fff917 	ldw	r3,-28(fp)
 8014d30:	10c00025 	stbio	r3,0(r2)
				addr = addr + (1 << offset_y);
 8014d34:	e0fff717 	ldw	r3,-36(fp)
 8014d38:	00800044 	movi	r2,1
 8014d3c:	10c4983a 	sll	r2,r2,r3
 8014d40:	e0ffff17 	ldw	r3,-4(fp)
 8014d44:	1887883a 	add	r3,r3,r2
 8014d48:	e0ffff15 	stw	r3,-4(fp)
		addr = addr + (t_y << offset_y);
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
 8014d4c:	e13ff817 	ldw	r4,-32(fp)
 8014d50:	21000044 	addi	r4,r4,1
 8014d54:	e13ff815 	stw	r4,-32(fp)
 8014d58:	e0bffa17 	ldw	r2,-24(fp)
 8014d5c:	e0fff817 	ldw	r3,-32(fp)
 8014d60:	10ffef2e 	bgeu	r2,r3,8014d20 <alt_up_pixel_buffer_dma_draw_vline+0x11c>
 8014d64:	00009706 	br	8014fc4 <alt_up_pixel_buffer_dma_draw_vline+0x3c0>
			{
				IOWR_8DIRECT(addr, line_x, local_color);
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
 8014d68:	e0bff217 	ldw	r2,-56(fp)
 8014d6c:	10800e17 	ldw	r2,56(r2)
 8014d70:	10800098 	cmpnei	r2,r2,2
 8014d74:	1000181e 	bne	r2,zero,8014dd8 <alt_up_pixel_buffer_dma_draw_vline+0x1d4>
			for (y = t_y; y <= b_y; y++)
 8014d78:	e13ffb17 	ldw	r4,-20(fp)
 8014d7c:	e13ff815 	stw	r4,-32(fp)
 8014d80:	00001106 	br	8014dc8 <alt_up_pixel_buffer_dma_draw_vline+0x1c4>
			{
				IOWR_16DIRECT(addr, line_x << 1, local_color);
 8014d84:	e0fffc17 	ldw	r3,-16(fp)
 8014d88:	e0fffc17 	ldw	r3,-16(fp)
 8014d8c:	18c5883a 	add	r2,r3,r3
 8014d90:	1007883a 	mov	r3,r2
 8014d94:	e0bfff17 	ldw	r2,-4(fp)
 8014d98:	1885883a 	add	r2,r3,r2
 8014d9c:	e0fff917 	ldw	r3,-28(fp)
 8014da0:	10c0002d 	sthio	r3,0(r2)
				addr = addr + (1 << offset_y);
 8014da4:	e0fff717 	ldw	r3,-36(fp)
 8014da8:	00800044 	movi	r2,1
 8014dac:	10c4983a 	sll	r2,r2,r3
 8014db0:	e13fff17 	ldw	r4,-4(fp)
 8014db4:	2089883a 	add	r4,r4,r2
 8014db8:	e13fff15 	stw	r4,-4(fp)
			{
				IOWR_8DIRECT(addr, line_x, local_color);
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
 8014dbc:	e0bff817 	ldw	r2,-32(fp)
 8014dc0:	10800044 	addi	r2,r2,1
 8014dc4:	e0bff815 	stw	r2,-32(fp)
 8014dc8:	e0fffa17 	ldw	r3,-24(fp)
 8014dcc:	e13ff817 	ldw	r4,-32(fp)
 8014dd0:	193fec2e 	bgeu	r3,r4,8014d84 <alt_up_pixel_buffer_dma_draw_vline+0x180>
 8014dd4:	00007b06 	br	8014fc4 <alt_up_pixel_buffer_dma_draw_vline+0x3c0>
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
 8014dd8:	e0bffb17 	ldw	r2,-20(fp)
 8014ddc:	e0bff815 	stw	r2,-32(fp)
 8014de0:	00001206 	br	8014e2c <alt_up_pixel_buffer_dma_draw_vline+0x228>
			{
				IOWR_32DIRECT(addr, line_x << 2, local_color);
 8014de4:	e0fffc17 	ldw	r3,-16(fp)
 8014de8:	e0fffc17 	ldw	r3,-16(fp)
 8014dec:	18c5883a 	add	r2,r3,r3
 8014df0:	1085883a 	add	r2,r2,r2
 8014df4:	1007883a 	mov	r3,r2
 8014df8:	e0bfff17 	ldw	r2,-4(fp)
 8014dfc:	1885883a 	add	r2,r3,r2
 8014e00:	e0fff917 	ldw	r3,-28(fp)
 8014e04:	10c00035 	stwio	r3,0(r2)
				addr = addr + (1 << offset_y);
 8014e08:	e0fff717 	ldw	r3,-36(fp)
 8014e0c:	00800044 	movi	r2,1
 8014e10:	10c4983a 	sll	r2,r2,r3
 8014e14:	e13fff17 	ldw	r4,-4(fp)
 8014e18:	2089883a 	add	r4,r4,r2
 8014e1c:	e13fff15 	stw	r4,-4(fp)
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
 8014e20:	e0bff817 	ldw	r2,-32(fp)
 8014e24:	10800044 	addi	r2,r2,1
 8014e28:	e0bff815 	stw	r2,-32(fp)
 8014e2c:	e0fffa17 	ldw	r3,-24(fp)
 8014e30:	e13ff817 	ldw	r4,-32(fp)
 8014e34:	193feb2e 	bgeu	r3,r4,8014de4 <alt_up_pixel_buffer_dma_draw_vline+0x1e0>
 8014e38:	00006206 	br	8014fc4 <alt_up_pixel_buffer_dma_draw_vline+0x3c0>
	} else {
		/* Draw a vertical line of a given color on the screen using the linear addressing mode. */
		register unsigned int y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
 8014e3c:	e0bff217 	ldw	r2,-56(fp)
 8014e40:	10800e17 	ldw	r2,56(r2)
 8014e44:	10800058 	cmpnei	r2,r2,1
 8014e48:	1000191e 	bne	r2,zero,8014eb0 <alt_up_pixel_buffer_dma_draw_vline+0x2ac>
			addr = addr + t_y * limit_x;
 8014e4c:	e0fffb17 	ldw	r3,-20(fp)
 8014e50:	e13ffe17 	ldw	r4,-8(fp)
 8014e54:	1905383a 	mul	r2,r3,r4
 8014e58:	e0ffff17 	ldw	r3,-4(fp)
 8014e5c:	1887883a 	add	r3,r3,r2
 8014e60:	e0ffff15 	stw	r3,-4(fp)
			for (y = t_y; y <= b_y; y++)
 8014e64:	e13ffb17 	ldw	r4,-20(fp)
 8014e68:	e13ff615 	stw	r4,-40(fp)
 8014e6c:	00000c06 	br	8014ea0 <alt_up_pixel_buffer_dma_draw_vline+0x29c>
			{
				IOWR_8DIRECT(addr, line_x, local_color);
 8014e70:	e0ffff17 	ldw	r3,-4(fp)
 8014e74:	e0bffc17 	ldw	r2,-16(fp)
 8014e78:	1885883a 	add	r2,r3,r2
 8014e7c:	e0fff917 	ldw	r3,-28(fp)
 8014e80:	10c00025 	stbio	r3,0(r2)
				addr = addr + limit_x;
 8014e84:	e0bfff17 	ldw	r2,-4(fp)
 8014e88:	e0fffe17 	ldw	r3,-8(fp)
 8014e8c:	10c5883a 	add	r2,r2,r3
 8014e90:	e0bfff15 	stw	r2,-4(fp)
		register unsigned int y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
 8014e94:	e13ff617 	ldw	r4,-40(fp)
 8014e98:	21000044 	addi	r4,r4,1
 8014e9c:	e13ff615 	stw	r4,-40(fp)
 8014ea0:	e0bffa17 	ldw	r2,-24(fp)
 8014ea4:	e0fff617 	ldw	r3,-40(fp)
 8014ea8:	10fff12e 	bgeu	r2,r3,8014e70 <alt_up_pixel_buffer_dma_draw_vline+0x26c>
 8014eac:	00004506 	br	8014fc4 <alt_up_pixel_buffer_dma_draw_vline+0x3c0>
			{
				IOWR_8DIRECT(addr, line_x, local_color);
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
 8014eb0:	e0bff217 	ldw	r2,-56(fp)
 8014eb4:	10800e17 	ldw	r2,56(r2)
 8014eb8:	10800098 	cmpnei	r2,r2,2
 8014ebc:	1000201e 	bne	r2,zero,8014f40 <alt_up_pixel_buffer_dma_draw_vline+0x33c>
			limit_x = limit_x << 1;
 8014ec0:	e13ffe17 	ldw	r4,-8(fp)
 8014ec4:	e13ffe17 	ldw	r4,-8(fp)
 8014ec8:	2105883a 	add	r2,r4,r4
 8014ecc:	e0bffe15 	stw	r2,-8(fp)
			addr = addr + t_y * limit_x;
 8014ed0:	e0fffb17 	ldw	r3,-20(fp)
 8014ed4:	e13ffe17 	ldw	r4,-8(fp)
 8014ed8:	1905383a 	mul	r2,r3,r4
 8014edc:	e0ffff17 	ldw	r3,-4(fp)
 8014ee0:	1887883a 	add	r3,r3,r2
 8014ee4:	e0ffff15 	stw	r3,-4(fp)
			for (y = t_y; y <= b_y; y++)
 8014ee8:	e13ffb17 	ldw	r4,-20(fp)
 8014eec:	e13ff615 	stw	r4,-40(fp)
 8014ef0:	00000f06 	br	8014f30 <alt_up_pixel_buffer_dma_draw_vline+0x32c>
			{
				IOWR_16DIRECT(addr, line_x << 1, local_color);
 8014ef4:	e0fffc17 	ldw	r3,-16(fp)
 8014ef8:	e0fffc17 	ldw	r3,-16(fp)
 8014efc:	18c5883a 	add	r2,r3,r3
 8014f00:	1007883a 	mov	r3,r2
 8014f04:	e0bfff17 	ldw	r2,-4(fp)
 8014f08:	1885883a 	add	r2,r3,r2
 8014f0c:	e0fff917 	ldw	r3,-28(fp)
 8014f10:	10c0002d 	sthio	r3,0(r2)
				addr = addr + limit_x;
 8014f14:	e13fff17 	ldw	r4,-4(fp)
 8014f18:	e0bffe17 	ldw	r2,-8(fp)
 8014f1c:	2089883a 	add	r4,r4,r2
 8014f20:	e13fff15 	stw	r4,-4(fp)
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
 8014f24:	e0fff617 	ldw	r3,-40(fp)
 8014f28:	18c00044 	addi	r3,r3,1
 8014f2c:	e0fff615 	stw	r3,-40(fp)
 8014f30:	e13ffa17 	ldw	r4,-24(fp)
 8014f34:	e0bff617 	ldw	r2,-40(fp)
 8014f38:	20bfee2e 	bgeu	r4,r2,8014ef4 <alt_up_pixel_buffer_dma_draw_vline+0x2f0>
 8014f3c:	00002106 	br	8014fc4 <alt_up_pixel_buffer_dma_draw_vline+0x3c0>
				addr = addr + limit_x;
			}
		}
		else
		{
			limit_x = limit_x << 2;
 8014f40:	e0fffe17 	ldw	r3,-8(fp)
 8014f44:	e0fffe17 	ldw	r3,-8(fp)
 8014f48:	18c5883a 	add	r2,r3,r3
 8014f4c:	1085883a 	add	r2,r2,r2
 8014f50:	e0bffe15 	stw	r2,-8(fp)
			addr = addr + t_y * limit_x;
 8014f54:	e13ffb17 	ldw	r4,-20(fp)
 8014f58:	e0fffe17 	ldw	r3,-8(fp)
 8014f5c:	20c5383a 	mul	r2,r4,r3
 8014f60:	e13fff17 	ldw	r4,-4(fp)
 8014f64:	2089883a 	add	r4,r4,r2
 8014f68:	e13fff15 	stw	r4,-4(fp)
			for (y = t_y; y <= b_y; y++)
 8014f6c:	e0bffb17 	ldw	r2,-20(fp)
 8014f70:	e0bff615 	stw	r2,-40(fp)
 8014f74:	00001006 	br	8014fb8 <alt_up_pixel_buffer_dma_draw_vline+0x3b4>
			{
				IOWR_32DIRECT(addr, line_x << 2, local_color);
 8014f78:	e0fffc17 	ldw	r3,-16(fp)
 8014f7c:	e0fffc17 	ldw	r3,-16(fp)
 8014f80:	18c5883a 	add	r2,r3,r3
 8014f84:	1085883a 	add	r2,r2,r2
 8014f88:	1007883a 	mov	r3,r2
 8014f8c:	e0bfff17 	ldw	r2,-4(fp)
 8014f90:	1885883a 	add	r2,r3,r2
 8014f94:	e0fff917 	ldw	r3,-28(fp)
 8014f98:	10c00035 	stwio	r3,0(r2)
				addr = addr + limit_x;
 8014f9c:	e13fff17 	ldw	r4,-4(fp)
 8014fa0:	e0bffe17 	ldw	r2,-8(fp)
 8014fa4:	2089883a 	add	r4,r4,r2
 8014fa8:	e13fff15 	stw	r4,-4(fp)
		}
		else
		{
			limit_x = limit_x << 2;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
 8014fac:	e0fff617 	ldw	r3,-40(fp)
 8014fb0:	18c00044 	addi	r3,r3,1
 8014fb4:	e0fff615 	stw	r3,-40(fp)
 8014fb8:	e13ffa17 	ldw	r4,-24(fp)
 8014fbc:	e0bff617 	ldw	r2,-40(fp)
 8014fc0:	20bfed2e 	bgeu	r4,r2,8014f78 <alt_up_pixel_buffer_dma_draw_vline+0x374>
				IOWR_32DIRECT(addr, line_x << 2, local_color);
				addr = addr + limit_x;
			}
		}
	}
}
 8014fc4:	e037883a 	mov	sp,fp
 8014fc8:	df000017 	ldw	fp,0(sp)
 8014fcc:	dec00104 	addi	sp,sp,4
 8014fd0:	f800283a 	ret

08014fd4 <alt_up_pixel_buffer_dma_draw_rectangle>:

void alt_up_pixel_buffer_dma_draw_rectangle(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int y0, int x1, int y1, int color, int backbuffer)
{
 8014fd4:	defff804 	addi	sp,sp,-32
 8014fd8:	dfc00715 	stw	ra,28(sp)
 8014fdc:	df000615 	stw	fp,24(sp)
 8014fe0:	df000604 	addi	fp,sp,24
 8014fe4:	e13ffc15 	stw	r4,-16(fp)
 8014fe8:	e17ffd15 	stw	r5,-12(fp)
 8014fec:	e1bffe15 	stw	r6,-8(fp)
 8014ff0:	e1ffff15 	stw	r7,-4(fp)
	alt_up_pixel_buffer_dma_draw_hline(pixel_buffer, x0, x1, y0, color, backbuffer);
 8014ff4:	e0800317 	ldw	r2,12(fp)
 8014ff8:	d8800015 	stw	r2,0(sp)
 8014ffc:	e0800417 	ldw	r2,16(fp)
 8015000:	d8800115 	stw	r2,4(sp)
 8015004:	e13ffc17 	ldw	r4,-16(fp)
 8015008:	e17ffd17 	ldw	r5,-12(fp)
 801500c:	e1bfff17 	ldw	r6,-4(fp)
 8015010:	e1fffe17 	ldw	r7,-8(fp)
 8015014:	80148b40 	call	80148b4 <alt_up_pixel_buffer_dma_draw_hline>
	alt_up_pixel_buffer_dma_draw_hline(pixel_buffer, x0, x1, y1, color, backbuffer);
 8015018:	e0800317 	ldw	r2,12(fp)
 801501c:	d8800015 	stw	r2,0(sp)
 8015020:	e0800417 	ldw	r2,16(fp)
 8015024:	d8800115 	stw	r2,4(sp)
 8015028:	e13ffc17 	ldw	r4,-16(fp)
 801502c:	e17ffd17 	ldw	r5,-12(fp)
 8015030:	e1bfff17 	ldw	r6,-4(fp)
 8015034:	e1c00217 	ldw	r7,8(fp)
 8015038:	80148b40 	call	80148b4 <alt_up_pixel_buffer_dma_draw_hline>
	alt_up_pixel_buffer_dma_draw_vline(pixel_buffer, x0, y0, y1, color, backbuffer);
 801503c:	e0800317 	ldw	r2,12(fp)
 8015040:	d8800015 	stw	r2,0(sp)
 8015044:	e0800417 	ldw	r2,16(fp)
 8015048:	d8800115 	stw	r2,4(sp)
 801504c:	e13ffc17 	ldw	r4,-16(fp)
 8015050:	e17ffd17 	ldw	r5,-12(fp)
 8015054:	e1bffe17 	ldw	r6,-8(fp)
 8015058:	e1c00217 	ldw	r7,8(fp)
 801505c:	8014c040 	call	8014c04 <alt_up_pixel_buffer_dma_draw_vline>
	alt_up_pixel_buffer_dma_draw_vline(pixel_buffer, x1, y0, y1, color, backbuffer);
 8015060:	e0800317 	ldw	r2,12(fp)
 8015064:	d8800015 	stw	r2,0(sp)
 8015068:	e0800417 	ldw	r2,16(fp)
 801506c:	d8800115 	stw	r2,4(sp)
 8015070:	e13ffc17 	ldw	r4,-16(fp)
 8015074:	e17fff17 	ldw	r5,-4(fp)
 8015078:	e1bffe17 	ldw	r6,-8(fp)
 801507c:	e1c00217 	ldw	r7,8(fp)
 8015080:	8014c040 	call	8014c04 <alt_up_pixel_buffer_dma_draw_vline>
}
 8015084:	e037883a 	mov	sp,fp
 8015088:	dfc00117 	ldw	ra,4(sp)
 801508c:	df000017 	ldw	fp,0(sp)
 8015090:	dec00204 	addi	sp,sp,8
 8015094:	f800283a 	ret

08015098 <helper_plot_pixel>:

void helper_plot_pixel(register unsigned int buffer_start, register int line_size, register int x, register int y, register int color, register int mode)
/* This is a helper function that draws a pixel at a given location. Note that no boundary checks are made,
 * so drawing off-screen may cause unpredictable side effects. */
{
 8015098:	defffb04 	addi	sp,sp,-20
 801509c:	df000415 	stw	fp,16(sp)
 80150a0:	df000404 	addi	fp,sp,16
 80150a4:	e13ffc15 	stw	r4,-16(fp)
 80150a8:	e17ffd15 	stw	r5,-12(fp)
 80150ac:	e1bffe15 	stw	r6,-8(fp)
 80150b0:	e1ffff15 	stw	r7,-4(fp)
	if (mode == 0)
 80150b4:	e0c00217 	ldw	r3,8(fp)
 80150b8:	1804c03a 	cmpne	r2,r3,zero
 80150bc:	10000b1e 	bne	r2,zero,80150ec <helper_plot_pixel+0x54>
		IOWR_8DIRECT(buffer_start, line_size*y+x, color);
 80150c0:	e13ffd17 	ldw	r4,-12(fp)
 80150c4:	e0ffff17 	ldw	r3,-4(fp)
 80150c8:	20c5383a 	mul	r2,r4,r3
 80150cc:	e13ffe17 	ldw	r4,-8(fp)
 80150d0:	1105883a 	add	r2,r2,r4
 80150d4:	1007883a 	mov	r3,r2
 80150d8:	e0bffc17 	ldw	r2,-16(fp)
 80150dc:	1885883a 	add	r2,r3,r2
 80150e0:	e0c00117 	ldw	r3,4(fp)
 80150e4:	10c00025 	stbio	r3,0(r2)
 80150e8:	00001b06 	br	8015158 <helper_plot_pixel+0xc0>
	else if (mode == 1)
 80150ec:	e1000217 	ldw	r4,8(fp)
 80150f0:	20800058 	cmpnei	r2,r4,1
 80150f4:	10000c1e 	bne	r2,zero,8015128 <helper_plot_pixel+0x90>
		IOWR_16DIRECT(buffer_start, (line_size*y+x) << 1, color);
 80150f8:	e0fffd17 	ldw	r3,-12(fp)
 80150fc:	e13fff17 	ldw	r4,-4(fp)
 8015100:	1905383a 	mul	r2,r3,r4
 8015104:	e0fffe17 	ldw	r3,-8(fp)
 8015108:	10c5883a 	add	r2,r2,r3
 801510c:	1085883a 	add	r2,r2,r2
 8015110:	1007883a 	mov	r3,r2
 8015114:	e0bffc17 	ldw	r2,-16(fp)
 8015118:	1885883a 	add	r2,r3,r2
 801511c:	e1000117 	ldw	r4,4(fp)
 8015120:	1100002d 	sthio	r4,0(r2)
 8015124:	00000c06 	br	8015158 <helper_plot_pixel+0xc0>
	else
		IOWR_32DIRECT(buffer_start, (line_size*y+x) << 2, color);
 8015128:	e0fffd17 	ldw	r3,-12(fp)
 801512c:	e13fff17 	ldw	r4,-4(fp)
 8015130:	1905383a 	mul	r2,r3,r4
 8015134:	e0fffe17 	ldw	r3,-8(fp)
 8015138:	10c5883a 	add	r2,r2,r3
 801513c:	1085883a 	add	r2,r2,r2
 8015140:	1085883a 	add	r2,r2,r2
 8015144:	1007883a 	mov	r3,r2
 8015148:	e0bffc17 	ldw	r2,-16(fp)
 801514c:	1885883a 	add	r2,r3,r2
 8015150:	e1000117 	ldw	r4,4(fp)
 8015154:	11000035 	stwio	r4,0(r2)
}
 8015158:	e037883a 	mov	sp,fp
 801515c:	df000017 	ldw	fp,0(sp)
 8015160:	dec00104 	addi	sp,sp,4
 8015164:	f800283a 	ret

08015168 <alt_up_pixel_buffer_dma_draw_line>:

void alt_up_pixel_buffer_dma_draw_line(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int y0, int x1, int y1, int color, int backbuffer)
/* This function draws a line between points (x0, y0) and (x1, y1). The function does not check if it draws a pixel within screen boundaries.
 * users should ensure that the line is drawn within the screen boundaries. */
{
 8015168:	deffe404 	addi	sp,sp,-112
 801516c:	dfc01b15 	stw	ra,108(sp)
 8015170:	df001a15 	stw	fp,104(sp)
 8015174:	df001a04 	addi	fp,sp,104
 8015178:	e13fe815 	stw	r4,-96(fp)
 801517c:	e17fe915 	stw	r5,-92(fp)
 8015180:	e1bfea15 	stw	r6,-88(fp)
 8015184:	e1ffeb15 	stw	r7,-84(fp)
	register int x_0 = x0;
 8015188:	e0bfe917 	ldw	r2,-92(fp)
 801518c:	e0bffa15 	stw	r2,-24(fp)
	register int y_0 = y0;
 8015190:	e0ffea17 	ldw	r3,-88(fp)
 8015194:	e0fff915 	stw	r3,-28(fp)
	register int x_1 = x1;
 8015198:	e13feb17 	ldw	r4,-84(fp)
 801519c:	e13ff815 	stw	r4,-32(fp)
	register int y_1 = y1;
 80151a0:	e0800217 	ldw	r2,8(fp)
 80151a4:	e0bff715 	stw	r2,-36(fp)
	register char steep = (ABS(y_1 - y_0) > ABS(x_1 - x_0)) ? 1 : 0;
 80151a8:	e0fff717 	ldw	r3,-36(fp)
 80151ac:	e13ff917 	ldw	r4,-28(fp)
 80151b0:	1905c83a 	sub	r2,r3,r4
 80151b4:	e0bfff15 	stw	r2,-4(fp)
 80151b8:	e0ffff17 	ldw	r3,-4(fp)
 80151bc:	1804403a 	cmpge	r2,r3,zero
 80151c0:	1000031e 	bne	r2,zero,80151d0 <alt_up_pixel_buffer_dma_draw_line+0x68>
 80151c4:	e13fff17 	ldw	r4,-4(fp)
 80151c8:	0109c83a 	sub	r4,zero,r4
 80151cc:	e13fff15 	stw	r4,-4(fp)
 80151d0:	e0fff817 	ldw	r3,-32(fp)
 80151d4:	e13ffa17 	ldw	r4,-24(fp)
 80151d8:	1905c83a 	sub	r2,r3,r4
 80151dc:	e0bffe15 	stw	r2,-8(fp)
 80151e0:	e0fffe17 	ldw	r3,-8(fp)
 80151e4:	1804403a 	cmpge	r2,r3,zero
 80151e8:	1000031e 	bne	r2,zero,80151f8 <alt_up_pixel_buffer_dma_draw_line+0x90>
 80151ec:	e13ffe17 	ldw	r4,-8(fp)
 80151f0:	0109c83a 	sub	r4,zero,r4
 80151f4:	e13ffe15 	stw	r4,-8(fp)
 80151f8:	e0fffe17 	ldw	r3,-8(fp)
 80151fc:	e13fff17 	ldw	r4,-4(fp)
 8015200:	1904803a 	cmplt	r2,r3,r4
 8015204:	e0bff605 	stb	r2,-40(fp)
	register int deltax, deltay, error, ystep, x, y;
	register int color_mode =	(pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) ? 0 :
								(pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) ? 1 : 2;
 8015208:	e0bfe817 	ldw	r2,-96(fp)
 801520c:	10800e17 	ldw	r2,56(r2)
 8015210:	10800060 	cmpeqi	r2,r2,1
 8015214:	10000c1e 	bne	r2,zero,8015248 <alt_up_pixel_buffer_dma_draw_line+0xe0>
 8015218:	e0bfe817 	ldw	r2,-96(fp)
 801521c:	10800e17 	ldw	r2,56(r2)
 8015220:	10800098 	cmpnei	r2,r2,2
 8015224:	1000031e 	bne	r2,zero,8015234 <alt_up_pixel_buffer_dma_draw_line+0xcc>
 8015228:	00800044 	movi	r2,1
 801522c:	e0bffc15 	stw	r2,-16(fp)
 8015230:	00000206 	br	801523c <alt_up_pixel_buffer_dma_draw_line+0xd4>
 8015234:	00c00084 	movi	r3,2
 8015238:	e0fffc15 	stw	r3,-16(fp)
 801523c:	e13ffc17 	ldw	r4,-16(fp)
 8015240:	e13ffd15 	stw	r4,-12(fp)
 8015244:	00000106 	br	801524c <alt_up_pixel_buffer_dma_draw_line+0xe4>
 8015248:	e03ffd15 	stw	zero,-12(fp)
 801524c:	e0bffd17 	ldw	r2,-12(fp)
 8015250:	e0bfef15 	stw	r2,-68(fp)
	register int line_color = color;
 8015254:	e0c00317 	ldw	r3,12(fp)
 8015258:	e0ffee15 	stw	r3,-72(fp)
	register unsigned int buffer_start;
	register int line_size = (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) ? (1 << (pixel_buffer->y_coord_offset-color_mode)) : pixel_buffer->x_resolution;
 801525c:	e0bfe817 	ldw	r2,-96(fp)
 8015260:	10800d17 	ldw	r2,52(r2)
 8015264:	1004c03a 	cmpne	r2,r2,zero
 8015268:	1000091e 	bne	r2,zero,8015290 <alt_up_pixel_buffer_dma_draw_line+0x128>
 801526c:	e0bfe817 	ldw	r2,-96(fp)
 8015270:	10c01317 	ldw	r3,76(r2)
 8015274:	e0bfef17 	ldw	r2,-68(fp)
 8015278:	1885c83a 	sub	r2,r3,r2
 801527c:	1007883a 	mov	r3,r2
 8015280:	00800044 	movi	r2,1
 8015284:	10c4983a 	sll	r2,r2,r3
 8015288:	e0bffb15 	stw	r2,-20(fp)
 801528c:	00000306 	br	801529c <alt_up_pixel_buffer_dma_draw_line+0x134>
 8015290:	e0bfe817 	ldw	r2,-96(fp)
 8015294:	10800f17 	ldw	r2,60(r2)
 8015298:	e0bffb15 	stw	r2,-20(fp)
 801529c:	e13ffb17 	ldw	r4,-20(fp)
 80152a0:	e13fec15 	stw	r4,-80(fp)

	if (backbuffer == 1)
 80152a4:	e0800417 	ldw	r2,16(fp)
 80152a8:	10800058 	cmpnei	r2,r2,1
 80152ac:	1000041e 	bne	r2,zero,80152c0 <alt_up_pixel_buffer_dma_draw_line+0x158>
		buffer_start = pixel_buffer->back_buffer_start_address;
 80152b0:	e0bfe817 	ldw	r2,-96(fp)
 80152b4:	10800c17 	ldw	r2,48(r2)
 80152b8:	e0bfed15 	stw	r2,-76(fp)
 80152bc:	00000306 	br	80152cc <alt_up_pixel_buffer_dma_draw_line+0x164>
	else
		buffer_start = pixel_buffer->buffer_start_address;
 80152c0:	e0bfe817 	ldw	r2,-96(fp)
 80152c4:	10800b17 	ldw	r2,44(r2)
 80152c8:	e0bfed15 	stw	r2,-76(fp)

	/* Preprocessing inputs */
	if (steep > 0) {
 80152cc:	e0fff603 	ldbu	r3,-40(fp)
 80152d0:	18803fcc 	andi	r2,r3,255
 80152d4:	1080201c 	xori	r2,r2,128
 80152d8:	10bfe004 	addi	r2,r2,-128
 80152dc:	10800050 	cmplti	r2,r2,1
 80152e0:	10000c1e 	bne	r2,zero,8015314 <alt_up_pixel_buffer_dma_draw_line+0x1ac>
		// Swap x_0 and y_0
		error = x_0;
 80152e4:	e13ffa17 	ldw	r4,-24(fp)
 80152e8:	e13ff315 	stw	r4,-52(fp)
		x_0 = y_0;
 80152ec:	e0bff917 	ldw	r2,-28(fp)
 80152f0:	e0bffa15 	stw	r2,-24(fp)
		y_0 = error;
 80152f4:	e0fff317 	ldw	r3,-52(fp)
 80152f8:	e0fff915 	stw	r3,-28(fp)
		// Swap x_1 and y_1
		error = x_1;
 80152fc:	e13ff817 	ldw	r4,-32(fp)
 8015300:	e13ff315 	stw	r4,-52(fp)
		x_1 = y_1;
 8015304:	e0bff717 	ldw	r2,-36(fp)
 8015308:	e0bff815 	stw	r2,-32(fp)
		y_1 = error;
 801530c:	e0fff317 	ldw	r3,-52(fp)
 8015310:	e0fff715 	stw	r3,-36(fp)
	}
	if (x_0 > x_1) {
 8015314:	e13ff817 	ldw	r4,-32(fp)
 8015318:	e0bffa17 	ldw	r2,-24(fp)
 801531c:	20800c0e 	bge	r4,r2,8015350 <alt_up_pixel_buffer_dma_draw_line+0x1e8>
		// Swap x_0 and x_1
		error = x_0;
 8015320:	e0fffa17 	ldw	r3,-24(fp)
 8015324:	e0fff315 	stw	r3,-52(fp)
		x_0 = x_1;
 8015328:	e13ff817 	ldw	r4,-32(fp)
 801532c:	e13ffa15 	stw	r4,-24(fp)
		x_1 = error;
 8015330:	e0bff317 	ldw	r2,-52(fp)
 8015334:	e0bff815 	stw	r2,-32(fp)
		// Swap y_0 and y_1
		error = y_0;
 8015338:	e0fff917 	ldw	r3,-28(fp)
 801533c:	e0fff315 	stw	r3,-52(fp)
		y_0 = y_1;
 8015340:	e13ff717 	ldw	r4,-36(fp)
 8015344:	e13ff915 	stw	r4,-28(fp)
		y_1 = error;
 8015348:	e0bff317 	ldw	r2,-52(fp)
 801534c:	e0bff715 	stw	r2,-36(fp)
	}

	/* Setup local variables */
	deltax = x_1 - x_0;
 8015350:	e0fff817 	ldw	r3,-32(fp)
 8015354:	e13ffa17 	ldw	r4,-24(fp)
 8015358:	1907c83a 	sub	r3,r3,r4
 801535c:	e0fff515 	stw	r3,-44(fp)
	deltay = ABS(y_1 - y_0);
 8015360:	e0fff717 	ldw	r3,-36(fp)
 8015364:	e13ff917 	ldw	r4,-28(fp)
 8015368:	1905c83a 	sub	r2,r3,r4
 801536c:	e0bff415 	stw	r2,-48(fp)
 8015370:	e0fff417 	ldw	r3,-48(fp)
 8015374:	1804403a 	cmpge	r2,r3,zero
 8015378:	1000031e 	bne	r2,zero,8015388 <alt_up_pixel_buffer_dma_draw_line+0x220>
 801537c:	e13ff417 	ldw	r4,-48(fp)
 8015380:	0109c83a 	sub	r4,zero,r4
 8015384:	e13ff415 	stw	r4,-48(fp)
	error = -(deltax / 2); 
 8015388:	e0fff517 	ldw	r3,-44(fp)
 801538c:	1804d7fa 	srli	r2,r3,31
 8015390:	e13ff517 	ldw	r4,-44(fp)
 8015394:	1105883a 	add	r2,r2,r4
 8015398:	1005d07a 	srai	r2,r2,1
 801539c:	0085c83a 	sub	r2,zero,r2
 80153a0:	e0bff315 	stw	r2,-52(fp)
	y = y_0;
 80153a4:	e0bff917 	ldw	r2,-28(fp)
 80153a8:	e0bff015 	stw	r2,-64(fp)
	if (y_0 < y_1)
 80153ac:	e0fff917 	ldw	r3,-28(fp)
 80153b0:	e13ff717 	ldw	r4,-36(fp)
 80153b4:	1900030e 	bge	r3,r4,80153c4 <alt_up_pixel_buffer_dma_draw_line+0x25c>
		ystep = 1;
 80153b8:	00800044 	movi	r2,1
 80153bc:	e0bff215 	stw	r2,-56(fp)
 80153c0:	00000206 	br	80153cc <alt_up_pixel_buffer_dma_draw_line+0x264>
	else
		ystep = -1;
 80153c4:	00ffffc4 	movi	r3,-1
 80153c8:	e0fff215 	stw	r3,-56(fp)

	/* Draw a line - either go along the x axis (steep = 0) or along the y axis (steep = 1). The code is replicated to
	 * compile well on low optimization levels. */
	if (steep == 1)
 80153cc:	e13ff603 	ldbu	r4,-40(fp)
 80153d0:	20803fcc 	andi	r2,r4,255
 80153d4:	1080201c 	xori	r2,r2,128
 80153d8:	10bfe004 	addi	r2,r2,-128
 80153dc:	10800058 	cmpnei	r2,r2,1
 80153e0:	1000221e 	bne	r2,zero,801546c <alt_up_pixel_buffer_dma_draw_line+0x304>
	{
		for (x=x_0; x <= x_1; x++) {
 80153e4:	e0bffa17 	ldw	r2,-24(fp)
 80153e8:	e0bff115 	stw	r2,-60(fp)
 80153ec:	00001b06 	br	801545c <alt_up_pixel_buffer_dma_draw_line+0x2f4>
			helper_plot_pixel(buffer_start, line_size, y, x, line_color, color_mode);
 80153f0:	e0ffee17 	ldw	r3,-72(fp)
 80153f4:	d8c00015 	stw	r3,0(sp)
 80153f8:	e13fef17 	ldw	r4,-68(fp)
 80153fc:	d9000115 	stw	r4,4(sp)
 8015400:	e13fed17 	ldw	r4,-76(fp)
 8015404:	e17fec17 	ldw	r5,-80(fp)
 8015408:	e1bff017 	ldw	r6,-64(fp)
 801540c:	e1fff117 	ldw	r7,-60(fp)
 8015410:	80150980 	call	8015098 <helper_plot_pixel>
			error = error + deltay;
 8015414:	e0bff317 	ldw	r2,-52(fp)
 8015418:	e0fff417 	ldw	r3,-48(fp)
 801541c:	10c5883a 	add	r2,r2,r3
 8015420:	e0bff315 	stw	r2,-52(fp)
			if (error > 0) {
 8015424:	e13ff317 	ldw	r4,-52(fp)
 8015428:	20800050 	cmplti	r2,r4,1
 801542c:	1000081e 	bne	r2,zero,8015450 <alt_up_pixel_buffer_dma_draw_line+0x2e8>
				y = y + ystep;
 8015430:	e0bff017 	ldw	r2,-64(fp)
 8015434:	e0fff217 	ldw	r3,-56(fp)
 8015438:	10c5883a 	add	r2,r2,r3
 801543c:	e0bff015 	stw	r2,-64(fp)
				error = error - deltax;
 8015440:	e13ff317 	ldw	r4,-52(fp)
 8015444:	e0bff517 	ldw	r2,-44(fp)
 8015448:	2089c83a 	sub	r4,r4,r2
 801544c:	e13ff315 	stw	r4,-52(fp)

	/* Draw a line - either go along the x axis (steep = 0) or along the y axis (steep = 1). The code is replicated to
	 * compile well on low optimization levels. */
	if (steep == 1)
	{
		for (x=x_0; x <= x_1; x++) {
 8015450:	e0fff117 	ldw	r3,-60(fp)
 8015454:	18c00044 	addi	r3,r3,1
 8015458:	e0fff115 	stw	r3,-60(fp)
 801545c:	e13ff817 	ldw	r4,-32(fp)
 8015460:	e0bff117 	ldw	r2,-60(fp)
 8015464:	20bfe20e 	bge	r4,r2,80153f0 <alt_up_pixel_buffer_dma_draw_line+0x288>
 8015468:	00002106 	br	80154f0 <alt_up_pixel_buffer_dma_draw_line+0x388>
			}
		}
	}
	else
	{
		for (x=x_0; x <= x_1; x++) {
 801546c:	e0fffa17 	ldw	r3,-24(fp)
 8015470:	e0fff115 	stw	r3,-60(fp)
 8015474:	00001b06 	br	80154e4 <alt_up_pixel_buffer_dma_draw_line+0x37c>
			helper_plot_pixel(buffer_start, line_size, x, y, line_color, color_mode);
 8015478:	e13fee17 	ldw	r4,-72(fp)
 801547c:	d9000015 	stw	r4,0(sp)
 8015480:	e0bfef17 	ldw	r2,-68(fp)
 8015484:	d8800115 	stw	r2,4(sp)
 8015488:	e13fed17 	ldw	r4,-76(fp)
 801548c:	e17fec17 	ldw	r5,-80(fp)
 8015490:	e1bff117 	ldw	r6,-60(fp)
 8015494:	e1fff017 	ldw	r7,-64(fp)
 8015498:	80150980 	call	8015098 <helper_plot_pixel>
			error = error + deltay;
 801549c:	e0fff317 	ldw	r3,-52(fp)
 80154a0:	e13ff417 	ldw	r4,-48(fp)
 80154a4:	1907883a 	add	r3,r3,r4
 80154a8:	e0fff315 	stw	r3,-52(fp)
			if (error > 0) {
 80154ac:	e0fff317 	ldw	r3,-52(fp)
 80154b0:	18800050 	cmplti	r2,r3,1
 80154b4:	1000081e 	bne	r2,zero,80154d8 <alt_up_pixel_buffer_dma_draw_line+0x370>
				y = y + ystep;
 80154b8:	e13ff017 	ldw	r4,-64(fp)
 80154bc:	e0bff217 	ldw	r2,-56(fp)
 80154c0:	2089883a 	add	r4,r4,r2
 80154c4:	e13ff015 	stw	r4,-64(fp)
				error = error - deltax;
 80154c8:	e0fff317 	ldw	r3,-52(fp)
 80154cc:	e13ff517 	ldw	r4,-44(fp)
 80154d0:	1907c83a 	sub	r3,r3,r4
 80154d4:	e0fff315 	stw	r3,-52(fp)
			}
		}
	}
	else
	{
		for (x=x_0; x <= x_1; x++) {
 80154d8:	e0bff117 	ldw	r2,-60(fp)
 80154dc:	10800044 	addi	r2,r2,1
 80154e0:	e0bff115 	stw	r2,-60(fp)
 80154e4:	e0fff817 	ldw	r3,-32(fp)
 80154e8:	e13ff117 	ldw	r4,-60(fp)
 80154ec:	193fe20e 	bge	r3,r4,8015478 <alt_up_pixel_buffer_dma_draw_line+0x310>
				y = y + ystep;
				error = error - deltax;
			}
		}
	}
}
 80154f0:	e037883a 	mov	sp,fp
 80154f4:	dfc00117 	ldw	ra,4(sp)
 80154f8:	df000017 	ldw	fp,0(sp)
 80154fc:	dec00204 	addi	sp,sp,8
 8015500:	f800283a 	ret

08015504 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
 8015504:	defff404 	addi	sp,sp,-48
 8015508:	df000b15 	stw	fp,44(sp)
 801550c:	df000b04 	addi	fp,sp,44
 8015510:	e13ffb15 	stw	r4,-20(fp)
 8015514:	e17ffc15 	stw	r5,-16(fp)
 8015518:	e1bffd15 	stw	r6,-12(fp)
 801551c:	e1fffe15 	stw	r7,-8(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
 8015520:	e03ff915 	stw	zero,-28(fp)
 8015524:	008200b4 	movhi	r2,2050
 8015528:	10b13404 	addi	r2,r2,-15152
 801552c:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
 8015530:	1005003a 	cmpeq	r2,r2,zero
 8015534:	1000411e 	bne	r2,zero,801563c <alt_alarm_start+0x138>
  {
    if (alarm)
 8015538:	e0bffb17 	ldw	r2,-20(fp)
 801553c:	1005003a 	cmpeq	r2,r2,zero
 8015540:	10003b1e 	bne	r2,zero,8015630 <alt_alarm_start+0x12c>
    {
      alarm->callback = callback;
 8015544:	e0fffb17 	ldw	r3,-20(fp)
 8015548:	e0bffd17 	ldw	r2,-12(fp)
 801554c:	18800315 	stw	r2,12(r3)
      alarm->context  = context;
 8015550:	e0fffb17 	ldw	r3,-20(fp)
 8015554:	e0bffe17 	ldw	r2,-8(fp)
 8015558:	18800515 	stw	r2,20(r3)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 801555c:	0005303a 	rdctl	r2,status
 8015560:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8015564:	e0fff817 	ldw	r3,-32(fp)
 8015568:	00bfff84 	movi	r2,-2
 801556c:	1884703a 	and	r2,r3,r2
 8015570:	1001703a 	wrctl	status,r2
  
  return context;
 8015574:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
 8015578:	e0bffa15 	stw	r2,-24(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 801557c:	008200b4 	movhi	r2,2050
 8015580:	10b13504 	addi	r2,r2,-15148
 8015584:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
 8015588:	e0bff915 	stw	r2,-28(fp)
      
      alarm->time = nticks + current_nticks + 1; 
 801558c:	e0fffc17 	ldw	r3,-16(fp)
 8015590:	e0bff917 	ldw	r2,-28(fp)
 8015594:	1885883a 	add	r2,r3,r2
 8015598:	10c00044 	addi	r3,r2,1
 801559c:	e0bffb17 	ldw	r2,-20(fp)
 80155a0:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
 80155a4:	e0bffb17 	ldw	r2,-20(fp)
 80155a8:	10c00217 	ldw	r3,8(r2)
 80155ac:	e0bff917 	ldw	r2,-28(fp)
 80155b0:	1880042e 	bgeu	r3,r2,80155c4 <alt_alarm_start+0xc0>
      {
        alarm->rollover = 1;
 80155b4:	e0fffb17 	ldw	r3,-20(fp)
 80155b8:	00800044 	movi	r2,1
 80155bc:	18800405 	stb	r2,16(r3)
 80155c0:	00000206 	br	80155cc <alt_alarm_start+0xc8>
      }
      else
      {
        alarm->rollover = 0;
 80155c4:	e0bffb17 	ldw	r2,-20(fp)
 80155c8:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
 80155cc:	e0fffb17 	ldw	r3,-20(fp)
 80155d0:	008200b4 	movhi	r2,2050
 80155d4:	10a96e04 	addi	r2,r2,-23112
 80155d8:	e0bff615 	stw	r2,-40(fp)
 80155dc:	e0fff715 	stw	r3,-36(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 80155e0:	e0fff717 	ldw	r3,-36(fp)
 80155e4:	e0bff617 	ldw	r2,-40(fp)
 80155e8:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
 80155ec:	e0bff617 	ldw	r2,-40(fp)
 80155f0:	10c00017 	ldw	r3,0(r2)
 80155f4:	e0bff717 	ldw	r2,-36(fp)
 80155f8:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 80155fc:	e0bff617 	ldw	r2,-40(fp)
 8015600:	10c00017 	ldw	r3,0(r2)
 8015604:	e0bff717 	ldw	r2,-36(fp)
 8015608:	18800115 	stw	r2,4(r3)
  list->next           = entry;
 801560c:	e0fff617 	ldw	r3,-40(fp)
 8015610:	e0bff717 	ldw	r2,-36(fp)
 8015614:	18800015 	stw	r2,0(r3)
 8015618:	e0bffa17 	ldw	r2,-24(fp)
 801561c:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8015620:	e0bff517 	ldw	r2,-44(fp)
 8015624:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
 8015628:	e03fff15 	stw	zero,-4(fp)
 801562c:	00000506 	br	8015644 <alt_alarm_start+0x140>
    }
    else
    {
      return -EINVAL;
 8015630:	00bffa84 	movi	r2,-22
 8015634:	e0bfff15 	stw	r2,-4(fp)
 8015638:	00000206 	br	8015644 <alt_alarm_start+0x140>
    }
  }
  else
  {
    return -ENOTSUP;
 801563c:	00bfde84 	movi	r2,-134
 8015640:	e0bfff15 	stw	r2,-4(fp)
 8015644:	e0bfff17 	ldw	r2,-4(fp)
  }
}
 8015648:	e037883a 	mov	sp,fp
 801564c:	df000017 	ldw	fp,0(sp)
 8015650:	dec00104 	addi	sp,sp,4
 8015654:	f800283a 	ret

08015658 <alt_dcache_flush>:
 *
 * Any dirty lines in the data cache are written back to memory.
 */

void alt_dcache_flush (void* start, alt_u32 len)
{
 8015658:	defffb04 	addi	sp,sp,-20
 801565c:	df000415 	stw	fp,16(sp)
 8015660:	df000404 	addi	fp,sp,16
 8015664:	e13ffe15 	stw	r4,-8(fp)
 8015668:	e17fff15 	stw	r5,-4(fp)
  {
    len = NIOS2_DCACHE_SIZE;
  }
  #endif

  end = ((char*) start) + len; 
 801566c:	e0fffe17 	ldw	r3,-8(fp)
 8015670:	e0bfff17 	ldw	r2,-4(fp)
 8015674:	1885883a 	add	r2,r3,r2
 8015678:	e0bffc15 	stw	r2,-16(fp)

  for (i = start; i < end; i+= NIOS2_DCACHE_LINE_SIZE)
 801567c:	e0bffe17 	ldw	r2,-8(fp)
 8015680:	e0bffd15 	stw	r2,-12(fp)
 8015684:	00000506 	br	801569c <alt_dcache_flush+0x44>
  { 
    ALT_FLUSH_DATA(i); 
 8015688:	e0bffd17 	ldw	r2,-12(fp)
 801568c:	1000001b 	flushda	0(r2)
  }
  #endif

  end = ((char*) start) + len; 

  for (i = start; i < end; i+= NIOS2_DCACHE_LINE_SIZE)
 8015690:	e0bffd17 	ldw	r2,-12(fp)
 8015694:	10800804 	addi	r2,r2,32
 8015698:	e0bffd15 	stw	r2,-12(fp)
 801569c:	e0fffd17 	ldw	r3,-12(fp)
 80156a0:	e0bffc17 	ldw	r2,-16(fp)
 80156a4:	18bff836 	bltu	r3,r2,8015688 <alt_dcache_flush+0x30>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_DCACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_DCACHE_LINE_SIZE - 1))
 80156a8:	e0bffe17 	ldw	r2,-8(fp)
 80156ac:	108007cc 	andi	r2,r2,31
 80156b0:	1005003a 	cmpeq	r2,r2,zero
 80156b4:	1000021e 	bne	r2,zero,80156c0 <alt_dcache_flush+0x68>
  {
    ALT_FLUSH_DATA(i);
 80156b8:	e0bffd17 	ldw	r2,-12(fp)
 80156bc:	1000001b 	flushda	0(r2)
  }

#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 80156c0:	e037883a 	mov	sp,fp
 80156c4:	df000017 	ldw	fp,0(sp)
 80156c8:	dec00104 	addi	sp,sp,4
 80156cc:	f800283a 	ret

080156d0 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 80156d0:	defffe04 	addi	sp,sp,-8
 80156d4:	df000115 	stw	fp,4(sp)
 80156d8:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
 80156dc:	e03fff15 	stw	zero,-4(fp)
 80156e0:	00000506 	br	80156f8 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
 80156e4:	e0bfff17 	ldw	r2,-4(fp)
 80156e8:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
 80156ec:	e0bfff17 	ldw	r2,-4(fp)
 80156f0:	10800804 	addi	r2,r2,32
 80156f4:	e0bfff15 	stw	r2,-4(fp)
 80156f8:	e0bfff17 	ldw	r2,-4(fp)
 80156fc:	10840030 	cmpltui	r2,r2,4096
 8015700:	103ff81e 	bne	r2,zero,80156e4 <alt_dcache_flush_all+0x14>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 8015704:	e037883a 	mov	sp,fp
 8015708:	df000017 	ldw	fp,0(sp)
 801570c:	dec00104 	addi	sp,sp,4
 8015710:	f800283a 	ret

08015714 <alt_dev_llist_insert>:
 8015714:	defff904 	addi	sp,sp,-28
 8015718:	dfc00615 	stw	ra,24(sp)
 801571c:	df000515 	stw	fp,20(sp)
 8015720:	df000504 	addi	fp,sp,20
 8015724:	e13ffd15 	stw	r4,-12(fp)
 8015728:	e17ffe15 	stw	r5,-8(fp)
 801572c:	e0bffd17 	ldw	r2,-12(fp)
 8015730:	1005003a 	cmpeq	r2,r2,zero
 8015734:	1000041e 	bne	r2,zero,8015748 <alt_dev_llist_insert+0x34>
 8015738:	e0bffd17 	ldw	r2,-12(fp)
 801573c:	10800217 	ldw	r2,8(r2)
 8015740:	1004c03a 	cmpne	r2,r2,zero
 8015744:	1000071e 	bne	r2,zero,8015764 <alt_dev_llist_insert+0x50>
 8015748:	80157c80 	call	80157c8 <alt_get_errno>
 801574c:	1007883a 	mov	r3,r2
 8015750:	00800584 	movi	r2,22
 8015754:	18800015 	stw	r2,0(r3)
 8015758:	00bffa84 	movi	r2,-22
 801575c:	e0bfff15 	stw	r2,-4(fp)
 8015760:	00001306 	br	80157b0 <alt_dev_llist_insert+0x9c>
 8015764:	e0fffd17 	ldw	r3,-12(fp)
 8015768:	e0bffe17 	ldw	r2,-8(fp)
 801576c:	e0bffb15 	stw	r2,-20(fp)
 8015770:	e0fffc15 	stw	r3,-16(fp)
 8015774:	e0fffc17 	ldw	r3,-16(fp)
 8015778:	e0bffb17 	ldw	r2,-20(fp)
 801577c:	18800115 	stw	r2,4(r3)
 8015780:	e0bffb17 	ldw	r2,-20(fp)
 8015784:	10c00017 	ldw	r3,0(r2)
 8015788:	e0bffc17 	ldw	r2,-16(fp)
 801578c:	10c00015 	stw	r3,0(r2)
 8015790:	e0bffb17 	ldw	r2,-20(fp)
 8015794:	10c00017 	ldw	r3,0(r2)
 8015798:	e0bffc17 	ldw	r2,-16(fp)
 801579c:	18800115 	stw	r2,4(r3)
 80157a0:	e0fffb17 	ldw	r3,-20(fp)
 80157a4:	e0bffc17 	ldw	r2,-16(fp)
 80157a8:	18800015 	stw	r2,0(r3)
 80157ac:	e03fff15 	stw	zero,-4(fp)
 80157b0:	e0bfff17 	ldw	r2,-4(fp)
 80157b4:	e037883a 	mov	sp,fp
 80157b8:	dfc00117 	ldw	ra,4(sp)
 80157bc:	df000017 	ldw	fp,0(sp)
 80157c0:	dec00204 	addi	sp,sp,8
 80157c4:	f800283a 	ret

080157c8 <alt_get_errno>:
 80157c8:	defffd04 	addi	sp,sp,-12
 80157cc:	dfc00215 	stw	ra,8(sp)
 80157d0:	df000115 	stw	fp,4(sp)
 80157d4:	df000104 	addi	fp,sp,4
 80157d8:	008200b4 	movhi	r2,2050
 80157dc:	10a96404 	addi	r2,r2,-23152
 80157e0:	10800017 	ldw	r2,0(r2)
 80157e4:	1005003a 	cmpeq	r2,r2,zero
 80157e8:	1000061e 	bne	r2,zero,8015804 <alt_get_errno+0x3c>
 80157ec:	008200b4 	movhi	r2,2050
 80157f0:	10a96404 	addi	r2,r2,-23152
 80157f4:	10800017 	ldw	r2,0(r2)
 80157f8:	103ee83a 	callr	r2
 80157fc:	e0bfff15 	stw	r2,-4(fp)
 8015800:	00000306 	br	8015810 <alt_get_errno+0x48>
 8015804:	008200b4 	movhi	r2,2050
 8015808:	10b12904 	addi	r2,r2,-15196
 801580c:	e0bfff15 	stw	r2,-4(fp)
 8015810:	e0bfff17 	ldw	r2,-4(fp)
 8015814:	e037883a 	mov	sp,fp
 8015818:	dfc00117 	ldw	ra,4(sp)
 801581c:	df000017 	ldw	fp,0(sp)
 8015820:	dec00204 	addi	sp,sp,8
 8015824:	f800283a 	ret

08015828 <_do_ctors>:
 8015828:	defffd04 	addi	sp,sp,-12
 801582c:	dfc00215 	stw	ra,8(sp)
 8015830:	df000115 	stw	fp,4(sp)
 8015834:	df000104 	addi	fp,sp,4
 8015838:	00bfff04 	movi	r2,-4
 801583c:	00c20074 	movhi	r3,2049
 8015840:	18dcbb04 	addi	r3,r3,29420
 8015844:	1885883a 	add	r2,r3,r2
 8015848:	e0bfff15 	stw	r2,-4(fp)
 801584c:	00000606 	br	8015868 <_do_ctors+0x40>
 8015850:	e0bfff17 	ldw	r2,-4(fp)
 8015854:	10800017 	ldw	r2,0(r2)
 8015858:	103ee83a 	callr	r2
 801585c:	e0bfff17 	ldw	r2,-4(fp)
 8015860:	10bfff04 	addi	r2,r2,-4
 8015864:	e0bfff15 	stw	r2,-4(fp)
 8015868:	e0ffff17 	ldw	r3,-4(fp)
 801586c:	00820074 	movhi	r2,2049
 8015870:	109cba04 	addi	r2,r2,29416
 8015874:	18bff62e 	bgeu	r3,r2,8015850 <_do_ctors+0x28>
 8015878:	e037883a 	mov	sp,fp
 801587c:	dfc00117 	ldw	ra,4(sp)
 8015880:	df000017 	ldw	fp,0(sp)
 8015884:	dec00204 	addi	sp,sp,8
 8015888:	f800283a 	ret

0801588c <_do_dtors>:
 801588c:	defffd04 	addi	sp,sp,-12
 8015890:	dfc00215 	stw	ra,8(sp)
 8015894:	df000115 	stw	fp,4(sp)
 8015898:	df000104 	addi	fp,sp,4
 801589c:	00bfff04 	movi	r2,-4
 80158a0:	00c20074 	movhi	r3,2049
 80158a4:	18dcbb04 	addi	r3,r3,29420
 80158a8:	1885883a 	add	r2,r3,r2
 80158ac:	e0bfff15 	stw	r2,-4(fp)
 80158b0:	00000606 	br	80158cc <_do_dtors+0x40>
 80158b4:	e0bfff17 	ldw	r2,-4(fp)
 80158b8:	10800017 	ldw	r2,0(r2)
 80158bc:	103ee83a 	callr	r2
 80158c0:	e0bfff17 	ldw	r2,-4(fp)
 80158c4:	10bfff04 	addi	r2,r2,-4
 80158c8:	e0bfff15 	stw	r2,-4(fp)
 80158cc:	e0ffff17 	ldw	r3,-4(fp)
 80158d0:	00820074 	movhi	r2,2049
 80158d4:	109cbb04 	addi	r2,r2,29420
 80158d8:	18bff62e 	bgeu	r3,r2,80158b4 <_do_dtors+0x28>
 80158dc:	e037883a 	mov	sp,fp
 80158e0:	dfc00117 	ldw	ra,4(sp)
 80158e4:	df000017 	ldw	fp,0(sp)
 80158e8:	dec00204 	addi	sp,sp,8
 80158ec:	f800283a 	ret

080158f0 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 80158f0:	defff904 	addi	sp,sp,-28
 80158f4:	dfc00615 	stw	ra,24(sp)
 80158f8:	df000515 	stw	fp,20(sp)
 80158fc:	df000504 	addi	fp,sp,20
 8015900:	e13ffd15 	stw	r4,-12(fp)
 8015904:	e17ffe15 	stw	r5,-8(fp)
  alt_dev* next = (alt_dev*) llist->next;
 8015908:	e0bffe17 	ldw	r2,-8(fp)
 801590c:	10800017 	ldw	r2,0(r2)
 8015910:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
 8015914:	e13ffd17 	ldw	r4,-12(fp)
 8015918:	800591c0 	call	800591c <strlen>
 801591c:	10800044 	addi	r2,r2,1
 8015920:	e0bffb15 	stw	r2,-20(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 8015924:	00000d06 	br	801595c <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 8015928:	e0bffc17 	ldw	r2,-16(fp)
 801592c:	11000217 	ldw	r4,8(r2)
 8015930:	e1bffb17 	ldw	r6,-20(fp)
 8015934:	e17ffd17 	ldw	r5,-12(fp)
 8015938:	8016dd00 	call	8016dd0 <memcmp>
 801593c:	1004c03a 	cmpne	r2,r2,zero
 8015940:	1000031e 	bne	r2,zero,8015950 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
 8015944:	e0bffc17 	ldw	r2,-16(fp)
 8015948:	e0bfff15 	stw	r2,-4(fp)
 801594c:	00000706 	br	801596c <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
 8015950:	e0bffc17 	ldw	r2,-16(fp)
 8015954:	10800017 	ldw	r2,0(r2)
 8015958:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 801595c:	e0fffe17 	ldw	r3,-8(fp)
 8015960:	e0bffc17 	ldw	r2,-16(fp)
 8015964:	10fff01e 	bne	r2,r3,8015928 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
 8015968:	e03fff15 	stw	zero,-4(fp)
 801596c:	e0bfff17 	ldw	r2,-4(fp)
}
 8015970:	e037883a 	mov	sp,fp
 8015974:	dfc00117 	ldw	ra,4(sp)
 8015978:	df000017 	ldw	fp,0(sp)
 801597c:	dec00204 	addi	sp,sp,8
 8015980:	f800283a 	ret

08015984 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 8015984:	defffa04 	addi	sp,sp,-24
 8015988:	dfc00515 	stw	ra,20(sp)
 801598c:	df000415 	stw	fp,16(sp)
 8015990:	df000404 	addi	fp,sp,16
 8015994:	e13ffe15 	stw	r4,-8(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 8015998:	008200b4 	movhi	r2,2050
 801599c:	10a95f04 	addi	r2,r2,-23172
 80159a0:	10800017 	ldw	r2,0(r2)
 80159a4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 80159a8:	00003306 	br	8015a78 <alt_find_file+0xf4>
  {
    len = strlen(next->name);
 80159ac:	e0bffd17 	ldw	r2,-12(fp)
 80159b0:	11000217 	ldw	r4,8(r2)
 80159b4:	800591c0 	call	800591c <strlen>
 80159b8:	e0bffc15 	stw	r2,-16(fp)
    
    if (next->name[len-1] == '/')
 80159bc:	e0bffd17 	ldw	r2,-12(fp)
 80159c0:	10c00217 	ldw	r3,8(r2)
 80159c4:	e0bffc17 	ldw	r2,-16(fp)
 80159c8:	1885883a 	add	r2,r3,r2
 80159cc:	10bfffc4 	addi	r2,r2,-1
 80159d0:	10800003 	ldbu	r2,0(r2)
 80159d4:	10803fcc 	andi	r2,r2,255
 80159d8:	1080201c 	xori	r2,r2,128
 80159dc:	10bfe004 	addi	r2,r2,-128
 80159e0:	10800bd8 	cmpnei	r2,r2,47
 80159e4:	1000031e 	bne	r2,zero,80159f4 <alt_find_file+0x70>
    {
      len -= 1;
 80159e8:	e0bffc17 	ldw	r2,-16(fp)
 80159ec:	10bfffc4 	addi	r2,r2,-1
 80159f0:	e0bffc15 	stw	r2,-16(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 80159f4:	e0bffc17 	ldw	r2,-16(fp)
 80159f8:	1007883a 	mov	r3,r2
 80159fc:	e0bffe17 	ldw	r2,-8(fp)
 8015a00:	1885883a 	add	r2,r3,r2
 8015a04:	10800003 	ldbu	r2,0(r2)
 8015a08:	10803fcc 	andi	r2,r2,255
 8015a0c:	1080201c 	xori	r2,r2,128
 8015a10:	10bfe004 	addi	r2,r2,-128
 8015a14:	10800be0 	cmpeqi	r2,r2,47
 8015a18:	10000a1e 	bne	r2,zero,8015a44 <alt_find_file+0xc0>
 8015a1c:	e0bffc17 	ldw	r2,-16(fp)
 8015a20:	1007883a 	mov	r3,r2
 8015a24:	e0bffe17 	ldw	r2,-8(fp)
 8015a28:	1885883a 	add	r2,r3,r2
 8015a2c:	10800003 	ldbu	r2,0(r2)
 8015a30:	10803fcc 	andi	r2,r2,255
 8015a34:	1080201c 	xori	r2,r2,128
 8015a38:	10bfe004 	addi	r2,r2,-128
 8015a3c:	1004c03a 	cmpne	r2,r2,zero
 8015a40:	10000a1e 	bne	r2,zero,8015a6c <alt_find_file+0xe8>
 8015a44:	e0bffd17 	ldw	r2,-12(fp)
 8015a48:	11000217 	ldw	r4,8(r2)
 8015a4c:	e1bffc17 	ldw	r6,-16(fp)
 8015a50:	e17ffe17 	ldw	r5,-8(fp)
 8015a54:	8016dd00 	call	8016dd0 <memcmp>
 8015a58:	1004c03a 	cmpne	r2,r2,zero
 8015a5c:	1000031e 	bne	r2,zero,8015a6c <alt_find_file+0xe8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
 8015a60:	e0bffd17 	ldw	r2,-12(fp)
 8015a64:	e0bfff15 	stw	r2,-4(fp)
 8015a68:	00000806 	br	8015a8c <alt_find_file+0x108>
    }
    next = (alt_dev*) next->llist.next;
 8015a6c:	e0bffd17 	ldw	r2,-12(fp)
 8015a70:	10800017 	ldw	r2,0(r2)
 8015a74:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 8015a78:	00c200b4 	movhi	r3,2050
 8015a7c:	18e95f04 	addi	r3,r3,-23172
 8015a80:	e0bffd17 	ldw	r2,-12(fp)
 8015a84:	10ffc91e 	bne	r2,r3,80159ac <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
 8015a88:	e03fff15 	stw	zero,-4(fp)
 8015a8c:	e0bfff17 	ldw	r2,-4(fp)
}
 8015a90:	e037883a 	mov	sp,fp
 8015a94:	dfc00117 	ldw	ra,4(sp)
 8015a98:	df000017 	ldw	fp,0(sp)
 8015a9c:	dec00204 	addi	sp,sp,8
 8015aa0:	f800283a 	ret

08015aa4 <alt_flash_open_dev>:
#include "priv/alt_file.h"

ALT_LLIST_HEAD(alt_flash_dev_list);

alt_flash_fd* alt_flash_open_dev(const char* name)
{
 8015aa4:	defffb04 	addi	sp,sp,-20
 8015aa8:	dfc00415 	stw	ra,16(sp)
 8015aac:	df000315 	stw	fp,12(sp)
 8015ab0:	df000304 	addi	fp,sp,12
 8015ab4:	e13ffe15 	stw	r4,-8(fp)
  alt_flash_dev* dev = (alt_flash_dev*)alt_find_dev(name, &alt_flash_dev_list);
 8015ab8:	e13ffe17 	ldw	r4,-8(fp)
 8015abc:	d1601604 	addi	r5,gp,-32680
 8015ac0:	80158f00 	call	80158f0 <alt_find_dev>
 8015ac4:	e0bffd15 	stw	r2,-12(fp)

  if ((dev) && dev->open)
 8015ac8:	e0bffd17 	ldw	r2,-12(fp)
 8015acc:	1005003a 	cmpeq	r2,r2,zero
 8015ad0:	10000b1e 	bne	r2,zero,8015b00 <alt_flash_open_dev+0x5c>
 8015ad4:	e0bffd17 	ldw	r2,-12(fp)
 8015ad8:	10800317 	ldw	r2,12(r2)
 8015adc:	1005003a 	cmpeq	r2,r2,zero
 8015ae0:	1000071e 	bne	r2,zero,8015b00 <alt_flash_open_dev+0x5c>
  {
    return dev->open(dev, name);
 8015ae4:	e0bffd17 	ldw	r2,-12(fp)
 8015ae8:	10800317 	ldw	r2,12(r2)
 8015aec:	e13ffd17 	ldw	r4,-12(fp)
 8015af0:	e17ffe17 	ldw	r5,-8(fp)
 8015af4:	103ee83a 	callr	r2
 8015af8:	e0bfff15 	stw	r2,-4(fp)
 8015afc:	00000206 	br	8015b08 <alt_flash_open_dev+0x64>
  }

  return dev;
 8015b00:	e0bffd17 	ldw	r2,-12(fp)
 8015b04:	e0bfff15 	stw	r2,-4(fp)
 8015b08:	e0bfff17 	ldw	r2,-4(fp)
}
 8015b0c:	e037883a 	mov	sp,fp
 8015b10:	dfc00117 	ldw	ra,4(sp)
 8015b14:	df000017 	ldw	fp,0(sp)
 8015b18:	dec00204 	addi	sp,sp,8
 8015b1c:	f800283a 	ret

08015b20 <alt_flash_close_dev>:

void alt_flash_close_dev(alt_flash_fd* fd)
{
 8015b20:	defffd04 	addi	sp,sp,-12
 8015b24:	dfc00215 	stw	ra,8(sp)
 8015b28:	df000115 	stw	fp,4(sp)
 8015b2c:	df000104 	addi	fp,sp,4
 8015b30:	e13fff15 	stw	r4,-4(fp)
  if (fd && fd->close)
 8015b34:	e0bfff17 	ldw	r2,-4(fp)
 8015b38:	1005003a 	cmpeq	r2,r2,zero
 8015b3c:	1000081e 	bne	r2,zero,8015b60 <alt_flash_close_dev+0x40>
 8015b40:	e0bfff17 	ldw	r2,-4(fp)
 8015b44:	10800417 	ldw	r2,16(r2)
 8015b48:	1005003a 	cmpeq	r2,r2,zero
 8015b4c:	1000041e 	bne	r2,zero,8015b60 <alt_flash_close_dev+0x40>
  {
    fd->close(fd);
 8015b50:	e0bfff17 	ldw	r2,-4(fp)
 8015b54:	10800417 	ldw	r2,16(r2)
 8015b58:	e13fff17 	ldw	r4,-4(fp)
 8015b5c:	103ee83a 	callr	r2
  }
  return;
}
 8015b60:	e037883a 	mov	sp,fp
 8015b64:	dfc00117 	ldw	ra,4(sp)
 8015b68:	df000017 	ldw	fp,0(sp)
 8015b6c:	dec00204 	addi	sp,sp,8
 8015b70:	f800283a 	ret

08015b74 <alt_fs_reg>:
 * A return value of zero indicates success. A negative return value indicates
 * failure. 
 */
 
int alt_fs_reg (alt_dev* dev)
{
 8015b74:	defffb04 	addi	sp,sp,-20
 8015b78:	df000415 	stw	fp,16(sp)
 8015b7c:	df000404 	addi	fp,sp,16
 8015b80:	e13ffe15 	stw	r4,-8(fp)
  /*
   * check that the device has a name.
   */

  if (!dev->name)
 8015b84:	e0bffe17 	ldw	r2,-8(fp)
 8015b88:	10800217 	ldw	r2,8(r2)
 8015b8c:	1004c03a 	cmpne	r2,r2,zero
 8015b90:	1000031e 	bne	r2,zero,8015ba0 <alt_fs_reg+0x2c>
  {
    return -ENODEV;
 8015b94:	00bffb44 	movi	r2,-19
 8015b98:	e0bfff15 	stw	r2,-4(fp)
 8015b9c:	00001406 	br	8015bf0 <alt_fs_reg+0x7c>
  
  /*
   * register the file system.
   */

  alt_llist_insert(&alt_fs_list, &dev->llist);
 8015ba0:	e0fffe17 	ldw	r3,-8(fp)
 8015ba4:	008200b4 	movhi	r2,2050
 8015ba8:	10a95f04 	addi	r2,r2,-23172
 8015bac:	e0bffc15 	stw	r2,-16(fp)
 8015bb0:	e0fffd15 	stw	r3,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 8015bb4:	e0fffd17 	ldw	r3,-12(fp)
 8015bb8:	e0bffc17 	ldw	r2,-16(fp)
 8015bbc:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
 8015bc0:	e0bffc17 	ldw	r2,-16(fp)
 8015bc4:	10c00017 	ldw	r3,0(r2)
 8015bc8:	e0bffd17 	ldw	r2,-12(fp)
 8015bcc:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 8015bd0:	e0bffc17 	ldw	r2,-16(fp)
 8015bd4:	10c00017 	ldw	r3,0(r2)
 8015bd8:	e0bffd17 	ldw	r2,-12(fp)
 8015bdc:	18800115 	stw	r2,4(r3)
  list->next           = entry;
 8015be0:	e0fffc17 	ldw	r3,-16(fp)
 8015be4:	e0bffd17 	ldw	r2,-12(fp)
 8015be8:	18800015 	stw	r2,0(r3)

  return 0;
 8015bec:	e03fff15 	stw	zero,-4(fp)
 8015bf0:	e0bfff17 	ldw	r2,-4(fp)
} 
 8015bf4:	e037883a 	mov	sp,fp
 8015bf8:	df000017 	ldw	fp,0(sp)
 8015bfc:	dec00104 	addi	sp,sp,4
 8015c00:	f800283a 	ret

08015c04 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 8015c04:	defffc04 	addi	sp,sp,-16
 8015c08:	df000315 	stw	fp,12(sp)
 8015c0c:	df000304 	addi	fp,sp,12
 8015c10:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
 8015c14:	00bffa04 	movi	r2,-24
 8015c18:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 8015c1c:	e03ffe15 	stw	zero,-8(fp)
 8015c20:	00001e06 	br	8015c9c <alt_get_fd+0x98>
  {
    if (!alt_fd_list[i].dev)
 8015c24:	e0bffe17 	ldw	r2,-8(fp)
 8015c28:	00c200b4 	movhi	r3,2050
 8015c2c:	18e40e04 	addi	r3,r3,-28616
 8015c30:	10800324 	muli	r2,r2,12
 8015c34:	10c5883a 	add	r2,r2,r3
 8015c38:	10800017 	ldw	r2,0(r2)
 8015c3c:	1004c03a 	cmpne	r2,r2,zero
 8015c40:	1000131e 	bne	r2,zero,8015c90 <alt_get_fd+0x8c>
    {
      alt_fd_list[i].dev = dev;
 8015c44:	e0bffe17 	ldw	r2,-8(fp)
 8015c48:	00c200b4 	movhi	r3,2050
 8015c4c:	18e40e04 	addi	r3,r3,-28616
 8015c50:	10800324 	muli	r2,r2,12
 8015c54:	10c7883a 	add	r3,r2,r3
 8015c58:	e0bfff17 	ldw	r2,-4(fp)
 8015c5c:	18800015 	stw	r2,0(r3)
      if (i > alt_max_fd)
 8015c60:	008200b4 	movhi	r2,2050
 8015c64:	10a96304 	addi	r2,r2,-23156
 8015c68:	10c00017 	ldw	r3,0(r2)
 8015c6c:	e0bffe17 	ldw	r2,-8(fp)
 8015c70:	1880040e 	bge	r3,r2,8015c84 <alt_get_fd+0x80>
      {
        alt_max_fd = i;
 8015c74:	00c200b4 	movhi	r3,2050
 8015c78:	18e96304 	addi	r3,r3,-23156
 8015c7c:	e0bffe17 	ldw	r2,-8(fp)
 8015c80:	18800015 	stw	r2,0(r3)
      }
      rc = i;
 8015c84:	e0bffe17 	ldw	r2,-8(fp)
 8015c88:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
 8015c8c:	00000606 	br	8015ca8 <alt_get_fd+0xa4>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 8015c90:	e0bffe17 	ldw	r2,-8(fp)
 8015c94:	10800044 	addi	r2,r2,1
 8015c98:	e0bffe15 	stw	r2,-8(fp)
 8015c9c:	e0bffe17 	ldw	r2,-8(fp)
 8015ca0:	10800810 	cmplti	r2,r2,32
 8015ca4:	103fdf1e 	bne	r2,zero,8015c24 <alt_get_fd+0x20>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
 8015ca8:	e0bffd17 	ldw	r2,-12(fp)
}
 8015cac:	e037883a 	mov	sp,fp
 8015cb0:	df000017 	ldw	fp,0(sp)
 8015cb4:	dec00104 	addi	sp,sp,4
 8015cb8:	f800283a 	ret

08015cbc <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 8015cbc:	defffe04 	addi	sp,sp,-8
 8015cc0:	dfc00115 	stw	ra,4(sp)
 8015cc4:	df000015 	stw	fp,0(sp)
 8015cc8:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
 8015ccc:	0009883a 	mov	r4,zero
 8015cd0:	01440004 	movi	r5,4096
 8015cd4:	8016cf40 	call	8016cf4 <alt_icache_flush>
#endif
}
 8015cd8:	e037883a 	mov	sp,fp
 8015cdc:	dfc00117 	ldw	ra,4(sp)
 8015ce0:	df000017 	ldw	fp,0(sp)
 8015ce4:	dec00204 	addi	sp,sp,8
 8015ce8:	f800283a 	ret

08015cec <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 8015cec:	defff904 	addi	sp,sp,-28
 8015cf0:	dfc00615 	stw	ra,24(sp)
 8015cf4:	df000515 	stw	fp,20(sp)
 8015cf8:	df000504 	addi	fp,sp,20
 8015cfc:	e13ffc15 	stw	r4,-16(fp)
 8015d00:	e17ffd15 	stw	r5,-12(fp)
 8015d04:	e1bffe15 	stw	r6,-8(fp)
 8015d08:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
 8015d0c:	e0800217 	ldw	r2,8(fp)
 8015d10:	d8800015 	stw	r2,0(sp)
 8015d14:	e13ffc17 	ldw	r4,-16(fp)
 8015d18:	e17ffd17 	ldw	r5,-12(fp)
 8015d1c:	e1bffe17 	ldw	r6,-8(fp)
 8015d20:	e1ffff17 	ldw	r7,-4(fp)
 8015d24:	8015ec00 	call	8015ec0 <alt_iic_isr_register>
}  
 8015d28:	e037883a 	mov	sp,fp
 8015d2c:	dfc00117 	ldw	ra,4(sp)
 8015d30:	df000017 	ldw	fp,0(sp)
 8015d34:	dec00204 	addi	sp,sp,8
 8015d38:	f800283a 	ret

08015d3c <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
 8015d3c:	defff904 	addi	sp,sp,-28
 8015d40:	df000615 	stw	fp,24(sp)
 8015d44:	df000604 	addi	fp,sp,24
 8015d48:	e13ffe15 	stw	r4,-8(fp)
 8015d4c:	e17fff15 	stw	r5,-4(fp)
 8015d50:	e0bfff17 	ldw	r2,-4(fp)
 8015d54:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8015d58:	0005303a 	rdctl	r2,status
 8015d5c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8015d60:	e0fffb17 	ldw	r3,-20(fp)
 8015d64:	00bfff84 	movi	r2,-2
 8015d68:	1884703a 	and	r2,r3,r2
 8015d6c:	1001703a 	wrctl	status,r2
  
  return context;
 8015d70:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 8015d74:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active |= (1 << id);
 8015d78:	e0fffc17 	ldw	r3,-16(fp)
 8015d7c:	00800044 	movi	r2,1
 8015d80:	10c4983a 	sll	r2,r2,r3
 8015d84:	1007883a 	mov	r3,r2
 8015d88:	008200b4 	movhi	r2,2050
 8015d8c:	10b13304 	addi	r2,r2,-15156
 8015d90:	10800017 	ldw	r2,0(r2)
 8015d94:	1886b03a 	or	r3,r3,r2
 8015d98:	008200b4 	movhi	r2,2050
 8015d9c:	10b13304 	addi	r2,r2,-15156
 8015da0:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 8015da4:	008200b4 	movhi	r2,2050
 8015da8:	10b13304 	addi	r2,r2,-15156
 8015dac:	10800017 	ldw	r2,0(r2)
 8015db0:	100170fa 	wrctl	ienable,r2
 8015db4:	e0bffd17 	ldw	r2,-12(fp)
 8015db8:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8015dbc:	e0bffa17 	ldw	r2,-24(fp)
 8015dc0:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 8015dc4:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
 8015dc8:	e037883a 	mov	sp,fp
 8015dcc:	df000017 	ldw	fp,0(sp)
 8015dd0:	dec00104 	addi	sp,sp,4
 8015dd4:	f800283a 	ret

08015dd8 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
 8015dd8:	defff904 	addi	sp,sp,-28
 8015ddc:	df000615 	stw	fp,24(sp)
 8015de0:	df000604 	addi	fp,sp,24
 8015de4:	e13ffe15 	stw	r4,-8(fp)
 8015de8:	e17fff15 	stw	r5,-4(fp)
 8015dec:	e0bfff17 	ldw	r2,-4(fp)
 8015df0:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8015df4:	0005303a 	rdctl	r2,status
 8015df8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8015dfc:	e0fffb17 	ldw	r3,-20(fp)
 8015e00:	00bfff84 	movi	r2,-2
 8015e04:	1884703a 	and	r2,r3,r2
 8015e08:	1001703a 	wrctl	status,r2
  
  return context;
 8015e0c:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 8015e10:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active &= ~(1 << id);
 8015e14:	e0fffc17 	ldw	r3,-16(fp)
 8015e18:	00800044 	movi	r2,1
 8015e1c:	10c4983a 	sll	r2,r2,r3
 8015e20:	0084303a 	nor	r2,zero,r2
 8015e24:	1007883a 	mov	r3,r2
 8015e28:	008200b4 	movhi	r2,2050
 8015e2c:	10b13304 	addi	r2,r2,-15156
 8015e30:	10800017 	ldw	r2,0(r2)
 8015e34:	1886703a 	and	r3,r3,r2
 8015e38:	008200b4 	movhi	r2,2050
 8015e3c:	10b13304 	addi	r2,r2,-15156
 8015e40:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 8015e44:	008200b4 	movhi	r2,2050
 8015e48:	10b13304 	addi	r2,r2,-15156
 8015e4c:	10800017 	ldw	r2,0(r2)
 8015e50:	100170fa 	wrctl	ienable,r2
 8015e54:	e0bffd17 	ldw	r2,-12(fp)
 8015e58:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8015e5c:	e0bffa17 	ldw	r2,-24(fp)
 8015e60:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 8015e64:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
 8015e68:	e037883a 	mov	sp,fp
 8015e6c:	df000017 	ldw	fp,0(sp)
 8015e70:	dec00104 	addi	sp,sp,4
 8015e74:	f800283a 	ret

08015e78 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
 8015e78:	defffc04 	addi	sp,sp,-16
 8015e7c:	df000315 	stw	fp,12(sp)
 8015e80:	df000304 	addi	fp,sp,12
 8015e84:	e13ffe15 	stw	r4,-8(fp)
 8015e88:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
 8015e8c:	000530fa 	rdctl	r2,ienable
 8015e90:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
 8015e94:	e0ffff17 	ldw	r3,-4(fp)
 8015e98:	00800044 	movi	r2,1
 8015e9c:	10c4983a 	sll	r2,r2,r3
 8015ea0:	1007883a 	mov	r3,r2
 8015ea4:	e0bffd17 	ldw	r2,-12(fp)
 8015ea8:	1884703a 	and	r2,r3,r2
 8015eac:	1004c03a 	cmpne	r2,r2,zero
}
 8015eb0:	e037883a 	mov	sp,fp
 8015eb4:	df000017 	ldw	fp,0(sp)
 8015eb8:	dec00104 	addi	sp,sp,4
 8015ebc:	f800283a 	ret

08015ec0 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 8015ec0:	defff404 	addi	sp,sp,-48
 8015ec4:	dfc00b15 	stw	ra,44(sp)
 8015ec8:	df000a15 	stw	fp,40(sp)
 8015ecc:	df000a04 	addi	fp,sp,40
 8015ed0:	e13ffb15 	stw	r4,-20(fp)
 8015ed4:	e17ffc15 	stw	r5,-16(fp)
 8015ed8:	e1bffd15 	stw	r6,-12(fp)
 8015edc:	e1fffe15 	stw	r7,-8(fp)
  int rc = -EINVAL;  
 8015ee0:	00bffa84 	movi	r2,-22
 8015ee4:	e0bffa15 	stw	r2,-24(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
 8015ee8:	e0bffc17 	ldw	r2,-16(fp)
 8015eec:	e0bff915 	stw	r2,-28(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 8015ef0:	e0bff917 	ldw	r2,-28(fp)
 8015ef4:	10800808 	cmpgei	r2,r2,32
 8015ef8:	1000291e 	bne	r2,zero,8015fa0 <alt_iic_isr_register+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8015efc:	0005303a 	rdctl	r2,status
 8015f00:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8015f04:	e0fff717 	ldw	r3,-36(fp)
 8015f08:	00bfff84 	movi	r2,-2
 8015f0c:	1884703a 	and	r2,r3,r2
 8015f10:	1001703a 	wrctl	status,r2
  
  return context;
 8015f14:	e0bff717 	ldw	r2,-36(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
 8015f18:	e0bff815 	stw	r2,-32(fp)

    alt_irq[id].handler = isr;
 8015f1c:	e0bff917 	ldw	r2,-28(fp)
 8015f20:	00c200b4 	movhi	r3,2050
 8015f24:	18f14004 	addi	r3,r3,-15104
 8015f28:	100490fa 	slli	r2,r2,3
 8015f2c:	10c7883a 	add	r3,r2,r3
 8015f30:	e0bffd17 	ldw	r2,-12(fp)
 8015f34:	18800015 	stw	r2,0(r3)
    alt_irq[id].context = isr_context;
 8015f38:	e0bff917 	ldw	r2,-28(fp)
 8015f3c:	00c200b4 	movhi	r3,2050
 8015f40:	18f14004 	addi	r3,r3,-15104
 8015f44:	100490fa 	slli	r2,r2,3
 8015f48:	10c5883a 	add	r2,r2,r3
 8015f4c:	10c00104 	addi	r3,r2,4
 8015f50:	e0bffe17 	ldw	r2,-8(fp)
 8015f54:	18800015 	stw	r2,0(r3)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
 8015f58:	e0bffd17 	ldw	r2,-12(fp)
 8015f5c:	1005003a 	cmpeq	r2,r2,zero
 8015f60:	1000051e 	bne	r2,zero,8015f78 <alt_iic_isr_register+0xb8>
 8015f64:	e17ff917 	ldw	r5,-28(fp)
 8015f68:	e13ffb17 	ldw	r4,-20(fp)
 8015f6c:	8015d3c0 	call	8015d3c <alt_ic_irq_enable>
 8015f70:	e0bfff15 	stw	r2,-4(fp)
 8015f74:	00000406 	br	8015f88 <alt_iic_isr_register+0xc8>
 8015f78:	e17ff917 	ldw	r5,-28(fp)
 8015f7c:	e13ffb17 	ldw	r4,-20(fp)
 8015f80:	8015dd80 	call	8015dd8 <alt_ic_irq_disable>
 8015f84:	e0bfff15 	stw	r2,-4(fp)
 8015f88:	e0bfff17 	ldw	r2,-4(fp)
 8015f8c:	e0bffa15 	stw	r2,-24(fp)
 8015f90:	e0bff817 	ldw	r2,-32(fp)
 8015f94:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8015f98:	e0bff617 	ldw	r2,-40(fp)
 8015f9c:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
 8015fa0:	e0bffa17 	ldw	r2,-24(fp)
}
 8015fa4:	e037883a 	mov	sp,fp
 8015fa8:	dfc00117 	ldw	ra,4(sp)
 8015fac:	df000017 	ldw	fp,0(sp)
 8015fb0:	dec00204 	addi	sp,sp,8
 8015fb4:	f800283a 	ret

08015fb8 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
 8015fb8:	defff904 	addi	sp,sp,-28
 8015fbc:	dfc00615 	stw	ra,24(sp)
 8015fc0:	df000515 	stw	fp,20(sp)
 8015fc4:	df000504 	addi	fp,sp,20
 8015fc8:	e13ffc15 	stw	r4,-16(fp)
 8015fcc:	e17ffd15 	stw	r5,-12(fp)
 8015fd0:	e1bffe15 	stw	r6,-8(fp)
 8015fd4:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
 8015fd8:	e13ffd17 	ldw	r4,-12(fp)
 8015fdc:	e17ffe17 	ldw	r5,-8(fp)
 8015fe0:	e1bfff17 	ldw	r6,-4(fp)
 8015fe4:	800e6a40 	call	800e6a4 <open>
 8015fe8:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
 8015fec:	e0bffb17 	ldw	r2,-20(fp)
 8015ff0:	1004803a 	cmplt	r2,r2,zero
 8015ff4:	10001c1e 	bne	r2,zero,8016068 <alt_open_fd+0xb0>
  {
    fd->dev      = alt_fd_list[old].dev;
 8015ff8:	e0bffb17 	ldw	r2,-20(fp)
 8015ffc:	00c200b4 	movhi	r3,2050
 8016000:	18e40e04 	addi	r3,r3,-28616
 8016004:	10800324 	muli	r2,r2,12
 8016008:	10c5883a 	add	r2,r2,r3
 801600c:	10c00017 	ldw	r3,0(r2)
 8016010:	e0bffc17 	ldw	r2,-16(fp)
 8016014:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
 8016018:	e0bffb17 	ldw	r2,-20(fp)
 801601c:	00c200b4 	movhi	r3,2050
 8016020:	18e40e04 	addi	r3,r3,-28616
 8016024:	10800324 	muli	r2,r2,12
 8016028:	10c5883a 	add	r2,r2,r3
 801602c:	10800104 	addi	r2,r2,4
 8016030:	10c00017 	ldw	r3,0(r2)
 8016034:	e0bffc17 	ldw	r2,-16(fp)
 8016038:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 801603c:	e0bffb17 	ldw	r2,-20(fp)
 8016040:	00c200b4 	movhi	r3,2050
 8016044:	18e40e04 	addi	r3,r3,-28616
 8016048:	10800324 	muli	r2,r2,12
 801604c:	10c5883a 	add	r2,r2,r3
 8016050:	10800204 	addi	r2,r2,8
 8016054:	10c00017 	ldw	r3,0(r2)
 8016058:	e0bffc17 	ldw	r2,-16(fp)
 801605c:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
 8016060:	e13ffb17 	ldw	r4,-20(fp)
 8016064:	800ea0c0 	call	800ea0c <alt_release_fd>
  }
} 
 8016068:	e037883a 	mov	sp,fp
 801606c:	dfc00117 	ldw	ra,4(sp)
 8016070:	df000017 	ldw	fp,0(sp)
 8016074:	dec00204 	addi	sp,sp,8
 8016078:	f800283a 	ret

0801607c <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 801607c:	defffb04 	addi	sp,sp,-20
 8016080:	dfc00415 	stw	ra,16(sp)
 8016084:	df000315 	stw	fp,12(sp)
 8016088:	df000304 	addi	fp,sp,12
 801608c:	e13ffd15 	stw	r4,-12(fp)
 8016090:	e17ffe15 	stw	r5,-8(fp)
 8016094:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 8016098:	010200b4 	movhi	r4,2050
 801609c:	21241104 	addi	r4,r4,-28604
 80160a0:	e17ffd17 	ldw	r5,-12(fp)
 80160a4:	01800044 	movi	r6,1
 80160a8:	01c07fc4 	movi	r7,511
 80160ac:	8015fb80 	call	8015fb8 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 80160b0:	010200b4 	movhi	r4,2050
 80160b4:	21240e04 	addi	r4,r4,-28616
 80160b8:	e17ffe17 	ldw	r5,-8(fp)
 80160bc:	000d883a 	mov	r6,zero
 80160c0:	01c07fc4 	movi	r7,511
 80160c4:	8015fb80 	call	8015fb8 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 80160c8:	010200b4 	movhi	r4,2050
 80160cc:	21241404 	addi	r4,r4,-28592
 80160d0:	e17fff17 	ldw	r5,-4(fp)
 80160d4:	01800044 	movi	r6,1
 80160d8:	01c07fc4 	movi	r7,511
 80160dc:	8015fb80 	call	8015fb8 <alt_open_fd>
}  
 80160e0:	e037883a 	mov	sp,fp
 80160e4:	dfc00117 	ldw	ra,4(sp)
 80160e8:	df000017 	ldw	fp,0(sp)
 80160ec:	dec00204 	addi	sp,sp,8
 80160f0:	f800283a 	ret

080160f4 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
 80160f4:	defffa04 	addi	sp,sp,-24
 80160f8:	df000515 	stw	fp,20(sp)
 80160fc:	df000504 	addi	fp,sp,20
 8016100:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8016104:	0005303a 	rdctl	r2,status
 8016108:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 801610c:	e0fffd17 	ldw	r3,-12(fp)
 8016110:	00bfff84 	movi	r2,-2
 8016114:	1884703a 	and	r2,r3,r2
 8016118:	1001703a 	wrctl	status,r2
  
  return context;
 801611c:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
 8016120:	e0bffe15 	stw	r2,-8(fp)
  alt_llist_remove (&alarm->llist);
 8016124:	e0bfff17 	ldw	r2,-4(fp)
 8016128:	e0bffc15 	stw	r2,-16(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 801612c:	e0bffc17 	ldw	r2,-16(fp)
 8016130:	10c00017 	ldw	r3,0(r2)
 8016134:	e0bffc17 	ldw	r2,-16(fp)
 8016138:	10800117 	ldw	r2,4(r2)
 801613c:	18800115 	stw	r2,4(r3)
  entry->previous->next = entry->next;
 8016140:	e0bffc17 	ldw	r2,-16(fp)
 8016144:	10c00117 	ldw	r3,4(r2)
 8016148:	e0bffc17 	ldw	r2,-16(fp)
 801614c:	10800017 	ldw	r2,0(r2)
 8016150:	18800015 	stw	r2,0(r3)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 8016154:	e0fffc17 	ldw	r3,-16(fp)
 8016158:	e0bffc17 	ldw	r2,-16(fp)
 801615c:	18800115 	stw	r2,4(r3)
  entry->next     = entry;
 8016160:	e0fffc17 	ldw	r3,-16(fp)
 8016164:	e0bffc17 	ldw	r2,-16(fp)
 8016168:	18800015 	stw	r2,0(r3)
 801616c:	e0bffe17 	ldw	r2,-8(fp)
 8016170:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8016174:	e0bffb17 	ldw	r2,-20(fp)
 8016178:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
 801617c:	e037883a 	mov	sp,fp
 8016180:	df000017 	ldw	fp,0(sp)
 8016184:	dec00104 	addi	sp,sp,4
 8016188:	f800283a 	ret

0801618c <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 801618c:	defffb04 	addi	sp,sp,-20
 8016190:	dfc00415 	stw	ra,16(sp)
 8016194:	df000315 	stw	fp,12(sp)
 8016198:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 801619c:	d0a01917 	ldw	r2,-32668(gp)
 80161a0:	e0bffe15 	stw	r2,-8(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 80161a4:	d0a7e017 	ldw	r2,-24704(gp)
 80161a8:	10800044 	addi	r2,r2,1
 80161ac:	d0a7e015 	stw	r2,-24704(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 80161b0:	00003106 	br	8016278 <alt_tick+0xec>
  {
    next = (alt_alarm*) alarm->llist.next;
 80161b4:	e0bffe17 	ldw	r2,-8(fp)
 80161b8:	10800017 	ldw	r2,0(r2)
 80161bc:	e0bfff15 	stw	r2,-4(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 80161c0:	e0bffe17 	ldw	r2,-8(fp)
 80161c4:	10800403 	ldbu	r2,16(r2)
 80161c8:	10803fcc 	andi	r2,r2,255
 80161cc:	1005003a 	cmpeq	r2,r2,zero
 80161d0:	1000051e 	bne	r2,zero,80161e8 <alt_tick+0x5c>
 80161d4:	d0a7e017 	ldw	r2,-24704(gp)
 80161d8:	1004c03a 	cmpne	r2,r2,zero
 80161dc:	1000021e 	bne	r2,zero,80161e8 <alt_tick+0x5c>
    {
      alarm->rollover = 0;
 80161e0:	e0bffe17 	ldw	r2,-8(fp)
 80161e4:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 80161e8:	e0bffe17 	ldw	r2,-8(fp)
 80161ec:	10c00217 	ldw	r3,8(r2)
 80161f0:	d0a7e017 	ldw	r2,-24704(gp)
 80161f4:	10c01e36 	bltu	r2,r3,8016270 <alt_tick+0xe4>
 80161f8:	e0bffe17 	ldw	r2,-8(fp)
 80161fc:	10800403 	ldbu	r2,16(r2)
 8016200:	10803fcc 	andi	r2,r2,255
 8016204:	1004c03a 	cmpne	r2,r2,zero
 8016208:	1000191e 	bne	r2,zero,8016270 <alt_tick+0xe4>
    {
      next_callback = alarm->callback (alarm->context);
 801620c:	e0bffe17 	ldw	r2,-8(fp)
 8016210:	10c00317 	ldw	r3,12(r2)
 8016214:	e0bffe17 	ldw	r2,-8(fp)
 8016218:	11000517 	ldw	r4,20(r2)
 801621c:	183ee83a 	callr	r3
 8016220:	e0bffd15 	stw	r2,-12(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 8016224:	e0bffd17 	ldw	r2,-12(fp)
 8016228:	1004c03a 	cmpne	r2,r2,zero
 801622c:	1000031e 	bne	r2,zero,801623c <alt_tick+0xb0>
      {
        alt_alarm_stop (alarm);
 8016230:	e13ffe17 	ldw	r4,-8(fp)
 8016234:	80160f40 	call	80160f4 <alt_alarm_stop>
 8016238:	00000d06 	br	8016270 <alt_tick+0xe4>
      }
      else
      {
        alarm->time += next_callback;
 801623c:	e0bffe17 	ldw	r2,-8(fp)
 8016240:	10c00217 	ldw	r3,8(r2)
 8016244:	e0bffd17 	ldw	r2,-12(fp)
 8016248:	1887883a 	add	r3,r3,r2
 801624c:	e0bffe17 	ldw	r2,-8(fp)
 8016250:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 8016254:	e0bffe17 	ldw	r2,-8(fp)
 8016258:	10c00217 	ldw	r3,8(r2)
 801625c:	d0a7e017 	ldw	r2,-24704(gp)
 8016260:	1880032e 	bgeu	r3,r2,8016270 <alt_tick+0xe4>
        {
          alarm->rollover = 1;
 8016264:	e0fffe17 	ldw	r3,-8(fp)
 8016268:	00800044 	movi	r2,1
 801626c:	18800405 	stb	r2,16(r3)
        }
      }
    }
    alarm = next;
 8016270:	e0bfff17 	ldw	r2,-4(fp)
 8016274:	e0bffe15 	stw	r2,-8(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 8016278:	d0e01904 	addi	r3,gp,-32668
 801627c:	e0bffe17 	ldw	r2,-8(fp)
 8016280:	10ffcc1e 	bne	r2,r3,80161b4 <alt_tick+0x28>
  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
}
 8016284:	e037883a 	mov	sp,fp
 8016288:	dfc00117 	ldw	ra,4(sp)
 801628c:	df000017 	ldw	fp,0(sp)
 8016290:	dec00204 	addi	sp,sp,8
 8016294:	f800283a 	ret

08016298 <usleep>:
 8016298:	defffd04 	addi	sp,sp,-12
 801629c:	dfc00215 	stw	ra,8(sp)
 80162a0:	df000115 	stw	fp,4(sp)
 80162a4:	df000104 	addi	fp,sp,4
 80162a8:	e13fff15 	stw	r4,-4(fp)
 80162ac:	e13fff17 	ldw	r4,-4(fp)
 80162b0:	8016ba80 	call	8016ba8 <alt_busy_sleep>
 80162b4:	e037883a 	mov	sp,fp
 80162b8:	dfc00117 	ldw	ra,4(sp)
 80162bc:	df000017 	ldw	fp,0(sp)
 80162c0:	dec00204 	addi	sp,sp,8
 80162c4:	f800283a 	ret

080162c8 <altera_nios2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_irq_init(void) 
{
 80162c8:	deffff04 	addi	sp,sp,-4
 80162cc:	df000015 	stw	fp,0(sp)
 80162d0:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 80162d4:	000170fa 	wrctl	ienable,zero
}
 80162d8:	e037883a 	mov	sp,fp
 80162dc:	df000017 	ldw	fp,0(sp)
 80162e0:	dec00104 	addi	sp,sp,4
 80162e4:	f800283a 	ret

080162e8 <alt_program_amd>:
 80162e8:	defff704 	addi	sp,sp,-36
 80162ec:	dfc00815 	stw	ra,32(sp)
 80162f0:	df000715 	stw	fp,28(sp)
 80162f4:	df000704 	addi	fp,sp,28
 80162f8:	e13ffc15 	stw	r4,-16(fp)
 80162fc:	e17ffd15 	stw	r5,-12(fp)
 8016300:	e1bffe15 	stw	r6,-8(fp)
 8016304:	e1ffff15 	stw	r7,-4(fp)
 8016308:	e03ffb15 	stw	zero,-20(fp)
 801630c:	e0bffc17 	ldw	r2,-16(fp)
 8016310:	e0bffa15 	stw	r2,-24(fp)
 8016314:	e1bfff17 	ldw	r6,-4(fp)
 8016318:	00820074 	movhi	r2,2049
 801631c:	1099a304 	addi	r2,r2,26252
 8016320:	d8800015 	stw	r2,0(sp)
 8016324:	e13ffa17 	ldw	r4,-24(fp)
 8016328:	e17ffe17 	ldw	r5,-8(fp)
 801632c:	e1c00217 	ldw	r7,8(fp)
 8016330:	800f6640 	call	800f664 <alt_flash_program_block>
 8016334:	e0bffb15 	stw	r2,-20(fp)
 8016338:	e0bffb17 	ldw	r2,-20(fp)
 801633c:	e037883a 	mov	sp,fp
 8016340:	dfc00117 	ldw	ra,4(sp)
 8016344:	df000017 	ldw	fp,0(sp)
 8016348:	dec00204 	addi	sp,sp,8
 801634c:	f800283a 	ret

08016350 <alt_erase_block_amd>:
 8016350:	defff804 	addi	sp,sp,-32
 8016354:	dfc00715 	stw	ra,28(sp)
 8016358:	df000615 	stw	fp,24(sp)
 801635c:	df000604 	addi	fp,sp,24
 8016360:	e13ffe15 	stw	r4,-8(fp)
 8016364:	e17fff15 	stw	r5,-4(fp)
 8016368:	e03ffc15 	stw	zero,-16(fp)
 801636c:	e0bffe17 	ldw	r2,-8(fp)
 8016370:	e0bffa15 	stw	r2,-24(fp)
 8016374:	e0bffa17 	ldw	r2,-24(fp)
 8016378:	10c03317 	ldw	r3,204(r2)
 801637c:	e0bffa17 	ldw	r2,-24(fp)
 8016380:	11000a17 	ldw	r4,40(r2)
 8016384:	01415544 	movi	r5,1365
 8016388:	01802a84 	movi	r6,170
 801638c:	183ee83a 	callr	r3
 8016390:	e0bffa17 	ldw	r2,-24(fp)
 8016394:	10c03317 	ldw	r3,204(r2)
 8016398:	e0bffa17 	ldw	r2,-24(fp)
 801639c:	11000a17 	ldw	r4,40(r2)
 80163a0:	0140aa84 	movi	r5,682
 80163a4:	01801544 	movi	r6,85
 80163a8:	183ee83a 	callr	r3
 80163ac:	e0bffa17 	ldw	r2,-24(fp)
 80163b0:	10c03317 	ldw	r3,204(r2)
 80163b4:	e0bffa17 	ldw	r2,-24(fp)
 80163b8:	11000a17 	ldw	r4,40(r2)
 80163bc:	01415544 	movi	r5,1365
 80163c0:	01802004 	movi	r6,128
 80163c4:	183ee83a 	callr	r3
 80163c8:	e0bffa17 	ldw	r2,-24(fp)
 80163cc:	10c03317 	ldw	r3,204(r2)
 80163d0:	e0bffa17 	ldw	r2,-24(fp)
 80163d4:	11000a17 	ldw	r4,40(r2)
 80163d8:	01415544 	movi	r5,1365
 80163dc:	01802a84 	movi	r6,170
 80163e0:	183ee83a 	callr	r3
 80163e4:	e0bffa17 	ldw	r2,-24(fp)
 80163e8:	10c03317 	ldw	r3,204(r2)
 80163ec:	e0bffa17 	ldw	r2,-24(fp)
 80163f0:	11000a17 	ldw	r4,40(r2)
 80163f4:	0140aa84 	movi	r5,682
 80163f8:	01801544 	movi	r6,85
 80163fc:	183ee83a 	callr	r3
 8016400:	e0bffa17 	ldw	r2,-24(fp)
 8016404:	11803517 	ldw	r6,212(r2)
 8016408:	e0bffa17 	ldw	r2,-24(fp)
 801640c:	10800a17 	ldw	r2,40(r2)
 8016410:	1007883a 	mov	r3,r2
 8016414:	e0bfff17 	ldw	r2,-4(fp)
 8016418:	1889883a 	add	r4,r3,r2
 801641c:	01400c04 	movi	r5,48
 8016420:	303ee83a 	callr	r6
 8016424:	0109c404 	movi	r4,10000
 8016428:	80162980 	call	8016298 <usleep>
 801642c:	00800c84 	movi	r2,50
 8016430:	e0bffb15 	stw	r2,-20(fp)
 8016434:	e0bffa17 	ldw	r2,-24(fp)
 8016438:	10800a17 	ldw	r2,40(r2)
 801643c:	1007883a 	mov	r3,r2
 8016440:	e0bfff17 	ldw	r2,-4(fp)
 8016444:	1885883a 	add	r2,r3,r2
 8016448:	10800023 	ldbuio	r2,0(r2)
 801644c:	e0bffd05 	stb	r2,-12(fp)
 8016450:	0100fa04 	movi	r4,1000
 8016454:	80162980 	call	8016298 <usleep>
 8016458:	e0bffb17 	ldw	r2,-20(fp)
 801645c:	10bfffc4 	addi	r2,r2,-1
 8016460:	e0bffb15 	stw	r2,-20(fp)
 8016464:	e0bffd03 	ldbu	r2,-12(fp)
 8016468:	10803fcc 	andi	r2,r2,255
 801646c:	1080020c 	andi	r2,r2,8
 8016470:	1004c03a 	cmpne	r2,r2,zero
 8016474:	1000031e 	bne	r2,zero,8016484 <alt_erase_block_amd+0x134>
 8016478:	e0bffb17 	ldw	r2,-20(fp)
 801647c:	10800048 	cmpgei	r2,r2,1
 8016480:	103fec1e 	bne	r2,zero,8016434 <alt_erase_block_amd+0xe4>
 8016484:	e0bffa17 	ldw	r2,-24(fp)
 8016488:	10803117 	ldw	r2,196(r2)
 801648c:	e0bffb15 	stw	r2,-20(fp)
 8016490:	00001706 	br	80164f0 <alt_erase_block_amd+0x1a0>
 8016494:	e0bffa17 	ldw	r2,-24(fp)
 8016498:	10800a17 	ldw	r2,40(r2)
 801649c:	1007883a 	mov	r3,r2
 80164a0:	e0bfff17 	ldw	r2,-4(fp)
 80164a4:	1885883a 	add	r2,r3,r2
 80164a8:	10800023 	ldbuio	r2,0(r2)
 80164ac:	e0bffd05 	stb	r2,-12(fp)
 80164b0:	e0bffd03 	ldbu	r2,-12(fp)
 80164b4:	10803fcc 	andi	r2,r2,255
 80164b8:	1080201c 	xori	r2,r2,128
 80164bc:	10bfe004 	addi	r2,r2,-128
 80164c0:	1004803a 	cmplt	r2,r2,zero
 80164c4:	10000d1e 	bne	r2,zero,80164fc <alt_erase_block_amd+0x1ac>
 80164c8:	e0bffd03 	ldbu	r2,-12(fp)
 80164cc:	10803fcc 	andi	r2,r2,255
 80164d0:	1080080c 	andi	r2,r2,32
 80164d4:	1004c03a 	cmpne	r2,r2,zero
 80164d8:	1000081e 	bne	r2,zero,80164fc <alt_erase_block_amd+0x1ac>
 80164dc:	0100fa04 	movi	r4,1000
 80164e0:	80162980 	call	8016298 <usleep>
 80164e4:	e0bffb17 	ldw	r2,-20(fp)
 80164e8:	10bf0604 	addi	r2,r2,-1000
 80164ec:	e0bffb15 	stw	r2,-20(fp)
 80164f0:	e0bffb17 	ldw	r2,-20(fp)
 80164f4:	10800048 	cmpgei	r2,r2,1
 80164f8:	103fe61e 	bne	r2,zero,8016494 <alt_erase_block_amd+0x144>
 80164fc:	e0bffb17 	ldw	r2,-20(fp)
 8016500:	10800048 	cmpgei	r2,r2,1
 8016504:	1000031e 	bne	r2,zero,8016514 <alt_erase_block_amd+0x1c4>
 8016508:	00bfe304 	movi	r2,-116
 801650c:	e0bffc15 	stw	r2,-16(fp)
 8016510:	00000f06 	br	8016550 <alt_erase_block_amd+0x200>
 8016514:	e0bffa17 	ldw	r2,-24(fp)
 8016518:	10800a17 	ldw	r2,40(r2)
 801651c:	1007883a 	mov	r3,r2
 8016520:	e0bfff17 	ldw	r2,-4(fp)
 8016524:	1885883a 	add	r2,r3,r2
 8016528:	10800023 	ldbuio	r2,0(r2)
 801652c:	e0bffd05 	stb	r2,-12(fp)
 8016530:	e0bffd03 	ldbu	r2,-12(fp)
 8016534:	10803fcc 	andi	r2,r2,255
 8016538:	1080201c 	xori	r2,r2,128
 801653c:	10bfe004 	addi	r2,r2,-128
 8016540:	1004803a 	cmplt	r2,r2,zero
 8016544:	1000021e 	bne	r2,zero,8016550 <alt_erase_block_amd+0x200>
 8016548:	00bffec4 	movi	r2,-5
 801654c:	e0bffc15 	stw	r2,-16(fp)
 8016550:	e0bffc17 	ldw	r2,-16(fp)
 8016554:	e037883a 	mov	sp,fp
 8016558:	dfc00117 	ldw	ra,4(sp)
 801655c:	df000017 	ldw	fp,0(sp)
 8016560:	dec00204 	addi	sp,sp,8
 8016564:	f800283a 	ret

08016568 <alt_wait_for_command_to_complete_amd>:
 8016568:	defff804 	addi	sp,sp,-32
 801656c:	dfc00715 	stw	ra,28(sp)
 8016570:	df000615 	stw	fp,24(sp)
 8016574:	df000604 	addi	fp,sp,24
 8016578:	e13ffd15 	stw	r4,-12(fp)
 801657c:	e17ffe15 	stw	r5,-8(fp)
 8016580:	e1bfff05 	stb	r6,-4(fp)
 8016584:	e0bffd17 	ldw	r2,-12(fp)
 8016588:	10803017 	ldw	r2,192(r2)
 801658c:	10801924 	muli	r2,r2,100
 8016590:	e0bffb15 	stw	r2,-20(fp)
 8016594:	e03ffa15 	stw	zero,-24(fp)
 8016598:	e0bffd17 	ldw	r2,-12(fp)
 801659c:	10800a17 	ldw	r2,40(r2)
 80165a0:	1007883a 	mov	r3,r2
 80165a4:	e0bffe17 	ldw	r2,-8(fp)
 80165a8:	1885883a 	add	r2,r3,r2
 80165ac:	10800023 	ldbuio	r2,0(r2)
 80165b0:	e0bffc05 	stb	r2,-16(fp)
 80165b4:	00001706 	br	8016614 <alt_wait_for_command_to_complete_amd+0xac>
 80165b8:	e0bffc03 	ldbu	r2,-16(fp)
 80165bc:	10803fcc 	andi	r2,r2,255
 80165c0:	10c0200c 	andi	r3,r2,128
 80165c4:	e0bfff03 	ldbu	r2,-4(fp)
 80165c8:	1080200c 	andi	r2,r2,128
 80165cc:	18801426 	beq	r3,r2,8016620 <alt_wait_for_command_to_complete_amd+0xb8>
 80165d0:	e0bffc03 	ldbu	r2,-16(fp)
 80165d4:	10803fcc 	andi	r2,r2,255
 80165d8:	1080080c 	andi	r2,r2,32
 80165dc:	1004c03a 	cmpne	r2,r2,zero
 80165e0:	10000f1e 	bne	r2,zero,8016620 <alt_wait_for_command_to_complete_amd+0xb8>
 80165e4:	01000044 	movi	r4,1
 80165e8:	80162980 	call	8016298 <usleep>
 80165ec:	e0bffb17 	ldw	r2,-20(fp)
 80165f0:	10bfffc4 	addi	r2,r2,-1
 80165f4:	e0bffb15 	stw	r2,-20(fp)
 80165f8:	e0bffd17 	ldw	r2,-12(fp)
 80165fc:	10800a17 	ldw	r2,40(r2)
 8016600:	1007883a 	mov	r3,r2
 8016604:	e0bffe17 	ldw	r2,-8(fp)
 8016608:	1885883a 	add	r2,r3,r2
 801660c:	10800023 	ldbuio	r2,0(r2)
 8016610:	e0bffc05 	stb	r2,-16(fp)
 8016614:	e0bffb17 	ldw	r2,-20(fp)
 8016618:	10800048 	cmpgei	r2,r2,1
 801661c:	103fe61e 	bne	r2,zero,80165b8 <alt_wait_for_command_to_complete_amd+0x50>
 8016620:	e0bffb17 	ldw	r2,-20(fp)
 8016624:	1004c03a 	cmpne	r2,r2,zero
 8016628:	1000031e 	bne	r2,zero,8016638 <alt_wait_for_command_to_complete_amd+0xd0>
 801662c:	00bfe304 	movi	r2,-116
 8016630:	e0bffa15 	stw	r2,-24(fp)
 8016634:	00000f06 	br	8016674 <alt_wait_for_command_to_complete_amd+0x10c>
 8016638:	e0bffd17 	ldw	r2,-12(fp)
 801663c:	10800a17 	ldw	r2,40(r2)
 8016640:	1007883a 	mov	r3,r2
 8016644:	e0bffe17 	ldw	r2,-8(fp)
 8016648:	1885883a 	add	r2,r3,r2
 801664c:	10800023 	ldbuio	r2,0(r2)
 8016650:	e0bffc05 	stb	r2,-16(fp)
 8016654:	e0bffc03 	ldbu	r2,-16(fp)
 8016658:	10803fcc 	andi	r2,r2,255
 801665c:	10c0200c 	andi	r3,r2,128
 8016660:	e0bfff03 	ldbu	r2,-4(fp)
 8016664:	1080200c 	andi	r2,r2,128
 8016668:	18800226 	beq	r3,r2,8016674 <alt_wait_for_command_to_complete_amd+0x10c>
 801666c:	00bffec4 	movi	r2,-5
 8016670:	e0bffa15 	stw	r2,-24(fp)
 8016674:	e0bffa17 	ldw	r2,-24(fp)
 8016678:	e037883a 	mov	sp,fp
 801667c:	dfc00117 	ldw	ra,4(sp)
 8016680:	df000017 	ldw	fp,0(sp)
 8016684:	dec00204 	addi	sp,sp,8
 8016688:	f800283a 	ret

0801668c <alt_write_word_amd>:
 801668c:	defff904 	addi	sp,sp,-28
 8016690:	dfc00615 	stw	ra,24(sp)
 8016694:	df000515 	stw	fp,20(sp)
 8016698:	df000504 	addi	fp,sp,20
 801669c:	e13ffd15 	stw	r4,-12(fp)
 80166a0:	e17ffe15 	stw	r5,-8(fp)
 80166a4:	e1bfff15 	stw	r6,-4(fp)
 80166a8:	e03ffc15 	stw	zero,-16(fp)
 80166ac:	e0bffd17 	ldw	r2,-12(fp)
 80166b0:	10c03317 	ldw	r3,204(r2)
 80166b4:	e0bffd17 	ldw	r2,-12(fp)
 80166b8:	11000a17 	ldw	r4,40(r2)
 80166bc:	01415544 	movi	r5,1365
 80166c0:	01802a84 	movi	r6,170
 80166c4:	183ee83a 	callr	r3
 80166c8:	e0bffd17 	ldw	r2,-12(fp)
 80166cc:	10c03317 	ldw	r3,204(r2)
 80166d0:	e0bffd17 	ldw	r2,-12(fp)
 80166d4:	11000a17 	ldw	r4,40(r2)
 80166d8:	0140aa84 	movi	r5,682
 80166dc:	01801544 	movi	r6,85
 80166e0:	183ee83a 	callr	r3
 80166e4:	e0bffd17 	ldw	r2,-12(fp)
 80166e8:	10c03317 	ldw	r3,204(r2)
 80166ec:	e0bffd17 	ldw	r2,-12(fp)
 80166f0:	11000a17 	ldw	r4,40(r2)
 80166f4:	01415544 	movi	r5,1365
 80166f8:	01802804 	movi	r6,160
 80166fc:	183ee83a 	callr	r3
 8016700:	e0bfff17 	ldw	r2,-4(fp)
 8016704:	10800003 	ldbu	r2,0(r2)
 8016708:	e0bffb05 	stb	r2,-20(fp)
 801670c:	e13ffd17 	ldw	r4,-12(fp)
 8016710:	e17ffe17 	ldw	r5,-8(fp)
 8016714:	e1bfff17 	ldw	r6,-4(fp)
 8016718:	800f5000 	call	800f500 <alt_write_value_to_flash>
 801671c:	e1bffb03 	ldbu	r6,-20(fp)
 8016720:	e13ffd17 	ldw	r4,-12(fp)
 8016724:	e17ffe17 	ldw	r5,-8(fp)
 8016728:	80165680 	call	8016568 <alt_wait_for_command_to_complete_amd>
 801672c:	e0bffc15 	stw	r2,-16(fp)
 8016730:	e0bffc17 	ldw	r2,-16(fp)
 8016734:	e037883a 	mov	sp,fp
 8016738:	dfc00117 	ldw	ra,4(sp)
 801673c:	df000017 	ldw	fp,0(sp)
 8016740:	dec00204 	addi	sp,sp,8
 8016744:	f800283a 	ret

08016748 <alt_program_intel>:
 8016748:	defff704 	addi	sp,sp,-36
 801674c:	dfc00815 	stw	ra,32(sp)
 8016750:	df000715 	stw	fp,28(sp)
 8016754:	df000704 	addi	fp,sp,28
 8016758:	e13ffc15 	stw	r4,-16(fp)
 801675c:	e17ffd15 	stw	r5,-12(fp)
 8016760:	e1bffe15 	stw	r6,-8(fp)
 8016764:	e1ffff15 	stw	r7,-4(fp)
 8016768:	e03ffb15 	stw	zero,-20(fp)
 801676c:	e0bffc17 	ldw	r2,-16(fp)
 8016770:	e0bffa15 	stw	r2,-24(fp)
 8016774:	e13ffa17 	ldw	r4,-24(fp)
 8016778:	e17ffd17 	ldw	r5,-12(fp)
 801677c:	80169400 	call	8016940 <alt_unlock_block_intel>
 8016780:	e0bffb15 	stw	r2,-20(fp)
 8016784:	e0bffb17 	ldw	r2,-20(fp)
 8016788:	1004c03a 	cmpne	r2,r2,zero
 801678c:	1000091e 	bne	r2,zero,80167b4 <alt_program_intel+0x6c>
 8016790:	e1bfff17 	ldw	r6,-4(fp)
 8016794:	00820074 	movhi	r2,2049
 8016798:	109ab304 	addi	r2,r2,27340
 801679c:	d8800015 	stw	r2,0(sp)
 80167a0:	e13ffa17 	ldw	r4,-24(fp)
 80167a4:	e17ffe17 	ldw	r5,-8(fp)
 80167a8:	e1c00217 	ldw	r7,8(fp)
 80167ac:	800f6640 	call	800f664 <alt_flash_program_block>
 80167b0:	e0bffb15 	stw	r2,-20(fp)
 80167b4:	e0bffb17 	ldw	r2,-20(fp)
 80167b8:	e037883a 	mov	sp,fp
 80167bc:	dfc00117 	ldw	ra,4(sp)
 80167c0:	df000017 	ldw	fp,0(sp)
 80167c4:	dec00204 	addi	sp,sp,8
 80167c8:	f800283a 	ret

080167cc <alt_erase_block_intel>:
 80167cc:	defff804 	addi	sp,sp,-32
 80167d0:	dfc00715 	stw	ra,28(sp)
 80167d4:	df000615 	stw	fp,24(sp)
 80167d8:	df000604 	addi	fp,sp,24
 80167dc:	e13ffe15 	stw	r4,-8(fp)
 80167e0:	e17fff15 	stw	r5,-4(fp)
 80167e4:	e03ffc15 	stw	zero,-16(fp)
 80167e8:	e0bffe17 	ldw	r2,-8(fp)
 80167ec:	e0bffb15 	stw	r2,-20(fp)
 80167f0:	e0bffb17 	ldw	r2,-20(fp)
 80167f4:	10803117 	ldw	r2,196(r2)
 80167f8:	e0bffa15 	stw	r2,-24(fp)
 80167fc:	e13ffb17 	ldw	r4,-20(fp)
 8016800:	e17fff17 	ldw	r5,-4(fp)
 8016804:	80169400 	call	8016940 <alt_unlock_block_intel>
 8016808:	e0bffc15 	stw	r2,-16(fp)
 801680c:	e0bffc17 	ldw	r2,-16(fp)
 8016810:	1004c03a 	cmpne	r2,r2,zero
 8016814:	1000441e 	bne	r2,zero,8016928 <alt_erase_block_intel+0x15c>
 8016818:	e0bffb17 	ldw	r2,-20(fp)
 801681c:	11803517 	ldw	r6,212(r2)
 8016820:	e0bffb17 	ldw	r2,-20(fp)
 8016824:	10800a17 	ldw	r2,40(r2)
 8016828:	1007883a 	mov	r3,r2
 801682c:	e0bfff17 	ldw	r2,-4(fp)
 8016830:	1889883a 	add	r4,r3,r2
 8016834:	01400804 	movi	r5,32
 8016838:	303ee83a 	callr	r6
 801683c:	e0bffb17 	ldw	r2,-20(fp)
 8016840:	11803517 	ldw	r6,212(r2)
 8016844:	e0bffb17 	ldw	r2,-20(fp)
 8016848:	10800a17 	ldw	r2,40(r2)
 801684c:	1007883a 	mov	r3,r2
 8016850:	e0bfff17 	ldw	r2,-4(fp)
 8016854:	1889883a 	add	r4,r3,r2
 8016858:	01403404 	movi	r5,208
 801685c:	303ee83a 	callr	r6
 8016860:	e0bffb17 	ldw	r2,-20(fp)
 8016864:	10800a17 	ldw	r2,40(r2)
 8016868:	1007883a 	mov	r3,r2
 801686c:	e0bfff17 	ldw	r2,-4(fp)
 8016870:	1885883a 	add	r2,r3,r2
 8016874:	10800023 	ldbuio	r2,0(r2)
 8016878:	e0bffd05 	stb	r2,-12(fp)
 801687c:	e0bffd03 	ldbu	r2,-12(fp)
 8016880:	10803fcc 	andi	r2,r2,255
 8016884:	1080201c 	xori	r2,r2,128
 8016888:	10bfe004 	addi	r2,r2,-128
 801688c:	1004803a 	cmplt	r2,r2,zero
 8016890:	1000081e 	bne	r2,zero,80168b4 <alt_erase_block_intel+0xe8>
 8016894:	0100fa04 	movi	r4,1000
 8016898:	80162980 	call	8016298 <usleep>
 801689c:	e0bffa17 	ldw	r2,-24(fp)
 80168a0:	10bf0604 	addi	r2,r2,-1000
 80168a4:	e0bffa15 	stw	r2,-24(fp)
 80168a8:	e0bffa17 	ldw	r2,-24(fp)
 80168ac:	10800048 	cmpgei	r2,r2,1
 80168b0:	103feb1e 	bne	r2,zero,8016860 <alt_erase_block_intel+0x94>
 80168b4:	e0bffa17 	ldw	r2,-24(fp)
 80168b8:	10800048 	cmpgei	r2,r2,1
 80168bc:	1000031e 	bne	r2,zero,80168cc <alt_erase_block_intel+0x100>
 80168c0:	00bfe304 	movi	r2,-116
 80168c4:	e0bffc15 	stw	r2,-16(fp)
 80168c8:	00000e06 	br	8016904 <alt_erase_block_intel+0x138>
 80168cc:	e0bffd03 	ldbu	r2,-12(fp)
 80168d0:	10803fcc 	andi	r2,r2,255
 80168d4:	10801fcc 	andi	r2,r2,127
 80168d8:	1005003a 	cmpeq	r2,r2,zero
 80168dc:	1000091e 	bne	r2,zero,8016904 <alt_erase_block_intel+0x138>
 80168e0:	00bffec4 	movi	r2,-5
 80168e4:	e0bffc15 	stw	r2,-16(fp)
 80168e8:	e0bffb17 	ldw	r2,-20(fp)
 80168ec:	10800a17 	ldw	r2,40(r2)
 80168f0:	1007883a 	mov	r3,r2
 80168f4:	e0bfff17 	ldw	r2,-4(fp)
 80168f8:	1885883a 	add	r2,r3,r2
 80168fc:	10800023 	ldbuio	r2,0(r2)
 8016900:	e0bffd05 	stb	r2,-12(fp)
 8016904:	e0bffb17 	ldw	r2,-20(fp)
 8016908:	11803517 	ldw	r6,212(r2)
 801690c:	e0bffb17 	ldw	r2,-20(fp)
 8016910:	10800a17 	ldw	r2,40(r2)
 8016914:	1007883a 	mov	r3,r2
 8016918:	e0bfff17 	ldw	r2,-4(fp)
 801691c:	1889883a 	add	r4,r3,r2
 8016920:	01403fc4 	movi	r5,255
 8016924:	303ee83a 	callr	r6
 8016928:	e0bffc17 	ldw	r2,-16(fp)
 801692c:	e037883a 	mov	sp,fp
 8016930:	dfc00117 	ldw	ra,4(sp)
 8016934:	df000017 	ldw	fp,0(sp)
 8016938:	dec00204 	addi	sp,sp,8
 801693c:	f800283a 	ret

08016940 <alt_unlock_block_intel>:
 8016940:	defff904 	addi	sp,sp,-28
 8016944:	dfc00615 	stw	ra,24(sp)
 8016948:	df000515 	stw	fp,20(sp)
 801694c:	df000504 	addi	fp,sp,20
 8016950:	e13ffe15 	stw	r4,-8(fp)
 8016954:	e17fff15 	stw	r5,-4(fp)
 8016958:	e03ffc15 	stw	zero,-16(fp)
 801695c:	e0bffe17 	ldw	r2,-8(fp)
 8016960:	10803017 	ldw	r2,192(r2)
 8016964:	10801924 	muli	r2,r2,100
 8016968:	e0bffb15 	stw	r2,-20(fp)
 801696c:	e0bffe17 	ldw	r2,-8(fp)
 8016970:	11803517 	ldw	r6,212(r2)
 8016974:	e0bffe17 	ldw	r2,-8(fp)
 8016978:	10800a17 	ldw	r2,40(r2)
 801697c:	1007883a 	mov	r3,r2
 8016980:	e0bfff17 	ldw	r2,-4(fp)
 8016984:	1889883a 	add	r4,r3,r2
 8016988:	01402404 	movi	r5,144
 801698c:	303ee83a 	callr	r6
 8016990:	e0bffe17 	ldw	r2,-8(fp)
 8016994:	10800a17 	ldw	r2,40(r2)
 8016998:	1007883a 	mov	r3,r2
 801699c:	e0bfff17 	ldw	r2,-4(fp)
 80169a0:	1885883a 	add	r2,r3,r2
 80169a4:	10800104 	addi	r2,r2,4
 80169a8:	10800023 	ldbuio	r2,0(r2)
 80169ac:	e0bffd45 	stb	r2,-11(fp)
 80169b0:	e0bffd43 	ldbu	r2,-11(fp)
 80169b4:	1080004c 	andi	r2,r2,1
 80169b8:	10803fcc 	andi	r2,r2,255
 80169bc:	1005003a 	cmpeq	r2,r2,zero
 80169c0:	1000331e 	bne	r2,zero,8016a90 <alt_unlock_block_intel+0x150>
 80169c4:	e0bffe17 	ldw	r2,-8(fp)
 80169c8:	11803517 	ldw	r6,212(r2)
 80169cc:	e0bffe17 	ldw	r2,-8(fp)
 80169d0:	10800a17 	ldw	r2,40(r2)
 80169d4:	1007883a 	mov	r3,r2
 80169d8:	e0bfff17 	ldw	r2,-4(fp)
 80169dc:	1889883a 	add	r4,r3,r2
 80169e0:	01401804 	movi	r5,96
 80169e4:	303ee83a 	callr	r6
 80169e8:	e0bffe17 	ldw	r2,-8(fp)
 80169ec:	11803517 	ldw	r6,212(r2)
 80169f0:	e0bffe17 	ldw	r2,-8(fp)
 80169f4:	10800a17 	ldw	r2,40(r2)
 80169f8:	1007883a 	mov	r3,r2
 80169fc:	e0bfff17 	ldw	r2,-4(fp)
 8016a00:	1889883a 	add	r4,r3,r2
 8016a04:	01403404 	movi	r5,208
 8016a08:	303ee83a 	callr	r6
 8016a0c:	e0bffe17 	ldw	r2,-8(fp)
 8016a10:	10800a17 	ldw	r2,40(r2)
 8016a14:	1007883a 	mov	r3,r2
 8016a18:	e0bfff17 	ldw	r2,-4(fp)
 8016a1c:	1885883a 	add	r2,r3,r2
 8016a20:	10800023 	ldbuio	r2,0(r2)
 8016a24:	e0bffd05 	stb	r2,-12(fp)
 8016a28:	e0bffd03 	ldbu	r2,-12(fp)
 8016a2c:	10803fcc 	andi	r2,r2,255
 8016a30:	1080201c 	xori	r2,r2,128
 8016a34:	10bfe004 	addi	r2,r2,-128
 8016a38:	1004803a 	cmplt	r2,r2,zero
 8016a3c:	1000081e 	bne	r2,zero,8016a60 <alt_unlock_block_intel+0x120>
 8016a40:	e0bffb17 	ldw	r2,-20(fp)
 8016a44:	10bfffc4 	addi	r2,r2,-1
 8016a48:	e0bffb15 	stw	r2,-20(fp)
 8016a4c:	01000044 	movi	r4,1
 8016a50:	80162980 	call	8016298 <usleep>
 8016a54:	e0bffb17 	ldw	r2,-20(fp)
 8016a58:	10800048 	cmpgei	r2,r2,1
 8016a5c:	103feb1e 	bne	r2,zero,8016a0c <alt_unlock_block_intel+0xcc>
 8016a60:	e0bffb17 	ldw	r2,-20(fp)
 8016a64:	1004c03a 	cmpne	r2,r2,zero
 8016a68:	1000031e 	bne	r2,zero,8016a78 <alt_unlock_block_intel+0x138>
 8016a6c:	00bfe304 	movi	r2,-116
 8016a70:	e0bffc15 	stw	r2,-16(fp)
 8016a74:	00000606 	br	8016a90 <alt_unlock_block_intel+0x150>
 8016a78:	e0bffd03 	ldbu	r2,-12(fp)
 8016a7c:	10801fcc 	andi	r2,r2,127
 8016a80:	1005003a 	cmpeq	r2,r2,zero
 8016a84:	1000021e 	bne	r2,zero,8016a90 <alt_unlock_block_intel+0x150>
 8016a88:	00bffec4 	movi	r2,-5
 8016a8c:	e0bffc15 	stw	r2,-16(fp)
 8016a90:	e0bffe17 	ldw	r2,-8(fp)
 8016a94:	11803517 	ldw	r6,212(r2)
 8016a98:	e0bffe17 	ldw	r2,-8(fp)
 8016a9c:	10800a17 	ldw	r2,40(r2)
 8016aa0:	1007883a 	mov	r3,r2
 8016aa4:	e0bfff17 	ldw	r2,-4(fp)
 8016aa8:	1889883a 	add	r4,r3,r2
 8016aac:	01403fc4 	movi	r5,255
 8016ab0:	303ee83a 	callr	r6
 8016ab4:	e0bffc17 	ldw	r2,-16(fp)
 8016ab8:	e037883a 	mov	sp,fp
 8016abc:	dfc00117 	ldw	ra,4(sp)
 8016ac0:	df000017 	ldw	fp,0(sp)
 8016ac4:	dec00204 	addi	sp,sp,8
 8016ac8:	f800283a 	ret

08016acc <alt_write_word_intel>:
 8016acc:	defff904 	addi	sp,sp,-28
 8016ad0:	dfc00615 	stw	ra,24(sp)
 8016ad4:	df000515 	stw	fp,20(sp)
 8016ad8:	df000504 	addi	fp,sp,20
 8016adc:	e13ffd15 	stw	r4,-12(fp)
 8016ae0:	e17ffe15 	stw	r5,-8(fp)
 8016ae4:	e1bfff15 	stw	r6,-4(fp)
 8016ae8:	e03ffc15 	stw	zero,-16(fp)
 8016aec:	e0bffd17 	ldw	r2,-12(fp)
 8016af0:	11803517 	ldw	r6,212(r2)
 8016af4:	e0bffd17 	ldw	r2,-12(fp)
 8016af8:	10800a17 	ldw	r2,40(r2)
 8016afc:	1007883a 	mov	r3,r2
 8016b00:	e0bffe17 	ldw	r2,-8(fp)
 8016b04:	1889883a 	add	r4,r3,r2
 8016b08:	01401004 	movi	r5,64
 8016b0c:	303ee83a 	callr	r6
 8016b10:	e13ffd17 	ldw	r4,-12(fp)
 8016b14:	e17ffe17 	ldw	r5,-8(fp)
 8016b18:	e1bfff17 	ldw	r6,-4(fp)
 8016b1c:	800f5000 	call	800f500 <alt_write_value_to_flash>
 8016b20:	e0bffd17 	ldw	r2,-12(fp)
 8016b24:	10800a17 	ldw	r2,40(r2)
 8016b28:	1007883a 	mov	r3,r2
 8016b2c:	e0bffe17 	ldw	r2,-8(fp)
 8016b30:	1885883a 	add	r2,r3,r2
 8016b34:	10800023 	ldbuio	r2,0(r2)
 8016b38:	e0bffb05 	stb	r2,-20(fp)
 8016b3c:	e0bffb03 	ldbu	r2,-20(fp)
 8016b40:	10803fcc 	andi	r2,r2,255
 8016b44:	1080201c 	xori	r2,r2,128
 8016b48:	10bfe004 	addi	r2,r2,-128
 8016b4c:	1004403a 	cmpge	r2,r2,zero
 8016b50:	103ff31e 	bne	r2,zero,8016b20 <alt_write_word_intel+0x54>
 8016b54:	e0bffb03 	ldbu	r2,-20(fp)
 8016b58:	10801fcc 	andi	r2,r2,127
 8016b5c:	1005003a 	cmpeq	r2,r2,zero
 8016b60:	1000021e 	bne	r2,zero,8016b6c <alt_write_word_intel+0xa0>
 8016b64:	00bffec4 	movi	r2,-5
 8016b68:	e0bffc15 	stw	r2,-16(fp)
 8016b6c:	e0bffd17 	ldw	r2,-12(fp)
 8016b70:	11803517 	ldw	r6,212(r2)
 8016b74:	e0bffd17 	ldw	r2,-12(fp)
 8016b78:	10800a17 	ldw	r2,40(r2)
 8016b7c:	1007883a 	mov	r3,r2
 8016b80:	e0bffe17 	ldw	r2,-8(fp)
 8016b84:	1889883a 	add	r4,r3,r2
 8016b88:	01403fc4 	movi	r5,255
 8016b8c:	303ee83a 	callr	r6
 8016b90:	e0bffc17 	ldw	r2,-16(fp)
 8016b94:	e037883a 	mov	sp,fp
 8016b98:	dfc00117 	ldw	ra,4(sp)
 8016b9c:	df000017 	ldw	fp,0(sp)
 8016ba0:	dec00204 	addi	sp,sp,8
 8016ba4:	f800283a 	ret

08016ba8 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
 8016ba8:	defffa04 	addi	sp,sp,-24
 8016bac:	dfc00515 	stw	ra,20(sp)
 8016bb0:	df000415 	stw	fp,16(sp)
 8016bb4:	df000404 	addi	fp,sp,16
 8016bb8:	e13fff15 	stw	r4,-4(fp)
  {
    cycles_per_loop = 9;
  }
  else  
  {
    cycles_per_loop = 3;
 8016bbc:	008000c4 	movi	r2,3
 8016bc0:	e0bffc15 	stw	r2,-16(fp)
  }
  

  big_loops = us / (INT_MAX/
 8016bc4:	e0fffc17 	ldw	r3,-16(fp)
 8016bc8:	008003f4 	movhi	r2,15
 8016bcc:	10909004 	addi	r2,r2,16960
 8016bd0:	188b383a 	mul	r5,r3,r2
 8016bd4:	0100bef4 	movhi	r4,763
 8016bd8:	213c2004 	addi	r4,r4,-3968
 8016bdc:	8002fe00 	call	8002fe0 <__udivsi3>
 8016be0:	100b883a 	mov	r5,r2
 8016be4:	01200034 	movhi	r4,32768
 8016be8:	213fffc4 	addi	r4,r4,-1
 8016bec:	8002fe00 	call	8002fe0 <__udivsi3>
 8016bf0:	100b883a 	mov	r5,r2
 8016bf4:	e13fff17 	ldw	r4,-4(fp)
 8016bf8:	8002fe00 	call	8002fe0 <__udivsi3>
 8016bfc:	e0bffd15 	stw	r2,-12(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
 8016c00:	e0bffd17 	ldw	r2,-12(fp)
 8016c04:	1005003a 	cmpeq	r2,r2,zero
 8016c08:	1000281e 	bne	r2,zero,8016cac <alt_busy_sleep+0x104>
  {
    for(i=0;i<big_loops;i++)
 8016c0c:	e03ffe15 	stw	zero,-8(fp)
 8016c10:	00001606 	br	8016c6c <alt_busy_sleep+0xc4>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
 8016c14:	00a00034 	movhi	r2,32768
 8016c18:	10bfffc4 	addi	r2,r2,-1
 8016c1c:	10bfffc4 	addi	r2,r2,-1
 8016c20:	103ffe1e 	bne	r2,zero,8016c1c <alt_busy_sleep+0x74>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
 8016c24:	e0fffc17 	ldw	r3,-16(fp)
 8016c28:	008003f4 	movhi	r2,15
 8016c2c:	10909004 	addi	r2,r2,16960
 8016c30:	188b383a 	mul	r5,r3,r2
 8016c34:	0100bef4 	movhi	r4,763
 8016c38:	213c2004 	addi	r4,r4,-3968
 8016c3c:	8002fe00 	call	8002fe0 <__udivsi3>
 8016c40:	100b883a 	mov	r5,r2
 8016c44:	01200034 	movhi	r4,32768
 8016c48:	213fffc4 	addi	r4,r4,-1
 8016c4c:	8002fe00 	call	8002fe0 <__udivsi3>
 8016c50:	1007883a 	mov	r3,r2
 8016c54:	e0bfff17 	ldw	r2,-4(fp)
 8016c58:	10c5c83a 	sub	r2,r2,r3
 8016c5c:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
 8016c60:	e0bffe17 	ldw	r2,-8(fp)
 8016c64:	10800044 	addi	r2,r2,1
 8016c68:	e0bffe15 	stw	r2,-8(fp)
 8016c6c:	e0fffe17 	ldw	r3,-8(fp)
 8016c70:	e0bffd17 	ldw	r2,-12(fp)
 8016c74:	18bfe716 	blt	r3,r2,8016c14 <alt_busy_sleep+0x6c>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 8016c78:	e0fffc17 	ldw	r3,-16(fp)
 8016c7c:	008003f4 	movhi	r2,15
 8016c80:	10909004 	addi	r2,r2,16960
 8016c84:	188b383a 	mul	r5,r3,r2
 8016c88:	0100bef4 	movhi	r4,763
 8016c8c:	213c2004 	addi	r4,r4,-3968
 8016c90:	8002fe00 	call	8002fe0 <__udivsi3>
 8016c94:	1007883a 	mov	r3,r2
 8016c98:	e0bfff17 	ldw	r2,-4(fp)
 8016c9c:	1885383a 	mul	r2,r3,r2
 8016ca0:	10bfffc4 	addi	r2,r2,-1
 8016ca4:	103ffe1e 	bne	r2,zero,8016ca0 <alt_busy_sleep+0xf8>
 8016ca8:	00000c06 	br	8016cdc <alt_busy_sleep+0x134>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 8016cac:	e0fffc17 	ldw	r3,-16(fp)
 8016cb0:	008003f4 	movhi	r2,15
 8016cb4:	10909004 	addi	r2,r2,16960
 8016cb8:	188b383a 	mul	r5,r3,r2
 8016cbc:	0100bef4 	movhi	r4,763
 8016cc0:	213c2004 	addi	r4,r4,-3968
 8016cc4:	8002fe00 	call	8002fe0 <__udivsi3>
 8016cc8:	1007883a 	mov	r3,r2
 8016ccc:	e0bfff17 	ldw	r2,-4(fp)
 8016cd0:	1885383a 	mul	r2,r3,r2
 8016cd4:	10bfffc4 	addi	r2,r2,-1
 8016cd8:	00bffe16 	blt	zero,r2,8016cd4 <alt_busy_sleep+0x12c>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
 8016cdc:	0005883a 	mov	r2,zero
}
 8016ce0:	e037883a 	mov	sp,fp
 8016ce4:	dfc00117 	ldw	ra,4(sp)
 8016ce8:	df000017 	ldw	fp,0(sp)
 8016cec:	dec00204 	addi	sp,sp,8
 8016cf0:	f800283a 	ret

08016cf4 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
 8016cf4:	defffb04 	addi	sp,sp,-20
 8016cf8:	df000415 	stw	fp,16(sp)
 8016cfc:	df000404 	addi	fp,sp,16
 8016d00:	e13ffe15 	stw	r4,-8(fp)
 8016d04:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
 8016d08:	e0bfff17 	ldw	r2,-4(fp)
 8016d0c:	10840070 	cmpltui	r2,r2,4097
 8016d10:	1000021e 	bne	r2,zero,8016d1c <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
 8016d14:	00840004 	movi	r2,4096
 8016d18:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
 8016d1c:	e0fffe17 	ldw	r3,-8(fp)
 8016d20:	e0bfff17 	ldw	r2,-4(fp)
 8016d24:	1885883a 	add	r2,r3,r2
 8016d28:	e0bffc15 	stw	r2,-16(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 8016d2c:	e0bffe17 	ldw	r2,-8(fp)
 8016d30:	e0bffd15 	stw	r2,-12(fp)
 8016d34:	00000506 	br	8016d4c <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
 8016d38:	e0bffd17 	ldw	r2,-12(fp)
 8016d3c:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 8016d40:	e0bffd17 	ldw	r2,-12(fp)
 8016d44:	10800804 	addi	r2,r2,32
 8016d48:	e0bffd15 	stw	r2,-12(fp)
 8016d4c:	e0fffd17 	ldw	r3,-12(fp)
 8016d50:	e0bffc17 	ldw	r2,-16(fp)
 8016d54:	18bff836 	bltu	r3,r2,8016d38 <alt_icache_flush+0x44>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
 8016d58:	e0bffe17 	ldw	r2,-8(fp)
 8016d5c:	108007cc 	andi	r2,r2,31
 8016d60:	1005003a 	cmpeq	r2,r2,zero
 8016d64:	1000021e 	bne	r2,zero,8016d70 <alt_icache_flush+0x7c>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
 8016d68:	e0bffd17 	ldw	r2,-12(fp)
 8016d6c:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
 8016d70:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
 8016d74:	e037883a 	mov	sp,fp
 8016d78:	df000017 	ldw	fp,0(sp)
 8016d7c:	dec00104 	addi	sp,sp,4
 8016d80:	f800283a 	ret

08016d84 <atexit>:
 8016d84:	200b883a 	mov	r5,r4
 8016d88:	000d883a 	mov	r6,zero
 8016d8c:	0009883a 	mov	r4,zero
 8016d90:	000f883a 	mov	r7,zero
 8016d94:	8016f341 	jmpi	8016f34 <__register_exitproc>

08016d98 <exit>:
 8016d98:	defffe04 	addi	sp,sp,-8
 8016d9c:	000b883a 	mov	r5,zero
 8016da0:	dc000015 	stw	r16,0(sp)
 8016da4:	dfc00115 	stw	ra,4(sp)
 8016da8:	2021883a 	mov	r16,r4
 8016dac:	801706c0 	call	801706c <__call_exitprocs>
 8016db0:	008200b4 	movhi	r2,2050
 8016db4:	10a95a04 	addi	r2,r2,-23192
 8016db8:	11000017 	ldw	r4,0(r2)
 8016dbc:	20800f17 	ldw	r2,60(r4)
 8016dc0:	10000126 	beq	r2,zero,8016dc8 <exit+0x30>
 8016dc4:	103ee83a 	callr	r2
 8016dc8:	8009883a 	mov	r4,r16
 8016dcc:	801725c0 	call	801725c <_exit>

08016dd0 <memcmp>:
 8016dd0:	00c000c4 	movi	r3,3
 8016dd4:	1980032e 	bgeu	r3,r6,8016de4 <memcmp+0x14>
 8016dd8:	2144b03a 	or	r2,r4,r5
 8016ddc:	10c4703a 	and	r2,r2,r3
 8016de0:	10000f26 	beq	r2,zero,8016e20 <memcmp+0x50>
 8016de4:	31ffffc4 	addi	r7,r6,-1
 8016de8:	3000061e 	bne	r6,zero,8016e04 <memcmp+0x34>
 8016dec:	00000a06 	br	8016e18 <memcmp+0x48>
 8016df0:	39ffffc4 	addi	r7,r7,-1
 8016df4:	00bfffc4 	movi	r2,-1
 8016df8:	21000044 	addi	r4,r4,1
 8016dfc:	29400044 	addi	r5,r5,1
 8016e00:	38800526 	beq	r7,r2,8016e18 <memcmp+0x48>
 8016e04:	20c00003 	ldbu	r3,0(r4)
 8016e08:	28800003 	ldbu	r2,0(r5)
 8016e0c:	18bff826 	beq	r3,r2,8016df0 <memcmp+0x20>
 8016e10:	1885c83a 	sub	r2,r3,r2
 8016e14:	f800283a 	ret
 8016e18:	0005883a 	mov	r2,zero
 8016e1c:	f800283a 	ret
 8016e20:	180f883a 	mov	r7,r3
 8016e24:	20c00017 	ldw	r3,0(r4)
 8016e28:	28800017 	ldw	r2,0(r5)
 8016e2c:	18bfed1e 	bne	r3,r2,8016de4 <memcmp+0x14>
 8016e30:	31bfff04 	addi	r6,r6,-4
 8016e34:	21000104 	addi	r4,r4,4
 8016e38:	29400104 	addi	r5,r5,4
 8016e3c:	39bff936 	bltu	r7,r6,8016e24 <memcmp+0x54>
 8016e40:	003fe806 	br	8016de4 <memcmp+0x14>

08016e44 <strncmp>:
 8016e44:	30003926 	beq	r6,zero,8016f2c <strncmp+0xe8>
 8016e48:	2144b03a 	or	r2,r4,r5
 8016e4c:	108000cc 	andi	r2,r2,3
 8016e50:	028000c4 	movi	r10,3
 8016e54:	1000241e 	bne	r2,zero,8016ee8 <strncmp+0xa4>
 8016e58:	2011883a 	mov	r8,r4
 8016e5c:	280f883a 	mov	r7,r5
 8016e60:	51801f2e 	bgeu	r10,r6,8016ee0 <strncmp+0x9c>
 8016e64:	21000017 	ldw	r4,0(r4)
 8016e68:	28800017 	ldw	r2,0(r5)
 8016e6c:	20801c1e 	bne	r4,r2,8016ee0 <strncmp+0x9c>
 8016e70:	31bfff04 	addi	r6,r6,-4
 8016e74:	30002d26 	beq	r6,zero,8016f2c <strncmp+0xe8>
 8016e78:	027fbff4 	movhi	r9,65279
 8016e7c:	4a7fbfc4 	addi	r9,r9,-257
 8016e80:	2247883a 	add	r3,r4,r9
 8016e84:	01602074 	movhi	r5,32897
 8016e88:	29602004 	addi	r5,r5,-32640
 8016e8c:	1946703a 	and	r3,r3,r5
 8016e90:	0104303a 	nor	r2,zero,r4
 8016e94:	10c4703a 	and	r2,r2,r3
 8016e98:	1000241e 	bne	r2,zero,8016f2c <strncmp+0xe8>
 8016e9c:	5017883a 	mov	r11,r10
 8016ea0:	4815883a 	mov	r10,r9
 8016ea4:	2813883a 	mov	r9,r5
 8016ea8:	00000a06 	br	8016ed4 <strncmp+0x90>
 8016eac:	41000017 	ldw	r4,0(r8)
 8016eb0:	39400017 	ldw	r5,0(r7)
 8016eb4:	2285883a 	add	r2,r4,r10
 8016eb8:	1244703a 	and	r2,r2,r9
 8016ebc:	0106303a 	nor	r3,zero,r4
 8016ec0:	1886703a 	and	r3,r3,r2
 8016ec4:	2140061e 	bne	r4,r5,8016ee0 <strncmp+0x9c>
 8016ec8:	31bfff04 	addi	r6,r6,-4
 8016ecc:	30001726 	beq	r6,zero,8016f2c <strncmp+0xe8>
 8016ed0:	1800161e 	bne	r3,zero,8016f2c <strncmp+0xe8>
 8016ed4:	42000104 	addi	r8,r8,4
 8016ed8:	39c00104 	addi	r7,r7,4
 8016edc:	59bff336 	bltu	r11,r6,8016eac <strncmp+0x68>
 8016ee0:	4009883a 	mov	r4,r8
 8016ee4:	380b883a 	mov	r5,r7
 8016ee8:	31bfffc4 	addi	r6,r6,-1
 8016eec:	01ffffc4 	movi	r7,-1
 8016ef0:	31c00a1e 	bne	r6,r7,8016f1c <strncmp+0xd8>
 8016ef4:	20c00003 	ldbu	r3,0(r4)
 8016ef8:	28800003 	ldbu	r2,0(r5)
 8016efc:	1885c83a 	sub	r2,r3,r2
 8016f00:	f800283a 	ret
 8016f04:	30000926 	beq	r6,zero,8016f2c <strncmp+0xe8>
 8016f08:	18000826 	beq	r3,zero,8016f2c <strncmp+0xe8>
 8016f0c:	31bfffc4 	addi	r6,r6,-1
 8016f10:	21000044 	addi	r4,r4,1
 8016f14:	29400044 	addi	r5,r5,1
 8016f18:	31fff626 	beq	r6,r7,8016ef4 <strncmp+0xb0>
 8016f1c:	20c00007 	ldb	r3,0(r4)
 8016f20:	28800007 	ldb	r2,0(r5)
 8016f24:	18bff726 	beq	r3,r2,8016f04 <strncmp+0xc0>
 8016f28:	003ff206 	br	8016ef4 <strncmp+0xb0>
 8016f2c:	0005883a 	mov	r2,zero
 8016f30:	f800283a 	ret

08016f34 <__register_exitproc>:
 8016f34:	defffa04 	addi	sp,sp,-24
 8016f38:	008200b4 	movhi	r2,2050
 8016f3c:	10a95a04 	addi	r2,r2,-23192
 8016f40:	dc000015 	stw	r16,0(sp)
 8016f44:	14000017 	ldw	r16,0(r2)
 8016f48:	dd000415 	stw	r20,16(sp)
 8016f4c:	2829883a 	mov	r20,r5
 8016f50:	81405217 	ldw	r5,328(r16)
 8016f54:	dcc00315 	stw	r19,12(sp)
 8016f58:	dc800215 	stw	r18,8(sp)
 8016f5c:	dc400115 	stw	r17,4(sp)
 8016f60:	dfc00515 	stw	ra,20(sp)
 8016f64:	2023883a 	mov	r17,r4
 8016f68:	3027883a 	mov	r19,r6
 8016f6c:	3825883a 	mov	r18,r7
 8016f70:	28002526 	beq	r5,zero,8017008 <__register_exitproc+0xd4>
 8016f74:	29000117 	ldw	r4,4(r5)
 8016f78:	008007c4 	movi	r2,31
 8016f7c:	11002716 	blt	r2,r4,801701c <__register_exitproc+0xe8>
 8016f80:	8800101e 	bne	r17,zero,8016fc4 <__register_exitproc+0x90>
 8016f84:	2105883a 	add	r2,r4,r4
 8016f88:	1085883a 	add	r2,r2,r2
 8016f8c:	20c00044 	addi	r3,r4,1
 8016f90:	1145883a 	add	r2,r2,r5
 8016f94:	0009883a 	mov	r4,zero
 8016f98:	15000215 	stw	r20,8(r2)
 8016f9c:	28c00115 	stw	r3,4(r5)
 8016fa0:	2005883a 	mov	r2,r4
 8016fa4:	dfc00517 	ldw	ra,20(sp)
 8016fa8:	dd000417 	ldw	r20,16(sp)
 8016fac:	dcc00317 	ldw	r19,12(sp)
 8016fb0:	dc800217 	ldw	r18,8(sp)
 8016fb4:	dc400117 	ldw	r17,4(sp)
 8016fb8:	dc000017 	ldw	r16,0(sp)
 8016fbc:	dec00604 	addi	sp,sp,24
 8016fc0:	f800283a 	ret
 8016fc4:	29802204 	addi	r6,r5,136
 8016fc8:	00800044 	movi	r2,1
 8016fcc:	110e983a 	sll	r7,r2,r4
 8016fd0:	30c04017 	ldw	r3,256(r6)
 8016fd4:	2105883a 	add	r2,r4,r4
 8016fd8:	1085883a 	add	r2,r2,r2
 8016fdc:	1185883a 	add	r2,r2,r6
 8016fe0:	19c6b03a 	or	r3,r3,r7
 8016fe4:	14802015 	stw	r18,128(r2)
 8016fe8:	14c00015 	stw	r19,0(r2)
 8016fec:	00800084 	movi	r2,2
 8016ff0:	30c04015 	stw	r3,256(r6)
 8016ff4:	88bfe31e 	bne	r17,r2,8016f84 <__register_exitproc+0x50>
 8016ff8:	30804117 	ldw	r2,260(r6)
 8016ffc:	11c4b03a 	or	r2,r2,r7
 8017000:	30804115 	stw	r2,260(r6)
 8017004:	003fdf06 	br	8016f84 <__register_exitproc+0x50>
 8017008:	008200b4 	movhi	r2,2050
 801700c:	10b18004 	addi	r2,r2,-14848
 8017010:	100b883a 	mov	r5,r2
 8017014:	80805215 	stw	r2,328(r16)
 8017018:	003fd606 	br	8016f74 <__register_exitproc+0x40>
 801701c:	00820034 	movhi	r2,2048
 8017020:	10913d04 	addi	r2,r2,17652
 8017024:	1000021e 	bne	r2,zero,8017030 <__register_exitproc+0xfc>
 8017028:	013fffc4 	movi	r4,-1
 801702c:	003fdc06 	br	8016fa0 <__register_exitproc+0x6c>
 8017030:	01006404 	movi	r4,400
 8017034:	103ee83a 	callr	r2
 8017038:	1007883a 	mov	r3,r2
 801703c:	103ffa26 	beq	r2,zero,8017028 <__register_exitproc+0xf4>
 8017040:	80805217 	ldw	r2,328(r16)
 8017044:	180b883a 	mov	r5,r3
 8017048:	18000115 	stw	zero,4(r3)
 801704c:	18800015 	stw	r2,0(r3)
 8017050:	80c05215 	stw	r3,328(r16)
 8017054:	18006215 	stw	zero,392(r3)
 8017058:	18006315 	stw	zero,396(r3)
 801705c:	0009883a 	mov	r4,zero
 8017060:	883fc826 	beq	r17,zero,8016f84 <__register_exitproc+0x50>
 8017064:	003fd706 	br	8016fc4 <__register_exitproc+0x90>

08017068 <register_fini>:
 8017068:	f800283a 	ret

0801706c <__call_exitprocs>:
 801706c:	008200b4 	movhi	r2,2050
 8017070:	10a95a04 	addi	r2,r2,-23192
 8017074:	10800017 	ldw	r2,0(r2)
 8017078:	defff304 	addi	sp,sp,-52
 801707c:	df000b15 	stw	fp,44(sp)
 8017080:	d8800115 	stw	r2,4(sp)
 8017084:	00820034 	movhi	r2,2048
 8017088:	10913804 	addi	r2,r2,17632
 801708c:	1005003a 	cmpeq	r2,r2,zero
 8017090:	d8800215 	stw	r2,8(sp)
 8017094:	d8800117 	ldw	r2,4(sp)
 8017098:	dd400815 	stw	r21,32(sp)
 801709c:	dd000715 	stw	r20,28(sp)
 80170a0:	10805204 	addi	r2,r2,328
 80170a4:	dfc00c15 	stw	ra,48(sp)
 80170a8:	ddc00a15 	stw	r23,40(sp)
 80170ac:	dd800915 	stw	r22,36(sp)
 80170b0:	dcc00615 	stw	r19,24(sp)
 80170b4:	dc800515 	stw	r18,20(sp)
 80170b8:	dc400415 	stw	r17,16(sp)
 80170bc:	dc000315 	stw	r16,12(sp)
 80170c0:	282b883a 	mov	r21,r5
 80170c4:	2039883a 	mov	fp,r4
 80170c8:	d8800015 	stw	r2,0(sp)
 80170cc:	2829003a 	cmpeq	r20,r5,zero
 80170d0:	d8800117 	ldw	r2,4(sp)
 80170d4:	14405217 	ldw	r17,328(r2)
 80170d8:	88001026 	beq	r17,zero,801711c <__call_exitprocs+0xb0>
 80170dc:	ddc00017 	ldw	r23,0(sp)
 80170e0:	88800117 	ldw	r2,4(r17)
 80170e4:	8c802204 	addi	r18,r17,136
 80170e8:	143fffc4 	addi	r16,r2,-1
 80170ec:	80000916 	blt	r16,zero,8017114 <__call_exitprocs+0xa8>
 80170f0:	05bfffc4 	movi	r22,-1
 80170f4:	a000151e 	bne	r20,zero,801714c <__call_exitprocs+0xe0>
 80170f8:	8409883a 	add	r4,r16,r16
 80170fc:	2105883a 	add	r2,r4,r4
 8017100:	1485883a 	add	r2,r2,r18
 8017104:	10c02017 	ldw	r3,128(r2)
 8017108:	a8c01126 	beq	r21,r3,8017150 <__call_exitprocs+0xe4>
 801710c:	843fffc4 	addi	r16,r16,-1
 8017110:	85bff81e 	bne	r16,r22,80170f4 <__call_exitprocs+0x88>
 8017114:	d8800217 	ldw	r2,8(sp)
 8017118:	10003126 	beq	r2,zero,80171e0 <__call_exitprocs+0x174>
 801711c:	dfc00c17 	ldw	ra,48(sp)
 8017120:	df000b17 	ldw	fp,44(sp)
 8017124:	ddc00a17 	ldw	r23,40(sp)
 8017128:	dd800917 	ldw	r22,36(sp)
 801712c:	dd400817 	ldw	r21,32(sp)
 8017130:	dd000717 	ldw	r20,28(sp)
 8017134:	dcc00617 	ldw	r19,24(sp)
 8017138:	dc800517 	ldw	r18,20(sp)
 801713c:	dc400417 	ldw	r17,16(sp)
 8017140:	dc000317 	ldw	r16,12(sp)
 8017144:	dec00d04 	addi	sp,sp,52
 8017148:	f800283a 	ret
 801714c:	8409883a 	add	r4,r16,r16
 8017150:	88c00117 	ldw	r3,4(r17)
 8017154:	2105883a 	add	r2,r4,r4
 8017158:	1445883a 	add	r2,r2,r17
 801715c:	18ffffc4 	addi	r3,r3,-1
 8017160:	11800217 	ldw	r6,8(r2)
 8017164:	1c001526 	beq	r3,r16,80171bc <__call_exitprocs+0x150>
 8017168:	10000215 	stw	zero,8(r2)
 801716c:	303fe726 	beq	r6,zero,801710c <__call_exitprocs+0xa0>
 8017170:	00c00044 	movi	r3,1
 8017174:	1c06983a 	sll	r3,r3,r16
 8017178:	90804017 	ldw	r2,256(r18)
 801717c:	8cc00117 	ldw	r19,4(r17)
 8017180:	1884703a 	and	r2,r3,r2
 8017184:	10001426 	beq	r2,zero,80171d8 <__call_exitprocs+0x16c>
 8017188:	90804117 	ldw	r2,260(r18)
 801718c:	1884703a 	and	r2,r3,r2
 8017190:	10000c1e 	bne	r2,zero,80171c4 <__call_exitprocs+0x158>
 8017194:	2105883a 	add	r2,r4,r4
 8017198:	1485883a 	add	r2,r2,r18
 801719c:	11400017 	ldw	r5,0(r2)
 80171a0:	e009883a 	mov	r4,fp
 80171a4:	303ee83a 	callr	r6
 80171a8:	88800117 	ldw	r2,4(r17)
 80171ac:	98bfc81e 	bne	r19,r2,80170d0 <__call_exitprocs+0x64>
 80171b0:	b8800017 	ldw	r2,0(r23)
 80171b4:	147fd526 	beq	r2,r17,801710c <__call_exitprocs+0xa0>
 80171b8:	003fc506 	br	80170d0 <__call_exitprocs+0x64>
 80171bc:	8c000115 	stw	r16,4(r17)
 80171c0:	003fea06 	br	801716c <__call_exitprocs+0x100>
 80171c4:	2105883a 	add	r2,r4,r4
 80171c8:	1485883a 	add	r2,r2,r18
 80171cc:	11000017 	ldw	r4,0(r2)
 80171d0:	303ee83a 	callr	r6
 80171d4:	003ff406 	br	80171a8 <__call_exitprocs+0x13c>
 80171d8:	303ee83a 	callr	r6
 80171dc:	003ff206 	br	80171a8 <__call_exitprocs+0x13c>
 80171e0:	88800117 	ldw	r2,4(r17)
 80171e4:	1000081e 	bne	r2,zero,8017208 <__call_exitprocs+0x19c>
 80171e8:	89000017 	ldw	r4,0(r17)
 80171ec:	20000726 	beq	r4,zero,801720c <__call_exitprocs+0x1a0>
 80171f0:	b9000015 	stw	r4,0(r23)
 80171f4:	8809883a 	mov	r4,r17
 80171f8:	80044e00 	call	80044e0 <free>
 80171fc:	bc400017 	ldw	r17,0(r23)
 8017200:	883fb71e 	bne	r17,zero,80170e0 <__call_exitprocs+0x74>
 8017204:	003fc506 	br	801711c <__call_exitprocs+0xb0>
 8017208:	89000017 	ldw	r4,0(r17)
 801720c:	882f883a 	mov	r23,r17
 8017210:	2023883a 	mov	r17,r4
 8017214:	883fb21e 	bne	r17,zero,80170e0 <__call_exitprocs+0x74>
 8017218:	003fc006 	br	801711c <__call_exitprocs+0xb0>

0801721c <alt_sim_halt>:

/*
 * Routine called on exit.
 */
static ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
 801721c:	defffd04 	addi	sp,sp,-12
 8017220:	df000215 	stw	fp,8(sp)
 8017224:	df000204 	addi	fp,sp,8
 8017228:	e13fff15 	stw	r4,-4(fp)
  int r2 = exit_code;
 801722c:	e0bfff17 	ldw	r2,-4(fp)
 8017230:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 8017234:	e0bffe17 	ldw	r2,-8(fp)
 8017238:	1005003a 	cmpeq	r2,r2,zero
 801723c:	1000021e 	bne	r2,zero,8017248 <alt_sim_halt+0x2c>
    ALT_SIM_FAIL();
 8017240:	002af070 	cmpltui	zero,zero,43969
 8017244:	00000106 	br	801724c <alt_sim_halt+0x30>
  } else {
    ALT_SIM_PASS();
 8017248:	002af0b0 	cmpltui	zero,zero,43970
  }
#endif /* DEBUG_STUB */
}
 801724c:	e037883a 	mov	sp,fp
 8017250:	df000017 	ldw	fp,0(sp)
 8017254:	dec00104 	addi	sp,sp,4
 8017258:	f800283a 	ret

0801725c <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 801725c:	defffd04 	addi	sp,sp,-12
 8017260:	dfc00215 	stw	ra,8(sp)
 8017264:	df000115 	stw	fp,4(sp)
 8017268:	df000104 	addi	fp,sp,4
 801726c:	e13fff15 	stw	r4,-4(fp)
  ALT_OS_STOP();

  /* Provide notification to the simulator that we've stopped */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_SIM_HALT().\r\n");
  ALT_SIM_HALT(exit_code);
 8017270:	e13fff17 	ldw	r4,-4(fp)
 8017274:	801721c0 	call	801721c <alt_sim_halt>

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 8017278:	003fff06 	br	8017278 <_exit+0x1c>
 801727c:	00000010 	cmplti	zero,zero,0
 8017280:	00000000 	call	0 <__alt_mem_onchip_memory2_0-0x3000>
 8017284:	00527a01 	jmpi	527a0 <__alt_mem_onchip_memory2_1+0x4e7a0>
 8017288:	011f7c01 	jmpi	11f7c0 <__alt_mem_onchip_memory2_1+0x11b7c0>
 801728c:	001b0c0b 	ldhu	zero,27696(zero)
 8017290:	00000028 	cmpgeui	zero,zero,0
 8017294:	00000018 	cmpnei	zero,zero,0
 8017298:	0800c04c 	andi	zero,at,769
 801729c:	000005dc 	xori	zero,zero,23
 80172a0:	400e4400 	call	400e440 <__alt_mem_onchip_memory2_1+0x400a440>
 80172a4:	92099170 	cmpltui	r8,r18,9797
 80172a8:	95079308 	cmpgei	r20,r18,7756
 80172ac:	97049605 	stb	fp,4696(r18)
 80172b0:	90019f03 	ldbu	zero,1660(r18)
 80172b4:	9c06940a 	0x9c06940a
 80172b8:	00000002 	0x2
 80172bc:	00000028 	cmpgeui	zero,zero,0
 80172c0:	00000044 	movi	zero,1
 80172c4:	0800c628 	cmpgeui	zero,at,792
 80172c8:	000005b0 	cmpltui	zero,zero,22
 80172cc:	3c0e4400 	call	3c0e440 <__alt_mem_onchip_memory2_1+0x3c0a440>
 80172d0:	92099168 	cmpgeui	r8,r18,9797
 80172d4:	95079308 	cmpgei	r20,r18,7756
 80172d8:	9c039705 	stb	r16,3676(r19)
 80172dc:	90019f02 	0x90019f02
 80172e0:	9606940a 	0x9606940a
 80172e4:	00000004 	movi	zero,0
 80172e8:	08017068 	cmpgeui	zero,at,1473
