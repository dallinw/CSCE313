/*
 * PROJECT 4: WYLIE GUNN AND DALLIN WILLIAMS
 */

#include <stdio.h>
#include <unistd.h>
#include "system.h"
#include "altera_avalon_pio_regs.h"
#include "alt_types.h"
#include <altera_up_avalon_video_pixel_buffer_dma.h> // to swap front and back buffer
#include <math.h>  // for trigonometry functions
#include <stdlib.h>  // for file I/O
#include <altera_avalon_performance_counter.h>
#include "altera_avalon_mailbox.h"


alt_up_pixel_buffer_dma_dev *my_pixel_buffer; //declare global var
const int num_rows = 240;  //from 320
const int num_cols = 320; //from 240
float row;
float col;
int n = 2; //number of processors


//declaring mailboxes
alt_mailbox_dev* mailbox_0;
alt_mailbox_dev* mailbox_1;
alt_mailbox_dev* mailbox_2;
//alt_mailbox_dev* mailbox_3;
alt_u32 message = 0;

void barrier(int id);
void pend(alt_mailbox_dev*);
void post(int id, alt_u32 mess);


int main()
{

	mailbox_0 = altera_avalon_mailbox_open("/dev/mailbox_0");
	mailbox_1 = altera_avalon_mailbox_open("/dev/mailbox_1");
	mailbox_2 = altera_avalon_mailbox_open("/dev/mailbox_2");
	//	mailbox_3 = altera_avalon_mailbox_open("/dev/mailbox_3");

	int cpuid = __builtin_rdctl(5);

	//alt_up_pixel_buffer_dma_dev *my_pixel_buffer; //declare global var
	my_pixel_buffer=alt_up_pixel_buffer_dma_open_dev("/dev/video_pixel_buffer_dma_0"); //assign it
	alt_up_pixel_buffer_dma_clear_screen(my_pixel_buffer,0);//clear_screen();

	barrier(cpuid);

	int zoom = 1;
	float min_x, max_x, min_y, max_y;
	min_x = -2.5;
	max_x = 1.0;
	min_y = -1.0;
	max_y = 1.0;

	int i, j;
	float x, y, z;
	float x0, y0;

	float target_x, target_y;
	int iteration;
	int is_target; //false

	while (1) {
		//printf("%d", cpuid);
		is_target == 0;

		for (i = cpuid; i < num_rows; i+=3) {
			for (j = 0; j < num_cols; j++) {
				x = 0;
				y = 0;
				z = 0;
				x0 = j/320.0*(max_x - min_x) + min_x;
				y0 = (239.0-i)/240.0*(max_y - min_y) + min_y;
				//printf("x0: %f...", x0);
				//printf("y0: %f\n", y0);
				iteration = 0;

				while( (x*x + y*y) <= 4 && iteration < 500) {
					float xtemp = x*x - y*y + x0;
					y = 2*x*y + y0;
					x = xtemp;
					iteration++;
					if(iteration == 250 && is_target == 0) {
						is_target == 1;
					}
				}
				//printf("Iteration: %d\n", iteration);
				if(iteration == 500) {
					alt_up_pixel_buffer_dma_draw(my_pixel_buffer, 0,j,i );
				} else {
					alt_up_pixel_buffer_dma_draw(my_pixel_buffer, (iteration*8/zoom) + (iteration*4/zoom) +(iteration*2/zoom), j, i);
				}

			}
			barrier(cpuid);
		}
		if(is_target == 1) {
			target_x = x0;
			target_y = y0;
		}
		min_x = target_x - 1/(pow(1.5, zoom));
		max_x = target_x + 1/(pow(1.5, zoom));
		min_y = target_y - 0.75/(pow(1.5, zoom));
		max_y = target_y + 0.75/(pow(1.5, zoom));
		zoom += 1;

		barrier(cpuid);
		alt_up_pixel_buffer_dma_clear_screen(my_pixel_buffer,0);
	}
}

void barrier(int id){
	//post message to the other three mailboxes
	if(id == 0){
		post(id, message);
		int i;
		for(i = 0; i < n-1; i++){
			pend(mailbox_0);
		}
	}
	if(id == 1){
		post(id, message);
		int i;
		for(i = 0; i < n-1; i++){
			pend(mailbox_1);
		}
	}

	if(id == 2){
		post(id, message);
		int i;
		for(i = 0; i < n-1; i++){
			pend(mailbox_2);
		}
	}
	/*
	if(cpuid == 3){
		post(mailbox_3*);
		int i;
		for(i = 0; i < n-1; i++){
			pend(mailbox_3);
		}
	}*/


	//pend until n-1 messages received
}
void pend(alt_mailbox_dev* box){
	altera_avalon_mailbox_pend(box);
}

void post(int id, alt_u32 mess){
	 //altera_avalon_mailbox_post(box, message);

	 if(id == 0){
	 altera_avalon_mailbox_post(mailbox_1, mess);
	 altera_avalon_mailbox_post(mailbox_2, mess);
	 //altera_avalon_mailbox_post(mailbox_3, mess);
	 }
	 if(id == 1){
	 altera_avalon_mailbox_post(mailbox_0, mess);
	 altera_avalon_mailbox_post(mailbox_2, mess);
	 //altera_avalon_mailbox_post(mailbox_3, mess);
	 }

	 if(id == 2){
	 altera_avalon_mailbox_post(mailbox_0, mess);
	 altera_avalon_mailbox_post(mailbox_1, mess);
	 //altera_avalon_mailbox_post(mailbox_3, mess);
	 }
	 /*
	 if(id == 3){
	 altera_avalon_mailbox_post(mailbox_0, mess);
	 altera_avalon_mailbox_post(mailbox_1, mess);
	 altera_avalon_mailbox_post(mailbox_2, mess);
	 }
	 */
}

