
fractals1.elf:     file format elf32-littlenios2
fractals1.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x084001b4

Program Header:
    LOAD off    0x00001000 vaddr 0x08400000 paddr 0x08400000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x08400020 paddr 0x08400020 align 2**12
         filesz 0x00011db8 memsz 0x00011db8 flags r-x
    LOAD off    0x00012dd8 vaddr 0x08411dd8 paddr 0x08413998 align 2**12
         filesz 0x00001bc0 memsz 0x00001bc0 flags rw-
    LOAD off    0x00015558 vaddr 0x08415558 paddr 0x08415558 align 2**12
         filesz 0x00000000 memsz 0x0000030c flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  08400000  08400000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000194  08400020  08400020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0001167c  084001b4  084001b4  000011b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000005a8  08411830  08411830  00012830  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001bc0  08411dd8  08413998  00012dd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          0000030c  08415558  08415558  00015558  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000023  00000000  00000000  00014998  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00001018  00000000  00000000  000149c0  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 00001b16  00000000  00000000  000159d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00029349  00000000  00000000  000174ee  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00009d6e  00000000  00000000  00040837  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   000195f4  00000000  00000000  0004a5a5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00002004  00000000  00000000  00063b9c  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00002901  00000000  00000000  00065ba0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000e66b  00000000  00000000  000684a1  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000030  00000000  00000000  00076b0c  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000ce0  00000000  00000000  00076b40  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0007b43e  2**0
                  CONTENTS, READONLY
 18 .cpu          00000005  00000000  00000000  0007b441  2**0
                  CONTENTS, READONLY
 19 .simulation_enabled 00000001  00000000  00000000  0007b446  2**0
                  CONTENTS, READONLY
 20 .sysid_hash   00000004  00000000  00000000  0007b447  2**0
                  CONTENTS, READONLY
 21 .sysid_base   00000004  00000000  00000000  0007b44b  2**0
                  CONTENTS, READONLY
 22 .sysid_time   00000004  00000000  00000000  0007b44f  2**0
                  CONTENTS, READONLY
 23 .stderr_dev   0000000b  00000000  00000000  0007b453  2**0
                  CONTENTS, READONLY
 24 .stdin_dev    0000000b  00000000  00000000  0007b45e  2**0
                  CONTENTS, READONLY
 25 .stdout_dev   0000000b  00000000  00000000  0007b469  2**0
                  CONTENTS, READONLY
 26 .sopc_system_name 0000000b  00000000  00000000  0007b474  2**0
                  CONTENTS, READONLY
 27 .quartus_project_dir 00000020  00000000  00000000  0007b47f  2**0
                  CONTENTS, READONLY
 28 .jdi          0001085c  00000000  00000000  0007b49f  2**0
                  CONTENTS, READONLY
 29 .sopcinfo     00113e1c  00000000  00000000  0008bcfb  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
08400000 l    d  .entry	00000000 .entry
08400020 l    d  .exceptions	00000000 .exceptions
084001b4 l    d  .text	00000000 .text
08411830 l    d  .rodata	00000000 .rodata
08411dd8 l    d  .rwdata	00000000 .rwdata
08415558 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
084001fc l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 w_pow.c
00000000 l    df *ABS*	00000000 e_pow.c
08411924 l     O .rodata	00000010 bp
08411934 l     O .rodata	00000010 dp_l
08411944 l     O .rodata	00000010 dp_h
00000000 l    df *ABS*	00000000 e_sqrt.c
00000000 l    df *ABS*	00000000 s_fabs.c
00000000 l    df *ABS*	00000000 s_finite.c
00000000 l    df *ABS*	00000000 s_isnand.c
00000000 l    df *ABS*	00000000 s_lib_ver.c
00000000 l    df *ABS*	00000000 s_matherr.c
00000000 l    df *ABS*	00000000 s_nan.c
00000000 l    df *ABS*	00000000 s_rint.c
08411954 l     O .rodata	00000010 TWO52
00000000 l    df *ABS*	00000000 s_scalbn.c
00000000 l    df *ABS*	00000000 s_copysign.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 fp-bit.c
08402bd0 l     F .text	000001e4 _fpadd_parts
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
0840332c l     F .text	00000410 _fpadd_parts
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
08404298 l     F .text	0000007c udivmodsi4
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 errno.c
00000000 l    df *ABS*	00000000 impure.c
08411dd8 l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
08404ebc l     F .text	00000058 __sprint_r
08411afe l     O .rodata	00000010 blanks.3452
08411aee l     O .rodata	00000010 zeroes.3453
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
08406f20 l     F .text	00000218 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
0840891c l     F .text	00000058 std
08408a28 l     F .text	00000008 __fp_lock
08408a30 l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 locale.c
08413954 l     O .rwdata	00000004 charset
08411b30 l     O .rodata	00000030 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
08411c78 l     O .rodata	0000000c p05.2458
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_isinfd.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 alt_close.c
0840cf7c l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0840cfdc l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0840d0dc l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
0840d1fc l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0840d2dc l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0840d438 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
0840d664 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
08413978 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
0840d900 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
08412794 l     O .rwdata	00001060 jtag_uart_1
084137f4 l     O .rwdata	0000003c mailbox_0
08413830 l     O .rwdata	0000003c mailbox_1
0841386c l     O .rwdata	0000003c mailbox_2
084138a8 l     O .rwdata	0000003c mailbox_3
084138e4 l     O .rwdata	00000054 video_pixel_buffer_dma_0
0840dc0c l     F .text	00000038 alt_dev_reg
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0840de4c l     F .text	00000228 altera_avalon_jtag_uart_irq
0840e074 l     F .text	000000b0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_mailbox.c
0840e848 l     F .text	0000006c alt_avalon_mutex_reg
0840e8b4 l     F .text	00000060 alt_get_errno
0840ea48 l     F .text	00000050 alt_mailbox_increment_ptr
00000000 l    df *ABS*	00000000 altera_avalon_mutex.c
0840ec18 l     F .text	0000007c alt_mutex_trylock
0840ecec l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 altera_up_avalon_video_pixel_buffer_dma.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
084106d4 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
08410b8c l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
08410cc8 l     F .text	000000dc alt_file_locked
08410f2c l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_irq.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
084115ac l     F .text	00000004 register_fini
00000000 l    df *ABS*	00000000 alt_exit.c
08411760 l     F .text	00000040 alt_sim_halt
0840a6d8 g     F .text	00000094 _mprec_log10
00007000 g       *ABS*	00000000 __alt_mem_onchip_memory2_3
0840a7c4 g     F .text	00000088 __any_on
0840bea0 g     F .text	00000070 _isatty_r
08411c50 g     O .rodata	00000028 __mprec_tinytens
0840d498 g     F .text	0000006c alt_main
0840ea98 g     F .text	000000a8 altera_avalon_mailbox_pend
0840fb88 g     F .text	000003d0 alt_up_pixel_buffer_dma_draw_vline
08404d94 g     F .text	000000a0 _puts_r
084155d4 g     O .bss	00000100 alt_irq
084026d0 g     F .text	00000018 fabs
0840bf10 g     F .text	00000078 _lseek_r
0841555c g     O .bss	00000004 mailbox_0
08413998 g       *ABS*	00000000 __flash_rwdata_start
08403e4c g     F .text	00000088 __eqdf2
08415864 g       *ABS*	00000000 __alt_heap_start
08415560 g     O .bss	00000004 mailbox_2
0840eb40 g     F .text	000000d8 altera_avalon_mailbox_get
08404d1c g     F .text	00000044 printf
0840b96c g     F .text	00000068 __sseek
08408984 g     F .text	000000a4 __sinit
0840965c g     F .text	00000084 _setlocale_r
08408a84 g     F .text	00000068 __sfmoreglue
0840d524 g     F .text	00000020 __malloc_unlock
08402e88 g     F .text	00000174 __divsf3
0840a154 g     F .text	000000e0 memmove
08408a74 g     F .text	00000010 _cleanup
0840edac g     F .text	00000040 altera_avalon_mutex_trylock
0840a84c g     F .text	000000bc _Balloc
08403184 g     F .text	00000094 __fixsfsi
08413940 g     O .rwdata	00000004 n
0840ef5c g     F .text	000001a0 alt_up_pixel_buffer_dma_draw
08403f5c g     F .text	00000088 __gtdf2
08404d0c g     F .text	00000010 __errno
0840ef1c g     F .text	00000040 alt_up_pixel_buffer_dma_open_dev
08400000 g     F .entry	0000001c __reset
0840ee48 g     F .text	0000007c altera_avalon_mutex_is_mine
08400020 g       *ABS*	00000000 __flash_exceptions_start
0840be2c g     F .text	00000074 _fstat_r
08415590 g     O .bss	00000004 errno
084041ec g     F .text	00000038 __make_dp
084047cc g     F .text	0000002c __make_fp
08415598 g     O .bss	00000004 alt_argv
0841b938 g       *ABS*	00000000 _gp
08402db4 g     F .text	00000070 __subsf3
0840f0fc g     F .text	00000058 alt_up_pixel_buffer_dma_change_back_buffer_address
00005000 g       *ABS*	00000000 __alt_mem_onchip_memory2_2
08412614 g     O .rwdata	00000180 alt_fd_list
08415564 g     O .bss	00000004 mailbox_1
084107fc g     F .text	00000094 alt_find_dev
0840a0b4 g     F .text	000000a0 memcpy
08408a68 g     F .text	0000000c _cleanup_r
084040f4 g     F .text	000000f8 __floatsidf
08410c50 g     F .text	00000078 alt_io_redirect
08403fe4 g     F .text	00000088 __ltdf2
08411830 g       *ABS*	00000000 __DTOR_END__
08404e34 g     F .text	00000014 puts
08411130 g     F .text	00000020 altera_nios2_irq_init
0840a628 g     F .text	000000b0 __ratio
0840e98c g     F .text	000000bc altera_avalon_mailbox_post
0840f1ac g     F .text	00000034 alt_up_pixel_buffer_dma_check_swap_buffers_status
0840e28c g     F .text	00000224 altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
08404d60 g     F .text	00000034 _printf_r
00003000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
084043d4 g     F .text	00000008 __udivsi3
0840d13c g     F .text	000000c0 isatty
08411b60 g     O .rodata	000000c8 __mprec_tens
0840e96c g     F .text	00000020 altera_avalon_mailbox_close
0840f838 g     F .text	00000350 alt_up_pixel_buffer_dma_draw_hline
08409638 g     F .text	00000008 __locale_charset
08403074 g     F .text	00000078 __lesf2
08411328 g     F .text	00000090 alt_icache_flush
08415584 g     O .bss	00000004 __malloc_top_pad
08413950 g     O .rwdata	00000004 __mb_cur_max
08409640 g     F .text	0000000c _localeconv_r
0840af44 g     F .text	0000003c __i2b
0840901c g     F .text	0000049c __sfvwrite_r
0840b8f4 g     F .text	00000070 _sbrk_r
0841001c g     F .text	000000d0 helper_plot_pixel
0840bf88 g     F .text	00000078 _read_r
084121d8 g     O .rwdata	0000000c __lc_ctype
08413970 g     O .rwdata	00000004 alt_max_fd
08404b0c g     F .text	00000138 __unpack_d
0840bd08 g     F .text	00000110 _fclose_r
084088e8 g     F .text	00000034 fflush
08415588 g     O .bss	00000004 __malloc_max_sbrked_mem
08403218 g     F .text	00000054 __extendsfdf2
084037bc g     F .text	00000074 __adddf3
0840a508 g     F .text	00000120 __b2d
0840f1e0 g     F .text	00000164 alt_up_pixel_buffer_dma_clear_screen
0840c5dc g     F .text	000005b0 __umoddi3
0840d348 g     F .text	000000f0 lseek
0840eec4 g     F .text	00000058 altera_avalon_mutex_first_lock
08413944 g     O .rwdata	00000004 __fdlib_version
0841394c g     O .rwdata	00000004 _global_impure_ptr
0840b2c0 g     F .text	000005f4 _realloc_r
08415864 g       *ABS*	00000000 __bss_end
08410a94 g     F .text	000000f8 alt_iic_isr_register
0840f344 g     F .text	000004f4 alt_up_pixel_buffer_dma_draw_box
08411024 g     F .text	0000010c alt_tick
0840c000 g     F .text	000005dc __udivdi3
08411c28 g     O .rodata	00000028 __mprec_bigtens
0840b1a0 g     F .text	00000120 __s2b
0840ccec g     F .text	00000194 __floatunsidf
0840a428 g     F .text	00000060 __mcmp
08415558 g     O .bss	00000004 message
08408a50 g     F .text	00000018 __fp_lock_all
08410a4c g     F .text	00000048 alt_ic_irq_enabled
08410f8c g     F .text	00000098 alt_alarm_stop
084155a0 g     O .bss	00000004 alt_irq_active
084000ec g     F .exceptions	000000c8 alt_irq_handler
084125ec g     O .rwdata	00000028 alt_dev_null
08400a50 g     F .text	00000114 barrier
0840ec94 g     F .text	00000058 altera_avalon_mutex_open
0840274c g     F .text	00000210 rint
0840465c g     F .text	000000c8 __unpack_f
084105dc g     F .text	00000044 alt_dcache_flush_all
0840a2f4 g     F .text	00000070 __hi0bits
0840ff58 g     F .text	000000c4 alt_up_pixel_buffer_dma_draw_rectangle
0840cc14 g     F .text	000000d8 __fixdfsi
08413998 g       *ABS*	00000000 __ram_rwdata_end
08413968 g     O .rwdata	00000008 alt_dev_list
0840d7e0 g     F .text	00000120 write
084100ec g     F .text	0000039c alt_up_pixel_buffer_dma_draw_line
08413984 g     O .rwdata	00000008 alt_mutex_list
08411dd8 g       *ABS*	00000000 __ram_rodata_end
0840d008 g     F .text	000000d4 fstat
0840406c g     F .text	00000088 __ledf2
0840b080 g     F .text	00000120 __pow5mult
08415578 g     O .bss	00000004 __nlocale_changed
084043dc g     F .text	00000008 __umodsi3
08415864 g       *ABS*	00000000 end
084044fc g     F .text	00000160 __pack_f
0840dd8c g     F .text	000000c0 altera_avalon_jtag_uart_init
0841182c g       *ABS*	00000000 __CTOR_LIST__
08800000 g       *ABS*	00000000 __alt_stack_pointer
0840447c g     F .text	00000080 __clzsi2
0840e4b0 g     F .text	00000240 altera_avalon_jtag_uart_write
0840e6f0 g     F .text	00000158 alt_avalon_mailbox_init
08408974 g     F .text	00000004 __sfp_lock_acquire
08409fd0 g     F .text	000000e4 memchr
08404f14 g     F .text	00001eac ___vfprintf_internal_r
08408d08 g     F .text	00000314 _free_r
084115b0 g     F .text	000001b0 __call_exitprocs
0841557c g     O .bss	00000004 __mlocale_changed
0841395c g     O .rwdata	00000004 __malloc_sbrk_base
084001b4 g     F .text	0000004c _start
084155a4 g     O .bss	00000004 _alt_tick_rate
0840ac10 g     F .text	0000014c __lshift
084155a8 g     O .bss	00000004 _alt_nticks
0840d544 g     F .text	00000120 read
0840d994 g     F .text	00000278 alt_sys_init
084030ec g     F .text	00000098 __floatsisf
08411478 g     F .text	00000134 __register_exitproc
0840edec g     F .text	0000005c altera_avalon_mutex_unlock
0840ad5c g     F .text	000001e8 __multiply
08401108 g     F .text	00001300 __ieee754_pow
0840e124 g     F .text	00000074 altera_avalon_jtag_uart_close
08400c80 g     F .text	00000488 pow
08411dd8 g       *ABS*	00000000 __ram_rwdata_start
08411830 g       *ABS*	00000000 __ram_rodata_start
084155ac g     O .bss	00000028 __malloc_current_mallinfo
00004000 g       *ABS*	00000000 __alt_mem_onchip_memory2_1
0840a908 g     F .text	0000017c __d2b
0840dc44 g     F .text	00000058 altera_avalon_jtag_uart_read_fd
08411270 g     F .text	000000b8 alt_get_fd
08404c44 g     F .text	000000c8 __fpcmp_parts_d
0840bc98 g     F .text	00000070 _close_r
08411404 g     F .text	00000074 memcmp
0840dcf4 g     F .text	00000048 altera_avalon_jtag_uart_close_fd
08415568 g     O .bss	00000004 col
08415864 g       *ABS*	00000000 __alt_stack_base
0840dd3c g     F .text	00000050 altera_avalon_jtag_uart_ioctl_fd
08406de4 g     F .text	0000013c __swsetup_r
08403bf4 g     F .text	00000258 __divdf3
08408aec g     F .text	000000f0 __sfp
0840a76c g     F .text	00000058 __copybits
084121e4 g     O .rwdata	00000408 __malloc_av_
08408980 g     F .text	00000004 __sinit_lock_release
08403830 g     F .text	000003c4 __muldf3
0840ba50 g     F .text	00000060 __sread
08411964 g     O .rodata	00000010 __thenan_sf
08411150 g     F .text	00000120 alt_find_file
08410620 g     F .text	000000b4 alt_dev_llist_insert
0840d504 g     F .text	00000020 __malloc_lock
0840d724 g     F .text	000000bc sbrk
084086ec g     F .text	000001fc _fflush_r
0840bbe4 g     F .text	000000b4 _calloc_r
08415558 g       *ABS*	00000000 __bss_start
0840a234 g     F .text	00000098 memset
08400200 g     F .text	00000850 main
0841559c g     O .bss	00000004 alt_envp
0841558c g     O .bss	00000004 __malloc_max_total_mem
0840f154 g     F .text	00000058 alt_up_pixel_buffer_dma_swap_buffers
0840dc9c g     F .text	00000058 altera_avalon_jtag_uart_write_fd
0840b964 g     F .text	00000008 __sclose
08402734 g     F .text	00000008 matherr
08800000 g       *ABS*	00000000 __alt_heap_limit
0840be18 g     F .text	00000014 fclose
08404224 g     F .text	00000074 __truncdfsf2
084156d4 g     O .bss	00000190 _atexit0
0840ed6c g     F .text	00000040 altera_avalon_mutex_lock
08407138 g     F .text	000015b4 _dtoa_r
08409890 g     F .text	00000740 _malloc_r
08413974 g     O .rwdata	00000004 alt_errno
08409580 g     F .text	000000b8 _fwalk
08404314 g     F .text	00000060 __divsi3
08411974 g     O .rodata	00000014 __thenan_df
08408bdc g     F .text	0000012c _malloc_trim_r
08411830 g       *ABS*	00000000 __CTOR_END__
084026e8 g     F .text	0000001c finite
0840bab0 g     F .text	000000bc strcmp
08411830 g       *ABS*	00000000 __flash_rodata_start
08411830 g       *ABS*	00000000 __DTOR_LIST__
08402b3c g     F .text	00000024 copysign
08403ed4 g     F .text	00000088 __nedf2
11000000 g       *ABS*	00000000 __alt_mem_sram_0
0840d960 g     F .text	00000034 alt_irq_init
0840d6c4 g     F .text	00000060 alt_release_fd
08411988 g     O .rodata	00000100 __clz_tab
08415580 g     O .bss	00000004 _PathLocale
084113b8 g     F .text	00000014 atexit
0841556c g     O .bss	00000004 my_pixel_buffer
08402ffc g     F .text	00000078 __gesf2
0840bb6c g     F .text	00000078 _write_r
08415570 g     O .bss	00000004 mailbox_3
084096e0 g     F .text	0000001c setlocale
08413948 g     O .rwdata	00000004 _impure_ptr
08415594 g     O .bss	00000004 alt_argc
0840295c g     F .text	000001e0 scalbn
08410798 g     F .text	00000064 _do_dtors
08000000 g       *ABS*	00000000 __alt_mem_sdram_0
08400020 g       .exceptions	00000000 alt_irq_entry
0840a488 g     F .text	00000080 __ulp
0840b8b4 g     F .text	00000040 __isinfd
08408a38 g     F .text	00000018 __fp_unlock_all
0841397c g     O .rwdata	00000008 alt_mailbox_list
08413938 g     O .rwdata	00000004 num_rows
08413960 g     O .rwdata	00000008 alt_fs_list
0840273c g     F .text	00000010 nan
08400020 g       *ABS*	00000000 __ram_exceptions_start
0840964c g     F .text	00000010 localeconv
08402408 g     F .text	000002c8 __ieee754_sqrt
084108c0 g     F .text	00000050 alt_ic_isr_register
08413998 g       *ABS*	00000000 _edata
08415864 g       *ABS*	00000000 _end
08400b94 g     F .text	000000ec post
084001b4 g       *ABS*	00000000 __ram_exceptions_end
0840e198 g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
084109ac g     F .text	000000a0 alt_ic_irq_disable
0840b9d4 g     F .text	0000007c __swrite
08413958 g     O .rwdata	00000004 __malloc_trim_threshold
084113cc g     F .text	00000038 exit
084094b8 g     F .text	000000c8 _fwalk_reent
0840326c g     F .text	000000c0 __floatunsisf
0840aa84 g     F .text	0000018c __mdiff
08404374 g     F .text	00000060 __modsi3
08800000 g       *ABS*	00000000 __alt_data_end
08400020 g     F .exceptions	00000000 alt_exception
08408978 g     F .text	00000004 __sfp_lock_release
08402b60 g     F .text	00000070 __fixunssfsi
0840e914 g     F .text	00000058 altera_avalon_mailbox_open
08404724 g     F .text	000000a8 __fpcmp_parts_f
084117a0 g     F .text	00000020 _exit
08402704 g     F .text	00000030 __isnand
08410488 g     F .text	00000154 alt_alarm_start
084043e4 g     F .text	00000098 __muldi3
084096fc g     F .text	00000194 __smakebuf_r
08404e48 g     F .text	00000074 strlen
08410da4 g     F .text	00000188 open
0840cb8c g     F .text	00000088 __gedf2
08410890 g     F .text	00000030 alt_icache_flush_all
08400b64 g     F .text	00000030 pend
0841398c g     O .rwdata	00000004 alt_priority_mask
0841393c g     O .rwdata	00000004 num_cols
08410910 g     F .text	0000009c alt_ic_irq_enable
08406dc0 g     F .text	00000024 __vfprintf_internal
0840ed4c g     F .text	00000020 altera_avalon_mutex_close
0840373c g     F .text	00000080 __subdf3
0840a364 g     F .text	000000c4 __lo0bits
08413990 g     O .rwdata	00000008 alt_alarm_list
08410734 g     F .text	00000064 _do_ctors
0840ce80 g     F .text	000000fc close
08402e24 g     F .text	00000064 __addsf3
0840d25c g     F .text	00000080 alt_load
08415574 g     O .bss	00000004 row
084047f8 g     F .text	00000314 __pack_d
00000000  w      *UND*	00000000 free
0840897c g     F .text	00000004 __sinit_lock_acquire
0840af80 g     F .text	00000100 __multadd
0840a2cc g     F .text	00000028 _Bfree



Disassembly of section .entry:

08400000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && !defined(ALT_SIM_OPTIMIZE)
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
 8400000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
 8400004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
 8400008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
 840000c:	00bffd16 	blt	zero,r2,8400004 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 8400010:	00421034 	movhi	at,2112
    ori r1, r1, %lo(_start)
 8400014:	08406d14 	ori	at,at,436
    jmp r1
 8400018:	0800683a 	jmp	at
 840001c:	00000000 	call	0 <__alt_mem_onchip_memory2_0-0x3000>

Disassembly of section .exceptions:

08400020 <alt_exception>:
         * Process an exception.  For all exceptions we must preserve all
         * caller saved registers on the stack (See the Nios2 ABI
         * documentation for details).
         */

        addi  sp, sp, -76
 8400020:	deffed04 	addi	sp,sp,-76

#endif

#endif

        stw   ra,  0(sp)
 8400024:	dfc00015 	stw	ra,0(sp)
        /*
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */

        stw   r1,   8(sp)
 8400028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 840002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 8400030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 8400034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 8400038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 840003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 8400040:	d9c00815 	stw	r7,32(sp)

        rdctl r5, estatus
 8400044:	000b307a 	rdctl	r5,estatus

        stw   r8,  36(sp)
 8400048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 840004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 8400050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 8400054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 8400058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 840005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 8400060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 8400064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 8400068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 840006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 8400070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 8400074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 8400078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 840007c:	10000326 	beq	r2,zero,840008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 8400080:	20000226 	beq	r4,zero,840008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 8400084:	84000ec0 	call	84000ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 8400088:	00000306 	br	8400098 <alt_exception+0x78>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
 840008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
 8400090:	e8bfff17 	ldw	r2,-4(ea)
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
 8400094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 8400098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 840009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 84000a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 84000a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 84000a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 84000ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 84000b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 84000b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 84000b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 84000bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 84000c0:	d9c00817 	ldw	r7,32(sp)
#ifdef ALT_STACK_CHECK
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif
#endif

        ldw   r8,  36(sp)
 84000c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 84000c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 84000cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 84000d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 84000d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 84000d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 84000dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 84000e0:	dbc01017 	ldw	r15,64(sp)
#endif

        ldw   sp,  76(sp)

#else
        addi  sp, sp, 76
 84000e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 84000e8:	ef80083a 	eret

084000ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 84000ec:	defff904 	addi	sp,sp,-28
 84000f0:	dfc00615 	stw	ra,24(sp)
 84000f4:	df000515 	stw	fp,20(sp)
 84000f8:	df000504 	addi	fp,sp,20
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 84000fc:	0005313a 	rdctl	r2,ipending
 8400100:	e0bffc15 	stw	r2,-16(fp)

  return active;
 8400104:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 8400108:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
 840010c:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 8400110:	00800044 	movi	r2,1
 8400114:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 8400118:	e0ffff17 	ldw	r3,-4(fp)
 840011c:	e0bffe17 	ldw	r2,-8(fp)
 8400120:	1884703a 	and	r2,r3,r2
 8400124:	1005003a 	cmpeq	r2,r2,zero
 8400128:	1000161e 	bne	r2,zero,8400184 <alt_irq_handler+0x98>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 840012c:	e0bffd17 	ldw	r2,-12(fp)
 8400130:	00c21074 	movhi	r3,2113
 8400134:	18d57504 	addi	r3,r3,21972
 8400138:	100490fa 	slli	r2,r2,3
 840013c:	10c5883a 	add	r2,r2,r3
 8400140:	11400017 	ldw	r5,0(r2)
 8400144:	e0bffd17 	ldw	r2,-12(fp)
 8400148:	00c21074 	movhi	r3,2113
 840014c:	18d57504 	addi	r3,r3,21972
 8400150:	100490fa 	slli	r2,r2,3
 8400154:	10c5883a 	add	r2,r2,r3
 8400158:	10800104 	addi	r2,r2,4
 840015c:	11000017 	ldw	r4,0(r2)
 8400160:	283ee83a 	callr	r5
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 8400164:	0005313a 	rdctl	r2,ipending
 8400168:	e0bffb15 	stw	r2,-20(fp)

  return active;
 840016c:	e0bffb17 	ldw	r2,-20(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
 8400170:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
 8400174:	e0bfff17 	ldw	r2,-4(fp)
 8400178:	1004c03a 	cmpne	r2,r2,zero
 840017c:	103fe31e 	bne	r2,zero,840010c <alt_irq_handler+0x20>
 8400180:	00000706 	br	84001a0 <alt_irq_handler+0xb4>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
 8400184:	e0bffe17 	ldw	r2,-8(fp)
 8400188:	1085883a 	add	r2,r2,r2
 840018c:	e0bffe15 	stw	r2,-8(fp)
      i++;
 8400190:	e0bffd17 	ldw	r2,-12(fp)
 8400194:	10800044 	addi	r2,r2,1
 8400198:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 840019c:	003fde06 	br	8400118 <alt_irq_handler+0x2c>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
 84001a0:	e037883a 	mov	sp,fp
 84001a4:	dfc00117 	ldw	ra,4(sp)
 84001a8:	df000017 	ldw	fp,0(sp)
 84001ac:	dec00204 	addi	sp,sp,8
 84001b0:	f800283a 	ret

Disassembly of section .text:

084001b4 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
 84001b4:	00810014 	movui	r2,1024
#endif

0:
    initd 0(r2)
 84001b8:	10000033 	initd	0(r2)
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
 84001bc:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
 84001c0:	00bffd16 	blt	zero,r2,84001b8 <_start+0x4>
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 84001c4:	06c22034 	movhi	sp,2176
    ori sp, sp, %lo(__alt_stack_pointer)
 84001c8:	dec00014 	ori	sp,sp,0

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
 84001cc:	06821074 	movhi	gp,2113
    ori gp, gp, %lo(_gp)
 84001d0:	d6ae4e14 	ori	gp,gp,47416
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 84001d4:	00821074 	movhi	r2,2113
    ori r2, r2, %lo(__bss_start)
 84001d8:	10955614 	ori	r2,r2,21848

    movhi r3, %hi(__bss_end)
 84001dc:	00c21074 	movhi	r3,2113
    ori r3, r3, %lo(__bss_end)
 84001e0:	18d61914 	ori	r3,r3,22628

    beq r2, r3, 1f
 84001e4:	10c00326 	beq	r2,r3,84001f4 <_start+0x40>

0:
    stw zero, (r2)
 84001e8:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 84001ec:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 84001f0:	10fffd36 	bltu	r2,r3,84001e8 <_start+0x34>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 84001f4:	840d25c0 	call	840d25c <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 84001f8:	840d4980 	call	840d498 <alt_main>

084001fc <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 84001fc:	003fff06 	br	84001fc <alt_after_alt_main>

08400200 <main>:
void barrier(int id);
void pend(alt_mailbox_dev* box);
void post(int id, alt_u32 mess);


int main() {
 8400200:	deffe704 	addi	sp,sp,-100
 8400204:	dfc01815 	stw	ra,96(sp)
 8400208:	df001715 	stw	fp,92(sp)
 840020c:	dc401615 	stw	r17,88(sp)
 8400210:	dc001515 	stw	r16,84(sp)
 8400214:	df001504 	addi	fp,sp,84

	mailbox_0 = altera_avalon_mailbox_open("/dev/mailbox_0");
 8400218:	01021074 	movhi	r4,2113
 840021c:	21060c04 	addi	r4,r4,6192
 8400220:	840e9140 	call	840e914 <altera_avalon_mailbox_open>
 8400224:	d0a70915 	stw	r2,-25564(gp)
	mailbox_1 = altera_avalon_mailbox_open("/dev/mailbox_1");
 8400228:	01021074 	movhi	r4,2113
 840022c:	21061004 	addi	r4,r4,6208
 8400230:	840e9140 	call	840e914 <altera_avalon_mailbox_open>
 8400234:	d0a70b15 	stw	r2,-25556(gp)
	mailbox_2 = altera_avalon_mailbox_open("/dev/mailbox_2");
 8400238:	01021074 	movhi	r4,2113
 840023c:	21061404 	addi	r4,r4,6224
 8400240:	840e9140 	call	840e914 <altera_avalon_mailbox_open>
 8400244:	d0a70a15 	stw	r2,-25560(gp)
	mailbox_3 = altera_avalon_mailbox_open("/dev/mailbox_3");
 8400248:	01021074 	movhi	r4,2113
 840024c:	21061804 	addi	r4,r4,6240
 8400250:	840e9140 	call	840e914 <altera_avalon_mailbox_open>
 8400254:	d0a70e15 	stw	r2,-25544(gp)

	int cpuid = __builtin_rdctl(5);
 8400258:	0005317a 	rdctl	r2,cpuid
 840025c:	e0bffe15 	stw	r2,-8(fp)

	barrier(cpuid);
 8400260:	e13ffe17 	ldw	r4,-8(fp)
 8400264:	8400a500 	call	8400a50 <barrier>
	alt_up_pixel_buffer_dma_dev *my_pixel_buffer; //declare global var
	my_pixel_buffer=alt_up_pixel_buffer_dma_open_dev("/dev/video_pixel_buffer_dma_0"); //assign it
 8400268:	01021074 	movhi	r4,2113
 840026c:	21061c04 	addi	r4,r4,6256
 8400270:	840ef1c0 	call	840ef1c <alt_up_pixel_buffer_dma_open_dev>
 8400274:	e0bffd15 	stw	r2,-12(fp)
	alt_up_pixel_buffer_dma_clear_screen(my_pixel_buffer,0);//clear_screen();
 8400278:	e13ffd17 	ldw	r4,-12(fp)
 840027c:	000b883a 	mov	r5,zero
 8400280:	840f1e00 	call	840f1e0 <alt_up_pixel_buffer_dma_clear_screen>

	int zoom = 1;
 8400284:	00800044 	movi	r2,1
 8400288:	e0bffc15 	stw	r2,-16(fp)
	float min_x, max_x, min_y, max_y;
	min_x = -2.5;
 840028c:	00b00834 	movhi	r2,49184
 8400290:	e0bffb15 	stw	r2,-20(fp)
	max_x = 1.0;
 8400294:	008fe034 	movhi	r2,16256
 8400298:	e0bffa15 	stw	r2,-24(fp)
	min_y = -1.0;
 840029c:	00afe034 	movhi	r2,49024
 84002a0:	e0bff915 	stw	r2,-28(fp)
	max_y = 1.0;
 84002a4:	008fe034 	movhi	r2,16256
 84002a8:	e0bff815 	stw	r2,-32(fp)
	float x, y, z;
	float x0, y0;
	float target_x, target_y, xtemp;
	int iteration;
	int is_target; //false
	int first_pass = 0; // on the first pass
 84002ac:	e03feb15 	stw	zero,-84(fp)

	//barrier(cpuid);
	while (1) {
		is_target = 0;
 84002b0:	e03fec15 	stw	zero,-80(fp)
		for (i = cpuid; i < num_rows; i+=4) {
 84002b4:	e0bffe17 	ldw	r2,-8(fp)
 84002b8:	e0bff715 	stw	r2,-36(fp)
 84002bc:	00014206 	br	84007c8 <main+0x5c8>
			for (j = 0; j < num_cols; j++) {
 84002c0:	e03ff615 	stw	zero,-40(fp)
 84002c4:	00013806 	br	84007a8 <main+0x5a8>
				x = 0;
 84002c8:	e03ff515 	stw	zero,-44(fp)
				y = 0;
 84002cc:	e03ff415 	stw	zero,-48(fp)
				z = 0;
 84002d0:	e03ff315 	stw	zero,-52(fp)
				x0 = j/320.0*(max_x - min_x) + min_x;
 84002d4:	e13ff617 	ldw	r4,-40(fp)
 84002d8:	84030ec0 	call	84030ec <__floatsisf>
 84002dc:	1009883a 	mov	r4,r2
 84002e0:	0150e834 	movhi	r5,17312
 84002e4:	8402e880 	call	8402e88 <__divsf3>
 84002e8:	1009883a 	mov	r4,r2
 84002ec:	e0fffa17 	ldw	r3,-24(fp)
 84002f0:	e0bffb17 	ldw	r2,-20(fp)
 84002f4:	1885ffb2 	custom	254,r2,r3,r2
 84002f8:	2087ff32 	custom	252,r3,r4,r2
 84002fc:	e0bffb17 	ldw	r2,-20(fp)
 8400300:	1885ff72 	custom	253,r2,r3,r2
 8400304:	e0bff215 	stw	r2,-56(fp)
				y0 = (239.0-i)/240.0*(max_y - min_y) + min_y;
 8400308:	e13ff717 	ldw	r4,-36(fp)
 840030c:	84030ec0 	call	84030ec <__floatsisf>
 8400310:	1007883a 	mov	r3,r2
 8400314:	0090dbf4 	movhi	r2,17263
 8400318:	10c5ffb2 	custom	254,r2,r2,r3
 840031c:	1009883a 	mov	r4,r2
 8400320:	0150dc34 	movhi	r5,17264
 8400324:	8402e880 	call	8402e88 <__divsf3>
 8400328:	1009883a 	mov	r4,r2
 840032c:	e0fff817 	ldw	r3,-32(fp)
 8400330:	e0bff917 	ldw	r2,-28(fp)
 8400334:	1885ffb2 	custom	254,r2,r3,r2
 8400338:	2087ff32 	custom	252,r3,r4,r2
 840033c:	e0bff917 	ldw	r2,-28(fp)
 8400340:	1885ff72 	custom	253,r2,r3,r2
 8400344:	e0bff115 	stw	r2,-60(fp)
				iteration = 0;
 8400348:	e03fed15 	stw	zero,-76(fp)

				while( (x*x + y*y) <= 4 && iteration < 500) {
 840034c:	0000db06 	br	84006bc <main+0x4bc>
					xtemp = x*x - y*y + x0;
 8400350:	e0fff517 	ldw	r3,-44(fp)
 8400354:	e0bff517 	ldw	r2,-44(fp)
 8400358:	1889ff32 	custom	252,r4,r3,r2
 840035c:	e0fff417 	ldw	r3,-48(fp)
 8400360:	e0bff417 	ldw	r2,-48(fp)
 8400364:	1885ff32 	custom	252,r2,r3,r2
 8400368:	2087ffb2 	custom	254,r3,r4,r2
 840036c:	e0bff217 	ldw	r2,-56(fp)
 8400370:	1885ff72 	custom	253,r2,r3,r2
 8400374:	e0bfee15 	stw	r2,-72(fp)
					y = 2*x*y + y0;
 8400378:	e0bff517 	ldw	r2,-44(fp)
 840037c:	1087ff72 	custom	253,r3,r2,r2
 8400380:	e0bff417 	ldw	r2,-48(fp)
 8400384:	1887ff32 	custom	252,r3,r3,r2
 8400388:	e0bff117 	ldw	r2,-60(fp)
 840038c:	1885ff72 	custom	253,r2,r3,r2
 8400390:	e0bff415 	stw	r2,-48(fp)
					x = xtemp;
 8400394:	e0bfee17 	ldw	r2,-72(fp)
 8400398:	e0bff515 	stw	r2,-44(fp)
					iteration++;
 840039c:	e0bfed17 	ldw	r2,-76(fp)
 84003a0:	10800044 	addi	r2,r2,1
 84003a4:	e0bfed15 	stw	r2,-76(fp)

					if(iteration == 450 && first_pass == 0) {
 84003a8:	e0bfed17 	ldw	r2,-76(fp)
 84003ac:	10807098 	cmpnei	r2,r2,450
 84003b0:	1000c21e 	bne	r2,zero,84006bc <main+0x4bc>
 84003b4:	e0bfeb17 	ldw	r2,-84(fp)
 84003b8:	1004c03a 	cmpne	r2,r2,zero
 84003bc:	1000bf1e 	bne	r2,zero,84006bc <main+0x4bc>
						printf("FIRST PASS COMPLETE\n");
 84003c0:	01021074 	movhi	r4,2113
 84003c4:	21062404 	addi	r4,r4,6288
 84003c8:	8404e340 	call	8404e34 <puts>
						first_pass = 1;
 84003cc:	00800044 	movi	r2,1
 84003d0:	e0bfeb15 	stw	r2,-84(fp)
						if(cpuid == 0 && is_target == 0){
 84003d4:	e0bffe17 	ldw	r2,-8(fp)
 84003d8:	1004c03a 	cmpne	r2,r2,zero
 84003dc:	1000481e 	bne	r2,zero,8400500 <main+0x300>
 84003e0:	e0bfec17 	ldw	r2,-80(fp)
 84003e4:	1004c03a 	cmpne	r2,r2,zero
 84003e8:	1000451e 	bne	r2,zero,8400500 <main+0x300>
							printf("set target x and y for zoom \n");
 84003ec:	01021074 	movhi	r4,2113
 84003f0:	21062904 	addi	r4,r4,6308
 84003f4:	8404e340 	call	8404e34 <puts>
							is_target = 1;
 84003f8:	00800044 	movi	r2,1
 84003fc:	e0bfec15 	stw	r2,-80(fp)
							target_x = x0;
 8400400:	e0bff217 	ldw	r2,-56(fp)
 8400404:	e0bff015 	stw	r2,-64(fp)
							target_y = y0;
 8400408:	e0bff117 	ldw	r2,-60(fp)
 840040c:	e0bfef15 	stw	r2,-68(fp)
							//comment out from here to the other dotted line to get rid of the zoom stuff
							//if you run it with no zoom you'll notice I was able to adjust the barriers and
							//smooth out the drawing of the frame so that certain CPUs don't pull ahead
							//*------------
							printf("target_x: %f...", target_x);
 8400410:	e13ff017 	ldw	r4,-64(fp)
 8400414:	84032180 	call	8403218 <__extendsfdf2>
 8400418:	100d883a 	mov	r6,r2
 840041c:	180f883a 	mov	r7,r3
 8400420:	01021074 	movhi	r4,2113
 8400424:	21063104 	addi	r4,r4,6340
 8400428:	300b883a 	mov	r5,r6
 840042c:	380d883a 	mov	r6,r7
 8400430:	8404d1c0 	call	8404d1c <printf>
							printf("target_y: %f\n", target_y);
 8400434:	e13fef17 	ldw	r4,-68(fp)
 8400438:	84032180 	call	8403218 <__extendsfdf2>
 840043c:	100d883a 	mov	r6,r2
 8400440:	180f883a 	mov	r7,r3
 8400444:	01021074 	movhi	r4,2113
 8400448:	21063504 	addi	r4,r4,6356
 840044c:	300b883a 	mov	r5,r6
 8400450:	380d883a 	mov	r6,r7
 8400454:	8404d1c0 	call	8404d1c <printf>
							 *
							 *
							 *
							 */

							altera_avalon_mailbox_post(mailbox_1, target_x);
 8400458:	d4270b17 	ldw	r16,-25556(gp)
 840045c:	e13ff017 	ldw	r4,-64(fp)
 8400460:	8402b600 	call	8402b60 <__fixunssfsi>
 8400464:	100b883a 	mov	r5,r2
 8400468:	8009883a 	mov	r4,r16
 840046c:	840e98c0 	call	840e98c <altera_avalon_mailbox_post>
							altera_avalon_mailbox_post(mailbox_2, target_x);
 8400470:	d4270a17 	ldw	r16,-25560(gp)
 8400474:	e13ff017 	ldw	r4,-64(fp)
 8400478:	8402b600 	call	8402b60 <__fixunssfsi>
 840047c:	100b883a 	mov	r5,r2
 8400480:	8009883a 	mov	r4,r16
 8400484:	840e98c0 	call	840e98c <altera_avalon_mailbox_post>
							altera_avalon_mailbox_post(mailbox_3, target_x);
 8400488:	d4270e17 	ldw	r16,-25544(gp)
 840048c:	e13ff017 	ldw	r4,-64(fp)
 8400490:	8402b600 	call	8402b60 <__fixunssfsi>
 8400494:	100b883a 	mov	r5,r2
 8400498:	8009883a 	mov	r4,r16
 840049c:	840e98c0 	call	840e98c <altera_avalon_mailbox_post>
							altera_avalon_mailbox_post(mailbox_1, target_y);
 84004a0:	d4270b17 	ldw	r16,-25556(gp)
 84004a4:	e13fef17 	ldw	r4,-68(fp)
 84004a8:	8402b600 	call	8402b60 <__fixunssfsi>
 84004ac:	100b883a 	mov	r5,r2
 84004b0:	8009883a 	mov	r4,r16
 84004b4:	840e98c0 	call	840e98c <altera_avalon_mailbox_post>
							altera_avalon_mailbox_post(mailbox_2, target_y);
 84004b8:	d4270a17 	ldw	r16,-25560(gp)
 84004bc:	e13fef17 	ldw	r4,-68(fp)
 84004c0:	8402b600 	call	8402b60 <__fixunssfsi>
 84004c4:	100b883a 	mov	r5,r2
 84004c8:	8009883a 	mov	r4,r16
 84004cc:	840e98c0 	call	840e98c <altera_avalon_mailbox_post>
							altera_avalon_mailbox_post(mailbox_3, target_y);
 84004d0:	d4270e17 	ldw	r16,-25544(gp)
 84004d4:	e13fef17 	ldw	r4,-68(fp)
 84004d8:	8402b600 	call	8402b60 <__fixunssfsi>
 84004dc:	100b883a 	mov	r5,r2
 84004e0:	8009883a 	mov	r4,r16
 84004e4:	840e98c0 	call	840e98c <altera_avalon_mailbox_post>
							//pend mailbox 0 until the other 3 boxes have posted
							altera_avalon_mailbox_pend(mailbox_0);
 84004e8:	d1270917 	ldw	r4,-25564(gp)
 84004ec:	840ea980 	call	840ea98 <altera_avalon_mailbox_pend>
							altera_avalon_mailbox_pend(mailbox_0);
 84004f0:	d1270917 	ldw	r4,-25564(gp)
 84004f4:	840ea980 	call	840ea98 <altera_avalon_mailbox_pend>
							altera_avalon_mailbox_pend(mailbox_0);
 84004f8:	d1270917 	ldw	r4,-25564(gp)
 84004fc:	840ea980 	call	840ea98 <altera_avalon_mailbox_pend>
						}
						if(cpuid == 1){
 8400500:	e0bffe17 	ldw	r2,-8(fp)
 8400504:	10800058 	cmpnei	r2,r2,1
 8400508:	1000221e 	bne	r2,zero,8400594 <main+0x394>
							printf("mailbox_1 pending\n");
 840050c:	01021074 	movhi	r4,2113
 8400510:	21063904 	addi	r4,r4,6372
 8400514:	8404e340 	call	8404e34 <puts>
							target_x = altera_avalon_mailbox_pend(mailbox_1);
 8400518:	d1270b17 	ldw	r4,-25556(gp)
 840051c:	840ea980 	call	840ea98 <altera_avalon_mailbox_pend>
 8400520:	1009883a 	mov	r4,r2
 8400524:	840326c0 	call	840326c <__floatunsisf>
 8400528:	e0bff015 	stw	r2,-64(fp)
							target_y = altera_avalon_mailbox_pend(mailbox_1);
 840052c:	d1270b17 	ldw	r4,-25556(gp)
 8400530:	840ea980 	call	840ea98 <altera_avalon_mailbox_pend>
 8400534:	1009883a 	mov	r4,r2
 8400538:	840326c0 	call	840326c <__floatunsisf>
 840053c:	e0bfef15 	stw	r2,-68(fp)
							printf("target_x: %f...", target_x);
 8400540:	e13ff017 	ldw	r4,-64(fp)
 8400544:	84032180 	call	8403218 <__extendsfdf2>
 8400548:	100d883a 	mov	r6,r2
 840054c:	180f883a 	mov	r7,r3
 8400550:	01021074 	movhi	r4,2113
 8400554:	21063104 	addi	r4,r4,6340
 8400558:	300b883a 	mov	r5,r6
 840055c:	380d883a 	mov	r6,r7
 8400560:	8404d1c0 	call	8404d1c <printf>
							printf("target_y: %f\n", target_y);
 8400564:	e13fef17 	ldw	r4,-68(fp)
 8400568:	84032180 	call	8403218 <__extendsfdf2>
 840056c:	100d883a 	mov	r6,r2
 8400570:	180f883a 	mov	r7,r3
 8400574:	01021074 	movhi	r4,2113
 8400578:	21063504 	addi	r4,r4,6356
 840057c:	300b883a 	mov	r5,r6
 8400580:	380d883a 	mov	r6,r7
 8400584:	8404d1c0 	call	8404d1c <printf>
							altera_avalon_mailbox_post(mailbox_0, message);
 8400588:	d1270917 	ldw	r4,-25564(gp)
 840058c:	d1670817 	ldw	r5,-25568(gp)
 8400590:	840e98c0 	call	840e98c <altera_avalon_mailbox_post>
						}
						if(cpuid == 2){
 8400594:	e0bffe17 	ldw	r2,-8(fp)
 8400598:	10800098 	cmpnei	r2,r2,2
 840059c:	1000221e 	bne	r2,zero,8400628 <main+0x428>
							printf("mailbox_2 pending\n");
 84005a0:	01021074 	movhi	r4,2113
 84005a4:	21063e04 	addi	r4,r4,6392
 84005a8:	8404e340 	call	8404e34 <puts>
							target_x = altera_avalon_mailbox_pend(mailbox_2);
 84005ac:	d1270a17 	ldw	r4,-25560(gp)
 84005b0:	840ea980 	call	840ea98 <altera_avalon_mailbox_pend>
 84005b4:	1009883a 	mov	r4,r2
 84005b8:	840326c0 	call	840326c <__floatunsisf>
 84005bc:	e0bff015 	stw	r2,-64(fp)
							target_y = altera_avalon_mailbox_pend(mailbox_2);
 84005c0:	d1270a17 	ldw	r4,-25560(gp)
 84005c4:	840ea980 	call	840ea98 <altera_avalon_mailbox_pend>
 84005c8:	1009883a 	mov	r4,r2
 84005cc:	840326c0 	call	840326c <__floatunsisf>
 84005d0:	e0bfef15 	stw	r2,-68(fp)
							printf("target_x: %f...", target_x);
 84005d4:	e13ff017 	ldw	r4,-64(fp)
 84005d8:	84032180 	call	8403218 <__extendsfdf2>
 84005dc:	100d883a 	mov	r6,r2
 84005e0:	180f883a 	mov	r7,r3
 84005e4:	01021074 	movhi	r4,2113
 84005e8:	21063104 	addi	r4,r4,6340
 84005ec:	300b883a 	mov	r5,r6
 84005f0:	380d883a 	mov	r6,r7
 84005f4:	8404d1c0 	call	8404d1c <printf>
							printf("target_y: %f\n", target_y);
 84005f8:	e13fef17 	ldw	r4,-68(fp)
 84005fc:	84032180 	call	8403218 <__extendsfdf2>
 8400600:	100d883a 	mov	r6,r2
 8400604:	180f883a 	mov	r7,r3
 8400608:	01021074 	movhi	r4,2113
 840060c:	21063504 	addi	r4,r4,6356
 8400610:	300b883a 	mov	r5,r6
 8400614:	380d883a 	mov	r6,r7
 8400618:	8404d1c0 	call	8404d1c <printf>
							altera_avalon_mailbox_post(mailbox_0, message);
 840061c:	d1270917 	ldw	r4,-25564(gp)
 8400620:	d1670817 	ldw	r5,-25568(gp)
 8400624:	840e98c0 	call	840e98c <altera_avalon_mailbox_post>
						}
						if(cpuid == 3){
 8400628:	e0bffe17 	ldw	r2,-8(fp)
 840062c:	108000d8 	cmpnei	r2,r2,3
 8400630:	1000221e 	bne	r2,zero,84006bc <main+0x4bc>
							printf("mailbox_3 pending\n");
 8400634:	01021074 	movhi	r4,2113
 8400638:	21064304 	addi	r4,r4,6412
 840063c:	8404e340 	call	8404e34 <puts>
							target_x = altera_avalon_mailbox_pend(mailbox_3);
 8400640:	d1270e17 	ldw	r4,-25544(gp)
 8400644:	840ea980 	call	840ea98 <altera_avalon_mailbox_pend>
 8400648:	1009883a 	mov	r4,r2
 840064c:	840326c0 	call	840326c <__floatunsisf>
 8400650:	e0bff015 	stw	r2,-64(fp)
							target_y = altera_avalon_mailbox_pend(mailbox_3);
 8400654:	d1270e17 	ldw	r4,-25544(gp)
 8400658:	840ea980 	call	840ea98 <altera_avalon_mailbox_pend>
 840065c:	1009883a 	mov	r4,r2
 8400660:	840326c0 	call	840326c <__floatunsisf>
 8400664:	e0bfef15 	stw	r2,-68(fp)
							printf("target_x: %f...", target_x);
 8400668:	e13ff017 	ldw	r4,-64(fp)
 840066c:	84032180 	call	8403218 <__extendsfdf2>
 8400670:	100d883a 	mov	r6,r2
 8400674:	180f883a 	mov	r7,r3
 8400678:	01021074 	movhi	r4,2113
 840067c:	21063104 	addi	r4,r4,6340
 8400680:	300b883a 	mov	r5,r6
 8400684:	380d883a 	mov	r6,r7
 8400688:	8404d1c0 	call	8404d1c <printf>
							printf("target_y: %f\n", target_y);
 840068c:	e13fef17 	ldw	r4,-68(fp)
 8400690:	84032180 	call	8403218 <__extendsfdf2>
 8400694:	100d883a 	mov	r6,r2
 8400698:	180f883a 	mov	r7,r3
 840069c:	01021074 	movhi	r4,2113
 84006a0:	21063504 	addi	r4,r4,6356
 84006a4:	300b883a 	mov	r5,r6
 84006a8:	380d883a 	mov	r6,r7
 84006ac:	8404d1c0 	call	8404d1c <printf>
							altera_avalon_mailbox_post(mailbox_0, message);
 84006b0:	d1270917 	ldw	r4,-25564(gp)
 84006b4:	d1670817 	ldw	r5,-25568(gp)
 84006b8:	840e98c0 	call	840e98c <altera_avalon_mailbox_post>
				z = 0;
				x0 = j/320.0*(max_x - min_x) + min_x;
				y0 = (239.0-i)/240.0*(max_y - min_y) + min_y;
				iteration = 0;

				while( (x*x + y*y) <= 4 && iteration < 500) {
 84006bc:	e0fff517 	ldw	r3,-44(fp)
 84006c0:	e0bff517 	ldw	r2,-44(fp)
 84006c4:	1889ff32 	custom	252,r4,r3,r2
 84006c8:	e0fff417 	ldw	r3,-48(fp)
 84006cc:	e0bff417 	ldw	r2,-48(fp)
 84006d0:	1885ff32 	custom	252,r2,r3,r2
 84006d4:	2085ff72 	custom	253,r2,r4,r2
 84006d8:	e03fff05 	stb	zero,-4(fp)
 84006dc:	1009883a 	mov	r4,r2
 84006e0:	01502034 	movhi	r5,16512
 84006e4:	84030740 	call	8403074 <__lesf2>
 84006e8:	10800050 	cmplti	r2,r2,1
 84006ec:	1000011e 	bne	r2,zero,84006f4 <main+0x4f4>
 84006f0:	00000206 	br	84006fc <main+0x4fc>
 84006f4:	00800044 	movi	r2,1
 84006f8:	e0bfff05 	stb	r2,-4(fp)
 84006fc:	e0ffff03 	ldbu	r3,-4(fp)
 8400700:	1880005c 	xori	r2,r3,1
 8400704:	10803fcc 	andi	r2,r2,255
 8400708:	1004c03a 	cmpne	r2,r2,zero
 840070c:	1000031e 	bne	r2,zero,840071c <main+0x51c>
 8400710:	e0bfed17 	ldw	r2,-76(fp)
 8400714:	10807d10 	cmplti	r2,r2,500
 8400718:	103f0d1e 	bne	r2,zero,8400350 <main+0x150>
						}
					}

				}
				//printf("Iteration: %d\n", iteration);
				if(iteration == 500) {
 840071c:	e0bfed17 	ldw	r2,-76(fp)
 8400720:	10807d18 	cmpnei	r2,r2,500
 8400724:	1000061e 	bne	r2,zero,8400740 <main+0x540>
					alt_up_pixel_buffer_dma_draw(my_pixel_buffer, 0,j,i );
 8400728:	e1bff617 	ldw	r6,-40(fp)
 840072c:	e1fff717 	ldw	r7,-36(fp)
 8400730:	e13ffd17 	ldw	r4,-12(fp)
 8400734:	000b883a 	mov	r5,zero
 8400738:	840ef5c0 	call	840ef5c <alt_up_pixel_buffer_dma_draw>
 840073c:	00001706 	br	840079c <main+0x59c>
				} else {
					alt_up_pixel_buffer_dma_draw(my_pixel_buffer, (iteration*8/zoom) + (iteration*4/zoom) +(iteration*2/zoom), j, i);
 8400740:	e0bfed17 	ldw	r2,-76(fp)
 8400744:	100890fa 	slli	r4,r2,3
 8400748:	e17ffc17 	ldw	r5,-16(fp)
 840074c:	84043140 	call	8404314 <__divsi3>
 8400750:	1021883a 	mov	r16,r2
 8400754:	e0bfed17 	ldw	r2,-76(fp)
 8400758:	1085883a 	add	r2,r2,r2
 840075c:	1085883a 	add	r2,r2,r2
 8400760:	1009883a 	mov	r4,r2
 8400764:	e17ffc17 	ldw	r5,-16(fp)
 8400768:	84043140 	call	8404314 <__divsi3>
 840076c:	80a1883a 	add	r16,r16,r2
 8400770:	e0bfed17 	ldw	r2,-76(fp)
 8400774:	1085883a 	add	r2,r2,r2
 8400778:	1009883a 	mov	r4,r2
 840077c:	e17ffc17 	ldw	r5,-16(fp)
 8400780:	84043140 	call	8404314 <__divsi3>
 8400784:	8085883a 	add	r2,r16,r2
 8400788:	100b883a 	mov	r5,r2
 840078c:	e1bff617 	ldw	r6,-40(fp)
 8400790:	e1fff717 	ldw	r7,-36(fp)
 8400794:	e13ffd17 	ldw	r4,-12(fp)
 8400798:	840ef5c0 	call	840ef5c <alt_up_pixel_buffer_dma_draw>

	//barrier(cpuid);
	while (1) {
		is_target = 0;
		for (i = cpuid; i < num_rows; i+=4) {
			for (j = 0; j < num_cols; j++) {
 840079c:	e0bff617 	ldw	r2,-40(fp)
 84007a0:	10800044 	addi	r2,r2,1
 84007a4:	e0bff615 	stw	r2,-40(fp)
 84007a8:	d0e00117 	ldw	r3,-32764(gp)
 84007ac:	e0bff617 	ldw	r2,-40(fp)
 84007b0:	10fec516 	blt	r2,r3,84002c8 <main+0xc8>
				} else {
					alt_up_pixel_buffer_dma_draw(my_pixel_buffer, (iteration*8/zoom) + (iteration*4/zoom) +(iteration*2/zoom), j, i);
				}
				//barrier(cpuid);
			}
			barrier(cpuid);
 84007b4:	e13ffe17 	ldw	r4,-8(fp)
 84007b8:	8400a500 	call	8400a50 <barrier>
	int first_pass = 0; // on the first pass

	//barrier(cpuid);
	while (1) {
		is_target = 0;
		for (i = cpuid; i < num_rows; i+=4) {
 84007bc:	e0bff717 	ldw	r2,-36(fp)
 84007c0:	10800104 	addi	r2,r2,4
 84007c4:	e0bff715 	stw	r2,-36(fp)
 84007c8:	d0e00017 	ldw	r3,-32768(gp)
 84007cc:	e0bff717 	ldw	r2,-36(fp)
 84007d0:	10febb16 	blt	r2,r3,84002c0 <main+0xc0>
				//barrier(cpuid);
			}
			barrier(cpuid);
		}

		barrier(cpuid);
 84007d4:	e13ffe17 	ldw	r4,-8(fp)
 84007d8:	8400a500 	call	8400a50 <barrier>
		min_x = target_x - (1/(pow(1.5, zoom)));
 84007dc:	e13ff017 	ldw	r4,-64(fp)
 84007e0:	84032180 	call	8403218 <__extendsfdf2>
 84007e4:	1021883a 	mov	r16,r2
 84007e8:	1823883a 	mov	r17,r3
 84007ec:	e13ffc17 	ldw	r4,-16(fp)
 84007f0:	84040f40 	call	84040f4 <__floatsidf>
 84007f4:	100f883a 	mov	r7,r2
 84007f8:	1811883a 	mov	r8,r3
 84007fc:	0009883a 	mov	r4,zero
 8400800:	014ffe34 	movhi	r5,16376
 8400804:	380d883a 	mov	r6,r7
 8400808:	400f883a 	mov	r7,r8
 840080c:	8400c800 	call	8400c80 <pow>
 8400810:	1009883a 	mov	r4,r2
 8400814:	180b883a 	mov	r5,r3
 8400818:	2005883a 	mov	r2,r4
 840081c:	2807883a 	mov	r3,r5
 8400820:	0009883a 	mov	r4,zero
 8400824:	016ffc34 	movhi	r5,49136
 8400828:	100d883a 	mov	r6,r2
 840082c:	180f883a 	mov	r7,r3
 8400830:	8403bf40 	call	8403bf4 <__divdf3>
 8400834:	1009883a 	mov	r4,r2
 8400838:	180b883a 	mov	r5,r3
 840083c:	2005883a 	mov	r2,r4
 8400840:	2807883a 	mov	r3,r5
 8400844:	8009883a 	mov	r4,r16
 8400848:	880b883a 	mov	r5,r17
 840084c:	100d883a 	mov	r6,r2
 8400850:	180f883a 	mov	r7,r3
 8400854:	84037bc0 	call	84037bc <__adddf3>
 8400858:	1009883a 	mov	r4,r2
 840085c:	180b883a 	mov	r5,r3
 8400860:	2005883a 	mov	r2,r4
 8400864:	2807883a 	mov	r3,r5
 8400868:	1009883a 	mov	r4,r2
 840086c:	180b883a 	mov	r5,r3
 8400870:	84042240 	call	8404224 <__truncdfsf2>
 8400874:	e0bffb15 	stw	r2,-20(fp)
		max_x = target_x + (1/(pow(1.5, zoom)));
 8400878:	e13ff017 	ldw	r4,-64(fp)
 840087c:	84032180 	call	8403218 <__extendsfdf2>
 8400880:	1021883a 	mov	r16,r2
 8400884:	1823883a 	mov	r17,r3
 8400888:	e13ffc17 	ldw	r4,-16(fp)
 840088c:	84040f40 	call	84040f4 <__floatsidf>
 8400890:	100f883a 	mov	r7,r2
 8400894:	1811883a 	mov	r8,r3
 8400898:	0009883a 	mov	r4,zero
 840089c:	014ffe34 	movhi	r5,16376
 84008a0:	380d883a 	mov	r6,r7
 84008a4:	400f883a 	mov	r7,r8
 84008a8:	8400c800 	call	8400c80 <pow>
 84008ac:	100f883a 	mov	r7,r2
 84008b0:	1811883a 	mov	r8,r3
 84008b4:	0009883a 	mov	r4,zero
 84008b8:	014ffc34 	movhi	r5,16368
 84008bc:	380d883a 	mov	r6,r7
 84008c0:	400f883a 	mov	r7,r8
 84008c4:	8403bf40 	call	8403bf4 <__divdf3>
 84008c8:	1009883a 	mov	r4,r2
 84008cc:	180b883a 	mov	r5,r3
 84008d0:	2005883a 	mov	r2,r4
 84008d4:	2807883a 	mov	r3,r5
 84008d8:	8009883a 	mov	r4,r16
 84008dc:	880b883a 	mov	r5,r17
 84008e0:	100d883a 	mov	r6,r2
 84008e4:	180f883a 	mov	r7,r3
 84008e8:	84037bc0 	call	84037bc <__adddf3>
 84008ec:	1009883a 	mov	r4,r2
 84008f0:	180b883a 	mov	r5,r3
 84008f4:	2005883a 	mov	r2,r4
 84008f8:	2807883a 	mov	r3,r5
 84008fc:	1009883a 	mov	r4,r2
 8400900:	180b883a 	mov	r5,r3
 8400904:	84042240 	call	8404224 <__truncdfsf2>
 8400908:	e0bffa15 	stw	r2,-24(fp)
		min_y = target_y - (0.75/(pow(1.5, zoom)));
 840090c:	e13fef17 	ldw	r4,-68(fp)
 8400910:	84032180 	call	8403218 <__extendsfdf2>
 8400914:	1021883a 	mov	r16,r2
 8400918:	1823883a 	mov	r17,r3
 840091c:	e13ffc17 	ldw	r4,-16(fp)
 8400920:	84040f40 	call	84040f4 <__floatsidf>
 8400924:	100f883a 	mov	r7,r2
 8400928:	1811883a 	mov	r8,r3
 840092c:	0009883a 	mov	r4,zero
 8400930:	014ffe34 	movhi	r5,16376
 8400934:	380d883a 	mov	r6,r7
 8400938:	400f883a 	mov	r7,r8
 840093c:	8400c800 	call	8400c80 <pow>
 8400940:	100f883a 	mov	r7,r2
 8400944:	1811883a 	mov	r8,r3
 8400948:	0009883a 	mov	r4,zero
 840094c:	016ffa34 	movhi	r5,49128
 8400950:	380d883a 	mov	r6,r7
 8400954:	400f883a 	mov	r7,r8
 8400958:	8403bf40 	call	8403bf4 <__divdf3>
 840095c:	1009883a 	mov	r4,r2
 8400960:	180b883a 	mov	r5,r3
 8400964:	2005883a 	mov	r2,r4
 8400968:	2807883a 	mov	r3,r5
 840096c:	8009883a 	mov	r4,r16
 8400970:	880b883a 	mov	r5,r17
 8400974:	100d883a 	mov	r6,r2
 8400978:	180f883a 	mov	r7,r3
 840097c:	84037bc0 	call	84037bc <__adddf3>
 8400980:	1009883a 	mov	r4,r2
 8400984:	180b883a 	mov	r5,r3
 8400988:	2005883a 	mov	r2,r4
 840098c:	2807883a 	mov	r3,r5
 8400990:	1009883a 	mov	r4,r2
 8400994:	180b883a 	mov	r5,r3
 8400998:	84042240 	call	8404224 <__truncdfsf2>
 840099c:	e0bff915 	stw	r2,-28(fp)
		max_y = target_y + (0.75/(pow(1.5, zoom)));
 84009a0:	e13fef17 	ldw	r4,-68(fp)
 84009a4:	84032180 	call	8403218 <__extendsfdf2>
 84009a8:	1021883a 	mov	r16,r2
 84009ac:	1823883a 	mov	r17,r3
 84009b0:	e13ffc17 	ldw	r4,-16(fp)
 84009b4:	84040f40 	call	84040f4 <__floatsidf>
 84009b8:	100f883a 	mov	r7,r2
 84009bc:	1811883a 	mov	r8,r3
 84009c0:	0009883a 	mov	r4,zero
 84009c4:	014ffe34 	movhi	r5,16376
 84009c8:	380d883a 	mov	r6,r7
 84009cc:	400f883a 	mov	r7,r8
 84009d0:	8400c800 	call	8400c80 <pow>
 84009d4:	100f883a 	mov	r7,r2
 84009d8:	1811883a 	mov	r8,r3
 84009dc:	0009883a 	mov	r4,zero
 84009e0:	014ffa34 	movhi	r5,16360
 84009e4:	380d883a 	mov	r6,r7
 84009e8:	400f883a 	mov	r7,r8
 84009ec:	8403bf40 	call	8403bf4 <__divdf3>
 84009f0:	1009883a 	mov	r4,r2
 84009f4:	180b883a 	mov	r5,r3
 84009f8:	2005883a 	mov	r2,r4
 84009fc:	2807883a 	mov	r3,r5
 8400a00:	8009883a 	mov	r4,r16
 8400a04:	880b883a 	mov	r5,r17
 8400a08:	100d883a 	mov	r6,r2
 8400a0c:	180f883a 	mov	r7,r3
 8400a10:	84037bc0 	call	84037bc <__adddf3>
 8400a14:	1009883a 	mov	r4,r2
 8400a18:	180b883a 	mov	r5,r3
 8400a1c:	2005883a 	mov	r2,r4
 8400a20:	2807883a 	mov	r3,r5
 8400a24:	1009883a 	mov	r4,r2
 8400a28:	180b883a 	mov	r5,r3
 8400a2c:	84042240 	call	8404224 <__truncdfsf2>
 8400a30:	e0bff815 	stw	r2,-32(fp)
		zoom += 1;
 8400a34:	e0bffc17 	ldw	r2,-16(fp)
 8400a38:	10800044 	addi	r2,r2,1
 8400a3c:	e0bffc15 	stw	r2,-16(fp)

		alt_up_pixel_buffer_dma_clear_screen(my_pixel_buffer,0);
 8400a40:	e13ffd17 	ldw	r4,-12(fp)
 8400a44:	000b883a 	mov	r5,zero
 8400a48:	840f1e00 	call	840f1e0 <alt_up_pixel_buffer_dma_clear_screen>
	}
 8400a4c:	003e1806 	br	84002b0 <main+0xb0>

08400a50 <barrier>:
	//barrier(cpuid);
}

void barrier(int id){
 8400a50:	defff904 	addi	sp,sp,-28
 8400a54:	dfc00615 	stw	ra,24(sp)
 8400a58:	df000515 	stw	fp,20(sp)
 8400a5c:	df000504 	addi	fp,sp,20
 8400a60:	e13fff15 	stw	r4,-4(fp)
	post(id, message);
 8400a64:	d1670817 	ldw	r5,-25568(gp)
 8400a68:	e13fff17 	ldw	r4,-4(fp)
 8400a6c:	8400b940 	call	8400b94 <post>
	if(id == 0){
 8400a70:	e0bfff17 	ldw	r2,-4(fp)
 8400a74:	1004c03a 	cmpne	r2,r2,zero
 8400a78:	10000b1e 	bne	r2,zero,8400aa8 <barrier+0x58>
		int i;
		for(i = 0; i < n-1; i++){
 8400a7c:	e03ffe15 	stw	zero,-8(fp)
 8400a80:	00000506 	br	8400a98 <barrier+0x48>
			pend(mailbox_0);
 8400a84:	d1270917 	ldw	r4,-25564(gp)
 8400a88:	8400b640 	call	8400b64 <pend>

void barrier(int id){
	post(id, message);
	if(id == 0){
		int i;
		for(i = 0; i < n-1; i++){
 8400a8c:	e0bffe17 	ldw	r2,-8(fp)
 8400a90:	10800044 	addi	r2,r2,1
 8400a94:	e0bffe15 	stw	r2,-8(fp)
 8400a98:	d0a00217 	ldw	r2,-32760(gp)
 8400a9c:	10ffffc4 	addi	r3,r2,-1
 8400aa0:	e0bffe17 	ldw	r2,-8(fp)
 8400aa4:	10fff716 	blt	r2,r3,8400a84 <barrier+0x34>
			pend(mailbox_0);
		}
	}
	if(id == 1){
 8400aa8:	e0bfff17 	ldw	r2,-4(fp)
 8400aac:	10800058 	cmpnei	r2,r2,1
 8400ab0:	10000b1e 	bne	r2,zero,8400ae0 <barrier+0x90>
		int i;
		for(i = 0; i < n-1; i++){
 8400ab4:	e03ffd15 	stw	zero,-12(fp)
 8400ab8:	00000506 	br	8400ad0 <barrier+0x80>
			pend(mailbox_1);
 8400abc:	d1270b17 	ldw	r4,-25556(gp)
 8400ac0:	8400b640 	call	8400b64 <pend>
			pend(mailbox_0);
		}
	}
	if(id == 1){
		int i;
		for(i = 0; i < n-1; i++){
 8400ac4:	e0bffd17 	ldw	r2,-12(fp)
 8400ac8:	10800044 	addi	r2,r2,1
 8400acc:	e0bffd15 	stw	r2,-12(fp)
 8400ad0:	d0a00217 	ldw	r2,-32760(gp)
 8400ad4:	10ffffc4 	addi	r3,r2,-1
 8400ad8:	e0bffd17 	ldw	r2,-12(fp)
 8400adc:	10fff716 	blt	r2,r3,8400abc <barrier+0x6c>
			pend(mailbox_1);
		}
	}
	if(id == 2){
 8400ae0:	e0bfff17 	ldw	r2,-4(fp)
 8400ae4:	10800098 	cmpnei	r2,r2,2
 8400ae8:	10000b1e 	bne	r2,zero,8400b18 <barrier+0xc8>
		int i;
		for(i = 0; i < n-1; i++){
 8400aec:	e03ffc15 	stw	zero,-16(fp)
 8400af0:	00000506 	br	8400b08 <barrier+0xb8>
			pend(mailbox_2);
 8400af4:	d1270a17 	ldw	r4,-25560(gp)
 8400af8:	8400b640 	call	8400b64 <pend>
			pend(mailbox_1);
		}
	}
	if(id == 2){
		int i;
		for(i = 0; i < n-1; i++){
 8400afc:	e0bffc17 	ldw	r2,-16(fp)
 8400b00:	10800044 	addi	r2,r2,1
 8400b04:	e0bffc15 	stw	r2,-16(fp)
 8400b08:	d0a00217 	ldw	r2,-32760(gp)
 8400b0c:	10ffffc4 	addi	r3,r2,-1
 8400b10:	e0bffc17 	ldw	r2,-16(fp)
 8400b14:	10fff716 	blt	r2,r3,8400af4 <barrier+0xa4>
			pend(mailbox_2);
		}
	}
	if(id == 3){
 8400b18:	e0bfff17 	ldw	r2,-4(fp)
 8400b1c:	108000d8 	cmpnei	r2,r2,3
 8400b20:	10000b1e 	bne	r2,zero,8400b50 <barrier+0x100>
		int i;
		for(i = 0; i < n-1; i++){
 8400b24:	e03ffb15 	stw	zero,-20(fp)
 8400b28:	00000506 	br	8400b40 <barrier+0xf0>
			pend(mailbox_3);
 8400b2c:	d1270e17 	ldw	r4,-25544(gp)
 8400b30:	8400b640 	call	8400b64 <pend>
			pend(mailbox_2);
		}
	}
	if(id == 3){
		int i;
		for(i = 0; i < n-1; i++){
 8400b34:	e0bffb17 	ldw	r2,-20(fp)
 8400b38:	10800044 	addi	r2,r2,1
 8400b3c:	e0bffb15 	stw	r2,-20(fp)
 8400b40:	d0a00217 	ldw	r2,-32760(gp)
 8400b44:	10ffffc4 	addi	r3,r2,-1
 8400b48:	e0bffb17 	ldw	r2,-20(fp)
 8400b4c:	10fff716 	blt	r2,r3,8400b2c <barrier+0xdc>
			pend(mailbox_3);
		}
	}
}
 8400b50:	e037883a 	mov	sp,fp
 8400b54:	dfc00117 	ldw	ra,4(sp)
 8400b58:	df000017 	ldw	fp,0(sp)
 8400b5c:	dec00204 	addi	sp,sp,8
 8400b60:	f800283a 	ret

08400b64 <pend>:
void pend(alt_mailbox_dev* box){
 8400b64:	defffd04 	addi	sp,sp,-12
 8400b68:	dfc00215 	stw	ra,8(sp)
 8400b6c:	df000115 	stw	fp,4(sp)
 8400b70:	df000104 	addi	fp,sp,4
 8400b74:	e13fff15 	stw	r4,-4(fp)
	//printf("MAILBOX PENDING \n");
	altera_avalon_mailbox_pend(box);
 8400b78:	e13fff17 	ldw	r4,-4(fp)
 8400b7c:	840ea980 	call	840ea98 <altera_avalon_mailbox_pend>
}
 8400b80:	e037883a 	mov	sp,fp
 8400b84:	dfc00117 	ldw	ra,4(sp)
 8400b88:	df000017 	ldw	fp,0(sp)
 8400b8c:	dec00204 	addi	sp,sp,8
 8400b90:	f800283a 	ret

08400b94 <post>:

void post(int id, alt_u32 mess){
 8400b94:	defffc04 	addi	sp,sp,-16
 8400b98:	dfc00315 	stw	ra,12(sp)
 8400b9c:	df000215 	stw	fp,8(sp)
 8400ba0:	df000204 	addi	fp,sp,8
 8400ba4:	e13ffe15 	stw	r4,-8(fp)
 8400ba8:	e17fff15 	stw	r5,-4(fp)
	 //altera_avalon_mailbox_post(box, message);

	 if(id == 0){
 8400bac:	e0bffe17 	ldw	r2,-8(fp)
 8400bb0:	1004c03a 	cmpne	r2,r2,zero
 8400bb4:	1000091e 	bne	r2,zero,8400bdc <post+0x48>
	 //printf("MAILBOX 0 POSTING \n");
	 altera_avalon_mailbox_post(mailbox_1, mess);
 8400bb8:	d1270b17 	ldw	r4,-25556(gp)
 8400bbc:	e17fff17 	ldw	r5,-4(fp)
 8400bc0:	840e98c0 	call	840e98c <altera_avalon_mailbox_post>
	 altera_avalon_mailbox_post(mailbox_2, mess);
 8400bc4:	d1270a17 	ldw	r4,-25560(gp)
 8400bc8:	e17fff17 	ldw	r5,-4(fp)
 8400bcc:	840e98c0 	call	840e98c <altera_avalon_mailbox_post>
	 altera_avalon_mailbox_post(mailbox_3, mess);
 8400bd0:	d1270e17 	ldw	r4,-25544(gp)
 8400bd4:	e17fff17 	ldw	r5,-4(fp)
 8400bd8:	840e98c0 	call	840e98c <altera_avalon_mailbox_post>
	 }
	 if(id == 1){
 8400bdc:	e0bffe17 	ldw	r2,-8(fp)
 8400be0:	10800058 	cmpnei	r2,r2,1
 8400be4:	1000091e 	bne	r2,zero,8400c0c <post+0x78>
	 //printf("MAILBOX 1 POSTING \n");
	 altera_avalon_mailbox_post(mailbox_0, mess);
 8400be8:	d1270917 	ldw	r4,-25564(gp)
 8400bec:	e17fff17 	ldw	r5,-4(fp)
 8400bf0:	840e98c0 	call	840e98c <altera_avalon_mailbox_post>
	 altera_avalon_mailbox_post(mailbox_2, mess);
 8400bf4:	d1270a17 	ldw	r4,-25560(gp)
 8400bf8:	e17fff17 	ldw	r5,-4(fp)
 8400bfc:	840e98c0 	call	840e98c <altera_avalon_mailbox_post>
	 altera_avalon_mailbox_post(mailbox_3, mess);
 8400c00:	d1270e17 	ldw	r4,-25544(gp)
 8400c04:	e17fff17 	ldw	r5,-4(fp)
 8400c08:	840e98c0 	call	840e98c <altera_avalon_mailbox_post>
	 }

	 if(id == 2){
 8400c0c:	e0bffe17 	ldw	r2,-8(fp)
 8400c10:	10800098 	cmpnei	r2,r2,2
 8400c14:	1000091e 	bne	r2,zero,8400c3c <post+0xa8>
	 //printf("MAILBOX 2 POSTING \n");
	 altera_avalon_mailbox_post(mailbox_0, mess);
 8400c18:	d1270917 	ldw	r4,-25564(gp)
 8400c1c:	e17fff17 	ldw	r5,-4(fp)
 8400c20:	840e98c0 	call	840e98c <altera_avalon_mailbox_post>
	 altera_avalon_mailbox_post(mailbox_1, mess);
 8400c24:	d1270b17 	ldw	r4,-25556(gp)
 8400c28:	e17fff17 	ldw	r5,-4(fp)
 8400c2c:	840e98c0 	call	840e98c <altera_avalon_mailbox_post>
	 altera_avalon_mailbox_post(mailbox_3, mess);
 8400c30:	d1270e17 	ldw	r4,-25544(gp)
 8400c34:	e17fff17 	ldw	r5,-4(fp)
 8400c38:	840e98c0 	call	840e98c <altera_avalon_mailbox_post>
	 }

	 if(id == 3){
 8400c3c:	e0bffe17 	ldw	r2,-8(fp)
 8400c40:	108000d8 	cmpnei	r2,r2,3
 8400c44:	1000091e 	bne	r2,zero,8400c6c <post+0xd8>
	 //printf("MAILBOX 3 POSTING \n");
	 altera_avalon_mailbox_post(mailbox_0, mess);
 8400c48:	d1270917 	ldw	r4,-25564(gp)
 8400c4c:	e17fff17 	ldw	r5,-4(fp)
 8400c50:	840e98c0 	call	840e98c <altera_avalon_mailbox_post>
	 altera_avalon_mailbox_post(mailbox_1, mess);
 8400c54:	d1270b17 	ldw	r4,-25556(gp)
 8400c58:	e17fff17 	ldw	r5,-4(fp)
 8400c5c:	840e98c0 	call	840e98c <altera_avalon_mailbox_post>
	 altera_avalon_mailbox_post(mailbox_2, mess);
 8400c60:	d1270a17 	ldw	r4,-25560(gp)
 8400c64:	e17fff17 	ldw	r5,-4(fp)
 8400c68:	840e98c0 	call	840e98c <altera_avalon_mailbox_post>
	 }

}
 8400c6c:	e037883a 	mov	sp,fp
 8400c70:	dfc00117 	ldw	ra,4(sp)
 8400c74:	df000017 	ldw	fp,0(sp)
 8400c78:	dec00204 	addi	sp,sp,8
 8400c7c:	f800283a 	ret

08400c80 <pow>:
 8400c80:	deffee04 	addi	sp,sp,-72
 8400c84:	ddc01015 	stw	r23,64(sp)
 8400c88:	05c21074 	movhi	r23,2113
 8400c8c:	bdce5104 	addi	r23,r23,14660
 8400c90:	dd800f15 	stw	r22,60(sp)
 8400c94:	dd400e15 	stw	r21,56(sp)
 8400c98:	dd000d15 	stw	r20,52(sp)
 8400c9c:	dcc00c15 	stw	r19,48(sp)
 8400ca0:	dc800b15 	stw	r18,44(sp)
 8400ca4:	dc400a15 	stw	r17,40(sp)
 8400ca8:	dc000915 	stw	r16,36(sp)
 8400cac:	2029883a 	mov	r20,r4
 8400cb0:	dfc01115 	stw	ra,68(sp)
 8400cb4:	3025883a 	mov	r18,r6
 8400cb8:	282b883a 	mov	r21,r5
 8400cbc:	3827883a 	mov	r19,r7
 8400cc0:	84011080 	call	8401108 <__ieee754_pow>
 8400cc4:	b9000017 	ldw	r4,0(r23)
 8400cc8:	05bfffc4 	movi	r22,-1
 8400ccc:	1021883a 	mov	r16,r2
 8400cd0:	1823883a 	mov	r17,r3
 8400cd4:	25800426 	beq	r4,r22,8400ce8 <pow+0x68>
 8400cd8:	9009883a 	mov	r4,r18
 8400cdc:	980b883a 	mov	r5,r19
 8400ce0:	84027040 	call	8402704 <__isnand>
 8400ce4:	10000d26 	beq	r2,zero,8400d1c <pow+0x9c>
 8400ce8:	8005883a 	mov	r2,r16
 8400cec:	8807883a 	mov	r3,r17
 8400cf0:	dfc01117 	ldw	ra,68(sp)
 8400cf4:	ddc01017 	ldw	r23,64(sp)
 8400cf8:	dd800f17 	ldw	r22,60(sp)
 8400cfc:	dd400e17 	ldw	r21,56(sp)
 8400d00:	dd000d17 	ldw	r20,52(sp)
 8400d04:	dcc00c17 	ldw	r19,48(sp)
 8400d08:	dc800b17 	ldw	r18,44(sp)
 8400d0c:	dc400a17 	ldw	r17,40(sp)
 8400d10:	dc000917 	ldw	r16,36(sp)
 8400d14:	dec01204 	addi	sp,sp,72
 8400d18:	f800283a 	ret
 8400d1c:	a009883a 	mov	r4,r20
 8400d20:	a80b883a 	mov	r5,r21
 8400d24:	84027040 	call	8402704 <__isnand>
 8400d28:	1000151e 	bne	r2,zero,8400d80 <pow+0x100>
 8400d2c:	000d883a 	mov	r6,zero
 8400d30:	000f883a 	mov	r7,zero
 8400d34:	a009883a 	mov	r4,r20
 8400d38:	a80b883a 	mov	r5,r21
 8400d3c:	8403e4c0 	call	8403e4c <__eqdf2>
 8400d40:	1000541e 	bne	r2,zero,8400e94 <pow+0x214>
 8400d44:	000d883a 	mov	r6,zero
 8400d48:	000f883a 	mov	r7,zero
 8400d4c:	9009883a 	mov	r4,r18
 8400d50:	980b883a 	mov	r5,r19
 8400d54:	8403e4c0 	call	8403e4c <__eqdf2>
 8400d58:	10002c1e 	bne	r2,zero,8400e0c <pow+0x18c>
 8400d5c:	b8800017 	ldw	r2,0(r23)
 8400d60:	d8000615 	stw	zero,24(sp)
 8400d64:	d8000715 	stw	zero,28(sp)
 8400d68:	10001226 	beq	r2,zero,8400db4 <pow+0x134>
 8400d6c:	008ffc34 	movhi	r2,16368
 8400d70:	d8800715 	stw	r2,28(sp)
 8400d74:	dc000617 	ldw	r16,24(sp)
 8400d78:	dc400717 	ldw	r17,28(sp)
 8400d7c:	003fda06 	br	8400ce8 <pow+0x68>
 8400d80:	000d883a 	mov	r6,zero
 8400d84:	000f883a 	mov	r7,zero
 8400d88:	9009883a 	mov	r4,r18
 8400d8c:	980b883a 	mov	r5,r19
 8400d90:	8403e4c0 	call	8403e4c <__eqdf2>
 8400d94:	103fd41e 	bne	r2,zero,8400ce8 <pow+0x68>
 8400d98:	b8c00017 	ldw	r3,0(r23)
 8400d9c:	010ffc34 	movhi	r4,16368
 8400da0:	d8000615 	stw	zero,24(sp)
 8400da4:	d9000715 	stw	r4,28(sp)
 8400da8:	1d801526 	beq	r3,r22,8400e00 <pow+0x180>
 8400dac:	00800084 	movi	r2,2
 8400db0:	18801326 	beq	r3,r2,8400e00 <pow+0x180>
 8400db4:	00821074 	movhi	r2,2113
 8400db8:	10864804 	addi	r2,r2,6432
 8400dbc:	00c00044 	movi	r3,1
 8400dc0:	d809883a 	mov	r4,sp
 8400dc4:	dcc00515 	stw	r19,20(sp)
 8400dc8:	dd400315 	stw	r21,12(sp)
 8400dcc:	d8800115 	stw	r2,4(sp)
 8400dd0:	d8c00015 	stw	r3,0(sp)
 8400dd4:	dc800415 	stw	r18,16(sp)
 8400dd8:	dd000215 	stw	r20,8(sp)
 8400ddc:	d8000815 	stw	zero,32(sp)
 8400de0:	84027340 	call	8402734 <matherr>
 8400de4:	10002726 	beq	r2,zero,8400e84 <pow+0x204>
 8400de8:	d8800817 	ldw	r2,32(sp)
 8400dec:	103fe126 	beq	r2,zero,8400d74 <pow+0xf4>
 8400df0:	8404d0c0 	call	8404d0c <__errno>
 8400df4:	d8c00817 	ldw	r3,32(sp)
 8400df8:	10c00015 	stw	r3,0(r2)
 8400dfc:	003fdd06 	br	8400d74 <pow+0xf4>
 8400e00:	d9000715 	stw	r4,28(sp)
 8400e04:	d8000615 	stw	zero,24(sp)
 8400e08:	003fda06 	br	8400d74 <pow+0xf4>
 8400e0c:	9009883a 	mov	r4,r18
 8400e10:	980b883a 	mov	r5,r19
 8400e14:	84026e80 	call	84026e8 <finite>
 8400e18:	103fb326 	beq	r2,zero,8400ce8 <pow+0x68>
 8400e1c:	000d883a 	mov	r6,zero
 8400e20:	000f883a 	mov	r7,zero
 8400e24:	9009883a 	mov	r4,r18
 8400e28:	980b883a 	mov	r5,r19
 8400e2c:	8403fe40 	call	8403fe4 <__ltdf2>
 8400e30:	103fad0e 	bge	r2,zero,8400ce8 <pow+0x68>
 8400e34:	b9000017 	ldw	r4,0(r23)
 8400e38:	00800044 	movi	r2,1
 8400e3c:	00c21074 	movhi	r3,2113
 8400e40:	18c64804 	addi	r3,r3,6432
 8400e44:	d8800015 	stw	r2,0(sp)
 8400e48:	d8c00115 	stw	r3,4(sp)
 8400e4c:	dd400315 	stw	r21,12(sp)
 8400e50:	dcc00515 	stw	r19,20(sp)
 8400e54:	d8000815 	stw	zero,32(sp)
 8400e58:	dd000215 	stw	r20,8(sp)
 8400e5c:	dc800415 	stw	r18,16(sp)
 8400e60:	20005626 	beq	r4,zero,8400fbc <pow+0x33c>
 8400e64:	00bffc34 	movhi	r2,65520
 8400e68:	d8800715 	stw	r2,28(sp)
 8400e6c:	00800084 	movi	r2,2
 8400e70:	d8000615 	stw	zero,24(sp)
 8400e74:	20800326 	beq	r4,r2,8400e84 <pow+0x204>
 8400e78:	d809883a 	mov	r4,sp
 8400e7c:	84027340 	call	8402734 <matherr>
 8400e80:	103fd91e 	bne	r2,zero,8400de8 <pow+0x168>
 8400e84:	8404d0c0 	call	8404d0c <__errno>
 8400e88:	00c00844 	movi	r3,33
 8400e8c:	10c00015 	stw	r3,0(r2)
 8400e90:	003fd506 	br	8400de8 <pow+0x168>
 8400e94:	8009883a 	mov	r4,r16
 8400e98:	880b883a 	mov	r5,r17
 8400e9c:	84026e80 	call	84026e8 <finite>
 8400ea0:	10002426 	beq	r2,zero,8400f34 <pow+0x2b4>
 8400ea4:	000d883a 	mov	r6,zero
 8400ea8:	000f883a 	mov	r7,zero
 8400eac:	8009883a 	mov	r4,r16
 8400eb0:	880b883a 	mov	r5,r17
 8400eb4:	8403e4c0 	call	8403e4c <__eqdf2>
 8400eb8:	103f8b1e 	bne	r2,zero,8400ce8 <pow+0x68>
 8400ebc:	a009883a 	mov	r4,r20
 8400ec0:	a80b883a 	mov	r5,r21
 8400ec4:	84026e80 	call	84026e8 <finite>
 8400ec8:	103f8726 	beq	r2,zero,8400ce8 <pow+0x68>
 8400ecc:	9009883a 	mov	r4,r18
 8400ed0:	980b883a 	mov	r5,r19
 8400ed4:	84026e80 	call	84026e8 <finite>
 8400ed8:	103f8326 	beq	r2,zero,8400ce8 <pow+0x68>
 8400edc:	b9000017 	ldw	r4,0(r23)
 8400ee0:	00800104 	movi	r2,4
 8400ee4:	d8800015 	stw	r2,0(sp)
 8400ee8:	00c21074 	movhi	r3,2113
 8400eec:	18c64804 	addi	r3,r3,6432
 8400ef0:	00800084 	movi	r2,2
 8400ef4:	d8c00115 	stw	r3,4(sp)
 8400ef8:	dd400315 	stw	r21,12(sp)
 8400efc:	dcc00515 	stw	r19,20(sp)
 8400f00:	d8000815 	stw	zero,32(sp)
 8400f04:	dd000215 	stw	r20,8(sp)
 8400f08:	dc800415 	stw	r18,16(sp)
 8400f0c:	d8000615 	stw	zero,24(sp)
 8400f10:	d8000715 	stw	zero,28(sp)
 8400f14:	20800326 	beq	r4,r2,8400f24 <pow+0x2a4>
 8400f18:	d809883a 	mov	r4,sp
 8400f1c:	84027340 	call	8402734 <matherr>
 8400f20:	103fb11e 	bne	r2,zero,8400de8 <pow+0x168>
 8400f24:	8404d0c0 	call	8404d0c <__errno>
 8400f28:	00c00884 	movi	r3,34
 8400f2c:	10c00015 	stw	r3,0(r2)
 8400f30:	003fad06 	br	8400de8 <pow+0x168>
 8400f34:	a009883a 	mov	r4,r20
 8400f38:	a80b883a 	mov	r5,r21
 8400f3c:	84026e80 	call	84026e8 <finite>
 8400f40:	103fd826 	beq	r2,zero,8400ea4 <pow+0x224>
 8400f44:	9009883a 	mov	r4,r18
 8400f48:	980b883a 	mov	r5,r19
 8400f4c:	84026e80 	call	84026e8 <finite>
 8400f50:	103fd426 	beq	r2,zero,8400ea4 <pow+0x224>
 8400f54:	880b883a 	mov	r5,r17
 8400f58:	8009883a 	mov	r4,r16
 8400f5c:	84027040 	call	8402704 <__isnand>
 8400f60:	10001926 	beq	r2,zero,8400fc8 <pow+0x348>
 8400f64:	bc000017 	ldw	r16,0(r23)
 8400f68:	00800044 	movi	r2,1
 8400f6c:	00c21074 	movhi	r3,2113
 8400f70:	18c64804 	addi	r3,r3,6432
 8400f74:	d8800015 	stw	r2,0(sp)
 8400f78:	d8c00115 	stw	r3,4(sp)
 8400f7c:	dd400315 	stw	r21,12(sp)
 8400f80:	dcc00515 	stw	r19,20(sp)
 8400f84:	d8000815 	stw	zero,32(sp)
 8400f88:	dd000215 	stw	r20,8(sp)
 8400f8c:	dc800415 	stw	r18,16(sp)
 8400f90:	80000a26 	beq	r16,zero,8400fbc <pow+0x33c>
 8400f94:	0009883a 	mov	r4,zero
 8400f98:	000d883a 	mov	r6,zero
 8400f9c:	000b883a 	mov	r5,zero
 8400fa0:	000f883a 	mov	r7,zero
 8400fa4:	8403bf40 	call	8403bf4 <__divdf3>
 8400fa8:	d8800615 	stw	r2,24(sp)
 8400fac:	00800084 	movi	r2,2
 8400fb0:	d8c00715 	stw	r3,28(sp)
 8400fb4:	80bfb01e 	bne	r16,r2,8400e78 <pow+0x1f8>
 8400fb8:	003fb206 	br	8400e84 <pow+0x204>
 8400fbc:	d8000615 	stw	zero,24(sp)
 8400fc0:	d8000715 	stw	zero,28(sp)
 8400fc4:	003fac06 	br	8400e78 <pow+0x1f8>
 8400fc8:	b8800017 	ldw	r2,0(r23)
 8400fcc:	00c000c4 	movi	r3,3
 8400fd0:	01021074 	movhi	r4,2113
 8400fd4:	21064804 	addi	r4,r4,6432
 8400fd8:	d8c00015 	stw	r3,0(sp)
 8400fdc:	d9000115 	stw	r4,4(sp)
 8400fe0:	d8000815 	stw	zero,32(sp)
 8400fe4:	dd000215 	stw	r20,8(sp)
 8400fe8:	dd400315 	stw	r21,12(sp)
 8400fec:	dc800415 	stw	r18,16(sp)
 8400ff0:	dcc00515 	stw	r19,20(sp)
 8400ff4:	1000251e 	bne	r2,zero,840108c <pow+0x40c>
 8400ff8:	05b80034 	movhi	r22,57344
 8400ffc:	0091fc34 	movhi	r2,18416
 8401000:	10bfffc4 	addi	r2,r2,-1
 8401004:	000d883a 	mov	r6,zero
 8401008:	000f883a 	mov	r7,zero
 840100c:	a80b883a 	mov	r5,r21
 8401010:	a009883a 	mov	r4,r20
 8401014:	d8800715 	stw	r2,28(sp)
 8401018:	dd800615 	stw	r22,24(sp)
 840101c:	8403fe40 	call	8403fe4 <__ltdf2>
 8401020:	103fbd0e 	bge	r2,zero,8400f18 <pow+0x298>
 8401024:	0005883a 	mov	r2,zero
 8401028:	00cff834 	movhi	r3,16352
 840102c:	180f883a 	mov	r7,r3
 8401030:	100d883a 	mov	r6,r2
 8401034:	980b883a 	mov	r5,r19
 8401038:	9009883a 	mov	r4,r18
 840103c:	84038300 	call	8403830 <__muldf3>
 8401040:	1009883a 	mov	r4,r2
 8401044:	180b883a 	mov	r5,r3
 8401048:	1021883a 	mov	r16,r2
 840104c:	1823883a 	mov	r17,r3
 8401050:	840274c0 	call	840274c <rint>
 8401054:	180f883a 	mov	r7,r3
 8401058:	8009883a 	mov	r4,r16
 840105c:	880b883a 	mov	r5,r17
 8401060:	100d883a 	mov	r6,r2
 8401064:	8403ed40 	call	8403ed4 <__nedf2>
 8401068:	10000426 	beq	r2,zero,840107c <pow+0x3fc>
 840106c:	00b1fc34 	movhi	r2,51184
 8401070:	10bfffc4 	addi	r2,r2,-1
 8401074:	dd800615 	stw	r22,24(sp)
 8401078:	d8800715 	stw	r2,28(sp)
 840107c:	b8c00017 	ldw	r3,0(r23)
 8401080:	00800084 	movi	r2,2
 8401084:	18bfa41e 	bne	r3,r2,8400f18 <pow+0x298>
 8401088:	003fa606 	br	8400f24 <pow+0x2a4>
 840108c:	009ffc34 	movhi	r2,32752
 8401090:	000d883a 	mov	r6,zero
 8401094:	000f883a 	mov	r7,zero
 8401098:	a80b883a 	mov	r5,r21
 840109c:	a009883a 	mov	r4,r20
 84010a0:	d8800715 	stw	r2,28(sp)
 84010a4:	d8000615 	stw	zero,24(sp)
 84010a8:	8403fe40 	call	8403fe4 <__ltdf2>
 84010ac:	103ff30e 	bge	r2,zero,840107c <pow+0x3fc>
 84010b0:	0005883a 	mov	r2,zero
 84010b4:	00cff834 	movhi	r3,16352
 84010b8:	180f883a 	mov	r7,r3
 84010bc:	100d883a 	mov	r6,r2
 84010c0:	980b883a 	mov	r5,r19
 84010c4:	9009883a 	mov	r4,r18
 84010c8:	84038300 	call	8403830 <__muldf3>
 84010cc:	1009883a 	mov	r4,r2
 84010d0:	180b883a 	mov	r5,r3
 84010d4:	1021883a 	mov	r16,r2
 84010d8:	1823883a 	mov	r17,r3
 84010dc:	840274c0 	call	840274c <rint>
 84010e0:	180f883a 	mov	r7,r3
 84010e4:	8009883a 	mov	r4,r16
 84010e8:	880b883a 	mov	r5,r17
 84010ec:	100d883a 	mov	r6,r2
 84010f0:	8403ed40 	call	8403ed4 <__nedf2>
 84010f4:	103fe126 	beq	r2,zero,840107c <pow+0x3fc>
 84010f8:	00bffc34 	movhi	r2,65520
 84010fc:	d8800715 	stw	r2,28(sp)
 8401100:	d8000615 	stw	zero,24(sp)
 8401104:	003fdd06 	br	840107c <pow+0x3fc>

08401108 <__ieee754_pow>:
 8401108:	deffbb04 	addi	sp,sp,-276
 840110c:	3005883a 	mov	r2,r6
 8401110:	dd404015 	stw	r21,256(sp)
 8401114:	dd003f15 	stw	r20,252(sp)
 8401118:	d9802815 	stw	r6,160(sp)
 840111c:	2029883a 	mov	r20,r4
 8401120:	282b883a 	mov	r21,r5
 8401124:	3009883a 	mov	r4,r6
 8401128:	380b883a 	mov	r5,r7
 840112c:	01a00034 	movhi	r6,32768
 8401130:	31bfffc4 	addi	r6,r6,-1
 8401134:	dc003b15 	stw	r16,236(sp)
 8401138:	29a0703a 	and	r16,r5,r6
 840113c:	1404b03a 	or	r2,r2,r16
 8401140:	dd804115 	stw	r22,260(sp)
 8401144:	dc403c15 	stw	r17,240(sp)
 8401148:	d9c02915 	stw	r7,164(sp)
 840114c:	382d883a 	mov	r22,r7
 8401150:	dfc04415 	stw	ra,272(sp)
 8401154:	200f883a 	mov	r7,r4
 8401158:	df004315 	stw	fp,268(sp)
 840115c:	ddc04215 	stw	r23,264(sp)
 8401160:	dcc03e15 	stw	r19,248(sp)
 8401164:	dc803d15 	stw	r18,244(sp)
 8401168:	a023883a 	mov	r17,r20
 840116c:	2809883a 	mov	r4,r5
 8401170:	10000826 	beq	r2,zero,8401194 <__ieee754_pow+0x8c>
 8401174:	a9a4703a 	and	r18,r21,r6
 8401178:	009ffc34 	movhi	r2,32752
 840117c:	a827883a 	mov	r19,r21
 8401180:	1480180e 	bge	r2,r18,84011e4 <__ieee754_pow+0xdc>
 8401184:	00b00434 	movhi	r2,49168
 8401188:	9085883a 	add	r2,r18,r2
 840118c:	8884b03a 	or	r2,r17,r2
 8401190:	1000321e 	bne	r2,zero,840125c <__ieee754_pow+0x154>
 8401194:	0009883a 	mov	r4,zero
 8401198:	014ffc34 	movhi	r5,16368
 840119c:	d9002815 	stw	r4,160(sp)
 84011a0:	d9402915 	stw	r5,164(sp)
 84011a4:	d9002817 	ldw	r4,160(sp)
 84011a8:	d9402917 	ldw	r5,164(sp)
 84011ac:	2005883a 	mov	r2,r4
 84011b0:	2807883a 	mov	r3,r5
 84011b4:	dfc04417 	ldw	ra,272(sp)
 84011b8:	df004317 	ldw	fp,268(sp)
 84011bc:	ddc04217 	ldw	r23,264(sp)
 84011c0:	dd804117 	ldw	r22,260(sp)
 84011c4:	dd404017 	ldw	r21,256(sp)
 84011c8:	dd003f17 	ldw	r20,252(sp)
 84011cc:	dcc03e17 	ldw	r19,248(sp)
 84011d0:	dc803d17 	ldw	r18,244(sp)
 84011d4:	dc403c17 	ldw	r17,240(sp)
 84011d8:	dc003b17 	ldw	r16,236(sp)
 84011dc:	dec04504 	addi	sp,sp,276
 84011e0:	f800283a 	ret
 84011e4:	90802b26 	beq	r18,r2,8401294 <__ieee754_pow+0x18c>
 84011e8:	143fe616 	blt	r2,r16,8401184 <__ieee754_pow+0x7c>
 84011ec:	80806126 	beq	r16,r2,8401374 <__ieee754_pow+0x26c>
 84011f0:	982e403a 	cmpge	r23,r19,zero
 84011f4:	b8004e26 	beq	r23,zero,8401330 <__ieee754_pow+0x228>
 84011f8:	0039883a 	mov	fp,zero
 84011fc:	3800281e 	bne	r7,zero,84012a0 <__ieee754_pow+0x198>
 8401200:	009ffc34 	movhi	r2,32752
 8401204:	80804f26 	beq	r16,r2,8401344 <__ieee754_pow+0x23c>
 8401208:	008ffc34 	movhi	r2,16368
 840120c:	80808226 	beq	r16,r2,8401418 <__ieee754_pow+0x310>
 8401210:	00900034 	movhi	r2,16384
 8401214:	20828426 	beq	r4,r2,8401c28 <__ieee754_pow+0xb20>
 8401218:	008ff834 	movhi	r2,16352
 840121c:	2080201e 	bne	r4,r2,84012a0 <__ieee754_pow+0x198>
 8401220:	98001f16 	blt	r19,zero,84012a0 <__ieee754_pow+0x198>
 8401224:	a80b883a 	mov	r5,r21
 8401228:	a009883a 	mov	r4,r20
 840122c:	dfc04417 	ldw	ra,272(sp)
 8401230:	df004317 	ldw	fp,268(sp)
 8401234:	ddc04217 	ldw	r23,264(sp)
 8401238:	dd804117 	ldw	r22,260(sp)
 840123c:	dd404017 	ldw	r21,256(sp)
 8401240:	dd003f17 	ldw	r20,252(sp)
 8401244:	dcc03e17 	ldw	r19,248(sp)
 8401248:	dc803d17 	ldw	r18,244(sp)
 840124c:	dc403c17 	ldw	r17,240(sp)
 8401250:	dc003b17 	ldw	r16,236(sp)
 8401254:	dec04504 	addi	sp,sp,276
 8401258:	84024081 	jmpi	8402408 <__ieee754_sqrt>
 840125c:	01021074 	movhi	r4,2113
 8401260:	2106b304 	addi	r4,r4,6860
 8401264:	dfc04417 	ldw	ra,272(sp)
 8401268:	df004317 	ldw	fp,268(sp)
 840126c:	ddc04217 	ldw	r23,264(sp)
 8401270:	dd804117 	ldw	r22,260(sp)
 8401274:	dd404017 	ldw	r21,256(sp)
 8401278:	dd003f17 	ldw	r20,252(sp)
 840127c:	dcc03e17 	ldw	r19,248(sp)
 8401280:	dc803d17 	ldw	r18,244(sp)
 8401284:	dc403c17 	ldw	r17,240(sp)
 8401288:	dc003b17 	ldw	r16,236(sp)
 840128c:	dec04504 	addi	sp,sp,276
 8401290:	840273c1 	jmpi	840273c <nan>
 8401294:	a03fbb1e 	bne	r20,zero,8401184 <__ieee754_pow+0x7c>
 8401298:	003fd306 	br	84011e8 <__ieee754_pow+0xe0>
 840129c:	0039883a 	mov	fp,zero
 84012a0:	a009883a 	mov	r4,r20
 84012a4:	a80b883a 	mov	r5,r21
 84012a8:	84026d00 	call	84026d0 <fabs>
 84012ac:	1015883a 	mov	r10,r2
 84012b0:	1817883a 	mov	r11,r3
 84012b4:	88001226 	beq	r17,zero,8401300 <__ieee754_pow+0x1f8>
 84012b8:	9804d7fa 	srli	r2,r19,31
 84012bc:	10bfffc4 	addi	r2,r2,-1
 84012c0:	1706b03a 	or	r3,r2,fp
 84012c4:	d8802515 	stw	r2,148(sp)
 84012c8:	18002c1e 	bne	r3,zero,840137c <__ieee754_pow+0x274>
 84012cc:	a80f883a 	mov	r7,r21
 84012d0:	a009883a 	mov	r4,r20
 84012d4:	a80b883a 	mov	r5,r21
 84012d8:	a00d883a 	mov	r6,r20
 84012dc:	840373c0 	call	840373c <__subdf3>
 84012e0:	1009883a 	mov	r4,r2
 84012e4:	180b883a 	mov	r5,r3
 84012e8:	100d883a 	mov	r6,r2
 84012ec:	180f883a 	mov	r7,r3
 84012f0:	8403bf40 	call	8403bf4 <__divdf3>
 84012f4:	d8802815 	stw	r2,160(sp)
 84012f8:	d8c02915 	stw	r3,164(sp)
 84012fc:	003fa906 	br	84011a4 <__ieee754_pow+0x9c>
 8401300:	009ffc34 	movhi	r2,32752
 8401304:	90800326 	beq	r18,r2,8401314 <__ieee754_pow+0x20c>
 8401308:	90000226 	beq	r18,zero,8401314 <__ieee754_pow+0x20c>
 840130c:	008ffc34 	movhi	r2,16368
 8401310:	90bfe91e 	bne	r18,r2,84012b8 <__ieee754_pow+0x1b0>
 8401314:	b0026316 	blt	r22,zero,8401ca4 <__ieee754_pow+0xb9c>
 8401318:	5011883a 	mov	r8,r10
 840131c:	5813883a 	mov	r9,r11
 8401320:	b8023126 	beq	r23,zero,8401be8 <__ieee754_pow+0xae0>
 8401324:	da002815 	stw	r8,160(sp)
 8401328:	da402915 	stw	r9,164(sp)
 840132c:	003f9d06 	br	84011a4 <__ieee754_pow+0x9c>
 8401330:	0090d034 	movhi	r2,17216
 8401334:	10bfffc4 	addi	r2,r2,-1
 8401338:	1400270e 	bge	r2,r16,84013d8 <__ieee754_pow+0x2d0>
 840133c:	07000084 	movi	fp,2
 8401340:	003fae06 	br	84011fc <__ieee754_pow+0xf4>
 8401344:	00b00434 	movhi	r2,49168
 8401348:	9085883a 	add	r2,r18,r2
 840134c:	8884b03a 	or	r2,r17,r2
 8401350:	103f9026 	beq	r2,zero,8401194 <__ieee754_pow+0x8c>
 8401354:	008ffc34 	movhi	r2,16368
 8401358:	10bfffc4 	addi	r2,r2,-1
 840135c:	1482d00e 	bge	r2,r18,8401ea0 <__ieee754_pow+0xd98>
 8401360:	b03f900e 	bge	r22,zero,84011a4 <__ieee754_pow+0x9c>
 8401364:	0005883a 	mov	r2,zero
 8401368:	d8802815 	stw	r2,160(sp)
 840136c:	d8802915 	stw	r2,164(sp)
 8401370:	003f8c06 	br	84011a4 <__ieee754_pow+0x9c>
 8401374:	383f9e26 	beq	r7,zero,84011f0 <__ieee754_pow+0xe8>
 8401378:	003f8206 	br	8401184 <__ieee754_pow+0x7c>
 840137c:	00907834 	movhi	r2,16864
 8401380:	1400290e 	bge	r2,r16,8401428 <__ieee754_pow+0x320>
 8401384:	0090fc34 	movhi	r2,17392
 8401388:	1402500e 	bge	r2,r16,8401ccc <__ieee754_pow+0xbc4>
 840138c:	008ffc34 	movhi	r2,16368
 8401390:	10bfffc4 	addi	r2,r2,-1
 8401394:	14800b0e 	bge	r2,r18,84013c4 <__ieee754_pow+0x2bc>
 8401398:	05800b0e 	bge	zero,r22,84013c8 <__ieee754_pow+0x2c0>
 840139c:	00a20034 	movhi	r2,34816
 84013a0:	109d6704 	addi	r2,r2,30108
 84013a4:	00df8e34 	movhi	r3,32312
 84013a8:	18f90f04 	addi	r3,r3,-7108
 84013ac:	100d883a 	mov	r6,r2
 84013b0:	180f883a 	mov	r7,r3
 84013b4:	1009883a 	mov	r4,r2
 84013b8:	180b883a 	mov	r5,r3
 84013bc:	84038300 	call	8403830 <__muldf3>
 84013c0:	003fcc06 	br	84012f4 <__ieee754_pow+0x1ec>
 84013c4:	b03ff516 	blt	r22,zero,840139c <__ieee754_pow+0x294>
 84013c8:	0007883a 	mov	r3,zero
 84013cc:	d8c02815 	stw	r3,160(sp)
 84013d0:	d8c02915 	stw	r3,164(sp)
 84013d4:	003f7306 	br	84011a4 <__ieee754_pow+0x9c>
 84013d8:	008ffc34 	movhi	r2,16368
 84013dc:	10bfffc4 	addi	r2,r2,-1
 84013e0:	143f850e 	bge	r2,r16,84011f8 <__ieee754_pow+0xf0>
 84013e4:	8005d53a 	srai	r2,r16,20
 84013e8:	01400504 	movi	r5,20
 84013ec:	10ff0044 	addi	r3,r2,-1023
 84013f0:	28c3e10e 	bge	r5,r3,8402378 <__ieee754_pow+0x1270>
 84013f4:	00800d04 	movi	r2,52
 84013f8:	10c5c83a 	sub	r2,r2,r3
 84013fc:	3886d83a 	srl	r3,r7,r2
 8401400:	1884983a 	sll	r2,r3,r2
 8401404:	38bf7c1e 	bne	r7,r2,84011f8 <__ieee754_pow+0xf0>
 8401408:	18c0004c 	andi	r3,r3,1
 840140c:	00800084 	movi	r2,2
 8401410:	10f9c83a 	sub	fp,r2,r3
 8401414:	003f7906 	br	84011fc <__ieee754_pow+0xf4>
 8401418:	b0038516 	blt	r22,zero,8402230 <__ieee754_pow+0x1128>
 840141c:	dd002815 	stw	r20,160(sp)
 8401420:	dd402915 	stw	r21,164(sp)
 8401424:	003f5f06 	br	84011a4 <__ieee754_pow+0x9c>
 8401428:	00800434 	movhi	r2,16
 840142c:	10bfffc4 	addi	r2,r2,-1
 8401430:	1482900e 	bge	r2,r18,8401e74 <__ieee754_pow+0xd6c>
 8401434:	000b883a 	mov	r5,zero
 8401438:	9005d53a 	srai	r2,r18,20
 840143c:	00c00434 	movhi	r3,16
 8401440:	18ffffc4 	addi	r3,r3,-1
 8401444:	90c8703a 	and	r4,r18,r3
 8401448:	2887883a 	add	r3,r5,r2
 840144c:	18bf0044 	addi	r2,r3,-1023
 8401450:	d8800015 	stw	r2,0(sp)
 8401454:	00800134 	movhi	r2,4
 8401458:	10a62384 	addi	r2,r2,-26482
 840145c:	250ffc34 	orhi	r20,r4,16368
 8401460:	1101ee0e 	bge	r2,r4,8401c1c <__ieee754_pow+0xb14>
 8401464:	00800334 	movhi	r2,12
 8401468:	10ad9e44 	addi	r2,r2,-18823
 840146c:	1101e716 	blt	r2,r4,8401c0c <__ieee754_pow+0xb04>
 8401470:	01000044 	movi	r4,1
 8401474:	04000334 	movhi	r16,12
 8401478:	200890fa 	slli	r4,r4,3
 840147c:	da800115 	stw	r10,4(sp)
 8401480:	dd000215 	stw	r20,8(sp)
 8401484:	d9002c15 	stw	r4,176(sp)
 8401488:	d9402c17 	ldw	r5,176(sp)
 840148c:	01021074 	movhi	r4,2113
 8401490:	21064904 	addi	r4,r4,6436
 8401494:	a02bd07a 	srai	r21,r20,1
 8401498:	2909883a 	add	r4,r5,r4
 840149c:	25800017 	ldw	r22,0(r4)
 84014a0:	25c00117 	ldw	r23,4(r4)
 84014a4:	a00b883a 	mov	r5,r20
 84014a8:	5009883a 	mov	r4,r10
 84014ac:	b00d883a 	mov	r6,r22
 84014b0:	b80f883a 	mov	r7,r23
 84014b4:	840373c0 	call	840373c <__subdf3>
 84014b8:	d9000117 	ldw	r4,4(sp)
 84014bc:	a00b883a 	mov	r5,r20
 84014c0:	b00d883a 	mov	r6,r22
 84014c4:	b80f883a 	mov	r7,r23
 84014c8:	1025883a 	mov	r18,r2
 84014cc:	1827883a 	mov	r19,r3
 84014d0:	84037bc0 	call	84037bc <__adddf3>
 84014d4:	0011883a 	mov	r8,zero
 84014d8:	024ffc34 	movhi	r9,16368
 84014dc:	480b883a 	mov	r5,r9
 84014e0:	4009883a 	mov	r4,r8
 84014e4:	180f883a 	mov	r7,r3
 84014e8:	100d883a 	mov	r6,r2
 84014ec:	8403bf40 	call	8403bf4 <__divdf3>
 84014f0:	d8c02e15 	stw	r3,184(sp)
 84014f4:	d8800f15 	stw	r2,60(sp)
 84014f8:	d8802d15 	stw	r2,180(sp)
 84014fc:	d8802e17 	ldw	r2,184(sp)
 8401500:	d9800f17 	ldw	r6,60(sp)
 8401504:	9009883a 	mov	r4,r18
 8401508:	980b883a 	mov	r5,r19
 840150c:	100f883a 	mov	r7,r2
 8401510:	dc800b15 	stw	r18,44(sp)
 8401514:	dcc00c15 	stw	r19,48(sp)
 8401518:	d8801015 	stw	r2,64(sp)
 840151c:	84038300 	call	8403830 <__muldf3>
 8401520:	d8c03015 	stw	r3,192(sp)
 8401524:	d9003017 	ldw	r4,192(sp)
 8401528:	d8802f15 	stw	r2,188(sp)
 840152c:	d8800315 	stw	r2,12(sp)
 8401530:	ad480034 	orhi	r21,r21,8192
 8401534:	0005883a 	mov	r2,zero
 8401538:	ac2b883a 	add	r21,r21,r16
 840153c:	000b883a 	mov	r5,zero
 8401540:	1021883a 	mov	r16,r2
 8401544:	2005883a 	mov	r2,r4
 8401548:	800d883a 	mov	r6,r16
 840154c:	a80f883a 	mov	r7,r21
 8401550:	d9000415 	stw	r4,16(sp)
 8401554:	d9002715 	stw	r4,156(sp)
 8401558:	d9402615 	stw	r5,152(sp)
 840155c:	d9401615 	stw	r5,88(sp)
 8401560:	d9001715 	stw	r4,92(sp)
 8401564:	100b883a 	mov	r5,r2
 8401568:	0009883a 	mov	r4,zero
 840156c:	84038300 	call	8403830 <__muldf3>
 8401570:	d9000b17 	ldw	r4,44(sp)
 8401574:	980b883a 	mov	r5,r19
 8401578:	180f883a 	mov	r7,r3
 840157c:	100d883a 	mov	r6,r2
 8401580:	840373c0 	call	840373c <__subdf3>
 8401584:	8009883a 	mov	r4,r16
 8401588:	a80b883a 	mov	r5,r21
 840158c:	b80f883a 	mov	r7,r23
 8401590:	b00d883a 	mov	r6,r22
 8401594:	1021883a 	mov	r16,r2
 8401598:	1823883a 	mov	r17,r3
 840159c:	840373c0 	call	840373c <__subdf3>
 84015a0:	d9000117 	ldw	r4,4(sp)
 84015a4:	a00b883a 	mov	r5,r20
 84015a8:	180f883a 	mov	r7,r3
 84015ac:	100d883a 	mov	r6,r2
 84015b0:	840373c0 	call	840373c <__subdf3>
 84015b4:	d9001617 	ldw	r4,88(sp)
 84015b8:	d9402717 	ldw	r5,156(sp)
 84015bc:	180f883a 	mov	r7,r3
 84015c0:	100d883a 	mov	r6,r2
 84015c4:	84038300 	call	8403830 <__muldf3>
 84015c8:	180f883a 	mov	r7,r3
 84015cc:	880b883a 	mov	r5,r17
 84015d0:	8009883a 	mov	r4,r16
 84015d4:	100d883a 	mov	r6,r2
 84015d8:	840373c0 	call	840373c <__subdf3>
 84015dc:	d9000f17 	ldw	r4,60(sp)
 84015e0:	d9402e17 	ldw	r5,184(sp)
 84015e4:	180f883a 	mov	r7,r3
 84015e8:	100d883a 	mov	r6,r2
 84015ec:	84038300 	call	8403830 <__muldf3>
 84015f0:	d9000317 	ldw	r4,12(sp)
 84015f4:	d9403017 	ldw	r5,192(sp)
 84015f8:	d8803115 	stw	r2,196(sp)
 84015fc:	200d883a 	mov	r6,r4
 8401600:	280f883a 	mov	r7,r5
 8401604:	d8c03215 	stw	r3,200(sp)
 8401608:	84038300 	call	8403830 <__muldf3>
 840160c:	1009883a 	mov	r4,r2
 8401610:	180b883a 	mov	r5,r3
 8401614:	100d883a 	mov	r6,r2
 8401618:	180f883a 	mov	r7,r3
 840161c:	1021883a 	mov	r16,r2
 8401620:	1823883a 	mov	r17,r3
 8401624:	84038300 	call	8403830 <__muldf3>
 8401628:	02129174 	movhi	r8,19013
 840162c:	4213bbc4 	addi	r8,r8,20207
 8401630:	024ff2b4 	movhi	r9,16330
 8401634:	4a5f8a04 	addi	r9,r9,32296
 8401638:	480f883a 	mov	r7,r9
 840163c:	8009883a 	mov	r4,r16
 8401640:	880b883a 	mov	r5,r17
 8401644:	400d883a 	mov	r6,r8
 8401648:	1029883a 	mov	r20,r2
 840164c:	182b883a 	mov	r21,r3
 8401650:	84038300 	call	8403830 <__muldf3>
 8401654:	0224f2b4 	movhi	r8,37834
 8401658:	4236d944 	addi	r8,r8,-9371
 840165c:	024ff3b4 	movhi	r9,16334
 8401660:	4a619284 	addi	r9,r9,-31158
 8401664:	480f883a 	mov	r7,r9
 8401668:	400d883a 	mov	r6,r8
 840166c:	180b883a 	mov	r5,r3
 8401670:	1009883a 	mov	r4,r2
 8401674:	84037bc0 	call	84037bc <__adddf3>
 8401678:	180f883a 	mov	r7,r3
 840167c:	8009883a 	mov	r4,r16
 8401680:	880b883a 	mov	r5,r17
 8401684:	100d883a 	mov	r6,r2
 8401688:	84038300 	call	8403830 <__muldf3>
 840168c:	022a4774 	movhi	r8,43293
 8401690:	42104044 	addi	r8,r8,16641
 8401694:	024ff474 	movhi	r9,16337
 8401698:	4a5d1804 	addi	r9,r9,29792
 840169c:	480f883a 	mov	r7,r9
 84016a0:	400d883a 	mov	r6,r8
 84016a4:	180b883a 	mov	r5,r3
 84016a8:	1009883a 	mov	r4,r2
 84016ac:	84037bc0 	call	84037bc <__adddf3>
 84016b0:	180f883a 	mov	r7,r3
 84016b4:	8009883a 	mov	r4,r16
 84016b8:	880b883a 	mov	r5,r17
 84016bc:	100d883a 	mov	r6,r2
 84016c0:	84038300 	call	8403830 <__muldf3>
 84016c4:	021463f4 	movhi	r8,20879
 84016c8:	42099344 	addi	r8,r8,9805
 84016cc:	024ff574 	movhi	r9,16341
 84016d0:	4a555544 	addi	r9,r9,21845
 84016d4:	480f883a 	mov	r7,r9
 84016d8:	400d883a 	mov	r6,r8
 84016dc:	180b883a 	mov	r5,r3
 84016e0:	1009883a 	mov	r4,r2
 84016e4:	84037bc0 	call	84037bc <__adddf3>
 84016e8:	180f883a 	mov	r7,r3
 84016ec:	8009883a 	mov	r4,r16
 84016f0:	880b883a 	mov	r5,r17
 84016f4:	100d883a 	mov	r6,r2
 84016f8:	84038300 	call	8403830 <__muldf3>
 84016fc:	0236dc34 	movhi	r8,56176
 8401700:	422affc4 	addi	r8,r8,-21505
 8401704:	024ff6f4 	movhi	r9,16347
 8401708:	4a5b6d84 	addi	r9,r9,28086
 840170c:	480f883a 	mov	r7,r9
 8401710:	400d883a 	mov	r6,r8
 8401714:	180b883a 	mov	r5,r3
 8401718:	1009883a 	mov	r4,r2
 840171c:	84037bc0 	call	84037bc <__adddf3>
 8401720:	180f883a 	mov	r7,r3
 8401724:	8009883a 	mov	r4,r16
 8401728:	880b883a 	mov	r5,r17
 840172c:	100d883a 	mov	r6,r2
 8401730:	84038300 	call	8403830 <__muldf3>
 8401734:	020cccf4 	movhi	r8,13107
 8401738:	420cc0c4 	addi	r8,r8,13059
 840173c:	024ff8f4 	movhi	r9,16355
 8401740:	4a4cccc4 	addi	r9,r9,13107
 8401744:	480f883a 	mov	r7,r9
 8401748:	400d883a 	mov	r6,r8
 840174c:	180b883a 	mov	r5,r3
 8401750:	1009883a 	mov	r4,r2
 8401754:	84037bc0 	call	84037bc <__adddf3>
 8401758:	180f883a 	mov	r7,r3
 840175c:	a80b883a 	mov	r5,r21
 8401760:	a009883a 	mov	r4,r20
 8401764:	100d883a 	mov	r6,r2
 8401768:	84038300 	call	8403830 <__muldf3>
 840176c:	d9000317 	ldw	r4,12(sp)
 8401770:	d9403017 	ldw	r5,192(sp)
 8401774:	d9801617 	ldw	r6,88(sp)
 8401778:	d9c02717 	ldw	r7,156(sp)
 840177c:	1021883a 	mov	r16,r2
 8401780:	1823883a 	mov	r17,r3
 8401784:	84037bc0 	call	84037bc <__adddf3>
 8401788:	d9003117 	ldw	r4,196(sp)
 840178c:	d9403217 	ldw	r5,200(sp)
 8401790:	180f883a 	mov	r7,r3
 8401794:	100d883a 	mov	r6,r2
 8401798:	d9001415 	stw	r4,80(sp)
 840179c:	d9401515 	stw	r5,84(sp)
 84017a0:	84038300 	call	8403830 <__muldf3>
 84017a4:	180f883a 	mov	r7,r3
 84017a8:	8009883a 	mov	r4,r16
 84017ac:	880b883a 	mov	r5,r17
 84017b0:	100d883a 	mov	r6,r2
 84017b4:	84037bc0 	call	84037bc <__adddf3>
 84017b8:	d9001617 	ldw	r4,88(sp)
 84017bc:	d9402717 	ldw	r5,156(sp)
 84017c0:	d8803315 	stw	r2,204(sp)
 84017c4:	200d883a 	mov	r6,r4
 84017c8:	280f883a 	mov	r7,r5
 84017cc:	d8c03415 	stw	r3,208(sp)
 84017d0:	84038300 	call	8403830 <__muldf3>
 84017d4:	182f883a 	mov	r23,r3
 84017d8:	05500234 	movhi	r21,16392
 84017dc:	0029883a 	mov	r20,zero
 84017e0:	b80b883a 	mov	r5,r23
 84017e4:	a00d883a 	mov	r6,r20
 84017e8:	a80f883a 	mov	r7,r21
 84017ec:	1009883a 	mov	r4,r2
 84017f0:	d8800715 	stw	r2,28(sp)
 84017f4:	d8c00815 	stw	r3,32(sp)
 84017f8:	84037bc0 	call	84037bc <__adddf3>
 84017fc:	d9003317 	ldw	r4,204(sp)
 8401800:	d9403417 	ldw	r5,208(sp)
 8401804:	180f883a 	mov	r7,r3
 8401808:	100d883a 	mov	r6,r2
 840180c:	d9000515 	stw	r4,20(sp)
 8401810:	d9400615 	stw	r5,24(sp)
 8401814:	84037bc0 	call	84037bc <__adddf3>
 8401818:	d9001617 	ldw	r4,88(sp)
 840181c:	d9402717 	ldw	r5,156(sp)
 8401820:	0025883a 	mov	r18,zero
 8401824:	900d883a 	mov	r6,r18
 8401828:	180f883a 	mov	r7,r3
 840182c:	1823883a 	mov	r17,r3
 8401830:	84038300 	call	8403830 <__muldf3>
 8401834:	d9001417 	ldw	r4,80(sp)
 8401838:	d9403217 	ldw	r5,200(sp)
 840183c:	880f883a 	mov	r7,r17
 8401840:	900d883a 	mov	r6,r18
 8401844:	d8803515 	stw	r2,212(sp)
 8401848:	d8c03615 	stw	r3,216(sp)
 840184c:	84038300 	call	8403830 <__muldf3>
 8401850:	a80f883a 	mov	r7,r21
 8401854:	880b883a 	mov	r5,r17
 8401858:	000d883a 	mov	r6,zero
 840185c:	9009883a 	mov	r4,r18
 8401860:	1021883a 	mov	r16,r2
 8401864:	1823883a 	mov	r17,r3
 8401868:	840373c0 	call	840373c <__subdf3>
 840186c:	d9800717 	ldw	r6,28(sp)
 8401870:	b80f883a 	mov	r7,r23
 8401874:	180b883a 	mov	r5,r3
 8401878:	1009883a 	mov	r4,r2
 840187c:	840373c0 	call	840373c <__subdf3>
 8401880:	d9000517 	ldw	r4,20(sp)
 8401884:	d9403417 	ldw	r5,208(sp)
 8401888:	180f883a 	mov	r7,r3
 840188c:	100d883a 	mov	r6,r2
 8401890:	840373c0 	call	840373c <__subdf3>
 8401894:	d9000317 	ldw	r4,12(sp)
 8401898:	d9403017 	ldw	r5,192(sp)
 840189c:	180f883a 	mov	r7,r3
 84018a0:	100d883a 	mov	r6,r2
 84018a4:	84038300 	call	8403830 <__muldf3>
 84018a8:	180f883a 	mov	r7,r3
 84018ac:	880b883a 	mov	r5,r17
 84018b0:	8009883a 	mov	r4,r16
 84018b4:	100d883a 	mov	r6,r2
 84018b8:	84037bc0 	call	84037bc <__adddf3>
 84018bc:	102d883a 	mov	r22,r2
 84018c0:	d9003617 	ldw	r4,216(sp)
 84018c4:	d8803517 	ldw	r2,212(sp)
 84018c8:	d9403617 	ldw	r5,216(sp)
 84018cc:	182f883a 	mov	r23,r3
 84018d0:	b00d883a 	mov	r6,r22
 84018d4:	b80f883a 	mov	r7,r23
 84018d8:	d9000a15 	stw	r4,40(sp)
 84018dc:	1009883a 	mov	r4,r2
 84018e0:	054ffbf4 	movhi	r21,16367
 84018e4:	ad71c244 	addi	r21,r21,-14583
 84018e8:	dd800d15 	stw	r22,52(sp)
 84018ec:	ddc00e15 	stw	r23,56(sp)
 84018f0:	05380034 	movhi	r20,57344
 84018f4:	d8800915 	stw	r2,36(sp)
 84018f8:	84037bc0 	call	84037bc <__adddf3>
 84018fc:	180b883a 	mov	r5,r3
 8401900:	a00d883a 	mov	r6,r20
 8401904:	a80f883a 	mov	r7,r21
 8401908:	9009883a 	mov	r4,r18
 840190c:	1823883a 	mov	r17,r3
 8401910:	84038300 	call	8403830 <__muldf3>
 8401914:	020516f4 	movhi	r8,5211
 8401918:	42007d44 	addi	r8,r8,501
 840191c:	026f8fb4 	movhi	r9,48702
 8401920:	4a4bf804 	addi	r9,r9,12256
 8401924:	480f883a 	mov	r7,r9
 8401928:	400d883a 	mov	r6,r8
 840192c:	880b883a 	mov	r5,r17
 8401930:	9009883a 	mov	r4,r18
 8401934:	d8803715 	stw	r2,220(sp)
 8401938:	d8c03815 	stw	r3,224(sp)
 840193c:	84038300 	call	8403830 <__muldf3>
 8401940:	d9800917 	ldw	r6,36(sp)
 8401944:	d9c03617 	ldw	r7,216(sp)
 8401948:	880b883a 	mov	r5,r17
 840194c:	9009883a 	mov	r4,r18
 8401950:	1021883a 	mov	r16,r2
 8401954:	1823883a 	mov	r17,r3
 8401958:	840373c0 	call	840373c <__subdf3>
 840195c:	d9000d17 	ldw	r4,52(sp)
 8401960:	b80b883a 	mov	r5,r23
 8401964:	180f883a 	mov	r7,r3
 8401968:	100d883a 	mov	r6,r2
 840196c:	840373c0 	call	840373c <__subdf3>
 8401970:	180b883a 	mov	r5,r3
 8401974:	a80f883a 	mov	r7,r21
 8401978:	01b70eb4 	movhi	r6,56378
 840197c:	3180ff44 	addi	r6,r6,1021
 8401980:	1009883a 	mov	r4,r2
 8401984:	84038300 	call	8403830 <__muldf3>
 8401988:	180f883a 	mov	r7,r3
 840198c:	880b883a 	mov	r5,r17
 8401990:	8009883a 	mov	r4,r16
 8401994:	100d883a 	mov	r6,r2
 8401998:	84037bc0 	call	84037bc <__adddf3>
 840199c:	d9402c17 	ldw	r5,176(sp)
 84019a0:	01021074 	movhi	r4,2113
 84019a4:	21064d04 	addi	r4,r4,6452
 84019a8:	2909883a 	add	r4,r5,r4
 84019ac:	22400117 	ldw	r9,4(r4)
 84019b0:	22000017 	ldw	r8,0(r4)
 84019b4:	180b883a 	mov	r5,r3
 84019b8:	480f883a 	mov	r7,r9
 84019bc:	400d883a 	mov	r6,r8
 84019c0:	1009883a 	mov	r4,r2
 84019c4:	84037bc0 	call	84037bc <__adddf3>
 84019c8:	d9000017 	ldw	r4,0(sp)
 84019cc:	182f883a 	mov	r23,r3
 84019d0:	102d883a 	mov	r22,r2
 84019d4:	84040f40 	call	84040f4 <__floatsidf>
 84019d8:	d9402c17 	ldw	r5,176(sp)
 84019dc:	01021074 	movhi	r4,2113
 84019e0:	21065104 	addi	r4,r4,6468
 84019e4:	b00d883a 	mov	r6,r22
 84019e8:	2911883a 	add	r8,r5,r4
 84019ec:	d9003717 	ldw	r4,220(sp)
 84019f0:	d9403817 	ldw	r5,224(sp)
 84019f4:	45000017 	ldw	r20,0(r8)
 84019f8:	d9002315 	stw	r4,140(sp)
 84019fc:	d9003817 	ldw	r4,224(sp)
 8401a00:	45400117 	ldw	r21,4(r8)
 8401a04:	b80f883a 	mov	r7,r23
 8401a08:	d9002415 	stw	r4,144(sp)
 8401a0c:	d9002317 	ldw	r4,140(sp)
 8401a10:	1021883a 	mov	r16,r2
 8401a14:	1823883a 	mov	r17,r3
 8401a18:	dd802115 	stw	r22,132(sp)
 8401a1c:	ddc02215 	stw	r23,136(sp)
 8401a20:	84037bc0 	call	84037bc <__adddf3>
 8401a24:	180b883a 	mov	r5,r3
 8401a28:	1009883a 	mov	r4,r2
 8401a2c:	a00d883a 	mov	r6,r20
 8401a30:	a80f883a 	mov	r7,r21
 8401a34:	84037bc0 	call	84037bc <__adddf3>
 8401a38:	180f883a 	mov	r7,r3
 8401a3c:	8009883a 	mov	r4,r16
 8401a40:	880b883a 	mov	r5,r17
 8401a44:	100d883a 	mov	r6,r2
 8401a48:	84037bc0 	call	84037bc <__adddf3>
 8401a4c:	180b883a 	mov	r5,r3
 8401a50:	0009883a 	mov	r4,zero
 8401a54:	800d883a 	mov	r6,r16
 8401a58:	880f883a 	mov	r7,r17
 8401a5c:	d9001b15 	stw	r4,108(sp)
 8401a60:	d8c01c15 	stw	r3,112(sp)
 8401a64:	840373c0 	call	840373c <__subdf3>
 8401a68:	180b883a 	mov	r5,r3
 8401a6c:	a80f883a 	mov	r7,r21
 8401a70:	1009883a 	mov	r4,r2
 8401a74:	a00d883a 	mov	r6,r20
 8401a78:	840373c0 	call	840373c <__subdf3>
 8401a7c:	d9802317 	ldw	r6,140(sp)
 8401a80:	d9c03817 	ldw	r7,224(sp)
 8401a84:	180b883a 	mov	r5,r3
 8401a88:	1009883a 	mov	r4,r2
 8401a8c:	840373c0 	call	840373c <__subdf3>
 8401a90:	d9002117 	ldw	r4,132(sp)
 8401a94:	1011883a 	mov	r8,r2
 8401a98:	1813883a 	mov	r9,r3
 8401a9c:	b80b883a 	mov	r5,r23
 8401aa0:	480f883a 	mov	r7,r9
 8401aa4:	400d883a 	mov	r6,r8
 8401aa8:	840373c0 	call	840373c <__subdf3>
 8401aac:	1823883a 	mov	r17,r3
 8401ab0:	d8c02517 	ldw	r3,148(sp)
 8401ab4:	1021883a 	mov	r16,r2
 8401ab8:	e0bfffc4 	addi	r2,fp,-1
 8401abc:	1884b03a 	or	r2,r3,r2
 8401ac0:	1000731e 	bne	r2,zero,8401c90 <__ieee754_pow+0xb88>
 8401ac4:	0009883a 	mov	r4,zero
 8401ac8:	016ffc34 	movhi	r5,49136
 8401acc:	d9001915 	stw	r4,100(sp)
 8401ad0:	d9401a15 	stw	r5,104(sp)
 8401ad4:	d9402917 	ldw	r5,164(sp)
 8401ad8:	d9002817 	ldw	r4,160(sp)
 8401adc:	0029883a 	mov	r20,zero
 8401ae0:	a00d883a 	mov	r6,r20
 8401ae4:	280f883a 	mov	r7,r5
 8401ae8:	2827883a 	mov	r19,r5
 8401aec:	840373c0 	call	840373c <__subdf3>
 8401af0:	d9001b17 	ldw	r4,108(sp)
 8401af4:	d9401c17 	ldw	r5,112(sp)
 8401af8:	180f883a 	mov	r7,r3
 8401afc:	100d883a 	mov	r6,r2
 8401b00:	84038300 	call	8403830 <__muldf3>
 8401b04:	d9c02917 	ldw	r7,164(sp)
 8401b08:	d9802817 	ldw	r6,160(sp)
 8401b0c:	880b883a 	mov	r5,r17
 8401b10:	8009883a 	mov	r4,r16
 8401b14:	1823883a 	mov	r17,r3
 8401b18:	1021883a 	mov	r16,r2
 8401b1c:	84038300 	call	8403830 <__muldf3>
 8401b20:	180f883a 	mov	r7,r3
 8401b24:	880b883a 	mov	r5,r17
 8401b28:	8009883a 	mov	r4,r16
 8401b2c:	100d883a 	mov	r6,r2
 8401b30:	84037bc0 	call	84037bc <__adddf3>
 8401b34:	d9401c17 	ldw	r5,112(sp)
 8401b38:	d9001b17 	ldw	r4,108(sp)
 8401b3c:	a00d883a 	mov	r6,r20
 8401b40:	980f883a 	mov	r7,r19
 8401b44:	1029883a 	mov	r20,r2
 8401b48:	182b883a 	mov	r21,r3
 8401b4c:	84038300 	call	8403830 <__muldf3>
 8401b50:	1025883a 	mov	r18,r2
 8401b54:	1827883a 	mov	r19,r3
 8401b58:	a009883a 	mov	r4,r20
 8401b5c:	a80b883a 	mov	r5,r21
 8401b60:	900d883a 	mov	r6,r18
 8401b64:	980f883a 	mov	r7,r19
 8401b68:	dd001d15 	stw	r20,116(sp)
 8401b6c:	dc801f15 	stw	r18,124(sp)
 8401b70:	dd401e15 	stw	r21,120(sp)
 8401b74:	dcc02015 	stw	r19,128(sp)
 8401b78:	84037bc0 	call	84037bc <__adddf3>
 8401b7c:	1823883a 	mov	r17,r3
 8401b80:	01102434 	movhi	r4,16528
 8401b84:	213fffc4 	addi	r4,r4,-1
 8401b88:	1021883a 	mov	r16,r2
 8401b8c:	182f883a 	mov	r23,r3
 8401b90:	dc401815 	stw	r17,96(sp)
 8401b94:	100b883a 	mov	r5,r2
 8401b98:	20c02c0e 	bge	r4,r3,8401c4c <__ieee754_pow+0xb44>
 8401b9c:	00afdc34 	movhi	r2,49008
 8401ba0:	1885883a 	add	r2,r3,r2
 8401ba4:	2884b03a 	or	r2,r5,r2
 8401ba8:	1001a626 	beq	r2,zero,8402244 <__ieee754_pow+0x113c>
 8401bac:	04220034 	movhi	r16,34816
 8401bb0:	841d6704 	addi	r16,r16,30108
 8401bb4:	045f8e34 	movhi	r17,32312
 8401bb8:	8c790f04 	addi	r17,r17,-7108
 8401bbc:	d9401a17 	ldw	r5,104(sp)
 8401bc0:	d9001917 	ldw	r4,100(sp)
 8401bc4:	800d883a 	mov	r6,r16
 8401bc8:	880f883a 	mov	r7,r17
 8401bcc:	84038300 	call	8403830 <__muldf3>
 8401bd0:	180b883a 	mov	r5,r3
 8401bd4:	800d883a 	mov	r6,r16
 8401bd8:	880f883a 	mov	r7,r17
 8401bdc:	1009883a 	mov	r4,r2
 8401be0:	84038300 	call	8403830 <__muldf3>
 8401be4:	003dc306 	br	84012f4 <__ieee754_pow+0x1ec>
 8401be8:	00b00434 	movhi	r2,49168
 8401bec:	9085883a 	add	r2,r18,r2
 8401bf0:	e084b03a 	or	r2,fp,r2
 8401bf4:	1000af1e 	bne	r2,zero,8401eb4 <__ieee754_pow+0xdac>
 8401bf8:	480f883a 	mov	r7,r9
 8401bfc:	4009883a 	mov	r4,r8
 8401c00:	480b883a 	mov	r5,r9
 8401c04:	400d883a 	mov	r6,r8
 8401c08:	003db406 	br	84012dc <__ieee754_pow+0x1d4>
 8401c0c:	00bffc34 	movhi	r2,65520
 8401c10:	18ff0084 	addi	r3,r3,-1022
 8401c14:	a0a9883a 	add	r20,r20,r2
 8401c18:	d8c00015 	stw	r3,0(sp)
 8401c1c:	0009883a 	mov	r4,zero
 8401c20:	04000234 	movhi	r16,8
 8401c24:	003e1406 	br	8401478 <__ieee754_pow+0x370>
 8401c28:	a80f883a 	mov	r7,r21
 8401c2c:	a009883a 	mov	r4,r20
 8401c30:	a80b883a 	mov	r5,r21
 8401c34:	a00d883a 	mov	r6,r20
 8401c38:	84038300 	call	8403830 <__muldf3>
 8401c3c:	180b883a 	mov	r5,r3
 8401c40:	d8802815 	stw	r2,160(sp)
 8401c44:	d9402915 	stw	r5,164(sp)
 8401c48:	003d5606 	br	84011a4 <__ieee754_pow+0x9c>
 8401c4c:	d9001817 	ldw	r4,96(sp)
 8401c50:	00a00034 	movhi	r2,32768
 8401c54:	10bfffc4 	addi	r2,r2,-1
 8401c58:	00d02474 	movhi	r3,16529
 8401c5c:	18f2ffc4 	addi	r3,r3,-13313
 8401c60:	20b8703a 	and	fp,r4,r2
 8401c64:	1f009d0e 	bge	r3,fp,8401edc <__ieee754_pow+0xdd4>
 8401c68:	008fdbf4 	movhi	r2,16239
 8401c6c:	108d0004 	addi	r2,r2,13312
 8401c70:	2085883a 	add	r2,r4,r2
 8401c74:	1144b03a 	or	r2,r2,r5
 8401c78:	1001c626 	beq	r2,zero,8402394 <__ieee754_pow+0x128c>
 8401c7c:	0430be74 	movhi	r16,49913
 8401c80:	843cd644 	addi	r16,r16,-3239
 8401c84:	04406974 	movhi	r17,421
 8401c88:	8c5b87c4 	addi	r17,r17,28191
 8401c8c:	003fcb06 	br	8401bbc <__ieee754_pow+0xab4>
 8401c90:	0005883a 	mov	r2,zero
 8401c94:	00cffc34 	movhi	r3,16368
 8401c98:	d8801915 	stw	r2,100(sp)
 8401c9c:	d8c01a15 	stw	r3,104(sp)
 8401ca0:	003f8c06 	br	8401ad4 <__ieee754_pow+0x9cc>
 8401ca4:	0005883a 	mov	r2,zero
 8401ca8:	00cffc34 	movhi	r3,16368
 8401cac:	180b883a 	mov	r5,r3
 8401cb0:	580f883a 	mov	r7,r11
 8401cb4:	1009883a 	mov	r4,r2
 8401cb8:	500d883a 	mov	r6,r10
 8401cbc:	8403bf40 	call	8403bf4 <__divdf3>
 8401cc0:	1011883a 	mov	r8,r2
 8401cc4:	1813883a 	mov	r9,r3
 8401cc8:	003d9506 	br	8401320 <__ieee754_pow+0x218>
 8401ccc:	008ffc34 	movhi	r2,16368
 8401cd0:	10bfff84 	addi	r2,r2,-2
 8401cd4:	14bdbb0e 	bge	r2,r18,84013c4 <__ieee754_pow+0x2bc>
 8401cd8:	008ffc34 	movhi	r2,16368
 8401cdc:	14bdae16 	blt	r2,r18,8401398 <__ieee754_pow+0x290>
 8401ce0:	580b883a 	mov	r5,r11
 8401ce4:	5009883a 	mov	r4,r10
 8401ce8:	000d883a 	mov	r6,zero
 8401cec:	100f883a 	mov	r7,r2
 8401cf0:	840373c0 	call	840373c <__subdf3>
 8401cf4:	1021883a 	mov	r16,r2
 8401cf8:	1823883a 	mov	r17,r3
 8401cfc:	00980034 	movhi	r2,24576
 8401d00:	00cffdf4 	movhi	r3,16375
 8401d04:	18c551c4 	addi	r3,r3,5447
 8401d08:	8009883a 	mov	r4,r16
 8401d0c:	880b883a 	mov	r5,r17
 8401d10:	180f883a 	mov	r7,r3
 8401d14:	100d883a 	mov	r6,r2
 8401d18:	84038300 	call	8403830 <__muldf3>
 8401d1c:	023e17b4 	movhi	r8,63582
 8401d20:	4237d104 	addi	r8,r8,-8380
 8401d24:	024f9574 	movhi	r9,15957
 8401d28:	4a6b82c4 	addi	r9,r9,-20981
 8401d2c:	480f883a 	mov	r7,r9
 8401d30:	400d883a 	mov	r6,r8
 8401d34:	8009883a 	mov	r4,r16
 8401d38:	880b883a 	mov	r5,r17
 8401d3c:	102d883a 	mov	r22,r2
 8401d40:	182f883a 	mov	r23,r3
 8401d44:	84038300 	call	8403830 <__muldf3>
 8401d48:	8009883a 	mov	r4,r16
 8401d4c:	880b883a 	mov	r5,r17
 8401d50:	800d883a 	mov	r6,r16
 8401d54:	880f883a 	mov	r7,r17
 8401d58:	d8802a15 	stw	r2,168(sp)
 8401d5c:	d8c02b15 	stw	r3,172(sp)
 8401d60:	84038300 	call	8403830 <__muldf3>
 8401d64:	0011883a 	mov	r8,zero
 8401d68:	026ff434 	movhi	r9,49104
 8401d6c:	480f883a 	mov	r7,r9
 8401d70:	8009883a 	mov	r4,r16
 8401d74:	880b883a 	mov	r5,r17
 8401d78:	400d883a 	mov	r6,r8
 8401d7c:	1029883a 	mov	r20,r2
 8401d80:	182b883a 	mov	r21,r3
 8401d84:	84038300 	call	8403830 <__muldf3>
 8401d88:	02155574 	movhi	r8,21845
 8401d8c:	42155544 	addi	r8,r8,21845
 8401d90:	024ff574 	movhi	r9,16341
 8401d94:	4a555544 	addi	r9,r9,21845
 8401d98:	480f883a 	mov	r7,r9
 8401d9c:	400d883a 	mov	r6,r8
 8401da0:	180b883a 	mov	r5,r3
 8401da4:	1009883a 	mov	r4,r2
 8401da8:	84037bc0 	call	84037bc <__adddf3>
 8401dac:	180f883a 	mov	r7,r3
 8401db0:	8009883a 	mov	r4,r16
 8401db4:	880b883a 	mov	r5,r17
 8401db8:	100d883a 	mov	r6,r2
 8401dbc:	84038300 	call	8403830 <__muldf3>
 8401dc0:	0011883a 	mov	r8,zero
 8401dc4:	024ff834 	movhi	r9,16352
 8401dc8:	480b883a 	mov	r5,r9
 8401dcc:	4009883a 	mov	r4,r8
 8401dd0:	180f883a 	mov	r7,r3
 8401dd4:	100d883a 	mov	r6,r2
 8401dd8:	840373c0 	call	840373c <__subdf3>
 8401ddc:	180f883a 	mov	r7,r3
 8401de0:	a80b883a 	mov	r5,r21
 8401de4:	a009883a 	mov	r4,r20
 8401de8:	100d883a 	mov	r6,r2
 8401dec:	84038300 	call	8403830 <__muldf3>
 8401df0:	02194b34 	movhi	r8,25900
 8401df4:	4220bf84 	addi	r8,r8,-32002
 8401df8:	026ffdf4 	movhi	r9,49143
 8401dfc:	4a4551c4 	addi	r9,r9,5447
 8401e00:	480f883a 	mov	r7,r9
 8401e04:	400d883a 	mov	r6,r8
 8401e08:	180b883a 	mov	r5,r3
 8401e0c:	1009883a 	mov	r4,r2
 8401e10:	84038300 	call	8403830 <__muldf3>
 8401e14:	d9402b17 	ldw	r5,172(sp)
 8401e18:	d9002a17 	ldw	r4,168(sp)
 8401e1c:	180f883a 	mov	r7,r3
 8401e20:	100d883a 	mov	r6,r2
 8401e24:	84037bc0 	call	84037bc <__adddf3>
 8401e28:	100d883a 	mov	r6,r2
 8401e2c:	b009883a 	mov	r4,r22
 8401e30:	b80b883a 	mov	r5,r23
 8401e34:	180f883a 	mov	r7,r3
 8401e38:	1021883a 	mov	r16,r2
 8401e3c:	1823883a 	mov	r17,r3
 8401e40:	84037bc0 	call	84037bc <__adddf3>
 8401e44:	180b883a 	mov	r5,r3
 8401e48:	0009883a 	mov	r4,zero
 8401e4c:	b00d883a 	mov	r6,r22
 8401e50:	b80f883a 	mov	r7,r23
 8401e54:	d9001b15 	stw	r4,108(sp)
 8401e58:	d8c01c15 	stw	r3,112(sp)
 8401e5c:	840373c0 	call	840373c <__subdf3>
 8401e60:	1011883a 	mov	r8,r2
 8401e64:	1813883a 	mov	r9,r3
 8401e68:	8009883a 	mov	r4,r16
 8401e6c:	880b883a 	mov	r5,r17
 8401e70:	003f0b06 	br	8401aa0 <__ieee754_pow+0x998>
 8401e74:	0005883a 	mov	r2,zero
 8401e78:	00d0d034 	movhi	r3,17216
 8401e7c:	580b883a 	mov	r5,r11
 8401e80:	5009883a 	mov	r4,r10
 8401e84:	180f883a 	mov	r7,r3
 8401e88:	100d883a 	mov	r6,r2
 8401e8c:	84038300 	call	8403830 <__muldf3>
 8401e90:	1015883a 	mov	r10,r2
 8401e94:	1825883a 	mov	r18,r3
 8401e98:	017ff2c4 	movi	r5,-53
 8401e9c:	003d6606 	br	8401438 <__ieee754_pow+0x330>
 8401ea0:	b03d300e 	bge	r22,zero,8401364 <__ieee754_pow+0x25c>
 8401ea4:	d9402917 	ldw	r5,164(sp)
 8401ea8:	28e0003c 	xorhi	r3,r5,32768
 8401eac:	d8c02915 	stw	r3,164(sp)
 8401eb0:	003cbc06 	br	84011a4 <__ieee754_pow+0x9c>
 8401eb4:	00800044 	movi	r2,1
 8401eb8:	e0bd1a1e 	bne	fp,r2,8401324 <__ieee754_pow+0x21c>
 8401ebc:	48e0003c 	xorhi	r3,r9,32768
 8401ec0:	da002815 	stw	r8,160(sp)
 8401ec4:	d8c02915 	stw	r3,164(sp)
 8401ec8:	003cb606 	br	84011a4 <__ieee754_pow+0x9c>
 8401ecc:	d9001817 	ldw	r4,96(sp)
 8401ed0:	00a00034 	movhi	r2,32768
 8401ed4:	10bfffc4 	addi	r2,r2,-1
 8401ed8:	20b8703a 	and	fp,r4,r2
 8401edc:	008ff834 	movhi	r2,16352
 8401ee0:	1700fc16 	blt	r2,fp,84022d4 <__ieee754_pow+0x11cc>
 8401ee4:	0039883a 	mov	fp,zero
 8401ee8:	d8001315 	stw	zero,76(sp)
 8401eec:	0025883a 	mov	r18,zero
 8401ef0:	0005883a 	mov	r2,zero
 8401ef4:	00cff9b4 	movhi	r3,16358
 8401ef8:	18cb90c4 	addi	r3,r3,11843
 8401efc:	9009883a 	mov	r4,r18
 8401f00:	b80b883a 	mov	r5,r23
 8401f04:	180f883a 	mov	r7,r3
 8401f08:	100d883a 	mov	r6,r2
 8401f0c:	84038300 	call	8403830 <__muldf3>
 8401f10:	d9c02017 	ldw	r7,128(sp)
 8401f14:	d9801f17 	ldw	r6,124(sp)
 8401f18:	9009883a 	mov	r4,r18
 8401f1c:	b80b883a 	mov	r5,r23
 8401f20:	b823883a 	mov	r17,r23
 8401f24:	102d883a 	mov	r22,r2
 8401f28:	182f883a 	mov	r23,r3
 8401f2c:	840373c0 	call	840373c <__subdf3>
 8401f30:	d9401e17 	ldw	r5,120(sp)
 8401f34:	d9001d17 	ldw	r4,116(sp)
 8401f38:	180f883a 	mov	r7,r3
 8401f3c:	100d883a 	mov	r6,r2
 8401f40:	840373c0 	call	840373c <__subdf3>
 8401f44:	023fbeb4 	movhi	r8,65274
 8401f48:	420e7bc4 	addi	r8,r8,14831
 8401f4c:	024ff9b4 	movhi	r9,16358
 8401f50:	4a4b9084 	addi	r9,r9,11842
 8401f54:	480f883a 	mov	r7,r9
 8401f58:	400d883a 	mov	r6,r8
 8401f5c:	180b883a 	mov	r5,r3
 8401f60:	1009883a 	mov	r4,r2
 8401f64:	84038300 	call	8403830 <__muldf3>
 8401f68:	02032a34 	movhi	r8,3240
 8401f6c:	421b0e44 	addi	r8,r8,27705
 8401f70:	026f8834 	movhi	r9,48672
 8401f74:	4a571844 	addi	r9,r9,23649
 8401f78:	480f883a 	mov	r7,r9
 8401f7c:	400d883a 	mov	r6,r8
 8401f80:	9009883a 	mov	r4,r18
 8401f84:	880b883a 	mov	r5,r17
 8401f88:	1021883a 	mov	r16,r2
 8401f8c:	1823883a 	mov	r17,r3
 8401f90:	84038300 	call	8403830 <__muldf3>
 8401f94:	180f883a 	mov	r7,r3
 8401f98:	880b883a 	mov	r5,r17
 8401f9c:	8009883a 	mov	r4,r16
 8401fa0:	100d883a 	mov	r6,r2
 8401fa4:	84037bc0 	call	84037bc <__adddf3>
 8401fa8:	100d883a 	mov	r6,r2
 8401fac:	b009883a 	mov	r4,r22
 8401fb0:	b80b883a 	mov	r5,r23
 8401fb4:	180f883a 	mov	r7,r3
 8401fb8:	1021883a 	mov	r16,r2
 8401fbc:	1823883a 	mov	r17,r3
 8401fc0:	84037bc0 	call	84037bc <__adddf3>
 8401fc4:	1009883a 	mov	r4,r2
 8401fc8:	180b883a 	mov	r5,r3
 8401fcc:	b00d883a 	mov	r6,r22
 8401fd0:	b80f883a 	mov	r7,r23
 8401fd4:	d8803915 	stw	r2,228(sp)
 8401fd8:	d8c03a15 	stw	r3,232(sp)
 8401fdc:	d8801115 	stw	r2,68(sp)
 8401fe0:	d8c01215 	stw	r3,72(sp)
 8401fe4:	840373c0 	call	840373c <__subdf3>
 8401fe8:	180f883a 	mov	r7,r3
 8401fec:	8009883a 	mov	r4,r16
 8401ff0:	880b883a 	mov	r5,r17
 8401ff4:	100d883a 	mov	r6,r2
 8401ff8:	840373c0 	call	840373c <__subdf3>
 8401ffc:	d9001117 	ldw	r4,68(sp)
 8402000:	d9403a17 	ldw	r5,232(sp)
 8402004:	1029883a 	mov	r20,r2
 8402008:	200d883a 	mov	r6,r4
 840200c:	280f883a 	mov	r7,r5
 8402010:	182b883a 	mov	r21,r3
 8402014:	84038300 	call	8403830 <__muldf3>
 8402018:	1021883a 	mov	r16,r2
 840201c:	1823883a 	mov	r17,r3
 8402020:	009caff4 	movhi	r2,29375
 8402024:	10a93404 	addi	r2,r2,-23344
 8402028:	00cf99b4 	movhi	r3,15974
 840202c:	18cdda44 	addi	r3,r3,14185
 8402030:	8009883a 	mov	r4,r16
 8402034:	880b883a 	mov	r5,r17
 8402038:	180f883a 	mov	r7,r3
 840203c:	100d883a 	mov	r6,r2
 8402040:	84038300 	call	8403830 <__muldf3>
 8402044:	023174b4 	movhi	r8,50642
 8402048:	421afc44 	addi	r8,r8,27633
 840204c:	024faf34 	movhi	r9,16060
 8402050:	4a6f5044 	addi	r9,r9,-17087
 8402054:	480f883a 	mov	r7,r9
 8402058:	400d883a 	mov	r6,r8
 840205c:	180b883a 	mov	r5,r3
 8402060:	1009883a 	mov	r4,r2
 8402064:	840373c0 	call	840373c <__subdf3>
 8402068:	180f883a 	mov	r7,r3
 840206c:	8009883a 	mov	r4,r16
 8402070:	880b883a 	mov	r5,r17
 8402074:	100d883a 	mov	r6,r2
 8402078:	84038300 	call	8403830 <__muldf3>
 840207c:	022bc9b4 	movhi	r8,44838
 8402080:	42378b04 	addi	r8,r8,-8660
 8402084:	024fc474 	movhi	r9,16145
 8402088:	4a559a84 	addi	r9,r9,22122
 840208c:	480f883a 	mov	r7,r9
 8402090:	400d883a 	mov	r6,r8
 8402094:	180b883a 	mov	r5,r3
 8402098:	1009883a 	mov	r4,r2
 840209c:	84037bc0 	call	84037bc <__adddf3>
 84020a0:	180f883a 	mov	r7,r3
 84020a4:	8009883a 	mov	r4,r16
 84020a8:	880b883a 	mov	r5,r17
 84020ac:	100d883a 	mov	r6,r2
 84020b0:	84038300 	call	8403830 <__muldf3>
 84020b4:	0205aff4 	movhi	r8,5823
 84020b8:	422f64c4 	addi	r8,r8,-17005
 84020bc:	024fd9f4 	movhi	r9,16231
 84020c0:	4a705b04 	addi	r9,r9,-16020
 84020c4:	480f883a 	mov	r7,r9
 84020c8:	400d883a 	mov	r6,r8
 84020cc:	180b883a 	mov	r5,r3
 84020d0:	1009883a 	mov	r4,r2
 84020d4:	840373c0 	call	840373c <__subdf3>
 84020d8:	180f883a 	mov	r7,r3
 84020dc:	8009883a 	mov	r4,r16
 84020e0:	880b883a 	mov	r5,r17
 84020e4:	100d883a 	mov	r6,r2
 84020e8:	84038300 	call	8403830 <__muldf3>
 84020ec:	02155574 	movhi	r8,21845
 84020f0:	42154f84 	addi	r8,r8,21822
 84020f4:	024ff174 	movhi	r9,16325
 84020f8:	4a555544 	addi	r9,r9,21845
 84020fc:	480f883a 	mov	r7,r9
 8402100:	400d883a 	mov	r6,r8
 8402104:	180b883a 	mov	r5,r3
 8402108:	1009883a 	mov	r4,r2
 840210c:	84037bc0 	call	84037bc <__adddf3>
 8402110:	180f883a 	mov	r7,r3
 8402114:	8009883a 	mov	r4,r16
 8402118:	880b883a 	mov	r5,r17
 840211c:	100d883a 	mov	r6,r2
 8402120:	84038300 	call	8403830 <__muldf3>
 8402124:	d9001117 	ldw	r4,68(sp)
 8402128:	d9403a17 	ldw	r5,232(sp)
 840212c:	180f883a 	mov	r7,r3
 8402130:	100d883a 	mov	r6,r2
 8402134:	840373c0 	call	840373c <__subdf3>
 8402138:	d9001117 	ldw	r4,68(sp)
 840213c:	d9403a17 	ldw	r5,232(sp)
 8402140:	100d883a 	mov	r6,r2
 8402144:	180f883a 	mov	r7,r3
 8402148:	1021883a 	mov	r16,r2
 840214c:	1823883a 	mov	r17,r3
 8402150:	84038300 	call	8403830 <__muldf3>
 8402154:	0011883a 	mov	r8,zero
 8402158:	02500034 	movhi	r9,16384
 840215c:	480f883a 	mov	r7,r9
 8402160:	400d883a 	mov	r6,r8
 8402164:	8009883a 	mov	r4,r16
 8402168:	880b883a 	mov	r5,r17
 840216c:	1021883a 	mov	r16,r2
 8402170:	1823883a 	mov	r17,r3
 8402174:	840373c0 	call	840373c <__subdf3>
 8402178:	180f883a 	mov	r7,r3
 840217c:	880b883a 	mov	r5,r17
 8402180:	8009883a 	mov	r4,r16
 8402184:	100d883a 	mov	r6,r2
 8402188:	8403bf40 	call	8403bf4 <__divdf3>
 840218c:	d9001117 	ldw	r4,68(sp)
 8402190:	d9403a17 	ldw	r5,232(sp)
 8402194:	a00d883a 	mov	r6,r20
 8402198:	a80f883a 	mov	r7,r21
 840219c:	1025883a 	mov	r18,r2
 84021a0:	1827883a 	mov	r19,r3
 84021a4:	84038300 	call	8403830 <__muldf3>
 84021a8:	180f883a 	mov	r7,r3
 84021ac:	a009883a 	mov	r4,r20
 84021b0:	a80b883a 	mov	r5,r21
 84021b4:	100d883a 	mov	r6,r2
 84021b8:	84037bc0 	call	84037bc <__adddf3>
 84021bc:	180f883a 	mov	r7,r3
 84021c0:	980b883a 	mov	r5,r19
 84021c4:	9009883a 	mov	r4,r18
 84021c8:	100d883a 	mov	r6,r2
 84021cc:	840373c0 	call	840373c <__subdf3>
 84021d0:	d9801117 	ldw	r6,68(sp)
 84021d4:	d9c03a17 	ldw	r7,232(sp)
 84021d8:	180b883a 	mov	r5,r3
 84021dc:	1009883a 	mov	r4,r2
 84021e0:	840373c0 	call	840373c <__subdf3>
 84021e4:	0011883a 	mov	r8,zero
 84021e8:	024ffc34 	movhi	r9,16368
 84021ec:	480b883a 	mov	r5,r9
 84021f0:	180f883a 	mov	r7,r3
 84021f4:	4009883a 	mov	r4,r8
 84021f8:	100d883a 	mov	r6,r2
 84021fc:	840373c0 	call	840373c <__subdf3>
 8402200:	100b883a 	mov	r5,r2
 8402204:	d8801317 	ldw	r2,76(sp)
 8402208:	10d5883a 	add	r10,r2,r3
 840220c:	5005d53a 	srai	r2,r10,20
 8402210:	0080720e 	bge	zero,r2,84023dc <__ieee754_pow+0x12d4>
 8402214:	2811883a 	mov	r8,r5
 8402218:	5013883a 	mov	r9,r10
 840221c:	d9c01a17 	ldw	r7,104(sp)
 8402220:	d9801917 	ldw	r6,100(sp)
 8402224:	480b883a 	mov	r5,r9
 8402228:	4009883a 	mov	r4,r8
 840222c:	003e8206 	br	8401c38 <__ieee754_pow+0xb30>
 8402230:	0009883a 	mov	r4,zero
 8402234:	800b883a 	mov	r5,r16
 8402238:	a80f883a 	mov	r7,r21
 840223c:	a00d883a 	mov	r6,r20
 8402240:	003c2b06 	br	84012f0 <__ieee754_pow+0x1e8>
 8402244:	d9001d17 	ldw	r4,116(sp)
 8402248:	00994b34 	movhi	r2,25900
 840224c:	10a0bf84 	addi	r2,r2,-32002
 8402250:	00cf25f4 	movhi	r3,15511
 8402254:	18c551c4 	addi	r3,r3,5447
 8402258:	a80b883a 	mov	r5,r21
 840225c:	180f883a 	mov	r7,r3
 8402260:	100d883a 	mov	r6,r2
 8402264:	84037bc0 	call	84037bc <__adddf3>
 8402268:	d9801f17 	ldw	r6,124(sp)
 840226c:	880b883a 	mov	r5,r17
 8402270:	8009883a 	mov	r4,r16
 8402274:	980f883a 	mov	r7,r19
 8402278:	1021883a 	mov	r16,r2
 840227c:	1823883a 	mov	r17,r3
 8402280:	840373c0 	call	840373c <__subdf3>
 8402284:	180f883a 	mov	r7,r3
 8402288:	880b883a 	mov	r5,r17
 840228c:	8009883a 	mov	r4,r16
 8402290:	100d883a 	mov	r6,r2
 8402294:	8403f5c0 	call	8403f5c <__gtdf2>
 8402298:	00bf0c0e 	bge	zero,r2,8401ecc <__ieee754_pow+0xdc4>
 840229c:	04220034 	movhi	r16,34816
 84022a0:	841d6704 	addi	r16,r16,30108
 84022a4:	045f8e34 	movhi	r17,32312
 84022a8:	8c790f04 	addi	r17,r17,-7108
 84022ac:	d9401a17 	ldw	r5,104(sp)
 84022b0:	d9001917 	ldw	r4,100(sp)
 84022b4:	800d883a 	mov	r6,r16
 84022b8:	880f883a 	mov	r7,r17
 84022bc:	84038300 	call	8403830 <__muldf3>
 84022c0:	180b883a 	mov	r5,r3
 84022c4:	800d883a 	mov	r6,r16
 84022c8:	880f883a 	mov	r7,r17
 84022cc:	1009883a 	mov	r4,r2
 84022d0:	003e5906 	br	8401c38 <__ieee754_pow+0xb30>
 84022d4:	e005d53a 	srai	r2,fp,20
 84022d8:	01800434 	movhi	r6,16
 84022dc:	d9401817 	ldw	r5,96(sp)
 84022e0:	10bf0084 	addi	r2,r2,-1022
 84022e4:	308dd83a 	sra	r6,r6,r2
 84022e8:	02000434 	movhi	r8,16
 84022ec:	423fffc4 	addi	r8,r8,-1
 84022f0:	0005883a 	mov	r2,zero
 84022f4:	298d883a 	add	r6,r5,r6
 84022f8:	318b883a 	add	r5,r6,r6
 84022fc:	320e703a 	and	r7,r6,r8
 8402300:	1013883a 	mov	r9,r2
 8402304:	280ad57a 	srli	r5,r5,21
 8402308:	d8801817 	ldw	r2,96(sp)
 840230c:	01000504 	movi	r4,20
 8402310:	297f0044 	addi	r5,r5,-1023
 8402314:	4151d83a 	sra	r8,r8,r5
 8402318:	39c00434 	orhi	r7,r7,16
 840231c:	2149c83a 	sub	r4,r4,r5
 8402320:	0210303a 	nor	r8,zero,r8
 8402324:	3939d83a 	sra	fp,r7,r4
 8402328:	320e703a 	and	r7,r6,r8
 840232c:	10002916 	blt	r2,zero,84023d4 <__ieee754_pow+0x12cc>
 8402330:	d9402017 	ldw	r5,128(sp)
 8402334:	d9001f17 	ldw	r4,124(sp)
 8402338:	480d883a 	mov	r6,r9
 840233c:	840373c0 	call	840373c <__subdf3>
 8402340:	180b883a 	mov	r5,r3
 8402344:	d9402015 	stw	r5,128(sp)
 8402348:	280f883a 	mov	r7,r5
 840234c:	d9001d17 	ldw	r4,116(sp)
 8402350:	d9401e17 	ldw	r5,120(sp)
 8402354:	1007883a 	mov	r3,r2
 8402358:	180d883a 	mov	r6,r3
 840235c:	d8801f15 	stw	r2,124(sp)
 8402360:	84037bc0 	call	84037bc <__adddf3>
 8402364:	180b883a 	mov	r5,r3
 8402368:	e006953a 	slli	r3,fp,20
 840236c:	282f883a 	mov	r23,r5
 8402370:	d8c01315 	stw	r3,76(sp)
 8402374:	003edd06 	br	8401eec <__ieee754_pow+0xde4>
 8402378:	383bc81e 	bne	r7,zero,840129c <__ieee754_pow+0x194>
 840237c:	28c5c83a 	sub	r2,r5,r3
 8402380:	8087d83a 	sra	r3,r16,r2
 8402384:	1884983a 	sll	r2,r3,r2
 8402388:	80801b26 	beq	r16,r2,84023f8 <__ieee754_pow+0x12f0>
 840238c:	0039883a 	mov	fp,zero
 8402390:	003b9d06 	br	8401208 <__ieee754_pow+0x100>
 8402394:	d9801f17 	ldw	r6,124(sp)
 8402398:	8009883a 	mov	r4,r16
 840239c:	880b883a 	mov	r5,r17
 84023a0:	980f883a 	mov	r7,r19
 84023a4:	840373c0 	call	840373c <__subdf3>
 84023a8:	d9001d17 	ldw	r4,116(sp)
 84023ac:	a80b883a 	mov	r5,r21
 84023b0:	180f883a 	mov	r7,r3
 84023b4:	100d883a 	mov	r6,r2
 84023b8:	840406c0 	call	840406c <__ledf2>
 84023bc:	00bfc516 	blt	zero,r2,84022d4 <__ieee754_pow+0x11cc>
 84023c0:	0430be74 	movhi	r16,49913
 84023c4:	843cd644 	addi	r16,r16,-3239
 84023c8:	04406974 	movhi	r17,421
 84023cc:	8c5b87c4 	addi	r17,r17,28191
 84023d0:	003fb606 	br	84022ac <__ieee754_pow+0x11a4>
 84023d4:	0739c83a 	sub	fp,zero,fp
 84023d8:	003fd506 	br	8402330 <__ieee754_pow+0x1228>
 84023dc:	2809883a 	mov	r4,r5
 84023e0:	e00d883a 	mov	r6,fp
 84023e4:	180b883a 	mov	r5,r3
 84023e8:	840295c0 	call	840295c <scalbn>
 84023ec:	1011883a 	mov	r8,r2
 84023f0:	1813883a 	mov	r9,r3
 84023f4:	003f8906 	br	840221c <__ieee754_pow+0x1114>
 84023f8:	18c0004c 	andi	r3,r3,1
 84023fc:	00800084 	movi	r2,2
 8402400:	10f9c83a 	sub	fp,r2,r3
 8402404:	003b8006 	br	8401208 <__ieee754_pow+0x100>

08402408 <__ieee754_sqrt>:
 8402408:	defffd04 	addi	sp,sp,-12
 840240c:	dc000015 	stw	r16,0(sp)
 8402410:	009ffc34 	movhi	r2,32752
 8402414:	2021883a 	mov	r16,r4
 8402418:	291ffc2c 	andhi	r4,r5,32752
 840241c:	dc400115 	stw	r17,4(sp)
 8402420:	dfc00215 	stw	ra,8(sp)
 8402424:	2823883a 	mov	r17,r5
 8402428:	280f883a 	mov	r7,r5
 840242c:	2807883a 	mov	r3,r5
 8402430:	8011883a 	mov	r8,r16
 8402434:	20807d26 	beq	r4,r2,840262c <__ieee754_sqrt+0x224>
 8402438:	01408d0e 	bge	zero,r5,8402670 <__ieee754_sqrt+0x268>
 840243c:	380dd53a 	srai	r6,r7,20
 8402440:	3000131e 	bne	r6,zero,8402490 <__ieee754_sqrt+0x88>
 8402444:	1800041e 	bne	r3,zero,8402458 <__ieee754_sqrt+0x50>
 8402448:	400ed2fa 	srli	r7,r8,11
 840244c:	31bffac4 	addi	r6,r6,-21
 8402450:	4010957a 	slli	r8,r8,21
 8402454:	383ffc26 	beq	r7,zero,8402448 <__ieee754_sqrt+0x40>
 8402458:	3880042c 	andhi	r2,r7,16
 840245c:	1000991e 	bne	r2,zero,84026c4 <__ieee754_sqrt+0x2bc>
 8402460:	0009883a 	mov	r4,zero
 8402464:	39cf883a 	add	r7,r7,r7
 8402468:	3880042c 	andhi	r2,r7,16
 840246c:	21000044 	addi	r4,r4,1
 8402470:	103ffc26 	beq	r2,zero,8402464 <__ieee754_sqrt+0x5c>
 8402474:	00800804 	movi	r2,32
 8402478:	1105c83a 	sub	r2,r2,r4
 840247c:	4086d83a 	srl	r3,r8,r2
 8402480:	4110983a 	sll	r8,r8,r4
 8402484:	3105c83a 	sub	r2,r6,r4
 8402488:	38ceb03a 	or	r7,r7,r3
 840248c:	11800044 	addi	r6,r2,1
 8402490:	31bf0044 	addi	r6,r6,-1023
 8402494:	30c0004c 	andi	r3,r6,1
 8402498:	00800434 	movhi	r2,16
 840249c:	10bfffc4 	addi	r2,r2,-1
 84024a0:	3884703a 	and	r2,r7,r2
 84024a4:	1807003a 	cmpeq	r3,r3,zero
 84024a8:	11000434 	orhi	r4,r2,16
 84024ac:	18005426 	beq	r3,zero,8402600 <__ieee754_sqrt+0x1f8>
 84024b0:	4004d7fa 	srli	r2,r8,31
 84024b4:	4207883a 	add	r3,r8,r8
 84024b8:	02800834 	movhi	r10,32
 84024bc:	1105883a 	add	r2,r2,r4
 84024c0:	2089883a 	add	r4,r4,r2
 84024c4:	0011883a 	mov	r8,zero
 84024c8:	000b883a 	mov	r5,zero
 84024cc:	0013883a 	mov	r9,zero
 84024d0:	02c00584 	movi	r11,22
 84024d4:	520f883a 	add	r7,r10,r8
 84024d8:	1804d7fa 	srli	r2,r3,31
 84024dc:	4a400044 	addi	r9,r9,1
 84024e0:	18c7883a 	add	r3,r3,r3
 84024e4:	21c00316 	blt	r4,r7,84024f4 <__ieee754_sqrt+0xec>
 84024e8:	21c9c83a 	sub	r4,r4,r7
 84024ec:	2a8b883a 	add	r5,r5,r10
 84024f0:	51d1883a 	add	r8,r10,r7
 84024f4:	1105883a 	add	r2,r2,r4
 84024f8:	5014d07a 	srli	r10,r10,1
 84024fc:	2089883a 	add	r4,r4,r2
 8402500:	4afff41e 	bne	r9,r11,84024d4 <__ieee754_sqrt+0xcc>
 8402504:	02600034 	movhi	r9,32768
 8402508:	0017883a 	mov	r11,zero
 840250c:	0019883a 	mov	r12,zero
 8402510:	0015883a 	mov	r10,zero
 8402514:	4821883a 	mov	r16,r9
 8402518:	03c00804 	movi	r15,32
 840251c:	00000806 	br	8402540 <__ieee754_sqrt+0x138>
 8402520:	22003426 	beq	r4,r8,84025f4 <__ieee754_sqrt+0x1ec>
 8402524:	1804d7fa 	srli	r2,r3,31
 8402528:	52800044 	addi	r10,r10,1
 840252c:	18c7883a 	add	r3,r3,r3
 8402530:	1105883a 	add	r2,r2,r4
 8402534:	2089883a 	add	r4,r4,r2
 8402538:	4812d07a 	srli	r9,r9,1
 840253c:	53c01326 	beq	r10,r15,840258c <__ieee754_sqrt+0x184>
 8402540:	4acf883a 	add	r7,r9,r11
 8402544:	413ff60e 	bge	r8,r4,8402520 <__ieee754_sqrt+0x118>
 8402548:	38a0002c 	andhi	r2,r7,32768
 840254c:	3a57883a 	add	r11,r7,r9
 8402550:	14002426 	beq	r2,r16,84025e4 <__ieee754_sqrt+0x1dc>
 8402554:	4005883a 	mov	r2,r8
 8402558:	2209c83a 	sub	r4,r4,r8
 840255c:	19c0012e 	bgeu	r3,r7,8402564 <__ieee754_sqrt+0x15c>
 8402560:	213fffc4 	addi	r4,r4,-1
 8402564:	19c7c83a 	sub	r3,r3,r7
 8402568:	1011883a 	mov	r8,r2
 840256c:	1804d7fa 	srli	r2,r3,31
 8402570:	52800044 	addi	r10,r10,1
 8402574:	6259883a 	add	r12,r12,r9
 8402578:	1105883a 	add	r2,r2,r4
 840257c:	18c7883a 	add	r3,r3,r3
 8402580:	2089883a 	add	r4,r4,r2
 8402584:	4812d07a 	srli	r9,r9,1
 8402588:	53ffed1e 	bne	r10,r15,8402540 <__ieee754_sqrt+0x138>
 840258c:	20c4b03a 	or	r2,r4,r3
 8402590:	1000201e 	bne	r2,zero,8402614 <__ieee754_sqrt+0x20c>
 8402594:	600ed07a 	srli	r7,r12,1
 8402598:	2880004c 	andi	r2,r5,1
 840259c:	1005003a 	cmpeq	r2,r2,zero
 84025a0:	1000011e 	bne	r2,zero,84025a8 <__ieee754_sqrt+0x1a0>
 84025a4:	39e00034 	orhi	r7,r7,32768
 84025a8:	300dd07a 	srai	r6,r6,1
 84025ac:	280bd07a 	srai	r5,r5,1
 84025b0:	010ff834 	movhi	r4,16352
 84025b4:	300c953a 	slli	r6,r6,20
 84025b8:	290b883a 	add	r5,r5,r4
 84025bc:	3821883a 	mov	r16,r7
 84025c0:	299d883a 	add	r14,r5,r6
 84025c4:	7023883a 	mov	r17,r14
 84025c8:	8005883a 	mov	r2,r16
 84025cc:	8807883a 	mov	r3,r17
 84025d0:	dfc00217 	ldw	ra,8(sp)
 84025d4:	dc400117 	ldw	r17,4(sp)
 84025d8:	dc000017 	ldw	r16,0(sp)
 84025dc:	dec00304 	addi	sp,sp,12
 84025e0:	f800283a 	ret
 84025e4:	5884703a 	and	r2,r11,r2
 84025e8:	103fda1e 	bne	r2,zero,8402554 <__ieee754_sqrt+0x14c>
 84025ec:	40800044 	addi	r2,r8,1
 84025f0:	003fd906 	br	8402558 <__ieee754_sqrt+0x150>
 84025f4:	19ffd42e 	bgeu	r3,r7,8402548 <__ieee754_sqrt+0x140>
 84025f8:	2011883a 	mov	r8,r4
 84025fc:	003fc906 	br	8402524 <__ieee754_sqrt+0x11c>
 8402600:	4004d7fa 	srli	r2,r8,31
 8402604:	4211883a 	add	r8,r8,r8
 8402608:	1105883a 	add	r2,r2,r4
 840260c:	2089883a 	add	r4,r4,r2
 8402610:	003fa706 	br	84024b0 <__ieee754_sqrt+0xa8>
 8402614:	00bfffc4 	movi	r2,-1
 8402618:	60802726 	beq	r12,r2,84026b8 <__ieee754_sqrt+0x2b0>
 840261c:	6080004c 	andi	r2,r12,1
 8402620:	6085883a 	add	r2,r12,r2
 8402624:	100ed07a 	srli	r7,r2,1
 8402628:	003fdb06 	br	8402598 <__ieee754_sqrt+0x190>
 840262c:	8009883a 	mov	r4,r16
 8402630:	800d883a 	mov	r6,r16
 8402634:	84038300 	call	8403830 <__muldf3>
 8402638:	180f883a 	mov	r7,r3
 840263c:	880b883a 	mov	r5,r17
 8402640:	8009883a 	mov	r4,r16
 8402644:	100d883a 	mov	r6,r2
 8402648:	84037bc0 	call	84037bc <__adddf3>
 840264c:	1021883a 	mov	r16,r2
 8402650:	1823883a 	mov	r17,r3
 8402654:	8005883a 	mov	r2,r16
 8402658:	8807883a 	mov	r3,r17
 840265c:	dfc00217 	ldw	ra,8(sp)
 8402660:	dc400117 	ldw	r17,4(sp)
 8402664:	dc000017 	ldw	r16,0(sp)
 8402668:	dec00304 	addi	sp,sp,12
 840266c:	f800283a 	ret
 8402670:	00a00034 	movhi	r2,32768
 8402674:	10bfffc4 	addi	r2,r2,-1
 8402678:	2884703a 	and	r2,r5,r2
 840267c:	8084b03a 	or	r2,r16,r2
 8402680:	103fd126 	beq	r2,zero,84025c8 <__ieee754_sqrt+0x1c0>
 8402684:	283f6d26 	beq	r5,zero,840243c <__ieee754_sqrt+0x34>
 8402688:	280f883a 	mov	r7,r5
 840268c:	8009883a 	mov	r4,r16
 8402690:	800d883a 	mov	r6,r16
 8402694:	840373c0 	call	840373c <__subdf3>
 8402698:	1009883a 	mov	r4,r2
 840269c:	180b883a 	mov	r5,r3
 84026a0:	100d883a 	mov	r6,r2
 84026a4:	180f883a 	mov	r7,r3
 84026a8:	8403bf40 	call	8403bf4 <__divdf3>
 84026ac:	1021883a 	mov	r16,r2
 84026b0:	1823883a 	mov	r17,r3
 84026b4:	003fc406 	br	84025c8 <__ieee754_sqrt+0x1c0>
 84026b8:	29400044 	addi	r5,r5,1
 84026bc:	000f883a 	mov	r7,zero
 84026c0:	003fb506 	br	8402598 <__ieee754_sqrt+0x190>
 84026c4:	0009883a 	mov	r4,zero
 84026c8:	00800804 	movi	r2,32
 84026cc:	003f6b06 	br	840247c <__ieee754_sqrt+0x74>

084026d0 <fabs>:
 84026d0:	01e00034 	movhi	r7,32768
 84026d4:	39ffffc4 	addi	r7,r7,-1
 84026d8:	394e703a 	and	r7,r7,r5
 84026dc:	2005883a 	mov	r2,r4
 84026e0:	3807883a 	mov	r3,r7
 84026e4:	f800283a 	ret

084026e8 <finite>:
 84026e8:	00a00034 	movhi	r2,32768
 84026ec:	10bfffc4 	addi	r2,r2,-1
 84026f0:	2884703a 	and	r2,r5,r2
 84026f4:	01600434 	movhi	r5,32784
 84026f8:	1145883a 	add	r2,r2,r5
 84026fc:	1004d7fa 	srli	r2,r2,31
 8402700:	f800283a 	ret

08402704 <__isnand>:
 8402704:	200d883a 	mov	r6,r4
 8402708:	0109c83a 	sub	r4,zero,r4
 840270c:	2188b03a 	or	r4,r4,r6
 8402710:	2008d7fa 	srli	r4,r4,31
 8402714:	00a00034 	movhi	r2,32768
 8402718:	10bfffc4 	addi	r2,r2,-1
 840271c:	1144703a 	and	r2,r2,r5
 8402720:	2088b03a 	or	r4,r4,r2
 8402724:	009ffc34 	movhi	r2,32752
 8402728:	1105c83a 	sub	r2,r2,r4
 840272c:	1004d7fa 	srli	r2,r2,31
 8402730:	f800283a 	ret

08402734 <matherr>:
 8402734:	0005883a 	mov	r2,zero
 8402738:	f800283a 	ret

0840273c <nan>:
 840273c:	015ffe34 	movhi	r5,32760
 8402740:	0005883a 	mov	r2,zero
 8402744:	2807883a 	mov	r3,r5
 8402748:	f800283a 	ret

0840274c <rint>:
 840274c:	2015883a 	mov	r10,r4
 8402750:	2809d53a 	srai	r4,r5,20
 8402754:	defff904 	addi	sp,sp,-28
 8402758:	034004c4 	movi	r13,19
 840275c:	2101ffcc 	andi	r4,r4,2047
 8402760:	227f0044 	addi	r9,r4,-1023
 8402764:	dc800415 	stw	r18,16(sp)
 8402768:	dfc00615 	stw	ra,24(sp)
 840276c:	dcc00515 	stw	r19,20(sp)
 8402770:	dc400315 	stw	r17,12(sp)
 8402774:	dc000215 	stw	r16,8(sp)
 8402778:	2817883a 	mov	r11,r5
 840277c:	500d883a 	mov	r6,r10
 8402780:	2824d7fa 	srli	r18,r5,31
 8402784:	6a403016 	blt	r13,r9,8402848 <rint+0xfc>
 8402788:	48004916 	blt	r9,zero,84028b0 <rint+0x164>
 840278c:	00800434 	movhi	r2,16
 8402790:	10bfffc4 	addi	r2,r2,-1
 8402794:	1247d83a 	sra	r3,r2,r9
 8402798:	2809883a 	mov	r4,r5
 840279c:	1944703a 	and	r2,r3,r5
 84027a0:	5084b03a 	or	r2,r10,r2
 84027a4:	10001f26 	beq	r2,zero,8402824 <rint+0xd8>
 84027a8:	180ad07a 	srli	r5,r3,1
 84027ac:	5944703a 	and	r2,r11,r5
 84027b0:	5084b03a 	or	r2,r10,r2
 84027b4:	10000626 	beq	r2,zero,84027d0 <rint+0x84>
 84027b8:	4b406626 	beq	r9,r13,8402954 <rint+0x208>
 84027bc:	00c000b4 	movhi	r3,2
 84027c0:	1a47d83a 	sra	r3,r3,r9
 84027c4:	0144303a 	nor	r2,zero,r5
 84027c8:	5884703a 	and	r2,r11,r2
 84027cc:	10c8b03a 	or	r4,r2,r3
 84027d0:	900690fa 	slli	r3,r18,3
 84027d4:	00821074 	movhi	r2,2113
 84027d8:	10865504 	addi	r2,r2,6484
 84027dc:	200f883a 	mov	r7,r4
 84027e0:	1887883a 	add	r3,r3,r2
 84027e4:	1c000017 	ldw	r16,0(r3)
 84027e8:	1c400117 	ldw	r17,4(r3)
 84027ec:	8009883a 	mov	r4,r16
 84027f0:	880b883a 	mov	r5,r17
 84027f4:	84037bc0 	call	84037bc <__adddf3>
 84027f8:	d8800015 	stw	r2,0(sp)
 84027fc:	d8c00115 	stw	r3,4(sp)
 8402800:	d8800017 	ldw	r2,0(sp)
 8402804:	d8c00117 	ldw	r3,4(sp)
 8402808:	880f883a 	mov	r7,r17
 840280c:	800d883a 	mov	r6,r16
 8402810:	180b883a 	mov	r5,r3
 8402814:	1009883a 	mov	r4,r2
 8402818:	840373c0 	call	840373c <__subdf3>
 840281c:	1015883a 	mov	r10,r2
 8402820:	1817883a 	mov	r11,r3
 8402824:	5005883a 	mov	r2,r10
 8402828:	5807883a 	mov	r3,r11
 840282c:	dfc00617 	ldw	ra,24(sp)
 8402830:	dcc00517 	ldw	r19,20(sp)
 8402834:	dc800417 	ldw	r18,16(sp)
 8402838:	dc400317 	ldw	r17,12(sp)
 840283c:	dc000217 	ldw	r16,8(sp)
 8402840:	dec00704 	addi	sp,sp,28
 8402844:	f800283a 	ret
 8402848:	00800cc4 	movi	r2,51
 840284c:	12400f16 	blt	r2,r9,840288c <rint+0x140>
 8402850:	213efb44 	addi	r4,r4,-1043
 8402854:	00bfffc4 	movi	r2,-1
 8402858:	1104d83a 	srl	r2,r2,r4
 840285c:	5086703a 	and	r3,r10,r2
 8402860:	183ff026 	beq	r3,zero,8402824 <rint+0xd8>
 8402864:	100ad07a 	srli	r5,r2,1
 8402868:	5144703a 	and	r2,r10,r5
 840286c:	10000526 	beq	r2,zero,8402884 <rint+0x138>
 8402870:	00d00034 	movhi	r3,16384
 8402874:	1907d83a 	sra	r3,r3,r4
 8402878:	0144303a 	nor	r2,zero,r5
 840287c:	5084703a 	and	r2,r10,r2
 8402880:	10ccb03a 	or	r6,r2,r3
 8402884:	5809883a 	mov	r4,r11
 8402888:	003fd106 	br	84027d0 <rint+0x84>
 840288c:	00810004 	movi	r2,1024
 8402890:	48bfe41e 	bne	r9,r2,8402824 <rint+0xd8>
 8402894:	5009883a 	mov	r4,r10
 8402898:	500d883a 	mov	r6,r10
 840289c:	280f883a 	mov	r7,r5
 84028a0:	84037bc0 	call	84037bc <__adddf3>
 84028a4:	1015883a 	mov	r10,r2
 84028a8:	1817883a 	mov	r11,r3
 84028ac:	003fdd06 	br	8402824 <rint+0xd8>
 84028b0:	04e00034 	movhi	r19,32768
 84028b4:	9cffffc4 	addi	r19,r19,-1
 84028b8:	2cc4703a 	and	r2,r5,r19
 84028bc:	5084b03a 	or	r2,r10,r2
 84028c0:	103fd826 	beq	r2,zero,8402824 <rint+0xd8>
 84028c4:	00c00434 	movhi	r3,16
 84028c8:	18ffffc4 	addi	r3,r3,-1
 84028cc:	28c6703a 	and	r3,r5,r3
 84028d0:	50c6b03a 	or	r3,r10,r3
 84028d4:	00cdc83a 	sub	r6,zero,r3
 84028d8:	900a90fa 	slli	r5,r18,3
 84028dc:	1986b03a 	or	r3,r3,r6
 84028e0:	01021074 	movhi	r4,2113
 84028e4:	21065504 	addi	r4,r4,6484
 84028e8:	1806d33a 	srli	r3,r3,12
 84028ec:	290b883a 	add	r5,r5,r4
 84028f0:	2c000017 	ldw	r16,0(r5)
 84028f4:	2c400117 	ldw	r17,4(r5)
 84028f8:	593fffac 	andhi	r4,r11,65534
 84028fc:	18c0022c 	andhi	r3,r3,8
 8402900:	1906b03a 	or	r3,r3,r4
 8402904:	500d883a 	mov	r6,r10
 8402908:	180f883a 	mov	r7,r3
 840290c:	8009883a 	mov	r4,r16
 8402910:	880b883a 	mov	r5,r17
 8402914:	84037bc0 	call	84037bc <__adddf3>
 8402918:	d8800015 	stw	r2,0(sp)
 840291c:	d8c00115 	stw	r3,4(sp)
 8402920:	d8800017 	ldw	r2,0(sp)
 8402924:	d8c00117 	ldw	r3,4(sp)
 8402928:	880f883a 	mov	r7,r17
 840292c:	800d883a 	mov	r6,r16
 8402930:	180b883a 	mov	r5,r3
 8402934:	1009883a 	mov	r4,r2
 8402938:	840373c0 	call	840373c <__subdf3>
 840293c:	901297fa 	slli	r9,r18,31
 8402940:	98d0703a 	and	r8,r19,r3
 8402944:	1015883a 	mov	r10,r2
 8402948:	4250b03a 	or	r8,r8,r9
 840294c:	4017883a 	mov	r11,r8
 8402950:	003fb406 	br	8402824 <rint+0xd8>
 8402954:	01900034 	movhi	r6,16384
 8402958:	003f9d06 	br	84027d0 <rint+0x84>

0840295c <scalbn>:
 840295c:	2011883a 	mov	r8,r4
 8402960:	291ffc2c 	andhi	r4,r5,32752
 8402964:	2009d53a 	srai	r4,r4,20
 8402968:	defffd04 	addi	sp,sp,-12
 840296c:	dc000015 	stw	r16,0(sp)
 8402970:	dfc00215 	stw	ra,8(sp)
 8402974:	dc400115 	stw	r17,4(sp)
 8402978:	2813883a 	mov	r9,r5
 840297c:	2815883a 	mov	r10,r5
 8402980:	3021883a 	mov	r16,r6
 8402984:	2000281e 	bne	r4,zero,8402a28 <scalbn+0xcc>
 8402988:	00a00034 	movhi	r2,32768
 840298c:	10bfffc4 	addi	r2,r2,-1
 8402990:	2884703a 	and	r2,r5,r2
 8402994:	4084b03a 	or	r2,r8,r2
 8402998:	10001826 	beq	r2,zero,84029fc <scalbn+0xa0>
 840299c:	0005883a 	mov	r2,zero
 84029a0:	00d0d434 	movhi	r3,17232
 84029a4:	4009883a 	mov	r4,r8
 84029a8:	100d883a 	mov	r6,r2
 84029ac:	180f883a 	mov	r7,r3
 84029b0:	84038300 	call	8403830 <__muldf3>
 84029b4:	100b883a 	mov	r5,r2
 84029b8:	1011883a 	mov	r8,r2
 84029bc:	00bffff4 	movhi	r2,65535
 84029c0:	108f2c04 	addi	r2,r2,15536
 84029c4:	180d883a 	mov	r6,r3
 84029c8:	1813883a 	mov	r9,r3
 84029cc:	8080120e 	bge	r16,r2,8402a18 <scalbn+0xbc>
 84029d0:	00b0be74 	movhi	r2,49913
 84029d4:	10bcd644 	addi	r2,r2,-3239
 84029d8:	00c06974 	movhi	r3,421
 84029dc:	18db87c4 	addi	r3,r3,28191
 84029e0:	2809883a 	mov	r4,r5
 84029e4:	180f883a 	mov	r7,r3
 84029e8:	300b883a 	mov	r5,r6
 84029ec:	100d883a 	mov	r6,r2
 84029f0:	84038300 	call	8403830 <__muldf3>
 84029f4:	1011883a 	mov	r8,r2
 84029f8:	1813883a 	mov	r9,r3
 84029fc:	4005883a 	mov	r2,r8
 8402a00:	4807883a 	mov	r3,r9
 8402a04:	dfc00217 	ldw	ra,8(sp)
 8402a08:	dc400117 	ldw	r17,4(sp)
 8402a0c:	dc000017 	ldw	r16,0(sp)
 8402a10:	dec00304 	addi	sp,sp,12
 8402a14:	f800283a 	ret
 8402a18:	189ffc2c 	andhi	r2,r3,32752
 8402a1c:	1005d53a 	srai	r2,r2,20
 8402a20:	1815883a 	mov	r10,r3
 8402a24:	113ff284 	addi	r4,r2,-54
 8402a28:	0081ffc4 	movi	r2,2047
 8402a2c:	20801126 	beq	r4,r2,8402a74 <scalbn+0x118>
 8402a30:	2409883a 	add	r4,r4,r16
 8402a34:	0081ff84 	movi	r2,2046
 8402a38:	11001c16 	blt	r2,r4,8402aac <scalbn+0x150>
 8402a3c:	0100290e 	bge	zero,r4,8402ae4 <scalbn+0x188>
 8402a40:	200a953a 	slli	r5,r4,20
 8402a44:	01200434 	movhi	r4,32784
 8402a48:	213fffc4 	addi	r4,r4,-1
 8402a4c:	5108703a 	and	r4,r10,r4
 8402a50:	2148b03a 	or	r4,r4,r5
 8402a54:	2013883a 	mov	r9,r4
 8402a58:	4005883a 	mov	r2,r8
 8402a5c:	4807883a 	mov	r3,r9
 8402a60:	dfc00217 	ldw	ra,8(sp)
 8402a64:	dc400117 	ldw	r17,4(sp)
 8402a68:	dc000017 	ldw	r16,0(sp)
 8402a6c:	dec00304 	addi	sp,sp,12
 8402a70:	f800283a 	ret
 8402a74:	480f883a 	mov	r7,r9
 8402a78:	4009883a 	mov	r4,r8
 8402a7c:	480b883a 	mov	r5,r9
 8402a80:	400d883a 	mov	r6,r8
 8402a84:	84037bc0 	call	84037bc <__adddf3>
 8402a88:	1011883a 	mov	r8,r2
 8402a8c:	1813883a 	mov	r9,r3
 8402a90:	4005883a 	mov	r2,r8
 8402a94:	4807883a 	mov	r3,r9
 8402a98:	dfc00217 	ldw	ra,8(sp)
 8402a9c:	dc400117 	ldw	r17,4(sp)
 8402aa0:	dc000017 	ldw	r16,0(sp)
 8402aa4:	dec00304 	addi	sp,sp,12
 8402aa8:	f800283a 	ret
 8402aac:	04220034 	movhi	r16,34816
 8402ab0:	841d6704 	addi	r16,r16,30108
 8402ab4:	045f8e34 	movhi	r17,32312
 8402ab8:	8c790f04 	addi	r17,r17,-7108
 8402abc:	480f883a 	mov	r7,r9
 8402ac0:	400d883a 	mov	r6,r8
 8402ac4:	8009883a 	mov	r4,r16
 8402ac8:	880b883a 	mov	r5,r17
 8402acc:	8402b3c0 	call	8402b3c <copysign>
 8402ad0:	180b883a 	mov	r5,r3
 8402ad4:	800d883a 	mov	r6,r16
 8402ad8:	880f883a 	mov	r7,r17
 8402adc:	1009883a 	mov	r4,r2
 8402ae0:	003fc306 	br	84029f0 <scalbn+0x94>
 8402ae4:	00bff284 	movi	r2,-54
 8402ae8:	11000716 	blt	r2,r4,8402b08 <scalbn+0x1ac>
 8402aec:	00b0d414 	movui	r2,50000
 8402af0:	143fee16 	blt	r2,r16,8402aac <scalbn+0x150>
 8402af4:	0430be74 	movhi	r16,49913
 8402af8:	843cd644 	addi	r16,r16,-3239
 8402afc:	04406974 	movhi	r17,421
 8402b00:	8c5b87c4 	addi	r17,r17,28191
 8402b04:	003fed06 	br	8402abc <scalbn+0x160>
 8402b08:	21000d84 	addi	r4,r4,54
 8402b0c:	2008953a 	slli	r4,r4,20
 8402b10:	01e00434 	movhi	r7,32784
 8402b14:	39ffffc4 	addi	r7,r7,-1
 8402b18:	51ce703a 	and	r7,r10,r7
 8402b1c:	390eb03a 	or	r7,r7,r4
 8402b20:	024f2434 	movhi	r9,15504
 8402b24:	4009883a 	mov	r4,r8
 8402b28:	0011883a 	mov	r8,zero
 8402b2c:	380b883a 	mov	r5,r7
 8402b30:	400d883a 	mov	r6,r8
 8402b34:	480f883a 	mov	r7,r9
 8402b38:	003fad06 	br	84029f0 <scalbn+0x94>

08402b3c <copysign>:
 8402b3c:	3813883a 	mov	r9,r7
 8402b40:	01e00034 	movhi	r7,32768
 8402b44:	39ffffc4 	addi	r7,r7,-1
 8402b48:	394e703a 	and	r7,r7,r5
 8402b4c:	4aa0002c 	andhi	r10,r9,32768
 8402b50:	3a8eb03a 	or	r7,r7,r10
 8402b54:	2005883a 	mov	r2,r4
 8402b58:	3807883a 	mov	r3,r7
 8402b5c:	f800283a 	ret

08402b60 <__fixunssfsi>:
 8402b60:	defffd04 	addi	sp,sp,-12
 8402b64:	dc000015 	stw	r16,0(sp)
 8402b68:	0413c034 	movhi	r16,20224
 8402b6c:	800b883a 	mov	r5,r16
 8402b70:	dc400115 	stw	r17,4(sp)
 8402b74:	dfc00215 	stw	ra,8(sp)
 8402b78:	2023883a 	mov	r17,r4
 8402b7c:	8402ffc0 	call	8402ffc <__gesf2>
 8402b80:	800b883a 	mov	r5,r16
 8402b84:	8809883a 	mov	r4,r17
 8402b88:	10000a16 	blt	r2,zero,8402bb4 <__fixunssfsi+0x54>
 8402b8c:	8402db40 	call	8402db4 <__subsf3>
 8402b90:	1009883a 	mov	r4,r2
 8402b94:	84031840 	call	8403184 <__fixsfsi>
 8402b98:	00e00034 	movhi	r3,32768
 8402b9c:	10c5883a 	add	r2,r2,r3
 8402ba0:	dfc00217 	ldw	ra,8(sp)
 8402ba4:	dc400117 	ldw	r17,4(sp)
 8402ba8:	dc000017 	ldw	r16,0(sp)
 8402bac:	dec00304 	addi	sp,sp,12
 8402bb0:	f800283a 	ret
 8402bb4:	8809883a 	mov	r4,r17
 8402bb8:	84031840 	call	8403184 <__fixsfsi>
 8402bbc:	dfc00217 	ldw	ra,8(sp)
 8402bc0:	dc400117 	ldw	r17,4(sp)
 8402bc4:	dc000017 	ldw	r16,0(sp)
 8402bc8:	dec00304 	addi	sp,sp,12
 8402bcc:	f800283a 	ret

08402bd0 <_fpadd_parts>:
 8402bd0:	21c00017 	ldw	r7,0(r4)
 8402bd4:	02000044 	movi	r8,1
 8402bd8:	41c0332e 	bgeu	r8,r7,8402ca8 <_fpadd_parts+0xd8>
 8402bdc:	28800017 	ldw	r2,0(r5)
 8402be0:	4080462e 	bgeu	r8,r2,8402cfc <_fpadd_parts+0x12c>
 8402be4:	00c00104 	movi	r3,4
 8402be8:	38c06b26 	beq	r7,r3,8402d98 <_fpadd_parts+0x1c8>
 8402bec:	10c04326 	beq	r2,r3,8402cfc <_fpadd_parts+0x12c>
 8402bf0:	00c00084 	movi	r3,2
 8402bf4:	10c02e26 	beq	r2,r3,8402cb0 <_fpadd_parts+0xe0>
 8402bf8:	38c04026 	beq	r7,r3,8402cfc <_fpadd_parts+0x12c>
 8402bfc:	22800217 	ldw	r10,8(r4)
 8402c00:	28c00217 	ldw	r3,8(r5)
 8402c04:	23000317 	ldw	r12,12(r4)
 8402c08:	2a400317 	ldw	r9,12(r5)
 8402c0c:	50cfc83a 	sub	r7,r10,r3
 8402c10:	3817883a 	mov	r11,r7
 8402c14:	38004f16 	blt	r7,zero,8402d54 <_fpadd_parts+0x184>
 8402c18:	008007c4 	movi	r2,31
 8402c1c:	11c03316 	blt	r2,r7,8402cec <_fpadd_parts+0x11c>
 8402c20:	02c0540e 	bge	zero,r11,8402d74 <_fpadd_parts+0x1a4>
 8402c24:	41c4983a 	sll	r2,r8,r7
 8402c28:	49c6d83a 	srl	r3,r9,r7
 8402c2c:	10bfffc4 	addi	r2,r2,-1
 8402c30:	4884703a 	and	r2,r9,r2
 8402c34:	1004c03a 	cmpne	r2,r2,zero
 8402c38:	1892b03a 	or	r9,r3,r2
 8402c3c:	20c00117 	ldw	r3,4(r4)
 8402c40:	28800117 	ldw	r2,4(r5)
 8402c44:	18803c26 	beq	r3,r2,8402d38 <_fpadd_parts+0x168>
 8402c48:	18002f26 	beq	r3,zero,8402d08 <_fpadd_parts+0x138>
 8402c4c:	4b05c83a 	sub	r2,r9,r12
 8402c50:	10004216 	blt	r2,zero,8402d5c <_fpadd_parts+0x18c>
 8402c54:	32800215 	stw	r10,8(r6)
 8402c58:	30800315 	stw	r2,12(r6)
 8402c5c:	30000115 	stw	zero,4(r6)
 8402c60:	31000317 	ldw	r4,12(r6)
 8402c64:	01d00034 	movhi	r7,16384
 8402c68:	39ffff84 	addi	r7,r7,-2
 8402c6c:	20bfffc4 	addi	r2,r4,-1
 8402c70:	2007883a 	mov	r3,r4
 8402c74:	38800836 	bltu	r7,r2,8402c98 <_fpadd_parts+0xc8>
 8402c78:	31400217 	ldw	r5,8(r6)
 8402c7c:	18c9883a 	add	r4,r3,r3
 8402c80:	20bfffc4 	addi	r2,r4,-1
 8402c84:	297fffc4 	addi	r5,r5,-1
 8402c88:	2007883a 	mov	r3,r4
 8402c8c:	38bffb2e 	bgeu	r7,r2,8402c7c <_fpadd_parts+0xac>
 8402c90:	31400215 	stw	r5,8(r6)
 8402c94:	31000315 	stw	r4,12(r6)
 8402c98:	008000c4 	movi	r2,3
 8402c9c:	30800015 	stw	r2,0(r6)
 8402ca0:	20001b16 	blt	r4,zero,8402d10 <_fpadd_parts+0x140>
 8402ca4:	3009883a 	mov	r4,r6
 8402ca8:	2005883a 	mov	r2,r4
 8402cac:	f800283a 	ret
 8402cb0:	38fffd1e 	bne	r7,r3,8402ca8 <_fpadd_parts+0xd8>
 8402cb4:	31c00015 	stw	r7,0(r6)
 8402cb8:	20800117 	ldw	r2,4(r4)
 8402cbc:	30800115 	stw	r2,4(r6)
 8402cc0:	20c00217 	ldw	r3,8(r4)
 8402cc4:	30c00215 	stw	r3,8(r6)
 8402cc8:	20800317 	ldw	r2,12(r4)
 8402ccc:	30800315 	stw	r2,12(r6)
 8402cd0:	20c00117 	ldw	r3,4(r4)
 8402cd4:	28800117 	ldw	r2,4(r5)
 8402cd8:	3009883a 	mov	r4,r6
 8402cdc:	1886703a 	and	r3,r3,r2
 8402ce0:	2005883a 	mov	r2,r4
 8402ce4:	30c00115 	stw	r3,4(r6)
 8402ce8:	f800283a 	ret
 8402cec:	1a801716 	blt	r3,r10,8402d4c <_fpadd_parts+0x17c>
 8402cf0:	1815883a 	mov	r10,r3
 8402cf4:	0019883a 	mov	r12,zero
 8402cf8:	003fd006 	br	8402c3c <_fpadd_parts+0x6c>
 8402cfc:	2809883a 	mov	r4,r5
 8402d00:	2005883a 	mov	r2,r4
 8402d04:	f800283a 	ret
 8402d08:	6245c83a 	sub	r2,r12,r9
 8402d0c:	003fd006 	br	8402c50 <_fpadd_parts+0x80>
 8402d10:	30800217 	ldw	r2,8(r6)
 8402d14:	2006d07a 	srli	r3,r4,1
 8402d18:	2100004c 	andi	r4,r4,1
 8402d1c:	10800044 	addi	r2,r2,1
 8402d20:	1906b03a 	or	r3,r3,r4
 8402d24:	3009883a 	mov	r4,r6
 8402d28:	30800215 	stw	r2,8(r6)
 8402d2c:	2005883a 	mov	r2,r4
 8402d30:	30c00315 	stw	r3,12(r6)
 8402d34:	f800283a 	ret
 8402d38:	4b09883a 	add	r4,r9,r12
 8402d3c:	30c00115 	stw	r3,4(r6)
 8402d40:	32800215 	stw	r10,8(r6)
 8402d44:	31000315 	stw	r4,12(r6)
 8402d48:	003fd306 	br	8402c98 <_fpadd_parts+0xc8>
 8402d4c:	0013883a 	mov	r9,zero
 8402d50:	003fba06 	br	8402c3c <_fpadd_parts+0x6c>
 8402d54:	01cfc83a 	sub	r7,zero,r7
 8402d58:	003faf06 	br	8402c18 <_fpadd_parts+0x48>
 8402d5c:	0089c83a 	sub	r4,zero,r2
 8402d60:	00800044 	movi	r2,1
 8402d64:	30800115 	stw	r2,4(r6)
 8402d68:	32800215 	stw	r10,8(r6)
 8402d6c:	31000315 	stw	r4,12(r6)
 8402d70:	003fbb06 	br	8402c60 <_fpadd_parts+0x90>
 8402d74:	583fb126 	beq	r11,zero,8402c3c <_fpadd_parts+0x6c>
 8402d78:	41c4983a 	sll	r2,r8,r7
 8402d7c:	61c6d83a 	srl	r3,r12,r7
 8402d80:	51d5883a 	add	r10,r10,r7
 8402d84:	10bfffc4 	addi	r2,r2,-1
 8402d88:	6084703a 	and	r2,r12,r2
 8402d8c:	1004c03a 	cmpne	r2,r2,zero
 8402d90:	1898b03a 	or	r12,r3,r2
 8402d94:	003fa906 	br	8402c3c <_fpadd_parts+0x6c>
 8402d98:	11ffc31e 	bne	r2,r7,8402ca8 <_fpadd_parts+0xd8>
 8402d9c:	28c00117 	ldw	r3,4(r5)
 8402da0:	20800117 	ldw	r2,4(r4)
 8402da4:	10ffc026 	beq	r2,r3,8402ca8 <_fpadd_parts+0xd8>
 8402da8:	01021074 	movhi	r4,2113
 8402dac:	21065904 	addi	r4,r4,6500
 8402db0:	003fbd06 	br	8402ca8 <_fpadd_parts+0xd8>

08402db4 <__subsf3>:
 8402db4:	deffef04 	addi	sp,sp,-68
 8402db8:	dcc00f15 	stw	r19,60(sp)
 8402dbc:	dcc00204 	addi	r19,sp,8
 8402dc0:	dc400e15 	stw	r17,56(sp)
 8402dc4:	d9000015 	stw	r4,0(sp)
 8402dc8:	d9400115 	stw	r5,4(sp)
 8402dcc:	d809883a 	mov	r4,sp
 8402dd0:	980b883a 	mov	r5,r19
 8402dd4:	dc400604 	addi	r17,sp,24
 8402dd8:	dfc01015 	stw	ra,64(sp)
 8402ddc:	840465c0 	call	840465c <__unpack_f>
 8402de0:	d9000104 	addi	r4,sp,4
 8402de4:	880b883a 	mov	r5,r17
 8402de8:	840465c0 	call	840465c <__unpack_f>
 8402dec:	d8800717 	ldw	r2,28(sp)
 8402df0:	9809883a 	mov	r4,r19
 8402df4:	880b883a 	mov	r5,r17
 8402df8:	d9800a04 	addi	r6,sp,40
 8402dfc:	1080005c 	xori	r2,r2,1
 8402e00:	d8800715 	stw	r2,28(sp)
 8402e04:	8402bd00 	call	8402bd0 <_fpadd_parts>
 8402e08:	1009883a 	mov	r4,r2
 8402e0c:	84044fc0 	call	84044fc <__pack_f>
 8402e10:	dfc01017 	ldw	ra,64(sp)
 8402e14:	dcc00f17 	ldw	r19,60(sp)
 8402e18:	dc400e17 	ldw	r17,56(sp)
 8402e1c:	dec01104 	addi	sp,sp,68
 8402e20:	f800283a 	ret

08402e24 <__addsf3>:
 8402e24:	deffef04 	addi	sp,sp,-68
 8402e28:	dcc00f15 	stw	r19,60(sp)
 8402e2c:	dcc00204 	addi	r19,sp,8
 8402e30:	dc400e15 	stw	r17,56(sp)
 8402e34:	d9000015 	stw	r4,0(sp)
 8402e38:	d9400115 	stw	r5,4(sp)
 8402e3c:	d809883a 	mov	r4,sp
 8402e40:	980b883a 	mov	r5,r19
 8402e44:	dc400604 	addi	r17,sp,24
 8402e48:	dfc01015 	stw	ra,64(sp)
 8402e4c:	840465c0 	call	840465c <__unpack_f>
 8402e50:	d9000104 	addi	r4,sp,4
 8402e54:	880b883a 	mov	r5,r17
 8402e58:	840465c0 	call	840465c <__unpack_f>
 8402e5c:	d9800a04 	addi	r6,sp,40
 8402e60:	9809883a 	mov	r4,r19
 8402e64:	880b883a 	mov	r5,r17
 8402e68:	8402bd00 	call	8402bd0 <_fpadd_parts>
 8402e6c:	1009883a 	mov	r4,r2
 8402e70:	84044fc0 	call	84044fc <__pack_f>
 8402e74:	dfc01017 	ldw	ra,64(sp)
 8402e78:	dcc00f17 	ldw	r19,60(sp)
 8402e7c:	dc400e17 	ldw	r17,56(sp)
 8402e80:	dec01104 	addi	sp,sp,68
 8402e84:	f800283a 	ret

08402e88 <__divsf3>:
 8402e88:	defff304 	addi	sp,sp,-52
 8402e8c:	dc400b15 	stw	r17,44(sp)
 8402e90:	dc400204 	addi	r17,sp,8
 8402e94:	dc000a15 	stw	r16,40(sp)
 8402e98:	d9000015 	stw	r4,0(sp)
 8402e9c:	d9400115 	stw	r5,4(sp)
 8402ea0:	d809883a 	mov	r4,sp
 8402ea4:	880b883a 	mov	r5,r17
 8402ea8:	dc000604 	addi	r16,sp,24
 8402eac:	dfc00c15 	stw	ra,48(sp)
 8402eb0:	840465c0 	call	840465c <__unpack_f>
 8402eb4:	d9000104 	addi	r4,sp,4
 8402eb8:	800b883a 	mov	r5,r16
 8402ebc:	840465c0 	call	840465c <__unpack_f>
 8402ec0:	d9000217 	ldw	r4,8(sp)
 8402ec4:	00800044 	movi	r2,1
 8402ec8:	01800104 	movi	r6,4
 8402ecc:	11000a2e 	bgeu	r2,r4,8402ef8 <__divsf3+0x70>
 8402ed0:	d9400617 	ldw	r5,24(sp)
 8402ed4:	1140432e 	bgeu	r2,r5,8402fe4 <__divsf3+0x15c>
 8402ed8:	d8800317 	ldw	r2,12(sp)
 8402edc:	d8c00717 	ldw	r3,28(sp)
 8402ee0:	10c4f03a 	xor	r2,r2,r3
 8402ee4:	d8800315 	stw	r2,12(sp)
 8402ee8:	21800226 	beq	r4,r6,8402ef4 <__divsf3+0x6c>
 8402eec:	00800084 	movi	r2,2
 8402ef0:	2080101e 	bne	r4,r2,8402f34 <__divsf3+0xac>
 8402ef4:	29000726 	beq	r5,r4,8402f14 <__divsf3+0x8c>
 8402ef8:	8809883a 	mov	r4,r17
 8402efc:	84044fc0 	call	84044fc <__pack_f>
 8402f00:	dfc00c17 	ldw	ra,48(sp)
 8402f04:	dc400b17 	ldw	r17,44(sp)
 8402f08:	dc000a17 	ldw	r16,40(sp)
 8402f0c:	dec00d04 	addi	sp,sp,52
 8402f10:	f800283a 	ret
 8402f14:	01021074 	movhi	r4,2113
 8402f18:	21065904 	addi	r4,r4,6500
 8402f1c:	84044fc0 	call	84044fc <__pack_f>
 8402f20:	dfc00c17 	ldw	ra,48(sp)
 8402f24:	dc400b17 	ldw	r17,44(sp)
 8402f28:	dc000a17 	ldw	r16,40(sp)
 8402f2c:	dec00d04 	addi	sp,sp,52
 8402f30:	f800283a 	ret
 8402f34:	29802d26 	beq	r5,r6,8402fec <__divsf3+0x164>
 8402f38:	28801a26 	beq	r5,r2,8402fa4 <__divsf3+0x11c>
 8402f3c:	d8c00417 	ldw	r3,16(sp)
 8402f40:	d8800817 	ldw	r2,32(sp)
 8402f44:	d9000517 	ldw	r4,20(sp)
 8402f48:	d9800917 	ldw	r6,36(sp)
 8402f4c:	1885c83a 	sub	r2,r3,r2
 8402f50:	d8800415 	stw	r2,16(sp)
 8402f54:	2180032e 	bgeu	r4,r6,8402f64 <__divsf3+0xdc>
 8402f58:	10bfffc4 	addi	r2,r2,-1
 8402f5c:	d8800415 	stw	r2,16(sp)
 8402f60:	2109883a 	add	r4,r4,r4
 8402f64:	01500034 	movhi	r5,16384
 8402f68:	0007883a 	mov	r3,zero
 8402f6c:	0005883a 	mov	r2,zero
 8402f70:	01c007c4 	movi	r7,31
 8402f74:	10800044 	addi	r2,r2,1
 8402f78:	21800236 	bltu	r4,r6,8402f84 <__divsf3+0xfc>
 8402f7c:	1946b03a 	or	r3,r3,r5
 8402f80:	2189c83a 	sub	r4,r4,r6
 8402f84:	280ad07a 	srli	r5,r5,1
 8402f88:	2109883a 	add	r4,r4,r4
 8402f8c:	11fff91e 	bne	r2,r7,8402f74 <__divsf3+0xec>
 8402f90:	19401fcc 	andi	r5,r3,127
 8402f94:	00801004 	movi	r2,64
 8402f98:	28800a26 	beq	r5,r2,8402fc4 <__divsf3+0x13c>
 8402f9c:	d8c00515 	stw	r3,20(sp)
 8402fa0:	003fd506 	br	8402ef8 <__divsf3+0x70>
 8402fa4:	8809883a 	mov	r4,r17
 8402fa8:	d9800215 	stw	r6,8(sp)
 8402fac:	84044fc0 	call	84044fc <__pack_f>
 8402fb0:	dfc00c17 	ldw	ra,48(sp)
 8402fb4:	dc400b17 	ldw	r17,44(sp)
 8402fb8:	dc000a17 	ldw	r16,40(sp)
 8402fbc:	dec00d04 	addi	sp,sp,52
 8402fc0:	f800283a 	ret
 8402fc4:	1880200c 	andi	r2,r3,128
 8402fc8:	103ff41e 	bne	r2,zero,8402f9c <__divsf3+0x114>
 8402fcc:	203ff326 	beq	r4,zero,8402f9c <__divsf3+0x114>
 8402fd0:	1947883a 	add	r3,r3,r5
 8402fd4:	00bfe004 	movi	r2,-128
 8402fd8:	1886703a 	and	r3,r3,r2
 8402fdc:	d8c00515 	stw	r3,20(sp)
 8402fe0:	003fc506 	br	8402ef8 <__divsf3+0x70>
 8402fe4:	8009883a 	mov	r4,r16
 8402fe8:	003fc406 	br	8402efc <__divsf3+0x74>
 8402fec:	8809883a 	mov	r4,r17
 8402ff0:	d8000515 	stw	zero,20(sp)
 8402ff4:	d8000415 	stw	zero,16(sp)
 8402ff8:	003fc006 	br	8402efc <__divsf3+0x74>

08402ffc <__gesf2>:
 8402ffc:	defff304 	addi	sp,sp,-52
 8403000:	dc400b15 	stw	r17,44(sp)
 8403004:	dc400204 	addi	r17,sp,8
 8403008:	dc000a15 	stw	r16,40(sp)
 840300c:	d9000015 	stw	r4,0(sp)
 8403010:	d9400115 	stw	r5,4(sp)
 8403014:	d809883a 	mov	r4,sp
 8403018:	880b883a 	mov	r5,r17
 840301c:	dc000604 	addi	r16,sp,24
 8403020:	dfc00c15 	stw	ra,48(sp)
 8403024:	840465c0 	call	840465c <__unpack_f>
 8403028:	d9000104 	addi	r4,sp,4
 840302c:	800b883a 	mov	r5,r16
 8403030:	840465c0 	call	840465c <__unpack_f>
 8403034:	d8800217 	ldw	r2,8(sp)
 8403038:	00c00044 	movi	r3,1
 840303c:	01bfffc4 	movi	r6,-1
 8403040:	1880062e 	bgeu	r3,r2,840305c <__gesf2+0x60>
 8403044:	d8800617 	ldw	r2,24(sp)
 8403048:	8809883a 	mov	r4,r17
 840304c:	800b883a 	mov	r5,r16
 8403050:	1880022e 	bgeu	r3,r2,840305c <__gesf2+0x60>
 8403054:	84047240 	call	8404724 <__fpcmp_parts_f>
 8403058:	100d883a 	mov	r6,r2
 840305c:	3005883a 	mov	r2,r6
 8403060:	dfc00c17 	ldw	ra,48(sp)
 8403064:	dc400b17 	ldw	r17,44(sp)
 8403068:	dc000a17 	ldw	r16,40(sp)
 840306c:	dec00d04 	addi	sp,sp,52
 8403070:	f800283a 	ret

08403074 <__lesf2>:
 8403074:	defff304 	addi	sp,sp,-52
 8403078:	dc400b15 	stw	r17,44(sp)
 840307c:	dc400204 	addi	r17,sp,8
 8403080:	dc000a15 	stw	r16,40(sp)
 8403084:	d9000015 	stw	r4,0(sp)
 8403088:	d9400115 	stw	r5,4(sp)
 840308c:	d809883a 	mov	r4,sp
 8403090:	880b883a 	mov	r5,r17
 8403094:	dc000604 	addi	r16,sp,24
 8403098:	dfc00c15 	stw	ra,48(sp)
 840309c:	840465c0 	call	840465c <__unpack_f>
 84030a0:	d9000104 	addi	r4,sp,4
 84030a4:	800b883a 	mov	r5,r16
 84030a8:	840465c0 	call	840465c <__unpack_f>
 84030ac:	d8800217 	ldw	r2,8(sp)
 84030b0:	00c00044 	movi	r3,1
 84030b4:	180d883a 	mov	r6,r3
 84030b8:	1880062e 	bgeu	r3,r2,84030d4 <__lesf2+0x60>
 84030bc:	d8800617 	ldw	r2,24(sp)
 84030c0:	8809883a 	mov	r4,r17
 84030c4:	800b883a 	mov	r5,r16
 84030c8:	1880022e 	bgeu	r3,r2,84030d4 <__lesf2+0x60>
 84030cc:	84047240 	call	8404724 <__fpcmp_parts_f>
 84030d0:	100d883a 	mov	r6,r2
 84030d4:	3005883a 	mov	r2,r6
 84030d8:	dfc00c17 	ldw	ra,48(sp)
 84030dc:	dc400b17 	ldw	r17,44(sp)
 84030e0:	dc000a17 	ldw	r16,40(sp)
 84030e4:	dec00d04 	addi	sp,sp,52
 84030e8:	f800283a 	ret

084030ec <__floatsisf>:
 84030ec:	2006d7fa 	srli	r3,r4,31
 84030f0:	defffa04 	addi	sp,sp,-24
 84030f4:	008000c4 	movi	r2,3
 84030f8:	dfc00515 	stw	ra,20(sp)
 84030fc:	dc000415 	stw	r16,16(sp)
 8403100:	d8800015 	stw	r2,0(sp)
 8403104:	d8c00115 	stw	r3,4(sp)
 8403108:	2000081e 	bne	r4,zero,840312c <__floatsisf+0x40>
 840310c:	00800084 	movi	r2,2
 8403110:	d8800015 	stw	r2,0(sp)
 8403114:	d809883a 	mov	r4,sp
 8403118:	84044fc0 	call	84044fc <__pack_f>
 840311c:	dfc00517 	ldw	ra,20(sp)
 8403120:	dc000417 	ldw	r16,16(sp)
 8403124:	dec00604 	addi	sp,sp,24
 8403128:	f800283a 	ret
 840312c:	00800784 	movi	r2,30
 8403130:	1807003a 	cmpeq	r3,r3,zero
 8403134:	d8800215 	stw	r2,8(sp)
 8403138:	18000e1e 	bne	r3,zero,8403174 <__floatsisf+0x88>
 840313c:	00a00034 	movhi	r2,32768
 8403140:	20800e26 	beq	r4,r2,840317c <__floatsisf+0x90>
 8403144:	0121c83a 	sub	r16,zero,r4
 8403148:	8009883a 	mov	r4,r16
 840314c:	dc000315 	stw	r16,12(sp)
 8403150:	840447c0 	call	840447c <__clzsi2>
 8403154:	117fffc4 	addi	r5,r2,-1
 8403158:	017fee0e 	bge	zero,r5,8403114 <__floatsisf+0x28>
 840315c:	d8800217 	ldw	r2,8(sp)
 8403160:	8146983a 	sll	r3,r16,r5
 8403164:	1145c83a 	sub	r2,r2,r5
 8403168:	d8c00315 	stw	r3,12(sp)
 840316c:	d8800215 	stw	r2,8(sp)
 8403170:	003fe806 	br	8403114 <__floatsisf+0x28>
 8403174:	2021883a 	mov	r16,r4
 8403178:	003ff306 	br	8403148 <__floatsisf+0x5c>
 840317c:	00b3c034 	movhi	r2,52992
 8403180:	003fe606 	br	840311c <__floatsisf+0x30>

08403184 <__fixsfsi>:
 8403184:	defffa04 	addi	sp,sp,-24
 8403188:	d9000015 	stw	r4,0(sp)
 840318c:	d9400104 	addi	r5,sp,4
 8403190:	d809883a 	mov	r4,sp
 8403194:	dfc00515 	stw	ra,20(sp)
 8403198:	840465c0 	call	840465c <__unpack_f>
 840319c:	d8c00117 	ldw	r3,4(sp)
 84031a0:	00800084 	movi	r2,2
 84031a4:	1880041e 	bne	r3,r2,84031b8 <__fixsfsi+0x34>
 84031a8:	0005883a 	mov	r2,zero
 84031ac:	dfc00517 	ldw	ra,20(sp)
 84031b0:	dec00604 	addi	sp,sp,24
 84031b4:	f800283a 	ret
 84031b8:	00800044 	movi	r2,1
 84031bc:	10fffa2e 	bgeu	r2,r3,84031a8 <__fixsfsi+0x24>
 84031c0:	00800104 	movi	r2,4
 84031c4:	18800426 	beq	r3,r2,84031d8 <__fixsfsi+0x54>
 84031c8:	d8800317 	ldw	r2,12(sp)
 84031cc:	103ff616 	blt	r2,zero,84031a8 <__fixsfsi+0x24>
 84031d0:	00c00784 	movi	r3,30
 84031d4:	1880070e 	bge	r3,r2,84031f4 <__fixsfsi+0x70>
 84031d8:	d8800217 	ldw	r2,8(sp)
 84031dc:	10000c1e 	bne	r2,zero,8403210 <__fixsfsi+0x8c>
 84031e0:	00a00034 	movhi	r2,32768
 84031e4:	10bfffc4 	addi	r2,r2,-1
 84031e8:	dfc00517 	ldw	ra,20(sp)
 84031ec:	dec00604 	addi	sp,sp,24
 84031f0:	f800283a 	ret
 84031f4:	1885c83a 	sub	r2,r3,r2
 84031f8:	d9000217 	ldw	r4,8(sp)
 84031fc:	d8c00417 	ldw	r3,16(sp)
 8403200:	1884d83a 	srl	r2,r3,r2
 8403204:	203fe926 	beq	r4,zero,84031ac <__fixsfsi+0x28>
 8403208:	0085c83a 	sub	r2,zero,r2
 840320c:	003fe706 	br	84031ac <__fixsfsi+0x28>
 8403210:	00a00034 	movhi	r2,32768
 8403214:	003fe506 	br	84031ac <__fixsfsi+0x28>

08403218 <__extendsfdf2>:
 8403218:	defff904 	addi	sp,sp,-28
 840321c:	d9000115 	stw	r4,4(sp)
 8403220:	d9400204 	addi	r5,sp,8
 8403224:	d9000104 	addi	r4,sp,4
 8403228:	dfc00615 	stw	ra,24(sp)
 840322c:	840465c0 	call	840465c <__unpack_f>
 8403230:	d9c00517 	ldw	r7,20(sp)
 8403234:	0011883a 	mov	r8,zero
 8403238:	400697ba 	slli	r3,r8,30
 840323c:	3812d0ba 	srli	r9,r7,2
 8403240:	380497ba 	slli	r2,r7,30
 8403244:	d9000217 	ldw	r4,8(sp)
 8403248:	d9400317 	ldw	r5,12(sp)
 840324c:	d9800417 	ldw	r6,16(sp)
 8403250:	48c6b03a 	or	r3,r9,r3
 8403254:	100f883a 	mov	r7,r2
 8403258:	d8c00015 	stw	r3,0(sp)
 840325c:	84041ec0 	call	84041ec <__make_dp>
 8403260:	dfc00617 	ldw	ra,24(sp)
 8403264:	dec00704 	addi	sp,sp,28
 8403268:	f800283a 	ret

0840326c <__floatunsisf>:
 840326c:	defff904 	addi	sp,sp,-28
 8403270:	dc400515 	stw	r17,20(sp)
 8403274:	dc000415 	stw	r16,16(sp)
 8403278:	dfc00615 	stw	ra,24(sp)
 840327c:	04400784 	movi	r17,30
 8403280:	2021883a 	mov	r16,r4
 8403284:	d8000115 	stw	zero,4(sp)
 8403288:	2000091e 	bne	r4,zero,84032b0 <__floatunsisf+0x44>
 840328c:	00800084 	movi	r2,2
 8403290:	d8800015 	stw	r2,0(sp)
 8403294:	d809883a 	mov	r4,sp
 8403298:	84044fc0 	call	84044fc <__pack_f>
 840329c:	dfc00617 	ldw	ra,24(sp)
 84032a0:	dc400517 	ldw	r17,20(sp)
 84032a4:	dc000417 	ldw	r16,16(sp)
 84032a8:	dec00704 	addi	sp,sp,28
 84032ac:	f800283a 	ret
 84032b0:	008000c4 	movi	r2,3
 84032b4:	d9000315 	stw	r4,12(sp)
 84032b8:	d8800015 	stw	r2,0(sp)
 84032bc:	dc400215 	stw	r17,8(sp)
 84032c0:	840447c0 	call	840447c <__clzsi2>
 84032c4:	117fffc4 	addi	r5,r2,-1
 84032c8:	0147c83a 	sub	r3,zero,r5
 84032cc:	00800044 	movi	r2,1
 84032d0:	10c4983a 	sll	r2,r2,r3
 84032d4:	80c6d83a 	srl	r3,r16,r3
 84032d8:	8949c83a 	sub	r4,r17,r5
 84032dc:	10bfffc4 	addi	r2,r2,-1
 84032e0:	8084703a 	and	r2,r16,r2
 84032e4:	1004c03a 	cmpne	r2,r2,zero
 84032e8:	1886b03a 	or	r3,r3,r2
 84032ec:	28000c16 	blt	r5,zero,8403320 <__floatunsisf+0xb4>
 84032f0:	8144983a 	sll	r2,r16,r5
 84032f4:	8947c83a 	sub	r3,r17,r5
 84032f8:	283fe626 	beq	r5,zero,8403294 <__floatunsisf+0x28>
 84032fc:	d809883a 	mov	r4,sp
 8403300:	d8800315 	stw	r2,12(sp)
 8403304:	d8c00215 	stw	r3,8(sp)
 8403308:	84044fc0 	call	84044fc <__pack_f>
 840330c:	dfc00617 	ldw	ra,24(sp)
 8403310:	dc400517 	ldw	r17,20(sp)
 8403314:	dc000417 	ldw	r16,16(sp)
 8403318:	dec00704 	addi	sp,sp,28
 840331c:	f800283a 	ret
 8403320:	d8c00315 	stw	r3,12(sp)
 8403324:	d9000215 	stw	r4,8(sp)
 8403328:	003fda06 	br	8403294 <__floatunsisf+0x28>

0840332c <_fpadd_parts>:
 840332c:	defff804 	addi	sp,sp,-32
 8403330:	dcc00315 	stw	r19,12(sp)
 8403334:	2027883a 	mov	r19,r4
 8403338:	21000017 	ldw	r4,0(r4)
 840333c:	00c00044 	movi	r3,1
 8403340:	dd400515 	stw	r21,20(sp)
 8403344:	dd000415 	stw	r20,16(sp)
 8403348:	ddc00715 	stw	r23,28(sp)
 840334c:	dd800615 	stw	r22,24(sp)
 8403350:	dc800215 	stw	r18,8(sp)
 8403354:	dc400115 	stw	r17,4(sp)
 8403358:	dc000015 	stw	r16,0(sp)
 840335c:	282b883a 	mov	r21,r5
 8403360:	3029883a 	mov	r20,r6
 8403364:	1900632e 	bgeu	r3,r4,84034f4 <_fpadd_parts+0x1c8>
 8403368:	28800017 	ldw	r2,0(r5)
 840336c:	1880812e 	bgeu	r3,r2,8403574 <_fpadd_parts+0x248>
 8403370:	00c00104 	movi	r3,4
 8403374:	20c0dc26 	beq	r4,r3,84036e8 <_fpadd_parts+0x3bc>
 8403378:	10c07e26 	beq	r2,r3,8403574 <_fpadd_parts+0x248>
 840337c:	00c00084 	movi	r3,2
 8403380:	10c06726 	beq	r2,r3,8403520 <_fpadd_parts+0x1f4>
 8403384:	20c07b26 	beq	r4,r3,8403574 <_fpadd_parts+0x248>
 8403388:	9dc00217 	ldw	r23,8(r19)
 840338c:	28c00217 	ldw	r3,8(r5)
 8403390:	9c400317 	ldw	r17,12(r19)
 8403394:	2bc00317 	ldw	r15,12(r5)
 8403398:	b8cdc83a 	sub	r6,r23,r3
 840339c:	9c800417 	ldw	r18,16(r19)
 84033a0:	2c000417 	ldw	r16,16(r5)
 84033a4:	3009883a 	mov	r4,r6
 84033a8:	30009716 	blt	r6,zero,8403608 <_fpadd_parts+0x2dc>
 84033ac:	00800fc4 	movi	r2,63
 84033b0:	11806b16 	blt	r2,r6,8403560 <_fpadd_parts+0x234>
 84033b4:	0100a40e 	bge	zero,r4,8403648 <_fpadd_parts+0x31c>
 84033b8:	35bff804 	addi	r22,r6,-32
 84033bc:	b000bc16 	blt	r22,zero,84036b0 <_fpadd_parts+0x384>
 84033c0:	8596d83a 	srl	r11,r16,r22
 84033c4:	0019883a 	mov	r12,zero
 84033c8:	0013883a 	mov	r9,zero
 84033cc:	01000044 	movi	r4,1
 84033d0:	0015883a 	mov	r10,zero
 84033d4:	b000be16 	blt	r22,zero,84036d0 <_fpadd_parts+0x3a4>
 84033d8:	2590983a 	sll	r8,r4,r22
 84033dc:	000f883a 	mov	r7,zero
 84033e0:	00bfffc4 	movi	r2,-1
 84033e4:	3889883a 	add	r4,r7,r2
 84033e8:	408b883a 	add	r5,r8,r2
 84033ec:	21cd803a 	cmpltu	r6,r4,r7
 84033f0:	314b883a 	add	r5,r6,r5
 84033f4:	7904703a 	and	r2,r15,r4
 84033f8:	8146703a 	and	r3,r16,r5
 84033fc:	10c4b03a 	or	r2,r2,r3
 8403400:	10000226 	beq	r2,zero,840340c <_fpadd_parts+0xe0>
 8403404:	02400044 	movi	r9,1
 8403408:	0015883a 	mov	r10,zero
 840340c:	5a5eb03a 	or	r15,r11,r9
 8403410:	62a0b03a 	or	r16,r12,r10
 8403414:	99400117 	ldw	r5,4(r19)
 8403418:	a8800117 	ldw	r2,4(r21)
 840341c:	28806e26 	beq	r5,r2,84035d8 <_fpadd_parts+0x2ac>
 8403420:	28006626 	beq	r5,zero,84035bc <_fpadd_parts+0x290>
 8403424:	7c45c83a 	sub	r2,r15,r17
 8403428:	7889803a 	cmpltu	r4,r15,r2
 840342c:	8487c83a 	sub	r3,r16,r18
 8403430:	1909c83a 	sub	r4,r3,r4
 8403434:	100d883a 	mov	r6,r2
 8403438:	200f883a 	mov	r7,r4
 840343c:	38007716 	blt	r7,zero,840361c <_fpadd_parts+0x2f0>
 8403440:	a5c00215 	stw	r23,8(r20)
 8403444:	a1c00415 	stw	r7,16(r20)
 8403448:	a0000115 	stw	zero,4(r20)
 840344c:	a1800315 	stw	r6,12(r20)
 8403450:	a2000317 	ldw	r8,12(r20)
 8403454:	a2400417 	ldw	r9,16(r20)
 8403458:	00bfffc4 	movi	r2,-1
 840345c:	408b883a 	add	r5,r8,r2
 8403460:	2a09803a 	cmpltu	r4,r5,r8
 8403464:	488d883a 	add	r6,r9,r2
 8403468:	01c40034 	movhi	r7,4096
 840346c:	39ffffc4 	addi	r7,r7,-1
 8403470:	218d883a 	add	r6,r4,r6
 8403474:	39801736 	bltu	r7,r6,84034d4 <_fpadd_parts+0x1a8>
 8403478:	31c06526 	beq	r6,r7,8403610 <_fpadd_parts+0x2e4>
 840347c:	a3000217 	ldw	r12,8(r20)
 8403480:	4209883a 	add	r4,r8,r8
 8403484:	00bfffc4 	movi	r2,-1
 8403488:	220f803a 	cmpltu	r7,r4,r8
 840348c:	4a4b883a 	add	r5,r9,r9
 8403490:	394f883a 	add	r7,r7,r5
 8403494:	2095883a 	add	r10,r4,r2
 8403498:	3897883a 	add	r11,r7,r2
 840349c:	510d803a 	cmpltu	r6,r10,r4
 84034a0:	6099883a 	add	r12,r12,r2
 84034a4:	32d7883a 	add	r11,r6,r11
 84034a8:	00840034 	movhi	r2,4096
 84034ac:	10bfffc4 	addi	r2,r2,-1
 84034b0:	2011883a 	mov	r8,r4
 84034b4:	3813883a 	mov	r9,r7
 84034b8:	a1000315 	stw	r4,12(r20)
 84034bc:	a1c00415 	stw	r7,16(r20)
 84034c0:	a3000215 	stw	r12,8(r20)
 84034c4:	12c00336 	bltu	r2,r11,84034d4 <_fpadd_parts+0x1a8>
 84034c8:	58bfed1e 	bne	r11,r2,8403480 <_fpadd_parts+0x154>
 84034cc:	00bfff84 	movi	r2,-2
 84034d0:	12bfeb2e 	bgeu	r2,r10,8403480 <_fpadd_parts+0x154>
 84034d4:	a2800417 	ldw	r10,16(r20)
 84034d8:	008000c4 	movi	r2,3
 84034dc:	00c80034 	movhi	r3,8192
 84034e0:	18ffffc4 	addi	r3,r3,-1
 84034e4:	a2400317 	ldw	r9,12(r20)
 84034e8:	a0800015 	stw	r2,0(r20)
 84034ec:	1a802336 	bltu	r3,r10,840357c <_fpadd_parts+0x250>
 84034f0:	a027883a 	mov	r19,r20
 84034f4:	9805883a 	mov	r2,r19
 84034f8:	ddc00717 	ldw	r23,28(sp)
 84034fc:	dd800617 	ldw	r22,24(sp)
 8403500:	dd400517 	ldw	r21,20(sp)
 8403504:	dd000417 	ldw	r20,16(sp)
 8403508:	dcc00317 	ldw	r19,12(sp)
 840350c:	dc800217 	ldw	r18,8(sp)
 8403510:	dc400117 	ldw	r17,4(sp)
 8403514:	dc000017 	ldw	r16,0(sp)
 8403518:	dec00804 	addi	sp,sp,32
 840351c:	f800283a 	ret
 8403520:	20fff41e 	bne	r4,r3,84034f4 <_fpadd_parts+0x1c8>
 8403524:	31000015 	stw	r4,0(r6)
 8403528:	98800117 	ldw	r2,4(r19)
 840352c:	30800115 	stw	r2,4(r6)
 8403530:	98c00217 	ldw	r3,8(r19)
 8403534:	30c00215 	stw	r3,8(r6)
 8403538:	98800317 	ldw	r2,12(r19)
 840353c:	30800315 	stw	r2,12(r6)
 8403540:	98c00417 	ldw	r3,16(r19)
 8403544:	30c00415 	stw	r3,16(r6)
 8403548:	98800117 	ldw	r2,4(r19)
 840354c:	28c00117 	ldw	r3,4(r5)
 8403550:	3027883a 	mov	r19,r6
 8403554:	10c4703a 	and	r2,r2,r3
 8403558:	30800115 	stw	r2,4(r6)
 840355c:	003fe506 	br	84034f4 <_fpadd_parts+0x1c8>
 8403560:	1dc02616 	blt	r3,r23,84035fc <_fpadd_parts+0x2d0>
 8403564:	0023883a 	mov	r17,zero
 8403568:	182f883a 	mov	r23,r3
 840356c:	0025883a 	mov	r18,zero
 8403570:	003fa806 	br	8403414 <_fpadd_parts+0xe8>
 8403574:	a827883a 	mov	r19,r21
 8403578:	003fde06 	br	84034f4 <_fpadd_parts+0x1c8>
 840357c:	01800044 	movi	r6,1
 8403580:	500497fa 	slli	r2,r10,31
 8403584:	4808d07a 	srli	r4,r9,1
 8403588:	518ad83a 	srl	r5,r10,r6
 840358c:	a2000217 	ldw	r8,8(r20)
 8403590:	1108b03a 	or	r4,r2,r4
 8403594:	0007883a 	mov	r3,zero
 8403598:	4984703a 	and	r2,r9,r6
 840359c:	208cb03a 	or	r6,r4,r2
 84035a0:	28ceb03a 	or	r7,r5,r3
 84035a4:	42000044 	addi	r8,r8,1
 84035a8:	a027883a 	mov	r19,r20
 84035ac:	a1c00415 	stw	r7,16(r20)
 84035b0:	a2000215 	stw	r8,8(r20)
 84035b4:	a1800315 	stw	r6,12(r20)
 84035b8:	003fce06 	br	84034f4 <_fpadd_parts+0x1c8>
 84035bc:	8bc5c83a 	sub	r2,r17,r15
 84035c0:	8889803a 	cmpltu	r4,r17,r2
 84035c4:	9407c83a 	sub	r3,r18,r16
 84035c8:	1909c83a 	sub	r4,r3,r4
 84035cc:	100d883a 	mov	r6,r2
 84035d0:	200f883a 	mov	r7,r4
 84035d4:	003f9906 	br	840343c <_fpadd_parts+0x110>
 84035d8:	7c45883a 	add	r2,r15,r17
 84035dc:	13c9803a 	cmpltu	r4,r2,r15
 84035e0:	8487883a 	add	r3,r16,r18
 84035e4:	20c9883a 	add	r4,r4,r3
 84035e8:	a1400115 	stw	r5,4(r20)
 84035ec:	a5c00215 	stw	r23,8(r20)
 84035f0:	a0800315 	stw	r2,12(r20)
 84035f4:	a1000415 	stw	r4,16(r20)
 84035f8:	003fb606 	br	84034d4 <_fpadd_parts+0x1a8>
 84035fc:	001f883a 	mov	r15,zero
 8403600:	0021883a 	mov	r16,zero
 8403604:	003f8306 	br	8403414 <_fpadd_parts+0xe8>
 8403608:	018dc83a 	sub	r6,zero,r6
 840360c:	003f6706 	br	84033ac <_fpadd_parts+0x80>
 8403610:	00bfff84 	movi	r2,-2
 8403614:	117faf36 	bltu	r2,r5,84034d4 <_fpadd_parts+0x1a8>
 8403618:	003f9806 	br	840347c <_fpadd_parts+0x150>
 840361c:	0005883a 	mov	r2,zero
 8403620:	1189c83a 	sub	r4,r2,r6
 8403624:	1105803a 	cmpltu	r2,r2,r4
 8403628:	01cbc83a 	sub	r5,zero,r7
 840362c:	2885c83a 	sub	r2,r5,r2
 8403630:	01800044 	movi	r6,1
 8403634:	a1800115 	stw	r6,4(r20)
 8403638:	a5c00215 	stw	r23,8(r20)
 840363c:	a1000315 	stw	r4,12(r20)
 8403640:	a0800415 	stw	r2,16(r20)
 8403644:	003f8206 	br	8403450 <_fpadd_parts+0x124>
 8403648:	203f7226 	beq	r4,zero,8403414 <_fpadd_parts+0xe8>
 840364c:	35bff804 	addi	r22,r6,-32
 8403650:	b9af883a 	add	r23,r23,r6
 8403654:	b0003116 	blt	r22,zero,840371c <_fpadd_parts+0x3f0>
 8403658:	959ad83a 	srl	r13,r18,r22
 840365c:	001d883a 	mov	r14,zero
 8403660:	000f883a 	mov	r7,zero
 8403664:	01000044 	movi	r4,1
 8403668:	0011883a 	mov	r8,zero
 840366c:	b0002516 	blt	r22,zero,8403704 <_fpadd_parts+0x3d8>
 8403670:	2594983a 	sll	r10,r4,r22
 8403674:	0013883a 	mov	r9,zero
 8403678:	00bfffc4 	movi	r2,-1
 840367c:	4889883a 	add	r4,r9,r2
 8403680:	508b883a 	add	r5,r10,r2
 8403684:	224d803a 	cmpltu	r6,r4,r9
 8403688:	314b883a 	add	r5,r6,r5
 840368c:	8904703a 	and	r2,r17,r4
 8403690:	9146703a 	and	r3,r18,r5
 8403694:	10c4b03a 	or	r2,r2,r3
 8403698:	10000226 	beq	r2,zero,84036a4 <_fpadd_parts+0x378>
 840369c:	01c00044 	movi	r7,1
 84036a0:	0011883a 	mov	r8,zero
 84036a4:	69e2b03a 	or	r17,r13,r7
 84036a8:	7224b03a 	or	r18,r14,r8
 84036ac:	003f5906 	br	8403414 <_fpadd_parts+0xe8>
 84036b0:	8407883a 	add	r3,r16,r16
 84036b4:	008007c4 	movi	r2,31
 84036b8:	1185c83a 	sub	r2,r2,r6
 84036bc:	1886983a 	sll	r3,r3,r2
 84036c0:	7996d83a 	srl	r11,r15,r6
 84036c4:	8198d83a 	srl	r12,r16,r6
 84036c8:	1ad6b03a 	or	r11,r3,r11
 84036cc:	003f3e06 	br	84033c8 <_fpadd_parts+0x9c>
 84036d0:	2006d07a 	srli	r3,r4,1
 84036d4:	008007c4 	movi	r2,31
 84036d8:	1185c83a 	sub	r2,r2,r6
 84036dc:	1890d83a 	srl	r8,r3,r2
 84036e0:	218e983a 	sll	r7,r4,r6
 84036e4:	003f3e06 	br	84033e0 <_fpadd_parts+0xb4>
 84036e8:	113f821e 	bne	r2,r4,84034f4 <_fpadd_parts+0x1c8>
 84036ec:	28c00117 	ldw	r3,4(r5)
 84036f0:	98800117 	ldw	r2,4(r19)
 84036f4:	10ff7f26 	beq	r2,r3,84034f4 <_fpadd_parts+0x1c8>
 84036f8:	04c21074 	movhi	r19,2113
 84036fc:	9cc65d04 	addi	r19,r19,6516
 8403700:	003f7c06 	br	84034f4 <_fpadd_parts+0x1c8>
 8403704:	2006d07a 	srli	r3,r4,1
 8403708:	008007c4 	movi	r2,31
 840370c:	1185c83a 	sub	r2,r2,r6
 8403710:	1894d83a 	srl	r10,r3,r2
 8403714:	2192983a 	sll	r9,r4,r6
 8403718:	003fd706 	br	8403678 <_fpadd_parts+0x34c>
 840371c:	9487883a 	add	r3,r18,r18
 8403720:	008007c4 	movi	r2,31
 8403724:	1185c83a 	sub	r2,r2,r6
 8403728:	1886983a 	sll	r3,r3,r2
 840372c:	899ad83a 	srl	r13,r17,r6
 8403730:	919cd83a 	srl	r14,r18,r6
 8403734:	1b5ab03a 	or	r13,r3,r13
 8403738:	003fc906 	br	8403660 <_fpadd_parts+0x334>

0840373c <__subdf3>:
 840373c:	deffea04 	addi	sp,sp,-88
 8403740:	dcc01415 	stw	r19,80(sp)
 8403744:	dcc00404 	addi	r19,sp,16
 8403748:	2011883a 	mov	r8,r4
 840374c:	2813883a 	mov	r9,r5
 8403750:	dc401315 	stw	r17,76(sp)
 8403754:	d809883a 	mov	r4,sp
 8403758:	980b883a 	mov	r5,r19
 840375c:	dc400904 	addi	r17,sp,36
 8403760:	dfc01515 	stw	ra,84(sp)
 8403764:	da400115 	stw	r9,4(sp)
 8403768:	d9c00315 	stw	r7,12(sp)
 840376c:	da000015 	stw	r8,0(sp)
 8403770:	d9800215 	stw	r6,8(sp)
 8403774:	8404b0c0 	call	8404b0c <__unpack_d>
 8403778:	d9000204 	addi	r4,sp,8
 840377c:	880b883a 	mov	r5,r17
 8403780:	8404b0c0 	call	8404b0c <__unpack_d>
 8403784:	d8800a17 	ldw	r2,40(sp)
 8403788:	880b883a 	mov	r5,r17
 840378c:	9809883a 	mov	r4,r19
 8403790:	d9800e04 	addi	r6,sp,56
 8403794:	1080005c 	xori	r2,r2,1
 8403798:	d8800a15 	stw	r2,40(sp)
 840379c:	840332c0 	call	840332c <_fpadd_parts>
 84037a0:	1009883a 	mov	r4,r2
 84037a4:	84047f80 	call	84047f8 <__pack_d>
 84037a8:	dfc01517 	ldw	ra,84(sp)
 84037ac:	dcc01417 	ldw	r19,80(sp)
 84037b0:	dc401317 	ldw	r17,76(sp)
 84037b4:	dec01604 	addi	sp,sp,88
 84037b8:	f800283a 	ret

084037bc <__adddf3>:
 84037bc:	deffea04 	addi	sp,sp,-88
 84037c0:	dcc01415 	stw	r19,80(sp)
 84037c4:	dcc00404 	addi	r19,sp,16
 84037c8:	2011883a 	mov	r8,r4
 84037cc:	2813883a 	mov	r9,r5
 84037d0:	dc401315 	stw	r17,76(sp)
 84037d4:	d809883a 	mov	r4,sp
 84037d8:	980b883a 	mov	r5,r19
 84037dc:	dc400904 	addi	r17,sp,36
 84037e0:	dfc01515 	stw	ra,84(sp)
 84037e4:	da400115 	stw	r9,4(sp)
 84037e8:	d9c00315 	stw	r7,12(sp)
 84037ec:	da000015 	stw	r8,0(sp)
 84037f0:	d9800215 	stw	r6,8(sp)
 84037f4:	8404b0c0 	call	8404b0c <__unpack_d>
 84037f8:	d9000204 	addi	r4,sp,8
 84037fc:	880b883a 	mov	r5,r17
 8403800:	8404b0c0 	call	8404b0c <__unpack_d>
 8403804:	d9800e04 	addi	r6,sp,56
 8403808:	9809883a 	mov	r4,r19
 840380c:	880b883a 	mov	r5,r17
 8403810:	840332c0 	call	840332c <_fpadd_parts>
 8403814:	1009883a 	mov	r4,r2
 8403818:	84047f80 	call	84047f8 <__pack_d>
 840381c:	dfc01517 	ldw	ra,84(sp)
 8403820:	dcc01417 	ldw	r19,80(sp)
 8403824:	dc401317 	ldw	r17,76(sp)
 8403828:	dec01604 	addi	sp,sp,88
 840382c:	f800283a 	ret

08403830 <__muldf3>:
 8403830:	deffe004 	addi	sp,sp,-128
 8403834:	dc401815 	stw	r17,96(sp)
 8403838:	dc400404 	addi	r17,sp,16
 840383c:	2011883a 	mov	r8,r4
 8403840:	2813883a 	mov	r9,r5
 8403844:	dc001715 	stw	r16,92(sp)
 8403848:	d809883a 	mov	r4,sp
 840384c:	880b883a 	mov	r5,r17
 8403850:	dc000904 	addi	r16,sp,36
 8403854:	dfc01f15 	stw	ra,124(sp)
 8403858:	da400115 	stw	r9,4(sp)
 840385c:	d9c00315 	stw	r7,12(sp)
 8403860:	da000015 	stw	r8,0(sp)
 8403864:	d9800215 	stw	r6,8(sp)
 8403868:	ddc01e15 	stw	r23,120(sp)
 840386c:	dd801d15 	stw	r22,116(sp)
 8403870:	dd401c15 	stw	r21,112(sp)
 8403874:	dd001b15 	stw	r20,108(sp)
 8403878:	dcc01a15 	stw	r19,104(sp)
 840387c:	dc801915 	stw	r18,100(sp)
 8403880:	8404b0c0 	call	8404b0c <__unpack_d>
 8403884:	d9000204 	addi	r4,sp,8
 8403888:	800b883a 	mov	r5,r16
 840388c:	8404b0c0 	call	8404b0c <__unpack_d>
 8403890:	d9000417 	ldw	r4,16(sp)
 8403894:	00800044 	movi	r2,1
 8403898:	1100102e 	bgeu	r2,r4,84038dc <__muldf3+0xac>
 840389c:	d8c00917 	ldw	r3,36(sp)
 84038a0:	10c0062e 	bgeu	r2,r3,84038bc <__muldf3+0x8c>
 84038a4:	00800104 	movi	r2,4
 84038a8:	20800a26 	beq	r4,r2,84038d4 <__muldf3+0xa4>
 84038ac:	1880cc26 	beq	r3,r2,8403be0 <__muldf3+0x3b0>
 84038b0:	00800084 	movi	r2,2
 84038b4:	20800926 	beq	r4,r2,84038dc <__muldf3+0xac>
 84038b8:	1880191e 	bne	r3,r2,8403920 <__muldf3+0xf0>
 84038bc:	d8c00a17 	ldw	r3,40(sp)
 84038c0:	d8800517 	ldw	r2,20(sp)
 84038c4:	8009883a 	mov	r4,r16
 84038c8:	10c4c03a 	cmpne	r2,r2,r3
 84038cc:	d8800a15 	stw	r2,40(sp)
 84038d0:	00000706 	br	84038f0 <__muldf3+0xc0>
 84038d4:	00800084 	movi	r2,2
 84038d8:	1880c326 	beq	r3,r2,8403be8 <__muldf3+0x3b8>
 84038dc:	d8800517 	ldw	r2,20(sp)
 84038e0:	d8c00a17 	ldw	r3,40(sp)
 84038e4:	8809883a 	mov	r4,r17
 84038e8:	10c4c03a 	cmpne	r2,r2,r3
 84038ec:	d8800515 	stw	r2,20(sp)
 84038f0:	84047f80 	call	84047f8 <__pack_d>
 84038f4:	dfc01f17 	ldw	ra,124(sp)
 84038f8:	ddc01e17 	ldw	r23,120(sp)
 84038fc:	dd801d17 	ldw	r22,116(sp)
 8403900:	dd401c17 	ldw	r21,112(sp)
 8403904:	dd001b17 	ldw	r20,108(sp)
 8403908:	dcc01a17 	ldw	r19,104(sp)
 840390c:	dc801917 	ldw	r18,100(sp)
 8403910:	dc401817 	ldw	r17,96(sp)
 8403914:	dc001717 	ldw	r16,92(sp)
 8403918:	dec02004 	addi	sp,sp,128
 840391c:	f800283a 	ret
 8403920:	dd800717 	ldw	r22,28(sp)
 8403924:	dc800c17 	ldw	r18,48(sp)
 8403928:	002b883a 	mov	r21,zero
 840392c:	0023883a 	mov	r17,zero
 8403930:	a80b883a 	mov	r5,r21
 8403934:	b00d883a 	mov	r6,r22
 8403938:	880f883a 	mov	r7,r17
 840393c:	ddc00817 	ldw	r23,32(sp)
 8403940:	dcc00d17 	ldw	r19,52(sp)
 8403944:	9009883a 	mov	r4,r18
 8403948:	84043e40 	call	84043e4 <__muldi3>
 840394c:	001b883a 	mov	r13,zero
 8403950:	680f883a 	mov	r7,r13
 8403954:	b009883a 	mov	r4,r22
 8403958:	000b883a 	mov	r5,zero
 840395c:	980d883a 	mov	r6,r19
 8403960:	b82d883a 	mov	r22,r23
 8403964:	002f883a 	mov	r23,zero
 8403968:	db401615 	stw	r13,88(sp)
 840396c:	d8801315 	stw	r2,76(sp)
 8403970:	d8c01415 	stw	r3,80(sp)
 8403974:	dcc01515 	stw	r19,84(sp)
 8403978:	84043e40 	call	84043e4 <__muldi3>
 840397c:	b00d883a 	mov	r6,r22
 8403980:	000b883a 	mov	r5,zero
 8403984:	9009883a 	mov	r4,r18
 8403988:	b80f883a 	mov	r7,r23
 840398c:	1021883a 	mov	r16,r2
 8403990:	1823883a 	mov	r17,r3
 8403994:	84043e40 	call	84043e4 <__muldi3>
 8403998:	8085883a 	add	r2,r16,r2
 840399c:	140d803a 	cmpltu	r6,r2,r16
 84039a0:	88c7883a 	add	r3,r17,r3
 84039a4:	30cd883a 	add	r6,r6,r3
 84039a8:	1029883a 	mov	r20,r2
 84039ac:	302b883a 	mov	r21,r6
 84039b0:	da801317 	ldw	r10,76(sp)
 84039b4:	dac01417 	ldw	r11,80(sp)
 84039b8:	db001517 	ldw	r12,84(sp)
 84039bc:	db401617 	ldw	r13,88(sp)
 84039c0:	3440612e 	bgeu	r6,r17,8403b48 <__muldf3+0x318>
 84039c4:	0009883a 	mov	r4,zero
 84039c8:	5105883a 	add	r2,r10,r4
 84039cc:	128d803a 	cmpltu	r6,r2,r10
 84039d0:	5d07883a 	add	r3,r11,r20
 84039d4:	30cd883a 	add	r6,r6,r3
 84039d8:	0021883a 	mov	r16,zero
 84039dc:	04400044 	movi	r17,1
 84039e0:	1025883a 	mov	r18,r2
 84039e4:	3027883a 	mov	r19,r6
 84039e8:	32c06236 	bltu	r6,r11,8403b74 <__muldf3+0x344>
 84039ec:	59807a26 	beq	r11,r6,8403bd8 <__muldf3+0x3a8>
 84039f0:	680b883a 	mov	r5,r13
 84039f4:	b80f883a 	mov	r7,r23
 84039f8:	6009883a 	mov	r4,r12
 84039fc:	b00d883a 	mov	r6,r22
 8403a00:	84043e40 	call	84043e4 <__muldi3>
 8403a04:	1009883a 	mov	r4,r2
 8403a08:	000f883a 	mov	r7,zero
 8403a0c:	1545883a 	add	r2,r2,r21
 8403a10:	1111803a 	cmpltu	r8,r2,r4
 8403a14:	19c7883a 	add	r3,r3,r7
 8403a18:	40c7883a 	add	r3,r8,r3
 8403a1c:	88cb883a 	add	r5,r17,r3
 8403a20:	d8c00617 	ldw	r3,24(sp)
 8403a24:	8089883a 	add	r4,r16,r2
 8403a28:	d8800b17 	ldw	r2,44(sp)
 8403a2c:	18c00104 	addi	r3,r3,4
 8403a30:	240d803a 	cmpltu	r6,r4,r16
 8403a34:	10c7883a 	add	r3,r2,r3
 8403a38:	2013883a 	mov	r9,r4
 8403a3c:	d8800a17 	ldw	r2,40(sp)
 8403a40:	d9000517 	ldw	r4,20(sp)
 8403a44:	314d883a 	add	r6,r6,r5
 8403a48:	3015883a 	mov	r10,r6
 8403a4c:	2088c03a 	cmpne	r4,r4,r2
 8403a50:	00880034 	movhi	r2,8192
 8403a54:	10bfffc4 	addi	r2,r2,-1
 8403a58:	d9000f15 	stw	r4,60(sp)
 8403a5c:	d8c01015 	stw	r3,64(sp)
 8403a60:	1180162e 	bgeu	r2,r6,8403abc <__muldf3+0x28c>
 8403a64:	1811883a 	mov	r8,r3
 8403a68:	101f883a 	mov	r15,r2
 8403a6c:	980497fa 	slli	r2,r19,31
 8403a70:	9016d07a 	srli	r11,r18,1
 8403a74:	500697fa 	slli	r3,r10,31
 8403a78:	480cd07a 	srli	r6,r9,1
 8403a7c:	500ed07a 	srli	r7,r10,1
 8403a80:	12d6b03a 	or	r11,r2,r11
 8403a84:	00800044 	movi	r2,1
 8403a88:	198cb03a 	or	r6,r3,r6
 8403a8c:	4888703a 	and	r4,r9,r2
 8403a90:	9818d07a 	srli	r12,r19,1
 8403a94:	001b883a 	mov	r13,zero
 8403a98:	03a00034 	movhi	r14,32768
 8403a9c:	3013883a 	mov	r9,r6
 8403aa0:	3815883a 	mov	r10,r7
 8403aa4:	4091883a 	add	r8,r8,r2
 8403aa8:	20000226 	beq	r4,zero,8403ab4 <__muldf3+0x284>
 8403aac:	5b64b03a 	or	r18,r11,r13
 8403ab0:	63a6b03a 	or	r19,r12,r14
 8403ab4:	7abfed36 	bltu	r15,r10,8403a6c <__muldf3+0x23c>
 8403ab8:	da001015 	stw	r8,64(sp)
 8403abc:	00840034 	movhi	r2,4096
 8403ac0:	10bfffc4 	addi	r2,r2,-1
 8403ac4:	12801436 	bltu	r2,r10,8403b18 <__muldf3+0x2e8>
 8403ac8:	da001017 	ldw	r8,64(sp)
 8403acc:	101f883a 	mov	r15,r2
 8403ad0:	4a45883a 	add	r2,r9,r9
 8403ad4:	124d803a 	cmpltu	r6,r2,r9
 8403ad8:	5287883a 	add	r3,r10,r10
 8403adc:	9497883a 	add	r11,r18,r18
 8403ae0:	5c8f803a 	cmpltu	r7,r11,r18
 8403ae4:	9cd9883a 	add	r12,r19,r19
 8403ae8:	01000044 	movi	r4,1
 8403aec:	30cd883a 	add	r6,r6,r3
 8403af0:	3b0f883a 	add	r7,r7,r12
 8403af4:	423fffc4 	addi	r8,r8,-1
 8403af8:	1013883a 	mov	r9,r2
 8403afc:	3015883a 	mov	r10,r6
 8403b00:	111ab03a 	or	r13,r2,r4
 8403b04:	98003016 	blt	r19,zero,8403bc8 <__muldf3+0x398>
 8403b08:	5825883a 	mov	r18,r11
 8403b0c:	3827883a 	mov	r19,r7
 8403b10:	7abfef2e 	bgeu	r15,r10,8403ad0 <__muldf3+0x2a0>
 8403b14:	da001015 	stw	r8,64(sp)
 8403b18:	00803fc4 	movi	r2,255
 8403b1c:	488e703a 	and	r7,r9,r2
 8403b20:	00802004 	movi	r2,128
 8403b24:	0007883a 	mov	r3,zero
 8403b28:	0011883a 	mov	r8,zero
 8403b2c:	38801826 	beq	r7,r2,8403b90 <__muldf3+0x360>
 8403b30:	008000c4 	movi	r2,3
 8403b34:	d9000e04 	addi	r4,sp,56
 8403b38:	da801215 	stw	r10,72(sp)
 8403b3c:	d8800e15 	stw	r2,56(sp)
 8403b40:	da401115 	stw	r9,68(sp)
 8403b44:	003f6a06 	br	84038f0 <__muldf3+0xc0>
 8403b48:	89802126 	beq	r17,r6,8403bd0 <__muldf3+0x3a0>
 8403b4c:	0009883a 	mov	r4,zero
 8403b50:	5105883a 	add	r2,r10,r4
 8403b54:	128d803a 	cmpltu	r6,r2,r10
 8403b58:	5d07883a 	add	r3,r11,r20
 8403b5c:	30cd883a 	add	r6,r6,r3
 8403b60:	0021883a 	mov	r16,zero
 8403b64:	0023883a 	mov	r17,zero
 8403b68:	1025883a 	mov	r18,r2
 8403b6c:	3027883a 	mov	r19,r6
 8403b70:	32ff9e2e 	bgeu	r6,r11,84039ec <__muldf3+0x1bc>
 8403b74:	00800044 	movi	r2,1
 8403b78:	8089883a 	add	r4,r16,r2
 8403b7c:	240d803a 	cmpltu	r6,r4,r16
 8403b80:	344d883a 	add	r6,r6,r17
 8403b84:	2021883a 	mov	r16,r4
 8403b88:	3023883a 	mov	r17,r6
 8403b8c:	003f9806 	br	84039f0 <__muldf3+0x1c0>
 8403b90:	403fe71e 	bne	r8,zero,8403b30 <__muldf3+0x300>
 8403b94:	01004004 	movi	r4,256
 8403b98:	4904703a 	and	r2,r9,r4
 8403b9c:	10c4b03a 	or	r2,r2,r3
 8403ba0:	103fe31e 	bne	r2,zero,8403b30 <__muldf3+0x300>
 8403ba4:	94c4b03a 	or	r2,r18,r19
 8403ba8:	103fe126 	beq	r2,zero,8403b30 <__muldf3+0x300>
 8403bac:	49c5883a 	add	r2,r9,r7
 8403bb0:	1251803a 	cmpltu	r8,r2,r9
 8403bb4:	4291883a 	add	r8,r8,r10
 8403bb8:	013fc004 	movi	r4,-256
 8403bbc:	1112703a 	and	r9,r2,r4
 8403bc0:	4015883a 	mov	r10,r8
 8403bc4:	003fda06 	br	8403b30 <__muldf3+0x300>
 8403bc8:	6813883a 	mov	r9,r13
 8403bcc:	003fce06 	br	8403b08 <__muldf3+0x2d8>
 8403bd0:	143f7c36 	bltu	r2,r16,84039c4 <__muldf3+0x194>
 8403bd4:	003fdd06 	br	8403b4c <__muldf3+0x31c>
 8403bd8:	12bf852e 	bgeu	r2,r10,84039f0 <__muldf3+0x1c0>
 8403bdc:	003fe506 	br	8403b74 <__muldf3+0x344>
 8403be0:	00800084 	movi	r2,2
 8403be4:	20bf351e 	bne	r4,r2,84038bc <__muldf3+0x8c>
 8403be8:	01021074 	movhi	r4,2113
 8403bec:	21065d04 	addi	r4,r4,6516
 8403bf0:	003f3f06 	br	84038f0 <__muldf3+0xc0>

08403bf4 <__divdf3>:
 8403bf4:	deffed04 	addi	sp,sp,-76
 8403bf8:	dcc01115 	stw	r19,68(sp)
 8403bfc:	dcc00404 	addi	r19,sp,16
 8403c00:	2011883a 	mov	r8,r4
 8403c04:	2813883a 	mov	r9,r5
 8403c08:	dc000e15 	stw	r16,56(sp)
 8403c0c:	d809883a 	mov	r4,sp
 8403c10:	980b883a 	mov	r5,r19
 8403c14:	dc000904 	addi	r16,sp,36
 8403c18:	dfc01215 	stw	ra,72(sp)
 8403c1c:	da400115 	stw	r9,4(sp)
 8403c20:	d9c00315 	stw	r7,12(sp)
 8403c24:	da000015 	stw	r8,0(sp)
 8403c28:	d9800215 	stw	r6,8(sp)
 8403c2c:	dc801015 	stw	r18,64(sp)
 8403c30:	dc400f15 	stw	r17,60(sp)
 8403c34:	8404b0c0 	call	8404b0c <__unpack_d>
 8403c38:	d9000204 	addi	r4,sp,8
 8403c3c:	800b883a 	mov	r5,r16
 8403c40:	8404b0c0 	call	8404b0c <__unpack_d>
 8403c44:	d9000417 	ldw	r4,16(sp)
 8403c48:	00800044 	movi	r2,1
 8403c4c:	11000b2e 	bgeu	r2,r4,8403c7c <__divdf3+0x88>
 8403c50:	d9400917 	ldw	r5,36(sp)
 8403c54:	1140762e 	bgeu	r2,r5,8403e30 <__divdf3+0x23c>
 8403c58:	d8800517 	ldw	r2,20(sp)
 8403c5c:	d8c00a17 	ldw	r3,40(sp)
 8403c60:	01800104 	movi	r6,4
 8403c64:	10c4f03a 	xor	r2,r2,r3
 8403c68:	d8800515 	stw	r2,20(sp)
 8403c6c:	21800226 	beq	r4,r6,8403c78 <__divdf3+0x84>
 8403c70:	00800084 	movi	r2,2
 8403c74:	2080141e 	bne	r4,r2,8403cc8 <__divdf3+0xd4>
 8403c78:	29000926 	beq	r5,r4,8403ca0 <__divdf3+0xac>
 8403c7c:	9809883a 	mov	r4,r19
 8403c80:	84047f80 	call	84047f8 <__pack_d>
 8403c84:	dfc01217 	ldw	ra,72(sp)
 8403c88:	dcc01117 	ldw	r19,68(sp)
 8403c8c:	dc801017 	ldw	r18,64(sp)
 8403c90:	dc400f17 	ldw	r17,60(sp)
 8403c94:	dc000e17 	ldw	r16,56(sp)
 8403c98:	dec01304 	addi	sp,sp,76
 8403c9c:	f800283a 	ret
 8403ca0:	01021074 	movhi	r4,2113
 8403ca4:	21065d04 	addi	r4,r4,6516
 8403ca8:	84047f80 	call	84047f8 <__pack_d>
 8403cac:	dfc01217 	ldw	ra,72(sp)
 8403cb0:	dcc01117 	ldw	r19,68(sp)
 8403cb4:	dc801017 	ldw	r18,64(sp)
 8403cb8:	dc400f17 	ldw	r17,60(sp)
 8403cbc:	dc000e17 	ldw	r16,56(sp)
 8403cc0:	dec01304 	addi	sp,sp,76
 8403cc4:	f800283a 	ret
 8403cc8:	29805b26 	beq	r5,r6,8403e38 <__divdf3+0x244>
 8403ccc:	28802d26 	beq	r5,r2,8403d84 <__divdf3+0x190>
 8403cd0:	d8c00617 	ldw	r3,24(sp)
 8403cd4:	d8800b17 	ldw	r2,44(sp)
 8403cd8:	d9c00817 	ldw	r7,32(sp)
 8403cdc:	dc400d17 	ldw	r17,52(sp)
 8403ce0:	188bc83a 	sub	r5,r3,r2
 8403ce4:	d9800717 	ldw	r6,28(sp)
 8403ce8:	dc000c17 	ldw	r16,48(sp)
 8403cec:	d9400615 	stw	r5,24(sp)
 8403cf0:	3c403836 	bltu	r7,r17,8403dd4 <__divdf3+0x1e0>
 8403cf4:	89c03626 	beq	r17,r7,8403dd0 <__divdf3+0x1dc>
 8403cf8:	0015883a 	mov	r10,zero
 8403cfc:	001d883a 	mov	r14,zero
 8403d00:	02c40034 	movhi	r11,4096
 8403d04:	001f883a 	mov	r15,zero
 8403d08:	003f883a 	mov	ra,zero
 8403d0c:	04800f44 	movi	r18,61
 8403d10:	00000f06 	br	8403d50 <__divdf3+0x15c>
 8403d14:	601d883a 	mov	r14,r12
 8403d18:	681f883a 	mov	r15,r13
 8403d1c:	400d883a 	mov	r6,r8
 8403d20:	100f883a 	mov	r7,r2
 8403d24:	3191883a 	add	r8,r6,r6
 8403d28:	5808d07a 	srli	r4,r11,1
 8403d2c:	4185803a 	cmpltu	r2,r8,r6
 8403d30:	39d3883a 	add	r9,r7,r7
 8403d34:	28c6b03a 	or	r3,r5,r3
 8403d38:	1245883a 	add	r2,r2,r9
 8403d3c:	1815883a 	mov	r10,r3
 8403d40:	2017883a 	mov	r11,r4
 8403d44:	400d883a 	mov	r6,r8
 8403d48:	100f883a 	mov	r7,r2
 8403d4c:	fc801726 	beq	ra,r18,8403dac <__divdf3+0x1b8>
 8403d50:	580a97fa 	slli	r5,r11,31
 8403d54:	5006d07a 	srli	r3,r10,1
 8403d58:	ffc00044 	addi	ra,ra,1
 8403d5c:	3c7ff136 	bltu	r7,r17,8403d24 <__divdf3+0x130>
 8403d60:	3411c83a 	sub	r8,r6,r16
 8403d64:	3205803a 	cmpltu	r2,r6,r8
 8403d68:	3c53c83a 	sub	r9,r7,r17
 8403d6c:	7298b03a 	or	r12,r14,r10
 8403d70:	7adab03a 	or	r13,r15,r11
 8403d74:	4885c83a 	sub	r2,r9,r2
 8403d78:	89ffe61e 	bne	r17,r7,8403d14 <__divdf3+0x120>
 8403d7c:	343fe936 	bltu	r6,r16,8403d24 <__divdf3+0x130>
 8403d80:	003fe406 	br	8403d14 <__divdf3+0x120>
 8403d84:	9809883a 	mov	r4,r19
 8403d88:	d9800415 	stw	r6,16(sp)
 8403d8c:	84047f80 	call	84047f8 <__pack_d>
 8403d90:	dfc01217 	ldw	ra,72(sp)
 8403d94:	dcc01117 	ldw	r19,68(sp)
 8403d98:	dc801017 	ldw	r18,64(sp)
 8403d9c:	dc400f17 	ldw	r17,60(sp)
 8403da0:	dc000e17 	ldw	r16,56(sp)
 8403da4:	dec01304 	addi	sp,sp,76
 8403da8:	f800283a 	ret
 8403dac:	00803fc4 	movi	r2,255
 8403db0:	7090703a 	and	r8,r14,r2
 8403db4:	00802004 	movi	r2,128
 8403db8:	0007883a 	mov	r3,zero
 8403dbc:	0013883a 	mov	r9,zero
 8403dc0:	40800d26 	beq	r8,r2,8403df8 <__divdf3+0x204>
 8403dc4:	dbc00815 	stw	r15,32(sp)
 8403dc8:	db800715 	stw	r14,28(sp)
 8403dcc:	003fab06 	br	8403c7c <__divdf3+0x88>
 8403dd0:	343fc92e 	bgeu	r6,r16,8403cf8 <__divdf3+0x104>
 8403dd4:	3185883a 	add	r2,r6,r6
 8403dd8:	1189803a 	cmpltu	r4,r2,r6
 8403ddc:	39c7883a 	add	r3,r7,r7
 8403de0:	20c9883a 	add	r4,r4,r3
 8403de4:	297fffc4 	addi	r5,r5,-1
 8403de8:	100d883a 	mov	r6,r2
 8403dec:	200f883a 	mov	r7,r4
 8403df0:	d9400615 	stw	r5,24(sp)
 8403df4:	003fc006 	br	8403cf8 <__divdf3+0x104>
 8403df8:	483ff21e 	bne	r9,zero,8403dc4 <__divdf3+0x1d0>
 8403dfc:	01004004 	movi	r4,256
 8403e00:	7104703a 	and	r2,r14,r4
 8403e04:	10c4b03a 	or	r2,r2,r3
 8403e08:	103fee1e 	bne	r2,zero,8403dc4 <__divdf3+0x1d0>
 8403e0c:	31c4b03a 	or	r2,r6,r7
 8403e10:	103fec26 	beq	r2,zero,8403dc4 <__divdf3+0x1d0>
 8403e14:	7205883a 	add	r2,r14,r8
 8403e18:	1391803a 	cmpltu	r8,r2,r14
 8403e1c:	43d1883a 	add	r8,r8,r15
 8403e20:	013fc004 	movi	r4,-256
 8403e24:	111c703a 	and	r14,r2,r4
 8403e28:	401f883a 	mov	r15,r8
 8403e2c:	003fe506 	br	8403dc4 <__divdf3+0x1d0>
 8403e30:	8009883a 	mov	r4,r16
 8403e34:	003f9206 	br	8403c80 <__divdf3+0x8c>
 8403e38:	9809883a 	mov	r4,r19
 8403e3c:	d8000715 	stw	zero,28(sp)
 8403e40:	d8000815 	stw	zero,32(sp)
 8403e44:	d8000615 	stw	zero,24(sp)
 8403e48:	003f8d06 	br	8403c80 <__divdf3+0x8c>

08403e4c <__eqdf2>:
 8403e4c:	deffef04 	addi	sp,sp,-68
 8403e50:	dc400f15 	stw	r17,60(sp)
 8403e54:	dc400404 	addi	r17,sp,16
 8403e58:	2005883a 	mov	r2,r4
 8403e5c:	2807883a 	mov	r3,r5
 8403e60:	dc000e15 	stw	r16,56(sp)
 8403e64:	d809883a 	mov	r4,sp
 8403e68:	880b883a 	mov	r5,r17
 8403e6c:	dc000904 	addi	r16,sp,36
 8403e70:	d8c00115 	stw	r3,4(sp)
 8403e74:	d8800015 	stw	r2,0(sp)
 8403e78:	d9800215 	stw	r6,8(sp)
 8403e7c:	dfc01015 	stw	ra,64(sp)
 8403e80:	d9c00315 	stw	r7,12(sp)
 8403e84:	8404b0c0 	call	8404b0c <__unpack_d>
 8403e88:	d9000204 	addi	r4,sp,8
 8403e8c:	800b883a 	mov	r5,r16
 8403e90:	8404b0c0 	call	8404b0c <__unpack_d>
 8403e94:	d8800417 	ldw	r2,16(sp)
 8403e98:	00c00044 	movi	r3,1
 8403e9c:	180d883a 	mov	r6,r3
 8403ea0:	1880062e 	bgeu	r3,r2,8403ebc <__eqdf2+0x70>
 8403ea4:	d8800917 	ldw	r2,36(sp)
 8403ea8:	8809883a 	mov	r4,r17
 8403eac:	800b883a 	mov	r5,r16
 8403eb0:	1880022e 	bgeu	r3,r2,8403ebc <__eqdf2+0x70>
 8403eb4:	8404c440 	call	8404c44 <__fpcmp_parts_d>
 8403eb8:	100d883a 	mov	r6,r2
 8403ebc:	3005883a 	mov	r2,r6
 8403ec0:	dfc01017 	ldw	ra,64(sp)
 8403ec4:	dc400f17 	ldw	r17,60(sp)
 8403ec8:	dc000e17 	ldw	r16,56(sp)
 8403ecc:	dec01104 	addi	sp,sp,68
 8403ed0:	f800283a 	ret

08403ed4 <__nedf2>:
 8403ed4:	deffef04 	addi	sp,sp,-68
 8403ed8:	dc400f15 	stw	r17,60(sp)
 8403edc:	dc400404 	addi	r17,sp,16
 8403ee0:	2005883a 	mov	r2,r4
 8403ee4:	2807883a 	mov	r3,r5
 8403ee8:	dc000e15 	stw	r16,56(sp)
 8403eec:	d809883a 	mov	r4,sp
 8403ef0:	880b883a 	mov	r5,r17
 8403ef4:	dc000904 	addi	r16,sp,36
 8403ef8:	d8c00115 	stw	r3,4(sp)
 8403efc:	d8800015 	stw	r2,0(sp)
 8403f00:	d9800215 	stw	r6,8(sp)
 8403f04:	dfc01015 	stw	ra,64(sp)
 8403f08:	d9c00315 	stw	r7,12(sp)
 8403f0c:	8404b0c0 	call	8404b0c <__unpack_d>
 8403f10:	d9000204 	addi	r4,sp,8
 8403f14:	800b883a 	mov	r5,r16
 8403f18:	8404b0c0 	call	8404b0c <__unpack_d>
 8403f1c:	d8800417 	ldw	r2,16(sp)
 8403f20:	00c00044 	movi	r3,1
 8403f24:	180d883a 	mov	r6,r3
 8403f28:	1880062e 	bgeu	r3,r2,8403f44 <__nedf2+0x70>
 8403f2c:	d8800917 	ldw	r2,36(sp)
 8403f30:	8809883a 	mov	r4,r17
 8403f34:	800b883a 	mov	r5,r16
 8403f38:	1880022e 	bgeu	r3,r2,8403f44 <__nedf2+0x70>
 8403f3c:	8404c440 	call	8404c44 <__fpcmp_parts_d>
 8403f40:	100d883a 	mov	r6,r2
 8403f44:	3005883a 	mov	r2,r6
 8403f48:	dfc01017 	ldw	ra,64(sp)
 8403f4c:	dc400f17 	ldw	r17,60(sp)
 8403f50:	dc000e17 	ldw	r16,56(sp)
 8403f54:	dec01104 	addi	sp,sp,68
 8403f58:	f800283a 	ret

08403f5c <__gtdf2>:
 8403f5c:	deffef04 	addi	sp,sp,-68
 8403f60:	dc400f15 	stw	r17,60(sp)
 8403f64:	dc400404 	addi	r17,sp,16
 8403f68:	2005883a 	mov	r2,r4
 8403f6c:	2807883a 	mov	r3,r5
 8403f70:	dc000e15 	stw	r16,56(sp)
 8403f74:	d809883a 	mov	r4,sp
 8403f78:	880b883a 	mov	r5,r17
 8403f7c:	dc000904 	addi	r16,sp,36
 8403f80:	d8c00115 	stw	r3,4(sp)
 8403f84:	d8800015 	stw	r2,0(sp)
 8403f88:	d9800215 	stw	r6,8(sp)
 8403f8c:	dfc01015 	stw	ra,64(sp)
 8403f90:	d9c00315 	stw	r7,12(sp)
 8403f94:	8404b0c0 	call	8404b0c <__unpack_d>
 8403f98:	d9000204 	addi	r4,sp,8
 8403f9c:	800b883a 	mov	r5,r16
 8403fa0:	8404b0c0 	call	8404b0c <__unpack_d>
 8403fa4:	d8800417 	ldw	r2,16(sp)
 8403fa8:	00c00044 	movi	r3,1
 8403fac:	01bfffc4 	movi	r6,-1
 8403fb0:	1880062e 	bgeu	r3,r2,8403fcc <__gtdf2+0x70>
 8403fb4:	d8800917 	ldw	r2,36(sp)
 8403fb8:	8809883a 	mov	r4,r17
 8403fbc:	800b883a 	mov	r5,r16
 8403fc0:	1880022e 	bgeu	r3,r2,8403fcc <__gtdf2+0x70>
 8403fc4:	8404c440 	call	8404c44 <__fpcmp_parts_d>
 8403fc8:	100d883a 	mov	r6,r2
 8403fcc:	3005883a 	mov	r2,r6
 8403fd0:	dfc01017 	ldw	ra,64(sp)
 8403fd4:	dc400f17 	ldw	r17,60(sp)
 8403fd8:	dc000e17 	ldw	r16,56(sp)
 8403fdc:	dec01104 	addi	sp,sp,68
 8403fe0:	f800283a 	ret

08403fe4 <__ltdf2>:
 8403fe4:	deffef04 	addi	sp,sp,-68
 8403fe8:	dc400f15 	stw	r17,60(sp)
 8403fec:	dc400404 	addi	r17,sp,16
 8403ff0:	2005883a 	mov	r2,r4
 8403ff4:	2807883a 	mov	r3,r5
 8403ff8:	dc000e15 	stw	r16,56(sp)
 8403ffc:	d809883a 	mov	r4,sp
 8404000:	880b883a 	mov	r5,r17
 8404004:	dc000904 	addi	r16,sp,36
 8404008:	d8c00115 	stw	r3,4(sp)
 840400c:	d8800015 	stw	r2,0(sp)
 8404010:	d9800215 	stw	r6,8(sp)
 8404014:	dfc01015 	stw	ra,64(sp)
 8404018:	d9c00315 	stw	r7,12(sp)
 840401c:	8404b0c0 	call	8404b0c <__unpack_d>
 8404020:	d9000204 	addi	r4,sp,8
 8404024:	800b883a 	mov	r5,r16
 8404028:	8404b0c0 	call	8404b0c <__unpack_d>
 840402c:	d8800417 	ldw	r2,16(sp)
 8404030:	00c00044 	movi	r3,1
 8404034:	180d883a 	mov	r6,r3
 8404038:	1880062e 	bgeu	r3,r2,8404054 <__ltdf2+0x70>
 840403c:	d8800917 	ldw	r2,36(sp)
 8404040:	8809883a 	mov	r4,r17
 8404044:	800b883a 	mov	r5,r16
 8404048:	1880022e 	bgeu	r3,r2,8404054 <__ltdf2+0x70>
 840404c:	8404c440 	call	8404c44 <__fpcmp_parts_d>
 8404050:	100d883a 	mov	r6,r2
 8404054:	3005883a 	mov	r2,r6
 8404058:	dfc01017 	ldw	ra,64(sp)
 840405c:	dc400f17 	ldw	r17,60(sp)
 8404060:	dc000e17 	ldw	r16,56(sp)
 8404064:	dec01104 	addi	sp,sp,68
 8404068:	f800283a 	ret

0840406c <__ledf2>:
 840406c:	deffef04 	addi	sp,sp,-68
 8404070:	dc400f15 	stw	r17,60(sp)
 8404074:	dc400404 	addi	r17,sp,16
 8404078:	2005883a 	mov	r2,r4
 840407c:	2807883a 	mov	r3,r5
 8404080:	dc000e15 	stw	r16,56(sp)
 8404084:	d809883a 	mov	r4,sp
 8404088:	880b883a 	mov	r5,r17
 840408c:	dc000904 	addi	r16,sp,36
 8404090:	d8c00115 	stw	r3,4(sp)
 8404094:	d8800015 	stw	r2,0(sp)
 8404098:	d9800215 	stw	r6,8(sp)
 840409c:	dfc01015 	stw	ra,64(sp)
 84040a0:	d9c00315 	stw	r7,12(sp)
 84040a4:	8404b0c0 	call	8404b0c <__unpack_d>
 84040a8:	d9000204 	addi	r4,sp,8
 84040ac:	800b883a 	mov	r5,r16
 84040b0:	8404b0c0 	call	8404b0c <__unpack_d>
 84040b4:	d8800417 	ldw	r2,16(sp)
 84040b8:	00c00044 	movi	r3,1
 84040bc:	180d883a 	mov	r6,r3
 84040c0:	1880062e 	bgeu	r3,r2,84040dc <__ledf2+0x70>
 84040c4:	d8800917 	ldw	r2,36(sp)
 84040c8:	8809883a 	mov	r4,r17
 84040cc:	800b883a 	mov	r5,r16
 84040d0:	1880022e 	bgeu	r3,r2,84040dc <__ledf2+0x70>
 84040d4:	8404c440 	call	8404c44 <__fpcmp_parts_d>
 84040d8:	100d883a 	mov	r6,r2
 84040dc:	3005883a 	mov	r2,r6
 84040e0:	dfc01017 	ldw	ra,64(sp)
 84040e4:	dc400f17 	ldw	r17,60(sp)
 84040e8:	dc000e17 	ldw	r16,56(sp)
 84040ec:	dec01104 	addi	sp,sp,68
 84040f0:	f800283a 	ret

084040f4 <__floatsidf>:
 84040f4:	2006d7fa 	srli	r3,r4,31
 84040f8:	defff604 	addi	sp,sp,-40
 84040fc:	008000c4 	movi	r2,3
 8404100:	dfc00915 	stw	ra,36(sp)
 8404104:	dcc00815 	stw	r19,32(sp)
 8404108:	dc800715 	stw	r18,28(sp)
 840410c:	dc400615 	stw	r17,24(sp)
 8404110:	dc000515 	stw	r16,20(sp)
 8404114:	d8800015 	stw	r2,0(sp)
 8404118:	d8c00115 	stw	r3,4(sp)
 840411c:	20000f1e 	bne	r4,zero,840415c <__floatsidf+0x68>
 8404120:	00800084 	movi	r2,2
 8404124:	d8800015 	stw	r2,0(sp)
 8404128:	d809883a 	mov	r4,sp
 840412c:	84047f80 	call	84047f8 <__pack_d>
 8404130:	1009883a 	mov	r4,r2
 8404134:	180b883a 	mov	r5,r3
 8404138:	2005883a 	mov	r2,r4
 840413c:	2807883a 	mov	r3,r5
 8404140:	dfc00917 	ldw	ra,36(sp)
 8404144:	dcc00817 	ldw	r19,32(sp)
 8404148:	dc800717 	ldw	r18,28(sp)
 840414c:	dc400617 	ldw	r17,24(sp)
 8404150:	dc000517 	ldw	r16,20(sp)
 8404154:	dec00a04 	addi	sp,sp,40
 8404158:	f800283a 	ret
 840415c:	00800f04 	movi	r2,60
 8404160:	1807003a 	cmpeq	r3,r3,zero
 8404164:	d8800215 	stw	r2,8(sp)
 8404168:	18001126 	beq	r3,zero,84041b0 <__floatsidf+0xbc>
 840416c:	0027883a 	mov	r19,zero
 8404170:	2025883a 	mov	r18,r4
 8404174:	d9000315 	stw	r4,12(sp)
 8404178:	dcc00415 	stw	r19,16(sp)
 840417c:	840447c0 	call	840447c <__clzsi2>
 8404180:	11000744 	addi	r4,r2,29
 8404184:	013fe80e 	bge	zero,r4,8404128 <__floatsidf+0x34>
 8404188:	10bfff44 	addi	r2,r2,-3
 840418c:	10000c16 	blt	r2,zero,84041c0 <__floatsidf+0xcc>
 8404190:	90a2983a 	sll	r17,r18,r2
 8404194:	0021883a 	mov	r16,zero
 8404198:	d8800217 	ldw	r2,8(sp)
 840419c:	dc400415 	stw	r17,16(sp)
 84041a0:	dc000315 	stw	r16,12(sp)
 84041a4:	1105c83a 	sub	r2,r2,r4
 84041a8:	d8800215 	stw	r2,8(sp)
 84041ac:	003fde06 	br	8404128 <__floatsidf+0x34>
 84041b0:	00a00034 	movhi	r2,32768
 84041b4:	20800a26 	beq	r4,r2,84041e0 <__floatsidf+0xec>
 84041b8:	0109c83a 	sub	r4,zero,r4
 84041bc:	003feb06 	br	840416c <__floatsidf+0x78>
 84041c0:	9006d07a 	srli	r3,r18,1
 84041c4:	008007c4 	movi	r2,31
 84041c8:	1105c83a 	sub	r2,r2,r4
 84041cc:	1886d83a 	srl	r3,r3,r2
 84041d0:	9922983a 	sll	r17,r19,r4
 84041d4:	9120983a 	sll	r16,r18,r4
 84041d8:	1c62b03a 	or	r17,r3,r17
 84041dc:	003fee06 	br	8404198 <__floatsidf+0xa4>
 84041e0:	0009883a 	mov	r4,zero
 84041e4:	01707834 	movhi	r5,49632
 84041e8:	003fd306 	br	8404138 <__floatsidf+0x44>

084041ec <__make_dp>:
 84041ec:	defff904 	addi	sp,sp,-28
 84041f0:	d8c00717 	ldw	r3,28(sp)
 84041f4:	d9000015 	stw	r4,0(sp)
 84041f8:	d809883a 	mov	r4,sp
 84041fc:	dfc00515 	stw	ra,20(sp)
 8404200:	d9c00615 	stw	r7,24(sp)
 8404204:	d9400115 	stw	r5,4(sp)
 8404208:	d9800215 	stw	r6,8(sp)
 840420c:	d8c00415 	stw	r3,16(sp)
 8404210:	d9c00315 	stw	r7,12(sp)
 8404214:	84047f80 	call	84047f8 <__pack_d>
 8404218:	dfc00517 	ldw	ra,20(sp)
 840421c:	dec00704 	addi	sp,sp,28
 8404220:	f800283a 	ret

08404224 <__truncdfsf2>:
 8404224:	defff804 	addi	sp,sp,-32
 8404228:	2005883a 	mov	r2,r4
 840422c:	2807883a 	mov	r3,r5
 8404230:	d809883a 	mov	r4,sp
 8404234:	d9400204 	addi	r5,sp,8
 8404238:	d8c00115 	stw	r3,4(sp)
 840423c:	d8800015 	stw	r2,0(sp)
 8404240:	dfc00715 	stw	ra,28(sp)
 8404244:	8404b0c0 	call	8404b0c <__unpack_d>
 8404248:	d9c00517 	ldw	r7,20(sp)
 840424c:	da000617 	ldw	r8,24(sp)
 8404250:	02d00034 	movhi	r11,16384
 8404254:	5affffc4 	addi	r11,r11,-1
 8404258:	3812d7ba 	srli	r9,r7,30
 840425c:	401a90ba 	slli	r13,r8,2
 8404260:	3ac4703a 	and	r2,r7,r11
 8404264:	0007883a 	mov	r3,zero
 8404268:	6a52b03a 	or	r9,r13,r9
 840426c:	10c4b03a 	or	r2,r2,r3
 8404270:	d9000217 	ldw	r4,8(sp)
 8404274:	d9400317 	ldw	r5,12(sp)
 8404278:	d9800417 	ldw	r6,16(sp)
 840427c:	480f883a 	mov	r7,r9
 8404280:	10000126 	beq	r2,zero,8404288 <__truncdfsf2+0x64>
 8404284:	49c00054 	ori	r7,r9,1
 8404288:	84047cc0 	call	84047cc <__make_fp>
 840428c:	dfc00717 	ldw	ra,28(sp)
 8404290:	dec00804 	addi	sp,sp,32
 8404294:	f800283a 	ret

08404298 <udivmodsi4>:
 8404298:	29001b2e 	bgeu	r5,r4,8404308 <udivmodsi4+0x70>
 840429c:	28001a16 	blt	r5,zero,8404308 <udivmodsi4+0x70>
 84042a0:	00800044 	movi	r2,1
 84042a4:	0007883a 	mov	r3,zero
 84042a8:	01c007c4 	movi	r7,31
 84042ac:	00000306 	br	84042bc <udivmodsi4+0x24>
 84042b0:	19c01326 	beq	r3,r7,8404300 <udivmodsi4+0x68>
 84042b4:	18c00044 	addi	r3,r3,1
 84042b8:	28000416 	blt	r5,zero,84042cc <udivmodsi4+0x34>
 84042bc:	294b883a 	add	r5,r5,r5
 84042c0:	1085883a 	add	r2,r2,r2
 84042c4:	293ffa36 	bltu	r5,r4,84042b0 <udivmodsi4+0x18>
 84042c8:	10000d26 	beq	r2,zero,8404300 <udivmodsi4+0x68>
 84042cc:	0007883a 	mov	r3,zero
 84042d0:	21400236 	bltu	r4,r5,84042dc <udivmodsi4+0x44>
 84042d4:	2149c83a 	sub	r4,r4,r5
 84042d8:	1886b03a 	or	r3,r3,r2
 84042dc:	1004d07a 	srli	r2,r2,1
 84042e0:	280ad07a 	srli	r5,r5,1
 84042e4:	103ffa1e 	bne	r2,zero,84042d0 <udivmodsi4+0x38>
 84042e8:	30000226 	beq	r6,zero,84042f4 <udivmodsi4+0x5c>
 84042ec:	2005883a 	mov	r2,r4
 84042f0:	f800283a 	ret
 84042f4:	1809883a 	mov	r4,r3
 84042f8:	2005883a 	mov	r2,r4
 84042fc:	f800283a 	ret
 8404300:	0007883a 	mov	r3,zero
 8404304:	003ff806 	br	84042e8 <udivmodsi4+0x50>
 8404308:	00800044 	movi	r2,1
 840430c:	0007883a 	mov	r3,zero
 8404310:	003fef06 	br	84042d0 <udivmodsi4+0x38>

08404314 <__divsi3>:
 8404314:	defffe04 	addi	sp,sp,-8
 8404318:	dc000015 	stw	r16,0(sp)
 840431c:	dfc00115 	stw	ra,4(sp)
 8404320:	0021883a 	mov	r16,zero
 8404324:	20000c16 	blt	r4,zero,8404358 <__divsi3+0x44>
 8404328:	000d883a 	mov	r6,zero
 840432c:	28000e16 	blt	r5,zero,8404368 <__divsi3+0x54>
 8404330:	84042980 	call	8404298 <udivmodsi4>
 8404334:	1007883a 	mov	r3,r2
 8404338:	8005003a 	cmpeq	r2,r16,zero
 840433c:	1000011e 	bne	r2,zero,8404344 <__divsi3+0x30>
 8404340:	00c7c83a 	sub	r3,zero,r3
 8404344:	1805883a 	mov	r2,r3
 8404348:	dfc00117 	ldw	ra,4(sp)
 840434c:	dc000017 	ldw	r16,0(sp)
 8404350:	dec00204 	addi	sp,sp,8
 8404354:	f800283a 	ret
 8404358:	0109c83a 	sub	r4,zero,r4
 840435c:	04000044 	movi	r16,1
 8404360:	000d883a 	mov	r6,zero
 8404364:	283ff20e 	bge	r5,zero,8404330 <__divsi3+0x1c>
 8404368:	014bc83a 	sub	r5,zero,r5
 840436c:	8021003a 	cmpeq	r16,r16,zero
 8404370:	003fef06 	br	8404330 <__divsi3+0x1c>

08404374 <__modsi3>:
 8404374:	deffff04 	addi	sp,sp,-4
 8404378:	dfc00015 	stw	ra,0(sp)
 840437c:	01800044 	movi	r6,1
 8404380:	2807883a 	mov	r3,r5
 8404384:	20000416 	blt	r4,zero,8404398 <__modsi3+0x24>
 8404388:	28000c16 	blt	r5,zero,84043bc <__modsi3+0x48>
 840438c:	dfc00017 	ldw	ra,0(sp)
 8404390:	dec00104 	addi	sp,sp,4
 8404394:	84042981 	jmpi	8404298 <udivmodsi4>
 8404398:	0109c83a 	sub	r4,zero,r4
 840439c:	28000b16 	blt	r5,zero,84043cc <__modsi3+0x58>
 84043a0:	180b883a 	mov	r5,r3
 84043a4:	01800044 	movi	r6,1
 84043a8:	84042980 	call	8404298 <udivmodsi4>
 84043ac:	0085c83a 	sub	r2,zero,r2
 84043b0:	dfc00017 	ldw	ra,0(sp)
 84043b4:	dec00104 	addi	sp,sp,4
 84043b8:	f800283a 	ret
 84043bc:	014bc83a 	sub	r5,zero,r5
 84043c0:	dfc00017 	ldw	ra,0(sp)
 84043c4:	dec00104 	addi	sp,sp,4
 84043c8:	84042981 	jmpi	8404298 <udivmodsi4>
 84043cc:	0147c83a 	sub	r3,zero,r5
 84043d0:	003ff306 	br	84043a0 <__modsi3+0x2c>

084043d4 <__udivsi3>:
 84043d4:	000d883a 	mov	r6,zero
 84043d8:	84042981 	jmpi	8404298 <udivmodsi4>

084043dc <__umodsi3>:
 84043dc:	01800044 	movi	r6,1
 84043e0:	84042981 	jmpi	8404298 <udivmodsi4>

084043e4 <__muldi3>:
 84043e4:	2011883a 	mov	r8,r4
 84043e8:	427fffcc 	andi	r9,r8,65535
 84043ec:	4018d43a 	srli	r12,r8,16
 84043f0:	32bfffcc 	andi	r10,r6,65535
 84043f4:	3016d43a 	srli	r11,r6,16
 84043f8:	4a85383a 	mul	r2,r9,r10
 84043fc:	6295383a 	mul	r10,r12,r10
 8404400:	4ad3383a 	mul	r9,r9,r11
 8404404:	113fffcc 	andi	r4,r2,65535
 8404408:	1004d43a 	srli	r2,r2,16
 840440c:	4a93883a 	add	r9,r9,r10
 8404410:	3807883a 	mov	r3,r7
 8404414:	1245883a 	add	r2,r2,r9
 8404418:	280f883a 	mov	r7,r5
 840441c:	180b883a 	mov	r5,r3
 8404420:	1006943a 	slli	r3,r2,16
 8404424:	defffd04 	addi	sp,sp,-12
 8404428:	dc800215 	stw	r18,8(sp)
 840442c:	1907883a 	add	r3,r3,r4
 8404430:	dc400115 	stw	r17,4(sp)
 8404434:	dc000015 	stw	r16,0(sp)
 8404438:	4165383a 	mul	r18,r8,r5
 840443c:	31e3383a 	mul	r17,r6,r7
 8404440:	1012d43a 	srli	r9,r2,16
 8404444:	62d9383a 	mul	r12,r12,r11
 8404448:	181f883a 	mov	r15,r3
 840444c:	1280022e 	bgeu	r2,r10,8404458 <__muldi3+0x74>
 8404450:	00800074 	movhi	r2,1
 8404454:	6099883a 	add	r12,r12,r2
 8404458:	624d883a 	add	r6,r12,r9
 840445c:	9187883a 	add	r3,r18,r6
 8404460:	88c7883a 	add	r3,r17,r3
 8404464:	7805883a 	mov	r2,r15
 8404468:	dc800217 	ldw	r18,8(sp)
 840446c:	dc400117 	ldw	r17,4(sp)
 8404470:	dc000017 	ldw	r16,0(sp)
 8404474:	dec00304 	addi	sp,sp,12
 8404478:	f800283a 	ret

0840447c <__clzsi2>:
 840447c:	00bfffd4 	movui	r2,65535
 8404480:	11000e36 	bltu	r2,r4,84044bc <__clzsi2+0x40>
 8404484:	00803fc4 	movi	r2,255
 8404488:	01400204 	movi	r5,8
 840448c:	0007883a 	mov	r3,zero
 8404490:	11001036 	bltu	r2,r4,84044d4 <__clzsi2+0x58>
 8404494:	000b883a 	mov	r5,zero
 8404498:	20c6d83a 	srl	r3,r4,r3
 840449c:	00821074 	movhi	r2,2113
 84044a0:	10866204 	addi	r2,r2,6536
 84044a4:	1887883a 	add	r3,r3,r2
 84044a8:	18800003 	ldbu	r2,0(r3)
 84044ac:	00c00804 	movi	r3,32
 84044b0:	2885883a 	add	r2,r5,r2
 84044b4:	1885c83a 	sub	r2,r3,r2
 84044b8:	f800283a 	ret
 84044bc:	01400404 	movi	r5,16
 84044c0:	00804034 	movhi	r2,256
 84044c4:	10bfffc4 	addi	r2,r2,-1
 84044c8:	2807883a 	mov	r3,r5
 84044cc:	113ff22e 	bgeu	r2,r4,8404498 <__clzsi2+0x1c>
 84044d0:	01400604 	movi	r5,24
 84044d4:	2807883a 	mov	r3,r5
 84044d8:	20c6d83a 	srl	r3,r4,r3
 84044dc:	00821074 	movhi	r2,2113
 84044e0:	10866204 	addi	r2,r2,6536
 84044e4:	1887883a 	add	r3,r3,r2
 84044e8:	18800003 	ldbu	r2,0(r3)
 84044ec:	00c00804 	movi	r3,32
 84044f0:	2885883a 	add	r2,r5,r2
 84044f4:	1885c83a 	sub	r2,r3,r2
 84044f8:	f800283a 	ret

084044fc <__pack_f>:
 84044fc:	20c00017 	ldw	r3,0(r4)
 8404500:	01c00044 	movi	r7,1
 8404504:	21800317 	ldw	r6,12(r4)
 8404508:	21400117 	ldw	r5,4(r4)
 840450c:	38c02d2e 	bgeu	r7,r3,84045c4 <__pack_f+0xc8>
 8404510:	00800104 	movi	r2,4
 8404514:	18802826 	beq	r3,r2,84045b8 <__pack_f+0xbc>
 8404518:	00800084 	movi	r2,2
 840451c:	18800126 	beq	r3,r2,8404524 <__pack_f+0x28>
 8404520:	3000101e 	bne	r6,zero,8404564 <__pack_f+0x68>
 8404524:	000d883a 	mov	r6,zero
 8404528:	0007883a 	mov	r3,zero
 840452c:	19003fcc 	andi	r4,r3,255
 8404530:	200895fa 	slli	r4,r4,23
 8404534:	00c02034 	movhi	r3,128
 8404538:	18ffffc4 	addi	r3,r3,-1
 840453c:	30c6703a 	and	r3,r6,r3
 8404540:	10a0002c 	andhi	r2,r2,32768
 8404544:	10c4b03a 	or	r2,r2,r3
 8404548:	280a97fa 	slli	r5,r5,31
 840454c:	1104b03a 	or	r2,r2,r4
 8404550:	00e00034 	movhi	r3,32768
 8404554:	18ffffc4 	addi	r3,r3,-1
 8404558:	10c4703a 	and	r2,r2,r3
 840455c:	1144b03a 	or	r2,r2,r5
 8404560:	f800283a 	ret
 8404564:	21000217 	ldw	r4,8(r4)
 8404568:	00bfe084 	movi	r2,-126
 840456c:	20801b16 	blt	r4,r2,84045dc <__pack_f+0xe0>
 8404570:	00801fc4 	movi	r2,127
 8404574:	11001016 	blt	r2,r4,84045b8 <__pack_f+0xbc>
 8404578:	308e703a 	and	r7,r6,r2
 840457c:	2087883a 	add	r3,r4,r2
 8404580:	00801004 	movi	r2,64
 8404584:	38800526 	beq	r7,r2,840459c <__pack_f+0xa0>
 8404588:	31800fc4 	addi	r6,r6,63
 840458c:	30000716 	blt	r6,zero,84045ac <__pack_f+0xb0>
 8404590:	300490ba 	slli	r2,r6,2
 8404594:	100cd27a 	srli	r6,r2,9
 8404598:	003fe406 	br	840452c <__pack_f+0x30>
 840459c:	3080200c 	andi	r2,r6,128
 84045a0:	103ffa26 	beq	r2,zero,840458c <__pack_f+0x90>
 84045a4:	31cd883a 	add	r6,r6,r7
 84045a8:	003ff806 	br	840458c <__pack_f+0x90>
 84045ac:	300cd07a 	srli	r6,r6,1
 84045b0:	18c00044 	addi	r3,r3,1
 84045b4:	003ff606 	br	8404590 <__pack_f+0x94>
 84045b8:	000d883a 	mov	r6,zero
 84045bc:	00ffffc4 	movi	r3,-1
 84045c0:	003fda06 	br	840452c <__pack_f+0x30>
 84045c4:	31800434 	orhi	r6,r6,16
 84045c8:	00802034 	movhi	r2,128
 84045cc:	10bfffc4 	addi	r2,r2,-1
 84045d0:	308c703a 	and	r6,r6,r2
 84045d4:	00ffffc4 	movi	r3,-1
 84045d8:	003fd406 	br	840452c <__pack_f+0x30>
 84045dc:	1109c83a 	sub	r4,r2,r4
 84045e0:	00800644 	movi	r2,25
 84045e4:	11001216 	blt	r2,r4,8404630 <__pack_f+0x134>
 84045e8:	3904983a 	sll	r2,r7,r4
 84045ec:	3106d83a 	srl	r3,r6,r4
 84045f0:	10bfffc4 	addi	r2,r2,-1
 84045f4:	3084703a 	and	r2,r6,r2
 84045f8:	1004c03a 	cmpne	r2,r2,zero
 84045fc:	1886b03a 	or	r3,r3,r2
 8404600:	19001fcc 	andi	r4,r3,127
 8404604:	00801004 	movi	r2,64
 8404608:	20800c26 	beq	r4,r2,840463c <__pack_f+0x140>
 840460c:	18c00fc4 	addi	r3,r3,63
 8404610:	00900034 	movhi	r2,16384
 8404614:	10bfffc4 	addi	r2,r2,-1
 8404618:	180cd1fa 	srli	r6,r3,7
 840461c:	10c7803a 	cmpltu	r3,r2,r3
 8404620:	00802034 	movhi	r2,128
 8404624:	10bfffc4 	addi	r2,r2,-1
 8404628:	308c703a 	and	r6,r6,r2
 840462c:	003fbf06 	br	840452c <__pack_f+0x30>
 8404630:	0007883a 	mov	r3,zero
 8404634:	000d883a 	mov	r6,zero
 8404638:	003ff906 	br	8404620 <__pack_f+0x124>
 840463c:	1880200c 	andi	r2,r3,128
 8404640:	10000126 	beq	r2,zero,8404648 <__pack_f+0x14c>
 8404644:	1907883a 	add	r3,r3,r4
 8404648:	180cd1fa 	srli	r6,r3,7
 840464c:	00900034 	movhi	r2,16384
 8404650:	10bfffc4 	addi	r2,r2,-1
 8404654:	10c7803a 	cmpltu	r3,r2,r3
 8404658:	003ff106 	br	8404620 <__pack_f+0x124>

0840465c <__unpack_f>:
 840465c:	21800017 	ldw	r6,0(r4)
 8404660:	00c02034 	movhi	r3,128
 8404664:	18ffffc4 	addi	r3,r3,-1
 8404668:	3004d5fa 	srli	r2,r6,23
 840466c:	3008d7fa 	srli	r4,r6,31
 8404670:	30ce703a 	and	r7,r6,r3
 8404674:	10c03fcc 	andi	r3,r2,255
 8404678:	29000115 	stw	r4,4(r5)
 840467c:	1800131e 	bne	r3,zero,84046cc <__unpack_f+0x70>
 8404680:	38000f26 	beq	r7,zero,84046c0 <__unpack_f+0x64>
 8404684:	380691fa 	slli	r3,r7,7
 8404688:	01bfe084 	movi	r6,-126
 840468c:	008000c4 	movi	r2,3
 8404690:	01100034 	movhi	r4,16384
 8404694:	213fffc4 	addi	r4,r4,-1
 8404698:	28800015 	stw	r2,0(r5)
 840469c:	29800215 	stw	r6,8(r5)
 84046a0:	20c00536 	bltu	r4,r3,84046b8 <__unpack_f+0x5c>
 84046a4:	3005883a 	mov	r2,r6
 84046a8:	18c7883a 	add	r3,r3,r3
 84046ac:	10bfffc4 	addi	r2,r2,-1
 84046b0:	20fffd2e 	bgeu	r4,r3,84046a8 <__unpack_f+0x4c>
 84046b4:	28800215 	stw	r2,8(r5)
 84046b8:	28c00315 	stw	r3,12(r5)
 84046bc:	f800283a 	ret
 84046c0:	00800084 	movi	r2,2
 84046c4:	28800015 	stw	r2,0(r5)
 84046c8:	f800283a 	ret
 84046cc:	00803fc4 	movi	r2,255
 84046d0:	18800826 	beq	r3,r2,84046f4 <__unpack_f+0x98>
 84046d4:	380491fa 	slli	r2,r7,7
 84046d8:	18ffe044 	addi	r3,r3,-127
 84046dc:	28c00215 	stw	r3,8(r5)
 84046e0:	10900034 	orhi	r2,r2,16384
 84046e4:	28800315 	stw	r2,12(r5)
 84046e8:	008000c4 	movi	r2,3
 84046ec:	28800015 	stw	r2,0(r5)
 84046f0:	f800283a 	ret
 84046f4:	3800031e 	bne	r7,zero,8404704 <__unpack_f+0xa8>
 84046f8:	00800104 	movi	r2,4
 84046fc:	28800015 	stw	r2,0(r5)
 8404700:	f800283a 	ret
 8404704:	3080042c 	andhi	r2,r6,16
 8404708:	10000426 	beq	r2,zero,840471c <__unpack_f+0xc0>
 840470c:	00800044 	movi	r2,1
 8404710:	28800015 	stw	r2,0(r5)
 8404714:	29c00315 	stw	r7,12(r5)
 8404718:	f800283a 	ret
 840471c:	28000015 	stw	zero,0(r5)
 8404720:	003ffc06 	br	8404714 <__unpack_f+0xb8>

08404724 <__fpcmp_parts_f>:
 8404724:	21800017 	ldw	r6,0(r4)
 8404728:	00c00044 	movi	r3,1
 840472c:	19800a2e 	bgeu	r3,r6,8404758 <__fpcmp_parts_f+0x34>
 8404730:	28800017 	ldw	r2,0(r5)
 8404734:	1880082e 	bgeu	r3,r2,8404758 <__fpcmp_parts_f+0x34>
 8404738:	00c00104 	movi	r3,4
 840473c:	30c01e26 	beq	r6,r3,84047b8 <__fpcmp_parts_f+0x94>
 8404740:	10c01a26 	beq	r2,r3,84047ac <__fpcmp_parts_f+0x88>
 8404744:	00c00084 	movi	r3,2
 8404748:	30c00526 	beq	r6,r3,8404760 <__fpcmp_parts_f+0x3c>
 840474c:	10c0071e 	bne	r2,r3,840476c <__fpcmp_parts_f+0x48>
 8404750:	20800117 	ldw	r2,4(r4)
 8404754:	1000091e 	bne	r2,zero,840477c <__fpcmp_parts_f+0x58>
 8404758:	00800044 	movi	r2,1
 840475c:	f800283a 	ret
 8404760:	10c0121e 	bne	r2,r3,84047ac <__fpcmp_parts_f+0x88>
 8404764:	0005883a 	mov	r2,zero
 8404768:	f800283a 	ret
 840476c:	20c00117 	ldw	r3,4(r4)
 8404770:	28800117 	ldw	r2,4(r5)
 8404774:	18800326 	beq	r3,r2,8404784 <__fpcmp_parts_f+0x60>
 8404778:	183ff726 	beq	r3,zero,8404758 <__fpcmp_parts_f+0x34>
 840477c:	00bfffc4 	movi	r2,-1
 8404780:	f800283a 	ret
 8404784:	21800217 	ldw	r6,8(r4)
 8404788:	28800217 	ldw	r2,8(r5)
 840478c:	11bffa16 	blt	r2,r6,8404778 <__fpcmp_parts_f+0x54>
 8404790:	30800416 	blt	r6,r2,84047a4 <__fpcmp_parts_f+0x80>
 8404794:	21000317 	ldw	r4,12(r4)
 8404798:	29400317 	ldw	r5,12(r5)
 840479c:	293ff636 	bltu	r5,r4,8404778 <__fpcmp_parts_f+0x54>
 84047a0:	217ff02e 	bgeu	r4,r5,8404764 <__fpcmp_parts_f+0x40>
 84047a4:	183fec1e 	bne	r3,zero,8404758 <__fpcmp_parts_f+0x34>
 84047a8:	003ff406 	br	840477c <__fpcmp_parts_f+0x58>
 84047ac:	28800117 	ldw	r2,4(r5)
 84047b0:	103fe91e 	bne	r2,zero,8404758 <__fpcmp_parts_f+0x34>
 84047b4:	003ff106 	br	840477c <__fpcmp_parts_f+0x58>
 84047b8:	11bfe51e 	bne	r2,r6,8404750 <__fpcmp_parts_f+0x2c>
 84047bc:	28c00117 	ldw	r3,4(r5)
 84047c0:	20800117 	ldw	r2,4(r4)
 84047c4:	1885c83a 	sub	r2,r3,r2
 84047c8:	f800283a 	ret

084047cc <__make_fp>:
 84047cc:	defffb04 	addi	sp,sp,-20
 84047d0:	d9000015 	stw	r4,0(sp)
 84047d4:	d809883a 	mov	r4,sp
 84047d8:	dfc00415 	stw	ra,16(sp)
 84047dc:	d9400115 	stw	r5,4(sp)
 84047e0:	d9800215 	stw	r6,8(sp)
 84047e4:	d9c00315 	stw	r7,12(sp)
 84047e8:	84044fc0 	call	84044fc <__pack_f>
 84047ec:	dfc00417 	ldw	ra,16(sp)
 84047f0:	dec00504 	addi	sp,sp,20
 84047f4:	f800283a 	ret

084047f8 <__pack_d>:
 84047f8:	20c00017 	ldw	r3,0(r4)
 84047fc:	defffd04 	addi	sp,sp,-12
 8404800:	dc000015 	stw	r16,0(sp)
 8404804:	dc800215 	stw	r18,8(sp)
 8404808:	dc400115 	stw	r17,4(sp)
 840480c:	00800044 	movi	r2,1
 8404810:	22000317 	ldw	r8,12(r4)
 8404814:	001f883a 	mov	r15,zero
 8404818:	22400417 	ldw	r9,16(r4)
 840481c:	24000117 	ldw	r16,4(r4)
 8404820:	10c0552e 	bgeu	r2,r3,8404978 <__pack_d+0x180>
 8404824:	00800104 	movi	r2,4
 8404828:	18804f26 	beq	r3,r2,8404968 <__pack_d+0x170>
 840482c:	00800084 	movi	r2,2
 8404830:	18800226 	beq	r3,r2,840483c <__pack_d+0x44>
 8404834:	4244b03a 	or	r2,r8,r9
 8404838:	10001a1e 	bne	r2,zero,84048a4 <__pack_d+0xac>
 840483c:	000d883a 	mov	r6,zero
 8404840:	000f883a 	mov	r7,zero
 8404844:	0011883a 	mov	r8,zero
 8404848:	00800434 	movhi	r2,16
 840484c:	10bfffc4 	addi	r2,r2,-1
 8404850:	301d883a 	mov	r14,r6
 8404854:	3884703a 	and	r2,r7,r2
 8404858:	400a953a 	slli	r5,r8,20
 840485c:	79bffc2c 	andhi	r6,r15,65520
 8404860:	308cb03a 	or	r6,r6,r2
 8404864:	00e00434 	movhi	r3,32784
 8404868:	18ffffc4 	addi	r3,r3,-1
 840486c:	800497fa 	slli	r2,r16,31
 8404870:	30c6703a 	and	r3,r6,r3
 8404874:	1946b03a 	or	r3,r3,r5
 8404878:	01600034 	movhi	r5,32768
 840487c:	297fffc4 	addi	r5,r5,-1
 8404880:	194a703a 	and	r5,r3,r5
 8404884:	288ab03a 	or	r5,r5,r2
 8404888:	2807883a 	mov	r3,r5
 840488c:	7005883a 	mov	r2,r14
 8404890:	dc800217 	ldw	r18,8(sp)
 8404894:	dc400117 	ldw	r17,4(sp)
 8404898:	dc000017 	ldw	r16,0(sp)
 840489c:	dec00304 	addi	sp,sp,12
 84048a0:	f800283a 	ret
 84048a4:	21000217 	ldw	r4,8(r4)
 84048a8:	00bf0084 	movi	r2,-1022
 84048ac:	20803f16 	blt	r4,r2,84049ac <__pack_d+0x1b4>
 84048b0:	0080ffc4 	movi	r2,1023
 84048b4:	11002c16 	blt	r2,r4,8404968 <__pack_d+0x170>
 84048b8:	00803fc4 	movi	r2,255
 84048bc:	408c703a 	and	r6,r8,r2
 84048c0:	00802004 	movi	r2,128
 84048c4:	0007883a 	mov	r3,zero
 84048c8:	000f883a 	mov	r7,zero
 84048cc:	2280ffc4 	addi	r10,r4,1023
 84048d0:	30801e26 	beq	r6,r2,840494c <__pack_d+0x154>
 84048d4:	00801fc4 	movi	r2,127
 84048d8:	4089883a 	add	r4,r8,r2
 84048dc:	220d803a 	cmpltu	r6,r4,r8
 84048e0:	324d883a 	add	r6,r6,r9
 84048e4:	2011883a 	mov	r8,r4
 84048e8:	3013883a 	mov	r9,r6
 84048ec:	00880034 	movhi	r2,8192
 84048f0:	10bfffc4 	addi	r2,r2,-1
 84048f4:	12400d36 	bltu	r2,r9,840492c <__pack_d+0x134>
 84048f8:	4804963a 	slli	r2,r9,24
 84048fc:	400cd23a 	srli	r6,r8,8
 8404900:	480ed23a 	srli	r7,r9,8
 8404904:	013fffc4 	movi	r4,-1
 8404908:	118cb03a 	or	r6,r2,r6
 840490c:	01400434 	movhi	r5,16
 8404910:	297fffc4 	addi	r5,r5,-1
 8404914:	3104703a 	and	r2,r6,r4
 8404918:	3946703a 	and	r3,r7,r5
 840491c:	5201ffcc 	andi	r8,r10,2047
 8404920:	100d883a 	mov	r6,r2
 8404924:	180f883a 	mov	r7,r3
 8404928:	003fc706 	br	8404848 <__pack_d+0x50>
 840492c:	480897fa 	slli	r4,r9,31
 8404930:	4004d07a 	srli	r2,r8,1
 8404934:	4806d07a 	srli	r3,r9,1
 8404938:	52800044 	addi	r10,r10,1
 840493c:	2084b03a 	or	r2,r4,r2
 8404940:	1011883a 	mov	r8,r2
 8404944:	1813883a 	mov	r9,r3
 8404948:	003feb06 	br	84048f8 <__pack_d+0x100>
 840494c:	383fe11e 	bne	r7,zero,84048d4 <__pack_d+0xdc>
 8404950:	01004004 	movi	r4,256
 8404954:	4104703a 	and	r2,r8,r4
 8404958:	10c4b03a 	or	r2,r2,r3
 840495c:	103fe326 	beq	r2,zero,84048ec <__pack_d+0xf4>
 8404960:	3005883a 	mov	r2,r6
 8404964:	003fdc06 	br	84048d8 <__pack_d+0xe0>
 8404968:	000d883a 	mov	r6,zero
 840496c:	000f883a 	mov	r7,zero
 8404970:	0201ffc4 	movi	r8,2047
 8404974:	003fb406 	br	8404848 <__pack_d+0x50>
 8404978:	0005883a 	mov	r2,zero
 840497c:	00c00234 	movhi	r3,8
 8404980:	408cb03a 	or	r6,r8,r2
 8404984:	48ceb03a 	or	r7,r9,r3
 8404988:	013fffc4 	movi	r4,-1
 840498c:	01400434 	movhi	r5,16
 8404990:	297fffc4 	addi	r5,r5,-1
 8404994:	3104703a 	and	r2,r6,r4
 8404998:	3946703a 	and	r3,r7,r5
 840499c:	100d883a 	mov	r6,r2
 84049a0:	180f883a 	mov	r7,r3
 84049a4:	0201ffc4 	movi	r8,2047
 84049a8:	003fa706 	br	8404848 <__pack_d+0x50>
 84049ac:	1109c83a 	sub	r4,r2,r4
 84049b0:	00800e04 	movi	r2,56
 84049b4:	11004316 	blt	r2,r4,8404ac4 <__pack_d+0x2cc>
 84049b8:	21fff804 	addi	r7,r4,-32
 84049bc:	38004516 	blt	r7,zero,8404ad4 <__pack_d+0x2dc>
 84049c0:	49d8d83a 	srl	r12,r9,r7
 84049c4:	001b883a 	mov	r13,zero
 84049c8:	0023883a 	mov	r17,zero
 84049cc:	01400044 	movi	r5,1
 84049d0:	0025883a 	mov	r18,zero
 84049d4:	38004716 	blt	r7,zero,8404af4 <__pack_d+0x2fc>
 84049d8:	29d6983a 	sll	r11,r5,r7
 84049dc:	0015883a 	mov	r10,zero
 84049e0:	00bfffc4 	movi	r2,-1
 84049e4:	5089883a 	add	r4,r10,r2
 84049e8:	588b883a 	add	r5,r11,r2
 84049ec:	228d803a 	cmpltu	r6,r4,r10
 84049f0:	314b883a 	add	r5,r6,r5
 84049f4:	4104703a 	and	r2,r8,r4
 84049f8:	4946703a 	and	r3,r9,r5
 84049fc:	10c4b03a 	or	r2,r2,r3
 8404a00:	10000226 	beq	r2,zero,8404a0c <__pack_d+0x214>
 8404a04:	04400044 	movi	r17,1
 8404a08:	0025883a 	mov	r18,zero
 8404a0c:	00803fc4 	movi	r2,255
 8404a10:	644eb03a 	or	r7,r12,r17
 8404a14:	3892703a 	and	r9,r7,r2
 8404a18:	00802004 	movi	r2,128
 8404a1c:	6c90b03a 	or	r8,r13,r18
 8404a20:	0015883a 	mov	r10,zero
 8404a24:	48801626 	beq	r9,r2,8404a80 <__pack_d+0x288>
 8404a28:	01001fc4 	movi	r4,127
 8404a2c:	3905883a 	add	r2,r7,r4
 8404a30:	11cd803a 	cmpltu	r6,r2,r7
 8404a34:	320d883a 	add	r6,r6,r8
 8404a38:	100f883a 	mov	r7,r2
 8404a3c:	00840034 	movhi	r2,4096
 8404a40:	10bfffc4 	addi	r2,r2,-1
 8404a44:	3011883a 	mov	r8,r6
 8404a48:	0007883a 	mov	r3,zero
 8404a4c:	11801b36 	bltu	r2,r6,8404abc <__pack_d+0x2c4>
 8404a50:	4004963a 	slli	r2,r8,24
 8404a54:	3808d23a 	srli	r4,r7,8
 8404a58:	400ad23a 	srli	r5,r8,8
 8404a5c:	1813883a 	mov	r9,r3
 8404a60:	1108b03a 	or	r4,r2,r4
 8404a64:	00bfffc4 	movi	r2,-1
 8404a68:	00c00434 	movhi	r3,16
 8404a6c:	18ffffc4 	addi	r3,r3,-1
 8404a70:	208c703a 	and	r6,r4,r2
 8404a74:	28ce703a 	and	r7,r5,r3
 8404a78:	4a01ffcc 	andi	r8,r9,2047
 8404a7c:	003f7206 	br	8404848 <__pack_d+0x50>
 8404a80:	503fe91e 	bne	r10,zero,8404a28 <__pack_d+0x230>
 8404a84:	01004004 	movi	r4,256
 8404a88:	3904703a 	and	r2,r7,r4
 8404a8c:	0007883a 	mov	r3,zero
 8404a90:	10c4b03a 	or	r2,r2,r3
 8404a94:	10000626 	beq	r2,zero,8404ab0 <__pack_d+0x2b8>
 8404a98:	3a45883a 	add	r2,r7,r9
 8404a9c:	11cd803a 	cmpltu	r6,r2,r7
 8404aa0:	320d883a 	add	r6,r6,r8
 8404aa4:	100f883a 	mov	r7,r2
 8404aa8:	3011883a 	mov	r8,r6
 8404aac:	0007883a 	mov	r3,zero
 8404ab0:	00840034 	movhi	r2,4096
 8404ab4:	10bfffc4 	addi	r2,r2,-1
 8404ab8:	123fe52e 	bgeu	r2,r8,8404a50 <__pack_d+0x258>
 8404abc:	00c00044 	movi	r3,1
 8404ac0:	003fe306 	br	8404a50 <__pack_d+0x258>
 8404ac4:	0009883a 	mov	r4,zero
 8404ac8:	0013883a 	mov	r9,zero
 8404acc:	000b883a 	mov	r5,zero
 8404ad0:	003fe406 	br	8404a64 <__pack_d+0x26c>
 8404ad4:	4a47883a 	add	r3,r9,r9
 8404ad8:	008007c4 	movi	r2,31
 8404adc:	1105c83a 	sub	r2,r2,r4
 8404ae0:	1886983a 	sll	r3,r3,r2
 8404ae4:	4118d83a 	srl	r12,r8,r4
 8404ae8:	491ad83a 	srl	r13,r9,r4
 8404aec:	1b18b03a 	or	r12,r3,r12
 8404af0:	003fb506 	br	84049c8 <__pack_d+0x1d0>
 8404af4:	2806d07a 	srli	r3,r5,1
 8404af8:	008007c4 	movi	r2,31
 8404afc:	1105c83a 	sub	r2,r2,r4
 8404b00:	1896d83a 	srl	r11,r3,r2
 8404b04:	2914983a 	sll	r10,r5,r4
 8404b08:	003fb506 	br	84049e0 <__pack_d+0x1e8>

08404b0c <__unpack_d>:
 8404b0c:	20c00117 	ldw	r3,4(r4)
 8404b10:	22400017 	ldw	r9,0(r4)
 8404b14:	00800434 	movhi	r2,16
 8404b18:	10bfffc4 	addi	r2,r2,-1
 8404b1c:	1808d53a 	srli	r4,r3,20
 8404b20:	180cd7fa 	srli	r6,r3,31
 8404b24:	1894703a 	and	r10,r3,r2
 8404b28:	2201ffcc 	andi	r8,r4,2047
 8404b2c:	281b883a 	mov	r13,r5
 8404b30:	4817883a 	mov	r11,r9
 8404b34:	29800115 	stw	r6,4(r5)
 8404b38:	5019883a 	mov	r12,r10
 8404b3c:	40001e1e 	bne	r8,zero,8404bb8 <__unpack_d+0xac>
 8404b40:	4a84b03a 	or	r2,r9,r10
 8404b44:	10001926 	beq	r2,zero,8404bac <__unpack_d+0xa0>
 8404b48:	4804d63a 	srli	r2,r9,24
 8404b4c:	500c923a 	slli	r6,r10,8
 8404b50:	013f0084 	movi	r4,-1022
 8404b54:	00c40034 	movhi	r3,4096
 8404b58:	18ffffc4 	addi	r3,r3,-1
 8404b5c:	118cb03a 	or	r6,r2,r6
 8404b60:	008000c4 	movi	r2,3
 8404b64:	480a923a 	slli	r5,r9,8
 8404b68:	68800015 	stw	r2,0(r13)
 8404b6c:	69000215 	stw	r4,8(r13)
 8404b70:	19800b36 	bltu	r3,r6,8404ba0 <__unpack_d+0x94>
 8404b74:	200f883a 	mov	r7,r4
 8404b78:	1811883a 	mov	r8,r3
 8404b7c:	2945883a 	add	r2,r5,r5
 8404b80:	1149803a 	cmpltu	r4,r2,r5
 8404b84:	3187883a 	add	r3,r6,r6
 8404b88:	20c9883a 	add	r4,r4,r3
 8404b8c:	100b883a 	mov	r5,r2
 8404b90:	200d883a 	mov	r6,r4
 8404b94:	39ffffc4 	addi	r7,r7,-1
 8404b98:	413ff82e 	bgeu	r8,r4,8404b7c <__unpack_d+0x70>
 8404b9c:	69c00215 	stw	r7,8(r13)
 8404ba0:	69800415 	stw	r6,16(r13)
 8404ba4:	69400315 	stw	r5,12(r13)
 8404ba8:	f800283a 	ret
 8404bac:	00800084 	movi	r2,2
 8404bb0:	28800015 	stw	r2,0(r5)
 8404bb4:	f800283a 	ret
 8404bb8:	0081ffc4 	movi	r2,2047
 8404bbc:	40800f26 	beq	r8,r2,8404bfc <__unpack_d+0xf0>
 8404bc0:	480cd63a 	srli	r6,r9,24
 8404bc4:	5006923a 	slli	r3,r10,8
 8404bc8:	4804923a 	slli	r2,r9,8
 8404bcc:	0009883a 	mov	r4,zero
 8404bd0:	30c6b03a 	or	r3,r6,r3
 8404bd4:	01440034 	movhi	r5,4096
 8404bd8:	110cb03a 	or	r6,r2,r4
 8404bdc:	423f0044 	addi	r8,r8,-1023
 8404be0:	194eb03a 	or	r7,r3,r5
 8404be4:	008000c4 	movi	r2,3
 8404be8:	69c00415 	stw	r7,16(r13)
 8404bec:	6a000215 	stw	r8,8(r13)
 8404bf0:	68800015 	stw	r2,0(r13)
 8404bf4:	69800315 	stw	r6,12(r13)
 8404bf8:	f800283a 	ret
 8404bfc:	4a84b03a 	or	r2,r9,r10
 8404c00:	1000031e 	bne	r2,zero,8404c10 <__unpack_d+0x104>
 8404c04:	00800104 	movi	r2,4
 8404c08:	28800015 	stw	r2,0(r5)
 8404c0c:	f800283a 	ret
 8404c10:	0009883a 	mov	r4,zero
 8404c14:	01400234 	movhi	r5,8
 8404c18:	4904703a 	and	r2,r9,r4
 8404c1c:	5146703a 	and	r3,r10,r5
 8404c20:	10c4b03a 	or	r2,r2,r3
 8404c24:	10000526 	beq	r2,zero,8404c3c <__unpack_d+0x130>
 8404c28:	00800044 	movi	r2,1
 8404c2c:	68800015 	stw	r2,0(r13)
 8404c30:	6b000415 	stw	r12,16(r13)
 8404c34:	6ac00315 	stw	r11,12(r13)
 8404c38:	f800283a 	ret
 8404c3c:	68000015 	stw	zero,0(r13)
 8404c40:	003ffb06 	br	8404c30 <__unpack_d+0x124>

08404c44 <__fpcmp_parts_d>:
 8404c44:	21800017 	ldw	r6,0(r4)
 8404c48:	00c00044 	movi	r3,1
 8404c4c:	19800a2e 	bgeu	r3,r6,8404c78 <__fpcmp_parts_d+0x34>
 8404c50:	28800017 	ldw	r2,0(r5)
 8404c54:	1880082e 	bgeu	r3,r2,8404c78 <__fpcmp_parts_d+0x34>
 8404c58:	00c00104 	movi	r3,4
 8404c5c:	30c02626 	beq	r6,r3,8404cf8 <__fpcmp_parts_d+0xb4>
 8404c60:	10c02226 	beq	r2,r3,8404cec <__fpcmp_parts_d+0xa8>
 8404c64:	00c00084 	movi	r3,2
 8404c68:	30c00526 	beq	r6,r3,8404c80 <__fpcmp_parts_d+0x3c>
 8404c6c:	10c0071e 	bne	r2,r3,8404c8c <__fpcmp_parts_d+0x48>
 8404c70:	20800117 	ldw	r2,4(r4)
 8404c74:	1000091e 	bne	r2,zero,8404c9c <__fpcmp_parts_d+0x58>
 8404c78:	00800044 	movi	r2,1
 8404c7c:	f800283a 	ret
 8404c80:	10c01a1e 	bne	r2,r3,8404cec <__fpcmp_parts_d+0xa8>
 8404c84:	0005883a 	mov	r2,zero
 8404c88:	f800283a 	ret
 8404c8c:	22000117 	ldw	r8,4(r4)
 8404c90:	28800117 	ldw	r2,4(r5)
 8404c94:	40800326 	beq	r8,r2,8404ca4 <__fpcmp_parts_d+0x60>
 8404c98:	403ff726 	beq	r8,zero,8404c78 <__fpcmp_parts_d+0x34>
 8404c9c:	00bfffc4 	movi	r2,-1
 8404ca0:	f800283a 	ret
 8404ca4:	20c00217 	ldw	r3,8(r4)
 8404ca8:	28800217 	ldw	r2,8(r5)
 8404cac:	10fffa16 	blt	r2,r3,8404c98 <__fpcmp_parts_d+0x54>
 8404cb0:	18800916 	blt	r3,r2,8404cd8 <__fpcmp_parts_d+0x94>
 8404cb4:	21c00417 	ldw	r7,16(r4)
 8404cb8:	28c00417 	ldw	r3,16(r5)
 8404cbc:	21800317 	ldw	r6,12(r4)
 8404cc0:	28800317 	ldw	r2,12(r5)
 8404cc4:	19fff436 	bltu	r3,r7,8404c98 <__fpcmp_parts_d+0x54>
 8404cc8:	38c00526 	beq	r7,r3,8404ce0 <__fpcmp_parts_d+0x9c>
 8404ccc:	38c00236 	bltu	r7,r3,8404cd8 <__fpcmp_parts_d+0x94>
 8404cd0:	19ffec1e 	bne	r3,r7,8404c84 <__fpcmp_parts_d+0x40>
 8404cd4:	30bfeb2e 	bgeu	r6,r2,8404c84 <__fpcmp_parts_d+0x40>
 8404cd8:	403fe71e 	bne	r8,zero,8404c78 <__fpcmp_parts_d+0x34>
 8404cdc:	003fef06 	br	8404c9c <__fpcmp_parts_d+0x58>
 8404ce0:	11bffa2e 	bgeu	r2,r6,8404ccc <__fpcmp_parts_d+0x88>
 8404ce4:	403fe426 	beq	r8,zero,8404c78 <__fpcmp_parts_d+0x34>
 8404ce8:	003fec06 	br	8404c9c <__fpcmp_parts_d+0x58>
 8404cec:	28800117 	ldw	r2,4(r5)
 8404cf0:	103fe11e 	bne	r2,zero,8404c78 <__fpcmp_parts_d+0x34>
 8404cf4:	003fe906 	br	8404c9c <__fpcmp_parts_d+0x58>
 8404cf8:	11bfdd1e 	bne	r2,r6,8404c70 <__fpcmp_parts_d+0x2c>
 8404cfc:	28c00117 	ldw	r3,4(r5)
 8404d00:	20800117 	ldw	r2,4(r4)
 8404d04:	1885c83a 	sub	r2,r3,r2
 8404d08:	f800283a 	ret

08404d0c <__errno>:
 8404d0c:	00c21074 	movhi	r3,2113
 8404d10:	18ce5204 	addi	r3,r3,14664
 8404d14:	18800017 	ldw	r2,0(r3)
 8404d18:	f800283a 	ret

08404d1c <printf>:
 8404d1c:	defffb04 	addi	sp,sp,-20
 8404d20:	dfc00115 	stw	ra,4(sp)
 8404d24:	d9400215 	stw	r5,8(sp)
 8404d28:	d9800315 	stw	r6,12(sp)
 8404d2c:	d9c00415 	stw	r7,16(sp)
 8404d30:	00821074 	movhi	r2,2113
 8404d34:	108e5204 	addi	r2,r2,14664
 8404d38:	10c00017 	ldw	r3,0(r2)
 8404d3c:	200b883a 	mov	r5,r4
 8404d40:	d8800204 	addi	r2,sp,8
 8404d44:	19000217 	ldw	r4,8(r3)
 8404d48:	100d883a 	mov	r6,r2
 8404d4c:	d8800015 	stw	r2,0(sp)
 8404d50:	8406dc00 	call	8406dc0 <__vfprintf_internal>
 8404d54:	dfc00117 	ldw	ra,4(sp)
 8404d58:	dec00504 	addi	sp,sp,20
 8404d5c:	f800283a 	ret

08404d60 <_printf_r>:
 8404d60:	defffc04 	addi	sp,sp,-16
 8404d64:	dfc00115 	stw	ra,4(sp)
 8404d68:	d9800215 	stw	r6,8(sp)
 8404d6c:	d9c00315 	stw	r7,12(sp)
 8404d70:	280d883a 	mov	r6,r5
 8404d74:	21400217 	ldw	r5,8(r4)
 8404d78:	d8c00204 	addi	r3,sp,8
 8404d7c:	180f883a 	mov	r7,r3
 8404d80:	d8c00015 	stw	r3,0(sp)
 8404d84:	8404f140 	call	8404f14 <___vfprintf_internal_r>
 8404d88:	dfc00117 	ldw	ra,4(sp)
 8404d8c:	dec00404 	addi	sp,sp,16
 8404d90:	f800283a 	ret

08404d94 <_puts_r>:
 8404d94:	defff604 	addi	sp,sp,-40
 8404d98:	dc400715 	stw	r17,28(sp)
 8404d9c:	2023883a 	mov	r17,r4
 8404da0:	2809883a 	mov	r4,r5
 8404da4:	dfc00915 	stw	ra,36(sp)
 8404da8:	dcc00815 	stw	r19,32(sp)
 8404dac:	2827883a 	mov	r19,r5
 8404db0:	8404e480 	call	8404e48 <strlen>
 8404db4:	89400217 	ldw	r5,8(r17)
 8404db8:	00c21074 	movhi	r3,2113
 8404dbc:	18c6a304 	addi	r3,r3,6796
 8404dc0:	01c00044 	movi	r7,1
 8404dc4:	12000044 	addi	r8,r2,1
 8404dc8:	d8c00515 	stw	r3,20(sp)
 8404dcc:	d9c00615 	stw	r7,24(sp)
 8404dd0:	d8c00304 	addi	r3,sp,12
 8404dd4:	01c00084 	movi	r7,2
 8404dd8:	8809883a 	mov	r4,r17
 8404ddc:	d80d883a 	mov	r6,sp
 8404de0:	d8c00015 	stw	r3,0(sp)
 8404de4:	dcc00315 	stw	r19,12(sp)
 8404de8:	da000215 	stw	r8,8(sp)
 8404dec:	d9c00115 	stw	r7,4(sp)
 8404df0:	d8800415 	stw	r2,16(sp)
 8404df4:	840901c0 	call	840901c <__sfvwrite_r>
 8404df8:	00ffffc4 	movi	r3,-1
 8404dfc:	10000626 	beq	r2,zero,8404e18 <_puts_r+0x84>
 8404e00:	1805883a 	mov	r2,r3
 8404e04:	dfc00917 	ldw	ra,36(sp)
 8404e08:	dcc00817 	ldw	r19,32(sp)
 8404e0c:	dc400717 	ldw	r17,28(sp)
 8404e10:	dec00a04 	addi	sp,sp,40
 8404e14:	f800283a 	ret
 8404e18:	00c00284 	movi	r3,10
 8404e1c:	1805883a 	mov	r2,r3
 8404e20:	dfc00917 	ldw	ra,36(sp)
 8404e24:	dcc00817 	ldw	r19,32(sp)
 8404e28:	dc400717 	ldw	r17,28(sp)
 8404e2c:	dec00a04 	addi	sp,sp,40
 8404e30:	f800283a 	ret

08404e34 <puts>:
 8404e34:	00821074 	movhi	r2,2113
 8404e38:	108e5204 	addi	r2,r2,14664
 8404e3c:	200b883a 	mov	r5,r4
 8404e40:	11000017 	ldw	r4,0(r2)
 8404e44:	8404d941 	jmpi	8404d94 <_puts_r>

08404e48 <strlen>:
 8404e48:	208000cc 	andi	r2,r4,3
 8404e4c:	2011883a 	mov	r8,r4
 8404e50:	1000161e 	bne	r2,zero,8404eac <strlen+0x64>
 8404e54:	20c00017 	ldw	r3,0(r4)
 8404e58:	017fbff4 	movhi	r5,65279
 8404e5c:	297fbfc4 	addi	r5,r5,-257
 8404e60:	01e02074 	movhi	r7,32897
 8404e64:	39e02004 	addi	r7,r7,-32640
 8404e68:	1945883a 	add	r2,r3,r5
 8404e6c:	11c4703a 	and	r2,r2,r7
 8404e70:	00c6303a 	nor	r3,zero,r3
 8404e74:	1886703a 	and	r3,r3,r2
 8404e78:	18000c1e 	bne	r3,zero,8404eac <strlen+0x64>
 8404e7c:	280d883a 	mov	r6,r5
 8404e80:	380b883a 	mov	r5,r7
 8404e84:	21000104 	addi	r4,r4,4
 8404e88:	20800017 	ldw	r2,0(r4)
 8404e8c:	1187883a 	add	r3,r2,r6
 8404e90:	1946703a 	and	r3,r3,r5
 8404e94:	0084303a 	nor	r2,zero,r2
 8404e98:	10c4703a 	and	r2,r2,r3
 8404e9c:	103ff926 	beq	r2,zero,8404e84 <strlen+0x3c>
 8404ea0:	20800007 	ldb	r2,0(r4)
 8404ea4:	10000326 	beq	r2,zero,8404eb4 <strlen+0x6c>
 8404ea8:	21000044 	addi	r4,r4,1
 8404eac:	20800007 	ldb	r2,0(r4)
 8404eb0:	103ffd1e 	bne	r2,zero,8404ea8 <strlen+0x60>
 8404eb4:	2205c83a 	sub	r2,r4,r8
 8404eb8:	f800283a 	ret

08404ebc <__sprint_r>:
 8404ebc:	30800217 	ldw	r2,8(r6)
 8404ec0:	defffe04 	addi	sp,sp,-8
 8404ec4:	dc000015 	stw	r16,0(sp)
 8404ec8:	dfc00115 	stw	ra,4(sp)
 8404ecc:	3021883a 	mov	r16,r6
 8404ed0:	0007883a 	mov	r3,zero
 8404ed4:	1000061e 	bne	r2,zero,8404ef0 <__sprint_r+0x34>
 8404ed8:	1805883a 	mov	r2,r3
 8404edc:	30000115 	stw	zero,4(r6)
 8404ee0:	dfc00117 	ldw	ra,4(sp)
 8404ee4:	dc000017 	ldw	r16,0(sp)
 8404ee8:	dec00204 	addi	sp,sp,8
 8404eec:	f800283a 	ret
 8404ef0:	840901c0 	call	840901c <__sfvwrite_r>
 8404ef4:	1007883a 	mov	r3,r2
 8404ef8:	1805883a 	mov	r2,r3
 8404efc:	80000115 	stw	zero,4(r16)
 8404f00:	80000215 	stw	zero,8(r16)
 8404f04:	dfc00117 	ldw	ra,4(sp)
 8404f08:	dc000017 	ldw	r16,0(sp)
 8404f0c:	dec00204 	addi	sp,sp,8
 8404f10:	f800283a 	ret

08404f14 <___vfprintf_internal_r>:
 8404f14:	defea404 	addi	sp,sp,-1392
 8404f18:	dd815815 	stw	r22,1376(sp)
 8404f1c:	dc015215 	stw	r16,1352(sp)
 8404f20:	d9c15115 	stw	r7,1348(sp)
 8404f24:	dfc15b15 	stw	ra,1388(sp)
 8404f28:	df015a15 	stw	fp,1384(sp)
 8404f2c:	ddc15915 	stw	r23,1380(sp)
 8404f30:	dd415715 	stw	r21,1372(sp)
 8404f34:	dd015615 	stw	r20,1368(sp)
 8404f38:	dcc15515 	stw	r19,1364(sp)
 8404f3c:	dc815415 	stw	r18,1360(sp)
 8404f40:	dc415315 	stw	r17,1356(sp)
 8404f44:	282d883a 	mov	r22,r5
 8404f48:	3021883a 	mov	r16,r6
 8404f4c:	d9014f15 	stw	r4,1340(sp)
 8404f50:	84096400 	call	8409640 <_localeconv_r>
 8404f54:	10800017 	ldw	r2,0(r2)
 8404f58:	d9c15117 	ldw	r7,1348(sp)
 8404f5c:	d8814915 	stw	r2,1316(sp)
 8404f60:	d8814f17 	ldw	r2,1340(sp)
 8404f64:	10000226 	beq	r2,zero,8404f70 <___vfprintf_internal_r+0x5c>
 8404f68:	10800e17 	ldw	r2,56(r2)
 8404f6c:	10020d26 	beq	r2,zero,84057a4 <___vfprintf_internal_r+0x890>
 8404f70:	b080030b 	ldhu	r2,12(r22)
 8404f74:	1080020c 	andi	r2,r2,8
 8404f78:	10020e26 	beq	r2,zero,84057b4 <___vfprintf_internal_r+0x8a0>
 8404f7c:	b0800417 	ldw	r2,16(r22)
 8404f80:	10020c26 	beq	r2,zero,84057b4 <___vfprintf_internal_r+0x8a0>
 8404f84:	b200030b 	ldhu	r8,12(r22)
 8404f88:	00800284 	movi	r2,10
 8404f8c:	40c0068c 	andi	r3,r8,26
 8404f90:	18802f1e 	bne	r3,r2,8405050 <___vfprintf_internal_r+0x13c>
 8404f94:	b080038f 	ldh	r2,14(r22)
 8404f98:	10002d16 	blt	r2,zero,8405050 <___vfprintf_internal_r+0x13c>
 8404f9c:	b240038b 	ldhu	r9,14(r22)
 8404fa0:	b2800717 	ldw	r10,28(r22)
 8404fa4:	b2c00917 	ldw	r11,36(r22)
 8404fa8:	d9014f17 	ldw	r4,1340(sp)
 8404fac:	dc402904 	addi	r17,sp,164
 8404fb0:	d8804004 	addi	r2,sp,256
 8404fb4:	00c10004 	movi	r3,1024
 8404fb8:	423fff4c 	andi	r8,r8,65533
 8404fbc:	800d883a 	mov	r6,r16
 8404fc0:	880b883a 	mov	r5,r17
 8404fc4:	da002c0d 	sth	r8,176(sp)
 8404fc8:	da402c8d 	sth	r9,178(sp)
 8404fcc:	da803015 	stw	r10,192(sp)
 8404fd0:	dac03215 	stw	r11,200(sp)
 8404fd4:	d8802d15 	stw	r2,180(sp)
 8404fd8:	d8c02e15 	stw	r3,184(sp)
 8404fdc:	d8802915 	stw	r2,164(sp)
 8404fe0:	d8c02b15 	stw	r3,172(sp)
 8404fe4:	d8002f15 	stw	zero,188(sp)
 8404fe8:	8404f140 	call	8404f14 <___vfprintf_internal_r>
 8404fec:	d8814b15 	stw	r2,1324(sp)
 8404ff0:	10000416 	blt	r2,zero,8405004 <___vfprintf_internal_r+0xf0>
 8404ff4:	d9014f17 	ldw	r4,1340(sp)
 8404ff8:	880b883a 	mov	r5,r17
 8404ffc:	84086ec0 	call	84086ec <_fflush_r>
 8405000:	1002321e 	bne	r2,zero,84058cc <___vfprintf_internal_r+0x9b8>
 8405004:	d8802c0b 	ldhu	r2,176(sp)
 8405008:	1080100c 	andi	r2,r2,64
 840500c:	10000326 	beq	r2,zero,840501c <___vfprintf_internal_r+0x108>
 8405010:	b080030b 	ldhu	r2,12(r22)
 8405014:	10801014 	ori	r2,r2,64
 8405018:	b080030d 	sth	r2,12(r22)
 840501c:	d8814b17 	ldw	r2,1324(sp)
 8405020:	dfc15b17 	ldw	ra,1388(sp)
 8405024:	df015a17 	ldw	fp,1384(sp)
 8405028:	ddc15917 	ldw	r23,1380(sp)
 840502c:	dd815817 	ldw	r22,1376(sp)
 8405030:	dd415717 	ldw	r21,1372(sp)
 8405034:	dd015617 	ldw	r20,1368(sp)
 8405038:	dcc15517 	ldw	r19,1364(sp)
 840503c:	dc815417 	ldw	r18,1360(sp)
 8405040:	dc415317 	ldw	r17,1356(sp)
 8405044:	dc015217 	ldw	r16,1352(sp)
 8405048:	dec15c04 	addi	sp,sp,1392
 840504c:	f800283a 	ret
 8405050:	0005883a 	mov	r2,zero
 8405054:	0007883a 	mov	r3,zero
 8405058:	dd401904 	addi	r21,sp,100
 840505c:	d8814215 	stw	r2,1288(sp)
 8405060:	802f883a 	mov	r23,r16
 8405064:	d8c14315 	stw	r3,1292(sp)
 8405068:	d8014b15 	stw	zero,1324(sp)
 840506c:	d8014815 	stw	zero,1312(sp)
 8405070:	d8014415 	stw	zero,1296(sp)
 8405074:	d8014715 	stw	zero,1308(sp)
 8405078:	dd400c15 	stw	r21,48(sp)
 840507c:	d8000e15 	stw	zero,56(sp)
 8405080:	d8000d15 	stw	zero,52(sp)
 8405084:	b8800007 	ldb	r2,0(r23)
 8405088:	10001926 	beq	r2,zero,84050f0 <___vfprintf_internal_r+0x1dc>
 840508c:	00c00944 	movi	r3,37
 8405090:	10c01726 	beq	r2,r3,84050f0 <___vfprintf_internal_r+0x1dc>
 8405094:	b821883a 	mov	r16,r23
 8405098:	00000106 	br	84050a0 <___vfprintf_internal_r+0x18c>
 840509c:	10c00326 	beq	r2,r3,84050ac <___vfprintf_internal_r+0x198>
 84050a0:	84000044 	addi	r16,r16,1
 84050a4:	80800007 	ldb	r2,0(r16)
 84050a8:	103ffc1e 	bne	r2,zero,840509c <___vfprintf_internal_r+0x188>
 84050ac:	85e7c83a 	sub	r19,r16,r23
 84050b0:	98000e26 	beq	r19,zero,84050ec <___vfprintf_internal_r+0x1d8>
 84050b4:	dc800e17 	ldw	r18,56(sp)
 84050b8:	dc400d17 	ldw	r17,52(sp)
 84050bc:	008001c4 	movi	r2,7
 84050c0:	94e5883a 	add	r18,r18,r19
 84050c4:	8c400044 	addi	r17,r17,1
 84050c8:	adc00015 	stw	r23,0(r21)
 84050cc:	dc800e15 	stw	r18,56(sp)
 84050d0:	acc00115 	stw	r19,4(r21)
 84050d4:	dc400d15 	stw	r17,52(sp)
 84050d8:	14428b16 	blt	r2,r17,8405b08 <___vfprintf_internal_r+0xbf4>
 84050dc:	ad400204 	addi	r21,r21,8
 84050e0:	d9014b17 	ldw	r4,1324(sp)
 84050e4:	24c9883a 	add	r4,r4,r19
 84050e8:	d9014b15 	stw	r4,1324(sp)
 84050ec:	802f883a 	mov	r23,r16
 84050f0:	b8800007 	ldb	r2,0(r23)
 84050f4:	10013c26 	beq	r2,zero,84055e8 <___vfprintf_internal_r+0x6d4>
 84050f8:	bdc00044 	addi	r23,r23,1
 84050fc:	d8000405 	stb	zero,16(sp)
 8405100:	b8c00007 	ldb	r3,0(r23)
 8405104:	04ffffc4 	movi	r19,-1
 8405108:	d8014c15 	stw	zero,1328(sp)
 840510c:	d8014a15 	stw	zero,1320(sp)
 8405110:	d8c14d15 	stw	r3,1332(sp)
 8405114:	bdc00044 	addi	r23,r23,1
 8405118:	d9414d17 	ldw	r5,1332(sp)
 840511c:	00801604 	movi	r2,88
 8405120:	28fff804 	addi	r3,r5,-32
 8405124:	10c06036 	bltu	r2,r3,84052a8 <___vfprintf_internal_r+0x394>
 8405128:	18c5883a 	add	r2,r3,r3
 840512c:	1085883a 	add	r2,r2,r2
 8405130:	00c21034 	movhi	r3,2112
 8405134:	18d45104 	addi	r3,r3,20804
 8405138:	10c5883a 	add	r2,r2,r3
 840513c:	11000017 	ldw	r4,0(r2)
 8405140:	2000683a 	jmp	r4
 8405144:	084060b8 	rdprs	at,at,386
 8405148:	084052a8 	cmpgeui	at,at,330
 840514c:	084052a8 	cmpgeui	at,at,330
 8405150:	084060a4 	muli	at,at,386
 8405154:	084052a8 	cmpgeui	at,at,330
 8405158:	084052a8 	cmpgeui	at,at,330
 840515c:	084052a8 	cmpgeui	at,at,330
 8405160:	084052a8 	cmpgeui	at,at,330
 8405164:	084052a8 	cmpgeui	at,at,330
 8405168:	084052a8 	cmpgeui	at,at,330
 840516c:	08405e84 	addi	at,at,378
 8405170:	08406094 	ori	at,at,386
 8405174:	084052a8 	cmpgeui	at,at,330
 8405178:	08405e9c 	xori	at,at,378
 840517c:	08406130 	cmpltui	at,at,388
 8405180:	084052a8 	cmpgeui	at,at,330
 8405184:	0840611c 	xori	at,at,388
 8405188:	084060e4 	muli	at,at,387
 840518c:	084060e4 	muli	at,at,387
 8405190:	084060e4 	muli	at,at,387
 8405194:	084060e4 	muli	at,at,387
 8405198:	084060e4 	muli	at,at,387
 840519c:	084060e4 	muli	at,at,387
 84051a0:	084060e4 	muli	at,at,387
 84051a4:	084060e4 	muli	at,at,387
 84051a8:	084060e4 	muli	at,at,387
 84051ac:	084052a8 	cmpgeui	at,at,330
 84051b0:	084052a8 	cmpgeui	at,at,330
 84051b4:	084052a8 	cmpgeui	at,at,330
 84051b8:	084052a8 	cmpgeui	at,at,330
 84051bc:	084052a8 	cmpgeui	at,at,330
 84051c0:	084052a8 	cmpgeui	at,at,330
 84051c4:	084052a8 	cmpgeui	at,at,330
 84051c8:	084052a8 	cmpgeui	at,at,330
 84051cc:	084052a8 	cmpgeui	at,at,330
 84051d0:	084052a8 	cmpgeui	at,at,330
 84051d4:	08405900 	call	840590 <__alt_mem_onchip_memory2_3+0x839590>
 84051d8:	08405f6c 	andhi	at,at,381
 84051dc:	084052a8 	cmpgeui	at,at,330
 84051e0:	08405f6c 	andhi	at,at,381
 84051e4:	084052a8 	cmpgeui	at,at,330
 84051e8:	084052a8 	cmpgeui	at,at,330
 84051ec:	084052a8 	cmpgeui	at,at,330
 84051f0:	084052a8 	cmpgeui	at,at,330
 84051f4:	084060d0 	cmplti	at,at,387
 84051f8:	084052a8 	cmpgeui	at,at,330
 84051fc:	084052a8 	cmpgeui	at,at,330
 8405200:	084059b4 	orhi	at,at,358
 8405204:	084052a8 	cmpgeui	at,at,330
 8405208:	084052a8 	cmpgeui	at,at,330
 840520c:	084052a8 	cmpgeui	at,at,330
 8405210:	084052a8 	cmpgeui	at,at,330
 8405214:	084052a8 	cmpgeui	at,at,330
 8405218:	08405a00 	call	8405a0 <__alt_mem_onchip_memory2_3+0x8395a0>
 840521c:	084052a8 	cmpgeui	at,at,330
 8405220:	084052a8 	cmpgeui	at,at,330
 8405224:	08406020 	cmpeqi	at,at,384
 8405228:	084052a8 	cmpgeui	at,at,330
 840522c:	084052a8 	cmpgeui	at,at,330
 8405230:	084052a8 	cmpgeui	at,at,330
 8405234:	084052a8 	cmpgeui	at,at,330
 8405238:	084052a8 	cmpgeui	at,at,330
 840523c:	084052a8 	cmpgeui	at,at,330
 8405240:	084052a8 	cmpgeui	at,at,330
 8405244:	084052a8 	cmpgeui	at,at,330
 8405248:	084052a8 	cmpgeui	at,at,330
 840524c:	084052a8 	cmpgeui	at,at,330
 8405250:	08405ff4 	orhi	at,at,383
 8405254:	0840590c 	andi	at,at,356
 8405258:	08405f6c 	andhi	at,at,381
 840525c:	08405f6c 	andhi	at,at,381
 8405260:	08405f6c 	andhi	at,at,381
 8405264:	08405f58 	cmpnei	at,at,381
 8405268:	0840590c 	andi	at,at,356
 840526c:	084052a8 	cmpgeui	at,at,330
 8405270:	084052a8 	cmpgeui	at,at,330
 8405274:	08405ee0 	cmpeqi	at,at,379
 8405278:	084052a8 	cmpgeui	at,at,330
 840527c:	08405eb0 	cmpltui	at,at,378
 8405280:	084059c0 	call	84059c <__alt_mem_onchip_memory2_3+0x83959c>
 8405284:	08405f10 	cmplti	at,at,380
 8405288:	08405efc 	xorhi	at,at,379
 840528c:	084052a8 	cmpgeui	at,at,330
 8405290:	0840618c 	andi	at,at,390
 8405294:	084052a8 	cmpgeui	at,at,330
 8405298:	08405a0c 	andi	at,at,360
 840529c:	084052a8 	cmpgeui	at,at,330
 84052a0:	084052a8 	cmpgeui	at,at,330
 84052a4:	08406084 	addi	at,at,386
 84052a8:	d9014d17 	ldw	r4,1332(sp)
 84052ac:	2000ce26 	beq	r4,zero,84055e8 <___vfprintf_internal_r+0x6d4>
 84052b0:	01400044 	movi	r5,1
 84052b4:	d9800f04 	addi	r6,sp,60
 84052b8:	d9c14015 	stw	r7,1280(sp)
 84052bc:	d9414515 	stw	r5,1300(sp)
 84052c0:	d9814115 	stw	r6,1284(sp)
 84052c4:	280f883a 	mov	r7,r5
 84052c8:	d9000f05 	stb	r4,60(sp)
 84052cc:	d8000405 	stb	zero,16(sp)
 84052d0:	d8014615 	stw	zero,1304(sp)
 84052d4:	d8c14c17 	ldw	r3,1328(sp)
 84052d8:	1880008c 	andi	r2,r3,2
 84052dc:	1005003a 	cmpeq	r2,r2,zero
 84052e0:	d8815015 	stw	r2,1344(sp)
 84052e4:	1000031e 	bne	r2,zero,84052f4 <___vfprintf_internal_r+0x3e0>
 84052e8:	d9014517 	ldw	r4,1300(sp)
 84052ec:	21000084 	addi	r4,r4,2
 84052f0:	d9014515 	stw	r4,1300(sp)
 84052f4:	d9414c17 	ldw	r5,1328(sp)
 84052f8:	2940210c 	andi	r5,r5,132
 84052fc:	d9414e15 	stw	r5,1336(sp)
 8405300:	28002d1e 	bne	r5,zero,84053b8 <___vfprintf_internal_r+0x4a4>
 8405304:	d9814a17 	ldw	r6,1320(sp)
 8405308:	d8814517 	ldw	r2,1300(sp)
 840530c:	30a1c83a 	sub	r16,r6,r2
 8405310:	0400290e 	bge	zero,r16,84053b8 <___vfprintf_internal_r+0x4a4>
 8405314:	00800404 	movi	r2,16
 8405318:	1404580e 	bge	r2,r16,840647c <___vfprintf_internal_r+0x1568>
 840531c:	dc800e17 	ldw	r18,56(sp)
 8405320:	dc400d17 	ldw	r17,52(sp)
 8405324:	1027883a 	mov	r19,r2
 8405328:	07021074 	movhi	fp,2113
 840532c:	e706bf84 	addi	fp,fp,6910
 8405330:	050001c4 	movi	r20,7
 8405334:	00000306 	br	8405344 <___vfprintf_internal_r+0x430>
 8405338:	843ffc04 	addi	r16,r16,-16
 840533c:	ad400204 	addi	r21,r21,8
 8405340:	9c00130e 	bge	r19,r16,8405390 <___vfprintf_internal_r+0x47c>
 8405344:	94800404 	addi	r18,r18,16
 8405348:	8c400044 	addi	r17,r17,1
 840534c:	af000015 	stw	fp,0(r21)
 8405350:	acc00115 	stw	r19,4(r21)
 8405354:	dc800e15 	stw	r18,56(sp)
 8405358:	dc400d15 	stw	r17,52(sp)
 840535c:	a47ff60e 	bge	r20,r17,8405338 <___vfprintf_internal_r+0x424>
 8405360:	d9014f17 	ldw	r4,1340(sp)
 8405364:	b00b883a 	mov	r5,r22
 8405368:	d9800c04 	addi	r6,sp,48
 840536c:	d9c15115 	stw	r7,1348(sp)
 8405370:	8404ebc0 	call	8404ebc <__sprint_r>
 8405374:	d9c15117 	ldw	r7,1348(sp)
 8405378:	10009e1e 	bne	r2,zero,84055f4 <___vfprintf_internal_r+0x6e0>
 840537c:	843ffc04 	addi	r16,r16,-16
 8405380:	dc800e17 	ldw	r18,56(sp)
 8405384:	dc400d17 	ldw	r17,52(sp)
 8405388:	dd401904 	addi	r21,sp,100
 840538c:	9c3fed16 	blt	r19,r16,8405344 <___vfprintf_internal_r+0x430>
 8405390:	9425883a 	add	r18,r18,r16
 8405394:	8c400044 	addi	r17,r17,1
 8405398:	008001c4 	movi	r2,7
 840539c:	af000015 	stw	fp,0(r21)
 84053a0:	ac000115 	stw	r16,4(r21)
 84053a4:	dc800e15 	stw	r18,56(sp)
 84053a8:	dc400d15 	stw	r17,52(sp)
 84053ac:	1441f516 	blt	r2,r17,8405b84 <___vfprintf_internal_r+0xc70>
 84053b0:	ad400204 	addi	r21,r21,8
 84053b4:	00000206 	br	84053c0 <___vfprintf_internal_r+0x4ac>
 84053b8:	dc800e17 	ldw	r18,56(sp)
 84053bc:	dc400d17 	ldw	r17,52(sp)
 84053c0:	d8800407 	ldb	r2,16(sp)
 84053c4:	10000b26 	beq	r2,zero,84053f4 <___vfprintf_internal_r+0x4e0>
 84053c8:	00800044 	movi	r2,1
 84053cc:	94800044 	addi	r18,r18,1
 84053d0:	8c400044 	addi	r17,r17,1
 84053d4:	a8800115 	stw	r2,4(r21)
 84053d8:	d8c00404 	addi	r3,sp,16
 84053dc:	008001c4 	movi	r2,7
 84053e0:	a8c00015 	stw	r3,0(r21)
 84053e4:	dc800e15 	stw	r18,56(sp)
 84053e8:	dc400d15 	stw	r17,52(sp)
 84053ec:	1441da16 	blt	r2,r17,8405b58 <___vfprintf_internal_r+0xc44>
 84053f0:	ad400204 	addi	r21,r21,8
 84053f4:	d9015017 	ldw	r4,1344(sp)
 84053f8:	20000b1e 	bne	r4,zero,8405428 <___vfprintf_internal_r+0x514>
 84053fc:	d8800444 	addi	r2,sp,17
 8405400:	94800084 	addi	r18,r18,2
 8405404:	8c400044 	addi	r17,r17,1
 8405408:	a8800015 	stw	r2,0(r21)
 840540c:	00c00084 	movi	r3,2
 8405410:	008001c4 	movi	r2,7
 8405414:	a8c00115 	stw	r3,4(r21)
 8405418:	dc800e15 	stw	r18,56(sp)
 840541c:	dc400d15 	stw	r17,52(sp)
 8405420:	1441c216 	blt	r2,r17,8405b2c <___vfprintf_internal_r+0xc18>
 8405424:	ad400204 	addi	r21,r21,8
 8405428:	d9414e17 	ldw	r5,1336(sp)
 840542c:	00802004 	movi	r2,128
 8405430:	2880b126 	beq	r5,r2,84056f8 <___vfprintf_internal_r+0x7e4>
 8405434:	d8c14617 	ldw	r3,1304(sp)
 8405438:	19e1c83a 	sub	r16,r3,r7
 840543c:	0400260e 	bge	zero,r16,84054d8 <___vfprintf_internal_r+0x5c4>
 8405440:	00800404 	movi	r2,16
 8405444:	1403c90e 	bge	r2,r16,840636c <___vfprintf_internal_r+0x1458>
 8405448:	1027883a 	mov	r19,r2
 840544c:	07021074 	movhi	fp,2113
 8405450:	e706bb84 	addi	fp,fp,6894
 8405454:	050001c4 	movi	r20,7
 8405458:	00000306 	br	8405468 <___vfprintf_internal_r+0x554>
 840545c:	843ffc04 	addi	r16,r16,-16
 8405460:	ad400204 	addi	r21,r21,8
 8405464:	9c00130e 	bge	r19,r16,84054b4 <___vfprintf_internal_r+0x5a0>
 8405468:	94800404 	addi	r18,r18,16
 840546c:	8c400044 	addi	r17,r17,1
 8405470:	af000015 	stw	fp,0(r21)
 8405474:	acc00115 	stw	r19,4(r21)
 8405478:	dc800e15 	stw	r18,56(sp)
 840547c:	dc400d15 	stw	r17,52(sp)
 8405480:	a47ff60e 	bge	r20,r17,840545c <___vfprintf_internal_r+0x548>
 8405484:	d9014f17 	ldw	r4,1340(sp)
 8405488:	b00b883a 	mov	r5,r22
 840548c:	d9800c04 	addi	r6,sp,48
 8405490:	d9c15115 	stw	r7,1348(sp)
 8405494:	8404ebc0 	call	8404ebc <__sprint_r>
 8405498:	d9c15117 	ldw	r7,1348(sp)
 840549c:	1000551e 	bne	r2,zero,84055f4 <___vfprintf_internal_r+0x6e0>
 84054a0:	843ffc04 	addi	r16,r16,-16
 84054a4:	dc800e17 	ldw	r18,56(sp)
 84054a8:	dc400d17 	ldw	r17,52(sp)
 84054ac:	dd401904 	addi	r21,sp,100
 84054b0:	9c3fed16 	blt	r19,r16,8405468 <___vfprintf_internal_r+0x554>
 84054b4:	9425883a 	add	r18,r18,r16
 84054b8:	8c400044 	addi	r17,r17,1
 84054bc:	008001c4 	movi	r2,7
 84054c0:	af000015 	stw	fp,0(r21)
 84054c4:	ac000115 	stw	r16,4(r21)
 84054c8:	dc800e15 	stw	r18,56(sp)
 84054cc:	dc400d15 	stw	r17,52(sp)
 84054d0:	14418216 	blt	r2,r17,8405adc <___vfprintf_internal_r+0xbc8>
 84054d4:	ad400204 	addi	r21,r21,8
 84054d8:	d9014c17 	ldw	r4,1328(sp)
 84054dc:	2080400c 	andi	r2,r4,256
 84054e0:	10004a1e 	bne	r2,zero,840560c <___vfprintf_internal_r+0x6f8>
 84054e4:	d9414117 	ldw	r5,1284(sp)
 84054e8:	91e5883a 	add	r18,r18,r7
 84054ec:	8c400044 	addi	r17,r17,1
 84054f0:	008001c4 	movi	r2,7
 84054f4:	a9400015 	stw	r5,0(r21)
 84054f8:	a9c00115 	stw	r7,4(r21)
 84054fc:	dc800e15 	stw	r18,56(sp)
 8405500:	dc400d15 	stw	r17,52(sp)
 8405504:	14416716 	blt	r2,r17,8405aa4 <___vfprintf_internal_r+0xb90>
 8405508:	a8c00204 	addi	r3,r21,8
 840550c:	d9814c17 	ldw	r6,1328(sp)
 8405510:	3080010c 	andi	r2,r6,4
 8405514:	10002826 	beq	r2,zero,84055b8 <___vfprintf_internal_r+0x6a4>
 8405518:	d8814a17 	ldw	r2,1320(sp)
 840551c:	d9014517 	ldw	r4,1300(sp)
 8405520:	1121c83a 	sub	r16,r2,r4
 8405524:	0400240e 	bge	zero,r16,84055b8 <___vfprintf_internal_r+0x6a4>
 8405528:	00800404 	movi	r2,16
 840552c:	14044f0e 	bge	r2,r16,840666c <___vfprintf_internal_r+0x1758>
 8405530:	dc400d17 	ldw	r17,52(sp)
 8405534:	1027883a 	mov	r19,r2
 8405538:	07021074 	movhi	fp,2113
 840553c:	e706bf84 	addi	fp,fp,6910
 8405540:	050001c4 	movi	r20,7
 8405544:	00000306 	br	8405554 <___vfprintf_internal_r+0x640>
 8405548:	843ffc04 	addi	r16,r16,-16
 840554c:	18c00204 	addi	r3,r3,8
 8405550:	9c00110e 	bge	r19,r16,8405598 <___vfprintf_internal_r+0x684>
 8405554:	94800404 	addi	r18,r18,16
 8405558:	8c400044 	addi	r17,r17,1
 840555c:	1f000015 	stw	fp,0(r3)
 8405560:	1cc00115 	stw	r19,4(r3)
 8405564:	dc800e15 	stw	r18,56(sp)
 8405568:	dc400d15 	stw	r17,52(sp)
 840556c:	a47ff60e 	bge	r20,r17,8405548 <___vfprintf_internal_r+0x634>
 8405570:	d9014f17 	ldw	r4,1340(sp)
 8405574:	b00b883a 	mov	r5,r22
 8405578:	d9800c04 	addi	r6,sp,48
 840557c:	8404ebc0 	call	8404ebc <__sprint_r>
 8405580:	10001c1e 	bne	r2,zero,84055f4 <___vfprintf_internal_r+0x6e0>
 8405584:	843ffc04 	addi	r16,r16,-16
 8405588:	dc800e17 	ldw	r18,56(sp)
 840558c:	dc400d17 	ldw	r17,52(sp)
 8405590:	d8c01904 	addi	r3,sp,100
 8405594:	9c3fef16 	blt	r19,r16,8405554 <___vfprintf_internal_r+0x640>
 8405598:	9425883a 	add	r18,r18,r16
 840559c:	8c400044 	addi	r17,r17,1
 84055a0:	008001c4 	movi	r2,7
 84055a4:	1f000015 	stw	fp,0(r3)
 84055a8:	1c000115 	stw	r16,4(r3)
 84055ac:	dc800e15 	stw	r18,56(sp)
 84055b0:	dc400d15 	stw	r17,52(sp)
 84055b4:	1440cb16 	blt	r2,r17,84058e4 <___vfprintf_internal_r+0x9d0>
 84055b8:	d8814a17 	ldw	r2,1320(sp)
 84055bc:	d9414517 	ldw	r5,1300(sp)
 84055c0:	1140010e 	bge	r2,r5,84055c8 <___vfprintf_internal_r+0x6b4>
 84055c4:	2805883a 	mov	r2,r5
 84055c8:	d9814b17 	ldw	r6,1324(sp)
 84055cc:	308d883a 	add	r6,r6,r2
 84055d0:	d9814b15 	stw	r6,1324(sp)
 84055d4:	90013b1e 	bne	r18,zero,8405ac4 <___vfprintf_internal_r+0xbb0>
 84055d8:	d9c14017 	ldw	r7,1280(sp)
 84055dc:	dd401904 	addi	r21,sp,100
 84055e0:	d8000d15 	stw	zero,52(sp)
 84055e4:	003ea706 	br	8405084 <___vfprintf_internal_r+0x170>
 84055e8:	d8800e17 	ldw	r2,56(sp)
 84055ec:	10053f1e 	bne	r2,zero,8406aec <___vfprintf_internal_r+0x1bd8>
 84055f0:	d8000d15 	stw	zero,52(sp)
 84055f4:	b080030b 	ldhu	r2,12(r22)
 84055f8:	1080100c 	andi	r2,r2,64
 84055fc:	103e8726 	beq	r2,zero,840501c <___vfprintf_internal_r+0x108>
 8405600:	00bfffc4 	movi	r2,-1
 8405604:	d8814b15 	stw	r2,1324(sp)
 8405608:	003e8406 	br	840501c <___vfprintf_internal_r+0x108>
 840560c:	d9814d17 	ldw	r6,1332(sp)
 8405610:	00801944 	movi	r2,101
 8405614:	11806e16 	blt	r2,r6,84057d0 <___vfprintf_internal_r+0x8bc>
 8405618:	d9414717 	ldw	r5,1308(sp)
 840561c:	00c00044 	movi	r3,1
 8405620:	1943430e 	bge	r3,r5,8406330 <___vfprintf_internal_r+0x141c>
 8405624:	d8814117 	ldw	r2,1284(sp)
 8405628:	94800044 	addi	r18,r18,1
 840562c:	8c400044 	addi	r17,r17,1
 8405630:	a8800015 	stw	r2,0(r21)
 8405634:	008001c4 	movi	r2,7
 8405638:	a8c00115 	stw	r3,4(r21)
 840563c:	dc800e15 	stw	r18,56(sp)
 8405640:	dc400d15 	stw	r17,52(sp)
 8405644:	1441ca16 	blt	r2,r17,8405d70 <___vfprintf_internal_r+0xe5c>
 8405648:	a8c00204 	addi	r3,r21,8
 840564c:	d9014917 	ldw	r4,1316(sp)
 8405650:	00800044 	movi	r2,1
 8405654:	94800044 	addi	r18,r18,1
 8405658:	8c400044 	addi	r17,r17,1
 840565c:	18800115 	stw	r2,4(r3)
 8405660:	008001c4 	movi	r2,7
 8405664:	19000015 	stw	r4,0(r3)
 8405668:	dc800e15 	stw	r18,56(sp)
 840566c:	dc400d15 	stw	r17,52(sp)
 8405670:	1441b616 	blt	r2,r17,8405d4c <___vfprintf_internal_r+0xe38>
 8405674:	1cc00204 	addi	r19,r3,8
 8405678:	d9014217 	ldw	r4,1288(sp)
 840567c:	d9414317 	ldw	r5,1292(sp)
 8405680:	000d883a 	mov	r6,zero
 8405684:	000f883a 	mov	r7,zero
 8405688:	8403ed40 	call	8403ed4 <__nedf2>
 840568c:	10017426 	beq	r2,zero,8405c60 <___vfprintf_internal_r+0xd4c>
 8405690:	d9414717 	ldw	r5,1308(sp)
 8405694:	d9814117 	ldw	r6,1284(sp)
 8405698:	8c400044 	addi	r17,r17,1
 840569c:	2c85883a 	add	r2,r5,r18
 84056a0:	14bfffc4 	addi	r18,r2,-1
 84056a4:	28bfffc4 	addi	r2,r5,-1
 84056a8:	30c00044 	addi	r3,r6,1
 84056ac:	98800115 	stw	r2,4(r19)
 84056b0:	008001c4 	movi	r2,7
 84056b4:	98c00015 	stw	r3,0(r19)
 84056b8:	dc800e15 	stw	r18,56(sp)
 84056bc:	dc400d15 	stw	r17,52(sp)
 84056c0:	14418e16 	blt	r2,r17,8405cfc <___vfprintf_internal_r+0xde8>
 84056c4:	9cc00204 	addi	r19,r19,8
 84056c8:	d9414817 	ldw	r5,1312(sp)
 84056cc:	d8800804 	addi	r2,sp,32
 84056d0:	8c400044 	addi	r17,r17,1
 84056d4:	9165883a 	add	r18,r18,r5
 84056d8:	98800015 	stw	r2,0(r19)
 84056dc:	008001c4 	movi	r2,7
 84056e0:	99400115 	stw	r5,4(r19)
 84056e4:	dc800e15 	stw	r18,56(sp)
 84056e8:	dc400d15 	stw	r17,52(sp)
 84056ec:	1440ed16 	blt	r2,r17,8405aa4 <___vfprintf_internal_r+0xb90>
 84056f0:	98c00204 	addi	r3,r19,8
 84056f4:	003f8506 	br	840550c <___vfprintf_internal_r+0x5f8>
 84056f8:	d9814a17 	ldw	r6,1320(sp)
 84056fc:	d8814517 	ldw	r2,1300(sp)
 8405700:	30a1c83a 	sub	r16,r6,r2
 8405704:	043f4b0e 	bge	zero,r16,8405434 <___vfprintf_internal_r+0x520>
 8405708:	00800404 	movi	r2,16
 840570c:	1404340e 	bge	r2,r16,84067e0 <___vfprintf_internal_r+0x18cc>
 8405710:	1027883a 	mov	r19,r2
 8405714:	07021074 	movhi	fp,2113
 8405718:	e706bb84 	addi	fp,fp,6894
 840571c:	050001c4 	movi	r20,7
 8405720:	00000306 	br	8405730 <___vfprintf_internal_r+0x81c>
 8405724:	843ffc04 	addi	r16,r16,-16
 8405728:	ad400204 	addi	r21,r21,8
 840572c:	9c00130e 	bge	r19,r16,840577c <___vfprintf_internal_r+0x868>
 8405730:	94800404 	addi	r18,r18,16
 8405734:	8c400044 	addi	r17,r17,1
 8405738:	af000015 	stw	fp,0(r21)
 840573c:	acc00115 	stw	r19,4(r21)
 8405740:	dc800e15 	stw	r18,56(sp)
 8405744:	dc400d15 	stw	r17,52(sp)
 8405748:	a47ff60e 	bge	r20,r17,8405724 <___vfprintf_internal_r+0x810>
 840574c:	d9014f17 	ldw	r4,1340(sp)
 8405750:	b00b883a 	mov	r5,r22
 8405754:	d9800c04 	addi	r6,sp,48
 8405758:	d9c15115 	stw	r7,1348(sp)
 840575c:	8404ebc0 	call	8404ebc <__sprint_r>
 8405760:	d9c15117 	ldw	r7,1348(sp)
 8405764:	103fa31e 	bne	r2,zero,84055f4 <___vfprintf_internal_r+0x6e0>
 8405768:	843ffc04 	addi	r16,r16,-16
 840576c:	dc800e17 	ldw	r18,56(sp)
 8405770:	dc400d17 	ldw	r17,52(sp)
 8405774:	dd401904 	addi	r21,sp,100
 8405778:	9c3fed16 	blt	r19,r16,8405730 <___vfprintf_internal_r+0x81c>
 840577c:	9425883a 	add	r18,r18,r16
 8405780:	8c400044 	addi	r17,r17,1
 8405784:	008001c4 	movi	r2,7
 8405788:	af000015 	stw	fp,0(r21)
 840578c:	ac000115 	stw	r16,4(r21)
 8405790:	dc800e15 	stw	r18,56(sp)
 8405794:	dc400d15 	stw	r17,52(sp)
 8405798:	14416116 	blt	r2,r17,8405d20 <___vfprintf_internal_r+0xe0c>
 840579c:	ad400204 	addi	r21,r21,8
 84057a0:	003f2406 	br	8405434 <___vfprintf_internal_r+0x520>
 84057a4:	d9014f17 	ldw	r4,1340(sp)
 84057a8:	84089840 	call	8408984 <__sinit>
 84057ac:	d9c15117 	ldw	r7,1348(sp)
 84057b0:	003def06 	br	8404f70 <___vfprintf_internal_r+0x5c>
 84057b4:	d9014f17 	ldw	r4,1340(sp)
 84057b8:	b00b883a 	mov	r5,r22
 84057bc:	d9c15115 	stw	r7,1348(sp)
 84057c0:	8406de40 	call	8406de4 <__swsetup_r>
 84057c4:	d9c15117 	ldw	r7,1348(sp)
 84057c8:	103dee26 	beq	r2,zero,8404f84 <___vfprintf_internal_r+0x70>
 84057cc:	003f8c06 	br	8405600 <___vfprintf_internal_r+0x6ec>
 84057d0:	d9014217 	ldw	r4,1288(sp)
 84057d4:	d9414317 	ldw	r5,1292(sp)
 84057d8:	000d883a 	mov	r6,zero
 84057dc:	000f883a 	mov	r7,zero
 84057e0:	8403e4c0 	call	8403e4c <__eqdf2>
 84057e4:	1000f21e 	bne	r2,zero,8405bb0 <___vfprintf_internal_r+0xc9c>
 84057e8:	00821074 	movhi	r2,2113
 84057ec:	1086bb04 	addi	r2,r2,6892
 84057f0:	94800044 	addi	r18,r18,1
 84057f4:	8c400044 	addi	r17,r17,1
 84057f8:	a8800015 	stw	r2,0(r21)
 84057fc:	00c00044 	movi	r3,1
 8405800:	008001c4 	movi	r2,7
 8405804:	a8c00115 	stw	r3,4(r21)
 8405808:	dc800e15 	stw	r18,56(sp)
 840580c:	dc400d15 	stw	r17,52(sp)
 8405810:	1442fa16 	blt	r2,r17,84063fc <___vfprintf_internal_r+0x14e8>
 8405814:	a8c00204 	addi	r3,r21,8
 8405818:	d8800517 	ldw	r2,20(sp)
 840581c:	d9014717 	ldw	r4,1308(sp)
 8405820:	11015c0e 	bge	r2,r4,8405d94 <___vfprintf_internal_r+0xe80>
 8405824:	dc400d17 	ldw	r17,52(sp)
 8405828:	d9814917 	ldw	r6,1316(sp)
 840582c:	00800044 	movi	r2,1
 8405830:	94800044 	addi	r18,r18,1
 8405834:	8c400044 	addi	r17,r17,1
 8405838:	18800115 	stw	r2,4(r3)
 840583c:	008001c4 	movi	r2,7
 8405840:	19800015 	stw	r6,0(r3)
 8405844:	dc800e15 	stw	r18,56(sp)
 8405848:	dc400d15 	stw	r17,52(sp)
 840584c:	14431016 	blt	r2,r17,8406490 <___vfprintf_internal_r+0x157c>
 8405850:	18c00204 	addi	r3,r3,8
 8405854:	d8814717 	ldw	r2,1308(sp)
 8405858:	143fffc4 	addi	r16,r2,-1
 840585c:	043f2b0e 	bge	zero,r16,840550c <___vfprintf_internal_r+0x5f8>
 8405860:	00800404 	movi	r2,16
 8405864:	1402a20e 	bge	r2,r16,84062f0 <___vfprintf_internal_r+0x13dc>
 8405868:	dc400d17 	ldw	r17,52(sp)
 840586c:	1027883a 	mov	r19,r2
 8405870:	07021074 	movhi	fp,2113
 8405874:	e706bb84 	addi	fp,fp,6894
 8405878:	050001c4 	movi	r20,7
 840587c:	00000306 	br	840588c <___vfprintf_internal_r+0x978>
 8405880:	18c00204 	addi	r3,r3,8
 8405884:	843ffc04 	addi	r16,r16,-16
 8405888:	9c029c0e 	bge	r19,r16,84062fc <___vfprintf_internal_r+0x13e8>
 840588c:	94800404 	addi	r18,r18,16
 8405890:	8c400044 	addi	r17,r17,1
 8405894:	1f000015 	stw	fp,0(r3)
 8405898:	1cc00115 	stw	r19,4(r3)
 840589c:	dc800e15 	stw	r18,56(sp)
 84058a0:	dc400d15 	stw	r17,52(sp)
 84058a4:	a47ff60e 	bge	r20,r17,8405880 <___vfprintf_internal_r+0x96c>
 84058a8:	d9014f17 	ldw	r4,1340(sp)
 84058ac:	b00b883a 	mov	r5,r22
 84058b0:	d9800c04 	addi	r6,sp,48
 84058b4:	8404ebc0 	call	8404ebc <__sprint_r>
 84058b8:	103f4e1e 	bne	r2,zero,84055f4 <___vfprintf_internal_r+0x6e0>
 84058bc:	dc800e17 	ldw	r18,56(sp)
 84058c0:	dc400d17 	ldw	r17,52(sp)
 84058c4:	d8c01904 	addi	r3,sp,100
 84058c8:	003fee06 	br	8405884 <___vfprintf_internal_r+0x970>
 84058cc:	d8802c0b 	ldhu	r2,176(sp)
 84058d0:	00ffffc4 	movi	r3,-1
 84058d4:	d8c14b15 	stw	r3,1324(sp)
 84058d8:	1080100c 	andi	r2,r2,64
 84058dc:	103dcc1e 	bne	r2,zero,8405010 <___vfprintf_internal_r+0xfc>
 84058e0:	003dce06 	br	840501c <___vfprintf_internal_r+0x108>
 84058e4:	d9014f17 	ldw	r4,1340(sp)
 84058e8:	b00b883a 	mov	r5,r22
 84058ec:	d9800c04 	addi	r6,sp,48
 84058f0:	8404ebc0 	call	8404ebc <__sprint_r>
 84058f4:	103f3f1e 	bne	r2,zero,84055f4 <___vfprintf_internal_r+0x6e0>
 84058f8:	dc800e17 	ldw	r18,56(sp)
 84058fc:	003f2e06 	br	84055b8 <___vfprintf_internal_r+0x6a4>
 8405900:	d9414c17 	ldw	r5,1328(sp)
 8405904:	29400414 	ori	r5,r5,16
 8405908:	d9414c15 	stw	r5,1328(sp)
 840590c:	d9814c17 	ldw	r6,1328(sp)
 8405910:	3080080c 	andi	r2,r6,32
 8405914:	10014f1e 	bne	r2,zero,8405e54 <___vfprintf_internal_r+0xf40>
 8405918:	d8c14c17 	ldw	r3,1328(sp)
 840591c:	1880040c 	andi	r2,r3,16
 8405920:	1002ea1e 	bne	r2,zero,84064cc <___vfprintf_internal_r+0x15b8>
 8405924:	d9014c17 	ldw	r4,1328(sp)
 8405928:	2080100c 	andi	r2,r4,64
 840592c:	1002e726 	beq	r2,zero,84064cc <___vfprintf_internal_r+0x15b8>
 8405930:	3880000f 	ldh	r2,0(r7)
 8405934:	39c00104 	addi	r7,r7,4
 8405938:	d9c14015 	stw	r7,1280(sp)
 840593c:	1023d7fa 	srai	r17,r2,31
 8405940:	1021883a 	mov	r16,r2
 8405944:	88037216 	blt	r17,zero,8406710 <___vfprintf_internal_r+0x17fc>
 8405948:	01000044 	movi	r4,1
 840594c:	98000416 	blt	r19,zero,8405960 <___vfprintf_internal_r+0xa4c>
 8405950:	d8c14c17 	ldw	r3,1328(sp)
 8405954:	00bfdfc4 	movi	r2,-129
 8405958:	1886703a 	and	r3,r3,r2
 840595c:	d8c14c15 	stw	r3,1328(sp)
 8405960:	8444b03a 	or	r2,r16,r17
 8405964:	1002261e 	bne	r2,zero,8406200 <___vfprintf_internal_r+0x12ec>
 8405968:	9802251e 	bne	r19,zero,8406200 <___vfprintf_internal_r+0x12ec>
 840596c:	20803fcc 	andi	r2,r4,255
 8405970:	10029b26 	beq	r2,zero,84063e0 <___vfprintf_internal_r+0x14cc>
 8405974:	d8c01904 	addi	r3,sp,100
 8405978:	dd000f04 	addi	r20,sp,60
 840597c:	d8c14115 	stw	r3,1284(sp)
 8405980:	d8c14117 	ldw	r3,1284(sp)
 8405984:	dcc14515 	stw	r19,1300(sp)
 8405988:	a0c5c83a 	sub	r2,r20,r3
 840598c:	11c00a04 	addi	r7,r2,40
 8405990:	99c0010e 	bge	r19,r7,8405998 <___vfprintf_internal_r+0xa84>
 8405994:	d9c14515 	stw	r7,1300(sp)
 8405998:	dcc14615 	stw	r19,1304(sp)
 840599c:	d8800407 	ldb	r2,16(sp)
 84059a0:	103e4c26 	beq	r2,zero,84052d4 <___vfprintf_internal_r+0x3c0>
 84059a4:	d8814517 	ldw	r2,1300(sp)
 84059a8:	10800044 	addi	r2,r2,1
 84059ac:	d8814515 	stw	r2,1300(sp)
 84059b0:	003e4806 	br	84052d4 <___vfprintf_internal_r+0x3c0>
 84059b4:	d9814c17 	ldw	r6,1328(sp)
 84059b8:	31800414 	ori	r6,r6,16
 84059bc:	d9814c15 	stw	r6,1328(sp)
 84059c0:	d8c14c17 	ldw	r3,1328(sp)
 84059c4:	1880080c 	andi	r2,r3,32
 84059c8:	1001271e 	bne	r2,zero,8405e68 <___vfprintf_internal_r+0xf54>
 84059cc:	d9414c17 	ldw	r5,1328(sp)
 84059d0:	2880040c 	andi	r2,r5,16
 84059d4:	1002b61e 	bne	r2,zero,84064b0 <___vfprintf_internal_r+0x159c>
 84059d8:	d9814c17 	ldw	r6,1328(sp)
 84059dc:	3080100c 	andi	r2,r6,64
 84059e0:	1002b326 	beq	r2,zero,84064b0 <___vfprintf_internal_r+0x159c>
 84059e4:	3c00000b 	ldhu	r16,0(r7)
 84059e8:	0009883a 	mov	r4,zero
 84059ec:	39c00104 	addi	r7,r7,4
 84059f0:	0023883a 	mov	r17,zero
 84059f4:	d9c14015 	stw	r7,1280(sp)
 84059f8:	d8000405 	stb	zero,16(sp)
 84059fc:	003fd306 	br	840594c <___vfprintf_internal_r+0xa38>
 8405a00:	d9014c17 	ldw	r4,1328(sp)
 8405a04:	21000414 	ori	r4,r4,16
 8405a08:	d9014c15 	stw	r4,1328(sp)
 8405a0c:	d9414c17 	ldw	r5,1328(sp)
 8405a10:	2880080c 	andi	r2,r5,32
 8405a14:	1001081e 	bne	r2,zero,8405e38 <___vfprintf_internal_r+0xf24>
 8405a18:	d8c14c17 	ldw	r3,1328(sp)
 8405a1c:	1880040c 	andi	r2,r3,16
 8405a20:	1002b01e 	bne	r2,zero,84064e4 <___vfprintf_internal_r+0x15d0>
 8405a24:	d9014c17 	ldw	r4,1328(sp)
 8405a28:	2080100c 	andi	r2,r4,64
 8405a2c:	1002ad26 	beq	r2,zero,84064e4 <___vfprintf_internal_r+0x15d0>
 8405a30:	3c00000b 	ldhu	r16,0(r7)
 8405a34:	01000044 	movi	r4,1
 8405a38:	39c00104 	addi	r7,r7,4
 8405a3c:	0023883a 	mov	r17,zero
 8405a40:	d9c14015 	stw	r7,1280(sp)
 8405a44:	d8000405 	stb	zero,16(sp)
 8405a48:	003fc006 	br	840594c <___vfprintf_internal_r+0xa38>
 8405a4c:	d9014f17 	ldw	r4,1340(sp)
 8405a50:	b00b883a 	mov	r5,r22
 8405a54:	d9800c04 	addi	r6,sp,48
 8405a58:	8404ebc0 	call	8404ebc <__sprint_r>
 8405a5c:	103ee51e 	bne	r2,zero,84055f4 <___vfprintf_internal_r+0x6e0>
 8405a60:	dc800e17 	ldw	r18,56(sp)
 8405a64:	d8c01904 	addi	r3,sp,100
 8405a68:	d9814c17 	ldw	r6,1328(sp)
 8405a6c:	3080004c 	andi	r2,r6,1
 8405a70:	1005003a 	cmpeq	r2,r2,zero
 8405a74:	103ea51e 	bne	r2,zero,840550c <___vfprintf_internal_r+0x5f8>
 8405a78:	00800044 	movi	r2,1
 8405a7c:	dc400d17 	ldw	r17,52(sp)
 8405a80:	18800115 	stw	r2,4(r3)
 8405a84:	d8814917 	ldw	r2,1316(sp)
 8405a88:	94800044 	addi	r18,r18,1
 8405a8c:	8c400044 	addi	r17,r17,1
 8405a90:	18800015 	stw	r2,0(r3)
 8405a94:	008001c4 	movi	r2,7
 8405a98:	dc800e15 	stw	r18,56(sp)
 8405a9c:	dc400d15 	stw	r17,52(sp)
 8405aa0:	14421e0e 	bge	r2,r17,840631c <___vfprintf_internal_r+0x1408>
 8405aa4:	d9014f17 	ldw	r4,1340(sp)
 8405aa8:	b00b883a 	mov	r5,r22
 8405aac:	d9800c04 	addi	r6,sp,48
 8405ab0:	8404ebc0 	call	8404ebc <__sprint_r>
 8405ab4:	103ecf1e 	bne	r2,zero,84055f4 <___vfprintf_internal_r+0x6e0>
 8405ab8:	dc800e17 	ldw	r18,56(sp)
 8405abc:	d8c01904 	addi	r3,sp,100
 8405ac0:	003e9206 	br	840550c <___vfprintf_internal_r+0x5f8>
 8405ac4:	d9014f17 	ldw	r4,1340(sp)
 8405ac8:	b00b883a 	mov	r5,r22
 8405acc:	d9800c04 	addi	r6,sp,48
 8405ad0:	8404ebc0 	call	8404ebc <__sprint_r>
 8405ad4:	103ec026 	beq	r2,zero,84055d8 <___vfprintf_internal_r+0x6c4>
 8405ad8:	003ec606 	br	84055f4 <___vfprintf_internal_r+0x6e0>
 8405adc:	d9014f17 	ldw	r4,1340(sp)
 8405ae0:	b00b883a 	mov	r5,r22
 8405ae4:	d9800c04 	addi	r6,sp,48
 8405ae8:	d9c15115 	stw	r7,1348(sp)
 8405aec:	8404ebc0 	call	8404ebc <__sprint_r>
 8405af0:	d9c15117 	ldw	r7,1348(sp)
 8405af4:	103ebf1e 	bne	r2,zero,84055f4 <___vfprintf_internal_r+0x6e0>
 8405af8:	dc800e17 	ldw	r18,56(sp)
 8405afc:	dc400d17 	ldw	r17,52(sp)
 8405b00:	dd401904 	addi	r21,sp,100
 8405b04:	003e7406 	br	84054d8 <___vfprintf_internal_r+0x5c4>
 8405b08:	d9014f17 	ldw	r4,1340(sp)
 8405b0c:	b00b883a 	mov	r5,r22
 8405b10:	d9800c04 	addi	r6,sp,48
 8405b14:	d9c15115 	stw	r7,1348(sp)
 8405b18:	8404ebc0 	call	8404ebc <__sprint_r>
 8405b1c:	d9c15117 	ldw	r7,1348(sp)
 8405b20:	103eb41e 	bne	r2,zero,84055f4 <___vfprintf_internal_r+0x6e0>
 8405b24:	dd401904 	addi	r21,sp,100
 8405b28:	003d6d06 	br	84050e0 <___vfprintf_internal_r+0x1cc>
 8405b2c:	d9014f17 	ldw	r4,1340(sp)
 8405b30:	b00b883a 	mov	r5,r22
 8405b34:	d9800c04 	addi	r6,sp,48
 8405b38:	d9c15115 	stw	r7,1348(sp)
 8405b3c:	8404ebc0 	call	8404ebc <__sprint_r>
 8405b40:	d9c15117 	ldw	r7,1348(sp)
 8405b44:	103eab1e 	bne	r2,zero,84055f4 <___vfprintf_internal_r+0x6e0>
 8405b48:	dc800e17 	ldw	r18,56(sp)
 8405b4c:	dc400d17 	ldw	r17,52(sp)
 8405b50:	dd401904 	addi	r21,sp,100
 8405b54:	003e3406 	br	8405428 <___vfprintf_internal_r+0x514>
 8405b58:	d9014f17 	ldw	r4,1340(sp)
 8405b5c:	b00b883a 	mov	r5,r22
 8405b60:	d9800c04 	addi	r6,sp,48
 8405b64:	d9c15115 	stw	r7,1348(sp)
 8405b68:	8404ebc0 	call	8404ebc <__sprint_r>
 8405b6c:	d9c15117 	ldw	r7,1348(sp)
 8405b70:	103ea01e 	bne	r2,zero,84055f4 <___vfprintf_internal_r+0x6e0>
 8405b74:	dc800e17 	ldw	r18,56(sp)
 8405b78:	dc400d17 	ldw	r17,52(sp)
 8405b7c:	dd401904 	addi	r21,sp,100
 8405b80:	003e1c06 	br	84053f4 <___vfprintf_internal_r+0x4e0>
 8405b84:	d9014f17 	ldw	r4,1340(sp)
 8405b88:	b00b883a 	mov	r5,r22
 8405b8c:	d9800c04 	addi	r6,sp,48
 8405b90:	d9c15115 	stw	r7,1348(sp)
 8405b94:	8404ebc0 	call	8404ebc <__sprint_r>
 8405b98:	d9c15117 	ldw	r7,1348(sp)
 8405b9c:	103e951e 	bne	r2,zero,84055f4 <___vfprintf_internal_r+0x6e0>
 8405ba0:	dc800e17 	ldw	r18,56(sp)
 8405ba4:	dc400d17 	ldw	r17,52(sp)
 8405ba8:	dd401904 	addi	r21,sp,100
 8405bac:	003e0406 	br	84053c0 <___vfprintf_internal_r+0x4ac>
 8405bb0:	d9000517 	ldw	r4,20(sp)
 8405bb4:	0102520e 	bge	zero,r4,8406500 <___vfprintf_internal_r+0x15ec>
 8405bb8:	d9814717 	ldw	r6,1308(sp)
 8405bbc:	21807a16 	blt	r4,r6,8405da8 <___vfprintf_internal_r+0xe94>
 8405bc0:	d8814117 	ldw	r2,1284(sp)
 8405bc4:	91a5883a 	add	r18,r18,r6
 8405bc8:	8c400044 	addi	r17,r17,1
 8405bcc:	a8800015 	stw	r2,0(r21)
 8405bd0:	008001c4 	movi	r2,7
 8405bd4:	a9800115 	stw	r6,4(r21)
 8405bd8:	dc800e15 	stw	r18,56(sp)
 8405bdc:	dc400d15 	stw	r17,52(sp)
 8405be0:	1442f616 	blt	r2,r17,84067bc <___vfprintf_internal_r+0x18a8>
 8405be4:	a8c00204 	addi	r3,r21,8
 8405be8:	d9414717 	ldw	r5,1308(sp)
 8405bec:	2161c83a 	sub	r16,r4,r5
 8405bf0:	043f9d0e 	bge	zero,r16,8405a68 <___vfprintf_internal_r+0xb54>
 8405bf4:	00800404 	movi	r2,16
 8405bf8:	1402130e 	bge	r2,r16,8406448 <___vfprintf_internal_r+0x1534>
 8405bfc:	dc400d17 	ldw	r17,52(sp)
 8405c00:	1027883a 	mov	r19,r2
 8405c04:	07021074 	movhi	fp,2113
 8405c08:	e706bb84 	addi	fp,fp,6894
 8405c0c:	050001c4 	movi	r20,7
 8405c10:	00000306 	br	8405c20 <___vfprintf_internal_r+0xd0c>
 8405c14:	18c00204 	addi	r3,r3,8
 8405c18:	843ffc04 	addi	r16,r16,-16
 8405c1c:	9c020d0e 	bge	r19,r16,8406454 <___vfprintf_internal_r+0x1540>
 8405c20:	94800404 	addi	r18,r18,16
 8405c24:	8c400044 	addi	r17,r17,1
 8405c28:	1f000015 	stw	fp,0(r3)
 8405c2c:	1cc00115 	stw	r19,4(r3)
 8405c30:	dc800e15 	stw	r18,56(sp)
 8405c34:	dc400d15 	stw	r17,52(sp)
 8405c38:	a47ff60e 	bge	r20,r17,8405c14 <___vfprintf_internal_r+0xd00>
 8405c3c:	d9014f17 	ldw	r4,1340(sp)
 8405c40:	b00b883a 	mov	r5,r22
 8405c44:	d9800c04 	addi	r6,sp,48
 8405c48:	8404ebc0 	call	8404ebc <__sprint_r>
 8405c4c:	103e691e 	bne	r2,zero,84055f4 <___vfprintf_internal_r+0x6e0>
 8405c50:	dc800e17 	ldw	r18,56(sp)
 8405c54:	dc400d17 	ldw	r17,52(sp)
 8405c58:	d8c01904 	addi	r3,sp,100
 8405c5c:	003fee06 	br	8405c18 <___vfprintf_internal_r+0xd04>
 8405c60:	d8814717 	ldw	r2,1308(sp)
 8405c64:	143fffc4 	addi	r16,r2,-1
 8405c68:	043e970e 	bge	zero,r16,84056c8 <___vfprintf_internal_r+0x7b4>
 8405c6c:	00800404 	movi	r2,16
 8405c70:	1400180e 	bge	r2,r16,8405cd4 <___vfprintf_internal_r+0xdc0>
 8405c74:	1029883a 	mov	r20,r2
 8405c78:	07021074 	movhi	fp,2113
 8405c7c:	e706bb84 	addi	fp,fp,6894
 8405c80:	054001c4 	movi	r21,7
 8405c84:	00000306 	br	8405c94 <___vfprintf_internal_r+0xd80>
 8405c88:	9cc00204 	addi	r19,r19,8
 8405c8c:	843ffc04 	addi	r16,r16,-16
 8405c90:	a400120e 	bge	r20,r16,8405cdc <___vfprintf_internal_r+0xdc8>
 8405c94:	94800404 	addi	r18,r18,16
 8405c98:	8c400044 	addi	r17,r17,1
 8405c9c:	9f000015 	stw	fp,0(r19)
 8405ca0:	9d000115 	stw	r20,4(r19)
 8405ca4:	dc800e15 	stw	r18,56(sp)
 8405ca8:	dc400d15 	stw	r17,52(sp)
 8405cac:	ac7ff60e 	bge	r21,r17,8405c88 <___vfprintf_internal_r+0xd74>
 8405cb0:	d9014f17 	ldw	r4,1340(sp)
 8405cb4:	b00b883a 	mov	r5,r22
 8405cb8:	d9800c04 	addi	r6,sp,48
 8405cbc:	8404ebc0 	call	8404ebc <__sprint_r>
 8405cc0:	103e4c1e 	bne	r2,zero,84055f4 <___vfprintf_internal_r+0x6e0>
 8405cc4:	dc800e17 	ldw	r18,56(sp)
 8405cc8:	dc400d17 	ldw	r17,52(sp)
 8405ccc:	dcc01904 	addi	r19,sp,100
 8405cd0:	003fee06 	br	8405c8c <___vfprintf_internal_r+0xd78>
 8405cd4:	07021074 	movhi	fp,2113
 8405cd8:	e706bb84 	addi	fp,fp,6894
 8405cdc:	9425883a 	add	r18,r18,r16
 8405ce0:	8c400044 	addi	r17,r17,1
 8405ce4:	008001c4 	movi	r2,7
 8405ce8:	9f000015 	stw	fp,0(r19)
 8405cec:	9c000115 	stw	r16,4(r19)
 8405cf0:	dc800e15 	stw	r18,56(sp)
 8405cf4:	dc400d15 	stw	r17,52(sp)
 8405cf8:	147e720e 	bge	r2,r17,84056c4 <___vfprintf_internal_r+0x7b0>
 8405cfc:	d9014f17 	ldw	r4,1340(sp)
 8405d00:	b00b883a 	mov	r5,r22
 8405d04:	d9800c04 	addi	r6,sp,48
 8405d08:	8404ebc0 	call	8404ebc <__sprint_r>
 8405d0c:	103e391e 	bne	r2,zero,84055f4 <___vfprintf_internal_r+0x6e0>
 8405d10:	dc800e17 	ldw	r18,56(sp)
 8405d14:	dc400d17 	ldw	r17,52(sp)
 8405d18:	dcc01904 	addi	r19,sp,100
 8405d1c:	003e6a06 	br	84056c8 <___vfprintf_internal_r+0x7b4>
 8405d20:	d9014f17 	ldw	r4,1340(sp)
 8405d24:	b00b883a 	mov	r5,r22
 8405d28:	d9800c04 	addi	r6,sp,48
 8405d2c:	d9c15115 	stw	r7,1348(sp)
 8405d30:	8404ebc0 	call	8404ebc <__sprint_r>
 8405d34:	d9c15117 	ldw	r7,1348(sp)
 8405d38:	103e2e1e 	bne	r2,zero,84055f4 <___vfprintf_internal_r+0x6e0>
 8405d3c:	dc800e17 	ldw	r18,56(sp)
 8405d40:	dc400d17 	ldw	r17,52(sp)
 8405d44:	dd401904 	addi	r21,sp,100
 8405d48:	003dba06 	br	8405434 <___vfprintf_internal_r+0x520>
 8405d4c:	d9014f17 	ldw	r4,1340(sp)
 8405d50:	b00b883a 	mov	r5,r22
 8405d54:	d9800c04 	addi	r6,sp,48
 8405d58:	8404ebc0 	call	8404ebc <__sprint_r>
 8405d5c:	103e251e 	bne	r2,zero,84055f4 <___vfprintf_internal_r+0x6e0>
 8405d60:	dc800e17 	ldw	r18,56(sp)
 8405d64:	dc400d17 	ldw	r17,52(sp)
 8405d68:	dcc01904 	addi	r19,sp,100
 8405d6c:	003e4206 	br	8405678 <___vfprintf_internal_r+0x764>
 8405d70:	d9014f17 	ldw	r4,1340(sp)
 8405d74:	b00b883a 	mov	r5,r22
 8405d78:	d9800c04 	addi	r6,sp,48
 8405d7c:	8404ebc0 	call	8404ebc <__sprint_r>
 8405d80:	103e1c1e 	bne	r2,zero,84055f4 <___vfprintf_internal_r+0x6e0>
 8405d84:	dc800e17 	ldw	r18,56(sp)
 8405d88:	dc400d17 	ldw	r17,52(sp)
 8405d8c:	d8c01904 	addi	r3,sp,100
 8405d90:	003e2e06 	br	840564c <___vfprintf_internal_r+0x738>
 8405d94:	d9414c17 	ldw	r5,1328(sp)
 8405d98:	2880004c 	andi	r2,r5,1
 8405d9c:	1005003a 	cmpeq	r2,r2,zero
 8405da0:	103dda1e 	bne	r2,zero,840550c <___vfprintf_internal_r+0x5f8>
 8405da4:	003e9f06 	br	8405824 <___vfprintf_internal_r+0x910>
 8405da8:	d8c14117 	ldw	r3,1284(sp)
 8405dac:	9125883a 	add	r18,r18,r4
 8405db0:	8c400044 	addi	r17,r17,1
 8405db4:	008001c4 	movi	r2,7
 8405db8:	a8c00015 	stw	r3,0(r21)
 8405dbc:	a9000115 	stw	r4,4(r21)
 8405dc0:	dc800e15 	stw	r18,56(sp)
 8405dc4:	dc400d15 	stw	r17,52(sp)
 8405dc8:	14426616 	blt	r2,r17,8406764 <___vfprintf_internal_r+0x1850>
 8405dcc:	a8c00204 	addi	r3,r21,8
 8405dd0:	d9414917 	ldw	r5,1316(sp)
 8405dd4:	00800044 	movi	r2,1
 8405dd8:	94800044 	addi	r18,r18,1
 8405ddc:	8c400044 	addi	r17,r17,1
 8405de0:	18800115 	stw	r2,4(r3)
 8405de4:	008001c4 	movi	r2,7
 8405de8:	19400015 	stw	r5,0(r3)
 8405dec:	dc800e15 	stw	r18,56(sp)
 8405df0:	dc400d15 	stw	r17,52(sp)
 8405df4:	2021883a 	mov	r16,r4
 8405df8:	14425016 	blt	r2,r17,840673c <___vfprintf_internal_r+0x1828>
 8405dfc:	19400204 	addi	r5,r3,8
 8405e00:	d9814717 	ldw	r6,1308(sp)
 8405e04:	8c400044 	addi	r17,r17,1
 8405e08:	dc400d15 	stw	r17,52(sp)
 8405e0c:	3107c83a 	sub	r3,r6,r4
 8405e10:	d9014117 	ldw	r4,1284(sp)
 8405e14:	90e5883a 	add	r18,r18,r3
 8405e18:	28c00115 	stw	r3,4(r5)
 8405e1c:	8105883a 	add	r2,r16,r4
 8405e20:	28800015 	stw	r2,0(r5)
 8405e24:	008001c4 	movi	r2,7
 8405e28:	dc800e15 	stw	r18,56(sp)
 8405e2c:	147f1d16 	blt	r2,r17,8405aa4 <___vfprintf_internal_r+0xb90>
 8405e30:	28c00204 	addi	r3,r5,8
 8405e34:	003db506 	br	840550c <___vfprintf_internal_r+0x5f8>
 8405e38:	3c000017 	ldw	r16,0(r7)
 8405e3c:	3c400117 	ldw	r17,4(r7)
 8405e40:	39800204 	addi	r6,r7,8
 8405e44:	01000044 	movi	r4,1
 8405e48:	d9814015 	stw	r6,1280(sp)
 8405e4c:	d8000405 	stb	zero,16(sp)
 8405e50:	003ebe06 	br	840594c <___vfprintf_internal_r+0xa38>
 8405e54:	3c000017 	ldw	r16,0(r7)
 8405e58:	3c400117 	ldw	r17,4(r7)
 8405e5c:	38800204 	addi	r2,r7,8
 8405e60:	d8814015 	stw	r2,1280(sp)
 8405e64:	003eb706 	br	8405944 <___vfprintf_internal_r+0xa30>
 8405e68:	3c000017 	ldw	r16,0(r7)
 8405e6c:	3c400117 	ldw	r17,4(r7)
 8405e70:	39000204 	addi	r4,r7,8
 8405e74:	d9014015 	stw	r4,1280(sp)
 8405e78:	0009883a 	mov	r4,zero
 8405e7c:	d8000405 	stb	zero,16(sp)
 8405e80:	003eb206 	br	840594c <___vfprintf_internal_r+0xa38>
 8405e84:	38c00017 	ldw	r3,0(r7)
 8405e88:	39c00104 	addi	r7,r7,4
 8405e8c:	d8c14a15 	stw	r3,1320(sp)
 8405e90:	1800d10e 	bge	r3,zero,84061d8 <___vfprintf_internal_r+0x12c4>
 8405e94:	00c7c83a 	sub	r3,zero,r3
 8405e98:	d8c14a15 	stw	r3,1320(sp)
 8405e9c:	d9014c17 	ldw	r4,1328(sp)
 8405ea0:	b8c00007 	ldb	r3,0(r23)
 8405ea4:	21000114 	ori	r4,r4,4
 8405ea8:	d9014c15 	stw	r4,1328(sp)
 8405eac:	003c9806 	br	8405110 <___vfprintf_internal_r+0x1fc>
 8405eb0:	d9814c17 	ldw	r6,1328(sp)
 8405eb4:	3080080c 	andi	r2,r6,32
 8405eb8:	1001f026 	beq	r2,zero,840667c <___vfprintf_internal_r+0x1768>
 8405ebc:	d9014b17 	ldw	r4,1324(sp)
 8405ec0:	38800017 	ldw	r2,0(r7)
 8405ec4:	39c00104 	addi	r7,r7,4
 8405ec8:	d9c14015 	stw	r7,1280(sp)
 8405ecc:	2007d7fa 	srai	r3,r4,31
 8405ed0:	d9c14017 	ldw	r7,1280(sp)
 8405ed4:	11000015 	stw	r4,0(r2)
 8405ed8:	10c00115 	stw	r3,4(r2)
 8405edc:	003c6906 	br	8405084 <___vfprintf_internal_r+0x170>
 8405ee0:	b8c00007 	ldb	r3,0(r23)
 8405ee4:	00801b04 	movi	r2,108
 8405ee8:	18824f26 	beq	r3,r2,8406828 <___vfprintf_internal_r+0x1914>
 8405eec:	d9414c17 	ldw	r5,1328(sp)
 8405ef0:	29400414 	ori	r5,r5,16
 8405ef4:	d9414c15 	stw	r5,1328(sp)
 8405ef8:	003c8506 	br	8405110 <___vfprintf_internal_r+0x1fc>
 8405efc:	d9814c17 	ldw	r6,1328(sp)
 8405f00:	b8c00007 	ldb	r3,0(r23)
 8405f04:	31800814 	ori	r6,r6,32
 8405f08:	d9814c15 	stw	r6,1328(sp)
 8405f0c:	003c8006 	br	8405110 <___vfprintf_internal_r+0x1fc>
 8405f10:	d8814c17 	ldw	r2,1328(sp)
 8405f14:	3c000017 	ldw	r16,0(r7)
 8405f18:	00c01e04 	movi	r3,120
 8405f1c:	10800094 	ori	r2,r2,2
 8405f20:	d8814c15 	stw	r2,1328(sp)
 8405f24:	39c00104 	addi	r7,r7,4
 8405f28:	01421074 	movhi	r5,2113
 8405f2c:	2946a404 	addi	r5,r5,6800
 8405f30:	00800c04 	movi	r2,48
 8405f34:	0023883a 	mov	r17,zero
 8405f38:	01000084 	movi	r4,2
 8405f3c:	d9c14015 	stw	r7,1280(sp)
 8405f40:	d8c14d15 	stw	r3,1332(sp)
 8405f44:	d9414415 	stw	r5,1296(sp)
 8405f48:	d8800445 	stb	r2,17(sp)
 8405f4c:	d8c00485 	stb	r3,18(sp)
 8405f50:	d8000405 	stb	zero,16(sp)
 8405f54:	003e7d06 	br	840594c <___vfprintf_internal_r+0xa38>
 8405f58:	d8814c17 	ldw	r2,1328(sp)
 8405f5c:	b8c00007 	ldb	r3,0(r23)
 8405f60:	10801014 	ori	r2,r2,64
 8405f64:	d8814c15 	stw	r2,1328(sp)
 8405f68:	003c6906 	br	8405110 <___vfprintf_internal_r+0x1fc>
 8405f6c:	d9414c17 	ldw	r5,1328(sp)
 8405f70:	2880020c 	andi	r2,r5,8
 8405f74:	1001df26 	beq	r2,zero,84066f4 <___vfprintf_internal_r+0x17e0>
 8405f78:	39800017 	ldw	r6,0(r7)
 8405f7c:	38800204 	addi	r2,r7,8
 8405f80:	d8814015 	stw	r2,1280(sp)
 8405f84:	d9814215 	stw	r6,1288(sp)
 8405f88:	39c00117 	ldw	r7,4(r7)
 8405f8c:	d9c14315 	stw	r7,1292(sp)
 8405f90:	d9014217 	ldw	r4,1288(sp)
 8405f94:	d9414317 	ldw	r5,1292(sp)
 8405f98:	840b8b40 	call	840b8b4 <__isinfd>
 8405f9c:	10021726 	beq	r2,zero,84067fc <___vfprintf_internal_r+0x18e8>
 8405fa0:	d9014217 	ldw	r4,1288(sp)
 8405fa4:	d9414317 	ldw	r5,1292(sp)
 8405fa8:	000d883a 	mov	r6,zero
 8405fac:	000f883a 	mov	r7,zero
 8405fb0:	8403fe40 	call	8403fe4 <__ltdf2>
 8405fb4:	1002ca16 	blt	r2,zero,8406ae0 <___vfprintf_internal_r+0x1bcc>
 8405fb8:	d9414d17 	ldw	r5,1332(sp)
 8405fbc:	008011c4 	movi	r2,71
 8405fc0:	11420a16 	blt	r2,r5,84067ec <___vfprintf_internal_r+0x18d8>
 8405fc4:	01821074 	movhi	r6,2113
 8405fc8:	3186a904 	addi	r6,r6,6820
 8405fcc:	d9814115 	stw	r6,1284(sp)
 8405fd0:	d9014c17 	ldw	r4,1328(sp)
 8405fd4:	00c000c4 	movi	r3,3
 8405fd8:	00bfdfc4 	movi	r2,-129
 8405fdc:	2088703a 	and	r4,r4,r2
 8405fe0:	180f883a 	mov	r7,r3
 8405fe4:	d8c14515 	stw	r3,1300(sp)
 8405fe8:	d9014c15 	stw	r4,1328(sp)
 8405fec:	d8014615 	stw	zero,1304(sp)
 8405ff0:	003e6a06 	br	840599c <___vfprintf_internal_r+0xa88>
 8405ff4:	38800017 	ldw	r2,0(r7)
 8405ff8:	00c00044 	movi	r3,1
 8405ffc:	39c00104 	addi	r7,r7,4
 8406000:	d9c14015 	stw	r7,1280(sp)
 8406004:	d9000f04 	addi	r4,sp,60
 8406008:	180f883a 	mov	r7,r3
 840600c:	d8c14515 	stw	r3,1300(sp)
 8406010:	d9014115 	stw	r4,1284(sp)
 8406014:	d8800f05 	stb	r2,60(sp)
 8406018:	d8000405 	stb	zero,16(sp)
 840601c:	003cac06 	br	84052d0 <___vfprintf_internal_r+0x3bc>
 8406020:	01421074 	movhi	r5,2113
 8406024:	2946af04 	addi	r5,r5,6844
 8406028:	d9414415 	stw	r5,1296(sp)
 840602c:	d9814c17 	ldw	r6,1328(sp)
 8406030:	3080080c 	andi	r2,r6,32
 8406034:	1000f926 	beq	r2,zero,840641c <___vfprintf_internal_r+0x1508>
 8406038:	3c000017 	ldw	r16,0(r7)
 840603c:	3c400117 	ldw	r17,4(r7)
 8406040:	38800204 	addi	r2,r7,8
 8406044:	d8814015 	stw	r2,1280(sp)
 8406048:	d9414c17 	ldw	r5,1328(sp)
 840604c:	2880004c 	andi	r2,r5,1
 8406050:	1005003a 	cmpeq	r2,r2,zero
 8406054:	1000b31e 	bne	r2,zero,8406324 <___vfprintf_internal_r+0x1410>
 8406058:	8444b03a 	or	r2,r16,r17
 840605c:	1000b126 	beq	r2,zero,8406324 <___vfprintf_internal_r+0x1410>
 8406060:	d9814d17 	ldw	r6,1332(sp)
 8406064:	29400094 	ori	r5,r5,2
 8406068:	00800c04 	movi	r2,48
 840606c:	01000084 	movi	r4,2
 8406070:	d9414c15 	stw	r5,1328(sp)
 8406074:	d8800445 	stb	r2,17(sp)
 8406078:	d9800485 	stb	r6,18(sp)
 840607c:	d8000405 	stb	zero,16(sp)
 8406080:	003e3206 	br	840594c <___vfprintf_internal_r+0xa38>
 8406084:	01821074 	movhi	r6,2113
 8406088:	3186a404 	addi	r6,r6,6800
 840608c:	d9814415 	stw	r6,1296(sp)
 8406090:	003fe606 	br	840602c <___vfprintf_internal_r+0x1118>
 8406094:	00800ac4 	movi	r2,43
 8406098:	d8800405 	stb	r2,16(sp)
 840609c:	b8c00007 	ldb	r3,0(r23)
 84060a0:	003c1b06 	br	8405110 <___vfprintf_internal_r+0x1fc>
 84060a4:	d8814c17 	ldw	r2,1328(sp)
 84060a8:	b8c00007 	ldb	r3,0(r23)
 84060ac:	10800054 	ori	r2,r2,1
 84060b0:	d8814c15 	stw	r2,1328(sp)
 84060b4:	003c1606 	br	8405110 <___vfprintf_internal_r+0x1fc>
 84060b8:	d8800407 	ldb	r2,16(sp)
 84060bc:	1000461e 	bne	r2,zero,84061d8 <___vfprintf_internal_r+0x12c4>
 84060c0:	00800804 	movi	r2,32
 84060c4:	d8800405 	stb	r2,16(sp)
 84060c8:	b8c00007 	ldb	r3,0(r23)
 84060cc:	003c1006 	br	8405110 <___vfprintf_internal_r+0x1fc>
 84060d0:	d9814c17 	ldw	r6,1328(sp)
 84060d4:	b8c00007 	ldb	r3,0(r23)
 84060d8:	31800214 	ori	r6,r6,8
 84060dc:	d9814c15 	stw	r6,1328(sp)
 84060e0:	003c0b06 	br	8405110 <___vfprintf_internal_r+0x1fc>
 84060e4:	0007883a 	mov	r3,zero
 84060e8:	01000244 	movi	r4,9
 84060ec:	188002a4 	muli	r2,r3,10
 84060f0:	b8c00007 	ldb	r3,0(r23)
 84060f4:	d9814d17 	ldw	r6,1332(sp)
 84060f8:	bdc00044 	addi	r23,r23,1
 84060fc:	d8c14d15 	stw	r3,1332(sp)
 8406100:	d9414d17 	ldw	r5,1332(sp)
 8406104:	3085883a 	add	r2,r6,r2
 8406108:	10fff404 	addi	r3,r2,-48
 840610c:	28bff404 	addi	r2,r5,-48
 8406110:	20bff62e 	bgeu	r4,r2,84060ec <___vfprintf_internal_r+0x11d8>
 8406114:	d8c14a15 	stw	r3,1320(sp)
 8406118:	003bff06 	br	8405118 <___vfprintf_internal_r+0x204>
 840611c:	d9414c17 	ldw	r5,1328(sp)
 8406120:	b8c00007 	ldb	r3,0(r23)
 8406124:	29402014 	ori	r5,r5,128
 8406128:	d9414c15 	stw	r5,1328(sp)
 840612c:	003bf806 	br	8405110 <___vfprintf_internal_r+0x1fc>
 8406130:	b8c00007 	ldb	r3,0(r23)
 8406134:	00800a84 	movi	r2,42
 8406138:	bdc00044 	addi	r23,r23,1
 840613c:	18831526 	beq	r3,r2,8406d94 <___vfprintf_internal_r+0x1e80>
 8406140:	d8c14d15 	stw	r3,1332(sp)
 8406144:	18bff404 	addi	r2,r3,-48
 8406148:	00c00244 	movi	r3,9
 840614c:	18827836 	bltu	r3,r2,8406b30 <___vfprintf_internal_r+0x1c1c>
 8406150:	000d883a 	mov	r6,zero
 8406154:	308002a4 	muli	r2,r6,10
 8406158:	b9800007 	ldb	r6,0(r23)
 840615c:	d9414d17 	ldw	r5,1332(sp)
 8406160:	bdc00044 	addi	r23,r23,1
 8406164:	d9814d15 	stw	r6,1332(sp)
 8406168:	d9014d17 	ldw	r4,1332(sp)
 840616c:	1145883a 	add	r2,r2,r5
 8406170:	11bff404 	addi	r6,r2,-48
 8406174:	20bff404 	addi	r2,r4,-48
 8406178:	18bff62e 	bgeu	r3,r2,8406154 <___vfprintf_internal_r+0x1240>
 840617c:	3027883a 	mov	r19,r6
 8406180:	303be50e 	bge	r6,zero,8405118 <___vfprintf_internal_r+0x204>
 8406184:	04ffffc4 	movi	r19,-1
 8406188:	003be306 	br	8405118 <___vfprintf_internal_r+0x204>
 840618c:	d8000405 	stb	zero,16(sp)
 8406190:	39800017 	ldw	r6,0(r7)
 8406194:	39c00104 	addi	r7,r7,4
 8406198:	d9c14015 	stw	r7,1280(sp)
 840619c:	d9814115 	stw	r6,1284(sp)
 84061a0:	3001c926 	beq	r6,zero,84068c8 <___vfprintf_internal_r+0x19b4>
 84061a4:	98000e16 	blt	r19,zero,84061e0 <___vfprintf_internal_r+0x12cc>
 84061a8:	d9014117 	ldw	r4,1284(sp)
 84061ac:	000b883a 	mov	r5,zero
 84061b0:	980d883a 	mov	r6,r19
 84061b4:	8409fd00 	call	8409fd0 <memchr>
 84061b8:	10025926 	beq	r2,zero,8406b20 <___vfprintf_internal_r+0x1c0c>
 84061bc:	d8c14117 	ldw	r3,1284(sp)
 84061c0:	10cfc83a 	sub	r7,r2,r3
 84061c4:	99c19e16 	blt	r19,r7,8406840 <___vfprintf_internal_r+0x192c>
 84061c8:	d9c14515 	stw	r7,1300(sp)
 84061cc:	38000916 	blt	r7,zero,84061f4 <___vfprintf_internal_r+0x12e0>
 84061d0:	d8014615 	stw	zero,1304(sp)
 84061d4:	003df106 	br	840599c <___vfprintf_internal_r+0xa88>
 84061d8:	b8c00007 	ldb	r3,0(r23)
 84061dc:	003bcc06 	br	8405110 <___vfprintf_internal_r+0x1fc>
 84061e0:	d9014117 	ldw	r4,1284(sp)
 84061e4:	8404e480 	call	8404e48 <strlen>
 84061e8:	d8814515 	stw	r2,1300(sp)
 84061ec:	100f883a 	mov	r7,r2
 84061f0:	103ff70e 	bge	r2,zero,84061d0 <___vfprintf_internal_r+0x12bc>
 84061f4:	d8014515 	stw	zero,1300(sp)
 84061f8:	d8014615 	stw	zero,1304(sp)
 84061fc:	003de706 	br	840599c <___vfprintf_internal_r+0xa88>
 8406200:	20c03fcc 	andi	r3,r4,255
 8406204:	00800044 	movi	r2,1
 8406208:	18802d26 	beq	r3,r2,84062c0 <___vfprintf_internal_r+0x13ac>
 840620c:	18800e36 	bltu	r3,r2,8406248 <___vfprintf_internal_r+0x1334>
 8406210:	00800084 	movi	r2,2
 8406214:	1880fa26 	beq	r3,r2,8406600 <___vfprintf_internal_r+0x16ec>
 8406218:	01021074 	movhi	r4,2113
 840621c:	2106b404 	addi	r4,r4,6864
 8406220:	8404e480 	call	8404e48 <strlen>
 8406224:	100f883a 	mov	r7,r2
 8406228:	dcc14515 	stw	r19,1300(sp)
 840622c:	9880010e 	bge	r19,r2,8406234 <___vfprintf_internal_r+0x1320>
 8406230:	d8814515 	stw	r2,1300(sp)
 8406234:	00821074 	movhi	r2,2113
 8406238:	1086b404 	addi	r2,r2,6864
 840623c:	dcc14615 	stw	r19,1304(sp)
 8406240:	d8814115 	stw	r2,1284(sp)
 8406244:	003dd506 	br	840599c <___vfprintf_internal_r+0xa88>
 8406248:	d9401904 	addi	r5,sp,100
 840624c:	dd000f04 	addi	r20,sp,60
 8406250:	d9414115 	stw	r5,1284(sp)
 8406254:	880a977a 	slli	r5,r17,29
 8406258:	d9814117 	ldw	r6,1284(sp)
 840625c:	8004d0fa 	srli	r2,r16,3
 8406260:	8806d0fa 	srli	r3,r17,3
 8406264:	810001cc 	andi	r4,r16,7
 8406268:	2884b03a 	or	r2,r5,r2
 840626c:	31bfffc4 	addi	r6,r6,-1
 8406270:	21000c04 	addi	r4,r4,48
 8406274:	d9814115 	stw	r6,1284(sp)
 8406278:	10cab03a 	or	r5,r2,r3
 840627c:	31000005 	stb	r4,0(r6)
 8406280:	1021883a 	mov	r16,r2
 8406284:	1823883a 	mov	r17,r3
 8406288:	283ff21e 	bne	r5,zero,8406254 <___vfprintf_internal_r+0x1340>
 840628c:	d8c14c17 	ldw	r3,1328(sp)
 8406290:	1880004c 	andi	r2,r3,1
 8406294:	1005003a 	cmpeq	r2,r2,zero
 8406298:	103db91e 	bne	r2,zero,8405980 <___vfprintf_internal_r+0xa6c>
 840629c:	20803fcc 	andi	r2,r4,255
 84062a0:	1080201c 	xori	r2,r2,128
 84062a4:	10bfe004 	addi	r2,r2,-128
 84062a8:	00c00c04 	movi	r3,48
 84062ac:	10fdb426 	beq	r2,r3,8405980 <___vfprintf_internal_r+0xa6c>
 84062b0:	31bfffc4 	addi	r6,r6,-1
 84062b4:	d9814115 	stw	r6,1284(sp)
 84062b8:	30c00005 	stb	r3,0(r6)
 84062bc:	003db006 	br	8405980 <___vfprintf_internal_r+0xa6c>
 84062c0:	88800068 	cmpgeui	r2,r17,1
 84062c4:	10002c1e 	bne	r2,zero,8406378 <___vfprintf_internal_r+0x1464>
 84062c8:	8800021e 	bne	r17,zero,84062d4 <___vfprintf_internal_r+0x13c0>
 84062cc:	00800244 	movi	r2,9
 84062d0:	14002936 	bltu	r2,r16,8406378 <___vfprintf_internal_r+0x1464>
 84062d4:	d90018c4 	addi	r4,sp,99
 84062d8:	dd000f04 	addi	r20,sp,60
 84062dc:	d9014115 	stw	r4,1284(sp)
 84062e0:	d9014117 	ldw	r4,1284(sp)
 84062e4:	80800c04 	addi	r2,r16,48
 84062e8:	20800005 	stb	r2,0(r4)
 84062ec:	003da406 	br	8405980 <___vfprintf_internal_r+0xa6c>
 84062f0:	dc400d17 	ldw	r17,52(sp)
 84062f4:	07021074 	movhi	fp,2113
 84062f8:	e706bb84 	addi	fp,fp,6894
 84062fc:	9425883a 	add	r18,r18,r16
 8406300:	8c400044 	addi	r17,r17,1
 8406304:	008001c4 	movi	r2,7
 8406308:	1f000015 	stw	fp,0(r3)
 840630c:	1c000115 	stw	r16,4(r3)
 8406310:	dc800e15 	stw	r18,56(sp)
 8406314:	dc400d15 	stw	r17,52(sp)
 8406318:	147de216 	blt	r2,r17,8405aa4 <___vfprintf_internal_r+0xb90>
 840631c:	18c00204 	addi	r3,r3,8
 8406320:	003c7a06 	br	840550c <___vfprintf_internal_r+0x5f8>
 8406324:	01000084 	movi	r4,2
 8406328:	d8000405 	stb	zero,16(sp)
 840632c:	003d8706 	br	840594c <___vfprintf_internal_r+0xa38>
 8406330:	d9814c17 	ldw	r6,1328(sp)
 8406334:	30c4703a 	and	r2,r6,r3
 8406338:	1005003a 	cmpeq	r2,r2,zero
 840633c:	103cb926 	beq	r2,zero,8405624 <___vfprintf_internal_r+0x710>
 8406340:	d9014117 	ldw	r4,1284(sp)
 8406344:	94800044 	addi	r18,r18,1
 8406348:	8c400044 	addi	r17,r17,1
 840634c:	008001c4 	movi	r2,7
 8406350:	a9000015 	stw	r4,0(r21)
 8406354:	a8c00115 	stw	r3,4(r21)
 8406358:	dc800e15 	stw	r18,56(sp)
 840635c:	dc400d15 	stw	r17,52(sp)
 8406360:	147e6616 	blt	r2,r17,8405cfc <___vfprintf_internal_r+0xde8>
 8406364:	acc00204 	addi	r19,r21,8
 8406368:	003cd706 	br	84056c8 <___vfprintf_internal_r+0x7b4>
 840636c:	07021074 	movhi	fp,2113
 8406370:	e706bb84 	addi	fp,fp,6894
 8406374:	003c4f06 	br	84054b4 <___vfprintf_internal_r+0x5a0>
 8406378:	dd000f04 	addi	r20,sp,60
 840637c:	dc801904 	addi	r18,sp,100
 8406380:	8009883a 	mov	r4,r16
 8406384:	880b883a 	mov	r5,r17
 8406388:	01800284 	movi	r6,10
 840638c:	000f883a 	mov	r7,zero
 8406390:	840c5dc0 	call	840c5dc <__umoddi3>
 8406394:	12000c04 	addi	r8,r2,48
 8406398:	94bfffc4 	addi	r18,r18,-1
 840639c:	8009883a 	mov	r4,r16
 84063a0:	880b883a 	mov	r5,r17
 84063a4:	01800284 	movi	r6,10
 84063a8:	000f883a 	mov	r7,zero
 84063ac:	92000005 	stb	r8,0(r18)
 84063b0:	840c0000 	call	840c000 <__udivdi3>
 84063b4:	1009883a 	mov	r4,r2
 84063b8:	1021883a 	mov	r16,r2
 84063bc:	18800068 	cmpgeui	r2,r3,1
 84063c0:	1823883a 	mov	r17,r3
 84063c4:	103fee1e 	bne	r2,zero,8406380 <___vfprintf_internal_r+0x146c>
 84063c8:	1800021e 	bne	r3,zero,84063d4 <___vfprintf_internal_r+0x14c0>
 84063cc:	00800244 	movi	r2,9
 84063d0:	113feb36 	bltu	r2,r4,8406380 <___vfprintf_internal_r+0x146c>
 84063d4:	94bfffc4 	addi	r18,r18,-1
 84063d8:	dc814115 	stw	r18,1284(sp)
 84063dc:	003fc006 	br	84062e0 <___vfprintf_internal_r+0x13cc>
 84063e0:	d9014c17 	ldw	r4,1328(sp)
 84063e4:	2080004c 	andi	r2,r4,1
 84063e8:	10009a1e 	bne	r2,zero,8406654 <___vfprintf_internal_r+0x1740>
 84063ec:	d9401904 	addi	r5,sp,100
 84063f0:	dd000f04 	addi	r20,sp,60
 84063f4:	d9414115 	stw	r5,1284(sp)
 84063f8:	003d6106 	br	8405980 <___vfprintf_internal_r+0xa6c>
 84063fc:	d9014f17 	ldw	r4,1340(sp)
 8406400:	b00b883a 	mov	r5,r22
 8406404:	d9800c04 	addi	r6,sp,48
 8406408:	8404ebc0 	call	8404ebc <__sprint_r>
 840640c:	103c791e 	bne	r2,zero,84055f4 <___vfprintf_internal_r+0x6e0>
 8406410:	dc800e17 	ldw	r18,56(sp)
 8406414:	d8c01904 	addi	r3,sp,100
 8406418:	003cff06 	br	8405818 <___vfprintf_internal_r+0x904>
 840641c:	d8c14c17 	ldw	r3,1328(sp)
 8406420:	1880040c 	andi	r2,r3,16
 8406424:	1000711e 	bne	r2,zero,84065ec <___vfprintf_internal_r+0x16d8>
 8406428:	d9014c17 	ldw	r4,1328(sp)
 840642c:	2080100c 	andi	r2,r4,64
 8406430:	10006e26 	beq	r2,zero,84065ec <___vfprintf_internal_r+0x16d8>
 8406434:	3c00000b 	ldhu	r16,0(r7)
 8406438:	0023883a 	mov	r17,zero
 840643c:	39c00104 	addi	r7,r7,4
 8406440:	d9c14015 	stw	r7,1280(sp)
 8406444:	003f0006 	br	8406048 <___vfprintf_internal_r+0x1134>
 8406448:	dc400d17 	ldw	r17,52(sp)
 840644c:	07021074 	movhi	fp,2113
 8406450:	e706bb84 	addi	fp,fp,6894
 8406454:	9425883a 	add	r18,r18,r16
 8406458:	8c400044 	addi	r17,r17,1
 840645c:	008001c4 	movi	r2,7
 8406460:	1f000015 	stw	fp,0(r3)
 8406464:	1c000115 	stw	r16,4(r3)
 8406468:	dc800e15 	stw	r18,56(sp)
 840646c:	dc400d15 	stw	r17,52(sp)
 8406470:	147d7616 	blt	r2,r17,8405a4c <___vfprintf_internal_r+0xb38>
 8406474:	18c00204 	addi	r3,r3,8
 8406478:	003d7b06 	br	8405a68 <___vfprintf_internal_r+0xb54>
 840647c:	dc800e17 	ldw	r18,56(sp)
 8406480:	dc400d17 	ldw	r17,52(sp)
 8406484:	07021074 	movhi	fp,2113
 8406488:	e706bf84 	addi	fp,fp,6910
 840648c:	003bc006 	br	8405390 <___vfprintf_internal_r+0x47c>
 8406490:	d9014f17 	ldw	r4,1340(sp)
 8406494:	b00b883a 	mov	r5,r22
 8406498:	d9800c04 	addi	r6,sp,48
 840649c:	8404ebc0 	call	8404ebc <__sprint_r>
 84064a0:	103c541e 	bne	r2,zero,84055f4 <___vfprintf_internal_r+0x6e0>
 84064a4:	dc800e17 	ldw	r18,56(sp)
 84064a8:	d8c01904 	addi	r3,sp,100
 84064ac:	003ce906 	br	8405854 <___vfprintf_internal_r+0x940>
 84064b0:	3c000017 	ldw	r16,0(r7)
 84064b4:	0009883a 	mov	r4,zero
 84064b8:	39c00104 	addi	r7,r7,4
 84064bc:	0023883a 	mov	r17,zero
 84064c0:	d9c14015 	stw	r7,1280(sp)
 84064c4:	d8000405 	stb	zero,16(sp)
 84064c8:	003d2006 	br	840594c <___vfprintf_internal_r+0xa38>
 84064cc:	38800017 	ldw	r2,0(r7)
 84064d0:	39c00104 	addi	r7,r7,4
 84064d4:	d9c14015 	stw	r7,1280(sp)
 84064d8:	1023d7fa 	srai	r17,r2,31
 84064dc:	1021883a 	mov	r16,r2
 84064e0:	003d1806 	br	8405944 <___vfprintf_internal_r+0xa30>
 84064e4:	3c000017 	ldw	r16,0(r7)
 84064e8:	01000044 	movi	r4,1
 84064ec:	39c00104 	addi	r7,r7,4
 84064f0:	0023883a 	mov	r17,zero
 84064f4:	d9c14015 	stw	r7,1280(sp)
 84064f8:	d8000405 	stb	zero,16(sp)
 84064fc:	003d1306 	br	840594c <___vfprintf_internal_r+0xa38>
 8406500:	00821074 	movhi	r2,2113
 8406504:	1086bb04 	addi	r2,r2,6892
 8406508:	94800044 	addi	r18,r18,1
 840650c:	8c400044 	addi	r17,r17,1
 8406510:	a8800015 	stw	r2,0(r21)
 8406514:	00c00044 	movi	r3,1
 8406518:	008001c4 	movi	r2,7
 840651c:	a8c00115 	stw	r3,4(r21)
 8406520:	dc800e15 	stw	r18,56(sp)
 8406524:	dc400d15 	stw	r17,52(sp)
 8406528:	1440ca16 	blt	r2,r17,8406854 <___vfprintf_internal_r+0x1940>
 840652c:	a8c00204 	addi	r3,r21,8
 8406530:	2000061e 	bne	r4,zero,840654c <___vfprintf_internal_r+0x1638>
 8406534:	d9414717 	ldw	r5,1308(sp)
 8406538:	2800041e 	bne	r5,zero,840654c <___vfprintf_internal_r+0x1638>
 840653c:	d9814c17 	ldw	r6,1328(sp)
 8406540:	3080004c 	andi	r2,r6,1
 8406544:	1005003a 	cmpeq	r2,r2,zero
 8406548:	103bf01e 	bne	r2,zero,840550c <___vfprintf_internal_r+0x5f8>
 840654c:	00800044 	movi	r2,1
 8406550:	dc400d17 	ldw	r17,52(sp)
 8406554:	18800115 	stw	r2,4(r3)
 8406558:	d8814917 	ldw	r2,1316(sp)
 840655c:	94800044 	addi	r18,r18,1
 8406560:	8c400044 	addi	r17,r17,1
 8406564:	18800015 	stw	r2,0(r3)
 8406568:	008001c4 	movi	r2,7
 840656c:	dc800e15 	stw	r18,56(sp)
 8406570:	dc400d15 	stw	r17,52(sp)
 8406574:	1440ca16 	blt	r2,r17,84068a0 <___vfprintf_internal_r+0x198c>
 8406578:	18c00204 	addi	r3,r3,8
 840657c:	0121c83a 	sub	r16,zero,r4
 8406580:	0400500e 	bge	zero,r16,84066c4 <___vfprintf_internal_r+0x17b0>
 8406584:	00800404 	movi	r2,16
 8406588:	1400800e 	bge	r2,r16,840678c <___vfprintf_internal_r+0x1878>
 840658c:	1027883a 	mov	r19,r2
 8406590:	07021074 	movhi	fp,2113
 8406594:	e706bb84 	addi	fp,fp,6894
 8406598:	050001c4 	movi	r20,7
 840659c:	00000306 	br	84065ac <___vfprintf_internal_r+0x1698>
 84065a0:	18c00204 	addi	r3,r3,8
 84065a4:	843ffc04 	addi	r16,r16,-16
 84065a8:	9c007a0e 	bge	r19,r16,8406794 <___vfprintf_internal_r+0x1880>
 84065ac:	94800404 	addi	r18,r18,16
 84065b0:	8c400044 	addi	r17,r17,1
 84065b4:	1f000015 	stw	fp,0(r3)
 84065b8:	1cc00115 	stw	r19,4(r3)
 84065bc:	dc800e15 	stw	r18,56(sp)
 84065c0:	dc400d15 	stw	r17,52(sp)
 84065c4:	a47ff60e 	bge	r20,r17,84065a0 <___vfprintf_internal_r+0x168c>
 84065c8:	d9014f17 	ldw	r4,1340(sp)
 84065cc:	b00b883a 	mov	r5,r22
 84065d0:	d9800c04 	addi	r6,sp,48
 84065d4:	8404ebc0 	call	8404ebc <__sprint_r>
 84065d8:	103c061e 	bne	r2,zero,84055f4 <___vfprintf_internal_r+0x6e0>
 84065dc:	dc800e17 	ldw	r18,56(sp)
 84065e0:	dc400d17 	ldw	r17,52(sp)
 84065e4:	d8c01904 	addi	r3,sp,100
 84065e8:	003fee06 	br	84065a4 <___vfprintf_internal_r+0x1690>
 84065ec:	3c000017 	ldw	r16,0(r7)
 84065f0:	0023883a 	mov	r17,zero
 84065f4:	39c00104 	addi	r7,r7,4
 84065f8:	d9c14015 	stw	r7,1280(sp)
 84065fc:	003e9206 	br	8406048 <___vfprintf_internal_r+0x1134>
 8406600:	d9401904 	addi	r5,sp,100
 8406604:	dd000f04 	addi	r20,sp,60
 8406608:	d9414115 	stw	r5,1284(sp)
 840660c:	d9814417 	ldw	r6,1296(sp)
 8406610:	880a973a 	slli	r5,r17,28
 8406614:	8004d13a 	srli	r2,r16,4
 8406618:	810003cc 	andi	r4,r16,15
 840661c:	3109883a 	add	r4,r6,r4
 8406620:	2884b03a 	or	r2,r5,r2
 8406624:	21400003 	ldbu	r5,0(r4)
 8406628:	d9014117 	ldw	r4,1284(sp)
 840662c:	8806d13a 	srli	r3,r17,4
 8406630:	1021883a 	mov	r16,r2
 8406634:	213fffc4 	addi	r4,r4,-1
 8406638:	d9014115 	stw	r4,1284(sp)
 840663c:	d9814117 	ldw	r6,1284(sp)
 8406640:	10c8b03a 	or	r4,r2,r3
 8406644:	1823883a 	mov	r17,r3
 8406648:	31400005 	stb	r5,0(r6)
 840664c:	203fef1e 	bne	r4,zero,840660c <___vfprintf_internal_r+0x16f8>
 8406650:	003ccb06 	br	8405980 <___vfprintf_internal_r+0xa6c>
 8406654:	00800c04 	movi	r2,48
 8406658:	d98018c4 	addi	r6,sp,99
 840665c:	dd000f04 	addi	r20,sp,60
 8406660:	d88018c5 	stb	r2,99(sp)
 8406664:	d9814115 	stw	r6,1284(sp)
 8406668:	003cc506 	br	8405980 <___vfprintf_internal_r+0xa6c>
 840666c:	dc400d17 	ldw	r17,52(sp)
 8406670:	07021074 	movhi	fp,2113
 8406674:	e706bf84 	addi	fp,fp,6910
 8406678:	003bc706 	br	8405598 <___vfprintf_internal_r+0x684>
 840667c:	d9414c17 	ldw	r5,1328(sp)
 8406680:	2880040c 	andi	r2,r5,16
 8406684:	10007c26 	beq	r2,zero,8406878 <___vfprintf_internal_r+0x1964>
 8406688:	38800017 	ldw	r2,0(r7)
 840668c:	39c00104 	addi	r7,r7,4
 8406690:	d9c14015 	stw	r7,1280(sp)
 8406694:	d9814b17 	ldw	r6,1324(sp)
 8406698:	d9c14017 	ldw	r7,1280(sp)
 840669c:	11800015 	stw	r6,0(r2)
 84066a0:	003a7806 	br	8405084 <___vfprintf_internal_r+0x170>
 84066a4:	d9014f17 	ldw	r4,1340(sp)
 84066a8:	b00b883a 	mov	r5,r22
 84066ac:	d9800c04 	addi	r6,sp,48
 84066b0:	8404ebc0 	call	8404ebc <__sprint_r>
 84066b4:	103bcf1e 	bne	r2,zero,84055f4 <___vfprintf_internal_r+0x6e0>
 84066b8:	dc800e17 	ldw	r18,56(sp)
 84066bc:	dc400d17 	ldw	r17,52(sp)
 84066c0:	d8c01904 	addi	r3,sp,100
 84066c4:	d9014717 	ldw	r4,1308(sp)
 84066c8:	d9414117 	ldw	r5,1284(sp)
 84066cc:	8c400044 	addi	r17,r17,1
 84066d0:	9125883a 	add	r18,r18,r4
 84066d4:	008001c4 	movi	r2,7
 84066d8:	19400015 	stw	r5,0(r3)
 84066dc:	19000115 	stw	r4,4(r3)
 84066e0:	dc800e15 	stw	r18,56(sp)
 84066e4:	dc400d15 	stw	r17,52(sp)
 84066e8:	147cee16 	blt	r2,r17,8405aa4 <___vfprintf_internal_r+0xb90>
 84066ec:	18c00204 	addi	r3,r3,8
 84066f0:	003b8606 	br	840550c <___vfprintf_internal_r+0x5f8>
 84066f4:	38c00017 	ldw	r3,0(r7)
 84066f8:	39000204 	addi	r4,r7,8
 84066fc:	d9014015 	stw	r4,1280(sp)
 8406700:	d8c14215 	stw	r3,1288(sp)
 8406704:	39c00117 	ldw	r7,4(r7)
 8406708:	d9c14315 	stw	r7,1292(sp)
 840670c:	003e2006 	br	8405f90 <___vfprintf_internal_r+0x107c>
 8406710:	0005883a 	mov	r2,zero
 8406714:	1409c83a 	sub	r4,r2,r16
 8406718:	1105803a 	cmpltu	r2,r2,r4
 840671c:	044bc83a 	sub	r5,zero,r17
 8406720:	2885c83a 	sub	r2,r5,r2
 8406724:	2021883a 	mov	r16,r4
 8406728:	1023883a 	mov	r17,r2
 840672c:	01000044 	movi	r4,1
 8406730:	00800b44 	movi	r2,45
 8406734:	d8800405 	stb	r2,16(sp)
 8406738:	003c8406 	br	840594c <___vfprintf_internal_r+0xa38>
 840673c:	d9014f17 	ldw	r4,1340(sp)
 8406740:	b00b883a 	mov	r5,r22
 8406744:	d9800c04 	addi	r6,sp,48
 8406748:	8404ebc0 	call	8404ebc <__sprint_r>
 840674c:	103ba91e 	bne	r2,zero,84055f4 <___vfprintf_internal_r+0x6e0>
 8406750:	dc800e17 	ldw	r18,56(sp)
 8406754:	dc400d17 	ldw	r17,52(sp)
 8406758:	d9000517 	ldw	r4,20(sp)
 840675c:	d9401904 	addi	r5,sp,100
 8406760:	003da706 	br	8405e00 <___vfprintf_internal_r+0xeec>
 8406764:	d9014f17 	ldw	r4,1340(sp)
 8406768:	b00b883a 	mov	r5,r22
 840676c:	d9800c04 	addi	r6,sp,48
 8406770:	8404ebc0 	call	8404ebc <__sprint_r>
 8406774:	103b9f1e 	bne	r2,zero,84055f4 <___vfprintf_internal_r+0x6e0>
 8406778:	dc800e17 	ldw	r18,56(sp)
 840677c:	dc400d17 	ldw	r17,52(sp)
 8406780:	d9000517 	ldw	r4,20(sp)
 8406784:	d8c01904 	addi	r3,sp,100
 8406788:	003d9106 	br	8405dd0 <___vfprintf_internal_r+0xebc>
 840678c:	07021074 	movhi	fp,2113
 8406790:	e706bb84 	addi	fp,fp,6894
 8406794:	9425883a 	add	r18,r18,r16
 8406798:	8c400044 	addi	r17,r17,1
 840679c:	008001c4 	movi	r2,7
 84067a0:	1f000015 	stw	fp,0(r3)
 84067a4:	1c000115 	stw	r16,4(r3)
 84067a8:	dc800e15 	stw	r18,56(sp)
 84067ac:	dc400d15 	stw	r17,52(sp)
 84067b0:	147fbc16 	blt	r2,r17,84066a4 <___vfprintf_internal_r+0x1790>
 84067b4:	18c00204 	addi	r3,r3,8
 84067b8:	003fc206 	br	84066c4 <___vfprintf_internal_r+0x17b0>
 84067bc:	d9014f17 	ldw	r4,1340(sp)
 84067c0:	b00b883a 	mov	r5,r22
 84067c4:	d9800c04 	addi	r6,sp,48
 84067c8:	8404ebc0 	call	8404ebc <__sprint_r>
 84067cc:	103b891e 	bne	r2,zero,84055f4 <___vfprintf_internal_r+0x6e0>
 84067d0:	dc800e17 	ldw	r18,56(sp)
 84067d4:	d9000517 	ldw	r4,20(sp)
 84067d8:	d8c01904 	addi	r3,sp,100
 84067dc:	003d0206 	br	8405be8 <___vfprintf_internal_r+0xcd4>
 84067e0:	07021074 	movhi	fp,2113
 84067e4:	e706bb84 	addi	fp,fp,6894
 84067e8:	003be406 	br	840577c <___vfprintf_internal_r+0x868>
 84067ec:	00821074 	movhi	r2,2113
 84067f0:	1086aa04 	addi	r2,r2,6824
 84067f4:	d8814115 	stw	r2,1284(sp)
 84067f8:	003df506 	br	8405fd0 <___vfprintf_internal_r+0x10bc>
 84067fc:	d9014217 	ldw	r4,1288(sp)
 8406800:	d9414317 	ldw	r5,1292(sp)
 8406804:	84027040 	call	8402704 <__isnand>
 8406808:	10003926 	beq	r2,zero,84068f0 <___vfprintf_internal_r+0x19dc>
 840680c:	d9414d17 	ldw	r5,1332(sp)
 8406810:	008011c4 	movi	r2,71
 8406814:	1140ce16 	blt	r2,r5,8406b50 <___vfprintf_internal_r+0x1c3c>
 8406818:	01821074 	movhi	r6,2113
 840681c:	3186ab04 	addi	r6,r6,6828
 8406820:	d9814115 	stw	r6,1284(sp)
 8406824:	003dea06 	br	8405fd0 <___vfprintf_internal_r+0x10bc>
 8406828:	d9014c17 	ldw	r4,1328(sp)
 840682c:	bdc00044 	addi	r23,r23,1
 8406830:	b8c00007 	ldb	r3,0(r23)
 8406834:	21000814 	ori	r4,r4,32
 8406838:	d9014c15 	stw	r4,1328(sp)
 840683c:	003a3406 	br	8405110 <___vfprintf_internal_r+0x1fc>
 8406840:	dcc14515 	stw	r19,1300(sp)
 8406844:	98011016 	blt	r19,zero,8406c88 <___vfprintf_internal_r+0x1d74>
 8406848:	980f883a 	mov	r7,r19
 840684c:	d8014615 	stw	zero,1304(sp)
 8406850:	003c5206 	br	840599c <___vfprintf_internal_r+0xa88>
 8406854:	d9014f17 	ldw	r4,1340(sp)
 8406858:	b00b883a 	mov	r5,r22
 840685c:	d9800c04 	addi	r6,sp,48
 8406860:	8404ebc0 	call	8404ebc <__sprint_r>
 8406864:	103b631e 	bne	r2,zero,84055f4 <___vfprintf_internal_r+0x6e0>
 8406868:	dc800e17 	ldw	r18,56(sp)
 840686c:	d9000517 	ldw	r4,20(sp)
 8406870:	d8c01904 	addi	r3,sp,100
 8406874:	003f2e06 	br	8406530 <___vfprintf_internal_r+0x161c>
 8406878:	d8c14c17 	ldw	r3,1328(sp)
 840687c:	1880100c 	andi	r2,r3,64
 8406880:	1000a026 	beq	r2,zero,8406b04 <___vfprintf_internal_r+0x1bf0>
 8406884:	38800017 	ldw	r2,0(r7)
 8406888:	39c00104 	addi	r7,r7,4
 840688c:	d9c14015 	stw	r7,1280(sp)
 8406890:	d9014b17 	ldw	r4,1324(sp)
 8406894:	d9c14017 	ldw	r7,1280(sp)
 8406898:	1100000d 	sth	r4,0(r2)
 840689c:	0039f906 	br	8405084 <___vfprintf_internal_r+0x170>
 84068a0:	d9014f17 	ldw	r4,1340(sp)
 84068a4:	b00b883a 	mov	r5,r22
 84068a8:	d9800c04 	addi	r6,sp,48
 84068ac:	8404ebc0 	call	8404ebc <__sprint_r>
 84068b0:	103b501e 	bne	r2,zero,84055f4 <___vfprintf_internal_r+0x6e0>
 84068b4:	dc800e17 	ldw	r18,56(sp)
 84068b8:	dc400d17 	ldw	r17,52(sp)
 84068bc:	d9000517 	ldw	r4,20(sp)
 84068c0:	d8c01904 	addi	r3,sp,100
 84068c4:	003f2d06 	br	840657c <___vfprintf_internal_r+0x1668>
 84068c8:	00800184 	movi	r2,6
 84068cc:	14c09a36 	bltu	r2,r19,8406b38 <___vfprintf_internal_r+0x1c24>
 84068d0:	dcc14515 	stw	r19,1300(sp)
 84068d4:	9800010e 	bge	r19,zero,84068dc <___vfprintf_internal_r+0x19c8>
 84068d8:	d8014515 	stw	zero,1300(sp)
 84068dc:	00821074 	movhi	r2,2113
 84068e0:	1086ad04 	addi	r2,r2,6836
 84068e4:	980f883a 	mov	r7,r19
 84068e8:	d8814115 	stw	r2,1284(sp)
 84068ec:	003a7806 	br	84052d0 <___vfprintf_internal_r+0x3bc>
 84068f0:	00bfffc4 	movi	r2,-1
 84068f4:	9880e226 	beq	r19,r2,8406c80 <___vfprintf_internal_r+0x1d6c>
 84068f8:	d9414d17 	ldw	r5,1332(sp)
 84068fc:	008019c4 	movi	r2,103
 8406900:	2880dc26 	beq	r5,r2,8406c74 <___vfprintf_internal_r+0x1d60>
 8406904:	008011c4 	movi	r2,71
 8406908:	2880da26 	beq	r5,r2,8406c74 <___vfprintf_internal_r+0x1d60>
 840690c:	d9414c17 	ldw	r5,1328(sp)
 8406910:	d9014317 	ldw	r4,1292(sp)
 8406914:	d9814217 	ldw	r6,1288(sp)
 8406918:	29404014 	ori	r5,r5,256
 840691c:	d9414c15 	stw	r5,1328(sp)
 8406920:	2000cc16 	blt	r4,zero,8406c54 <___vfprintf_internal_r+0x1d40>
 8406924:	3021883a 	mov	r16,r6
 8406928:	2023883a 	mov	r17,r4
 840692c:	0039883a 	mov	fp,zero
 8406930:	d9414d17 	ldw	r5,1332(sp)
 8406934:	00801984 	movi	r2,102
 8406938:	2880b726 	beq	r5,r2,8406c18 <___vfprintf_internal_r+0x1d04>
 840693c:	00801184 	movi	r2,70
 8406940:	2880b526 	beq	r5,r2,8406c18 <___vfprintf_internal_r+0x1d04>
 8406944:	00801944 	movi	r2,101
 8406948:	2880c826 	beq	r5,r2,8406c6c <___vfprintf_internal_r+0x1d58>
 840694c:	00801144 	movi	r2,69
 8406950:	2880c626 	beq	r5,r2,8406c6c <___vfprintf_internal_r+0x1d58>
 8406954:	9829883a 	mov	r20,r19
 8406958:	d9014f17 	ldw	r4,1340(sp)
 840695c:	d8800504 	addi	r2,sp,20
 8406960:	880d883a 	mov	r6,r17
 8406964:	d8800115 	stw	r2,4(sp)
 8406968:	d8c00604 	addi	r3,sp,24
 840696c:	d8800704 	addi	r2,sp,28
 8406970:	800b883a 	mov	r5,r16
 8406974:	01c00084 	movi	r7,2
 8406978:	d8c00215 	stw	r3,8(sp)
 840697c:	d8800315 	stw	r2,12(sp)
 8406980:	dd000015 	stw	r20,0(sp)
 8406984:	84071380 	call	8407138 <_dtoa_r>
 8406988:	d9814d17 	ldw	r6,1332(sp)
 840698c:	d8814115 	stw	r2,1284(sp)
 8406990:	008019c4 	movi	r2,103
 8406994:	30809526 	beq	r6,r2,8406bec <___vfprintf_internal_r+0x1cd8>
 8406998:	d8c14d17 	ldw	r3,1332(sp)
 840699c:	008011c4 	movi	r2,71
 84069a0:	18809226 	beq	r3,r2,8406bec <___vfprintf_internal_r+0x1cd8>
 84069a4:	d9414117 	ldw	r5,1284(sp)
 84069a8:	d9814d17 	ldw	r6,1332(sp)
 84069ac:	00801984 	movi	r2,102
 84069b0:	2d25883a 	add	r18,r5,r20
 84069b4:	30808626 	beq	r6,r2,8406bd0 <___vfprintf_internal_r+0x1cbc>
 84069b8:	00801184 	movi	r2,70
 84069bc:	30808426 	beq	r6,r2,8406bd0 <___vfprintf_internal_r+0x1cbc>
 84069c0:	000d883a 	mov	r6,zero
 84069c4:	000f883a 	mov	r7,zero
 84069c8:	880b883a 	mov	r5,r17
 84069cc:	8009883a 	mov	r4,r16
 84069d0:	8403e4c0 	call	8403e4c <__eqdf2>
 84069d4:	1000751e 	bne	r2,zero,8406bac <___vfprintf_internal_r+0x1c98>
 84069d8:	9005883a 	mov	r2,r18
 84069dc:	dc800715 	stw	r18,28(sp)
 84069e0:	d9014117 	ldw	r4,1284(sp)
 84069e4:	d9414d17 	ldw	r5,1332(sp)
 84069e8:	00c019c4 	movi	r3,103
 84069ec:	1125c83a 	sub	r18,r2,r4
 84069f0:	28c06826 	beq	r5,r3,8406b94 <___vfprintf_internal_r+0x1c80>
 84069f4:	008011c4 	movi	r2,71
 84069f8:	28806626 	beq	r5,r2,8406b94 <___vfprintf_internal_r+0x1c80>
 84069fc:	d9000517 	ldw	r4,20(sp)
 8406a00:	d8c14d17 	ldw	r3,1332(sp)
 8406a04:	00801944 	movi	r2,101
 8406a08:	10c05516 	blt	r2,r3,8406b60 <___vfprintf_internal_r+0x1c4c>
 8406a0c:	213fffc4 	addi	r4,r4,-1
 8406a10:	d9000515 	stw	r4,20(sp)
 8406a14:	d8c00805 	stb	r3,32(sp)
 8406a18:	2021883a 	mov	r16,r4
 8406a1c:	2000c116 	blt	r4,zero,8406d24 <___vfprintf_internal_r+0x1e10>
 8406a20:	00800ac4 	movi	r2,43
 8406a24:	d8800845 	stb	r2,33(sp)
 8406a28:	00800244 	movi	r2,9
 8406a2c:	1400af0e 	bge	r2,r16,8406cec <___vfprintf_internal_r+0x1dd8>
 8406a30:	1027883a 	mov	r19,r2
 8406a34:	dc400b84 	addi	r17,sp,46
 8406a38:	8009883a 	mov	r4,r16
 8406a3c:	01400284 	movi	r5,10
 8406a40:	84043740 	call	8404374 <__modsi3>
 8406a44:	10800c04 	addi	r2,r2,48
 8406a48:	8c7fffc4 	addi	r17,r17,-1
 8406a4c:	8009883a 	mov	r4,r16
 8406a50:	01400284 	movi	r5,10
 8406a54:	88800005 	stb	r2,0(r17)
 8406a58:	84043140 	call	8404314 <__divsi3>
 8406a5c:	1021883a 	mov	r16,r2
 8406a60:	98bff516 	blt	r19,r2,8406a38 <___vfprintf_internal_r+0x1b24>
 8406a64:	10c00c04 	addi	r3,r2,48
 8406a68:	d88009c4 	addi	r2,sp,39
 8406a6c:	108001c4 	addi	r2,r2,7
 8406a70:	897fffc4 	addi	r5,r17,-1
 8406a74:	88ffffc5 	stb	r3,-1(r17)
 8406a78:	2880a72e 	bgeu	r5,r2,8406d18 <___vfprintf_internal_r+0x1e04>
 8406a7c:	1009883a 	mov	r4,r2
 8406a80:	d9800804 	addi	r6,sp,32
 8406a84:	d8c00884 	addi	r3,sp,34
 8406a88:	28800003 	ldbu	r2,0(r5)
 8406a8c:	29400044 	addi	r5,r5,1
 8406a90:	18800005 	stb	r2,0(r3)
 8406a94:	18c00044 	addi	r3,r3,1
 8406a98:	293ffb36 	bltu	r5,r4,8406a88 <___vfprintf_internal_r+0x1b74>
 8406a9c:	1987c83a 	sub	r3,r3,r6
 8406aa0:	00800044 	movi	r2,1
 8406aa4:	d8c14815 	stw	r3,1312(sp)
 8406aa8:	90cf883a 	add	r7,r18,r3
 8406aac:	1480960e 	bge	r2,r18,8406d08 <___vfprintf_internal_r+0x1df4>
 8406ab0:	39c00044 	addi	r7,r7,1
 8406ab4:	d9c14515 	stw	r7,1300(sp)
 8406ab8:	38003416 	blt	r7,zero,8406b8c <___vfprintf_internal_r+0x1c78>
 8406abc:	e0803fcc 	andi	r2,fp,255
 8406ac0:	1080201c 	xori	r2,r2,128
 8406ac4:	10bfe004 	addi	r2,r2,-128
 8406ac8:	10004e26 	beq	r2,zero,8406c04 <___vfprintf_internal_r+0x1cf0>
 8406acc:	00800b44 	movi	r2,45
 8406ad0:	dc814715 	stw	r18,1308(sp)
 8406ad4:	d8014615 	stw	zero,1304(sp)
 8406ad8:	d8800405 	stb	r2,16(sp)
 8406adc:	003bb106 	br	84059a4 <___vfprintf_internal_r+0xa90>
 8406ae0:	00800b44 	movi	r2,45
 8406ae4:	d8800405 	stb	r2,16(sp)
 8406ae8:	003d3306 	br	8405fb8 <___vfprintf_internal_r+0x10a4>
 8406aec:	d9014f17 	ldw	r4,1340(sp)
 8406af0:	b00b883a 	mov	r5,r22
 8406af4:	d9800c04 	addi	r6,sp,48
 8406af8:	8404ebc0 	call	8404ebc <__sprint_r>
 8406afc:	103abd1e 	bne	r2,zero,84055f4 <___vfprintf_internal_r+0x6e0>
 8406b00:	003abb06 	br	84055f0 <___vfprintf_internal_r+0x6dc>
 8406b04:	38800017 	ldw	r2,0(r7)
 8406b08:	39c00104 	addi	r7,r7,4
 8406b0c:	d9c14015 	stw	r7,1280(sp)
 8406b10:	d9414b17 	ldw	r5,1324(sp)
 8406b14:	d9c14017 	ldw	r7,1280(sp)
 8406b18:	11400015 	stw	r5,0(r2)
 8406b1c:	00395906 	br	8405084 <___vfprintf_internal_r+0x170>
 8406b20:	980f883a 	mov	r7,r19
 8406b24:	dcc14515 	stw	r19,1300(sp)
 8406b28:	d8014615 	stw	zero,1304(sp)
 8406b2c:	003b9b06 	br	840599c <___vfprintf_internal_r+0xa88>
 8406b30:	0027883a 	mov	r19,zero
 8406b34:	00397806 	br	8405118 <___vfprintf_internal_r+0x204>
 8406b38:	00c21074 	movhi	r3,2113
 8406b3c:	18c6ad04 	addi	r3,r3,6836
 8406b40:	100f883a 	mov	r7,r2
 8406b44:	d8814515 	stw	r2,1300(sp)
 8406b48:	d8c14115 	stw	r3,1284(sp)
 8406b4c:	0039e006 	br	84052d0 <___vfprintf_internal_r+0x3bc>
 8406b50:	00821074 	movhi	r2,2113
 8406b54:	1086ac04 	addi	r2,r2,6832
 8406b58:	d8814115 	stw	r2,1284(sp)
 8406b5c:	003d1c06 	br	8405fd0 <___vfprintf_internal_r+0x10bc>
 8406b60:	d9414d17 	ldw	r5,1332(sp)
 8406b64:	00801984 	movi	r2,102
 8406b68:	28804926 	beq	r5,r2,8406c90 <___vfprintf_internal_r+0x1d7c>
 8406b6c:	200f883a 	mov	r7,r4
 8406b70:	24805716 	blt	r4,r18,8406cd0 <___vfprintf_internal_r+0x1dbc>
 8406b74:	d9414c17 	ldw	r5,1328(sp)
 8406b78:	2880004c 	andi	r2,r5,1
 8406b7c:	10000126 	beq	r2,zero,8406b84 <___vfprintf_internal_r+0x1c70>
 8406b80:	21c00044 	addi	r7,r4,1
 8406b84:	d9c14515 	stw	r7,1300(sp)
 8406b88:	383fcc0e 	bge	r7,zero,8406abc <___vfprintf_internal_r+0x1ba8>
 8406b8c:	d8014515 	stw	zero,1300(sp)
 8406b90:	003fca06 	br	8406abc <___vfprintf_internal_r+0x1ba8>
 8406b94:	d9000517 	ldw	r4,20(sp)
 8406b98:	00bfff04 	movi	r2,-4
 8406b9c:	1100480e 	bge	r2,r4,8406cc0 <___vfprintf_internal_r+0x1dac>
 8406ba0:	99004716 	blt	r19,r4,8406cc0 <___vfprintf_internal_r+0x1dac>
 8406ba4:	d8c14d15 	stw	r3,1332(sp)
 8406ba8:	003ff006 	br	8406b6c <___vfprintf_internal_r+0x1c58>
 8406bac:	d8800717 	ldw	r2,28(sp)
 8406bb0:	14bf8b2e 	bgeu	r2,r18,84069e0 <___vfprintf_internal_r+0x1acc>
 8406bb4:	9007883a 	mov	r3,r18
 8406bb8:	01000c04 	movi	r4,48
 8406bbc:	11000005 	stb	r4,0(r2)
 8406bc0:	10800044 	addi	r2,r2,1
 8406bc4:	d8800715 	stw	r2,28(sp)
 8406bc8:	18bffc1e 	bne	r3,r2,8406bbc <___vfprintf_internal_r+0x1ca8>
 8406bcc:	003f8406 	br	84069e0 <___vfprintf_internal_r+0x1acc>
 8406bd0:	d8814117 	ldw	r2,1284(sp)
 8406bd4:	10c00007 	ldb	r3,0(r2)
 8406bd8:	00800c04 	movi	r2,48
 8406bdc:	18805b26 	beq	r3,r2,8406d4c <___vfprintf_internal_r+0x1e38>
 8406be0:	d9000517 	ldw	r4,20(sp)
 8406be4:	9125883a 	add	r18,r18,r4
 8406be8:	003f7506 	br	84069c0 <___vfprintf_internal_r+0x1aac>
 8406bec:	d9014c17 	ldw	r4,1328(sp)
 8406bf0:	2080004c 	andi	r2,r4,1
 8406bf4:	1005003a 	cmpeq	r2,r2,zero
 8406bf8:	103f6a26 	beq	r2,zero,84069a4 <___vfprintf_internal_r+0x1a90>
 8406bfc:	d8800717 	ldw	r2,28(sp)
 8406c00:	003f7706 	br	84069e0 <___vfprintf_internal_r+0x1acc>
 8406c04:	d9c14515 	stw	r7,1300(sp)
 8406c08:	38004d16 	blt	r7,zero,8406d40 <___vfprintf_internal_r+0x1e2c>
 8406c0c:	dc814715 	stw	r18,1308(sp)
 8406c10:	d8014615 	stw	zero,1304(sp)
 8406c14:	003b6106 	br	840599c <___vfprintf_internal_r+0xa88>
 8406c18:	d9014f17 	ldw	r4,1340(sp)
 8406c1c:	d8800504 	addi	r2,sp,20
 8406c20:	d8800115 	stw	r2,4(sp)
 8406c24:	d8c00604 	addi	r3,sp,24
 8406c28:	d8800704 	addi	r2,sp,28
 8406c2c:	800b883a 	mov	r5,r16
 8406c30:	880d883a 	mov	r6,r17
 8406c34:	01c000c4 	movi	r7,3
 8406c38:	d8c00215 	stw	r3,8(sp)
 8406c3c:	d8800315 	stw	r2,12(sp)
 8406c40:	dcc00015 	stw	r19,0(sp)
 8406c44:	9829883a 	mov	r20,r19
 8406c48:	84071380 	call	8407138 <_dtoa_r>
 8406c4c:	d8814115 	stw	r2,1284(sp)
 8406c50:	003f5106 	br	8406998 <___vfprintf_internal_r+0x1a84>
 8406c54:	d8c14217 	ldw	r3,1288(sp)
 8406c58:	d9014317 	ldw	r4,1292(sp)
 8406c5c:	07000b44 	movi	fp,45
 8406c60:	1821883a 	mov	r16,r3
 8406c64:	2460003c 	xorhi	r17,r4,32768
 8406c68:	003f3106 	br	8406930 <___vfprintf_internal_r+0x1a1c>
 8406c6c:	9d000044 	addi	r20,r19,1
 8406c70:	003f3906 	br	8406958 <___vfprintf_internal_r+0x1a44>
 8406c74:	983f251e 	bne	r19,zero,840690c <___vfprintf_internal_r+0x19f8>
 8406c78:	04c00044 	movi	r19,1
 8406c7c:	003f2306 	br	840690c <___vfprintf_internal_r+0x19f8>
 8406c80:	04c00184 	movi	r19,6
 8406c84:	003f2106 	br	840690c <___vfprintf_internal_r+0x19f8>
 8406c88:	d8014515 	stw	zero,1300(sp)
 8406c8c:	003eee06 	br	8406848 <___vfprintf_internal_r+0x1934>
 8406c90:	200f883a 	mov	r7,r4
 8406c94:	0100370e 	bge	zero,r4,8406d74 <___vfprintf_internal_r+0x1e60>
 8406c98:	9800031e 	bne	r19,zero,8406ca8 <___vfprintf_internal_r+0x1d94>
 8406c9c:	d9814c17 	ldw	r6,1328(sp)
 8406ca0:	3080004c 	andi	r2,r6,1
 8406ca4:	103fb726 	beq	r2,zero,8406b84 <___vfprintf_internal_r+0x1c70>
 8406ca8:	20800044 	addi	r2,r4,1
 8406cac:	98a7883a 	add	r19,r19,r2
 8406cb0:	dcc14515 	stw	r19,1300(sp)
 8406cb4:	980f883a 	mov	r7,r19
 8406cb8:	983f800e 	bge	r19,zero,8406abc <___vfprintf_internal_r+0x1ba8>
 8406cbc:	003fb306 	br	8406b8c <___vfprintf_internal_r+0x1c78>
 8406cc0:	d9814d17 	ldw	r6,1332(sp)
 8406cc4:	31bfff84 	addi	r6,r6,-2
 8406cc8:	d9814d15 	stw	r6,1332(sp)
 8406ccc:	003f4c06 	br	8406a00 <___vfprintf_internal_r+0x1aec>
 8406cd0:	0100180e 	bge	zero,r4,8406d34 <___vfprintf_internal_r+0x1e20>
 8406cd4:	00800044 	movi	r2,1
 8406cd8:	1485883a 	add	r2,r2,r18
 8406cdc:	d8814515 	stw	r2,1300(sp)
 8406ce0:	100f883a 	mov	r7,r2
 8406ce4:	103f750e 	bge	r2,zero,8406abc <___vfprintf_internal_r+0x1ba8>
 8406ce8:	003fa806 	br	8406b8c <___vfprintf_internal_r+0x1c78>
 8406cec:	80c00c04 	addi	r3,r16,48
 8406cf0:	00800c04 	movi	r2,48
 8406cf4:	d8c008c5 	stb	r3,35(sp)
 8406cf8:	d9800804 	addi	r6,sp,32
 8406cfc:	d8c00904 	addi	r3,sp,36
 8406d00:	d8800885 	stb	r2,34(sp)
 8406d04:	003f6506 	br	8406a9c <___vfprintf_internal_r+0x1b88>
 8406d08:	d9014c17 	ldw	r4,1328(sp)
 8406d0c:	2084703a 	and	r2,r4,r2
 8406d10:	103f9c26 	beq	r2,zero,8406b84 <___vfprintf_internal_r+0x1c70>
 8406d14:	003f6606 	br	8406ab0 <___vfprintf_internal_r+0x1b9c>
 8406d18:	d9800804 	addi	r6,sp,32
 8406d1c:	d8c00884 	addi	r3,sp,34
 8406d20:	003f5e06 	br	8406a9c <___vfprintf_internal_r+0x1b88>
 8406d24:	00800b44 	movi	r2,45
 8406d28:	0121c83a 	sub	r16,zero,r4
 8406d2c:	d8800845 	stb	r2,33(sp)
 8406d30:	003f3d06 	br	8406a28 <___vfprintf_internal_r+0x1b14>
 8406d34:	00800084 	movi	r2,2
 8406d38:	1105c83a 	sub	r2,r2,r4
 8406d3c:	003fe606 	br	8406cd8 <___vfprintf_internal_r+0x1dc4>
 8406d40:	d8014515 	stw	zero,1300(sp)
 8406d44:	dc814715 	stw	r18,1308(sp)
 8406d48:	003fb106 	br	8406c10 <___vfprintf_internal_r+0x1cfc>
 8406d4c:	000d883a 	mov	r6,zero
 8406d50:	000f883a 	mov	r7,zero
 8406d54:	8009883a 	mov	r4,r16
 8406d58:	880b883a 	mov	r5,r17
 8406d5c:	8403ed40 	call	8403ed4 <__nedf2>
 8406d60:	103f9f26 	beq	r2,zero,8406be0 <___vfprintf_internal_r+0x1ccc>
 8406d64:	00800044 	movi	r2,1
 8406d68:	1509c83a 	sub	r4,r2,r20
 8406d6c:	d9000515 	stw	r4,20(sp)
 8406d70:	003f9b06 	br	8406be0 <___vfprintf_internal_r+0x1ccc>
 8406d74:	98000d1e 	bne	r19,zero,8406dac <___vfprintf_internal_r+0x1e98>
 8406d78:	d8c14c17 	ldw	r3,1328(sp)
 8406d7c:	1880004c 	andi	r2,r3,1
 8406d80:	10000a1e 	bne	r2,zero,8406dac <___vfprintf_internal_r+0x1e98>
 8406d84:	01000044 	movi	r4,1
 8406d88:	200f883a 	mov	r7,r4
 8406d8c:	d9014515 	stw	r4,1300(sp)
 8406d90:	003f4a06 	br	8406abc <___vfprintf_internal_r+0x1ba8>
 8406d94:	3cc00017 	ldw	r19,0(r7)
 8406d98:	39c00104 	addi	r7,r7,4
 8406d9c:	983d0e0e 	bge	r19,zero,84061d8 <___vfprintf_internal_r+0x12c4>
 8406da0:	b8c00007 	ldb	r3,0(r23)
 8406da4:	04ffffc4 	movi	r19,-1
 8406da8:	0038d906 	br	8405110 <___vfprintf_internal_r+0x1fc>
 8406dac:	9cc00084 	addi	r19,r19,2
 8406db0:	dcc14515 	stw	r19,1300(sp)
 8406db4:	980f883a 	mov	r7,r19
 8406db8:	983f400e 	bge	r19,zero,8406abc <___vfprintf_internal_r+0x1ba8>
 8406dbc:	003f7306 	br	8406b8c <___vfprintf_internal_r+0x1c78>

08406dc0 <__vfprintf_internal>:
 8406dc0:	00821074 	movhi	r2,2113
 8406dc4:	108e5204 	addi	r2,r2,14664
 8406dc8:	2013883a 	mov	r9,r4
 8406dcc:	11000017 	ldw	r4,0(r2)
 8406dd0:	2805883a 	mov	r2,r5
 8406dd4:	300f883a 	mov	r7,r6
 8406dd8:	480b883a 	mov	r5,r9
 8406ddc:	100d883a 	mov	r6,r2
 8406de0:	8404f141 	jmpi	8404f14 <___vfprintf_internal_r>

08406de4 <__swsetup_r>:
 8406de4:	00821074 	movhi	r2,2113
 8406de8:	108e5204 	addi	r2,r2,14664
 8406dec:	10c00017 	ldw	r3,0(r2)
 8406df0:	defffd04 	addi	sp,sp,-12
 8406df4:	dc400115 	stw	r17,4(sp)
 8406df8:	dc000015 	stw	r16,0(sp)
 8406dfc:	dfc00215 	stw	ra,8(sp)
 8406e00:	2023883a 	mov	r17,r4
 8406e04:	2821883a 	mov	r16,r5
 8406e08:	18000226 	beq	r3,zero,8406e14 <__swsetup_r+0x30>
 8406e0c:	18800e17 	ldw	r2,56(r3)
 8406e10:	10001f26 	beq	r2,zero,8406e90 <__swsetup_r+0xac>
 8406e14:	8100030b 	ldhu	r4,12(r16)
 8406e18:	2080020c 	andi	r2,r4,8
 8406e1c:	10002826 	beq	r2,zero,8406ec0 <__swsetup_r+0xdc>
 8406e20:	81400417 	ldw	r5,16(r16)
 8406e24:	28001d26 	beq	r5,zero,8406e9c <__swsetup_r+0xb8>
 8406e28:	2080004c 	andi	r2,r4,1
 8406e2c:	1005003a 	cmpeq	r2,r2,zero
 8406e30:	10000b26 	beq	r2,zero,8406e60 <__swsetup_r+0x7c>
 8406e34:	2080008c 	andi	r2,r4,2
 8406e38:	10001226 	beq	r2,zero,8406e84 <__swsetup_r+0xa0>
 8406e3c:	0005883a 	mov	r2,zero
 8406e40:	80800215 	stw	r2,8(r16)
 8406e44:	28000b26 	beq	r5,zero,8406e74 <__swsetup_r+0x90>
 8406e48:	0005883a 	mov	r2,zero
 8406e4c:	dfc00217 	ldw	ra,8(sp)
 8406e50:	dc400117 	ldw	r17,4(sp)
 8406e54:	dc000017 	ldw	r16,0(sp)
 8406e58:	dec00304 	addi	sp,sp,12
 8406e5c:	f800283a 	ret
 8406e60:	80800517 	ldw	r2,20(r16)
 8406e64:	80000215 	stw	zero,8(r16)
 8406e68:	0085c83a 	sub	r2,zero,r2
 8406e6c:	80800615 	stw	r2,24(r16)
 8406e70:	283ff51e 	bne	r5,zero,8406e48 <__swsetup_r+0x64>
 8406e74:	2080200c 	andi	r2,r4,128
 8406e78:	103ff326 	beq	r2,zero,8406e48 <__swsetup_r+0x64>
 8406e7c:	00bfffc4 	movi	r2,-1
 8406e80:	003ff206 	br	8406e4c <__swsetup_r+0x68>
 8406e84:	80800517 	ldw	r2,20(r16)
 8406e88:	80800215 	stw	r2,8(r16)
 8406e8c:	003fed06 	br	8406e44 <__swsetup_r+0x60>
 8406e90:	1809883a 	mov	r4,r3
 8406e94:	84089840 	call	8408984 <__sinit>
 8406e98:	003fde06 	br	8406e14 <__swsetup_r+0x30>
 8406e9c:	20c0a00c 	andi	r3,r4,640
 8406ea0:	00808004 	movi	r2,512
 8406ea4:	18bfe026 	beq	r3,r2,8406e28 <__swsetup_r+0x44>
 8406ea8:	8809883a 	mov	r4,r17
 8406eac:	800b883a 	mov	r5,r16
 8406eb0:	84096fc0 	call	84096fc <__smakebuf_r>
 8406eb4:	8100030b 	ldhu	r4,12(r16)
 8406eb8:	81400417 	ldw	r5,16(r16)
 8406ebc:	003fda06 	br	8406e28 <__swsetup_r+0x44>
 8406ec0:	2080040c 	andi	r2,r4,16
 8406ec4:	103fed26 	beq	r2,zero,8406e7c <__swsetup_r+0x98>
 8406ec8:	2080010c 	andi	r2,r4,4
 8406ecc:	10001226 	beq	r2,zero,8406f18 <__swsetup_r+0x134>
 8406ed0:	81400c17 	ldw	r5,48(r16)
 8406ed4:	28000526 	beq	r5,zero,8406eec <__swsetup_r+0x108>
 8406ed8:	80801004 	addi	r2,r16,64
 8406edc:	28800226 	beq	r5,r2,8406ee8 <__swsetup_r+0x104>
 8406ee0:	8809883a 	mov	r4,r17
 8406ee4:	8408d080 	call	8408d08 <_free_r>
 8406ee8:	80000c15 	stw	zero,48(r16)
 8406eec:	8080030b 	ldhu	r2,12(r16)
 8406ef0:	81400417 	ldw	r5,16(r16)
 8406ef4:	80000115 	stw	zero,4(r16)
 8406ef8:	10bff6cc 	andi	r2,r2,65499
 8406efc:	8080030d 	sth	r2,12(r16)
 8406f00:	81400015 	stw	r5,0(r16)
 8406f04:	8080030b 	ldhu	r2,12(r16)
 8406f08:	10800214 	ori	r2,r2,8
 8406f0c:	113fffcc 	andi	r4,r2,65535
 8406f10:	8080030d 	sth	r2,12(r16)
 8406f14:	003fc306 	br	8406e24 <__swsetup_r+0x40>
 8406f18:	81400417 	ldw	r5,16(r16)
 8406f1c:	003ff906 	br	8406f04 <__swsetup_r+0x120>

08406f20 <quorem>:
 8406f20:	28c00417 	ldw	r3,16(r5)
 8406f24:	20800417 	ldw	r2,16(r4)
 8406f28:	defff604 	addi	sp,sp,-40
 8406f2c:	ddc00715 	stw	r23,28(sp)
 8406f30:	dd400515 	stw	r21,20(sp)
 8406f34:	dfc00915 	stw	ra,36(sp)
 8406f38:	df000815 	stw	fp,32(sp)
 8406f3c:	dd800615 	stw	r22,24(sp)
 8406f40:	dd000415 	stw	r20,16(sp)
 8406f44:	dcc00315 	stw	r19,12(sp)
 8406f48:	dc800215 	stw	r18,8(sp)
 8406f4c:	dc400115 	stw	r17,4(sp)
 8406f50:	dc000015 	stw	r16,0(sp)
 8406f54:	202f883a 	mov	r23,r4
 8406f58:	282b883a 	mov	r21,r5
 8406f5c:	10c07416 	blt	r2,r3,8407130 <quorem+0x210>
 8406f60:	1c7fffc4 	addi	r17,r3,-1
 8406f64:	8c45883a 	add	r2,r17,r17
 8406f68:	1085883a 	add	r2,r2,r2
 8406f6c:	2c000504 	addi	r16,r5,20
 8406f70:	24c00504 	addi	r19,r4,20
 8406f74:	14ed883a 	add	r22,r2,r19
 8406f78:	80a5883a 	add	r18,r16,r2
 8406f7c:	b7000017 	ldw	fp,0(r22)
 8406f80:	91400017 	ldw	r5,0(r18)
 8406f84:	e009883a 	mov	r4,fp
 8406f88:	29400044 	addi	r5,r5,1
 8406f8c:	84043d40 	call	84043d4 <__udivsi3>
 8406f90:	1029883a 	mov	r20,r2
 8406f94:	10003c1e 	bne	r2,zero,8407088 <quorem+0x168>
 8406f98:	a80b883a 	mov	r5,r21
 8406f9c:	b809883a 	mov	r4,r23
 8406fa0:	840a4280 	call	840a428 <__mcmp>
 8406fa4:	10002b16 	blt	r2,zero,8407054 <quorem+0x134>
 8406fa8:	a5000044 	addi	r20,r20,1
 8406fac:	980f883a 	mov	r7,r19
 8406fb0:	0011883a 	mov	r8,zero
 8406fb4:	0009883a 	mov	r4,zero
 8406fb8:	81400017 	ldw	r5,0(r16)
 8406fbc:	38c00017 	ldw	r3,0(r7)
 8406fc0:	84000104 	addi	r16,r16,4
 8406fc4:	28bfffcc 	andi	r2,r5,65535
 8406fc8:	2085883a 	add	r2,r4,r2
 8406fcc:	11bfffcc 	andi	r6,r2,65535
 8406fd0:	193fffcc 	andi	r4,r3,65535
 8406fd4:	1004d43a 	srli	r2,r2,16
 8406fd8:	280ad43a 	srli	r5,r5,16
 8406fdc:	2189c83a 	sub	r4,r4,r6
 8406fe0:	2209883a 	add	r4,r4,r8
 8406fe4:	1806d43a 	srli	r3,r3,16
 8406fe8:	288b883a 	add	r5,r5,r2
 8406fec:	200dd43a 	srai	r6,r4,16
 8406ff0:	28bfffcc 	andi	r2,r5,65535
 8406ff4:	1887c83a 	sub	r3,r3,r2
 8406ff8:	1987883a 	add	r3,r3,r6
 8406ffc:	3900000d 	sth	r4,0(r7)
 8407000:	38c0008d 	sth	r3,2(r7)
 8407004:	2808d43a 	srli	r4,r5,16
 8407008:	39c00104 	addi	r7,r7,4
 840700c:	1811d43a 	srai	r8,r3,16
 8407010:	943fe92e 	bgeu	r18,r16,8406fb8 <quorem+0x98>
 8407014:	8c45883a 	add	r2,r17,r17
 8407018:	1085883a 	add	r2,r2,r2
 840701c:	9885883a 	add	r2,r19,r2
 8407020:	10c00017 	ldw	r3,0(r2)
 8407024:	18000b1e 	bne	r3,zero,8407054 <quorem+0x134>
 8407028:	113fff04 	addi	r4,r2,-4
 840702c:	9900082e 	bgeu	r19,r4,8407050 <quorem+0x130>
 8407030:	10bfff17 	ldw	r2,-4(r2)
 8407034:	10000326 	beq	r2,zero,8407044 <quorem+0x124>
 8407038:	00000506 	br	8407050 <quorem+0x130>
 840703c:	20800017 	ldw	r2,0(r4)
 8407040:	1000031e 	bne	r2,zero,8407050 <quorem+0x130>
 8407044:	213fff04 	addi	r4,r4,-4
 8407048:	8c7fffc4 	addi	r17,r17,-1
 840704c:	993ffb36 	bltu	r19,r4,840703c <quorem+0x11c>
 8407050:	bc400415 	stw	r17,16(r23)
 8407054:	a005883a 	mov	r2,r20
 8407058:	dfc00917 	ldw	ra,36(sp)
 840705c:	df000817 	ldw	fp,32(sp)
 8407060:	ddc00717 	ldw	r23,28(sp)
 8407064:	dd800617 	ldw	r22,24(sp)
 8407068:	dd400517 	ldw	r21,20(sp)
 840706c:	dd000417 	ldw	r20,16(sp)
 8407070:	dcc00317 	ldw	r19,12(sp)
 8407074:	dc800217 	ldw	r18,8(sp)
 8407078:	dc400117 	ldw	r17,4(sp)
 840707c:	dc000017 	ldw	r16,0(sp)
 8407080:	dec00a04 	addi	sp,sp,40
 8407084:	f800283a 	ret
 8407088:	980f883a 	mov	r7,r19
 840708c:	8011883a 	mov	r8,r16
 8407090:	0013883a 	mov	r9,zero
 8407094:	000d883a 	mov	r6,zero
 8407098:	40c00017 	ldw	r3,0(r8)
 840709c:	39000017 	ldw	r4,0(r7)
 84070a0:	42000104 	addi	r8,r8,4
 84070a4:	18bfffcc 	andi	r2,r3,65535
 84070a8:	a085383a 	mul	r2,r20,r2
 84070ac:	1806d43a 	srli	r3,r3,16
 84070b0:	217fffcc 	andi	r5,r4,65535
 84070b4:	3085883a 	add	r2,r6,r2
 84070b8:	11bfffcc 	andi	r6,r2,65535
 84070bc:	a0c7383a 	mul	r3,r20,r3
 84070c0:	1004d43a 	srli	r2,r2,16
 84070c4:	298bc83a 	sub	r5,r5,r6
 84070c8:	2a4b883a 	add	r5,r5,r9
 84070cc:	2008d43a 	srli	r4,r4,16
 84070d0:	1887883a 	add	r3,r3,r2
 84070d4:	280dd43a 	srai	r6,r5,16
 84070d8:	18bfffcc 	andi	r2,r3,65535
 84070dc:	2089c83a 	sub	r4,r4,r2
 84070e0:	2189883a 	add	r4,r4,r6
 84070e4:	3900008d 	sth	r4,2(r7)
 84070e8:	3940000d 	sth	r5,0(r7)
 84070ec:	180cd43a 	srli	r6,r3,16
 84070f0:	39c00104 	addi	r7,r7,4
 84070f4:	2013d43a 	srai	r9,r4,16
 84070f8:	923fe72e 	bgeu	r18,r8,8407098 <quorem+0x178>
 84070fc:	e03fa61e 	bne	fp,zero,8406f98 <quorem+0x78>
 8407100:	b0ffff04 	addi	r3,r22,-4
 8407104:	98c0082e 	bgeu	r19,r3,8407128 <quorem+0x208>
 8407108:	b0bfff17 	ldw	r2,-4(r22)
 840710c:	10000326 	beq	r2,zero,840711c <quorem+0x1fc>
 8407110:	00000506 	br	8407128 <quorem+0x208>
 8407114:	18800017 	ldw	r2,0(r3)
 8407118:	1000031e 	bne	r2,zero,8407128 <quorem+0x208>
 840711c:	18ffff04 	addi	r3,r3,-4
 8407120:	8c7fffc4 	addi	r17,r17,-1
 8407124:	98fffb36 	bltu	r19,r3,8407114 <quorem+0x1f4>
 8407128:	bc400415 	stw	r17,16(r23)
 840712c:	003f9a06 	br	8406f98 <quorem+0x78>
 8407130:	0005883a 	mov	r2,zero
 8407134:	003fc806 	br	8407058 <quorem+0x138>

08407138 <_dtoa_r>:
 8407138:	22001017 	ldw	r8,64(r4)
 840713c:	deffda04 	addi	sp,sp,-152
 8407140:	dd402115 	stw	r21,132(sp)
 8407144:	dd002015 	stw	r20,128(sp)
 8407148:	dc801e15 	stw	r18,120(sp)
 840714c:	dc401d15 	stw	r17,116(sp)
 8407150:	dfc02515 	stw	ra,148(sp)
 8407154:	df002415 	stw	fp,144(sp)
 8407158:	ddc02315 	stw	r23,140(sp)
 840715c:	dd802215 	stw	r22,136(sp)
 8407160:	dcc01f15 	stw	r19,124(sp)
 8407164:	dc001c15 	stw	r16,112(sp)
 8407168:	d9001615 	stw	r4,88(sp)
 840716c:	3023883a 	mov	r17,r6
 8407170:	2829883a 	mov	r20,r5
 8407174:	d9c01715 	stw	r7,92(sp)
 8407178:	dc802817 	ldw	r18,160(sp)
 840717c:	302b883a 	mov	r21,r6
 8407180:	40000a26 	beq	r8,zero,84071ac <_dtoa_r+0x74>
 8407184:	20801117 	ldw	r2,68(r4)
 8407188:	400b883a 	mov	r5,r8
 840718c:	40800115 	stw	r2,4(r8)
 8407190:	20c01117 	ldw	r3,68(r4)
 8407194:	00800044 	movi	r2,1
 8407198:	10c4983a 	sll	r2,r2,r3
 840719c:	40800215 	stw	r2,8(r8)
 84071a0:	840a2cc0 	call	840a2cc <_Bfree>
 84071a4:	d8c01617 	ldw	r3,88(sp)
 84071a8:	18001015 	stw	zero,64(r3)
 84071ac:	8800a316 	blt	r17,zero,840743c <_dtoa_r+0x304>
 84071b0:	90000015 	stw	zero,0(r18)
 84071b4:	a8dffc2c 	andhi	r3,r21,32752
 84071b8:	009ffc34 	movhi	r2,32752
 84071bc:	18809126 	beq	r3,r2,8407404 <_dtoa_r+0x2cc>
 84071c0:	000d883a 	mov	r6,zero
 84071c4:	000f883a 	mov	r7,zero
 84071c8:	a009883a 	mov	r4,r20
 84071cc:	a80b883a 	mov	r5,r21
 84071d0:	dd001215 	stw	r20,72(sp)
 84071d4:	dd401315 	stw	r21,76(sp)
 84071d8:	8403ed40 	call	8403ed4 <__nedf2>
 84071dc:	1000171e 	bne	r2,zero,840723c <_dtoa_r+0x104>
 84071e0:	d9802717 	ldw	r6,156(sp)
 84071e4:	00800044 	movi	r2,1
 84071e8:	30800015 	stw	r2,0(r6)
 84071ec:	d8802917 	ldw	r2,164(sp)
 84071f0:	10029b26 	beq	r2,zero,8407c60 <_dtoa_r+0xb28>
 84071f4:	d9002917 	ldw	r4,164(sp)
 84071f8:	00821074 	movhi	r2,2113
 84071fc:	1086bb44 	addi	r2,r2,6893
 8407200:	10ffffc4 	addi	r3,r2,-1
 8407204:	20800015 	stw	r2,0(r4)
 8407208:	1805883a 	mov	r2,r3
 840720c:	dfc02517 	ldw	ra,148(sp)
 8407210:	df002417 	ldw	fp,144(sp)
 8407214:	ddc02317 	ldw	r23,140(sp)
 8407218:	dd802217 	ldw	r22,136(sp)
 840721c:	dd402117 	ldw	r21,132(sp)
 8407220:	dd002017 	ldw	r20,128(sp)
 8407224:	dcc01f17 	ldw	r19,124(sp)
 8407228:	dc801e17 	ldw	r18,120(sp)
 840722c:	dc401d17 	ldw	r17,116(sp)
 8407230:	dc001c17 	ldw	r16,112(sp)
 8407234:	dec02604 	addi	sp,sp,152
 8407238:	f800283a 	ret
 840723c:	d9001617 	ldw	r4,88(sp)
 8407240:	d9401217 	ldw	r5,72(sp)
 8407244:	d8800104 	addi	r2,sp,4
 8407248:	a80d883a 	mov	r6,r21
 840724c:	d9c00204 	addi	r7,sp,8
 8407250:	d8800015 	stw	r2,0(sp)
 8407254:	840a9080 	call	840a908 <__d2b>
 8407258:	d8800715 	stw	r2,28(sp)
 840725c:	a804d53a 	srli	r2,r21,20
 8407260:	1101ffcc 	andi	r4,r2,2047
 8407264:	20008626 	beq	r4,zero,8407480 <_dtoa_r+0x348>
 8407268:	d8c01217 	ldw	r3,72(sp)
 840726c:	00800434 	movhi	r2,16
 8407270:	10bfffc4 	addi	r2,r2,-1
 8407274:	ddc00117 	ldw	r23,4(sp)
 8407278:	a884703a 	and	r2,r21,r2
 840727c:	1811883a 	mov	r8,r3
 8407280:	124ffc34 	orhi	r9,r2,16368
 8407284:	25bf0044 	addi	r22,r4,-1023
 8407288:	d8000815 	stw	zero,32(sp)
 840728c:	0005883a 	mov	r2,zero
 8407290:	00cffe34 	movhi	r3,16376
 8407294:	480b883a 	mov	r5,r9
 8407298:	4009883a 	mov	r4,r8
 840729c:	180f883a 	mov	r7,r3
 84072a0:	100d883a 	mov	r6,r2
 84072a4:	840373c0 	call	840373c <__subdf3>
 84072a8:	0218dbf4 	movhi	r8,25455
 84072ac:	4210d844 	addi	r8,r8,17249
 84072b0:	024ff4f4 	movhi	r9,16339
 84072b4:	4a61e9c4 	addi	r9,r9,-30809
 84072b8:	480f883a 	mov	r7,r9
 84072bc:	400d883a 	mov	r6,r8
 84072c0:	180b883a 	mov	r5,r3
 84072c4:	1009883a 	mov	r4,r2
 84072c8:	84038300 	call	8403830 <__muldf3>
 84072cc:	0222d874 	movhi	r8,35681
 84072d0:	42322cc4 	addi	r8,r8,-14157
 84072d4:	024ff1f4 	movhi	r9,16327
 84072d8:	4a628a04 	addi	r9,r9,-30168
 84072dc:	480f883a 	mov	r7,r9
 84072e0:	400d883a 	mov	r6,r8
 84072e4:	180b883a 	mov	r5,r3
 84072e8:	1009883a 	mov	r4,r2
 84072ec:	84037bc0 	call	84037bc <__adddf3>
 84072f0:	b009883a 	mov	r4,r22
 84072f4:	1021883a 	mov	r16,r2
 84072f8:	1823883a 	mov	r17,r3
 84072fc:	84040f40 	call	84040f4 <__floatsidf>
 8407300:	021427f4 	movhi	r8,20639
 8407304:	421e7ec4 	addi	r8,r8,31227
 8407308:	024ff4f4 	movhi	r9,16339
 840730c:	4a5104c4 	addi	r9,r9,17427
 8407310:	480f883a 	mov	r7,r9
 8407314:	400d883a 	mov	r6,r8
 8407318:	180b883a 	mov	r5,r3
 840731c:	1009883a 	mov	r4,r2
 8407320:	84038300 	call	8403830 <__muldf3>
 8407324:	180f883a 	mov	r7,r3
 8407328:	880b883a 	mov	r5,r17
 840732c:	100d883a 	mov	r6,r2
 8407330:	8009883a 	mov	r4,r16
 8407334:	84037bc0 	call	84037bc <__adddf3>
 8407338:	1009883a 	mov	r4,r2
 840733c:	180b883a 	mov	r5,r3
 8407340:	1021883a 	mov	r16,r2
 8407344:	1823883a 	mov	r17,r3
 8407348:	840cc140 	call	840cc14 <__fixdfsi>
 840734c:	000d883a 	mov	r6,zero
 8407350:	000f883a 	mov	r7,zero
 8407354:	8009883a 	mov	r4,r16
 8407358:	880b883a 	mov	r5,r17
 840735c:	d8800d15 	stw	r2,52(sp)
 8407360:	8403fe40 	call	8403fe4 <__ltdf2>
 8407364:	10031716 	blt	r2,zero,8407fc4 <_dtoa_r+0xe8c>
 8407368:	d8c00d17 	ldw	r3,52(sp)
 840736c:	00800584 	movi	r2,22
 8407370:	10c1482e 	bgeu	r2,r3,8407894 <_dtoa_r+0x75c>
 8407374:	01000044 	movi	r4,1
 8407378:	d9000c15 	stw	r4,48(sp)
 840737c:	bd85c83a 	sub	r2,r23,r22
 8407380:	11bfffc4 	addi	r6,r2,-1
 8407384:	30030b16 	blt	r6,zero,8407fb4 <_dtoa_r+0xe7c>
 8407388:	d9800a15 	stw	r6,40(sp)
 840738c:	d8001115 	stw	zero,68(sp)
 8407390:	d8c00d17 	ldw	r3,52(sp)
 8407394:	1802ff16 	blt	r3,zero,8407f94 <_dtoa_r+0xe5c>
 8407398:	d9000a17 	ldw	r4,40(sp)
 840739c:	d8c00915 	stw	r3,36(sp)
 84073a0:	d8001015 	stw	zero,64(sp)
 84073a4:	20c9883a 	add	r4,r4,r3
 84073a8:	d9000a15 	stw	r4,40(sp)
 84073ac:	d9001717 	ldw	r4,92(sp)
 84073b0:	00800244 	movi	r2,9
 84073b4:	11004636 	bltu	r2,r4,84074d0 <_dtoa_r+0x398>
 84073b8:	00800144 	movi	r2,5
 84073bc:	11020416 	blt	r2,r4,8407bd0 <_dtoa_r+0xa98>
 84073c0:	04400044 	movi	r17,1
 84073c4:	d8c01717 	ldw	r3,92(sp)
 84073c8:	00800144 	movi	r2,5
 84073cc:	10c1ed36 	bltu	r2,r3,8407b84 <_dtoa_r+0xa4c>
 84073d0:	18c5883a 	add	r2,r3,r3
 84073d4:	1085883a 	add	r2,r2,r2
 84073d8:	00c21034 	movhi	r3,2112
 84073dc:	18dcfb04 	addi	r3,r3,29676
 84073e0:	10c5883a 	add	r2,r2,r3
 84073e4:	11000017 	ldw	r4,0(r2)
 84073e8:	2000683a 	jmp	r4
 84073ec:	084074d8 	cmpnei	at,at,467
 84073f0:	084074d8 	cmpnei	at,at,467
 84073f4:	08407ed8 	cmpnei	at,at,507
 84073f8:	08407eb0 	cmpltui	at,at,506
 84073fc:	08407ef4 	orhi	at,at,507
 8407400:	08407f00 	call	8407f0 <__alt_mem_onchip_memory2_3+0x8397f0>
 8407404:	d9002717 	ldw	r4,156(sp)
 8407408:	0089c3c4 	movi	r2,9999
 840740c:	20800015 	stw	r2,0(r4)
 8407410:	a0001026 	beq	r20,zero,8407454 <_dtoa_r+0x31c>
 8407414:	00c21074 	movhi	r3,2113
 8407418:	18c6c704 	addi	r3,r3,6940
 840741c:	d9802917 	ldw	r6,164(sp)
 8407420:	303f7926 	beq	r6,zero,8407208 <_dtoa_r+0xd0>
 8407424:	188000c7 	ldb	r2,3(r3)
 8407428:	190000c4 	addi	r4,r3,3
 840742c:	1000101e 	bne	r2,zero,8407470 <_dtoa_r+0x338>
 8407430:	d8802917 	ldw	r2,164(sp)
 8407434:	11000015 	stw	r4,0(r2)
 8407438:	003f7306 	br	8407208 <_dtoa_r+0xd0>
 840743c:	00a00034 	movhi	r2,32768
 8407440:	10bfffc4 	addi	r2,r2,-1
 8407444:	00c00044 	movi	r3,1
 8407448:	88aa703a 	and	r21,r17,r2
 840744c:	90c00015 	stw	r3,0(r18)
 8407450:	003f5806 	br	84071b4 <_dtoa_r+0x7c>
 8407454:	00800434 	movhi	r2,16
 8407458:	10bfffc4 	addi	r2,r2,-1
 840745c:	a884703a 	and	r2,r21,r2
 8407460:	103fec1e 	bne	r2,zero,8407414 <_dtoa_r+0x2dc>
 8407464:	00c21074 	movhi	r3,2113
 8407468:	18c6c404 	addi	r3,r3,6928
 840746c:	003feb06 	br	840741c <_dtoa_r+0x2e4>
 8407470:	d8802917 	ldw	r2,164(sp)
 8407474:	19000204 	addi	r4,r3,8
 8407478:	11000015 	stw	r4,0(r2)
 840747c:	003f6206 	br	8407208 <_dtoa_r+0xd0>
 8407480:	ddc00117 	ldw	r23,4(sp)
 8407484:	d8800217 	ldw	r2,8(sp)
 8407488:	01000804 	movi	r4,32
 840748c:	b8c10c84 	addi	r3,r23,1074
 8407490:	18a3883a 	add	r17,r3,r2
 8407494:	2441b80e 	bge	r4,r17,8407b78 <_dtoa_r+0xa40>
 8407498:	00c01004 	movi	r3,64
 840749c:	1c47c83a 	sub	r3,r3,r17
 84074a0:	88bff804 	addi	r2,r17,-32
 84074a4:	a8c6983a 	sll	r3,r21,r3
 84074a8:	a084d83a 	srl	r2,r20,r2
 84074ac:	1888b03a 	or	r4,r3,r2
 84074b0:	840ccec0 	call	840ccec <__floatunsidf>
 84074b4:	1011883a 	mov	r8,r2
 84074b8:	00bf8434 	movhi	r2,65040
 84074bc:	01000044 	movi	r4,1
 84074c0:	10d3883a 	add	r9,r2,r3
 84074c4:	8dbef344 	addi	r22,r17,-1075
 84074c8:	d9000815 	stw	r4,32(sp)
 84074cc:	003f6f06 	br	840728c <_dtoa_r+0x154>
 84074d0:	d8001715 	stw	zero,92(sp)
 84074d4:	04400044 	movi	r17,1
 84074d8:	00bfffc4 	movi	r2,-1
 84074dc:	00c00044 	movi	r3,1
 84074e0:	d8800e15 	stw	r2,56(sp)
 84074e4:	d8002615 	stw	zero,152(sp)
 84074e8:	d8800f15 	stw	r2,60(sp)
 84074ec:	d8c00b15 	stw	r3,44(sp)
 84074f0:	1021883a 	mov	r16,r2
 84074f4:	d8801617 	ldw	r2,88(sp)
 84074f8:	10001115 	stw	zero,68(r2)
 84074fc:	d8801617 	ldw	r2,88(sp)
 8407500:	11401117 	ldw	r5,68(r2)
 8407504:	1009883a 	mov	r4,r2
 8407508:	840a84c0 	call	840a84c <_Balloc>
 840750c:	d8c01617 	ldw	r3,88(sp)
 8407510:	d8800515 	stw	r2,20(sp)
 8407514:	18801015 	stw	r2,64(r3)
 8407518:	00800384 	movi	r2,14
 840751c:	14006836 	bltu	r2,r16,84076c0 <_dtoa_r+0x588>
 8407520:	8805003a 	cmpeq	r2,r17,zero
 8407524:	1000661e 	bne	r2,zero,84076c0 <_dtoa_r+0x588>
 8407528:	d9000d17 	ldw	r4,52(sp)
 840752c:	0102300e 	bge	zero,r4,8407df0 <_dtoa_r+0xcb8>
 8407530:	208003cc 	andi	r2,r4,15
 8407534:	100490fa 	slli	r2,r2,3
 8407538:	2025d13a 	srai	r18,r4,4
 840753c:	00c21074 	movhi	r3,2113
 8407540:	18c6d804 	addi	r3,r3,7008
 8407544:	10c5883a 	add	r2,r2,r3
 8407548:	90c0040c 	andi	r3,r18,16
 840754c:	14000017 	ldw	r16,0(r2)
 8407550:	14400117 	ldw	r17,4(r2)
 8407554:	18036a1e 	bne	r3,zero,8408300 <_dtoa_r+0x11c8>
 8407558:	05800084 	movi	r22,2
 840755c:	90001026 	beq	r18,zero,84075a0 <_dtoa_r+0x468>
 8407560:	04c21074 	movhi	r19,2113
 8407564:	9cc70a04 	addi	r19,r19,7208
 8407568:	9080004c 	andi	r2,r18,1
 840756c:	1005003a 	cmpeq	r2,r2,zero
 8407570:	1000081e 	bne	r2,zero,8407594 <_dtoa_r+0x45c>
 8407574:	99800017 	ldw	r6,0(r19)
 8407578:	99c00117 	ldw	r7,4(r19)
 840757c:	880b883a 	mov	r5,r17
 8407580:	8009883a 	mov	r4,r16
 8407584:	84038300 	call	8403830 <__muldf3>
 8407588:	1021883a 	mov	r16,r2
 840758c:	b5800044 	addi	r22,r22,1
 8407590:	1823883a 	mov	r17,r3
 8407594:	9025d07a 	srai	r18,r18,1
 8407598:	9cc00204 	addi	r19,r19,8
 840759c:	903ff21e 	bne	r18,zero,8407568 <_dtoa_r+0x430>
 84075a0:	a80b883a 	mov	r5,r21
 84075a4:	a009883a 	mov	r4,r20
 84075a8:	880f883a 	mov	r7,r17
 84075ac:	800d883a 	mov	r6,r16
 84075b0:	8403bf40 	call	8403bf4 <__divdf3>
 84075b4:	1029883a 	mov	r20,r2
 84075b8:	182b883a 	mov	r21,r3
 84075bc:	d8c00c17 	ldw	r3,48(sp)
 84075c0:	1805003a 	cmpeq	r2,r3,zero
 84075c4:	1000081e 	bne	r2,zero,84075e8 <_dtoa_r+0x4b0>
 84075c8:	0005883a 	mov	r2,zero
 84075cc:	00cffc34 	movhi	r3,16368
 84075d0:	180f883a 	mov	r7,r3
 84075d4:	a009883a 	mov	r4,r20
 84075d8:	a80b883a 	mov	r5,r21
 84075dc:	100d883a 	mov	r6,r2
 84075e0:	8403fe40 	call	8403fe4 <__ltdf2>
 84075e4:	1003fe16 	blt	r2,zero,84085e0 <_dtoa_r+0x14a8>
 84075e8:	b009883a 	mov	r4,r22
 84075ec:	84040f40 	call	84040f4 <__floatsidf>
 84075f0:	180b883a 	mov	r5,r3
 84075f4:	1009883a 	mov	r4,r2
 84075f8:	a00d883a 	mov	r6,r20
 84075fc:	a80f883a 	mov	r7,r21
 8407600:	84038300 	call	8403830 <__muldf3>
 8407604:	0011883a 	mov	r8,zero
 8407608:	02500734 	movhi	r9,16412
 840760c:	1009883a 	mov	r4,r2
 8407610:	180b883a 	mov	r5,r3
 8407614:	480f883a 	mov	r7,r9
 8407618:	400d883a 	mov	r6,r8
 840761c:	84037bc0 	call	84037bc <__adddf3>
 8407620:	d9000f17 	ldw	r4,60(sp)
 8407624:	102d883a 	mov	r22,r2
 8407628:	00bf3034 	movhi	r2,64704
 840762c:	18b9883a 	add	fp,r3,r2
 8407630:	e02f883a 	mov	r23,fp
 8407634:	20028f1e 	bne	r4,zero,8408074 <_dtoa_r+0xf3c>
 8407638:	0005883a 	mov	r2,zero
 840763c:	00d00534 	movhi	r3,16404
 8407640:	a009883a 	mov	r4,r20
 8407644:	a80b883a 	mov	r5,r21
 8407648:	180f883a 	mov	r7,r3
 840764c:	100d883a 	mov	r6,r2
 8407650:	840373c0 	call	840373c <__subdf3>
 8407654:	1009883a 	mov	r4,r2
 8407658:	e00f883a 	mov	r7,fp
 840765c:	180b883a 	mov	r5,r3
 8407660:	b00d883a 	mov	r6,r22
 8407664:	1025883a 	mov	r18,r2
 8407668:	1827883a 	mov	r19,r3
 840766c:	8403f5c0 	call	8403f5c <__gtdf2>
 8407670:	00834f16 	blt	zero,r2,84083b0 <_dtoa_r+0x1278>
 8407674:	e0e0003c 	xorhi	r3,fp,32768
 8407678:	9009883a 	mov	r4,r18
 840767c:	980b883a 	mov	r5,r19
 8407680:	180f883a 	mov	r7,r3
 8407684:	b00d883a 	mov	r6,r22
 8407688:	8403fe40 	call	8403fe4 <__ltdf2>
 840768c:	1000080e 	bge	r2,zero,84076b0 <_dtoa_r+0x578>
 8407690:	0027883a 	mov	r19,zero
 8407694:	0025883a 	mov	r18,zero
 8407698:	d8802617 	ldw	r2,152(sp)
 840769c:	df000517 	ldw	fp,20(sp)
 84076a0:	d8000615 	stw	zero,24(sp)
 84076a4:	0084303a 	nor	r2,zero,r2
 84076a8:	d8800d15 	stw	r2,52(sp)
 84076ac:	00019b06 	br	8407d1c <_dtoa_r+0xbe4>
 84076b0:	d9801217 	ldw	r6,72(sp)
 84076b4:	d8801317 	ldw	r2,76(sp)
 84076b8:	3029883a 	mov	r20,r6
 84076bc:	102b883a 	mov	r21,r2
 84076c0:	d8c00217 	ldw	r3,8(sp)
 84076c4:	18008516 	blt	r3,zero,84078dc <_dtoa_r+0x7a4>
 84076c8:	d9000d17 	ldw	r4,52(sp)
 84076cc:	00800384 	movi	r2,14
 84076d0:	11008216 	blt	r2,r4,84078dc <_dtoa_r+0x7a4>
 84076d4:	200490fa 	slli	r2,r4,3
 84076d8:	d9802617 	ldw	r6,152(sp)
 84076dc:	00c21074 	movhi	r3,2113
 84076e0:	18c6d804 	addi	r3,r3,7008
 84076e4:	10c5883a 	add	r2,r2,r3
 84076e8:	14800017 	ldw	r18,0(r2)
 84076ec:	14c00117 	ldw	r19,4(r2)
 84076f0:	30031e16 	blt	r6,zero,840836c <_dtoa_r+0x1234>
 84076f4:	d9000517 	ldw	r4,20(sp)
 84076f8:	d8c00f17 	ldw	r3,60(sp)
 84076fc:	a823883a 	mov	r17,r21
 8407700:	a021883a 	mov	r16,r20
 8407704:	192b883a 	add	r21,r3,r4
 8407708:	2039883a 	mov	fp,r4
 840770c:	00000f06 	br	840774c <_dtoa_r+0x614>
 8407710:	0005883a 	mov	r2,zero
 8407714:	00d00934 	movhi	r3,16420
 8407718:	5009883a 	mov	r4,r10
 840771c:	580b883a 	mov	r5,r11
 8407720:	180f883a 	mov	r7,r3
 8407724:	100d883a 	mov	r6,r2
 8407728:	84038300 	call	8403830 <__muldf3>
 840772c:	180b883a 	mov	r5,r3
 8407730:	000d883a 	mov	r6,zero
 8407734:	000f883a 	mov	r7,zero
 8407738:	1009883a 	mov	r4,r2
 840773c:	1021883a 	mov	r16,r2
 8407740:	1823883a 	mov	r17,r3
 8407744:	8403ed40 	call	8403ed4 <__nedf2>
 8407748:	10004526 	beq	r2,zero,8407860 <_dtoa_r+0x728>
 840774c:	900d883a 	mov	r6,r18
 8407750:	980f883a 	mov	r7,r19
 8407754:	8009883a 	mov	r4,r16
 8407758:	880b883a 	mov	r5,r17
 840775c:	8403bf40 	call	8403bf4 <__divdf3>
 8407760:	180b883a 	mov	r5,r3
 8407764:	1009883a 	mov	r4,r2
 8407768:	840cc140 	call	840cc14 <__fixdfsi>
 840776c:	1009883a 	mov	r4,r2
 8407770:	1029883a 	mov	r20,r2
 8407774:	84040f40 	call	84040f4 <__floatsidf>
 8407778:	180f883a 	mov	r7,r3
 840777c:	9009883a 	mov	r4,r18
 8407780:	980b883a 	mov	r5,r19
 8407784:	100d883a 	mov	r6,r2
 8407788:	84038300 	call	8403830 <__muldf3>
 840778c:	180f883a 	mov	r7,r3
 8407790:	880b883a 	mov	r5,r17
 8407794:	8009883a 	mov	r4,r16
 8407798:	100d883a 	mov	r6,r2
 840779c:	840373c0 	call	840373c <__subdf3>
 84077a0:	1015883a 	mov	r10,r2
 84077a4:	a0800c04 	addi	r2,r20,48
 84077a8:	e0800005 	stb	r2,0(fp)
 84077ac:	e7000044 	addi	fp,fp,1
 84077b0:	1817883a 	mov	r11,r3
 84077b4:	e57fd61e 	bne	fp,r21,8407710 <_dtoa_r+0x5d8>
 84077b8:	500d883a 	mov	r6,r10
 84077bc:	180f883a 	mov	r7,r3
 84077c0:	5009883a 	mov	r4,r10
 84077c4:	180b883a 	mov	r5,r3
 84077c8:	84037bc0 	call	84037bc <__adddf3>
 84077cc:	100d883a 	mov	r6,r2
 84077d0:	9009883a 	mov	r4,r18
 84077d4:	980b883a 	mov	r5,r19
 84077d8:	180f883a 	mov	r7,r3
 84077dc:	1021883a 	mov	r16,r2
 84077e0:	1823883a 	mov	r17,r3
 84077e4:	8403fe40 	call	8403fe4 <__ltdf2>
 84077e8:	10000816 	blt	r2,zero,840780c <_dtoa_r+0x6d4>
 84077ec:	980b883a 	mov	r5,r19
 84077f0:	800d883a 	mov	r6,r16
 84077f4:	880f883a 	mov	r7,r17
 84077f8:	9009883a 	mov	r4,r18
 84077fc:	8403e4c0 	call	8403e4c <__eqdf2>
 8407800:	1000171e 	bne	r2,zero,8407860 <_dtoa_r+0x728>
 8407804:	a080004c 	andi	r2,r20,1
 8407808:	10001526 	beq	r2,zero,8407860 <_dtoa_r+0x728>
 840780c:	d8800d17 	ldw	r2,52(sp)
 8407810:	d8800415 	stw	r2,16(sp)
 8407814:	e009883a 	mov	r4,fp
 8407818:	213fffc4 	addi	r4,r4,-1
 840781c:	20c00007 	ldb	r3,0(r4)
 8407820:	00800e44 	movi	r2,57
 8407824:	1880081e 	bne	r3,r2,8407848 <_dtoa_r+0x710>
 8407828:	d8800517 	ldw	r2,20(sp)
 840782c:	113ffa1e 	bne	r2,r4,8407818 <_dtoa_r+0x6e0>
 8407830:	d8c00417 	ldw	r3,16(sp)
 8407834:	d9800517 	ldw	r6,20(sp)
 8407838:	00800c04 	movi	r2,48
 840783c:	18c00044 	addi	r3,r3,1
 8407840:	d8c00415 	stw	r3,16(sp)
 8407844:	30800005 	stb	r2,0(r6)
 8407848:	20800003 	ldbu	r2,0(r4)
 840784c:	d8c00417 	ldw	r3,16(sp)
 8407850:	27000044 	addi	fp,r4,1
 8407854:	10800044 	addi	r2,r2,1
 8407858:	d8c00d15 	stw	r3,52(sp)
 840785c:	20800005 	stb	r2,0(r4)
 8407860:	d9001617 	ldw	r4,88(sp)
 8407864:	d9400717 	ldw	r5,28(sp)
 8407868:	840a2cc0 	call	840a2cc <_Bfree>
 840786c:	e0000005 	stb	zero,0(fp)
 8407870:	d9800d17 	ldw	r6,52(sp)
 8407874:	d8c02717 	ldw	r3,156(sp)
 8407878:	d9002917 	ldw	r4,164(sp)
 840787c:	30800044 	addi	r2,r6,1
 8407880:	18800015 	stw	r2,0(r3)
 8407884:	20029c26 	beq	r4,zero,84082f8 <_dtoa_r+0x11c0>
 8407888:	d8c00517 	ldw	r3,20(sp)
 840788c:	27000015 	stw	fp,0(r4)
 8407890:	003e5d06 	br	8407208 <_dtoa_r+0xd0>
 8407894:	d9800d17 	ldw	r6,52(sp)
 8407898:	00c21074 	movhi	r3,2113
 840789c:	18c6d804 	addi	r3,r3,7008
 84078a0:	d9001217 	ldw	r4,72(sp)
 84078a4:	300490fa 	slli	r2,r6,3
 84078a8:	d9401317 	ldw	r5,76(sp)
 84078ac:	10c5883a 	add	r2,r2,r3
 84078b0:	12000017 	ldw	r8,0(r2)
 84078b4:	12400117 	ldw	r9,4(r2)
 84078b8:	400d883a 	mov	r6,r8
 84078bc:	480f883a 	mov	r7,r9
 84078c0:	8403fe40 	call	8403fe4 <__ltdf2>
 84078c4:	1000030e 	bge	r2,zero,84078d4 <_dtoa_r+0x79c>
 84078c8:	d8800d17 	ldw	r2,52(sp)
 84078cc:	10bfffc4 	addi	r2,r2,-1
 84078d0:	d8800d15 	stw	r2,52(sp)
 84078d4:	d8000c15 	stw	zero,48(sp)
 84078d8:	003ea806 	br	840737c <_dtoa_r+0x244>
 84078dc:	d9000b17 	ldw	r4,44(sp)
 84078e0:	202cc03a 	cmpne	r22,r4,zero
 84078e4:	b000c71e 	bne	r22,zero,8407c04 <_dtoa_r+0xacc>
 84078e8:	dc001117 	ldw	r16,68(sp)
 84078ec:	dc801017 	ldw	r18,64(sp)
 84078f0:	0027883a 	mov	r19,zero
 84078f4:	04000b0e 	bge	zero,r16,8407924 <_dtoa_r+0x7ec>
 84078f8:	d8c00a17 	ldw	r3,40(sp)
 84078fc:	00c0090e 	bge	zero,r3,8407924 <_dtoa_r+0x7ec>
 8407900:	8005883a 	mov	r2,r16
 8407904:	1c011316 	blt	r3,r16,8407d54 <_dtoa_r+0xc1c>
 8407908:	d9000a17 	ldw	r4,40(sp)
 840790c:	d9801117 	ldw	r6,68(sp)
 8407910:	80a1c83a 	sub	r16,r16,r2
 8407914:	2089c83a 	sub	r4,r4,r2
 8407918:	308dc83a 	sub	r6,r6,r2
 840791c:	d9000a15 	stw	r4,40(sp)
 8407920:	d9801115 	stw	r6,68(sp)
 8407924:	d8801017 	ldw	r2,64(sp)
 8407928:	0080150e 	bge	zero,r2,8407980 <_dtoa_r+0x848>
 840792c:	d8c00b17 	ldw	r3,44(sp)
 8407930:	1805003a 	cmpeq	r2,r3,zero
 8407934:	1001c91e 	bne	r2,zero,840805c <_dtoa_r+0xf24>
 8407938:	04800e0e 	bge	zero,r18,8407974 <_dtoa_r+0x83c>
 840793c:	d9001617 	ldw	r4,88(sp)
 8407940:	980b883a 	mov	r5,r19
 8407944:	900d883a 	mov	r6,r18
 8407948:	840b0800 	call	840b080 <__pow5mult>
 840794c:	d9001617 	ldw	r4,88(sp)
 8407950:	d9800717 	ldw	r6,28(sp)
 8407954:	100b883a 	mov	r5,r2
 8407958:	1027883a 	mov	r19,r2
 840795c:	840ad5c0 	call	840ad5c <__multiply>
 8407960:	d9001617 	ldw	r4,88(sp)
 8407964:	d9400717 	ldw	r5,28(sp)
 8407968:	1023883a 	mov	r17,r2
 840796c:	840a2cc0 	call	840a2cc <_Bfree>
 8407970:	dc400715 	stw	r17,28(sp)
 8407974:	d9001017 	ldw	r4,64(sp)
 8407978:	248dc83a 	sub	r6,r4,r18
 840797c:	30010e1e 	bne	r6,zero,8407db8 <_dtoa_r+0xc80>
 8407980:	d9001617 	ldw	r4,88(sp)
 8407984:	04400044 	movi	r17,1
 8407988:	880b883a 	mov	r5,r17
 840798c:	840af440 	call	840af44 <__i2b>
 8407990:	d9800917 	ldw	r6,36(sp)
 8407994:	1025883a 	mov	r18,r2
 8407998:	0180040e 	bge	zero,r6,84079ac <_dtoa_r+0x874>
 840799c:	d9001617 	ldw	r4,88(sp)
 84079a0:	100b883a 	mov	r5,r2
 84079a4:	840b0800 	call	840b080 <__pow5mult>
 84079a8:	1025883a 	mov	r18,r2
 84079ac:	d8801717 	ldw	r2,92(sp)
 84079b0:	8880f30e 	bge	r17,r2,8407d80 <_dtoa_r+0xc48>
 84079b4:	0023883a 	mov	r17,zero
 84079b8:	d9800917 	ldw	r6,36(sp)
 84079bc:	30019e1e 	bne	r6,zero,8408038 <_dtoa_r+0xf00>
 84079c0:	00c00044 	movi	r3,1
 84079c4:	d9000a17 	ldw	r4,40(sp)
 84079c8:	20c5883a 	add	r2,r4,r3
 84079cc:	10c007cc 	andi	r3,r2,31
 84079d0:	1800841e 	bne	r3,zero,8407be4 <_dtoa_r+0xaac>
 84079d4:	00800704 	movi	r2,28
 84079d8:	d9000a17 	ldw	r4,40(sp)
 84079dc:	d9801117 	ldw	r6,68(sp)
 84079e0:	80a1883a 	add	r16,r16,r2
 84079e4:	2089883a 	add	r4,r4,r2
 84079e8:	308d883a 	add	r6,r6,r2
 84079ec:	d9000a15 	stw	r4,40(sp)
 84079f0:	d9801115 	stw	r6,68(sp)
 84079f4:	d8801117 	ldw	r2,68(sp)
 84079f8:	0080050e 	bge	zero,r2,8407a10 <_dtoa_r+0x8d8>
 84079fc:	d9400717 	ldw	r5,28(sp)
 8407a00:	d9001617 	ldw	r4,88(sp)
 8407a04:	100d883a 	mov	r6,r2
 8407a08:	840ac100 	call	840ac10 <__lshift>
 8407a0c:	d8800715 	stw	r2,28(sp)
 8407a10:	d8c00a17 	ldw	r3,40(sp)
 8407a14:	00c0050e 	bge	zero,r3,8407a2c <_dtoa_r+0x8f4>
 8407a18:	d9001617 	ldw	r4,88(sp)
 8407a1c:	900b883a 	mov	r5,r18
 8407a20:	180d883a 	mov	r6,r3
 8407a24:	840ac100 	call	840ac10 <__lshift>
 8407a28:	1025883a 	mov	r18,r2
 8407a2c:	d9000c17 	ldw	r4,48(sp)
 8407a30:	2005003a 	cmpeq	r2,r4,zero
 8407a34:	10016f26 	beq	r2,zero,8407ff4 <_dtoa_r+0xebc>
 8407a38:	d9000f17 	ldw	r4,60(sp)
 8407a3c:	0102170e 	bge	zero,r4,840829c <_dtoa_r+0x1164>
 8407a40:	d9800b17 	ldw	r6,44(sp)
 8407a44:	3005003a 	cmpeq	r2,r6,zero
 8407a48:	1000881e 	bne	r2,zero,8407c6c <_dtoa_r+0xb34>
 8407a4c:	0400050e 	bge	zero,r16,8407a64 <_dtoa_r+0x92c>
 8407a50:	d9001617 	ldw	r4,88(sp)
 8407a54:	980b883a 	mov	r5,r19
 8407a58:	800d883a 	mov	r6,r16
 8407a5c:	840ac100 	call	840ac10 <__lshift>
 8407a60:	1027883a 	mov	r19,r2
 8407a64:	8804c03a 	cmpne	r2,r17,zero
 8407a68:	1002541e 	bne	r2,zero,84083bc <_dtoa_r+0x1284>
 8407a6c:	980b883a 	mov	r5,r19
 8407a70:	dd800517 	ldw	r22,20(sp)
 8407a74:	dcc00615 	stw	r19,24(sp)
 8407a78:	a700004c 	andi	fp,r20,1
 8407a7c:	2827883a 	mov	r19,r5
 8407a80:	d9000717 	ldw	r4,28(sp)
 8407a84:	900b883a 	mov	r5,r18
 8407a88:	8406f200 	call	8406f20 <quorem>
 8407a8c:	d9000717 	ldw	r4,28(sp)
 8407a90:	d9400617 	ldw	r5,24(sp)
 8407a94:	1023883a 	mov	r17,r2
 8407a98:	8dc00c04 	addi	r23,r17,48
 8407a9c:	840a4280 	call	840a428 <__mcmp>
 8407aa0:	d9001617 	ldw	r4,88(sp)
 8407aa4:	900b883a 	mov	r5,r18
 8407aa8:	980d883a 	mov	r6,r19
 8407aac:	1029883a 	mov	r20,r2
 8407ab0:	840aa840 	call	840aa84 <__mdiff>
 8407ab4:	102b883a 	mov	r21,r2
 8407ab8:	10800317 	ldw	r2,12(r2)
 8407abc:	1001281e 	bne	r2,zero,8407f60 <_dtoa_r+0xe28>
 8407ac0:	d9000717 	ldw	r4,28(sp)
 8407ac4:	a80b883a 	mov	r5,r21
 8407ac8:	840a4280 	call	840a428 <__mcmp>
 8407acc:	d9001617 	ldw	r4,88(sp)
 8407ad0:	1021883a 	mov	r16,r2
 8407ad4:	a80b883a 	mov	r5,r21
 8407ad8:	840a2cc0 	call	840a2cc <_Bfree>
 8407adc:	8000041e 	bne	r16,zero,8407af0 <_dtoa_r+0x9b8>
 8407ae0:	d8801717 	ldw	r2,92(sp)
 8407ae4:	1000021e 	bne	r2,zero,8407af0 <_dtoa_r+0x9b8>
 8407ae8:	e004c03a 	cmpne	r2,fp,zero
 8407aec:	10011726 	beq	r2,zero,8407f4c <_dtoa_r+0xe14>
 8407af0:	a0010616 	blt	r20,zero,8407f0c <_dtoa_r+0xdd4>
 8407af4:	a000041e 	bne	r20,zero,8407b08 <_dtoa_r+0x9d0>
 8407af8:	d8c01717 	ldw	r3,92(sp)
 8407afc:	1800021e 	bne	r3,zero,8407b08 <_dtoa_r+0x9d0>
 8407b00:	e004c03a 	cmpne	r2,fp,zero
 8407b04:	10010126 	beq	r2,zero,8407f0c <_dtoa_r+0xdd4>
 8407b08:	04023d16 	blt	zero,r16,8408400 <_dtoa_r+0x12c8>
 8407b0c:	b5c00005 	stb	r23,0(r22)
 8407b10:	d9800517 	ldw	r6,20(sp)
 8407b14:	d9000f17 	ldw	r4,60(sp)
 8407b18:	b5800044 	addi	r22,r22,1
 8407b1c:	3105883a 	add	r2,r6,r4
 8407b20:	b0806526 	beq	r22,r2,8407cb8 <_dtoa_r+0xb80>
 8407b24:	d9400717 	ldw	r5,28(sp)
 8407b28:	d9001617 	ldw	r4,88(sp)
 8407b2c:	01800284 	movi	r6,10
 8407b30:	000f883a 	mov	r7,zero
 8407b34:	840af800 	call	840af80 <__multadd>
 8407b38:	d8800715 	stw	r2,28(sp)
 8407b3c:	d8800617 	ldw	r2,24(sp)
 8407b40:	14c10c26 	beq	r2,r19,8407f74 <_dtoa_r+0xe3c>
 8407b44:	d9400617 	ldw	r5,24(sp)
 8407b48:	d9001617 	ldw	r4,88(sp)
 8407b4c:	01800284 	movi	r6,10
 8407b50:	000f883a 	mov	r7,zero
 8407b54:	840af800 	call	840af80 <__multadd>
 8407b58:	d9001617 	ldw	r4,88(sp)
 8407b5c:	980b883a 	mov	r5,r19
 8407b60:	01800284 	movi	r6,10
 8407b64:	000f883a 	mov	r7,zero
 8407b68:	d8800615 	stw	r2,24(sp)
 8407b6c:	840af800 	call	840af80 <__multadd>
 8407b70:	1027883a 	mov	r19,r2
 8407b74:	003fc206 	br	8407a80 <_dtoa_r+0x948>
 8407b78:	2445c83a 	sub	r2,r4,r17
 8407b7c:	a088983a 	sll	r4,r20,r2
 8407b80:	003e4b06 	br	84074b0 <_dtoa_r+0x378>
 8407b84:	01bfffc4 	movi	r6,-1
 8407b88:	00800044 	movi	r2,1
 8407b8c:	d9800e15 	stw	r6,56(sp)
 8407b90:	d9800f15 	stw	r6,60(sp)
 8407b94:	d8800b15 	stw	r2,44(sp)
 8407b98:	d8c01617 	ldw	r3,88(sp)
 8407b9c:	008005c4 	movi	r2,23
 8407ba0:	18001115 	stw	zero,68(r3)
 8407ba4:	1580082e 	bgeu	r2,r22,8407bc8 <_dtoa_r+0xa90>
 8407ba8:	00c00104 	movi	r3,4
 8407bac:	0009883a 	mov	r4,zero
 8407bb0:	18c7883a 	add	r3,r3,r3
 8407bb4:	18800504 	addi	r2,r3,20
 8407bb8:	21000044 	addi	r4,r4,1
 8407bbc:	b0bffc2e 	bgeu	r22,r2,8407bb0 <_dtoa_r+0xa78>
 8407bc0:	d9801617 	ldw	r6,88(sp)
 8407bc4:	31001115 	stw	r4,68(r6)
 8407bc8:	dc000f17 	ldw	r16,60(sp)
 8407bcc:	003e4b06 	br	84074fc <_dtoa_r+0x3c4>
 8407bd0:	d9801717 	ldw	r6,92(sp)
 8407bd4:	0023883a 	mov	r17,zero
 8407bd8:	31bfff04 	addi	r6,r6,-4
 8407bdc:	d9801715 	stw	r6,92(sp)
 8407be0:	003df806 	br	84073c4 <_dtoa_r+0x28c>
 8407be4:	00800804 	movi	r2,32
 8407be8:	10c9c83a 	sub	r4,r2,r3
 8407bec:	00c00104 	movi	r3,4
 8407bf0:	19005a16 	blt	r3,r4,8407d5c <_dtoa_r+0xc24>
 8407bf4:	008000c4 	movi	r2,3
 8407bf8:	113f7e16 	blt	r2,r4,84079f4 <_dtoa_r+0x8bc>
 8407bfc:	20800704 	addi	r2,r4,28
 8407c00:	003f7506 	br	84079d8 <_dtoa_r+0x8a0>
 8407c04:	d9801717 	ldw	r6,92(sp)
 8407c08:	00800044 	movi	r2,1
 8407c0c:	1180a10e 	bge	r2,r6,8407e94 <_dtoa_r+0xd5c>
 8407c10:	d9800f17 	ldw	r6,60(sp)
 8407c14:	d8c01017 	ldw	r3,64(sp)
 8407c18:	30bfffc4 	addi	r2,r6,-1
 8407c1c:	1881c616 	blt	r3,r2,8408338 <_dtoa_r+0x1200>
 8407c20:	18a5c83a 	sub	r18,r3,r2
 8407c24:	d8800f17 	ldw	r2,60(sp)
 8407c28:	10026216 	blt	r2,zero,84085b4 <_dtoa_r+0x147c>
 8407c2c:	dc001117 	ldw	r16,68(sp)
 8407c30:	1007883a 	mov	r3,r2
 8407c34:	d9800a17 	ldw	r6,40(sp)
 8407c38:	d8801117 	ldw	r2,68(sp)
 8407c3c:	d9001617 	ldw	r4,88(sp)
 8407c40:	30cd883a 	add	r6,r6,r3
 8407c44:	10c5883a 	add	r2,r2,r3
 8407c48:	01400044 	movi	r5,1
 8407c4c:	d9800a15 	stw	r6,40(sp)
 8407c50:	d8801115 	stw	r2,68(sp)
 8407c54:	840af440 	call	840af44 <__i2b>
 8407c58:	1027883a 	mov	r19,r2
 8407c5c:	003f2506 	br	84078f4 <_dtoa_r+0x7bc>
 8407c60:	00c21074 	movhi	r3,2113
 8407c64:	18c6bb04 	addi	r3,r3,6892
 8407c68:	003d6706 	br	8407208 <_dtoa_r+0xd0>
 8407c6c:	dd800517 	ldw	r22,20(sp)
 8407c70:	04000044 	movi	r16,1
 8407c74:	00000706 	br	8407c94 <_dtoa_r+0xb5c>
 8407c78:	d9400717 	ldw	r5,28(sp)
 8407c7c:	d9001617 	ldw	r4,88(sp)
 8407c80:	01800284 	movi	r6,10
 8407c84:	000f883a 	mov	r7,zero
 8407c88:	840af800 	call	840af80 <__multadd>
 8407c8c:	d8800715 	stw	r2,28(sp)
 8407c90:	84000044 	addi	r16,r16,1
 8407c94:	d9000717 	ldw	r4,28(sp)
 8407c98:	900b883a 	mov	r5,r18
 8407c9c:	8406f200 	call	8406f20 <quorem>
 8407ca0:	15c00c04 	addi	r23,r2,48
 8407ca4:	b5c00005 	stb	r23,0(r22)
 8407ca8:	d8c00f17 	ldw	r3,60(sp)
 8407cac:	b5800044 	addi	r22,r22,1
 8407cb0:	80fff116 	blt	r16,r3,8407c78 <_dtoa_r+0xb40>
 8407cb4:	d8000615 	stw	zero,24(sp)
 8407cb8:	d9400717 	ldw	r5,28(sp)
 8407cbc:	d9001617 	ldw	r4,88(sp)
 8407cc0:	01800044 	movi	r6,1
 8407cc4:	840ac100 	call	840ac10 <__lshift>
 8407cc8:	1009883a 	mov	r4,r2
 8407ccc:	900b883a 	mov	r5,r18
 8407cd0:	d8800715 	stw	r2,28(sp)
 8407cd4:	840a4280 	call	840a428 <__mcmp>
 8407cd8:	00803c0e 	bge	zero,r2,8407dcc <_dtoa_r+0xc94>
 8407cdc:	b009883a 	mov	r4,r22
 8407ce0:	213fffc4 	addi	r4,r4,-1
 8407ce4:	21400003 	ldbu	r5,0(r4)
 8407ce8:	00800e44 	movi	r2,57
 8407cec:	28c03fcc 	andi	r3,r5,255
 8407cf0:	18c0201c 	xori	r3,r3,128
 8407cf4:	18ffe004 	addi	r3,r3,-128
 8407cf8:	1881981e 	bne	r3,r2,840835c <_dtoa_r+0x1224>
 8407cfc:	d9800517 	ldw	r6,20(sp)
 8407d00:	21bff71e 	bne	r4,r6,8407ce0 <_dtoa_r+0xba8>
 8407d04:	d8800d17 	ldw	r2,52(sp)
 8407d08:	37000044 	addi	fp,r6,1
 8407d0c:	10800044 	addi	r2,r2,1
 8407d10:	d8800d15 	stw	r2,52(sp)
 8407d14:	00800c44 	movi	r2,49
 8407d18:	30800005 	stb	r2,0(r6)
 8407d1c:	d9001617 	ldw	r4,88(sp)
 8407d20:	900b883a 	mov	r5,r18
 8407d24:	840a2cc0 	call	840a2cc <_Bfree>
 8407d28:	983ecd26 	beq	r19,zero,8407860 <_dtoa_r+0x728>
 8407d2c:	d8c00617 	ldw	r3,24(sp)
 8407d30:	18000426 	beq	r3,zero,8407d44 <_dtoa_r+0xc0c>
 8407d34:	1cc00326 	beq	r3,r19,8407d44 <_dtoa_r+0xc0c>
 8407d38:	d9001617 	ldw	r4,88(sp)
 8407d3c:	180b883a 	mov	r5,r3
 8407d40:	840a2cc0 	call	840a2cc <_Bfree>
 8407d44:	d9001617 	ldw	r4,88(sp)
 8407d48:	980b883a 	mov	r5,r19
 8407d4c:	840a2cc0 	call	840a2cc <_Bfree>
 8407d50:	003ec306 	br	8407860 <_dtoa_r+0x728>
 8407d54:	1805883a 	mov	r2,r3
 8407d58:	003eeb06 	br	8407908 <_dtoa_r+0x7d0>
 8407d5c:	d9800a17 	ldw	r6,40(sp)
 8407d60:	d8c01117 	ldw	r3,68(sp)
 8407d64:	20bfff04 	addi	r2,r4,-4
 8407d68:	308d883a 	add	r6,r6,r2
 8407d6c:	1887883a 	add	r3,r3,r2
 8407d70:	80a1883a 	add	r16,r16,r2
 8407d74:	d9800a15 	stw	r6,40(sp)
 8407d78:	d8c01115 	stw	r3,68(sp)
 8407d7c:	003f1d06 	br	84079f4 <_dtoa_r+0x8bc>
 8407d80:	a03f0c1e 	bne	r20,zero,84079b4 <_dtoa_r+0x87c>
 8407d84:	00800434 	movhi	r2,16
 8407d88:	10bfffc4 	addi	r2,r2,-1
 8407d8c:	a884703a 	and	r2,r21,r2
 8407d90:	103f081e 	bne	r2,zero,84079b4 <_dtoa_r+0x87c>
 8407d94:	a89ffc2c 	andhi	r2,r21,32752
 8407d98:	103f0626 	beq	r2,zero,84079b4 <_dtoa_r+0x87c>
 8407d9c:	d8c01117 	ldw	r3,68(sp)
 8407da0:	d9000a17 	ldw	r4,40(sp)
 8407da4:	18c00044 	addi	r3,r3,1
 8407da8:	21000044 	addi	r4,r4,1
 8407dac:	d8c01115 	stw	r3,68(sp)
 8407db0:	d9000a15 	stw	r4,40(sp)
 8407db4:	003f0006 	br	84079b8 <_dtoa_r+0x880>
 8407db8:	d9400717 	ldw	r5,28(sp)
 8407dbc:	d9001617 	ldw	r4,88(sp)
 8407dc0:	840b0800 	call	840b080 <__pow5mult>
 8407dc4:	d8800715 	stw	r2,28(sp)
 8407dc8:	003eed06 	br	8407980 <_dtoa_r+0x848>
 8407dcc:	1000021e 	bne	r2,zero,8407dd8 <_dtoa_r+0xca0>
 8407dd0:	b880004c 	andi	r2,r23,1
 8407dd4:	103fc11e 	bne	r2,zero,8407cdc <_dtoa_r+0xba4>
 8407dd8:	b5bfffc4 	addi	r22,r22,-1
 8407ddc:	b0c00007 	ldb	r3,0(r22)
 8407de0:	00800c04 	movi	r2,48
 8407de4:	18bffc26 	beq	r3,r2,8407dd8 <_dtoa_r+0xca0>
 8407de8:	b7000044 	addi	fp,r22,1
 8407dec:	003fcb06 	br	8407d1c <_dtoa_r+0xbe4>
 8407df0:	d9800d17 	ldw	r6,52(sp)
 8407df4:	018fc83a 	sub	r7,zero,r6
 8407df8:	3801f726 	beq	r7,zero,84085d8 <_dtoa_r+0x14a0>
 8407dfc:	398003cc 	andi	r6,r7,15
 8407e00:	300c90fa 	slli	r6,r6,3
 8407e04:	01421074 	movhi	r5,2113
 8407e08:	2946d804 	addi	r5,r5,7008
 8407e0c:	d9001217 	ldw	r4,72(sp)
 8407e10:	314d883a 	add	r6,r6,r5
 8407e14:	30c00117 	ldw	r3,4(r6)
 8407e18:	30800017 	ldw	r2,0(r6)
 8407e1c:	d9401317 	ldw	r5,76(sp)
 8407e20:	3821d13a 	srai	r16,r7,4
 8407e24:	100d883a 	mov	r6,r2
 8407e28:	180f883a 	mov	r7,r3
 8407e2c:	84038300 	call	8403830 <__muldf3>
 8407e30:	1011883a 	mov	r8,r2
 8407e34:	1813883a 	mov	r9,r3
 8407e38:	1029883a 	mov	r20,r2
 8407e3c:	182b883a 	mov	r21,r3
 8407e40:	8001e526 	beq	r16,zero,84085d8 <_dtoa_r+0x14a0>
 8407e44:	05800084 	movi	r22,2
 8407e48:	04421074 	movhi	r17,2113
 8407e4c:	8c470a04 	addi	r17,r17,7208
 8407e50:	8080004c 	andi	r2,r16,1
 8407e54:	1005003a 	cmpeq	r2,r2,zero
 8407e58:	1000081e 	bne	r2,zero,8407e7c <_dtoa_r+0xd44>
 8407e5c:	89800017 	ldw	r6,0(r17)
 8407e60:	89c00117 	ldw	r7,4(r17)
 8407e64:	480b883a 	mov	r5,r9
 8407e68:	4009883a 	mov	r4,r8
 8407e6c:	84038300 	call	8403830 <__muldf3>
 8407e70:	1011883a 	mov	r8,r2
 8407e74:	b5800044 	addi	r22,r22,1
 8407e78:	1813883a 	mov	r9,r3
 8407e7c:	8021d07a 	srai	r16,r16,1
 8407e80:	8c400204 	addi	r17,r17,8
 8407e84:	803ff21e 	bne	r16,zero,8407e50 <_dtoa_r+0xd18>
 8407e88:	4029883a 	mov	r20,r8
 8407e8c:	482b883a 	mov	r21,r9
 8407e90:	003dca06 	br	84075bc <_dtoa_r+0x484>
 8407e94:	d9000817 	ldw	r4,32(sp)
 8407e98:	2005003a 	cmpeq	r2,r4,zero
 8407e9c:	1001f61e 	bne	r2,zero,8408678 <_dtoa_r+0x1540>
 8407ea0:	dc001117 	ldw	r16,68(sp)
 8407ea4:	dc801017 	ldw	r18,64(sp)
 8407ea8:	18c10cc4 	addi	r3,r3,1075
 8407eac:	003f6106 	br	8407c34 <_dtoa_r+0xafc>
 8407eb0:	d8000b15 	stw	zero,44(sp)
 8407eb4:	d9802617 	ldw	r6,152(sp)
 8407eb8:	d8c00d17 	ldw	r3,52(sp)
 8407ebc:	30800044 	addi	r2,r6,1
 8407ec0:	18ad883a 	add	r22,r3,r2
 8407ec4:	b13fffc4 	addi	r4,r22,-1
 8407ec8:	d9000e15 	stw	r4,56(sp)
 8407ecc:	0581f60e 	bge	zero,r22,84086a8 <_dtoa_r+0x1570>
 8407ed0:	dd800f15 	stw	r22,60(sp)
 8407ed4:	003f3006 	br	8407b98 <_dtoa_r+0xa60>
 8407ed8:	d8000b15 	stw	zero,44(sp)
 8407edc:	d9002617 	ldw	r4,152(sp)
 8407ee0:	0101eb0e 	bge	zero,r4,8408690 <_dtoa_r+0x1558>
 8407ee4:	202d883a 	mov	r22,r4
 8407ee8:	d9000e15 	stw	r4,56(sp)
 8407eec:	d9000f15 	stw	r4,60(sp)
 8407ef0:	003f2906 	br	8407b98 <_dtoa_r+0xa60>
 8407ef4:	01800044 	movi	r6,1
 8407ef8:	d9800b15 	stw	r6,44(sp)
 8407efc:	003ff706 	br	8407edc <_dtoa_r+0xda4>
 8407f00:	01000044 	movi	r4,1
 8407f04:	d9000b15 	stw	r4,44(sp)
 8407f08:	003fea06 	br	8407eb4 <_dtoa_r+0xd7c>
 8407f0c:	04000c0e 	bge	zero,r16,8407f40 <_dtoa_r+0xe08>
 8407f10:	d9400717 	ldw	r5,28(sp)
 8407f14:	d9001617 	ldw	r4,88(sp)
 8407f18:	01800044 	movi	r6,1
 8407f1c:	840ac100 	call	840ac10 <__lshift>
 8407f20:	1009883a 	mov	r4,r2
 8407f24:	900b883a 	mov	r5,r18
 8407f28:	d8800715 	stw	r2,28(sp)
 8407f2c:	840a4280 	call	840a428 <__mcmp>
 8407f30:	0081e00e 	bge	zero,r2,84086b4 <_dtoa_r+0x157c>
 8407f34:	bdc00044 	addi	r23,r23,1
 8407f38:	00800e84 	movi	r2,58
 8407f3c:	b881a226 	beq	r23,r2,84085c8 <_dtoa_r+0x1490>
 8407f40:	b7000044 	addi	fp,r22,1
 8407f44:	b5c00005 	stb	r23,0(r22)
 8407f48:	003f7406 	br	8407d1c <_dtoa_r+0xbe4>
 8407f4c:	00800e44 	movi	r2,57
 8407f50:	b8819d26 	beq	r23,r2,84085c8 <_dtoa_r+0x1490>
 8407f54:	053ffa0e 	bge	zero,r20,8407f40 <_dtoa_r+0xe08>
 8407f58:	8dc00c44 	addi	r23,r17,49
 8407f5c:	003ff806 	br	8407f40 <_dtoa_r+0xe08>
 8407f60:	d9001617 	ldw	r4,88(sp)
 8407f64:	a80b883a 	mov	r5,r21
 8407f68:	04000044 	movi	r16,1
 8407f6c:	840a2cc0 	call	840a2cc <_Bfree>
 8407f70:	003edf06 	br	8407af0 <_dtoa_r+0x9b8>
 8407f74:	d9001617 	ldw	r4,88(sp)
 8407f78:	980b883a 	mov	r5,r19
 8407f7c:	01800284 	movi	r6,10
 8407f80:	000f883a 	mov	r7,zero
 8407f84:	840af800 	call	840af80 <__multadd>
 8407f88:	1027883a 	mov	r19,r2
 8407f8c:	d8800615 	stw	r2,24(sp)
 8407f90:	003ebb06 	br	8407a80 <_dtoa_r+0x948>
 8407f94:	d9801117 	ldw	r6,68(sp)
 8407f98:	d8800d17 	ldw	r2,52(sp)
 8407f9c:	d8000915 	stw	zero,36(sp)
 8407fa0:	308dc83a 	sub	r6,r6,r2
 8407fa4:	0087c83a 	sub	r3,zero,r2
 8407fa8:	d9801115 	stw	r6,68(sp)
 8407fac:	d8c01015 	stw	r3,64(sp)
 8407fb0:	003cfe06 	br	84073ac <_dtoa_r+0x274>
 8407fb4:	018dc83a 	sub	r6,zero,r6
 8407fb8:	d9801115 	stw	r6,68(sp)
 8407fbc:	d8000a15 	stw	zero,40(sp)
 8407fc0:	003cf306 	br	8407390 <_dtoa_r+0x258>
 8407fc4:	d9000d17 	ldw	r4,52(sp)
 8407fc8:	84040f40 	call	84040f4 <__floatsidf>
 8407fcc:	880b883a 	mov	r5,r17
 8407fd0:	8009883a 	mov	r4,r16
 8407fd4:	180f883a 	mov	r7,r3
 8407fd8:	100d883a 	mov	r6,r2
 8407fdc:	8403ed40 	call	8403ed4 <__nedf2>
 8407fe0:	103ce126 	beq	r2,zero,8407368 <_dtoa_r+0x230>
 8407fe4:	d9800d17 	ldw	r6,52(sp)
 8407fe8:	31bfffc4 	addi	r6,r6,-1
 8407fec:	d9800d15 	stw	r6,52(sp)
 8407ff0:	003cdd06 	br	8407368 <_dtoa_r+0x230>
 8407ff4:	d9000717 	ldw	r4,28(sp)
 8407ff8:	900b883a 	mov	r5,r18
 8407ffc:	840a4280 	call	840a428 <__mcmp>
 8408000:	103e8d0e 	bge	r2,zero,8407a38 <_dtoa_r+0x900>
 8408004:	d9400717 	ldw	r5,28(sp)
 8408008:	d9001617 	ldw	r4,88(sp)
 840800c:	01800284 	movi	r6,10
 8408010:	000f883a 	mov	r7,zero
 8408014:	840af800 	call	840af80 <__multadd>
 8408018:	d9800d17 	ldw	r6,52(sp)
 840801c:	d8800715 	stw	r2,28(sp)
 8408020:	31bfffc4 	addi	r6,r6,-1
 8408024:	d9800d15 	stw	r6,52(sp)
 8408028:	b001a71e 	bne	r22,zero,84086c8 <_dtoa_r+0x1590>
 840802c:	d8800e17 	ldw	r2,56(sp)
 8408030:	d8800f15 	stw	r2,60(sp)
 8408034:	003e8006 	br	8407a38 <_dtoa_r+0x900>
 8408038:	90800417 	ldw	r2,16(r18)
 840803c:	1085883a 	add	r2,r2,r2
 8408040:	1085883a 	add	r2,r2,r2
 8408044:	1485883a 	add	r2,r2,r18
 8408048:	11000417 	ldw	r4,16(r2)
 840804c:	840a2f40 	call	840a2f4 <__hi0bits>
 8408050:	00c00804 	movi	r3,32
 8408054:	1887c83a 	sub	r3,r3,r2
 8408058:	003e5a06 	br	84079c4 <_dtoa_r+0x88c>
 840805c:	d9400717 	ldw	r5,28(sp)
 8408060:	d9801017 	ldw	r6,64(sp)
 8408064:	d9001617 	ldw	r4,88(sp)
 8408068:	840b0800 	call	840b080 <__pow5mult>
 840806c:	d8800715 	stw	r2,28(sp)
 8408070:	003e4306 	br	8407980 <_dtoa_r+0x848>
 8408074:	d9800f17 	ldw	r6,60(sp)
 8408078:	d8800d17 	ldw	r2,52(sp)
 840807c:	d9800315 	stw	r6,12(sp)
 8408080:	d8800415 	stw	r2,16(sp)
 8408084:	d8c00b17 	ldw	r3,44(sp)
 8408088:	1805003a 	cmpeq	r2,r3,zero
 840808c:	1000e21e 	bne	r2,zero,8408418 <_dtoa_r+0x12e0>
 8408090:	d9000317 	ldw	r4,12(sp)
 8408094:	0005883a 	mov	r2,zero
 8408098:	00cff834 	movhi	r3,16352
 840809c:	200c90fa 	slli	r6,r4,3
 84080a0:	01021074 	movhi	r4,2113
 84080a4:	2106d804 	addi	r4,r4,7008
 84080a8:	180b883a 	mov	r5,r3
 84080ac:	310d883a 	add	r6,r6,r4
 84080b0:	327fff17 	ldw	r9,-4(r6)
 84080b4:	323ffe17 	ldw	r8,-8(r6)
 84080b8:	1009883a 	mov	r4,r2
 84080bc:	480f883a 	mov	r7,r9
 84080c0:	400d883a 	mov	r6,r8
 84080c4:	8403bf40 	call	8403bf4 <__divdf3>
 84080c8:	180b883a 	mov	r5,r3
 84080cc:	b00d883a 	mov	r6,r22
 84080d0:	b80f883a 	mov	r7,r23
 84080d4:	1009883a 	mov	r4,r2
 84080d8:	840373c0 	call	840373c <__subdf3>
 84080dc:	a80b883a 	mov	r5,r21
 84080e0:	a009883a 	mov	r4,r20
 84080e4:	d8c01915 	stw	r3,100(sp)
 84080e8:	d8801815 	stw	r2,96(sp)
 84080ec:	840cc140 	call	840cc14 <__fixdfsi>
 84080f0:	1009883a 	mov	r4,r2
 84080f4:	1027883a 	mov	r19,r2
 84080f8:	84040f40 	call	84040f4 <__floatsidf>
 84080fc:	a80b883a 	mov	r5,r21
 8408100:	a009883a 	mov	r4,r20
 8408104:	180f883a 	mov	r7,r3
 8408108:	100d883a 	mov	r6,r2
 840810c:	840373c0 	call	840373c <__subdf3>
 8408110:	d9801817 	ldw	r6,96(sp)
 8408114:	1823883a 	mov	r17,r3
 8408118:	d8801415 	stw	r2,80(sp)
 840811c:	302d883a 	mov	r22,r6
 8408120:	d9800517 	ldw	r6,20(sp)
 8408124:	9cc00c04 	addi	r19,r19,48
 8408128:	dc401515 	stw	r17,84(sp)
 840812c:	d8c01917 	ldw	r3,100(sp)
 8408130:	34c00005 	stb	r19,0(r6)
 8408134:	d8800517 	ldw	r2,20(sp)
 8408138:	d9401917 	ldw	r5,100(sp)
 840813c:	d9801417 	ldw	r6,80(sp)
 8408140:	b009883a 	mov	r4,r22
 8408144:	880f883a 	mov	r7,r17
 8408148:	182f883a 	mov	r23,r3
 840814c:	17000044 	addi	fp,r2,1
 8408150:	8403f5c0 	call	8403f5c <__gtdf2>
 8408154:	00804e16 	blt	zero,r2,8408290 <_dtoa_r+0x1158>
 8408158:	d9801417 	ldw	r6,80(sp)
 840815c:	0005883a 	mov	r2,zero
 8408160:	00cffc34 	movhi	r3,16368
 8408164:	180b883a 	mov	r5,r3
 8408168:	880f883a 	mov	r7,r17
 840816c:	1009883a 	mov	r4,r2
 8408170:	840373c0 	call	840373c <__subdf3>
 8408174:	d9401917 	ldw	r5,100(sp)
 8408178:	180f883a 	mov	r7,r3
 840817c:	b009883a 	mov	r4,r22
 8408180:	100d883a 	mov	r6,r2
 8408184:	8403f5c0 	call	8403f5c <__gtdf2>
 8408188:	00bda216 	blt	zero,r2,8407814 <_dtoa_r+0x6dc>
 840818c:	d8c00317 	ldw	r3,12(sp)
 8408190:	00800044 	movi	r2,1
 8408194:	10c01216 	blt	r2,r3,84081e0 <_dtoa_r+0x10a8>
 8408198:	003d4506 	br	84076b0 <_dtoa_r+0x578>
 840819c:	d9801417 	ldw	r6,80(sp)
 84081a0:	0005883a 	mov	r2,zero
 84081a4:	00cffc34 	movhi	r3,16368
 84081a8:	180b883a 	mov	r5,r3
 84081ac:	880f883a 	mov	r7,r17
 84081b0:	1009883a 	mov	r4,r2
 84081b4:	840373c0 	call	840373c <__subdf3>
 84081b8:	d9c01b17 	ldw	r7,108(sp)
 84081bc:	180b883a 	mov	r5,r3
 84081c0:	1009883a 	mov	r4,r2
 84081c4:	b00d883a 	mov	r6,r22
 84081c8:	8403fe40 	call	8403fe4 <__ltdf2>
 84081cc:	103d9116 	blt	r2,zero,8407814 <_dtoa_r+0x6dc>
 84081d0:	d9800517 	ldw	r6,20(sp)
 84081d4:	d9000317 	ldw	r4,12(sp)
 84081d8:	3105883a 	add	r2,r6,r4
 84081dc:	e0bd3426 	beq	fp,r2,84076b0 <_dtoa_r+0x578>
 84081e0:	04500934 	movhi	r17,16420
 84081e4:	0021883a 	mov	r16,zero
 84081e8:	b80b883a 	mov	r5,r23
 84081ec:	b009883a 	mov	r4,r22
 84081f0:	800d883a 	mov	r6,r16
 84081f4:	880f883a 	mov	r7,r17
 84081f8:	84038300 	call	8403830 <__muldf3>
 84081fc:	d9401517 	ldw	r5,84(sp)
 8408200:	d9001417 	ldw	r4,80(sp)
 8408204:	880f883a 	mov	r7,r17
 8408208:	000d883a 	mov	r6,zero
 840820c:	d8801a15 	stw	r2,104(sp)
 8408210:	d8c01b15 	stw	r3,108(sp)
 8408214:	84038300 	call	8403830 <__muldf3>
 8408218:	180b883a 	mov	r5,r3
 840821c:	1009883a 	mov	r4,r2
 8408220:	1823883a 	mov	r17,r3
 8408224:	1021883a 	mov	r16,r2
 8408228:	840cc140 	call	840cc14 <__fixdfsi>
 840822c:	1009883a 	mov	r4,r2
 8408230:	102b883a 	mov	r21,r2
 8408234:	84040f40 	call	84040f4 <__floatsidf>
 8408238:	880b883a 	mov	r5,r17
 840823c:	8009883a 	mov	r4,r16
 8408240:	180f883a 	mov	r7,r3
 8408244:	100d883a 	mov	r6,r2
 8408248:	840373c0 	call	840373c <__subdf3>
 840824c:	1021883a 	mov	r16,r2
 8408250:	d9001b17 	ldw	r4,108(sp)
 8408254:	1823883a 	mov	r17,r3
 8408258:	dc001415 	stw	r16,80(sp)
 840825c:	ad400c04 	addi	r21,r21,48
 8408260:	dc401515 	stw	r17,84(sp)
 8408264:	d8801a17 	ldw	r2,104(sp)
 8408268:	e5400005 	stb	r21,0(fp)
 840826c:	202f883a 	mov	r23,r4
 8408270:	d9c01b17 	ldw	r7,108(sp)
 8408274:	d9001417 	ldw	r4,80(sp)
 8408278:	880b883a 	mov	r5,r17
 840827c:	100d883a 	mov	r6,r2
 8408280:	102d883a 	mov	r22,r2
 8408284:	e7000044 	addi	fp,fp,1
 8408288:	8403fe40 	call	8403fe4 <__ltdf2>
 840828c:	103fc30e 	bge	r2,zero,840819c <_dtoa_r+0x1064>
 8408290:	d9000417 	ldw	r4,16(sp)
 8408294:	d9000d15 	stw	r4,52(sp)
 8408298:	003d7106 	br	8407860 <_dtoa_r+0x728>
 840829c:	d9801717 	ldw	r6,92(sp)
 84082a0:	00800084 	movi	r2,2
 84082a4:	11bde60e 	bge	r2,r6,8407a40 <_dtoa_r+0x908>
 84082a8:	203cfb1e 	bne	r4,zero,8407698 <_dtoa_r+0x560>
 84082ac:	d9001617 	ldw	r4,88(sp)
 84082b0:	900b883a 	mov	r5,r18
 84082b4:	01800144 	movi	r6,5
 84082b8:	000f883a 	mov	r7,zero
 84082bc:	840af800 	call	840af80 <__multadd>
 84082c0:	d9000717 	ldw	r4,28(sp)
 84082c4:	100b883a 	mov	r5,r2
 84082c8:	1025883a 	mov	r18,r2
 84082cc:	840a4280 	call	840a428 <__mcmp>
 84082d0:	00bcf10e 	bge	zero,r2,8407698 <_dtoa_r+0x560>
 84082d4:	d8c00d17 	ldw	r3,52(sp)
 84082d8:	d9000517 	ldw	r4,20(sp)
 84082dc:	d8000615 	stw	zero,24(sp)
 84082e0:	18c00044 	addi	r3,r3,1
 84082e4:	d8c00d15 	stw	r3,52(sp)
 84082e8:	00800c44 	movi	r2,49
 84082ec:	27000044 	addi	fp,r4,1
 84082f0:	20800005 	stb	r2,0(r4)
 84082f4:	003e8906 	br	8407d1c <_dtoa_r+0xbe4>
 84082f8:	d8c00517 	ldw	r3,20(sp)
 84082fc:	003bc206 	br	8407208 <_dtoa_r+0xd0>
 8408300:	01821074 	movhi	r6,2113
 8408304:	31870a04 	addi	r6,r6,7208
 8408308:	30c00917 	ldw	r3,36(r6)
 840830c:	30800817 	ldw	r2,32(r6)
 8408310:	d9001217 	ldw	r4,72(sp)
 8408314:	d9401317 	ldw	r5,76(sp)
 8408318:	180f883a 	mov	r7,r3
 840831c:	100d883a 	mov	r6,r2
 8408320:	8403bf40 	call	8403bf4 <__divdf3>
 8408324:	948003cc 	andi	r18,r18,15
 8408328:	058000c4 	movi	r22,3
 840832c:	1029883a 	mov	r20,r2
 8408330:	182b883a 	mov	r21,r3
 8408334:	003c8906 	br	840755c <_dtoa_r+0x424>
 8408338:	d9001017 	ldw	r4,64(sp)
 840833c:	d9800917 	ldw	r6,36(sp)
 8408340:	0025883a 	mov	r18,zero
 8408344:	1105c83a 	sub	r2,r2,r4
 8408348:	2089883a 	add	r4,r4,r2
 840834c:	308d883a 	add	r6,r6,r2
 8408350:	d9001015 	stw	r4,64(sp)
 8408354:	d9800915 	stw	r6,36(sp)
 8408358:	003e3206 	br	8407c24 <_dtoa_r+0xaec>
 840835c:	28800044 	addi	r2,r5,1
 8408360:	27000044 	addi	fp,r4,1
 8408364:	20800005 	stb	r2,0(r4)
 8408368:	003e6c06 	br	8407d1c <_dtoa_r+0xbe4>
 840836c:	d8800f17 	ldw	r2,60(sp)
 8408370:	00bce016 	blt	zero,r2,84076f4 <_dtoa_r+0x5bc>
 8408374:	d9800f17 	ldw	r6,60(sp)
 8408378:	303cc51e 	bne	r6,zero,8407690 <_dtoa_r+0x558>
 840837c:	0005883a 	mov	r2,zero
 8408380:	00d00534 	movhi	r3,16404
 8408384:	980b883a 	mov	r5,r19
 8408388:	180f883a 	mov	r7,r3
 840838c:	9009883a 	mov	r4,r18
 8408390:	100d883a 	mov	r6,r2
 8408394:	84038300 	call	8403830 <__muldf3>
 8408398:	180b883a 	mov	r5,r3
 840839c:	a80f883a 	mov	r7,r21
 84083a0:	1009883a 	mov	r4,r2
 84083a4:	a00d883a 	mov	r6,r20
 84083a8:	840cb8c0 	call	840cb8c <__gedf2>
 84083ac:	103cb80e 	bge	r2,zero,8407690 <_dtoa_r+0x558>
 84083b0:	0027883a 	mov	r19,zero
 84083b4:	0025883a 	mov	r18,zero
 84083b8:	003fc606 	br	84082d4 <_dtoa_r+0x119c>
 84083bc:	99400117 	ldw	r5,4(r19)
 84083c0:	d9001617 	ldw	r4,88(sp)
 84083c4:	840a84c0 	call	840a84c <_Balloc>
 84083c8:	99800417 	ldw	r6,16(r19)
 84083cc:	11000304 	addi	r4,r2,12
 84083d0:	99400304 	addi	r5,r19,12
 84083d4:	318d883a 	add	r6,r6,r6
 84083d8:	318d883a 	add	r6,r6,r6
 84083dc:	31800204 	addi	r6,r6,8
 84083e0:	1023883a 	mov	r17,r2
 84083e4:	840a0b40 	call	840a0b4 <memcpy>
 84083e8:	d9001617 	ldw	r4,88(sp)
 84083ec:	880b883a 	mov	r5,r17
 84083f0:	01800044 	movi	r6,1
 84083f4:	840ac100 	call	840ac10 <__lshift>
 84083f8:	100b883a 	mov	r5,r2
 84083fc:	003d9c06 	br	8407a70 <_dtoa_r+0x938>
 8408400:	00800e44 	movi	r2,57
 8408404:	b8807026 	beq	r23,r2,84085c8 <_dtoa_r+0x1490>
 8408408:	b8800044 	addi	r2,r23,1
 840840c:	b7000044 	addi	fp,r22,1
 8408410:	b0800005 	stb	r2,0(r22)
 8408414:	003e4106 	br	8407d1c <_dtoa_r+0xbe4>
 8408418:	d8800317 	ldw	r2,12(sp)
 840841c:	01821074 	movhi	r6,2113
 8408420:	3186d804 	addi	r6,r6,7008
 8408424:	b009883a 	mov	r4,r22
 8408428:	100e90fa 	slli	r7,r2,3
 840842c:	b80b883a 	mov	r5,r23
 8408430:	398f883a 	add	r7,r7,r6
 8408434:	38bffe17 	ldw	r2,-8(r7)
 8408438:	d9800517 	ldw	r6,20(sp)
 840843c:	38ffff17 	ldw	r3,-4(r7)
 8408440:	37000044 	addi	fp,r6,1
 8408444:	180f883a 	mov	r7,r3
 8408448:	100d883a 	mov	r6,r2
 840844c:	84038300 	call	8403830 <__muldf3>
 8408450:	a80b883a 	mov	r5,r21
 8408454:	a009883a 	mov	r4,r20
 8408458:	182f883a 	mov	r23,r3
 840845c:	102d883a 	mov	r22,r2
 8408460:	840cc140 	call	840cc14 <__fixdfsi>
 8408464:	1009883a 	mov	r4,r2
 8408468:	1027883a 	mov	r19,r2
 840846c:	84040f40 	call	84040f4 <__floatsidf>
 8408470:	a80b883a 	mov	r5,r21
 8408474:	a009883a 	mov	r4,r20
 8408478:	180f883a 	mov	r7,r3
 840847c:	100d883a 	mov	r6,r2
 8408480:	840373c0 	call	840373c <__subdf3>
 8408484:	180b883a 	mov	r5,r3
 8408488:	d8c00517 	ldw	r3,20(sp)
 840848c:	9cc00c04 	addi	r19,r19,48
 8408490:	1009883a 	mov	r4,r2
 8408494:	1cc00005 	stb	r19,0(r3)
 8408498:	2021883a 	mov	r16,r4
 840849c:	d9000317 	ldw	r4,12(sp)
 84084a0:	00800044 	movi	r2,1
 84084a4:	2823883a 	mov	r17,r5
 84084a8:	20802226 	beq	r4,r2,8408534 <_dtoa_r+0x13fc>
 84084ac:	1029883a 	mov	r20,r2
 84084b0:	0005883a 	mov	r2,zero
 84084b4:	00d00934 	movhi	r3,16420
 84084b8:	180f883a 	mov	r7,r3
 84084bc:	100d883a 	mov	r6,r2
 84084c0:	880b883a 	mov	r5,r17
 84084c4:	8009883a 	mov	r4,r16
 84084c8:	84038300 	call	8403830 <__muldf3>
 84084cc:	180b883a 	mov	r5,r3
 84084d0:	1009883a 	mov	r4,r2
 84084d4:	1823883a 	mov	r17,r3
 84084d8:	1021883a 	mov	r16,r2
 84084dc:	840cc140 	call	840cc14 <__fixdfsi>
 84084e0:	1009883a 	mov	r4,r2
 84084e4:	102b883a 	mov	r21,r2
 84084e8:	84040f40 	call	84040f4 <__floatsidf>
 84084ec:	880b883a 	mov	r5,r17
 84084f0:	8009883a 	mov	r4,r16
 84084f4:	180f883a 	mov	r7,r3
 84084f8:	100d883a 	mov	r6,r2
 84084fc:	840373c0 	call	840373c <__subdf3>
 8408500:	180b883a 	mov	r5,r3
 8408504:	d8c00517 	ldw	r3,20(sp)
 8408508:	1009883a 	mov	r4,r2
 840850c:	ad400c04 	addi	r21,r21,48
 8408510:	1d05883a 	add	r2,r3,r20
 8408514:	15400005 	stb	r21,0(r2)
 8408518:	2021883a 	mov	r16,r4
 840851c:	d9000317 	ldw	r4,12(sp)
 8408520:	a5000044 	addi	r20,r20,1
 8408524:	2823883a 	mov	r17,r5
 8408528:	a13fe11e 	bne	r20,r4,84084b0 <_dtoa_r+0x1378>
 840852c:	e505883a 	add	r2,fp,r20
 8408530:	173fffc4 	addi	fp,r2,-1
 8408534:	0025883a 	mov	r18,zero
 8408538:	04cff834 	movhi	r19,16352
 840853c:	b009883a 	mov	r4,r22
 8408540:	b80b883a 	mov	r5,r23
 8408544:	900d883a 	mov	r6,r18
 8408548:	980f883a 	mov	r7,r19
 840854c:	84037bc0 	call	84037bc <__adddf3>
 8408550:	180b883a 	mov	r5,r3
 8408554:	1009883a 	mov	r4,r2
 8408558:	800d883a 	mov	r6,r16
 840855c:	880f883a 	mov	r7,r17
 8408560:	8403fe40 	call	8403fe4 <__ltdf2>
 8408564:	103cab16 	blt	r2,zero,8407814 <_dtoa_r+0x6dc>
 8408568:	0009883a 	mov	r4,zero
 840856c:	980b883a 	mov	r5,r19
 8408570:	b80f883a 	mov	r7,r23
 8408574:	b00d883a 	mov	r6,r22
 8408578:	840373c0 	call	840373c <__subdf3>
 840857c:	180b883a 	mov	r5,r3
 8408580:	880f883a 	mov	r7,r17
 8408584:	1009883a 	mov	r4,r2
 8408588:	800d883a 	mov	r6,r16
 840858c:	8403f5c0 	call	8403f5c <__gtdf2>
 8408590:	00bc470e 	bge	zero,r2,84076b0 <_dtoa_r+0x578>
 8408594:	00c00c04 	movi	r3,48
 8408598:	e73fffc4 	addi	fp,fp,-1
 840859c:	e0800007 	ldb	r2,0(fp)
 84085a0:	10fffd26 	beq	r2,r3,8408598 <_dtoa_r+0x1460>
 84085a4:	d9800417 	ldw	r6,16(sp)
 84085a8:	e7000044 	addi	fp,fp,1
 84085ac:	d9800d15 	stw	r6,52(sp)
 84085b0:	003cab06 	br	8407860 <_dtoa_r+0x728>
 84085b4:	d8c00f17 	ldw	r3,60(sp)
 84085b8:	d9001117 	ldw	r4,68(sp)
 84085bc:	20e1c83a 	sub	r16,r4,r3
 84085c0:	0007883a 	mov	r3,zero
 84085c4:	003d9b06 	br	8407c34 <_dtoa_r+0xafc>
 84085c8:	00800e44 	movi	r2,57
 84085cc:	b0800005 	stb	r2,0(r22)
 84085d0:	b5800044 	addi	r22,r22,1
 84085d4:	003dc106 	br	8407cdc <_dtoa_r+0xba4>
 84085d8:	05800084 	movi	r22,2
 84085dc:	003bf706 	br	84075bc <_dtoa_r+0x484>
 84085e0:	d9000f17 	ldw	r4,60(sp)
 84085e4:	013c000e 	bge	zero,r4,84075e8 <_dtoa_r+0x4b0>
 84085e8:	d9800e17 	ldw	r6,56(sp)
 84085ec:	01bc300e 	bge	zero,r6,84076b0 <_dtoa_r+0x578>
 84085f0:	0005883a 	mov	r2,zero
 84085f4:	00d00934 	movhi	r3,16420
 84085f8:	a80b883a 	mov	r5,r21
 84085fc:	180f883a 	mov	r7,r3
 8408600:	a009883a 	mov	r4,r20
 8408604:	100d883a 	mov	r6,r2
 8408608:	84038300 	call	8403830 <__muldf3>
 840860c:	b1000044 	addi	r4,r22,1
 8408610:	1021883a 	mov	r16,r2
 8408614:	1823883a 	mov	r17,r3
 8408618:	84040f40 	call	84040f4 <__floatsidf>
 840861c:	880b883a 	mov	r5,r17
 8408620:	8009883a 	mov	r4,r16
 8408624:	180f883a 	mov	r7,r3
 8408628:	100d883a 	mov	r6,r2
 840862c:	84038300 	call	8403830 <__muldf3>
 8408630:	0011883a 	mov	r8,zero
 8408634:	02500734 	movhi	r9,16412
 8408638:	180b883a 	mov	r5,r3
 840863c:	480f883a 	mov	r7,r9
 8408640:	1009883a 	mov	r4,r2
 8408644:	400d883a 	mov	r6,r8
 8408648:	84037bc0 	call	84037bc <__adddf3>
 840864c:	102d883a 	mov	r22,r2
 8408650:	00bf3034 	movhi	r2,64704
 8408654:	10ef883a 	add	r23,r2,r3
 8408658:	d8800d17 	ldw	r2,52(sp)
 840865c:	d8c00e17 	ldw	r3,56(sp)
 8408660:	8029883a 	mov	r20,r16
 8408664:	10bfffc4 	addi	r2,r2,-1
 8408668:	882b883a 	mov	r21,r17
 840866c:	d8800415 	stw	r2,16(sp)
 8408670:	d8c00315 	stw	r3,12(sp)
 8408674:	003e8306 	br	8408084 <_dtoa_r+0xf4c>
 8408678:	d8800117 	ldw	r2,4(sp)
 840867c:	dc001117 	ldw	r16,68(sp)
 8408680:	dc801017 	ldw	r18,64(sp)
 8408684:	00c00d84 	movi	r3,54
 8408688:	1887c83a 	sub	r3,r3,r2
 840868c:	003d6906 	br	8407c34 <_dtoa_r+0xafc>
 8408690:	01800044 	movi	r6,1
 8408694:	3021883a 	mov	r16,r6
 8408698:	d9800f15 	stw	r6,60(sp)
 840869c:	d9802615 	stw	r6,152(sp)
 84086a0:	d9800e15 	stw	r6,56(sp)
 84086a4:	003b9306 	br	84074f4 <_dtoa_r+0x3bc>
 84086a8:	b021883a 	mov	r16,r22
 84086ac:	dd800f15 	stw	r22,60(sp)
 84086b0:	003b9006 	br	84074f4 <_dtoa_r+0x3bc>
 84086b4:	103e221e 	bne	r2,zero,8407f40 <_dtoa_r+0xe08>
 84086b8:	b880004c 	andi	r2,r23,1
 84086bc:	1005003a 	cmpeq	r2,r2,zero
 84086c0:	103e1f1e 	bne	r2,zero,8407f40 <_dtoa_r+0xe08>
 84086c4:	003e1b06 	br	8407f34 <_dtoa_r+0xdfc>
 84086c8:	d9001617 	ldw	r4,88(sp)
 84086cc:	980b883a 	mov	r5,r19
 84086d0:	01800284 	movi	r6,10
 84086d4:	000f883a 	mov	r7,zero
 84086d8:	840af800 	call	840af80 <__multadd>
 84086dc:	d8c00e17 	ldw	r3,56(sp)
 84086e0:	1027883a 	mov	r19,r2
 84086e4:	d8c00f15 	stw	r3,60(sp)
 84086e8:	003cd306 	br	8407a38 <_dtoa_r+0x900>

084086ec <_fflush_r>:
 84086ec:	defffb04 	addi	sp,sp,-20
 84086f0:	dcc00315 	stw	r19,12(sp)
 84086f4:	dc800215 	stw	r18,8(sp)
 84086f8:	dfc00415 	stw	ra,16(sp)
 84086fc:	dc400115 	stw	r17,4(sp)
 8408700:	dc000015 	stw	r16,0(sp)
 8408704:	2027883a 	mov	r19,r4
 8408708:	2825883a 	mov	r18,r5
 840870c:	20000226 	beq	r4,zero,8408718 <_fflush_r+0x2c>
 8408710:	20800e17 	ldw	r2,56(r4)
 8408714:	10005626 	beq	r2,zero,8408870 <_fflush_r+0x184>
 8408718:	9100030b 	ldhu	r4,12(r18)
 840871c:	20ffffcc 	andi	r3,r4,65535
 8408720:	18e0001c 	xori	r3,r3,32768
 8408724:	18e00004 	addi	r3,r3,-32768
 8408728:	1880020c 	andi	r2,r3,8
 840872c:	1000261e 	bne	r2,zero,84087c8 <_fflush_r+0xdc>
 8408730:	90c00117 	ldw	r3,4(r18)
 8408734:	20820014 	ori	r2,r4,2048
 8408738:	9080030d 	sth	r2,12(r18)
 840873c:	1009883a 	mov	r4,r2
 8408740:	00c0400e 	bge	zero,r3,8408844 <_fflush_r+0x158>
 8408744:	92000a17 	ldw	r8,40(r18)
 8408748:	40004026 	beq	r8,zero,840884c <_fflush_r+0x160>
 840874c:	2084000c 	andi	r2,r4,4096
 8408750:	10005326 	beq	r2,zero,84088a0 <_fflush_r+0x1b4>
 8408754:	94001417 	ldw	r16,80(r18)
 8408758:	9080030b 	ldhu	r2,12(r18)
 840875c:	1080010c 	andi	r2,r2,4
 8408760:	1000481e 	bne	r2,zero,8408884 <_fflush_r+0x198>
 8408764:	91400717 	ldw	r5,28(r18)
 8408768:	9809883a 	mov	r4,r19
 840876c:	800d883a 	mov	r6,r16
 8408770:	000f883a 	mov	r7,zero
 8408774:	403ee83a 	callr	r8
 8408778:	8080261e 	bne	r16,r2,8408814 <_fflush_r+0x128>
 840877c:	9080030b 	ldhu	r2,12(r18)
 8408780:	91000417 	ldw	r4,16(r18)
 8408784:	90000115 	stw	zero,4(r18)
 8408788:	10bdffcc 	andi	r2,r2,63487
 840878c:	10ffffcc 	andi	r3,r2,65535
 8408790:	18c4000c 	andi	r3,r3,4096
 8408794:	9080030d 	sth	r2,12(r18)
 8408798:	91000015 	stw	r4,0(r18)
 840879c:	18002b26 	beq	r3,zero,840884c <_fflush_r+0x160>
 84087a0:	0007883a 	mov	r3,zero
 84087a4:	1805883a 	mov	r2,r3
 84087a8:	94001415 	stw	r16,80(r18)
 84087ac:	dfc00417 	ldw	ra,16(sp)
 84087b0:	dcc00317 	ldw	r19,12(sp)
 84087b4:	dc800217 	ldw	r18,8(sp)
 84087b8:	dc400117 	ldw	r17,4(sp)
 84087bc:	dc000017 	ldw	r16,0(sp)
 84087c0:	dec00504 	addi	sp,sp,20
 84087c4:	f800283a 	ret
 84087c8:	94400417 	ldw	r17,16(r18)
 84087cc:	88001f26 	beq	r17,zero,840884c <_fflush_r+0x160>
 84087d0:	90800017 	ldw	r2,0(r18)
 84087d4:	18c000cc 	andi	r3,r3,3
 84087d8:	94400015 	stw	r17,0(r18)
 84087dc:	1461c83a 	sub	r16,r2,r17
 84087e0:	18002526 	beq	r3,zero,8408878 <_fflush_r+0x18c>
 84087e4:	0005883a 	mov	r2,zero
 84087e8:	90800215 	stw	r2,8(r18)
 84087ec:	0400170e 	bge	zero,r16,840884c <_fflush_r+0x160>
 84087f0:	90c00917 	ldw	r3,36(r18)
 84087f4:	91400717 	ldw	r5,28(r18)
 84087f8:	880d883a 	mov	r6,r17
 84087fc:	800f883a 	mov	r7,r16
 8408800:	9809883a 	mov	r4,r19
 8408804:	183ee83a 	callr	r3
 8408808:	88a3883a 	add	r17,r17,r2
 840880c:	80a1c83a 	sub	r16,r16,r2
 8408810:	00bff616 	blt	zero,r2,84087ec <_fflush_r+0x100>
 8408814:	9080030b 	ldhu	r2,12(r18)
 8408818:	00ffffc4 	movi	r3,-1
 840881c:	10801014 	ori	r2,r2,64
 8408820:	9080030d 	sth	r2,12(r18)
 8408824:	1805883a 	mov	r2,r3
 8408828:	dfc00417 	ldw	ra,16(sp)
 840882c:	dcc00317 	ldw	r19,12(sp)
 8408830:	dc800217 	ldw	r18,8(sp)
 8408834:	dc400117 	ldw	r17,4(sp)
 8408838:	dc000017 	ldw	r16,0(sp)
 840883c:	dec00504 	addi	sp,sp,20
 8408840:	f800283a 	ret
 8408844:	90800f17 	ldw	r2,60(r18)
 8408848:	00bfbe16 	blt	zero,r2,8408744 <_fflush_r+0x58>
 840884c:	0007883a 	mov	r3,zero
 8408850:	1805883a 	mov	r2,r3
 8408854:	dfc00417 	ldw	ra,16(sp)
 8408858:	dcc00317 	ldw	r19,12(sp)
 840885c:	dc800217 	ldw	r18,8(sp)
 8408860:	dc400117 	ldw	r17,4(sp)
 8408864:	dc000017 	ldw	r16,0(sp)
 8408868:	dec00504 	addi	sp,sp,20
 840886c:	f800283a 	ret
 8408870:	84089840 	call	8408984 <__sinit>
 8408874:	003fa806 	br	8408718 <_fflush_r+0x2c>
 8408878:	90800517 	ldw	r2,20(r18)
 840887c:	90800215 	stw	r2,8(r18)
 8408880:	003fda06 	br	84087ec <_fflush_r+0x100>
 8408884:	90800117 	ldw	r2,4(r18)
 8408888:	90c00c17 	ldw	r3,48(r18)
 840888c:	80a1c83a 	sub	r16,r16,r2
 8408890:	183fb426 	beq	r3,zero,8408764 <_fflush_r+0x78>
 8408894:	90800f17 	ldw	r2,60(r18)
 8408898:	80a1c83a 	sub	r16,r16,r2
 840889c:	003fb106 	br	8408764 <_fflush_r+0x78>
 84088a0:	91400717 	ldw	r5,28(r18)
 84088a4:	9809883a 	mov	r4,r19
 84088a8:	000d883a 	mov	r6,zero
 84088ac:	01c00044 	movi	r7,1
 84088b0:	403ee83a 	callr	r8
 84088b4:	1021883a 	mov	r16,r2
 84088b8:	00bfffc4 	movi	r2,-1
 84088bc:	80800226 	beq	r16,r2,84088c8 <_fflush_r+0x1dc>
 84088c0:	92000a17 	ldw	r8,40(r18)
 84088c4:	003fa406 	br	8408758 <_fflush_r+0x6c>
 84088c8:	98c00017 	ldw	r3,0(r19)
 84088cc:	00800744 	movi	r2,29
 84088d0:	18bfde26 	beq	r3,r2,840884c <_fflush_r+0x160>
 84088d4:	9080030b 	ldhu	r2,12(r18)
 84088d8:	8007883a 	mov	r3,r16
 84088dc:	10801014 	ori	r2,r2,64
 84088e0:	9080030d 	sth	r2,12(r18)
 84088e4:	003fcf06 	br	8408824 <_fflush_r+0x138>

084088e8 <fflush>:
 84088e8:	01421074 	movhi	r5,2113
 84088ec:	2961bb04 	addi	r5,r5,-30996
 84088f0:	2007883a 	mov	r3,r4
 84088f4:	20000526 	beq	r4,zero,840890c <fflush+0x24>
 84088f8:	00821074 	movhi	r2,2113
 84088fc:	108e5204 	addi	r2,r2,14664
 8408900:	11000017 	ldw	r4,0(r2)
 8408904:	180b883a 	mov	r5,r3
 8408908:	84086ec1 	jmpi	84086ec <_fflush_r>
 840890c:	00821074 	movhi	r2,2113
 8408910:	108e5304 	addi	r2,r2,14668
 8408914:	11000017 	ldw	r4,0(r2)
 8408918:	84094b81 	jmpi	84094b8 <_fwalk_reent>

0840891c <std>:
 840891c:	00821074 	movhi	r2,2113
 8408920:	10ae5904 	addi	r2,r2,-18076
 8408924:	20800b15 	stw	r2,44(r4)
 8408928:	00821074 	movhi	r2,2113
 840892c:	10ae9404 	addi	r2,r2,-17840
 8408930:	20800815 	stw	r2,32(r4)
 8408934:	00c21074 	movhi	r3,2113
 8408938:	18ee7504 	addi	r3,r3,-17964
 840893c:	00821074 	movhi	r2,2113
 8408940:	10ae5b04 	addi	r2,r2,-18068
 8408944:	2140030d 	sth	r5,12(r4)
 8408948:	2180038d 	sth	r6,14(r4)
 840894c:	20c00915 	stw	r3,36(r4)
 8408950:	20800a15 	stw	r2,40(r4)
 8408954:	20000015 	stw	zero,0(r4)
 8408958:	20000115 	stw	zero,4(r4)
 840895c:	20000215 	stw	zero,8(r4)
 8408960:	20000415 	stw	zero,16(r4)
 8408964:	20000515 	stw	zero,20(r4)
 8408968:	20000615 	stw	zero,24(r4)
 840896c:	21000715 	stw	r4,28(r4)
 8408970:	f800283a 	ret

08408974 <__sfp_lock_acquire>:
 8408974:	f800283a 	ret

08408978 <__sfp_lock_release>:
 8408978:	f800283a 	ret

0840897c <__sinit_lock_acquire>:
 840897c:	f800283a 	ret

08408980 <__sinit_lock_release>:
 8408980:	f800283a 	ret

08408984 <__sinit>:
 8408984:	20800e17 	ldw	r2,56(r4)
 8408988:	defffd04 	addi	sp,sp,-12
 840898c:	dc400115 	stw	r17,4(sp)
 8408990:	dc000015 	stw	r16,0(sp)
 8408994:	dfc00215 	stw	ra,8(sp)
 8408998:	04400044 	movi	r17,1
 840899c:	01400104 	movi	r5,4
 84089a0:	000d883a 	mov	r6,zero
 84089a4:	2021883a 	mov	r16,r4
 84089a8:	2200bb04 	addi	r8,r4,748
 84089ac:	200f883a 	mov	r7,r4
 84089b0:	10000526 	beq	r2,zero,84089c8 <__sinit+0x44>
 84089b4:	dfc00217 	ldw	ra,8(sp)
 84089b8:	dc400117 	ldw	r17,4(sp)
 84089bc:	dc000017 	ldw	r16,0(sp)
 84089c0:	dec00304 	addi	sp,sp,12
 84089c4:	f800283a 	ret
 84089c8:	21000117 	ldw	r4,4(r4)
 84089cc:	00821074 	movhi	r2,2113
 84089d0:	10a29a04 	addi	r2,r2,-30104
 84089d4:	00c000c4 	movi	r3,3
 84089d8:	80800f15 	stw	r2,60(r16)
 84089dc:	80c0b915 	stw	r3,740(r16)
 84089e0:	8200ba15 	stw	r8,744(r16)
 84089e4:	84400e15 	stw	r17,56(r16)
 84089e8:	8000b815 	stw	zero,736(r16)
 84089ec:	840891c0 	call	840891c <std>
 84089f0:	81000217 	ldw	r4,8(r16)
 84089f4:	880d883a 	mov	r6,r17
 84089f8:	800f883a 	mov	r7,r16
 84089fc:	01400284 	movi	r5,10
 8408a00:	840891c0 	call	840891c <std>
 8408a04:	81000317 	ldw	r4,12(r16)
 8408a08:	800f883a 	mov	r7,r16
 8408a0c:	01400484 	movi	r5,18
 8408a10:	01800084 	movi	r6,2
 8408a14:	dfc00217 	ldw	ra,8(sp)
 8408a18:	dc400117 	ldw	r17,4(sp)
 8408a1c:	dc000017 	ldw	r16,0(sp)
 8408a20:	dec00304 	addi	sp,sp,12
 8408a24:	840891c1 	jmpi	840891c <std>

08408a28 <__fp_lock>:
 8408a28:	0005883a 	mov	r2,zero
 8408a2c:	f800283a 	ret

08408a30 <__fp_unlock>:
 8408a30:	0005883a 	mov	r2,zero
 8408a34:	f800283a 	ret

08408a38 <__fp_unlock_all>:
 8408a38:	00821074 	movhi	r2,2113
 8408a3c:	108e5204 	addi	r2,r2,14664
 8408a40:	11000017 	ldw	r4,0(r2)
 8408a44:	01421074 	movhi	r5,2113
 8408a48:	29628c04 	addi	r5,r5,-30160
 8408a4c:	84095801 	jmpi	8409580 <_fwalk>

08408a50 <__fp_lock_all>:
 8408a50:	00821074 	movhi	r2,2113
 8408a54:	108e5204 	addi	r2,r2,14664
 8408a58:	11000017 	ldw	r4,0(r2)
 8408a5c:	01421074 	movhi	r5,2113
 8408a60:	29628a04 	addi	r5,r5,-30168
 8408a64:	84095801 	jmpi	8409580 <_fwalk>

08408a68 <_cleanup_r>:
 8408a68:	01421074 	movhi	r5,2113
 8408a6c:	296f8604 	addi	r5,r5,-16872
 8408a70:	84095801 	jmpi	8409580 <_fwalk>

08408a74 <_cleanup>:
 8408a74:	00821074 	movhi	r2,2113
 8408a78:	108e5304 	addi	r2,r2,14668
 8408a7c:	11000017 	ldw	r4,0(r2)
 8408a80:	8408a681 	jmpi	8408a68 <_cleanup_r>

08408a84 <__sfmoreglue>:
 8408a84:	defffc04 	addi	sp,sp,-16
 8408a88:	dc400115 	stw	r17,4(sp)
 8408a8c:	2c401724 	muli	r17,r5,92
 8408a90:	dc800215 	stw	r18,8(sp)
 8408a94:	2825883a 	mov	r18,r5
 8408a98:	89400304 	addi	r5,r17,12
 8408a9c:	dc000015 	stw	r16,0(sp)
 8408aa0:	dfc00315 	stw	ra,12(sp)
 8408aa4:	84098900 	call	8409890 <_malloc_r>
 8408aa8:	0021883a 	mov	r16,zero
 8408aac:	880d883a 	mov	r6,r17
 8408ab0:	000b883a 	mov	r5,zero
 8408ab4:	10000626 	beq	r2,zero,8408ad0 <__sfmoreglue+0x4c>
 8408ab8:	11000304 	addi	r4,r2,12
 8408abc:	14800115 	stw	r18,4(r2)
 8408ac0:	10000015 	stw	zero,0(r2)
 8408ac4:	11000215 	stw	r4,8(r2)
 8408ac8:	1021883a 	mov	r16,r2
 8408acc:	840a2340 	call	840a234 <memset>
 8408ad0:	8005883a 	mov	r2,r16
 8408ad4:	dfc00317 	ldw	ra,12(sp)
 8408ad8:	dc800217 	ldw	r18,8(sp)
 8408adc:	dc400117 	ldw	r17,4(sp)
 8408ae0:	dc000017 	ldw	r16,0(sp)
 8408ae4:	dec00404 	addi	sp,sp,16
 8408ae8:	f800283a 	ret

08408aec <__sfp>:
 8408aec:	defffd04 	addi	sp,sp,-12
 8408af0:	00821074 	movhi	r2,2113
 8408af4:	108e5304 	addi	r2,r2,14668
 8408af8:	dc000015 	stw	r16,0(sp)
 8408afc:	14000017 	ldw	r16,0(r2)
 8408b00:	dc400115 	stw	r17,4(sp)
 8408b04:	dfc00215 	stw	ra,8(sp)
 8408b08:	80800e17 	ldw	r2,56(r16)
 8408b0c:	2023883a 	mov	r17,r4
 8408b10:	10002626 	beq	r2,zero,8408bac <__sfp+0xc0>
 8408b14:	8400b804 	addi	r16,r16,736
 8408b18:	80800117 	ldw	r2,4(r16)
 8408b1c:	81000217 	ldw	r4,8(r16)
 8408b20:	10ffffc4 	addi	r3,r2,-1
 8408b24:	18000916 	blt	r3,zero,8408b4c <__sfp+0x60>
 8408b28:	2080030f 	ldh	r2,12(r4)
 8408b2c:	10000b26 	beq	r2,zero,8408b5c <__sfp+0x70>
 8408b30:	017fffc4 	movi	r5,-1
 8408b34:	00000206 	br	8408b40 <__sfp+0x54>
 8408b38:	2080030f 	ldh	r2,12(r4)
 8408b3c:	10000726 	beq	r2,zero,8408b5c <__sfp+0x70>
 8408b40:	18ffffc4 	addi	r3,r3,-1
 8408b44:	21001704 	addi	r4,r4,92
 8408b48:	197ffb1e 	bne	r3,r5,8408b38 <__sfp+0x4c>
 8408b4c:	80800017 	ldw	r2,0(r16)
 8408b50:	10001926 	beq	r2,zero,8408bb8 <__sfp+0xcc>
 8408b54:	1021883a 	mov	r16,r2
 8408b58:	003fef06 	br	8408b18 <__sfp+0x2c>
 8408b5c:	00bfffc4 	movi	r2,-1
 8408b60:	00c00044 	movi	r3,1
 8408b64:	2080038d 	sth	r2,14(r4)
 8408b68:	20c0030d 	sth	r3,12(r4)
 8408b6c:	20000015 	stw	zero,0(r4)
 8408b70:	20000215 	stw	zero,8(r4)
 8408b74:	20000115 	stw	zero,4(r4)
 8408b78:	20000415 	stw	zero,16(r4)
 8408b7c:	20000515 	stw	zero,20(r4)
 8408b80:	20000615 	stw	zero,24(r4)
 8408b84:	20000c15 	stw	zero,48(r4)
 8408b88:	20000d15 	stw	zero,52(r4)
 8408b8c:	20001115 	stw	zero,68(r4)
 8408b90:	20001215 	stw	zero,72(r4)
 8408b94:	2005883a 	mov	r2,r4
 8408b98:	dfc00217 	ldw	ra,8(sp)
 8408b9c:	dc400117 	ldw	r17,4(sp)
 8408ba0:	dc000017 	ldw	r16,0(sp)
 8408ba4:	dec00304 	addi	sp,sp,12
 8408ba8:	f800283a 	ret
 8408bac:	8009883a 	mov	r4,r16
 8408bb0:	84089840 	call	8408984 <__sinit>
 8408bb4:	003fd706 	br	8408b14 <__sfp+0x28>
 8408bb8:	8809883a 	mov	r4,r17
 8408bbc:	01400104 	movi	r5,4
 8408bc0:	8408a840 	call	8408a84 <__sfmoreglue>
 8408bc4:	80800015 	stw	r2,0(r16)
 8408bc8:	103fe21e 	bne	r2,zero,8408b54 <__sfp+0x68>
 8408bcc:	00800304 	movi	r2,12
 8408bd0:	0009883a 	mov	r4,zero
 8408bd4:	88800015 	stw	r2,0(r17)
 8408bd8:	003fee06 	br	8408b94 <__sfp+0xa8>

08408bdc <_malloc_trim_r>:
 8408bdc:	defffb04 	addi	sp,sp,-20
 8408be0:	dcc00315 	stw	r19,12(sp)
 8408be4:	04c21074 	movhi	r19,2113
 8408be8:	9cc87904 	addi	r19,r19,8676
 8408bec:	dc800215 	stw	r18,8(sp)
 8408bf0:	dc400115 	stw	r17,4(sp)
 8408bf4:	dc000015 	stw	r16,0(sp)
 8408bf8:	2823883a 	mov	r17,r5
 8408bfc:	2025883a 	mov	r18,r4
 8408c00:	dfc00415 	stw	ra,16(sp)
 8408c04:	840d5040 	call	840d504 <__malloc_lock>
 8408c08:	98800217 	ldw	r2,8(r19)
 8408c0c:	9009883a 	mov	r4,r18
 8408c10:	000b883a 	mov	r5,zero
 8408c14:	10c00117 	ldw	r3,4(r2)
 8408c18:	00bfff04 	movi	r2,-4
 8408c1c:	18a0703a 	and	r16,r3,r2
 8408c20:	8463c83a 	sub	r17,r16,r17
 8408c24:	8c43fbc4 	addi	r17,r17,4079
 8408c28:	8822d33a 	srli	r17,r17,12
 8408c2c:	0083ffc4 	movi	r2,4095
 8408c30:	8c7fffc4 	addi	r17,r17,-1
 8408c34:	8822933a 	slli	r17,r17,12
 8408c38:	1440060e 	bge	r2,r17,8408c54 <_malloc_trim_r+0x78>
 8408c3c:	840b8f40 	call	840b8f4 <_sbrk_r>
 8408c40:	98c00217 	ldw	r3,8(r19)
 8408c44:	9009883a 	mov	r4,r18
 8408c48:	044bc83a 	sub	r5,zero,r17
 8408c4c:	80c7883a 	add	r3,r16,r3
 8408c50:	10c00926 	beq	r2,r3,8408c78 <_malloc_trim_r+0x9c>
 8408c54:	840d5240 	call	840d524 <__malloc_unlock>
 8408c58:	0005883a 	mov	r2,zero
 8408c5c:	dfc00417 	ldw	ra,16(sp)
 8408c60:	dcc00317 	ldw	r19,12(sp)
 8408c64:	dc800217 	ldw	r18,8(sp)
 8408c68:	dc400117 	ldw	r17,4(sp)
 8408c6c:	dc000017 	ldw	r16,0(sp)
 8408c70:	dec00504 	addi	sp,sp,20
 8408c74:	f800283a 	ret
 8408c78:	9009883a 	mov	r4,r18
 8408c7c:	840b8f40 	call	840b8f4 <_sbrk_r>
 8408c80:	844dc83a 	sub	r6,r16,r17
 8408c84:	00ffffc4 	movi	r3,-1
 8408c88:	9009883a 	mov	r4,r18
 8408c8c:	000b883a 	mov	r5,zero
 8408c90:	01c21074 	movhi	r7,2113
 8408c94:	39d56b04 	addi	r7,r7,21932
 8408c98:	31800054 	ori	r6,r6,1
 8408c9c:	10c00926 	beq	r2,r3,8408cc4 <_malloc_trim_r+0xe8>
 8408ca0:	38800017 	ldw	r2,0(r7)
 8408ca4:	98c00217 	ldw	r3,8(r19)
 8408ca8:	9009883a 	mov	r4,r18
 8408cac:	1445c83a 	sub	r2,r2,r17
 8408cb0:	38800015 	stw	r2,0(r7)
 8408cb4:	19800115 	stw	r6,4(r3)
 8408cb8:	840d5240 	call	840d524 <__malloc_unlock>
 8408cbc:	00800044 	movi	r2,1
 8408cc0:	003fe606 	br	8408c5c <_malloc_trim_r+0x80>
 8408cc4:	840b8f40 	call	840b8f4 <_sbrk_r>
 8408cc8:	99800217 	ldw	r6,8(r19)
 8408ccc:	100f883a 	mov	r7,r2
 8408cd0:	9009883a 	mov	r4,r18
 8408cd4:	1187c83a 	sub	r3,r2,r6
 8408cd8:	008003c4 	movi	r2,15
 8408cdc:	19400054 	ori	r5,r3,1
 8408ce0:	10ffdc0e 	bge	r2,r3,8408c54 <_malloc_trim_r+0x78>
 8408ce4:	00821074 	movhi	r2,2113
 8408ce8:	108e5704 	addi	r2,r2,14684
 8408cec:	10c00017 	ldw	r3,0(r2)
 8408cf0:	00821074 	movhi	r2,2113
 8408cf4:	10956b04 	addi	r2,r2,21932
 8408cf8:	31400115 	stw	r5,4(r6)
 8408cfc:	38c7c83a 	sub	r3,r7,r3
 8408d00:	10c00015 	stw	r3,0(r2)
 8408d04:	003fd306 	br	8408c54 <_malloc_trim_r+0x78>

08408d08 <_free_r>:
 8408d08:	defffd04 	addi	sp,sp,-12
 8408d0c:	dc400115 	stw	r17,4(sp)
 8408d10:	dc000015 	stw	r16,0(sp)
 8408d14:	dfc00215 	stw	ra,8(sp)
 8408d18:	2821883a 	mov	r16,r5
 8408d1c:	2023883a 	mov	r17,r4
 8408d20:	28005a26 	beq	r5,zero,8408e8c <_free_r+0x184>
 8408d24:	840d5040 	call	840d504 <__malloc_lock>
 8408d28:	823ffe04 	addi	r8,r16,-8
 8408d2c:	41400117 	ldw	r5,4(r8)
 8408d30:	00bfff84 	movi	r2,-2
 8408d34:	02821074 	movhi	r10,2113
 8408d38:	52887904 	addi	r10,r10,8676
 8408d3c:	288e703a 	and	r7,r5,r2
 8408d40:	41cd883a 	add	r6,r8,r7
 8408d44:	30c00117 	ldw	r3,4(r6)
 8408d48:	51000217 	ldw	r4,8(r10)
 8408d4c:	00bfff04 	movi	r2,-4
 8408d50:	1892703a 	and	r9,r3,r2
 8408d54:	5017883a 	mov	r11,r10
 8408d58:	31006726 	beq	r6,r4,8408ef8 <_free_r+0x1f0>
 8408d5c:	2880004c 	andi	r2,r5,1
 8408d60:	1005003a 	cmpeq	r2,r2,zero
 8408d64:	32400115 	stw	r9,4(r6)
 8408d68:	10001a1e 	bne	r2,zero,8408dd4 <_free_r+0xcc>
 8408d6c:	000b883a 	mov	r5,zero
 8408d70:	3247883a 	add	r3,r6,r9
 8408d74:	18800117 	ldw	r2,4(r3)
 8408d78:	1080004c 	andi	r2,r2,1
 8408d7c:	1000231e 	bne	r2,zero,8408e0c <_free_r+0x104>
 8408d80:	280ac03a 	cmpne	r5,r5,zero
 8408d84:	3a4f883a 	add	r7,r7,r9
 8408d88:	2800451e 	bne	r5,zero,8408ea0 <_free_r+0x198>
 8408d8c:	31000217 	ldw	r4,8(r6)
 8408d90:	00821074 	movhi	r2,2113
 8408d94:	10887b04 	addi	r2,r2,8684
 8408d98:	20807b26 	beq	r4,r2,8408f88 <_free_r+0x280>
 8408d9c:	30800317 	ldw	r2,12(r6)
 8408da0:	3a07883a 	add	r3,r7,r8
 8408da4:	19c00015 	stw	r7,0(r3)
 8408da8:	11000215 	stw	r4,8(r2)
 8408dac:	20800315 	stw	r2,12(r4)
 8408db0:	38800054 	ori	r2,r7,1
 8408db4:	40800115 	stw	r2,4(r8)
 8408db8:	28001a26 	beq	r5,zero,8408e24 <_free_r+0x11c>
 8408dbc:	8809883a 	mov	r4,r17
 8408dc0:	dfc00217 	ldw	ra,8(sp)
 8408dc4:	dc400117 	ldw	r17,4(sp)
 8408dc8:	dc000017 	ldw	r16,0(sp)
 8408dcc:	dec00304 	addi	sp,sp,12
 8408dd0:	840d5241 	jmpi	840d524 <__malloc_unlock>
 8408dd4:	80bffe17 	ldw	r2,-8(r16)
 8408dd8:	50c00204 	addi	r3,r10,8
 8408ddc:	4091c83a 	sub	r8,r8,r2
 8408de0:	41000217 	ldw	r4,8(r8)
 8408de4:	388f883a 	add	r7,r7,r2
 8408de8:	20c06126 	beq	r4,r3,8408f70 <_free_r+0x268>
 8408dec:	40800317 	ldw	r2,12(r8)
 8408df0:	3247883a 	add	r3,r6,r9
 8408df4:	000b883a 	mov	r5,zero
 8408df8:	11000215 	stw	r4,8(r2)
 8408dfc:	20800315 	stw	r2,12(r4)
 8408e00:	18800117 	ldw	r2,4(r3)
 8408e04:	1080004c 	andi	r2,r2,1
 8408e08:	103fdd26 	beq	r2,zero,8408d80 <_free_r+0x78>
 8408e0c:	38800054 	ori	r2,r7,1
 8408e10:	3a07883a 	add	r3,r7,r8
 8408e14:	280ac03a 	cmpne	r5,r5,zero
 8408e18:	40800115 	stw	r2,4(r8)
 8408e1c:	19c00015 	stw	r7,0(r3)
 8408e20:	283fe61e 	bne	r5,zero,8408dbc <_free_r+0xb4>
 8408e24:	00807fc4 	movi	r2,511
 8408e28:	11c01f2e 	bgeu	r2,r7,8408ea8 <_free_r+0x1a0>
 8408e2c:	3806d27a 	srli	r3,r7,9
 8408e30:	1800481e 	bne	r3,zero,8408f54 <_free_r+0x24c>
 8408e34:	3804d0fa 	srli	r2,r7,3
 8408e38:	100690fa 	slli	r3,r2,3
 8408e3c:	1acd883a 	add	r6,r3,r11
 8408e40:	31400217 	ldw	r5,8(r6)
 8408e44:	31405926 	beq	r6,r5,8408fac <_free_r+0x2a4>
 8408e48:	28800117 	ldw	r2,4(r5)
 8408e4c:	00ffff04 	movi	r3,-4
 8408e50:	10c4703a 	and	r2,r2,r3
 8408e54:	3880022e 	bgeu	r7,r2,8408e60 <_free_r+0x158>
 8408e58:	29400217 	ldw	r5,8(r5)
 8408e5c:	317ffa1e 	bne	r6,r5,8408e48 <_free_r+0x140>
 8408e60:	29800317 	ldw	r6,12(r5)
 8408e64:	41800315 	stw	r6,12(r8)
 8408e68:	41400215 	stw	r5,8(r8)
 8408e6c:	8809883a 	mov	r4,r17
 8408e70:	2a000315 	stw	r8,12(r5)
 8408e74:	32000215 	stw	r8,8(r6)
 8408e78:	dfc00217 	ldw	ra,8(sp)
 8408e7c:	dc400117 	ldw	r17,4(sp)
 8408e80:	dc000017 	ldw	r16,0(sp)
 8408e84:	dec00304 	addi	sp,sp,12
 8408e88:	840d5241 	jmpi	840d524 <__malloc_unlock>
 8408e8c:	dfc00217 	ldw	ra,8(sp)
 8408e90:	dc400117 	ldw	r17,4(sp)
 8408e94:	dc000017 	ldw	r16,0(sp)
 8408e98:	dec00304 	addi	sp,sp,12
 8408e9c:	f800283a 	ret
 8408ea0:	31000217 	ldw	r4,8(r6)
 8408ea4:	003fbd06 	br	8408d9c <_free_r+0x94>
 8408ea8:	3806d0fa 	srli	r3,r7,3
 8408eac:	00800044 	movi	r2,1
 8408eb0:	51400117 	ldw	r5,4(r10)
 8408eb4:	180890fa 	slli	r4,r3,3
 8408eb8:	1807d0ba 	srai	r3,r3,2
 8408ebc:	22c9883a 	add	r4,r4,r11
 8408ec0:	21800217 	ldw	r6,8(r4)
 8408ec4:	10c4983a 	sll	r2,r2,r3
 8408ec8:	41000315 	stw	r4,12(r8)
 8408ecc:	41800215 	stw	r6,8(r8)
 8408ed0:	288ab03a 	or	r5,r5,r2
 8408ed4:	22000215 	stw	r8,8(r4)
 8408ed8:	8809883a 	mov	r4,r17
 8408edc:	51400115 	stw	r5,4(r10)
 8408ee0:	32000315 	stw	r8,12(r6)
 8408ee4:	dfc00217 	ldw	ra,8(sp)
 8408ee8:	dc400117 	ldw	r17,4(sp)
 8408eec:	dc000017 	ldw	r16,0(sp)
 8408ef0:	dec00304 	addi	sp,sp,12
 8408ef4:	840d5241 	jmpi	840d524 <__malloc_unlock>
 8408ef8:	2880004c 	andi	r2,r5,1
 8408efc:	3a4d883a 	add	r6,r7,r9
 8408f00:	1000071e 	bne	r2,zero,8408f20 <_free_r+0x218>
 8408f04:	80bffe17 	ldw	r2,-8(r16)
 8408f08:	4091c83a 	sub	r8,r8,r2
 8408f0c:	41000317 	ldw	r4,12(r8)
 8408f10:	40c00217 	ldw	r3,8(r8)
 8408f14:	308d883a 	add	r6,r6,r2
 8408f18:	20c00215 	stw	r3,8(r4)
 8408f1c:	19000315 	stw	r4,12(r3)
 8408f20:	00821074 	movhi	r2,2113
 8408f24:	108e5604 	addi	r2,r2,14680
 8408f28:	11000017 	ldw	r4,0(r2)
 8408f2c:	30c00054 	ori	r3,r6,1
 8408f30:	52000215 	stw	r8,8(r10)
 8408f34:	40c00115 	stw	r3,4(r8)
 8408f38:	313fa036 	bltu	r6,r4,8408dbc <_free_r+0xb4>
 8408f3c:	00821074 	movhi	r2,2113
 8408f40:	10956104 	addi	r2,r2,21892
 8408f44:	11400017 	ldw	r5,0(r2)
 8408f48:	8809883a 	mov	r4,r17
 8408f4c:	8408bdc0 	call	8408bdc <_malloc_trim_r>
 8408f50:	003f9a06 	br	8408dbc <_free_r+0xb4>
 8408f54:	00800104 	movi	r2,4
 8408f58:	10c0072e 	bgeu	r2,r3,8408f78 <_free_r+0x270>
 8408f5c:	00800504 	movi	r2,20
 8408f60:	10c01936 	bltu	r2,r3,8408fc8 <_free_r+0x2c0>
 8408f64:	188016c4 	addi	r2,r3,91
 8408f68:	100690fa 	slli	r3,r2,3
 8408f6c:	003fb306 	br	8408e3c <_free_r+0x134>
 8408f70:	01400044 	movi	r5,1
 8408f74:	003f7e06 	br	8408d70 <_free_r+0x68>
 8408f78:	3804d1ba 	srli	r2,r7,6
 8408f7c:	10800e04 	addi	r2,r2,56
 8408f80:	100690fa 	slli	r3,r2,3
 8408f84:	003fad06 	br	8408e3c <_free_r+0x134>
 8408f88:	22000315 	stw	r8,12(r4)
 8408f8c:	22000215 	stw	r8,8(r4)
 8408f90:	3a05883a 	add	r2,r7,r8
 8408f94:	38c00054 	ori	r3,r7,1
 8408f98:	11c00015 	stw	r7,0(r2)
 8408f9c:	41000215 	stw	r4,8(r8)
 8408fa0:	40c00115 	stw	r3,4(r8)
 8408fa4:	41000315 	stw	r4,12(r8)
 8408fa8:	003f8406 	br	8408dbc <_free_r+0xb4>
 8408fac:	1005d0ba 	srai	r2,r2,2
 8408fb0:	00c00044 	movi	r3,1
 8408fb4:	51000117 	ldw	r4,4(r10)
 8408fb8:	1886983a 	sll	r3,r3,r2
 8408fbc:	20c8b03a 	or	r4,r4,r3
 8408fc0:	51000115 	stw	r4,4(r10)
 8408fc4:	003fa706 	br	8408e64 <_free_r+0x15c>
 8408fc8:	00801504 	movi	r2,84
 8408fcc:	10c00436 	bltu	r2,r3,8408fe0 <_free_r+0x2d8>
 8408fd0:	3804d33a 	srli	r2,r7,12
 8408fd4:	10801b84 	addi	r2,r2,110
 8408fd8:	100690fa 	slli	r3,r2,3
 8408fdc:	003f9706 	br	8408e3c <_free_r+0x134>
 8408fe0:	00805504 	movi	r2,340
 8408fe4:	10c00436 	bltu	r2,r3,8408ff8 <_free_r+0x2f0>
 8408fe8:	3804d3fa 	srli	r2,r7,15
 8408fec:	10801dc4 	addi	r2,r2,119
 8408ff0:	100690fa 	slli	r3,r2,3
 8408ff4:	003f9106 	br	8408e3c <_free_r+0x134>
 8408ff8:	00815504 	movi	r2,1364
 8408ffc:	10c0032e 	bgeu	r2,r3,840900c <_free_r+0x304>
 8409000:	00801f84 	movi	r2,126
 8409004:	00c0fc04 	movi	r3,1008
 8409008:	003f8c06 	br	8408e3c <_free_r+0x134>
 840900c:	3804d4ba 	srli	r2,r7,18
 8409010:	10801f04 	addi	r2,r2,124
 8409014:	100690fa 	slli	r3,r2,3
 8409018:	003f8806 	br	8408e3c <_free_r+0x134>

0840901c <__sfvwrite_r>:
 840901c:	30800217 	ldw	r2,8(r6)
 8409020:	defff504 	addi	sp,sp,-44
 8409024:	df000915 	stw	fp,36(sp)
 8409028:	dd800715 	stw	r22,28(sp)
 840902c:	dc800315 	stw	r18,12(sp)
 8409030:	dfc00a15 	stw	ra,40(sp)
 8409034:	ddc00815 	stw	r23,32(sp)
 8409038:	dd400615 	stw	r21,24(sp)
 840903c:	dd000515 	stw	r20,20(sp)
 8409040:	dcc00415 	stw	r19,16(sp)
 8409044:	dc400215 	stw	r17,8(sp)
 8409048:	dc000115 	stw	r16,4(sp)
 840904c:	302d883a 	mov	r22,r6
 8409050:	2039883a 	mov	fp,r4
 8409054:	2825883a 	mov	r18,r5
 8409058:	10001c26 	beq	r2,zero,84090cc <__sfvwrite_r+0xb0>
 840905c:	29c0030b 	ldhu	r7,12(r5)
 8409060:	3880020c 	andi	r2,r7,8
 8409064:	10002726 	beq	r2,zero,8409104 <__sfvwrite_r+0xe8>
 8409068:	28800417 	ldw	r2,16(r5)
 840906c:	10002526 	beq	r2,zero,8409104 <__sfvwrite_r+0xe8>
 8409070:	3880008c 	andi	r2,r7,2
 8409074:	b5400017 	ldw	r21,0(r22)
 8409078:	10002826 	beq	r2,zero,840911c <__sfvwrite_r+0x100>
 840907c:	0021883a 	mov	r16,zero
 8409080:	0023883a 	mov	r17,zero
 8409084:	880d883a 	mov	r6,r17
 8409088:	e009883a 	mov	r4,fp
 840908c:	00810004 	movi	r2,1024
 8409090:	80006e26 	beq	r16,zero,840924c <__sfvwrite_r+0x230>
 8409094:	800f883a 	mov	r7,r16
 8409098:	91400717 	ldw	r5,28(r18)
 840909c:	1400012e 	bgeu	r2,r16,84090a4 <__sfvwrite_r+0x88>
 84090a0:	100f883a 	mov	r7,r2
 84090a4:	90c00917 	ldw	r3,36(r18)
 84090a8:	183ee83a 	callr	r3
 84090ac:	1007883a 	mov	r3,r2
 84090b0:	80a1c83a 	sub	r16,r16,r2
 84090b4:	88a3883a 	add	r17,r17,r2
 84090b8:	00806d0e 	bge	zero,r2,8409270 <__sfvwrite_r+0x254>
 84090bc:	b0800217 	ldw	r2,8(r22)
 84090c0:	10c5c83a 	sub	r2,r2,r3
 84090c4:	b0800215 	stw	r2,8(r22)
 84090c8:	103fee1e 	bne	r2,zero,8409084 <__sfvwrite_r+0x68>
 84090cc:	0009883a 	mov	r4,zero
 84090d0:	2005883a 	mov	r2,r4
 84090d4:	dfc00a17 	ldw	ra,40(sp)
 84090d8:	df000917 	ldw	fp,36(sp)
 84090dc:	ddc00817 	ldw	r23,32(sp)
 84090e0:	dd800717 	ldw	r22,28(sp)
 84090e4:	dd400617 	ldw	r21,24(sp)
 84090e8:	dd000517 	ldw	r20,20(sp)
 84090ec:	dcc00417 	ldw	r19,16(sp)
 84090f0:	dc800317 	ldw	r18,12(sp)
 84090f4:	dc400217 	ldw	r17,8(sp)
 84090f8:	dc000117 	ldw	r16,4(sp)
 84090fc:	dec00b04 	addi	sp,sp,44
 8409100:	f800283a 	ret
 8409104:	8406de40 	call	8406de4 <__swsetup_r>
 8409108:	1000e41e 	bne	r2,zero,840949c <__sfvwrite_r+0x480>
 840910c:	91c0030b 	ldhu	r7,12(r18)
 8409110:	b5400017 	ldw	r21,0(r22)
 8409114:	3880008c 	andi	r2,r7,2
 8409118:	103fd81e 	bne	r2,zero,840907c <__sfvwrite_r+0x60>
 840911c:	3880004c 	andi	r2,r7,1
 8409120:	1005003a 	cmpeq	r2,r2,zero
 8409124:	10005726 	beq	r2,zero,8409284 <__sfvwrite_r+0x268>
 8409128:	0029883a 	mov	r20,zero
 840912c:	002f883a 	mov	r23,zero
 8409130:	a0004226 	beq	r20,zero,840923c <__sfvwrite_r+0x220>
 8409134:	3880800c 	andi	r2,r7,512
 8409138:	94000217 	ldw	r16,8(r18)
 840913c:	10008b26 	beq	r2,zero,840936c <__sfvwrite_r+0x350>
 8409140:	800d883a 	mov	r6,r16
 8409144:	a400a536 	bltu	r20,r16,84093dc <__sfvwrite_r+0x3c0>
 8409148:	3881200c 	andi	r2,r7,1152
 840914c:	10002726 	beq	r2,zero,84091ec <__sfvwrite_r+0x1d0>
 8409150:	90800517 	ldw	r2,20(r18)
 8409154:	92000417 	ldw	r8,16(r18)
 8409158:	91400017 	ldw	r5,0(r18)
 840915c:	1087883a 	add	r3,r2,r2
 8409160:	1887883a 	add	r3,r3,r2
 8409164:	1808d7fa 	srli	r4,r3,31
 8409168:	2a21c83a 	sub	r16,r5,r8
 840916c:	80800044 	addi	r2,r16,1
 8409170:	20c9883a 	add	r4,r4,r3
 8409174:	2027d07a 	srai	r19,r4,1
 8409178:	a085883a 	add	r2,r20,r2
 840917c:	980d883a 	mov	r6,r19
 8409180:	9880022e 	bgeu	r19,r2,840918c <__sfvwrite_r+0x170>
 8409184:	1027883a 	mov	r19,r2
 8409188:	100d883a 	mov	r6,r2
 840918c:	3881000c 	andi	r2,r7,1024
 8409190:	1000b826 	beq	r2,zero,8409474 <__sfvwrite_r+0x458>
 8409194:	300b883a 	mov	r5,r6
 8409198:	e009883a 	mov	r4,fp
 840919c:	84098900 	call	8409890 <_malloc_r>
 84091a0:	10003126 	beq	r2,zero,8409268 <__sfvwrite_r+0x24c>
 84091a4:	91400417 	ldw	r5,16(r18)
 84091a8:	1009883a 	mov	r4,r2
 84091ac:	800d883a 	mov	r6,r16
 84091b0:	1023883a 	mov	r17,r2
 84091b4:	840a0b40 	call	840a0b4 <memcpy>
 84091b8:	90c0030b 	ldhu	r3,12(r18)
 84091bc:	00beffc4 	movi	r2,-1025
 84091c0:	1886703a 	and	r3,r3,r2
 84091c4:	18c02014 	ori	r3,r3,128
 84091c8:	90c0030d 	sth	r3,12(r18)
 84091cc:	9c07c83a 	sub	r3,r19,r16
 84091d0:	8c05883a 	add	r2,r17,r16
 84091d4:	a00d883a 	mov	r6,r20
 84091d8:	a021883a 	mov	r16,r20
 84091dc:	90800015 	stw	r2,0(r18)
 84091e0:	90c00215 	stw	r3,8(r18)
 84091e4:	94400415 	stw	r17,16(r18)
 84091e8:	94c00515 	stw	r19,20(r18)
 84091ec:	91000017 	ldw	r4,0(r18)
 84091f0:	b80b883a 	mov	r5,r23
 84091f4:	a023883a 	mov	r17,r20
 84091f8:	840a1540 	call	840a154 <memmove>
 84091fc:	90c00217 	ldw	r3,8(r18)
 8409200:	90800017 	ldw	r2,0(r18)
 8409204:	a027883a 	mov	r19,r20
 8409208:	1c07c83a 	sub	r3,r3,r16
 840920c:	1405883a 	add	r2,r2,r16
 8409210:	90c00215 	stw	r3,8(r18)
 8409214:	a021883a 	mov	r16,r20
 8409218:	90800015 	stw	r2,0(r18)
 840921c:	b0800217 	ldw	r2,8(r22)
 8409220:	1405c83a 	sub	r2,r2,r16
 8409224:	b0800215 	stw	r2,8(r22)
 8409228:	103fa826 	beq	r2,zero,84090cc <__sfvwrite_r+0xb0>
 840922c:	a469c83a 	sub	r20,r20,r17
 8409230:	91c0030b 	ldhu	r7,12(r18)
 8409234:	bcef883a 	add	r23,r23,r19
 8409238:	a03fbe1e 	bne	r20,zero,8409134 <__sfvwrite_r+0x118>
 840923c:	adc00017 	ldw	r23,0(r21)
 8409240:	ad000117 	ldw	r20,4(r21)
 8409244:	ad400204 	addi	r21,r21,8
 8409248:	003fb906 	br	8409130 <__sfvwrite_r+0x114>
 840924c:	ac400017 	ldw	r17,0(r21)
 8409250:	ac000117 	ldw	r16,4(r21)
 8409254:	ad400204 	addi	r21,r21,8
 8409258:	003f8a06 	br	8409084 <__sfvwrite_r+0x68>
 840925c:	91400417 	ldw	r5,16(r18)
 8409260:	e009883a 	mov	r4,fp
 8409264:	8408d080 	call	8408d08 <_free_r>
 8409268:	00800304 	movi	r2,12
 840926c:	e0800015 	stw	r2,0(fp)
 8409270:	9080030b 	ldhu	r2,12(r18)
 8409274:	013fffc4 	movi	r4,-1
 8409278:	10801014 	ori	r2,r2,64
 840927c:	9080030d 	sth	r2,12(r18)
 8409280:	003f9306 	br	84090d0 <__sfvwrite_r+0xb4>
 8409284:	0027883a 	mov	r19,zero
 8409288:	002f883a 	mov	r23,zero
 840928c:	d8000015 	stw	zero,0(sp)
 8409290:	0029883a 	mov	r20,zero
 8409294:	98001e26 	beq	r19,zero,8409310 <__sfvwrite_r+0x2f4>
 8409298:	d8c00017 	ldw	r3,0(sp)
 840929c:	1804c03a 	cmpne	r2,r3,zero
 84092a0:	10005e26 	beq	r2,zero,840941c <__sfvwrite_r+0x400>
 84092a4:	9821883a 	mov	r16,r19
 84092a8:	a4c0012e 	bgeu	r20,r19,84092b0 <__sfvwrite_r+0x294>
 84092ac:	a021883a 	mov	r16,r20
 84092b0:	91000017 	ldw	r4,0(r18)
 84092b4:	90800417 	ldw	r2,16(r18)
 84092b8:	91800217 	ldw	r6,8(r18)
 84092bc:	91c00517 	ldw	r7,20(r18)
 84092c0:	1100022e 	bgeu	r2,r4,84092cc <__sfvwrite_r+0x2b0>
 84092c4:	31e3883a 	add	r17,r6,r7
 84092c8:	8c001616 	blt	r17,r16,8409324 <__sfvwrite_r+0x308>
 84092cc:	81c03816 	blt	r16,r7,84093b0 <__sfvwrite_r+0x394>
 84092d0:	90c00917 	ldw	r3,36(r18)
 84092d4:	91400717 	ldw	r5,28(r18)
 84092d8:	e009883a 	mov	r4,fp
 84092dc:	b80d883a 	mov	r6,r23
 84092e0:	183ee83a 	callr	r3
 84092e4:	1023883a 	mov	r17,r2
 84092e8:	00bfe10e 	bge	zero,r2,8409270 <__sfvwrite_r+0x254>
 84092ec:	a469c83a 	sub	r20,r20,r17
 84092f0:	a0001826 	beq	r20,zero,8409354 <__sfvwrite_r+0x338>
 84092f4:	b0800217 	ldw	r2,8(r22)
 84092f8:	1445c83a 	sub	r2,r2,r17
 84092fc:	b0800215 	stw	r2,8(r22)
 8409300:	103f7226 	beq	r2,zero,84090cc <__sfvwrite_r+0xb0>
 8409304:	9c67c83a 	sub	r19,r19,r17
 8409308:	bc6f883a 	add	r23,r23,r17
 840930c:	983fe21e 	bne	r19,zero,8409298 <__sfvwrite_r+0x27c>
 8409310:	adc00017 	ldw	r23,0(r21)
 8409314:	acc00117 	ldw	r19,4(r21)
 8409318:	ad400204 	addi	r21,r21,8
 840931c:	d8000015 	stw	zero,0(sp)
 8409320:	003fdc06 	br	8409294 <__sfvwrite_r+0x278>
 8409324:	b80b883a 	mov	r5,r23
 8409328:	880d883a 	mov	r6,r17
 840932c:	840a1540 	call	840a154 <memmove>
 8409330:	90c00017 	ldw	r3,0(r18)
 8409334:	e009883a 	mov	r4,fp
 8409338:	900b883a 	mov	r5,r18
 840933c:	1c47883a 	add	r3,r3,r17
 8409340:	90c00015 	stw	r3,0(r18)
 8409344:	84086ec0 	call	84086ec <_fflush_r>
 8409348:	103fc91e 	bne	r2,zero,8409270 <__sfvwrite_r+0x254>
 840934c:	a469c83a 	sub	r20,r20,r17
 8409350:	a03fe81e 	bne	r20,zero,84092f4 <__sfvwrite_r+0x2d8>
 8409354:	e009883a 	mov	r4,fp
 8409358:	900b883a 	mov	r5,r18
 840935c:	84086ec0 	call	84086ec <_fflush_r>
 8409360:	103fc31e 	bne	r2,zero,8409270 <__sfvwrite_r+0x254>
 8409364:	d8000015 	stw	zero,0(sp)
 8409368:	003fe206 	br	84092f4 <__sfvwrite_r+0x2d8>
 840936c:	91000017 	ldw	r4,0(r18)
 8409370:	90800417 	ldw	r2,16(r18)
 8409374:	1100022e 	bgeu	r2,r4,8409380 <__sfvwrite_r+0x364>
 8409378:	8023883a 	mov	r17,r16
 840937c:	85003136 	bltu	r16,r20,8409444 <__sfvwrite_r+0x428>
 8409380:	91c00517 	ldw	r7,20(r18)
 8409384:	a1c01836 	bltu	r20,r7,84093e8 <__sfvwrite_r+0x3cc>
 8409388:	90c00917 	ldw	r3,36(r18)
 840938c:	91400717 	ldw	r5,28(r18)
 8409390:	e009883a 	mov	r4,fp
 8409394:	b80d883a 	mov	r6,r23
 8409398:	183ee83a 	callr	r3
 840939c:	1021883a 	mov	r16,r2
 84093a0:	00bfb30e 	bge	zero,r2,8409270 <__sfvwrite_r+0x254>
 84093a4:	1023883a 	mov	r17,r2
 84093a8:	1027883a 	mov	r19,r2
 84093ac:	003f9b06 	br	840921c <__sfvwrite_r+0x200>
 84093b0:	b80b883a 	mov	r5,r23
 84093b4:	800d883a 	mov	r6,r16
 84093b8:	840a1540 	call	840a154 <memmove>
 84093bc:	90c00217 	ldw	r3,8(r18)
 84093c0:	90800017 	ldw	r2,0(r18)
 84093c4:	8023883a 	mov	r17,r16
 84093c8:	1c07c83a 	sub	r3,r3,r16
 84093cc:	1405883a 	add	r2,r2,r16
 84093d0:	90c00215 	stw	r3,8(r18)
 84093d4:	90800015 	stw	r2,0(r18)
 84093d8:	003fc406 	br	84092ec <__sfvwrite_r+0x2d0>
 84093dc:	a00d883a 	mov	r6,r20
 84093e0:	a021883a 	mov	r16,r20
 84093e4:	003f8106 	br	84091ec <__sfvwrite_r+0x1d0>
 84093e8:	b80b883a 	mov	r5,r23
 84093ec:	a00d883a 	mov	r6,r20
 84093f0:	840a1540 	call	840a154 <memmove>
 84093f4:	90c00217 	ldw	r3,8(r18)
 84093f8:	90800017 	ldw	r2,0(r18)
 84093fc:	a021883a 	mov	r16,r20
 8409400:	1d07c83a 	sub	r3,r3,r20
 8409404:	1505883a 	add	r2,r2,r20
 8409408:	a023883a 	mov	r17,r20
 840940c:	a027883a 	mov	r19,r20
 8409410:	90c00215 	stw	r3,8(r18)
 8409414:	90800015 	stw	r2,0(r18)
 8409418:	003f8006 	br	840921c <__sfvwrite_r+0x200>
 840941c:	b809883a 	mov	r4,r23
 8409420:	01400284 	movi	r5,10
 8409424:	980d883a 	mov	r6,r19
 8409428:	8409fd00 	call	8409fd0 <memchr>
 840942c:	10001726 	beq	r2,zero,840948c <__sfvwrite_r+0x470>
 8409430:	15c5c83a 	sub	r2,r2,r23
 8409434:	15000044 	addi	r20,r2,1
 8409438:	00800044 	movi	r2,1
 840943c:	d8800015 	stw	r2,0(sp)
 8409440:	003f9806 	br	84092a4 <__sfvwrite_r+0x288>
 8409444:	b80b883a 	mov	r5,r23
 8409448:	800d883a 	mov	r6,r16
 840944c:	840a1540 	call	840a154 <memmove>
 8409450:	90c00017 	ldw	r3,0(r18)
 8409454:	e009883a 	mov	r4,fp
 8409458:	900b883a 	mov	r5,r18
 840945c:	1c07883a 	add	r3,r3,r16
 8409460:	90c00015 	stw	r3,0(r18)
 8409464:	8027883a 	mov	r19,r16
 8409468:	84086ec0 	call	84086ec <_fflush_r>
 840946c:	103f6b26 	beq	r2,zero,840921c <__sfvwrite_r+0x200>
 8409470:	003f7f06 	br	8409270 <__sfvwrite_r+0x254>
 8409474:	400b883a 	mov	r5,r8
 8409478:	e009883a 	mov	r4,fp
 840947c:	840b2c00 	call	840b2c0 <_realloc_r>
 8409480:	103f7626 	beq	r2,zero,840925c <__sfvwrite_r+0x240>
 8409484:	1023883a 	mov	r17,r2
 8409488:	003f5006 	br	84091cc <__sfvwrite_r+0x1b0>
 840948c:	00c00044 	movi	r3,1
 8409490:	9d000044 	addi	r20,r19,1
 8409494:	d8c00015 	stw	r3,0(sp)
 8409498:	003f8206 	br	84092a4 <__sfvwrite_r+0x288>
 840949c:	9080030b 	ldhu	r2,12(r18)
 84094a0:	00c00244 	movi	r3,9
 84094a4:	013fffc4 	movi	r4,-1
 84094a8:	10801014 	ori	r2,r2,64
 84094ac:	9080030d 	sth	r2,12(r18)
 84094b0:	e0c00015 	stw	r3,0(fp)
 84094b4:	003f0606 	br	84090d0 <__sfvwrite_r+0xb4>

084094b8 <_fwalk_reent>:
 84094b8:	defff704 	addi	sp,sp,-36
 84094bc:	dcc00315 	stw	r19,12(sp)
 84094c0:	24c0b804 	addi	r19,r4,736
 84094c4:	dd800615 	stw	r22,24(sp)
 84094c8:	dd400515 	stw	r21,20(sp)
 84094cc:	dfc00815 	stw	ra,32(sp)
 84094d0:	ddc00715 	stw	r23,28(sp)
 84094d4:	dd000415 	stw	r20,16(sp)
 84094d8:	dc800215 	stw	r18,8(sp)
 84094dc:	dc400115 	stw	r17,4(sp)
 84094e0:	dc000015 	stw	r16,0(sp)
 84094e4:	202b883a 	mov	r21,r4
 84094e8:	282d883a 	mov	r22,r5
 84094ec:	84089740 	call	8408974 <__sfp_lock_acquire>
 84094f0:	98002126 	beq	r19,zero,8409578 <_fwalk_reent+0xc0>
 84094f4:	002f883a 	mov	r23,zero
 84094f8:	9c800117 	ldw	r18,4(r19)
 84094fc:	9c000217 	ldw	r16,8(r19)
 8409500:	90bfffc4 	addi	r2,r18,-1
 8409504:	10000d16 	blt	r2,zero,840953c <_fwalk_reent+0x84>
 8409508:	0023883a 	mov	r17,zero
 840950c:	053fffc4 	movi	r20,-1
 8409510:	8080030f 	ldh	r2,12(r16)
 8409514:	8c400044 	addi	r17,r17,1
 8409518:	10000626 	beq	r2,zero,8409534 <_fwalk_reent+0x7c>
 840951c:	8080038f 	ldh	r2,14(r16)
 8409520:	800b883a 	mov	r5,r16
 8409524:	a809883a 	mov	r4,r21
 8409528:	15000226 	beq	r2,r20,8409534 <_fwalk_reent+0x7c>
 840952c:	b03ee83a 	callr	r22
 8409530:	b8aeb03a 	or	r23,r23,r2
 8409534:	84001704 	addi	r16,r16,92
 8409538:	947ff51e 	bne	r18,r17,8409510 <_fwalk_reent+0x58>
 840953c:	9cc00017 	ldw	r19,0(r19)
 8409540:	983fed1e 	bne	r19,zero,84094f8 <_fwalk_reent+0x40>
 8409544:	84089780 	call	8408978 <__sfp_lock_release>
 8409548:	b805883a 	mov	r2,r23
 840954c:	dfc00817 	ldw	ra,32(sp)
 8409550:	ddc00717 	ldw	r23,28(sp)
 8409554:	dd800617 	ldw	r22,24(sp)
 8409558:	dd400517 	ldw	r21,20(sp)
 840955c:	dd000417 	ldw	r20,16(sp)
 8409560:	dcc00317 	ldw	r19,12(sp)
 8409564:	dc800217 	ldw	r18,8(sp)
 8409568:	dc400117 	ldw	r17,4(sp)
 840956c:	dc000017 	ldw	r16,0(sp)
 8409570:	dec00904 	addi	sp,sp,36
 8409574:	f800283a 	ret
 8409578:	002f883a 	mov	r23,zero
 840957c:	003ff106 	br	8409544 <_fwalk_reent+0x8c>

08409580 <_fwalk>:
 8409580:	defff804 	addi	sp,sp,-32
 8409584:	dcc00315 	stw	r19,12(sp)
 8409588:	24c0b804 	addi	r19,r4,736
 840958c:	dd400515 	stw	r21,20(sp)
 8409590:	dfc00715 	stw	ra,28(sp)
 8409594:	dd800615 	stw	r22,24(sp)
 8409598:	dd000415 	stw	r20,16(sp)
 840959c:	dc800215 	stw	r18,8(sp)
 84095a0:	dc400115 	stw	r17,4(sp)
 84095a4:	dc000015 	stw	r16,0(sp)
 84095a8:	282b883a 	mov	r21,r5
 84095ac:	84089740 	call	8408974 <__sfp_lock_acquire>
 84095b0:	98001f26 	beq	r19,zero,8409630 <_fwalk+0xb0>
 84095b4:	002d883a 	mov	r22,zero
 84095b8:	9c800117 	ldw	r18,4(r19)
 84095bc:	9c000217 	ldw	r16,8(r19)
 84095c0:	90bfffc4 	addi	r2,r18,-1
 84095c4:	10000c16 	blt	r2,zero,84095f8 <_fwalk+0x78>
 84095c8:	0023883a 	mov	r17,zero
 84095cc:	053fffc4 	movi	r20,-1
 84095d0:	8080030f 	ldh	r2,12(r16)
 84095d4:	8c400044 	addi	r17,r17,1
 84095d8:	10000526 	beq	r2,zero,84095f0 <_fwalk+0x70>
 84095dc:	8080038f 	ldh	r2,14(r16)
 84095e0:	8009883a 	mov	r4,r16
 84095e4:	15000226 	beq	r2,r20,84095f0 <_fwalk+0x70>
 84095e8:	a83ee83a 	callr	r21
 84095ec:	b0acb03a 	or	r22,r22,r2
 84095f0:	84001704 	addi	r16,r16,92
 84095f4:	947ff61e 	bne	r18,r17,84095d0 <_fwalk+0x50>
 84095f8:	9cc00017 	ldw	r19,0(r19)
 84095fc:	983fee1e 	bne	r19,zero,84095b8 <_fwalk+0x38>
 8409600:	84089780 	call	8408978 <__sfp_lock_release>
 8409604:	b005883a 	mov	r2,r22
 8409608:	dfc00717 	ldw	ra,28(sp)
 840960c:	dd800617 	ldw	r22,24(sp)
 8409610:	dd400517 	ldw	r21,20(sp)
 8409614:	dd000417 	ldw	r20,16(sp)
 8409618:	dcc00317 	ldw	r19,12(sp)
 840961c:	dc800217 	ldw	r18,8(sp)
 8409620:	dc400117 	ldw	r17,4(sp)
 8409624:	dc000017 	ldw	r16,0(sp)
 8409628:	dec00804 	addi	sp,sp,32
 840962c:	f800283a 	ret
 8409630:	002d883a 	mov	r22,zero
 8409634:	003ff206 	br	8409600 <_fwalk+0x80>

08409638 <__locale_charset>:
 8409638:	d0a00717 	ldw	r2,-32740(gp)
 840963c:	f800283a 	ret

08409640 <_localeconv_r>:
 8409640:	00821074 	movhi	r2,2113
 8409644:	1086cc04 	addi	r2,r2,6960
 8409648:	f800283a 	ret

0840964c <localeconv>:
 840964c:	00821074 	movhi	r2,2113
 8409650:	108e5204 	addi	r2,r2,14664
 8409654:	11000017 	ldw	r4,0(r2)
 8409658:	84096401 	jmpi	8409640 <_localeconv_r>

0840965c <_setlocale_r>:
 840965c:	defffc04 	addi	sp,sp,-16
 8409660:	00c21074 	movhi	r3,2113
 8409664:	18c6a204 	addi	r3,r3,6792
 8409668:	dc800215 	stw	r18,8(sp)
 840966c:	dc400115 	stw	r17,4(sp)
 8409670:	dc000015 	stw	r16,0(sp)
 8409674:	2023883a 	mov	r17,r4
 8409678:	2825883a 	mov	r18,r5
 840967c:	dfc00315 	stw	ra,12(sp)
 8409680:	3021883a 	mov	r16,r6
 8409684:	3009883a 	mov	r4,r6
 8409688:	180b883a 	mov	r5,r3
 840968c:	30000926 	beq	r6,zero,84096b4 <_setlocale_r+0x58>
 8409690:	840bab00 	call	840bab0 <strcmp>
 8409694:	8009883a 	mov	r4,r16
 8409698:	01421074 	movhi	r5,2113
 840969c:	2946b304 	addi	r5,r5,6860
 84096a0:	10000b1e 	bne	r2,zero,84096d0 <_setlocale_r+0x74>
 84096a4:	8c000d15 	stw	r16,52(r17)
 84096a8:	8c800c15 	stw	r18,48(r17)
 84096ac:	00c21074 	movhi	r3,2113
 84096b0:	18c6a204 	addi	r3,r3,6792
 84096b4:	1805883a 	mov	r2,r3
 84096b8:	dfc00317 	ldw	ra,12(sp)
 84096bc:	dc800217 	ldw	r18,8(sp)
 84096c0:	dc400117 	ldw	r17,4(sp)
 84096c4:	dc000017 	ldw	r16,0(sp)
 84096c8:	dec00404 	addi	sp,sp,16
 84096cc:	f800283a 	ret
 84096d0:	840bab00 	call	840bab0 <strcmp>
 84096d4:	0007883a 	mov	r3,zero
 84096d8:	103ff226 	beq	r2,zero,84096a4 <_setlocale_r+0x48>
 84096dc:	003ff506 	br	84096b4 <_setlocale_r+0x58>

084096e0 <setlocale>:
 84096e0:	01821074 	movhi	r6,2113
 84096e4:	318e5204 	addi	r6,r6,14664
 84096e8:	2007883a 	mov	r3,r4
 84096ec:	31000017 	ldw	r4,0(r6)
 84096f0:	280d883a 	mov	r6,r5
 84096f4:	180b883a 	mov	r5,r3
 84096f8:	840965c1 	jmpi	840965c <_setlocale_r>

084096fc <__smakebuf_r>:
 84096fc:	2880030b 	ldhu	r2,12(r5)
 8409700:	deffed04 	addi	sp,sp,-76
 8409704:	dc401015 	stw	r17,64(sp)
 8409708:	1080008c 	andi	r2,r2,2
 840970c:	dc000f15 	stw	r16,60(sp)
 8409710:	dfc01215 	stw	ra,72(sp)
 8409714:	dc801115 	stw	r18,68(sp)
 8409718:	2821883a 	mov	r16,r5
 840971c:	2023883a 	mov	r17,r4
 8409720:	10000b26 	beq	r2,zero,8409750 <__smakebuf_r+0x54>
 8409724:	28c010c4 	addi	r3,r5,67
 8409728:	00800044 	movi	r2,1
 840972c:	28800515 	stw	r2,20(r5)
 8409730:	28c00415 	stw	r3,16(r5)
 8409734:	28c00015 	stw	r3,0(r5)
 8409738:	dfc01217 	ldw	ra,72(sp)
 840973c:	dc801117 	ldw	r18,68(sp)
 8409740:	dc401017 	ldw	r17,64(sp)
 8409744:	dc000f17 	ldw	r16,60(sp)
 8409748:	dec01304 	addi	sp,sp,76
 840974c:	f800283a 	ret
 8409750:	2940038f 	ldh	r5,14(r5)
 8409754:	28002116 	blt	r5,zero,84097dc <__smakebuf_r+0xe0>
 8409758:	d80d883a 	mov	r6,sp
 840975c:	840be2c0 	call	840be2c <_fstat_r>
 8409760:	10001e16 	blt	r2,zero,84097dc <__smakebuf_r+0xe0>
 8409764:	d8800117 	ldw	r2,4(sp)
 8409768:	00e00014 	movui	r3,32768
 840976c:	113c000c 	andi	r4,r2,61440
 8409770:	20c03126 	beq	r4,r3,8409838 <__smakebuf_r+0x13c>
 8409774:	8080030b 	ldhu	r2,12(r16)
 8409778:	00c80004 	movi	r3,8192
 840977c:	10820014 	ori	r2,r2,2048
 8409780:	8080030d 	sth	r2,12(r16)
 8409784:	20c01e26 	beq	r4,r3,8409800 <__smakebuf_r+0x104>
 8409788:	04810004 	movi	r18,1024
 840978c:	8809883a 	mov	r4,r17
 8409790:	900b883a 	mov	r5,r18
 8409794:	84098900 	call	8409890 <_malloc_r>
 8409798:	1009883a 	mov	r4,r2
 840979c:	10003126 	beq	r2,zero,8409864 <__smakebuf_r+0x168>
 84097a0:	80c0030b 	ldhu	r3,12(r16)
 84097a4:	00821074 	movhi	r2,2113
 84097a8:	10a29a04 	addi	r2,r2,-30104
 84097ac:	88800f15 	stw	r2,60(r17)
 84097b0:	18c02014 	ori	r3,r3,128
 84097b4:	84800515 	stw	r18,20(r16)
 84097b8:	80c0030d 	sth	r3,12(r16)
 84097bc:	81000415 	stw	r4,16(r16)
 84097c0:	81000015 	stw	r4,0(r16)
 84097c4:	dfc01217 	ldw	ra,72(sp)
 84097c8:	dc801117 	ldw	r18,68(sp)
 84097cc:	dc401017 	ldw	r17,64(sp)
 84097d0:	dc000f17 	ldw	r16,60(sp)
 84097d4:	dec01304 	addi	sp,sp,76
 84097d8:	f800283a 	ret
 84097dc:	80c0030b 	ldhu	r3,12(r16)
 84097e0:	1880200c 	andi	r2,r3,128
 84097e4:	10000426 	beq	r2,zero,84097f8 <__smakebuf_r+0xfc>
 84097e8:	04801004 	movi	r18,64
 84097ec:	18820014 	ori	r2,r3,2048
 84097f0:	8080030d 	sth	r2,12(r16)
 84097f4:	003fe506 	br	840978c <__smakebuf_r+0x90>
 84097f8:	04810004 	movi	r18,1024
 84097fc:	003ffb06 	br	84097ec <__smakebuf_r+0xf0>
 8409800:	8140038f 	ldh	r5,14(r16)
 8409804:	8809883a 	mov	r4,r17
 8409808:	840bea00 	call	840bea0 <_isatty_r>
 840980c:	103fde26 	beq	r2,zero,8409788 <__smakebuf_r+0x8c>
 8409810:	8080030b 	ldhu	r2,12(r16)
 8409814:	80c010c4 	addi	r3,r16,67
 8409818:	04810004 	movi	r18,1024
 840981c:	10800054 	ori	r2,r2,1
 8409820:	8080030d 	sth	r2,12(r16)
 8409824:	00800044 	movi	r2,1
 8409828:	80c00415 	stw	r3,16(r16)
 840982c:	80800515 	stw	r2,20(r16)
 8409830:	80c00015 	stw	r3,0(r16)
 8409834:	003fd506 	br	840978c <__smakebuf_r+0x90>
 8409838:	80c00a17 	ldw	r3,40(r16)
 840983c:	00821074 	movhi	r2,2113
 8409840:	10ae5b04 	addi	r2,r2,-18068
 8409844:	18bfcb1e 	bne	r3,r2,8409774 <__smakebuf_r+0x78>
 8409848:	8080030b 	ldhu	r2,12(r16)
 840984c:	00c10004 	movi	r3,1024
 8409850:	1825883a 	mov	r18,r3
 8409854:	10c4b03a 	or	r2,r2,r3
 8409858:	8080030d 	sth	r2,12(r16)
 840985c:	80c01315 	stw	r3,76(r16)
 8409860:	003fca06 	br	840978c <__smakebuf_r+0x90>
 8409864:	8100030b 	ldhu	r4,12(r16)
 8409868:	2080800c 	andi	r2,r4,512
 840986c:	103fb21e 	bne	r2,zero,8409738 <__smakebuf_r+0x3c>
 8409870:	80c010c4 	addi	r3,r16,67
 8409874:	21000094 	ori	r4,r4,2
 8409878:	00800044 	movi	r2,1
 840987c:	80800515 	stw	r2,20(r16)
 8409880:	8100030d 	sth	r4,12(r16)
 8409884:	80c00415 	stw	r3,16(r16)
 8409888:	80c00015 	stw	r3,0(r16)
 840988c:	003faa06 	br	8409738 <__smakebuf_r+0x3c>

08409890 <_malloc_r>:
 8409890:	defff604 	addi	sp,sp,-40
 8409894:	28c002c4 	addi	r3,r5,11
 8409898:	00800584 	movi	r2,22
 840989c:	dc800215 	stw	r18,8(sp)
 84098a0:	dfc00915 	stw	ra,36(sp)
 84098a4:	df000815 	stw	fp,32(sp)
 84098a8:	ddc00715 	stw	r23,28(sp)
 84098ac:	dd800615 	stw	r22,24(sp)
 84098b0:	dd400515 	stw	r21,20(sp)
 84098b4:	dd000415 	stw	r20,16(sp)
 84098b8:	dcc00315 	stw	r19,12(sp)
 84098bc:	dc400115 	stw	r17,4(sp)
 84098c0:	dc000015 	stw	r16,0(sp)
 84098c4:	2025883a 	mov	r18,r4
 84098c8:	10c01236 	bltu	r2,r3,8409914 <_malloc_r+0x84>
 84098cc:	04400404 	movi	r17,16
 84098d0:	8940142e 	bgeu	r17,r5,8409924 <_malloc_r+0x94>
 84098d4:	00800304 	movi	r2,12
 84098d8:	0007883a 	mov	r3,zero
 84098dc:	90800015 	stw	r2,0(r18)
 84098e0:	1805883a 	mov	r2,r3
 84098e4:	dfc00917 	ldw	ra,36(sp)
 84098e8:	df000817 	ldw	fp,32(sp)
 84098ec:	ddc00717 	ldw	r23,28(sp)
 84098f0:	dd800617 	ldw	r22,24(sp)
 84098f4:	dd400517 	ldw	r21,20(sp)
 84098f8:	dd000417 	ldw	r20,16(sp)
 84098fc:	dcc00317 	ldw	r19,12(sp)
 8409900:	dc800217 	ldw	r18,8(sp)
 8409904:	dc400117 	ldw	r17,4(sp)
 8409908:	dc000017 	ldw	r16,0(sp)
 840990c:	dec00a04 	addi	sp,sp,40
 8409910:	f800283a 	ret
 8409914:	00bffe04 	movi	r2,-8
 8409918:	18a2703a 	and	r17,r3,r2
 840991c:	883fed16 	blt	r17,zero,84098d4 <_malloc_r+0x44>
 8409920:	897fec36 	bltu	r17,r5,84098d4 <_malloc_r+0x44>
 8409924:	9009883a 	mov	r4,r18
 8409928:	840d5040 	call	840d504 <__malloc_lock>
 840992c:	00807dc4 	movi	r2,503
 8409930:	14402b2e 	bgeu	r2,r17,84099e0 <_malloc_r+0x150>
 8409934:	8806d27a 	srli	r3,r17,9
 8409938:	18003f1e 	bne	r3,zero,8409a38 <_malloc_r+0x1a8>
 840993c:	880cd0fa 	srli	r6,r17,3
 8409940:	300490fa 	slli	r2,r6,3
 8409944:	02c21074 	movhi	r11,2113
 8409948:	5ac87904 	addi	r11,r11,8676
 840994c:	12cb883a 	add	r5,r2,r11
 8409950:	2c000317 	ldw	r16,12(r5)
 8409954:	580f883a 	mov	r7,r11
 8409958:	2c00041e 	bne	r5,r16,840996c <_malloc_r+0xdc>
 840995c:	00000a06 	br	8409988 <_malloc_r+0xf8>
 8409960:	1800860e 	bge	r3,zero,8409b7c <_malloc_r+0x2ec>
 8409964:	84000317 	ldw	r16,12(r16)
 8409968:	2c000726 	beq	r5,r16,8409988 <_malloc_r+0xf8>
 840996c:	80800117 	ldw	r2,4(r16)
 8409970:	00ffff04 	movi	r3,-4
 8409974:	10c8703a 	and	r4,r2,r3
 8409978:	2447c83a 	sub	r3,r4,r17
 840997c:	008003c4 	movi	r2,15
 8409980:	10fff70e 	bge	r2,r3,8409960 <_malloc_r+0xd0>
 8409984:	31bfffc4 	addi	r6,r6,-1
 8409988:	32400044 	addi	r9,r6,1
 840998c:	02821074 	movhi	r10,2113
 8409990:	52887b04 	addi	r10,r10,8684
 8409994:	54000217 	ldw	r16,8(r10)
 8409998:	8280a026 	beq	r16,r10,8409c1c <_malloc_r+0x38c>
 840999c:	80800117 	ldw	r2,4(r16)
 84099a0:	00ffff04 	movi	r3,-4
 84099a4:	10ca703a 	and	r5,r2,r3
 84099a8:	2c4dc83a 	sub	r6,r5,r17
 84099ac:	008003c4 	movi	r2,15
 84099b0:	11808316 	blt	r2,r6,8409bc0 <_malloc_r+0x330>
 84099b4:	52800315 	stw	r10,12(r10)
 84099b8:	52800215 	stw	r10,8(r10)
 84099bc:	30002916 	blt	r6,zero,8409a64 <_malloc_r+0x1d4>
 84099c0:	8147883a 	add	r3,r16,r5
 84099c4:	18800117 	ldw	r2,4(r3)
 84099c8:	9009883a 	mov	r4,r18
 84099cc:	10800054 	ori	r2,r2,1
 84099d0:	18800115 	stw	r2,4(r3)
 84099d4:	840d5240 	call	840d524 <__malloc_unlock>
 84099d8:	80c00204 	addi	r3,r16,8
 84099dc:	003fc006 	br	84098e0 <_malloc_r+0x50>
 84099e0:	02c21074 	movhi	r11,2113
 84099e4:	5ac87904 	addi	r11,r11,8676
 84099e8:	8ac5883a 	add	r2,r17,r11
 84099ec:	14000317 	ldw	r16,12(r2)
 84099f0:	580f883a 	mov	r7,r11
 84099f4:	8806d0fa 	srli	r3,r17,3
 84099f8:	14006c26 	beq	r2,r16,8409bac <_malloc_r+0x31c>
 84099fc:	80c00117 	ldw	r3,4(r16)
 8409a00:	00bfff04 	movi	r2,-4
 8409a04:	81800317 	ldw	r6,12(r16)
 8409a08:	1886703a 	and	r3,r3,r2
 8409a0c:	80c7883a 	add	r3,r16,r3
 8409a10:	18800117 	ldw	r2,4(r3)
 8409a14:	81400217 	ldw	r5,8(r16)
 8409a18:	9009883a 	mov	r4,r18
 8409a1c:	10800054 	ori	r2,r2,1
 8409a20:	18800115 	stw	r2,4(r3)
 8409a24:	31400215 	stw	r5,8(r6)
 8409a28:	29800315 	stw	r6,12(r5)
 8409a2c:	840d5240 	call	840d524 <__malloc_unlock>
 8409a30:	80c00204 	addi	r3,r16,8
 8409a34:	003faa06 	br	84098e0 <_malloc_r+0x50>
 8409a38:	00800104 	movi	r2,4
 8409a3c:	10c0052e 	bgeu	r2,r3,8409a54 <_malloc_r+0x1c4>
 8409a40:	00800504 	movi	r2,20
 8409a44:	10c07836 	bltu	r2,r3,8409c28 <_malloc_r+0x398>
 8409a48:	198016c4 	addi	r6,r3,91
 8409a4c:	300490fa 	slli	r2,r6,3
 8409a50:	003fbc06 	br	8409944 <_malloc_r+0xb4>
 8409a54:	8804d1ba 	srli	r2,r17,6
 8409a58:	11800e04 	addi	r6,r2,56
 8409a5c:	300490fa 	slli	r2,r6,3
 8409a60:	003fb806 	br	8409944 <_malloc_r+0xb4>
 8409a64:	00807fc4 	movi	r2,511
 8409a68:	1140bb36 	bltu	r2,r5,8409d58 <_malloc_r+0x4c8>
 8409a6c:	2806d0fa 	srli	r3,r5,3
 8409a70:	573ffe04 	addi	fp,r10,-8
 8409a74:	00800044 	movi	r2,1
 8409a78:	180890fa 	slli	r4,r3,3
 8409a7c:	1807d0ba 	srai	r3,r3,2
 8409a80:	e1c00117 	ldw	r7,4(fp)
 8409a84:	5909883a 	add	r4,r11,r4
 8409a88:	21400217 	ldw	r5,8(r4)
 8409a8c:	10c4983a 	sll	r2,r2,r3
 8409a90:	81000315 	stw	r4,12(r16)
 8409a94:	81400215 	stw	r5,8(r16)
 8409a98:	388eb03a 	or	r7,r7,r2
 8409a9c:	2c000315 	stw	r16,12(r5)
 8409aa0:	24000215 	stw	r16,8(r4)
 8409aa4:	e1c00115 	stw	r7,4(fp)
 8409aa8:	4807883a 	mov	r3,r9
 8409aac:	4800cd16 	blt	r9,zero,8409de4 <_malloc_r+0x554>
 8409ab0:	1807d0ba 	srai	r3,r3,2
 8409ab4:	00800044 	movi	r2,1
 8409ab8:	10c8983a 	sll	r4,r2,r3
 8409abc:	39004436 	bltu	r7,r4,8409bd0 <_malloc_r+0x340>
 8409ac0:	21c4703a 	and	r2,r4,r7
 8409ac4:	10000a1e 	bne	r2,zero,8409af0 <_malloc_r+0x260>
 8409ac8:	2109883a 	add	r4,r4,r4
 8409acc:	00bfff04 	movi	r2,-4
 8409ad0:	4884703a 	and	r2,r9,r2
 8409ad4:	3906703a 	and	r3,r7,r4
 8409ad8:	12400104 	addi	r9,r2,4
 8409adc:	1800041e 	bne	r3,zero,8409af0 <_malloc_r+0x260>
 8409ae0:	2109883a 	add	r4,r4,r4
 8409ae4:	3904703a 	and	r2,r7,r4
 8409ae8:	4a400104 	addi	r9,r9,4
 8409aec:	103ffc26 	beq	r2,zero,8409ae0 <_malloc_r+0x250>
 8409af0:	480490fa 	slli	r2,r9,3
 8409af4:	4819883a 	mov	r12,r9
 8409af8:	023fff04 	movi	r8,-4
 8409afc:	589b883a 	add	r13,r11,r2
 8409b00:	6807883a 	mov	r3,r13
 8409b04:	014003c4 	movi	r5,15
 8409b08:	1c000317 	ldw	r16,12(r3)
 8409b0c:	1c00041e 	bne	r3,r16,8409b20 <_malloc_r+0x290>
 8409b10:	0000a706 	br	8409db0 <_malloc_r+0x520>
 8409b14:	3000ab0e 	bge	r6,zero,8409dc4 <_malloc_r+0x534>
 8409b18:	84000317 	ldw	r16,12(r16)
 8409b1c:	1c00a426 	beq	r3,r16,8409db0 <_malloc_r+0x520>
 8409b20:	80800117 	ldw	r2,4(r16)
 8409b24:	1204703a 	and	r2,r2,r8
 8409b28:	144dc83a 	sub	r6,r2,r17
 8409b2c:	29bff90e 	bge	r5,r6,8409b14 <_malloc_r+0x284>
 8409b30:	81000317 	ldw	r4,12(r16)
 8409b34:	80c00217 	ldw	r3,8(r16)
 8409b38:	89400054 	ori	r5,r17,1
 8409b3c:	8445883a 	add	r2,r16,r17
 8409b40:	20c00215 	stw	r3,8(r4)
 8409b44:	19000315 	stw	r4,12(r3)
 8409b48:	81400115 	stw	r5,4(r16)
 8409b4c:	1187883a 	add	r3,r2,r6
 8409b50:	31000054 	ori	r4,r6,1
 8409b54:	50800315 	stw	r2,12(r10)
 8409b58:	50800215 	stw	r2,8(r10)
 8409b5c:	19800015 	stw	r6,0(r3)
 8409b60:	11000115 	stw	r4,4(r2)
 8409b64:	12800215 	stw	r10,8(r2)
 8409b68:	12800315 	stw	r10,12(r2)
 8409b6c:	9009883a 	mov	r4,r18
 8409b70:	840d5240 	call	840d524 <__malloc_unlock>
 8409b74:	80c00204 	addi	r3,r16,8
 8409b78:	003f5906 	br	84098e0 <_malloc_r+0x50>
 8409b7c:	8109883a 	add	r4,r16,r4
 8409b80:	20800117 	ldw	r2,4(r4)
 8409b84:	80c00217 	ldw	r3,8(r16)
 8409b88:	81400317 	ldw	r5,12(r16)
 8409b8c:	10800054 	ori	r2,r2,1
 8409b90:	20800115 	stw	r2,4(r4)
 8409b94:	28c00215 	stw	r3,8(r5)
 8409b98:	19400315 	stw	r5,12(r3)
 8409b9c:	9009883a 	mov	r4,r18
 8409ba0:	840d5240 	call	840d524 <__malloc_unlock>
 8409ba4:	80c00204 	addi	r3,r16,8
 8409ba8:	003f4d06 	br	84098e0 <_malloc_r+0x50>
 8409bac:	80800204 	addi	r2,r16,8
 8409bb0:	14000317 	ldw	r16,12(r2)
 8409bb4:	143f911e 	bne	r2,r16,84099fc <_malloc_r+0x16c>
 8409bb8:	1a400084 	addi	r9,r3,2
 8409bbc:	003f7306 	br	840998c <_malloc_r+0xfc>
 8409bc0:	88c00054 	ori	r3,r17,1
 8409bc4:	8445883a 	add	r2,r16,r17
 8409bc8:	80c00115 	stw	r3,4(r16)
 8409bcc:	003fdf06 	br	8409b4c <_malloc_r+0x2bc>
 8409bd0:	e4000217 	ldw	r16,8(fp)
 8409bd4:	00bfff04 	movi	r2,-4
 8409bd8:	80c00117 	ldw	r3,4(r16)
 8409bdc:	802d883a 	mov	r22,r16
 8409be0:	18aa703a 	and	r21,r3,r2
 8409be4:	ac401636 	bltu	r21,r17,8409c40 <_malloc_r+0x3b0>
 8409be8:	ac49c83a 	sub	r4,r21,r17
 8409bec:	008003c4 	movi	r2,15
 8409bf0:	1100130e 	bge	r2,r4,8409c40 <_malloc_r+0x3b0>
 8409bf4:	88800054 	ori	r2,r17,1
 8409bf8:	8447883a 	add	r3,r16,r17
 8409bfc:	80800115 	stw	r2,4(r16)
 8409c00:	20800054 	ori	r2,r4,1
 8409c04:	18800115 	stw	r2,4(r3)
 8409c08:	e0c00215 	stw	r3,8(fp)
 8409c0c:	9009883a 	mov	r4,r18
 8409c10:	840d5240 	call	840d524 <__malloc_unlock>
 8409c14:	80c00204 	addi	r3,r16,8
 8409c18:	003f3106 	br	84098e0 <_malloc_r+0x50>
 8409c1c:	39c00117 	ldw	r7,4(r7)
 8409c20:	573ffe04 	addi	fp,r10,-8
 8409c24:	003fa006 	br	8409aa8 <_malloc_r+0x218>
 8409c28:	00801504 	movi	r2,84
 8409c2c:	10c06736 	bltu	r2,r3,8409dcc <_malloc_r+0x53c>
 8409c30:	8804d33a 	srli	r2,r17,12
 8409c34:	11801b84 	addi	r6,r2,110
 8409c38:	300490fa 	slli	r2,r6,3
 8409c3c:	003f4106 	br	8409944 <_malloc_r+0xb4>
 8409c40:	d0a71317 	ldw	r2,-25524(gp)
 8409c44:	d0e00917 	ldw	r3,-32732(gp)
 8409c48:	053fffc4 	movi	r20,-1
 8409c4c:	10800404 	addi	r2,r2,16
 8409c50:	88a7883a 	add	r19,r17,r2
 8409c54:	1d000326 	beq	r3,r20,8409c64 <_malloc_r+0x3d4>
 8409c58:	98c3ffc4 	addi	r3,r19,4095
 8409c5c:	00bc0004 	movi	r2,-4096
 8409c60:	18a6703a 	and	r19,r3,r2
 8409c64:	9009883a 	mov	r4,r18
 8409c68:	980b883a 	mov	r5,r19
 8409c6c:	840b8f40 	call	840b8f4 <_sbrk_r>
 8409c70:	1009883a 	mov	r4,r2
 8409c74:	15000426 	beq	r2,r20,8409c88 <_malloc_r+0x3f8>
 8409c78:	854b883a 	add	r5,r16,r21
 8409c7c:	1029883a 	mov	r20,r2
 8409c80:	11405a2e 	bgeu	r2,r5,8409dec <_malloc_r+0x55c>
 8409c84:	87000c26 	beq	r16,fp,8409cb8 <_malloc_r+0x428>
 8409c88:	e4000217 	ldw	r16,8(fp)
 8409c8c:	80c00117 	ldw	r3,4(r16)
 8409c90:	00bfff04 	movi	r2,-4
 8409c94:	1884703a 	and	r2,r3,r2
 8409c98:	14400336 	bltu	r2,r17,8409ca8 <_malloc_r+0x418>
 8409c9c:	1449c83a 	sub	r4,r2,r17
 8409ca0:	008003c4 	movi	r2,15
 8409ca4:	113fd316 	blt	r2,r4,8409bf4 <_malloc_r+0x364>
 8409ca8:	9009883a 	mov	r4,r18
 8409cac:	840d5240 	call	840d524 <__malloc_unlock>
 8409cb0:	0007883a 	mov	r3,zero
 8409cb4:	003f0a06 	br	84098e0 <_malloc_r+0x50>
 8409cb8:	05c21074 	movhi	r23,2113
 8409cbc:	bdd56b04 	addi	r23,r23,21932
 8409cc0:	b8800017 	ldw	r2,0(r23)
 8409cc4:	988d883a 	add	r6,r19,r2
 8409cc8:	b9800015 	stw	r6,0(r23)
 8409ccc:	d0e00917 	ldw	r3,-32732(gp)
 8409cd0:	00bfffc4 	movi	r2,-1
 8409cd4:	18808e26 	beq	r3,r2,8409f10 <_malloc_r+0x680>
 8409cd8:	2145c83a 	sub	r2,r4,r5
 8409cdc:	3085883a 	add	r2,r6,r2
 8409ce0:	b8800015 	stw	r2,0(r23)
 8409ce4:	20c001cc 	andi	r3,r4,7
 8409ce8:	18005f1e 	bne	r3,zero,8409e68 <_malloc_r+0x5d8>
 8409cec:	000b883a 	mov	r5,zero
 8409cf0:	a4c5883a 	add	r2,r20,r19
 8409cf4:	1083ffcc 	andi	r2,r2,4095
 8409cf8:	00c40004 	movi	r3,4096
 8409cfc:	1887c83a 	sub	r3,r3,r2
 8409d00:	28e7883a 	add	r19,r5,r3
 8409d04:	9009883a 	mov	r4,r18
 8409d08:	980b883a 	mov	r5,r19
 8409d0c:	840b8f40 	call	840b8f4 <_sbrk_r>
 8409d10:	1007883a 	mov	r3,r2
 8409d14:	00bfffc4 	movi	r2,-1
 8409d18:	18807a26 	beq	r3,r2,8409f04 <_malloc_r+0x674>
 8409d1c:	1d05c83a 	sub	r2,r3,r20
 8409d20:	9885883a 	add	r2,r19,r2
 8409d24:	10c00054 	ori	r3,r2,1
 8409d28:	b8800017 	ldw	r2,0(r23)
 8409d2c:	a021883a 	mov	r16,r20
 8409d30:	a0c00115 	stw	r3,4(r20)
 8409d34:	9885883a 	add	r2,r19,r2
 8409d38:	b8800015 	stw	r2,0(r23)
 8409d3c:	e5000215 	stw	r20,8(fp)
 8409d40:	b7003626 	beq	r22,fp,8409e1c <_malloc_r+0x58c>
 8409d44:	018003c4 	movi	r6,15
 8409d48:	35404b36 	bltu	r6,r21,8409e78 <_malloc_r+0x5e8>
 8409d4c:	00800044 	movi	r2,1
 8409d50:	a0800115 	stw	r2,4(r20)
 8409d54:	003fcd06 	br	8409c8c <_malloc_r+0x3fc>
 8409d58:	2808d27a 	srli	r4,r5,9
 8409d5c:	2000371e 	bne	r4,zero,8409e3c <_malloc_r+0x5ac>
 8409d60:	2808d0fa 	srli	r4,r5,3
 8409d64:	200690fa 	slli	r3,r4,3
 8409d68:	1ad1883a 	add	r8,r3,r11
 8409d6c:	41800217 	ldw	r6,8(r8)
 8409d70:	41805b26 	beq	r8,r6,8409ee0 <_malloc_r+0x650>
 8409d74:	30800117 	ldw	r2,4(r6)
 8409d78:	00ffff04 	movi	r3,-4
 8409d7c:	10c4703a 	and	r2,r2,r3
 8409d80:	2880022e 	bgeu	r5,r2,8409d8c <_malloc_r+0x4fc>
 8409d84:	31800217 	ldw	r6,8(r6)
 8409d88:	41bffa1e 	bne	r8,r6,8409d74 <_malloc_r+0x4e4>
 8409d8c:	32000317 	ldw	r8,12(r6)
 8409d90:	39c00117 	ldw	r7,4(r7)
 8409d94:	82000315 	stw	r8,12(r16)
 8409d98:	81800215 	stw	r6,8(r16)
 8409d9c:	07021074 	movhi	fp,2113
 8409da0:	e7087904 	addi	fp,fp,8676
 8409da4:	34000315 	stw	r16,12(r6)
 8409da8:	44000215 	stw	r16,8(r8)
 8409dac:	003f3e06 	br	8409aa8 <_malloc_r+0x218>
 8409db0:	63000044 	addi	r12,r12,1
 8409db4:	608000cc 	andi	r2,r12,3
 8409db8:	10005d26 	beq	r2,zero,8409f30 <_malloc_r+0x6a0>
 8409dbc:	18c00204 	addi	r3,r3,8
 8409dc0:	003f5106 	br	8409b08 <_malloc_r+0x278>
 8409dc4:	8089883a 	add	r4,r16,r2
 8409dc8:	003f6d06 	br	8409b80 <_malloc_r+0x2f0>
 8409dcc:	00805504 	movi	r2,340
 8409dd0:	10c02036 	bltu	r2,r3,8409e54 <_malloc_r+0x5c4>
 8409dd4:	8804d3fa 	srli	r2,r17,15
 8409dd8:	11801dc4 	addi	r6,r2,119
 8409ddc:	300490fa 	slli	r2,r6,3
 8409de0:	003ed806 	br	8409944 <_malloc_r+0xb4>
 8409de4:	48c000c4 	addi	r3,r9,3
 8409de8:	003f3106 	br	8409ab0 <_malloc_r+0x220>
 8409dec:	05c21074 	movhi	r23,2113
 8409df0:	bdd56b04 	addi	r23,r23,21932
 8409df4:	b8800017 	ldw	r2,0(r23)
 8409df8:	988d883a 	add	r6,r19,r2
 8409dfc:	b9800015 	stw	r6,0(r23)
 8409e00:	293fb21e 	bne	r5,r4,8409ccc <_malloc_r+0x43c>
 8409e04:	2083ffcc 	andi	r2,r4,4095
 8409e08:	103fb01e 	bne	r2,zero,8409ccc <_malloc_r+0x43c>
 8409e0c:	e4000217 	ldw	r16,8(fp)
 8409e10:	9d45883a 	add	r2,r19,r21
 8409e14:	10800054 	ori	r2,r2,1
 8409e18:	80800115 	stw	r2,4(r16)
 8409e1c:	b8c00017 	ldw	r3,0(r23)
 8409e20:	d0a71417 	ldw	r2,-25520(gp)
 8409e24:	10c0012e 	bgeu	r2,r3,8409e2c <_malloc_r+0x59c>
 8409e28:	d0e71415 	stw	r3,-25520(gp)
 8409e2c:	d0a71517 	ldw	r2,-25516(gp)
 8409e30:	10ff962e 	bgeu	r2,r3,8409c8c <_malloc_r+0x3fc>
 8409e34:	d0e71515 	stw	r3,-25516(gp)
 8409e38:	003f9406 	br	8409c8c <_malloc_r+0x3fc>
 8409e3c:	00800104 	movi	r2,4
 8409e40:	11001e36 	bltu	r2,r4,8409ebc <_malloc_r+0x62c>
 8409e44:	2804d1ba 	srli	r2,r5,6
 8409e48:	11000e04 	addi	r4,r2,56
 8409e4c:	200690fa 	slli	r3,r4,3
 8409e50:	003fc506 	br	8409d68 <_malloc_r+0x4d8>
 8409e54:	00815504 	movi	r2,1364
 8409e58:	10c01d2e 	bgeu	r2,r3,8409ed0 <_malloc_r+0x640>
 8409e5c:	01801f84 	movi	r6,126
 8409e60:	0080fc04 	movi	r2,1008
 8409e64:	003eb706 	br	8409944 <_malloc_r+0xb4>
 8409e68:	00800204 	movi	r2,8
 8409e6c:	10cbc83a 	sub	r5,r2,r3
 8409e70:	2169883a 	add	r20,r4,r5
 8409e74:	003f9e06 	br	8409cf0 <_malloc_r+0x460>
 8409e78:	00bffe04 	movi	r2,-8
 8409e7c:	a93ffd04 	addi	r4,r21,-12
 8409e80:	2088703a 	and	r4,r4,r2
 8409e84:	b10b883a 	add	r5,r22,r4
 8409e88:	00c00144 	movi	r3,5
 8409e8c:	28c00215 	stw	r3,8(r5)
 8409e90:	28c00115 	stw	r3,4(r5)
 8409e94:	b0800117 	ldw	r2,4(r22)
 8409e98:	1080004c 	andi	r2,r2,1
 8409e9c:	2084b03a 	or	r2,r4,r2
 8409ea0:	b0800115 	stw	r2,4(r22)
 8409ea4:	313fdd2e 	bgeu	r6,r4,8409e1c <_malloc_r+0x58c>
 8409ea8:	b1400204 	addi	r5,r22,8
 8409eac:	9009883a 	mov	r4,r18
 8409eb0:	8408d080 	call	8408d08 <_free_r>
 8409eb4:	e4000217 	ldw	r16,8(fp)
 8409eb8:	003fd806 	br	8409e1c <_malloc_r+0x58c>
 8409ebc:	00800504 	movi	r2,20
 8409ec0:	11001536 	bltu	r2,r4,8409f18 <_malloc_r+0x688>
 8409ec4:	210016c4 	addi	r4,r4,91
 8409ec8:	200690fa 	slli	r3,r4,3
 8409ecc:	003fa606 	br	8409d68 <_malloc_r+0x4d8>
 8409ed0:	8804d4ba 	srli	r2,r17,18
 8409ed4:	11801f04 	addi	r6,r2,124
 8409ed8:	300490fa 	slli	r2,r6,3
 8409edc:	003e9906 	br	8409944 <_malloc_r+0xb4>
 8409ee0:	2009d0ba 	srai	r4,r4,2
 8409ee4:	01421074 	movhi	r5,2113
 8409ee8:	29487904 	addi	r5,r5,8676
 8409eec:	00c00044 	movi	r3,1
 8409ef0:	28800117 	ldw	r2,4(r5)
 8409ef4:	1906983a 	sll	r3,r3,r4
 8409ef8:	10c4b03a 	or	r2,r2,r3
 8409efc:	28800115 	stw	r2,4(r5)
 8409f00:	003fa306 	br	8409d90 <_malloc_r+0x500>
 8409f04:	0027883a 	mov	r19,zero
 8409f08:	00c00044 	movi	r3,1
 8409f0c:	003f8606 	br	8409d28 <_malloc_r+0x498>
 8409f10:	d1200915 	stw	r4,-32732(gp)
 8409f14:	003f7306 	br	8409ce4 <_malloc_r+0x454>
 8409f18:	00801504 	movi	r2,84
 8409f1c:	11001936 	bltu	r2,r4,8409f84 <_malloc_r+0x6f4>
 8409f20:	2804d33a 	srli	r2,r5,12
 8409f24:	11001b84 	addi	r4,r2,110
 8409f28:	200690fa 	slli	r3,r4,3
 8409f2c:	003f8e06 	br	8409d68 <_malloc_r+0x4d8>
 8409f30:	480b883a 	mov	r5,r9
 8409f34:	6807883a 	mov	r3,r13
 8409f38:	288000cc 	andi	r2,r5,3
 8409f3c:	18fffe04 	addi	r3,r3,-8
 8409f40:	297fffc4 	addi	r5,r5,-1
 8409f44:	10001526 	beq	r2,zero,8409f9c <_malloc_r+0x70c>
 8409f48:	18800217 	ldw	r2,8(r3)
 8409f4c:	10fffa26 	beq	r2,r3,8409f38 <_malloc_r+0x6a8>
 8409f50:	2109883a 	add	r4,r4,r4
 8409f54:	393f1e36 	bltu	r7,r4,8409bd0 <_malloc_r+0x340>
 8409f58:	203f1d26 	beq	r4,zero,8409bd0 <_malloc_r+0x340>
 8409f5c:	21c4703a 	and	r2,r4,r7
 8409f60:	10000226 	beq	r2,zero,8409f6c <_malloc_r+0x6dc>
 8409f64:	6013883a 	mov	r9,r12
 8409f68:	003ee106 	br	8409af0 <_malloc_r+0x260>
 8409f6c:	2109883a 	add	r4,r4,r4
 8409f70:	3904703a 	and	r2,r7,r4
 8409f74:	63000104 	addi	r12,r12,4
 8409f78:	103ffc26 	beq	r2,zero,8409f6c <_malloc_r+0x6dc>
 8409f7c:	6013883a 	mov	r9,r12
 8409f80:	003edb06 	br	8409af0 <_malloc_r+0x260>
 8409f84:	00805504 	movi	r2,340
 8409f88:	11000836 	bltu	r2,r4,8409fac <_malloc_r+0x71c>
 8409f8c:	2804d3fa 	srli	r2,r5,15
 8409f90:	11001dc4 	addi	r4,r2,119
 8409f94:	200690fa 	slli	r3,r4,3
 8409f98:	003f7306 	br	8409d68 <_malloc_r+0x4d8>
 8409f9c:	0104303a 	nor	r2,zero,r4
 8409fa0:	388e703a 	and	r7,r7,r2
 8409fa4:	e1c00115 	stw	r7,4(fp)
 8409fa8:	003fe906 	br	8409f50 <_malloc_r+0x6c0>
 8409fac:	00815504 	movi	r2,1364
 8409fb0:	1100032e 	bgeu	r2,r4,8409fc0 <_malloc_r+0x730>
 8409fb4:	01001f84 	movi	r4,126
 8409fb8:	00c0fc04 	movi	r3,1008
 8409fbc:	003f6a06 	br	8409d68 <_malloc_r+0x4d8>
 8409fc0:	2804d4ba 	srli	r2,r5,18
 8409fc4:	11001f04 	addi	r4,r2,124
 8409fc8:	200690fa 	slli	r3,r4,3
 8409fcc:	003f6606 	br	8409d68 <_malloc_r+0x4d8>

08409fd0 <memchr>:
 8409fd0:	008000c4 	movi	r2,3
 8409fd4:	29403fcc 	andi	r5,r5,255
 8409fd8:	2007883a 	mov	r3,r4
 8409fdc:	1180022e 	bgeu	r2,r6,8409fe8 <memchr+0x18>
 8409fe0:	2084703a 	and	r2,r4,r2
 8409fe4:	10000b26 	beq	r2,zero,840a014 <memchr+0x44>
 8409fe8:	313fffc4 	addi	r4,r6,-1
 8409fec:	3000051e 	bne	r6,zero,840a004 <memchr+0x34>
 8409ff0:	00002c06 	br	840a0a4 <memchr+0xd4>
 8409ff4:	213fffc4 	addi	r4,r4,-1
 8409ff8:	00bfffc4 	movi	r2,-1
 8409ffc:	18c00044 	addi	r3,r3,1
 840a000:	20802826 	beq	r4,r2,840a0a4 <memchr+0xd4>
 840a004:	18800003 	ldbu	r2,0(r3)
 840a008:	28bffa1e 	bne	r5,r2,8409ff4 <memchr+0x24>
 840a00c:	1805883a 	mov	r2,r3
 840a010:	f800283a 	ret
 840a014:	0011883a 	mov	r8,zero
 840a018:	0007883a 	mov	r3,zero
 840a01c:	01c00104 	movi	r7,4
 840a020:	4004923a 	slli	r2,r8,8
 840a024:	18c00044 	addi	r3,r3,1
 840a028:	1151883a 	add	r8,r2,r5
 840a02c:	19fffc1e 	bne	r3,r7,840a020 <memchr+0x50>
 840a030:	02bfbff4 	movhi	r10,65279
 840a034:	52bfbfc4 	addi	r10,r10,-257
 840a038:	02602074 	movhi	r9,32897
 840a03c:	4a602004 	addi	r9,r9,-32640
 840a040:	02c000c4 	movi	r11,3
 840a044:	20800017 	ldw	r2,0(r4)
 840a048:	31bfff04 	addi	r6,r6,-4
 840a04c:	200f883a 	mov	r7,r4
 840a050:	1204f03a 	xor	r2,r2,r8
 840a054:	1287883a 	add	r3,r2,r10
 840a058:	1a46703a 	and	r3,r3,r9
 840a05c:	0084303a 	nor	r2,zero,r2
 840a060:	10c4703a 	and	r2,r2,r3
 840a064:	10000b26 	beq	r2,zero,840a094 <memchr+0xc4>
 840a068:	20800003 	ldbu	r2,0(r4)
 840a06c:	28800f26 	beq	r5,r2,840a0ac <memchr+0xdc>
 840a070:	20800043 	ldbu	r2,1(r4)
 840a074:	21c00044 	addi	r7,r4,1
 840a078:	28800c26 	beq	r5,r2,840a0ac <memchr+0xdc>
 840a07c:	20800083 	ldbu	r2,2(r4)
 840a080:	21c00084 	addi	r7,r4,2
 840a084:	28800926 	beq	r5,r2,840a0ac <memchr+0xdc>
 840a088:	208000c3 	ldbu	r2,3(r4)
 840a08c:	21c000c4 	addi	r7,r4,3
 840a090:	28800626 	beq	r5,r2,840a0ac <memchr+0xdc>
 840a094:	21000104 	addi	r4,r4,4
 840a098:	59bfea36 	bltu	r11,r6,840a044 <memchr+0x74>
 840a09c:	2007883a 	mov	r3,r4
 840a0a0:	003fd106 	br	8409fe8 <memchr+0x18>
 840a0a4:	0005883a 	mov	r2,zero
 840a0a8:	f800283a 	ret
 840a0ac:	3805883a 	mov	r2,r7
 840a0b0:	f800283a 	ret

0840a0b4 <memcpy>:
 840a0b4:	01c003c4 	movi	r7,15
 840a0b8:	2007883a 	mov	r3,r4
 840a0bc:	3980032e 	bgeu	r7,r6,840a0cc <memcpy+0x18>
 840a0c0:	2904b03a 	or	r2,r5,r4
 840a0c4:	108000cc 	andi	r2,r2,3
 840a0c8:	10000926 	beq	r2,zero,840a0f0 <memcpy+0x3c>
 840a0cc:	30000626 	beq	r6,zero,840a0e8 <memcpy+0x34>
 840a0d0:	30cd883a 	add	r6,r6,r3
 840a0d4:	28800003 	ldbu	r2,0(r5)
 840a0d8:	29400044 	addi	r5,r5,1
 840a0dc:	18800005 	stb	r2,0(r3)
 840a0e0:	18c00044 	addi	r3,r3,1
 840a0e4:	30fffb1e 	bne	r6,r3,840a0d4 <memcpy+0x20>
 840a0e8:	2005883a 	mov	r2,r4
 840a0ec:	f800283a 	ret
 840a0f0:	3811883a 	mov	r8,r7
 840a0f4:	200f883a 	mov	r7,r4
 840a0f8:	28c00017 	ldw	r3,0(r5)
 840a0fc:	31bffc04 	addi	r6,r6,-16
 840a100:	38c00015 	stw	r3,0(r7)
 840a104:	28800117 	ldw	r2,4(r5)
 840a108:	38800115 	stw	r2,4(r7)
 840a10c:	28c00217 	ldw	r3,8(r5)
 840a110:	38c00215 	stw	r3,8(r7)
 840a114:	28800317 	ldw	r2,12(r5)
 840a118:	29400404 	addi	r5,r5,16
 840a11c:	38800315 	stw	r2,12(r7)
 840a120:	39c00404 	addi	r7,r7,16
 840a124:	41bff436 	bltu	r8,r6,840a0f8 <memcpy+0x44>
 840a128:	008000c4 	movi	r2,3
 840a12c:	1180072e 	bgeu	r2,r6,840a14c <memcpy+0x98>
 840a130:	1007883a 	mov	r3,r2
 840a134:	28800017 	ldw	r2,0(r5)
 840a138:	31bfff04 	addi	r6,r6,-4
 840a13c:	29400104 	addi	r5,r5,4
 840a140:	38800015 	stw	r2,0(r7)
 840a144:	39c00104 	addi	r7,r7,4
 840a148:	19bffa36 	bltu	r3,r6,840a134 <memcpy+0x80>
 840a14c:	3807883a 	mov	r3,r7
 840a150:	003fde06 	br	840a0cc <memcpy+0x18>

0840a154 <memmove>:
 840a154:	2807883a 	mov	r3,r5
 840a158:	2011883a 	mov	r8,r4
 840a15c:	29000c2e 	bgeu	r5,r4,840a190 <memmove+0x3c>
 840a160:	298f883a 	add	r7,r5,r6
 840a164:	21c00a2e 	bgeu	r4,r7,840a190 <memmove+0x3c>
 840a168:	30000726 	beq	r6,zero,840a188 <memmove+0x34>
 840a16c:	2187883a 	add	r3,r4,r6
 840a170:	198dc83a 	sub	r6,r3,r6
 840a174:	39ffffc4 	addi	r7,r7,-1
 840a178:	38800003 	ldbu	r2,0(r7)
 840a17c:	18ffffc4 	addi	r3,r3,-1
 840a180:	18800005 	stb	r2,0(r3)
 840a184:	19bffb1e 	bne	r3,r6,840a174 <memmove+0x20>
 840a188:	2005883a 	mov	r2,r4
 840a18c:	f800283a 	ret
 840a190:	01c003c4 	movi	r7,15
 840a194:	39800a36 	bltu	r7,r6,840a1c0 <memmove+0x6c>
 840a198:	303ffb26 	beq	r6,zero,840a188 <memmove+0x34>
 840a19c:	400f883a 	mov	r7,r8
 840a1a0:	320d883a 	add	r6,r6,r8
 840a1a4:	28800003 	ldbu	r2,0(r5)
 840a1a8:	29400044 	addi	r5,r5,1
 840a1ac:	38800005 	stb	r2,0(r7)
 840a1b0:	39c00044 	addi	r7,r7,1
 840a1b4:	39bffb1e 	bne	r7,r6,840a1a4 <memmove+0x50>
 840a1b8:	2005883a 	mov	r2,r4
 840a1bc:	f800283a 	ret
 840a1c0:	1904b03a 	or	r2,r3,r4
 840a1c4:	108000cc 	andi	r2,r2,3
 840a1c8:	103ff31e 	bne	r2,zero,840a198 <memmove+0x44>
 840a1cc:	3811883a 	mov	r8,r7
 840a1d0:	180b883a 	mov	r5,r3
 840a1d4:	200f883a 	mov	r7,r4
 840a1d8:	28c00017 	ldw	r3,0(r5)
 840a1dc:	31bffc04 	addi	r6,r6,-16
 840a1e0:	38c00015 	stw	r3,0(r7)
 840a1e4:	28800117 	ldw	r2,4(r5)
 840a1e8:	38800115 	stw	r2,4(r7)
 840a1ec:	28c00217 	ldw	r3,8(r5)
 840a1f0:	38c00215 	stw	r3,8(r7)
 840a1f4:	28800317 	ldw	r2,12(r5)
 840a1f8:	29400404 	addi	r5,r5,16
 840a1fc:	38800315 	stw	r2,12(r7)
 840a200:	39c00404 	addi	r7,r7,16
 840a204:	41bff436 	bltu	r8,r6,840a1d8 <memmove+0x84>
 840a208:	008000c4 	movi	r2,3
 840a20c:	1180072e 	bgeu	r2,r6,840a22c <memmove+0xd8>
 840a210:	1007883a 	mov	r3,r2
 840a214:	28800017 	ldw	r2,0(r5)
 840a218:	31bfff04 	addi	r6,r6,-4
 840a21c:	29400104 	addi	r5,r5,4
 840a220:	38800015 	stw	r2,0(r7)
 840a224:	39c00104 	addi	r7,r7,4
 840a228:	19bffa36 	bltu	r3,r6,840a214 <memmove+0xc0>
 840a22c:	3811883a 	mov	r8,r7
 840a230:	003fd906 	br	840a198 <memmove+0x44>

0840a234 <memset>:
 840a234:	008000c4 	movi	r2,3
 840a238:	29403fcc 	andi	r5,r5,255
 840a23c:	2007883a 	mov	r3,r4
 840a240:	1180022e 	bgeu	r2,r6,840a24c <memset+0x18>
 840a244:	2084703a 	and	r2,r4,r2
 840a248:	10000826 	beq	r2,zero,840a26c <memset+0x38>
 840a24c:	30000526 	beq	r6,zero,840a264 <memset+0x30>
 840a250:	2805883a 	mov	r2,r5
 840a254:	30cd883a 	add	r6,r6,r3
 840a258:	18800005 	stb	r2,0(r3)
 840a25c:	18c00044 	addi	r3,r3,1
 840a260:	19bffd1e 	bne	r3,r6,840a258 <memset+0x24>
 840a264:	2005883a 	mov	r2,r4
 840a268:	f800283a 	ret
 840a26c:	2804923a 	slli	r2,r5,8
 840a270:	020003c4 	movi	r8,15
 840a274:	200f883a 	mov	r7,r4
 840a278:	2884b03a 	or	r2,r5,r2
 840a27c:	1006943a 	slli	r3,r2,16
 840a280:	10c6b03a 	or	r3,r2,r3
 840a284:	41800a2e 	bgeu	r8,r6,840a2b0 <memset+0x7c>
 840a288:	4005883a 	mov	r2,r8
 840a28c:	31bffc04 	addi	r6,r6,-16
 840a290:	38c00015 	stw	r3,0(r7)
 840a294:	38c00115 	stw	r3,4(r7)
 840a298:	38c00215 	stw	r3,8(r7)
 840a29c:	38c00315 	stw	r3,12(r7)
 840a2a0:	39c00404 	addi	r7,r7,16
 840a2a4:	11bff936 	bltu	r2,r6,840a28c <memset+0x58>
 840a2a8:	008000c4 	movi	r2,3
 840a2ac:	1180052e 	bgeu	r2,r6,840a2c4 <memset+0x90>
 840a2b0:	31bfff04 	addi	r6,r6,-4
 840a2b4:	008000c4 	movi	r2,3
 840a2b8:	38c00015 	stw	r3,0(r7)
 840a2bc:	39c00104 	addi	r7,r7,4
 840a2c0:	11bffb36 	bltu	r2,r6,840a2b0 <memset+0x7c>
 840a2c4:	3807883a 	mov	r3,r7
 840a2c8:	003fe006 	br	840a24c <memset+0x18>

0840a2cc <_Bfree>:
 840a2cc:	28000826 	beq	r5,zero,840a2f0 <_Bfree+0x24>
 840a2d0:	28800117 	ldw	r2,4(r5)
 840a2d4:	21001317 	ldw	r4,76(r4)
 840a2d8:	1085883a 	add	r2,r2,r2
 840a2dc:	1085883a 	add	r2,r2,r2
 840a2e0:	1105883a 	add	r2,r2,r4
 840a2e4:	10c00017 	ldw	r3,0(r2)
 840a2e8:	28c00015 	stw	r3,0(r5)
 840a2ec:	11400015 	stw	r5,0(r2)
 840a2f0:	f800283a 	ret

0840a2f4 <__hi0bits>:
 840a2f4:	20bfffec 	andhi	r2,r4,65535
 840a2f8:	10001426 	beq	r2,zero,840a34c <__hi0bits+0x58>
 840a2fc:	0007883a 	mov	r3,zero
 840a300:	20bfc02c 	andhi	r2,r4,65280
 840a304:	1000021e 	bne	r2,zero,840a310 <__hi0bits+0x1c>
 840a308:	2008923a 	slli	r4,r4,8
 840a30c:	18c00204 	addi	r3,r3,8
 840a310:	20bc002c 	andhi	r2,r4,61440
 840a314:	1000021e 	bne	r2,zero,840a320 <__hi0bits+0x2c>
 840a318:	2008913a 	slli	r4,r4,4
 840a31c:	18c00104 	addi	r3,r3,4
 840a320:	20b0002c 	andhi	r2,r4,49152
 840a324:	1000031e 	bne	r2,zero,840a334 <__hi0bits+0x40>
 840a328:	2105883a 	add	r2,r4,r4
 840a32c:	18c00084 	addi	r3,r3,2
 840a330:	1089883a 	add	r4,r2,r2
 840a334:	20000316 	blt	r4,zero,840a344 <__hi0bits+0x50>
 840a338:	2090002c 	andhi	r2,r4,16384
 840a33c:	10000626 	beq	r2,zero,840a358 <__hi0bits+0x64>
 840a340:	18c00044 	addi	r3,r3,1
 840a344:	1805883a 	mov	r2,r3
 840a348:	f800283a 	ret
 840a34c:	2008943a 	slli	r4,r4,16
 840a350:	00c00404 	movi	r3,16
 840a354:	003fea06 	br	840a300 <__hi0bits+0xc>
 840a358:	00c00804 	movi	r3,32
 840a35c:	1805883a 	mov	r2,r3
 840a360:	f800283a 	ret

0840a364 <__lo0bits>:
 840a364:	20c00017 	ldw	r3,0(r4)
 840a368:	188001cc 	andi	r2,r3,7
 840a36c:	10000a26 	beq	r2,zero,840a398 <__lo0bits+0x34>
 840a370:	1880004c 	andi	r2,r3,1
 840a374:	1005003a 	cmpeq	r2,r2,zero
 840a378:	10002126 	beq	r2,zero,840a400 <__lo0bits+0x9c>
 840a37c:	1880008c 	andi	r2,r3,2
 840a380:	1000251e 	bne	r2,zero,840a418 <__lo0bits+0xb4>
 840a384:	1804d0ba 	srli	r2,r3,2
 840a388:	01400084 	movi	r5,2
 840a38c:	20800015 	stw	r2,0(r4)
 840a390:	2805883a 	mov	r2,r5
 840a394:	f800283a 	ret
 840a398:	18bfffcc 	andi	r2,r3,65535
 840a39c:	10001526 	beq	r2,zero,840a3f4 <__lo0bits+0x90>
 840a3a0:	000b883a 	mov	r5,zero
 840a3a4:	18803fcc 	andi	r2,r3,255
 840a3a8:	1000021e 	bne	r2,zero,840a3b4 <__lo0bits+0x50>
 840a3ac:	1806d23a 	srli	r3,r3,8
 840a3b0:	29400204 	addi	r5,r5,8
 840a3b4:	188003cc 	andi	r2,r3,15
 840a3b8:	1000021e 	bne	r2,zero,840a3c4 <__lo0bits+0x60>
 840a3bc:	1806d13a 	srli	r3,r3,4
 840a3c0:	29400104 	addi	r5,r5,4
 840a3c4:	188000cc 	andi	r2,r3,3
 840a3c8:	1000021e 	bne	r2,zero,840a3d4 <__lo0bits+0x70>
 840a3cc:	1806d0ba 	srli	r3,r3,2
 840a3d0:	29400084 	addi	r5,r5,2
 840a3d4:	1880004c 	andi	r2,r3,1
 840a3d8:	1000031e 	bne	r2,zero,840a3e8 <__lo0bits+0x84>
 840a3dc:	1806d07a 	srli	r3,r3,1
 840a3e0:	18000a26 	beq	r3,zero,840a40c <__lo0bits+0xa8>
 840a3e4:	29400044 	addi	r5,r5,1
 840a3e8:	2805883a 	mov	r2,r5
 840a3ec:	20c00015 	stw	r3,0(r4)
 840a3f0:	f800283a 	ret
 840a3f4:	1806d43a 	srli	r3,r3,16
 840a3f8:	01400404 	movi	r5,16
 840a3fc:	003fe906 	br	840a3a4 <__lo0bits+0x40>
 840a400:	000b883a 	mov	r5,zero
 840a404:	2805883a 	mov	r2,r5
 840a408:	f800283a 	ret
 840a40c:	01400804 	movi	r5,32
 840a410:	2805883a 	mov	r2,r5
 840a414:	f800283a 	ret
 840a418:	1804d07a 	srli	r2,r3,1
 840a41c:	01400044 	movi	r5,1
 840a420:	20800015 	stw	r2,0(r4)
 840a424:	003fda06 	br	840a390 <__lo0bits+0x2c>

0840a428 <__mcmp>:
 840a428:	20800417 	ldw	r2,16(r4)
 840a42c:	28c00417 	ldw	r3,16(r5)
 840a430:	10cfc83a 	sub	r7,r2,r3
 840a434:	38000c1e 	bne	r7,zero,840a468 <__mcmp+0x40>
 840a438:	18c5883a 	add	r2,r3,r3
 840a43c:	1085883a 	add	r2,r2,r2
 840a440:	10c00504 	addi	r3,r2,20
 840a444:	21000504 	addi	r4,r4,20
 840a448:	28cb883a 	add	r5,r5,r3
 840a44c:	2085883a 	add	r2,r4,r2
 840a450:	10bfff04 	addi	r2,r2,-4
 840a454:	297fff04 	addi	r5,r5,-4
 840a458:	11800017 	ldw	r6,0(r2)
 840a45c:	28c00017 	ldw	r3,0(r5)
 840a460:	30c0031e 	bne	r6,r3,840a470 <__mcmp+0x48>
 840a464:	20bffa36 	bltu	r4,r2,840a450 <__mcmp+0x28>
 840a468:	3805883a 	mov	r2,r7
 840a46c:	f800283a 	ret
 840a470:	30c00336 	bltu	r6,r3,840a480 <__mcmp+0x58>
 840a474:	01c00044 	movi	r7,1
 840a478:	3805883a 	mov	r2,r7
 840a47c:	f800283a 	ret
 840a480:	01ffffc4 	movi	r7,-1
 840a484:	003ff806 	br	840a468 <__mcmp+0x40>

0840a488 <__ulp>:
 840a488:	295ffc2c 	andhi	r5,r5,32752
 840a48c:	013f3034 	movhi	r4,64704
 840a490:	290b883a 	add	r5,r5,r4
 840a494:	0145c83a 	sub	r2,zero,r5
 840a498:	1007d53a 	srai	r3,r2,20
 840a49c:	000d883a 	mov	r6,zero
 840a4a0:	0140040e 	bge	zero,r5,840a4b4 <__ulp+0x2c>
 840a4a4:	280f883a 	mov	r7,r5
 840a4a8:	3807883a 	mov	r3,r7
 840a4ac:	3005883a 	mov	r2,r6
 840a4b0:	f800283a 	ret
 840a4b4:	008004c4 	movi	r2,19
 840a4b8:	193ffb04 	addi	r4,r3,-20
 840a4bc:	10c00c0e 	bge	r2,r3,840a4f0 <__ulp+0x68>
 840a4c0:	008007c4 	movi	r2,31
 840a4c4:	1107c83a 	sub	r3,r2,r4
 840a4c8:	00800784 	movi	r2,30
 840a4cc:	01400044 	movi	r5,1
 840a4d0:	11000216 	blt	r2,r4,840a4dc <__ulp+0x54>
 840a4d4:	00800044 	movi	r2,1
 840a4d8:	10ca983a 	sll	r5,r2,r3
 840a4dc:	000f883a 	mov	r7,zero
 840a4e0:	280d883a 	mov	r6,r5
 840a4e4:	3807883a 	mov	r3,r7
 840a4e8:	3005883a 	mov	r2,r6
 840a4ec:	f800283a 	ret
 840a4f0:	00800234 	movhi	r2,8
 840a4f4:	10cfd83a 	sra	r7,r2,r3
 840a4f8:	000d883a 	mov	r6,zero
 840a4fc:	3005883a 	mov	r2,r6
 840a500:	3807883a 	mov	r3,r7
 840a504:	f800283a 	ret

0840a508 <__b2d>:
 840a508:	20800417 	ldw	r2,16(r4)
 840a50c:	defff904 	addi	sp,sp,-28
 840a510:	dd000415 	stw	r20,16(sp)
 840a514:	1085883a 	add	r2,r2,r2
 840a518:	25000504 	addi	r20,r4,20
 840a51c:	1085883a 	add	r2,r2,r2
 840a520:	dc000015 	stw	r16,0(sp)
 840a524:	a0a1883a 	add	r16,r20,r2
 840a528:	dd400515 	stw	r21,20(sp)
 840a52c:	857fff17 	ldw	r21,-4(r16)
 840a530:	dc400115 	stw	r17,4(sp)
 840a534:	dfc00615 	stw	ra,24(sp)
 840a538:	a809883a 	mov	r4,r21
 840a53c:	2823883a 	mov	r17,r5
 840a540:	dcc00315 	stw	r19,12(sp)
 840a544:	dc800215 	stw	r18,8(sp)
 840a548:	840a2f40 	call	840a2f4 <__hi0bits>
 840a54c:	100b883a 	mov	r5,r2
 840a550:	00800804 	movi	r2,32
 840a554:	1145c83a 	sub	r2,r2,r5
 840a558:	88800015 	stw	r2,0(r17)
 840a55c:	00800284 	movi	r2,10
 840a560:	80ffff04 	addi	r3,r16,-4
 840a564:	11401416 	blt	r2,r5,840a5b8 <__b2d+0xb0>
 840a568:	008002c4 	movi	r2,11
 840a56c:	1149c83a 	sub	r4,r2,r5
 840a570:	a0c02736 	bltu	r20,r3,840a610 <__b2d+0x108>
 840a574:	000d883a 	mov	r6,zero
 840a578:	28800544 	addi	r2,r5,21
 840a57c:	a906d83a 	srl	r3,r21,r4
 840a580:	a884983a 	sll	r2,r21,r2
 840a584:	1ccffc34 	orhi	r19,r3,16368
 840a588:	11a4b03a 	or	r18,r2,r6
 840a58c:	9005883a 	mov	r2,r18
 840a590:	9807883a 	mov	r3,r19
 840a594:	dfc00617 	ldw	ra,24(sp)
 840a598:	dd400517 	ldw	r21,20(sp)
 840a59c:	dd000417 	ldw	r20,16(sp)
 840a5a0:	dcc00317 	ldw	r19,12(sp)
 840a5a4:	dc800217 	ldw	r18,8(sp)
 840a5a8:	dc400117 	ldw	r17,4(sp)
 840a5ac:	dc000017 	ldw	r16,0(sp)
 840a5b0:	dec00704 	addi	sp,sp,28
 840a5b4:	f800283a 	ret
 840a5b8:	a0c00e36 	bltu	r20,r3,840a5f4 <__b2d+0xec>
 840a5bc:	293ffd44 	addi	r4,r5,-11
 840a5c0:	000d883a 	mov	r6,zero
 840a5c4:	20000f26 	beq	r4,zero,840a604 <__b2d+0xfc>
 840a5c8:	00800804 	movi	r2,32
 840a5cc:	110bc83a 	sub	r5,r2,r4
 840a5d0:	a0c01236 	bltu	r20,r3,840a61c <__b2d+0x114>
 840a5d4:	000f883a 	mov	r7,zero
 840a5d8:	a904983a 	sll	r2,r21,r4
 840a5dc:	3146d83a 	srl	r3,r6,r5
 840a5e0:	3108983a 	sll	r4,r6,r4
 840a5e4:	108ffc34 	orhi	r2,r2,16368
 840a5e8:	18a6b03a 	or	r19,r3,r2
 840a5ec:	3924b03a 	or	r18,r7,r4
 840a5f0:	003fe606 	br	840a58c <__b2d+0x84>
 840a5f4:	293ffd44 	addi	r4,r5,-11
 840a5f8:	81bffe17 	ldw	r6,-8(r16)
 840a5fc:	80fffe04 	addi	r3,r16,-8
 840a600:	203ff11e 	bne	r4,zero,840a5c8 <__b2d+0xc0>
 840a604:	accffc34 	orhi	r19,r21,16368
 840a608:	3025883a 	mov	r18,r6
 840a60c:	003fdf06 	br	840a58c <__b2d+0x84>
 840a610:	18bfff17 	ldw	r2,-4(r3)
 840a614:	110cd83a 	srl	r6,r2,r4
 840a618:	003fd706 	br	840a578 <__b2d+0x70>
 840a61c:	18bfff17 	ldw	r2,-4(r3)
 840a620:	114ed83a 	srl	r7,r2,r5
 840a624:	003fec06 	br	840a5d8 <__b2d+0xd0>

0840a628 <__ratio>:
 840a628:	defff904 	addi	sp,sp,-28
 840a62c:	dc400215 	stw	r17,8(sp)
 840a630:	2823883a 	mov	r17,r5
 840a634:	d80b883a 	mov	r5,sp
 840a638:	dfc00615 	stw	ra,24(sp)
 840a63c:	dd000515 	stw	r20,20(sp)
 840a640:	dcc00415 	stw	r19,16(sp)
 840a644:	dc800315 	stw	r18,12(sp)
 840a648:	2025883a 	mov	r18,r4
 840a64c:	840a5080 	call	840a508 <__b2d>
 840a650:	8809883a 	mov	r4,r17
 840a654:	d9400104 	addi	r5,sp,4
 840a658:	1027883a 	mov	r19,r2
 840a65c:	1829883a 	mov	r20,r3
 840a660:	840a5080 	call	840a508 <__b2d>
 840a664:	89000417 	ldw	r4,16(r17)
 840a668:	91c00417 	ldw	r7,16(r18)
 840a66c:	d9800117 	ldw	r6,4(sp)
 840a670:	180b883a 	mov	r5,r3
 840a674:	390fc83a 	sub	r7,r7,r4
 840a678:	1009883a 	mov	r4,r2
 840a67c:	d8800017 	ldw	r2,0(sp)
 840a680:	380e917a 	slli	r7,r7,5
 840a684:	2011883a 	mov	r8,r4
 840a688:	1185c83a 	sub	r2,r2,r6
 840a68c:	11c5883a 	add	r2,r2,r7
 840a690:	1006953a 	slli	r3,r2,20
 840a694:	2813883a 	mov	r9,r5
 840a698:	00800d0e 	bge	zero,r2,840a6d0 <__ratio+0xa8>
 840a69c:	1d29883a 	add	r20,r3,r20
 840a6a0:	a00b883a 	mov	r5,r20
 840a6a4:	480f883a 	mov	r7,r9
 840a6a8:	9809883a 	mov	r4,r19
 840a6ac:	400d883a 	mov	r6,r8
 840a6b0:	8403bf40 	call	8403bf4 <__divdf3>
 840a6b4:	dfc00617 	ldw	ra,24(sp)
 840a6b8:	dd000517 	ldw	r20,20(sp)
 840a6bc:	dcc00417 	ldw	r19,16(sp)
 840a6c0:	dc800317 	ldw	r18,12(sp)
 840a6c4:	dc400217 	ldw	r17,8(sp)
 840a6c8:	dec00704 	addi	sp,sp,28
 840a6cc:	f800283a 	ret
 840a6d0:	28d3c83a 	sub	r9,r5,r3
 840a6d4:	003ff206 	br	840a6a0 <__ratio+0x78>

0840a6d8 <_mprec_log10>:
 840a6d8:	defffe04 	addi	sp,sp,-8
 840a6dc:	008005c4 	movi	r2,23
 840a6e0:	dc000015 	stw	r16,0(sp)
 840a6e4:	dfc00115 	stw	ra,4(sp)
 840a6e8:	2021883a 	mov	r16,r4
 840a6ec:	11000c16 	blt	r2,r4,840a720 <_mprec_log10+0x48>
 840a6f0:	200490fa 	slli	r2,r4,3
 840a6f4:	00c21074 	movhi	r3,2113
 840a6f8:	18c6d804 	addi	r3,r3,7008
 840a6fc:	10c5883a 	add	r2,r2,r3
 840a700:	12400117 	ldw	r9,4(r2)
 840a704:	12000017 	ldw	r8,0(r2)
 840a708:	4807883a 	mov	r3,r9
 840a70c:	4005883a 	mov	r2,r8
 840a710:	dfc00117 	ldw	ra,4(sp)
 840a714:	dc000017 	ldw	r16,0(sp)
 840a718:	dec00204 	addi	sp,sp,8
 840a71c:	f800283a 	ret
 840a720:	0011883a 	mov	r8,zero
 840a724:	024ffc34 	movhi	r9,16368
 840a728:	0005883a 	mov	r2,zero
 840a72c:	00d00934 	movhi	r3,16420
 840a730:	480b883a 	mov	r5,r9
 840a734:	4009883a 	mov	r4,r8
 840a738:	180f883a 	mov	r7,r3
 840a73c:	100d883a 	mov	r6,r2
 840a740:	84038300 	call	8403830 <__muldf3>
 840a744:	843fffc4 	addi	r16,r16,-1
 840a748:	1011883a 	mov	r8,r2
 840a74c:	1813883a 	mov	r9,r3
 840a750:	803ff51e 	bne	r16,zero,840a728 <_mprec_log10+0x50>
 840a754:	4005883a 	mov	r2,r8
 840a758:	4807883a 	mov	r3,r9
 840a75c:	dfc00117 	ldw	ra,4(sp)
 840a760:	dc000017 	ldw	r16,0(sp)
 840a764:	dec00204 	addi	sp,sp,8
 840a768:	f800283a 	ret

0840a76c <__copybits>:
 840a76c:	297fffc4 	addi	r5,r5,-1
 840a770:	30800417 	ldw	r2,16(r6)
 840a774:	280bd17a 	srai	r5,r5,5
 840a778:	31800504 	addi	r6,r6,20
 840a77c:	1085883a 	add	r2,r2,r2
 840a780:	294b883a 	add	r5,r5,r5
 840a784:	294b883a 	add	r5,r5,r5
 840a788:	1085883a 	add	r2,r2,r2
 840a78c:	290b883a 	add	r5,r5,r4
 840a790:	3087883a 	add	r3,r6,r2
 840a794:	29400104 	addi	r5,r5,4
 840a798:	30c0052e 	bgeu	r6,r3,840a7b0 <__copybits+0x44>
 840a79c:	30800017 	ldw	r2,0(r6)
 840a7a0:	31800104 	addi	r6,r6,4
 840a7a4:	20800015 	stw	r2,0(r4)
 840a7a8:	21000104 	addi	r4,r4,4
 840a7ac:	30fffb36 	bltu	r6,r3,840a79c <__copybits+0x30>
 840a7b0:	2140032e 	bgeu	r4,r5,840a7c0 <__copybits+0x54>
 840a7b4:	20000015 	stw	zero,0(r4)
 840a7b8:	21000104 	addi	r4,r4,4
 840a7bc:	217ffd36 	bltu	r4,r5,840a7b4 <__copybits+0x48>
 840a7c0:	f800283a 	ret

0840a7c4 <__any_on>:
 840a7c4:	20800417 	ldw	r2,16(r4)
 840a7c8:	2807d17a 	srai	r3,r5,5
 840a7cc:	21000504 	addi	r4,r4,20
 840a7d0:	10c00d0e 	bge	r2,r3,840a808 <__any_on+0x44>
 840a7d4:	1085883a 	add	r2,r2,r2
 840a7d8:	1085883a 	add	r2,r2,r2
 840a7dc:	208d883a 	add	r6,r4,r2
 840a7e0:	2180182e 	bgeu	r4,r6,840a844 <__any_on+0x80>
 840a7e4:	30bfff17 	ldw	r2,-4(r6)
 840a7e8:	30ffff04 	addi	r3,r6,-4
 840a7ec:	1000041e 	bne	r2,zero,840a800 <__any_on+0x3c>
 840a7f0:	20c0142e 	bgeu	r4,r3,840a844 <__any_on+0x80>
 840a7f4:	18ffff04 	addi	r3,r3,-4
 840a7f8:	18800017 	ldw	r2,0(r3)
 840a7fc:	103ffc26 	beq	r2,zero,840a7f0 <__any_on+0x2c>
 840a800:	00800044 	movi	r2,1
 840a804:	f800283a 	ret
 840a808:	18800a0e 	bge	r3,r2,840a834 <__any_on+0x70>
 840a80c:	294007cc 	andi	r5,r5,31
 840a810:	28000826 	beq	r5,zero,840a834 <__any_on+0x70>
 840a814:	18c5883a 	add	r2,r3,r3
 840a818:	1085883a 	add	r2,r2,r2
 840a81c:	208d883a 	add	r6,r4,r2
 840a820:	30c00017 	ldw	r3,0(r6)
 840a824:	1944d83a 	srl	r2,r3,r5
 840a828:	1144983a 	sll	r2,r2,r5
 840a82c:	18bff41e 	bne	r3,r2,840a800 <__any_on+0x3c>
 840a830:	003feb06 	br	840a7e0 <__any_on+0x1c>
 840a834:	18c5883a 	add	r2,r3,r3
 840a838:	1085883a 	add	r2,r2,r2
 840a83c:	208d883a 	add	r6,r4,r2
 840a840:	003fe706 	br	840a7e0 <__any_on+0x1c>
 840a844:	0005883a 	mov	r2,zero
 840a848:	f800283a 	ret

0840a84c <_Balloc>:
 840a84c:	20c01317 	ldw	r3,76(r4)
 840a850:	defffb04 	addi	sp,sp,-20
 840a854:	dcc00315 	stw	r19,12(sp)
 840a858:	dc800215 	stw	r18,8(sp)
 840a85c:	dfc00415 	stw	ra,16(sp)
 840a860:	2825883a 	mov	r18,r5
 840a864:	dc400115 	stw	r17,4(sp)
 840a868:	dc000015 	stw	r16,0(sp)
 840a86c:	2027883a 	mov	r19,r4
 840a870:	01800404 	movi	r6,16
 840a874:	01400104 	movi	r5,4
 840a878:	18001726 	beq	r3,zero,840a8d8 <_Balloc+0x8c>
 840a87c:	01400044 	movi	r5,1
 840a880:	9485883a 	add	r2,r18,r18
 840a884:	2ca2983a 	sll	r17,r5,r18
 840a888:	1085883a 	add	r2,r2,r2
 840a88c:	10c7883a 	add	r3,r2,r3
 840a890:	1c000017 	ldw	r16,0(r3)
 840a894:	8c4d883a 	add	r6,r17,r17
 840a898:	318d883a 	add	r6,r6,r6
 840a89c:	9809883a 	mov	r4,r19
 840a8a0:	31800504 	addi	r6,r6,20
 840a8a4:	80001226 	beq	r16,zero,840a8f0 <_Balloc+0xa4>
 840a8a8:	80800017 	ldw	r2,0(r16)
 840a8ac:	18800015 	stw	r2,0(r3)
 840a8b0:	80000415 	stw	zero,16(r16)
 840a8b4:	80000315 	stw	zero,12(r16)
 840a8b8:	8005883a 	mov	r2,r16
 840a8bc:	dfc00417 	ldw	ra,16(sp)
 840a8c0:	dcc00317 	ldw	r19,12(sp)
 840a8c4:	dc800217 	ldw	r18,8(sp)
 840a8c8:	dc400117 	ldw	r17,4(sp)
 840a8cc:	dc000017 	ldw	r16,0(sp)
 840a8d0:	dec00504 	addi	sp,sp,20
 840a8d4:	f800283a 	ret
 840a8d8:	840bbe40 	call	840bbe4 <_calloc_r>
 840a8dc:	1007883a 	mov	r3,r2
 840a8e0:	0021883a 	mov	r16,zero
 840a8e4:	98801315 	stw	r2,76(r19)
 840a8e8:	103fe41e 	bne	r2,zero,840a87c <_Balloc+0x30>
 840a8ec:	003ff206 	br	840a8b8 <_Balloc+0x6c>
 840a8f0:	840bbe40 	call	840bbe4 <_calloc_r>
 840a8f4:	103ff026 	beq	r2,zero,840a8b8 <_Balloc+0x6c>
 840a8f8:	1021883a 	mov	r16,r2
 840a8fc:	14800115 	stw	r18,4(r2)
 840a900:	14400215 	stw	r17,8(r2)
 840a904:	003fea06 	br	840a8b0 <_Balloc+0x64>

0840a908 <__d2b>:
 840a908:	defff504 	addi	sp,sp,-44
 840a90c:	dcc00515 	stw	r19,20(sp)
 840a910:	04c00044 	movi	r19,1
 840a914:	dc000215 	stw	r16,8(sp)
 840a918:	2821883a 	mov	r16,r5
 840a91c:	980b883a 	mov	r5,r19
 840a920:	ddc00915 	stw	r23,36(sp)
 840a924:	dd800815 	stw	r22,32(sp)
 840a928:	dd400715 	stw	r21,28(sp)
 840a92c:	dd000615 	stw	r20,24(sp)
 840a930:	dc800415 	stw	r18,16(sp)
 840a934:	dc400315 	stw	r17,12(sp)
 840a938:	dfc00a15 	stw	ra,40(sp)
 840a93c:	3023883a 	mov	r17,r6
 840a940:	382d883a 	mov	r22,r7
 840a944:	ddc00b17 	ldw	r23,44(sp)
 840a948:	840a84c0 	call	840a84c <_Balloc>
 840a94c:	1025883a 	mov	r18,r2
 840a950:	00a00034 	movhi	r2,32768
 840a954:	10bfffc4 	addi	r2,r2,-1
 840a958:	8888703a 	and	r4,r17,r2
 840a95c:	202ad53a 	srli	r21,r4,20
 840a960:	00800434 	movhi	r2,16
 840a964:	10bfffc4 	addi	r2,r2,-1
 840a968:	8886703a 	and	r3,r17,r2
 840a96c:	a829003a 	cmpeq	r20,r21,zero
 840a970:	800b883a 	mov	r5,r16
 840a974:	d8c00115 	stw	r3,4(sp)
 840a978:	94000504 	addi	r16,r18,20
 840a97c:	a000021e 	bne	r20,zero,840a988 <__d2b+0x80>
 840a980:	18c00434 	orhi	r3,r3,16
 840a984:	d8c00115 	stw	r3,4(sp)
 840a988:	28002726 	beq	r5,zero,840aa28 <__d2b+0x120>
 840a98c:	d809883a 	mov	r4,sp
 840a990:	d9400015 	stw	r5,0(sp)
 840a994:	840a3640 	call	840a364 <__lo0bits>
 840a998:	100d883a 	mov	r6,r2
 840a99c:	10003526 	beq	r2,zero,840aa74 <__d2b+0x16c>
 840a9a0:	d8c00117 	ldw	r3,4(sp)
 840a9a4:	00800804 	movi	r2,32
 840a9a8:	1185c83a 	sub	r2,r2,r6
 840a9ac:	d9000017 	ldw	r4,0(sp)
 840a9b0:	1886983a 	sll	r3,r3,r2
 840a9b4:	1906b03a 	or	r3,r3,r4
 840a9b8:	90c00515 	stw	r3,20(r18)
 840a9bc:	d8c00117 	ldw	r3,4(sp)
 840a9c0:	1986d83a 	srl	r3,r3,r6
 840a9c4:	d8c00115 	stw	r3,4(sp)
 840a9c8:	180b003a 	cmpeq	r5,r3,zero
 840a9cc:	00800084 	movi	r2,2
 840a9d0:	114bc83a 	sub	r5,r2,r5
 840a9d4:	80c00115 	stw	r3,4(r16)
 840a9d8:	91400415 	stw	r5,16(r18)
 840a9dc:	a0001a1e 	bne	r20,zero,840aa48 <__d2b+0x140>
 840a9e0:	3545883a 	add	r2,r6,r21
 840a9e4:	10bef344 	addi	r2,r2,-1075
 840a9e8:	00c00d44 	movi	r3,53
 840a9ec:	b0800015 	stw	r2,0(r22)
 840a9f0:	1987c83a 	sub	r3,r3,r6
 840a9f4:	b8c00015 	stw	r3,0(r23)
 840a9f8:	9005883a 	mov	r2,r18
 840a9fc:	dfc00a17 	ldw	ra,40(sp)
 840aa00:	ddc00917 	ldw	r23,36(sp)
 840aa04:	dd800817 	ldw	r22,32(sp)
 840aa08:	dd400717 	ldw	r21,28(sp)
 840aa0c:	dd000617 	ldw	r20,24(sp)
 840aa10:	dcc00517 	ldw	r19,20(sp)
 840aa14:	dc800417 	ldw	r18,16(sp)
 840aa18:	dc400317 	ldw	r17,12(sp)
 840aa1c:	dc000217 	ldw	r16,8(sp)
 840aa20:	dec00b04 	addi	sp,sp,44
 840aa24:	f800283a 	ret
 840aa28:	d9000104 	addi	r4,sp,4
 840aa2c:	840a3640 	call	840a364 <__lo0bits>
 840aa30:	11800804 	addi	r6,r2,32
 840aa34:	d8800117 	ldw	r2,4(sp)
 840aa38:	94c00415 	stw	r19,16(r18)
 840aa3c:	980b883a 	mov	r5,r19
 840aa40:	90800515 	stw	r2,20(r18)
 840aa44:	a03fe626 	beq	r20,zero,840a9e0 <__d2b+0xd8>
 840aa48:	2945883a 	add	r2,r5,r5
 840aa4c:	1085883a 	add	r2,r2,r2
 840aa50:	1405883a 	add	r2,r2,r16
 840aa54:	113fff17 	ldw	r4,-4(r2)
 840aa58:	30fef384 	addi	r3,r6,-1074
 840aa5c:	2820917a 	slli	r16,r5,5
 840aa60:	b0c00015 	stw	r3,0(r22)
 840aa64:	840a2f40 	call	840a2f4 <__hi0bits>
 840aa68:	80a1c83a 	sub	r16,r16,r2
 840aa6c:	bc000015 	stw	r16,0(r23)
 840aa70:	003fe106 	br	840a9f8 <__d2b+0xf0>
 840aa74:	d8800017 	ldw	r2,0(sp)
 840aa78:	90800515 	stw	r2,20(r18)
 840aa7c:	d8c00117 	ldw	r3,4(sp)
 840aa80:	003fd106 	br	840a9c8 <__d2b+0xc0>

0840aa84 <__mdiff>:
 840aa84:	defffb04 	addi	sp,sp,-20
 840aa88:	dc000015 	stw	r16,0(sp)
 840aa8c:	2821883a 	mov	r16,r5
 840aa90:	dc800215 	stw	r18,8(sp)
 840aa94:	300b883a 	mov	r5,r6
 840aa98:	2025883a 	mov	r18,r4
 840aa9c:	8009883a 	mov	r4,r16
 840aaa0:	dc400115 	stw	r17,4(sp)
 840aaa4:	dfc00415 	stw	ra,16(sp)
 840aaa8:	dcc00315 	stw	r19,12(sp)
 840aaac:	3023883a 	mov	r17,r6
 840aab0:	840a4280 	call	840a428 <__mcmp>
 840aab4:	10004226 	beq	r2,zero,840abc0 <__mdiff+0x13c>
 840aab8:	10005016 	blt	r2,zero,840abfc <__mdiff+0x178>
 840aabc:	0027883a 	mov	r19,zero
 840aac0:	81400117 	ldw	r5,4(r16)
 840aac4:	9009883a 	mov	r4,r18
 840aac8:	840a84c0 	call	840a84c <_Balloc>
 840aacc:	1019883a 	mov	r12,r2
 840aad0:	82800417 	ldw	r10,16(r16)
 840aad4:	88800417 	ldw	r2,16(r17)
 840aad8:	81800504 	addi	r6,r16,20
 840aadc:	5287883a 	add	r3,r10,r10
 840aae0:	1085883a 	add	r2,r2,r2
 840aae4:	18c7883a 	add	r3,r3,r3
 840aae8:	1085883a 	add	r2,r2,r2
 840aaec:	8a000504 	addi	r8,r17,20
 840aaf0:	64c00315 	stw	r19,12(r12)
 840aaf4:	30db883a 	add	r13,r6,r3
 840aaf8:	4097883a 	add	r11,r8,r2
 840aafc:	61c00504 	addi	r7,r12,20
 840ab00:	0013883a 	mov	r9,zero
 840ab04:	31000017 	ldw	r4,0(r6)
 840ab08:	41400017 	ldw	r5,0(r8)
 840ab0c:	42000104 	addi	r8,r8,4
 840ab10:	20bfffcc 	andi	r2,r4,65535
 840ab14:	28ffffcc 	andi	r3,r5,65535
 840ab18:	10c5c83a 	sub	r2,r2,r3
 840ab1c:	1245883a 	add	r2,r2,r9
 840ab20:	2008d43a 	srli	r4,r4,16
 840ab24:	280ad43a 	srli	r5,r5,16
 840ab28:	1007d43a 	srai	r3,r2,16
 840ab2c:	3880000d 	sth	r2,0(r7)
 840ab30:	2149c83a 	sub	r4,r4,r5
 840ab34:	20c9883a 	add	r4,r4,r3
 840ab38:	3900008d 	sth	r4,2(r7)
 840ab3c:	31800104 	addi	r6,r6,4
 840ab40:	39c00104 	addi	r7,r7,4
 840ab44:	2013d43a 	srai	r9,r4,16
 840ab48:	42ffee36 	bltu	r8,r11,840ab04 <__mdiff+0x80>
 840ab4c:	33400c2e 	bgeu	r6,r13,840ab80 <__mdiff+0xfc>
 840ab50:	30800017 	ldw	r2,0(r6)
 840ab54:	31800104 	addi	r6,r6,4
 840ab58:	10ffffcc 	andi	r3,r2,65535
 840ab5c:	1a47883a 	add	r3,r3,r9
 840ab60:	1004d43a 	srli	r2,r2,16
 840ab64:	1809d43a 	srai	r4,r3,16
 840ab68:	38c0000d 	sth	r3,0(r7)
 840ab6c:	1105883a 	add	r2,r2,r4
 840ab70:	3880008d 	sth	r2,2(r7)
 840ab74:	1013d43a 	srai	r9,r2,16
 840ab78:	39c00104 	addi	r7,r7,4
 840ab7c:	337ff436 	bltu	r6,r13,840ab50 <__mdiff+0xcc>
 840ab80:	38bfff17 	ldw	r2,-4(r7)
 840ab84:	38ffff04 	addi	r3,r7,-4
 840ab88:	1000041e 	bne	r2,zero,840ab9c <__mdiff+0x118>
 840ab8c:	18ffff04 	addi	r3,r3,-4
 840ab90:	18800017 	ldw	r2,0(r3)
 840ab94:	52bfffc4 	addi	r10,r10,-1
 840ab98:	103ffc26 	beq	r2,zero,840ab8c <__mdiff+0x108>
 840ab9c:	6005883a 	mov	r2,r12
 840aba0:	62800415 	stw	r10,16(r12)
 840aba4:	dfc00417 	ldw	ra,16(sp)
 840aba8:	dcc00317 	ldw	r19,12(sp)
 840abac:	dc800217 	ldw	r18,8(sp)
 840abb0:	dc400117 	ldw	r17,4(sp)
 840abb4:	dc000017 	ldw	r16,0(sp)
 840abb8:	dec00504 	addi	sp,sp,20
 840abbc:	f800283a 	ret
 840abc0:	9009883a 	mov	r4,r18
 840abc4:	000b883a 	mov	r5,zero
 840abc8:	840a84c0 	call	840a84c <_Balloc>
 840abcc:	1019883a 	mov	r12,r2
 840abd0:	00800044 	movi	r2,1
 840abd4:	60800415 	stw	r2,16(r12)
 840abd8:	6005883a 	mov	r2,r12
 840abdc:	60000515 	stw	zero,20(r12)
 840abe0:	dfc00417 	ldw	ra,16(sp)
 840abe4:	dcc00317 	ldw	r19,12(sp)
 840abe8:	dc800217 	ldw	r18,8(sp)
 840abec:	dc400117 	ldw	r17,4(sp)
 840abf0:	dc000017 	ldw	r16,0(sp)
 840abf4:	dec00504 	addi	sp,sp,20
 840abf8:	f800283a 	ret
 840abfc:	880d883a 	mov	r6,r17
 840ac00:	04c00044 	movi	r19,1
 840ac04:	8023883a 	mov	r17,r16
 840ac08:	3021883a 	mov	r16,r6
 840ac0c:	003fac06 	br	840aac0 <__mdiff+0x3c>

0840ac10 <__lshift>:
 840ac10:	defff904 	addi	sp,sp,-28
 840ac14:	28800417 	ldw	r2,16(r5)
 840ac18:	dc000015 	stw	r16,0(sp)
 840ac1c:	3021d17a 	srai	r16,r6,5
 840ac20:	28c00217 	ldw	r3,8(r5)
 840ac24:	10800044 	addi	r2,r2,1
 840ac28:	dc400115 	stw	r17,4(sp)
 840ac2c:	80a3883a 	add	r17,r16,r2
 840ac30:	dd400515 	stw	r21,20(sp)
 840ac34:	dd000415 	stw	r20,16(sp)
 840ac38:	dc800215 	stw	r18,8(sp)
 840ac3c:	dfc00615 	stw	ra,24(sp)
 840ac40:	2825883a 	mov	r18,r5
 840ac44:	dcc00315 	stw	r19,12(sp)
 840ac48:	3029883a 	mov	r20,r6
 840ac4c:	202b883a 	mov	r21,r4
 840ac50:	29400117 	ldw	r5,4(r5)
 840ac54:	1c40030e 	bge	r3,r17,840ac64 <__lshift+0x54>
 840ac58:	18c7883a 	add	r3,r3,r3
 840ac5c:	29400044 	addi	r5,r5,1
 840ac60:	1c7ffd16 	blt	r3,r17,840ac58 <__lshift+0x48>
 840ac64:	a809883a 	mov	r4,r21
 840ac68:	840a84c0 	call	840a84c <_Balloc>
 840ac6c:	1027883a 	mov	r19,r2
 840ac70:	11400504 	addi	r5,r2,20
 840ac74:	0400090e 	bge	zero,r16,840ac9c <__lshift+0x8c>
 840ac78:	2805883a 	mov	r2,r5
 840ac7c:	0007883a 	mov	r3,zero
 840ac80:	18c00044 	addi	r3,r3,1
 840ac84:	10000015 	stw	zero,0(r2)
 840ac88:	10800104 	addi	r2,r2,4
 840ac8c:	80fffc1e 	bne	r16,r3,840ac80 <__lshift+0x70>
 840ac90:	8405883a 	add	r2,r16,r16
 840ac94:	1085883a 	add	r2,r2,r2
 840ac98:	288b883a 	add	r5,r5,r2
 840ac9c:	90800417 	ldw	r2,16(r18)
 840aca0:	91000504 	addi	r4,r18,20
 840aca4:	a18007cc 	andi	r6,r20,31
 840aca8:	1085883a 	add	r2,r2,r2
 840acac:	1085883a 	add	r2,r2,r2
 840acb0:	208f883a 	add	r7,r4,r2
 840acb4:	30001e26 	beq	r6,zero,840ad30 <__lshift+0x120>
 840acb8:	00800804 	movi	r2,32
 840acbc:	1191c83a 	sub	r8,r2,r6
 840acc0:	0007883a 	mov	r3,zero
 840acc4:	20800017 	ldw	r2,0(r4)
 840acc8:	1184983a 	sll	r2,r2,r6
 840accc:	1884b03a 	or	r2,r3,r2
 840acd0:	28800015 	stw	r2,0(r5)
 840acd4:	20c00017 	ldw	r3,0(r4)
 840acd8:	21000104 	addi	r4,r4,4
 840acdc:	29400104 	addi	r5,r5,4
 840ace0:	1a06d83a 	srl	r3,r3,r8
 840ace4:	21fff736 	bltu	r4,r7,840acc4 <__lshift+0xb4>
 840ace8:	28c00015 	stw	r3,0(r5)
 840acec:	18000126 	beq	r3,zero,840acf4 <__lshift+0xe4>
 840acf0:	8c400044 	addi	r17,r17,1
 840acf4:	88bfffc4 	addi	r2,r17,-1
 840acf8:	98800415 	stw	r2,16(r19)
 840acfc:	a809883a 	mov	r4,r21
 840ad00:	900b883a 	mov	r5,r18
 840ad04:	840a2cc0 	call	840a2cc <_Bfree>
 840ad08:	9805883a 	mov	r2,r19
 840ad0c:	dfc00617 	ldw	ra,24(sp)
 840ad10:	dd400517 	ldw	r21,20(sp)
 840ad14:	dd000417 	ldw	r20,16(sp)
 840ad18:	dcc00317 	ldw	r19,12(sp)
 840ad1c:	dc800217 	ldw	r18,8(sp)
 840ad20:	dc400117 	ldw	r17,4(sp)
 840ad24:	dc000017 	ldw	r16,0(sp)
 840ad28:	dec00704 	addi	sp,sp,28
 840ad2c:	f800283a 	ret
 840ad30:	20800017 	ldw	r2,0(r4)
 840ad34:	21000104 	addi	r4,r4,4
 840ad38:	28800015 	stw	r2,0(r5)
 840ad3c:	29400104 	addi	r5,r5,4
 840ad40:	21ffec2e 	bgeu	r4,r7,840acf4 <__lshift+0xe4>
 840ad44:	20800017 	ldw	r2,0(r4)
 840ad48:	21000104 	addi	r4,r4,4
 840ad4c:	28800015 	stw	r2,0(r5)
 840ad50:	29400104 	addi	r5,r5,4
 840ad54:	21fff636 	bltu	r4,r7,840ad30 <__lshift+0x120>
 840ad58:	003fe606 	br	840acf4 <__lshift+0xe4>

0840ad5c <__multiply>:
 840ad5c:	defff904 	addi	sp,sp,-28
 840ad60:	dcc00315 	stw	r19,12(sp)
 840ad64:	dc800215 	stw	r18,8(sp)
 840ad68:	2cc00417 	ldw	r19,16(r5)
 840ad6c:	34800417 	ldw	r18,16(r6)
 840ad70:	dd000415 	stw	r20,16(sp)
 840ad74:	dc400115 	stw	r17,4(sp)
 840ad78:	dfc00615 	stw	ra,24(sp)
 840ad7c:	dd400515 	stw	r21,20(sp)
 840ad80:	dc000015 	stw	r16,0(sp)
 840ad84:	2823883a 	mov	r17,r5
 840ad88:	3029883a 	mov	r20,r6
 840ad8c:	9c80040e 	bge	r19,r18,840ada0 <__multiply+0x44>
 840ad90:	9027883a 	mov	r19,r18
 840ad94:	2c800417 	ldw	r18,16(r5)
 840ad98:	2829883a 	mov	r20,r5
 840ad9c:	3023883a 	mov	r17,r6
 840ada0:	88800217 	ldw	r2,8(r17)
 840ada4:	9ca1883a 	add	r16,r19,r18
 840ada8:	89400117 	ldw	r5,4(r17)
 840adac:	1400010e 	bge	r2,r16,840adb4 <__multiply+0x58>
 840adb0:	29400044 	addi	r5,r5,1
 840adb4:	840a84c0 	call	840a84c <_Balloc>
 840adb8:	102b883a 	mov	r21,r2
 840adbc:	8405883a 	add	r2,r16,r16
 840adc0:	1085883a 	add	r2,r2,r2
 840adc4:	a9000504 	addi	r4,r21,20
 840adc8:	209d883a 	add	r14,r4,r2
 840adcc:	2380042e 	bgeu	r4,r14,840ade0 <__multiply+0x84>
 840add0:	2005883a 	mov	r2,r4
 840add4:	10000015 	stw	zero,0(r2)
 840add8:	10800104 	addi	r2,r2,4
 840addc:	13bffd36 	bltu	r2,r14,840add4 <__multiply+0x78>
 840ade0:	9485883a 	add	r2,r18,r18
 840ade4:	9cc7883a 	add	r3,r19,r19
 840ade8:	a1800504 	addi	r6,r20,20
 840adec:	1085883a 	add	r2,r2,r2
 840adf0:	8b400504 	addi	r13,r17,20
 840adf4:	18c7883a 	add	r3,r3,r3
 840adf8:	309f883a 	add	r15,r6,r2
 840adfc:	68d7883a 	add	r11,r13,r3
 840ae00:	33c03b2e 	bgeu	r6,r15,840aef0 <__multiply+0x194>
 840ae04:	2019883a 	mov	r12,r4
 840ae08:	30800017 	ldw	r2,0(r6)
 840ae0c:	127fffcc 	andi	r9,r2,65535
 840ae10:	48001826 	beq	r9,zero,840ae74 <__multiply+0x118>
 840ae14:	6811883a 	mov	r8,r13
 840ae18:	600f883a 	mov	r7,r12
 840ae1c:	0015883a 	mov	r10,zero
 840ae20:	40c00017 	ldw	r3,0(r8)
 840ae24:	39400017 	ldw	r5,0(r7)
 840ae28:	42000104 	addi	r8,r8,4
 840ae2c:	193fffcc 	andi	r4,r3,65535
 840ae30:	4909383a 	mul	r4,r9,r4
 840ae34:	1806d43a 	srli	r3,r3,16
 840ae38:	28bfffcc 	andi	r2,r5,65535
 840ae3c:	5085883a 	add	r2,r10,r2
 840ae40:	2089883a 	add	r4,r4,r2
 840ae44:	48c7383a 	mul	r3,r9,r3
 840ae48:	280ad43a 	srli	r5,r5,16
 840ae4c:	2004d43a 	srli	r2,r4,16
 840ae50:	3900000d 	sth	r4,0(r7)
 840ae54:	1947883a 	add	r3,r3,r5
 840ae58:	10c5883a 	add	r2,r2,r3
 840ae5c:	3880008d 	sth	r2,2(r7)
 840ae60:	1014d43a 	srli	r10,r2,16
 840ae64:	39c00104 	addi	r7,r7,4
 840ae68:	42ffed36 	bltu	r8,r11,840ae20 <__multiply+0xc4>
 840ae6c:	3a800015 	stw	r10,0(r7)
 840ae70:	30800017 	ldw	r2,0(r6)
 840ae74:	1012d43a 	srli	r9,r2,16
 840ae78:	48001926 	beq	r9,zero,840aee0 <__multiply+0x184>
 840ae7c:	60800017 	ldw	r2,0(r12)
 840ae80:	6811883a 	mov	r8,r13
 840ae84:	600f883a 	mov	r7,r12
 840ae88:	0015883a 	mov	r10,zero
 840ae8c:	100b883a 	mov	r5,r2
 840ae90:	41000017 	ldw	r4,0(r8)
 840ae94:	2806d43a 	srli	r3,r5,16
 840ae98:	3880000d 	sth	r2,0(r7)
 840ae9c:	20bfffcc 	andi	r2,r4,65535
 840aea0:	4885383a 	mul	r2,r9,r2
 840aea4:	50c7883a 	add	r3,r10,r3
 840aea8:	2008d43a 	srli	r4,r4,16
 840aeac:	10c5883a 	add	r2,r2,r3
 840aeb0:	3880008d 	sth	r2,2(r7)
 840aeb4:	39c00104 	addi	r7,r7,4
 840aeb8:	39400017 	ldw	r5,0(r7)
 840aebc:	4909383a 	mul	r4,r9,r4
 840aec0:	1004d43a 	srli	r2,r2,16
 840aec4:	28ffffcc 	andi	r3,r5,65535
 840aec8:	20c9883a 	add	r4,r4,r3
 840aecc:	1105883a 	add	r2,r2,r4
 840aed0:	42000104 	addi	r8,r8,4
 840aed4:	1014d43a 	srli	r10,r2,16
 840aed8:	42ffed36 	bltu	r8,r11,840ae90 <__multiply+0x134>
 840aedc:	38800015 	stw	r2,0(r7)
 840aee0:	31800104 	addi	r6,r6,4
 840aee4:	33c0022e 	bgeu	r6,r15,840aef0 <__multiply+0x194>
 840aee8:	63000104 	addi	r12,r12,4
 840aeec:	003fc606 	br	840ae08 <__multiply+0xac>
 840aef0:	0400090e 	bge	zero,r16,840af18 <__multiply+0x1bc>
 840aef4:	70bfff17 	ldw	r2,-4(r14)
 840aef8:	70ffff04 	addi	r3,r14,-4
 840aefc:	10000326 	beq	r2,zero,840af0c <__multiply+0x1b0>
 840af00:	00000506 	br	840af18 <__multiply+0x1bc>
 840af04:	18800017 	ldw	r2,0(r3)
 840af08:	1000031e 	bne	r2,zero,840af18 <__multiply+0x1bc>
 840af0c:	843fffc4 	addi	r16,r16,-1
 840af10:	18ffff04 	addi	r3,r3,-4
 840af14:	803ffb1e 	bne	r16,zero,840af04 <__multiply+0x1a8>
 840af18:	a805883a 	mov	r2,r21
 840af1c:	ac000415 	stw	r16,16(r21)
 840af20:	dfc00617 	ldw	ra,24(sp)
 840af24:	dd400517 	ldw	r21,20(sp)
 840af28:	dd000417 	ldw	r20,16(sp)
 840af2c:	dcc00317 	ldw	r19,12(sp)
 840af30:	dc800217 	ldw	r18,8(sp)
 840af34:	dc400117 	ldw	r17,4(sp)
 840af38:	dc000017 	ldw	r16,0(sp)
 840af3c:	dec00704 	addi	sp,sp,28
 840af40:	f800283a 	ret

0840af44 <__i2b>:
 840af44:	defffd04 	addi	sp,sp,-12
 840af48:	dc000015 	stw	r16,0(sp)
 840af4c:	04000044 	movi	r16,1
 840af50:	dc800115 	stw	r18,4(sp)
 840af54:	2825883a 	mov	r18,r5
 840af58:	800b883a 	mov	r5,r16
 840af5c:	dfc00215 	stw	ra,8(sp)
 840af60:	840a84c0 	call	840a84c <_Balloc>
 840af64:	14000415 	stw	r16,16(r2)
 840af68:	14800515 	stw	r18,20(r2)
 840af6c:	dfc00217 	ldw	ra,8(sp)
 840af70:	dc800117 	ldw	r18,4(sp)
 840af74:	dc000017 	ldw	r16,0(sp)
 840af78:	dec00304 	addi	sp,sp,12
 840af7c:	f800283a 	ret

0840af80 <__multadd>:
 840af80:	defffa04 	addi	sp,sp,-24
 840af84:	dc800215 	stw	r18,8(sp)
 840af88:	2c800417 	ldw	r18,16(r5)
 840af8c:	dd000415 	stw	r20,16(sp)
 840af90:	dcc00315 	stw	r19,12(sp)
 840af94:	dc000015 	stw	r16,0(sp)
 840af98:	dfc00515 	stw	ra,20(sp)
 840af9c:	3821883a 	mov	r16,r7
 840afa0:	dc400115 	stw	r17,4(sp)
 840afa4:	2827883a 	mov	r19,r5
 840afa8:	2029883a 	mov	r20,r4
 840afac:	2a000504 	addi	r8,r5,20
 840afb0:	000f883a 	mov	r7,zero
 840afb4:	40800017 	ldw	r2,0(r8)
 840afb8:	39c00044 	addi	r7,r7,1
 840afbc:	10ffffcc 	andi	r3,r2,65535
 840afc0:	1987383a 	mul	r3,r3,r6
 840afc4:	1004d43a 	srli	r2,r2,16
 840afc8:	1c07883a 	add	r3,r3,r16
 840afcc:	180ad43a 	srli	r5,r3,16
 840afd0:	1185383a 	mul	r2,r2,r6
 840afd4:	18ffffcc 	andi	r3,r3,65535
 840afd8:	1145883a 	add	r2,r2,r5
 840afdc:	1008943a 	slli	r4,r2,16
 840afe0:	1020d43a 	srli	r16,r2,16
 840afe4:	20c9883a 	add	r4,r4,r3
 840afe8:	41000015 	stw	r4,0(r8)
 840afec:	42000104 	addi	r8,r8,4
 840aff0:	3cbff016 	blt	r7,r18,840afb4 <__multadd+0x34>
 840aff4:	80000826 	beq	r16,zero,840b018 <__multadd+0x98>
 840aff8:	98800217 	ldw	r2,8(r19)
 840affc:	90800f0e 	bge	r18,r2,840b03c <__multadd+0xbc>
 840b000:	9485883a 	add	r2,r18,r18
 840b004:	1085883a 	add	r2,r2,r2
 840b008:	14c5883a 	add	r2,r2,r19
 840b00c:	90c00044 	addi	r3,r18,1
 840b010:	14000515 	stw	r16,20(r2)
 840b014:	98c00415 	stw	r3,16(r19)
 840b018:	9805883a 	mov	r2,r19
 840b01c:	dfc00517 	ldw	ra,20(sp)
 840b020:	dd000417 	ldw	r20,16(sp)
 840b024:	dcc00317 	ldw	r19,12(sp)
 840b028:	dc800217 	ldw	r18,8(sp)
 840b02c:	dc400117 	ldw	r17,4(sp)
 840b030:	dc000017 	ldw	r16,0(sp)
 840b034:	dec00604 	addi	sp,sp,24
 840b038:	f800283a 	ret
 840b03c:	99400117 	ldw	r5,4(r19)
 840b040:	a009883a 	mov	r4,r20
 840b044:	29400044 	addi	r5,r5,1
 840b048:	840a84c0 	call	840a84c <_Balloc>
 840b04c:	99800417 	ldw	r6,16(r19)
 840b050:	99400304 	addi	r5,r19,12
 840b054:	11000304 	addi	r4,r2,12
 840b058:	318d883a 	add	r6,r6,r6
 840b05c:	318d883a 	add	r6,r6,r6
 840b060:	31800204 	addi	r6,r6,8
 840b064:	1023883a 	mov	r17,r2
 840b068:	840a0b40 	call	840a0b4 <memcpy>
 840b06c:	980b883a 	mov	r5,r19
 840b070:	a009883a 	mov	r4,r20
 840b074:	840a2cc0 	call	840a2cc <_Bfree>
 840b078:	8827883a 	mov	r19,r17
 840b07c:	003fe006 	br	840b000 <__multadd+0x80>

0840b080 <__pow5mult>:
 840b080:	defffa04 	addi	sp,sp,-24
 840b084:	308000cc 	andi	r2,r6,3
 840b088:	dd000415 	stw	r20,16(sp)
 840b08c:	dcc00315 	stw	r19,12(sp)
 840b090:	dc000015 	stw	r16,0(sp)
 840b094:	dfc00515 	stw	ra,20(sp)
 840b098:	dc800215 	stw	r18,8(sp)
 840b09c:	dc400115 	stw	r17,4(sp)
 840b0a0:	3021883a 	mov	r16,r6
 840b0a4:	2027883a 	mov	r19,r4
 840b0a8:	2829883a 	mov	r20,r5
 840b0ac:	10002b1e 	bne	r2,zero,840b15c <__pow5mult+0xdc>
 840b0b0:	8025d0ba 	srai	r18,r16,2
 840b0b4:	90001b26 	beq	r18,zero,840b124 <__pow5mult+0xa4>
 840b0b8:	9c001217 	ldw	r16,72(r19)
 840b0bc:	8000081e 	bne	r16,zero,840b0e0 <__pow5mult+0x60>
 840b0c0:	00003006 	br	840b184 <__pow5mult+0x104>
 840b0c4:	800b883a 	mov	r5,r16
 840b0c8:	800d883a 	mov	r6,r16
 840b0cc:	9809883a 	mov	r4,r19
 840b0d0:	90001426 	beq	r18,zero,840b124 <__pow5mult+0xa4>
 840b0d4:	80800017 	ldw	r2,0(r16)
 840b0d8:	10001b26 	beq	r2,zero,840b148 <__pow5mult+0xc8>
 840b0dc:	1021883a 	mov	r16,r2
 840b0e0:	9080004c 	andi	r2,r18,1
 840b0e4:	1005003a 	cmpeq	r2,r2,zero
 840b0e8:	9025d07a 	srai	r18,r18,1
 840b0ec:	800d883a 	mov	r6,r16
 840b0f0:	9809883a 	mov	r4,r19
 840b0f4:	a00b883a 	mov	r5,r20
 840b0f8:	103ff21e 	bne	r2,zero,840b0c4 <__pow5mult+0x44>
 840b0fc:	840ad5c0 	call	840ad5c <__multiply>
 840b100:	a00b883a 	mov	r5,r20
 840b104:	9809883a 	mov	r4,r19
 840b108:	1023883a 	mov	r17,r2
 840b10c:	840a2cc0 	call	840a2cc <_Bfree>
 840b110:	8829883a 	mov	r20,r17
 840b114:	800b883a 	mov	r5,r16
 840b118:	800d883a 	mov	r6,r16
 840b11c:	9809883a 	mov	r4,r19
 840b120:	903fec1e 	bne	r18,zero,840b0d4 <__pow5mult+0x54>
 840b124:	a005883a 	mov	r2,r20
 840b128:	dfc00517 	ldw	ra,20(sp)
 840b12c:	dd000417 	ldw	r20,16(sp)
 840b130:	dcc00317 	ldw	r19,12(sp)
 840b134:	dc800217 	ldw	r18,8(sp)
 840b138:	dc400117 	ldw	r17,4(sp)
 840b13c:	dc000017 	ldw	r16,0(sp)
 840b140:	dec00604 	addi	sp,sp,24
 840b144:	f800283a 	ret
 840b148:	840ad5c0 	call	840ad5c <__multiply>
 840b14c:	80800015 	stw	r2,0(r16)
 840b150:	1021883a 	mov	r16,r2
 840b154:	10000015 	stw	zero,0(r2)
 840b158:	003fe106 	br	840b0e0 <__pow5mult+0x60>
 840b15c:	1085883a 	add	r2,r2,r2
 840b160:	00c21074 	movhi	r3,2113
 840b164:	18c71e04 	addi	r3,r3,7288
 840b168:	1085883a 	add	r2,r2,r2
 840b16c:	10c5883a 	add	r2,r2,r3
 840b170:	11bfff17 	ldw	r6,-4(r2)
 840b174:	000f883a 	mov	r7,zero
 840b178:	840af800 	call	840af80 <__multadd>
 840b17c:	1029883a 	mov	r20,r2
 840b180:	003fcb06 	br	840b0b0 <__pow5mult+0x30>
 840b184:	9809883a 	mov	r4,r19
 840b188:	01409c44 	movi	r5,625
 840b18c:	840af440 	call	840af44 <__i2b>
 840b190:	98801215 	stw	r2,72(r19)
 840b194:	1021883a 	mov	r16,r2
 840b198:	10000015 	stw	zero,0(r2)
 840b19c:	003fd006 	br	840b0e0 <__pow5mult+0x60>

0840b1a0 <__s2b>:
 840b1a0:	defff904 	addi	sp,sp,-28
 840b1a4:	dcc00315 	stw	r19,12(sp)
 840b1a8:	dc800215 	stw	r18,8(sp)
 840b1ac:	2827883a 	mov	r19,r5
 840b1b0:	2025883a 	mov	r18,r4
 840b1b4:	01400244 	movi	r5,9
 840b1b8:	39000204 	addi	r4,r7,8
 840b1bc:	dd000415 	stw	r20,16(sp)
 840b1c0:	dc400115 	stw	r17,4(sp)
 840b1c4:	dfc00615 	stw	ra,24(sp)
 840b1c8:	dd400515 	stw	r21,20(sp)
 840b1cc:	dc000015 	stw	r16,0(sp)
 840b1d0:	3829883a 	mov	r20,r7
 840b1d4:	3023883a 	mov	r17,r6
 840b1d8:	84043140 	call	8404314 <__divsi3>
 840b1dc:	00c00044 	movi	r3,1
 840b1e0:	1880350e 	bge	r3,r2,840b2b8 <__s2b+0x118>
 840b1e4:	000b883a 	mov	r5,zero
 840b1e8:	18c7883a 	add	r3,r3,r3
 840b1ec:	29400044 	addi	r5,r5,1
 840b1f0:	18bffd16 	blt	r3,r2,840b1e8 <__s2b+0x48>
 840b1f4:	9009883a 	mov	r4,r18
 840b1f8:	840a84c0 	call	840a84c <_Balloc>
 840b1fc:	1011883a 	mov	r8,r2
 840b200:	d8800717 	ldw	r2,28(sp)
 840b204:	00c00044 	movi	r3,1
 840b208:	01800244 	movi	r6,9
 840b20c:	40800515 	stw	r2,20(r8)
 840b210:	40c00415 	stw	r3,16(r8)
 840b214:	3440260e 	bge	r6,r17,840b2b0 <__s2b+0x110>
 840b218:	3021883a 	mov	r16,r6
 840b21c:	99ab883a 	add	r21,r19,r6
 840b220:	9c05883a 	add	r2,r19,r16
 840b224:	11c00007 	ldb	r7,0(r2)
 840b228:	400b883a 	mov	r5,r8
 840b22c:	9009883a 	mov	r4,r18
 840b230:	39fff404 	addi	r7,r7,-48
 840b234:	01800284 	movi	r6,10
 840b238:	840af800 	call	840af80 <__multadd>
 840b23c:	84000044 	addi	r16,r16,1
 840b240:	1011883a 	mov	r8,r2
 840b244:	8c3ff61e 	bne	r17,r16,840b220 <__s2b+0x80>
 840b248:	ac45883a 	add	r2,r21,r17
 840b24c:	117ffe04 	addi	r5,r2,-8
 840b250:	880d883a 	mov	r6,r17
 840b254:	35000c0e 	bge	r6,r20,840b288 <__s2b+0xe8>
 840b258:	a185c83a 	sub	r2,r20,r6
 840b25c:	2821883a 	mov	r16,r5
 840b260:	28a3883a 	add	r17,r5,r2
 840b264:	81c00007 	ldb	r7,0(r16)
 840b268:	400b883a 	mov	r5,r8
 840b26c:	9009883a 	mov	r4,r18
 840b270:	39fff404 	addi	r7,r7,-48
 840b274:	01800284 	movi	r6,10
 840b278:	840af800 	call	840af80 <__multadd>
 840b27c:	84000044 	addi	r16,r16,1
 840b280:	1011883a 	mov	r8,r2
 840b284:	847ff71e 	bne	r16,r17,840b264 <__s2b+0xc4>
 840b288:	4005883a 	mov	r2,r8
 840b28c:	dfc00617 	ldw	ra,24(sp)
 840b290:	dd400517 	ldw	r21,20(sp)
 840b294:	dd000417 	ldw	r20,16(sp)
 840b298:	dcc00317 	ldw	r19,12(sp)
 840b29c:	dc800217 	ldw	r18,8(sp)
 840b2a0:	dc400117 	ldw	r17,4(sp)
 840b2a4:	dc000017 	ldw	r16,0(sp)
 840b2a8:	dec00704 	addi	sp,sp,28
 840b2ac:	f800283a 	ret
 840b2b0:	99400284 	addi	r5,r19,10
 840b2b4:	003fe706 	br	840b254 <__s2b+0xb4>
 840b2b8:	000b883a 	mov	r5,zero
 840b2bc:	003fcd06 	br	840b1f4 <__s2b+0x54>

0840b2c0 <_realloc_r>:
 840b2c0:	defff404 	addi	sp,sp,-48
 840b2c4:	dd800815 	stw	r22,32(sp)
 840b2c8:	dc800415 	stw	r18,16(sp)
 840b2cc:	dc400315 	stw	r17,12(sp)
 840b2d0:	dfc00b15 	stw	ra,44(sp)
 840b2d4:	df000a15 	stw	fp,40(sp)
 840b2d8:	ddc00915 	stw	r23,36(sp)
 840b2dc:	dd400715 	stw	r21,28(sp)
 840b2e0:	dd000615 	stw	r20,24(sp)
 840b2e4:	dcc00515 	stw	r19,20(sp)
 840b2e8:	dc000215 	stw	r16,8(sp)
 840b2ec:	2825883a 	mov	r18,r5
 840b2f0:	3023883a 	mov	r17,r6
 840b2f4:	202d883a 	mov	r22,r4
 840b2f8:	2800c926 	beq	r5,zero,840b620 <_realloc_r+0x360>
 840b2fc:	840d5040 	call	840d504 <__malloc_lock>
 840b300:	943ffe04 	addi	r16,r18,-8
 840b304:	88c002c4 	addi	r3,r17,11
 840b308:	00800584 	movi	r2,22
 840b30c:	82000117 	ldw	r8,4(r16)
 840b310:	10c01b2e 	bgeu	r2,r3,840b380 <_realloc_r+0xc0>
 840b314:	00bffe04 	movi	r2,-8
 840b318:	188e703a 	and	r7,r3,r2
 840b31c:	3839883a 	mov	fp,r7
 840b320:	38001a16 	blt	r7,zero,840b38c <_realloc_r+0xcc>
 840b324:	e4401936 	bltu	fp,r17,840b38c <_realloc_r+0xcc>
 840b328:	013fff04 	movi	r4,-4
 840b32c:	4126703a 	and	r19,r8,r4
 840b330:	99c02616 	blt	r19,r7,840b3cc <_realloc_r+0x10c>
 840b334:	802b883a 	mov	r21,r16
 840b338:	9829883a 	mov	r20,r19
 840b33c:	84000204 	addi	r16,r16,8
 840b340:	a80f883a 	mov	r7,r21
 840b344:	a70dc83a 	sub	r6,r20,fp
 840b348:	008003c4 	movi	r2,15
 840b34c:	1180c136 	bltu	r2,r6,840b654 <_realloc_r+0x394>
 840b350:	38800117 	ldw	r2,4(r7)
 840b354:	a549883a 	add	r4,r20,r21
 840b358:	1080004c 	andi	r2,r2,1
 840b35c:	a084b03a 	or	r2,r20,r2
 840b360:	38800115 	stw	r2,4(r7)
 840b364:	20c00117 	ldw	r3,4(r4)
 840b368:	18c00054 	ori	r3,r3,1
 840b36c:	20c00115 	stw	r3,4(r4)
 840b370:	b009883a 	mov	r4,r22
 840b374:	840d5240 	call	840d524 <__malloc_unlock>
 840b378:	8023883a 	mov	r17,r16
 840b37c:	00000606 	br	840b398 <_realloc_r+0xd8>
 840b380:	01c00404 	movi	r7,16
 840b384:	3839883a 	mov	fp,r7
 840b388:	e47fe72e 	bgeu	fp,r17,840b328 <_realloc_r+0x68>
 840b38c:	00800304 	movi	r2,12
 840b390:	0023883a 	mov	r17,zero
 840b394:	b0800015 	stw	r2,0(r22)
 840b398:	8805883a 	mov	r2,r17
 840b39c:	dfc00b17 	ldw	ra,44(sp)
 840b3a0:	df000a17 	ldw	fp,40(sp)
 840b3a4:	ddc00917 	ldw	r23,36(sp)
 840b3a8:	dd800817 	ldw	r22,32(sp)
 840b3ac:	dd400717 	ldw	r21,28(sp)
 840b3b0:	dd000617 	ldw	r20,24(sp)
 840b3b4:	dcc00517 	ldw	r19,20(sp)
 840b3b8:	dc800417 	ldw	r18,16(sp)
 840b3bc:	dc400317 	ldw	r17,12(sp)
 840b3c0:	dc000217 	ldw	r16,8(sp)
 840b3c4:	dec00c04 	addi	sp,sp,48
 840b3c8:	f800283a 	ret
 840b3cc:	00821074 	movhi	r2,2113
 840b3d0:	10887904 	addi	r2,r2,8676
 840b3d4:	12400217 	ldw	r9,8(r2)
 840b3d8:	84cd883a 	add	r6,r16,r19
 840b3dc:	802b883a 	mov	r21,r16
 840b3e0:	3240b926 	beq	r6,r9,840b6c8 <_realloc_r+0x408>
 840b3e4:	31400117 	ldw	r5,4(r6)
 840b3e8:	00bfff84 	movi	r2,-2
 840b3ec:	2884703a 	and	r2,r5,r2
 840b3f0:	1185883a 	add	r2,r2,r6
 840b3f4:	10c00117 	ldw	r3,4(r2)
 840b3f8:	18c0004c 	andi	r3,r3,1
 840b3fc:	1807003a 	cmpeq	r3,r3,zero
 840b400:	1800a326 	beq	r3,zero,840b690 <_realloc_r+0x3d0>
 840b404:	2908703a 	and	r4,r5,r4
 840b408:	9929883a 	add	r20,r19,r4
 840b40c:	a1c0a30e 	bge	r20,r7,840b69c <_realloc_r+0x3dc>
 840b410:	4080004c 	andi	r2,r8,1
 840b414:	1000551e 	bne	r2,zero,840b56c <_realloc_r+0x2ac>
 840b418:	80800017 	ldw	r2,0(r16)
 840b41c:	80afc83a 	sub	r23,r16,r2
 840b420:	b8c00117 	ldw	r3,4(r23)
 840b424:	00bfff04 	movi	r2,-4
 840b428:	1884703a 	and	r2,r3,r2
 840b42c:	30002e26 	beq	r6,zero,840b4e8 <_realloc_r+0x228>
 840b430:	3240b926 	beq	r6,r9,840b718 <_realloc_r+0x458>
 840b434:	98a9883a 	add	r20,r19,r2
 840b438:	2509883a 	add	r4,r4,r20
 840b43c:	d9000015 	stw	r4,0(sp)
 840b440:	21c02a16 	blt	r4,r7,840b4ec <_realloc_r+0x22c>
 840b444:	30800317 	ldw	r2,12(r6)
 840b448:	30c00217 	ldw	r3,8(r6)
 840b44c:	01400904 	movi	r5,36
 840b450:	99bfff04 	addi	r6,r19,-4
 840b454:	18800315 	stw	r2,12(r3)
 840b458:	10c00215 	stw	r3,8(r2)
 840b45c:	b9000317 	ldw	r4,12(r23)
 840b460:	b8800217 	ldw	r2,8(r23)
 840b464:	b82b883a 	mov	r21,r23
 840b468:	bc000204 	addi	r16,r23,8
 840b46c:	20800215 	stw	r2,8(r4)
 840b470:	11000315 	stw	r4,12(r2)
 840b474:	2980e436 	bltu	r5,r6,840b808 <_realloc_r+0x548>
 840b478:	008004c4 	movi	r2,19
 840b47c:	9009883a 	mov	r4,r18
 840b480:	8011883a 	mov	r8,r16
 840b484:	11800f2e 	bgeu	r2,r6,840b4c4 <_realloc_r+0x204>
 840b488:	90800017 	ldw	r2,0(r18)
 840b48c:	ba000404 	addi	r8,r23,16
 840b490:	91000204 	addi	r4,r18,8
 840b494:	b8800215 	stw	r2,8(r23)
 840b498:	90c00117 	ldw	r3,4(r18)
 840b49c:	008006c4 	movi	r2,27
 840b4a0:	b8c00315 	stw	r3,12(r23)
 840b4a4:	1180072e 	bgeu	r2,r6,840b4c4 <_realloc_r+0x204>
 840b4a8:	90c00217 	ldw	r3,8(r18)
 840b4ac:	ba000604 	addi	r8,r23,24
 840b4b0:	91000404 	addi	r4,r18,16
 840b4b4:	b8c00415 	stw	r3,16(r23)
 840b4b8:	90800317 	ldw	r2,12(r18)
 840b4bc:	b8800515 	stw	r2,20(r23)
 840b4c0:	3140e726 	beq	r6,r5,840b860 <_realloc_r+0x5a0>
 840b4c4:	20800017 	ldw	r2,0(r4)
 840b4c8:	dd000017 	ldw	r20,0(sp)
 840b4cc:	b80f883a 	mov	r7,r23
 840b4d0:	40800015 	stw	r2,0(r8)
 840b4d4:	20c00117 	ldw	r3,4(r4)
 840b4d8:	40c00115 	stw	r3,4(r8)
 840b4dc:	20800217 	ldw	r2,8(r4)
 840b4e0:	40800215 	stw	r2,8(r8)
 840b4e4:	003f9706 	br	840b344 <_realloc_r+0x84>
 840b4e8:	98a9883a 	add	r20,r19,r2
 840b4ec:	a1c01f16 	blt	r20,r7,840b56c <_realloc_r+0x2ac>
 840b4f0:	b8c00317 	ldw	r3,12(r23)
 840b4f4:	b8800217 	ldw	r2,8(r23)
 840b4f8:	99bfff04 	addi	r6,r19,-4
 840b4fc:	01400904 	movi	r5,36
 840b500:	b82b883a 	mov	r21,r23
 840b504:	18800215 	stw	r2,8(r3)
 840b508:	10c00315 	stw	r3,12(r2)
 840b50c:	bc000204 	addi	r16,r23,8
 840b510:	2980c336 	bltu	r5,r6,840b820 <_realloc_r+0x560>
 840b514:	008004c4 	movi	r2,19
 840b518:	9009883a 	mov	r4,r18
 840b51c:	8011883a 	mov	r8,r16
 840b520:	11800f2e 	bgeu	r2,r6,840b560 <_realloc_r+0x2a0>
 840b524:	90800017 	ldw	r2,0(r18)
 840b528:	ba000404 	addi	r8,r23,16
 840b52c:	91000204 	addi	r4,r18,8
 840b530:	b8800215 	stw	r2,8(r23)
 840b534:	90c00117 	ldw	r3,4(r18)
 840b538:	008006c4 	movi	r2,27
 840b53c:	b8c00315 	stw	r3,12(r23)
 840b540:	1180072e 	bgeu	r2,r6,840b560 <_realloc_r+0x2a0>
 840b544:	90c00217 	ldw	r3,8(r18)
 840b548:	ba000604 	addi	r8,r23,24
 840b54c:	91000404 	addi	r4,r18,16
 840b550:	b8c00415 	stw	r3,16(r23)
 840b554:	90800317 	ldw	r2,12(r18)
 840b558:	b8800515 	stw	r2,20(r23)
 840b55c:	3140c726 	beq	r6,r5,840b87c <_realloc_r+0x5bc>
 840b560:	20800017 	ldw	r2,0(r4)
 840b564:	b80f883a 	mov	r7,r23
 840b568:	003fd906 	br	840b4d0 <_realloc_r+0x210>
 840b56c:	880b883a 	mov	r5,r17
 840b570:	b009883a 	mov	r4,r22
 840b574:	84098900 	call	8409890 <_malloc_r>
 840b578:	1023883a 	mov	r17,r2
 840b57c:	10002526 	beq	r2,zero,840b614 <_realloc_r+0x354>
 840b580:	80800117 	ldw	r2,4(r16)
 840b584:	00ffff84 	movi	r3,-2
 840b588:	893ffe04 	addi	r4,r17,-8
 840b58c:	10c4703a 	and	r2,r2,r3
 840b590:	8085883a 	add	r2,r16,r2
 840b594:	20809526 	beq	r4,r2,840b7ec <_realloc_r+0x52c>
 840b598:	99bfff04 	addi	r6,r19,-4
 840b59c:	01c00904 	movi	r7,36
 840b5a0:	39804536 	bltu	r7,r6,840b6b8 <_realloc_r+0x3f8>
 840b5a4:	008004c4 	movi	r2,19
 840b5a8:	9009883a 	mov	r4,r18
 840b5ac:	880b883a 	mov	r5,r17
 840b5b0:	11800f2e 	bgeu	r2,r6,840b5f0 <_realloc_r+0x330>
 840b5b4:	90800017 	ldw	r2,0(r18)
 840b5b8:	89400204 	addi	r5,r17,8
 840b5bc:	91000204 	addi	r4,r18,8
 840b5c0:	88800015 	stw	r2,0(r17)
 840b5c4:	90c00117 	ldw	r3,4(r18)
 840b5c8:	008006c4 	movi	r2,27
 840b5cc:	88c00115 	stw	r3,4(r17)
 840b5d0:	1180072e 	bgeu	r2,r6,840b5f0 <_realloc_r+0x330>
 840b5d4:	90c00217 	ldw	r3,8(r18)
 840b5d8:	89400404 	addi	r5,r17,16
 840b5dc:	91000404 	addi	r4,r18,16
 840b5e0:	88c00215 	stw	r3,8(r17)
 840b5e4:	90800317 	ldw	r2,12(r18)
 840b5e8:	88800315 	stw	r2,12(r17)
 840b5ec:	31c09126 	beq	r6,r7,840b834 <_realloc_r+0x574>
 840b5f0:	20800017 	ldw	r2,0(r4)
 840b5f4:	28800015 	stw	r2,0(r5)
 840b5f8:	20c00117 	ldw	r3,4(r4)
 840b5fc:	28c00115 	stw	r3,4(r5)
 840b600:	20800217 	ldw	r2,8(r4)
 840b604:	28800215 	stw	r2,8(r5)
 840b608:	900b883a 	mov	r5,r18
 840b60c:	b009883a 	mov	r4,r22
 840b610:	8408d080 	call	8408d08 <_free_r>
 840b614:	b009883a 	mov	r4,r22
 840b618:	840d5240 	call	840d524 <__malloc_unlock>
 840b61c:	003f5e06 	br	840b398 <_realloc_r+0xd8>
 840b620:	300b883a 	mov	r5,r6
 840b624:	dfc00b17 	ldw	ra,44(sp)
 840b628:	df000a17 	ldw	fp,40(sp)
 840b62c:	ddc00917 	ldw	r23,36(sp)
 840b630:	dd800817 	ldw	r22,32(sp)
 840b634:	dd400717 	ldw	r21,28(sp)
 840b638:	dd000617 	ldw	r20,24(sp)
 840b63c:	dcc00517 	ldw	r19,20(sp)
 840b640:	dc800417 	ldw	r18,16(sp)
 840b644:	dc400317 	ldw	r17,12(sp)
 840b648:	dc000217 	ldw	r16,8(sp)
 840b64c:	dec00c04 	addi	sp,sp,48
 840b650:	84098901 	jmpi	8409890 <_malloc_r>
 840b654:	38800117 	ldw	r2,4(r7)
 840b658:	e54b883a 	add	r5,fp,r21
 840b65c:	31000054 	ori	r4,r6,1
 840b660:	1080004c 	andi	r2,r2,1
 840b664:	1704b03a 	or	r2,r2,fp
 840b668:	38800115 	stw	r2,4(r7)
 840b66c:	29000115 	stw	r4,4(r5)
 840b670:	2987883a 	add	r3,r5,r6
 840b674:	18800117 	ldw	r2,4(r3)
 840b678:	29400204 	addi	r5,r5,8
 840b67c:	b009883a 	mov	r4,r22
 840b680:	10800054 	ori	r2,r2,1
 840b684:	18800115 	stw	r2,4(r3)
 840b688:	8408d080 	call	8408d08 <_free_r>
 840b68c:	003f3806 	br	840b370 <_realloc_r+0xb0>
 840b690:	000d883a 	mov	r6,zero
 840b694:	0009883a 	mov	r4,zero
 840b698:	003f5d06 	br	840b410 <_realloc_r+0x150>
 840b69c:	30c00217 	ldw	r3,8(r6)
 840b6a0:	30800317 	ldw	r2,12(r6)
 840b6a4:	800f883a 	mov	r7,r16
 840b6a8:	84000204 	addi	r16,r16,8
 840b6ac:	10c00215 	stw	r3,8(r2)
 840b6b0:	18800315 	stw	r2,12(r3)
 840b6b4:	003f2306 	br	840b344 <_realloc_r+0x84>
 840b6b8:	8809883a 	mov	r4,r17
 840b6bc:	900b883a 	mov	r5,r18
 840b6c0:	840a1540 	call	840a154 <memmove>
 840b6c4:	003fd006 	br	840b608 <_realloc_r+0x348>
 840b6c8:	30800117 	ldw	r2,4(r6)
 840b6cc:	e0c00404 	addi	r3,fp,16
 840b6d0:	1108703a 	and	r4,r2,r4
 840b6d4:	9905883a 	add	r2,r19,r4
 840b6d8:	10ff4d16 	blt	r2,r3,840b410 <_realloc_r+0x150>
 840b6dc:	1705c83a 	sub	r2,r2,fp
 840b6e0:	870b883a 	add	r5,r16,fp
 840b6e4:	10800054 	ori	r2,r2,1
 840b6e8:	28800115 	stw	r2,4(r5)
 840b6ec:	80c00117 	ldw	r3,4(r16)
 840b6f0:	00821074 	movhi	r2,2113
 840b6f4:	10887904 	addi	r2,r2,8676
 840b6f8:	b009883a 	mov	r4,r22
 840b6fc:	18c0004c 	andi	r3,r3,1
 840b700:	e0c6b03a 	or	r3,fp,r3
 840b704:	11400215 	stw	r5,8(r2)
 840b708:	80c00115 	stw	r3,4(r16)
 840b70c:	840d5240 	call	840d524 <__malloc_unlock>
 840b710:	84400204 	addi	r17,r16,8
 840b714:	003f2006 	br	840b398 <_realloc_r+0xd8>
 840b718:	98a9883a 	add	r20,r19,r2
 840b71c:	2509883a 	add	r4,r4,r20
 840b720:	e0800404 	addi	r2,fp,16
 840b724:	d9000115 	stw	r4,4(sp)
 840b728:	20bf7016 	blt	r4,r2,840b4ec <_realloc_r+0x22c>
 840b72c:	b8c00317 	ldw	r3,12(r23)
 840b730:	b8800217 	ldw	r2,8(r23)
 840b734:	99bfff04 	addi	r6,r19,-4
 840b738:	01400904 	movi	r5,36
 840b73c:	18800215 	stw	r2,8(r3)
 840b740:	10c00315 	stw	r3,12(r2)
 840b744:	bc400204 	addi	r17,r23,8
 840b748:	29804136 	bltu	r5,r6,840b850 <_realloc_r+0x590>
 840b74c:	008004c4 	movi	r2,19
 840b750:	9009883a 	mov	r4,r18
 840b754:	880f883a 	mov	r7,r17
 840b758:	11800f2e 	bgeu	r2,r6,840b798 <_realloc_r+0x4d8>
 840b75c:	90800017 	ldw	r2,0(r18)
 840b760:	b9c00404 	addi	r7,r23,16
 840b764:	91000204 	addi	r4,r18,8
 840b768:	b8800215 	stw	r2,8(r23)
 840b76c:	90c00117 	ldw	r3,4(r18)
 840b770:	008006c4 	movi	r2,27
 840b774:	b8c00315 	stw	r3,12(r23)
 840b778:	1180072e 	bgeu	r2,r6,840b798 <_realloc_r+0x4d8>
 840b77c:	90c00217 	ldw	r3,8(r18)
 840b780:	b9c00604 	addi	r7,r23,24
 840b784:	91000404 	addi	r4,r18,16
 840b788:	b8c00415 	stw	r3,16(r23)
 840b78c:	90800317 	ldw	r2,12(r18)
 840b790:	b8800515 	stw	r2,20(r23)
 840b794:	31404026 	beq	r6,r5,840b898 <_realloc_r+0x5d8>
 840b798:	20800017 	ldw	r2,0(r4)
 840b79c:	38800015 	stw	r2,0(r7)
 840b7a0:	20c00117 	ldw	r3,4(r4)
 840b7a4:	38c00115 	stw	r3,4(r7)
 840b7a8:	20800217 	ldw	r2,8(r4)
 840b7ac:	38800215 	stw	r2,8(r7)
 840b7b0:	d8c00117 	ldw	r3,4(sp)
 840b7b4:	bf0b883a 	add	r5,r23,fp
 840b7b8:	b009883a 	mov	r4,r22
 840b7bc:	1f05c83a 	sub	r2,r3,fp
 840b7c0:	10800054 	ori	r2,r2,1
 840b7c4:	28800115 	stw	r2,4(r5)
 840b7c8:	b8c00117 	ldw	r3,4(r23)
 840b7cc:	00821074 	movhi	r2,2113
 840b7d0:	10887904 	addi	r2,r2,8676
 840b7d4:	11400215 	stw	r5,8(r2)
 840b7d8:	18c0004c 	andi	r3,r3,1
 840b7dc:	e0c6b03a 	or	r3,fp,r3
 840b7e0:	b8c00115 	stw	r3,4(r23)
 840b7e4:	840d5240 	call	840d524 <__malloc_unlock>
 840b7e8:	003eeb06 	br	840b398 <_realloc_r+0xd8>
 840b7ec:	20800117 	ldw	r2,4(r4)
 840b7f0:	00ffff04 	movi	r3,-4
 840b7f4:	800f883a 	mov	r7,r16
 840b7f8:	10c4703a 	and	r2,r2,r3
 840b7fc:	98a9883a 	add	r20,r19,r2
 840b800:	84000204 	addi	r16,r16,8
 840b804:	003ecf06 	br	840b344 <_realloc_r+0x84>
 840b808:	900b883a 	mov	r5,r18
 840b80c:	8009883a 	mov	r4,r16
 840b810:	840a1540 	call	840a154 <memmove>
 840b814:	dd000017 	ldw	r20,0(sp)
 840b818:	b80f883a 	mov	r7,r23
 840b81c:	003ec906 	br	840b344 <_realloc_r+0x84>
 840b820:	900b883a 	mov	r5,r18
 840b824:	8009883a 	mov	r4,r16
 840b828:	840a1540 	call	840a154 <memmove>
 840b82c:	b80f883a 	mov	r7,r23
 840b830:	003ec406 	br	840b344 <_realloc_r+0x84>
 840b834:	90c00417 	ldw	r3,16(r18)
 840b838:	89400604 	addi	r5,r17,24
 840b83c:	91000604 	addi	r4,r18,24
 840b840:	88c00415 	stw	r3,16(r17)
 840b844:	90800517 	ldw	r2,20(r18)
 840b848:	88800515 	stw	r2,20(r17)
 840b84c:	003f6806 	br	840b5f0 <_realloc_r+0x330>
 840b850:	900b883a 	mov	r5,r18
 840b854:	8809883a 	mov	r4,r17
 840b858:	840a1540 	call	840a154 <memmove>
 840b85c:	003fd406 	br	840b7b0 <_realloc_r+0x4f0>
 840b860:	90c00417 	ldw	r3,16(r18)
 840b864:	91000604 	addi	r4,r18,24
 840b868:	ba000804 	addi	r8,r23,32
 840b86c:	b8c00615 	stw	r3,24(r23)
 840b870:	90800517 	ldw	r2,20(r18)
 840b874:	b8800715 	stw	r2,28(r23)
 840b878:	003f1206 	br	840b4c4 <_realloc_r+0x204>
 840b87c:	90c00417 	ldw	r3,16(r18)
 840b880:	91000604 	addi	r4,r18,24
 840b884:	ba000804 	addi	r8,r23,32
 840b888:	b8c00615 	stw	r3,24(r23)
 840b88c:	90800517 	ldw	r2,20(r18)
 840b890:	b8800715 	stw	r2,28(r23)
 840b894:	003f3206 	br	840b560 <_realloc_r+0x2a0>
 840b898:	90c00417 	ldw	r3,16(r18)
 840b89c:	91000604 	addi	r4,r18,24
 840b8a0:	b9c00804 	addi	r7,r23,32
 840b8a4:	b8c00615 	stw	r3,24(r23)
 840b8a8:	90800517 	ldw	r2,20(r18)
 840b8ac:	b8800715 	stw	r2,28(r23)
 840b8b0:	003fb906 	br	840b798 <_realloc_r+0x4d8>

0840b8b4 <__isinfd>:
 840b8b4:	200d883a 	mov	r6,r4
 840b8b8:	0109c83a 	sub	r4,zero,r4
 840b8bc:	2188b03a 	or	r4,r4,r6
 840b8c0:	2008d7fa 	srli	r4,r4,31
 840b8c4:	00a00034 	movhi	r2,32768
 840b8c8:	10bfffc4 	addi	r2,r2,-1
 840b8cc:	1144703a 	and	r2,r2,r5
 840b8d0:	2088b03a 	or	r4,r4,r2
 840b8d4:	009ffc34 	movhi	r2,32752
 840b8d8:	1105c83a 	sub	r2,r2,r4
 840b8dc:	0087c83a 	sub	r3,zero,r2
 840b8e0:	10c4b03a 	or	r2,r2,r3
 840b8e4:	1004d7fa 	srli	r2,r2,31
 840b8e8:	00c00044 	movi	r3,1
 840b8ec:	1885c83a 	sub	r2,r3,r2
 840b8f0:	f800283a 	ret

0840b8f4 <_sbrk_r>:
 840b8f4:	defffd04 	addi	sp,sp,-12
 840b8f8:	dc000015 	stw	r16,0(sp)
 840b8fc:	04021074 	movhi	r16,2113
 840b900:	84156404 	addi	r16,r16,21904
 840b904:	dc400115 	stw	r17,4(sp)
 840b908:	80000015 	stw	zero,0(r16)
 840b90c:	2023883a 	mov	r17,r4
 840b910:	2809883a 	mov	r4,r5
 840b914:	dfc00215 	stw	ra,8(sp)
 840b918:	840d7240 	call	840d724 <sbrk>
 840b91c:	1007883a 	mov	r3,r2
 840b920:	00bfffc4 	movi	r2,-1
 840b924:	18800626 	beq	r3,r2,840b940 <_sbrk_r+0x4c>
 840b928:	1805883a 	mov	r2,r3
 840b92c:	dfc00217 	ldw	ra,8(sp)
 840b930:	dc400117 	ldw	r17,4(sp)
 840b934:	dc000017 	ldw	r16,0(sp)
 840b938:	dec00304 	addi	sp,sp,12
 840b93c:	f800283a 	ret
 840b940:	80800017 	ldw	r2,0(r16)
 840b944:	103ff826 	beq	r2,zero,840b928 <_sbrk_r+0x34>
 840b948:	88800015 	stw	r2,0(r17)
 840b94c:	1805883a 	mov	r2,r3
 840b950:	dfc00217 	ldw	ra,8(sp)
 840b954:	dc400117 	ldw	r17,4(sp)
 840b958:	dc000017 	ldw	r16,0(sp)
 840b95c:	dec00304 	addi	sp,sp,12
 840b960:	f800283a 	ret

0840b964 <__sclose>:
 840b964:	2940038f 	ldh	r5,14(r5)
 840b968:	840bc981 	jmpi	840bc98 <_close_r>

0840b96c <__sseek>:
 840b96c:	defffe04 	addi	sp,sp,-8
 840b970:	dc000015 	stw	r16,0(sp)
 840b974:	2821883a 	mov	r16,r5
 840b978:	2940038f 	ldh	r5,14(r5)
 840b97c:	dfc00115 	stw	ra,4(sp)
 840b980:	840bf100 	call	840bf10 <_lseek_r>
 840b984:	1007883a 	mov	r3,r2
 840b988:	00bfffc4 	movi	r2,-1
 840b98c:	18800926 	beq	r3,r2,840b9b4 <__sseek+0x48>
 840b990:	8080030b 	ldhu	r2,12(r16)
 840b994:	80c01415 	stw	r3,80(r16)
 840b998:	10840014 	ori	r2,r2,4096
 840b99c:	8080030d 	sth	r2,12(r16)
 840b9a0:	1805883a 	mov	r2,r3
 840b9a4:	dfc00117 	ldw	ra,4(sp)
 840b9a8:	dc000017 	ldw	r16,0(sp)
 840b9ac:	dec00204 	addi	sp,sp,8
 840b9b0:	f800283a 	ret
 840b9b4:	8080030b 	ldhu	r2,12(r16)
 840b9b8:	10bbffcc 	andi	r2,r2,61439
 840b9bc:	8080030d 	sth	r2,12(r16)
 840b9c0:	1805883a 	mov	r2,r3
 840b9c4:	dfc00117 	ldw	ra,4(sp)
 840b9c8:	dc000017 	ldw	r16,0(sp)
 840b9cc:	dec00204 	addi	sp,sp,8
 840b9d0:	f800283a 	ret

0840b9d4 <__swrite>:
 840b9d4:	2880030b 	ldhu	r2,12(r5)
 840b9d8:	defffb04 	addi	sp,sp,-20
 840b9dc:	dcc00315 	stw	r19,12(sp)
 840b9e0:	1080400c 	andi	r2,r2,256
 840b9e4:	dc800215 	stw	r18,8(sp)
 840b9e8:	dc400115 	stw	r17,4(sp)
 840b9ec:	dc000015 	stw	r16,0(sp)
 840b9f0:	3027883a 	mov	r19,r6
 840b9f4:	3825883a 	mov	r18,r7
 840b9f8:	dfc00415 	stw	ra,16(sp)
 840b9fc:	2821883a 	mov	r16,r5
 840ba00:	000d883a 	mov	r6,zero
 840ba04:	01c00084 	movi	r7,2
 840ba08:	2023883a 	mov	r17,r4
 840ba0c:	10000226 	beq	r2,zero,840ba18 <__swrite+0x44>
 840ba10:	2940038f 	ldh	r5,14(r5)
 840ba14:	840bf100 	call	840bf10 <_lseek_r>
 840ba18:	8080030b 	ldhu	r2,12(r16)
 840ba1c:	8140038f 	ldh	r5,14(r16)
 840ba20:	8809883a 	mov	r4,r17
 840ba24:	10bbffcc 	andi	r2,r2,61439
 840ba28:	980d883a 	mov	r6,r19
 840ba2c:	900f883a 	mov	r7,r18
 840ba30:	8080030d 	sth	r2,12(r16)
 840ba34:	dfc00417 	ldw	ra,16(sp)
 840ba38:	dcc00317 	ldw	r19,12(sp)
 840ba3c:	dc800217 	ldw	r18,8(sp)
 840ba40:	dc400117 	ldw	r17,4(sp)
 840ba44:	dc000017 	ldw	r16,0(sp)
 840ba48:	dec00504 	addi	sp,sp,20
 840ba4c:	840bb6c1 	jmpi	840bb6c <_write_r>

0840ba50 <__sread>:
 840ba50:	defffe04 	addi	sp,sp,-8
 840ba54:	dc000015 	stw	r16,0(sp)
 840ba58:	2821883a 	mov	r16,r5
 840ba5c:	2940038f 	ldh	r5,14(r5)
 840ba60:	dfc00115 	stw	ra,4(sp)
 840ba64:	840bf880 	call	840bf88 <_read_r>
 840ba68:	1007883a 	mov	r3,r2
 840ba6c:	10000816 	blt	r2,zero,840ba90 <__sread+0x40>
 840ba70:	80801417 	ldw	r2,80(r16)
 840ba74:	10c5883a 	add	r2,r2,r3
 840ba78:	80801415 	stw	r2,80(r16)
 840ba7c:	1805883a 	mov	r2,r3
 840ba80:	dfc00117 	ldw	ra,4(sp)
 840ba84:	dc000017 	ldw	r16,0(sp)
 840ba88:	dec00204 	addi	sp,sp,8
 840ba8c:	f800283a 	ret
 840ba90:	8080030b 	ldhu	r2,12(r16)
 840ba94:	10bbffcc 	andi	r2,r2,61439
 840ba98:	8080030d 	sth	r2,12(r16)
 840ba9c:	1805883a 	mov	r2,r3
 840baa0:	dfc00117 	ldw	ra,4(sp)
 840baa4:	dc000017 	ldw	r16,0(sp)
 840baa8:	dec00204 	addi	sp,sp,8
 840baac:	f800283a 	ret

0840bab0 <strcmp>:
 840bab0:	2144b03a 	or	r2,r4,r5
 840bab4:	108000cc 	andi	r2,r2,3
 840bab8:	10001d1e 	bne	r2,zero,840bb30 <strcmp+0x80>
 840babc:	200f883a 	mov	r7,r4
 840bac0:	28800017 	ldw	r2,0(r5)
 840bac4:	21000017 	ldw	r4,0(r4)
 840bac8:	280d883a 	mov	r6,r5
 840bacc:	2080161e 	bne	r4,r2,840bb28 <strcmp+0x78>
 840bad0:	023fbff4 	movhi	r8,65279
 840bad4:	423fbfc4 	addi	r8,r8,-257
 840bad8:	2207883a 	add	r3,r4,r8
 840badc:	01602074 	movhi	r5,32897
 840bae0:	29602004 	addi	r5,r5,-32640
 840bae4:	1946703a 	and	r3,r3,r5
 840bae8:	0104303a 	nor	r2,zero,r4
 840baec:	10c4703a 	and	r2,r2,r3
 840baf0:	10001c1e 	bne	r2,zero,840bb64 <strcmp+0xb4>
 840baf4:	4013883a 	mov	r9,r8
 840baf8:	2811883a 	mov	r8,r5
 840bafc:	00000106 	br	840bb04 <strcmp+0x54>
 840bb00:	1800181e 	bne	r3,zero,840bb64 <strcmp+0xb4>
 840bb04:	39c00104 	addi	r7,r7,4
 840bb08:	39000017 	ldw	r4,0(r7)
 840bb0c:	31800104 	addi	r6,r6,4
 840bb10:	31400017 	ldw	r5,0(r6)
 840bb14:	2245883a 	add	r2,r4,r9
 840bb18:	1204703a 	and	r2,r2,r8
 840bb1c:	0106303a 	nor	r3,zero,r4
 840bb20:	1886703a 	and	r3,r3,r2
 840bb24:	217ff626 	beq	r4,r5,840bb00 <strcmp+0x50>
 840bb28:	3809883a 	mov	r4,r7
 840bb2c:	300b883a 	mov	r5,r6
 840bb30:	20c00007 	ldb	r3,0(r4)
 840bb34:	1800051e 	bne	r3,zero,840bb4c <strcmp+0x9c>
 840bb38:	00000606 	br	840bb54 <strcmp+0xa4>
 840bb3c:	21000044 	addi	r4,r4,1
 840bb40:	20c00007 	ldb	r3,0(r4)
 840bb44:	29400044 	addi	r5,r5,1
 840bb48:	18000226 	beq	r3,zero,840bb54 <strcmp+0xa4>
 840bb4c:	28800007 	ldb	r2,0(r5)
 840bb50:	18bffa26 	beq	r3,r2,840bb3c <strcmp+0x8c>
 840bb54:	20c00003 	ldbu	r3,0(r4)
 840bb58:	28800003 	ldbu	r2,0(r5)
 840bb5c:	1885c83a 	sub	r2,r3,r2
 840bb60:	f800283a 	ret
 840bb64:	0005883a 	mov	r2,zero
 840bb68:	f800283a 	ret

0840bb6c <_write_r>:
 840bb6c:	defffd04 	addi	sp,sp,-12
 840bb70:	dc000015 	stw	r16,0(sp)
 840bb74:	04021074 	movhi	r16,2113
 840bb78:	84156404 	addi	r16,r16,21904
 840bb7c:	dc400115 	stw	r17,4(sp)
 840bb80:	80000015 	stw	zero,0(r16)
 840bb84:	2023883a 	mov	r17,r4
 840bb88:	2809883a 	mov	r4,r5
 840bb8c:	300b883a 	mov	r5,r6
 840bb90:	380d883a 	mov	r6,r7
 840bb94:	dfc00215 	stw	ra,8(sp)
 840bb98:	840d7e00 	call	840d7e0 <write>
 840bb9c:	1007883a 	mov	r3,r2
 840bba0:	00bfffc4 	movi	r2,-1
 840bba4:	18800626 	beq	r3,r2,840bbc0 <_write_r+0x54>
 840bba8:	1805883a 	mov	r2,r3
 840bbac:	dfc00217 	ldw	ra,8(sp)
 840bbb0:	dc400117 	ldw	r17,4(sp)
 840bbb4:	dc000017 	ldw	r16,0(sp)
 840bbb8:	dec00304 	addi	sp,sp,12
 840bbbc:	f800283a 	ret
 840bbc0:	80800017 	ldw	r2,0(r16)
 840bbc4:	103ff826 	beq	r2,zero,840bba8 <_write_r+0x3c>
 840bbc8:	88800015 	stw	r2,0(r17)
 840bbcc:	1805883a 	mov	r2,r3
 840bbd0:	dfc00217 	ldw	ra,8(sp)
 840bbd4:	dc400117 	ldw	r17,4(sp)
 840bbd8:	dc000017 	ldw	r16,0(sp)
 840bbdc:	dec00304 	addi	sp,sp,12
 840bbe0:	f800283a 	ret

0840bbe4 <_calloc_r>:
 840bbe4:	298b383a 	mul	r5,r5,r6
 840bbe8:	defffe04 	addi	sp,sp,-8
 840bbec:	dc000015 	stw	r16,0(sp)
 840bbf0:	dfc00115 	stw	ra,4(sp)
 840bbf4:	84098900 	call	8409890 <_malloc_r>
 840bbf8:	1021883a 	mov	r16,r2
 840bbfc:	01c00904 	movi	r7,36
 840bc00:	10000d26 	beq	r2,zero,840bc38 <_calloc_r+0x54>
 840bc04:	10ffff17 	ldw	r3,-4(r2)
 840bc08:	1009883a 	mov	r4,r2
 840bc0c:	00bfff04 	movi	r2,-4
 840bc10:	1886703a 	and	r3,r3,r2
 840bc14:	1887883a 	add	r3,r3,r2
 840bc18:	180d883a 	mov	r6,r3
 840bc1c:	000b883a 	mov	r5,zero
 840bc20:	38c01736 	bltu	r7,r3,840bc80 <_calloc_r+0x9c>
 840bc24:	008004c4 	movi	r2,19
 840bc28:	10c00836 	bltu	r2,r3,840bc4c <_calloc_r+0x68>
 840bc2c:	20000215 	stw	zero,8(r4)
 840bc30:	20000015 	stw	zero,0(r4)
 840bc34:	20000115 	stw	zero,4(r4)
 840bc38:	8005883a 	mov	r2,r16
 840bc3c:	dfc00117 	ldw	ra,4(sp)
 840bc40:	dc000017 	ldw	r16,0(sp)
 840bc44:	dec00204 	addi	sp,sp,8
 840bc48:	f800283a 	ret
 840bc4c:	008006c4 	movi	r2,27
 840bc50:	80000015 	stw	zero,0(r16)
 840bc54:	80000115 	stw	zero,4(r16)
 840bc58:	81000204 	addi	r4,r16,8
 840bc5c:	10fff32e 	bgeu	r2,r3,840bc2c <_calloc_r+0x48>
 840bc60:	80000215 	stw	zero,8(r16)
 840bc64:	80000315 	stw	zero,12(r16)
 840bc68:	81000404 	addi	r4,r16,16
 840bc6c:	19ffef1e 	bne	r3,r7,840bc2c <_calloc_r+0x48>
 840bc70:	81000604 	addi	r4,r16,24
 840bc74:	80000415 	stw	zero,16(r16)
 840bc78:	80000515 	stw	zero,20(r16)
 840bc7c:	003feb06 	br	840bc2c <_calloc_r+0x48>
 840bc80:	840a2340 	call	840a234 <memset>
 840bc84:	8005883a 	mov	r2,r16
 840bc88:	dfc00117 	ldw	ra,4(sp)
 840bc8c:	dc000017 	ldw	r16,0(sp)
 840bc90:	dec00204 	addi	sp,sp,8
 840bc94:	f800283a 	ret

0840bc98 <_close_r>:
 840bc98:	defffd04 	addi	sp,sp,-12
 840bc9c:	dc000015 	stw	r16,0(sp)
 840bca0:	04021074 	movhi	r16,2113
 840bca4:	84156404 	addi	r16,r16,21904
 840bca8:	dc400115 	stw	r17,4(sp)
 840bcac:	80000015 	stw	zero,0(r16)
 840bcb0:	2023883a 	mov	r17,r4
 840bcb4:	2809883a 	mov	r4,r5
 840bcb8:	dfc00215 	stw	ra,8(sp)
 840bcbc:	840ce800 	call	840ce80 <close>
 840bcc0:	1007883a 	mov	r3,r2
 840bcc4:	00bfffc4 	movi	r2,-1
 840bcc8:	18800626 	beq	r3,r2,840bce4 <_close_r+0x4c>
 840bccc:	1805883a 	mov	r2,r3
 840bcd0:	dfc00217 	ldw	ra,8(sp)
 840bcd4:	dc400117 	ldw	r17,4(sp)
 840bcd8:	dc000017 	ldw	r16,0(sp)
 840bcdc:	dec00304 	addi	sp,sp,12
 840bce0:	f800283a 	ret
 840bce4:	80800017 	ldw	r2,0(r16)
 840bce8:	103ff826 	beq	r2,zero,840bccc <_close_r+0x34>
 840bcec:	88800015 	stw	r2,0(r17)
 840bcf0:	1805883a 	mov	r2,r3
 840bcf4:	dfc00217 	ldw	ra,8(sp)
 840bcf8:	dc400117 	ldw	r17,4(sp)
 840bcfc:	dc000017 	ldw	r16,0(sp)
 840bd00:	dec00304 	addi	sp,sp,12
 840bd04:	f800283a 	ret

0840bd08 <_fclose_r>:
 840bd08:	defffc04 	addi	sp,sp,-16
 840bd0c:	dc400115 	stw	r17,4(sp)
 840bd10:	dc000015 	stw	r16,0(sp)
 840bd14:	dfc00315 	stw	ra,12(sp)
 840bd18:	dc800215 	stw	r18,8(sp)
 840bd1c:	2821883a 	mov	r16,r5
 840bd20:	2023883a 	mov	r17,r4
 840bd24:	28002926 	beq	r5,zero,840bdcc <_fclose_r+0xc4>
 840bd28:	84089740 	call	8408974 <__sfp_lock_acquire>
 840bd2c:	88000226 	beq	r17,zero,840bd38 <_fclose_r+0x30>
 840bd30:	88800e17 	ldw	r2,56(r17)
 840bd34:	10002d26 	beq	r2,zero,840bdec <_fclose_r+0xe4>
 840bd38:	8080030f 	ldh	r2,12(r16)
 840bd3c:	10002226 	beq	r2,zero,840bdc8 <_fclose_r+0xc0>
 840bd40:	8809883a 	mov	r4,r17
 840bd44:	800b883a 	mov	r5,r16
 840bd48:	84086ec0 	call	84086ec <_fflush_r>
 840bd4c:	1025883a 	mov	r18,r2
 840bd50:	80800b17 	ldw	r2,44(r16)
 840bd54:	10000426 	beq	r2,zero,840bd68 <_fclose_r+0x60>
 840bd58:	81400717 	ldw	r5,28(r16)
 840bd5c:	8809883a 	mov	r4,r17
 840bd60:	103ee83a 	callr	r2
 840bd64:	10002a16 	blt	r2,zero,840be10 <_fclose_r+0x108>
 840bd68:	8080030b 	ldhu	r2,12(r16)
 840bd6c:	1080200c 	andi	r2,r2,128
 840bd70:	1000231e 	bne	r2,zero,840be00 <_fclose_r+0xf8>
 840bd74:	81400c17 	ldw	r5,48(r16)
 840bd78:	28000526 	beq	r5,zero,840bd90 <_fclose_r+0x88>
 840bd7c:	80801004 	addi	r2,r16,64
 840bd80:	28800226 	beq	r5,r2,840bd8c <_fclose_r+0x84>
 840bd84:	8809883a 	mov	r4,r17
 840bd88:	8408d080 	call	8408d08 <_free_r>
 840bd8c:	80000c15 	stw	zero,48(r16)
 840bd90:	81401117 	ldw	r5,68(r16)
 840bd94:	28000326 	beq	r5,zero,840bda4 <_fclose_r+0x9c>
 840bd98:	8809883a 	mov	r4,r17
 840bd9c:	8408d080 	call	8408d08 <_free_r>
 840bda0:	80001115 	stw	zero,68(r16)
 840bda4:	8000030d 	sth	zero,12(r16)
 840bda8:	84089780 	call	8408978 <__sfp_lock_release>
 840bdac:	9005883a 	mov	r2,r18
 840bdb0:	dfc00317 	ldw	ra,12(sp)
 840bdb4:	dc800217 	ldw	r18,8(sp)
 840bdb8:	dc400117 	ldw	r17,4(sp)
 840bdbc:	dc000017 	ldw	r16,0(sp)
 840bdc0:	dec00404 	addi	sp,sp,16
 840bdc4:	f800283a 	ret
 840bdc8:	84089780 	call	8408978 <__sfp_lock_release>
 840bdcc:	0025883a 	mov	r18,zero
 840bdd0:	9005883a 	mov	r2,r18
 840bdd4:	dfc00317 	ldw	ra,12(sp)
 840bdd8:	dc800217 	ldw	r18,8(sp)
 840bddc:	dc400117 	ldw	r17,4(sp)
 840bde0:	dc000017 	ldw	r16,0(sp)
 840bde4:	dec00404 	addi	sp,sp,16
 840bde8:	f800283a 	ret
 840bdec:	8809883a 	mov	r4,r17
 840bdf0:	84089840 	call	8408984 <__sinit>
 840bdf4:	8080030f 	ldh	r2,12(r16)
 840bdf8:	103fd11e 	bne	r2,zero,840bd40 <_fclose_r+0x38>
 840bdfc:	003ff206 	br	840bdc8 <_fclose_r+0xc0>
 840be00:	81400417 	ldw	r5,16(r16)
 840be04:	8809883a 	mov	r4,r17
 840be08:	8408d080 	call	8408d08 <_free_r>
 840be0c:	003fd906 	br	840bd74 <_fclose_r+0x6c>
 840be10:	04bfffc4 	movi	r18,-1
 840be14:	003fd406 	br	840bd68 <_fclose_r+0x60>

0840be18 <fclose>:
 840be18:	00821074 	movhi	r2,2113
 840be1c:	108e5204 	addi	r2,r2,14664
 840be20:	200b883a 	mov	r5,r4
 840be24:	11000017 	ldw	r4,0(r2)
 840be28:	840bd081 	jmpi	840bd08 <_fclose_r>

0840be2c <_fstat_r>:
 840be2c:	defffd04 	addi	sp,sp,-12
 840be30:	dc000015 	stw	r16,0(sp)
 840be34:	04021074 	movhi	r16,2113
 840be38:	84156404 	addi	r16,r16,21904
 840be3c:	dc400115 	stw	r17,4(sp)
 840be40:	80000015 	stw	zero,0(r16)
 840be44:	2023883a 	mov	r17,r4
 840be48:	2809883a 	mov	r4,r5
 840be4c:	300b883a 	mov	r5,r6
 840be50:	dfc00215 	stw	ra,8(sp)
 840be54:	840d0080 	call	840d008 <fstat>
 840be58:	1007883a 	mov	r3,r2
 840be5c:	00bfffc4 	movi	r2,-1
 840be60:	18800626 	beq	r3,r2,840be7c <_fstat_r+0x50>
 840be64:	1805883a 	mov	r2,r3
 840be68:	dfc00217 	ldw	ra,8(sp)
 840be6c:	dc400117 	ldw	r17,4(sp)
 840be70:	dc000017 	ldw	r16,0(sp)
 840be74:	dec00304 	addi	sp,sp,12
 840be78:	f800283a 	ret
 840be7c:	80800017 	ldw	r2,0(r16)
 840be80:	103ff826 	beq	r2,zero,840be64 <_fstat_r+0x38>
 840be84:	88800015 	stw	r2,0(r17)
 840be88:	1805883a 	mov	r2,r3
 840be8c:	dfc00217 	ldw	ra,8(sp)
 840be90:	dc400117 	ldw	r17,4(sp)
 840be94:	dc000017 	ldw	r16,0(sp)
 840be98:	dec00304 	addi	sp,sp,12
 840be9c:	f800283a 	ret

0840bea0 <_isatty_r>:
 840bea0:	defffd04 	addi	sp,sp,-12
 840bea4:	dc000015 	stw	r16,0(sp)
 840bea8:	04021074 	movhi	r16,2113
 840beac:	84156404 	addi	r16,r16,21904
 840beb0:	dc400115 	stw	r17,4(sp)
 840beb4:	80000015 	stw	zero,0(r16)
 840beb8:	2023883a 	mov	r17,r4
 840bebc:	2809883a 	mov	r4,r5
 840bec0:	dfc00215 	stw	ra,8(sp)
 840bec4:	840d13c0 	call	840d13c <isatty>
 840bec8:	1007883a 	mov	r3,r2
 840becc:	00bfffc4 	movi	r2,-1
 840bed0:	18800626 	beq	r3,r2,840beec <_isatty_r+0x4c>
 840bed4:	1805883a 	mov	r2,r3
 840bed8:	dfc00217 	ldw	ra,8(sp)
 840bedc:	dc400117 	ldw	r17,4(sp)
 840bee0:	dc000017 	ldw	r16,0(sp)
 840bee4:	dec00304 	addi	sp,sp,12
 840bee8:	f800283a 	ret
 840beec:	80800017 	ldw	r2,0(r16)
 840bef0:	103ff826 	beq	r2,zero,840bed4 <_isatty_r+0x34>
 840bef4:	88800015 	stw	r2,0(r17)
 840bef8:	1805883a 	mov	r2,r3
 840befc:	dfc00217 	ldw	ra,8(sp)
 840bf00:	dc400117 	ldw	r17,4(sp)
 840bf04:	dc000017 	ldw	r16,0(sp)
 840bf08:	dec00304 	addi	sp,sp,12
 840bf0c:	f800283a 	ret

0840bf10 <_lseek_r>:
 840bf10:	defffd04 	addi	sp,sp,-12
 840bf14:	dc000015 	stw	r16,0(sp)
 840bf18:	04021074 	movhi	r16,2113
 840bf1c:	84156404 	addi	r16,r16,21904
 840bf20:	dc400115 	stw	r17,4(sp)
 840bf24:	80000015 	stw	zero,0(r16)
 840bf28:	2023883a 	mov	r17,r4
 840bf2c:	2809883a 	mov	r4,r5
 840bf30:	300b883a 	mov	r5,r6
 840bf34:	380d883a 	mov	r6,r7
 840bf38:	dfc00215 	stw	ra,8(sp)
 840bf3c:	840d3480 	call	840d348 <lseek>
 840bf40:	1007883a 	mov	r3,r2
 840bf44:	00bfffc4 	movi	r2,-1
 840bf48:	18800626 	beq	r3,r2,840bf64 <_lseek_r+0x54>
 840bf4c:	1805883a 	mov	r2,r3
 840bf50:	dfc00217 	ldw	ra,8(sp)
 840bf54:	dc400117 	ldw	r17,4(sp)
 840bf58:	dc000017 	ldw	r16,0(sp)
 840bf5c:	dec00304 	addi	sp,sp,12
 840bf60:	f800283a 	ret
 840bf64:	80800017 	ldw	r2,0(r16)
 840bf68:	103ff826 	beq	r2,zero,840bf4c <_lseek_r+0x3c>
 840bf6c:	88800015 	stw	r2,0(r17)
 840bf70:	1805883a 	mov	r2,r3
 840bf74:	dfc00217 	ldw	ra,8(sp)
 840bf78:	dc400117 	ldw	r17,4(sp)
 840bf7c:	dc000017 	ldw	r16,0(sp)
 840bf80:	dec00304 	addi	sp,sp,12
 840bf84:	f800283a 	ret

0840bf88 <_read_r>:
 840bf88:	defffd04 	addi	sp,sp,-12
 840bf8c:	dc000015 	stw	r16,0(sp)
 840bf90:	04021074 	movhi	r16,2113
 840bf94:	84156404 	addi	r16,r16,21904
 840bf98:	dc400115 	stw	r17,4(sp)
 840bf9c:	80000015 	stw	zero,0(r16)
 840bfa0:	2023883a 	mov	r17,r4
 840bfa4:	2809883a 	mov	r4,r5
 840bfa8:	300b883a 	mov	r5,r6
 840bfac:	380d883a 	mov	r6,r7
 840bfb0:	dfc00215 	stw	ra,8(sp)
 840bfb4:	840d5440 	call	840d544 <read>
 840bfb8:	1007883a 	mov	r3,r2
 840bfbc:	00bfffc4 	movi	r2,-1
 840bfc0:	18800626 	beq	r3,r2,840bfdc <_read_r+0x54>
 840bfc4:	1805883a 	mov	r2,r3
 840bfc8:	dfc00217 	ldw	ra,8(sp)
 840bfcc:	dc400117 	ldw	r17,4(sp)
 840bfd0:	dc000017 	ldw	r16,0(sp)
 840bfd4:	dec00304 	addi	sp,sp,12
 840bfd8:	f800283a 	ret
 840bfdc:	80800017 	ldw	r2,0(r16)
 840bfe0:	103ff826 	beq	r2,zero,840bfc4 <_read_r+0x3c>
 840bfe4:	88800015 	stw	r2,0(r17)
 840bfe8:	1805883a 	mov	r2,r3
 840bfec:	dfc00217 	ldw	ra,8(sp)
 840bff0:	dc400117 	ldw	r17,4(sp)
 840bff4:	dc000017 	ldw	r16,0(sp)
 840bff8:	dec00304 	addi	sp,sp,12
 840bffc:	f800283a 	ret

0840c000 <__udivdi3>:
 840c000:	defff004 	addi	sp,sp,-64
 840c004:	2005883a 	mov	r2,r4
 840c008:	3011883a 	mov	r8,r6
 840c00c:	df000e15 	stw	fp,56(sp)
 840c010:	dd000a15 	stw	r20,40(sp)
 840c014:	dc000615 	stw	r16,24(sp)
 840c018:	dfc00f15 	stw	ra,60(sp)
 840c01c:	ddc00d15 	stw	r23,52(sp)
 840c020:	dd800c15 	stw	r22,48(sp)
 840c024:	dd400b15 	stw	r21,44(sp)
 840c028:	dcc00915 	stw	r19,36(sp)
 840c02c:	dc800815 	stw	r18,32(sp)
 840c030:	dc400715 	stw	r17,28(sp)
 840c034:	4021883a 	mov	r16,r8
 840c038:	1039883a 	mov	fp,r2
 840c03c:	2829883a 	mov	r20,r5
 840c040:	38003b1e 	bne	r7,zero,840c130 <__udivdi3+0x130>
 840c044:	2a005c36 	bltu	r5,r8,840c1b8 <__udivdi3+0x1b8>
 840c048:	4000a626 	beq	r8,zero,840c2e4 <__udivdi3+0x2e4>
 840c04c:	00bfffd4 	movui	r2,65535
 840c050:	14009e36 	bltu	r2,r16,840c2cc <__udivdi3+0x2cc>
 840c054:	00803fc4 	movi	r2,255
 840c058:	14013d36 	bltu	r2,r16,840c550 <__udivdi3+0x550>
 840c05c:	000b883a 	mov	r5,zero
 840c060:	0005883a 	mov	r2,zero
 840c064:	8084d83a 	srl	r2,r16,r2
 840c068:	01021074 	movhi	r4,2113
 840c06c:	21066204 	addi	r4,r4,6536
 840c070:	01800804 	movi	r6,32
 840c074:	1105883a 	add	r2,r2,r4
 840c078:	10c00003 	ldbu	r3,0(r2)
 840c07c:	28c7883a 	add	r3,r5,r3
 840c080:	30edc83a 	sub	r22,r6,r3
 840c084:	b000ee1e 	bne	r22,zero,840c440 <__udivdi3+0x440>
 840c088:	802ad43a 	srli	r21,r16,16
 840c08c:	00800044 	movi	r2,1
 840c090:	a423c83a 	sub	r17,r20,r16
 840c094:	85ffffcc 	andi	r23,r16,65535
 840c098:	d8800315 	stw	r2,12(sp)
 840c09c:	8809883a 	mov	r4,r17
 840c0a0:	a80b883a 	mov	r5,r21
 840c0a4:	84043d40 	call	84043d4 <__udivsi3>
 840c0a8:	8809883a 	mov	r4,r17
 840c0ac:	a80b883a 	mov	r5,r21
 840c0b0:	102d883a 	mov	r22,r2
 840c0b4:	84043dc0 	call	84043dc <__umodsi3>
 840c0b8:	1004943a 	slli	r2,r2,16
 840c0bc:	e006d43a 	srli	r3,fp,16
 840c0c0:	bda3383a 	mul	r17,r23,r22
 840c0c4:	10c4b03a 	or	r2,r2,r3
 840c0c8:	1440042e 	bgeu	r2,r17,840c0dc <__udivdi3+0xdc>
 840c0cc:	1405883a 	add	r2,r2,r16
 840c0d0:	b5bfffc4 	addi	r22,r22,-1
 840c0d4:	14000136 	bltu	r2,r16,840c0dc <__udivdi3+0xdc>
 840c0d8:	14413d36 	bltu	r2,r17,840c5d0 <__udivdi3+0x5d0>
 840c0dc:	1463c83a 	sub	r17,r2,r17
 840c0e0:	8809883a 	mov	r4,r17
 840c0e4:	a80b883a 	mov	r5,r21
 840c0e8:	84043d40 	call	84043d4 <__udivsi3>
 840c0ec:	8809883a 	mov	r4,r17
 840c0f0:	a80b883a 	mov	r5,r21
 840c0f4:	1029883a 	mov	r20,r2
 840c0f8:	84043dc0 	call	84043dc <__umodsi3>
 840c0fc:	1004943a 	slli	r2,r2,16
 840c100:	bd09383a 	mul	r4,r23,r20
 840c104:	e0ffffcc 	andi	r3,fp,65535
 840c108:	10c4b03a 	or	r2,r2,r3
 840c10c:	1100042e 	bgeu	r2,r4,840c120 <__udivdi3+0x120>
 840c110:	8085883a 	add	r2,r16,r2
 840c114:	a53fffc4 	addi	r20,r20,-1
 840c118:	14000136 	bltu	r2,r16,840c120 <__udivdi3+0x120>
 840c11c:	11012036 	bltu	r2,r4,840c5a0 <__udivdi3+0x5a0>
 840c120:	b004943a 	slli	r2,r22,16
 840c124:	d9000317 	ldw	r4,12(sp)
 840c128:	a084b03a 	or	r2,r20,r2
 840c12c:	00001506 	br	840c184 <__udivdi3+0x184>
 840c130:	380d883a 	mov	r6,r7
 840c134:	29c06236 	bltu	r5,r7,840c2c0 <__udivdi3+0x2c0>
 840c138:	00bfffd4 	movui	r2,65535
 840c13c:	11c05a36 	bltu	r2,r7,840c2a8 <__udivdi3+0x2a8>
 840c140:	00803fc4 	movi	r2,255
 840c144:	11c0fc36 	bltu	r2,r7,840c538 <__udivdi3+0x538>
 840c148:	000b883a 	mov	r5,zero
 840c14c:	0005883a 	mov	r2,zero
 840c150:	3084d83a 	srl	r2,r6,r2
 840c154:	01021074 	movhi	r4,2113
 840c158:	21066204 	addi	r4,r4,6536
 840c15c:	01c00804 	movi	r7,32
 840c160:	1105883a 	add	r2,r2,r4
 840c164:	10c00003 	ldbu	r3,0(r2)
 840c168:	28c7883a 	add	r3,r5,r3
 840c16c:	38efc83a 	sub	r23,r7,r3
 840c170:	b800691e 	bne	r23,zero,840c318 <__udivdi3+0x318>
 840c174:	35000136 	bltu	r6,r20,840c17c <__udivdi3+0x17c>
 840c178:	e4005136 	bltu	fp,r16,840c2c0 <__udivdi3+0x2c0>
 840c17c:	00800044 	movi	r2,1
 840c180:	0009883a 	mov	r4,zero
 840c184:	2007883a 	mov	r3,r4
 840c188:	dfc00f17 	ldw	ra,60(sp)
 840c18c:	df000e17 	ldw	fp,56(sp)
 840c190:	ddc00d17 	ldw	r23,52(sp)
 840c194:	dd800c17 	ldw	r22,48(sp)
 840c198:	dd400b17 	ldw	r21,44(sp)
 840c19c:	dd000a17 	ldw	r20,40(sp)
 840c1a0:	dcc00917 	ldw	r19,36(sp)
 840c1a4:	dc800817 	ldw	r18,32(sp)
 840c1a8:	dc400717 	ldw	r17,28(sp)
 840c1ac:	dc000617 	ldw	r16,24(sp)
 840c1b0:	dec01004 	addi	sp,sp,64
 840c1b4:	f800283a 	ret
 840c1b8:	00bfffd4 	movui	r2,65535
 840c1bc:	12005036 	bltu	r2,r8,840c300 <__udivdi3+0x300>
 840c1c0:	00803fc4 	movi	r2,255
 840c1c4:	1200e836 	bltu	r2,r8,840c568 <__udivdi3+0x568>
 840c1c8:	000b883a 	mov	r5,zero
 840c1cc:	0005883a 	mov	r2,zero
 840c1d0:	8084d83a 	srl	r2,r16,r2
 840c1d4:	01021074 	movhi	r4,2113
 840c1d8:	21066204 	addi	r4,r4,6536
 840c1dc:	01800804 	movi	r6,32
 840c1e0:	1105883a 	add	r2,r2,r4
 840c1e4:	10c00003 	ldbu	r3,0(r2)
 840c1e8:	28c7883a 	add	r3,r5,r3
 840c1ec:	30cbc83a 	sub	r5,r6,r3
 840c1f0:	28000626 	beq	r5,zero,840c20c <__udivdi3+0x20c>
 840c1f4:	3145c83a 	sub	r2,r6,r5
 840c1f8:	e084d83a 	srl	r2,fp,r2
 840c1fc:	a146983a 	sll	r3,r20,r5
 840c200:	e178983a 	sll	fp,fp,r5
 840c204:	8160983a 	sll	r16,r16,r5
 840c208:	18a8b03a 	or	r20,r3,r2
 840c20c:	802ad43a 	srli	r21,r16,16
 840c210:	a009883a 	mov	r4,r20
 840c214:	85ffffcc 	andi	r23,r16,65535
 840c218:	a80b883a 	mov	r5,r21
 840c21c:	84043d40 	call	84043d4 <__udivsi3>
 840c220:	a009883a 	mov	r4,r20
 840c224:	a80b883a 	mov	r5,r21
 840c228:	102d883a 	mov	r22,r2
 840c22c:	84043dc0 	call	84043dc <__umodsi3>
 840c230:	1004943a 	slli	r2,r2,16
 840c234:	e006d43a 	srli	r3,fp,16
 840c238:	bda3383a 	mul	r17,r23,r22
 840c23c:	10c4b03a 	or	r2,r2,r3
 840c240:	1440042e 	bgeu	r2,r17,840c254 <__udivdi3+0x254>
 840c244:	1405883a 	add	r2,r2,r16
 840c248:	b5bfffc4 	addi	r22,r22,-1
 840c24c:	14000136 	bltu	r2,r16,840c254 <__udivdi3+0x254>
 840c250:	1440d536 	bltu	r2,r17,840c5a8 <__udivdi3+0x5a8>
 840c254:	1463c83a 	sub	r17,r2,r17
 840c258:	8809883a 	mov	r4,r17
 840c25c:	a80b883a 	mov	r5,r21
 840c260:	84043d40 	call	84043d4 <__udivsi3>
 840c264:	8809883a 	mov	r4,r17
 840c268:	a80b883a 	mov	r5,r21
 840c26c:	1029883a 	mov	r20,r2
 840c270:	84043dc0 	call	84043dc <__umodsi3>
 840c274:	1004943a 	slli	r2,r2,16
 840c278:	bd09383a 	mul	r4,r23,r20
 840c27c:	e0ffffcc 	andi	r3,fp,65535
 840c280:	10c4b03a 	or	r2,r2,r3
 840c284:	1100042e 	bgeu	r2,r4,840c298 <__udivdi3+0x298>
 840c288:	8085883a 	add	r2,r16,r2
 840c28c:	a53fffc4 	addi	r20,r20,-1
 840c290:	14000136 	bltu	r2,r16,840c298 <__udivdi3+0x298>
 840c294:	1100c736 	bltu	r2,r4,840c5b4 <__udivdi3+0x5b4>
 840c298:	b004943a 	slli	r2,r22,16
 840c29c:	0009883a 	mov	r4,zero
 840c2a0:	a084b03a 	or	r2,r20,r2
 840c2a4:	003fb706 	br	840c184 <__udivdi3+0x184>
 840c2a8:	00804034 	movhi	r2,256
 840c2ac:	10bfffc4 	addi	r2,r2,-1
 840c2b0:	11c0a436 	bltu	r2,r7,840c544 <__udivdi3+0x544>
 840c2b4:	01400404 	movi	r5,16
 840c2b8:	2805883a 	mov	r2,r5
 840c2bc:	003fa406 	br	840c150 <__udivdi3+0x150>
 840c2c0:	0005883a 	mov	r2,zero
 840c2c4:	0009883a 	mov	r4,zero
 840c2c8:	003fae06 	br	840c184 <__udivdi3+0x184>
 840c2cc:	00804034 	movhi	r2,256
 840c2d0:	10bfffc4 	addi	r2,r2,-1
 840c2d4:	1400a136 	bltu	r2,r16,840c55c <__udivdi3+0x55c>
 840c2d8:	01400404 	movi	r5,16
 840c2dc:	2805883a 	mov	r2,r5
 840c2e0:	003f6006 	br	840c064 <__udivdi3+0x64>
 840c2e4:	01000044 	movi	r4,1
 840c2e8:	000b883a 	mov	r5,zero
 840c2ec:	84043d40 	call	84043d4 <__udivsi3>
 840c2f0:	1021883a 	mov	r16,r2
 840c2f4:	00bfffd4 	movui	r2,65535
 840c2f8:	143ff436 	bltu	r2,r16,840c2cc <__udivdi3+0x2cc>
 840c2fc:	003f5506 	br	840c054 <__udivdi3+0x54>
 840c300:	00804034 	movhi	r2,256
 840c304:	10bfffc4 	addi	r2,r2,-1
 840c308:	12009a36 	bltu	r2,r8,840c574 <__udivdi3+0x574>
 840c30c:	01400404 	movi	r5,16
 840c310:	2805883a 	mov	r2,r5
 840c314:	003fae06 	br	840c1d0 <__udivdi3+0x1d0>
 840c318:	3dc5c83a 	sub	r2,r7,r23
 840c31c:	35c8983a 	sll	r4,r6,r23
 840c320:	8086d83a 	srl	r3,r16,r2
 840c324:	a0a2d83a 	srl	r17,r20,r2
 840c328:	e084d83a 	srl	r2,fp,r2
 840c32c:	20eab03a 	or	r21,r4,r3
 840c330:	a82cd43a 	srli	r22,r21,16
 840c334:	a5c6983a 	sll	r3,r20,r23
 840c338:	8809883a 	mov	r4,r17
 840c33c:	b00b883a 	mov	r5,r22
 840c340:	1886b03a 	or	r3,r3,r2
 840c344:	d8c00215 	stw	r3,8(sp)
 840c348:	84043d40 	call	84043d4 <__udivsi3>
 840c34c:	8809883a 	mov	r4,r17
 840c350:	b00b883a 	mov	r5,r22
 840c354:	1029883a 	mov	r20,r2
 840c358:	84043dc0 	call	84043dc <__umodsi3>
 840c35c:	a8ffffcc 	andi	r3,r21,65535
 840c360:	d8c00515 	stw	r3,20(sp)
 840c364:	d9000217 	ldw	r4,8(sp)
 840c368:	d9400517 	ldw	r5,20(sp)
 840c36c:	1004943a 	slli	r2,r2,16
 840c370:	2006d43a 	srli	r3,r4,16
 840c374:	85e0983a 	sll	r16,r16,r23
 840c378:	2d23383a 	mul	r17,r5,r20
 840c37c:	10c4b03a 	or	r2,r2,r3
 840c380:	dc000015 	stw	r16,0(sp)
 840c384:	1440032e 	bgeu	r2,r17,840c394 <__udivdi3+0x394>
 840c388:	1545883a 	add	r2,r2,r21
 840c38c:	a53fffc4 	addi	r20,r20,-1
 840c390:	15407f2e 	bgeu	r2,r21,840c590 <__udivdi3+0x590>
 840c394:	1463c83a 	sub	r17,r2,r17
 840c398:	8809883a 	mov	r4,r17
 840c39c:	b00b883a 	mov	r5,r22
 840c3a0:	84043d40 	call	84043d4 <__udivsi3>
 840c3a4:	8809883a 	mov	r4,r17
 840c3a8:	b00b883a 	mov	r5,r22
 840c3ac:	1021883a 	mov	r16,r2
 840c3b0:	84043dc0 	call	84043dc <__umodsi3>
 840c3b4:	d8c00517 	ldw	r3,20(sp)
 840c3b8:	d9000217 	ldw	r4,8(sp)
 840c3bc:	1004943a 	slli	r2,r2,16
 840c3c0:	1c0f383a 	mul	r7,r3,r16
 840c3c4:	20ffffcc 	andi	r3,r4,65535
 840c3c8:	10e2b03a 	or	r17,r2,r3
 840c3cc:	89c0032e 	bgeu	r17,r7,840c3dc <__udivdi3+0x3dc>
 840c3d0:	8d63883a 	add	r17,r17,r21
 840c3d4:	843fffc4 	addi	r16,r16,-1
 840c3d8:	8d40692e 	bgeu	r17,r21,840c580 <__udivdi3+0x580>
 840c3dc:	a008943a 	slli	r4,r20,16
 840c3e0:	d9400017 	ldw	r5,0(sp)
 840c3e4:	89e3c83a 	sub	r17,r17,r7
 840c3e8:	8110b03a 	or	r8,r16,r4
 840c3ec:	280cd43a 	srli	r6,r5,16
 840c3f0:	28ffffcc 	andi	r3,r5,65535
 840c3f4:	40bfffcc 	andi	r2,r8,65535
 840c3f8:	400ad43a 	srli	r5,r8,16
 840c3fc:	10d3383a 	mul	r9,r2,r3
 840c400:	1185383a 	mul	r2,r2,r6
 840c404:	28c7383a 	mul	r3,r5,r3
 840c408:	4808d43a 	srli	r4,r9,16
 840c40c:	298b383a 	mul	r5,r5,r6
 840c410:	10c5883a 	add	r2,r2,r3
 840c414:	2089883a 	add	r4,r4,r2
 840c418:	20c0022e 	bgeu	r4,r3,840c424 <__udivdi3+0x424>
 840c41c:	00800074 	movhi	r2,1
 840c420:	288b883a 	add	r5,r5,r2
 840c424:	2004d43a 	srli	r2,r4,16
 840c428:	288b883a 	add	r5,r5,r2
 840c42c:	89403f36 	bltu	r17,r5,840c52c <__udivdi3+0x52c>
 840c430:	89403926 	beq	r17,r5,840c518 <__udivdi3+0x518>
 840c434:	4005883a 	mov	r2,r8
 840c438:	0009883a 	mov	r4,zero
 840c43c:	003f5106 	br	840c184 <__udivdi3+0x184>
 840c440:	85a0983a 	sll	r16,r16,r22
 840c444:	3585c83a 	sub	r2,r6,r22
 840c448:	a0a2d83a 	srl	r17,r20,r2
 840c44c:	802ad43a 	srli	r21,r16,16
 840c450:	e084d83a 	srl	r2,fp,r2
 840c454:	a586983a 	sll	r3,r20,r22
 840c458:	8809883a 	mov	r4,r17
 840c45c:	a80b883a 	mov	r5,r21
 840c460:	1886b03a 	or	r3,r3,r2
 840c464:	d8c00115 	stw	r3,4(sp)
 840c468:	84043d40 	call	84043d4 <__udivsi3>
 840c46c:	8809883a 	mov	r4,r17
 840c470:	a80b883a 	mov	r5,r21
 840c474:	d8800415 	stw	r2,16(sp)
 840c478:	84043dc0 	call	84043dc <__umodsi3>
 840c47c:	d9000117 	ldw	r4,4(sp)
 840c480:	d9400417 	ldw	r5,16(sp)
 840c484:	1004943a 	slli	r2,r2,16
 840c488:	85ffffcc 	andi	r23,r16,65535
 840c48c:	2006d43a 	srli	r3,r4,16
 840c490:	b963383a 	mul	r17,r23,r5
 840c494:	10c4b03a 	or	r2,r2,r3
 840c498:	1440042e 	bgeu	r2,r17,840c4ac <__udivdi3+0x4ac>
 840c49c:	297fffc4 	addi	r5,r5,-1
 840c4a0:	1405883a 	add	r2,r2,r16
 840c4a4:	d9400415 	stw	r5,16(sp)
 840c4a8:	1400442e 	bgeu	r2,r16,840c5bc <__udivdi3+0x5bc>
 840c4ac:	1463c83a 	sub	r17,r2,r17
 840c4b0:	8809883a 	mov	r4,r17
 840c4b4:	a80b883a 	mov	r5,r21
 840c4b8:	84043d40 	call	84043d4 <__udivsi3>
 840c4bc:	8809883a 	mov	r4,r17
 840c4c0:	a80b883a 	mov	r5,r21
 840c4c4:	1029883a 	mov	r20,r2
 840c4c8:	84043dc0 	call	84043dc <__umodsi3>
 840c4cc:	d9400117 	ldw	r5,4(sp)
 840c4d0:	1004943a 	slli	r2,r2,16
 840c4d4:	bd09383a 	mul	r4,r23,r20
 840c4d8:	28ffffcc 	andi	r3,r5,65535
 840c4dc:	10c6b03a 	or	r3,r2,r3
 840c4e0:	1900062e 	bgeu	r3,r4,840c4fc <__udivdi3+0x4fc>
 840c4e4:	1c07883a 	add	r3,r3,r16
 840c4e8:	a53fffc4 	addi	r20,r20,-1
 840c4ec:	1c000336 	bltu	r3,r16,840c4fc <__udivdi3+0x4fc>
 840c4f0:	1900022e 	bgeu	r3,r4,840c4fc <__udivdi3+0x4fc>
 840c4f4:	a53fffc4 	addi	r20,r20,-1
 840c4f8:	1c07883a 	add	r3,r3,r16
 840c4fc:	d9400417 	ldw	r5,16(sp)
 840c500:	e5b8983a 	sll	fp,fp,r22
 840c504:	1923c83a 	sub	r17,r3,r4
 840c508:	2804943a 	slli	r2,r5,16
 840c50c:	a0a8b03a 	or	r20,r20,r2
 840c510:	dd000315 	stw	r20,12(sp)
 840c514:	003ee106 	br	840c09c <__udivdi3+0x9c>
 840c518:	2004943a 	slli	r2,r4,16
 840c51c:	e5c8983a 	sll	r4,fp,r23
 840c520:	48ffffcc 	andi	r3,r9,65535
 840c524:	10c5883a 	add	r2,r2,r3
 840c528:	20bfc22e 	bgeu	r4,r2,840c434 <__udivdi3+0x434>
 840c52c:	40bfffc4 	addi	r2,r8,-1
 840c530:	0009883a 	mov	r4,zero
 840c534:	003f1306 	br	840c184 <__udivdi3+0x184>
 840c538:	01400204 	movi	r5,8
 840c53c:	2805883a 	mov	r2,r5
 840c540:	003f0306 	br	840c150 <__udivdi3+0x150>
 840c544:	01400604 	movi	r5,24
 840c548:	2805883a 	mov	r2,r5
 840c54c:	003f0006 	br	840c150 <__udivdi3+0x150>
 840c550:	01400204 	movi	r5,8
 840c554:	2805883a 	mov	r2,r5
 840c558:	003ec206 	br	840c064 <__udivdi3+0x64>
 840c55c:	01400604 	movi	r5,24
 840c560:	2805883a 	mov	r2,r5
 840c564:	003ebf06 	br	840c064 <__udivdi3+0x64>
 840c568:	01400204 	movi	r5,8
 840c56c:	2805883a 	mov	r2,r5
 840c570:	003f1706 	br	840c1d0 <__udivdi3+0x1d0>
 840c574:	01400604 	movi	r5,24
 840c578:	2805883a 	mov	r2,r5
 840c57c:	003f1406 	br	840c1d0 <__udivdi3+0x1d0>
 840c580:	89ff962e 	bgeu	r17,r7,840c3dc <__udivdi3+0x3dc>
 840c584:	8d63883a 	add	r17,r17,r21
 840c588:	843fffc4 	addi	r16,r16,-1
 840c58c:	003f9306 	br	840c3dc <__udivdi3+0x3dc>
 840c590:	147f802e 	bgeu	r2,r17,840c394 <__udivdi3+0x394>
 840c594:	a53fffc4 	addi	r20,r20,-1
 840c598:	1545883a 	add	r2,r2,r21
 840c59c:	003f7d06 	br	840c394 <__udivdi3+0x394>
 840c5a0:	a53fffc4 	addi	r20,r20,-1
 840c5a4:	003ede06 	br	840c120 <__udivdi3+0x120>
 840c5a8:	b5bfffc4 	addi	r22,r22,-1
 840c5ac:	1405883a 	add	r2,r2,r16
 840c5b0:	003f2806 	br	840c254 <__udivdi3+0x254>
 840c5b4:	a53fffc4 	addi	r20,r20,-1
 840c5b8:	003f3706 	br	840c298 <__udivdi3+0x298>
 840c5bc:	147fbb2e 	bgeu	r2,r17,840c4ac <__udivdi3+0x4ac>
 840c5c0:	297fffc4 	addi	r5,r5,-1
 840c5c4:	1405883a 	add	r2,r2,r16
 840c5c8:	d9400415 	stw	r5,16(sp)
 840c5cc:	003fb706 	br	840c4ac <__udivdi3+0x4ac>
 840c5d0:	b5bfffc4 	addi	r22,r22,-1
 840c5d4:	1405883a 	add	r2,r2,r16
 840c5d8:	003ec006 	br	840c0dc <__udivdi3+0xdc>

0840c5dc <__umoddi3>:
 840c5dc:	defff104 	addi	sp,sp,-60
 840c5e0:	dd800b15 	stw	r22,44(sp)
 840c5e4:	dd000915 	stw	r20,36(sp)
 840c5e8:	dc000515 	stw	r16,20(sp)
 840c5ec:	dfc00e15 	stw	ra,56(sp)
 840c5f0:	df000d15 	stw	fp,52(sp)
 840c5f4:	ddc00c15 	stw	r23,48(sp)
 840c5f8:	dd400a15 	stw	r21,40(sp)
 840c5fc:	dcc00815 	stw	r19,32(sp)
 840c600:	dc800715 	stw	r18,28(sp)
 840c604:	dc400615 	stw	r17,24(sp)
 840c608:	3021883a 	mov	r16,r6
 840c60c:	202d883a 	mov	r22,r4
 840c610:	2829883a 	mov	r20,r5
 840c614:	38002b1e 	bne	r7,zero,840c6c4 <__umoddi3+0xe8>
 840c618:	29805036 	bltu	r5,r6,840c75c <__umoddi3+0x180>
 840c61c:	30008a26 	beq	r6,zero,840c848 <__umoddi3+0x26c>
 840c620:	00bfffd4 	movui	r2,65535
 840c624:	14008236 	bltu	r2,r16,840c830 <__umoddi3+0x254>
 840c628:	00803fc4 	movi	r2,255
 840c62c:	14013636 	bltu	r2,r16,840cb08 <__umoddi3+0x52c>
 840c630:	000b883a 	mov	r5,zero
 840c634:	0005883a 	mov	r2,zero
 840c638:	8084d83a 	srl	r2,r16,r2
 840c63c:	01021074 	movhi	r4,2113
 840c640:	21066204 	addi	r4,r4,6536
 840c644:	01800804 	movi	r6,32
 840c648:	1105883a 	add	r2,r2,r4
 840c64c:	10c00003 	ldbu	r3,0(r2)
 840c650:	28c7883a 	add	r3,r5,r3
 840c654:	30efc83a 	sub	r23,r6,r3
 840c658:	b800941e 	bne	r23,zero,840c8ac <__umoddi3+0x2d0>
 840c65c:	802ad43a 	srli	r21,r16,16
 840c660:	a423c83a 	sub	r17,r20,r16
 840c664:	0039883a 	mov	fp,zero
 840c668:	853fffcc 	andi	r20,r16,65535
 840c66c:	8809883a 	mov	r4,r17
 840c670:	a80b883a 	mov	r5,r21
 840c674:	84043d40 	call	84043d4 <__udivsi3>
 840c678:	8809883a 	mov	r4,r17
 840c67c:	a80b883a 	mov	r5,r21
 840c680:	a0a3383a 	mul	r17,r20,r2
 840c684:	84043dc0 	call	84043dc <__umodsi3>
 840c688:	1004943a 	slli	r2,r2,16
 840c68c:	b006d43a 	srli	r3,r22,16
 840c690:	10c4b03a 	or	r2,r2,r3
 840c694:	1440032e 	bgeu	r2,r17,840c6a4 <__umoddi3+0xc8>
 840c698:	1405883a 	add	r2,r2,r16
 840c69c:	14000136 	bltu	r2,r16,840c6a4 <__umoddi3+0xc8>
 840c6a0:	14413536 	bltu	r2,r17,840cb78 <__umoddi3+0x59c>
 840c6a4:	1463c83a 	sub	r17,r2,r17
 840c6a8:	8809883a 	mov	r4,r17
 840c6ac:	a80b883a 	mov	r5,r21
 840c6b0:	84043d40 	call	84043d4 <__udivsi3>
 840c6b4:	8809883a 	mov	r4,r17
 840c6b8:	a0a3383a 	mul	r17,r20,r2
 840c6bc:	a80b883a 	mov	r5,r21
 840c6c0:	00004d06 	br	840c7f8 <__umoddi3+0x21c>
 840c6c4:	380d883a 	mov	r6,r7
 840c6c8:	29c0102e 	bgeu	r5,r7,840c70c <__umoddi3+0x130>
 840c6cc:	2011883a 	mov	r8,r4
 840c6d0:	2813883a 	mov	r9,r5
 840c6d4:	4005883a 	mov	r2,r8
 840c6d8:	4807883a 	mov	r3,r9
 840c6dc:	dfc00e17 	ldw	ra,56(sp)
 840c6e0:	df000d17 	ldw	fp,52(sp)
 840c6e4:	ddc00c17 	ldw	r23,48(sp)
 840c6e8:	dd800b17 	ldw	r22,44(sp)
 840c6ec:	dd400a17 	ldw	r21,40(sp)
 840c6f0:	dd000917 	ldw	r20,36(sp)
 840c6f4:	dcc00817 	ldw	r19,32(sp)
 840c6f8:	dc800717 	ldw	r18,28(sp)
 840c6fc:	dc400617 	ldw	r17,24(sp)
 840c700:	dc000517 	ldw	r16,20(sp)
 840c704:	dec00f04 	addi	sp,sp,60
 840c708:	f800283a 	ret
 840c70c:	00bfffd4 	movui	r2,65535
 840c710:	11c05a36 	bltu	r2,r7,840c87c <__umoddi3+0x2a0>
 840c714:	00803fc4 	movi	r2,255
 840c718:	11c0fe36 	bltu	r2,r7,840cb14 <__umoddi3+0x538>
 840c71c:	000b883a 	mov	r5,zero
 840c720:	0005883a 	mov	r2,zero
 840c724:	3084d83a 	srl	r2,r6,r2
 840c728:	01021074 	movhi	r4,2113
 840c72c:	21066204 	addi	r4,r4,6536
 840c730:	01c00804 	movi	r7,32
 840c734:	1105883a 	add	r2,r2,r4
 840c738:	10c00003 	ldbu	r3,0(r2)
 840c73c:	28c7883a 	add	r3,r5,r3
 840c740:	38ebc83a 	sub	r21,r7,r3
 840c744:	a800851e 	bne	r21,zero,840c95c <__umoddi3+0x380>
 840c748:	35005236 	bltu	r6,r20,840c894 <__umoddi3+0x2b8>
 840c74c:	b400512e 	bgeu	r22,r16,840c894 <__umoddi3+0x2b8>
 840c750:	b011883a 	mov	r8,r22
 840c754:	a013883a 	mov	r9,r20
 840c758:	003fde06 	br	840c6d4 <__umoddi3+0xf8>
 840c75c:	00bfffd4 	movui	r2,65535
 840c760:	11804036 	bltu	r2,r6,840c864 <__umoddi3+0x288>
 840c764:	00803fc4 	movi	r2,255
 840c768:	1180ed36 	bltu	r2,r6,840cb20 <__umoddi3+0x544>
 840c76c:	000b883a 	mov	r5,zero
 840c770:	0005883a 	mov	r2,zero
 840c774:	8084d83a 	srl	r2,r16,r2
 840c778:	01021074 	movhi	r4,2113
 840c77c:	21066204 	addi	r4,r4,6536
 840c780:	01800804 	movi	r6,32
 840c784:	1105883a 	add	r2,r2,r4
 840c788:	10c00003 	ldbu	r3,0(r2)
 840c78c:	28c7883a 	add	r3,r5,r3
 840c790:	30c7c83a 	sub	r3,r6,r3
 840c794:	1800bf1e 	bne	r3,zero,840ca94 <__umoddi3+0x4b8>
 840c798:	0039883a 	mov	fp,zero
 840c79c:	802ad43a 	srli	r21,r16,16
 840c7a0:	a009883a 	mov	r4,r20
 840c7a4:	85ffffcc 	andi	r23,r16,65535
 840c7a8:	a80b883a 	mov	r5,r21
 840c7ac:	84043d40 	call	84043d4 <__udivsi3>
 840c7b0:	a009883a 	mov	r4,r20
 840c7b4:	a80b883a 	mov	r5,r21
 840c7b8:	b8a3383a 	mul	r17,r23,r2
 840c7bc:	84043dc0 	call	84043dc <__umodsi3>
 840c7c0:	1004943a 	slli	r2,r2,16
 840c7c4:	b006d43a 	srli	r3,r22,16
 840c7c8:	10c4b03a 	or	r2,r2,r3
 840c7cc:	1440032e 	bgeu	r2,r17,840c7dc <__umoddi3+0x200>
 840c7d0:	1405883a 	add	r2,r2,r16
 840c7d4:	14000136 	bltu	r2,r16,840c7dc <__umoddi3+0x200>
 840c7d8:	1440e536 	bltu	r2,r17,840cb70 <__umoddi3+0x594>
 840c7dc:	1463c83a 	sub	r17,r2,r17
 840c7e0:	8809883a 	mov	r4,r17
 840c7e4:	a80b883a 	mov	r5,r21
 840c7e8:	84043d40 	call	84043d4 <__udivsi3>
 840c7ec:	8809883a 	mov	r4,r17
 840c7f0:	b8a3383a 	mul	r17,r23,r2
 840c7f4:	a80b883a 	mov	r5,r21
 840c7f8:	84043dc0 	call	84043dc <__umodsi3>
 840c7fc:	1004943a 	slli	r2,r2,16
 840c800:	b0ffffcc 	andi	r3,r22,65535
 840c804:	10c4b03a 	or	r2,r2,r3
 840c808:	1440042e 	bgeu	r2,r17,840c81c <__umoddi3+0x240>
 840c80c:	1405883a 	add	r2,r2,r16
 840c810:	14000236 	bltu	r2,r16,840c81c <__umoddi3+0x240>
 840c814:	1440012e 	bgeu	r2,r17,840c81c <__umoddi3+0x240>
 840c818:	1405883a 	add	r2,r2,r16
 840c81c:	1445c83a 	sub	r2,r2,r17
 840c820:	1724d83a 	srl	r18,r2,fp
 840c824:	0013883a 	mov	r9,zero
 840c828:	9011883a 	mov	r8,r18
 840c82c:	003fa906 	br	840c6d4 <__umoddi3+0xf8>
 840c830:	00804034 	movhi	r2,256
 840c834:	10bfffc4 	addi	r2,r2,-1
 840c838:	1400b036 	bltu	r2,r16,840cafc <__umoddi3+0x520>
 840c83c:	01400404 	movi	r5,16
 840c840:	2805883a 	mov	r2,r5
 840c844:	003f7c06 	br	840c638 <__umoddi3+0x5c>
 840c848:	01000044 	movi	r4,1
 840c84c:	000b883a 	mov	r5,zero
 840c850:	84043d40 	call	84043d4 <__udivsi3>
 840c854:	1021883a 	mov	r16,r2
 840c858:	00bfffd4 	movui	r2,65535
 840c85c:	143ff436 	bltu	r2,r16,840c830 <__umoddi3+0x254>
 840c860:	003f7106 	br	840c628 <__umoddi3+0x4c>
 840c864:	00804034 	movhi	r2,256
 840c868:	10bfffc4 	addi	r2,r2,-1
 840c86c:	1180af36 	bltu	r2,r6,840cb2c <__umoddi3+0x550>
 840c870:	01400404 	movi	r5,16
 840c874:	2805883a 	mov	r2,r5
 840c878:	003fbe06 	br	840c774 <__umoddi3+0x198>
 840c87c:	00804034 	movhi	r2,256
 840c880:	10bfffc4 	addi	r2,r2,-1
 840c884:	11c0ac36 	bltu	r2,r7,840cb38 <__umoddi3+0x55c>
 840c888:	01400404 	movi	r5,16
 840c88c:	2805883a 	mov	r2,r5
 840c890:	003fa406 	br	840c724 <__umoddi3+0x148>
 840c894:	b409c83a 	sub	r4,r22,r16
 840c898:	b105803a 	cmpltu	r2,r22,r4
 840c89c:	a187c83a 	sub	r3,r20,r6
 840c8a0:	18a9c83a 	sub	r20,r3,r2
 840c8a4:	202d883a 	mov	r22,r4
 840c8a8:	003fa906 	br	840c750 <__umoddi3+0x174>
 840c8ac:	85e0983a 	sll	r16,r16,r23
 840c8b0:	35c5c83a 	sub	r2,r6,r23
 840c8b4:	a0a2d83a 	srl	r17,r20,r2
 840c8b8:	802ad43a 	srli	r21,r16,16
 840c8bc:	b084d83a 	srl	r2,r22,r2
 840c8c0:	a5c6983a 	sll	r3,r20,r23
 840c8c4:	8809883a 	mov	r4,r17
 840c8c8:	a80b883a 	mov	r5,r21
 840c8cc:	1886b03a 	or	r3,r3,r2
 840c8d0:	d8c00115 	stw	r3,4(sp)
 840c8d4:	853fffcc 	andi	r20,r16,65535
 840c8d8:	84043d40 	call	84043d4 <__udivsi3>
 840c8dc:	8809883a 	mov	r4,r17
 840c8e0:	a80b883a 	mov	r5,r21
 840c8e4:	a0a3383a 	mul	r17,r20,r2
 840c8e8:	84043dc0 	call	84043dc <__umodsi3>
 840c8ec:	d9000117 	ldw	r4,4(sp)
 840c8f0:	1004943a 	slli	r2,r2,16
 840c8f4:	b839883a 	mov	fp,r23
 840c8f8:	2006d43a 	srli	r3,r4,16
 840c8fc:	10c4b03a 	or	r2,r2,r3
 840c900:	1440022e 	bgeu	r2,r17,840c90c <__umoddi3+0x330>
 840c904:	1405883a 	add	r2,r2,r16
 840c908:	1400962e 	bgeu	r2,r16,840cb64 <__umoddi3+0x588>
 840c90c:	1463c83a 	sub	r17,r2,r17
 840c910:	8809883a 	mov	r4,r17
 840c914:	a80b883a 	mov	r5,r21
 840c918:	84043d40 	call	84043d4 <__udivsi3>
 840c91c:	8809883a 	mov	r4,r17
 840c920:	a80b883a 	mov	r5,r21
 840c924:	a0a3383a 	mul	r17,r20,r2
 840c928:	84043dc0 	call	84043dc <__umodsi3>
 840c92c:	d9400117 	ldw	r5,4(sp)
 840c930:	1004943a 	slli	r2,r2,16
 840c934:	28ffffcc 	andi	r3,r5,65535
 840c938:	10c4b03a 	or	r2,r2,r3
 840c93c:	1440042e 	bgeu	r2,r17,840c950 <__umoddi3+0x374>
 840c940:	1405883a 	add	r2,r2,r16
 840c944:	14000236 	bltu	r2,r16,840c950 <__umoddi3+0x374>
 840c948:	1440012e 	bgeu	r2,r17,840c950 <__umoddi3+0x374>
 840c94c:	1405883a 	add	r2,r2,r16
 840c950:	b5ec983a 	sll	r22,r22,r23
 840c954:	1463c83a 	sub	r17,r2,r17
 840c958:	003f4406 	br	840c66c <__umoddi3+0x90>
 840c95c:	3d4fc83a 	sub	r7,r7,r21
 840c960:	3546983a 	sll	r3,r6,r21
 840c964:	81c4d83a 	srl	r2,r16,r7
 840c968:	a1e2d83a 	srl	r17,r20,r7
 840c96c:	a54c983a 	sll	r6,r20,r21
 840c970:	18aeb03a 	or	r23,r3,r2
 840c974:	b828d43a 	srli	r20,r23,16
 840c978:	b1c4d83a 	srl	r2,r22,r7
 840c97c:	8809883a 	mov	r4,r17
 840c980:	a00b883a 	mov	r5,r20
 840c984:	308cb03a 	or	r6,r6,r2
 840c988:	d9c00315 	stw	r7,12(sp)
 840c98c:	d9800215 	stw	r6,8(sp)
 840c990:	84043d40 	call	84043d4 <__udivsi3>
 840c994:	8809883a 	mov	r4,r17
 840c998:	a00b883a 	mov	r5,r20
 840c99c:	1039883a 	mov	fp,r2
 840c9a0:	84043dc0 	call	84043dc <__umodsi3>
 840c9a4:	b8ffffcc 	andi	r3,r23,65535
 840c9a8:	d8c00415 	stw	r3,16(sp)
 840c9ac:	d9000217 	ldw	r4,8(sp)
 840c9b0:	d9400417 	ldw	r5,16(sp)
 840c9b4:	1004943a 	slli	r2,r2,16
 840c9b8:	2006d43a 	srli	r3,r4,16
 840c9bc:	8560983a 	sll	r16,r16,r21
 840c9c0:	2f23383a 	mul	r17,r5,fp
 840c9c4:	10c4b03a 	or	r2,r2,r3
 840c9c8:	dc000015 	stw	r16,0(sp)
 840c9cc:	b56c983a 	sll	r22,r22,r21
 840c9d0:	1440032e 	bgeu	r2,r17,840c9e0 <__umoddi3+0x404>
 840c9d4:	15c5883a 	add	r2,r2,r23
 840c9d8:	e73fffc4 	addi	fp,fp,-1
 840c9dc:	15c05d2e 	bgeu	r2,r23,840cb54 <__umoddi3+0x578>
 840c9e0:	1463c83a 	sub	r17,r2,r17
 840c9e4:	8809883a 	mov	r4,r17
 840c9e8:	a00b883a 	mov	r5,r20
 840c9ec:	84043d40 	call	84043d4 <__udivsi3>
 840c9f0:	8809883a 	mov	r4,r17
 840c9f4:	a00b883a 	mov	r5,r20
 840c9f8:	1021883a 	mov	r16,r2
 840c9fc:	84043dc0 	call	84043dc <__umodsi3>
 840ca00:	d8c00417 	ldw	r3,16(sp)
 840ca04:	d9000217 	ldw	r4,8(sp)
 840ca08:	1004943a 	slli	r2,r2,16
 840ca0c:	1c23383a 	mul	r17,r3,r16
 840ca10:	20ffffcc 	andi	r3,r4,65535
 840ca14:	10ceb03a 	or	r7,r2,r3
 840ca18:	3c40032e 	bgeu	r7,r17,840ca28 <__umoddi3+0x44c>
 840ca1c:	3dcf883a 	add	r7,r7,r23
 840ca20:	843fffc4 	addi	r16,r16,-1
 840ca24:	3dc0472e 	bgeu	r7,r23,840cb44 <__umoddi3+0x568>
 840ca28:	e004943a 	slli	r2,fp,16
 840ca2c:	d9400017 	ldw	r5,0(sp)
 840ca30:	3c4fc83a 	sub	r7,r7,r17
 840ca34:	8084b03a 	or	r2,r16,r2
 840ca38:	28ffffcc 	andi	r3,r5,65535
 840ca3c:	280cd43a 	srli	r6,r5,16
 840ca40:	100ad43a 	srli	r5,r2,16
 840ca44:	10bfffcc 	andi	r2,r2,65535
 840ca48:	10d1383a 	mul	r8,r2,r3
 840ca4c:	28c7383a 	mul	r3,r5,r3
 840ca50:	1185383a 	mul	r2,r2,r6
 840ca54:	4008d43a 	srli	r4,r8,16
 840ca58:	298b383a 	mul	r5,r5,r6
 840ca5c:	10c5883a 	add	r2,r2,r3
 840ca60:	2089883a 	add	r4,r4,r2
 840ca64:	20c0022e 	bgeu	r4,r3,840ca70 <__umoddi3+0x494>
 840ca68:	00800074 	movhi	r2,1
 840ca6c:	288b883a 	add	r5,r5,r2
 840ca70:	2004d43a 	srli	r2,r4,16
 840ca74:	2008943a 	slli	r4,r4,16
 840ca78:	40ffffcc 	andi	r3,r8,65535
 840ca7c:	288b883a 	add	r5,r5,r2
 840ca80:	20c9883a 	add	r4,r4,r3
 840ca84:	39400b36 	bltu	r7,r5,840cab4 <__umoddi3+0x4d8>
 840ca88:	39403d26 	beq	r7,r5,840cb80 <__umoddi3+0x5a4>
 840ca8c:	394bc83a 	sub	r5,r7,r5
 840ca90:	00000f06 	br	840cad0 <__umoddi3+0x4f4>
 840ca94:	30c5c83a 	sub	r2,r6,r3
 840ca98:	1839883a 	mov	fp,r3
 840ca9c:	b084d83a 	srl	r2,r22,r2
 840caa0:	a0c6983a 	sll	r3,r20,r3
 840caa4:	8720983a 	sll	r16,r16,fp
 840caa8:	b72c983a 	sll	r22,r22,fp
 840caac:	18a8b03a 	or	r20,r3,r2
 840cab0:	003f3a06 	br	840c79c <__umoddi3+0x1c0>
 840cab4:	d8c00017 	ldw	r3,0(sp)
 840cab8:	20c5c83a 	sub	r2,r4,r3
 840cabc:	2089803a 	cmpltu	r4,r4,r2
 840cac0:	2dc7c83a 	sub	r3,r5,r23
 840cac4:	1907c83a 	sub	r3,r3,r4
 840cac8:	38cbc83a 	sub	r5,r7,r3
 840cacc:	1009883a 	mov	r4,r2
 840cad0:	b105c83a 	sub	r2,r22,r4
 840cad4:	b087803a 	cmpltu	r3,r22,r2
 840cad8:	28c7c83a 	sub	r3,r5,r3
 840cadc:	d9400317 	ldw	r5,12(sp)
 840cae0:	1544d83a 	srl	r2,r2,r21
 840cae4:	1948983a 	sll	r4,r3,r5
 840cae8:	1d46d83a 	srl	r3,r3,r21
 840caec:	20a4b03a 	or	r18,r4,r2
 840caf0:	9011883a 	mov	r8,r18
 840caf4:	1813883a 	mov	r9,r3
 840caf8:	003ef606 	br	840c6d4 <__umoddi3+0xf8>
 840cafc:	01400604 	movi	r5,24
 840cb00:	2805883a 	mov	r2,r5
 840cb04:	003ecc06 	br	840c638 <__umoddi3+0x5c>
 840cb08:	01400204 	movi	r5,8
 840cb0c:	2805883a 	mov	r2,r5
 840cb10:	003ec906 	br	840c638 <__umoddi3+0x5c>
 840cb14:	01400204 	movi	r5,8
 840cb18:	2805883a 	mov	r2,r5
 840cb1c:	003f0106 	br	840c724 <__umoddi3+0x148>
 840cb20:	01400204 	movi	r5,8
 840cb24:	2805883a 	mov	r2,r5
 840cb28:	003f1206 	br	840c774 <__umoddi3+0x198>
 840cb2c:	01400604 	movi	r5,24
 840cb30:	2805883a 	mov	r2,r5
 840cb34:	003f0f06 	br	840c774 <__umoddi3+0x198>
 840cb38:	01400604 	movi	r5,24
 840cb3c:	2805883a 	mov	r2,r5
 840cb40:	003ef806 	br	840c724 <__umoddi3+0x148>
 840cb44:	3c7fb82e 	bgeu	r7,r17,840ca28 <__umoddi3+0x44c>
 840cb48:	843fffc4 	addi	r16,r16,-1
 840cb4c:	3dcf883a 	add	r7,r7,r23
 840cb50:	003fb506 	br	840ca28 <__umoddi3+0x44c>
 840cb54:	147fa22e 	bgeu	r2,r17,840c9e0 <__umoddi3+0x404>
 840cb58:	e73fffc4 	addi	fp,fp,-1
 840cb5c:	15c5883a 	add	r2,r2,r23
 840cb60:	003f9f06 	br	840c9e0 <__umoddi3+0x404>
 840cb64:	147f692e 	bgeu	r2,r17,840c90c <__umoddi3+0x330>
 840cb68:	1405883a 	add	r2,r2,r16
 840cb6c:	003f6706 	br	840c90c <__umoddi3+0x330>
 840cb70:	1405883a 	add	r2,r2,r16
 840cb74:	003f1906 	br	840c7dc <__umoddi3+0x200>
 840cb78:	1405883a 	add	r2,r2,r16
 840cb7c:	003ec906 	br	840c6a4 <__umoddi3+0xc8>
 840cb80:	b13fcc36 	bltu	r22,r4,840cab4 <__umoddi3+0x4d8>
 840cb84:	000b883a 	mov	r5,zero
 840cb88:	003fd106 	br	840cad0 <__umoddi3+0x4f4>

0840cb8c <__gedf2>:
 840cb8c:	deffef04 	addi	sp,sp,-68
 840cb90:	dc400f15 	stw	r17,60(sp)
 840cb94:	dc400404 	addi	r17,sp,16
 840cb98:	2005883a 	mov	r2,r4
 840cb9c:	2807883a 	mov	r3,r5
 840cba0:	dc000e15 	stw	r16,56(sp)
 840cba4:	d809883a 	mov	r4,sp
 840cba8:	880b883a 	mov	r5,r17
 840cbac:	dc000904 	addi	r16,sp,36
 840cbb0:	d8c00115 	stw	r3,4(sp)
 840cbb4:	d8800015 	stw	r2,0(sp)
 840cbb8:	d9800215 	stw	r6,8(sp)
 840cbbc:	dfc01015 	stw	ra,64(sp)
 840cbc0:	d9c00315 	stw	r7,12(sp)
 840cbc4:	8404b0c0 	call	8404b0c <__unpack_d>
 840cbc8:	d9000204 	addi	r4,sp,8
 840cbcc:	800b883a 	mov	r5,r16
 840cbd0:	8404b0c0 	call	8404b0c <__unpack_d>
 840cbd4:	d8800417 	ldw	r2,16(sp)
 840cbd8:	00c00044 	movi	r3,1
 840cbdc:	01bfffc4 	movi	r6,-1
 840cbe0:	1880062e 	bgeu	r3,r2,840cbfc <__gedf2+0x70>
 840cbe4:	d8800917 	ldw	r2,36(sp)
 840cbe8:	8809883a 	mov	r4,r17
 840cbec:	800b883a 	mov	r5,r16
 840cbf0:	1880022e 	bgeu	r3,r2,840cbfc <__gedf2+0x70>
 840cbf4:	8404c440 	call	8404c44 <__fpcmp_parts_d>
 840cbf8:	100d883a 	mov	r6,r2
 840cbfc:	3005883a 	mov	r2,r6
 840cc00:	dfc01017 	ldw	ra,64(sp)
 840cc04:	dc400f17 	ldw	r17,60(sp)
 840cc08:	dc000e17 	ldw	r16,56(sp)
 840cc0c:	dec01104 	addi	sp,sp,68
 840cc10:	f800283a 	ret

0840cc14 <__fixdfsi>:
 840cc14:	defff804 	addi	sp,sp,-32
 840cc18:	2005883a 	mov	r2,r4
 840cc1c:	2807883a 	mov	r3,r5
 840cc20:	d809883a 	mov	r4,sp
 840cc24:	d9400204 	addi	r5,sp,8
 840cc28:	d8c00115 	stw	r3,4(sp)
 840cc2c:	d8800015 	stw	r2,0(sp)
 840cc30:	dfc00715 	stw	ra,28(sp)
 840cc34:	8404b0c0 	call	8404b0c <__unpack_d>
 840cc38:	d8c00217 	ldw	r3,8(sp)
 840cc3c:	00800084 	movi	r2,2
 840cc40:	1880051e 	bne	r3,r2,840cc58 <__fixdfsi+0x44>
 840cc44:	0007883a 	mov	r3,zero
 840cc48:	1805883a 	mov	r2,r3
 840cc4c:	dfc00717 	ldw	ra,28(sp)
 840cc50:	dec00804 	addi	sp,sp,32
 840cc54:	f800283a 	ret
 840cc58:	00800044 	movi	r2,1
 840cc5c:	10fff92e 	bgeu	r2,r3,840cc44 <__fixdfsi+0x30>
 840cc60:	00800104 	movi	r2,4
 840cc64:	18800426 	beq	r3,r2,840cc78 <__fixdfsi+0x64>
 840cc68:	d8c00417 	ldw	r3,16(sp)
 840cc6c:	183ff516 	blt	r3,zero,840cc44 <__fixdfsi+0x30>
 840cc70:	00800784 	movi	r2,30
 840cc74:	10c0080e 	bge	r2,r3,840cc98 <__fixdfsi+0x84>
 840cc78:	d8800317 	ldw	r2,12(sp)
 840cc7c:	1000121e 	bne	r2,zero,840ccc8 <__fixdfsi+0xb4>
 840cc80:	00e00034 	movhi	r3,32768
 840cc84:	18ffffc4 	addi	r3,r3,-1
 840cc88:	1805883a 	mov	r2,r3
 840cc8c:	dfc00717 	ldw	ra,28(sp)
 840cc90:	dec00804 	addi	sp,sp,32
 840cc94:	f800283a 	ret
 840cc98:	00800f04 	movi	r2,60
 840cc9c:	10d1c83a 	sub	r8,r2,r3
 840cca0:	40bff804 	addi	r2,r8,-32
 840cca4:	d9800517 	ldw	r6,20(sp)
 840cca8:	d9c00617 	ldw	r7,24(sp)
 840ccac:	10000816 	blt	r2,zero,840ccd0 <__fixdfsi+0xbc>
 840ccb0:	3888d83a 	srl	r4,r7,r2
 840ccb4:	d8800317 	ldw	r2,12(sp)
 840ccb8:	2007883a 	mov	r3,r4
 840ccbc:	103fe226 	beq	r2,zero,840cc48 <__fixdfsi+0x34>
 840ccc0:	0107c83a 	sub	r3,zero,r4
 840ccc4:	003fe006 	br	840cc48 <__fixdfsi+0x34>
 840ccc8:	00e00034 	movhi	r3,32768
 840cccc:	003fde06 	br	840cc48 <__fixdfsi+0x34>
 840ccd0:	39c7883a 	add	r3,r7,r7
 840ccd4:	008007c4 	movi	r2,31
 840ccd8:	1205c83a 	sub	r2,r2,r8
 840ccdc:	1886983a 	sll	r3,r3,r2
 840cce0:	3208d83a 	srl	r4,r6,r8
 840cce4:	1908b03a 	or	r4,r3,r4
 840cce8:	003ff206 	br	840ccb4 <__fixdfsi+0xa0>

0840ccec <__floatunsidf>:
 840ccec:	defff204 	addi	sp,sp,-56
 840ccf0:	dfc00d15 	stw	ra,52(sp)
 840ccf4:	ddc00c15 	stw	r23,48(sp)
 840ccf8:	dd800b15 	stw	r22,44(sp)
 840ccfc:	dd400a15 	stw	r21,40(sp)
 840cd00:	dd000915 	stw	r20,36(sp)
 840cd04:	dcc00815 	stw	r19,32(sp)
 840cd08:	dc800715 	stw	r18,28(sp)
 840cd0c:	dc400615 	stw	r17,24(sp)
 840cd10:	dc000515 	stw	r16,20(sp)
 840cd14:	d8000115 	stw	zero,4(sp)
 840cd18:	20000f1e 	bne	r4,zero,840cd58 <__floatunsidf+0x6c>
 840cd1c:	00800084 	movi	r2,2
 840cd20:	d8800015 	stw	r2,0(sp)
 840cd24:	d809883a 	mov	r4,sp
 840cd28:	84047f80 	call	84047f8 <__pack_d>
 840cd2c:	dfc00d17 	ldw	ra,52(sp)
 840cd30:	ddc00c17 	ldw	r23,48(sp)
 840cd34:	dd800b17 	ldw	r22,44(sp)
 840cd38:	dd400a17 	ldw	r21,40(sp)
 840cd3c:	dd000917 	ldw	r20,36(sp)
 840cd40:	dcc00817 	ldw	r19,32(sp)
 840cd44:	dc800717 	ldw	r18,28(sp)
 840cd48:	dc400617 	ldw	r17,24(sp)
 840cd4c:	dc000517 	ldw	r16,20(sp)
 840cd50:	dec00e04 	addi	sp,sp,56
 840cd54:	f800283a 	ret
 840cd58:	008000c4 	movi	r2,3
 840cd5c:	00c00f04 	movi	r3,60
 840cd60:	002f883a 	mov	r23,zero
 840cd64:	202d883a 	mov	r22,r4
 840cd68:	d8800015 	stw	r2,0(sp)
 840cd6c:	d8c00215 	stw	r3,8(sp)
 840cd70:	d9000315 	stw	r4,12(sp)
 840cd74:	ddc00415 	stw	r23,16(sp)
 840cd78:	840447c0 	call	840447c <__clzsi2>
 840cd7c:	12400744 	addi	r9,r2,29
 840cd80:	48000b16 	blt	r9,zero,840cdb0 <__floatunsidf+0xc4>
 840cd84:	483fe726 	beq	r9,zero,840cd24 <__floatunsidf+0x38>
 840cd88:	10bfff44 	addi	r2,r2,-3
 840cd8c:	10002e16 	blt	r2,zero,840ce48 <__floatunsidf+0x15c>
 840cd90:	b0a2983a 	sll	r17,r22,r2
 840cd94:	0021883a 	mov	r16,zero
 840cd98:	d8800217 	ldw	r2,8(sp)
 840cd9c:	dc400415 	stw	r17,16(sp)
 840cda0:	dc000315 	stw	r16,12(sp)
 840cda4:	1245c83a 	sub	r2,r2,r9
 840cda8:	d8800215 	stw	r2,8(sp)
 840cdac:	003fdd06 	br	840cd24 <__floatunsidf+0x38>
 840cdb0:	0255c83a 	sub	r10,zero,r9
 840cdb4:	51bff804 	addi	r6,r10,-32
 840cdb8:	30001b16 	blt	r6,zero,840ce28 <__floatunsidf+0x13c>
 840cdbc:	b9a8d83a 	srl	r20,r23,r6
 840cdc0:	002b883a 	mov	r21,zero
 840cdc4:	000f883a 	mov	r7,zero
 840cdc8:	01000044 	movi	r4,1
 840cdcc:	0011883a 	mov	r8,zero
 840cdd0:	30002516 	blt	r6,zero,840ce68 <__floatunsidf+0x17c>
 840cdd4:	21a6983a 	sll	r19,r4,r6
 840cdd8:	0025883a 	mov	r18,zero
 840cddc:	00bfffc4 	movi	r2,-1
 840cde0:	9089883a 	add	r4,r18,r2
 840cde4:	988b883a 	add	r5,r19,r2
 840cde8:	248d803a 	cmpltu	r6,r4,r18
 840cdec:	314b883a 	add	r5,r6,r5
 840cdf0:	b104703a 	and	r2,r22,r4
 840cdf4:	b946703a 	and	r3,r23,r5
 840cdf8:	10c4b03a 	or	r2,r2,r3
 840cdfc:	10000226 	beq	r2,zero,840ce08 <__floatunsidf+0x11c>
 840ce00:	01c00044 	movi	r7,1
 840ce04:	0011883a 	mov	r8,zero
 840ce08:	d9000217 	ldw	r4,8(sp)
 840ce0c:	a1c4b03a 	or	r2,r20,r7
 840ce10:	aa06b03a 	or	r3,r21,r8
 840ce14:	2249c83a 	sub	r4,r4,r9
 840ce18:	d8c00415 	stw	r3,16(sp)
 840ce1c:	d9000215 	stw	r4,8(sp)
 840ce20:	d8800315 	stw	r2,12(sp)
 840ce24:	003fbf06 	br	840cd24 <__floatunsidf+0x38>
 840ce28:	bdc7883a 	add	r3,r23,r23
 840ce2c:	008007c4 	movi	r2,31
 840ce30:	1285c83a 	sub	r2,r2,r10
 840ce34:	1886983a 	sll	r3,r3,r2
 840ce38:	b2a8d83a 	srl	r20,r22,r10
 840ce3c:	baaad83a 	srl	r21,r23,r10
 840ce40:	1d28b03a 	or	r20,r3,r20
 840ce44:	003fdf06 	br	840cdc4 <__floatunsidf+0xd8>
 840ce48:	b006d07a 	srli	r3,r22,1
 840ce4c:	008007c4 	movi	r2,31
 840ce50:	1245c83a 	sub	r2,r2,r9
 840ce54:	1886d83a 	srl	r3,r3,r2
 840ce58:	ba62983a 	sll	r17,r23,r9
 840ce5c:	b260983a 	sll	r16,r22,r9
 840ce60:	1c62b03a 	or	r17,r3,r17
 840ce64:	003fcc06 	br	840cd98 <__floatunsidf+0xac>
 840ce68:	2006d07a 	srli	r3,r4,1
 840ce6c:	008007c4 	movi	r2,31
 840ce70:	1285c83a 	sub	r2,r2,r10
 840ce74:	18a6d83a 	srl	r19,r3,r2
 840ce78:	22a4983a 	sll	r18,r4,r10
 840ce7c:	003fd706 	br	840cddc <__floatunsidf+0xf0>

0840ce80 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 840ce80:	defff804 	addi	sp,sp,-32
 840ce84:	dfc00715 	stw	ra,28(sp)
 840ce88:	df000615 	stw	fp,24(sp)
 840ce8c:	df000604 	addi	fp,sp,24
 840ce90:	e13ffc15 	stw	r4,-16(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 840ce94:	e0bffc17 	ldw	r2,-16(fp)
 840ce98:	1004803a 	cmplt	r2,r2,zero
 840ce9c:	1000081e 	bne	r2,zero,840cec0 <close+0x40>
 840cea0:	e0bffc17 	ldw	r2,-16(fp)
 840cea4:	10800324 	muli	r2,r2,12
 840cea8:	1007883a 	mov	r3,r2
 840ceac:	00821074 	movhi	r2,2113
 840ceb0:	10898504 	addi	r2,r2,9748
 840ceb4:	1887883a 	add	r3,r3,r2
 840ceb8:	e0ffff15 	stw	r3,-4(fp)
 840cebc:	00000106 	br	840cec4 <close+0x44>
 840cec0:	e03fff15 	stw	zero,-4(fp)
 840cec4:	e0bfff17 	ldw	r2,-4(fp)
 840cec8:	e0bffb15 	stw	r2,-20(fp)

  if (fd)
 840cecc:	e0bffb17 	ldw	r2,-20(fp)
 840ced0:	1005003a 	cmpeq	r2,r2,zero
 840ced4:	10001d1e 	bne	r2,zero,840cf4c <close+0xcc>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 840ced8:	e0bffb17 	ldw	r2,-20(fp)
 840cedc:	10800017 	ldw	r2,0(r2)
 840cee0:	10800417 	ldw	r2,16(r2)
 840cee4:	1005003a 	cmpeq	r2,r2,zero
 840cee8:	1000071e 	bne	r2,zero,840cf08 <close+0x88>
 840ceec:	e0bffb17 	ldw	r2,-20(fp)
 840cef0:	10800017 	ldw	r2,0(r2)
 840cef4:	10800417 	ldw	r2,16(r2)
 840cef8:	e13ffb17 	ldw	r4,-20(fp)
 840cefc:	103ee83a 	callr	r2
 840cf00:	e0bffe15 	stw	r2,-8(fp)
 840cf04:	00000106 	br	840cf0c <close+0x8c>
 840cf08:	e03ffe15 	stw	zero,-8(fp)
 840cf0c:	e0bffe17 	ldw	r2,-8(fp)
 840cf10:	e0bffa15 	stw	r2,-24(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 840cf14:	e13ffc17 	ldw	r4,-16(fp)
 840cf18:	840d6c40 	call	840d6c4 <alt_release_fd>
    if (rval < 0)
 840cf1c:	e0bffa17 	ldw	r2,-24(fp)
 840cf20:	1004403a 	cmpge	r2,r2,zero
 840cf24:	1000071e 	bne	r2,zero,840cf44 <close+0xc4>
    {
      ALT_ERRNO = -rval;
 840cf28:	840cf7c0 	call	840cf7c <alt_get_errno>
 840cf2c:	e0fffa17 	ldw	r3,-24(fp)
 840cf30:	00c7c83a 	sub	r3,zero,r3
 840cf34:	10c00015 	stw	r3,0(r2)
      return -1;
 840cf38:	00bfffc4 	movi	r2,-1
 840cf3c:	e0bffd15 	stw	r2,-12(fp)
 840cf40:	00000806 	br	840cf64 <close+0xe4>
    }
    return 0;
 840cf44:	e03ffd15 	stw	zero,-12(fp)
 840cf48:	00000606 	br	840cf64 <close+0xe4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 840cf4c:	840cf7c0 	call	840cf7c <alt_get_errno>
 840cf50:	1007883a 	mov	r3,r2
 840cf54:	00801444 	movi	r2,81
 840cf58:	18800015 	stw	r2,0(r3)
    return -1;
 840cf5c:	00bfffc4 	movi	r2,-1
 840cf60:	e0bffd15 	stw	r2,-12(fp)
 840cf64:	e0bffd17 	ldw	r2,-12(fp)
  }
}
 840cf68:	e037883a 	mov	sp,fp
 840cf6c:	dfc00117 	ldw	ra,4(sp)
 840cf70:	df000017 	ldw	fp,0(sp)
 840cf74:	dec00204 	addi	sp,sp,8
 840cf78:	f800283a 	ret

0840cf7c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 840cf7c:	defffd04 	addi	sp,sp,-12
 840cf80:	dfc00215 	stw	ra,8(sp)
 840cf84:	df000115 	stw	fp,4(sp)
 840cf88:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 840cf8c:	00821074 	movhi	r2,2113
 840cf90:	108e5d04 	addi	r2,r2,14708
 840cf94:	10800017 	ldw	r2,0(r2)
 840cf98:	1005003a 	cmpeq	r2,r2,zero
 840cf9c:	1000061e 	bne	r2,zero,840cfb8 <alt_get_errno+0x3c>
 840cfa0:	00821074 	movhi	r2,2113
 840cfa4:	108e5d04 	addi	r2,r2,14708
 840cfa8:	10800017 	ldw	r2,0(r2)
 840cfac:	103ee83a 	callr	r2
 840cfb0:	e0bfff15 	stw	r2,-4(fp)
 840cfb4:	00000306 	br	840cfc4 <alt_get_errno+0x48>
 840cfb8:	00821074 	movhi	r2,2113
 840cfbc:	10956404 	addi	r2,r2,21904
 840cfc0:	e0bfff15 	stw	r2,-4(fp)
 840cfc4:	e0bfff17 	ldw	r2,-4(fp)
}
 840cfc8:	e037883a 	mov	sp,fp
 840cfcc:	dfc00117 	ldw	ra,4(sp)
 840cfd0:	df000017 	ldw	fp,0(sp)
 840cfd4:	dec00204 	addi	sp,sp,8
 840cfd8:	f800283a 	ret

0840cfdc <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 840cfdc:	defffc04 	addi	sp,sp,-16
 840cfe0:	df000315 	stw	fp,12(sp)
 840cfe4:	df000304 	addi	fp,sp,12
 840cfe8:	e13ffd15 	stw	r4,-12(fp)
 840cfec:	e17ffe15 	stw	r5,-8(fp)
 840cff0:	e1bfff15 	stw	r6,-4(fp)
  return len;
 840cff4:	e0bfff17 	ldw	r2,-4(fp)
}
 840cff8:	e037883a 	mov	sp,fp
 840cffc:	df000017 	ldw	fp,0(sp)
 840d000:	dec00104 	addi	sp,sp,4
 840d004:	f800283a 	ret

0840d008 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
 840d008:	defff904 	addi	sp,sp,-28
 840d00c:	dfc00615 	stw	ra,24(sp)
 840d010:	df000515 	stw	fp,20(sp)
 840d014:	df000504 	addi	fp,sp,20
 840d018:	e13ffc15 	stw	r4,-16(fp)
 840d01c:	e17ffd15 	stw	r5,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 840d020:	e0bffc17 	ldw	r2,-16(fp)
 840d024:	1004803a 	cmplt	r2,r2,zero
 840d028:	1000081e 	bne	r2,zero,840d04c <fstat+0x44>
 840d02c:	e0bffc17 	ldw	r2,-16(fp)
 840d030:	10800324 	muli	r2,r2,12
 840d034:	1007883a 	mov	r3,r2
 840d038:	00821074 	movhi	r2,2113
 840d03c:	10898504 	addi	r2,r2,9748
 840d040:	1887883a 	add	r3,r3,r2
 840d044:	e0ffff15 	stw	r3,-4(fp)
 840d048:	00000106 	br	840d050 <fstat+0x48>
 840d04c:	e03fff15 	stw	zero,-4(fp)
 840d050:	e0bfff17 	ldw	r2,-4(fp)
 840d054:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 840d058:	e0bffb17 	ldw	r2,-20(fp)
 840d05c:	1005003a 	cmpeq	r2,r2,zero
 840d060:	1000121e 	bne	r2,zero,840d0ac <fstat+0xa4>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
 840d064:	e0bffb17 	ldw	r2,-20(fp)
 840d068:	10800017 	ldw	r2,0(r2)
 840d06c:	10800817 	ldw	r2,32(r2)
 840d070:	1005003a 	cmpeq	r2,r2,zero
 840d074:	1000081e 	bne	r2,zero,840d098 <fstat+0x90>
    {
      return fd->dev->fstat(fd, st);
 840d078:	e0bffb17 	ldw	r2,-20(fp)
 840d07c:	10800017 	ldw	r2,0(r2)
 840d080:	10800817 	ldw	r2,32(r2)
 840d084:	e13ffb17 	ldw	r4,-20(fp)
 840d088:	e17ffd17 	ldw	r5,-12(fp)
 840d08c:	103ee83a 	callr	r2
 840d090:	e0bffe15 	stw	r2,-8(fp)
 840d094:	00000b06 	br	840d0c4 <fstat+0xbc>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
 840d098:	e0fffd17 	ldw	r3,-12(fp)
 840d09c:	00880004 	movi	r2,8192
 840d0a0:	18800115 	stw	r2,4(r3)
      return 0;
 840d0a4:	e03ffe15 	stw	zero,-8(fp)
 840d0a8:	00000606 	br	840d0c4 <fstat+0xbc>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 840d0ac:	840d0dc0 	call	840d0dc <alt_get_errno>
 840d0b0:	1007883a 	mov	r3,r2
 840d0b4:	00801444 	movi	r2,81
 840d0b8:	18800015 	stw	r2,0(r3)
    return -1;
 840d0bc:	00bfffc4 	movi	r2,-1
 840d0c0:	e0bffe15 	stw	r2,-8(fp)
 840d0c4:	e0bffe17 	ldw	r2,-8(fp)
  }
}
 840d0c8:	e037883a 	mov	sp,fp
 840d0cc:	dfc00117 	ldw	ra,4(sp)
 840d0d0:	df000017 	ldw	fp,0(sp)
 840d0d4:	dec00204 	addi	sp,sp,8
 840d0d8:	f800283a 	ret

0840d0dc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 840d0dc:	defffd04 	addi	sp,sp,-12
 840d0e0:	dfc00215 	stw	ra,8(sp)
 840d0e4:	df000115 	stw	fp,4(sp)
 840d0e8:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 840d0ec:	00821074 	movhi	r2,2113
 840d0f0:	108e5d04 	addi	r2,r2,14708
 840d0f4:	10800017 	ldw	r2,0(r2)
 840d0f8:	1005003a 	cmpeq	r2,r2,zero
 840d0fc:	1000061e 	bne	r2,zero,840d118 <alt_get_errno+0x3c>
 840d100:	00821074 	movhi	r2,2113
 840d104:	108e5d04 	addi	r2,r2,14708
 840d108:	10800017 	ldw	r2,0(r2)
 840d10c:	103ee83a 	callr	r2
 840d110:	e0bfff15 	stw	r2,-4(fp)
 840d114:	00000306 	br	840d124 <alt_get_errno+0x48>
 840d118:	00821074 	movhi	r2,2113
 840d11c:	10956404 	addi	r2,r2,21904
 840d120:	e0bfff15 	stw	r2,-4(fp)
 840d124:	e0bfff17 	ldw	r2,-4(fp)
}
 840d128:	e037883a 	mov	sp,fp
 840d12c:	dfc00117 	ldw	ra,4(sp)
 840d130:	df000017 	ldw	fp,0(sp)
 840d134:	dec00204 	addi	sp,sp,8
 840d138:	f800283a 	ret

0840d13c <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
 840d13c:	deffeb04 	addi	sp,sp,-84
 840d140:	dfc01415 	stw	ra,80(sp)
 840d144:	df001315 	stw	fp,76(sp)
 840d148:	df001304 	addi	fp,sp,76
 840d14c:	e13ffd15 	stw	r4,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 840d150:	e0bffd17 	ldw	r2,-12(fp)
 840d154:	1004803a 	cmplt	r2,r2,zero
 840d158:	1000081e 	bne	r2,zero,840d17c <isatty+0x40>
 840d15c:	e0bffd17 	ldw	r2,-12(fp)
 840d160:	10800324 	muli	r2,r2,12
 840d164:	1007883a 	mov	r3,r2
 840d168:	00821074 	movhi	r2,2113
 840d16c:	10898504 	addi	r2,r2,9748
 840d170:	1887883a 	add	r3,r3,r2
 840d174:	e0ffff15 	stw	r3,-4(fp)
 840d178:	00000106 	br	840d180 <isatty+0x44>
 840d17c:	e03fff15 	stw	zero,-4(fp)
 840d180:	e0bfff17 	ldw	r2,-4(fp)
 840d184:	e0bfed15 	stw	r2,-76(fp)
  
  if (fd)
 840d188:	e0bfed17 	ldw	r2,-76(fp)
 840d18c:	1005003a 	cmpeq	r2,r2,zero
 840d190:	10000f1e 	bne	r2,zero,840d1d0 <isatty+0x94>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
 840d194:	e0bfed17 	ldw	r2,-76(fp)
 840d198:	10800017 	ldw	r2,0(r2)
 840d19c:	10800817 	ldw	r2,32(r2)
 840d1a0:	1004c03a 	cmpne	r2,r2,zero
 840d1a4:	1000031e 	bne	r2,zero,840d1b4 <isatty+0x78>
    {
      return 1;
 840d1a8:	00800044 	movi	r2,1
 840d1ac:	e0bffe15 	stw	r2,-8(fp)
 840d1b0:	00000c06 	br	840d1e4 <isatty+0xa8>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
 840d1b4:	e17fee04 	addi	r5,fp,-72
 840d1b8:	e13ffd17 	ldw	r4,-12(fp)
 840d1bc:	840d0080 	call	840d008 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
 840d1c0:	e0bfef17 	ldw	r2,-68(fp)
 840d1c4:	10880020 	cmpeqi	r2,r2,8192
 840d1c8:	e0bffe15 	stw	r2,-8(fp)
 840d1cc:	00000506 	br	840d1e4 <isatty+0xa8>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 840d1d0:	840d1fc0 	call	840d1fc <alt_get_errno>
 840d1d4:	1007883a 	mov	r3,r2
 840d1d8:	00801444 	movi	r2,81
 840d1dc:	18800015 	stw	r2,0(r3)
    return 0;
 840d1e0:	e03ffe15 	stw	zero,-8(fp)
 840d1e4:	e0bffe17 	ldw	r2,-8(fp)
  }
}
 840d1e8:	e037883a 	mov	sp,fp
 840d1ec:	dfc00117 	ldw	ra,4(sp)
 840d1f0:	df000017 	ldw	fp,0(sp)
 840d1f4:	dec00204 	addi	sp,sp,8
 840d1f8:	f800283a 	ret

0840d1fc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 840d1fc:	defffd04 	addi	sp,sp,-12
 840d200:	dfc00215 	stw	ra,8(sp)
 840d204:	df000115 	stw	fp,4(sp)
 840d208:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 840d20c:	00821074 	movhi	r2,2113
 840d210:	108e5d04 	addi	r2,r2,14708
 840d214:	10800017 	ldw	r2,0(r2)
 840d218:	1005003a 	cmpeq	r2,r2,zero
 840d21c:	1000061e 	bne	r2,zero,840d238 <alt_get_errno+0x3c>
 840d220:	00821074 	movhi	r2,2113
 840d224:	108e5d04 	addi	r2,r2,14708
 840d228:	10800017 	ldw	r2,0(r2)
 840d22c:	103ee83a 	callr	r2
 840d230:	e0bfff15 	stw	r2,-4(fp)
 840d234:	00000306 	br	840d244 <alt_get_errno+0x48>
 840d238:	00821074 	movhi	r2,2113
 840d23c:	10956404 	addi	r2,r2,21904
 840d240:	e0bfff15 	stw	r2,-4(fp)
 840d244:	e0bfff17 	ldw	r2,-4(fp)
}
 840d248:	e037883a 	mov	sp,fp
 840d24c:	dfc00117 	ldw	ra,4(sp)
 840d250:	df000017 	ldw	fp,0(sp)
 840d254:	dec00204 	addi	sp,sp,8
 840d258:	f800283a 	ret

0840d25c <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 840d25c:	defffe04 	addi	sp,sp,-8
 840d260:	dfc00115 	stw	ra,4(sp)
 840d264:	df000015 	stw	fp,0(sp)
 840d268:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
 840d26c:	01021074 	movhi	r4,2113
 840d270:	210e6604 	addi	r4,r4,14744
 840d274:	01421074 	movhi	r5,2113
 840d278:	29477604 	addi	r5,r5,7640
 840d27c:	01821074 	movhi	r6,2113
 840d280:	318e6604 	addi	r6,r6,14744
 840d284:	840d2dc0 	call	840d2dc <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
 840d288:	01021034 	movhi	r4,2112
 840d28c:	21000804 	addi	r4,r4,32
 840d290:	01421034 	movhi	r5,2112
 840d294:	29400804 	addi	r5,r5,32
 840d298:	01821034 	movhi	r6,2112
 840d29c:	31806d04 	addi	r6,r6,436
 840d2a0:	840d2dc0 	call	840d2dc <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
 840d2a4:	01021074 	movhi	r4,2113
 840d2a8:	21060c04 	addi	r4,r4,6192
 840d2ac:	01421074 	movhi	r5,2113
 840d2b0:	29460c04 	addi	r5,r5,6192
 840d2b4:	01821074 	movhi	r6,2113
 840d2b8:	31877604 	addi	r6,r6,7640
 840d2bc:	840d2dc0 	call	840d2dc <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 840d2c0:	84105dc0 	call	84105dc <alt_dcache_flush_all>
  alt_icache_flush_all();
 840d2c4:	84108900 	call	8410890 <alt_icache_flush_all>
}
 840d2c8:	e037883a 	mov	sp,fp
 840d2cc:	dfc00117 	ldw	ra,4(sp)
 840d2d0:	df000017 	ldw	fp,0(sp)
 840d2d4:	dec00204 	addi	sp,sp,8
 840d2d8:	f800283a 	ret

0840d2dc <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
 840d2dc:	defffc04 	addi	sp,sp,-16
 840d2e0:	df000315 	stw	fp,12(sp)
 840d2e4:	df000304 	addi	fp,sp,12
 840d2e8:	e13ffd15 	stw	r4,-12(fp)
 840d2ec:	e17ffe15 	stw	r5,-8(fp)
 840d2f0:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
 840d2f4:	e0fffe17 	ldw	r3,-8(fp)
 840d2f8:	e0bffd17 	ldw	r2,-12(fp)
 840d2fc:	18800e26 	beq	r3,r2,840d338 <alt_load_section+0x5c>
  {
    while( to != end )
 840d300:	00000a06 	br	840d32c <alt_load_section+0x50>
    {
      *to++ = *from++;
 840d304:	e0bffd17 	ldw	r2,-12(fp)
 840d308:	10c00017 	ldw	r3,0(r2)
 840d30c:	e0bffe17 	ldw	r2,-8(fp)
 840d310:	10c00015 	stw	r3,0(r2)
 840d314:	e0bffe17 	ldw	r2,-8(fp)
 840d318:	10800104 	addi	r2,r2,4
 840d31c:	e0bffe15 	stw	r2,-8(fp)
 840d320:	e0bffd17 	ldw	r2,-12(fp)
 840d324:	10800104 	addi	r2,r2,4
 840d328:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
 840d32c:	e0fffe17 	ldw	r3,-8(fp)
 840d330:	e0bfff17 	ldw	r2,-4(fp)
 840d334:	18bff31e 	bne	r3,r2,840d304 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
 840d338:	e037883a 	mov	sp,fp
 840d33c:	df000017 	ldw	fp,0(sp)
 840d340:	dec00104 	addi	sp,sp,4
 840d344:	f800283a 	ret

0840d348 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
 840d348:	defff804 	addi	sp,sp,-32
 840d34c:	dfc00715 	stw	ra,28(sp)
 840d350:	df000615 	stw	fp,24(sp)
 840d354:	df000604 	addi	fp,sp,24
 840d358:	e13ffc15 	stw	r4,-16(fp)
 840d35c:	e17ffd15 	stw	r5,-12(fp)
 840d360:	e1bffe15 	stw	r6,-8(fp)
  alt_fd* fd;
  off_t   rc = 0; 
 840d364:	e03ffa15 	stw	zero,-24(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 840d368:	e0bffc17 	ldw	r2,-16(fp)
 840d36c:	1004803a 	cmplt	r2,r2,zero
 840d370:	1000081e 	bne	r2,zero,840d394 <lseek+0x4c>
 840d374:	e0bffc17 	ldw	r2,-16(fp)
 840d378:	10800324 	muli	r2,r2,12
 840d37c:	1007883a 	mov	r3,r2
 840d380:	00821074 	movhi	r2,2113
 840d384:	10898504 	addi	r2,r2,9748
 840d388:	1887883a 	add	r3,r3,r2
 840d38c:	e0ffff15 	stw	r3,-4(fp)
 840d390:	00000106 	br	840d398 <lseek+0x50>
 840d394:	e03fff15 	stw	zero,-4(fp)
 840d398:	e0bfff17 	ldw	r2,-4(fp)
 840d39c:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd) 
 840d3a0:	e0bffb17 	ldw	r2,-20(fp)
 840d3a4:	1005003a 	cmpeq	r2,r2,zero
 840d3a8:	1000111e 	bne	r2,zero,840d3f0 <lseek+0xa8>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
 840d3ac:	e0bffb17 	ldw	r2,-20(fp)
 840d3b0:	10800017 	ldw	r2,0(r2)
 840d3b4:	10800717 	ldw	r2,28(r2)
 840d3b8:	1005003a 	cmpeq	r2,r2,zero
 840d3bc:	1000091e 	bne	r2,zero,840d3e4 <lseek+0x9c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
 840d3c0:	e0bffb17 	ldw	r2,-20(fp)
 840d3c4:	10800017 	ldw	r2,0(r2)
 840d3c8:	10800717 	ldw	r2,28(r2)
 840d3cc:	e13ffb17 	ldw	r4,-20(fp)
 840d3d0:	e17ffd17 	ldw	r5,-12(fp)
 840d3d4:	e1bffe17 	ldw	r6,-8(fp)
 840d3d8:	103ee83a 	callr	r2
 840d3dc:	e0bffa15 	stw	r2,-24(fp)
 840d3e0:	00000506 	br	840d3f8 <lseek+0xb0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
 840d3e4:	00bfde84 	movi	r2,-134
 840d3e8:	e0bffa15 	stw	r2,-24(fp)
 840d3ec:	00000206 	br	840d3f8 <lseek+0xb0>
    }
  }
  else  
  {
    rc = -EBADFD;
 840d3f0:	00bfebc4 	movi	r2,-81
 840d3f4:	e0bffa15 	stw	r2,-24(fp)
  }

  if (rc < 0)
 840d3f8:	e0bffa17 	ldw	r2,-24(fp)
 840d3fc:	1004403a 	cmpge	r2,r2,zero
 840d400:	1000071e 	bne	r2,zero,840d420 <lseek+0xd8>
  {
    ALT_ERRNO = -rc;
 840d404:	840d4380 	call	840d438 <alt_get_errno>
 840d408:	1007883a 	mov	r3,r2
 840d40c:	e0bffa17 	ldw	r2,-24(fp)
 840d410:	0085c83a 	sub	r2,zero,r2
 840d414:	18800015 	stw	r2,0(r3)
    rc = -1;
 840d418:	00bfffc4 	movi	r2,-1
 840d41c:	e0bffa15 	stw	r2,-24(fp)
  }

  return rc;
 840d420:	e0bffa17 	ldw	r2,-24(fp)
}
 840d424:	e037883a 	mov	sp,fp
 840d428:	dfc00117 	ldw	ra,4(sp)
 840d42c:	df000017 	ldw	fp,0(sp)
 840d430:	dec00204 	addi	sp,sp,8
 840d434:	f800283a 	ret

0840d438 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 840d438:	defffd04 	addi	sp,sp,-12
 840d43c:	dfc00215 	stw	ra,8(sp)
 840d440:	df000115 	stw	fp,4(sp)
 840d444:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 840d448:	00821074 	movhi	r2,2113
 840d44c:	108e5d04 	addi	r2,r2,14708
 840d450:	10800017 	ldw	r2,0(r2)
 840d454:	1005003a 	cmpeq	r2,r2,zero
 840d458:	1000061e 	bne	r2,zero,840d474 <alt_get_errno+0x3c>
 840d45c:	00821074 	movhi	r2,2113
 840d460:	108e5d04 	addi	r2,r2,14708
 840d464:	10800017 	ldw	r2,0(r2)
 840d468:	103ee83a 	callr	r2
 840d46c:	e0bfff15 	stw	r2,-4(fp)
 840d470:	00000306 	br	840d480 <alt_get_errno+0x48>
 840d474:	00821074 	movhi	r2,2113
 840d478:	10956404 	addi	r2,r2,21904
 840d47c:	e0bfff15 	stw	r2,-4(fp)
 840d480:	e0bfff17 	ldw	r2,-4(fp)
}
 840d484:	e037883a 	mov	sp,fp
 840d488:	dfc00117 	ldw	ra,4(sp)
 840d48c:	df000017 	ldw	fp,0(sp)
 840d490:	dec00204 	addi	sp,sp,8
 840d494:	f800283a 	ret

0840d498 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 840d498:	defffd04 	addi	sp,sp,-12
 840d49c:	dfc00215 	stw	ra,8(sp)
 840d4a0:	df000115 	stw	fp,4(sp)
 840d4a4:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 840d4a8:	0009883a 	mov	r4,zero
 840d4ac:	840d9600 	call	840d960 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 840d4b0:	840d9940 	call	840d994 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 840d4b4:	01021074 	movhi	r4,2113
 840d4b8:	21072404 	addi	r4,r4,7312
 840d4bc:	01421074 	movhi	r5,2113
 840d4c0:	29472404 	addi	r5,r5,7312
 840d4c4:	01821074 	movhi	r6,2113
 840d4c8:	31872404 	addi	r6,r6,7312
 840d4cc:	8410c500 	call	8410c50 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
 840d4d0:	84107340 	call	8410734 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
 840d4d4:	01021074 	movhi	r4,2113
 840d4d8:	2101e604 	addi	r4,r4,1944
 840d4dc:	84113b80 	call	84113b8 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 840d4e0:	d1271717 	ldw	r4,-25508(gp)
 840d4e4:	d1671817 	ldw	r5,-25504(gp)
 840d4e8:	d1a71917 	ldw	r6,-25500(gp)
 840d4ec:	84002000 	call	8400200 <main>
 840d4f0:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
 840d4f4:	01000044 	movi	r4,1
 840d4f8:	840ce800 	call	840ce80 <close>
  exit (result);
 840d4fc:	e13fff17 	ldw	r4,-4(fp)
 840d500:	84113cc0 	call	84113cc <exit>

0840d504 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
 840d504:	defffe04 	addi	sp,sp,-8
 840d508:	df000115 	stw	fp,4(sp)
 840d50c:	df000104 	addi	fp,sp,4
 840d510:	e13fff15 	stw	r4,-4(fp)
}
 840d514:	e037883a 	mov	sp,fp
 840d518:	df000017 	ldw	fp,0(sp)
 840d51c:	dec00104 	addi	sp,sp,4
 840d520:	f800283a 	ret

0840d524 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
 840d524:	defffe04 	addi	sp,sp,-8
 840d528:	df000115 	stw	fp,4(sp)
 840d52c:	df000104 	addi	fp,sp,4
 840d530:	e13fff15 	stw	r4,-4(fp)
}
 840d534:	e037883a 	mov	sp,fp
 840d538:	df000017 	ldw	fp,0(sp)
 840d53c:	dec00104 	addi	sp,sp,4
 840d540:	f800283a 	ret

0840d544 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
 840d544:	defff704 	addi	sp,sp,-36
 840d548:	dfc00815 	stw	ra,32(sp)
 840d54c:	df000715 	stw	fp,28(sp)
 840d550:	df000704 	addi	fp,sp,28
 840d554:	e13ffb15 	stw	r4,-20(fp)
 840d558:	e17ffc15 	stw	r5,-16(fp)
 840d55c:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 840d560:	e0bffb17 	ldw	r2,-20(fp)
 840d564:	1004803a 	cmplt	r2,r2,zero
 840d568:	1000081e 	bne	r2,zero,840d58c <read+0x48>
 840d56c:	e0bffb17 	ldw	r2,-20(fp)
 840d570:	10800324 	muli	r2,r2,12
 840d574:	1007883a 	mov	r3,r2
 840d578:	00821074 	movhi	r2,2113
 840d57c:	10898504 	addi	r2,r2,9748
 840d580:	1887883a 	add	r3,r3,r2
 840d584:	e0ffff15 	stw	r3,-4(fp)
 840d588:	00000106 	br	840d590 <read+0x4c>
 840d58c:	e03fff15 	stw	zero,-4(fp)
 840d590:	e0bfff17 	ldw	r2,-4(fp)
 840d594:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
 840d598:	e0bffa17 	ldw	r2,-24(fp)
 840d59c:	1005003a 	cmpeq	r2,r2,zero
 840d5a0:	1000241e 	bne	r2,zero,840d634 <read+0xf0>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 840d5a4:	e0bffa17 	ldw	r2,-24(fp)
 840d5a8:	10800217 	ldw	r2,8(r2)
 840d5ac:	108000cc 	andi	r2,r2,3
 840d5b0:	10800060 	cmpeqi	r2,r2,1
 840d5b4:	10001a1e 	bne	r2,zero,840d620 <read+0xdc>
 840d5b8:	e0bffa17 	ldw	r2,-24(fp)
 840d5bc:	10800017 	ldw	r2,0(r2)
 840d5c0:	10800517 	ldw	r2,20(r2)
 840d5c4:	1005003a 	cmpeq	r2,r2,zero
 840d5c8:	1000151e 	bne	r2,zero,840d620 <read+0xdc>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
 840d5cc:	e0bffa17 	ldw	r2,-24(fp)
 840d5d0:	10800017 	ldw	r2,0(r2)
 840d5d4:	10800517 	ldw	r2,20(r2)
 840d5d8:	e17ffc17 	ldw	r5,-16(fp)
 840d5dc:	e1bffd17 	ldw	r6,-12(fp)
 840d5e0:	e13ffa17 	ldw	r4,-24(fp)
 840d5e4:	103ee83a 	callr	r2
 840d5e8:	e0bff915 	stw	r2,-28(fp)
 840d5ec:	e0bff917 	ldw	r2,-28(fp)
 840d5f0:	1004403a 	cmpge	r2,r2,zero
 840d5f4:	1000071e 	bne	r2,zero,840d614 <read+0xd0>
        {
          ALT_ERRNO = -rval;
 840d5f8:	840d6640 	call	840d664 <alt_get_errno>
 840d5fc:	e0fff917 	ldw	r3,-28(fp)
 840d600:	00c7c83a 	sub	r3,zero,r3
 840d604:	10c00015 	stw	r3,0(r2)
          return -1;
 840d608:	00bfffc4 	movi	r2,-1
 840d60c:	e0bffe15 	stw	r2,-8(fp)
 840d610:	00000e06 	br	840d64c <read+0x108>
        }
        return rval;
 840d614:	e0bff917 	ldw	r2,-28(fp)
 840d618:	e0bffe15 	stw	r2,-8(fp)
 840d61c:	00000b06 	br	840d64c <read+0x108>
      }
      else
      {
        ALT_ERRNO = EACCES;
 840d620:	840d6640 	call	840d664 <alt_get_errno>
 840d624:	1007883a 	mov	r3,r2
 840d628:	00800344 	movi	r2,13
 840d62c:	18800015 	stw	r2,0(r3)
 840d630:	00000406 	br	840d644 <read+0x100>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
 840d634:	840d6640 	call	840d664 <alt_get_errno>
 840d638:	1007883a 	mov	r3,r2
 840d63c:	00801444 	movi	r2,81
 840d640:	18800015 	stw	r2,0(r3)
  }
  return -1;
 840d644:	00bfffc4 	movi	r2,-1
 840d648:	e0bffe15 	stw	r2,-8(fp)
 840d64c:	e0bffe17 	ldw	r2,-8(fp)
}
 840d650:	e037883a 	mov	sp,fp
 840d654:	dfc00117 	ldw	ra,4(sp)
 840d658:	df000017 	ldw	fp,0(sp)
 840d65c:	dec00204 	addi	sp,sp,8
 840d660:	f800283a 	ret

0840d664 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 840d664:	defffd04 	addi	sp,sp,-12
 840d668:	dfc00215 	stw	ra,8(sp)
 840d66c:	df000115 	stw	fp,4(sp)
 840d670:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 840d674:	00821074 	movhi	r2,2113
 840d678:	108e5d04 	addi	r2,r2,14708
 840d67c:	10800017 	ldw	r2,0(r2)
 840d680:	1005003a 	cmpeq	r2,r2,zero
 840d684:	1000061e 	bne	r2,zero,840d6a0 <alt_get_errno+0x3c>
 840d688:	00821074 	movhi	r2,2113
 840d68c:	108e5d04 	addi	r2,r2,14708
 840d690:	10800017 	ldw	r2,0(r2)
 840d694:	103ee83a 	callr	r2
 840d698:	e0bfff15 	stw	r2,-4(fp)
 840d69c:	00000306 	br	840d6ac <alt_get_errno+0x48>
 840d6a0:	00821074 	movhi	r2,2113
 840d6a4:	10956404 	addi	r2,r2,21904
 840d6a8:	e0bfff15 	stw	r2,-4(fp)
 840d6ac:	e0bfff17 	ldw	r2,-4(fp)
}
 840d6b0:	e037883a 	mov	sp,fp
 840d6b4:	dfc00117 	ldw	ra,4(sp)
 840d6b8:	df000017 	ldw	fp,0(sp)
 840d6bc:	dec00204 	addi	sp,sp,8
 840d6c0:	f800283a 	ret

0840d6c4 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 840d6c4:	defffe04 	addi	sp,sp,-8
 840d6c8:	df000115 	stw	fp,4(sp)
 840d6cc:	df000104 	addi	fp,sp,4
 840d6d0:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
 840d6d4:	e0bfff17 	ldw	r2,-4(fp)
 840d6d8:	108000d0 	cmplti	r2,r2,3
 840d6dc:	10000d1e 	bne	r2,zero,840d714 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
 840d6e0:	e0bfff17 	ldw	r2,-4(fp)
 840d6e4:	00c21074 	movhi	r3,2113
 840d6e8:	18c98504 	addi	r3,r3,9748
 840d6ec:	10800324 	muli	r2,r2,12
 840d6f0:	10c5883a 	add	r2,r2,r3
 840d6f4:	10800204 	addi	r2,r2,8
 840d6f8:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
 840d6fc:	e0bfff17 	ldw	r2,-4(fp)
 840d700:	00c21074 	movhi	r3,2113
 840d704:	18c98504 	addi	r3,r3,9748
 840d708:	10800324 	muli	r2,r2,12
 840d70c:	10c5883a 	add	r2,r2,r3
 840d710:	10000015 	stw	zero,0(r2)
  }
}
 840d714:	e037883a 	mov	sp,fp
 840d718:	df000017 	ldw	fp,0(sp)
 840d71c:	dec00104 	addi	sp,sp,4
 840d720:	f800283a 	ret

0840d724 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
 840d724:	defff804 	addi	sp,sp,-32
 840d728:	df000715 	stw	fp,28(sp)
 840d72c:	df000704 	addi	fp,sp,28
 840d730:	e13ffe15 	stw	r4,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 840d734:	0005303a 	rdctl	r2,status
 840d738:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 840d73c:	e0fffb17 	ldw	r3,-20(fp)
 840d740:	00bfff84 	movi	r2,-2
 840d744:	1884703a 	and	r2,r3,r2
 840d748:	1001703a 	wrctl	status,r2
  
  return context;
 840d74c:	e0bffb17 	ldw	r2,-20(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
 840d750:	e0bffd15 	stw	r2,-12(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
 840d754:	d0a01017 	ldw	r2,-32704(gp)
 840d758:	10c000c4 	addi	r3,r2,3
 840d75c:	00bfff04 	movi	r2,-4
 840d760:	1884703a 	and	r2,r3,r2
 840d764:	d0a01015 	stw	r2,-32704(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
 840d768:	d0e01017 	ldw	r3,-32704(gp)
 840d76c:	e0bffe17 	ldw	r2,-8(fp)
 840d770:	1887883a 	add	r3,r3,r2
 840d774:	00822034 	movhi	r2,2176
 840d778:	10800004 	addi	r2,r2,0
 840d77c:	10c0072e 	bgeu	r2,r3,840d79c <sbrk+0x78>
 840d780:	e0bffd17 	ldw	r2,-12(fp)
 840d784:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 840d788:	e0bffa17 	ldw	r2,-24(fp)
 840d78c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
 840d790:	00bfffc4 	movi	r2,-1
 840d794:	e0bfff15 	stw	r2,-4(fp)
 840d798:	00000c06 	br	840d7cc <sbrk+0xa8>
  }
#endif

  prev_heap_end = heap_end; 
 840d79c:	d0a01017 	ldw	r2,-32704(gp)
 840d7a0:	e0bffc15 	stw	r2,-16(fp)
  heap_end += incr; 
 840d7a4:	d0e01017 	ldw	r3,-32704(gp)
 840d7a8:	e0bffe17 	ldw	r2,-8(fp)
 840d7ac:	1885883a 	add	r2,r3,r2
 840d7b0:	d0a01015 	stw	r2,-32704(gp)
 840d7b4:	e0bffd17 	ldw	r2,-12(fp)
 840d7b8:	e0bff915 	stw	r2,-28(fp)
 840d7bc:	e0bff917 	ldw	r2,-28(fp)
 840d7c0:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
 840d7c4:	e0bffc17 	ldw	r2,-16(fp)
 840d7c8:	e0bfff15 	stw	r2,-4(fp)
 840d7cc:	e0bfff17 	ldw	r2,-4(fp)
} 
 840d7d0:	e037883a 	mov	sp,fp
 840d7d4:	df000017 	ldw	fp,0(sp)
 840d7d8:	dec00104 	addi	sp,sp,4
 840d7dc:	f800283a 	ret

0840d7e0 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
 840d7e0:	defff704 	addi	sp,sp,-36
 840d7e4:	dfc00815 	stw	ra,32(sp)
 840d7e8:	df000715 	stw	fp,28(sp)
 840d7ec:	df000704 	addi	fp,sp,28
 840d7f0:	e13ffb15 	stw	r4,-20(fp)
 840d7f4:	e17ffc15 	stw	r5,-16(fp)
 840d7f8:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 840d7fc:	e0bffb17 	ldw	r2,-20(fp)
 840d800:	1004803a 	cmplt	r2,r2,zero
 840d804:	1000081e 	bne	r2,zero,840d828 <write+0x48>
 840d808:	e0bffb17 	ldw	r2,-20(fp)
 840d80c:	10800324 	muli	r2,r2,12
 840d810:	1007883a 	mov	r3,r2
 840d814:	00821074 	movhi	r2,2113
 840d818:	10898504 	addi	r2,r2,9748
 840d81c:	1887883a 	add	r3,r3,r2
 840d820:	e0ffff15 	stw	r3,-4(fp)
 840d824:	00000106 	br	840d82c <write+0x4c>
 840d828:	e03fff15 	stw	zero,-4(fp)
 840d82c:	e0bfff17 	ldw	r2,-4(fp)
 840d830:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
 840d834:	e0bffa17 	ldw	r2,-24(fp)
 840d838:	1005003a 	cmpeq	r2,r2,zero
 840d83c:	1000241e 	bne	r2,zero,840d8d0 <write+0xf0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
 840d840:	e0bffa17 	ldw	r2,-24(fp)
 840d844:	10800217 	ldw	r2,8(r2)
 840d848:	108000cc 	andi	r2,r2,3
 840d84c:	1005003a 	cmpeq	r2,r2,zero
 840d850:	10001a1e 	bne	r2,zero,840d8bc <write+0xdc>
 840d854:	e0bffa17 	ldw	r2,-24(fp)
 840d858:	10800017 	ldw	r2,0(r2)
 840d85c:	10800617 	ldw	r2,24(r2)
 840d860:	1005003a 	cmpeq	r2,r2,zero
 840d864:	1000151e 	bne	r2,zero,840d8bc <write+0xdc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
 840d868:	e0bffa17 	ldw	r2,-24(fp)
 840d86c:	10800017 	ldw	r2,0(r2)
 840d870:	10800617 	ldw	r2,24(r2)
 840d874:	e17ffc17 	ldw	r5,-16(fp)
 840d878:	e1bffd17 	ldw	r6,-12(fp)
 840d87c:	e13ffa17 	ldw	r4,-24(fp)
 840d880:	103ee83a 	callr	r2
 840d884:	e0bff915 	stw	r2,-28(fp)
 840d888:	e0bff917 	ldw	r2,-28(fp)
 840d88c:	1004403a 	cmpge	r2,r2,zero
 840d890:	1000071e 	bne	r2,zero,840d8b0 <write+0xd0>
      {
        ALT_ERRNO = -rval;
 840d894:	840d9000 	call	840d900 <alt_get_errno>
 840d898:	e0fff917 	ldw	r3,-28(fp)
 840d89c:	00c7c83a 	sub	r3,zero,r3
 840d8a0:	10c00015 	stw	r3,0(r2)
        return -1;
 840d8a4:	00bfffc4 	movi	r2,-1
 840d8a8:	e0bffe15 	stw	r2,-8(fp)
 840d8ac:	00000e06 	br	840d8e8 <write+0x108>
      }
      return rval;
 840d8b0:	e0bff917 	ldw	r2,-28(fp)
 840d8b4:	e0bffe15 	stw	r2,-8(fp)
 840d8b8:	00000b06 	br	840d8e8 <write+0x108>
    }
    else
    {
      ALT_ERRNO = EACCES;
 840d8bc:	840d9000 	call	840d900 <alt_get_errno>
 840d8c0:	1007883a 	mov	r3,r2
 840d8c4:	00800344 	movi	r2,13
 840d8c8:	18800015 	stw	r2,0(r3)
 840d8cc:	00000406 	br	840d8e0 <write+0x100>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
 840d8d0:	840d9000 	call	840d900 <alt_get_errno>
 840d8d4:	1007883a 	mov	r3,r2
 840d8d8:	00801444 	movi	r2,81
 840d8dc:	18800015 	stw	r2,0(r3)
  }
  return -1;
 840d8e0:	00bfffc4 	movi	r2,-1
 840d8e4:	e0bffe15 	stw	r2,-8(fp)
 840d8e8:	e0bffe17 	ldw	r2,-8(fp)
}
 840d8ec:	e037883a 	mov	sp,fp
 840d8f0:	dfc00117 	ldw	ra,4(sp)
 840d8f4:	df000017 	ldw	fp,0(sp)
 840d8f8:	dec00204 	addi	sp,sp,8
 840d8fc:	f800283a 	ret

0840d900 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 840d900:	defffd04 	addi	sp,sp,-12
 840d904:	dfc00215 	stw	ra,8(sp)
 840d908:	df000115 	stw	fp,4(sp)
 840d90c:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 840d910:	00821074 	movhi	r2,2113
 840d914:	108e5d04 	addi	r2,r2,14708
 840d918:	10800017 	ldw	r2,0(r2)
 840d91c:	1005003a 	cmpeq	r2,r2,zero
 840d920:	1000061e 	bne	r2,zero,840d93c <alt_get_errno+0x3c>
 840d924:	00821074 	movhi	r2,2113
 840d928:	108e5d04 	addi	r2,r2,14708
 840d92c:	10800017 	ldw	r2,0(r2)
 840d930:	103ee83a 	callr	r2
 840d934:	e0bfff15 	stw	r2,-4(fp)
 840d938:	00000306 	br	840d948 <alt_get_errno+0x48>
 840d93c:	00821074 	movhi	r2,2113
 840d940:	10956404 	addi	r2,r2,21904
 840d944:	e0bfff15 	stw	r2,-4(fp)
 840d948:	e0bfff17 	ldw	r2,-4(fp)
}
 840d94c:	e037883a 	mov	sp,fp
 840d950:	dfc00117 	ldw	ra,4(sp)
 840d954:	df000017 	ldw	fp,0(sp)
 840d958:	dec00204 	addi	sp,sp,8
 840d95c:	f800283a 	ret

0840d960 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 840d960:	defffd04 	addi	sp,sp,-12
 840d964:	dfc00215 	stw	ra,8(sp)
 840d968:	df000115 	stw	fp,4(sp)
 840d96c:	df000104 	addi	fp,sp,4
 840d970:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_IRQ_INIT ( CPU_1, cpu_1);
 840d974:	84111300 	call	8411130 <altera_nios2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 840d978:	00800044 	movi	r2,1
 840d97c:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 840d980:	e037883a 	mov	sp,fp
 840d984:	dfc00117 	ldw	ra,4(sp)
 840d988:	df000017 	ldw	fp,0(sp)
 840d98c:	dec00204 	addi	sp,sp,8
 840d990:	f800283a 	ret

0840d994 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 840d994:	defffd04 	addi	sp,sp,-12
 840d998:	dfc00215 	stw	ra,8(sp)
 840d99c:	df000115 	stw	fp,4(sp)
 840d9a0:	df000104 	addi	fp,sp,4
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_1, jtag_uart_1);
 840d9a4:	01021074 	movhi	r4,2113
 840d9a8:	2109ef04 	addi	r4,r4,10172
 840d9ac:	000b883a 	mov	r5,zero
 840d9b0:	01800044 	movi	r6,1
 840d9b4:	840dd8c0 	call	840dd8c <altera_avalon_jtag_uart_init>
 840d9b8:	01021074 	movhi	r4,2113
 840d9bc:	2109e504 	addi	r4,r4,10132
 840d9c0:	840dc0c0 	call	840dc0c <alt_dev_reg>
    ALTERA_AVALON_MAILBOX_INIT ( MAILBOX_0, mailbox_0);
 840d9c4:	01021074 	movhi	r4,2113
 840d9c8:	210dfd04 	addi	r4,r4,14324
 840d9cc:	840e6f00 	call	840e6f0 <alt_avalon_mailbox_init>
    ALTERA_AVALON_MAILBOX_INIT ( MAILBOX_1, mailbox_1);
 840d9d0:	01021074 	movhi	r4,2113
 840d9d4:	210e0c04 	addi	r4,r4,14384
 840d9d8:	840e6f00 	call	840e6f0 <alt_avalon_mailbox_init>
    ALTERA_AVALON_MAILBOX_INIT ( MAILBOX_2, mailbox_2);
 840d9dc:	01021074 	movhi	r4,2113
 840d9e0:	210e1b04 	addi	r4,r4,14444
 840d9e4:	840e6f00 	call	840e6f0 <alt_avalon_mailbox_init>
    ALTERA_AVALON_MAILBOX_INIT ( MAILBOX_3, mailbox_3);
 840d9e8:	01021074 	movhi	r4,2113
 840d9ec:	210e2a04 	addi	r4,r4,14504
 840d9f0:	840e6f00 	call	840e6f0 <alt_avalon_mailbox_init>
    ALTERA_AVALON_PERFORMANCE_COUNTER_INIT ( PERFORMANCE_COUNTER_0, performance_counter_0);
 840d9f4:	0007883a 	mov	r3,zero
 840d9f8:	00800044 	movi	r2,1
 840d9fc:	18800035 	stwio	r2,0(r3)
    ALTERA_AVALON_SYSID_INIT ( SYSID, sysid);
    ALTERA_UP_AVALON_VIDEO_PIXEL_BUFFER_DMA_INIT ( VIDEO_PIXEL_BUFFER_DMA_0, video_pixel_buffer_dma_0);
 840da00:	00821074 	movhi	r2,2113
 840da04:	108e3904 	addi	r2,r2,14564
 840da08:	10800a17 	ldw	r2,40(r2)
 840da0c:	10800017 	ldw	r2,0(r2)
 840da10:	1007883a 	mov	r3,r2
 840da14:	00821074 	movhi	r2,2113
 840da18:	108e3904 	addi	r2,r2,14564
 840da1c:	10c00b15 	stw	r3,44(r2)
 840da20:	00821074 	movhi	r2,2113
 840da24:	108e3904 	addi	r2,r2,14564
 840da28:	10800a17 	ldw	r2,40(r2)
 840da2c:	10800104 	addi	r2,r2,4
 840da30:	10800017 	ldw	r2,0(r2)
 840da34:	1007883a 	mov	r3,r2
 840da38:	00821074 	movhi	r2,2113
 840da3c:	108e3904 	addi	r2,r2,14564
 840da40:	10c00c15 	stw	r3,48(r2)
 840da44:	00821074 	movhi	r2,2113
 840da48:	108e3904 	addi	r2,r2,14564
 840da4c:	10800a17 	ldw	r2,40(r2)
 840da50:	10800204 	addi	r2,r2,8
 840da54:	10800017 	ldw	r2,0(r2)
 840da58:	10ffffcc 	andi	r3,r2,65535
 840da5c:	00821074 	movhi	r2,2113
 840da60:	108e3904 	addi	r2,r2,14564
 840da64:	10c00f15 	stw	r3,60(r2)
 840da68:	00821074 	movhi	r2,2113
 840da6c:	108e3904 	addi	r2,r2,14564
 840da70:	10800a17 	ldw	r2,40(r2)
 840da74:	10800204 	addi	r2,r2,8
 840da78:	10800017 	ldw	r2,0(r2)
 840da7c:	1005d43a 	srai	r2,r2,16
 840da80:	10ffffcc 	andi	r3,r2,65535
 840da84:	00821074 	movhi	r2,2113
 840da88:	108e3904 	addi	r2,r2,14564
 840da8c:	10c01015 	stw	r3,64(r2)
 840da90:	00821074 	movhi	r2,2113
 840da94:	108e3904 	addi	r2,r2,14564
 840da98:	10800a17 	ldw	r2,40(r2)
 840da9c:	10800304 	addi	r2,r2,12
 840daa0:	10800017 	ldw	r2,0(r2)
 840daa4:	1005d07a 	srai	r2,r2,1
 840daa8:	10c0004c 	andi	r3,r2,1
 840daac:	00821074 	movhi	r2,2113
 840dab0:	108e3904 	addi	r2,r2,14564
 840dab4:	10c00d15 	stw	r3,52(r2)
 840dab8:	00821074 	movhi	r2,2113
 840dabc:	108e3904 	addi	r2,r2,14564
 840dac0:	10800a17 	ldw	r2,40(r2)
 840dac4:	10800304 	addi	r2,r2,12
 840dac8:	10800017 	ldw	r2,0(r2)
 840dacc:	1005d13a 	srai	r2,r2,4
 840dad0:	10c003cc 	andi	r3,r2,15
 840dad4:	00821074 	movhi	r2,2113
 840dad8:	108e3904 	addi	r2,r2,14564
 840dadc:	10c00e15 	stw	r3,56(r2)
 840dae0:	00821074 	movhi	r2,2113
 840dae4:	108e3904 	addi	r2,r2,14564
 840dae8:	10800a17 	ldw	r2,40(r2)
 840daec:	10800304 	addi	r2,r2,12
 840daf0:	10800017 	ldw	r2,0(r2)
 840daf4:	1005d43a 	srai	r2,r2,16
 840daf8:	1007883a 	mov	r3,r2
 840dafc:	00bfffc4 	movi	r2,-1
 840db00:	1884703a 	and	r2,r3,r2
 840db04:	e0bfff45 	stb	r2,-3(fp)
 840db08:	00821074 	movhi	r2,2113
 840db0c:	108e3904 	addi	r2,r2,14564
 840db10:	10800a17 	ldw	r2,40(r2)
 840db14:	10800304 	addi	r2,r2,12
 840db18:	10800017 	ldw	r2,0(r2)
 840db1c:	1005d63a 	srai	r2,r2,24
 840db20:	1007883a 	mov	r3,r2
 840db24:	00bfffc4 	movi	r2,-1
 840db28:	1884703a 	and	r2,r3,r2
 840db2c:	e0bfff05 	stb	r2,-4(fp)
 840db30:	00821074 	movhi	r2,2113
 840db34:	108e3904 	addi	r2,r2,14564
 840db38:	10800e17 	ldw	r2,56(r2)
 840db3c:	10800058 	cmpnei	r2,r2,1
 840db40:	1000041e 	bne	r2,zero,840db54 <alt_sys_init+0x1c0>
 840db44:	00821074 	movhi	r2,2113
 840db48:	108e3904 	addi	r2,r2,14564
 840db4c:	10001115 	stw	zero,68(r2)
 840db50:	00000e06 	br	840db8c <alt_sys_init+0x1f8>
 840db54:	00821074 	movhi	r2,2113
 840db58:	108e3904 	addi	r2,r2,14564
 840db5c:	10800e17 	ldw	r2,56(r2)
 840db60:	10800098 	cmpnei	r2,r2,2
 840db64:	1000051e 	bne	r2,zero,840db7c <alt_sys_init+0x1e8>
 840db68:	00c21074 	movhi	r3,2113
 840db6c:	18ce3904 	addi	r3,r3,14564
 840db70:	00800044 	movi	r2,1
 840db74:	18801115 	stw	r2,68(r3)
 840db78:	00000406 	br	840db8c <alt_sys_init+0x1f8>
 840db7c:	00c21074 	movhi	r3,2113
 840db80:	18ce3904 	addi	r3,r3,14564
 840db84:	00800084 	movi	r2,2
 840db88:	18801115 	stw	r2,68(r3)
 840db8c:	e0ffff43 	ldbu	r3,-3(fp)
 840db90:	00800804 	movi	r2,32
 840db94:	10c7c83a 	sub	r3,r2,r3
 840db98:	00bfffc4 	movi	r2,-1
 840db9c:	10c6d83a 	srl	r3,r2,r3
 840dba0:	00821074 	movhi	r2,2113
 840dba4:	108e3904 	addi	r2,r2,14564
 840dba8:	10c01215 	stw	r3,72(r2)
 840dbac:	e0ffff43 	ldbu	r3,-3(fp)
 840dbb0:	00821074 	movhi	r2,2113
 840dbb4:	108e3904 	addi	r2,r2,14564
 840dbb8:	10801117 	ldw	r2,68(r2)
 840dbbc:	1887883a 	add	r3,r3,r2
 840dbc0:	00821074 	movhi	r2,2113
 840dbc4:	108e3904 	addi	r2,r2,14564
 840dbc8:	10c01315 	stw	r3,76(r2)
 840dbcc:	e0ffff03 	ldbu	r3,-4(fp)
 840dbd0:	00800804 	movi	r2,32
 840dbd4:	10c7c83a 	sub	r3,r2,r3
 840dbd8:	00bfffc4 	movi	r2,-1
 840dbdc:	10c6d83a 	srl	r3,r2,r3
 840dbe0:	00821074 	movhi	r2,2113
 840dbe4:	108e3904 	addi	r2,r2,14564
 840dbe8:	10c01415 	stw	r3,80(r2)
 840dbec:	01021074 	movhi	r4,2113
 840dbf0:	210e3904 	addi	r4,r4,14564
 840dbf4:	840dc0c0 	call	840dc0c <alt_dev_reg>
}
 840dbf8:	e037883a 	mov	sp,fp
 840dbfc:	dfc00117 	ldw	ra,4(sp)
 840dc00:	df000017 	ldw	fp,0(sp)
 840dc04:	dec00204 	addi	sp,sp,8
 840dc08:	f800283a 	ret

0840dc0c <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
 840dc0c:	defffd04 	addi	sp,sp,-12
 840dc10:	dfc00215 	stw	ra,8(sp)
 840dc14:	df000115 	stw	fp,4(sp)
 840dc18:	df000104 	addi	fp,sp,4
 840dc1c:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 840dc20:	e13fff17 	ldw	r4,-4(fp)
 840dc24:	01421074 	movhi	r5,2113
 840dc28:	294e5a04 	addi	r5,r5,14696
 840dc2c:	84106200 	call	8410620 <alt_dev_llist_insert>
}
 840dc30:	e037883a 	mov	sp,fp
 840dc34:	dfc00117 	ldw	ra,4(sp)
 840dc38:	df000017 	ldw	fp,0(sp)
 840dc3c:	dec00204 	addi	sp,sp,8
 840dc40:	f800283a 	ret

0840dc44 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 840dc44:	defffa04 	addi	sp,sp,-24
 840dc48:	dfc00515 	stw	ra,20(sp)
 840dc4c:	df000415 	stw	fp,16(sp)
 840dc50:	df000404 	addi	fp,sp,16
 840dc54:	e13ffd15 	stw	r4,-12(fp)
 840dc58:	e17ffe15 	stw	r5,-8(fp)
 840dc5c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 840dc60:	e0bffd17 	ldw	r2,-12(fp)
 840dc64:	10800017 	ldw	r2,0(r2)
 840dc68:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 840dc6c:	e0bffc17 	ldw	r2,-16(fp)
 840dc70:	11000a04 	addi	r4,r2,40
 840dc74:	e0bffd17 	ldw	r2,-12(fp)
 840dc78:	11c00217 	ldw	r7,8(r2)
 840dc7c:	e17ffe17 	ldw	r5,-8(fp)
 840dc80:	e1bfff17 	ldw	r6,-4(fp)
 840dc84:	840e28c0 	call	840e28c <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
 840dc88:	e037883a 	mov	sp,fp
 840dc8c:	dfc00117 	ldw	ra,4(sp)
 840dc90:	df000017 	ldw	fp,0(sp)
 840dc94:	dec00204 	addi	sp,sp,8
 840dc98:	f800283a 	ret

0840dc9c <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 840dc9c:	defffa04 	addi	sp,sp,-24
 840dca0:	dfc00515 	stw	ra,20(sp)
 840dca4:	df000415 	stw	fp,16(sp)
 840dca8:	df000404 	addi	fp,sp,16
 840dcac:	e13ffd15 	stw	r4,-12(fp)
 840dcb0:	e17ffe15 	stw	r5,-8(fp)
 840dcb4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 840dcb8:	e0bffd17 	ldw	r2,-12(fp)
 840dcbc:	10800017 	ldw	r2,0(r2)
 840dcc0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 840dcc4:	e0bffc17 	ldw	r2,-16(fp)
 840dcc8:	11000a04 	addi	r4,r2,40
 840dccc:	e0bffd17 	ldw	r2,-12(fp)
 840dcd0:	11c00217 	ldw	r7,8(r2)
 840dcd4:	e17ffe17 	ldw	r5,-8(fp)
 840dcd8:	e1bfff17 	ldw	r6,-4(fp)
 840dcdc:	840e4b00 	call	840e4b0 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
 840dce0:	e037883a 	mov	sp,fp
 840dce4:	dfc00117 	ldw	ra,4(sp)
 840dce8:	df000017 	ldw	fp,0(sp)
 840dcec:	dec00204 	addi	sp,sp,8
 840dcf0:	f800283a 	ret

0840dcf4 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
 840dcf4:	defffc04 	addi	sp,sp,-16
 840dcf8:	dfc00315 	stw	ra,12(sp)
 840dcfc:	df000215 	stw	fp,8(sp)
 840dd00:	df000204 	addi	fp,sp,8
 840dd04:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 840dd08:	e0bfff17 	ldw	r2,-4(fp)
 840dd0c:	10800017 	ldw	r2,0(r2)
 840dd10:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
 840dd14:	e0bffe17 	ldw	r2,-8(fp)
 840dd18:	11000a04 	addi	r4,r2,40
 840dd1c:	e0bfff17 	ldw	r2,-4(fp)
 840dd20:	11400217 	ldw	r5,8(r2)
 840dd24:	840e1240 	call	840e124 <altera_avalon_jtag_uart_close>
}
 840dd28:	e037883a 	mov	sp,fp
 840dd2c:	dfc00117 	ldw	ra,4(sp)
 840dd30:	df000017 	ldw	fp,0(sp)
 840dd34:	dec00204 	addi	sp,sp,8
 840dd38:	f800283a 	ret

0840dd3c <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
 840dd3c:	defffa04 	addi	sp,sp,-24
 840dd40:	dfc00515 	stw	ra,20(sp)
 840dd44:	df000415 	stw	fp,16(sp)
 840dd48:	df000404 	addi	fp,sp,16
 840dd4c:	e13ffd15 	stw	r4,-12(fp)
 840dd50:	e17ffe15 	stw	r5,-8(fp)
 840dd54:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
 840dd58:	e0bffd17 	ldw	r2,-12(fp)
 840dd5c:	10800017 	ldw	r2,0(r2)
 840dd60:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
 840dd64:	e0bffc17 	ldw	r2,-16(fp)
 840dd68:	11000a04 	addi	r4,r2,40
 840dd6c:	e17ffe17 	ldw	r5,-8(fp)
 840dd70:	e1bfff17 	ldw	r6,-4(fp)
 840dd74:	840e1980 	call	840e198 <altera_avalon_jtag_uart_ioctl>
}
 840dd78:	e037883a 	mov	sp,fp
 840dd7c:	dfc00117 	ldw	ra,4(sp)
 840dd80:	df000017 	ldw	fp,0(sp)
 840dd84:	dec00204 	addi	sp,sp,8
 840dd88:	f800283a 	ret

0840dd8c <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
 840dd8c:	defffa04 	addi	sp,sp,-24
 840dd90:	dfc00515 	stw	ra,20(sp)
 840dd94:	df000415 	stw	fp,16(sp)
 840dd98:	df000404 	addi	fp,sp,16
 840dd9c:	e13ffd15 	stw	r4,-12(fp)
 840dda0:	e17ffe15 	stw	r5,-8(fp)
 840dda4:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 840dda8:	e0fffd17 	ldw	r3,-12(fp)
 840ddac:	00800044 	movi	r2,1
 840ddb0:	18800815 	stw	r2,32(r3)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
 840ddb4:	e0bffd17 	ldw	r2,-12(fp)
 840ddb8:	10800017 	ldw	r2,0(r2)
 840ddbc:	11000104 	addi	r4,r2,4
 840ddc0:	e0bffd17 	ldw	r2,-12(fp)
 840ddc4:	10800817 	ldw	r2,32(r2)
 840ddc8:	1007883a 	mov	r3,r2
 840ddcc:	2005883a 	mov	r2,r4
 840ddd0:	10c00035 	stwio	r3,0(r2)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
 840ddd4:	e13ffe17 	ldw	r4,-8(fp)
 840ddd8:	e17fff17 	ldw	r5,-4(fp)
 840dddc:	d8000015 	stw	zero,0(sp)
 840dde0:	01821074 	movhi	r6,2113
 840dde4:	31b79304 	addi	r6,r6,-8628
 840dde8:	e1fffd17 	ldw	r7,-12(fp)
 840ddec:	84108c00 	call	84108c0 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
 840ddf0:	e0bffd17 	ldw	r2,-12(fp)
 840ddf4:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
 840ddf8:	e0bffd17 	ldw	r2,-12(fp)
 840ddfc:	11000204 	addi	r4,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 840de00:	00821074 	movhi	r2,2113
 840de04:	10956904 	addi	r2,r2,21924
 840de08:	10800017 	ldw	r2,0(r2)
 840de0c:	100b883a 	mov	r5,r2
 840de10:	01821074 	movhi	r6,2113
 840de14:	31b81d04 	addi	r6,r6,-8076
 840de18:	e1fffd17 	ldw	r7,-12(fp)
 840de1c:	84104880 	call	8410488 <alt_alarm_start>
 840de20:	1004403a 	cmpge	r2,r2,zero
 840de24:	1000041e 	bne	r2,zero,840de38 <altera_avalon_jtag_uart_init+0xac>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
 840de28:	e0fffd17 	ldw	r3,-12(fp)
 840de2c:	00a00034 	movhi	r2,32768
 840de30:	10bfffc4 	addi	r2,r2,-1
 840de34:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
 840de38:	e037883a 	mov	sp,fp
 840de3c:	dfc00117 	ldw	ra,4(sp)
 840de40:	df000017 	ldw	fp,0(sp)
 840de44:	dec00204 	addi	sp,sp,8
 840de48:	f800283a 	ret

0840de4c <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
 840de4c:	defff804 	addi	sp,sp,-32
 840de50:	df000715 	stw	fp,28(sp)
 840de54:	df000704 	addi	fp,sp,28
 840de58:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
 840de5c:	e0bfff17 	ldw	r2,-4(fp)
 840de60:	e0bffe15 	stw	r2,-8(fp)
  unsigned int base = sp->base;
 840de64:	e0bffe17 	ldw	r2,-8(fp)
 840de68:	10800017 	ldw	r2,0(r2)
 840de6c:	e0bffd15 	stw	r2,-12(fp)
 840de70:	00000006 	br	840de74 <altera_avalon_jtag_uart_irq+0x28>
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 840de74:	e0bffd17 	ldw	r2,-12(fp)
 840de78:	10800104 	addi	r2,r2,4
 840de7c:	10800037 	ldwio	r2,0(r2)
 840de80:	e0bffc15 	stw	r2,-16(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
 840de84:	e0bffc17 	ldw	r2,-16(fp)
 840de88:	1080c00c 	andi	r2,r2,768
 840de8c:	1005003a 	cmpeq	r2,r2,zero
 840de90:	1000741e 	bne	r2,zero,840e064 <altera_avalon_jtag_uart_irq+0x218>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
 840de94:	e0bffc17 	ldw	r2,-16(fp)
 840de98:	1080400c 	andi	r2,r2,256
 840de9c:	1005003a 	cmpeq	r2,r2,zero
 840dea0:	1000351e 	bne	r2,zero,840df78 <altera_avalon_jtag_uart_irq+0x12c>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
 840dea4:	00800074 	movhi	r2,1
 840dea8:	e0bffb15 	stw	r2,-20(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 840deac:	e0bffe17 	ldw	r2,-8(fp)
 840deb0:	10800a17 	ldw	r2,40(r2)
 840deb4:	10800044 	addi	r2,r2,1
 840deb8:	1081ffcc 	andi	r2,r2,2047
 840debc:	e0bffa15 	stw	r2,-24(fp)
        if (next == sp->rx_out)
 840dec0:	e0bffe17 	ldw	r2,-8(fp)
 840dec4:	10c00b17 	ldw	r3,44(r2)
 840dec8:	e0bffa17 	ldw	r2,-24(fp)
 840decc:	18801626 	beq	r3,r2,840df28 <altera_avalon_jtag_uart_irq+0xdc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 840ded0:	e0bffd17 	ldw	r2,-12(fp)
 840ded4:	10800037 	ldwio	r2,0(r2)
 840ded8:	e0bffb15 	stw	r2,-20(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
 840dedc:	e0bffb17 	ldw	r2,-20(fp)
 840dee0:	10a0000c 	andi	r2,r2,32768
 840dee4:	1005003a 	cmpeq	r2,r2,zero
 840dee8:	10000f1e 	bne	r2,zero,840df28 <altera_avalon_jtag_uart_irq+0xdc>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 840deec:	e0bffe17 	ldw	r2,-8(fp)
 840def0:	10c00a17 	ldw	r3,40(r2)
 840def4:	e0bffb17 	ldw	r2,-20(fp)
 840def8:	1009883a 	mov	r4,r2
 840defc:	e0bffe17 	ldw	r2,-8(fp)
 840df00:	1885883a 	add	r2,r3,r2
 840df04:	10800e04 	addi	r2,r2,56
 840df08:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 840df0c:	e0bffe17 	ldw	r2,-8(fp)
 840df10:	10800a17 	ldw	r2,40(r2)
 840df14:	10800044 	addi	r2,r2,1
 840df18:	10c1ffcc 	andi	r3,r2,2047
 840df1c:	e0bffe17 	ldw	r2,-8(fp)
 840df20:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
 840df24:	003fe106 	br	840deac <altera_avalon_jtag_uart_irq+0x60>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
 840df28:	e0bffb17 	ldw	r2,-20(fp)
 840df2c:	10bfffec 	andhi	r2,r2,65535
 840df30:	1005003a 	cmpeq	r2,r2,zero
 840df34:	1000101e 	bne	r2,zero,840df78 <altera_avalon_jtag_uart_irq+0x12c>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 840df38:	e0bffe17 	ldw	r2,-8(fp)
 840df3c:	10c00817 	ldw	r3,32(r2)
 840df40:	00bfff84 	movi	r2,-2
 840df44:	1886703a 	and	r3,r3,r2
 840df48:	e0bffe17 	ldw	r2,-8(fp)
 840df4c:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
 840df50:	e0bffd17 	ldw	r2,-12(fp)
 840df54:	11000104 	addi	r4,r2,4
 840df58:	e0bffe17 	ldw	r2,-8(fp)
 840df5c:	10800817 	ldw	r2,32(r2)
 840df60:	1007883a 	mov	r3,r2
 840df64:	2005883a 	mov	r2,r4
 840df68:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 840df6c:	e0bffd17 	ldw	r2,-12(fp)
 840df70:	10800104 	addi	r2,r2,4
 840df74:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
 840df78:	e0bffc17 	ldw	r2,-16(fp)
 840df7c:	1080800c 	andi	r2,r2,512
 840df80:	1005003a 	cmpeq	r2,r2,zero
 840df84:	103fbb1e 	bne	r2,zero,840de74 <altera_avalon_jtag_uart_irq+0x28>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
 840df88:	e0bffc17 	ldw	r2,-16(fp)
 840df8c:	10bfffec 	andhi	r2,r2,65535
 840df90:	1004d43a 	srli	r2,r2,16
 840df94:	e0bff915 	stw	r2,-28(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
 840df98:	00001506 	br	840dff0 <altera_avalon_jtag_uart_irq+0x1a4>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
 840df9c:	e13ffd17 	ldw	r4,-12(fp)
 840dfa0:	e0bffe17 	ldw	r2,-8(fp)
 840dfa4:	10c00d17 	ldw	r3,52(r2)
 840dfa8:	e0bffe17 	ldw	r2,-8(fp)
 840dfac:	1885883a 	add	r2,r3,r2
 840dfb0:	10820e04 	addi	r2,r2,2104
 840dfb4:	10800003 	ldbu	r2,0(r2)
 840dfb8:	10c03fcc 	andi	r3,r2,255
 840dfbc:	18c0201c 	xori	r3,r3,128
 840dfc0:	18ffe004 	addi	r3,r3,-128
 840dfc4:	2005883a 	mov	r2,r4
 840dfc8:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 840dfcc:	e0bffe17 	ldw	r2,-8(fp)
 840dfd0:	10800d17 	ldw	r2,52(r2)
 840dfd4:	10800044 	addi	r2,r2,1
 840dfd8:	10c1ffcc 	andi	r3,r2,2047
 840dfdc:	e0bffe17 	ldw	r2,-8(fp)
 840dfe0:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
 840dfe4:	e0bff917 	ldw	r2,-28(fp)
 840dfe8:	10bfffc4 	addi	r2,r2,-1
 840dfec:	e0bff915 	stw	r2,-28(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
 840dff0:	e0bff917 	ldw	r2,-28(fp)
 840dff4:	1005003a 	cmpeq	r2,r2,zero
 840dff8:	1000051e 	bne	r2,zero,840e010 <altera_avalon_jtag_uart_irq+0x1c4>
 840dffc:	e0bffe17 	ldw	r2,-8(fp)
 840e000:	10c00d17 	ldw	r3,52(r2)
 840e004:	e0bffe17 	ldw	r2,-8(fp)
 840e008:	10800c17 	ldw	r2,48(r2)
 840e00c:	18bfe31e 	bne	r3,r2,840df9c <altera_avalon_jtag_uart_irq+0x150>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
 840e010:	e0bff917 	ldw	r2,-28(fp)
 840e014:	1005003a 	cmpeq	r2,r2,zero
 840e018:	103f961e 	bne	r2,zero,840de74 <altera_avalon_jtag_uart_irq+0x28>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 840e01c:	e0bffe17 	ldw	r2,-8(fp)
 840e020:	10c00817 	ldw	r3,32(r2)
 840e024:	00bfff44 	movi	r2,-3
 840e028:	1886703a 	and	r3,r3,r2
 840e02c:	e0bffe17 	ldw	r2,-8(fp)
 840e030:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 840e034:	e0bffe17 	ldw	r2,-8(fp)
 840e038:	10800017 	ldw	r2,0(r2)
 840e03c:	11000104 	addi	r4,r2,4
 840e040:	e0bffe17 	ldw	r2,-8(fp)
 840e044:	10800817 	ldw	r2,32(r2)
 840e048:	1007883a 	mov	r3,r2
 840e04c:	2005883a 	mov	r2,r4
 840e050:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 840e054:	e0bffd17 	ldw	r2,-12(fp)
 840e058:	10800104 	addi	r2,r2,4
 840e05c:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
 840e060:	003f8406 	br	840de74 <altera_avalon_jtag_uart_irq+0x28>
}
 840e064:	e037883a 	mov	sp,fp
 840e068:	df000017 	ldw	fp,0(sp)
 840e06c:	dec00104 	addi	sp,sp,4
 840e070:	f800283a 	ret

0840e074 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
 840e074:	defffc04 	addi	sp,sp,-16
 840e078:	df000315 	stw	fp,12(sp)
 840e07c:	df000304 	addi	fp,sp,12
 840e080:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
 840e084:	e0bfff17 	ldw	r2,-4(fp)
 840e088:	e0bffe15 	stw	r2,-8(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
 840e08c:	e0bffe17 	ldw	r2,-8(fp)
 840e090:	10800017 	ldw	r2,0(r2)
 840e094:	10800104 	addi	r2,r2,4
 840e098:	10800037 	ldwio	r2,0(r2)
 840e09c:	e0bffd15 	stw	r2,-12(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
 840e0a0:	e0bffd17 	ldw	r2,-12(fp)
 840e0a4:	1081000c 	andi	r2,r2,1024
 840e0a8:	1005003a 	cmpeq	r2,r2,zero
 840e0ac:	10000c1e 	bne	r2,zero,840e0e0 <altera_avalon_jtag_uart_timeout+0x6c>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
 840e0b0:	e0bffe17 	ldw	r2,-8(fp)
 840e0b4:	10800017 	ldw	r2,0(r2)
 840e0b8:	11000104 	addi	r4,r2,4
 840e0bc:	e0bffe17 	ldw	r2,-8(fp)
 840e0c0:	10800817 	ldw	r2,32(r2)
 840e0c4:	10810014 	ori	r2,r2,1024
 840e0c8:	1007883a 	mov	r3,r2
 840e0cc:	2005883a 	mov	r2,r4
 840e0d0:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
 840e0d4:	e0bffe17 	ldw	r2,-8(fp)
 840e0d8:	10000915 	stw	zero,36(r2)
 840e0dc:	00000a06 	br	840e108 <altera_avalon_jtag_uart_timeout+0x94>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
 840e0e0:	e0bffe17 	ldw	r2,-8(fp)
 840e0e4:	10c00917 	ldw	r3,36(r2)
 840e0e8:	00a00034 	movhi	r2,32768
 840e0ec:	10bfff04 	addi	r2,r2,-4
 840e0f0:	10c00536 	bltu	r2,r3,840e108 <altera_avalon_jtag_uart_timeout+0x94>
    sp->host_inactive++;
 840e0f4:	e0bffe17 	ldw	r2,-8(fp)
 840e0f8:	10800917 	ldw	r2,36(r2)
 840e0fc:	10c00044 	addi	r3,r2,1
 840e100:	e0bffe17 	ldw	r2,-8(fp)
 840e104:	10c00915 	stw	r3,36(r2)
 840e108:	00821074 	movhi	r2,2113
 840e10c:	10956904 	addi	r2,r2,21924
 840e110:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
 840e114:	e037883a 	mov	sp,fp
 840e118:	df000017 	ldw	fp,0(sp)
 840e11c:	dec00104 	addi	sp,sp,4
 840e120:	f800283a 	ret

0840e124 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
 840e124:	defffc04 	addi	sp,sp,-16
 840e128:	df000315 	stw	fp,12(sp)
 840e12c:	df000304 	addi	fp,sp,12
 840e130:	e13ffd15 	stw	r4,-12(fp)
 840e134:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 840e138:	00000706 	br	840e158 <altera_avalon_jtag_uart_close+0x34>
    if (flags & O_NONBLOCK) {
 840e13c:	e0bffe17 	ldw	r2,-8(fp)
 840e140:	1090000c 	andi	r2,r2,16384
 840e144:	1005003a 	cmpeq	r2,r2,zero
 840e148:	1000031e 	bne	r2,zero,840e158 <altera_avalon_jtag_uart_close+0x34>
      return -EWOULDBLOCK; 
 840e14c:	00bffd44 	movi	r2,-11
 840e150:	e0bfff15 	stw	r2,-4(fp)
 840e154:	00000b06 	br	840e184 <altera_avalon_jtag_uart_close+0x60>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 840e158:	e0bffd17 	ldw	r2,-12(fp)
 840e15c:	10c00d17 	ldw	r3,52(r2)
 840e160:	e0bffd17 	ldw	r2,-12(fp)
 840e164:	10800c17 	ldw	r2,48(r2)
 840e168:	18800526 	beq	r3,r2,840e180 <altera_avalon_jtag_uart_close+0x5c>
 840e16c:	e0bffd17 	ldw	r2,-12(fp)
 840e170:	10c00917 	ldw	r3,36(r2)
 840e174:	e0bffd17 	ldw	r2,-12(fp)
 840e178:	10800117 	ldw	r2,4(r2)
 840e17c:	18bfef36 	bltu	r3,r2,840e13c <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
 840e180:	e03fff15 	stw	zero,-4(fp)
 840e184:	e0bfff17 	ldw	r2,-4(fp)
}
 840e188:	e037883a 	mov	sp,fp
 840e18c:	df000017 	ldw	fp,0(sp)
 840e190:	dec00104 	addi	sp,sp,4
 840e194:	f800283a 	ret

0840e198 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
 840e198:	defff804 	addi	sp,sp,-32
 840e19c:	df000715 	stw	fp,28(sp)
 840e1a0:	df000704 	addi	fp,sp,28
 840e1a4:	e13ffb15 	stw	r4,-20(fp)
 840e1a8:	e17ffc15 	stw	r5,-16(fp)
 840e1ac:	e1bffd15 	stw	r6,-12(fp)
  int rc = -ENOTTY;
 840e1b0:	00bff9c4 	movi	r2,-25
 840e1b4:	e0bffa15 	stw	r2,-24(fp)

  switch (req)
 840e1b8:	e0bffc17 	ldw	r2,-16(fp)
 840e1bc:	e0bfff15 	stw	r2,-4(fp)
 840e1c0:	e0ffff17 	ldw	r3,-4(fp)
 840e1c4:	189a8060 	cmpeqi	r2,r3,27137
 840e1c8:	1000041e 	bne	r2,zero,840e1dc <altera_avalon_jtag_uart_ioctl+0x44>
 840e1cc:	e0ffff17 	ldw	r3,-4(fp)
 840e1d0:	189a80a0 	cmpeqi	r2,r3,27138
 840e1d4:	10001b1e 	bne	r2,zero,840e244 <altera_avalon_jtag_uart_ioctl+0xac>
 840e1d8:	00002706 	br	840e278 <altera_avalon_jtag_uart_ioctl+0xe0>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
 840e1dc:	e0bffb17 	ldw	r2,-20(fp)
 840e1e0:	10c00117 	ldw	r3,4(r2)
 840e1e4:	00a00034 	movhi	r2,32768
 840e1e8:	10bfffc4 	addi	r2,r2,-1
 840e1ec:	18802226 	beq	r3,r2,840e278 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
 840e1f0:	e0bffd17 	ldw	r2,-12(fp)
 840e1f4:	10800017 	ldw	r2,0(r2)
 840e1f8:	e0bff915 	stw	r2,-28(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
 840e1fc:	e0bff917 	ldw	r2,-28(fp)
 840e200:	10800090 	cmplti	r2,r2,2
 840e204:	1000071e 	bne	r2,zero,840e224 <altera_avalon_jtag_uart_ioctl+0x8c>
 840e208:	e0fff917 	ldw	r3,-28(fp)
 840e20c:	00a00034 	movhi	r2,32768
 840e210:	10bfffc4 	addi	r2,r2,-1
 840e214:	18800326 	beq	r3,r2,840e224 <altera_avalon_jtag_uart_ioctl+0x8c>
 840e218:	e0bff917 	ldw	r2,-28(fp)
 840e21c:	e0bffe15 	stw	r2,-8(fp)
 840e220:	00000306 	br	840e230 <altera_avalon_jtag_uart_ioctl+0x98>
 840e224:	00e00034 	movhi	r3,32768
 840e228:	18ffff84 	addi	r3,r3,-2
 840e22c:	e0fffe15 	stw	r3,-8(fp)
 840e230:	e0bffb17 	ldw	r2,-20(fp)
 840e234:	e0fffe17 	ldw	r3,-8(fp)
 840e238:	10c00115 	stw	r3,4(r2)
      rc = 0;
 840e23c:	e03ffa15 	stw	zero,-24(fp)
    }
    break;
 840e240:	00000d06 	br	840e278 <altera_avalon_jtag_uart_ioctl+0xe0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
 840e244:	e0bffb17 	ldw	r2,-20(fp)
 840e248:	10c00117 	ldw	r3,4(r2)
 840e24c:	00a00034 	movhi	r2,32768
 840e250:	10bfffc4 	addi	r2,r2,-1
 840e254:	18800826 	beq	r3,r2,840e278 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
 840e258:	e13ffd17 	ldw	r4,-12(fp)
 840e25c:	e0bffb17 	ldw	r2,-20(fp)
 840e260:	10c00917 	ldw	r3,36(r2)
 840e264:	e0bffb17 	ldw	r2,-20(fp)
 840e268:	10800117 	ldw	r2,4(r2)
 840e26c:	1885803a 	cmpltu	r2,r3,r2
 840e270:	20800015 	stw	r2,0(r4)
      rc = 0;
 840e274:	e03ffa15 	stw	zero,-24(fp)

  default:
    break;
  }

  return rc;
 840e278:	e0bffa17 	ldw	r2,-24(fp)
}
 840e27c:	e037883a 	mov	sp,fp
 840e280:	df000017 	ldw	fp,0(sp)
 840e284:	dec00104 	addi	sp,sp,4
 840e288:	f800283a 	ret

0840e28c <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
 840e28c:	defff204 	addi	sp,sp,-56
 840e290:	dfc00d15 	stw	ra,52(sp)
 840e294:	df000c15 	stw	fp,48(sp)
 840e298:	df000c04 	addi	fp,sp,48
 840e29c:	e13ffb15 	stw	r4,-20(fp)
 840e2a0:	e17ffc15 	stw	r5,-16(fp)
 840e2a4:	e1bffd15 	stw	r6,-12(fp)
 840e2a8:	e1fffe15 	stw	r7,-8(fp)
  char * ptr = buffer;
 840e2ac:	e0bffc17 	ldw	r2,-16(fp)
 840e2b0:	e0bffa15 	stw	r2,-24(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 840e2b4:	00004806 	br	840e3d8 <altera_avalon_jtag_uart_read+0x14c>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
 840e2b8:	e0bffb17 	ldw	r2,-20(fp)
 840e2bc:	10800a17 	ldw	r2,40(r2)
 840e2c0:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
 840e2c4:	e0bffb17 	ldw	r2,-20(fp)
 840e2c8:	10800b17 	ldw	r2,44(r2)
 840e2cc:	e0bff615 	stw	r2,-40(fp)

      if (in >= out)
 840e2d0:	e0fff717 	ldw	r3,-36(fp)
 840e2d4:	e0bff617 	ldw	r2,-40(fp)
 840e2d8:	18800536 	bltu	r3,r2,840e2f0 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
 840e2dc:	e0bff717 	ldw	r2,-36(fp)
 840e2e0:	e0fff617 	ldw	r3,-40(fp)
 840e2e4:	10c5c83a 	sub	r2,r2,r3
 840e2e8:	e0bff815 	stw	r2,-32(fp)
 840e2ec:	00000406 	br	840e300 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
 840e2f0:	00820004 	movi	r2,2048
 840e2f4:	e0fff617 	ldw	r3,-40(fp)
 840e2f8:	10c5c83a 	sub	r2,r2,r3
 840e2fc:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
 840e300:	e0bff817 	ldw	r2,-32(fp)
 840e304:	1005003a 	cmpeq	r2,r2,zero
 840e308:	10001f1e 	bne	r2,zero,840e388 <altera_avalon_jtag_uart_read+0xfc>
        break; /* No more data available */

      if (n > space)
 840e30c:	e0fffd17 	ldw	r3,-12(fp)
 840e310:	e0bff817 	ldw	r2,-32(fp)
 840e314:	1880022e 	bgeu	r3,r2,840e320 <altera_avalon_jtag_uart_read+0x94>
        n = space;
 840e318:	e0bffd17 	ldw	r2,-12(fp)
 840e31c:	e0bff815 	stw	r2,-32(fp)

      memcpy(ptr, sp->rx_buf + out, n);
 840e320:	e0bffb17 	ldw	r2,-20(fp)
 840e324:	10c00e04 	addi	r3,r2,56
 840e328:	e0bff617 	ldw	r2,-40(fp)
 840e32c:	1887883a 	add	r3,r3,r2
 840e330:	e0bffa17 	ldw	r2,-24(fp)
 840e334:	1009883a 	mov	r4,r2
 840e338:	180b883a 	mov	r5,r3
 840e33c:	e1bff817 	ldw	r6,-32(fp)
 840e340:	840a0b40 	call	840a0b4 <memcpy>
      ptr   += n;
 840e344:	e0fff817 	ldw	r3,-32(fp)
 840e348:	e0bffa17 	ldw	r2,-24(fp)
 840e34c:	10c5883a 	add	r2,r2,r3
 840e350:	e0bffa15 	stw	r2,-24(fp)
      space -= n;
 840e354:	e0fffd17 	ldw	r3,-12(fp)
 840e358:	e0bff817 	ldw	r2,-32(fp)
 840e35c:	1885c83a 	sub	r2,r3,r2
 840e360:	e0bffd15 	stw	r2,-12(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 840e364:	e0fff617 	ldw	r3,-40(fp)
 840e368:	e0bff817 	ldw	r2,-32(fp)
 840e36c:	1885883a 	add	r2,r3,r2
 840e370:	10c1ffcc 	andi	r3,r2,2047
 840e374:	e0bffb17 	ldw	r2,-20(fp)
 840e378:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
 840e37c:	e0bffd17 	ldw	r2,-12(fp)
 840e380:	10800048 	cmpgei	r2,r2,1
 840e384:	103fcc1e 	bne	r2,zero,840e2b8 <altera_avalon_jtag_uart_read+0x2c>

    /* If we read any data then return it */
    if (ptr != buffer)
 840e388:	e0fffa17 	ldw	r3,-24(fp)
 840e38c:	e0bffc17 	ldw	r2,-16(fp)
 840e390:	1880141e 	bne	r3,r2,840e3e4 <altera_avalon_jtag_uart_read+0x158>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
 840e394:	e0bffe17 	ldw	r2,-8(fp)
 840e398:	1090000c 	andi	r2,r2,16384
 840e39c:	1004c03a 	cmpne	r2,r2,zero
 840e3a0:	1000101e 	bne	r2,zero,840e3e4 <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
 840e3a4:	e0bffb17 	ldw	r2,-20(fp)
 840e3a8:	10c00a17 	ldw	r3,40(r2)
 840e3ac:	e0bff717 	ldw	r2,-36(fp)
 840e3b0:	1880051e 	bne	r3,r2,840e3c8 <altera_avalon_jtag_uart_read+0x13c>
 840e3b4:	e0bffb17 	ldw	r2,-20(fp)
 840e3b8:	10c00917 	ldw	r3,36(r2)
 840e3bc:	e0bffb17 	ldw	r2,-20(fp)
 840e3c0:	10800117 	ldw	r2,4(r2)
 840e3c4:	18bff736 	bltu	r3,r2,840e3a4 <altera_avalon_jtag_uart_read+0x118>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
 840e3c8:	e0bffb17 	ldw	r2,-20(fp)
 840e3cc:	10c00a17 	ldw	r3,40(r2)
 840e3d0:	e0bff717 	ldw	r2,-36(fp)
 840e3d4:	18800326 	beq	r3,r2,840e3e4 <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 840e3d8:	e0bffd17 	ldw	r2,-12(fp)
 840e3dc:	10800048 	cmpgei	r2,r2,1
 840e3e0:	103fb51e 	bne	r2,zero,840e2b8 <altera_avalon_jtag_uart_read+0x2c>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
 840e3e4:	e0fffa17 	ldw	r3,-24(fp)
 840e3e8:	e0bffc17 	ldw	r2,-16(fp)
 840e3ec:	18801926 	beq	r3,r2,840e454 <altera_avalon_jtag_uart_read+0x1c8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 840e3f0:	0005303a 	rdctl	r2,status
 840e3f4:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 840e3f8:	e0fff517 	ldw	r3,-44(fp)
 840e3fc:	00bfff84 	movi	r2,-2
 840e400:	1884703a 	and	r2,r3,r2
 840e404:	1001703a 	wrctl	status,r2
  
  return context;
 840e408:	e0bff517 	ldw	r2,-44(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
 840e40c:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 840e410:	e0bffb17 	ldw	r2,-20(fp)
 840e414:	10800817 	ldw	r2,32(r2)
 840e418:	10c00054 	ori	r3,r2,1
 840e41c:	e0bffb17 	ldw	r2,-20(fp)
 840e420:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 840e424:	e0bffb17 	ldw	r2,-20(fp)
 840e428:	10800017 	ldw	r2,0(r2)
 840e42c:	11000104 	addi	r4,r2,4
 840e430:	e0bffb17 	ldw	r2,-20(fp)
 840e434:	10800817 	ldw	r2,32(r2)
 840e438:	1007883a 	mov	r3,r2
 840e43c:	2005883a 	mov	r2,r4
 840e440:	10c00035 	stwio	r3,0(r2)
 840e444:	e0bff917 	ldw	r2,-28(fp)
 840e448:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 840e44c:	e0bff417 	ldw	r2,-48(fp)
 840e450:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
 840e454:	e0fffa17 	ldw	r3,-24(fp)
 840e458:	e0bffc17 	ldw	r2,-16(fp)
 840e45c:	18800526 	beq	r3,r2,840e474 <altera_avalon_jtag_uart_read+0x1e8>
    return ptr - buffer;
 840e460:	e0fffa17 	ldw	r3,-24(fp)
 840e464:	e0bffc17 	ldw	r2,-16(fp)
 840e468:	1887c83a 	sub	r3,r3,r2
 840e46c:	e0ffff15 	stw	r3,-4(fp)
 840e470:	00000906 	br	840e498 <altera_avalon_jtag_uart_read+0x20c>
  else if (flags & O_NONBLOCK)
 840e474:	e0bffe17 	ldw	r2,-8(fp)
 840e478:	1090000c 	andi	r2,r2,16384
 840e47c:	1005003a 	cmpeq	r2,r2,zero
 840e480:	1000031e 	bne	r2,zero,840e490 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
 840e484:	00bffd44 	movi	r2,-11
 840e488:	e0bfff15 	stw	r2,-4(fp)
 840e48c:	00000206 	br	840e498 <altera_avalon_jtag_uart_read+0x20c>
  else
    return -EIO;
 840e490:	00bffec4 	movi	r2,-5
 840e494:	e0bfff15 	stw	r2,-4(fp)
 840e498:	e0bfff17 	ldw	r2,-4(fp)
}
 840e49c:	e037883a 	mov	sp,fp
 840e4a0:	dfc00117 	ldw	ra,4(sp)
 840e4a4:	df000017 	ldw	fp,0(sp)
 840e4a8:	dec00204 	addi	sp,sp,8
 840e4ac:	f800283a 	ret

0840e4b0 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 840e4b0:	defff204 	addi	sp,sp,-56
 840e4b4:	dfc00d15 	stw	ra,52(sp)
 840e4b8:	df000c15 	stw	fp,48(sp)
 840e4bc:	df000c04 	addi	fp,sp,48
 840e4c0:	e13ffb15 	stw	r4,-20(fp)
 840e4c4:	e17ffc15 	stw	r5,-16(fp)
 840e4c8:	e1bffd15 	stw	r6,-12(fp)
 840e4cc:	e1fffe15 	stw	r7,-8(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
 840e4d0:	e03ff915 	stw	zero,-28(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
 840e4d4:	e0bffc17 	ldw	r2,-16(fp)
 840e4d8:	e0bff615 	stw	r2,-40(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 840e4dc:	00003a06 	br	840e5c8 <altera_avalon_jtag_uart_write+0x118>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
 840e4e0:	e0bffb17 	ldw	r2,-20(fp)
 840e4e4:	10800c17 	ldw	r2,48(r2)
 840e4e8:	e0bffa15 	stw	r2,-24(fp)
      out = sp->tx_out;
 840e4ec:	e0bffb17 	ldw	r2,-20(fp)
 840e4f0:	10800d17 	ldw	r2,52(r2)
 840e4f4:	e0bff915 	stw	r2,-28(fp)

      if (in < out)
 840e4f8:	e0fffa17 	ldw	r3,-24(fp)
 840e4fc:	e0bff917 	ldw	r2,-28(fp)
 840e500:	1880062e 	bgeu	r3,r2,840e51c <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
 840e504:	e0fff917 	ldw	r3,-28(fp)
 840e508:	e0bffa17 	ldw	r2,-24(fp)
 840e50c:	1885c83a 	sub	r2,r3,r2
 840e510:	10bfffc4 	addi	r2,r2,-1
 840e514:	e0bff815 	stw	r2,-32(fp)
 840e518:	00000c06 	br	840e54c <altera_avalon_jtag_uart_write+0x9c>
      else if (out > 0)
 840e51c:	e0bff917 	ldw	r2,-28(fp)
 840e520:	1005003a 	cmpeq	r2,r2,zero
 840e524:	1000051e 	bne	r2,zero,840e53c <altera_avalon_jtag_uart_write+0x8c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
 840e528:	00820004 	movi	r2,2048
 840e52c:	e0fffa17 	ldw	r3,-24(fp)
 840e530:	10c5c83a 	sub	r2,r2,r3
 840e534:	e0bff815 	stw	r2,-32(fp)
 840e538:	00000406 	br	840e54c <altera_avalon_jtag_uart_write+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
 840e53c:	0081ffc4 	movi	r2,2047
 840e540:	e0fffa17 	ldw	r3,-24(fp)
 840e544:	10c5c83a 	sub	r2,r2,r3
 840e548:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
 840e54c:	e0bff817 	ldw	r2,-32(fp)
 840e550:	1005003a 	cmpeq	r2,r2,zero
 840e554:	10001f1e 	bne	r2,zero,840e5d4 <altera_avalon_jtag_uart_write+0x124>
        break;

      if (n > count)
 840e558:	e0fffd17 	ldw	r3,-12(fp)
 840e55c:	e0bff817 	ldw	r2,-32(fp)
 840e560:	1880022e 	bgeu	r3,r2,840e56c <altera_avalon_jtag_uart_write+0xbc>
        n = count;
 840e564:	e0bffd17 	ldw	r2,-12(fp)
 840e568:	e0bff815 	stw	r2,-32(fp)

      memcpy(sp->tx_buf + in, ptr, n);
 840e56c:	e0bffb17 	ldw	r2,-20(fp)
 840e570:	10c20e04 	addi	r3,r2,2104
 840e574:	e0bffa17 	ldw	r2,-24(fp)
 840e578:	1885883a 	add	r2,r3,r2
 840e57c:	e0fffc17 	ldw	r3,-16(fp)
 840e580:	1009883a 	mov	r4,r2
 840e584:	180b883a 	mov	r5,r3
 840e588:	e1bff817 	ldw	r6,-32(fp)
 840e58c:	840a0b40 	call	840a0b4 <memcpy>
      ptr   += n;
 840e590:	e0fff817 	ldw	r3,-32(fp)
 840e594:	e0bffc17 	ldw	r2,-16(fp)
 840e598:	10c5883a 	add	r2,r2,r3
 840e59c:	e0bffc15 	stw	r2,-16(fp)
      count -= n;
 840e5a0:	e0fffd17 	ldw	r3,-12(fp)
 840e5a4:	e0bff817 	ldw	r2,-32(fp)
 840e5a8:	1885c83a 	sub	r2,r3,r2
 840e5ac:	e0bffd15 	stw	r2,-12(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 840e5b0:	e0fffa17 	ldw	r3,-24(fp)
 840e5b4:	e0bff817 	ldw	r2,-32(fp)
 840e5b8:	1885883a 	add	r2,r3,r2
 840e5bc:	10c1ffcc 	andi	r3,r2,2047
 840e5c0:	e0bffb17 	ldw	r2,-20(fp)
 840e5c4:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 840e5c8:	e0bffd17 	ldw	r2,-12(fp)
 840e5cc:	10800048 	cmpgei	r2,r2,1
 840e5d0:	103fc31e 	bne	r2,zero,840e4e0 <altera_avalon_jtag_uart_write+0x30>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 840e5d4:	0005303a 	rdctl	r2,status
 840e5d8:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 840e5dc:	e0fff517 	ldw	r3,-44(fp)
 840e5e0:	00bfff84 	movi	r2,-2
 840e5e4:	1884703a 	and	r2,r3,r2
 840e5e8:	1001703a 	wrctl	status,r2
  
  return context;
 840e5ec:	e0bff517 	ldw	r2,-44(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
 840e5f0:	e0bff715 	stw	r2,-36(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 840e5f4:	e0bffb17 	ldw	r2,-20(fp)
 840e5f8:	10800817 	ldw	r2,32(r2)
 840e5fc:	10c00094 	ori	r3,r2,2
 840e600:	e0bffb17 	ldw	r2,-20(fp)
 840e604:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 840e608:	e0bffb17 	ldw	r2,-20(fp)
 840e60c:	10800017 	ldw	r2,0(r2)
 840e610:	11000104 	addi	r4,r2,4
 840e614:	e0bffb17 	ldw	r2,-20(fp)
 840e618:	10800817 	ldw	r2,32(r2)
 840e61c:	1007883a 	mov	r3,r2
 840e620:	2005883a 	mov	r2,r4
 840e624:	10c00035 	stwio	r3,0(r2)
 840e628:	e0bff717 	ldw	r2,-36(fp)
 840e62c:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 840e630:	e0bff417 	ldw	r2,-48(fp)
 840e634:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
 840e638:	e0bffd17 	ldw	r2,-12(fp)
 840e63c:	10800050 	cmplti	r2,r2,1
 840e640:	1000111e 	bne	r2,zero,840e688 <altera_avalon_jtag_uart_write+0x1d8>
    {
      if (flags & O_NONBLOCK)
 840e644:	e0bffe17 	ldw	r2,-8(fp)
 840e648:	1090000c 	andi	r2,r2,16384
 840e64c:	1004c03a 	cmpne	r2,r2,zero
 840e650:	1000101e 	bne	r2,zero,840e694 <altera_avalon_jtag_uart_write+0x1e4>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
 840e654:	e0bffb17 	ldw	r2,-20(fp)
 840e658:	10c00d17 	ldw	r3,52(r2)
 840e65c:	e0bff917 	ldw	r2,-28(fp)
 840e660:	1880051e 	bne	r3,r2,840e678 <altera_avalon_jtag_uart_write+0x1c8>
 840e664:	e0bffb17 	ldw	r2,-20(fp)
 840e668:	10c00917 	ldw	r3,36(r2)
 840e66c:	e0bffb17 	ldw	r2,-20(fp)
 840e670:	10800117 	ldw	r2,4(r2)
 840e674:	18bff736 	bltu	r3,r2,840e654 <altera_avalon_jtag_uart_write+0x1a4>
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
 840e678:	e0bffb17 	ldw	r2,-20(fp)
 840e67c:	10c00d17 	ldw	r3,52(r2)
 840e680:	e0bff917 	ldw	r2,-28(fp)
 840e684:	18800326 	beq	r3,r2,840e694 <altera_avalon_jtag_uart_write+0x1e4>
        break;
    }
  }
  while (count > 0);
 840e688:	e0bffd17 	ldw	r2,-12(fp)
 840e68c:	10800048 	cmpgei	r2,r2,1
 840e690:	103fcd1e 	bne	r2,zero,840e5c8 <altera_avalon_jtag_uart_write+0x118>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
 840e694:	e0fffc17 	ldw	r3,-16(fp)
 840e698:	e0bff617 	ldw	r2,-40(fp)
 840e69c:	18800526 	beq	r3,r2,840e6b4 <altera_avalon_jtag_uart_write+0x204>
    return ptr - start;
 840e6a0:	e0fffc17 	ldw	r3,-16(fp)
 840e6a4:	e0bff617 	ldw	r2,-40(fp)
 840e6a8:	1887c83a 	sub	r3,r3,r2
 840e6ac:	e0ffff15 	stw	r3,-4(fp)
 840e6b0:	00000906 	br	840e6d8 <altera_avalon_jtag_uart_write+0x228>
  else if (flags & O_NONBLOCK)
 840e6b4:	e0bffe17 	ldw	r2,-8(fp)
 840e6b8:	1090000c 	andi	r2,r2,16384
 840e6bc:	1005003a 	cmpeq	r2,r2,zero
 840e6c0:	1000031e 	bne	r2,zero,840e6d0 <altera_avalon_jtag_uart_write+0x220>
    return -EWOULDBLOCK;
 840e6c4:	00bffd44 	movi	r2,-11
 840e6c8:	e0bfff15 	stw	r2,-4(fp)
 840e6cc:	00000206 	br	840e6d8 <altera_avalon_jtag_uart_write+0x228>
  else
    return -EIO; /* Host not connected */
 840e6d0:	00bffec4 	movi	r2,-5
 840e6d4:	e0bfff15 	stw	r2,-4(fp)
 840e6d8:	e0bfff17 	ldw	r2,-4(fp)
}
 840e6dc:	e037883a 	mov	sp,fp
 840e6e0:	dfc00117 	ldw	ra,4(sp)
 840e6e4:	df000017 	ldw	fp,0(sp)
 840e6e8:	dec00204 	addi	sp,sp,8
 840e6ec:	f800283a 	ret

0840e6f0 <alt_avalon_mailbox_init>:

/*
 * Register a Mutex device
 */
int alt_avalon_mailbox_init (alt_mailbox_dev* dev)
{
 840e6f0:	defffa04 	addi	sp,sp,-24
 840e6f4:	dfc00515 	stw	ra,20(sp)
 840e6f8:	df000415 	stw	fp,16(sp)
 840e6fc:	df000404 	addi	fp,sp,16
 840e700:	e13fff15 	stw	r4,-4(fp)
  int ret_code;
  alt_mutex_dev* write_mutex, *read_mutex;
  extern alt_llist alt_mailbox_list;

  ret_code = alt_avalon_mutex_reg( &dev->write_mutex );
 840e704:	e0bfff17 	ldw	r2,-4(fp)
 840e708:	11000704 	addi	r4,r2,28
 840e70c:	840e8480 	call	840e848 <alt_avalon_mutex_reg>
 840e710:	e0bffe15 	stw	r2,-8(fp)

  if (!ret_code)
 840e714:	e0bffe17 	ldw	r2,-8(fp)
 840e718:	1004c03a 	cmpne	r2,r2,zero
 840e71c:	1000041e 	bne	r2,zero,840e730 <alt_avalon_mailbox_init+0x40>
  {
    ret_code = alt_avalon_mutex_reg( &dev->read_mutex );
 840e720:	e0bfff17 	ldw	r2,-4(fp)
 840e724:	11000b04 	addi	r4,r2,44
 840e728:	840e8480 	call	840e848 <alt_avalon_mutex_reg>
 840e72c:	e0bffe15 	stw	r2,-8(fp)
  }

  if (!ret_code)
 840e730:	e0bffe17 	ldw	r2,-8(fp)
 840e734:	1004c03a 	cmpne	r2,r2,zero
 840e738:	1000041e 	bne	r2,zero,840e74c <alt_avalon_mailbox_init+0x5c>
  {
    ret_code = alt_dev_llist_insert((alt_dev_llist*) dev, &alt_mailbox_list);
 840e73c:	e13fff17 	ldw	r4,-4(fp)
 840e740:	d1601104 	addi	r5,gp,-32700
 840e744:	84106200 	call	8410620 <alt_dev_llist_insert>
 840e748:	e0bffe15 	stw	r2,-8(fp)
  }

  if (!ret_code)
 840e74c:	e0bffe17 	ldw	r2,-8(fp)
 840e750:	1004c03a 	cmpne	r2,r2,zero
 840e754:	1000361e 	bne	r2,zero,840e830 <alt_avalon_mailbox_init+0x140>
  {
    write_mutex = altera_avalon_mutex_open(dev->write_mutex.name);
 840e758:	e0bfff17 	ldw	r2,-4(fp)
 840e75c:	11000917 	ldw	r4,36(r2)
 840e760:	840ec940 	call	840ec94 <altera_avalon_mutex_open>
 840e764:	e0bffd15 	stw	r2,-12(fp)
    if (write_mutex)
 840e768:	e0bffd17 	ldw	r2,-12(fp)
 840e76c:	1005003a 	cmpeq	r2,r2,zero
 840e770:	10002f1e 	bne	r2,zero,840e830 <alt_avalon_mailbox_init+0x140>
    {
      read_mutex = altera_avalon_mutex_open(dev->read_mutex.name);
 840e774:	e0bfff17 	ldw	r2,-4(fp)
 840e778:	11000d17 	ldw	r4,52(r2)
 840e77c:	840ec940 	call	840ec94 <altera_avalon_mutex_open>
 840e780:	e0bffc15 	stw	r2,-16(fp)
      if (read_mutex)
 840e784:	e0bffc17 	ldw	r2,-16(fp)
 840e788:	1005003a 	cmpeq	r2,r2,zero
 840e78c:	1000281e 	bne	r2,zero,840e830 <alt_avalon_mailbox_init+0x140>
      {
        while (altera_avalon_mutex_first_lock(write_mutex))
 840e790:	00000f06 	br	840e7d0 <alt_avalon_mailbox_init+0xe0>
        {
          if (!altera_avalon_mutex_trylock(write_mutex, 1))
 840e794:	e13ffd17 	ldw	r4,-12(fp)
 840e798:	01400044 	movi	r5,1
 840e79c:	840edac0 	call	840edac <altera_avalon_mutex_trylock>
 840e7a0:	1004c03a 	cmpne	r2,r2,zero
 840e7a4:	10000a1e 	bne	r2,zero,840e7d0 <alt_avalon_mailbox_init+0xe0>
          {
            IOWR((alt_u32)(dev->write_ptr), 0,
 840e7a8:	e0bfff17 	ldw	r2,-4(fp)
 840e7ac:	10800317 	ldw	r2,12(r2)
 840e7b0:	1009883a 	mov	r4,r2
 840e7b4:	e0bfff17 	ldw	r2,-4(fp)
 840e7b8:	10800517 	ldw	r2,20(r2)
 840e7bc:	1007883a 	mov	r3,r2
 840e7c0:	2005883a 	mov	r2,r4
 840e7c4:	10c00035 	stwio	r3,0(r2)
              (alt_u32) dev->mailbox_mem_start_ptr);
            altera_avalon_mutex_unlock(write_mutex);
 840e7c8:	e13ffd17 	ldw	r4,-12(fp)
 840e7cc:	840edec0 	call	840edec <altera_avalon_mutex_unlock>
    if (write_mutex)
    {
      read_mutex = altera_avalon_mutex_open(dev->read_mutex.name);
      if (read_mutex)
      {
        while (altera_avalon_mutex_first_lock(write_mutex))
 840e7d0:	e13ffd17 	ldw	r4,-12(fp)
 840e7d4:	840eec40 	call	840eec4 <altera_avalon_mutex_first_lock>
 840e7d8:	1004c03a 	cmpne	r2,r2,zero
 840e7dc:	103fed1e 	bne	r2,zero,840e794 <alt_avalon_mailbox_init+0xa4>
              (alt_u32) dev->mailbox_mem_start_ptr);
            altera_avalon_mutex_unlock(write_mutex);
          }
        }

        while (altera_avalon_mutex_first_lock(read_mutex))
 840e7e0:	00000f06 	br	840e820 <alt_avalon_mailbox_init+0x130>
        {
          if (!altera_avalon_mutex_trylock(read_mutex, 1))
 840e7e4:	e13ffc17 	ldw	r4,-16(fp)
 840e7e8:	01400044 	movi	r5,1
 840e7ec:	840edac0 	call	840edac <altera_avalon_mutex_trylock>
 840e7f0:	1004c03a 	cmpne	r2,r2,zero
 840e7f4:	10000a1e 	bne	r2,zero,840e820 <alt_avalon_mailbox_init+0x130>
          {
            IOWR((alt_u32)(dev->read_ptr), 0,
 840e7f8:	e0bfff17 	ldw	r2,-4(fp)
 840e7fc:	10800417 	ldw	r2,16(r2)
 840e800:	1009883a 	mov	r4,r2
 840e804:	e0bfff17 	ldw	r2,-4(fp)
 840e808:	10800517 	ldw	r2,20(r2)
 840e80c:	1007883a 	mov	r3,r2
 840e810:	2005883a 	mov	r2,r4
 840e814:	10c00035 	stwio	r3,0(r2)
              (alt_u32) dev->mailbox_mem_start_ptr);
            altera_avalon_mutex_unlock(read_mutex);
 840e818:	e13ffc17 	ldw	r4,-16(fp)
 840e81c:	840edec0 	call	840edec <altera_avalon_mutex_unlock>
              (alt_u32) dev->mailbox_mem_start_ptr);
            altera_avalon_mutex_unlock(write_mutex);
          }
        }

        while (altera_avalon_mutex_first_lock(read_mutex))
 840e820:	e13ffc17 	ldw	r4,-16(fp)
 840e824:	840eec40 	call	840eec4 <altera_avalon_mutex_first_lock>
 840e828:	1004c03a 	cmpne	r2,r2,zero
 840e82c:	103fed1e 	bne	r2,zero,840e7e4 <alt_avalon_mailbox_init+0xf4>
          }
        }
      }
    }
  }
  return ret_code;
 840e830:	e0bffe17 	ldw	r2,-8(fp)
}
 840e834:	e037883a 	mov	sp,fp
 840e838:	dfc00117 	ldw	ra,4(sp)
 840e83c:	df000017 	ldw	fp,0(sp)
 840e840:	dec00204 	addi	sp,sp,8
 840e844:	f800283a 	ret

0840e848 <alt_avalon_mutex_reg>:
/*
 * Register a Mutex device
 */

static ALT_INLINE int alt_avalon_mutex_reg (alt_mutex_dev* dev)
{
 840e848:	defffc04 	addi	sp,sp,-16
 840e84c:	dfc00315 	stw	ra,12(sp)
 840e850:	df000215 	stw	fp,8(sp)
 840e854:	df000204 	addi	fp,sp,8
 840e858:	e13fff15 	stw	r4,-4(fp)
 * HAL.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_no_error (void)
{
  return 0;
 840e85c:	0005883a 	mov	r2,zero
  int ret_code;
  extern alt_llist alt_mutex_list;
  ret_code = ALT_SEM_CREATE (&dev->lock, 1);
 840e860:	e0bffe15 	stw	r2,-8(fp)
  if (!ret_code)
 840e864:	e0bffe17 	ldw	r2,-8(fp)
 840e868:	1004c03a 	cmpne	r2,r2,zero
 840e86c:	1000061e 	bne	r2,zero,840e888 <alt_avalon_mutex_reg+0x40>
  {
    ret_code = alt_dev_llist_insert((alt_dev_llist*) dev, &alt_mutex_list);
 840e870:	e13fff17 	ldw	r4,-4(fp)
 840e874:	01421074 	movhi	r5,2113
 840e878:	294e6104 	addi	r5,r5,14724
 840e87c:	84106200 	call	8410620 <alt_dev_llist_insert>
 840e880:	e0bffe15 	stw	r2,-8(fp)
 840e884:	00000506 	br	840e89c <alt_avalon_mutex_reg+0x54>
  }
  else
  {
    ALT_ERRNO = ENOMEM;
 840e888:	840e8b40 	call	840e8b4 <alt_get_errno>
 840e88c:	00c00304 	movi	r3,12
 840e890:	10c00015 	stw	r3,0(r2)
    ret_code = -ENOMEM;
 840e894:	00bffd04 	movi	r2,-12
 840e898:	e0bffe15 	stw	r2,-8(fp)
  }

  return ret_code;
 840e89c:	e0bffe17 	ldw	r2,-8(fp)
}
 840e8a0:	e037883a 	mov	sp,fp
 840e8a4:	dfc00117 	ldw	ra,4(sp)
 840e8a8:	df000017 	ldw	fp,0(sp)
 840e8ac:	dec00204 	addi	sp,sp,8
 840e8b0:	f800283a 	ret

0840e8b4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 840e8b4:	defffd04 	addi	sp,sp,-12
 840e8b8:	dfc00215 	stw	ra,8(sp)
 840e8bc:	df000115 	stw	fp,4(sp)
 840e8c0:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 840e8c4:	00821074 	movhi	r2,2113
 840e8c8:	108e5d04 	addi	r2,r2,14708
 840e8cc:	10800017 	ldw	r2,0(r2)
 840e8d0:	1005003a 	cmpeq	r2,r2,zero
 840e8d4:	1000061e 	bne	r2,zero,840e8f0 <alt_get_errno+0x3c>
 840e8d8:	00821074 	movhi	r2,2113
 840e8dc:	108e5d04 	addi	r2,r2,14708
 840e8e0:	10800017 	ldw	r2,0(r2)
 840e8e4:	103ee83a 	callr	r2
 840e8e8:	e0bfff15 	stw	r2,-4(fp)
 840e8ec:	00000306 	br	840e8fc <alt_get_errno+0x48>
 840e8f0:	00821074 	movhi	r2,2113
 840e8f4:	10956404 	addi	r2,r2,21904
 840e8f8:	e0bfff15 	stw	r2,-4(fp)
 840e8fc:	e0bfff17 	ldw	r2,-4(fp)
}
 840e900:	e037883a 	mov	sp,fp
 840e904:	dfc00117 	ldw	ra,4(sp)
 840e908:	df000017 	ldw	fp,0(sp)
 840e90c:	dec00204 	addi	sp,sp,8
 840e910:	f800283a 	ret

0840e914 <altera_avalon_mailbox_open>:
 * Search the list of registered mailboxes for one with the supplied name.
 *
 * The return value will be NULL on failure, and non-NULL otherwise.
 */
alt_mailbox_dev* altera_avalon_mailbox_open (const char* name)
{
 840e914:	defffc04 	addi	sp,sp,-16
 840e918:	dfc00315 	stw	ra,12(sp)
 840e91c:	df000215 	stw	fp,8(sp)
 840e920:	df000204 	addi	fp,sp,8
 840e924:	e13fff15 	stw	r4,-4(fp)
  alt_mailbox_dev* dev;

  dev = (alt_mailbox_dev*) alt_find_dev (name, &alt_mailbox_list);
 840e928:	e13fff17 	ldw	r4,-4(fp)
 840e92c:	d1601104 	addi	r5,gp,-32700
 840e930:	84107fc0 	call	84107fc <alt_find_dev>
 840e934:	e0bffe15 	stw	r2,-8(fp)

  if (NULL == dev)
 840e938:	e0bffe17 	ldw	r2,-8(fp)
 840e93c:	1004c03a 	cmpne	r2,r2,zero
 840e940:	1000041e 	bne	r2,zero,840e954 <altera_avalon_mailbox_open+0x40>
  {
    ALT_ERRNO = ENODEV;
 840e944:	840e8b40 	call	840e8b4 <alt_get_errno>
 840e948:	1007883a 	mov	r3,r2
 840e94c:	008004c4 	movi	r2,19
 840e950:	18800015 	stw	r2,0(r3)
  }

  return dev;
 840e954:	e0bffe17 	ldw	r2,-8(fp)

}
 840e958:	e037883a 	mov	sp,fp
 840e95c:	dfc00117 	ldw	ra,4(sp)
 840e960:	df000017 	ldw	fp,0(sp)
 840e964:	dec00204 	addi	sp,sp,8
 840e968:	f800283a 	ret

0840e96c <altera_avalon_mailbox_close>:
 * altera_avalon_mailbox_close - Does nothing at the moment, but included for 
 * completeness
 *
 */
void altera_avalon_mailbox_close (alt_mailbox_dev* dev)
{
 840e96c:	defffe04 	addi	sp,sp,-8
 840e970:	df000115 	stw	fp,4(sp)
 840e974:	df000104 	addi	fp,sp,4
 840e978:	e13fff15 	stw	r4,-4(fp)
  return;
}
 840e97c:	e037883a 	mov	sp,fp
 840e980:	df000017 	ldw	fp,0(sp)
 840e984:	dec00104 	addi	sp,sp,4
 840e988:	f800283a 	ret

0840e98c <altera_avalon_mailbox_post>:
 * 
 * Post a message to the mailbox
 *
 */
int altera_avalon_mailbox_post (alt_mailbox_dev* dev, alt_u32 msg)
{
 840e98c:	defff904 	addi	sp,sp,-28
 840e990:	dfc00615 	stw	ra,24(sp)
 840e994:	df000515 	stw	fp,20(sp)
 840e998:	df000504 	addi	fp,sp,20
 840e99c:	e13ffe15 	stw	r4,-8(fp)
 840e9a0:	e17fff15 	stw	r5,-4(fp)
  int ret_code = 0;
 840e9a4:	e03ffd15 	stw	zero,-12(fp)
  *   Claim the Mutex on the write pointer 
  *
  *   The mutex function takes care of the thread sempahore if running
  *   in a multi-threaded environment
  */
  altera_avalon_mutex_lock( &dev->write_mutex, 1 );
 840e9a8:	e0bffe17 	ldw	r2,-8(fp)
 840e9ac:	11000704 	addi	r4,r2,28
 840e9b0:	01400044 	movi	r5,1
 840e9b4:	840ed6c0 	call	840ed6c <altera_avalon_mutex_lock>

  temp = (alt_u32 *) IORD(dev->write_ptr, 0);
 840e9b8:	e0bffe17 	ldw	r2,-8(fp)
 840e9bc:	10800317 	ldw	r2,12(r2)
 840e9c0:	10800037 	ldwio	r2,0(r2)
 840e9c4:	e0bffc15 	stw	r2,-16(fp)
  next_write = alt_mailbox_increment_ptr(dev, temp);
 840e9c8:	e13ffe17 	ldw	r4,-8(fp)
 840e9cc:	e17ffc17 	ldw	r5,-16(fp)
 840e9d0:	840ea480 	call	840ea48 <alt_mailbox_increment_ptr>
 840e9d4:	e0bffb15 	stw	r2,-20(fp)

  if (next_write == ((alt_u32 *)IORD(dev->read_ptr, 0)) )
 840e9d8:	e0bffe17 	ldw	r2,-8(fp)
 840e9dc:	10800417 	ldw	r2,16(r2)
 840e9e0:	10800037 	ldwio	r2,0(r2)
 840e9e4:	1007883a 	mov	r3,r2
 840e9e8:	e0bffb17 	ldw	r2,-20(fp)
 840e9ec:	1880061e 	bne	r3,r2,840ea08 <altera_avalon_mailbox_post+0x7c>
  {
    ALT_ERRNO = EWOULDBLOCK;
 840e9f0:	840e8b40 	call	840e8b4 <alt_get_errno>
 840e9f4:	00c002c4 	movi	r3,11
 840e9f8:	10c00015 	stw	r3,0(r2)
    ret_code = -EWOULDBLOCK;
 840e9fc:	00bffd44 	movi	r2,-11
 840ea00:	e0bffd15 	stw	r2,-12(fp)
 840ea04:	00000706 	br	840ea24 <altera_avalon_mailbox_post+0x98>
  }
  else
  {
    IOWR(temp, 0, msg);
 840ea08:	e0bffc17 	ldw	r2,-16(fp)
 840ea0c:	e0ffff17 	ldw	r3,-4(fp)
 840ea10:	10c00035 	stwio	r3,0(r2)
    IOWR((alt_u32)(dev->write_ptr), 0, (alt_u32)next_write);
 840ea14:	e0bffe17 	ldw	r2,-8(fp)
 840ea18:	10800317 	ldw	r2,12(r2)
 840ea1c:	e0fffb17 	ldw	r3,-20(fp)
 840ea20:	10c00035 	stwio	r3,0(r2)
  }

  altera_avalon_mutex_unlock( &dev->write_mutex );
 840ea24:	e0bffe17 	ldw	r2,-8(fp)
 840ea28:	11000704 	addi	r4,r2,28
 840ea2c:	840edec0 	call	840edec <altera_avalon_mutex_unlock>

  return ret_code;
 840ea30:	e0bffd17 	ldw	r2,-12(fp)

}
 840ea34:	e037883a 	mov	sp,fp
 840ea38:	dfc00117 	ldw	ra,4(sp)
 840ea3c:	df000017 	ldw	fp,0(sp)
 840ea40:	dec00204 	addi	sp,sp,8
 840ea44:	f800283a 	ret

0840ea48 <alt_mailbox_increment_ptr>:
 *
 * Increment one of the pointers and if that would take it beyond the end
 * of the shared memory put it at the start
 */
static inline alt_u32* alt_mailbox_increment_ptr(alt_mailbox_dev* dev, alt_u32* ptr)
{
 840ea48:	defffd04 	addi	sp,sp,-12
 840ea4c:	df000215 	stw	fp,8(sp)
 840ea50:	df000204 	addi	fp,sp,8
 840ea54:	e13ffe15 	stw	r4,-8(fp)
 840ea58:	e17fff15 	stw	r5,-4(fp)
  ptr += 1;
 840ea5c:	e0bfff17 	ldw	r2,-4(fp)
 840ea60:	10800104 	addi	r2,r2,4
 840ea64:	e0bfff15 	stw	r2,-4(fp)

  if (ptr > dev->mailbox_mem_end_ptr)
 840ea68:	e0bffe17 	ldw	r2,-8(fp)
 840ea6c:	10c00617 	ldw	r3,24(r2)
 840ea70:	e0bfff17 	ldw	r2,-4(fp)
 840ea74:	1880032e 	bgeu	r3,r2,840ea84 <alt_mailbox_increment_ptr+0x3c>
  {
    ptr = dev->mailbox_mem_start_ptr;
 840ea78:	e0bffe17 	ldw	r2,-8(fp)
 840ea7c:	10800517 	ldw	r2,20(r2)
 840ea80:	e0bfff15 	stw	r2,-4(fp)
  }

  return ptr;
 840ea84:	e0bfff17 	ldw	r2,-4(fp)
}
 840ea88:	e037883a 	mov	sp,fp
 840ea8c:	df000017 	ldw	fp,0(sp)
 840ea90:	dec00104 	addi	sp,sp,4
 840ea94:	f800283a 	ret

0840ea98 <altera_avalon_mailbox_pend>:
 * 
 * Block until a message is available in the mailbox
 *
 */
alt_u32 altera_avalon_mailbox_pend (alt_mailbox_dev* dev)
{
 840ea98:	defffa04 	addi	sp,sp,-24
 840ea9c:	dfc00515 	stw	ra,20(sp)
 840eaa0:	df000415 	stw	fp,16(sp)
 840eaa4:	dc000315 	stw	r16,12(sp)
 840eaa8:	df000304 	addi	fp,sp,12
 840eaac:	e13fff15 	stw	r4,-4(fp)
  *   Claim the Mutex on the read pointer
  *
  *   The mutex function takes care of the thread sempahore if running
  *   in a multi-threaded environment
  */
  altera_avalon_mutex_lock( &dev->read_mutex, 1 );
 840eab0:	e0bfff17 	ldw	r2,-4(fp)
 840eab4:	11000b04 	addi	r4,r2,44
 840eab8:	01400044 	movi	r5,1
 840eabc:	840ed6c0 	call	840ed6c <altera_avalon_mutex_lock>

  temp = (alt_u32 *)IORD(dev->read_ptr, 0);
 840eac0:	e0bfff17 	ldw	r2,-4(fp)
 840eac4:	10800417 	ldw	r2,16(r2)
 840eac8:	10800037 	ldwio	r2,0(r2)
 840eacc:	e0bffd15 	stw	r2,-12(fp)

  while ( (alt_u32 *)(IORD(dev->write_ptr, 0)) == temp );
 840ead0:	e0bfff17 	ldw	r2,-4(fp)
 840ead4:	10800317 	ldw	r2,12(r2)
 840ead8:	10800037 	ldwio	r2,0(r2)
 840eadc:	1007883a 	mov	r3,r2
 840eae0:	e0bffd17 	ldw	r2,-12(fp)
 840eae4:	18bffa26 	beq	r3,r2,840ead0 <altera_avalon_mailbox_pend+0x38>

  msg = IORD(temp, 0);
 840eae8:	e0bffd17 	ldw	r2,-12(fp)
 840eaec:	10800037 	ldwio	r2,0(r2)
 840eaf0:	e0bffe15 	stw	r2,-8(fp)

  IOWR( (alt_u32)(dev->read_ptr), 0,
 840eaf4:	e0bfff17 	ldw	r2,-4(fp)
 840eaf8:	10800417 	ldw	r2,16(r2)
 840eafc:	1021883a 	mov	r16,r2
 840eb00:	e13fff17 	ldw	r4,-4(fp)
 840eb04:	e17ffd17 	ldw	r5,-12(fp)
 840eb08:	840ea480 	call	840ea48 <alt_mailbox_increment_ptr>
 840eb0c:	1007883a 	mov	r3,r2
 840eb10:	8005883a 	mov	r2,r16
 840eb14:	10c00035 	stwio	r3,0(r2)
    (alt_u32)(alt_mailbox_increment_ptr(dev, temp)) );

  altera_avalon_mutex_unlock( &dev->read_mutex );
 840eb18:	e0bfff17 	ldw	r2,-4(fp)
 840eb1c:	11000b04 	addi	r4,r2,44
 840eb20:	840edec0 	call	840edec <altera_avalon_mutex_unlock>

  return msg;
 840eb24:	e0bffe17 	ldw	r2,-8(fp)

}
 840eb28:	e037883a 	mov	sp,fp
 840eb2c:	dfc00217 	ldw	ra,8(sp)
 840eb30:	df000117 	ldw	fp,4(sp)
 840eb34:	dc000017 	ldw	r16,0(sp)
 840eb38:	dec00304 	addi	sp,sp,12
 840eb3c:	f800283a 	ret

0840eb40 <altera_avalon_mailbox_get>:
 * If a message is available in the mailbox return it otherwise return NULL
 * i.e. this is Non-Blocking
 *
 */
alt_u32 altera_avalon_mailbox_get (alt_mailbox_dev* dev, int* err)
{
 840eb40:	defff904 	addi	sp,sp,-28
 840eb44:	dfc00615 	stw	ra,24(sp)
 840eb48:	df000515 	stw	fp,20(sp)
 840eb4c:	dc000415 	stw	r16,16(sp)
 840eb50:	df000404 	addi	fp,sp,16
 840eb54:	e13ffe15 	stw	r4,-8(fp)
 840eb58:	e17fff15 	stw	r5,-4(fp)
  alt_u32 msg;
  alt_u32* temp;
  *err = 0;
 840eb5c:	e0bfff17 	ldw	r2,-4(fp)
 840eb60:	10000015 	stw	zero,0(r2)
  *   Claim the Mutex on the read pointer 
  *
  *   The mutex function takes care of the thread sempahore if running
  *   in a multi-threaded environment
  */
  altera_avalon_mutex_lock( &dev->read_mutex, 1 );
 840eb64:	e0bffe17 	ldw	r2,-8(fp)
 840eb68:	11000b04 	addi	r4,r2,44
 840eb6c:	01400044 	movi	r5,1
 840eb70:	840ed6c0 	call	840ed6c <altera_avalon_mutex_lock>

  temp = (alt_u32 *)IORD(dev->read_ptr, 0);
 840eb74:	e0bffe17 	ldw	r2,-8(fp)
 840eb78:	10800417 	ldw	r2,16(r2)
 840eb7c:	10800037 	ldwio	r2,0(r2)
 840eb80:	e0bffc15 	stw	r2,-16(fp)

  if ( (alt_u32 *)(IORD(dev->write_ptr, 0)) == temp )
 840eb84:	e0bffe17 	ldw	r2,-8(fp)
 840eb88:	10800317 	ldw	r2,12(r2)
 840eb8c:	10800037 	ldwio	r2,0(r2)
 840eb90:	1007883a 	mov	r3,r2
 840eb94:	e0bffc17 	ldw	r2,-16(fp)
 840eb98:	1880091e 	bne	r3,r2,840ebc0 <altera_avalon_mailbox_get+0x80>
  {
    *err = -EWOULDBLOCK;
 840eb9c:	e0ffff17 	ldw	r3,-4(fp)
 840eba0:	00bffd44 	movi	r2,-11
 840eba4:	18800015 	stw	r2,0(r3)
    ALT_ERRNO = EWOULDBLOCK;
 840eba8:	840e8b40 	call	840e8b4 <alt_get_errno>
 840ebac:	1007883a 	mov	r3,r2
 840ebb0:	008002c4 	movi	r2,11
 840ebb4:	18800015 	stw	r2,0(r3)
    msg = 0;
 840ebb8:	e03ffd15 	stw	zero,-12(fp)
 840ebbc:	00000c06 	br	840ebf0 <altera_avalon_mailbox_get+0xb0>
  }
  else
  {
    msg = IORD(temp, 0);
 840ebc0:	e0bffc17 	ldw	r2,-16(fp)
 840ebc4:	10800037 	ldwio	r2,0(r2)
 840ebc8:	e0bffd15 	stw	r2,-12(fp)
    IOWR(dev->read_ptr, 0,
 840ebcc:	e0bffe17 	ldw	r2,-8(fp)
 840ebd0:	10800417 	ldw	r2,16(r2)
 840ebd4:	1021883a 	mov	r16,r2
 840ebd8:	e13ffe17 	ldw	r4,-8(fp)
 840ebdc:	e17ffc17 	ldw	r5,-16(fp)
 840ebe0:	840ea480 	call	840ea48 <alt_mailbox_increment_ptr>
 840ebe4:	1007883a 	mov	r3,r2
 840ebe8:	8005883a 	mov	r2,r16
 840ebec:	10c00035 	stwio	r3,0(r2)
      (alt_u32)(alt_mailbox_increment_ptr(dev, temp)) );
  }

  altera_avalon_mutex_unlock( &dev->read_mutex );
 840ebf0:	e0bffe17 	ldw	r2,-8(fp)
 840ebf4:	11000b04 	addi	r4,r2,44
 840ebf8:	840edec0 	call	840edec <altera_avalon_mutex_unlock>

  return msg;
 840ebfc:	e0bffd17 	ldw	r2,-12(fp)

}
 840ec00:	e037883a 	mov	sp,fp
 840ec04:	dfc00217 	ldw	ra,8(sp)
 840ec08:	df000117 	ldw	fp,4(sp)
 840ec0c:	dc000017 	ldw	r16,0(sp)
 840ec10:	dec00304 	addi	sp,sp,12
 840ec14:	f800283a 	ret

0840ec18 <alt_mutex_trylock>:
 *
 * returns 0 on success -1 otherwise
 *
 */
static int alt_mutex_trylock( alt_mutex_dev* dev, alt_u32 value )
{
 840ec18:	defff904 	addi	sp,sp,-28
 840ec1c:	df000615 	stw	fp,24(sp)
 840ec20:	df000604 	addi	fp,sp,24
 840ec24:	e13ffe15 	stw	r4,-8(fp)
 840ec28:	e17fff15 	stw	r5,-4(fp)
  alt_u32 id, data, check;
  int ret_code = -1;
 840ec2c:	00bfffc4 	movi	r2,-1
 840ec30:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_READ_CPUID(id);
 840ec34:	0005317a 	rdctl	r2,cpuid
 840ec38:	e0bffd15 	stw	r2,-12(fp)

  /* the data we want the mutex to hold */
  data = (id << ALTERA_AVALON_MUTEX_MUTEX_OWNER_OFST) | value;
 840ec3c:	e0bffd17 	ldw	r2,-12(fp)
 840ec40:	1006943a 	slli	r3,r2,16
 840ec44:	e0bfff17 	ldw	r2,-4(fp)
 840ec48:	1884b03a 	or	r2,r3,r2
 840ec4c:	e0bffc15 	stw	r2,-16(fp)

  /* attempt to write to the mutex */
  IOWR_ALTERA_AVALON_MUTEX_MUTEX(dev->mutex_base, data);
 840ec50:	e0bffe17 	ldw	r2,-8(fp)
 840ec54:	10800317 	ldw	r2,12(r2)
 840ec58:	e0fffc17 	ldw	r3,-16(fp)
 840ec5c:	10c00035 	stwio	r3,0(r2)
  
  check = IORD_ALTERA_AVALON_MUTEX_MUTEX(dev->mutex_base);
 840ec60:	e0bffe17 	ldw	r2,-8(fp)
 840ec64:	10800317 	ldw	r2,12(r2)
 840ec68:	10800037 	ldwio	r2,0(r2)
 840ec6c:	e0bffb15 	stw	r2,-20(fp)

  if ( check == data)
 840ec70:	e0fffb17 	ldw	r3,-20(fp)
 840ec74:	e0bffc17 	ldw	r2,-16(fp)
 840ec78:	1880011e 	bne	r3,r2,840ec80 <alt_mutex_trylock+0x68>
  {
    ret_code = 0;
 840ec7c:	e03ffa15 	stw	zero,-24(fp)
  }

  return ret_code;
 840ec80:	e0bffa17 	ldw	r2,-24(fp)
}
 840ec84:	e037883a 	mov	sp,fp
 840ec88:	df000017 	ldw	fp,0(sp)
 840ec8c:	dec00104 	addi	sp,sp,4
 840ec90:	f800283a 	ret

0840ec94 <altera_avalon_mutex_open>:
 * Search the list of registered mutexes for one with the supplied name.
 *
 * The return value will be NULL on failure, and non-NULL otherwise.
 */
alt_mutex_dev* altera_avalon_mutex_open (const char* name)
{
 840ec94:	defffc04 	addi	sp,sp,-16
 840ec98:	dfc00315 	stw	ra,12(sp)
 840ec9c:	df000215 	stw	fp,8(sp)
 840eca0:	df000204 	addi	fp,sp,8
 840eca4:	e13fff15 	stw	r4,-4(fp)
  alt_mutex_dev* dev;

  dev = (alt_mutex_dev*) alt_find_dev (name, &alt_mutex_list);
 840eca8:	e13fff17 	ldw	r4,-4(fp)
 840ecac:	d1601304 	addi	r5,gp,-32692
 840ecb0:	84107fc0 	call	84107fc <alt_find_dev>
 840ecb4:	e0bffe15 	stw	r2,-8(fp)

  if (NULL == dev)
 840ecb8:	e0bffe17 	ldw	r2,-8(fp)
 840ecbc:	1004c03a 	cmpne	r2,r2,zero
 840ecc0:	1000041e 	bne	r2,zero,840ecd4 <altera_avalon_mutex_open+0x40>
  {
    ALT_ERRNO = ENODEV;
 840ecc4:	840ecec0 	call	840ecec <alt_get_errno>
 840ecc8:	1007883a 	mov	r3,r2
 840eccc:	008004c4 	movi	r2,19
 840ecd0:	18800015 	stw	r2,0(r3)
  }

  return dev;
 840ecd4:	e0bffe17 	ldw	r2,-8(fp)
}
 840ecd8:	e037883a 	mov	sp,fp
 840ecdc:	dfc00117 	ldw	ra,4(sp)
 840ece0:	df000017 	ldw	fp,0(sp)
 840ece4:	dec00204 	addi	sp,sp,8
 840ece8:	f800283a 	ret

0840ecec <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 840ecec:	defffd04 	addi	sp,sp,-12
 840ecf0:	dfc00215 	stw	ra,8(sp)
 840ecf4:	df000115 	stw	fp,4(sp)
 840ecf8:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 840ecfc:	00821074 	movhi	r2,2113
 840ed00:	108e5d04 	addi	r2,r2,14708
 840ed04:	10800017 	ldw	r2,0(r2)
 840ed08:	1005003a 	cmpeq	r2,r2,zero
 840ed0c:	1000061e 	bne	r2,zero,840ed28 <alt_get_errno+0x3c>
 840ed10:	00821074 	movhi	r2,2113
 840ed14:	108e5d04 	addi	r2,r2,14708
 840ed18:	10800017 	ldw	r2,0(r2)
 840ed1c:	103ee83a 	callr	r2
 840ed20:	e0bfff15 	stw	r2,-4(fp)
 840ed24:	00000306 	br	840ed34 <alt_get_errno+0x48>
 840ed28:	00821074 	movhi	r2,2113
 840ed2c:	10956404 	addi	r2,r2,21904
 840ed30:	e0bfff15 	stw	r2,-4(fp)
 840ed34:	e0bfff17 	ldw	r2,-4(fp)
}
 840ed38:	e037883a 	mov	sp,fp
 840ed3c:	dfc00117 	ldw	ra,4(sp)
 840ed40:	df000017 	ldw	fp,0(sp)
 840ed44:	dec00204 	addi	sp,sp,8
 840ed48:	f800283a 	ret

0840ed4c <altera_avalon_mutex_close>:
 * altera_avalon_mutex_close - Does nothing at the moment, but included for 
 * completeness
 *
 */
void altera_avalon_mutex_close (alt_mutex_dev* dev)
{
 840ed4c:	defffe04 	addi	sp,sp,-8
 840ed50:	df000115 	stw	fp,4(sp)
 840ed54:	df000104 	addi	fp,sp,4
 840ed58:	e13fff15 	stw	r4,-4(fp)
  return;
}
 840ed5c:	e037883a 	mov	sp,fp
 840ed60:	df000017 	ldw	fp,0(sp)
 840ed64:	dec00104 	addi	sp,sp,4
 840ed68:	f800283a 	ret

0840ed6c <altera_avalon_mutex_lock>:
/*
 * altera_avalon_mutex_lock - Lock the hardware mutex
 *
 */
void altera_avalon_mutex_lock( alt_mutex_dev* dev, alt_u32 value )
{
 840ed6c:	defffc04 	addi	sp,sp,-16
 840ed70:	dfc00315 	stw	ra,12(sp)
 840ed74:	df000215 	stw	fp,8(sp)
 840ed78:	df000204 	addi	fp,sp,8
 840ed7c:	e13ffe15 	stw	r4,-8(fp)
 840ed80:	e17fff15 	stw	r5,-4(fp)
   * semaphore. This ensures that reading from the device is thread-safe.
   */

  ALT_SEM_PEND (dev->lock, 0);

  while ( alt_mutex_trylock( dev, value ) != 0);
 840ed84:	e13ffe17 	ldw	r4,-8(fp)
 840ed88:	e17fff17 	ldw	r5,-4(fp)
 840ed8c:	840ec180 	call	840ec18 <alt_mutex_trylock>
 840ed90:	1004c03a 	cmpne	r2,r2,zero
 840ed94:	103ffb1e 	bne	r2,zero,840ed84 <altera_avalon_mutex_lock+0x18>
}
 840ed98:	e037883a 	mov	sp,fp
 840ed9c:	dfc00117 	ldw	ra,4(sp)
 840eda0:	df000017 	ldw	fp,0(sp)
 840eda4:	dec00204 	addi	sp,sp,8
 840eda8:	f800283a 	ret

0840edac <altera_avalon_mutex_trylock>:
 *
 * returns 0 on success -1 otherwise
 *
 */
int altera_avalon_mutex_trylock( alt_mutex_dev* dev, alt_u32 value )
{
 840edac:	defffb04 	addi	sp,sp,-20
 840edb0:	dfc00415 	stw	ra,16(sp)
 840edb4:	df000315 	stw	fp,12(sp)
 840edb8:	df000304 	addi	fp,sp,12
 840edbc:	e13ffe15 	stw	r4,-8(fp)
 840edc0:	e17fff15 	stw	r5,-4(fp)
  int ret_code;

  ALT_SEM_PEND (dev->lock, 0);

  ret_code = alt_mutex_trylock( dev, value);
 840edc4:	e13ffe17 	ldw	r4,-8(fp)
 840edc8:	e17fff17 	ldw	r5,-4(fp)
 840edcc:	840ec180 	call	840ec18 <alt_mutex_trylock>
 840edd0:	e0bffd15 	stw	r2,-12(fp)
  if (ret_code)
  {
    ALT_SEM_POST (dev->lock);
  }

  return ret_code;
 840edd4:	e0bffd17 	ldw	r2,-12(fp)
}
 840edd8:	e037883a 	mov	sp,fp
 840eddc:	dfc00117 	ldw	ra,4(sp)
 840ede0:	df000017 	ldw	fp,0(sp)
 840ede4:	dec00204 	addi	sp,sp,8
 840ede8:	f800283a 	ret

0840edec <altera_avalon_mutex_unlock>:
 * This function does not check that you own the Mutex if you try to release
 * a Mutex you do not own the behaviour is undefined
 *
 */
void altera_avalon_mutex_unlock( alt_mutex_dev* dev )
{
 840edec:	defffd04 	addi	sp,sp,-12
 840edf0:	df000215 	stw	fp,8(sp)
 840edf4:	df000204 	addi	fp,sp,8
 840edf8:	e13fff15 	stw	r4,-4(fp)
  alt_u32 id;
  NIOS2_READ_CPUID(id);
 840edfc:	0005317a 	rdctl	r2,cpuid
 840ee00:	e0bffe15 	stw	r2,-8(fp)

  /*
  * This Mutex has been claimed and released since Reset so clear the Reset bit
  * This MUST happen before we release the MUTEX
  */
  IOWR_ALTERA_AVALON_MUTEX_RESET(dev->mutex_base, 
 840ee04:	e0bfff17 	ldw	r2,-4(fp)
 840ee08:	10800317 	ldw	r2,12(r2)
 840ee0c:	10800104 	addi	r2,r2,4
 840ee10:	1007883a 	mov	r3,r2
 840ee14:	00800044 	movi	r2,1
 840ee18:	18800035 	stwio	r2,0(r3)
                                  ALTERA_AVALON_MUTEX_RESET_RESET_MSK);
  IOWR_ALTERA_AVALON_MUTEX_MUTEX(dev->mutex_base, 
 840ee1c:	e0bfff17 	ldw	r2,-4(fp)
 840ee20:	11000317 	ldw	r4,12(r2)
 840ee24:	e0bffe17 	ldw	r2,-8(fp)
 840ee28:	1004943a 	slli	r2,r2,16
 840ee2c:	1007883a 	mov	r3,r2
 840ee30:	2005883a 	mov	r2,r4
 840ee34:	10c00035 	stwio	r3,0(r2)

  /*
  * Now that access to the hardware Mutex is complete, release the thread lock
  */
  ALT_SEM_POST (dev->lock);
}
 840ee38:	e037883a 	mov	sp,fp
 840ee3c:	df000017 	ldw	fp,0(sp)
 840ee40:	dec00104 	addi	sp,sp,4
 840ee44:	f800283a 	ret

0840ee48 <altera_avalon_mutex_is_mine>:
 * altera_avalon_mutex_is_mine - Do I own the Mutex?
 *
 *  returns non zero if the mutex is owned by this CPU
 */
int altera_avalon_mutex_is_mine( alt_mutex_dev* dev )
{
 840ee48:	defff904 	addi	sp,sp,-28
 840ee4c:	df000615 	stw	fp,24(sp)
 840ee50:	df000604 	addi	fp,sp,24
 840ee54:	e13fff15 	stw	r4,-4(fp)
  alt_u32 id, data, owner, value;
  int ret_code = 0;
 840ee58:	e03ffa15 	stw	zero,-24(fp)

  NIOS2_READ_CPUID(id);
 840ee5c:	0005317a 	rdctl	r2,cpuid
 840ee60:	e0bffe15 	stw	r2,-8(fp)

  /* retrieve the contents of the mutex */
  data = IORD_ALTERA_AVALON_MUTEX_MUTEX(dev->mutex_base);
 840ee64:	e0bfff17 	ldw	r2,-4(fp)
 840ee68:	10800317 	ldw	r2,12(r2)
 840ee6c:	10800037 	ldwio	r2,0(r2)
 840ee70:	e0bffd15 	stw	r2,-12(fp)
  owner = (data & ALTERA_AVALON_MUTEX_MUTEX_OWNER_MSK) >> 
 840ee74:	e0bffd17 	ldw	r2,-12(fp)
 840ee78:	10bfffec 	andhi	r2,r2,65535
 840ee7c:	1004d43a 	srli	r2,r2,16
 840ee80:	e0bffc15 	stw	r2,-16(fp)
              ALTERA_AVALON_MUTEX_MUTEX_OWNER_OFST;

  if (owner == id) 
 840ee84:	e0fffc17 	ldw	r3,-16(fp)
 840ee88:	e0bffe17 	ldw	r2,-8(fp)
 840ee8c:	1880081e 	bne	r3,r2,840eeb0 <altera_avalon_mutex_is_mine+0x68>
  {
    value = (data & ALTERA_AVALON_MUTEX_MUTEX_VALUE_MSK) >> 
 840ee90:	e0bffd17 	ldw	r2,-12(fp)
 840ee94:	10bfffcc 	andi	r2,r2,65535
 840ee98:	e0bffb15 	stw	r2,-20(fp)
                  ALTERA_AVALON_MUTEX_MUTEX_VALUE_OFST;
    if (value != 0)
 840ee9c:	e0bffb17 	ldw	r2,-20(fp)
 840eea0:	1005003a 	cmpeq	r2,r2,zero
 840eea4:	1000021e 	bne	r2,zero,840eeb0 <altera_avalon_mutex_is_mine+0x68>
    {
      ret_code = 1;
 840eea8:	00800044 	movi	r2,1
 840eeac:	e0bffa15 	stw	r2,-24(fp)
    }
  }

  return ret_code;
 840eeb0:	e0bffa17 	ldw	r2,-24(fp)
}
 840eeb4:	e037883a 	mov	sp,fp
 840eeb8:	df000017 	ldw	fp,0(sp)
 840eebc:	dec00104 	addi	sp,sp,4
 840eec0:	f800283a 	ret

0840eec4 <altera_avalon_mutex_first_lock>:
 *
 * Has this Mutex been released since reset if not return 1
 * otherwise return 0
 */
int altera_avalon_mutex_first_lock( alt_mutex_dev* dev )
{
 840eec4:	defffc04 	addi	sp,sp,-16
 840eec8:	df000315 	stw	fp,12(sp)
 840eecc:	df000304 	addi	fp,sp,12
 840eed0:	e13fff15 	stw	r4,-4(fp)
  alt_u32 data;
  int ret_code = 0;
 840eed4:	e03ffd15 	stw	zero,-12(fp)

  data = IORD_ALTERA_AVALON_MUTEX_RESET(dev->mutex_base);
 840eed8:	e0bfff17 	ldw	r2,-4(fp)
 840eedc:	10800317 	ldw	r2,12(r2)
 840eee0:	10800104 	addi	r2,r2,4
 840eee4:	10800037 	ldwio	r2,0(r2)
 840eee8:	e0bffe15 	stw	r2,-8(fp)

  if (data & ALTERA_AVALON_MUTEX_RESET_RESET_MSK) 
 840eeec:	e0bffe17 	ldw	r2,-8(fp)
 840eef0:	1080004c 	andi	r2,r2,1
 840eef4:	10803fcc 	andi	r2,r2,255
 840eef8:	1005003a 	cmpeq	r2,r2,zero
 840eefc:	1000021e 	bne	r2,zero,840ef08 <altera_avalon_mutex_first_lock+0x44>
  {
    ret_code = 1;
 840ef00:	00800044 	movi	r2,1
 840ef04:	e0bffd15 	stw	r2,-12(fp)
  }

  return ret_code;
 840ef08:	e0bffd17 	ldw	r2,-12(fp)
}
 840ef0c:	e037883a 	mov	sp,fp
 840ef10:	df000017 	ldw	fp,0(sp)
 840ef14:	dec00104 	addi	sp,sp,4
 840ef18:	f800283a 	ret

0840ef1c <alt_up_pixel_buffer_dma_open_dev>:

#include "altera_up_avalon_video_pixel_buffer_dma.h"

#define ABS(x)	((x >= 0) ? (x) : (-(x)))

alt_up_pixel_buffer_dma_dev* alt_up_pixel_buffer_dma_open_dev(const char* name) {
 840ef1c:	defffc04 	addi	sp,sp,-16
 840ef20:	dfc00315 	stw	ra,12(sp)
 840ef24:	df000215 	stw	fp,8(sp)
 840ef28:	df000204 	addi	fp,sp,8
 840ef2c:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_pixel_buffer_dma_dev *dev = (alt_up_pixel_buffer_dma_dev*)alt_find_dev(name, &alt_dev_list);
 840ef30:	e13fff17 	ldw	r4,-4(fp)
 840ef34:	01421074 	movhi	r5,2113
 840ef38:	294e5a04 	addi	r5,r5,14696
 840ef3c:	84107fc0 	call	84107fc <alt_find_dev>
 840ef40:	e0bffe15 	stw	r2,-8(fp)

  return dev;
 840ef44:	e0bffe17 	ldw	r2,-8(fp)
}
 840ef48:	e037883a 	mov	sp,fp
 840ef4c:	dfc00117 	ldw	ra,4(sp)
 840ef50:	df000017 	ldw	fp,0(sp)
 840ef54:	dec00204 	addi	sp,sp,8
 840ef58:	f800283a 	ret

0840ef5c <alt_up_pixel_buffer_dma_draw>:

int alt_up_pixel_buffer_dma_draw(alt_up_pixel_buffer_dma_dev *pixel_buffer, unsigned int color, unsigned int x, unsigned int y)
/* This function draws a pixel to the back buffer.
 */
{
 840ef5c:	defff904 	addi	sp,sp,-28
 840ef60:	df000615 	stw	fp,24(sp)
 840ef64:	df000604 	addi	fp,sp,24
 840ef68:	e13ffb15 	stw	r4,-20(fp)
 840ef6c:	e17ffc15 	stw	r5,-16(fp)
 840ef70:	e1bffd15 	stw	r6,-12(fp)
 840ef74:	e1fffe15 	stw	r7,-8(fp)
	// boundary check
	if (x >= pixel_buffer->x_resolution || y >= pixel_buffer->y_resolution )
 840ef78:	e0bffb17 	ldw	r2,-20(fp)
 840ef7c:	10c00f17 	ldw	r3,60(r2)
 840ef80:	e0bffd17 	ldw	r2,-12(fp)
 840ef84:	10c0042e 	bgeu	r2,r3,840ef98 <alt_up_pixel_buffer_dma_draw+0x3c>
 840ef88:	e0bffb17 	ldw	r2,-20(fp)
 840ef8c:	10c01017 	ldw	r3,64(r2)
 840ef90:	e0bffe17 	ldw	r2,-8(fp)
 840ef94:	10c00336 	bltu	r2,r3,840efa4 <alt_up_pixel_buffer_dma_draw+0x48>
		return -1;
 840ef98:	00bfffc4 	movi	r2,-1
 840ef9c:	e0bfff15 	stw	r2,-4(fp)
 840efa0:	00005106 	br	840f0e8 <alt_up_pixel_buffer_dma_draw+0x18c>

	unsigned int addr = 0;
 840efa4:	e03ffa15 	stw	zero,-24(fp)
	/* Check the mode VGA Pixel Buffer is using. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
 840efa8:	e0bffb17 	ldw	r2,-20(fp)
 840efac:	10800d17 	ldw	r2,52(r2)
 840efb0:	1004c03a 	cmpne	r2,r2,zero
 840efb4:	1000151e 	bne	r2,zero,840f00c <alt_up_pixel_buffer_dma_draw+0xb0>
		/* For X-Y addressing mode, the address format is | unused | Y | X |. So shift bits for coordinates X and Y into their respective locations. */
		addr |= ((x & pixel_buffer->x_coord_mask) << pixel_buffer->x_coord_offset);
 840efb8:	e0bffb17 	ldw	r2,-20(fp)
 840efbc:	10c01217 	ldw	r3,72(r2)
 840efc0:	e0bffd17 	ldw	r2,-12(fp)
 840efc4:	1886703a 	and	r3,r3,r2
 840efc8:	e0bffb17 	ldw	r2,-20(fp)
 840efcc:	10801117 	ldw	r2,68(r2)
 840efd0:	1886983a 	sll	r3,r3,r2
 840efd4:	e0bffa17 	ldw	r2,-24(fp)
 840efd8:	10c4b03a 	or	r2,r2,r3
 840efdc:	e0bffa15 	stw	r2,-24(fp)
		addr |= ((y & pixel_buffer->y_coord_mask) << pixel_buffer->y_coord_offset);
 840efe0:	e0bffb17 	ldw	r2,-20(fp)
 840efe4:	10c01417 	ldw	r3,80(r2)
 840efe8:	e0bffe17 	ldw	r2,-8(fp)
 840efec:	1886703a 	and	r3,r3,r2
 840eff0:	e0bffb17 	ldw	r2,-20(fp)
 840eff4:	10801317 	ldw	r2,76(r2)
 840eff8:	1886983a 	sll	r3,r3,r2
 840effc:	e0bffa17 	ldw	r2,-24(fp)
 840f000:	10c4b03a 	or	r2,r2,r3
 840f004:	e0bffa15 	stw	r2,-24(fp)
 840f008:	00001706 	br	840f068 <alt_up_pixel_buffer_dma_draw+0x10c>
	} else {
		/* In a consecutive addressing mode, the pixels are stored in consecutive memory locations. So the address of a pixel at (x,y) can be computed as
		 * (y*x_resolution + x).*/
		addr += ((x & pixel_buffer->x_coord_mask) << pixel_buffer->x_coord_offset);
 840f00c:	e0bffb17 	ldw	r2,-20(fp)
 840f010:	10c01217 	ldw	r3,72(r2)
 840f014:	e0bffd17 	ldw	r2,-12(fp)
 840f018:	1886703a 	and	r3,r3,r2
 840f01c:	e0bffb17 	ldw	r2,-20(fp)
 840f020:	10801117 	ldw	r2,68(r2)
 840f024:	1886983a 	sll	r3,r3,r2
 840f028:	e0bffa17 	ldw	r2,-24(fp)
 840f02c:	10c5883a 	add	r2,r2,r3
 840f030:	e0bffa15 	stw	r2,-24(fp)
		addr += (((y & pixel_buffer->y_coord_mask) * pixel_buffer->x_resolution) << pixel_buffer->x_coord_offset);
 840f034:	e0bffb17 	ldw	r2,-20(fp)
 840f038:	10c01417 	ldw	r3,80(r2)
 840f03c:	e0bffe17 	ldw	r2,-8(fp)
 840f040:	1886703a 	and	r3,r3,r2
 840f044:	e0bffb17 	ldw	r2,-20(fp)
 840f048:	10800f17 	ldw	r2,60(r2)
 840f04c:	1887383a 	mul	r3,r3,r2
 840f050:	e0bffb17 	ldw	r2,-20(fp)
 840f054:	10801117 	ldw	r2,68(r2)
 840f058:	1886983a 	sll	r3,r3,r2
 840f05c:	e0bffa17 	ldw	r2,-24(fp)
 840f060:	10c5883a 	add	r2,r2,r3
 840f064:	e0bffa15 	stw	r2,-24(fp)
	}
	/* Now, depending on the color depth, write the pixel color to the specified memory location. */
	if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
 840f068:	e0bffb17 	ldw	r2,-20(fp)
 840f06c:	10800e17 	ldw	r2,56(r2)
 840f070:	10800058 	cmpnei	r2,r2,1
 840f074:	1000081e 	bne	r2,zero,840f098 <alt_up_pixel_buffer_dma_draw+0x13c>
		IOWR_8DIRECT(pixel_buffer->back_buffer_start_address, addr, color);
 840f078:	e0bffb17 	ldw	r2,-20(fp)
 840f07c:	10800c17 	ldw	r2,48(r2)
 840f080:	1007883a 	mov	r3,r2
 840f084:	e0bffa17 	ldw	r2,-24(fp)
 840f088:	1885883a 	add	r2,r3,r2
 840f08c:	e0fffc17 	ldw	r3,-16(fp)
 840f090:	10c00025 	stbio	r3,0(r2)
 840f094:	00001306 	br	840f0e4 <alt_up_pixel_buffer_dma_draw+0x188>
	} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
 840f098:	e0bffb17 	ldw	r2,-20(fp)
 840f09c:	10800e17 	ldw	r2,56(r2)
 840f0a0:	10800098 	cmpnei	r2,r2,2
 840f0a4:	1000081e 	bne	r2,zero,840f0c8 <alt_up_pixel_buffer_dma_draw+0x16c>
		IOWR_16DIRECT(pixel_buffer->back_buffer_start_address, addr, color);
 840f0a8:	e0bffb17 	ldw	r2,-20(fp)
 840f0ac:	10800c17 	ldw	r2,48(r2)
 840f0b0:	1007883a 	mov	r3,r2
 840f0b4:	e0bffa17 	ldw	r2,-24(fp)
 840f0b8:	1885883a 	add	r2,r3,r2
 840f0bc:	e0fffc17 	ldw	r3,-16(fp)
 840f0c0:	10c0002d 	sthio	r3,0(r2)
 840f0c4:	00000706 	br	840f0e4 <alt_up_pixel_buffer_dma_draw+0x188>
	} else {
		IOWR_32DIRECT(pixel_buffer->back_buffer_start_address, addr, color);
 840f0c8:	e0bffb17 	ldw	r2,-20(fp)
 840f0cc:	10800c17 	ldw	r2,48(r2)
 840f0d0:	1007883a 	mov	r3,r2
 840f0d4:	e0bffa17 	ldw	r2,-24(fp)
 840f0d8:	1885883a 	add	r2,r3,r2
 840f0dc:	e0fffc17 	ldw	r3,-16(fp)
 840f0e0:	10c00035 	stwio	r3,0(r2)
	}

	return 0;
 840f0e4:	e03fff15 	stw	zero,-4(fp)
 840f0e8:	e0bfff17 	ldw	r2,-4(fp)
}
 840f0ec:	e037883a 	mov	sp,fp
 840f0f0:	df000017 	ldw	fp,0(sp)
 840f0f4:	dec00104 	addi	sp,sp,4
 840f0f8:	f800283a 	ret

0840f0fc <alt_up_pixel_buffer_dma_change_back_buffer_address>:

int alt_up_pixel_buffer_dma_change_back_buffer_address(alt_up_pixel_buffer_dma_dev *pixel_buffer, unsigned int new_address)
/* This function changes the memory address for the back buffer. */
{
 840f0fc:	defffd04 	addi	sp,sp,-12
 840f100:	df000215 	stw	fp,8(sp)
 840f104:	df000204 	addi	fp,sp,8
 840f108:	e13ffe15 	stw	r4,-8(fp)
 840f10c:	e17fff15 	stw	r5,-4(fp)
	IOWR_32DIRECT(pixel_buffer->base, 4, new_address);
 840f110:	e0bffe17 	ldw	r2,-8(fp)
 840f114:	10800a17 	ldw	r2,40(r2)
 840f118:	10800104 	addi	r2,r2,4
 840f11c:	e0ffff17 	ldw	r3,-4(fp)
 840f120:	10c00035 	stwio	r3,0(r2)
	pixel_buffer->back_buffer_start_address = IORD_32DIRECT(pixel_buffer->base, 4);
 840f124:	e0bffe17 	ldw	r2,-8(fp)
 840f128:	10800a17 	ldw	r2,40(r2)
 840f12c:	10800104 	addi	r2,r2,4
 840f130:	10800037 	ldwio	r2,0(r2)
 840f134:	1007883a 	mov	r3,r2
 840f138:	e0bffe17 	ldw	r2,-8(fp)
 840f13c:	10c00c15 	stw	r3,48(r2)
	return 0;
 840f140:	0005883a 	mov	r2,zero
}
 840f144:	e037883a 	mov	sp,fp
 840f148:	df000017 	ldw	fp,0(sp)
 840f14c:	dec00104 	addi	sp,sp,4
 840f150:	f800283a 	ret

0840f154 <alt_up_pixel_buffer_dma_swap_buffers>:

int alt_up_pixel_buffer_dma_swap_buffers(alt_up_pixel_buffer_dma_dev *pixel_buffer)
/* This function swaps the front and back buffers. At the next refresh cycle the back buffer will be drawn on the screen
 * and will become the front buffer. */
{
 840f154:	defffe04 	addi	sp,sp,-8
 840f158:	df000115 	stw	fp,4(sp)
 840f15c:	df000104 	addi	fp,sp,4
 840f160:	e13fff15 	stw	r4,-4(fp)
	register unsigned int temp = pixel_buffer->back_buffer_start_address;
 840f164:	e0bfff17 	ldw	r2,-4(fp)
 840f168:	11000c17 	ldw	r4,48(r2)
	IOWR_32DIRECT(pixel_buffer->base, 0, 1);
 840f16c:	e0bfff17 	ldw	r2,-4(fp)
 840f170:	10800a17 	ldw	r2,40(r2)
 840f174:	1007883a 	mov	r3,r2
 840f178:	00800044 	movi	r2,1
 840f17c:	18800035 	stwio	r2,0(r3)
	pixel_buffer->back_buffer_start_address = pixel_buffer->buffer_start_address;
 840f180:	e0bfff17 	ldw	r2,-4(fp)
 840f184:	10c00b17 	ldw	r3,44(r2)
 840f188:	e0bfff17 	ldw	r2,-4(fp)
 840f18c:	10c00c15 	stw	r3,48(r2)
	pixel_buffer->buffer_start_address = temp;
 840f190:	e0bfff17 	ldw	r2,-4(fp)
 840f194:	11000b15 	stw	r4,44(r2)
	return 0;
 840f198:	0005883a 	mov	r2,zero
}
 840f19c:	e037883a 	mov	sp,fp
 840f1a0:	df000017 	ldw	fp,0(sp)
 840f1a4:	dec00104 	addi	sp,sp,4
 840f1a8:	f800283a 	ret

0840f1ac <alt_up_pixel_buffer_dma_check_swap_buffers_status>:
int alt_up_pixel_buffer_dma_check_swap_buffers_status(alt_up_pixel_buffer_dma_dev *pixel_buffer)
/* This function checks if the buffer swap has occured. Since the buffer swap only happens after an entire screen is drawn,
 * it is important to wait for this function to return 0 before proceeding to draw on either buffer. When both front and the back buffers
 * have the same address calling the alt_up_pixel_buffer_dma_swap_buffers(...) function and then waiting for this function to return 0, causes your program to
 * wait for the screen to refresh. */
{
 840f1ac:	defffe04 	addi	sp,sp,-8
 840f1b0:	df000115 	stw	fp,4(sp)
 840f1b4:	df000104 	addi	fp,sp,4
 840f1b8:	e13fff15 	stw	r4,-4(fp)
	return (IORD_32DIRECT(pixel_buffer->base, 12) & 0x1);
 840f1bc:	e0bfff17 	ldw	r2,-4(fp)
 840f1c0:	10800a17 	ldw	r2,40(r2)
 840f1c4:	10800304 	addi	r2,r2,12
 840f1c8:	10800037 	ldwio	r2,0(r2)
 840f1cc:	1080004c 	andi	r2,r2,1
}
 840f1d0:	e037883a 	mov	sp,fp
 840f1d4:	df000017 	ldw	fp,0(sp)
 840f1d8:	dec00104 	addi	sp,sp,4
 840f1dc:	f800283a 	ret

0840f1e0 <alt_up_pixel_buffer_dma_clear_screen>:

void alt_up_pixel_buffer_dma_clear_screen(alt_up_pixel_buffer_dma_dev *pixel_buffer, int backbuffer)
/* This function clears the screen by setting each pixel to a black color. */
{
 840f1e0:	defff604 	addi	sp,sp,-40
 840f1e4:	df000915 	stw	fp,36(sp)
 840f1e8:	df000904 	addi	fp,sp,36
 840f1ec:	e13ff715 	stw	r4,-36(fp)
 840f1f0:	e17ff815 	stw	r5,-32(fp)
	register unsigned int addr;
	register unsigned int limit_x, limit_y;
	
	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
 840f1f4:	e0bff817 	ldw	r2,-32(fp)
 840f1f8:	10800058 	cmpnei	r2,r2,1
 840f1fc:	1000041e 	bne	r2,zero,840f210 <alt_up_pixel_buffer_dma_clear_screen+0x30>
		addr = pixel_buffer->back_buffer_start_address;
 840f200:	e0bff717 	ldw	r2,-36(fp)
 840f204:	10800c17 	ldw	r2,48(r2)
 840f208:	e0bfff15 	stw	r2,-4(fp)
 840f20c:	00000306 	br	840f21c <alt_up_pixel_buffer_dma_clear_screen+0x3c>
	else
		addr = pixel_buffer->buffer_start_address;
 840f210:	e0bff717 	ldw	r2,-36(fp)
 840f214:	10800b17 	ldw	r2,44(r2)
 840f218:	e0bfff15 	stw	r2,-4(fp)
	limit_x = pixel_buffer->x_resolution;
 840f21c:	e0bff717 	ldw	r2,-36(fp)
 840f220:	10800f17 	ldw	r2,60(r2)
 840f224:	e0bffe15 	stw	r2,-8(fp)
	/* In 16 and 32-bit color modes we use twice or four times more memory for the display buffer.*/
	if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
 840f228:	e0bff717 	ldw	r2,-36(fp)
 840f22c:	10800e17 	ldw	r2,56(r2)
 840f230:	10800098 	cmpnei	r2,r2,2
 840f234:	1000051e 	bne	r2,zero,840f24c <alt_up_pixel_buffer_dma_clear_screen+0x6c>
		limit_x = limit_x << 1;
 840f238:	e0fffe17 	ldw	r3,-8(fp)
 840f23c:	e0fffe17 	ldw	r3,-8(fp)
 840f240:	18c5883a 	add	r2,r3,r3
 840f244:	e0bffe15 	stw	r2,-8(fp)
 840f248:	00000506 	br	840f260 <alt_up_pixel_buffer_dma_clear_screen+0x80>
	} else {
		limit_x = limit_x << 2;
 840f24c:	e13ffe17 	ldw	r4,-8(fp)
 840f250:	e13ffe17 	ldw	r4,-8(fp)
 840f254:	2105883a 	add	r2,r4,r4
 840f258:	1085883a 	add	r2,r2,r2
 840f25c:	e0bffe15 	stw	r2,-8(fp)
	}	
	limit_y = pixel_buffer->y_resolution;
 840f260:	e0bff717 	ldw	r2,-36(fp)
 840f264:	10801017 	ldw	r2,64(r2)
 840f268:	e0bffd15 	stw	r2,-12(fp)

	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
 840f26c:	e0bff717 	ldw	r2,-36(fp)
 840f270:	10800d17 	ldw	r2,52(r2)
 840f274:	1004c03a 	cmpne	r2,r2,zero
 840f278:	10001e1e 	bne	r2,zero,840f2f4 <alt_up_pixel_buffer_dma_clear_screen+0x114>
		/* Clear the screen when the VGA is set up in an XY addressing mode. */
		register unsigned int x,y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
 840f27c:	e0bff717 	ldw	r2,-36(fp)
 840f280:	10801317 	ldw	r2,76(r2)
 840f284:	e0bffa15 	stw	r2,-24(fp)

		for (y = 0; y < limit_y; y++)
 840f288:	e03ffb15 	stw	zero,-20(fp)
 840f28c:	00001506 	br	840f2e4 <alt_up_pixel_buffer_dma_clear_screen+0x104>
		{
			for (x = 0; x < limit_x; x = x + 4)
 840f290:	e03ffc15 	stw	zero,-16(fp)
 840f294:	00000706 	br	840f2b4 <alt_up_pixel_buffer_dma_clear_screen+0xd4>
			{
				IOWR_32DIRECT(addr, x, 0);
 840f298:	e0ffff17 	ldw	r3,-4(fp)
 840f29c:	e0bffc17 	ldw	r2,-16(fp)
 840f2a0:	1885883a 	add	r2,r3,r2
 840f2a4:	10000035 	stwio	zero,0(r2)
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;

		for (y = 0; y < limit_y; y++)
		{
			for (x = 0; x < limit_x; x = x + 4)
 840f2a8:	e0bffc17 	ldw	r2,-16(fp)
 840f2ac:	10800104 	addi	r2,r2,4
 840f2b0:	e0bffc15 	stw	r2,-16(fp)
 840f2b4:	e0fffc17 	ldw	r3,-16(fp)
 840f2b8:	e13ffe17 	ldw	r4,-8(fp)
 840f2bc:	193ff636 	bltu	r3,r4,840f298 <alt_up_pixel_buffer_dma_clear_screen+0xb8>
			{
				IOWR_32DIRECT(addr, x, 0);
			}
			addr = addr + (1 << offset_y);
 840f2c0:	e0fffa17 	ldw	r3,-24(fp)
 840f2c4:	00800044 	movi	r2,1
 840f2c8:	10c4983a 	sll	r2,r2,r3
 840f2cc:	e0ffff17 	ldw	r3,-4(fp)
 840f2d0:	1887883a 	add	r3,r3,r2
 840f2d4:	e0ffff15 	stw	r3,-4(fp)
		/* Clear the screen when the VGA is set up in an XY addressing mode. */
		register unsigned int x,y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;

		for (y = 0; y < limit_y; y++)
 840f2d8:	e13ffb17 	ldw	r4,-20(fp)
 840f2dc:	21000044 	addi	r4,r4,1
 840f2e0:	e13ffb15 	stw	r4,-20(fp)
 840f2e4:	e0bffb17 	ldw	r2,-20(fp)
 840f2e8:	e0fffd17 	ldw	r3,-12(fp)
 840f2ec:	10ffe836 	bltu	r2,r3,840f290 <alt_up_pixel_buffer_dma_clear_screen+0xb0>
 840f2f0:	00001006 	br	840f334 <alt_up_pixel_buffer_dma_clear_screen+0x154>
			addr = addr + (1 << offset_y);
		}
	} else {
		/* Clear the screen when the VGA is set up in a linear addressing mode. */
		register int x;
		limit_y = limit_x*limit_y;	
 840f2f4:	e13ffd17 	ldw	r4,-12(fp)
 840f2f8:	e0bffe17 	ldw	r2,-8(fp)
 840f2fc:	2089383a 	mul	r4,r4,r2
 840f300:	e13ffd15 	stw	r4,-12(fp)

		for (x = 0; x < limit_y; x = x + 4)
 840f304:	e03ff915 	stw	zero,-28(fp)
 840f308:	00000706 	br	840f328 <alt_up_pixel_buffer_dma_clear_screen+0x148>
		{
			IOWR_32DIRECT(addr, x, 0);
 840f30c:	e0ffff17 	ldw	r3,-4(fp)
 840f310:	e0bff917 	ldw	r2,-28(fp)
 840f314:	1885883a 	add	r2,r3,r2
 840f318:	10000035 	stwio	zero,0(r2)
	} else {
		/* Clear the screen when the VGA is set up in a linear addressing mode. */
		register int x;
		limit_y = limit_x*limit_y;	

		for (x = 0; x < limit_y; x = x + 4)
 840f31c:	e0fff917 	ldw	r3,-28(fp)
 840f320:	18c00104 	addi	r3,r3,4
 840f324:	e0fff915 	stw	r3,-28(fp)
 840f328:	e0bff917 	ldw	r2,-28(fp)
 840f32c:	e13ffd17 	ldw	r4,-12(fp)
 840f330:	113ff636 	bltu	r2,r4,840f30c <alt_up_pixel_buffer_dma_clear_screen+0x12c>
		{
			IOWR_32DIRECT(addr, x, 0);
		}
	}
}
 840f334:	e037883a 	mov	sp,fp
 840f338:	df000017 	ldw	fp,0(sp)
 840f33c:	dec00104 	addi	sp,sp,4
 840f340:	f800283a 	ret

0840f344 <alt_up_pixel_buffer_dma_draw_box>:

void alt_up_pixel_buffer_dma_draw_box(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int y0, int x1, int y1, int color, int backbuffer)
/* This function draws a filled box. */
{
 840f344:	deffed04 	addi	sp,sp,-76
 840f348:	df001215 	stw	fp,72(sp)
 840f34c:	df001204 	addi	fp,sp,72
 840f350:	e13fee15 	stw	r4,-72(fp)
 840f354:	e17fef15 	stw	r5,-68(fp)
 840f358:	e1bff015 	stw	r6,-64(fp)
 840f35c:	e1fff115 	stw	r7,-60(fp)
	register unsigned int addr;
	register unsigned int limit_x = pixel_buffer->x_resolution;
 840f360:	e0bfee17 	ldw	r2,-72(fp)
 840f364:	10800f17 	ldw	r2,60(r2)
 840f368:	e0bffe15 	stw	r2,-8(fp)
	register unsigned int limit_y = pixel_buffer->y_resolution;
 840f36c:	e0bfee17 	ldw	r2,-72(fp)
 840f370:	10801017 	ldw	r2,64(r2)
 840f374:	e0bffd15 	stw	r2,-12(fp)
	register unsigned int temp;
	register unsigned int l_x = x0;
 840f378:	e0bfef17 	ldw	r2,-68(fp)
 840f37c:	e0bffb15 	stw	r2,-20(fp)
	register unsigned int r_x = x1;
 840f380:	e0fff117 	ldw	r3,-60(fp)
 840f384:	e0fffa15 	stw	r3,-24(fp)
	register unsigned int t_y = y0;
 840f388:	e13ff017 	ldw	r4,-64(fp)
 840f38c:	e13ff915 	stw	r4,-28(fp)
	register unsigned int b_y = y1;
 840f390:	e0800117 	ldw	r2,4(fp)
 840f394:	e0bff815 	stw	r2,-32(fp)
	register unsigned int local_color = color;
 840f398:	e0c00217 	ldw	r3,8(fp)
 840f39c:	e0fff715 	stw	r3,-36(fp)
	
	/* Check coordinates */
	if (l_x > r_x)
 840f3a0:	e13ffa17 	ldw	r4,-24(fp)
 840f3a4:	e0bffb17 	ldw	r2,-20(fp)
 840f3a8:	2080062e 	bgeu	r4,r2,840f3c4 <alt_up_pixel_buffer_dma_draw_box+0x80>
	{
		temp = l_x;
 840f3ac:	e0fffb17 	ldw	r3,-20(fp)
 840f3b0:	e0fffc15 	stw	r3,-16(fp)
		l_x = r_x;
 840f3b4:	e13ffa17 	ldw	r4,-24(fp)
 840f3b8:	e13ffb15 	stw	r4,-20(fp)
		r_x = temp;
 840f3bc:	e0bffc17 	ldw	r2,-16(fp)
 840f3c0:	e0bffa15 	stw	r2,-24(fp)
	}
	if (t_y > b_y)
 840f3c4:	e0fff817 	ldw	r3,-32(fp)
 840f3c8:	e13ff917 	ldw	r4,-28(fp)
 840f3cc:	1900062e 	bgeu	r3,r4,840f3e8 <alt_up_pixel_buffer_dma_draw_box+0xa4>
	{
		temp = t_y;
 840f3d0:	e0bff917 	ldw	r2,-28(fp)
 840f3d4:	e0bffc15 	stw	r2,-16(fp)
		t_y = b_y;
 840f3d8:	e0fff817 	ldw	r3,-32(fp)
 840f3dc:	e0fff915 	stw	r3,-28(fp)
		b_y = temp;
 840f3e0:	e13ffc17 	ldw	r4,-16(fp)
 840f3e4:	e13ff815 	stw	r4,-32(fp)
	}
	if ((l_x >= limit_x) || (t_y >= limit_y) || (r_x < 0) || (b_y < 0))
 840f3e8:	e0bffb17 	ldw	r2,-20(fp)
 840f3ec:	e0fffe17 	ldw	r3,-8(fp)
 840f3f0:	10c10d2e 	bgeu	r2,r3,840f828 <alt_up_pixel_buffer_dma_draw_box+0x4e4>
 840f3f4:	e13ff917 	ldw	r4,-28(fp)
 840f3f8:	e0bffd17 	ldw	r2,-12(fp)
 840f3fc:	20800136 	bltu	r4,r2,840f404 <alt_up_pixel_buffer_dma_draw_box+0xc0>
	{
		/* Drawing outside of the window, so don't bother. */
		return;
 840f400:	00010906 	br	840f828 <alt_up_pixel_buffer_dma_draw_box+0x4e4>
	/* Clip the box and draw only within the confines of the screen. */
	if (l_x < 0)
	{
		l_x = 0;
	}
	if (r_x >= limit_x)
 840f404:	e0fffa17 	ldw	r3,-24(fp)
 840f408:	e13ffe17 	ldw	r4,-8(fp)
 840f40c:	19000336 	bltu	r3,r4,840f41c <alt_up_pixel_buffer_dma_draw_box+0xd8>
	{
		r_x = limit_x - 1;
 840f410:	e0bffe17 	ldw	r2,-8(fp)
 840f414:	10bfffc4 	addi	r2,r2,-1
 840f418:	e0bffa15 	stw	r2,-24(fp)
	}
	if (t_y < 0)
	{
		t_y = 0;
	}
	if (b_y >= limit_y)
 840f41c:	e0fff817 	ldw	r3,-32(fp)
 840f420:	e13ffd17 	ldw	r4,-12(fp)
 840f424:	19000336 	bltu	r3,r4,840f434 <alt_up_pixel_buffer_dma_draw_box+0xf0>
	{
		b_y = limit_y - 1;
 840f428:	e0bffd17 	ldw	r2,-12(fp)
 840f42c:	10bfffc4 	addi	r2,r2,-1
 840f430:	e0bff815 	stw	r2,-32(fp)
	}

	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
 840f434:	e0800317 	ldw	r2,12(fp)
 840f438:	10800058 	cmpnei	r2,r2,1
 840f43c:	1000041e 	bne	r2,zero,840f450 <alt_up_pixel_buffer_dma_draw_box+0x10c>
		addr = pixel_buffer->back_buffer_start_address;
 840f440:	e0bfee17 	ldw	r2,-72(fp)
 840f444:	10800c17 	ldw	r2,48(r2)
 840f448:	e0bfff15 	stw	r2,-4(fp)
 840f44c:	00000306 	br	840f45c <alt_up_pixel_buffer_dma_draw_box+0x118>
	else
		addr = pixel_buffer->buffer_start_address;
 840f450:	e0bfee17 	ldw	r2,-72(fp)
 840f454:	10800b17 	ldw	r2,44(r2)
 840f458:	e0bfff15 	stw	r2,-4(fp)

	/* Draw the box using one of the addressing modes. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
 840f45c:	e0bfee17 	ldw	r2,-72(fp)
 840f460:	10800d17 	ldw	r2,52(r2)
 840f464:	1004c03a 	cmpne	r2,r2,zero
 840f468:	1000721e 	bne	r2,zero,840f634 <alt_up_pixel_buffer_dma_draw_box+0x2f0>
		/* Draw a box of a given color on the screen using the XY addressing mode. */
		register unsigned int x,y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
 840f46c:	e0bfee17 	ldw	r2,-72(fp)
 840f470:	10801317 	ldw	r2,76(r2)
 840f474:	e0bff415 	stw	r2,-48(fp)
		addr = addr + (t_y << offset_y);
 840f478:	e0bff417 	ldw	r2,-48(fp)
 840f47c:	e0fff917 	ldw	r3,-28(fp)
 840f480:	1884983a 	sll	r2,r3,r2
 840f484:	e13fff17 	ldw	r4,-4(fp)
 840f488:	2089883a 	add	r4,r4,r2
 840f48c:	e13fff15 	stw	r4,-4(fp)
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
 840f490:	e0bfee17 	ldw	r2,-72(fp)
 840f494:	10800e17 	ldw	r2,56(r2)
 840f498:	10800058 	cmpnei	r2,r2,1
 840f49c:	10001e1e 	bne	r2,zero,840f518 <alt_up_pixel_buffer_dma_draw_box+0x1d4>
			for (y = t_y; y <= b_y; y++)
 840f4a0:	e0bff917 	ldw	r2,-28(fp)
 840f4a4:	e0bff515 	stw	r2,-44(fp)
 840f4a8:	00001706 	br	840f508 <alt_up_pixel_buffer_dma_draw_box+0x1c4>
			{
				for (x = l_x; x <= r_x; x++)
 840f4ac:	e0fffb17 	ldw	r3,-20(fp)
 840f4b0:	e0fff615 	stw	r3,-40(fp)
 840f4b4:	00000806 	br	840f4d8 <alt_up_pixel_buffer_dma_draw_box+0x194>
				{
					IOWR_8DIRECT(addr, x, local_color);
 840f4b8:	e0ffff17 	ldw	r3,-4(fp)
 840f4bc:	e0bff617 	ldw	r2,-40(fp)
 840f4c0:	1885883a 	add	r2,r3,r2
 840f4c4:	e0fff717 	ldw	r3,-36(fp)
 840f4c8:	10c00025 	stbio	r3,0(r2)
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
 840f4cc:	e13ff617 	ldw	r4,-40(fp)
 840f4d0:	21000044 	addi	r4,r4,1
 840f4d4:	e13ff615 	stw	r4,-40(fp)
 840f4d8:	e0bffa17 	ldw	r2,-24(fp)
 840f4dc:	e0fff617 	ldw	r3,-40(fp)
 840f4e0:	10fff52e 	bgeu	r2,r3,840f4b8 <alt_up_pixel_buffer_dma_draw_box+0x174>
				{
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + (1 << offset_y);
 840f4e4:	e0fff417 	ldw	r3,-48(fp)
 840f4e8:	00800044 	movi	r2,1
 840f4ec:	10c4983a 	sll	r2,r2,r3
 840f4f0:	e13fff17 	ldw	r4,-4(fp)
 840f4f4:	2089883a 	add	r4,r4,r2
 840f4f8:	e13fff15 	stw	r4,-4(fp)
		addr = addr + (t_y << offset_y);
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
 840f4fc:	e0bff517 	ldw	r2,-44(fp)
 840f500:	10800044 	addi	r2,r2,1
 840f504:	e0bff515 	stw	r2,-44(fp)
 840f508:	e0fff817 	ldw	r3,-32(fp)
 840f50c:	e13ff517 	ldw	r4,-44(fp)
 840f510:	193fe62e 	bgeu	r3,r4,840f4ac <alt_up_pixel_buffer_dma_draw_box+0x168>
 840f514:	0000c406 	br	840f828 <alt_up_pixel_buffer_dma_draw_box+0x4e4>
				{
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
 840f518:	e0bfee17 	ldw	r2,-72(fp)
 840f51c:	10800e17 	ldw	r2,56(r2)
 840f520:	10800098 	cmpnei	r2,r2,2
 840f524:	1000211e 	bne	r2,zero,840f5ac <alt_up_pixel_buffer_dma_draw_box+0x268>
			for (y = t_y; y <= b_y; y++)
 840f528:	e0bff917 	ldw	r2,-28(fp)
 840f52c:	e0bff515 	stw	r2,-44(fp)
 840f530:	00001a06 	br	840f59c <alt_up_pixel_buffer_dma_draw_box+0x258>
			{
				for (x = l_x; x <= r_x; x++)
 840f534:	e0fffb17 	ldw	r3,-20(fp)
 840f538:	e0fff615 	stw	r3,-40(fp)
 840f53c:	00000b06 	br	840f56c <alt_up_pixel_buffer_dma_draw_box+0x228>
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
 840f540:	e13ff617 	ldw	r4,-40(fp)
 840f544:	e13ff617 	ldw	r4,-40(fp)
 840f548:	2105883a 	add	r2,r4,r4
 840f54c:	1007883a 	mov	r3,r2
 840f550:	e0bfff17 	ldw	r2,-4(fp)
 840f554:	1885883a 	add	r2,r3,r2
 840f558:	e0fff717 	ldw	r3,-36(fp)
 840f55c:	10c0002d 	sthio	r3,0(r2)
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
 840f560:	e0bff617 	ldw	r2,-40(fp)
 840f564:	10800044 	addi	r2,r2,1
 840f568:	e0bff615 	stw	r2,-40(fp)
 840f56c:	e0fffa17 	ldw	r3,-24(fp)
 840f570:	e13ff617 	ldw	r4,-40(fp)
 840f574:	193ff22e 	bgeu	r3,r4,840f540 <alt_up_pixel_buffer_dma_draw_box+0x1fc>
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
				}
				addr = addr + (1 << offset_y);
 840f578:	e0fff417 	ldw	r3,-48(fp)
 840f57c:	00800044 	movi	r2,1
 840f580:	10c4983a 	sll	r2,r2,r3
 840f584:	e0ffff17 	ldw	r3,-4(fp)
 840f588:	1887883a 	add	r3,r3,r2
 840f58c:	e0ffff15 	stw	r3,-4(fp)
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
 840f590:	e13ff517 	ldw	r4,-44(fp)
 840f594:	21000044 	addi	r4,r4,1
 840f598:	e13ff515 	stw	r4,-44(fp)
 840f59c:	e0bff817 	ldw	r2,-32(fp)
 840f5a0:	e0fff517 	ldw	r3,-44(fp)
 840f5a4:	10ffe32e 	bgeu	r2,r3,840f534 <alt_up_pixel_buffer_dma_draw_box+0x1f0>
 840f5a8:	00009f06 	br	840f828 <alt_up_pixel_buffer_dma_draw_box+0x4e4>
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
 840f5ac:	e13ff917 	ldw	r4,-28(fp)
 840f5b0:	e13ff515 	stw	r4,-44(fp)
 840f5b4:	00001b06 	br	840f624 <alt_up_pixel_buffer_dma_draw_box+0x2e0>
			{
				for (x = l_x; x <= r_x; x++)
 840f5b8:	e0bffb17 	ldw	r2,-20(fp)
 840f5bc:	e0bff615 	stw	r2,-40(fp)
 840f5c0:	00000c06 	br	840f5f4 <alt_up_pixel_buffer_dma_draw_box+0x2b0>
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
 840f5c4:	e0fff617 	ldw	r3,-40(fp)
 840f5c8:	e0fff617 	ldw	r3,-40(fp)
 840f5cc:	18c5883a 	add	r2,r3,r3
 840f5d0:	1085883a 	add	r2,r2,r2
 840f5d4:	1007883a 	mov	r3,r2
 840f5d8:	e0bfff17 	ldw	r2,-4(fp)
 840f5dc:	1885883a 	add	r2,r3,r2
 840f5e0:	e0fff717 	ldw	r3,-36(fp)
 840f5e4:	10c00035 	stwio	r3,0(r2)
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
 840f5e8:	e13ff617 	ldw	r4,-40(fp)
 840f5ec:	21000044 	addi	r4,r4,1
 840f5f0:	e13ff615 	stw	r4,-40(fp)
 840f5f4:	e0bffa17 	ldw	r2,-24(fp)
 840f5f8:	e0fff617 	ldw	r3,-40(fp)
 840f5fc:	10fff12e 	bgeu	r2,r3,840f5c4 <alt_up_pixel_buffer_dma_draw_box+0x280>
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
				}
				addr = addr + (1 << offset_y);
 840f600:	e0fff417 	ldw	r3,-48(fp)
 840f604:	00800044 	movi	r2,1
 840f608:	10c4983a 	sll	r2,r2,r3
 840f60c:	e13fff17 	ldw	r4,-4(fp)
 840f610:	2089883a 	add	r4,r4,r2
 840f614:	e13fff15 	stw	r4,-4(fp)
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
 840f618:	e0bff517 	ldw	r2,-44(fp)
 840f61c:	10800044 	addi	r2,r2,1
 840f620:	e0bff515 	stw	r2,-44(fp)
 840f624:	e0fff817 	ldw	r3,-32(fp)
 840f628:	e13ff517 	ldw	r4,-44(fp)
 840f62c:	193fe22e 	bgeu	r3,r4,840f5b8 <alt_up_pixel_buffer_dma_draw_box+0x274>
 840f630:	00007d06 	br	840f828 <alt_up_pixel_buffer_dma_draw_box+0x4e4>
	} else {
		/* Draw a box of a given color on the screen using the linear addressing mode. */
		register unsigned int x,y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
 840f634:	e0bfee17 	ldw	r2,-72(fp)
 840f638:	10800e17 	ldw	r2,56(r2)
 840f63c:	10800058 	cmpnei	r2,r2,1
 840f640:	1000221e 	bne	r2,zero,840f6cc <alt_up_pixel_buffer_dma_draw_box+0x388>
			addr = addr + t_y * limit_x;
 840f644:	e0fff917 	ldw	r3,-28(fp)
 840f648:	e13ffe17 	ldw	r4,-8(fp)
 840f64c:	1905383a 	mul	r2,r3,r4
 840f650:	e0ffff17 	ldw	r3,-4(fp)
 840f654:	1887883a 	add	r3,r3,r2
 840f658:	e0ffff15 	stw	r3,-4(fp)
			for (y = t_y; y <= b_y; y++)
 840f65c:	e13ff917 	ldw	r4,-28(fp)
 840f660:	e13ff215 	stw	r4,-56(fp)
 840f664:	00001506 	br	840f6bc <alt_up_pixel_buffer_dma_draw_box+0x378>
			{
				for (x = l_x; x <= r_x; x++)
 840f668:	e0bffb17 	ldw	r2,-20(fp)
 840f66c:	e0bff315 	stw	r2,-52(fp)
 840f670:	00000806 	br	840f694 <alt_up_pixel_buffer_dma_draw_box+0x350>
				{
					IOWR_8DIRECT(addr, x, local_color);
 840f674:	e0ffff17 	ldw	r3,-4(fp)
 840f678:	e0bff317 	ldw	r2,-52(fp)
 840f67c:	1885883a 	add	r2,r3,r2
 840f680:	e0fff717 	ldw	r3,-36(fp)
 840f684:	10c00025 	stbio	r3,0(r2)
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
 840f688:	e0fff317 	ldw	r3,-52(fp)
 840f68c:	18c00044 	addi	r3,r3,1
 840f690:	e0fff315 	stw	r3,-52(fp)
 840f694:	e13ffa17 	ldw	r4,-24(fp)
 840f698:	e0bff317 	ldw	r2,-52(fp)
 840f69c:	20bff52e 	bgeu	r4,r2,840f674 <alt_up_pixel_buffer_dma_draw_box+0x330>
				{
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + limit_x;
 840f6a0:	e0ffff17 	ldw	r3,-4(fp)
 840f6a4:	e13ffe17 	ldw	r4,-8(fp)
 840f6a8:	1907883a 	add	r3,r3,r4
 840f6ac:	e0ffff15 	stw	r3,-4(fp)
		register unsigned int x,y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
 840f6b0:	e0bff217 	ldw	r2,-56(fp)
 840f6b4:	10800044 	addi	r2,r2,1
 840f6b8:	e0bff215 	stw	r2,-56(fp)
 840f6bc:	e0fff817 	ldw	r3,-32(fp)
 840f6c0:	e13ff217 	ldw	r4,-56(fp)
 840f6c4:	193fe82e 	bgeu	r3,r4,840f668 <alt_up_pixel_buffer_dma_draw_box+0x324>
 840f6c8:	00005706 	br	840f828 <alt_up_pixel_buffer_dma_draw_box+0x4e4>
				{
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
 840f6cc:	e0bfee17 	ldw	r2,-72(fp)
 840f6d0:	10800e17 	ldw	r2,56(r2)
 840f6d4:	10800098 	cmpnei	r2,r2,2
 840f6d8:	1000291e 	bne	r2,zero,840f780 <alt_up_pixel_buffer_dma_draw_box+0x43c>
			limit_x = limit_x << 1;
 840f6dc:	e0fffe17 	ldw	r3,-8(fp)
 840f6e0:	e0fffe17 	ldw	r3,-8(fp)
 840f6e4:	18c5883a 	add	r2,r3,r3
 840f6e8:	e0bffe15 	stw	r2,-8(fp)
			addr = addr + t_y * limit_x;
 840f6ec:	e13ff917 	ldw	r4,-28(fp)
 840f6f0:	e0fffe17 	ldw	r3,-8(fp)
 840f6f4:	20c5383a 	mul	r2,r4,r3
 840f6f8:	e13fff17 	ldw	r4,-4(fp)
 840f6fc:	2089883a 	add	r4,r4,r2
 840f700:	e13fff15 	stw	r4,-4(fp)
			for (y = t_y; y <= b_y; y++)
 840f704:	e0bff917 	ldw	r2,-28(fp)
 840f708:	e0bff215 	stw	r2,-56(fp)
 840f70c:	00001806 	br	840f770 <alt_up_pixel_buffer_dma_draw_box+0x42c>
			{
				for (x = l_x; x <= r_x; x++)
 840f710:	e0fffb17 	ldw	r3,-20(fp)
 840f714:	e0fff315 	stw	r3,-52(fp)
 840f718:	00000b06 	br	840f748 <alt_up_pixel_buffer_dma_draw_box+0x404>
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
 840f71c:	e13ff317 	ldw	r4,-52(fp)
 840f720:	e13ff317 	ldw	r4,-52(fp)
 840f724:	2105883a 	add	r2,r4,r4
 840f728:	1007883a 	mov	r3,r2
 840f72c:	e0bfff17 	ldw	r2,-4(fp)
 840f730:	1885883a 	add	r2,r3,r2
 840f734:	e0fff717 	ldw	r3,-36(fp)
 840f738:	10c0002d 	sthio	r3,0(r2)
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
 840f73c:	e0bff317 	ldw	r2,-52(fp)
 840f740:	10800044 	addi	r2,r2,1
 840f744:	e0bff315 	stw	r2,-52(fp)
 840f748:	e0fffa17 	ldw	r3,-24(fp)
 840f74c:	e13ff317 	ldw	r4,-52(fp)
 840f750:	193ff22e 	bgeu	r3,r4,840f71c <alt_up_pixel_buffer_dma_draw_box+0x3d8>
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
				}
				addr = addr + limit_x;
 840f754:	e0bfff17 	ldw	r2,-4(fp)
 840f758:	e0fffe17 	ldw	r3,-8(fp)
 840f75c:	10c5883a 	add	r2,r2,r3
 840f760:	e0bfff15 	stw	r2,-4(fp)
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
 840f764:	e13ff217 	ldw	r4,-56(fp)
 840f768:	21000044 	addi	r4,r4,1
 840f76c:	e13ff215 	stw	r4,-56(fp)
 840f770:	e0bff817 	ldw	r2,-32(fp)
 840f774:	e0fff217 	ldw	r3,-56(fp)
 840f778:	10ffe52e 	bgeu	r2,r3,840f710 <alt_up_pixel_buffer_dma_draw_box+0x3cc>
 840f77c:	00002a06 	br	840f828 <alt_up_pixel_buffer_dma_draw_box+0x4e4>
				addr = addr + limit_x;
			}
		}
		else
		{
			limit_x = limit_x << 2;
 840f780:	e13ffe17 	ldw	r4,-8(fp)
 840f784:	e13ffe17 	ldw	r4,-8(fp)
 840f788:	2105883a 	add	r2,r4,r4
 840f78c:	1085883a 	add	r2,r2,r2
 840f790:	e0bffe15 	stw	r2,-8(fp)
			addr = addr + t_y * limit_x;
 840f794:	e0fff917 	ldw	r3,-28(fp)
 840f798:	e13ffe17 	ldw	r4,-8(fp)
 840f79c:	1905383a 	mul	r2,r3,r4
 840f7a0:	e0ffff17 	ldw	r3,-4(fp)
 840f7a4:	1887883a 	add	r3,r3,r2
 840f7a8:	e0ffff15 	stw	r3,-4(fp)
			for (y = t_y; y <= b_y; y++)
 840f7ac:	e13ff917 	ldw	r4,-28(fp)
 840f7b0:	e13ff215 	stw	r4,-56(fp)
 840f7b4:	00001906 	br	840f81c <alt_up_pixel_buffer_dma_draw_box+0x4d8>
			{
				for (x = l_x; x <= r_x; x++)
 840f7b8:	e0bffb17 	ldw	r2,-20(fp)
 840f7bc:	e0bff315 	stw	r2,-52(fp)
 840f7c0:	00000c06 	br	840f7f4 <alt_up_pixel_buffer_dma_draw_box+0x4b0>
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
 840f7c4:	e0fff317 	ldw	r3,-52(fp)
 840f7c8:	e0fff317 	ldw	r3,-52(fp)
 840f7cc:	18c5883a 	add	r2,r3,r3
 840f7d0:	1085883a 	add	r2,r2,r2
 840f7d4:	1007883a 	mov	r3,r2
 840f7d8:	e0bfff17 	ldw	r2,-4(fp)
 840f7dc:	1885883a 	add	r2,r3,r2
 840f7e0:	e0fff717 	ldw	r3,-36(fp)
 840f7e4:	10c00035 	stwio	r3,0(r2)
		{
			limit_x = limit_x << 2;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
 840f7e8:	e13ff317 	ldw	r4,-52(fp)
 840f7ec:	21000044 	addi	r4,r4,1
 840f7f0:	e13ff315 	stw	r4,-52(fp)
 840f7f4:	e0bffa17 	ldw	r2,-24(fp)
 840f7f8:	e0fff317 	ldw	r3,-52(fp)
 840f7fc:	10fff12e 	bgeu	r2,r3,840f7c4 <alt_up_pixel_buffer_dma_draw_box+0x480>
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
				}
				addr = addr + limit_x;
 840f800:	e13fff17 	ldw	r4,-4(fp)
 840f804:	e0bffe17 	ldw	r2,-8(fp)
 840f808:	2089883a 	add	r4,r4,r2
 840f80c:	e13fff15 	stw	r4,-4(fp)
		}
		else
		{
			limit_x = limit_x << 2;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
 840f810:	e0fff217 	ldw	r3,-56(fp)
 840f814:	18c00044 	addi	r3,r3,1
 840f818:	e0fff215 	stw	r3,-56(fp)
 840f81c:	e13ff817 	ldw	r4,-32(fp)
 840f820:	e0bff217 	ldw	r2,-56(fp)
 840f824:	20bfe42e 	bgeu	r4,r2,840f7b8 <alt_up_pixel_buffer_dma_draw_box+0x474>
				}
				addr = addr + limit_x;
			}
		}
	}
}
 840f828:	e037883a 	mov	sp,fp
 840f82c:	df000017 	ldw	fp,0(sp)
 840f830:	dec00104 	addi	sp,sp,4
 840f834:	f800283a 	ret

0840f838 <alt_up_pixel_buffer_dma_draw_hline>:

void alt_up_pixel_buffer_dma_draw_hline(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int x1, int y, int color, int backbuffer)
/* This method draws a horizontal line. This method is faster than using the line method because we know the direction of the line. */
{
 840f838:	defff204 	addi	sp,sp,-56
 840f83c:	df000d15 	stw	fp,52(sp)
 840f840:	df000d04 	addi	fp,sp,52
 840f844:	e13ff315 	stw	r4,-52(fp)
 840f848:	e17ff415 	stw	r5,-48(fp)
 840f84c:	e1bff515 	stw	r6,-44(fp)
 840f850:	e1fff615 	stw	r7,-40(fp)
	register unsigned int addr;
	register unsigned int limit_x = pixel_buffer->x_resolution;
 840f854:	e0bff317 	ldw	r2,-52(fp)
 840f858:	10800f17 	ldw	r2,60(r2)
 840f85c:	e0bffe15 	stw	r2,-8(fp)
	register unsigned int limit_y = pixel_buffer->y_resolution;
 840f860:	e0bff317 	ldw	r2,-52(fp)
 840f864:	10801017 	ldw	r2,64(r2)
 840f868:	e0bffd15 	stw	r2,-12(fp)
	register unsigned int temp;
	register unsigned int l_x = x0;
 840f86c:	e0bff417 	ldw	r2,-48(fp)
 840f870:	e0bffc15 	stw	r2,-16(fp)
	register unsigned int r_x = x1;
 840f874:	e0fff517 	ldw	r3,-44(fp)
 840f878:	e0fffb15 	stw	r3,-20(fp)
	register unsigned int line_y = y;
 840f87c:	e13ff617 	ldw	r4,-40(fp)
 840f880:	e13ffa15 	stw	r4,-24(fp)
	register unsigned int local_color = color;
 840f884:	e0800117 	ldw	r2,4(fp)
 840f888:	e0bff915 	stw	r2,-28(fp)
	
	/* Check coordinates */
	if (l_x > r_x)
 840f88c:	e0fffb17 	ldw	r3,-20(fp)
 840f890:	e13ffc17 	ldw	r4,-16(fp)
 840f894:	1900042e 	bgeu	r3,r4,840f8a8 <alt_up_pixel_buffer_dma_draw_hline+0x70>
	{
		temp = l_x;
 840f898:	e0bffc17 	ldw	r2,-16(fp)
		l_x = r_x;
 840f89c:	e0fffb17 	ldw	r3,-20(fp)
 840f8a0:	e0fffc15 	stw	r3,-16(fp)
		r_x = temp;
 840f8a4:	e0bffb15 	stw	r2,-20(fp)
	}
	if ((l_x >= limit_x) || (line_y >= limit_y) || (r_x < 0) || (line_y < 0))
 840f8a8:	e13ffc17 	ldw	r4,-16(fp)
 840f8ac:	e0bffe17 	ldw	r2,-8(fp)
 840f8b0:	2080b12e 	bgeu	r4,r2,840fb78 <alt_up_pixel_buffer_dma_draw_hline+0x340>
 840f8b4:	e0fffa17 	ldw	r3,-24(fp)
 840f8b8:	e13ffd17 	ldw	r4,-12(fp)
 840f8bc:	19000136 	bltu	r3,r4,840f8c4 <alt_up_pixel_buffer_dma_draw_hline+0x8c>
	{
		/* Drawing outside of the window, so don't bother. */
		return;
 840f8c0:	0000ad06 	br	840fb78 <alt_up_pixel_buffer_dma_draw_hline+0x340>
	/* Clip the box and draw only within the confines of the screen. */
	if (l_x < 0)
	{
		l_x = 0;
	}
	if (r_x >= limit_x)
 840f8c4:	e0bffb17 	ldw	r2,-20(fp)
 840f8c8:	e0fffe17 	ldw	r3,-8(fp)
 840f8cc:	10c00336 	bltu	r2,r3,840f8dc <alt_up_pixel_buffer_dma_draw_hline+0xa4>
	{
		r_x = limit_x - 1;
 840f8d0:	e13ffe17 	ldw	r4,-8(fp)
 840f8d4:	213fffc4 	addi	r4,r4,-1
 840f8d8:	e13ffb15 	stw	r4,-20(fp)
	}

	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
 840f8dc:	e0800217 	ldw	r2,8(fp)
 840f8e0:	10800058 	cmpnei	r2,r2,1
 840f8e4:	1000041e 	bne	r2,zero,840f8f8 <alt_up_pixel_buffer_dma_draw_hline+0xc0>
		addr = pixel_buffer->back_buffer_start_address;
 840f8e8:	e0bff317 	ldw	r2,-52(fp)
 840f8ec:	10800c17 	ldw	r2,48(r2)
 840f8f0:	e0bfff15 	stw	r2,-4(fp)
 840f8f4:	00000306 	br	840f904 <alt_up_pixel_buffer_dma_draw_hline+0xcc>
	else
		addr = pixel_buffer->buffer_start_address;
 840f8f8:	e0bff317 	ldw	r2,-52(fp)
 840f8fc:	10800b17 	ldw	r2,44(r2)
 840f900:	e0bfff15 	stw	r2,-4(fp)

	/* Draw a horizontal line using one of the addressing modes. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
 840f904:	e0bff317 	ldw	r2,-52(fp)
 840f908:	10800d17 	ldw	r2,52(r2)
 840f90c:	1004c03a 	cmpne	r2,r2,zero
 840f910:	1000431e 	bne	r2,zero,840fa20 <alt_up_pixel_buffer_dma_draw_hline+0x1e8>
		/* Draw a horizontal line of a given color on the screen using the XY addressing mode. */
		register unsigned int x;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
 840f914:	e0bff317 	ldw	r2,-52(fp)
 840f918:	10801317 	ldw	r2,76(r2)
		addr = addr + (line_y << offset_y);
 840f91c:	e0fffa17 	ldw	r3,-24(fp)
 840f920:	1884983a 	sll	r2,r3,r2
 840f924:	e13fff17 	ldw	r4,-4(fp)
 840f928:	2089883a 	add	r4,r4,r2
 840f92c:	e13fff15 	stw	r4,-4(fp)
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a horizontal line. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
 840f930:	e0bff317 	ldw	r2,-52(fp)
 840f934:	10800e17 	ldw	r2,56(r2)
 840f938:	10800058 	cmpnei	r2,r2,1
 840f93c:	10000f1e 	bne	r2,zero,840f97c <alt_up_pixel_buffer_dma_draw_hline+0x144>
			for (x = l_x; x <= r_x; x++)
 840f940:	e0bffc17 	ldw	r2,-16(fp)
 840f944:	e0bff815 	stw	r2,-32(fp)
 840f948:	00000806 	br	840f96c <alt_up_pixel_buffer_dma_draw_hline+0x134>
			{
				IOWR_8DIRECT(addr, x, local_color);
 840f94c:	e0ffff17 	ldw	r3,-4(fp)
 840f950:	e0bff817 	ldw	r2,-32(fp)
 840f954:	1885883a 	add	r2,r3,r2
 840f958:	e0fff917 	ldw	r3,-28(fp)
 840f95c:	10c00025 	stbio	r3,0(r2)
		addr = addr + (line_y << offset_y);
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a horizontal line. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (x = l_x; x <= r_x; x++)
 840f960:	e0fff817 	ldw	r3,-32(fp)
 840f964:	18c00044 	addi	r3,r3,1
 840f968:	e0fff815 	stw	r3,-32(fp)
 840f96c:	e13ffb17 	ldw	r4,-20(fp)
 840f970:	e0bff817 	ldw	r2,-32(fp)
 840f974:	20bff52e 	bgeu	r4,r2,840f94c <alt_up_pixel_buffer_dma_draw_hline+0x114>
 840f978:	00007f06 	br	840fb78 <alt_up_pixel_buffer_dma_draw_hline+0x340>
			{
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
 840f97c:	e0bff317 	ldw	r2,-52(fp)
 840f980:	10800e17 	ldw	r2,56(r2)
 840f984:	10800098 	cmpnei	r2,r2,2
 840f988:	1000121e 	bne	r2,zero,840f9d4 <alt_up_pixel_buffer_dma_draw_hline+0x19c>
			for (x = l_x; x <= r_x; x++)
 840f98c:	e0fffc17 	ldw	r3,-16(fp)
 840f990:	e0fff815 	stw	r3,-32(fp)
 840f994:	00000b06 	br	840f9c4 <alt_up_pixel_buffer_dma_draw_hline+0x18c>
			{
				IOWR_16DIRECT(addr, x << 1, local_color);
 840f998:	e13ff817 	ldw	r4,-32(fp)
 840f99c:	e13ff817 	ldw	r4,-32(fp)
 840f9a0:	2105883a 	add	r2,r4,r4
 840f9a4:	1007883a 	mov	r3,r2
 840f9a8:	e0bfff17 	ldw	r2,-4(fp)
 840f9ac:	1885883a 	add	r2,r3,r2
 840f9b0:	e0fff917 	ldw	r3,-28(fp)
 840f9b4:	10c0002d 	sthio	r3,0(r2)
			for (x = l_x; x <= r_x; x++)
			{
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (x = l_x; x <= r_x; x++)
 840f9b8:	e0bff817 	ldw	r2,-32(fp)
 840f9bc:	10800044 	addi	r2,r2,1
 840f9c0:	e0bff815 	stw	r2,-32(fp)
 840f9c4:	e0fffb17 	ldw	r3,-20(fp)
 840f9c8:	e13ff817 	ldw	r4,-32(fp)
 840f9cc:	193ff22e 	bgeu	r3,r4,840f998 <alt_up_pixel_buffer_dma_draw_hline+0x160>
 840f9d0:	00006906 	br	840fb78 <alt_up_pixel_buffer_dma_draw_hline+0x340>
				IOWR_16DIRECT(addr, x << 1, local_color);
			}
		}
		else
		{
			for (x = l_x; x <= r_x; x++)
 840f9d4:	e0bffc17 	ldw	r2,-16(fp)
 840f9d8:	e0bff815 	stw	r2,-32(fp)
 840f9dc:	00000c06 	br	840fa10 <alt_up_pixel_buffer_dma_draw_hline+0x1d8>
			{
				IOWR_32DIRECT(addr, x << 2, local_color);
 840f9e0:	e0fff817 	ldw	r3,-32(fp)
 840f9e4:	e0fff817 	ldw	r3,-32(fp)
 840f9e8:	18c5883a 	add	r2,r3,r3
 840f9ec:	1085883a 	add	r2,r2,r2
 840f9f0:	1007883a 	mov	r3,r2
 840f9f4:	e0bfff17 	ldw	r2,-4(fp)
 840f9f8:	1885883a 	add	r2,r3,r2
 840f9fc:	e0fff917 	ldw	r3,-28(fp)
 840fa00:	10c00035 	stwio	r3,0(r2)
				IOWR_16DIRECT(addr, x << 1, local_color);
			}
		}
		else
		{
			for (x = l_x; x <= r_x; x++)
 840fa04:	e13ff817 	ldw	r4,-32(fp)
 840fa08:	21000044 	addi	r4,r4,1
 840fa0c:	e13ff815 	stw	r4,-32(fp)
 840fa10:	e0bffb17 	ldw	r2,-20(fp)
 840fa14:	e0fff817 	ldw	r3,-32(fp)
 840fa18:	10fff12e 	bgeu	r2,r3,840f9e0 <alt_up_pixel_buffer_dma_draw_hline+0x1a8>
 840fa1c:	00005606 	br	840fb78 <alt_up_pixel_buffer_dma_draw_hline+0x340>
	} else {
		/* Draw a horizontal line of a given color on the screen using the linear addressing mode. */
		register unsigned int x;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
 840fa20:	e0bff317 	ldw	r2,-52(fp)
 840fa24:	10800e17 	ldw	r2,56(r2)
 840fa28:	10800058 	cmpnei	r2,r2,1
 840fa2c:	1000151e 	bne	r2,zero,840fa84 <alt_up_pixel_buffer_dma_draw_hline+0x24c>
			addr = addr + line_y * limit_x;
 840fa30:	e13ffa17 	ldw	r4,-24(fp)
 840fa34:	e0fffe17 	ldw	r3,-8(fp)
 840fa38:	20c5383a 	mul	r2,r4,r3
 840fa3c:	e13fff17 	ldw	r4,-4(fp)
 840fa40:	2089883a 	add	r4,r4,r2
 840fa44:	e13fff15 	stw	r4,-4(fp)
			for (x = l_x; x <= r_x; x++)
 840fa48:	e0bffc17 	ldw	r2,-16(fp)
 840fa4c:	e0bff715 	stw	r2,-36(fp)
 840fa50:	00000806 	br	840fa74 <alt_up_pixel_buffer_dma_draw_hline+0x23c>
			{
				IOWR_8DIRECT(addr, x, local_color);
 840fa54:	e0ffff17 	ldw	r3,-4(fp)
 840fa58:	e0bff717 	ldw	r2,-36(fp)
 840fa5c:	1885883a 	add	r2,r3,r2
 840fa60:	e0fff917 	ldw	r3,-28(fp)
 840fa64:	10c00025 	stbio	r3,0(r2)
		register unsigned int x;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + line_y * limit_x;
			for (x = l_x; x <= r_x; x++)
 840fa68:	e0fff717 	ldw	r3,-36(fp)
 840fa6c:	18c00044 	addi	r3,r3,1
 840fa70:	e0fff715 	stw	r3,-36(fp)
 840fa74:	e13ffb17 	ldw	r4,-20(fp)
 840fa78:	e0bff717 	ldw	r2,-36(fp)
 840fa7c:	20bff52e 	bgeu	r4,r2,840fa54 <alt_up_pixel_buffer_dma_draw_hline+0x21c>
 840fa80:	00003d06 	br	840fb78 <alt_up_pixel_buffer_dma_draw_hline+0x340>
			{
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
 840fa84:	e0bff317 	ldw	r2,-52(fp)
 840fa88:	10800e17 	ldw	r2,56(r2)
 840fa8c:	10800098 	cmpnei	r2,r2,2
 840fa90:	10001c1e 	bne	r2,zero,840fb04 <alt_up_pixel_buffer_dma_draw_hline+0x2cc>
			limit_x = limit_x << 1;
 840fa94:	e0fffe17 	ldw	r3,-8(fp)
 840fa98:	e0fffe17 	ldw	r3,-8(fp)
 840fa9c:	18c5883a 	add	r2,r3,r3
 840faa0:	e0bffe15 	stw	r2,-8(fp)
			addr = addr + line_y * limit_x;
 840faa4:	e13ffa17 	ldw	r4,-24(fp)
 840faa8:	e0fffe17 	ldw	r3,-8(fp)
 840faac:	20c5383a 	mul	r2,r4,r3
 840fab0:	e13fff17 	ldw	r4,-4(fp)
 840fab4:	2089883a 	add	r4,r4,r2
 840fab8:	e13fff15 	stw	r4,-4(fp)
			for (x = l_x; x <= r_x; x++)
 840fabc:	e0bffc17 	ldw	r2,-16(fp)
 840fac0:	e0bff715 	stw	r2,-36(fp)
 840fac4:	00000b06 	br	840faf4 <alt_up_pixel_buffer_dma_draw_hline+0x2bc>
			{
				IOWR_16DIRECT(addr, x << 1, local_color);
 840fac8:	e0fff717 	ldw	r3,-36(fp)
 840facc:	e0fff717 	ldw	r3,-36(fp)
 840fad0:	18c5883a 	add	r2,r3,r3
 840fad4:	1007883a 	mov	r3,r2
 840fad8:	e0bfff17 	ldw	r2,-4(fp)
 840fadc:	1885883a 	add	r2,r3,r2
 840fae0:	e0fff917 	ldw	r3,-28(fp)
 840fae4:	10c0002d 	sthio	r3,0(r2)
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + line_y * limit_x;
			for (x = l_x; x <= r_x; x++)
 840fae8:	e13ff717 	ldw	r4,-36(fp)
 840faec:	21000044 	addi	r4,r4,1
 840faf0:	e13ff715 	stw	r4,-36(fp)
 840faf4:	e0bffb17 	ldw	r2,-20(fp)
 840faf8:	e0fff717 	ldw	r3,-36(fp)
 840fafc:	10fff22e 	bgeu	r2,r3,840fac8 <alt_up_pixel_buffer_dma_draw_hline+0x290>
 840fb00:	00001d06 	br	840fb78 <alt_up_pixel_buffer_dma_draw_hline+0x340>
				IOWR_16DIRECT(addr, x << 1, local_color);
			}
		}
		else
		{
			limit_x = limit_x << 2;
 840fb04:	e13ffe17 	ldw	r4,-8(fp)
 840fb08:	e13ffe17 	ldw	r4,-8(fp)
 840fb0c:	2105883a 	add	r2,r4,r4
 840fb10:	1085883a 	add	r2,r2,r2
 840fb14:	e0bffe15 	stw	r2,-8(fp)
			addr = addr + line_y * limit_x;
 840fb18:	e0fffa17 	ldw	r3,-24(fp)
 840fb1c:	e13ffe17 	ldw	r4,-8(fp)
 840fb20:	1905383a 	mul	r2,r3,r4
 840fb24:	e0ffff17 	ldw	r3,-4(fp)
 840fb28:	1887883a 	add	r3,r3,r2
 840fb2c:	e0ffff15 	stw	r3,-4(fp)
			for (x = l_x; x <= r_x; x++)
 840fb30:	e13ffc17 	ldw	r4,-16(fp)
 840fb34:	e13ff715 	stw	r4,-36(fp)
 840fb38:	00000c06 	br	840fb6c <alt_up_pixel_buffer_dma_draw_hline+0x334>
			{
				IOWR_32DIRECT(addr, x << 2, local_color);
 840fb3c:	e0fff717 	ldw	r3,-36(fp)
 840fb40:	e0fff717 	ldw	r3,-36(fp)
 840fb44:	18c5883a 	add	r2,r3,r3
 840fb48:	1085883a 	add	r2,r2,r2
 840fb4c:	1007883a 	mov	r3,r2
 840fb50:	e0bfff17 	ldw	r2,-4(fp)
 840fb54:	1885883a 	add	r2,r3,r2
 840fb58:	e0fff917 	ldw	r3,-28(fp)
 840fb5c:	10c00035 	stwio	r3,0(r2)
		}
		else
		{
			limit_x = limit_x << 2;
			addr = addr + line_y * limit_x;
			for (x = l_x; x <= r_x; x++)
 840fb60:	e13ff717 	ldw	r4,-36(fp)
 840fb64:	21000044 	addi	r4,r4,1
 840fb68:	e13ff715 	stw	r4,-36(fp)
 840fb6c:	e0bffb17 	ldw	r2,-20(fp)
 840fb70:	e0fff717 	ldw	r3,-36(fp)
 840fb74:	10fff12e 	bgeu	r2,r3,840fb3c <alt_up_pixel_buffer_dma_draw_hline+0x304>
				IOWR_32DIRECT(addr, x << 2, local_color);
			}
			addr = addr + limit_x;
		}
	}
}
 840fb78:	e037883a 	mov	sp,fp
 840fb7c:	df000017 	ldw	fp,0(sp)
 840fb80:	dec00104 	addi	sp,sp,4
 840fb84:	f800283a 	ret

0840fb88 <alt_up_pixel_buffer_dma_draw_vline>:


void alt_up_pixel_buffer_dma_draw_vline(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x, int y0, int y1, int color, int backbuffer)
/* This method draws a vertical line. This method is faster than using the line method because we know the direction of the line. */

{
 840fb88:	defff104 	addi	sp,sp,-60
 840fb8c:	df000e15 	stw	fp,56(sp)
 840fb90:	df000e04 	addi	fp,sp,56
 840fb94:	e13ff215 	stw	r4,-56(fp)
 840fb98:	e17ff315 	stw	r5,-52(fp)
 840fb9c:	e1bff415 	stw	r6,-48(fp)
 840fba0:	e1fff515 	stw	r7,-44(fp)
	register unsigned int addr;
	register unsigned int limit_x = pixel_buffer->x_resolution;
 840fba4:	e0bff217 	ldw	r2,-56(fp)
 840fba8:	10800f17 	ldw	r2,60(r2)
 840fbac:	e0bffe15 	stw	r2,-8(fp)
	register unsigned int limit_y = pixel_buffer->y_resolution;
 840fbb0:	e0bff217 	ldw	r2,-56(fp)
 840fbb4:	10801017 	ldw	r2,64(r2)
 840fbb8:	e0bffd15 	stw	r2,-12(fp)
	register unsigned int temp;
	register unsigned int line_x = x;
 840fbbc:	e0bff317 	ldw	r2,-52(fp)
 840fbc0:	e0bffc15 	stw	r2,-16(fp)
	register unsigned int t_y = y0;
 840fbc4:	e0fff417 	ldw	r3,-48(fp)
 840fbc8:	e0fffb15 	stw	r3,-20(fp)
	register unsigned int b_y = y1;
 840fbcc:	e13ff517 	ldw	r4,-44(fp)
 840fbd0:	e13ffa15 	stw	r4,-24(fp)
	register unsigned int local_color = color;
 840fbd4:	e0800117 	ldw	r2,4(fp)
 840fbd8:	e0bff915 	stw	r2,-28(fp)
	
	/* Check coordinates */
	if (t_y > b_y)
 840fbdc:	e0fffa17 	ldw	r3,-24(fp)
 840fbe0:	e13ffb17 	ldw	r4,-20(fp)
 840fbe4:	1900042e 	bgeu	r3,r4,840fbf8 <alt_up_pixel_buffer_dma_draw_vline+0x70>
	{
		temp = t_y;
 840fbe8:	e0bffb17 	ldw	r2,-20(fp)
		t_y = b_y;
 840fbec:	e0fffa17 	ldw	r3,-24(fp)
 840fbf0:	e0fffb15 	stw	r3,-20(fp)
		b_y = temp;
 840fbf4:	e0bffa15 	stw	r2,-24(fp)
	}
	if ((line_x >= limit_x) || (t_y >= limit_y) || (line_x < 0) || (b_y < 0))
 840fbf8:	e13ffc17 	ldw	r4,-16(fp)
 840fbfc:	e0bffe17 	ldw	r2,-8(fp)
 840fc00:	2080d12e 	bgeu	r4,r2,840ff48 <alt_up_pixel_buffer_dma_draw_vline+0x3c0>
 840fc04:	e0fffb17 	ldw	r3,-20(fp)
 840fc08:	e13ffd17 	ldw	r4,-12(fp)
 840fc0c:	19000136 	bltu	r3,r4,840fc14 <alt_up_pixel_buffer_dma_draw_vline+0x8c>
	{
		/* Drawing outside of the window, so don't bother. */
		return;
 840fc10:	0000cd06 	br	840ff48 <alt_up_pixel_buffer_dma_draw_vline+0x3c0>
	/* Clip the box and draw only within the confines of the screen. */
	if (t_y < 0)
	{
		t_y = 0;
	}
	if (b_y >= limit_y)
 840fc14:	e0bffa17 	ldw	r2,-24(fp)
 840fc18:	e0fffd17 	ldw	r3,-12(fp)
 840fc1c:	10c00336 	bltu	r2,r3,840fc2c <alt_up_pixel_buffer_dma_draw_vline+0xa4>
	{
		b_y = limit_y - 1;
 840fc20:	e13ffd17 	ldw	r4,-12(fp)
 840fc24:	213fffc4 	addi	r4,r4,-1
 840fc28:	e13ffa15 	stw	r4,-24(fp)
	}

	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
 840fc2c:	e0800217 	ldw	r2,8(fp)
 840fc30:	10800058 	cmpnei	r2,r2,1
 840fc34:	1000041e 	bne	r2,zero,840fc48 <alt_up_pixel_buffer_dma_draw_vline+0xc0>
		addr = pixel_buffer->back_buffer_start_address;
 840fc38:	e0bff217 	ldw	r2,-56(fp)
 840fc3c:	10800c17 	ldw	r2,48(r2)
 840fc40:	e0bfff15 	stw	r2,-4(fp)
 840fc44:	00000306 	br	840fc54 <alt_up_pixel_buffer_dma_draw_vline+0xcc>
	else
		addr = pixel_buffer->buffer_start_address;
 840fc48:	e0bff217 	ldw	r2,-56(fp)
 840fc4c:	10800b17 	ldw	r2,44(r2)
 840fc50:	e0bfff15 	stw	r2,-4(fp)

	/* Draw the vertical line using one of the addressing modes. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
 840fc54:	e0bff217 	ldw	r2,-56(fp)
 840fc58:	10800d17 	ldw	r2,52(r2)
 840fc5c:	1004c03a 	cmpne	r2,r2,zero
 840fc60:	1000571e 	bne	r2,zero,840fdc0 <alt_up_pixel_buffer_dma_draw_vline+0x238>
		/* Draw a vertical line of a given color on the screen using the XY addressing mode. */
		register unsigned int y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
 840fc64:	e0bff217 	ldw	r2,-56(fp)
 840fc68:	10801317 	ldw	r2,76(r2)
 840fc6c:	e0bff715 	stw	r2,-36(fp)
		addr = addr + (t_y << offset_y);
 840fc70:	e0bff717 	ldw	r2,-36(fp)
 840fc74:	e0fffb17 	ldw	r3,-20(fp)
 840fc78:	1884983a 	sll	r2,r3,r2
 840fc7c:	e13fff17 	ldw	r4,-4(fp)
 840fc80:	2089883a 	add	r4,r4,r2
 840fc84:	e13fff15 	stw	r4,-4(fp)
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
 840fc88:	e0bff217 	ldw	r2,-56(fp)
 840fc8c:	10800e17 	ldw	r2,56(r2)
 840fc90:	10800058 	cmpnei	r2,r2,1
 840fc94:	1000151e 	bne	r2,zero,840fcec <alt_up_pixel_buffer_dma_draw_vline+0x164>
			for (y = t_y; y <= b_y; y++)
 840fc98:	e0bffb17 	ldw	r2,-20(fp)
 840fc9c:	e0bff815 	stw	r2,-32(fp)
 840fca0:	00000e06 	br	840fcdc <alt_up_pixel_buffer_dma_draw_vline+0x154>
			{
				IOWR_8DIRECT(addr, line_x, local_color);
 840fca4:	e0ffff17 	ldw	r3,-4(fp)
 840fca8:	e0bffc17 	ldw	r2,-16(fp)
 840fcac:	1885883a 	add	r2,r3,r2
 840fcb0:	e0fff917 	ldw	r3,-28(fp)
 840fcb4:	10c00025 	stbio	r3,0(r2)
				addr = addr + (1 << offset_y);
 840fcb8:	e0fff717 	ldw	r3,-36(fp)
 840fcbc:	00800044 	movi	r2,1
 840fcc0:	10c4983a 	sll	r2,r2,r3
 840fcc4:	e0ffff17 	ldw	r3,-4(fp)
 840fcc8:	1887883a 	add	r3,r3,r2
 840fccc:	e0ffff15 	stw	r3,-4(fp)
		addr = addr + (t_y << offset_y);
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
 840fcd0:	e13ff817 	ldw	r4,-32(fp)
 840fcd4:	21000044 	addi	r4,r4,1
 840fcd8:	e13ff815 	stw	r4,-32(fp)
 840fcdc:	e0bffa17 	ldw	r2,-24(fp)
 840fce0:	e0fff817 	ldw	r3,-32(fp)
 840fce4:	10ffef2e 	bgeu	r2,r3,840fca4 <alt_up_pixel_buffer_dma_draw_vline+0x11c>
 840fce8:	00009706 	br	840ff48 <alt_up_pixel_buffer_dma_draw_vline+0x3c0>
			{
				IOWR_8DIRECT(addr, line_x, local_color);
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
 840fcec:	e0bff217 	ldw	r2,-56(fp)
 840fcf0:	10800e17 	ldw	r2,56(r2)
 840fcf4:	10800098 	cmpnei	r2,r2,2
 840fcf8:	1000181e 	bne	r2,zero,840fd5c <alt_up_pixel_buffer_dma_draw_vline+0x1d4>
			for (y = t_y; y <= b_y; y++)
 840fcfc:	e13ffb17 	ldw	r4,-20(fp)
 840fd00:	e13ff815 	stw	r4,-32(fp)
 840fd04:	00001106 	br	840fd4c <alt_up_pixel_buffer_dma_draw_vline+0x1c4>
			{
				IOWR_16DIRECT(addr, line_x << 1, local_color);
 840fd08:	e0fffc17 	ldw	r3,-16(fp)
 840fd0c:	e0fffc17 	ldw	r3,-16(fp)
 840fd10:	18c5883a 	add	r2,r3,r3
 840fd14:	1007883a 	mov	r3,r2
 840fd18:	e0bfff17 	ldw	r2,-4(fp)
 840fd1c:	1885883a 	add	r2,r3,r2
 840fd20:	e0fff917 	ldw	r3,-28(fp)
 840fd24:	10c0002d 	sthio	r3,0(r2)
				addr = addr + (1 << offset_y);
 840fd28:	e0fff717 	ldw	r3,-36(fp)
 840fd2c:	00800044 	movi	r2,1
 840fd30:	10c4983a 	sll	r2,r2,r3
 840fd34:	e13fff17 	ldw	r4,-4(fp)
 840fd38:	2089883a 	add	r4,r4,r2
 840fd3c:	e13fff15 	stw	r4,-4(fp)
			{
				IOWR_8DIRECT(addr, line_x, local_color);
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
 840fd40:	e0bff817 	ldw	r2,-32(fp)
 840fd44:	10800044 	addi	r2,r2,1
 840fd48:	e0bff815 	stw	r2,-32(fp)
 840fd4c:	e0fffa17 	ldw	r3,-24(fp)
 840fd50:	e13ff817 	ldw	r4,-32(fp)
 840fd54:	193fec2e 	bgeu	r3,r4,840fd08 <alt_up_pixel_buffer_dma_draw_vline+0x180>
 840fd58:	00007b06 	br	840ff48 <alt_up_pixel_buffer_dma_draw_vline+0x3c0>
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
 840fd5c:	e0bffb17 	ldw	r2,-20(fp)
 840fd60:	e0bff815 	stw	r2,-32(fp)
 840fd64:	00001206 	br	840fdb0 <alt_up_pixel_buffer_dma_draw_vline+0x228>
			{
				IOWR_32DIRECT(addr, line_x << 2, local_color);
 840fd68:	e0fffc17 	ldw	r3,-16(fp)
 840fd6c:	e0fffc17 	ldw	r3,-16(fp)
 840fd70:	18c5883a 	add	r2,r3,r3
 840fd74:	1085883a 	add	r2,r2,r2
 840fd78:	1007883a 	mov	r3,r2
 840fd7c:	e0bfff17 	ldw	r2,-4(fp)
 840fd80:	1885883a 	add	r2,r3,r2
 840fd84:	e0fff917 	ldw	r3,-28(fp)
 840fd88:	10c00035 	stwio	r3,0(r2)
				addr = addr + (1 << offset_y);
 840fd8c:	e0fff717 	ldw	r3,-36(fp)
 840fd90:	00800044 	movi	r2,1
 840fd94:	10c4983a 	sll	r2,r2,r3
 840fd98:	e13fff17 	ldw	r4,-4(fp)
 840fd9c:	2089883a 	add	r4,r4,r2
 840fda0:	e13fff15 	stw	r4,-4(fp)
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
 840fda4:	e0bff817 	ldw	r2,-32(fp)
 840fda8:	10800044 	addi	r2,r2,1
 840fdac:	e0bff815 	stw	r2,-32(fp)
 840fdb0:	e0fffa17 	ldw	r3,-24(fp)
 840fdb4:	e13ff817 	ldw	r4,-32(fp)
 840fdb8:	193feb2e 	bgeu	r3,r4,840fd68 <alt_up_pixel_buffer_dma_draw_vline+0x1e0>
 840fdbc:	00006206 	br	840ff48 <alt_up_pixel_buffer_dma_draw_vline+0x3c0>
	} else {
		/* Draw a vertical line of a given color on the screen using the linear addressing mode. */
		register unsigned int y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
 840fdc0:	e0bff217 	ldw	r2,-56(fp)
 840fdc4:	10800e17 	ldw	r2,56(r2)
 840fdc8:	10800058 	cmpnei	r2,r2,1
 840fdcc:	1000191e 	bne	r2,zero,840fe34 <alt_up_pixel_buffer_dma_draw_vline+0x2ac>
			addr = addr + t_y * limit_x;
 840fdd0:	e0fffb17 	ldw	r3,-20(fp)
 840fdd4:	e13ffe17 	ldw	r4,-8(fp)
 840fdd8:	1905383a 	mul	r2,r3,r4
 840fddc:	e0ffff17 	ldw	r3,-4(fp)
 840fde0:	1887883a 	add	r3,r3,r2
 840fde4:	e0ffff15 	stw	r3,-4(fp)
			for (y = t_y; y <= b_y; y++)
 840fde8:	e13ffb17 	ldw	r4,-20(fp)
 840fdec:	e13ff615 	stw	r4,-40(fp)
 840fdf0:	00000c06 	br	840fe24 <alt_up_pixel_buffer_dma_draw_vline+0x29c>
			{
				IOWR_8DIRECT(addr, line_x, local_color);
 840fdf4:	e0ffff17 	ldw	r3,-4(fp)
 840fdf8:	e0bffc17 	ldw	r2,-16(fp)
 840fdfc:	1885883a 	add	r2,r3,r2
 840fe00:	e0fff917 	ldw	r3,-28(fp)
 840fe04:	10c00025 	stbio	r3,0(r2)
				addr = addr + limit_x;
 840fe08:	e0bfff17 	ldw	r2,-4(fp)
 840fe0c:	e0fffe17 	ldw	r3,-8(fp)
 840fe10:	10c5883a 	add	r2,r2,r3
 840fe14:	e0bfff15 	stw	r2,-4(fp)
		register unsigned int y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
 840fe18:	e13ff617 	ldw	r4,-40(fp)
 840fe1c:	21000044 	addi	r4,r4,1
 840fe20:	e13ff615 	stw	r4,-40(fp)
 840fe24:	e0bffa17 	ldw	r2,-24(fp)
 840fe28:	e0fff617 	ldw	r3,-40(fp)
 840fe2c:	10fff12e 	bgeu	r2,r3,840fdf4 <alt_up_pixel_buffer_dma_draw_vline+0x26c>
 840fe30:	00004506 	br	840ff48 <alt_up_pixel_buffer_dma_draw_vline+0x3c0>
			{
				IOWR_8DIRECT(addr, line_x, local_color);
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
 840fe34:	e0bff217 	ldw	r2,-56(fp)
 840fe38:	10800e17 	ldw	r2,56(r2)
 840fe3c:	10800098 	cmpnei	r2,r2,2
 840fe40:	1000201e 	bne	r2,zero,840fec4 <alt_up_pixel_buffer_dma_draw_vline+0x33c>
			limit_x = limit_x << 1;
 840fe44:	e13ffe17 	ldw	r4,-8(fp)
 840fe48:	e13ffe17 	ldw	r4,-8(fp)
 840fe4c:	2105883a 	add	r2,r4,r4
 840fe50:	e0bffe15 	stw	r2,-8(fp)
			addr = addr + t_y * limit_x;
 840fe54:	e0fffb17 	ldw	r3,-20(fp)
 840fe58:	e13ffe17 	ldw	r4,-8(fp)
 840fe5c:	1905383a 	mul	r2,r3,r4
 840fe60:	e0ffff17 	ldw	r3,-4(fp)
 840fe64:	1887883a 	add	r3,r3,r2
 840fe68:	e0ffff15 	stw	r3,-4(fp)
			for (y = t_y; y <= b_y; y++)
 840fe6c:	e13ffb17 	ldw	r4,-20(fp)
 840fe70:	e13ff615 	stw	r4,-40(fp)
 840fe74:	00000f06 	br	840feb4 <alt_up_pixel_buffer_dma_draw_vline+0x32c>
			{
				IOWR_16DIRECT(addr, line_x << 1, local_color);
 840fe78:	e0fffc17 	ldw	r3,-16(fp)
 840fe7c:	e0fffc17 	ldw	r3,-16(fp)
 840fe80:	18c5883a 	add	r2,r3,r3
 840fe84:	1007883a 	mov	r3,r2
 840fe88:	e0bfff17 	ldw	r2,-4(fp)
 840fe8c:	1885883a 	add	r2,r3,r2
 840fe90:	e0fff917 	ldw	r3,-28(fp)
 840fe94:	10c0002d 	sthio	r3,0(r2)
				addr = addr + limit_x;
 840fe98:	e13fff17 	ldw	r4,-4(fp)
 840fe9c:	e0bffe17 	ldw	r2,-8(fp)
 840fea0:	2089883a 	add	r4,r4,r2
 840fea4:	e13fff15 	stw	r4,-4(fp)
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
 840fea8:	e0fff617 	ldw	r3,-40(fp)
 840feac:	18c00044 	addi	r3,r3,1
 840feb0:	e0fff615 	stw	r3,-40(fp)
 840feb4:	e13ffa17 	ldw	r4,-24(fp)
 840feb8:	e0bff617 	ldw	r2,-40(fp)
 840febc:	20bfee2e 	bgeu	r4,r2,840fe78 <alt_up_pixel_buffer_dma_draw_vline+0x2f0>
 840fec0:	00002106 	br	840ff48 <alt_up_pixel_buffer_dma_draw_vline+0x3c0>
				addr = addr + limit_x;
			}
		}
		else
		{
			limit_x = limit_x << 2;
 840fec4:	e0fffe17 	ldw	r3,-8(fp)
 840fec8:	e0fffe17 	ldw	r3,-8(fp)
 840fecc:	18c5883a 	add	r2,r3,r3
 840fed0:	1085883a 	add	r2,r2,r2
 840fed4:	e0bffe15 	stw	r2,-8(fp)
			addr = addr + t_y * limit_x;
 840fed8:	e13ffb17 	ldw	r4,-20(fp)
 840fedc:	e0fffe17 	ldw	r3,-8(fp)
 840fee0:	20c5383a 	mul	r2,r4,r3
 840fee4:	e13fff17 	ldw	r4,-4(fp)
 840fee8:	2089883a 	add	r4,r4,r2
 840feec:	e13fff15 	stw	r4,-4(fp)
			for (y = t_y; y <= b_y; y++)
 840fef0:	e0bffb17 	ldw	r2,-20(fp)
 840fef4:	e0bff615 	stw	r2,-40(fp)
 840fef8:	00001006 	br	840ff3c <alt_up_pixel_buffer_dma_draw_vline+0x3b4>
			{
				IOWR_32DIRECT(addr, line_x << 2, local_color);
 840fefc:	e0fffc17 	ldw	r3,-16(fp)
 840ff00:	e0fffc17 	ldw	r3,-16(fp)
 840ff04:	18c5883a 	add	r2,r3,r3
 840ff08:	1085883a 	add	r2,r2,r2
 840ff0c:	1007883a 	mov	r3,r2
 840ff10:	e0bfff17 	ldw	r2,-4(fp)
 840ff14:	1885883a 	add	r2,r3,r2
 840ff18:	e0fff917 	ldw	r3,-28(fp)
 840ff1c:	10c00035 	stwio	r3,0(r2)
				addr = addr + limit_x;
 840ff20:	e13fff17 	ldw	r4,-4(fp)
 840ff24:	e0bffe17 	ldw	r2,-8(fp)
 840ff28:	2089883a 	add	r4,r4,r2
 840ff2c:	e13fff15 	stw	r4,-4(fp)
		}
		else
		{
			limit_x = limit_x << 2;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
 840ff30:	e0fff617 	ldw	r3,-40(fp)
 840ff34:	18c00044 	addi	r3,r3,1
 840ff38:	e0fff615 	stw	r3,-40(fp)
 840ff3c:	e13ffa17 	ldw	r4,-24(fp)
 840ff40:	e0bff617 	ldw	r2,-40(fp)
 840ff44:	20bfed2e 	bgeu	r4,r2,840fefc <alt_up_pixel_buffer_dma_draw_vline+0x374>
				IOWR_32DIRECT(addr, line_x << 2, local_color);
				addr = addr + limit_x;
			}
		}
	}
}
 840ff48:	e037883a 	mov	sp,fp
 840ff4c:	df000017 	ldw	fp,0(sp)
 840ff50:	dec00104 	addi	sp,sp,4
 840ff54:	f800283a 	ret

0840ff58 <alt_up_pixel_buffer_dma_draw_rectangle>:

void alt_up_pixel_buffer_dma_draw_rectangle(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int y0, int x1, int y1, int color, int backbuffer)
{
 840ff58:	defff804 	addi	sp,sp,-32
 840ff5c:	dfc00715 	stw	ra,28(sp)
 840ff60:	df000615 	stw	fp,24(sp)
 840ff64:	df000604 	addi	fp,sp,24
 840ff68:	e13ffc15 	stw	r4,-16(fp)
 840ff6c:	e17ffd15 	stw	r5,-12(fp)
 840ff70:	e1bffe15 	stw	r6,-8(fp)
 840ff74:	e1ffff15 	stw	r7,-4(fp)
	alt_up_pixel_buffer_dma_draw_hline(pixel_buffer, x0, x1, y0, color, backbuffer);
 840ff78:	e0800317 	ldw	r2,12(fp)
 840ff7c:	d8800015 	stw	r2,0(sp)
 840ff80:	e0800417 	ldw	r2,16(fp)
 840ff84:	d8800115 	stw	r2,4(sp)
 840ff88:	e13ffc17 	ldw	r4,-16(fp)
 840ff8c:	e17ffd17 	ldw	r5,-12(fp)
 840ff90:	e1bfff17 	ldw	r6,-4(fp)
 840ff94:	e1fffe17 	ldw	r7,-8(fp)
 840ff98:	840f8380 	call	840f838 <alt_up_pixel_buffer_dma_draw_hline>
	alt_up_pixel_buffer_dma_draw_hline(pixel_buffer, x0, x1, y1, color, backbuffer);
 840ff9c:	e0800317 	ldw	r2,12(fp)
 840ffa0:	d8800015 	stw	r2,0(sp)
 840ffa4:	e0800417 	ldw	r2,16(fp)
 840ffa8:	d8800115 	stw	r2,4(sp)
 840ffac:	e13ffc17 	ldw	r4,-16(fp)
 840ffb0:	e17ffd17 	ldw	r5,-12(fp)
 840ffb4:	e1bfff17 	ldw	r6,-4(fp)
 840ffb8:	e1c00217 	ldw	r7,8(fp)
 840ffbc:	840f8380 	call	840f838 <alt_up_pixel_buffer_dma_draw_hline>
	alt_up_pixel_buffer_dma_draw_vline(pixel_buffer, x0, y0, y1, color, backbuffer);
 840ffc0:	e0800317 	ldw	r2,12(fp)
 840ffc4:	d8800015 	stw	r2,0(sp)
 840ffc8:	e0800417 	ldw	r2,16(fp)
 840ffcc:	d8800115 	stw	r2,4(sp)
 840ffd0:	e13ffc17 	ldw	r4,-16(fp)
 840ffd4:	e17ffd17 	ldw	r5,-12(fp)
 840ffd8:	e1bffe17 	ldw	r6,-8(fp)
 840ffdc:	e1c00217 	ldw	r7,8(fp)
 840ffe0:	840fb880 	call	840fb88 <alt_up_pixel_buffer_dma_draw_vline>
	alt_up_pixel_buffer_dma_draw_vline(pixel_buffer, x1, y0, y1, color, backbuffer);
 840ffe4:	e0800317 	ldw	r2,12(fp)
 840ffe8:	d8800015 	stw	r2,0(sp)
 840ffec:	e0800417 	ldw	r2,16(fp)
 840fff0:	d8800115 	stw	r2,4(sp)
 840fff4:	e13ffc17 	ldw	r4,-16(fp)
 840fff8:	e17fff17 	ldw	r5,-4(fp)
 840fffc:	e1bffe17 	ldw	r6,-8(fp)
 8410000:	e1c00217 	ldw	r7,8(fp)
 8410004:	840fb880 	call	840fb88 <alt_up_pixel_buffer_dma_draw_vline>
}
 8410008:	e037883a 	mov	sp,fp
 841000c:	dfc00117 	ldw	ra,4(sp)
 8410010:	df000017 	ldw	fp,0(sp)
 8410014:	dec00204 	addi	sp,sp,8
 8410018:	f800283a 	ret

0841001c <helper_plot_pixel>:

void helper_plot_pixel(register unsigned int buffer_start, register int line_size, register int x, register int y, register int color, register int mode)
/* This is a helper function that draws a pixel at a given location. Note that no boundary checks are made,
 * so drawing off-screen may cause unpredictable side effects. */
{
 841001c:	defffb04 	addi	sp,sp,-20
 8410020:	df000415 	stw	fp,16(sp)
 8410024:	df000404 	addi	fp,sp,16
 8410028:	e13ffc15 	stw	r4,-16(fp)
 841002c:	e17ffd15 	stw	r5,-12(fp)
 8410030:	e1bffe15 	stw	r6,-8(fp)
 8410034:	e1ffff15 	stw	r7,-4(fp)
	if (mode == 0)
 8410038:	e0c00217 	ldw	r3,8(fp)
 841003c:	1804c03a 	cmpne	r2,r3,zero
 8410040:	10000b1e 	bne	r2,zero,8410070 <helper_plot_pixel+0x54>
		IOWR_8DIRECT(buffer_start, line_size*y+x, color);
 8410044:	e13ffd17 	ldw	r4,-12(fp)
 8410048:	e0ffff17 	ldw	r3,-4(fp)
 841004c:	20c5383a 	mul	r2,r4,r3
 8410050:	e13ffe17 	ldw	r4,-8(fp)
 8410054:	1105883a 	add	r2,r2,r4
 8410058:	1007883a 	mov	r3,r2
 841005c:	e0bffc17 	ldw	r2,-16(fp)
 8410060:	1885883a 	add	r2,r3,r2
 8410064:	e0c00117 	ldw	r3,4(fp)
 8410068:	10c00025 	stbio	r3,0(r2)
 841006c:	00001b06 	br	84100dc <helper_plot_pixel+0xc0>
	else if (mode == 1)
 8410070:	e1000217 	ldw	r4,8(fp)
 8410074:	20800058 	cmpnei	r2,r4,1
 8410078:	10000c1e 	bne	r2,zero,84100ac <helper_plot_pixel+0x90>
		IOWR_16DIRECT(buffer_start, (line_size*y+x) << 1, color);
 841007c:	e0fffd17 	ldw	r3,-12(fp)
 8410080:	e13fff17 	ldw	r4,-4(fp)
 8410084:	1905383a 	mul	r2,r3,r4
 8410088:	e0fffe17 	ldw	r3,-8(fp)
 841008c:	10c5883a 	add	r2,r2,r3
 8410090:	1085883a 	add	r2,r2,r2
 8410094:	1007883a 	mov	r3,r2
 8410098:	e0bffc17 	ldw	r2,-16(fp)
 841009c:	1885883a 	add	r2,r3,r2
 84100a0:	e1000117 	ldw	r4,4(fp)
 84100a4:	1100002d 	sthio	r4,0(r2)
 84100a8:	00000c06 	br	84100dc <helper_plot_pixel+0xc0>
	else
		IOWR_32DIRECT(buffer_start, (line_size*y+x) << 2, color);
 84100ac:	e0fffd17 	ldw	r3,-12(fp)
 84100b0:	e13fff17 	ldw	r4,-4(fp)
 84100b4:	1905383a 	mul	r2,r3,r4
 84100b8:	e0fffe17 	ldw	r3,-8(fp)
 84100bc:	10c5883a 	add	r2,r2,r3
 84100c0:	1085883a 	add	r2,r2,r2
 84100c4:	1085883a 	add	r2,r2,r2
 84100c8:	1007883a 	mov	r3,r2
 84100cc:	e0bffc17 	ldw	r2,-16(fp)
 84100d0:	1885883a 	add	r2,r3,r2
 84100d4:	e1000117 	ldw	r4,4(fp)
 84100d8:	11000035 	stwio	r4,0(r2)
}
 84100dc:	e037883a 	mov	sp,fp
 84100e0:	df000017 	ldw	fp,0(sp)
 84100e4:	dec00104 	addi	sp,sp,4
 84100e8:	f800283a 	ret

084100ec <alt_up_pixel_buffer_dma_draw_line>:

void alt_up_pixel_buffer_dma_draw_line(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int y0, int x1, int y1, int color, int backbuffer)
/* This function draws a line between points (x0, y0) and (x1, y1). The function does not check if it draws a pixel within screen boundaries.
 * users should ensure that the line is drawn within the screen boundaries. */
{
 84100ec:	deffe404 	addi	sp,sp,-112
 84100f0:	dfc01b15 	stw	ra,108(sp)
 84100f4:	df001a15 	stw	fp,104(sp)
 84100f8:	df001a04 	addi	fp,sp,104
 84100fc:	e13fe815 	stw	r4,-96(fp)
 8410100:	e17fe915 	stw	r5,-92(fp)
 8410104:	e1bfea15 	stw	r6,-88(fp)
 8410108:	e1ffeb15 	stw	r7,-84(fp)
	register int x_0 = x0;
 841010c:	e0bfe917 	ldw	r2,-92(fp)
 8410110:	e0bffa15 	stw	r2,-24(fp)
	register int y_0 = y0;
 8410114:	e0ffea17 	ldw	r3,-88(fp)
 8410118:	e0fff915 	stw	r3,-28(fp)
	register int x_1 = x1;
 841011c:	e13feb17 	ldw	r4,-84(fp)
 8410120:	e13ff815 	stw	r4,-32(fp)
	register int y_1 = y1;
 8410124:	e0800217 	ldw	r2,8(fp)
 8410128:	e0bff715 	stw	r2,-36(fp)
	register char steep = (ABS(y_1 - y_0) > ABS(x_1 - x_0)) ? 1 : 0;
 841012c:	e0fff717 	ldw	r3,-36(fp)
 8410130:	e13ff917 	ldw	r4,-28(fp)
 8410134:	1905c83a 	sub	r2,r3,r4
 8410138:	e0bfff15 	stw	r2,-4(fp)
 841013c:	e0ffff17 	ldw	r3,-4(fp)
 8410140:	1804403a 	cmpge	r2,r3,zero
 8410144:	1000031e 	bne	r2,zero,8410154 <alt_up_pixel_buffer_dma_draw_line+0x68>
 8410148:	e13fff17 	ldw	r4,-4(fp)
 841014c:	0109c83a 	sub	r4,zero,r4
 8410150:	e13fff15 	stw	r4,-4(fp)
 8410154:	e0fff817 	ldw	r3,-32(fp)
 8410158:	e13ffa17 	ldw	r4,-24(fp)
 841015c:	1905c83a 	sub	r2,r3,r4
 8410160:	e0bffe15 	stw	r2,-8(fp)
 8410164:	e0fffe17 	ldw	r3,-8(fp)
 8410168:	1804403a 	cmpge	r2,r3,zero
 841016c:	1000031e 	bne	r2,zero,841017c <alt_up_pixel_buffer_dma_draw_line+0x90>
 8410170:	e13ffe17 	ldw	r4,-8(fp)
 8410174:	0109c83a 	sub	r4,zero,r4
 8410178:	e13ffe15 	stw	r4,-8(fp)
 841017c:	e0fffe17 	ldw	r3,-8(fp)
 8410180:	e13fff17 	ldw	r4,-4(fp)
 8410184:	1904803a 	cmplt	r2,r3,r4
 8410188:	e0bff605 	stb	r2,-40(fp)
	register int deltax, deltay, error, ystep, x, y;
	register int color_mode =	(pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) ? 0 :
								(pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) ? 1 : 2;
 841018c:	e0bfe817 	ldw	r2,-96(fp)
 8410190:	10800e17 	ldw	r2,56(r2)
 8410194:	10800060 	cmpeqi	r2,r2,1
 8410198:	10000c1e 	bne	r2,zero,84101cc <alt_up_pixel_buffer_dma_draw_line+0xe0>
 841019c:	e0bfe817 	ldw	r2,-96(fp)
 84101a0:	10800e17 	ldw	r2,56(r2)
 84101a4:	10800098 	cmpnei	r2,r2,2
 84101a8:	1000031e 	bne	r2,zero,84101b8 <alt_up_pixel_buffer_dma_draw_line+0xcc>
 84101ac:	00800044 	movi	r2,1
 84101b0:	e0bffc15 	stw	r2,-16(fp)
 84101b4:	00000206 	br	84101c0 <alt_up_pixel_buffer_dma_draw_line+0xd4>
 84101b8:	00c00084 	movi	r3,2
 84101bc:	e0fffc15 	stw	r3,-16(fp)
 84101c0:	e13ffc17 	ldw	r4,-16(fp)
 84101c4:	e13ffd15 	stw	r4,-12(fp)
 84101c8:	00000106 	br	84101d0 <alt_up_pixel_buffer_dma_draw_line+0xe4>
 84101cc:	e03ffd15 	stw	zero,-12(fp)
 84101d0:	e0bffd17 	ldw	r2,-12(fp)
 84101d4:	e0bfef15 	stw	r2,-68(fp)
	register int line_color = color;
 84101d8:	e0c00317 	ldw	r3,12(fp)
 84101dc:	e0ffee15 	stw	r3,-72(fp)
	register unsigned int buffer_start;
	register int line_size = (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) ? (1 << (pixel_buffer->y_coord_offset-color_mode)) : pixel_buffer->x_resolution;
 84101e0:	e0bfe817 	ldw	r2,-96(fp)
 84101e4:	10800d17 	ldw	r2,52(r2)
 84101e8:	1004c03a 	cmpne	r2,r2,zero
 84101ec:	1000091e 	bne	r2,zero,8410214 <alt_up_pixel_buffer_dma_draw_line+0x128>
 84101f0:	e0bfe817 	ldw	r2,-96(fp)
 84101f4:	10c01317 	ldw	r3,76(r2)
 84101f8:	e0bfef17 	ldw	r2,-68(fp)
 84101fc:	1885c83a 	sub	r2,r3,r2
 8410200:	1007883a 	mov	r3,r2
 8410204:	00800044 	movi	r2,1
 8410208:	10c4983a 	sll	r2,r2,r3
 841020c:	e0bffb15 	stw	r2,-20(fp)
 8410210:	00000306 	br	8410220 <alt_up_pixel_buffer_dma_draw_line+0x134>
 8410214:	e0bfe817 	ldw	r2,-96(fp)
 8410218:	10800f17 	ldw	r2,60(r2)
 841021c:	e0bffb15 	stw	r2,-20(fp)
 8410220:	e13ffb17 	ldw	r4,-20(fp)
 8410224:	e13fec15 	stw	r4,-80(fp)

	if (backbuffer == 1)
 8410228:	e0800417 	ldw	r2,16(fp)
 841022c:	10800058 	cmpnei	r2,r2,1
 8410230:	1000041e 	bne	r2,zero,8410244 <alt_up_pixel_buffer_dma_draw_line+0x158>
		buffer_start = pixel_buffer->back_buffer_start_address;
 8410234:	e0bfe817 	ldw	r2,-96(fp)
 8410238:	10800c17 	ldw	r2,48(r2)
 841023c:	e0bfed15 	stw	r2,-76(fp)
 8410240:	00000306 	br	8410250 <alt_up_pixel_buffer_dma_draw_line+0x164>
	else
		buffer_start = pixel_buffer->buffer_start_address;
 8410244:	e0bfe817 	ldw	r2,-96(fp)
 8410248:	10800b17 	ldw	r2,44(r2)
 841024c:	e0bfed15 	stw	r2,-76(fp)

	/* Preprocessing inputs */
	if (steep > 0) {
 8410250:	e0fff603 	ldbu	r3,-40(fp)
 8410254:	18803fcc 	andi	r2,r3,255
 8410258:	1080201c 	xori	r2,r2,128
 841025c:	10bfe004 	addi	r2,r2,-128
 8410260:	10800050 	cmplti	r2,r2,1
 8410264:	10000c1e 	bne	r2,zero,8410298 <alt_up_pixel_buffer_dma_draw_line+0x1ac>
		// Swap x_0 and y_0
		error = x_0;
 8410268:	e13ffa17 	ldw	r4,-24(fp)
 841026c:	e13ff315 	stw	r4,-52(fp)
		x_0 = y_0;
 8410270:	e0bff917 	ldw	r2,-28(fp)
 8410274:	e0bffa15 	stw	r2,-24(fp)
		y_0 = error;
 8410278:	e0fff317 	ldw	r3,-52(fp)
 841027c:	e0fff915 	stw	r3,-28(fp)
		// Swap x_1 and y_1
		error = x_1;
 8410280:	e13ff817 	ldw	r4,-32(fp)
 8410284:	e13ff315 	stw	r4,-52(fp)
		x_1 = y_1;
 8410288:	e0bff717 	ldw	r2,-36(fp)
 841028c:	e0bff815 	stw	r2,-32(fp)
		y_1 = error;
 8410290:	e0fff317 	ldw	r3,-52(fp)
 8410294:	e0fff715 	stw	r3,-36(fp)
	}
	if (x_0 > x_1) {
 8410298:	e13ff817 	ldw	r4,-32(fp)
 841029c:	e0bffa17 	ldw	r2,-24(fp)
 84102a0:	20800c0e 	bge	r4,r2,84102d4 <alt_up_pixel_buffer_dma_draw_line+0x1e8>
		// Swap x_0 and x_1
		error = x_0;
 84102a4:	e0fffa17 	ldw	r3,-24(fp)
 84102a8:	e0fff315 	stw	r3,-52(fp)
		x_0 = x_1;
 84102ac:	e13ff817 	ldw	r4,-32(fp)
 84102b0:	e13ffa15 	stw	r4,-24(fp)
		x_1 = error;
 84102b4:	e0bff317 	ldw	r2,-52(fp)
 84102b8:	e0bff815 	stw	r2,-32(fp)
		// Swap y_0 and y_1
		error = y_0;
 84102bc:	e0fff917 	ldw	r3,-28(fp)
 84102c0:	e0fff315 	stw	r3,-52(fp)
		y_0 = y_1;
 84102c4:	e13ff717 	ldw	r4,-36(fp)
 84102c8:	e13ff915 	stw	r4,-28(fp)
		y_1 = error;
 84102cc:	e0bff317 	ldw	r2,-52(fp)
 84102d0:	e0bff715 	stw	r2,-36(fp)
	}

	/* Setup local variables */
	deltax = x_1 - x_0;
 84102d4:	e0fff817 	ldw	r3,-32(fp)
 84102d8:	e13ffa17 	ldw	r4,-24(fp)
 84102dc:	1907c83a 	sub	r3,r3,r4
 84102e0:	e0fff515 	stw	r3,-44(fp)
	deltay = ABS(y_1 - y_0);
 84102e4:	e0fff717 	ldw	r3,-36(fp)
 84102e8:	e13ff917 	ldw	r4,-28(fp)
 84102ec:	1905c83a 	sub	r2,r3,r4
 84102f0:	e0bff415 	stw	r2,-48(fp)
 84102f4:	e0fff417 	ldw	r3,-48(fp)
 84102f8:	1804403a 	cmpge	r2,r3,zero
 84102fc:	1000031e 	bne	r2,zero,841030c <alt_up_pixel_buffer_dma_draw_line+0x220>
 8410300:	e13ff417 	ldw	r4,-48(fp)
 8410304:	0109c83a 	sub	r4,zero,r4
 8410308:	e13ff415 	stw	r4,-48(fp)
	error = -(deltax / 2); 
 841030c:	e0fff517 	ldw	r3,-44(fp)
 8410310:	1804d7fa 	srli	r2,r3,31
 8410314:	e13ff517 	ldw	r4,-44(fp)
 8410318:	1105883a 	add	r2,r2,r4
 841031c:	1005d07a 	srai	r2,r2,1
 8410320:	0085c83a 	sub	r2,zero,r2
 8410324:	e0bff315 	stw	r2,-52(fp)
	y = y_0;
 8410328:	e0bff917 	ldw	r2,-28(fp)
 841032c:	e0bff015 	stw	r2,-64(fp)
	if (y_0 < y_1)
 8410330:	e0fff917 	ldw	r3,-28(fp)
 8410334:	e13ff717 	ldw	r4,-36(fp)
 8410338:	1900030e 	bge	r3,r4,8410348 <alt_up_pixel_buffer_dma_draw_line+0x25c>
		ystep = 1;
 841033c:	00800044 	movi	r2,1
 8410340:	e0bff215 	stw	r2,-56(fp)
 8410344:	00000206 	br	8410350 <alt_up_pixel_buffer_dma_draw_line+0x264>
	else
		ystep = -1;
 8410348:	00ffffc4 	movi	r3,-1
 841034c:	e0fff215 	stw	r3,-56(fp)

	/* Draw a line - either go along the x axis (steep = 0) or along the y axis (steep = 1). The code is replicated to
	 * compile well on low optimization levels. */
	if (steep == 1)
 8410350:	e13ff603 	ldbu	r4,-40(fp)
 8410354:	20803fcc 	andi	r2,r4,255
 8410358:	1080201c 	xori	r2,r2,128
 841035c:	10bfe004 	addi	r2,r2,-128
 8410360:	10800058 	cmpnei	r2,r2,1
 8410364:	1000221e 	bne	r2,zero,84103f0 <alt_up_pixel_buffer_dma_draw_line+0x304>
	{
		for (x=x_0; x <= x_1; x++) {
 8410368:	e0bffa17 	ldw	r2,-24(fp)
 841036c:	e0bff115 	stw	r2,-60(fp)
 8410370:	00001b06 	br	84103e0 <alt_up_pixel_buffer_dma_draw_line+0x2f4>
			helper_plot_pixel(buffer_start, line_size, y, x, line_color, color_mode);
 8410374:	e0ffee17 	ldw	r3,-72(fp)
 8410378:	d8c00015 	stw	r3,0(sp)
 841037c:	e13fef17 	ldw	r4,-68(fp)
 8410380:	d9000115 	stw	r4,4(sp)
 8410384:	e13fed17 	ldw	r4,-76(fp)
 8410388:	e17fec17 	ldw	r5,-80(fp)
 841038c:	e1bff017 	ldw	r6,-64(fp)
 8410390:	e1fff117 	ldw	r7,-60(fp)
 8410394:	841001c0 	call	841001c <helper_plot_pixel>
			error = error + deltay;
 8410398:	e0bff317 	ldw	r2,-52(fp)
 841039c:	e0fff417 	ldw	r3,-48(fp)
 84103a0:	10c5883a 	add	r2,r2,r3
 84103a4:	e0bff315 	stw	r2,-52(fp)
			if (error > 0) {
 84103a8:	e13ff317 	ldw	r4,-52(fp)
 84103ac:	20800050 	cmplti	r2,r4,1
 84103b0:	1000081e 	bne	r2,zero,84103d4 <alt_up_pixel_buffer_dma_draw_line+0x2e8>
				y = y + ystep;
 84103b4:	e0bff017 	ldw	r2,-64(fp)
 84103b8:	e0fff217 	ldw	r3,-56(fp)
 84103bc:	10c5883a 	add	r2,r2,r3
 84103c0:	e0bff015 	stw	r2,-64(fp)
				error = error - deltax;
 84103c4:	e13ff317 	ldw	r4,-52(fp)
 84103c8:	e0bff517 	ldw	r2,-44(fp)
 84103cc:	2089c83a 	sub	r4,r4,r2
 84103d0:	e13ff315 	stw	r4,-52(fp)

	/* Draw a line - either go along the x axis (steep = 0) or along the y axis (steep = 1). The code is replicated to
	 * compile well on low optimization levels. */
	if (steep == 1)
	{
		for (x=x_0; x <= x_1; x++) {
 84103d4:	e0fff117 	ldw	r3,-60(fp)
 84103d8:	18c00044 	addi	r3,r3,1
 84103dc:	e0fff115 	stw	r3,-60(fp)
 84103e0:	e13ff817 	ldw	r4,-32(fp)
 84103e4:	e0bff117 	ldw	r2,-60(fp)
 84103e8:	20bfe20e 	bge	r4,r2,8410374 <alt_up_pixel_buffer_dma_draw_line+0x288>
 84103ec:	00002106 	br	8410474 <alt_up_pixel_buffer_dma_draw_line+0x388>
			}
		}
	}
	else
	{
		for (x=x_0; x <= x_1; x++) {
 84103f0:	e0fffa17 	ldw	r3,-24(fp)
 84103f4:	e0fff115 	stw	r3,-60(fp)
 84103f8:	00001b06 	br	8410468 <alt_up_pixel_buffer_dma_draw_line+0x37c>
			helper_plot_pixel(buffer_start, line_size, x, y, line_color, color_mode);
 84103fc:	e13fee17 	ldw	r4,-72(fp)
 8410400:	d9000015 	stw	r4,0(sp)
 8410404:	e0bfef17 	ldw	r2,-68(fp)
 8410408:	d8800115 	stw	r2,4(sp)
 841040c:	e13fed17 	ldw	r4,-76(fp)
 8410410:	e17fec17 	ldw	r5,-80(fp)
 8410414:	e1bff117 	ldw	r6,-60(fp)
 8410418:	e1fff017 	ldw	r7,-64(fp)
 841041c:	841001c0 	call	841001c <helper_plot_pixel>
			error = error + deltay;
 8410420:	e0fff317 	ldw	r3,-52(fp)
 8410424:	e13ff417 	ldw	r4,-48(fp)
 8410428:	1907883a 	add	r3,r3,r4
 841042c:	e0fff315 	stw	r3,-52(fp)
			if (error > 0) {
 8410430:	e0fff317 	ldw	r3,-52(fp)
 8410434:	18800050 	cmplti	r2,r3,1
 8410438:	1000081e 	bne	r2,zero,841045c <alt_up_pixel_buffer_dma_draw_line+0x370>
				y = y + ystep;
 841043c:	e13ff017 	ldw	r4,-64(fp)
 8410440:	e0bff217 	ldw	r2,-56(fp)
 8410444:	2089883a 	add	r4,r4,r2
 8410448:	e13ff015 	stw	r4,-64(fp)
				error = error - deltax;
 841044c:	e0fff317 	ldw	r3,-52(fp)
 8410450:	e13ff517 	ldw	r4,-44(fp)
 8410454:	1907c83a 	sub	r3,r3,r4
 8410458:	e0fff315 	stw	r3,-52(fp)
			}
		}
	}
	else
	{
		for (x=x_0; x <= x_1; x++) {
 841045c:	e0bff117 	ldw	r2,-60(fp)
 8410460:	10800044 	addi	r2,r2,1
 8410464:	e0bff115 	stw	r2,-60(fp)
 8410468:	e0fff817 	ldw	r3,-32(fp)
 841046c:	e13ff117 	ldw	r4,-60(fp)
 8410470:	193fe20e 	bge	r3,r4,84103fc <alt_up_pixel_buffer_dma_draw_line+0x310>
				y = y + ystep;
				error = error - deltax;
			}
		}
	}
}
 8410474:	e037883a 	mov	sp,fp
 8410478:	dfc00117 	ldw	ra,4(sp)
 841047c:	df000017 	ldw	fp,0(sp)
 8410480:	dec00204 	addi	sp,sp,8
 8410484:	f800283a 	ret

08410488 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
 8410488:	defff404 	addi	sp,sp,-48
 841048c:	df000b15 	stw	fp,44(sp)
 8410490:	df000b04 	addi	fp,sp,44
 8410494:	e13ffb15 	stw	r4,-20(fp)
 8410498:	e17ffc15 	stw	r5,-16(fp)
 841049c:	e1bffd15 	stw	r6,-12(fp)
 84104a0:	e1fffe15 	stw	r7,-8(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
 84104a4:	e03ff915 	stw	zero,-28(fp)
 84104a8:	00821074 	movhi	r2,2113
 84104ac:	10956904 	addi	r2,r2,21924
 84104b0:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
 84104b4:	1005003a 	cmpeq	r2,r2,zero
 84104b8:	1000411e 	bne	r2,zero,84105c0 <alt_alarm_start+0x138>
  {
    if (alarm)
 84104bc:	e0bffb17 	ldw	r2,-20(fp)
 84104c0:	1005003a 	cmpeq	r2,r2,zero
 84104c4:	10003b1e 	bne	r2,zero,84105b4 <alt_alarm_start+0x12c>
    {
      alarm->callback = callback;
 84104c8:	e0fffb17 	ldw	r3,-20(fp)
 84104cc:	e0bffd17 	ldw	r2,-12(fp)
 84104d0:	18800315 	stw	r2,12(r3)
      alarm->context  = context;
 84104d4:	e0fffb17 	ldw	r3,-20(fp)
 84104d8:	e0bffe17 	ldw	r2,-8(fp)
 84104dc:	18800515 	stw	r2,20(r3)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 84104e0:	0005303a 	rdctl	r2,status
 84104e4:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 84104e8:	e0fff817 	ldw	r3,-32(fp)
 84104ec:	00bfff84 	movi	r2,-2
 84104f0:	1884703a 	and	r2,r3,r2
 84104f4:	1001703a 	wrctl	status,r2
  
  return context;
 84104f8:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
 84104fc:	e0bffa15 	stw	r2,-24(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 8410500:	00821074 	movhi	r2,2113
 8410504:	10956a04 	addi	r2,r2,21928
 8410508:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
 841050c:	e0bff915 	stw	r2,-28(fp)
      
      alarm->time = nticks + current_nticks + 1; 
 8410510:	e0fffc17 	ldw	r3,-16(fp)
 8410514:	e0bff917 	ldw	r2,-28(fp)
 8410518:	1885883a 	add	r2,r3,r2
 841051c:	10c00044 	addi	r3,r2,1
 8410520:	e0bffb17 	ldw	r2,-20(fp)
 8410524:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
 8410528:	e0bffb17 	ldw	r2,-20(fp)
 841052c:	10c00217 	ldw	r3,8(r2)
 8410530:	e0bff917 	ldw	r2,-28(fp)
 8410534:	1880042e 	bgeu	r3,r2,8410548 <alt_alarm_start+0xc0>
      {
        alarm->rollover = 1;
 8410538:	e0fffb17 	ldw	r3,-20(fp)
 841053c:	00800044 	movi	r2,1
 8410540:	18800405 	stb	r2,16(r3)
 8410544:	00000206 	br	8410550 <alt_alarm_start+0xc8>
      }
      else
      {
        alarm->rollover = 0;
 8410548:	e0bffb17 	ldw	r2,-20(fp)
 841054c:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
 8410550:	e0fffb17 	ldw	r3,-20(fp)
 8410554:	00821074 	movhi	r2,2113
 8410558:	108e6404 	addi	r2,r2,14736
 841055c:	e0bff615 	stw	r2,-40(fp)
 8410560:	e0fff715 	stw	r3,-36(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 8410564:	e0fff717 	ldw	r3,-36(fp)
 8410568:	e0bff617 	ldw	r2,-40(fp)
 841056c:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
 8410570:	e0bff617 	ldw	r2,-40(fp)
 8410574:	10c00017 	ldw	r3,0(r2)
 8410578:	e0bff717 	ldw	r2,-36(fp)
 841057c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 8410580:	e0bff617 	ldw	r2,-40(fp)
 8410584:	10c00017 	ldw	r3,0(r2)
 8410588:	e0bff717 	ldw	r2,-36(fp)
 841058c:	18800115 	stw	r2,4(r3)
  list->next           = entry;
 8410590:	e0fff617 	ldw	r3,-40(fp)
 8410594:	e0bff717 	ldw	r2,-36(fp)
 8410598:	18800015 	stw	r2,0(r3)
 841059c:	e0bffa17 	ldw	r2,-24(fp)
 84105a0:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 84105a4:	e0bff517 	ldw	r2,-44(fp)
 84105a8:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
 84105ac:	e03fff15 	stw	zero,-4(fp)
 84105b0:	00000506 	br	84105c8 <alt_alarm_start+0x140>
    }
    else
    {
      return -EINVAL;
 84105b4:	00bffa84 	movi	r2,-22
 84105b8:	e0bfff15 	stw	r2,-4(fp)
 84105bc:	00000206 	br	84105c8 <alt_alarm_start+0x140>
    }
  }
  else
  {
    return -ENOTSUP;
 84105c0:	00bfde84 	movi	r2,-134
 84105c4:	e0bfff15 	stw	r2,-4(fp)
 84105c8:	e0bfff17 	ldw	r2,-4(fp)
  }
}
 84105cc:	e037883a 	mov	sp,fp
 84105d0:	df000017 	ldw	fp,0(sp)
 84105d4:	dec00104 	addi	sp,sp,4
 84105d8:	f800283a 	ret

084105dc <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 84105dc:	defffe04 	addi	sp,sp,-8
 84105e0:	df000115 	stw	fp,4(sp)
 84105e4:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
 84105e8:	e03fff15 	stw	zero,-4(fp)
 84105ec:	00000506 	br	8410604 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
 84105f0:	e0bfff17 	ldw	r2,-4(fp)
 84105f4:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
 84105f8:	e0bfff17 	ldw	r2,-4(fp)
 84105fc:	10800804 	addi	r2,r2,32
 8410600:	e0bfff15 	stw	r2,-4(fp)
 8410604:	e0bfff17 	ldw	r2,-4(fp)
 8410608:	10810030 	cmpltui	r2,r2,1024
 841060c:	103ff81e 	bne	r2,zero,84105f0 <alt_dcache_flush_all+0x14>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 8410610:	e037883a 	mov	sp,fp
 8410614:	df000017 	ldw	fp,0(sp)
 8410618:	dec00104 	addi	sp,sp,4
 841061c:	f800283a 	ret

08410620 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
 8410620:	defff904 	addi	sp,sp,-28
 8410624:	dfc00615 	stw	ra,24(sp)
 8410628:	df000515 	stw	fp,20(sp)
 841062c:	df000504 	addi	fp,sp,20
 8410630:	e13ffd15 	stw	r4,-12(fp)
 8410634:	e17ffe15 	stw	r5,-8(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
 8410638:	e0bffd17 	ldw	r2,-12(fp)
 841063c:	1005003a 	cmpeq	r2,r2,zero
 8410640:	1000041e 	bne	r2,zero,8410654 <alt_dev_llist_insert+0x34>
 8410644:	e0bffd17 	ldw	r2,-12(fp)
 8410648:	10800217 	ldw	r2,8(r2)
 841064c:	1004c03a 	cmpne	r2,r2,zero
 8410650:	1000071e 	bne	r2,zero,8410670 <alt_dev_llist_insert+0x50>
  {
    ALT_ERRNO = EINVAL;
 8410654:	84106d40 	call	84106d4 <alt_get_errno>
 8410658:	1007883a 	mov	r3,r2
 841065c:	00800584 	movi	r2,22
 8410660:	18800015 	stw	r2,0(r3)
    return -EINVAL;
 8410664:	00bffa84 	movi	r2,-22
 8410668:	e0bfff15 	stw	r2,-4(fp)
 841066c:	00001306 	br	84106bc <alt_dev_llist_insert+0x9c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
 8410670:	e0fffd17 	ldw	r3,-12(fp)
 8410674:	e0bffe17 	ldw	r2,-8(fp)
 8410678:	e0bffb15 	stw	r2,-20(fp)
 841067c:	e0fffc15 	stw	r3,-16(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 8410680:	e0fffc17 	ldw	r3,-16(fp)
 8410684:	e0bffb17 	ldw	r2,-20(fp)
 8410688:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
 841068c:	e0bffb17 	ldw	r2,-20(fp)
 8410690:	10c00017 	ldw	r3,0(r2)
 8410694:	e0bffc17 	ldw	r2,-16(fp)
 8410698:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 841069c:	e0bffb17 	ldw	r2,-20(fp)
 84106a0:	10c00017 	ldw	r3,0(r2)
 84106a4:	e0bffc17 	ldw	r2,-16(fp)
 84106a8:	18800115 	stw	r2,4(r3)
  list->next           = entry;
 84106ac:	e0fffb17 	ldw	r3,-20(fp)
 84106b0:	e0bffc17 	ldw	r2,-16(fp)
 84106b4:	18800015 	stw	r2,0(r3)

  return 0;  
 84106b8:	e03fff15 	stw	zero,-4(fp)
 84106bc:	e0bfff17 	ldw	r2,-4(fp)
}
 84106c0:	e037883a 	mov	sp,fp
 84106c4:	dfc00117 	ldw	ra,4(sp)
 84106c8:	df000017 	ldw	fp,0(sp)
 84106cc:	dec00204 	addi	sp,sp,8
 84106d0:	f800283a 	ret

084106d4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 84106d4:	defffd04 	addi	sp,sp,-12
 84106d8:	dfc00215 	stw	ra,8(sp)
 84106dc:	df000115 	stw	fp,4(sp)
 84106e0:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 84106e4:	00821074 	movhi	r2,2113
 84106e8:	108e5d04 	addi	r2,r2,14708
 84106ec:	10800017 	ldw	r2,0(r2)
 84106f0:	1005003a 	cmpeq	r2,r2,zero
 84106f4:	1000061e 	bne	r2,zero,8410710 <alt_get_errno+0x3c>
 84106f8:	00821074 	movhi	r2,2113
 84106fc:	108e5d04 	addi	r2,r2,14708
 8410700:	10800017 	ldw	r2,0(r2)
 8410704:	103ee83a 	callr	r2
 8410708:	e0bfff15 	stw	r2,-4(fp)
 841070c:	00000306 	br	841071c <alt_get_errno+0x48>
 8410710:	00821074 	movhi	r2,2113
 8410714:	10956404 	addi	r2,r2,21904
 8410718:	e0bfff15 	stw	r2,-4(fp)
 841071c:	e0bfff17 	ldw	r2,-4(fp)
}
 8410720:	e037883a 	mov	sp,fp
 8410724:	dfc00117 	ldw	ra,4(sp)
 8410728:	df000017 	ldw	fp,0(sp)
 841072c:	dec00204 	addi	sp,sp,8
 8410730:	f800283a 	ret

08410734 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
 8410734:	defffd04 	addi	sp,sp,-12
 8410738:	dfc00215 	stw	ra,8(sp)
 841073c:	df000115 	stw	fp,4(sp)
 8410740:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 8410744:	00bfff04 	movi	r2,-4
 8410748:	00c21074 	movhi	r3,2113
 841074c:	18c60c04 	addi	r3,r3,6192
 8410750:	1885883a 	add	r2,r3,r2
 8410754:	e0bfff15 	stw	r2,-4(fp)
 8410758:	00000606 	br	8410774 <_do_ctors+0x40>
        (*ctor) (); 
 841075c:	e0bfff17 	ldw	r2,-4(fp)
 8410760:	10800017 	ldw	r2,0(r2)
 8410764:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 8410768:	e0bfff17 	ldw	r2,-4(fp)
 841076c:	10bfff04 	addi	r2,r2,-4
 8410770:	e0bfff15 	stw	r2,-4(fp)
 8410774:	e0ffff17 	ldw	r3,-4(fp)
 8410778:	00821074 	movhi	r2,2113
 841077c:	10860b04 	addi	r2,r2,6188
 8410780:	18bff62e 	bgeu	r3,r2,841075c <_do_ctors+0x28>
        (*ctor) (); 
}
 8410784:	e037883a 	mov	sp,fp
 8410788:	dfc00117 	ldw	ra,4(sp)
 841078c:	df000017 	ldw	fp,0(sp)
 8410790:	dec00204 	addi	sp,sp,8
 8410794:	f800283a 	ret

08410798 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
 8410798:	defffd04 	addi	sp,sp,-12
 841079c:	dfc00215 	stw	ra,8(sp)
 84107a0:	df000115 	stw	fp,4(sp)
 84107a4:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 84107a8:	00bfff04 	movi	r2,-4
 84107ac:	00c21074 	movhi	r3,2113
 84107b0:	18c60c04 	addi	r3,r3,6192
 84107b4:	1885883a 	add	r2,r3,r2
 84107b8:	e0bfff15 	stw	r2,-4(fp)
 84107bc:	00000606 	br	84107d8 <_do_dtors+0x40>
        (*dtor) (); 
 84107c0:	e0bfff17 	ldw	r2,-4(fp)
 84107c4:	10800017 	ldw	r2,0(r2)
 84107c8:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 84107cc:	e0bfff17 	ldw	r2,-4(fp)
 84107d0:	10bfff04 	addi	r2,r2,-4
 84107d4:	e0bfff15 	stw	r2,-4(fp)
 84107d8:	e0ffff17 	ldw	r3,-4(fp)
 84107dc:	00821074 	movhi	r2,2113
 84107e0:	10860c04 	addi	r2,r2,6192
 84107e4:	18bff62e 	bgeu	r3,r2,84107c0 <_do_dtors+0x28>
        (*dtor) (); 
}
 84107e8:	e037883a 	mov	sp,fp
 84107ec:	dfc00117 	ldw	ra,4(sp)
 84107f0:	df000017 	ldw	fp,0(sp)
 84107f4:	dec00204 	addi	sp,sp,8
 84107f8:	f800283a 	ret

084107fc <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 84107fc:	defff904 	addi	sp,sp,-28
 8410800:	dfc00615 	stw	ra,24(sp)
 8410804:	df000515 	stw	fp,20(sp)
 8410808:	df000504 	addi	fp,sp,20
 841080c:	e13ffd15 	stw	r4,-12(fp)
 8410810:	e17ffe15 	stw	r5,-8(fp)
  alt_dev* next = (alt_dev*) llist->next;
 8410814:	e0bffe17 	ldw	r2,-8(fp)
 8410818:	10800017 	ldw	r2,0(r2)
 841081c:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
 8410820:	e13ffd17 	ldw	r4,-12(fp)
 8410824:	8404e480 	call	8404e48 <strlen>
 8410828:	10800044 	addi	r2,r2,1
 841082c:	e0bffb15 	stw	r2,-20(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 8410830:	00000d06 	br	8410868 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 8410834:	e0bffc17 	ldw	r2,-16(fp)
 8410838:	11000217 	ldw	r4,8(r2)
 841083c:	e1bffb17 	ldw	r6,-20(fp)
 8410840:	e17ffd17 	ldw	r5,-12(fp)
 8410844:	84114040 	call	8411404 <memcmp>
 8410848:	1004c03a 	cmpne	r2,r2,zero
 841084c:	1000031e 	bne	r2,zero,841085c <alt_find_dev+0x60>
    {
      /* match found */

      return next;
 8410850:	e0bffc17 	ldw	r2,-16(fp)
 8410854:	e0bfff15 	stw	r2,-4(fp)
 8410858:	00000706 	br	8410878 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
 841085c:	e0bffc17 	ldw	r2,-16(fp)
 8410860:	10800017 	ldw	r2,0(r2)
 8410864:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 8410868:	e0fffe17 	ldw	r3,-8(fp)
 841086c:	e0bffc17 	ldw	r2,-16(fp)
 8410870:	10fff01e 	bne	r2,r3,8410834 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
 8410874:	e03fff15 	stw	zero,-4(fp)
 8410878:	e0bfff17 	ldw	r2,-4(fp)
}
 841087c:	e037883a 	mov	sp,fp
 8410880:	dfc00117 	ldw	ra,4(sp)
 8410884:	df000017 	ldw	fp,0(sp)
 8410888:	dec00204 	addi	sp,sp,8
 841088c:	f800283a 	ret

08410890 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 8410890:	defffe04 	addi	sp,sp,-8
 8410894:	dfc00115 	stw	ra,4(sp)
 8410898:	df000015 	stw	fp,0(sp)
 841089c:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
 84108a0:	0009883a 	mov	r4,zero
 84108a4:	01440004 	movi	r5,4096
 84108a8:	84113280 	call	8411328 <alt_icache_flush>
#endif
}
 84108ac:	e037883a 	mov	sp,fp
 84108b0:	dfc00117 	ldw	ra,4(sp)
 84108b4:	df000017 	ldw	fp,0(sp)
 84108b8:	dec00204 	addi	sp,sp,8
 84108bc:	f800283a 	ret

084108c0 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 84108c0:	defff904 	addi	sp,sp,-28
 84108c4:	dfc00615 	stw	ra,24(sp)
 84108c8:	df000515 	stw	fp,20(sp)
 84108cc:	df000504 	addi	fp,sp,20
 84108d0:	e13ffc15 	stw	r4,-16(fp)
 84108d4:	e17ffd15 	stw	r5,-12(fp)
 84108d8:	e1bffe15 	stw	r6,-8(fp)
 84108dc:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
 84108e0:	e0800217 	ldw	r2,8(fp)
 84108e4:	d8800015 	stw	r2,0(sp)
 84108e8:	e13ffc17 	ldw	r4,-16(fp)
 84108ec:	e17ffd17 	ldw	r5,-12(fp)
 84108f0:	e1bffe17 	ldw	r6,-8(fp)
 84108f4:	e1ffff17 	ldw	r7,-4(fp)
 84108f8:	8410a940 	call	8410a94 <alt_iic_isr_register>
}  
 84108fc:	e037883a 	mov	sp,fp
 8410900:	dfc00117 	ldw	ra,4(sp)
 8410904:	df000017 	ldw	fp,0(sp)
 8410908:	dec00204 	addi	sp,sp,8
 841090c:	f800283a 	ret

08410910 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
 8410910:	defff904 	addi	sp,sp,-28
 8410914:	df000615 	stw	fp,24(sp)
 8410918:	df000604 	addi	fp,sp,24
 841091c:	e13ffe15 	stw	r4,-8(fp)
 8410920:	e17fff15 	stw	r5,-4(fp)
 8410924:	e0bfff17 	ldw	r2,-4(fp)
 8410928:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 841092c:	0005303a 	rdctl	r2,status
 8410930:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8410934:	e0fffb17 	ldw	r3,-20(fp)
 8410938:	00bfff84 	movi	r2,-2
 841093c:	1884703a 	and	r2,r3,r2
 8410940:	1001703a 	wrctl	status,r2
  
  return context;
 8410944:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 8410948:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active |= (1 << id);
 841094c:	e0fffc17 	ldw	r3,-16(fp)
 8410950:	00800044 	movi	r2,1
 8410954:	10c4983a 	sll	r2,r2,r3
 8410958:	1007883a 	mov	r3,r2
 841095c:	00821074 	movhi	r2,2113
 8410960:	10956804 	addi	r2,r2,21920
 8410964:	10800017 	ldw	r2,0(r2)
 8410968:	1886b03a 	or	r3,r3,r2
 841096c:	00821074 	movhi	r2,2113
 8410970:	10956804 	addi	r2,r2,21920
 8410974:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 8410978:	00821074 	movhi	r2,2113
 841097c:	10956804 	addi	r2,r2,21920
 8410980:	10800017 	ldw	r2,0(r2)
 8410984:	100170fa 	wrctl	ienable,r2
 8410988:	e0bffd17 	ldw	r2,-12(fp)
 841098c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8410990:	e0bffa17 	ldw	r2,-24(fp)
 8410994:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 8410998:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
 841099c:	e037883a 	mov	sp,fp
 84109a0:	df000017 	ldw	fp,0(sp)
 84109a4:	dec00104 	addi	sp,sp,4
 84109a8:	f800283a 	ret

084109ac <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
 84109ac:	defff904 	addi	sp,sp,-28
 84109b0:	df000615 	stw	fp,24(sp)
 84109b4:	df000604 	addi	fp,sp,24
 84109b8:	e13ffe15 	stw	r4,-8(fp)
 84109bc:	e17fff15 	stw	r5,-4(fp)
 84109c0:	e0bfff17 	ldw	r2,-4(fp)
 84109c4:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 84109c8:	0005303a 	rdctl	r2,status
 84109cc:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 84109d0:	e0fffb17 	ldw	r3,-20(fp)
 84109d4:	00bfff84 	movi	r2,-2
 84109d8:	1884703a 	and	r2,r3,r2
 84109dc:	1001703a 	wrctl	status,r2
  
  return context;
 84109e0:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 84109e4:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active &= ~(1 << id);
 84109e8:	e0fffc17 	ldw	r3,-16(fp)
 84109ec:	00800044 	movi	r2,1
 84109f0:	10c4983a 	sll	r2,r2,r3
 84109f4:	0084303a 	nor	r2,zero,r2
 84109f8:	1007883a 	mov	r3,r2
 84109fc:	00821074 	movhi	r2,2113
 8410a00:	10956804 	addi	r2,r2,21920
 8410a04:	10800017 	ldw	r2,0(r2)
 8410a08:	1886703a 	and	r3,r3,r2
 8410a0c:	00821074 	movhi	r2,2113
 8410a10:	10956804 	addi	r2,r2,21920
 8410a14:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 8410a18:	00821074 	movhi	r2,2113
 8410a1c:	10956804 	addi	r2,r2,21920
 8410a20:	10800017 	ldw	r2,0(r2)
 8410a24:	100170fa 	wrctl	ienable,r2
 8410a28:	e0bffd17 	ldw	r2,-12(fp)
 8410a2c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8410a30:	e0bffa17 	ldw	r2,-24(fp)
 8410a34:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 8410a38:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
 8410a3c:	e037883a 	mov	sp,fp
 8410a40:	df000017 	ldw	fp,0(sp)
 8410a44:	dec00104 	addi	sp,sp,4
 8410a48:	f800283a 	ret

08410a4c <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
 8410a4c:	defffc04 	addi	sp,sp,-16
 8410a50:	df000315 	stw	fp,12(sp)
 8410a54:	df000304 	addi	fp,sp,12
 8410a58:	e13ffe15 	stw	r4,-8(fp)
 8410a5c:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
 8410a60:	000530fa 	rdctl	r2,ienable
 8410a64:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
 8410a68:	e0ffff17 	ldw	r3,-4(fp)
 8410a6c:	00800044 	movi	r2,1
 8410a70:	10c4983a 	sll	r2,r2,r3
 8410a74:	1007883a 	mov	r3,r2
 8410a78:	e0bffd17 	ldw	r2,-12(fp)
 8410a7c:	1884703a 	and	r2,r3,r2
 8410a80:	1004c03a 	cmpne	r2,r2,zero
}
 8410a84:	e037883a 	mov	sp,fp
 8410a88:	df000017 	ldw	fp,0(sp)
 8410a8c:	dec00104 	addi	sp,sp,4
 8410a90:	f800283a 	ret

08410a94 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 8410a94:	defff404 	addi	sp,sp,-48
 8410a98:	dfc00b15 	stw	ra,44(sp)
 8410a9c:	df000a15 	stw	fp,40(sp)
 8410aa0:	df000a04 	addi	fp,sp,40
 8410aa4:	e13ffb15 	stw	r4,-20(fp)
 8410aa8:	e17ffc15 	stw	r5,-16(fp)
 8410aac:	e1bffd15 	stw	r6,-12(fp)
 8410ab0:	e1fffe15 	stw	r7,-8(fp)
  int rc = -EINVAL;  
 8410ab4:	00bffa84 	movi	r2,-22
 8410ab8:	e0bffa15 	stw	r2,-24(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
 8410abc:	e0bffc17 	ldw	r2,-16(fp)
 8410ac0:	e0bff915 	stw	r2,-28(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 8410ac4:	e0bff917 	ldw	r2,-28(fp)
 8410ac8:	10800808 	cmpgei	r2,r2,32
 8410acc:	1000291e 	bne	r2,zero,8410b74 <alt_iic_isr_register+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8410ad0:	0005303a 	rdctl	r2,status
 8410ad4:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8410ad8:	e0fff717 	ldw	r3,-36(fp)
 8410adc:	00bfff84 	movi	r2,-2
 8410ae0:	1884703a 	and	r2,r3,r2
 8410ae4:	1001703a 	wrctl	status,r2
  
  return context;
 8410ae8:	e0bff717 	ldw	r2,-36(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
 8410aec:	e0bff815 	stw	r2,-32(fp)

    alt_irq[id].handler = isr;
 8410af0:	e0bff917 	ldw	r2,-28(fp)
 8410af4:	00c21074 	movhi	r3,2113
 8410af8:	18d57504 	addi	r3,r3,21972
 8410afc:	100490fa 	slli	r2,r2,3
 8410b00:	10c7883a 	add	r3,r2,r3
 8410b04:	e0bffd17 	ldw	r2,-12(fp)
 8410b08:	18800015 	stw	r2,0(r3)
    alt_irq[id].context = isr_context;
 8410b0c:	e0bff917 	ldw	r2,-28(fp)
 8410b10:	00c21074 	movhi	r3,2113
 8410b14:	18d57504 	addi	r3,r3,21972
 8410b18:	100490fa 	slli	r2,r2,3
 8410b1c:	10c5883a 	add	r2,r2,r3
 8410b20:	10c00104 	addi	r3,r2,4
 8410b24:	e0bffe17 	ldw	r2,-8(fp)
 8410b28:	18800015 	stw	r2,0(r3)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
 8410b2c:	e0bffd17 	ldw	r2,-12(fp)
 8410b30:	1005003a 	cmpeq	r2,r2,zero
 8410b34:	1000051e 	bne	r2,zero,8410b4c <alt_iic_isr_register+0xb8>
 8410b38:	e17ff917 	ldw	r5,-28(fp)
 8410b3c:	e13ffb17 	ldw	r4,-20(fp)
 8410b40:	84109100 	call	8410910 <alt_ic_irq_enable>
 8410b44:	e0bfff15 	stw	r2,-4(fp)
 8410b48:	00000406 	br	8410b5c <alt_iic_isr_register+0xc8>
 8410b4c:	e17ff917 	ldw	r5,-28(fp)
 8410b50:	e13ffb17 	ldw	r4,-20(fp)
 8410b54:	84109ac0 	call	84109ac <alt_ic_irq_disable>
 8410b58:	e0bfff15 	stw	r2,-4(fp)
 8410b5c:	e0bfff17 	ldw	r2,-4(fp)
 8410b60:	e0bffa15 	stw	r2,-24(fp)
 8410b64:	e0bff817 	ldw	r2,-32(fp)
 8410b68:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8410b6c:	e0bff617 	ldw	r2,-40(fp)
 8410b70:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
 8410b74:	e0bffa17 	ldw	r2,-24(fp)
}
 8410b78:	e037883a 	mov	sp,fp
 8410b7c:	dfc00117 	ldw	ra,4(sp)
 8410b80:	df000017 	ldw	fp,0(sp)
 8410b84:	dec00204 	addi	sp,sp,8
 8410b88:	f800283a 	ret

08410b8c <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
 8410b8c:	defff904 	addi	sp,sp,-28
 8410b90:	dfc00615 	stw	ra,24(sp)
 8410b94:	df000515 	stw	fp,20(sp)
 8410b98:	df000504 	addi	fp,sp,20
 8410b9c:	e13ffc15 	stw	r4,-16(fp)
 8410ba0:	e17ffd15 	stw	r5,-12(fp)
 8410ba4:	e1bffe15 	stw	r6,-8(fp)
 8410ba8:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
 8410bac:	e13ffd17 	ldw	r4,-12(fp)
 8410bb0:	e17ffe17 	ldw	r5,-8(fp)
 8410bb4:	e1bfff17 	ldw	r6,-4(fp)
 8410bb8:	8410da40 	call	8410da4 <open>
 8410bbc:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
 8410bc0:	e0bffb17 	ldw	r2,-20(fp)
 8410bc4:	1004803a 	cmplt	r2,r2,zero
 8410bc8:	10001c1e 	bne	r2,zero,8410c3c <alt_open_fd+0xb0>
  {
    fd->dev      = alt_fd_list[old].dev;
 8410bcc:	e0bffb17 	ldw	r2,-20(fp)
 8410bd0:	00c21074 	movhi	r3,2113
 8410bd4:	18c98504 	addi	r3,r3,9748
 8410bd8:	10800324 	muli	r2,r2,12
 8410bdc:	10c5883a 	add	r2,r2,r3
 8410be0:	10c00017 	ldw	r3,0(r2)
 8410be4:	e0bffc17 	ldw	r2,-16(fp)
 8410be8:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
 8410bec:	e0bffb17 	ldw	r2,-20(fp)
 8410bf0:	00c21074 	movhi	r3,2113
 8410bf4:	18c98504 	addi	r3,r3,9748
 8410bf8:	10800324 	muli	r2,r2,12
 8410bfc:	10c5883a 	add	r2,r2,r3
 8410c00:	10800104 	addi	r2,r2,4
 8410c04:	10c00017 	ldw	r3,0(r2)
 8410c08:	e0bffc17 	ldw	r2,-16(fp)
 8410c0c:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 8410c10:	e0bffb17 	ldw	r2,-20(fp)
 8410c14:	00c21074 	movhi	r3,2113
 8410c18:	18c98504 	addi	r3,r3,9748
 8410c1c:	10800324 	muli	r2,r2,12
 8410c20:	10c5883a 	add	r2,r2,r3
 8410c24:	10800204 	addi	r2,r2,8
 8410c28:	10c00017 	ldw	r3,0(r2)
 8410c2c:	e0bffc17 	ldw	r2,-16(fp)
 8410c30:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
 8410c34:	e13ffb17 	ldw	r4,-20(fp)
 8410c38:	840d6c40 	call	840d6c4 <alt_release_fd>
  }
} 
 8410c3c:	e037883a 	mov	sp,fp
 8410c40:	dfc00117 	ldw	ra,4(sp)
 8410c44:	df000017 	ldw	fp,0(sp)
 8410c48:	dec00204 	addi	sp,sp,8
 8410c4c:	f800283a 	ret

08410c50 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 8410c50:	defffb04 	addi	sp,sp,-20
 8410c54:	dfc00415 	stw	ra,16(sp)
 8410c58:	df000315 	stw	fp,12(sp)
 8410c5c:	df000304 	addi	fp,sp,12
 8410c60:	e13ffd15 	stw	r4,-12(fp)
 8410c64:	e17ffe15 	stw	r5,-8(fp)
 8410c68:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 8410c6c:	01021074 	movhi	r4,2113
 8410c70:	21098804 	addi	r4,r4,9760
 8410c74:	e17ffd17 	ldw	r5,-12(fp)
 8410c78:	01800044 	movi	r6,1
 8410c7c:	01c07fc4 	movi	r7,511
 8410c80:	8410b8c0 	call	8410b8c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 8410c84:	01021074 	movhi	r4,2113
 8410c88:	21098504 	addi	r4,r4,9748
 8410c8c:	e17ffe17 	ldw	r5,-8(fp)
 8410c90:	000d883a 	mov	r6,zero
 8410c94:	01c07fc4 	movi	r7,511
 8410c98:	8410b8c0 	call	8410b8c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 8410c9c:	01021074 	movhi	r4,2113
 8410ca0:	21098b04 	addi	r4,r4,9772
 8410ca4:	e17fff17 	ldw	r5,-4(fp)
 8410ca8:	01800044 	movi	r6,1
 8410cac:	01c07fc4 	movi	r7,511
 8410cb0:	8410b8c0 	call	8410b8c <alt_open_fd>
}  
 8410cb4:	e037883a 	mov	sp,fp
 8410cb8:	dfc00117 	ldw	ra,4(sp)
 8410cbc:	df000017 	ldw	fp,0(sp)
 8410cc0:	dec00204 	addi	sp,sp,8
 8410cc4:	f800283a 	ret

08410cc8 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
 8410cc8:	defffc04 	addi	sp,sp,-16
 8410ccc:	df000315 	stw	fp,12(sp)
 8410cd0:	df000304 	addi	fp,sp,12
 8410cd4:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 8410cd8:	e0bffe17 	ldw	r2,-8(fp)
 8410cdc:	10800217 	ldw	r2,8(r2)
 8410ce0:	10d00034 	orhi	r3,r2,16384
 8410ce4:	e0bffe17 	ldw	r2,-8(fp)
 8410ce8:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 8410cec:	e03ffd15 	stw	zero,-12(fp)
 8410cf0:	00002006 	br	8410d74 <alt_file_locked+0xac>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 8410cf4:	e0bffd17 	ldw	r2,-12(fp)
 8410cf8:	00c21074 	movhi	r3,2113
 8410cfc:	18c98504 	addi	r3,r3,9748
 8410d00:	10800324 	muli	r2,r2,12
 8410d04:	10c5883a 	add	r2,r2,r3
 8410d08:	10c00017 	ldw	r3,0(r2)
 8410d0c:	e0bffe17 	ldw	r2,-8(fp)
 8410d10:	10800017 	ldw	r2,0(r2)
 8410d14:	1880141e 	bne	r3,r2,8410d68 <alt_file_locked+0xa0>
 8410d18:	e0bffd17 	ldw	r2,-12(fp)
 8410d1c:	00c21074 	movhi	r3,2113
 8410d20:	18c98504 	addi	r3,r3,9748
 8410d24:	10800324 	muli	r2,r2,12
 8410d28:	10c5883a 	add	r2,r2,r3
 8410d2c:	10800204 	addi	r2,r2,8
 8410d30:	10800017 	ldw	r2,0(r2)
 8410d34:	1004403a 	cmpge	r2,r2,zero
 8410d38:	10000b1e 	bne	r2,zero,8410d68 <alt_file_locked+0xa0>
 8410d3c:	e0bffd17 	ldw	r2,-12(fp)
 8410d40:	10800324 	muli	r2,r2,12
 8410d44:	1007883a 	mov	r3,r2
 8410d48:	00821074 	movhi	r2,2113
 8410d4c:	10898504 	addi	r2,r2,9748
 8410d50:	1887883a 	add	r3,r3,r2
 8410d54:	e0bffe17 	ldw	r2,-8(fp)
 8410d58:	18800326 	beq	r3,r2,8410d68 <alt_file_locked+0xa0>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
 8410d5c:	00bffcc4 	movi	r2,-13
 8410d60:	e0bfff15 	stw	r2,-4(fp)
 8410d64:	00000a06 	br	8410d90 <alt_file_locked+0xc8>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 8410d68:	e0bffd17 	ldw	r2,-12(fp)
 8410d6c:	10800044 	addi	r2,r2,1
 8410d70:	e0bffd15 	stw	r2,-12(fp)
 8410d74:	00821074 	movhi	r2,2113
 8410d78:	108e5c04 	addi	r2,r2,14704
 8410d7c:	10800017 	ldw	r2,0(r2)
 8410d80:	1007883a 	mov	r3,r2
 8410d84:	e0bffd17 	ldw	r2,-12(fp)
 8410d88:	18bfda2e 	bgeu	r3,r2,8410cf4 <alt_file_locked+0x2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
 8410d8c:	e03fff15 	stw	zero,-4(fp)
 8410d90:	e0bfff17 	ldw	r2,-4(fp)
}
 8410d94:	e037883a 	mov	sp,fp
 8410d98:	df000017 	ldw	fp,0(sp)
 8410d9c:	dec00104 	addi	sp,sp,4
 8410da0:	f800283a 	ret

08410da4 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 8410da4:	defff404 	addi	sp,sp,-48
 8410da8:	dfc00b15 	stw	ra,44(sp)
 8410dac:	df000a15 	stw	fp,40(sp)
 8410db0:	df000a04 	addi	fp,sp,40
 8410db4:	e13ffb15 	stw	r4,-20(fp)
 8410db8:	e17ffc15 	stw	r5,-16(fp)
 8410dbc:	e1bffd15 	stw	r6,-12(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
 8410dc0:	00bfffc4 	movi	r2,-1
 8410dc4:	e0bff815 	stw	r2,-32(fp)
  int status = -ENODEV;
 8410dc8:	00bffb44 	movi	r2,-19
 8410dcc:	e0bff715 	stw	r2,-36(fp)
  int isafs = 0;
 8410dd0:	e03ff615 	stw	zero,-40(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 8410dd4:	e13ffb17 	ldw	r4,-20(fp)
 8410dd8:	01421074 	movhi	r5,2113
 8410ddc:	294e5a04 	addi	r5,r5,14696
 8410de0:	84107fc0 	call	84107fc <alt_find_dev>
 8410de4:	e0bffa15 	stw	r2,-24(fp)
 8410de8:	e0bffa17 	ldw	r2,-24(fp)
 8410dec:	1004c03a 	cmpne	r2,r2,zero
 8410df0:	1000051e 	bne	r2,zero,8410e08 <open+0x64>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 8410df4:	e13ffb17 	ldw	r4,-20(fp)
 8410df8:	84111500 	call	8411150 <alt_find_file>
 8410dfc:	e0bffa15 	stw	r2,-24(fp)
    isafs = 1;
 8410e00:	00800044 	movi	r2,1
 8410e04:	e0bff615 	stw	r2,-40(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 8410e08:	e0bffa17 	ldw	r2,-24(fp)
 8410e0c:	1005003a 	cmpeq	r2,r2,zero
 8410e10:	1000301e 	bne	r2,zero,8410ed4 <open+0x130>
  {
    if ((index = alt_get_fd (dev)) < 0)
 8410e14:	e13ffa17 	ldw	r4,-24(fp)
 8410e18:	84112700 	call	8411270 <alt_get_fd>
 8410e1c:	e0bff815 	stw	r2,-32(fp)
 8410e20:	e0bff817 	ldw	r2,-32(fp)
 8410e24:	1004403a 	cmpge	r2,r2,zero
 8410e28:	1000031e 	bne	r2,zero,8410e38 <open+0x94>
    {
      status = index;
 8410e2c:	e0bff817 	ldw	r2,-32(fp)
 8410e30:	e0bff715 	stw	r2,-36(fp)
 8410e34:	00002906 	br	8410edc <open+0x138>
    }
    else
    {
      fd = &alt_fd_list[index];
 8410e38:	e0bff817 	ldw	r2,-32(fp)
 8410e3c:	10800324 	muli	r2,r2,12
 8410e40:	1007883a 	mov	r3,r2
 8410e44:	00821074 	movhi	r2,2113
 8410e48:	10898504 	addi	r2,r2,9748
 8410e4c:	1885883a 	add	r2,r3,r2
 8410e50:	e0bff915 	stw	r2,-28(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 8410e54:	e0fffc17 	ldw	r3,-16(fp)
 8410e58:	00900034 	movhi	r2,16384
 8410e5c:	10bfffc4 	addi	r2,r2,-1
 8410e60:	1886703a 	and	r3,r3,r2
 8410e64:	e0bff917 	ldw	r2,-28(fp)
 8410e68:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
 8410e6c:	e0bff617 	ldw	r2,-40(fp)
 8410e70:	1004c03a 	cmpne	r2,r2,zero
 8410e74:	1000061e 	bne	r2,zero,8410e90 <open+0xec>
 8410e78:	e13ff917 	ldw	r4,-28(fp)
 8410e7c:	8410cc80 	call	8410cc8 <alt_file_locked>
 8410e80:	e0bff715 	stw	r2,-36(fp)
 8410e84:	e0bff717 	ldw	r2,-36(fp)
 8410e88:	1004803a 	cmplt	r2,r2,zero
 8410e8c:	1000131e 	bne	r2,zero,8410edc <open+0x138>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 8410e90:	e0bffa17 	ldw	r2,-24(fp)
 8410e94:	10800317 	ldw	r2,12(r2)
 8410e98:	1005003a 	cmpeq	r2,r2,zero
 8410e9c:	1000091e 	bne	r2,zero,8410ec4 <open+0x120>
 8410ea0:	e0bffa17 	ldw	r2,-24(fp)
 8410ea4:	10800317 	ldw	r2,12(r2)
 8410ea8:	e13ff917 	ldw	r4,-28(fp)
 8410eac:	e17ffb17 	ldw	r5,-20(fp)
 8410eb0:	e1bffc17 	ldw	r6,-16(fp)
 8410eb4:	e1fffd17 	ldw	r7,-12(fp)
 8410eb8:	103ee83a 	callr	r2
 8410ebc:	e0bfff15 	stw	r2,-4(fp)
 8410ec0:	00000106 	br	8410ec8 <open+0x124>
 8410ec4:	e03fff15 	stw	zero,-4(fp)
 8410ec8:	e0bfff17 	ldw	r2,-4(fp)
 8410ecc:	e0bff715 	stw	r2,-36(fp)
 8410ed0:	00000206 	br	8410edc <open+0x138>
      }
    }
  }
  else
  {
    status = -ENODEV;
 8410ed4:	00bffb44 	movi	r2,-19
 8410ed8:	e0bff715 	stw	r2,-36(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 8410edc:	e0bff717 	ldw	r2,-36(fp)
 8410ee0:	1004403a 	cmpge	r2,r2,zero
 8410ee4:	1000091e 	bne	r2,zero,8410f0c <open+0x168>
  {
    alt_release_fd (index);  
 8410ee8:	e13ff817 	ldw	r4,-32(fp)
 8410eec:	840d6c40 	call	840d6c4 <alt_release_fd>
    ALT_ERRNO = -status;
 8410ef0:	8410f2c0 	call	8410f2c <alt_get_errno>
 8410ef4:	e0fff717 	ldw	r3,-36(fp)
 8410ef8:	00c7c83a 	sub	r3,zero,r3
 8410efc:	10c00015 	stw	r3,0(r2)
    return -1;
 8410f00:	00bfffc4 	movi	r2,-1
 8410f04:	e0bffe15 	stw	r2,-8(fp)
 8410f08:	00000206 	br	8410f14 <open+0x170>
  }
  
  /* return the reference upon success */

  return index;
 8410f0c:	e0bff817 	ldw	r2,-32(fp)
 8410f10:	e0bffe15 	stw	r2,-8(fp)
 8410f14:	e0bffe17 	ldw	r2,-8(fp)
}
 8410f18:	e037883a 	mov	sp,fp
 8410f1c:	dfc00117 	ldw	ra,4(sp)
 8410f20:	df000017 	ldw	fp,0(sp)
 8410f24:	dec00204 	addi	sp,sp,8
 8410f28:	f800283a 	ret

08410f2c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 8410f2c:	defffd04 	addi	sp,sp,-12
 8410f30:	dfc00215 	stw	ra,8(sp)
 8410f34:	df000115 	stw	fp,4(sp)
 8410f38:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 8410f3c:	00821074 	movhi	r2,2113
 8410f40:	108e5d04 	addi	r2,r2,14708
 8410f44:	10800017 	ldw	r2,0(r2)
 8410f48:	1005003a 	cmpeq	r2,r2,zero
 8410f4c:	1000061e 	bne	r2,zero,8410f68 <alt_get_errno+0x3c>
 8410f50:	00821074 	movhi	r2,2113
 8410f54:	108e5d04 	addi	r2,r2,14708
 8410f58:	10800017 	ldw	r2,0(r2)
 8410f5c:	103ee83a 	callr	r2
 8410f60:	e0bfff15 	stw	r2,-4(fp)
 8410f64:	00000306 	br	8410f74 <alt_get_errno+0x48>
 8410f68:	00821074 	movhi	r2,2113
 8410f6c:	10956404 	addi	r2,r2,21904
 8410f70:	e0bfff15 	stw	r2,-4(fp)
 8410f74:	e0bfff17 	ldw	r2,-4(fp)
}
 8410f78:	e037883a 	mov	sp,fp
 8410f7c:	dfc00117 	ldw	ra,4(sp)
 8410f80:	df000017 	ldw	fp,0(sp)
 8410f84:	dec00204 	addi	sp,sp,8
 8410f88:	f800283a 	ret

08410f8c <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
 8410f8c:	defffa04 	addi	sp,sp,-24
 8410f90:	df000515 	stw	fp,20(sp)
 8410f94:	df000504 	addi	fp,sp,20
 8410f98:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8410f9c:	0005303a 	rdctl	r2,status
 8410fa0:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8410fa4:	e0fffd17 	ldw	r3,-12(fp)
 8410fa8:	00bfff84 	movi	r2,-2
 8410fac:	1884703a 	and	r2,r3,r2
 8410fb0:	1001703a 	wrctl	status,r2
  
  return context;
 8410fb4:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
 8410fb8:	e0bffe15 	stw	r2,-8(fp)
  alt_llist_remove (&alarm->llist);
 8410fbc:	e0bfff17 	ldw	r2,-4(fp)
 8410fc0:	e0bffc15 	stw	r2,-16(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 8410fc4:	e0bffc17 	ldw	r2,-16(fp)
 8410fc8:	10c00017 	ldw	r3,0(r2)
 8410fcc:	e0bffc17 	ldw	r2,-16(fp)
 8410fd0:	10800117 	ldw	r2,4(r2)
 8410fd4:	18800115 	stw	r2,4(r3)
  entry->previous->next = entry->next;
 8410fd8:	e0bffc17 	ldw	r2,-16(fp)
 8410fdc:	10c00117 	ldw	r3,4(r2)
 8410fe0:	e0bffc17 	ldw	r2,-16(fp)
 8410fe4:	10800017 	ldw	r2,0(r2)
 8410fe8:	18800015 	stw	r2,0(r3)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 8410fec:	e0fffc17 	ldw	r3,-16(fp)
 8410ff0:	e0bffc17 	ldw	r2,-16(fp)
 8410ff4:	18800115 	stw	r2,4(r3)
  entry->next     = entry;
 8410ff8:	e0fffc17 	ldw	r3,-16(fp)
 8410ffc:	e0bffc17 	ldw	r2,-16(fp)
 8411000:	18800015 	stw	r2,0(r3)
 8411004:	e0bffe17 	ldw	r2,-8(fp)
 8411008:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 841100c:	e0bffb17 	ldw	r2,-20(fp)
 8411010:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
 8411014:	e037883a 	mov	sp,fp
 8411018:	df000017 	ldw	fp,0(sp)
 841101c:	dec00104 	addi	sp,sp,4
 8411020:	f800283a 	ret

08411024 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 8411024:	defffb04 	addi	sp,sp,-20
 8411028:	dfc00415 	stw	ra,16(sp)
 841102c:	df000315 	stw	fp,12(sp)
 8411030:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 8411034:	d0a01617 	ldw	r2,-32680(gp)
 8411038:	e0bffe15 	stw	r2,-8(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 841103c:	d0a71c17 	ldw	r2,-25488(gp)
 8411040:	10800044 	addi	r2,r2,1
 8411044:	d0a71c15 	stw	r2,-25488(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 8411048:	00003106 	br	8411110 <alt_tick+0xec>
  {
    next = (alt_alarm*) alarm->llist.next;
 841104c:	e0bffe17 	ldw	r2,-8(fp)
 8411050:	10800017 	ldw	r2,0(r2)
 8411054:	e0bfff15 	stw	r2,-4(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 8411058:	e0bffe17 	ldw	r2,-8(fp)
 841105c:	10800403 	ldbu	r2,16(r2)
 8411060:	10803fcc 	andi	r2,r2,255
 8411064:	1005003a 	cmpeq	r2,r2,zero
 8411068:	1000051e 	bne	r2,zero,8411080 <alt_tick+0x5c>
 841106c:	d0a71c17 	ldw	r2,-25488(gp)
 8411070:	1004c03a 	cmpne	r2,r2,zero
 8411074:	1000021e 	bne	r2,zero,8411080 <alt_tick+0x5c>
    {
      alarm->rollover = 0;
 8411078:	e0bffe17 	ldw	r2,-8(fp)
 841107c:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 8411080:	e0bffe17 	ldw	r2,-8(fp)
 8411084:	10c00217 	ldw	r3,8(r2)
 8411088:	d0a71c17 	ldw	r2,-25488(gp)
 841108c:	10c01e36 	bltu	r2,r3,8411108 <alt_tick+0xe4>
 8411090:	e0bffe17 	ldw	r2,-8(fp)
 8411094:	10800403 	ldbu	r2,16(r2)
 8411098:	10803fcc 	andi	r2,r2,255
 841109c:	1004c03a 	cmpne	r2,r2,zero
 84110a0:	1000191e 	bne	r2,zero,8411108 <alt_tick+0xe4>
    {
      next_callback = alarm->callback (alarm->context);
 84110a4:	e0bffe17 	ldw	r2,-8(fp)
 84110a8:	10c00317 	ldw	r3,12(r2)
 84110ac:	e0bffe17 	ldw	r2,-8(fp)
 84110b0:	11000517 	ldw	r4,20(r2)
 84110b4:	183ee83a 	callr	r3
 84110b8:	e0bffd15 	stw	r2,-12(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 84110bc:	e0bffd17 	ldw	r2,-12(fp)
 84110c0:	1004c03a 	cmpne	r2,r2,zero
 84110c4:	1000031e 	bne	r2,zero,84110d4 <alt_tick+0xb0>
      {
        alt_alarm_stop (alarm);
 84110c8:	e13ffe17 	ldw	r4,-8(fp)
 84110cc:	8410f8c0 	call	8410f8c <alt_alarm_stop>
 84110d0:	00000d06 	br	8411108 <alt_tick+0xe4>
      }
      else
      {
        alarm->time += next_callback;
 84110d4:	e0bffe17 	ldw	r2,-8(fp)
 84110d8:	10c00217 	ldw	r3,8(r2)
 84110dc:	e0bffd17 	ldw	r2,-12(fp)
 84110e0:	1887883a 	add	r3,r3,r2
 84110e4:	e0bffe17 	ldw	r2,-8(fp)
 84110e8:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 84110ec:	e0bffe17 	ldw	r2,-8(fp)
 84110f0:	10c00217 	ldw	r3,8(r2)
 84110f4:	d0a71c17 	ldw	r2,-25488(gp)
 84110f8:	1880032e 	bgeu	r3,r2,8411108 <alt_tick+0xe4>
        {
          alarm->rollover = 1;
 84110fc:	e0fffe17 	ldw	r3,-8(fp)
 8411100:	00800044 	movi	r2,1
 8411104:	18800405 	stb	r2,16(r3)
        }
      }
    }
    alarm = next;
 8411108:	e0bfff17 	ldw	r2,-4(fp)
 841110c:	e0bffe15 	stw	r2,-8(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 8411110:	d0e01604 	addi	r3,gp,-32680
 8411114:	e0bffe17 	ldw	r2,-8(fp)
 8411118:	10ffcc1e 	bne	r2,r3,841104c <alt_tick+0x28>
  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
}
 841111c:	e037883a 	mov	sp,fp
 8411120:	dfc00117 	ldw	ra,4(sp)
 8411124:	df000017 	ldw	fp,0(sp)
 8411128:	dec00204 	addi	sp,sp,8
 841112c:	f800283a 	ret

08411130 <altera_nios2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_irq_init(void) 
{
 8411130:	deffff04 	addi	sp,sp,-4
 8411134:	df000015 	stw	fp,0(sp)
 8411138:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 841113c:	000170fa 	wrctl	ienable,zero
}
 8411140:	e037883a 	mov	sp,fp
 8411144:	df000017 	ldw	fp,0(sp)
 8411148:	dec00104 	addi	sp,sp,4
 841114c:	f800283a 	ret

08411150 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 8411150:	defffa04 	addi	sp,sp,-24
 8411154:	dfc00515 	stw	ra,20(sp)
 8411158:	df000415 	stw	fp,16(sp)
 841115c:	df000404 	addi	fp,sp,16
 8411160:	e13ffe15 	stw	r4,-8(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 8411164:	00821074 	movhi	r2,2113
 8411168:	108e5804 	addi	r2,r2,14688
 841116c:	10800017 	ldw	r2,0(r2)
 8411170:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 8411174:	00003306 	br	8411244 <alt_find_file+0xf4>
  {
    len = strlen(next->name);
 8411178:	e0bffd17 	ldw	r2,-12(fp)
 841117c:	11000217 	ldw	r4,8(r2)
 8411180:	8404e480 	call	8404e48 <strlen>
 8411184:	e0bffc15 	stw	r2,-16(fp)
    
    if (next->name[len-1] == '/')
 8411188:	e0bffd17 	ldw	r2,-12(fp)
 841118c:	10c00217 	ldw	r3,8(r2)
 8411190:	e0bffc17 	ldw	r2,-16(fp)
 8411194:	1885883a 	add	r2,r3,r2
 8411198:	10bfffc4 	addi	r2,r2,-1
 841119c:	10800003 	ldbu	r2,0(r2)
 84111a0:	10803fcc 	andi	r2,r2,255
 84111a4:	1080201c 	xori	r2,r2,128
 84111a8:	10bfe004 	addi	r2,r2,-128
 84111ac:	10800bd8 	cmpnei	r2,r2,47
 84111b0:	1000031e 	bne	r2,zero,84111c0 <alt_find_file+0x70>
    {
      len -= 1;
 84111b4:	e0bffc17 	ldw	r2,-16(fp)
 84111b8:	10bfffc4 	addi	r2,r2,-1
 84111bc:	e0bffc15 	stw	r2,-16(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 84111c0:	e0bffc17 	ldw	r2,-16(fp)
 84111c4:	1007883a 	mov	r3,r2
 84111c8:	e0bffe17 	ldw	r2,-8(fp)
 84111cc:	1885883a 	add	r2,r3,r2
 84111d0:	10800003 	ldbu	r2,0(r2)
 84111d4:	10803fcc 	andi	r2,r2,255
 84111d8:	1080201c 	xori	r2,r2,128
 84111dc:	10bfe004 	addi	r2,r2,-128
 84111e0:	10800be0 	cmpeqi	r2,r2,47
 84111e4:	10000a1e 	bne	r2,zero,8411210 <alt_find_file+0xc0>
 84111e8:	e0bffc17 	ldw	r2,-16(fp)
 84111ec:	1007883a 	mov	r3,r2
 84111f0:	e0bffe17 	ldw	r2,-8(fp)
 84111f4:	1885883a 	add	r2,r3,r2
 84111f8:	10800003 	ldbu	r2,0(r2)
 84111fc:	10803fcc 	andi	r2,r2,255
 8411200:	1080201c 	xori	r2,r2,128
 8411204:	10bfe004 	addi	r2,r2,-128
 8411208:	1004c03a 	cmpne	r2,r2,zero
 841120c:	10000a1e 	bne	r2,zero,8411238 <alt_find_file+0xe8>
 8411210:	e0bffd17 	ldw	r2,-12(fp)
 8411214:	11000217 	ldw	r4,8(r2)
 8411218:	e1bffc17 	ldw	r6,-16(fp)
 841121c:	e17ffe17 	ldw	r5,-8(fp)
 8411220:	84114040 	call	8411404 <memcmp>
 8411224:	1004c03a 	cmpne	r2,r2,zero
 8411228:	1000031e 	bne	r2,zero,8411238 <alt_find_file+0xe8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
 841122c:	e0bffd17 	ldw	r2,-12(fp)
 8411230:	e0bfff15 	stw	r2,-4(fp)
 8411234:	00000806 	br	8411258 <alt_find_file+0x108>
    }
    next = (alt_dev*) next->llist.next;
 8411238:	e0bffd17 	ldw	r2,-12(fp)
 841123c:	10800017 	ldw	r2,0(r2)
 8411240:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 8411244:	00c21074 	movhi	r3,2113
 8411248:	18ce5804 	addi	r3,r3,14688
 841124c:	e0bffd17 	ldw	r2,-12(fp)
 8411250:	10ffc91e 	bne	r2,r3,8411178 <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
 8411254:	e03fff15 	stw	zero,-4(fp)
 8411258:	e0bfff17 	ldw	r2,-4(fp)
}
 841125c:	e037883a 	mov	sp,fp
 8411260:	dfc00117 	ldw	ra,4(sp)
 8411264:	df000017 	ldw	fp,0(sp)
 8411268:	dec00204 	addi	sp,sp,8
 841126c:	f800283a 	ret

08411270 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 8411270:	defffc04 	addi	sp,sp,-16
 8411274:	df000315 	stw	fp,12(sp)
 8411278:	df000304 	addi	fp,sp,12
 841127c:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
 8411280:	00bffa04 	movi	r2,-24
 8411284:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 8411288:	e03ffe15 	stw	zero,-8(fp)
 841128c:	00001e06 	br	8411308 <alt_get_fd+0x98>
  {
    if (!alt_fd_list[i].dev)
 8411290:	e0bffe17 	ldw	r2,-8(fp)
 8411294:	00c21074 	movhi	r3,2113
 8411298:	18c98504 	addi	r3,r3,9748
 841129c:	10800324 	muli	r2,r2,12
 84112a0:	10c5883a 	add	r2,r2,r3
 84112a4:	10800017 	ldw	r2,0(r2)
 84112a8:	1004c03a 	cmpne	r2,r2,zero
 84112ac:	1000131e 	bne	r2,zero,84112fc <alt_get_fd+0x8c>
    {
      alt_fd_list[i].dev = dev;
 84112b0:	e0bffe17 	ldw	r2,-8(fp)
 84112b4:	00c21074 	movhi	r3,2113
 84112b8:	18c98504 	addi	r3,r3,9748
 84112bc:	10800324 	muli	r2,r2,12
 84112c0:	10c7883a 	add	r3,r2,r3
 84112c4:	e0bfff17 	ldw	r2,-4(fp)
 84112c8:	18800015 	stw	r2,0(r3)
      if (i > alt_max_fd)
 84112cc:	00821074 	movhi	r2,2113
 84112d0:	108e5c04 	addi	r2,r2,14704
 84112d4:	10c00017 	ldw	r3,0(r2)
 84112d8:	e0bffe17 	ldw	r2,-8(fp)
 84112dc:	1880040e 	bge	r3,r2,84112f0 <alt_get_fd+0x80>
      {
        alt_max_fd = i;
 84112e0:	00c21074 	movhi	r3,2113
 84112e4:	18ce5c04 	addi	r3,r3,14704
 84112e8:	e0bffe17 	ldw	r2,-8(fp)
 84112ec:	18800015 	stw	r2,0(r3)
      }
      rc = i;
 84112f0:	e0bffe17 	ldw	r2,-8(fp)
 84112f4:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
 84112f8:	00000606 	br	8411314 <alt_get_fd+0xa4>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 84112fc:	e0bffe17 	ldw	r2,-8(fp)
 8411300:	10800044 	addi	r2,r2,1
 8411304:	e0bffe15 	stw	r2,-8(fp)
 8411308:	e0bffe17 	ldw	r2,-8(fp)
 841130c:	10800810 	cmplti	r2,r2,32
 8411310:	103fdf1e 	bne	r2,zero,8411290 <alt_get_fd+0x20>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
 8411314:	e0bffd17 	ldw	r2,-12(fp)
}
 8411318:	e037883a 	mov	sp,fp
 841131c:	df000017 	ldw	fp,0(sp)
 8411320:	dec00104 	addi	sp,sp,4
 8411324:	f800283a 	ret

08411328 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
 8411328:	defffb04 	addi	sp,sp,-20
 841132c:	df000415 	stw	fp,16(sp)
 8411330:	df000404 	addi	fp,sp,16
 8411334:	e13ffe15 	stw	r4,-8(fp)
 8411338:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
 841133c:	e0bfff17 	ldw	r2,-4(fp)
 8411340:	10840070 	cmpltui	r2,r2,4097
 8411344:	1000021e 	bne	r2,zero,8411350 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
 8411348:	00840004 	movi	r2,4096
 841134c:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
 8411350:	e0fffe17 	ldw	r3,-8(fp)
 8411354:	e0bfff17 	ldw	r2,-4(fp)
 8411358:	1885883a 	add	r2,r3,r2
 841135c:	e0bffc15 	stw	r2,-16(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 8411360:	e0bffe17 	ldw	r2,-8(fp)
 8411364:	e0bffd15 	stw	r2,-12(fp)
 8411368:	00000506 	br	8411380 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
 841136c:	e0bffd17 	ldw	r2,-12(fp)
 8411370:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 8411374:	e0bffd17 	ldw	r2,-12(fp)
 8411378:	10800804 	addi	r2,r2,32
 841137c:	e0bffd15 	stw	r2,-12(fp)
 8411380:	e0fffd17 	ldw	r3,-12(fp)
 8411384:	e0bffc17 	ldw	r2,-16(fp)
 8411388:	18bff836 	bltu	r3,r2,841136c <alt_icache_flush+0x44>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
 841138c:	e0bffe17 	ldw	r2,-8(fp)
 8411390:	108007cc 	andi	r2,r2,31
 8411394:	1005003a 	cmpeq	r2,r2,zero
 8411398:	1000021e 	bne	r2,zero,84113a4 <alt_icache_flush+0x7c>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
 841139c:	e0bffd17 	ldw	r2,-12(fp)
 84113a0:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
 84113a4:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
 84113a8:	e037883a 	mov	sp,fp
 84113ac:	df000017 	ldw	fp,0(sp)
 84113b0:	dec00104 	addi	sp,sp,4
 84113b4:	f800283a 	ret

084113b8 <atexit>:
 84113b8:	200b883a 	mov	r5,r4
 84113bc:	000d883a 	mov	r6,zero
 84113c0:	0009883a 	mov	r4,zero
 84113c4:	000f883a 	mov	r7,zero
 84113c8:	84114781 	jmpi	8411478 <__register_exitproc>

084113cc <exit>:
 84113cc:	defffe04 	addi	sp,sp,-8
 84113d0:	000b883a 	mov	r5,zero
 84113d4:	dc000015 	stw	r16,0(sp)
 84113d8:	dfc00115 	stw	ra,4(sp)
 84113dc:	2021883a 	mov	r16,r4
 84113e0:	84115b00 	call	84115b0 <__call_exitprocs>
 84113e4:	00821074 	movhi	r2,2113
 84113e8:	108e5304 	addi	r2,r2,14668
 84113ec:	11000017 	ldw	r4,0(r2)
 84113f0:	20800f17 	ldw	r2,60(r4)
 84113f4:	10000126 	beq	r2,zero,84113fc <exit+0x30>
 84113f8:	103ee83a 	callr	r2
 84113fc:	8009883a 	mov	r4,r16
 8411400:	84117a00 	call	84117a0 <_exit>

08411404 <memcmp>:
 8411404:	00c000c4 	movi	r3,3
 8411408:	1980032e 	bgeu	r3,r6,8411418 <memcmp+0x14>
 841140c:	2144b03a 	or	r2,r4,r5
 8411410:	10c4703a 	and	r2,r2,r3
 8411414:	10000f26 	beq	r2,zero,8411454 <memcmp+0x50>
 8411418:	31ffffc4 	addi	r7,r6,-1
 841141c:	3000061e 	bne	r6,zero,8411438 <memcmp+0x34>
 8411420:	00000a06 	br	841144c <memcmp+0x48>
 8411424:	39ffffc4 	addi	r7,r7,-1
 8411428:	00bfffc4 	movi	r2,-1
 841142c:	21000044 	addi	r4,r4,1
 8411430:	29400044 	addi	r5,r5,1
 8411434:	38800526 	beq	r7,r2,841144c <memcmp+0x48>
 8411438:	20c00003 	ldbu	r3,0(r4)
 841143c:	28800003 	ldbu	r2,0(r5)
 8411440:	18bff826 	beq	r3,r2,8411424 <memcmp+0x20>
 8411444:	1885c83a 	sub	r2,r3,r2
 8411448:	f800283a 	ret
 841144c:	0005883a 	mov	r2,zero
 8411450:	f800283a 	ret
 8411454:	180f883a 	mov	r7,r3
 8411458:	20c00017 	ldw	r3,0(r4)
 841145c:	28800017 	ldw	r2,0(r5)
 8411460:	18bfed1e 	bne	r3,r2,8411418 <memcmp+0x14>
 8411464:	31bfff04 	addi	r6,r6,-4
 8411468:	21000104 	addi	r4,r4,4
 841146c:	29400104 	addi	r5,r5,4
 8411470:	39bff936 	bltu	r7,r6,8411458 <memcmp+0x54>
 8411474:	003fe806 	br	8411418 <memcmp+0x14>

08411478 <__register_exitproc>:
 8411478:	defffa04 	addi	sp,sp,-24
 841147c:	00821074 	movhi	r2,2113
 8411480:	108e5304 	addi	r2,r2,14668
 8411484:	dc000015 	stw	r16,0(sp)
 8411488:	14000017 	ldw	r16,0(r2)
 841148c:	dd000415 	stw	r20,16(sp)
 8411490:	2829883a 	mov	r20,r5
 8411494:	81405217 	ldw	r5,328(r16)
 8411498:	dcc00315 	stw	r19,12(sp)
 841149c:	dc800215 	stw	r18,8(sp)
 84114a0:	dc400115 	stw	r17,4(sp)
 84114a4:	dfc00515 	stw	ra,20(sp)
 84114a8:	2023883a 	mov	r17,r4
 84114ac:	3027883a 	mov	r19,r6
 84114b0:	3825883a 	mov	r18,r7
 84114b4:	28002526 	beq	r5,zero,841154c <__register_exitproc+0xd4>
 84114b8:	29000117 	ldw	r4,4(r5)
 84114bc:	008007c4 	movi	r2,31
 84114c0:	11002716 	blt	r2,r4,8411560 <__register_exitproc+0xe8>
 84114c4:	8800101e 	bne	r17,zero,8411508 <__register_exitproc+0x90>
 84114c8:	2105883a 	add	r2,r4,r4
 84114cc:	1085883a 	add	r2,r2,r2
 84114d0:	20c00044 	addi	r3,r4,1
 84114d4:	1145883a 	add	r2,r2,r5
 84114d8:	0009883a 	mov	r4,zero
 84114dc:	15000215 	stw	r20,8(r2)
 84114e0:	28c00115 	stw	r3,4(r5)
 84114e4:	2005883a 	mov	r2,r4
 84114e8:	dfc00517 	ldw	ra,20(sp)
 84114ec:	dd000417 	ldw	r20,16(sp)
 84114f0:	dcc00317 	ldw	r19,12(sp)
 84114f4:	dc800217 	ldw	r18,8(sp)
 84114f8:	dc400117 	ldw	r17,4(sp)
 84114fc:	dc000017 	ldw	r16,0(sp)
 8411500:	dec00604 	addi	sp,sp,24
 8411504:	f800283a 	ret
 8411508:	29802204 	addi	r6,r5,136
 841150c:	00800044 	movi	r2,1
 8411510:	110e983a 	sll	r7,r2,r4
 8411514:	30c04017 	ldw	r3,256(r6)
 8411518:	2105883a 	add	r2,r4,r4
 841151c:	1085883a 	add	r2,r2,r2
 8411520:	1185883a 	add	r2,r2,r6
 8411524:	19c6b03a 	or	r3,r3,r7
 8411528:	14802015 	stw	r18,128(r2)
 841152c:	14c00015 	stw	r19,0(r2)
 8411530:	00800084 	movi	r2,2
 8411534:	30c04015 	stw	r3,256(r6)
 8411538:	88bfe31e 	bne	r17,r2,84114c8 <__register_exitproc+0x50>
 841153c:	30804117 	ldw	r2,260(r6)
 8411540:	11c4b03a 	or	r2,r2,r7
 8411544:	30804115 	stw	r2,260(r6)
 8411548:	003fdf06 	br	84114c8 <__register_exitproc+0x50>
 841154c:	00821074 	movhi	r2,2113
 8411550:	1095b504 	addi	r2,r2,22228
 8411554:	100b883a 	mov	r5,r2
 8411558:	80805215 	stw	r2,328(r16)
 841155c:	003fd606 	br	84114b8 <__register_exitproc+0x40>
 8411560:	00800034 	movhi	r2,0
 8411564:	10800004 	addi	r2,r2,0
 8411568:	1000021e 	bne	r2,zero,8411574 <__register_exitproc+0xfc>
 841156c:	013fffc4 	movi	r4,-1
 8411570:	003fdc06 	br	84114e4 <__register_exitproc+0x6c>
 8411574:	01006404 	movi	r4,400
 8411578:	103ee83a 	callr	r2
 841157c:	1007883a 	mov	r3,r2
 8411580:	103ffa26 	beq	r2,zero,841156c <__register_exitproc+0xf4>
 8411584:	80805217 	ldw	r2,328(r16)
 8411588:	180b883a 	mov	r5,r3
 841158c:	18000115 	stw	zero,4(r3)
 8411590:	18800015 	stw	r2,0(r3)
 8411594:	80c05215 	stw	r3,328(r16)
 8411598:	18006215 	stw	zero,392(r3)
 841159c:	18006315 	stw	zero,396(r3)
 84115a0:	0009883a 	mov	r4,zero
 84115a4:	883fc826 	beq	r17,zero,84114c8 <__register_exitproc+0x50>
 84115a8:	003fd706 	br	8411508 <__register_exitproc+0x90>

084115ac <register_fini>:
 84115ac:	f800283a 	ret

084115b0 <__call_exitprocs>:
 84115b0:	00821074 	movhi	r2,2113
 84115b4:	108e5304 	addi	r2,r2,14668
 84115b8:	10800017 	ldw	r2,0(r2)
 84115bc:	defff304 	addi	sp,sp,-52
 84115c0:	df000b15 	stw	fp,44(sp)
 84115c4:	d8800115 	stw	r2,4(sp)
 84115c8:	00800034 	movhi	r2,0
 84115cc:	10800004 	addi	r2,r2,0
 84115d0:	1005003a 	cmpeq	r2,r2,zero
 84115d4:	d8800215 	stw	r2,8(sp)
 84115d8:	d8800117 	ldw	r2,4(sp)
 84115dc:	dd400815 	stw	r21,32(sp)
 84115e0:	dd000715 	stw	r20,28(sp)
 84115e4:	10805204 	addi	r2,r2,328
 84115e8:	dfc00c15 	stw	ra,48(sp)
 84115ec:	ddc00a15 	stw	r23,40(sp)
 84115f0:	dd800915 	stw	r22,36(sp)
 84115f4:	dcc00615 	stw	r19,24(sp)
 84115f8:	dc800515 	stw	r18,20(sp)
 84115fc:	dc400415 	stw	r17,16(sp)
 8411600:	dc000315 	stw	r16,12(sp)
 8411604:	282b883a 	mov	r21,r5
 8411608:	2039883a 	mov	fp,r4
 841160c:	d8800015 	stw	r2,0(sp)
 8411610:	2829003a 	cmpeq	r20,r5,zero
 8411614:	d8800117 	ldw	r2,4(sp)
 8411618:	14405217 	ldw	r17,328(r2)
 841161c:	88001026 	beq	r17,zero,8411660 <__call_exitprocs+0xb0>
 8411620:	ddc00017 	ldw	r23,0(sp)
 8411624:	88800117 	ldw	r2,4(r17)
 8411628:	8c802204 	addi	r18,r17,136
 841162c:	143fffc4 	addi	r16,r2,-1
 8411630:	80000916 	blt	r16,zero,8411658 <__call_exitprocs+0xa8>
 8411634:	05bfffc4 	movi	r22,-1
 8411638:	a000151e 	bne	r20,zero,8411690 <__call_exitprocs+0xe0>
 841163c:	8409883a 	add	r4,r16,r16
 8411640:	2105883a 	add	r2,r4,r4
 8411644:	1485883a 	add	r2,r2,r18
 8411648:	10c02017 	ldw	r3,128(r2)
 841164c:	a8c01126 	beq	r21,r3,8411694 <__call_exitprocs+0xe4>
 8411650:	843fffc4 	addi	r16,r16,-1
 8411654:	85bff81e 	bne	r16,r22,8411638 <__call_exitprocs+0x88>
 8411658:	d8800217 	ldw	r2,8(sp)
 841165c:	10003126 	beq	r2,zero,8411724 <__call_exitprocs+0x174>
 8411660:	dfc00c17 	ldw	ra,48(sp)
 8411664:	df000b17 	ldw	fp,44(sp)
 8411668:	ddc00a17 	ldw	r23,40(sp)
 841166c:	dd800917 	ldw	r22,36(sp)
 8411670:	dd400817 	ldw	r21,32(sp)
 8411674:	dd000717 	ldw	r20,28(sp)
 8411678:	dcc00617 	ldw	r19,24(sp)
 841167c:	dc800517 	ldw	r18,20(sp)
 8411680:	dc400417 	ldw	r17,16(sp)
 8411684:	dc000317 	ldw	r16,12(sp)
 8411688:	dec00d04 	addi	sp,sp,52
 841168c:	f800283a 	ret
 8411690:	8409883a 	add	r4,r16,r16
 8411694:	88c00117 	ldw	r3,4(r17)
 8411698:	2105883a 	add	r2,r4,r4
 841169c:	1445883a 	add	r2,r2,r17
 84116a0:	18ffffc4 	addi	r3,r3,-1
 84116a4:	11800217 	ldw	r6,8(r2)
 84116a8:	1c001526 	beq	r3,r16,8411700 <__call_exitprocs+0x150>
 84116ac:	10000215 	stw	zero,8(r2)
 84116b0:	303fe726 	beq	r6,zero,8411650 <__call_exitprocs+0xa0>
 84116b4:	00c00044 	movi	r3,1
 84116b8:	1c06983a 	sll	r3,r3,r16
 84116bc:	90804017 	ldw	r2,256(r18)
 84116c0:	8cc00117 	ldw	r19,4(r17)
 84116c4:	1884703a 	and	r2,r3,r2
 84116c8:	10001426 	beq	r2,zero,841171c <__call_exitprocs+0x16c>
 84116cc:	90804117 	ldw	r2,260(r18)
 84116d0:	1884703a 	and	r2,r3,r2
 84116d4:	10000c1e 	bne	r2,zero,8411708 <__call_exitprocs+0x158>
 84116d8:	2105883a 	add	r2,r4,r4
 84116dc:	1485883a 	add	r2,r2,r18
 84116e0:	11400017 	ldw	r5,0(r2)
 84116e4:	e009883a 	mov	r4,fp
 84116e8:	303ee83a 	callr	r6
 84116ec:	88800117 	ldw	r2,4(r17)
 84116f0:	98bfc81e 	bne	r19,r2,8411614 <__call_exitprocs+0x64>
 84116f4:	b8800017 	ldw	r2,0(r23)
 84116f8:	147fd526 	beq	r2,r17,8411650 <__call_exitprocs+0xa0>
 84116fc:	003fc506 	br	8411614 <__call_exitprocs+0x64>
 8411700:	8c000115 	stw	r16,4(r17)
 8411704:	003fea06 	br	84116b0 <__call_exitprocs+0x100>
 8411708:	2105883a 	add	r2,r4,r4
 841170c:	1485883a 	add	r2,r2,r18
 8411710:	11000017 	ldw	r4,0(r2)
 8411714:	303ee83a 	callr	r6
 8411718:	003ff406 	br	84116ec <__call_exitprocs+0x13c>
 841171c:	303ee83a 	callr	r6
 8411720:	003ff206 	br	84116ec <__call_exitprocs+0x13c>
 8411724:	88800117 	ldw	r2,4(r17)
 8411728:	1000081e 	bne	r2,zero,841174c <__call_exitprocs+0x19c>
 841172c:	89000017 	ldw	r4,0(r17)
 8411730:	20000726 	beq	r4,zero,8411750 <__call_exitprocs+0x1a0>
 8411734:	b9000015 	stw	r4,0(r23)
 8411738:	8809883a 	mov	r4,r17
 841173c:	00000000 	call	0 <__alt_mem_onchip_memory2_0-0x3000>
 8411740:	bc400017 	ldw	r17,0(r23)
 8411744:	883fb71e 	bne	r17,zero,8411624 <__call_exitprocs+0x74>
 8411748:	003fc506 	br	8411660 <__call_exitprocs+0xb0>
 841174c:	89000017 	ldw	r4,0(r17)
 8411750:	882f883a 	mov	r23,r17
 8411754:	2023883a 	mov	r17,r4
 8411758:	883fb21e 	bne	r17,zero,8411624 <__call_exitprocs+0x74>
 841175c:	003fc006 	br	8411660 <__call_exitprocs+0xb0>

08411760 <alt_sim_halt>:

/*
 * Routine called on exit.
 */
static ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
 8411760:	defffd04 	addi	sp,sp,-12
 8411764:	df000215 	stw	fp,8(sp)
 8411768:	df000204 	addi	fp,sp,8
 841176c:	e13fff15 	stw	r4,-4(fp)
  int r2 = exit_code;
 8411770:	e0bfff17 	ldw	r2,-4(fp)
 8411774:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 8411778:	e0bffe17 	ldw	r2,-8(fp)
 841177c:	1005003a 	cmpeq	r2,r2,zero
 8411780:	1000021e 	bne	r2,zero,841178c <alt_sim_halt+0x2c>
    ALT_SIM_FAIL();
 8411784:	002af070 	cmpltui	zero,zero,43969
 8411788:	00000106 	br	8411790 <alt_sim_halt+0x30>
  } else {
    ALT_SIM_PASS();
 841178c:	002af0b0 	cmpltui	zero,zero,43970
  }
#endif /* DEBUG_STUB */
}
 8411790:	e037883a 	mov	sp,fp
 8411794:	df000017 	ldw	fp,0(sp)
 8411798:	dec00104 	addi	sp,sp,4
 841179c:	f800283a 	ret

084117a0 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 84117a0:	defffd04 	addi	sp,sp,-12
 84117a4:	dfc00215 	stw	ra,8(sp)
 84117a8:	df000115 	stw	fp,4(sp)
 84117ac:	df000104 	addi	fp,sp,4
 84117b0:	e13fff15 	stw	r4,-4(fp)
  ALT_OS_STOP();

  /* Provide notification to the simulator that we've stopped */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_SIM_HALT().\r\n");
  ALT_SIM_HALT(exit_code);
 84117b4:	e13fff17 	ldw	r4,-4(fp)
 84117b8:	84117600 	call	8411760 <alt_sim_halt>

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 84117bc:	003fff06 	br	84117bc <_exit+0x1c>
 84117c0:	00000010 	cmplti	zero,zero,0
 84117c4:	00000000 	call	0 <__alt_mem_onchip_memory2_0-0x3000>
 84117c8:	00527a01 	jmpi	527a0 <__alt_mem_onchip_memory2_3+0x4b7a0>
 84117cc:	011f7c01 	jmpi	11f7c0 <__alt_mem_onchip_memory2_3+0x1187c0>
 84117d0:	001b0c0b 	ldhu	zero,27696(zero)
 84117d4:	00000028 	cmpgeui	zero,zero,0
 84117d8:	00000018 	cmpnei	zero,zero,0
 84117dc:	0840c000 	call	840c00 <__alt_mem_onchip_memory2_3+0x839c00>
 84117e0:	000005dc 	xori	zero,zero,23
 84117e4:	400e4400 	call	400e440 <__alt_mem_onchip_memory2_3+0x4007440>
 84117e8:	92099170 	cmpltui	r8,r18,9797
 84117ec:	95079308 	cmpgei	r20,r18,7756
 84117f0:	97049605 	stb	fp,4696(r18)
 84117f4:	90019f03 	ldbu	zero,1660(r18)
 84117f8:	9c06940a 	0x9c06940a
 84117fc:	00000002 	0x2
 8411800:	00000028 	cmpgeui	zero,zero,0
 8411804:	00000044 	movi	zero,1
 8411808:	0840c5dc 	xori	at,at,791
 841180c:	000005b0 	cmpltui	zero,zero,22
 8411810:	3c0e4400 	call	3c0e440 <__alt_mem_onchip_memory2_3+0x3c07440>
 8411814:	92099168 	cmpgeui	r8,r18,9797
 8411818:	95079308 	cmpgei	r20,r18,7756
 841181c:	9c039705 	stb	r16,3676(r19)
 8411820:	90019f02 	0x90019f02
 8411824:	9606940a 	0x9606940a
 8411828:	00000004 	movi	zero,0
 841182c:	084115ac 	andhi	at,at,1110
