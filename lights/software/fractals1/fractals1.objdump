
fractals1.elf:     file format elf32-littlenios2
fractals1.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x084001b4

Program Header:
    LOAD off    0x00001000 vaddr 0x08400000 paddr 0x08400000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x08400020 paddr 0x08400020 align 2**12
         filesz 0x00008b34 memsz 0x00008b34 flags r-x
    LOAD off    0x00009b54 vaddr 0x08408b54 paddr 0x0840a2ec align 2**12
         filesz 0x00001798 memsz 0x00001798 flags rw-
    LOAD off    0x0000ba84 vaddr 0x0840ba84 paddr 0x0840ba84 align 2**12
         filesz 0x00000000 memsz 0x000002cc flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  08400000  08400000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000194  08400020  08400020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0000867c  084001b4  084001b4  000011b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000324  08408830  08408830  00009830  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001798  08408b54  0840a2ec  00009b54  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000002cc  0840ba84  0840ba84  0000ba84  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000023  00000000  00000000  0000b2ec  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000a38  00000000  00000000  0000b310  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 0000117b  00000000  00000000  0000bd48  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   000126af  00000000  00000000  0000cec3  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00005823  00000000  00000000  0001f572  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000d8fd  00000000  00000000  00024d95  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  000012a8  00000000  00000000  00032694  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000016b5  00000000  00000000  0003393c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000448a  00000000  00000000  00034ff1  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000030  00000000  00000000  0003947c  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000538  00000000  00000000  000394b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0003c4cf  2**0
                  CONTENTS, READONLY
 18 .cpu          00000005  00000000  00000000  0003c4d2  2**0
                  CONTENTS, READONLY
 19 .simulation_enabled 00000001  00000000  00000000  0003c4d7  2**0
                  CONTENTS, READONLY
 20 .sysid_hash   00000004  00000000  00000000  0003c4d8  2**0
                  CONTENTS, READONLY
 21 .sysid_base   00000004  00000000  00000000  0003c4dc  2**0
                  CONTENTS, READONLY
 22 .sysid_time   00000004  00000000  00000000  0003c4e0  2**0
                  CONTENTS, READONLY
 23 .stderr_dev   0000000b  00000000  00000000  0003c4e4  2**0
                  CONTENTS, READONLY
 24 .stdin_dev    0000000b  00000000  00000000  0003c4ef  2**0
                  CONTENTS, READONLY
 25 .stdout_dev   0000000b  00000000  00000000  0003c4fa  2**0
                  CONTENTS, READONLY
 26 .sopc_system_name 0000000b  00000000  00000000  0003c505  2**0
                  CONTENTS, READONLY
 27 .quartus_project_dir 00000020  00000000  00000000  0003c510  2**0
                  CONTENTS, READONLY
 28 .jdi          0001085c  00000000  00000000  0003c530  2**0
                  CONTENTS, READONLY
 29 .sopcinfo     00113e1c  00000000  00000000  0004cd8c  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
08400000 l    d  .entry	00000000 .entry
08400020 l    d  .exceptions	00000000 .exceptions
084001b4 l    d  .text	00000000 .text
08408830 l    d  .rodata	00000000 .rodata
08408b54 l    d  .rwdata	00000000 .rwdata
0840ba84 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
084001fc l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 w_pow.c
00000000 l    df *ABS*	00000000 e_pow.c
08408898 l     O .rodata	00000010 bp
084088a8 l     O .rodata	00000010 dp_l
084088b8 l     O .rodata	00000010 dp_h
00000000 l    df *ABS*	00000000 e_sqrt.c
00000000 l    df *ABS*	00000000 s_fabs.c
00000000 l    df *ABS*	00000000 s_finite.c
00000000 l    df *ABS*	00000000 s_isnand.c
00000000 l    df *ABS*	00000000 s_lib_ver.c
00000000 l    df *ABS*	00000000 s_matherr.c
00000000 l    df *ABS*	00000000 s_nan.c
00000000 l    df *ABS*	00000000 s_rint.c
084088c8 l     O .rodata	00000010 TWO52
00000000 l    df *ABS*	00000000 s_scalbn.c
00000000 l    df *ABS*	00000000 s_copysign.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
08402b88 l     F .text	00000410 _fpadd_parts
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
08403af4 l     F .text	0000007c udivmodsi4
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 errno.c
00000000 l    df *ABS*	00000000 impure.c
08408b54 l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 alt_load.c
084045f8 l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
08408f54 l     O .rwdata	00001060 jtag_uart_1
08409fb4 l     O .rwdata	0000003c mailbox_0
08409ff0 l     O .rwdata	0000003c mailbox_1
0840a02c l     O .rwdata	0000003c mailbox_2
0840a068 l     O .rwdata	0000003c mailbox_3
0840a0a4 l     O .rwdata	00000054 video_pixel_buffer_dma_0
0840497c l     F .text	00000038 alt_dev_reg
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
08404bbc l     F .text	00000228 altera_avalon_jtag_uart_irq
08404de4 l     F .text	000000b0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_mailbox.c
084055b8 l     F .text	0000006c alt_avalon_mutex_reg
08405624 l     F .text	00000060 alt_get_errno
084057b8 l     F .text	00000050 alt_mailbox_increment_ptr
00000000 l    df *ABS*	00000000 altera_avalon_mutex.c
08405988 l     F .text	0000007c alt_mutex_trylock
08405a5c l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 altera_up_avalon_video_pixel_buffer_dma.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_close.c
08407448 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
084074ec l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
084075cc l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
08407a84 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
08407bc0 l     F .text	000000dc alt_file_locked
08407e24 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_irq.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
08408618 l     F .text	00000004 register_fini
00000000 l    df *ABS*	00000000 alt_exit.c
084087cc l     F .text	00000040 alt_sim_halt
00007000 g       *ABS*	00000000 __alt_mem_onchip_memory2_3
08404664 g     F .text	0000006c alt_main
08405808 g     F .text	000000a8 altera_avalon_mailbox_pend
084068f8 g     F .text	000003d0 alt_up_pixel_buffer_dma_draw_vline
0840bac0 g     O .bss	00000100 alt_irq
08402420 g     F .text	00000018 fabs
0840ba88 g     O .bss	00000004 mailbox_0
0840a2ec g       *ABS*	00000000 __flash_rwdata_start
084036a8 g     F .text	00000088 __eqdf2
0840ba8c g     O .bss	00000004 mailbox_2
084058b0 g     F .text	000000d8 altera_avalon_mailbox_get
084028b0 g     F .text	00000174 __divsf3
08405b1c g     F .text	00000040 altera_avalon_mutex_trylock
0840a2a8 g     O .rwdata	00000004 n
08405ccc g     F .text	000001a0 alt_up_pixel_buffer_dma_draw
084037b8 g     F .text	00000088 __gtdf2
08404568 g     F .text	00000010 __errno
08405c8c g     F .text	00000040 alt_up_pixel_buffer_dma_open_dev
08400000 g     F .entry	0000001c __reset
08405bb8 g     F .text	0000007c altera_avalon_mutex_is_mine
08400020 g       *ABS*	00000000 __flash_exceptions_start
0840babc g     O .bss	00000004 errno
08403a48 g     F .text	00000038 __make_dp
08404028 g     F .text	0000002c __make_fp
0840baa8 g     O .bss	00000004 alt_argv
084122a0 g       *ABS*	00000000 _gp
08405e6c g     F .text	00000058 alt_up_pixel_buffer_dma_change_back_buffer_address
00005000 g       *ABS*	00000000 __alt_mem_onchip_memory2_2
0840a120 g     O .rwdata	00000180 alt_fd_list
0840ba90 g     O .bss	00000004 mailbox_1
084076f4 g     F .text	00000094 alt_find_dev
084083d0 g     F .text	000000a0 memcpy
08403950 g     F .text	000000f8 __floatsidf
08407b48 g     F .text	00000078 alt_io_redirect
08403840 g     F .text	00000088 __ltdf2
08408830 g       *ABS*	00000000 __DTOR_END__
08408088 g     F .text	00000020 altera_nios2_irq_init
084056fc g     F .text	000000bc altera_avalon_mailbox_post
08405f1c g     F .text	00000034 alt_up_pixel_buffer_dma_check_swap_buffers_status
08404ffc g     F .text	00000224 altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
00003000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
08403c30 g     F .text	00000008 __udivsi3
084056dc g     F .text	00000020 altera_avalon_mailbox_close
084065a8 g     F .text	00000350 alt_up_pixel_buffer_dma_draw_hline
08402a24 g     F .text	00000078 __lesf2
08408280 g     F .text	00000090 alt_icache_flush
08406d8c g     F .text	000000d0 helper_plot_pixel
0840a2d8 g     O .rwdata	00000004 alt_max_fd
08404368 g     F .text	00000138 __unpack_d
08402b34 g     F .text	00000054 __extendsfdf2
08403018 g     F .text	00000074 __adddf3
08405f50 g     F .text	00000164 alt_up_pixel_buffer_dma_clear_screen
08405c34 g     F .text	00000058 altera_avalon_mutex_first_lock
0840a2ac g     O .rwdata	00000004 __fdlib_version
0840a2b4 g     O .rwdata	00000004 _global_impure_ptr
0840bd50 g       *ABS*	00000000 __bss_end
0840798c g     F .text	000000f8 alt_iic_isr_register
084060b4 g     F .text	000004f4 alt_up_pixel_buffer_dma_draw_box
08407f7c g     F .text	0000010c alt_tick
0840ba84 g     O .bss	00000004 message
08407944 g     F .text	00000048 alt_ic_irq_enabled
08407ee4 g     F .text	00000098 alt_alarm_stop
0840bab0 g     O .bss	00000004 alt_irq_active
084000ec g     F .exceptions	000000c8 alt_irq_handler
0840a0f8 g     O .rwdata	00000028 alt_dev_null
08400790 g     F .text	00000124 barrier
08405a04 g     F .text	00000058 altera_avalon_mutex_open
0840249c g     F .text	00000210 rint
08403eb8 g     F .text	000000c8 __unpack_f
084074a8 g     F .text	00000044 alt_dcache_flush_all
08406cc8 g     F .text	000000c4 alt_up_pixel_buffer_dma_draw_rectangle
0840a2ec g       *ABS*	00000000 __ram_rwdata_end
0840a2d0 g     O .rwdata	00000008 alt_dev_list
08406e5c g     F .text	0000039c alt_up_pixel_buffer_dma_draw_line
0840a2c0 g     O .rwdata	00000008 alt_mutex_list
08408b54 g       *ABS*	00000000 __ram_rodata_end
084038c8 g     F .text	00000088 __ledf2
08403c38 g     F .text	00000008 __umodsi3
0840bd50 g       *ABS*	00000000 end
08403d58 g     F .text	00000160 __pack_f
08404afc g     F .text	000000c0 altera_avalon_jtag_uart_init
0840882c g       *ABS*	00000000 __CTOR_LIST__
08800000 g       *ABS*	00000000 __alt_stack_pointer
08403cd8 g     F .text	00000080 __clzsi2
08405220 g     F .text	00000240 altera_avalon_jtag_uart_write
08405460 g     F .text	00000158 alt_avalon_mailbox_init
0840861c g     F .text	000001b0 __call_exitprocs
084001b4 g     F .text	0000004c _start
0840bab4 g     O .bss	00000004 _alt_tick_rate
0840bab8 g     O .bss	00000004 _alt_nticks
08404704 g     F .text	00000278 alt_sys_init
08402a9c g     F .text	00000098 __floatsisf
084084e4 g     F .text	00000134 __register_exitproc
08405b5c g     F .text	0000005c altera_avalon_mutex_unlock
08400e58 g     F .text	00001300 __ieee754_pow
08404e94 g     F .text	00000074 altera_avalon_jtag_uart_close
084009d0 g     F .text	00000488 pow
08408b54 g       *ABS*	00000000 __ram_rwdata_start
08408830 g       *ABS*	00000000 __ram_rodata_start
00004000 g       *ABS*	00000000 __alt_mem_onchip_memory2_1
084049b4 g     F .text	00000058 altera_avalon_jtag_uart_read_fd
084081c8 g     F .text	000000b8 alt_get_fd
084044a0 g     F .text	000000c8 __fpcmp_parts_d
0840835c g     F .text	00000074 memcmp
08404a64 g     F .text	00000048 altera_avalon_jtag_uart_close_fd
0840ba94 g     O .bss	00000004 col
0840bd50 g       *ABS*	00000000 __alt_stack_base
08404aac g     F .text	00000050 altera_avalon_jtag_uart_ioctl_fd
08403450 g     F .text	00000258 __divdf3
0840308c g     F .text	000003c4 __muldf3
084088d8 g     O .rodata	00000010 __thenan_sf
084080a8 g     F .text	00000120 alt_find_file
08407518 g     F .text	000000b4 alt_dev_llist_insert
0840ba84 g       *ABS*	00000000 __bss_start
08400200 g     F .text	00000590 main
0840baac g     O .bss	00000004 alt_envp
08405ec4 g     F .text	00000058 alt_up_pixel_buffer_dma_swap_buffers
08404a0c g     F .text	00000058 altera_avalon_jtag_uart_write_fd
08402484 g     F .text	00000008 matherr
08403a80 g     F .text	00000074 __truncdfsf2
0840bbc0 g     O .bss	00000190 _atexit0
08405adc g     F .text	00000040 altera_avalon_mutex_lock
0840a2dc g     O .rwdata	00000004 alt_errno
08403b70 g     F .text	00000060 __divsi3
084088e8 g     O .rodata	00000014 __thenan_df
08408830 g       *ABS*	00000000 __CTOR_END__
08402438 g     F .text	0000001c finite
08408830 g       *ABS*	00000000 __flash_rodata_start
08408830 g       *ABS*	00000000 __DTOR_LIST__
0840288c g     F .text	00000024 copysign
08403730 g     F .text	00000088 __nedf2
11000000 g       *ABS*	00000000 __alt_mem_sram_0
084046d0 g     F .text	00000034 alt_irq_init
08407e84 g     F .text	00000060 alt_release_fd
084088fc g     O .rodata	00000100 __clz_tab
08408310 g     F .text	00000014 atexit
0840ba98 g     O .bss	00000004 my_pixel_buffer
0840ba9c g     O .bss	00000004 mailbox_3
0840a2b0 g     O .rwdata	00000004 _impure_ptr
0840baa4 g     O .bss	00000004 alt_argc
084026ac g     F .text	000001e0 scalbn
08407690 g     F .text	00000064 _do_dtors
08000000 g       *ABS*	00000000 __alt_mem_sdram_0
08400020 g       .exceptions	00000000 alt_irq_entry
0840a2b8 g     O .rwdata	00000008 alt_mailbox_list
0840a2a0 g     O .rwdata	00000004 num_rows
0840a2c8 g     O .rwdata	00000008 alt_fs_list
0840248c g     F .text	00000010 nan
08400020 g       *ABS*	00000000 __ram_exceptions_start
08402158 g     F .text	000002c8 __ieee754_sqrt
084077b8 g     F .text	00000050 alt_ic_isr_register
0840a2ec g       *ABS*	00000000 _edata
0840bd50 g       *ABS*	00000000 _end
084008e4 g     F .text	000000ec post
084001b4 g       *ABS*	00000000 __ram_exceptions_end
08404f08 g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
084078a4 g     F .text	000000a0 alt_ic_irq_disable
08408324 g     F .text	00000038 exit
08403bd0 g     F .text	00000060 __modsi3
08800000 g       *ABS*	00000000 __alt_data_end
08400020 g     F .exceptions	00000000 alt_exception
08405684 g     F .text	00000058 altera_avalon_mailbox_open
08403f80 g     F .text	000000a8 __fpcmp_parts_f
0840880c g     F .text	00000020 _exit
08402454 g     F .text	00000030 __isnand
084071f8 g     F .text	00000154 alt_alarm_start
08403c40 g     F .text	00000098 __muldi3
08408470 g     F .text	00000074 strlen
08407c9c g     F .text	00000188 open
08407788 g     F .text	00000030 alt_icache_flush_all
084008b4 g     F .text	00000030 pend
0840a2e0 g     O .rwdata	00000004 alt_priority_mask
0840a2a4 g     O .rwdata	00000004 num_cols
08407808 g     F .text	0000009c alt_ic_irq_enable
08405abc g     F .text	00000020 altera_avalon_mutex_close
08402f98 g     F .text	00000080 __subdf3
0840a2e4 g     O .rwdata	00000008 alt_alarm_list
0840762c g     F .text	00000064 _do_ctors
0840734c g     F .text	000000fc close
08404578 g     F .text	00000080 alt_load
0840baa0 g     O .bss	00000004 row
08404054 g     F .text	00000314 __pack_d
00000000  w      *UND*	00000000 free



Disassembly of section .entry:

08400000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && !defined(ALT_SIM_OPTIMIZE)
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
 8400000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
 8400004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
 8400008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
 840000c:	00bffd16 	blt	zero,r2,8400004 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 8400010:	00421034 	movhi	at,2112
    ori r1, r1, %lo(_start)
 8400014:	08406d14 	ori	at,at,436
    jmp r1
 8400018:	0800683a 	jmp	at
 840001c:	00000000 	call	0 <__alt_mem_onchip_memory2_0-0x3000>

Disassembly of section .exceptions:

08400020 <alt_exception>:
         * Process an exception.  For all exceptions we must preserve all
         * caller saved registers on the stack (See the Nios2 ABI
         * documentation for details).
         */

        addi  sp, sp, -76
 8400020:	deffed04 	addi	sp,sp,-76

#endif

#endif

        stw   ra,  0(sp)
 8400024:	dfc00015 	stw	ra,0(sp)
        /*
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */

        stw   r1,   8(sp)
 8400028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 840002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 8400030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 8400034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 8400038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 840003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 8400040:	d9c00815 	stw	r7,32(sp)

        rdctl r5, estatus
 8400044:	000b307a 	rdctl	r5,estatus

        stw   r8,  36(sp)
 8400048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 840004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 8400050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 8400054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 8400058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 840005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 8400060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 8400064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 8400068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 840006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 8400070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 8400074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 8400078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 840007c:	10000326 	beq	r2,zero,840008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 8400080:	20000226 	beq	r4,zero,840008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 8400084:	84000ec0 	call	84000ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 8400088:	00000306 	br	8400098 <alt_exception+0x78>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
 840008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
 8400090:	e8bfff17 	ldw	r2,-4(ea)
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
 8400094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 8400098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 840009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 84000a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 84000a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 84000a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 84000ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 84000b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 84000b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 84000b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 84000bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 84000c0:	d9c00817 	ldw	r7,32(sp)
#ifdef ALT_STACK_CHECK
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif
#endif

        ldw   r8,  36(sp)
 84000c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 84000c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 84000cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 84000d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 84000d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 84000d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 84000dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 84000e0:	dbc01017 	ldw	r15,64(sp)
#endif

        ldw   sp,  76(sp)

#else
        addi  sp, sp, 76
 84000e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 84000e8:	ef80083a 	eret

084000ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 84000ec:	defff904 	addi	sp,sp,-28
 84000f0:	dfc00615 	stw	ra,24(sp)
 84000f4:	df000515 	stw	fp,20(sp)
 84000f8:	df000504 	addi	fp,sp,20
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 84000fc:	0005313a 	rdctl	r2,ipending
 8400100:	e0bffc15 	stw	r2,-16(fp)

  return active;
 8400104:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 8400108:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
 840010c:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 8400110:	00800044 	movi	r2,1
 8400114:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 8400118:	e0ffff17 	ldw	r3,-4(fp)
 840011c:	e0bffe17 	ldw	r2,-8(fp)
 8400120:	1884703a 	and	r2,r3,r2
 8400124:	1005003a 	cmpeq	r2,r2,zero
 8400128:	1000161e 	bne	r2,zero,8400184 <alt_irq_handler+0x98>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 840012c:	e0bffd17 	ldw	r2,-12(fp)
 8400130:	00c21074 	movhi	r3,2113
 8400134:	18eeb004 	addi	r3,r3,-17728
 8400138:	100490fa 	slli	r2,r2,3
 840013c:	10c5883a 	add	r2,r2,r3
 8400140:	11400017 	ldw	r5,0(r2)
 8400144:	e0bffd17 	ldw	r2,-12(fp)
 8400148:	00c21074 	movhi	r3,2113
 840014c:	18eeb004 	addi	r3,r3,-17728
 8400150:	100490fa 	slli	r2,r2,3
 8400154:	10c5883a 	add	r2,r2,r3
 8400158:	10800104 	addi	r2,r2,4
 840015c:	11000017 	ldw	r4,0(r2)
 8400160:	283ee83a 	callr	r5
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 8400164:	0005313a 	rdctl	r2,ipending
 8400168:	e0bffb15 	stw	r2,-20(fp)

  return active;
 840016c:	e0bffb17 	ldw	r2,-20(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
 8400170:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
 8400174:	e0bfff17 	ldw	r2,-4(fp)
 8400178:	1004c03a 	cmpne	r2,r2,zero
 840017c:	103fe31e 	bne	r2,zero,840010c <alt_irq_handler+0x20>
 8400180:	00000706 	br	84001a0 <alt_irq_handler+0xb4>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
 8400184:	e0bffe17 	ldw	r2,-8(fp)
 8400188:	1085883a 	add	r2,r2,r2
 840018c:	e0bffe15 	stw	r2,-8(fp)
      i++;
 8400190:	e0bffd17 	ldw	r2,-12(fp)
 8400194:	10800044 	addi	r2,r2,1
 8400198:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 840019c:	003fde06 	br	8400118 <alt_irq_handler+0x2c>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
 84001a0:	e037883a 	mov	sp,fp
 84001a4:	dfc00117 	ldw	ra,4(sp)
 84001a8:	df000017 	ldw	fp,0(sp)
 84001ac:	dec00204 	addi	sp,sp,8
 84001b0:	f800283a 	ret

Disassembly of section .text:

084001b4 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
 84001b4:	00810014 	movui	r2,1024
#endif

0:
    initd 0(r2)
 84001b8:	10000033 	initd	0(r2)
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
 84001bc:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
 84001c0:	00bffd16 	blt	zero,r2,84001b8 <_start+0x4>
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 84001c4:	06c22034 	movhi	sp,2176
    ori sp, sp, %lo(__alt_stack_pointer)
 84001c8:	dec00014 	ori	sp,sp,0

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
 84001cc:	06821074 	movhi	gp,2113
    ori gp, gp, %lo(_gp)
 84001d0:	d688a814 	ori	gp,gp,8864
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 84001d4:	00821034 	movhi	r2,2112
    ori r2, r2, %lo(__bss_start)
 84001d8:	10aea114 	ori	r2,r2,47748

    movhi r3, %hi(__bss_end)
 84001dc:	00c21034 	movhi	r3,2112
    ori r3, r3, %lo(__bss_end)
 84001e0:	18ef5414 	ori	r3,r3,48464

    beq r2, r3, 1f
 84001e4:	10c00326 	beq	r2,r3,84001f4 <_start+0x40>

0:
    stw zero, (r2)
 84001e8:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 84001ec:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 84001f0:	10fffd36 	bltu	r2,r3,84001e8 <_start+0x34>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 84001f4:	84045780 	call	8404578 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 84001f8:	84046640 	call	8404664 <alt_main>

084001fc <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 84001fc:	003fff06 	br	84001fc <alt_after_alt_main>

08400200 <main>:
void barrier(int id);
void pend(alt_mailbox_dev*);
void post(int id, alt_u32 mess);


int main() {
 8400200:	deffe904 	addi	sp,sp,-92
 8400204:	dfc01615 	stw	ra,88(sp)
 8400208:	df001515 	stw	fp,84(sp)
 840020c:	dc401415 	stw	r17,80(sp)
 8400210:	dc001315 	stw	r16,76(sp)
 8400214:	df001304 	addi	fp,sp,76

	mailbox_0 = altera_avalon_mailbox_open("/dev/mailbox_0");
 8400218:	01021074 	movhi	r4,2113
 840021c:	21220c04 	addi	r4,r4,-30672
 8400220:	84056840 	call	8405684 <altera_avalon_mailbox_open>
 8400224:	d0a5fa15 	stw	r2,-26648(gp)
	mailbox_1 = altera_avalon_mailbox_open("/dev/mailbox_1");
 8400228:	01021074 	movhi	r4,2113
 840022c:	21221004 	addi	r4,r4,-30656
 8400230:	84056840 	call	8405684 <altera_avalon_mailbox_open>
 8400234:	d0a5fc15 	stw	r2,-26640(gp)
	mailbox_2 = altera_avalon_mailbox_open("/dev/mailbox_2");
 8400238:	01021074 	movhi	r4,2113
 840023c:	21221404 	addi	r4,r4,-30640
 8400240:	84056840 	call	8405684 <altera_avalon_mailbox_open>
 8400244:	d0a5fb15 	stw	r2,-26644(gp)
	mailbox_3 = altera_avalon_mailbox_open("/dev/mailbox_3");
 8400248:	01021074 	movhi	r4,2113
 840024c:	21221804 	addi	r4,r4,-30624
 8400250:	84056840 	call	8405684 <altera_avalon_mailbox_open>
 8400254:	d0a5ff15 	stw	r2,-26628(gp)

	int cpuid = __builtin_rdctl(5);
 8400258:	0005317a 	rdctl	r2,cpuid
 840025c:	e0bffe15 	stw	r2,-8(fp)

	barrier(cpuid);
 8400260:	e13ffe17 	ldw	r4,-8(fp)
 8400264:	84007900 	call	8400790 <barrier>
	//alt_up_pixel_buffer_dma_dev *my_pixel_buffer; //declare global var
	my_pixel_buffer=alt_up_pixel_buffer_dma_open_dev("/dev/video_pixel_buffer_dma_0"); //assign it
 8400268:	01021074 	movhi	r4,2113
 840026c:	21221c04 	addi	r4,r4,-30608
 8400270:	8405c8c0 	call	8405c8c <alt_up_pixel_buffer_dma_open_dev>
 8400274:	d0a5fe15 	stw	r2,-26632(gp)
	alt_up_pixel_buffer_dma_clear_screen(my_pixel_buffer,0);//clear_screen();
 8400278:	d125fe17 	ldw	r4,-26632(gp)
 840027c:	000b883a 	mov	r5,zero
 8400280:	8405f500 	call	8405f50 <alt_up_pixel_buffer_dma_clear_screen>

	int zoom = 1;
 8400284:	00800044 	movi	r2,1
 8400288:	e0bffd15 	stw	r2,-12(fp)
	float min_x, max_x, min_y, max_y;
	min_x = -2.5;
 840028c:	00b00834 	movhi	r2,49184
 8400290:	e0bffc15 	stw	r2,-16(fp)
	max_x = 1.0;
 8400294:	008fe034 	movhi	r2,16256
 8400298:	e0bffb15 	stw	r2,-20(fp)
	min_y = -1.0;
 840029c:	00afe034 	movhi	r2,49024
 84002a0:	e0bffa15 	stw	r2,-24(fp)
	max_y = 1.0;
 84002a4:	008fe034 	movhi	r2,16256
 84002a8:	e0bff915 	stw	r2,-28(fp)

	float target_x, target_y;
	int iteration;
	int is_target; //false

	barrier(cpuid);
 84002ac:	e13ffe17 	ldw	r4,-8(fp)
 84002b0:	84007900 	call	8400790 <barrier>
	while (1) {
		//printf("barrier 1")
		barrier(cpuid);
 84002b4:	e13ffe17 	ldw	r4,-8(fp)
 84002b8:	84007900 	call	8400790 <barrier>
		//printf("%d", cpuid);
		is_target = 0;
 84002bc:	e03fee15 	stw	zero,-72(fp)

		for (i = cpuid; i < num_rows; i+=4) {
 84002c0:	e0bffe17 	ldw	r2,-8(fp)
 84002c4:	e0bff815 	stw	r2,-32(fp)
 84002c8:	00008806 	br	84004ec <main+0x2ec>
			for (j = 0; j < num_cols; j++) {
 84002cc:	e03ff715 	stw	zero,-36(fp)
 84002d0:	00007e06 	br	84004cc <main+0x2cc>
				x = 0;
 84002d4:	e03ff615 	stw	zero,-40(fp)
				y = 0;
 84002d8:	e03ff515 	stw	zero,-44(fp)
				z = 0;
 84002dc:	e03ff415 	stw	zero,-48(fp)
				x0 = j/320.0*(max_x - min_x) + min_x;
 84002e0:	e13ff717 	ldw	r4,-36(fp)
 84002e4:	8402a9c0 	call	8402a9c <__floatsisf>
 84002e8:	1009883a 	mov	r4,r2
 84002ec:	0150e834 	movhi	r5,17312
 84002f0:	84028b00 	call	84028b0 <__divsf3>
 84002f4:	1009883a 	mov	r4,r2
 84002f8:	e0fffb17 	ldw	r3,-20(fp)
 84002fc:	e0bffc17 	ldw	r2,-16(fp)
 8400300:	1885ffb2 	custom	254,r2,r3,r2
 8400304:	2087ff32 	custom	252,r3,r4,r2
 8400308:	e0bffc17 	ldw	r2,-16(fp)
 840030c:	1885ff72 	custom	253,r2,r3,r2
 8400310:	e0bff315 	stw	r2,-52(fp)
				y0 = (239.0-i)/240.0*(max_y - min_y) + min_y;
 8400314:	e13ff817 	ldw	r4,-32(fp)
 8400318:	8402a9c0 	call	8402a9c <__floatsisf>
 840031c:	1007883a 	mov	r3,r2
 8400320:	0090dbf4 	movhi	r2,17263
 8400324:	10c5ffb2 	custom	254,r2,r2,r3
 8400328:	1009883a 	mov	r4,r2
 840032c:	0150dc34 	movhi	r5,17264
 8400330:	84028b00 	call	84028b0 <__divsf3>
 8400334:	1009883a 	mov	r4,r2
 8400338:	e0fff917 	ldw	r3,-28(fp)
 840033c:	e0bffa17 	ldw	r2,-24(fp)
 8400340:	1885ffb2 	custom	254,r2,r3,r2
 8400344:	2087ff32 	custom	252,r3,r4,r2
 8400348:	e0bffa17 	ldw	r2,-24(fp)
 840034c:	1885ff72 	custom	253,r2,r3,r2
 8400350:	e0bff215 	stw	r2,-56(fp)
				//printf("x0: %f...", x0);
				//printf("y0: %f\n", y0);
				iteration = 0;
 8400354:	e03fef15 	stw	zero,-68(fp)

				while( (x*x + y*y) <= 4 && iteration < 500) {
 8400358:	00002006 	br	84003dc <main+0x1dc>
					float xtemp = x*x - y*y + x0;
 840035c:	e0fff617 	ldw	r3,-40(fp)
 8400360:	e0bff617 	ldw	r2,-40(fp)
 8400364:	1889ff32 	custom	252,r4,r3,r2
 8400368:	e0fff517 	ldw	r3,-44(fp)
 840036c:	e0bff517 	ldw	r2,-44(fp)
 8400370:	1885ff32 	custom	252,r2,r3,r2
 8400374:	2087ffb2 	custom	254,r3,r4,r2
 8400378:	e0bff317 	ldw	r2,-52(fp)
 840037c:	1885ff72 	custom	253,r2,r3,r2
 8400380:	e0bfed15 	stw	r2,-76(fp)
					y = 2*x*y + y0;
 8400384:	e0bff617 	ldw	r2,-40(fp)
 8400388:	1087ff72 	custom	253,r3,r2,r2
 840038c:	e0bff517 	ldw	r2,-44(fp)
 8400390:	1887ff32 	custom	252,r3,r3,r2
 8400394:	e0bff217 	ldw	r2,-56(fp)
 8400398:	1885ff72 	custom	253,r2,r3,r2
 840039c:	e0bff515 	stw	r2,-44(fp)
					x = xtemp;
 84003a0:	e0bfed17 	ldw	r2,-76(fp)
 84003a4:	e0bff615 	stw	r2,-40(fp)
					iteration++;
 84003a8:	e0bfef17 	ldw	r2,-68(fp)
 84003ac:	10800044 	addi	r2,r2,1
 84003b0:	e0bfef15 	stw	r2,-68(fp)
					if(iteration == 450 && is_target == 0) {
 84003b4:	e0bfef17 	ldw	r2,-68(fp)
 84003b8:	10807098 	cmpnei	r2,r2,450
 84003bc:	1000071e 	bne	r2,zero,84003dc <main+0x1dc>
 84003c0:	e0bfee17 	ldw	r2,-72(fp)
 84003c4:	1004c03a 	cmpne	r2,r2,zero
 84003c8:	1000041e 	bne	r2,zero,84003dc <main+0x1dc>
						barrier(cpuid);
 84003cc:	e13ffe17 	ldw	r4,-8(fp)
 84003d0:	84007900 	call	8400790 <barrier>
						is_target = 1;
 84003d4:	00800044 	movi	r2,1
 84003d8:	e0bfee15 	stw	r2,-72(fp)
				y0 = (239.0-i)/240.0*(max_y - min_y) + min_y;
				//printf("x0: %f...", x0);
				//printf("y0: %f\n", y0);
				iteration = 0;

				while( (x*x + y*y) <= 4 && iteration < 500) {
 84003dc:	e0fff617 	ldw	r3,-40(fp)
 84003e0:	e0bff617 	ldw	r2,-40(fp)
 84003e4:	1889ff32 	custom	252,r4,r3,r2
 84003e8:	e0fff517 	ldw	r3,-44(fp)
 84003ec:	e0bff517 	ldw	r2,-44(fp)
 84003f0:	1885ff32 	custom	252,r2,r3,r2
 84003f4:	2085ff72 	custom	253,r2,r4,r2
 84003f8:	e03fff05 	stb	zero,-4(fp)
 84003fc:	1009883a 	mov	r4,r2
 8400400:	01502034 	movhi	r5,16512
 8400404:	8402a240 	call	8402a24 <__lesf2>
 8400408:	10800050 	cmplti	r2,r2,1
 840040c:	1000011e 	bne	r2,zero,8400414 <main+0x214>
 8400410:	00000206 	br	840041c <main+0x21c>
 8400414:	00800044 	movi	r2,1
 8400418:	e0bfff05 	stb	r2,-4(fp)
 840041c:	e0ffff03 	ldbu	r3,-4(fp)
 8400420:	1880005c 	xori	r2,r3,1
 8400424:	10803fcc 	andi	r2,r2,255
 8400428:	1004c03a 	cmpne	r2,r2,zero
 840042c:	1000031e 	bne	r2,zero,840043c <main+0x23c>
 8400430:	e0bfef17 	ldw	r2,-68(fp)
 8400434:	10807d10 	cmplti	r2,r2,500
 8400438:	103fc81e 	bne	r2,zero,840035c <main+0x15c>
						barrier(cpuid);
						is_target = 1;
					}
				}
				//printf("Iteration: %d\n", iteration);
				if(iteration == 500) {
 840043c:	e0bfef17 	ldw	r2,-68(fp)
 8400440:	10807d18 	cmpnei	r2,r2,500
 8400444:	1000061e 	bne	r2,zero,8400460 <main+0x260>
					alt_up_pixel_buffer_dma_draw(my_pixel_buffer, 0,j,i );
 8400448:	d125fe17 	ldw	r4,-26632(gp)
 840044c:	e1bff717 	ldw	r6,-36(fp)
 8400450:	e1fff817 	ldw	r7,-32(fp)
 8400454:	000b883a 	mov	r5,zero
 8400458:	8405ccc0 	call	8405ccc <alt_up_pixel_buffer_dma_draw>
 840045c:	00001806 	br	84004c0 <main+0x2c0>
				} else {
					alt_up_pixel_buffer_dma_draw(my_pixel_buffer, (iteration*8/zoom) + (iteration*4/zoom) +(iteration*2/zoom), j, i);
 8400460:	d465fe17 	ldw	r17,-26632(gp)
 8400464:	e0bfef17 	ldw	r2,-68(fp)
 8400468:	100890fa 	slli	r4,r2,3
 840046c:	e17ffd17 	ldw	r5,-12(fp)
 8400470:	8403b700 	call	8403b70 <__divsi3>
 8400474:	1021883a 	mov	r16,r2
 8400478:	e0bfef17 	ldw	r2,-68(fp)
 840047c:	1085883a 	add	r2,r2,r2
 8400480:	1085883a 	add	r2,r2,r2
 8400484:	1009883a 	mov	r4,r2
 8400488:	e17ffd17 	ldw	r5,-12(fp)
 840048c:	8403b700 	call	8403b70 <__divsi3>
 8400490:	80a1883a 	add	r16,r16,r2
 8400494:	e0bfef17 	ldw	r2,-68(fp)
 8400498:	1085883a 	add	r2,r2,r2
 840049c:	1009883a 	mov	r4,r2
 84004a0:	e17ffd17 	ldw	r5,-12(fp)
 84004a4:	8403b700 	call	8403b70 <__divsi3>
 84004a8:	8085883a 	add	r2,r16,r2
 84004ac:	100b883a 	mov	r5,r2
 84004b0:	e1bff717 	ldw	r6,-36(fp)
 84004b4:	e1fff817 	ldw	r7,-32(fp)
 84004b8:	8809883a 	mov	r4,r17
 84004bc:	8405ccc0 	call	8405ccc <alt_up_pixel_buffer_dma_draw>
		barrier(cpuid);
		//printf("%d", cpuid);
		is_target = 0;

		for (i = cpuid; i < num_rows; i+=4) {
			for (j = 0; j < num_cols; j++) {
 84004c0:	e0bff717 	ldw	r2,-36(fp)
 84004c4:	10800044 	addi	r2,r2,1
 84004c8:	e0bff715 	stw	r2,-36(fp)
 84004cc:	d0e00117 	ldw	r3,-32764(gp)
 84004d0:	e0bff717 	ldw	r2,-36(fp)
 84004d4:	10ff7f16 	blt	r2,r3,84002d4 <main+0xd4>
				} else {
					alt_up_pixel_buffer_dma_draw(my_pixel_buffer, (iteration*8/zoom) + (iteration*4/zoom) +(iteration*2/zoom), j, i);
				}
				//barrier(cpuid);
			}
			barrier(cpuid);
 84004d8:	e13ffe17 	ldw	r4,-8(fp)
 84004dc:	84007900 	call	8400790 <barrier>
		//printf("barrier 1")
		barrier(cpuid);
		//printf("%d", cpuid);
		is_target = 0;

		for (i = cpuid; i < num_rows; i+=4) {
 84004e0:	e0bff817 	ldw	r2,-32(fp)
 84004e4:	10800104 	addi	r2,r2,4
 84004e8:	e0bff815 	stw	r2,-32(fp)
 84004ec:	d0e00017 	ldw	r3,-32768(gp)
 84004f0:	e0bff817 	ldw	r2,-32(fp)
 84004f4:	10ff7516 	blt	r2,r3,84002cc <main+0xcc>
				}
				//barrier(cpuid);
			}
			barrier(cpuid);
		}
		if(is_target == 1) {
 84004f8:	e0bfee17 	ldw	r2,-72(fp)
 84004fc:	10800058 	cmpnei	r2,r2,1
 8400500:	1000041e 	bne	r2,zero,8400514 <main+0x314>
			target_x = x0;
 8400504:	e0bff317 	ldw	r2,-52(fp)
 8400508:	e0bff115 	stw	r2,-60(fp)
			target_y = y0;
 840050c:	e0bff217 	ldw	r2,-56(fp)
 8400510:	e0bff015 	stw	r2,-64(fp)
		}
		barrier(cpuid);
 8400514:	e13ffe17 	ldw	r4,-8(fp)
 8400518:	84007900 	call	8400790 <barrier>
		min_x = target_x - (1/(pow(1.5, zoom)));
 840051c:	e13ff117 	ldw	r4,-60(fp)
 8400520:	8402b340 	call	8402b34 <__extendsfdf2>
 8400524:	1021883a 	mov	r16,r2
 8400528:	1823883a 	mov	r17,r3
 840052c:	e13ffd17 	ldw	r4,-12(fp)
 8400530:	84039500 	call	8403950 <__floatsidf>
 8400534:	100f883a 	mov	r7,r2
 8400538:	1811883a 	mov	r8,r3
 840053c:	0009883a 	mov	r4,zero
 8400540:	014ffe34 	movhi	r5,16376
 8400544:	380d883a 	mov	r6,r7
 8400548:	400f883a 	mov	r7,r8
 840054c:	84009d00 	call	84009d0 <pow>
 8400550:	1009883a 	mov	r4,r2
 8400554:	180b883a 	mov	r5,r3
 8400558:	2005883a 	mov	r2,r4
 840055c:	2807883a 	mov	r3,r5
 8400560:	0009883a 	mov	r4,zero
 8400564:	016ffc34 	movhi	r5,49136
 8400568:	100d883a 	mov	r6,r2
 840056c:	180f883a 	mov	r7,r3
 8400570:	84034500 	call	8403450 <__divdf3>
 8400574:	1009883a 	mov	r4,r2
 8400578:	180b883a 	mov	r5,r3
 840057c:	2005883a 	mov	r2,r4
 8400580:	2807883a 	mov	r3,r5
 8400584:	8009883a 	mov	r4,r16
 8400588:	880b883a 	mov	r5,r17
 840058c:	100d883a 	mov	r6,r2
 8400590:	180f883a 	mov	r7,r3
 8400594:	84030180 	call	8403018 <__adddf3>
 8400598:	1009883a 	mov	r4,r2
 840059c:	180b883a 	mov	r5,r3
 84005a0:	2005883a 	mov	r2,r4
 84005a4:	2807883a 	mov	r3,r5
 84005a8:	1009883a 	mov	r4,r2
 84005ac:	180b883a 	mov	r5,r3
 84005b0:	8403a800 	call	8403a80 <__truncdfsf2>
 84005b4:	e0bffc15 	stw	r2,-16(fp)
		max_x = target_x + (1/(pow(1.5, zoom)));
 84005b8:	e13ff117 	ldw	r4,-60(fp)
 84005bc:	8402b340 	call	8402b34 <__extendsfdf2>
 84005c0:	1021883a 	mov	r16,r2
 84005c4:	1823883a 	mov	r17,r3
 84005c8:	e13ffd17 	ldw	r4,-12(fp)
 84005cc:	84039500 	call	8403950 <__floatsidf>
 84005d0:	100f883a 	mov	r7,r2
 84005d4:	1811883a 	mov	r8,r3
 84005d8:	0009883a 	mov	r4,zero
 84005dc:	014ffe34 	movhi	r5,16376
 84005e0:	380d883a 	mov	r6,r7
 84005e4:	400f883a 	mov	r7,r8
 84005e8:	84009d00 	call	84009d0 <pow>
 84005ec:	100f883a 	mov	r7,r2
 84005f0:	1811883a 	mov	r8,r3
 84005f4:	0009883a 	mov	r4,zero
 84005f8:	014ffc34 	movhi	r5,16368
 84005fc:	380d883a 	mov	r6,r7
 8400600:	400f883a 	mov	r7,r8
 8400604:	84034500 	call	8403450 <__divdf3>
 8400608:	1009883a 	mov	r4,r2
 840060c:	180b883a 	mov	r5,r3
 8400610:	2005883a 	mov	r2,r4
 8400614:	2807883a 	mov	r3,r5
 8400618:	8009883a 	mov	r4,r16
 840061c:	880b883a 	mov	r5,r17
 8400620:	100d883a 	mov	r6,r2
 8400624:	180f883a 	mov	r7,r3
 8400628:	84030180 	call	8403018 <__adddf3>
 840062c:	1009883a 	mov	r4,r2
 8400630:	180b883a 	mov	r5,r3
 8400634:	2005883a 	mov	r2,r4
 8400638:	2807883a 	mov	r3,r5
 840063c:	1009883a 	mov	r4,r2
 8400640:	180b883a 	mov	r5,r3
 8400644:	8403a800 	call	8403a80 <__truncdfsf2>
 8400648:	e0bffb15 	stw	r2,-20(fp)
		min_y = target_y - (0.75/(pow(1.5, zoom)));
 840064c:	e13ff017 	ldw	r4,-64(fp)
 8400650:	8402b340 	call	8402b34 <__extendsfdf2>
 8400654:	1021883a 	mov	r16,r2
 8400658:	1823883a 	mov	r17,r3
 840065c:	e13ffd17 	ldw	r4,-12(fp)
 8400660:	84039500 	call	8403950 <__floatsidf>
 8400664:	100f883a 	mov	r7,r2
 8400668:	1811883a 	mov	r8,r3
 840066c:	0009883a 	mov	r4,zero
 8400670:	014ffe34 	movhi	r5,16376
 8400674:	380d883a 	mov	r6,r7
 8400678:	400f883a 	mov	r7,r8
 840067c:	84009d00 	call	84009d0 <pow>
 8400680:	100f883a 	mov	r7,r2
 8400684:	1811883a 	mov	r8,r3
 8400688:	0009883a 	mov	r4,zero
 840068c:	016ffa34 	movhi	r5,49128
 8400690:	380d883a 	mov	r6,r7
 8400694:	400f883a 	mov	r7,r8
 8400698:	84034500 	call	8403450 <__divdf3>
 840069c:	1009883a 	mov	r4,r2
 84006a0:	180b883a 	mov	r5,r3
 84006a4:	2005883a 	mov	r2,r4
 84006a8:	2807883a 	mov	r3,r5
 84006ac:	8009883a 	mov	r4,r16
 84006b0:	880b883a 	mov	r5,r17
 84006b4:	100d883a 	mov	r6,r2
 84006b8:	180f883a 	mov	r7,r3
 84006bc:	84030180 	call	8403018 <__adddf3>
 84006c0:	1009883a 	mov	r4,r2
 84006c4:	180b883a 	mov	r5,r3
 84006c8:	2005883a 	mov	r2,r4
 84006cc:	2807883a 	mov	r3,r5
 84006d0:	1009883a 	mov	r4,r2
 84006d4:	180b883a 	mov	r5,r3
 84006d8:	8403a800 	call	8403a80 <__truncdfsf2>
 84006dc:	e0bffa15 	stw	r2,-24(fp)
		max_y = target_y + (0.75/(pow(1.5, zoom)));
 84006e0:	e13ff017 	ldw	r4,-64(fp)
 84006e4:	8402b340 	call	8402b34 <__extendsfdf2>
 84006e8:	1021883a 	mov	r16,r2
 84006ec:	1823883a 	mov	r17,r3
 84006f0:	e13ffd17 	ldw	r4,-12(fp)
 84006f4:	84039500 	call	8403950 <__floatsidf>
 84006f8:	100f883a 	mov	r7,r2
 84006fc:	1811883a 	mov	r8,r3
 8400700:	0009883a 	mov	r4,zero
 8400704:	014ffe34 	movhi	r5,16376
 8400708:	380d883a 	mov	r6,r7
 840070c:	400f883a 	mov	r7,r8
 8400710:	84009d00 	call	84009d0 <pow>
 8400714:	100f883a 	mov	r7,r2
 8400718:	1811883a 	mov	r8,r3
 840071c:	0009883a 	mov	r4,zero
 8400720:	014ffa34 	movhi	r5,16360
 8400724:	380d883a 	mov	r6,r7
 8400728:	400f883a 	mov	r7,r8
 840072c:	84034500 	call	8403450 <__divdf3>
 8400730:	1009883a 	mov	r4,r2
 8400734:	180b883a 	mov	r5,r3
 8400738:	2005883a 	mov	r2,r4
 840073c:	2807883a 	mov	r3,r5
 8400740:	8009883a 	mov	r4,r16
 8400744:	880b883a 	mov	r5,r17
 8400748:	100d883a 	mov	r6,r2
 840074c:	180f883a 	mov	r7,r3
 8400750:	84030180 	call	8403018 <__adddf3>
 8400754:	1009883a 	mov	r4,r2
 8400758:	180b883a 	mov	r5,r3
 840075c:	2005883a 	mov	r2,r4
 8400760:	2807883a 	mov	r3,r5
 8400764:	1009883a 	mov	r4,r2
 8400768:	180b883a 	mov	r5,r3
 840076c:	8403a800 	call	8403a80 <__truncdfsf2>
 8400770:	e0bff915 	stw	r2,-28(fp)
		zoom += 1;
 8400774:	e0bffd17 	ldw	r2,-12(fp)
 8400778:	10800044 	addi	r2,r2,1
 840077c:	e0bffd15 	stw	r2,-12(fp)

		alt_up_pixel_buffer_dma_clear_screen(my_pixel_buffer,0);
 8400780:	d125fe17 	ldw	r4,-26632(gp)
 8400784:	000b883a 	mov	r5,zero
 8400788:	8405f500 	call	8405f50 <alt_up_pixel_buffer_dma_clear_screen>
	}
 840078c:	003ec906 	br	84002b4 <main+0xb4>

08400790 <barrier>:
}

void barrier(int id){
 8400790:	defff904 	addi	sp,sp,-28
 8400794:	dfc00615 	stw	ra,24(sp)
 8400798:	df000515 	stw	fp,20(sp)
 840079c:	df000504 	addi	fp,sp,20
 84007a0:	e13fff15 	stw	r4,-4(fp)
	post(id, message);
 84007a4:	d165f917 	ldw	r5,-26652(gp)
 84007a8:	e13fff17 	ldw	r4,-4(fp)
 84007ac:	84008e40 	call	84008e4 <post>
	if(id == 0){
 84007b0:	e0bfff17 	ldw	r2,-4(fp)
 84007b4:	1004c03a 	cmpne	r2,r2,zero
 84007b8:	10000c1e 	bne	r2,zero,84007ec <barrier+0x5c>
		int i;
		for(i = 1; i < n-1; i++){
 84007bc:	00800044 	movi	r2,1
 84007c0:	e0bffe15 	stw	r2,-8(fp)
 84007c4:	00000506 	br	84007dc <barrier+0x4c>
			pend(mailbox_0);
 84007c8:	d125fa17 	ldw	r4,-26648(gp)
 84007cc:	84008b40 	call	84008b4 <pend>

void barrier(int id){
	post(id, message);
	if(id == 0){
		int i;
		for(i = 1; i < n-1; i++){
 84007d0:	e0bffe17 	ldw	r2,-8(fp)
 84007d4:	10800044 	addi	r2,r2,1
 84007d8:	e0bffe15 	stw	r2,-8(fp)
 84007dc:	d0a00217 	ldw	r2,-32760(gp)
 84007e0:	10ffffc4 	addi	r3,r2,-1
 84007e4:	e0bffe17 	ldw	r2,-8(fp)
 84007e8:	10fff716 	blt	r2,r3,84007c8 <barrier+0x38>
			pend(mailbox_0);
		}
	}
	if(id == 1){
 84007ec:	e0bfff17 	ldw	r2,-4(fp)
 84007f0:	10800058 	cmpnei	r2,r2,1
 84007f4:	10000c1e 	bne	r2,zero,8400828 <barrier+0x98>
		int i;
		for(i = 1; i < n-1; i++){
 84007f8:	00800044 	movi	r2,1
 84007fc:	e0bffd15 	stw	r2,-12(fp)
 8400800:	00000506 	br	8400818 <barrier+0x88>
			pend(mailbox_1);
 8400804:	d125fc17 	ldw	r4,-26640(gp)
 8400808:	84008b40 	call	84008b4 <pend>
			pend(mailbox_0);
		}
	}
	if(id == 1){
		int i;
		for(i = 1; i < n-1; i++){
 840080c:	e0bffd17 	ldw	r2,-12(fp)
 8400810:	10800044 	addi	r2,r2,1
 8400814:	e0bffd15 	stw	r2,-12(fp)
 8400818:	d0a00217 	ldw	r2,-32760(gp)
 840081c:	10ffffc4 	addi	r3,r2,-1
 8400820:	e0bffd17 	ldw	r2,-12(fp)
 8400824:	10fff716 	blt	r2,r3,8400804 <barrier+0x74>
			pend(mailbox_1);
		}
	}
	if(id == 2){
 8400828:	e0bfff17 	ldw	r2,-4(fp)
 840082c:	10800098 	cmpnei	r2,r2,2
 8400830:	10000c1e 	bne	r2,zero,8400864 <barrier+0xd4>
		int i;
		for(i = 1; i < n-1; i++){
 8400834:	00800044 	movi	r2,1
 8400838:	e0bffc15 	stw	r2,-16(fp)
 840083c:	00000506 	br	8400854 <barrier+0xc4>
			pend(mailbox_2);
 8400840:	d125fb17 	ldw	r4,-26644(gp)
 8400844:	84008b40 	call	84008b4 <pend>
			pend(mailbox_1);
		}
	}
	if(id == 2){
		int i;
		for(i = 1; i < n-1; i++){
 8400848:	e0bffc17 	ldw	r2,-16(fp)
 840084c:	10800044 	addi	r2,r2,1
 8400850:	e0bffc15 	stw	r2,-16(fp)
 8400854:	d0a00217 	ldw	r2,-32760(gp)
 8400858:	10ffffc4 	addi	r3,r2,-1
 840085c:	e0bffc17 	ldw	r2,-16(fp)
 8400860:	10fff716 	blt	r2,r3,8400840 <barrier+0xb0>
			pend(mailbox_2);
		}
	}
	if(id == 3){
 8400864:	e0bfff17 	ldw	r2,-4(fp)
 8400868:	108000d8 	cmpnei	r2,r2,3
 840086c:	10000c1e 	bne	r2,zero,84008a0 <barrier+0x110>
		int i;
		for(i = 1; i < n-1; i++){
 8400870:	00800044 	movi	r2,1
 8400874:	e0bffb15 	stw	r2,-20(fp)
 8400878:	00000506 	br	8400890 <barrier+0x100>
			pend(mailbox_3);
 840087c:	d125ff17 	ldw	r4,-26628(gp)
 8400880:	84008b40 	call	84008b4 <pend>
			pend(mailbox_2);
		}
	}
	if(id == 3){
		int i;
		for(i = 1; i < n-1; i++){
 8400884:	e0bffb17 	ldw	r2,-20(fp)
 8400888:	10800044 	addi	r2,r2,1
 840088c:	e0bffb15 	stw	r2,-20(fp)
 8400890:	d0a00217 	ldw	r2,-32760(gp)
 8400894:	10ffffc4 	addi	r3,r2,-1
 8400898:	e0bffb17 	ldw	r2,-20(fp)
 840089c:	10fff716 	blt	r2,r3,840087c <barrier+0xec>
			pend(mailbox_3);
		}
	}
}
 84008a0:	e037883a 	mov	sp,fp
 84008a4:	dfc00117 	ldw	ra,4(sp)
 84008a8:	df000017 	ldw	fp,0(sp)
 84008ac:	dec00204 	addi	sp,sp,8
 84008b0:	f800283a 	ret

084008b4 <pend>:
void pend(alt_mailbox_dev* box){
 84008b4:	defffd04 	addi	sp,sp,-12
 84008b8:	dfc00215 	stw	ra,8(sp)
 84008bc:	df000115 	stw	fp,4(sp)
 84008c0:	df000104 	addi	fp,sp,4
 84008c4:	e13fff15 	stw	r4,-4(fp)
	//printf("MAILBOX PENDING \n");
	altera_avalon_mailbox_pend(box);
 84008c8:	e13fff17 	ldw	r4,-4(fp)
 84008cc:	84058080 	call	8405808 <altera_avalon_mailbox_pend>
}
 84008d0:	e037883a 	mov	sp,fp
 84008d4:	dfc00117 	ldw	ra,4(sp)
 84008d8:	df000017 	ldw	fp,0(sp)
 84008dc:	dec00204 	addi	sp,sp,8
 84008e0:	f800283a 	ret

084008e4 <post>:

void post(int id, alt_u32 mess){
 84008e4:	defffc04 	addi	sp,sp,-16
 84008e8:	dfc00315 	stw	ra,12(sp)
 84008ec:	df000215 	stw	fp,8(sp)
 84008f0:	df000204 	addi	fp,sp,8
 84008f4:	e13ffe15 	stw	r4,-8(fp)
 84008f8:	e17fff15 	stw	r5,-4(fp)
	 //altera_avalon_mailbox_post(box, message);

	 if(id == 0){
 84008fc:	e0bffe17 	ldw	r2,-8(fp)
 8400900:	1004c03a 	cmpne	r2,r2,zero
 8400904:	1000091e 	bne	r2,zero,840092c <post+0x48>
	 //printf("MAILBOX 0 POSTING \n");
	 altera_avalon_mailbox_post(mailbox_1, mess);
 8400908:	d125fc17 	ldw	r4,-26640(gp)
 840090c:	e17fff17 	ldw	r5,-4(fp)
 8400910:	84056fc0 	call	84056fc <altera_avalon_mailbox_post>
	 altera_avalon_mailbox_post(mailbox_2, mess);
 8400914:	d125fb17 	ldw	r4,-26644(gp)
 8400918:	e17fff17 	ldw	r5,-4(fp)
 840091c:	84056fc0 	call	84056fc <altera_avalon_mailbox_post>
	 altera_avalon_mailbox_post(mailbox_3, mess);
 8400920:	d125ff17 	ldw	r4,-26628(gp)
 8400924:	e17fff17 	ldw	r5,-4(fp)
 8400928:	84056fc0 	call	84056fc <altera_avalon_mailbox_post>
	 }
	 if(id == 1){
 840092c:	e0bffe17 	ldw	r2,-8(fp)
 8400930:	10800058 	cmpnei	r2,r2,1
 8400934:	1000091e 	bne	r2,zero,840095c <post+0x78>
	 //printf("MAILBOX 1 POSTING \n");
	 altera_avalon_mailbox_post(mailbox_0, mess);
 8400938:	d125fa17 	ldw	r4,-26648(gp)
 840093c:	e17fff17 	ldw	r5,-4(fp)
 8400940:	84056fc0 	call	84056fc <altera_avalon_mailbox_post>
	 altera_avalon_mailbox_post(mailbox_2, mess);
 8400944:	d125fb17 	ldw	r4,-26644(gp)
 8400948:	e17fff17 	ldw	r5,-4(fp)
 840094c:	84056fc0 	call	84056fc <altera_avalon_mailbox_post>
	 altera_avalon_mailbox_post(mailbox_3, mess);
 8400950:	d125ff17 	ldw	r4,-26628(gp)
 8400954:	e17fff17 	ldw	r5,-4(fp)
 8400958:	84056fc0 	call	84056fc <altera_avalon_mailbox_post>
	 }

	 if(id == 2){
 840095c:	e0bffe17 	ldw	r2,-8(fp)
 8400960:	10800098 	cmpnei	r2,r2,2
 8400964:	1000091e 	bne	r2,zero,840098c <post+0xa8>
	 //printf("MAILBOX 2 POSTING \n");
	 altera_avalon_mailbox_post(mailbox_0, mess);
 8400968:	d125fa17 	ldw	r4,-26648(gp)
 840096c:	e17fff17 	ldw	r5,-4(fp)
 8400970:	84056fc0 	call	84056fc <altera_avalon_mailbox_post>
	 altera_avalon_mailbox_post(mailbox_1, mess);
 8400974:	d125fc17 	ldw	r4,-26640(gp)
 8400978:	e17fff17 	ldw	r5,-4(fp)
 840097c:	84056fc0 	call	84056fc <altera_avalon_mailbox_post>
	 altera_avalon_mailbox_post(mailbox_3, mess);
 8400980:	d125ff17 	ldw	r4,-26628(gp)
 8400984:	e17fff17 	ldw	r5,-4(fp)
 8400988:	84056fc0 	call	84056fc <altera_avalon_mailbox_post>
	 }

	 if(id == 3){
 840098c:	e0bffe17 	ldw	r2,-8(fp)
 8400990:	108000d8 	cmpnei	r2,r2,3
 8400994:	1000091e 	bne	r2,zero,84009bc <post+0xd8>
	 //printf("MAILBOX 3 POSTING \n");
	 altera_avalon_mailbox_post(mailbox_0, mess);
 8400998:	d125fa17 	ldw	r4,-26648(gp)
 840099c:	e17fff17 	ldw	r5,-4(fp)
 84009a0:	84056fc0 	call	84056fc <altera_avalon_mailbox_post>
	 altera_avalon_mailbox_post(mailbox_1, mess);
 84009a4:	d125fc17 	ldw	r4,-26640(gp)
 84009a8:	e17fff17 	ldw	r5,-4(fp)
 84009ac:	84056fc0 	call	84056fc <altera_avalon_mailbox_post>
	 altera_avalon_mailbox_post(mailbox_2, mess);
 84009b0:	d125fb17 	ldw	r4,-26644(gp)
 84009b4:	e17fff17 	ldw	r5,-4(fp)
 84009b8:	84056fc0 	call	84056fc <altera_avalon_mailbox_post>
	 }

}
 84009bc:	e037883a 	mov	sp,fp
 84009c0:	dfc00117 	ldw	ra,4(sp)
 84009c4:	df000017 	ldw	fp,0(sp)
 84009c8:	dec00204 	addi	sp,sp,8
 84009cc:	f800283a 	ret

084009d0 <pow>:
 84009d0:	deffee04 	addi	sp,sp,-72
 84009d4:	ddc01015 	stw	r23,64(sp)
 84009d8:	05c21074 	movhi	r23,2113
 84009dc:	bde8ab04 	addi	r23,r23,-23892
 84009e0:	dd800f15 	stw	r22,60(sp)
 84009e4:	dd400e15 	stw	r21,56(sp)
 84009e8:	dd000d15 	stw	r20,52(sp)
 84009ec:	dcc00c15 	stw	r19,48(sp)
 84009f0:	dc800b15 	stw	r18,44(sp)
 84009f4:	dc400a15 	stw	r17,40(sp)
 84009f8:	dc000915 	stw	r16,36(sp)
 84009fc:	2029883a 	mov	r20,r4
 8400a00:	dfc01115 	stw	ra,68(sp)
 8400a04:	3025883a 	mov	r18,r6
 8400a08:	282b883a 	mov	r21,r5
 8400a0c:	3827883a 	mov	r19,r7
 8400a10:	8400e580 	call	8400e58 <__ieee754_pow>
 8400a14:	b9000017 	ldw	r4,0(r23)
 8400a18:	05bfffc4 	movi	r22,-1
 8400a1c:	1021883a 	mov	r16,r2
 8400a20:	1823883a 	mov	r17,r3
 8400a24:	25800426 	beq	r4,r22,8400a38 <pow+0x68>
 8400a28:	9009883a 	mov	r4,r18
 8400a2c:	980b883a 	mov	r5,r19
 8400a30:	84024540 	call	8402454 <__isnand>
 8400a34:	10000d26 	beq	r2,zero,8400a6c <pow+0x9c>
 8400a38:	8005883a 	mov	r2,r16
 8400a3c:	8807883a 	mov	r3,r17
 8400a40:	dfc01117 	ldw	ra,68(sp)
 8400a44:	ddc01017 	ldw	r23,64(sp)
 8400a48:	dd800f17 	ldw	r22,60(sp)
 8400a4c:	dd400e17 	ldw	r21,56(sp)
 8400a50:	dd000d17 	ldw	r20,52(sp)
 8400a54:	dcc00c17 	ldw	r19,48(sp)
 8400a58:	dc800b17 	ldw	r18,44(sp)
 8400a5c:	dc400a17 	ldw	r17,40(sp)
 8400a60:	dc000917 	ldw	r16,36(sp)
 8400a64:	dec01204 	addi	sp,sp,72
 8400a68:	f800283a 	ret
 8400a6c:	a009883a 	mov	r4,r20
 8400a70:	a80b883a 	mov	r5,r21
 8400a74:	84024540 	call	8402454 <__isnand>
 8400a78:	1000151e 	bne	r2,zero,8400ad0 <pow+0x100>
 8400a7c:	000d883a 	mov	r6,zero
 8400a80:	000f883a 	mov	r7,zero
 8400a84:	a009883a 	mov	r4,r20
 8400a88:	a80b883a 	mov	r5,r21
 8400a8c:	84036a80 	call	84036a8 <__eqdf2>
 8400a90:	1000541e 	bne	r2,zero,8400be4 <pow+0x214>
 8400a94:	000d883a 	mov	r6,zero
 8400a98:	000f883a 	mov	r7,zero
 8400a9c:	9009883a 	mov	r4,r18
 8400aa0:	980b883a 	mov	r5,r19
 8400aa4:	84036a80 	call	84036a8 <__eqdf2>
 8400aa8:	10002c1e 	bne	r2,zero,8400b5c <pow+0x18c>
 8400aac:	b8800017 	ldw	r2,0(r23)
 8400ab0:	d8000615 	stw	zero,24(sp)
 8400ab4:	d8000715 	stw	zero,28(sp)
 8400ab8:	10001226 	beq	r2,zero,8400b04 <pow+0x134>
 8400abc:	008ffc34 	movhi	r2,16368
 8400ac0:	d8800715 	stw	r2,28(sp)
 8400ac4:	dc000617 	ldw	r16,24(sp)
 8400ac8:	dc400717 	ldw	r17,28(sp)
 8400acc:	003fda06 	br	8400a38 <pow+0x68>
 8400ad0:	000d883a 	mov	r6,zero
 8400ad4:	000f883a 	mov	r7,zero
 8400ad8:	9009883a 	mov	r4,r18
 8400adc:	980b883a 	mov	r5,r19
 8400ae0:	84036a80 	call	84036a8 <__eqdf2>
 8400ae4:	103fd41e 	bne	r2,zero,8400a38 <pow+0x68>
 8400ae8:	b8c00017 	ldw	r3,0(r23)
 8400aec:	010ffc34 	movhi	r4,16368
 8400af0:	d8000615 	stw	zero,24(sp)
 8400af4:	d9000715 	stw	r4,28(sp)
 8400af8:	1d801526 	beq	r3,r22,8400b50 <pow+0x180>
 8400afc:	00800084 	movi	r2,2
 8400b00:	18801326 	beq	r3,r2,8400b50 <pow+0x180>
 8400b04:	00821074 	movhi	r2,2113
 8400b08:	10a22404 	addi	r2,r2,-30576
 8400b0c:	00c00044 	movi	r3,1
 8400b10:	d809883a 	mov	r4,sp
 8400b14:	dcc00515 	stw	r19,20(sp)
 8400b18:	dd400315 	stw	r21,12(sp)
 8400b1c:	d8800115 	stw	r2,4(sp)
 8400b20:	d8c00015 	stw	r3,0(sp)
 8400b24:	dc800415 	stw	r18,16(sp)
 8400b28:	dd000215 	stw	r20,8(sp)
 8400b2c:	d8000815 	stw	zero,32(sp)
 8400b30:	84024840 	call	8402484 <matherr>
 8400b34:	10002726 	beq	r2,zero,8400bd4 <pow+0x204>
 8400b38:	d8800817 	ldw	r2,32(sp)
 8400b3c:	103fe126 	beq	r2,zero,8400ac4 <pow+0xf4>
 8400b40:	84045680 	call	8404568 <__errno>
 8400b44:	d8c00817 	ldw	r3,32(sp)
 8400b48:	10c00015 	stw	r3,0(r2)
 8400b4c:	003fdd06 	br	8400ac4 <pow+0xf4>
 8400b50:	d9000715 	stw	r4,28(sp)
 8400b54:	d8000615 	stw	zero,24(sp)
 8400b58:	003fda06 	br	8400ac4 <pow+0xf4>
 8400b5c:	9009883a 	mov	r4,r18
 8400b60:	980b883a 	mov	r5,r19
 8400b64:	84024380 	call	8402438 <finite>
 8400b68:	103fb326 	beq	r2,zero,8400a38 <pow+0x68>
 8400b6c:	000d883a 	mov	r6,zero
 8400b70:	000f883a 	mov	r7,zero
 8400b74:	9009883a 	mov	r4,r18
 8400b78:	980b883a 	mov	r5,r19
 8400b7c:	84038400 	call	8403840 <__ltdf2>
 8400b80:	103fad0e 	bge	r2,zero,8400a38 <pow+0x68>
 8400b84:	b9000017 	ldw	r4,0(r23)
 8400b88:	00800044 	movi	r2,1
 8400b8c:	00c21074 	movhi	r3,2113
 8400b90:	18e22404 	addi	r3,r3,-30576
 8400b94:	d8800015 	stw	r2,0(sp)
 8400b98:	d8c00115 	stw	r3,4(sp)
 8400b9c:	dd400315 	stw	r21,12(sp)
 8400ba0:	dcc00515 	stw	r19,20(sp)
 8400ba4:	d8000815 	stw	zero,32(sp)
 8400ba8:	dd000215 	stw	r20,8(sp)
 8400bac:	dc800415 	stw	r18,16(sp)
 8400bb0:	20005626 	beq	r4,zero,8400d0c <pow+0x33c>
 8400bb4:	00bffc34 	movhi	r2,65520
 8400bb8:	d8800715 	stw	r2,28(sp)
 8400bbc:	00800084 	movi	r2,2
 8400bc0:	d8000615 	stw	zero,24(sp)
 8400bc4:	20800326 	beq	r4,r2,8400bd4 <pow+0x204>
 8400bc8:	d809883a 	mov	r4,sp
 8400bcc:	84024840 	call	8402484 <matherr>
 8400bd0:	103fd91e 	bne	r2,zero,8400b38 <pow+0x168>
 8400bd4:	84045680 	call	8404568 <__errno>
 8400bd8:	00c00844 	movi	r3,33
 8400bdc:	10c00015 	stw	r3,0(r2)
 8400be0:	003fd506 	br	8400b38 <pow+0x168>
 8400be4:	8009883a 	mov	r4,r16
 8400be8:	880b883a 	mov	r5,r17
 8400bec:	84024380 	call	8402438 <finite>
 8400bf0:	10002426 	beq	r2,zero,8400c84 <pow+0x2b4>
 8400bf4:	000d883a 	mov	r6,zero
 8400bf8:	000f883a 	mov	r7,zero
 8400bfc:	8009883a 	mov	r4,r16
 8400c00:	880b883a 	mov	r5,r17
 8400c04:	84036a80 	call	84036a8 <__eqdf2>
 8400c08:	103f8b1e 	bne	r2,zero,8400a38 <pow+0x68>
 8400c0c:	a009883a 	mov	r4,r20
 8400c10:	a80b883a 	mov	r5,r21
 8400c14:	84024380 	call	8402438 <finite>
 8400c18:	103f8726 	beq	r2,zero,8400a38 <pow+0x68>
 8400c1c:	9009883a 	mov	r4,r18
 8400c20:	980b883a 	mov	r5,r19
 8400c24:	84024380 	call	8402438 <finite>
 8400c28:	103f8326 	beq	r2,zero,8400a38 <pow+0x68>
 8400c2c:	b9000017 	ldw	r4,0(r23)
 8400c30:	00800104 	movi	r2,4
 8400c34:	d8800015 	stw	r2,0(sp)
 8400c38:	00c21074 	movhi	r3,2113
 8400c3c:	18e22404 	addi	r3,r3,-30576
 8400c40:	00800084 	movi	r2,2
 8400c44:	d8c00115 	stw	r3,4(sp)
 8400c48:	dd400315 	stw	r21,12(sp)
 8400c4c:	dcc00515 	stw	r19,20(sp)
 8400c50:	d8000815 	stw	zero,32(sp)
 8400c54:	dd000215 	stw	r20,8(sp)
 8400c58:	dc800415 	stw	r18,16(sp)
 8400c5c:	d8000615 	stw	zero,24(sp)
 8400c60:	d8000715 	stw	zero,28(sp)
 8400c64:	20800326 	beq	r4,r2,8400c74 <pow+0x2a4>
 8400c68:	d809883a 	mov	r4,sp
 8400c6c:	84024840 	call	8402484 <matherr>
 8400c70:	103fb11e 	bne	r2,zero,8400b38 <pow+0x168>
 8400c74:	84045680 	call	8404568 <__errno>
 8400c78:	00c00884 	movi	r3,34
 8400c7c:	10c00015 	stw	r3,0(r2)
 8400c80:	003fad06 	br	8400b38 <pow+0x168>
 8400c84:	a009883a 	mov	r4,r20
 8400c88:	a80b883a 	mov	r5,r21
 8400c8c:	84024380 	call	8402438 <finite>
 8400c90:	103fd826 	beq	r2,zero,8400bf4 <pow+0x224>
 8400c94:	9009883a 	mov	r4,r18
 8400c98:	980b883a 	mov	r5,r19
 8400c9c:	84024380 	call	8402438 <finite>
 8400ca0:	103fd426 	beq	r2,zero,8400bf4 <pow+0x224>
 8400ca4:	880b883a 	mov	r5,r17
 8400ca8:	8009883a 	mov	r4,r16
 8400cac:	84024540 	call	8402454 <__isnand>
 8400cb0:	10001926 	beq	r2,zero,8400d18 <pow+0x348>
 8400cb4:	bc000017 	ldw	r16,0(r23)
 8400cb8:	00800044 	movi	r2,1
 8400cbc:	00c21074 	movhi	r3,2113
 8400cc0:	18e22404 	addi	r3,r3,-30576
 8400cc4:	d8800015 	stw	r2,0(sp)
 8400cc8:	d8c00115 	stw	r3,4(sp)
 8400ccc:	dd400315 	stw	r21,12(sp)
 8400cd0:	dcc00515 	stw	r19,20(sp)
 8400cd4:	d8000815 	stw	zero,32(sp)
 8400cd8:	dd000215 	stw	r20,8(sp)
 8400cdc:	dc800415 	stw	r18,16(sp)
 8400ce0:	80000a26 	beq	r16,zero,8400d0c <pow+0x33c>
 8400ce4:	0009883a 	mov	r4,zero
 8400ce8:	000d883a 	mov	r6,zero
 8400cec:	000b883a 	mov	r5,zero
 8400cf0:	000f883a 	mov	r7,zero
 8400cf4:	84034500 	call	8403450 <__divdf3>
 8400cf8:	d8800615 	stw	r2,24(sp)
 8400cfc:	00800084 	movi	r2,2
 8400d00:	d8c00715 	stw	r3,28(sp)
 8400d04:	80bfb01e 	bne	r16,r2,8400bc8 <pow+0x1f8>
 8400d08:	003fb206 	br	8400bd4 <pow+0x204>
 8400d0c:	d8000615 	stw	zero,24(sp)
 8400d10:	d8000715 	stw	zero,28(sp)
 8400d14:	003fac06 	br	8400bc8 <pow+0x1f8>
 8400d18:	b8800017 	ldw	r2,0(r23)
 8400d1c:	00c000c4 	movi	r3,3
 8400d20:	01021074 	movhi	r4,2113
 8400d24:	21222404 	addi	r4,r4,-30576
 8400d28:	d8c00015 	stw	r3,0(sp)
 8400d2c:	d9000115 	stw	r4,4(sp)
 8400d30:	d8000815 	stw	zero,32(sp)
 8400d34:	dd000215 	stw	r20,8(sp)
 8400d38:	dd400315 	stw	r21,12(sp)
 8400d3c:	dc800415 	stw	r18,16(sp)
 8400d40:	dcc00515 	stw	r19,20(sp)
 8400d44:	1000251e 	bne	r2,zero,8400ddc <pow+0x40c>
 8400d48:	05b80034 	movhi	r22,57344
 8400d4c:	0091fc34 	movhi	r2,18416
 8400d50:	10bfffc4 	addi	r2,r2,-1
 8400d54:	000d883a 	mov	r6,zero
 8400d58:	000f883a 	mov	r7,zero
 8400d5c:	a80b883a 	mov	r5,r21
 8400d60:	a009883a 	mov	r4,r20
 8400d64:	d8800715 	stw	r2,28(sp)
 8400d68:	dd800615 	stw	r22,24(sp)
 8400d6c:	84038400 	call	8403840 <__ltdf2>
 8400d70:	103fbd0e 	bge	r2,zero,8400c68 <pow+0x298>
 8400d74:	0005883a 	mov	r2,zero
 8400d78:	00cff834 	movhi	r3,16352
 8400d7c:	180f883a 	mov	r7,r3
 8400d80:	100d883a 	mov	r6,r2
 8400d84:	980b883a 	mov	r5,r19
 8400d88:	9009883a 	mov	r4,r18
 8400d8c:	840308c0 	call	840308c <__muldf3>
 8400d90:	1009883a 	mov	r4,r2
 8400d94:	180b883a 	mov	r5,r3
 8400d98:	1021883a 	mov	r16,r2
 8400d9c:	1823883a 	mov	r17,r3
 8400da0:	840249c0 	call	840249c <rint>
 8400da4:	180f883a 	mov	r7,r3
 8400da8:	8009883a 	mov	r4,r16
 8400dac:	880b883a 	mov	r5,r17
 8400db0:	100d883a 	mov	r6,r2
 8400db4:	84037300 	call	8403730 <__nedf2>
 8400db8:	10000426 	beq	r2,zero,8400dcc <pow+0x3fc>
 8400dbc:	00b1fc34 	movhi	r2,51184
 8400dc0:	10bfffc4 	addi	r2,r2,-1
 8400dc4:	dd800615 	stw	r22,24(sp)
 8400dc8:	d8800715 	stw	r2,28(sp)
 8400dcc:	b8c00017 	ldw	r3,0(r23)
 8400dd0:	00800084 	movi	r2,2
 8400dd4:	18bfa41e 	bne	r3,r2,8400c68 <pow+0x298>
 8400dd8:	003fa606 	br	8400c74 <pow+0x2a4>
 8400ddc:	009ffc34 	movhi	r2,32752
 8400de0:	000d883a 	mov	r6,zero
 8400de4:	000f883a 	mov	r7,zero
 8400de8:	a80b883a 	mov	r5,r21
 8400dec:	a009883a 	mov	r4,r20
 8400df0:	d8800715 	stw	r2,28(sp)
 8400df4:	d8000615 	stw	zero,24(sp)
 8400df8:	84038400 	call	8403840 <__ltdf2>
 8400dfc:	103ff30e 	bge	r2,zero,8400dcc <pow+0x3fc>
 8400e00:	0005883a 	mov	r2,zero
 8400e04:	00cff834 	movhi	r3,16352
 8400e08:	180f883a 	mov	r7,r3
 8400e0c:	100d883a 	mov	r6,r2
 8400e10:	980b883a 	mov	r5,r19
 8400e14:	9009883a 	mov	r4,r18
 8400e18:	840308c0 	call	840308c <__muldf3>
 8400e1c:	1009883a 	mov	r4,r2
 8400e20:	180b883a 	mov	r5,r3
 8400e24:	1021883a 	mov	r16,r2
 8400e28:	1823883a 	mov	r17,r3
 8400e2c:	840249c0 	call	840249c <rint>
 8400e30:	180f883a 	mov	r7,r3
 8400e34:	8009883a 	mov	r4,r16
 8400e38:	880b883a 	mov	r5,r17
 8400e3c:	100d883a 	mov	r6,r2
 8400e40:	84037300 	call	8403730 <__nedf2>
 8400e44:	103fe126 	beq	r2,zero,8400dcc <pow+0x3fc>
 8400e48:	00bffc34 	movhi	r2,65520
 8400e4c:	d8800715 	stw	r2,28(sp)
 8400e50:	d8000615 	stw	zero,24(sp)
 8400e54:	003fdd06 	br	8400dcc <pow+0x3fc>

08400e58 <__ieee754_pow>:
 8400e58:	deffbb04 	addi	sp,sp,-276
 8400e5c:	3005883a 	mov	r2,r6
 8400e60:	dd404015 	stw	r21,256(sp)
 8400e64:	dd003f15 	stw	r20,252(sp)
 8400e68:	d9802815 	stw	r6,160(sp)
 8400e6c:	2029883a 	mov	r20,r4
 8400e70:	282b883a 	mov	r21,r5
 8400e74:	3009883a 	mov	r4,r6
 8400e78:	380b883a 	mov	r5,r7
 8400e7c:	01a00034 	movhi	r6,32768
 8400e80:	31bfffc4 	addi	r6,r6,-1
 8400e84:	dc003b15 	stw	r16,236(sp)
 8400e88:	29a0703a 	and	r16,r5,r6
 8400e8c:	1404b03a 	or	r2,r2,r16
 8400e90:	dd804115 	stw	r22,260(sp)
 8400e94:	dc403c15 	stw	r17,240(sp)
 8400e98:	d9c02915 	stw	r7,164(sp)
 8400e9c:	382d883a 	mov	r22,r7
 8400ea0:	dfc04415 	stw	ra,272(sp)
 8400ea4:	200f883a 	mov	r7,r4
 8400ea8:	df004315 	stw	fp,268(sp)
 8400eac:	ddc04215 	stw	r23,264(sp)
 8400eb0:	dcc03e15 	stw	r19,248(sp)
 8400eb4:	dc803d15 	stw	r18,244(sp)
 8400eb8:	a023883a 	mov	r17,r20
 8400ebc:	2809883a 	mov	r4,r5
 8400ec0:	10000826 	beq	r2,zero,8400ee4 <__ieee754_pow+0x8c>
 8400ec4:	a9a4703a 	and	r18,r21,r6
 8400ec8:	009ffc34 	movhi	r2,32752
 8400ecc:	a827883a 	mov	r19,r21
 8400ed0:	1480180e 	bge	r2,r18,8400f34 <__ieee754_pow+0xdc>
 8400ed4:	00b00434 	movhi	r2,49168
 8400ed8:	9085883a 	add	r2,r18,r2
 8400edc:	8884b03a 	or	r2,r17,r2
 8400ee0:	1000321e 	bne	r2,zero,8400fac <__ieee754_pow+0x154>
 8400ee4:	0009883a 	mov	r4,zero
 8400ee8:	014ffc34 	movhi	r5,16368
 8400eec:	d9002815 	stw	r4,160(sp)
 8400ef0:	d9402915 	stw	r5,164(sp)
 8400ef4:	d9002817 	ldw	r4,160(sp)
 8400ef8:	d9402917 	ldw	r5,164(sp)
 8400efc:	2005883a 	mov	r2,r4
 8400f00:	2807883a 	mov	r3,r5
 8400f04:	dfc04417 	ldw	ra,272(sp)
 8400f08:	df004317 	ldw	fp,268(sp)
 8400f0c:	ddc04217 	ldw	r23,264(sp)
 8400f10:	dd804117 	ldw	r22,260(sp)
 8400f14:	dd404017 	ldw	r21,256(sp)
 8400f18:	dd003f17 	ldw	r20,252(sp)
 8400f1c:	dcc03e17 	ldw	r19,248(sp)
 8400f20:	dc803d17 	ldw	r18,244(sp)
 8400f24:	dc403c17 	ldw	r17,240(sp)
 8400f28:	dc003b17 	ldw	r16,236(sp)
 8400f2c:	dec04504 	addi	sp,sp,276
 8400f30:	f800283a 	ret
 8400f34:	90802b26 	beq	r18,r2,8400fe4 <__ieee754_pow+0x18c>
 8400f38:	143fe616 	blt	r2,r16,8400ed4 <__ieee754_pow+0x7c>
 8400f3c:	80806126 	beq	r16,r2,84010c4 <__ieee754_pow+0x26c>
 8400f40:	982e403a 	cmpge	r23,r19,zero
 8400f44:	b8004e26 	beq	r23,zero,8401080 <__ieee754_pow+0x228>
 8400f48:	0039883a 	mov	fp,zero
 8400f4c:	3800281e 	bne	r7,zero,8400ff0 <__ieee754_pow+0x198>
 8400f50:	009ffc34 	movhi	r2,32752
 8400f54:	80804f26 	beq	r16,r2,8401094 <__ieee754_pow+0x23c>
 8400f58:	008ffc34 	movhi	r2,16368
 8400f5c:	80808226 	beq	r16,r2,8401168 <__ieee754_pow+0x310>
 8400f60:	00900034 	movhi	r2,16384
 8400f64:	20828426 	beq	r4,r2,8401978 <__ieee754_pow+0xb20>
 8400f68:	008ff834 	movhi	r2,16352
 8400f6c:	2080201e 	bne	r4,r2,8400ff0 <__ieee754_pow+0x198>
 8400f70:	98001f16 	blt	r19,zero,8400ff0 <__ieee754_pow+0x198>
 8400f74:	a80b883a 	mov	r5,r21
 8400f78:	a009883a 	mov	r4,r20
 8400f7c:	dfc04417 	ldw	ra,272(sp)
 8400f80:	df004317 	ldw	fp,268(sp)
 8400f84:	ddc04217 	ldw	r23,264(sp)
 8400f88:	dd804117 	ldw	r22,260(sp)
 8400f8c:	dd404017 	ldw	r21,256(sp)
 8400f90:	dd003f17 	ldw	r20,252(sp)
 8400f94:	dcc03e17 	ldw	r19,248(sp)
 8400f98:	dc803d17 	ldw	r18,244(sp)
 8400f9c:	dc403c17 	ldw	r17,240(sp)
 8400fa0:	dc003b17 	ldw	r16,236(sp)
 8400fa4:	dec04504 	addi	sp,sp,276
 8400fa8:	84021581 	jmpi	8402158 <__ieee754_sqrt>
 8400fac:	01021074 	movhi	r4,2113
 8400fb0:	21222504 	addi	r4,r4,-30572
 8400fb4:	dfc04417 	ldw	ra,272(sp)
 8400fb8:	df004317 	ldw	fp,268(sp)
 8400fbc:	ddc04217 	ldw	r23,264(sp)
 8400fc0:	dd804117 	ldw	r22,260(sp)
 8400fc4:	dd404017 	ldw	r21,256(sp)
 8400fc8:	dd003f17 	ldw	r20,252(sp)
 8400fcc:	dcc03e17 	ldw	r19,248(sp)
 8400fd0:	dc803d17 	ldw	r18,244(sp)
 8400fd4:	dc403c17 	ldw	r17,240(sp)
 8400fd8:	dc003b17 	ldw	r16,236(sp)
 8400fdc:	dec04504 	addi	sp,sp,276
 8400fe0:	840248c1 	jmpi	840248c <nan>
 8400fe4:	a03fbb1e 	bne	r20,zero,8400ed4 <__ieee754_pow+0x7c>
 8400fe8:	003fd306 	br	8400f38 <__ieee754_pow+0xe0>
 8400fec:	0039883a 	mov	fp,zero
 8400ff0:	a009883a 	mov	r4,r20
 8400ff4:	a80b883a 	mov	r5,r21
 8400ff8:	84024200 	call	8402420 <fabs>
 8400ffc:	1015883a 	mov	r10,r2
 8401000:	1817883a 	mov	r11,r3
 8401004:	88001226 	beq	r17,zero,8401050 <__ieee754_pow+0x1f8>
 8401008:	9804d7fa 	srli	r2,r19,31
 840100c:	10bfffc4 	addi	r2,r2,-1
 8401010:	1706b03a 	or	r3,r2,fp
 8401014:	d8802515 	stw	r2,148(sp)
 8401018:	18002c1e 	bne	r3,zero,84010cc <__ieee754_pow+0x274>
 840101c:	a80f883a 	mov	r7,r21
 8401020:	a009883a 	mov	r4,r20
 8401024:	a80b883a 	mov	r5,r21
 8401028:	a00d883a 	mov	r6,r20
 840102c:	8402f980 	call	8402f98 <__subdf3>
 8401030:	1009883a 	mov	r4,r2
 8401034:	180b883a 	mov	r5,r3
 8401038:	100d883a 	mov	r6,r2
 840103c:	180f883a 	mov	r7,r3
 8401040:	84034500 	call	8403450 <__divdf3>
 8401044:	d8802815 	stw	r2,160(sp)
 8401048:	d8c02915 	stw	r3,164(sp)
 840104c:	003fa906 	br	8400ef4 <__ieee754_pow+0x9c>
 8401050:	009ffc34 	movhi	r2,32752
 8401054:	90800326 	beq	r18,r2,8401064 <__ieee754_pow+0x20c>
 8401058:	90000226 	beq	r18,zero,8401064 <__ieee754_pow+0x20c>
 840105c:	008ffc34 	movhi	r2,16368
 8401060:	90bfe91e 	bne	r18,r2,8401008 <__ieee754_pow+0x1b0>
 8401064:	b0026316 	blt	r22,zero,84019f4 <__ieee754_pow+0xb9c>
 8401068:	5011883a 	mov	r8,r10
 840106c:	5813883a 	mov	r9,r11
 8401070:	b8023126 	beq	r23,zero,8401938 <__ieee754_pow+0xae0>
 8401074:	da002815 	stw	r8,160(sp)
 8401078:	da402915 	stw	r9,164(sp)
 840107c:	003f9d06 	br	8400ef4 <__ieee754_pow+0x9c>
 8401080:	0090d034 	movhi	r2,17216
 8401084:	10bfffc4 	addi	r2,r2,-1
 8401088:	1400270e 	bge	r2,r16,8401128 <__ieee754_pow+0x2d0>
 840108c:	07000084 	movi	fp,2
 8401090:	003fae06 	br	8400f4c <__ieee754_pow+0xf4>
 8401094:	00b00434 	movhi	r2,49168
 8401098:	9085883a 	add	r2,r18,r2
 840109c:	8884b03a 	or	r2,r17,r2
 84010a0:	103f9026 	beq	r2,zero,8400ee4 <__ieee754_pow+0x8c>
 84010a4:	008ffc34 	movhi	r2,16368
 84010a8:	10bfffc4 	addi	r2,r2,-1
 84010ac:	1482d00e 	bge	r2,r18,8401bf0 <__ieee754_pow+0xd98>
 84010b0:	b03f900e 	bge	r22,zero,8400ef4 <__ieee754_pow+0x9c>
 84010b4:	0005883a 	mov	r2,zero
 84010b8:	d8802815 	stw	r2,160(sp)
 84010bc:	d8802915 	stw	r2,164(sp)
 84010c0:	003f8c06 	br	8400ef4 <__ieee754_pow+0x9c>
 84010c4:	383f9e26 	beq	r7,zero,8400f40 <__ieee754_pow+0xe8>
 84010c8:	003f8206 	br	8400ed4 <__ieee754_pow+0x7c>
 84010cc:	00907834 	movhi	r2,16864
 84010d0:	1400290e 	bge	r2,r16,8401178 <__ieee754_pow+0x320>
 84010d4:	0090fc34 	movhi	r2,17392
 84010d8:	1402500e 	bge	r2,r16,8401a1c <__ieee754_pow+0xbc4>
 84010dc:	008ffc34 	movhi	r2,16368
 84010e0:	10bfffc4 	addi	r2,r2,-1
 84010e4:	14800b0e 	bge	r2,r18,8401114 <__ieee754_pow+0x2bc>
 84010e8:	05800b0e 	bge	zero,r22,8401118 <__ieee754_pow+0x2c0>
 84010ec:	00a20034 	movhi	r2,34816
 84010f0:	109d6704 	addi	r2,r2,30108
 84010f4:	00df8e34 	movhi	r3,32312
 84010f8:	18f90f04 	addi	r3,r3,-7108
 84010fc:	100d883a 	mov	r6,r2
 8401100:	180f883a 	mov	r7,r3
 8401104:	1009883a 	mov	r4,r2
 8401108:	180b883a 	mov	r5,r3
 840110c:	840308c0 	call	840308c <__muldf3>
 8401110:	003fcc06 	br	8401044 <__ieee754_pow+0x1ec>
 8401114:	b03ff516 	blt	r22,zero,84010ec <__ieee754_pow+0x294>
 8401118:	0007883a 	mov	r3,zero
 840111c:	d8c02815 	stw	r3,160(sp)
 8401120:	d8c02915 	stw	r3,164(sp)
 8401124:	003f7306 	br	8400ef4 <__ieee754_pow+0x9c>
 8401128:	008ffc34 	movhi	r2,16368
 840112c:	10bfffc4 	addi	r2,r2,-1
 8401130:	143f850e 	bge	r2,r16,8400f48 <__ieee754_pow+0xf0>
 8401134:	8005d53a 	srai	r2,r16,20
 8401138:	01400504 	movi	r5,20
 840113c:	10ff0044 	addi	r3,r2,-1023
 8401140:	28c3e10e 	bge	r5,r3,84020c8 <__ieee754_pow+0x1270>
 8401144:	00800d04 	movi	r2,52
 8401148:	10c5c83a 	sub	r2,r2,r3
 840114c:	3886d83a 	srl	r3,r7,r2
 8401150:	1884983a 	sll	r2,r3,r2
 8401154:	38bf7c1e 	bne	r7,r2,8400f48 <__ieee754_pow+0xf0>
 8401158:	18c0004c 	andi	r3,r3,1
 840115c:	00800084 	movi	r2,2
 8401160:	10f9c83a 	sub	fp,r2,r3
 8401164:	003f7906 	br	8400f4c <__ieee754_pow+0xf4>
 8401168:	b0038516 	blt	r22,zero,8401f80 <__ieee754_pow+0x1128>
 840116c:	dd002815 	stw	r20,160(sp)
 8401170:	dd402915 	stw	r21,164(sp)
 8401174:	003f5f06 	br	8400ef4 <__ieee754_pow+0x9c>
 8401178:	00800434 	movhi	r2,16
 840117c:	10bfffc4 	addi	r2,r2,-1
 8401180:	1482900e 	bge	r2,r18,8401bc4 <__ieee754_pow+0xd6c>
 8401184:	000b883a 	mov	r5,zero
 8401188:	9005d53a 	srai	r2,r18,20
 840118c:	00c00434 	movhi	r3,16
 8401190:	18ffffc4 	addi	r3,r3,-1
 8401194:	90c8703a 	and	r4,r18,r3
 8401198:	2887883a 	add	r3,r5,r2
 840119c:	18bf0044 	addi	r2,r3,-1023
 84011a0:	d8800015 	stw	r2,0(sp)
 84011a4:	00800134 	movhi	r2,4
 84011a8:	10a62384 	addi	r2,r2,-26482
 84011ac:	250ffc34 	orhi	r20,r4,16368
 84011b0:	1101ee0e 	bge	r2,r4,840196c <__ieee754_pow+0xb14>
 84011b4:	00800334 	movhi	r2,12
 84011b8:	10ad9e44 	addi	r2,r2,-18823
 84011bc:	1101e716 	blt	r2,r4,840195c <__ieee754_pow+0xb04>
 84011c0:	01000044 	movi	r4,1
 84011c4:	04000334 	movhi	r16,12
 84011c8:	200890fa 	slli	r4,r4,3
 84011cc:	da800115 	stw	r10,4(sp)
 84011d0:	dd000215 	stw	r20,8(sp)
 84011d4:	d9002c15 	stw	r4,176(sp)
 84011d8:	d9402c17 	ldw	r5,176(sp)
 84011dc:	01021074 	movhi	r4,2113
 84011e0:	21222604 	addi	r4,r4,-30568
 84011e4:	a02bd07a 	srai	r21,r20,1
 84011e8:	2909883a 	add	r4,r5,r4
 84011ec:	25800017 	ldw	r22,0(r4)
 84011f0:	25c00117 	ldw	r23,4(r4)
 84011f4:	a00b883a 	mov	r5,r20
 84011f8:	5009883a 	mov	r4,r10
 84011fc:	b00d883a 	mov	r6,r22
 8401200:	b80f883a 	mov	r7,r23
 8401204:	8402f980 	call	8402f98 <__subdf3>
 8401208:	d9000117 	ldw	r4,4(sp)
 840120c:	a00b883a 	mov	r5,r20
 8401210:	b00d883a 	mov	r6,r22
 8401214:	b80f883a 	mov	r7,r23
 8401218:	1025883a 	mov	r18,r2
 840121c:	1827883a 	mov	r19,r3
 8401220:	84030180 	call	8403018 <__adddf3>
 8401224:	0011883a 	mov	r8,zero
 8401228:	024ffc34 	movhi	r9,16368
 840122c:	480b883a 	mov	r5,r9
 8401230:	4009883a 	mov	r4,r8
 8401234:	180f883a 	mov	r7,r3
 8401238:	100d883a 	mov	r6,r2
 840123c:	84034500 	call	8403450 <__divdf3>
 8401240:	d8c02e15 	stw	r3,184(sp)
 8401244:	d8800f15 	stw	r2,60(sp)
 8401248:	d8802d15 	stw	r2,180(sp)
 840124c:	d8802e17 	ldw	r2,184(sp)
 8401250:	d9800f17 	ldw	r6,60(sp)
 8401254:	9009883a 	mov	r4,r18
 8401258:	980b883a 	mov	r5,r19
 840125c:	100f883a 	mov	r7,r2
 8401260:	dc800b15 	stw	r18,44(sp)
 8401264:	dcc00c15 	stw	r19,48(sp)
 8401268:	d8801015 	stw	r2,64(sp)
 840126c:	840308c0 	call	840308c <__muldf3>
 8401270:	d8c03015 	stw	r3,192(sp)
 8401274:	d9003017 	ldw	r4,192(sp)
 8401278:	d8802f15 	stw	r2,188(sp)
 840127c:	d8800315 	stw	r2,12(sp)
 8401280:	ad480034 	orhi	r21,r21,8192
 8401284:	0005883a 	mov	r2,zero
 8401288:	ac2b883a 	add	r21,r21,r16
 840128c:	000b883a 	mov	r5,zero
 8401290:	1021883a 	mov	r16,r2
 8401294:	2005883a 	mov	r2,r4
 8401298:	800d883a 	mov	r6,r16
 840129c:	a80f883a 	mov	r7,r21
 84012a0:	d9000415 	stw	r4,16(sp)
 84012a4:	d9002715 	stw	r4,156(sp)
 84012a8:	d9402615 	stw	r5,152(sp)
 84012ac:	d9401615 	stw	r5,88(sp)
 84012b0:	d9001715 	stw	r4,92(sp)
 84012b4:	100b883a 	mov	r5,r2
 84012b8:	0009883a 	mov	r4,zero
 84012bc:	840308c0 	call	840308c <__muldf3>
 84012c0:	d9000b17 	ldw	r4,44(sp)
 84012c4:	980b883a 	mov	r5,r19
 84012c8:	180f883a 	mov	r7,r3
 84012cc:	100d883a 	mov	r6,r2
 84012d0:	8402f980 	call	8402f98 <__subdf3>
 84012d4:	8009883a 	mov	r4,r16
 84012d8:	a80b883a 	mov	r5,r21
 84012dc:	b80f883a 	mov	r7,r23
 84012e0:	b00d883a 	mov	r6,r22
 84012e4:	1021883a 	mov	r16,r2
 84012e8:	1823883a 	mov	r17,r3
 84012ec:	8402f980 	call	8402f98 <__subdf3>
 84012f0:	d9000117 	ldw	r4,4(sp)
 84012f4:	a00b883a 	mov	r5,r20
 84012f8:	180f883a 	mov	r7,r3
 84012fc:	100d883a 	mov	r6,r2
 8401300:	8402f980 	call	8402f98 <__subdf3>
 8401304:	d9001617 	ldw	r4,88(sp)
 8401308:	d9402717 	ldw	r5,156(sp)
 840130c:	180f883a 	mov	r7,r3
 8401310:	100d883a 	mov	r6,r2
 8401314:	840308c0 	call	840308c <__muldf3>
 8401318:	180f883a 	mov	r7,r3
 840131c:	880b883a 	mov	r5,r17
 8401320:	8009883a 	mov	r4,r16
 8401324:	100d883a 	mov	r6,r2
 8401328:	8402f980 	call	8402f98 <__subdf3>
 840132c:	d9000f17 	ldw	r4,60(sp)
 8401330:	d9402e17 	ldw	r5,184(sp)
 8401334:	180f883a 	mov	r7,r3
 8401338:	100d883a 	mov	r6,r2
 840133c:	840308c0 	call	840308c <__muldf3>
 8401340:	d9000317 	ldw	r4,12(sp)
 8401344:	d9403017 	ldw	r5,192(sp)
 8401348:	d8803115 	stw	r2,196(sp)
 840134c:	200d883a 	mov	r6,r4
 8401350:	280f883a 	mov	r7,r5
 8401354:	d8c03215 	stw	r3,200(sp)
 8401358:	840308c0 	call	840308c <__muldf3>
 840135c:	1009883a 	mov	r4,r2
 8401360:	180b883a 	mov	r5,r3
 8401364:	100d883a 	mov	r6,r2
 8401368:	180f883a 	mov	r7,r3
 840136c:	1021883a 	mov	r16,r2
 8401370:	1823883a 	mov	r17,r3
 8401374:	840308c0 	call	840308c <__muldf3>
 8401378:	02129174 	movhi	r8,19013
 840137c:	4213bbc4 	addi	r8,r8,20207
 8401380:	024ff2b4 	movhi	r9,16330
 8401384:	4a5f8a04 	addi	r9,r9,32296
 8401388:	480f883a 	mov	r7,r9
 840138c:	8009883a 	mov	r4,r16
 8401390:	880b883a 	mov	r5,r17
 8401394:	400d883a 	mov	r6,r8
 8401398:	1029883a 	mov	r20,r2
 840139c:	182b883a 	mov	r21,r3
 84013a0:	840308c0 	call	840308c <__muldf3>
 84013a4:	0224f2b4 	movhi	r8,37834
 84013a8:	4236d944 	addi	r8,r8,-9371
 84013ac:	024ff3b4 	movhi	r9,16334
 84013b0:	4a619284 	addi	r9,r9,-31158
 84013b4:	480f883a 	mov	r7,r9
 84013b8:	400d883a 	mov	r6,r8
 84013bc:	180b883a 	mov	r5,r3
 84013c0:	1009883a 	mov	r4,r2
 84013c4:	84030180 	call	8403018 <__adddf3>
 84013c8:	180f883a 	mov	r7,r3
 84013cc:	8009883a 	mov	r4,r16
 84013d0:	880b883a 	mov	r5,r17
 84013d4:	100d883a 	mov	r6,r2
 84013d8:	840308c0 	call	840308c <__muldf3>
 84013dc:	022a4774 	movhi	r8,43293
 84013e0:	42104044 	addi	r8,r8,16641
 84013e4:	024ff474 	movhi	r9,16337
 84013e8:	4a5d1804 	addi	r9,r9,29792
 84013ec:	480f883a 	mov	r7,r9
 84013f0:	400d883a 	mov	r6,r8
 84013f4:	180b883a 	mov	r5,r3
 84013f8:	1009883a 	mov	r4,r2
 84013fc:	84030180 	call	8403018 <__adddf3>
 8401400:	180f883a 	mov	r7,r3
 8401404:	8009883a 	mov	r4,r16
 8401408:	880b883a 	mov	r5,r17
 840140c:	100d883a 	mov	r6,r2
 8401410:	840308c0 	call	840308c <__muldf3>
 8401414:	021463f4 	movhi	r8,20879
 8401418:	42099344 	addi	r8,r8,9805
 840141c:	024ff574 	movhi	r9,16341
 8401420:	4a555544 	addi	r9,r9,21845
 8401424:	480f883a 	mov	r7,r9
 8401428:	400d883a 	mov	r6,r8
 840142c:	180b883a 	mov	r5,r3
 8401430:	1009883a 	mov	r4,r2
 8401434:	84030180 	call	8403018 <__adddf3>
 8401438:	180f883a 	mov	r7,r3
 840143c:	8009883a 	mov	r4,r16
 8401440:	880b883a 	mov	r5,r17
 8401444:	100d883a 	mov	r6,r2
 8401448:	840308c0 	call	840308c <__muldf3>
 840144c:	0236dc34 	movhi	r8,56176
 8401450:	422affc4 	addi	r8,r8,-21505
 8401454:	024ff6f4 	movhi	r9,16347
 8401458:	4a5b6d84 	addi	r9,r9,28086
 840145c:	480f883a 	mov	r7,r9
 8401460:	400d883a 	mov	r6,r8
 8401464:	180b883a 	mov	r5,r3
 8401468:	1009883a 	mov	r4,r2
 840146c:	84030180 	call	8403018 <__adddf3>
 8401470:	180f883a 	mov	r7,r3
 8401474:	8009883a 	mov	r4,r16
 8401478:	880b883a 	mov	r5,r17
 840147c:	100d883a 	mov	r6,r2
 8401480:	840308c0 	call	840308c <__muldf3>
 8401484:	020cccf4 	movhi	r8,13107
 8401488:	420cc0c4 	addi	r8,r8,13059
 840148c:	024ff8f4 	movhi	r9,16355
 8401490:	4a4cccc4 	addi	r9,r9,13107
 8401494:	480f883a 	mov	r7,r9
 8401498:	400d883a 	mov	r6,r8
 840149c:	180b883a 	mov	r5,r3
 84014a0:	1009883a 	mov	r4,r2
 84014a4:	84030180 	call	8403018 <__adddf3>
 84014a8:	180f883a 	mov	r7,r3
 84014ac:	a80b883a 	mov	r5,r21
 84014b0:	a009883a 	mov	r4,r20
 84014b4:	100d883a 	mov	r6,r2
 84014b8:	840308c0 	call	840308c <__muldf3>
 84014bc:	d9000317 	ldw	r4,12(sp)
 84014c0:	d9403017 	ldw	r5,192(sp)
 84014c4:	d9801617 	ldw	r6,88(sp)
 84014c8:	d9c02717 	ldw	r7,156(sp)
 84014cc:	1021883a 	mov	r16,r2
 84014d0:	1823883a 	mov	r17,r3
 84014d4:	84030180 	call	8403018 <__adddf3>
 84014d8:	d9003117 	ldw	r4,196(sp)
 84014dc:	d9403217 	ldw	r5,200(sp)
 84014e0:	180f883a 	mov	r7,r3
 84014e4:	100d883a 	mov	r6,r2
 84014e8:	d9001415 	stw	r4,80(sp)
 84014ec:	d9401515 	stw	r5,84(sp)
 84014f0:	840308c0 	call	840308c <__muldf3>
 84014f4:	180f883a 	mov	r7,r3
 84014f8:	8009883a 	mov	r4,r16
 84014fc:	880b883a 	mov	r5,r17
 8401500:	100d883a 	mov	r6,r2
 8401504:	84030180 	call	8403018 <__adddf3>
 8401508:	d9001617 	ldw	r4,88(sp)
 840150c:	d9402717 	ldw	r5,156(sp)
 8401510:	d8803315 	stw	r2,204(sp)
 8401514:	200d883a 	mov	r6,r4
 8401518:	280f883a 	mov	r7,r5
 840151c:	d8c03415 	stw	r3,208(sp)
 8401520:	840308c0 	call	840308c <__muldf3>
 8401524:	182f883a 	mov	r23,r3
 8401528:	05500234 	movhi	r21,16392
 840152c:	0029883a 	mov	r20,zero
 8401530:	b80b883a 	mov	r5,r23
 8401534:	a00d883a 	mov	r6,r20
 8401538:	a80f883a 	mov	r7,r21
 840153c:	1009883a 	mov	r4,r2
 8401540:	d8800715 	stw	r2,28(sp)
 8401544:	d8c00815 	stw	r3,32(sp)
 8401548:	84030180 	call	8403018 <__adddf3>
 840154c:	d9003317 	ldw	r4,204(sp)
 8401550:	d9403417 	ldw	r5,208(sp)
 8401554:	180f883a 	mov	r7,r3
 8401558:	100d883a 	mov	r6,r2
 840155c:	d9000515 	stw	r4,20(sp)
 8401560:	d9400615 	stw	r5,24(sp)
 8401564:	84030180 	call	8403018 <__adddf3>
 8401568:	d9001617 	ldw	r4,88(sp)
 840156c:	d9402717 	ldw	r5,156(sp)
 8401570:	0025883a 	mov	r18,zero
 8401574:	900d883a 	mov	r6,r18
 8401578:	180f883a 	mov	r7,r3
 840157c:	1823883a 	mov	r17,r3
 8401580:	840308c0 	call	840308c <__muldf3>
 8401584:	d9001417 	ldw	r4,80(sp)
 8401588:	d9403217 	ldw	r5,200(sp)
 840158c:	880f883a 	mov	r7,r17
 8401590:	900d883a 	mov	r6,r18
 8401594:	d8803515 	stw	r2,212(sp)
 8401598:	d8c03615 	stw	r3,216(sp)
 840159c:	840308c0 	call	840308c <__muldf3>
 84015a0:	a80f883a 	mov	r7,r21
 84015a4:	880b883a 	mov	r5,r17
 84015a8:	000d883a 	mov	r6,zero
 84015ac:	9009883a 	mov	r4,r18
 84015b0:	1021883a 	mov	r16,r2
 84015b4:	1823883a 	mov	r17,r3
 84015b8:	8402f980 	call	8402f98 <__subdf3>
 84015bc:	d9800717 	ldw	r6,28(sp)
 84015c0:	b80f883a 	mov	r7,r23
 84015c4:	180b883a 	mov	r5,r3
 84015c8:	1009883a 	mov	r4,r2
 84015cc:	8402f980 	call	8402f98 <__subdf3>
 84015d0:	d9000517 	ldw	r4,20(sp)
 84015d4:	d9403417 	ldw	r5,208(sp)
 84015d8:	180f883a 	mov	r7,r3
 84015dc:	100d883a 	mov	r6,r2
 84015e0:	8402f980 	call	8402f98 <__subdf3>
 84015e4:	d9000317 	ldw	r4,12(sp)
 84015e8:	d9403017 	ldw	r5,192(sp)
 84015ec:	180f883a 	mov	r7,r3
 84015f0:	100d883a 	mov	r6,r2
 84015f4:	840308c0 	call	840308c <__muldf3>
 84015f8:	180f883a 	mov	r7,r3
 84015fc:	880b883a 	mov	r5,r17
 8401600:	8009883a 	mov	r4,r16
 8401604:	100d883a 	mov	r6,r2
 8401608:	84030180 	call	8403018 <__adddf3>
 840160c:	102d883a 	mov	r22,r2
 8401610:	d9003617 	ldw	r4,216(sp)
 8401614:	d8803517 	ldw	r2,212(sp)
 8401618:	d9403617 	ldw	r5,216(sp)
 840161c:	182f883a 	mov	r23,r3
 8401620:	b00d883a 	mov	r6,r22
 8401624:	b80f883a 	mov	r7,r23
 8401628:	d9000a15 	stw	r4,40(sp)
 840162c:	1009883a 	mov	r4,r2
 8401630:	054ffbf4 	movhi	r21,16367
 8401634:	ad71c244 	addi	r21,r21,-14583
 8401638:	dd800d15 	stw	r22,52(sp)
 840163c:	ddc00e15 	stw	r23,56(sp)
 8401640:	05380034 	movhi	r20,57344
 8401644:	d8800915 	stw	r2,36(sp)
 8401648:	84030180 	call	8403018 <__adddf3>
 840164c:	180b883a 	mov	r5,r3
 8401650:	a00d883a 	mov	r6,r20
 8401654:	a80f883a 	mov	r7,r21
 8401658:	9009883a 	mov	r4,r18
 840165c:	1823883a 	mov	r17,r3
 8401660:	840308c0 	call	840308c <__muldf3>
 8401664:	020516f4 	movhi	r8,5211
 8401668:	42007d44 	addi	r8,r8,501
 840166c:	026f8fb4 	movhi	r9,48702
 8401670:	4a4bf804 	addi	r9,r9,12256
 8401674:	480f883a 	mov	r7,r9
 8401678:	400d883a 	mov	r6,r8
 840167c:	880b883a 	mov	r5,r17
 8401680:	9009883a 	mov	r4,r18
 8401684:	d8803715 	stw	r2,220(sp)
 8401688:	d8c03815 	stw	r3,224(sp)
 840168c:	840308c0 	call	840308c <__muldf3>
 8401690:	d9800917 	ldw	r6,36(sp)
 8401694:	d9c03617 	ldw	r7,216(sp)
 8401698:	880b883a 	mov	r5,r17
 840169c:	9009883a 	mov	r4,r18
 84016a0:	1021883a 	mov	r16,r2
 84016a4:	1823883a 	mov	r17,r3
 84016a8:	8402f980 	call	8402f98 <__subdf3>
 84016ac:	d9000d17 	ldw	r4,52(sp)
 84016b0:	b80b883a 	mov	r5,r23
 84016b4:	180f883a 	mov	r7,r3
 84016b8:	100d883a 	mov	r6,r2
 84016bc:	8402f980 	call	8402f98 <__subdf3>
 84016c0:	180b883a 	mov	r5,r3
 84016c4:	a80f883a 	mov	r7,r21
 84016c8:	01b70eb4 	movhi	r6,56378
 84016cc:	3180ff44 	addi	r6,r6,1021
 84016d0:	1009883a 	mov	r4,r2
 84016d4:	840308c0 	call	840308c <__muldf3>
 84016d8:	180f883a 	mov	r7,r3
 84016dc:	880b883a 	mov	r5,r17
 84016e0:	8009883a 	mov	r4,r16
 84016e4:	100d883a 	mov	r6,r2
 84016e8:	84030180 	call	8403018 <__adddf3>
 84016ec:	d9402c17 	ldw	r5,176(sp)
 84016f0:	01021074 	movhi	r4,2113
 84016f4:	21222a04 	addi	r4,r4,-30552
 84016f8:	2909883a 	add	r4,r5,r4
 84016fc:	22400117 	ldw	r9,4(r4)
 8401700:	22000017 	ldw	r8,0(r4)
 8401704:	180b883a 	mov	r5,r3
 8401708:	480f883a 	mov	r7,r9
 840170c:	400d883a 	mov	r6,r8
 8401710:	1009883a 	mov	r4,r2
 8401714:	84030180 	call	8403018 <__adddf3>
 8401718:	d9000017 	ldw	r4,0(sp)
 840171c:	182f883a 	mov	r23,r3
 8401720:	102d883a 	mov	r22,r2
 8401724:	84039500 	call	8403950 <__floatsidf>
 8401728:	d9402c17 	ldw	r5,176(sp)
 840172c:	01021074 	movhi	r4,2113
 8401730:	21222e04 	addi	r4,r4,-30536
 8401734:	b00d883a 	mov	r6,r22
 8401738:	2911883a 	add	r8,r5,r4
 840173c:	d9003717 	ldw	r4,220(sp)
 8401740:	d9403817 	ldw	r5,224(sp)
 8401744:	45000017 	ldw	r20,0(r8)
 8401748:	d9002315 	stw	r4,140(sp)
 840174c:	d9003817 	ldw	r4,224(sp)
 8401750:	45400117 	ldw	r21,4(r8)
 8401754:	b80f883a 	mov	r7,r23
 8401758:	d9002415 	stw	r4,144(sp)
 840175c:	d9002317 	ldw	r4,140(sp)
 8401760:	1021883a 	mov	r16,r2
 8401764:	1823883a 	mov	r17,r3
 8401768:	dd802115 	stw	r22,132(sp)
 840176c:	ddc02215 	stw	r23,136(sp)
 8401770:	84030180 	call	8403018 <__adddf3>
 8401774:	180b883a 	mov	r5,r3
 8401778:	1009883a 	mov	r4,r2
 840177c:	a00d883a 	mov	r6,r20
 8401780:	a80f883a 	mov	r7,r21
 8401784:	84030180 	call	8403018 <__adddf3>
 8401788:	180f883a 	mov	r7,r3
 840178c:	8009883a 	mov	r4,r16
 8401790:	880b883a 	mov	r5,r17
 8401794:	100d883a 	mov	r6,r2
 8401798:	84030180 	call	8403018 <__adddf3>
 840179c:	180b883a 	mov	r5,r3
 84017a0:	0009883a 	mov	r4,zero
 84017a4:	800d883a 	mov	r6,r16
 84017a8:	880f883a 	mov	r7,r17
 84017ac:	d9001b15 	stw	r4,108(sp)
 84017b0:	d8c01c15 	stw	r3,112(sp)
 84017b4:	8402f980 	call	8402f98 <__subdf3>
 84017b8:	180b883a 	mov	r5,r3
 84017bc:	a80f883a 	mov	r7,r21
 84017c0:	1009883a 	mov	r4,r2
 84017c4:	a00d883a 	mov	r6,r20
 84017c8:	8402f980 	call	8402f98 <__subdf3>
 84017cc:	d9802317 	ldw	r6,140(sp)
 84017d0:	d9c03817 	ldw	r7,224(sp)
 84017d4:	180b883a 	mov	r5,r3
 84017d8:	1009883a 	mov	r4,r2
 84017dc:	8402f980 	call	8402f98 <__subdf3>
 84017e0:	d9002117 	ldw	r4,132(sp)
 84017e4:	1011883a 	mov	r8,r2
 84017e8:	1813883a 	mov	r9,r3
 84017ec:	b80b883a 	mov	r5,r23
 84017f0:	480f883a 	mov	r7,r9
 84017f4:	400d883a 	mov	r6,r8
 84017f8:	8402f980 	call	8402f98 <__subdf3>
 84017fc:	1823883a 	mov	r17,r3
 8401800:	d8c02517 	ldw	r3,148(sp)
 8401804:	1021883a 	mov	r16,r2
 8401808:	e0bfffc4 	addi	r2,fp,-1
 840180c:	1884b03a 	or	r2,r3,r2
 8401810:	1000731e 	bne	r2,zero,84019e0 <__ieee754_pow+0xb88>
 8401814:	0009883a 	mov	r4,zero
 8401818:	016ffc34 	movhi	r5,49136
 840181c:	d9001915 	stw	r4,100(sp)
 8401820:	d9401a15 	stw	r5,104(sp)
 8401824:	d9402917 	ldw	r5,164(sp)
 8401828:	d9002817 	ldw	r4,160(sp)
 840182c:	0029883a 	mov	r20,zero
 8401830:	a00d883a 	mov	r6,r20
 8401834:	280f883a 	mov	r7,r5
 8401838:	2827883a 	mov	r19,r5
 840183c:	8402f980 	call	8402f98 <__subdf3>
 8401840:	d9001b17 	ldw	r4,108(sp)
 8401844:	d9401c17 	ldw	r5,112(sp)
 8401848:	180f883a 	mov	r7,r3
 840184c:	100d883a 	mov	r6,r2
 8401850:	840308c0 	call	840308c <__muldf3>
 8401854:	d9c02917 	ldw	r7,164(sp)
 8401858:	d9802817 	ldw	r6,160(sp)
 840185c:	880b883a 	mov	r5,r17
 8401860:	8009883a 	mov	r4,r16
 8401864:	1823883a 	mov	r17,r3
 8401868:	1021883a 	mov	r16,r2
 840186c:	840308c0 	call	840308c <__muldf3>
 8401870:	180f883a 	mov	r7,r3
 8401874:	880b883a 	mov	r5,r17
 8401878:	8009883a 	mov	r4,r16
 840187c:	100d883a 	mov	r6,r2
 8401880:	84030180 	call	8403018 <__adddf3>
 8401884:	d9401c17 	ldw	r5,112(sp)
 8401888:	d9001b17 	ldw	r4,108(sp)
 840188c:	a00d883a 	mov	r6,r20
 8401890:	980f883a 	mov	r7,r19
 8401894:	1029883a 	mov	r20,r2
 8401898:	182b883a 	mov	r21,r3
 840189c:	840308c0 	call	840308c <__muldf3>
 84018a0:	1025883a 	mov	r18,r2
 84018a4:	1827883a 	mov	r19,r3
 84018a8:	a009883a 	mov	r4,r20
 84018ac:	a80b883a 	mov	r5,r21
 84018b0:	900d883a 	mov	r6,r18
 84018b4:	980f883a 	mov	r7,r19
 84018b8:	dd001d15 	stw	r20,116(sp)
 84018bc:	dc801f15 	stw	r18,124(sp)
 84018c0:	dd401e15 	stw	r21,120(sp)
 84018c4:	dcc02015 	stw	r19,128(sp)
 84018c8:	84030180 	call	8403018 <__adddf3>
 84018cc:	1823883a 	mov	r17,r3
 84018d0:	01102434 	movhi	r4,16528
 84018d4:	213fffc4 	addi	r4,r4,-1
 84018d8:	1021883a 	mov	r16,r2
 84018dc:	182f883a 	mov	r23,r3
 84018e0:	dc401815 	stw	r17,96(sp)
 84018e4:	100b883a 	mov	r5,r2
 84018e8:	20c02c0e 	bge	r4,r3,840199c <__ieee754_pow+0xb44>
 84018ec:	00afdc34 	movhi	r2,49008
 84018f0:	1885883a 	add	r2,r3,r2
 84018f4:	2884b03a 	or	r2,r5,r2
 84018f8:	1001a626 	beq	r2,zero,8401f94 <__ieee754_pow+0x113c>
 84018fc:	04220034 	movhi	r16,34816
 8401900:	841d6704 	addi	r16,r16,30108
 8401904:	045f8e34 	movhi	r17,32312
 8401908:	8c790f04 	addi	r17,r17,-7108
 840190c:	d9401a17 	ldw	r5,104(sp)
 8401910:	d9001917 	ldw	r4,100(sp)
 8401914:	800d883a 	mov	r6,r16
 8401918:	880f883a 	mov	r7,r17
 840191c:	840308c0 	call	840308c <__muldf3>
 8401920:	180b883a 	mov	r5,r3
 8401924:	800d883a 	mov	r6,r16
 8401928:	880f883a 	mov	r7,r17
 840192c:	1009883a 	mov	r4,r2
 8401930:	840308c0 	call	840308c <__muldf3>
 8401934:	003dc306 	br	8401044 <__ieee754_pow+0x1ec>
 8401938:	00b00434 	movhi	r2,49168
 840193c:	9085883a 	add	r2,r18,r2
 8401940:	e084b03a 	or	r2,fp,r2
 8401944:	1000af1e 	bne	r2,zero,8401c04 <__ieee754_pow+0xdac>
 8401948:	480f883a 	mov	r7,r9
 840194c:	4009883a 	mov	r4,r8
 8401950:	480b883a 	mov	r5,r9
 8401954:	400d883a 	mov	r6,r8
 8401958:	003db406 	br	840102c <__ieee754_pow+0x1d4>
 840195c:	00bffc34 	movhi	r2,65520
 8401960:	18ff0084 	addi	r3,r3,-1022
 8401964:	a0a9883a 	add	r20,r20,r2
 8401968:	d8c00015 	stw	r3,0(sp)
 840196c:	0009883a 	mov	r4,zero
 8401970:	04000234 	movhi	r16,8
 8401974:	003e1406 	br	84011c8 <__ieee754_pow+0x370>
 8401978:	a80f883a 	mov	r7,r21
 840197c:	a009883a 	mov	r4,r20
 8401980:	a80b883a 	mov	r5,r21
 8401984:	a00d883a 	mov	r6,r20
 8401988:	840308c0 	call	840308c <__muldf3>
 840198c:	180b883a 	mov	r5,r3
 8401990:	d8802815 	stw	r2,160(sp)
 8401994:	d9402915 	stw	r5,164(sp)
 8401998:	003d5606 	br	8400ef4 <__ieee754_pow+0x9c>
 840199c:	d9001817 	ldw	r4,96(sp)
 84019a0:	00a00034 	movhi	r2,32768
 84019a4:	10bfffc4 	addi	r2,r2,-1
 84019a8:	00d02474 	movhi	r3,16529
 84019ac:	18f2ffc4 	addi	r3,r3,-13313
 84019b0:	20b8703a 	and	fp,r4,r2
 84019b4:	1f009d0e 	bge	r3,fp,8401c2c <__ieee754_pow+0xdd4>
 84019b8:	008fdbf4 	movhi	r2,16239
 84019bc:	108d0004 	addi	r2,r2,13312
 84019c0:	2085883a 	add	r2,r4,r2
 84019c4:	1144b03a 	or	r2,r2,r5
 84019c8:	1001c626 	beq	r2,zero,84020e4 <__ieee754_pow+0x128c>
 84019cc:	0430be74 	movhi	r16,49913
 84019d0:	843cd644 	addi	r16,r16,-3239
 84019d4:	04406974 	movhi	r17,421
 84019d8:	8c5b87c4 	addi	r17,r17,28191
 84019dc:	003fcb06 	br	840190c <__ieee754_pow+0xab4>
 84019e0:	0005883a 	mov	r2,zero
 84019e4:	00cffc34 	movhi	r3,16368
 84019e8:	d8801915 	stw	r2,100(sp)
 84019ec:	d8c01a15 	stw	r3,104(sp)
 84019f0:	003f8c06 	br	8401824 <__ieee754_pow+0x9cc>
 84019f4:	0005883a 	mov	r2,zero
 84019f8:	00cffc34 	movhi	r3,16368
 84019fc:	180b883a 	mov	r5,r3
 8401a00:	580f883a 	mov	r7,r11
 8401a04:	1009883a 	mov	r4,r2
 8401a08:	500d883a 	mov	r6,r10
 8401a0c:	84034500 	call	8403450 <__divdf3>
 8401a10:	1011883a 	mov	r8,r2
 8401a14:	1813883a 	mov	r9,r3
 8401a18:	003d9506 	br	8401070 <__ieee754_pow+0x218>
 8401a1c:	008ffc34 	movhi	r2,16368
 8401a20:	10bfff84 	addi	r2,r2,-2
 8401a24:	14bdbb0e 	bge	r2,r18,8401114 <__ieee754_pow+0x2bc>
 8401a28:	008ffc34 	movhi	r2,16368
 8401a2c:	14bdae16 	blt	r2,r18,84010e8 <__ieee754_pow+0x290>
 8401a30:	580b883a 	mov	r5,r11
 8401a34:	5009883a 	mov	r4,r10
 8401a38:	000d883a 	mov	r6,zero
 8401a3c:	100f883a 	mov	r7,r2
 8401a40:	8402f980 	call	8402f98 <__subdf3>
 8401a44:	1021883a 	mov	r16,r2
 8401a48:	1823883a 	mov	r17,r3
 8401a4c:	00980034 	movhi	r2,24576
 8401a50:	00cffdf4 	movhi	r3,16375
 8401a54:	18c551c4 	addi	r3,r3,5447
 8401a58:	8009883a 	mov	r4,r16
 8401a5c:	880b883a 	mov	r5,r17
 8401a60:	180f883a 	mov	r7,r3
 8401a64:	100d883a 	mov	r6,r2
 8401a68:	840308c0 	call	840308c <__muldf3>
 8401a6c:	023e17b4 	movhi	r8,63582
 8401a70:	4237d104 	addi	r8,r8,-8380
 8401a74:	024f9574 	movhi	r9,15957
 8401a78:	4a6b82c4 	addi	r9,r9,-20981
 8401a7c:	480f883a 	mov	r7,r9
 8401a80:	400d883a 	mov	r6,r8
 8401a84:	8009883a 	mov	r4,r16
 8401a88:	880b883a 	mov	r5,r17
 8401a8c:	102d883a 	mov	r22,r2
 8401a90:	182f883a 	mov	r23,r3
 8401a94:	840308c0 	call	840308c <__muldf3>
 8401a98:	8009883a 	mov	r4,r16
 8401a9c:	880b883a 	mov	r5,r17
 8401aa0:	800d883a 	mov	r6,r16
 8401aa4:	880f883a 	mov	r7,r17
 8401aa8:	d8802a15 	stw	r2,168(sp)
 8401aac:	d8c02b15 	stw	r3,172(sp)
 8401ab0:	840308c0 	call	840308c <__muldf3>
 8401ab4:	0011883a 	mov	r8,zero
 8401ab8:	026ff434 	movhi	r9,49104
 8401abc:	480f883a 	mov	r7,r9
 8401ac0:	8009883a 	mov	r4,r16
 8401ac4:	880b883a 	mov	r5,r17
 8401ac8:	400d883a 	mov	r6,r8
 8401acc:	1029883a 	mov	r20,r2
 8401ad0:	182b883a 	mov	r21,r3
 8401ad4:	840308c0 	call	840308c <__muldf3>
 8401ad8:	02155574 	movhi	r8,21845
 8401adc:	42155544 	addi	r8,r8,21845
 8401ae0:	024ff574 	movhi	r9,16341
 8401ae4:	4a555544 	addi	r9,r9,21845
 8401ae8:	480f883a 	mov	r7,r9
 8401aec:	400d883a 	mov	r6,r8
 8401af0:	180b883a 	mov	r5,r3
 8401af4:	1009883a 	mov	r4,r2
 8401af8:	84030180 	call	8403018 <__adddf3>
 8401afc:	180f883a 	mov	r7,r3
 8401b00:	8009883a 	mov	r4,r16
 8401b04:	880b883a 	mov	r5,r17
 8401b08:	100d883a 	mov	r6,r2
 8401b0c:	840308c0 	call	840308c <__muldf3>
 8401b10:	0011883a 	mov	r8,zero
 8401b14:	024ff834 	movhi	r9,16352
 8401b18:	480b883a 	mov	r5,r9
 8401b1c:	4009883a 	mov	r4,r8
 8401b20:	180f883a 	mov	r7,r3
 8401b24:	100d883a 	mov	r6,r2
 8401b28:	8402f980 	call	8402f98 <__subdf3>
 8401b2c:	180f883a 	mov	r7,r3
 8401b30:	a80b883a 	mov	r5,r21
 8401b34:	a009883a 	mov	r4,r20
 8401b38:	100d883a 	mov	r6,r2
 8401b3c:	840308c0 	call	840308c <__muldf3>
 8401b40:	02194b34 	movhi	r8,25900
 8401b44:	4220bf84 	addi	r8,r8,-32002
 8401b48:	026ffdf4 	movhi	r9,49143
 8401b4c:	4a4551c4 	addi	r9,r9,5447
 8401b50:	480f883a 	mov	r7,r9
 8401b54:	400d883a 	mov	r6,r8
 8401b58:	180b883a 	mov	r5,r3
 8401b5c:	1009883a 	mov	r4,r2
 8401b60:	840308c0 	call	840308c <__muldf3>
 8401b64:	d9402b17 	ldw	r5,172(sp)
 8401b68:	d9002a17 	ldw	r4,168(sp)
 8401b6c:	180f883a 	mov	r7,r3
 8401b70:	100d883a 	mov	r6,r2
 8401b74:	84030180 	call	8403018 <__adddf3>
 8401b78:	100d883a 	mov	r6,r2
 8401b7c:	b009883a 	mov	r4,r22
 8401b80:	b80b883a 	mov	r5,r23
 8401b84:	180f883a 	mov	r7,r3
 8401b88:	1021883a 	mov	r16,r2
 8401b8c:	1823883a 	mov	r17,r3
 8401b90:	84030180 	call	8403018 <__adddf3>
 8401b94:	180b883a 	mov	r5,r3
 8401b98:	0009883a 	mov	r4,zero
 8401b9c:	b00d883a 	mov	r6,r22
 8401ba0:	b80f883a 	mov	r7,r23
 8401ba4:	d9001b15 	stw	r4,108(sp)
 8401ba8:	d8c01c15 	stw	r3,112(sp)
 8401bac:	8402f980 	call	8402f98 <__subdf3>
 8401bb0:	1011883a 	mov	r8,r2
 8401bb4:	1813883a 	mov	r9,r3
 8401bb8:	8009883a 	mov	r4,r16
 8401bbc:	880b883a 	mov	r5,r17
 8401bc0:	003f0b06 	br	84017f0 <__ieee754_pow+0x998>
 8401bc4:	0005883a 	mov	r2,zero
 8401bc8:	00d0d034 	movhi	r3,17216
 8401bcc:	580b883a 	mov	r5,r11
 8401bd0:	5009883a 	mov	r4,r10
 8401bd4:	180f883a 	mov	r7,r3
 8401bd8:	100d883a 	mov	r6,r2
 8401bdc:	840308c0 	call	840308c <__muldf3>
 8401be0:	1015883a 	mov	r10,r2
 8401be4:	1825883a 	mov	r18,r3
 8401be8:	017ff2c4 	movi	r5,-53
 8401bec:	003d6606 	br	8401188 <__ieee754_pow+0x330>
 8401bf0:	b03d300e 	bge	r22,zero,84010b4 <__ieee754_pow+0x25c>
 8401bf4:	d9402917 	ldw	r5,164(sp)
 8401bf8:	28e0003c 	xorhi	r3,r5,32768
 8401bfc:	d8c02915 	stw	r3,164(sp)
 8401c00:	003cbc06 	br	8400ef4 <__ieee754_pow+0x9c>
 8401c04:	00800044 	movi	r2,1
 8401c08:	e0bd1a1e 	bne	fp,r2,8401074 <__ieee754_pow+0x21c>
 8401c0c:	48e0003c 	xorhi	r3,r9,32768
 8401c10:	da002815 	stw	r8,160(sp)
 8401c14:	d8c02915 	stw	r3,164(sp)
 8401c18:	003cb606 	br	8400ef4 <__ieee754_pow+0x9c>
 8401c1c:	d9001817 	ldw	r4,96(sp)
 8401c20:	00a00034 	movhi	r2,32768
 8401c24:	10bfffc4 	addi	r2,r2,-1
 8401c28:	20b8703a 	and	fp,r4,r2
 8401c2c:	008ff834 	movhi	r2,16352
 8401c30:	1700fc16 	blt	r2,fp,8402024 <__ieee754_pow+0x11cc>
 8401c34:	0039883a 	mov	fp,zero
 8401c38:	d8001315 	stw	zero,76(sp)
 8401c3c:	0025883a 	mov	r18,zero
 8401c40:	0005883a 	mov	r2,zero
 8401c44:	00cff9b4 	movhi	r3,16358
 8401c48:	18cb90c4 	addi	r3,r3,11843
 8401c4c:	9009883a 	mov	r4,r18
 8401c50:	b80b883a 	mov	r5,r23
 8401c54:	180f883a 	mov	r7,r3
 8401c58:	100d883a 	mov	r6,r2
 8401c5c:	840308c0 	call	840308c <__muldf3>
 8401c60:	d9c02017 	ldw	r7,128(sp)
 8401c64:	d9801f17 	ldw	r6,124(sp)
 8401c68:	9009883a 	mov	r4,r18
 8401c6c:	b80b883a 	mov	r5,r23
 8401c70:	b823883a 	mov	r17,r23
 8401c74:	102d883a 	mov	r22,r2
 8401c78:	182f883a 	mov	r23,r3
 8401c7c:	8402f980 	call	8402f98 <__subdf3>
 8401c80:	d9401e17 	ldw	r5,120(sp)
 8401c84:	d9001d17 	ldw	r4,116(sp)
 8401c88:	180f883a 	mov	r7,r3
 8401c8c:	100d883a 	mov	r6,r2
 8401c90:	8402f980 	call	8402f98 <__subdf3>
 8401c94:	023fbeb4 	movhi	r8,65274
 8401c98:	420e7bc4 	addi	r8,r8,14831
 8401c9c:	024ff9b4 	movhi	r9,16358
 8401ca0:	4a4b9084 	addi	r9,r9,11842
 8401ca4:	480f883a 	mov	r7,r9
 8401ca8:	400d883a 	mov	r6,r8
 8401cac:	180b883a 	mov	r5,r3
 8401cb0:	1009883a 	mov	r4,r2
 8401cb4:	840308c0 	call	840308c <__muldf3>
 8401cb8:	02032a34 	movhi	r8,3240
 8401cbc:	421b0e44 	addi	r8,r8,27705
 8401cc0:	026f8834 	movhi	r9,48672
 8401cc4:	4a571844 	addi	r9,r9,23649
 8401cc8:	480f883a 	mov	r7,r9
 8401ccc:	400d883a 	mov	r6,r8
 8401cd0:	9009883a 	mov	r4,r18
 8401cd4:	880b883a 	mov	r5,r17
 8401cd8:	1021883a 	mov	r16,r2
 8401cdc:	1823883a 	mov	r17,r3
 8401ce0:	840308c0 	call	840308c <__muldf3>
 8401ce4:	180f883a 	mov	r7,r3
 8401ce8:	880b883a 	mov	r5,r17
 8401cec:	8009883a 	mov	r4,r16
 8401cf0:	100d883a 	mov	r6,r2
 8401cf4:	84030180 	call	8403018 <__adddf3>
 8401cf8:	100d883a 	mov	r6,r2
 8401cfc:	b009883a 	mov	r4,r22
 8401d00:	b80b883a 	mov	r5,r23
 8401d04:	180f883a 	mov	r7,r3
 8401d08:	1021883a 	mov	r16,r2
 8401d0c:	1823883a 	mov	r17,r3
 8401d10:	84030180 	call	8403018 <__adddf3>
 8401d14:	1009883a 	mov	r4,r2
 8401d18:	180b883a 	mov	r5,r3
 8401d1c:	b00d883a 	mov	r6,r22
 8401d20:	b80f883a 	mov	r7,r23
 8401d24:	d8803915 	stw	r2,228(sp)
 8401d28:	d8c03a15 	stw	r3,232(sp)
 8401d2c:	d8801115 	stw	r2,68(sp)
 8401d30:	d8c01215 	stw	r3,72(sp)
 8401d34:	8402f980 	call	8402f98 <__subdf3>
 8401d38:	180f883a 	mov	r7,r3
 8401d3c:	8009883a 	mov	r4,r16
 8401d40:	880b883a 	mov	r5,r17
 8401d44:	100d883a 	mov	r6,r2
 8401d48:	8402f980 	call	8402f98 <__subdf3>
 8401d4c:	d9001117 	ldw	r4,68(sp)
 8401d50:	d9403a17 	ldw	r5,232(sp)
 8401d54:	1029883a 	mov	r20,r2
 8401d58:	200d883a 	mov	r6,r4
 8401d5c:	280f883a 	mov	r7,r5
 8401d60:	182b883a 	mov	r21,r3
 8401d64:	840308c0 	call	840308c <__muldf3>
 8401d68:	1021883a 	mov	r16,r2
 8401d6c:	1823883a 	mov	r17,r3
 8401d70:	009caff4 	movhi	r2,29375
 8401d74:	10a93404 	addi	r2,r2,-23344
 8401d78:	00cf99b4 	movhi	r3,15974
 8401d7c:	18cdda44 	addi	r3,r3,14185
 8401d80:	8009883a 	mov	r4,r16
 8401d84:	880b883a 	mov	r5,r17
 8401d88:	180f883a 	mov	r7,r3
 8401d8c:	100d883a 	mov	r6,r2
 8401d90:	840308c0 	call	840308c <__muldf3>
 8401d94:	023174b4 	movhi	r8,50642
 8401d98:	421afc44 	addi	r8,r8,27633
 8401d9c:	024faf34 	movhi	r9,16060
 8401da0:	4a6f5044 	addi	r9,r9,-17087
 8401da4:	480f883a 	mov	r7,r9
 8401da8:	400d883a 	mov	r6,r8
 8401dac:	180b883a 	mov	r5,r3
 8401db0:	1009883a 	mov	r4,r2
 8401db4:	8402f980 	call	8402f98 <__subdf3>
 8401db8:	180f883a 	mov	r7,r3
 8401dbc:	8009883a 	mov	r4,r16
 8401dc0:	880b883a 	mov	r5,r17
 8401dc4:	100d883a 	mov	r6,r2
 8401dc8:	840308c0 	call	840308c <__muldf3>
 8401dcc:	022bc9b4 	movhi	r8,44838
 8401dd0:	42378b04 	addi	r8,r8,-8660
 8401dd4:	024fc474 	movhi	r9,16145
 8401dd8:	4a559a84 	addi	r9,r9,22122
 8401ddc:	480f883a 	mov	r7,r9
 8401de0:	400d883a 	mov	r6,r8
 8401de4:	180b883a 	mov	r5,r3
 8401de8:	1009883a 	mov	r4,r2
 8401dec:	84030180 	call	8403018 <__adddf3>
 8401df0:	180f883a 	mov	r7,r3
 8401df4:	8009883a 	mov	r4,r16
 8401df8:	880b883a 	mov	r5,r17
 8401dfc:	100d883a 	mov	r6,r2
 8401e00:	840308c0 	call	840308c <__muldf3>
 8401e04:	0205aff4 	movhi	r8,5823
 8401e08:	422f64c4 	addi	r8,r8,-17005
 8401e0c:	024fd9f4 	movhi	r9,16231
 8401e10:	4a705b04 	addi	r9,r9,-16020
 8401e14:	480f883a 	mov	r7,r9
 8401e18:	400d883a 	mov	r6,r8
 8401e1c:	180b883a 	mov	r5,r3
 8401e20:	1009883a 	mov	r4,r2
 8401e24:	8402f980 	call	8402f98 <__subdf3>
 8401e28:	180f883a 	mov	r7,r3
 8401e2c:	8009883a 	mov	r4,r16
 8401e30:	880b883a 	mov	r5,r17
 8401e34:	100d883a 	mov	r6,r2
 8401e38:	840308c0 	call	840308c <__muldf3>
 8401e3c:	02155574 	movhi	r8,21845
 8401e40:	42154f84 	addi	r8,r8,21822
 8401e44:	024ff174 	movhi	r9,16325
 8401e48:	4a555544 	addi	r9,r9,21845
 8401e4c:	480f883a 	mov	r7,r9
 8401e50:	400d883a 	mov	r6,r8
 8401e54:	180b883a 	mov	r5,r3
 8401e58:	1009883a 	mov	r4,r2
 8401e5c:	84030180 	call	8403018 <__adddf3>
 8401e60:	180f883a 	mov	r7,r3
 8401e64:	8009883a 	mov	r4,r16
 8401e68:	880b883a 	mov	r5,r17
 8401e6c:	100d883a 	mov	r6,r2
 8401e70:	840308c0 	call	840308c <__muldf3>
 8401e74:	d9001117 	ldw	r4,68(sp)
 8401e78:	d9403a17 	ldw	r5,232(sp)
 8401e7c:	180f883a 	mov	r7,r3
 8401e80:	100d883a 	mov	r6,r2
 8401e84:	8402f980 	call	8402f98 <__subdf3>
 8401e88:	d9001117 	ldw	r4,68(sp)
 8401e8c:	d9403a17 	ldw	r5,232(sp)
 8401e90:	100d883a 	mov	r6,r2
 8401e94:	180f883a 	mov	r7,r3
 8401e98:	1021883a 	mov	r16,r2
 8401e9c:	1823883a 	mov	r17,r3
 8401ea0:	840308c0 	call	840308c <__muldf3>
 8401ea4:	0011883a 	mov	r8,zero
 8401ea8:	02500034 	movhi	r9,16384
 8401eac:	480f883a 	mov	r7,r9
 8401eb0:	400d883a 	mov	r6,r8
 8401eb4:	8009883a 	mov	r4,r16
 8401eb8:	880b883a 	mov	r5,r17
 8401ebc:	1021883a 	mov	r16,r2
 8401ec0:	1823883a 	mov	r17,r3
 8401ec4:	8402f980 	call	8402f98 <__subdf3>
 8401ec8:	180f883a 	mov	r7,r3
 8401ecc:	880b883a 	mov	r5,r17
 8401ed0:	8009883a 	mov	r4,r16
 8401ed4:	100d883a 	mov	r6,r2
 8401ed8:	84034500 	call	8403450 <__divdf3>
 8401edc:	d9001117 	ldw	r4,68(sp)
 8401ee0:	d9403a17 	ldw	r5,232(sp)
 8401ee4:	a00d883a 	mov	r6,r20
 8401ee8:	a80f883a 	mov	r7,r21
 8401eec:	1025883a 	mov	r18,r2
 8401ef0:	1827883a 	mov	r19,r3
 8401ef4:	840308c0 	call	840308c <__muldf3>
 8401ef8:	180f883a 	mov	r7,r3
 8401efc:	a009883a 	mov	r4,r20
 8401f00:	a80b883a 	mov	r5,r21
 8401f04:	100d883a 	mov	r6,r2
 8401f08:	84030180 	call	8403018 <__adddf3>
 8401f0c:	180f883a 	mov	r7,r3
 8401f10:	980b883a 	mov	r5,r19
 8401f14:	9009883a 	mov	r4,r18
 8401f18:	100d883a 	mov	r6,r2
 8401f1c:	8402f980 	call	8402f98 <__subdf3>
 8401f20:	d9801117 	ldw	r6,68(sp)
 8401f24:	d9c03a17 	ldw	r7,232(sp)
 8401f28:	180b883a 	mov	r5,r3
 8401f2c:	1009883a 	mov	r4,r2
 8401f30:	8402f980 	call	8402f98 <__subdf3>
 8401f34:	0011883a 	mov	r8,zero
 8401f38:	024ffc34 	movhi	r9,16368
 8401f3c:	480b883a 	mov	r5,r9
 8401f40:	180f883a 	mov	r7,r3
 8401f44:	4009883a 	mov	r4,r8
 8401f48:	100d883a 	mov	r6,r2
 8401f4c:	8402f980 	call	8402f98 <__subdf3>
 8401f50:	100b883a 	mov	r5,r2
 8401f54:	d8801317 	ldw	r2,76(sp)
 8401f58:	10d5883a 	add	r10,r2,r3
 8401f5c:	5005d53a 	srai	r2,r10,20
 8401f60:	0080720e 	bge	zero,r2,840212c <__ieee754_pow+0x12d4>
 8401f64:	2811883a 	mov	r8,r5
 8401f68:	5013883a 	mov	r9,r10
 8401f6c:	d9c01a17 	ldw	r7,104(sp)
 8401f70:	d9801917 	ldw	r6,100(sp)
 8401f74:	480b883a 	mov	r5,r9
 8401f78:	4009883a 	mov	r4,r8
 8401f7c:	003e8206 	br	8401988 <__ieee754_pow+0xb30>
 8401f80:	0009883a 	mov	r4,zero
 8401f84:	800b883a 	mov	r5,r16
 8401f88:	a80f883a 	mov	r7,r21
 8401f8c:	a00d883a 	mov	r6,r20
 8401f90:	003c2b06 	br	8401040 <__ieee754_pow+0x1e8>
 8401f94:	d9001d17 	ldw	r4,116(sp)
 8401f98:	00994b34 	movhi	r2,25900
 8401f9c:	10a0bf84 	addi	r2,r2,-32002
 8401fa0:	00cf25f4 	movhi	r3,15511
 8401fa4:	18c551c4 	addi	r3,r3,5447
 8401fa8:	a80b883a 	mov	r5,r21
 8401fac:	180f883a 	mov	r7,r3
 8401fb0:	100d883a 	mov	r6,r2
 8401fb4:	84030180 	call	8403018 <__adddf3>
 8401fb8:	d9801f17 	ldw	r6,124(sp)
 8401fbc:	880b883a 	mov	r5,r17
 8401fc0:	8009883a 	mov	r4,r16
 8401fc4:	980f883a 	mov	r7,r19
 8401fc8:	1021883a 	mov	r16,r2
 8401fcc:	1823883a 	mov	r17,r3
 8401fd0:	8402f980 	call	8402f98 <__subdf3>
 8401fd4:	180f883a 	mov	r7,r3
 8401fd8:	880b883a 	mov	r5,r17
 8401fdc:	8009883a 	mov	r4,r16
 8401fe0:	100d883a 	mov	r6,r2
 8401fe4:	84037b80 	call	84037b8 <__gtdf2>
 8401fe8:	00bf0c0e 	bge	zero,r2,8401c1c <__ieee754_pow+0xdc4>
 8401fec:	04220034 	movhi	r16,34816
 8401ff0:	841d6704 	addi	r16,r16,30108
 8401ff4:	045f8e34 	movhi	r17,32312
 8401ff8:	8c790f04 	addi	r17,r17,-7108
 8401ffc:	d9401a17 	ldw	r5,104(sp)
 8402000:	d9001917 	ldw	r4,100(sp)
 8402004:	800d883a 	mov	r6,r16
 8402008:	880f883a 	mov	r7,r17
 840200c:	840308c0 	call	840308c <__muldf3>
 8402010:	180b883a 	mov	r5,r3
 8402014:	800d883a 	mov	r6,r16
 8402018:	880f883a 	mov	r7,r17
 840201c:	1009883a 	mov	r4,r2
 8402020:	003e5906 	br	8401988 <__ieee754_pow+0xb30>
 8402024:	e005d53a 	srai	r2,fp,20
 8402028:	01800434 	movhi	r6,16
 840202c:	d9401817 	ldw	r5,96(sp)
 8402030:	10bf0084 	addi	r2,r2,-1022
 8402034:	308dd83a 	sra	r6,r6,r2
 8402038:	02000434 	movhi	r8,16
 840203c:	423fffc4 	addi	r8,r8,-1
 8402040:	0005883a 	mov	r2,zero
 8402044:	298d883a 	add	r6,r5,r6
 8402048:	318b883a 	add	r5,r6,r6
 840204c:	320e703a 	and	r7,r6,r8
 8402050:	1013883a 	mov	r9,r2
 8402054:	280ad57a 	srli	r5,r5,21
 8402058:	d8801817 	ldw	r2,96(sp)
 840205c:	01000504 	movi	r4,20
 8402060:	297f0044 	addi	r5,r5,-1023
 8402064:	4151d83a 	sra	r8,r8,r5
 8402068:	39c00434 	orhi	r7,r7,16
 840206c:	2149c83a 	sub	r4,r4,r5
 8402070:	0210303a 	nor	r8,zero,r8
 8402074:	3939d83a 	sra	fp,r7,r4
 8402078:	320e703a 	and	r7,r6,r8
 840207c:	10002916 	blt	r2,zero,8402124 <__ieee754_pow+0x12cc>
 8402080:	d9402017 	ldw	r5,128(sp)
 8402084:	d9001f17 	ldw	r4,124(sp)
 8402088:	480d883a 	mov	r6,r9
 840208c:	8402f980 	call	8402f98 <__subdf3>
 8402090:	180b883a 	mov	r5,r3
 8402094:	d9402015 	stw	r5,128(sp)
 8402098:	280f883a 	mov	r7,r5
 840209c:	d9001d17 	ldw	r4,116(sp)
 84020a0:	d9401e17 	ldw	r5,120(sp)
 84020a4:	1007883a 	mov	r3,r2
 84020a8:	180d883a 	mov	r6,r3
 84020ac:	d8801f15 	stw	r2,124(sp)
 84020b0:	84030180 	call	8403018 <__adddf3>
 84020b4:	180b883a 	mov	r5,r3
 84020b8:	e006953a 	slli	r3,fp,20
 84020bc:	282f883a 	mov	r23,r5
 84020c0:	d8c01315 	stw	r3,76(sp)
 84020c4:	003edd06 	br	8401c3c <__ieee754_pow+0xde4>
 84020c8:	383bc81e 	bne	r7,zero,8400fec <__ieee754_pow+0x194>
 84020cc:	28c5c83a 	sub	r2,r5,r3
 84020d0:	8087d83a 	sra	r3,r16,r2
 84020d4:	1884983a 	sll	r2,r3,r2
 84020d8:	80801b26 	beq	r16,r2,8402148 <__ieee754_pow+0x12f0>
 84020dc:	0039883a 	mov	fp,zero
 84020e0:	003b9d06 	br	8400f58 <__ieee754_pow+0x100>
 84020e4:	d9801f17 	ldw	r6,124(sp)
 84020e8:	8009883a 	mov	r4,r16
 84020ec:	880b883a 	mov	r5,r17
 84020f0:	980f883a 	mov	r7,r19
 84020f4:	8402f980 	call	8402f98 <__subdf3>
 84020f8:	d9001d17 	ldw	r4,116(sp)
 84020fc:	a80b883a 	mov	r5,r21
 8402100:	180f883a 	mov	r7,r3
 8402104:	100d883a 	mov	r6,r2
 8402108:	84038c80 	call	84038c8 <__ledf2>
 840210c:	00bfc516 	blt	zero,r2,8402024 <__ieee754_pow+0x11cc>
 8402110:	0430be74 	movhi	r16,49913
 8402114:	843cd644 	addi	r16,r16,-3239
 8402118:	04406974 	movhi	r17,421
 840211c:	8c5b87c4 	addi	r17,r17,28191
 8402120:	003fb606 	br	8401ffc <__ieee754_pow+0x11a4>
 8402124:	0739c83a 	sub	fp,zero,fp
 8402128:	003fd506 	br	8402080 <__ieee754_pow+0x1228>
 840212c:	2809883a 	mov	r4,r5
 8402130:	e00d883a 	mov	r6,fp
 8402134:	180b883a 	mov	r5,r3
 8402138:	84026ac0 	call	84026ac <scalbn>
 840213c:	1011883a 	mov	r8,r2
 8402140:	1813883a 	mov	r9,r3
 8402144:	003f8906 	br	8401f6c <__ieee754_pow+0x1114>
 8402148:	18c0004c 	andi	r3,r3,1
 840214c:	00800084 	movi	r2,2
 8402150:	10f9c83a 	sub	fp,r2,r3
 8402154:	003b8006 	br	8400f58 <__ieee754_pow+0x100>

08402158 <__ieee754_sqrt>:
 8402158:	defffd04 	addi	sp,sp,-12
 840215c:	dc000015 	stw	r16,0(sp)
 8402160:	009ffc34 	movhi	r2,32752
 8402164:	2021883a 	mov	r16,r4
 8402168:	291ffc2c 	andhi	r4,r5,32752
 840216c:	dc400115 	stw	r17,4(sp)
 8402170:	dfc00215 	stw	ra,8(sp)
 8402174:	2823883a 	mov	r17,r5
 8402178:	280f883a 	mov	r7,r5
 840217c:	2807883a 	mov	r3,r5
 8402180:	8011883a 	mov	r8,r16
 8402184:	20807d26 	beq	r4,r2,840237c <__ieee754_sqrt+0x224>
 8402188:	01408d0e 	bge	zero,r5,84023c0 <__ieee754_sqrt+0x268>
 840218c:	380dd53a 	srai	r6,r7,20
 8402190:	3000131e 	bne	r6,zero,84021e0 <__ieee754_sqrt+0x88>
 8402194:	1800041e 	bne	r3,zero,84021a8 <__ieee754_sqrt+0x50>
 8402198:	400ed2fa 	srli	r7,r8,11
 840219c:	31bffac4 	addi	r6,r6,-21
 84021a0:	4010957a 	slli	r8,r8,21
 84021a4:	383ffc26 	beq	r7,zero,8402198 <__ieee754_sqrt+0x40>
 84021a8:	3880042c 	andhi	r2,r7,16
 84021ac:	1000991e 	bne	r2,zero,8402414 <__ieee754_sqrt+0x2bc>
 84021b0:	0009883a 	mov	r4,zero
 84021b4:	39cf883a 	add	r7,r7,r7
 84021b8:	3880042c 	andhi	r2,r7,16
 84021bc:	21000044 	addi	r4,r4,1
 84021c0:	103ffc26 	beq	r2,zero,84021b4 <__ieee754_sqrt+0x5c>
 84021c4:	00800804 	movi	r2,32
 84021c8:	1105c83a 	sub	r2,r2,r4
 84021cc:	4086d83a 	srl	r3,r8,r2
 84021d0:	4110983a 	sll	r8,r8,r4
 84021d4:	3105c83a 	sub	r2,r6,r4
 84021d8:	38ceb03a 	or	r7,r7,r3
 84021dc:	11800044 	addi	r6,r2,1
 84021e0:	31bf0044 	addi	r6,r6,-1023
 84021e4:	30c0004c 	andi	r3,r6,1
 84021e8:	00800434 	movhi	r2,16
 84021ec:	10bfffc4 	addi	r2,r2,-1
 84021f0:	3884703a 	and	r2,r7,r2
 84021f4:	1807003a 	cmpeq	r3,r3,zero
 84021f8:	11000434 	orhi	r4,r2,16
 84021fc:	18005426 	beq	r3,zero,8402350 <__ieee754_sqrt+0x1f8>
 8402200:	4004d7fa 	srli	r2,r8,31
 8402204:	4207883a 	add	r3,r8,r8
 8402208:	02800834 	movhi	r10,32
 840220c:	1105883a 	add	r2,r2,r4
 8402210:	2089883a 	add	r4,r4,r2
 8402214:	0011883a 	mov	r8,zero
 8402218:	000b883a 	mov	r5,zero
 840221c:	0013883a 	mov	r9,zero
 8402220:	02c00584 	movi	r11,22
 8402224:	520f883a 	add	r7,r10,r8
 8402228:	1804d7fa 	srli	r2,r3,31
 840222c:	4a400044 	addi	r9,r9,1
 8402230:	18c7883a 	add	r3,r3,r3
 8402234:	21c00316 	blt	r4,r7,8402244 <__ieee754_sqrt+0xec>
 8402238:	21c9c83a 	sub	r4,r4,r7
 840223c:	2a8b883a 	add	r5,r5,r10
 8402240:	51d1883a 	add	r8,r10,r7
 8402244:	1105883a 	add	r2,r2,r4
 8402248:	5014d07a 	srli	r10,r10,1
 840224c:	2089883a 	add	r4,r4,r2
 8402250:	4afff41e 	bne	r9,r11,8402224 <__ieee754_sqrt+0xcc>
 8402254:	02600034 	movhi	r9,32768
 8402258:	0017883a 	mov	r11,zero
 840225c:	0019883a 	mov	r12,zero
 8402260:	0015883a 	mov	r10,zero
 8402264:	4821883a 	mov	r16,r9
 8402268:	03c00804 	movi	r15,32
 840226c:	00000806 	br	8402290 <__ieee754_sqrt+0x138>
 8402270:	22003426 	beq	r4,r8,8402344 <__ieee754_sqrt+0x1ec>
 8402274:	1804d7fa 	srli	r2,r3,31
 8402278:	52800044 	addi	r10,r10,1
 840227c:	18c7883a 	add	r3,r3,r3
 8402280:	1105883a 	add	r2,r2,r4
 8402284:	2089883a 	add	r4,r4,r2
 8402288:	4812d07a 	srli	r9,r9,1
 840228c:	53c01326 	beq	r10,r15,84022dc <__ieee754_sqrt+0x184>
 8402290:	4acf883a 	add	r7,r9,r11
 8402294:	413ff60e 	bge	r8,r4,8402270 <__ieee754_sqrt+0x118>
 8402298:	38a0002c 	andhi	r2,r7,32768
 840229c:	3a57883a 	add	r11,r7,r9
 84022a0:	14002426 	beq	r2,r16,8402334 <__ieee754_sqrt+0x1dc>
 84022a4:	4005883a 	mov	r2,r8
 84022a8:	2209c83a 	sub	r4,r4,r8
 84022ac:	19c0012e 	bgeu	r3,r7,84022b4 <__ieee754_sqrt+0x15c>
 84022b0:	213fffc4 	addi	r4,r4,-1
 84022b4:	19c7c83a 	sub	r3,r3,r7
 84022b8:	1011883a 	mov	r8,r2
 84022bc:	1804d7fa 	srli	r2,r3,31
 84022c0:	52800044 	addi	r10,r10,1
 84022c4:	6259883a 	add	r12,r12,r9
 84022c8:	1105883a 	add	r2,r2,r4
 84022cc:	18c7883a 	add	r3,r3,r3
 84022d0:	2089883a 	add	r4,r4,r2
 84022d4:	4812d07a 	srli	r9,r9,1
 84022d8:	53ffed1e 	bne	r10,r15,8402290 <__ieee754_sqrt+0x138>
 84022dc:	20c4b03a 	or	r2,r4,r3
 84022e0:	1000201e 	bne	r2,zero,8402364 <__ieee754_sqrt+0x20c>
 84022e4:	600ed07a 	srli	r7,r12,1
 84022e8:	2880004c 	andi	r2,r5,1
 84022ec:	1005003a 	cmpeq	r2,r2,zero
 84022f0:	1000011e 	bne	r2,zero,84022f8 <__ieee754_sqrt+0x1a0>
 84022f4:	39e00034 	orhi	r7,r7,32768
 84022f8:	300dd07a 	srai	r6,r6,1
 84022fc:	280bd07a 	srai	r5,r5,1
 8402300:	010ff834 	movhi	r4,16352
 8402304:	300c953a 	slli	r6,r6,20
 8402308:	290b883a 	add	r5,r5,r4
 840230c:	3821883a 	mov	r16,r7
 8402310:	299d883a 	add	r14,r5,r6
 8402314:	7023883a 	mov	r17,r14
 8402318:	8005883a 	mov	r2,r16
 840231c:	8807883a 	mov	r3,r17
 8402320:	dfc00217 	ldw	ra,8(sp)
 8402324:	dc400117 	ldw	r17,4(sp)
 8402328:	dc000017 	ldw	r16,0(sp)
 840232c:	dec00304 	addi	sp,sp,12
 8402330:	f800283a 	ret
 8402334:	5884703a 	and	r2,r11,r2
 8402338:	103fda1e 	bne	r2,zero,84022a4 <__ieee754_sqrt+0x14c>
 840233c:	40800044 	addi	r2,r8,1
 8402340:	003fd906 	br	84022a8 <__ieee754_sqrt+0x150>
 8402344:	19ffd42e 	bgeu	r3,r7,8402298 <__ieee754_sqrt+0x140>
 8402348:	2011883a 	mov	r8,r4
 840234c:	003fc906 	br	8402274 <__ieee754_sqrt+0x11c>
 8402350:	4004d7fa 	srli	r2,r8,31
 8402354:	4211883a 	add	r8,r8,r8
 8402358:	1105883a 	add	r2,r2,r4
 840235c:	2089883a 	add	r4,r4,r2
 8402360:	003fa706 	br	8402200 <__ieee754_sqrt+0xa8>
 8402364:	00bfffc4 	movi	r2,-1
 8402368:	60802726 	beq	r12,r2,8402408 <__ieee754_sqrt+0x2b0>
 840236c:	6080004c 	andi	r2,r12,1
 8402370:	6085883a 	add	r2,r12,r2
 8402374:	100ed07a 	srli	r7,r2,1
 8402378:	003fdb06 	br	84022e8 <__ieee754_sqrt+0x190>
 840237c:	8009883a 	mov	r4,r16
 8402380:	800d883a 	mov	r6,r16
 8402384:	840308c0 	call	840308c <__muldf3>
 8402388:	180f883a 	mov	r7,r3
 840238c:	880b883a 	mov	r5,r17
 8402390:	8009883a 	mov	r4,r16
 8402394:	100d883a 	mov	r6,r2
 8402398:	84030180 	call	8403018 <__adddf3>
 840239c:	1021883a 	mov	r16,r2
 84023a0:	1823883a 	mov	r17,r3
 84023a4:	8005883a 	mov	r2,r16
 84023a8:	8807883a 	mov	r3,r17
 84023ac:	dfc00217 	ldw	ra,8(sp)
 84023b0:	dc400117 	ldw	r17,4(sp)
 84023b4:	dc000017 	ldw	r16,0(sp)
 84023b8:	dec00304 	addi	sp,sp,12
 84023bc:	f800283a 	ret
 84023c0:	00a00034 	movhi	r2,32768
 84023c4:	10bfffc4 	addi	r2,r2,-1
 84023c8:	2884703a 	and	r2,r5,r2
 84023cc:	8084b03a 	or	r2,r16,r2
 84023d0:	103fd126 	beq	r2,zero,8402318 <__ieee754_sqrt+0x1c0>
 84023d4:	283f6d26 	beq	r5,zero,840218c <__ieee754_sqrt+0x34>
 84023d8:	280f883a 	mov	r7,r5
 84023dc:	8009883a 	mov	r4,r16
 84023e0:	800d883a 	mov	r6,r16
 84023e4:	8402f980 	call	8402f98 <__subdf3>
 84023e8:	1009883a 	mov	r4,r2
 84023ec:	180b883a 	mov	r5,r3
 84023f0:	100d883a 	mov	r6,r2
 84023f4:	180f883a 	mov	r7,r3
 84023f8:	84034500 	call	8403450 <__divdf3>
 84023fc:	1021883a 	mov	r16,r2
 8402400:	1823883a 	mov	r17,r3
 8402404:	003fc406 	br	8402318 <__ieee754_sqrt+0x1c0>
 8402408:	29400044 	addi	r5,r5,1
 840240c:	000f883a 	mov	r7,zero
 8402410:	003fb506 	br	84022e8 <__ieee754_sqrt+0x190>
 8402414:	0009883a 	mov	r4,zero
 8402418:	00800804 	movi	r2,32
 840241c:	003f6b06 	br	84021cc <__ieee754_sqrt+0x74>

08402420 <fabs>:
 8402420:	01e00034 	movhi	r7,32768
 8402424:	39ffffc4 	addi	r7,r7,-1
 8402428:	394e703a 	and	r7,r7,r5
 840242c:	2005883a 	mov	r2,r4
 8402430:	3807883a 	mov	r3,r7
 8402434:	f800283a 	ret

08402438 <finite>:
 8402438:	00a00034 	movhi	r2,32768
 840243c:	10bfffc4 	addi	r2,r2,-1
 8402440:	2884703a 	and	r2,r5,r2
 8402444:	01600434 	movhi	r5,32784
 8402448:	1145883a 	add	r2,r2,r5
 840244c:	1004d7fa 	srli	r2,r2,31
 8402450:	f800283a 	ret

08402454 <__isnand>:
 8402454:	200d883a 	mov	r6,r4
 8402458:	0109c83a 	sub	r4,zero,r4
 840245c:	2188b03a 	or	r4,r4,r6
 8402460:	2008d7fa 	srli	r4,r4,31
 8402464:	00a00034 	movhi	r2,32768
 8402468:	10bfffc4 	addi	r2,r2,-1
 840246c:	1144703a 	and	r2,r2,r5
 8402470:	2088b03a 	or	r4,r4,r2
 8402474:	009ffc34 	movhi	r2,32752
 8402478:	1105c83a 	sub	r2,r2,r4
 840247c:	1004d7fa 	srli	r2,r2,31
 8402480:	f800283a 	ret

08402484 <matherr>:
 8402484:	0005883a 	mov	r2,zero
 8402488:	f800283a 	ret

0840248c <nan>:
 840248c:	015ffe34 	movhi	r5,32760
 8402490:	0005883a 	mov	r2,zero
 8402494:	2807883a 	mov	r3,r5
 8402498:	f800283a 	ret

0840249c <rint>:
 840249c:	2015883a 	mov	r10,r4
 84024a0:	2809d53a 	srai	r4,r5,20
 84024a4:	defff904 	addi	sp,sp,-28
 84024a8:	034004c4 	movi	r13,19
 84024ac:	2101ffcc 	andi	r4,r4,2047
 84024b0:	227f0044 	addi	r9,r4,-1023
 84024b4:	dc800415 	stw	r18,16(sp)
 84024b8:	dfc00615 	stw	ra,24(sp)
 84024bc:	dcc00515 	stw	r19,20(sp)
 84024c0:	dc400315 	stw	r17,12(sp)
 84024c4:	dc000215 	stw	r16,8(sp)
 84024c8:	2817883a 	mov	r11,r5
 84024cc:	500d883a 	mov	r6,r10
 84024d0:	2824d7fa 	srli	r18,r5,31
 84024d4:	6a403016 	blt	r13,r9,8402598 <rint+0xfc>
 84024d8:	48004916 	blt	r9,zero,8402600 <rint+0x164>
 84024dc:	00800434 	movhi	r2,16
 84024e0:	10bfffc4 	addi	r2,r2,-1
 84024e4:	1247d83a 	sra	r3,r2,r9
 84024e8:	2809883a 	mov	r4,r5
 84024ec:	1944703a 	and	r2,r3,r5
 84024f0:	5084b03a 	or	r2,r10,r2
 84024f4:	10001f26 	beq	r2,zero,8402574 <rint+0xd8>
 84024f8:	180ad07a 	srli	r5,r3,1
 84024fc:	5944703a 	and	r2,r11,r5
 8402500:	5084b03a 	or	r2,r10,r2
 8402504:	10000626 	beq	r2,zero,8402520 <rint+0x84>
 8402508:	4b406626 	beq	r9,r13,84026a4 <rint+0x208>
 840250c:	00c000b4 	movhi	r3,2
 8402510:	1a47d83a 	sra	r3,r3,r9
 8402514:	0144303a 	nor	r2,zero,r5
 8402518:	5884703a 	and	r2,r11,r2
 840251c:	10c8b03a 	or	r4,r2,r3
 8402520:	900690fa 	slli	r3,r18,3
 8402524:	00821074 	movhi	r2,2113
 8402528:	10a23204 	addi	r2,r2,-30520
 840252c:	200f883a 	mov	r7,r4
 8402530:	1887883a 	add	r3,r3,r2
 8402534:	1c000017 	ldw	r16,0(r3)
 8402538:	1c400117 	ldw	r17,4(r3)
 840253c:	8009883a 	mov	r4,r16
 8402540:	880b883a 	mov	r5,r17
 8402544:	84030180 	call	8403018 <__adddf3>
 8402548:	d8800015 	stw	r2,0(sp)
 840254c:	d8c00115 	stw	r3,4(sp)
 8402550:	d8800017 	ldw	r2,0(sp)
 8402554:	d8c00117 	ldw	r3,4(sp)
 8402558:	880f883a 	mov	r7,r17
 840255c:	800d883a 	mov	r6,r16
 8402560:	180b883a 	mov	r5,r3
 8402564:	1009883a 	mov	r4,r2
 8402568:	8402f980 	call	8402f98 <__subdf3>
 840256c:	1015883a 	mov	r10,r2
 8402570:	1817883a 	mov	r11,r3
 8402574:	5005883a 	mov	r2,r10
 8402578:	5807883a 	mov	r3,r11
 840257c:	dfc00617 	ldw	ra,24(sp)
 8402580:	dcc00517 	ldw	r19,20(sp)
 8402584:	dc800417 	ldw	r18,16(sp)
 8402588:	dc400317 	ldw	r17,12(sp)
 840258c:	dc000217 	ldw	r16,8(sp)
 8402590:	dec00704 	addi	sp,sp,28
 8402594:	f800283a 	ret
 8402598:	00800cc4 	movi	r2,51
 840259c:	12400f16 	blt	r2,r9,84025dc <rint+0x140>
 84025a0:	213efb44 	addi	r4,r4,-1043
 84025a4:	00bfffc4 	movi	r2,-1
 84025a8:	1104d83a 	srl	r2,r2,r4
 84025ac:	5086703a 	and	r3,r10,r2
 84025b0:	183ff026 	beq	r3,zero,8402574 <rint+0xd8>
 84025b4:	100ad07a 	srli	r5,r2,1
 84025b8:	5144703a 	and	r2,r10,r5
 84025bc:	10000526 	beq	r2,zero,84025d4 <rint+0x138>
 84025c0:	00d00034 	movhi	r3,16384
 84025c4:	1907d83a 	sra	r3,r3,r4
 84025c8:	0144303a 	nor	r2,zero,r5
 84025cc:	5084703a 	and	r2,r10,r2
 84025d0:	10ccb03a 	or	r6,r2,r3
 84025d4:	5809883a 	mov	r4,r11
 84025d8:	003fd106 	br	8402520 <rint+0x84>
 84025dc:	00810004 	movi	r2,1024
 84025e0:	48bfe41e 	bne	r9,r2,8402574 <rint+0xd8>
 84025e4:	5009883a 	mov	r4,r10
 84025e8:	500d883a 	mov	r6,r10
 84025ec:	280f883a 	mov	r7,r5
 84025f0:	84030180 	call	8403018 <__adddf3>
 84025f4:	1015883a 	mov	r10,r2
 84025f8:	1817883a 	mov	r11,r3
 84025fc:	003fdd06 	br	8402574 <rint+0xd8>
 8402600:	04e00034 	movhi	r19,32768
 8402604:	9cffffc4 	addi	r19,r19,-1
 8402608:	2cc4703a 	and	r2,r5,r19
 840260c:	5084b03a 	or	r2,r10,r2
 8402610:	103fd826 	beq	r2,zero,8402574 <rint+0xd8>
 8402614:	00c00434 	movhi	r3,16
 8402618:	18ffffc4 	addi	r3,r3,-1
 840261c:	28c6703a 	and	r3,r5,r3
 8402620:	50c6b03a 	or	r3,r10,r3
 8402624:	00cdc83a 	sub	r6,zero,r3
 8402628:	900a90fa 	slli	r5,r18,3
 840262c:	1986b03a 	or	r3,r3,r6
 8402630:	01021074 	movhi	r4,2113
 8402634:	21223204 	addi	r4,r4,-30520
 8402638:	1806d33a 	srli	r3,r3,12
 840263c:	290b883a 	add	r5,r5,r4
 8402640:	2c000017 	ldw	r16,0(r5)
 8402644:	2c400117 	ldw	r17,4(r5)
 8402648:	593fffac 	andhi	r4,r11,65534
 840264c:	18c0022c 	andhi	r3,r3,8
 8402650:	1906b03a 	or	r3,r3,r4
 8402654:	500d883a 	mov	r6,r10
 8402658:	180f883a 	mov	r7,r3
 840265c:	8009883a 	mov	r4,r16
 8402660:	880b883a 	mov	r5,r17
 8402664:	84030180 	call	8403018 <__adddf3>
 8402668:	d8800015 	stw	r2,0(sp)
 840266c:	d8c00115 	stw	r3,4(sp)
 8402670:	d8800017 	ldw	r2,0(sp)
 8402674:	d8c00117 	ldw	r3,4(sp)
 8402678:	880f883a 	mov	r7,r17
 840267c:	800d883a 	mov	r6,r16
 8402680:	180b883a 	mov	r5,r3
 8402684:	1009883a 	mov	r4,r2
 8402688:	8402f980 	call	8402f98 <__subdf3>
 840268c:	901297fa 	slli	r9,r18,31
 8402690:	98d0703a 	and	r8,r19,r3
 8402694:	1015883a 	mov	r10,r2
 8402698:	4250b03a 	or	r8,r8,r9
 840269c:	4017883a 	mov	r11,r8
 84026a0:	003fb406 	br	8402574 <rint+0xd8>
 84026a4:	01900034 	movhi	r6,16384
 84026a8:	003f9d06 	br	8402520 <rint+0x84>

084026ac <scalbn>:
 84026ac:	2011883a 	mov	r8,r4
 84026b0:	291ffc2c 	andhi	r4,r5,32752
 84026b4:	2009d53a 	srai	r4,r4,20
 84026b8:	defffd04 	addi	sp,sp,-12
 84026bc:	dc000015 	stw	r16,0(sp)
 84026c0:	dfc00215 	stw	ra,8(sp)
 84026c4:	dc400115 	stw	r17,4(sp)
 84026c8:	2813883a 	mov	r9,r5
 84026cc:	2815883a 	mov	r10,r5
 84026d0:	3021883a 	mov	r16,r6
 84026d4:	2000281e 	bne	r4,zero,8402778 <scalbn+0xcc>
 84026d8:	00a00034 	movhi	r2,32768
 84026dc:	10bfffc4 	addi	r2,r2,-1
 84026e0:	2884703a 	and	r2,r5,r2
 84026e4:	4084b03a 	or	r2,r8,r2
 84026e8:	10001826 	beq	r2,zero,840274c <scalbn+0xa0>
 84026ec:	0005883a 	mov	r2,zero
 84026f0:	00d0d434 	movhi	r3,17232
 84026f4:	4009883a 	mov	r4,r8
 84026f8:	100d883a 	mov	r6,r2
 84026fc:	180f883a 	mov	r7,r3
 8402700:	840308c0 	call	840308c <__muldf3>
 8402704:	100b883a 	mov	r5,r2
 8402708:	1011883a 	mov	r8,r2
 840270c:	00bffff4 	movhi	r2,65535
 8402710:	108f2c04 	addi	r2,r2,15536
 8402714:	180d883a 	mov	r6,r3
 8402718:	1813883a 	mov	r9,r3
 840271c:	8080120e 	bge	r16,r2,8402768 <scalbn+0xbc>
 8402720:	00b0be74 	movhi	r2,49913
 8402724:	10bcd644 	addi	r2,r2,-3239
 8402728:	00c06974 	movhi	r3,421
 840272c:	18db87c4 	addi	r3,r3,28191
 8402730:	2809883a 	mov	r4,r5
 8402734:	180f883a 	mov	r7,r3
 8402738:	300b883a 	mov	r5,r6
 840273c:	100d883a 	mov	r6,r2
 8402740:	840308c0 	call	840308c <__muldf3>
 8402744:	1011883a 	mov	r8,r2
 8402748:	1813883a 	mov	r9,r3
 840274c:	4005883a 	mov	r2,r8
 8402750:	4807883a 	mov	r3,r9
 8402754:	dfc00217 	ldw	ra,8(sp)
 8402758:	dc400117 	ldw	r17,4(sp)
 840275c:	dc000017 	ldw	r16,0(sp)
 8402760:	dec00304 	addi	sp,sp,12
 8402764:	f800283a 	ret
 8402768:	189ffc2c 	andhi	r2,r3,32752
 840276c:	1005d53a 	srai	r2,r2,20
 8402770:	1815883a 	mov	r10,r3
 8402774:	113ff284 	addi	r4,r2,-54
 8402778:	0081ffc4 	movi	r2,2047
 840277c:	20801126 	beq	r4,r2,84027c4 <scalbn+0x118>
 8402780:	2409883a 	add	r4,r4,r16
 8402784:	0081ff84 	movi	r2,2046
 8402788:	11001c16 	blt	r2,r4,84027fc <scalbn+0x150>
 840278c:	0100290e 	bge	zero,r4,8402834 <scalbn+0x188>
 8402790:	200a953a 	slli	r5,r4,20
 8402794:	01200434 	movhi	r4,32784
 8402798:	213fffc4 	addi	r4,r4,-1
 840279c:	5108703a 	and	r4,r10,r4
 84027a0:	2148b03a 	or	r4,r4,r5
 84027a4:	2013883a 	mov	r9,r4
 84027a8:	4005883a 	mov	r2,r8
 84027ac:	4807883a 	mov	r3,r9
 84027b0:	dfc00217 	ldw	ra,8(sp)
 84027b4:	dc400117 	ldw	r17,4(sp)
 84027b8:	dc000017 	ldw	r16,0(sp)
 84027bc:	dec00304 	addi	sp,sp,12
 84027c0:	f800283a 	ret
 84027c4:	480f883a 	mov	r7,r9
 84027c8:	4009883a 	mov	r4,r8
 84027cc:	480b883a 	mov	r5,r9
 84027d0:	400d883a 	mov	r6,r8
 84027d4:	84030180 	call	8403018 <__adddf3>
 84027d8:	1011883a 	mov	r8,r2
 84027dc:	1813883a 	mov	r9,r3
 84027e0:	4005883a 	mov	r2,r8
 84027e4:	4807883a 	mov	r3,r9
 84027e8:	dfc00217 	ldw	ra,8(sp)
 84027ec:	dc400117 	ldw	r17,4(sp)
 84027f0:	dc000017 	ldw	r16,0(sp)
 84027f4:	dec00304 	addi	sp,sp,12
 84027f8:	f800283a 	ret
 84027fc:	04220034 	movhi	r16,34816
 8402800:	841d6704 	addi	r16,r16,30108
 8402804:	045f8e34 	movhi	r17,32312
 8402808:	8c790f04 	addi	r17,r17,-7108
 840280c:	480f883a 	mov	r7,r9
 8402810:	400d883a 	mov	r6,r8
 8402814:	8009883a 	mov	r4,r16
 8402818:	880b883a 	mov	r5,r17
 840281c:	840288c0 	call	840288c <copysign>
 8402820:	180b883a 	mov	r5,r3
 8402824:	800d883a 	mov	r6,r16
 8402828:	880f883a 	mov	r7,r17
 840282c:	1009883a 	mov	r4,r2
 8402830:	003fc306 	br	8402740 <scalbn+0x94>
 8402834:	00bff284 	movi	r2,-54
 8402838:	11000716 	blt	r2,r4,8402858 <scalbn+0x1ac>
 840283c:	00b0d414 	movui	r2,50000
 8402840:	143fee16 	blt	r2,r16,84027fc <scalbn+0x150>
 8402844:	0430be74 	movhi	r16,49913
 8402848:	843cd644 	addi	r16,r16,-3239
 840284c:	04406974 	movhi	r17,421
 8402850:	8c5b87c4 	addi	r17,r17,28191
 8402854:	003fed06 	br	840280c <scalbn+0x160>
 8402858:	21000d84 	addi	r4,r4,54
 840285c:	2008953a 	slli	r4,r4,20
 8402860:	01e00434 	movhi	r7,32784
 8402864:	39ffffc4 	addi	r7,r7,-1
 8402868:	51ce703a 	and	r7,r10,r7
 840286c:	390eb03a 	or	r7,r7,r4
 8402870:	024f2434 	movhi	r9,15504
 8402874:	4009883a 	mov	r4,r8
 8402878:	0011883a 	mov	r8,zero
 840287c:	380b883a 	mov	r5,r7
 8402880:	400d883a 	mov	r6,r8
 8402884:	480f883a 	mov	r7,r9
 8402888:	003fad06 	br	8402740 <scalbn+0x94>

0840288c <copysign>:
 840288c:	3813883a 	mov	r9,r7
 8402890:	01e00034 	movhi	r7,32768
 8402894:	39ffffc4 	addi	r7,r7,-1
 8402898:	394e703a 	and	r7,r7,r5
 840289c:	4aa0002c 	andhi	r10,r9,32768
 84028a0:	3a8eb03a 	or	r7,r7,r10
 84028a4:	2005883a 	mov	r2,r4
 84028a8:	3807883a 	mov	r3,r7
 84028ac:	f800283a 	ret

084028b0 <__divsf3>:
 84028b0:	defff304 	addi	sp,sp,-52
 84028b4:	dc400b15 	stw	r17,44(sp)
 84028b8:	dc400204 	addi	r17,sp,8
 84028bc:	dc000a15 	stw	r16,40(sp)
 84028c0:	d9000015 	stw	r4,0(sp)
 84028c4:	d9400115 	stw	r5,4(sp)
 84028c8:	d809883a 	mov	r4,sp
 84028cc:	880b883a 	mov	r5,r17
 84028d0:	dc000604 	addi	r16,sp,24
 84028d4:	dfc00c15 	stw	ra,48(sp)
 84028d8:	8403eb80 	call	8403eb8 <__unpack_f>
 84028dc:	d9000104 	addi	r4,sp,4
 84028e0:	800b883a 	mov	r5,r16
 84028e4:	8403eb80 	call	8403eb8 <__unpack_f>
 84028e8:	d9000217 	ldw	r4,8(sp)
 84028ec:	00800044 	movi	r2,1
 84028f0:	01800104 	movi	r6,4
 84028f4:	11000a2e 	bgeu	r2,r4,8402920 <__divsf3+0x70>
 84028f8:	d9400617 	ldw	r5,24(sp)
 84028fc:	1140432e 	bgeu	r2,r5,8402a0c <__divsf3+0x15c>
 8402900:	d8800317 	ldw	r2,12(sp)
 8402904:	d8c00717 	ldw	r3,28(sp)
 8402908:	10c4f03a 	xor	r2,r2,r3
 840290c:	d8800315 	stw	r2,12(sp)
 8402910:	21800226 	beq	r4,r6,840291c <__divsf3+0x6c>
 8402914:	00800084 	movi	r2,2
 8402918:	2080101e 	bne	r4,r2,840295c <__divsf3+0xac>
 840291c:	29000726 	beq	r5,r4,840293c <__divsf3+0x8c>
 8402920:	8809883a 	mov	r4,r17
 8402924:	8403d580 	call	8403d58 <__pack_f>
 8402928:	dfc00c17 	ldw	ra,48(sp)
 840292c:	dc400b17 	ldw	r17,44(sp)
 8402930:	dc000a17 	ldw	r16,40(sp)
 8402934:	dec00d04 	addi	sp,sp,52
 8402938:	f800283a 	ret
 840293c:	01021074 	movhi	r4,2113
 8402940:	21223604 	addi	r4,r4,-30504
 8402944:	8403d580 	call	8403d58 <__pack_f>
 8402948:	dfc00c17 	ldw	ra,48(sp)
 840294c:	dc400b17 	ldw	r17,44(sp)
 8402950:	dc000a17 	ldw	r16,40(sp)
 8402954:	dec00d04 	addi	sp,sp,52
 8402958:	f800283a 	ret
 840295c:	29802d26 	beq	r5,r6,8402a14 <__divsf3+0x164>
 8402960:	28801a26 	beq	r5,r2,84029cc <__divsf3+0x11c>
 8402964:	d8c00417 	ldw	r3,16(sp)
 8402968:	d8800817 	ldw	r2,32(sp)
 840296c:	d9000517 	ldw	r4,20(sp)
 8402970:	d9800917 	ldw	r6,36(sp)
 8402974:	1885c83a 	sub	r2,r3,r2
 8402978:	d8800415 	stw	r2,16(sp)
 840297c:	2180032e 	bgeu	r4,r6,840298c <__divsf3+0xdc>
 8402980:	10bfffc4 	addi	r2,r2,-1
 8402984:	d8800415 	stw	r2,16(sp)
 8402988:	2109883a 	add	r4,r4,r4
 840298c:	01500034 	movhi	r5,16384
 8402990:	0007883a 	mov	r3,zero
 8402994:	0005883a 	mov	r2,zero
 8402998:	01c007c4 	movi	r7,31
 840299c:	10800044 	addi	r2,r2,1
 84029a0:	21800236 	bltu	r4,r6,84029ac <__divsf3+0xfc>
 84029a4:	1946b03a 	or	r3,r3,r5
 84029a8:	2189c83a 	sub	r4,r4,r6
 84029ac:	280ad07a 	srli	r5,r5,1
 84029b0:	2109883a 	add	r4,r4,r4
 84029b4:	11fff91e 	bne	r2,r7,840299c <__divsf3+0xec>
 84029b8:	19401fcc 	andi	r5,r3,127
 84029bc:	00801004 	movi	r2,64
 84029c0:	28800a26 	beq	r5,r2,84029ec <__divsf3+0x13c>
 84029c4:	d8c00515 	stw	r3,20(sp)
 84029c8:	003fd506 	br	8402920 <__divsf3+0x70>
 84029cc:	8809883a 	mov	r4,r17
 84029d0:	d9800215 	stw	r6,8(sp)
 84029d4:	8403d580 	call	8403d58 <__pack_f>
 84029d8:	dfc00c17 	ldw	ra,48(sp)
 84029dc:	dc400b17 	ldw	r17,44(sp)
 84029e0:	dc000a17 	ldw	r16,40(sp)
 84029e4:	dec00d04 	addi	sp,sp,52
 84029e8:	f800283a 	ret
 84029ec:	1880200c 	andi	r2,r3,128
 84029f0:	103ff41e 	bne	r2,zero,84029c4 <__divsf3+0x114>
 84029f4:	203ff326 	beq	r4,zero,84029c4 <__divsf3+0x114>
 84029f8:	1947883a 	add	r3,r3,r5
 84029fc:	00bfe004 	movi	r2,-128
 8402a00:	1886703a 	and	r3,r3,r2
 8402a04:	d8c00515 	stw	r3,20(sp)
 8402a08:	003fc506 	br	8402920 <__divsf3+0x70>
 8402a0c:	8009883a 	mov	r4,r16
 8402a10:	003fc406 	br	8402924 <__divsf3+0x74>
 8402a14:	8809883a 	mov	r4,r17
 8402a18:	d8000515 	stw	zero,20(sp)
 8402a1c:	d8000415 	stw	zero,16(sp)
 8402a20:	003fc006 	br	8402924 <__divsf3+0x74>

08402a24 <__lesf2>:
 8402a24:	defff304 	addi	sp,sp,-52
 8402a28:	dc400b15 	stw	r17,44(sp)
 8402a2c:	dc400204 	addi	r17,sp,8
 8402a30:	dc000a15 	stw	r16,40(sp)
 8402a34:	d9000015 	stw	r4,0(sp)
 8402a38:	d9400115 	stw	r5,4(sp)
 8402a3c:	d809883a 	mov	r4,sp
 8402a40:	880b883a 	mov	r5,r17
 8402a44:	dc000604 	addi	r16,sp,24
 8402a48:	dfc00c15 	stw	ra,48(sp)
 8402a4c:	8403eb80 	call	8403eb8 <__unpack_f>
 8402a50:	d9000104 	addi	r4,sp,4
 8402a54:	800b883a 	mov	r5,r16
 8402a58:	8403eb80 	call	8403eb8 <__unpack_f>
 8402a5c:	d8800217 	ldw	r2,8(sp)
 8402a60:	00c00044 	movi	r3,1
 8402a64:	180d883a 	mov	r6,r3
 8402a68:	1880062e 	bgeu	r3,r2,8402a84 <__lesf2+0x60>
 8402a6c:	d8800617 	ldw	r2,24(sp)
 8402a70:	8809883a 	mov	r4,r17
 8402a74:	800b883a 	mov	r5,r16
 8402a78:	1880022e 	bgeu	r3,r2,8402a84 <__lesf2+0x60>
 8402a7c:	8403f800 	call	8403f80 <__fpcmp_parts_f>
 8402a80:	100d883a 	mov	r6,r2
 8402a84:	3005883a 	mov	r2,r6
 8402a88:	dfc00c17 	ldw	ra,48(sp)
 8402a8c:	dc400b17 	ldw	r17,44(sp)
 8402a90:	dc000a17 	ldw	r16,40(sp)
 8402a94:	dec00d04 	addi	sp,sp,52
 8402a98:	f800283a 	ret

08402a9c <__floatsisf>:
 8402a9c:	2006d7fa 	srli	r3,r4,31
 8402aa0:	defffa04 	addi	sp,sp,-24
 8402aa4:	008000c4 	movi	r2,3
 8402aa8:	dfc00515 	stw	ra,20(sp)
 8402aac:	dc000415 	stw	r16,16(sp)
 8402ab0:	d8800015 	stw	r2,0(sp)
 8402ab4:	d8c00115 	stw	r3,4(sp)
 8402ab8:	2000081e 	bne	r4,zero,8402adc <__floatsisf+0x40>
 8402abc:	00800084 	movi	r2,2
 8402ac0:	d8800015 	stw	r2,0(sp)
 8402ac4:	d809883a 	mov	r4,sp
 8402ac8:	8403d580 	call	8403d58 <__pack_f>
 8402acc:	dfc00517 	ldw	ra,20(sp)
 8402ad0:	dc000417 	ldw	r16,16(sp)
 8402ad4:	dec00604 	addi	sp,sp,24
 8402ad8:	f800283a 	ret
 8402adc:	00800784 	movi	r2,30
 8402ae0:	1807003a 	cmpeq	r3,r3,zero
 8402ae4:	d8800215 	stw	r2,8(sp)
 8402ae8:	18000e1e 	bne	r3,zero,8402b24 <__floatsisf+0x88>
 8402aec:	00a00034 	movhi	r2,32768
 8402af0:	20800e26 	beq	r4,r2,8402b2c <__floatsisf+0x90>
 8402af4:	0121c83a 	sub	r16,zero,r4
 8402af8:	8009883a 	mov	r4,r16
 8402afc:	dc000315 	stw	r16,12(sp)
 8402b00:	8403cd80 	call	8403cd8 <__clzsi2>
 8402b04:	117fffc4 	addi	r5,r2,-1
 8402b08:	017fee0e 	bge	zero,r5,8402ac4 <__floatsisf+0x28>
 8402b0c:	d8800217 	ldw	r2,8(sp)
 8402b10:	8146983a 	sll	r3,r16,r5
 8402b14:	1145c83a 	sub	r2,r2,r5
 8402b18:	d8c00315 	stw	r3,12(sp)
 8402b1c:	d8800215 	stw	r2,8(sp)
 8402b20:	003fe806 	br	8402ac4 <__floatsisf+0x28>
 8402b24:	2021883a 	mov	r16,r4
 8402b28:	003ff306 	br	8402af8 <__floatsisf+0x5c>
 8402b2c:	00b3c034 	movhi	r2,52992
 8402b30:	003fe606 	br	8402acc <__floatsisf+0x30>

08402b34 <__extendsfdf2>:
 8402b34:	defff904 	addi	sp,sp,-28
 8402b38:	d9000115 	stw	r4,4(sp)
 8402b3c:	d9400204 	addi	r5,sp,8
 8402b40:	d9000104 	addi	r4,sp,4
 8402b44:	dfc00615 	stw	ra,24(sp)
 8402b48:	8403eb80 	call	8403eb8 <__unpack_f>
 8402b4c:	d9c00517 	ldw	r7,20(sp)
 8402b50:	0011883a 	mov	r8,zero
 8402b54:	400697ba 	slli	r3,r8,30
 8402b58:	3812d0ba 	srli	r9,r7,2
 8402b5c:	380497ba 	slli	r2,r7,30
 8402b60:	d9000217 	ldw	r4,8(sp)
 8402b64:	d9400317 	ldw	r5,12(sp)
 8402b68:	d9800417 	ldw	r6,16(sp)
 8402b6c:	48c6b03a 	or	r3,r9,r3
 8402b70:	100f883a 	mov	r7,r2
 8402b74:	d8c00015 	stw	r3,0(sp)
 8402b78:	8403a480 	call	8403a48 <__make_dp>
 8402b7c:	dfc00617 	ldw	ra,24(sp)
 8402b80:	dec00704 	addi	sp,sp,28
 8402b84:	f800283a 	ret

08402b88 <_fpadd_parts>:
 8402b88:	defff804 	addi	sp,sp,-32
 8402b8c:	dcc00315 	stw	r19,12(sp)
 8402b90:	2027883a 	mov	r19,r4
 8402b94:	21000017 	ldw	r4,0(r4)
 8402b98:	00c00044 	movi	r3,1
 8402b9c:	dd400515 	stw	r21,20(sp)
 8402ba0:	dd000415 	stw	r20,16(sp)
 8402ba4:	ddc00715 	stw	r23,28(sp)
 8402ba8:	dd800615 	stw	r22,24(sp)
 8402bac:	dc800215 	stw	r18,8(sp)
 8402bb0:	dc400115 	stw	r17,4(sp)
 8402bb4:	dc000015 	stw	r16,0(sp)
 8402bb8:	282b883a 	mov	r21,r5
 8402bbc:	3029883a 	mov	r20,r6
 8402bc0:	1900632e 	bgeu	r3,r4,8402d50 <_fpadd_parts+0x1c8>
 8402bc4:	28800017 	ldw	r2,0(r5)
 8402bc8:	1880812e 	bgeu	r3,r2,8402dd0 <_fpadd_parts+0x248>
 8402bcc:	00c00104 	movi	r3,4
 8402bd0:	20c0dc26 	beq	r4,r3,8402f44 <_fpadd_parts+0x3bc>
 8402bd4:	10c07e26 	beq	r2,r3,8402dd0 <_fpadd_parts+0x248>
 8402bd8:	00c00084 	movi	r3,2
 8402bdc:	10c06726 	beq	r2,r3,8402d7c <_fpadd_parts+0x1f4>
 8402be0:	20c07b26 	beq	r4,r3,8402dd0 <_fpadd_parts+0x248>
 8402be4:	9dc00217 	ldw	r23,8(r19)
 8402be8:	28c00217 	ldw	r3,8(r5)
 8402bec:	9c400317 	ldw	r17,12(r19)
 8402bf0:	2bc00317 	ldw	r15,12(r5)
 8402bf4:	b8cdc83a 	sub	r6,r23,r3
 8402bf8:	9c800417 	ldw	r18,16(r19)
 8402bfc:	2c000417 	ldw	r16,16(r5)
 8402c00:	3009883a 	mov	r4,r6
 8402c04:	30009716 	blt	r6,zero,8402e64 <_fpadd_parts+0x2dc>
 8402c08:	00800fc4 	movi	r2,63
 8402c0c:	11806b16 	blt	r2,r6,8402dbc <_fpadd_parts+0x234>
 8402c10:	0100a40e 	bge	zero,r4,8402ea4 <_fpadd_parts+0x31c>
 8402c14:	35bff804 	addi	r22,r6,-32
 8402c18:	b000bc16 	blt	r22,zero,8402f0c <_fpadd_parts+0x384>
 8402c1c:	8596d83a 	srl	r11,r16,r22
 8402c20:	0019883a 	mov	r12,zero
 8402c24:	0013883a 	mov	r9,zero
 8402c28:	01000044 	movi	r4,1
 8402c2c:	0015883a 	mov	r10,zero
 8402c30:	b000be16 	blt	r22,zero,8402f2c <_fpadd_parts+0x3a4>
 8402c34:	2590983a 	sll	r8,r4,r22
 8402c38:	000f883a 	mov	r7,zero
 8402c3c:	00bfffc4 	movi	r2,-1
 8402c40:	3889883a 	add	r4,r7,r2
 8402c44:	408b883a 	add	r5,r8,r2
 8402c48:	21cd803a 	cmpltu	r6,r4,r7
 8402c4c:	314b883a 	add	r5,r6,r5
 8402c50:	7904703a 	and	r2,r15,r4
 8402c54:	8146703a 	and	r3,r16,r5
 8402c58:	10c4b03a 	or	r2,r2,r3
 8402c5c:	10000226 	beq	r2,zero,8402c68 <_fpadd_parts+0xe0>
 8402c60:	02400044 	movi	r9,1
 8402c64:	0015883a 	mov	r10,zero
 8402c68:	5a5eb03a 	or	r15,r11,r9
 8402c6c:	62a0b03a 	or	r16,r12,r10
 8402c70:	99400117 	ldw	r5,4(r19)
 8402c74:	a8800117 	ldw	r2,4(r21)
 8402c78:	28806e26 	beq	r5,r2,8402e34 <_fpadd_parts+0x2ac>
 8402c7c:	28006626 	beq	r5,zero,8402e18 <_fpadd_parts+0x290>
 8402c80:	7c45c83a 	sub	r2,r15,r17
 8402c84:	7889803a 	cmpltu	r4,r15,r2
 8402c88:	8487c83a 	sub	r3,r16,r18
 8402c8c:	1909c83a 	sub	r4,r3,r4
 8402c90:	100d883a 	mov	r6,r2
 8402c94:	200f883a 	mov	r7,r4
 8402c98:	38007716 	blt	r7,zero,8402e78 <_fpadd_parts+0x2f0>
 8402c9c:	a5c00215 	stw	r23,8(r20)
 8402ca0:	a1c00415 	stw	r7,16(r20)
 8402ca4:	a0000115 	stw	zero,4(r20)
 8402ca8:	a1800315 	stw	r6,12(r20)
 8402cac:	a2000317 	ldw	r8,12(r20)
 8402cb0:	a2400417 	ldw	r9,16(r20)
 8402cb4:	00bfffc4 	movi	r2,-1
 8402cb8:	408b883a 	add	r5,r8,r2
 8402cbc:	2a09803a 	cmpltu	r4,r5,r8
 8402cc0:	488d883a 	add	r6,r9,r2
 8402cc4:	01c40034 	movhi	r7,4096
 8402cc8:	39ffffc4 	addi	r7,r7,-1
 8402ccc:	218d883a 	add	r6,r4,r6
 8402cd0:	39801736 	bltu	r7,r6,8402d30 <_fpadd_parts+0x1a8>
 8402cd4:	31c06526 	beq	r6,r7,8402e6c <_fpadd_parts+0x2e4>
 8402cd8:	a3000217 	ldw	r12,8(r20)
 8402cdc:	4209883a 	add	r4,r8,r8
 8402ce0:	00bfffc4 	movi	r2,-1
 8402ce4:	220f803a 	cmpltu	r7,r4,r8
 8402ce8:	4a4b883a 	add	r5,r9,r9
 8402cec:	394f883a 	add	r7,r7,r5
 8402cf0:	2095883a 	add	r10,r4,r2
 8402cf4:	3897883a 	add	r11,r7,r2
 8402cf8:	510d803a 	cmpltu	r6,r10,r4
 8402cfc:	6099883a 	add	r12,r12,r2
 8402d00:	32d7883a 	add	r11,r6,r11
 8402d04:	00840034 	movhi	r2,4096
 8402d08:	10bfffc4 	addi	r2,r2,-1
 8402d0c:	2011883a 	mov	r8,r4
 8402d10:	3813883a 	mov	r9,r7
 8402d14:	a1000315 	stw	r4,12(r20)
 8402d18:	a1c00415 	stw	r7,16(r20)
 8402d1c:	a3000215 	stw	r12,8(r20)
 8402d20:	12c00336 	bltu	r2,r11,8402d30 <_fpadd_parts+0x1a8>
 8402d24:	58bfed1e 	bne	r11,r2,8402cdc <_fpadd_parts+0x154>
 8402d28:	00bfff84 	movi	r2,-2
 8402d2c:	12bfeb2e 	bgeu	r2,r10,8402cdc <_fpadd_parts+0x154>
 8402d30:	a2800417 	ldw	r10,16(r20)
 8402d34:	008000c4 	movi	r2,3
 8402d38:	00c80034 	movhi	r3,8192
 8402d3c:	18ffffc4 	addi	r3,r3,-1
 8402d40:	a2400317 	ldw	r9,12(r20)
 8402d44:	a0800015 	stw	r2,0(r20)
 8402d48:	1a802336 	bltu	r3,r10,8402dd8 <_fpadd_parts+0x250>
 8402d4c:	a027883a 	mov	r19,r20
 8402d50:	9805883a 	mov	r2,r19
 8402d54:	ddc00717 	ldw	r23,28(sp)
 8402d58:	dd800617 	ldw	r22,24(sp)
 8402d5c:	dd400517 	ldw	r21,20(sp)
 8402d60:	dd000417 	ldw	r20,16(sp)
 8402d64:	dcc00317 	ldw	r19,12(sp)
 8402d68:	dc800217 	ldw	r18,8(sp)
 8402d6c:	dc400117 	ldw	r17,4(sp)
 8402d70:	dc000017 	ldw	r16,0(sp)
 8402d74:	dec00804 	addi	sp,sp,32
 8402d78:	f800283a 	ret
 8402d7c:	20fff41e 	bne	r4,r3,8402d50 <_fpadd_parts+0x1c8>
 8402d80:	31000015 	stw	r4,0(r6)
 8402d84:	98800117 	ldw	r2,4(r19)
 8402d88:	30800115 	stw	r2,4(r6)
 8402d8c:	98c00217 	ldw	r3,8(r19)
 8402d90:	30c00215 	stw	r3,8(r6)
 8402d94:	98800317 	ldw	r2,12(r19)
 8402d98:	30800315 	stw	r2,12(r6)
 8402d9c:	98c00417 	ldw	r3,16(r19)
 8402da0:	30c00415 	stw	r3,16(r6)
 8402da4:	98800117 	ldw	r2,4(r19)
 8402da8:	28c00117 	ldw	r3,4(r5)
 8402dac:	3027883a 	mov	r19,r6
 8402db0:	10c4703a 	and	r2,r2,r3
 8402db4:	30800115 	stw	r2,4(r6)
 8402db8:	003fe506 	br	8402d50 <_fpadd_parts+0x1c8>
 8402dbc:	1dc02616 	blt	r3,r23,8402e58 <_fpadd_parts+0x2d0>
 8402dc0:	0023883a 	mov	r17,zero
 8402dc4:	182f883a 	mov	r23,r3
 8402dc8:	0025883a 	mov	r18,zero
 8402dcc:	003fa806 	br	8402c70 <_fpadd_parts+0xe8>
 8402dd0:	a827883a 	mov	r19,r21
 8402dd4:	003fde06 	br	8402d50 <_fpadd_parts+0x1c8>
 8402dd8:	01800044 	movi	r6,1
 8402ddc:	500497fa 	slli	r2,r10,31
 8402de0:	4808d07a 	srli	r4,r9,1
 8402de4:	518ad83a 	srl	r5,r10,r6
 8402de8:	a2000217 	ldw	r8,8(r20)
 8402dec:	1108b03a 	or	r4,r2,r4
 8402df0:	0007883a 	mov	r3,zero
 8402df4:	4984703a 	and	r2,r9,r6
 8402df8:	208cb03a 	or	r6,r4,r2
 8402dfc:	28ceb03a 	or	r7,r5,r3
 8402e00:	42000044 	addi	r8,r8,1
 8402e04:	a027883a 	mov	r19,r20
 8402e08:	a1c00415 	stw	r7,16(r20)
 8402e0c:	a2000215 	stw	r8,8(r20)
 8402e10:	a1800315 	stw	r6,12(r20)
 8402e14:	003fce06 	br	8402d50 <_fpadd_parts+0x1c8>
 8402e18:	8bc5c83a 	sub	r2,r17,r15
 8402e1c:	8889803a 	cmpltu	r4,r17,r2
 8402e20:	9407c83a 	sub	r3,r18,r16
 8402e24:	1909c83a 	sub	r4,r3,r4
 8402e28:	100d883a 	mov	r6,r2
 8402e2c:	200f883a 	mov	r7,r4
 8402e30:	003f9906 	br	8402c98 <_fpadd_parts+0x110>
 8402e34:	7c45883a 	add	r2,r15,r17
 8402e38:	13c9803a 	cmpltu	r4,r2,r15
 8402e3c:	8487883a 	add	r3,r16,r18
 8402e40:	20c9883a 	add	r4,r4,r3
 8402e44:	a1400115 	stw	r5,4(r20)
 8402e48:	a5c00215 	stw	r23,8(r20)
 8402e4c:	a0800315 	stw	r2,12(r20)
 8402e50:	a1000415 	stw	r4,16(r20)
 8402e54:	003fb606 	br	8402d30 <_fpadd_parts+0x1a8>
 8402e58:	001f883a 	mov	r15,zero
 8402e5c:	0021883a 	mov	r16,zero
 8402e60:	003f8306 	br	8402c70 <_fpadd_parts+0xe8>
 8402e64:	018dc83a 	sub	r6,zero,r6
 8402e68:	003f6706 	br	8402c08 <_fpadd_parts+0x80>
 8402e6c:	00bfff84 	movi	r2,-2
 8402e70:	117faf36 	bltu	r2,r5,8402d30 <_fpadd_parts+0x1a8>
 8402e74:	003f9806 	br	8402cd8 <_fpadd_parts+0x150>
 8402e78:	0005883a 	mov	r2,zero
 8402e7c:	1189c83a 	sub	r4,r2,r6
 8402e80:	1105803a 	cmpltu	r2,r2,r4
 8402e84:	01cbc83a 	sub	r5,zero,r7
 8402e88:	2885c83a 	sub	r2,r5,r2
 8402e8c:	01800044 	movi	r6,1
 8402e90:	a1800115 	stw	r6,4(r20)
 8402e94:	a5c00215 	stw	r23,8(r20)
 8402e98:	a1000315 	stw	r4,12(r20)
 8402e9c:	a0800415 	stw	r2,16(r20)
 8402ea0:	003f8206 	br	8402cac <_fpadd_parts+0x124>
 8402ea4:	203f7226 	beq	r4,zero,8402c70 <_fpadd_parts+0xe8>
 8402ea8:	35bff804 	addi	r22,r6,-32
 8402eac:	b9af883a 	add	r23,r23,r6
 8402eb0:	b0003116 	blt	r22,zero,8402f78 <_fpadd_parts+0x3f0>
 8402eb4:	959ad83a 	srl	r13,r18,r22
 8402eb8:	001d883a 	mov	r14,zero
 8402ebc:	000f883a 	mov	r7,zero
 8402ec0:	01000044 	movi	r4,1
 8402ec4:	0011883a 	mov	r8,zero
 8402ec8:	b0002516 	blt	r22,zero,8402f60 <_fpadd_parts+0x3d8>
 8402ecc:	2594983a 	sll	r10,r4,r22
 8402ed0:	0013883a 	mov	r9,zero
 8402ed4:	00bfffc4 	movi	r2,-1
 8402ed8:	4889883a 	add	r4,r9,r2
 8402edc:	508b883a 	add	r5,r10,r2
 8402ee0:	224d803a 	cmpltu	r6,r4,r9
 8402ee4:	314b883a 	add	r5,r6,r5
 8402ee8:	8904703a 	and	r2,r17,r4
 8402eec:	9146703a 	and	r3,r18,r5
 8402ef0:	10c4b03a 	or	r2,r2,r3
 8402ef4:	10000226 	beq	r2,zero,8402f00 <_fpadd_parts+0x378>
 8402ef8:	01c00044 	movi	r7,1
 8402efc:	0011883a 	mov	r8,zero
 8402f00:	69e2b03a 	or	r17,r13,r7
 8402f04:	7224b03a 	or	r18,r14,r8
 8402f08:	003f5906 	br	8402c70 <_fpadd_parts+0xe8>
 8402f0c:	8407883a 	add	r3,r16,r16
 8402f10:	008007c4 	movi	r2,31
 8402f14:	1185c83a 	sub	r2,r2,r6
 8402f18:	1886983a 	sll	r3,r3,r2
 8402f1c:	7996d83a 	srl	r11,r15,r6
 8402f20:	8198d83a 	srl	r12,r16,r6
 8402f24:	1ad6b03a 	or	r11,r3,r11
 8402f28:	003f3e06 	br	8402c24 <_fpadd_parts+0x9c>
 8402f2c:	2006d07a 	srli	r3,r4,1
 8402f30:	008007c4 	movi	r2,31
 8402f34:	1185c83a 	sub	r2,r2,r6
 8402f38:	1890d83a 	srl	r8,r3,r2
 8402f3c:	218e983a 	sll	r7,r4,r6
 8402f40:	003f3e06 	br	8402c3c <_fpadd_parts+0xb4>
 8402f44:	113f821e 	bne	r2,r4,8402d50 <_fpadd_parts+0x1c8>
 8402f48:	28c00117 	ldw	r3,4(r5)
 8402f4c:	98800117 	ldw	r2,4(r19)
 8402f50:	10ff7f26 	beq	r2,r3,8402d50 <_fpadd_parts+0x1c8>
 8402f54:	04c21074 	movhi	r19,2113
 8402f58:	9ce23a04 	addi	r19,r19,-30488
 8402f5c:	003f7c06 	br	8402d50 <_fpadd_parts+0x1c8>
 8402f60:	2006d07a 	srli	r3,r4,1
 8402f64:	008007c4 	movi	r2,31
 8402f68:	1185c83a 	sub	r2,r2,r6
 8402f6c:	1894d83a 	srl	r10,r3,r2
 8402f70:	2192983a 	sll	r9,r4,r6
 8402f74:	003fd706 	br	8402ed4 <_fpadd_parts+0x34c>
 8402f78:	9487883a 	add	r3,r18,r18
 8402f7c:	008007c4 	movi	r2,31
 8402f80:	1185c83a 	sub	r2,r2,r6
 8402f84:	1886983a 	sll	r3,r3,r2
 8402f88:	899ad83a 	srl	r13,r17,r6
 8402f8c:	919cd83a 	srl	r14,r18,r6
 8402f90:	1b5ab03a 	or	r13,r3,r13
 8402f94:	003fc906 	br	8402ebc <_fpadd_parts+0x334>

08402f98 <__subdf3>:
 8402f98:	deffea04 	addi	sp,sp,-88
 8402f9c:	dcc01415 	stw	r19,80(sp)
 8402fa0:	dcc00404 	addi	r19,sp,16
 8402fa4:	2011883a 	mov	r8,r4
 8402fa8:	2813883a 	mov	r9,r5
 8402fac:	dc401315 	stw	r17,76(sp)
 8402fb0:	d809883a 	mov	r4,sp
 8402fb4:	980b883a 	mov	r5,r19
 8402fb8:	dc400904 	addi	r17,sp,36
 8402fbc:	dfc01515 	stw	ra,84(sp)
 8402fc0:	da400115 	stw	r9,4(sp)
 8402fc4:	d9c00315 	stw	r7,12(sp)
 8402fc8:	da000015 	stw	r8,0(sp)
 8402fcc:	d9800215 	stw	r6,8(sp)
 8402fd0:	84043680 	call	8404368 <__unpack_d>
 8402fd4:	d9000204 	addi	r4,sp,8
 8402fd8:	880b883a 	mov	r5,r17
 8402fdc:	84043680 	call	8404368 <__unpack_d>
 8402fe0:	d8800a17 	ldw	r2,40(sp)
 8402fe4:	880b883a 	mov	r5,r17
 8402fe8:	9809883a 	mov	r4,r19
 8402fec:	d9800e04 	addi	r6,sp,56
 8402ff0:	1080005c 	xori	r2,r2,1
 8402ff4:	d8800a15 	stw	r2,40(sp)
 8402ff8:	8402b880 	call	8402b88 <_fpadd_parts>
 8402ffc:	1009883a 	mov	r4,r2
 8403000:	84040540 	call	8404054 <__pack_d>
 8403004:	dfc01517 	ldw	ra,84(sp)
 8403008:	dcc01417 	ldw	r19,80(sp)
 840300c:	dc401317 	ldw	r17,76(sp)
 8403010:	dec01604 	addi	sp,sp,88
 8403014:	f800283a 	ret

08403018 <__adddf3>:
 8403018:	deffea04 	addi	sp,sp,-88
 840301c:	dcc01415 	stw	r19,80(sp)
 8403020:	dcc00404 	addi	r19,sp,16
 8403024:	2011883a 	mov	r8,r4
 8403028:	2813883a 	mov	r9,r5
 840302c:	dc401315 	stw	r17,76(sp)
 8403030:	d809883a 	mov	r4,sp
 8403034:	980b883a 	mov	r5,r19
 8403038:	dc400904 	addi	r17,sp,36
 840303c:	dfc01515 	stw	ra,84(sp)
 8403040:	da400115 	stw	r9,4(sp)
 8403044:	d9c00315 	stw	r7,12(sp)
 8403048:	da000015 	stw	r8,0(sp)
 840304c:	d9800215 	stw	r6,8(sp)
 8403050:	84043680 	call	8404368 <__unpack_d>
 8403054:	d9000204 	addi	r4,sp,8
 8403058:	880b883a 	mov	r5,r17
 840305c:	84043680 	call	8404368 <__unpack_d>
 8403060:	d9800e04 	addi	r6,sp,56
 8403064:	9809883a 	mov	r4,r19
 8403068:	880b883a 	mov	r5,r17
 840306c:	8402b880 	call	8402b88 <_fpadd_parts>
 8403070:	1009883a 	mov	r4,r2
 8403074:	84040540 	call	8404054 <__pack_d>
 8403078:	dfc01517 	ldw	ra,84(sp)
 840307c:	dcc01417 	ldw	r19,80(sp)
 8403080:	dc401317 	ldw	r17,76(sp)
 8403084:	dec01604 	addi	sp,sp,88
 8403088:	f800283a 	ret

0840308c <__muldf3>:
 840308c:	deffe004 	addi	sp,sp,-128
 8403090:	dc401815 	stw	r17,96(sp)
 8403094:	dc400404 	addi	r17,sp,16
 8403098:	2011883a 	mov	r8,r4
 840309c:	2813883a 	mov	r9,r5
 84030a0:	dc001715 	stw	r16,92(sp)
 84030a4:	d809883a 	mov	r4,sp
 84030a8:	880b883a 	mov	r5,r17
 84030ac:	dc000904 	addi	r16,sp,36
 84030b0:	dfc01f15 	stw	ra,124(sp)
 84030b4:	da400115 	stw	r9,4(sp)
 84030b8:	d9c00315 	stw	r7,12(sp)
 84030bc:	da000015 	stw	r8,0(sp)
 84030c0:	d9800215 	stw	r6,8(sp)
 84030c4:	ddc01e15 	stw	r23,120(sp)
 84030c8:	dd801d15 	stw	r22,116(sp)
 84030cc:	dd401c15 	stw	r21,112(sp)
 84030d0:	dd001b15 	stw	r20,108(sp)
 84030d4:	dcc01a15 	stw	r19,104(sp)
 84030d8:	dc801915 	stw	r18,100(sp)
 84030dc:	84043680 	call	8404368 <__unpack_d>
 84030e0:	d9000204 	addi	r4,sp,8
 84030e4:	800b883a 	mov	r5,r16
 84030e8:	84043680 	call	8404368 <__unpack_d>
 84030ec:	d9000417 	ldw	r4,16(sp)
 84030f0:	00800044 	movi	r2,1
 84030f4:	1100102e 	bgeu	r2,r4,8403138 <__muldf3+0xac>
 84030f8:	d8c00917 	ldw	r3,36(sp)
 84030fc:	10c0062e 	bgeu	r2,r3,8403118 <__muldf3+0x8c>
 8403100:	00800104 	movi	r2,4
 8403104:	20800a26 	beq	r4,r2,8403130 <__muldf3+0xa4>
 8403108:	1880cc26 	beq	r3,r2,840343c <__muldf3+0x3b0>
 840310c:	00800084 	movi	r2,2
 8403110:	20800926 	beq	r4,r2,8403138 <__muldf3+0xac>
 8403114:	1880191e 	bne	r3,r2,840317c <__muldf3+0xf0>
 8403118:	d8c00a17 	ldw	r3,40(sp)
 840311c:	d8800517 	ldw	r2,20(sp)
 8403120:	8009883a 	mov	r4,r16
 8403124:	10c4c03a 	cmpne	r2,r2,r3
 8403128:	d8800a15 	stw	r2,40(sp)
 840312c:	00000706 	br	840314c <__muldf3+0xc0>
 8403130:	00800084 	movi	r2,2
 8403134:	1880c326 	beq	r3,r2,8403444 <__muldf3+0x3b8>
 8403138:	d8800517 	ldw	r2,20(sp)
 840313c:	d8c00a17 	ldw	r3,40(sp)
 8403140:	8809883a 	mov	r4,r17
 8403144:	10c4c03a 	cmpne	r2,r2,r3
 8403148:	d8800515 	stw	r2,20(sp)
 840314c:	84040540 	call	8404054 <__pack_d>
 8403150:	dfc01f17 	ldw	ra,124(sp)
 8403154:	ddc01e17 	ldw	r23,120(sp)
 8403158:	dd801d17 	ldw	r22,116(sp)
 840315c:	dd401c17 	ldw	r21,112(sp)
 8403160:	dd001b17 	ldw	r20,108(sp)
 8403164:	dcc01a17 	ldw	r19,104(sp)
 8403168:	dc801917 	ldw	r18,100(sp)
 840316c:	dc401817 	ldw	r17,96(sp)
 8403170:	dc001717 	ldw	r16,92(sp)
 8403174:	dec02004 	addi	sp,sp,128
 8403178:	f800283a 	ret
 840317c:	dd800717 	ldw	r22,28(sp)
 8403180:	dc800c17 	ldw	r18,48(sp)
 8403184:	002b883a 	mov	r21,zero
 8403188:	0023883a 	mov	r17,zero
 840318c:	a80b883a 	mov	r5,r21
 8403190:	b00d883a 	mov	r6,r22
 8403194:	880f883a 	mov	r7,r17
 8403198:	ddc00817 	ldw	r23,32(sp)
 840319c:	dcc00d17 	ldw	r19,52(sp)
 84031a0:	9009883a 	mov	r4,r18
 84031a4:	8403c400 	call	8403c40 <__muldi3>
 84031a8:	001b883a 	mov	r13,zero
 84031ac:	680f883a 	mov	r7,r13
 84031b0:	b009883a 	mov	r4,r22
 84031b4:	000b883a 	mov	r5,zero
 84031b8:	980d883a 	mov	r6,r19
 84031bc:	b82d883a 	mov	r22,r23
 84031c0:	002f883a 	mov	r23,zero
 84031c4:	db401615 	stw	r13,88(sp)
 84031c8:	d8801315 	stw	r2,76(sp)
 84031cc:	d8c01415 	stw	r3,80(sp)
 84031d0:	dcc01515 	stw	r19,84(sp)
 84031d4:	8403c400 	call	8403c40 <__muldi3>
 84031d8:	b00d883a 	mov	r6,r22
 84031dc:	000b883a 	mov	r5,zero
 84031e0:	9009883a 	mov	r4,r18
 84031e4:	b80f883a 	mov	r7,r23
 84031e8:	1021883a 	mov	r16,r2
 84031ec:	1823883a 	mov	r17,r3
 84031f0:	8403c400 	call	8403c40 <__muldi3>
 84031f4:	8085883a 	add	r2,r16,r2
 84031f8:	140d803a 	cmpltu	r6,r2,r16
 84031fc:	88c7883a 	add	r3,r17,r3
 8403200:	30cd883a 	add	r6,r6,r3
 8403204:	1029883a 	mov	r20,r2
 8403208:	302b883a 	mov	r21,r6
 840320c:	da801317 	ldw	r10,76(sp)
 8403210:	dac01417 	ldw	r11,80(sp)
 8403214:	db001517 	ldw	r12,84(sp)
 8403218:	db401617 	ldw	r13,88(sp)
 840321c:	3440612e 	bgeu	r6,r17,84033a4 <__muldf3+0x318>
 8403220:	0009883a 	mov	r4,zero
 8403224:	5105883a 	add	r2,r10,r4
 8403228:	128d803a 	cmpltu	r6,r2,r10
 840322c:	5d07883a 	add	r3,r11,r20
 8403230:	30cd883a 	add	r6,r6,r3
 8403234:	0021883a 	mov	r16,zero
 8403238:	04400044 	movi	r17,1
 840323c:	1025883a 	mov	r18,r2
 8403240:	3027883a 	mov	r19,r6
 8403244:	32c06236 	bltu	r6,r11,84033d0 <__muldf3+0x344>
 8403248:	59807a26 	beq	r11,r6,8403434 <__muldf3+0x3a8>
 840324c:	680b883a 	mov	r5,r13
 8403250:	b80f883a 	mov	r7,r23
 8403254:	6009883a 	mov	r4,r12
 8403258:	b00d883a 	mov	r6,r22
 840325c:	8403c400 	call	8403c40 <__muldi3>
 8403260:	1009883a 	mov	r4,r2
 8403264:	000f883a 	mov	r7,zero
 8403268:	1545883a 	add	r2,r2,r21
 840326c:	1111803a 	cmpltu	r8,r2,r4
 8403270:	19c7883a 	add	r3,r3,r7
 8403274:	40c7883a 	add	r3,r8,r3
 8403278:	88cb883a 	add	r5,r17,r3
 840327c:	d8c00617 	ldw	r3,24(sp)
 8403280:	8089883a 	add	r4,r16,r2
 8403284:	d8800b17 	ldw	r2,44(sp)
 8403288:	18c00104 	addi	r3,r3,4
 840328c:	240d803a 	cmpltu	r6,r4,r16
 8403290:	10c7883a 	add	r3,r2,r3
 8403294:	2013883a 	mov	r9,r4
 8403298:	d8800a17 	ldw	r2,40(sp)
 840329c:	d9000517 	ldw	r4,20(sp)
 84032a0:	314d883a 	add	r6,r6,r5
 84032a4:	3015883a 	mov	r10,r6
 84032a8:	2088c03a 	cmpne	r4,r4,r2
 84032ac:	00880034 	movhi	r2,8192
 84032b0:	10bfffc4 	addi	r2,r2,-1
 84032b4:	d9000f15 	stw	r4,60(sp)
 84032b8:	d8c01015 	stw	r3,64(sp)
 84032bc:	1180162e 	bgeu	r2,r6,8403318 <__muldf3+0x28c>
 84032c0:	1811883a 	mov	r8,r3
 84032c4:	101f883a 	mov	r15,r2
 84032c8:	980497fa 	slli	r2,r19,31
 84032cc:	9016d07a 	srli	r11,r18,1
 84032d0:	500697fa 	slli	r3,r10,31
 84032d4:	480cd07a 	srli	r6,r9,1
 84032d8:	500ed07a 	srli	r7,r10,1
 84032dc:	12d6b03a 	or	r11,r2,r11
 84032e0:	00800044 	movi	r2,1
 84032e4:	198cb03a 	or	r6,r3,r6
 84032e8:	4888703a 	and	r4,r9,r2
 84032ec:	9818d07a 	srli	r12,r19,1
 84032f0:	001b883a 	mov	r13,zero
 84032f4:	03a00034 	movhi	r14,32768
 84032f8:	3013883a 	mov	r9,r6
 84032fc:	3815883a 	mov	r10,r7
 8403300:	4091883a 	add	r8,r8,r2
 8403304:	20000226 	beq	r4,zero,8403310 <__muldf3+0x284>
 8403308:	5b64b03a 	or	r18,r11,r13
 840330c:	63a6b03a 	or	r19,r12,r14
 8403310:	7abfed36 	bltu	r15,r10,84032c8 <__muldf3+0x23c>
 8403314:	da001015 	stw	r8,64(sp)
 8403318:	00840034 	movhi	r2,4096
 840331c:	10bfffc4 	addi	r2,r2,-1
 8403320:	12801436 	bltu	r2,r10,8403374 <__muldf3+0x2e8>
 8403324:	da001017 	ldw	r8,64(sp)
 8403328:	101f883a 	mov	r15,r2
 840332c:	4a45883a 	add	r2,r9,r9
 8403330:	124d803a 	cmpltu	r6,r2,r9
 8403334:	5287883a 	add	r3,r10,r10
 8403338:	9497883a 	add	r11,r18,r18
 840333c:	5c8f803a 	cmpltu	r7,r11,r18
 8403340:	9cd9883a 	add	r12,r19,r19
 8403344:	01000044 	movi	r4,1
 8403348:	30cd883a 	add	r6,r6,r3
 840334c:	3b0f883a 	add	r7,r7,r12
 8403350:	423fffc4 	addi	r8,r8,-1
 8403354:	1013883a 	mov	r9,r2
 8403358:	3015883a 	mov	r10,r6
 840335c:	111ab03a 	or	r13,r2,r4
 8403360:	98003016 	blt	r19,zero,8403424 <__muldf3+0x398>
 8403364:	5825883a 	mov	r18,r11
 8403368:	3827883a 	mov	r19,r7
 840336c:	7abfef2e 	bgeu	r15,r10,840332c <__muldf3+0x2a0>
 8403370:	da001015 	stw	r8,64(sp)
 8403374:	00803fc4 	movi	r2,255
 8403378:	488e703a 	and	r7,r9,r2
 840337c:	00802004 	movi	r2,128
 8403380:	0007883a 	mov	r3,zero
 8403384:	0011883a 	mov	r8,zero
 8403388:	38801826 	beq	r7,r2,84033ec <__muldf3+0x360>
 840338c:	008000c4 	movi	r2,3
 8403390:	d9000e04 	addi	r4,sp,56
 8403394:	da801215 	stw	r10,72(sp)
 8403398:	d8800e15 	stw	r2,56(sp)
 840339c:	da401115 	stw	r9,68(sp)
 84033a0:	003f6a06 	br	840314c <__muldf3+0xc0>
 84033a4:	89802126 	beq	r17,r6,840342c <__muldf3+0x3a0>
 84033a8:	0009883a 	mov	r4,zero
 84033ac:	5105883a 	add	r2,r10,r4
 84033b0:	128d803a 	cmpltu	r6,r2,r10
 84033b4:	5d07883a 	add	r3,r11,r20
 84033b8:	30cd883a 	add	r6,r6,r3
 84033bc:	0021883a 	mov	r16,zero
 84033c0:	0023883a 	mov	r17,zero
 84033c4:	1025883a 	mov	r18,r2
 84033c8:	3027883a 	mov	r19,r6
 84033cc:	32ff9e2e 	bgeu	r6,r11,8403248 <__muldf3+0x1bc>
 84033d0:	00800044 	movi	r2,1
 84033d4:	8089883a 	add	r4,r16,r2
 84033d8:	240d803a 	cmpltu	r6,r4,r16
 84033dc:	344d883a 	add	r6,r6,r17
 84033e0:	2021883a 	mov	r16,r4
 84033e4:	3023883a 	mov	r17,r6
 84033e8:	003f9806 	br	840324c <__muldf3+0x1c0>
 84033ec:	403fe71e 	bne	r8,zero,840338c <__muldf3+0x300>
 84033f0:	01004004 	movi	r4,256
 84033f4:	4904703a 	and	r2,r9,r4
 84033f8:	10c4b03a 	or	r2,r2,r3
 84033fc:	103fe31e 	bne	r2,zero,840338c <__muldf3+0x300>
 8403400:	94c4b03a 	or	r2,r18,r19
 8403404:	103fe126 	beq	r2,zero,840338c <__muldf3+0x300>
 8403408:	49c5883a 	add	r2,r9,r7
 840340c:	1251803a 	cmpltu	r8,r2,r9
 8403410:	4291883a 	add	r8,r8,r10
 8403414:	013fc004 	movi	r4,-256
 8403418:	1112703a 	and	r9,r2,r4
 840341c:	4015883a 	mov	r10,r8
 8403420:	003fda06 	br	840338c <__muldf3+0x300>
 8403424:	6813883a 	mov	r9,r13
 8403428:	003fce06 	br	8403364 <__muldf3+0x2d8>
 840342c:	143f7c36 	bltu	r2,r16,8403220 <__muldf3+0x194>
 8403430:	003fdd06 	br	84033a8 <__muldf3+0x31c>
 8403434:	12bf852e 	bgeu	r2,r10,840324c <__muldf3+0x1c0>
 8403438:	003fe506 	br	84033d0 <__muldf3+0x344>
 840343c:	00800084 	movi	r2,2
 8403440:	20bf351e 	bne	r4,r2,8403118 <__muldf3+0x8c>
 8403444:	01021074 	movhi	r4,2113
 8403448:	21223a04 	addi	r4,r4,-30488
 840344c:	003f3f06 	br	840314c <__muldf3+0xc0>

08403450 <__divdf3>:
 8403450:	deffed04 	addi	sp,sp,-76
 8403454:	dcc01115 	stw	r19,68(sp)
 8403458:	dcc00404 	addi	r19,sp,16
 840345c:	2011883a 	mov	r8,r4
 8403460:	2813883a 	mov	r9,r5
 8403464:	dc000e15 	stw	r16,56(sp)
 8403468:	d809883a 	mov	r4,sp
 840346c:	980b883a 	mov	r5,r19
 8403470:	dc000904 	addi	r16,sp,36
 8403474:	dfc01215 	stw	ra,72(sp)
 8403478:	da400115 	stw	r9,4(sp)
 840347c:	d9c00315 	stw	r7,12(sp)
 8403480:	da000015 	stw	r8,0(sp)
 8403484:	d9800215 	stw	r6,8(sp)
 8403488:	dc801015 	stw	r18,64(sp)
 840348c:	dc400f15 	stw	r17,60(sp)
 8403490:	84043680 	call	8404368 <__unpack_d>
 8403494:	d9000204 	addi	r4,sp,8
 8403498:	800b883a 	mov	r5,r16
 840349c:	84043680 	call	8404368 <__unpack_d>
 84034a0:	d9000417 	ldw	r4,16(sp)
 84034a4:	00800044 	movi	r2,1
 84034a8:	11000b2e 	bgeu	r2,r4,84034d8 <__divdf3+0x88>
 84034ac:	d9400917 	ldw	r5,36(sp)
 84034b0:	1140762e 	bgeu	r2,r5,840368c <__divdf3+0x23c>
 84034b4:	d8800517 	ldw	r2,20(sp)
 84034b8:	d8c00a17 	ldw	r3,40(sp)
 84034bc:	01800104 	movi	r6,4
 84034c0:	10c4f03a 	xor	r2,r2,r3
 84034c4:	d8800515 	stw	r2,20(sp)
 84034c8:	21800226 	beq	r4,r6,84034d4 <__divdf3+0x84>
 84034cc:	00800084 	movi	r2,2
 84034d0:	2080141e 	bne	r4,r2,8403524 <__divdf3+0xd4>
 84034d4:	29000926 	beq	r5,r4,84034fc <__divdf3+0xac>
 84034d8:	9809883a 	mov	r4,r19
 84034dc:	84040540 	call	8404054 <__pack_d>
 84034e0:	dfc01217 	ldw	ra,72(sp)
 84034e4:	dcc01117 	ldw	r19,68(sp)
 84034e8:	dc801017 	ldw	r18,64(sp)
 84034ec:	dc400f17 	ldw	r17,60(sp)
 84034f0:	dc000e17 	ldw	r16,56(sp)
 84034f4:	dec01304 	addi	sp,sp,76
 84034f8:	f800283a 	ret
 84034fc:	01021074 	movhi	r4,2113
 8403500:	21223a04 	addi	r4,r4,-30488
 8403504:	84040540 	call	8404054 <__pack_d>
 8403508:	dfc01217 	ldw	ra,72(sp)
 840350c:	dcc01117 	ldw	r19,68(sp)
 8403510:	dc801017 	ldw	r18,64(sp)
 8403514:	dc400f17 	ldw	r17,60(sp)
 8403518:	dc000e17 	ldw	r16,56(sp)
 840351c:	dec01304 	addi	sp,sp,76
 8403520:	f800283a 	ret
 8403524:	29805b26 	beq	r5,r6,8403694 <__divdf3+0x244>
 8403528:	28802d26 	beq	r5,r2,84035e0 <__divdf3+0x190>
 840352c:	d8c00617 	ldw	r3,24(sp)
 8403530:	d8800b17 	ldw	r2,44(sp)
 8403534:	d9c00817 	ldw	r7,32(sp)
 8403538:	dc400d17 	ldw	r17,52(sp)
 840353c:	188bc83a 	sub	r5,r3,r2
 8403540:	d9800717 	ldw	r6,28(sp)
 8403544:	dc000c17 	ldw	r16,48(sp)
 8403548:	d9400615 	stw	r5,24(sp)
 840354c:	3c403836 	bltu	r7,r17,8403630 <__divdf3+0x1e0>
 8403550:	89c03626 	beq	r17,r7,840362c <__divdf3+0x1dc>
 8403554:	0015883a 	mov	r10,zero
 8403558:	001d883a 	mov	r14,zero
 840355c:	02c40034 	movhi	r11,4096
 8403560:	001f883a 	mov	r15,zero
 8403564:	003f883a 	mov	ra,zero
 8403568:	04800f44 	movi	r18,61
 840356c:	00000f06 	br	84035ac <__divdf3+0x15c>
 8403570:	601d883a 	mov	r14,r12
 8403574:	681f883a 	mov	r15,r13
 8403578:	400d883a 	mov	r6,r8
 840357c:	100f883a 	mov	r7,r2
 8403580:	3191883a 	add	r8,r6,r6
 8403584:	5808d07a 	srli	r4,r11,1
 8403588:	4185803a 	cmpltu	r2,r8,r6
 840358c:	39d3883a 	add	r9,r7,r7
 8403590:	28c6b03a 	or	r3,r5,r3
 8403594:	1245883a 	add	r2,r2,r9
 8403598:	1815883a 	mov	r10,r3
 840359c:	2017883a 	mov	r11,r4
 84035a0:	400d883a 	mov	r6,r8
 84035a4:	100f883a 	mov	r7,r2
 84035a8:	fc801726 	beq	ra,r18,8403608 <__divdf3+0x1b8>
 84035ac:	580a97fa 	slli	r5,r11,31
 84035b0:	5006d07a 	srli	r3,r10,1
 84035b4:	ffc00044 	addi	ra,ra,1
 84035b8:	3c7ff136 	bltu	r7,r17,8403580 <__divdf3+0x130>
 84035bc:	3411c83a 	sub	r8,r6,r16
 84035c0:	3205803a 	cmpltu	r2,r6,r8
 84035c4:	3c53c83a 	sub	r9,r7,r17
 84035c8:	7298b03a 	or	r12,r14,r10
 84035cc:	7adab03a 	or	r13,r15,r11
 84035d0:	4885c83a 	sub	r2,r9,r2
 84035d4:	89ffe61e 	bne	r17,r7,8403570 <__divdf3+0x120>
 84035d8:	343fe936 	bltu	r6,r16,8403580 <__divdf3+0x130>
 84035dc:	003fe406 	br	8403570 <__divdf3+0x120>
 84035e0:	9809883a 	mov	r4,r19
 84035e4:	d9800415 	stw	r6,16(sp)
 84035e8:	84040540 	call	8404054 <__pack_d>
 84035ec:	dfc01217 	ldw	ra,72(sp)
 84035f0:	dcc01117 	ldw	r19,68(sp)
 84035f4:	dc801017 	ldw	r18,64(sp)
 84035f8:	dc400f17 	ldw	r17,60(sp)
 84035fc:	dc000e17 	ldw	r16,56(sp)
 8403600:	dec01304 	addi	sp,sp,76
 8403604:	f800283a 	ret
 8403608:	00803fc4 	movi	r2,255
 840360c:	7090703a 	and	r8,r14,r2
 8403610:	00802004 	movi	r2,128
 8403614:	0007883a 	mov	r3,zero
 8403618:	0013883a 	mov	r9,zero
 840361c:	40800d26 	beq	r8,r2,8403654 <__divdf3+0x204>
 8403620:	dbc00815 	stw	r15,32(sp)
 8403624:	db800715 	stw	r14,28(sp)
 8403628:	003fab06 	br	84034d8 <__divdf3+0x88>
 840362c:	343fc92e 	bgeu	r6,r16,8403554 <__divdf3+0x104>
 8403630:	3185883a 	add	r2,r6,r6
 8403634:	1189803a 	cmpltu	r4,r2,r6
 8403638:	39c7883a 	add	r3,r7,r7
 840363c:	20c9883a 	add	r4,r4,r3
 8403640:	297fffc4 	addi	r5,r5,-1
 8403644:	100d883a 	mov	r6,r2
 8403648:	200f883a 	mov	r7,r4
 840364c:	d9400615 	stw	r5,24(sp)
 8403650:	003fc006 	br	8403554 <__divdf3+0x104>
 8403654:	483ff21e 	bne	r9,zero,8403620 <__divdf3+0x1d0>
 8403658:	01004004 	movi	r4,256
 840365c:	7104703a 	and	r2,r14,r4
 8403660:	10c4b03a 	or	r2,r2,r3
 8403664:	103fee1e 	bne	r2,zero,8403620 <__divdf3+0x1d0>
 8403668:	31c4b03a 	or	r2,r6,r7
 840366c:	103fec26 	beq	r2,zero,8403620 <__divdf3+0x1d0>
 8403670:	7205883a 	add	r2,r14,r8
 8403674:	1391803a 	cmpltu	r8,r2,r14
 8403678:	43d1883a 	add	r8,r8,r15
 840367c:	013fc004 	movi	r4,-256
 8403680:	111c703a 	and	r14,r2,r4
 8403684:	401f883a 	mov	r15,r8
 8403688:	003fe506 	br	8403620 <__divdf3+0x1d0>
 840368c:	8009883a 	mov	r4,r16
 8403690:	003f9206 	br	84034dc <__divdf3+0x8c>
 8403694:	9809883a 	mov	r4,r19
 8403698:	d8000715 	stw	zero,28(sp)
 840369c:	d8000815 	stw	zero,32(sp)
 84036a0:	d8000615 	stw	zero,24(sp)
 84036a4:	003f8d06 	br	84034dc <__divdf3+0x8c>

084036a8 <__eqdf2>:
 84036a8:	deffef04 	addi	sp,sp,-68
 84036ac:	dc400f15 	stw	r17,60(sp)
 84036b0:	dc400404 	addi	r17,sp,16
 84036b4:	2005883a 	mov	r2,r4
 84036b8:	2807883a 	mov	r3,r5
 84036bc:	dc000e15 	stw	r16,56(sp)
 84036c0:	d809883a 	mov	r4,sp
 84036c4:	880b883a 	mov	r5,r17
 84036c8:	dc000904 	addi	r16,sp,36
 84036cc:	d8c00115 	stw	r3,4(sp)
 84036d0:	d8800015 	stw	r2,0(sp)
 84036d4:	d9800215 	stw	r6,8(sp)
 84036d8:	dfc01015 	stw	ra,64(sp)
 84036dc:	d9c00315 	stw	r7,12(sp)
 84036e0:	84043680 	call	8404368 <__unpack_d>
 84036e4:	d9000204 	addi	r4,sp,8
 84036e8:	800b883a 	mov	r5,r16
 84036ec:	84043680 	call	8404368 <__unpack_d>
 84036f0:	d8800417 	ldw	r2,16(sp)
 84036f4:	00c00044 	movi	r3,1
 84036f8:	180d883a 	mov	r6,r3
 84036fc:	1880062e 	bgeu	r3,r2,8403718 <__eqdf2+0x70>
 8403700:	d8800917 	ldw	r2,36(sp)
 8403704:	8809883a 	mov	r4,r17
 8403708:	800b883a 	mov	r5,r16
 840370c:	1880022e 	bgeu	r3,r2,8403718 <__eqdf2+0x70>
 8403710:	84044a00 	call	84044a0 <__fpcmp_parts_d>
 8403714:	100d883a 	mov	r6,r2
 8403718:	3005883a 	mov	r2,r6
 840371c:	dfc01017 	ldw	ra,64(sp)
 8403720:	dc400f17 	ldw	r17,60(sp)
 8403724:	dc000e17 	ldw	r16,56(sp)
 8403728:	dec01104 	addi	sp,sp,68
 840372c:	f800283a 	ret

08403730 <__nedf2>:
 8403730:	deffef04 	addi	sp,sp,-68
 8403734:	dc400f15 	stw	r17,60(sp)
 8403738:	dc400404 	addi	r17,sp,16
 840373c:	2005883a 	mov	r2,r4
 8403740:	2807883a 	mov	r3,r5
 8403744:	dc000e15 	stw	r16,56(sp)
 8403748:	d809883a 	mov	r4,sp
 840374c:	880b883a 	mov	r5,r17
 8403750:	dc000904 	addi	r16,sp,36
 8403754:	d8c00115 	stw	r3,4(sp)
 8403758:	d8800015 	stw	r2,0(sp)
 840375c:	d9800215 	stw	r6,8(sp)
 8403760:	dfc01015 	stw	ra,64(sp)
 8403764:	d9c00315 	stw	r7,12(sp)
 8403768:	84043680 	call	8404368 <__unpack_d>
 840376c:	d9000204 	addi	r4,sp,8
 8403770:	800b883a 	mov	r5,r16
 8403774:	84043680 	call	8404368 <__unpack_d>
 8403778:	d8800417 	ldw	r2,16(sp)
 840377c:	00c00044 	movi	r3,1
 8403780:	180d883a 	mov	r6,r3
 8403784:	1880062e 	bgeu	r3,r2,84037a0 <__nedf2+0x70>
 8403788:	d8800917 	ldw	r2,36(sp)
 840378c:	8809883a 	mov	r4,r17
 8403790:	800b883a 	mov	r5,r16
 8403794:	1880022e 	bgeu	r3,r2,84037a0 <__nedf2+0x70>
 8403798:	84044a00 	call	84044a0 <__fpcmp_parts_d>
 840379c:	100d883a 	mov	r6,r2
 84037a0:	3005883a 	mov	r2,r6
 84037a4:	dfc01017 	ldw	ra,64(sp)
 84037a8:	dc400f17 	ldw	r17,60(sp)
 84037ac:	dc000e17 	ldw	r16,56(sp)
 84037b0:	dec01104 	addi	sp,sp,68
 84037b4:	f800283a 	ret

084037b8 <__gtdf2>:
 84037b8:	deffef04 	addi	sp,sp,-68
 84037bc:	dc400f15 	stw	r17,60(sp)
 84037c0:	dc400404 	addi	r17,sp,16
 84037c4:	2005883a 	mov	r2,r4
 84037c8:	2807883a 	mov	r3,r5
 84037cc:	dc000e15 	stw	r16,56(sp)
 84037d0:	d809883a 	mov	r4,sp
 84037d4:	880b883a 	mov	r5,r17
 84037d8:	dc000904 	addi	r16,sp,36
 84037dc:	d8c00115 	stw	r3,4(sp)
 84037e0:	d8800015 	stw	r2,0(sp)
 84037e4:	d9800215 	stw	r6,8(sp)
 84037e8:	dfc01015 	stw	ra,64(sp)
 84037ec:	d9c00315 	stw	r7,12(sp)
 84037f0:	84043680 	call	8404368 <__unpack_d>
 84037f4:	d9000204 	addi	r4,sp,8
 84037f8:	800b883a 	mov	r5,r16
 84037fc:	84043680 	call	8404368 <__unpack_d>
 8403800:	d8800417 	ldw	r2,16(sp)
 8403804:	00c00044 	movi	r3,1
 8403808:	01bfffc4 	movi	r6,-1
 840380c:	1880062e 	bgeu	r3,r2,8403828 <__gtdf2+0x70>
 8403810:	d8800917 	ldw	r2,36(sp)
 8403814:	8809883a 	mov	r4,r17
 8403818:	800b883a 	mov	r5,r16
 840381c:	1880022e 	bgeu	r3,r2,8403828 <__gtdf2+0x70>
 8403820:	84044a00 	call	84044a0 <__fpcmp_parts_d>
 8403824:	100d883a 	mov	r6,r2
 8403828:	3005883a 	mov	r2,r6
 840382c:	dfc01017 	ldw	ra,64(sp)
 8403830:	dc400f17 	ldw	r17,60(sp)
 8403834:	dc000e17 	ldw	r16,56(sp)
 8403838:	dec01104 	addi	sp,sp,68
 840383c:	f800283a 	ret

08403840 <__ltdf2>:
 8403840:	deffef04 	addi	sp,sp,-68
 8403844:	dc400f15 	stw	r17,60(sp)
 8403848:	dc400404 	addi	r17,sp,16
 840384c:	2005883a 	mov	r2,r4
 8403850:	2807883a 	mov	r3,r5
 8403854:	dc000e15 	stw	r16,56(sp)
 8403858:	d809883a 	mov	r4,sp
 840385c:	880b883a 	mov	r5,r17
 8403860:	dc000904 	addi	r16,sp,36
 8403864:	d8c00115 	stw	r3,4(sp)
 8403868:	d8800015 	stw	r2,0(sp)
 840386c:	d9800215 	stw	r6,8(sp)
 8403870:	dfc01015 	stw	ra,64(sp)
 8403874:	d9c00315 	stw	r7,12(sp)
 8403878:	84043680 	call	8404368 <__unpack_d>
 840387c:	d9000204 	addi	r4,sp,8
 8403880:	800b883a 	mov	r5,r16
 8403884:	84043680 	call	8404368 <__unpack_d>
 8403888:	d8800417 	ldw	r2,16(sp)
 840388c:	00c00044 	movi	r3,1
 8403890:	180d883a 	mov	r6,r3
 8403894:	1880062e 	bgeu	r3,r2,84038b0 <__ltdf2+0x70>
 8403898:	d8800917 	ldw	r2,36(sp)
 840389c:	8809883a 	mov	r4,r17
 84038a0:	800b883a 	mov	r5,r16
 84038a4:	1880022e 	bgeu	r3,r2,84038b0 <__ltdf2+0x70>
 84038a8:	84044a00 	call	84044a0 <__fpcmp_parts_d>
 84038ac:	100d883a 	mov	r6,r2
 84038b0:	3005883a 	mov	r2,r6
 84038b4:	dfc01017 	ldw	ra,64(sp)
 84038b8:	dc400f17 	ldw	r17,60(sp)
 84038bc:	dc000e17 	ldw	r16,56(sp)
 84038c0:	dec01104 	addi	sp,sp,68
 84038c4:	f800283a 	ret

084038c8 <__ledf2>:
 84038c8:	deffef04 	addi	sp,sp,-68
 84038cc:	dc400f15 	stw	r17,60(sp)
 84038d0:	dc400404 	addi	r17,sp,16
 84038d4:	2005883a 	mov	r2,r4
 84038d8:	2807883a 	mov	r3,r5
 84038dc:	dc000e15 	stw	r16,56(sp)
 84038e0:	d809883a 	mov	r4,sp
 84038e4:	880b883a 	mov	r5,r17
 84038e8:	dc000904 	addi	r16,sp,36
 84038ec:	d8c00115 	stw	r3,4(sp)
 84038f0:	d8800015 	stw	r2,0(sp)
 84038f4:	d9800215 	stw	r6,8(sp)
 84038f8:	dfc01015 	stw	ra,64(sp)
 84038fc:	d9c00315 	stw	r7,12(sp)
 8403900:	84043680 	call	8404368 <__unpack_d>
 8403904:	d9000204 	addi	r4,sp,8
 8403908:	800b883a 	mov	r5,r16
 840390c:	84043680 	call	8404368 <__unpack_d>
 8403910:	d8800417 	ldw	r2,16(sp)
 8403914:	00c00044 	movi	r3,1
 8403918:	180d883a 	mov	r6,r3
 840391c:	1880062e 	bgeu	r3,r2,8403938 <__ledf2+0x70>
 8403920:	d8800917 	ldw	r2,36(sp)
 8403924:	8809883a 	mov	r4,r17
 8403928:	800b883a 	mov	r5,r16
 840392c:	1880022e 	bgeu	r3,r2,8403938 <__ledf2+0x70>
 8403930:	84044a00 	call	84044a0 <__fpcmp_parts_d>
 8403934:	100d883a 	mov	r6,r2
 8403938:	3005883a 	mov	r2,r6
 840393c:	dfc01017 	ldw	ra,64(sp)
 8403940:	dc400f17 	ldw	r17,60(sp)
 8403944:	dc000e17 	ldw	r16,56(sp)
 8403948:	dec01104 	addi	sp,sp,68
 840394c:	f800283a 	ret

08403950 <__floatsidf>:
 8403950:	2006d7fa 	srli	r3,r4,31
 8403954:	defff604 	addi	sp,sp,-40
 8403958:	008000c4 	movi	r2,3
 840395c:	dfc00915 	stw	ra,36(sp)
 8403960:	dcc00815 	stw	r19,32(sp)
 8403964:	dc800715 	stw	r18,28(sp)
 8403968:	dc400615 	stw	r17,24(sp)
 840396c:	dc000515 	stw	r16,20(sp)
 8403970:	d8800015 	stw	r2,0(sp)
 8403974:	d8c00115 	stw	r3,4(sp)
 8403978:	20000f1e 	bne	r4,zero,84039b8 <__floatsidf+0x68>
 840397c:	00800084 	movi	r2,2
 8403980:	d8800015 	stw	r2,0(sp)
 8403984:	d809883a 	mov	r4,sp
 8403988:	84040540 	call	8404054 <__pack_d>
 840398c:	1009883a 	mov	r4,r2
 8403990:	180b883a 	mov	r5,r3
 8403994:	2005883a 	mov	r2,r4
 8403998:	2807883a 	mov	r3,r5
 840399c:	dfc00917 	ldw	ra,36(sp)
 84039a0:	dcc00817 	ldw	r19,32(sp)
 84039a4:	dc800717 	ldw	r18,28(sp)
 84039a8:	dc400617 	ldw	r17,24(sp)
 84039ac:	dc000517 	ldw	r16,20(sp)
 84039b0:	dec00a04 	addi	sp,sp,40
 84039b4:	f800283a 	ret
 84039b8:	00800f04 	movi	r2,60
 84039bc:	1807003a 	cmpeq	r3,r3,zero
 84039c0:	d8800215 	stw	r2,8(sp)
 84039c4:	18001126 	beq	r3,zero,8403a0c <__floatsidf+0xbc>
 84039c8:	0027883a 	mov	r19,zero
 84039cc:	2025883a 	mov	r18,r4
 84039d0:	d9000315 	stw	r4,12(sp)
 84039d4:	dcc00415 	stw	r19,16(sp)
 84039d8:	8403cd80 	call	8403cd8 <__clzsi2>
 84039dc:	11000744 	addi	r4,r2,29
 84039e0:	013fe80e 	bge	zero,r4,8403984 <__floatsidf+0x34>
 84039e4:	10bfff44 	addi	r2,r2,-3
 84039e8:	10000c16 	blt	r2,zero,8403a1c <__floatsidf+0xcc>
 84039ec:	90a2983a 	sll	r17,r18,r2
 84039f0:	0021883a 	mov	r16,zero
 84039f4:	d8800217 	ldw	r2,8(sp)
 84039f8:	dc400415 	stw	r17,16(sp)
 84039fc:	dc000315 	stw	r16,12(sp)
 8403a00:	1105c83a 	sub	r2,r2,r4
 8403a04:	d8800215 	stw	r2,8(sp)
 8403a08:	003fde06 	br	8403984 <__floatsidf+0x34>
 8403a0c:	00a00034 	movhi	r2,32768
 8403a10:	20800a26 	beq	r4,r2,8403a3c <__floatsidf+0xec>
 8403a14:	0109c83a 	sub	r4,zero,r4
 8403a18:	003feb06 	br	84039c8 <__floatsidf+0x78>
 8403a1c:	9006d07a 	srli	r3,r18,1
 8403a20:	008007c4 	movi	r2,31
 8403a24:	1105c83a 	sub	r2,r2,r4
 8403a28:	1886d83a 	srl	r3,r3,r2
 8403a2c:	9922983a 	sll	r17,r19,r4
 8403a30:	9120983a 	sll	r16,r18,r4
 8403a34:	1c62b03a 	or	r17,r3,r17
 8403a38:	003fee06 	br	84039f4 <__floatsidf+0xa4>
 8403a3c:	0009883a 	mov	r4,zero
 8403a40:	01707834 	movhi	r5,49632
 8403a44:	003fd306 	br	8403994 <__floatsidf+0x44>

08403a48 <__make_dp>:
 8403a48:	defff904 	addi	sp,sp,-28
 8403a4c:	d8c00717 	ldw	r3,28(sp)
 8403a50:	d9000015 	stw	r4,0(sp)
 8403a54:	d809883a 	mov	r4,sp
 8403a58:	dfc00515 	stw	ra,20(sp)
 8403a5c:	d9c00615 	stw	r7,24(sp)
 8403a60:	d9400115 	stw	r5,4(sp)
 8403a64:	d9800215 	stw	r6,8(sp)
 8403a68:	d8c00415 	stw	r3,16(sp)
 8403a6c:	d9c00315 	stw	r7,12(sp)
 8403a70:	84040540 	call	8404054 <__pack_d>
 8403a74:	dfc00517 	ldw	ra,20(sp)
 8403a78:	dec00704 	addi	sp,sp,28
 8403a7c:	f800283a 	ret

08403a80 <__truncdfsf2>:
 8403a80:	defff804 	addi	sp,sp,-32
 8403a84:	2005883a 	mov	r2,r4
 8403a88:	2807883a 	mov	r3,r5
 8403a8c:	d809883a 	mov	r4,sp
 8403a90:	d9400204 	addi	r5,sp,8
 8403a94:	d8c00115 	stw	r3,4(sp)
 8403a98:	d8800015 	stw	r2,0(sp)
 8403a9c:	dfc00715 	stw	ra,28(sp)
 8403aa0:	84043680 	call	8404368 <__unpack_d>
 8403aa4:	d9c00517 	ldw	r7,20(sp)
 8403aa8:	da000617 	ldw	r8,24(sp)
 8403aac:	02d00034 	movhi	r11,16384
 8403ab0:	5affffc4 	addi	r11,r11,-1
 8403ab4:	3812d7ba 	srli	r9,r7,30
 8403ab8:	401a90ba 	slli	r13,r8,2
 8403abc:	3ac4703a 	and	r2,r7,r11
 8403ac0:	0007883a 	mov	r3,zero
 8403ac4:	6a52b03a 	or	r9,r13,r9
 8403ac8:	10c4b03a 	or	r2,r2,r3
 8403acc:	d9000217 	ldw	r4,8(sp)
 8403ad0:	d9400317 	ldw	r5,12(sp)
 8403ad4:	d9800417 	ldw	r6,16(sp)
 8403ad8:	480f883a 	mov	r7,r9
 8403adc:	10000126 	beq	r2,zero,8403ae4 <__truncdfsf2+0x64>
 8403ae0:	49c00054 	ori	r7,r9,1
 8403ae4:	84040280 	call	8404028 <__make_fp>
 8403ae8:	dfc00717 	ldw	ra,28(sp)
 8403aec:	dec00804 	addi	sp,sp,32
 8403af0:	f800283a 	ret

08403af4 <udivmodsi4>:
 8403af4:	29001b2e 	bgeu	r5,r4,8403b64 <udivmodsi4+0x70>
 8403af8:	28001a16 	blt	r5,zero,8403b64 <udivmodsi4+0x70>
 8403afc:	00800044 	movi	r2,1
 8403b00:	0007883a 	mov	r3,zero
 8403b04:	01c007c4 	movi	r7,31
 8403b08:	00000306 	br	8403b18 <udivmodsi4+0x24>
 8403b0c:	19c01326 	beq	r3,r7,8403b5c <udivmodsi4+0x68>
 8403b10:	18c00044 	addi	r3,r3,1
 8403b14:	28000416 	blt	r5,zero,8403b28 <udivmodsi4+0x34>
 8403b18:	294b883a 	add	r5,r5,r5
 8403b1c:	1085883a 	add	r2,r2,r2
 8403b20:	293ffa36 	bltu	r5,r4,8403b0c <udivmodsi4+0x18>
 8403b24:	10000d26 	beq	r2,zero,8403b5c <udivmodsi4+0x68>
 8403b28:	0007883a 	mov	r3,zero
 8403b2c:	21400236 	bltu	r4,r5,8403b38 <udivmodsi4+0x44>
 8403b30:	2149c83a 	sub	r4,r4,r5
 8403b34:	1886b03a 	or	r3,r3,r2
 8403b38:	1004d07a 	srli	r2,r2,1
 8403b3c:	280ad07a 	srli	r5,r5,1
 8403b40:	103ffa1e 	bne	r2,zero,8403b2c <udivmodsi4+0x38>
 8403b44:	30000226 	beq	r6,zero,8403b50 <udivmodsi4+0x5c>
 8403b48:	2005883a 	mov	r2,r4
 8403b4c:	f800283a 	ret
 8403b50:	1809883a 	mov	r4,r3
 8403b54:	2005883a 	mov	r2,r4
 8403b58:	f800283a 	ret
 8403b5c:	0007883a 	mov	r3,zero
 8403b60:	003ff806 	br	8403b44 <udivmodsi4+0x50>
 8403b64:	00800044 	movi	r2,1
 8403b68:	0007883a 	mov	r3,zero
 8403b6c:	003fef06 	br	8403b2c <udivmodsi4+0x38>

08403b70 <__divsi3>:
 8403b70:	defffe04 	addi	sp,sp,-8
 8403b74:	dc000015 	stw	r16,0(sp)
 8403b78:	dfc00115 	stw	ra,4(sp)
 8403b7c:	0021883a 	mov	r16,zero
 8403b80:	20000c16 	blt	r4,zero,8403bb4 <__divsi3+0x44>
 8403b84:	000d883a 	mov	r6,zero
 8403b88:	28000e16 	blt	r5,zero,8403bc4 <__divsi3+0x54>
 8403b8c:	8403af40 	call	8403af4 <udivmodsi4>
 8403b90:	1007883a 	mov	r3,r2
 8403b94:	8005003a 	cmpeq	r2,r16,zero
 8403b98:	1000011e 	bne	r2,zero,8403ba0 <__divsi3+0x30>
 8403b9c:	00c7c83a 	sub	r3,zero,r3
 8403ba0:	1805883a 	mov	r2,r3
 8403ba4:	dfc00117 	ldw	ra,4(sp)
 8403ba8:	dc000017 	ldw	r16,0(sp)
 8403bac:	dec00204 	addi	sp,sp,8
 8403bb0:	f800283a 	ret
 8403bb4:	0109c83a 	sub	r4,zero,r4
 8403bb8:	04000044 	movi	r16,1
 8403bbc:	000d883a 	mov	r6,zero
 8403bc0:	283ff20e 	bge	r5,zero,8403b8c <__divsi3+0x1c>
 8403bc4:	014bc83a 	sub	r5,zero,r5
 8403bc8:	8021003a 	cmpeq	r16,r16,zero
 8403bcc:	003fef06 	br	8403b8c <__divsi3+0x1c>

08403bd0 <__modsi3>:
 8403bd0:	deffff04 	addi	sp,sp,-4
 8403bd4:	dfc00015 	stw	ra,0(sp)
 8403bd8:	01800044 	movi	r6,1
 8403bdc:	2807883a 	mov	r3,r5
 8403be0:	20000416 	blt	r4,zero,8403bf4 <__modsi3+0x24>
 8403be4:	28000c16 	blt	r5,zero,8403c18 <__modsi3+0x48>
 8403be8:	dfc00017 	ldw	ra,0(sp)
 8403bec:	dec00104 	addi	sp,sp,4
 8403bf0:	8403af41 	jmpi	8403af4 <udivmodsi4>
 8403bf4:	0109c83a 	sub	r4,zero,r4
 8403bf8:	28000b16 	blt	r5,zero,8403c28 <__modsi3+0x58>
 8403bfc:	180b883a 	mov	r5,r3
 8403c00:	01800044 	movi	r6,1
 8403c04:	8403af40 	call	8403af4 <udivmodsi4>
 8403c08:	0085c83a 	sub	r2,zero,r2
 8403c0c:	dfc00017 	ldw	ra,0(sp)
 8403c10:	dec00104 	addi	sp,sp,4
 8403c14:	f800283a 	ret
 8403c18:	014bc83a 	sub	r5,zero,r5
 8403c1c:	dfc00017 	ldw	ra,0(sp)
 8403c20:	dec00104 	addi	sp,sp,4
 8403c24:	8403af41 	jmpi	8403af4 <udivmodsi4>
 8403c28:	0147c83a 	sub	r3,zero,r5
 8403c2c:	003ff306 	br	8403bfc <__modsi3+0x2c>

08403c30 <__udivsi3>:
 8403c30:	000d883a 	mov	r6,zero
 8403c34:	8403af41 	jmpi	8403af4 <udivmodsi4>

08403c38 <__umodsi3>:
 8403c38:	01800044 	movi	r6,1
 8403c3c:	8403af41 	jmpi	8403af4 <udivmodsi4>

08403c40 <__muldi3>:
 8403c40:	2011883a 	mov	r8,r4
 8403c44:	427fffcc 	andi	r9,r8,65535
 8403c48:	4018d43a 	srli	r12,r8,16
 8403c4c:	32bfffcc 	andi	r10,r6,65535
 8403c50:	3016d43a 	srli	r11,r6,16
 8403c54:	4a85383a 	mul	r2,r9,r10
 8403c58:	6295383a 	mul	r10,r12,r10
 8403c5c:	4ad3383a 	mul	r9,r9,r11
 8403c60:	113fffcc 	andi	r4,r2,65535
 8403c64:	1004d43a 	srli	r2,r2,16
 8403c68:	4a93883a 	add	r9,r9,r10
 8403c6c:	3807883a 	mov	r3,r7
 8403c70:	1245883a 	add	r2,r2,r9
 8403c74:	280f883a 	mov	r7,r5
 8403c78:	180b883a 	mov	r5,r3
 8403c7c:	1006943a 	slli	r3,r2,16
 8403c80:	defffd04 	addi	sp,sp,-12
 8403c84:	dc800215 	stw	r18,8(sp)
 8403c88:	1907883a 	add	r3,r3,r4
 8403c8c:	dc400115 	stw	r17,4(sp)
 8403c90:	dc000015 	stw	r16,0(sp)
 8403c94:	4165383a 	mul	r18,r8,r5
 8403c98:	31e3383a 	mul	r17,r6,r7
 8403c9c:	1012d43a 	srli	r9,r2,16
 8403ca0:	62d9383a 	mul	r12,r12,r11
 8403ca4:	181f883a 	mov	r15,r3
 8403ca8:	1280022e 	bgeu	r2,r10,8403cb4 <__muldi3+0x74>
 8403cac:	00800074 	movhi	r2,1
 8403cb0:	6099883a 	add	r12,r12,r2
 8403cb4:	624d883a 	add	r6,r12,r9
 8403cb8:	9187883a 	add	r3,r18,r6
 8403cbc:	88c7883a 	add	r3,r17,r3
 8403cc0:	7805883a 	mov	r2,r15
 8403cc4:	dc800217 	ldw	r18,8(sp)
 8403cc8:	dc400117 	ldw	r17,4(sp)
 8403ccc:	dc000017 	ldw	r16,0(sp)
 8403cd0:	dec00304 	addi	sp,sp,12
 8403cd4:	f800283a 	ret

08403cd8 <__clzsi2>:
 8403cd8:	00bfffd4 	movui	r2,65535
 8403cdc:	11000e36 	bltu	r2,r4,8403d18 <__clzsi2+0x40>
 8403ce0:	00803fc4 	movi	r2,255
 8403ce4:	01400204 	movi	r5,8
 8403ce8:	0007883a 	mov	r3,zero
 8403cec:	11001036 	bltu	r2,r4,8403d30 <__clzsi2+0x58>
 8403cf0:	000b883a 	mov	r5,zero
 8403cf4:	20c6d83a 	srl	r3,r4,r3
 8403cf8:	00821074 	movhi	r2,2113
 8403cfc:	10a23f04 	addi	r2,r2,-30468
 8403d00:	1887883a 	add	r3,r3,r2
 8403d04:	18800003 	ldbu	r2,0(r3)
 8403d08:	00c00804 	movi	r3,32
 8403d0c:	2885883a 	add	r2,r5,r2
 8403d10:	1885c83a 	sub	r2,r3,r2
 8403d14:	f800283a 	ret
 8403d18:	01400404 	movi	r5,16
 8403d1c:	00804034 	movhi	r2,256
 8403d20:	10bfffc4 	addi	r2,r2,-1
 8403d24:	2807883a 	mov	r3,r5
 8403d28:	113ff22e 	bgeu	r2,r4,8403cf4 <__clzsi2+0x1c>
 8403d2c:	01400604 	movi	r5,24
 8403d30:	2807883a 	mov	r3,r5
 8403d34:	20c6d83a 	srl	r3,r4,r3
 8403d38:	00821074 	movhi	r2,2113
 8403d3c:	10a23f04 	addi	r2,r2,-30468
 8403d40:	1887883a 	add	r3,r3,r2
 8403d44:	18800003 	ldbu	r2,0(r3)
 8403d48:	00c00804 	movi	r3,32
 8403d4c:	2885883a 	add	r2,r5,r2
 8403d50:	1885c83a 	sub	r2,r3,r2
 8403d54:	f800283a 	ret

08403d58 <__pack_f>:
 8403d58:	20c00017 	ldw	r3,0(r4)
 8403d5c:	01c00044 	movi	r7,1
 8403d60:	21800317 	ldw	r6,12(r4)
 8403d64:	21400117 	ldw	r5,4(r4)
 8403d68:	38c02d2e 	bgeu	r7,r3,8403e20 <__pack_f+0xc8>
 8403d6c:	00800104 	movi	r2,4
 8403d70:	18802826 	beq	r3,r2,8403e14 <__pack_f+0xbc>
 8403d74:	00800084 	movi	r2,2
 8403d78:	18800126 	beq	r3,r2,8403d80 <__pack_f+0x28>
 8403d7c:	3000101e 	bne	r6,zero,8403dc0 <__pack_f+0x68>
 8403d80:	000d883a 	mov	r6,zero
 8403d84:	0007883a 	mov	r3,zero
 8403d88:	19003fcc 	andi	r4,r3,255
 8403d8c:	200895fa 	slli	r4,r4,23
 8403d90:	00c02034 	movhi	r3,128
 8403d94:	18ffffc4 	addi	r3,r3,-1
 8403d98:	30c6703a 	and	r3,r6,r3
 8403d9c:	10a0002c 	andhi	r2,r2,32768
 8403da0:	10c4b03a 	or	r2,r2,r3
 8403da4:	280a97fa 	slli	r5,r5,31
 8403da8:	1104b03a 	or	r2,r2,r4
 8403dac:	00e00034 	movhi	r3,32768
 8403db0:	18ffffc4 	addi	r3,r3,-1
 8403db4:	10c4703a 	and	r2,r2,r3
 8403db8:	1144b03a 	or	r2,r2,r5
 8403dbc:	f800283a 	ret
 8403dc0:	21000217 	ldw	r4,8(r4)
 8403dc4:	00bfe084 	movi	r2,-126
 8403dc8:	20801b16 	blt	r4,r2,8403e38 <__pack_f+0xe0>
 8403dcc:	00801fc4 	movi	r2,127
 8403dd0:	11001016 	blt	r2,r4,8403e14 <__pack_f+0xbc>
 8403dd4:	308e703a 	and	r7,r6,r2
 8403dd8:	2087883a 	add	r3,r4,r2
 8403ddc:	00801004 	movi	r2,64
 8403de0:	38800526 	beq	r7,r2,8403df8 <__pack_f+0xa0>
 8403de4:	31800fc4 	addi	r6,r6,63
 8403de8:	30000716 	blt	r6,zero,8403e08 <__pack_f+0xb0>
 8403dec:	300490ba 	slli	r2,r6,2
 8403df0:	100cd27a 	srli	r6,r2,9
 8403df4:	003fe406 	br	8403d88 <__pack_f+0x30>
 8403df8:	3080200c 	andi	r2,r6,128
 8403dfc:	103ffa26 	beq	r2,zero,8403de8 <__pack_f+0x90>
 8403e00:	31cd883a 	add	r6,r6,r7
 8403e04:	003ff806 	br	8403de8 <__pack_f+0x90>
 8403e08:	300cd07a 	srli	r6,r6,1
 8403e0c:	18c00044 	addi	r3,r3,1
 8403e10:	003ff606 	br	8403dec <__pack_f+0x94>
 8403e14:	000d883a 	mov	r6,zero
 8403e18:	00ffffc4 	movi	r3,-1
 8403e1c:	003fda06 	br	8403d88 <__pack_f+0x30>
 8403e20:	31800434 	orhi	r6,r6,16
 8403e24:	00802034 	movhi	r2,128
 8403e28:	10bfffc4 	addi	r2,r2,-1
 8403e2c:	308c703a 	and	r6,r6,r2
 8403e30:	00ffffc4 	movi	r3,-1
 8403e34:	003fd406 	br	8403d88 <__pack_f+0x30>
 8403e38:	1109c83a 	sub	r4,r2,r4
 8403e3c:	00800644 	movi	r2,25
 8403e40:	11001216 	blt	r2,r4,8403e8c <__pack_f+0x134>
 8403e44:	3904983a 	sll	r2,r7,r4
 8403e48:	3106d83a 	srl	r3,r6,r4
 8403e4c:	10bfffc4 	addi	r2,r2,-1
 8403e50:	3084703a 	and	r2,r6,r2
 8403e54:	1004c03a 	cmpne	r2,r2,zero
 8403e58:	1886b03a 	or	r3,r3,r2
 8403e5c:	19001fcc 	andi	r4,r3,127
 8403e60:	00801004 	movi	r2,64
 8403e64:	20800c26 	beq	r4,r2,8403e98 <__pack_f+0x140>
 8403e68:	18c00fc4 	addi	r3,r3,63
 8403e6c:	00900034 	movhi	r2,16384
 8403e70:	10bfffc4 	addi	r2,r2,-1
 8403e74:	180cd1fa 	srli	r6,r3,7
 8403e78:	10c7803a 	cmpltu	r3,r2,r3
 8403e7c:	00802034 	movhi	r2,128
 8403e80:	10bfffc4 	addi	r2,r2,-1
 8403e84:	308c703a 	and	r6,r6,r2
 8403e88:	003fbf06 	br	8403d88 <__pack_f+0x30>
 8403e8c:	0007883a 	mov	r3,zero
 8403e90:	000d883a 	mov	r6,zero
 8403e94:	003ff906 	br	8403e7c <__pack_f+0x124>
 8403e98:	1880200c 	andi	r2,r3,128
 8403e9c:	10000126 	beq	r2,zero,8403ea4 <__pack_f+0x14c>
 8403ea0:	1907883a 	add	r3,r3,r4
 8403ea4:	180cd1fa 	srli	r6,r3,7
 8403ea8:	00900034 	movhi	r2,16384
 8403eac:	10bfffc4 	addi	r2,r2,-1
 8403eb0:	10c7803a 	cmpltu	r3,r2,r3
 8403eb4:	003ff106 	br	8403e7c <__pack_f+0x124>

08403eb8 <__unpack_f>:
 8403eb8:	21800017 	ldw	r6,0(r4)
 8403ebc:	00c02034 	movhi	r3,128
 8403ec0:	18ffffc4 	addi	r3,r3,-1
 8403ec4:	3004d5fa 	srli	r2,r6,23
 8403ec8:	3008d7fa 	srli	r4,r6,31
 8403ecc:	30ce703a 	and	r7,r6,r3
 8403ed0:	10c03fcc 	andi	r3,r2,255
 8403ed4:	29000115 	stw	r4,4(r5)
 8403ed8:	1800131e 	bne	r3,zero,8403f28 <__unpack_f+0x70>
 8403edc:	38000f26 	beq	r7,zero,8403f1c <__unpack_f+0x64>
 8403ee0:	380691fa 	slli	r3,r7,7
 8403ee4:	01bfe084 	movi	r6,-126
 8403ee8:	008000c4 	movi	r2,3
 8403eec:	01100034 	movhi	r4,16384
 8403ef0:	213fffc4 	addi	r4,r4,-1
 8403ef4:	28800015 	stw	r2,0(r5)
 8403ef8:	29800215 	stw	r6,8(r5)
 8403efc:	20c00536 	bltu	r4,r3,8403f14 <__unpack_f+0x5c>
 8403f00:	3005883a 	mov	r2,r6
 8403f04:	18c7883a 	add	r3,r3,r3
 8403f08:	10bfffc4 	addi	r2,r2,-1
 8403f0c:	20fffd2e 	bgeu	r4,r3,8403f04 <__unpack_f+0x4c>
 8403f10:	28800215 	stw	r2,8(r5)
 8403f14:	28c00315 	stw	r3,12(r5)
 8403f18:	f800283a 	ret
 8403f1c:	00800084 	movi	r2,2
 8403f20:	28800015 	stw	r2,0(r5)
 8403f24:	f800283a 	ret
 8403f28:	00803fc4 	movi	r2,255
 8403f2c:	18800826 	beq	r3,r2,8403f50 <__unpack_f+0x98>
 8403f30:	380491fa 	slli	r2,r7,7
 8403f34:	18ffe044 	addi	r3,r3,-127
 8403f38:	28c00215 	stw	r3,8(r5)
 8403f3c:	10900034 	orhi	r2,r2,16384
 8403f40:	28800315 	stw	r2,12(r5)
 8403f44:	008000c4 	movi	r2,3
 8403f48:	28800015 	stw	r2,0(r5)
 8403f4c:	f800283a 	ret
 8403f50:	3800031e 	bne	r7,zero,8403f60 <__unpack_f+0xa8>
 8403f54:	00800104 	movi	r2,4
 8403f58:	28800015 	stw	r2,0(r5)
 8403f5c:	f800283a 	ret
 8403f60:	3080042c 	andhi	r2,r6,16
 8403f64:	10000426 	beq	r2,zero,8403f78 <__unpack_f+0xc0>
 8403f68:	00800044 	movi	r2,1
 8403f6c:	28800015 	stw	r2,0(r5)
 8403f70:	29c00315 	stw	r7,12(r5)
 8403f74:	f800283a 	ret
 8403f78:	28000015 	stw	zero,0(r5)
 8403f7c:	003ffc06 	br	8403f70 <__unpack_f+0xb8>

08403f80 <__fpcmp_parts_f>:
 8403f80:	21800017 	ldw	r6,0(r4)
 8403f84:	00c00044 	movi	r3,1
 8403f88:	19800a2e 	bgeu	r3,r6,8403fb4 <__fpcmp_parts_f+0x34>
 8403f8c:	28800017 	ldw	r2,0(r5)
 8403f90:	1880082e 	bgeu	r3,r2,8403fb4 <__fpcmp_parts_f+0x34>
 8403f94:	00c00104 	movi	r3,4
 8403f98:	30c01e26 	beq	r6,r3,8404014 <__fpcmp_parts_f+0x94>
 8403f9c:	10c01a26 	beq	r2,r3,8404008 <__fpcmp_parts_f+0x88>
 8403fa0:	00c00084 	movi	r3,2
 8403fa4:	30c00526 	beq	r6,r3,8403fbc <__fpcmp_parts_f+0x3c>
 8403fa8:	10c0071e 	bne	r2,r3,8403fc8 <__fpcmp_parts_f+0x48>
 8403fac:	20800117 	ldw	r2,4(r4)
 8403fb0:	1000091e 	bne	r2,zero,8403fd8 <__fpcmp_parts_f+0x58>
 8403fb4:	00800044 	movi	r2,1
 8403fb8:	f800283a 	ret
 8403fbc:	10c0121e 	bne	r2,r3,8404008 <__fpcmp_parts_f+0x88>
 8403fc0:	0005883a 	mov	r2,zero
 8403fc4:	f800283a 	ret
 8403fc8:	20c00117 	ldw	r3,4(r4)
 8403fcc:	28800117 	ldw	r2,4(r5)
 8403fd0:	18800326 	beq	r3,r2,8403fe0 <__fpcmp_parts_f+0x60>
 8403fd4:	183ff726 	beq	r3,zero,8403fb4 <__fpcmp_parts_f+0x34>
 8403fd8:	00bfffc4 	movi	r2,-1
 8403fdc:	f800283a 	ret
 8403fe0:	21800217 	ldw	r6,8(r4)
 8403fe4:	28800217 	ldw	r2,8(r5)
 8403fe8:	11bffa16 	blt	r2,r6,8403fd4 <__fpcmp_parts_f+0x54>
 8403fec:	30800416 	blt	r6,r2,8404000 <__fpcmp_parts_f+0x80>
 8403ff0:	21000317 	ldw	r4,12(r4)
 8403ff4:	29400317 	ldw	r5,12(r5)
 8403ff8:	293ff636 	bltu	r5,r4,8403fd4 <__fpcmp_parts_f+0x54>
 8403ffc:	217ff02e 	bgeu	r4,r5,8403fc0 <__fpcmp_parts_f+0x40>
 8404000:	183fec1e 	bne	r3,zero,8403fb4 <__fpcmp_parts_f+0x34>
 8404004:	003ff406 	br	8403fd8 <__fpcmp_parts_f+0x58>
 8404008:	28800117 	ldw	r2,4(r5)
 840400c:	103fe91e 	bne	r2,zero,8403fb4 <__fpcmp_parts_f+0x34>
 8404010:	003ff106 	br	8403fd8 <__fpcmp_parts_f+0x58>
 8404014:	11bfe51e 	bne	r2,r6,8403fac <__fpcmp_parts_f+0x2c>
 8404018:	28c00117 	ldw	r3,4(r5)
 840401c:	20800117 	ldw	r2,4(r4)
 8404020:	1885c83a 	sub	r2,r3,r2
 8404024:	f800283a 	ret

08404028 <__make_fp>:
 8404028:	defffb04 	addi	sp,sp,-20
 840402c:	d9000015 	stw	r4,0(sp)
 8404030:	d809883a 	mov	r4,sp
 8404034:	dfc00415 	stw	ra,16(sp)
 8404038:	d9400115 	stw	r5,4(sp)
 840403c:	d9800215 	stw	r6,8(sp)
 8404040:	d9c00315 	stw	r7,12(sp)
 8404044:	8403d580 	call	8403d58 <__pack_f>
 8404048:	dfc00417 	ldw	ra,16(sp)
 840404c:	dec00504 	addi	sp,sp,20
 8404050:	f800283a 	ret

08404054 <__pack_d>:
 8404054:	20c00017 	ldw	r3,0(r4)
 8404058:	defffd04 	addi	sp,sp,-12
 840405c:	dc000015 	stw	r16,0(sp)
 8404060:	dc800215 	stw	r18,8(sp)
 8404064:	dc400115 	stw	r17,4(sp)
 8404068:	00800044 	movi	r2,1
 840406c:	22000317 	ldw	r8,12(r4)
 8404070:	001f883a 	mov	r15,zero
 8404074:	22400417 	ldw	r9,16(r4)
 8404078:	24000117 	ldw	r16,4(r4)
 840407c:	10c0552e 	bgeu	r2,r3,84041d4 <__pack_d+0x180>
 8404080:	00800104 	movi	r2,4
 8404084:	18804f26 	beq	r3,r2,84041c4 <__pack_d+0x170>
 8404088:	00800084 	movi	r2,2
 840408c:	18800226 	beq	r3,r2,8404098 <__pack_d+0x44>
 8404090:	4244b03a 	or	r2,r8,r9
 8404094:	10001a1e 	bne	r2,zero,8404100 <__pack_d+0xac>
 8404098:	000d883a 	mov	r6,zero
 840409c:	000f883a 	mov	r7,zero
 84040a0:	0011883a 	mov	r8,zero
 84040a4:	00800434 	movhi	r2,16
 84040a8:	10bfffc4 	addi	r2,r2,-1
 84040ac:	301d883a 	mov	r14,r6
 84040b0:	3884703a 	and	r2,r7,r2
 84040b4:	400a953a 	slli	r5,r8,20
 84040b8:	79bffc2c 	andhi	r6,r15,65520
 84040bc:	308cb03a 	or	r6,r6,r2
 84040c0:	00e00434 	movhi	r3,32784
 84040c4:	18ffffc4 	addi	r3,r3,-1
 84040c8:	800497fa 	slli	r2,r16,31
 84040cc:	30c6703a 	and	r3,r6,r3
 84040d0:	1946b03a 	or	r3,r3,r5
 84040d4:	01600034 	movhi	r5,32768
 84040d8:	297fffc4 	addi	r5,r5,-1
 84040dc:	194a703a 	and	r5,r3,r5
 84040e0:	288ab03a 	or	r5,r5,r2
 84040e4:	2807883a 	mov	r3,r5
 84040e8:	7005883a 	mov	r2,r14
 84040ec:	dc800217 	ldw	r18,8(sp)
 84040f0:	dc400117 	ldw	r17,4(sp)
 84040f4:	dc000017 	ldw	r16,0(sp)
 84040f8:	dec00304 	addi	sp,sp,12
 84040fc:	f800283a 	ret
 8404100:	21000217 	ldw	r4,8(r4)
 8404104:	00bf0084 	movi	r2,-1022
 8404108:	20803f16 	blt	r4,r2,8404208 <__pack_d+0x1b4>
 840410c:	0080ffc4 	movi	r2,1023
 8404110:	11002c16 	blt	r2,r4,84041c4 <__pack_d+0x170>
 8404114:	00803fc4 	movi	r2,255
 8404118:	408c703a 	and	r6,r8,r2
 840411c:	00802004 	movi	r2,128
 8404120:	0007883a 	mov	r3,zero
 8404124:	000f883a 	mov	r7,zero
 8404128:	2280ffc4 	addi	r10,r4,1023
 840412c:	30801e26 	beq	r6,r2,84041a8 <__pack_d+0x154>
 8404130:	00801fc4 	movi	r2,127
 8404134:	4089883a 	add	r4,r8,r2
 8404138:	220d803a 	cmpltu	r6,r4,r8
 840413c:	324d883a 	add	r6,r6,r9
 8404140:	2011883a 	mov	r8,r4
 8404144:	3013883a 	mov	r9,r6
 8404148:	00880034 	movhi	r2,8192
 840414c:	10bfffc4 	addi	r2,r2,-1
 8404150:	12400d36 	bltu	r2,r9,8404188 <__pack_d+0x134>
 8404154:	4804963a 	slli	r2,r9,24
 8404158:	400cd23a 	srli	r6,r8,8
 840415c:	480ed23a 	srli	r7,r9,8
 8404160:	013fffc4 	movi	r4,-1
 8404164:	118cb03a 	or	r6,r2,r6
 8404168:	01400434 	movhi	r5,16
 840416c:	297fffc4 	addi	r5,r5,-1
 8404170:	3104703a 	and	r2,r6,r4
 8404174:	3946703a 	and	r3,r7,r5
 8404178:	5201ffcc 	andi	r8,r10,2047
 840417c:	100d883a 	mov	r6,r2
 8404180:	180f883a 	mov	r7,r3
 8404184:	003fc706 	br	84040a4 <__pack_d+0x50>
 8404188:	480897fa 	slli	r4,r9,31
 840418c:	4004d07a 	srli	r2,r8,1
 8404190:	4806d07a 	srli	r3,r9,1
 8404194:	52800044 	addi	r10,r10,1
 8404198:	2084b03a 	or	r2,r4,r2
 840419c:	1011883a 	mov	r8,r2
 84041a0:	1813883a 	mov	r9,r3
 84041a4:	003feb06 	br	8404154 <__pack_d+0x100>
 84041a8:	383fe11e 	bne	r7,zero,8404130 <__pack_d+0xdc>
 84041ac:	01004004 	movi	r4,256
 84041b0:	4104703a 	and	r2,r8,r4
 84041b4:	10c4b03a 	or	r2,r2,r3
 84041b8:	103fe326 	beq	r2,zero,8404148 <__pack_d+0xf4>
 84041bc:	3005883a 	mov	r2,r6
 84041c0:	003fdc06 	br	8404134 <__pack_d+0xe0>
 84041c4:	000d883a 	mov	r6,zero
 84041c8:	000f883a 	mov	r7,zero
 84041cc:	0201ffc4 	movi	r8,2047
 84041d0:	003fb406 	br	84040a4 <__pack_d+0x50>
 84041d4:	0005883a 	mov	r2,zero
 84041d8:	00c00234 	movhi	r3,8
 84041dc:	408cb03a 	or	r6,r8,r2
 84041e0:	48ceb03a 	or	r7,r9,r3
 84041e4:	013fffc4 	movi	r4,-1
 84041e8:	01400434 	movhi	r5,16
 84041ec:	297fffc4 	addi	r5,r5,-1
 84041f0:	3104703a 	and	r2,r6,r4
 84041f4:	3946703a 	and	r3,r7,r5
 84041f8:	100d883a 	mov	r6,r2
 84041fc:	180f883a 	mov	r7,r3
 8404200:	0201ffc4 	movi	r8,2047
 8404204:	003fa706 	br	84040a4 <__pack_d+0x50>
 8404208:	1109c83a 	sub	r4,r2,r4
 840420c:	00800e04 	movi	r2,56
 8404210:	11004316 	blt	r2,r4,8404320 <__pack_d+0x2cc>
 8404214:	21fff804 	addi	r7,r4,-32
 8404218:	38004516 	blt	r7,zero,8404330 <__pack_d+0x2dc>
 840421c:	49d8d83a 	srl	r12,r9,r7
 8404220:	001b883a 	mov	r13,zero
 8404224:	0023883a 	mov	r17,zero
 8404228:	01400044 	movi	r5,1
 840422c:	0025883a 	mov	r18,zero
 8404230:	38004716 	blt	r7,zero,8404350 <__pack_d+0x2fc>
 8404234:	29d6983a 	sll	r11,r5,r7
 8404238:	0015883a 	mov	r10,zero
 840423c:	00bfffc4 	movi	r2,-1
 8404240:	5089883a 	add	r4,r10,r2
 8404244:	588b883a 	add	r5,r11,r2
 8404248:	228d803a 	cmpltu	r6,r4,r10
 840424c:	314b883a 	add	r5,r6,r5
 8404250:	4104703a 	and	r2,r8,r4
 8404254:	4946703a 	and	r3,r9,r5
 8404258:	10c4b03a 	or	r2,r2,r3
 840425c:	10000226 	beq	r2,zero,8404268 <__pack_d+0x214>
 8404260:	04400044 	movi	r17,1
 8404264:	0025883a 	mov	r18,zero
 8404268:	00803fc4 	movi	r2,255
 840426c:	644eb03a 	or	r7,r12,r17
 8404270:	3892703a 	and	r9,r7,r2
 8404274:	00802004 	movi	r2,128
 8404278:	6c90b03a 	or	r8,r13,r18
 840427c:	0015883a 	mov	r10,zero
 8404280:	48801626 	beq	r9,r2,84042dc <__pack_d+0x288>
 8404284:	01001fc4 	movi	r4,127
 8404288:	3905883a 	add	r2,r7,r4
 840428c:	11cd803a 	cmpltu	r6,r2,r7
 8404290:	320d883a 	add	r6,r6,r8
 8404294:	100f883a 	mov	r7,r2
 8404298:	00840034 	movhi	r2,4096
 840429c:	10bfffc4 	addi	r2,r2,-1
 84042a0:	3011883a 	mov	r8,r6
 84042a4:	0007883a 	mov	r3,zero
 84042a8:	11801b36 	bltu	r2,r6,8404318 <__pack_d+0x2c4>
 84042ac:	4004963a 	slli	r2,r8,24
 84042b0:	3808d23a 	srli	r4,r7,8
 84042b4:	400ad23a 	srli	r5,r8,8
 84042b8:	1813883a 	mov	r9,r3
 84042bc:	1108b03a 	or	r4,r2,r4
 84042c0:	00bfffc4 	movi	r2,-1
 84042c4:	00c00434 	movhi	r3,16
 84042c8:	18ffffc4 	addi	r3,r3,-1
 84042cc:	208c703a 	and	r6,r4,r2
 84042d0:	28ce703a 	and	r7,r5,r3
 84042d4:	4a01ffcc 	andi	r8,r9,2047
 84042d8:	003f7206 	br	84040a4 <__pack_d+0x50>
 84042dc:	503fe91e 	bne	r10,zero,8404284 <__pack_d+0x230>
 84042e0:	01004004 	movi	r4,256
 84042e4:	3904703a 	and	r2,r7,r4
 84042e8:	0007883a 	mov	r3,zero
 84042ec:	10c4b03a 	or	r2,r2,r3
 84042f0:	10000626 	beq	r2,zero,840430c <__pack_d+0x2b8>
 84042f4:	3a45883a 	add	r2,r7,r9
 84042f8:	11cd803a 	cmpltu	r6,r2,r7
 84042fc:	320d883a 	add	r6,r6,r8
 8404300:	100f883a 	mov	r7,r2
 8404304:	3011883a 	mov	r8,r6
 8404308:	0007883a 	mov	r3,zero
 840430c:	00840034 	movhi	r2,4096
 8404310:	10bfffc4 	addi	r2,r2,-1
 8404314:	123fe52e 	bgeu	r2,r8,84042ac <__pack_d+0x258>
 8404318:	00c00044 	movi	r3,1
 840431c:	003fe306 	br	84042ac <__pack_d+0x258>
 8404320:	0009883a 	mov	r4,zero
 8404324:	0013883a 	mov	r9,zero
 8404328:	000b883a 	mov	r5,zero
 840432c:	003fe406 	br	84042c0 <__pack_d+0x26c>
 8404330:	4a47883a 	add	r3,r9,r9
 8404334:	008007c4 	movi	r2,31
 8404338:	1105c83a 	sub	r2,r2,r4
 840433c:	1886983a 	sll	r3,r3,r2
 8404340:	4118d83a 	srl	r12,r8,r4
 8404344:	491ad83a 	srl	r13,r9,r4
 8404348:	1b18b03a 	or	r12,r3,r12
 840434c:	003fb506 	br	8404224 <__pack_d+0x1d0>
 8404350:	2806d07a 	srli	r3,r5,1
 8404354:	008007c4 	movi	r2,31
 8404358:	1105c83a 	sub	r2,r2,r4
 840435c:	1896d83a 	srl	r11,r3,r2
 8404360:	2914983a 	sll	r10,r5,r4
 8404364:	003fb506 	br	840423c <__pack_d+0x1e8>

08404368 <__unpack_d>:
 8404368:	20c00117 	ldw	r3,4(r4)
 840436c:	22400017 	ldw	r9,0(r4)
 8404370:	00800434 	movhi	r2,16
 8404374:	10bfffc4 	addi	r2,r2,-1
 8404378:	1808d53a 	srli	r4,r3,20
 840437c:	180cd7fa 	srli	r6,r3,31
 8404380:	1894703a 	and	r10,r3,r2
 8404384:	2201ffcc 	andi	r8,r4,2047
 8404388:	281b883a 	mov	r13,r5
 840438c:	4817883a 	mov	r11,r9
 8404390:	29800115 	stw	r6,4(r5)
 8404394:	5019883a 	mov	r12,r10
 8404398:	40001e1e 	bne	r8,zero,8404414 <__unpack_d+0xac>
 840439c:	4a84b03a 	or	r2,r9,r10
 84043a0:	10001926 	beq	r2,zero,8404408 <__unpack_d+0xa0>
 84043a4:	4804d63a 	srli	r2,r9,24
 84043a8:	500c923a 	slli	r6,r10,8
 84043ac:	013f0084 	movi	r4,-1022
 84043b0:	00c40034 	movhi	r3,4096
 84043b4:	18ffffc4 	addi	r3,r3,-1
 84043b8:	118cb03a 	or	r6,r2,r6
 84043bc:	008000c4 	movi	r2,3
 84043c0:	480a923a 	slli	r5,r9,8
 84043c4:	68800015 	stw	r2,0(r13)
 84043c8:	69000215 	stw	r4,8(r13)
 84043cc:	19800b36 	bltu	r3,r6,84043fc <__unpack_d+0x94>
 84043d0:	200f883a 	mov	r7,r4
 84043d4:	1811883a 	mov	r8,r3
 84043d8:	2945883a 	add	r2,r5,r5
 84043dc:	1149803a 	cmpltu	r4,r2,r5
 84043e0:	3187883a 	add	r3,r6,r6
 84043e4:	20c9883a 	add	r4,r4,r3
 84043e8:	100b883a 	mov	r5,r2
 84043ec:	200d883a 	mov	r6,r4
 84043f0:	39ffffc4 	addi	r7,r7,-1
 84043f4:	413ff82e 	bgeu	r8,r4,84043d8 <__unpack_d+0x70>
 84043f8:	69c00215 	stw	r7,8(r13)
 84043fc:	69800415 	stw	r6,16(r13)
 8404400:	69400315 	stw	r5,12(r13)
 8404404:	f800283a 	ret
 8404408:	00800084 	movi	r2,2
 840440c:	28800015 	stw	r2,0(r5)
 8404410:	f800283a 	ret
 8404414:	0081ffc4 	movi	r2,2047
 8404418:	40800f26 	beq	r8,r2,8404458 <__unpack_d+0xf0>
 840441c:	480cd63a 	srli	r6,r9,24
 8404420:	5006923a 	slli	r3,r10,8
 8404424:	4804923a 	slli	r2,r9,8
 8404428:	0009883a 	mov	r4,zero
 840442c:	30c6b03a 	or	r3,r6,r3
 8404430:	01440034 	movhi	r5,4096
 8404434:	110cb03a 	or	r6,r2,r4
 8404438:	423f0044 	addi	r8,r8,-1023
 840443c:	194eb03a 	or	r7,r3,r5
 8404440:	008000c4 	movi	r2,3
 8404444:	69c00415 	stw	r7,16(r13)
 8404448:	6a000215 	stw	r8,8(r13)
 840444c:	68800015 	stw	r2,0(r13)
 8404450:	69800315 	stw	r6,12(r13)
 8404454:	f800283a 	ret
 8404458:	4a84b03a 	or	r2,r9,r10
 840445c:	1000031e 	bne	r2,zero,840446c <__unpack_d+0x104>
 8404460:	00800104 	movi	r2,4
 8404464:	28800015 	stw	r2,0(r5)
 8404468:	f800283a 	ret
 840446c:	0009883a 	mov	r4,zero
 8404470:	01400234 	movhi	r5,8
 8404474:	4904703a 	and	r2,r9,r4
 8404478:	5146703a 	and	r3,r10,r5
 840447c:	10c4b03a 	or	r2,r2,r3
 8404480:	10000526 	beq	r2,zero,8404498 <__unpack_d+0x130>
 8404484:	00800044 	movi	r2,1
 8404488:	68800015 	stw	r2,0(r13)
 840448c:	6b000415 	stw	r12,16(r13)
 8404490:	6ac00315 	stw	r11,12(r13)
 8404494:	f800283a 	ret
 8404498:	68000015 	stw	zero,0(r13)
 840449c:	003ffb06 	br	840448c <__unpack_d+0x124>

084044a0 <__fpcmp_parts_d>:
 84044a0:	21800017 	ldw	r6,0(r4)
 84044a4:	00c00044 	movi	r3,1
 84044a8:	19800a2e 	bgeu	r3,r6,84044d4 <__fpcmp_parts_d+0x34>
 84044ac:	28800017 	ldw	r2,0(r5)
 84044b0:	1880082e 	bgeu	r3,r2,84044d4 <__fpcmp_parts_d+0x34>
 84044b4:	00c00104 	movi	r3,4
 84044b8:	30c02626 	beq	r6,r3,8404554 <__fpcmp_parts_d+0xb4>
 84044bc:	10c02226 	beq	r2,r3,8404548 <__fpcmp_parts_d+0xa8>
 84044c0:	00c00084 	movi	r3,2
 84044c4:	30c00526 	beq	r6,r3,84044dc <__fpcmp_parts_d+0x3c>
 84044c8:	10c0071e 	bne	r2,r3,84044e8 <__fpcmp_parts_d+0x48>
 84044cc:	20800117 	ldw	r2,4(r4)
 84044d0:	1000091e 	bne	r2,zero,84044f8 <__fpcmp_parts_d+0x58>
 84044d4:	00800044 	movi	r2,1
 84044d8:	f800283a 	ret
 84044dc:	10c01a1e 	bne	r2,r3,8404548 <__fpcmp_parts_d+0xa8>
 84044e0:	0005883a 	mov	r2,zero
 84044e4:	f800283a 	ret
 84044e8:	22000117 	ldw	r8,4(r4)
 84044ec:	28800117 	ldw	r2,4(r5)
 84044f0:	40800326 	beq	r8,r2,8404500 <__fpcmp_parts_d+0x60>
 84044f4:	403ff726 	beq	r8,zero,84044d4 <__fpcmp_parts_d+0x34>
 84044f8:	00bfffc4 	movi	r2,-1
 84044fc:	f800283a 	ret
 8404500:	20c00217 	ldw	r3,8(r4)
 8404504:	28800217 	ldw	r2,8(r5)
 8404508:	10fffa16 	blt	r2,r3,84044f4 <__fpcmp_parts_d+0x54>
 840450c:	18800916 	blt	r3,r2,8404534 <__fpcmp_parts_d+0x94>
 8404510:	21c00417 	ldw	r7,16(r4)
 8404514:	28c00417 	ldw	r3,16(r5)
 8404518:	21800317 	ldw	r6,12(r4)
 840451c:	28800317 	ldw	r2,12(r5)
 8404520:	19fff436 	bltu	r3,r7,84044f4 <__fpcmp_parts_d+0x54>
 8404524:	38c00526 	beq	r7,r3,840453c <__fpcmp_parts_d+0x9c>
 8404528:	38c00236 	bltu	r7,r3,8404534 <__fpcmp_parts_d+0x94>
 840452c:	19ffec1e 	bne	r3,r7,84044e0 <__fpcmp_parts_d+0x40>
 8404530:	30bfeb2e 	bgeu	r6,r2,84044e0 <__fpcmp_parts_d+0x40>
 8404534:	403fe71e 	bne	r8,zero,84044d4 <__fpcmp_parts_d+0x34>
 8404538:	003fef06 	br	84044f8 <__fpcmp_parts_d+0x58>
 840453c:	11bffa2e 	bgeu	r2,r6,8404528 <__fpcmp_parts_d+0x88>
 8404540:	403fe426 	beq	r8,zero,84044d4 <__fpcmp_parts_d+0x34>
 8404544:	003fec06 	br	84044f8 <__fpcmp_parts_d+0x58>
 8404548:	28800117 	ldw	r2,4(r5)
 840454c:	103fe11e 	bne	r2,zero,84044d4 <__fpcmp_parts_d+0x34>
 8404550:	003fe906 	br	84044f8 <__fpcmp_parts_d+0x58>
 8404554:	11bfdd1e 	bne	r2,r6,84044cc <__fpcmp_parts_d+0x2c>
 8404558:	28c00117 	ldw	r3,4(r5)
 840455c:	20800117 	ldw	r2,4(r4)
 8404560:	1885c83a 	sub	r2,r3,r2
 8404564:	f800283a 	ret

08404568 <__errno>:
 8404568:	00c21074 	movhi	r3,2113
 840456c:	18e8ac04 	addi	r3,r3,-23888
 8404570:	18800017 	ldw	r2,0(r3)
 8404574:	f800283a 	ret

08404578 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 8404578:	defffe04 	addi	sp,sp,-8
 840457c:	dfc00115 	stw	ra,4(sp)
 8404580:	df000015 	stw	fp,0(sp)
 8404584:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
 8404588:	01021074 	movhi	r4,2113
 840458c:	2128bb04 	addi	r4,r4,-23828
 8404590:	01421074 	movhi	r5,2113
 8404594:	2962d504 	addi	r5,r5,-29868
 8404598:	01821074 	movhi	r6,2113
 840459c:	31a8bb04 	addi	r6,r6,-23828
 84045a0:	84045f80 	call	84045f8 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
 84045a4:	01021034 	movhi	r4,2112
 84045a8:	21000804 	addi	r4,r4,32
 84045ac:	01421034 	movhi	r5,2112
 84045b0:	29400804 	addi	r5,r5,32
 84045b4:	01821034 	movhi	r6,2112
 84045b8:	31806d04 	addi	r6,r6,436
 84045bc:	84045f80 	call	84045f8 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
 84045c0:	01021074 	movhi	r4,2113
 84045c4:	21220c04 	addi	r4,r4,-30672
 84045c8:	01421074 	movhi	r5,2113
 84045cc:	29620c04 	addi	r5,r5,-30672
 84045d0:	01821074 	movhi	r6,2113
 84045d4:	31a2d504 	addi	r6,r6,-29868
 84045d8:	84045f80 	call	84045f8 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 84045dc:	84074a80 	call	84074a8 <alt_dcache_flush_all>
  alt_icache_flush_all();
 84045e0:	84077880 	call	8407788 <alt_icache_flush_all>
}
 84045e4:	e037883a 	mov	sp,fp
 84045e8:	dfc00117 	ldw	ra,4(sp)
 84045ec:	df000017 	ldw	fp,0(sp)
 84045f0:	dec00204 	addi	sp,sp,8
 84045f4:	f800283a 	ret

084045f8 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
 84045f8:	defffc04 	addi	sp,sp,-16
 84045fc:	df000315 	stw	fp,12(sp)
 8404600:	df000304 	addi	fp,sp,12
 8404604:	e13ffd15 	stw	r4,-12(fp)
 8404608:	e17ffe15 	stw	r5,-8(fp)
 840460c:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
 8404610:	e0fffe17 	ldw	r3,-8(fp)
 8404614:	e0bffd17 	ldw	r2,-12(fp)
 8404618:	18800e26 	beq	r3,r2,8404654 <alt_load_section+0x5c>
  {
    while( to != end )
 840461c:	00000a06 	br	8404648 <alt_load_section+0x50>
    {
      *to++ = *from++;
 8404620:	e0bffd17 	ldw	r2,-12(fp)
 8404624:	10c00017 	ldw	r3,0(r2)
 8404628:	e0bffe17 	ldw	r2,-8(fp)
 840462c:	10c00015 	stw	r3,0(r2)
 8404630:	e0bffe17 	ldw	r2,-8(fp)
 8404634:	10800104 	addi	r2,r2,4
 8404638:	e0bffe15 	stw	r2,-8(fp)
 840463c:	e0bffd17 	ldw	r2,-12(fp)
 8404640:	10800104 	addi	r2,r2,4
 8404644:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
 8404648:	e0fffe17 	ldw	r3,-8(fp)
 840464c:	e0bfff17 	ldw	r2,-4(fp)
 8404650:	18bff31e 	bne	r3,r2,8404620 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
 8404654:	e037883a 	mov	sp,fp
 8404658:	df000017 	ldw	fp,0(sp)
 840465c:	dec00104 	addi	sp,sp,4
 8404660:	f800283a 	ret

08404664 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 8404664:	defffd04 	addi	sp,sp,-12
 8404668:	dfc00215 	stw	ra,8(sp)
 840466c:	df000115 	stw	fp,4(sp)
 8404670:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 8404674:	0009883a 	mov	r4,zero
 8404678:	84046d00 	call	84046d0 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 840467c:	84047040 	call	8404704 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 8404680:	01021074 	movhi	r4,2113
 8404684:	21228004 	addi	r4,r4,-30208
 8404688:	01421074 	movhi	r5,2113
 840468c:	29628004 	addi	r5,r5,-30208
 8404690:	01821074 	movhi	r6,2113
 8404694:	31a28004 	addi	r6,r6,-30208
 8404698:	8407b480 	call	8407b48 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
 840469c:	840762c0 	call	840762c <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
 84046a0:	01021034 	movhi	r4,2112
 84046a4:	211da404 	addi	r4,r4,30352
 84046a8:	84083100 	call	8408310 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 84046ac:	d1260117 	ldw	r4,-26620(gp)
 84046b0:	d1660217 	ldw	r5,-26616(gp)
 84046b4:	d1a60317 	ldw	r6,-26612(gp)
 84046b8:	84002000 	call	8400200 <main>
 84046bc:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
 84046c0:	01000044 	movi	r4,1
 84046c4:	840734c0 	call	840734c <close>
  exit (result);
 84046c8:	e13fff17 	ldw	r4,-4(fp)
 84046cc:	84083240 	call	8408324 <exit>

084046d0 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 84046d0:	defffd04 	addi	sp,sp,-12
 84046d4:	dfc00215 	stw	ra,8(sp)
 84046d8:	df000115 	stw	fp,4(sp)
 84046dc:	df000104 	addi	fp,sp,4
 84046e0:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_IRQ_INIT ( CPU_1, cpu_1);
 84046e4:	84080880 	call	8408088 <altera_nios2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 84046e8:	00800044 	movi	r2,1
 84046ec:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 84046f0:	e037883a 	mov	sp,fp
 84046f4:	dfc00117 	ldw	ra,4(sp)
 84046f8:	df000017 	ldw	fp,0(sp)
 84046fc:	dec00204 	addi	sp,sp,8
 8404700:	f800283a 	ret

08404704 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 8404704:	defffd04 	addi	sp,sp,-12
 8404708:	dfc00215 	stw	ra,8(sp)
 840470c:	df000115 	stw	fp,4(sp)
 8404710:	df000104 	addi	fp,sp,4
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_1, jtag_uart_1);
 8404714:	01021074 	movhi	r4,2113
 8404718:	2123df04 	addi	r4,r4,-28804
 840471c:	000b883a 	mov	r5,zero
 8404720:	01800044 	movi	r6,1
 8404724:	8404afc0 	call	8404afc <altera_avalon_jtag_uart_init>
 8404728:	01021074 	movhi	r4,2113
 840472c:	2123d504 	addi	r4,r4,-28844
 8404730:	840497c0 	call	840497c <alt_dev_reg>
    ALTERA_AVALON_MAILBOX_INIT ( MAILBOX_0, mailbox_0);
 8404734:	01021074 	movhi	r4,2113
 8404738:	2127ed04 	addi	r4,r4,-24652
 840473c:	84054600 	call	8405460 <alt_avalon_mailbox_init>
    ALTERA_AVALON_MAILBOX_INIT ( MAILBOX_1, mailbox_1);
 8404740:	01021074 	movhi	r4,2113
 8404744:	2127fc04 	addi	r4,r4,-24592
 8404748:	84054600 	call	8405460 <alt_avalon_mailbox_init>
    ALTERA_AVALON_MAILBOX_INIT ( MAILBOX_2, mailbox_2);
 840474c:	01021074 	movhi	r4,2113
 8404750:	21280b04 	addi	r4,r4,-24532
 8404754:	84054600 	call	8405460 <alt_avalon_mailbox_init>
    ALTERA_AVALON_MAILBOX_INIT ( MAILBOX_3, mailbox_3);
 8404758:	01021074 	movhi	r4,2113
 840475c:	21281a04 	addi	r4,r4,-24472
 8404760:	84054600 	call	8405460 <alt_avalon_mailbox_init>
    ALTERA_AVALON_PERFORMANCE_COUNTER_INIT ( PERFORMANCE_COUNTER_0, performance_counter_0);
 8404764:	0007883a 	mov	r3,zero
 8404768:	00800044 	movi	r2,1
 840476c:	18800035 	stwio	r2,0(r3)
    ALTERA_AVALON_SYSID_INIT ( SYSID, sysid);
    ALTERA_UP_AVALON_VIDEO_PIXEL_BUFFER_DMA_INIT ( VIDEO_PIXEL_BUFFER_DMA_0, video_pixel_buffer_dma_0);
 8404770:	00821074 	movhi	r2,2113
 8404774:	10a82904 	addi	r2,r2,-24412
 8404778:	10800a17 	ldw	r2,40(r2)
 840477c:	10800017 	ldw	r2,0(r2)
 8404780:	1007883a 	mov	r3,r2
 8404784:	00821074 	movhi	r2,2113
 8404788:	10a82904 	addi	r2,r2,-24412
 840478c:	10c00b15 	stw	r3,44(r2)
 8404790:	00821074 	movhi	r2,2113
 8404794:	10a82904 	addi	r2,r2,-24412
 8404798:	10800a17 	ldw	r2,40(r2)
 840479c:	10800104 	addi	r2,r2,4
 84047a0:	10800017 	ldw	r2,0(r2)
 84047a4:	1007883a 	mov	r3,r2
 84047a8:	00821074 	movhi	r2,2113
 84047ac:	10a82904 	addi	r2,r2,-24412
 84047b0:	10c00c15 	stw	r3,48(r2)
 84047b4:	00821074 	movhi	r2,2113
 84047b8:	10a82904 	addi	r2,r2,-24412
 84047bc:	10800a17 	ldw	r2,40(r2)
 84047c0:	10800204 	addi	r2,r2,8
 84047c4:	10800017 	ldw	r2,0(r2)
 84047c8:	10ffffcc 	andi	r3,r2,65535
 84047cc:	00821074 	movhi	r2,2113
 84047d0:	10a82904 	addi	r2,r2,-24412
 84047d4:	10c00f15 	stw	r3,60(r2)
 84047d8:	00821074 	movhi	r2,2113
 84047dc:	10a82904 	addi	r2,r2,-24412
 84047e0:	10800a17 	ldw	r2,40(r2)
 84047e4:	10800204 	addi	r2,r2,8
 84047e8:	10800017 	ldw	r2,0(r2)
 84047ec:	1005d43a 	srai	r2,r2,16
 84047f0:	10ffffcc 	andi	r3,r2,65535
 84047f4:	00821074 	movhi	r2,2113
 84047f8:	10a82904 	addi	r2,r2,-24412
 84047fc:	10c01015 	stw	r3,64(r2)
 8404800:	00821074 	movhi	r2,2113
 8404804:	10a82904 	addi	r2,r2,-24412
 8404808:	10800a17 	ldw	r2,40(r2)
 840480c:	10800304 	addi	r2,r2,12
 8404810:	10800017 	ldw	r2,0(r2)
 8404814:	1005d07a 	srai	r2,r2,1
 8404818:	10c0004c 	andi	r3,r2,1
 840481c:	00821074 	movhi	r2,2113
 8404820:	10a82904 	addi	r2,r2,-24412
 8404824:	10c00d15 	stw	r3,52(r2)
 8404828:	00821074 	movhi	r2,2113
 840482c:	10a82904 	addi	r2,r2,-24412
 8404830:	10800a17 	ldw	r2,40(r2)
 8404834:	10800304 	addi	r2,r2,12
 8404838:	10800017 	ldw	r2,0(r2)
 840483c:	1005d13a 	srai	r2,r2,4
 8404840:	10c003cc 	andi	r3,r2,15
 8404844:	00821074 	movhi	r2,2113
 8404848:	10a82904 	addi	r2,r2,-24412
 840484c:	10c00e15 	stw	r3,56(r2)
 8404850:	00821074 	movhi	r2,2113
 8404854:	10a82904 	addi	r2,r2,-24412
 8404858:	10800a17 	ldw	r2,40(r2)
 840485c:	10800304 	addi	r2,r2,12
 8404860:	10800017 	ldw	r2,0(r2)
 8404864:	1005d43a 	srai	r2,r2,16
 8404868:	1007883a 	mov	r3,r2
 840486c:	00bfffc4 	movi	r2,-1
 8404870:	1884703a 	and	r2,r3,r2
 8404874:	e0bfff45 	stb	r2,-3(fp)
 8404878:	00821074 	movhi	r2,2113
 840487c:	10a82904 	addi	r2,r2,-24412
 8404880:	10800a17 	ldw	r2,40(r2)
 8404884:	10800304 	addi	r2,r2,12
 8404888:	10800017 	ldw	r2,0(r2)
 840488c:	1005d63a 	srai	r2,r2,24
 8404890:	1007883a 	mov	r3,r2
 8404894:	00bfffc4 	movi	r2,-1
 8404898:	1884703a 	and	r2,r3,r2
 840489c:	e0bfff05 	stb	r2,-4(fp)
 84048a0:	00821074 	movhi	r2,2113
 84048a4:	10a82904 	addi	r2,r2,-24412
 84048a8:	10800e17 	ldw	r2,56(r2)
 84048ac:	10800058 	cmpnei	r2,r2,1
 84048b0:	1000041e 	bne	r2,zero,84048c4 <alt_sys_init+0x1c0>
 84048b4:	00821074 	movhi	r2,2113
 84048b8:	10a82904 	addi	r2,r2,-24412
 84048bc:	10001115 	stw	zero,68(r2)
 84048c0:	00000e06 	br	84048fc <alt_sys_init+0x1f8>
 84048c4:	00821074 	movhi	r2,2113
 84048c8:	10a82904 	addi	r2,r2,-24412
 84048cc:	10800e17 	ldw	r2,56(r2)
 84048d0:	10800098 	cmpnei	r2,r2,2
 84048d4:	1000051e 	bne	r2,zero,84048ec <alt_sys_init+0x1e8>
 84048d8:	00c21074 	movhi	r3,2113
 84048dc:	18e82904 	addi	r3,r3,-24412
 84048e0:	00800044 	movi	r2,1
 84048e4:	18801115 	stw	r2,68(r3)
 84048e8:	00000406 	br	84048fc <alt_sys_init+0x1f8>
 84048ec:	00c21074 	movhi	r3,2113
 84048f0:	18e82904 	addi	r3,r3,-24412
 84048f4:	00800084 	movi	r2,2
 84048f8:	18801115 	stw	r2,68(r3)
 84048fc:	e0ffff43 	ldbu	r3,-3(fp)
 8404900:	00800804 	movi	r2,32
 8404904:	10c7c83a 	sub	r3,r2,r3
 8404908:	00bfffc4 	movi	r2,-1
 840490c:	10c6d83a 	srl	r3,r2,r3
 8404910:	00821074 	movhi	r2,2113
 8404914:	10a82904 	addi	r2,r2,-24412
 8404918:	10c01215 	stw	r3,72(r2)
 840491c:	e0ffff43 	ldbu	r3,-3(fp)
 8404920:	00821074 	movhi	r2,2113
 8404924:	10a82904 	addi	r2,r2,-24412
 8404928:	10801117 	ldw	r2,68(r2)
 840492c:	1887883a 	add	r3,r3,r2
 8404930:	00821074 	movhi	r2,2113
 8404934:	10a82904 	addi	r2,r2,-24412
 8404938:	10c01315 	stw	r3,76(r2)
 840493c:	e0ffff03 	ldbu	r3,-4(fp)
 8404940:	00800804 	movi	r2,32
 8404944:	10c7c83a 	sub	r3,r2,r3
 8404948:	00bfffc4 	movi	r2,-1
 840494c:	10c6d83a 	srl	r3,r2,r3
 8404950:	00821074 	movhi	r2,2113
 8404954:	10a82904 	addi	r2,r2,-24412
 8404958:	10c01415 	stw	r3,80(r2)
 840495c:	01021074 	movhi	r4,2113
 8404960:	21282904 	addi	r4,r4,-24412
 8404964:	840497c0 	call	840497c <alt_dev_reg>
}
 8404968:	e037883a 	mov	sp,fp
 840496c:	dfc00117 	ldw	ra,4(sp)
 8404970:	df000017 	ldw	fp,0(sp)
 8404974:	dec00204 	addi	sp,sp,8
 8404978:	f800283a 	ret

0840497c <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
 840497c:	defffd04 	addi	sp,sp,-12
 8404980:	dfc00215 	stw	ra,8(sp)
 8404984:	df000115 	stw	fp,4(sp)
 8404988:	df000104 	addi	fp,sp,4
 840498c:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 8404990:	e13fff17 	ldw	r4,-4(fp)
 8404994:	01421074 	movhi	r5,2113
 8404998:	2968b404 	addi	r5,r5,-23856
 840499c:	84075180 	call	8407518 <alt_dev_llist_insert>
}
 84049a0:	e037883a 	mov	sp,fp
 84049a4:	dfc00117 	ldw	ra,4(sp)
 84049a8:	df000017 	ldw	fp,0(sp)
 84049ac:	dec00204 	addi	sp,sp,8
 84049b0:	f800283a 	ret

084049b4 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 84049b4:	defffa04 	addi	sp,sp,-24
 84049b8:	dfc00515 	stw	ra,20(sp)
 84049bc:	df000415 	stw	fp,16(sp)
 84049c0:	df000404 	addi	fp,sp,16
 84049c4:	e13ffd15 	stw	r4,-12(fp)
 84049c8:	e17ffe15 	stw	r5,-8(fp)
 84049cc:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 84049d0:	e0bffd17 	ldw	r2,-12(fp)
 84049d4:	10800017 	ldw	r2,0(r2)
 84049d8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 84049dc:	e0bffc17 	ldw	r2,-16(fp)
 84049e0:	11000a04 	addi	r4,r2,40
 84049e4:	e0bffd17 	ldw	r2,-12(fp)
 84049e8:	11c00217 	ldw	r7,8(r2)
 84049ec:	e17ffe17 	ldw	r5,-8(fp)
 84049f0:	e1bfff17 	ldw	r6,-4(fp)
 84049f4:	8404ffc0 	call	8404ffc <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
 84049f8:	e037883a 	mov	sp,fp
 84049fc:	dfc00117 	ldw	ra,4(sp)
 8404a00:	df000017 	ldw	fp,0(sp)
 8404a04:	dec00204 	addi	sp,sp,8
 8404a08:	f800283a 	ret

08404a0c <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 8404a0c:	defffa04 	addi	sp,sp,-24
 8404a10:	dfc00515 	stw	ra,20(sp)
 8404a14:	df000415 	stw	fp,16(sp)
 8404a18:	df000404 	addi	fp,sp,16
 8404a1c:	e13ffd15 	stw	r4,-12(fp)
 8404a20:	e17ffe15 	stw	r5,-8(fp)
 8404a24:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 8404a28:	e0bffd17 	ldw	r2,-12(fp)
 8404a2c:	10800017 	ldw	r2,0(r2)
 8404a30:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 8404a34:	e0bffc17 	ldw	r2,-16(fp)
 8404a38:	11000a04 	addi	r4,r2,40
 8404a3c:	e0bffd17 	ldw	r2,-12(fp)
 8404a40:	11c00217 	ldw	r7,8(r2)
 8404a44:	e17ffe17 	ldw	r5,-8(fp)
 8404a48:	e1bfff17 	ldw	r6,-4(fp)
 8404a4c:	84052200 	call	8405220 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
 8404a50:	e037883a 	mov	sp,fp
 8404a54:	dfc00117 	ldw	ra,4(sp)
 8404a58:	df000017 	ldw	fp,0(sp)
 8404a5c:	dec00204 	addi	sp,sp,8
 8404a60:	f800283a 	ret

08404a64 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
 8404a64:	defffc04 	addi	sp,sp,-16
 8404a68:	dfc00315 	stw	ra,12(sp)
 8404a6c:	df000215 	stw	fp,8(sp)
 8404a70:	df000204 	addi	fp,sp,8
 8404a74:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 8404a78:	e0bfff17 	ldw	r2,-4(fp)
 8404a7c:	10800017 	ldw	r2,0(r2)
 8404a80:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
 8404a84:	e0bffe17 	ldw	r2,-8(fp)
 8404a88:	11000a04 	addi	r4,r2,40
 8404a8c:	e0bfff17 	ldw	r2,-4(fp)
 8404a90:	11400217 	ldw	r5,8(r2)
 8404a94:	8404e940 	call	8404e94 <altera_avalon_jtag_uart_close>
}
 8404a98:	e037883a 	mov	sp,fp
 8404a9c:	dfc00117 	ldw	ra,4(sp)
 8404aa0:	df000017 	ldw	fp,0(sp)
 8404aa4:	dec00204 	addi	sp,sp,8
 8404aa8:	f800283a 	ret

08404aac <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
 8404aac:	defffa04 	addi	sp,sp,-24
 8404ab0:	dfc00515 	stw	ra,20(sp)
 8404ab4:	df000415 	stw	fp,16(sp)
 8404ab8:	df000404 	addi	fp,sp,16
 8404abc:	e13ffd15 	stw	r4,-12(fp)
 8404ac0:	e17ffe15 	stw	r5,-8(fp)
 8404ac4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
 8404ac8:	e0bffd17 	ldw	r2,-12(fp)
 8404acc:	10800017 	ldw	r2,0(r2)
 8404ad0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
 8404ad4:	e0bffc17 	ldw	r2,-16(fp)
 8404ad8:	11000a04 	addi	r4,r2,40
 8404adc:	e17ffe17 	ldw	r5,-8(fp)
 8404ae0:	e1bfff17 	ldw	r6,-4(fp)
 8404ae4:	8404f080 	call	8404f08 <altera_avalon_jtag_uart_ioctl>
}
 8404ae8:	e037883a 	mov	sp,fp
 8404aec:	dfc00117 	ldw	ra,4(sp)
 8404af0:	df000017 	ldw	fp,0(sp)
 8404af4:	dec00204 	addi	sp,sp,8
 8404af8:	f800283a 	ret

08404afc <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
 8404afc:	defffa04 	addi	sp,sp,-24
 8404b00:	dfc00515 	stw	ra,20(sp)
 8404b04:	df000415 	stw	fp,16(sp)
 8404b08:	df000404 	addi	fp,sp,16
 8404b0c:	e13ffd15 	stw	r4,-12(fp)
 8404b10:	e17ffe15 	stw	r5,-8(fp)
 8404b14:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 8404b18:	e0fffd17 	ldw	r3,-12(fp)
 8404b1c:	00800044 	movi	r2,1
 8404b20:	18800815 	stw	r2,32(r3)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
 8404b24:	e0bffd17 	ldw	r2,-12(fp)
 8404b28:	10800017 	ldw	r2,0(r2)
 8404b2c:	11000104 	addi	r4,r2,4
 8404b30:	e0bffd17 	ldw	r2,-12(fp)
 8404b34:	10800817 	ldw	r2,32(r2)
 8404b38:	1007883a 	mov	r3,r2
 8404b3c:	2005883a 	mov	r2,r4
 8404b40:	10c00035 	stwio	r3,0(r2)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
 8404b44:	e13ffe17 	ldw	r4,-8(fp)
 8404b48:	e17fff17 	ldw	r5,-4(fp)
 8404b4c:	d8000015 	stw	zero,0(sp)
 8404b50:	01821034 	movhi	r6,2112
 8404b54:	3192ef04 	addi	r6,r6,19388
 8404b58:	e1fffd17 	ldw	r7,-12(fp)
 8404b5c:	84077b80 	call	84077b8 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
 8404b60:	e0bffd17 	ldw	r2,-12(fp)
 8404b64:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
 8404b68:	e0bffd17 	ldw	r2,-12(fp)
 8404b6c:	11000204 	addi	r4,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 8404b70:	00821074 	movhi	r2,2113
 8404b74:	10aead04 	addi	r2,r2,-17740
 8404b78:	10800017 	ldw	r2,0(r2)
 8404b7c:	100b883a 	mov	r5,r2
 8404b80:	01821034 	movhi	r6,2112
 8404b84:	31937904 	addi	r6,r6,19940
 8404b88:	e1fffd17 	ldw	r7,-12(fp)
 8404b8c:	84071f80 	call	84071f8 <alt_alarm_start>
 8404b90:	1004403a 	cmpge	r2,r2,zero
 8404b94:	1000041e 	bne	r2,zero,8404ba8 <altera_avalon_jtag_uart_init+0xac>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
 8404b98:	e0fffd17 	ldw	r3,-12(fp)
 8404b9c:	00a00034 	movhi	r2,32768
 8404ba0:	10bfffc4 	addi	r2,r2,-1
 8404ba4:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
 8404ba8:	e037883a 	mov	sp,fp
 8404bac:	dfc00117 	ldw	ra,4(sp)
 8404bb0:	df000017 	ldw	fp,0(sp)
 8404bb4:	dec00204 	addi	sp,sp,8
 8404bb8:	f800283a 	ret

08404bbc <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
 8404bbc:	defff804 	addi	sp,sp,-32
 8404bc0:	df000715 	stw	fp,28(sp)
 8404bc4:	df000704 	addi	fp,sp,28
 8404bc8:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
 8404bcc:	e0bfff17 	ldw	r2,-4(fp)
 8404bd0:	e0bffe15 	stw	r2,-8(fp)
  unsigned int base = sp->base;
 8404bd4:	e0bffe17 	ldw	r2,-8(fp)
 8404bd8:	10800017 	ldw	r2,0(r2)
 8404bdc:	e0bffd15 	stw	r2,-12(fp)
 8404be0:	00000006 	br	8404be4 <altera_avalon_jtag_uart_irq+0x28>
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 8404be4:	e0bffd17 	ldw	r2,-12(fp)
 8404be8:	10800104 	addi	r2,r2,4
 8404bec:	10800037 	ldwio	r2,0(r2)
 8404bf0:	e0bffc15 	stw	r2,-16(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
 8404bf4:	e0bffc17 	ldw	r2,-16(fp)
 8404bf8:	1080c00c 	andi	r2,r2,768
 8404bfc:	1005003a 	cmpeq	r2,r2,zero
 8404c00:	1000741e 	bne	r2,zero,8404dd4 <altera_avalon_jtag_uart_irq+0x218>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
 8404c04:	e0bffc17 	ldw	r2,-16(fp)
 8404c08:	1080400c 	andi	r2,r2,256
 8404c0c:	1005003a 	cmpeq	r2,r2,zero
 8404c10:	1000351e 	bne	r2,zero,8404ce8 <altera_avalon_jtag_uart_irq+0x12c>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
 8404c14:	00800074 	movhi	r2,1
 8404c18:	e0bffb15 	stw	r2,-20(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 8404c1c:	e0bffe17 	ldw	r2,-8(fp)
 8404c20:	10800a17 	ldw	r2,40(r2)
 8404c24:	10800044 	addi	r2,r2,1
 8404c28:	1081ffcc 	andi	r2,r2,2047
 8404c2c:	e0bffa15 	stw	r2,-24(fp)
        if (next == sp->rx_out)
 8404c30:	e0bffe17 	ldw	r2,-8(fp)
 8404c34:	10c00b17 	ldw	r3,44(r2)
 8404c38:	e0bffa17 	ldw	r2,-24(fp)
 8404c3c:	18801626 	beq	r3,r2,8404c98 <altera_avalon_jtag_uart_irq+0xdc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 8404c40:	e0bffd17 	ldw	r2,-12(fp)
 8404c44:	10800037 	ldwio	r2,0(r2)
 8404c48:	e0bffb15 	stw	r2,-20(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
 8404c4c:	e0bffb17 	ldw	r2,-20(fp)
 8404c50:	10a0000c 	andi	r2,r2,32768
 8404c54:	1005003a 	cmpeq	r2,r2,zero
 8404c58:	10000f1e 	bne	r2,zero,8404c98 <altera_avalon_jtag_uart_irq+0xdc>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 8404c5c:	e0bffe17 	ldw	r2,-8(fp)
 8404c60:	10c00a17 	ldw	r3,40(r2)
 8404c64:	e0bffb17 	ldw	r2,-20(fp)
 8404c68:	1009883a 	mov	r4,r2
 8404c6c:	e0bffe17 	ldw	r2,-8(fp)
 8404c70:	1885883a 	add	r2,r3,r2
 8404c74:	10800e04 	addi	r2,r2,56
 8404c78:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 8404c7c:	e0bffe17 	ldw	r2,-8(fp)
 8404c80:	10800a17 	ldw	r2,40(r2)
 8404c84:	10800044 	addi	r2,r2,1
 8404c88:	10c1ffcc 	andi	r3,r2,2047
 8404c8c:	e0bffe17 	ldw	r2,-8(fp)
 8404c90:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
 8404c94:	003fe106 	br	8404c1c <altera_avalon_jtag_uart_irq+0x60>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
 8404c98:	e0bffb17 	ldw	r2,-20(fp)
 8404c9c:	10bfffec 	andhi	r2,r2,65535
 8404ca0:	1005003a 	cmpeq	r2,r2,zero
 8404ca4:	1000101e 	bne	r2,zero,8404ce8 <altera_avalon_jtag_uart_irq+0x12c>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 8404ca8:	e0bffe17 	ldw	r2,-8(fp)
 8404cac:	10c00817 	ldw	r3,32(r2)
 8404cb0:	00bfff84 	movi	r2,-2
 8404cb4:	1886703a 	and	r3,r3,r2
 8404cb8:	e0bffe17 	ldw	r2,-8(fp)
 8404cbc:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
 8404cc0:	e0bffd17 	ldw	r2,-12(fp)
 8404cc4:	11000104 	addi	r4,r2,4
 8404cc8:	e0bffe17 	ldw	r2,-8(fp)
 8404ccc:	10800817 	ldw	r2,32(r2)
 8404cd0:	1007883a 	mov	r3,r2
 8404cd4:	2005883a 	mov	r2,r4
 8404cd8:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 8404cdc:	e0bffd17 	ldw	r2,-12(fp)
 8404ce0:	10800104 	addi	r2,r2,4
 8404ce4:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
 8404ce8:	e0bffc17 	ldw	r2,-16(fp)
 8404cec:	1080800c 	andi	r2,r2,512
 8404cf0:	1005003a 	cmpeq	r2,r2,zero
 8404cf4:	103fbb1e 	bne	r2,zero,8404be4 <altera_avalon_jtag_uart_irq+0x28>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
 8404cf8:	e0bffc17 	ldw	r2,-16(fp)
 8404cfc:	10bfffec 	andhi	r2,r2,65535
 8404d00:	1004d43a 	srli	r2,r2,16
 8404d04:	e0bff915 	stw	r2,-28(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
 8404d08:	00001506 	br	8404d60 <altera_avalon_jtag_uart_irq+0x1a4>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
 8404d0c:	e13ffd17 	ldw	r4,-12(fp)
 8404d10:	e0bffe17 	ldw	r2,-8(fp)
 8404d14:	10c00d17 	ldw	r3,52(r2)
 8404d18:	e0bffe17 	ldw	r2,-8(fp)
 8404d1c:	1885883a 	add	r2,r3,r2
 8404d20:	10820e04 	addi	r2,r2,2104
 8404d24:	10800003 	ldbu	r2,0(r2)
 8404d28:	10c03fcc 	andi	r3,r2,255
 8404d2c:	18c0201c 	xori	r3,r3,128
 8404d30:	18ffe004 	addi	r3,r3,-128
 8404d34:	2005883a 	mov	r2,r4
 8404d38:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 8404d3c:	e0bffe17 	ldw	r2,-8(fp)
 8404d40:	10800d17 	ldw	r2,52(r2)
 8404d44:	10800044 	addi	r2,r2,1
 8404d48:	10c1ffcc 	andi	r3,r2,2047
 8404d4c:	e0bffe17 	ldw	r2,-8(fp)
 8404d50:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
 8404d54:	e0bff917 	ldw	r2,-28(fp)
 8404d58:	10bfffc4 	addi	r2,r2,-1
 8404d5c:	e0bff915 	stw	r2,-28(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
 8404d60:	e0bff917 	ldw	r2,-28(fp)
 8404d64:	1005003a 	cmpeq	r2,r2,zero
 8404d68:	1000051e 	bne	r2,zero,8404d80 <altera_avalon_jtag_uart_irq+0x1c4>
 8404d6c:	e0bffe17 	ldw	r2,-8(fp)
 8404d70:	10c00d17 	ldw	r3,52(r2)
 8404d74:	e0bffe17 	ldw	r2,-8(fp)
 8404d78:	10800c17 	ldw	r2,48(r2)
 8404d7c:	18bfe31e 	bne	r3,r2,8404d0c <altera_avalon_jtag_uart_irq+0x150>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
 8404d80:	e0bff917 	ldw	r2,-28(fp)
 8404d84:	1005003a 	cmpeq	r2,r2,zero
 8404d88:	103f961e 	bne	r2,zero,8404be4 <altera_avalon_jtag_uart_irq+0x28>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 8404d8c:	e0bffe17 	ldw	r2,-8(fp)
 8404d90:	10c00817 	ldw	r3,32(r2)
 8404d94:	00bfff44 	movi	r2,-3
 8404d98:	1886703a 	and	r3,r3,r2
 8404d9c:	e0bffe17 	ldw	r2,-8(fp)
 8404da0:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 8404da4:	e0bffe17 	ldw	r2,-8(fp)
 8404da8:	10800017 	ldw	r2,0(r2)
 8404dac:	11000104 	addi	r4,r2,4
 8404db0:	e0bffe17 	ldw	r2,-8(fp)
 8404db4:	10800817 	ldw	r2,32(r2)
 8404db8:	1007883a 	mov	r3,r2
 8404dbc:	2005883a 	mov	r2,r4
 8404dc0:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 8404dc4:	e0bffd17 	ldw	r2,-12(fp)
 8404dc8:	10800104 	addi	r2,r2,4
 8404dcc:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
 8404dd0:	003f8406 	br	8404be4 <altera_avalon_jtag_uart_irq+0x28>
}
 8404dd4:	e037883a 	mov	sp,fp
 8404dd8:	df000017 	ldw	fp,0(sp)
 8404ddc:	dec00104 	addi	sp,sp,4
 8404de0:	f800283a 	ret

08404de4 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
 8404de4:	defffc04 	addi	sp,sp,-16
 8404de8:	df000315 	stw	fp,12(sp)
 8404dec:	df000304 	addi	fp,sp,12
 8404df0:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
 8404df4:	e0bfff17 	ldw	r2,-4(fp)
 8404df8:	e0bffe15 	stw	r2,-8(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
 8404dfc:	e0bffe17 	ldw	r2,-8(fp)
 8404e00:	10800017 	ldw	r2,0(r2)
 8404e04:	10800104 	addi	r2,r2,4
 8404e08:	10800037 	ldwio	r2,0(r2)
 8404e0c:	e0bffd15 	stw	r2,-12(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
 8404e10:	e0bffd17 	ldw	r2,-12(fp)
 8404e14:	1081000c 	andi	r2,r2,1024
 8404e18:	1005003a 	cmpeq	r2,r2,zero
 8404e1c:	10000c1e 	bne	r2,zero,8404e50 <altera_avalon_jtag_uart_timeout+0x6c>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
 8404e20:	e0bffe17 	ldw	r2,-8(fp)
 8404e24:	10800017 	ldw	r2,0(r2)
 8404e28:	11000104 	addi	r4,r2,4
 8404e2c:	e0bffe17 	ldw	r2,-8(fp)
 8404e30:	10800817 	ldw	r2,32(r2)
 8404e34:	10810014 	ori	r2,r2,1024
 8404e38:	1007883a 	mov	r3,r2
 8404e3c:	2005883a 	mov	r2,r4
 8404e40:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
 8404e44:	e0bffe17 	ldw	r2,-8(fp)
 8404e48:	10000915 	stw	zero,36(r2)
 8404e4c:	00000a06 	br	8404e78 <altera_avalon_jtag_uart_timeout+0x94>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
 8404e50:	e0bffe17 	ldw	r2,-8(fp)
 8404e54:	10c00917 	ldw	r3,36(r2)
 8404e58:	00a00034 	movhi	r2,32768
 8404e5c:	10bfff04 	addi	r2,r2,-4
 8404e60:	10c00536 	bltu	r2,r3,8404e78 <altera_avalon_jtag_uart_timeout+0x94>
    sp->host_inactive++;
 8404e64:	e0bffe17 	ldw	r2,-8(fp)
 8404e68:	10800917 	ldw	r2,36(r2)
 8404e6c:	10c00044 	addi	r3,r2,1
 8404e70:	e0bffe17 	ldw	r2,-8(fp)
 8404e74:	10c00915 	stw	r3,36(r2)
 8404e78:	00821074 	movhi	r2,2113
 8404e7c:	10aead04 	addi	r2,r2,-17740
 8404e80:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
 8404e84:	e037883a 	mov	sp,fp
 8404e88:	df000017 	ldw	fp,0(sp)
 8404e8c:	dec00104 	addi	sp,sp,4
 8404e90:	f800283a 	ret

08404e94 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
 8404e94:	defffc04 	addi	sp,sp,-16
 8404e98:	df000315 	stw	fp,12(sp)
 8404e9c:	df000304 	addi	fp,sp,12
 8404ea0:	e13ffd15 	stw	r4,-12(fp)
 8404ea4:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 8404ea8:	00000706 	br	8404ec8 <altera_avalon_jtag_uart_close+0x34>
    if (flags & O_NONBLOCK) {
 8404eac:	e0bffe17 	ldw	r2,-8(fp)
 8404eb0:	1090000c 	andi	r2,r2,16384
 8404eb4:	1005003a 	cmpeq	r2,r2,zero
 8404eb8:	1000031e 	bne	r2,zero,8404ec8 <altera_avalon_jtag_uart_close+0x34>
      return -EWOULDBLOCK; 
 8404ebc:	00bffd44 	movi	r2,-11
 8404ec0:	e0bfff15 	stw	r2,-4(fp)
 8404ec4:	00000b06 	br	8404ef4 <altera_avalon_jtag_uart_close+0x60>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 8404ec8:	e0bffd17 	ldw	r2,-12(fp)
 8404ecc:	10c00d17 	ldw	r3,52(r2)
 8404ed0:	e0bffd17 	ldw	r2,-12(fp)
 8404ed4:	10800c17 	ldw	r2,48(r2)
 8404ed8:	18800526 	beq	r3,r2,8404ef0 <altera_avalon_jtag_uart_close+0x5c>
 8404edc:	e0bffd17 	ldw	r2,-12(fp)
 8404ee0:	10c00917 	ldw	r3,36(r2)
 8404ee4:	e0bffd17 	ldw	r2,-12(fp)
 8404ee8:	10800117 	ldw	r2,4(r2)
 8404eec:	18bfef36 	bltu	r3,r2,8404eac <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
 8404ef0:	e03fff15 	stw	zero,-4(fp)
 8404ef4:	e0bfff17 	ldw	r2,-4(fp)
}
 8404ef8:	e037883a 	mov	sp,fp
 8404efc:	df000017 	ldw	fp,0(sp)
 8404f00:	dec00104 	addi	sp,sp,4
 8404f04:	f800283a 	ret

08404f08 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
 8404f08:	defff804 	addi	sp,sp,-32
 8404f0c:	df000715 	stw	fp,28(sp)
 8404f10:	df000704 	addi	fp,sp,28
 8404f14:	e13ffb15 	stw	r4,-20(fp)
 8404f18:	e17ffc15 	stw	r5,-16(fp)
 8404f1c:	e1bffd15 	stw	r6,-12(fp)
  int rc = -ENOTTY;
 8404f20:	00bff9c4 	movi	r2,-25
 8404f24:	e0bffa15 	stw	r2,-24(fp)

  switch (req)
 8404f28:	e0bffc17 	ldw	r2,-16(fp)
 8404f2c:	e0bfff15 	stw	r2,-4(fp)
 8404f30:	e0ffff17 	ldw	r3,-4(fp)
 8404f34:	189a8060 	cmpeqi	r2,r3,27137
 8404f38:	1000041e 	bne	r2,zero,8404f4c <altera_avalon_jtag_uart_ioctl+0x44>
 8404f3c:	e0ffff17 	ldw	r3,-4(fp)
 8404f40:	189a80a0 	cmpeqi	r2,r3,27138
 8404f44:	10001b1e 	bne	r2,zero,8404fb4 <altera_avalon_jtag_uart_ioctl+0xac>
 8404f48:	00002706 	br	8404fe8 <altera_avalon_jtag_uart_ioctl+0xe0>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
 8404f4c:	e0bffb17 	ldw	r2,-20(fp)
 8404f50:	10c00117 	ldw	r3,4(r2)
 8404f54:	00a00034 	movhi	r2,32768
 8404f58:	10bfffc4 	addi	r2,r2,-1
 8404f5c:	18802226 	beq	r3,r2,8404fe8 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
 8404f60:	e0bffd17 	ldw	r2,-12(fp)
 8404f64:	10800017 	ldw	r2,0(r2)
 8404f68:	e0bff915 	stw	r2,-28(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
 8404f6c:	e0bff917 	ldw	r2,-28(fp)
 8404f70:	10800090 	cmplti	r2,r2,2
 8404f74:	1000071e 	bne	r2,zero,8404f94 <altera_avalon_jtag_uart_ioctl+0x8c>
 8404f78:	e0fff917 	ldw	r3,-28(fp)
 8404f7c:	00a00034 	movhi	r2,32768
 8404f80:	10bfffc4 	addi	r2,r2,-1
 8404f84:	18800326 	beq	r3,r2,8404f94 <altera_avalon_jtag_uart_ioctl+0x8c>
 8404f88:	e0bff917 	ldw	r2,-28(fp)
 8404f8c:	e0bffe15 	stw	r2,-8(fp)
 8404f90:	00000306 	br	8404fa0 <altera_avalon_jtag_uart_ioctl+0x98>
 8404f94:	00e00034 	movhi	r3,32768
 8404f98:	18ffff84 	addi	r3,r3,-2
 8404f9c:	e0fffe15 	stw	r3,-8(fp)
 8404fa0:	e0bffb17 	ldw	r2,-20(fp)
 8404fa4:	e0fffe17 	ldw	r3,-8(fp)
 8404fa8:	10c00115 	stw	r3,4(r2)
      rc = 0;
 8404fac:	e03ffa15 	stw	zero,-24(fp)
    }
    break;
 8404fb0:	00000d06 	br	8404fe8 <altera_avalon_jtag_uart_ioctl+0xe0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
 8404fb4:	e0bffb17 	ldw	r2,-20(fp)
 8404fb8:	10c00117 	ldw	r3,4(r2)
 8404fbc:	00a00034 	movhi	r2,32768
 8404fc0:	10bfffc4 	addi	r2,r2,-1
 8404fc4:	18800826 	beq	r3,r2,8404fe8 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
 8404fc8:	e13ffd17 	ldw	r4,-12(fp)
 8404fcc:	e0bffb17 	ldw	r2,-20(fp)
 8404fd0:	10c00917 	ldw	r3,36(r2)
 8404fd4:	e0bffb17 	ldw	r2,-20(fp)
 8404fd8:	10800117 	ldw	r2,4(r2)
 8404fdc:	1885803a 	cmpltu	r2,r3,r2
 8404fe0:	20800015 	stw	r2,0(r4)
      rc = 0;
 8404fe4:	e03ffa15 	stw	zero,-24(fp)

  default:
    break;
  }

  return rc;
 8404fe8:	e0bffa17 	ldw	r2,-24(fp)
}
 8404fec:	e037883a 	mov	sp,fp
 8404ff0:	df000017 	ldw	fp,0(sp)
 8404ff4:	dec00104 	addi	sp,sp,4
 8404ff8:	f800283a 	ret

08404ffc <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
 8404ffc:	defff204 	addi	sp,sp,-56
 8405000:	dfc00d15 	stw	ra,52(sp)
 8405004:	df000c15 	stw	fp,48(sp)
 8405008:	df000c04 	addi	fp,sp,48
 840500c:	e13ffb15 	stw	r4,-20(fp)
 8405010:	e17ffc15 	stw	r5,-16(fp)
 8405014:	e1bffd15 	stw	r6,-12(fp)
 8405018:	e1fffe15 	stw	r7,-8(fp)
  char * ptr = buffer;
 840501c:	e0bffc17 	ldw	r2,-16(fp)
 8405020:	e0bffa15 	stw	r2,-24(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 8405024:	00004806 	br	8405148 <altera_avalon_jtag_uart_read+0x14c>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
 8405028:	e0bffb17 	ldw	r2,-20(fp)
 840502c:	10800a17 	ldw	r2,40(r2)
 8405030:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
 8405034:	e0bffb17 	ldw	r2,-20(fp)
 8405038:	10800b17 	ldw	r2,44(r2)
 840503c:	e0bff615 	stw	r2,-40(fp)

      if (in >= out)
 8405040:	e0fff717 	ldw	r3,-36(fp)
 8405044:	e0bff617 	ldw	r2,-40(fp)
 8405048:	18800536 	bltu	r3,r2,8405060 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
 840504c:	e0bff717 	ldw	r2,-36(fp)
 8405050:	e0fff617 	ldw	r3,-40(fp)
 8405054:	10c5c83a 	sub	r2,r2,r3
 8405058:	e0bff815 	stw	r2,-32(fp)
 840505c:	00000406 	br	8405070 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
 8405060:	00820004 	movi	r2,2048
 8405064:	e0fff617 	ldw	r3,-40(fp)
 8405068:	10c5c83a 	sub	r2,r2,r3
 840506c:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
 8405070:	e0bff817 	ldw	r2,-32(fp)
 8405074:	1005003a 	cmpeq	r2,r2,zero
 8405078:	10001f1e 	bne	r2,zero,84050f8 <altera_avalon_jtag_uart_read+0xfc>
        break; /* No more data available */

      if (n > space)
 840507c:	e0fffd17 	ldw	r3,-12(fp)
 8405080:	e0bff817 	ldw	r2,-32(fp)
 8405084:	1880022e 	bgeu	r3,r2,8405090 <altera_avalon_jtag_uart_read+0x94>
        n = space;
 8405088:	e0bffd17 	ldw	r2,-12(fp)
 840508c:	e0bff815 	stw	r2,-32(fp)

      memcpy(ptr, sp->rx_buf + out, n);
 8405090:	e0bffb17 	ldw	r2,-20(fp)
 8405094:	10c00e04 	addi	r3,r2,56
 8405098:	e0bff617 	ldw	r2,-40(fp)
 840509c:	1887883a 	add	r3,r3,r2
 84050a0:	e0bffa17 	ldw	r2,-24(fp)
 84050a4:	1009883a 	mov	r4,r2
 84050a8:	180b883a 	mov	r5,r3
 84050ac:	e1bff817 	ldw	r6,-32(fp)
 84050b0:	84083d00 	call	84083d0 <memcpy>
      ptr   += n;
 84050b4:	e0fff817 	ldw	r3,-32(fp)
 84050b8:	e0bffa17 	ldw	r2,-24(fp)
 84050bc:	10c5883a 	add	r2,r2,r3
 84050c0:	e0bffa15 	stw	r2,-24(fp)
      space -= n;
 84050c4:	e0fffd17 	ldw	r3,-12(fp)
 84050c8:	e0bff817 	ldw	r2,-32(fp)
 84050cc:	1885c83a 	sub	r2,r3,r2
 84050d0:	e0bffd15 	stw	r2,-12(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 84050d4:	e0fff617 	ldw	r3,-40(fp)
 84050d8:	e0bff817 	ldw	r2,-32(fp)
 84050dc:	1885883a 	add	r2,r3,r2
 84050e0:	10c1ffcc 	andi	r3,r2,2047
 84050e4:	e0bffb17 	ldw	r2,-20(fp)
 84050e8:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
 84050ec:	e0bffd17 	ldw	r2,-12(fp)
 84050f0:	10800048 	cmpgei	r2,r2,1
 84050f4:	103fcc1e 	bne	r2,zero,8405028 <altera_avalon_jtag_uart_read+0x2c>

    /* If we read any data then return it */
    if (ptr != buffer)
 84050f8:	e0fffa17 	ldw	r3,-24(fp)
 84050fc:	e0bffc17 	ldw	r2,-16(fp)
 8405100:	1880141e 	bne	r3,r2,8405154 <altera_avalon_jtag_uart_read+0x158>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
 8405104:	e0bffe17 	ldw	r2,-8(fp)
 8405108:	1090000c 	andi	r2,r2,16384
 840510c:	1004c03a 	cmpne	r2,r2,zero
 8405110:	1000101e 	bne	r2,zero,8405154 <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
 8405114:	e0bffb17 	ldw	r2,-20(fp)
 8405118:	10c00a17 	ldw	r3,40(r2)
 840511c:	e0bff717 	ldw	r2,-36(fp)
 8405120:	1880051e 	bne	r3,r2,8405138 <altera_avalon_jtag_uart_read+0x13c>
 8405124:	e0bffb17 	ldw	r2,-20(fp)
 8405128:	10c00917 	ldw	r3,36(r2)
 840512c:	e0bffb17 	ldw	r2,-20(fp)
 8405130:	10800117 	ldw	r2,4(r2)
 8405134:	18bff736 	bltu	r3,r2,8405114 <altera_avalon_jtag_uart_read+0x118>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
 8405138:	e0bffb17 	ldw	r2,-20(fp)
 840513c:	10c00a17 	ldw	r3,40(r2)
 8405140:	e0bff717 	ldw	r2,-36(fp)
 8405144:	18800326 	beq	r3,r2,8405154 <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 8405148:	e0bffd17 	ldw	r2,-12(fp)
 840514c:	10800048 	cmpgei	r2,r2,1
 8405150:	103fb51e 	bne	r2,zero,8405028 <altera_avalon_jtag_uart_read+0x2c>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
 8405154:	e0fffa17 	ldw	r3,-24(fp)
 8405158:	e0bffc17 	ldw	r2,-16(fp)
 840515c:	18801926 	beq	r3,r2,84051c4 <altera_avalon_jtag_uart_read+0x1c8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8405160:	0005303a 	rdctl	r2,status
 8405164:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8405168:	e0fff517 	ldw	r3,-44(fp)
 840516c:	00bfff84 	movi	r2,-2
 8405170:	1884703a 	and	r2,r3,r2
 8405174:	1001703a 	wrctl	status,r2
  
  return context;
 8405178:	e0bff517 	ldw	r2,-44(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
 840517c:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 8405180:	e0bffb17 	ldw	r2,-20(fp)
 8405184:	10800817 	ldw	r2,32(r2)
 8405188:	10c00054 	ori	r3,r2,1
 840518c:	e0bffb17 	ldw	r2,-20(fp)
 8405190:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 8405194:	e0bffb17 	ldw	r2,-20(fp)
 8405198:	10800017 	ldw	r2,0(r2)
 840519c:	11000104 	addi	r4,r2,4
 84051a0:	e0bffb17 	ldw	r2,-20(fp)
 84051a4:	10800817 	ldw	r2,32(r2)
 84051a8:	1007883a 	mov	r3,r2
 84051ac:	2005883a 	mov	r2,r4
 84051b0:	10c00035 	stwio	r3,0(r2)
 84051b4:	e0bff917 	ldw	r2,-28(fp)
 84051b8:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 84051bc:	e0bff417 	ldw	r2,-48(fp)
 84051c0:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
 84051c4:	e0fffa17 	ldw	r3,-24(fp)
 84051c8:	e0bffc17 	ldw	r2,-16(fp)
 84051cc:	18800526 	beq	r3,r2,84051e4 <altera_avalon_jtag_uart_read+0x1e8>
    return ptr - buffer;
 84051d0:	e0fffa17 	ldw	r3,-24(fp)
 84051d4:	e0bffc17 	ldw	r2,-16(fp)
 84051d8:	1887c83a 	sub	r3,r3,r2
 84051dc:	e0ffff15 	stw	r3,-4(fp)
 84051e0:	00000906 	br	8405208 <altera_avalon_jtag_uart_read+0x20c>
  else if (flags & O_NONBLOCK)
 84051e4:	e0bffe17 	ldw	r2,-8(fp)
 84051e8:	1090000c 	andi	r2,r2,16384
 84051ec:	1005003a 	cmpeq	r2,r2,zero
 84051f0:	1000031e 	bne	r2,zero,8405200 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
 84051f4:	00bffd44 	movi	r2,-11
 84051f8:	e0bfff15 	stw	r2,-4(fp)
 84051fc:	00000206 	br	8405208 <altera_avalon_jtag_uart_read+0x20c>
  else
    return -EIO;
 8405200:	00bffec4 	movi	r2,-5
 8405204:	e0bfff15 	stw	r2,-4(fp)
 8405208:	e0bfff17 	ldw	r2,-4(fp)
}
 840520c:	e037883a 	mov	sp,fp
 8405210:	dfc00117 	ldw	ra,4(sp)
 8405214:	df000017 	ldw	fp,0(sp)
 8405218:	dec00204 	addi	sp,sp,8
 840521c:	f800283a 	ret

08405220 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 8405220:	defff204 	addi	sp,sp,-56
 8405224:	dfc00d15 	stw	ra,52(sp)
 8405228:	df000c15 	stw	fp,48(sp)
 840522c:	df000c04 	addi	fp,sp,48
 8405230:	e13ffb15 	stw	r4,-20(fp)
 8405234:	e17ffc15 	stw	r5,-16(fp)
 8405238:	e1bffd15 	stw	r6,-12(fp)
 840523c:	e1fffe15 	stw	r7,-8(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
 8405240:	e03ff915 	stw	zero,-28(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
 8405244:	e0bffc17 	ldw	r2,-16(fp)
 8405248:	e0bff615 	stw	r2,-40(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 840524c:	00003a06 	br	8405338 <altera_avalon_jtag_uart_write+0x118>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
 8405250:	e0bffb17 	ldw	r2,-20(fp)
 8405254:	10800c17 	ldw	r2,48(r2)
 8405258:	e0bffa15 	stw	r2,-24(fp)
      out = sp->tx_out;
 840525c:	e0bffb17 	ldw	r2,-20(fp)
 8405260:	10800d17 	ldw	r2,52(r2)
 8405264:	e0bff915 	stw	r2,-28(fp)

      if (in < out)
 8405268:	e0fffa17 	ldw	r3,-24(fp)
 840526c:	e0bff917 	ldw	r2,-28(fp)
 8405270:	1880062e 	bgeu	r3,r2,840528c <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
 8405274:	e0fff917 	ldw	r3,-28(fp)
 8405278:	e0bffa17 	ldw	r2,-24(fp)
 840527c:	1885c83a 	sub	r2,r3,r2
 8405280:	10bfffc4 	addi	r2,r2,-1
 8405284:	e0bff815 	stw	r2,-32(fp)
 8405288:	00000c06 	br	84052bc <altera_avalon_jtag_uart_write+0x9c>
      else if (out > 0)
 840528c:	e0bff917 	ldw	r2,-28(fp)
 8405290:	1005003a 	cmpeq	r2,r2,zero
 8405294:	1000051e 	bne	r2,zero,84052ac <altera_avalon_jtag_uart_write+0x8c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
 8405298:	00820004 	movi	r2,2048
 840529c:	e0fffa17 	ldw	r3,-24(fp)
 84052a0:	10c5c83a 	sub	r2,r2,r3
 84052a4:	e0bff815 	stw	r2,-32(fp)
 84052a8:	00000406 	br	84052bc <altera_avalon_jtag_uart_write+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
 84052ac:	0081ffc4 	movi	r2,2047
 84052b0:	e0fffa17 	ldw	r3,-24(fp)
 84052b4:	10c5c83a 	sub	r2,r2,r3
 84052b8:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
 84052bc:	e0bff817 	ldw	r2,-32(fp)
 84052c0:	1005003a 	cmpeq	r2,r2,zero
 84052c4:	10001f1e 	bne	r2,zero,8405344 <altera_avalon_jtag_uart_write+0x124>
        break;

      if (n > count)
 84052c8:	e0fffd17 	ldw	r3,-12(fp)
 84052cc:	e0bff817 	ldw	r2,-32(fp)
 84052d0:	1880022e 	bgeu	r3,r2,84052dc <altera_avalon_jtag_uart_write+0xbc>
        n = count;
 84052d4:	e0bffd17 	ldw	r2,-12(fp)
 84052d8:	e0bff815 	stw	r2,-32(fp)

      memcpy(sp->tx_buf + in, ptr, n);
 84052dc:	e0bffb17 	ldw	r2,-20(fp)
 84052e0:	10c20e04 	addi	r3,r2,2104
 84052e4:	e0bffa17 	ldw	r2,-24(fp)
 84052e8:	1885883a 	add	r2,r3,r2
 84052ec:	e0fffc17 	ldw	r3,-16(fp)
 84052f0:	1009883a 	mov	r4,r2
 84052f4:	180b883a 	mov	r5,r3
 84052f8:	e1bff817 	ldw	r6,-32(fp)
 84052fc:	84083d00 	call	84083d0 <memcpy>
      ptr   += n;
 8405300:	e0fff817 	ldw	r3,-32(fp)
 8405304:	e0bffc17 	ldw	r2,-16(fp)
 8405308:	10c5883a 	add	r2,r2,r3
 840530c:	e0bffc15 	stw	r2,-16(fp)
      count -= n;
 8405310:	e0fffd17 	ldw	r3,-12(fp)
 8405314:	e0bff817 	ldw	r2,-32(fp)
 8405318:	1885c83a 	sub	r2,r3,r2
 840531c:	e0bffd15 	stw	r2,-12(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 8405320:	e0fffa17 	ldw	r3,-24(fp)
 8405324:	e0bff817 	ldw	r2,-32(fp)
 8405328:	1885883a 	add	r2,r3,r2
 840532c:	10c1ffcc 	andi	r3,r2,2047
 8405330:	e0bffb17 	ldw	r2,-20(fp)
 8405334:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 8405338:	e0bffd17 	ldw	r2,-12(fp)
 840533c:	10800048 	cmpgei	r2,r2,1
 8405340:	103fc31e 	bne	r2,zero,8405250 <altera_avalon_jtag_uart_write+0x30>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8405344:	0005303a 	rdctl	r2,status
 8405348:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 840534c:	e0fff517 	ldw	r3,-44(fp)
 8405350:	00bfff84 	movi	r2,-2
 8405354:	1884703a 	and	r2,r3,r2
 8405358:	1001703a 	wrctl	status,r2
  
  return context;
 840535c:	e0bff517 	ldw	r2,-44(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
 8405360:	e0bff715 	stw	r2,-36(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 8405364:	e0bffb17 	ldw	r2,-20(fp)
 8405368:	10800817 	ldw	r2,32(r2)
 840536c:	10c00094 	ori	r3,r2,2
 8405370:	e0bffb17 	ldw	r2,-20(fp)
 8405374:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 8405378:	e0bffb17 	ldw	r2,-20(fp)
 840537c:	10800017 	ldw	r2,0(r2)
 8405380:	11000104 	addi	r4,r2,4
 8405384:	e0bffb17 	ldw	r2,-20(fp)
 8405388:	10800817 	ldw	r2,32(r2)
 840538c:	1007883a 	mov	r3,r2
 8405390:	2005883a 	mov	r2,r4
 8405394:	10c00035 	stwio	r3,0(r2)
 8405398:	e0bff717 	ldw	r2,-36(fp)
 840539c:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 84053a0:	e0bff417 	ldw	r2,-48(fp)
 84053a4:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
 84053a8:	e0bffd17 	ldw	r2,-12(fp)
 84053ac:	10800050 	cmplti	r2,r2,1
 84053b0:	1000111e 	bne	r2,zero,84053f8 <altera_avalon_jtag_uart_write+0x1d8>
    {
      if (flags & O_NONBLOCK)
 84053b4:	e0bffe17 	ldw	r2,-8(fp)
 84053b8:	1090000c 	andi	r2,r2,16384
 84053bc:	1004c03a 	cmpne	r2,r2,zero
 84053c0:	1000101e 	bne	r2,zero,8405404 <altera_avalon_jtag_uart_write+0x1e4>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
 84053c4:	e0bffb17 	ldw	r2,-20(fp)
 84053c8:	10c00d17 	ldw	r3,52(r2)
 84053cc:	e0bff917 	ldw	r2,-28(fp)
 84053d0:	1880051e 	bne	r3,r2,84053e8 <altera_avalon_jtag_uart_write+0x1c8>
 84053d4:	e0bffb17 	ldw	r2,-20(fp)
 84053d8:	10c00917 	ldw	r3,36(r2)
 84053dc:	e0bffb17 	ldw	r2,-20(fp)
 84053e0:	10800117 	ldw	r2,4(r2)
 84053e4:	18bff736 	bltu	r3,r2,84053c4 <altera_avalon_jtag_uart_write+0x1a4>
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
 84053e8:	e0bffb17 	ldw	r2,-20(fp)
 84053ec:	10c00d17 	ldw	r3,52(r2)
 84053f0:	e0bff917 	ldw	r2,-28(fp)
 84053f4:	18800326 	beq	r3,r2,8405404 <altera_avalon_jtag_uart_write+0x1e4>
        break;
    }
  }
  while (count > 0);
 84053f8:	e0bffd17 	ldw	r2,-12(fp)
 84053fc:	10800048 	cmpgei	r2,r2,1
 8405400:	103fcd1e 	bne	r2,zero,8405338 <altera_avalon_jtag_uart_write+0x118>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
 8405404:	e0fffc17 	ldw	r3,-16(fp)
 8405408:	e0bff617 	ldw	r2,-40(fp)
 840540c:	18800526 	beq	r3,r2,8405424 <altera_avalon_jtag_uart_write+0x204>
    return ptr - start;
 8405410:	e0fffc17 	ldw	r3,-16(fp)
 8405414:	e0bff617 	ldw	r2,-40(fp)
 8405418:	1887c83a 	sub	r3,r3,r2
 840541c:	e0ffff15 	stw	r3,-4(fp)
 8405420:	00000906 	br	8405448 <altera_avalon_jtag_uart_write+0x228>
  else if (flags & O_NONBLOCK)
 8405424:	e0bffe17 	ldw	r2,-8(fp)
 8405428:	1090000c 	andi	r2,r2,16384
 840542c:	1005003a 	cmpeq	r2,r2,zero
 8405430:	1000031e 	bne	r2,zero,8405440 <altera_avalon_jtag_uart_write+0x220>
    return -EWOULDBLOCK;
 8405434:	00bffd44 	movi	r2,-11
 8405438:	e0bfff15 	stw	r2,-4(fp)
 840543c:	00000206 	br	8405448 <altera_avalon_jtag_uart_write+0x228>
  else
    return -EIO; /* Host not connected */
 8405440:	00bffec4 	movi	r2,-5
 8405444:	e0bfff15 	stw	r2,-4(fp)
 8405448:	e0bfff17 	ldw	r2,-4(fp)
}
 840544c:	e037883a 	mov	sp,fp
 8405450:	dfc00117 	ldw	ra,4(sp)
 8405454:	df000017 	ldw	fp,0(sp)
 8405458:	dec00204 	addi	sp,sp,8
 840545c:	f800283a 	ret

08405460 <alt_avalon_mailbox_init>:

/*
 * Register a Mutex device
 */
int alt_avalon_mailbox_init (alt_mailbox_dev* dev)
{
 8405460:	defffa04 	addi	sp,sp,-24
 8405464:	dfc00515 	stw	ra,20(sp)
 8405468:	df000415 	stw	fp,16(sp)
 840546c:	df000404 	addi	fp,sp,16
 8405470:	e13fff15 	stw	r4,-4(fp)
  int ret_code;
  alt_mutex_dev* write_mutex, *read_mutex;
  extern alt_llist alt_mailbox_list;

  ret_code = alt_avalon_mutex_reg( &dev->write_mutex );
 8405474:	e0bfff17 	ldw	r2,-4(fp)
 8405478:	11000704 	addi	r4,r2,28
 840547c:	84055b80 	call	84055b8 <alt_avalon_mutex_reg>
 8405480:	e0bffe15 	stw	r2,-8(fp)

  if (!ret_code)
 8405484:	e0bffe17 	ldw	r2,-8(fp)
 8405488:	1004c03a 	cmpne	r2,r2,zero
 840548c:	1000041e 	bne	r2,zero,84054a0 <alt_avalon_mailbox_init+0x40>
  {
    ret_code = alt_avalon_mutex_reg( &dev->read_mutex );
 8405490:	e0bfff17 	ldw	r2,-4(fp)
 8405494:	11000b04 	addi	r4,r2,44
 8405498:	84055b80 	call	84055b8 <alt_avalon_mutex_reg>
 840549c:	e0bffe15 	stw	r2,-8(fp)
  }

  if (!ret_code)
 84054a0:	e0bffe17 	ldw	r2,-8(fp)
 84054a4:	1004c03a 	cmpne	r2,r2,zero
 84054a8:	1000041e 	bne	r2,zero,84054bc <alt_avalon_mailbox_init+0x5c>
  {
    ret_code = alt_dev_llist_insert((alt_dev_llist*) dev, &alt_mailbox_list);
 84054ac:	e13fff17 	ldw	r4,-4(fp)
 84054b0:	d1600604 	addi	r5,gp,-32744
 84054b4:	84075180 	call	8407518 <alt_dev_llist_insert>
 84054b8:	e0bffe15 	stw	r2,-8(fp)
  }

  if (!ret_code)
 84054bc:	e0bffe17 	ldw	r2,-8(fp)
 84054c0:	1004c03a 	cmpne	r2,r2,zero
 84054c4:	1000361e 	bne	r2,zero,84055a0 <alt_avalon_mailbox_init+0x140>
  {
    write_mutex = altera_avalon_mutex_open(dev->write_mutex.name);
 84054c8:	e0bfff17 	ldw	r2,-4(fp)
 84054cc:	11000917 	ldw	r4,36(r2)
 84054d0:	8405a040 	call	8405a04 <altera_avalon_mutex_open>
 84054d4:	e0bffd15 	stw	r2,-12(fp)
    if (write_mutex)
 84054d8:	e0bffd17 	ldw	r2,-12(fp)
 84054dc:	1005003a 	cmpeq	r2,r2,zero
 84054e0:	10002f1e 	bne	r2,zero,84055a0 <alt_avalon_mailbox_init+0x140>
    {
      read_mutex = altera_avalon_mutex_open(dev->read_mutex.name);
 84054e4:	e0bfff17 	ldw	r2,-4(fp)
 84054e8:	11000d17 	ldw	r4,52(r2)
 84054ec:	8405a040 	call	8405a04 <altera_avalon_mutex_open>
 84054f0:	e0bffc15 	stw	r2,-16(fp)
      if (read_mutex)
 84054f4:	e0bffc17 	ldw	r2,-16(fp)
 84054f8:	1005003a 	cmpeq	r2,r2,zero
 84054fc:	1000281e 	bne	r2,zero,84055a0 <alt_avalon_mailbox_init+0x140>
      {
        while (altera_avalon_mutex_first_lock(write_mutex))
 8405500:	00000f06 	br	8405540 <alt_avalon_mailbox_init+0xe0>
        {
          if (!altera_avalon_mutex_trylock(write_mutex, 1))
 8405504:	e13ffd17 	ldw	r4,-12(fp)
 8405508:	01400044 	movi	r5,1
 840550c:	8405b1c0 	call	8405b1c <altera_avalon_mutex_trylock>
 8405510:	1004c03a 	cmpne	r2,r2,zero
 8405514:	10000a1e 	bne	r2,zero,8405540 <alt_avalon_mailbox_init+0xe0>
          {
            IOWR((alt_u32)(dev->write_ptr), 0,
 8405518:	e0bfff17 	ldw	r2,-4(fp)
 840551c:	10800317 	ldw	r2,12(r2)
 8405520:	1009883a 	mov	r4,r2
 8405524:	e0bfff17 	ldw	r2,-4(fp)
 8405528:	10800517 	ldw	r2,20(r2)
 840552c:	1007883a 	mov	r3,r2
 8405530:	2005883a 	mov	r2,r4
 8405534:	10c00035 	stwio	r3,0(r2)
              (alt_u32) dev->mailbox_mem_start_ptr);
            altera_avalon_mutex_unlock(write_mutex);
 8405538:	e13ffd17 	ldw	r4,-12(fp)
 840553c:	8405b5c0 	call	8405b5c <altera_avalon_mutex_unlock>
    if (write_mutex)
    {
      read_mutex = altera_avalon_mutex_open(dev->read_mutex.name);
      if (read_mutex)
      {
        while (altera_avalon_mutex_first_lock(write_mutex))
 8405540:	e13ffd17 	ldw	r4,-12(fp)
 8405544:	8405c340 	call	8405c34 <altera_avalon_mutex_first_lock>
 8405548:	1004c03a 	cmpne	r2,r2,zero
 840554c:	103fed1e 	bne	r2,zero,8405504 <alt_avalon_mailbox_init+0xa4>
              (alt_u32) dev->mailbox_mem_start_ptr);
            altera_avalon_mutex_unlock(write_mutex);
          }
        }

        while (altera_avalon_mutex_first_lock(read_mutex))
 8405550:	00000f06 	br	8405590 <alt_avalon_mailbox_init+0x130>
        {
          if (!altera_avalon_mutex_trylock(read_mutex, 1))
 8405554:	e13ffc17 	ldw	r4,-16(fp)
 8405558:	01400044 	movi	r5,1
 840555c:	8405b1c0 	call	8405b1c <altera_avalon_mutex_trylock>
 8405560:	1004c03a 	cmpne	r2,r2,zero
 8405564:	10000a1e 	bne	r2,zero,8405590 <alt_avalon_mailbox_init+0x130>
          {
            IOWR((alt_u32)(dev->read_ptr), 0,
 8405568:	e0bfff17 	ldw	r2,-4(fp)
 840556c:	10800417 	ldw	r2,16(r2)
 8405570:	1009883a 	mov	r4,r2
 8405574:	e0bfff17 	ldw	r2,-4(fp)
 8405578:	10800517 	ldw	r2,20(r2)
 840557c:	1007883a 	mov	r3,r2
 8405580:	2005883a 	mov	r2,r4
 8405584:	10c00035 	stwio	r3,0(r2)
              (alt_u32) dev->mailbox_mem_start_ptr);
            altera_avalon_mutex_unlock(read_mutex);
 8405588:	e13ffc17 	ldw	r4,-16(fp)
 840558c:	8405b5c0 	call	8405b5c <altera_avalon_mutex_unlock>
              (alt_u32) dev->mailbox_mem_start_ptr);
            altera_avalon_mutex_unlock(write_mutex);
          }
        }

        while (altera_avalon_mutex_first_lock(read_mutex))
 8405590:	e13ffc17 	ldw	r4,-16(fp)
 8405594:	8405c340 	call	8405c34 <altera_avalon_mutex_first_lock>
 8405598:	1004c03a 	cmpne	r2,r2,zero
 840559c:	103fed1e 	bne	r2,zero,8405554 <alt_avalon_mailbox_init+0xf4>
          }
        }
      }
    }
  }
  return ret_code;
 84055a0:	e0bffe17 	ldw	r2,-8(fp)
}
 84055a4:	e037883a 	mov	sp,fp
 84055a8:	dfc00117 	ldw	ra,4(sp)
 84055ac:	df000017 	ldw	fp,0(sp)
 84055b0:	dec00204 	addi	sp,sp,8
 84055b4:	f800283a 	ret

084055b8 <alt_avalon_mutex_reg>:
/*
 * Register a Mutex device
 */

static ALT_INLINE int alt_avalon_mutex_reg (alt_mutex_dev* dev)
{
 84055b8:	defffc04 	addi	sp,sp,-16
 84055bc:	dfc00315 	stw	ra,12(sp)
 84055c0:	df000215 	stw	fp,8(sp)
 84055c4:	df000204 	addi	fp,sp,8
 84055c8:	e13fff15 	stw	r4,-4(fp)
 * HAL.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_no_error (void)
{
  return 0;
 84055cc:	0005883a 	mov	r2,zero
  int ret_code;
  extern alt_llist alt_mutex_list;
  ret_code = ALT_SEM_CREATE (&dev->lock, 1);
 84055d0:	e0bffe15 	stw	r2,-8(fp)
  if (!ret_code)
 84055d4:	e0bffe17 	ldw	r2,-8(fp)
 84055d8:	1004c03a 	cmpne	r2,r2,zero
 84055dc:	1000061e 	bne	r2,zero,84055f8 <alt_avalon_mutex_reg+0x40>
  {
    ret_code = alt_dev_llist_insert((alt_dev_llist*) dev, &alt_mutex_list);
 84055e0:	e13fff17 	ldw	r4,-4(fp)
 84055e4:	01421074 	movhi	r5,2113
 84055e8:	2968b004 	addi	r5,r5,-23872
 84055ec:	84075180 	call	8407518 <alt_dev_llist_insert>
 84055f0:	e0bffe15 	stw	r2,-8(fp)
 84055f4:	00000506 	br	840560c <alt_avalon_mutex_reg+0x54>
  }
  else
  {
    ALT_ERRNO = ENOMEM;
 84055f8:	84056240 	call	8405624 <alt_get_errno>
 84055fc:	00c00304 	movi	r3,12
 8405600:	10c00015 	stw	r3,0(r2)
    ret_code = -ENOMEM;
 8405604:	00bffd04 	movi	r2,-12
 8405608:	e0bffe15 	stw	r2,-8(fp)
  }

  return ret_code;
 840560c:	e0bffe17 	ldw	r2,-8(fp)
}
 8405610:	e037883a 	mov	sp,fp
 8405614:	dfc00117 	ldw	ra,4(sp)
 8405618:	df000017 	ldw	fp,0(sp)
 840561c:	dec00204 	addi	sp,sp,8
 8405620:	f800283a 	ret

08405624 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 8405624:	defffd04 	addi	sp,sp,-12
 8405628:	dfc00215 	stw	ra,8(sp)
 840562c:	df000115 	stw	fp,4(sp)
 8405630:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 8405634:	00821074 	movhi	r2,2113
 8405638:	10a8b704 	addi	r2,r2,-23844
 840563c:	10800017 	ldw	r2,0(r2)
 8405640:	1005003a 	cmpeq	r2,r2,zero
 8405644:	1000061e 	bne	r2,zero,8405660 <alt_get_errno+0x3c>
 8405648:	00821074 	movhi	r2,2113
 840564c:	10a8b704 	addi	r2,r2,-23844
 8405650:	10800017 	ldw	r2,0(r2)
 8405654:	103ee83a 	callr	r2
 8405658:	e0bfff15 	stw	r2,-4(fp)
 840565c:	00000306 	br	840566c <alt_get_errno+0x48>
 8405660:	00821074 	movhi	r2,2113
 8405664:	10aeaf04 	addi	r2,r2,-17732
 8405668:	e0bfff15 	stw	r2,-4(fp)
 840566c:	e0bfff17 	ldw	r2,-4(fp)
}
 8405670:	e037883a 	mov	sp,fp
 8405674:	dfc00117 	ldw	ra,4(sp)
 8405678:	df000017 	ldw	fp,0(sp)
 840567c:	dec00204 	addi	sp,sp,8
 8405680:	f800283a 	ret

08405684 <altera_avalon_mailbox_open>:
 * Search the list of registered mailboxes for one with the supplied name.
 *
 * The return value will be NULL on failure, and non-NULL otherwise.
 */
alt_mailbox_dev* altera_avalon_mailbox_open (const char* name)
{
 8405684:	defffc04 	addi	sp,sp,-16
 8405688:	dfc00315 	stw	ra,12(sp)
 840568c:	df000215 	stw	fp,8(sp)
 8405690:	df000204 	addi	fp,sp,8
 8405694:	e13fff15 	stw	r4,-4(fp)
  alt_mailbox_dev* dev;

  dev = (alt_mailbox_dev*) alt_find_dev (name, &alt_mailbox_list);
 8405698:	e13fff17 	ldw	r4,-4(fp)
 840569c:	d1600604 	addi	r5,gp,-32744
 84056a0:	84076f40 	call	84076f4 <alt_find_dev>
 84056a4:	e0bffe15 	stw	r2,-8(fp)

  if (NULL == dev)
 84056a8:	e0bffe17 	ldw	r2,-8(fp)
 84056ac:	1004c03a 	cmpne	r2,r2,zero
 84056b0:	1000041e 	bne	r2,zero,84056c4 <altera_avalon_mailbox_open+0x40>
  {
    ALT_ERRNO = ENODEV;
 84056b4:	84056240 	call	8405624 <alt_get_errno>
 84056b8:	1007883a 	mov	r3,r2
 84056bc:	008004c4 	movi	r2,19
 84056c0:	18800015 	stw	r2,0(r3)
  }

  return dev;
 84056c4:	e0bffe17 	ldw	r2,-8(fp)

}
 84056c8:	e037883a 	mov	sp,fp
 84056cc:	dfc00117 	ldw	ra,4(sp)
 84056d0:	df000017 	ldw	fp,0(sp)
 84056d4:	dec00204 	addi	sp,sp,8
 84056d8:	f800283a 	ret

084056dc <altera_avalon_mailbox_close>:
 * altera_avalon_mailbox_close - Does nothing at the moment, but included for 
 * completeness
 *
 */
void altera_avalon_mailbox_close (alt_mailbox_dev* dev)
{
 84056dc:	defffe04 	addi	sp,sp,-8
 84056e0:	df000115 	stw	fp,4(sp)
 84056e4:	df000104 	addi	fp,sp,4
 84056e8:	e13fff15 	stw	r4,-4(fp)
  return;
}
 84056ec:	e037883a 	mov	sp,fp
 84056f0:	df000017 	ldw	fp,0(sp)
 84056f4:	dec00104 	addi	sp,sp,4
 84056f8:	f800283a 	ret

084056fc <altera_avalon_mailbox_post>:
 * 
 * Post a message to the mailbox
 *
 */
int altera_avalon_mailbox_post (alt_mailbox_dev* dev, alt_u32 msg)
{
 84056fc:	defff904 	addi	sp,sp,-28
 8405700:	dfc00615 	stw	ra,24(sp)
 8405704:	df000515 	stw	fp,20(sp)
 8405708:	df000504 	addi	fp,sp,20
 840570c:	e13ffe15 	stw	r4,-8(fp)
 8405710:	e17fff15 	stw	r5,-4(fp)
  int ret_code = 0;
 8405714:	e03ffd15 	stw	zero,-12(fp)
  *   Claim the Mutex on the write pointer 
  *
  *   The mutex function takes care of the thread sempahore if running
  *   in a multi-threaded environment
  */
  altera_avalon_mutex_lock( &dev->write_mutex, 1 );
 8405718:	e0bffe17 	ldw	r2,-8(fp)
 840571c:	11000704 	addi	r4,r2,28
 8405720:	01400044 	movi	r5,1
 8405724:	8405adc0 	call	8405adc <altera_avalon_mutex_lock>

  temp = (alt_u32 *) IORD(dev->write_ptr, 0);
 8405728:	e0bffe17 	ldw	r2,-8(fp)
 840572c:	10800317 	ldw	r2,12(r2)
 8405730:	10800037 	ldwio	r2,0(r2)
 8405734:	e0bffc15 	stw	r2,-16(fp)
  next_write = alt_mailbox_increment_ptr(dev, temp);
 8405738:	e13ffe17 	ldw	r4,-8(fp)
 840573c:	e17ffc17 	ldw	r5,-16(fp)
 8405740:	84057b80 	call	84057b8 <alt_mailbox_increment_ptr>
 8405744:	e0bffb15 	stw	r2,-20(fp)

  if (next_write == ((alt_u32 *)IORD(dev->read_ptr, 0)) )
 8405748:	e0bffe17 	ldw	r2,-8(fp)
 840574c:	10800417 	ldw	r2,16(r2)
 8405750:	10800037 	ldwio	r2,0(r2)
 8405754:	1007883a 	mov	r3,r2
 8405758:	e0bffb17 	ldw	r2,-20(fp)
 840575c:	1880061e 	bne	r3,r2,8405778 <altera_avalon_mailbox_post+0x7c>
  {
    ALT_ERRNO = EWOULDBLOCK;
 8405760:	84056240 	call	8405624 <alt_get_errno>
 8405764:	00c002c4 	movi	r3,11
 8405768:	10c00015 	stw	r3,0(r2)
    ret_code = -EWOULDBLOCK;
 840576c:	00bffd44 	movi	r2,-11
 8405770:	e0bffd15 	stw	r2,-12(fp)
 8405774:	00000706 	br	8405794 <altera_avalon_mailbox_post+0x98>
  }
  else
  {
    IOWR(temp, 0, msg);
 8405778:	e0bffc17 	ldw	r2,-16(fp)
 840577c:	e0ffff17 	ldw	r3,-4(fp)
 8405780:	10c00035 	stwio	r3,0(r2)
    IOWR((alt_u32)(dev->write_ptr), 0, (alt_u32)next_write);
 8405784:	e0bffe17 	ldw	r2,-8(fp)
 8405788:	10800317 	ldw	r2,12(r2)
 840578c:	e0fffb17 	ldw	r3,-20(fp)
 8405790:	10c00035 	stwio	r3,0(r2)
  }

  altera_avalon_mutex_unlock( &dev->write_mutex );
 8405794:	e0bffe17 	ldw	r2,-8(fp)
 8405798:	11000704 	addi	r4,r2,28
 840579c:	8405b5c0 	call	8405b5c <altera_avalon_mutex_unlock>

  return ret_code;
 84057a0:	e0bffd17 	ldw	r2,-12(fp)

}
 84057a4:	e037883a 	mov	sp,fp
 84057a8:	dfc00117 	ldw	ra,4(sp)
 84057ac:	df000017 	ldw	fp,0(sp)
 84057b0:	dec00204 	addi	sp,sp,8
 84057b4:	f800283a 	ret

084057b8 <alt_mailbox_increment_ptr>:
 *
 * Increment one of the pointers and if that would take it beyond the end
 * of the shared memory put it at the start
 */
static inline alt_u32* alt_mailbox_increment_ptr(alt_mailbox_dev* dev, alt_u32* ptr)
{
 84057b8:	defffd04 	addi	sp,sp,-12
 84057bc:	df000215 	stw	fp,8(sp)
 84057c0:	df000204 	addi	fp,sp,8
 84057c4:	e13ffe15 	stw	r4,-8(fp)
 84057c8:	e17fff15 	stw	r5,-4(fp)
  ptr += 1;
 84057cc:	e0bfff17 	ldw	r2,-4(fp)
 84057d0:	10800104 	addi	r2,r2,4
 84057d4:	e0bfff15 	stw	r2,-4(fp)

  if (ptr > dev->mailbox_mem_end_ptr)
 84057d8:	e0bffe17 	ldw	r2,-8(fp)
 84057dc:	10c00617 	ldw	r3,24(r2)
 84057e0:	e0bfff17 	ldw	r2,-4(fp)
 84057e4:	1880032e 	bgeu	r3,r2,84057f4 <alt_mailbox_increment_ptr+0x3c>
  {
    ptr = dev->mailbox_mem_start_ptr;
 84057e8:	e0bffe17 	ldw	r2,-8(fp)
 84057ec:	10800517 	ldw	r2,20(r2)
 84057f0:	e0bfff15 	stw	r2,-4(fp)
  }

  return ptr;
 84057f4:	e0bfff17 	ldw	r2,-4(fp)
}
 84057f8:	e037883a 	mov	sp,fp
 84057fc:	df000017 	ldw	fp,0(sp)
 8405800:	dec00104 	addi	sp,sp,4
 8405804:	f800283a 	ret

08405808 <altera_avalon_mailbox_pend>:
 * 
 * Block until a message is available in the mailbox
 *
 */
alt_u32 altera_avalon_mailbox_pend (alt_mailbox_dev* dev)
{
 8405808:	defffa04 	addi	sp,sp,-24
 840580c:	dfc00515 	stw	ra,20(sp)
 8405810:	df000415 	stw	fp,16(sp)
 8405814:	dc000315 	stw	r16,12(sp)
 8405818:	df000304 	addi	fp,sp,12
 840581c:	e13fff15 	stw	r4,-4(fp)
  *   Claim the Mutex on the read pointer
  *
  *   The mutex function takes care of the thread sempahore if running
  *   in a multi-threaded environment
  */
  altera_avalon_mutex_lock( &dev->read_mutex, 1 );
 8405820:	e0bfff17 	ldw	r2,-4(fp)
 8405824:	11000b04 	addi	r4,r2,44
 8405828:	01400044 	movi	r5,1
 840582c:	8405adc0 	call	8405adc <altera_avalon_mutex_lock>

  temp = (alt_u32 *)IORD(dev->read_ptr, 0);
 8405830:	e0bfff17 	ldw	r2,-4(fp)
 8405834:	10800417 	ldw	r2,16(r2)
 8405838:	10800037 	ldwio	r2,0(r2)
 840583c:	e0bffd15 	stw	r2,-12(fp)

  while ( (alt_u32 *)(IORD(dev->write_ptr, 0)) == temp );
 8405840:	e0bfff17 	ldw	r2,-4(fp)
 8405844:	10800317 	ldw	r2,12(r2)
 8405848:	10800037 	ldwio	r2,0(r2)
 840584c:	1007883a 	mov	r3,r2
 8405850:	e0bffd17 	ldw	r2,-12(fp)
 8405854:	18bffa26 	beq	r3,r2,8405840 <altera_avalon_mailbox_pend+0x38>

  msg = IORD(temp, 0);
 8405858:	e0bffd17 	ldw	r2,-12(fp)
 840585c:	10800037 	ldwio	r2,0(r2)
 8405860:	e0bffe15 	stw	r2,-8(fp)

  IOWR( (alt_u32)(dev->read_ptr), 0,
 8405864:	e0bfff17 	ldw	r2,-4(fp)
 8405868:	10800417 	ldw	r2,16(r2)
 840586c:	1021883a 	mov	r16,r2
 8405870:	e13fff17 	ldw	r4,-4(fp)
 8405874:	e17ffd17 	ldw	r5,-12(fp)
 8405878:	84057b80 	call	84057b8 <alt_mailbox_increment_ptr>
 840587c:	1007883a 	mov	r3,r2
 8405880:	8005883a 	mov	r2,r16
 8405884:	10c00035 	stwio	r3,0(r2)
    (alt_u32)(alt_mailbox_increment_ptr(dev, temp)) );

  altera_avalon_mutex_unlock( &dev->read_mutex );
 8405888:	e0bfff17 	ldw	r2,-4(fp)
 840588c:	11000b04 	addi	r4,r2,44
 8405890:	8405b5c0 	call	8405b5c <altera_avalon_mutex_unlock>

  return msg;
 8405894:	e0bffe17 	ldw	r2,-8(fp)

}
 8405898:	e037883a 	mov	sp,fp
 840589c:	dfc00217 	ldw	ra,8(sp)
 84058a0:	df000117 	ldw	fp,4(sp)
 84058a4:	dc000017 	ldw	r16,0(sp)
 84058a8:	dec00304 	addi	sp,sp,12
 84058ac:	f800283a 	ret

084058b0 <altera_avalon_mailbox_get>:
 * If a message is available in the mailbox return it otherwise return NULL
 * i.e. this is Non-Blocking
 *
 */
alt_u32 altera_avalon_mailbox_get (alt_mailbox_dev* dev, int* err)
{
 84058b0:	defff904 	addi	sp,sp,-28
 84058b4:	dfc00615 	stw	ra,24(sp)
 84058b8:	df000515 	stw	fp,20(sp)
 84058bc:	dc000415 	stw	r16,16(sp)
 84058c0:	df000404 	addi	fp,sp,16
 84058c4:	e13ffe15 	stw	r4,-8(fp)
 84058c8:	e17fff15 	stw	r5,-4(fp)
  alt_u32 msg;
  alt_u32* temp;
  *err = 0;
 84058cc:	e0bfff17 	ldw	r2,-4(fp)
 84058d0:	10000015 	stw	zero,0(r2)
  *   Claim the Mutex on the read pointer 
  *
  *   The mutex function takes care of the thread sempahore if running
  *   in a multi-threaded environment
  */
  altera_avalon_mutex_lock( &dev->read_mutex, 1 );
 84058d4:	e0bffe17 	ldw	r2,-8(fp)
 84058d8:	11000b04 	addi	r4,r2,44
 84058dc:	01400044 	movi	r5,1
 84058e0:	8405adc0 	call	8405adc <altera_avalon_mutex_lock>

  temp = (alt_u32 *)IORD(dev->read_ptr, 0);
 84058e4:	e0bffe17 	ldw	r2,-8(fp)
 84058e8:	10800417 	ldw	r2,16(r2)
 84058ec:	10800037 	ldwio	r2,0(r2)
 84058f0:	e0bffc15 	stw	r2,-16(fp)

  if ( (alt_u32 *)(IORD(dev->write_ptr, 0)) == temp )
 84058f4:	e0bffe17 	ldw	r2,-8(fp)
 84058f8:	10800317 	ldw	r2,12(r2)
 84058fc:	10800037 	ldwio	r2,0(r2)
 8405900:	1007883a 	mov	r3,r2
 8405904:	e0bffc17 	ldw	r2,-16(fp)
 8405908:	1880091e 	bne	r3,r2,8405930 <altera_avalon_mailbox_get+0x80>
  {
    *err = -EWOULDBLOCK;
 840590c:	e0ffff17 	ldw	r3,-4(fp)
 8405910:	00bffd44 	movi	r2,-11
 8405914:	18800015 	stw	r2,0(r3)
    ALT_ERRNO = EWOULDBLOCK;
 8405918:	84056240 	call	8405624 <alt_get_errno>
 840591c:	1007883a 	mov	r3,r2
 8405920:	008002c4 	movi	r2,11
 8405924:	18800015 	stw	r2,0(r3)
    msg = 0;
 8405928:	e03ffd15 	stw	zero,-12(fp)
 840592c:	00000c06 	br	8405960 <altera_avalon_mailbox_get+0xb0>
  }
  else
  {
    msg = IORD(temp, 0);
 8405930:	e0bffc17 	ldw	r2,-16(fp)
 8405934:	10800037 	ldwio	r2,0(r2)
 8405938:	e0bffd15 	stw	r2,-12(fp)
    IOWR(dev->read_ptr, 0,
 840593c:	e0bffe17 	ldw	r2,-8(fp)
 8405940:	10800417 	ldw	r2,16(r2)
 8405944:	1021883a 	mov	r16,r2
 8405948:	e13ffe17 	ldw	r4,-8(fp)
 840594c:	e17ffc17 	ldw	r5,-16(fp)
 8405950:	84057b80 	call	84057b8 <alt_mailbox_increment_ptr>
 8405954:	1007883a 	mov	r3,r2
 8405958:	8005883a 	mov	r2,r16
 840595c:	10c00035 	stwio	r3,0(r2)
      (alt_u32)(alt_mailbox_increment_ptr(dev, temp)) );
  }

  altera_avalon_mutex_unlock( &dev->read_mutex );
 8405960:	e0bffe17 	ldw	r2,-8(fp)
 8405964:	11000b04 	addi	r4,r2,44
 8405968:	8405b5c0 	call	8405b5c <altera_avalon_mutex_unlock>

  return msg;
 840596c:	e0bffd17 	ldw	r2,-12(fp)

}
 8405970:	e037883a 	mov	sp,fp
 8405974:	dfc00217 	ldw	ra,8(sp)
 8405978:	df000117 	ldw	fp,4(sp)
 840597c:	dc000017 	ldw	r16,0(sp)
 8405980:	dec00304 	addi	sp,sp,12
 8405984:	f800283a 	ret

08405988 <alt_mutex_trylock>:
 *
 * returns 0 on success -1 otherwise
 *
 */
static int alt_mutex_trylock( alt_mutex_dev* dev, alt_u32 value )
{
 8405988:	defff904 	addi	sp,sp,-28
 840598c:	df000615 	stw	fp,24(sp)
 8405990:	df000604 	addi	fp,sp,24
 8405994:	e13ffe15 	stw	r4,-8(fp)
 8405998:	e17fff15 	stw	r5,-4(fp)
  alt_u32 id, data, check;
  int ret_code = -1;
 840599c:	00bfffc4 	movi	r2,-1
 84059a0:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_READ_CPUID(id);
 84059a4:	0005317a 	rdctl	r2,cpuid
 84059a8:	e0bffd15 	stw	r2,-12(fp)

  /* the data we want the mutex to hold */
  data = (id << ALTERA_AVALON_MUTEX_MUTEX_OWNER_OFST) | value;
 84059ac:	e0bffd17 	ldw	r2,-12(fp)
 84059b0:	1006943a 	slli	r3,r2,16
 84059b4:	e0bfff17 	ldw	r2,-4(fp)
 84059b8:	1884b03a 	or	r2,r3,r2
 84059bc:	e0bffc15 	stw	r2,-16(fp)

  /* attempt to write to the mutex */
  IOWR_ALTERA_AVALON_MUTEX_MUTEX(dev->mutex_base, data);
 84059c0:	e0bffe17 	ldw	r2,-8(fp)
 84059c4:	10800317 	ldw	r2,12(r2)
 84059c8:	e0fffc17 	ldw	r3,-16(fp)
 84059cc:	10c00035 	stwio	r3,0(r2)
  
  check = IORD_ALTERA_AVALON_MUTEX_MUTEX(dev->mutex_base);
 84059d0:	e0bffe17 	ldw	r2,-8(fp)
 84059d4:	10800317 	ldw	r2,12(r2)
 84059d8:	10800037 	ldwio	r2,0(r2)
 84059dc:	e0bffb15 	stw	r2,-20(fp)

  if ( check == data)
 84059e0:	e0fffb17 	ldw	r3,-20(fp)
 84059e4:	e0bffc17 	ldw	r2,-16(fp)
 84059e8:	1880011e 	bne	r3,r2,84059f0 <alt_mutex_trylock+0x68>
  {
    ret_code = 0;
 84059ec:	e03ffa15 	stw	zero,-24(fp)
  }

  return ret_code;
 84059f0:	e0bffa17 	ldw	r2,-24(fp)
}
 84059f4:	e037883a 	mov	sp,fp
 84059f8:	df000017 	ldw	fp,0(sp)
 84059fc:	dec00104 	addi	sp,sp,4
 8405a00:	f800283a 	ret

08405a04 <altera_avalon_mutex_open>:
 * Search the list of registered mutexes for one with the supplied name.
 *
 * The return value will be NULL on failure, and non-NULL otherwise.
 */
alt_mutex_dev* altera_avalon_mutex_open (const char* name)
{
 8405a04:	defffc04 	addi	sp,sp,-16
 8405a08:	dfc00315 	stw	ra,12(sp)
 8405a0c:	df000215 	stw	fp,8(sp)
 8405a10:	df000204 	addi	fp,sp,8
 8405a14:	e13fff15 	stw	r4,-4(fp)
  alt_mutex_dev* dev;

  dev = (alt_mutex_dev*) alt_find_dev (name, &alt_mutex_list);
 8405a18:	e13fff17 	ldw	r4,-4(fp)
 8405a1c:	d1600804 	addi	r5,gp,-32736
 8405a20:	84076f40 	call	84076f4 <alt_find_dev>
 8405a24:	e0bffe15 	stw	r2,-8(fp)

  if (NULL == dev)
 8405a28:	e0bffe17 	ldw	r2,-8(fp)
 8405a2c:	1004c03a 	cmpne	r2,r2,zero
 8405a30:	1000041e 	bne	r2,zero,8405a44 <altera_avalon_mutex_open+0x40>
  {
    ALT_ERRNO = ENODEV;
 8405a34:	8405a5c0 	call	8405a5c <alt_get_errno>
 8405a38:	1007883a 	mov	r3,r2
 8405a3c:	008004c4 	movi	r2,19
 8405a40:	18800015 	stw	r2,0(r3)
  }

  return dev;
 8405a44:	e0bffe17 	ldw	r2,-8(fp)
}
 8405a48:	e037883a 	mov	sp,fp
 8405a4c:	dfc00117 	ldw	ra,4(sp)
 8405a50:	df000017 	ldw	fp,0(sp)
 8405a54:	dec00204 	addi	sp,sp,8
 8405a58:	f800283a 	ret

08405a5c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 8405a5c:	defffd04 	addi	sp,sp,-12
 8405a60:	dfc00215 	stw	ra,8(sp)
 8405a64:	df000115 	stw	fp,4(sp)
 8405a68:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 8405a6c:	00821074 	movhi	r2,2113
 8405a70:	10a8b704 	addi	r2,r2,-23844
 8405a74:	10800017 	ldw	r2,0(r2)
 8405a78:	1005003a 	cmpeq	r2,r2,zero
 8405a7c:	1000061e 	bne	r2,zero,8405a98 <alt_get_errno+0x3c>
 8405a80:	00821074 	movhi	r2,2113
 8405a84:	10a8b704 	addi	r2,r2,-23844
 8405a88:	10800017 	ldw	r2,0(r2)
 8405a8c:	103ee83a 	callr	r2
 8405a90:	e0bfff15 	stw	r2,-4(fp)
 8405a94:	00000306 	br	8405aa4 <alt_get_errno+0x48>
 8405a98:	00821074 	movhi	r2,2113
 8405a9c:	10aeaf04 	addi	r2,r2,-17732
 8405aa0:	e0bfff15 	stw	r2,-4(fp)
 8405aa4:	e0bfff17 	ldw	r2,-4(fp)
}
 8405aa8:	e037883a 	mov	sp,fp
 8405aac:	dfc00117 	ldw	ra,4(sp)
 8405ab0:	df000017 	ldw	fp,0(sp)
 8405ab4:	dec00204 	addi	sp,sp,8
 8405ab8:	f800283a 	ret

08405abc <altera_avalon_mutex_close>:
 * altera_avalon_mutex_close - Does nothing at the moment, but included for 
 * completeness
 *
 */
void altera_avalon_mutex_close (alt_mutex_dev* dev)
{
 8405abc:	defffe04 	addi	sp,sp,-8
 8405ac0:	df000115 	stw	fp,4(sp)
 8405ac4:	df000104 	addi	fp,sp,4
 8405ac8:	e13fff15 	stw	r4,-4(fp)
  return;
}
 8405acc:	e037883a 	mov	sp,fp
 8405ad0:	df000017 	ldw	fp,0(sp)
 8405ad4:	dec00104 	addi	sp,sp,4
 8405ad8:	f800283a 	ret

08405adc <altera_avalon_mutex_lock>:
/*
 * altera_avalon_mutex_lock - Lock the hardware mutex
 *
 */
void altera_avalon_mutex_lock( alt_mutex_dev* dev, alt_u32 value )
{
 8405adc:	defffc04 	addi	sp,sp,-16
 8405ae0:	dfc00315 	stw	ra,12(sp)
 8405ae4:	df000215 	stw	fp,8(sp)
 8405ae8:	df000204 	addi	fp,sp,8
 8405aec:	e13ffe15 	stw	r4,-8(fp)
 8405af0:	e17fff15 	stw	r5,-4(fp)
   * semaphore. This ensures that reading from the device is thread-safe.
   */

  ALT_SEM_PEND (dev->lock, 0);

  while ( alt_mutex_trylock( dev, value ) != 0);
 8405af4:	e13ffe17 	ldw	r4,-8(fp)
 8405af8:	e17fff17 	ldw	r5,-4(fp)
 8405afc:	84059880 	call	8405988 <alt_mutex_trylock>
 8405b00:	1004c03a 	cmpne	r2,r2,zero
 8405b04:	103ffb1e 	bne	r2,zero,8405af4 <altera_avalon_mutex_lock+0x18>
}
 8405b08:	e037883a 	mov	sp,fp
 8405b0c:	dfc00117 	ldw	ra,4(sp)
 8405b10:	df000017 	ldw	fp,0(sp)
 8405b14:	dec00204 	addi	sp,sp,8
 8405b18:	f800283a 	ret

08405b1c <altera_avalon_mutex_trylock>:
 *
 * returns 0 on success -1 otherwise
 *
 */
int altera_avalon_mutex_trylock( alt_mutex_dev* dev, alt_u32 value )
{
 8405b1c:	defffb04 	addi	sp,sp,-20
 8405b20:	dfc00415 	stw	ra,16(sp)
 8405b24:	df000315 	stw	fp,12(sp)
 8405b28:	df000304 	addi	fp,sp,12
 8405b2c:	e13ffe15 	stw	r4,-8(fp)
 8405b30:	e17fff15 	stw	r5,-4(fp)
  int ret_code;

  ALT_SEM_PEND (dev->lock, 0);

  ret_code = alt_mutex_trylock( dev, value);
 8405b34:	e13ffe17 	ldw	r4,-8(fp)
 8405b38:	e17fff17 	ldw	r5,-4(fp)
 8405b3c:	84059880 	call	8405988 <alt_mutex_trylock>
 8405b40:	e0bffd15 	stw	r2,-12(fp)
  if (ret_code)
  {
    ALT_SEM_POST (dev->lock);
  }

  return ret_code;
 8405b44:	e0bffd17 	ldw	r2,-12(fp)
}
 8405b48:	e037883a 	mov	sp,fp
 8405b4c:	dfc00117 	ldw	ra,4(sp)
 8405b50:	df000017 	ldw	fp,0(sp)
 8405b54:	dec00204 	addi	sp,sp,8
 8405b58:	f800283a 	ret

08405b5c <altera_avalon_mutex_unlock>:
 * This function does not check that you own the Mutex if you try to release
 * a Mutex you do not own the behaviour is undefined
 *
 */
void altera_avalon_mutex_unlock( alt_mutex_dev* dev )
{
 8405b5c:	defffd04 	addi	sp,sp,-12
 8405b60:	df000215 	stw	fp,8(sp)
 8405b64:	df000204 	addi	fp,sp,8
 8405b68:	e13fff15 	stw	r4,-4(fp)
  alt_u32 id;
  NIOS2_READ_CPUID(id);
 8405b6c:	0005317a 	rdctl	r2,cpuid
 8405b70:	e0bffe15 	stw	r2,-8(fp)

  /*
  * This Mutex has been claimed and released since Reset so clear the Reset bit
  * This MUST happen before we release the MUTEX
  */
  IOWR_ALTERA_AVALON_MUTEX_RESET(dev->mutex_base, 
 8405b74:	e0bfff17 	ldw	r2,-4(fp)
 8405b78:	10800317 	ldw	r2,12(r2)
 8405b7c:	10800104 	addi	r2,r2,4
 8405b80:	1007883a 	mov	r3,r2
 8405b84:	00800044 	movi	r2,1
 8405b88:	18800035 	stwio	r2,0(r3)
                                  ALTERA_AVALON_MUTEX_RESET_RESET_MSK);
  IOWR_ALTERA_AVALON_MUTEX_MUTEX(dev->mutex_base, 
 8405b8c:	e0bfff17 	ldw	r2,-4(fp)
 8405b90:	11000317 	ldw	r4,12(r2)
 8405b94:	e0bffe17 	ldw	r2,-8(fp)
 8405b98:	1004943a 	slli	r2,r2,16
 8405b9c:	1007883a 	mov	r3,r2
 8405ba0:	2005883a 	mov	r2,r4
 8405ba4:	10c00035 	stwio	r3,0(r2)

  /*
  * Now that access to the hardware Mutex is complete, release the thread lock
  */
  ALT_SEM_POST (dev->lock);
}
 8405ba8:	e037883a 	mov	sp,fp
 8405bac:	df000017 	ldw	fp,0(sp)
 8405bb0:	dec00104 	addi	sp,sp,4
 8405bb4:	f800283a 	ret

08405bb8 <altera_avalon_mutex_is_mine>:
 * altera_avalon_mutex_is_mine - Do I own the Mutex?
 *
 *  returns non zero if the mutex is owned by this CPU
 */
int altera_avalon_mutex_is_mine( alt_mutex_dev* dev )
{
 8405bb8:	defff904 	addi	sp,sp,-28
 8405bbc:	df000615 	stw	fp,24(sp)
 8405bc0:	df000604 	addi	fp,sp,24
 8405bc4:	e13fff15 	stw	r4,-4(fp)
  alt_u32 id, data, owner, value;
  int ret_code = 0;
 8405bc8:	e03ffa15 	stw	zero,-24(fp)

  NIOS2_READ_CPUID(id);
 8405bcc:	0005317a 	rdctl	r2,cpuid
 8405bd0:	e0bffe15 	stw	r2,-8(fp)

  /* retrieve the contents of the mutex */
  data = IORD_ALTERA_AVALON_MUTEX_MUTEX(dev->mutex_base);
 8405bd4:	e0bfff17 	ldw	r2,-4(fp)
 8405bd8:	10800317 	ldw	r2,12(r2)
 8405bdc:	10800037 	ldwio	r2,0(r2)
 8405be0:	e0bffd15 	stw	r2,-12(fp)
  owner = (data & ALTERA_AVALON_MUTEX_MUTEX_OWNER_MSK) >> 
 8405be4:	e0bffd17 	ldw	r2,-12(fp)
 8405be8:	10bfffec 	andhi	r2,r2,65535
 8405bec:	1004d43a 	srli	r2,r2,16
 8405bf0:	e0bffc15 	stw	r2,-16(fp)
              ALTERA_AVALON_MUTEX_MUTEX_OWNER_OFST;

  if (owner == id) 
 8405bf4:	e0fffc17 	ldw	r3,-16(fp)
 8405bf8:	e0bffe17 	ldw	r2,-8(fp)
 8405bfc:	1880081e 	bne	r3,r2,8405c20 <altera_avalon_mutex_is_mine+0x68>
  {
    value = (data & ALTERA_AVALON_MUTEX_MUTEX_VALUE_MSK) >> 
 8405c00:	e0bffd17 	ldw	r2,-12(fp)
 8405c04:	10bfffcc 	andi	r2,r2,65535
 8405c08:	e0bffb15 	stw	r2,-20(fp)
                  ALTERA_AVALON_MUTEX_MUTEX_VALUE_OFST;
    if (value != 0)
 8405c0c:	e0bffb17 	ldw	r2,-20(fp)
 8405c10:	1005003a 	cmpeq	r2,r2,zero
 8405c14:	1000021e 	bne	r2,zero,8405c20 <altera_avalon_mutex_is_mine+0x68>
    {
      ret_code = 1;
 8405c18:	00800044 	movi	r2,1
 8405c1c:	e0bffa15 	stw	r2,-24(fp)
    }
  }

  return ret_code;
 8405c20:	e0bffa17 	ldw	r2,-24(fp)
}
 8405c24:	e037883a 	mov	sp,fp
 8405c28:	df000017 	ldw	fp,0(sp)
 8405c2c:	dec00104 	addi	sp,sp,4
 8405c30:	f800283a 	ret

08405c34 <altera_avalon_mutex_first_lock>:
 *
 * Has this Mutex been released since reset if not return 1
 * otherwise return 0
 */
int altera_avalon_mutex_first_lock( alt_mutex_dev* dev )
{
 8405c34:	defffc04 	addi	sp,sp,-16
 8405c38:	df000315 	stw	fp,12(sp)
 8405c3c:	df000304 	addi	fp,sp,12
 8405c40:	e13fff15 	stw	r4,-4(fp)
  alt_u32 data;
  int ret_code = 0;
 8405c44:	e03ffd15 	stw	zero,-12(fp)

  data = IORD_ALTERA_AVALON_MUTEX_RESET(dev->mutex_base);
 8405c48:	e0bfff17 	ldw	r2,-4(fp)
 8405c4c:	10800317 	ldw	r2,12(r2)
 8405c50:	10800104 	addi	r2,r2,4
 8405c54:	10800037 	ldwio	r2,0(r2)
 8405c58:	e0bffe15 	stw	r2,-8(fp)

  if (data & ALTERA_AVALON_MUTEX_RESET_RESET_MSK) 
 8405c5c:	e0bffe17 	ldw	r2,-8(fp)
 8405c60:	1080004c 	andi	r2,r2,1
 8405c64:	10803fcc 	andi	r2,r2,255
 8405c68:	1005003a 	cmpeq	r2,r2,zero
 8405c6c:	1000021e 	bne	r2,zero,8405c78 <altera_avalon_mutex_first_lock+0x44>
  {
    ret_code = 1;
 8405c70:	00800044 	movi	r2,1
 8405c74:	e0bffd15 	stw	r2,-12(fp)
  }

  return ret_code;
 8405c78:	e0bffd17 	ldw	r2,-12(fp)
}
 8405c7c:	e037883a 	mov	sp,fp
 8405c80:	df000017 	ldw	fp,0(sp)
 8405c84:	dec00104 	addi	sp,sp,4
 8405c88:	f800283a 	ret

08405c8c <alt_up_pixel_buffer_dma_open_dev>:

#include "altera_up_avalon_video_pixel_buffer_dma.h"

#define ABS(x)	((x >= 0) ? (x) : (-(x)))

alt_up_pixel_buffer_dma_dev* alt_up_pixel_buffer_dma_open_dev(const char* name) {
 8405c8c:	defffc04 	addi	sp,sp,-16
 8405c90:	dfc00315 	stw	ra,12(sp)
 8405c94:	df000215 	stw	fp,8(sp)
 8405c98:	df000204 	addi	fp,sp,8
 8405c9c:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_pixel_buffer_dma_dev *dev = (alt_up_pixel_buffer_dma_dev*)alt_find_dev(name, &alt_dev_list);
 8405ca0:	e13fff17 	ldw	r4,-4(fp)
 8405ca4:	01421074 	movhi	r5,2113
 8405ca8:	2968b404 	addi	r5,r5,-23856
 8405cac:	84076f40 	call	84076f4 <alt_find_dev>
 8405cb0:	e0bffe15 	stw	r2,-8(fp)

  return dev;
 8405cb4:	e0bffe17 	ldw	r2,-8(fp)
}
 8405cb8:	e037883a 	mov	sp,fp
 8405cbc:	dfc00117 	ldw	ra,4(sp)
 8405cc0:	df000017 	ldw	fp,0(sp)
 8405cc4:	dec00204 	addi	sp,sp,8
 8405cc8:	f800283a 	ret

08405ccc <alt_up_pixel_buffer_dma_draw>:

int alt_up_pixel_buffer_dma_draw(alt_up_pixel_buffer_dma_dev *pixel_buffer, unsigned int color, unsigned int x, unsigned int y)
/* This function draws a pixel to the back buffer.
 */
{
 8405ccc:	defff904 	addi	sp,sp,-28
 8405cd0:	df000615 	stw	fp,24(sp)
 8405cd4:	df000604 	addi	fp,sp,24
 8405cd8:	e13ffb15 	stw	r4,-20(fp)
 8405cdc:	e17ffc15 	stw	r5,-16(fp)
 8405ce0:	e1bffd15 	stw	r6,-12(fp)
 8405ce4:	e1fffe15 	stw	r7,-8(fp)
	// boundary check
	if (x >= pixel_buffer->x_resolution || y >= pixel_buffer->y_resolution )
 8405ce8:	e0bffb17 	ldw	r2,-20(fp)
 8405cec:	10c00f17 	ldw	r3,60(r2)
 8405cf0:	e0bffd17 	ldw	r2,-12(fp)
 8405cf4:	10c0042e 	bgeu	r2,r3,8405d08 <alt_up_pixel_buffer_dma_draw+0x3c>
 8405cf8:	e0bffb17 	ldw	r2,-20(fp)
 8405cfc:	10c01017 	ldw	r3,64(r2)
 8405d00:	e0bffe17 	ldw	r2,-8(fp)
 8405d04:	10c00336 	bltu	r2,r3,8405d14 <alt_up_pixel_buffer_dma_draw+0x48>
		return -1;
 8405d08:	00bfffc4 	movi	r2,-1
 8405d0c:	e0bfff15 	stw	r2,-4(fp)
 8405d10:	00005106 	br	8405e58 <alt_up_pixel_buffer_dma_draw+0x18c>

	unsigned int addr = 0;
 8405d14:	e03ffa15 	stw	zero,-24(fp)
	/* Check the mode VGA Pixel Buffer is using. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
 8405d18:	e0bffb17 	ldw	r2,-20(fp)
 8405d1c:	10800d17 	ldw	r2,52(r2)
 8405d20:	1004c03a 	cmpne	r2,r2,zero
 8405d24:	1000151e 	bne	r2,zero,8405d7c <alt_up_pixel_buffer_dma_draw+0xb0>
		/* For X-Y addressing mode, the address format is | unused | Y | X |. So shift bits for coordinates X and Y into their respective locations. */
		addr |= ((x & pixel_buffer->x_coord_mask) << pixel_buffer->x_coord_offset);
 8405d28:	e0bffb17 	ldw	r2,-20(fp)
 8405d2c:	10c01217 	ldw	r3,72(r2)
 8405d30:	e0bffd17 	ldw	r2,-12(fp)
 8405d34:	1886703a 	and	r3,r3,r2
 8405d38:	e0bffb17 	ldw	r2,-20(fp)
 8405d3c:	10801117 	ldw	r2,68(r2)
 8405d40:	1886983a 	sll	r3,r3,r2
 8405d44:	e0bffa17 	ldw	r2,-24(fp)
 8405d48:	10c4b03a 	or	r2,r2,r3
 8405d4c:	e0bffa15 	stw	r2,-24(fp)
		addr |= ((y & pixel_buffer->y_coord_mask) << pixel_buffer->y_coord_offset);
 8405d50:	e0bffb17 	ldw	r2,-20(fp)
 8405d54:	10c01417 	ldw	r3,80(r2)
 8405d58:	e0bffe17 	ldw	r2,-8(fp)
 8405d5c:	1886703a 	and	r3,r3,r2
 8405d60:	e0bffb17 	ldw	r2,-20(fp)
 8405d64:	10801317 	ldw	r2,76(r2)
 8405d68:	1886983a 	sll	r3,r3,r2
 8405d6c:	e0bffa17 	ldw	r2,-24(fp)
 8405d70:	10c4b03a 	or	r2,r2,r3
 8405d74:	e0bffa15 	stw	r2,-24(fp)
 8405d78:	00001706 	br	8405dd8 <alt_up_pixel_buffer_dma_draw+0x10c>
	} else {
		/* In a consecutive addressing mode, the pixels are stored in consecutive memory locations. So the address of a pixel at (x,y) can be computed as
		 * (y*x_resolution + x).*/
		addr += ((x & pixel_buffer->x_coord_mask) << pixel_buffer->x_coord_offset);
 8405d7c:	e0bffb17 	ldw	r2,-20(fp)
 8405d80:	10c01217 	ldw	r3,72(r2)
 8405d84:	e0bffd17 	ldw	r2,-12(fp)
 8405d88:	1886703a 	and	r3,r3,r2
 8405d8c:	e0bffb17 	ldw	r2,-20(fp)
 8405d90:	10801117 	ldw	r2,68(r2)
 8405d94:	1886983a 	sll	r3,r3,r2
 8405d98:	e0bffa17 	ldw	r2,-24(fp)
 8405d9c:	10c5883a 	add	r2,r2,r3
 8405da0:	e0bffa15 	stw	r2,-24(fp)
		addr += (((y & pixel_buffer->y_coord_mask) * pixel_buffer->x_resolution) << pixel_buffer->x_coord_offset);
 8405da4:	e0bffb17 	ldw	r2,-20(fp)
 8405da8:	10c01417 	ldw	r3,80(r2)
 8405dac:	e0bffe17 	ldw	r2,-8(fp)
 8405db0:	1886703a 	and	r3,r3,r2
 8405db4:	e0bffb17 	ldw	r2,-20(fp)
 8405db8:	10800f17 	ldw	r2,60(r2)
 8405dbc:	1887383a 	mul	r3,r3,r2
 8405dc0:	e0bffb17 	ldw	r2,-20(fp)
 8405dc4:	10801117 	ldw	r2,68(r2)
 8405dc8:	1886983a 	sll	r3,r3,r2
 8405dcc:	e0bffa17 	ldw	r2,-24(fp)
 8405dd0:	10c5883a 	add	r2,r2,r3
 8405dd4:	e0bffa15 	stw	r2,-24(fp)
	}
	/* Now, depending on the color depth, write the pixel color to the specified memory location. */
	if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
 8405dd8:	e0bffb17 	ldw	r2,-20(fp)
 8405ddc:	10800e17 	ldw	r2,56(r2)
 8405de0:	10800058 	cmpnei	r2,r2,1
 8405de4:	1000081e 	bne	r2,zero,8405e08 <alt_up_pixel_buffer_dma_draw+0x13c>
		IOWR_8DIRECT(pixel_buffer->back_buffer_start_address, addr, color);
 8405de8:	e0bffb17 	ldw	r2,-20(fp)
 8405dec:	10800c17 	ldw	r2,48(r2)
 8405df0:	1007883a 	mov	r3,r2
 8405df4:	e0bffa17 	ldw	r2,-24(fp)
 8405df8:	1885883a 	add	r2,r3,r2
 8405dfc:	e0fffc17 	ldw	r3,-16(fp)
 8405e00:	10c00025 	stbio	r3,0(r2)
 8405e04:	00001306 	br	8405e54 <alt_up_pixel_buffer_dma_draw+0x188>
	} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
 8405e08:	e0bffb17 	ldw	r2,-20(fp)
 8405e0c:	10800e17 	ldw	r2,56(r2)
 8405e10:	10800098 	cmpnei	r2,r2,2
 8405e14:	1000081e 	bne	r2,zero,8405e38 <alt_up_pixel_buffer_dma_draw+0x16c>
		IOWR_16DIRECT(pixel_buffer->back_buffer_start_address, addr, color);
 8405e18:	e0bffb17 	ldw	r2,-20(fp)
 8405e1c:	10800c17 	ldw	r2,48(r2)
 8405e20:	1007883a 	mov	r3,r2
 8405e24:	e0bffa17 	ldw	r2,-24(fp)
 8405e28:	1885883a 	add	r2,r3,r2
 8405e2c:	e0fffc17 	ldw	r3,-16(fp)
 8405e30:	10c0002d 	sthio	r3,0(r2)
 8405e34:	00000706 	br	8405e54 <alt_up_pixel_buffer_dma_draw+0x188>
	} else {
		IOWR_32DIRECT(pixel_buffer->back_buffer_start_address, addr, color);
 8405e38:	e0bffb17 	ldw	r2,-20(fp)
 8405e3c:	10800c17 	ldw	r2,48(r2)
 8405e40:	1007883a 	mov	r3,r2
 8405e44:	e0bffa17 	ldw	r2,-24(fp)
 8405e48:	1885883a 	add	r2,r3,r2
 8405e4c:	e0fffc17 	ldw	r3,-16(fp)
 8405e50:	10c00035 	stwio	r3,0(r2)
	}

	return 0;
 8405e54:	e03fff15 	stw	zero,-4(fp)
 8405e58:	e0bfff17 	ldw	r2,-4(fp)
}
 8405e5c:	e037883a 	mov	sp,fp
 8405e60:	df000017 	ldw	fp,0(sp)
 8405e64:	dec00104 	addi	sp,sp,4
 8405e68:	f800283a 	ret

08405e6c <alt_up_pixel_buffer_dma_change_back_buffer_address>:

int alt_up_pixel_buffer_dma_change_back_buffer_address(alt_up_pixel_buffer_dma_dev *pixel_buffer, unsigned int new_address)
/* This function changes the memory address for the back buffer. */
{
 8405e6c:	defffd04 	addi	sp,sp,-12
 8405e70:	df000215 	stw	fp,8(sp)
 8405e74:	df000204 	addi	fp,sp,8
 8405e78:	e13ffe15 	stw	r4,-8(fp)
 8405e7c:	e17fff15 	stw	r5,-4(fp)
	IOWR_32DIRECT(pixel_buffer->base, 4, new_address);
 8405e80:	e0bffe17 	ldw	r2,-8(fp)
 8405e84:	10800a17 	ldw	r2,40(r2)
 8405e88:	10800104 	addi	r2,r2,4
 8405e8c:	e0ffff17 	ldw	r3,-4(fp)
 8405e90:	10c00035 	stwio	r3,0(r2)
	pixel_buffer->back_buffer_start_address = IORD_32DIRECT(pixel_buffer->base, 4);
 8405e94:	e0bffe17 	ldw	r2,-8(fp)
 8405e98:	10800a17 	ldw	r2,40(r2)
 8405e9c:	10800104 	addi	r2,r2,4
 8405ea0:	10800037 	ldwio	r2,0(r2)
 8405ea4:	1007883a 	mov	r3,r2
 8405ea8:	e0bffe17 	ldw	r2,-8(fp)
 8405eac:	10c00c15 	stw	r3,48(r2)
	return 0;
 8405eb0:	0005883a 	mov	r2,zero
}
 8405eb4:	e037883a 	mov	sp,fp
 8405eb8:	df000017 	ldw	fp,0(sp)
 8405ebc:	dec00104 	addi	sp,sp,4
 8405ec0:	f800283a 	ret

08405ec4 <alt_up_pixel_buffer_dma_swap_buffers>:

int alt_up_pixel_buffer_dma_swap_buffers(alt_up_pixel_buffer_dma_dev *pixel_buffer)
/* This function swaps the front and back buffers. At the next refresh cycle the back buffer will be drawn on the screen
 * and will become the front buffer. */
{
 8405ec4:	defffe04 	addi	sp,sp,-8
 8405ec8:	df000115 	stw	fp,4(sp)
 8405ecc:	df000104 	addi	fp,sp,4
 8405ed0:	e13fff15 	stw	r4,-4(fp)
	register unsigned int temp = pixel_buffer->back_buffer_start_address;
 8405ed4:	e0bfff17 	ldw	r2,-4(fp)
 8405ed8:	11000c17 	ldw	r4,48(r2)
	IOWR_32DIRECT(pixel_buffer->base, 0, 1);
 8405edc:	e0bfff17 	ldw	r2,-4(fp)
 8405ee0:	10800a17 	ldw	r2,40(r2)
 8405ee4:	1007883a 	mov	r3,r2
 8405ee8:	00800044 	movi	r2,1
 8405eec:	18800035 	stwio	r2,0(r3)
	pixel_buffer->back_buffer_start_address = pixel_buffer->buffer_start_address;
 8405ef0:	e0bfff17 	ldw	r2,-4(fp)
 8405ef4:	10c00b17 	ldw	r3,44(r2)
 8405ef8:	e0bfff17 	ldw	r2,-4(fp)
 8405efc:	10c00c15 	stw	r3,48(r2)
	pixel_buffer->buffer_start_address = temp;
 8405f00:	e0bfff17 	ldw	r2,-4(fp)
 8405f04:	11000b15 	stw	r4,44(r2)
	return 0;
 8405f08:	0005883a 	mov	r2,zero
}
 8405f0c:	e037883a 	mov	sp,fp
 8405f10:	df000017 	ldw	fp,0(sp)
 8405f14:	dec00104 	addi	sp,sp,4
 8405f18:	f800283a 	ret

08405f1c <alt_up_pixel_buffer_dma_check_swap_buffers_status>:
int alt_up_pixel_buffer_dma_check_swap_buffers_status(alt_up_pixel_buffer_dma_dev *pixel_buffer)
/* This function checks if the buffer swap has occured. Since the buffer swap only happens after an entire screen is drawn,
 * it is important to wait for this function to return 0 before proceeding to draw on either buffer. When both front and the back buffers
 * have the same address calling the alt_up_pixel_buffer_dma_swap_buffers(...) function and then waiting for this function to return 0, causes your program to
 * wait for the screen to refresh. */
{
 8405f1c:	defffe04 	addi	sp,sp,-8
 8405f20:	df000115 	stw	fp,4(sp)
 8405f24:	df000104 	addi	fp,sp,4
 8405f28:	e13fff15 	stw	r4,-4(fp)
	return (IORD_32DIRECT(pixel_buffer->base, 12) & 0x1);
 8405f2c:	e0bfff17 	ldw	r2,-4(fp)
 8405f30:	10800a17 	ldw	r2,40(r2)
 8405f34:	10800304 	addi	r2,r2,12
 8405f38:	10800037 	ldwio	r2,0(r2)
 8405f3c:	1080004c 	andi	r2,r2,1
}
 8405f40:	e037883a 	mov	sp,fp
 8405f44:	df000017 	ldw	fp,0(sp)
 8405f48:	dec00104 	addi	sp,sp,4
 8405f4c:	f800283a 	ret

08405f50 <alt_up_pixel_buffer_dma_clear_screen>:

void alt_up_pixel_buffer_dma_clear_screen(alt_up_pixel_buffer_dma_dev *pixel_buffer, int backbuffer)
/* This function clears the screen by setting each pixel to a black color. */
{
 8405f50:	defff604 	addi	sp,sp,-40
 8405f54:	df000915 	stw	fp,36(sp)
 8405f58:	df000904 	addi	fp,sp,36
 8405f5c:	e13ff715 	stw	r4,-36(fp)
 8405f60:	e17ff815 	stw	r5,-32(fp)
	register unsigned int addr;
	register unsigned int limit_x, limit_y;
	
	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
 8405f64:	e0bff817 	ldw	r2,-32(fp)
 8405f68:	10800058 	cmpnei	r2,r2,1
 8405f6c:	1000041e 	bne	r2,zero,8405f80 <alt_up_pixel_buffer_dma_clear_screen+0x30>
		addr = pixel_buffer->back_buffer_start_address;
 8405f70:	e0bff717 	ldw	r2,-36(fp)
 8405f74:	10800c17 	ldw	r2,48(r2)
 8405f78:	e0bfff15 	stw	r2,-4(fp)
 8405f7c:	00000306 	br	8405f8c <alt_up_pixel_buffer_dma_clear_screen+0x3c>
	else
		addr = pixel_buffer->buffer_start_address;
 8405f80:	e0bff717 	ldw	r2,-36(fp)
 8405f84:	10800b17 	ldw	r2,44(r2)
 8405f88:	e0bfff15 	stw	r2,-4(fp)
	limit_x = pixel_buffer->x_resolution;
 8405f8c:	e0bff717 	ldw	r2,-36(fp)
 8405f90:	10800f17 	ldw	r2,60(r2)
 8405f94:	e0bffe15 	stw	r2,-8(fp)
	/* In 16 and 32-bit color modes we use twice or four times more memory for the display buffer.*/
	if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
 8405f98:	e0bff717 	ldw	r2,-36(fp)
 8405f9c:	10800e17 	ldw	r2,56(r2)
 8405fa0:	10800098 	cmpnei	r2,r2,2
 8405fa4:	1000051e 	bne	r2,zero,8405fbc <alt_up_pixel_buffer_dma_clear_screen+0x6c>
		limit_x = limit_x << 1;
 8405fa8:	e0fffe17 	ldw	r3,-8(fp)
 8405fac:	e0fffe17 	ldw	r3,-8(fp)
 8405fb0:	18c5883a 	add	r2,r3,r3
 8405fb4:	e0bffe15 	stw	r2,-8(fp)
 8405fb8:	00000506 	br	8405fd0 <alt_up_pixel_buffer_dma_clear_screen+0x80>
	} else {
		limit_x = limit_x << 2;
 8405fbc:	e13ffe17 	ldw	r4,-8(fp)
 8405fc0:	e13ffe17 	ldw	r4,-8(fp)
 8405fc4:	2105883a 	add	r2,r4,r4
 8405fc8:	1085883a 	add	r2,r2,r2
 8405fcc:	e0bffe15 	stw	r2,-8(fp)
	}	
	limit_y = pixel_buffer->y_resolution;
 8405fd0:	e0bff717 	ldw	r2,-36(fp)
 8405fd4:	10801017 	ldw	r2,64(r2)
 8405fd8:	e0bffd15 	stw	r2,-12(fp)

	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
 8405fdc:	e0bff717 	ldw	r2,-36(fp)
 8405fe0:	10800d17 	ldw	r2,52(r2)
 8405fe4:	1004c03a 	cmpne	r2,r2,zero
 8405fe8:	10001e1e 	bne	r2,zero,8406064 <alt_up_pixel_buffer_dma_clear_screen+0x114>
		/* Clear the screen when the VGA is set up in an XY addressing mode. */
		register unsigned int x,y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
 8405fec:	e0bff717 	ldw	r2,-36(fp)
 8405ff0:	10801317 	ldw	r2,76(r2)
 8405ff4:	e0bffa15 	stw	r2,-24(fp)

		for (y = 0; y < limit_y; y++)
 8405ff8:	e03ffb15 	stw	zero,-20(fp)
 8405ffc:	00001506 	br	8406054 <alt_up_pixel_buffer_dma_clear_screen+0x104>
		{
			for (x = 0; x < limit_x; x = x + 4)
 8406000:	e03ffc15 	stw	zero,-16(fp)
 8406004:	00000706 	br	8406024 <alt_up_pixel_buffer_dma_clear_screen+0xd4>
			{
				IOWR_32DIRECT(addr, x, 0);
 8406008:	e0ffff17 	ldw	r3,-4(fp)
 840600c:	e0bffc17 	ldw	r2,-16(fp)
 8406010:	1885883a 	add	r2,r3,r2
 8406014:	10000035 	stwio	zero,0(r2)
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;

		for (y = 0; y < limit_y; y++)
		{
			for (x = 0; x < limit_x; x = x + 4)
 8406018:	e0bffc17 	ldw	r2,-16(fp)
 840601c:	10800104 	addi	r2,r2,4
 8406020:	e0bffc15 	stw	r2,-16(fp)
 8406024:	e0fffc17 	ldw	r3,-16(fp)
 8406028:	e13ffe17 	ldw	r4,-8(fp)
 840602c:	193ff636 	bltu	r3,r4,8406008 <alt_up_pixel_buffer_dma_clear_screen+0xb8>
			{
				IOWR_32DIRECT(addr, x, 0);
			}
			addr = addr + (1 << offset_y);
 8406030:	e0fffa17 	ldw	r3,-24(fp)
 8406034:	00800044 	movi	r2,1
 8406038:	10c4983a 	sll	r2,r2,r3
 840603c:	e0ffff17 	ldw	r3,-4(fp)
 8406040:	1887883a 	add	r3,r3,r2
 8406044:	e0ffff15 	stw	r3,-4(fp)
		/* Clear the screen when the VGA is set up in an XY addressing mode. */
		register unsigned int x,y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;

		for (y = 0; y < limit_y; y++)
 8406048:	e13ffb17 	ldw	r4,-20(fp)
 840604c:	21000044 	addi	r4,r4,1
 8406050:	e13ffb15 	stw	r4,-20(fp)
 8406054:	e0bffb17 	ldw	r2,-20(fp)
 8406058:	e0fffd17 	ldw	r3,-12(fp)
 840605c:	10ffe836 	bltu	r2,r3,8406000 <alt_up_pixel_buffer_dma_clear_screen+0xb0>
 8406060:	00001006 	br	84060a4 <alt_up_pixel_buffer_dma_clear_screen+0x154>
			addr = addr + (1 << offset_y);
		}
	} else {
		/* Clear the screen when the VGA is set up in a linear addressing mode. */
		register int x;
		limit_y = limit_x*limit_y;	
 8406064:	e13ffd17 	ldw	r4,-12(fp)
 8406068:	e0bffe17 	ldw	r2,-8(fp)
 840606c:	2089383a 	mul	r4,r4,r2
 8406070:	e13ffd15 	stw	r4,-12(fp)

		for (x = 0; x < limit_y; x = x + 4)
 8406074:	e03ff915 	stw	zero,-28(fp)
 8406078:	00000706 	br	8406098 <alt_up_pixel_buffer_dma_clear_screen+0x148>
		{
			IOWR_32DIRECT(addr, x, 0);
 840607c:	e0ffff17 	ldw	r3,-4(fp)
 8406080:	e0bff917 	ldw	r2,-28(fp)
 8406084:	1885883a 	add	r2,r3,r2
 8406088:	10000035 	stwio	zero,0(r2)
	} else {
		/* Clear the screen when the VGA is set up in a linear addressing mode. */
		register int x;
		limit_y = limit_x*limit_y;	

		for (x = 0; x < limit_y; x = x + 4)
 840608c:	e0fff917 	ldw	r3,-28(fp)
 8406090:	18c00104 	addi	r3,r3,4
 8406094:	e0fff915 	stw	r3,-28(fp)
 8406098:	e0bff917 	ldw	r2,-28(fp)
 840609c:	e13ffd17 	ldw	r4,-12(fp)
 84060a0:	113ff636 	bltu	r2,r4,840607c <alt_up_pixel_buffer_dma_clear_screen+0x12c>
		{
			IOWR_32DIRECT(addr, x, 0);
		}
	}
}
 84060a4:	e037883a 	mov	sp,fp
 84060a8:	df000017 	ldw	fp,0(sp)
 84060ac:	dec00104 	addi	sp,sp,4
 84060b0:	f800283a 	ret

084060b4 <alt_up_pixel_buffer_dma_draw_box>:

void alt_up_pixel_buffer_dma_draw_box(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int y0, int x1, int y1, int color, int backbuffer)
/* This function draws a filled box. */
{
 84060b4:	deffed04 	addi	sp,sp,-76
 84060b8:	df001215 	stw	fp,72(sp)
 84060bc:	df001204 	addi	fp,sp,72
 84060c0:	e13fee15 	stw	r4,-72(fp)
 84060c4:	e17fef15 	stw	r5,-68(fp)
 84060c8:	e1bff015 	stw	r6,-64(fp)
 84060cc:	e1fff115 	stw	r7,-60(fp)
	register unsigned int addr;
	register unsigned int limit_x = pixel_buffer->x_resolution;
 84060d0:	e0bfee17 	ldw	r2,-72(fp)
 84060d4:	10800f17 	ldw	r2,60(r2)
 84060d8:	e0bffe15 	stw	r2,-8(fp)
	register unsigned int limit_y = pixel_buffer->y_resolution;
 84060dc:	e0bfee17 	ldw	r2,-72(fp)
 84060e0:	10801017 	ldw	r2,64(r2)
 84060e4:	e0bffd15 	stw	r2,-12(fp)
	register unsigned int temp;
	register unsigned int l_x = x0;
 84060e8:	e0bfef17 	ldw	r2,-68(fp)
 84060ec:	e0bffb15 	stw	r2,-20(fp)
	register unsigned int r_x = x1;
 84060f0:	e0fff117 	ldw	r3,-60(fp)
 84060f4:	e0fffa15 	stw	r3,-24(fp)
	register unsigned int t_y = y0;
 84060f8:	e13ff017 	ldw	r4,-64(fp)
 84060fc:	e13ff915 	stw	r4,-28(fp)
	register unsigned int b_y = y1;
 8406100:	e0800117 	ldw	r2,4(fp)
 8406104:	e0bff815 	stw	r2,-32(fp)
	register unsigned int local_color = color;
 8406108:	e0c00217 	ldw	r3,8(fp)
 840610c:	e0fff715 	stw	r3,-36(fp)
	
	/* Check coordinates */
	if (l_x > r_x)
 8406110:	e13ffa17 	ldw	r4,-24(fp)
 8406114:	e0bffb17 	ldw	r2,-20(fp)
 8406118:	2080062e 	bgeu	r4,r2,8406134 <alt_up_pixel_buffer_dma_draw_box+0x80>
	{
		temp = l_x;
 840611c:	e0fffb17 	ldw	r3,-20(fp)
 8406120:	e0fffc15 	stw	r3,-16(fp)
		l_x = r_x;
 8406124:	e13ffa17 	ldw	r4,-24(fp)
 8406128:	e13ffb15 	stw	r4,-20(fp)
		r_x = temp;
 840612c:	e0bffc17 	ldw	r2,-16(fp)
 8406130:	e0bffa15 	stw	r2,-24(fp)
	}
	if (t_y > b_y)
 8406134:	e0fff817 	ldw	r3,-32(fp)
 8406138:	e13ff917 	ldw	r4,-28(fp)
 840613c:	1900062e 	bgeu	r3,r4,8406158 <alt_up_pixel_buffer_dma_draw_box+0xa4>
	{
		temp = t_y;
 8406140:	e0bff917 	ldw	r2,-28(fp)
 8406144:	e0bffc15 	stw	r2,-16(fp)
		t_y = b_y;
 8406148:	e0fff817 	ldw	r3,-32(fp)
 840614c:	e0fff915 	stw	r3,-28(fp)
		b_y = temp;
 8406150:	e13ffc17 	ldw	r4,-16(fp)
 8406154:	e13ff815 	stw	r4,-32(fp)
	}
	if ((l_x >= limit_x) || (t_y >= limit_y) || (r_x < 0) || (b_y < 0))
 8406158:	e0bffb17 	ldw	r2,-20(fp)
 840615c:	e0fffe17 	ldw	r3,-8(fp)
 8406160:	10c10d2e 	bgeu	r2,r3,8406598 <alt_up_pixel_buffer_dma_draw_box+0x4e4>
 8406164:	e13ff917 	ldw	r4,-28(fp)
 8406168:	e0bffd17 	ldw	r2,-12(fp)
 840616c:	20800136 	bltu	r4,r2,8406174 <alt_up_pixel_buffer_dma_draw_box+0xc0>
	{
		/* Drawing outside of the window, so don't bother. */
		return;
 8406170:	00010906 	br	8406598 <alt_up_pixel_buffer_dma_draw_box+0x4e4>
	/* Clip the box and draw only within the confines of the screen. */
	if (l_x < 0)
	{
		l_x = 0;
	}
	if (r_x >= limit_x)
 8406174:	e0fffa17 	ldw	r3,-24(fp)
 8406178:	e13ffe17 	ldw	r4,-8(fp)
 840617c:	19000336 	bltu	r3,r4,840618c <alt_up_pixel_buffer_dma_draw_box+0xd8>
	{
		r_x = limit_x - 1;
 8406180:	e0bffe17 	ldw	r2,-8(fp)
 8406184:	10bfffc4 	addi	r2,r2,-1
 8406188:	e0bffa15 	stw	r2,-24(fp)
	}
	if (t_y < 0)
	{
		t_y = 0;
	}
	if (b_y >= limit_y)
 840618c:	e0fff817 	ldw	r3,-32(fp)
 8406190:	e13ffd17 	ldw	r4,-12(fp)
 8406194:	19000336 	bltu	r3,r4,84061a4 <alt_up_pixel_buffer_dma_draw_box+0xf0>
	{
		b_y = limit_y - 1;
 8406198:	e0bffd17 	ldw	r2,-12(fp)
 840619c:	10bfffc4 	addi	r2,r2,-1
 84061a0:	e0bff815 	stw	r2,-32(fp)
	}

	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
 84061a4:	e0800317 	ldw	r2,12(fp)
 84061a8:	10800058 	cmpnei	r2,r2,1
 84061ac:	1000041e 	bne	r2,zero,84061c0 <alt_up_pixel_buffer_dma_draw_box+0x10c>
		addr = pixel_buffer->back_buffer_start_address;
 84061b0:	e0bfee17 	ldw	r2,-72(fp)
 84061b4:	10800c17 	ldw	r2,48(r2)
 84061b8:	e0bfff15 	stw	r2,-4(fp)
 84061bc:	00000306 	br	84061cc <alt_up_pixel_buffer_dma_draw_box+0x118>
	else
		addr = pixel_buffer->buffer_start_address;
 84061c0:	e0bfee17 	ldw	r2,-72(fp)
 84061c4:	10800b17 	ldw	r2,44(r2)
 84061c8:	e0bfff15 	stw	r2,-4(fp)

	/* Draw the box using one of the addressing modes. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
 84061cc:	e0bfee17 	ldw	r2,-72(fp)
 84061d0:	10800d17 	ldw	r2,52(r2)
 84061d4:	1004c03a 	cmpne	r2,r2,zero
 84061d8:	1000721e 	bne	r2,zero,84063a4 <alt_up_pixel_buffer_dma_draw_box+0x2f0>
		/* Draw a box of a given color on the screen using the XY addressing mode. */
		register unsigned int x,y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
 84061dc:	e0bfee17 	ldw	r2,-72(fp)
 84061e0:	10801317 	ldw	r2,76(r2)
 84061e4:	e0bff415 	stw	r2,-48(fp)
		addr = addr + (t_y << offset_y);
 84061e8:	e0bff417 	ldw	r2,-48(fp)
 84061ec:	e0fff917 	ldw	r3,-28(fp)
 84061f0:	1884983a 	sll	r2,r3,r2
 84061f4:	e13fff17 	ldw	r4,-4(fp)
 84061f8:	2089883a 	add	r4,r4,r2
 84061fc:	e13fff15 	stw	r4,-4(fp)
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
 8406200:	e0bfee17 	ldw	r2,-72(fp)
 8406204:	10800e17 	ldw	r2,56(r2)
 8406208:	10800058 	cmpnei	r2,r2,1
 840620c:	10001e1e 	bne	r2,zero,8406288 <alt_up_pixel_buffer_dma_draw_box+0x1d4>
			for (y = t_y; y <= b_y; y++)
 8406210:	e0bff917 	ldw	r2,-28(fp)
 8406214:	e0bff515 	stw	r2,-44(fp)
 8406218:	00001706 	br	8406278 <alt_up_pixel_buffer_dma_draw_box+0x1c4>
			{
				for (x = l_x; x <= r_x; x++)
 840621c:	e0fffb17 	ldw	r3,-20(fp)
 8406220:	e0fff615 	stw	r3,-40(fp)
 8406224:	00000806 	br	8406248 <alt_up_pixel_buffer_dma_draw_box+0x194>
				{
					IOWR_8DIRECT(addr, x, local_color);
 8406228:	e0ffff17 	ldw	r3,-4(fp)
 840622c:	e0bff617 	ldw	r2,-40(fp)
 8406230:	1885883a 	add	r2,r3,r2
 8406234:	e0fff717 	ldw	r3,-36(fp)
 8406238:	10c00025 	stbio	r3,0(r2)
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
 840623c:	e13ff617 	ldw	r4,-40(fp)
 8406240:	21000044 	addi	r4,r4,1
 8406244:	e13ff615 	stw	r4,-40(fp)
 8406248:	e0bffa17 	ldw	r2,-24(fp)
 840624c:	e0fff617 	ldw	r3,-40(fp)
 8406250:	10fff52e 	bgeu	r2,r3,8406228 <alt_up_pixel_buffer_dma_draw_box+0x174>
				{
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + (1 << offset_y);
 8406254:	e0fff417 	ldw	r3,-48(fp)
 8406258:	00800044 	movi	r2,1
 840625c:	10c4983a 	sll	r2,r2,r3
 8406260:	e13fff17 	ldw	r4,-4(fp)
 8406264:	2089883a 	add	r4,r4,r2
 8406268:	e13fff15 	stw	r4,-4(fp)
		addr = addr + (t_y << offset_y);
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
 840626c:	e0bff517 	ldw	r2,-44(fp)
 8406270:	10800044 	addi	r2,r2,1
 8406274:	e0bff515 	stw	r2,-44(fp)
 8406278:	e0fff817 	ldw	r3,-32(fp)
 840627c:	e13ff517 	ldw	r4,-44(fp)
 8406280:	193fe62e 	bgeu	r3,r4,840621c <alt_up_pixel_buffer_dma_draw_box+0x168>
 8406284:	0000c406 	br	8406598 <alt_up_pixel_buffer_dma_draw_box+0x4e4>
				{
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
 8406288:	e0bfee17 	ldw	r2,-72(fp)
 840628c:	10800e17 	ldw	r2,56(r2)
 8406290:	10800098 	cmpnei	r2,r2,2
 8406294:	1000211e 	bne	r2,zero,840631c <alt_up_pixel_buffer_dma_draw_box+0x268>
			for (y = t_y; y <= b_y; y++)
 8406298:	e0bff917 	ldw	r2,-28(fp)
 840629c:	e0bff515 	stw	r2,-44(fp)
 84062a0:	00001a06 	br	840630c <alt_up_pixel_buffer_dma_draw_box+0x258>
			{
				for (x = l_x; x <= r_x; x++)
 84062a4:	e0fffb17 	ldw	r3,-20(fp)
 84062a8:	e0fff615 	stw	r3,-40(fp)
 84062ac:	00000b06 	br	84062dc <alt_up_pixel_buffer_dma_draw_box+0x228>
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
 84062b0:	e13ff617 	ldw	r4,-40(fp)
 84062b4:	e13ff617 	ldw	r4,-40(fp)
 84062b8:	2105883a 	add	r2,r4,r4
 84062bc:	1007883a 	mov	r3,r2
 84062c0:	e0bfff17 	ldw	r2,-4(fp)
 84062c4:	1885883a 	add	r2,r3,r2
 84062c8:	e0fff717 	ldw	r3,-36(fp)
 84062cc:	10c0002d 	sthio	r3,0(r2)
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
 84062d0:	e0bff617 	ldw	r2,-40(fp)
 84062d4:	10800044 	addi	r2,r2,1
 84062d8:	e0bff615 	stw	r2,-40(fp)
 84062dc:	e0fffa17 	ldw	r3,-24(fp)
 84062e0:	e13ff617 	ldw	r4,-40(fp)
 84062e4:	193ff22e 	bgeu	r3,r4,84062b0 <alt_up_pixel_buffer_dma_draw_box+0x1fc>
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
				}
				addr = addr + (1 << offset_y);
 84062e8:	e0fff417 	ldw	r3,-48(fp)
 84062ec:	00800044 	movi	r2,1
 84062f0:	10c4983a 	sll	r2,r2,r3
 84062f4:	e0ffff17 	ldw	r3,-4(fp)
 84062f8:	1887883a 	add	r3,r3,r2
 84062fc:	e0ffff15 	stw	r3,-4(fp)
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
 8406300:	e13ff517 	ldw	r4,-44(fp)
 8406304:	21000044 	addi	r4,r4,1
 8406308:	e13ff515 	stw	r4,-44(fp)
 840630c:	e0bff817 	ldw	r2,-32(fp)
 8406310:	e0fff517 	ldw	r3,-44(fp)
 8406314:	10ffe32e 	bgeu	r2,r3,84062a4 <alt_up_pixel_buffer_dma_draw_box+0x1f0>
 8406318:	00009f06 	br	8406598 <alt_up_pixel_buffer_dma_draw_box+0x4e4>
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
 840631c:	e13ff917 	ldw	r4,-28(fp)
 8406320:	e13ff515 	stw	r4,-44(fp)
 8406324:	00001b06 	br	8406394 <alt_up_pixel_buffer_dma_draw_box+0x2e0>
			{
				for (x = l_x; x <= r_x; x++)
 8406328:	e0bffb17 	ldw	r2,-20(fp)
 840632c:	e0bff615 	stw	r2,-40(fp)
 8406330:	00000c06 	br	8406364 <alt_up_pixel_buffer_dma_draw_box+0x2b0>
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
 8406334:	e0fff617 	ldw	r3,-40(fp)
 8406338:	e0fff617 	ldw	r3,-40(fp)
 840633c:	18c5883a 	add	r2,r3,r3
 8406340:	1085883a 	add	r2,r2,r2
 8406344:	1007883a 	mov	r3,r2
 8406348:	e0bfff17 	ldw	r2,-4(fp)
 840634c:	1885883a 	add	r2,r3,r2
 8406350:	e0fff717 	ldw	r3,-36(fp)
 8406354:	10c00035 	stwio	r3,0(r2)
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
 8406358:	e13ff617 	ldw	r4,-40(fp)
 840635c:	21000044 	addi	r4,r4,1
 8406360:	e13ff615 	stw	r4,-40(fp)
 8406364:	e0bffa17 	ldw	r2,-24(fp)
 8406368:	e0fff617 	ldw	r3,-40(fp)
 840636c:	10fff12e 	bgeu	r2,r3,8406334 <alt_up_pixel_buffer_dma_draw_box+0x280>
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
				}
				addr = addr + (1 << offset_y);
 8406370:	e0fff417 	ldw	r3,-48(fp)
 8406374:	00800044 	movi	r2,1
 8406378:	10c4983a 	sll	r2,r2,r3
 840637c:	e13fff17 	ldw	r4,-4(fp)
 8406380:	2089883a 	add	r4,r4,r2
 8406384:	e13fff15 	stw	r4,-4(fp)
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
 8406388:	e0bff517 	ldw	r2,-44(fp)
 840638c:	10800044 	addi	r2,r2,1
 8406390:	e0bff515 	stw	r2,-44(fp)
 8406394:	e0fff817 	ldw	r3,-32(fp)
 8406398:	e13ff517 	ldw	r4,-44(fp)
 840639c:	193fe22e 	bgeu	r3,r4,8406328 <alt_up_pixel_buffer_dma_draw_box+0x274>
 84063a0:	00007d06 	br	8406598 <alt_up_pixel_buffer_dma_draw_box+0x4e4>
	} else {
		/* Draw a box of a given color on the screen using the linear addressing mode. */
		register unsigned int x,y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
 84063a4:	e0bfee17 	ldw	r2,-72(fp)
 84063a8:	10800e17 	ldw	r2,56(r2)
 84063ac:	10800058 	cmpnei	r2,r2,1
 84063b0:	1000221e 	bne	r2,zero,840643c <alt_up_pixel_buffer_dma_draw_box+0x388>
			addr = addr + t_y * limit_x;
 84063b4:	e0fff917 	ldw	r3,-28(fp)
 84063b8:	e13ffe17 	ldw	r4,-8(fp)
 84063bc:	1905383a 	mul	r2,r3,r4
 84063c0:	e0ffff17 	ldw	r3,-4(fp)
 84063c4:	1887883a 	add	r3,r3,r2
 84063c8:	e0ffff15 	stw	r3,-4(fp)
			for (y = t_y; y <= b_y; y++)
 84063cc:	e13ff917 	ldw	r4,-28(fp)
 84063d0:	e13ff215 	stw	r4,-56(fp)
 84063d4:	00001506 	br	840642c <alt_up_pixel_buffer_dma_draw_box+0x378>
			{
				for (x = l_x; x <= r_x; x++)
 84063d8:	e0bffb17 	ldw	r2,-20(fp)
 84063dc:	e0bff315 	stw	r2,-52(fp)
 84063e0:	00000806 	br	8406404 <alt_up_pixel_buffer_dma_draw_box+0x350>
				{
					IOWR_8DIRECT(addr, x, local_color);
 84063e4:	e0ffff17 	ldw	r3,-4(fp)
 84063e8:	e0bff317 	ldw	r2,-52(fp)
 84063ec:	1885883a 	add	r2,r3,r2
 84063f0:	e0fff717 	ldw	r3,-36(fp)
 84063f4:	10c00025 	stbio	r3,0(r2)
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
 84063f8:	e0fff317 	ldw	r3,-52(fp)
 84063fc:	18c00044 	addi	r3,r3,1
 8406400:	e0fff315 	stw	r3,-52(fp)
 8406404:	e13ffa17 	ldw	r4,-24(fp)
 8406408:	e0bff317 	ldw	r2,-52(fp)
 840640c:	20bff52e 	bgeu	r4,r2,84063e4 <alt_up_pixel_buffer_dma_draw_box+0x330>
				{
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + limit_x;
 8406410:	e0ffff17 	ldw	r3,-4(fp)
 8406414:	e13ffe17 	ldw	r4,-8(fp)
 8406418:	1907883a 	add	r3,r3,r4
 840641c:	e0ffff15 	stw	r3,-4(fp)
		register unsigned int x,y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
 8406420:	e0bff217 	ldw	r2,-56(fp)
 8406424:	10800044 	addi	r2,r2,1
 8406428:	e0bff215 	stw	r2,-56(fp)
 840642c:	e0fff817 	ldw	r3,-32(fp)
 8406430:	e13ff217 	ldw	r4,-56(fp)
 8406434:	193fe82e 	bgeu	r3,r4,84063d8 <alt_up_pixel_buffer_dma_draw_box+0x324>
 8406438:	00005706 	br	8406598 <alt_up_pixel_buffer_dma_draw_box+0x4e4>
				{
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
 840643c:	e0bfee17 	ldw	r2,-72(fp)
 8406440:	10800e17 	ldw	r2,56(r2)
 8406444:	10800098 	cmpnei	r2,r2,2
 8406448:	1000291e 	bne	r2,zero,84064f0 <alt_up_pixel_buffer_dma_draw_box+0x43c>
			limit_x = limit_x << 1;
 840644c:	e0fffe17 	ldw	r3,-8(fp)
 8406450:	e0fffe17 	ldw	r3,-8(fp)
 8406454:	18c5883a 	add	r2,r3,r3
 8406458:	e0bffe15 	stw	r2,-8(fp)
			addr = addr + t_y * limit_x;
 840645c:	e13ff917 	ldw	r4,-28(fp)
 8406460:	e0fffe17 	ldw	r3,-8(fp)
 8406464:	20c5383a 	mul	r2,r4,r3
 8406468:	e13fff17 	ldw	r4,-4(fp)
 840646c:	2089883a 	add	r4,r4,r2
 8406470:	e13fff15 	stw	r4,-4(fp)
			for (y = t_y; y <= b_y; y++)
 8406474:	e0bff917 	ldw	r2,-28(fp)
 8406478:	e0bff215 	stw	r2,-56(fp)
 840647c:	00001806 	br	84064e0 <alt_up_pixel_buffer_dma_draw_box+0x42c>
			{
				for (x = l_x; x <= r_x; x++)
 8406480:	e0fffb17 	ldw	r3,-20(fp)
 8406484:	e0fff315 	stw	r3,-52(fp)
 8406488:	00000b06 	br	84064b8 <alt_up_pixel_buffer_dma_draw_box+0x404>
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
 840648c:	e13ff317 	ldw	r4,-52(fp)
 8406490:	e13ff317 	ldw	r4,-52(fp)
 8406494:	2105883a 	add	r2,r4,r4
 8406498:	1007883a 	mov	r3,r2
 840649c:	e0bfff17 	ldw	r2,-4(fp)
 84064a0:	1885883a 	add	r2,r3,r2
 84064a4:	e0fff717 	ldw	r3,-36(fp)
 84064a8:	10c0002d 	sthio	r3,0(r2)
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
 84064ac:	e0bff317 	ldw	r2,-52(fp)
 84064b0:	10800044 	addi	r2,r2,1
 84064b4:	e0bff315 	stw	r2,-52(fp)
 84064b8:	e0fffa17 	ldw	r3,-24(fp)
 84064bc:	e13ff317 	ldw	r4,-52(fp)
 84064c0:	193ff22e 	bgeu	r3,r4,840648c <alt_up_pixel_buffer_dma_draw_box+0x3d8>
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
				}
				addr = addr + limit_x;
 84064c4:	e0bfff17 	ldw	r2,-4(fp)
 84064c8:	e0fffe17 	ldw	r3,-8(fp)
 84064cc:	10c5883a 	add	r2,r2,r3
 84064d0:	e0bfff15 	stw	r2,-4(fp)
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
 84064d4:	e13ff217 	ldw	r4,-56(fp)
 84064d8:	21000044 	addi	r4,r4,1
 84064dc:	e13ff215 	stw	r4,-56(fp)
 84064e0:	e0bff817 	ldw	r2,-32(fp)
 84064e4:	e0fff217 	ldw	r3,-56(fp)
 84064e8:	10ffe52e 	bgeu	r2,r3,8406480 <alt_up_pixel_buffer_dma_draw_box+0x3cc>
 84064ec:	00002a06 	br	8406598 <alt_up_pixel_buffer_dma_draw_box+0x4e4>
				addr = addr + limit_x;
			}
		}
		else
		{
			limit_x = limit_x << 2;
 84064f0:	e13ffe17 	ldw	r4,-8(fp)
 84064f4:	e13ffe17 	ldw	r4,-8(fp)
 84064f8:	2105883a 	add	r2,r4,r4
 84064fc:	1085883a 	add	r2,r2,r2
 8406500:	e0bffe15 	stw	r2,-8(fp)
			addr = addr + t_y * limit_x;
 8406504:	e0fff917 	ldw	r3,-28(fp)
 8406508:	e13ffe17 	ldw	r4,-8(fp)
 840650c:	1905383a 	mul	r2,r3,r4
 8406510:	e0ffff17 	ldw	r3,-4(fp)
 8406514:	1887883a 	add	r3,r3,r2
 8406518:	e0ffff15 	stw	r3,-4(fp)
			for (y = t_y; y <= b_y; y++)
 840651c:	e13ff917 	ldw	r4,-28(fp)
 8406520:	e13ff215 	stw	r4,-56(fp)
 8406524:	00001906 	br	840658c <alt_up_pixel_buffer_dma_draw_box+0x4d8>
			{
				for (x = l_x; x <= r_x; x++)
 8406528:	e0bffb17 	ldw	r2,-20(fp)
 840652c:	e0bff315 	stw	r2,-52(fp)
 8406530:	00000c06 	br	8406564 <alt_up_pixel_buffer_dma_draw_box+0x4b0>
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
 8406534:	e0fff317 	ldw	r3,-52(fp)
 8406538:	e0fff317 	ldw	r3,-52(fp)
 840653c:	18c5883a 	add	r2,r3,r3
 8406540:	1085883a 	add	r2,r2,r2
 8406544:	1007883a 	mov	r3,r2
 8406548:	e0bfff17 	ldw	r2,-4(fp)
 840654c:	1885883a 	add	r2,r3,r2
 8406550:	e0fff717 	ldw	r3,-36(fp)
 8406554:	10c00035 	stwio	r3,0(r2)
		{
			limit_x = limit_x << 2;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
 8406558:	e13ff317 	ldw	r4,-52(fp)
 840655c:	21000044 	addi	r4,r4,1
 8406560:	e13ff315 	stw	r4,-52(fp)
 8406564:	e0bffa17 	ldw	r2,-24(fp)
 8406568:	e0fff317 	ldw	r3,-52(fp)
 840656c:	10fff12e 	bgeu	r2,r3,8406534 <alt_up_pixel_buffer_dma_draw_box+0x480>
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
				}
				addr = addr + limit_x;
 8406570:	e13fff17 	ldw	r4,-4(fp)
 8406574:	e0bffe17 	ldw	r2,-8(fp)
 8406578:	2089883a 	add	r4,r4,r2
 840657c:	e13fff15 	stw	r4,-4(fp)
		}
		else
		{
			limit_x = limit_x << 2;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
 8406580:	e0fff217 	ldw	r3,-56(fp)
 8406584:	18c00044 	addi	r3,r3,1
 8406588:	e0fff215 	stw	r3,-56(fp)
 840658c:	e13ff817 	ldw	r4,-32(fp)
 8406590:	e0bff217 	ldw	r2,-56(fp)
 8406594:	20bfe42e 	bgeu	r4,r2,8406528 <alt_up_pixel_buffer_dma_draw_box+0x474>
				}
				addr = addr + limit_x;
			}
		}
	}
}
 8406598:	e037883a 	mov	sp,fp
 840659c:	df000017 	ldw	fp,0(sp)
 84065a0:	dec00104 	addi	sp,sp,4
 84065a4:	f800283a 	ret

084065a8 <alt_up_pixel_buffer_dma_draw_hline>:

void alt_up_pixel_buffer_dma_draw_hline(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int x1, int y, int color, int backbuffer)
/* This method draws a horizontal line. This method is faster than using the line method because we know the direction of the line. */
{
 84065a8:	defff204 	addi	sp,sp,-56
 84065ac:	df000d15 	stw	fp,52(sp)
 84065b0:	df000d04 	addi	fp,sp,52
 84065b4:	e13ff315 	stw	r4,-52(fp)
 84065b8:	e17ff415 	stw	r5,-48(fp)
 84065bc:	e1bff515 	stw	r6,-44(fp)
 84065c0:	e1fff615 	stw	r7,-40(fp)
	register unsigned int addr;
	register unsigned int limit_x = pixel_buffer->x_resolution;
 84065c4:	e0bff317 	ldw	r2,-52(fp)
 84065c8:	10800f17 	ldw	r2,60(r2)
 84065cc:	e0bffe15 	stw	r2,-8(fp)
	register unsigned int limit_y = pixel_buffer->y_resolution;
 84065d0:	e0bff317 	ldw	r2,-52(fp)
 84065d4:	10801017 	ldw	r2,64(r2)
 84065d8:	e0bffd15 	stw	r2,-12(fp)
	register unsigned int temp;
	register unsigned int l_x = x0;
 84065dc:	e0bff417 	ldw	r2,-48(fp)
 84065e0:	e0bffc15 	stw	r2,-16(fp)
	register unsigned int r_x = x1;
 84065e4:	e0fff517 	ldw	r3,-44(fp)
 84065e8:	e0fffb15 	stw	r3,-20(fp)
	register unsigned int line_y = y;
 84065ec:	e13ff617 	ldw	r4,-40(fp)
 84065f0:	e13ffa15 	stw	r4,-24(fp)
	register unsigned int local_color = color;
 84065f4:	e0800117 	ldw	r2,4(fp)
 84065f8:	e0bff915 	stw	r2,-28(fp)
	
	/* Check coordinates */
	if (l_x > r_x)
 84065fc:	e0fffb17 	ldw	r3,-20(fp)
 8406600:	e13ffc17 	ldw	r4,-16(fp)
 8406604:	1900042e 	bgeu	r3,r4,8406618 <alt_up_pixel_buffer_dma_draw_hline+0x70>
	{
		temp = l_x;
 8406608:	e0bffc17 	ldw	r2,-16(fp)
		l_x = r_x;
 840660c:	e0fffb17 	ldw	r3,-20(fp)
 8406610:	e0fffc15 	stw	r3,-16(fp)
		r_x = temp;
 8406614:	e0bffb15 	stw	r2,-20(fp)
	}
	if ((l_x >= limit_x) || (line_y >= limit_y) || (r_x < 0) || (line_y < 0))
 8406618:	e13ffc17 	ldw	r4,-16(fp)
 840661c:	e0bffe17 	ldw	r2,-8(fp)
 8406620:	2080b12e 	bgeu	r4,r2,84068e8 <alt_up_pixel_buffer_dma_draw_hline+0x340>
 8406624:	e0fffa17 	ldw	r3,-24(fp)
 8406628:	e13ffd17 	ldw	r4,-12(fp)
 840662c:	19000136 	bltu	r3,r4,8406634 <alt_up_pixel_buffer_dma_draw_hline+0x8c>
	{
		/* Drawing outside of the window, so don't bother. */
		return;
 8406630:	0000ad06 	br	84068e8 <alt_up_pixel_buffer_dma_draw_hline+0x340>
	/* Clip the box and draw only within the confines of the screen. */
	if (l_x < 0)
	{
		l_x = 0;
	}
	if (r_x >= limit_x)
 8406634:	e0bffb17 	ldw	r2,-20(fp)
 8406638:	e0fffe17 	ldw	r3,-8(fp)
 840663c:	10c00336 	bltu	r2,r3,840664c <alt_up_pixel_buffer_dma_draw_hline+0xa4>
	{
		r_x = limit_x - 1;
 8406640:	e13ffe17 	ldw	r4,-8(fp)
 8406644:	213fffc4 	addi	r4,r4,-1
 8406648:	e13ffb15 	stw	r4,-20(fp)
	}

	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
 840664c:	e0800217 	ldw	r2,8(fp)
 8406650:	10800058 	cmpnei	r2,r2,1
 8406654:	1000041e 	bne	r2,zero,8406668 <alt_up_pixel_buffer_dma_draw_hline+0xc0>
		addr = pixel_buffer->back_buffer_start_address;
 8406658:	e0bff317 	ldw	r2,-52(fp)
 840665c:	10800c17 	ldw	r2,48(r2)
 8406660:	e0bfff15 	stw	r2,-4(fp)
 8406664:	00000306 	br	8406674 <alt_up_pixel_buffer_dma_draw_hline+0xcc>
	else
		addr = pixel_buffer->buffer_start_address;
 8406668:	e0bff317 	ldw	r2,-52(fp)
 840666c:	10800b17 	ldw	r2,44(r2)
 8406670:	e0bfff15 	stw	r2,-4(fp)

	/* Draw a horizontal line using one of the addressing modes. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
 8406674:	e0bff317 	ldw	r2,-52(fp)
 8406678:	10800d17 	ldw	r2,52(r2)
 840667c:	1004c03a 	cmpne	r2,r2,zero
 8406680:	1000431e 	bne	r2,zero,8406790 <alt_up_pixel_buffer_dma_draw_hline+0x1e8>
		/* Draw a horizontal line of a given color on the screen using the XY addressing mode. */
		register unsigned int x;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
 8406684:	e0bff317 	ldw	r2,-52(fp)
 8406688:	10801317 	ldw	r2,76(r2)
		addr = addr + (line_y << offset_y);
 840668c:	e0fffa17 	ldw	r3,-24(fp)
 8406690:	1884983a 	sll	r2,r3,r2
 8406694:	e13fff17 	ldw	r4,-4(fp)
 8406698:	2089883a 	add	r4,r4,r2
 840669c:	e13fff15 	stw	r4,-4(fp)
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a horizontal line. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
 84066a0:	e0bff317 	ldw	r2,-52(fp)
 84066a4:	10800e17 	ldw	r2,56(r2)
 84066a8:	10800058 	cmpnei	r2,r2,1
 84066ac:	10000f1e 	bne	r2,zero,84066ec <alt_up_pixel_buffer_dma_draw_hline+0x144>
			for (x = l_x; x <= r_x; x++)
 84066b0:	e0bffc17 	ldw	r2,-16(fp)
 84066b4:	e0bff815 	stw	r2,-32(fp)
 84066b8:	00000806 	br	84066dc <alt_up_pixel_buffer_dma_draw_hline+0x134>
			{
				IOWR_8DIRECT(addr, x, local_color);
 84066bc:	e0ffff17 	ldw	r3,-4(fp)
 84066c0:	e0bff817 	ldw	r2,-32(fp)
 84066c4:	1885883a 	add	r2,r3,r2
 84066c8:	e0fff917 	ldw	r3,-28(fp)
 84066cc:	10c00025 	stbio	r3,0(r2)
		addr = addr + (line_y << offset_y);
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a horizontal line. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (x = l_x; x <= r_x; x++)
 84066d0:	e0fff817 	ldw	r3,-32(fp)
 84066d4:	18c00044 	addi	r3,r3,1
 84066d8:	e0fff815 	stw	r3,-32(fp)
 84066dc:	e13ffb17 	ldw	r4,-20(fp)
 84066e0:	e0bff817 	ldw	r2,-32(fp)
 84066e4:	20bff52e 	bgeu	r4,r2,84066bc <alt_up_pixel_buffer_dma_draw_hline+0x114>
 84066e8:	00007f06 	br	84068e8 <alt_up_pixel_buffer_dma_draw_hline+0x340>
			{
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
 84066ec:	e0bff317 	ldw	r2,-52(fp)
 84066f0:	10800e17 	ldw	r2,56(r2)
 84066f4:	10800098 	cmpnei	r2,r2,2
 84066f8:	1000121e 	bne	r2,zero,8406744 <alt_up_pixel_buffer_dma_draw_hline+0x19c>
			for (x = l_x; x <= r_x; x++)
 84066fc:	e0fffc17 	ldw	r3,-16(fp)
 8406700:	e0fff815 	stw	r3,-32(fp)
 8406704:	00000b06 	br	8406734 <alt_up_pixel_buffer_dma_draw_hline+0x18c>
			{
				IOWR_16DIRECT(addr, x << 1, local_color);
 8406708:	e13ff817 	ldw	r4,-32(fp)
 840670c:	e13ff817 	ldw	r4,-32(fp)
 8406710:	2105883a 	add	r2,r4,r4
 8406714:	1007883a 	mov	r3,r2
 8406718:	e0bfff17 	ldw	r2,-4(fp)
 840671c:	1885883a 	add	r2,r3,r2
 8406720:	e0fff917 	ldw	r3,-28(fp)
 8406724:	10c0002d 	sthio	r3,0(r2)
			for (x = l_x; x <= r_x; x++)
			{
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (x = l_x; x <= r_x; x++)
 8406728:	e0bff817 	ldw	r2,-32(fp)
 840672c:	10800044 	addi	r2,r2,1
 8406730:	e0bff815 	stw	r2,-32(fp)
 8406734:	e0fffb17 	ldw	r3,-20(fp)
 8406738:	e13ff817 	ldw	r4,-32(fp)
 840673c:	193ff22e 	bgeu	r3,r4,8406708 <alt_up_pixel_buffer_dma_draw_hline+0x160>
 8406740:	00006906 	br	84068e8 <alt_up_pixel_buffer_dma_draw_hline+0x340>
				IOWR_16DIRECT(addr, x << 1, local_color);
			}
		}
		else
		{
			for (x = l_x; x <= r_x; x++)
 8406744:	e0bffc17 	ldw	r2,-16(fp)
 8406748:	e0bff815 	stw	r2,-32(fp)
 840674c:	00000c06 	br	8406780 <alt_up_pixel_buffer_dma_draw_hline+0x1d8>
			{
				IOWR_32DIRECT(addr, x << 2, local_color);
 8406750:	e0fff817 	ldw	r3,-32(fp)
 8406754:	e0fff817 	ldw	r3,-32(fp)
 8406758:	18c5883a 	add	r2,r3,r3
 840675c:	1085883a 	add	r2,r2,r2
 8406760:	1007883a 	mov	r3,r2
 8406764:	e0bfff17 	ldw	r2,-4(fp)
 8406768:	1885883a 	add	r2,r3,r2
 840676c:	e0fff917 	ldw	r3,-28(fp)
 8406770:	10c00035 	stwio	r3,0(r2)
				IOWR_16DIRECT(addr, x << 1, local_color);
			}
		}
		else
		{
			for (x = l_x; x <= r_x; x++)
 8406774:	e13ff817 	ldw	r4,-32(fp)
 8406778:	21000044 	addi	r4,r4,1
 840677c:	e13ff815 	stw	r4,-32(fp)
 8406780:	e0bffb17 	ldw	r2,-20(fp)
 8406784:	e0fff817 	ldw	r3,-32(fp)
 8406788:	10fff12e 	bgeu	r2,r3,8406750 <alt_up_pixel_buffer_dma_draw_hline+0x1a8>
 840678c:	00005606 	br	84068e8 <alt_up_pixel_buffer_dma_draw_hline+0x340>
	} else {
		/* Draw a horizontal line of a given color on the screen using the linear addressing mode. */
		register unsigned int x;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
 8406790:	e0bff317 	ldw	r2,-52(fp)
 8406794:	10800e17 	ldw	r2,56(r2)
 8406798:	10800058 	cmpnei	r2,r2,1
 840679c:	1000151e 	bne	r2,zero,84067f4 <alt_up_pixel_buffer_dma_draw_hline+0x24c>
			addr = addr + line_y * limit_x;
 84067a0:	e13ffa17 	ldw	r4,-24(fp)
 84067a4:	e0fffe17 	ldw	r3,-8(fp)
 84067a8:	20c5383a 	mul	r2,r4,r3
 84067ac:	e13fff17 	ldw	r4,-4(fp)
 84067b0:	2089883a 	add	r4,r4,r2
 84067b4:	e13fff15 	stw	r4,-4(fp)
			for (x = l_x; x <= r_x; x++)
 84067b8:	e0bffc17 	ldw	r2,-16(fp)
 84067bc:	e0bff715 	stw	r2,-36(fp)
 84067c0:	00000806 	br	84067e4 <alt_up_pixel_buffer_dma_draw_hline+0x23c>
			{
				IOWR_8DIRECT(addr, x, local_color);
 84067c4:	e0ffff17 	ldw	r3,-4(fp)
 84067c8:	e0bff717 	ldw	r2,-36(fp)
 84067cc:	1885883a 	add	r2,r3,r2
 84067d0:	e0fff917 	ldw	r3,-28(fp)
 84067d4:	10c00025 	stbio	r3,0(r2)
		register unsigned int x;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + line_y * limit_x;
			for (x = l_x; x <= r_x; x++)
 84067d8:	e0fff717 	ldw	r3,-36(fp)
 84067dc:	18c00044 	addi	r3,r3,1
 84067e0:	e0fff715 	stw	r3,-36(fp)
 84067e4:	e13ffb17 	ldw	r4,-20(fp)
 84067e8:	e0bff717 	ldw	r2,-36(fp)
 84067ec:	20bff52e 	bgeu	r4,r2,84067c4 <alt_up_pixel_buffer_dma_draw_hline+0x21c>
 84067f0:	00003d06 	br	84068e8 <alt_up_pixel_buffer_dma_draw_hline+0x340>
			{
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
 84067f4:	e0bff317 	ldw	r2,-52(fp)
 84067f8:	10800e17 	ldw	r2,56(r2)
 84067fc:	10800098 	cmpnei	r2,r2,2
 8406800:	10001c1e 	bne	r2,zero,8406874 <alt_up_pixel_buffer_dma_draw_hline+0x2cc>
			limit_x = limit_x << 1;
 8406804:	e0fffe17 	ldw	r3,-8(fp)
 8406808:	e0fffe17 	ldw	r3,-8(fp)
 840680c:	18c5883a 	add	r2,r3,r3
 8406810:	e0bffe15 	stw	r2,-8(fp)
			addr = addr + line_y * limit_x;
 8406814:	e13ffa17 	ldw	r4,-24(fp)
 8406818:	e0fffe17 	ldw	r3,-8(fp)
 840681c:	20c5383a 	mul	r2,r4,r3
 8406820:	e13fff17 	ldw	r4,-4(fp)
 8406824:	2089883a 	add	r4,r4,r2
 8406828:	e13fff15 	stw	r4,-4(fp)
			for (x = l_x; x <= r_x; x++)
 840682c:	e0bffc17 	ldw	r2,-16(fp)
 8406830:	e0bff715 	stw	r2,-36(fp)
 8406834:	00000b06 	br	8406864 <alt_up_pixel_buffer_dma_draw_hline+0x2bc>
			{
				IOWR_16DIRECT(addr, x << 1, local_color);
 8406838:	e0fff717 	ldw	r3,-36(fp)
 840683c:	e0fff717 	ldw	r3,-36(fp)
 8406840:	18c5883a 	add	r2,r3,r3
 8406844:	1007883a 	mov	r3,r2
 8406848:	e0bfff17 	ldw	r2,-4(fp)
 840684c:	1885883a 	add	r2,r3,r2
 8406850:	e0fff917 	ldw	r3,-28(fp)
 8406854:	10c0002d 	sthio	r3,0(r2)
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + line_y * limit_x;
			for (x = l_x; x <= r_x; x++)
 8406858:	e13ff717 	ldw	r4,-36(fp)
 840685c:	21000044 	addi	r4,r4,1
 8406860:	e13ff715 	stw	r4,-36(fp)
 8406864:	e0bffb17 	ldw	r2,-20(fp)
 8406868:	e0fff717 	ldw	r3,-36(fp)
 840686c:	10fff22e 	bgeu	r2,r3,8406838 <alt_up_pixel_buffer_dma_draw_hline+0x290>
 8406870:	00001d06 	br	84068e8 <alt_up_pixel_buffer_dma_draw_hline+0x340>
				IOWR_16DIRECT(addr, x << 1, local_color);
			}
		}
		else
		{
			limit_x = limit_x << 2;
 8406874:	e13ffe17 	ldw	r4,-8(fp)
 8406878:	e13ffe17 	ldw	r4,-8(fp)
 840687c:	2105883a 	add	r2,r4,r4
 8406880:	1085883a 	add	r2,r2,r2
 8406884:	e0bffe15 	stw	r2,-8(fp)
			addr = addr + line_y * limit_x;
 8406888:	e0fffa17 	ldw	r3,-24(fp)
 840688c:	e13ffe17 	ldw	r4,-8(fp)
 8406890:	1905383a 	mul	r2,r3,r4
 8406894:	e0ffff17 	ldw	r3,-4(fp)
 8406898:	1887883a 	add	r3,r3,r2
 840689c:	e0ffff15 	stw	r3,-4(fp)
			for (x = l_x; x <= r_x; x++)
 84068a0:	e13ffc17 	ldw	r4,-16(fp)
 84068a4:	e13ff715 	stw	r4,-36(fp)
 84068a8:	00000c06 	br	84068dc <alt_up_pixel_buffer_dma_draw_hline+0x334>
			{
				IOWR_32DIRECT(addr, x << 2, local_color);
 84068ac:	e0fff717 	ldw	r3,-36(fp)
 84068b0:	e0fff717 	ldw	r3,-36(fp)
 84068b4:	18c5883a 	add	r2,r3,r3
 84068b8:	1085883a 	add	r2,r2,r2
 84068bc:	1007883a 	mov	r3,r2
 84068c0:	e0bfff17 	ldw	r2,-4(fp)
 84068c4:	1885883a 	add	r2,r3,r2
 84068c8:	e0fff917 	ldw	r3,-28(fp)
 84068cc:	10c00035 	stwio	r3,0(r2)
		}
		else
		{
			limit_x = limit_x << 2;
			addr = addr + line_y * limit_x;
			for (x = l_x; x <= r_x; x++)
 84068d0:	e13ff717 	ldw	r4,-36(fp)
 84068d4:	21000044 	addi	r4,r4,1
 84068d8:	e13ff715 	stw	r4,-36(fp)
 84068dc:	e0bffb17 	ldw	r2,-20(fp)
 84068e0:	e0fff717 	ldw	r3,-36(fp)
 84068e4:	10fff12e 	bgeu	r2,r3,84068ac <alt_up_pixel_buffer_dma_draw_hline+0x304>
				IOWR_32DIRECT(addr, x << 2, local_color);
			}
			addr = addr + limit_x;
		}
	}
}
 84068e8:	e037883a 	mov	sp,fp
 84068ec:	df000017 	ldw	fp,0(sp)
 84068f0:	dec00104 	addi	sp,sp,4
 84068f4:	f800283a 	ret

084068f8 <alt_up_pixel_buffer_dma_draw_vline>:


void alt_up_pixel_buffer_dma_draw_vline(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x, int y0, int y1, int color, int backbuffer)
/* This method draws a vertical line. This method is faster than using the line method because we know the direction of the line. */

{
 84068f8:	defff104 	addi	sp,sp,-60
 84068fc:	df000e15 	stw	fp,56(sp)
 8406900:	df000e04 	addi	fp,sp,56
 8406904:	e13ff215 	stw	r4,-56(fp)
 8406908:	e17ff315 	stw	r5,-52(fp)
 840690c:	e1bff415 	stw	r6,-48(fp)
 8406910:	e1fff515 	stw	r7,-44(fp)
	register unsigned int addr;
	register unsigned int limit_x = pixel_buffer->x_resolution;
 8406914:	e0bff217 	ldw	r2,-56(fp)
 8406918:	10800f17 	ldw	r2,60(r2)
 840691c:	e0bffe15 	stw	r2,-8(fp)
	register unsigned int limit_y = pixel_buffer->y_resolution;
 8406920:	e0bff217 	ldw	r2,-56(fp)
 8406924:	10801017 	ldw	r2,64(r2)
 8406928:	e0bffd15 	stw	r2,-12(fp)
	register unsigned int temp;
	register unsigned int line_x = x;
 840692c:	e0bff317 	ldw	r2,-52(fp)
 8406930:	e0bffc15 	stw	r2,-16(fp)
	register unsigned int t_y = y0;
 8406934:	e0fff417 	ldw	r3,-48(fp)
 8406938:	e0fffb15 	stw	r3,-20(fp)
	register unsigned int b_y = y1;
 840693c:	e13ff517 	ldw	r4,-44(fp)
 8406940:	e13ffa15 	stw	r4,-24(fp)
	register unsigned int local_color = color;
 8406944:	e0800117 	ldw	r2,4(fp)
 8406948:	e0bff915 	stw	r2,-28(fp)
	
	/* Check coordinates */
	if (t_y > b_y)
 840694c:	e0fffa17 	ldw	r3,-24(fp)
 8406950:	e13ffb17 	ldw	r4,-20(fp)
 8406954:	1900042e 	bgeu	r3,r4,8406968 <alt_up_pixel_buffer_dma_draw_vline+0x70>
	{
		temp = t_y;
 8406958:	e0bffb17 	ldw	r2,-20(fp)
		t_y = b_y;
 840695c:	e0fffa17 	ldw	r3,-24(fp)
 8406960:	e0fffb15 	stw	r3,-20(fp)
		b_y = temp;
 8406964:	e0bffa15 	stw	r2,-24(fp)
	}
	if ((line_x >= limit_x) || (t_y >= limit_y) || (line_x < 0) || (b_y < 0))
 8406968:	e13ffc17 	ldw	r4,-16(fp)
 840696c:	e0bffe17 	ldw	r2,-8(fp)
 8406970:	2080d12e 	bgeu	r4,r2,8406cb8 <alt_up_pixel_buffer_dma_draw_vline+0x3c0>
 8406974:	e0fffb17 	ldw	r3,-20(fp)
 8406978:	e13ffd17 	ldw	r4,-12(fp)
 840697c:	19000136 	bltu	r3,r4,8406984 <alt_up_pixel_buffer_dma_draw_vline+0x8c>
	{
		/* Drawing outside of the window, so don't bother. */
		return;
 8406980:	0000cd06 	br	8406cb8 <alt_up_pixel_buffer_dma_draw_vline+0x3c0>
	/* Clip the box and draw only within the confines of the screen. */
	if (t_y < 0)
	{
		t_y = 0;
	}
	if (b_y >= limit_y)
 8406984:	e0bffa17 	ldw	r2,-24(fp)
 8406988:	e0fffd17 	ldw	r3,-12(fp)
 840698c:	10c00336 	bltu	r2,r3,840699c <alt_up_pixel_buffer_dma_draw_vline+0xa4>
	{
		b_y = limit_y - 1;
 8406990:	e13ffd17 	ldw	r4,-12(fp)
 8406994:	213fffc4 	addi	r4,r4,-1
 8406998:	e13ffa15 	stw	r4,-24(fp)
	}

	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
 840699c:	e0800217 	ldw	r2,8(fp)
 84069a0:	10800058 	cmpnei	r2,r2,1
 84069a4:	1000041e 	bne	r2,zero,84069b8 <alt_up_pixel_buffer_dma_draw_vline+0xc0>
		addr = pixel_buffer->back_buffer_start_address;
 84069a8:	e0bff217 	ldw	r2,-56(fp)
 84069ac:	10800c17 	ldw	r2,48(r2)
 84069b0:	e0bfff15 	stw	r2,-4(fp)
 84069b4:	00000306 	br	84069c4 <alt_up_pixel_buffer_dma_draw_vline+0xcc>
	else
		addr = pixel_buffer->buffer_start_address;
 84069b8:	e0bff217 	ldw	r2,-56(fp)
 84069bc:	10800b17 	ldw	r2,44(r2)
 84069c0:	e0bfff15 	stw	r2,-4(fp)

	/* Draw the vertical line using one of the addressing modes. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
 84069c4:	e0bff217 	ldw	r2,-56(fp)
 84069c8:	10800d17 	ldw	r2,52(r2)
 84069cc:	1004c03a 	cmpne	r2,r2,zero
 84069d0:	1000571e 	bne	r2,zero,8406b30 <alt_up_pixel_buffer_dma_draw_vline+0x238>
		/* Draw a vertical line of a given color on the screen using the XY addressing mode. */
		register unsigned int y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
 84069d4:	e0bff217 	ldw	r2,-56(fp)
 84069d8:	10801317 	ldw	r2,76(r2)
 84069dc:	e0bff715 	stw	r2,-36(fp)
		addr = addr + (t_y << offset_y);
 84069e0:	e0bff717 	ldw	r2,-36(fp)
 84069e4:	e0fffb17 	ldw	r3,-20(fp)
 84069e8:	1884983a 	sll	r2,r3,r2
 84069ec:	e13fff17 	ldw	r4,-4(fp)
 84069f0:	2089883a 	add	r4,r4,r2
 84069f4:	e13fff15 	stw	r4,-4(fp)
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
 84069f8:	e0bff217 	ldw	r2,-56(fp)
 84069fc:	10800e17 	ldw	r2,56(r2)
 8406a00:	10800058 	cmpnei	r2,r2,1
 8406a04:	1000151e 	bne	r2,zero,8406a5c <alt_up_pixel_buffer_dma_draw_vline+0x164>
			for (y = t_y; y <= b_y; y++)
 8406a08:	e0bffb17 	ldw	r2,-20(fp)
 8406a0c:	e0bff815 	stw	r2,-32(fp)
 8406a10:	00000e06 	br	8406a4c <alt_up_pixel_buffer_dma_draw_vline+0x154>
			{
				IOWR_8DIRECT(addr, line_x, local_color);
 8406a14:	e0ffff17 	ldw	r3,-4(fp)
 8406a18:	e0bffc17 	ldw	r2,-16(fp)
 8406a1c:	1885883a 	add	r2,r3,r2
 8406a20:	e0fff917 	ldw	r3,-28(fp)
 8406a24:	10c00025 	stbio	r3,0(r2)
				addr = addr + (1 << offset_y);
 8406a28:	e0fff717 	ldw	r3,-36(fp)
 8406a2c:	00800044 	movi	r2,1
 8406a30:	10c4983a 	sll	r2,r2,r3
 8406a34:	e0ffff17 	ldw	r3,-4(fp)
 8406a38:	1887883a 	add	r3,r3,r2
 8406a3c:	e0ffff15 	stw	r3,-4(fp)
		addr = addr + (t_y << offset_y);
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
 8406a40:	e13ff817 	ldw	r4,-32(fp)
 8406a44:	21000044 	addi	r4,r4,1
 8406a48:	e13ff815 	stw	r4,-32(fp)
 8406a4c:	e0bffa17 	ldw	r2,-24(fp)
 8406a50:	e0fff817 	ldw	r3,-32(fp)
 8406a54:	10ffef2e 	bgeu	r2,r3,8406a14 <alt_up_pixel_buffer_dma_draw_vline+0x11c>
 8406a58:	00009706 	br	8406cb8 <alt_up_pixel_buffer_dma_draw_vline+0x3c0>
			{
				IOWR_8DIRECT(addr, line_x, local_color);
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
 8406a5c:	e0bff217 	ldw	r2,-56(fp)
 8406a60:	10800e17 	ldw	r2,56(r2)
 8406a64:	10800098 	cmpnei	r2,r2,2
 8406a68:	1000181e 	bne	r2,zero,8406acc <alt_up_pixel_buffer_dma_draw_vline+0x1d4>
			for (y = t_y; y <= b_y; y++)
 8406a6c:	e13ffb17 	ldw	r4,-20(fp)
 8406a70:	e13ff815 	stw	r4,-32(fp)
 8406a74:	00001106 	br	8406abc <alt_up_pixel_buffer_dma_draw_vline+0x1c4>
			{
				IOWR_16DIRECT(addr, line_x << 1, local_color);
 8406a78:	e0fffc17 	ldw	r3,-16(fp)
 8406a7c:	e0fffc17 	ldw	r3,-16(fp)
 8406a80:	18c5883a 	add	r2,r3,r3
 8406a84:	1007883a 	mov	r3,r2
 8406a88:	e0bfff17 	ldw	r2,-4(fp)
 8406a8c:	1885883a 	add	r2,r3,r2
 8406a90:	e0fff917 	ldw	r3,-28(fp)
 8406a94:	10c0002d 	sthio	r3,0(r2)
				addr = addr + (1 << offset_y);
 8406a98:	e0fff717 	ldw	r3,-36(fp)
 8406a9c:	00800044 	movi	r2,1
 8406aa0:	10c4983a 	sll	r2,r2,r3
 8406aa4:	e13fff17 	ldw	r4,-4(fp)
 8406aa8:	2089883a 	add	r4,r4,r2
 8406aac:	e13fff15 	stw	r4,-4(fp)
			{
				IOWR_8DIRECT(addr, line_x, local_color);
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
 8406ab0:	e0bff817 	ldw	r2,-32(fp)
 8406ab4:	10800044 	addi	r2,r2,1
 8406ab8:	e0bff815 	stw	r2,-32(fp)
 8406abc:	e0fffa17 	ldw	r3,-24(fp)
 8406ac0:	e13ff817 	ldw	r4,-32(fp)
 8406ac4:	193fec2e 	bgeu	r3,r4,8406a78 <alt_up_pixel_buffer_dma_draw_vline+0x180>
 8406ac8:	00007b06 	br	8406cb8 <alt_up_pixel_buffer_dma_draw_vline+0x3c0>
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
 8406acc:	e0bffb17 	ldw	r2,-20(fp)
 8406ad0:	e0bff815 	stw	r2,-32(fp)
 8406ad4:	00001206 	br	8406b20 <alt_up_pixel_buffer_dma_draw_vline+0x228>
			{
				IOWR_32DIRECT(addr, line_x << 2, local_color);
 8406ad8:	e0fffc17 	ldw	r3,-16(fp)
 8406adc:	e0fffc17 	ldw	r3,-16(fp)
 8406ae0:	18c5883a 	add	r2,r3,r3
 8406ae4:	1085883a 	add	r2,r2,r2
 8406ae8:	1007883a 	mov	r3,r2
 8406aec:	e0bfff17 	ldw	r2,-4(fp)
 8406af0:	1885883a 	add	r2,r3,r2
 8406af4:	e0fff917 	ldw	r3,-28(fp)
 8406af8:	10c00035 	stwio	r3,0(r2)
				addr = addr + (1 << offset_y);
 8406afc:	e0fff717 	ldw	r3,-36(fp)
 8406b00:	00800044 	movi	r2,1
 8406b04:	10c4983a 	sll	r2,r2,r3
 8406b08:	e13fff17 	ldw	r4,-4(fp)
 8406b0c:	2089883a 	add	r4,r4,r2
 8406b10:	e13fff15 	stw	r4,-4(fp)
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
 8406b14:	e0bff817 	ldw	r2,-32(fp)
 8406b18:	10800044 	addi	r2,r2,1
 8406b1c:	e0bff815 	stw	r2,-32(fp)
 8406b20:	e0fffa17 	ldw	r3,-24(fp)
 8406b24:	e13ff817 	ldw	r4,-32(fp)
 8406b28:	193feb2e 	bgeu	r3,r4,8406ad8 <alt_up_pixel_buffer_dma_draw_vline+0x1e0>
 8406b2c:	00006206 	br	8406cb8 <alt_up_pixel_buffer_dma_draw_vline+0x3c0>
	} else {
		/* Draw a vertical line of a given color on the screen using the linear addressing mode. */
		register unsigned int y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
 8406b30:	e0bff217 	ldw	r2,-56(fp)
 8406b34:	10800e17 	ldw	r2,56(r2)
 8406b38:	10800058 	cmpnei	r2,r2,1
 8406b3c:	1000191e 	bne	r2,zero,8406ba4 <alt_up_pixel_buffer_dma_draw_vline+0x2ac>
			addr = addr + t_y * limit_x;
 8406b40:	e0fffb17 	ldw	r3,-20(fp)
 8406b44:	e13ffe17 	ldw	r4,-8(fp)
 8406b48:	1905383a 	mul	r2,r3,r4
 8406b4c:	e0ffff17 	ldw	r3,-4(fp)
 8406b50:	1887883a 	add	r3,r3,r2
 8406b54:	e0ffff15 	stw	r3,-4(fp)
			for (y = t_y; y <= b_y; y++)
 8406b58:	e13ffb17 	ldw	r4,-20(fp)
 8406b5c:	e13ff615 	stw	r4,-40(fp)
 8406b60:	00000c06 	br	8406b94 <alt_up_pixel_buffer_dma_draw_vline+0x29c>
			{
				IOWR_8DIRECT(addr, line_x, local_color);
 8406b64:	e0ffff17 	ldw	r3,-4(fp)
 8406b68:	e0bffc17 	ldw	r2,-16(fp)
 8406b6c:	1885883a 	add	r2,r3,r2
 8406b70:	e0fff917 	ldw	r3,-28(fp)
 8406b74:	10c00025 	stbio	r3,0(r2)
				addr = addr + limit_x;
 8406b78:	e0bfff17 	ldw	r2,-4(fp)
 8406b7c:	e0fffe17 	ldw	r3,-8(fp)
 8406b80:	10c5883a 	add	r2,r2,r3
 8406b84:	e0bfff15 	stw	r2,-4(fp)
		register unsigned int y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
 8406b88:	e13ff617 	ldw	r4,-40(fp)
 8406b8c:	21000044 	addi	r4,r4,1
 8406b90:	e13ff615 	stw	r4,-40(fp)
 8406b94:	e0bffa17 	ldw	r2,-24(fp)
 8406b98:	e0fff617 	ldw	r3,-40(fp)
 8406b9c:	10fff12e 	bgeu	r2,r3,8406b64 <alt_up_pixel_buffer_dma_draw_vline+0x26c>
 8406ba0:	00004506 	br	8406cb8 <alt_up_pixel_buffer_dma_draw_vline+0x3c0>
			{
				IOWR_8DIRECT(addr, line_x, local_color);
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
 8406ba4:	e0bff217 	ldw	r2,-56(fp)
 8406ba8:	10800e17 	ldw	r2,56(r2)
 8406bac:	10800098 	cmpnei	r2,r2,2
 8406bb0:	1000201e 	bne	r2,zero,8406c34 <alt_up_pixel_buffer_dma_draw_vline+0x33c>
			limit_x = limit_x << 1;
 8406bb4:	e13ffe17 	ldw	r4,-8(fp)
 8406bb8:	e13ffe17 	ldw	r4,-8(fp)
 8406bbc:	2105883a 	add	r2,r4,r4
 8406bc0:	e0bffe15 	stw	r2,-8(fp)
			addr = addr + t_y * limit_x;
 8406bc4:	e0fffb17 	ldw	r3,-20(fp)
 8406bc8:	e13ffe17 	ldw	r4,-8(fp)
 8406bcc:	1905383a 	mul	r2,r3,r4
 8406bd0:	e0ffff17 	ldw	r3,-4(fp)
 8406bd4:	1887883a 	add	r3,r3,r2
 8406bd8:	e0ffff15 	stw	r3,-4(fp)
			for (y = t_y; y <= b_y; y++)
 8406bdc:	e13ffb17 	ldw	r4,-20(fp)
 8406be0:	e13ff615 	stw	r4,-40(fp)
 8406be4:	00000f06 	br	8406c24 <alt_up_pixel_buffer_dma_draw_vline+0x32c>
			{
				IOWR_16DIRECT(addr, line_x << 1, local_color);
 8406be8:	e0fffc17 	ldw	r3,-16(fp)
 8406bec:	e0fffc17 	ldw	r3,-16(fp)
 8406bf0:	18c5883a 	add	r2,r3,r3
 8406bf4:	1007883a 	mov	r3,r2
 8406bf8:	e0bfff17 	ldw	r2,-4(fp)
 8406bfc:	1885883a 	add	r2,r3,r2
 8406c00:	e0fff917 	ldw	r3,-28(fp)
 8406c04:	10c0002d 	sthio	r3,0(r2)
				addr = addr + limit_x;
 8406c08:	e13fff17 	ldw	r4,-4(fp)
 8406c0c:	e0bffe17 	ldw	r2,-8(fp)
 8406c10:	2089883a 	add	r4,r4,r2
 8406c14:	e13fff15 	stw	r4,-4(fp)
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
 8406c18:	e0fff617 	ldw	r3,-40(fp)
 8406c1c:	18c00044 	addi	r3,r3,1
 8406c20:	e0fff615 	stw	r3,-40(fp)
 8406c24:	e13ffa17 	ldw	r4,-24(fp)
 8406c28:	e0bff617 	ldw	r2,-40(fp)
 8406c2c:	20bfee2e 	bgeu	r4,r2,8406be8 <alt_up_pixel_buffer_dma_draw_vline+0x2f0>
 8406c30:	00002106 	br	8406cb8 <alt_up_pixel_buffer_dma_draw_vline+0x3c0>
				addr = addr + limit_x;
			}
		}
		else
		{
			limit_x = limit_x << 2;
 8406c34:	e0fffe17 	ldw	r3,-8(fp)
 8406c38:	e0fffe17 	ldw	r3,-8(fp)
 8406c3c:	18c5883a 	add	r2,r3,r3
 8406c40:	1085883a 	add	r2,r2,r2
 8406c44:	e0bffe15 	stw	r2,-8(fp)
			addr = addr + t_y * limit_x;
 8406c48:	e13ffb17 	ldw	r4,-20(fp)
 8406c4c:	e0fffe17 	ldw	r3,-8(fp)
 8406c50:	20c5383a 	mul	r2,r4,r3
 8406c54:	e13fff17 	ldw	r4,-4(fp)
 8406c58:	2089883a 	add	r4,r4,r2
 8406c5c:	e13fff15 	stw	r4,-4(fp)
			for (y = t_y; y <= b_y; y++)
 8406c60:	e0bffb17 	ldw	r2,-20(fp)
 8406c64:	e0bff615 	stw	r2,-40(fp)
 8406c68:	00001006 	br	8406cac <alt_up_pixel_buffer_dma_draw_vline+0x3b4>
			{
				IOWR_32DIRECT(addr, line_x << 2, local_color);
 8406c6c:	e0fffc17 	ldw	r3,-16(fp)
 8406c70:	e0fffc17 	ldw	r3,-16(fp)
 8406c74:	18c5883a 	add	r2,r3,r3
 8406c78:	1085883a 	add	r2,r2,r2
 8406c7c:	1007883a 	mov	r3,r2
 8406c80:	e0bfff17 	ldw	r2,-4(fp)
 8406c84:	1885883a 	add	r2,r3,r2
 8406c88:	e0fff917 	ldw	r3,-28(fp)
 8406c8c:	10c00035 	stwio	r3,0(r2)
				addr = addr + limit_x;
 8406c90:	e13fff17 	ldw	r4,-4(fp)
 8406c94:	e0bffe17 	ldw	r2,-8(fp)
 8406c98:	2089883a 	add	r4,r4,r2
 8406c9c:	e13fff15 	stw	r4,-4(fp)
		}
		else
		{
			limit_x = limit_x << 2;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
 8406ca0:	e0fff617 	ldw	r3,-40(fp)
 8406ca4:	18c00044 	addi	r3,r3,1
 8406ca8:	e0fff615 	stw	r3,-40(fp)
 8406cac:	e13ffa17 	ldw	r4,-24(fp)
 8406cb0:	e0bff617 	ldw	r2,-40(fp)
 8406cb4:	20bfed2e 	bgeu	r4,r2,8406c6c <alt_up_pixel_buffer_dma_draw_vline+0x374>
				IOWR_32DIRECT(addr, line_x << 2, local_color);
				addr = addr + limit_x;
			}
		}
	}
}
 8406cb8:	e037883a 	mov	sp,fp
 8406cbc:	df000017 	ldw	fp,0(sp)
 8406cc0:	dec00104 	addi	sp,sp,4
 8406cc4:	f800283a 	ret

08406cc8 <alt_up_pixel_buffer_dma_draw_rectangle>:

void alt_up_pixel_buffer_dma_draw_rectangle(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int y0, int x1, int y1, int color, int backbuffer)
{
 8406cc8:	defff804 	addi	sp,sp,-32
 8406ccc:	dfc00715 	stw	ra,28(sp)
 8406cd0:	df000615 	stw	fp,24(sp)
 8406cd4:	df000604 	addi	fp,sp,24
 8406cd8:	e13ffc15 	stw	r4,-16(fp)
 8406cdc:	e17ffd15 	stw	r5,-12(fp)
 8406ce0:	e1bffe15 	stw	r6,-8(fp)
 8406ce4:	e1ffff15 	stw	r7,-4(fp)
	alt_up_pixel_buffer_dma_draw_hline(pixel_buffer, x0, x1, y0, color, backbuffer);
 8406ce8:	e0800317 	ldw	r2,12(fp)
 8406cec:	d8800015 	stw	r2,0(sp)
 8406cf0:	e0800417 	ldw	r2,16(fp)
 8406cf4:	d8800115 	stw	r2,4(sp)
 8406cf8:	e13ffc17 	ldw	r4,-16(fp)
 8406cfc:	e17ffd17 	ldw	r5,-12(fp)
 8406d00:	e1bfff17 	ldw	r6,-4(fp)
 8406d04:	e1fffe17 	ldw	r7,-8(fp)
 8406d08:	84065a80 	call	84065a8 <alt_up_pixel_buffer_dma_draw_hline>
	alt_up_pixel_buffer_dma_draw_hline(pixel_buffer, x0, x1, y1, color, backbuffer);
 8406d0c:	e0800317 	ldw	r2,12(fp)
 8406d10:	d8800015 	stw	r2,0(sp)
 8406d14:	e0800417 	ldw	r2,16(fp)
 8406d18:	d8800115 	stw	r2,4(sp)
 8406d1c:	e13ffc17 	ldw	r4,-16(fp)
 8406d20:	e17ffd17 	ldw	r5,-12(fp)
 8406d24:	e1bfff17 	ldw	r6,-4(fp)
 8406d28:	e1c00217 	ldw	r7,8(fp)
 8406d2c:	84065a80 	call	84065a8 <alt_up_pixel_buffer_dma_draw_hline>
	alt_up_pixel_buffer_dma_draw_vline(pixel_buffer, x0, y0, y1, color, backbuffer);
 8406d30:	e0800317 	ldw	r2,12(fp)
 8406d34:	d8800015 	stw	r2,0(sp)
 8406d38:	e0800417 	ldw	r2,16(fp)
 8406d3c:	d8800115 	stw	r2,4(sp)
 8406d40:	e13ffc17 	ldw	r4,-16(fp)
 8406d44:	e17ffd17 	ldw	r5,-12(fp)
 8406d48:	e1bffe17 	ldw	r6,-8(fp)
 8406d4c:	e1c00217 	ldw	r7,8(fp)
 8406d50:	84068f80 	call	84068f8 <alt_up_pixel_buffer_dma_draw_vline>
	alt_up_pixel_buffer_dma_draw_vline(pixel_buffer, x1, y0, y1, color, backbuffer);
 8406d54:	e0800317 	ldw	r2,12(fp)
 8406d58:	d8800015 	stw	r2,0(sp)
 8406d5c:	e0800417 	ldw	r2,16(fp)
 8406d60:	d8800115 	stw	r2,4(sp)
 8406d64:	e13ffc17 	ldw	r4,-16(fp)
 8406d68:	e17fff17 	ldw	r5,-4(fp)
 8406d6c:	e1bffe17 	ldw	r6,-8(fp)
 8406d70:	e1c00217 	ldw	r7,8(fp)
 8406d74:	84068f80 	call	84068f8 <alt_up_pixel_buffer_dma_draw_vline>
}
 8406d78:	e037883a 	mov	sp,fp
 8406d7c:	dfc00117 	ldw	ra,4(sp)
 8406d80:	df000017 	ldw	fp,0(sp)
 8406d84:	dec00204 	addi	sp,sp,8
 8406d88:	f800283a 	ret

08406d8c <helper_plot_pixel>:

void helper_plot_pixel(register unsigned int buffer_start, register int line_size, register int x, register int y, register int color, register int mode)
/* This is a helper function that draws a pixel at a given location. Note that no boundary checks are made,
 * so drawing off-screen may cause unpredictable side effects. */
{
 8406d8c:	defffb04 	addi	sp,sp,-20
 8406d90:	df000415 	stw	fp,16(sp)
 8406d94:	df000404 	addi	fp,sp,16
 8406d98:	e13ffc15 	stw	r4,-16(fp)
 8406d9c:	e17ffd15 	stw	r5,-12(fp)
 8406da0:	e1bffe15 	stw	r6,-8(fp)
 8406da4:	e1ffff15 	stw	r7,-4(fp)
	if (mode == 0)
 8406da8:	e0c00217 	ldw	r3,8(fp)
 8406dac:	1804c03a 	cmpne	r2,r3,zero
 8406db0:	10000b1e 	bne	r2,zero,8406de0 <helper_plot_pixel+0x54>
		IOWR_8DIRECT(buffer_start, line_size*y+x, color);
 8406db4:	e13ffd17 	ldw	r4,-12(fp)
 8406db8:	e0ffff17 	ldw	r3,-4(fp)
 8406dbc:	20c5383a 	mul	r2,r4,r3
 8406dc0:	e13ffe17 	ldw	r4,-8(fp)
 8406dc4:	1105883a 	add	r2,r2,r4
 8406dc8:	1007883a 	mov	r3,r2
 8406dcc:	e0bffc17 	ldw	r2,-16(fp)
 8406dd0:	1885883a 	add	r2,r3,r2
 8406dd4:	e0c00117 	ldw	r3,4(fp)
 8406dd8:	10c00025 	stbio	r3,0(r2)
 8406ddc:	00001b06 	br	8406e4c <helper_plot_pixel+0xc0>
	else if (mode == 1)
 8406de0:	e1000217 	ldw	r4,8(fp)
 8406de4:	20800058 	cmpnei	r2,r4,1
 8406de8:	10000c1e 	bne	r2,zero,8406e1c <helper_plot_pixel+0x90>
		IOWR_16DIRECT(buffer_start, (line_size*y+x) << 1, color);
 8406dec:	e0fffd17 	ldw	r3,-12(fp)
 8406df0:	e13fff17 	ldw	r4,-4(fp)
 8406df4:	1905383a 	mul	r2,r3,r4
 8406df8:	e0fffe17 	ldw	r3,-8(fp)
 8406dfc:	10c5883a 	add	r2,r2,r3
 8406e00:	1085883a 	add	r2,r2,r2
 8406e04:	1007883a 	mov	r3,r2
 8406e08:	e0bffc17 	ldw	r2,-16(fp)
 8406e0c:	1885883a 	add	r2,r3,r2
 8406e10:	e1000117 	ldw	r4,4(fp)
 8406e14:	1100002d 	sthio	r4,0(r2)
 8406e18:	00000c06 	br	8406e4c <helper_plot_pixel+0xc0>
	else
		IOWR_32DIRECT(buffer_start, (line_size*y+x) << 2, color);
 8406e1c:	e0fffd17 	ldw	r3,-12(fp)
 8406e20:	e13fff17 	ldw	r4,-4(fp)
 8406e24:	1905383a 	mul	r2,r3,r4
 8406e28:	e0fffe17 	ldw	r3,-8(fp)
 8406e2c:	10c5883a 	add	r2,r2,r3
 8406e30:	1085883a 	add	r2,r2,r2
 8406e34:	1085883a 	add	r2,r2,r2
 8406e38:	1007883a 	mov	r3,r2
 8406e3c:	e0bffc17 	ldw	r2,-16(fp)
 8406e40:	1885883a 	add	r2,r3,r2
 8406e44:	e1000117 	ldw	r4,4(fp)
 8406e48:	11000035 	stwio	r4,0(r2)
}
 8406e4c:	e037883a 	mov	sp,fp
 8406e50:	df000017 	ldw	fp,0(sp)
 8406e54:	dec00104 	addi	sp,sp,4
 8406e58:	f800283a 	ret

08406e5c <alt_up_pixel_buffer_dma_draw_line>:

void alt_up_pixel_buffer_dma_draw_line(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int y0, int x1, int y1, int color, int backbuffer)
/* This function draws a line between points (x0, y0) and (x1, y1). The function does not check if it draws a pixel within screen boundaries.
 * users should ensure that the line is drawn within the screen boundaries. */
{
 8406e5c:	deffe404 	addi	sp,sp,-112
 8406e60:	dfc01b15 	stw	ra,108(sp)
 8406e64:	df001a15 	stw	fp,104(sp)
 8406e68:	df001a04 	addi	fp,sp,104
 8406e6c:	e13fe815 	stw	r4,-96(fp)
 8406e70:	e17fe915 	stw	r5,-92(fp)
 8406e74:	e1bfea15 	stw	r6,-88(fp)
 8406e78:	e1ffeb15 	stw	r7,-84(fp)
	register int x_0 = x0;
 8406e7c:	e0bfe917 	ldw	r2,-92(fp)
 8406e80:	e0bffa15 	stw	r2,-24(fp)
	register int y_0 = y0;
 8406e84:	e0ffea17 	ldw	r3,-88(fp)
 8406e88:	e0fff915 	stw	r3,-28(fp)
	register int x_1 = x1;
 8406e8c:	e13feb17 	ldw	r4,-84(fp)
 8406e90:	e13ff815 	stw	r4,-32(fp)
	register int y_1 = y1;
 8406e94:	e0800217 	ldw	r2,8(fp)
 8406e98:	e0bff715 	stw	r2,-36(fp)
	register char steep = (ABS(y_1 - y_0) > ABS(x_1 - x_0)) ? 1 : 0;
 8406e9c:	e0fff717 	ldw	r3,-36(fp)
 8406ea0:	e13ff917 	ldw	r4,-28(fp)
 8406ea4:	1905c83a 	sub	r2,r3,r4
 8406ea8:	e0bfff15 	stw	r2,-4(fp)
 8406eac:	e0ffff17 	ldw	r3,-4(fp)
 8406eb0:	1804403a 	cmpge	r2,r3,zero
 8406eb4:	1000031e 	bne	r2,zero,8406ec4 <alt_up_pixel_buffer_dma_draw_line+0x68>
 8406eb8:	e13fff17 	ldw	r4,-4(fp)
 8406ebc:	0109c83a 	sub	r4,zero,r4
 8406ec0:	e13fff15 	stw	r4,-4(fp)
 8406ec4:	e0fff817 	ldw	r3,-32(fp)
 8406ec8:	e13ffa17 	ldw	r4,-24(fp)
 8406ecc:	1905c83a 	sub	r2,r3,r4
 8406ed0:	e0bffe15 	stw	r2,-8(fp)
 8406ed4:	e0fffe17 	ldw	r3,-8(fp)
 8406ed8:	1804403a 	cmpge	r2,r3,zero
 8406edc:	1000031e 	bne	r2,zero,8406eec <alt_up_pixel_buffer_dma_draw_line+0x90>
 8406ee0:	e13ffe17 	ldw	r4,-8(fp)
 8406ee4:	0109c83a 	sub	r4,zero,r4
 8406ee8:	e13ffe15 	stw	r4,-8(fp)
 8406eec:	e0fffe17 	ldw	r3,-8(fp)
 8406ef0:	e13fff17 	ldw	r4,-4(fp)
 8406ef4:	1904803a 	cmplt	r2,r3,r4
 8406ef8:	e0bff605 	stb	r2,-40(fp)
	register int deltax, deltay, error, ystep, x, y;
	register int color_mode =	(pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) ? 0 :
								(pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) ? 1 : 2;
 8406efc:	e0bfe817 	ldw	r2,-96(fp)
 8406f00:	10800e17 	ldw	r2,56(r2)
 8406f04:	10800060 	cmpeqi	r2,r2,1
 8406f08:	10000c1e 	bne	r2,zero,8406f3c <alt_up_pixel_buffer_dma_draw_line+0xe0>
 8406f0c:	e0bfe817 	ldw	r2,-96(fp)
 8406f10:	10800e17 	ldw	r2,56(r2)
 8406f14:	10800098 	cmpnei	r2,r2,2
 8406f18:	1000031e 	bne	r2,zero,8406f28 <alt_up_pixel_buffer_dma_draw_line+0xcc>
 8406f1c:	00800044 	movi	r2,1
 8406f20:	e0bffc15 	stw	r2,-16(fp)
 8406f24:	00000206 	br	8406f30 <alt_up_pixel_buffer_dma_draw_line+0xd4>
 8406f28:	00c00084 	movi	r3,2
 8406f2c:	e0fffc15 	stw	r3,-16(fp)
 8406f30:	e13ffc17 	ldw	r4,-16(fp)
 8406f34:	e13ffd15 	stw	r4,-12(fp)
 8406f38:	00000106 	br	8406f40 <alt_up_pixel_buffer_dma_draw_line+0xe4>
 8406f3c:	e03ffd15 	stw	zero,-12(fp)
 8406f40:	e0bffd17 	ldw	r2,-12(fp)
 8406f44:	e0bfef15 	stw	r2,-68(fp)
	register int line_color = color;
 8406f48:	e0c00317 	ldw	r3,12(fp)
 8406f4c:	e0ffee15 	stw	r3,-72(fp)
	register unsigned int buffer_start;
	register int line_size = (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) ? (1 << (pixel_buffer->y_coord_offset-color_mode)) : pixel_buffer->x_resolution;
 8406f50:	e0bfe817 	ldw	r2,-96(fp)
 8406f54:	10800d17 	ldw	r2,52(r2)
 8406f58:	1004c03a 	cmpne	r2,r2,zero
 8406f5c:	1000091e 	bne	r2,zero,8406f84 <alt_up_pixel_buffer_dma_draw_line+0x128>
 8406f60:	e0bfe817 	ldw	r2,-96(fp)
 8406f64:	10c01317 	ldw	r3,76(r2)
 8406f68:	e0bfef17 	ldw	r2,-68(fp)
 8406f6c:	1885c83a 	sub	r2,r3,r2
 8406f70:	1007883a 	mov	r3,r2
 8406f74:	00800044 	movi	r2,1
 8406f78:	10c4983a 	sll	r2,r2,r3
 8406f7c:	e0bffb15 	stw	r2,-20(fp)
 8406f80:	00000306 	br	8406f90 <alt_up_pixel_buffer_dma_draw_line+0x134>
 8406f84:	e0bfe817 	ldw	r2,-96(fp)
 8406f88:	10800f17 	ldw	r2,60(r2)
 8406f8c:	e0bffb15 	stw	r2,-20(fp)
 8406f90:	e13ffb17 	ldw	r4,-20(fp)
 8406f94:	e13fec15 	stw	r4,-80(fp)

	if (backbuffer == 1)
 8406f98:	e0800417 	ldw	r2,16(fp)
 8406f9c:	10800058 	cmpnei	r2,r2,1
 8406fa0:	1000041e 	bne	r2,zero,8406fb4 <alt_up_pixel_buffer_dma_draw_line+0x158>
		buffer_start = pixel_buffer->back_buffer_start_address;
 8406fa4:	e0bfe817 	ldw	r2,-96(fp)
 8406fa8:	10800c17 	ldw	r2,48(r2)
 8406fac:	e0bfed15 	stw	r2,-76(fp)
 8406fb0:	00000306 	br	8406fc0 <alt_up_pixel_buffer_dma_draw_line+0x164>
	else
		buffer_start = pixel_buffer->buffer_start_address;
 8406fb4:	e0bfe817 	ldw	r2,-96(fp)
 8406fb8:	10800b17 	ldw	r2,44(r2)
 8406fbc:	e0bfed15 	stw	r2,-76(fp)

	/* Preprocessing inputs */
	if (steep > 0) {
 8406fc0:	e0fff603 	ldbu	r3,-40(fp)
 8406fc4:	18803fcc 	andi	r2,r3,255
 8406fc8:	1080201c 	xori	r2,r2,128
 8406fcc:	10bfe004 	addi	r2,r2,-128
 8406fd0:	10800050 	cmplti	r2,r2,1
 8406fd4:	10000c1e 	bne	r2,zero,8407008 <alt_up_pixel_buffer_dma_draw_line+0x1ac>
		// Swap x_0 and y_0
		error = x_0;
 8406fd8:	e13ffa17 	ldw	r4,-24(fp)
 8406fdc:	e13ff315 	stw	r4,-52(fp)
		x_0 = y_0;
 8406fe0:	e0bff917 	ldw	r2,-28(fp)
 8406fe4:	e0bffa15 	stw	r2,-24(fp)
		y_0 = error;
 8406fe8:	e0fff317 	ldw	r3,-52(fp)
 8406fec:	e0fff915 	stw	r3,-28(fp)
		// Swap x_1 and y_1
		error = x_1;
 8406ff0:	e13ff817 	ldw	r4,-32(fp)
 8406ff4:	e13ff315 	stw	r4,-52(fp)
		x_1 = y_1;
 8406ff8:	e0bff717 	ldw	r2,-36(fp)
 8406ffc:	e0bff815 	stw	r2,-32(fp)
		y_1 = error;
 8407000:	e0fff317 	ldw	r3,-52(fp)
 8407004:	e0fff715 	stw	r3,-36(fp)
	}
	if (x_0 > x_1) {
 8407008:	e13ff817 	ldw	r4,-32(fp)
 840700c:	e0bffa17 	ldw	r2,-24(fp)
 8407010:	20800c0e 	bge	r4,r2,8407044 <alt_up_pixel_buffer_dma_draw_line+0x1e8>
		// Swap x_0 and x_1
		error = x_0;
 8407014:	e0fffa17 	ldw	r3,-24(fp)
 8407018:	e0fff315 	stw	r3,-52(fp)
		x_0 = x_1;
 840701c:	e13ff817 	ldw	r4,-32(fp)
 8407020:	e13ffa15 	stw	r4,-24(fp)
		x_1 = error;
 8407024:	e0bff317 	ldw	r2,-52(fp)
 8407028:	e0bff815 	stw	r2,-32(fp)
		// Swap y_0 and y_1
		error = y_0;
 840702c:	e0fff917 	ldw	r3,-28(fp)
 8407030:	e0fff315 	stw	r3,-52(fp)
		y_0 = y_1;
 8407034:	e13ff717 	ldw	r4,-36(fp)
 8407038:	e13ff915 	stw	r4,-28(fp)
		y_1 = error;
 840703c:	e0bff317 	ldw	r2,-52(fp)
 8407040:	e0bff715 	stw	r2,-36(fp)
	}

	/* Setup local variables */
	deltax = x_1 - x_0;
 8407044:	e0fff817 	ldw	r3,-32(fp)
 8407048:	e13ffa17 	ldw	r4,-24(fp)
 840704c:	1907c83a 	sub	r3,r3,r4
 8407050:	e0fff515 	stw	r3,-44(fp)
	deltay = ABS(y_1 - y_0);
 8407054:	e0fff717 	ldw	r3,-36(fp)
 8407058:	e13ff917 	ldw	r4,-28(fp)
 840705c:	1905c83a 	sub	r2,r3,r4
 8407060:	e0bff415 	stw	r2,-48(fp)
 8407064:	e0fff417 	ldw	r3,-48(fp)
 8407068:	1804403a 	cmpge	r2,r3,zero
 840706c:	1000031e 	bne	r2,zero,840707c <alt_up_pixel_buffer_dma_draw_line+0x220>
 8407070:	e13ff417 	ldw	r4,-48(fp)
 8407074:	0109c83a 	sub	r4,zero,r4
 8407078:	e13ff415 	stw	r4,-48(fp)
	error = -(deltax / 2); 
 840707c:	e0fff517 	ldw	r3,-44(fp)
 8407080:	1804d7fa 	srli	r2,r3,31
 8407084:	e13ff517 	ldw	r4,-44(fp)
 8407088:	1105883a 	add	r2,r2,r4
 840708c:	1005d07a 	srai	r2,r2,1
 8407090:	0085c83a 	sub	r2,zero,r2
 8407094:	e0bff315 	stw	r2,-52(fp)
	y = y_0;
 8407098:	e0bff917 	ldw	r2,-28(fp)
 840709c:	e0bff015 	stw	r2,-64(fp)
	if (y_0 < y_1)
 84070a0:	e0fff917 	ldw	r3,-28(fp)
 84070a4:	e13ff717 	ldw	r4,-36(fp)
 84070a8:	1900030e 	bge	r3,r4,84070b8 <alt_up_pixel_buffer_dma_draw_line+0x25c>
		ystep = 1;
 84070ac:	00800044 	movi	r2,1
 84070b0:	e0bff215 	stw	r2,-56(fp)
 84070b4:	00000206 	br	84070c0 <alt_up_pixel_buffer_dma_draw_line+0x264>
	else
		ystep = -1;
 84070b8:	00ffffc4 	movi	r3,-1
 84070bc:	e0fff215 	stw	r3,-56(fp)

	/* Draw a line - either go along the x axis (steep = 0) or along the y axis (steep = 1). The code is replicated to
	 * compile well on low optimization levels. */
	if (steep == 1)
 84070c0:	e13ff603 	ldbu	r4,-40(fp)
 84070c4:	20803fcc 	andi	r2,r4,255
 84070c8:	1080201c 	xori	r2,r2,128
 84070cc:	10bfe004 	addi	r2,r2,-128
 84070d0:	10800058 	cmpnei	r2,r2,1
 84070d4:	1000221e 	bne	r2,zero,8407160 <alt_up_pixel_buffer_dma_draw_line+0x304>
	{
		for (x=x_0; x <= x_1; x++) {
 84070d8:	e0bffa17 	ldw	r2,-24(fp)
 84070dc:	e0bff115 	stw	r2,-60(fp)
 84070e0:	00001b06 	br	8407150 <alt_up_pixel_buffer_dma_draw_line+0x2f4>
			helper_plot_pixel(buffer_start, line_size, y, x, line_color, color_mode);
 84070e4:	e0ffee17 	ldw	r3,-72(fp)
 84070e8:	d8c00015 	stw	r3,0(sp)
 84070ec:	e13fef17 	ldw	r4,-68(fp)
 84070f0:	d9000115 	stw	r4,4(sp)
 84070f4:	e13fed17 	ldw	r4,-76(fp)
 84070f8:	e17fec17 	ldw	r5,-80(fp)
 84070fc:	e1bff017 	ldw	r6,-64(fp)
 8407100:	e1fff117 	ldw	r7,-60(fp)
 8407104:	8406d8c0 	call	8406d8c <helper_plot_pixel>
			error = error + deltay;
 8407108:	e0bff317 	ldw	r2,-52(fp)
 840710c:	e0fff417 	ldw	r3,-48(fp)
 8407110:	10c5883a 	add	r2,r2,r3
 8407114:	e0bff315 	stw	r2,-52(fp)
			if (error > 0) {
 8407118:	e13ff317 	ldw	r4,-52(fp)
 840711c:	20800050 	cmplti	r2,r4,1
 8407120:	1000081e 	bne	r2,zero,8407144 <alt_up_pixel_buffer_dma_draw_line+0x2e8>
				y = y + ystep;
 8407124:	e0bff017 	ldw	r2,-64(fp)
 8407128:	e0fff217 	ldw	r3,-56(fp)
 840712c:	10c5883a 	add	r2,r2,r3
 8407130:	e0bff015 	stw	r2,-64(fp)
				error = error - deltax;
 8407134:	e13ff317 	ldw	r4,-52(fp)
 8407138:	e0bff517 	ldw	r2,-44(fp)
 840713c:	2089c83a 	sub	r4,r4,r2
 8407140:	e13ff315 	stw	r4,-52(fp)

	/* Draw a line - either go along the x axis (steep = 0) or along the y axis (steep = 1). The code is replicated to
	 * compile well on low optimization levels. */
	if (steep == 1)
	{
		for (x=x_0; x <= x_1; x++) {
 8407144:	e0fff117 	ldw	r3,-60(fp)
 8407148:	18c00044 	addi	r3,r3,1
 840714c:	e0fff115 	stw	r3,-60(fp)
 8407150:	e13ff817 	ldw	r4,-32(fp)
 8407154:	e0bff117 	ldw	r2,-60(fp)
 8407158:	20bfe20e 	bge	r4,r2,84070e4 <alt_up_pixel_buffer_dma_draw_line+0x288>
 840715c:	00002106 	br	84071e4 <alt_up_pixel_buffer_dma_draw_line+0x388>
			}
		}
	}
	else
	{
		for (x=x_0; x <= x_1; x++) {
 8407160:	e0fffa17 	ldw	r3,-24(fp)
 8407164:	e0fff115 	stw	r3,-60(fp)
 8407168:	00001b06 	br	84071d8 <alt_up_pixel_buffer_dma_draw_line+0x37c>
			helper_plot_pixel(buffer_start, line_size, x, y, line_color, color_mode);
 840716c:	e13fee17 	ldw	r4,-72(fp)
 8407170:	d9000015 	stw	r4,0(sp)
 8407174:	e0bfef17 	ldw	r2,-68(fp)
 8407178:	d8800115 	stw	r2,4(sp)
 840717c:	e13fed17 	ldw	r4,-76(fp)
 8407180:	e17fec17 	ldw	r5,-80(fp)
 8407184:	e1bff117 	ldw	r6,-60(fp)
 8407188:	e1fff017 	ldw	r7,-64(fp)
 840718c:	8406d8c0 	call	8406d8c <helper_plot_pixel>
			error = error + deltay;
 8407190:	e0fff317 	ldw	r3,-52(fp)
 8407194:	e13ff417 	ldw	r4,-48(fp)
 8407198:	1907883a 	add	r3,r3,r4
 840719c:	e0fff315 	stw	r3,-52(fp)
			if (error > 0) {
 84071a0:	e0fff317 	ldw	r3,-52(fp)
 84071a4:	18800050 	cmplti	r2,r3,1
 84071a8:	1000081e 	bne	r2,zero,84071cc <alt_up_pixel_buffer_dma_draw_line+0x370>
				y = y + ystep;
 84071ac:	e13ff017 	ldw	r4,-64(fp)
 84071b0:	e0bff217 	ldw	r2,-56(fp)
 84071b4:	2089883a 	add	r4,r4,r2
 84071b8:	e13ff015 	stw	r4,-64(fp)
				error = error - deltax;
 84071bc:	e0fff317 	ldw	r3,-52(fp)
 84071c0:	e13ff517 	ldw	r4,-44(fp)
 84071c4:	1907c83a 	sub	r3,r3,r4
 84071c8:	e0fff315 	stw	r3,-52(fp)
			}
		}
	}
	else
	{
		for (x=x_0; x <= x_1; x++) {
 84071cc:	e0bff117 	ldw	r2,-60(fp)
 84071d0:	10800044 	addi	r2,r2,1
 84071d4:	e0bff115 	stw	r2,-60(fp)
 84071d8:	e0fff817 	ldw	r3,-32(fp)
 84071dc:	e13ff117 	ldw	r4,-60(fp)
 84071e0:	193fe20e 	bge	r3,r4,840716c <alt_up_pixel_buffer_dma_draw_line+0x310>
				y = y + ystep;
				error = error - deltax;
			}
		}
	}
}
 84071e4:	e037883a 	mov	sp,fp
 84071e8:	dfc00117 	ldw	ra,4(sp)
 84071ec:	df000017 	ldw	fp,0(sp)
 84071f0:	dec00204 	addi	sp,sp,8
 84071f4:	f800283a 	ret

084071f8 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
 84071f8:	defff404 	addi	sp,sp,-48
 84071fc:	df000b15 	stw	fp,44(sp)
 8407200:	df000b04 	addi	fp,sp,44
 8407204:	e13ffb15 	stw	r4,-20(fp)
 8407208:	e17ffc15 	stw	r5,-16(fp)
 840720c:	e1bffd15 	stw	r6,-12(fp)
 8407210:	e1fffe15 	stw	r7,-8(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
 8407214:	e03ff915 	stw	zero,-28(fp)
 8407218:	00821074 	movhi	r2,2113
 840721c:	10aead04 	addi	r2,r2,-17740
 8407220:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
 8407224:	1005003a 	cmpeq	r2,r2,zero
 8407228:	1000411e 	bne	r2,zero,8407330 <alt_alarm_start+0x138>
  {
    if (alarm)
 840722c:	e0bffb17 	ldw	r2,-20(fp)
 8407230:	1005003a 	cmpeq	r2,r2,zero
 8407234:	10003b1e 	bne	r2,zero,8407324 <alt_alarm_start+0x12c>
    {
      alarm->callback = callback;
 8407238:	e0fffb17 	ldw	r3,-20(fp)
 840723c:	e0bffd17 	ldw	r2,-12(fp)
 8407240:	18800315 	stw	r2,12(r3)
      alarm->context  = context;
 8407244:	e0fffb17 	ldw	r3,-20(fp)
 8407248:	e0bffe17 	ldw	r2,-8(fp)
 840724c:	18800515 	stw	r2,20(r3)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8407250:	0005303a 	rdctl	r2,status
 8407254:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8407258:	e0fff817 	ldw	r3,-32(fp)
 840725c:	00bfff84 	movi	r2,-2
 8407260:	1884703a 	and	r2,r3,r2
 8407264:	1001703a 	wrctl	status,r2
  
  return context;
 8407268:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
 840726c:	e0bffa15 	stw	r2,-24(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 8407270:	00821074 	movhi	r2,2113
 8407274:	10aeae04 	addi	r2,r2,-17736
 8407278:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
 840727c:	e0bff915 	stw	r2,-28(fp)
      
      alarm->time = nticks + current_nticks + 1; 
 8407280:	e0fffc17 	ldw	r3,-16(fp)
 8407284:	e0bff917 	ldw	r2,-28(fp)
 8407288:	1885883a 	add	r2,r3,r2
 840728c:	10c00044 	addi	r3,r2,1
 8407290:	e0bffb17 	ldw	r2,-20(fp)
 8407294:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
 8407298:	e0bffb17 	ldw	r2,-20(fp)
 840729c:	10c00217 	ldw	r3,8(r2)
 84072a0:	e0bff917 	ldw	r2,-28(fp)
 84072a4:	1880042e 	bgeu	r3,r2,84072b8 <alt_alarm_start+0xc0>
      {
        alarm->rollover = 1;
 84072a8:	e0fffb17 	ldw	r3,-20(fp)
 84072ac:	00800044 	movi	r2,1
 84072b0:	18800405 	stb	r2,16(r3)
 84072b4:	00000206 	br	84072c0 <alt_alarm_start+0xc8>
      }
      else
      {
        alarm->rollover = 0;
 84072b8:	e0bffb17 	ldw	r2,-20(fp)
 84072bc:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
 84072c0:	e0fffb17 	ldw	r3,-20(fp)
 84072c4:	00821074 	movhi	r2,2113
 84072c8:	10a8b904 	addi	r2,r2,-23836
 84072cc:	e0bff615 	stw	r2,-40(fp)
 84072d0:	e0fff715 	stw	r3,-36(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 84072d4:	e0fff717 	ldw	r3,-36(fp)
 84072d8:	e0bff617 	ldw	r2,-40(fp)
 84072dc:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
 84072e0:	e0bff617 	ldw	r2,-40(fp)
 84072e4:	10c00017 	ldw	r3,0(r2)
 84072e8:	e0bff717 	ldw	r2,-36(fp)
 84072ec:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 84072f0:	e0bff617 	ldw	r2,-40(fp)
 84072f4:	10c00017 	ldw	r3,0(r2)
 84072f8:	e0bff717 	ldw	r2,-36(fp)
 84072fc:	18800115 	stw	r2,4(r3)
  list->next           = entry;
 8407300:	e0fff617 	ldw	r3,-40(fp)
 8407304:	e0bff717 	ldw	r2,-36(fp)
 8407308:	18800015 	stw	r2,0(r3)
 840730c:	e0bffa17 	ldw	r2,-24(fp)
 8407310:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8407314:	e0bff517 	ldw	r2,-44(fp)
 8407318:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
 840731c:	e03fff15 	stw	zero,-4(fp)
 8407320:	00000506 	br	8407338 <alt_alarm_start+0x140>
    }
    else
    {
      return -EINVAL;
 8407324:	00bffa84 	movi	r2,-22
 8407328:	e0bfff15 	stw	r2,-4(fp)
 840732c:	00000206 	br	8407338 <alt_alarm_start+0x140>
    }
  }
  else
  {
    return -ENOTSUP;
 8407330:	00bfde84 	movi	r2,-134
 8407334:	e0bfff15 	stw	r2,-4(fp)
 8407338:	e0bfff17 	ldw	r2,-4(fp)
  }
}
 840733c:	e037883a 	mov	sp,fp
 8407340:	df000017 	ldw	fp,0(sp)
 8407344:	dec00104 	addi	sp,sp,4
 8407348:	f800283a 	ret

0840734c <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 840734c:	defff804 	addi	sp,sp,-32
 8407350:	dfc00715 	stw	ra,28(sp)
 8407354:	df000615 	stw	fp,24(sp)
 8407358:	df000604 	addi	fp,sp,24
 840735c:	e13ffc15 	stw	r4,-16(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 8407360:	e0bffc17 	ldw	r2,-16(fp)
 8407364:	1004803a 	cmplt	r2,r2,zero
 8407368:	1000081e 	bne	r2,zero,840738c <close+0x40>
 840736c:	e0bffc17 	ldw	r2,-16(fp)
 8407370:	10800324 	muli	r2,r2,12
 8407374:	1007883a 	mov	r3,r2
 8407378:	00821074 	movhi	r2,2113
 840737c:	10a84804 	addi	r2,r2,-24288
 8407380:	1887883a 	add	r3,r3,r2
 8407384:	e0ffff15 	stw	r3,-4(fp)
 8407388:	00000106 	br	8407390 <close+0x44>
 840738c:	e03fff15 	stw	zero,-4(fp)
 8407390:	e0bfff17 	ldw	r2,-4(fp)
 8407394:	e0bffb15 	stw	r2,-20(fp)

  if (fd)
 8407398:	e0bffb17 	ldw	r2,-20(fp)
 840739c:	1005003a 	cmpeq	r2,r2,zero
 84073a0:	10001d1e 	bne	r2,zero,8407418 <close+0xcc>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 84073a4:	e0bffb17 	ldw	r2,-20(fp)
 84073a8:	10800017 	ldw	r2,0(r2)
 84073ac:	10800417 	ldw	r2,16(r2)
 84073b0:	1005003a 	cmpeq	r2,r2,zero
 84073b4:	1000071e 	bne	r2,zero,84073d4 <close+0x88>
 84073b8:	e0bffb17 	ldw	r2,-20(fp)
 84073bc:	10800017 	ldw	r2,0(r2)
 84073c0:	10800417 	ldw	r2,16(r2)
 84073c4:	e13ffb17 	ldw	r4,-20(fp)
 84073c8:	103ee83a 	callr	r2
 84073cc:	e0bffe15 	stw	r2,-8(fp)
 84073d0:	00000106 	br	84073d8 <close+0x8c>
 84073d4:	e03ffe15 	stw	zero,-8(fp)
 84073d8:	e0bffe17 	ldw	r2,-8(fp)
 84073dc:	e0bffa15 	stw	r2,-24(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 84073e0:	e13ffc17 	ldw	r4,-16(fp)
 84073e4:	8407e840 	call	8407e84 <alt_release_fd>
    if (rval < 0)
 84073e8:	e0bffa17 	ldw	r2,-24(fp)
 84073ec:	1004403a 	cmpge	r2,r2,zero
 84073f0:	1000071e 	bne	r2,zero,8407410 <close+0xc4>
    {
      ALT_ERRNO = -rval;
 84073f4:	84074480 	call	8407448 <alt_get_errno>
 84073f8:	e0fffa17 	ldw	r3,-24(fp)
 84073fc:	00c7c83a 	sub	r3,zero,r3
 8407400:	10c00015 	stw	r3,0(r2)
      return -1;
 8407404:	00bfffc4 	movi	r2,-1
 8407408:	e0bffd15 	stw	r2,-12(fp)
 840740c:	00000806 	br	8407430 <close+0xe4>
    }
    return 0;
 8407410:	e03ffd15 	stw	zero,-12(fp)
 8407414:	00000606 	br	8407430 <close+0xe4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 8407418:	84074480 	call	8407448 <alt_get_errno>
 840741c:	1007883a 	mov	r3,r2
 8407420:	00801444 	movi	r2,81
 8407424:	18800015 	stw	r2,0(r3)
    return -1;
 8407428:	00bfffc4 	movi	r2,-1
 840742c:	e0bffd15 	stw	r2,-12(fp)
 8407430:	e0bffd17 	ldw	r2,-12(fp)
  }
}
 8407434:	e037883a 	mov	sp,fp
 8407438:	dfc00117 	ldw	ra,4(sp)
 840743c:	df000017 	ldw	fp,0(sp)
 8407440:	dec00204 	addi	sp,sp,8
 8407444:	f800283a 	ret

08407448 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 8407448:	defffd04 	addi	sp,sp,-12
 840744c:	dfc00215 	stw	ra,8(sp)
 8407450:	df000115 	stw	fp,4(sp)
 8407454:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 8407458:	00821074 	movhi	r2,2113
 840745c:	10a8b704 	addi	r2,r2,-23844
 8407460:	10800017 	ldw	r2,0(r2)
 8407464:	1005003a 	cmpeq	r2,r2,zero
 8407468:	1000061e 	bne	r2,zero,8407484 <alt_get_errno+0x3c>
 840746c:	00821074 	movhi	r2,2113
 8407470:	10a8b704 	addi	r2,r2,-23844
 8407474:	10800017 	ldw	r2,0(r2)
 8407478:	103ee83a 	callr	r2
 840747c:	e0bfff15 	stw	r2,-4(fp)
 8407480:	00000306 	br	8407490 <alt_get_errno+0x48>
 8407484:	00821074 	movhi	r2,2113
 8407488:	10aeaf04 	addi	r2,r2,-17732
 840748c:	e0bfff15 	stw	r2,-4(fp)
 8407490:	e0bfff17 	ldw	r2,-4(fp)
}
 8407494:	e037883a 	mov	sp,fp
 8407498:	dfc00117 	ldw	ra,4(sp)
 840749c:	df000017 	ldw	fp,0(sp)
 84074a0:	dec00204 	addi	sp,sp,8
 84074a4:	f800283a 	ret

084074a8 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 84074a8:	defffe04 	addi	sp,sp,-8
 84074ac:	df000115 	stw	fp,4(sp)
 84074b0:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
 84074b4:	e03fff15 	stw	zero,-4(fp)
 84074b8:	00000506 	br	84074d0 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
 84074bc:	e0bfff17 	ldw	r2,-4(fp)
 84074c0:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
 84074c4:	e0bfff17 	ldw	r2,-4(fp)
 84074c8:	10800804 	addi	r2,r2,32
 84074cc:	e0bfff15 	stw	r2,-4(fp)
 84074d0:	e0bfff17 	ldw	r2,-4(fp)
 84074d4:	10810030 	cmpltui	r2,r2,1024
 84074d8:	103ff81e 	bne	r2,zero,84074bc <alt_dcache_flush_all+0x14>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 84074dc:	e037883a 	mov	sp,fp
 84074e0:	df000017 	ldw	fp,0(sp)
 84074e4:	dec00104 	addi	sp,sp,4
 84074e8:	f800283a 	ret

084074ec <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 84074ec:	defffc04 	addi	sp,sp,-16
 84074f0:	df000315 	stw	fp,12(sp)
 84074f4:	df000304 	addi	fp,sp,12
 84074f8:	e13ffd15 	stw	r4,-12(fp)
 84074fc:	e17ffe15 	stw	r5,-8(fp)
 8407500:	e1bfff15 	stw	r6,-4(fp)
  return len;
 8407504:	e0bfff17 	ldw	r2,-4(fp)
}
 8407508:	e037883a 	mov	sp,fp
 840750c:	df000017 	ldw	fp,0(sp)
 8407510:	dec00104 	addi	sp,sp,4
 8407514:	f800283a 	ret

08407518 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
 8407518:	defff904 	addi	sp,sp,-28
 840751c:	dfc00615 	stw	ra,24(sp)
 8407520:	df000515 	stw	fp,20(sp)
 8407524:	df000504 	addi	fp,sp,20
 8407528:	e13ffd15 	stw	r4,-12(fp)
 840752c:	e17ffe15 	stw	r5,-8(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
 8407530:	e0bffd17 	ldw	r2,-12(fp)
 8407534:	1005003a 	cmpeq	r2,r2,zero
 8407538:	1000041e 	bne	r2,zero,840754c <alt_dev_llist_insert+0x34>
 840753c:	e0bffd17 	ldw	r2,-12(fp)
 8407540:	10800217 	ldw	r2,8(r2)
 8407544:	1004c03a 	cmpne	r2,r2,zero
 8407548:	1000071e 	bne	r2,zero,8407568 <alt_dev_llist_insert+0x50>
  {
    ALT_ERRNO = EINVAL;
 840754c:	84075cc0 	call	84075cc <alt_get_errno>
 8407550:	1007883a 	mov	r3,r2
 8407554:	00800584 	movi	r2,22
 8407558:	18800015 	stw	r2,0(r3)
    return -EINVAL;
 840755c:	00bffa84 	movi	r2,-22
 8407560:	e0bfff15 	stw	r2,-4(fp)
 8407564:	00001306 	br	84075b4 <alt_dev_llist_insert+0x9c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
 8407568:	e0fffd17 	ldw	r3,-12(fp)
 840756c:	e0bffe17 	ldw	r2,-8(fp)
 8407570:	e0bffb15 	stw	r2,-20(fp)
 8407574:	e0fffc15 	stw	r3,-16(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 8407578:	e0fffc17 	ldw	r3,-16(fp)
 840757c:	e0bffb17 	ldw	r2,-20(fp)
 8407580:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
 8407584:	e0bffb17 	ldw	r2,-20(fp)
 8407588:	10c00017 	ldw	r3,0(r2)
 840758c:	e0bffc17 	ldw	r2,-16(fp)
 8407590:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 8407594:	e0bffb17 	ldw	r2,-20(fp)
 8407598:	10c00017 	ldw	r3,0(r2)
 840759c:	e0bffc17 	ldw	r2,-16(fp)
 84075a0:	18800115 	stw	r2,4(r3)
  list->next           = entry;
 84075a4:	e0fffb17 	ldw	r3,-20(fp)
 84075a8:	e0bffc17 	ldw	r2,-16(fp)
 84075ac:	18800015 	stw	r2,0(r3)

  return 0;  
 84075b0:	e03fff15 	stw	zero,-4(fp)
 84075b4:	e0bfff17 	ldw	r2,-4(fp)
}
 84075b8:	e037883a 	mov	sp,fp
 84075bc:	dfc00117 	ldw	ra,4(sp)
 84075c0:	df000017 	ldw	fp,0(sp)
 84075c4:	dec00204 	addi	sp,sp,8
 84075c8:	f800283a 	ret

084075cc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 84075cc:	defffd04 	addi	sp,sp,-12
 84075d0:	dfc00215 	stw	ra,8(sp)
 84075d4:	df000115 	stw	fp,4(sp)
 84075d8:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 84075dc:	00821074 	movhi	r2,2113
 84075e0:	10a8b704 	addi	r2,r2,-23844
 84075e4:	10800017 	ldw	r2,0(r2)
 84075e8:	1005003a 	cmpeq	r2,r2,zero
 84075ec:	1000061e 	bne	r2,zero,8407608 <alt_get_errno+0x3c>
 84075f0:	00821074 	movhi	r2,2113
 84075f4:	10a8b704 	addi	r2,r2,-23844
 84075f8:	10800017 	ldw	r2,0(r2)
 84075fc:	103ee83a 	callr	r2
 8407600:	e0bfff15 	stw	r2,-4(fp)
 8407604:	00000306 	br	8407614 <alt_get_errno+0x48>
 8407608:	00821074 	movhi	r2,2113
 840760c:	10aeaf04 	addi	r2,r2,-17732
 8407610:	e0bfff15 	stw	r2,-4(fp)
 8407614:	e0bfff17 	ldw	r2,-4(fp)
}
 8407618:	e037883a 	mov	sp,fp
 840761c:	dfc00117 	ldw	ra,4(sp)
 8407620:	df000017 	ldw	fp,0(sp)
 8407624:	dec00204 	addi	sp,sp,8
 8407628:	f800283a 	ret

0840762c <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
 840762c:	defffd04 	addi	sp,sp,-12
 8407630:	dfc00215 	stw	ra,8(sp)
 8407634:	df000115 	stw	fp,4(sp)
 8407638:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 840763c:	00bfff04 	movi	r2,-4
 8407640:	00c21074 	movhi	r3,2113
 8407644:	18e20c04 	addi	r3,r3,-30672
 8407648:	1885883a 	add	r2,r3,r2
 840764c:	e0bfff15 	stw	r2,-4(fp)
 8407650:	00000606 	br	840766c <_do_ctors+0x40>
        (*ctor) (); 
 8407654:	e0bfff17 	ldw	r2,-4(fp)
 8407658:	10800017 	ldw	r2,0(r2)
 840765c:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 8407660:	e0bfff17 	ldw	r2,-4(fp)
 8407664:	10bfff04 	addi	r2,r2,-4
 8407668:	e0bfff15 	stw	r2,-4(fp)
 840766c:	e0ffff17 	ldw	r3,-4(fp)
 8407670:	00821074 	movhi	r2,2113
 8407674:	10a20b04 	addi	r2,r2,-30676
 8407678:	18bff62e 	bgeu	r3,r2,8407654 <_do_ctors+0x28>
        (*ctor) (); 
}
 840767c:	e037883a 	mov	sp,fp
 8407680:	dfc00117 	ldw	ra,4(sp)
 8407684:	df000017 	ldw	fp,0(sp)
 8407688:	dec00204 	addi	sp,sp,8
 840768c:	f800283a 	ret

08407690 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
 8407690:	defffd04 	addi	sp,sp,-12
 8407694:	dfc00215 	stw	ra,8(sp)
 8407698:	df000115 	stw	fp,4(sp)
 840769c:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 84076a0:	00bfff04 	movi	r2,-4
 84076a4:	00c21074 	movhi	r3,2113
 84076a8:	18e20c04 	addi	r3,r3,-30672
 84076ac:	1885883a 	add	r2,r3,r2
 84076b0:	e0bfff15 	stw	r2,-4(fp)
 84076b4:	00000606 	br	84076d0 <_do_dtors+0x40>
        (*dtor) (); 
 84076b8:	e0bfff17 	ldw	r2,-4(fp)
 84076bc:	10800017 	ldw	r2,0(r2)
 84076c0:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 84076c4:	e0bfff17 	ldw	r2,-4(fp)
 84076c8:	10bfff04 	addi	r2,r2,-4
 84076cc:	e0bfff15 	stw	r2,-4(fp)
 84076d0:	e0ffff17 	ldw	r3,-4(fp)
 84076d4:	00821074 	movhi	r2,2113
 84076d8:	10a20c04 	addi	r2,r2,-30672
 84076dc:	18bff62e 	bgeu	r3,r2,84076b8 <_do_dtors+0x28>
        (*dtor) (); 
}
 84076e0:	e037883a 	mov	sp,fp
 84076e4:	dfc00117 	ldw	ra,4(sp)
 84076e8:	df000017 	ldw	fp,0(sp)
 84076ec:	dec00204 	addi	sp,sp,8
 84076f0:	f800283a 	ret

084076f4 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 84076f4:	defff904 	addi	sp,sp,-28
 84076f8:	dfc00615 	stw	ra,24(sp)
 84076fc:	df000515 	stw	fp,20(sp)
 8407700:	df000504 	addi	fp,sp,20
 8407704:	e13ffd15 	stw	r4,-12(fp)
 8407708:	e17ffe15 	stw	r5,-8(fp)
  alt_dev* next = (alt_dev*) llist->next;
 840770c:	e0bffe17 	ldw	r2,-8(fp)
 8407710:	10800017 	ldw	r2,0(r2)
 8407714:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
 8407718:	e13ffd17 	ldw	r4,-12(fp)
 840771c:	84084700 	call	8408470 <strlen>
 8407720:	10800044 	addi	r2,r2,1
 8407724:	e0bffb15 	stw	r2,-20(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 8407728:	00000d06 	br	8407760 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 840772c:	e0bffc17 	ldw	r2,-16(fp)
 8407730:	11000217 	ldw	r4,8(r2)
 8407734:	e1bffb17 	ldw	r6,-20(fp)
 8407738:	e17ffd17 	ldw	r5,-12(fp)
 840773c:	840835c0 	call	840835c <memcmp>
 8407740:	1004c03a 	cmpne	r2,r2,zero
 8407744:	1000031e 	bne	r2,zero,8407754 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
 8407748:	e0bffc17 	ldw	r2,-16(fp)
 840774c:	e0bfff15 	stw	r2,-4(fp)
 8407750:	00000706 	br	8407770 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
 8407754:	e0bffc17 	ldw	r2,-16(fp)
 8407758:	10800017 	ldw	r2,0(r2)
 840775c:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 8407760:	e0fffe17 	ldw	r3,-8(fp)
 8407764:	e0bffc17 	ldw	r2,-16(fp)
 8407768:	10fff01e 	bne	r2,r3,840772c <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
 840776c:	e03fff15 	stw	zero,-4(fp)
 8407770:	e0bfff17 	ldw	r2,-4(fp)
}
 8407774:	e037883a 	mov	sp,fp
 8407778:	dfc00117 	ldw	ra,4(sp)
 840777c:	df000017 	ldw	fp,0(sp)
 8407780:	dec00204 	addi	sp,sp,8
 8407784:	f800283a 	ret

08407788 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 8407788:	defffe04 	addi	sp,sp,-8
 840778c:	dfc00115 	stw	ra,4(sp)
 8407790:	df000015 	stw	fp,0(sp)
 8407794:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
 8407798:	0009883a 	mov	r4,zero
 840779c:	01440004 	movi	r5,4096
 84077a0:	84082800 	call	8408280 <alt_icache_flush>
#endif
}
 84077a4:	e037883a 	mov	sp,fp
 84077a8:	dfc00117 	ldw	ra,4(sp)
 84077ac:	df000017 	ldw	fp,0(sp)
 84077b0:	dec00204 	addi	sp,sp,8
 84077b4:	f800283a 	ret

084077b8 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 84077b8:	defff904 	addi	sp,sp,-28
 84077bc:	dfc00615 	stw	ra,24(sp)
 84077c0:	df000515 	stw	fp,20(sp)
 84077c4:	df000504 	addi	fp,sp,20
 84077c8:	e13ffc15 	stw	r4,-16(fp)
 84077cc:	e17ffd15 	stw	r5,-12(fp)
 84077d0:	e1bffe15 	stw	r6,-8(fp)
 84077d4:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
 84077d8:	e0800217 	ldw	r2,8(fp)
 84077dc:	d8800015 	stw	r2,0(sp)
 84077e0:	e13ffc17 	ldw	r4,-16(fp)
 84077e4:	e17ffd17 	ldw	r5,-12(fp)
 84077e8:	e1bffe17 	ldw	r6,-8(fp)
 84077ec:	e1ffff17 	ldw	r7,-4(fp)
 84077f0:	840798c0 	call	840798c <alt_iic_isr_register>
}  
 84077f4:	e037883a 	mov	sp,fp
 84077f8:	dfc00117 	ldw	ra,4(sp)
 84077fc:	df000017 	ldw	fp,0(sp)
 8407800:	dec00204 	addi	sp,sp,8
 8407804:	f800283a 	ret

08407808 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
 8407808:	defff904 	addi	sp,sp,-28
 840780c:	df000615 	stw	fp,24(sp)
 8407810:	df000604 	addi	fp,sp,24
 8407814:	e13ffe15 	stw	r4,-8(fp)
 8407818:	e17fff15 	stw	r5,-4(fp)
 840781c:	e0bfff17 	ldw	r2,-4(fp)
 8407820:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8407824:	0005303a 	rdctl	r2,status
 8407828:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 840782c:	e0fffb17 	ldw	r3,-20(fp)
 8407830:	00bfff84 	movi	r2,-2
 8407834:	1884703a 	and	r2,r3,r2
 8407838:	1001703a 	wrctl	status,r2
  
  return context;
 840783c:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 8407840:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active |= (1 << id);
 8407844:	e0fffc17 	ldw	r3,-16(fp)
 8407848:	00800044 	movi	r2,1
 840784c:	10c4983a 	sll	r2,r2,r3
 8407850:	1007883a 	mov	r3,r2
 8407854:	00821074 	movhi	r2,2113
 8407858:	10aeac04 	addi	r2,r2,-17744
 840785c:	10800017 	ldw	r2,0(r2)
 8407860:	1886b03a 	or	r3,r3,r2
 8407864:	00821074 	movhi	r2,2113
 8407868:	10aeac04 	addi	r2,r2,-17744
 840786c:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 8407870:	00821074 	movhi	r2,2113
 8407874:	10aeac04 	addi	r2,r2,-17744
 8407878:	10800017 	ldw	r2,0(r2)
 840787c:	100170fa 	wrctl	ienable,r2
 8407880:	e0bffd17 	ldw	r2,-12(fp)
 8407884:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8407888:	e0bffa17 	ldw	r2,-24(fp)
 840788c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 8407890:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
 8407894:	e037883a 	mov	sp,fp
 8407898:	df000017 	ldw	fp,0(sp)
 840789c:	dec00104 	addi	sp,sp,4
 84078a0:	f800283a 	ret

084078a4 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
 84078a4:	defff904 	addi	sp,sp,-28
 84078a8:	df000615 	stw	fp,24(sp)
 84078ac:	df000604 	addi	fp,sp,24
 84078b0:	e13ffe15 	stw	r4,-8(fp)
 84078b4:	e17fff15 	stw	r5,-4(fp)
 84078b8:	e0bfff17 	ldw	r2,-4(fp)
 84078bc:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 84078c0:	0005303a 	rdctl	r2,status
 84078c4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 84078c8:	e0fffb17 	ldw	r3,-20(fp)
 84078cc:	00bfff84 	movi	r2,-2
 84078d0:	1884703a 	and	r2,r3,r2
 84078d4:	1001703a 	wrctl	status,r2
  
  return context;
 84078d8:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 84078dc:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active &= ~(1 << id);
 84078e0:	e0fffc17 	ldw	r3,-16(fp)
 84078e4:	00800044 	movi	r2,1
 84078e8:	10c4983a 	sll	r2,r2,r3
 84078ec:	0084303a 	nor	r2,zero,r2
 84078f0:	1007883a 	mov	r3,r2
 84078f4:	00821074 	movhi	r2,2113
 84078f8:	10aeac04 	addi	r2,r2,-17744
 84078fc:	10800017 	ldw	r2,0(r2)
 8407900:	1886703a 	and	r3,r3,r2
 8407904:	00821074 	movhi	r2,2113
 8407908:	10aeac04 	addi	r2,r2,-17744
 840790c:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 8407910:	00821074 	movhi	r2,2113
 8407914:	10aeac04 	addi	r2,r2,-17744
 8407918:	10800017 	ldw	r2,0(r2)
 840791c:	100170fa 	wrctl	ienable,r2
 8407920:	e0bffd17 	ldw	r2,-12(fp)
 8407924:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8407928:	e0bffa17 	ldw	r2,-24(fp)
 840792c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 8407930:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
 8407934:	e037883a 	mov	sp,fp
 8407938:	df000017 	ldw	fp,0(sp)
 840793c:	dec00104 	addi	sp,sp,4
 8407940:	f800283a 	ret

08407944 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
 8407944:	defffc04 	addi	sp,sp,-16
 8407948:	df000315 	stw	fp,12(sp)
 840794c:	df000304 	addi	fp,sp,12
 8407950:	e13ffe15 	stw	r4,-8(fp)
 8407954:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
 8407958:	000530fa 	rdctl	r2,ienable
 840795c:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
 8407960:	e0ffff17 	ldw	r3,-4(fp)
 8407964:	00800044 	movi	r2,1
 8407968:	10c4983a 	sll	r2,r2,r3
 840796c:	1007883a 	mov	r3,r2
 8407970:	e0bffd17 	ldw	r2,-12(fp)
 8407974:	1884703a 	and	r2,r3,r2
 8407978:	1004c03a 	cmpne	r2,r2,zero
}
 840797c:	e037883a 	mov	sp,fp
 8407980:	df000017 	ldw	fp,0(sp)
 8407984:	dec00104 	addi	sp,sp,4
 8407988:	f800283a 	ret

0840798c <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 840798c:	defff404 	addi	sp,sp,-48
 8407990:	dfc00b15 	stw	ra,44(sp)
 8407994:	df000a15 	stw	fp,40(sp)
 8407998:	df000a04 	addi	fp,sp,40
 840799c:	e13ffb15 	stw	r4,-20(fp)
 84079a0:	e17ffc15 	stw	r5,-16(fp)
 84079a4:	e1bffd15 	stw	r6,-12(fp)
 84079a8:	e1fffe15 	stw	r7,-8(fp)
  int rc = -EINVAL;  
 84079ac:	00bffa84 	movi	r2,-22
 84079b0:	e0bffa15 	stw	r2,-24(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
 84079b4:	e0bffc17 	ldw	r2,-16(fp)
 84079b8:	e0bff915 	stw	r2,-28(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 84079bc:	e0bff917 	ldw	r2,-28(fp)
 84079c0:	10800808 	cmpgei	r2,r2,32
 84079c4:	1000291e 	bne	r2,zero,8407a6c <alt_iic_isr_register+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 84079c8:	0005303a 	rdctl	r2,status
 84079cc:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 84079d0:	e0fff717 	ldw	r3,-36(fp)
 84079d4:	00bfff84 	movi	r2,-2
 84079d8:	1884703a 	and	r2,r3,r2
 84079dc:	1001703a 	wrctl	status,r2
  
  return context;
 84079e0:	e0bff717 	ldw	r2,-36(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
 84079e4:	e0bff815 	stw	r2,-32(fp)

    alt_irq[id].handler = isr;
 84079e8:	e0bff917 	ldw	r2,-28(fp)
 84079ec:	00c21074 	movhi	r3,2113
 84079f0:	18eeb004 	addi	r3,r3,-17728
 84079f4:	100490fa 	slli	r2,r2,3
 84079f8:	10c7883a 	add	r3,r2,r3
 84079fc:	e0bffd17 	ldw	r2,-12(fp)
 8407a00:	18800015 	stw	r2,0(r3)
    alt_irq[id].context = isr_context;
 8407a04:	e0bff917 	ldw	r2,-28(fp)
 8407a08:	00c21074 	movhi	r3,2113
 8407a0c:	18eeb004 	addi	r3,r3,-17728
 8407a10:	100490fa 	slli	r2,r2,3
 8407a14:	10c5883a 	add	r2,r2,r3
 8407a18:	10c00104 	addi	r3,r2,4
 8407a1c:	e0bffe17 	ldw	r2,-8(fp)
 8407a20:	18800015 	stw	r2,0(r3)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
 8407a24:	e0bffd17 	ldw	r2,-12(fp)
 8407a28:	1005003a 	cmpeq	r2,r2,zero
 8407a2c:	1000051e 	bne	r2,zero,8407a44 <alt_iic_isr_register+0xb8>
 8407a30:	e17ff917 	ldw	r5,-28(fp)
 8407a34:	e13ffb17 	ldw	r4,-20(fp)
 8407a38:	84078080 	call	8407808 <alt_ic_irq_enable>
 8407a3c:	e0bfff15 	stw	r2,-4(fp)
 8407a40:	00000406 	br	8407a54 <alt_iic_isr_register+0xc8>
 8407a44:	e17ff917 	ldw	r5,-28(fp)
 8407a48:	e13ffb17 	ldw	r4,-20(fp)
 8407a4c:	84078a40 	call	84078a4 <alt_ic_irq_disable>
 8407a50:	e0bfff15 	stw	r2,-4(fp)
 8407a54:	e0bfff17 	ldw	r2,-4(fp)
 8407a58:	e0bffa15 	stw	r2,-24(fp)
 8407a5c:	e0bff817 	ldw	r2,-32(fp)
 8407a60:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8407a64:	e0bff617 	ldw	r2,-40(fp)
 8407a68:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
 8407a6c:	e0bffa17 	ldw	r2,-24(fp)
}
 8407a70:	e037883a 	mov	sp,fp
 8407a74:	dfc00117 	ldw	ra,4(sp)
 8407a78:	df000017 	ldw	fp,0(sp)
 8407a7c:	dec00204 	addi	sp,sp,8
 8407a80:	f800283a 	ret

08407a84 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
 8407a84:	defff904 	addi	sp,sp,-28
 8407a88:	dfc00615 	stw	ra,24(sp)
 8407a8c:	df000515 	stw	fp,20(sp)
 8407a90:	df000504 	addi	fp,sp,20
 8407a94:	e13ffc15 	stw	r4,-16(fp)
 8407a98:	e17ffd15 	stw	r5,-12(fp)
 8407a9c:	e1bffe15 	stw	r6,-8(fp)
 8407aa0:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
 8407aa4:	e13ffd17 	ldw	r4,-12(fp)
 8407aa8:	e17ffe17 	ldw	r5,-8(fp)
 8407aac:	e1bfff17 	ldw	r6,-4(fp)
 8407ab0:	8407c9c0 	call	8407c9c <open>
 8407ab4:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
 8407ab8:	e0bffb17 	ldw	r2,-20(fp)
 8407abc:	1004803a 	cmplt	r2,r2,zero
 8407ac0:	10001c1e 	bne	r2,zero,8407b34 <alt_open_fd+0xb0>
  {
    fd->dev      = alt_fd_list[old].dev;
 8407ac4:	e0bffb17 	ldw	r2,-20(fp)
 8407ac8:	00c21074 	movhi	r3,2113
 8407acc:	18e84804 	addi	r3,r3,-24288
 8407ad0:	10800324 	muli	r2,r2,12
 8407ad4:	10c5883a 	add	r2,r2,r3
 8407ad8:	10c00017 	ldw	r3,0(r2)
 8407adc:	e0bffc17 	ldw	r2,-16(fp)
 8407ae0:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
 8407ae4:	e0bffb17 	ldw	r2,-20(fp)
 8407ae8:	00c21074 	movhi	r3,2113
 8407aec:	18e84804 	addi	r3,r3,-24288
 8407af0:	10800324 	muli	r2,r2,12
 8407af4:	10c5883a 	add	r2,r2,r3
 8407af8:	10800104 	addi	r2,r2,4
 8407afc:	10c00017 	ldw	r3,0(r2)
 8407b00:	e0bffc17 	ldw	r2,-16(fp)
 8407b04:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 8407b08:	e0bffb17 	ldw	r2,-20(fp)
 8407b0c:	00c21074 	movhi	r3,2113
 8407b10:	18e84804 	addi	r3,r3,-24288
 8407b14:	10800324 	muli	r2,r2,12
 8407b18:	10c5883a 	add	r2,r2,r3
 8407b1c:	10800204 	addi	r2,r2,8
 8407b20:	10c00017 	ldw	r3,0(r2)
 8407b24:	e0bffc17 	ldw	r2,-16(fp)
 8407b28:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
 8407b2c:	e13ffb17 	ldw	r4,-20(fp)
 8407b30:	8407e840 	call	8407e84 <alt_release_fd>
  }
} 
 8407b34:	e037883a 	mov	sp,fp
 8407b38:	dfc00117 	ldw	ra,4(sp)
 8407b3c:	df000017 	ldw	fp,0(sp)
 8407b40:	dec00204 	addi	sp,sp,8
 8407b44:	f800283a 	ret

08407b48 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 8407b48:	defffb04 	addi	sp,sp,-20
 8407b4c:	dfc00415 	stw	ra,16(sp)
 8407b50:	df000315 	stw	fp,12(sp)
 8407b54:	df000304 	addi	fp,sp,12
 8407b58:	e13ffd15 	stw	r4,-12(fp)
 8407b5c:	e17ffe15 	stw	r5,-8(fp)
 8407b60:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 8407b64:	01021074 	movhi	r4,2113
 8407b68:	21284b04 	addi	r4,r4,-24276
 8407b6c:	e17ffd17 	ldw	r5,-12(fp)
 8407b70:	01800044 	movi	r6,1
 8407b74:	01c07fc4 	movi	r7,511
 8407b78:	8407a840 	call	8407a84 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 8407b7c:	01021074 	movhi	r4,2113
 8407b80:	21284804 	addi	r4,r4,-24288
 8407b84:	e17ffe17 	ldw	r5,-8(fp)
 8407b88:	000d883a 	mov	r6,zero
 8407b8c:	01c07fc4 	movi	r7,511
 8407b90:	8407a840 	call	8407a84 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 8407b94:	01021074 	movhi	r4,2113
 8407b98:	21284e04 	addi	r4,r4,-24264
 8407b9c:	e17fff17 	ldw	r5,-4(fp)
 8407ba0:	01800044 	movi	r6,1
 8407ba4:	01c07fc4 	movi	r7,511
 8407ba8:	8407a840 	call	8407a84 <alt_open_fd>
}  
 8407bac:	e037883a 	mov	sp,fp
 8407bb0:	dfc00117 	ldw	ra,4(sp)
 8407bb4:	df000017 	ldw	fp,0(sp)
 8407bb8:	dec00204 	addi	sp,sp,8
 8407bbc:	f800283a 	ret

08407bc0 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
 8407bc0:	defffc04 	addi	sp,sp,-16
 8407bc4:	df000315 	stw	fp,12(sp)
 8407bc8:	df000304 	addi	fp,sp,12
 8407bcc:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 8407bd0:	e0bffe17 	ldw	r2,-8(fp)
 8407bd4:	10800217 	ldw	r2,8(r2)
 8407bd8:	10d00034 	orhi	r3,r2,16384
 8407bdc:	e0bffe17 	ldw	r2,-8(fp)
 8407be0:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 8407be4:	e03ffd15 	stw	zero,-12(fp)
 8407be8:	00002006 	br	8407c6c <alt_file_locked+0xac>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 8407bec:	e0bffd17 	ldw	r2,-12(fp)
 8407bf0:	00c21074 	movhi	r3,2113
 8407bf4:	18e84804 	addi	r3,r3,-24288
 8407bf8:	10800324 	muli	r2,r2,12
 8407bfc:	10c5883a 	add	r2,r2,r3
 8407c00:	10c00017 	ldw	r3,0(r2)
 8407c04:	e0bffe17 	ldw	r2,-8(fp)
 8407c08:	10800017 	ldw	r2,0(r2)
 8407c0c:	1880141e 	bne	r3,r2,8407c60 <alt_file_locked+0xa0>
 8407c10:	e0bffd17 	ldw	r2,-12(fp)
 8407c14:	00c21074 	movhi	r3,2113
 8407c18:	18e84804 	addi	r3,r3,-24288
 8407c1c:	10800324 	muli	r2,r2,12
 8407c20:	10c5883a 	add	r2,r2,r3
 8407c24:	10800204 	addi	r2,r2,8
 8407c28:	10800017 	ldw	r2,0(r2)
 8407c2c:	1004403a 	cmpge	r2,r2,zero
 8407c30:	10000b1e 	bne	r2,zero,8407c60 <alt_file_locked+0xa0>
 8407c34:	e0bffd17 	ldw	r2,-12(fp)
 8407c38:	10800324 	muli	r2,r2,12
 8407c3c:	1007883a 	mov	r3,r2
 8407c40:	00821074 	movhi	r2,2113
 8407c44:	10a84804 	addi	r2,r2,-24288
 8407c48:	1887883a 	add	r3,r3,r2
 8407c4c:	e0bffe17 	ldw	r2,-8(fp)
 8407c50:	18800326 	beq	r3,r2,8407c60 <alt_file_locked+0xa0>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
 8407c54:	00bffcc4 	movi	r2,-13
 8407c58:	e0bfff15 	stw	r2,-4(fp)
 8407c5c:	00000a06 	br	8407c88 <alt_file_locked+0xc8>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 8407c60:	e0bffd17 	ldw	r2,-12(fp)
 8407c64:	10800044 	addi	r2,r2,1
 8407c68:	e0bffd15 	stw	r2,-12(fp)
 8407c6c:	00821074 	movhi	r2,2113
 8407c70:	10a8b604 	addi	r2,r2,-23848
 8407c74:	10800017 	ldw	r2,0(r2)
 8407c78:	1007883a 	mov	r3,r2
 8407c7c:	e0bffd17 	ldw	r2,-12(fp)
 8407c80:	18bfda2e 	bgeu	r3,r2,8407bec <alt_file_locked+0x2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
 8407c84:	e03fff15 	stw	zero,-4(fp)
 8407c88:	e0bfff17 	ldw	r2,-4(fp)
}
 8407c8c:	e037883a 	mov	sp,fp
 8407c90:	df000017 	ldw	fp,0(sp)
 8407c94:	dec00104 	addi	sp,sp,4
 8407c98:	f800283a 	ret

08407c9c <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 8407c9c:	defff404 	addi	sp,sp,-48
 8407ca0:	dfc00b15 	stw	ra,44(sp)
 8407ca4:	df000a15 	stw	fp,40(sp)
 8407ca8:	df000a04 	addi	fp,sp,40
 8407cac:	e13ffb15 	stw	r4,-20(fp)
 8407cb0:	e17ffc15 	stw	r5,-16(fp)
 8407cb4:	e1bffd15 	stw	r6,-12(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
 8407cb8:	00bfffc4 	movi	r2,-1
 8407cbc:	e0bff815 	stw	r2,-32(fp)
  int status = -ENODEV;
 8407cc0:	00bffb44 	movi	r2,-19
 8407cc4:	e0bff715 	stw	r2,-36(fp)
  int isafs = 0;
 8407cc8:	e03ff615 	stw	zero,-40(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 8407ccc:	e13ffb17 	ldw	r4,-20(fp)
 8407cd0:	01421074 	movhi	r5,2113
 8407cd4:	2968b404 	addi	r5,r5,-23856
 8407cd8:	84076f40 	call	84076f4 <alt_find_dev>
 8407cdc:	e0bffa15 	stw	r2,-24(fp)
 8407ce0:	e0bffa17 	ldw	r2,-24(fp)
 8407ce4:	1004c03a 	cmpne	r2,r2,zero
 8407ce8:	1000051e 	bne	r2,zero,8407d00 <open+0x64>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 8407cec:	e13ffb17 	ldw	r4,-20(fp)
 8407cf0:	84080a80 	call	84080a8 <alt_find_file>
 8407cf4:	e0bffa15 	stw	r2,-24(fp)
    isafs = 1;
 8407cf8:	00800044 	movi	r2,1
 8407cfc:	e0bff615 	stw	r2,-40(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 8407d00:	e0bffa17 	ldw	r2,-24(fp)
 8407d04:	1005003a 	cmpeq	r2,r2,zero
 8407d08:	1000301e 	bne	r2,zero,8407dcc <open+0x130>
  {
    if ((index = alt_get_fd (dev)) < 0)
 8407d0c:	e13ffa17 	ldw	r4,-24(fp)
 8407d10:	84081c80 	call	84081c8 <alt_get_fd>
 8407d14:	e0bff815 	stw	r2,-32(fp)
 8407d18:	e0bff817 	ldw	r2,-32(fp)
 8407d1c:	1004403a 	cmpge	r2,r2,zero
 8407d20:	1000031e 	bne	r2,zero,8407d30 <open+0x94>
    {
      status = index;
 8407d24:	e0bff817 	ldw	r2,-32(fp)
 8407d28:	e0bff715 	stw	r2,-36(fp)
 8407d2c:	00002906 	br	8407dd4 <open+0x138>
    }
    else
    {
      fd = &alt_fd_list[index];
 8407d30:	e0bff817 	ldw	r2,-32(fp)
 8407d34:	10800324 	muli	r2,r2,12
 8407d38:	1007883a 	mov	r3,r2
 8407d3c:	00821074 	movhi	r2,2113
 8407d40:	10a84804 	addi	r2,r2,-24288
 8407d44:	1885883a 	add	r2,r3,r2
 8407d48:	e0bff915 	stw	r2,-28(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 8407d4c:	e0fffc17 	ldw	r3,-16(fp)
 8407d50:	00900034 	movhi	r2,16384
 8407d54:	10bfffc4 	addi	r2,r2,-1
 8407d58:	1886703a 	and	r3,r3,r2
 8407d5c:	e0bff917 	ldw	r2,-28(fp)
 8407d60:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
 8407d64:	e0bff617 	ldw	r2,-40(fp)
 8407d68:	1004c03a 	cmpne	r2,r2,zero
 8407d6c:	1000061e 	bne	r2,zero,8407d88 <open+0xec>
 8407d70:	e13ff917 	ldw	r4,-28(fp)
 8407d74:	8407bc00 	call	8407bc0 <alt_file_locked>
 8407d78:	e0bff715 	stw	r2,-36(fp)
 8407d7c:	e0bff717 	ldw	r2,-36(fp)
 8407d80:	1004803a 	cmplt	r2,r2,zero
 8407d84:	1000131e 	bne	r2,zero,8407dd4 <open+0x138>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 8407d88:	e0bffa17 	ldw	r2,-24(fp)
 8407d8c:	10800317 	ldw	r2,12(r2)
 8407d90:	1005003a 	cmpeq	r2,r2,zero
 8407d94:	1000091e 	bne	r2,zero,8407dbc <open+0x120>
 8407d98:	e0bffa17 	ldw	r2,-24(fp)
 8407d9c:	10800317 	ldw	r2,12(r2)
 8407da0:	e13ff917 	ldw	r4,-28(fp)
 8407da4:	e17ffb17 	ldw	r5,-20(fp)
 8407da8:	e1bffc17 	ldw	r6,-16(fp)
 8407dac:	e1fffd17 	ldw	r7,-12(fp)
 8407db0:	103ee83a 	callr	r2
 8407db4:	e0bfff15 	stw	r2,-4(fp)
 8407db8:	00000106 	br	8407dc0 <open+0x124>
 8407dbc:	e03fff15 	stw	zero,-4(fp)
 8407dc0:	e0bfff17 	ldw	r2,-4(fp)
 8407dc4:	e0bff715 	stw	r2,-36(fp)
 8407dc8:	00000206 	br	8407dd4 <open+0x138>
      }
    }
  }
  else
  {
    status = -ENODEV;
 8407dcc:	00bffb44 	movi	r2,-19
 8407dd0:	e0bff715 	stw	r2,-36(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 8407dd4:	e0bff717 	ldw	r2,-36(fp)
 8407dd8:	1004403a 	cmpge	r2,r2,zero
 8407ddc:	1000091e 	bne	r2,zero,8407e04 <open+0x168>
  {
    alt_release_fd (index);  
 8407de0:	e13ff817 	ldw	r4,-32(fp)
 8407de4:	8407e840 	call	8407e84 <alt_release_fd>
    ALT_ERRNO = -status;
 8407de8:	8407e240 	call	8407e24 <alt_get_errno>
 8407dec:	e0fff717 	ldw	r3,-36(fp)
 8407df0:	00c7c83a 	sub	r3,zero,r3
 8407df4:	10c00015 	stw	r3,0(r2)
    return -1;
 8407df8:	00bfffc4 	movi	r2,-1
 8407dfc:	e0bffe15 	stw	r2,-8(fp)
 8407e00:	00000206 	br	8407e0c <open+0x170>
  }
  
  /* return the reference upon success */

  return index;
 8407e04:	e0bff817 	ldw	r2,-32(fp)
 8407e08:	e0bffe15 	stw	r2,-8(fp)
 8407e0c:	e0bffe17 	ldw	r2,-8(fp)
}
 8407e10:	e037883a 	mov	sp,fp
 8407e14:	dfc00117 	ldw	ra,4(sp)
 8407e18:	df000017 	ldw	fp,0(sp)
 8407e1c:	dec00204 	addi	sp,sp,8
 8407e20:	f800283a 	ret

08407e24 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 8407e24:	defffd04 	addi	sp,sp,-12
 8407e28:	dfc00215 	stw	ra,8(sp)
 8407e2c:	df000115 	stw	fp,4(sp)
 8407e30:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 8407e34:	00821074 	movhi	r2,2113
 8407e38:	10a8b704 	addi	r2,r2,-23844
 8407e3c:	10800017 	ldw	r2,0(r2)
 8407e40:	1005003a 	cmpeq	r2,r2,zero
 8407e44:	1000061e 	bne	r2,zero,8407e60 <alt_get_errno+0x3c>
 8407e48:	00821074 	movhi	r2,2113
 8407e4c:	10a8b704 	addi	r2,r2,-23844
 8407e50:	10800017 	ldw	r2,0(r2)
 8407e54:	103ee83a 	callr	r2
 8407e58:	e0bfff15 	stw	r2,-4(fp)
 8407e5c:	00000306 	br	8407e6c <alt_get_errno+0x48>
 8407e60:	00821074 	movhi	r2,2113
 8407e64:	10aeaf04 	addi	r2,r2,-17732
 8407e68:	e0bfff15 	stw	r2,-4(fp)
 8407e6c:	e0bfff17 	ldw	r2,-4(fp)
}
 8407e70:	e037883a 	mov	sp,fp
 8407e74:	dfc00117 	ldw	ra,4(sp)
 8407e78:	df000017 	ldw	fp,0(sp)
 8407e7c:	dec00204 	addi	sp,sp,8
 8407e80:	f800283a 	ret

08407e84 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 8407e84:	defffe04 	addi	sp,sp,-8
 8407e88:	df000115 	stw	fp,4(sp)
 8407e8c:	df000104 	addi	fp,sp,4
 8407e90:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
 8407e94:	e0bfff17 	ldw	r2,-4(fp)
 8407e98:	108000d0 	cmplti	r2,r2,3
 8407e9c:	10000d1e 	bne	r2,zero,8407ed4 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
 8407ea0:	e0bfff17 	ldw	r2,-4(fp)
 8407ea4:	00c21074 	movhi	r3,2113
 8407ea8:	18e84804 	addi	r3,r3,-24288
 8407eac:	10800324 	muli	r2,r2,12
 8407eb0:	10c5883a 	add	r2,r2,r3
 8407eb4:	10800204 	addi	r2,r2,8
 8407eb8:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
 8407ebc:	e0bfff17 	ldw	r2,-4(fp)
 8407ec0:	00c21074 	movhi	r3,2113
 8407ec4:	18e84804 	addi	r3,r3,-24288
 8407ec8:	10800324 	muli	r2,r2,12
 8407ecc:	10c5883a 	add	r2,r2,r3
 8407ed0:	10000015 	stw	zero,0(r2)
  }
}
 8407ed4:	e037883a 	mov	sp,fp
 8407ed8:	df000017 	ldw	fp,0(sp)
 8407edc:	dec00104 	addi	sp,sp,4
 8407ee0:	f800283a 	ret

08407ee4 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
 8407ee4:	defffa04 	addi	sp,sp,-24
 8407ee8:	df000515 	stw	fp,20(sp)
 8407eec:	df000504 	addi	fp,sp,20
 8407ef0:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8407ef4:	0005303a 	rdctl	r2,status
 8407ef8:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8407efc:	e0fffd17 	ldw	r3,-12(fp)
 8407f00:	00bfff84 	movi	r2,-2
 8407f04:	1884703a 	and	r2,r3,r2
 8407f08:	1001703a 	wrctl	status,r2
  
  return context;
 8407f0c:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
 8407f10:	e0bffe15 	stw	r2,-8(fp)
  alt_llist_remove (&alarm->llist);
 8407f14:	e0bfff17 	ldw	r2,-4(fp)
 8407f18:	e0bffc15 	stw	r2,-16(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 8407f1c:	e0bffc17 	ldw	r2,-16(fp)
 8407f20:	10c00017 	ldw	r3,0(r2)
 8407f24:	e0bffc17 	ldw	r2,-16(fp)
 8407f28:	10800117 	ldw	r2,4(r2)
 8407f2c:	18800115 	stw	r2,4(r3)
  entry->previous->next = entry->next;
 8407f30:	e0bffc17 	ldw	r2,-16(fp)
 8407f34:	10c00117 	ldw	r3,4(r2)
 8407f38:	e0bffc17 	ldw	r2,-16(fp)
 8407f3c:	10800017 	ldw	r2,0(r2)
 8407f40:	18800015 	stw	r2,0(r3)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 8407f44:	e0fffc17 	ldw	r3,-16(fp)
 8407f48:	e0bffc17 	ldw	r2,-16(fp)
 8407f4c:	18800115 	stw	r2,4(r3)
  entry->next     = entry;
 8407f50:	e0fffc17 	ldw	r3,-16(fp)
 8407f54:	e0bffc17 	ldw	r2,-16(fp)
 8407f58:	18800015 	stw	r2,0(r3)
 8407f5c:	e0bffe17 	ldw	r2,-8(fp)
 8407f60:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8407f64:	e0bffb17 	ldw	r2,-20(fp)
 8407f68:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
 8407f6c:	e037883a 	mov	sp,fp
 8407f70:	df000017 	ldw	fp,0(sp)
 8407f74:	dec00104 	addi	sp,sp,4
 8407f78:	f800283a 	ret

08407f7c <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 8407f7c:	defffb04 	addi	sp,sp,-20
 8407f80:	dfc00415 	stw	ra,16(sp)
 8407f84:	df000315 	stw	fp,12(sp)
 8407f88:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 8407f8c:	d0a01117 	ldw	r2,-32700(gp)
 8407f90:	e0bffe15 	stw	r2,-8(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 8407f94:	d0a60617 	ldw	r2,-26600(gp)
 8407f98:	10800044 	addi	r2,r2,1
 8407f9c:	d0a60615 	stw	r2,-26600(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 8407fa0:	00003106 	br	8408068 <alt_tick+0xec>
  {
    next = (alt_alarm*) alarm->llist.next;
 8407fa4:	e0bffe17 	ldw	r2,-8(fp)
 8407fa8:	10800017 	ldw	r2,0(r2)
 8407fac:	e0bfff15 	stw	r2,-4(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 8407fb0:	e0bffe17 	ldw	r2,-8(fp)
 8407fb4:	10800403 	ldbu	r2,16(r2)
 8407fb8:	10803fcc 	andi	r2,r2,255
 8407fbc:	1005003a 	cmpeq	r2,r2,zero
 8407fc0:	1000051e 	bne	r2,zero,8407fd8 <alt_tick+0x5c>
 8407fc4:	d0a60617 	ldw	r2,-26600(gp)
 8407fc8:	1004c03a 	cmpne	r2,r2,zero
 8407fcc:	1000021e 	bne	r2,zero,8407fd8 <alt_tick+0x5c>
    {
      alarm->rollover = 0;
 8407fd0:	e0bffe17 	ldw	r2,-8(fp)
 8407fd4:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 8407fd8:	e0bffe17 	ldw	r2,-8(fp)
 8407fdc:	10c00217 	ldw	r3,8(r2)
 8407fe0:	d0a60617 	ldw	r2,-26600(gp)
 8407fe4:	10c01e36 	bltu	r2,r3,8408060 <alt_tick+0xe4>
 8407fe8:	e0bffe17 	ldw	r2,-8(fp)
 8407fec:	10800403 	ldbu	r2,16(r2)
 8407ff0:	10803fcc 	andi	r2,r2,255
 8407ff4:	1004c03a 	cmpne	r2,r2,zero
 8407ff8:	1000191e 	bne	r2,zero,8408060 <alt_tick+0xe4>
    {
      next_callback = alarm->callback (alarm->context);
 8407ffc:	e0bffe17 	ldw	r2,-8(fp)
 8408000:	10c00317 	ldw	r3,12(r2)
 8408004:	e0bffe17 	ldw	r2,-8(fp)
 8408008:	11000517 	ldw	r4,20(r2)
 840800c:	183ee83a 	callr	r3
 8408010:	e0bffd15 	stw	r2,-12(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 8408014:	e0bffd17 	ldw	r2,-12(fp)
 8408018:	1004c03a 	cmpne	r2,r2,zero
 840801c:	1000031e 	bne	r2,zero,840802c <alt_tick+0xb0>
      {
        alt_alarm_stop (alarm);
 8408020:	e13ffe17 	ldw	r4,-8(fp)
 8408024:	8407ee40 	call	8407ee4 <alt_alarm_stop>
 8408028:	00000d06 	br	8408060 <alt_tick+0xe4>
      }
      else
      {
        alarm->time += next_callback;
 840802c:	e0bffe17 	ldw	r2,-8(fp)
 8408030:	10c00217 	ldw	r3,8(r2)
 8408034:	e0bffd17 	ldw	r2,-12(fp)
 8408038:	1887883a 	add	r3,r3,r2
 840803c:	e0bffe17 	ldw	r2,-8(fp)
 8408040:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 8408044:	e0bffe17 	ldw	r2,-8(fp)
 8408048:	10c00217 	ldw	r3,8(r2)
 840804c:	d0a60617 	ldw	r2,-26600(gp)
 8408050:	1880032e 	bgeu	r3,r2,8408060 <alt_tick+0xe4>
        {
          alarm->rollover = 1;
 8408054:	e0fffe17 	ldw	r3,-8(fp)
 8408058:	00800044 	movi	r2,1
 840805c:	18800405 	stb	r2,16(r3)
        }
      }
    }
    alarm = next;
 8408060:	e0bfff17 	ldw	r2,-4(fp)
 8408064:	e0bffe15 	stw	r2,-8(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 8408068:	d0e01104 	addi	r3,gp,-32700
 840806c:	e0bffe17 	ldw	r2,-8(fp)
 8408070:	10ffcc1e 	bne	r2,r3,8407fa4 <alt_tick+0x28>
  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
}
 8408074:	e037883a 	mov	sp,fp
 8408078:	dfc00117 	ldw	ra,4(sp)
 840807c:	df000017 	ldw	fp,0(sp)
 8408080:	dec00204 	addi	sp,sp,8
 8408084:	f800283a 	ret

08408088 <altera_nios2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_irq_init(void) 
{
 8408088:	deffff04 	addi	sp,sp,-4
 840808c:	df000015 	stw	fp,0(sp)
 8408090:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 8408094:	000170fa 	wrctl	ienable,zero
}
 8408098:	e037883a 	mov	sp,fp
 840809c:	df000017 	ldw	fp,0(sp)
 84080a0:	dec00104 	addi	sp,sp,4
 84080a4:	f800283a 	ret

084080a8 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 84080a8:	defffa04 	addi	sp,sp,-24
 84080ac:	dfc00515 	stw	ra,20(sp)
 84080b0:	df000415 	stw	fp,16(sp)
 84080b4:	df000404 	addi	fp,sp,16
 84080b8:	e13ffe15 	stw	r4,-8(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 84080bc:	00821074 	movhi	r2,2113
 84080c0:	10a8b204 	addi	r2,r2,-23864
 84080c4:	10800017 	ldw	r2,0(r2)
 84080c8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 84080cc:	00003306 	br	840819c <alt_find_file+0xf4>
  {
    len = strlen(next->name);
 84080d0:	e0bffd17 	ldw	r2,-12(fp)
 84080d4:	11000217 	ldw	r4,8(r2)
 84080d8:	84084700 	call	8408470 <strlen>
 84080dc:	e0bffc15 	stw	r2,-16(fp)
    
    if (next->name[len-1] == '/')
 84080e0:	e0bffd17 	ldw	r2,-12(fp)
 84080e4:	10c00217 	ldw	r3,8(r2)
 84080e8:	e0bffc17 	ldw	r2,-16(fp)
 84080ec:	1885883a 	add	r2,r3,r2
 84080f0:	10bfffc4 	addi	r2,r2,-1
 84080f4:	10800003 	ldbu	r2,0(r2)
 84080f8:	10803fcc 	andi	r2,r2,255
 84080fc:	1080201c 	xori	r2,r2,128
 8408100:	10bfe004 	addi	r2,r2,-128
 8408104:	10800bd8 	cmpnei	r2,r2,47
 8408108:	1000031e 	bne	r2,zero,8408118 <alt_find_file+0x70>
    {
      len -= 1;
 840810c:	e0bffc17 	ldw	r2,-16(fp)
 8408110:	10bfffc4 	addi	r2,r2,-1
 8408114:	e0bffc15 	stw	r2,-16(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 8408118:	e0bffc17 	ldw	r2,-16(fp)
 840811c:	1007883a 	mov	r3,r2
 8408120:	e0bffe17 	ldw	r2,-8(fp)
 8408124:	1885883a 	add	r2,r3,r2
 8408128:	10800003 	ldbu	r2,0(r2)
 840812c:	10803fcc 	andi	r2,r2,255
 8408130:	1080201c 	xori	r2,r2,128
 8408134:	10bfe004 	addi	r2,r2,-128
 8408138:	10800be0 	cmpeqi	r2,r2,47
 840813c:	10000a1e 	bne	r2,zero,8408168 <alt_find_file+0xc0>
 8408140:	e0bffc17 	ldw	r2,-16(fp)
 8408144:	1007883a 	mov	r3,r2
 8408148:	e0bffe17 	ldw	r2,-8(fp)
 840814c:	1885883a 	add	r2,r3,r2
 8408150:	10800003 	ldbu	r2,0(r2)
 8408154:	10803fcc 	andi	r2,r2,255
 8408158:	1080201c 	xori	r2,r2,128
 840815c:	10bfe004 	addi	r2,r2,-128
 8408160:	1004c03a 	cmpne	r2,r2,zero
 8408164:	10000a1e 	bne	r2,zero,8408190 <alt_find_file+0xe8>
 8408168:	e0bffd17 	ldw	r2,-12(fp)
 840816c:	11000217 	ldw	r4,8(r2)
 8408170:	e1bffc17 	ldw	r6,-16(fp)
 8408174:	e17ffe17 	ldw	r5,-8(fp)
 8408178:	840835c0 	call	840835c <memcmp>
 840817c:	1004c03a 	cmpne	r2,r2,zero
 8408180:	1000031e 	bne	r2,zero,8408190 <alt_find_file+0xe8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
 8408184:	e0bffd17 	ldw	r2,-12(fp)
 8408188:	e0bfff15 	stw	r2,-4(fp)
 840818c:	00000806 	br	84081b0 <alt_find_file+0x108>
    }
    next = (alt_dev*) next->llist.next;
 8408190:	e0bffd17 	ldw	r2,-12(fp)
 8408194:	10800017 	ldw	r2,0(r2)
 8408198:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 840819c:	00c21074 	movhi	r3,2113
 84081a0:	18e8b204 	addi	r3,r3,-23864
 84081a4:	e0bffd17 	ldw	r2,-12(fp)
 84081a8:	10ffc91e 	bne	r2,r3,84080d0 <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
 84081ac:	e03fff15 	stw	zero,-4(fp)
 84081b0:	e0bfff17 	ldw	r2,-4(fp)
}
 84081b4:	e037883a 	mov	sp,fp
 84081b8:	dfc00117 	ldw	ra,4(sp)
 84081bc:	df000017 	ldw	fp,0(sp)
 84081c0:	dec00204 	addi	sp,sp,8
 84081c4:	f800283a 	ret

084081c8 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 84081c8:	defffc04 	addi	sp,sp,-16
 84081cc:	df000315 	stw	fp,12(sp)
 84081d0:	df000304 	addi	fp,sp,12
 84081d4:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
 84081d8:	00bffa04 	movi	r2,-24
 84081dc:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 84081e0:	e03ffe15 	stw	zero,-8(fp)
 84081e4:	00001e06 	br	8408260 <alt_get_fd+0x98>
  {
    if (!alt_fd_list[i].dev)
 84081e8:	e0bffe17 	ldw	r2,-8(fp)
 84081ec:	00c21074 	movhi	r3,2113
 84081f0:	18e84804 	addi	r3,r3,-24288
 84081f4:	10800324 	muli	r2,r2,12
 84081f8:	10c5883a 	add	r2,r2,r3
 84081fc:	10800017 	ldw	r2,0(r2)
 8408200:	1004c03a 	cmpne	r2,r2,zero
 8408204:	1000131e 	bne	r2,zero,8408254 <alt_get_fd+0x8c>
    {
      alt_fd_list[i].dev = dev;
 8408208:	e0bffe17 	ldw	r2,-8(fp)
 840820c:	00c21074 	movhi	r3,2113
 8408210:	18e84804 	addi	r3,r3,-24288
 8408214:	10800324 	muli	r2,r2,12
 8408218:	10c7883a 	add	r3,r2,r3
 840821c:	e0bfff17 	ldw	r2,-4(fp)
 8408220:	18800015 	stw	r2,0(r3)
      if (i > alt_max_fd)
 8408224:	00821074 	movhi	r2,2113
 8408228:	10a8b604 	addi	r2,r2,-23848
 840822c:	10c00017 	ldw	r3,0(r2)
 8408230:	e0bffe17 	ldw	r2,-8(fp)
 8408234:	1880040e 	bge	r3,r2,8408248 <alt_get_fd+0x80>
      {
        alt_max_fd = i;
 8408238:	00c21074 	movhi	r3,2113
 840823c:	18e8b604 	addi	r3,r3,-23848
 8408240:	e0bffe17 	ldw	r2,-8(fp)
 8408244:	18800015 	stw	r2,0(r3)
      }
      rc = i;
 8408248:	e0bffe17 	ldw	r2,-8(fp)
 840824c:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
 8408250:	00000606 	br	840826c <alt_get_fd+0xa4>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 8408254:	e0bffe17 	ldw	r2,-8(fp)
 8408258:	10800044 	addi	r2,r2,1
 840825c:	e0bffe15 	stw	r2,-8(fp)
 8408260:	e0bffe17 	ldw	r2,-8(fp)
 8408264:	10800810 	cmplti	r2,r2,32
 8408268:	103fdf1e 	bne	r2,zero,84081e8 <alt_get_fd+0x20>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
 840826c:	e0bffd17 	ldw	r2,-12(fp)
}
 8408270:	e037883a 	mov	sp,fp
 8408274:	df000017 	ldw	fp,0(sp)
 8408278:	dec00104 	addi	sp,sp,4
 840827c:	f800283a 	ret

08408280 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
 8408280:	defffb04 	addi	sp,sp,-20
 8408284:	df000415 	stw	fp,16(sp)
 8408288:	df000404 	addi	fp,sp,16
 840828c:	e13ffe15 	stw	r4,-8(fp)
 8408290:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
 8408294:	e0bfff17 	ldw	r2,-4(fp)
 8408298:	10840070 	cmpltui	r2,r2,4097
 840829c:	1000021e 	bne	r2,zero,84082a8 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
 84082a0:	00840004 	movi	r2,4096
 84082a4:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
 84082a8:	e0fffe17 	ldw	r3,-8(fp)
 84082ac:	e0bfff17 	ldw	r2,-4(fp)
 84082b0:	1885883a 	add	r2,r3,r2
 84082b4:	e0bffc15 	stw	r2,-16(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 84082b8:	e0bffe17 	ldw	r2,-8(fp)
 84082bc:	e0bffd15 	stw	r2,-12(fp)
 84082c0:	00000506 	br	84082d8 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
 84082c4:	e0bffd17 	ldw	r2,-12(fp)
 84082c8:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 84082cc:	e0bffd17 	ldw	r2,-12(fp)
 84082d0:	10800804 	addi	r2,r2,32
 84082d4:	e0bffd15 	stw	r2,-12(fp)
 84082d8:	e0fffd17 	ldw	r3,-12(fp)
 84082dc:	e0bffc17 	ldw	r2,-16(fp)
 84082e0:	18bff836 	bltu	r3,r2,84082c4 <alt_icache_flush+0x44>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
 84082e4:	e0bffe17 	ldw	r2,-8(fp)
 84082e8:	108007cc 	andi	r2,r2,31
 84082ec:	1005003a 	cmpeq	r2,r2,zero
 84082f0:	1000021e 	bne	r2,zero,84082fc <alt_icache_flush+0x7c>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
 84082f4:	e0bffd17 	ldw	r2,-12(fp)
 84082f8:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
 84082fc:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
 8408300:	e037883a 	mov	sp,fp
 8408304:	df000017 	ldw	fp,0(sp)
 8408308:	dec00104 	addi	sp,sp,4
 840830c:	f800283a 	ret

08408310 <atexit>:
 8408310:	200b883a 	mov	r5,r4
 8408314:	000d883a 	mov	r6,zero
 8408318:	0009883a 	mov	r4,zero
 840831c:	000f883a 	mov	r7,zero
 8408320:	84084e41 	jmpi	84084e4 <__register_exitproc>

08408324 <exit>:
 8408324:	defffe04 	addi	sp,sp,-8
 8408328:	000b883a 	mov	r5,zero
 840832c:	dc000015 	stw	r16,0(sp)
 8408330:	dfc00115 	stw	ra,4(sp)
 8408334:	2021883a 	mov	r16,r4
 8408338:	840861c0 	call	840861c <__call_exitprocs>
 840833c:	00821074 	movhi	r2,2113
 8408340:	10a8ad04 	addi	r2,r2,-23884
 8408344:	11000017 	ldw	r4,0(r2)
 8408348:	20800f17 	ldw	r2,60(r4)
 840834c:	10000126 	beq	r2,zero,8408354 <exit+0x30>
 8408350:	103ee83a 	callr	r2
 8408354:	8009883a 	mov	r4,r16
 8408358:	840880c0 	call	840880c <_exit>

0840835c <memcmp>:
 840835c:	00c000c4 	movi	r3,3
 8408360:	1980032e 	bgeu	r3,r6,8408370 <memcmp+0x14>
 8408364:	2144b03a 	or	r2,r4,r5
 8408368:	10c4703a 	and	r2,r2,r3
 840836c:	10000f26 	beq	r2,zero,84083ac <memcmp+0x50>
 8408370:	31ffffc4 	addi	r7,r6,-1
 8408374:	3000061e 	bne	r6,zero,8408390 <memcmp+0x34>
 8408378:	00000a06 	br	84083a4 <memcmp+0x48>
 840837c:	39ffffc4 	addi	r7,r7,-1
 8408380:	00bfffc4 	movi	r2,-1
 8408384:	21000044 	addi	r4,r4,1
 8408388:	29400044 	addi	r5,r5,1
 840838c:	38800526 	beq	r7,r2,84083a4 <memcmp+0x48>
 8408390:	20c00003 	ldbu	r3,0(r4)
 8408394:	28800003 	ldbu	r2,0(r5)
 8408398:	18bff826 	beq	r3,r2,840837c <memcmp+0x20>
 840839c:	1885c83a 	sub	r2,r3,r2
 84083a0:	f800283a 	ret
 84083a4:	0005883a 	mov	r2,zero
 84083a8:	f800283a 	ret
 84083ac:	180f883a 	mov	r7,r3
 84083b0:	20c00017 	ldw	r3,0(r4)
 84083b4:	28800017 	ldw	r2,0(r5)
 84083b8:	18bfed1e 	bne	r3,r2,8408370 <memcmp+0x14>
 84083bc:	31bfff04 	addi	r6,r6,-4
 84083c0:	21000104 	addi	r4,r4,4
 84083c4:	29400104 	addi	r5,r5,4
 84083c8:	39bff936 	bltu	r7,r6,84083b0 <memcmp+0x54>
 84083cc:	003fe806 	br	8408370 <memcmp+0x14>

084083d0 <memcpy>:
 84083d0:	01c003c4 	movi	r7,15
 84083d4:	2007883a 	mov	r3,r4
 84083d8:	3980032e 	bgeu	r7,r6,84083e8 <memcpy+0x18>
 84083dc:	2904b03a 	or	r2,r5,r4
 84083e0:	108000cc 	andi	r2,r2,3
 84083e4:	10000926 	beq	r2,zero,840840c <memcpy+0x3c>
 84083e8:	30000626 	beq	r6,zero,8408404 <memcpy+0x34>
 84083ec:	30cd883a 	add	r6,r6,r3
 84083f0:	28800003 	ldbu	r2,0(r5)
 84083f4:	29400044 	addi	r5,r5,1
 84083f8:	18800005 	stb	r2,0(r3)
 84083fc:	18c00044 	addi	r3,r3,1
 8408400:	30fffb1e 	bne	r6,r3,84083f0 <memcpy+0x20>
 8408404:	2005883a 	mov	r2,r4
 8408408:	f800283a 	ret
 840840c:	3811883a 	mov	r8,r7
 8408410:	200f883a 	mov	r7,r4
 8408414:	28c00017 	ldw	r3,0(r5)
 8408418:	31bffc04 	addi	r6,r6,-16
 840841c:	38c00015 	stw	r3,0(r7)
 8408420:	28800117 	ldw	r2,4(r5)
 8408424:	38800115 	stw	r2,4(r7)
 8408428:	28c00217 	ldw	r3,8(r5)
 840842c:	38c00215 	stw	r3,8(r7)
 8408430:	28800317 	ldw	r2,12(r5)
 8408434:	29400404 	addi	r5,r5,16
 8408438:	38800315 	stw	r2,12(r7)
 840843c:	39c00404 	addi	r7,r7,16
 8408440:	41bff436 	bltu	r8,r6,8408414 <memcpy+0x44>
 8408444:	008000c4 	movi	r2,3
 8408448:	1180072e 	bgeu	r2,r6,8408468 <memcpy+0x98>
 840844c:	1007883a 	mov	r3,r2
 8408450:	28800017 	ldw	r2,0(r5)
 8408454:	31bfff04 	addi	r6,r6,-4
 8408458:	29400104 	addi	r5,r5,4
 840845c:	38800015 	stw	r2,0(r7)
 8408460:	39c00104 	addi	r7,r7,4
 8408464:	19bffa36 	bltu	r3,r6,8408450 <memcpy+0x80>
 8408468:	3807883a 	mov	r3,r7
 840846c:	003fde06 	br	84083e8 <memcpy+0x18>

08408470 <strlen>:
 8408470:	208000cc 	andi	r2,r4,3
 8408474:	2011883a 	mov	r8,r4
 8408478:	1000161e 	bne	r2,zero,84084d4 <strlen+0x64>
 840847c:	20c00017 	ldw	r3,0(r4)
 8408480:	017fbff4 	movhi	r5,65279
 8408484:	297fbfc4 	addi	r5,r5,-257
 8408488:	01e02074 	movhi	r7,32897
 840848c:	39e02004 	addi	r7,r7,-32640
 8408490:	1945883a 	add	r2,r3,r5
 8408494:	11c4703a 	and	r2,r2,r7
 8408498:	00c6303a 	nor	r3,zero,r3
 840849c:	1886703a 	and	r3,r3,r2
 84084a0:	18000c1e 	bne	r3,zero,84084d4 <strlen+0x64>
 84084a4:	280d883a 	mov	r6,r5
 84084a8:	380b883a 	mov	r5,r7
 84084ac:	21000104 	addi	r4,r4,4
 84084b0:	20800017 	ldw	r2,0(r4)
 84084b4:	1187883a 	add	r3,r2,r6
 84084b8:	1946703a 	and	r3,r3,r5
 84084bc:	0084303a 	nor	r2,zero,r2
 84084c0:	10c4703a 	and	r2,r2,r3
 84084c4:	103ff926 	beq	r2,zero,84084ac <strlen+0x3c>
 84084c8:	20800007 	ldb	r2,0(r4)
 84084cc:	10000326 	beq	r2,zero,84084dc <strlen+0x6c>
 84084d0:	21000044 	addi	r4,r4,1
 84084d4:	20800007 	ldb	r2,0(r4)
 84084d8:	103ffd1e 	bne	r2,zero,84084d0 <strlen+0x60>
 84084dc:	2205c83a 	sub	r2,r4,r8
 84084e0:	f800283a 	ret

084084e4 <__register_exitproc>:
 84084e4:	defffa04 	addi	sp,sp,-24
 84084e8:	00821074 	movhi	r2,2113
 84084ec:	10a8ad04 	addi	r2,r2,-23884
 84084f0:	dc000015 	stw	r16,0(sp)
 84084f4:	14000017 	ldw	r16,0(r2)
 84084f8:	dd000415 	stw	r20,16(sp)
 84084fc:	2829883a 	mov	r20,r5
 8408500:	81405217 	ldw	r5,328(r16)
 8408504:	dcc00315 	stw	r19,12(sp)
 8408508:	dc800215 	stw	r18,8(sp)
 840850c:	dc400115 	stw	r17,4(sp)
 8408510:	dfc00515 	stw	ra,20(sp)
 8408514:	2023883a 	mov	r17,r4
 8408518:	3027883a 	mov	r19,r6
 840851c:	3825883a 	mov	r18,r7
 8408520:	28002526 	beq	r5,zero,84085b8 <__register_exitproc+0xd4>
 8408524:	29000117 	ldw	r4,4(r5)
 8408528:	008007c4 	movi	r2,31
 840852c:	11002716 	blt	r2,r4,84085cc <__register_exitproc+0xe8>
 8408530:	8800101e 	bne	r17,zero,8408574 <__register_exitproc+0x90>
 8408534:	2105883a 	add	r2,r4,r4
 8408538:	1085883a 	add	r2,r2,r2
 840853c:	20c00044 	addi	r3,r4,1
 8408540:	1145883a 	add	r2,r2,r5
 8408544:	0009883a 	mov	r4,zero
 8408548:	15000215 	stw	r20,8(r2)
 840854c:	28c00115 	stw	r3,4(r5)
 8408550:	2005883a 	mov	r2,r4
 8408554:	dfc00517 	ldw	ra,20(sp)
 8408558:	dd000417 	ldw	r20,16(sp)
 840855c:	dcc00317 	ldw	r19,12(sp)
 8408560:	dc800217 	ldw	r18,8(sp)
 8408564:	dc400117 	ldw	r17,4(sp)
 8408568:	dc000017 	ldw	r16,0(sp)
 840856c:	dec00604 	addi	sp,sp,24
 8408570:	f800283a 	ret
 8408574:	29802204 	addi	r6,r5,136
 8408578:	00800044 	movi	r2,1
 840857c:	110e983a 	sll	r7,r2,r4
 8408580:	30c04017 	ldw	r3,256(r6)
 8408584:	2105883a 	add	r2,r4,r4
 8408588:	1085883a 	add	r2,r2,r2
 840858c:	1185883a 	add	r2,r2,r6
 8408590:	19c6b03a 	or	r3,r3,r7
 8408594:	14802015 	stw	r18,128(r2)
 8408598:	14c00015 	stw	r19,0(r2)
 840859c:	00800084 	movi	r2,2
 84085a0:	30c04015 	stw	r3,256(r6)
 84085a4:	88bfe31e 	bne	r17,r2,8408534 <__register_exitproc+0x50>
 84085a8:	30804117 	ldw	r2,260(r6)
 84085ac:	11c4b03a 	or	r2,r2,r7
 84085b0:	30804115 	stw	r2,260(r6)
 84085b4:	003fdf06 	br	8408534 <__register_exitproc+0x50>
 84085b8:	00821074 	movhi	r2,2113
 84085bc:	10aef004 	addi	r2,r2,-17472
 84085c0:	100b883a 	mov	r5,r2
 84085c4:	80805215 	stw	r2,328(r16)
 84085c8:	003fd606 	br	8408524 <__register_exitproc+0x40>
 84085cc:	00800034 	movhi	r2,0
 84085d0:	10800004 	addi	r2,r2,0
 84085d4:	1000021e 	bne	r2,zero,84085e0 <__register_exitproc+0xfc>
 84085d8:	013fffc4 	movi	r4,-1
 84085dc:	003fdc06 	br	8408550 <__register_exitproc+0x6c>
 84085e0:	01006404 	movi	r4,400
 84085e4:	103ee83a 	callr	r2
 84085e8:	1007883a 	mov	r3,r2
 84085ec:	103ffa26 	beq	r2,zero,84085d8 <__register_exitproc+0xf4>
 84085f0:	80805217 	ldw	r2,328(r16)
 84085f4:	180b883a 	mov	r5,r3
 84085f8:	18000115 	stw	zero,4(r3)
 84085fc:	18800015 	stw	r2,0(r3)
 8408600:	80c05215 	stw	r3,328(r16)
 8408604:	18006215 	stw	zero,392(r3)
 8408608:	18006315 	stw	zero,396(r3)
 840860c:	0009883a 	mov	r4,zero
 8408610:	883fc826 	beq	r17,zero,8408534 <__register_exitproc+0x50>
 8408614:	003fd706 	br	8408574 <__register_exitproc+0x90>

08408618 <register_fini>:
 8408618:	f800283a 	ret

0840861c <__call_exitprocs>:
 840861c:	00821074 	movhi	r2,2113
 8408620:	10a8ad04 	addi	r2,r2,-23884
 8408624:	10800017 	ldw	r2,0(r2)
 8408628:	defff304 	addi	sp,sp,-52
 840862c:	df000b15 	stw	fp,44(sp)
 8408630:	d8800115 	stw	r2,4(sp)
 8408634:	00800034 	movhi	r2,0
 8408638:	10800004 	addi	r2,r2,0
 840863c:	1005003a 	cmpeq	r2,r2,zero
 8408640:	d8800215 	stw	r2,8(sp)
 8408644:	d8800117 	ldw	r2,4(sp)
 8408648:	dd400815 	stw	r21,32(sp)
 840864c:	dd000715 	stw	r20,28(sp)
 8408650:	10805204 	addi	r2,r2,328
 8408654:	dfc00c15 	stw	ra,48(sp)
 8408658:	ddc00a15 	stw	r23,40(sp)
 840865c:	dd800915 	stw	r22,36(sp)
 8408660:	dcc00615 	stw	r19,24(sp)
 8408664:	dc800515 	stw	r18,20(sp)
 8408668:	dc400415 	stw	r17,16(sp)
 840866c:	dc000315 	stw	r16,12(sp)
 8408670:	282b883a 	mov	r21,r5
 8408674:	2039883a 	mov	fp,r4
 8408678:	d8800015 	stw	r2,0(sp)
 840867c:	2829003a 	cmpeq	r20,r5,zero
 8408680:	d8800117 	ldw	r2,4(sp)
 8408684:	14405217 	ldw	r17,328(r2)
 8408688:	88001026 	beq	r17,zero,84086cc <__call_exitprocs+0xb0>
 840868c:	ddc00017 	ldw	r23,0(sp)
 8408690:	88800117 	ldw	r2,4(r17)
 8408694:	8c802204 	addi	r18,r17,136
 8408698:	143fffc4 	addi	r16,r2,-1
 840869c:	80000916 	blt	r16,zero,84086c4 <__call_exitprocs+0xa8>
 84086a0:	05bfffc4 	movi	r22,-1
 84086a4:	a000151e 	bne	r20,zero,84086fc <__call_exitprocs+0xe0>
 84086a8:	8409883a 	add	r4,r16,r16
 84086ac:	2105883a 	add	r2,r4,r4
 84086b0:	1485883a 	add	r2,r2,r18
 84086b4:	10c02017 	ldw	r3,128(r2)
 84086b8:	a8c01126 	beq	r21,r3,8408700 <__call_exitprocs+0xe4>
 84086bc:	843fffc4 	addi	r16,r16,-1
 84086c0:	85bff81e 	bne	r16,r22,84086a4 <__call_exitprocs+0x88>
 84086c4:	d8800217 	ldw	r2,8(sp)
 84086c8:	10003126 	beq	r2,zero,8408790 <__call_exitprocs+0x174>
 84086cc:	dfc00c17 	ldw	ra,48(sp)
 84086d0:	df000b17 	ldw	fp,44(sp)
 84086d4:	ddc00a17 	ldw	r23,40(sp)
 84086d8:	dd800917 	ldw	r22,36(sp)
 84086dc:	dd400817 	ldw	r21,32(sp)
 84086e0:	dd000717 	ldw	r20,28(sp)
 84086e4:	dcc00617 	ldw	r19,24(sp)
 84086e8:	dc800517 	ldw	r18,20(sp)
 84086ec:	dc400417 	ldw	r17,16(sp)
 84086f0:	dc000317 	ldw	r16,12(sp)
 84086f4:	dec00d04 	addi	sp,sp,52
 84086f8:	f800283a 	ret
 84086fc:	8409883a 	add	r4,r16,r16
 8408700:	88c00117 	ldw	r3,4(r17)
 8408704:	2105883a 	add	r2,r4,r4
 8408708:	1445883a 	add	r2,r2,r17
 840870c:	18ffffc4 	addi	r3,r3,-1
 8408710:	11800217 	ldw	r6,8(r2)
 8408714:	1c001526 	beq	r3,r16,840876c <__call_exitprocs+0x150>
 8408718:	10000215 	stw	zero,8(r2)
 840871c:	303fe726 	beq	r6,zero,84086bc <__call_exitprocs+0xa0>
 8408720:	00c00044 	movi	r3,1
 8408724:	1c06983a 	sll	r3,r3,r16
 8408728:	90804017 	ldw	r2,256(r18)
 840872c:	8cc00117 	ldw	r19,4(r17)
 8408730:	1884703a 	and	r2,r3,r2
 8408734:	10001426 	beq	r2,zero,8408788 <__call_exitprocs+0x16c>
 8408738:	90804117 	ldw	r2,260(r18)
 840873c:	1884703a 	and	r2,r3,r2
 8408740:	10000c1e 	bne	r2,zero,8408774 <__call_exitprocs+0x158>
 8408744:	2105883a 	add	r2,r4,r4
 8408748:	1485883a 	add	r2,r2,r18
 840874c:	11400017 	ldw	r5,0(r2)
 8408750:	e009883a 	mov	r4,fp
 8408754:	303ee83a 	callr	r6
 8408758:	88800117 	ldw	r2,4(r17)
 840875c:	98bfc81e 	bne	r19,r2,8408680 <__call_exitprocs+0x64>
 8408760:	b8800017 	ldw	r2,0(r23)
 8408764:	147fd526 	beq	r2,r17,84086bc <__call_exitprocs+0xa0>
 8408768:	003fc506 	br	8408680 <__call_exitprocs+0x64>
 840876c:	8c000115 	stw	r16,4(r17)
 8408770:	003fea06 	br	840871c <__call_exitprocs+0x100>
 8408774:	2105883a 	add	r2,r4,r4
 8408778:	1485883a 	add	r2,r2,r18
 840877c:	11000017 	ldw	r4,0(r2)
 8408780:	303ee83a 	callr	r6
 8408784:	003ff406 	br	8408758 <__call_exitprocs+0x13c>
 8408788:	303ee83a 	callr	r6
 840878c:	003ff206 	br	8408758 <__call_exitprocs+0x13c>
 8408790:	88800117 	ldw	r2,4(r17)
 8408794:	1000081e 	bne	r2,zero,84087b8 <__call_exitprocs+0x19c>
 8408798:	89000017 	ldw	r4,0(r17)
 840879c:	20000726 	beq	r4,zero,84087bc <__call_exitprocs+0x1a0>
 84087a0:	b9000015 	stw	r4,0(r23)
 84087a4:	8809883a 	mov	r4,r17
 84087a8:	00000000 	call	0 <__alt_mem_onchip_memory2_0-0x3000>
 84087ac:	bc400017 	ldw	r17,0(r23)
 84087b0:	883fb71e 	bne	r17,zero,8408690 <__call_exitprocs+0x74>
 84087b4:	003fc506 	br	84086cc <__call_exitprocs+0xb0>
 84087b8:	89000017 	ldw	r4,0(r17)
 84087bc:	882f883a 	mov	r23,r17
 84087c0:	2023883a 	mov	r17,r4
 84087c4:	883fb21e 	bne	r17,zero,8408690 <__call_exitprocs+0x74>
 84087c8:	003fc006 	br	84086cc <__call_exitprocs+0xb0>

084087cc <alt_sim_halt>:

/*
 * Routine called on exit.
 */
static ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
 84087cc:	defffd04 	addi	sp,sp,-12
 84087d0:	df000215 	stw	fp,8(sp)
 84087d4:	df000204 	addi	fp,sp,8
 84087d8:	e13fff15 	stw	r4,-4(fp)
  int r2 = exit_code;
 84087dc:	e0bfff17 	ldw	r2,-4(fp)
 84087e0:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 84087e4:	e0bffe17 	ldw	r2,-8(fp)
 84087e8:	1005003a 	cmpeq	r2,r2,zero
 84087ec:	1000021e 	bne	r2,zero,84087f8 <alt_sim_halt+0x2c>
    ALT_SIM_FAIL();
 84087f0:	002af070 	cmpltui	zero,zero,43969
 84087f4:	00000106 	br	84087fc <alt_sim_halt+0x30>
  } else {
    ALT_SIM_PASS();
 84087f8:	002af0b0 	cmpltui	zero,zero,43970
  }
#endif /* DEBUG_STUB */
}
 84087fc:	e037883a 	mov	sp,fp
 8408800:	df000017 	ldw	fp,0(sp)
 8408804:	dec00104 	addi	sp,sp,4
 8408808:	f800283a 	ret

0840880c <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 840880c:	defffd04 	addi	sp,sp,-12
 8408810:	dfc00215 	stw	ra,8(sp)
 8408814:	df000115 	stw	fp,4(sp)
 8408818:	df000104 	addi	fp,sp,4
 840881c:	e13fff15 	stw	r4,-4(fp)
  ALT_OS_STOP();

  /* Provide notification to the simulator that we've stopped */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_SIM_HALT().\r\n");
  ALT_SIM_HALT(exit_code);
 8408820:	e13fff17 	ldw	r4,-4(fp)
 8408824:	84087cc0 	call	84087cc <alt_sim_halt>

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 8408828:	003fff06 	br	8408828 <_exit+0x1c>
 840882c:	08408618 	cmpnei	at,at,536
