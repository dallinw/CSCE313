
fractals2.elf:     file format elf32-littlenios2
fractals2.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x088001b4

Program Header:
    LOAD off    0x00001000 vaddr 0x08800000 paddr 0x08800000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x08800020 paddr 0x08800020 align 2**12
         filesz 0x00011db8 memsz 0x00011db8 flags r-x
    LOAD off    0x00012dd8 vaddr 0x08811dd8 paddr 0x08813998 align 2**12
         filesz 0x00001bc0 memsz 0x00001bc0 flags rw-
    LOAD off    0x00015558 vaddr 0x08815558 paddr 0x08815558 align 2**12
         filesz 0x00000000 memsz 0x0000030c flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  08800000  08800000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000194  08800020  08800020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0001167c  088001b4  088001b4  000011b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000005a8  08811830  08811830  00012830  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001bc0  08811dd8  08813998  00012dd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          0000030c  08815558  08815558  00015558  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000023  00000000  00000000  00014998  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00001018  00000000  00000000  000149c0  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 00001b16  00000000  00000000  000159d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00029349  00000000  00000000  000174ee  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00009d6e  00000000  00000000  00040837  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   000195f4  00000000  00000000  0004a5a5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00002004  00000000  00000000  00063b9c  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00002901  00000000  00000000  00065ba0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000e66b  00000000  00000000  000684a1  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000030  00000000  00000000  00076b0c  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000ce0  00000000  00000000  00076b40  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0007b43e  2**0
                  CONTENTS, READONLY
 18 .cpu          00000005  00000000  00000000  0007b441  2**0
                  CONTENTS, READONLY
 19 .simulation_enabled 00000001  00000000  00000000  0007b446  2**0
                  CONTENTS, READONLY
 20 .sysid_hash   00000004  00000000  00000000  0007b447  2**0
                  CONTENTS, READONLY
 21 .sysid_base   00000004  00000000  00000000  0007b44b  2**0
                  CONTENTS, READONLY
 22 .sysid_time   00000004  00000000  00000000  0007b44f  2**0
                  CONTENTS, READONLY
 23 .stderr_dev   0000000b  00000000  00000000  0007b453  2**0
                  CONTENTS, READONLY
 24 .stdin_dev    0000000b  00000000  00000000  0007b45e  2**0
                  CONTENTS, READONLY
 25 .stdout_dev   0000000b  00000000  00000000  0007b469  2**0
                  CONTENTS, READONLY
 26 .sopc_system_name 0000000b  00000000  00000000  0007b474  2**0
                  CONTENTS, READONLY
 27 .quartus_project_dir 00000020  00000000  00000000  0007b47f  2**0
                  CONTENTS, READONLY
 28 .jdi          0001085c  00000000  00000000  0007b49f  2**0
                  CONTENTS, READONLY
 29 .sopcinfo     00113e1c  00000000  00000000  0008bcfb  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
08800000 l    d  .entry	00000000 .entry
08800020 l    d  .exceptions	00000000 .exceptions
088001b4 l    d  .text	00000000 .text
08811830 l    d  .rodata	00000000 .rodata
08811dd8 l    d  .rwdata	00000000 .rwdata
08815558 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
088001fc l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 w_pow.c
00000000 l    df *ABS*	00000000 e_pow.c
08811924 l     O .rodata	00000010 bp
08811934 l     O .rodata	00000010 dp_l
08811944 l     O .rodata	00000010 dp_h
00000000 l    df *ABS*	00000000 e_sqrt.c
00000000 l    df *ABS*	00000000 s_fabs.c
00000000 l    df *ABS*	00000000 s_finite.c
00000000 l    df *ABS*	00000000 s_isnand.c
00000000 l    df *ABS*	00000000 s_lib_ver.c
00000000 l    df *ABS*	00000000 s_matherr.c
00000000 l    df *ABS*	00000000 s_nan.c
00000000 l    df *ABS*	00000000 s_rint.c
08811954 l     O .rodata	00000010 TWO52
00000000 l    df *ABS*	00000000 s_scalbn.c
00000000 l    df *ABS*	00000000 s_copysign.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 fp-bit.c
08802bd0 l     F .text	000001e4 _fpadd_parts
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
0880332c l     F .text	00000410 _fpadd_parts
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
08804298 l     F .text	0000007c udivmodsi4
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 errno.c
00000000 l    df *ABS*	00000000 impure.c
08811dd8 l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
08804ebc l     F .text	00000058 __sprint_r
08811afe l     O .rodata	00000010 blanks.3452
08811aee l     O .rodata	00000010 zeroes.3453
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
08806f20 l     F .text	00000218 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
0880891c l     F .text	00000058 std
08808a28 l     F .text	00000008 __fp_lock
08808a30 l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 locale.c
08813954 l     O .rwdata	00000004 charset
08811b30 l     O .rodata	00000030 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
08811c78 l     O .rodata	0000000c p05.2458
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_isinfd.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 alt_close.c
0880cf7c l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0880cfdc l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0880d0dc l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
0880d1fc l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0880d2dc l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0880d438 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
0880d664 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
08813978 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
0880d900 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
08812794 l     O .rwdata	00001060 jtag_uart_2
088137f4 l     O .rwdata	0000003c mailbox_0
08813830 l     O .rwdata	0000003c mailbox_1
0881386c l     O .rwdata	0000003c mailbox_2
088138a8 l     O .rwdata	0000003c mailbox_3
088138e4 l     O .rwdata	00000054 video_pixel_buffer_dma_0
0880dc0c l     F .text	00000038 alt_dev_reg
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0880de4c l     F .text	00000228 altera_avalon_jtag_uart_irq
0880e074 l     F .text	000000b0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_mailbox.c
0880e848 l     F .text	0000006c alt_avalon_mutex_reg
0880e8b4 l     F .text	00000060 alt_get_errno
0880ea48 l     F .text	00000050 alt_mailbox_increment_ptr
00000000 l    df *ABS*	00000000 altera_avalon_mutex.c
0880ec18 l     F .text	0000007c alt_mutex_trylock
0880ecec l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 altera_up_avalon_video_pixel_buffer_dma.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
088106d4 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
08810b8c l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
08810cc8 l     F .text	000000dc alt_file_locked
08810f2c l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_irq.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
088115ac l     F .text	00000004 register_fini
00000000 l    df *ABS*	00000000 alt_exit.c
08811760 l     F .text	00000040 alt_sim_halt
0880a6d8 g     F .text	00000094 _mprec_log10
00007000 g       *ABS*	00000000 __alt_mem_onchip_memory2_3
0880a7c4 g     F .text	00000088 __any_on
0880bea0 g     F .text	00000070 _isatty_r
08811c50 g     O .rodata	00000028 __mprec_tinytens
0880d498 g     F .text	0000006c alt_main
0880ea98 g     F .text	000000a8 altera_avalon_mailbox_pend
0880fb88 g     F .text	000003d0 alt_up_pixel_buffer_dma_draw_vline
08804d94 g     F .text	000000a0 _puts_r
088155d4 g     O .bss	00000100 alt_irq
088026d0 g     F .text	00000018 fabs
0880bf10 g     F .text	00000078 _lseek_r
0881555c g     O .bss	00000004 mailbox_0
08813998 g       *ABS*	00000000 __flash_rwdata_start
08803e4c g     F .text	00000088 __eqdf2
08815864 g       *ABS*	00000000 __alt_heap_start
08815560 g     O .bss	00000004 mailbox_2
0880eb40 g     F .text	000000d8 altera_avalon_mailbox_get
08804d1c g     F .text	00000044 printf
0880b96c g     F .text	00000068 __sseek
08808984 g     F .text	000000a4 __sinit
0880965c g     F .text	00000084 _setlocale_r
08808a84 g     F .text	00000068 __sfmoreglue
0880d524 g     F .text	00000020 __malloc_unlock
08802e88 g     F .text	00000174 __divsf3
0880a154 g     F .text	000000e0 memmove
08808a74 g     F .text	00000010 _cleanup
0880edac g     F .text	00000040 altera_avalon_mutex_trylock
0880a84c g     F .text	000000bc _Balloc
08803184 g     F .text	00000094 __fixsfsi
08813940 g     O .rwdata	00000004 n
0880ef5c g     F .text	000001a0 alt_up_pixel_buffer_dma_draw
08803f5c g     F .text	00000088 __gtdf2
08804d0c g     F .text	00000010 __errno
0880ef1c g     F .text	00000040 alt_up_pixel_buffer_dma_open_dev
08800000 g     F .entry	0000001c __reset
0880ee48 g     F .text	0000007c altera_avalon_mutex_is_mine
08800020 g       *ABS*	00000000 __flash_exceptions_start
0880be2c g     F .text	00000074 _fstat_r
08815590 g     O .bss	00000004 errno
088041ec g     F .text	00000038 __make_dp
088047cc g     F .text	0000002c __make_fp
08815598 g     O .bss	00000004 alt_argv
0881b938 g       *ABS*	00000000 _gp
08802db4 g     F .text	00000070 __subsf3
0880f0fc g     F .text	00000058 alt_up_pixel_buffer_dma_change_back_buffer_address
00005000 g       *ABS*	00000000 __alt_mem_onchip_memory2_2
08812614 g     O .rwdata	00000180 alt_fd_list
08815564 g     O .bss	00000004 mailbox_1
088107fc g     F .text	00000094 alt_find_dev
0880a0b4 g     F .text	000000a0 memcpy
08808a68 g     F .text	0000000c _cleanup_r
088040f4 g     F .text	000000f8 __floatsidf
08810c50 g     F .text	00000078 alt_io_redirect
08803fe4 g     F .text	00000088 __ltdf2
08811830 g       *ABS*	00000000 __DTOR_END__
08804e34 g     F .text	00000014 puts
08811130 g     F .text	00000020 altera_nios2_irq_init
0880a628 g     F .text	000000b0 __ratio
0880e98c g     F .text	000000bc altera_avalon_mailbox_post
0880f1ac g     F .text	00000034 alt_up_pixel_buffer_dma_check_swap_buffers_status
0880e28c g     F .text	00000224 altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
08804d60 g     F .text	00000034 _printf_r
00003000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
088043d4 g     F .text	00000008 __udivsi3
0880d13c g     F .text	000000c0 isatty
08811b60 g     O .rodata	000000c8 __mprec_tens
0880e96c g     F .text	00000020 altera_avalon_mailbox_close
0880f838 g     F .text	00000350 alt_up_pixel_buffer_dma_draw_hline
08809638 g     F .text	00000008 __locale_charset
08803074 g     F .text	00000078 __lesf2
08811328 g     F .text	00000090 alt_icache_flush
08815584 g     O .bss	00000004 __malloc_top_pad
08813950 g     O .rwdata	00000004 __mb_cur_max
08809640 g     F .text	0000000c _localeconv_r
0880af44 g     F .text	0000003c __i2b
0880901c g     F .text	0000049c __sfvwrite_r
0880b8f4 g     F .text	00000070 _sbrk_r
0881001c g     F .text	000000d0 helper_plot_pixel
0880bf88 g     F .text	00000078 _read_r
088121d8 g     O .rwdata	0000000c __lc_ctype
08813970 g     O .rwdata	00000004 alt_max_fd
08804b0c g     F .text	00000138 __unpack_d
0880bd08 g     F .text	00000110 _fclose_r
088088e8 g     F .text	00000034 fflush
08815588 g     O .bss	00000004 __malloc_max_sbrked_mem
08803218 g     F .text	00000054 __extendsfdf2
088037bc g     F .text	00000074 __adddf3
0880a508 g     F .text	00000120 __b2d
0880f1e0 g     F .text	00000164 alt_up_pixel_buffer_dma_clear_screen
0880c5dc g     F .text	000005b0 __umoddi3
0880d348 g     F .text	000000f0 lseek
0880eec4 g     F .text	00000058 altera_avalon_mutex_first_lock
08813944 g     O .rwdata	00000004 __fdlib_version
0881394c g     O .rwdata	00000004 _global_impure_ptr
0880b2c0 g     F .text	000005f4 _realloc_r
08815864 g       *ABS*	00000000 __bss_end
08810a94 g     F .text	000000f8 alt_iic_isr_register
0880f344 g     F .text	000004f4 alt_up_pixel_buffer_dma_draw_box
08811024 g     F .text	0000010c alt_tick
0880c000 g     F .text	000005dc __udivdi3
08811c28 g     O .rodata	00000028 __mprec_bigtens
0880b1a0 g     F .text	00000120 __s2b
0880ccec g     F .text	00000194 __floatunsidf
0880a428 g     F .text	00000060 __mcmp
08815558 g     O .bss	00000004 message
08808a50 g     F .text	00000018 __fp_lock_all
08810a4c g     F .text	00000048 alt_ic_irq_enabled
08810f8c g     F .text	00000098 alt_alarm_stop
088155a0 g     O .bss	00000004 alt_irq_active
088000ec g     F .exceptions	000000c8 alt_irq_handler
088125ec g     O .rwdata	00000028 alt_dev_null
08800a50 g     F .text	00000114 barrier
0880ec94 g     F .text	00000058 altera_avalon_mutex_open
0880274c g     F .text	00000210 rint
0880465c g     F .text	000000c8 __unpack_f
088105dc g     F .text	00000044 alt_dcache_flush_all
0880a2f4 g     F .text	00000070 __hi0bits
0880ff58 g     F .text	000000c4 alt_up_pixel_buffer_dma_draw_rectangle
0880cc14 g     F .text	000000d8 __fixdfsi
08813998 g       *ABS*	00000000 __ram_rwdata_end
08813968 g     O .rwdata	00000008 alt_dev_list
0880d7e0 g     F .text	00000120 write
088100ec g     F .text	0000039c alt_up_pixel_buffer_dma_draw_line
08813984 g     O .rwdata	00000008 alt_mutex_list
08811dd8 g       *ABS*	00000000 __ram_rodata_end
0880d008 g     F .text	000000d4 fstat
0880406c g     F .text	00000088 __ledf2
0880b080 g     F .text	00000120 __pow5mult
08815578 g     O .bss	00000004 __nlocale_changed
088043dc g     F .text	00000008 __umodsi3
08815864 g       *ABS*	00000000 end
088044fc g     F .text	00000160 __pack_f
0880dd8c g     F .text	000000c0 altera_avalon_jtag_uart_init
0881182c g       *ABS*	00000000 __CTOR_LIST__
10000000 g       *ABS*	00000000 __alt_stack_pointer
0880447c g     F .text	00000080 __clzsi2
0880e4b0 g     F .text	00000240 altera_avalon_jtag_uart_write
0880e6f0 g     F .text	00000158 alt_avalon_mailbox_init
08808974 g     F .text	00000004 __sfp_lock_acquire
08809fd0 g     F .text	000000e4 memchr
08804f14 g     F .text	00001eac ___vfprintf_internal_r
08808d08 g     F .text	00000314 _free_r
088115b0 g     F .text	000001b0 __call_exitprocs
0881557c g     O .bss	00000004 __mlocale_changed
0881395c g     O .rwdata	00000004 __malloc_sbrk_base
088001b4 g     F .text	0000004c _start
088155a4 g     O .bss	00000004 _alt_tick_rate
0880ac10 g     F .text	0000014c __lshift
088155a8 g     O .bss	00000004 _alt_nticks
0880d544 g     F .text	00000120 read
0880d994 g     F .text	00000278 alt_sys_init
088030ec g     F .text	00000098 __floatsisf
08811478 g     F .text	00000134 __register_exitproc
0880edec g     F .text	0000005c altera_avalon_mutex_unlock
0880ad5c g     F .text	000001e8 __multiply
08801108 g     F .text	00001300 __ieee754_pow
0880e124 g     F .text	00000074 altera_avalon_jtag_uart_close
08800c80 g     F .text	00000488 pow
08811dd8 g       *ABS*	00000000 __ram_rwdata_start
08811830 g       *ABS*	00000000 __ram_rodata_start
088155ac g     O .bss	00000028 __malloc_current_mallinfo
00004000 g       *ABS*	00000000 __alt_mem_onchip_memory2_1
0880a908 g     F .text	0000017c __d2b
0880dc44 g     F .text	00000058 altera_avalon_jtag_uart_read_fd
08811270 g     F .text	000000b8 alt_get_fd
08804c44 g     F .text	000000c8 __fpcmp_parts_d
0880bc98 g     F .text	00000070 _close_r
08811404 g     F .text	00000074 memcmp
0880dcf4 g     F .text	00000048 altera_avalon_jtag_uart_close_fd
08815568 g     O .bss	00000004 col
08815864 g       *ABS*	00000000 __alt_stack_base
0880dd3c g     F .text	00000050 altera_avalon_jtag_uart_ioctl_fd
08806de4 g     F .text	0000013c __swsetup_r
08803bf4 g     F .text	00000258 __divdf3
08808aec g     F .text	000000f0 __sfp
0880a76c g     F .text	00000058 __copybits
088121e4 g     O .rwdata	00000408 __malloc_av_
08808980 g     F .text	00000004 __sinit_lock_release
08803830 g     F .text	000003c4 __muldf3
0880ba50 g     F .text	00000060 __sread
08811964 g     O .rodata	00000010 __thenan_sf
08811150 g     F .text	00000120 alt_find_file
08810620 g     F .text	000000b4 alt_dev_llist_insert
0880d504 g     F .text	00000020 __malloc_lock
0880d724 g     F .text	000000bc sbrk
088086ec g     F .text	000001fc _fflush_r
0880bbe4 g     F .text	000000b4 _calloc_r
08815558 g       *ABS*	00000000 __bss_start
0880a234 g     F .text	00000098 memset
08800200 g     F .text	00000850 main
0881559c g     O .bss	00000004 alt_envp
0881558c g     O .bss	00000004 __malloc_max_total_mem
0880f154 g     F .text	00000058 alt_up_pixel_buffer_dma_swap_buffers
0880dc9c g     F .text	00000058 altera_avalon_jtag_uart_write_fd
0880b964 g     F .text	00000008 __sclose
08802734 g     F .text	00000008 matherr
10000000 g       *ABS*	00000000 __alt_heap_limit
0880be18 g     F .text	00000014 fclose
08804224 g     F .text	00000074 __truncdfsf2
088156d4 g     O .bss	00000190 _atexit0
0880ed6c g     F .text	00000040 altera_avalon_mutex_lock
08807138 g     F .text	000015b4 _dtoa_r
08809890 g     F .text	00000740 _malloc_r
08813974 g     O .rwdata	00000004 alt_errno
08809580 g     F .text	000000b8 _fwalk
08804314 g     F .text	00000060 __divsi3
08811974 g     O .rodata	00000014 __thenan_df
08808bdc g     F .text	0000012c _malloc_trim_r
08811830 g       *ABS*	00000000 __CTOR_END__
088026e8 g     F .text	0000001c finite
0880bab0 g     F .text	000000bc strcmp
08811830 g       *ABS*	00000000 __flash_rodata_start
08811830 g       *ABS*	00000000 __DTOR_LIST__
08802b3c g     F .text	00000024 copysign
08803ed4 g     F .text	00000088 __nedf2
11000000 g       *ABS*	00000000 __alt_mem_sram_0
0880d960 g     F .text	00000034 alt_irq_init
0880d6c4 g     F .text	00000060 alt_release_fd
08811988 g     O .rodata	00000100 __clz_tab
08815580 g     O .bss	00000004 _PathLocale
088113b8 g     F .text	00000014 atexit
0881556c g     O .bss	00000004 my_pixel_buffer
08802ffc g     F .text	00000078 __gesf2
0880bb6c g     F .text	00000078 _write_r
08815570 g     O .bss	00000004 mailbox_3
088096e0 g     F .text	0000001c setlocale
08813948 g     O .rwdata	00000004 _impure_ptr
08815594 g     O .bss	00000004 alt_argc
0880295c g     F .text	000001e0 scalbn
08810798 g     F .text	00000064 _do_dtors
08000000 g       *ABS*	00000000 __alt_mem_sdram_0
08800020 g       .exceptions	00000000 alt_irq_entry
0880a488 g     F .text	00000080 __ulp
0880b8b4 g     F .text	00000040 __isinfd
08808a38 g     F .text	00000018 __fp_unlock_all
0881397c g     O .rwdata	00000008 alt_mailbox_list
08813938 g     O .rwdata	00000004 num_rows
08813960 g     O .rwdata	00000008 alt_fs_list
0880273c g     F .text	00000010 nan
08800020 g       *ABS*	00000000 __ram_exceptions_start
0880964c g     F .text	00000010 localeconv
08802408 g     F .text	000002c8 __ieee754_sqrt
088108c0 g     F .text	00000050 alt_ic_isr_register
08813998 g       *ABS*	00000000 _edata
08815864 g       *ABS*	00000000 _end
08800b94 g     F .text	000000ec post
088001b4 g       *ABS*	00000000 __ram_exceptions_end
0880e198 g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
088109ac g     F .text	000000a0 alt_ic_irq_disable
0880b9d4 g     F .text	0000007c __swrite
08813958 g     O .rwdata	00000004 __malloc_trim_threshold
088113cc g     F .text	00000038 exit
088094b8 g     F .text	000000c8 _fwalk_reent
0880326c g     F .text	000000c0 __floatunsisf
0880aa84 g     F .text	0000018c __mdiff
08804374 g     F .text	00000060 __modsi3
10000000 g       *ABS*	00000000 __alt_data_end
08800020 g     F .exceptions	00000000 alt_exception
08808978 g     F .text	00000004 __sfp_lock_release
08802b60 g     F .text	00000070 __fixunssfsi
0880e914 g     F .text	00000058 altera_avalon_mailbox_open
08804724 g     F .text	000000a8 __fpcmp_parts_f
088117a0 g     F .text	00000020 _exit
08802704 g     F .text	00000030 __isnand
08810488 g     F .text	00000154 alt_alarm_start
088043e4 g     F .text	00000098 __muldi3
088096fc g     F .text	00000194 __smakebuf_r
08804e48 g     F .text	00000074 strlen
08810da4 g     F .text	00000188 open
0880cb8c g     F .text	00000088 __gedf2
08810890 g     F .text	00000030 alt_icache_flush_all
08800b64 g     F .text	00000030 pend
0881398c g     O .rwdata	00000004 alt_priority_mask
0881393c g     O .rwdata	00000004 num_cols
08810910 g     F .text	0000009c alt_ic_irq_enable
08806dc0 g     F .text	00000024 __vfprintf_internal
0880ed4c g     F .text	00000020 altera_avalon_mutex_close
0880373c g     F .text	00000080 __subdf3
0880a364 g     F .text	000000c4 __lo0bits
08813990 g     O .rwdata	00000008 alt_alarm_list
08810734 g     F .text	00000064 _do_ctors
0880ce80 g     F .text	000000fc close
08802e24 g     F .text	00000064 __addsf3
0880d25c g     F .text	00000080 alt_load
08815574 g     O .bss	00000004 row
088047f8 g     F .text	00000314 __pack_d
00000000  w      *UND*	00000000 free
0880897c g     F .text	00000004 __sinit_lock_acquire
0880af80 g     F .text	00000100 __multadd
0880a2cc g     F .text	00000028 _Bfree



Disassembly of section .entry:

08800000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && !defined(ALT_SIM_OPTIMIZE)
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
 8800000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
 8800004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
 8800008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
 880000c:	00bffd16 	blt	zero,r2,8800004 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 8800010:	00422034 	movhi	at,2176
    ori r1, r1, %lo(_start)
 8800014:	08406d14 	ori	at,at,436
    jmp r1
 8800018:	0800683a 	jmp	at
 880001c:	00000000 	call	0 <__alt_mem_onchip_memory2_0-0x3000>

Disassembly of section .exceptions:

08800020 <alt_exception>:
         * Process an exception.  For all exceptions we must preserve all
         * caller saved registers on the stack (See the Nios2 ABI
         * documentation for details).
         */

        addi  sp, sp, -76
 8800020:	deffed04 	addi	sp,sp,-76

#endif

#endif

        stw   ra,  0(sp)
 8800024:	dfc00015 	stw	ra,0(sp)
        /*
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */

        stw   r1,   8(sp)
 8800028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 880002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 8800030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 8800034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 8800038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 880003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 8800040:	d9c00815 	stw	r7,32(sp)

        rdctl r5, estatus
 8800044:	000b307a 	rdctl	r5,estatus

        stw   r8,  36(sp)
 8800048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 880004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 8800050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 8800054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 8800058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 880005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 8800060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 8800064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 8800068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 880006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 8800070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 8800074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 8800078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 880007c:	10000326 	beq	r2,zero,880008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 8800080:	20000226 	beq	r4,zero,880008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 8800084:	88000ec0 	call	88000ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 8800088:	00000306 	br	8800098 <alt_exception+0x78>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
 880008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
 8800090:	e8bfff17 	ldw	r2,-4(ea)
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
 8800094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 8800098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 880009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 88000a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 88000a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 88000a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 88000ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 88000b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 88000b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 88000b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 88000bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 88000c0:	d9c00817 	ldw	r7,32(sp)
#ifdef ALT_STACK_CHECK
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif
#endif

        ldw   r8,  36(sp)
 88000c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 88000c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 88000cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 88000d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 88000d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 88000d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 88000dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 88000e0:	dbc01017 	ldw	r15,64(sp)
#endif

        ldw   sp,  76(sp)

#else
        addi  sp, sp, 76
 88000e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 88000e8:	ef80083a 	eret

088000ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 88000ec:	defff904 	addi	sp,sp,-28
 88000f0:	dfc00615 	stw	ra,24(sp)
 88000f4:	df000515 	stw	fp,20(sp)
 88000f8:	df000504 	addi	fp,sp,20
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 88000fc:	0005313a 	rdctl	r2,ipending
 8800100:	e0bffc15 	stw	r2,-16(fp)

  return active;
 8800104:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 8800108:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
 880010c:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 8800110:	00800044 	movi	r2,1
 8800114:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 8800118:	e0ffff17 	ldw	r3,-4(fp)
 880011c:	e0bffe17 	ldw	r2,-8(fp)
 8800120:	1884703a 	and	r2,r3,r2
 8800124:	1005003a 	cmpeq	r2,r2,zero
 8800128:	1000161e 	bne	r2,zero,8800184 <alt_irq_handler+0x98>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 880012c:	e0bffd17 	ldw	r2,-12(fp)
 8800130:	00c22074 	movhi	r3,2177
 8800134:	18d57504 	addi	r3,r3,21972
 8800138:	100490fa 	slli	r2,r2,3
 880013c:	10c5883a 	add	r2,r2,r3
 8800140:	11400017 	ldw	r5,0(r2)
 8800144:	e0bffd17 	ldw	r2,-12(fp)
 8800148:	00c22074 	movhi	r3,2177
 880014c:	18d57504 	addi	r3,r3,21972
 8800150:	100490fa 	slli	r2,r2,3
 8800154:	10c5883a 	add	r2,r2,r3
 8800158:	10800104 	addi	r2,r2,4
 880015c:	11000017 	ldw	r4,0(r2)
 8800160:	283ee83a 	callr	r5
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 8800164:	0005313a 	rdctl	r2,ipending
 8800168:	e0bffb15 	stw	r2,-20(fp)

  return active;
 880016c:	e0bffb17 	ldw	r2,-20(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
 8800170:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
 8800174:	e0bfff17 	ldw	r2,-4(fp)
 8800178:	1004c03a 	cmpne	r2,r2,zero
 880017c:	103fe31e 	bne	r2,zero,880010c <alt_irq_handler+0x20>
 8800180:	00000706 	br	88001a0 <alt_irq_handler+0xb4>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
 8800184:	e0bffe17 	ldw	r2,-8(fp)
 8800188:	1085883a 	add	r2,r2,r2
 880018c:	e0bffe15 	stw	r2,-8(fp)
      i++;
 8800190:	e0bffd17 	ldw	r2,-12(fp)
 8800194:	10800044 	addi	r2,r2,1
 8800198:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 880019c:	003fde06 	br	8800118 <alt_irq_handler+0x2c>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
 88001a0:	e037883a 	mov	sp,fp
 88001a4:	dfc00117 	ldw	ra,4(sp)
 88001a8:	df000017 	ldw	fp,0(sp)
 88001ac:	dec00204 	addi	sp,sp,8
 88001b0:	f800283a 	ret

Disassembly of section .text:

088001b4 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
 88001b4:	00810014 	movui	r2,1024
#endif

0:
    initd 0(r2)
 88001b8:	10000033 	initd	0(r2)
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
 88001bc:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
 88001c0:	00bffd16 	blt	zero,r2,88001b8 <_start+0x4>
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 88001c4:	06c40034 	movhi	sp,4096
    ori sp, sp, %lo(__alt_stack_pointer)
 88001c8:	dec00014 	ori	sp,sp,0

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
 88001cc:	06822074 	movhi	gp,2177
    ori gp, gp, %lo(_gp)
 88001d0:	d6ae4e14 	ori	gp,gp,47416
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 88001d4:	00822074 	movhi	r2,2177
    ori r2, r2, %lo(__bss_start)
 88001d8:	10955614 	ori	r2,r2,21848

    movhi r3, %hi(__bss_end)
 88001dc:	00c22074 	movhi	r3,2177
    ori r3, r3, %lo(__bss_end)
 88001e0:	18d61914 	ori	r3,r3,22628

    beq r2, r3, 1f
 88001e4:	10c00326 	beq	r2,r3,88001f4 <_start+0x40>

0:
    stw zero, (r2)
 88001e8:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 88001ec:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 88001f0:	10fffd36 	bltu	r2,r3,88001e8 <_start+0x34>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 88001f4:	880d25c0 	call	880d25c <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 88001f8:	880d4980 	call	880d498 <alt_main>

088001fc <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 88001fc:	003fff06 	br	88001fc <alt_after_alt_main>

08800200 <main>:
void barrier(int id);
void pend(alt_mailbox_dev* box);
void post(int id, alt_u32 mess);


int main() {
 8800200:	deffe704 	addi	sp,sp,-100
 8800204:	dfc01815 	stw	ra,96(sp)
 8800208:	df001715 	stw	fp,92(sp)
 880020c:	dc401615 	stw	r17,88(sp)
 8800210:	dc001515 	stw	r16,84(sp)
 8800214:	df001504 	addi	fp,sp,84

	mailbox_0 = altera_avalon_mailbox_open("/dev/mailbox_0");
 8800218:	01022074 	movhi	r4,2177
 880021c:	21060c04 	addi	r4,r4,6192
 8800220:	880e9140 	call	880e914 <altera_avalon_mailbox_open>
 8800224:	d0a70915 	stw	r2,-25564(gp)
	mailbox_1 = altera_avalon_mailbox_open("/dev/mailbox_1");
 8800228:	01022074 	movhi	r4,2177
 880022c:	21061004 	addi	r4,r4,6208
 8800230:	880e9140 	call	880e914 <altera_avalon_mailbox_open>
 8800234:	d0a70b15 	stw	r2,-25556(gp)
	mailbox_2 = altera_avalon_mailbox_open("/dev/mailbox_2");
 8800238:	01022074 	movhi	r4,2177
 880023c:	21061404 	addi	r4,r4,6224
 8800240:	880e9140 	call	880e914 <altera_avalon_mailbox_open>
 8800244:	d0a70a15 	stw	r2,-25560(gp)
	mailbox_3 = altera_avalon_mailbox_open("/dev/mailbox_3");
 8800248:	01022074 	movhi	r4,2177
 880024c:	21061804 	addi	r4,r4,6240
 8800250:	880e9140 	call	880e914 <altera_avalon_mailbox_open>
 8800254:	d0a70e15 	stw	r2,-25544(gp)

	int cpuid = __builtin_rdctl(5);
 8800258:	0005317a 	rdctl	r2,cpuid
 880025c:	e0bffe15 	stw	r2,-8(fp)

	barrier(cpuid);
 8800260:	e13ffe17 	ldw	r4,-8(fp)
 8800264:	8800a500 	call	8800a50 <barrier>
	alt_up_pixel_buffer_dma_dev *my_pixel_buffer; //declare global var
	my_pixel_buffer=alt_up_pixel_buffer_dma_open_dev("/dev/video_pixel_buffer_dma_0"); //assign it
 8800268:	01022074 	movhi	r4,2177
 880026c:	21061c04 	addi	r4,r4,6256
 8800270:	880ef1c0 	call	880ef1c <alt_up_pixel_buffer_dma_open_dev>
 8800274:	e0bffd15 	stw	r2,-12(fp)
	alt_up_pixel_buffer_dma_clear_screen(my_pixel_buffer,0);//clear_screen();
 8800278:	e13ffd17 	ldw	r4,-12(fp)
 880027c:	000b883a 	mov	r5,zero
 8800280:	880f1e00 	call	880f1e0 <alt_up_pixel_buffer_dma_clear_screen>

	int zoom = 1;
 8800284:	00800044 	movi	r2,1
 8800288:	e0bffc15 	stw	r2,-16(fp)
	float min_x, max_x, min_y, max_y;
	min_x = -2.5;
 880028c:	00b00834 	movhi	r2,49184
 8800290:	e0bffb15 	stw	r2,-20(fp)
	max_x = 1.0;
 8800294:	008fe034 	movhi	r2,16256
 8800298:	e0bffa15 	stw	r2,-24(fp)
	min_y = -1.0;
 880029c:	00afe034 	movhi	r2,49024
 88002a0:	e0bff915 	stw	r2,-28(fp)
	max_y = 1.0;
 88002a4:	008fe034 	movhi	r2,16256
 88002a8:	e0bff815 	stw	r2,-32(fp)
	float x, y, z;
	float x0, y0;
	float target_x, target_y, xtemp;
	int iteration;
	int is_target; //false
	int first_pass = 0; // on the first pass
 88002ac:	e03feb15 	stw	zero,-84(fp)

	//barrier(cpuid);
	while (1) {
		is_target = 0;
 88002b0:	e03fec15 	stw	zero,-80(fp)
		for (i = cpuid; i < num_rows; i+=4) {
 88002b4:	e0bffe17 	ldw	r2,-8(fp)
 88002b8:	e0bff715 	stw	r2,-36(fp)
 88002bc:	00014206 	br	88007c8 <main+0x5c8>
			for (j = 0; j < num_cols; j++) {
 88002c0:	e03ff615 	stw	zero,-40(fp)
 88002c4:	00013806 	br	88007a8 <main+0x5a8>
				x = 0;
 88002c8:	e03ff515 	stw	zero,-44(fp)
				y = 0;
 88002cc:	e03ff415 	stw	zero,-48(fp)
				z = 0;
 88002d0:	e03ff315 	stw	zero,-52(fp)
				x0 = j/320.0*(max_x - min_x) + min_x;
 88002d4:	e13ff617 	ldw	r4,-40(fp)
 88002d8:	88030ec0 	call	88030ec <__floatsisf>
 88002dc:	1009883a 	mov	r4,r2
 88002e0:	0150e834 	movhi	r5,17312
 88002e4:	8802e880 	call	8802e88 <__divsf3>
 88002e8:	1009883a 	mov	r4,r2
 88002ec:	e0fffa17 	ldw	r3,-24(fp)
 88002f0:	e0bffb17 	ldw	r2,-20(fp)
 88002f4:	1885ffb2 	custom	254,r2,r3,r2
 88002f8:	2087ff32 	custom	252,r3,r4,r2
 88002fc:	e0bffb17 	ldw	r2,-20(fp)
 8800300:	1885ff72 	custom	253,r2,r3,r2
 8800304:	e0bff215 	stw	r2,-56(fp)
				y0 = (239.0-i)/240.0*(max_y - min_y) + min_y;
 8800308:	e13ff717 	ldw	r4,-36(fp)
 880030c:	88030ec0 	call	88030ec <__floatsisf>
 8800310:	1007883a 	mov	r3,r2
 8800314:	0090dbf4 	movhi	r2,17263
 8800318:	10c5ffb2 	custom	254,r2,r2,r3
 880031c:	1009883a 	mov	r4,r2
 8800320:	0150dc34 	movhi	r5,17264
 8800324:	8802e880 	call	8802e88 <__divsf3>
 8800328:	1009883a 	mov	r4,r2
 880032c:	e0fff817 	ldw	r3,-32(fp)
 8800330:	e0bff917 	ldw	r2,-28(fp)
 8800334:	1885ffb2 	custom	254,r2,r3,r2
 8800338:	2087ff32 	custom	252,r3,r4,r2
 880033c:	e0bff917 	ldw	r2,-28(fp)
 8800340:	1885ff72 	custom	253,r2,r3,r2
 8800344:	e0bff115 	stw	r2,-60(fp)
				iteration = 0;
 8800348:	e03fed15 	stw	zero,-76(fp)

				while( (x*x + y*y) <= 4 && iteration < 500) {
 880034c:	0000db06 	br	88006bc <main+0x4bc>
					xtemp = x*x - y*y + x0;
 8800350:	e0fff517 	ldw	r3,-44(fp)
 8800354:	e0bff517 	ldw	r2,-44(fp)
 8800358:	1889ff32 	custom	252,r4,r3,r2
 880035c:	e0fff417 	ldw	r3,-48(fp)
 8800360:	e0bff417 	ldw	r2,-48(fp)
 8800364:	1885ff32 	custom	252,r2,r3,r2
 8800368:	2087ffb2 	custom	254,r3,r4,r2
 880036c:	e0bff217 	ldw	r2,-56(fp)
 8800370:	1885ff72 	custom	253,r2,r3,r2
 8800374:	e0bfee15 	stw	r2,-72(fp)
					y = 2*x*y + y0;
 8800378:	e0bff517 	ldw	r2,-44(fp)
 880037c:	1087ff72 	custom	253,r3,r2,r2
 8800380:	e0bff417 	ldw	r2,-48(fp)
 8800384:	1887ff32 	custom	252,r3,r3,r2
 8800388:	e0bff117 	ldw	r2,-60(fp)
 880038c:	1885ff72 	custom	253,r2,r3,r2
 8800390:	e0bff415 	stw	r2,-48(fp)
					x = xtemp;
 8800394:	e0bfee17 	ldw	r2,-72(fp)
 8800398:	e0bff515 	stw	r2,-44(fp)
					iteration++;
 880039c:	e0bfed17 	ldw	r2,-76(fp)
 88003a0:	10800044 	addi	r2,r2,1
 88003a4:	e0bfed15 	stw	r2,-76(fp)

					if(iteration == 450 && first_pass == 0) {
 88003a8:	e0bfed17 	ldw	r2,-76(fp)
 88003ac:	10807098 	cmpnei	r2,r2,450
 88003b0:	1000c21e 	bne	r2,zero,88006bc <main+0x4bc>
 88003b4:	e0bfeb17 	ldw	r2,-84(fp)
 88003b8:	1004c03a 	cmpne	r2,r2,zero
 88003bc:	1000bf1e 	bne	r2,zero,88006bc <main+0x4bc>
						printf("FIRST PASS COMPLETE\n");
 88003c0:	01022074 	movhi	r4,2177
 88003c4:	21062404 	addi	r4,r4,6288
 88003c8:	8804e340 	call	8804e34 <puts>
						first_pass = 1;
 88003cc:	00800044 	movi	r2,1
 88003d0:	e0bfeb15 	stw	r2,-84(fp)
						if(cpuid == 0 && is_target == 0){
 88003d4:	e0bffe17 	ldw	r2,-8(fp)
 88003d8:	1004c03a 	cmpne	r2,r2,zero
 88003dc:	1000481e 	bne	r2,zero,8800500 <main+0x300>
 88003e0:	e0bfec17 	ldw	r2,-80(fp)
 88003e4:	1004c03a 	cmpne	r2,r2,zero
 88003e8:	1000451e 	bne	r2,zero,8800500 <main+0x300>
							printf("set target x and y for zoom \n");
 88003ec:	01022074 	movhi	r4,2177
 88003f0:	21062904 	addi	r4,r4,6308
 88003f4:	8804e340 	call	8804e34 <puts>
							is_target = 1;
 88003f8:	00800044 	movi	r2,1
 88003fc:	e0bfec15 	stw	r2,-80(fp)
							target_x = x0;
 8800400:	e0bff217 	ldw	r2,-56(fp)
 8800404:	e0bff015 	stw	r2,-64(fp)
							target_y = y0;
 8800408:	e0bff117 	ldw	r2,-60(fp)
 880040c:	e0bfef15 	stw	r2,-68(fp)
							//comment out from here to the other dotted line to get rid of the zoom stuff
							//if you run it with no zoom you'll notice I was able to adjust the barriers and
							//smooth out the drawing of the frame so that certain CPUs don't pull ahead
							//*------------
							printf("target_x: %f...", target_x);
 8800410:	e13ff017 	ldw	r4,-64(fp)
 8800414:	88032180 	call	8803218 <__extendsfdf2>
 8800418:	100d883a 	mov	r6,r2
 880041c:	180f883a 	mov	r7,r3
 8800420:	01022074 	movhi	r4,2177
 8800424:	21063104 	addi	r4,r4,6340
 8800428:	300b883a 	mov	r5,r6
 880042c:	380d883a 	mov	r6,r7
 8800430:	8804d1c0 	call	8804d1c <printf>
							printf("target_y: %f\n", target_y);
 8800434:	e13fef17 	ldw	r4,-68(fp)
 8800438:	88032180 	call	8803218 <__extendsfdf2>
 880043c:	100d883a 	mov	r6,r2
 8800440:	180f883a 	mov	r7,r3
 8800444:	01022074 	movhi	r4,2177
 8800448:	21063504 	addi	r4,r4,6356
 880044c:	300b883a 	mov	r5,r6
 8800450:	380d883a 	mov	r6,r7
 8800454:	8804d1c0 	call	8804d1c <printf>
							 *
							 *
							 *
							 */

							altera_avalon_mailbox_post(mailbox_1, target_x);
 8800458:	d4270b17 	ldw	r16,-25556(gp)
 880045c:	e13ff017 	ldw	r4,-64(fp)
 8800460:	8802b600 	call	8802b60 <__fixunssfsi>
 8800464:	100b883a 	mov	r5,r2
 8800468:	8009883a 	mov	r4,r16
 880046c:	880e98c0 	call	880e98c <altera_avalon_mailbox_post>
							altera_avalon_mailbox_post(mailbox_2, target_x);
 8800470:	d4270a17 	ldw	r16,-25560(gp)
 8800474:	e13ff017 	ldw	r4,-64(fp)
 8800478:	8802b600 	call	8802b60 <__fixunssfsi>
 880047c:	100b883a 	mov	r5,r2
 8800480:	8009883a 	mov	r4,r16
 8800484:	880e98c0 	call	880e98c <altera_avalon_mailbox_post>
							altera_avalon_mailbox_post(mailbox_3, target_x);
 8800488:	d4270e17 	ldw	r16,-25544(gp)
 880048c:	e13ff017 	ldw	r4,-64(fp)
 8800490:	8802b600 	call	8802b60 <__fixunssfsi>
 8800494:	100b883a 	mov	r5,r2
 8800498:	8009883a 	mov	r4,r16
 880049c:	880e98c0 	call	880e98c <altera_avalon_mailbox_post>
							altera_avalon_mailbox_post(mailbox_1, target_y);
 88004a0:	d4270b17 	ldw	r16,-25556(gp)
 88004a4:	e13fef17 	ldw	r4,-68(fp)
 88004a8:	8802b600 	call	8802b60 <__fixunssfsi>
 88004ac:	100b883a 	mov	r5,r2
 88004b0:	8009883a 	mov	r4,r16
 88004b4:	880e98c0 	call	880e98c <altera_avalon_mailbox_post>
							altera_avalon_mailbox_post(mailbox_2, target_y);
 88004b8:	d4270a17 	ldw	r16,-25560(gp)
 88004bc:	e13fef17 	ldw	r4,-68(fp)
 88004c0:	8802b600 	call	8802b60 <__fixunssfsi>
 88004c4:	100b883a 	mov	r5,r2
 88004c8:	8009883a 	mov	r4,r16
 88004cc:	880e98c0 	call	880e98c <altera_avalon_mailbox_post>
							altera_avalon_mailbox_post(mailbox_3, target_y);
 88004d0:	d4270e17 	ldw	r16,-25544(gp)
 88004d4:	e13fef17 	ldw	r4,-68(fp)
 88004d8:	8802b600 	call	8802b60 <__fixunssfsi>
 88004dc:	100b883a 	mov	r5,r2
 88004e0:	8009883a 	mov	r4,r16
 88004e4:	880e98c0 	call	880e98c <altera_avalon_mailbox_post>
							//pend mailbox 0 until the other 3 boxes have posted
							altera_avalon_mailbox_pend(mailbox_0);
 88004e8:	d1270917 	ldw	r4,-25564(gp)
 88004ec:	880ea980 	call	880ea98 <altera_avalon_mailbox_pend>
							altera_avalon_mailbox_pend(mailbox_0);
 88004f0:	d1270917 	ldw	r4,-25564(gp)
 88004f4:	880ea980 	call	880ea98 <altera_avalon_mailbox_pend>
							altera_avalon_mailbox_pend(mailbox_0);
 88004f8:	d1270917 	ldw	r4,-25564(gp)
 88004fc:	880ea980 	call	880ea98 <altera_avalon_mailbox_pend>
						}
						if(cpuid == 1){
 8800500:	e0bffe17 	ldw	r2,-8(fp)
 8800504:	10800058 	cmpnei	r2,r2,1
 8800508:	1000221e 	bne	r2,zero,8800594 <main+0x394>
							printf("mailbox_1 pending\n");
 880050c:	01022074 	movhi	r4,2177
 8800510:	21063904 	addi	r4,r4,6372
 8800514:	8804e340 	call	8804e34 <puts>
							target_x = altera_avalon_mailbox_pend(mailbox_1);
 8800518:	d1270b17 	ldw	r4,-25556(gp)
 880051c:	880ea980 	call	880ea98 <altera_avalon_mailbox_pend>
 8800520:	1009883a 	mov	r4,r2
 8800524:	880326c0 	call	880326c <__floatunsisf>
 8800528:	e0bff015 	stw	r2,-64(fp)
							target_y = altera_avalon_mailbox_pend(mailbox_1);
 880052c:	d1270b17 	ldw	r4,-25556(gp)
 8800530:	880ea980 	call	880ea98 <altera_avalon_mailbox_pend>
 8800534:	1009883a 	mov	r4,r2
 8800538:	880326c0 	call	880326c <__floatunsisf>
 880053c:	e0bfef15 	stw	r2,-68(fp)
							printf("target_x: %f...", target_x);
 8800540:	e13ff017 	ldw	r4,-64(fp)
 8800544:	88032180 	call	8803218 <__extendsfdf2>
 8800548:	100d883a 	mov	r6,r2
 880054c:	180f883a 	mov	r7,r3
 8800550:	01022074 	movhi	r4,2177
 8800554:	21063104 	addi	r4,r4,6340
 8800558:	300b883a 	mov	r5,r6
 880055c:	380d883a 	mov	r6,r7
 8800560:	8804d1c0 	call	8804d1c <printf>
							printf("target_y: %f\n", target_y);
 8800564:	e13fef17 	ldw	r4,-68(fp)
 8800568:	88032180 	call	8803218 <__extendsfdf2>
 880056c:	100d883a 	mov	r6,r2
 8800570:	180f883a 	mov	r7,r3
 8800574:	01022074 	movhi	r4,2177
 8800578:	21063504 	addi	r4,r4,6356
 880057c:	300b883a 	mov	r5,r6
 8800580:	380d883a 	mov	r6,r7
 8800584:	8804d1c0 	call	8804d1c <printf>
							altera_avalon_mailbox_post(mailbox_0, message);
 8800588:	d1270917 	ldw	r4,-25564(gp)
 880058c:	d1670817 	ldw	r5,-25568(gp)
 8800590:	880e98c0 	call	880e98c <altera_avalon_mailbox_post>
						}
						if(cpuid == 2){
 8800594:	e0bffe17 	ldw	r2,-8(fp)
 8800598:	10800098 	cmpnei	r2,r2,2
 880059c:	1000221e 	bne	r2,zero,8800628 <main+0x428>
							printf("mailbox_2 pending\n");
 88005a0:	01022074 	movhi	r4,2177
 88005a4:	21063e04 	addi	r4,r4,6392
 88005a8:	8804e340 	call	8804e34 <puts>
							target_x = altera_avalon_mailbox_pend(mailbox_2);
 88005ac:	d1270a17 	ldw	r4,-25560(gp)
 88005b0:	880ea980 	call	880ea98 <altera_avalon_mailbox_pend>
 88005b4:	1009883a 	mov	r4,r2
 88005b8:	880326c0 	call	880326c <__floatunsisf>
 88005bc:	e0bff015 	stw	r2,-64(fp)
							target_y = altera_avalon_mailbox_pend(mailbox_2);
 88005c0:	d1270a17 	ldw	r4,-25560(gp)
 88005c4:	880ea980 	call	880ea98 <altera_avalon_mailbox_pend>
 88005c8:	1009883a 	mov	r4,r2
 88005cc:	880326c0 	call	880326c <__floatunsisf>
 88005d0:	e0bfef15 	stw	r2,-68(fp)
							printf("target_x: %f...", target_x);
 88005d4:	e13ff017 	ldw	r4,-64(fp)
 88005d8:	88032180 	call	8803218 <__extendsfdf2>
 88005dc:	100d883a 	mov	r6,r2
 88005e0:	180f883a 	mov	r7,r3
 88005e4:	01022074 	movhi	r4,2177
 88005e8:	21063104 	addi	r4,r4,6340
 88005ec:	300b883a 	mov	r5,r6
 88005f0:	380d883a 	mov	r6,r7
 88005f4:	8804d1c0 	call	8804d1c <printf>
							printf("target_y: %f\n", target_y);
 88005f8:	e13fef17 	ldw	r4,-68(fp)
 88005fc:	88032180 	call	8803218 <__extendsfdf2>
 8800600:	100d883a 	mov	r6,r2
 8800604:	180f883a 	mov	r7,r3
 8800608:	01022074 	movhi	r4,2177
 880060c:	21063504 	addi	r4,r4,6356
 8800610:	300b883a 	mov	r5,r6
 8800614:	380d883a 	mov	r6,r7
 8800618:	8804d1c0 	call	8804d1c <printf>
							altera_avalon_mailbox_post(mailbox_0, message);
 880061c:	d1270917 	ldw	r4,-25564(gp)
 8800620:	d1670817 	ldw	r5,-25568(gp)
 8800624:	880e98c0 	call	880e98c <altera_avalon_mailbox_post>
						}
						if(cpuid == 3){
 8800628:	e0bffe17 	ldw	r2,-8(fp)
 880062c:	108000d8 	cmpnei	r2,r2,3
 8800630:	1000221e 	bne	r2,zero,88006bc <main+0x4bc>
							printf("mailbox_3 pending\n");
 8800634:	01022074 	movhi	r4,2177
 8800638:	21064304 	addi	r4,r4,6412
 880063c:	8804e340 	call	8804e34 <puts>
							target_x = altera_avalon_mailbox_pend(mailbox_3);
 8800640:	d1270e17 	ldw	r4,-25544(gp)
 8800644:	880ea980 	call	880ea98 <altera_avalon_mailbox_pend>
 8800648:	1009883a 	mov	r4,r2
 880064c:	880326c0 	call	880326c <__floatunsisf>
 8800650:	e0bff015 	stw	r2,-64(fp)
							target_y = altera_avalon_mailbox_pend(mailbox_3);
 8800654:	d1270e17 	ldw	r4,-25544(gp)
 8800658:	880ea980 	call	880ea98 <altera_avalon_mailbox_pend>
 880065c:	1009883a 	mov	r4,r2
 8800660:	880326c0 	call	880326c <__floatunsisf>
 8800664:	e0bfef15 	stw	r2,-68(fp)
							printf("target_x: %f...", target_x);
 8800668:	e13ff017 	ldw	r4,-64(fp)
 880066c:	88032180 	call	8803218 <__extendsfdf2>
 8800670:	100d883a 	mov	r6,r2
 8800674:	180f883a 	mov	r7,r3
 8800678:	01022074 	movhi	r4,2177
 880067c:	21063104 	addi	r4,r4,6340
 8800680:	300b883a 	mov	r5,r6
 8800684:	380d883a 	mov	r6,r7
 8800688:	8804d1c0 	call	8804d1c <printf>
							printf("target_y: %f\n", target_y);
 880068c:	e13fef17 	ldw	r4,-68(fp)
 8800690:	88032180 	call	8803218 <__extendsfdf2>
 8800694:	100d883a 	mov	r6,r2
 8800698:	180f883a 	mov	r7,r3
 880069c:	01022074 	movhi	r4,2177
 88006a0:	21063504 	addi	r4,r4,6356
 88006a4:	300b883a 	mov	r5,r6
 88006a8:	380d883a 	mov	r6,r7
 88006ac:	8804d1c0 	call	8804d1c <printf>
							altera_avalon_mailbox_post(mailbox_0, message);
 88006b0:	d1270917 	ldw	r4,-25564(gp)
 88006b4:	d1670817 	ldw	r5,-25568(gp)
 88006b8:	880e98c0 	call	880e98c <altera_avalon_mailbox_post>
				z = 0;
				x0 = j/320.0*(max_x - min_x) + min_x;
				y0 = (239.0-i)/240.0*(max_y - min_y) + min_y;
				iteration = 0;

				while( (x*x + y*y) <= 4 && iteration < 500) {
 88006bc:	e0fff517 	ldw	r3,-44(fp)
 88006c0:	e0bff517 	ldw	r2,-44(fp)
 88006c4:	1889ff32 	custom	252,r4,r3,r2
 88006c8:	e0fff417 	ldw	r3,-48(fp)
 88006cc:	e0bff417 	ldw	r2,-48(fp)
 88006d0:	1885ff32 	custom	252,r2,r3,r2
 88006d4:	2085ff72 	custom	253,r2,r4,r2
 88006d8:	e03fff05 	stb	zero,-4(fp)
 88006dc:	1009883a 	mov	r4,r2
 88006e0:	01502034 	movhi	r5,16512
 88006e4:	88030740 	call	8803074 <__lesf2>
 88006e8:	10800050 	cmplti	r2,r2,1
 88006ec:	1000011e 	bne	r2,zero,88006f4 <main+0x4f4>
 88006f0:	00000206 	br	88006fc <main+0x4fc>
 88006f4:	00800044 	movi	r2,1
 88006f8:	e0bfff05 	stb	r2,-4(fp)
 88006fc:	e0ffff03 	ldbu	r3,-4(fp)
 8800700:	1880005c 	xori	r2,r3,1
 8800704:	10803fcc 	andi	r2,r2,255
 8800708:	1004c03a 	cmpne	r2,r2,zero
 880070c:	1000031e 	bne	r2,zero,880071c <main+0x51c>
 8800710:	e0bfed17 	ldw	r2,-76(fp)
 8800714:	10807d10 	cmplti	r2,r2,500
 8800718:	103f0d1e 	bne	r2,zero,8800350 <main+0x150>
						}
					}

				}
				//printf("Iteration: %d\n", iteration);
				if(iteration == 500) {
 880071c:	e0bfed17 	ldw	r2,-76(fp)
 8800720:	10807d18 	cmpnei	r2,r2,500
 8800724:	1000061e 	bne	r2,zero,8800740 <main+0x540>
					alt_up_pixel_buffer_dma_draw(my_pixel_buffer, 0,j,i );
 8800728:	e1bff617 	ldw	r6,-40(fp)
 880072c:	e1fff717 	ldw	r7,-36(fp)
 8800730:	e13ffd17 	ldw	r4,-12(fp)
 8800734:	000b883a 	mov	r5,zero
 8800738:	880ef5c0 	call	880ef5c <alt_up_pixel_buffer_dma_draw>
 880073c:	00001706 	br	880079c <main+0x59c>
				} else {
					alt_up_pixel_buffer_dma_draw(my_pixel_buffer, (iteration*8/zoom) + (iteration*4/zoom) +(iteration*2/zoom), j, i);
 8800740:	e0bfed17 	ldw	r2,-76(fp)
 8800744:	100890fa 	slli	r4,r2,3
 8800748:	e17ffc17 	ldw	r5,-16(fp)
 880074c:	88043140 	call	8804314 <__divsi3>
 8800750:	1021883a 	mov	r16,r2
 8800754:	e0bfed17 	ldw	r2,-76(fp)
 8800758:	1085883a 	add	r2,r2,r2
 880075c:	1085883a 	add	r2,r2,r2
 8800760:	1009883a 	mov	r4,r2
 8800764:	e17ffc17 	ldw	r5,-16(fp)
 8800768:	88043140 	call	8804314 <__divsi3>
 880076c:	80a1883a 	add	r16,r16,r2
 8800770:	e0bfed17 	ldw	r2,-76(fp)
 8800774:	1085883a 	add	r2,r2,r2
 8800778:	1009883a 	mov	r4,r2
 880077c:	e17ffc17 	ldw	r5,-16(fp)
 8800780:	88043140 	call	8804314 <__divsi3>
 8800784:	8085883a 	add	r2,r16,r2
 8800788:	100b883a 	mov	r5,r2
 880078c:	e1bff617 	ldw	r6,-40(fp)
 8800790:	e1fff717 	ldw	r7,-36(fp)
 8800794:	e13ffd17 	ldw	r4,-12(fp)
 8800798:	880ef5c0 	call	880ef5c <alt_up_pixel_buffer_dma_draw>

	//barrier(cpuid);
	while (1) {
		is_target = 0;
		for (i = cpuid; i < num_rows; i+=4) {
			for (j = 0; j < num_cols; j++) {
 880079c:	e0bff617 	ldw	r2,-40(fp)
 88007a0:	10800044 	addi	r2,r2,1
 88007a4:	e0bff615 	stw	r2,-40(fp)
 88007a8:	d0e00117 	ldw	r3,-32764(gp)
 88007ac:	e0bff617 	ldw	r2,-40(fp)
 88007b0:	10fec516 	blt	r2,r3,88002c8 <main+0xc8>
				} else {
					alt_up_pixel_buffer_dma_draw(my_pixel_buffer, (iteration*8/zoom) + (iteration*4/zoom) +(iteration*2/zoom), j, i);
				}
				//barrier(cpuid);
			}
			barrier(cpuid);
 88007b4:	e13ffe17 	ldw	r4,-8(fp)
 88007b8:	8800a500 	call	8800a50 <barrier>
	int first_pass = 0; // on the first pass

	//barrier(cpuid);
	while (1) {
		is_target = 0;
		for (i = cpuid; i < num_rows; i+=4) {
 88007bc:	e0bff717 	ldw	r2,-36(fp)
 88007c0:	10800104 	addi	r2,r2,4
 88007c4:	e0bff715 	stw	r2,-36(fp)
 88007c8:	d0e00017 	ldw	r3,-32768(gp)
 88007cc:	e0bff717 	ldw	r2,-36(fp)
 88007d0:	10febb16 	blt	r2,r3,88002c0 <main+0xc0>
				//barrier(cpuid);
			}
			barrier(cpuid);
		}

		barrier(cpuid);
 88007d4:	e13ffe17 	ldw	r4,-8(fp)
 88007d8:	8800a500 	call	8800a50 <barrier>
		min_x = target_x - (1/(pow(1.5, zoom)));
 88007dc:	e13ff017 	ldw	r4,-64(fp)
 88007e0:	88032180 	call	8803218 <__extendsfdf2>
 88007e4:	1021883a 	mov	r16,r2
 88007e8:	1823883a 	mov	r17,r3
 88007ec:	e13ffc17 	ldw	r4,-16(fp)
 88007f0:	88040f40 	call	88040f4 <__floatsidf>
 88007f4:	100f883a 	mov	r7,r2
 88007f8:	1811883a 	mov	r8,r3
 88007fc:	0009883a 	mov	r4,zero
 8800800:	014ffe34 	movhi	r5,16376
 8800804:	380d883a 	mov	r6,r7
 8800808:	400f883a 	mov	r7,r8
 880080c:	8800c800 	call	8800c80 <pow>
 8800810:	1009883a 	mov	r4,r2
 8800814:	180b883a 	mov	r5,r3
 8800818:	2005883a 	mov	r2,r4
 880081c:	2807883a 	mov	r3,r5
 8800820:	0009883a 	mov	r4,zero
 8800824:	016ffc34 	movhi	r5,49136
 8800828:	100d883a 	mov	r6,r2
 880082c:	180f883a 	mov	r7,r3
 8800830:	8803bf40 	call	8803bf4 <__divdf3>
 8800834:	1009883a 	mov	r4,r2
 8800838:	180b883a 	mov	r5,r3
 880083c:	2005883a 	mov	r2,r4
 8800840:	2807883a 	mov	r3,r5
 8800844:	8009883a 	mov	r4,r16
 8800848:	880b883a 	mov	r5,r17
 880084c:	100d883a 	mov	r6,r2
 8800850:	180f883a 	mov	r7,r3
 8800854:	88037bc0 	call	88037bc <__adddf3>
 8800858:	1009883a 	mov	r4,r2
 880085c:	180b883a 	mov	r5,r3
 8800860:	2005883a 	mov	r2,r4
 8800864:	2807883a 	mov	r3,r5
 8800868:	1009883a 	mov	r4,r2
 880086c:	180b883a 	mov	r5,r3
 8800870:	88042240 	call	8804224 <__truncdfsf2>
 8800874:	e0bffb15 	stw	r2,-20(fp)
		max_x = target_x + (1/(pow(1.5, zoom)));
 8800878:	e13ff017 	ldw	r4,-64(fp)
 880087c:	88032180 	call	8803218 <__extendsfdf2>
 8800880:	1021883a 	mov	r16,r2
 8800884:	1823883a 	mov	r17,r3
 8800888:	e13ffc17 	ldw	r4,-16(fp)
 880088c:	88040f40 	call	88040f4 <__floatsidf>
 8800890:	100f883a 	mov	r7,r2
 8800894:	1811883a 	mov	r8,r3
 8800898:	0009883a 	mov	r4,zero
 880089c:	014ffe34 	movhi	r5,16376
 88008a0:	380d883a 	mov	r6,r7
 88008a4:	400f883a 	mov	r7,r8
 88008a8:	8800c800 	call	8800c80 <pow>
 88008ac:	100f883a 	mov	r7,r2
 88008b0:	1811883a 	mov	r8,r3
 88008b4:	0009883a 	mov	r4,zero
 88008b8:	014ffc34 	movhi	r5,16368
 88008bc:	380d883a 	mov	r6,r7
 88008c0:	400f883a 	mov	r7,r8
 88008c4:	8803bf40 	call	8803bf4 <__divdf3>
 88008c8:	1009883a 	mov	r4,r2
 88008cc:	180b883a 	mov	r5,r3
 88008d0:	2005883a 	mov	r2,r4
 88008d4:	2807883a 	mov	r3,r5
 88008d8:	8009883a 	mov	r4,r16
 88008dc:	880b883a 	mov	r5,r17
 88008e0:	100d883a 	mov	r6,r2
 88008e4:	180f883a 	mov	r7,r3
 88008e8:	88037bc0 	call	88037bc <__adddf3>
 88008ec:	1009883a 	mov	r4,r2
 88008f0:	180b883a 	mov	r5,r3
 88008f4:	2005883a 	mov	r2,r4
 88008f8:	2807883a 	mov	r3,r5
 88008fc:	1009883a 	mov	r4,r2
 8800900:	180b883a 	mov	r5,r3
 8800904:	88042240 	call	8804224 <__truncdfsf2>
 8800908:	e0bffa15 	stw	r2,-24(fp)
		min_y = target_y - (0.75/(pow(1.5, zoom)));
 880090c:	e13fef17 	ldw	r4,-68(fp)
 8800910:	88032180 	call	8803218 <__extendsfdf2>
 8800914:	1021883a 	mov	r16,r2
 8800918:	1823883a 	mov	r17,r3
 880091c:	e13ffc17 	ldw	r4,-16(fp)
 8800920:	88040f40 	call	88040f4 <__floatsidf>
 8800924:	100f883a 	mov	r7,r2
 8800928:	1811883a 	mov	r8,r3
 880092c:	0009883a 	mov	r4,zero
 8800930:	014ffe34 	movhi	r5,16376
 8800934:	380d883a 	mov	r6,r7
 8800938:	400f883a 	mov	r7,r8
 880093c:	8800c800 	call	8800c80 <pow>
 8800940:	100f883a 	mov	r7,r2
 8800944:	1811883a 	mov	r8,r3
 8800948:	0009883a 	mov	r4,zero
 880094c:	016ffa34 	movhi	r5,49128
 8800950:	380d883a 	mov	r6,r7
 8800954:	400f883a 	mov	r7,r8
 8800958:	8803bf40 	call	8803bf4 <__divdf3>
 880095c:	1009883a 	mov	r4,r2
 8800960:	180b883a 	mov	r5,r3
 8800964:	2005883a 	mov	r2,r4
 8800968:	2807883a 	mov	r3,r5
 880096c:	8009883a 	mov	r4,r16
 8800970:	880b883a 	mov	r5,r17
 8800974:	100d883a 	mov	r6,r2
 8800978:	180f883a 	mov	r7,r3
 880097c:	88037bc0 	call	88037bc <__adddf3>
 8800980:	1009883a 	mov	r4,r2
 8800984:	180b883a 	mov	r5,r3
 8800988:	2005883a 	mov	r2,r4
 880098c:	2807883a 	mov	r3,r5
 8800990:	1009883a 	mov	r4,r2
 8800994:	180b883a 	mov	r5,r3
 8800998:	88042240 	call	8804224 <__truncdfsf2>
 880099c:	e0bff915 	stw	r2,-28(fp)
		max_y = target_y + (0.75/(pow(1.5, zoom)));
 88009a0:	e13fef17 	ldw	r4,-68(fp)
 88009a4:	88032180 	call	8803218 <__extendsfdf2>
 88009a8:	1021883a 	mov	r16,r2
 88009ac:	1823883a 	mov	r17,r3
 88009b0:	e13ffc17 	ldw	r4,-16(fp)
 88009b4:	88040f40 	call	88040f4 <__floatsidf>
 88009b8:	100f883a 	mov	r7,r2
 88009bc:	1811883a 	mov	r8,r3
 88009c0:	0009883a 	mov	r4,zero
 88009c4:	014ffe34 	movhi	r5,16376
 88009c8:	380d883a 	mov	r6,r7
 88009cc:	400f883a 	mov	r7,r8
 88009d0:	8800c800 	call	8800c80 <pow>
 88009d4:	100f883a 	mov	r7,r2
 88009d8:	1811883a 	mov	r8,r3
 88009dc:	0009883a 	mov	r4,zero
 88009e0:	014ffa34 	movhi	r5,16360
 88009e4:	380d883a 	mov	r6,r7
 88009e8:	400f883a 	mov	r7,r8
 88009ec:	8803bf40 	call	8803bf4 <__divdf3>
 88009f0:	1009883a 	mov	r4,r2
 88009f4:	180b883a 	mov	r5,r3
 88009f8:	2005883a 	mov	r2,r4
 88009fc:	2807883a 	mov	r3,r5
 8800a00:	8009883a 	mov	r4,r16
 8800a04:	880b883a 	mov	r5,r17
 8800a08:	100d883a 	mov	r6,r2
 8800a0c:	180f883a 	mov	r7,r3
 8800a10:	88037bc0 	call	88037bc <__adddf3>
 8800a14:	1009883a 	mov	r4,r2
 8800a18:	180b883a 	mov	r5,r3
 8800a1c:	2005883a 	mov	r2,r4
 8800a20:	2807883a 	mov	r3,r5
 8800a24:	1009883a 	mov	r4,r2
 8800a28:	180b883a 	mov	r5,r3
 8800a2c:	88042240 	call	8804224 <__truncdfsf2>
 8800a30:	e0bff815 	stw	r2,-32(fp)
		zoom += 1;
 8800a34:	e0bffc17 	ldw	r2,-16(fp)
 8800a38:	10800044 	addi	r2,r2,1
 8800a3c:	e0bffc15 	stw	r2,-16(fp)

		alt_up_pixel_buffer_dma_clear_screen(my_pixel_buffer,0);
 8800a40:	e13ffd17 	ldw	r4,-12(fp)
 8800a44:	000b883a 	mov	r5,zero
 8800a48:	880f1e00 	call	880f1e0 <alt_up_pixel_buffer_dma_clear_screen>
	}
 8800a4c:	003e1806 	br	88002b0 <main+0xb0>

08800a50 <barrier>:
	//barrier(cpuid);
}

void barrier(int id){
 8800a50:	defff904 	addi	sp,sp,-28
 8800a54:	dfc00615 	stw	ra,24(sp)
 8800a58:	df000515 	stw	fp,20(sp)
 8800a5c:	df000504 	addi	fp,sp,20
 8800a60:	e13fff15 	stw	r4,-4(fp)
	post(id, message);
 8800a64:	d1670817 	ldw	r5,-25568(gp)
 8800a68:	e13fff17 	ldw	r4,-4(fp)
 8800a6c:	8800b940 	call	8800b94 <post>
	if(id == 0){
 8800a70:	e0bfff17 	ldw	r2,-4(fp)
 8800a74:	1004c03a 	cmpne	r2,r2,zero
 8800a78:	10000b1e 	bne	r2,zero,8800aa8 <barrier+0x58>
		int i;
		for(i = 0; i < n-1; i++){
 8800a7c:	e03ffe15 	stw	zero,-8(fp)
 8800a80:	00000506 	br	8800a98 <barrier+0x48>
			pend(mailbox_0);
 8800a84:	d1270917 	ldw	r4,-25564(gp)
 8800a88:	8800b640 	call	8800b64 <pend>

void barrier(int id){
	post(id, message);
	if(id == 0){
		int i;
		for(i = 0; i < n-1; i++){
 8800a8c:	e0bffe17 	ldw	r2,-8(fp)
 8800a90:	10800044 	addi	r2,r2,1
 8800a94:	e0bffe15 	stw	r2,-8(fp)
 8800a98:	d0a00217 	ldw	r2,-32760(gp)
 8800a9c:	10ffffc4 	addi	r3,r2,-1
 8800aa0:	e0bffe17 	ldw	r2,-8(fp)
 8800aa4:	10fff716 	blt	r2,r3,8800a84 <barrier+0x34>
			pend(mailbox_0);
		}
	}
	if(id == 1){
 8800aa8:	e0bfff17 	ldw	r2,-4(fp)
 8800aac:	10800058 	cmpnei	r2,r2,1
 8800ab0:	10000b1e 	bne	r2,zero,8800ae0 <barrier+0x90>
		int i;
		for(i = 0; i < n-1; i++){
 8800ab4:	e03ffd15 	stw	zero,-12(fp)
 8800ab8:	00000506 	br	8800ad0 <barrier+0x80>
			pend(mailbox_1);
 8800abc:	d1270b17 	ldw	r4,-25556(gp)
 8800ac0:	8800b640 	call	8800b64 <pend>
			pend(mailbox_0);
		}
	}
	if(id == 1){
		int i;
		for(i = 0; i < n-1; i++){
 8800ac4:	e0bffd17 	ldw	r2,-12(fp)
 8800ac8:	10800044 	addi	r2,r2,1
 8800acc:	e0bffd15 	stw	r2,-12(fp)
 8800ad0:	d0a00217 	ldw	r2,-32760(gp)
 8800ad4:	10ffffc4 	addi	r3,r2,-1
 8800ad8:	e0bffd17 	ldw	r2,-12(fp)
 8800adc:	10fff716 	blt	r2,r3,8800abc <barrier+0x6c>
			pend(mailbox_1);
		}
	}
	if(id == 2){
 8800ae0:	e0bfff17 	ldw	r2,-4(fp)
 8800ae4:	10800098 	cmpnei	r2,r2,2
 8800ae8:	10000b1e 	bne	r2,zero,8800b18 <barrier+0xc8>
		int i;
		for(i = 0; i < n-1; i++){
 8800aec:	e03ffc15 	stw	zero,-16(fp)
 8800af0:	00000506 	br	8800b08 <barrier+0xb8>
			pend(mailbox_2);
 8800af4:	d1270a17 	ldw	r4,-25560(gp)
 8800af8:	8800b640 	call	8800b64 <pend>
			pend(mailbox_1);
		}
	}
	if(id == 2){
		int i;
		for(i = 0; i < n-1; i++){
 8800afc:	e0bffc17 	ldw	r2,-16(fp)
 8800b00:	10800044 	addi	r2,r2,1
 8800b04:	e0bffc15 	stw	r2,-16(fp)
 8800b08:	d0a00217 	ldw	r2,-32760(gp)
 8800b0c:	10ffffc4 	addi	r3,r2,-1
 8800b10:	e0bffc17 	ldw	r2,-16(fp)
 8800b14:	10fff716 	blt	r2,r3,8800af4 <barrier+0xa4>
			pend(mailbox_2);
		}
	}
	if(id == 3){
 8800b18:	e0bfff17 	ldw	r2,-4(fp)
 8800b1c:	108000d8 	cmpnei	r2,r2,3
 8800b20:	10000b1e 	bne	r2,zero,8800b50 <barrier+0x100>
		int i;
		for(i = 0; i < n-1; i++){
 8800b24:	e03ffb15 	stw	zero,-20(fp)
 8800b28:	00000506 	br	8800b40 <barrier+0xf0>
			pend(mailbox_3);
 8800b2c:	d1270e17 	ldw	r4,-25544(gp)
 8800b30:	8800b640 	call	8800b64 <pend>
			pend(mailbox_2);
		}
	}
	if(id == 3){
		int i;
		for(i = 0; i < n-1; i++){
 8800b34:	e0bffb17 	ldw	r2,-20(fp)
 8800b38:	10800044 	addi	r2,r2,1
 8800b3c:	e0bffb15 	stw	r2,-20(fp)
 8800b40:	d0a00217 	ldw	r2,-32760(gp)
 8800b44:	10ffffc4 	addi	r3,r2,-1
 8800b48:	e0bffb17 	ldw	r2,-20(fp)
 8800b4c:	10fff716 	blt	r2,r3,8800b2c <barrier+0xdc>
			pend(mailbox_3);
		}
	}
}
 8800b50:	e037883a 	mov	sp,fp
 8800b54:	dfc00117 	ldw	ra,4(sp)
 8800b58:	df000017 	ldw	fp,0(sp)
 8800b5c:	dec00204 	addi	sp,sp,8
 8800b60:	f800283a 	ret

08800b64 <pend>:
void pend(alt_mailbox_dev* box){
 8800b64:	defffd04 	addi	sp,sp,-12
 8800b68:	dfc00215 	stw	ra,8(sp)
 8800b6c:	df000115 	stw	fp,4(sp)
 8800b70:	df000104 	addi	fp,sp,4
 8800b74:	e13fff15 	stw	r4,-4(fp)
	//printf("MAILBOX PENDING \n");
	altera_avalon_mailbox_pend(box);
 8800b78:	e13fff17 	ldw	r4,-4(fp)
 8800b7c:	880ea980 	call	880ea98 <altera_avalon_mailbox_pend>
}
 8800b80:	e037883a 	mov	sp,fp
 8800b84:	dfc00117 	ldw	ra,4(sp)
 8800b88:	df000017 	ldw	fp,0(sp)
 8800b8c:	dec00204 	addi	sp,sp,8
 8800b90:	f800283a 	ret

08800b94 <post>:

void post(int id, alt_u32 mess){
 8800b94:	defffc04 	addi	sp,sp,-16
 8800b98:	dfc00315 	stw	ra,12(sp)
 8800b9c:	df000215 	stw	fp,8(sp)
 8800ba0:	df000204 	addi	fp,sp,8
 8800ba4:	e13ffe15 	stw	r4,-8(fp)
 8800ba8:	e17fff15 	stw	r5,-4(fp)
	 //altera_avalon_mailbox_post(box, message);

	 if(id == 0){
 8800bac:	e0bffe17 	ldw	r2,-8(fp)
 8800bb0:	1004c03a 	cmpne	r2,r2,zero
 8800bb4:	1000091e 	bne	r2,zero,8800bdc <post+0x48>
	 //printf("MAILBOX 0 POSTING \n");
	 altera_avalon_mailbox_post(mailbox_1, mess);
 8800bb8:	d1270b17 	ldw	r4,-25556(gp)
 8800bbc:	e17fff17 	ldw	r5,-4(fp)
 8800bc0:	880e98c0 	call	880e98c <altera_avalon_mailbox_post>
	 altera_avalon_mailbox_post(mailbox_2, mess);
 8800bc4:	d1270a17 	ldw	r4,-25560(gp)
 8800bc8:	e17fff17 	ldw	r5,-4(fp)
 8800bcc:	880e98c0 	call	880e98c <altera_avalon_mailbox_post>
	 altera_avalon_mailbox_post(mailbox_3, mess);
 8800bd0:	d1270e17 	ldw	r4,-25544(gp)
 8800bd4:	e17fff17 	ldw	r5,-4(fp)
 8800bd8:	880e98c0 	call	880e98c <altera_avalon_mailbox_post>
	 }
	 if(id == 1){
 8800bdc:	e0bffe17 	ldw	r2,-8(fp)
 8800be0:	10800058 	cmpnei	r2,r2,1
 8800be4:	1000091e 	bne	r2,zero,8800c0c <post+0x78>
	 //printf("MAILBOX 1 POSTING \n");
	 altera_avalon_mailbox_post(mailbox_0, mess);
 8800be8:	d1270917 	ldw	r4,-25564(gp)
 8800bec:	e17fff17 	ldw	r5,-4(fp)
 8800bf0:	880e98c0 	call	880e98c <altera_avalon_mailbox_post>
	 altera_avalon_mailbox_post(mailbox_2, mess);
 8800bf4:	d1270a17 	ldw	r4,-25560(gp)
 8800bf8:	e17fff17 	ldw	r5,-4(fp)
 8800bfc:	880e98c0 	call	880e98c <altera_avalon_mailbox_post>
	 altera_avalon_mailbox_post(mailbox_3, mess);
 8800c00:	d1270e17 	ldw	r4,-25544(gp)
 8800c04:	e17fff17 	ldw	r5,-4(fp)
 8800c08:	880e98c0 	call	880e98c <altera_avalon_mailbox_post>
	 }

	 if(id == 2){
 8800c0c:	e0bffe17 	ldw	r2,-8(fp)
 8800c10:	10800098 	cmpnei	r2,r2,2
 8800c14:	1000091e 	bne	r2,zero,8800c3c <post+0xa8>
	 //printf("MAILBOX 2 POSTING \n");
	 altera_avalon_mailbox_post(mailbox_0, mess);
 8800c18:	d1270917 	ldw	r4,-25564(gp)
 8800c1c:	e17fff17 	ldw	r5,-4(fp)
 8800c20:	880e98c0 	call	880e98c <altera_avalon_mailbox_post>
	 altera_avalon_mailbox_post(mailbox_1, mess);
 8800c24:	d1270b17 	ldw	r4,-25556(gp)
 8800c28:	e17fff17 	ldw	r5,-4(fp)
 8800c2c:	880e98c0 	call	880e98c <altera_avalon_mailbox_post>
	 altera_avalon_mailbox_post(mailbox_3, mess);
 8800c30:	d1270e17 	ldw	r4,-25544(gp)
 8800c34:	e17fff17 	ldw	r5,-4(fp)
 8800c38:	880e98c0 	call	880e98c <altera_avalon_mailbox_post>
	 }

	 if(id == 3){
 8800c3c:	e0bffe17 	ldw	r2,-8(fp)
 8800c40:	108000d8 	cmpnei	r2,r2,3
 8800c44:	1000091e 	bne	r2,zero,8800c6c <post+0xd8>
	 //printf("MAILBOX 3 POSTING \n");
	 altera_avalon_mailbox_post(mailbox_0, mess);
 8800c48:	d1270917 	ldw	r4,-25564(gp)
 8800c4c:	e17fff17 	ldw	r5,-4(fp)
 8800c50:	880e98c0 	call	880e98c <altera_avalon_mailbox_post>
	 altera_avalon_mailbox_post(mailbox_1, mess);
 8800c54:	d1270b17 	ldw	r4,-25556(gp)
 8800c58:	e17fff17 	ldw	r5,-4(fp)
 8800c5c:	880e98c0 	call	880e98c <altera_avalon_mailbox_post>
	 altera_avalon_mailbox_post(mailbox_2, mess);
 8800c60:	d1270a17 	ldw	r4,-25560(gp)
 8800c64:	e17fff17 	ldw	r5,-4(fp)
 8800c68:	880e98c0 	call	880e98c <altera_avalon_mailbox_post>
	 }

}
 8800c6c:	e037883a 	mov	sp,fp
 8800c70:	dfc00117 	ldw	ra,4(sp)
 8800c74:	df000017 	ldw	fp,0(sp)
 8800c78:	dec00204 	addi	sp,sp,8
 8800c7c:	f800283a 	ret

08800c80 <pow>:
 8800c80:	deffee04 	addi	sp,sp,-72
 8800c84:	ddc01015 	stw	r23,64(sp)
 8800c88:	05c22074 	movhi	r23,2177
 8800c8c:	bdce5104 	addi	r23,r23,14660
 8800c90:	dd800f15 	stw	r22,60(sp)
 8800c94:	dd400e15 	stw	r21,56(sp)
 8800c98:	dd000d15 	stw	r20,52(sp)
 8800c9c:	dcc00c15 	stw	r19,48(sp)
 8800ca0:	dc800b15 	stw	r18,44(sp)
 8800ca4:	dc400a15 	stw	r17,40(sp)
 8800ca8:	dc000915 	stw	r16,36(sp)
 8800cac:	2029883a 	mov	r20,r4
 8800cb0:	dfc01115 	stw	ra,68(sp)
 8800cb4:	3025883a 	mov	r18,r6
 8800cb8:	282b883a 	mov	r21,r5
 8800cbc:	3827883a 	mov	r19,r7
 8800cc0:	88011080 	call	8801108 <__ieee754_pow>
 8800cc4:	b9000017 	ldw	r4,0(r23)
 8800cc8:	05bfffc4 	movi	r22,-1
 8800ccc:	1021883a 	mov	r16,r2
 8800cd0:	1823883a 	mov	r17,r3
 8800cd4:	25800426 	beq	r4,r22,8800ce8 <pow+0x68>
 8800cd8:	9009883a 	mov	r4,r18
 8800cdc:	980b883a 	mov	r5,r19
 8800ce0:	88027040 	call	8802704 <__isnand>
 8800ce4:	10000d26 	beq	r2,zero,8800d1c <pow+0x9c>
 8800ce8:	8005883a 	mov	r2,r16
 8800cec:	8807883a 	mov	r3,r17
 8800cf0:	dfc01117 	ldw	ra,68(sp)
 8800cf4:	ddc01017 	ldw	r23,64(sp)
 8800cf8:	dd800f17 	ldw	r22,60(sp)
 8800cfc:	dd400e17 	ldw	r21,56(sp)
 8800d00:	dd000d17 	ldw	r20,52(sp)
 8800d04:	dcc00c17 	ldw	r19,48(sp)
 8800d08:	dc800b17 	ldw	r18,44(sp)
 8800d0c:	dc400a17 	ldw	r17,40(sp)
 8800d10:	dc000917 	ldw	r16,36(sp)
 8800d14:	dec01204 	addi	sp,sp,72
 8800d18:	f800283a 	ret
 8800d1c:	a009883a 	mov	r4,r20
 8800d20:	a80b883a 	mov	r5,r21
 8800d24:	88027040 	call	8802704 <__isnand>
 8800d28:	1000151e 	bne	r2,zero,8800d80 <pow+0x100>
 8800d2c:	000d883a 	mov	r6,zero
 8800d30:	000f883a 	mov	r7,zero
 8800d34:	a009883a 	mov	r4,r20
 8800d38:	a80b883a 	mov	r5,r21
 8800d3c:	8803e4c0 	call	8803e4c <__eqdf2>
 8800d40:	1000541e 	bne	r2,zero,8800e94 <pow+0x214>
 8800d44:	000d883a 	mov	r6,zero
 8800d48:	000f883a 	mov	r7,zero
 8800d4c:	9009883a 	mov	r4,r18
 8800d50:	980b883a 	mov	r5,r19
 8800d54:	8803e4c0 	call	8803e4c <__eqdf2>
 8800d58:	10002c1e 	bne	r2,zero,8800e0c <pow+0x18c>
 8800d5c:	b8800017 	ldw	r2,0(r23)
 8800d60:	d8000615 	stw	zero,24(sp)
 8800d64:	d8000715 	stw	zero,28(sp)
 8800d68:	10001226 	beq	r2,zero,8800db4 <pow+0x134>
 8800d6c:	008ffc34 	movhi	r2,16368
 8800d70:	d8800715 	stw	r2,28(sp)
 8800d74:	dc000617 	ldw	r16,24(sp)
 8800d78:	dc400717 	ldw	r17,28(sp)
 8800d7c:	003fda06 	br	8800ce8 <pow+0x68>
 8800d80:	000d883a 	mov	r6,zero
 8800d84:	000f883a 	mov	r7,zero
 8800d88:	9009883a 	mov	r4,r18
 8800d8c:	980b883a 	mov	r5,r19
 8800d90:	8803e4c0 	call	8803e4c <__eqdf2>
 8800d94:	103fd41e 	bne	r2,zero,8800ce8 <pow+0x68>
 8800d98:	b8c00017 	ldw	r3,0(r23)
 8800d9c:	010ffc34 	movhi	r4,16368
 8800da0:	d8000615 	stw	zero,24(sp)
 8800da4:	d9000715 	stw	r4,28(sp)
 8800da8:	1d801526 	beq	r3,r22,8800e00 <pow+0x180>
 8800dac:	00800084 	movi	r2,2
 8800db0:	18801326 	beq	r3,r2,8800e00 <pow+0x180>
 8800db4:	00822074 	movhi	r2,2177
 8800db8:	10864804 	addi	r2,r2,6432
 8800dbc:	00c00044 	movi	r3,1
 8800dc0:	d809883a 	mov	r4,sp
 8800dc4:	dcc00515 	stw	r19,20(sp)
 8800dc8:	dd400315 	stw	r21,12(sp)
 8800dcc:	d8800115 	stw	r2,4(sp)
 8800dd0:	d8c00015 	stw	r3,0(sp)
 8800dd4:	dc800415 	stw	r18,16(sp)
 8800dd8:	dd000215 	stw	r20,8(sp)
 8800ddc:	d8000815 	stw	zero,32(sp)
 8800de0:	88027340 	call	8802734 <matherr>
 8800de4:	10002726 	beq	r2,zero,8800e84 <pow+0x204>
 8800de8:	d8800817 	ldw	r2,32(sp)
 8800dec:	103fe126 	beq	r2,zero,8800d74 <pow+0xf4>
 8800df0:	8804d0c0 	call	8804d0c <__errno>
 8800df4:	d8c00817 	ldw	r3,32(sp)
 8800df8:	10c00015 	stw	r3,0(r2)
 8800dfc:	003fdd06 	br	8800d74 <pow+0xf4>
 8800e00:	d9000715 	stw	r4,28(sp)
 8800e04:	d8000615 	stw	zero,24(sp)
 8800e08:	003fda06 	br	8800d74 <pow+0xf4>
 8800e0c:	9009883a 	mov	r4,r18
 8800e10:	980b883a 	mov	r5,r19
 8800e14:	88026e80 	call	88026e8 <finite>
 8800e18:	103fb326 	beq	r2,zero,8800ce8 <pow+0x68>
 8800e1c:	000d883a 	mov	r6,zero
 8800e20:	000f883a 	mov	r7,zero
 8800e24:	9009883a 	mov	r4,r18
 8800e28:	980b883a 	mov	r5,r19
 8800e2c:	8803fe40 	call	8803fe4 <__ltdf2>
 8800e30:	103fad0e 	bge	r2,zero,8800ce8 <pow+0x68>
 8800e34:	b9000017 	ldw	r4,0(r23)
 8800e38:	00800044 	movi	r2,1
 8800e3c:	00c22074 	movhi	r3,2177
 8800e40:	18c64804 	addi	r3,r3,6432
 8800e44:	d8800015 	stw	r2,0(sp)
 8800e48:	d8c00115 	stw	r3,4(sp)
 8800e4c:	dd400315 	stw	r21,12(sp)
 8800e50:	dcc00515 	stw	r19,20(sp)
 8800e54:	d8000815 	stw	zero,32(sp)
 8800e58:	dd000215 	stw	r20,8(sp)
 8800e5c:	dc800415 	stw	r18,16(sp)
 8800e60:	20005626 	beq	r4,zero,8800fbc <pow+0x33c>
 8800e64:	00bffc34 	movhi	r2,65520
 8800e68:	d8800715 	stw	r2,28(sp)
 8800e6c:	00800084 	movi	r2,2
 8800e70:	d8000615 	stw	zero,24(sp)
 8800e74:	20800326 	beq	r4,r2,8800e84 <pow+0x204>
 8800e78:	d809883a 	mov	r4,sp
 8800e7c:	88027340 	call	8802734 <matherr>
 8800e80:	103fd91e 	bne	r2,zero,8800de8 <pow+0x168>
 8800e84:	8804d0c0 	call	8804d0c <__errno>
 8800e88:	00c00844 	movi	r3,33
 8800e8c:	10c00015 	stw	r3,0(r2)
 8800e90:	003fd506 	br	8800de8 <pow+0x168>
 8800e94:	8009883a 	mov	r4,r16
 8800e98:	880b883a 	mov	r5,r17
 8800e9c:	88026e80 	call	88026e8 <finite>
 8800ea0:	10002426 	beq	r2,zero,8800f34 <pow+0x2b4>
 8800ea4:	000d883a 	mov	r6,zero
 8800ea8:	000f883a 	mov	r7,zero
 8800eac:	8009883a 	mov	r4,r16
 8800eb0:	880b883a 	mov	r5,r17
 8800eb4:	8803e4c0 	call	8803e4c <__eqdf2>
 8800eb8:	103f8b1e 	bne	r2,zero,8800ce8 <pow+0x68>
 8800ebc:	a009883a 	mov	r4,r20
 8800ec0:	a80b883a 	mov	r5,r21
 8800ec4:	88026e80 	call	88026e8 <finite>
 8800ec8:	103f8726 	beq	r2,zero,8800ce8 <pow+0x68>
 8800ecc:	9009883a 	mov	r4,r18
 8800ed0:	980b883a 	mov	r5,r19
 8800ed4:	88026e80 	call	88026e8 <finite>
 8800ed8:	103f8326 	beq	r2,zero,8800ce8 <pow+0x68>
 8800edc:	b9000017 	ldw	r4,0(r23)
 8800ee0:	00800104 	movi	r2,4
 8800ee4:	d8800015 	stw	r2,0(sp)
 8800ee8:	00c22074 	movhi	r3,2177
 8800eec:	18c64804 	addi	r3,r3,6432
 8800ef0:	00800084 	movi	r2,2
 8800ef4:	d8c00115 	stw	r3,4(sp)
 8800ef8:	dd400315 	stw	r21,12(sp)
 8800efc:	dcc00515 	stw	r19,20(sp)
 8800f00:	d8000815 	stw	zero,32(sp)
 8800f04:	dd000215 	stw	r20,8(sp)
 8800f08:	dc800415 	stw	r18,16(sp)
 8800f0c:	d8000615 	stw	zero,24(sp)
 8800f10:	d8000715 	stw	zero,28(sp)
 8800f14:	20800326 	beq	r4,r2,8800f24 <pow+0x2a4>
 8800f18:	d809883a 	mov	r4,sp
 8800f1c:	88027340 	call	8802734 <matherr>
 8800f20:	103fb11e 	bne	r2,zero,8800de8 <pow+0x168>
 8800f24:	8804d0c0 	call	8804d0c <__errno>
 8800f28:	00c00884 	movi	r3,34
 8800f2c:	10c00015 	stw	r3,0(r2)
 8800f30:	003fad06 	br	8800de8 <pow+0x168>
 8800f34:	a009883a 	mov	r4,r20
 8800f38:	a80b883a 	mov	r5,r21
 8800f3c:	88026e80 	call	88026e8 <finite>
 8800f40:	103fd826 	beq	r2,zero,8800ea4 <pow+0x224>
 8800f44:	9009883a 	mov	r4,r18
 8800f48:	980b883a 	mov	r5,r19
 8800f4c:	88026e80 	call	88026e8 <finite>
 8800f50:	103fd426 	beq	r2,zero,8800ea4 <pow+0x224>
 8800f54:	880b883a 	mov	r5,r17
 8800f58:	8009883a 	mov	r4,r16
 8800f5c:	88027040 	call	8802704 <__isnand>
 8800f60:	10001926 	beq	r2,zero,8800fc8 <pow+0x348>
 8800f64:	bc000017 	ldw	r16,0(r23)
 8800f68:	00800044 	movi	r2,1
 8800f6c:	00c22074 	movhi	r3,2177
 8800f70:	18c64804 	addi	r3,r3,6432
 8800f74:	d8800015 	stw	r2,0(sp)
 8800f78:	d8c00115 	stw	r3,4(sp)
 8800f7c:	dd400315 	stw	r21,12(sp)
 8800f80:	dcc00515 	stw	r19,20(sp)
 8800f84:	d8000815 	stw	zero,32(sp)
 8800f88:	dd000215 	stw	r20,8(sp)
 8800f8c:	dc800415 	stw	r18,16(sp)
 8800f90:	80000a26 	beq	r16,zero,8800fbc <pow+0x33c>
 8800f94:	0009883a 	mov	r4,zero
 8800f98:	000d883a 	mov	r6,zero
 8800f9c:	000b883a 	mov	r5,zero
 8800fa0:	000f883a 	mov	r7,zero
 8800fa4:	8803bf40 	call	8803bf4 <__divdf3>
 8800fa8:	d8800615 	stw	r2,24(sp)
 8800fac:	00800084 	movi	r2,2
 8800fb0:	d8c00715 	stw	r3,28(sp)
 8800fb4:	80bfb01e 	bne	r16,r2,8800e78 <pow+0x1f8>
 8800fb8:	003fb206 	br	8800e84 <pow+0x204>
 8800fbc:	d8000615 	stw	zero,24(sp)
 8800fc0:	d8000715 	stw	zero,28(sp)
 8800fc4:	003fac06 	br	8800e78 <pow+0x1f8>
 8800fc8:	b8800017 	ldw	r2,0(r23)
 8800fcc:	00c000c4 	movi	r3,3
 8800fd0:	01022074 	movhi	r4,2177
 8800fd4:	21064804 	addi	r4,r4,6432
 8800fd8:	d8c00015 	stw	r3,0(sp)
 8800fdc:	d9000115 	stw	r4,4(sp)
 8800fe0:	d8000815 	stw	zero,32(sp)
 8800fe4:	dd000215 	stw	r20,8(sp)
 8800fe8:	dd400315 	stw	r21,12(sp)
 8800fec:	dc800415 	stw	r18,16(sp)
 8800ff0:	dcc00515 	stw	r19,20(sp)
 8800ff4:	1000251e 	bne	r2,zero,880108c <pow+0x40c>
 8800ff8:	05b80034 	movhi	r22,57344
 8800ffc:	0091fc34 	movhi	r2,18416
 8801000:	10bfffc4 	addi	r2,r2,-1
 8801004:	000d883a 	mov	r6,zero
 8801008:	000f883a 	mov	r7,zero
 880100c:	a80b883a 	mov	r5,r21
 8801010:	a009883a 	mov	r4,r20
 8801014:	d8800715 	stw	r2,28(sp)
 8801018:	dd800615 	stw	r22,24(sp)
 880101c:	8803fe40 	call	8803fe4 <__ltdf2>
 8801020:	103fbd0e 	bge	r2,zero,8800f18 <pow+0x298>
 8801024:	0005883a 	mov	r2,zero
 8801028:	00cff834 	movhi	r3,16352
 880102c:	180f883a 	mov	r7,r3
 8801030:	100d883a 	mov	r6,r2
 8801034:	980b883a 	mov	r5,r19
 8801038:	9009883a 	mov	r4,r18
 880103c:	88038300 	call	8803830 <__muldf3>
 8801040:	1009883a 	mov	r4,r2
 8801044:	180b883a 	mov	r5,r3
 8801048:	1021883a 	mov	r16,r2
 880104c:	1823883a 	mov	r17,r3
 8801050:	880274c0 	call	880274c <rint>
 8801054:	180f883a 	mov	r7,r3
 8801058:	8009883a 	mov	r4,r16
 880105c:	880b883a 	mov	r5,r17
 8801060:	100d883a 	mov	r6,r2
 8801064:	8803ed40 	call	8803ed4 <__nedf2>
 8801068:	10000426 	beq	r2,zero,880107c <pow+0x3fc>
 880106c:	00b1fc34 	movhi	r2,51184
 8801070:	10bfffc4 	addi	r2,r2,-1
 8801074:	dd800615 	stw	r22,24(sp)
 8801078:	d8800715 	stw	r2,28(sp)
 880107c:	b8c00017 	ldw	r3,0(r23)
 8801080:	00800084 	movi	r2,2
 8801084:	18bfa41e 	bne	r3,r2,8800f18 <pow+0x298>
 8801088:	003fa606 	br	8800f24 <pow+0x2a4>
 880108c:	009ffc34 	movhi	r2,32752
 8801090:	000d883a 	mov	r6,zero
 8801094:	000f883a 	mov	r7,zero
 8801098:	a80b883a 	mov	r5,r21
 880109c:	a009883a 	mov	r4,r20
 88010a0:	d8800715 	stw	r2,28(sp)
 88010a4:	d8000615 	stw	zero,24(sp)
 88010a8:	8803fe40 	call	8803fe4 <__ltdf2>
 88010ac:	103ff30e 	bge	r2,zero,880107c <pow+0x3fc>
 88010b0:	0005883a 	mov	r2,zero
 88010b4:	00cff834 	movhi	r3,16352
 88010b8:	180f883a 	mov	r7,r3
 88010bc:	100d883a 	mov	r6,r2
 88010c0:	980b883a 	mov	r5,r19
 88010c4:	9009883a 	mov	r4,r18
 88010c8:	88038300 	call	8803830 <__muldf3>
 88010cc:	1009883a 	mov	r4,r2
 88010d0:	180b883a 	mov	r5,r3
 88010d4:	1021883a 	mov	r16,r2
 88010d8:	1823883a 	mov	r17,r3
 88010dc:	880274c0 	call	880274c <rint>
 88010e0:	180f883a 	mov	r7,r3
 88010e4:	8009883a 	mov	r4,r16
 88010e8:	880b883a 	mov	r5,r17
 88010ec:	100d883a 	mov	r6,r2
 88010f0:	8803ed40 	call	8803ed4 <__nedf2>
 88010f4:	103fe126 	beq	r2,zero,880107c <pow+0x3fc>
 88010f8:	00bffc34 	movhi	r2,65520
 88010fc:	d8800715 	stw	r2,28(sp)
 8801100:	d8000615 	stw	zero,24(sp)
 8801104:	003fdd06 	br	880107c <pow+0x3fc>

08801108 <__ieee754_pow>:
 8801108:	deffbb04 	addi	sp,sp,-276
 880110c:	3005883a 	mov	r2,r6
 8801110:	dd404015 	stw	r21,256(sp)
 8801114:	dd003f15 	stw	r20,252(sp)
 8801118:	d9802815 	stw	r6,160(sp)
 880111c:	2029883a 	mov	r20,r4
 8801120:	282b883a 	mov	r21,r5
 8801124:	3009883a 	mov	r4,r6
 8801128:	380b883a 	mov	r5,r7
 880112c:	01a00034 	movhi	r6,32768
 8801130:	31bfffc4 	addi	r6,r6,-1
 8801134:	dc003b15 	stw	r16,236(sp)
 8801138:	29a0703a 	and	r16,r5,r6
 880113c:	1404b03a 	or	r2,r2,r16
 8801140:	dd804115 	stw	r22,260(sp)
 8801144:	dc403c15 	stw	r17,240(sp)
 8801148:	d9c02915 	stw	r7,164(sp)
 880114c:	382d883a 	mov	r22,r7
 8801150:	dfc04415 	stw	ra,272(sp)
 8801154:	200f883a 	mov	r7,r4
 8801158:	df004315 	stw	fp,268(sp)
 880115c:	ddc04215 	stw	r23,264(sp)
 8801160:	dcc03e15 	stw	r19,248(sp)
 8801164:	dc803d15 	stw	r18,244(sp)
 8801168:	a023883a 	mov	r17,r20
 880116c:	2809883a 	mov	r4,r5
 8801170:	10000826 	beq	r2,zero,8801194 <__ieee754_pow+0x8c>
 8801174:	a9a4703a 	and	r18,r21,r6
 8801178:	009ffc34 	movhi	r2,32752
 880117c:	a827883a 	mov	r19,r21
 8801180:	1480180e 	bge	r2,r18,88011e4 <__ieee754_pow+0xdc>
 8801184:	00b00434 	movhi	r2,49168
 8801188:	9085883a 	add	r2,r18,r2
 880118c:	8884b03a 	or	r2,r17,r2
 8801190:	1000321e 	bne	r2,zero,880125c <__ieee754_pow+0x154>
 8801194:	0009883a 	mov	r4,zero
 8801198:	014ffc34 	movhi	r5,16368
 880119c:	d9002815 	stw	r4,160(sp)
 88011a0:	d9402915 	stw	r5,164(sp)
 88011a4:	d9002817 	ldw	r4,160(sp)
 88011a8:	d9402917 	ldw	r5,164(sp)
 88011ac:	2005883a 	mov	r2,r4
 88011b0:	2807883a 	mov	r3,r5
 88011b4:	dfc04417 	ldw	ra,272(sp)
 88011b8:	df004317 	ldw	fp,268(sp)
 88011bc:	ddc04217 	ldw	r23,264(sp)
 88011c0:	dd804117 	ldw	r22,260(sp)
 88011c4:	dd404017 	ldw	r21,256(sp)
 88011c8:	dd003f17 	ldw	r20,252(sp)
 88011cc:	dcc03e17 	ldw	r19,248(sp)
 88011d0:	dc803d17 	ldw	r18,244(sp)
 88011d4:	dc403c17 	ldw	r17,240(sp)
 88011d8:	dc003b17 	ldw	r16,236(sp)
 88011dc:	dec04504 	addi	sp,sp,276
 88011e0:	f800283a 	ret
 88011e4:	90802b26 	beq	r18,r2,8801294 <__ieee754_pow+0x18c>
 88011e8:	143fe616 	blt	r2,r16,8801184 <__ieee754_pow+0x7c>
 88011ec:	80806126 	beq	r16,r2,8801374 <__ieee754_pow+0x26c>
 88011f0:	982e403a 	cmpge	r23,r19,zero
 88011f4:	b8004e26 	beq	r23,zero,8801330 <__ieee754_pow+0x228>
 88011f8:	0039883a 	mov	fp,zero
 88011fc:	3800281e 	bne	r7,zero,88012a0 <__ieee754_pow+0x198>
 8801200:	009ffc34 	movhi	r2,32752
 8801204:	80804f26 	beq	r16,r2,8801344 <__ieee754_pow+0x23c>
 8801208:	008ffc34 	movhi	r2,16368
 880120c:	80808226 	beq	r16,r2,8801418 <__ieee754_pow+0x310>
 8801210:	00900034 	movhi	r2,16384
 8801214:	20828426 	beq	r4,r2,8801c28 <__ieee754_pow+0xb20>
 8801218:	008ff834 	movhi	r2,16352
 880121c:	2080201e 	bne	r4,r2,88012a0 <__ieee754_pow+0x198>
 8801220:	98001f16 	blt	r19,zero,88012a0 <__ieee754_pow+0x198>
 8801224:	a80b883a 	mov	r5,r21
 8801228:	a009883a 	mov	r4,r20
 880122c:	dfc04417 	ldw	ra,272(sp)
 8801230:	df004317 	ldw	fp,268(sp)
 8801234:	ddc04217 	ldw	r23,264(sp)
 8801238:	dd804117 	ldw	r22,260(sp)
 880123c:	dd404017 	ldw	r21,256(sp)
 8801240:	dd003f17 	ldw	r20,252(sp)
 8801244:	dcc03e17 	ldw	r19,248(sp)
 8801248:	dc803d17 	ldw	r18,244(sp)
 880124c:	dc403c17 	ldw	r17,240(sp)
 8801250:	dc003b17 	ldw	r16,236(sp)
 8801254:	dec04504 	addi	sp,sp,276
 8801258:	88024081 	jmpi	8802408 <__ieee754_sqrt>
 880125c:	01022074 	movhi	r4,2177
 8801260:	2106b304 	addi	r4,r4,6860
 8801264:	dfc04417 	ldw	ra,272(sp)
 8801268:	df004317 	ldw	fp,268(sp)
 880126c:	ddc04217 	ldw	r23,264(sp)
 8801270:	dd804117 	ldw	r22,260(sp)
 8801274:	dd404017 	ldw	r21,256(sp)
 8801278:	dd003f17 	ldw	r20,252(sp)
 880127c:	dcc03e17 	ldw	r19,248(sp)
 8801280:	dc803d17 	ldw	r18,244(sp)
 8801284:	dc403c17 	ldw	r17,240(sp)
 8801288:	dc003b17 	ldw	r16,236(sp)
 880128c:	dec04504 	addi	sp,sp,276
 8801290:	880273c1 	jmpi	880273c <nan>
 8801294:	a03fbb1e 	bne	r20,zero,8801184 <__ieee754_pow+0x7c>
 8801298:	003fd306 	br	88011e8 <__ieee754_pow+0xe0>
 880129c:	0039883a 	mov	fp,zero
 88012a0:	a009883a 	mov	r4,r20
 88012a4:	a80b883a 	mov	r5,r21
 88012a8:	88026d00 	call	88026d0 <fabs>
 88012ac:	1015883a 	mov	r10,r2
 88012b0:	1817883a 	mov	r11,r3
 88012b4:	88001226 	beq	r17,zero,8801300 <__ieee754_pow+0x1f8>
 88012b8:	9804d7fa 	srli	r2,r19,31
 88012bc:	10bfffc4 	addi	r2,r2,-1
 88012c0:	1706b03a 	or	r3,r2,fp
 88012c4:	d8802515 	stw	r2,148(sp)
 88012c8:	18002c1e 	bne	r3,zero,880137c <__ieee754_pow+0x274>
 88012cc:	a80f883a 	mov	r7,r21
 88012d0:	a009883a 	mov	r4,r20
 88012d4:	a80b883a 	mov	r5,r21
 88012d8:	a00d883a 	mov	r6,r20
 88012dc:	880373c0 	call	880373c <__subdf3>
 88012e0:	1009883a 	mov	r4,r2
 88012e4:	180b883a 	mov	r5,r3
 88012e8:	100d883a 	mov	r6,r2
 88012ec:	180f883a 	mov	r7,r3
 88012f0:	8803bf40 	call	8803bf4 <__divdf3>
 88012f4:	d8802815 	stw	r2,160(sp)
 88012f8:	d8c02915 	stw	r3,164(sp)
 88012fc:	003fa906 	br	88011a4 <__ieee754_pow+0x9c>
 8801300:	009ffc34 	movhi	r2,32752
 8801304:	90800326 	beq	r18,r2,8801314 <__ieee754_pow+0x20c>
 8801308:	90000226 	beq	r18,zero,8801314 <__ieee754_pow+0x20c>
 880130c:	008ffc34 	movhi	r2,16368
 8801310:	90bfe91e 	bne	r18,r2,88012b8 <__ieee754_pow+0x1b0>
 8801314:	b0026316 	blt	r22,zero,8801ca4 <__ieee754_pow+0xb9c>
 8801318:	5011883a 	mov	r8,r10
 880131c:	5813883a 	mov	r9,r11
 8801320:	b8023126 	beq	r23,zero,8801be8 <__ieee754_pow+0xae0>
 8801324:	da002815 	stw	r8,160(sp)
 8801328:	da402915 	stw	r9,164(sp)
 880132c:	003f9d06 	br	88011a4 <__ieee754_pow+0x9c>
 8801330:	0090d034 	movhi	r2,17216
 8801334:	10bfffc4 	addi	r2,r2,-1
 8801338:	1400270e 	bge	r2,r16,88013d8 <__ieee754_pow+0x2d0>
 880133c:	07000084 	movi	fp,2
 8801340:	003fae06 	br	88011fc <__ieee754_pow+0xf4>
 8801344:	00b00434 	movhi	r2,49168
 8801348:	9085883a 	add	r2,r18,r2
 880134c:	8884b03a 	or	r2,r17,r2
 8801350:	103f9026 	beq	r2,zero,8801194 <__ieee754_pow+0x8c>
 8801354:	008ffc34 	movhi	r2,16368
 8801358:	10bfffc4 	addi	r2,r2,-1
 880135c:	1482d00e 	bge	r2,r18,8801ea0 <__ieee754_pow+0xd98>
 8801360:	b03f900e 	bge	r22,zero,88011a4 <__ieee754_pow+0x9c>
 8801364:	0005883a 	mov	r2,zero
 8801368:	d8802815 	stw	r2,160(sp)
 880136c:	d8802915 	stw	r2,164(sp)
 8801370:	003f8c06 	br	88011a4 <__ieee754_pow+0x9c>
 8801374:	383f9e26 	beq	r7,zero,88011f0 <__ieee754_pow+0xe8>
 8801378:	003f8206 	br	8801184 <__ieee754_pow+0x7c>
 880137c:	00907834 	movhi	r2,16864
 8801380:	1400290e 	bge	r2,r16,8801428 <__ieee754_pow+0x320>
 8801384:	0090fc34 	movhi	r2,17392
 8801388:	1402500e 	bge	r2,r16,8801ccc <__ieee754_pow+0xbc4>
 880138c:	008ffc34 	movhi	r2,16368
 8801390:	10bfffc4 	addi	r2,r2,-1
 8801394:	14800b0e 	bge	r2,r18,88013c4 <__ieee754_pow+0x2bc>
 8801398:	05800b0e 	bge	zero,r22,88013c8 <__ieee754_pow+0x2c0>
 880139c:	00a20034 	movhi	r2,34816
 88013a0:	109d6704 	addi	r2,r2,30108
 88013a4:	00df8e34 	movhi	r3,32312
 88013a8:	18f90f04 	addi	r3,r3,-7108
 88013ac:	100d883a 	mov	r6,r2
 88013b0:	180f883a 	mov	r7,r3
 88013b4:	1009883a 	mov	r4,r2
 88013b8:	180b883a 	mov	r5,r3
 88013bc:	88038300 	call	8803830 <__muldf3>
 88013c0:	003fcc06 	br	88012f4 <__ieee754_pow+0x1ec>
 88013c4:	b03ff516 	blt	r22,zero,880139c <__ieee754_pow+0x294>
 88013c8:	0007883a 	mov	r3,zero
 88013cc:	d8c02815 	stw	r3,160(sp)
 88013d0:	d8c02915 	stw	r3,164(sp)
 88013d4:	003f7306 	br	88011a4 <__ieee754_pow+0x9c>
 88013d8:	008ffc34 	movhi	r2,16368
 88013dc:	10bfffc4 	addi	r2,r2,-1
 88013e0:	143f850e 	bge	r2,r16,88011f8 <__ieee754_pow+0xf0>
 88013e4:	8005d53a 	srai	r2,r16,20
 88013e8:	01400504 	movi	r5,20
 88013ec:	10ff0044 	addi	r3,r2,-1023
 88013f0:	28c3e10e 	bge	r5,r3,8802378 <__ieee754_pow+0x1270>
 88013f4:	00800d04 	movi	r2,52
 88013f8:	10c5c83a 	sub	r2,r2,r3
 88013fc:	3886d83a 	srl	r3,r7,r2
 8801400:	1884983a 	sll	r2,r3,r2
 8801404:	38bf7c1e 	bne	r7,r2,88011f8 <__ieee754_pow+0xf0>
 8801408:	18c0004c 	andi	r3,r3,1
 880140c:	00800084 	movi	r2,2
 8801410:	10f9c83a 	sub	fp,r2,r3
 8801414:	003f7906 	br	88011fc <__ieee754_pow+0xf4>
 8801418:	b0038516 	blt	r22,zero,8802230 <__ieee754_pow+0x1128>
 880141c:	dd002815 	stw	r20,160(sp)
 8801420:	dd402915 	stw	r21,164(sp)
 8801424:	003f5f06 	br	88011a4 <__ieee754_pow+0x9c>
 8801428:	00800434 	movhi	r2,16
 880142c:	10bfffc4 	addi	r2,r2,-1
 8801430:	1482900e 	bge	r2,r18,8801e74 <__ieee754_pow+0xd6c>
 8801434:	000b883a 	mov	r5,zero
 8801438:	9005d53a 	srai	r2,r18,20
 880143c:	00c00434 	movhi	r3,16
 8801440:	18ffffc4 	addi	r3,r3,-1
 8801444:	90c8703a 	and	r4,r18,r3
 8801448:	2887883a 	add	r3,r5,r2
 880144c:	18bf0044 	addi	r2,r3,-1023
 8801450:	d8800015 	stw	r2,0(sp)
 8801454:	00800134 	movhi	r2,4
 8801458:	10a62384 	addi	r2,r2,-26482
 880145c:	250ffc34 	orhi	r20,r4,16368
 8801460:	1101ee0e 	bge	r2,r4,8801c1c <__ieee754_pow+0xb14>
 8801464:	00800334 	movhi	r2,12
 8801468:	10ad9e44 	addi	r2,r2,-18823
 880146c:	1101e716 	blt	r2,r4,8801c0c <__ieee754_pow+0xb04>
 8801470:	01000044 	movi	r4,1
 8801474:	04000334 	movhi	r16,12
 8801478:	200890fa 	slli	r4,r4,3
 880147c:	da800115 	stw	r10,4(sp)
 8801480:	dd000215 	stw	r20,8(sp)
 8801484:	d9002c15 	stw	r4,176(sp)
 8801488:	d9402c17 	ldw	r5,176(sp)
 880148c:	01022074 	movhi	r4,2177
 8801490:	21064904 	addi	r4,r4,6436
 8801494:	a02bd07a 	srai	r21,r20,1
 8801498:	2909883a 	add	r4,r5,r4
 880149c:	25800017 	ldw	r22,0(r4)
 88014a0:	25c00117 	ldw	r23,4(r4)
 88014a4:	a00b883a 	mov	r5,r20
 88014a8:	5009883a 	mov	r4,r10
 88014ac:	b00d883a 	mov	r6,r22
 88014b0:	b80f883a 	mov	r7,r23
 88014b4:	880373c0 	call	880373c <__subdf3>
 88014b8:	d9000117 	ldw	r4,4(sp)
 88014bc:	a00b883a 	mov	r5,r20
 88014c0:	b00d883a 	mov	r6,r22
 88014c4:	b80f883a 	mov	r7,r23
 88014c8:	1025883a 	mov	r18,r2
 88014cc:	1827883a 	mov	r19,r3
 88014d0:	88037bc0 	call	88037bc <__adddf3>
 88014d4:	0011883a 	mov	r8,zero
 88014d8:	024ffc34 	movhi	r9,16368
 88014dc:	480b883a 	mov	r5,r9
 88014e0:	4009883a 	mov	r4,r8
 88014e4:	180f883a 	mov	r7,r3
 88014e8:	100d883a 	mov	r6,r2
 88014ec:	8803bf40 	call	8803bf4 <__divdf3>
 88014f0:	d8c02e15 	stw	r3,184(sp)
 88014f4:	d8800f15 	stw	r2,60(sp)
 88014f8:	d8802d15 	stw	r2,180(sp)
 88014fc:	d8802e17 	ldw	r2,184(sp)
 8801500:	d9800f17 	ldw	r6,60(sp)
 8801504:	9009883a 	mov	r4,r18
 8801508:	980b883a 	mov	r5,r19
 880150c:	100f883a 	mov	r7,r2
 8801510:	dc800b15 	stw	r18,44(sp)
 8801514:	dcc00c15 	stw	r19,48(sp)
 8801518:	d8801015 	stw	r2,64(sp)
 880151c:	88038300 	call	8803830 <__muldf3>
 8801520:	d8c03015 	stw	r3,192(sp)
 8801524:	d9003017 	ldw	r4,192(sp)
 8801528:	d8802f15 	stw	r2,188(sp)
 880152c:	d8800315 	stw	r2,12(sp)
 8801530:	ad480034 	orhi	r21,r21,8192
 8801534:	0005883a 	mov	r2,zero
 8801538:	ac2b883a 	add	r21,r21,r16
 880153c:	000b883a 	mov	r5,zero
 8801540:	1021883a 	mov	r16,r2
 8801544:	2005883a 	mov	r2,r4
 8801548:	800d883a 	mov	r6,r16
 880154c:	a80f883a 	mov	r7,r21
 8801550:	d9000415 	stw	r4,16(sp)
 8801554:	d9002715 	stw	r4,156(sp)
 8801558:	d9402615 	stw	r5,152(sp)
 880155c:	d9401615 	stw	r5,88(sp)
 8801560:	d9001715 	stw	r4,92(sp)
 8801564:	100b883a 	mov	r5,r2
 8801568:	0009883a 	mov	r4,zero
 880156c:	88038300 	call	8803830 <__muldf3>
 8801570:	d9000b17 	ldw	r4,44(sp)
 8801574:	980b883a 	mov	r5,r19
 8801578:	180f883a 	mov	r7,r3
 880157c:	100d883a 	mov	r6,r2
 8801580:	880373c0 	call	880373c <__subdf3>
 8801584:	8009883a 	mov	r4,r16
 8801588:	a80b883a 	mov	r5,r21
 880158c:	b80f883a 	mov	r7,r23
 8801590:	b00d883a 	mov	r6,r22
 8801594:	1021883a 	mov	r16,r2
 8801598:	1823883a 	mov	r17,r3
 880159c:	880373c0 	call	880373c <__subdf3>
 88015a0:	d9000117 	ldw	r4,4(sp)
 88015a4:	a00b883a 	mov	r5,r20
 88015a8:	180f883a 	mov	r7,r3
 88015ac:	100d883a 	mov	r6,r2
 88015b0:	880373c0 	call	880373c <__subdf3>
 88015b4:	d9001617 	ldw	r4,88(sp)
 88015b8:	d9402717 	ldw	r5,156(sp)
 88015bc:	180f883a 	mov	r7,r3
 88015c0:	100d883a 	mov	r6,r2
 88015c4:	88038300 	call	8803830 <__muldf3>
 88015c8:	180f883a 	mov	r7,r3
 88015cc:	880b883a 	mov	r5,r17
 88015d0:	8009883a 	mov	r4,r16
 88015d4:	100d883a 	mov	r6,r2
 88015d8:	880373c0 	call	880373c <__subdf3>
 88015dc:	d9000f17 	ldw	r4,60(sp)
 88015e0:	d9402e17 	ldw	r5,184(sp)
 88015e4:	180f883a 	mov	r7,r3
 88015e8:	100d883a 	mov	r6,r2
 88015ec:	88038300 	call	8803830 <__muldf3>
 88015f0:	d9000317 	ldw	r4,12(sp)
 88015f4:	d9403017 	ldw	r5,192(sp)
 88015f8:	d8803115 	stw	r2,196(sp)
 88015fc:	200d883a 	mov	r6,r4
 8801600:	280f883a 	mov	r7,r5
 8801604:	d8c03215 	stw	r3,200(sp)
 8801608:	88038300 	call	8803830 <__muldf3>
 880160c:	1009883a 	mov	r4,r2
 8801610:	180b883a 	mov	r5,r3
 8801614:	100d883a 	mov	r6,r2
 8801618:	180f883a 	mov	r7,r3
 880161c:	1021883a 	mov	r16,r2
 8801620:	1823883a 	mov	r17,r3
 8801624:	88038300 	call	8803830 <__muldf3>
 8801628:	02129174 	movhi	r8,19013
 880162c:	4213bbc4 	addi	r8,r8,20207
 8801630:	024ff2b4 	movhi	r9,16330
 8801634:	4a5f8a04 	addi	r9,r9,32296
 8801638:	480f883a 	mov	r7,r9
 880163c:	8009883a 	mov	r4,r16
 8801640:	880b883a 	mov	r5,r17
 8801644:	400d883a 	mov	r6,r8
 8801648:	1029883a 	mov	r20,r2
 880164c:	182b883a 	mov	r21,r3
 8801650:	88038300 	call	8803830 <__muldf3>
 8801654:	0224f2b4 	movhi	r8,37834
 8801658:	4236d944 	addi	r8,r8,-9371
 880165c:	024ff3b4 	movhi	r9,16334
 8801660:	4a619284 	addi	r9,r9,-31158
 8801664:	480f883a 	mov	r7,r9
 8801668:	400d883a 	mov	r6,r8
 880166c:	180b883a 	mov	r5,r3
 8801670:	1009883a 	mov	r4,r2
 8801674:	88037bc0 	call	88037bc <__adddf3>
 8801678:	180f883a 	mov	r7,r3
 880167c:	8009883a 	mov	r4,r16
 8801680:	880b883a 	mov	r5,r17
 8801684:	100d883a 	mov	r6,r2
 8801688:	88038300 	call	8803830 <__muldf3>
 880168c:	022a4774 	movhi	r8,43293
 8801690:	42104044 	addi	r8,r8,16641
 8801694:	024ff474 	movhi	r9,16337
 8801698:	4a5d1804 	addi	r9,r9,29792
 880169c:	480f883a 	mov	r7,r9
 88016a0:	400d883a 	mov	r6,r8
 88016a4:	180b883a 	mov	r5,r3
 88016a8:	1009883a 	mov	r4,r2
 88016ac:	88037bc0 	call	88037bc <__adddf3>
 88016b0:	180f883a 	mov	r7,r3
 88016b4:	8009883a 	mov	r4,r16
 88016b8:	880b883a 	mov	r5,r17
 88016bc:	100d883a 	mov	r6,r2
 88016c0:	88038300 	call	8803830 <__muldf3>
 88016c4:	021463f4 	movhi	r8,20879
 88016c8:	42099344 	addi	r8,r8,9805
 88016cc:	024ff574 	movhi	r9,16341
 88016d0:	4a555544 	addi	r9,r9,21845
 88016d4:	480f883a 	mov	r7,r9
 88016d8:	400d883a 	mov	r6,r8
 88016dc:	180b883a 	mov	r5,r3
 88016e0:	1009883a 	mov	r4,r2
 88016e4:	88037bc0 	call	88037bc <__adddf3>
 88016e8:	180f883a 	mov	r7,r3
 88016ec:	8009883a 	mov	r4,r16
 88016f0:	880b883a 	mov	r5,r17
 88016f4:	100d883a 	mov	r6,r2
 88016f8:	88038300 	call	8803830 <__muldf3>
 88016fc:	0236dc34 	movhi	r8,56176
 8801700:	422affc4 	addi	r8,r8,-21505
 8801704:	024ff6f4 	movhi	r9,16347
 8801708:	4a5b6d84 	addi	r9,r9,28086
 880170c:	480f883a 	mov	r7,r9
 8801710:	400d883a 	mov	r6,r8
 8801714:	180b883a 	mov	r5,r3
 8801718:	1009883a 	mov	r4,r2
 880171c:	88037bc0 	call	88037bc <__adddf3>
 8801720:	180f883a 	mov	r7,r3
 8801724:	8009883a 	mov	r4,r16
 8801728:	880b883a 	mov	r5,r17
 880172c:	100d883a 	mov	r6,r2
 8801730:	88038300 	call	8803830 <__muldf3>
 8801734:	020cccf4 	movhi	r8,13107
 8801738:	420cc0c4 	addi	r8,r8,13059
 880173c:	024ff8f4 	movhi	r9,16355
 8801740:	4a4cccc4 	addi	r9,r9,13107
 8801744:	480f883a 	mov	r7,r9
 8801748:	400d883a 	mov	r6,r8
 880174c:	180b883a 	mov	r5,r3
 8801750:	1009883a 	mov	r4,r2
 8801754:	88037bc0 	call	88037bc <__adddf3>
 8801758:	180f883a 	mov	r7,r3
 880175c:	a80b883a 	mov	r5,r21
 8801760:	a009883a 	mov	r4,r20
 8801764:	100d883a 	mov	r6,r2
 8801768:	88038300 	call	8803830 <__muldf3>
 880176c:	d9000317 	ldw	r4,12(sp)
 8801770:	d9403017 	ldw	r5,192(sp)
 8801774:	d9801617 	ldw	r6,88(sp)
 8801778:	d9c02717 	ldw	r7,156(sp)
 880177c:	1021883a 	mov	r16,r2
 8801780:	1823883a 	mov	r17,r3
 8801784:	88037bc0 	call	88037bc <__adddf3>
 8801788:	d9003117 	ldw	r4,196(sp)
 880178c:	d9403217 	ldw	r5,200(sp)
 8801790:	180f883a 	mov	r7,r3
 8801794:	100d883a 	mov	r6,r2
 8801798:	d9001415 	stw	r4,80(sp)
 880179c:	d9401515 	stw	r5,84(sp)
 88017a0:	88038300 	call	8803830 <__muldf3>
 88017a4:	180f883a 	mov	r7,r3
 88017a8:	8009883a 	mov	r4,r16
 88017ac:	880b883a 	mov	r5,r17
 88017b0:	100d883a 	mov	r6,r2
 88017b4:	88037bc0 	call	88037bc <__adddf3>
 88017b8:	d9001617 	ldw	r4,88(sp)
 88017bc:	d9402717 	ldw	r5,156(sp)
 88017c0:	d8803315 	stw	r2,204(sp)
 88017c4:	200d883a 	mov	r6,r4
 88017c8:	280f883a 	mov	r7,r5
 88017cc:	d8c03415 	stw	r3,208(sp)
 88017d0:	88038300 	call	8803830 <__muldf3>
 88017d4:	182f883a 	mov	r23,r3
 88017d8:	05500234 	movhi	r21,16392
 88017dc:	0029883a 	mov	r20,zero
 88017e0:	b80b883a 	mov	r5,r23
 88017e4:	a00d883a 	mov	r6,r20
 88017e8:	a80f883a 	mov	r7,r21
 88017ec:	1009883a 	mov	r4,r2
 88017f0:	d8800715 	stw	r2,28(sp)
 88017f4:	d8c00815 	stw	r3,32(sp)
 88017f8:	88037bc0 	call	88037bc <__adddf3>
 88017fc:	d9003317 	ldw	r4,204(sp)
 8801800:	d9403417 	ldw	r5,208(sp)
 8801804:	180f883a 	mov	r7,r3
 8801808:	100d883a 	mov	r6,r2
 880180c:	d9000515 	stw	r4,20(sp)
 8801810:	d9400615 	stw	r5,24(sp)
 8801814:	88037bc0 	call	88037bc <__adddf3>
 8801818:	d9001617 	ldw	r4,88(sp)
 880181c:	d9402717 	ldw	r5,156(sp)
 8801820:	0025883a 	mov	r18,zero
 8801824:	900d883a 	mov	r6,r18
 8801828:	180f883a 	mov	r7,r3
 880182c:	1823883a 	mov	r17,r3
 8801830:	88038300 	call	8803830 <__muldf3>
 8801834:	d9001417 	ldw	r4,80(sp)
 8801838:	d9403217 	ldw	r5,200(sp)
 880183c:	880f883a 	mov	r7,r17
 8801840:	900d883a 	mov	r6,r18
 8801844:	d8803515 	stw	r2,212(sp)
 8801848:	d8c03615 	stw	r3,216(sp)
 880184c:	88038300 	call	8803830 <__muldf3>
 8801850:	a80f883a 	mov	r7,r21
 8801854:	880b883a 	mov	r5,r17
 8801858:	000d883a 	mov	r6,zero
 880185c:	9009883a 	mov	r4,r18
 8801860:	1021883a 	mov	r16,r2
 8801864:	1823883a 	mov	r17,r3
 8801868:	880373c0 	call	880373c <__subdf3>
 880186c:	d9800717 	ldw	r6,28(sp)
 8801870:	b80f883a 	mov	r7,r23
 8801874:	180b883a 	mov	r5,r3
 8801878:	1009883a 	mov	r4,r2
 880187c:	880373c0 	call	880373c <__subdf3>
 8801880:	d9000517 	ldw	r4,20(sp)
 8801884:	d9403417 	ldw	r5,208(sp)
 8801888:	180f883a 	mov	r7,r3
 880188c:	100d883a 	mov	r6,r2
 8801890:	880373c0 	call	880373c <__subdf3>
 8801894:	d9000317 	ldw	r4,12(sp)
 8801898:	d9403017 	ldw	r5,192(sp)
 880189c:	180f883a 	mov	r7,r3
 88018a0:	100d883a 	mov	r6,r2
 88018a4:	88038300 	call	8803830 <__muldf3>
 88018a8:	180f883a 	mov	r7,r3
 88018ac:	880b883a 	mov	r5,r17
 88018b0:	8009883a 	mov	r4,r16
 88018b4:	100d883a 	mov	r6,r2
 88018b8:	88037bc0 	call	88037bc <__adddf3>
 88018bc:	102d883a 	mov	r22,r2
 88018c0:	d9003617 	ldw	r4,216(sp)
 88018c4:	d8803517 	ldw	r2,212(sp)
 88018c8:	d9403617 	ldw	r5,216(sp)
 88018cc:	182f883a 	mov	r23,r3
 88018d0:	b00d883a 	mov	r6,r22
 88018d4:	b80f883a 	mov	r7,r23
 88018d8:	d9000a15 	stw	r4,40(sp)
 88018dc:	1009883a 	mov	r4,r2
 88018e0:	054ffbf4 	movhi	r21,16367
 88018e4:	ad71c244 	addi	r21,r21,-14583
 88018e8:	dd800d15 	stw	r22,52(sp)
 88018ec:	ddc00e15 	stw	r23,56(sp)
 88018f0:	05380034 	movhi	r20,57344
 88018f4:	d8800915 	stw	r2,36(sp)
 88018f8:	88037bc0 	call	88037bc <__adddf3>
 88018fc:	180b883a 	mov	r5,r3
 8801900:	a00d883a 	mov	r6,r20
 8801904:	a80f883a 	mov	r7,r21
 8801908:	9009883a 	mov	r4,r18
 880190c:	1823883a 	mov	r17,r3
 8801910:	88038300 	call	8803830 <__muldf3>
 8801914:	020516f4 	movhi	r8,5211
 8801918:	42007d44 	addi	r8,r8,501
 880191c:	026f8fb4 	movhi	r9,48702
 8801920:	4a4bf804 	addi	r9,r9,12256
 8801924:	480f883a 	mov	r7,r9
 8801928:	400d883a 	mov	r6,r8
 880192c:	880b883a 	mov	r5,r17
 8801930:	9009883a 	mov	r4,r18
 8801934:	d8803715 	stw	r2,220(sp)
 8801938:	d8c03815 	stw	r3,224(sp)
 880193c:	88038300 	call	8803830 <__muldf3>
 8801940:	d9800917 	ldw	r6,36(sp)
 8801944:	d9c03617 	ldw	r7,216(sp)
 8801948:	880b883a 	mov	r5,r17
 880194c:	9009883a 	mov	r4,r18
 8801950:	1021883a 	mov	r16,r2
 8801954:	1823883a 	mov	r17,r3
 8801958:	880373c0 	call	880373c <__subdf3>
 880195c:	d9000d17 	ldw	r4,52(sp)
 8801960:	b80b883a 	mov	r5,r23
 8801964:	180f883a 	mov	r7,r3
 8801968:	100d883a 	mov	r6,r2
 880196c:	880373c0 	call	880373c <__subdf3>
 8801970:	180b883a 	mov	r5,r3
 8801974:	a80f883a 	mov	r7,r21
 8801978:	01b70eb4 	movhi	r6,56378
 880197c:	3180ff44 	addi	r6,r6,1021
 8801980:	1009883a 	mov	r4,r2
 8801984:	88038300 	call	8803830 <__muldf3>
 8801988:	180f883a 	mov	r7,r3
 880198c:	880b883a 	mov	r5,r17
 8801990:	8009883a 	mov	r4,r16
 8801994:	100d883a 	mov	r6,r2
 8801998:	88037bc0 	call	88037bc <__adddf3>
 880199c:	d9402c17 	ldw	r5,176(sp)
 88019a0:	01022074 	movhi	r4,2177
 88019a4:	21064d04 	addi	r4,r4,6452
 88019a8:	2909883a 	add	r4,r5,r4
 88019ac:	22400117 	ldw	r9,4(r4)
 88019b0:	22000017 	ldw	r8,0(r4)
 88019b4:	180b883a 	mov	r5,r3
 88019b8:	480f883a 	mov	r7,r9
 88019bc:	400d883a 	mov	r6,r8
 88019c0:	1009883a 	mov	r4,r2
 88019c4:	88037bc0 	call	88037bc <__adddf3>
 88019c8:	d9000017 	ldw	r4,0(sp)
 88019cc:	182f883a 	mov	r23,r3
 88019d0:	102d883a 	mov	r22,r2
 88019d4:	88040f40 	call	88040f4 <__floatsidf>
 88019d8:	d9402c17 	ldw	r5,176(sp)
 88019dc:	01022074 	movhi	r4,2177
 88019e0:	21065104 	addi	r4,r4,6468
 88019e4:	b00d883a 	mov	r6,r22
 88019e8:	2911883a 	add	r8,r5,r4
 88019ec:	d9003717 	ldw	r4,220(sp)
 88019f0:	d9403817 	ldw	r5,224(sp)
 88019f4:	45000017 	ldw	r20,0(r8)
 88019f8:	d9002315 	stw	r4,140(sp)
 88019fc:	d9003817 	ldw	r4,224(sp)
 8801a00:	45400117 	ldw	r21,4(r8)
 8801a04:	b80f883a 	mov	r7,r23
 8801a08:	d9002415 	stw	r4,144(sp)
 8801a0c:	d9002317 	ldw	r4,140(sp)
 8801a10:	1021883a 	mov	r16,r2
 8801a14:	1823883a 	mov	r17,r3
 8801a18:	dd802115 	stw	r22,132(sp)
 8801a1c:	ddc02215 	stw	r23,136(sp)
 8801a20:	88037bc0 	call	88037bc <__adddf3>
 8801a24:	180b883a 	mov	r5,r3
 8801a28:	1009883a 	mov	r4,r2
 8801a2c:	a00d883a 	mov	r6,r20
 8801a30:	a80f883a 	mov	r7,r21
 8801a34:	88037bc0 	call	88037bc <__adddf3>
 8801a38:	180f883a 	mov	r7,r3
 8801a3c:	8009883a 	mov	r4,r16
 8801a40:	880b883a 	mov	r5,r17
 8801a44:	100d883a 	mov	r6,r2
 8801a48:	88037bc0 	call	88037bc <__adddf3>
 8801a4c:	180b883a 	mov	r5,r3
 8801a50:	0009883a 	mov	r4,zero
 8801a54:	800d883a 	mov	r6,r16
 8801a58:	880f883a 	mov	r7,r17
 8801a5c:	d9001b15 	stw	r4,108(sp)
 8801a60:	d8c01c15 	stw	r3,112(sp)
 8801a64:	880373c0 	call	880373c <__subdf3>
 8801a68:	180b883a 	mov	r5,r3
 8801a6c:	a80f883a 	mov	r7,r21
 8801a70:	1009883a 	mov	r4,r2
 8801a74:	a00d883a 	mov	r6,r20
 8801a78:	880373c0 	call	880373c <__subdf3>
 8801a7c:	d9802317 	ldw	r6,140(sp)
 8801a80:	d9c03817 	ldw	r7,224(sp)
 8801a84:	180b883a 	mov	r5,r3
 8801a88:	1009883a 	mov	r4,r2
 8801a8c:	880373c0 	call	880373c <__subdf3>
 8801a90:	d9002117 	ldw	r4,132(sp)
 8801a94:	1011883a 	mov	r8,r2
 8801a98:	1813883a 	mov	r9,r3
 8801a9c:	b80b883a 	mov	r5,r23
 8801aa0:	480f883a 	mov	r7,r9
 8801aa4:	400d883a 	mov	r6,r8
 8801aa8:	880373c0 	call	880373c <__subdf3>
 8801aac:	1823883a 	mov	r17,r3
 8801ab0:	d8c02517 	ldw	r3,148(sp)
 8801ab4:	1021883a 	mov	r16,r2
 8801ab8:	e0bfffc4 	addi	r2,fp,-1
 8801abc:	1884b03a 	or	r2,r3,r2
 8801ac0:	1000731e 	bne	r2,zero,8801c90 <__ieee754_pow+0xb88>
 8801ac4:	0009883a 	mov	r4,zero
 8801ac8:	016ffc34 	movhi	r5,49136
 8801acc:	d9001915 	stw	r4,100(sp)
 8801ad0:	d9401a15 	stw	r5,104(sp)
 8801ad4:	d9402917 	ldw	r5,164(sp)
 8801ad8:	d9002817 	ldw	r4,160(sp)
 8801adc:	0029883a 	mov	r20,zero
 8801ae0:	a00d883a 	mov	r6,r20
 8801ae4:	280f883a 	mov	r7,r5
 8801ae8:	2827883a 	mov	r19,r5
 8801aec:	880373c0 	call	880373c <__subdf3>
 8801af0:	d9001b17 	ldw	r4,108(sp)
 8801af4:	d9401c17 	ldw	r5,112(sp)
 8801af8:	180f883a 	mov	r7,r3
 8801afc:	100d883a 	mov	r6,r2
 8801b00:	88038300 	call	8803830 <__muldf3>
 8801b04:	d9c02917 	ldw	r7,164(sp)
 8801b08:	d9802817 	ldw	r6,160(sp)
 8801b0c:	880b883a 	mov	r5,r17
 8801b10:	8009883a 	mov	r4,r16
 8801b14:	1823883a 	mov	r17,r3
 8801b18:	1021883a 	mov	r16,r2
 8801b1c:	88038300 	call	8803830 <__muldf3>
 8801b20:	180f883a 	mov	r7,r3
 8801b24:	880b883a 	mov	r5,r17
 8801b28:	8009883a 	mov	r4,r16
 8801b2c:	100d883a 	mov	r6,r2
 8801b30:	88037bc0 	call	88037bc <__adddf3>
 8801b34:	d9401c17 	ldw	r5,112(sp)
 8801b38:	d9001b17 	ldw	r4,108(sp)
 8801b3c:	a00d883a 	mov	r6,r20
 8801b40:	980f883a 	mov	r7,r19
 8801b44:	1029883a 	mov	r20,r2
 8801b48:	182b883a 	mov	r21,r3
 8801b4c:	88038300 	call	8803830 <__muldf3>
 8801b50:	1025883a 	mov	r18,r2
 8801b54:	1827883a 	mov	r19,r3
 8801b58:	a009883a 	mov	r4,r20
 8801b5c:	a80b883a 	mov	r5,r21
 8801b60:	900d883a 	mov	r6,r18
 8801b64:	980f883a 	mov	r7,r19
 8801b68:	dd001d15 	stw	r20,116(sp)
 8801b6c:	dc801f15 	stw	r18,124(sp)
 8801b70:	dd401e15 	stw	r21,120(sp)
 8801b74:	dcc02015 	stw	r19,128(sp)
 8801b78:	88037bc0 	call	88037bc <__adddf3>
 8801b7c:	1823883a 	mov	r17,r3
 8801b80:	01102434 	movhi	r4,16528
 8801b84:	213fffc4 	addi	r4,r4,-1
 8801b88:	1021883a 	mov	r16,r2
 8801b8c:	182f883a 	mov	r23,r3
 8801b90:	dc401815 	stw	r17,96(sp)
 8801b94:	100b883a 	mov	r5,r2
 8801b98:	20c02c0e 	bge	r4,r3,8801c4c <__ieee754_pow+0xb44>
 8801b9c:	00afdc34 	movhi	r2,49008
 8801ba0:	1885883a 	add	r2,r3,r2
 8801ba4:	2884b03a 	or	r2,r5,r2
 8801ba8:	1001a626 	beq	r2,zero,8802244 <__ieee754_pow+0x113c>
 8801bac:	04220034 	movhi	r16,34816
 8801bb0:	841d6704 	addi	r16,r16,30108
 8801bb4:	045f8e34 	movhi	r17,32312
 8801bb8:	8c790f04 	addi	r17,r17,-7108
 8801bbc:	d9401a17 	ldw	r5,104(sp)
 8801bc0:	d9001917 	ldw	r4,100(sp)
 8801bc4:	800d883a 	mov	r6,r16
 8801bc8:	880f883a 	mov	r7,r17
 8801bcc:	88038300 	call	8803830 <__muldf3>
 8801bd0:	180b883a 	mov	r5,r3
 8801bd4:	800d883a 	mov	r6,r16
 8801bd8:	880f883a 	mov	r7,r17
 8801bdc:	1009883a 	mov	r4,r2
 8801be0:	88038300 	call	8803830 <__muldf3>
 8801be4:	003dc306 	br	88012f4 <__ieee754_pow+0x1ec>
 8801be8:	00b00434 	movhi	r2,49168
 8801bec:	9085883a 	add	r2,r18,r2
 8801bf0:	e084b03a 	or	r2,fp,r2
 8801bf4:	1000af1e 	bne	r2,zero,8801eb4 <__ieee754_pow+0xdac>
 8801bf8:	480f883a 	mov	r7,r9
 8801bfc:	4009883a 	mov	r4,r8
 8801c00:	480b883a 	mov	r5,r9
 8801c04:	400d883a 	mov	r6,r8
 8801c08:	003db406 	br	88012dc <__ieee754_pow+0x1d4>
 8801c0c:	00bffc34 	movhi	r2,65520
 8801c10:	18ff0084 	addi	r3,r3,-1022
 8801c14:	a0a9883a 	add	r20,r20,r2
 8801c18:	d8c00015 	stw	r3,0(sp)
 8801c1c:	0009883a 	mov	r4,zero
 8801c20:	04000234 	movhi	r16,8
 8801c24:	003e1406 	br	8801478 <__ieee754_pow+0x370>
 8801c28:	a80f883a 	mov	r7,r21
 8801c2c:	a009883a 	mov	r4,r20
 8801c30:	a80b883a 	mov	r5,r21
 8801c34:	a00d883a 	mov	r6,r20
 8801c38:	88038300 	call	8803830 <__muldf3>
 8801c3c:	180b883a 	mov	r5,r3
 8801c40:	d8802815 	stw	r2,160(sp)
 8801c44:	d9402915 	stw	r5,164(sp)
 8801c48:	003d5606 	br	88011a4 <__ieee754_pow+0x9c>
 8801c4c:	d9001817 	ldw	r4,96(sp)
 8801c50:	00a00034 	movhi	r2,32768
 8801c54:	10bfffc4 	addi	r2,r2,-1
 8801c58:	00d02474 	movhi	r3,16529
 8801c5c:	18f2ffc4 	addi	r3,r3,-13313
 8801c60:	20b8703a 	and	fp,r4,r2
 8801c64:	1f009d0e 	bge	r3,fp,8801edc <__ieee754_pow+0xdd4>
 8801c68:	008fdbf4 	movhi	r2,16239
 8801c6c:	108d0004 	addi	r2,r2,13312
 8801c70:	2085883a 	add	r2,r4,r2
 8801c74:	1144b03a 	or	r2,r2,r5
 8801c78:	1001c626 	beq	r2,zero,8802394 <__ieee754_pow+0x128c>
 8801c7c:	0430be74 	movhi	r16,49913
 8801c80:	843cd644 	addi	r16,r16,-3239
 8801c84:	04406974 	movhi	r17,421
 8801c88:	8c5b87c4 	addi	r17,r17,28191
 8801c8c:	003fcb06 	br	8801bbc <__ieee754_pow+0xab4>
 8801c90:	0005883a 	mov	r2,zero
 8801c94:	00cffc34 	movhi	r3,16368
 8801c98:	d8801915 	stw	r2,100(sp)
 8801c9c:	d8c01a15 	stw	r3,104(sp)
 8801ca0:	003f8c06 	br	8801ad4 <__ieee754_pow+0x9cc>
 8801ca4:	0005883a 	mov	r2,zero
 8801ca8:	00cffc34 	movhi	r3,16368
 8801cac:	180b883a 	mov	r5,r3
 8801cb0:	580f883a 	mov	r7,r11
 8801cb4:	1009883a 	mov	r4,r2
 8801cb8:	500d883a 	mov	r6,r10
 8801cbc:	8803bf40 	call	8803bf4 <__divdf3>
 8801cc0:	1011883a 	mov	r8,r2
 8801cc4:	1813883a 	mov	r9,r3
 8801cc8:	003d9506 	br	8801320 <__ieee754_pow+0x218>
 8801ccc:	008ffc34 	movhi	r2,16368
 8801cd0:	10bfff84 	addi	r2,r2,-2
 8801cd4:	14bdbb0e 	bge	r2,r18,88013c4 <__ieee754_pow+0x2bc>
 8801cd8:	008ffc34 	movhi	r2,16368
 8801cdc:	14bdae16 	blt	r2,r18,8801398 <__ieee754_pow+0x290>
 8801ce0:	580b883a 	mov	r5,r11
 8801ce4:	5009883a 	mov	r4,r10
 8801ce8:	000d883a 	mov	r6,zero
 8801cec:	100f883a 	mov	r7,r2
 8801cf0:	880373c0 	call	880373c <__subdf3>
 8801cf4:	1021883a 	mov	r16,r2
 8801cf8:	1823883a 	mov	r17,r3
 8801cfc:	00980034 	movhi	r2,24576
 8801d00:	00cffdf4 	movhi	r3,16375
 8801d04:	18c551c4 	addi	r3,r3,5447
 8801d08:	8009883a 	mov	r4,r16
 8801d0c:	880b883a 	mov	r5,r17
 8801d10:	180f883a 	mov	r7,r3
 8801d14:	100d883a 	mov	r6,r2
 8801d18:	88038300 	call	8803830 <__muldf3>
 8801d1c:	023e17b4 	movhi	r8,63582
 8801d20:	4237d104 	addi	r8,r8,-8380
 8801d24:	024f9574 	movhi	r9,15957
 8801d28:	4a6b82c4 	addi	r9,r9,-20981
 8801d2c:	480f883a 	mov	r7,r9
 8801d30:	400d883a 	mov	r6,r8
 8801d34:	8009883a 	mov	r4,r16
 8801d38:	880b883a 	mov	r5,r17
 8801d3c:	102d883a 	mov	r22,r2
 8801d40:	182f883a 	mov	r23,r3
 8801d44:	88038300 	call	8803830 <__muldf3>
 8801d48:	8009883a 	mov	r4,r16
 8801d4c:	880b883a 	mov	r5,r17
 8801d50:	800d883a 	mov	r6,r16
 8801d54:	880f883a 	mov	r7,r17
 8801d58:	d8802a15 	stw	r2,168(sp)
 8801d5c:	d8c02b15 	stw	r3,172(sp)
 8801d60:	88038300 	call	8803830 <__muldf3>
 8801d64:	0011883a 	mov	r8,zero
 8801d68:	026ff434 	movhi	r9,49104
 8801d6c:	480f883a 	mov	r7,r9
 8801d70:	8009883a 	mov	r4,r16
 8801d74:	880b883a 	mov	r5,r17
 8801d78:	400d883a 	mov	r6,r8
 8801d7c:	1029883a 	mov	r20,r2
 8801d80:	182b883a 	mov	r21,r3
 8801d84:	88038300 	call	8803830 <__muldf3>
 8801d88:	02155574 	movhi	r8,21845
 8801d8c:	42155544 	addi	r8,r8,21845
 8801d90:	024ff574 	movhi	r9,16341
 8801d94:	4a555544 	addi	r9,r9,21845
 8801d98:	480f883a 	mov	r7,r9
 8801d9c:	400d883a 	mov	r6,r8
 8801da0:	180b883a 	mov	r5,r3
 8801da4:	1009883a 	mov	r4,r2
 8801da8:	88037bc0 	call	88037bc <__adddf3>
 8801dac:	180f883a 	mov	r7,r3
 8801db0:	8009883a 	mov	r4,r16
 8801db4:	880b883a 	mov	r5,r17
 8801db8:	100d883a 	mov	r6,r2
 8801dbc:	88038300 	call	8803830 <__muldf3>
 8801dc0:	0011883a 	mov	r8,zero
 8801dc4:	024ff834 	movhi	r9,16352
 8801dc8:	480b883a 	mov	r5,r9
 8801dcc:	4009883a 	mov	r4,r8
 8801dd0:	180f883a 	mov	r7,r3
 8801dd4:	100d883a 	mov	r6,r2
 8801dd8:	880373c0 	call	880373c <__subdf3>
 8801ddc:	180f883a 	mov	r7,r3
 8801de0:	a80b883a 	mov	r5,r21
 8801de4:	a009883a 	mov	r4,r20
 8801de8:	100d883a 	mov	r6,r2
 8801dec:	88038300 	call	8803830 <__muldf3>
 8801df0:	02194b34 	movhi	r8,25900
 8801df4:	4220bf84 	addi	r8,r8,-32002
 8801df8:	026ffdf4 	movhi	r9,49143
 8801dfc:	4a4551c4 	addi	r9,r9,5447
 8801e00:	480f883a 	mov	r7,r9
 8801e04:	400d883a 	mov	r6,r8
 8801e08:	180b883a 	mov	r5,r3
 8801e0c:	1009883a 	mov	r4,r2
 8801e10:	88038300 	call	8803830 <__muldf3>
 8801e14:	d9402b17 	ldw	r5,172(sp)
 8801e18:	d9002a17 	ldw	r4,168(sp)
 8801e1c:	180f883a 	mov	r7,r3
 8801e20:	100d883a 	mov	r6,r2
 8801e24:	88037bc0 	call	88037bc <__adddf3>
 8801e28:	100d883a 	mov	r6,r2
 8801e2c:	b009883a 	mov	r4,r22
 8801e30:	b80b883a 	mov	r5,r23
 8801e34:	180f883a 	mov	r7,r3
 8801e38:	1021883a 	mov	r16,r2
 8801e3c:	1823883a 	mov	r17,r3
 8801e40:	88037bc0 	call	88037bc <__adddf3>
 8801e44:	180b883a 	mov	r5,r3
 8801e48:	0009883a 	mov	r4,zero
 8801e4c:	b00d883a 	mov	r6,r22
 8801e50:	b80f883a 	mov	r7,r23
 8801e54:	d9001b15 	stw	r4,108(sp)
 8801e58:	d8c01c15 	stw	r3,112(sp)
 8801e5c:	880373c0 	call	880373c <__subdf3>
 8801e60:	1011883a 	mov	r8,r2
 8801e64:	1813883a 	mov	r9,r3
 8801e68:	8009883a 	mov	r4,r16
 8801e6c:	880b883a 	mov	r5,r17
 8801e70:	003f0b06 	br	8801aa0 <__ieee754_pow+0x998>
 8801e74:	0005883a 	mov	r2,zero
 8801e78:	00d0d034 	movhi	r3,17216
 8801e7c:	580b883a 	mov	r5,r11
 8801e80:	5009883a 	mov	r4,r10
 8801e84:	180f883a 	mov	r7,r3
 8801e88:	100d883a 	mov	r6,r2
 8801e8c:	88038300 	call	8803830 <__muldf3>
 8801e90:	1015883a 	mov	r10,r2
 8801e94:	1825883a 	mov	r18,r3
 8801e98:	017ff2c4 	movi	r5,-53
 8801e9c:	003d6606 	br	8801438 <__ieee754_pow+0x330>
 8801ea0:	b03d300e 	bge	r22,zero,8801364 <__ieee754_pow+0x25c>
 8801ea4:	d9402917 	ldw	r5,164(sp)
 8801ea8:	28e0003c 	xorhi	r3,r5,32768
 8801eac:	d8c02915 	stw	r3,164(sp)
 8801eb0:	003cbc06 	br	88011a4 <__ieee754_pow+0x9c>
 8801eb4:	00800044 	movi	r2,1
 8801eb8:	e0bd1a1e 	bne	fp,r2,8801324 <__ieee754_pow+0x21c>
 8801ebc:	48e0003c 	xorhi	r3,r9,32768
 8801ec0:	da002815 	stw	r8,160(sp)
 8801ec4:	d8c02915 	stw	r3,164(sp)
 8801ec8:	003cb606 	br	88011a4 <__ieee754_pow+0x9c>
 8801ecc:	d9001817 	ldw	r4,96(sp)
 8801ed0:	00a00034 	movhi	r2,32768
 8801ed4:	10bfffc4 	addi	r2,r2,-1
 8801ed8:	20b8703a 	and	fp,r4,r2
 8801edc:	008ff834 	movhi	r2,16352
 8801ee0:	1700fc16 	blt	r2,fp,88022d4 <__ieee754_pow+0x11cc>
 8801ee4:	0039883a 	mov	fp,zero
 8801ee8:	d8001315 	stw	zero,76(sp)
 8801eec:	0025883a 	mov	r18,zero
 8801ef0:	0005883a 	mov	r2,zero
 8801ef4:	00cff9b4 	movhi	r3,16358
 8801ef8:	18cb90c4 	addi	r3,r3,11843
 8801efc:	9009883a 	mov	r4,r18
 8801f00:	b80b883a 	mov	r5,r23
 8801f04:	180f883a 	mov	r7,r3
 8801f08:	100d883a 	mov	r6,r2
 8801f0c:	88038300 	call	8803830 <__muldf3>
 8801f10:	d9c02017 	ldw	r7,128(sp)
 8801f14:	d9801f17 	ldw	r6,124(sp)
 8801f18:	9009883a 	mov	r4,r18
 8801f1c:	b80b883a 	mov	r5,r23
 8801f20:	b823883a 	mov	r17,r23
 8801f24:	102d883a 	mov	r22,r2
 8801f28:	182f883a 	mov	r23,r3
 8801f2c:	880373c0 	call	880373c <__subdf3>
 8801f30:	d9401e17 	ldw	r5,120(sp)
 8801f34:	d9001d17 	ldw	r4,116(sp)
 8801f38:	180f883a 	mov	r7,r3
 8801f3c:	100d883a 	mov	r6,r2
 8801f40:	880373c0 	call	880373c <__subdf3>
 8801f44:	023fbeb4 	movhi	r8,65274
 8801f48:	420e7bc4 	addi	r8,r8,14831
 8801f4c:	024ff9b4 	movhi	r9,16358
 8801f50:	4a4b9084 	addi	r9,r9,11842
 8801f54:	480f883a 	mov	r7,r9
 8801f58:	400d883a 	mov	r6,r8
 8801f5c:	180b883a 	mov	r5,r3
 8801f60:	1009883a 	mov	r4,r2
 8801f64:	88038300 	call	8803830 <__muldf3>
 8801f68:	02032a34 	movhi	r8,3240
 8801f6c:	421b0e44 	addi	r8,r8,27705
 8801f70:	026f8834 	movhi	r9,48672
 8801f74:	4a571844 	addi	r9,r9,23649
 8801f78:	480f883a 	mov	r7,r9
 8801f7c:	400d883a 	mov	r6,r8
 8801f80:	9009883a 	mov	r4,r18
 8801f84:	880b883a 	mov	r5,r17
 8801f88:	1021883a 	mov	r16,r2
 8801f8c:	1823883a 	mov	r17,r3
 8801f90:	88038300 	call	8803830 <__muldf3>
 8801f94:	180f883a 	mov	r7,r3
 8801f98:	880b883a 	mov	r5,r17
 8801f9c:	8009883a 	mov	r4,r16
 8801fa0:	100d883a 	mov	r6,r2
 8801fa4:	88037bc0 	call	88037bc <__adddf3>
 8801fa8:	100d883a 	mov	r6,r2
 8801fac:	b009883a 	mov	r4,r22
 8801fb0:	b80b883a 	mov	r5,r23
 8801fb4:	180f883a 	mov	r7,r3
 8801fb8:	1021883a 	mov	r16,r2
 8801fbc:	1823883a 	mov	r17,r3
 8801fc0:	88037bc0 	call	88037bc <__adddf3>
 8801fc4:	1009883a 	mov	r4,r2
 8801fc8:	180b883a 	mov	r5,r3
 8801fcc:	b00d883a 	mov	r6,r22
 8801fd0:	b80f883a 	mov	r7,r23
 8801fd4:	d8803915 	stw	r2,228(sp)
 8801fd8:	d8c03a15 	stw	r3,232(sp)
 8801fdc:	d8801115 	stw	r2,68(sp)
 8801fe0:	d8c01215 	stw	r3,72(sp)
 8801fe4:	880373c0 	call	880373c <__subdf3>
 8801fe8:	180f883a 	mov	r7,r3
 8801fec:	8009883a 	mov	r4,r16
 8801ff0:	880b883a 	mov	r5,r17
 8801ff4:	100d883a 	mov	r6,r2
 8801ff8:	880373c0 	call	880373c <__subdf3>
 8801ffc:	d9001117 	ldw	r4,68(sp)
 8802000:	d9403a17 	ldw	r5,232(sp)
 8802004:	1029883a 	mov	r20,r2
 8802008:	200d883a 	mov	r6,r4
 880200c:	280f883a 	mov	r7,r5
 8802010:	182b883a 	mov	r21,r3
 8802014:	88038300 	call	8803830 <__muldf3>
 8802018:	1021883a 	mov	r16,r2
 880201c:	1823883a 	mov	r17,r3
 8802020:	009caff4 	movhi	r2,29375
 8802024:	10a93404 	addi	r2,r2,-23344
 8802028:	00cf99b4 	movhi	r3,15974
 880202c:	18cdda44 	addi	r3,r3,14185
 8802030:	8009883a 	mov	r4,r16
 8802034:	880b883a 	mov	r5,r17
 8802038:	180f883a 	mov	r7,r3
 880203c:	100d883a 	mov	r6,r2
 8802040:	88038300 	call	8803830 <__muldf3>
 8802044:	023174b4 	movhi	r8,50642
 8802048:	421afc44 	addi	r8,r8,27633
 880204c:	024faf34 	movhi	r9,16060
 8802050:	4a6f5044 	addi	r9,r9,-17087
 8802054:	480f883a 	mov	r7,r9
 8802058:	400d883a 	mov	r6,r8
 880205c:	180b883a 	mov	r5,r3
 8802060:	1009883a 	mov	r4,r2
 8802064:	880373c0 	call	880373c <__subdf3>
 8802068:	180f883a 	mov	r7,r3
 880206c:	8009883a 	mov	r4,r16
 8802070:	880b883a 	mov	r5,r17
 8802074:	100d883a 	mov	r6,r2
 8802078:	88038300 	call	8803830 <__muldf3>
 880207c:	022bc9b4 	movhi	r8,44838
 8802080:	42378b04 	addi	r8,r8,-8660
 8802084:	024fc474 	movhi	r9,16145
 8802088:	4a559a84 	addi	r9,r9,22122
 880208c:	480f883a 	mov	r7,r9
 8802090:	400d883a 	mov	r6,r8
 8802094:	180b883a 	mov	r5,r3
 8802098:	1009883a 	mov	r4,r2
 880209c:	88037bc0 	call	88037bc <__adddf3>
 88020a0:	180f883a 	mov	r7,r3
 88020a4:	8009883a 	mov	r4,r16
 88020a8:	880b883a 	mov	r5,r17
 88020ac:	100d883a 	mov	r6,r2
 88020b0:	88038300 	call	8803830 <__muldf3>
 88020b4:	0205aff4 	movhi	r8,5823
 88020b8:	422f64c4 	addi	r8,r8,-17005
 88020bc:	024fd9f4 	movhi	r9,16231
 88020c0:	4a705b04 	addi	r9,r9,-16020
 88020c4:	480f883a 	mov	r7,r9
 88020c8:	400d883a 	mov	r6,r8
 88020cc:	180b883a 	mov	r5,r3
 88020d0:	1009883a 	mov	r4,r2
 88020d4:	880373c0 	call	880373c <__subdf3>
 88020d8:	180f883a 	mov	r7,r3
 88020dc:	8009883a 	mov	r4,r16
 88020e0:	880b883a 	mov	r5,r17
 88020e4:	100d883a 	mov	r6,r2
 88020e8:	88038300 	call	8803830 <__muldf3>
 88020ec:	02155574 	movhi	r8,21845
 88020f0:	42154f84 	addi	r8,r8,21822
 88020f4:	024ff174 	movhi	r9,16325
 88020f8:	4a555544 	addi	r9,r9,21845
 88020fc:	480f883a 	mov	r7,r9
 8802100:	400d883a 	mov	r6,r8
 8802104:	180b883a 	mov	r5,r3
 8802108:	1009883a 	mov	r4,r2
 880210c:	88037bc0 	call	88037bc <__adddf3>
 8802110:	180f883a 	mov	r7,r3
 8802114:	8009883a 	mov	r4,r16
 8802118:	880b883a 	mov	r5,r17
 880211c:	100d883a 	mov	r6,r2
 8802120:	88038300 	call	8803830 <__muldf3>
 8802124:	d9001117 	ldw	r4,68(sp)
 8802128:	d9403a17 	ldw	r5,232(sp)
 880212c:	180f883a 	mov	r7,r3
 8802130:	100d883a 	mov	r6,r2
 8802134:	880373c0 	call	880373c <__subdf3>
 8802138:	d9001117 	ldw	r4,68(sp)
 880213c:	d9403a17 	ldw	r5,232(sp)
 8802140:	100d883a 	mov	r6,r2
 8802144:	180f883a 	mov	r7,r3
 8802148:	1021883a 	mov	r16,r2
 880214c:	1823883a 	mov	r17,r3
 8802150:	88038300 	call	8803830 <__muldf3>
 8802154:	0011883a 	mov	r8,zero
 8802158:	02500034 	movhi	r9,16384
 880215c:	480f883a 	mov	r7,r9
 8802160:	400d883a 	mov	r6,r8
 8802164:	8009883a 	mov	r4,r16
 8802168:	880b883a 	mov	r5,r17
 880216c:	1021883a 	mov	r16,r2
 8802170:	1823883a 	mov	r17,r3
 8802174:	880373c0 	call	880373c <__subdf3>
 8802178:	180f883a 	mov	r7,r3
 880217c:	880b883a 	mov	r5,r17
 8802180:	8009883a 	mov	r4,r16
 8802184:	100d883a 	mov	r6,r2
 8802188:	8803bf40 	call	8803bf4 <__divdf3>
 880218c:	d9001117 	ldw	r4,68(sp)
 8802190:	d9403a17 	ldw	r5,232(sp)
 8802194:	a00d883a 	mov	r6,r20
 8802198:	a80f883a 	mov	r7,r21
 880219c:	1025883a 	mov	r18,r2
 88021a0:	1827883a 	mov	r19,r3
 88021a4:	88038300 	call	8803830 <__muldf3>
 88021a8:	180f883a 	mov	r7,r3
 88021ac:	a009883a 	mov	r4,r20
 88021b0:	a80b883a 	mov	r5,r21
 88021b4:	100d883a 	mov	r6,r2
 88021b8:	88037bc0 	call	88037bc <__adddf3>
 88021bc:	180f883a 	mov	r7,r3
 88021c0:	980b883a 	mov	r5,r19
 88021c4:	9009883a 	mov	r4,r18
 88021c8:	100d883a 	mov	r6,r2
 88021cc:	880373c0 	call	880373c <__subdf3>
 88021d0:	d9801117 	ldw	r6,68(sp)
 88021d4:	d9c03a17 	ldw	r7,232(sp)
 88021d8:	180b883a 	mov	r5,r3
 88021dc:	1009883a 	mov	r4,r2
 88021e0:	880373c0 	call	880373c <__subdf3>
 88021e4:	0011883a 	mov	r8,zero
 88021e8:	024ffc34 	movhi	r9,16368
 88021ec:	480b883a 	mov	r5,r9
 88021f0:	180f883a 	mov	r7,r3
 88021f4:	4009883a 	mov	r4,r8
 88021f8:	100d883a 	mov	r6,r2
 88021fc:	880373c0 	call	880373c <__subdf3>
 8802200:	100b883a 	mov	r5,r2
 8802204:	d8801317 	ldw	r2,76(sp)
 8802208:	10d5883a 	add	r10,r2,r3
 880220c:	5005d53a 	srai	r2,r10,20
 8802210:	0080720e 	bge	zero,r2,88023dc <__ieee754_pow+0x12d4>
 8802214:	2811883a 	mov	r8,r5
 8802218:	5013883a 	mov	r9,r10
 880221c:	d9c01a17 	ldw	r7,104(sp)
 8802220:	d9801917 	ldw	r6,100(sp)
 8802224:	480b883a 	mov	r5,r9
 8802228:	4009883a 	mov	r4,r8
 880222c:	003e8206 	br	8801c38 <__ieee754_pow+0xb30>
 8802230:	0009883a 	mov	r4,zero
 8802234:	800b883a 	mov	r5,r16
 8802238:	a80f883a 	mov	r7,r21
 880223c:	a00d883a 	mov	r6,r20
 8802240:	003c2b06 	br	88012f0 <__ieee754_pow+0x1e8>
 8802244:	d9001d17 	ldw	r4,116(sp)
 8802248:	00994b34 	movhi	r2,25900
 880224c:	10a0bf84 	addi	r2,r2,-32002
 8802250:	00cf25f4 	movhi	r3,15511
 8802254:	18c551c4 	addi	r3,r3,5447
 8802258:	a80b883a 	mov	r5,r21
 880225c:	180f883a 	mov	r7,r3
 8802260:	100d883a 	mov	r6,r2
 8802264:	88037bc0 	call	88037bc <__adddf3>
 8802268:	d9801f17 	ldw	r6,124(sp)
 880226c:	880b883a 	mov	r5,r17
 8802270:	8009883a 	mov	r4,r16
 8802274:	980f883a 	mov	r7,r19
 8802278:	1021883a 	mov	r16,r2
 880227c:	1823883a 	mov	r17,r3
 8802280:	880373c0 	call	880373c <__subdf3>
 8802284:	180f883a 	mov	r7,r3
 8802288:	880b883a 	mov	r5,r17
 880228c:	8009883a 	mov	r4,r16
 8802290:	100d883a 	mov	r6,r2
 8802294:	8803f5c0 	call	8803f5c <__gtdf2>
 8802298:	00bf0c0e 	bge	zero,r2,8801ecc <__ieee754_pow+0xdc4>
 880229c:	04220034 	movhi	r16,34816
 88022a0:	841d6704 	addi	r16,r16,30108
 88022a4:	045f8e34 	movhi	r17,32312
 88022a8:	8c790f04 	addi	r17,r17,-7108
 88022ac:	d9401a17 	ldw	r5,104(sp)
 88022b0:	d9001917 	ldw	r4,100(sp)
 88022b4:	800d883a 	mov	r6,r16
 88022b8:	880f883a 	mov	r7,r17
 88022bc:	88038300 	call	8803830 <__muldf3>
 88022c0:	180b883a 	mov	r5,r3
 88022c4:	800d883a 	mov	r6,r16
 88022c8:	880f883a 	mov	r7,r17
 88022cc:	1009883a 	mov	r4,r2
 88022d0:	003e5906 	br	8801c38 <__ieee754_pow+0xb30>
 88022d4:	e005d53a 	srai	r2,fp,20
 88022d8:	01800434 	movhi	r6,16
 88022dc:	d9401817 	ldw	r5,96(sp)
 88022e0:	10bf0084 	addi	r2,r2,-1022
 88022e4:	308dd83a 	sra	r6,r6,r2
 88022e8:	02000434 	movhi	r8,16
 88022ec:	423fffc4 	addi	r8,r8,-1
 88022f0:	0005883a 	mov	r2,zero
 88022f4:	298d883a 	add	r6,r5,r6
 88022f8:	318b883a 	add	r5,r6,r6
 88022fc:	320e703a 	and	r7,r6,r8
 8802300:	1013883a 	mov	r9,r2
 8802304:	280ad57a 	srli	r5,r5,21
 8802308:	d8801817 	ldw	r2,96(sp)
 880230c:	01000504 	movi	r4,20
 8802310:	297f0044 	addi	r5,r5,-1023
 8802314:	4151d83a 	sra	r8,r8,r5
 8802318:	39c00434 	orhi	r7,r7,16
 880231c:	2149c83a 	sub	r4,r4,r5
 8802320:	0210303a 	nor	r8,zero,r8
 8802324:	3939d83a 	sra	fp,r7,r4
 8802328:	320e703a 	and	r7,r6,r8
 880232c:	10002916 	blt	r2,zero,88023d4 <__ieee754_pow+0x12cc>
 8802330:	d9402017 	ldw	r5,128(sp)
 8802334:	d9001f17 	ldw	r4,124(sp)
 8802338:	480d883a 	mov	r6,r9
 880233c:	880373c0 	call	880373c <__subdf3>
 8802340:	180b883a 	mov	r5,r3
 8802344:	d9402015 	stw	r5,128(sp)
 8802348:	280f883a 	mov	r7,r5
 880234c:	d9001d17 	ldw	r4,116(sp)
 8802350:	d9401e17 	ldw	r5,120(sp)
 8802354:	1007883a 	mov	r3,r2
 8802358:	180d883a 	mov	r6,r3
 880235c:	d8801f15 	stw	r2,124(sp)
 8802360:	88037bc0 	call	88037bc <__adddf3>
 8802364:	180b883a 	mov	r5,r3
 8802368:	e006953a 	slli	r3,fp,20
 880236c:	282f883a 	mov	r23,r5
 8802370:	d8c01315 	stw	r3,76(sp)
 8802374:	003edd06 	br	8801eec <__ieee754_pow+0xde4>
 8802378:	383bc81e 	bne	r7,zero,880129c <__ieee754_pow+0x194>
 880237c:	28c5c83a 	sub	r2,r5,r3
 8802380:	8087d83a 	sra	r3,r16,r2
 8802384:	1884983a 	sll	r2,r3,r2
 8802388:	80801b26 	beq	r16,r2,88023f8 <__ieee754_pow+0x12f0>
 880238c:	0039883a 	mov	fp,zero
 8802390:	003b9d06 	br	8801208 <__ieee754_pow+0x100>
 8802394:	d9801f17 	ldw	r6,124(sp)
 8802398:	8009883a 	mov	r4,r16
 880239c:	880b883a 	mov	r5,r17
 88023a0:	980f883a 	mov	r7,r19
 88023a4:	880373c0 	call	880373c <__subdf3>
 88023a8:	d9001d17 	ldw	r4,116(sp)
 88023ac:	a80b883a 	mov	r5,r21
 88023b0:	180f883a 	mov	r7,r3
 88023b4:	100d883a 	mov	r6,r2
 88023b8:	880406c0 	call	880406c <__ledf2>
 88023bc:	00bfc516 	blt	zero,r2,88022d4 <__ieee754_pow+0x11cc>
 88023c0:	0430be74 	movhi	r16,49913
 88023c4:	843cd644 	addi	r16,r16,-3239
 88023c8:	04406974 	movhi	r17,421
 88023cc:	8c5b87c4 	addi	r17,r17,28191
 88023d0:	003fb606 	br	88022ac <__ieee754_pow+0x11a4>
 88023d4:	0739c83a 	sub	fp,zero,fp
 88023d8:	003fd506 	br	8802330 <__ieee754_pow+0x1228>
 88023dc:	2809883a 	mov	r4,r5
 88023e0:	e00d883a 	mov	r6,fp
 88023e4:	180b883a 	mov	r5,r3
 88023e8:	880295c0 	call	880295c <scalbn>
 88023ec:	1011883a 	mov	r8,r2
 88023f0:	1813883a 	mov	r9,r3
 88023f4:	003f8906 	br	880221c <__ieee754_pow+0x1114>
 88023f8:	18c0004c 	andi	r3,r3,1
 88023fc:	00800084 	movi	r2,2
 8802400:	10f9c83a 	sub	fp,r2,r3
 8802404:	003b8006 	br	8801208 <__ieee754_pow+0x100>

08802408 <__ieee754_sqrt>:
 8802408:	defffd04 	addi	sp,sp,-12
 880240c:	dc000015 	stw	r16,0(sp)
 8802410:	009ffc34 	movhi	r2,32752
 8802414:	2021883a 	mov	r16,r4
 8802418:	291ffc2c 	andhi	r4,r5,32752
 880241c:	dc400115 	stw	r17,4(sp)
 8802420:	dfc00215 	stw	ra,8(sp)
 8802424:	2823883a 	mov	r17,r5
 8802428:	280f883a 	mov	r7,r5
 880242c:	2807883a 	mov	r3,r5
 8802430:	8011883a 	mov	r8,r16
 8802434:	20807d26 	beq	r4,r2,880262c <__ieee754_sqrt+0x224>
 8802438:	01408d0e 	bge	zero,r5,8802670 <__ieee754_sqrt+0x268>
 880243c:	380dd53a 	srai	r6,r7,20
 8802440:	3000131e 	bne	r6,zero,8802490 <__ieee754_sqrt+0x88>
 8802444:	1800041e 	bne	r3,zero,8802458 <__ieee754_sqrt+0x50>
 8802448:	400ed2fa 	srli	r7,r8,11
 880244c:	31bffac4 	addi	r6,r6,-21
 8802450:	4010957a 	slli	r8,r8,21
 8802454:	383ffc26 	beq	r7,zero,8802448 <__ieee754_sqrt+0x40>
 8802458:	3880042c 	andhi	r2,r7,16
 880245c:	1000991e 	bne	r2,zero,88026c4 <__ieee754_sqrt+0x2bc>
 8802460:	0009883a 	mov	r4,zero
 8802464:	39cf883a 	add	r7,r7,r7
 8802468:	3880042c 	andhi	r2,r7,16
 880246c:	21000044 	addi	r4,r4,1
 8802470:	103ffc26 	beq	r2,zero,8802464 <__ieee754_sqrt+0x5c>
 8802474:	00800804 	movi	r2,32
 8802478:	1105c83a 	sub	r2,r2,r4
 880247c:	4086d83a 	srl	r3,r8,r2
 8802480:	4110983a 	sll	r8,r8,r4
 8802484:	3105c83a 	sub	r2,r6,r4
 8802488:	38ceb03a 	or	r7,r7,r3
 880248c:	11800044 	addi	r6,r2,1
 8802490:	31bf0044 	addi	r6,r6,-1023
 8802494:	30c0004c 	andi	r3,r6,1
 8802498:	00800434 	movhi	r2,16
 880249c:	10bfffc4 	addi	r2,r2,-1
 88024a0:	3884703a 	and	r2,r7,r2
 88024a4:	1807003a 	cmpeq	r3,r3,zero
 88024a8:	11000434 	orhi	r4,r2,16
 88024ac:	18005426 	beq	r3,zero,8802600 <__ieee754_sqrt+0x1f8>
 88024b0:	4004d7fa 	srli	r2,r8,31
 88024b4:	4207883a 	add	r3,r8,r8
 88024b8:	02800834 	movhi	r10,32
 88024bc:	1105883a 	add	r2,r2,r4
 88024c0:	2089883a 	add	r4,r4,r2
 88024c4:	0011883a 	mov	r8,zero
 88024c8:	000b883a 	mov	r5,zero
 88024cc:	0013883a 	mov	r9,zero
 88024d0:	02c00584 	movi	r11,22
 88024d4:	520f883a 	add	r7,r10,r8
 88024d8:	1804d7fa 	srli	r2,r3,31
 88024dc:	4a400044 	addi	r9,r9,1
 88024e0:	18c7883a 	add	r3,r3,r3
 88024e4:	21c00316 	blt	r4,r7,88024f4 <__ieee754_sqrt+0xec>
 88024e8:	21c9c83a 	sub	r4,r4,r7
 88024ec:	2a8b883a 	add	r5,r5,r10
 88024f0:	51d1883a 	add	r8,r10,r7
 88024f4:	1105883a 	add	r2,r2,r4
 88024f8:	5014d07a 	srli	r10,r10,1
 88024fc:	2089883a 	add	r4,r4,r2
 8802500:	4afff41e 	bne	r9,r11,88024d4 <__ieee754_sqrt+0xcc>
 8802504:	02600034 	movhi	r9,32768
 8802508:	0017883a 	mov	r11,zero
 880250c:	0019883a 	mov	r12,zero
 8802510:	0015883a 	mov	r10,zero
 8802514:	4821883a 	mov	r16,r9
 8802518:	03c00804 	movi	r15,32
 880251c:	00000806 	br	8802540 <__ieee754_sqrt+0x138>
 8802520:	22003426 	beq	r4,r8,88025f4 <__ieee754_sqrt+0x1ec>
 8802524:	1804d7fa 	srli	r2,r3,31
 8802528:	52800044 	addi	r10,r10,1
 880252c:	18c7883a 	add	r3,r3,r3
 8802530:	1105883a 	add	r2,r2,r4
 8802534:	2089883a 	add	r4,r4,r2
 8802538:	4812d07a 	srli	r9,r9,1
 880253c:	53c01326 	beq	r10,r15,880258c <__ieee754_sqrt+0x184>
 8802540:	4acf883a 	add	r7,r9,r11
 8802544:	413ff60e 	bge	r8,r4,8802520 <__ieee754_sqrt+0x118>
 8802548:	38a0002c 	andhi	r2,r7,32768
 880254c:	3a57883a 	add	r11,r7,r9
 8802550:	14002426 	beq	r2,r16,88025e4 <__ieee754_sqrt+0x1dc>
 8802554:	4005883a 	mov	r2,r8
 8802558:	2209c83a 	sub	r4,r4,r8
 880255c:	19c0012e 	bgeu	r3,r7,8802564 <__ieee754_sqrt+0x15c>
 8802560:	213fffc4 	addi	r4,r4,-1
 8802564:	19c7c83a 	sub	r3,r3,r7
 8802568:	1011883a 	mov	r8,r2
 880256c:	1804d7fa 	srli	r2,r3,31
 8802570:	52800044 	addi	r10,r10,1
 8802574:	6259883a 	add	r12,r12,r9
 8802578:	1105883a 	add	r2,r2,r4
 880257c:	18c7883a 	add	r3,r3,r3
 8802580:	2089883a 	add	r4,r4,r2
 8802584:	4812d07a 	srli	r9,r9,1
 8802588:	53ffed1e 	bne	r10,r15,8802540 <__ieee754_sqrt+0x138>
 880258c:	20c4b03a 	or	r2,r4,r3
 8802590:	1000201e 	bne	r2,zero,8802614 <__ieee754_sqrt+0x20c>
 8802594:	600ed07a 	srli	r7,r12,1
 8802598:	2880004c 	andi	r2,r5,1
 880259c:	1005003a 	cmpeq	r2,r2,zero
 88025a0:	1000011e 	bne	r2,zero,88025a8 <__ieee754_sqrt+0x1a0>
 88025a4:	39e00034 	orhi	r7,r7,32768
 88025a8:	300dd07a 	srai	r6,r6,1
 88025ac:	280bd07a 	srai	r5,r5,1
 88025b0:	010ff834 	movhi	r4,16352
 88025b4:	300c953a 	slli	r6,r6,20
 88025b8:	290b883a 	add	r5,r5,r4
 88025bc:	3821883a 	mov	r16,r7
 88025c0:	299d883a 	add	r14,r5,r6
 88025c4:	7023883a 	mov	r17,r14
 88025c8:	8005883a 	mov	r2,r16
 88025cc:	8807883a 	mov	r3,r17
 88025d0:	dfc00217 	ldw	ra,8(sp)
 88025d4:	dc400117 	ldw	r17,4(sp)
 88025d8:	dc000017 	ldw	r16,0(sp)
 88025dc:	dec00304 	addi	sp,sp,12
 88025e0:	f800283a 	ret
 88025e4:	5884703a 	and	r2,r11,r2
 88025e8:	103fda1e 	bne	r2,zero,8802554 <__ieee754_sqrt+0x14c>
 88025ec:	40800044 	addi	r2,r8,1
 88025f0:	003fd906 	br	8802558 <__ieee754_sqrt+0x150>
 88025f4:	19ffd42e 	bgeu	r3,r7,8802548 <__ieee754_sqrt+0x140>
 88025f8:	2011883a 	mov	r8,r4
 88025fc:	003fc906 	br	8802524 <__ieee754_sqrt+0x11c>
 8802600:	4004d7fa 	srli	r2,r8,31
 8802604:	4211883a 	add	r8,r8,r8
 8802608:	1105883a 	add	r2,r2,r4
 880260c:	2089883a 	add	r4,r4,r2
 8802610:	003fa706 	br	88024b0 <__ieee754_sqrt+0xa8>
 8802614:	00bfffc4 	movi	r2,-1
 8802618:	60802726 	beq	r12,r2,88026b8 <__ieee754_sqrt+0x2b0>
 880261c:	6080004c 	andi	r2,r12,1
 8802620:	6085883a 	add	r2,r12,r2
 8802624:	100ed07a 	srli	r7,r2,1
 8802628:	003fdb06 	br	8802598 <__ieee754_sqrt+0x190>
 880262c:	8009883a 	mov	r4,r16
 8802630:	800d883a 	mov	r6,r16
 8802634:	88038300 	call	8803830 <__muldf3>
 8802638:	180f883a 	mov	r7,r3
 880263c:	880b883a 	mov	r5,r17
 8802640:	8009883a 	mov	r4,r16
 8802644:	100d883a 	mov	r6,r2
 8802648:	88037bc0 	call	88037bc <__adddf3>
 880264c:	1021883a 	mov	r16,r2
 8802650:	1823883a 	mov	r17,r3
 8802654:	8005883a 	mov	r2,r16
 8802658:	8807883a 	mov	r3,r17
 880265c:	dfc00217 	ldw	ra,8(sp)
 8802660:	dc400117 	ldw	r17,4(sp)
 8802664:	dc000017 	ldw	r16,0(sp)
 8802668:	dec00304 	addi	sp,sp,12
 880266c:	f800283a 	ret
 8802670:	00a00034 	movhi	r2,32768
 8802674:	10bfffc4 	addi	r2,r2,-1
 8802678:	2884703a 	and	r2,r5,r2
 880267c:	8084b03a 	or	r2,r16,r2
 8802680:	103fd126 	beq	r2,zero,88025c8 <__ieee754_sqrt+0x1c0>
 8802684:	283f6d26 	beq	r5,zero,880243c <__ieee754_sqrt+0x34>
 8802688:	280f883a 	mov	r7,r5
 880268c:	8009883a 	mov	r4,r16
 8802690:	800d883a 	mov	r6,r16
 8802694:	880373c0 	call	880373c <__subdf3>
 8802698:	1009883a 	mov	r4,r2
 880269c:	180b883a 	mov	r5,r3
 88026a0:	100d883a 	mov	r6,r2
 88026a4:	180f883a 	mov	r7,r3
 88026a8:	8803bf40 	call	8803bf4 <__divdf3>
 88026ac:	1021883a 	mov	r16,r2
 88026b0:	1823883a 	mov	r17,r3
 88026b4:	003fc406 	br	88025c8 <__ieee754_sqrt+0x1c0>
 88026b8:	29400044 	addi	r5,r5,1
 88026bc:	000f883a 	mov	r7,zero
 88026c0:	003fb506 	br	8802598 <__ieee754_sqrt+0x190>
 88026c4:	0009883a 	mov	r4,zero
 88026c8:	00800804 	movi	r2,32
 88026cc:	003f6b06 	br	880247c <__ieee754_sqrt+0x74>

088026d0 <fabs>:
 88026d0:	01e00034 	movhi	r7,32768
 88026d4:	39ffffc4 	addi	r7,r7,-1
 88026d8:	394e703a 	and	r7,r7,r5
 88026dc:	2005883a 	mov	r2,r4
 88026e0:	3807883a 	mov	r3,r7
 88026e4:	f800283a 	ret

088026e8 <finite>:
 88026e8:	00a00034 	movhi	r2,32768
 88026ec:	10bfffc4 	addi	r2,r2,-1
 88026f0:	2884703a 	and	r2,r5,r2
 88026f4:	01600434 	movhi	r5,32784
 88026f8:	1145883a 	add	r2,r2,r5
 88026fc:	1004d7fa 	srli	r2,r2,31
 8802700:	f800283a 	ret

08802704 <__isnand>:
 8802704:	200d883a 	mov	r6,r4
 8802708:	0109c83a 	sub	r4,zero,r4
 880270c:	2188b03a 	or	r4,r4,r6
 8802710:	2008d7fa 	srli	r4,r4,31
 8802714:	00a00034 	movhi	r2,32768
 8802718:	10bfffc4 	addi	r2,r2,-1
 880271c:	1144703a 	and	r2,r2,r5
 8802720:	2088b03a 	or	r4,r4,r2
 8802724:	009ffc34 	movhi	r2,32752
 8802728:	1105c83a 	sub	r2,r2,r4
 880272c:	1004d7fa 	srli	r2,r2,31
 8802730:	f800283a 	ret

08802734 <matherr>:
 8802734:	0005883a 	mov	r2,zero
 8802738:	f800283a 	ret

0880273c <nan>:
 880273c:	015ffe34 	movhi	r5,32760
 8802740:	0005883a 	mov	r2,zero
 8802744:	2807883a 	mov	r3,r5
 8802748:	f800283a 	ret

0880274c <rint>:
 880274c:	2015883a 	mov	r10,r4
 8802750:	2809d53a 	srai	r4,r5,20
 8802754:	defff904 	addi	sp,sp,-28
 8802758:	034004c4 	movi	r13,19
 880275c:	2101ffcc 	andi	r4,r4,2047
 8802760:	227f0044 	addi	r9,r4,-1023
 8802764:	dc800415 	stw	r18,16(sp)
 8802768:	dfc00615 	stw	ra,24(sp)
 880276c:	dcc00515 	stw	r19,20(sp)
 8802770:	dc400315 	stw	r17,12(sp)
 8802774:	dc000215 	stw	r16,8(sp)
 8802778:	2817883a 	mov	r11,r5
 880277c:	500d883a 	mov	r6,r10
 8802780:	2824d7fa 	srli	r18,r5,31
 8802784:	6a403016 	blt	r13,r9,8802848 <rint+0xfc>
 8802788:	48004916 	blt	r9,zero,88028b0 <rint+0x164>
 880278c:	00800434 	movhi	r2,16
 8802790:	10bfffc4 	addi	r2,r2,-1
 8802794:	1247d83a 	sra	r3,r2,r9
 8802798:	2809883a 	mov	r4,r5
 880279c:	1944703a 	and	r2,r3,r5
 88027a0:	5084b03a 	or	r2,r10,r2
 88027a4:	10001f26 	beq	r2,zero,8802824 <rint+0xd8>
 88027a8:	180ad07a 	srli	r5,r3,1
 88027ac:	5944703a 	and	r2,r11,r5
 88027b0:	5084b03a 	or	r2,r10,r2
 88027b4:	10000626 	beq	r2,zero,88027d0 <rint+0x84>
 88027b8:	4b406626 	beq	r9,r13,8802954 <rint+0x208>
 88027bc:	00c000b4 	movhi	r3,2
 88027c0:	1a47d83a 	sra	r3,r3,r9
 88027c4:	0144303a 	nor	r2,zero,r5
 88027c8:	5884703a 	and	r2,r11,r2
 88027cc:	10c8b03a 	or	r4,r2,r3
 88027d0:	900690fa 	slli	r3,r18,3
 88027d4:	00822074 	movhi	r2,2177
 88027d8:	10865504 	addi	r2,r2,6484
 88027dc:	200f883a 	mov	r7,r4
 88027e0:	1887883a 	add	r3,r3,r2
 88027e4:	1c000017 	ldw	r16,0(r3)
 88027e8:	1c400117 	ldw	r17,4(r3)
 88027ec:	8009883a 	mov	r4,r16
 88027f0:	880b883a 	mov	r5,r17
 88027f4:	88037bc0 	call	88037bc <__adddf3>
 88027f8:	d8800015 	stw	r2,0(sp)
 88027fc:	d8c00115 	stw	r3,4(sp)
 8802800:	d8800017 	ldw	r2,0(sp)
 8802804:	d8c00117 	ldw	r3,4(sp)
 8802808:	880f883a 	mov	r7,r17
 880280c:	800d883a 	mov	r6,r16
 8802810:	180b883a 	mov	r5,r3
 8802814:	1009883a 	mov	r4,r2
 8802818:	880373c0 	call	880373c <__subdf3>
 880281c:	1015883a 	mov	r10,r2
 8802820:	1817883a 	mov	r11,r3
 8802824:	5005883a 	mov	r2,r10
 8802828:	5807883a 	mov	r3,r11
 880282c:	dfc00617 	ldw	ra,24(sp)
 8802830:	dcc00517 	ldw	r19,20(sp)
 8802834:	dc800417 	ldw	r18,16(sp)
 8802838:	dc400317 	ldw	r17,12(sp)
 880283c:	dc000217 	ldw	r16,8(sp)
 8802840:	dec00704 	addi	sp,sp,28
 8802844:	f800283a 	ret
 8802848:	00800cc4 	movi	r2,51
 880284c:	12400f16 	blt	r2,r9,880288c <rint+0x140>
 8802850:	213efb44 	addi	r4,r4,-1043
 8802854:	00bfffc4 	movi	r2,-1
 8802858:	1104d83a 	srl	r2,r2,r4
 880285c:	5086703a 	and	r3,r10,r2
 8802860:	183ff026 	beq	r3,zero,8802824 <rint+0xd8>
 8802864:	100ad07a 	srli	r5,r2,1
 8802868:	5144703a 	and	r2,r10,r5
 880286c:	10000526 	beq	r2,zero,8802884 <rint+0x138>
 8802870:	00d00034 	movhi	r3,16384
 8802874:	1907d83a 	sra	r3,r3,r4
 8802878:	0144303a 	nor	r2,zero,r5
 880287c:	5084703a 	and	r2,r10,r2
 8802880:	10ccb03a 	or	r6,r2,r3
 8802884:	5809883a 	mov	r4,r11
 8802888:	003fd106 	br	88027d0 <rint+0x84>
 880288c:	00810004 	movi	r2,1024
 8802890:	48bfe41e 	bne	r9,r2,8802824 <rint+0xd8>
 8802894:	5009883a 	mov	r4,r10
 8802898:	500d883a 	mov	r6,r10
 880289c:	280f883a 	mov	r7,r5
 88028a0:	88037bc0 	call	88037bc <__adddf3>
 88028a4:	1015883a 	mov	r10,r2
 88028a8:	1817883a 	mov	r11,r3
 88028ac:	003fdd06 	br	8802824 <rint+0xd8>
 88028b0:	04e00034 	movhi	r19,32768
 88028b4:	9cffffc4 	addi	r19,r19,-1
 88028b8:	2cc4703a 	and	r2,r5,r19
 88028bc:	5084b03a 	or	r2,r10,r2
 88028c0:	103fd826 	beq	r2,zero,8802824 <rint+0xd8>
 88028c4:	00c00434 	movhi	r3,16
 88028c8:	18ffffc4 	addi	r3,r3,-1
 88028cc:	28c6703a 	and	r3,r5,r3
 88028d0:	50c6b03a 	or	r3,r10,r3
 88028d4:	00cdc83a 	sub	r6,zero,r3
 88028d8:	900a90fa 	slli	r5,r18,3
 88028dc:	1986b03a 	or	r3,r3,r6
 88028e0:	01022074 	movhi	r4,2177
 88028e4:	21065504 	addi	r4,r4,6484
 88028e8:	1806d33a 	srli	r3,r3,12
 88028ec:	290b883a 	add	r5,r5,r4
 88028f0:	2c000017 	ldw	r16,0(r5)
 88028f4:	2c400117 	ldw	r17,4(r5)
 88028f8:	593fffac 	andhi	r4,r11,65534
 88028fc:	18c0022c 	andhi	r3,r3,8
 8802900:	1906b03a 	or	r3,r3,r4
 8802904:	500d883a 	mov	r6,r10
 8802908:	180f883a 	mov	r7,r3
 880290c:	8009883a 	mov	r4,r16
 8802910:	880b883a 	mov	r5,r17
 8802914:	88037bc0 	call	88037bc <__adddf3>
 8802918:	d8800015 	stw	r2,0(sp)
 880291c:	d8c00115 	stw	r3,4(sp)
 8802920:	d8800017 	ldw	r2,0(sp)
 8802924:	d8c00117 	ldw	r3,4(sp)
 8802928:	880f883a 	mov	r7,r17
 880292c:	800d883a 	mov	r6,r16
 8802930:	180b883a 	mov	r5,r3
 8802934:	1009883a 	mov	r4,r2
 8802938:	880373c0 	call	880373c <__subdf3>
 880293c:	901297fa 	slli	r9,r18,31
 8802940:	98d0703a 	and	r8,r19,r3
 8802944:	1015883a 	mov	r10,r2
 8802948:	4250b03a 	or	r8,r8,r9
 880294c:	4017883a 	mov	r11,r8
 8802950:	003fb406 	br	8802824 <rint+0xd8>
 8802954:	01900034 	movhi	r6,16384
 8802958:	003f9d06 	br	88027d0 <rint+0x84>

0880295c <scalbn>:
 880295c:	2011883a 	mov	r8,r4
 8802960:	291ffc2c 	andhi	r4,r5,32752
 8802964:	2009d53a 	srai	r4,r4,20
 8802968:	defffd04 	addi	sp,sp,-12
 880296c:	dc000015 	stw	r16,0(sp)
 8802970:	dfc00215 	stw	ra,8(sp)
 8802974:	dc400115 	stw	r17,4(sp)
 8802978:	2813883a 	mov	r9,r5
 880297c:	2815883a 	mov	r10,r5
 8802980:	3021883a 	mov	r16,r6
 8802984:	2000281e 	bne	r4,zero,8802a28 <scalbn+0xcc>
 8802988:	00a00034 	movhi	r2,32768
 880298c:	10bfffc4 	addi	r2,r2,-1
 8802990:	2884703a 	and	r2,r5,r2
 8802994:	4084b03a 	or	r2,r8,r2
 8802998:	10001826 	beq	r2,zero,88029fc <scalbn+0xa0>
 880299c:	0005883a 	mov	r2,zero
 88029a0:	00d0d434 	movhi	r3,17232
 88029a4:	4009883a 	mov	r4,r8
 88029a8:	100d883a 	mov	r6,r2
 88029ac:	180f883a 	mov	r7,r3
 88029b0:	88038300 	call	8803830 <__muldf3>
 88029b4:	100b883a 	mov	r5,r2
 88029b8:	1011883a 	mov	r8,r2
 88029bc:	00bffff4 	movhi	r2,65535
 88029c0:	108f2c04 	addi	r2,r2,15536
 88029c4:	180d883a 	mov	r6,r3
 88029c8:	1813883a 	mov	r9,r3
 88029cc:	8080120e 	bge	r16,r2,8802a18 <scalbn+0xbc>
 88029d0:	00b0be74 	movhi	r2,49913
 88029d4:	10bcd644 	addi	r2,r2,-3239
 88029d8:	00c06974 	movhi	r3,421
 88029dc:	18db87c4 	addi	r3,r3,28191
 88029e0:	2809883a 	mov	r4,r5
 88029e4:	180f883a 	mov	r7,r3
 88029e8:	300b883a 	mov	r5,r6
 88029ec:	100d883a 	mov	r6,r2
 88029f0:	88038300 	call	8803830 <__muldf3>
 88029f4:	1011883a 	mov	r8,r2
 88029f8:	1813883a 	mov	r9,r3
 88029fc:	4005883a 	mov	r2,r8
 8802a00:	4807883a 	mov	r3,r9
 8802a04:	dfc00217 	ldw	ra,8(sp)
 8802a08:	dc400117 	ldw	r17,4(sp)
 8802a0c:	dc000017 	ldw	r16,0(sp)
 8802a10:	dec00304 	addi	sp,sp,12
 8802a14:	f800283a 	ret
 8802a18:	189ffc2c 	andhi	r2,r3,32752
 8802a1c:	1005d53a 	srai	r2,r2,20
 8802a20:	1815883a 	mov	r10,r3
 8802a24:	113ff284 	addi	r4,r2,-54
 8802a28:	0081ffc4 	movi	r2,2047
 8802a2c:	20801126 	beq	r4,r2,8802a74 <scalbn+0x118>
 8802a30:	2409883a 	add	r4,r4,r16
 8802a34:	0081ff84 	movi	r2,2046
 8802a38:	11001c16 	blt	r2,r4,8802aac <scalbn+0x150>
 8802a3c:	0100290e 	bge	zero,r4,8802ae4 <scalbn+0x188>
 8802a40:	200a953a 	slli	r5,r4,20
 8802a44:	01200434 	movhi	r4,32784
 8802a48:	213fffc4 	addi	r4,r4,-1
 8802a4c:	5108703a 	and	r4,r10,r4
 8802a50:	2148b03a 	or	r4,r4,r5
 8802a54:	2013883a 	mov	r9,r4
 8802a58:	4005883a 	mov	r2,r8
 8802a5c:	4807883a 	mov	r3,r9
 8802a60:	dfc00217 	ldw	ra,8(sp)
 8802a64:	dc400117 	ldw	r17,4(sp)
 8802a68:	dc000017 	ldw	r16,0(sp)
 8802a6c:	dec00304 	addi	sp,sp,12
 8802a70:	f800283a 	ret
 8802a74:	480f883a 	mov	r7,r9
 8802a78:	4009883a 	mov	r4,r8
 8802a7c:	480b883a 	mov	r5,r9
 8802a80:	400d883a 	mov	r6,r8
 8802a84:	88037bc0 	call	88037bc <__adddf3>
 8802a88:	1011883a 	mov	r8,r2
 8802a8c:	1813883a 	mov	r9,r3
 8802a90:	4005883a 	mov	r2,r8
 8802a94:	4807883a 	mov	r3,r9
 8802a98:	dfc00217 	ldw	ra,8(sp)
 8802a9c:	dc400117 	ldw	r17,4(sp)
 8802aa0:	dc000017 	ldw	r16,0(sp)
 8802aa4:	dec00304 	addi	sp,sp,12
 8802aa8:	f800283a 	ret
 8802aac:	04220034 	movhi	r16,34816
 8802ab0:	841d6704 	addi	r16,r16,30108
 8802ab4:	045f8e34 	movhi	r17,32312
 8802ab8:	8c790f04 	addi	r17,r17,-7108
 8802abc:	480f883a 	mov	r7,r9
 8802ac0:	400d883a 	mov	r6,r8
 8802ac4:	8009883a 	mov	r4,r16
 8802ac8:	880b883a 	mov	r5,r17
 8802acc:	8802b3c0 	call	8802b3c <copysign>
 8802ad0:	180b883a 	mov	r5,r3
 8802ad4:	800d883a 	mov	r6,r16
 8802ad8:	880f883a 	mov	r7,r17
 8802adc:	1009883a 	mov	r4,r2
 8802ae0:	003fc306 	br	88029f0 <scalbn+0x94>
 8802ae4:	00bff284 	movi	r2,-54
 8802ae8:	11000716 	blt	r2,r4,8802b08 <scalbn+0x1ac>
 8802aec:	00b0d414 	movui	r2,50000
 8802af0:	143fee16 	blt	r2,r16,8802aac <scalbn+0x150>
 8802af4:	0430be74 	movhi	r16,49913
 8802af8:	843cd644 	addi	r16,r16,-3239
 8802afc:	04406974 	movhi	r17,421
 8802b00:	8c5b87c4 	addi	r17,r17,28191
 8802b04:	003fed06 	br	8802abc <scalbn+0x160>
 8802b08:	21000d84 	addi	r4,r4,54
 8802b0c:	2008953a 	slli	r4,r4,20
 8802b10:	01e00434 	movhi	r7,32784
 8802b14:	39ffffc4 	addi	r7,r7,-1
 8802b18:	51ce703a 	and	r7,r10,r7
 8802b1c:	390eb03a 	or	r7,r7,r4
 8802b20:	024f2434 	movhi	r9,15504
 8802b24:	4009883a 	mov	r4,r8
 8802b28:	0011883a 	mov	r8,zero
 8802b2c:	380b883a 	mov	r5,r7
 8802b30:	400d883a 	mov	r6,r8
 8802b34:	480f883a 	mov	r7,r9
 8802b38:	003fad06 	br	88029f0 <scalbn+0x94>

08802b3c <copysign>:
 8802b3c:	3813883a 	mov	r9,r7
 8802b40:	01e00034 	movhi	r7,32768
 8802b44:	39ffffc4 	addi	r7,r7,-1
 8802b48:	394e703a 	and	r7,r7,r5
 8802b4c:	4aa0002c 	andhi	r10,r9,32768
 8802b50:	3a8eb03a 	or	r7,r7,r10
 8802b54:	2005883a 	mov	r2,r4
 8802b58:	3807883a 	mov	r3,r7
 8802b5c:	f800283a 	ret

08802b60 <__fixunssfsi>:
 8802b60:	defffd04 	addi	sp,sp,-12
 8802b64:	dc000015 	stw	r16,0(sp)
 8802b68:	0413c034 	movhi	r16,20224
 8802b6c:	800b883a 	mov	r5,r16
 8802b70:	dc400115 	stw	r17,4(sp)
 8802b74:	dfc00215 	stw	ra,8(sp)
 8802b78:	2023883a 	mov	r17,r4
 8802b7c:	8802ffc0 	call	8802ffc <__gesf2>
 8802b80:	800b883a 	mov	r5,r16
 8802b84:	8809883a 	mov	r4,r17
 8802b88:	10000a16 	blt	r2,zero,8802bb4 <__fixunssfsi+0x54>
 8802b8c:	8802db40 	call	8802db4 <__subsf3>
 8802b90:	1009883a 	mov	r4,r2
 8802b94:	88031840 	call	8803184 <__fixsfsi>
 8802b98:	00e00034 	movhi	r3,32768
 8802b9c:	10c5883a 	add	r2,r2,r3
 8802ba0:	dfc00217 	ldw	ra,8(sp)
 8802ba4:	dc400117 	ldw	r17,4(sp)
 8802ba8:	dc000017 	ldw	r16,0(sp)
 8802bac:	dec00304 	addi	sp,sp,12
 8802bb0:	f800283a 	ret
 8802bb4:	8809883a 	mov	r4,r17
 8802bb8:	88031840 	call	8803184 <__fixsfsi>
 8802bbc:	dfc00217 	ldw	ra,8(sp)
 8802bc0:	dc400117 	ldw	r17,4(sp)
 8802bc4:	dc000017 	ldw	r16,0(sp)
 8802bc8:	dec00304 	addi	sp,sp,12
 8802bcc:	f800283a 	ret

08802bd0 <_fpadd_parts>:
 8802bd0:	21c00017 	ldw	r7,0(r4)
 8802bd4:	02000044 	movi	r8,1
 8802bd8:	41c0332e 	bgeu	r8,r7,8802ca8 <_fpadd_parts+0xd8>
 8802bdc:	28800017 	ldw	r2,0(r5)
 8802be0:	4080462e 	bgeu	r8,r2,8802cfc <_fpadd_parts+0x12c>
 8802be4:	00c00104 	movi	r3,4
 8802be8:	38c06b26 	beq	r7,r3,8802d98 <_fpadd_parts+0x1c8>
 8802bec:	10c04326 	beq	r2,r3,8802cfc <_fpadd_parts+0x12c>
 8802bf0:	00c00084 	movi	r3,2
 8802bf4:	10c02e26 	beq	r2,r3,8802cb0 <_fpadd_parts+0xe0>
 8802bf8:	38c04026 	beq	r7,r3,8802cfc <_fpadd_parts+0x12c>
 8802bfc:	22800217 	ldw	r10,8(r4)
 8802c00:	28c00217 	ldw	r3,8(r5)
 8802c04:	23000317 	ldw	r12,12(r4)
 8802c08:	2a400317 	ldw	r9,12(r5)
 8802c0c:	50cfc83a 	sub	r7,r10,r3
 8802c10:	3817883a 	mov	r11,r7
 8802c14:	38004f16 	blt	r7,zero,8802d54 <_fpadd_parts+0x184>
 8802c18:	008007c4 	movi	r2,31
 8802c1c:	11c03316 	blt	r2,r7,8802cec <_fpadd_parts+0x11c>
 8802c20:	02c0540e 	bge	zero,r11,8802d74 <_fpadd_parts+0x1a4>
 8802c24:	41c4983a 	sll	r2,r8,r7
 8802c28:	49c6d83a 	srl	r3,r9,r7
 8802c2c:	10bfffc4 	addi	r2,r2,-1
 8802c30:	4884703a 	and	r2,r9,r2
 8802c34:	1004c03a 	cmpne	r2,r2,zero
 8802c38:	1892b03a 	or	r9,r3,r2
 8802c3c:	20c00117 	ldw	r3,4(r4)
 8802c40:	28800117 	ldw	r2,4(r5)
 8802c44:	18803c26 	beq	r3,r2,8802d38 <_fpadd_parts+0x168>
 8802c48:	18002f26 	beq	r3,zero,8802d08 <_fpadd_parts+0x138>
 8802c4c:	4b05c83a 	sub	r2,r9,r12
 8802c50:	10004216 	blt	r2,zero,8802d5c <_fpadd_parts+0x18c>
 8802c54:	32800215 	stw	r10,8(r6)
 8802c58:	30800315 	stw	r2,12(r6)
 8802c5c:	30000115 	stw	zero,4(r6)
 8802c60:	31000317 	ldw	r4,12(r6)
 8802c64:	01d00034 	movhi	r7,16384
 8802c68:	39ffff84 	addi	r7,r7,-2
 8802c6c:	20bfffc4 	addi	r2,r4,-1
 8802c70:	2007883a 	mov	r3,r4
 8802c74:	38800836 	bltu	r7,r2,8802c98 <_fpadd_parts+0xc8>
 8802c78:	31400217 	ldw	r5,8(r6)
 8802c7c:	18c9883a 	add	r4,r3,r3
 8802c80:	20bfffc4 	addi	r2,r4,-1
 8802c84:	297fffc4 	addi	r5,r5,-1
 8802c88:	2007883a 	mov	r3,r4
 8802c8c:	38bffb2e 	bgeu	r7,r2,8802c7c <_fpadd_parts+0xac>
 8802c90:	31400215 	stw	r5,8(r6)
 8802c94:	31000315 	stw	r4,12(r6)
 8802c98:	008000c4 	movi	r2,3
 8802c9c:	30800015 	stw	r2,0(r6)
 8802ca0:	20001b16 	blt	r4,zero,8802d10 <_fpadd_parts+0x140>
 8802ca4:	3009883a 	mov	r4,r6
 8802ca8:	2005883a 	mov	r2,r4
 8802cac:	f800283a 	ret
 8802cb0:	38fffd1e 	bne	r7,r3,8802ca8 <_fpadd_parts+0xd8>
 8802cb4:	31c00015 	stw	r7,0(r6)
 8802cb8:	20800117 	ldw	r2,4(r4)
 8802cbc:	30800115 	stw	r2,4(r6)
 8802cc0:	20c00217 	ldw	r3,8(r4)
 8802cc4:	30c00215 	stw	r3,8(r6)
 8802cc8:	20800317 	ldw	r2,12(r4)
 8802ccc:	30800315 	stw	r2,12(r6)
 8802cd0:	20c00117 	ldw	r3,4(r4)
 8802cd4:	28800117 	ldw	r2,4(r5)
 8802cd8:	3009883a 	mov	r4,r6
 8802cdc:	1886703a 	and	r3,r3,r2
 8802ce0:	2005883a 	mov	r2,r4
 8802ce4:	30c00115 	stw	r3,4(r6)
 8802ce8:	f800283a 	ret
 8802cec:	1a801716 	blt	r3,r10,8802d4c <_fpadd_parts+0x17c>
 8802cf0:	1815883a 	mov	r10,r3
 8802cf4:	0019883a 	mov	r12,zero
 8802cf8:	003fd006 	br	8802c3c <_fpadd_parts+0x6c>
 8802cfc:	2809883a 	mov	r4,r5
 8802d00:	2005883a 	mov	r2,r4
 8802d04:	f800283a 	ret
 8802d08:	6245c83a 	sub	r2,r12,r9
 8802d0c:	003fd006 	br	8802c50 <_fpadd_parts+0x80>
 8802d10:	30800217 	ldw	r2,8(r6)
 8802d14:	2006d07a 	srli	r3,r4,1
 8802d18:	2100004c 	andi	r4,r4,1
 8802d1c:	10800044 	addi	r2,r2,1
 8802d20:	1906b03a 	or	r3,r3,r4
 8802d24:	3009883a 	mov	r4,r6
 8802d28:	30800215 	stw	r2,8(r6)
 8802d2c:	2005883a 	mov	r2,r4
 8802d30:	30c00315 	stw	r3,12(r6)
 8802d34:	f800283a 	ret
 8802d38:	4b09883a 	add	r4,r9,r12
 8802d3c:	30c00115 	stw	r3,4(r6)
 8802d40:	32800215 	stw	r10,8(r6)
 8802d44:	31000315 	stw	r4,12(r6)
 8802d48:	003fd306 	br	8802c98 <_fpadd_parts+0xc8>
 8802d4c:	0013883a 	mov	r9,zero
 8802d50:	003fba06 	br	8802c3c <_fpadd_parts+0x6c>
 8802d54:	01cfc83a 	sub	r7,zero,r7
 8802d58:	003faf06 	br	8802c18 <_fpadd_parts+0x48>
 8802d5c:	0089c83a 	sub	r4,zero,r2
 8802d60:	00800044 	movi	r2,1
 8802d64:	30800115 	stw	r2,4(r6)
 8802d68:	32800215 	stw	r10,8(r6)
 8802d6c:	31000315 	stw	r4,12(r6)
 8802d70:	003fbb06 	br	8802c60 <_fpadd_parts+0x90>
 8802d74:	583fb126 	beq	r11,zero,8802c3c <_fpadd_parts+0x6c>
 8802d78:	41c4983a 	sll	r2,r8,r7
 8802d7c:	61c6d83a 	srl	r3,r12,r7
 8802d80:	51d5883a 	add	r10,r10,r7
 8802d84:	10bfffc4 	addi	r2,r2,-1
 8802d88:	6084703a 	and	r2,r12,r2
 8802d8c:	1004c03a 	cmpne	r2,r2,zero
 8802d90:	1898b03a 	or	r12,r3,r2
 8802d94:	003fa906 	br	8802c3c <_fpadd_parts+0x6c>
 8802d98:	11ffc31e 	bne	r2,r7,8802ca8 <_fpadd_parts+0xd8>
 8802d9c:	28c00117 	ldw	r3,4(r5)
 8802da0:	20800117 	ldw	r2,4(r4)
 8802da4:	10ffc026 	beq	r2,r3,8802ca8 <_fpadd_parts+0xd8>
 8802da8:	01022074 	movhi	r4,2177
 8802dac:	21065904 	addi	r4,r4,6500
 8802db0:	003fbd06 	br	8802ca8 <_fpadd_parts+0xd8>

08802db4 <__subsf3>:
 8802db4:	deffef04 	addi	sp,sp,-68
 8802db8:	dcc00f15 	stw	r19,60(sp)
 8802dbc:	dcc00204 	addi	r19,sp,8
 8802dc0:	dc400e15 	stw	r17,56(sp)
 8802dc4:	d9000015 	stw	r4,0(sp)
 8802dc8:	d9400115 	stw	r5,4(sp)
 8802dcc:	d809883a 	mov	r4,sp
 8802dd0:	980b883a 	mov	r5,r19
 8802dd4:	dc400604 	addi	r17,sp,24
 8802dd8:	dfc01015 	stw	ra,64(sp)
 8802ddc:	880465c0 	call	880465c <__unpack_f>
 8802de0:	d9000104 	addi	r4,sp,4
 8802de4:	880b883a 	mov	r5,r17
 8802de8:	880465c0 	call	880465c <__unpack_f>
 8802dec:	d8800717 	ldw	r2,28(sp)
 8802df0:	9809883a 	mov	r4,r19
 8802df4:	880b883a 	mov	r5,r17
 8802df8:	d9800a04 	addi	r6,sp,40
 8802dfc:	1080005c 	xori	r2,r2,1
 8802e00:	d8800715 	stw	r2,28(sp)
 8802e04:	8802bd00 	call	8802bd0 <_fpadd_parts>
 8802e08:	1009883a 	mov	r4,r2
 8802e0c:	88044fc0 	call	88044fc <__pack_f>
 8802e10:	dfc01017 	ldw	ra,64(sp)
 8802e14:	dcc00f17 	ldw	r19,60(sp)
 8802e18:	dc400e17 	ldw	r17,56(sp)
 8802e1c:	dec01104 	addi	sp,sp,68
 8802e20:	f800283a 	ret

08802e24 <__addsf3>:
 8802e24:	deffef04 	addi	sp,sp,-68
 8802e28:	dcc00f15 	stw	r19,60(sp)
 8802e2c:	dcc00204 	addi	r19,sp,8
 8802e30:	dc400e15 	stw	r17,56(sp)
 8802e34:	d9000015 	stw	r4,0(sp)
 8802e38:	d9400115 	stw	r5,4(sp)
 8802e3c:	d809883a 	mov	r4,sp
 8802e40:	980b883a 	mov	r5,r19
 8802e44:	dc400604 	addi	r17,sp,24
 8802e48:	dfc01015 	stw	ra,64(sp)
 8802e4c:	880465c0 	call	880465c <__unpack_f>
 8802e50:	d9000104 	addi	r4,sp,4
 8802e54:	880b883a 	mov	r5,r17
 8802e58:	880465c0 	call	880465c <__unpack_f>
 8802e5c:	d9800a04 	addi	r6,sp,40
 8802e60:	9809883a 	mov	r4,r19
 8802e64:	880b883a 	mov	r5,r17
 8802e68:	8802bd00 	call	8802bd0 <_fpadd_parts>
 8802e6c:	1009883a 	mov	r4,r2
 8802e70:	88044fc0 	call	88044fc <__pack_f>
 8802e74:	dfc01017 	ldw	ra,64(sp)
 8802e78:	dcc00f17 	ldw	r19,60(sp)
 8802e7c:	dc400e17 	ldw	r17,56(sp)
 8802e80:	dec01104 	addi	sp,sp,68
 8802e84:	f800283a 	ret

08802e88 <__divsf3>:
 8802e88:	defff304 	addi	sp,sp,-52
 8802e8c:	dc400b15 	stw	r17,44(sp)
 8802e90:	dc400204 	addi	r17,sp,8
 8802e94:	dc000a15 	stw	r16,40(sp)
 8802e98:	d9000015 	stw	r4,0(sp)
 8802e9c:	d9400115 	stw	r5,4(sp)
 8802ea0:	d809883a 	mov	r4,sp
 8802ea4:	880b883a 	mov	r5,r17
 8802ea8:	dc000604 	addi	r16,sp,24
 8802eac:	dfc00c15 	stw	ra,48(sp)
 8802eb0:	880465c0 	call	880465c <__unpack_f>
 8802eb4:	d9000104 	addi	r4,sp,4
 8802eb8:	800b883a 	mov	r5,r16
 8802ebc:	880465c0 	call	880465c <__unpack_f>
 8802ec0:	d9000217 	ldw	r4,8(sp)
 8802ec4:	00800044 	movi	r2,1
 8802ec8:	01800104 	movi	r6,4
 8802ecc:	11000a2e 	bgeu	r2,r4,8802ef8 <__divsf3+0x70>
 8802ed0:	d9400617 	ldw	r5,24(sp)
 8802ed4:	1140432e 	bgeu	r2,r5,8802fe4 <__divsf3+0x15c>
 8802ed8:	d8800317 	ldw	r2,12(sp)
 8802edc:	d8c00717 	ldw	r3,28(sp)
 8802ee0:	10c4f03a 	xor	r2,r2,r3
 8802ee4:	d8800315 	stw	r2,12(sp)
 8802ee8:	21800226 	beq	r4,r6,8802ef4 <__divsf3+0x6c>
 8802eec:	00800084 	movi	r2,2
 8802ef0:	2080101e 	bne	r4,r2,8802f34 <__divsf3+0xac>
 8802ef4:	29000726 	beq	r5,r4,8802f14 <__divsf3+0x8c>
 8802ef8:	8809883a 	mov	r4,r17
 8802efc:	88044fc0 	call	88044fc <__pack_f>
 8802f00:	dfc00c17 	ldw	ra,48(sp)
 8802f04:	dc400b17 	ldw	r17,44(sp)
 8802f08:	dc000a17 	ldw	r16,40(sp)
 8802f0c:	dec00d04 	addi	sp,sp,52
 8802f10:	f800283a 	ret
 8802f14:	01022074 	movhi	r4,2177
 8802f18:	21065904 	addi	r4,r4,6500
 8802f1c:	88044fc0 	call	88044fc <__pack_f>
 8802f20:	dfc00c17 	ldw	ra,48(sp)
 8802f24:	dc400b17 	ldw	r17,44(sp)
 8802f28:	dc000a17 	ldw	r16,40(sp)
 8802f2c:	dec00d04 	addi	sp,sp,52
 8802f30:	f800283a 	ret
 8802f34:	29802d26 	beq	r5,r6,8802fec <__divsf3+0x164>
 8802f38:	28801a26 	beq	r5,r2,8802fa4 <__divsf3+0x11c>
 8802f3c:	d8c00417 	ldw	r3,16(sp)
 8802f40:	d8800817 	ldw	r2,32(sp)
 8802f44:	d9000517 	ldw	r4,20(sp)
 8802f48:	d9800917 	ldw	r6,36(sp)
 8802f4c:	1885c83a 	sub	r2,r3,r2
 8802f50:	d8800415 	stw	r2,16(sp)
 8802f54:	2180032e 	bgeu	r4,r6,8802f64 <__divsf3+0xdc>
 8802f58:	10bfffc4 	addi	r2,r2,-1
 8802f5c:	d8800415 	stw	r2,16(sp)
 8802f60:	2109883a 	add	r4,r4,r4
 8802f64:	01500034 	movhi	r5,16384
 8802f68:	0007883a 	mov	r3,zero
 8802f6c:	0005883a 	mov	r2,zero
 8802f70:	01c007c4 	movi	r7,31
 8802f74:	10800044 	addi	r2,r2,1
 8802f78:	21800236 	bltu	r4,r6,8802f84 <__divsf3+0xfc>
 8802f7c:	1946b03a 	or	r3,r3,r5
 8802f80:	2189c83a 	sub	r4,r4,r6
 8802f84:	280ad07a 	srli	r5,r5,1
 8802f88:	2109883a 	add	r4,r4,r4
 8802f8c:	11fff91e 	bne	r2,r7,8802f74 <__divsf3+0xec>
 8802f90:	19401fcc 	andi	r5,r3,127
 8802f94:	00801004 	movi	r2,64
 8802f98:	28800a26 	beq	r5,r2,8802fc4 <__divsf3+0x13c>
 8802f9c:	d8c00515 	stw	r3,20(sp)
 8802fa0:	003fd506 	br	8802ef8 <__divsf3+0x70>
 8802fa4:	8809883a 	mov	r4,r17
 8802fa8:	d9800215 	stw	r6,8(sp)
 8802fac:	88044fc0 	call	88044fc <__pack_f>
 8802fb0:	dfc00c17 	ldw	ra,48(sp)
 8802fb4:	dc400b17 	ldw	r17,44(sp)
 8802fb8:	dc000a17 	ldw	r16,40(sp)
 8802fbc:	dec00d04 	addi	sp,sp,52
 8802fc0:	f800283a 	ret
 8802fc4:	1880200c 	andi	r2,r3,128
 8802fc8:	103ff41e 	bne	r2,zero,8802f9c <__divsf3+0x114>
 8802fcc:	203ff326 	beq	r4,zero,8802f9c <__divsf3+0x114>
 8802fd0:	1947883a 	add	r3,r3,r5
 8802fd4:	00bfe004 	movi	r2,-128
 8802fd8:	1886703a 	and	r3,r3,r2
 8802fdc:	d8c00515 	stw	r3,20(sp)
 8802fe0:	003fc506 	br	8802ef8 <__divsf3+0x70>
 8802fe4:	8009883a 	mov	r4,r16
 8802fe8:	003fc406 	br	8802efc <__divsf3+0x74>
 8802fec:	8809883a 	mov	r4,r17
 8802ff0:	d8000515 	stw	zero,20(sp)
 8802ff4:	d8000415 	stw	zero,16(sp)
 8802ff8:	003fc006 	br	8802efc <__divsf3+0x74>

08802ffc <__gesf2>:
 8802ffc:	defff304 	addi	sp,sp,-52
 8803000:	dc400b15 	stw	r17,44(sp)
 8803004:	dc400204 	addi	r17,sp,8
 8803008:	dc000a15 	stw	r16,40(sp)
 880300c:	d9000015 	stw	r4,0(sp)
 8803010:	d9400115 	stw	r5,4(sp)
 8803014:	d809883a 	mov	r4,sp
 8803018:	880b883a 	mov	r5,r17
 880301c:	dc000604 	addi	r16,sp,24
 8803020:	dfc00c15 	stw	ra,48(sp)
 8803024:	880465c0 	call	880465c <__unpack_f>
 8803028:	d9000104 	addi	r4,sp,4
 880302c:	800b883a 	mov	r5,r16
 8803030:	880465c0 	call	880465c <__unpack_f>
 8803034:	d8800217 	ldw	r2,8(sp)
 8803038:	00c00044 	movi	r3,1
 880303c:	01bfffc4 	movi	r6,-1
 8803040:	1880062e 	bgeu	r3,r2,880305c <__gesf2+0x60>
 8803044:	d8800617 	ldw	r2,24(sp)
 8803048:	8809883a 	mov	r4,r17
 880304c:	800b883a 	mov	r5,r16
 8803050:	1880022e 	bgeu	r3,r2,880305c <__gesf2+0x60>
 8803054:	88047240 	call	8804724 <__fpcmp_parts_f>
 8803058:	100d883a 	mov	r6,r2
 880305c:	3005883a 	mov	r2,r6
 8803060:	dfc00c17 	ldw	ra,48(sp)
 8803064:	dc400b17 	ldw	r17,44(sp)
 8803068:	dc000a17 	ldw	r16,40(sp)
 880306c:	dec00d04 	addi	sp,sp,52
 8803070:	f800283a 	ret

08803074 <__lesf2>:
 8803074:	defff304 	addi	sp,sp,-52
 8803078:	dc400b15 	stw	r17,44(sp)
 880307c:	dc400204 	addi	r17,sp,8
 8803080:	dc000a15 	stw	r16,40(sp)
 8803084:	d9000015 	stw	r4,0(sp)
 8803088:	d9400115 	stw	r5,4(sp)
 880308c:	d809883a 	mov	r4,sp
 8803090:	880b883a 	mov	r5,r17
 8803094:	dc000604 	addi	r16,sp,24
 8803098:	dfc00c15 	stw	ra,48(sp)
 880309c:	880465c0 	call	880465c <__unpack_f>
 88030a0:	d9000104 	addi	r4,sp,4
 88030a4:	800b883a 	mov	r5,r16
 88030a8:	880465c0 	call	880465c <__unpack_f>
 88030ac:	d8800217 	ldw	r2,8(sp)
 88030b0:	00c00044 	movi	r3,1
 88030b4:	180d883a 	mov	r6,r3
 88030b8:	1880062e 	bgeu	r3,r2,88030d4 <__lesf2+0x60>
 88030bc:	d8800617 	ldw	r2,24(sp)
 88030c0:	8809883a 	mov	r4,r17
 88030c4:	800b883a 	mov	r5,r16
 88030c8:	1880022e 	bgeu	r3,r2,88030d4 <__lesf2+0x60>
 88030cc:	88047240 	call	8804724 <__fpcmp_parts_f>
 88030d0:	100d883a 	mov	r6,r2
 88030d4:	3005883a 	mov	r2,r6
 88030d8:	dfc00c17 	ldw	ra,48(sp)
 88030dc:	dc400b17 	ldw	r17,44(sp)
 88030e0:	dc000a17 	ldw	r16,40(sp)
 88030e4:	dec00d04 	addi	sp,sp,52
 88030e8:	f800283a 	ret

088030ec <__floatsisf>:
 88030ec:	2006d7fa 	srli	r3,r4,31
 88030f0:	defffa04 	addi	sp,sp,-24
 88030f4:	008000c4 	movi	r2,3
 88030f8:	dfc00515 	stw	ra,20(sp)
 88030fc:	dc000415 	stw	r16,16(sp)
 8803100:	d8800015 	stw	r2,0(sp)
 8803104:	d8c00115 	stw	r3,4(sp)
 8803108:	2000081e 	bne	r4,zero,880312c <__floatsisf+0x40>
 880310c:	00800084 	movi	r2,2
 8803110:	d8800015 	stw	r2,0(sp)
 8803114:	d809883a 	mov	r4,sp
 8803118:	88044fc0 	call	88044fc <__pack_f>
 880311c:	dfc00517 	ldw	ra,20(sp)
 8803120:	dc000417 	ldw	r16,16(sp)
 8803124:	dec00604 	addi	sp,sp,24
 8803128:	f800283a 	ret
 880312c:	00800784 	movi	r2,30
 8803130:	1807003a 	cmpeq	r3,r3,zero
 8803134:	d8800215 	stw	r2,8(sp)
 8803138:	18000e1e 	bne	r3,zero,8803174 <__floatsisf+0x88>
 880313c:	00a00034 	movhi	r2,32768
 8803140:	20800e26 	beq	r4,r2,880317c <__floatsisf+0x90>
 8803144:	0121c83a 	sub	r16,zero,r4
 8803148:	8009883a 	mov	r4,r16
 880314c:	dc000315 	stw	r16,12(sp)
 8803150:	880447c0 	call	880447c <__clzsi2>
 8803154:	117fffc4 	addi	r5,r2,-1
 8803158:	017fee0e 	bge	zero,r5,8803114 <__floatsisf+0x28>
 880315c:	d8800217 	ldw	r2,8(sp)
 8803160:	8146983a 	sll	r3,r16,r5
 8803164:	1145c83a 	sub	r2,r2,r5
 8803168:	d8c00315 	stw	r3,12(sp)
 880316c:	d8800215 	stw	r2,8(sp)
 8803170:	003fe806 	br	8803114 <__floatsisf+0x28>
 8803174:	2021883a 	mov	r16,r4
 8803178:	003ff306 	br	8803148 <__floatsisf+0x5c>
 880317c:	00b3c034 	movhi	r2,52992
 8803180:	003fe606 	br	880311c <__floatsisf+0x30>

08803184 <__fixsfsi>:
 8803184:	defffa04 	addi	sp,sp,-24
 8803188:	d9000015 	stw	r4,0(sp)
 880318c:	d9400104 	addi	r5,sp,4
 8803190:	d809883a 	mov	r4,sp
 8803194:	dfc00515 	stw	ra,20(sp)
 8803198:	880465c0 	call	880465c <__unpack_f>
 880319c:	d8c00117 	ldw	r3,4(sp)
 88031a0:	00800084 	movi	r2,2
 88031a4:	1880041e 	bne	r3,r2,88031b8 <__fixsfsi+0x34>
 88031a8:	0005883a 	mov	r2,zero
 88031ac:	dfc00517 	ldw	ra,20(sp)
 88031b0:	dec00604 	addi	sp,sp,24
 88031b4:	f800283a 	ret
 88031b8:	00800044 	movi	r2,1
 88031bc:	10fffa2e 	bgeu	r2,r3,88031a8 <__fixsfsi+0x24>
 88031c0:	00800104 	movi	r2,4
 88031c4:	18800426 	beq	r3,r2,88031d8 <__fixsfsi+0x54>
 88031c8:	d8800317 	ldw	r2,12(sp)
 88031cc:	103ff616 	blt	r2,zero,88031a8 <__fixsfsi+0x24>
 88031d0:	00c00784 	movi	r3,30
 88031d4:	1880070e 	bge	r3,r2,88031f4 <__fixsfsi+0x70>
 88031d8:	d8800217 	ldw	r2,8(sp)
 88031dc:	10000c1e 	bne	r2,zero,8803210 <__fixsfsi+0x8c>
 88031e0:	00a00034 	movhi	r2,32768
 88031e4:	10bfffc4 	addi	r2,r2,-1
 88031e8:	dfc00517 	ldw	ra,20(sp)
 88031ec:	dec00604 	addi	sp,sp,24
 88031f0:	f800283a 	ret
 88031f4:	1885c83a 	sub	r2,r3,r2
 88031f8:	d9000217 	ldw	r4,8(sp)
 88031fc:	d8c00417 	ldw	r3,16(sp)
 8803200:	1884d83a 	srl	r2,r3,r2
 8803204:	203fe926 	beq	r4,zero,88031ac <__fixsfsi+0x28>
 8803208:	0085c83a 	sub	r2,zero,r2
 880320c:	003fe706 	br	88031ac <__fixsfsi+0x28>
 8803210:	00a00034 	movhi	r2,32768
 8803214:	003fe506 	br	88031ac <__fixsfsi+0x28>

08803218 <__extendsfdf2>:
 8803218:	defff904 	addi	sp,sp,-28
 880321c:	d9000115 	stw	r4,4(sp)
 8803220:	d9400204 	addi	r5,sp,8
 8803224:	d9000104 	addi	r4,sp,4
 8803228:	dfc00615 	stw	ra,24(sp)
 880322c:	880465c0 	call	880465c <__unpack_f>
 8803230:	d9c00517 	ldw	r7,20(sp)
 8803234:	0011883a 	mov	r8,zero
 8803238:	400697ba 	slli	r3,r8,30
 880323c:	3812d0ba 	srli	r9,r7,2
 8803240:	380497ba 	slli	r2,r7,30
 8803244:	d9000217 	ldw	r4,8(sp)
 8803248:	d9400317 	ldw	r5,12(sp)
 880324c:	d9800417 	ldw	r6,16(sp)
 8803250:	48c6b03a 	or	r3,r9,r3
 8803254:	100f883a 	mov	r7,r2
 8803258:	d8c00015 	stw	r3,0(sp)
 880325c:	88041ec0 	call	88041ec <__make_dp>
 8803260:	dfc00617 	ldw	ra,24(sp)
 8803264:	dec00704 	addi	sp,sp,28
 8803268:	f800283a 	ret

0880326c <__floatunsisf>:
 880326c:	defff904 	addi	sp,sp,-28
 8803270:	dc400515 	stw	r17,20(sp)
 8803274:	dc000415 	stw	r16,16(sp)
 8803278:	dfc00615 	stw	ra,24(sp)
 880327c:	04400784 	movi	r17,30
 8803280:	2021883a 	mov	r16,r4
 8803284:	d8000115 	stw	zero,4(sp)
 8803288:	2000091e 	bne	r4,zero,88032b0 <__floatunsisf+0x44>
 880328c:	00800084 	movi	r2,2
 8803290:	d8800015 	stw	r2,0(sp)
 8803294:	d809883a 	mov	r4,sp
 8803298:	88044fc0 	call	88044fc <__pack_f>
 880329c:	dfc00617 	ldw	ra,24(sp)
 88032a0:	dc400517 	ldw	r17,20(sp)
 88032a4:	dc000417 	ldw	r16,16(sp)
 88032a8:	dec00704 	addi	sp,sp,28
 88032ac:	f800283a 	ret
 88032b0:	008000c4 	movi	r2,3
 88032b4:	d9000315 	stw	r4,12(sp)
 88032b8:	d8800015 	stw	r2,0(sp)
 88032bc:	dc400215 	stw	r17,8(sp)
 88032c0:	880447c0 	call	880447c <__clzsi2>
 88032c4:	117fffc4 	addi	r5,r2,-1
 88032c8:	0147c83a 	sub	r3,zero,r5
 88032cc:	00800044 	movi	r2,1
 88032d0:	10c4983a 	sll	r2,r2,r3
 88032d4:	80c6d83a 	srl	r3,r16,r3
 88032d8:	8949c83a 	sub	r4,r17,r5
 88032dc:	10bfffc4 	addi	r2,r2,-1
 88032e0:	8084703a 	and	r2,r16,r2
 88032e4:	1004c03a 	cmpne	r2,r2,zero
 88032e8:	1886b03a 	or	r3,r3,r2
 88032ec:	28000c16 	blt	r5,zero,8803320 <__floatunsisf+0xb4>
 88032f0:	8144983a 	sll	r2,r16,r5
 88032f4:	8947c83a 	sub	r3,r17,r5
 88032f8:	283fe626 	beq	r5,zero,8803294 <__floatunsisf+0x28>
 88032fc:	d809883a 	mov	r4,sp
 8803300:	d8800315 	stw	r2,12(sp)
 8803304:	d8c00215 	stw	r3,8(sp)
 8803308:	88044fc0 	call	88044fc <__pack_f>
 880330c:	dfc00617 	ldw	ra,24(sp)
 8803310:	dc400517 	ldw	r17,20(sp)
 8803314:	dc000417 	ldw	r16,16(sp)
 8803318:	dec00704 	addi	sp,sp,28
 880331c:	f800283a 	ret
 8803320:	d8c00315 	stw	r3,12(sp)
 8803324:	d9000215 	stw	r4,8(sp)
 8803328:	003fda06 	br	8803294 <__floatunsisf+0x28>

0880332c <_fpadd_parts>:
 880332c:	defff804 	addi	sp,sp,-32
 8803330:	dcc00315 	stw	r19,12(sp)
 8803334:	2027883a 	mov	r19,r4
 8803338:	21000017 	ldw	r4,0(r4)
 880333c:	00c00044 	movi	r3,1
 8803340:	dd400515 	stw	r21,20(sp)
 8803344:	dd000415 	stw	r20,16(sp)
 8803348:	ddc00715 	stw	r23,28(sp)
 880334c:	dd800615 	stw	r22,24(sp)
 8803350:	dc800215 	stw	r18,8(sp)
 8803354:	dc400115 	stw	r17,4(sp)
 8803358:	dc000015 	stw	r16,0(sp)
 880335c:	282b883a 	mov	r21,r5
 8803360:	3029883a 	mov	r20,r6
 8803364:	1900632e 	bgeu	r3,r4,88034f4 <_fpadd_parts+0x1c8>
 8803368:	28800017 	ldw	r2,0(r5)
 880336c:	1880812e 	bgeu	r3,r2,8803574 <_fpadd_parts+0x248>
 8803370:	00c00104 	movi	r3,4
 8803374:	20c0dc26 	beq	r4,r3,88036e8 <_fpadd_parts+0x3bc>
 8803378:	10c07e26 	beq	r2,r3,8803574 <_fpadd_parts+0x248>
 880337c:	00c00084 	movi	r3,2
 8803380:	10c06726 	beq	r2,r3,8803520 <_fpadd_parts+0x1f4>
 8803384:	20c07b26 	beq	r4,r3,8803574 <_fpadd_parts+0x248>
 8803388:	9dc00217 	ldw	r23,8(r19)
 880338c:	28c00217 	ldw	r3,8(r5)
 8803390:	9c400317 	ldw	r17,12(r19)
 8803394:	2bc00317 	ldw	r15,12(r5)
 8803398:	b8cdc83a 	sub	r6,r23,r3
 880339c:	9c800417 	ldw	r18,16(r19)
 88033a0:	2c000417 	ldw	r16,16(r5)
 88033a4:	3009883a 	mov	r4,r6
 88033a8:	30009716 	blt	r6,zero,8803608 <_fpadd_parts+0x2dc>
 88033ac:	00800fc4 	movi	r2,63
 88033b0:	11806b16 	blt	r2,r6,8803560 <_fpadd_parts+0x234>
 88033b4:	0100a40e 	bge	zero,r4,8803648 <_fpadd_parts+0x31c>
 88033b8:	35bff804 	addi	r22,r6,-32
 88033bc:	b000bc16 	blt	r22,zero,88036b0 <_fpadd_parts+0x384>
 88033c0:	8596d83a 	srl	r11,r16,r22
 88033c4:	0019883a 	mov	r12,zero
 88033c8:	0013883a 	mov	r9,zero
 88033cc:	01000044 	movi	r4,1
 88033d0:	0015883a 	mov	r10,zero
 88033d4:	b000be16 	blt	r22,zero,88036d0 <_fpadd_parts+0x3a4>
 88033d8:	2590983a 	sll	r8,r4,r22
 88033dc:	000f883a 	mov	r7,zero
 88033e0:	00bfffc4 	movi	r2,-1
 88033e4:	3889883a 	add	r4,r7,r2
 88033e8:	408b883a 	add	r5,r8,r2
 88033ec:	21cd803a 	cmpltu	r6,r4,r7
 88033f0:	314b883a 	add	r5,r6,r5
 88033f4:	7904703a 	and	r2,r15,r4
 88033f8:	8146703a 	and	r3,r16,r5
 88033fc:	10c4b03a 	or	r2,r2,r3
 8803400:	10000226 	beq	r2,zero,880340c <_fpadd_parts+0xe0>
 8803404:	02400044 	movi	r9,1
 8803408:	0015883a 	mov	r10,zero
 880340c:	5a5eb03a 	or	r15,r11,r9
 8803410:	62a0b03a 	or	r16,r12,r10
 8803414:	99400117 	ldw	r5,4(r19)
 8803418:	a8800117 	ldw	r2,4(r21)
 880341c:	28806e26 	beq	r5,r2,88035d8 <_fpadd_parts+0x2ac>
 8803420:	28006626 	beq	r5,zero,88035bc <_fpadd_parts+0x290>
 8803424:	7c45c83a 	sub	r2,r15,r17
 8803428:	7889803a 	cmpltu	r4,r15,r2
 880342c:	8487c83a 	sub	r3,r16,r18
 8803430:	1909c83a 	sub	r4,r3,r4
 8803434:	100d883a 	mov	r6,r2
 8803438:	200f883a 	mov	r7,r4
 880343c:	38007716 	blt	r7,zero,880361c <_fpadd_parts+0x2f0>
 8803440:	a5c00215 	stw	r23,8(r20)
 8803444:	a1c00415 	stw	r7,16(r20)
 8803448:	a0000115 	stw	zero,4(r20)
 880344c:	a1800315 	stw	r6,12(r20)
 8803450:	a2000317 	ldw	r8,12(r20)
 8803454:	a2400417 	ldw	r9,16(r20)
 8803458:	00bfffc4 	movi	r2,-1
 880345c:	408b883a 	add	r5,r8,r2
 8803460:	2a09803a 	cmpltu	r4,r5,r8
 8803464:	488d883a 	add	r6,r9,r2
 8803468:	01c40034 	movhi	r7,4096
 880346c:	39ffffc4 	addi	r7,r7,-1
 8803470:	218d883a 	add	r6,r4,r6
 8803474:	39801736 	bltu	r7,r6,88034d4 <_fpadd_parts+0x1a8>
 8803478:	31c06526 	beq	r6,r7,8803610 <_fpadd_parts+0x2e4>
 880347c:	a3000217 	ldw	r12,8(r20)
 8803480:	4209883a 	add	r4,r8,r8
 8803484:	00bfffc4 	movi	r2,-1
 8803488:	220f803a 	cmpltu	r7,r4,r8
 880348c:	4a4b883a 	add	r5,r9,r9
 8803490:	394f883a 	add	r7,r7,r5
 8803494:	2095883a 	add	r10,r4,r2
 8803498:	3897883a 	add	r11,r7,r2
 880349c:	510d803a 	cmpltu	r6,r10,r4
 88034a0:	6099883a 	add	r12,r12,r2
 88034a4:	32d7883a 	add	r11,r6,r11
 88034a8:	00840034 	movhi	r2,4096
 88034ac:	10bfffc4 	addi	r2,r2,-1
 88034b0:	2011883a 	mov	r8,r4
 88034b4:	3813883a 	mov	r9,r7
 88034b8:	a1000315 	stw	r4,12(r20)
 88034bc:	a1c00415 	stw	r7,16(r20)
 88034c0:	a3000215 	stw	r12,8(r20)
 88034c4:	12c00336 	bltu	r2,r11,88034d4 <_fpadd_parts+0x1a8>
 88034c8:	58bfed1e 	bne	r11,r2,8803480 <_fpadd_parts+0x154>
 88034cc:	00bfff84 	movi	r2,-2
 88034d0:	12bfeb2e 	bgeu	r2,r10,8803480 <_fpadd_parts+0x154>
 88034d4:	a2800417 	ldw	r10,16(r20)
 88034d8:	008000c4 	movi	r2,3
 88034dc:	00c80034 	movhi	r3,8192
 88034e0:	18ffffc4 	addi	r3,r3,-1
 88034e4:	a2400317 	ldw	r9,12(r20)
 88034e8:	a0800015 	stw	r2,0(r20)
 88034ec:	1a802336 	bltu	r3,r10,880357c <_fpadd_parts+0x250>
 88034f0:	a027883a 	mov	r19,r20
 88034f4:	9805883a 	mov	r2,r19
 88034f8:	ddc00717 	ldw	r23,28(sp)
 88034fc:	dd800617 	ldw	r22,24(sp)
 8803500:	dd400517 	ldw	r21,20(sp)
 8803504:	dd000417 	ldw	r20,16(sp)
 8803508:	dcc00317 	ldw	r19,12(sp)
 880350c:	dc800217 	ldw	r18,8(sp)
 8803510:	dc400117 	ldw	r17,4(sp)
 8803514:	dc000017 	ldw	r16,0(sp)
 8803518:	dec00804 	addi	sp,sp,32
 880351c:	f800283a 	ret
 8803520:	20fff41e 	bne	r4,r3,88034f4 <_fpadd_parts+0x1c8>
 8803524:	31000015 	stw	r4,0(r6)
 8803528:	98800117 	ldw	r2,4(r19)
 880352c:	30800115 	stw	r2,4(r6)
 8803530:	98c00217 	ldw	r3,8(r19)
 8803534:	30c00215 	stw	r3,8(r6)
 8803538:	98800317 	ldw	r2,12(r19)
 880353c:	30800315 	stw	r2,12(r6)
 8803540:	98c00417 	ldw	r3,16(r19)
 8803544:	30c00415 	stw	r3,16(r6)
 8803548:	98800117 	ldw	r2,4(r19)
 880354c:	28c00117 	ldw	r3,4(r5)
 8803550:	3027883a 	mov	r19,r6
 8803554:	10c4703a 	and	r2,r2,r3
 8803558:	30800115 	stw	r2,4(r6)
 880355c:	003fe506 	br	88034f4 <_fpadd_parts+0x1c8>
 8803560:	1dc02616 	blt	r3,r23,88035fc <_fpadd_parts+0x2d0>
 8803564:	0023883a 	mov	r17,zero
 8803568:	182f883a 	mov	r23,r3
 880356c:	0025883a 	mov	r18,zero
 8803570:	003fa806 	br	8803414 <_fpadd_parts+0xe8>
 8803574:	a827883a 	mov	r19,r21
 8803578:	003fde06 	br	88034f4 <_fpadd_parts+0x1c8>
 880357c:	01800044 	movi	r6,1
 8803580:	500497fa 	slli	r2,r10,31
 8803584:	4808d07a 	srli	r4,r9,1
 8803588:	518ad83a 	srl	r5,r10,r6
 880358c:	a2000217 	ldw	r8,8(r20)
 8803590:	1108b03a 	or	r4,r2,r4
 8803594:	0007883a 	mov	r3,zero
 8803598:	4984703a 	and	r2,r9,r6
 880359c:	208cb03a 	or	r6,r4,r2
 88035a0:	28ceb03a 	or	r7,r5,r3
 88035a4:	42000044 	addi	r8,r8,1
 88035a8:	a027883a 	mov	r19,r20
 88035ac:	a1c00415 	stw	r7,16(r20)
 88035b0:	a2000215 	stw	r8,8(r20)
 88035b4:	a1800315 	stw	r6,12(r20)
 88035b8:	003fce06 	br	88034f4 <_fpadd_parts+0x1c8>
 88035bc:	8bc5c83a 	sub	r2,r17,r15
 88035c0:	8889803a 	cmpltu	r4,r17,r2
 88035c4:	9407c83a 	sub	r3,r18,r16
 88035c8:	1909c83a 	sub	r4,r3,r4
 88035cc:	100d883a 	mov	r6,r2
 88035d0:	200f883a 	mov	r7,r4
 88035d4:	003f9906 	br	880343c <_fpadd_parts+0x110>
 88035d8:	7c45883a 	add	r2,r15,r17
 88035dc:	13c9803a 	cmpltu	r4,r2,r15
 88035e0:	8487883a 	add	r3,r16,r18
 88035e4:	20c9883a 	add	r4,r4,r3
 88035e8:	a1400115 	stw	r5,4(r20)
 88035ec:	a5c00215 	stw	r23,8(r20)
 88035f0:	a0800315 	stw	r2,12(r20)
 88035f4:	a1000415 	stw	r4,16(r20)
 88035f8:	003fb606 	br	88034d4 <_fpadd_parts+0x1a8>
 88035fc:	001f883a 	mov	r15,zero
 8803600:	0021883a 	mov	r16,zero
 8803604:	003f8306 	br	8803414 <_fpadd_parts+0xe8>
 8803608:	018dc83a 	sub	r6,zero,r6
 880360c:	003f6706 	br	88033ac <_fpadd_parts+0x80>
 8803610:	00bfff84 	movi	r2,-2
 8803614:	117faf36 	bltu	r2,r5,88034d4 <_fpadd_parts+0x1a8>
 8803618:	003f9806 	br	880347c <_fpadd_parts+0x150>
 880361c:	0005883a 	mov	r2,zero
 8803620:	1189c83a 	sub	r4,r2,r6
 8803624:	1105803a 	cmpltu	r2,r2,r4
 8803628:	01cbc83a 	sub	r5,zero,r7
 880362c:	2885c83a 	sub	r2,r5,r2
 8803630:	01800044 	movi	r6,1
 8803634:	a1800115 	stw	r6,4(r20)
 8803638:	a5c00215 	stw	r23,8(r20)
 880363c:	a1000315 	stw	r4,12(r20)
 8803640:	a0800415 	stw	r2,16(r20)
 8803644:	003f8206 	br	8803450 <_fpadd_parts+0x124>
 8803648:	203f7226 	beq	r4,zero,8803414 <_fpadd_parts+0xe8>
 880364c:	35bff804 	addi	r22,r6,-32
 8803650:	b9af883a 	add	r23,r23,r6
 8803654:	b0003116 	blt	r22,zero,880371c <_fpadd_parts+0x3f0>
 8803658:	959ad83a 	srl	r13,r18,r22
 880365c:	001d883a 	mov	r14,zero
 8803660:	000f883a 	mov	r7,zero
 8803664:	01000044 	movi	r4,1
 8803668:	0011883a 	mov	r8,zero
 880366c:	b0002516 	blt	r22,zero,8803704 <_fpadd_parts+0x3d8>
 8803670:	2594983a 	sll	r10,r4,r22
 8803674:	0013883a 	mov	r9,zero
 8803678:	00bfffc4 	movi	r2,-1
 880367c:	4889883a 	add	r4,r9,r2
 8803680:	508b883a 	add	r5,r10,r2
 8803684:	224d803a 	cmpltu	r6,r4,r9
 8803688:	314b883a 	add	r5,r6,r5
 880368c:	8904703a 	and	r2,r17,r4
 8803690:	9146703a 	and	r3,r18,r5
 8803694:	10c4b03a 	or	r2,r2,r3
 8803698:	10000226 	beq	r2,zero,88036a4 <_fpadd_parts+0x378>
 880369c:	01c00044 	movi	r7,1
 88036a0:	0011883a 	mov	r8,zero
 88036a4:	69e2b03a 	or	r17,r13,r7
 88036a8:	7224b03a 	or	r18,r14,r8
 88036ac:	003f5906 	br	8803414 <_fpadd_parts+0xe8>
 88036b0:	8407883a 	add	r3,r16,r16
 88036b4:	008007c4 	movi	r2,31
 88036b8:	1185c83a 	sub	r2,r2,r6
 88036bc:	1886983a 	sll	r3,r3,r2
 88036c0:	7996d83a 	srl	r11,r15,r6
 88036c4:	8198d83a 	srl	r12,r16,r6
 88036c8:	1ad6b03a 	or	r11,r3,r11
 88036cc:	003f3e06 	br	88033c8 <_fpadd_parts+0x9c>
 88036d0:	2006d07a 	srli	r3,r4,1
 88036d4:	008007c4 	movi	r2,31
 88036d8:	1185c83a 	sub	r2,r2,r6
 88036dc:	1890d83a 	srl	r8,r3,r2
 88036e0:	218e983a 	sll	r7,r4,r6
 88036e4:	003f3e06 	br	88033e0 <_fpadd_parts+0xb4>
 88036e8:	113f821e 	bne	r2,r4,88034f4 <_fpadd_parts+0x1c8>
 88036ec:	28c00117 	ldw	r3,4(r5)
 88036f0:	98800117 	ldw	r2,4(r19)
 88036f4:	10ff7f26 	beq	r2,r3,88034f4 <_fpadd_parts+0x1c8>
 88036f8:	04c22074 	movhi	r19,2177
 88036fc:	9cc65d04 	addi	r19,r19,6516
 8803700:	003f7c06 	br	88034f4 <_fpadd_parts+0x1c8>
 8803704:	2006d07a 	srli	r3,r4,1
 8803708:	008007c4 	movi	r2,31
 880370c:	1185c83a 	sub	r2,r2,r6
 8803710:	1894d83a 	srl	r10,r3,r2
 8803714:	2192983a 	sll	r9,r4,r6
 8803718:	003fd706 	br	8803678 <_fpadd_parts+0x34c>
 880371c:	9487883a 	add	r3,r18,r18
 8803720:	008007c4 	movi	r2,31
 8803724:	1185c83a 	sub	r2,r2,r6
 8803728:	1886983a 	sll	r3,r3,r2
 880372c:	899ad83a 	srl	r13,r17,r6
 8803730:	919cd83a 	srl	r14,r18,r6
 8803734:	1b5ab03a 	or	r13,r3,r13
 8803738:	003fc906 	br	8803660 <_fpadd_parts+0x334>

0880373c <__subdf3>:
 880373c:	deffea04 	addi	sp,sp,-88
 8803740:	dcc01415 	stw	r19,80(sp)
 8803744:	dcc00404 	addi	r19,sp,16
 8803748:	2011883a 	mov	r8,r4
 880374c:	2813883a 	mov	r9,r5
 8803750:	dc401315 	stw	r17,76(sp)
 8803754:	d809883a 	mov	r4,sp
 8803758:	980b883a 	mov	r5,r19
 880375c:	dc400904 	addi	r17,sp,36
 8803760:	dfc01515 	stw	ra,84(sp)
 8803764:	da400115 	stw	r9,4(sp)
 8803768:	d9c00315 	stw	r7,12(sp)
 880376c:	da000015 	stw	r8,0(sp)
 8803770:	d9800215 	stw	r6,8(sp)
 8803774:	8804b0c0 	call	8804b0c <__unpack_d>
 8803778:	d9000204 	addi	r4,sp,8
 880377c:	880b883a 	mov	r5,r17
 8803780:	8804b0c0 	call	8804b0c <__unpack_d>
 8803784:	d8800a17 	ldw	r2,40(sp)
 8803788:	880b883a 	mov	r5,r17
 880378c:	9809883a 	mov	r4,r19
 8803790:	d9800e04 	addi	r6,sp,56
 8803794:	1080005c 	xori	r2,r2,1
 8803798:	d8800a15 	stw	r2,40(sp)
 880379c:	880332c0 	call	880332c <_fpadd_parts>
 88037a0:	1009883a 	mov	r4,r2
 88037a4:	88047f80 	call	88047f8 <__pack_d>
 88037a8:	dfc01517 	ldw	ra,84(sp)
 88037ac:	dcc01417 	ldw	r19,80(sp)
 88037b0:	dc401317 	ldw	r17,76(sp)
 88037b4:	dec01604 	addi	sp,sp,88
 88037b8:	f800283a 	ret

088037bc <__adddf3>:
 88037bc:	deffea04 	addi	sp,sp,-88
 88037c0:	dcc01415 	stw	r19,80(sp)
 88037c4:	dcc00404 	addi	r19,sp,16
 88037c8:	2011883a 	mov	r8,r4
 88037cc:	2813883a 	mov	r9,r5
 88037d0:	dc401315 	stw	r17,76(sp)
 88037d4:	d809883a 	mov	r4,sp
 88037d8:	980b883a 	mov	r5,r19
 88037dc:	dc400904 	addi	r17,sp,36
 88037e0:	dfc01515 	stw	ra,84(sp)
 88037e4:	da400115 	stw	r9,4(sp)
 88037e8:	d9c00315 	stw	r7,12(sp)
 88037ec:	da000015 	stw	r8,0(sp)
 88037f0:	d9800215 	stw	r6,8(sp)
 88037f4:	8804b0c0 	call	8804b0c <__unpack_d>
 88037f8:	d9000204 	addi	r4,sp,8
 88037fc:	880b883a 	mov	r5,r17
 8803800:	8804b0c0 	call	8804b0c <__unpack_d>
 8803804:	d9800e04 	addi	r6,sp,56
 8803808:	9809883a 	mov	r4,r19
 880380c:	880b883a 	mov	r5,r17
 8803810:	880332c0 	call	880332c <_fpadd_parts>
 8803814:	1009883a 	mov	r4,r2
 8803818:	88047f80 	call	88047f8 <__pack_d>
 880381c:	dfc01517 	ldw	ra,84(sp)
 8803820:	dcc01417 	ldw	r19,80(sp)
 8803824:	dc401317 	ldw	r17,76(sp)
 8803828:	dec01604 	addi	sp,sp,88
 880382c:	f800283a 	ret

08803830 <__muldf3>:
 8803830:	deffe004 	addi	sp,sp,-128
 8803834:	dc401815 	stw	r17,96(sp)
 8803838:	dc400404 	addi	r17,sp,16
 880383c:	2011883a 	mov	r8,r4
 8803840:	2813883a 	mov	r9,r5
 8803844:	dc001715 	stw	r16,92(sp)
 8803848:	d809883a 	mov	r4,sp
 880384c:	880b883a 	mov	r5,r17
 8803850:	dc000904 	addi	r16,sp,36
 8803854:	dfc01f15 	stw	ra,124(sp)
 8803858:	da400115 	stw	r9,4(sp)
 880385c:	d9c00315 	stw	r7,12(sp)
 8803860:	da000015 	stw	r8,0(sp)
 8803864:	d9800215 	stw	r6,8(sp)
 8803868:	ddc01e15 	stw	r23,120(sp)
 880386c:	dd801d15 	stw	r22,116(sp)
 8803870:	dd401c15 	stw	r21,112(sp)
 8803874:	dd001b15 	stw	r20,108(sp)
 8803878:	dcc01a15 	stw	r19,104(sp)
 880387c:	dc801915 	stw	r18,100(sp)
 8803880:	8804b0c0 	call	8804b0c <__unpack_d>
 8803884:	d9000204 	addi	r4,sp,8
 8803888:	800b883a 	mov	r5,r16
 880388c:	8804b0c0 	call	8804b0c <__unpack_d>
 8803890:	d9000417 	ldw	r4,16(sp)
 8803894:	00800044 	movi	r2,1
 8803898:	1100102e 	bgeu	r2,r4,88038dc <__muldf3+0xac>
 880389c:	d8c00917 	ldw	r3,36(sp)
 88038a0:	10c0062e 	bgeu	r2,r3,88038bc <__muldf3+0x8c>
 88038a4:	00800104 	movi	r2,4
 88038a8:	20800a26 	beq	r4,r2,88038d4 <__muldf3+0xa4>
 88038ac:	1880cc26 	beq	r3,r2,8803be0 <__muldf3+0x3b0>
 88038b0:	00800084 	movi	r2,2
 88038b4:	20800926 	beq	r4,r2,88038dc <__muldf3+0xac>
 88038b8:	1880191e 	bne	r3,r2,8803920 <__muldf3+0xf0>
 88038bc:	d8c00a17 	ldw	r3,40(sp)
 88038c0:	d8800517 	ldw	r2,20(sp)
 88038c4:	8009883a 	mov	r4,r16
 88038c8:	10c4c03a 	cmpne	r2,r2,r3
 88038cc:	d8800a15 	stw	r2,40(sp)
 88038d0:	00000706 	br	88038f0 <__muldf3+0xc0>
 88038d4:	00800084 	movi	r2,2
 88038d8:	1880c326 	beq	r3,r2,8803be8 <__muldf3+0x3b8>
 88038dc:	d8800517 	ldw	r2,20(sp)
 88038e0:	d8c00a17 	ldw	r3,40(sp)
 88038e4:	8809883a 	mov	r4,r17
 88038e8:	10c4c03a 	cmpne	r2,r2,r3
 88038ec:	d8800515 	stw	r2,20(sp)
 88038f0:	88047f80 	call	88047f8 <__pack_d>
 88038f4:	dfc01f17 	ldw	ra,124(sp)
 88038f8:	ddc01e17 	ldw	r23,120(sp)
 88038fc:	dd801d17 	ldw	r22,116(sp)
 8803900:	dd401c17 	ldw	r21,112(sp)
 8803904:	dd001b17 	ldw	r20,108(sp)
 8803908:	dcc01a17 	ldw	r19,104(sp)
 880390c:	dc801917 	ldw	r18,100(sp)
 8803910:	dc401817 	ldw	r17,96(sp)
 8803914:	dc001717 	ldw	r16,92(sp)
 8803918:	dec02004 	addi	sp,sp,128
 880391c:	f800283a 	ret
 8803920:	dd800717 	ldw	r22,28(sp)
 8803924:	dc800c17 	ldw	r18,48(sp)
 8803928:	002b883a 	mov	r21,zero
 880392c:	0023883a 	mov	r17,zero
 8803930:	a80b883a 	mov	r5,r21
 8803934:	b00d883a 	mov	r6,r22
 8803938:	880f883a 	mov	r7,r17
 880393c:	ddc00817 	ldw	r23,32(sp)
 8803940:	dcc00d17 	ldw	r19,52(sp)
 8803944:	9009883a 	mov	r4,r18
 8803948:	88043e40 	call	88043e4 <__muldi3>
 880394c:	001b883a 	mov	r13,zero
 8803950:	680f883a 	mov	r7,r13
 8803954:	b009883a 	mov	r4,r22
 8803958:	000b883a 	mov	r5,zero
 880395c:	980d883a 	mov	r6,r19
 8803960:	b82d883a 	mov	r22,r23
 8803964:	002f883a 	mov	r23,zero
 8803968:	db401615 	stw	r13,88(sp)
 880396c:	d8801315 	stw	r2,76(sp)
 8803970:	d8c01415 	stw	r3,80(sp)
 8803974:	dcc01515 	stw	r19,84(sp)
 8803978:	88043e40 	call	88043e4 <__muldi3>
 880397c:	b00d883a 	mov	r6,r22
 8803980:	000b883a 	mov	r5,zero
 8803984:	9009883a 	mov	r4,r18
 8803988:	b80f883a 	mov	r7,r23
 880398c:	1021883a 	mov	r16,r2
 8803990:	1823883a 	mov	r17,r3
 8803994:	88043e40 	call	88043e4 <__muldi3>
 8803998:	8085883a 	add	r2,r16,r2
 880399c:	140d803a 	cmpltu	r6,r2,r16
 88039a0:	88c7883a 	add	r3,r17,r3
 88039a4:	30cd883a 	add	r6,r6,r3
 88039a8:	1029883a 	mov	r20,r2
 88039ac:	302b883a 	mov	r21,r6
 88039b0:	da801317 	ldw	r10,76(sp)
 88039b4:	dac01417 	ldw	r11,80(sp)
 88039b8:	db001517 	ldw	r12,84(sp)
 88039bc:	db401617 	ldw	r13,88(sp)
 88039c0:	3440612e 	bgeu	r6,r17,8803b48 <__muldf3+0x318>
 88039c4:	0009883a 	mov	r4,zero
 88039c8:	5105883a 	add	r2,r10,r4
 88039cc:	128d803a 	cmpltu	r6,r2,r10
 88039d0:	5d07883a 	add	r3,r11,r20
 88039d4:	30cd883a 	add	r6,r6,r3
 88039d8:	0021883a 	mov	r16,zero
 88039dc:	04400044 	movi	r17,1
 88039e0:	1025883a 	mov	r18,r2
 88039e4:	3027883a 	mov	r19,r6
 88039e8:	32c06236 	bltu	r6,r11,8803b74 <__muldf3+0x344>
 88039ec:	59807a26 	beq	r11,r6,8803bd8 <__muldf3+0x3a8>
 88039f0:	680b883a 	mov	r5,r13
 88039f4:	b80f883a 	mov	r7,r23
 88039f8:	6009883a 	mov	r4,r12
 88039fc:	b00d883a 	mov	r6,r22
 8803a00:	88043e40 	call	88043e4 <__muldi3>
 8803a04:	1009883a 	mov	r4,r2
 8803a08:	000f883a 	mov	r7,zero
 8803a0c:	1545883a 	add	r2,r2,r21
 8803a10:	1111803a 	cmpltu	r8,r2,r4
 8803a14:	19c7883a 	add	r3,r3,r7
 8803a18:	40c7883a 	add	r3,r8,r3
 8803a1c:	88cb883a 	add	r5,r17,r3
 8803a20:	d8c00617 	ldw	r3,24(sp)
 8803a24:	8089883a 	add	r4,r16,r2
 8803a28:	d8800b17 	ldw	r2,44(sp)
 8803a2c:	18c00104 	addi	r3,r3,4
 8803a30:	240d803a 	cmpltu	r6,r4,r16
 8803a34:	10c7883a 	add	r3,r2,r3
 8803a38:	2013883a 	mov	r9,r4
 8803a3c:	d8800a17 	ldw	r2,40(sp)
 8803a40:	d9000517 	ldw	r4,20(sp)
 8803a44:	314d883a 	add	r6,r6,r5
 8803a48:	3015883a 	mov	r10,r6
 8803a4c:	2088c03a 	cmpne	r4,r4,r2
 8803a50:	00880034 	movhi	r2,8192
 8803a54:	10bfffc4 	addi	r2,r2,-1
 8803a58:	d9000f15 	stw	r4,60(sp)
 8803a5c:	d8c01015 	stw	r3,64(sp)
 8803a60:	1180162e 	bgeu	r2,r6,8803abc <__muldf3+0x28c>
 8803a64:	1811883a 	mov	r8,r3
 8803a68:	101f883a 	mov	r15,r2
 8803a6c:	980497fa 	slli	r2,r19,31
 8803a70:	9016d07a 	srli	r11,r18,1
 8803a74:	500697fa 	slli	r3,r10,31
 8803a78:	480cd07a 	srli	r6,r9,1
 8803a7c:	500ed07a 	srli	r7,r10,1
 8803a80:	12d6b03a 	or	r11,r2,r11
 8803a84:	00800044 	movi	r2,1
 8803a88:	198cb03a 	or	r6,r3,r6
 8803a8c:	4888703a 	and	r4,r9,r2
 8803a90:	9818d07a 	srli	r12,r19,1
 8803a94:	001b883a 	mov	r13,zero
 8803a98:	03a00034 	movhi	r14,32768
 8803a9c:	3013883a 	mov	r9,r6
 8803aa0:	3815883a 	mov	r10,r7
 8803aa4:	4091883a 	add	r8,r8,r2
 8803aa8:	20000226 	beq	r4,zero,8803ab4 <__muldf3+0x284>
 8803aac:	5b64b03a 	or	r18,r11,r13
 8803ab0:	63a6b03a 	or	r19,r12,r14
 8803ab4:	7abfed36 	bltu	r15,r10,8803a6c <__muldf3+0x23c>
 8803ab8:	da001015 	stw	r8,64(sp)
 8803abc:	00840034 	movhi	r2,4096
 8803ac0:	10bfffc4 	addi	r2,r2,-1
 8803ac4:	12801436 	bltu	r2,r10,8803b18 <__muldf3+0x2e8>
 8803ac8:	da001017 	ldw	r8,64(sp)
 8803acc:	101f883a 	mov	r15,r2
 8803ad0:	4a45883a 	add	r2,r9,r9
 8803ad4:	124d803a 	cmpltu	r6,r2,r9
 8803ad8:	5287883a 	add	r3,r10,r10
 8803adc:	9497883a 	add	r11,r18,r18
 8803ae0:	5c8f803a 	cmpltu	r7,r11,r18
 8803ae4:	9cd9883a 	add	r12,r19,r19
 8803ae8:	01000044 	movi	r4,1
 8803aec:	30cd883a 	add	r6,r6,r3
 8803af0:	3b0f883a 	add	r7,r7,r12
 8803af4:	423fffc4 	addi	r8,r8,-1
 8803af8:	1013883a 	mov	r9,r2
 8803afc:	3015883a 	mov	r10,r6
 8803b00:	111ab03a 	or	r13,r2,r4
 8803b04:	98003016 	blt	r19,zero,8803bc8 <__muldf3+0x398>
 8803b08:	5825883a 	mov	r18,r11
 8803b0c:	3827883a 	mov	r19,r7
 8803b10:	7abfef2e 	bgeu	r15,r10,8803ad0 <__muldf3+0x2a0>
 8803b14:	da001015 	stw	r8,64(sp)
 8803b18:	00803fc4 	movi	r2,255
 8803b1c:	488e703a 	and	r7,r9,r2
 8803b20:	00802004 	movi	r2,128
 8803b24:	0007883a 	mov	r3,zero
 8803b28:	0011883a 	mov	r8,zero
 8803b2c:	38801826 	beq	r7,r2,8803b90 <__muldf3+0x360>
 8803b30:	008000c4 	movi	r2,3
 8803b34:	d9000e04 	addi	r4,sp,56
 8803b38:	da801215 	stw	r10,72(sp)
 8803b3c:	d8800e15 	stw	r2,56(sp)
 8803b40:	da401115 	stw	r9,68(sp)
 8803b44:	003f6a06 	br	88038f0 <__muldf3+0xc0>
 8803b48:	89802126 	beq	r17,r6,8803bd0 <__muldf3+0x3a0>
 8803b4c:	0009883a 	mov	r4,zero
 8803b50:	5105883a 	add	r2,r10,r4
 8803b54:	128d803a 	cmpltu	r6,r2,r10
 8803b58:	5d07883a 	add	r3,r11,r20
 8803b5c:	30cd883a 	add	r6,r6,r3
 8803b60:	0021883a 	mov	r16,zero
 8803b64:	0023883a 	mov	r17,zero
 8803b68:	1025883a 	mov	r18,r2
 8803b6c:	3027883a 	mov	r19,r6
 8803b70:	32ff9e2e 	bgeu	r6,r11,88039ec <__muldf3+0x1bc>
 8803b74:	00800044 	movi	r2,1
 8803b78:	8089883a 	add	r4,r16,r2
 8803b7c:	240d803a 	cmpltu	r6,r4,r16
 8803b80:	344d883a 	add	r6,r6,r17
 8803b84:	2021883a 	mov	r16,r4
 8803b88:	3023883a 	mov	r17,r6
 8803b8c:	003f9806 	br	88039f0 <__muldf3+0x1c0>
 8803b90:	403fe71e 	bne	r8,zero,8803b30 <__muldf3+0x300>
 8803b94:	01004004 	movi	r4,256
 8803b98:	4904703a 	and	r2,r9,r4
 8803b9c:	10c4b03a 	or	r2,r2,r3
 8803ba0:	103fe31e 	bne	r2,zero,8803b30 <__muldf3+0x300>
 8803ba4:	94c4b03a 	or	r2,r18,r19
 8803ba8:	103fe126 	beq	r2,zero,8803b30 <__muldf3+0x300>
 8803bac:	49c5883a 	add	r2,r9,r7
 8803bb0:	1251803a 	cmpltu	r8,r2,r9
 8803bb4:	4291883a 	add	r8,r8,r10
 8803bb8:	013fc004 	movi	r4,-256
 8803bbc:	1112703a 	and	r9,r2,r4
 8803bc0:	4015883a 	mov	r10,r8
 8803bc4:	003fda06 	br	8803b30 <__muldf3+0x300>
 8803bc8:	6813883a 	mov	r9,r13
 8803bcc:	003fce06 	br	8803b08 <__muldf3+0x2d8>
 8803bd0:	143f7c36 	bltu	r2,r16,88039c4 <__muldf3+0x194>
 8803bd4:	003fdd06 	br	8803b4c <__muldf3+0x31c>
 8803bd8:	12bf852e 	bgeu	r2,r10,88039f0 <__muldf3+0x1c0>
 8803bdc:	003fe506 	br	8803b74 <__muldf3+0x344>
 8803be0:	00800084 	movi	r2,2
 8803be4:	20bf351e 	bne	r4,r2,88038bc <__muldf3+0x8c>
 8803be8:	01022074 	movhi	r4,2177
 8803bec:	21065d04 	addi	r4,r4,6516
 8803bf0:	003f3f06 	br	88038f0 <__muldf3+0xc0>

08803bf4 <__divdf3>:
 8803bf4:	deffed04 	addi	sp,sp,-76
 8803bf8:	dcc01115 	stw	r19,68(sp)
 8803bfc:	dcc00404 	addi	r19,sp,16
 8803c00:	2011883a 	mov	r8,r4
 8803c04:	2813883a 	mov	r9,r5
 8803c08:	dc000e15 	stw	r16,56(sp)
 8803c0c:	d809883a 	mov	r4,sp
 8803c10:	980b883a 	mov	r5,r19
 8803c14:	dc000904 	addi	r16,sp,36
 8803c18:	dfc01215 	stw	ra,72(sp)
 8803c1c:	da400115 	stw	r9,4(sp)
 8803c20:	d9c00315 	stw	r7,12(sp)
 8803c24:	da000015 	stw	r8,0(sp)
 8803c28:	d9800215 	stw	r6,8(sp)
 8803c2c:	dc801015 	stw	r18,64(sp)
 8803c30:	dc400f15 	stw	r17,60(sp)
 8803c34:	8804b0c0 	call	8804b0c <__unpack_d>
 8803c38:	d9000204 	addi	r4,sp,8
 8803c3c:	800b883a 	mov	r5,r16
 8803c40:	8804b0c0 	call	8804b0c <__unpack_d>
 8803c44:	d9000417 	ldw	r4,16(sp)
 8803c48:	00800044 	movi	r2,1
 8803c4c:	11000b2e 	bgeu	r2,r4,8803c7c <__divdf3+0x88>
 8803c50:	d9400917 	ldw	r5,36(sp)
 8803c54:	1140762e 	bgeu	r2,r5,8803e30 <__divdf3+0x23c>
 8803c58:	d8800517 	ldw	r2,20(sp)
 8803c5c:	d8c00a17 	ldw	r3,40(sp)
 8803c60:	01800104 	movi	r6,4
 8803c64:	10c4f03a 	xor	r2,r2,r3
 8803c68:	d8800515 	stw	r2,20(sp)
 8803c6c:	21800226 	beq	r4,r6,8803c78 <__divdf3+0x84>
 8803c70:	00800084 	movi	r2,2
 8803c74:	2080141e 	bne	r4,r2,8803cc8 <__divdf3+0xd4>
 8803c78:	29000926 	beq	r5,r4,8803ca0 <__divdf3+0xac>
 8803c7c:	9809883a 	mov	r4,r19
 8803c80:	88047f80 	call	88047f8 <__pack_d>
 8803c84:	dfc01217 	ldw	ra,72(sp)
 8803c88:	dcc01117 	ldw	r19,68(sp)
 8803c8c:	dc801017 	ldw	r18,64(sp)
 8803c90:	dc400f17 	ldw	r17,60(sp)
 8803c94:	dc000e17 	ldw	r16,56(sp)
 8803c98:	dec01304 	addi	sp,sp,76
 8803c9c:	f800283a 	ret
 8803ca0:	01022074 	movhi	r4,2177
 8803ca4:	21065d04 	addi	r4,r4,6516
 8803ca8:	88047f80 	call	88047f8 <__pack_d>
 8803cac:	dfc01217 	ldw	ra,72(sp)
 8803cb0:	dcc01117 	ldw	r19,68(sp)
 8803cb4:	dc801017 	ldw	r18,64(sp)
 8803cb8:	dc400f17 	ldw	r17,60(sp)
 8803cbc:	dc000e17 	ldw	r16,56(sp)
 8803cc0:	dec01304 	addi	sp,sp,76
 8803cc4:	f800283a 	ret
 8803cc8:	29805b26 	beq	r5,r6,8803e38 <__divdf3+0x244>
 8803ccc:	28802d26 	beq	r5,r2,8803d84 <__divdf3+0x190>
 8803cd0:	d8c00617 	ldw	r3,24(sp)
 8803cd4:	d8800b17 	ldw	r2,44(sp)
 8803cd8:	d9c00817 	ldw	r7,32(sp)
 8803cdc:	dc400d17 	ldw	r17,52(sp)
 8803ce0:	188bc83a 	sub	r5,r3,r2
 8803ce4:	d9800717 	ldw	r6,28(sp)
 8803ce8:	dc000c17 	ldw	r16,48(sp)
 8803cec:	d9400615 	stw	r5,24(sp)
 8803cf0:	3c403836 	bltu	r7,r17,8803dd4 <__divdf3+0x1e0>
 8803cf4:	89c03626 	beq	r17,r7,8803dd0 <__divdf3+0x1dc>
 8803cf8:	0015883a 	mov	r10,zero
 8803cfc:	001d883a 	mov	r14,zero
 8803d00:	02c40034 	movhi	r11,4096
 8803d04:	001f883a 	mov	r15,zero
 8803d08:	003f883a 	mov	ra,zero
 8803d0c:	04800f44 	movi	r18,61
 8803d10:	00000f06 	br	8803d50 <__divdf3+0x15c>
 8803d14:	601d883a 	mov	r14,r12
 8803d18:	681f883a 	mov	r15,r13
 8803d1c:	400d883a 	mov	r6,r8
 8803d20:	100f883a 	mov	r7,r2
 8803d24:	3191883a 	add	r8,r6,r6
 8803d28:	5808d07a 	srli	r4,r11,1
 8803d2c:	4185803a 	cmpltu	r2,r8,r6
 8803d30:	39d3883a 	add	r9,r7,r7
 8803d34:	28c6b03a 	or	r3,r5,r3
 8803d38:	1245883a 	add	r2,r2,r9
 8803d3c:	1815883a 	mov	r10,r3
 8803d40:	2017883a 	mov	r11,r4
 8803d44:	400d883a 	mov	r6,r8
 8803d48:	100f883a 	mov	r7,r2
 8803d4c:	fc801726 	beq	ra,r18,8803dac <__divdf3+0x1b8>
 8803d50:	580a97fa 	slli	r5,r11,31
 8803d54:	5006d07a 	srli	r3,r10,1
 8803d58:	ffc00044 	addi	ra,ra,1
 8803d5c:	3c7ff136 	bltu	r7,r17,8803d24 <__divdf3+0x130>
 8803d60:	3411c83a 	sub	r8,r6,r16
 8803d64:	3205803a 	cmpltu	r2,r6,r8
 8803d68:	3c53c83a 	sub	r9,r7,r17
 8803d6c:	7298b03a 	or	r12,r14,r10
 8803d70:	7adab03a 	or	r13,r15,r11
 8803d74:	4885c83a 	sub	r2,r9,r2
 8803d78:	89ffe61e 	bne	r17,r7,8803d14 <__divdf3+0x120>
 8803d7c:	343fe936 	bltu	r6,r16,8803d24 <__divdf3+0x130>
 8803d80:	003fe406 	br	8803d14 <__divdf3+0x120>
 8803d84:	9809883a 	mov	r4,r19
 8803d88:	d9800415 	stw	r6,16(sp)
 8803d8c:	88047f80 	call	88047f8 <__pack_d>
 8803d90:	dfc01217 	ldw	ra,72(sp)
 8803d94:	dcc01117 	ldw	r19,68(sp)
 8803d98:	dc801017 	ldw	r18,64(sp)
 8803d9c:	dc400f17 	ldw	r17,60(sp)
 8803da0:	dc000e17 	ldw	r16,56(sp)
 8803da4:	dec01304 	addi	sp,sp,76
 8803da8:	f800283a 	ret
 8803dac:	00803fc4 	movi	r2,255
 8803db0:	7090703a 	and	r8,r14,r2
 8803db4:	00802004 	movi	r2,128
 8803db8:	0007883a 	mov	r3,zero
 8803dbc:	0013883a 	mov	r9,zero
 8803dc0:	40800d26 	beq	r8,r2,8803df8 <__divdf3+0x204>
 8803dc4:	dbc00815 	stw	r15,32(sp)
 8803dc8:	db800715 	stw	r14,28(sp)
 8803dcc:	003fab06 	br	8803c7c <__divdf3+0x88>
 8803dd0:	343fc92e 	bgeu	r6,r16,8803cf8 <__divdf3+0x104>
 8803dd4:	3185883a 	add	r2,r6,r6
 8803dd8:	1189803a 	cmpltu	r4,r2,r6
 8803ddc:	39c7883a 	add	r3,r7,r7
 8803de0:	20c9883a 	add	r4,r4,r3
 8803de4:	297fffc4 	addi	r5,r5,-1
 8803de8:	100d883a 	mov	r6,r2
 8803dec:	200f883a 	mov	r7,r4
 8803df0:	d9400615 	stw	r5,24(sp)
 8803df4:	003fc006 	br	8803cf8 <__divdf3+0x104>
 8803df8:	483ff21e 	bne	r9,zero,8803dc4 <__divdf3+0x1d0>
 8803dfc:	01004004 	movi	r4,256
 8803e00:	7104703a 	and	r2,r14,r4
 8803e04:	10c4b03a 	or	r2,r2,r3
 8803e08:	103fee1e 	bne	r2,zero,8803dc4 <__divdf3+0x1d0>
 8803e0c:	31c4b03a 	or	r2,r6,r7
 8803e10:	103fec26 	beq	r2,zero,8803dc4 <__divdf3+0x1d0>
 8803e14:	7205883a 	add	r2,r14,r8
 8803e18:	1391803a 	cmpltu	r8,r2,r14
 8803e1c:	43d1883a 	add	r8,r8,r15
 8803e20:	013fc004 	movi	r4,-256
 8803e24:	111c703a 	and	r14,r2,r4
 8803e28:	401f883a 	mov	r15,r8
 8803e2c:	003fe506 	br	8803dc4 <__divdf3+0x1d0>
 8803e30:	8009883a 	mov	r4,r16
 8803e34:	003f9206 	br	8803c80 <__divdf3+0x8c>
 8803e38:	9809883a 	mov	r4,r19
 8803e3c:	d8000715 	stw	zero,28(sp)
 8803e40:	d8000815 	stw	zero,32(sp)
 8803e44:	d8000615 	stw	zero,24(sp)
 8803e48:	003f8d06 	br	8803c80 <__divdf3+0x8c>

08803e4c <__eqdf2>:
 8803e4c:	deffef04 	addi	sp,sp,-68
 8803e50:	dc400f15 	stw	r17,60(sp)
 8803e54:	dc400404 	addi	r17,sp,16
 8803e58:	2005883a 	mov	r2,r4
 8803e5c:	2807883a 	mov	r3,r5
 8803e60:	dc000e15 	stw	r16,56(sp)
 8803e64:	d809883a 	mov	r4,sp
 8803e68:	880b883a 	mov	r5,r17
 8803e6c:	dc000904 	addi	r16,sp,36
 8803e70:	d8c00115 	stw	r3,4(sp)
 8803e74:	d8800015 	stw	r2,0(sp)
 8803e78:	d9800215 	stw	r6,8(sp)
 8803e7c:	dfc01015 	stw	ra,64(sp)
 8803e80:	d9c00315 	stw	r7,12(sp)
 8803e84:	8804b0c0 	call	8804b0c <__unpack_d>
 8803e88:	d9000204 	addi	r4,sp,8
 8803e8c:	800b883a 	mov	r5,r16
 8803e90:	8804b0c0 	call	8804b0c <__unpack_d>
 8803e94:	d8800417 	ldw	r2,16(sp)
 8803e98:	00c00044 	movi	r3,1
 8803e9c:	180d883a 	mov	r6,r3
 8803ea0:	1880062e 	bgeu	r3,r2,8803ebc <__eqdf2+0x70>
 8803ea4:	d8800917 	ldw	r2,36(sp)
 8803ea8:	8809883a 	mov	r4,r17
 8803eac:	800b883a 	mov	r5,r16
 8803eb0:	1880022e 	bgeu	r3,r2,8803ebc <__eqdf2+0x70>
 8803eb4:	8804c440 	call	8804c44 <__fpcmp_parts_d>
 8803eb8:	100d883a 	mov	r6,r2
 8803ebc:	3005883a 	mov	r2,r6
 8803ec0:	dfc01017 	ldw	ra,64(sp)
 8803ec4:	dc400f17 	ldw	r17,60(sp)
 8803ec8:	dc000e17 	ldw	r16,56(sp)
 8803ecc:	dec01104 	addi	sp,sp,68
 8803ed0:	f800283a 	ret

08803ed4 <__nedf2>:
 8803ed4:	deffef04 	addi	sp,sp,-68
 8803ed8:	dc400f15 	stw	r17,60(sp)
 8803edc:	dc400404 	addi	r17,sp,16
 8803ee0:	2005883a 	mov	r2,r4
 8803ee4:	2807883a 	mov	r3,r5
 8803ee8:	dc000e15 	stw	r16,56(sp)
 8803eec:	d809883a 	mov	r4,sp
 8803ef0:	880b883a 	mov	r5,r17
 8803ef4:	dc000904 	addi	r16,sp,36
 8803ef8:	d8c00115 	stw	r3,4(sp)
 8803efc:	d8800015 	stw	r2,0(sp)
 8803f00:	d9800215 	stw	r6,8(sp)
 8803f04:	dfc01015 	stw	ra,64(sp)
 8803f08:	d9c00315 	stw	r7,12(sp)
 8803f0c:	8804b0c0 	call	8804b0c <__unpack_d>
 8803f10:	d9000204 	addi	r4,sp,8
 8803f14:	800b883a 	mov	r5,r16
 8803f18:	8804b0c0 	call	8804b0c <__unpack_d>
 8803f1c:	d8800417 	ldw	r2,16(sp)
 8803f20:	00c00044 	movi	r3,1
 8803f24:	180d883a 	mov	r6,r3
 8803f28:	1880062e 	bgeu	r3,r2,8803f44 <__nedf2+0x70>
 8803f2c:	d8800917 	ldw	r2,36(sp)
 8803f30:	8809883a 	mov	r4,r17
 8803f34:	800b883a 	mov	r5,r16
 8803f38:	1880022e 	bgeu	r3,r2,8803f44 <__nedf2+0x70>
 8803f3c:	8804c440 	call	8804c44 <__fpcmp_parts_d>
 8803f40:	100d883a 	mov	r6,r2
 8803f44:	3005883a 	mov	r2,r6
 8803f48:	dfc01017 	ldw	ra,64(sp)
 8803f4c:	dc400f17 	ldw	r17,60(sp)
 8803f50:	dc000e17 	ldw	r16,56(sp)
 8803f54:	dec01104 	addi	sp,sp,68
 8803f58:	f800283a 	ret

08803f5c <__gtdf2>:
 8803f5c:	deffef04 	addi	sp,sp,-68
 8803f60:	dc400f15 	stw	r17,60(sp)
 8803f64:	dc400404 	addi	r17,sp,16
 8803f68:	2005883a 	mov	r2,r4
 8803f6c:	2807883a 	mov	r3,r5
 8803f70:	dc000e15 	stw	r16,56(sp)
 8803f74:	d809883a 	mov	r4,sp
 8803f78:	880b883a 	mov	r5,r17
 8803f7c:	dc000904 	addi	r16,sp,36
 8803f80:	d8c00115 	stw	r3,4(sp)
 8803f84:	d8800015 	stw	r2,0(sp)
 8803f88:	d9800215 	stw	r6,8(sp)
 8803f8c:	dfc01015 	stw	ra,64(sp)
 8803f90:	d9c00315 	stw	r7,12(sp)
 8803f94:	8804b0c0 	call	8804b0c <__unpack_d>
 8803f98:	d9000204 	addi	r4,sp,8
 8803f9c:	800b883a 	mov	r5,r16
 8803fa0:	8804b0c0 	call	8804b0c <__unpack_d>
 8803fa4:	d8800417 	ldw	r2,16(sp)
 8803fa8:	00c00044 	movi	r3,1
 8803fac:	01bfffc4 	movi	r6,-1
 8803fb0:	1880062e 	bgeu	r3,r2,8803fcc <__gtdf2+0x70>
 8803fb4:	d8800917 	ldw	r2,36(sp)
 8803fb8:	8809883a 	mov	r4,r17
 8803fbc:	800b883a 	mov	r5,r16
 8803fc0:	1880022e 	bgeu	r3,r2,8803fcc <__gtdf2+0x70>
 8803fc4:	8804c440 	call	8804c44 <__fpcmp_parts_d>
 8803fc8:	100d883a 	mov	r6,r2
 8803fcc:	3005883a 	mov	r2,r6
 8803fd0:	dfc01017 	ldw	ra,64(sp)
 8803fd4:	dc400f17 	ldw	r17,60(sp)
 8803fd8:	dc000e17 	ldw	r16,56(sp)
 8803fdc:	dec01104 	addi	sp,sp,68
 8803fe0:	f800283a 	ret

08803fe4 <__ltdf2>:
 8803fe4:	deffef04 	addi	sp,sp,-68
 8803fe8:	dc400f15 	stw	r17,60(sp)
 8803fec:	dc400404 	addi	r17,sp,16
 8803ff0:	2005883a 	mov	r2,r4
 8803ff4:	2807883a 	mov	r3,r5
 8803ff8:	dc000e15 	stw	r16,56(sp)
 8803ffc:	d809883a 	mov	r4,sp
 8804000:	880b883a 	mov	r5,r17
 8804004:	dc000904 	addi	r16,sp,36
 8804008:	d8c00115 	stw	r3,4(sp)
 880400c:	d8800015 	stw	r2,0(sp)
 8804010:	d9800215 	stw	r6,8(sp)
 8804014:	dfc01015 	stw	ra,64(sp)
 8804018:	d9c00315 	stw	r7,12(sp)
 880401c:	8804b0c0 	call	8804b0c <__unpack_d>
 8804020:	d9000204 	addi	r4,sp,8
 8804024:	800b883a 	mov	r5,r16
 8804028:	8804b0c0 	call	8804b0c <__unpack_d>
 880402c:	d8800417 	ldw	r2,16(sp)
 8804030:	00c00044 	movi	r3,1
 8804034:	180d883a 	mov	r6,r3
 8804038:	1880062e 	bgeu	r3,r2,8804054 <__ltdf2+0x70>
 880403c:	d8800917 	ldw	r2,36(sp)
 8804040:	8809883a 	mov	r4,r17
 8804044:	800b883a 	mov	r5,r16
 8804048:	1880022e 	bgeu	r3,r2,8804054 <__ltdf2+0x70>
 880404c:	8804c440 	call	8804c44 <__fpcmp_parts_d>
 8804050:	100d883a 	mov	r6,r2
 8804054:	3005883a 	mov	r2,r6
 8804058:	dfc01017 	ldw	ra,64(sp)
 880405c:	dc400f17 	ldw	r17,60(sp)
 8804060:	dc000e17 	ldw	r16,56(sp)
 8804064:	dec01104 	addi	sp,sp,68
 8804068:	f800283a 	ret

0880406c <__ledf2>:
 880406c:	deffef04 	addi	sp,sp,-68
 8804070:	dc400f15 	stw	r17,60(sp)
 8804074:	dc400404 	addi	r17,sp,16
 8804078:	2005883a 	mov	r2,r4
 880407c:	2807883a 	mov	r3,r5
 8804080:	dc000e15 	stw	r16,56(sp)
 8804084:	d809883a 	mov	r4,sp
 8804088:	880b883a 	mov	r5,r17
 880408c:	dc000904 	addi	r16,sp,36
 8804090:	d8c00115 	stw	r3,4(sp)
 8804094:	d8800015 	stw	r2,0(sp)
 8804098:	d9800215 	stw	r6,8(sp)
 880409c:	dfc01015 	stw	ra,64(sp)
 88040a0:	d9c00315 	stw	r7,12(sp)
 88040a4:	8804b0c0 	call	8804b0c <__unpack_d>
 88040a8:	d9000204 	addi	r4,sp,8
 88040ac:	800b883a 	mov	r5,r16
 88040b0:	8804b0c0 	call	8804b0c <__unpack_d>
 88040b4:	d8800417 	ldw	r2,16(sp)
 88040b8:	00c00044 	movi	r3,1
 88040bc:	180d883a 	mov	r6,r3
 88040c0:	1880062e 	bgeu	r3,r2,88040dc <__ledf2+0x70>
 88040c4:	d8800917 	ldw	r2,36(sp)
 88040c8:	8809883a 	mov	r4,r17
 88040cc:	800b883a 	mov	r5,r16
 88040d0:	1880022e 	bgeu	r3,r2,88040dc <__ledf2+0x70>
 88040d4:	8804c440 	call	8804c44 <__fpcmp_parts_d>
 88040d8:	100d883a 	mov	r6,r2
 88040dc:	3005883a 	mov	r2,r6
 88040e0:	dfc01017 	ldw	ra,64(sp)
 88040e4:	dc400f17 	ldw	r17,60(sp)
 88040e8:	dc000e17 	ldw	r16,56(sp)
 88040ec:	dec01104 	addi	sp,sp,68
 88040f0:	f800283a 	ret

088040f4 <__floatsidf>:
 88040f4:	2006d7fa 	srli	r3,r4,31
 88040f8:	defff604 	addi	sp,sp,-40
 88040fc:	008000c4 	movi	r2,3
 8804100:	dfc00915 	stw	ra,36(sp)
 8804104:	dcc00815 	stw	r19,32(sp)
 8804108:	dc800715 	stw	r18,28(sp)
 880410c:	dc400615 	stw	r17,24(sp)
 8804110:	dc000515 	stw	r16,20(sp)
 8804114:	d8800015 	stw	r2,0(sp)
 8804118:	d8c00115 	stw	r3,4(sp)
 880411c:	20000f1e 	bne	r4,zero,880415c <__floatsidf+0x68>
 8804120:	00800084 	movi	r2,2
 8804124:	d8800015 	stw	r2,0(sp)
 8804128:	d809883a 	mov	r4,sp
 880412c:	88047f80 	call	88047f8 <__pack_d>
 8804130:	1009883a 	mov	r4,r2
 8804134:	180b883a 	mov	r5,r3
 8804138:	2005883a 	mov	r2,r4
 880413c:	2807883a 	mov	r3,r5
 8804140:	dfc00917 	ldw	ra,36(sp)
 8804144:	dcc00817 	ldw	r19,32(sp)
 8804148:	dc800717 	ldw	r18,28(sp)
 880414c:	dc400617 	ldw	r17,24(sp)
 8804150:	dc000517 	ldw	r16,20(sp)
 8804154:	dec00a04 	addi	sp,sp,40
 8804158:	f800283a 	ret
 880415c:	00800f04 	movi	r2,60
 8804160:	1807003a 	cmpeq	r3,r3,zero
 8804164:	d8800215 	stw	r2,8(sp)
 8804168:	18001126 	beq	r3,zero,88041b0 <__floatsidf+0xbc>
 880416c:	0027883a 	mov	r19,zero
 8804170:	2025883a 	mov	r18,r4
 8804174:	d9000315 	stw	r4,12(sp)
 8804178:	dcc00415 	stw	r19,16(sp)
 880417c:	880447c0 	call	880447c <__clzsi2>
 8804180:	11000744 	addi	r4,r2,29
 8804184:	013fe80e 	bge	zero,r4,8804128 <__floatsidf+0x34>
 8804188:	10bfff44 	addi	r2,r2,-3
 880418c:	10000c16 	blt	r2,zero,88041c0 <__floatsidf+0xcc>
 8804190:	90a2983a 	sll	r17,r18,r2
 8804194:	0021883a 	mov	r16,zero
 8804198:	d8800217 	ldw	r2,8(sp)
 880419c:	dc400415 	stw	r17,16(sp)
 88041a0:	dc000315 	stw	r16,12(sp)
 88041a4:	1105c83a 	sub	r2,r2,r4
 88041a8:	d8800215 	stw	r2,8(sp)
 88041ac:	003fde06 	br	8804128 <__floatsidf+0x34>
 88041b0:	00a00034 	movhi	r2,32768
 88041b4:	20800a26 	beq	r4,r2,88041e0 <__floatsidf+0xec>
 88041b8:	0109c83a 	sub	r4,zero,r4
 88041bc:	003feb06 	br	880416c <__floatsidf+0x78>
 88041c0:	9006d07a 	srli	r3,r18,1
 88041c4:	008007c4 	movi	r2,31
 88041c8:	1105c83a 	sub	r2,r2,r4
 88041cc:	1886d83a 	srl	r3,r3,r2
 88041d0:	9922983a 	sll	r17,r19,r4
 88041d4:	9120983a 	sll	r16,r18,r4
 88041d8:	1c62b03a 	or	r17,r3,r17
 88041dc:	003fee06 	br	8804198 <__floatsidf+0xa4>
 88041e0:	0009883a 	mov	r4,zero
 88041e4:	01707834 	movhi	r5,49632
 88041e8:	003fd306 	br	8804138 <__floatsidf+0x44>

088041ec <__make_dp>:
 88041ec:	defff904 	addi	sp,sp,-28
 88041f0:	d8c00717 	ldw	r3,28(sp)
 88041f4:	d9000015 	stw	r4,0(sp)
 88041f8:	d809883a 	mov	r4,sp
 88041fc:	dfc00515 	stw	ra,20(sp)
 8804200:	d9c00615 	stw	r7,24(sp)
 8804204:	d9400115 	stw	r5,4(sp)
 8804208:	d9800215 	stw	r6,8(sp)
 880420c:	d8c00415 	stw	r3,16(sp)
 8804210:	d9c00315 	stw	r7,12(sp)
 8804214:	88047f80 	call	88047f8 <__pack_d>
 8804218:	dfc00517 	ldw	ra,20(sp)
 880421c:	dec00704 	addi	sp,sp,28
 8804220:	f800283a 	ret

08804224 <__truncdfsf2>:
 8804224:	defff804 	addi	sp,sp,-32
 8804228:	2005883a 	mov	r2,r4
 880422c:	2807883a 	mov	r3,r5
 8804230:	d809883a 	mov	r4,sp
 8804234:	d9400204 	addi	r5,sp,8
 8804238:	d8c00115 	stw	r3,4(sp)
 880423c:	d8800015 	stw	r2,0(sp)
 8804240:	dfc00715 	stw	ra,28(sp)
 8804244:	8804b0c0 	call	8804b0c <__unpack_d>
 8804248:	d9c00517 	ldw	r7,20(sp)
 880424c:	da000617 	ldw	r8,24(sp)
 8804250:	02d00034 	movhi	r11,16384
 8804254:	5affffc4 	addi	r11,r11,-1
 8804258:	3812d7ba 	srli	r9,r7,30
 880425c:	401a90ba 	slli	r13,r8,2
 8804260:	3ac4703a 	and	r2,r7,r11
 8804264:	0007883a 	mov	r3,zero
 8804268:	6a52b03a 	or	r9,r13,r9
 880426c:	10c4b03a 	or	r2,r2,r3
 8804270:	d9000217 	ldw	r4,8(sp)
 8804274:	d9400317 	ldw	r5,12(sp)
 8804278:	d9800417 	ldw	r6,16(sp)
 880427c:	480f883a 	mov	r7,r9
 8804280:	10000126 	beq	r2,zero,8804288 <__truncdfsf2+0x64>
 8804284:	49c00054 	ori	r7,r9,1
 8804288:	88047cc0 	call	88047cc <__make_fp>
 880428c:	dfc00717 	ldw	ra,28(sp)
 8804290:	dec00804 	addi	sp,sp,32
 8804294:	f800283a 	ret

08804298 <udivmodsi4>:
 8804298:	29001b2e 	bgeu	r5,r4,8804308 <udivmodsi4+0x70>
 880429c:	28001a16 	blt	r5,zero,8804308 <udivmodsi4+0x70>
 88042a0:	00800044 	movi	r2,1
 88042a4:	0007883a 	mov	r3,zero
 88042a8:	01c007c4 	movi	r7,31
 88042ac:	00000306 	br	88042bc <udivmodsi4+0x24>
 88042b0:	19c01326 	beq	r3,r7,8804300 <udivmodsi4+0x68>
 88042b4:	18c00044 	addi	r3,r3,1
 88042b8:	28000416 	blt	r5,zero,88042cc <udivmodsi4+0x34>
 88042bc:	294b883a 	add	r5,r5,r5
 88042c0:	1085883a 	add	r2,r2,r2
 88042c4:	293ffa36 	bltu	r5,r4,88042b0 <udivmodsi4+0x18>
 88042c8:	10000d26 	beq	r2,zero,8804300 <udivmodsi4+0x68>
 88042cc:	0007883a 	mov	r3,zero
 88042d0:	21400236 	bltu	r4,r5,88042dc <udivmodsi4+0x44>
 88042d4:	2149c83a 	sub	r4,r4,r5
 88042d8:	1886b03a 	or	r3,r3,r2
 88042dc:	1004d07a 	srli	r2,r2,1
 88042e0:	280ad07a 	srli	r5,r5,1
 88042e4:	103ffa1e 	bne	r2,zero,88042d0 <udivmodsi4+0x38>
 88042e8:	30000226 	beq	r6,zero,88042f4 <udivmodsi4+0x5c>
 88042ec:	2005883a 	mov	r2,r4
 88042f0:	f800283a 	ret
 88042f4:	1809883a 	mov	r4,r3
 88042f8:	2005883a 	mov	r2,r4
 88042fc:	f800283a 	ret
 8804300:	0007883a 	mov	r3,zero
 8804304:	003ff806 	br	88042e8 <udivmodsi4+0x50>
 8804308:	00800044 	movi	r2,1
 880430c:	0007883a 	mov	r3,zero
 8804310:	003fef06 	br	88042d0 <udivmodsi4+0x38>

08804314 <__divsi3>:
 8804314:	defffe04 	addi	sp,sp,-8
 8804318:	dc000015 	stw	r16,0(sp)
 880431c:	dfc00115 	stw	ra,4(sp)
 8804320:	0021883a 	mov	r16,zero
 8804324:	20000c16 	blt	r4,zero,8804358 <__divsi3+0x44>
 8804328:	000d883a 	mov	r6,zero
 880432c:	28000e16 	blt	r5,zero,8804368 <__divsi3+0x54>
 8804330:	88042980 	call	8804298 <udivmodsi4>
 8804334:	1007883a 	mov	r3,r2
 8804338:	8005003a 	cmpeq	r2,r16,zero
 880433c:	1000011e 	bne	r2,zero,8804344 <__divsi3+0x30>
 8804340:	00c7c83a 	sub	r3,zero,r3
 8804344:	1805883a 	mov	r2,r3
 8804348:	dfc00117 	ldw	ra,4(sp)
 880434c:	dc000017 	ldw	r16,0(sp)
 8804350:	dec00204 	addi	sp,sp,8
 8804354:	f800283a 	ret
 8804358:	0109c83a 	sub	r4,zero,r4
 880435c:	04000044 	movi	r16,1
 8804360:	000d883a 	mov	r6,zero
 8804364:	283ff20e 	bge	r5,zero,8804330 <__divsi3+0x1c>
 8804368:	014bc83a 	sub	r5,zero,r5
 880436c:	8021003a 	cmpeq	r16,r16,zero
 8804370:	003fef06 	br	8804330 <__divsi3+0x1c>

08804374 <__modsi3>:
 8804374:	deffff04 	addi	sp,sp,-4
 8804378:	dfc00015 	stw	ra,0(sp)
 880437c:	01800044 	movi	r6,1
 8804380:	2807883a 	mov	r3,r5
 8804384:	20000416 	blt	r4,zero,8804398 <__modsi3+0x24>
 8804388:	28000c16 	blt	r5,zero,88043bc <__modsi3+0x48>
 880438c:	dfc00017 	ldw	ra,0(sp)
 8804390:	dec00104 	addi	sp,sp,4
 8804394:	88042981 	jmpi	8804298 <udivmodsi4>
 8804398:	0109c83a 	sub	r4,zero,r4
 880439c:	28000b16 	blt	r5,zero,88043cc <__modsi3+0x58>
 88043a0:	180b883a 	mov	r5,r3
 88043a4:	01800044 	movi	r6,1
 88043a8:	88042980 	call	8804298 <udivmodsi4>
 88043ac:	0085c83a 	sub	r2,zero,r2
 88043b0:	dfc00017 	ldw	ra,0(sp)
 88043b4:	dec00104 	addi	sp,sp,4
 88043b8:	f800283a 	ret
 88043bc:	014bc83a 	sub	r5,zero,r5
 88043c0:	dfc00017 	ldw	ra,0(sp)
 88043c4:	dec00104 	addi	sp,sp,4
 88043c8:	88042981 	jmpi	8804298 <udivmodsi4>
 88043cc:	0147c83a 	sub	r3,zero,r5
 88043d0:	003ff306 	br	88043a0 <__modsi3+0x2c>

088043d4 <__udivsi3>:
 88043d4:	000d883a 	mov	r6,zero
 88043d8:	88042981 	jmpi	8804298 <udivmodsi4>

088043dc <__umodsi3>:
 88043dc:	01800044 	movi	r6,1
 88043e0:	88042981 	jmpi	8804298 <udivmodsi4>

088043e4 <__muldi3>:
 88043e4:	2011883a 	mov	r8,r4
 88043e8:	427fffcc 	andi	r9,r8,65535
 88043ec:	4018d43a 	srli	r12,r8,16
 88043f0:	32bfffcc 	andi	r10,r6,65535
 88043f4:	3016d43a 	srli	r11,r6,16
 88043f8:	4a85383a 	mul	r2,r9,r10
 88043fc:	6295383a 	mul	r10,r12,r10
 8804400:	4ad3383a 	mul	r9,r9,r11
 8804404:	113fffcc 	andi	r4,r2,65535
 8804408:	1004d43a 	srli	r2,r2,16
 880440c:	4a93883a 	add	r9,r9,r10
 8804410:	3807883a 	mov	r3,r7
 8804414:	1245883a 	add	r2,r2,r9
 8804418:	280f883a 	mov	r7,r5
 880441c:	180b883a 	mov	r5,r3
 8804420:	1006943a 	slli	r3,r2,16
 8804424:	defffd04 	addi	sp,sp,-12
 8804428:	dc800215 	stw	r18,8(sp)
 880442c:	1907883a 	add	r3,r3,r4
 8804430:	dc400115 	stw	r17,4(sp)
 8804434:	dc000015 	stw	r16,0(sp)
 8804438:	4165383a 	mul	r18,r8,r5
 880443c:	31e3383a 	mul	r17,r6,r7
 8804440:	1012d43a 	srli	r9,r2,16
 8804444:	62d9383a 	mul	r12,r12,r11
 8804448:	181f883a 	mov	r15,r3
 880444c:	1280022e 	bgeu	r2,r10,8804458 <__muldi3+0x74>
 8804450:	00800074 	movhi	r2,1
 8804454:	6099883a 	add	r12,r12,r2
 8804458:	624d883a 	add	r6,r12,r9
 880445c:	9187883a 	add	r3,r18,r6
 8804460:	88c7883a 	add	r3,r17,r3
 8804464:	7805883a 	mov	r2,r15
 8804468:	dc800217 	ldw	r18,8(sp)
 880446c:	dc400117 	ldw	r17,4(sp)
 8804470:	dc000017 	ldw	r16,0(sp)
 8804474:	dec00304 	addi	sp,sp,12
 8804478:	f800283a 	ret

0880447c <__clzsi2>:
 880447c:	00bfffd4 	movui	r2,65535
 8804480:	11000e36 	bltu	r2,r4,88044bc <__clzsi2+0x40>
 8804484:	00803fc4 	movi	r2,255
 8804488:	01400204 	movi	r5,8
 880448c:	0007883a 	mov	r3,zero
 8804490:	11001036 	bltu	r2,r4,88044d4 <__clzsi2+0x58>
 8804494:	000b883a 	mov	r5,zero
 8804498:	20c6d83a 	srl	r3,r4,r3
 880449c:	00822074 	movhi	r2,2177
 88044a0:	10866204 	addi	r2,r2,6536
 88044a4:	1887883a 	add	r3,r3,r2
 88044a8:	18800003 	ldbu	r2,0(r3)
 88044ac:	00c00804 	movi	r3,32
 88044b0:	2885883a 	add	r2,r5,r2
 88044b4:	1885c83a 	sub	r2,r3,r2
 88044b8:	f800283a 	ret
 88044bc:	01400404 	movi	r5,16
 88044c0:	00804034 	movhi	r2,256
 88044c4:	10bfffc4 	addi	r2,r2,-1
 88044c8:	2807883a 	mov	r3,r5
 88044cc:	113ff22e 	bgeu	r2,r4,8804498 <__clzsi2+0x1c>
 88044d0:	01400604 	movi	r5,24
 88044d4:	2807883a 	mov	r3,r5
 88044d8:	20c6d83a 	srl	r3,r4,r3
 88044dc:	00822074 	movhi	r2,2177
 88044e0:	10866204 	addi	r2,r2,6536
 88044e4:	1887883a 	add	r3,r3,r2
 88044e8:	18800003 	ldbu	r2,0(r3)
 88044ec:	00c00804 	movi	r3,32
 88044f0:	2885883a 	add	r2,r5,r2
 88044f4:	1885c83a 	sub	r2,r3,r2
 88044f8:	f800283a 	ret

088044fc <__pack_f>:
 88044fc:	20c00017 	ldw	r3,0(r4)
 8804500:	01c00044 	movi	r7,1
 8804504:	21800317 	ldw	r6,12(r4)
 8804508:	21400117 	ldw	r5,4(r4)
 880450c:	38c02d2e 	bgeu	r7,r3,88045c4 <__pack_f+0xc8>
 8804510:	00800104 	movi	r2,4
 8804514:	18802826 	beq	r3,r2,88045b8 <__pack_f+0xbc>
 8804518:	00800084 	movi	r2,2
 880451c:	18800126 	beq	r3,r2,8804524 <__pack_f+0x28>
 8804520:	3000101e 	bne	r6,zero,8804564 <__pack_f+0x68>
 8804524:	000d883a 	mov	r6,zero
 8804528:	0007883a 	mov	r3,zero
 880452c:	19003fcc 	andi	r4,r3,255
 8804530:	200895fa 	slli	r4,r4,23
 8804534:	00c02034 	movhi	r3,128
 8804538:	18ffffc4 	addi	r3,r3,-1
 880453c:	30c6703a 	and	r3,r6,r3
 8804540:	10a0002c 	andhi	r2,r2,32768
 8804544:	10c4b03a 	or	r2,r2,r3
 8804548:	280a97fa 	slli	r5,r5,31
 880454c:	1104b03a 	or	r2,r2,r4
 8804550:	00e00034 	movhi	r3,32768
 8804554:	18ffffc4 	addi	r3,r3,-1
 8804558:	10c4703a 	and	r2,r2,r3
 880455c:	1144b03a 	or	r2,r2,r5
 8804560:	f800283a 	ret
 8804564:	21000217 	ldw	r4,8(r4)
 8804568:	00bfe084 	movi	r2,-126
 880456c:	20801b16 	blt	r4,r2,88045dc <__pack_f+0xe0>
 8804570:	00801fc4 	movi	r2,127
 8804574:	11001016 	blt	r2,r4,88045b8 <__pack_f+0xbc>
 8804578:	308e703a 	and	r7,r6,r2
 880457c:	2087883a 	add	r3,r4,r2
 8804580:	00801004 	movi	r2,64
 8804584:	38800526 	beq	r7,r2,880459c <__pack_f+0xa0>
 8804588:	31800fc4 	addi	r6,r6,63
 880458c:	30000716 	blt	r6,zero,88045ac <__pack_f+0xb0>
 8804590:	300490ba 	slli	r2,r6,2
 8804594:	100cd27a 	srli	r6,r2,9
 8804598:	003fe406 	br	880452c <__pack_f+0x30>
 880459c:	3080200c 	andi	r2,r6,128
 88045a0:	103ffa26 	beq	r2,zero,880458c <__pack_f+0x90>
 88045a4:	31cd883a 	add	r6,r6,r7
 88045a8:	003ff806 	br	880458c <__pack_f+0x90>
 88045ac:	300cd07a 	srli	r6,r6,1
 88045b0:	18c00044 	addi	r3,r3,1
 88045b4:	003ff606 	br	8804590 <__pack_f+0x94>
 88045b8:	000d883a 	mov	r6,zero
 88045bc:	00ffffc4 	movi	r3,-1
 88045c0:	003fda06 	br	880452c <__pack_f+0x30>
 88045c4:	31800434 	orhi	r6,r6,16
 88045c8:	00802034 	movhi	r2,128
 88045cc:	10bfffc4 	addi	r2,r2,-1
 88045d0:	308c703a 	and	r6,r6,r2
 88045d4:	00ffffc4 	movi	r3,-1
 88045d8:	003fd406 	br	880452c <__pack_f+0x30>
 88045dc:	1109c83a 	sub	r4,r2,r4
 88045e0:	00800644 	movi	r2,25
 88045e4:	11001216 	blt	r2,r4,8804630 <__pack_f+0x134>
 88045e8:	3904983a 	sll	r2,r7,r4
 88045ec:	3106d83a 	srl	r3,r6,r4
 88045f0:	10bfffc4 	addi	r2,r2,-1
 88045f4:	3084703a 	and	r2,r6,r2
 88045f8:	1004c03a 	cmpne	r2,r2,zero
 88045fc:	1886b03a 	or	r3,r3,r2
 8804600:	19001fcc 	andi	r4,r3,127
 8804604:	00801004 	movi	r2,64
 8804608:	20800c26 	beq	r4,r2,880463c <__pack_f+0x140>
 880460c:	18c00fc4 	addi	r3,r3,63
 8804610:	00900034 	movhi	r2,16384
 8804614:	10bfffc4 	addi	r2,r2,-1
 8804618:	180cd1fa 	srli	r6,r3,7
 880461c:	10c7803a 	cmpltu	r3,r2,r3
 8804620:	00802034 	movhi	r2,128
 8804624:	10bfffc4 	addi	r2,r2,-1
 8804628:	308c703a 	and	r6,r6,r2
 880462c:	003fbf06 	br	880452c <__pack_f+0x30>
 8804630:	0007883a 	mov	r3,zero
 8804634:	000d883a 	mov	r6,zero
 8804638:	003ff906 	br	8804620 <__pack_f+0x124>
 880463c:	1880200c 	andi	r2,r3,128
 8804640:	10000126 	beq	r2,zero,8804648 <__pack_f+0x14c>
 8804644:	1907883a 	add	r3,r3,r4
 8804648:	180cd1fa 	srli	r6,r3,7
 880464c:	00900034 	movhi	r2,16384
 8804650:	10bfffc4 	addi	r2,r2,-1
 8804654:	10c7803a 	cmpltu	r3,r2,r3
 8804658:	003ff106 	br	8804620 <__pack_f+0x124>

0880465c <__unpack_f>:
 880465c:	21800017 	ldw	r6,0(r4)
 8804660:	00c02034 	movhi	r3,128
 8804664:	18ffffc4 	addi	r3,r3,-1
 8804668:	3004d5fa 	srli	r2,r6,23
 880466c:	3008d7fa 	srli	r4,r6,31
 8804670:	30ce703a 	and	r7,r6,r3
 8804674:	10c03fcc 	andi	r3,r2,255
 8804678:	29000115 	stw	r4,4(r5)
 880467c:	1800131e 	bne	r3,zero,88046cc <__unpack_f+0x70>
 8804680:	38000f26 	beq	r7,zero,88046c0 <__unpack_f+0x64>
 8804684:	380691fa 	slli	r3,r7,7
 8804688:	01bfe084 	movi	r6,-126
 880468c:	008000c4 	movi	r2,3
 8804690:	01100034 	movhi	r4,16384
 8804694:	213fffc4 	addi	r4,r4,-1
 8804698:	28800015 	stw	r2,0(r5)
 880469c:	29800215 	stw	r6,8(r5)
 88046a0:	20c00536 	bltu	r4,r3,88046b8 <__unpack_f+0x5c>
 88046a4:	3005883a 	mov	r2,r6
 88046a8:	18c7883a 	add	r3,r3,r3
 88046ac:	10bfffc4 	addi	r2,r2,-1
 88046b0:	20fffd2e 	bgeu	r4,r3,88046a8 <__unpack_f+0x4c>
 88046b4:	28800215 	stw	r2,8(r5)
 88046b8:	28c00315 	stw	r3,12(r5)
 88046bc:	f800283a 	ret
 88046c0:	00800084 	movi	r2,2
 88046c4:	28800015 	stw	r2,0(r5)
 88046c8:	f800283a 	ret
 88046cc:	00803fc4 	movi	r2,255
 88046d0:	18800826 	beq	r3,r2,88046f4 <__unpack_f+0x98>
 88046d4:	380491fa 	slli	r2,r7,7
 88046d8:	18ffe044 	addi	r3,r3,-127
 88046dc:	28c00215 	stw	r3,8(r5)
 88046e0:	10900034 	orhi	r2,r2,16384
 88046e4:	28800315 	stw	r2,12(r5)
 88046e8:	008000c4 	movi	r2,3
 88046ec:	28800015 	stw	r2,0(r5)
 88046f0:	f800283a 	ret
 88046f4:	3800031e 	bne	r7,zero,8804704 <__unpack_f+0xa8>
 88046f8:	00800104 	movi	r2,4
 88046fc:	28800015 	stw	r2,0(r5)
 8804700:	f800283a 	ret
 8804704:	3080042c 	andhi	r2,r6,16
 8804708:	10000426 	beq	r2,zero,880471c <__unpack_f+0xc0>
 880470c:	00800044 	movi	r2,1
 8804710:	28800015 	stw	r2,0(r5)
 8804714:	29c00315 	stw	r7,12(r5)
 8804718:	f800283a 	ret
 880471c:	28000015 	stw	zero,0(r5)
 8804720:	003ffc06 	br	8804714 <__unpack_f+0xb8>

08804724 <__fpcmp_parts_f>:
 8804724:	21800017 	ldw	r6,0(r4)
 8804728:	00c00044 	movi	r3,1
 880472c:	19800a2e 	bgeu	r3,r6,8804758 <__fpcmp_parts_f+0x34>
 8804730:	28800017 	ldw	r2,0(r5)
 8804734:	1880082e 	bgeu	r3,r2,8804758 <__fpcmp_parts_f+0x34>
 8804738:	00c00104 	movi	r3,4
 880473c:	30c01e26 	beq	r6,r3,88047b8 <__fpcmp_parts_f+0x94>
 8804740:	10c01a26 	beq	r2,r3,88047ac <__fpcmp_parts_f+0x88>
 8804744:	00c00084 	movi	r3,2
 8804748:	30c00526 	beq	r6,r3,8804760 <__fpcmp_parts_f+0x3c>
 880474c:	10c0071e 	bne	r2,r3,880476c <__fpcmp_parts_f+0x48>
 8804750:	20800117 	ldw	r2,4(r4)
 8804754:	1000091e 	bne	r2,zero,880477c <__fpcmp_parts_f+0x58>
 8804758:	00800044 	movi	r2,1
 880475c:	f800283a 	ret
 8804760:	10c0121e 	bne	r2,r3,88047ac <__fpcmp_parts_f+0x88>
 8804764:	0005883a 	mov	r2,zero
 8804768:	f800283a 	ret
 880476c:	20c00117 	ldw	r3,4(r4)
 8804770:	28800117 	ldw	r2,4(r5)
 8804774:	18800326 	beq	r3,r2,8804784 <__fpcmp_parts_f+0x60>
 8804778:	183ff726 	beq	r3,zero,8804758 <__fpcmp_parts_f+0x34>
 880477c:	00bfffc4 	movi	r2,-1
 8804780:	f800283a 	ret
 8804784:	21800217 	ldw	r6,8(r4)
 8804788:	28800217 	ldw	r2,8(r5)
 880478c:	11bffa16 	blt	r2,r6,8804778 <__fpcmp_parts_f+0x54>
 8804790:	30800416 	blt	r6,r2,88047a4 <__fpcmp_parts_f+0x80>
 8804794:	21000317 	ldw	r4,12(r4)
 8804798:	29400317 	ldw	r5,12(r5)
 880479c:	293ff636 	bltu	r5,r4,8804778 <__fpcmp_parts_f+0x54>
 88047a0:	217ff02e 	bgeu	r4,r5,8804764 <__fpcmp_parts_f+0x40>
 88047a4:	183fec1e 	bne	r3,zero,8804758 <__fpcmp_parts_f+0x34>
 88047a8:	003ff406 	br	880477c <__fpcmp_parts_f+0x58>
 88047ac:	28800117 	ldw	r2,4(r5)
 88047b0:	103fe91e 	bne	r2,zero,8804758 <__fpcmp_parts_f+0x34>
 88047b4:	003ff106 	br	880477c <__fpcmp_parts_f+0x58>
 88047b8:	11bfe51e 	bne	r2,r6,8804750 <__fpcmp_parts_f+0x2c>
 88047bc:	28c00117 	ldw	r3,4(r5)
 88047c0:	20800117 	ldw	r2,4(r4)
 88047c4:	1885c83a 	sub	r2,r3,r2
 88047c8:	f800283a 	ret

088047cc <__make_fp>:
 88047cc:	defffb04 	addi	sp,sp,-20
 88047d0:	d9000015 	stw	r4,0(sp)
 88047d4:	d809883a 	mov	r4,sp
 88047d8:	dfc00415 	stw	ra,16(sp)
 88047dc:	d9400115 	stw	r5,4(sp)
 88047e0:	d9800215 	stw	r6,8(sp)
 88047e4:	d9c00315 	stw	r7,12(sp)
 88047e8:	88044fc0 	call	88044fc <__pack_f>
 88047ec:	dfc00417 	ldw	ra,16(sp)
 88047f0:	dec00504 	addi	sp,sp,20
 88047f4:	f800283a 	ret

088047f8 <__pack_d>:
 88047f8:	20c00017 	ldw	r3,0(r4)
 88047fc:	defffd04 	addi	sp,sp,-12
 8804800:	dc000015 	stw	r16,0(sp)
 8804804:	dc800215 	stw	r18,8(sp)
 8804808:	dc400115 	stw	r17,4(sp)
 880480c:	00800044 	movi	r2,1
 8804810:	22000317 	ldw	r8,12(r4)
 8804814:	001f883a 	mov	r15,zero
 8804818:	22400417 	ldw	r9,16(r4)
 880481c:	24000117 	ldw	r16,4(r4)
 8804820:	10c0552e 	bgeu	r2,r3,8804978 <__pack_d+0x180>
 8804824:	00800104 	movi	r2,4
 8804828:	18804f26 	beq	r3,r2,8804968 <__pack_d+0x170>
 880482c:	00800084 	movi	r2,2
 8804830:	18800226 	beq	r3,r2,880483c <__pack_d+0x44>
 8804834:	4244b03a 	or	r2,r8,r9
 8804838:	10001a1e 	bne	r2,zero,88048a4 <__pack_d+0xac>
 880483c:	000d883a 	mov	r6,zero
 8804840:	000f883a 	mov	r7,zero
 8804844:	0011883a 	mov	r8,zero
 8804848:	00800434 	movhi	r2,16
 880484c:	10bfffc4 	addi	r2,r2,-1
 8804850:	301d883a 	mov	r14,r6
 8804854:	3884703a 	and	r2,r7,r2
 8804858:	400a953a 	slli	r5,r8,20
 880485c:	79bffc2c 	andhi	r6,r15,65520
 8804860:	308cb03a 	or	r6,r6,r2
 8804864:	00e00434 	movhi	r3,32784
 8804868:	18ffffc4 	addi	r3,r3,-1
 880486c:	800497fa 	slli	r2,r16,31
 8804870:	30c6703a 	and	r3,r6,r3
 8804874:	1946b03a 	or	r3,r3,r5
 8804878:	01600034 	movhi	r5,32768
 880487c:	297fffc4 	addi	r5,r5,-1
 8804880:	194a703a 	and	r5,r3,r5
 8804884:	288ab03a 	or	r5,r5,r2
 8804888:	2807883a 	mov	r3,r5
 880488c:	7005883a 	mov	r2,r14
 8804890:	dc800217 	ldw	r18,8(sp)
 8804894:	dc400117 	ldw	r17,4(sp)
 8804898:	dc000017 	ldw	r16,0(sp)
 880489c:	dec00304 	addi	sp,sp,12
 88048a0:	f800283a 	ret
 88048a4:	21000217 	ldw	r4,8(r4)
 88048a8:	00bf0084 	movi	r2,-1022
 88048ac:	20803f16 	blt	r4,r2,88049ac <__pack_d+0x1b4>
 88048b0:	0080ffc4 	movi	r2,1023
 88048b4:	11002c16 	blt	r2,r4,8804968 <__pack_d+0x170>
 88048b8:	00803fc4 	movi	r2,255
 88048bc:	408c703a 	and	r6,r8,r2
 88048c0:	00802004 	movi	r2,128
 88048c4:	0007883a 	mov	r3,zero
 88048c8:	000f883a 	mov	r7,zero
 88048cc:	2280ffc4 	addi	r10,r4,1023
 88048d0:	30801e26 	beq	r6,r2,880494c <__pack_d+0x154>
 88048d4:	00801fc4 	movi	r2,127
 88048d8:	4089883a 	add	r4,r8,r2
 88048dc:	220d803a 	cmpltu	r6,r4,r8
 88048e0:	324d883a 	add	r6,r6,r9
 88048e4:	2011883a 	mov	r8,r4
 88048e8:	3013883a 	mov	r9,r6
 88048ec:	00880034 	movhi	r2,8192
 88048f0:	10bfffc4 	addi	r2,r2,-1
 88048f4:	12400d36 	bltu	r2,r9,880492c <__pack_d+0x134>
 88048f8:	4804963a 	slli	r2,r9,24
 88048fc:	400cd23a 	srli	r6,r8,8
 8804900:	480ed23a 	srli	r7,r9,8
 8804904:	013fffc4 	movi	r4,-1
 8804908:	118cb03a 	or	r6,r2,r6
 880490c:	01400434 	movhi	r5,16
 8804910:	297fffc4 	addi	r5,r5,-1
 8804914:	3104703a 	and	r2,r6,r4
 8804918:	3946703a 	and	r3,r7,r5
 880491c:	5201ffcc 	andi	r8,r10,2047
 8804920:	100d883a 	mov	r6,r2
 8804924:	180f883a 	mov	r7,r3
 8804928:	003fc706 	br	8804848 <__pack_d+0x50>
 880492c:	480897fa 	slli	r4,r9,31
 8804930:	4004d07a 	srli	r2,r8,1
 8804934:	4806d07a 	srli	r3,r9,1
 8804938:	52800044 	addi	r10,r10,1
 880493c:	2084b03a 	or	r2,r4,r2
 8804940:	1011883a 	mov	r8,r2
 8804944:	1813883a 	mov	r9,r3
 8804948:	003feb06 	br	88048f8 <__pack_d+0x100>
 880494c:	383fe11e 	bne	r7,zero,88048d4 <__pack_d+0xdc>
 8804950:	01004004 	movi	r4,256
 8804954:	4104703a 	and	r2,r8,r4
 8804958:	10c4b03a 	or	r2,r2,r3
 880495c:	103fe326 	beq	r2,zero,88048ec <__pack_d+0xf4>
 8804960:	3005883a 	mov	r2,r6
 8804964:	003fdc06 	br	88048d8 <__pack_d+0xe0>
 8804968:	000d883a 	mov	r6,zero
 880496c:	000f883a 	mov	r7,zero
 8804970:	0201ffc4 	movi	r8,2047
 8804974:	003fb406 	br	8804848 <__pack_d+0x50>
 8804978:	0005883a 	mov	r2,zero
 880497c:	00c00234 	movhi	r3,8
 8804980:	408cb03a 	or	r6,r8,r2
 8804984:	48ceb03a 	or	r7,r9,r3
 8804988:	013fffc4 	movi	r4,-1
 880498c:	01400434 	movhi	r5,16
 8804990:	297fffc4 	addi	r5,r5,-1
 8804994:	3104703a 	and	r2,r6,r4
 8804998:	3946703a 	and	r3,r7,r5
 880499c:	100d883a 	mov	r6,r2
 88049a0:	180f883a 	mov	r7,r3
 88049a4:	0201ffc4 	movi	r8,2047
 88049a8:	003fa706 	br	8804848 <__pack_d+0x50>
 88049ac:	1109c83a 	sub	r4,r2,r4
 88049b0:	00800e04 	movi	r2,56
 88049b4:	11004316 	blt	r2,r4,8804ac4 <__pack_d+0x2cc>
 88049b8:	21fff804 	addi	r7,r4,-32
 88049bc:	38004516 	blt	r7,zero,8804ad4 <__pack_d+0x2dc>
 88049c0:	49d8d83a 	srl	r12,r9,r7
 88049c4:	001b883a 	mov	r13,zero
 88049c8:	0023883a 	mov	r17,zero
 88049cc:	01400044 	movi	r5,1
 88049d0:	0025883a 	mov	r18,zero
 88049d4:	38004716 	blt	r7,zero,8804af4 <__pack_d+0x2fc>
 88049d8:	29d6983a 	sll	r11,r5,r7
 88049dc:	0015883a 	mov	r10,zero
 88049e0:	00bfffc4 	movi	r2,-1
 88049e4:	5089883a 	add	r4,r10,r2
 88049e8:	588b883a 	add	r5,r11,r2
 88049ec:	228d803a 	cmpltu	r6,r4,r10
 88049f0:	314b883a 	add	r5,r6,r5
 88049f4:	4104703a 	and	r2,r8,r4
 88049f8:	4946703a 	and	r3,r9,r5
 88049fc:	10c4b03a 	or	r2,r2,r3
 8804a00:	10000226 	beq	r2,zero,8804a0c <__pack_d+0x214>
 8804a04:	04400044 	movi	r17,1
 8804a08:	0025883a 	mov	r18,zero
 8804a0c:	00803fc4 	movi	r2,255
 8804a10:	644eb03a 	or	r7,r12,r17
 8804a14:	3892703a 	and	r9,r7,r2
 8804a18:	00802004 	movi	r2,128
 8804a1c:	6c90b03a 	or	r8,r13,r18
 8804a20:	0015883a 	mov	r10,zero
 8804a24:	48801626 	beq	r9,r2,8804a80 <__pack_d+0x288>
 8804a28:	01001fc4 	movi	r4,127
 8804a2c:	3905883a 	add	r2,r7,r4
 8804a30:	11cd803a 	cmpltu	r6,r2,r7
 8804a34:	320d883a 	add	r6,r6,r8
 8804a38:	100f883a 	mov	r7,r2
 8804a3c:	00840034 	movhi	r2,4096
 8804a40:	10bfffc4 	addi	r2,r2,-1
 8804a44:	3011883a 	mov	r8,r6
 8804a48:	0007883a 	mov	r3,zero
 8804a4c:	11801b36 	bltu	r2,r6,8804abc <__pack_d+0x2c4>
 8804a50:	4004963a 	slli	r2,r8,24
 8804a54:	3808d23a 	srli	r4,r7,8
 8804a58:	400ad23a 	srli	r5,r8,8
 8804a5c:	1813883a 	mov	r9,r3
 8804a60:	1108b03a 	or	r4,r2,r4
 8804a64:	00bfffc4 	movi	r2,-1
 8804a68:	00c00434 	movhi	r3,16
 8804a6c:	18ffffc4 	addi	r3,r3,-1
 8804a70:	208c703a 	and	r6,r4,r2
 8804a74:	28ce703a 	and	r7,r5,r3
 8804a78:	4a01ffcc 	andi	r8,r9,2047
 8804a7c:	003f7206 	br	8804848 <__pack_d+0x50>
 8804a80:	503fe91e 	bne	r10,zero,8804a28 <__pack_d+0x230>
 8804a84:	01004004 	movi	r4,256
 8804a88:	3904703a 	and	r2,r7,r4
 8804a8c:	0007883a 	mov	r3,zero
 8804a90:	10c4b03a 	or	r2,r2,r3
 8804a94:	10000626 	beq	r2,zero,8804ab0 <__pack_d+0x2b8>
 8804a98:	3a45883a 	add	r2,r7,r9
 8804a9c:	11cd803a 	cmpltu	r6,r2,r7
 8804aa0:	320d883a 	add	r6,r6,r8
 8804aa4:	100f883a 	mov	r7,r2
 8804aa8:	3011883a 	mov	r8,r6
 8804aac:	0007883a 	mov	r3,zero
 8804ab0:	00840034 	movhi	r2,4096
 8804ab4:	10bfffc4 	addi	r2,r2,-1
 8804ab8:	123fe52e 	bgeu	r2,r8,8804a50 <__pack_d+0x258>
 8804abc:	00c00044 	movi	r3,1
 8804ac0:	003fe306 	br	8804a50 <__pack_d+0x258>
 8804ac4:	0009883a 	mov	r4,zero
 8804ac8:	0013883a 	mov	r9,zero
 8804acc:	000b883a 	mov	r5,zero
 8804ad0:	003fe406 	br	8804a64 <__pack_d+0x26c>
 8804ad4:	4a47883a 	add	r3,r9,r9
 8804ad8:	008007c4 	movi	r2,31
 8804adc:	1105c83a 	sub	r2,r2,r4
 8804ae0:	1886983a 	sll	r3,r3,r2
 8804ae4:	4118d83a 	srl	r12,r8,r4
 8804ae8:	491ad83a 	srl	r13,r9,r4
 8804aec:	1b18b03a 	or	r12,r3,r12
 8804af0:	003fb506 	br	88049c8 <__pack_d+0x1d0>
 8804af4:	2806d07a 	srli	r3,r5,1
 8804af8:	008007c4 	movi	r2,31
 8804afc:	1105c83a 	sub	r2,r2,r4
 8804b00:	1896d83a 	srl	r11,r3,r2
 8804b04:	2914983a 	sll	r10,r5,r4
 8804b08:	003fb506 	br	88049e0 <__pack_d+0x1e8>

08804b0c <__unpack_d>:
 8804b0c:	20c00117 	ldw	r3,4(r4)
 8804b10:	22400017 	ldw	r9,0(r4)
 8804b14:	00800434 	movhi	r2,16
 8804b18:	10bfffc4 	addi	r2,r2,-1
 8804b1c:	1808d53a 	srli	r4,r3,20
 8804b20:	180cd7fa 	srli	r6,r3,31
 8804b24:	1894703a 	and	r10,r3,r2
 8804b28:	2201ffcc 	andi	r8,r4,2047
 8804b2c:	281b883a 	mov	r13,r5
 8804b30:	4817883a 	mov	r11,r9
 8804b34:	29800115 	stw	r6,4(r5)
 8804b38:	5019883a 	mov	r12,r10
 8804b3c:	40001e1e 	bne	r8,zero,8804bb8 <__unpack_d+0xac>
 8804b40:	4a84b03a 	or	r2,r9,r10
 8804b44:	10001926 	beq	r2,zero,8804bac <__unpack_d+0xa0>
 8804b48:	4804d63a 	srli	r2,r9,24
 8804b4c:	500c923a 	slli	r6,r10,8
 8804b50:	013f0084 	movi	r4,-1022
 8804b54:	00c40034 	movhi	r3,4096
 8804b58:	18ffffc4 	addi	r3,r3,-1
 8804b5c:	118cb03a 	or	r6,r2,r6
 8804b60:	008000c4 	movi	r2,3
 8804b64:	480a923a 	slli	r5,r9,8
 8804b68:	68800015 	stw	r2,0(r13)
 8804b6c:	69000215 	stw	r4,8(r13)
 8804b70:	19800b36 	bltu	r3,r6,8804ba0 <__unpack_d+0x94>
 8804b74:	200f883a 	mov	r7,r4
 8804b78:	1811883a 	mov	r8,r3
 8804b7c:	2945883a 	add	r2,r5,r5
 8804b80:	1149803a 	cmpltu	r4,r2,r5
 8804b84:	3187883a 	add	r3,r6,r6
 8804b88:	20c9883a 	add	r4,r4,r3
 8804b8c:	100b883a 	mov	r5,r2
 8804b90:	200d883a 	mov	r6,r4
 8804b94:	39ffffc4 	addi	r7,r7,-1
 8804b98:	413ff82e 	bgeu	r8,r4,8804b7c <__unpack_d+0x70>
 8804b9c:	69c00215 	stw	r7,8(r13)
 8804ba0:	69800415 	stw	r6,16(r13)
 8804ba4:	69400315 	stw	r5,12(r13)
 8804ba8:	f800283a 	ret
 8804bac:	00800084 	movi	r2,2
 8804bb0:	28800015 	stw	r2,0(r5)
 8804bb4:	f800283a 	ret
 8804bb8:	0081ffc4 	movi	r2,2047
 8804bbc:	40800f26 	beq	r8,r2,8804bfc <__unpack_d+0xf0>
 8804bc0:	480cd63a 	srli	r6,r9,24
 8804bc4:	5006923a 	slli	r3,r10,8
 8804bc8:	4804923a 	slli	r2,r9,8
 8804bcc:	0009883a 	mov	r4,zero
 8804bd0:	30c6b03a 	or	r3,r6,r3
 8804bd4:	01440034 	movhi	r5,4096
 8804bd8:	110cb03a 	or	r6,r2,r4
 8804bdc:	423f0044 	addi	r8,r8,-1023
 8804be0:	194eb03a 	or	r7,r3,r5
 8804be4:	008000c4 	movi	r2,3
 8804be8:	69c00415 	stw	r7,16(r13)
 8804bec:	6a000215 	stw	r8,8(r13)
 8804bf0:	68800015 	stw	r2,0(r13)
 8804bf4:	69800315 	stw	r6,12(r13)
 8804bf8:	f800283a 	ret
 8804bfc:	4a84b03a 	or	r2,r9,r10
 8804c00:	1000031e 	bne	r2,zero,8804c10 <__unpack_d+0x104>
 8804c04:	00800104 	movi	r2,4
 8804c08:	28800015 	stw	r2,0(r5)
 8804c0c:	f800283a 	ret
 8804c10:	0009883a 	mov	r4,zero
 8804c14:	01400234 	movhi	r5,8
 8804c18:	4904703a 	and	r2,r9,r4
 8804c1c:	5146703a 	and	r3,r10,r5
 8804c20:	10c4b03a 	or	r2,r2,r3
 8804c24:	10000526 	beq	r2,zero,8804c3c <__unpack_d+0x130>
 8804c28:	00800044 	movi	r2,1
 8804c2c:	68800015 	stw	r2,0(r13)
 8804c30:	6b000415 	stw	r12,16(r13)
 8804c34:	6ac00315 	stw	r11,12(r13)
 8804c38:	f800283a 	ret
 8804c3c:	68000015 	stw	zero,0(r13)
 8804c40:	003ffb06 	br	8804c30 <__unpack_d+0x124>

08804c44 <__fpcmp_parts_d>:
 8804c44:	21800017 	ldw	r6,0(r4)
 8804c48:	00c00044 	movi	r3,1
 8804c4c:	19800a2e 	bgeu	r3,r6,8804c78 <__fpcmp_parts_d+0x34>
 8804c50:	28800017 	ldw	r2,0(r5)
 8804c54:	1880082e 	bgeu	r3,r2,8804c78 <__fpcmp_parts_d+0x34>
 8804c58:	00c00104 	movi	r3,4
 8804c5c:	30c02626 	beq	r6,r3,8804cf8 <__fpcmp_parts_d+0xb4>
 8804c60:	10c02226 	beq	r2,r3,8804cec <__fpcmp_parts_d+0xa8>
 8804c64:	00c00084 	movi	r3,2
 8804c68:	30c00526 	beq	r6,r3,8804c80 <__fpcmp_parts_d+0x3c>
 8804c6c:	10c0071e 	bne	r2,r3,8804c8c <__fpcmp_parts_d+0x48>
 8804c70:	20800117 	ldw	r2,4(r4)
 8804c74:	1000091e 	bne	r2,zero,8804c9c <__fpcmp_parts_d+0x58>
 8804c78:	00800044 	movi	r2,1
 8804c7c:	f800283a 	ret
 8804c80:	10c01a1e 	bne	r2,r3,8804cec <__fpcmp_parts_d+0xa8>
 8804c84:	0005883a 	mov	r2,zero
 8804c88:	f800283a 	ret
 8804c8c:	22000117 	ldw	r8,4(r4)
 8804c90:	28800117 	ldw	r2,4(r5)
 8804c94:	40800326 	beq	r8,r2,8804ca4 <__fpcmp_parts_d+0x60>
 8804c98:	403ff726 	beq	r8,zero,8804c78 <__fpcmp_parts_d+0x34>
 8804c9c:	00bfffc4 	movi	r2,-1
 8804ca0:	f800283a 	ret
 8804ca4:	20c00217 	ldw	r3,8(r4)
 8804ca8:	28800217 	ldw	r2,8(r5)
 8804cac:	10fffa16 	blt	r2,r3,8804c98 <__fpcmp_parts_d+0x54>
 8804cb0:	18800916 	blt	r3,r2,8804cd8 <__fpcmp_parts_d+0x94>
 8804cb4:	21c00417 	ldw	r7,16(r4)
 8804cb8:	28c00417 	ldw	r3,16(r5)
 8804cbc:	21800317 	ldw	r6,12(r4)
 8804cc0:	28800317 	ldw	r2,12(r5)
 8804cc4:	19fff436 	bltu	r3,r7,8804c98 <__fpcmp_parts_d+0x54>
 8804cc8:	38c00526 	beq	r7,r3,8804ce0 <__fpcmp_parts_d+0x9c>
 8804ccc:	38c00236 	bltu	r7,r3,8804cd8 <__fpcmp_parts_d+0x94>
 8804cd0:	19ffec1e 	bne	r3,r7,8804c84 <__fpcmp_parts_d+0x40>
 8804cd4:	30bfeb2e 	bgeu	r6,r2,8804c84 <__fpcmp_parts_d+0x40>
 8804cd8:	403fe71e 	bne	r8,zero,8804c78 <__fpcmp_parts_d+0x34>
 8804cdc:	003fef06 	br	8804c9c <__fpcmp_parts_d+0x58>
 8804ce0:	11bffa2e 	bgeu	r2,r6,8804ccc <__fpcmp_parts_d+0x88>
 8804ce4:	403fe426 	beq	r8,zero,8804c78 <__fpcmp_parts_d+0x34>
 8804ce8:	003fec06 	br	8804c9c <__fpcmp_parts_d+0x58>
 8804cec:	28800117 	ldw	r2,4(r5)
 8804cf0:	103fe11e 	bne	r2,zero,8804c78 <__fpcmp_parts_d+0x34>
 8804cf4:	003fe906 	br	8804c9c <__fpcmp_parts_d+0x58>
 8804cf8:	11bfdd1e 	bne	r2,r6,8804c70 <__fpcmp_parts_d+0x2c>
 8804cfc:	28c00117 	ldw	r3,4(r5)
 8804d00:	20800117 	ldw	r2,4(r4)
 8804d04:	1885c83a 	sub	r2,r3,r2
 8804d08:	f800283a 	ret

08804d0c <__errno>:
 8804d0c:	00c22074 	movhi	r3,2177
 8804d10:	18ce5204 	addi	r3,r3,14664
 8804d14:	18800017 	ldw	r2,0(r3)
 8804d18:	f800283a 	ret

08804d1c <printf>:
 8804d1c:	defffb04 	addi	sp,sp,-20
 8804d20:	dfc00115 	stw	ra,4(sp)
 8804d24:	d9400215 	stw	r5,8(sp)
 8804d28:	d9800315 	stw	r6,12(sp)
 8804d2c:	d9c00415 	stw	r7,16(sp)
 8804d30:	00822074 	movhi	r2,2177
 8804d34:	108e5204 	addi	r2,r2,14664
 8804d38:	10c00017 	ldw	r3,0(r2)
 8804d3c:	200b883a 	mov	r5,r4
 8804d40:	d8800204 	addi	r2,sp,8
 8804d44:	19000217 	ldw	r4,8(r3)
 8804d48:	100d883a 	mov	r6,r2
 8804d4c:	d8800015 	stw	r2,0(sp)
 8804d50:	8806dc00 	call	8806dc0 <__vfprintf_internal>
 8804d54:	dfc00117 	ldw	ra,4(sp)
 8804d58:	dec00504 	addi	sp,sp,20
 8804d5c:	f800283a 	ret

08804d60 <_printf_r>:
 8804d60:	defffc04 	addi	sp,sp,-16
 8804d64:	dfc00115 	stw	ra,4(sp)
 8804d68:	d9800215 	stw	r6,8(sp)
 8804d6c:	d9c00315 	stw	r7,12(sp)
 8804d70:	280d883a 	mov	r6,r5
 8804d74:	21400217 	ldw	r5,8(r4)
 8804d78:	d8c00204 	addi	r3,sp,8
 8804d7c:	180f883a 	mov	r7,r3
 8804d80:	d8c00015 	stw	r3,0(sp)
 8804d84:	8804f140 	call	8804f14 <___vfprintf_internal_r>
 8804d88:	dfc00117 	ldw	ra,4(sp)
 8804d8c:	dec00404 	addi	sp,sp,16
 8804d90:	f800283a 	ret

08804d94 <_puts_r>:
 8804d94:	defff604 	addi	sp,sp,-40
 8804d98:	dc400715 	stw	r17,28(sp)
 8804d9c:	2023883a 	mov	r17,r4
 8804da0:	2809883a 	mov	r4,r5
 8804da4:	dfc00915 	stw	ra,36(sp)
 8804da8:	dcc00815 	stw	r19,32(sp)
 8804dac:	2827883a 	mov	r19,r5
 8804db0:	8804e480 	call	8804e48 <strlen>
 8804db4:	89400217 	ldw	r5,8(r17)
 8804db8:	00c22074 	movhi	r3,2177
 8804dbc:	18c6a304 	addi	r3,r3,6796
 8804dc0:	01c00044 	movi	r7,1
 8804dc4:	12000044 	addi	r8,r2,1
 8804dc8:	d8c00515 	stw	r3,20(sp)
 8804dcc:	d9c00615 	stw	r7,24(sp)
 8804dd0:	d8c00304 	addi	r3,sp,12
 8804dd4:	01c00084 	movi	r7,2
 8804dd8:	8809883a 	mov	r4,r17
 8804ddc:	d80d883a 	mov	r6,sp
 8804de0:	d8c00015 	stw	r3,0(sp)
 8804de4:	dcc00315 	stw	r19,12(sp)
 8804de8:	da000215 	stw	r8,8(sp)
 8804dec:	d9c00115 	stw	r7,4(sp)
 8804df0:	d8800415 	stw	r2,16(sp)
 8804df4:	880901c0 	call	880901c <__sfvwrite_r>
 8804df8:	00ffffc4 	movi	r3,-1
 8804dfc:	10000626 	beq	r2,zero,8804e18 <_puts_r+0x84>
 8804e00:	1805883a 	mov	r2,r3
 8804e04:	dfc00917 	ldw	ra,36(sp)
 8804e08:	dcc00817 	ldw	r19,32(sp)
 8804e0c:	dc400717 	ldw	r17,28(sp)
 8804e10:	dec00a04 	addi	sp,sp,40
 8804e14:	f800283a 	ret
 8804e18:	00c00284 	movi	r3,10
 8804e1c:	1805883a 	mov	r2,r3
 8804e20:	dfc00917 	ldw	ra,36(sp)
 8804e24:	dcc00817 	ldw	r19,32(sp)
 8804e28:	dc400717 	ldw	r17,28(sp)
 8804e2c:	dec00a04 	addi	sp,sp,40
 8804e30:	f800283a 	ret

08804e34 <puts>:
 8804e34:	00822074 	movhi	r2,2177
 8804e38:	108e5204 	addi	r2,r2,14664
 8804e3c:	200b883a 	mov	r5,r4
 8804e40:	11000017 	ldw	r4,0(r2)
 8804e44:	8804d941 	jmpi	8804d94 <_puts_r>

08804e48 <strlen>:
 8804e48:	208000cc 	andi	r2,r4,3
 8804e4c:	2011883a 	mov	r8,r4
 8804e50:	1000161e 	bne	r2,zero,8804eac <strlen+0x64>
 8804e54:	20c00017 	ldw	r3,0(r4)
 8804e58:	017fbff4 	movhi	r5,65279
 8804e5c:	297fbfc4 	addi	r5,r5,-257
 8804e60:	01e02074 	movhi	r7,32897
 8804e64:	39e02004 	addi	r7,r7,-32640
 8804e68:	1945883a 	add	r2,r3,r5
 8804e6c:	11c4703a 	and	r2,r2,r7
 8804e70:	00c6303a 	nor	r3,zero,r3
 8804e74:	1886703a 	and	r3,r3,r2
 8804e78:	18000c1e 	bne	r3,zero,8804eac <strlen+0x64>
 8804e7c:	280d883a 	mov	r6,r5
 8804e80:	380b883a 	mov	r5,r7
 8804e84:	21000104 	addi	r4,r4,4
 8804e88:	20800017 	ldw	r2,0(r4)
 8804e8c:	1187883a 	add	r3,r2,r6
 8804e90:	1946703a 	and	r3,r3,r5
 8804e94:	0084303a 	nor	r2,zero,r2
 8804e98:	10c4703a 	and	r2,r2,r3
 8804e9c:	103ff926 	beq	r2,zero,8804e84 <strlen+0x3c>
 8804ea0:	20800007 	ldb	r2,0(r4)
 8804ea4:	10000326 	beq	r2,zero,8804eb4 <strlen+0x6c>
 8804ea8:	21000044 	addi	r4,r4,1
 8804eac:	20800007 	ldb	r2,0(r4)
 8804eb0:	103ffd1e 	bne	r2,zero,8804ea8 <strlen+0x60>
 8804eb4:	2205c83a 	sub	r2,r4,r8
 8804eb8:	f800283a 	ret

08804ebc <__sprint_r>:
 8804ebc:	30800217 	ldw	r2,8(r6)
 8804ec0:	defffe04 	addi	sp,sp,-8
 8804ec4:	dc000015 	stw	r16,0(sp)
 8804ec8:	dfc00115 	stw	ra,4(sp)
 8804ecc:	3021883a 	mov	r16,r6
 8804ed0:	0007883a 	mov	r3,zero
 8804ed4:	1000061e 	bne	r2,zero,8804ef0 <__sprint_r+0x34>
 8804ed8:	1805883a 	mov	r2,r3
 8804edc:	30000115 	stw	zero,4(r6)
 8804ee0:	dfc00117 	ldw	ra,4(sp)
 8804ee4:	dc000017 	ldw	r16,0(sp)
 8804ee8:	dec00204 	addi	sp,sp,8
 8804eec:	f800283a 	ret
 8804ef0:	880901c0 	call	880901c <__sfvwrite_r>
 8804ef4:	1007883a 	mov	r3,r2
 8804ef8:	1805883a 	mov	r2,r3
 8804efc:	80000115 	stw	zero,4(r16)
 8804f00:	80000215 	stw	zero,8(r16)
 8804f04:	dfc00117 	ldw	ra,4(sp)
 8804f08:	dc000017 	ldw	r16,0(sp)
 8804f0c:	dec00204 	addi	sp,sp,8
 8804f10:	f800283a 	ret

08804f14 <___vfprintf_internal_r>:
 8804f14:	defea404 	addi	sp,sp,-1392
 8804f18:	dd815815 	stw	r22,1376(sp)
 8804f1c:	dc015215 	stw	r16,1352(sp)
 8804f20:	d9c15115 	stw	r7,1348(sp)
 8804f24:	dfc15b15 	stw	ra,1388(sp)
 8804f28:	df015a15 	stw	fp,1384(sp)
 8804f2c:	ddc15915 	stw	r23,1380(sp)
 8804f30:	dd415715 	stw	r21,1372(sp)
 8804f34:	dd015615 	stw	r20,1368(sp)
 8804f38:	dcc15515 	stw	r19,1364(sp)
 8804f3c:	dc815415 	stw	r18,1360(sp)
 8804f40:	dc415315 	stw	r17,1356(sp)
 8804f44:	282d883a 	mov	r22,r5
 8804f48:	3021883a 	mov	r16,r6
 8804f4c:	d9014f15 	stw	r4,1340(sp)
 8804f50:	88096400 	call	8809640 <_localeconv_r>
 8804f54:	10800017 	ldw	r2,0(r2)
 8804f58:	d9c15117 	ldw	r7,1348(sp)
 8804f5c:	d8814915 	stw	r2,1316(sp)
 8804f60:	d8814f17 	ldw	r2,1340(sp)
 8804f64:	10000226 	beq	r2,zero,8804f70 <___vfprintf_internal_r+0x5c>
 8804f68:	10800e17 	ldw	r2,56(r2)
 8804f6c:	10020d26 	beq	r2,zero,88057a4 <___vfprintf_internal_r+0x890>
 8804f70:	b080030b 	ldhu	r2,12(r22)
 8804f74:	1080020c 	andi	r2,r2,8
 8804f78:	10020e26 	beq	r2,zero,88057b4 <___vfprintf_internal_r+0x8a0>
 8804f7c:	b0800417 	ldw	r2,16(r22)
 8804f80:	10020c26 	beq	r2,zero,88057b4 <___vfprintf_internal_r+0x8a0>
 8804f84:	b200030b 	ldhu	r8,12(r22)
 8804f88:	00800284 	movi	r2,10
 8804f8c:	40c0068c 	andi	r3,r8,26
 8804f90:	18802f1e 	bne	r3,r2,8805050 <___vfprintf_internal_r+0x13c>
 8804f94:	b080038f 	ldh	r2,14(r22)
 8804f98:	10002d16 	blt	r2,zero,8805050 <___vfprintf_internal_r+0x13c>
 8804f9c:	b240038b 	ldhu	r9,14(r22)
 8804fa0:	b2800717 	ldw	r10,28(r22)
 8804fa4:	b2c00917 	ldw	r11,36(r22)
 8804fa8:	d9014f17 	ldw	r4,1340(sp)
 8804fac:	dc402904 	addi	r17,sp,164
 8804fb0:	d8804004 	addi	r2,sp,256
 8804fb4:	00c10004 	movi	r3,1024
 8804fb8:	423fff4c 	andi	r8,r8,65533
 8804fbc:	800d883a 	mov	r6,r16
 8804fc0:	880b883a 	mov	r5,r17
 8804fc4:	da002c0d 	sth	r8,176(sp)
 8804fc8:	da402c8d 	sth	r9,178(sp)
 8804fcc:	da803015 	stw	r10,192(sp)
 8804fd0:	dac03215 	stw	r11,200(sp)
 8804fd4:	d8802d15 	stw	r2,180(sp)
 8804fd8:	d8c02e15 	stw	r3,184(sp)
 8804fdc:	d8802915 	stw	r2,164(sp)
 8804fe0:	d8c02b15 	stw	r3,172(sp)
 8804fe4:	d8002f15 	stw	zero,188(sp)
 8804fe8:	8804f140 	call	8804f14 <___vfprintf_internal_r>
 8804fec:	d8814b15 	stw	r2,1324(sp)
 8804ff0:	10000416 	blt	r2,zero,8805004 <___vfprintf_internal_r+0xf0>
 8804ff4:	d9014f17 	ldw	r4,1340(sp)
 8804ff8:	880b883a 	mov	r5,r17
 8804ffc:	88086ec0 	call	88086ec <_fflush_r>
 8805000:	1002321e 	bne	r2,zero,88058cc <___vfprintf_internal_r+0x9b8>
 8805004:	d8802c0b 	ldhu	r2,176(sp)
 8805008:	1080100c 	andi	r2,r2,64
 880500c:	10000326 	beq	r2,zero,880501c <___vfprintf_internal_r+0x108>
 8805010:	b080030b 	ldhu	r2,12(r22)
 8805014:	10801014 	ori	r2,r2,64
 8805018:	b080030d 	sth	r2,12(r22)
 880501c:	d8814b17 	ldw	r2,1324(sp)
 8805020:	dfc15b17 	ldw	ra,1388(sp)
 8805024:	df015a17 	ldw	fp,1384(sp)
 8805028:	ddc15917 	ldw	r23,1380(sp)
 880502c:	dd815817 	ldw	r22,1376(sp)
 8805030:	dd415717 	ldw	r21,1372(sp)
 8805034:	dd015617 	ldw	r20,1368(sp)
 8805038:	dcc15517 	ldw	r19,1364(sp)
 880503c:	dc815417 	ldw	r18,1360(sp)
 8805040:	dc415317 	ldw	r17,1356(sp)
 8805044:	dc015217 	ldw	r16,1352(sp)
 8805048:	dec15c04 	addi	sp,sp,1392
 880504c:	f800283a 	ret
 8805050:	0005883a 	mov	r2,zero
 8805054:	0007883a 	mov	r3,zero
 8805058:	dd401904 	addi	r21,sp,100
 880505c:	d8814215 	stw	r2,1288(sp)
 8805060:	802f883a 	mov	r23,r16
 8805064:	d8c14315 	stw	r3,1292(sp)
 8805068:	d8014b15 	stw	zero,1324(sp)
 880506c:	d8014815 	stw	zero,1312(sp)
 8805070:	d8014415 	stw	zero,1296(sp)
 8805074:	d8014715 	stw	zero,1308(sp)
 8805078:	dd400c15 	stw	r21,48(sp)
 880507c:	d8000e15 	stw	zero,56(sp)
 8805080:	d8000d15 	stw	zero,52(sp)
 8805084:	b8800007 	ldb	r2,0(r23)
 8805088:	10001926 	beq	r2,zero,88050f0 <___vfprintf_internal_r+0x1dc>
 880508c:	00c00944 	movi	r3,37
 8805090:	10c01726 	beq	r2,r3,88050f0 <___vfprintf_internal_r+0x1dc>
 8805094:	b821883a 	mov	r16,r23
 8805098:	00000106 	br	88050a0 <___vfprintf_internal_r+0x18c>
 880509c:	10c00326 	beq	r2,r3,88050ac <___vfprintf_internal_r+0x198>
 88050a0:	84000044 	addi	r16,r16,1
 88050a4:	80800007 	ldb	r2,0(r16)
 88050a8:	103ffc1e 	bne	r2,zero,880509c <___vfprintf_internal_r+0x188>
 88050ac:	85e7c83a 	sub	r19,r16,r23
 88050b0:	98000e26 	beq	r19,zero,88050ec <___vfprintf_internal_r+0x1d8>
 88050b4:	dc800e17 	ldw	r18,56(sp)
 88050b8:	dc400d17 	ldw	r17,52(sp)
 88050bc:	008001c4 	movi	r2,7
 88050c0:	94e5883a 	add	r18,r18,r19
 88050c4:	8c400044 	addi	r17,r17,1
 88050c8:	adc00015 	stw	r23,0(r21)
 88050cc:	dc800e15 	stw	r18,56(sp)
 88050d0:	acc00115 	stw	r19,4(r21)
 88050d4:	dc400d15 	stw	r17,52(sp)
 88050d8:	14428b16 	blt	r2,r17,8805b08 <___vfprintf_internal_r+0xbf4>
 88050dc:	ad400204 	addi	r21,r21,8
 88050e0:	d9014b17 	ldw	r4,1324(sp)
 88050e4:	24c9883a 	add	r4,r4,r19
 88050e8:	d9014b15 	stw	r4,1324(sp)
 88050ec:	802f883a 	mov	r23,r16
 88050f0:	b8800007 	ldb	r2,0(r23)
 88050f4:	10013c26 	beq	r2,zero,88055e8 <___vfprintf_internal_r+0x6d4>
 88050f8:	bdc00044 	addi	r23,r23,1
 88050fc:	d8000405 	stb	zero,16(sp)
 8805100:	b8c00007 	ldb	r3,0(r23)
 8805104:	04ffffc4 	movi	r19,-1
 8805108:	d8014c15 	stw	zero,1328(sp)
 880510c:	d8014a15 	stw	zero,1320(sp)
 8805110:	d8c14d15 	stw	r3,1332(sp)
 8805114:	bdc00044 	addi	r23,r23,1
 8805118:	d9414d17 	ldw	r5,1332(sp)
 880511c:	00801604 	movi	r2,88
 8805120:	28fff804 	addi	r3,r5,-32
 8805124:	10c06036 	bltu	r2,r3,88052a8 <___vfprintf_internal_r+0x394>
 8805128:	18c5883a 	add	r2,r3,r3
 880512c:	1085883a 	add	r2,r2,r2
 8805130:	00c22034 	movhi	r3,2176
 8805134:	18d45104 	addi	r3,r3,20804
 8805138:	10c5883a 	add	r2,r2,r3
 880513c:	11000017 	ldw	r4,0(r2)
 8805140:	2000683a 	jmp	r4
 8805144:	088060b8 	rdprs	r2,at,386
 8805148:	088052a8 	cmpgeui	r2,at,330
 880514c:	088052a8 	cmpgeui	r2,at,330
 8805150:	088060a4 	muli	r2,at,386
 8805154:	088052a8 	cmpgeui	r2,at,330
 8805158:	088052a8 	cmpgeui	r2,at,330
 880515c:	088052a8 	cmpgeui	r2,at,330
 8805160:	088052a8 	cmpgeui	r2,at,330
 8805164:	088052a8 	cmpgeui	r2,at,330
 8805168:	088052a8 	cmpgeui	r2,at,330
 880516c:	08805e84 	addi	r2,at,378
 8805170:	08806094 	ori	r2,at,386
 8805174:	088052a8 	cmpgeui	r2,at,330
 8805178:	08805e9c 	xori	r2,at,378
 880517c:	08806130 	cmpltui	r2,at,388
 8805180:	088052a8 	cmpgeui	r2,at,330
 8805184:	0880611c 	xori	r2,at,388
 8805188:	088060e4 	muli	r2,at,387
 880518c:	088060e4 	muli	r2,at,387
 8805190:	088060e4 	muli	r2,at,387
 8805194:	088060e4 	muli	r2,at,387
 8805198:	088060e4 	muli	r2,at,387
 880519c:	088060e4 	muli	r2,at,387
 88051a0:	088060e4 	muli	r2,at,387
 88051a4:	088060e4 	muli	r2,at,387
 88051a8:	088060e4 	muli	r2,at,387
 88051ac:	088052a8 	cmpgeui	r2,at,330
 88051b0:	088052a8 	cmpgeui	r2,at,330
 88051b4:	088052a8 	cmpgeui	r2,at,330
 88051b8:	088052a8 	cmpgeui	r2,at,330
 88051bc:	088052a8 	cmpgeui	r2,at,330
 88051c0:	088052a8 	cmpgeui	r2,at,330
 88051c4:	088052a8 	cmpgeui	r2,at,330
 88051c8:	088052a8 	cmpgeui	r2,at,330
 88051cc:	088052a8 	cmpgeui	r2,at,330
 88051d0:	088052a8 	cmpgeui	r2,at,330
 88051d4:	08805900 	call	880590 <__alt_mem_onchip_memory2_3+0x879590>
 88051d8:	08805f6c 	andhi	r2,at,381
 88051dc:	088052a8 	cmpgeui	r2,at,330
 88051e0:	08805f6c 	andhi	r2,at,381
 88051e4:	088052a8 	cmpgeui	r2,at,330
 88051e8:	088052a8 	cmpgeui	r2,at,330
 88051ec:	088052a8 	cmpgeui	r2,at,330
 88051f0:	088052a8 	cmpgeui	r2,at,330
 88051f4:	088060d0 	cmplti	r2,at,387
 88051f8:	088052a8 	cmpgeui	r2,at,330
 88051fc:	088052a8 	cmpgeui	r2,at,330
 8805200:	088059b4 	orhi	r2,at,358
 8805204:	088052a8 	cmpgeui	r2,at,330
 8805208:	088052a8 	cmpgeui	r2,at,330
 880520c:	088052a8 	cmpgeui	r2,at,330
 8805210:	088052a8 	cmpgeui	r2,at,330
 8805214:	088052a8 	cmpgeui	r2,at,330
 8805218:	08805a00 	call	8805a0 <__alt_mem_onchip_memory2_3+0x8795a0>
 880521c:	088052a8 	cmpgeui	r2,at,330
 8805220:	088052a8 	cmpgeui	r2,at,330
 8805224:	08806020 	cmpeqi	r2,at,384
 8805228:	088052a8 	cmpgeui	r2,at,330
 880522c:	088052a8 	cmpgeui	r2,at,330
 8805230:	088052a8 	cmpgeui	r2,at,330
 8805234:	088052a8 	cmpgeui	r2,at,330
 8805238:	088052a8 	cmpgeui	r2,at,330
 880523c:	088052a8 	cmpgeui	r2,at,330
 8805240:	088052a8 	cmpgeui	r2,at,330
 8805244:	088052a8 	cmpgeui	r2,at,330
 8805248:	088052a8 	cmpgeui	r2,at,330
 880524c:	088052a8 	cmpgeui	r2,at,330
 8805250:	08805ff4 	orhi	r2,at,383
 8805254:	0880590c 	andi	r2,at,356
 8805258:	08805f6c 	andhi	r2,at,381
 880525c:	08805f6c 	andhi	r2,at,381
 8805260:	08805f6c 	andhi	r2,at,381
 8805264:	08805f58 	cmpnei	r2,at,381
 8805268:	0880590c 	andi	r2,at,356
 880526c:	088052a8 	cmpgeui	r2,at,330
 8805270:	088052a8 	cmpgeui	r2,at,330
 8805274:	08805ee0 	cmpeqi	r2,at,379
 8805278:	088052a8 	cmpgeui	r2,at,330
 880527c:	08805eb0 	cmpltui	r2,at,378
 8805280:	088059c0 	call	88059c <__alt_mem_onchip_memory2_3+0x87959c>
 8805284:	08805f10 	cmplti	r2,at,380
 8805288:	08805efc 	xorhi	r2,at,379
 880528c:	088052a8 	cmpgeui	r2,at,330
 8805290:	0880618c 	andi	r2,at,390
 8805294:	088052a8 	cmpgeui	r2,at,330
 8805298:	08805a0c 	andi	r2,at,360
 880529c:	088052a8 	cmpgeui	r2,at,330
 88052a0:	088052a8 	cmpgeui	r2,at,330
 88052a4:	08806084 	addi	r2,at,386
 88052a8:	d9014d17 	ldw	r4,1332(sp)
 88052ac:	2000ce26 	beq	r4,zero,88055e8 <___vfprintf_internal_r+0x6d4>
 88052b0:	01400044 	movi	r5,1
 88052b4:	d9800f04 	addi	r6,sp,60
 88052b8:	d9c14015 	stw	r7,1280(sp)
 88052bc:	d9414515 	stw	r5,1300(sp)
 88052c0:	d9814115 	stw	r6,1284(sp)
 88052c4:	280f883a 	mov	r7,r5
 88052c8:	d9000f05 	stb	r4,60(sp)
 88052cc:	d8000405 	stb	zero,16(sp)
 88052d0:	d8014615 	stw	zero,1304(sp)
 88052d4:	d8c14c17 	ldw	r3,1328(sp)
 88052d8:	1880008c 	andi	r2,r3,2
 88052dc:	1005003a 	cmpeq	r2,r2,zero
 88052e0:	d8815015 	stw	r2,1344(sp)
 88052e4:	1000031e 	bne	r2,zero,88052f4 <___vfprintf_internal_r+0x3e0>
 88052e8:	d9014517 	ldw	r4,1300(sp)
 88052ec:	21000084 	addi	r4,r4,2
 88052f0:	d9014515 	stw	r4,1300(sp)
 88052f4:	d9414c17 	ldw	r5,1328(sp)
 88052f8:	2940210c 	andi	r5,r5,132
 88052fc:	d9414e15 	stw	r5,1336(sp)
 8805300:	28002d1e 	bne	r5,zero,88053b8 <___vfprintf_internal_r+0x4a4>
 8805304:	d9814a17 	ldw	r6,1320(sp)
 8805308:	d8814517 	ldw	r2,1300(sp)
 880530c:	30a1c83a 	sub	r16,r6,r2
 8805310:	0400290e 	bge	zero,r16,88053b8 <___vfprintf_internal_r+0x4a4>
 8805314:	00800404 	movi	r2,16
 8805318:	1404580e 	bge	r2,r16,880647c <___vfprintf_internal_r+0x1568>
 880531c:	dc800e17 	ldw	r18,56(sp)
 8805320:	dc400d17 	ldw	r17,52(sp)
 8805324:	1027883a 	mov	r19,r2
 8805328:	07022074 	movhi	fp,2177
 880532c:	e706bf84 	addi	fp,fp,6910
 8805330:	050001c4 	movi	r20,7
 8805334:	00000306 	br	8805344 <___vfprintf_internal_r+0x430>
 8805338:	843ffc04 	addi	r16,r16,-16
 880533c:	ad400204 	addi	r21,r21,8
 8805340:	9c00130e 	bge	r19,r16,8805390 <___vfprintf_internal_r+0x47c>
 8805344:	94800404 	addi	r18,r18,16
 8805348:	8c400044 	addi	r17,r17,1
 880534c:	af000015 	stw	fp,0(r21)
 8805350:	acc00115 	stw	r19,4(r21)
 8805354:	dc800e15 	stw	r18,56(sp)
 8805358:	dc400d15 	stw	r17,52(sp)
 880535c:	a47ff60e 	bge	r20,r17,8805338 <___vfprintf_internal_r+0x424>
 8805360:	d9014f17 	ldw	r4,1340(sp)
 8805364:	b00b883a 	mov	r5,r22
 8805368:	d9800c04 	addi	r6,sp,48
 880536c:	d9c15115 	stw	r7,1348(sp)
 8805370:	8804ebc0 	call	8804ebc <__sprint_r>
 8805374:	d9c15117 	ldw	r7,1348(sp)
 8805378:	10009e1e 	bne	r2,zero,88055f4 <___vfprintf_internal_r+0x6e0>
 880537c:	843ffc04 	addi	r16,r16,-16
 8805380:	dc800e17 	ldw	r18,56(sp)
 8805384:	dc400d17 	ldw	r17,52(sp)
 8805388:	dd401904 	addi	r21,sp,100
 880538c:	9c3fed16 	blt	r19,r16,8805344 <___vfprintf_internal_r+0x430>
 8805390:	9425883a 	add	r18,r18,r16
 8805394:	8c400044 	addi	r17,r17,1
 8805398:	008001c4 	movi	r2,7
 880539c:	af000015 	stw	fp,0(r21)
 88053a0:	ac000115 	stw	r16,4(r21)
 88053a4:	dc800e15 	stw	r18,56(sp)
 88053a8:	dc400d15 	stw	r17,52(sp)
 88053ac:	1441f516 	blt	r2,r17,8805b84 <___vfprintf_internal_r+0xc70>
 88053b0:	ad400204 	addi	r21,r21,8
 88053b4:	00000206 	br	88053c0 <___vfprintf_internal_r+0x4ac>
 88053b8:	dc800e17 	ldw	r18,56(sp)
 88053bc:	dc400d17 	ldw	r17,52(sp)
 88053c0:	d8800407 	ldb	r2,16(sp)
 88053c4:	10000b26 	beq	r2,zero,88053f4 <___vfprintf_internal_r+0x4e0>
 88053c8:	00800044 	movi	r2,1
 88053cc:	94800044 	addi	r18,r18,1
 88053d0:	8c400044 	addi	r17,r17,1
 88053d4:	a8800115 	stw	r2,4(r21)
 88053d8:	d8c00404 	addi	r3,sp,16
 88053dc:	008001c4 	movi	r2,7
 88053e0:	a8c00015 	stw	r3,0(r21)
 88053e4:	dc800e15 	stw	r18,56(sp)
 88053e8:	dc400d15 	stw	r17,52(sp)
 88053ec:	1441da16 	blt	r2,r17,8805b58 <___vfprintf_internal_r+0xc44>
 88053f0:	ad400204 	addi	r21,r21,8
 88053f4:	d9015017 	ldw	r4,1344(sp)
 88053f8:	20000b1e 	bne	r4,zero,8805428 <___vfprintf_internal_r+0x514>
 88053fc:	d8800444 	addi	r2,sp,17
 8805400:	94800084 	addi	r18,r18,2
 8805404:	8c400044 	addi	r17,r17,1
 8805408:	a8800015 	stw	r2,0(r21)
 880540c:	00c00084 	movi	r3,2
 8805410:	008001c4 	movi	r2,7
 8805414:	a8c00115 	stw	r3,4(r21)
 8805418:	dc800e15 	stw	r18,56(sp)
 880541c:	dc400d15 	stw	r17,52(sp)
 8805420:	1441c216 	blt	r2,r17,8805b2c <___vfprintf_internal_r+0xc18>
 8805424:	ad400204 	addi	r21,r21,8
 8805428:	d9414e17 	ldw	r5,1336(sp)
 880542c:	00802004 	movi	r2,128
 8805430:	2880b126 	beq	r5,r2,88056f8 <___vfprintf_internal_r+0x7e4>
 8805434:	d8c14617 	ldw	r3,1304(sp)
 8805438:	19e1c83a 	sub	r16,r3,r7
 880543c:	0400260e 	bge	zero,r16,88054d8 <___vfprintf_internal_r+0x5c4>
 8805440:	00800404 	movi	r2,16
 8805444:	1403c90e 	bge	r2,r16,880636c <___vfprintf_internal_r+0x1458>
 8805448:	1027883a 	mov	r19,r2
 880544c:	07022074 	movhi	fp,2177
 8805450:	e706bb84 	addi	fp,fp,6894
 8805454:	050001c4 	movi	r20,7
 8805458:	00000306 	br	8805468 <___vfprintf_internal_r+0x554>
 880545c:	843ffc04 	addi	r16,r16,-16
 8805460:	ad400204 	addi	r21,r21,8
 8805464:	9c00130e 	bge	r19,r16,88054b4 <___vfprintf_internal_r+0x5a0>
 8805468:	94800404 	addi	r18,r18,16
 880546c:	8c400044 	addi	r17,r17,1
 8805470:	af000015 	stw	fp,0(r21)
 8805474:	acc00115 	stw	r19,4(r21)
 8805478:	dc800e15 	stw	r18,56(sp)
 880547c:	dc400d15 	stw	r17,52(sp)
 8805480:	a47ff60e 	bge	r20,r17,880545c <___vfprintf_internal_r+0x548>
 8805484:	d9014f17 	ldw	r4,1340(sp)
 8805488:	b00b883a 	mov	r5,r22
 880548c:	d9800c04 	addi	r6,sp,48
 8805490:	d9c15115 	stw	r7,1348(sp)
 8805494:	8804ebc0 	call	8804ebc <__sprint_r>
 8805498:	d9c15117 	ldw	r7,1348(sp)
 880549c:	1000551e 	bne	r2,zero,88055f4 <___vfprintf_internal_r+0x6e0>
 88054a0:	843ffc04 	addi	r16,r16,-16
 88054a4:	dc800e17 	ldw	r18,56(sp)
 88054a8:	dc400d17 	ldw	r17,52(sp)
 88054ac:	dd401904 	addi	r21,sp,100
 88054b0:	9c3fed16 	blt	r19,r16,8805468 <___vfprintf_internal_r+0x554>
 88054b4:	9425883a 	add	r18,r18,r16
 88054b8:	8c400044 	addi	r17,r17,1
 88054bc:	008001c4 	movi	r2,7
 88054c0:	af000015 	stw	fp,0(r21)
 88054c4:	ac000115 	stw	r16,4(r21)
 88054c8:	dc800e15 	stw	r18,56(sp)
 88054cc:	dc400d15 	stw	r17,52(sp)
 88054d0:	14418216 	blt	r2,r17,8805adc <___vfprintf_internal_r+0xbc8>
 88054d4:	ad400204 	addi	r21,r21,8
 88054d8:	d9014c17 	ldw	r4,1328(sp)
 88054dc:	2080400c 	andi	r2,r4,256
 88054e0:	10004a1e 	bne	r2,zero,880560c <___vfprintf_internal_r+0x6f8>
 88054e4:	d9414117 	ldw	r5,1284(sp)
 88054e8:	91e5883a 	add	r18,r18,r7
 88054ec:	8c400044 	addi	r17,r17,1
 88054f0:	008001c4 	movi	r2,7
 88054f4:	a9400015 	stw	r5,0(r21)
 88054f8:	a9c00115 	stw	r7,4(r21)
 88054fc:	dc800e15 	stw	r18,56(sp)
 8805500:	dc400d15 	stw	r17,52(sp)
 8805504:	14416716 	blt	r2,r17,8805aa4 <___vfprintf_internal_r+0xb90>
 8805508:	a8c00204 	addi	r3,r21,8
 880550c:	d9814c17 	ldw	r6,1328(sp)
 8805510:	3080010c 	andi	r2,r6,4
 8805514:	10002826 	beq	r2,zero,88055b8 <___vfprintf_internal_r+0x6a4>
 8805518:	d8814a17 	ldw	r2,1320(sp)
 880551c:	d9014517 	ldw	r4,1300(sp)
 8805520:	1121c83a 	sub	r16,r2,r4
 8805524:	0400240e 	bge	zero,r16,88055b8 <___vfprintf_internal_r+0x6a4>
 8805528:	00800404 	movi	r2,16
 880552c:	14044f0e 	bge	r2,r16,880666c <___vfprintf_internal_r+0x1758>
 8805530:	dc400d17 	ldw	r17,52(sp)
 8805534:	1027883a 	mov	r19,r2
 8805538:	07022074 	movhi	fp,2177
 880553c:	e706bf84 	addi	fp,fp,6910
 8805540:	050001c4 	movi	r20,7
 8805544:	00000306 	br	8805554 <___vfprintf_internal_r+0x640>
 8805548:	843ffc04 	addi	r16,r16,-16
 880554c:	18c00204 	addi	r3,r3,8
 8805550:	9c00110e 	bge	r19,r16,8805598 <___vfprintf_internal_r+0x684>
 8805554:	94800404 	addi	r18,r18,16
 8805558:	8c400044 	addi	r17,r17,1
 880555c:	1f000015 	stw	fp,0(r3)
 8805560:	1cc00115 	stw	r19,4(r3)
 8805564:	dc800e15 	stw	r18,56(sp)
 8805568:	dc400d15 	stw	r17,52(sp)
 880556c:	a47ff60e 	bge	r20,r17,8805548 <___vfprintf_internal_r+0x634>
 8805570:	d9014f17 	ldw	r4,1340(sp)
 8805574:	b00b883a 	mov	r5,r22
 8805578:	d9800c04 	addi	r6,sp,48
 880557c:	8804ebc0 	call	8804ebc <__sprint_r>
 8805580:	10001c1e 	bne	r2,zero,88055f4 <___vfprintf_internal_r+0x6e0>
 8805584:	843ffc04 	addi	r16,r16,-16
 8805588:	dc800e17 	ldw	r18,56(sp)
 880558c:	dc400d17 	ldw	r17,52(sp)
 8805590:	d8c01904 	addi	r3,sp,100
 8805594:	9c3fef16 	blt	r19,r16,8805554 <___vfprintf_internal_r+0x640>
 8805598:	9425883a 	add	r18,r18,r16
 880559c:	8c400044 	addi	r17,r17,1
 88055a0:	008001c4 	movi	r2,7
 88055a4:	1f000015 	stw	fp,0(r3)
 88055a8:	1c000115 	stw	r16,4(r3)
 88055ac:	dc800e15 	stw	r18,56(sp)
 88055b0:	dc400d15 	stw	r17,52(sp)
 88055b4:	1440cb16 	blt	r2,r17,88058e4 <___vfprintf_internal_r+0x9d0>
 88055b8:	d8814a17 	ldw	r2,1320(sp)
 88055bc:	d9414517 	ldw	r5,1300(sp)
 88055c0:	1140010e 	bge	r2,r5,88055c8 <___vfprintf_internal_r+0x6b4>
 88055c4:	2805883a 	mov	r2,r5
 88055c8:	d9814b17 	ldw	r6,1324(sp)
 88055cc:	308d883a 	add	r6,r6,r2
 88055d0:	d9814b15 	stw	r6,1324(sp)
 88055d4:	90013b1e 	bne	r18,zero,8805ac4 <___vfprintf_internal_r+0xbb0>
 88055d8:	d9c14017 	ldw	r7,1280(sp)
 88055dc:	dd401904 	addi	r21,sp,100
 88055e0:	d8000d15 	stw	zero,52(sp)
 88055e4:	003ea706 	br	8805084 <___vfprintf_internal_r+0x170>
 88055e8:	d8800e17 	ldw	r2,56(sp)
 88055ec:	10053f1e 	bne	r2,zero,8806aec <___vfprintf_internal_r+0x1bd8>
 88055f0:	d8000d15 	stw	zero,52(sp)
 88055f4:	b080030b 	ldhu	r2,12(r22)
 88055f8:	1080100c 	andi	r2,r2,64
 88055fc:	103e8726 	beq	r2,zero,880501c <___vfprintf_internal_r+0x108>
 8805600:	00bfffc4 	movi	r2,-1
 8805604:	d8814b15 	stw	r2,1324(sp)
 8805608:	003e8406 	br	880501c <___vfprintf_internal_r+0x108>
 880560c:	d9814d17 	ldw	r6,1332(sp)
 8805610:	00801944 	movi	r2,101
 8805614:	11806e16 	blt	r2,r6,88057d0 <___vfprintf_internal_r+0x8bc>
 8805618:	d9414717 	ldw	r5,1308(sp)
 880561c:	00c00044 	movi	r3,1
 8805620:	1943430e 	bge	r3,r5,8806330 <___vfprintf_internal_r+0x141c>
 8805624:	d8814117 	ldw	r2,1284(sp)
 8805628:	94800044 	addi	r18,r18,1
 880562c:	8c400044 	addi	r17,r17,1
 8805630:	a8800015 	stw	r2,0(r21)
 8805634:	008001c4 	movi	r2,7
 8805638:	a8c00115 	stw	r3,4(r21)
 880563c:	dc800e15 	stw	r18,56(sp)
 8805640:	dc400d15 	stw	r17,52(sp)
 8805644:	1441ca16 	blt	r2,r17,8805d70 <___vfprintf_internal_r+0xe5c>
 8805648:	a8c00204 	addi	r3,r21,8
 880564c:	d9014917 	ldw	r4,1316(sp)
 8805650:	00800044 	movi	r2,1
 8805654:	94800044 	addi	r18,r18,1
 8805658:	8c400044 	addi	r17,r17,1
 880565c:	18800115 	stw	r2,4(r3)
 8805660:	008001c4 	movi	r2,7
 8805664:	19000015 	stw	r4,0(r3)
 8805668:	dc800e15 	stw	r18,56(sp)
 880566c:	dc400d15 	stw	r17,52(sp)
 8805670:	1441b616 	blt	r2,r17,8805d4c <___vfprintf_internal_r+0xe38>
 8805674:	1cc00204 	addi	r19,r3,8
 8805678:	d9014217 	ldw	r4,1288(sp)
 880567c:	d9414317 	ldw	r5,1292(sp)
 8805680:	000d883a 	mov	r6,zero
 8805684:	000f883a 	mov	r7,zero
 8805688:	8803ed40 	call	8803ed4 <__nedf2>
 880568c:	10017426 	beq	r2,zero,8805c60 <___vfprintf_internal_r+0xd4c>
 8805690:	d9414717 	ldw	r5,1308(sp)
 8805694:	d9814117 	ldw	r6,1284(sp)
 8805698:	8c400044 	addi	r17,r17,1
 880569c:	2c85883a 	add	r2,r5,r18
 88056a0:	14bfffc4 	addi	r18,r2,-1
 88056a4:	28bfffc4 	addi	r2,r5,-1
 88056a8:	30c00044 	addi	r3,r6,1
 88056ac:	98800115 	stw	r2,4(r19)
 88056b0:	008001c4 	movi	r2,7
 88056b4:	98c00015 	stw	r3,0(r19)
 88056b8:	dc800e15 	stw	r18,56(sp)
 88056bc:	dc400d15 	stw	r17,52(sp)
 88056c0:	14418e16 	blt	r2,r17,8805cfc <___vfprintf_internal_r+0xde8>
 88056c4:	9cc00204 	addi	r19,r19,8
 88056c8:	d9414817 	ldw	r5,1312(sp)
 88056cc:	d8800804 	addi	r2,sp,32
 88056d0:	8c400044 	addi	r17,r17,1
 88056d4:	9165883a 	add	r18,r18,r5
 88056d8:	98800015 	stw	r2,0(r19)
 88056dc:	008001c4 	movi	r2,7
 88056e0:	99400115 	stw	r5,4(r19)
 88056e4:	dc800e15 	stw	r18,56(sp)
 88056e8:	dc400d15 	stw	r17,52(sp)
 88056ec:	1440ed16 	blt	r2,r17,8805aa4 <___vfprintf_internal_r+0xb90>
 88056f0:	98c00204 	addi	r3,r19,8
 88056f4:	003f8506 	br	880550c <___vfprintf_internal_r+0x5f8>
 88056f8:	d9814a17 	ldw	r6,1320(sp)
 88056fc:	d8814517 	ldw	r2,1300(sp)
 8805700:	30a1c83a 	sub	r16,r6,r2
 8805704:	043f4b0e 	bge	zero,r16,8805434 <___vfprintf_internal_r+0x520>
 8805708:	00800404 	movi	r2,16
 880570c:	1404340e 	bge	r2,r16,88067e0 <___vfprintf_internal_r+0x18cc>
 8805710:	1027883a 	mov	r19,r2
 8805714:	07022074 	movhi	fp,2177
 8805718:	e706bb84 	addi	fp,fp,6894
 880571c:	050001c4 	movi	r20,7
 8805720:	00000306 	br	8805730 <___vfprintf_internal_r+0x81c>
 8805724:	843ffc04 	addi	r16,r16,-16
 8805728:	ad400204 	addi	r21,r21,8
 880572c:	9c00130e 	bge	r19,r16,880577c <___vfprintf_internal_r+0x868>
 8805730:	94800404 	addi	r18,r18,16
 8805734:	8c400044 	addi	r17,r17,1
 8805738:	af000015 	stw	fp,0(r21)
 880573c:	acc00115 	stw	r19,4(r21)
 8805740:	dc800e15 	stw	r18,56(sp)
 8805744:	dc400d15 	stw	r17,52(sp)
 8805748:	a47ff60e 	bge	r20,r17,8805724 <___vfprintf_internal_r+0x810>
 880574c:	d9014f17 	ldw	r4,1340(sp)
 8805750:	b00b883a 	mov	r5,r22
 8805754:	d9800c04 	addi	r6,sp,48
 8805758:	d9c15115 	stw	r7,1348(sp)
 880575c:	8804ebc0 	call	8804ebc <__sprint_r>
 8805760:	d9c15117 	ldw	r7,1348(sp)
 8805764:	103fa31e 	bne	r2,zero,88055f4 <___vfprintf_internal_r+0x6e0>
 8805768:	843ffc04 	addi	r16,r16,-16
 880576c:	dc800e17 	ldw	r18,56(sp)
 8805770:	dc400d17 	ldw	r17,52(sp)
 8805774:	dd401904 	addi	r21,sp,100
 8805778:	9c3fed16 	blt	r19,r16,8805730 <___vfprintf_internal_r+0x81c>
 880577c:	9425883a 	add	r18,r18,r16
 8805780:	8c400044 	addi	r17,r17,1
 8805784:	008001c4 	movi	r2,7
 8805788:	af000015 	stw	fp,0(r21)
 880578c:	ac000115 	stw	r16,4(r21)
 8805790:	dc800e15 	stw	r18,56(sp)
 8805794:	dc400d15 	stw	r17,52(sp)
 8805798:	14416116 	blt	r2,r17,8805d20 <___vfprintf_internal_r+0xe0c>
 880579c:	ad400204 	addi	r21,r21,8
 88057a0:	003f2406 	br	8805434 <___vfprintf_internal_r+0x520>
 88057a4:	d9014f17 	ldw	r4,1340(sp)
 88057a8:	88089840 	call	8808984 <__sinit>
 88057ac:	d9c15117 	ldw	r7,1348(sp)
 88057b0:	003def06 	br	8804f70 <___vfprintf_internal_r+0x5c>
 88057b4:	d9014f17 	ldw	r4,1340(sp)
 88057b8:	b00b883a 	mov	r5,r22
 88057bc:	d9c15115 	stw	r7,1348(sp)
 88057c0:	8806de40 	call	8806de4 <__swsetup_r>
 88057c4:	d9c15117 	ldw	r7,1348(sp)
 88057c8:	103dee26 	beq	r2,zero,8804f84 <___vfprintf_internal_r+0x70>
 88057cc:	003f8c06 	br	8805600 <___vfprintf_internal_r+0x6ec>
 88057d0:	d9014217 	ldw	r4,1288(sp)
 88057d4:	d9414317 	ldw	r5,1292(sp)
 88057d8:	000d883a 	mov	r6,zero
 88057dc:	000f883a 	mov	r7,zero
 88057e0:	8803e4c0 	call	8803e4c <__eqdf2>
 88057e4:	1000f21e 	bne	r2,zero,8805bb0 <___vfprintf_internal_r+0xc9c>
 88057e8:	00822074 	movhi	r2,2177
 88057ec:	1086bb04 	addi	r2,r2,6892
 88057f0:	94800044 	addi	r18,r18,1
 88057f4:	8c400044 	addi	r17,r17,1
 88057f8:	a8800015 	stw	r2,0(r21)
 88057fc:	00c00044 	movi	r3,1
 8805800:	008001c4 	movi	r2,7
 8805804:	a8c00115 	stw	r3,4(r21)
 8805808:	dc800e15 	stw	r18,56(sp)
 880580c:	dc400d15 	stw	r17,52(sp)
 8805810:	1442fa16 	blt	r2,r17,88063fc <___vfprintf_internal_r+0x14e8>
 8805814:	a8c00204 	addi	r3,r21,8
 8805818:	d8800517 	ldw	r2,20(sp)
 880581c:	d9014717 	ldw	r4,1308(sp)
 8805820:	11015c0e 	bge	r2,r4,8805d94 <___vfprintf_internal_r+0xe80>
 8805824:	dc400d17 	ldw	r17,52(sp)
 8805828:	d9814917 	ldw	r6,1316(sp)
 880582c:	00800044 	movi	r2,1
 8805830:	94800044 	addi	r18,r18,1
 8805834:	8c400044 	addi	r17,r17,1
 8805838:	18800115 	stw	r2,4(r3)
 880583c:	008001c4 	movi	r2,7
 8805840:	19800015 	stw	r6,0(r3)
 8805844:	dc800e15 	stw	r18,56(sp)
 8805848:	dc400d15 	stw	r17,52(sp)
 880584c:	14431016 	blt	r2,r17,8806490 <___vfprintf_internal_r+0x157c>
 8805850:	18c00204 	addi	r3,r3,8
 8805854:	d8814717 	ldw	r2,1308(sp)
 8805858:	143fffc4 	addi	r16,r2,-1
 880585c:	043f2b0e 	bge	zero,r16,880550c <___vfprintf_internal_r+0x5f8>
 8805860:	00800404 	movi	r2,16
 8805864:	1402a20e 	bge	r2,r16,88062f0 <___vfprintf_internal_r+0x13dc>
 8805868:	dc400d17 	ldw	r17,52(sp)
 880586c:	1027883a 	mov	r19,r2
 8805870:	07022074 	movhi	fp,2177
 8805874:	e706bb84 	addi	fp,fp,6894
 8805878:	050001c4 	movi	r20,7
 880587c:	00000306 	br	880588c <___vfprintf_internal_r+0x978>
 8805880:	18c00204 	addi	r3,r3,8
 8805884:	843ffc04 	addi	r16,r16,-16
 8805888:	9c029c0e 	bge	r19,r16,88062fc <___vfprintf_internal_r+0x13e8>
 880588c:	94800404 	addi	r18,r18,16
 8805890:	8c400044 	addi	r17,r17,1
 8805894:	1f000015 	stw	fp,0(r3)
 8805898:	1cc00115 	stw	r19,4(r3)
 880589c:	dc800e15 	stw	r18,56(sp)
 88058a0:	dc400d15 	stw	r17,52(sp)
 88058a4:	a47ff60e 	bge	r20,r17,8805880 <___vfprintf_internal_r+0x96c>
 88058a8:	d9014f17 	ldw	r4,1340(sp)
 88058ac:	b00b883a 	mov	r5,r22
 88058b0:	d9800c04 	addi	r6,sp,48
 88058b4:	8804ebc0 	call	8804ebc <__sprint_r>
 88058b8:	103f4e1e 	bne	r2,zero,88055f4 <___vfprintf_internal_r+0x6e0>
 88058bc:	dc800e17 	ldw	r18,56(sp)
 88058c0:	dc400d17 	ldw	r17,52(sp)
 88058c4:	d8c01904 	addi	r3,sp,100
 88058c8:	003fee06 	br	8805884 <___vfprintf_internal_r+0x970>
 88058cc:	d8802c0b 	ldhu	r2,176(sp)
 88058d0:	00ffffc4 	movi	r3,-1
 88058d4:	d8c14b15 	stw	r3,1324(sp)
 88058d8:	1080100c 	andi	r2,r2,64
 88058dc:	103dcc1e 	bne	r2,zero,8805010 <___vfprintf_internal_r+0xfc>
 88058e0:	003dce06 	br	880501c <___vfprintf_internal_r+0x108>
 88058e4:	d9014f17 	ldw	r4,1340(sp)
 88058e8:	b00b883a 	mov	r5,r22
 88058ec:	d9800c04 	addi	r6,sp,48
 88058f0:	8804ebc0 	call	8804ebc <__sprint_r>
 88058f4:	103f3f1e 	bne	r2,zero,88055f4 <___vfprintf_internal_r+0x6e0>
 88058f8:	dc800e17 	ldw	r18,56(sp)
 88058fc:	003f2e06 	br	88055b8 <___vfprintf_internal_r+0x6a4>
 8805900:	d9414c17 	ldw	r5,1328(sp)
 8805904:	29400414 	ori	r5,r5,16
 8805908:	d9414c15 	stw	r5,1328(sp)
 880590c:	d9814c17 	ldw	r6,1328(sp)
 8805910:	3080080c 	andi	r2,r6,32
 8805914:	10014f1e 	bne	r2,zero,8805e54 <___vfprintf_internal_r+0xf40>
 8805918:	d8c14c17 	ldw	r3,1328(sp)
 880591c:	1880040c 	andi	r2,r3,16
 8805920:	1002ea1e 	bne	r2,zero,88064cc <___vfprintf_internal_r+0x15b8>
 8805924:	d9014c17 	ldw	r4,1328(sp)
 8805928:	2080100c 	andi	r2,r4,64
 880592c:	1002e726 	beq	r2,zero,88064cc <___vfprintf_internal_r+0x15b8>
 8805930:	3880000f 	ldh	r2,0(r7)
 8805934:	39c00104 	addi	r7,r7,4
 8805938:	d9c14015 	stw	r7,1280(sp)
 880593c:	1023d7fa 	srai	r17,r2,31
 8805940:	1021883a 	mov	r16,r2
 8805944:	88037216 	blt	r17,zero,8806710 <___vfprintf_internal_r+0x17fc>
 8805948:	01000044 	movi	r4,1
 880594c:	98000416 	blt	r19,zero,8805960 <___vfprintf_internal_r+0xa4c>
 8805950:	d8c14c17 	ldw	r3,1328(sp)
 8805954:	00bfdfc4 	movi	r2,-129
 8805958:	1886703a 	and	r3,r3,r2
 880595c:	d8c14c15 	stw	r3,1328(sp)
 8805960:	8444b03a 	or	r2,r16,r17
 8805964:	1002261e 	bne	r2,zero,8806200 <___vfprintf_internal_r+0x12ec>
 8805968:	9802251e 	bne	r19,zero,8806200 <___vfprintf_internal_r+0x12ec>
 880596c:	20803fcc 	andi	r2,r4,255
 8805970:	10029b26 	beq	r2,zero,88063e0 <___vfprintf_internal_r+0x14cc>
 8805974:	d8c01904 	addi	r3,sp,100
 8805978:	dd000f04 	addi	r20,sp,60
 880597c:	d8c14115 	stw	r3,1284(sp)
 8805980:	d8c14117 	ldw	r3,1284(sp)
 8805984:	dcc14515 	stw	r19,1300(sp)
 8805988:	a0c5c83a 	sub	r2,r20,r3
 880598c:	11c00a04 	addi	r7,r2,40
 8805990:	99c0010e 	bge	r19,r7,8805998 <___vfprintf_internal_r+0xa84>
 8805994:	d9c14515 	stw	r7,1300(sp)
 8805998:	dcc14615 	stw	r19,1304(sp)
 880599c:	d8800407 	ldb	r2,16(sp)
 88059a0:	103e4c26 	beq	r2,zero,88052d4 <___vfprintf_internal_r+0x3c0>
 88059a4:	d8814517 	ldw	r2,1300(sp)
 88059a8:	10800044 	addi	r2,r2,1
 88059ac:	d8814515 	stw	r2,1300(sp)
 88059b0:	003e4806 	br	88052d4 <___vfprintf_internal_r+0x3c0>
 88059b4:	d9814c17 	ldw	r6,1328(sp)
 88059b8:	31800414 	ori	r6,r6,16
 88059bc:	d9814c15 	stw	r6,1328(sp)
 88059c0:	d8c14c17 	ldw	r3,1328(sp)
 88059c4:	1880080c 	andi	r2,r3,32
 88059c8:	1001271e 	bne	r2,zero,8805e68 <___vfprintf_internal_r+0xf54>
 88059cc:	d9414c17 	ldw	r5,1328(sp)
 88059d0:	2880040c 	andi	r2,r5,16
 88059d4:	1002b61e 	bne	r2,zero,88064b0 <___vfprintf_internal_r+0x159c>
 88059d8:	d9814c17 	ldw	r6,1328(sp)
 88059dc:	3080100c 	andi	r2,r6,64
 88059e0:	1002b326 	beq	r2,zero,88064b0 <___vfprintf_internal_r+0x159c>
 88059e4:	3c00000b 	ldhu	r16,0(r7)
 88059e8:	0009883a 	mov	r4,zero
 88059ec:	39c00104 	addi	r7,r7,4
 88059f0:	0023883a 	mov	r17,zero
 88059f4:	d9c14015 	stw	r7,1280(sp)
 88059f8:	d8000405 	stb	zero,16(sp)
 88059fc:	003fd306 	br	880594c <___vfprintf_internal_r+0xa38>
 8805a00:	d9014c17 	ldw	r4,1328(sp)
 8805a04:	21000414 	ori	r4,r4,16
 8805a08:	d9014c15 	stw	r4,1328(sp)
 8805a0c:	d9414c17 	ldw	r5,1328(sp)
 8805a10:	2880080c 	andi	r2,r5,32
 8805a14:	1001081e 	bne	r2,zero,8805e38 <___vfprintf_internal_r+0xf24>
 8805a18:	d8c14c17 	ldw	r3,1328(sp)
 8805a1c:	1880040c 	andi	r2,r3,16
 8805a20:	1002b01e 	bne	r2,zero,88064e4 <___vfprintf_internal_r+0x15d0>
 8805a24:	d9014c17 	ldw	r4,1328(sp)
 8805a28:	2080100c 	andi	r2,r4,64
 8805a2c:	1002ad26 	beq	r2,zero,88064e4 <___vfprintf_internal_r+0x15d0>
 8805a30:	3c00000b 	ldhu	r16,0(r7)
 8805a34:	01000044 	movi	r4,1
 8805a38:	39c00104 	addi	r7,r7,4
 8805a3c:	0023883a 	mov	r17,zero
 8805a40:	d9c14015 	stw	r7,1280(sp)
 8805a44:	d8000405 	stb	zero,16(sp)
 8805a48:	003fc006 	br	880594c <___vfprintf_internal_r+0xa38>
 8805a4c:	d9014f17 	ldw	r4,1340(sp)
 8805a50:	b00b883a 	mov	r5,r22
 8805a54:	d9800c04 	addi	r6,sp,48
 8805a58:	8804ebc0 	call	8804ebc <__sprint_r>
 8805a5c:	103ee51e 	bne	r2,zero,88055f4 <___vfprintf_internal_r+0x6e0>
 8805a60:	dc800e17 	ldw	r18,56(sp)
 8805a64:	d8c01904 	addi	r3,sp,100
 8805a68:	d9814c17 	ldw	r6,1328(sp)
 8805a6c:	3080004c 	andi	r2,r6,1
 8805a70:	1005003a 	cmpeq	r2,r2,zero
 8805a74:	103ea51e 	bne	r2,zero,880550c <___vfprintf_internal_r+0x5f8>
 8805a78:	00800044 	movi	r2,1
 8805a7c:	dc400d17 	ldw	r17,52(sp)
 8805a80:	18800115 	stw	r2,4(r3)
 8805a84:	d8814917 	ldw	r2,1316(sp)
 8805a88:	94800044 	addi	r18,r18,1
 8805a8c:	8c400044 	addi	r17,r17,1
 8805a90:	18800015 	stw	r2,0(r3)
 8805a94:	008001c4 	movi	r2,7
 8805a98:	dc800e15 	stw	r18,56(sp)
 8805a9c:	dc400d15 	stw	r17,52(sp)
 8805aa0:	14421e0e 	bge	r2,r17,880631c <___vfprintf_internal_r+0x1408>
 8805aa4:	d9014f17 	ldw	r4,1340(sp)
 8805aa8:	b00b883a 	mov	r5,r22
 8805aac:	d9800c04 	addi	r6,sp,48
 8805ab0:	8804ebc0 	call	8804ebc <__sprint_r>
 8805ab4:	103ecf1e 	bne	r2,zero,88055f4 <___vfprintf_internal_r+0x6e0>
 8805ab8:	dc800e17 	ldw	r18,56(sp)
 8805abc:	d8c01904 	addi	r3,sp,100
 8805ac0:	003e9206 	br	880550c <___vfprintf_internal_r+0x5f8>
 8805ac4:	d9014f17 	ldw	r4,1340(sp)
 8805ac8:	b00b883a 	mov	r5,r22
 8805acc:	d9800c04 	addi	r6,sp,48
 8805ad0:	8804ebc0 	call	8804ebc <__sprint_r>
 8805ad4:	103ec026 	beq	r2,zero,88055d8 <___vfprintf_internal_r+0x6c4>
 8805ad8:	003ec606 	br	88055f4 <___vfprintf_internal_r+0x6e0>
 8805adc:	d9014f17 	ldw	r4,1340(sp)
 8805ae0:	b00b883a 	mov	r5,r22
 8805ae4:	d9800c04 	addi	r6,sp,48
 8805ae8:	d9c15115 	stw	r7,1348(sp)
 8805aec:	8804ebc0 	call	8804ebc <__sprint_r>
 8805af0:	d9c15117 	ldw	r7,1348(sp)
 8805af4:	103ebf1e 	bne	r2,zero,88055f4 <___vfprintf_internal_r+0x6e0>
 8805af8:	dc800e17 	ldw	r18,56(sp)
 8805afc:	dc400d17 	ldw	r17,52(sp)
 8805b00:	dd401904 	addi	r21,sp,100
 8805b04:	003e7406 	br	88054d8 <___vfprintf_internal_r+0x5c4>
 8805b08:	d9014f17 	ldw	r4,1340(sp)
 8805b0c:	b00b883a 	mov	r5,r22
 8805b10:	d9800c04 	addi	r6,sp,48
 8805b14:	d9c15115 	stw	r7,1348(sp)
 8805b18:	8804ebc0 	call	8804ebc <__sprint_r>
 8805b1c:	d9c15117 	ldw	r7,1348(sp)
 8805b20:	103eb41e 	bne	r2,zero,88055f4 <___vfprintf_internal_r+0x6e0>
 8805b24:	dd401904 	addi	r21,sp,100
 8805b28:	003d6d06 	br	88050e0 <___vfprintf_internal_r+0x1cc>
 8805b2c:	d9014f17 	ldw	r4,1340(sp)
 8805b30:	b00b883a 	mov	r5,r22
 8805b34:	d9800c04 	addi	r6,sp,48
 8805b38:	d9c15115 	stw	r7,1348(sp)
 8805b3c:	8804ebc0 	call	8804ebc <__sprint_r>
 8805b40:	d9c15117 	ldw	r7,1348(sp)
 8805b44:	103eab1e 	bne	r2,zero,88055f4 <___vfprintf_internal_r+0x6e0>
 8805b48:	dc800e17 	ldw	r18,56(sp)
 8805b4c:	dc400d17 	ldw	r17,52(sp)
 8805b50:	dd401904 	addi	r21,sp,100
 8805b54:	003e3406 	br	8805428 <___vfprintf_internal_r+0x514>
 8805b58:	d9014f17 	ldw	r4,1340(sp)
 8805b5c:	b00b883a 	mov	r5,r22
 8805b60:	d9800c04 	addi	r6,sp,48
 8805b64:	d9c15115 	stw	r7,1348(sp)
 8805b68:	8804ebc0 	call	8804ebc <__sprint_r>
 8805b6c:	d9c15117 	ldw	r7,1348(sp)
 8805b70:	103ea01e 	bne	r2,zero,88055f4 <___vfprintf_internal_r+0x6e0>
 8805b74:	dc800e17 	ldw	r18,56(sp)
 8805b78:	dc400d17 	ldw	r17,52(sp)
 8805b7c:	dd401904 	addi	r21,sp,100
 8805b80:	003e1c06 	br	88053f4 <___vfprintf_internal_r+0x4e0>
 8805b84:	d9014f17 	ldw	r4,1340(sp)
 8805b88:	b00b883a 	mov	r5,r22
 8805b8c:	d9800c04 	addi	r6,sp,48
 8805b90:	d9c15115 	stw	r7,1348(sp)
 8805b94:	8804ebc0 	call	8804ebc <__sprint_r>
 8805b98:	d9c15117 	ldw	r7,1348(sp)
 8805b9c:	103e951e 	bne	r2,zero,88055f4 <___vfprintf_internal_r+0x6e0>
 8805ba0:	dc800e17 	ldw	r18,56(sp)
 8805ba4:	dc400d17 	ldw	r17,52(sp)
 8805ba8:	dd401904 	addi	r21,sp,100
 8805bac:	003e0406 	br	88053c0 <___vfprintf_internal_r+0x4ac>
 8805bb0:	d9000517 	ldw	r4,20(sp)
 8805bb4:	0102520e 	bge	zero,r4,8806500 <___vfprintf_internal_r+0x15ec>
 8805bb8:	d9814717 	ldw	r6,1308(sp)
 8805bbc:	21807a16 	blt	r4,r6,8805da8 <___vfprintf_internal_r+0xe94>
 8805bc0:	d8814117 	ldw	r2,1284(sp)
 8805bc4:	91a5883a 	add	r18,r18,r6
 8805bc8:	8c400044 	addi	r17,r17,1
 8805bcc:	a8800015 	stw	r2,0(r21)
 8805bd0:	008001c4 	movi	r2,7
 8805bd4:	a9800115 	stw	r6,4(r21)
 8805bd8:	dc800e15 	stw	r18,56(sp)
 8805bdc:	dc400d15 	stw	r17,52(sp)
 8805be0:	1442f616 	blt	r2,r17,88067bc <___vfprintf_internal_r+0x18a8>
 8805be4:	a8c00204 	addi	r3,r21,8
 8805be8:	d9414717 	ldw	r5,1308(sp)
 8805bec:	2161c83a 	sub	r16,r4,r5
 8805bf0:	043f9d0e 	bge	zero,r16,8805a68 <___vfprintf_internal_r+0xb54>
 8805bf4:	00800404 	movi	r2,16
 8805bf8:	1402130e 	bge	r2,r16,8806448 <___vfprintf_internal_r+0x1534>
 8805bfc:	dc400d17 	ldw	r17,52(sp)
 8805c00:	1027883a 	mov	r19,r2
 8805c04:	07022074 	movhi	fp,2177
 8805c08:	e706bb84 	addi	fp,fp,6894
 8805c0c:	050001c4 	movi	r20,7
 8805c10:	00000306 	br	8805c20 <___vfprintf_internal_r+0xd0c>
 8805c14:	18c00204 	addi	r3,r3,8
 8805c18:	843ffc04 	addi	r16,r16,-16
 8805c1c:	9c020d0e 	bge	r19,r16,8806454 <___vfprintf_internal_r+0x1540>
 8805c20:	94800404 	addi	r18,r18,16
 8805c24:	8c400044 	addi	r17,r17,1
 8805c28:	1f000015 	stw	fp,0(r3)
 8805c2c:	1cc00115 	stw	r19,4(r3)
 8805c30:	dc800e15 	stw	r18,56(sp)
 8805c34:	dc400d15 	stw	r17,52(sp)
 8805c38:	a47ff60e 	bge	r20,r17,8805c14 <___vfprintf_internal_r+0xd00>
 8805c3c:	d9014f17 	ldw	r4,1340(sp)
 8805c40:	b00b883a 	mov	r5,r22
 8805c44:	d9800c04 	addi	r6,sp,48
 8805c48:	8804ebc0 	call	8804ebc <__sprint_r>
 8805c4c:	103e691e 	bne	r2,zero,88055f4 <___vfprintf_internal_r+0x6e0>
 8805c50:	dc800e17 	ldw	r18,56(sp)
 8805c54:	dc400d17 	ldw	r17,52(sp)
 8805c58:	d8c01904 	addi	r3,sp,100
 8805c5c:	003fee06 	br	8805c18 <___vfprintf_internal_r+0xd04>
 8805c60:	d8814717 	ldw	r2,1308(sp)
 8805c64:	143fffc4 	addi	r16,r2,-1
 8805c68:	043e970e 	bge	zero,r16,88056c8 <___vfprintf_internal_r+0x7b4>
 8805c6c:	00800404 	movi	r2,16
 8805c70:	1400180e 	bge	r2,r16,8805cd4 <___vfprintf_internal_r+0xdc0>
 8805c74:	1029883a 	mov	r20,r2
 8805c78:	07022074 	movhi	fp,2177
 8805c7c:	e706bb84 	addi	fp,fp,6894
 8805c80:	054001c4 	movi	r21,7
 8805c84:	00000306 	br	8805c94 <___vfprintf_internal_r+0xd80>
 8805c88:	9cc00204 	addi	r19,r19,8
 8805c8c:	843ffc04 	addi	r16,r16,-16
 8805c90:	a400120e 	bge	r20,r16,8805cdc <___vfprintf_internal_r+0xdc8>
 8805c94:	94800404 	addi	r18,r18,16
 8805c98:	8c400044 	addi	r17,r17,1
 8805c9c:	9f000015 	stw	fp,0(r19)
 8805ca0:	9d000115 	stw	r20,4(r19)
 8805ca4:	dc800e15 	stw	r18,56(sp)
 8805ca8:	dc400d15 	stw	r17,52(sp)
 8805cac:	ac7ff60e 	bge	r21,r17,8805c88 <___vfprintf_internal_r+0xd74>
 8805cb0:	d9014f17 	ldw	r4,1340(sp)
 8805cb4:	b00b883a 	mov	r5,r22
 8805cb8:	d9800c04 	addi	r6,sp,48
 8805cbc:	8804ebc0 	call	8804ebc <__sprint_r>
 8805cc0:	103e4c1e 	bne	r2,zero,88055f4 <___vfprintf_internal_r+0x6e0>
 8805cc4:	dc800e17 	ldw	r18,56(sp)
 8805cc8:	dc400d17 	ldw	r17,52(sp)
 8805ccc:	dcc01904 	addi	r19,sp,100
 8805cd0:	003fee06 	br	8805c8c <___vfprintf_internal_r+0xd78>
 8805cd4:	07022074 	movhi	fp,2177
 8805cd8:	e706bb84 	addi	fp,fp,6894
 8805cdc:	9425883a 	add	r18,r18,r16
 8805ce0:	8c400044 	addi	r17,r17,1
 8805ce4:	008001c4 	movi	r2,7
 8805ce8:	9f000015 	stw	fp,0(r19)
 8805cec:	9c000115 	stw	r16,4(r19)
 8805cf0:	dc800e15 	stw	r18,56(sp)
 8805cf4:	dc400d15 	stw	r17,52(sp)
 8805cf8:	147e720e 	bge	r2,r17,88056c4 <___vfprintf_internal_r+0x7b0>
 8805cfc:	d9014f17 	ldw	r4,1340(sp)
 8805d00:	b00b883a 	mov	r5,r22
 8805d04:	d9800c04 	addi	r6,sp,48
 8805d08:	8804ebc0 	call	8804ebc <__sprint_r>
 8805d0c:	103e391e 	bne	r2,zero,88055f4 <___vfprintf_internal_r+0x6e0>
 8805d10:	dc800e17 	ldw	r18,56(sp)
 8805d14:	dc400d17 	ldw	r17,52(sp)
 8805d18:	dcc01904 	addi	r19,sp,100
 8805d1c:	003e6a06 	br	88056c8 <___vfprintf_internal_r+0x7b4>
 8805d20:	d9014f17 	ldw	r4,1340(sp)
 8805d24:	b00b883a 	mov	r5,r22
 8805d28:	d9800c04 	addi	r6,sp,48
 8805d2c:	d9c15115 	stw	r7,1348(sp)
 8805d30:	8804ebc0 	call	8804ebc <__sprint_r>
 8805d34:	d9c15117 	ldw	r7,1348(sp)
 8805d38:	103e2e1e 	bne	r2,zero,88055f4 <___vfprintf_internal_r+0x6e0>
 8805d3c:	dc800e17 	ldw	r18,56(sp)
 8805d40:	dc400d17 	ldw	r17,52(sp)
 8805d44:	dd401904 	addi	r21,sp,100
 8805d48:	003dba06 	br	8805434 <___vfprintf_internal_r+0x520>
 8805d4c:	d9014f17 	ldw	r4,1340(sp)
 8805d50:	b00b883a 	mov	r5,r22
 8805d54:	d9800c04 	addi	r6,sp,48
 8805d58:	8804ebc0 	call	8804ebc <__sprint_r>
 8805d5c:	103e251e 	bne	r2,zero,88055f4 <___vfprintf_internal_r+0x6e0>
 8805d60:	dc800e17 	ldw	r18,56(sp)
 8805d64:	dc400d17 	ldw	r17,52(sp)
 8805d68:	dcc01904 	addi	r19,sp,100
 8805d6c:	003e4206 	br	8805678 <___vfprintf_internal_r+0x764>
 8805d70:	d9014f17 	ldw	r4,1340(sp)
 8805d74:	b00b883a 	mov	r5,r22
 8805d78:	d9800c04 	addi	r6,sp,48
 8805d7c:	8804ebc0 	call	8804ebc <__sprint_r>
 8805d80:	103e1c1e 	bne	r2,zero,88055f4 <___vfprintf_internal_r+0x6e0>
 8805d84:	dc800e17 	ldw	r18,56(sp)
 8805d88:	dc400d17 	ldw	r17,52(sp)
 8805d8c:	d8c01904 	addi	r3,sp,100
 8805d90:	003e2e06 	br	880564c <___vfprintf_internal_r+0x738>
 8805d94:	d9414c17 	ldw	r5,1328(sp)
 8805d98:	2880004c 	andi	r2,r5,1
 8805d9c:	1005003a 	cmpeq	r2,r2,zero
 8805da0:	103dda1e 	bne	r2,zero,880550c <___vfprintf_internal_r+0x5f8>
 8805da4:	003e9f06 	br	8805824 <___vfprintf_internal_r+0x910>
 8805da8:	d8c14117 	ldw	r3,1284(sp)
 8805dac:	9125883a 	add	r18,r18,r4
 8805db0:	8c400044 	addi	r17,r17,1
 8805db4:	008001c4 	movi	r2,7
 8805db8:	a8c00015 	stw	r3,0(r21)
 8805dbc:	a9000115 	stw	r4,4(r21)
 8805dc0:	dc800e15 	stw	r18,56(sp)
 8805dc4:	dc400d15 	stw	r17,52(sp)
 8805dc8:	14426616 	blt	r2,r17,8806764 <___vfprintf_internal_r+0x1850>
 8805dcc:	a8c00204 	addi	r3,r21,8
 8805dd0:	d9414917 	ldw	r5,1316(sp)
 8805dd4:	00800044 	movi	r2,1
 8805dd8:	94800044 	addi	r18,r18,1
 8805ddc:	8c400044 	addi	r17,r17,1
 8805de0:	18800115 	stw	r2,4(r3)
 8805de4:	008001c4 	movi	r2,7
 8805de8:	19400015 	stw	r5,0(r3)
 8805dec:	dc800e15 	stw	r18,56(sp)
 8805df0:	dc400d15 	stw	r17,52(sp)
 8805df4:	2021883a 	mov	r16,r4
 8805df8:	14425016 	blt	r2,r17,880673c <___vfprintf_internal_r+0x1828>
 8805dfc:	19400204 	addi	r5,r3,8
 8805e00:	d9814717 	ldw	r6,1308(sp)
 8805e04:	8c400044 	addi	r17,r17,1
 8805e08:	dc400d15 	stw	r17,52(sp)
 8805e0c:	3107c83a 	sub	r3,r6,r4
 8805e10:	d9014117 	ldw	r4,1284(sp)
 8805e14:	90e5883a 	add	r18,r18,r3
 8805e18:	28c00115 	stw	r3,4(r5)
 8805e1c:	8105883a 	add	r2,r16,r4
 8805e20:	28800015 	stw	r2,0(r5)
 8805e24:	008001c4 	movi	r2,7
 8805e28:	dc800e15 	stw	r18,56(sp)
 8805e2c:	147f1d16 	blt	r2,r17,8805aa4 <___vfprintf_internal_r+0xb90>
 8805e30:	28c00204 	addi	r3,r5,8
 8805e34:	003db506 	br	880550c <___vfprintf_internal_r+0x5f8>
 8805e38:	3c000017 	ldw	r16,0(r7)
 8805e3c:	3c400117 	ldw	r17,4(r7)
 8805e40:	39800204 	addi	r6,r7,8
 8805e44:	01000044 	movi	r4,1
 8805e48:	d9814015 	stw	r6,1280(sp)
 8805e4c:	d8000405 	stb	zero,16(sp)
 8805e50:	003ebe06 	br	880594c <___vfprintf_internal_r+0xa38>
 8805e54:	3c000017 	ldw	r16,0(r7)
 8805e58:	3c400117 	ldw	r17,4(r7)
 8805e5c:	38800204 	addi	r2,r7,8
 8805e60:	d8814015 	stw	r2,1280(sp)
 8805e64:	003eb706 	br	8805944 <___vfprintf_internal_r+0xa30>
 8805e68:	3c000017 	ldw	r16,0(r7)
 8805e6c:	3c400117 	ldw	r17,4(r7)
 8805e70:	39000204 	addi	r4,r7,8
 8805e74:	d9014015 	stw	r4,1280(sp)
 8805e78:	0009883a 	mov	r4,zero
 8805e7c:	d8000405 	stb	zero,16(sp)
 8805e80:	003eb206 	br	880594c <___vfprintf_internal_r+0xa38>
 8805e84:	38c00017 	ldw	r3,0(r7)
 8805e88:	39c00104 	addi	r7,r7,4
 8805e8c:	d8c14a15 	stw	r3,1320(sp)
 8805e90:	1800d10e 	bge	r3,zero,88061d8 <___vfprintf_internal_r+0x12c4>
 8805e94:	00c7c83a 	sub	r3,zero,r3
 8805e98:	d8c14a15 	stw	r3,1320(sp)
 8805e9c:	d9014c17 	ldw	r4,1328(sp)
 8805ea0:	b8c00007 	ldb	r3,0(r23)
 8805ea4:	21000114 	ori	r4,r4,4
 8805ea8:	d9014c15 	stw	r4,1328(sp)
 8805eac:	003c9806 	br	8805110 <___vfprintf_internal_r+0x1fc>
 8805eb0:	d9814c17 	ldw	r6,1328(sp)
 8805eb4:	3080080c 	andi	r2,r6,32
 8805eb8:	1001f026 	beq	r2,zero,880667c <___vfprintf_internal_r+0x1768>
 8805ebc:	d9014b17 	ldw	r4,1324(sp)
 8805ec0:	38800017 	ldw	r2,0(r7)
 8805ec4:	39c00104 	addi	r7,r7,4
 8805ec8:	d9c14015 	stw	r7,1280(sp)
 8805ecc:	2007d7fa 	srai	r3,r4,31
 8805ed0:	d9c14017 	ldw	r7,1280(sp)
 8805ed4:	11000015 	stw	r4,0(r2)
 8805ed8:	10c00115 	stw	r3,4(r2)
 8805edc:	003c6906 	br	8805084 <___vfprintf_internal_r+0x170>
 8805ee0:	b8c00007 	ldb	r3,0(r23)
 8805ee4:	00801b04 	movi	r2,108
 8805ee8:	18824f26 	beq	r3,r2,8806828 <___vfprintf_internal_r+0x1914>
 8805eec:	d9414c17 	ldw	r5,1328(sp)
 8805ef0:	29400414 	ori	r5,r5,16
 8805ef4:	d9414c15 	stw	r5,1328(sp)
 8805ef8:	003c8506 	br	8805110 <___vfprintf_internal_r+0x1fc>
 8805efc:	d9814c17 	ldw	r6,1328(sp)
 8805f00:	b8c00007 	ldb	r3,0(r23)
 8805f04:	31800814 	ori	r6,r6,32
 8805f08:	d9814c15 	stw	r6,1328(sp)
 8805f0c:	003c8006 	br	8805110 <___vfprintf_internal_r+0x1fc>
 8805f10:	d8814c17 	ldw	r2,1328(sp)
 8805f14:	3c000017 	ldw	r16,0(r7)
 8805f18:	00c01e04 	movi	r3,120
 8805f1c:	10800094 	ori	r2,r2,2
 8805f20:	d8814c15 	stw	r2,1328(sp)
 8805f24:	39c00104 	addi	r7,r7,4
 8805f28:	01422074 	movhi	r5,2177
 8805f2c:	2946a404 	addi	r5,r5,6800
 8805f30:	00800c04 	movi	r2,48
 8805f34:	0023883a 	mov	r17,zero
 8805f38:	01000084 	movi	r4,2
 8805f3c:	d9c14015 	stw	r7,1280(sp)
 8805f40:	d8c14d15 	stw	r3,1332(sp)
 8805f44:	d9414415 	stw	r5,1296(sp)
 8805f48:	d8800445 	stb	r2,17(sp)
 8805f4c:	d8c00485 	stb	r3,18(sp)
 8805f50:	d8000405 	stb	zero,16(sp)
 8805f54:	003e7d06 	br	880594c <___vfprintf_internal_r+0xa38>
 8805f58:	d8814c17 	ldw	r2,1328(sp)
 8805f5c:	b8c00007 	ldb	r3,0(r23)
 8805f60:	10801014 	ori	r2,r2,64
 8805f64:	d8814c15 	stw	r2,1328(sp)
 8805f68:	003c6906 	br	8805110 <___vfprintf_internal_r+0x1fc>
 8805f6c:	d9414c17 	ldw	r5,1328(sp)
 8805f70:	2880020c 	andi	r2,r5,8
 8805f74:	1001df26 	beq	r2,zero,88066f4 <___vfprintf_internal_r+0x17e0>
 8805f78:	39800017 	ldw	r6,0(r7)
 8805f7c:	38800204 	addi	r2,r7,8
 8805f80:	d8814015 	stw	r2,1280(sp)
 8805f84:	d9814215 	stw	r6,1288(sp)
 8805f88:	39c00117 	ldw	r7,4(r7)
 8805f8c:	d9c14315 	stw	r7,1292(sp)
 8805f90:	d9014217 	ldw	r4,1288(sp)
 8805f94:	d9414317 	ldw	r5,1292(sp)
 8805f98:	880b8b40 	call	880b8b4 <__isinfd>
 8805f9c:	10021726 	beq	r2,zero,88067fc <___vfprintf_internal_r+0x18e8>
 8805fa0:	d9014217 	ldw	r4,1288(sp)
 8805fa4:	d9414317 	ldw	r5,1292(sp)
 8805fa8:	000d883a 	mov	r6,zero
 8805fac:	000f883a 	mov	r7,zero
 8805fb0:	8803fe40 	call	8803fe4 <__ltdf2>
 8805fb4:	1002ca16 	blt	r2,zero,8806ae0 <___vfprintf_internal_r+0x1bcc>
 8805fb8:	d9414d17 	ldw	r5,1332(sp)
 8805fbc:	008011c4 	movi	r2,71
 8805fc0:	11420a16 	blt	r2,r5,88067ec <___vfprintf_internal_r+0x18d8>
 8805fc4:	01822074 	movhi	r6,2177
 8805fc8:	3186a904 	addi	r6,r6,6820
 8805fcc:	d9814115 	stw	r6,1284(sp)
 8805fd0:	d9014c17 	ldw	r4,1328(sp)
 8805fd4:	00c000c4 	movi	r3,3
 8805fd8:	00bfdfc4 	movi	r2,-129
 8805fdc:	2088703a 	and	r4,r4,r2
 8805fe0:	180f883a 	mov	r7,r3
 8805fe4:	d8c14515 	stw	r3,1300(sp)
 8805fe8:	d9014c15 	stw	r4,1328(sp)
 8805fec:	d8014615 	stw	zero,1304(sp)
 8805ff0:	003e6a06 	br	880599c <___vfprintf_internal_r+0xa88>
 8805ff4:	38800017 	ldw	r2,0(r7)
 8805ff8:	00c00044 	movi	r3,1
 8805ffc:	39c00104 	addi	r7,r7,4
 8806000:	d9c14015 	stw	r7,1280(sp)
 8806004:	d9000f04 	addi	r4,sp,60
 8806008:	180f883a 	mov	r7,r3
 880600c:	d8c14515 	stw	r3,1300(sp)
 8806010:	d9014115 	stw	r4,1284(sp)
 8806014:	d8800f05 	stb	r2,60(sp)
 8806018:	d8000405 	stb	zero,16(sp)
 880601c:	003cac06 	br	88052d0 <___vfprintf_internal_r+0x3bc>
 8806020:	01422074 	movhi	r5,2177
 8806024:	2946af04 	addi	r5,r5,6844
 8806028:	d9414415 	stw	r5,1296(sp)
 880602c:	d9814c17 	ldw	r6,1328(sp)
 8806030:	3080080c 	andi	r2,r6,32
 8806034:	1000f926 	beq	r2,zero,880641c <___vfprintf_internal_r+0x1508>
 8806038:	3c000017 	ldw	r16,0(r7)
 880603c:	3c400117 	ldw	r17,4(r7)
 8806040:	38800204 	addi	r2,r7,8
 8806044:	d8814015 	stw	r2,1280(sp)
 8806048:	d9414c17 	ldw	r5,1328(sp)
 880604c:	2880004c 	andi	r2,r5,1
 8806050:	1005003a 	cmpeq	r2,r2,zero
 8806054:	1000b31e 	bne	r2,zero,8806324 <___vfprintf_internal_r+0x1410>
 8806058:	8444b03a 	or	r2,r16,r17
 880605c:	1000b126 	beq	r2,zero,8806324 <___vfprintf_internal_r+0x1410>
 8806060:	d9814d17 	ldw	r6,1332(sp)
 8806064:	29400094 	ori	r5,r5,2
 8806068:	00800c04 	movi	r2,48
 880606c:	01000084 	movi	r4,2
 8806070:	d9414c15 	stw	r5,1328(sp)
 8806074:	d8800445 	stb	r2,17(sp)
 8806078:	d9800485 	stb	r6,18(sp)
 880607c:	d8000405 	stb	zero,16(sp)
 8806080:	003e3206 	br	880594c <___vfprintf_internal_r+0xa38>
 8806084:	01822074 	movhi	r6,2177
 8806088:	3186a404 	addi	r6,r6,6800
 880608c:	d9814415 	stw	r6,1296(sp)
 8806090:	003fe606 	br	880602c <___vfprintf_internal_r+0x1118>
 8806094:	00800ac4 	movi	r2,43
 8806098:	d8800405 	stb	r2,16(sp)
 880609c:	b8c00007 	ldb	r3,0(r23)
 88060a0:	003c1b06 	br	8805110 <___vfprintf_internal_r+0x1fc>
 88060a4:	d8814c17 	ldw	r2,1328(sp)
 88060a8:	b8c00007 	ldb	r3,0(r23)
 88060ac:	10800054 	ori	r2,r2,1
 88060b0:	d8814c15 	stw	r2,1328(sp)
 88060b4:	003c1606 	br	8805110 <___vfprintf_internal_r+0x1fc>
 88060b8:	d8800407 	ldb	r2,16(sp)
 88060bc:	1000461e 	bne	r2,zero,88061d8 <___vfprintf_internal_r+0x12c4>
 88060c0:	00800804 	movi	r2,32
 88060c4:	d8800405 	stb	r2,16(sp)
 88060c8:	b8c00007 	ldb	r3,0(r23)
 88060cc:	003c1006 	br	8805110 <___vfprintf_internal_r+0x1fc>
 88060d0:	d9814c17 	ldw	r6,1328(sp)
 88060d4:	b8c00007 	ldb	r3,0(r23)
 88060d8:	31800214 	ori	r6,r6,8
 88060dc:	d9814c15 	stw	r6,1328(sp)
 88060e0:	003c0b06 	br	8805110 <___vfprintf_internal_r+0x1fc>
 88060e4:	0007883a 	mov	r3,zero
 88060e8:	01000244 	movi	r4,9
 88060ec:	188002a4 	muli	r2,r3,10
 88060f0:	b8c00007 	ldb	r3,0(r23)
 88060f4:	d9814d17 	ldw	r6,1332(sp)
 88060f8:	bdc00044 	addi	r23,r23,1
 88060fc:	d8c14d15 	stw	r3,1332(sp)
 8806100:	d9414d17 	ldw	r5,1332(sp)
 8806104:	3085883a 	add	r2,r6,r2
 8806108:	10fff404 	addi	r3,r2,-48
 880610c:	28bff404 	addi	r2,r5,-48
 8806110:	20bff62e 	bgeu	r4,r2,88060ec <___vfprintf_internal_r+0x11d8>
 8806114:	d8c14a15 	stw	r3,1320(sp)
 8806118:	003bff06 	br	8805118 <___vfprintf_internal_r+0x204>
 880611c:	d9414c17 	ldw	r5,1328(sp)
 8806120:	b8c00007 	ldb	r3,0(r23)
 8806124:	29402014 	ori	r5,r5,128
 8806128:	d9414c15 	stw	r5,1328(sp)
 880612c:	003bf806 	br	8805110 <___vfprintf_internal_r+0x1fc>
 8806130:	b8c00007 	ldb	r3,0(r23)
 8806134:	00800a84 	movi	r2,42
 8806138:	bdc00044 	addi	r23,r23,1
 880613c:	18831526 	beq	r3,r2,8806d94 <___vfprintf_internal_r+0x1e80>
 8806140:	d8c14d15 	stw	r3,1332(sp)
 8806144:	18bff404 	addi	r2,r3,-48
 8806148:	00c00244 	movi	r3,9
 880614c:	18827836 	bltu	r3,r2,8806b30 <___vfprintf_internal_r+0x1c1c>
 8806150:	000d883a 	mov	r6,zero
 8806154:	308002a4 	muli	r2,r6,10
 8806158:	b9800007 	ldb	r6,0(r23)
 880615c:	d9414d17 	ldw	r5,1332(sp)
 8806160:	bdc00044 	addi	r23,r23,1
 8806164:	d9814d15 	stw	r6,1332(sp)
 8806168:	d9014d17 	ldw	r4,1332(sp)
 880616c:	1145883a 	add	r2,r2,r5
 8806170:	11bff404 	addi	r6,r2,-48
 8806174:	20bff404 	addi	r2,r4,-48
 8806178:	18bff62e 	bgeu	r3,r2,8806154 <___vfprintf_internal_r+0x1240>
 880617c:	3027883a 	mov	r19,r6
 8806180:	303be50e 	bge	r6,zero,8805118 <___vfprintf_internal_r+0x204>
 8806184:	04ffffc4 	movi	r19,-1
 8806188:	003be306 	br	8805118 <___vfprintf_internal_r+0x204>
 880618c:	d8000405 	stb	zero,16(sp)
 8806190:	39800017 	ldw	r6,0(r7)
 8806194:	39c00104 	addi	r7,r7,4
 8806198:	d9c14015 	stw	r7,1280(sp)
 880619c:	d9814115 	stw	r6,1284(sp)
 88061a0:	3001c926 	beq	r6,zero,88068c8 <___vfprintf_internal_r+0x19b4>
 88061a4:	98000e16 	blt	r19,zero,88061e0 <___vfprintf_internal_r+0x12cc>
 88061a8:	d9014117 	ldw	r4,1284(sp)
 88061ac:	000b883a 	mov	r5,zero
 88061b0:	980d883a 	mov	r6,r19
 88061b4:	8809fd00 	call	8809fd0 <memchr>
 88061b8:	10025926 	beq	r2,zero,8806b20 <___vfprintf_internal_r+0x1c0c>
 88061bc:	d8c14117 	ldw	r3,1284(sp)
 88061c0:	10cfc83a 	sub	r7,r2,r3
 88061c4:	99c19e16 	blt	r19,r7,8806840 <___vfprintf_internal_r+0x192c>
 88061c8:	d9c14515 	stw	r7,1300(sp)
 88061cc:	38000916 	blt	r7,zero,88061f4 <___vfprintf_internal_r+0x12e0>
 88061d0:	d8014615 	stw	zero,1304(sp)
 88061d4:	003df106 	br	880599c <___vfprintf_internal_r+0xa88>
 88061d8:	b8c00007 	ldb	r3,0(r23)
 88061dc:	003bcc06 	br	8805110 <___vfprintf_internal_r+0x1fc>
 88061e0:	d9014117 	ldw	r4,1284(sp)
 88061e4:	8804e480 	call	8804e48 <strlen>
 88061e8:	d8814515 	stw	r2,1300(sp)
 88061ec:	100f883a 	mov	r7,r2
 88061f0:	103ff70e 	bge	r2,zero,88061d0 <___vfprintf_internal_r+0x12bc>
 88061f4:	d8014515 	stw	zero,1300(sp)
 88061f8:	d8014615 	stw	zero,1304(sp)
 88061fc:	003de706 	br	880599c <___vfprintf_internal_r+0xa88>
 8806200:	20c03fcc 	andi	r3,r4,255
 8806204:	00800044 	movi	r2,1
 8806208:	18802d26 	beq	r3,r2,88062c0 <___vfprintf_internal_r+0x13ac>
 880620c:	18800e36 	bltu	r3,r2,8806248 <___vfprintf_internal_r+0x1334>
 8806210:	00800084 	movi	r2,2
 8806214:	1880fa26 	beq	r3,r2,8806600 <___vfprintf_internal_r+0x16ec>
 8806218:	01022074 	movhi	r4,2177
 880621c:	2106b404 	addi	r4,r4,6864
 8806220:	8804e480 	call	8804e48 <strlen>
 8806224:	100f883a 	mov	r7,r2
 8806228:	dcc14515 	stw	r19,1300(sp)
 880622c:	9880010e 	bge	r19,r2,8806234 <___vfprintf_internal_r+0x1320>
 8806230:	d8814515 	stw	r2,1300(sp)
 8806234:	00822074 	movhi	r2,2177
 8806238:	1086b404 	addi	r2,r2,6864
 880623c:	dcc14615 	stw	r19,1304(sp)
 8806240:	d8814115 	stw	r2,1284(sp)
 8806244:	003dd506 	br	880599c <___vfprintf_internal_r+0xa88>
 8806248:	d9401904 	addi	r5,sp,100
 880624c:	dd000f04 	addi	r20,sp,60
 8806250:	d9414115 	stw	r5,1284(sp)
 8806254:	880a977a 	slli	r5,r17,29
 8806258:	d9814117 	ldw	r6,1284(sp)
 880625c:	8004d0fa 	srli	r2,r16,3
 8806260:	8806d0fa 	srli	r3,r17,3
 8806264:	810001cc 	andi	r4,r16,7
 8806268:	2884b03a 	or	r2,r5,r2
 880626c:	31bfffc4 	addi	r6,r6,-1
 8806270:	21000c04 	addi	r4,r4,48
 8806274:	d9814115 	stw	r6,1284(sp)
 8806278:	10cab03a 	or	r5,r2,r3
 880627c:	31000005 	stb	r4,0(r6)
 8806280:	1021883a 	mov	r16,r2
 8806284:	1823883a 	mov	r17,r3
 8806288:	283ff21e 	bne	r5,zero,8806254 <___vfprintf_internal_r+0x1340>
 880628c:	d8c14c17 	ldw	r3,1328(sp)
 8806290:	1880004c 	andi	r2,r3,1
 8806294:	1005003a 	cmpeq	r2,r2,zero
 8806298:	103db91e 	bne	r2,zero,8805980 <___vfprintf_internal_r+0xa6c>
 880629c:	20803fcc 	andi	r2,r4,255
 88062a0:	1080201c 	xori	r2,r2,128
 88062a4:	10bfe004 	addi	r2,r2,-128
 88062a8:	00c00c04 	movi	r3,48
 88062ac:	10fdb426 	beq	r2,r3,8805980 <___vfprintf_internal_r+0xa6c>
 88062b0:	31bfffc4 	addi	r6,r6,-1
 88062b4:	d9814115 	stw	r6,1284(sp)
 88062b8:	30c00005 	stb	r3,0(r6)
 88062bc:	003db006 	br	8805980 <___vfprintf_internal_r+0xa6c>
 88062c0:	88800068 	cmpgeui	r2,r17,1
 88062c4:	10002c1e 	bne	r2,zero,8806378 <___vfprintf_internal_r+0x1464>
 88062c8:	8800021e 	bne	r17,zero,88062d4 <___vfprintf_internal_r+0x13c0>
 88062cc:	00800244 	movi	r2,9
 88062d0:	14002936 	bltu	r2,r16,8806378 <___vfprintf_internal_r+0x1464>
 88062d4:	d90018c4 	addi	r4,sp,99
 88062d8:	dd000f04 	addi	r20,sp,60
 88062dc:	d9014115 	stw	r4,1284(sp)
 88062e0:	d9014117 	ldw	r4,1284(sp)
 88062e4:	80800c04 	addi	r2,r16,48
 88062e8:	20800005 	stb	r2,0(r4)
 88062ec:	003da406 	br	8805980 <___vfprintf_internal_r+0xa6c>
 88062f0:	dc400d17 	ldw	r17,52(sp)
 88062f4:	07022074 	movhi	fp,2177
 88062f8:	e706bb84 	addi	fp,fp,6894
 88062fc:	9425883a 	add	r18,r18,r16
 8806300:	8c400044 	addi	r17,r17,1
 8806304:	008001c4 	movi	r2,7
 8806308:	1f000015 	stw	fp,0(r3)
 880630c:	1c000115 	stw	r16,4(r3)
 8806310:	dc800e15 	stw	r18,56(sp)
 8806314:	dc400d15 	stw	r17,52(sp)
 8806318:	147de216 	blt	r2,r17,8805aa4 <___vfprintf_internal_r+0xb90>
 880631c:	18c00204 	addi	r3,r3,8
 8806320:	003c7a06 	br	880550c <___vfprintf_internal_r+0x5f8>
 8806324:	01000084 	movi	r4,2
 8806328:	d8000405 	stb	zero,16(sp)
 880632c:	003d8706 	br	880594c <___vfprintf_internal_r+0xa38>
 8806330:	d9814c17 	ldw	r6,1328(sp)
 8806334:	30c4703a 	and	r2,r6,r3
 8806338:	1005003a 	cmpeq	r2,r2,zero
 880633c:	103cb926 	beq	r2,zero,8805624 <___vfprintf_internal_r+0x710>
 8806340:	d9014117 	ldw	r4,1284(sp)
 8806344:	94800044 	addi	r18,r18,1
 8806348:	8c400044 	addi	r17,r17,1
 880634c:	008001c4 	movi	r2,7
 8806350:	a9000015 	stw	r4,0(r21)
 8806354:	a8c00115 	stw	r3,4(r21)
 8806358:	dc800e15 	stw	r18,56(sp)
 880635c:	dc400d15 	stw	r17,52(sp)
 8806360:	147e6616 	blt	r2,r17,8805cfc <___vfprintf_internal_r+0xde8>
 8806364:	acc00204 	addi	r19,r21,8
 8806368:	003cd706 	br	88056c8 <___vfprintf_internal_r+0x7b4>
 880636c:	07022074 	movhi	fp,2177
 8806370:	e706bb84 	addi	fp,fp,6894
 8806374:	003c4f06 	br	88054b4 <___vfprintf_internal_r+0x5a0>
 8806378:	dd000f04 	addi	r20,sp,60
 880637c:	dc801904 	addi	r18,sp,100
 8806380:	8009883a 	mov	r4,r16
 8806384:	880b883a 	mov	r5,r17
 8806388:	01800284 	movi	r6,10
 880638c:	000f883a 	mov	r7,zero
 8806390:	880c5dc0 	call	880c5dc <__umoddi3>
 8806394:	12000c04 	addi	r8,r2,48
 8806398:	94bfffc4 	addi	r18,r18,-1
 880639c:	8009883a 	mov	r4,r16
 88063a0:	880b883a 	mov	r5,r17
 88063a4:	01800284 	movi	r6,10
 88063a8:	000f883a 	mov	r7,zero
 88063ac:	92000005 	stb	r8,0(r18)
 88063b0:	880c0000 	call	880c000 <__udivdi3>
 88063b4:	1009883a 	mov	r4,r2
 88063b8:	1021883a 	mov	r16,r2
 88063bc:	18800068 	cmpgeui	r2,r3,1
 88063c0:	1823883a 	mov	r17,r3
 88063c4:	103fee1e 	bne	r2,zero,8806380 <___vfprintf_internal_r+0x146c>
 88063c8:	1800021e 	bne	r3,zero,88063d4 <___vfprintf_internal_r+0x14c0>
 88063cc:	00800244 	movi	r2,9
 88063d0:	113feb36 	bltu	r2,r4,8806380 <___vfprintf_internal_r+0x146c>
 88063d4:	94bfffc4 	addi	r18,r18,-1
 88063d8:	dc814115 	stw	r18,1284(sp)
 88063dc:	003fc006 	br	88062e0 <___vfprintf_internal_r+0x13cc>
 88063e0:	d9014c17 	ldw	r4,1328(sp)
 88063e4:	2080004c 	andi	r2,r4,1
 88063e8:	10009a1e 	bne	r2,zero,8806654 <___vfprintf_internal_r+0x1740>
 88063ec:	d9401904 	addi	r5,sp,100
 88063f0:	dd000f04 	addi	r20,sp,60
 88063f4:	d9414115 	stw	r5,1284(sp)
 88063f8:	003d6106 	br	8805980 <___vfprintf_internal_r+0xa6c>
 88063fc:	d9014f17 	ldw	r4,1340(sp)
 8806400:	b00b883a 	mov	r5,r22
 8806404:	d9800c04 	addi	r6,sp,48
 8806408:	8804ebc0 	call	8804ebc <__sprint_r>
 880640c:	103c791e 	bne	r2,zero,88055f4 <___vfprintf_internal_r+0x6e0>
 8806410:	dc800e17 	ldw	r18,56(sp)
 8806414:	d8c01904 	addi	r3,sp,100
 8806418:	003cff06 	br	8805818 <___vfprintf_internal_r+0x904>
 880641c:	d8c14c17 	ldw	r3,1328(sp)
 8806420:	1880040c 	andi	r2,r3,16
 8806424:	1000711e 	bne	r2,zero,88065ec <___vfprintf_internal_r+0x16d8>
 8806428:	d9014c17 	ldw	r4,1328(sp)
 880642c:	2080100c 	andi	r2,r4,64
 8806430:	10006e26 	beq	r2,zero,88065ec <___vfprintf_internal_r+0x16d8>
 8806434:	3c00000b 	ldhu	r16,0(r7)
 8806438:	0023883a 	mov	r17,zero
 880643c:	39c00104 	addi	r7,r7,4
 8806440:	d9c14015 	stw	r7,1280(sp)
 8806444:	003f0006 	br	8806048 <___vfprintf_internal_r+0x1134>
 8806448:	dc400d17 	ldw	r17,52(sp)
 880644c:	07022074 	movhi	fp,2177
 8806450:	e706bb84 	addi	fp,fp,6894
 8806454:	9425883a 	add	r18,r18,r16
 8806458:	8c400044 	addi	r17,r17,1
 880645c:	008001c4 	movi	r2,7
 8806460:	1f000015 	stw	fp,0(r3)
 8806464:	1c000115 	stw	r16,4(r3)
 8806468:	dc800e15 	stw	r18,56(sp)
 880646c:	dc400d15 	stw	r17,52(sp)
 8806470:	147d7616 	blt	r2,r17,8805a4c <___vfprintf_internal_r+0xb38>
 8806474:	18c00204 	addi	r3,r3,8
 8806478:	003d7b06 	br	8805a68 <___vfprintf_internal_r+0xb54>
 880647c:	dc800e17 	ldw	r18,56(sp)
 8806480:	dc400d17 	ldw	r17,52(sp)
 8806484:	07022074 	movhi	fp,2177
 8806488:	e706bf84 	addi	fp,fp,6910
 880648c:	003bc006 	br	8805390 <___vfprintf_internal_r+0x47c>
 8806490:	d9014f17 	ldw	r4,1340(sp)
 8806494:	b00b883a 	mov	r5,r22
 8806498:	d9800c04 	addi	r6,sp,48
 880649c:	8804ebc0 	call	8804ebc <__sprint_r>
 88064a0:	103c541e 	bne	r2,zero,88055f4 <___vfprintf_internal_r+0x6e0>
 88064a4:	dc800e17 	ldw	r18,56(sp)
 88064a8:	d8c01904 	addi	r3,sp,100
 88064ac:	003ce906 	br	8805854 <___vfprintf_internal_r+0x940>
 88064b0:	3c000017 	ldw	r16,0(r7)
 88064b4:	0009883a 	mov	r4,zero
 88064b8:	39c00104 	addi	r7,r7,4
 88064bc:	0023883a 	mov	r17,zero
 88064c0:	d9c14015 	stw	r7,1280(sp)
 88064c4:	d8000405 	stb	zero,16(sp)
 88064c8:	003d2006 	br	880594c <___vfprintf_internal_r+0xa38>
 88064cc:	38800017 	ldw	r2,0(r7)
 88064d0:	39c00104 	addi	r7,r7,4
 88064d4:	d9c14015 	stw	r7,1280(sp)
 88064d8:	1023d7fa 	srai	r17,r2,31
 88064dc:	1021883a 	mov	r16,r2
 88064e0:	003d1806 	br	8805944 <___vfprintf_internal_r+0xa30>
 88064e4:	3c000017 	ldw	r16,0(r7)
 88064e8:	01000044 	movi	r4,1
 88064ec:	39c00104 	addi	r7,r7,4
 88064f0:	0023883a 	mov	r17,zero
 88064f4:	d9c14015 	stw	r7,1280(sp)
 88064f8:	d8000405 	stb	zero,16(sp)
 88064fc:	003d1306 	br	880594c <___vfprintf_internal_r+0xa38>
 8806500:	00822074 	movhi	r2,2177
 8806504:	1086bb04 	addi	r2,r2,6892
 8806508:	94800044 	addi	r18,r18,1
 880650c:	8c400044 	addi	r17,r17,1
 8806510:	a8800015 	stw	r2,0(r21)
 8806514:	00c00044 	movi	r3,1
 8806518:	008001c4 	movi	r2,7
 880651c:	a8c00115 	stw	r3,4(r21)
 8806520:	dc800e15 	stw	r18,56(sp)
 8806524:	dc400d15 	stw	r17,52(sp)
 8806528:	1440ca16 	blt	r2,r17,8806854 <___vfprintf_internal_r+0x1940>
 880652c:	a8c00204 	addi	r3,r21,8
 8806530:	2000061e 	bne	r4,zero,880654c <___vfprintf_internal_r+0x1638>
 8806534:	d9414717 	ldw	r5,1308(sp)
 8806538:	2800041e 	bne	r5,zero,880654c <___vfprintf_internal_r+0x1638>
 880653c:	d9814c17 	ldw	r6,1328(sp)
 8806540:	3080004c 	andi	r2,r6,1
 8806544:	1005003a 	cmpeq	r2,r2,zero
 8806548:	103bf01e 	bne	r2,zero,880550c <___vfprintf_internal_r+0x5f8>
 880654c:	00800044 	movi	r2,1
 8806550:	dc400d17 	ldw	r17,52(sp)
 8806554:	18800115 	stw	r2,4(r3)
 8806558:	d8814917 	ldw	r2,1316(sp)
 880655c:	94800044 	addi	r18,r18,1
 8806560:	8c400044 	addi	r17,r17,1
 8806564:	18800015 	stw	r2,0(r3)
 8806568:	008001c4 	movi	r2,7
 880656c:	dc800e15 	stw	r18,56(sp)
 8806570:	dc400d15 	stw	r17,52(sp)
 8806574:	1440ca16 	blt	r2,r17,88068a0 <___vfprintf_internal_r+0x198c>
 8806578:	18c00204 	addi	r3,r3,8
 880657c:	0121c83a 	sub	r16,zero,r4
 8806580:	0400500e 	bge	zero,r16,88066c4 <___vfprintf_internal_r+0x17b0>
 8806584:	00800404 	movi	r2,16
 8806588:	1400800e 	bge	r2,r16,880678c <___vfprintf_internal_r+0x1878>
 880658c:	1027883a 	mov	r19,r2
 8806590:	07022074 	movhi	fp,2177
 8806594:	e706bb84 	addi	fp,fp,6894
 8806598:	050001c4 	movi	r20,7
 880659c:	00000306 	br	88065ac <___vfprintf_internal_r+0x1698>
 88065a0:	18c00204 	addi	r3,r3,8
 88065a4:	843ffc04 	addi	r16,r16,-16
 88065a8:	9c007a0e 	bge	r19,r16,8806794 <___vfprintf_internal_r+0x1880>
 88065ac:	94800404 	addi	r18,r18,16
 88065b0:	8c400044 	addi	r17,r17,1
 88065b4:	1f000015 	stw	fp,0(r3)
 88065b8:	1cc00115 	stw	r19,4(r3)
 88065bc:	dc800e15 	stw	r18,56(sp)
 88065c0:	dc400d15 	stw	r17,52(sp)
 88065c4:	a47ff60e 	bge	r20,r17,88065a0 <___vfprintf_internal_r+0x168c>
 88065c8:	d9014f17 	ldw	r4,1340(sp)
 88065cc:	b00b883a 	mov	r5,r22
 88065d0:	d9800c04 	addi	r6,sp,48
 88065d4:	8804ebc0 	call	8804ebc <__sprint_r>
 88065d8:	103c061e 	bne	r2,zero,88055f4 <___vfprintf_internal_r+0x6e0>
 88065dc:	dc800e17 	ldw	r18,56(sp)
 88065e0:	dc400d17 	ldw	r17,52(sp)
 88065e4:	d8c01904 	addi	r3,sp,100
 88065e8:	003fee06 	br	88065a4 <___vfprintf_internal_r+0x1690>
 88065ec:	3c000017 	ldw	r16,0(r7)
 88065f0:	0023883a 	mov	r17,zero
 88065f4:	39c00104 	addi	r7,r7,4
 88065f8:	d9c14015 	stw	r7,1280(sp)
 88065fc:	003e9206 	br	8806048 <___vfprintf_internal_r+0x1134>
 8806600:	d9401904 	addi	r5,sp,100
 8806604:	dd000f04 	addi	r20,sp,60
 8806608:	d9414115 	stw	r5,1284(sp)
 880660c:	d9814417 	ldw	r6,1296(sp)
 8806610:	880a973a 	slli	r5,r17,28
 8806614:	8004d13a 	srli	r2,r16,4
 8806618:	810003cc 	andi	r4,r16,15
 880661c:	3109883a 	add	r4,r6,r4
 8806620:	2884b03a 	or	r2,r5,r2
 8806624:	21400003 	ldbu	r5,0(r4)
 8806628:	d9014117 	ldw	r4,1284(sp)
 880662c:	8806d13a 	srli	r3,r17,4
 8806630:	1021883a 	mov	r16,r2
 8806634:	213fffc4 	addi	r4,r4,-1
 8806638:	d9014115 	stw	r4,1284(sp)
 880663c:	d9814117 	ldw	r6,1284(sp)
 8806640:	10c8b03a 	or	r4,r2,r3
 8806644:	1823883a 	mov	r17,r3
 8806648:	31400005 	stb	r5,0(r6)
 880664c:	203fef1e 	bne	r4,zero,880660c <___vfprintf_internal_r+0x16f8>
 8806650:	003ccb06 	br	8805980 <___vfprintf_internal_r+0xa6c>
 8806654:	00800c04 	movi	r2,48
 8806658:	d98018c4 	addi	r6,sp,99
 880665c:	dd000f04 	addi	r20,sp,60
 8806660:	d88018c5 	stb	r2,99(sp)
 8806664:	d9814115 	stw	r6,1284(sp)
 8806668:	003cc506 	br	8805980 <___vfprintf_internal_r+0xa6c>
 880666c:	dc400d17 	ldw	r17,52(sp)
 8806670:	07022074 	movhi	fp,2177
 8806674:	e706bf84 	addi	fp,fp,6910
 8806678:	003bc706 	br	8805598 <___vfprintf_internal_r+0x684>
 880667c:	d9414c17 	ldw	r5,1328(sp)
 8806680:	2880040c 	andi	r2,r5,16
 8806684:	10007c26 	beq	r2,zero,8806878 <___vfprintf_internal_r+0x1964>
 8806688:	38800017 	ldw	r2,0(r7)
 880668c:	39c00104 	addi	r7,r7,4
 8806690:	d9c14015 	stw	r7,1280(sp)
 8806694:	d9814b17 	ldw	r6,1324(sp)
 8806698:	d9c14017 	ldw	r7,1280(sp)
 880669c:	11800015 	stw	r6,0(r2)
 88066a0:	003a7806 	br	8805084 <___vfprintf_internal_r+0x170>
 88066a4:	d9014f17 	ldw	r4,1340(sp)
 88066a8:	b00b883a 	mov	r5,r22
 88066ac:	d9800c04 	addi	r6,sp,48
 88066b0:	8804ebc0 	call	8804ebc <__sprint_r>
 88066b4:	103bcf1e 	bne	r2,zero,88055f4 <___vfprintf_internal_r+0x6e0>
 88066b8:	dc800e17 	ldw	r18,56(sp)
 88066bc:	dc400d17 	ldw	r17,52(sp)
 88066c0:	d8c01904 	addi	r3,sp,100
 88066c4:	d9014717 	ldw	r4,1308(sp)
 88066c8:	d9414117 	ldw	r5,1284(sp)
 88066cc:	8c400044 	addi	r17,r17,1
 88066d0:	9125883a 	add	r18,r18,r4
 88066d4:	008001c4 	movi	r2,7
 88066d8:	19400015 	stw	r5,0(r3)
 88066dc:	19000115 	stw	r4,4(r3)
 88066e0:	dc800e15 	stw	r18,56(sp)
 88066e4:	dc400d15 	stw	r17,52(sp)
 88066e8:	147cee16 	blt	r2,r17,8805aa4 <___vfprintf_internal_r+0xb90>
 88066ec:	18c00204 	addi	r3,r3,8
 88066f0:	003b8606 	br	880550c <___vfprintf_internal_r+0x5f8>
 88066f4:	38c00017 	ldw	r3,0(r7)
 88066f8:	39000204 	addi	r4,r7,8
 88066fc:	d9014015 	stw	r4,1280(sp)
 8806700:	d8c14215 	stw	r3,1288(sp)
 8806704:	39c00117 	ldw	r7,4(r7)
 8806708:	d9c14315 	stw	r7,1292(sp)
 880670c:	003e2006 	br	8805f90 <___vfprintf_internal_r+0x107c>
 8806710:	0005883a 	mov	r2,zero
 8806714:	1409c83a 	sub	r4,r2,r16
 8806718:	1105803a 	cmpltu	r2,r2,r4
 880671c:	044bc83a 	sub	r5,zero,r17
 8806720:	2885c83a 	sub	r2,r5,r2
 8806724:	2021883a 	mov	r16,r4
 8806728:	1023883a 	mov	r17,r2
 880672c:	01000044 	movi	r4,1
 8806730:	00800b44 	movi	r2,45
 8806734:	d8800405 	stb	r2,16(sp)
 8806738:	003c8406 	br	880594c <___vfprintf_internal_r+0xa38>
 880673c:	d9014f17 	ldw	r4,1340(sp)
 8806740:	b00b883a 	mov	r5,r22
 8806744:	d9800c04 	addi	r6,sp,48
 8806748:	8804ebc0 	call	8804ebc <__sprint_r>
 880674c:	103ba91e 	bne	r2,zero,88055f4 <___vfprintf_internal_r+0x6e0>
 8806750:	dc800e17 	ldw	r18,56(sp)
 8806754:	dc400d17 	ldw	r17,52(sp)
 8806758:	d9000517 	ldw	r4,20(sp)
 880675c:	d9401904 	addi	r5,sp,100
 8806760:	003da706 	br	8805e00 <___vfprintf_internal_r+0xeec>
 8806764:	d9014f17 	ldw	r4,1340(sp)
 8806768:	b00b883a 	mov	r5,r22
 880676c:	d9800c04 	addi	r6,sp,48
 8806770:	8804ebc0 	call	8804ebc <__sprint_r>
 8806774:	103b9f1e 	bne	r2,zero,88055f4 <___vfprintf_internal_r+0x6e0>
 8806778:	dc800e17 	ldw	r18,56(sp)
 880677c:	dc400d17 	ldw	r17,52(sp)
 8806780:	d9000517 	ldw	r4,20(sp)
 8806784:	d8c01904 	addi	r3,sp,100
 8806788:	003d9106 	br	8805dd0 <___vfprintf_internal_r+0xebc>
 880678c:	07022074 	movhi	fp,2177
 8806790:	e706bb84 	addi	fp,fp,6894
 8806794:	9425883a 	add	r18,r18,r16
 8806798:	8c400044 	addi	r17,r17,1
 880679c:	008001c4 	movi	r2,7
 88067a0:	1f000015 	stw	fp,0(r3)
 88067a4:	1c000115 	stw	r16,4(r3)
 88067a8:	dc800e15 	stw	r18,56(sp)
 88067ac:	dc400d15 	stw	r17,52(sp)
 88067b0:	147fbc16 	blt	r2,r17,88066a4 <___vfprintf_internal_r+0x1790>
 88067b4:	18c00204 	addi	r3,r3,8
 88067b8:	003fc206 	br	88066c4 <___vfprintf_internal_r+0x17b0>
 88067bc:	d9014f17 	ldw	r4,1340(sp)
 88067c0:	b00b883a 	mov	r5,r22
 88067c4:	d9800c04 	addi	r6,sp,48
 88067c8:	8804ebc0 	call	8804ebc <__sprint_r>
 88067cc:	103b891e 	bne	r2,zero,88055f4 <___vfprintf_internal_r+0x6e0>
 88067d0:	dc800e17 	ldw	r18,56(sp)
 88067d4:	d9000517 	ldw	r4,20(sp)
 88067d8:	d8c01904 	addi	r3,sp,100
 88067dc:	003d0206 	br	8805be8 <___vfprintf_internal_r+0xcd4>
 88067e0:	07022074 	movhi	fp,2177
 88067e4:	e706bb84 	addi	fp,fp,6894
 88067e8:	003be406 	br	880577c <___vfprintf_internal_r+0x868>
 88067ec:	00822074 	movhi	r2,2177
 88067f0:	1086aa04 	addi	r2,r2,6824
 88067f4:	d8814115 	stw	r2,1284(sp)
 88067f8:	003df506 	br	8805fd0 <___vfprintf_internal_r+0x10bc>
 88067fc:	d9014217 	ldw	r4,1288(sp)
 8806800:	d9414317 	ldw	r5,1292(sp)
 8806804:	88027040 	call	8802704 <__isnand>
 8806808:	10003926 	beq	r2,zero,88068f0 <___vfprintf_internal_r+0x19dc>
 880680c:	d9414d17 	ldw	r5,1332(sp)
 8806810:	008011c4 	movi	r2,71
 8806814:	1140ce16 	blt	r2,r5,8806b50 <___vfprintf_internal_r+0x1c3c>
 8806818:	01822074 	movhi	r6,2177
 880681c:	3186ab04 	addi	r6,r6,6828
 8806820:	d9814115 	stw	r6,1284(sp)
 8806824:	003dea06 	br	8805fd0 <___vfprintf_internal_r+0x10bc>
 8806828:	d9014c17 	ldw	r4,1328(sp)
 880682c:	bdc00044 	addi	r23,r23,1
 8806830:	b8c00007 	ldb	r3,0(r23)
 8806834:	21000814 	ori	r4,r4,32
 8806838:	d9014c15 	stw	r4,1328(sp)
 880683c:	003a3406 	br	8805110 <___vfprintf_internal_r+0x1fc>
 8806840:	dcc14515 	stw	r19,1300(sp)
 8806844:	98011016 	blt	r19,zero,8806c88 <___vfprintf_internal_r+0x1d74>
 8806848:	980f883a 	mov	r7,r19
 880684c:	d8014615 	stw	zero,1304(sp)
 8806850:	003c5206 	br	880599c <___vfprintf_internal_r+0xa88>
 8806854:	d9014f17 	ldw	r4,1340(sp)
 8806858:	b00b883a 	mov	r5,r22
 880685c:	d9800c04 	addi	r6,sp,48
 8806860:	8804ebc0 	call	8804ebc <__sprint_r>
 8806864:	103b631e 	bne	r2,zero,88055f4 <___vfprintf_internal_r+0x6e0>
 8806868:	dc800e17 	ldw	r18,56(sp)
 880686c:	d9000517 	ldw	r4,20(sp)
 8806870:	d8c01904 	addi	r3,sp,100
 8806874:	003f2e06 	br	8806530 <___vfprintf_internal_r+0x161c>
 8806878:	d8c14c17 	ldw	r3,1328(sp)
 880687c:	1880100c 	andi	r2,r3,64
 8806880:	1000a026 	beq	r2,zero,8806b04 <___vfprintf_internal_r+0x1bf0>
 8806884:	38800017 	ldw	r2,0(r7)
 8806888:	39c00104 	addi	r7,r7,4
 880688c:	d9c14015 	stw	r7,1280(sp)
 8806890:	d9014b17 	ldw	r4,1324(sp)
 8806894:	d9c14017 	ldw	r7,1280(sp)
 8806898:	1100000d 	sth	r4,0(r2)
 880689c:	0039f906 	br	8805084 <___vfprintf_internal_r+0x170>
 88068a0:	d9014f17 	ldw	r4,1340(sp)
 88068a4:	b00b883a 	mov	r5,r22
 88068a8:	d9800c04 	addi	r6,sp,48
 88068ac:	8804ebc0 	call	8804ebc <__sprint_r>
 88068b0:	103b501e 	bne	r2,zero,88055f4 <___vfprintf_internal_r+0x6e0>
 88068b4:	dc800e17 	ldw	r18,56(sp)
 88068b8:	dc400d17 	ldw	r17,52(sp)
 88068bc:	d9000517 	ldw	r4,20(sp)
 88068c0:	d8c01904 	addi	r3,sp,100
 88068c4:	003f2d06 	br	880657c <___vfprintf_internal_r+0x1668>
 88068c8:	00800184 	movi	r2,6
 88068cc:	14c09a36 	bltu	r2,r19,8806b38 <___vfprintf_internal_r+0x1c24>
 88068d0:	dcc14515 	stw	r19,1300(sp)
 88068d4:	9800010e 	bge	r19,zero,88068dc <___vfprintf_internal_r+0x19c8>
 88068d8:	d8014515 	stw	zero,1300(sp)
 88068dc:	00822074 	movhi	r2,2177
 88068e0:	1086ad04 	addi	r2,r2,6836
 88068e4:	980f883a 	mov	r7,r19
 88068e8:	d8814115 	stw	r2,1284(sp)
 88068ec:	003a7806 	br	88052d0 <___vfprintf_internal_r+0x3bc>
 88068f0:	00bfffc4 	movi	r2,-1
 88068f4:	9880e226 	beq	r19,r2,8806c80 <___vfprintf_internal_r+0x1d6c>
 88068f8:	d9414d17 	ldw	r5,1332(sp)
 88068fc:	008019c4 	movi	r2,103
 8806900:	2880dc26 	beq	r5,r2,8806c74 <___vfprintf_internal_r+0x1d60>
 8806904:	008011c4 	movi	r2,71
 8806908:	2880da26 	beq	r5,r2,8806c74 <___vfprintf_internal_r+0x1d60>
 880690c:	d9414c17 	ldw	r5,1328(sp)
 8806910:	d9014317 	ldw	r4,1292(sp)
 8806914:	d9814217 	ldw	r6,1288(sp)
 8806918:	29404014 	ori	r5,r5,256
 880691c:	d9414c15 	stw	r5,1328(sp)
 8806920:	2000cc16 	blt	r4,zero,8806c54 <___vfprintf_internal_r+0x1d40>
 8806924:	3021883a 	mov	r16,r6
 8806928:	2023883a 	mov	r17,r4
 880692c:	0039883a 	mov	fp,zero
 8806930:	d9414d17 	ldw	r5,1332(sp)
 8806934:	00801984 	movi	r2,102
 8806938:	2880b726 	beq	r5,r2,8806c18 <___vfprintf_internal_r+0x1d04>
 880693c:	00801184 	movi	r2,70
 8806940:	2880b526 	beq	r5,r2,8806c18 <___vfprintf_internal_r+0x1d04>
 8806944:	00801944 	movi	r2,101
 8806948:	2880c826 	beq	r5,r2,8806c6c <___vfprintf_internal_r+0x1d58>
 880694c:	00801144 	movi	r2,69
 8806950:	2880c626 	beq	r5,r2,8806c6c <___vfprintf_internal_r+0x1d58>
 8806954:	9829883a 	mov	r20,r19
 8806958:	d9014f17 	ldw	r4,1340(sp)
 880695c:	d8800504 	addi	r2,sp,20
 8806960:	880d883a 	mov	r6,r17
 8806964:	d8800115 	stw	r2,4(sp)
 8806968:	d8c00604 	addi	r3,sp,24
 880696c:	d8800704 	addi	r2,sp,28
 8806970:	800b883a 	mov	r5,r16
 8806974:	01c00084 	movi	r7,2
 8806978:	d8c00215 	stw	r3,8(sp)
 880697c:	d8800315 	stw	r2,12(sp)
 8806980:	dd000015 	stw	r20,0(sp)
 8806984:	88071380 	call	8807138 <_dtoa_r>
 8806988:	d9814d17 	ldw	r6,1332(sp)
 880698c:	d8814115 	stw	r2,1284(sp)
 8806990:	008019c4 	movi	r2,103
 8806994:	30809526 	beq	r6,r2,8806bec <___vfprintf_internal_r+0x1cd8>
 8806998:	d8c14d17 	ldw	r3,1332(sp)
 880699c:	008011c4 	movi	r2,71
 88069a0:	18809226 	beq	r3,r2,8806bec <___vfprintf_internal_r+0x1cd8>
 88069a4:	d9414117 	ldw	r5,1284(sp)
 88069a8:	d9814d17 	ldw	r6,1332(sp)
 88069ac:	00801984 	movi	r2,102
 88069b0:	2d25883a 	add	r18,r5,r20
 88069b4:	30808626 	beq	r6,r2,8806bd0 <___vfprintf_internal_r+0x1cbc>
 88069b8:	00801184 	movi	r2,70
 88069bc:	30808426 	beq	r6,r2,8806bd0 <___vfprintf_internal_r+0x1cbc>
 88069c0:	000d883a 	mov	r6,zero
 88069c4:	000f883a 	mov	r7,zero
 88069c8:	880b883a 	mov	r5,r17
 88069cc:	8009883a 	mov	r4,r16
 88069d0:	8803e4c0 	call	8803e4c <__eqdf2>
 88069d4:	1000751e 	bne	r2,zero,8806bac <___vfprintf_internal_r+0x1c98>
 88069d8:	9005883a 	mov	r2,r18
 88069dc:	dc800715 	stw	r18,28(sp)
 88069e0:	d9014117 	ldw	r4,1284(sp)
 88069e4:	d9414d17 	ldw	r5,1332(sp)
 88069e8:	00c019c4 	movi	r3,103
 88069ec:	1125c83a 	sub	r18,r2,r4
 88069f0:	28c06826 	beq	r5,r3,8806b94 <___vfprintf_internal_r+0x1c80>
 88069f4:	008011c4 	movi	r2,71
 88069f8:	28806626 	beq	r5,r2,8806b94 <___vfprintf_internal_r+0x1c80>
 88069fc:	d9000517 	ldw	r4,20(sp)
 8806a00:	d8c14d17 	ldw	r3,1332(sp)
 8806a04:	00801944 	movi	r2,101
 8806a08:	10c05516 	blt	r2,r3,8806b60 <___vfprintf_internal_r+0x1c4c>
 8806a0c:	213fffc4 	addi	r4,r4,-1
 8806a10:	d9000515 	stw	r4,20(sp)
 8806a14:	d8c00805 	stb	r3,32(sp)
 8806a18:	2021883a 	mov	r16,r4
 8806a1c:	2000c116 	blt	r4,zero,8806d24 <___vfprintf_internal_r+0x1e10>
 8806a20:	00800ac4 	movi	r2,43
 8806a24:	d8800845 	stb	r2,33(sp)
 8806a28:	00800244 	movi	r2,9
 8806a2c:	1400af0e 	bge	r2,r16,8806cec <___vfprintf_internal_r+0x1dd8>
 8806a30:	1027883a 	mov	r19,r2
 8806a34:	dc400b84 	addi	r17,sp,46
 8806a38:	8009883a 	mov	r4,r16
 8806a3c:	01400284 	movi	r5,10
 8806a40:	88043740 	call	8804374 <__modsi3>
 8806a44:	10800c04 	addi	r2,r2,48
 8806a48:	8c7fffc4 	addi	r17,r17,-1
 8806a4c:	8009883a 	mov	r4,r16
 8806a50:	01400284 	movi	r5,10
 8806a54:	88800005 	stb	r2,0(r17)
 8806a58:	88043140 	call	8804314 <__divsi3>
 8806a5c:	1021883a 	mov	r16,r2
 8806a60:	98bff516 	blt	r19,r2,8806a38 <___vfprintf_internal_r+0x1b24>
 8806a64:	10c00c04 	addi	r3,r2,48
 8806a68:	d88009c4 	addi	r2,sp,39
 8806a6c:	108001c4 	addi	r2,r2,7
 8806a70:	897fffc4 	addi	r5,r17,-1
 8806a74:	88ffffc5 	stb	r3,-1(r17)
 8806a78:	2880a72e 	bgeu	r5,r2,8806d18 <___vfprintf_internal_r+0x1e04>
 8806a7c:	1009883a 	mov	r4,r2
 8806a80:	d9800804 	addi	r6,sp,32
 8806a84:	d8c00884 	addi	r3,sp,34
 8806a88:	28800003 	ldbu	r2,0(r5)
 8806a8c:	29400044 	addi	r5,r5,1
 8806a90:	18800005 	stb	r2,0(r3)
 8806a94:	18c00044 	addi	r3,r3,1
 8806a98:	293ffb36 	bltu	r5,r4,8806a88 <___vfprintf_internal_r+0x1b74>
 8806a9c:	1987c83a 	sub	r3,r3,r6
 8806aa0:	00800044 	movi	r2,1
 8806aa4:	d8c14815 	stw	r3,1312(sp)
 8806aa8:	90cf883a 	add	r7,r18,r3
 8806aac:	1480960e 	bge	r2,r18,8806d08 <___vfprintf_internal_r+0x1df4>
 8806ab0:	39c00044 	addi	r7,r7,1
 8806ab4:	d9c14515 	stw	r7,1300(sp)
 8806ab8:	38003416 	blt	r7,zero,8806b8c <___vfprintf_internal_r+0x1c78>
 8806abc:	e0803fcc 	andi	r2,fp,255
 8806ac0:	1080201c 	xori	r2,r2,128
 8806ac4:	10bfe004 	addi	r2,r2,-128
 8806ac8:	10004e26 	beq	r2,zero,8806c04 <___vfprintf_internal_r+0x1cf0>
 8806acc:	00800b44 	movi	r2,45
 8806ad0:	dc814715 	stw	r18,1308(sp)
 8806ad4:	d8014615 	stw	zero,1304(sp)
 8806ad8:	d8800405 	stb	r2,16(sp)
 8806adc:	003bb106 	br	88059a4 <___vfprintf_internal_r+0xa90>
 8806ae0:	00800b44 	movi	r2,45
 8806ae4:	d8800405 	stb	r2,16(sp)
 8806ae8:	003d3306 	br	8805fb8 <___vfprintf_internal_r+0x10a4>
 8806aec:	d9014f17 	ldw	r4,1340(sp)
 8806af0:	b00b883a 	mov	r5,r22
 8806af4:	d9800c04 	addi	r6,sp,48
 8806af8:	8804ebc0 	call	8804ebc <__sprint_r>
 8806afc:	103abd1e 	bne	r2,zero,88055f4 <___vfprintf_internal_r+0x6e0>
 8806b00:	003abb06 	br	88055f0 <___vfprintf_internal_r+0x6dc>
 8806b04:	38800017 	ldw	r2,0(r7)
 8806b08:	39c00104 	addi	r7,r7,4
 8806b0c:	d9c14015 	stw	r7,1280(sp)
 8806b10:	d9414b17 	ldw	r5,1324(sp)
 8806b14:	d9c14017 	ldw	r7,1280(sp)
 8806b18:	11400015 	stw	r5,0(r2)
 8806b1c:	00395906 	br	8805084 <___vfprintf_internal_r+0x170>
 8806b20:	980f883a 	mov	r7,r19
 8806b24:	dcc14515 	stw	r19,1300(sp)
 8806b28:	d8014615 	stw	zero,1304(sp)
 8806b2c:	003b9b06 	br	880599c <___vfprintf_internal_r+0xa88>
 8806b30:	0027883a 	mov	r19,zero
 8806b34:	00397806 	br	8805118 <___vfprintf_internal_r+0x204>
 8806b38:	00c22074 	movhi	r3,2177
 8806b3c:	18c6ad04 	addi	r3,r3,6836
 8806b40:	100f883a 	mov	r7,r2
 8806b44:	d8814515 	stw	r2,1300(sp)
 8806b48:	d8c14115 	stw	r3,1284(sp)
 8806b4c:	0039e006 	br	88052d0 <___vfprintf_internal_r+0x3bc>
 8806b50:	00822074 	movhi	r2,2177
 8806b54:	1086ac04 	addi	r2,r2,6832
 8806b58:	d8814115 	stw	r2,1284(sp)
 8806b5c:	003d1c06 	br	8805fd0 <___vfprintf_internal_r+0x10bc>
 8806b60:	d9414d17 	ldw	r5,1332(sp)
 8806b64:	00801984 	movi	r2,102
 8806b68:	28804926 	beq	r5,r2,8806c90 <___vfprintf_internal_r+0x1d7c>
 8806b6c:	200f883a 	mov	r7,r4
 8806b70:	24805716 	blt	r4,r18,8806cd0 <___vfprintf_internal_r+0x1dbc>
 8806b74:	d9414c17 	ldw	r5,1328(sp)
 8806b78:	2880004c 	andi	r2,r5,1
 8806b7c:	10000126 	beq	r2,zero,8806b84 <___vfprintf_internal_r+0x1c70>
 8806b80:	21c00044 	addi	r7,r4,1
 8806b84:	d9c14515 	stw	r7,1300(sp)
 8806b88:	383fcc0e 	bge	r7,zero,8806abc <___vfprintf_internal_r+0x1ba8>
 8806b8c:	d8014515 	stw	zero,1300(sp)
 8806b90:	003fca06 	br	8806abc <___vfprintf_internal_r+0x1ba8>
 8806b94:	d9000517 	ldw	r4,20(sp)
 8806b98:	00bfff04 	movi	r2,-4
 8806b9c:	1100480e 	bge	r2,r4,8806cc0 <___vfprintf_internal_r+0x1dac>
 8806ba0:	99004716 	blt	r19,r4,8806cc0 <___vfprintf_internal_r+0x1dac>
 8806ba4:	d8c14d15 	stw	r3,1332(sp)
 8806ba8:	003ff006 	br	8806b6c <___vfprintf_internal_r+0x1c58>
 8806bac:	d8800717 	ldw	r2,28(sp)
 8806bb0:	14bf8b2e 	bgeu	r2,r18,88069e0 <___vfprintf_internal_r+0x1acc>
 8806bb4:	9007883a 	mov	r3,r18
 8806bb8:	01000c04 	movi	r4,48
 8806bbc:	11000005 	stb	r4,0(r2)
 8806bc0:	10800044 	addi	r2,r2,1
 8806bc4:	d8800715 	stw	r2,28(sp)
 8806bc8:	18bffc1e 	bne	r3,r2,8806bbc <___vfprintf_internal_r+0x1ca8>
 8806bcc:	003f8406 	br	88069e0 <___vfprintf_internal_r+0x1acc>
 8806bd0:	d8814117 	ldw	r2,1284(sp)
 8806bd4:	10c00007 	ldb	r3,0(r2)
 8806bd8:	00800c04 	movi	r2,48
 8806bdc:	18805b26 	beq	r3,r2,8806d4c <___vfprintf_internal_r+0x1e38>
 8806be0:	d9000517 	ldw	r4,20(sp)
 8806be4:	9125883a 	add	r18,r18,r4
 8806be8:	003f7506 	br	88069c0 <___vfprintf_internal_r+0x1aac>
 8806bec:	d9014c17 	ldw	r4,1328(sp)
 8806bf0:	2080004c 	andi	r2,r4,1
 8806bf4:	1005003a 	cmpeq	r2,r2,zero
 8806bf8:	103f6a26 	beq	r2,zero,88069a4 <___vfprintf_internal_r+0x1a90>
 8806bfc:	d8800717 	ldw	r2,28(sp)
 8806c00:	003f7706 	br	88069e0 <___vfprintf_internal_r+0x1acc>
 8806c04:	d9c14515 	stw	r7,1300(sp)
 8806c08:	38004d16 	blt	r7,zero,8806d40 <___vfprintf_internal_r+0x1e2c>
 8806c0c:	dc814715 	stw	r18,1308(sp)
 8806c10:	d8014615 	stw	zero,1304(sp)
 8806c14:	003b6106 	br	880599c <___vfprintf_internal_r+0xa88>
 8806c18:	d9014f17 	ldw	r4,1340(sp)
 8806c1c:	d8800504 	addi	r2,sp,20
 8806c20:	d8800115 	stw	r2,4(sp)
 8806c24:	d8c00604 	addi	r3,sp,24
 8806c28:	d8800704 	addi	r2,sp,28
 8806c2c:	800b883a 	mov	r5,r16
 8806c30:	880d883a 	mov	r6,r17
 8806c34:	01c000c4 	movi	r7,3
 8806c38:	d8c00215 	stw	r3,8(sp)
 8806c3c:	d8800315 	stw	r2,12(sp)
 8806c40:	dcc00015 	stw	r19,0(sp)
 8806c44:	9829883a 	mov	r20,r19
 8806c48:	88071380 	call	8807138 <_dtoa_r>
 8806c4c:	d8814115 	stw	r2,1284(sp)
 8806c50:	003f5106 	br	8806998 <___vfprintf_internal_r+0x1a84>
 8806c54:	d8c14217 	ldw	r3,1288(sp)
 8806c58:	d9014317 	ldw	r4,1292(sp)
 8806c5c:	07000b44 	movi	fp,45
 8806c60:	1821883a 	mov	r16,r3
 8806c64:	2460003c 	xorhi	r17,r4,32768
 8806c68:	003f3106 	br	8806930 <___vfprintf_internal_r+0x1a1c>
 8806c6c:	9d000044 	addi	r20,r19,1
 8806c70:	003f3906 	br	8806958 <___vfprintf_internal_r+0x1a44>
 8806c74:	983f251e 	bne	r19,zero,880690c <___vfprintf_internal_r+0x19f8>
 8806c78:	04c00044 	movi	r19,1
 8806c7c:	003f2306 	br	880690c <___vfprintf_internal_r+0x19f8>
 8806c80:	04c00184 	movi	r19,6
 8806c84:	003f2106 	br	880690c <___vfprintf_internal_r+0x19f8>
 8806c88:	d8014515 	stw	zero,1300(sp)
 8806c8c:	003eee06 	br	8806848 <___vfprintf_internal_r+0x1934>
 8806c90:	200f883a 	mov	r7,r4
 8806c94:	0100370e 	bge	zero,r4,8806d74 <___vfprintf_internal_r+0x1e60>
 8806c98:	9800031e 	bne	r19,zero,8806ca8 <___vfprintf_internal_r+0x1d94>
 8806c9c:	d9814c17 	ldw	r6,1328(sp)
 8806ca0:	3080004c 	andi	r2,r6,1
 8806ca4:	103fb726 	beq	r2,zero,8806b84 <___vfprintf_internal_r+0x1c70>
 8806ca8:	20800044 	addi	r2,r4,1
 8806cac:	98a7883a 	add	r19,r19,r2
 8806cb0:	dcc14515 	stw	r19,1300(sp)
 8806cb4:	980f883a 	mov	r7,r19
 8806cb8:	983f800e 	bge	r19,zero,8806abc <___vfprintf_internal_r+0x1ba8>
 8806cbc:	003fb306 	br	8806b8c <___vfprintf_internal_r+0x1c78>
 8806cc0:	d9814d17 	ldw	r6,1332(sp)
 8806cc4:	31bfff84 	addi	r6,r6,-2
 8806cc8:	d9814d15 	stw	r6,1332(sp)
 8806ccc:	003f4c06 	br	8806a00 <___vfprintf_internal_r+0x1aec>
 8806cd0:	0100180e 	bge	zero,r4,8806d34 <___vfprintf_internal_r+0x1e20>
 8806cd4:	00800044 	movi	r2,1
 8806cd8:	1485883a 	add	r2,r2,r18
 8806cdc:	d8814515 	stw	r2,1300(sp)
 8806ce0:	100f883a 	mov	r7,r2
 8806ce4:	103f750e 	bge	r2,zero,8806abc <___vfprintf_internal_r+0x1ba8>
 8806ce8:	003fa806 	br	8806b8c <___vfprintf_internal_r+0x1c78>
 8806cec:	80c00c04 	addi	r3,r16,48
 8806cf0:	00800c04 	movi	r2,48
 8806cf4:	d8c008c5 	stb	r3,35(sp)
 8806cf8:	d9800804 	addi	r6,sp,32
 8806cfc:	d8c00904 	addi	r3,sp,36
 8806d00:	d8800885 	stb	r2,34(sp)
 8806d04:	003f6506 	br	8806a9c <___vfprintf_internal_r+0x1b88>
 8806d08:	d9014c17 	ldw	r4,1328(sp)
 8806d0c:	2084703a 	and	r2,r4,r2
 8806d10:	103f9c26 	beq	r2,zero,8806b84 <___vfprintf_internal_r+0x1c70>
 8806d14:	003f6606 	br	8806ab0 <___vfprintf_internal_r+0x1b9c>
 8806d18:	d9800804 	addi	r6,sp,32
 8806d1c:	d8c00884 	addi	r3,sp,34
 8806d20:	003f5e06 	br	8806a9c <___vfprintf_internal_r+0x1b88>
 8806d24:	00800b44 	movi	r2,45
 8806d28:	0121c83a 	sub	r16,zero,r4
 8806d2c:	d8800845 	stb	r2,33(sp)
 8806d30:	003f3d06 	br	8806a28 <___vfprintf_internal_r+0x1b14>
 8806d34:	00800084 	movi	r2,2
 8806d38:	1105c83a 	sub	r2,r2,r4
 8806d3c:	003fe606 	br	8806cd8 <___vfprintf_internal_r+0x1dc4>
 8806d40:	d8014515 	stw	zero,1300(sp)
 8806d44:	dc814715 	stw	r18,1308(sp)
 8806d48:	003fb106 	br	8806c10 <___vfprintf_internal_r+0x1cfc>
 8806d4c:	000d883a 	mov	r6,zero
 8806d50:	000f883a 	mov	r7,zero
 8806d54:	8009883a 	mov	r4,r16
 8806d58:	880b883a 	mov	r5,r17
 8806d5c:	8803ed40 	call	8803ed4 <__nedf2>
 8806d60:	103f9f26 	beq	r2,zero,8806be0 <___vfprintf_internal_r+0x1ccc>
 8806d64:	00800044 	movi	r2,1
 8806d68:	1509c83a 	sub	r4,r2,r20
 8806d6c:	d9000515 	stw	r4,20(sp)
 8806d70:	003f9b06 	br	8806be0 <___vfprintf_internal_r+0x1ccc>
 8806d74:	98000d1e 	bne	r19,zero,8806dac <___vfprintf_internal_r+0x1e98>
 8806d78:	d8c14c17 	ldw	r3,1328(sp)
 8806d7c:	1880004c 	andi	r2,r3,1
 8806d80:	10000a1e 	bne	r2,zero,8806dac <___vfprintf_internal_r+0x1e98>
 8806d84:	01000044 	movi	r4,1
 8806d88:	200f883a 	mov	r7,r4
 8806d8c:	d9014515 	stw	r4,1300(sp)
 8806d90:	003f4a06 	br	8806abc <___vfprintf_internal_r+0x1ba8>
 8806d94:	3cc00017 	ldw	r19,0(r7)
 8806d98:	39c00104 	addi	r7,r7,4
 8806d9c:	983d0e0e 	bge	r19,zero,88061d8 <___vfprintf_internal_r+0x12c4>
 8806da0:	b8c00007 	ldb	r3,0(r23)
 8806da4:	04ffffc4 	movi	r19,-1
 8806da8:	0038d906 	br	8805110 <___vfprintf_internal_r+0x1fc>
 8806dac:	9cc00084 	addi	r19,r19,2
 8806db0:	dcc14515 	stw	r19,1300(sp)
 8806db4:	980f883a 	mov	r7,r19
 8806db8:	983f400e 	bge	r19,zero,8806abc <___vfprintf_internal_r+0x1ba8>
 8806dbc:	003f7306 	br	8806b8c <___vfprintf_internal_r+0x1c78>

08806dc0 <__vfprintf_internal>:
 8806dc0:	00822074 	movhi	r2,2177
 8806dc4:	108e5204 	addi	r2,r2,14664
 8806dc8:	2013883a 	mov	r9,r4
 8806dcc:	11000017 	ldw	r4,0(r2)
 8806dd0:	2805883a 	mov	r2,r5
 8806dd4:	300f883a 	mov	r7,r6
 8806dd8:	480b883a 	mov	r5,r9
 8806ddc:	100d883a 	mov	r6,r2
 8806de0:	8804f141 	jmpi	8804f14 <___vfprintf_internal_r>

08806de4 <__swsetup_r>:
 8806de4:	00822074 	movhi	r2,2177
 8806de8:	108e5204 	addi	r2,r2,14664
 8806dec:	10c00017 	ldw	r3,0(r2)
 8806df0:	defffd04 	addi	sp,sp,-12
 8806df4:	dc400115 	stw	r17,4(sp)
 8806df8:	dc000015 	stw	r16,0(sp)
 8806dfc:	dfc00215 	stw	ra,8(sp)
 8806e00:	2023883a 	mov	r17,r4
 8806e04:	2821883a 	mov	r16,r5
 8806e08:	18000226 	beq	r3,zero,8806e14 <__swsetup_r+0x30>
 8806e0c:	18800e17 	ldw	r2,56(r3)
 8806e10:	10001f26 	beq	r2,zero,8806e90 <__swsetup_r+0xac>
 8806e14:	8100030b 	ldhu	r4,12(r16)
 8806e18:	2080020c 	andi	r2,r4,8
 8806e1c:	10002826 	beq	r2,zero,8806ec0 <__swsetup_r+0xdc>
 8806e20:	81400417 	ldw	r5,16(r16)
 8806e24:	28001d26 	beq	r5,zero,8806e9c <__swsetup_r+0xb8>
 8806e28:	2080004c 	andi	r2,r4,1
 8806e2c:	1005003a 	cmpeq	r2,r2,zero
 8806e30:	10000b26 	beq	r2,zero,8806e60 <__swsetup_r+0x7c>
 8806e34:	2080008c 	andi	r2,r4,2
 8806e38:	10001226 	beq	r2,zero,8806e84 <__swsetup_r+0xa0>
 8806e3c:	0005883a 	mov	r2,zero
 8806e40:	80800215 	stw	r2,8(r16)
 8806e44:	28000b26 	beq	r5,zero,8806e74 <__swsetup_r+0x90>
 8806e48:	0005883a 	mov	r2,zero
 8806e4c:	dfc00217 	ldw	ra,8(sp)
 8806e50:	dc400117 	ldw	r17,4(sp)
 8806e54:	dc000017 	ldw	r16,0(sp)
 8806e58:	dec00304 	addi	sp,sp,12
 8806e5c:	f800283a 	ret
 8806e60:	80800517 	ldw	r2,20(r16)
 8806e64:	80000215 	stw	zero,8(r16)
 8806e68:	0085c83a 	sub	r2,zero,r2
 8806e6c:	80800615 	stw	r2,24(r16)
 8806e70:	283ff51e 	bne	r5,zero,8806e48 <__swsetup_r+0x64>
 8806e74:	2080200c 	andi	r2,r4,128
 8806e78:	103ff326 	beq	r2,zero,8806e48 <__swsetup_r+0x64>
 8806e7c:	00bfffc4 	movi	r2,-1
 8806e80:	003ff206 	br	8806e4c <__swsetup_r+0x68>
 8806e84:	80800517 	ldw	r2,20(r16)
 8806e88:	80800215 	stw	r2,8(r16)
 8806e8c:	003fed06 	br	8806e44 <__swsetup_r+0x60>
 8806e90:	1809883a 	mov	r4,r3
 8806e94:	88089840 	call	8808984 <__sinit>
 8806e98:	003fde06 	br	8806e14 <__swsetup_r+0x30>
 8806e9c:	20c0a00c 	andi	r3,r4,640
 8806ea0:	00808004 	movi	r2,512
 8806ea4:	18bfe026 	beq	r3,r2,8806e28 <__swsetup_r+0x44>
 8806ea8:	8809883a 	mov	r4,r17
 8806eac:	800b883a 	mov	r5,r16
 8806eb0:	88096fc0 	call	88096fc <__smakebuf_r>
 8806eb4:	8100030b 	ldhu	r4,12(r16)
 8806eb8:	81400417 	ldw	r5,16(r16)
 8806ebc:	003fda06 	br	8806e28 <__swsetup_r+0x44>
 8806ec0:	2080040c 	andi	r2,r4,16
 8806ec4:	103fed26 	beq	r2,zero,8806e7c <__swsetup_r+0x98>
 8806ec8:	2080010c 	andi	r2,r4,4
 8806ecc:	10001226 	beq	r2,zero,8806f18 <__swsetup_r+0x134>
 8806ed0:	81400c17 	ldw	r5,48(r16)
 8806ed4:	28000526 	beq	r5,zero,8806eec <__swsetup_r+0x108>
 8806ed8:	80801004 	addi	r2,r16,64
 8806edc:	28800226 	beq	r5,r2,8806ee8 <__swsetup_r+0x104>
 8806ee0:	8809883a 	mov	r4,r17
 8806ee4:	8808d080 	call	8808d08 <_free_r>
 8806ee8:	80000c15 	stw	zero,48(r16)
 8806eec:	8080030b 	ldhu	r2,12(r16)
 8806ef0:	81400417 	ldw	r5,16(r16)
 8806ef4:	80000115 	stw	zero,4(r16)
 8806ef8:	10bff6cc 	andi	r2,r2,65499
 8806efc:	8080030d 	sth	r2,12(r16)
 8806f00:	81400015 	stw	r5,0(r16)
 8806f04:	8080030b 	ldhu	r2,12(r16)
 8806f08:	10800214 	ori	r2,r2,8
 8806f0c:	113fffcc 	andi	r4,r2,65535
 8806f10:	8080030d 	sth	r2,12(r16)
 8806f14:	003fc306 	br	8806e24 <__swsetup_r+0x40>
 8806f18:	81400417 	ldw	r5,16(r16)
 8806f1c:	003ff906 	br	8806f04 <__swsetup_r+0x120>

08806f20 <quorem>:
 8806f20:	28c00417 	ldw	r3,16(r5)
 8806f24:	20800417 	ldw	r2,16(r4)
 8806f28:	defff604 	addi	sp,sp,-40
 8806f2c:	ddc00715 	stw	r23,28(sp)
 8806f30:	dd400515 	stw	r21,20(sp)
 8806f34:	dfc00915 	stw	ra,36(sp)
 8806f38:	df000815 	stw	fp,32(sp)
 8806f3c:	dd800615 	stw	r22,24(sp)
 8806f40:	dd000415 	stw	r20,16(sp)
 8806f44:	dcc00315 	stw	r19,12(sp)
 8806f48:	dc800215 	stw	r18,8(sp)
 8806f4c:	dc400115 	stw	r17,4(sp)
 8806f50:	dc000015 	stw	r16,0(sp)
 8806f54:	202f883a 	mov	r23,r4
 8806f58:	282b883a 	mov	r21,r5
 8806f5c:	10c07416 	blt	r2,r3,8807130 <quorem+0x210>
 8806f60:	1c7fffc4 	addi	r17,r3,-1
 8806f64:	8c45883a 	add	r2,r17,r17
 8806f68:	1085883a 	add	r2,r2,r2
 8806f6c:	2c000504 	addi	r16,r5,20
 8806f70:	24c00504 	addi	r19,r4,20
 8806f74:	14ed883a 	add	r22,r2,r19
 8806f78:	80a5883a 	add	r18,r16,r2
 8806f7c:	b7000017 	ldw	fp,0(r22)
 8806f80:	91400017 	ldw	r5,0(r18)
 8806f84:	e009883a 	mov	r4,fp
 8806f88:	29400044 	addi	r5,r5,1
 8806f8c:	88043d40 	call	88043d4 <__udivsi3>
 8806f90:	1029883a 	mov	r20,r2
 8806f94:	10003c1e 	bne	r2,zero,8807088 <quorem+0x168>
 8806f98:	a80b883a 	mov	r5,r21
 8806f9c:	b809883a 	mov	r4,r23
 8806fa0:	880a4280 	call	880a428 <__mcmp>
 8806fa4:	10002b16 	blt	r2,zero,8807054 <quorem+0x134>
 8806fa8:	a5000044 	addi	r20,r20,1
 8806fac:	980f883a 	mov	r7,r19
 8806fb0:	0011883a 	mov	r8,zero
 8806fb4:	0009883a 	mov	r4,zero
 8806fb8:	81400017 	ldw	r5,0(r16)
 8806fbc:	38c00017 	ldw	r3,0(r7)
 8806fc0:	84000104 	addi	r16,r16,4
 8806fc4:	28bfffcc 	andi	r2,r5,65535
 8806fc8:	2085883a 	add	r2,r4,r2
 8806fcc:	11bfffcc 	andi	r6,r2,65535
 8806fd0:	193fffcc 	andi	r4,r3,65535
 8806fd4:	1004d43a 	srli	r2,r2,16
 8806fd8:	280ad43a 	srli	r5,r5,16
 8806fdc:	2189c83a 	sub	r4,r4,r6
 8806fe0:	2209883a 	add	r4,r4,r8
 8806fe4:	1806d43a 	srli	r3,r3,16
 8806fe8:	288b883a 	add	r5,r5,r2
 8806fec:	200dd43a 	srai	r6,r4,16
 8806ff0:	28bfffcc 	andi	r2,r5,65535
 8806ff4:	1887c83a 	sub	r3,r3,r2
 8806ff8:	1987883a 	add	r3,r3,r6
 8806ffc:	3900000d 	sth	r4,0(r7)
 8807000:	38c0008d 	sth	r3,2(r7)
 8807004:	2808d43a 	srli	r4,r5,16
 8807008:	39c00104 	addi	r7,r7,4
 880700c:	1811d43a 	srai	r8,r3,16
 8807010:	943fe92e 	bgeu	r18,r16,8806fb8 <quorem+0x98>
 8807014:	8c45883a 	add	r2,r17,r17
 8807018:	1085883a 	add	r2,r2,r2
 880701c:	9885883a 	add	r2,r19,r2
 8807020:	10c00017 	ldw	r3,0(r2)
 8807024:	18000b1e 	bne	r3,zero,8807054 <quorem+0x134>
 8807028:	113fff04 	addi	r4,r2,-4
 880702c:	9900082e 	bgeu	r19,r4,8807050 <quorem+0x130>
 8807030:	10bfff17 	ldw	r2,-4(r2)
 8807034:	10000326 	beq	r2,zero,8807044 <quorem+0x124>
 8807038:	00000506 	br	8807050 <quorem+0x130>
 880703c:	20800017 	ldw	r2,0(r4)
 8807040:	1000031e 	bne	r2,zero,8807050 <quorem+0x130>
 8807044:	213fff04 	addi	r4,r4,-4
 8807048:	8c7fffc4 	addi	r17,r17,-1
 880704c:	993ffb36 	bltu	r19,r4,880703c <quorem+0x11c>
 8807050:	bc400415 	stw	r17,16(r23)
 8807054:	a005883a 	mov	r2,r20
 8807058:	dfc00917 	ldw	ra,36(sp)
 880705c:	df000817 	ldw	fp,32(sp)
 8807060:	ddc00717 	ldw	r23,28(sp)
 8807064:	dd800617 	ldw	r22,24(sp)
 8807068:	dd400517 	ldw	r21,20(sp)
 880706c:	dd000417 	ldw	r20,16(sp)
 8807070:	dcc00317 	ldw	r19,12(sp)
 8807074:	dc800217 	ldw	r18,8(sp)
 8807078:	dc400117 	ldw	r17,4(sp)
 880707c:	dc000017 	ldw	r16,0(sp)
 8807080:	dec00a04 	addi	sp,sp,40
 8807084:	f800283a 	ret
 8807088:	980f883a 	mov	r7,r19
 880708c:	8011883a 	mov	r8,r16
 8807090:	0013883a 	mov	r9,zero
 8807094:	000d883a 	mov	r6,zero
 8807098:	40c00017 	ldw	r3,0(r8)
 880709c:	39000017 	ldw	r4,0(r7)
 88070a0:	42000104 	addi	r8,r8,4
 88070a4:	18bfffcc 	andi	r2,r3,65535
 88070a8:	a085383a 	mul	r2,r20,r2
 88070ac:	1806d43a 	srli	r3,r3,16
 88070b0:	217fffcc 	andi	r5,r4,65535
 88070b4:	3085883a 	add	r2,r6,r2
 88070b8:	11bfffcc 	andi	r6,r2,65535
 88070bc:	a0c7383a 	mul	r3,r20,r3
 88070c0:	1004d43a 	srli	r2,r2,16
 88070c4:	298bc83a 	sub	r5,r5,r6
 88070c8:	2a4b883a 	add	r5,r5,r9
 88070cc:	2008d43a 	srli	r4,r4,16
 88070d0:	1887883a 	add	r3,r3,r2
 88070d4:	280dd43a 	srai	r6,r5,16
 88070d8:	18bfffcc 	andi	r2,r3,65535
 88070dc:	2089c83a 	sub	r4,r4,r2
 88070e0:	2189883a 	add	r4,r4,r6
 88070e4:	3900008d 	sth	r4,2(r7)
 88070e8:	3940000d 	sth	r5,0(r7)
 88070ec:	180cd43a 	srli	r6,r3,16
 88070f0:	39c00104 	addi	r7,r7,4
 88070f4:	2013d43a 	srai	r9,r4,16
 88070f8:	923fe72e 	bgeu	r18,r8,8807098 <quorem+0x178>
 88070fc:	e03fa61e 	bne	fp,zero,8806f98 <quorem+0x78>
 8807100:	b0ffff04 	addi	r3,r22,-4
 8807104:	98c0082e 	bgeu	r19,r3,8807128 <quorem+0x208>
 8807108:	b0bfff17 	ldw	r2,-4(r22)
 880710c:	10000326 	beq	r2,zero,880711c <quorem+0x1fc>
 8807110:	00000506 	br	8807128 <quorem+0x208>
 8807114:	18800017 	ldw	r2,0(r3)
 8807118:	1000031e 	bne	r2,zero,8807128 <quorem+0x208>
 880711c:	18ffff04 	addi	r3,r3,-4
 8807120:	8c7fffc4 	addi	r17,r17,-1
 8807124:	98fffb36 	bltu	r19,r3,8807114 <quorem+0x1f4>
 8807128:	bc400415 	stw	r17,16(r23)
 880712c:	003f9a06 	br	8806f98 <quorem+0x78>
 8807130:	0005883a 	mov	r2,zero
 8807134:	003fc806 	br	8807058 <quorem+0x138>

08807138 <_dtoa_r>:
 8807138:	22001017 	ldw	r8,64(r4)
 880713c:	deffda04 	addi	sp,sp,-152
 8807140:	dd402115 	stw	r21,132(sp)
 8807144:	dd002015 	stw	r20,128(sp)
 8807148:	dc801e15 	stw	r18,120(sp)
 880714c:	dc401d15 	stw	r17,116(sp)
 8807150:	dfc02515 	stw	ra,148(sp)
 8807154:	df002415 	stw	fp,144(sp)
 8807158:	ddc02315 	stw	r23,140(sp)
 880715c:	dd802215 	stw	r22,136(sp)
 8807160:	dcc01f15 	stw	r19,124(sp)
 8807164:	dc001c15 	stw	r16,112(sp)
 8807168:	d9001615 	stw	r4,88(sp)
 880716c:	3023883a 	mov	r17,r6
 8807170:	2829883a 	mov	r20,r5
 8807174:	d9c01715 	stw	r7,92(sp)
 8807178:	dc802817 	ldw	r18,160(sp)
 880717c:	302b883a 	mov	r21,r6
 8807180:	40000a26 	beq	r8,zero,88071ac <_dtoa_r+0x74>
 8807184:	20801117 	ldw	r2,68(r4)
 8807188:	400b883a 	mov	r5,r8
 880718c:	40800115 	stw	r2,4(r8)
 8807190:	20c01117 	ldw	r3,68(r4)
 8807194:	00800044 	movi	r2,1
 8807198:	10c4983a 	sll	r2,r2,r3
 880719c:	40800215 	stw	r2,8(r8)
 88071a0:	880a2cc0 	call	880a2cc <_Bfree>
 88071a4:	d8c01617 	ldw	r3,88(sp)
 88071a8:	18001015 	stw	zero,64(r3)
 88071ac:	8800a316 	blt	r17,zero,880743c <_dtoa_r+0x304>
 88071b0:	90000015 	stw	zero,0(r18)
 88071b4:	a8dffc2c 	andhi	r3,r21,32752
 88071b8:	009ffc34 	movhi	r2,32752
 88071bc:	18809126 	beq	r3,r2,8807404 <_dtoa_r+0x2cc>
 88071c0:	000d883a 	mov	r6,zero
 88071c4:	000f883a 	mov	r7,zero
 88071c8:	a009883a 	mov	r4,r20
 88071cc:	a80b883a 	mov	r5,r21
 88071d0:	dd001215 	stw	r20,72(sp)
 88071d4:	dd401315 	stw	r21,76(sp)
 88071d8:	8803ed40 	call	8803ed4 <__nedf2>
 88071dc:	1000171e 	bne	r2,zero,880723c <_dtoa_r+0x104>
 88071e0:	d9802717 	ldw	r6,156(sp)
 88071e4:	00800044 	movi	r2,1
 88071e8:	30800015 	stw	r2,0(r6)
 88071ec:	d8802917 	ldw	r2,164(sp)
 88071f0:	10029b26 	beq	r2,zero,8807c60 <_dtoa_r+0xb28>
 88071f4:	d9002917 	ldw	r4,164(sp)
 88071f8:	00822074 	movhi	r2,2177
 88071fc:	1086bb44 	addi	r2,r2,6893
 8807200:	10ffffc4 	addi	r3,r2,-1
 8807204:	20800015 	stw	r2,0(r4)
 8807208:	1805883a 	mov	r2,r3
 880720c:	dfc02517 	ldw	ra,148(sp)
 8807210:	df002417 	ldw	fp,144(sp)
 8807214:	ddc02317 	ldw	r23,140(sp)
 8807218:	dd802217 	ldw	r22,136(sp)
 880721c:	dd402117 	ldw	r21,132(sp)
 8807220:	dd002017 	ldw	r20,128(sp)
 8807224:	dcc01f17 	ldw	r19,124(sp)
 8807228:	dc801e17 	ldw	r18,120(sp)
 880722c:	dc401d17 	ldw	r17,116(sp)
 8807230:	dc001c17 	ldw	r16,112(sp)
 8807234:	dec02604 	addi	sp,sp,152
 8807238:	f800283a 	ret
 880723c:	d9001617 	ldw	r4,88(sp)
 8807240:	d9401217 	ldw	r5,72(sp)
 8807244:	d8800104 	addi	r2,sp,4
 8807248:	a80d883a 	mov	r6,r21
 880724c:	d9c00204 	addi	r7,sp,8
 8807250:	d8800015 	stw	r2,0(sp)
 8807254:	880a9080 	call	880a908 <__d2b>
 8807258:	d8800715 	stw	r2,28(sp)
 880725c:	a804d53a 	srli	r2,r21,20
 8807260:	1101ffcc 	andi	r4,r2,2047
 8807264:	20008626 	beq	r4,zero,8807480 <_dtoa_r+0x348>
 8807268:	d8c01217 	ldw	r3,72(sp)
 880726c:	00800434 	movhi	r2,16
 8807270:	10bfffc4 	addi	r2,r2,-1
 8807274:	ddc00117 	ldw	r23,4(sp)
 8807278:	a884703a 	and	r2,r21,r2
 880727c:	1811883a 	mov	r8,r3
 8807280:	124ffc34 	orhi	r9,r2,16368
 8807284:	25bf0044 	addi	r22,r4,-1023
 8807288:	d8000815 	stw	zero,32(sp)
 880728c:	0005883a 	mov	r2,zero
 8807290:	00cffe34 	movhi	r3,16376
 8807294:	480b883a 	mov	r5,r9
 8807298:	4009883a 	mov	r4,r8
 880729c:	180f883a 	mov	r7,r3
 88072a0:	100d883a 	mov	r6,r2
 88072a4:	880373c0 	call	880373c <__subdf3>
 88072a8:	0218dbf4 	movhi	r8,25455
 88072ac:	4210d844 	addi	r8,r8,17249
 88072b0:	024ff4f4 	movhi	r9,16339
 88072b4:	4a61e9c4 	addi	r9,r9,-30809
 88072b8:	480f883a 	mov	r7,r9
 88072bc:	400d883a 	mov	r6,r8
 88072c0:	180b883a 	mov	r5,r3
 88072c4:	1009883a 	mov	r4,r2
 88072c8:	88038300 	call	8803830 <__muldf3>
 88072cc:	0222d874 	movhi	r8,35681
 88072d0:	42322cc4 	addi	r8,r8,-14157
 88072d4:	024ff1f4 	movhi	r9,16327
 88072d8:	4a628a04 	addi	r9,r9,-30168
 88072dc:	480f883a 	mov	r7,r9
 88072e0:	400d883a 	mov	r6,r8
 88072e4:	180b883a 	mov	r5,r3
 88072e8:	1009883a 	mov	r4,r2
 88072ec:	88037bc0 	call	88037bc <__adddf3>
 88072f0:	b009883a 	mov	r4,r22
 88072f4:	1021883a 	mov	r16,r2
 88072f8:	1823883a 	mov	r17,r3
 88072fc:	88040f40 	call	88040f4 <__floatsidf>
 8807300:	021427f4 	movhi	r8,20639
 8807304:	421e7ec4 	addi	r8,r8,31227
 8807308:	024ff4f4 	movhi	r9,16339
 880730c:	4a5104c4 	addi	r9,r9,17427
 8807310:	480f883a 	mov	r7,r9
 8807314:	400d883a 	mov	r6,r8
 8807318:	180b883a 	mov	r5,r3
 880731c:	1009883a 	mov	r4,r2
 8807320:	88038300 	call	8803830 <__muldf3>
 8807324:	180f883a 	mov	r7,r3
 8807328:	880b883a 	mov	r5,r17
 880732c:	100d883a 	mov	r6,r2
 8807330:	8009883a 	mov	r4,r16
 8807334:	88037bc0 	call	88037bc <__adddf3>
 8807338:	1009883a 	mov	r4,r2
 880733c:	180b883a 	mov	r5,r3
 8807340:	1021883a 	mov	r16,r2
 8807344:	1823883a 	mov	r17,r3
 8807348:	880cc140 	call	880cc14 <__fixdfsi>
 880734c:	000d883a 	mov	r6,zero
 8807350:	000f883a 	mov	r7,zero
 8807354:	8009883a 	mov	r4,r16
 8807358:	880b883a 	mov	r5,r17
 880735c:	d8800d15 	stw	r2,52(sp)
 8807360:	8803fe40 	call	8803fe4 <__ltdf2>
 8807364:	10031716 	blt	r2,zero,8807fc4 <_dtoa_r+0xe8c>
 8807368:	d8c00d17 	ldw	r3,52(sp)
 880736c:	00800584 	movi	r2,22
 8807370:	10c1482e 	bgeu	r2,r3,8807894 <_dtoa_r+0x75c>
 8807374:	01000044 	movi	r4,1
 8807378:	d9000c15 	stw	r4,48(sp)
 880737c:	bd85c83a 	sub	r2,r23,r22
 8807380:	11bfffc4 	addi	r6,r2,-1
 8807384:	30030b16 	blt	r6,zero,8807fb4 <_dtoa_r+0xe7c>
 8807388:	d9800a15 	stw	r6,40(sp)
 880738c:	d8001115 	stw	zero,68(sp)
 8807390:	d8c00d17 	ldw	r3,52(sp)
 8807394:	1802ff16 	blt	r3,zero,8807f94 <_dtoa_r+0xe5c>
 8807398:	d9000a17 	ldw	r4,40(sp)
 880739c:	d8c00915 	stw	r3,36(sp)
 88073a0:	d8001015 	stw	zero,64(sp)
 88073a4:	20c9883a 	add	r4,r4,r3
 88073a8:	d9000a15 	stw	r4,40(sp)
 88073ac:	d9001717 	ldw	r4,92(sp)
 88073b0:	00800244 	movi	r2,9
 88073b4:	11004636 	bltu	r2,r4,88074d0 <_dtoa_r+0x398>
 88073b8:	00800144 	movi	r2,5
 88073bc:	11020416 	blt	r2,r4,8807bd0 <_dtoa_r+0xa98>
 88073c0:	04400044 	movi	r17,1
 88073c4:	d8c01717 	ldw	r3,92(sp)
 88073c8:	00800144 	movi	r2,5
 88073cc:	10c1ed36 	bltu	r2,r3,8807b84 <_dtoa_r+0xa4c>
 88073d0:	18c5883a 	add	r2,r3,r3
 88073d4:	1085883a 	add	r2,r2,r2
 88073d8:	00c22034 	movhi	r3,2176
 88073dc:	18dcfb04 	addi	r3,r3,29676
 88073e0:	10c5883a 	add	r2,r2,r3
 88073e4:	11000017 	ldw	r4,0(r2)
 88073e8:	2000683a 	jmp	r4
 88073ec:	088074d8 	cmpnei	r2,at,467
 88073f0:	088074d8 	cmpnei	r2,at,467
 88073f4:	08807ed8 	cmpnei	r2,at,507
 88073f8:	08807eb0 	cmpltui	r2,at,506
 88073fc:	08807ef4 	orhi	r2,at,507
 8807400:	08807f00 	call	8807f0 <__alt_mem_onchip_memory2_3+0x8797f0>
 8807404:	d9002717 	ldw	r4,156(sp)
 8807408:	0089c3c4 	movi	r2,9999
 880740c:	20800015 	stw	r2,0(r4)
 8807410:	a0001026 	beq	r20,zero,8807454 <_dtoa_r+0x31c>
 8807414:	00c22074 	movhi	r3,2177
 8807418:	18c6c704 	addi	r3,r3,6940
 880741c:	d9802917 	ldw	r6,164(sp)
 8807420:	303f7926 	beq	r6,zero,8807208 <_dtoa_r+0xd0>
 8807424:	188000c7 	ldb	r2,3(r3)
 8807428:	190000c4 	addi	r4,r3,3
 880742c:	1000101e 	bne	r2,zero,8807470 <_dtoa_r+0x338>
 8807430:	d8802917 	ldw	r2,164(sp)
 8807434:	11000015 	stw	r4,0(r2)
 8807438:	003f7306 	br	8807208 <_dtoa_r+0xd0>
 880743c:	00a00034 	movhi	r2,32768
 8807440:	10bfffc4 	addi	r2,r2,-1
 8807444:	00c00044 	movi	r3,1
 8807448:	88aa703a 	and	r21,r17,r2
 880744c:	90c00015 	stw	r3,0(r18)
 8807450:	003f5806 	br	88071b4 <_dtoa_r+0x7c>
 8807454:	00800434 	movhi	r2,16
 8807458:	10bfffc4 	addi	r2,r2,-1
 880745c:	a884703a 	and	r2,r21,r2
 8807460:	103fec1e 	bne	r2,zero,8807414 <_dtoa_r+0x2dc>
 8807464:	00c22074 	movhi	r3,2177
 8807468:	18c6c404 	addi	r3,r3,6928
 880746c:	003feb06 	br	880741c <_dtoa_r+0x2e4>
 8807470:	d8802917 	ldw	r2,164(sp)
 8807474:	19000204 	addi	r4,r3,8
 8807478:	11000015 	stw	r4,0(r2)
 880747c:	003f6206 	br	8807208 <_dtoa_r+0xd0>
 8807480:	ddc00117 	ldw	r23,4(sp)
 8807484:	d8800217 	ldw	r2,8(sp)
 8807488:	01000804 	movi	r4,32
 880748c:	b8c10c84 	addi	r3,r23,1074
 8807490:	18a3883a 	add	r17,r3,r2
 8807494:	2441b80e 	bge	r4,r17,8807b78 <_dtoa_r+0xa40>
 8807498:	00c01004 	movi	r3,64
 880749c:	1c47c83a 	sub	r3,r3,r17
 88074a0:	88bff804 	addi	r2,r17,-32
 88074a4:	a8c6983a 	sll	r3,r21,r3
 88074a8:	a084d83a 	srl	r2,r20,r2
 88074ac:	1888b03a 	or	r4,r3,r2
 88074b0:	880ccec0 	call	880ccec <__floatunsidf>
 88074b4:	1011883a 	mov	r8,r2
 88074b8:	00bf8434 	movhi	r2,65040
 88074bc:	01000044 	movi	r4,1
 88074c0:	10d3883a 	add	r9,r2,r3
 88074c4:	8dbef344 	addi	r22,r17,-1075
 88074c8:	d9000815 	stw	r4,32(sp)
 88074cc:	003f6f06 	br	880728c <_dtoa_r+0x154>
 88074d0:	d8001715 	stw	zero,92(sp)
 88074d4:	04400044 	movi	r17,1
 88074d8:	00bfffc4 	movi	r2,-1
 88074dc:	00c00044 	movi	r3,1
 88074e0:	d8800e15 	stw	r2,56(sp)
 88074e4:	d8002615 	stw	zero,152(sp)
 88074e8:	d8800f15 	stw	r2,60(sp)
 88074ec:	d8c00b15 	stw	r3,44(sp)
 88074f0:	1021883a 	mov	r16,r2
 88074f4:	d8801617 	ldw	r2,88(sp)
 88074f8:	10001115 	stw	zero,68(r2)
 88074fc:	d8801617 	ldw	r2,88(sp)
 8807500:	11401117 	ldw	r5,68(r2)
 8807504:	1009883a 	mov	r4,r2
 8807508:	880a84c0 	call	880a84c <_Balloc>
 880750c:	d8c01617 	ldw	r3,88(sp)
 8807510:	d8800515 	stw	r2,20(sp)
 8807514:	18801015 	stw	r2,64(r3)
 8807518:	00800384 	movi	r2,14
 880751c:	14006836 	bltu	r2,r16,88076c0 <_dtoa_r+0x588>
 8807520:	8805003a 	cmpeq	r2,r17,zero
 8807524:	1000661e 	bne	r2,zero,88076c0 <_dtoa_r+0x588>
 8807528:	d9000d17 	ldw	r4,52(sp)
 880752c:	0102300e 	bge	zero,r4,8807df0 <_dtoa_r+0xcb8>
 8807530:	208003cc 	andi	r2,r4,15
 8807534:	100490fa 	slli	r2,r2,3
 8807538:	2025d13a 	srai	r18,r4,4
 880753c:	00c22074 	movhi	r3,2177
 8807540:	18c6d804 	addi	r3,r3,7008
 8807544:	10c5883a 	add	r2,r2,r3
 8807548:	90c0040c 	andi	r3,r18,16
 880754c:	14000017 	ldw	r16,0(r2)
 8807550:	14400117 	ldw	r17,4(r2)
 8807554:	18036a1e 	bne	r3,zero,8808300 <_dtoa_r+0x11c8>
 8807558:	05800084 	movi	r22,2
 880755c:	90001026 	beq	r18,zero,88075a0 <_dtoa_r+0x468>
 8807560:	04c22074 	movhi	r19,2177
 8807564:	9cc70a04 	addi	r19,r19,7208
 8807568:	9080004c 	andi	r2,r18,1
 880756c:	1005003a 	cmpeq	r2,r2,zero
 8807570:	1000081e 	bne	r2,zero,8807594 <_dtoa_r+0x45c>
 8807574:	99800017 	ldw	r6,0(r19)
 8807578:	99c00117 	ldw	r7,4(r19)
 880757c:	880b883a 	mov	r5,r17
 8807580:	8009883a 	mov	r4,r16
 8807584:	88038300 	call	8803830 <__muldf3>
 8807588:	1021883a 	mov	r16,r2
 880758c:	b5800044 	addi	r22,r22,1
 8807590:	1823883a 	mov	r17,r3
 8807594:	9025d07a 	srai	r18,r18,1
 8807598:	9cc00204 	addi	r19,r19,8
 880759c:	903ff21e 	bne	r18,zero,8807568 <_dtoa_r+0x430>
 88075a0:	a80b883a 	mov	r5,r21
 88075a4:	a009883a 	mov	r4,r20
 88075a8:	880f883a 	mov	r7,r17
 88075ac:	800d883a 	mov	r6,r16
 88075b0:	8803bf40 	call	8803bf4 <__divdf3>
 88075b4:	1029883a 	mov	r20,r2
 88075b8:	182b883a 	mov	r21,r3
 88075bc:	d8c00c17 	ldw	r3,48(sp)
 88075c0:	1805003a 	cmpeq	r2,r3,zero
 88075c4:	1000081e 	bne	r2,zero,88075e8 <_dtoa_r+0x4b0>
 88075c8:	0005883a 	mov	r2,zero
 88075cc:	00cffc34 	movhi	r3,16368
 88075d0:	180f883a 	mov	r7,r3
 88075d4:	a009883a 	mov	r4,r20
 88075d8:	a80b883a 	mov	r5,r21
 88075dc:	100d883a 	mov	r6,r2
 88075e0:	8803fe40 	call	8803fe4 <__ltdf2>
 88075e4:	1003fe16 	blt	r2,zero,88085e0 <_dtoa_r+0x14a8>
 88075e8:	b009883a 	mov	r4,r22
 88075ec:	88040f40 	call	88040f4 <__floatsidf>
 88075f0:	180b883a 	mov	r5,r3
 88075f4:	1009883a 	mov	r4,r2
 88075f8:	a00d883a 	mov	r6,r20
 88075fc:	a80f883a 	mov	r7,r21
 8807600:	88038300 	call	8803830 <__muldf3>
 8807604:	0011883a 	mov	r8,zero
 8807608:	02500734 	movhi	r9,16412
 880760c:	1009883a 	mov	r4,r2
 8807610:	180b883a 	mov	r5,r3
 8807614:	480f883a 	mov	r7,r9
 8807618:	400d883a 	mov	r6,r8
 880761c:	88037bc0 	call	88037bc <__adddf3>
 8807620:	d9000f17 	ldw	r4,60(sp)
 8807624:	102d883a 	mov	r22,r2
 8807628:	00bf3034 	movhi	r2,64704
 880762c:	18b9883a 	add	fp,r3,r2
 8807630:	e02f883a 	mov	r23,fp
 8807634:	20028f1e 	bne	r4,zero,8808074 <_dtoa_r+0xf3c>
 8807638:	0005883a 	mov	r2,zero
 880763c:	00d00534 	movhi	r3,16404
 8807640:	a009883a 	mov	r4,r20
 8807644:	a80b883a 	mov	r5,r21
 8807648:	180f883a 	mov	r7,r3
 880764c:	100d883a 	mov	r6,r2
 8807650:	880373c0 	call	880373c <__subdf3>
 8807654:	1009883a 	mov	r4,r2
 8807658:	e00f883a 	mov	r7,fp
 880765c:	180b883a 	mov	r5,r3
 8807660:	b00d883a 	mov	r6,r22
 8807664:	1025883a 	mov	r18,r2
 8807668:	1827883a 	mov	r19,r3
 880766c:	8803f5c0 	call	8803f5c <__gtdf2>
 8807670:	00834f16 	blt	zero,r2,88083b0 <_dtoa_r+0x1278>
 8807674:	e0e0003c 	xorhi	r3,fp,32768
 8807678:	9009883a 	mov	r4,r18
 880767c:	980b883a 	mov	r5,r19
 8807680:	180f883a 	mov	r7,r3
 8807684:	b00d883a 	mov	r6,r22
 8807688:	8803fe40 	call	8803fe4 <__ltdf2>
 880768c:	1000080e 	bge	r2,zero,88076b0 <_dtoa_r+0x578>
 8807690:	0027883a 	mov	r19,zero
 8807694:	0025883a 	mov	r18,zero
 8807698:	d8802617 	ldw	r2,152(sp)
 880769c:	df000517 	ldw	fp,20(sp)
 88076a0:	d8000615 	stw	zero,24(sp)
 88076a4:	0084303a 	nor	r2,zero,r2
 88076a8:	d8800d15 	stw	r2,52(sp)
 88076ac:	00019b06 	br	8807d1c <_dtoa_r+0xbe4>
 88076b0:	d9801217 	ldw	r6,72(sp)
 88076b4:	d8801317 	ldw	r2,76(sp)
 88076b8:	3029883a 	mov	r20,r6
 88076bc:	102b883a 	mov	r21,r2
 88076c0:	d8c00217 	ldw	r3,8(sp)
 88076c4:	18008516 	blt	r3,zero,88078dc <_dtoa_r+0x7a4>
 88076c8:	d9000d17 	ldw	r4,52(sp)
 88076cc:	00800384 	movi	r2,14
 88076d0:	11008216 	blt	r2,r4,88078dc <_dtoa_r+0x7a4>
 88076d4:	200490fa 	slli	r2,r4,3
 88076d8:	d9802617 	ldw	r6,152(sp)
 88076dc:	00c22074 	movhi	r3,2177
 88076e0:	18c6d804 	addi	r3,r3,7008
 88076e4:	10c5883a 	add	r2,r2,r3
 88076e8:	14800017 	ldw	r18,0(r2)
 88076ec:	14c00117 	ldw	r19,4(r2)
 88076f0:	30031e16 	blt	r6,zero,880836c <_dtoa_r+0x1234>
 88076f4:	d9000517 	ldw	r4,20(sp)
 88076f8:	d8c00f17 	ldw	r3,60(sp)
 88076fc:	a823883a 	mov	r17,r21
 8807700:	a021883a 	mov	r16,r20
 8807704:	192b883a 	add	r21,r3,r4
 8807708:	2039883a 	mov	fp,r4
 880770c:	00000f06 	br	880774c <_dtoa_r+0x614>
 8807710:	0005883a 	mov	r2,zero
 8807714:	00d00934 	movhi	r3,16420
 8807718:	5009883a 	mov	r4,r10
 880771c:	580b883a 	mov	r5,r11
 8807720:	180f883a 	mov	r7,r3
 8807724:	100d883a 	mov	r6,r2
 8807728:	88038300 	call	8803830 <__muldf3>
 880772c:	180b883a 	mov	r5,r3
 8807730:	000d883a 	mov	r6,zero
 8807734:	000f883a 	mov	r7,zero
 8807738:	1009883a 	mov	r4,r2
 880773c:	1021883a 	mov	r16,r2
 8807740:	1823883a 	mov	r17,r3
 8807744:	8803ed40 	call	8803ed4 <__nedf2>
 8807748:	10004526 	beq	r2,zero,8807860 <_dtoa_r+0x728>
 880774c:	900d883a 	mov	r6,r18
 8807750:	980f883a 	mov	r7,r19
 8807754:	8009883a 	mov	r4,r16
 8807758:	880b883a 	mov	r5,r17
 880775c:	8803bf40 	call	8803bf4 <__divdf3>
 8807760:	180b883a 	mov	r5,r3
 8807764:	1009883a 	mov	r4,r2
 8807768:	880cc140 	call	880cc14 <__fixdfsi>
 880776c:	1009883a 	mov	r4,r2
 8807770:	1029883a 	mov	r20,r2
 8807774:	88040f40 	call	88040f4 <__floatsidf>
 8807778:	180f883a 	mov	r7,r3
 880777c:	9009883a 	mov	r4,r18
 8807780:	980b883a 	mov	r5,r19
 8807784:	100d883a 	mov	r6,r2
 8807788:	88038300 	call	8803830 <__muldf3>
 880778c:	180f883a 	mov	r7,r3
 8807790:	880b883a 	mov	r5,r17
 8807794:	8009883a 	mov	r4,r16
 8807798:	100d883a 	mov	r6,r2
 880779c:	880373c0 	call	880373c <__subdf3>
 88077a0:	1015883a 	mov	r10,r2
 88077a4:	a0800c04 	addi	r2,r20,48
 88077a8:	e0800005 	stb	r2,0(fp)
 88077ac:	e7000044 	addi	fp,fp,1
 88077b0:	1817883a 	mov	r11,r3
 88077b4:	e57fd61e 	bne	fp,r21,8807710 <_dtoa_r+0x5d8>
 88077b8:	500d883a 	mov	r6,r10
 88077bc:	180f883a 	mov	r7,r3
 88077c0:	5009883a 	mov	r4,r10
 88077c4:	180b883a 	mov	r5,r3
 88077c8:	88037bc0 	call	88037bc <__adddf3>
 88077cc:	100d883a 	mov	r6,r2
 88077d0:	9009883a 	mov	r4,r18
 88077d4:	980b883a 	mov	r5,r19
 88077d8:	180f883a 	mov	r7,r3
 88077dc:	1021883a 	mov	r16,r2
 88077e0:	1823883a 	mov	r17,r3
 88077e4:	8803fe40 	call	8803fe4 <__ltdf2>
 88077e8:	10000816 	blt	r2,zero,880780c <_dtoa_r+0x6d4>
 88077ec:	980b883a 	mov	r5,r19
 88077f0:	800d883a 	mov	r6,r16
 88077f4:	880f883a 	mov	r7,r17
 88077f8:	9009883a 	mov	r4,r18
 88077fc:	8803e4c0 	call	8803e4c <__eqdf2>
 8807800:	1000171e 	bne	r2,zero,8807860 <_dtoa_r+0x728>
 8807804:	a080004c 	andi	r2,r20,1
 8807808:	10001526 	beq	r2,zero,8807860 <_dtoa_r+0x728>
 880780c:	d8800d17 	ldw	r2,52(sp)
 8807810:	d8800415 	stw	r2,16(sp)
 8807814:	e009883a 	mov	r4,fp
 8807818:	213fffc4 	addi	r4,r4,-1
 880781c:	20c00007 	ldb	r3,0(r4)
 8807820:	00800e44 	movi	r2,57
 8807824:	1880081e 	bne	r3,r2,8807848 <_dtoa_r+0x710>
 8807828:	d8800517 	ldw	r2,20(sp)
 880782c:	113ffa1e 	bne	r2,r4,8807818 <_dtoa_r+0x6e0>
 8807830:	d8c00417 	ldw	r3,16(sp)
 8807834:	d9800517 	ldw	r6,20(sp)
 8807838:	00800c04 	movi	r2,48
 880783c:	18c00044 	addi	r3,r3,1
 8807840:	d8c00415 	stw	r3,16(sp)
 8807844:	30800005 	stb	r2,0(r6)
 8807848:	20800003 	ldbu	r2,0(r4)
 880784c:	d8c00417 	ldw	r3,16(sp)
 8807850:	27000044 	addi	fp,r4,1
 8807854:	10800044 	addi	r2,r2,1
 8807858:	d8c00d15 	stw	r3,52(sp)
 880785c:	20800005 	stb	r2,0(r4)
 8807860:	d9001617 	ldw	r4,88(sp)
 8807864:	d9400717 	ldw	r5,28(sp)
 8807868:	880a2cc0 	call	880a2cc <_Bfree>
 880786c:	e0000005 	stb	zero,0(fp)
 8807870:	d9800d17 	ldw	r6,52(sp)
 8807874:	d8c02717 	ldw	r3,156(sp)
 8807878:	d9002917 	ldw	r4,164(sp)
 880787c:	30800044 	addi	r2,r6,1
 8807880:	18800015 	stw	r2,0(r3)
 8807884:	20029c26 	beq	r4,zero,88082f8 <_dtoa_r+0x11c0>
 8807888:	d8c00517 	ldw	r3,20(sp)
 880788c:	27000015 	stw	fp,0(r4)
 8807890:	003e5d06 	br	8807208 <_dtoa_r+0xd0>
 8807894:	d9800d17 	ldw	r6,52(sp)
 8807898:	00c22074 	movhi	r3,2177
 880789c:	18c6d804 	addi	r3,r3,7008
 88078a0:	d9001217 	ldw	r4,72(sp)
 88078a4:	300490fa 	slli	r2,r6,3
 88078a8:	d9401317 	ldw	r5,76(sp)
 88078ac:	10c5883a 	add	r2,r2,r3
 88078b0:	12000017 	ldw	r8,0(r2)
 88078b4:	12400117 	ldw	r9,4(r2)
 88078b8:	400d883a 	mov	r6,r8
 88078bc:	480f883a 	mov	r7,r9
 88078c0:	8803fe40 	call	8803fe4 <__ltdf2>
 88078c4:	1000030e 	bge	r2,zero,88078d4 <_dtoa_r+0x79c>
 88078c8:	d8800d17 	ldw	r2,52(sp)
 88078cc:	10bfffc4 	addi	r2,r2,-1
 88078d0:	d8800d15 	stw	r2,52(sp)
 88078d4:	d8000c15 	stw	zero,48(sp)
 88078d8:	003ea806 	br	880737c <_dtoa_r+0x244>
 88078dc:	d9000b17 	ldw	r4,44(sp)
 88078e0:	202cc03a 	cmpne	r22,r4,zero
 88078e4:	b000c71e 	bne	r22,zero,8807c04 <_dtoa_r+0xacc>
 88078e8:	dc001117 	ldw	r16,68(sp)
 88078ec:	dc801017 	ldw	r18,64(sp)
 88078f0:	0027883a 	mov	r19,zero
 88078f4:	04000b0e 	bge	zero,r16,8807924 <_dtoa_r+0x7ec>
 88078f8:	d8c00a17 	ldw	r3,40(sp)
 88078fc:	00c0090e 	bge	zero,r3,8807924 <_dtoa_r+0x7ec>
 8807900:	8005883a 	mov	r2,r16
 8807904:	1c011316 	blt	r3,r16,8807d54 <_dtoa_r+0xc1c>
 8807908:	d9000a17 	ldw	r4,40(sp)
 880790c:	d9801117 	ldw	r6,68(sp)
 8807910:	80a1c83a 	sub	r16,r16,r2
 8807914:	2089c83a 	sub	r4,r4,r2
 8807918:	308dc83a 	sub	r6,r6,r2
 880791c:	d9000a15 	stw	r4,40(sp)
 8807920:	d9801115 	stw	r6,68(sp)
 8807924:	d8801017 	ldw	r2,64(sp)
 8807928:	0080150e 	bge	zero,r2,8807980 <_dtoa_r+0x848>
 880792c:	d8c00b17 	ldw	r3,44(sp)
 8807930:	1805003a 	cmpeq	r2,r3,zero
 8807934:	1001c91e 	bne	r2,zero,880805c <_dtoa_r+0xf24>
 8807938:	04800e0e 	bge	zero,r18,8807974 <_dtoa_r+0x83c>
 880793c:	d9001617 	ldw	r4,88(sp)
 8807940:	980b883a 	mov	r5,r19
 8807944:	900d883a 	mov	r6,r18
 8807948:	880b0800 	call	880b080 <__pow5mult>
 880794c:	d9001617 	ldw	r4,88(sp)
 8807950:	d9800717 	ldw	r6,28(sp)
 8807954:	100b883a 	mov	r5,r2
 8807958:	1027883a 	mov	r19,r2
 880795c:	880ad5c0 	call	880ad5c <__multiply>
 8807960:	d9001617 	ldw	r4,88(sp)
 8807964:	d9400717 	ldw	r5,28(sp)
 8807968:	1023883a 	mov	r17,r2
 880796c:	880a2cc0 	call	880a2cc <_Bfree>
 8807970:	dc400715 	stw	r17,28(sp)
 8807974:	d9001017 	ldw	r4,64(sp)
 8807978:	248dc83a 	sub	r6,r4,r18
 880797c:	30010e1e 	bne	r6,zero,8807db8 <_dtoa_r+0xc80>
 8807980:	d9001617 	ldw	r4,88(sp)
 8807984:	04400044 	movi	r17,1
 8807988:	880b883a 	mov	r5,r17
 880798c:	880af440 	call	880af44 <__i2b>
 8807990:	d9800917 	ldw	r6,36(sp)
 8807994:	1025883a 	mov	r18,r2
 8807998:	0180040e 	bge	zero,r6,88079ac <_dtoa_r+0x874>
 880799c:	d9001617 	ldw	r4,88(sp)
 88079a0:	100b883a 	mov	r5,r2
 88079a4:	880b0800 	call	880b080 <__pow5mult>
 88079a8:	1025883a 	mov	r18,r2
 88079ac:	d8801717 	ldw	r2,92(sp)
 88079b0:	8880f30e 	bge	r17,r2,8807d80 <_dtoa_r+0xc48>
 88079b4:	0023883a 	mov	r17,zero
 88079b8:	d9800917 	ldw	r6,36(sp)
 88079bc:	30019e1e 	bne	r6,zero,8808038 <_dtoa_r+0xf00>
 88079c0:	00c00044 	movi	r3,1
 88079c4:	d9000a17 	ldw	r4,40(sp)
 88079c8:	20c5883a 	add	r2,r4,r3
 88079cc:	10c007cc 	andi	r3,r2,31
 88079d0:	1800841e 	bne	r3,zero,8807be4 <_dtoa_r+0xaac>
 88079d4:	00800704 	movi	r2,28
 88079d8:	d9000a17 	ldw	r4,40(sp)
 88079dc:	d9801117 	ldw	r6,68(sp)
 88079e0:	80a1883a 	add	r16,r16,r2
 88079e4:	2089883a 	add	r4,r4,r2
 88079e8:	308d883a 	add	r6,r6,r2
 88079ec:	d9000a15 	stw	r4,40(sp)
 88079f0:	d9801115 	stw	r6,68(sp)
 88079f4:	d8801117 	ldw	r2,68(sp)
 88079f8:	0080050e 	bge	zero,r2,8807a10 <_dtoa_r+0x8d8>
 88079fc:	d9400717 	ldw	r5,28(sp)
 8807a00:	d9001617 	ldw	r4,88(sp)
 8807a04:	100d883a 	mov	r6,r2
 8807a08:	880ac100 	call	880ac10 <__lshift>
 8807a0c:	d8800715 	stw	r2,28(sp)
 8807a10:	d8c00a17 	ldw	r3,40(sp)
 8807a14:	00c0050e 	bge	zero,r3,8807a2c <_dtoa_r+0x8f4>
 8807a18:	d9001617 	ldw	r4,88(sp)
 8807a1c:	900b883a 	mov	r5,r18
 8807a20:	180d883a 	mov	r6,r3
 8807a24:	880ac100 	call	880ac10 <__lshift>
 8807a28:	1025883a 	mov	r18,r2
 8807a2c:	d9000c17 	ldw	r4,48(sp)
 8807a30:	2005003a 	cmpeq	r2,r4,zero
 8807a34:	10016f26 	beq	r2,zero,8807ff4 <_dtoa_r+0xebc>
 8807a38:	d9000f17 	ldw	r4,60(sp)
 8807a3c:	0102170e 	bge	zero,r4,880829c <_dtoa_r+0x1164>
 8807a40:	d9800b17 	ldw	r6,44(sp)
 8807a44:	3005003a 	cmpeq	r2,r6,zero
 8807a48:	1000881e 	bne	r2,zero,8807c6c <_dtoa_r+0xb34>
 8807a4c:	0400050e 	bge	zero,r16,8807a64 <_dtoa_r+0x92c>
 8807a50:	d9001617 	ldw	r4,88(sp)
 8807a54:	980b883a 	mov	r5,r19
 8807a58:	800d883a 	mov	r6,r16
 8807a5c:	880ac100 	call	880ac10 <__lshift>
 8807a60:	1027883a 	mov	r19,r2
 8807a64:	8804c03a 	cmpne	r2,r17,zero
 8807a68:	1002541e 	bne	r2,zero,88083bc <_dtoa_r+0x1284>
 8807a6c:	980b883a 	mov	r5,r19
 8807a70:	dd800517 	ldw	r22,20(sp)
 8807a74:	dcc00615 	stw	r19,24(sp)
 8807a78:	a700004c 	andi	fp,r20,1
 8807a7c:	2827883a 	mov	r19,r5
 8807a80:	d9000717 	ldw	r4,28(sp)
 8807a84:	900b883a 	mov	r5,r18
 8807a88:	8806f200 	call	8806f20 <quorem>
 8807a8c:	d9000717 	ldw	r4,28(sp)
 8807a90:	d9400617 	ldw	r5,24(sp)
 8807a94:	1023883a 	mov	r17,r2
 8807a98:	8dc00c04 	addi	r23,r17,48
 8807a9c:	880a4280 	call	880a428 <__mcmp>
 8807aa0:	d9001617 	ldw	r4,88(sp)
 8807aa4:	900b883a 	mov	r5,r18
 8807aa8:	980d883a 	mov	r6,r19
 8807aac:	1029883a 	mov	r20,r2
 8807ab0:	880aa840 	call	880aa84 <__mdiff>
 8807ab4:	102b883a 	mov	r21,r2
 8807ab8:	10800317 	ldw	r2,12(r2)
 8807abc:	1001281e 	bne	r2,zero,8807f60 <_dtoa_r+0xe28>
 8807ac0:	d9000717 	ldw	r4,28(sp)
 8807ac4:	a80b883a 	mov	r5,r21
 8807ac8:	880a4280 	call	880a428 <__mcmp>
 8807acc:	d9001617 	ldw	r4,88(sp)
 8807ad0:	1021883a 	mov	r16,r2
 8807ad4:	a80b883a 	mov	r5,r21
 8807ad8:	880a2cc0 	call	880a2cc <_Bfree>
 8807adc:	8000041e 	bne	r16,zero,8807af0 <_dtoa_r+0x9b8>
 8807ae0:	d8801717 	ldw	r2,92(sp)
 8807ae4:	1000021e 	bne	r2,zero,8807af0 <_dtoa_r+0x9b8>
 8807ae8:	e004c03a 	cmpne	r2,fp,zero
 8807aec:	10011726 	beq	r2,zero,8807f4c <_dtoa_r+0xe14>
 8807af0:	a0010616 	blt	r20,zero,8807f0c <_dtoa_r+0xdd4>
 8807af4:	a000041e 	bne	r20,zero,8807b08 <_dtoa_r+0x9d0>
 8807af8:	d8c01717 	ldw	r3,92(sp)
 8807afc:	1800021e 	bne	r3,zero,8807b08 <_dtoa_r+0x9d0>
 8807b00:	e004c03a 	cmpne	r2,fp,zero
 8807b04:	10010126 	beq	r2,zero,8807f0c <_dtoa_r+0xdd4>
 8807b08:	04023d16 	blt	zero,r16,8808400 <_dtoa_r+0x12c8>
 8807b0c:	b5c00005 	stb	r23,0(r22)
 8807b10:	d9800517 	ldw	r6,20(sp)
 8807b14:	d9000f17 	ldw	r4,60(sp)
 8807b18:	b5800044 	addi	r22,r22,1
 8807b1c:	3105883a 	add	r2,r6,r4
 8807b20:	b0806526 	beq	r22,r2,8807cb8 <_dtoa_r+0xb80>
 8807b24:	d9400717 	ldw	r5,28(sp)
 8807b28:	d9001617 	ldw	r4,88(sp)
 8807b2c:	01800284 	movi	r6,10
 8807b30:	000f883a 	mov	r7,zero
 8807b34:	880af800 	call	880af80 <__multadd>
 8807b38:	d8800715 	stw	r2,28(sp)
 8807b3c:	d8800617 	ldw	r2,24(sp)
 8807b40:	14c10c26 	beq	r2,r19,8807f74 <_dtoa_r+0xe3c>
 8807b44:	d9400617 	ldw	r5,24(sp)
 8807b48:	d9001617 	ldw	r4,88(sp)
 8807b4c:	01800284 	movi	r6,10
 8807b50:	000f883a 	mov	r7,zero
 8807b54:	880af800 	call	880af80 <__multadd>
 8807b58:	d9001617 	ldw	r4,88(sp)
 8807b5c:	980b883a 	mov	r5,r19
 8807b60:	01800284 	movi	r6,10
 8807b64:	000f883a 	mov	r7,zero
 8807b68:	d8800615 	stw	r2,24(sp)
 8807b6c:	880af800 	call	880af80 <__multadd>
 8807b70:	1027883a 	mov	r19,r2
 8807b74:	003fc206 	br	8807a80 <_dtoa_r+0x948>
 8807b78:	2445c83a 	sub	r2,r4,r17
 8807b7c:	a088983a 	sll	r4,r20,r2
 8807b80:	003e4b06 	br	88074b0 <_dtoa_r+0x378>
 8807b84:	01bfffc4 	movi	r6,-1
 8807b88:	00800044 	movi	r2,1
 8807b8c:	d9800e15 	stw	r6,56(sp)
 8807b90:	d9800f15 	stw	r6,60(sp)
 8807b94:	d8800b15 	stw	r2,44(sp)
 8807b98:	d8c01617 	ldw	r3,88(sp)
 8807b9c:	008005c4 	movi	r2,23
 8807ba0:	18001115 	stw	zero,68(r3)
 8807ba4:	1580082e 	bgeu	r2,r22,8807bc8 <_dtoa_r+0xa90>
 8807ba8:	00c00104 	movi	r3,4
 8807bac:	0009883a 	mov	r4,zero
 8807bb0:	18c7883a 	add	r3,r3,r3
 8807bb4:	18800504 	addi	r2,r3,20
 8807bb8:	21000044 	addi	r4,r4,1
 8807bbc:	b0bffc2e 	bgeu	r22,r2,8807bb0 <_dtoa_r+0xa78>
 8807bc0:	d9801617 	ldw	r6,88(sp)
 8807bc4:	31001115 	stw	r4,68(r6)
 8807bc8:	dc000f17 	ldw	r16,60(sp)
 8807bcc:	003e4b06 	br	88074fc <_dtoa_r+0x3c4>
 8807bd0:	d9801717 	ldw	r6,92(sp)
 8807bd4:	0023883a 	mov	r17,zero
 8807bd8:	31bfff04 	addi	r6,r6,-4
 8807bdc:	d9801715 	stw	r6,92(sp)
 8807be0:	003df806 	br	88073c4 <_dtoa_r+0x28c>
 8807be4:	00800804 	movi	r2,32
 8807be8:	10c9c83a 	sub	r4,r2,r3
 8807bec:	00c00104 	movi	r3,4
 8807bf0:	19005a16 	blt	r3,r4,8807d5c <_dtoa_r+0xc24>
 8807bf4:	008000c4 	movi	r2,3
 8807bf8:	113f7e16 	blt	r2,r4,88079f4 <_dtoa_r+0x8bc>
 8807bfc:	20800704 	addi	r2,r4,28
 8807c00:	003f7506 	br	88079d8 <_dtoa_r+0x8a0>
 8807c04:	d9801717 	ldw	r6,92(sp)
 8807c08:	00800044 	movi	r2,1
 8807c0c:	1180a10e 	bge	r2,r6,8807e94 <_dtoa_r+0xd5c>
 8807c10:	d9800f17 	ldw	r6,60(sp)
 8807c14:	d8c01017 	ldw	r3,64(sp)
 8807c18:	30bfffc4 	addi	r2,r6,-1
 8807c1c:	1881c616 	blt	r3,r2,8808338 <_dtoa_r+0x1200>
 8807c20:	18a5c83a 	sub	r18,r3,r2
 8807c24:	d8800f17 	ldw	r2,60(sp)
 8807c28:	10026216 	blt	r2,zero,88085b4 <_dtoa_r+0x147c>
 8807c2c:	dc001117 	ldw	r16,68(sp)
 8807c30:	1007883a 	mov	r3,r2
 8807c34:	d9800a17 	ldw	r6,40(sp)
 8807c38:	d8801117 	ldw	r2,68(sp)
 8807c3c:	d9001617 	ldw	r4,88(sp)
 8807c40:	30cd883a 	add	r6,r6,r3
 8807c44:	10c5883a 	add	r2,r2,r3
 8807c48:	01400044 	movi	r5,1
 8807c4c:	d9800a15 	stw	r6,40(sp)
 8807c50:	d8801115 	stw	r2,68(sp)
 8807c54:	880af440 	call	880af44 <__i2b>
 8807c58:	1027883a 	mov	r19,r2
 8807c5c:	003f2506 	br	88078f4 <_dtoa_r+0x7bc>
 8807c60:	00c22074 	movhi	r3,2177
 8807c64:	18c6bb04 	addi	r3,r3,6892
 8807c68:	003d6706 	br	8807208 <_dtoa_r+0xd0>
 8807c6c:	dd800517 	ldw	r22,20(sp)
 8807c70:	04000044 	movi	r16,1
 8807c74:	00000706 	br	8807c94 <_dtoa_r+0xb5c>
 8807c78:	d9400717 	ldw	r5,28(sp)
 8807c7c:	d9001617 	ldw	r4,88(sp)
 8807c80:	01800284 	movi	r6,10
 8807c84:	000f883a 	mov	r7,zero
 8807c88:	880af800 	call	880af80 <__multadd>
 8807c8c:	d8800715 	stw	r2,28(sp)
 8807c90:	84000044 	addi	r16,r16,1
 8807c94:	d9000717 	ldw	r4,28(sp)
 8807c98:	900b883a 	mov	r5,r18
 8807c9c:	8806f200 	call	8806f20 <quorem>
 8807ca0:	15c00c04 	addi	r23,r2,48
 8807ca4:	b5c00005 	stb	r23,0(r22)
 8807ca8:	d8c00f17 	ldw	r3,60(sp)
 8807cac:	b5800044 	addi	r22,r22,1
 8807cb0:	80fff116 	blt	r16,r3,8807c78 <_dtoa_r+0xb40>
 8807cb4:	d8000615 	stw	zero,24(sp)
 8807cb8:	d9400717 	ldw	r5,28(sp)
 8807cbc:	d9001617 	ldw	r4,88(sp)
 8807cc0:	01800044 	movi	r6,1
 8807cc4:	880ac100 	call	880ac10 <__lshift>
 8807cc8:	1009883a 	mov	r4,r2
 8807ccc:	900b883a 	mov	r5,r18
 8807cd0:	d8800715 	stw	r2,28(sp)
 8807cd4:	880a4280 	call	880a428 <__mcmp>
 8807cd8:	00803c0e 	bge	zero,r2,8807dcc <_dtoa_r+0xc94>
 8807cdc:	b009883a 	mov	r4,r22
 8807ce0:	213fffc4 	addi	r4,r4,-1
 8807ce4:	21400003 	ldbu	r5,0(r4)
 8807ce8:	00800e44 	movi	r2,57
 8807cec:	28c03fcc 	andi	r3,r5,255
 8807cf0:	18c0201c 	xori	r3,r3,128
 8807cf4:	18ffe004 	addi	r3,r3,-128
 8807cf8:	1881981e 	bne	r3,r2,880835c <_dtoa_r+0x1224>
 8807cfc:	d9800517 	ldw	r6,20(sp)
 8807d00:	21bff71e 	bne	r4,r6,8807ce0 <_dtoa_r+0xba8>
 8807d04:	d8800d17 	ldw	r2,52(sp)
 8807d08:	37000044 	addi	fp,r6,1
 8807d0c:	10800044 	addi	r2,r2,1
 8807d10:	d8800d15 	stw	r2,52(sp)
 8807d14:	00800c44 	movi	r2,49
 8807d18:	30800005 	stb	r2,0(r6)
 8807d1c:	d9001617 	ldw	r4,88(sp)
 8807d20:	900b883a 	mov	r5,r18
 8807d24:	880a2cc0 	call	880a2cc <_Bfree>
 8807d28:	983ecd26 	beq	r19,zero,8807860 <_dtoa_r+0x728>
 8807d2c:	d8c00617 	ldw	r3,24(sp)
 8807d30:	18000426 	beq	r3,zero,8807d44 <_dtoa_r+0xc0c>
 8807d34:	1cc00326 	beq	r3,r19,8807d44 <_dtoa_r+0xc0c>
 8807d38:	d9001617 	ldw	r4,88(sp)
 8807d3c:	180b883a 	mov	r5,r3
 8807d40:	880a2cc0 	call	880a2cc <_Bfree>
 8807d44:	d9001617 	ldw	r4,88(sp)
 8807d48:	980b883a 	mov	r5,r19
 8807d4c:	880a2cc0 	call	880a2cc <_Bfree>
 8807d50:	003ec306 	br	8807860 <_dtoa_r+0x728>
 8807d54:	1805883a 	mov	r2,r3
 8807d58:	003eeb06 	br	8807908 <_dtoa_r+0x7d0>
 8807d5c:	d9800a17 	ldw	r6,40(sp)
 8807d60:	d8c01117 	ldw	r3,68(sp)
 8807d64:	20bfff04 	addi	r2,r4,-4
 8807d68:	308d883a 	add	r6,r6,r2
 8807d6c:	1887883a 	add	r3,r3,r2
 8807d70:	80a1883a 	add	r16,r16,r2
 8807d74:	d9800a15 	stw	r6,40(sp)
 8807d78:	d8c01115 	stw	r3,68(sp)
 8807d7c:	003f1d06 	br	88079f4 <_dtoa_r+0x8bc>
 8807d80:	a03f0c1e 	bne	r20,zero,88079b4 <_dtoa_r+0x87c>
 8807d84:	00800434 	movhi	r2,16
 8807d88:	10bfffc4 	addi	r2,r2,-1
 8807d8c:	a884703a 	and	r2,r21,r2
 8807d90:	103f081e 	bne	r2,zero,88079b4 <_dtoa_r+0x87c>
 8807d94:	a89ffc2c 	andhi	r2,r21,32752
 8807d98:	103f0626 	beq	r2,zero,88079b4 <_dtoa_r+0x87c>
 8807d9c:	d8c01117 	ldw	r3,68(sp)
 8807da0:	d9000a17 	ldw	r4,40(sp)
 8807da4:	18c00044 	addi	r3,r3,1
 8807da8:	21000044 	addi	r4,r4,1
 8807dac:	d8c01115 	stw	r3,68(sp)
 8807db0:	d9000a15 	stw	r4,40(sp)
 8807db4:	003f0006 	br	88079b8 <_dtoa_r+0x880>
 8807db8:	d9400717 	ldw	r5,28(sp)
 8807dbc:	d9001617 	ldw	r4,88(sp)
 8807dc0:	880b0800 	call	880b080 <__pow5mult>
 8807dc4:	d8800715 	stw	r2,28(sp)
 8807dc8:	003eed06 	br	8807980 <_dtoa_r+0x848>
 8807dcc:	1000021e 	bne	r2,zero,8807dd8 <_dtoa_r+0xca0>
 8807dd0:	b880004c 	andi	r2,r23,1
 8807dd4:	103fc11e 	bne	r2,zero,8807cdc <_dtoa_r+0xba4>
 8807dd8:	b5bfffc4 	addi	r22,r22,-1
 8807ddc:	b0c00007 	ldb	r3,0(r22)
 8807de0:	00800c04 	movi	r2,48
 8807de4:	18bffc26 	beq	r3,r2,8807dd8 <_dtoa_r+0xca0>
 8807de8:	b7000044 	addi	fp,r22,1
 8807dec:	003fcb06 	br	8807d1c <_dtoa_r+0xbe4>
 8807df0:	d9800d17 	ldw	r6,52(sp)
 8807df4:	018fc83a 	sub	r7,zero,r6
 8807df8:	3801f726 	beq	r7,zero,88085d8 <_dtoa_r+0x14a0>
 8807dfc:	398003cc 	andi	r6,r7,15
 8807e00:	300c90fa 	slli	r6,r6,3
 8807e04:	01422074 	movhi	r5,2177
 8807e08:	2946d804 	addi	r5,r5,7008
 8807e0c:	d9001217 	ldw	r4,72(sp)
 8807e10:	314d883a 	add	r6,r6,r5
 8807e14:	30c00117 	ldw	r3,4(r6)
 8807e18:	30800017 	ldw	r2,0(r6)
 8807e1c:	d9401317 	ldw	r5,76(sp)
 8807e20:	3821d13a 	srai	r16,r7,4
 8807e24:	100d883a 	mov	r6,r2
 8807e28:	180f883a 	mov	r7,r3
 8807e2c:	88038300 	call	8803830 <__muldf3>
 8807e30:	1011883a 	mov	r8,r2
 8807e34:	1813883a 	mov	r9,r3
 8807e38:	1029883a 	mov	r20,r2
 8807e3c:	182b883a 	mov	r21,r3
 8807e40:	8001e526 	beq	r16,zero,88085d8 <_dtoa_r+0x14a0>
 8807e44:	05800084 	movi	r22,2
 8807e48:	04422074 	movhi	r17,2177
 8807e4c:	8c470a04 	addi	r17,r17,7208
 8807e50:	8080004c 	andi	r2,r16,1
 8807e54:	1005003a 	cmpeq	r2,r2,zero
 8807e58:	1000081e 	bne	r2,zero,8807e7c <_dtoa_r+0xd44>
 8807e5c:	89800017 	ldw	r6,0(r17)
 8807e60:	89c00117 	ldw	r7,4(r17)
 8807e64:	480b883a 	mov	r5,r9
 8807e68:	4009883a 	mov	r4,r8
 8807e6c:	88038300 	call	8803830 <__muldf3>
 8807e70:	1011883a 	mov	r8,r2
 8807e74:	b5800044 	addi	r22,r22,1
 8807e78:	1813883a 	mov	r9,r3
 8807e7c:	8021d07a 	srai	r16,r16,1
 8807e80:	8c400204 	addi	r17,r17,8
 8807e84:	803ff21e 	bne	r16,zero,8807e50 <_dtoa_r+0xd18>
 8807e88:	4029883a 	mov	r20,r8
 8807e8c:	482b883a 	mov	r21,r9
 8807e90:	003dca06 	br	88075bc <_dtoa_r+0x484>
 8807e94:	d9000817 	ldw	r4,32(sp)
 8807e98:	2005003a 	cmpeq	r2,r4,zero
 8807e9c:	1001f61e 	bne	r2,zero,8808678 <_dtoa_r+0x1540>
 8807ea0:	dc001117 	ldw	r16,68(sp)
 8807ea4:	dc801017 	ldw	r18,64(sp)
 8807ea8:	18c10cc4 	addi	r3,r3,1075
 8807eac:	003f6106 	br	8807c34 <_dtoa_r+0xafc>
 8807eb0:	d8000b15 	stw	zero,44(sp)
 8807eb4:	d9802617 	ldw	r6,152(sp)
 8807eb8:	d8c00d17 	ldw	r3,52(sp)
 8807ebc:	30800044 	addi	r2,r6,1
 8807ec0:	18ad883a 	add	r22,r3,r2
 8807ec4:	b13fffc4 	addi	r4,r22,-1
 8807ec8:	d9000e15 	stw	r4,56(sp)
 8807ecc:	0581f60e 	bge	zero,r22,88086a8 <_dtoa_r+0x1570>
 8807ed0:	dd800f15 	stw	r22,60(sp)
 8807ed4:	003f3006 	br	8807b98 <_dtoa_r+0xa60>
 8807ed8:	d8000b15 	stw	zero,44(sp)
 8807edc:	d9002617 	ldw	r4,152(sp)
 8807ee0:	0101eb0e 	bge	zero,r4,8808690 <_dtoa_r+0x1558>
 8807ee4:	202d883a 	mov	r22,r4
 8807ee8:	d9000e15 	stw	r4,56(sp)
 8807eec:	d9000f15 	stw	r4,60(sp)
 8807ef0:	003f2906 	br	8807b98 <_dtoa_r+0xa60>
 8807ef4:	01800044 	movi	r6,1
 8807ef8:	d9800b15 	stw	r6,44(sp)
 8807efc:	003ff706 	br	8807edc <_dtoa_r+0xda4>
 8807f00:	01000044 	movi	r4,1
 8807f04:	d9000b15 	stw	r4,44(sp)
 8807f08:	003fea06 	br	8807eb4 <_dtoa_r+0xd7c>
 8807f0c:	04000c0e 	bge	zero,r16,8807f40 <_dtoa_r+0xe08>
 8807f10:	d9400717 	ldw	r5,28(sp)
 8807f14:	d9001617 	ldw	r4,88(sp)
 8807f18:	01800044 	movi	r6,1
 8807f1c:	880ac100 	call	880ac10 <__lshift>
 8807f20:	1009883a 	mov	r4,r2
 8807f24:	900b883a 	mov	r5,r18
 8807f28:	d8800715 	stw	r2,28(sp)
 8807f2c:	880a4280 	call	880a428 <__mcmp>
 8807f30:	0081e00e 	bge	zero,r2,88086b4 <_dtoa_r+0x157c>
 8807f34:	bdc00044 	addi	r23,r23,1
 8807f38:	00800e84 	movi	r2,58
 8807f3c:	b881a226 	beq	r23,r2,88085c8 <_dtoa_r+0x1490>
 8807f40:	b7000044 	addi	fp,r22,1
 8807f44:	b5c00005 	stb	r23,0(r22)
 8807f48:	003f7406 	br	8807d1c <_dtoa_r+0xbe4>
 8807f4c:	00800e44 	movi	r2,57
 8807f50:	b8819d26 	beq	r23,r2,88085c8 <_dtoa_r+0x1490>
 8807f54:	053ffa0e 	bge	zero,r20,8807f40 <_dtoa_r+0xe08>
 8807f58:	8dc00c44 	addi	r23,r17,49
 8807f5c:	003ff806 	br	8807f40 <_dtoa_r+0xe08>
 8807f60:	d9001617 	ldw	r4,88(sp)
 8807f64:	a80b883a 	mov	r5,r21
 8807f68:	04000044 	movi	r16,1
 8807f6c:	880a2cc0 	call	880a2cc <_Bfree>
 8807f70:	003edf06 	br	8807af0 <_dtoa_r+0x9b8>
 8807f74:	d9001617 	ldw	r4,88(sp)
 8807f78:	980b883a 	mov	r5,r19
 8807f7c:	01800284 	movi	r6,10
 8807f80:	000f883a 	mov	r7,zero
 8807f84:	880af800 	call	880af80 <__multadd>
 8807f88:	1027883a 	mov	r19,r2
 8807f8c:	d8800615 	stw	r2,24(sp)
 8807f90:	003ebb06 	br	8807a80 <_dtoa_r+0x948>
 8807f94:	d9801117 	ldw	r6,68(sp)
 8807f98:	d8800d17 	ldw	r2,52(sp)
 8807f9c:	d8000915 	stw	zero,36(sp)
 8807fa0:	308dc83a 	sub	r6,r6,r2
 8807fa4:	0087c83a 	sub	r3,zero,r2
 8807fa8:	d9801115 	stw	r6,68(sp)
 8807fac:	d8c01015 	stw	r3,64(sp)
 8807fb0:	003cfe06 	br	88073ac <_dtoa_r+0x274>
 8807fb4:	018dc83a 	sub	r6,zero,r6
 8807fb8:	d9801115 	stw	r6,68(sp)
 8807fbc:	d8000a15 	stw	zero,40(sp)
 8807fc0:	003cf306 	br	8807390 <_dtoa_r+0x258>
 8807fc4:	d9000d17 	ldw	r4,52(sp)
 8807fc8:	88040f40 	call	88040f4 <__floatsidf>
 8807fcc:	880b883a 	mov	r5,r17
 8807fd0:	8009883a 	mov	r4,r16
 8807fd4:	180f883a 	mov	r7,r3
 8807fd8:	100d883a 	mov	r6,r2
 8807fdc:	8803ed40 	call	8803ed4 <__nedf2>
 8807fe0:	103ce126 	beq	r2,zero,8807368 <_dtoa_r+0x230>
 8807fe4:	d9800d17 	ldw	r6,52(sp)
 8807fe8:	31bfffc4 	addi	r6,r6,-1
 8807fec:	d9800d15 	stw	r6,52(sp)
 8807ff0:	003cdd06 	br	8807368 <_dtoa_r+0x230>
 8807ff4:	d9000717 	ldw	r4,28(sp)
 8807ff8:	900b883a 	mov	r5,r18
 8807ffc:	880a4280 	call	880a428 <__mcmp>
 8808000:	103e8d0e 	bge	r2,zero,8807a38 <_dtoa_r+0x900>
 8808004:	d9400717 	ldw	r5,28(sp)
 8808008:	d9001617 	ldw	r4,88(sp)
 880800c:	01800284 	movi	r6,10
 8808010:	000f883a 	mov	r7,zero
 8808014:	880af800 	call	880af80 <__multadd>
 8808018:	d9800d17 	ldw	r6,52(sp)
 880801c:	d8800715 	stw	r2,28(sp)
 8808020:	31bfffc4 	addi	r6,r6,-1
 8808024:	d9800d15 	stw	r6,52(sp)
 8808028:	b001a71e 	bne	r22,zero,88086c8 <_dtoa_r+0x1590>
 880802c:	d8800e17 	ldw	r2,56(sp)
 8808030:	d8800f15 	stw	r2,60(sp)
 8808034:	003e8006 	br	8807a38 <_dtoa_r+0x900>
 8808038:	90800417 	ldw	r2,16(r18)
 880803c:	1085883a 	add	r2,r2,r2
 8808040:	1085883a 	add	r2,r2,r2
 8808044:	1485883a 	add	r2,r2,r18
 8808048:	11000417 	ldw	r4,16(r2)
 880804c:	880a2f40 	call	880a2f4 <__hi0bits>
 8808050:	00c00804 	movi	r3,32
 8808054:	1887c83a 	sub	r3,r3,r2
 8808058:	003e5a06 	br	88079c4 <_dtoa_r+0x88c>
 880805c:	d9400717 	ldw	r5,28(sp)
 8808060:	d9801017 	ldw	r6,64(sp)
 8808064:	d9001617 	ldw	r4,88(sp)
 8808068:	880b0800 	call	880b080 <__pow5mult>
 880806c:	d8800715 	stw	r2,28(sp)
 8808070:	003e4306 	br	8807980 <_dtoa_r+0x848>
 8808074:	d9800f17 	ldw	r6,60(sp)
 8808078:	d8800d17 	ldw	r2,52(sp)
 880807c:	d9800315 	stw	r6,12(sp)
 8808080:	d8800415 	stw	r2,16(sp)
 8808084:	d8c00b17 	ldw	r3,44(sp)
 8808088:	1805003a 	cmpeq	r2,r3,zero
 880808c:	1000e21e 	bne	r2,zero,8808418 <_dtoa_r+0x12e0>
 8808090:	d9000317 	ldw	r4,12(sp)
 8808094:	0005883a 	mov	r2,zero
 8808098:	00cff834 	movhi	r3,16352
 880809c:	200c90fa 	slli	r6,r4,3
 88080a0:	01022074 	movhi	r4,2177
 88080a4:	2106d804 	addi	r4,r4,7008
 88080a8:	180b883a 	mov	r5,r3
 88080ac:	310d883a 	add	r6,r6,r4
 88080b0:	327fff17 	ldw	r9,-4(r6)
 88080b4:	323ffe17 	ldw	r8,-8(r6)
 88080b8:	1009883a 	mov	r4,r2
 88080bc:	480f883a 	mov	r7,r9
 88080c0:	400d883a 	mov	r6,r8
 88080c4:	8803bf40 	call	8803bf4 <__divdf3>
 88080c8:	180b883a 	mov	r5,r3
 88080cc:	b00d883a 	mov	r6,r22
 88080d0:	b80f883a 	mov	r7,r23
 88080d4:	1009883a 	mov	r4,r2
 88080d8:	880373c0 	call	880373c <__subdf3>
 88080dc:	a80b883a 	mov	r5,r21
 88080e0:	a009883a 	mov	r4,r20
 88080e4:	d8c01915 	stw	r3,100(sp)
 88080e8:	d8801815 	stw	r2,96(sp)
 88080ec:	880cc140 	call	880cc14 <__fixdfsi>
 88080f0:	1009883a 	mov	r4,r2
 88080f4:	1027883a 	mov	r19,r2
 88080f8:	88040f40 	call	88040f4 <__floatsidf>
 88080fc:	a80b883a 	mov	r5,r21
 8808100:	a009883a 	mov	r4,r20
 8808104:	180f883a 	mov	r7,r3
 8808108:	100d883a 	mov	r6,r2
 880810c:	880373c0 	call	880373c <__subdf3>
 8808110:	d9801817 	ldw	r6,96(sp)
 8808114:	1823883a 	mov	r17,r3
 8808118:	d8801415 	stw	r2,80(sp)
 880811c:	302d883a 	mov	r22,r6
 8808120:	d9800517 	ldw	r6,20(sp)
 8808124:	9cc00c04 	addi	r19,r19,48
 8808128:	dc401515 	stw	r17,84(sp)
 880812c:	d8c01917 	ldw	r3,100(sp)
 8808130:	34c00005 	stb	r19,0(r6)
 8808134:	d8800517 	ldw	r2,20(sp)
 8808138:	d9401917 	ldw	r5,100(sp)
 880813c:	d9801417 	ldw	r6,80(sp)
 8808140:	b009883a 	mov	r4,r22
 8808144:	880f883a 	mov	r7,r17
 8808148:	182f883a 	mov	r23,r3
 880814c:	17000044 	addi	fp,r2,1
 8808150:	8803f5c0 	call	8803f5c <__gtdf2>
 8808154:	00804e16 	blt	zero,r2,8808290 <_dtoa_r+0x1158>
 8808158:	d9801417 	ldw	r6,80(sp)
 880815c:	0005883a 	mov	r2,zero
 8808160:	00cffc34 	movhi	r3,16368
 8808164:	180b883a 	mov	r5,r3
 8808168:	880f883a 	mov	r7,r17
 880816c:	1009883a 	mov	r4,r2
 8808170:	880373c0 	call	880373c <__subdf3>
 8808174:	d9401917 	ldw	r5,100(sp)
 8808178:	180f883a 	mov	r7,r3
 880817c:	b009883a 	mov	r4,r22
 8808180:	100d883a 	mov	r6,r2
 8808184:	8803f5c0 	call	8803f5c <__gtdf2>
 8808188:	00bda216 	blt	zero,r2,8807814 <_dtoa_r+0x6dc>
 880818c:	d8c00317 	ldw	r3,12(sp)
 8808190:	00800044 	movi	r2,1
 8808194:	10c01216 	blt	r2,r3,88081e0 <_dtoa_r+0x10a8>
 8808198:	003d4506 	br	88076b0 <_dtoa_r+0x578>
 880819c:	d9801417 	ldw	r6,80(sp)
 88081a0:	0005883a 	mov	r2,zero
 88081a4:	00cffc34 	movhi	r3,16368
 88081a8:	180b883a 	mov	r5,r3
 88081ac:	880f883a 	mov	r7,r17
 88081b0:	1009883a 	mov	r4,r2
 88081b4:	880373c0 	call	880373c <__subdf3>
 88081b8:	d9c01b17 	ldw	r7,108(sp)
 88081bc:	180b883a 	mov	r5,r3
 88081c0:	1009883a 	mov	r4,r2
 88081c4:	b00d883a 	mov	r6,r22
 88081c8:	8803fe40 	call	8803fe4 <__ltdf2>
 88081cc:	103d9116 	blt	r2,zero,8807814 <_dtoa_r+0x6dc>
 88081d0:	d9800517 	ldw	r6,20(sp)
 88081d4:	d9000317 	ldw	r4,12(sp)
 88081d8:	3105883a 	add	r2,r6,r4
 88081dc:	e0bd3426 	beq	fp,r2,88076b0 <_dtoa_r+0x578>
 88081e0:	04500934 	movhi	r17,16420
 88081e4:	0021883a 	mov	r16,zero
 88081e8:	b80b883a 	mov	r5,r23
 88081ec:	b009883a 	mov	r4,r22
 88081f0:	800d883a 	mov	r6,r16
 88081f4:	880f883a 	mov	r7,r17
 88081f8:	88038300 	call	8803830 <__muldf3>
 88081fc:	d9401517 	ldw	r5,84(sp)
 8808200:	d9001417 	ldw	r4,80(sp)
 8808204:	880f883a 	mov	r7,r17
 8808208:	000d883a 	mov	r6,zero
 880820c:	d8801a15 	stw	r2,104(sp)
 8808210:	d8c01b15 	stw	r3,108(sp)
 8808214:	88038300 	call	8803830 <__muldf3>
 8808218:	180b883a 	mov	r5,r3
 880821c:	1009883a 	mov	r4,r2
 8808220:	1823883a 	mov	r17,r3
 8808224:	1021883a 	mov	r16,r2
 8808228:	880cc140 	call	880cc14 <__fixdfsi>
 880822c:	1009883a 	mov	r4,r2
 8808230:	102b883a 	mov	r21,r2
 8808234:	88040f40 	call	88040f4 <__floatsidf>
 8808238:	880b883a 	mov	r5,r17
 880823c:	8009883a 	mov	r4,r16
 8808240:	180f883a 	mov	r7,r3
 8808244:	100d883a 	mov	r6,r2
 8808248:	880373c0 	call	880373c <__subdf3>
 880824c:	1021883a 	mov	r16,r2
 8808250:	d9001b17 	ldw	r4,108(sp)
 8808254:	1823883a 	mov	r17,r3
 8808258:	dc001415 	stw	r16,80(sp)
 880825c:	ad400c04 	addi	r21,r21,48
 8808260:	dc401515 	stw	r17,84(sp)
 8808264:	d8801a17 	ldw	r2,104(sp)
 8808268:	e5400005 	stb	r21,0(fp)
 880826c:	202f883a 	mov	r23,r4
 8808270:	d9c01b17 	ldw	r7,108(sp)
 8808274:	d9001417 	ldw	r4,80(sp)
 8808278:	880b883a 	mov	r5,r17
 880827c:	100d883a 	mov	r6,r2
 8808280:	102d883a 	mov	r22,r2
 8808284:	e7000044 	addi	fp,fp,1
 8808288:	8803fe40 	call	8803fe4 <__ltdf2>
 880828c:	103fc30e 	bge	r2,zero,880819c <_dtoa_r+0x1064>
 8808290:	d9000417 	ldw	r4,16(sp)
 8808294:	d9000d15 	stw	r4,52(sp)
 8808298:	003d7106 	br	8807860 <_dtoa_r+0x728>
 880829c:	d9801717 	ldw	r6,92(sp)
 88082a0:	00800084 	movi	r2,2
 88082a4:	11bde60e 	bge	r2,r6,8807a40 <_dtoa_r+0x908>
 88082a8:	203cfb1e 	bne	r4,zero,8807698 <_dtoa_r+0x560>
 88082ac:	d9001617 	ldw	r4,88(sp)
 88082b0:	900b883a 	mov	r5,r18
 88082b4:	01800144 	movi	r6,5
 88082b8:	000f883a 	mov	r7,zero
 88082bc:	880af800 	call	880af80 <__multadd>
 88082c0:	d9000717 	ldw	r4,28(sp)
 88082c4:	100b883a 	mov	r5,r2
 88082c8:	1025883a 	mov	r18,r2
 88082cc:	880a4280 	call	880a428 <__mcmp>
 88082d0:	00bcf10e 	bge	zero,r2,8807698 <_dtoa_r+0x560>
 88082d4:	d8c00d17 	ldw	r3,52(sp)
 88082d8:	d9000517 	ldw	r4,20(sp)
 88082dc:	d8000615 	stw	zero,24(sp)
 88082e0:	18c00044 	addi	r3,r3,1
 88082e4:	d8c00d15 	stw	r3,52(sp)
 88082e8:	00800c44 	movi	r2,49
 88082ec:	27000044 	addi	fp,r4,1
 88082f0:	20800005 	stb	r2,0(r4)
 88082f4:	003e8906 	br	8807d1c <_dtoa_r+0xbe4>
 88082f8:	d8c00517 	ldw	r3,20(sp)
 88082fc:	003bc206 	br	8807208 <_dtoa_r+0xd0>
 8808300:	01822074 	movhi	r6,2177
 8808304:	31870a04 	addi	r6,r6,7208
 8808308:	30c00917 	ldw	r3,36(r6)
 880830c:	30800817 	ldw	r2,32(r6)
 8808310:	d9001217 	ldw	r4,72(sp)
 8808314:	d9401317 	ldw	r5,76(sp)
 8808318:	180f883a 	mov	r7,r3
 880831c:	100d883a 	mov	r6,r2
 8808320:	8803bf40 	call	8803bf4 <__divdf3>
 8808324:	948003cc 	andi	r18,r18,15
 8808328:	058000c4 	movi	r22,3
 880832c:	1029883a 	mov	r20,r2
 8808330:	182b883a 	mov	r21,r3
 8808334:	003c8906 	br	880755c <_dtoa_r+0x424>
 8808338:	d9001017 	ldw	r4,64(sp)
 880833c:	d9800917 	ldw	r6,36(sp)
 8808340:	0025883a 	mov	r18,zero
 8808344:	1105c83a 	sub	r2,r2,r4
 8808348:	2089883a 	add	r4,r4,r2
 880834c:	308d883a 	add	r6,r6,r2
 8808350:	d9001015 	stw	r4,64(sp)
 8808354:	d9800915 	stw	r6,36(sp)
 8808358:	003e3206 	br	8807c24 <_dtoa_r+0xaec>
 880835c:	28800044 	addi	r2,r5,1
 8808360:	27000044 	addi	fp,r4,1
 8808364:	20800005 	stb	r2,0(r4)
 8808368:	003e6c06 	br	8807d1c <_dtoa_r+0xbe4>
 880836c:	d8800f17 	ldw	r2,60(sp)
 8808370:	00bce016 	blt	zero,r2,88076f4 <_dtoa_r+0x5bc>
 8808374:	d9800f17 	ldw	r6,60(sp)
 8808378:	303cc51e 	bne	r6,zero,8807690 <_dtoa_r+0x558>
 880837c:	0005883a 	mov	r2,zero
 8808380:	00d00534 	movhi	r3,16404
 8808384:	980b883a 	mov	r5,r19
 8808388:	180f883a 	mov	r7,r3
 880838c:	9009883a 	mov	r4,r18
 8808390:	100d883a 	mov	r6,r2
 8808394:	88038300 	call	8803830 <__muldf3>
 8808398:	180b883a 	mov	r5,r3
 880839c:	a80f883a 	mov	r7,r21
 88083a0:	1009883a 	mov	r4,r2
 88083a4:	a00d883a 	mov	r6,r20
 88083a8:	880cb8c0 	call	880cb8c <__gedf2>
 88083ac:	103cb80e 	bge	r2,zero,8807690 <_dtoa_r+0x558>
 88083b0:	0027883a 	mov	r19,zero
 88083b4:	0025883a 	mov	r18,zero
 88083b8:	003fc606 	br	88082d4 <_dtoa_r+0x119c>
 88083bc:	99400117 	ldw	r5,4(r19)
 88083c0:	d9001617 	ldw	r4,88(sp)
 88083c4:	880a84c0 	call	880a84c <_Balloc>
 88083c8:	99800417 	ldw	r6,16(r19)
 88083cc:	11000304 	addi	r4,r2,12
 88083d0:	99400304 	addi	r5,r19,12
 88083d4:	318d883a 	add	r6,r6,r6
 88083d8:	318d883a 	add	r6,r6,r6
 88083dc:	31800204 	addi	r6,r6,8
 88083e0:	1023883a 	mov	r17,r2
 88083e4:	880a0b40 	call	880a0b4 <memcpy>
 88083e8:	d9001617 	ldw	r4,88(sp)
 88083ec:	880b883a 	mov	r5,r17
 88083f0:	01800044 	movi	r6,1
 88083f4:	880ac100 	call	880ac10 <__lshift>
 88083f8:	100b883a 	mov	r5,r2
 88083fc:	003d9c06 	br	8807a70 <_dtoa_r+0x938>
 8808400:	00800e44 	movi	r2,57
 8808404:	b8807026 	beq	r23,r2,88085c8 <_dtoa_r+0x1490>
 8808408:	b8800044 	addi	r2,r23,1
 880840c:	b7000044 	addi	fp,r22,1
 8808410:	b0800005 	stb	r2,0(r22)
 8808414:	003e4106 	br	8807d1c <_dtoa_r+0xbe4>
 8808418:	d8800317 	ldw	r2,12(sp)
 880841c:	01822074 	movhi	r6,2177
 8808420:	3186d804 	addi	r6,r6,7008
 8808424:	b009883a 	mov	r4,r22
 8808428:	100e90fa 	slli	r7,r2,3
 880842c:	b80b883a 	mov	r5,r23
 8808430:	398f883a 	add	r7,r7,r6
 8808434:	38bffe17 	ldw	r2,-8(r7)
 8808438:	d9800517 	ldw	r6,20(sp)
 880843c:	38ffff17 	ldw	r3,-4(r7)
 8808440:	37000044 	addi	fp,r6,1
 8808444:	180f883a 	mov	r7,r3
 8808448:	100d883a 	mov	r6,r2
 880844c:	88038300 	call	8803830 <__muldf3>
 8808450:	a80b883a 	mov	r5,r21
 8808454:	a009883a 	mov	r4,r20
 8808458:	182f883a 	mov	r23,r3
 880845c:	102d883a 	mov	r22,r2
 8808460:	880cc140 	call	880cc14 <__fixdfsi>
 8808464:	1009883a 	mov	r4,r2
 8808468:	1027883a 	mov	r19,r2
 880846c:	88040f40 	call	88040f4 <__floatsidf>
 8808470:	a80b883a 	mov	r5,r21
 8808474:	a009883a 	mov	r4,r20
 8808478:	180f883a 	mov	r7,r3
 880847c:	100d883a 	mov	r6,r2
 8808480:	880373c0 	call	880373c <__subdf3>
 8808484:	180b883a 	mov	r5,r3
 8808488:	d8c00517 	ldw	r3,20(sp)
 880848c:	9cc00c04 	addi	r19,r19,48
 8808490:	1009883a 	mov	r4,r2
 8808494:	1cc00005 	stb	r19,0(r3)
 8808498:	2021883a 	mov	r16,r4
 880849c:	d9000317 	ldw	r4,12(sp)
 88084a0:	00800044 	movi	r2,1
 88084a4:	2823883a 	mov	r17,r5
 88084a8:	20802226 	beq	r4,r2,8808534 <_dtoa_r+0x13fc>
 88084ac:	1029883a 	mov	r20,r2
 88084b0:	0005883a 	mov	r2,zero
 88084b4:	00d00934 	movhi	r3,16420
 88084b8:	180f883a 	mov	r7,r3
 88084bc:	100d883a 	mov	r6,r2
 88084c0:	880b883a 	mov	r5,r17
 88084c4:	8009883a 	mov	r4,r16
 88084c8:	88038300 	call	8803830 <__muldf3>
 88084cc:	180b883a 	mov	r5,r3
 88084d0:	1009883a 	mov	r4,r2
 88084d4:	1823883a 	mov	r17,r3
 88084d8:	1021883a 	mov	r16,r2
 88084dc:	880cc140 	call	880cc14 <__fixdfsi>
 88084e0:	1009883a 	mov	r4,r2
 88084e4:	102b883a 	mov	r21,r2
 88084e8:	88040f40 	call	88040f4 <__floatsidf>
 88084ec:	880b883a 	mov	r5,r17
 88084f0:	8009883a 	mov	r4,r16
 88084f4:	180f883a 	mov	r7,r3
 88084f8:	100d883a 	mov	r6,r2
 88084fc:	880373c0 	call	880373c <__subdf3>
 8808500:	180b883a 	mov	r5,r3
 8808504:	d8c00517 	ldw	r3,20(sp)
 8808508:	1009883a 	mov	r4,r2
 880850c:	ad400c04 	addi	r21,r21,48
 8808510:	1d05883a 	add	r2,r3,r20
 8808514:	15400005 	stb	r21,0(r2)
 8808518:	2021883a 	mov	r16,r4
 880851c:	d9000317 	ldw	r4,12(sp)
 8808520:	a5000044 	addi	r20,r20,1
 8808524:	2823883a 	mov	r17,r5
 8808528:	a13fe11e 	bne	r20,r4,88084b0 <_dtoa_r+0x1378>
 880852c:	e505883a 	add	r2,fp,r20
 8808530:	173fffc4 	addi	fp,r2,-1
 8808534:	0025883a 	mov	r18,zero
 8808538:	04cff834 	movhi	r19,16352
 880853c:	b009883a 	mov	r4,r22
 8808540:	b80b883a 	mov	r5,r23
 8808544:	900d883a 	mov	r6,r18
 8808548:	980f883a 	mov	r7,r19
 880854c:	88037bc0 	call	88037bc <__adddf3>
 8808550:	180b883a 	mov	r5,r3
 8808554:	1009883a 	mov	r4,r2
 8808558:	800d883a 	mov	r6,r16
 880855c:	880f883a 	mov	r7,r17
 8808560:	8803fe40 	call	8803fe4 <__ltdf2>
 8808564:	103cab16 	blt	r2,zero,8807814 <_dtoa_r+0x6dc>
 8808568:	0009883a 	mov	r4,zero
 880856c:	980b883a 	mov	r5,r19
 8808570:	b80f883a 	mov	r7,r23
 8808574:	b00d883a 	mov	r6,r22
 8808578:	880373c0 	call	880373c <__subdf3>
 880857c:	180b883a 	mov	r5,r3
 8808580:	880f883a 	mov	r7,r17
 8808584:	1009883a 	mov	r4,r2
 8808588:	800d883a 	mov	r6,r16
 880858c:	8803f5c0 	call	8803f5c <__gtdf2>
 8808590:	00bc470e 	bge	zero,r2,88076b0 <_dtoa_r+0x578>
 8808594:	00c00c04 	movi	r3,48
 8808598:	e73fffc4 	addi	fp,fp,-1
 880859c:	e0800007 	ldb	r2,0(fp)
 88085a0:	10fffd26 	beq	r2,r3,8808598 <_dtoa_r+0x1460>
 88085a4:	d9800417 	ldw	r6,16(sp)
 88085a8:	e7000044 	addi	fp,fp,1
 88085ac:	d9800d15 	stw	r6,52(sp)
 88085b0:	003cab06 	br	8807860 <_dtoa_r+0x728>
 88085b4:	d8c00f17 	ldw	r3,60(sp)
 88085b8:	d9001117 	ldw	r4,68(sp)
 88085bc:	20e1c83a 	sub	r16,r4,r3
 88085c0:	0007883a 	mov	r3,zero
 88085c4:	003d9b06 	br	8807c34 <_dtoa_r+0xafc>
 88085c8:	00800e44 	movi	r2,57
 88085cc:	b0800005 	stb	r2,0(r22)
 88085d0:	b5800044 	addi	r22,r22,1
 88085d4:	003dc106 	br	8807cdc <_dtoa_r+0xba4>
 88085d8:	05800084 	movi	r22,2
 88085dc:	003bf706 	br	88075bc <_dtoa_r+0x484>
 88085e0:	d9000f17 	ldw	r4,60(sp)
 88085e4:	013c000e 	bge	zero,r4,88075e8 <_dtoa_r+0x4b0>
 88085e8:	d9800e17 	ldw	r6,56(sp)
 88085ec:	01bc300e 	bge	zero,r6,88076b0 <_dtoa_r+0x578>
 88085f0:	0005883a 	mov	r2,zero
 88085f4:	00d00934 	movhi	r3,16420
 88085f8:	a80b883a 	mov	r5,r21
 88085fc:	180f883a 	mov	r7,r3
 8808600:	a009883a 	mov	r4,r20
 8808604:	100d883a 	mov	r6,r2
 8808608:	88038300 	call	8803830 <__muldf3>
 880860c:	b1000044 	addi	r4,r22,1
 8808610:	1021883a 	mov	r16,r2
 8808614:	1823883a 	mov	r17,r3
 8808618:	88040f40 	call	88040f4 <__floatsidf>
 880861c:	880b883a 	mov	r5,r17
 8808620:	8009883a 	mov	r4,r16
 8808624:	180f883a 	mov	r7,r3
 8808628:	100d883a 	mov	r6,r2
 880862c:	88038300 	call	8803830 <__muldf3>
 8808630:	0011883a 	mov	r8,zero
 8808634:	02500734 	movhi	r9,16412
 8808638:	180b883a 	mov	r5,r3
 880863c:	480f883a 	mov	r7,r9
 8808640:	1009883a 	mov	r4,r2
 8808644:	400d883a 	mov	r6,r8
 8808648:	88037bc0 	call	88037bc <__adddf3>
 880864c:	102d883a 	mov	r22,r2
 8808650:	00bf3034 	movhi	r2,64704
 8808654:	10ef883a 	add	r23,r2,r3
 8808658:	d8800d17 	ldw	r2,52(sp)
 880865c:	d8c00e17 	ldw	r3,56(sp)
 8808660:	8029883a 	mov	r20,r16
 8808664:	10bfffc4 	addi	r2,r2,-1
 8808668:	882b883a 	mov	r21,r17
 880866c:	d8800415 	stw	r2,16(sp)
 8808670:	d8c00315 	stw	r3,12(sp)
 8808674:	003e8306 	br	8808084 <_dtoa_r+0xf4c>
 8808678:	d8800117 	ldw	r2,4(sp)
 880867c:	dc001117 	ldw	r16,68(sp)
 8808680:	dc801017 	ldw	r18,64(sp)
 8808684:	00c00d84 	movi	r3,54
 8808688:	1887c83a 	sub	r3,r3,r2
 880868c:	003d6906 	br	8807c34 <_dtoa_r+0xafc>
 8808690:	01800044 	movi	r6,1
 8808694:	3021883a 	mov	r16,r6
 8808698:	d9800f15 	stw	r6,60(sp)
 880869c:	d9802615 	stw	r6,152(sp)
 88086a0:	d9800e15 	stw	r6,56(sp)
 88086a4:	003b9306 	br	88074f4 <_dtoa_r+0x3bc>
 88086a8:	b021883a 	mov	r16,r22
 88086ac:	dd800f15 	stw	r22,60(sp)
 88086b0:	003b9006 	br	88074f4 <_dtoa_r+0x3bc>
 88086b4:	103e221e 	bne	r2,zero,8807f40 <_dtoa_r+0xe08>
 88086b8:	b880004c 	andi	r2,r23,1
 88086bc:	1005003a 	cmpeq	r2,r2,zero
 88086c0:	103e1f1e 	bne	r2,zero,8807f40 <_dtoa_r+0xe08>
 88086c4:	003e1b06 	br	8807f34 <_dtoa_r+0xdfc>
 88086c8:	d9001617 	ldw	r4,88(sp)
 88086cc:	980b883a 	mov	r5,r19
 88086d0:	01800284 	movi	r6,10
 88086d4:	000f883a 	mov	r7,zero
 88086d8:	880af800 	call	880af80 <__multadd>
 88086dc:	d8c00e17 	ldw	r3,56(sp)
 88086e0:	1027883a 	mov	r19,r2
 88086e4:	d8c00f15 	stw	r3,60(sp)
 88086e8:	003cd306 	br	8807a38 <_dtoa_r+0x900>

088086ec <_fflush_r>:
 88086ec:	defffb04 	addi	sp,sp,-20
 88086f0:	dcc00315 	stw	r19,12(sp)
 88086f4:	dc800215 	stw	r18,8(sp)
 88086f8:	dfc00415 	stw	ra,16(sp)
 88086fc:	dc400115 	stw	r17,4(sp)
 8808700:	dc000015 	stw	r16,0(sp)
 8808704:	2027883a 	mov	r19,r4
 8808708:	2825883a 	mov	r18,r5
 880870c:	20000226 	beq	r4,zero,8808718 <_fflush_r+0x2c>
 8808710:	20800e17 	ldw	r2,56(r4)
 8808714:	10005626 	beq	r2,zero,8808870 <_fflush_r+0x184>
 8808718:	9100030b 	ldhu	r4,12(r18)
 880871c:	20ffffcc 	andi	r3,r4,65535
 8808720:	18e0001c 	xori	r3,r3,32768
 8808724:	18e00004 	addi	r3,r3,-32768
 8808728:	1880020c 	andi	r2,r3,8
 880872c:	1000261e 	bne	r2,zero,88087c8 <_fflush_r+0xdc>
 8808730:	90c00117 	ldw	r3,4(r18)
 8808734:	20820014 	ori	r2,r4,2048
 8808738:	9080030d 	sth	r2,12(r18)
 880873c:	1009883a 	mov	r4,r2
 8808740:	00c0400e 	bge	zero,r3,8808844 <_fflush_r+0x158>
 8808744:	92000a17 	ldw	r8,40(r18)
 8808748:	40004026 	beq	r8,zero,880884c <_fflush_r+0x160>
 880874c:	2084000c 	andi	r2,r4,4096
 8808750:	10005326 	beq	r2,zero,88088a0 <_fflush_r+0x1b4>
 8808754:	94001417 	ldw	r16,80(r18)
 8808758:	9080030b 	ldhu	r2,12(r18)
 880875c:	1080010c 	andi	r2,r2,4
 8808760:	1000481e 	bne	r2,zero,8808884 <_fflush_r+0x198>
 8808764:	91400717 	ldw	r5,28(r18)
 8808768:	9809883a 	mov	r4,r19
 880876c:	800d883a 	mov	r6,r16
 8808770:	000f883a 	mov	r7,zero
 8808774:	403ee83a 	callr	r8
 8808778:	8080261e 	bne	r16,r2,8808814 <_fflush_r+0x128>
 880877c:	9080030b 	ldhu	r2,12(r18)
 8808780:	91000417 	ldw	r4,16(r18)
 8808784:	90000115 	stw	zero,4(r18)
 8808788:	10bdffcc 	andi	r2,r2,63487
 880878c:	10ffffcc 	andi	r3,r2,65535
 8808790:	18c4000c 	andi	r3,r3,4096
 8808794:	9080030d 	sth	r2,12(r18)
 8808798:	91000015 	stw	r4,0(r18)
 880879c:	18002b26 	beq	r3,zero,880884c <_fflush_r+0x160>
 88087a0:	0007883a 	mov	r3,zero
 88087a4:	1805883a 	mov	r2,r3
 88087a8:	94001415 	stw	r16,80(r18)
 88087ac:	dfc00417 	ldw	ra,16(sp)
 88087b0:	dcc00317 	ldw	r19,12(sp)
 88087b4:	dc800217 	ldw	r18,8(sp)
 88087b8:	dc400117 	ldw	r17,4(sp)
 88087bc:	dc000017 	ldw	r16,0(sp)
 88087c0:	dec00504 	addi	sp,sp,20
 88087c4:	f800283a 	ret
 88087c8:	94400417 	ldw	r17,16(r18)
 88087cc:	88001f26 	beq	r17,zero,880884c <_fflush_r+0x160>
 88087d0:	90800017 	ldw	r2,0(r18)
 88087d4:	18c000cc 	andi	r3,r3,3
 88087d8:	94400015 	stw	r17,0(r18)
 88087dc:	1461c83a 	sub	r16,r2,r17
 88087e0:	18002526 	beq	r3,zero,8808878 <_fflush_r+0x18c>
 88087e4:	0005883a 	mov	r2,zero
 88087e8:	90800215 	stw	r2,8(r18)
 88087ec:	0400170e 	bge	zero,r16,880884c <_fflush_r+0x160>
 88087f0:	90c00917 	ldw	r3,36(r18)
 88087f4:	91400717 	ldw	r5,28(r18)
 88087f8:	880d883a 	mov	r6,r17
 88087fc:	800f883a 	mov	r7,r16
 8808800:	9809883a 	mov	r4,r19
 8808804:	183ee83a 	callr	r3
 8808808:	88a3883a 	add	r17,r17,r2
 880880c:	80a1c83a 	sub	r16,r16,r2
 8808810:	00bff616 	blt	zero,r2,88087ec <_fflush_r+0x100>
 8808814:	9080030b 	ldhu	r2,12(r18)
 8808818:	00ffffc4 	movi	r3,-1
 880881c:	10801014 	ori	r2,r2,64
 8808820:	9080030d 	sth	r2,12(r18)
 8808824:	1805883a 	mov	r2,r3
 8808828:	dfc00417 	ldw	ra,16(sp)
 880882c:	dcc00317 	ldw	r19,12(sp)
 8808830:	dc800217 	ldw	r18,8(sp)
 8808834:	dc400117 	ldw	r17,4(sp)
 8808838:	dc000017 	ldw	r16,0(sp)
 880883c:	dec00504 	addi	sp,sp,20
 8808840:	f800283a 	ret
 8808844:	90800f17 	ldw	r2,60(r18)
 8808848:	00bfbe16 	blt	zero,r2,8808744 <_fflush_r+0x58>
 880884c:	0007883a 	mov	r3,zero
 8808850:	1805883a 	mov	r2,r3
 8808854:	dfc00417 	ldw	ra,16(sp)
 8808858:	dcc00317 	ldw	r19,12(sp)
 880885c:	dc800217 	ldw	r18,8(sp)
 8808860:	dc400117 	ldw	r17,4(sp)
 8808864:	dc000017 	ldw	r16,0(sp)
 8808868:	dec00504 	addi	sp,sp,20
 880886c:	f800283a 	ret
 8808870:	88089840 	call	8808984 <__sinit>
 8808874:	003fa806 	br	8808718 <_fflush_r+0x2c>
 8808878:	90800517 	ldw	r2,20(r18)
 880887c:	90800215 	stw	r2,8(r18)
 8808880:	003fda06 	br	88087ec <_fflush_r+0x100>
 8808884:	90800117 	ldw	r2,4(r18)
 8808888:	90c00c17 	ldw	r3,48(r18)
 880888c:	80a1c83a 	sub	r16,r16,r2
 8808890:	183fb426 	beq	r3,zero,8808764 <_fflush_r+0x78>
 8808894:	90800f17 	ldw	r2,60(r18)
 8808898:	80a1c83a 	sub	r16,r16,r2
 880889c:	003fb106 	br	8808764 <_fflush_r+0x78>
 88088a0:	91400717 	ldw	r5,28(r18)
 88088a4:	9809883a 	mov	r4,r19
 88088a8:	000d883a 	mov	r6,zero
 88088ac:	01c00044 	movi	r7,1
 88088b0:	403ee83a 	callr	r8
 88088b4:	1021883a 	mov	r16,r2
 88088b8:	00bfffc4 	movi	r2,-1
 88088bc:	80800226 	beq	r16,r2,88088c8 <_fflush_r+0x1dc>
 88088c0:	92000a17 	ldw	r8,40(r18)
 88088c4:	003fa406 	br	8808758 <_fflush_r+0x6c>
 88088c8:	98c00017 	ldw	r3,0(r19)
 88088cc:	00800744 	movi	r2,29
 88088d0:	18bfde26 	beq	r3,r2,880884c <_fflush_r+0x160>
 88088d4:	9080030b 	ldhu	r2,12(r18)
 88088d8:	8007883a 	mov	r3,r16
 88088dc:	10801014 	ori	r2,r2,64
 88088e0:	9080030d 	sth	r2,12(r18)
 88088e4:	003fcf06 	br	8808824 <_fflush_r+0x138>

088088e8 <fflush>:
 88088e8:	01422074 	movhi	r5,2177
 88088ec:	2961bb04 	addi	r5,r5,-30996
 88088f0:	2007883a 	mov	r3,r4
 88088f4:	20000526 	beq	r4,zero,880890c <fflush+0x24>
 88088f8:	00822074 	movhi	r2,2177
 88088fc:	108e5204 	addi	r2,r2,14664
 8808900:	11000017 	ldw	r4,0(r2)
 8808904:	180b883a 	mov	r5,r3
 8808908:	88086ec1 	jmpi	88086ec <_fflush_r>
 880890c:	00822074 	movhi	r2,2177
 8808910:	108e5304 	addi	r2,r2,14668
 8808914:	11000017 	ldw	r4,0(r2)
 8808918:	88094b81 	jmpi	88094b8 <_fwalk_reent>

0880891c <std>:
 880891c:	00822074 	movhi	r2,2177
 8808920:	10ae5904 	addi	r2,r2,-18076
 8808924:	20800b15 	stw	r2,44(r4)
 8808928:	00822074 	movhi	r2,2177
 880892c:	10ae9404 	addi	r2,r2,-17840
 8808930:	20800815 	stw	r2,32(r4)
 8808934:	00c22074 	movhi	r3,2177
 8808938:	18ee7504 	addi	r3,r3,-17964
 880893c:	00822074 	movhi	r2,2177
 8808940:	10ae5b04 	addi	r2,r2,-18068
 8808944:	2140030d 	sth	r5,12(r4)
 8808948:	2180038d 	sth	r6,14(r4)
 880894c:	20c00915 	stw	r3,36(r4)
 8808950:	20800a15 	stw	r2,40(r4)
 8808954:	20000015 	stw	zero,0(r4)
 8808958:	20000115 	stw	zero,4(r4)
 880895c:	20000215 	stw	zero,8(r4)
 8808960:	20000415 	stw	zero,16(r4)
 8808964:	20000515 	stw	zero,20(r4)
 8808968:	20000615 	stw	zero,24(r4)
 880896c:	21000715 	stw	r4,28(r4)
 8808970:	f800283a 	ret

08808974 <__sfp_lock_acquire>:
 8808974:	f800283a 	ret

08808978 <__sfp_lock_release>:
 8808978:	f800283a 	ret

0880897c <__sinit_lock_acquire>:
 880897c:	f800283a 	ret

08808980 <__sinit_lock_release>:
 8808980:	f800283a 	ret

08808984 <__sinit>:
 8808984:	20800e17 	ldw	r2,56(r4)
 8808988:	defffd04 	addi	sp,sp,-12
 880898c:	dc400115 	stw	r17,4(sp)
 8808990:	dc000015 	stw	r16,0(sp)
 8808994:	dfc00215 	stw	ra,8(sp)
 8808998:	04400044 	movi	r17,1
 880899c:	01400104 	movi	r5,4
 88089a0:	000d883a 	mov	r6,zero
 88089a4:	2021883a 	mov	r16,r4
 88089a8:	2200bb04 	addi	r8,r4,748
 88089ac:	200f883a 	mov	r7,r4
 88089b0:	10000526 	beq	r2,zero,88089c8 <__sinit+0x44>
 88089b4:	dfc00217 	ldw	ra,8(sp)
 88089b8:	dc400117 	ldw	r17,4(sp)
 88089bc:	dc000017 	ldw	r16,0(sp)
 88089c0:	dec00304 	addi	sp,sp,12
 88089c4:	f800283a 	ret
 88089c8:	21000117 	ldw	r4,4(r4)
 88089cc:	00822074 	movhi	r2,2177
 88089d0:	10a29a04 	addi	r2,r2,-30104
 88089d4:	00c000c4 	movi	r3,3
 88089d8:	80800f15 	stw	r2,60(r16)
 88089dc:	80c0b915 	stw	r3,740(r16)
 88089e0:	8200ba15 	stw	r8,744(r16)
 88089e4:	84400e15 	stw	r17,56(r16)
 88089e8:	8000b815 	stw	zero,736(r16)
 88089ec:	880891c0 	call	880891c <std>
 88089f0:	81000217 	ldw	r4,8(r16)
 88089f4:	880d883a 	mov	r6,r17
 88089f8:	800f883a 	mov	r7,r16
 88089fc:	01400284 	movi	r5,10
 8808a00:	880891c0 	call	880891c <std>
 8808a04:	81000317 	ldw	r4,12(r16)
 8808a08:	800f883a 	mov	r7,r16
 8808a0c:	01400484 	movi	r5,18
 8808a10:	01800084 	movi	r6,2
 8808a14:	dfc00217 	ldw	ra,8(sp)
 8808a18:	dc400117 	ldw	r17,4(sp)
 8808a1c:	dc000017 	ldw	r16,0(sp)
 8808a20:	dec00304 	addi	sp,sp,12
 8808a24:	880891c1 	jmpi	880891c <std>

08808a28 <__fp_lock>:
 8808a28:	0005883a 	mov	r2,zero
 8808a2c:	f800283a 	ret

08808a30 <__fp_unlock>:
 8808a30:	0005883a 	mov	r2,zero
 8808a34:	f800283a 	ret

08808a38 <__fp_unlock_all>:
 8808a38:	00822074 	movhi	r2,2177
 8808a3c:	108e5204 	addi	r2,r2,14664
 8808a40:	11000017 	ldw	r4,0(r2)
 8808a44:	01422074 	movhi	r5,2177
 8808a48:	29628c04 	addi	r5,r5,-30160
 8808a4c:	88095801 	jmpi	8809580 <_fwalk>

08808a50 <__fp_lock_all>:
 8808a50:	00822074 	movhi	r2,2177
 8808a54:	108e5204 	addi	r2,r2,14664
 8808a58:	11000017 	ldw	r4,0(r2)
 8808a5c:	01422074 	movhi	r5,2177
 8808a60:	29628a04 	addi	r5,r5,-30168
 8808a64:	88095801 	jmpi	8809580 <_fwalk>

08808a68 <_cleanup_r>:
 8808a68:	01422074 	movhi	r5,2177
 8808a6c:	296f8604 	addi	r5,r5,-16872
 8808a70:	88095801 	jmpi	8809580 <_fwalk>

08808a74 <_cleanup>:
 8808a74:	00822074 	movhi	r2,2177
 8808a78:	108e5304 	addi	r2,r2,14668
 8808a7c:	11000017 	ldw	r4,0(r2)
 8808a80:	8808a681 	jmpi	8808a68 <_cleanup_r>

08808a84 <__sfmoreglue>:
 8808a84:	defffc04 	addi	sp,sp,-16
 8808a88:	dc400115 	stw	r17,4(sp)
 8808a8c:	2c401724 	muli	r17,r5,92
 8808a90:	dc800215 	stw	r18,8(sp)
 8808a94:	2825883a 	mov	r18,r5
 8808a98:	89400304 	addi	r5,r17,12
 8808a9c:	dc000015 	stw	r16,0(sp)
 8808aa0:	dfc00315 	stw	ra,12(sp)
 8808aa4:	88098900 	call	8809890 <_malloc_r>
 8808aa8:	0021883a 	mov	r16,zero
 8808aac:	880d883a 	mov	r6,r17
 8808ab0:	000b883a 	mov	r5,zero
 8808ab4:	10000626 	beq	r2,zero,8808ad0 <__sfmoreglue+0x4c>
 8808ab8:	11000304 	addi	r4,r2,12
 8808abc:	14800115 	stw	r18,4(r2)
 8808ac0:	10000015 	stw	zero,0(r2)
 8808ac4:	11000215 	stw	r4,8(r2)
 8808ac8:	1021883a 	mov	r16,r2
 8808acc:	880a2340 	call	880a234 <memset>
 8808ad0:	8005883a 	mov	r2,r16
 8808ad4:	dfc00317 	ldw	ra,12(sp)
 8808ad8:	dc800217 	ldw	r18,8(sp)
 8808adc:	dc400117 	ldw	r17,4(sp)
 8808ae0:	dc000017 	ldw	r16,0(sp)
 8808ae4:	dec00404 	addi	sp,sp,16
 8808ae8:	f800283a 	ret

08808aec <__sfp>:
 8808aec:	defffd04 	addi	sp,sp,-12
 8808af0:	00822074 	movhi	r2,2177
 8808af4:	108e5304 	addi	r2,r2,14668
 8808af8:	dc000015 	stw	r16,0(sp)
 8808afc:	14000017 	ldw	r16,0(r2)
 8808b00:	dc400115 	stw	r17,4(sp)
 8808b04:	dfc00215 	stw	ra,8(sp)
 8808b08:	80800e17 	ldw	r2,56(r16)
 8808b0c:	2023883a 	mov	r17,r4
 8808b10:	10002626 	beq	r2,zero,8808bac <__sfp+0xc0>
 8808b14:	8400b804 	addi	r16,r16,736
 8808b18:	80800117 	ldw	r2,4(r16)
 8808b1c:	81000217 	ldw	r4,8(r16)
 8808b20:	10ffffc4 	addi	r3,r2,-1
 8808b24:	18000916 	blt	r3,zero,8808b4c <__sfp+0x60>
 8808b28:	2080030f 	ldh	r2,12(r4)
 8808b2c:	10000b26 	beq	r2,zero,8808b5c <__sfp+0x70>
 8808b30:	017fffc4 	movi	r5,-1
 8808b34:	00000206 	br	8808b40 <__sfp+0x54>
 8808b38:	2080030f 	ldh	r2,12(r4)
 8808b3c:	10000726 	beq	r2,zero,8808b5c <__sfp+0x70>
 8808b40:	18ffffc4 	addi	r3,r3,-1
 8808b44:	21001704 	addi	r4,r4,92
 8808b48:	197ffb1e 	bne	r3,r5,8808b38 <__sfp+0x4c>
 8808b4c:	80800017 	ldw	r2,0(r16)
 8808b50:	10001926 	beq	r2,zero,8808bb8 <__sfp+0xcc>
 8808b54:	1021883a 	mov	r16,r2
 8808b58:	003fef06 	br	8808b18 <__sfp+0x2c>
 8808b5c:	00bfffc4 	movi	r2,-1
 8808b60:	00c00044 	movi	r3,1
 8808b64:	2080038d 	sth	r2,14(r4)
 8808b68:	20c0030d 	sth	r3,12(r4)
 8808b6c:	20000015 	stw	zero,0(r4)
 8808b70:	20000215 	stw	zero,8(r4)
 8808b74:	20000115 	stw	zero,4(r4)
 8808b78:	20000415 	stw	zero,16(r4)
 8808b7c:	20000515 	stw	zero,20(r4)
 8808b80:	20000615 	stw	zero,24(r4)
 8808b84:	20000c15 	stw	zero,48(r4)
 8808b88:	20000d15 	stw	zero,52(r4)
 8808b8c:	20001115 	stw	zero,68(r4)
 8808b90:	20001215 	stw	zero,72(r4)
 8808b94:	2005883a 	mov	r2,r4
 8808b98:	dfc00217 	ldw	ra,8(sp)
 8808b9c:	dc400117 	ldw	r17,4(sp)
 8808ba0:	dc000017 	ldw	r16,0(sp)
 8808ba4:	dec00304 	addi	sp,sp,12
 8808ba8:	f800283a 	ret
 8808bac:	8009883a 	mov	r4,r16
 8808bb0:	88089840 	call	8808984 <__sinit>
 8808bb4:	003fd706 	br	8808b14 <__sfp+0x28>
 8808bb8:	8809883a 	mov	r4,r17
 8808bbc:	01400104 	movi	r5,4
 8808bc0:	8808a840 	call	8808a84 <__sfmoreglue>
 8808bc4:	80800015 	stw	r2,0(r16)
 8808bc8:	103fe21e 	bne	r2,zero,8808b54 <__sfp+0x68>
 8808bcc:	00800304 	movi	r2,12
 8808bd0:	0009883a 	mov	r4,zero
 8808bd4:	88800015 	stw	r2,0(r17)
 8808bd8:	003fee06 	br	8808b94 <__sfp+0xa8>

08808bdc <_malloc_trim_r>:
 8808bdc:	defffb04 	addi	sp,sp,-20
 8808be0:	dcc00315 	stw	r19,12(sp)
 8808be4:	04c22074 	movhi	r19,2177
 8808be8:	9cc87904 	addi	r19,r19,8676
 8808bec:	dc800215 	stw	r18,8(sp)
 8808bf0:	dc400115 	stw	r17,4(sp)
 8808bf4:	dc000015 	stw	r16,0(sp)
 8808bf8:	2823883a 	mov	r17,r5
 8808bfc:	2025883a 	mov	r18,r4
 8808c00:	dfc00415 	stw	ra,16(sp)
 8808c04:	880d5040 	call	880d504 <__malloc_lock>
 8808c08:	98800217 	ldw	r2,8(r19)
 8808c0c:	9009883a 	mov	r4,r18
 8808c10:	000b883a 	mov	r5,zero
 8808c14:	10c00117 	ldw	r3,4(r2)
 8808c18:	00bfff04 	movi	r2,-4
 8808c1c:	18a0703a 	and	r16,r3,r2
 8808c20:	8463c83a 	sub	r17,r16,r17
 8808c24:	8c43fbc4 	addi	r17,r17,4079
 8808c28:	8822d33a 	srli	r17,r17,12
 8808c2c:	0083ffc4 	movi	r2,4095
 8808c30:	8c7fffc4 	addi	r17,r17,-1
 8808c34:	8822933a 	slli	r17,r17,12
 8808c38:	1440060e 	bge	r2,r17,8808c54 <_malloc_trim_r+0x78>
 8808c3c:	880b8f40 	call	880b8f4 <_sbrk_r>
 8808c40:	98c00217 	ldw	r3,8(r19)
 8808c44:	9009883a 	mov	r4,r18
 8808c48:	044bc83a 	sub	r5,zero,r17
 8808c4c:	80c7883a 	add	r3,r16,r3
 8808c50:	10c00926 	beq	r2,r3,8808c78 <_malloc_trim_r+0x9c>
 8808c54:	880d5240 	call	880d524 <__malloc_unlock>
 8808c58:	0005883a 	mov	r2,zero
 8808c5c:	dfc00417 	ldw	ra,16(sp)
 8808c60:	dcc00317 	ldw	r19,12(sp)
 8808c64:	dc800217 	ldw	r18,8(sp)
 8808c68:	dc400117 	ldw	r17,4(sp)
 8808c6c:	dc000017 	ldw	r16,0(sp)
 8808c70:	dec00504 	addi	sp,sp,20
 8808c74:	f800283a 	ret
 8808c78:	9009883a 	mov	r4,r18
 8808c7c:	880b8f40 	call	880b8f4 <_sbrk_r>
 8808c80:	844dc83a 	sub	r6,r16,r17
 8808c84:	00ffffc4 	movi	r3,-1
 8808c88:	9009883a 	mov	r4,r18
 8808c8c:	000b883a 	mov	r5,zero
 8808c90:	01c22074 	movhi	r7,2177
 8808c94:	39d56b04 	addi	r7,r7,21932
 8808c98:	31800054 	ori	r6,r6,1
 8808c9c:	10c00926 	beq	r2,r3,8808cc4 <_malloc_trim_r+0xe8>
 8808ca0:	38800017 	ldw	r2,0(r7)
 8808ca4:	98c00217 	ldw	r3,8(r19)
 8808ca8:	9009883a 	mov	r4,r18
 8808cac:	1445c83a 	sub	r2,r2,r17
 8808cb0:	38800015 	stw	r2,0(r7)
 8808cb4:	19800115 	stw	r6,4(r3)
 8808cb8:	880d5240 	call	880d524 <__malloc_unlock>
 8808cbc:	00800044 	movi	r2,1
 8808cc0:	003fe606 	br	8808c5c <_malloc_trim_r+0x80>
 8808cc4:	880b8f40 	call	880b8f4 <_sbrk_r>
 8808cc8:	99800217 	ldw	r6,8(r19)
 8808ccc:	100f883a 	mov	r7,r2
 8808cd0:	9009883a 	mov	r4,r18
 8808cd4:	1187c83a 	sub	r3,r2,r6
 8808cd8:	008003c4 	movi	r2,15
 8808cdc:	19400054 	ori	r5,r3,1
 8808ce0:	10ffdc0e 	bge	r2,r3,8808c54 <_malloc_trim_r+0x78>
 8808ce4:	00822074 	movhi	r2,2177
 8808ce8:	108e5704 	addi	r2,r2,14684
 8808cec:	10c00017 	ldw	r3,0(r2)
 8808cf0:	00822074 	movhi	r2,2177
 8808cf4:	10956b04 	addi	r2,r2,21932
 8808cf8:	31400115 	stw	r5,4(r6)
 8808cfc:	38c7c83a 	sub	r3,r7,r3
 8808d00:	10c00015 	stw	r3,0(r2)
 8808d04:	003fd306 	br	8808c54 <_malloc_trim_r+0x78>

08808d08 <_free_r>:
 8808d08:	defffd04 	addi	sp,sp,-12
 8808d0c:	dc400115 	stw	r17,4(sp)
 8808d10:	dc000015 	stw	r16,0(sp)
 8808d14:	dfc00215 	stw	ra,8(sp)
 8808d18:	2821883a 	mov	r16,r5
 8808d1c:	2023883a 	mov	r17,r4
 8808d20:	28005a26 	beq	r5,zero,8808e8c <_free_r+0x184>
 8808d24:	880d5040 	call	880d504 <__malloc_lock>
 8808d28:	823ffe04 	addi	r8,r16,-8
 8808d2c:	41400117 	ldw	r5,4(r8)
 8808d30:	00bfff84 	movi	r2,-2
 8808d34:	02822074 	movhi	r10,2177
 8808d38:	52887904 	addi	r10,r10,8676
 8808d3c:	288e703a 	and	r7,r5,r2
 8808d40:	41cd883a 	add	r6,r8,r7
 8808d44:	30c00117 	ldw	r3,4(r6)
 8808d48:	51000217 	ldw	r4,8(r10)
 8808d4c:	00bfff04 	movi	r2,-4
 8808d50:	1892703a 	and	r9,r3,r2
 8808d54:	5017883a 	mov	r11,r10
 8808d58:	31006726 	beq	r6,r4,8808ef8 <_free_r+0x1f0>
 8808d5c:	2880004c 	andi	r2,r5,1
 8808d60:	1005003a 	cmpeq	r2,r2,zero
 8808d64:	32400115 	stw	r9,4(r6)
 8808d68:	10001a1e 	bne	r2,zero,8808dd4 <_free_r+0xcc>
 8808d6c:	000b883a 	mov	r5,zero
 8808d70:	3247883a 	add	r3,r6,r9
 8808d74:	18800117 	ldw	r2,4(r3)
 8808d78:	1080004c 	andi	r2,r2,1
 8808d7c:	1000231e 	bne	r2,zero,8808e0c <_free_r+0x104>
 8808d80:	280ac03a 	cmpne	r5,r5,zero
 8808d84:	3a4f883a 	add	r7,r7,r9
 8808d88:	2800451e 	bne	r5,zero,8808ea0 <_free_r+0x198>
 8808d8c:	31000217 	ldw	r4,8(r6)
 8808d90:	00822074 	movhi	r2,2177
 8808d94:	10887b04 	addi	r2,r2,8684
 8808d98:	20807b26 	beq	r4,r2,8808f88 <_free_r+0x280>
 8808d9c:	30800317 	ldw	r2,12(r6)
 8808da0:	3a07883a 	add	r3,r7,r8
 8808da4:	19c00015 	stw	r7,0(r3)
 8808da8:	11000215 	stw	r4,8(r2)
 8808dac:	20800315 	stw	r2,12(r4)
 8808db0:	38800054 	ori	r2,r7,1
 8808db4:	40800115 	stw	r2,4(r8)
 8808db8:	28001a26 	beq	r5,zero,8808e24 <_free_r+0x11c>
 8808dbc:	8809883a 	mov	r4,r17
 8808dc0:	dfc00217 	ldw	ra,8(sp)
 8808dc4:	dc400117 	ldw	r17,4(sp)
 8808dc8:	dc000017 	ldw	r16,0(sp)
 8808dcc:	dec00304 	addi	sp,sp,12
 8808dd0:	880d5241 	jmpi	880d524 <__malloc_unlock>
 8808dd4:	80bffe17 	ldw	r2,-8(r16)
 8808dd8:	50c00204 	addi	r3,r10,8
 8808ddc:	4091c83a 	sub	r8,r8,r2
 8808de0:	41000217 	ldw	r4,8(r8)
 8808de4:	388f883a 	add	r7,r7,r2
 8808de8:	20c06126 	beq	r4,r3,8808f70 <_free_r+0x268>
 8808dec:	40800317 	ldw	r2,12(r8)
 8808df0:	3247883a 	add	r3,r6,r9
 8808df4:	000b883a 	mov	r5,zero
 8808df8:	11000215 	stw	r4,8(r2)
 8808dfc:	20800315 	stw	r2,12(r4)
 8808e00:	18800117 	ldw	r2,4(r3)
 8808e04:	1080004c 	andi	r2,r2,1
 8808e08:	103fdd26 	beq	r2,zero,8808d80 <_free_r+0x78>
 8808e0c:	38800054 	ori	r2,r7,1
 8808e10:	3a07883a 	add	r3,r7,r8
 8808e14:	280ac03a 	cmpne	r5,r5,zero
 8808e18:	40800115 	stw	r2,4(r8)
 8808e1c:	19c00015 	stw	r7,0(r3)
 8808e20:	283fe61e 	bne	r5,zero,8808dbc <_free_r+0xb4>
 8808e24:	00807fc4 	movi	r2,511
 8808e28:	11c01f2e 	bgeu	r2,r7,8808ea8 <_free_r+0x1a0>
 8808e2c:	3806d27a 	srli	r3,r7,9
 8808e30:	1800481e 	bne	r3,zero,8808f54 <_free_r+0x24c>
 8808e34:	3804d0fa 	srli	r2,r7,3
 8808e38:	100690fa 	slli	r3,r2,3
 8808e3c:	1acd883a 	add	r6,r3,r11
 8808e40:	31400217 	ldw	r5,8(r6)
 8808e44:	31405926 	beq	r6,r5,8808fac <_free_r+0x2a4>
 8808e48:	28800117 	ldw	r2,4(r5)
 8808e4c:	00ffff04 	movi	r3,-4
 8808e50:	10c4703a 	and	r2,r2,r3
 8808e54:	3880022e 	bgeu	r7,r2,8808e60 <_free_r+0x158>
 8808e58:	29400217 	ldw	r5,8(r5)
 8808e5c:	317ffa1e 	bne	r6,r5,8808e48 <_free_r+0x140>
 8808e60:	29800317 	ldw	r6,12(r5)
 8808e64:	41800315 	stw	r6,12(r8)
 8808e68:	41400215 	stw	r5,8(r8)
 8808e6c:	8809883a 	mov	r4,r17
 8808e70:	2a000315 	stw	r8,12(r5)
 8808e74:	32000215 	stw	r8,8(r6)
 8808e78:	dfc00217 	ldw	ra,8(sp)
 8808e7c:	dc400117 	ldw	r17,4(sp)
 8808e80:	dc000017 	ldw	r16,0(sp)
 8808e84:	dec00304 	addi	sp,sp,12
 8808e88:	880d5241 	jmpi	880d524 <__malloc_unlock>
 8808e8c:	dfc00217 	ldw	ra,8(sp)
 8808e90:	dc400117 	ldw	r17,4(sp)
 8808e94:	dc000017 	ldw	r16,0(sp)
 8808e98:	dec00304 	addi	sp,sp,12
 8808e9c:	f800283a 	ret
 8808ea0:	31000217 	ldw	r4,8(r6)
 8808ea4:	003fbd06 	br	8808d9c <_free_r+0x94>
 8808ea8:	3806d0fa 	srli	r3,r7,3
 8808eac:	00800044 	movi	r2,1
 8808eb0:	51400117 	ldw	r5,4(r10)
 8808eb4:	180890fa 	slli	r4,r3,3
 8808eb8:	1807d0ba 	srai	r3,r3,2
 8808ebc:	22c9883a 	add	r4,r4,r11
 8808ec0:	21800217 	ldw	r6,8(r4)
 8808ec4:	10c4983a 	sll	r2,r2,r3
 8808ec8:	41000315 	stw	r4,12(r8)
 8808ecc:	41800215 	stw	r6,8(r8)
 8808ed0:	288ab03a 	or	r5,r5,r2
 8808ed4:	22000215 	stw	r8,8(r4)
 8808ed8:	8809883a 	mov	r4,r17
 8808edc:	51400115 	stw	r5,4(r10)
 8808ee0:	32000315 	stw	r8,12(r6)
 8808ee4:	dfc00217 	ldw	ra,8(sp)
 8808ee8:	dc400117 	ldw	r17,4(sp)
 8808eec:	dc000017 	ldw	r16,0(sp)
 8808ef0:	dec00304 	addi	sp,sp,12
 8808ef4:	880d5241 	jmpi	880d524 <__malloc_unlock>
 8808ef8:	2880004c 	andi	r2,r5,1
 8808efc:	3a4d883a 	add	r6,r7,r9
 8808f00:	1000071e 	bne	r2,zero,8808f20 <_free_r+0x218>
 8808f04:	80bffe17 	ldw	r2,-8(r16)
 8808f08:	4091c83a 	sub	r8,r8,r2
 8808f0c:	41000317 	ldw	r4,12(r8)
 8808f10:	40c00217 	ldw	r3,8(r8)
 8808f14:	308d883a 	add	r6,r6,r2
 8808f18:	20c00215 	stw	r3,8(r4)
 8808f1c:	19000315 	stw	r4,12(r3)
 8808f20:	00822074 	movhi	r2,2177
 8808f24:	108e5604 	addi	r2,r2,14680
 8808f28:	11000017 	ldw	r4,0(r2)
 8808f2c:	30c00054 	ori	r3,r6,1
 8808f30:	52000215 	stw	r8,8(r10)
 8808f34:	40c00115 	stw	r3,4(r8)
 8808f38:	313fa036 	bltu	r6,r4,8808dbc <_free_r+0xb4>
 8808f3c:	00822074 	movhi	r2,2177
 8808f40:	10956104 	addi	r2,r2,21892
 8808f44:	11400017 	ldw	r5,0(r2)
 8808f48:	8809883a 	mov	r4,r17
 8808f4c:	8808bdc0 	call	8808bdc <_malloc_trim_r>
 8808f50:	003f9a06 	br	8808dbc <_free_r+0xb4>
 8808f54:	00800104 	movi	r2,4
 8808f58:	10c0072e 	bgeu	r2,r3,8808f78 <_free_r+0x270>
 8808f5c:	00800504 	movi	r2,20
 8808f60:	10c01936 	bltu	r2,r3,8808fc8 <_free_r+0x2c0>
 8808f64:	188016c4 	addi	r2,r3,91
 8808f68:	100690fa 	slli	r3,r2,3
 8808f6c:	003fb306 	br	8808e3c <_free_r+0x134>
 8808f70:	01400044 	movi	r5,1
 8808f74:	003f7e06 	br	8808d70 <_free_r+0x68>
 8808f78:	3804d1ba 	srli	r2,r7,6
 8808f7c:	10800e04 	addi	r2,r2,56
 8808f80:	100690fa 	slli	r3,r2,3
 8808f84:	003fad06 	br	8808e3c <_free_r+0x134>
 8808f88:	22000315 	stw	r8,12(r4)
 8808f8c:	22000215 	stw	r8,8(r4)
 8808f90:	3a05883a 	add	r2,r7,r8
 8808f94:	38c00054 	ori	r3,r7,1
 8808f98:	11c00015 	stw	r7,0(r2)
 8808f9c:	41000215 	stw	r4,8(r8)
 8808fa0:	40c00115 	stw	r3,4(r8)
 8808fa4:	41000315 	stw	r4,12(r8)
 8808fa8:	003f8406 	br	8808dbc <_free_r+0xb4>
 8808fac:	1005d0ba 	srai	r2,r2,2
 8808fb0:	00c00044 	movi	r3,1
 8808fb4:	51000117 	ldw	r4,4(r10)
 8808fb8:	1886983a 	sll	r3,r3,r2
 8808fbc:	20c8b03a 	or	r4,r4,r3
 8808fc0:	51000115 	stw	r4,4(r10)
 8808fc4:	003fa706 	br	8808e64 <_free_r+0x15c>
 8808fc8:	00801504 	movi	r2,84
 8808fcc:	10c00436 	bltu	r2,r3,8808fe0 <_free_r+0x2d8>
 8808fd0:	3804d33a 	srli	r2,r7,12
 8808fd4:	10801b84 	addi	r2,r2,110
 8808fd8:	100690fa 	slli	r3,r2,3
 8808fdc:	003f9706 	br	8808e3c <_free_r+0x134>
 8808fe0:	00805504 	movi	r2,340
 8808fe4:	10c00436 	bltu	r2,r3,8808ff8 <_free_r+0x2f0>
 8808fe8:	3804d3fa 	srli	r2,r7,15
 8808fec:	10801dc4 	addi	r2,r2,119
 8808ff0:	100690fa 	slli	r3,r2,3
 8808ff4:	003f9106 	br	8808e3c <_free_r+0x134>
 8808ff8:	00815504 	movi	r2,1364
 8808ffc:	10c0032e 	bgeu	r2,r3,880900c <_free_r+0x304>
 8809000:	00801f84 	movi	r2,126
 8809004:	00c0fc04 	movi	r3,1008
 8809008:	003f8c06 	br	8808e3c <_free_r+0x134>
 880900c:	3804d4ba 	srli	r2,r7,18
 8809010:	10801f04 	addi	r2,r2,124
 8809014:	100690fa 	slli	r3,r2,3
 8809018:	003f8806 	br	8808e3c <_free_r+0x134>

0880901c <__sfvwrite_r>:
 880901c:	30800217 	ldw	r2,8(r6)
 8809020:	defff504 	addi	sp,sp,-44
 8809024:	df000915 	stw	fp,36(sp)
 8809028:	dd800715 	stw	r22,28(sp)
 880902c:	dc800315 	stw	r18,12(sp)
 8809030:	dfc00a15 	stw	ra,40(sp)
 8809034:	ddc00815 	stw	r23,32(sp)
 8809038:	dd400615 	stw	r21,24(sp)
 880903c:	dd000515 	stw	r20,20(sp)
 8809040:	dcc00415 	stw	r19,16(sp)
 8809044:	dc400215 	stw	r17,8(sp)
 8809048:	dc000115 	stw	r16,4(sp)
 880904c:	302d883a 	mov	r22,r6
 8809050:	2039883a 	mov	fp,r4
 8809054:	2825883a 	mov	r18,r5
 8809058:	10001c26 	beq	r2,zero,88090cc <__sfvwrite_r+0xb0>
 880905c:	29c0030b 	ldhu	r7,12(r5)
 8809060:	3880020c 	andi	r2,r7,8
 8809064:	10002726 	beq	r2,zero,8809104 <__sfvwrite_r+0xe8>
 8809068:	28800417 	ldw	r2,16(r5)
 880906c:	10002526 	beq	r2,zero,8809104 <__sfvwrite_r+0xe8>
 8809070:	3880008c 	andi	r2,r7,2
 8809074:	b5400017 	ldw	r21,0(r22)
 8809078:	10002826 	beq	r2,zero,880911c <__sfvwrite_r+0x100>
 880907c:	0021883a 	mov	r16,zero
 8809080:	0023883a 	mov	r17,zero
 8809084:	880d883a 	mov	r6,r17
 8809088:	e009883a 	mov	r4,fp
 880908c:	00810004 	movi	r2,1024
 8809090:	80006e26 	beq	r16,zero,880924c <__sfvwrite_r+0x230>
 8809094:	800f883a 	mov	r7,r16
 8809098:	91400717 	ldw	r5,28(r18)
 880909c:	1400012e 	bgeu	r2,r16,88090a4 <__sfvwrite_r+0x88>
 88090a0:	100f883a 	mov	r7,r2
 88090a4:	90c00917 	ldw	r3,36(r18)
 88090a8:	183ee83a 	callr	r3
 88090ac:	1007883a 	mov	r3,r2
 88090b0:	80a1c83a 	sub	r16,r16,r2
 88090b4:	88a3883a 	add	r17,r17,r2
 88090b8:	00806d0e 	bge	zero,r2,8809270 <__sfvwrite_r+0x254>
 88090bc:	b0800217 	ldw	r2,8(r22)
 88090c0:	10c5c83a 	sub	r2,r2,r3
 88090c4:	b0800215 	stw	r2,8(r22)
 88090c8:	103fee1e 	bne	r2,zero,8809084 <__sfvwrite_r+0x68>
 88090cc:	0009883a 	mov	r4,zero
 88090d0:	2005883a 	mov	r2,r4
 88090d4:	dfc00a17 	ldw	ra,40(sp)
 88090d8:	df000917 	ldw	fp,36(sp)
 88090dc:	ddc00817 	ldw	r23,32(sp)
 88090e0:	dd800717 	ldw	r22,28(sp)
 88090e4:	dd400617 	ldw	r21,24(sp)
 88090e8:	dd000517 	ldw	r20,20(sp)
 88090ec:	dcc00417 	ldw	r19,16(sp)
 88090f0:	dc800317 	ldw	r18,12(sp)
 88090f4:	dc400217 	ldw	r17,8(sp)
 88090f8:	dc000117 	ldw	r16,4(sp)
 88090fc:	dec00b04 	addi	sp,sp,44
 8809100:	f800283a 	ret
 8809104:	8806de40 	call	8806de4 <__swsetup_r>
 8809108:	1000e41e 	bne	r2,zero,880949c <__sfvwrite_r+0x480>
 880910c:	91c0030b 	ldhu	r7,12(r18)
 8809110:	b5400017 	ldw	r21,0(r22)
 8809114:	3880008c 	andi	r2,r7,2
 8809118:	103fd81e 	bne	r2,zero,880907c <__sfvwrite_r+0x60>
 880911c:	3880004c 	andi	r2,r7,1
 8809120:	1005003a 	cmpeq	r2,r2,zero
 8809124:	10005726 	beq	r2,zero,8809284 <__sfvwrite_r+0x268>
 8809128:	0029883a 	mov	r20,zero
 880912c:	002f883a 	mov	r23,zero
 8809130:	a0004226 	beq	r20,zero,880923c <__sfvwrite_r+0x220>
 8809134:	3880800c 	andi	r2,r7,512
 8809138:	94000217 	ldw	r16,8(r18)
 880913c:	10008b26 	beq	r2,zero,880936c <__sfvwrite_r+0x350>
 8809140:	800d883a 	mov	r6,r16
 8809144:	a400a536 	bltu	r20,r16,88093dc <__sfvwrite_r+0x3c0>
 8809148:	3881200c 	andi	r2,r7,1152
 880914c:	10002726 	beq	r2,zero,88091ec <__sfvwrite_r+0x1d0>
 8809150:	90800517 	ldw	r2,20(r18)
 8809154:	92000417 	ldw	r8,16(r18)
 8809158:	91400017 	ldw	r5,0(r18)
 880915c:	1087883a 	add	r3,r2,r2
 8809160:	1887883a 	add	r3,r3,r2
 8809164:	1808d7fa 	srli	r4,r3,31
 8809168:	2a21c83a 	sub	r16,r5,r8
 880916c:	80800044 	addi	r2,r16,1
 8809170:	20c9883a 	add	r4,r4,r3
 8809174:	2027d07a 	srai	r19,r4,1
 8809178:	a085883a 	add	r2,r20,r2
 880917c:	980d883a 	mov	r6,r19
 8809180:	9880022e 	bgeu	r19,r2,880918c <__sfvwrite_r+0x170>
 8809184:	1027883a 	mov	r19,r2
 8809188:	100d883a 	mov	r6,r2
 880918c:	3881000c 	andi	r2,r7,1024
 8809190:	1000b826 	beq	r2,zero,8809474 <__sfvwrite_r+0x458>
 8809194:	300b883a 	mov	r5,r6
 8809198:	e009883a 	mov	r4,fp
 880919c:	88098900 	call	8809890 <_malloc_r>
 88091a0:	10003126 	beq	r2,zero,8809268 <__sfvwrite_r+0x24c>
 88091a4:	91400417 	ldw	r5,16(r18)
 88091a8:	1009883a 	mov	r4,r2
 88091ac:	800d883a 	mov	r6,r16
 88091b0:	1023883a 	mov	r17,r2
 88091b4:	880a0b40 	call	880a0b4 <memcpy>
 88091b8:	90c0030b 	ldhu	r3,12(r18)
 88091bc:	00beffc4 	movi	r2,-1025
 88091c0:	1886703a 	and	r3,r3,r2
 88091c4:	18c02014 	ori	r3,r3,128
 88091c8:	90c0030d 	sth	r3,12(r18)
 88091cc:	9c07c83a 	sub	r3,r19,r16
 88091d0:	8c05883a 	add	r2,r17,r16
 88091d4:	a00d883a 	mov	r6,r20
 88091d8:	a021883a 	mov	r16,r20
 88091dc:	90800015 	stw	r2,0(r18)
 88091e0:	90c00215 	stw	r3,8(r18)
 88091e4:	94400415 	stw	r17,16(r18)
 88091e8:	94c00515 	stw	r19,20(r18)
 88091ec:	91000017 	ldw	r4,0(r18)
 88091f0:	b80b883a 	mov	r5,r23
 88091f4:	a023883a 	mov	r17,r20
 88091f8:	880a1540 	call	880a154 <memmove>
 88091fc:	90c00217 	ldw	r3,8(r18)
 8809200:	90800017 	ldw	r2,0(r18)
 8809204:	a027883a 	mov	r19,r20
 8809208:	1c07c83a 	sub	r3,r3,r16
 880920c:	1405883a 	add	r2,r2,r16
 8809210:	90c00215 	stw	r3,8(r18)
 8809214:	a021883a 	mov	r16,r20
 8809218:	90800015 	stw	r2,0(r18)
 880921c:	b0800217 	ldw	r2,8(r22)
 8809220:	1405c83a 	sub	r2,r2,r16
 8809224:	b0800215 	stw	r2,8(r22)
 8809228:	103fa826 	beq	r2,zero,88090cc <__sfvwrite_r+0xb0>
 880922c:	a469c83a 	sub	r20,r20,r17
 8809230:	91c0030b 	ldhu	r7,12(r18)
 8809234:	bcef883a 	add	r23,r23,r19
 8809238:	a03fbe1e 	bne	r20,zero,8809134 <__sfvwrite_r+0x118>
 880923c:	adc00017 	ldw	r23,0(r21)
 8809240:	ad000117 	ldw	r20,4(r21)
 8809244:	ad400204 	addi	r21,r21,8
 8809248:	003fb906 	br	8809130 <__sfvwrite_r+0x114>
 880924c:	ac400017 	ldw	r17,0(r21)
 8809250:	ac000117 	ldw	r16,4(r21)
 8809254:	ad400204 	addi	r21,r21,8
 8809258:	003f8a06 	br	8809084 <__sfvwrite_r+0x68>
 880925c:	91400417 	ldw	r5,16(r18)
 8809260:	e009883a 	mov	r4,fp
 8809264:	8808d080 	call	8808d08 <_free_r>
 8809268:	00800304 	movi	r2,12
 880926c:	e0800015 	stw	r2,0(fp)
 8809270:	9080030b 	ldhu	r2,12(r18)
 8809274:	013fffc4 	movi	r4,-1
 8809278:	10801014 	ori	r2,r2,64
 880927c:	9080030d 	sth	r2,12(r18)
 8809280:	003f9306 	br	88090d0 <__sfvwrite_r+0xb4>
 8809284:	0027883a 	mov	r19,zero
 8809288:	002f883a 	mov	r23,zero
 880928c:	d8000015 	stw	zero,0(sp)
 8809290:	0029883a 	mov	r20,zero
 8809294:	98001e26 	beq	r19,zero,8809310 <__sfvwrite_r+0x2f4>
 8809298:	d8c00017 	ldw	r3,0(sp)
 880929c:	1804c03a 	cmpne	r2,r3,zero
 88092a0:	10005e26 	beq	r2,zero,880941c <__sfvwrite_r+0x400>
 88092a4:	9821883a 	mov	r16,r19
 88092a8:	a4c0012e 	bgeu	r20,r19,88092b0 <__sfvwrite_r+0x294>
 88092ac:	a021883a 	mov	r16,r20
 88092b0:	91000017 	ldw	r4,0(r18)
 88092b4:	90800417 	ldw	r2,16(r18)
 88092b8:	91800217 	ldw	r6,8(r18)
 88092bc:	91c00517 	ldw	r7,20(r18)
 88092c0:	1100022e 	bgeu	r2,r4,88092cc <__sfvwrite_r+0x2b0>
 88092c4:	31e3883a 	add	r17,r6,r7
 88092c8:	8c001616 	blt	r17,r16,8809324 <__sfvwrite_r+0x308>
 88092cc:	81c03816 	blt	r16,r7,88093b0 <__sfvwrite_r+0x394>
 88092d0:	90c00917 	ldw	r3,36(r18)
 88092d4:	91400717 	ldw	r5,28(r18)
 88092d8:	e009883a 	mov	r4,fp
 88092dc:	b80d883a 	mov	r6,r23
 88092e0:	183ee83a 	callr	r3
 88092e4:	1023883a 	mov	r17,r2
 88092e8:	00bfe10e 	bge	zero,r2,8809270 <__sfvwrite_r+0x254>
 88092ec:	a469c83a 	sub	r20,r20,r17
 88092f0:	a0001826 	beq	r20,zero,8809354 <__sfvwrite_r+0x338>
 88092f4:	b0800217 	ldw	r2,8(r22)
 88092f8:	1445c83a 	sub	r2,r2,r17
 88092fc:	b0800215 	stw	r2,8(r22)
 8809300:	103f7226 	beq	r2,zero,88090cc <__sfvwrite_r+0xb0>
 8809304:	9c67c83a 	sub	r19,r19,r17
 8809308:	bc6f883a 	add	r23,r23,r17
 880930c:	983fe21e 	bne	r19,zero,8809298 <__sfvwrite_r+0x27c>
 8809310:	adc00017 	ldw	r23,0(r21)
 8809314:	acc00117 	ldw	r19,4(r21)
 8809318:	ad400204 	addi	r21,r21,8
 880931c:	d8000015 	stw	zero,0(sp)
 8809320:	003fdc06 	br	8809294 <__sfvwrite_r+0x278>
 8809324:	b80b883a 	mov	r5,r23
 8809328:	880d883a 	mov	r6,r17
 880932c:	880a1540 	call	880a154 <memmove>
 8809330:	90c00017 	ldw	r3,0(r18)
 8809334:	e009883a 	mov	r4,fp
 8809338:	900b883a 	mov	r5,r18
 880933c:	1c47883a 	add	r3,r3,r17
 8809340:	90c00015 	stw	r3,0(r18)
 8809344:	88086ec0 	call	88086ec <_fflush_r>
 8809348:	103fc91e 	bne	r2,zero,8809270 <__sfvwrite_r+0x254>
 880934c:	a469c83a 	sub	r20,r20,r17
 8809350:	a03fe81e 	bne	r20,zero,88092f4 <__sfvwrite_r+0x2d8>
 8809354:	e009883a 	mov	r4,fp
 8809358:	900b883a 	mov	r5,r18
 880935c:	88086ec0 	call	88086ec <_fflush_r>
 8809360:	103fc31e 	bne	r2,zero,8809270 <__sfvwrite_r+0x254>
 8809364:	d8000015 	stw	zero,0(sp)
 8809368:	003fe206 	br	88092f4 <__sfvwrite_r+0x2d8>
 880936c:	91000017 	ldw	r4,0(r18)
 8809370:	90800417 	ldw	r2,16(r18)
 8809374:	1100022e 	bgeu	r2,r4,8809380 <__sfvwrite_r+0x364>
 8809378:	8023883a 	mov	r17,r16
 880937c:	85003136 	bltu	r16,r20,8809444 <__sfvwrite_r+0x428>
 8809380:	91c00517 	ldw	r7,20(r18)
 8809384:	a1c01836 	bltu	r20,r7,88093e8 <__sfvwrite_r+0x3cc>
 8809388:	90c00917 	ldw	r3,36(r18)
 880938c:	91400717 	ldw	r5,28(r18)
 8809390:	e009883a 	mov	r4,fp
 8809394:	b80d883a 	mov	r6,r23
 8809398:	183ee83a 	callr	r3
 880939c:	1021883a 	mov	r16,r2
 88093a0:	00bfb30e 	bge	zero,r2,8809270 <__sfvwrite_r+0x254>
 88093a4:	1023883a 	mov	r17,r2
 88093a8:	1027883a 	mov	r19,r2
 88093ac:	003f9b06 	br	880921c <__sfvwrite_r+0x200>
 88093b0:	b80b883a 	mov	r5,r23
 88093b4:	800d883a 	mov	r6,r16
 88093b8:	880a1540 	call	880a154 <memmove>
 88093bc:	90c00217 	ldw	r3,8(r18)
 88093c0:	90800017 	ldw	r2,0(r18)
 88093c4:	8023883a 	mov	r17,r16
 88093c8:	1c07c83a 	sub	r3,r3,r16
 88093cc:	1405883a 	add	r2,r2,r16
 88093d0:	90c00215 	stw	r3,8(r18)
 88093d4:	90800015 	stw	r2,0(r18)
 88093d8:	003fc406 	br	88092ec <__sfvwrite_r+0x2d0>
 88093dc:	a00d883a 	mov	r6,r20
 88093e0:	a021883a 	mov	r16,r20
 88093e4:	003f8106 	br	88091ec <__sfvwrite_r+0x1d0>
 88093e8:	b80b883a 	mov	r5,r23
 88093ec:	a00d883a 	mov	r6,r20
 88093f0:	880a1540 	call	880a154 <memmove>
 88093f4:	90c00217 	ldw	r3,8(r18)
 88093f8:	90800017 	ldw	r2,0(r18)
 88093fc:	a021883a 	mov	r16,r20
 8809400:	1d07c83a 	sub	r3,r3,r20
 8809404:	1505883a 	add	r2,r2,r20
 8809408:	a023883a 	mov	r17,r20
 880940c:	a027883a 	mov	r19,r20
 8809410:	90c00215 	stw	r3,8(r18)
 8809414:	90800015 	stw	r2,0(r18)
 8809418:	003f8006 	br	880921c <__sfvwrite_r+0x200>
 880941c:	b809883a 	mov	r4,r23
 8809420:	01400284 	movi	r5,10
 8809424:	980d883a 	mov	r6,r19
 8809428:	8809fd00 	call	8809fd0 <memchr>
 880942c:	10001726 	beq	r2,zero,880948c <__sfvwrite_r+0x470>
 8809430:	15c5c83a 	sub	r2,r2,r23
 8809434:	15000044 	addi	r20,r2,1
 8809438:	00800044 	movi	r2,1
 880943c:	d8800015 	stw	r2,0(sp)
 8809440:	003f9806 	br	88092a4 <__sfvwrite_r+0x288>
 8809444:	b80b883a 	mov	r5,r23
 8809448:	800d883a 	mov	r6,r16
 880944c:	880a1540 	call	880a154 <memmove>
 8809450:	90c00017 	ldw	r3,0(r18)
 8809454:	e009883a 	mov	r4,fp
 8809458:	900b883a 	mov	r5,r18
 880945c:	1c07883a 	add	r3,r3,r16
 8809460:	90c00015 	stw	r3,0(r18)
 8809464:	8027883a 	mov	r19,r16
 8809468:	88086ec0 	call	88086ec <_fflush_r>
 880946c:	103f6b26 	beq	r2,zero,880921c <__sfvwrite_r+0x200>
 8809470:	003f7f06 	br	8809270 <__sfvwrite_r+0x254>
 8809474:	400b883a 	mov	r5,r8
 8809478:	e009883a 	mov	r4,fp
 880947c:	880b2c00 	call	880b2c0 <_realloc_r>
 8809480:	103f7626 	beq	r2,zero,880925c <__sfvwrite_r+0x240>
 8809484:	1023883a 	mov	r17,r2
 8809488:	003f5006 	br	88091cc <__sfvwrite_r+0x1b0>
 880948c:	00c00044 	movi	r3,1
 8809490:	9d000044 	addi	r20,r19,1
 8809494:	d8c00015 	stw	r3,0(sp)
 8809498:	003f8206 	br	88092a4 <__sfvwrite_r+0x288>
 880949c:	9080030b 	ldhu	r2,12(r18)
 88094a0:	00c00244 	movi	r3,9
 88094a4:	013fffc4 	movi	r4,-1
 88094a8:	10801014 	ori	r2,r2,64
 88094ac:	9080030d 	sth	r2,12(r18)
 88094b0:	e0c00015 	stw	r3,0(fp)
 88094b4:	003f0606 	br	88090d0 <__sfvwrite_r+0xb4>

088094b8 <_fwalk_reent>:
 88094b8:	defff704 	addi	sp,sp,-36
 88094bc:	dcc00315 	stw	r19,12(sp)
 88094c0:	24c0b804 	addi	r19,r4,736
 88094c4:	dd800615 	stw	r22,24(sp)
 88094c8:	dd400515 	stw	r21,20(sp)
 88094cc:	dfc00815 	stw	ra,32(sp)
 88094d0:	ddc00715 	stw	r23,28(sp)
 88094d4:	dd000415 	stw	r20,16(sp)
 88094d8:	dc800215 	stw	r18,8(sp)
 88094dc:	dc400115 	stw	r17,4(sp)
 88094e0:	dc000015 	stw	r16,0(sp)
 88094e4:	202b883a 	mov	r21,r4
 88094e8:	282d883a 	mov	r22,r5
 88094ec:	88089740 	call	8808974 <__sfp_lock_acquire>
 88094f0:	98002126 	beq	r19,zero,8809578 <_fwalk_reent+0xc0>
 88094f4:	002f883a 	mov	r23,zero
 88094f8:	9c800117 	ldw	r18,4(r19)
 88094fc:	9c000217 	ldw	r16,8(r19)
 8809500:	90bfffc4 	addi	r2,r18,-1
 8809504:	10000d16 	blt	r2,zero,880953c <_fwalk_reent+0x84>
 8809508:	0023883a 	mov	r17,zero
 880950c:	053fffc4 	movi	r20,-1
 8809510:	8080030f 	ldh	r2,12(r16)
 8809514:	8c400044 	addi	r17,r17,1
 8809518:	10000626 	beq	r2,zero,8809534 <_fwalk_reent+0x7c>
 880951c:	8080038f 	ldh	r2,14(r16)
 8809520:	800b883a 	mov	r5,r16
 8809524:	a809883a 	mov	r4,r21
 8809528:	15000226 	beq	r2,r20,8809534 <_fwalk_reent+0x7c>
 880952c:	b03ee83a 	callr	r22
 8809530:	b8aeb03a 	or	r23,r23,r2
 8809534:	84001704 	addi	r16,r16,92
 8809538:	947ff51e 	bne	r18,r17,8809510 <_fwalk_reent+0x58>
 880953c:	9cc00017 	ldw	r19,0(r19)
 8809540:	983fed1e 	bne	r19,zero,88094f8 <_fwalk_reent+0x40>
 8809544:	88089780 	call	8808978 <__sfp_lock_release>
 8809548:	b805883a 	mov	r2,r23
 880954c:	dfc00817 	ldw	ra,32(sp)
 8809550:	ddc00717 	ldw	r23,28(sp)
 8809554:	dd800617 	ldw	r22,24(sp)
 8809558:	dd400517 	ldw	r21,20(sp)
 880955c:	dd000417 	ldw	r20,16(sp)
 8809560:	dcc00317 	ldw	r19,12(sp)
 8809564:	dc800217 	ldw	r18,8(sp)
 8809568:	dc400117 	ldw	r17,4(sp)
 880956c:	dc000017 	ldw	r16,0(sp)
 8809570:	dec00904 	addi	sp,sp,36
 8809574:	f800283a 	ret
 8809578:	002f883a 	mov	r23,zero
 880957c:	003ff106 	br	8809544 <_fwalk_reent+0x8c>

08809580 <_fwalk>:
 8809580:	defff804 	addi	sp,sp,-32
 8809584:	dcc00315 	stw	r19,12(sp)
 8809588:	24c0b804 	addi	r19,r4,736
 880958c:	dd400515 	stw	r21,20(sp)
 8809590:	dfc00715 	stw	ra,28(sp)
 8809594:	dd800615 	stw	r22,24(sp)
 8809598:	dd000415 	stw	r20,16(sp)
 880959c:	dc800215 	stw	r18,8(sp)
 88095a0:	dc400115 	stw	r17,4(sp)
 88095a4:	dc000015 	stw	r16,0(sp)
 88095a8:	282b883a 	mov	r21,r5
 88095ac:	88089740 	call	8808974 <__sfp_lock_acquire>
 88095b0:	98001f26 	beq	r19,zero,8809630 <_fwalk+0xb0>
 88095b4:	002d883a 	mov	r22,zero
 88095b8:	9c800117 	ldw	r18,4(r19)
 88095bc:	9c000217 	ldw	r16,8(r19)
 88095c0:	90bfffc4 	addi	r2,r18,-1
 88095c4:	10000c16 	blt	r2,zero,88095f8 <_fwalk+0x78>
 88095c8:	0023883a 	mov	r17,zero
 88095cc:	053fffc4 	movi	r20,-1
 88095d0:	8080030f 	ldh	r2,12(r16)
 88095d4:	8c400044 	addi	r17,r17,1
 88095d8:	10000526 	beq	r2,zero,88095f0 <_fwalk+0x70>
 88095dc:	8080038f 	ldh	r2,14(r16)
 88095e0:	8009883a 	mov	r4,r16
 88095e4:	15000226 	beq	r2,r20,88095f0 <_fwalk+0x70>
 88095e8:	a83ee83a 	callr	r21
 88095ec:	b0acb03a 	or	r22,r22,r2
 88095f0:	84001704 	addi	r16,r16,92
 88095f4:	947ff61e 	bne	r18,r17,88095d0 <_fwalk+0x50>
 88095f8:	9cc00017 	ldw	r19,0(r19)
 88095fc:	983fee1e 	bne	r19,zero,88095b8 <_fwalk+0x38>
 8809600:	88089780 	call	8808978 <__sfp_lock_release>
 8809604:	b005883a 	mov	r2,r22
 8809608:	dfc00717 	ldw	ra,28(sp)
 880960c:	dd800617 	ldw	r22,24(sp)
 8809610:	dd400517 	ldw	r21,20(sp)
 8809614:	dd000417 	ldw	r20,16(sp)
 8809618:	dcc00317 	ldw	r19,12(sp)
 880961c:	dc800217 	ldw	r18,8(sp)
 8809620:	dc400117 	ldw	r17,4(sp)
 8809624:	dc000017 	ldw	r16,0(sp)
 8809628:	dec00804 	addi	sp,sp,32
 880962c:	f800283a 	ret
 8809630:	002d883a 	mov	r22,zero
 8809634:	003ff206 	br	8809600 <_fwalk+0x80>

08809638 <__locale_charset>:
 8809638:	d0a00717 	ldw	r2,-32740(gp)
 880963c:	f800283a 	ret

08809640 <_localeconv_r>:
 8809640:	00822074 	movhi	r2,2177
 8809644:	1086cc04 	addi	r2,r2,6960
 8809648:	f800283a 	ret

0880964c <localeconv>:
 880964c:	00822074 	movhi	r2,2177
 8809650:	108e5204 	addi	r2,r2,14664
 8809654:	11000017 	ldw	r4,0(r2)
 8809658:	88096401 	jmpi	8809640 <_localeconv_r>

0880965c <_setlocale_r>:
 880965c:	defffc04 	addi	sp,sp,-16
 8809660:	00c22074 	movhi	r3,2177
 8809664:	18c6a204 	addi	r3,r3,6792
 8809668:	dc800215 	stw	r18,8(sp)
 880966c:	dc400115 	stw	r17,4(sp)
 8809670:	dc000015 	stw	r16,0(sp)
 8809674:	2023883a 	mov	r17,r4
 8809678:	2825883a 	mov	r18,r5
 880967c:	dfc00315 	stw	ra,12(sp)
 8809680:	3021883a 	mov	r16,r6
 8809684:	3009883a 	mov	r4,r6
 8809688:	180b883a 	mov	r5,r3
 880968c:	30000926 	beq	r6,zero,88096b4 <_setlocale_r+0x58>
 8809690:	880bab00 	call	880bab0 <strcmp>
 8809694:	8009883a 	mov	r4,r16
 8809698:	01422074 	movhi	r5,2177
 880969c:	2946b304 	addi	r5,r5,6860
 88096a0:	10000b1e 	bne	r2,zero,88096d0 <_setlocale_r+0x74>
 88096a4:	8c000d15 	stw	r16,52(r17)
 88096a8:	8c800c15 	stw	r18,48(r17)
 88096ac:	00c22074 	movhi	r3,2177
 88096b0:	18c6a204 	addi	r3,r3,6792
 88096b4:	1805883a 	mov	r2,r3
 88096b8:	dfc00317 	ldw	ra,12(sp)
 88096bc:	dc800217 	ldw	r18,8(sp)
 88096c0:	dc400117 	ldw	r17,4(sp)
 88096c4:	dc000017 	ldw	r16,0(sp)
 88096c8:	dec00404 	addi	sp,sp,16
 88096cc:	f800283a 	ret
 88096d0:	880bab00 	call	880bab0 <strcmp>
 88096d4:	0007883a 	mov	r3,zero
 88096d8:	103ff226 	beq	r2,zero,88096a4 <_setlocale_r+0x48>
 88096dc:	003ff506 	br	88096b4 <_setlocale_r+0x58>

088096e0 <setlocale>:
 88096e0:	01822074 	movhi	r6,2177
 88096e4:	318e5204 	addi	r6,r6,14664
 88096e8:	2007883a 	mov	r3,r4
 88096ec:	31000017 	ldw	r4,0(r6)
 88096f0:	280d883a 	mov	r6,r5
 88096f4:	180b883a 	mov	r5,r3
 88096f8:	880965c1 	jmpi	880965c <_setlocale_r>

088096fc <__smakebuf_r>:
 88096fc:	2880030b 	ldhu	r2,12(r5)
 8809700:	deffed04 	addi	sp,sp,-76
 8809704:	dc401015 	stw	r17,64(sp)
 8809708:	1080008c 	andi	r2,r2,2
 880970c:	dc000f15 	stw	r16,60(sp)
 8809710:	dfc01215 	stw	ra,72(sp)
 8809714:	dc801115 	stw	r18,68(sp)
 8809718:	2821883a 	mov	r16,r5
 880971c:	2023883a 	mov	r17,r4
 8809720:	10000b26 	beq	r2,zero,8809750 <__smakebuf_r+0x54>
 8809724:	28c010c4 	addi	r3,r5,67
 8809728:	00800044 	movi	r2,1
 880972c:	28800515 	stw	r2,20(r5)
 8809730:	28c00415 	stw	r3,16(r5)
 8809734:	28c00015 	stw	r3,0(r5)
 8809738:	dfc01217 	ldw	ra,72(sp)
 880973c:	dc801117 	ldw	r18,68(sp)
 8809740:	dc401017 	ldw	r17,64(sp)
 8809744:	dc000f17 	ldw	r16,60(sp)
 8809748:	dec01304 	addi	sp,sp,76
 880974c:	f800283a 	ret
 8809750:	2940038f 	ldh	r5,14(r5)
 8809754:	28002116 	blt	r5,zero,88097dc <__smakebuf_r+0xe0>
 8809758:	d80d883a 	mov	r6,sp
 880975c:	880be2c0 	call	880be2c <_fstat_r>
 8809760:	10001e16 	blt	r2,zero,88097dc <__smakebuf_r+0xe0>
 8809764:	d8800117 	ldw	r2,4(sp)
 8809768:	00e00014 	movui	r3,32768
 880976c:	113c000c 	andi	r4,r2,61440
 8809770:	20c03126 	beq	r4,r3,8809838 <__smakebuf_r+0x13c>
 8809774:	8080030b 	ldhu	r2,12(r16)
 8809778:	00c80004 	movi	r3,8192
 880977c:	10820014 	ori	r2,r2,2048
 8809780:	8080030d 	sth	r2,12(r16)
 8809784:	20c01e26 	beq	r4,r3,8809800 <__smakebuf_r+0x104>
 8809788:	04810004 	movi	r18,1024
 880978c:	8809883a 	mov	r4,r17
 8809790:	900b883a 	mov	r5,r18
 8809794:	88098900 	call	8809890 <_malloc_r>
 8809798:	1009883a 	mov	r4,r2
 880979c:	10003126 	beq	r2,zero,8809864 <__smakebuf_r+0x168>
 88097a0:	80c0030b 	ldhu	r3,12(r16)
 88097a4:	00822074 	movhi	r2,2177
 88097a8:	10a29a04 	addi	r2,r2,-30104
 88097ac:	88800f15 	stw	r2,60(r17)
 88097b0:	18c02014 	ori	r3,r3,128
 88097b4:	84800515 	stw	r18,20(r16)
 88097b8:	80c0030d 	sth	r3,12(r16)
 88097bc:	81000415 	stw	r4,16(r16)
 88097c0:	81000015 	stw	r4,0(r16)
 88097c4:	dfc01217 	ldw	ra,72(sp)
 88097c8:	dc801117 	ldw	r18,68(sp)
 88097cc:	dc401017 	ldw	r17,64(sp)
 88097d0:	dc000f17 	ldw	r16,60(sp)
 88097d4:	dec01304 	addi	sp,sp,76
 88097d8:	f800283a 	ret
 88097dc:	80c0030b 	ldhu	r3,12(r16)
 88097e0:	1880200c 	andi	r2,r3,128
 88097e4:	10000426 	beq	r2,zero,88097f8 <__smakebuf_r+0xfc>
 88097e8:	04801004 	movi	r18,64
 88097ec:	18820014 	ori	r2,r3,2048
 88097f0:	8080030d 	sth	r2,12(r16)
 88097f4:	003fe506 	br	880978c <__smakebuf_r+0x90>
 88097f8:	04810004 	movi	r18,1024
 88097fc:	003ffb06 	br	88097ec <__smakebuf_r+0xf0>
 8809800:	8140038f 	ldh	r5,14(r16)
 8809804:	8809883a 	mov	r4,r17
 8809808:	880bea00 	call	880bea0 <_isatty_r>
 880980c:	103fde26 	beq	r2,zero,8809788 <__smakebuf_r+0x8c>
 8809810:	8080030b 	ldhu	r2,12(r16)
 8809814:	80c010c4 	addi	r3,r16,67
 8809818:	04810004 	movi	r18,1024
 880981c:	10800054 	ori	r2,r2,1
 8809820:	8080030d 	sth	r2,12(r16)
 8809824:	00800044 	movi	r2,1
 8809828:	80c00415 	stw	r3,16(r16)
 880982c:	80800515 	stw	r2,20(r16)
 8809830:	80c00015 	stw	r3,0(r16)
 8809834:	003fd506 	br	880978c <__smakebuf_r+0x90>
 8809838:	80c00a17 	ldw	r3,40(r16)
 880983c:	00822074 	movhi	r2,2177
 8809840:	10ae5b04 	addi	r2,r2,-18068
 8809844:	18bfcb1e 	bne	r3,r2,8809774 <__smakebuf_r+0x78>
 8809848:	8080030b 	ldhu	r2,12(r16)
 880984c:	00c10004 	movi	r3,1024
 8809850:	1825883a 	mov	r18,r3
 8809854:	10c4b03a 	or	r2,r2,r3
 8809858:	8080030d 	sth	r2,12(r16)
 880985c:	80c01315 	stw	r3,76(r16)
 8809860:	003fca06 	br	880978c <__smakebuf_r+0x90>
 8809864:	8100030b 	ldhu	r4,12(r16)
 8809868:	2080800c 	andi	r2,r4,512
 880986c:	103fb21e 	bne	r2,zero,8809738 <__smakebuf_r+0x3c>
 8809870:	80c010c4 	addi	r3,r16,67
 8809874:	21000094 	ori	r4,r4,2
 8809878:	00800044 	movi	r2,1
 880987c:	80800515 	stw	r2,20(r16)
 8809880:	8100030d 	sth	r4,12(r16)
 8809884:	80c00415 	stw	r3,16(r16)
 8809888:	80c00015 	stw	r3,0(r16)
 880988c:	003faa06 	br	8809738 <__smakebuf_r+0x3c>

08809890 <_malloc_r>:
 8809890:	defff604 	addi	sp,sp,-40
 8809894:	28c002c4 	addi	r3,r5,11
 8809898:	00800584 	movi	r2,22
 880989c:	dc800215 	stw	r18,8(sp)
 88098a0:	dfc00915 	stw	ra,36(sp)
 88098a4:	df000815 	stw	fp,32(sp)
 88098a8:	ddc00715 	stw	r23,28(sp)
 88098ac:	dd800615 	stw	r22,24(sp)
 88098b0:	dd400515 	stw	r21,20(sp)
 88098b4:	dd000415 	stw	r20,16(sp)
 88098b8:	dcc00315 	stw	r19,12(sp)
 88098bc:	dc400115 	stw	r17,4(sp)
 88098c0:	dc000015 	stw	r16,0(sp)
 88098c4:	2025883a 	mov	r18,r4
 88098c8:	10c01236 	bltu	r2,r3,8809914 <_malloc_r+0x84>
 88098cc:	04400404 	movi	r17,16
 88098d0:	8940142e 	bgeu	r17,r5,8809924 <_malloc_r+0x94>
 88098d4:	00800304 	movi	r2,12
 88098d8:	0007883a 	mov	r3,zero
 88098dc:	90800015 	stw	r2,0(r18)
 88098e0:	1805883a 	mov	r2,r3
 88098e4:	dfc00917 	ldw	ra,36(sp)
 88098e8:	df000817 	ldw	fp,32(sp)
 88098ec:	ddc00717 	ldw	r23,28(sp)
 88098f0:	dd800617 	ldw	r22,24(sp)
 88098f4:	dd400517 	ldw	r21,20(sp)
 88098f8:	dd000417 	ldw	r20,16(sp)
 88098fc:	dcc00317 	ldw	r19,12(sp)
 8809900:	dc800217 	ldw	r18,8(sp)
 8809904:	dc400117 	ldw	r17,4(sp)
 8809908:	dc000017 	ldw	r16,0(sp)
 880990c:	dec00a04 	addi	sp,sp,40
 8809910:	f800283a 	ret
 8809914:	00bffe04 	movi	r2,-8
 8809918:	18a2703a 	and	r17,r3,r2
 880991c:	883fed16 	blt	r17,zero,88098d4 <_malloc_r+0x44>
 8809920:	897fec36 	bltu	r17,r5,88098d4 <_malloc_r+0x44>
 8809924:	9009883a 	mov	r4,r18
 8809928:	880d5040 	call	880d504 <__malloc_lock>
 880992c:	00807dc4 	movi	r2,503
 8809930:	14402b2e 	bgeu	r2,r17,88099e0 <_malloc_r+0x150>
 8809934:	8806d27a 	srli	r3,r17,9
 8809938:	18003f1e 	bne	r3,zero,8809a38 <_malloc_r+0x1a8>
 880993c:	880cd0fa 	srli	r6,r17,3
 8809940:	300490fa 	slli	r2,r6,3
 8809944:	02c22074 	movhi	r11,2177
 8809948:	5ac87904 	addi	r11,r11,8676
 880994c:	12cb883a 	add	r5,r2,r11
 8809950:	2c000317 	ldw	r16,12(r5)
 8809954:	580f883a 	mov	r7,r11
 8809958:	2c00041e 	bne	r5,r16,880996c <_malloc_r+0xdc>
 880995c:	00000a06 	br	8809988 <_malloc_r+0xf8>
 8809960:	1800860e 	bge	r3,zero,8809b7c <_malloc_r+0x2ec>
 8809964:	84000317 	ldw	r16,12(r16)
 8809968:	2c000726 	beq	r5,r16,8809988 <_malloc_r+0xf8>
 880996c:	80800117 	ldw	r2,4(r16)
 8809970:	00ffff04 	movi	r3,-4
 8809974:	10c8703a 	and	r4,r2,r3
 8809978:	2447c83a 	sub	r3,r4,r17
 880997c:	008003c4 	movi	r2,15
 8809980:	10fff70e 	bge	r2,r3,8809960 <_malloc_r+0xd0>
 8809984:	31bfffc4 	addi	r6,r6,-1
 8809988:	32400044 	addi	r9,r6,1
 880998c:	02822074 	movhi	r10,2177
 8809990:	52887b04 	addi	r10,r10,8684
 8809994:	54000217 	ldw	r16,8(r10)
 8809998:	8280a026 	beq	r16,r10,8809c1c <_malloc_r+0x38c>
 880999c:	80800117 	ldw	r2,4(r16)
 88099a0:	00ffff04 	movi	r3,-4
 88099a4:	10ca703a 	and	r5,r2,r3
 88099a8:	2c4dc83a 	sub	r6,r5,r17
 88099ac:	008003c4 	movi	r2,15
 88099b0:	11808316 	blt	r2,r6,8809bc0 <_malloc_r+0x330>
 88099b4:	52800315 	stw	r10,12(r10)
 88099b8:	52800215 	stw	r10,8(r10)
 88099bc:	30002916 	blt	r6,zero,8809a64 <_malloc_r+0x1d4>
 88099c0:	8147883a 	add	r3,r16,r5
 88099c4:	18800117 	ldw	r2,4(r3)
 88099c8:	9009883a 	mov	r4,r18
 88099cc:	10800054 	ori	r2,r2,1
 88099d0:	18800115 	stw	r2,4(r3)
 88099d4:	880d5240 	call	880d524 <__malloc_unlock>
 88099d8:	80c00204 	addi	r3,r16,8
 88099dc:	003fc006 	br	88098e0 <_malloc_r+0x50>
 88099e0:	02c22074 	movhi	r11,2177
 88099e4:	5ac87904 	addi	r11,r11,8676
 88099e8:	8ac5883a 	add	r2,r17,r11
 88099ec:	14000317 	ldw	r16,12(r2)
 88099f0:	580f883a 	mov	r7,r11
 88099f4:	8806d0fa 	srli	r3,r17,3
 88099f8:	14006c26 	beq	r2,r16,8809bac <_malloc_r+0x31c>
 88099fc:	80c00117 	ldw	r3,4(r16)
 8809a00:	00bfff04 	movi	r2,-4
 8809a04:	81800317 	ldw	r6,12(r16)
 8809a08:	1886703a 	and	r3,r3,r2
 8809a0c:	80c7883a 	add	r3,r16,r3
 8809a10:	18800117 	ldw	r2,4(r3)
 8809a14:	81400217 	ldw	r5,8(r16)
 8809a18:	9009883a 	mov	r4,r18
 8809a1c:	10800054 	ori	r2,r2,1
 8809a20:	18800115 	stw	r2,4(r3)
 8809a24:	31400215 	stw	r5,8(r6)
 8809a28:	29800315 	stw	r6,12(r5)
 8809a2c:	880d5240 	call	880d524 <__malloc_unlock>
 8809a30:	80c00204 	addi	r3,r16,8
 8809a34:	003faa06 	br	88098e0 <_malloc_r+0x50>
 8809a38:	00800104 	movi	r2,4
 8809a3c:	10c0052e 	bgeu	r2,r3,8809a54 <_malloc_r+0x1c4>
 8809a40:	00800504 	movi	r2,20
 8809a44:	10c07836 	bltu	r2,r3,8809c28 <_malloc_r+0x398>
 8809a48:	198016c4 	addi	r6,r3,91
 8809a4c:	300490fa 	slli	r2,r6,3
 8809a50:	003fbc06 	br	8809944 <_malloc_r+0xb4>
 8809a54:	8804d1ba 	srli	r2,r17,6
 8809a58:	11800e04 	addi	r6,r2,56
 8809a5c:	300490fa 	slli	r2,r6,3
 8809a60:	003fb806 	br	8809944 <_malloc_r+0xb4>
 8809a64:	00807fc4 	movi	r2,511
 8809a68:	1140bb36 	bltu	r2,r5,8809d58 <_malloc_r+0x4c8>
 8809a6c:	2806d0fa 	srli	r3,r5,3
 8809a70:	573ffe04 	addi	fp,r10,-8
 8809a74:	00800044 	movi	r2,1
 8809a78:	180890fa 	slli	r4,r3,3
 8809a7c:	1807d0ba 	srai	r3,r3,2
 8809a80:	e1c00117 	ldw	r7,4(fp)
 8809a84:	5909883a 	add	r4,r11,r4
 8809a88:	21400217 	ldw	r5,8(r4)
 8809a8c:	10c4983a 	sll	r2,r2,r3
 8809a90:	81000315 	stw	r4,12(r16)
 8809a94:	81400215 	stw	r5,8(r16)
 8809a98:	388eb03a 	or	r7,r7,r2
 8809a9c:	2c000315 	stw	r16,12(r5)
 8809aa0:	24000215 	stw	r16,8(r4)
 8809aa4:	e1c00115 	stw	r7,4(fp)
 8809aa8:	4807883a 	mov	r3,r9
 8809aac:	4800cd16 	blt	r9,zero,8809de4 <_malloc_r+0x554>
 8809ab0:	1807d0ba 	srai	r3,r3,2
 8809ab4:	00800044 	movi	r2,1
 8809ab8:	10c8983a 	sll	r4,r2,r3
 8809abc:	39004436 	bltu	r7,r4,8809bd0 <_malloc_r+0x340>
 8809ac0:	21c4703a 	and	r2,r4,r7
 8809ac4:	10000a1e 	bne	r2,zero,8809af0 <_malloc_r+0x260>
 8809ac8:	2109883a 	add	r4,r4,r4
 8809acc:	00bfff04 	movi	r2,-4
 8809ad0:	4884703a 	and	r2,r9,r2
 8809ad4:	3906703a 	and	r3,r7,r4
 8809ad8:	12400104 	addi	r9,r2,4
 8809adc:	1800041e 	bne	r3,zero,8809af0 <_malloc_r+0x260>
 8809ae0:	2109883a 	add	r4,r4,r4
 8809ae4:	3904703a 	and	r2,r7,r4
 8809ae8:	4a400104 	addi	r9,r9,4
 8809aec:	103ffc26 	beq	r2,zero,8809ae0 <_malloc_r+0x250>
 8809af0:	480490fa 	slli	r2,r9,3
 8809af4:	4819883a 	mov	r12,r9
 8809af8:	023fff04 	movi	r8,-4
 8809afc:	589b883a 	add	r13,r11,r2
 8809b00:	6807883a 	mov	r3,r13
 8809b04:	014003c4 	movi	r5,15
 8809b08:	1c000317 	ldw	r16,12(r3)
 8809b0c:	1c00041e 	bne	r3,r16,8809b20 <_malloc_r+0x290>
 8809b10:	0000a706 	br	8809db0 <_malloc_r+0x520>
 8809b14:	3000ab0e 	bge	r6,zero,8809dc4 <_malloc_r+0x534>
 8809b18:	84000317 	ldw	r16,12(r16)
 8809b1c:	1c00a426 	beq	r3,r16,8809db0 <_malloc_r+0x520>
 8809b20:	80800117 	ldw	r2,4(r16)
 8809b24:	1204703a 	and	r2,r2,r8
 8809b28:	144dc83a 	sub	r6,r2,r17
 8809b2c:	29bff90e 	bge	r5,r6,8809b14 <_malloc_r+0x284>
 8809b30:	81000317 	ldw	r4,12(r16)
 8809b34:	80c00217 	ldw	r3,8(r16)
 8809b38:	89400054 	ori	r5,r17,1
 8809b3c:	8445883a 	add	r2,r16,r17
 8809b40:	20c00215 	stw	r3,8(r4)
 8809b44:	19000315 	stw	r4,12(r3)
 8809b48:	81400115 	stw	r5,4(r16)
 8809b4c:	1187883a 	add	r3,r2,r6
 8809b50:	31000054 	ori	r4,r6,1
 8809b54:	50800315 	stw	r2,12(r10)
 8809b58:	50800215 	stw	r2,8(r10)
 8809b5c:	19800015 	stw	r6,0(r3)
 8809b60:	11000115 	stw	r4,4(r2)
 8809b64:	12800215 	stw	r10,8(r2)
 8809b68:	12800315 	stw	r10,12(r2)
 8809b6c:	9009883a 	mov	r4,r18
 8809b70:	880d5240 	call	880d524 <__malloc_unlock>
 8809b74:	80c00204 	addi	r3,r16,8
 8809b78:	003f5906 	br	88098e0 <_malloc_r+0x50>
 8809b7c:	8109883a 	add	r4,r16,r4
 8809b80:	20800117 	ldw	r2,4(r4)
 8809b84:	80c00217 	ldw	r3,8(r16)
 8809b88:	81400317 	ldw	r5,12(r16)
 8809b8c:	10800054 	ori	r2,r2,1
 8809b90:	20800115 	stw	r2,4(r4)
 8809b94:	28c00215 	stw	r3,8(r5)
 8809b98:	19400315 	stw	r5,12(r3)
 8809b9c:	9009883a 	mov	r4,r18
 8809ba0:	880d5240 	call	880d524 <__malloc_unlock>
 8809ba4:	80c00204 	addi	r3,r16,8
 8809ba8:	003f4d06 	br	88098e0 <_malloc_r+0x50>
 8809bac:	80800204 	addi	r2,r16,8
 8809bb0:	14000317 	ldw	r16,12(r2)
 8809bb4:	143f911e 	bne	r2,r16,88099fc <_malloc_r+0x16c>
 8809bb8:	1a400084 	addi	r9,r3,2
 8809bbc:	003f7306 	br	880998c <_malloc_r+0xfc>
 8809bc0:	88c00054 	ori	r3,r17,1
 8809bc4:	8445883a 	add	r2,r16,r17
 8809bc8:	80c00115 	stw	r3,4(r16)
 8809bcc:	003fdf06 	br	8809b4c <_malloc_r+0x2bc>
 8809bd0:	e4000217 	ldw	r16,8(fp)
 8809bd4:	00bfff04 	movi	r2,-4
 8809bd8:	80c00117 	ldw	r3,4(r16)
 8809bdc:	802d883a 	mov	r22,r16
 8809be0:	18aa703a 	and	r21,r3,r2
 8809be4:	ac401636 	bltu	r21,r17,8809c40 <_malloc_r+0x3b0>
 8809be8:	ac49c83a 	sub	r4,r21,r17
 8809bec:	008003c4 	movi	r2,15
 8809bf0:	1100130e 	bge	r2,r4,8809c40 <_malloc_r+0x3b0>
 8809bf4:	88800054 	ori	r2,r17,1
 8809bf8:	8447883a 	add	r3,r16,r17
 8809bfc:	80800115 	stw	r2,4(r16)
 8809c00:	20800054 	ori	r2,r4,1
 8809c04:	18800115 	stw	r2,4(r3)
 8809c08:	e0c00215 	stw	r3,8(fp)
 8809c0c:	9009883a 	mov	r4,r18
 8809c10:	880d5240 	call	880d524 <__malloc_unlock>
 8809c14:	80c00204 	addi	r3,r16,8
 8809c18:	003f3106 	br	88098e0 <_malloc_r+0x50>
 8809c1c:	39c00117 	ldw	r7,4(r7)
 8809c20:	573ffe04 	addi	fp,r10,-8
 8809c24:	003fa006 	br	8809aa8 <_malloc_r+0x218>
 8809c28:	00801504 	movi	r2,84
 8809c2c:	10c06736 	bltu	r2,r3,8809dcc <_malloc_r+0x53c>
 8809c30:	8804d33a 	srli	r2,r17,12
 8809c34:	11801b84 	addi	r6,r2,110
 8809c38:	300490fa 	slli	r2,r6,3
 8809c3c:	003f4106 	br	8809944 <_malloc_r+0xb4>
 8809c40:	d0a71317 	ldw	r2,-25524(gp)
 8809c44:	d0e00917 	ldw	r3,-32732(gp)
 8809c48:	053fffc4 	movi	r20,-1
 8809c4c:	10800404 	addi	r2,r2,16
 8809c50:	88a7883a 	add	r19,r17,r2
 8809c54:	1d000326 	beq	r3,r20,8809c64 <_malloc_r+0x3d4>
 8809c58:	98c3ffc4 	addi	r3,r19,4095
 8809c5c:	00bc0004 	movi	r2,-4096
 8809c60:	18a6703a 	and	r19,r3,r2
 8809c64:	9009883a 	mov	r4,r18
 8809c68:	980b883a 	mov	r5,r19
 8809c6c:	880b8f40 	call	880b8f4 <_sbrk_r>
 8809c70:	1009883a 	mov	r4,r2
 8809c74:	15000426 	beq	r2,r20,8809c88 <_malloc_r+0x3f8>
 8809c78:	854b883a 	add	r5,r16,r21
 8809c7c:	1029883a 	mov	r20,r2
 8809c80:	11405a2e 	bgeu	r2,r5,8809dec <_malloc_r+0x55c>
 8809c84:	87000c26 	beq	r16,fp,8809cb8 <_malloc_r+0x428>
 8809c88:	e4000217 	ldw	r16,8(fp)
 8809c8c:	80c00117 	ldw	r3,4(r16)
 8809c90:	00bfff04 	movi	r2,-4
 8809c94:	1884703a 	and	r2,r3,r2
 8809c98:	14400336 	bltu	r2,r17,8809ca8 <_malloc_r+0x418>
 8809c9c:	1449c83a 	sub	r4,r2,r17
 8809ca0:	008003c4 	movi	r2,15
 8809ca4:	113fd316 	blt	r2,r4,8809bf4 <_malloc_r+0x364>
 8809ca8:	9009883a 	mov	r4,r18
 8809cac:	880d5240 	call	880d524 <__malloc_unlock>
 8809cb0:	0007883a 	mov	r3,zero
 8809cb4:	003f0a06 	br	88098e0 <_malloc_r+0x50>
 8809cb8:	05c22074 	movhi	r23,2177
 8809cbc:	bdd56b04 	addi	r23,r23,21932
 8809cc0:	b8800017 	ldw	r2,0(r23)
 8809cc4:	988d883a 	add	r6,r19,r2
 8809cc8:	b9800015 	stw	r6,0(r23)
 8809ccc:	d0e00917 	ldw	r3,-32732(gp)
 8809cd0:	00bfffc4 	movi	r2,-1
 8809cd4:	18808e26 	beq	r3,r2,8809f10 <_malloc_r+0x680>
 8809cd8:	2145c83a 	sub	r2,r4,r5
 8809cdc:	3085883a 	add	r2,r6,r2
 8809ce0:	b8800015 	stw	r2,0(r23)
 8809ce4:	20c001cc 	andi	r3,r4,7
 8809ce8:	18005f1e 	bne	r3,zero,8809e68 <_malloc_r+0x5d8>
 8809cec:	000b883a 	mov	r5,zero
 8809cf0:	a4c5883a 	add	r2,r20,r19
 8809cf4:	1083ffcc 	andi	r2,r2,4095
 8809cf8:	00c40004 	movi	r3,4096
 8809cfc:	1887c83a 	sub	r3,r3,r2
 8809d00:	28e7883a 	add	r19,r5,r3
 8809d04:	9009883a 	mov	r4,r18
 8809d08:	980b883a 	mov	r5,r19
 8809d0c:	880b8f40 	call	880b8f4 <_sbrk_r>
 8809d10:	1007883a 	mov	r3,r2
 8809d14:	00bfffc4 	movi	r2,-1
 8809d18:	18807a26 	beq	r3,r2,8809f04 <_malloc_r+0x674>
 8809d1c:	1d05c83a 	sub	r2,r3,r20
 8809d20:	9885883a 	add	r2,r19,r2
 8809d24:	10c00054 	ori	r3,r2,1
 8809d28:	b8800017 	ldw	r2,0(r23)
 8809d2c:	a021883a 	mov	r16,r20
 8809d30:	a0c00115 	stw	r3,4(r20)
 8809d34:	9885883a 	add	r2,r19,r2
 8809d38:	b8800015 	stw	r2,0(r23)
 8809d3c:	e5000215 	stw	r20,8(fp)
 8809d40:	b7003626 	beq	r22,fp,8809e1c <_malloc_r+0x58c>
 8809d44:	018003c4 	movi	r6,15
 8809d48:	35404b36 	bltu	r6,r21,8809e78 <_malloc_r+0x5e8>
 8809d4c:	00800044 	movi	r2,1
 8809d50:	a0800115 	stw	r2,4(r20)
 8809d54:	003fcd06 	br	8809c8c <_malloc_r+0x3fc>
 8809d58:	2808d27a 	srli	r4,r5,9
 8809d5c:	2000371e 	bne	r4,zero,8809e3c <_malloc_r+0x5ac>
 8809d60:	2808d0fa 	srli	r4,r5,3
 8809d64:	200690fa 	slli	r3,r4,3
 8809d68:	1ad1883a 	add	r8,r3,r11
 8809d6c:	41800217 	ldw	r6,8(r8)
 8809d70:	41805b26 	beq	r8,r6,8809ee0 <_malloc_r+0x650>
 8809d74:	30800117 	ldw	r2,4(r6)
 8809d78:	00ffff04 	movi	r3,-4
 8809d7c:	10c4703a 	and	r2,r2,r3
 8809d80:	2880022e 	bgeu	r5,r2,8809d8c <_malloc_r+0x4fc>
 8809d84:	31800217 	ldw	r6,8(r6)
 8809d88:	41bffa1e 	bne	r8,r6,8809d74 <_malloc_r+0x4e4>
 8809d8c:	32000317 	ldw	r8,12(r6)
 8809d90:	39c00117 	ldw	r7,4(r7)
 8809d94:	82000315 	stw	r8,12(r16)
 8809d98:	81800215 	stw	r6,8(r16)
 8809d9c:	07022074 	movhi	fp,2177
 8809da0:	e7087904 	addi	fp,fp,8676
 8809da4:	34000315 	stw	r16,12(r6)
 8809da8:	44000215 	stw	r16,8(r8)
 8809dac:	003f3e06 	br	8809aa8 <_malloc_r+0x218>
 8809db0:	63000044 	addi	r12,r12,1
 8809db4:	608000cc 	andi	r2,r12,3
 8809db8:	10005d26 	beq	r2,zero,8809f30 <_malloc_r+0x6a0>
 8809dbc:	18c00204 	addi	r3,r3,8
 8809dc0:	003f5106 	br	8809b08 <_malloc_r+0x278>
 8809dc4:	8089883a 	add	r4,r16,r2
 8809dc8:	003f6d06 	br	8809b80 <_malloc_r+0x2f0>
 8809dcc:	00805504 	movi	r2,340
 8809dd0:	10c02036 	bltu	r2,r3,8809e54 <_malloc_r+0x5c4>
 8809dd4:	8804d3fa 	srli	r2,r17,15
 8809dd8:	11801dc4 	addi	r6,r2,119
 8809ddc:	300490fa 	slli	r2,r6,3
 8809de0:	003ed806 	br	8809944 <_malloc_r+0xb4>
 8809de4:	48c000c4 	addi	r3,r9,3
 8809de8:	003f3106 	br	8809ab0 <_malloc_r+0x220>
 8809dec:	05c22074 	movhi	r23,2177
 8809df0:	bdd56b04 	addi	r23,r23,21932
 8809df4:	b8800017 	ldw	r2,0(r23)
 8809df8:	988d883a 	add	r6,r19,r2
 8809dfc:	b9800015 	stw	r6,0(r23)
 8809e00:	293fb21e 	bne	r5,r4,8809ccc <_malloc_r+0x43c>
 8809e04:	2083ffcc 	andi	r2,r4,4095
 8809e08:	103fb01e 	bne	r2,zero,8809ccc <_malloc_r+0x43c>
 8809e0c:	e4000217 	ldw	r16,8(fp)
 8809e10:	9d45883a 	add	r2,r19,r21
 8809e14:	10800054 	ori	r2,r2,1
 8809e18:	80800115 	stw	r2,4(r16)
 8809e1c:	b8c00017 	ldw	r3,0(r23)
 8809e20:	d0a71417 	ldw	r2,-25520(gp)
 8809e24:	10c0012e 	bgeu	r2,r3,8809e2c <_malloc_r+0x59c>
 8809e28:	d0e71415 	stw	r3,-25520(gp)
 8809e2c:	d0a71517 	ldw	r2,-25516(gp)
 8809e30:	10ff962e 	bgeu	r2,r3,8809c8c <_malloc_r+0x3fc>
 8809e34:	d0e71515 	stw	r3,-25516(gp)
 8809e38:	003f9406 	br	8809c8c <_malloc_r+0x3fc>
 8809e3c:	00800104 	movi	r2,4
 8809e40:	11001e36 	bltu	r2,r4,8809ebc <_malloc_r+0x62c>
 8809e44:	2804d1ba 	srli	r2,r5,6
 8809e48:	11000e04 	addi	r4,r2,56
 8809e4c:	200690fa 	slli	r3,r4,3
 8809e50:	003fc506 	br	8809d68 <_malloc_r+0x4d8>
 8809e54:	00815504 	movi	r2,1364
 8809e58:	10c01d2e 	bgeu	r2,r3,8809ed0 <_malloc_r+0x640>
 8809e5c:	01801f84 	movi	r6,126
 8809e60:	0080fc04 	movi	r2,1008
 8809e64:	003eb706 	br	8809944 <_malloc_r+0xb4>
 8809e68:	00800204 	movi	r2,8
 8809e6c:	10cbc83a 	sub	r5,r2,r3
 8809e70:	2169883a 	add	r20,r4,r5
 8809e74:	003f9e06 	br	8809cf0 <_malloc_r+0x460>
 8809e78:	00bffe04 	movi	r2,-8
 8809e7c:	a93ffd04 	addi	r4,r21,-12
 8809e80:	2088703a 	and	r4,r4,r2
 8809e84:	b10b883a 	add	r5,r22,r4
 8809e88:	00c00144 	movi	r3,5
 8809e8c:	28c00215 	stw	r3,8(r5)
 8809e90:	28c00115 	stw	r3,4(r5)
 8809e94:	b0800117 	ldw	r2,4(r22)
 8809e98:	1080004c 	andi	r2,r2,1
 8809e9c:	2084b03a 	or	r2,r4,r2
 8809ea0:	b0800115 	stw	r2,4(r22)
 8809ea4:	313fdd2e 	bgeu	r6,r4,8809e1c <_malloc_r+0x58c>
 8809ea8:	b1400204 	addi	r5,r22,8
 8809eac:	9009883a 	mov	r4,r18
 8809eb0:	8808d080 	call	8808d08 <_free_r>
 8809eb4:	e4000217 	ldw	r16,8(fp)
 8809eb8:	003fd806 	br	8809e1c <_malloc_r+0x58c>
 8809ebc:	00800504 	movi	r2,20
 8809ec0:	11001536 	bltu	r2,r4,8809f18 <_malloc_r+0x688>
 8809ec4:	210016c4 	addi	r4,r4,91
 8809ec8:	200690fa 	slli	r3,r4,3
 8809ecc:	003fa606 	br	8809d68 <_malloc_r+0x4d8>
 8809ed0:	8804d4ba 	srli	r2,r17,18
 8809ed4:	11801f04 	addi	r6,r2,124
 8809ed8:	300490fa 	slli	r2,r6,3
 8809edc:	003e9906 	br	8809944 <_malloc_r+0xb4>
 8809ee0:	2009d0ba 	srai	r4,r4,2
 8809ee4:	01422074 	movhi	r5,2177
 8809ee8:	29487904 	addi	r5,r5,8676
 8809eec:	00c00044 	movi	r3,1
 8809ef0:	28800117 	ldw	r2,4(r5)
 8809ef4:	1906983a 	sll	r3,r3,r4
 8809ef8:	10c4b03a 	or	r2,r2,r3
 8809efc:	28800115 	stw	r2,4(r5)
 8809f00:	003fa306 	br	8809d90 <_malloc_r+0x500>
 8809f04:	0027883a 	mov	r19,zero
 8809f08:	00c00044 	movi	r3,1
 8809f0c:	003f8606 	br	8809d28 <_malloc_r+0x498>
 8809f10:	d1200915 	stw	r4,-32732(gp)
 8809f14:	003f7306 	br	8809ce4 <_malloc_r+0x454>
 8809f18:	00801504 	movi	r2,84
 8809f1c:	11001936 	bltu	r2,r4,8809f84 <_malloc_r+0x6f4>
 8809f20:	2804d33a 	srli	r2,r5,12
 8809f24:	11001b84 	addi	r4,r2,110
 8809f28:	200690fa 	slli	r3,r4,3
 8809f2c:	003f8e06 	br	8809d68 <_malloc_r+0x4d8>
 8809f30:	480b883a 	mov	r5,r9
 8809f34:	6807883a 	mov	r3,r13
 8809f38:	288000cc 	andi	r2,r5,3
 8809f3c:	18fffe04 	addi	r3,r3,-8
 8809f40:	297fffc4 	addi	r5,r5,-1
 8809f44:	10001526 	beq	r2,zero,8809f9c <_malloc_r+0x70c>
 8809f48:	18800217 	ldw	r2,8(r3)
 8809f4c:	10fffa26 	beq	r2,r3,8809f38 <_malloc_r+0x6a8>
 8809f50:	2109883a 	add	r4,r4,r4
 8809f54:	393f1e36 	bltu	r7,r4,8809bd0 <_malloc_r+0x340>
 8809f58:	203f1d26 	beq	r4,zero,8809bd0 <_malloc_r+0x340>
 8809f5c:	21c4703a 	and	r2,r4,r7
 8809f60:	10000226 	beq	r2,zero,8809f6c <_malloc_r+0x6dc>
 8809f64:	6013883a 	mov	r9,r12
 8809f68:	003ee106 	br	8809af0 <_malloc_r+0x260>
 8809f6c:	2109883a 	add	r4,r4,r4
 8809f70:	3904703a 	and	r2,r7,r4
 8809f74:	63000104 	addi	r12,r12,4
 8809f78:	103ffc26 	beq	r2,zero,8809f6c <_malloc_r+0x6dc>
 8809f7c:	6013883a 	mov	r9,r12
 8809f80:	003edb06 	br	8809af0 <_malloc_r+0x260>
 8809f84:	00805504 	movi	r2,340
 8809f88:	11000836 	bltu	r2,r4,8809fac <_malloc_r+0x71c>
 8809f8c:	2804d3fa 	srli	r2,r5,15
 8809f90:	11001dc4 	addi	r4,r2,119
 8809f94:	200690fa 	slli	r3,r4,3
 8809f98:	003f7306 	br	8809d68 <_malloc_r+0x4d8>
 8809f9c:	0104303a 	nor	r2,zero,r4
 8809fa0:	388e703a 	and	r7,r7,r2
 8809fa4:	e1c00115 	stw	r7,4(fp)
 8809fa8:	003fe906 	br	8809f50 <_malloc_r+0x6c0>
 8809fac:	00815504 	movi	r2,1364
 8809fb0:	1100032e 	bgeu	r2,r4,8809fc0 <_malloc_r+0x730>
 8809fb4:	01001f84 	movi	r4,126
 8809fb8:	00c0fc04 	movi	r3,1008
 8809fbc:	003f6a06 	br	8809d68 <_malloc_r+0x4d8>
 8809fc0:	2804d4ba 	srli	r2,r5,18
 8809fc4:	11001f04 	addi	r4,r2,124
 8809fc8:	200690fa 	slli	r3,r4,3
 8809fcc:	003f6606 	br	8809d68 <_malloc_r+0x4d8>

08809fd0 <memchr>:
 8809fd0:	008000c4 	movi	r2,3
 8809fd4:	29403fcc 	andi	r5,r5,255
 8809fd8:	2007883a 	mov	r3,r4
 8809fdc:	1180022e 	bgeu	r2,r6,8809fe8 <memchr+0x18>
 8809fe0:	2084703a 	and	r2,r4,r2
 8809fe4:	10000b26 	beq	r2,zero,880a014 <memchr+0x44>
 8809fe8:	313fffc4 	addi	r4,r6,-1
 8809fec:	3000051e 	bne	r6,zero,880a004 <memchr+0x34>
 8809ff0:	00002c06 	br	880a0a4 <memchr+0xd4>
 8809ff4:	213fffc4 	addi	r4,r4,-1
 8809ff8:	00bfffc4 	movi	r2,-1
 8809ffc:	18c00044 	addi	r3,r3,1
 880a000:	20802826 	beq	r4,r2,880a0a4 <memchr+0xd4>
 880a004:	18800003 	ldbu	r2,0(r3)
 880a008:	28bffa1e 	bne	r5,r2,8809ff4 <memchr+0x24>
 880a00c:	1805883a 	mov	r2,r3
 880a010:	f800283a 	ret
 880a014:	0011883a 	mov	r8,zero
 880a018:	0007883a 	mov	r3,zero
 880a01c:	01c00104 	movi	r7,4
 880a020:	4004923a 	slli	r2,r8,8
 880a024:	18c00044 	addi	r3,r3,1
 880a028:	1151883a 	add	r8,r2,r5
 880a02c:	19fffc1e 	bne	r3,r7,880a020 <memchr+0x50>
 880a030:	02bfbff4 	movhi	r10,65279
 880a034:	52bfbfc4 	addi	r10,r10,-257
 880a038:	02602074 	movhi	r9,32897
 880a03c:	4a602004 	addi	r9,r9,-32640
 880a040:	02c000c4 	movi	r11,3
 880a044:	20800017 	ldw	r2,0(r4)
 880a048:	31bfff04 	addi	r6,r6,-4
 880a04c:	200f883a 	mov	r7,r4
 880a050:	1204f03a 	xor	r2,r2,r8
 880a054:	1287883a 	add	r3,r2,r10
 880a058:	1a46703a 	and	r3,r3,r9
 880a05c:	0084303a 	nor	r2,zero,r2
 880a060:	10c4703a 	and	r2,r2,r3
 880a064:	10000b26 	beq	r2,zero,880a094 <memchr+0xc4>
 880a068:	20800003 	ldbu	r2,0(r4)
 880a06c:	28800f26 	beq	r5,r2,880a0ac <memchr+0xdc>
 880a070:	20800043 	ldbu	r2,1(r4)
 880a074:	21c00044 	addi	r7,r4,1
 880a078:	28800c26 	beq	r5,r2,880a0ac <memchr+0xdc>
 880a07c:	20800083 	ldbu	r2,2(r4)
 880a080:	21c00084 	addi	r7,r4,2
 880a084:	28800926 	beq	r5,r2,880a0ac <memchr+0xdc>
 880a088:	208000c3 	ldbu	r2,3(r4)
 880a08c:	21c000c4 	addi	r7,r4,3
 880a090:	28800626 	beq	r5,r2,880a0ac <memchr+0xdc>
 880a094:	21000104 	addi	r4,r4,4
 880a098:	59bfea36 	bltu	r11,r6,880a044 <memchr+0x74>
 880a09c:	2007883a 	mov	r3,r4
 880a0a0:	003fd106 	br	8809fe8 <memchr+0x18>
 880a0a4:	0005883a 	mov	r2,zero
 880a0a8:	f800283a 	ret
 880a0ac:	3805883a 	mov	r2,r7
 880a0b0:	f800283a 	ret

0880a0b4 <memcpy>:
 880a0b4:	01c003c4 	movi	r7,15
 880a0b8:	2007883a 	mov	r3,r4
 880a0bc:	3980032e 	bgeu	r7,r6,880a0cc <memcpy+0x18>
 880a0c0:	2904b03a 	or	r2,r5,r4
 880a0c4:	108000cc 	andi	r2,r2,3
 880a0c8:	10000926 	beq	r2,zero,880a0f0 <memcpy+0x3c>
 880a0cc:	30000626 	beq	r6,zero,880a0e8 <memcpy+0x34>
 880a0d0:	30cd883a 	add	r6,r6,r3
 880a0d4:	28800003 	ldbu	r2,0(r5)
 880a0d8:	29400044 	addi	r5,r5,1
 880a0dc:	18800005 	stb	r2,0(r3)
 880a0e0:	18c00044 	addi	r3,r3,1
 880a0e4:	30fffb1e 	bne	r6,r3,880a0d4 <memcpy+0x20>
 880a0e8:	2005883a 	mov	r2,r4
 880a0ec:	f800283a 	ret
 880a0f0:	3811883a 	mov	r8,r7
 880a0f4:	200f883a 	mov	r7,r4
 880a0f8:	28c00017 	ldw	r3,0(r5)
 880a0fc:	31bffc04 	addi	r6,r6,-16
 880a100:	38c00015 	stw	r3,0(r7)
 880a104:	28800117 	ldw	r2,4(r5)
 880a108:	38800115 	stw	r2,4(r7)
 880a10c:	28c00217 	ldw	r3,8(r5)
 880a110:	38c00215 	stw	r3,8(r7)
 880a114:	28800317 	ldw	r2,12(r5)
 880a118:	29400404 	addi	r5,r5,16
 880a11c:	38800315 	stw	r2,12(r7)
 880a120:	39c00404 	addi	r7,r7,16
 880a124:	41bff436 	bltu	r8,r6,880a0f8 <memcpy+0x44>
 880a128:	008000c4 	movi	r2,3
 880a12c:	1180072e 	bgeu	r2,r6,880a14c <memcpy+0x98>
 880a130:	1007883a 	mov	r3,r2
 880a134:	28800017 	ldw	r2,0(r5)
 880a138:	31bfff04 	addi	r6,r6,-4
 880a13c:	29400104 	addi	r5,r5,4
 880a140:	38800015 	stw	r2,0(r7)
 880a144:	39c00104 	addi	r7,r7,4
 880a148:	19bffa36 	bltu	r3,r6,880a134 <memcpy+0x80>
 880a14c:	3807883a 	mov	r3,r7
 880a150:	003fde06 	br	880a0cc <memcpy+0x18>

0880a154 <memmove>:
 880a154:	2807883a 	mov	r3,r5
 880a158:	2011883a 	mov	r8,r4
 880a15c:	29000c2e 	bgeu	r5,r4,880a190 <memmove+0x3c>
 880a160:	298f883a 	add	r7,r5,r6
 880a164:	21c00a2e 	bgeu	r4,r7,880a190 <memmove+0x3c>
 880a168:	30000726 	beq	r6,zero,880a188 <memmove+0x34>
 880a16c:	2187883a 	add	r3,r4,r6
 880a170:	198dc83a 	sub	r6,r3,r6
 880a174:	39ffffc4 	addi	r7,r7,-1
 880a178:	38800003 	ldbu	r2,0(r7)
 880a17c:	18ffffc4 	addi	r3,r3,-1
 880a180:	18800005 	stb	r2,0(r3)
 880a184:	19bffb1e 	bne	r3,r6,880a174 <memmove+0x20>
 880a188:	2005883a 	mov	r2,r4
 880a18c:	f800283a 	ret
 880a190:	01c003c4 	movi	r7,15
 880a194:	39800a36 	bltu	r7,r6,880a1c0 <memmove+0x6c>
 880a198:	303ffb26 	beq	r6,zero,880a188 <memmove+0x34>
 880a19c:	400f883a 	mov	r7,r8
 880a1a0:	320d883a 	add	r6,r6,r8
 880a1a4:	28800003 	ldbu	r2,0(r5)
 880a1a8:	29400044 	addi	r5,r5,1
 880a1ac:	38800005 	stb	r2,0(r7)
 880a1b0:	39c00044 	addi	r7,r7,1
 880a1b4:	39bffb1e 	bne	r7,r6,880a1a4 <memmove+0x50>
 880a1b8:	2005883a 	mov	r2,r4
 880a1bc:	f800283a 	ret
 880a1c0:	1904b03a 	or	r2,r3,r4
 880a1c4:	108000cc 	andi	r2,r2,3
 880a1c8:	103ff31e 	bne	r2,zero,880a198 <memmove+0x44>
 880a1cc:	3811883a 	mov	r8,r7
 880a1d0:	180b883a 	mov	r5,r3
 880a1d4:	200f883a 	mov	r7,r4
 880a1d8:	28c00017 	ldw	r3,0(r5)
 880a1dc:	31bffc04 	addi	r6,r6,-16
 880a1e0:	38c00015 	stw	r3,0(r7)
 880a1e4:	28800117 	ldw	r2,4(r5)
 880a1e8:	38800115 	stw	r2,4(r7)
 880a1ec:	28c00217 	ldw	r3,8(r5)
 880a1f0:	38c00215 	stw	r3,8(r7)
 880a1f4:	28800317 	ldw	r2,12(r5)
 880a1f8:	29400404 	addi	r5,r5,16
 880a1fc:	38800315 	stw	r2,12(r7)
 880a200:	39c00404 	addi	r7,r7,16
 880a204:	41bff436 	bltu	r8,r6,880a1d8 <memmove+0x84>
 880a208:	008000c4 	movi	r2,3
 880a20c:	1180072e 	bgeu	r2,r6,880a22c <memmove+0xd8>
 880a210:	1007883a 	mov	r3,r2
 880a214:	28800017 	ldw	r2,0(r5)
 880a218:	31bfff04 	addi	r6,r6,-4
 880a21c:	29400104 	addi	r5,r5,4
 880a220:	38800015 	stw	r2,0(r7)
 880a224:	39c00104 	addi	r7,r7,4
 880a228:	19bffa36 	bltu	r3,r6,880a214 <memmove+0xc0>
 880a22c:	3811883a 	mov	r8,r7
 880a230:	003fd906 	br	880a198 <memmove+0x44>

0880a234 <memset>:
 880a234:	008000c4 	movi	r2,3
 880a238:	29403fcc 	andi	r5,r5,255
 880a23c:	2007883a 	mov	r3,r4
 880a240:	1180022e 	bgeu	r2,r6,880a24c <memset+0x18>
 880a244:	2084703a 	and	r2,r4,r2
 880a248:	10000826 	beq	r2,zero,880a26c <memset+0x38>
 880a24c:	30000526 	beq	r6,zero,880a264 <memset+0x30>
 880a250:	2805883a 	mov	r2,r5
 880a254:	30cd883a 	add	r6,r6,r3
 880a258:	18800005 	stb	r2,0(r3)
 880a25c:	18c00044 	addi	r3,r3,1
 880a260:	19bffd1e 	bne	r3,r6,880a258 <memset+0x24>
 880a264:	2005883a 	mov	r2,r4
 880a268:	f800283a 	ret
 880a26c:	2804923a 	slli	r2,r5,8
 880a270:	020003c4 	movi	r8,15
 880a274:	200f883a 	mov	r7,r4
 880a278:	2884b03a 	or	r2,r5,r2
 880a27c:	1006943a 	slli	r3,r2,16
 880a280:	10c6b03a 	or	r3,r2,r3
 880a284:	41800a2e 	bgeu	r8,r6,880a2b0 <memset+0x7c>
 880a288:	4005883a 	mov	r2,r8
 880a28c:	31bffc04 	addi	r6,r6,-16
 880a290:	38c00015 	stw	r3,0(r7)
 880a294:	38c00115 	stw	r3,4(r7)
 880a298:	38c00215 	stw	r3,8(r7)
 880a29c:	38c00315 	stw	r3,12(r7)
 880a2a0:	39c00404 	addi	r7,r7,16
 880a2a4:	11bff936 	bltu	r2,r6,880a28c <memset+0x58>
 880a2a8:	008000c4 	movi	r2,3
 880a2ac:	1180052e 	bgeu	r2,r6,880a2c4 <memset+0x90>
 880a2b0:	31bfff04 	addi	r6,r6,-4
 880a2b4:	008000c4 	movi	r2,3
 880a2b8:	38c00015 	stw	r3,0(r7)
 880a2bc:	39c00104 	addi	r7,r7,4
 880a2c0:	11bffb36 	bltu	r2,r6,880a2b0 <memset+0x7c>
 880a2c4:	3807883a 	mov	r3,r7
 880a2c8:	003fe006 	br	880a24c <memset+0x18>

0880a2cc <_Bfree>:
 880a2cc:	28000826 	beq	r5,zero,880a2f0 <_Bfree+0x24>
 880a2d0:	28800117 	ldw	r2,4(r5)
 880a2d4:	21001317 	ldw	r4,76(r4)
 880a2d8:	1085883a 	add	r2,r2,r2
 880a2dc:	1085883a 	add	r2,r2,r2
 880a2e0:	1105883a 	add	r2,r2,r4
 880a2e4:	10c00017 	ldw	r3,0(r2)
 880a2e8:	28c00015 	stw	r3,0(r5)
 880a2ec:	11400015 	stw	r5,0(r2)
 880a2f0:	f800283a 	ret

0880a2f4 <__hi0bits>:
 880a2f4:	20bfffec 	andhi	r2,r4,65535
 880a2f8:	10001426 	beq	r2,zero,880a34c <__hi0bits+0x58>
 880a2fc:	0007883a 	mov	r3,zero
 880a300:	20bfc02c 	andhi	r2,r4,65280
 880a304:	1000021e 	bne	r2,zero,880a310 <__hi0bits+0x1c>
 880a308:	2008923a 	slli	r4,r4,8
 880a30c:	18c00204 	addi	r3,r3,8
 880a310:	20bc002c 	andhi	r2,r4,61440
 880a314:	1000021e 	bne	r2,zero,880a320 <__hi0bits+0x2c>
 880a318:	2008913a 	slli	r4,r4,4
 880a31c:	18c00104 	addi	r3,r3,4
 880a320:	20b0002c 	andhi	r2,r4,49152
 880a324:	1000031e 	bne	r2,zero,880a334 <__hi0bits+0x40>
 880a328:	2105883a 	add	r2,r4,r4
 880a32c:	18c00084 	addi	r3,r3,2
 880a330:	1089883a 	add	r4,r2,r2
 880a334:	20000316 	blt	r4,zero,880a344 <__hi0bits+0x50>
 880a338:	2090002c 	andhi	r2,r4,16384
 880a33c:	10000626 	beq	r2,zero,880a358 <__hi0bits+0x64>
 880a340:	18c00044 	addi	r3,r3,1
 880a344:	1805883a 	mov	r2,r3
 880a348:	f800283a 	ret
 880a34c:	2008943a 	slli	r4,r4,16
 880a350:	00c00404 	movi	r3,16
 880a354:	003fea06 	br	880a300 <__hi0bits+0xc>
 880a358:	00c00804 	movi	r3,32
 880a35c:	1805883a 	mov	r2,r3
 880a360:	f800283a 	ret

0880a364 <__lo0bits>:
 880a364:	20c00017 	ldw	r3,0(r4)
 880a368:	188001cc 	andi	r2,r3,7
 880a36c:	10000a26 	beq	r2,zero,880a398 <__lo0bits+0x34>
 880a370:	1880004c 	andi	r2,r3,1
 880a374:	1005003a 	cmpeq	r2,r2,zero
 880a378:	10002126 	beq	r2,zero,880a400 <__lo0bits+0x9c>
 880a37c:	1880008c 	andi	r2,r3,2
 880a380:	1000251e 	bne	r2,zero,880a418 <__lo0bits+0xb4>
 880a384:	1804d0ba 	srli	r2,r3,2
 880a388:	01400084 	movi	r5,2
 880a38c:	20800015 	stw	r2,0(r4)
 880a390:	2805883a 	mov	r2,r5
 880a394:	f800283a 	ret
 880a398:	18bfffcc 	andi	r2,r3,65535
 880a39c:	10001526 	beq	r2,zero,880a3f4 <__lo0bits+0x90>
 880a3a0:	000b883a 	mov	r5,zero
 880a3a4:	18803fcc 	andi	r2,r3,255
 880a3a8:	1000021e 	bne	r2,zero,880a3b4 <__lo0bits+0x50>
 880a3ac:	1806d23a 	srli	r3,r3,8
 880a3b0:	29400204 	addi	r5,r5,8
 880a3b4:	188003cc 	andi	r2,r3,15
 880a3b8:	1000021e 	bne	r2,zero,880a3c4 <__lo0bits+0x60>
 880a3bc:	1806d13a 	srli	r3,r3,4
 880a3c0:	29400104 	addi	r5,r5,4
 880a3c4:	188000cc 	andi	r2,r3,3
 880a3c8:	1000021e 	bne	r2,zero,880a3d4 <__lo0bits+0x70>
 880a3cc:	1806d0ba 	srli	r3,r3,2
 880a3d0:	29400084 	addi	r5,r5,2
 880a3d4:	1880004c 	andi	r2,r3,1
 880a3d8:	1000031e 	bne	r2,zero,880a3e8 <__lo0bits+0x84>
 880a3dc:	1806d07a 	srli	r3,r3,1
 880a3e0:	18000a26 	beq	r3,zero,880a40c <__lo0bits+0xa8>
 880a3e4:	29400044 	addi	r5,r5,1
 880a3e8:	2805883a 	mov	r2,r5
 880a3ec:	20c00015 	stw	r3,0(r4)
 880a3f0:	f800283a 	ret
 880a3f4:	1806d43a 	srli	r3,r3,16
 880a3f8:	01400404 	movi	r5,16
 880a3fc:	003fe906 	br	880a3a4 <__lo0bits+0x40>
 880a400:	000b883a 	mov	r5,zero
 880a404:	2805883a 	mov	r2,r5
 880a408:	f800283a 	ret
 880a40c:	01400804 	movi	r5,32
 880a410:	2805883a 	mov	r2,r5
 880a414:	f800283a 	ret
 880a418:	1804d07a 	srli	r2,r3,1
 880a41c:	01400044 	movi	r5,1
 880a420:	20800015 	stw	r2,0(r4)
 880a424:	003fda06 	br	880a390 <__lo0bits+0x2c>

0880a428 <__mcmp>:
 880a428:	20800417 	ldw	r2,16(r4)
 880a42c:	28c00417 	ldw	r3,16(r5)
 880a430:	10cfc83a 	sub	r7,r2,r3
 880a434:	38000c1e 	bne	r7,zero,880a468 <__mcmp+0x40>
 880a438:	18c5883a 	add	r2,r3,r3
 880a43c:	1085883a 	add	r2,r2,r2
 880a440:	10c00504 	addi	r3,r2,20
 880a444:	21000504 	addi	r4,r4,20
 880a448:	28cb883a 	add	r5,r5,r3
 880a44c:	2085883a 	add	r2,r4,r2
 880a450:	10bfff04 	addi	r2,r2,-4
 880a454:	297fff04 	addi	r5,r5,-4
 880a458:	11800017 	ldw	r6,0(r2)
 880a45c:	28c00017 	ldw	r3,0(r5)
 880a460:	30c0031e 	bne	r6,r3,880a470 <__mcmp+0x48>
 880a464:	20bffa36 	bltu	r4,r2,880a450 <__mcmp+0x28>
 880a468:	3805883a 	mov	r2,r7
 880a46c:	f800283a 	ret
 880a470:	30c00336 	bltu	r6,r3,880a480 <__mcmp+0x58>
 880a474:	01c00044 	movi	r7,1
 880a478:	3805883a 	mov	r2,r7
 880a47c:	f800283a 	ret
 880a480:	01ffffc4 	movi	r7,-1
 880a484:	003ff806 	br	880a468 <__mcmp+0x40>

0880a488 <__ulp>:
 880a488:	295ffc2c 	andhi	r5,r5,32752
 880a48c:	013f3034 	movhi	r4,64704
 880a490:	290b883a 	add	r5,r5,r4
 880a494:	0145c83a 	sub	r2,zero,r5
 880a498:	1007d53a 	srai	r3,r2,20
 880a49c:	000d883a 	mov	r6,zero
 880a4a0:	0140040e 	bge	zero,r5,880a4b4 <__ulp+0x2c>
 880a4a4:	280f883a 	mov	r7,r5
 880a4a8:	3807883a 	mov	r3,r7
 880a4ac:	3005883a 	mov	r2,r6
 880a4b0:	f800283a 	ret
 880a4b4:	008004c4 	movi	r2,19
 880a4b8:	193ffb04 	addi	r4,r3,-20
 880a4bc:	10c00c0e 	bge	r2,r3,880a4f0 <__ulp+0x68>
 880a4c0:	008007c4 	movi	r2,31
 880a4c4:	1107c83a 	sub	r3,r2,r4
 880a4c8:	00800784 	movi	r2,30
 880a4cc:	01400044 	movi	r5,1
 880a4d0:	11000216 	blt	r2,r4,880a4dc <__ulp+0x54>
 880a4d4:	00800044 	movi	r2,1
 880a4d8:	10ca983a 	sll	r5,r2,r3
 880a4dc:	000f883a 	mov	r7,zero
 880a4e0:	280d883a 	mov	r6,r5
 880a4e4:	3807883a 	mov	r3,r7
 880a4e8:	3005883a 	mov	r2,r6
 880a4ec:	f800283a 	ret
 880a4f0:	00800234 	movhi	r2,8
 880a4f4:	10cfd83a 	sra	r7,r2,r3
 880a4f8:	000d883a 	mov	r6,zero
 880a4fc:	3005883a 	mov	r2,r6
 880a500:	3807883a 	mov	r3,r7
 880a504:	f800283a 	ret

0880a508 <__b2d>:
 880a508:	20800417 	ldw	r2,16(r4)
 880a50c:	defff904 	addi	sp,sp,-28
 880a510:	dd000415 	stw	r20,16(sp)
 880a514:	1085883a 	add	r2,r2,r2
 880a518:	25000504 	addi	r20,r4,20
 880a51c:	1085883a 	add	r2,r2,r2
 880a520:	dc000015 	stw	r16,0(sp)
 880a524:	a0a1883a 	add	r16,r20,r2
 880a528:	dd400515 	stw	r21,20(sp)
 880a52c:	857fff17 	ldw	r21,-4(r16)
 880a530:	dc400115 	stw	r17,4(sp)
 880a534:	dfc00615 	stw	ra,24(sp)
 880a538:	a809883a 	mov	r4,r21
 880a53c:	2823883a 	mov	r17,r5
 880a540:	dcc00315 	stw	r19,12(sp)
 880a544:	dc800215 	stw	r18,8(sp)
 880a548:	880a2f40 	call	880a2f4 <__hi0bits>
 880a54c:	100b883a 	mov	r5,r2
 880a550:	00800804 	movi	r2,32
 880a554:	1145c83a 	sub	r2,r2,r5
 880a558:	88800015 	stw	r2,0(r17)
 880a55c:	00800284 	movi	r2,10
 880a560:	80ffff04 	addi	r3,r16,-4
 880a564:	11401416 	blt	r2,r5,880a5b8 <__b2d+0xb0>
 880a568:	008002c4 	movi	r2,11
 880a56c:	1149c83a 	sub	r4,r2,r5
 880a570:	a0c02736 	bltu	r20,r3,880a610 <__b2d+0x108>
 880a574:	000d883a 	mov	r6,zero
 880a578:	28800544 	addi	r2,r5,21
 880a57c:	a906d83a 	srl	r3,r21,r4
 880a580:	a884983a 	sll	r2,r21,r2
 880a584:	1ccffc34 	orhi	r19,r3,16368
 880a588:	11a4b03a 	or	r18,r2,r6
 880a58c:	9005883a 	mov	r2,r18
 880a590:	9807883a 	mov	r3,r19
 880a594:	dfc00617 	ldw	ra,24(sp)
 880a598:	dd400517 	ldw	r21,20(sp)
 880a59c:	dd000417 	ldw	r20,16(sp)
 880a5a0:	dcc00317 	ldw	r19,12(sp)
 880a5a4:	dc800217 	ldw	r18,8(sp)
 880a5a8:	dc400117 	ldw	r17,4(sp)
 880a5ac:	dc000017 	ldw	r16,0(sp)
 880a5b0:	dec00704 	addi	sp,sp,28
 880a5b4:	f800283a 	ret
 880a5b8:	a0c00e36 	bltu	r20,r3,880a5f4 <__b2d+0xec>
 880a5bc:	293ffd44 	addi	r4,r5,-11
 880a5c0:	000d883a 	mov	r6,zero
 880a5c4:	20000f26 	beq	r4,zero,880a604 <__b2d+0xfc>
 880a5c8:	00800804 	movi	r2,32
 880a5cc:	110bc83a 	sub	r5,r2,r4
 880a5d0:	a0c01236 	bltu	r20,r3,880a61c <__b2d+0x114>
 880a5d4:	000f883a 	mov	r7,zero
 880a5d8:	a904983a 	sll	r2,r21,r4
 880a5dc:	3146d83a 	srl	r3,r6,r5
 880a5e0:	3108983a 	sll	r4,r6,r4
 880a5e4:	108ffc34 	orhi	r2,r2,16368
 880a5e8:	18a6b03a 	or	r19,r3,r2
 880a5ec:	3924b03a 	or	r18,r7,r4
 880a5f0:	003fe606 	br	880a58c <__b2d+0x84>
 880a5f4:	293ffd44 	addi	r4,r5,-11
 880a5f8:	81bffe17 	ldw	r6,-8(r16)
 880a5fc:	80fffe04 	addi	r3,r16,-8
 880a600:	203ff11e 	bne	r4,zero,880a5c8 <__b2d+0xc0>
 880a604:	accffc34 	orhi	r19,r21,16368
 880a608:	3025883a 	mov	r18,r6
 880a60c:	003fdf06 	br	880a58c <__b2d+0x84>
 880a610:	18bfff17 	ldw	r2,-4(r3)
 880a614:	110cd83a 	srl	r6,r2,r4
 880a618:	003fd706 	br	880a578 <__b2d+0x70>
 880a61c:	18bfff17 	ldw	r2,-4(r3)
 880a620:	114ed83a 	srl	r7,r2,r5
 880a624:	003fec06 	br	880a5d8 <__b2d+0xd0>

0880a628 <__ratio>:
 880a628:	defff904 	addi	sp,sp,-28
 880a62c:	dc400215 	stw	r17,8(sp)
 880a630:	2823883a 	mov	r17,r5
 880a634:	d80b883a 	mov	r5,sp
 880a638:	dfc00615 	stw	ra,24(sp)
 880a63c:	dd000515 	stw	r20,20(sp)
 880a640:	dcc00415 	stw	r19,16(sp)
 880a644:	dc800315 	stw	r18,12(sp)
 880a648:	2025883a 	mov	r18,r4
 880a64c:	880a5080 	call	880a508 <__b2d>
 880a650:	8809883a 	mov	r4,r17
 880a654:	d9400104 	addi	r5,sp,4
 880a658:	1027883a 	mov	r19,r2
 880a65c:	1829883a 	mov	r20,r3
 880a660:	880a5080 	call	880a508 <__b2d>
 880a664:	89000417 	ldw	r4,16(r17)
 880a668:	91c00417 	ldw	r7,16(r18)
 880a66c:	d9800117 	ldw	r6,4(sp)
 880a670:	180b883a 	mov	r5,r3
 880a674:	390fc83a 	sub	r7,r7,r4
 880a678:	1009883a 	mov	r4,r2
 880a67c:	d8800017 	ldw	r2,0(sp)
 880a680:	380e917a 	slli	r7,r7,5
 880a684:	2011883a 	mov	r8,r4
 880a688:	1185c83a 	sub	r2,r2,r6
 880a68c:	11c5883a 	add	r2,r2,r7
 880a690:	1006953a 	slli	r3,r2,20
 880a694:	2813883a 	mov	r9,r5
 880a698:	00800d0e 	bge	zero,r2,880a6d0 <__ratio+0xa8>
 880a69c:	1d29883a 	add	r20,r3,r20
 880a6a0:	a00b883a 	mov	r5,r20
 880a6a4:	480f883a 	mov	r7,r9
 880a6a8:	9809883a 	mov	r4,r19
 880a6ac:	400d883a 	mov	r6,r8
 880a6b0:	8803bf40 	call	8803bf4 <__divdf3>
 880a6b4:	dfc00617 	ldw	ra,24(sp)
 880a6b8:	dd000517 	ldw	r20,20(sp)
 880a6bc:	dcc00417 	ldw	r19,16(sp)
 880a6c0:	dc800317 	ldw	r18,12(sp)
 880a6c4:	dc400217 	ldw	r17,8(sp)
 880a6c8:	dec00704 	addi	sp,sp,28
 880a6cc:	f800283a 	ret
 880a6d0:	28d3c83a 	sub	r9,r5,r3
 880a6d4:	003ff206 	br	880a6a0 <__ratio+0x78>

0880a6d8 <_mprec_log10>:
 880a6d8:	defffe04 	addi	sp,sp,-8
 880a6dc:	008005c4 	movi	r2,23
 880a6e0:	dc000015 	stw	r16,0(sp)
 880a6e4:	dfc00115 	stw	ra,4(sp)
 880a6e8:	2021883a 	mov	r16,r4
 880a6ec:	11000c16 	blt	r2,r4,880a720 <_mprec_log10+0x48>
 880a6f0:	200490fa 	slli	r2,r4,3
 880a6f4:	00c22074 	movhi	r3,2177
 880a6f8:	18c6d804 	addi	r3,r3,7008
 880a6fc:	10c5883a 	add	r2,r2,r3
 880a700:	12400117 	ldw	r9,4(r2)
 880a704:	12000017 	ldw	r8,0(r2)
 880a708:	4807883a 	mov	r3,r9
 880a70c:	4005883a 	mov	r2,r8
 880a710:	dfc00117 	ldw	ra,4(sp)
 880a714:	dc000017 	ldw	r16,0(sp)
 880a718:	dec00204 	addi	sp,sp,8
 880a71c:	f800283a 	ret
 880a720:	0011883a 	mov	r8,zero
 880a724:	024ffc34 	movhi	r9,16368
 880a728:	0005883a 	mov	r2,zero
 880a72c:	00d00934 	movhi	r3,16420
 880a730:	480b883a 	mov	r5,r9
 880a734:	4009883a 	mov	r4,r8
 880a738:	180f883a 	mov	r7,r3
 880a73c:	100d883a 	mov	r6,r2
 880a740:	88038300 	call	8803830 <__muldf3>
 880a744:	843fffc4 	addi	r16,r16,-1
 880a748:	1011883a 	mov	r8,r2
 880a74c:	1813883a 	mov	r9,r3
 880a750:	803ff51e 	bne	r16,zero,880a728 <_mprec_log10+0x50>
 880a754:	4005883a 	mov	r2,r8
 880a758:	4807883a 	mov	r3,r9
 880a75c:	dfc00117 	ldw	ra,4(sp)
 880a760:	dc000017 	ldw	r16,0(sp)
 880a764:	dec00204 	addi	sp,sp,8
 880a768:	f800283a 	ret

0880a76c <__copybits>:
 880a76c:	297fffc4 	addi	r5,r5,-1
 880a770:	30800417 	ldw	r2,16(r6)
 880a774:	280bd17a 	srai	r5,r5,5
 880a778:	31800504 	addi	r6,r6,20
 880a77c:	1085883a 	add	r2,r2,r2
 880a780:	294b883a 	add	r5,r5,r5
 880a784:	294b883a 	add	r5,r5,r5
 880a788:	1085883a 	add	r2,r2,r2
 880a78c:	290b883a 	add	r5,r5,r4
 880a790:	3087883a 	add	r3,r6,r2
 880a794:	29400104 	addi	r5,r5,4
 880a798:	30c0052e 	bgeu	r6,r3,880a7b0 <__copybits+0x44>
 880a79c:	30800017 	ldw	r2,0(r6)
 880a7a0:	31800104 	addi	r6,r6,4
 880a7a4:	20800015 	stw	r2,0(r4)
 880a7a8:	21000104 	addi	r4,r4,4
 880a7ac:	30fffb36 	bltu	r6,r3,880a79c <__copybits+0x30>
 880a7b0:	2140032e 	bgeu	r4,r5,880a7c0 <__copybits+0x54>
 880a7b4:	20000015 	stw	zero,0(r4)
 880a7b8:	21000104 	addi	r4,r4,4
 880a7bc:	217ffd36 	bltu	r4,r5,880a7b4 <__copybits+0x48>
 880a7c0:	f800283a 	ret

0880a7c4 <__any_on>:
 880a7c4:	20800417 	ldw	r2,16(r4)
 880a7c8:	2807d17a 	srai	r3,r5,5
 880a7cc:	21000504 	addi	r4,r4,20
 880a7d0:	10c00d0e 	bge	r2,r3,880a808 <__any_on+0x44>
 880a7d4:	1085883a 	add	r2,r2,r2
 880a7d8:	1085883a 	add	r2,r2,r2
 880a7dc:	208d883a 	add	r6,r4,r2
 880a7e0:	2180182e 	bgeu	r4,r6,880a844 <__any_on+0x80>
 880a7e4:	30bfff17 	ldw	r2,-4(r6)
 880a7e8:	30ffff04 	addi	r3,r6,-4
 880a7ec:	1000041e 	bne	r2,zero,880a800 <__any_on+0x3c>
 880a7f0:	20c0142e 	bgeu	r4,r3,880a844 <__any_on+0x80>
 880a7f4:	18ffff04 	addi	r3,r3,-4
 880a7f8:	18800017 	ldw	r2,0(r3)
 880a7fc:	103ffc26 	beq	r2,zero,880a7f0 <__any_on+0x2c>
 880a800:	00800044 	movi	r2,1
 880a804:	f800283a 	ret
 880a808:	18800a0e 	bge	r3,r2,880a834 <__any_on+0x70>
 880a80c:	294007cc 	andi	r5,r5,31
 880a810:	28000826 	beq	r5,zero,880a834 <__any_on+0x70>
 880a814:	18c5883a 	add	r2,r3,r3
 880a818:	1085883a 	add	r2,r2,r2
 880a81c:	208d883a 	add	r6,r4,r2
 880a820:	30c00017 	ldw	r3,0(r6)
 880a824:	1944d83a 	srl	r2,r3,r5
 880a828:	1144983a 	sll	r2,r2,r5
 880a82c:	18bff41e 	bne	r3,r2,880a800 <__any_on+0x3c>
 880a830:	003feb06 	br	880a7e0 <__any_on+0x1c>
 880a834:	18c5883a 	add	r2,r3,r3
 880a838:	1085883a 	add	r2,r2,r2
 880a83c:	208d883a 	add	r6,r4,r2
 880a840:	003fe706 	br	880a7e0 <__any_on+0x1c>
 880a844:	0005883a 	mov	r2,zero
 880a848:	f800283a 	ret

0880a84c <_Balloc>:
 880a84c:	20c01317 	ldw	r3,76(r4)
 880a850:	defffb04 	addi	sp,sp,-20
 880a854:	dcc00315 	stw	r19,12(sp)
 880a858:	dc800215 	stw	r18,8(sp)
 880a85c:	dfc00415 	stw	ra,16(sp)
 880a860:	2825883a 	mov	r18,r5
 880a864:	dc400115 	stw	r17,4(sp)
 880a868:	dc000015 	stw	r16,0(sp)
 880a86c:	2027883a 	mov	r19,r4
 880a870:	01800404 	movi	r6,16
 880a874:	01400104 	movi	r5,4
 880a878:	18001726 	beq	r3,zero,880a8d8 <_Balloc+0x8c>
 880a87c:	01400044 	movi	r5,1
 880a880:	9485883a 	add	r2,r18,r18
 880a884:	2ca2983a 	sll	r17,r5,r18
 880a888:	1085883a 	add	r2,r2,r2
 880a88c:	10c7883a 	add	r3,r2,r3
 880a890:	1c000017 	ldw	r16,0(r3)
 880a894:	8c4d883a 	add	r6,r17,r17
 880a898:	318d883a 	add	r6,r6,r6
 880a89c:	9809883a 	mov	r4,r19
 880a8a0:	31800504 	addi	r6,r6,20
 880a8a4:	80001226 	beq	r16,zero,880a8f0 <_Balloc+0xa4>
 880a8a8:	80800017 	ldw	r2,0(r16)
 880a8ac:	18800015 	stw	r2,0(r3)
 880a8b0:	80000415 	stw	zero,16(r16)
 880a8b4:	80000315 	stw	zero,12(r16)
 880a8b8:	8005883a 	mov	r2,r16
 880a8bc:	dfc00417 	ldw	ra,16(sp)
 880a8c0:	dcc00317 	ldw	r19,12(sp)
 880a8c4:	dc800217 	ldw	r18,8(sp)
 880a8c8:	dc400117 	ldw	r17,4(sp)
 880a8cc:	dc000017 	ldw	r16,0(sp)
 880a8d0:	dec00504 	addi	sp,sp,20
 880a8d4:	f800283a 	ret
 880a8d8:	880bbe40 	call	880bbe4 <_calloc_r>
 880a8dc:	1007883a 	mov	r3,r2
 880a8e0:	0021883a 	mov	r16,zero
 880a8e4:	98801315 	stw	r2,76(r19)
 880a8e8:	103fe41e 	bne	r2,zero,880a87c <_Balloc+0x30>
 880a8ec:	003ff206 	br	880a8b8 <_Balloc+0x6c>
 880a8f0:	880bbe40 	call	880bbe4 <_calloc_r>
 880a8f4:	103ff026 	beq	r2,zero,880a8b8 <_Balloc+0x6c>
 880a8f8:	1021883a 	mov	r16,r2
 880a8fc:	14800115 	stw	r18,4(r2)
 880a900:	14400215 	stw	r17,8(r2)
 880a904:	003fea06 	br	880a8b0 <_Balloc+0x64>

0880a908 <__d2b>:
 880a908:	defff504 	addi	sp,sp,-44
 880a90c:	dcc00515 	stw	r19,20(sp)
 880a910:	04c00044 	movi	r19,1
 880a914:	dc000215 	stw	r16,8(sp)
 880a918:	2821883a 	mov	r16,r5
 880a91c:	980b883a 	mov	r5,r19
 880a920:	ddc00915 	stw	r23,36(sp)
 880a924:	dd800815 	stw	r22,32(sp)
 880a928:	dd400715 	stw	r21,28(sp)
 880a92c:	dd000615 	stw	r20,24(sp)
 880a930:	dc800415 	stw	r18,16(sp)
 880a934:	dc400315 	stw	r17,12(sp)
 880a938:	dfc00a15 	stw	ra,40(sp)
 880a93c:	3023883a 	mov	r17,r6
 880a940:	382d883a 	mov	r22,r7
 880a944:	ddc00b17 	ldw	r23,44(sp)
 880a948:	880a84c0 	call	880a84c <_Balloc>
 880a94c:	1025883a 	mov	r18,r2
 880a950:	00a00034 	movhi	r2,32768
 880a954:	10bfffc4 	addi	r2,r2,-1
 880a958:	8888703a 	and	r4,r17,r2
 880a95c:	202ad53a 	srli	r21,r4,20
 880a960:	00800434 	movhi	r2,16
 880a964:	10bfffc4 	addi	r2,r2,-1
 880a968:	8886703a 	and	r3,r17,r2
 880a96c:	a829003a 	cmpeq	r20,r21,zero
 880a970:	800b883a 	mov	r5,r16
 880a974:	d8c00115 	stw	r3,4(sp)
 880a978:	94000504 	addi	r16,r18,20
 880a97c:	a000021e 	bne	r20,zero,880a988 <__d2b+0x80>
 880a980:	18c00434 	orhi	r3,r3,16
 880a984:	d8c00115 	stw	r3,4(sp)
 880a988:	28002726 	beq	r5,zero,880aa28 <__d2b+0x120>
 880a98c:	d809883a 	mov	r4,sp
 880a990:	d9400015 	stw	r5,0(sp)
 880a994:	880a3640 	call	880a364 <__lo0bits>
 880a998:	100d883a 	mov	r6,r2
 880a99c:	10003526 	beq	r2,zero,880aa74 <__d2b+0x16c>
 880a9a0:	d8c00117 	ldw	r3,4(sp)
 880a9a4:	00800804 	movi	r2,32
 880a9a8:	1185c83a 	sub	r2,r2,r6
 880a9ac:	d9000017 	ldw	r4,0(sp)
 880a9b0:	1886983a 	sll	r3,r3,r2
 880a9b4:	1906b03a 	or	r3,r3,r4
 880a9b8:	90c00515 	stw	r3,20(r18)
 880a9bc:	d8c00117 	ldw	r3,4(sp)
 880a9c0:	1986d83a 	srl	r3,r3,r6
 880a9c4:	d8c00115 	stw	r3,4(sp)
 880a9c8:	180b003a 	cmpeq	r5,r3,zero
 880a9cc:	00800084 	movi	r2,2
 880a9d0:	114bc83a 	sub	r5,r2,r5
 880a9d4:	80c00115 	stw	r3,4(r16)
 880a9d8:	91400415 	stw	r5,16(r18)
 880a9dc:	a0001a1e 	bne	r20,zero,880aa48 <__d2b+0x140>
 880a9e0:	3545883a 	add	r2,r6,r21
 880a9e4:	10bef344 	addi	r2,r2,-1075
 880a9e8:	00c00d44 	movi	r3,53
 880a9ec:	b0800015 	stw	r2,0(r22)
 880a9f0:	1987c83a 	sub	r3,r3,r6
 880a9f4:	b8c00015 	stw	r3,0(r23)
 880a9f8:	9005883a 	mov	r2,r18
 880a9fc:	dfc00a17 	ldw	ra,40(sp)
 880aa00:	ddc00917 	ldw	r23,36(sp)
 880aa04:	dd800817 	ldw	r22,32(sp)
 880aa08:	dd400717 	ldw	r21,28(sp)
 880aa0c:	dd000617 	ldw	r20,24(sp)
 880aa10:	dcc00517 	ldw	r19,20(sp)
 880aa14:	dc800417 	ldw	r18,16(sp)
 880aa18:	dc400317 	ldw	r17,12(sp)
 880aa1c:	dc000217 	ldw	r16,8(sp)
 880aa20:	dec00b04 	addi	sp,sp,44
 880aa24:	f800283a 	ret
 880aa28:	d9000104 	addi	r4,sp,4
 880aa2c:	880a3640 	call	880a364 <__lo0bits>
 880aa30:	11800804 	addi	r6,r2,32
 880aa34:	d8800117 	ldw	r2,4(sp)
 880aa38:	94c00415 	stw	r19,16(r18)
 880aa3c:	980b883a 	mov	r5,r19
 880aa40:	90800515 	stw	r2,20(r18)
 880aa44:	a03fe626 	beq	r20,zero,880a9e0 <__d2b+0xd8>
 880aa48:	2945883a 	add	r2,r5,r5
 880aa4c:	1085883a 	add	r2,r2,r2
 880aa50:	1405883a 	add	r2,r2,r16
 880aa54:	113fff17 	ldw	r4,-4(r2)
 880aa58:	30fef384 	addi	r3,r6,-1074
 880aa5c:	2820917a 	slli	r16,r5,5
 880aa60:	b0c00015 	stw	r3,0(r22)
 880aa64:	880a2f40 	call	880a2f4 <__hi0bits>
 880aa68:	80a1c83a 	sub	r16,r16,r2
 880aa6c:	bc000015 	stw	r16,0(r23)
 880aa70:	003fe106 	br	880a9f8 <__d2b+0xf0>
 880aa74:	d8800017 	ldw	r2,0(sp)
 880aa78:	90800515 	stw	r2,20(r18)
 880aa7c:	d8c00117 	ldw	r3,4(sp)
 880aa80:	003fd106 	br	880a9c8 <__d2b+0xc0>

0880aa84 <__mdiff>:
 880aa84:	defffb04 	addi	sp,sp,-20
 880aa88:	dc000015 	stw	r16,0(sp)
 880aa8c:	2821883a 	mov	r16,r5
 880aa90:	dc800215 	stw	r18,8(sp)
 880aa94:	300b883a 	mov	r5,r6
 880aa98:	2025883a 	mov	r18,r4
 880aa9c:	8009883a 	mov	r4,r16
 880aaa0:	dc400115 	stw	r17,4(sp)
 880aaa4:	dfc00415 	stw	ra,16(sp)
 880aaa8:	dcc00315 	stw	r19,12(sp)
 880aaac:	3023883a 	mov	r17,r6
 880aab0:	880a4280 	call	880a428 <__mcmp>
 880aab4:	10004226 	beq	r2,zero,880abc0 <__mdiff+0x13c>
 880aab8:	10005016 	blt	r2,zero,880abfc <__mdiff+0x178>
 880aabc:	0027883a 	mov	r19,zero
 880aac0:	81400117 	ldw	r5,4(r16)
 880aac4:	9009883a 	mov	r4,r18
 880aac8:	880a84c0 	call	880a84c <_Balloc>
 880aacc:	1019883a 	mov	r12,r2
 880aad0:	82800417 	ldw	r10,16(r16)
 880aad4:	88800417 	ldw	r2,16(r17)
 880aad8:	81800504 	addi	r6,r16,20
 880aadc:	5287883a 	add	r3,r10,r10
 880aae0:	1085883a 	add	r2,r2,r2
 880aae4:	18c7883a 	add	r3,r3,r3
 880aae8:	1085883a 	add	r2,r2,r2
 880aaec:	8a000504 	addi	r8,r17,20
 880aaf0:	64c00315 	stw	r19,12(r12)
 880aaf4:	30db883a 	add	r13,r6,r3
 880aaf8:	4097883a 	add	r11,r8,r2
 880aafc:	61c00504 	addi	r7,r12,20
 880ab00:	0013883a 	mov	r9,zero
 880ab04:	31000017 	ldw	r4,0(r6)
 880ab08:	41400017 	ldw	r5,0(r8)
 880ab0c:	42000104 	addi	r8,r8,4
 880ab10:	20bfffcc 	andi	r2,r4,65535
 880ab14:	28ffffcc 	andi	r3,r5,65535
 880ab18:	10c5c83a 	sub	r2,r2,r3
 880ab1c:	1245883a 	add	r2,r2,r9
 880ab20:	2008d43a 	srli	r4,r4,16
 880ab24:	280ad43a 	srli	r5,r5,16
 880ab28:	1007d43a 	srai	r3,r2,16
 880ab2c:	3880000d 	sth	r2,0(r7)
 880ab30:	2149c83a 	sub	r4,r4,r5
 880ab34:	20c9883a 	add	r4,r4,r3
 880ab38:	3900008d 	sth	r4,2(r7)
 880ab3c:	31800104 	addi	r6,r6,4
 880ab40:	39c00104 	addi	r7,r7,4
 880ab44:	2013d43a 	srai	r9,r4,16
 880ab48:	42ffee36 	bltu	r8,r11,880ab04 <__mdiff+0x80>
 880ab4c:	33400c2e 	bgeu	r6,r13,880ab80 <__mdiff+0xfc>
 880ab50:	30800017 	ldw	r2,0(r6)
 880ab54:	31800104 	addi	r6,r6,4
 880ab58:	10ffffcc 	andi	r3,r2,65535
 880ab5c:	1a47883a 	add	r3,r3,r9
 880ab60:	1004d43a 	srli	r2,r2,16
 880ab64:	1809d43a 	srai	r4,r3,16
 880ab68:	38c0000d 	sth	r3,0(r7)
 880ab6c:	1105883a 	add	r2,r2,r4
 880ab70:	3880008d 	sth	r2,2(r7)
 880ab74:	1013d43a 	srai	r9,r2,16
 880ab78:	39c00104 	addi	r7,r7,4
 880ab7c:	337ff436 	bltu	r6,r13,880ab50 <__mdiff+0xcc>
 880ab80:	38bfff17 	ldw	r2,-4(r7)
 880ab84:	38ffff04 	addi	r3,r7,-4
 880ab88:	1000041e 	bne	r2,zero,880ab9c <__mdiff+0x118>
 880ab8c:	18ffff04 	addi	r3,r3,-4
 880ab90:	18800017 	ldw	r2,0(r3)
 880ab94:	52bfffc4 	addi	r10,r10,-1
 880ab98:	103ffc26 	beq	r2,zero,880ab8c <__mdiff+0x108>
 880ab9c:	6005883a 	mov	r2,r12
 880aba0:	62800415 	stw	r10,16(r12)
 880aba4:	dfc00417 	ldw	ra,16(sp)
 880aba8:	dcc00317 	ldw	r19,12(sp)
 880abac:	dc800217 	ldw	r18,8(sp)
 880abb0:	dc400117 	ldw	r17,4(sp)
 880abb4:	dc000017 	ldw	r16,0(sp)
 880abb8:	dec00504 	addi	sp,sp,20
 880abbc:	f800283a 	ret
 880abc0:	9009883a 	mov	r4,r18
 880abc4:	000b883a 	mov	r5,zero
 880abc8:	880a84c0 	call	880a84c <_Balloc>
 880abcc:	1019883a 	mov	r12,r2
 880abd0:	00800044 	movi	r2,1
 880abd4:	60800415 	stw	r2,16(r12)
 880abd8:	6005883a 	mov	r2,r12
 880abdc:	60000515 	stw	zero,20(r12)
 880abe0:	dfc00417 	ldw	ra,16(sp)
 880abe4:	dcc00317 	ldw	r19,12(sp)
 880abe8:	dc800217 	ldw	r18,8(sp)
 880abec:	dc400117 	ldw	r17,4(sp)
 880abf0:	dc000017 	ldw	r16,0(sp)
 880abf4:	dec00504 	addi	sp,sp,20
 880abf8:	f800283a 	ret
 880abfc:	880d883a 	mov	r6,r17
 880ac00:	04c00044 	movi	r19,1
 880ac04:	8023883a 	mov	r17,r16
 880ac08:	3021883a 	mov	r16,r6
 880ac0c:	003fac06 	br	880aac0 <__mdiff+0x3c>

0880ac10 <__lshift>:
 880ac10:	defff904 	addi	sp,sp,-28
 880ac14:	28800417 	ldw	r2,16(r5)
 880ac18:	dc000015 	stw	r16,0(sp)
 880ac1c:	3021d17a 	srai	r16,r6,5
 880ac20:	28c00217 	ldw	r3,8(r5)
 880ac24:	10800044 	addi	r2,r2,1
 880ac28:	dc400115 	stw	r17,4(sp)
 880ac2c:	80a3883a 	add	r17,r16,r2
 880ac30:	dd400515 	stw	r21,20(sp)
 880ac34:	dd000415 	stw	r20,16(sp)
 880ac38:	dc800215 	stw	r18,8(sp)
 880ac3c:	dfc00615 	stw	ra,24(sp)
 880ac40:	2825883a 	mov	r18,r5
 880ac44:	dcc00315 	stw	r19,12(sp)
 880ac48:	3029883a 	mov	r20,r6
 880ac4c:	202b883a 	mov	r21,r4
 880ac50:	29400117 	ldw	r5,4(r5)
 880ac54:	1c40030e 	bge	r3,r17,880ac64 <__lshift+0x54>
 880ac58:	18c7883a 	add	r3,r3,r3
 880ac5c:	29400044 	addi	r5,r5,1
 880ac60:	1c7ffd16 	blt	r3,r17,880ac58 <__lshift+0x48>
 880ac64:	a809883a 	mov	r4,r21
 880ac68:	880a84c0 	call	880a84c <_Balloc>
 880ac6c:	1027883a 	mov	r19,r2
 880ac70:	11400504 	addi	r5,r2,20
 880ac74:	0400090e 	bge	zero,r16,880ac9c <__lshift+0x8c>
 880ac78:	2805883a 	mov	r2,r5
 880ac7c:	0007883a 	mov	r3,zero
 880ac80:	18c00044 	addi	r3,r3,1
 880ac84:	10000015 	stw	zero,0(r2)
 880ac88:	10800104 	addi	r2,r2,4
 880ac8c:	80fffc1e 	bne	r16,r3,880ac80 <__lshift+0x70>
 880ac90:	8405883a 	add	r2,r16,r16
 880ac94:	1085883a 	add	r2,r2,r2
 880ac98:	288b883a 	add	r5,r5,r2
 880ac9c:	90800417 	ldw	r2,16(r18)
 880aca0:	91000504 	addi	r4,r18,20
 880aca4:	a18007cc 	andi	r6,r20,31
 880aca8:	1085883a 	add	r2,r2,r2
 880acac:	1085883a 	add	r2,r2,r2
 880acb0:	208f883a 	add	r7,r4,r2
 880acb4:	30001e26 	beq	r6,zero,880ad30 <__lshift+0x120>
 880acb8:	00800804 	movi	r2,32
 880acbc:	1191c83a 	sub	r8,r2,r6
 880acc0:	0007883a 	mov	r3,zero
 880acc4:	20800017 	ldw	r2,0(r4)
 880acc8:	1184983a 	sll	r2,r2,r6
 880accc:	1884b03a 	or	r2,r3,r2
 880acd0:	28800015 	stw	r2,0(r5)
 880acd4:	20c00017 	ldw	r3,0(r4)
 880acd8:	21000104 	addi	r4,r4,4
 880acdc:	29400104 	addi	r5,r5,4
 880ace0:	1a06d83a 	srl	r3,r3,r8
 880ace4:	21fff736 	bltu	r4,r7,880acc4 <__lshift+0xb4>
 880ace8:	28c00015 	stw	r3,0(r5)
 880acec:	18000126 	beq	r3,zero,880acf4 <__lshift+0xe4>
 880acf0:	8c400044 	addi	r17,r17,1
 880acf4:	88bfffc4 	addi	r2,r17,-1
 880acf8:	98800415 	stw	r2,16(r19)
 880acfc:	a809883a 	mov	r4,r21
 880ad00:	900b883a 	mov	r5,r18
 880ad04:	880a2cc0 	call	880a2cc <_Bfree>
 880ad08:	9805883a 	mov	r2,r19
 880ad0c:	dfc00617 	ldw	ra,24(sp)
 880ad10:	dd400517 	ldw	r21,20(sp)
 880ad14:	dd000417 	ldw	r20,16(sp)
 880ad18:	dcc00317 	ldw	r19,12(sp)
 880ad1c:	dc800217 	ldw	r18,8(sp)
 880ad20:	dc400117 	ldw	r17,4(sp)
 880ad24:	dc000017 	ldw	r16,0(sp)
 880ad28:	dec00704 	addi	sp,sp,28
 880ad2c:	f800283a 	ret
 880ad30:	20800017 	ldw	r2,0(r4)
 880ad34:	21000104 	addi	r4,r4,4
 880ad38:	28800015 	stw	r2,0(r5)
 880ad3c:	29400104 	addi	r5,r5,4
 880ad40:	21ffec2e 	bgeu	r4,r7,880acf4 <__lshift+0xe4>
 880ad44:	20800017 	ldw	r2,0(r4)
 880ad48:	21000104 	addi	r4,r4,4
 880ad4c:	28800015 	stw	r2,0(r5)
 880ad50:	29400104 	addi	r5,r5,4
 880ad54:	21fff636 	bltu	r4,r7,880ad30 <__lshift+0x120>
 880ad58:	003fe606 	br	880acf4 <__lshift+0xe4>

0880ad5c <__multiply>:
 880ad5c:	defff904 	addi	sp,sp,-28
 880ad60:	dcc00315 	stw	r19,12(sp)
 880ad64:	dc800215 	stw	r18,8(sp)
 880ad68:	2cc00417 	ldw	r19,16(r5)
 880ad6c:	34800417 	ldw	r18,16(r6)
 880ad70:	dd000415 	stw	r20,16(sp)
 880ad74:	dc400115 	stw	r17,4(sp)
 880ad78:	dfc00615 	stw	ra,24(sp)
 880ad7c:	dd400515 	stw	r21,20(sp)
 880ad80:	dc000015 	stw	r16,0(sp)
 880ad84:	2823883a 	mov	r17,r5
 880ad88:	3029883a 	mov	r20,r6
 880ad8c:	9c80040e 	bge	r19,r18,880ada0 <__multiply+0x44>
 880ad90:	9027883a 	mov	r19,r18
 880ad94:	2c800417 	ldw	r18,16(r5)
 880ad98:	2829883a 	mov	r20,r5
 880ad9c:	3023883a 	mov	r17,r6
 880ada0:	88800217 	ldw	r2,8(r17)
 880ada4:	9ca1883a 	add	r16,r19,r18
 880ada8:	89400117 	ldw	r5,4(r17)
 880adac:	1400010e 	bge	r2,r16,880adb4 <__multiply+0x58>
 880adb0:	29400044 	addi	r5,r5,1
 880adb4:	880a84c0 	call	880a84c <_Balloc>
 880adb8:	102b883a 	mov	r21,r2
 880adbc:	8405883a 	add	r2,r16,r16
 880adc0:	1085883a 	add	r2,r2,r2
 880adc4:	a9000504 	addi	r4,r21,20
 880adc8:	209d883a 	add	r14,r4,r2
 880adcc:	2380042e 	bgeu	r4,r14,880ade0 <__multiply+0x84>
 880add0:	2005883a 	mov	r2,r4
 880add4:	10000015 	stw	zero,0(r2)
 880add8:	10800104 	addi	r2,r2,4
 880addc:	13bffd36 	bltu	r2,r14,880add4 <__multiply+0x78>
 880ade0:	9485883a 	add	r2,r18,r18
 880ade4:	9cc7883a 	add	r3,r19,r19
 880ade8:	a1800504 	addi	r6,r20,20
 880adec:	1085883a 	add	r2,r2,r2
 880adf0:	8b400504 	addi	r13,r17,20
 880adf4:	18c7883a 	add	r3,r3,r3
 880adf8:	309f883a 	add	r15,r6,r2
 880adfc:	68d7883a 	add	r11,r13,r3
 880ae00:	33c03b2e 	bgeu	r6,r15,880aef0 <__multiply+0x194>
 880ae04:	2019883a 	mov	r12,r4
 880ae08:	30800017 	ldw	r2,0(r6)
 880ae0c:	127fffcc 	andi	r9,r2,65535
 880ae10:	48001826 	beq	r9,zero,880ae74 <__multiply+0x118>
 880ae14:	6811883a 	mov	r8,r13
 880ae18:	600f883a 	mov	r7,r12
 880ae1c:	0015883a 	mov	r10,zero
 880ae20:	40c00017 	ldw	r3,0(r8)
 880ae24:	39400017 	ldw	r5,0(r7)
 880ae28:	42000104 	addi	r8,r8,4
 880ae2c:	193fffcc 	andi	r4,r3,65535
 880ae30:	4909383a 	mul	r4,r9,r4
 880ae34:	1806d43a 	srli	r3,r3,16
 880ae38:	28bfffcc 	andi	r2,r5,65535
 880ae3c:	5085883a 	add	r2,r10,r2
 880ae40:	2089883a 	add	r4,r4,r2
 880ae44:	48c7383a 	mul	r3,r9,r3
 880ae48:	280ad43a 	srli	r5,r5,16
 880ae4c:	2004d43a 	srli	r2,r4,16
 880ae50:	3900000d 	sth	r4,0(r7)
 880ae54:	1947883a 	add	r3,r3,r5
 880ae58:	10c5883a 	add	r2,r2,r3
 880ae5c:	3880008d 	sth	r2,2(r7)
 880ae60:	1014d43a 	srli	r10,r2,16
 880ae64:	39c00104 	addi	r7,r7,4
 880ae68:	42ffed36 	bltu	r8,r11,880ae20 <__multiply+0xc4>
 880ae6c:	3a800015 	stw	r10,0(r7)
 880ae70:	30800017 	ldw	r2,0(r6)
 880ae74:	1012d43a 	srli	r9,r2,16
 880ae78:	48001926 	beq	r9,zero,880aee0 <__multiply+0x184>
 880ae7c:	60800017 	ldw	r2,0(r12)
 880ae80:	6811883a 	mov	r8,r13
 880ae84:	600f883a 	mov	r7,r12
 880ae88:	0015883a 	mov	r10,zero
 880ae8c:	100b883a 	mov	r5,r2
 880ae90:	41000017 	ldw	r4,0(r8)
 880ae94:	2806d43a 	srli	r3,r5,16
 880ae98:	3880000d 	sth	r2,0(r7)
 880ae9c:	20bfffcc 	andi	r2,r4,65535
 880aea0:	4885383a 	mul	r2,r9,r2
 880aea4:	50c7883a 	add	r3,r10,r3
 880aea8:	2008d43a 	srli	r4,r4,16
 880aeac:	10c5883a 	add	r2,r2,r3
 880aeb0:	3880008d 	sth	r2,2(r7)
 880aeb4:	39c00104 	addi	r7,r7,4
 880aeb8:	39400017 	ldw	r5,0(r7)
 880aebc:	4909383a 	mul	r4,r9,r4
 880aec0:	1004d43a 	srli	r2,r2,16
 880aec4:	28ffffcc 	andi	r3,r5,65535
 880aec8:	20c9883a 	add	r4,r4,r3
 880aecc:	1105883a 	add	r2,r2,r4
 880aed0:	42000104 	addi	r8,r8,4
 880aed4:	1014d43a 	srli	r10,r2,16
 880aed8:	42ffed36 	bltu	r8,r11,880ae90 <__multiply+0x134>
 880aedc:	38800015 	stw	r2,0(r7)
 880aee0:	31800104 	addi	r6,r6,4
 880aee4:	33c0022e 	bgeu	r6,r15,880aef0 <__multiply+0x194>
 880aee8:	63000104 	addi	r12,r12,4
 880aeec:	003fc606 	br	880ae08 <__multiply+0xac>
 880aef0:	0400090e 	bge	zero,r16,880af18 <__multiply+0x1bc>
 880aef4:	70bfff17 	ldw	r2,-4(r14)
 880aef8:	70ffff04 	addi	r3,r14,-4
 880aefc:	10000326 	beq	r2,zero,880af0c <__multiply+0x1b0>
 880af00:	00000506 	br	880af18 <__multiply+0x1bc>
 880af04:	18800017 	ldw	r2,0(r3)
 880af08:	1000031e 	bne	r2,zero,880af18 <__multiply+0x1bc>
 880af0c:	843fffc4 	addi	r16,r16,-1
 880af10:	18ffff04 	addi	r3,r3,-4
 880af14:	803ffb1e 	bne	r16,zero,880af04 <__multiply+0x1a8>
 880af18:	a805883a 	mov	r2,r21
 880af1c:	ac000415 	stw	r16,16(r21)
 880af20:	dfc00617 	ldw	ra,24(sp)
 880af24:	dd400517 	ldw	r21,20(sp)
 880af28:	dd000417 	ldw	r20,16(sp)
 880af2c:	dcc00317 	ldw	r19,12(sp)
 880af30:	dc800217 	ldw	r18,8(sp)
 880af34:	dc400117 	ldw	r17,4(sp)
 880af38:	dc000017 	ldw	r16,0(sp)
 880af3c:	dec00704 	addi	sp,sp,28
 880af40:	f800283a 	ret

0880af44 <__i2b>:
 880af44:	defffd04 	addi	sp,sp,-12
 880af48:	dc000015 	stw	r16,0(sp)
 880af4c:	04000044 	movi	r16,1
 880af50:	dc800115 	stw	r18,4(sp)
 880af54:	2825883a 	mov	r18,r5
 880af58:	800b883a 	mov	r5,r16
 880af5c:	dfc00215 	stw	ra,8(sp)
 880af60:	880a84c0 	call	880a84c <_Balloc>
 880af64:	14000415 	stw	r16,16(r2)
 880af68:	14800515 	stw	r18,20(r2)
 880af6c:	dfc00217 	ldw	ra,8(sp)
 880af70:	dc800117 	ldw	r18,4(sp)
 880af74:	dc000017 	ldw	r16,0(sp)
 880af78:	dec00304 	addi	sp,sp,12
 880af7c:	f800283a 	ret

0880af80 <__multadd>:
 880af80:	defffa04 	addi	sp,sp,-24
 880af84:	dc800215 	stw	r18,8(sp)
 880af88:	2c800417 	ldw	r18,16(r5)
 880af8c:	dd000415 	stw	r20,16(sp)
 880af90:	dcc00315 	stw	r19,12(sp)
 880af94:	dc000015 	stw	r16,0(sp)
 880af98:	dfc00515 	stw	ra,20(sp)
 880af9c:	3821883a 	mov	r16,r7
 880afa0:	dc400115 	stw	r17,4(sp)
 880afa4:	2827883a 	mov	r19,r5
 880afa8:	2029883a 	mov	r20,r4
 880afac:	2a000504 	addi	r8,r5,20
 880afb0:	000f883a 	mov	r7,zero
 880afb4:	40800017 	ldw	r2,0(r8)
 880afb8:	39c00044 	addi	r7,r7,1
 880afbc:	10ffffcc 	andi	r3,r2,65535
 880afc0:	1987383a 	mul	r3,r3,r6
 880afc4:	1004d43a 	srli	r2,r2,16
 880afc8:	1c07883a 	add	r3,r3,r16
 880afcc:	180ad43a 	srli	r5,r3,16
 880afd0:	1185383a 	mul	r2,r2,r6
 880afd4:	18ffffcc 	andi	r3,r3,65535
 880afd8:	1145883a 	add	r2,r2,r5
 880afdc:	1008943a 	slli	r4,r2,16
 880afe0:	1020d43a 	srli	r16,r2,16
 880afe4:	20c9883a 	add	r4,r4,r3
 880afe8:	41000015 	stw	r4,0(r8)
 880afec:	42000104 	addi	r8,r8,4
 880aff0:	3cbff016 	blt	r7,r18,880afb4 <__multadd+0x34>
 880aff4:	80000826 	beq	r16,zero,880b018 <__multadd+0x98>
 880aff8:	98800217 	ldw	r2,8(r19)
 880affc:	90800f0e 	bge	r18,r2,880b03c <__multadd+0xbc>
 880b000:	9485883a 	add	r2,r18,r18
 880b004:	1085883a 	add	r2,r2,r2
 880b008:	14c5883a 	add	r2,r2,r19
 880b00c:	90c00044 	addi	r3,r18,1
 880b010:	14000515 	stw	r16,20(r2)
 880b014:	98c00415 	stw	r3,16(r19)
 880b018:	9805883a 	mov	r2,r19
 880b01c:	dfc00517 	ldw	ra,20(sp)
 880b020:	dd000417 	ldw	r20,16(sp)
 880b024:	dcc00317 	ldw	r19,12(sp)
 880b028:	dc800217 	ldw	r18,8(sp)
 880b02c:	dc400117 	ldw	r17,4(sp)
 880b030:	dc000017 	ldw	r16,0(sp)
 880b034:	dec00604 	addi	sp,sp,24
 880b038:	f800283a 	ret
 880b03c:	99400117 	ldw	r5,4(r19)
 880b040:	a009883a 	mov	r4,r20
 880b044:	29400044 	addi	r5,r5,1
 880b048:	880a84c0 	call	880a84c <_Balloc>
 880b04c:	99800417 	ldw	r6,16(r19)
 880b050:	99400304 	addi	r5,r19,12
 880b054:	11000304 	addi	r4,r2,12
 880b058:	318d883a 	add	r6,r6,r6
 880b05c:	318d883a 	add	r6,r6,r6
 880b060:	31800204 	addi	r6,r6,8
 880b064:	1023883a 	mov	r17,r2
 880b068:	880a0b40 	call	880a0b4 <memcpy>
 880b06c:	980b883a 	mov	r5,r19
 880b070:	a009883a 	mov	r4,r20
 880b074:	880a2cc0 	call	880a2cc <_Bfree>
 880b078:	8827883a 	mov	r19,r17
 880b07c:	003fe006 	br	880b000 <__multadd+0x80>

0880b080 <__pow5mult>:
 880b080:	defffa04 	addi	sp,sp,-24
 880b084:	308000cc 	andi	r2,r6,3
 880b088:	dd000415 	stw	r20,16(sp)
 880b08c:	dcc00315 	stw	r19,12(sp)
 880b090:	dc000015 	stw	r16,0(sp)
 880b094:	dfc00515 	stw	ra,20(sp)
 880b098:	dc800215 	stw	r18,8(sp)
 880b09c:	dc400115 	stw	r17,4(sp)
 880b0a0:	3021883a 	mov	r16,r6
 880b0a4:	2027883a 	mov	r19,r4
 880b0a8:	2829883a 	mov	r20,r5
 880b0ac:	10002b1e 	bne	r2,zero,880b15c <__pow5mult+0xdc>
 880b0b0:	8025d0ba 	srai	r18,r16,2
 880b0b4:	90001b26 	beq	r18,zero,880b124 <__pow5mult+0xa4>
 880b0b8:	9c001217 	ldw	r16,72(r19)
 880b0bc:	8000081e 	bne	r16,zero,880b0e0 <__pow5mult+0x60>
 880b0c0:	00003006 	br	880b184 <__pow5mult+0x104>
 880b0c4:	800b883a 	mov	r5,r16
 880b0c8:	800d883a 	mov	r6,r16
 880b0cc:	9809883a 	mov	r4,r19
 880b0d0:	90001426 	beq	r18,zero,880b124 <__pow5mult+0xa4>
 880b0d4:	80800017 	ldw	r2,0(r16)
 880b0d8:	10001b26 	beq	r2,zero,880b148 <__pow5mult+0xc8>
 880b0dc:	1021883a 	mov	r16,r2
 880b0e0:	9080004c 	andi	r2,r18,1
 880b0e4:	1005003a 	cmpeq	r2,r2,zero
 880b0e8:	9025d07a 	srai	r18,r18,1
 880b0ec:	800d883a 	mov	r6,r16
 880b0f0:	9809883a 	mov	r4,r19
 880b0f4:	a00b883a 	mov	r5,r20
 880b0f8:	103ff21e 	bne	r2,zero,880b0c4 <__pow5mult+0x44>
 880b0fc:	880ad5c0 	call	880ad5c <__multiply>
 880b100:	a00b883a 	mov	r5,r20
 880b104:	9809883a 	mov	r4,r19
 880b108:	1023883a 	mov	r17,r2
 880b10c:	880a2cc0 	call	880a2cc <_Bfree>
 880b110:	8829883a 	mov	r20,r17
 880b114:	800b883a 	mov	r5,r16
 880b118:	800d883a 	mov	r6,r16
 880b11c:	9809883a 	mov	r4,r19
 880b120:	903fec1e 	bne	r18,zero,880b0d4 <__pow5mult+0x54>
 880b124:	a005883a 	mov	r2,r20
 880b128:	dfc00517 	ldw	ra,20(sp)
 880b12c:	dd000417 	ldw	r20,16(sp)
 880b130:	dcc00317 	ldw	r19,12(sp)
 880b134:	dc800217 	ldw	r18,8(sp)
 880b138:	dc400117 	ldw	r17,4(sp)
 880b13c:	dc000017 	ldw	r16,0(sp)
 880b140:	dec00604 	addi	sp,sp,24
 880b144:	f800283a 	ret
 880b148:	880ad5c0 	call	880ad5c <__multiply>
 880b14c:	80800015 	stw	r2,0(r16)
 880b150:	1021883a 	mov	r16,r2
 880b154:	10000015 	stw	zero,0(r2)
 880b158:	003fe106 	br	880b0e0 <__pow5mult+0x60>
 880b15c:	1085883a 	add	r2,r2,r2
 880b160:	00c22074 	movhi	r3,2177
 880b164:	18c71e04 	addi	r3,r3,7288
 880b168:	1085883a 	add	r2,r2,r2
 880b16c:	10c5883a 	add	r2,r2,r3
 880b170:	11bfff17 	ldw	r6,-4(r2)
 880b174:	000f883a 	mov	r7,zero
 880b178:	880af800 	call	880af80 <__multadd>
 880b17c:	1029883a 	mov	r20,r2
 880b180:	003fcb06 	br	880b0b0 <__pow5mult+0x30>
 880b184:	9809883a 	mov	r4,r19
 880b188:	01409c44 	movi	r5,625
 880b18c:	880af440 	call	880af44 <__i2b>
 880b190:	98801215 	stw	r2,72(r19)
 880b194:	1021883a 	mov	r16,r2
 880b198:	10000015 	stw	zero,0(r2)
 880b19c:	003fd006 	br	880b0e0 <__pow5mult+0x60>

0880b1a0 <__s2b>:
 880b1a0:	defff904 	addi	sp,sp,-28
 880b1a4:	dcc00315 	stw	r19,12(sp)
 880b1a8:	dc800215 	stw	r18,8(sp)
 880b1ac:	2827883a 	mov	r19,r5
 880b1b0:	2025883a 	mov	r18,r4
 880b1b4:	01400244 	movi	r5,9
 880b1b8:	39000204 	addi	r4,r7,8
 880b1bc:	dd000415 	stw	r20,16(sp)
 880b1c0:	dc400115 	stw	r17,4(sp)
 880b1c4:	dfc00615 	stw	ra,24(sp)
 880b1c8:	dd400515 	stw	r21,20(sp)
 880b1cc:	dc000015 	stw	r16,0(sp)
 880b1d0:	3829883a 	mov	r20,r7
 880b1d4:	3023883a 	mov	r17,r6
 880b1d8:	88043140 	call	8804314 <__divsi3>
 880b1dc:	00c00044 	movi	r3,1
 880b1e0:	1880350e 	bge	r3,r2,880b2b8 <__s2b+0x118>
 880b1e4:	000b883a 	mov	r5,zero
 880b1e8:	18c7883a 	add	r3,r3,r3
 880b1ec:	29400044 	addi	r5,r5,1
 880b1f0:	18bffd16 	blt	r3,r2,880b1e8 <__s2b+0x48>
 880b1f4:	9009883a 	mov	r4,r18
 880b1f8:	880a84c0 	call	880a84c <_Balloc>
 880b1fc:	1011883a 	mov	r8,r2
 880b200:	d8800717 	ldw	r2,28(sp)
 880b204:	00c00044 	movi	r3,1
 880b208:	01800244 	movi	r6,9
 880b20c:	40800515 	stw	r2,20(r8)
 880b210:	40c00415 	stw	r3,16(r8)
 880b214:	3440260e 	bge	r6,r17,880b2b0 <__s2b+0x110>
 880b218:	3021883a 	mov	r16,r6
 880b21c:	99ab883a 	add	r21,r19,r6
 880b220:	9c05883a 	add	r2,r19,r16
 880b224:	11c00007 	ldb	r7,0(r2)
 880b228:	400b883a 	mov	r5,r8
 880b22c:	9009883a 	mov	r4,r18
 880b230:	39fff404 	addi	r7,r7,-48
 880b234:	01800284 	movi	r6,10
 880b238:	880af800 	call	880af80 <__multadd>
 880b23c:	84000044 	addi	r16,r16,1
 880b240:	1011883a 	mov	r8,r2
 880b244:	8c3ff61e 	bne	r17,r16,880b220 <__s2b+0x80>
 880b248:	ac45883a 	add	r2,r21,r17
 880b24c:	117ffe04 	addi	r5,r2,-8
 880b250:	880d883a 	mov	r6,r17
 880b254:	35000c0e 	bge	r6,r20,880b288 <__s2b+0xe8>
 880b258:	a185c83a 	sub	r2,r20,r6
 880b25c:	2821883a 	mov	r16,r5
 880b260:	28a3883a 	add	r17,r5,r2
 880b264:	81c00007 	ldb	r7,0(r16)
 880b268:	400b883a 	mov	r5,r8
 880b26c:	9009883a 	mov	r4,r18
 880b270:	39fff404 	addi	r7,r7,-48
 880b274:	01800284 	movi	r6,10
 880b278:	880af800 	call	880af80 <__multadd>
 880b27c:	84000044 	addi	r16,r16,1
 880b280:	1011883a 	mov	r8,r2
 880b284:	847ff71e 	bne	r16,r17,880b264 <__s2b+0xc4>
 880b288:	4005883a 	mov	r2,r8
 880b28c:	dfc00617 	ldw	ra,24(sp)
 880b290:	dd400517 	ldw	r21,20(sp)
 880b294:	dd000417 	ldw	r20,16(sp)
 880b298:	dcc00317 	ldw	r19,12(sp)
 880b29c:	dc800217 	ldw	r18,8(sp)
 880b2a0:	dc400117 	ldw	r17,4(sp)
 880b2a4:	dc000017 	ldw	r16,0(sp)
 880b2a8:	dec00704 	addi	sp,sp,28
 880b2ac:	f800283a 	ret
 880b2b0:	99400284 	addi	r5,r19,10
 880b2b4:	003fe706 	br	880b254 <__s2b+0xb4>
 880b2b8:	000b883a 	mov	r5,zero
 880b2bc:	003fcd06 	br	880b1f4 <__s2b+0x54>

0880b2c0 <_realloc_r>:
 880b2c0:	defff404 	addi	sp,sp,-48
 880b2c4:	dd800815 	stw	r22,32(sp)
 880b2c8:	dc800415 	stw	r18,16(sp)
 880b2cc:	dc400315 	stw	r17,12(sp)
 880b2d0:	dfc00b15 	stw	ra,44(sp)
 880b2d4:	df000a15 	stw	fp,40(sp)
 880b2d8:	ddc00915 	stw	r23,36(sp)
 880b2dc:	dd400715 	stw	r21,28(sp)
 880b2e0:	dd000615 	stw	r20,24(sp)
 880b2e4:	dcc00515 	stw	r19,20(sp)
 880b2e8:	dc000215 	stw	r16,8(sp)
 880b2ec:	2825883a 	mov	r18,r5
 880b2f0:	3023883a 	mov	r17,r6
 880b2f4:	202d883a 	mov	r22,r4
 880b2f8:	2800c926 	beq	r5,zero,880b620 <_realloc_r+0x360>
 880b2fc:	880d5040 	call	880d504 <__malloc_lock>
 880b300:	943ffe04 	addi	r16,r18,-8
 880b304:	88c002c4 	addi	r3,r17,11
 880b308:	00800584 	movi	r2,22
 880b30c:	82000117 	ldw	r8,4(r16)
 880b310:	10c01b2e 	bgeu	r2,r3,880b380 <_realloc_r+0xc0>
 880b314:	00bffe04 	movi	r2,-8
 880b318:	188e703a 	and	r7,r3,r2
 880b31c:	3839883a 	mov	fp,r7
 880b320:	38001a16 	blt	r7,zero,880b38c <_realloc_r+0xcc>
 880b324:	e4401936 	bltu	fp,r17,880b38c <_realloc_r+0xcc>
 880b328:	013fff04 	movi	r4,-4
 880b32c:	4126703a 	and	r19,r8,r4
 880b330:	99c02616 	blt	r19,r7,880b3cc <_realloc_r+0x10c>
 880b334:	802b883a 	mov	r21,r16
 880b338:	9829883a 	mov	r20,r19
 880b33c:	84000204 	addi	r16,r16,8
 880b340:	a80f883a 	mov	r7,r21
 880b344:	a70dc83a 	sub	r6,r20,fp
 880b348:	008003c4 	movi	r2,15
 880b34c:	1180c136 	bltu	r2,r6,880b654 <_realloc_r+0x394>
 880b350:	38800117 	ldw	r2,4(r7)
 880b354:	a549883a 	add	r4,r20,r21
 880b358:	1080004c 	andi	r2,r2,1
 880b35c:	a084b03a 	or	r2,r20,r2
 880b360:	38800115 	stw	r2,4(r7)
 880b364:	20c00117 	ldw	r3,4(r4)
 880b368:	18c00054 	ori	r3,r3,1
 880b36c:	20c00115 	stw	r3,4(r4)
 880b370:	b009883a 	mov	r4,r22
 880b374:	880d5240 	call	880d524 <__malloc_unlock>
 880b378:	8023883a 	mov	r17,r16
 880b37c:	00000606 	br	880b398 <_realloc_r+0xd8>
 880b380:	01c00404 	movi	r7,16
 880b384:	3839883a 	mov	fp,r7
 880b388:	e47fe72e 	bgeu	fp,r17,880b328 <_realloc_r+0x68>
 880b38c:	00800304 	movi	r2,12
 880b390:	0023883a 	mov	r17,zero
 880b394:	b0800015 	stw	r2,0(r22)
 880b398:	8805883a 	mov	r2,r17
 880b39c:	dfc00b17 	ldw	ra,44(sp)
 880b3a0:	df000a17 	ldw	fp,40(sp)
 880b3a4:	ddc00917 	ldw	r23,36(sp)
 880b3a8:	dd800817 	ldw	r22,32(sp)
 880b3ac:	dd400717 	ldw	r21,28(sp)
 880b3b0:	dd000617 	ldw	r20,24(sp)
 880b3b4:	dcc00517 	ldw	r19,20(sp)
 880b3b8:	dc800417 	ldw	r18,16(sp)
 880b3bc:	dc400317 	ldw	r17,12(sp)
 880b3c0:	dc000217 	ldw	r16,8(sp)
 880b3c4:	dec00c04 	addi	sp,sp,48
 880b3c8:	f800283a 	ret
 880b3cc:	00822074 	movhi	r2,2177
 880b3d0:	10887904 	addi	r2,r2,8676
 880b3d4:	12400217 	ldw	r9,8(r2)
 880b3d8:	84cd883a 	add	r6,r16,r19
 880b3dc:	802b883a 	mov	r21,r16
 880b3e0:	3240b926 	beq	r6,r9,880b6c8 <_realloc_r+0x408>
 880b3e4:	31400117 	ldw	r5,4(r6)
 880b3e8:	00bfff84 	movi	r2,-2
 880b3ec:	2884703a 	and	r2,r5,r2
 880b3f0:	1185883a 	add	r2,r2,r6
 880b3f4:	10c00117 	ldw	r3,4(r2)
 880b3f8:	18c0004c 	andi	r3,r3,1
 880b3fc:	1807003a 	cmpeq	r3,r3,zero
 880b400:	1800a326 	beq	r3,zero,880b690 <_realloc_r+0x3d0>
 880b404:	2908703a 	and	r4,r5,r4
 880b408:	9929883a 	add	r20,r19,r4
 880b40c:	a1c0a30e 	bge	r20,r7,880b69c <_realloc_r+0x3dc>
 880b410:	4080004c 	andi	r2,r8,1
 880b414:	1000551e 	bne	r2,zero,880b56c <_realloc_r+0x2ac>
 880b418:	80800017 	ldw	r2,0(r16)
 880b41c:	80afc83a 	sub	r23,r16,r2
 880b420:	b8c00117 	ldw	r3,4(r23)
 880b424:	00bfff04 	movi	r2,-4
 880b428:	1884703a 	and	r2,r3,r2
 880b42c:	30002e26 	beq	r6,zero,880b4e8 <_realloc_r+0x228>
 880b430:	3240b926 	beq	r6,r9,880b718 <_realloc_r+0x458>
 880b434:	98a9883a 	add	r20,r19,r2
 880b438:	2509883a 	add	r4,r4,r20
 880b43c:	d9000015 	stw	r4,0(sp)
 880b440:	21c02a16 	blt	r4,r7,880b4ec <_realloc_r+0x22c>
 880b444:	30800317 	ldw	r2,12(r6)
 880b448:	30c00217 	ldw	r3,8(r6)
 880b44c:	01400904 	movi	r5,36
 880b450:	99bfff04 	addi	r6,r19,-4
 880b454:	18800315 	stw	r2,12(r3)
 880b458:	10c00215 	stw	r3,8(r2)
 880b45c:	b9000317 	ldw	r4,12(r23)
 880b460:	b8800217 	ldw	r2,8(r23)
 880b464:	b82b883a 	mov	r21,r23
 880b468:	bc000204 	addi	r16,r23,8
 880b46c:	20800215 	stw	r2,8(r4)
 880b470:	11000315 	stw	r4,12(r2)
 880b474:	2980e436 	bltu	r5,r6,880b808 <_realloc_r+0x548>
 880b478:	008004c4 	movi	r2,19
 880b47c:	9009883a 	mov	r4,r18
 880b480:	8011883a 	mov	r8,r16
 880b484:	11800f2e 	bgeu	r2,r6,880b4c4 <_realloc_r+0x204>
 880b488:	90800017 	ldw	r2,0(r18)
 880b48c:	ba000404 	addi	r8,r23,16
 880b490:	91000204 	addi	r4,r18,8
 880b494:	b8800215 	stw	r2,8(r23)
 880b498:	90c00117 	ldw	r3,4(r18)
 880b49c:	008006c4 	movi	r2,27
 880b4a0:	b8c00315 	stw	r3,12(r23)
 880b4a4:	1180072e 	bgeu	r2,r6,880b4c4 <_realloc_r+0x204>
 880b4a8:	90c00217 	ldw	r3,8(r18)
 880b4ac:	ba000604 	addi	r8,r23,24
 880b4b0:	91000404 	addi	r4,r18,16
 880b4b4:	b8c00415 	stw	r3,16(r23)
 880b4b8:	90800317 	ldw	r2,12(r18)
 880b4bc:	b8800515 	stw	r2,20(r23)
 880b4c0:	3140e726 	beq	r6,r5,880b860 <_realloc_r+0x5a0>
 880b4c4:	20800017 	ldw	r2,0(r4)
 880b4c8:	dd000017 	ldw	r20,0(sp)
 880b4cc:	b80f883a 	mov	r7,r23
 880b4d0:	40800015 	stw	r2,0(r8)
 880b4d4:	20c00117 	ldw	r3,4(r4)
 880b4d8:	40c00115 	stw	r3,4(r8)
 880b4dc:	20800217 	ldw	r2,8(r4)
 880b4e0:	40800215 	stw	r2,8(r8)
 880b4e4:	003f9706 	br	880b344 <_realloc_r+0x84>
 880b4e8:	98a9883a 	add	r20,r19,r2
 880b4ec:	a1c01f16 	blt	r20,r7,880b56c <_realloc_r+0x2ac>
 880b4f0:	b8c00317 	ldw	r3,12(r23)
 880b4f4:	b8800217 	ldw	r2,8(r23)
 880b4f8:	99bfff04 	addi	r6,r19,-4
 880b4fc:	01400904 	movi	r5,36
 880b500:	b82b883a 	mov	r21,r23
 880b504:	18800215 	stw	r2,8(r3)
 880b508:	10c00315 	stw	r3,12(r2)
 880b50c:	bc000204 	addi	r16,r23,8
 880b510:	2980c336 	bltu	r5,r6,880b820 <_realloc_r+0x560>
 880b514:	008004c4 	movi	r2,19
 880b518:	9009883a 	mov	r4,r18
 880b51c:	8011883a 	mov	r8,r16
 880b520:	11800f2e 	bgeu	r2,r6,880b560 <_realloc_r+0x2a0>
 880b524:	90800017 	ldw	r2,0(r18)
 880b528:	ba000404 	addi	r8,r23,16
 880b52c:	91000204 	addi	r4,r18,8
 880b530:	b8800215 	stw	r2,8(r23)
 880b534:	90c00117 	ldw	r3,4(r18)
 880b538:	008006c4 	movi	r2,27
 880b53c:	b8c00315 	stw	r3,12(r23)
 880b540:	1180072e 	bgeu	r2,r6,880b560 <_realloc_r+0x2a0>
 880b544:	90c00217 	ldw	r3,8(r18)
 880b548:	ba000604 	addi	r8,r23,24
 880b54c:	91000404 	addi	r4,r18,16
 880b550:	b8c00415 	stw	r3,16(r23)
 880b554:	90800317 	ldw	r2,12(r18)
 880b558:	b8800515 	stw	r2,20(r23)
 880b55c:	3140c726 	beq	r6,r5,880b87c <_realloc_r+0x5bc>
 880b560:	20800017 	ldw	r2,0(r4)
 880b564:	b80f883a 	mov	r7,r23
 880b568:	003fd906 	br	880b4d0 <_realloc_r+0x210>
 880b56c:	880b883a 	mov	r5,r17
 880b570:	b009883a 	mov	r4,r22
 880b574:	88098900 	call	8809890 <_malloc_r>
 880b578:	1023883a 	mov	r17,r2
 880b57c:	10002526 	beq	r2,zero,880b614 <_realloc_r+0x354>
 880b580:	80800117 	ldw	r2,4(r16)
 880b584:	00ffff84 	movi	r3,-2
 880b588:	893ffe04 	addi	r4,r17,-8
 880b58c:	10c4703a 	and	r2,r2,r3
 880b590:	8085883a 	add	r2,r16,r2
 880b594:	20809526 	beq	r4,r2,880b7ec <_realloc_r+0x52c>
 880b598:	99bfff04 	addi	r6,r19,-4
 880b59c:	01c00904 	movi	r7,36
 880b5a0:	39804536 	bltu	r7,r6,880b6b8 <_realloc_r+0x3f8>
 880b5a4:	008004c4 	movi	r2,19
 880b5a8:	9009883a 	mov	r4,r18
 880b5ac:	880b883a 	mov	r5,r17
 880b5b0:	11800f2e 	bgeu	r2,r6,880b5f0 <_realloc_r+0x330>
 880b5b4:	90800017 	ldw	r2,0(r18)
 880b5b8:	89400204 	addi	r5,r17,8
 880b5bc:	91000204 	addi	r4,r18,8
 880b5c0:	88800015 	stw	r2,0(r17)
 880b5c4:	90c00117 	ldw	r3,4(r18)
 880b5c8:	008006c4 	movi	r2,27
 880b5cc:	88c00115 	stw	r3,4(r17)
 880b5d0:	1180072e 	bgeu	r2,r6,880b5f0 <_realloc_r+0x330>
 880b5d4:	90c00217 	ldw	r3,8(r18)
 880b5d8:	89400404 	addi	r5,r17,16
 880b5dc:	91000404 	addi	r4,r18,16
 880b5e0:	88c00215 	stw	r3,8(r17)
 880b5e4:	90800317 	ldw	r2,12(r18)
 880b5e8:	88800315 	stw	r2,12(r17)
 880b5ec:	31c09126 	beq	r6,r7,880b834 <_realloc_r+0x574>
 880b5f0:	20800017 	ldw	r2,0(r4)
 880b5f4:	28800015 	stw	r2,0(r5)
 880b5f8:	20c00117 	ldw	r3,4(r4)
 880b5fc:	28c00115 	stw	r3,4(r5)
 880b600:	20800217 	ldw	r2,8(r4)
 880b604:	28800215 	stw	r2,8(r5)
 880b608:	900b883a 	mov	r5,r18
 880b60c:	b009883a 	mov	r4,r22
 880b610:	8808d080 	call	8808d08 <_free_r>
 880b614:	b009883a 	mov	r4,r22
 880b618:	880d5240 	call	880d524 <__malloc_unlock>
 880b61c:	003f5e06 	br	880b398 <_realloc_r+0xd8>
 880b620:	300b883a 	mov	r5,r6
 880b624:	dfc00b17 	ldw	ra,44(sp)
 880b628:	df000a17 	ldw	fp,40(sp)
 880b62c:	ddc00917 	ldw	r23,36(sp)
 880b630:	dd800817 	ldw	r22,32(sp)
 880b634:	dd400717 	ldw	r21,28(sp)
 880b638:	dd000617 	ldw	r20,24(sp)
 880b63c:	dcc00517 	ldw	r19,20(sp)
 880b640:	dc800417 	ldw	r18,16(sp)
 880b644:	dc400317 	ldw	r17,12(sp)
 880b648:	dc000217 	ldw	r16,8(sp)
 880b64c:	dec00c04 	addi	sp,sp,48
 880b650:	88098901 	jmpi	8809890 <_malloc_r>
 880b654:	38800117 	ldw	r2,4(r7)
 880b658:	e54b883a 	add	r5,fp,r21
 880b65c:	31000054 	ori	r4,r6,1
 880b660:	1080004c 	andi	r2,r2,1
 880b664:	1704b03a 	or	r2,r2,fp
 880b668:	38800115 	stw	r2,4(r7)
 880b66c:	29000115 	stw	r4,4(r5)
 880b670:	2987883a 	add	r3,r5,r6
 880b674:	18800117 	ldw	r2,4(r3)
 880b678:	29400204 	addi	r5,r5,8
 880b67c:	b009883a 	mov	r4,r22
 880b680:	10800054 	ori	r2,r2,1
 880b684:	18800115 	stw	r2,4(r3)
 880b688:	8808d080 	call	8808d08 <_free_r>
 880b68c:	003f3806 	br	880b370 <_realloc_r+0xb0>
 880b690:	000d883a 	mov	r6,zero
 880b694:	0009883a 	mov	r4,zero
 880b698:	003f5d06 	br	880b410 <_realloc_r+0x150>
 880b69c:	30c00217 	ldw	r3,8(r6)
 880b6a0:	30800317 	ldw	r2,12(r6)
 880b6a4:	800f883a 	mov	r7,r16
 880b6a8:	84000204 	addi	r16,r16,8
 880b6ac:	10c00215 	stw	r3,8(r2)
 880b6b0:	18800315 	stw	r2,12(r3)
 880b6b4:	003f2306 	br	880b344 <_realloc_r+0x84>
 880b6b8:	8809883a 	mov	r4,r17
 880b6bc:	900b883a 	mov	r5,r18
 880b6c0:	880a1540 	call	880a154 <memmove>
 880b6c4:	003fd006 	br	880b608 <_realloc_r+0x348>
 880b6c8:	30800117 	ldw	r2,4(r6)
 880b6cc:	e0c00404 	addi	r3,fp,16
 880b6d0:	1108703a 	and	r4,r2,r4
 880b6d4:	9905883a 	add	r2,r19,r4
 880b6d8:	10ff4d16 	blt	r2,r3,880b410 <_realloc_r+0x150>
 880b6dc:	1705c83a 	sub	r2,r2,fp
 880b6e0:	870b883a 	add	r5,r16,fp
 880b6e4:	10800054 	ori	r2,r2,1
 880b6e8:	28800115 	stw	r2,4(r5)
 880b6ec:	80c00117 	ldw	r3,4(r16)
 880b6f0:	00822074 	movhi	r2,2177
 880b6f4:	10887904 	addi	r2,r2,8676
 880b6f8:	b009883a 	mov	r4,r22
 880b6fc:	18c0004c 	andi	r3,r3,1
 880b700:	e0c6b03a 	or	r3,fp,r3
 880b704:	11400215 	stw	r5,8(r2)
 880b708:	80c00115 	stw	r3,4(r16)
 880b70c:	880d5240 	call	880d524 <__malloc_unlock>
 880b710:	84400204 	addi	r17,r16,8
 880b714:	003f2006 	br	880b398 <_realloc_r+0xd8>
 880b718:	98a9883a 	add	r20,r19,r2
 880b71c:	2509883a 	add	r4,r4,r20
 880b720:	e0800404 	addi	r2,fp,16
 880b724:	d9000115 	stw	r4,4(sp)
 880b728:	20bf7016 	blt	r4,r2,880b4ec <_realloc_r+0x22c>
 880b72c:	b8c00317 	ldw	r3,12(r23)
 880b730:	b8800217 	ldw	r2,8(r23)
 880b734:	99bfff04 	addi	r6,r19,-4
 880b738:	01400904 	movi	r5,36
 880b73c:	18800215 	stw	r2,8(r3)
 880b740:	10c00315 	stw	r3,12(r2)
 880b744:	bc400204 	addi	r17,r23,8
 880b748:	29804136 	bltu	r5,r6,880b850 <_realloc_r+0x590>
 880b74c:	008004c4 	movi	r2,19
 880b750:	9009883a 	mov	r4,r18
 880b754:	880f883a 	mov	r7,r17
 880b758:	11800f2e 	bgeu	r2,r6,880b798 <_realloc_r+0x4d8>
 880b75c:	90800017 	ldw	r2,0(r18)
 880b760:	b9c00404 	addi	r7,r23,16
 880b764:	91000204 	addi	r4,r18,8
 880b768:	b8800215 	stw	r2,8(r23)
 880b76c:	90c00117 	ldw	r3,4(r18)
 880b770:	008006c4 	movi	r2,27
 880b774:	b8c00315 	stw	r3,12(r23)
 880b778:	1180072e 	bgeu	r2,r6,880b798 <_realloc_r+0x4d8>
 880b77c:	90c00217 	ldw	r3,8(r18)
 880b780:	b9c00604 	addi	r7,r23,24
 880b784:	91000404 	addi	r4,r18,16
 880b788:	b8c00415 	stw	r3,16(r23)
 880b78c:	90800317 	ldw	r2,12(r18)
 880b790:	b8800515 	stw	r2,20(r23)
 880b794:	31404026 	beq	r6,r5,880b898 <_realloc_r+0x5d8>
 880b798:	20800017 	ldw	r2,0(r4)
 880b79c:	38800015 	stw	r2,0(r7)
 880b7a0:	20c00117 	ldw	r3,4(r4)
 880b7a4:	38c00115 	stw	r3,4(r7)
 880b7a8:	20800217 	ldw	r2,8(r4)
 880b7ac:	38800215 	stw	r2,8(r7)
 880b7b0:	d8c00117 	ldw	r3,4(sp)
 880b7b4:	bf0b883a 	add	r5,r23,fp
 880b7b8:	b009883a 	mov	r4,r22
 880b7bc:	1f05c83a 	sub	r2,r3,fp
 880b7c0:	10800054 	ori	r2,r2,1
 880b7c4:	28800115 	stw	r2,4(r5)
 880b7c8:	b8c00117 	ldw	r3,4(r23)
 880b7cc:	00822074 	movhi	r2,2177
 880b7d0:	10887904 	addi	r2,r2,8676
 880b7d4:	11400215 	stw	r5,8(r2)
 880b7d8:	18c0004c 	andi	r3,r3,1
 880b7dc:	e0c6b03a 	or	r3,fp,r3
 880b7e0:	b8c00115 	stw	r3,4(r23)
 880b7e4:	880d5240 	call	880d524 <__malloc_unlock>
 880b7e8:	003eeb06 	br	880b398 <_realloc_r+0xd8>
 880b7ec:	20800117 	ldw	r2,4(r4)
 880b7f0:	00ffff04 	movi	r3,-4
 880b7f4:	800f883a 	mov	r7,r16
 880b7f8:	10c4703a 	and	r2,r2,r3
 880b7fc:	98a9883a 	add	r20,r19,r2
 880b800:	84000204 	addi	r16,r16,8
 880b804:	003ecf06 	br	880b344 <_realloc_r+0x84>
 880b808:	900b883a 	mov	r5,r18
 880b80c:	8009883a 	mov	r4,r16
 880b810:	880a1540 	call	880a154 <memmove>
 880b814:	dd000017 	ldw	r20,0(sp)
 880b818:	b80f883a 	mov	r7,r23
 880b81c:	003ec906 	br	880b344 <_realloc_r+0x84>
 880b820:	900b883a 	mov	r5,r18
 880b824:	8009883a 	mov	r4,r16
 880b828:	880a1540 	call	880a154 <memmove>
 880b82c:	b80f883a 	mov	r7,r23
 880b830:	003ec406 	br	880b344 <_realloc_r+0x84>
 880b834:	90c00417 	ldw	r3,16(r18)
 880b838:	89400604 	addi	r5,r17,24
 880b83c:	91000604 	addi	r4,r18,24
 880b840:	88c00415 	stw	r3,16(r17)
 880b844:	90800517 	ldw	r2,20(r18)
 880b848:	88800515 	stw	r2,20(r17)
 880b84c:	003f6806 	br	880b5f0 <_realloc_r+0x330>
 880b850:	900b883a 	mov	r5,r18
 880b854:	8809883a 	mov	r4,r17
 880b858:	880a1540 	call	880a154 <memmove>
 880b85c:	003fd406 	br	880b7b0 <_realloc_r+0x4f0>
 880b860:	90c00417 	ldw	r3,16(r18)
 880b864:	91000604 	addi	r4,r18,24
 880b868:	ba000804 	addi	r8,r23,32
 880b86c:	b8c00615 	stw	r3,24(r23)
 880b870:	90800517 	ldw	r2,20(r18)
 880b874:	b8800715 	stw	r2,28(r23)
 880b878:	003f1206 	br	880b4c4 <_realloc_r+0x204>
 880b87c:	90c00417 	ldw	r3,16(r18)
 880b880:	91000604 	addi	r4,r18,24
 880b884:	ba000804 	addi	r8,r23,32
 880b888:	b8c00615 	stw	r3,24(r23)
 880b88c:	90800517 	ldw	r2,20(r18)
 880b890:	b8800715 	stw	r2,28(r23)
 880b894:	003f3206 	br	880b560 <_realloc_r+0x2a0>
 880b898:	90c00417 	ldw	r3,16(r18)
 880b89c:	91000604 	addi	r4,r18,24
 880b8a0:	b9c00804 	addi	r7,r23,32
 880b8a4:	b8c00615 	stw	r3,24(r23)
 880b8a8:	90800517 	ldw	r2,20(r18)
 880b8ac:	b8800715 	stw	r2,28(r23)
 880b8b0:	003fb906 	br	880b798 <_realloc_r+0x4d8>

0880b8b4 <__isinfd>:
 880b8b4:	200d883a 	mov	r6,r4
 880b8b8:	0109c83a 	sub	r4,zero,r4
 880b8bc:	2188b03a 	or	r4,r4,r6
 880b8c0:	2008d7fa 	srli	r4,r4,31
 880b8c4:	00a00034 	movhi	r2,32768
 880b8c8:	10bfffc4 	addi	r2,r2,-1
 880b8cc:	1144703a 	and	r2,r2,r5
 880b8d0:	2088b03a 	or	r4,r4,r2
 880b8d4:	009ffc34 	movhi	r2,32752
 880b8d8:	1105c83a 	sub	r2,r2,r4
 880b8dc:	0087c83a 	sub	r3,zero,r2
 880b8e0:	10c4b03a 	or	r2,r2,r3
 880b8e4:	1004d7fa 	srli	r2,r2,31
 880b8e8:	00c00044 	movi	r3,1
 880b8ec:	1885c83a 	sub	r2,r3,r2
 880b8f0:	f800283a 	ret

0880b8f4 <_sbrk_r>:
 880b8f4:	defffd04 	addi	sp,sp,-12
 880b8f8:	dc000015 	stw	r16,0(sp)
 880b8fc:	04022074 	movhi	r16,2177
 880b900:	84156404 	addi	r16,r16,21904
 880b904:	dc400115 	stw	r17,4(sp)
 880b908:	80000015 	stw	zero,0(r16)
 880b90c:	2023883a 	mov	r17,r4
 880b910:	2809883a 	mov	r4,r5
 880b914:	dfc00215 	stw	ra,8(sp)
 880b918:	880d7240 	call	880d724 <sbrk>
 880b91c:	1007883a 	mov	r3,r2
 880b920:	00bfffc4 	movi	r2,-1
 880b924:	18800626 	beq	r3,r2,880b940 <_sbrk_r+0x4c>
 880b928:	1805883a 	mov	r2,r3
 880b92c:	dfc00217 	ldw	ra,8(sp)
 880b930:	dc400117 	ldw	r17,4(sp)
 880b934:	dc000017 	ldw	r16,0(sp)
 880b938:	dec00304 	addi	sp,sp,12
 880b93c:	f800283a 	ret
 880b940:	80800017 	ldw	r2,0(r16)
 880b944:	103ff826 	beq	r2,zero,880b928 <_sbrk_r+0x34>
 880b948:	88800015 	stw	r2,0(r17)
 880b94c:	1805883a 	mov	r2,r3
 880b950:	dfc00217 	ldw	ra,8(sp)
 880b954:	dc400117 	ldw	r17,4(sp)
 880b958:	dc000017 	ldw	r16,0(sp)
 880b95c:	dec00304 	addi	sp,sp,12
 880b960:	f800283a 	ret

0880b964 <__sclose>:
 880b964:	2940038f 	ldh	r5,14(r5)
 880b968:	880bc981 	jmpi	880bc98 <_close_r>

0880b96c <__sseek>:
 880b96c:	defffe04 	addi	sp,sp,-8
 880b970:	dc000015 	stw	r16,0(sp)
 880b974:	2821883a 	mov	r16,r5
 880b978:	2940038f 	ldh	r5,14(r5)
 880b97c:	dfc00115 	stw	ra,4(sp)
 880b980:	880bf100 	call	880bf10 <_lseek_r>
 880b984:	1007883a 	mov	r3,r2
 880b988:	00bfffc4 	movi	r2,-1
 880b98c:	18800926 	beq	r3,r2,880b9b4 <__sseek+0x48>
 880b990:	8080030b 	ldhu	r2,12(r16)
 880b994:	80c01415 	stw	r3,80(r16)
 880b998:	10840014 	ori	r2,r2,4096
 880b99c:	8080030d 	sth	r2,12(r16)
 880b9a0:	1805883a 	mov	r2,r3
 880b9a4:	dfc00117 	ldw	ra,4(sp)
 880b9a8:	dc000017 	ldw	r16,0(sp)
 880b9ac:	dec00204 	addi	sp,sp,8
 880b9b0:	f800283a 	ret
 880b9b4:	8080030b 	ldhu	r2,12(r16)
 880b9b8:	10bbffcc 	andi	r2,r2,61439
 880b9bc:	8080030d 	sth	r2,12(r16)
 880b9c0:	1805883a 	mov	r2,r3
 880b9c4:	dfc00117 	ldw	ra,4(sp)
 880b9c8:	dc000017 	ldw	r16,0(sp)
 880b9cc:	dec00204 	addi	sp,sp,8
 880b9d0:	f800283a 	ret

0880b9d4 <__swrite>:
 880b9d4:	2880030b 	ldhu	r2,12(r5)
 880b9d8:	defffb04 	addi	sp,sp,-20
 880b9dc:	dcc00315 	stw	r19,12(sp)
 880b9e0:	1080400c 	andi	r2,r2,256
 880b9e4:	dc800215 	stw	r18,8(sp)
 880b9e8:	dc400115 	stw	r17,4(sp)
 880b9ec:	dc000015 	stw	r16,0(sp)
 880b9f0:	3027883a 	mov	r19,r6
 880b9f4:	3825883a 	mov	r18,r7
 880b9f8:	dfc00415 	stw	ra,16(sp)
 880b9fc:	2821883a 	mov	r16,r5
 880ba00:	000d883a 	mov	r6,zero
 880ba04:	01c00084 	movi	r7,2
 880ba08:	2023883a 	mov	r17,r4
 880ba0c:	10000226 	beq	r2,zero,880ba18 <__swrite+0x44>
 880ba10:	2940038f 	ldh	r5,14(r5)
 880ba14:	880bf100 	call	880bf10 <_lseek_r>
 880ba18:	8080030b 	ldhu	r2,12(r16)
 880ba1c:	8140038f 	ldh	r5,14(r16)
 880ba20:	8809883a 	mov	r4,r17
 880ba24:	10bbffcc 	andi	r2,r2,61439
 880ba28:	980d883a 	mov	r6,r19
 880ba2c:	900f883a 	mov	r7,r18
 880ba30:	8080030d 	sth	r2,12(r16)
 880ba34:	dfc00417 	ldw	ra,16(sp)
 880ba38:	dcc00317 	ldw	r19,12(sp)
 880ba3c:	dc800217 	ldw	r18,8(sp)
 880ba40:	dc400117 	ldw	r17,4(sp)
 880ba44:	dc000017 	ldw	r16,0(sp)
 880ba48:	dec00504 	addi	sp,sp,20
 880ba4c:	880bb6c1 	jmpi	880bb6c <_write_r>

0880ba50 <__sread>:
 880ba50:	defffe04 	addi	sp,sp,-8
 880ba54:	dc000015 	stw	r16,0(sp)
 880ba58:	2821883a 	mov	r16,r5
 880ba5c:	2940038f 	ldh	r5,14(r5)
 880ba60:	dfc00115 	stw	ra,4(sp)
 880ba64:	880bf880 	call	880bf88 <_read_r>
 880ba68:	1007883a 	mov	r3,r2
 880ba6c:	10000816 	blt	r2,zero,880ba90 <__sread+0x40>
 880ba70:	80801417 	ldw	r2,80(r16)
 880ba74:	10c5883a 	add	r2,r2,r3
 880ba78:	80801415 	stw	r2,80(r16)
 880ba7c:	1805883a 	mov	r2,r3
 880ba80:	dfc00117 	ldw	ra,4(sp)
 880ba84:	dc000017 	ldw	r16,0(sp)
 880ba88:	dec00204 	addi	sp,sp,8
 880ba8c:	f800283a 	ret
 880ba90:	8080030b 	ldhu	r2,12(r16)
 880ba94:	10bbffcc 	andi	r2,r2,61439
 880ba98:	8080030d 	sth	r2,12(r16)
 880ba9c:	1805883a 	mov	r2,r3
 880baa0:	dfc00117 	ldw	ra,4(sp)
 880baa4:	dc000017 	ldw	r16,0(sp)
 880baa8:	dec00204 	addi	sp,sp,8
 880baac:	f800283a 	ret

0880bab0 <strcmp>:
 880bab0:	2144b03a 	or	r2,r4,r5
 880bab4:	108000cc 	andi	r2,r2,3
 880bab8:	10001d1e 	bne	r2,zero,880bb30 <strcmp+0x80>
 880babc:	200f883a 	mov	r7,r4
 880bac0:	28800017 	ldw	r2,0(r5)
 880bac4:	21000017 	ldw	r4,0(r4)
 880bac8:	280d883a 	mov	r6,r5
 880bacc:	2080161e 	bne	r4,r2,880bb28 <strcmp+0x78>
 880bad0:	023fbff4 	movhi	r8,65279
 880bad4:	423fbfc4 	addi	r8,r8,-257
 880bad8:	2207883a 	add	r3,r4,r8
 880badc:	01602074 	movhi	r5,32897
 880bae0:	29602004 	addi	r5,r5,-32640
 880bae4:	1946703a 	and	r3,r3,r5
 880bae8:	0104303a 	nor	r2,zero,r4
 880baec:	10c4703a 	and	r2,r2,r3
 880baf0:	10001c1e 	bne	r2,zero,880bb64 <strcmp+0xb4>
 880baf4:	4013883a 	mov	r9,r8
 880baf8:	2811883a 	mov	r8,r5
 880bafc:	00000106 	br	880bb04 <strcmp+0x54>
 880bb00:	1800181e 	bne	r3,zero,880bb64 <strcmp+0xb4>
 880bb04:	39c00104 	addi	r7,r7,4
 880bb08:	39000017 	ldw	r4,0(r7)
 880bb0c:	31800104 	addi	r6,r6,4
 880bb10:	31400017 	ldw	r5,0(r6)
 880bb14:	2245883a 	add	r2,r4,r9
 880bb18:	1204703a 	and	r2,r2,r8
 880bb1c:	0106303a 	nor	r3,zero,r4
 880bb20:	1886703a 	and	r3,r3,r2
 880bb24:	217ff626 	beq	r4,r5,880bb00 <strcmp+0x50>
 880bb28:	3809883a 	mov	r4,r7
 880bb2c:	300b883a 	mov	r5,r6
 880bb30:	20c00007 	ldb	r3,0(r4)
 880bb34:	1800051e 	bne	r3,zero,880bb4c <strcmp+0x9c>
 880bb38:	00000606 	br	880bb54 <strcmp+0xa4>
 880bb3c:	21000044 	addi	r4,r4,1
 880bb40:	20c00007 	ldb	r3,0(r4)
 880bb44:	29400044 	addi	r5,r5,1
 880bb48:	18000226 	beq	r3,zero,880bb54 <strcmp+0xa4>
 880bb4c:	28800007 	ldb	r2,0(r5)
 880bb50:	18bffa26 	beq	r3,r2,880bb3c <strcmp+0x8c>
 880bb54:	20c00003 	ldbu	r3,0(r4)
 880bb58:	28800003 	ldbu	r2,0(r5)
 880bb5c:	1885c83a 	sub	r2,r3,r2
 880bb60:	f800283a 	ret
 880bb64:	0005883a 	mov	r2,zero
 880bb68:	f800283a 	ret

0880bb6c <_write_r>:
 880bb6c:	defffd04 	addi	sp,sp,-12
 880bb70:	dc000015 	stw	r16,0(sp)
 880bb74:	04022074 	movhi	r16,2177
 880bb78:	84156404 	addi	r16,r16,21904
 880bb7c:	dc400115 	stw	r17,4(sp)
 880bb80:	80000015 	stw	zero,0(r16)
 880bb84:	2023883a 	mov	r17,r4
 880bb88:	2809883a 	mov	r4,r5
 880bb8c:	300b883a 	mov	r5,r6
 880bb90:	380d883a 	mov	r6,r7
 880bb94:	dfc00215 	stw	ra,8(sp)
 880bb98:	880d7e00 	call	880d7e0 <write>
 880bb9c:	1007883a 	mov	r3,r2
 880bba0:	00bfffc4 	movi	r2,-1
 880bba4:	18800626 	beq	r3,r2,880bbc0 <_write_r+0x54>
 880bba8:	1805883a 	mov	r2,r3
 880bbac:	dfc00217 	ldw	ra,8(sp)
 880bbb0:	dc400117 	ldw	r17,4(sp)
 880bbb4:	dc000017 	ldw	r16,0(sp)
 880bbb8:	dec00304 	addi	sp,sp,12
 880bbbc:	f800283a 	ret
 880bbc0:	80800017 	ldw	r2,0(r16)
 880bbc4:	103ff826 	beq	r2,zero,880bba8 <_write_r+0x3c>
 880bbc8:	88800015 	stw	r2,0(r17)
 880bbcc:	1805883a 	mov	r2,r3
 880bbd0:	dfc00217 	ldw	ra,8(sp)
 880bbd4:	dc400117 	ldw	r17,4(sp)
 880bbd8:	dc000017 	ldw	r16,0(sp)
 880bbdc:	dec00304 	addi	sp,sp,12
 880bbe0:	f800283a 	ret

0880bbe4 <_calloc_r>:
 880bbe4:	298b383a 	mul	r5,r5,r6
 880bbe8:	defffe04 	addi	sp,sp,-8
 880bbec:	dc000015 	stw	r16,0(sp)
 880bbf0:	dfc00115 	stw	ra,4(sp)
 880bbf4:	88098900 	call	8809890 <_malloc_r>
 880bbf8:	1021883a 	mov	r16,r2
 880bbfc:	01c00904 	movi	r7,36
 880bc00:	10000d26 	beq	r2,zero,880bc38 <_calloc_r+0x54>
 880bc04:	10ffff17 	ldw	r3,-4(r2)
 880bc08:	1009883a 	mov	r4,r2
 880bc0c:	00bfff04 	movi	r2,-4
 880bc10:	1886703a 	and	r3,r3,r2
 880bc14:	1887883a 	add	r3,r3,r2
 880bc18:	180d883a 	mov	r6,r3
 880bc1c:	000b883a 	mov	r5,zero
 880bc20:	38c01736 	bltu	r7,r3,880bc80 <_calloc_r+0x9c>
 880bc24:	008004c4 	movi	r2,19
 880bc28:	10c00836 	bltu	r2,r3,880bc4c <_calloc_r+0x68>
 880bc2c:	20000215 	stw	zero,8(r4)
 880bc30:	20000015 	stw	zero,0(r4)
 880bc34:	20000115 	stw	zero,4(r4)
 880bc38:	8005883a 	mov	r2,r16
 880bc3c:	dfc00117 	ldw	ra,4(sp)
 880bc40:	dc000017 	ldw	r16,0(sp)
 880bc44:	dec00204 	addi	sp,sp,8
 880bc48:	f800283a 	ret
 880bc4c:	008006c4 	movi	r2,27
 880bc50:	80000015 	stw	zero,0(r16)
 880bc54:	80000115 	stw	zero,4(r16)
 880bc58:	81000204 	addi	r4,r16,8
 880bc5c:	10fff32e 	bgeu	r2,r3,880bc2c <_calloc_r+0x48>
 880bc60:	80000215 	stw	zero,8(r16)
 880bc64:	80000315 	stw	zero,12(r16)
 880bc68:	81000404 	addi	r4,r16,16
 880bc6c:	19ffef1e 	bne	r3,r7,880bc2c <_calloc_r+0x48>
 880bc70:	81000604 	addi	r4,r16,24
 880bc74:	80000415 	stw	zero,16(r16)
 880bc78:	80000515 	stw	zero,20(r16)
 880bc7c:	003feb06 	br	880bc2c <_calloc_r+0x48>
 880bc80:	880a2340 	call	880a234 <memset>
 880bc84:	8005883a 	mov	r2,r16
 880bc88:	dfc00117 	ldw	ra,4(sp)
 880bc8c:	dc000017 	ldw	r16,0(sp)
 880bc90:	dec00204 	addi	sp,sp,8
 880bc94:	f800283a 	ret

0880bc98 <_close_r>:
 880bc98:	defffd04 	addi	sp,sp,-12
 880bc9c:	dc000015 	stw	r16,0(sp)
 880bca0:	04022074 	movhi	r16,2177
 880bca4:	84156404 	addi	r16,r16,21904
 880bca8:	dc400115 	stw	r17,4(sp)
 880bcac:	80000015 	stw	zero,0(r16)
 880bcb0:	2023883a 	mov	r17,r4
 880bcb4:	2809883a 	mov	r4,r5
 880bcb8:	dfc00215 	stw	ra,8(sp)
 880bcbc:	880ce800 	call	880ce80 <close>
 880bcc0:	1007883a 	mov	r3,r2
 880bcc4:	00bfffc4 	movi	r2,-1
 880bcc8:	18800626 	beq	r3,r2,880bce4 <_close_r+0x4c>
 880bccc:	1805883a 	mov	r2,r3
 880bcd0:	dfc00217 	ldw	ra,8(sp)
 880bcd4:	dc400117 	ldw	r17,4(sp)
 880bcd8:	dc000017 	ldw	r16,0(sp)
 880bcdc:	dec00304 	addi	sp,sp,12
 880bce0:	f800283a 	ret
 880bce4:	80800017 	ldw	r2,0(r16)
 880bce8:	103ff826 	beq	r2,zero,880bccc <_close_r+0x34>
 880bcec:	88800015 	stw	r2,0(r17)
 880bcf0:	1805883a 	mov	r2,r3
 880bcf4:	dfc00217 	ldw	ra,8(sp)
 880bcf8:	dc400117 	ldw	r17,4(sp)
 880bcfc:	dc000017 	ldw	r16,0(sp)
 880bd00:	dec00304 	addi	sp,sp,12
 880bd04:	f800283a 	ret

0880bd08 <_fclose_r>:
 880bd08:	defffc04 	addi	sp,sp,-16
 880bd0c:	dc400115 	stw	r17,4(sp)
 880bd10:	dc000015 	stw	r16,0(sp)
 880bd14:	dfc00315 	stw	ra,12(sp)
 880bd18:	dc800215 	stw	r18,8(sp)
 880bd1c:	2821883a 	mov	r16,r5
 880bd20:	2023883a 	mov	r17,r4
 880bd24:	28002926 	beq	r5,zero,880bdcc <_fclose_r+0xc4>
 880bd28:	88089740 	call	8808974 <__sfp_lock_acquire>
 880bd2c:	88000226 	beq	r17,zero,880bd38 <_fclose_r+0x30>
 880bd30:	88800e17 	ldw	r2,56(r17)
 880bd34:	10002d26 	beq	r2,zero,880bdec <_fclose_r+0xe4>
 880bd38:	8080030f 	ldh	r2,12(r16)
 880bd3c:	10002226 	beq	r2,zero,880bdc8 <_fclose_r+0xc0>
 880bd40:	8809883a 	mov	r4,r17
 880bd44:	800b883a 	mov	r5,r16
 880bd48:	88086ec0 	call	88086ec <_fflush_r>
 880bd4c:	1025883a 	mov	r18,r2
 880bd50:	80800b17 	ldw	r2,44(r16)
 880bd54:	10000426 	beq	r2,zero,880bd68 <_fclose_r+0x60>
 880bd58:	81400717 	ldw	r5,28(r16)
 880bd5c:	8809883a 	mov	r4,r17
 880bd60:	103ee83a 	callr	r2
 880bd64:	10002a16 	blt	r2,zero,880be10 <_fclose_r+0x108>
 880bd68:	8080030b 	ldhu	r2,12(r16)
 880bd6c:	1080200c 	andi	r2,r2,128
 880bd70:	1000231e 	bne	r2,zero,880be00 <_fclose_r+0xf8>
 880bd74:	81400c17 	ldw	r5,48(r16)
 880bd78:	28000526 	beq	r5,zero,880bd90 <_fclose_r+0x88>
 880bd7c:	80801004 	addi	r2,r16,64
 880bd80:	28800226 	beq	r5,r2,880bd8c <_fclose_r+0x84>
 880bd84:	8809883a 	mov	r4,r17
 880bd88:	8808d080 	call	8808d08 <_free_r>
 880bd8c:	80000c15 	stw	zero,48(r16)
 880bd90:	81401117 	ldw	r5,68(r16)
 880bd94:	28000326 	beq	r5,zero,880bda4 <_fclose_r+0x9c>
 880bd98:	8809883a 	mov	r4,r17
 880bd9c:	8808d080 	call	8808d08 <_free_r>
 880bda0:	80001115 	stw	zero,68(r16)
 880bda4:	8000030d 	sth	zero,12(r16)
 880bda8:	88089780 	call	8808978 <__sfp_lock_release>
 880bdac:	9005883a 	mov	r2,r18
 880bdb0:	dfc00317 	ldw	ra,12(sp)
 880bdb4:	dc800217 	ldw	r18,8(sp)
 880bdb8:	dc400117 	ldw	r17,4(sp)
 880bdbc:	dc000017 	ldw	r16,0(sp)
 880bdc0:	dec00404 	addi	sp,sp,16
 880bdc4:	f800283a 	ret
 880bdc8:	88089780 	call	8808978 <__sfp_lock_release>
 880bdcc:	0025883a 	mov	r18,zero
 880bdd0:	9005883a 	mov	r2,r18
 880bdd4:	dfc00317 	ldw	ra,12(sp)
 880bdd8:	dc800217 	ldw	r18,8(sp)
 880bddc:	dc400117 	ldw	r17,4(sp)
 880bde0:	dc000017 	ldw	r16,0(sp)
 880bde4:	dec00404 	addi	sp,sp,16
 880bde8:	f800283a 	ret
 880bdec:	8809883a 	mov	r4,r17
 880bdf0:	88089840 	call	8808984 <__sinit>
 880bdf4:	8080030f 	ldh	r2,12(r16)
 880bdf8:	103fd11e 	bne	r2,zero,880bd40 <_fclose_r+0x38>
 880bdfc:	003ff206 	br	880bdc8 <_fclose_r+0xc0>
 880be00:	81400417 	ldw	r5,16(r16)
 880be04:	8809883a 	mov	r4,r17
 880be08:	8808d080 	call	8808d08 <_free_r>
 880be0c:	003fd906 	br	880bd74 <_fclose_r+0x6c>
 880be10:	04bfffc4 	movi	r18,-1
 880be14:	003fd406 	br	880bd68 <_fclose_r+0x60>

0880be18 <fclose>:
 880be18:	00822074 	movhi	r2,2177
 880be1c:	108e5204 	addi	r2,r2,14664
 880be20:	200b883a 	mov	r5,r4
 880be24:	11000017 	ldw	r4,0(r2)
 880be28:	880bd081 	jmpi	880bd08 <_fclose_r>

0880be2c <_fstat_r>:
 880be2c:	defffd04 	addi	sp,sp,-12
 880be30:	dc000015 	stw	r16,0(sp)
 880be34:	04022074 	movhi	r16,2177
 880be38:	84156404 	addi	r16,r16,21904
 880be3c:	dc400115 	stw	r17,4(sp)
 880be40:	80000015 	stw	zero,0(r16)
 880be44:	2023883a 	mov	r17,r4
 880be48:	2809883a 	mov	r4,r5
 880be4c:	300b883a 	mov	r5,r6
 880be50:	dfc00215 	stw	ra,8(sp)
 880be54:	880d0080 	call	880d008 <fstat>
 880be58:	1007883a 	mov	r3,r2
 880be5c:	00bfffc4 	movi	r2,-1
 880be60:	18800626 	beq	r3,r2,880be7c <_fstat_r+0x50>
 880be64:	1805883a 	mov	r2,r3
 880be68:	dfc00217 	ldw	ra,8(sp)
 880be6c:	dc400117 	ldw	r17,4(sp)
 880be70:	dc000017 	ldw	r16,0(sp)
 880be74:	dec00304 	addi	sp,sp,12
 880be78:	f800283a 	ret
 880be7c:	80800017 	ldw	r2,0(r16)
 880be80:	103ff826 	beq	r2,zero,880be64 <_fstat_r+0x38>
 880be84:	88800015 	stw	r2,0(r17)
 880be88:	1805883a 	mov	r2,r3
 880be8c:	dfc00217 	ldw	ra,8(sp)
 880be90:	dc400117 	ldw	r17,4(sp)
 880be94:	dc000017 	ldw	r16,0(sp)
 880be98:	dec00304 	addi	sp,sp,12
 880be9c:	f800283a 	ret

0880bea0 <_isatty_r>:
 880bea0:	defffd04 	addi	sp,sp,-12
 880bea4:	dc000015 	stw	r16,0(sp)
 880bea8:	04022074 	movhi	r16,2177
 880beac:	84156404 	addi	r16,r16,21904
 880beb0:	dc400115 	stw	r17,4(sp)
 880beb4:	80000015 	stw	zero,0(r16)
 880beb8:	2023883a 	mov	r17,r4
 880bebc:	2809883a 	mov	r4,r5
 880bec0:	dfc00215 	stw	ra,8(sp)
 880bec4:	880d13c0 	call	880d13c <isatty>
 880bec8:	1007883a 	mov	r3,r2
 880becc:	00bfffc4 	movi	r2,-1
 880bed0:	18800626 	beq	r3,r2,880beec <_isatty_r+0x4c>
 880bed4:	1805883a 	mov	r2,r3
 880bed8:	dfc00217 	ldw	ra,8(sp)
 880bedc:	dc400117 	ldw	r17,4(sp)
 880bee0:	dc000017 	ldw	r16,0(sp)
 880bee4:	dec00304 	addi	sp,sp,12
 880bee8:	f800283a 	ret
 880beec:	80800017 	ldw	r2,0(r16)
 880bef0:	103ff826 	beq	r2,zero,880bed4 <_isatty_r+0x34>
 880bef4:	88800015 	stw	r2,0(r17)
 880bef8:	1805883a 	mov	r2,r3
 880befc:	dfc00217 	ldw	ra,8(sp)
 880bf00:	dc400117 	ldw	r17,4(sp)
 880bf04:	dc000017 	ldw	r16,0(sp)
 880bf08:	dec00304 	addi	sp,sp,12
 880bf0c:	f800283a 	ret

0880bf10 <_lseek_r>:
 880bf10:	defffd04 	addi	sp,sp,-12
 880bf14:	dc000015 	stw	r16,0(sp)
 880bf18:	04022074 	movhi	r16,2177
 880bf1c:	84156404 	addi	r16,r16,21904
 880bf20:	dc400115 	stw	r17,4(sp)
 880bf24:	80000015 	stw	zero,0(r16)
 880bf28:	2023883a 	mov	r17,r4
 880bf2c:	2809883a 	mov	r4,r5
 880bf30:	300b883a 	mov	r5,r6
 880bf34:	380d883a 	mov	r6,r7
 880bf38:	dfc00215 	stw	ra,8(sp)
 880bf3c:	880d3480 	call	880d348 <lseek>
 880bf40:	1007883a 	mov	r3,r2
 880bf44:	00bfffc4 	movi	r2,-1
 880bf48:	18800626 	beq	r3,r2,880bf64 <_lseek_r+0x54>
 880bf4c:	1805883a 	mov	r2,r3
 880bf50:	dfc00217 	ldw	ra,8(sp)
 880bf54:	dc400117 	ldw	r17,4(sp)
 880bf58:	dc000017 	ldw	r16,0(sp)
 880bf5c:	dec00304 	addi	sp,sp,12
 880bf60:	f800283a 	ret
 880bf64:	80800017 	ldw	r2,0(r16)
 880bf68:	103ff826 	beq	r2,zero,880bf4c <_lseek_r+0x3c>
 880bf6c:	88800015 	stw	r2,0(r17)
 880bf70:	1805883a 	mov	r2,r3
 880bf74:	dfc00217 	ldw	ra,8(sp)
 880bf78:	dc400117 	ldw	r17,4(sp)
 880bf7c:	dc000017 	ldw	r16,0(sp)
 880bf80:	dec00304 	addi	sp,sp,12
 880bf84:	f800283a 	ret

0880bf88 <_read_r>:
 880bf88:	defffd04 	addi	sp,sp,-12
 880bf8c:	dc000015 	stw	r16,0(sp)
 880bf90:	04022074 	movhi	r16,2177
 880bf94:	84156404 	addi	r16,r16,21904
 880bf98:	dc400115 	stw	r17,4(sp)
 880bf9c:	80000015 	stw	zero,0(r16)
 880bfa0:	2023883a 	mov	r17,r4
 880bfa4:	2809883a 	mov	r4,r5
 880bfa8:	300b883a 	mov	r5,r6
 880bfac:	380d883a 	mov	r6,r7
 880bfb0:	dfc00215 	stw	ra,8(sp)
 880bfb4:	880d5440 	call	880d544 <read>
 880bfb8:	1007883a 	mov	r3,r2
 880bfbc:	00bfffc4 	movi	r2,-1
 880bfc0:	18800626 	beq	r3,r2,880bfdc <_read_r+0x54>
 880bfc4:	1805883a 	mov	r2,r3
 880bfc8:	dfc00217 	ldw	ra,8(sp)
 880bfcc:	dc400117 	ldw	r17,4(sp)
 880bfd0:	dc000017 	ldw	r16,0(sp)
 880bfd4:	dec00304 	addi	sp,sp,12
 880bfd8:	f800283a 	ret
 880bfdc:	80800017 	ldw	r2,0(r16)
 880bfe0:	103ff826 	beq	r2,zero,880bfc4 <_read_r+0x3c>
 880bfe4:	88800015 	stw	r2,0(r17)
 880bfe8:	1805883a 	mov	r2,r3
 880bfec:	dfc00217 	ldw	ra,8(sp)
 880bff0:	dc400117 	ldw	r17,4(sp)
 880bff4:	dc000017 	ldw	r16,0(sp)
 880bff8:	dec00304 	addi	sp,sp,12
 880bffc:	f800283a 	ret

0880c000 <__udivdi3>:
 880c000:	defff004 	addi	sp,sp,-64
 880c004:	2005883a 	mov	r2,r4
 880c008:	3011883a 	mov	r8,r6
 880c00c:	df000e15 	stw	fp,56(sp)
 880c010:	dd000a15 	stw	r20,40(sp)
 880c014:	dc000615 	stw	r16,24(sp)
 880c018:	dfc00f15 	stw	ra,60(sp)
 880c01c:	ddc00d15 	stw	r23,52(sp)
 880c020:	dd800c15 	stw	r22,48(sp)
 880c024:	dd400b15 	stw	r21,44(sp)
 880c028:	dcc00915 	stw	r19,36(sp)
 880c02c:	dc800815 	stw	r18,32(sp)
 880c030:	dc400715 	stw	r17,28(sp)
 880c034:	4021883a 	mov	r16,r8
 880c038:	1039883a 	mov	fp,r2
 880c03c:	2829883a 	mov	r20,r5
 880c040:	38003b1e 	bne	r7,zero,880c130 <__udivdi3+0x130>
 880c044:	2a005c36 	bltu	r5,r8,880c1b8 <__udivdi3+0x1b8>
 880c048:	4000a626 	beq	r8,zero,880c2e4 <__udivdi3+0x2e4>
 880c04c:	00bfffd4 	movui	r2,65535
 880c050:	14009e36 	bltu	r2,r16,880c2cc <__udivdi3+0x2cc>
 880c054:	00803fc4 	movi	r2,255
 880c058:	14013d36 	bltu	r2,r16,880c550 <__udivdi3+0x550>
 880c05c:	000b883a 	mov	r5,zero
 880c060:	0005883a 	mov	r2,zero
 880c064:	8084d83a 	srl	r2,r16,r2
 880c068:	01022074 	movhi	r4,2177
 880c06c:	21066204 	addi	r4,r4,6536
 880c070:	01800804 	movi	r6,32
 880c074:	1105883a 	add	r2,r2,r4
 880c078:	10c00003 	ldbu	r3,0(r2)
 880c07c:	28c7883a 	add	r3,r5,r3
 880c080:	30edc83a 	sub	r22,r6,r3
 880c084:	b000ee1e 	bne	r22,zero,880c440 <__udivdi3+0x440>
 880c088:	802ad43a 	srli	r21,r16,16
 880c08c:	00800044 	movi	r2,1
 880c090:	a423c83a 	sub	r17,r20,r16
 880c094:	85ffffcc 	andi	r23,r16,65535
 880c098:	d8800315 	stw	r2,12(sp)
 880c09c:	8809883a 	mov	r4,r17
 880c0a0:	a80b883a 	mov	r5,r21
 880c0a4:	88043d40 	call	88043d4 <__udivsi3>
 880c0a8:	8809883a 	mov	r4,r17
 880c0ac:	a80b883a 	mov	r5,r21
 880c0b0:	102d883a 	mov	r22,r2
 880c0b4:	88043dc0 	call	88043dc <__umodsi3>
 880c0b8:	1004943a 	slli	r2,r2,16
 880c0bc:	e006d43a 	srli	r3,fp,16
 880c0c0:	bda3383a 	mul	r17,r23,r22
 880c0c4:	10c4b03a 	or	r2,r2,r3
 880c0c8:	1440042e 	bgeu	r2,r17,880c0dc <__udivdi3+0xdc>
 880c0cc:	1405883a 	add	r2,r2,r16
 880c0d0:	b5bfffc4 	addi	r22,r22,-1
 880c0d4:	14000136 	bltu	r2,r16,880c0dc <__udivdi3+0xdc>
 880c0d8:	14413d36 	bltu	r2,r17,880c5d0 <__udivdi3+0x5d0>
 880c0dc:	1463c83a 	sub	r17,r2,r17
 880c0e0:	8809883a 	mov	r4,r17
 880c0e4:	a80b883a 	mov	r5,r21
 880c0e8:	88043d40 	call	88043d4 <__udivsi3>
 880c0ec:	8809883a 	mov	r4,r17
 880c0f0:	a80b883a 	mov	r5,r21
 880c0f4:	1029883a 	mov	r20,r2
 880c0f8:	88043dc0 	call	88043dc <__umodsi3>
 880c0fc:	1004943a 	slli	r2,r2,16
 880c100:	bd09383a 	mul	r4,r23,r20
 880c104:	e0ffffcc 	andi	r3,fp,65535
 880c108:	10c4b03a 	or	r2,r2,r3
 880c10c:	1100042e 	bgeu	r2,r4,880c120 <__udivdi3+0x120>
 880c110:	8085883a 	add	r2,r16,r2
 880c114:	a53fffc4 	addi	r20,r20,-1
 880c118:	14000136 	bltu	r2,r16,880c120 <__udivdi3+0x120>
 880c11c:	11012036 	bltu	r2,r4,880c5a0 <__udivdi3+0x5a0>
 880c120:	b004943a 	slli	r2,r22,16
 880c124:	d9000317 	ldw	r4,12(sp)
 880c128:	a084b03a 	or	r2,r20,r2
 880c12c:	00001506 	br	880c184 <__udivdi3+0x184>
 880c130:	380d883a 	mov	r6,r7
 880c134:	29c06236 	bltu	r5,r7,880c2c0 <__udivdi3+0x2c0>
 880c138:	00bfffd4 	movui	r2,65535
 880c13c:	11c05a36 	bltu	r2,r7,880c2a8 <__udivdi3+0x2a8>
 880c140:	00803fc4 	movi	r2,255
 880c144:	11c0fc36 	bltu	r2,r7,880c538 <__udivdi3+0x538>
 880c148:	000b883a 	mov	r5,zero
 880c14c:	0005883a 	mov	r2,zero
 880c150:	3084d83a 	srl	r2,r6,r2
 880c154:	01022074 	movhi	r4,2177
 880c158:	21066204 	addi	r4,r4,6536
 880c15c:	01c00804 	movi	r7,32
 880c160:	1105883a 	add	r2,r2,r4
 880c164:	10c00003 	ldbu	r3,0(r2)
 880c168:	28c7883a 	add	r3,r5,r3
 880c16c:	38efc83a 	sub	r23,r7,r3
 880c170:	b800691e 	bne	r23,zero,880c318 <__udivdi3+0x318>
 880c174:	35000136 	bltu	r6,r20,880c17c <__udivdi3+0x17c>
 880c178:	e4005136 	bltu	fp,r16,880c2c0 <__udivdi3+0x2c0>
 880c17c:	00800044 	movi	r2,1
 880c180:	0009883a 	mov	r4,zero
 880c184:	2007883a 	mov	r3,r4
 880c188:	dfc00f17 	ldw	ra,60(sp)
 880c18c:	df000e17 	ldw	fp,56(sp)
 880c190:	ddc00d17 	ldw	r23,52(sp)
 880c194:	dd800c17 	ldw	r22,48(sp)
 880c198:	dd400b17 	ldw	r21,44(sp)
 880c19c:	dd000a17 	ldw	r20,40(sp)
 880c1a0:	dcc00917 	ldw	r19,36(sp)
 880c1a4:	dc800817 	ldw	r18,32(sp)
 880c1a8:	dc400717 	ldw	r17,28(sp)
 880c1ac:	dc000617 	ldw	r16,24(sp)
 880c1b0:	dec01004 	addi	sp,sp,64
 880c1b4:	f800283a 	ret
 880c1b8:	00bfffd4 	movui	r2,65535
 880c1bc:	12005036 	bltu	r2,r8,880c300 <__udivdi3+0x300>
 880c1c0:	00803fc4 	movi	r2,255
 880c1c4:	1200e836 	bltu	r2,r8,880c568 <__udivdi3+0x568>
 880c1c8:	000b883a 	mov	r5,zero
 880c1cc:	0005883a 	mov	r2,zero
 880c1d0:	8084d83a 	srl	r2,r16,r2
 880c1d4:	01022074 	movhi	r4,2177
 880c1d8:	21066204 	addi	r4,r4,6536
 880c1dc:	01800804 	movi	r6,32
 880c1e0:	1105883a 	add	r2,r2,r4
 880c1e4:	10c00003 	ldbu	r3,0(r2)
 880c1e8:	28c7883a 	add	r3,r5,r3
 880c1ec:	30cbc83a 	sub	r5,r6,r3
 880c1f0:	28000626 	beq	r5,zero,880c20c <__udivdi3+0x20c>
 880c1f4:	3145c83a 	sub	r2,r6,r5
 880c1f8:	e084d83a 	srl	r2,fp,r2
 880c1fc:	a146983a 	sll	r3,r20,r5
 880c200:	e178983a 	sll	fp,fp,r5
 880c204:	8160983a 	sll	r16,r16,r5
 880c208:	18a8b03a 	or	r20,r3,r2
 880c20c:	802ad43a 	srli	r21,r16,16
 880c210:	a009883a 	mov	r4,r20
 880c214:	85ffffcc 	andi	r23,r16,65535
 880c218:	a80b883a 	mov	r5,r21
 880c21c:	88043d40 	call	88043d4 <__udivsi3>
 880c220:	a009883a 	mov	r4,r20
 880c224:	a80b883a 	mov	r5,r21
 880c228:	102d883a 	mov	r22,r2
 880c22c:	88043dc0 	call	88043dc <__umodsi3>
 880c230:	1004943a 	slli	r2,r2,16
 880c234:	e006d43a 	srli	r3,fp,16
 880c238:	bda3383a 	mul	r17,r23,r22
 880c23c:	10c4b03a 	or	r2,r2,r3
 880c240:	1440042e 	bgeu	r2,r17,880c254 <__udivdi3+0x254>
 880c244:	1405883a 	add	r2,r2,r16
 880c248:	b5bfffc4 	addi	r22,r22,-1
 880c24c:	14000136 	bltu	r2,r16,880c254 <__udivdi3+0x254>
 880c250:	1440d536 	bltu	r2,r17,880c5a8 <__udivdi3+0x5a8>
 880c254:	1463c83a 	sub	r17,r2,r17
 880c258:	8809883a 	mov	r4,r17
 880c25c:	a80b883a 	mov	r5,r21
 880c260:	88043d40 	call	88043d4 <__udivsi3>
 880c264:	8809883a 	mov	r4,r17
 880c268:	a80b883a 	mov	r5,r21
 880c26c:	1029883a 	mov	r20,r2
 880c270:	88043dc0 	call	88043dc <__umodsi3>
 880c274:	1004943a 	slli	r2,r2,16
 880c278:	bd09383a 	mul	r4,r23,r20
 880c27c:	e0ffffcc 	andi	r3,fp,65535
 880c280:	10c4b03a 	or	r2,r2,r3
 880c284:	1100042e 	bgeu	r2,r4,880c298 <__udivdi3+0x298>
 880c288:	8085883a 	add	r2,r16,r2
 880c28c:	a53fffc4 	addi	r20,r20,-1
 880c290:	14000136 	bltu	r2,r16,880c298 <__udivdi3+0x298>
 880c294:	1100c736 	bltu	r2,r4,880c5b4 <__udivdi3+0x5b4>
 880c298:	b004943a 	slli	r2,r22,16
 880c29c:	0009883a 	mov	r4,zero
 880c2a0:	a084b03a 	or	r2,r20,r2
 880c2a4:	003fb706 	br	880c184 <__udivdi3+0x184>
 880c2a8:	00804034 	movhi	r2,256
 880c2ac:	10bfffc4 	addi	r2,r2,-1
 880c2b0:	11c0a436 	bltu	r2,r7,880c544 <__udivdi3+0x544>
 880c2b4:	01400404 	movi	r5,16
 880c2b8:	2805883a 	mov	r2,r5
 880c2bc:	003fa406 	br	880c150 <__udivdi3+0x150>
 880c2c0:	0005883a 	mov	r2,zero
 880c2c4:	0009883a 	mov	r4,zero
 880c2c8:	003fae06 	br	880c184 <__udivdi3+0x184>
 880c2cc:	00804034 	movhi	r2,256
 880c2d0:	10bfffc4 	addi	r2,r2,-1
 880c2d4:	1400a136 	bltu	r2,r16,880c55c <__udivdi3+0x55c>
 880c2d8:	01400404 	movi	r5,16
 880c2dc:	2805883a 	mov	r2,r5
 880c2e0:	003f6006 	br	880c064 <__udivdi3+0x64>
 880c2e4:	01000044 	movi	r4,1
 880c2e8:	000b883a 	mov	r5,zero
 880c2ec:	88043d40 	call	88043d4 <__udivsi3>
 880c2f0:	1021883a 	mov	r16,r2
 880c2f4:	00bfffd4 	movui	r2,65535
 880c2f8:	143ff436 	bltu	r2,r16,880c2cc <__udivdi3+0x2cc>
 880c2fc:	003f5506 	br	880c054 <__udivdi3+0x54>
 880c300:	00804034 	movhi	r2,256
 880c304:	10bfffc4 	addi	r2,r2,-1
 880c308:	12009a36 	bltu	r2,r8,880c574 <__udivdi3+0x574>
 880c30c:	01400404 	movi	r5,16
 880c310:	2805883a 	mov	r2,r5
 880c314:	003fae06 	br	880c1d0 <__udivdi3+0x1d0>
 880c318:	3dc5c83a 	sub	r2,r7,r23
 880c31c:	35c8983a 	sll	r4,r6,r23
 880c320:	8086d83a 	srl	r3,r16,r2
 880c324:	a0a2d83a 	srl	r17,r20,r2
 880c328:	e084d83a 	srl	r2,fp,r2
 880c32c:	20eab03a 	or	r21,r4,r3
 880c330:	a82cd43a 	srli	r22,r21,16
 880c334:	a5c6983a 	sll	r3,r20,r23
 880c338:	8809883a 	mov	r4,r17
 880c33c:	b00b883a 	mov	r5,r22
 880c340:	1886b03a 	or	r3,r3,r2
 880c344:	d8c00215 	stw	r3,8(sp)
 880c348:	88043d40 	call	88043d4 <__udivsi3>
 880c34c:	8809883a 	mov	r4,r17
 880c350:	b00b883a 	mov	r5,r22
 880c354:	1029883a 	mov	r20,r2
 880c358:	88043dc0 	call	88043dc <__umodsi3>
 880c35c:	a8ffffcc 	andi	r3,r21,65535
 880c360:	d8c00515 	stw	r3,20(sp)
 880c364:	d9000217 	ldw	r4,8(sp)
 880c368:	d9400517 	ldw	r5,20(sp)
 880c36c:	1004943a 	slli	r2,r2,16
 880c370:	2006d43a 	srli	r3,r4,16
 880c374:	85e0983a 	sll	r16,r16,r23
 880c378:	2d23383a 	mul	r17,r5,r20
 880c37c:	10c4b03a 	or	r2,r2,r3
 880c380:	dc000015 	stw	r16,0(sp)
 880c384:	1440032e 	bgeu	r2,r17,880c394 <__udivdi3+0x394>
 880c388:	1545883a 	add	r2,r2,r21
 880c38c:	a53fffc4 	addi	r20,r20,-1
 880c390:	15407f2e 	bgeu	r2,r21,880c590 <__udivdi3+0x590>
 880c394:	1463c83a 	sub	r17,r2,r17
 880c398:	8809883a 	mov	r4,r17
 880c39c:	b00b883a 	mov	r5,r22
 880c3a0:	88043d40 	call	88043d4 <__udivsi3>
 880c3a4:	8809883a 	mov	r4,r17
 880c3a8:	b00b883a 	mov	r5,r22
 880c3ac:	1021883a 	mov	r16,r2
 880c3b0:	88043dc0 	call	88043dc <__umodsi3>
 880c3b4:	d8c00517 	ldw	r3,20(sp)
 880c3b8:	d9000217 	ldw	r4,8(sp)
 880c3bc:	1004943a 	slli	r2,r2,16
 880c3c0:	1c0f383a 	mul	r7,r3,r16
 880c3c4:	20ffffcc 	andi	r3,r4,65535
 880c3c8:	10e2b03a 	or	r17,r2,r3
 880c3cc:	89c0032e 	bgeu	r17,r7,880c3dc <__udivdi3+0x3dc>
 880c3d0:	8d63883a 	add	r17,r17,r21
 880c3d4:	843fffc4 	addi	r16,r16,-1
 880c3d8:	8d40692e 	bgeu	r17,r21,880c580 <__udivdi3+0x580>
 880c3dc:	a008943a 	slli	r4,r20,16
 880c3e0:	d9400017 	ldw	r5,0(sp)
 880c3e4:	89e3c83a 	sub	r17,r17,r7
 880c3e8:	8110b03a 	or	r8,r16,r4
 880c3ec:	280cd43a 	srli	r6,r5,16
 880c3f0:	28ffffcc 	andi	r3,r5,65535
 880c3f4:	40bfffcc 	andi	r2,r8,65535
 880c3f8:	400ad43a 	srli	r5,r8,16
 880c3fc:	10d3383a 	mul	r9,r2,r3
 880c400:	1185383a 	mul	r2,r2,r6
 880c404:	28c7383a 	mul	r3,r5,r3
 880c408:	4808d43a 	srli	r4,r9,16
 880c40c:	298b383a 	mul	r5,r5,r6
 880c410:	10c5883a 	add	r2,r2,r3
 880c414:	2089883a 	add	r4,r4,r2
 880c418:	20c0022e 	bgeu	r4,r3,880c424 <__udivdi3+0x424>
 880c41c:	00800074 	movhi	r2,1
 880c420:	288b883a 	add	r5,r5,r2
 880c424:	2004d43a 	srli	r2,r4,16
 880c428:	288b883a 	add	r5,r5,r2
 880c42c:	89403f36 	bltu	r17,r5,880c52c <__udivdi3+0x52c>
 880c430:	89403926 	beq	r17,r5,880c518 <__udivdi3+0x518>
 880c434:	4005883a 	mov	r2,r8
 880c438:	0009883a 	mov	r4,zero
 880c43c:	003f5106 	br	880c184 <__udivdi3+0x184>
 880c440:	85a0983a 	sll	r16,r16,r22
 880c444:	3585c83a 	sub	r2,r6,r22
 880c448:	a0a2d83a 	srl	r17,r20,r2
 880c44c:	802ad43a 	srli	r21,r16,16
 880c450:	e084d83a 	srl	r2,fp,r2
 880c454:	a586983a 	sll	r3,r20,r22
 880c458:	8809883a 	mov	r4,r17
 880c45c:	a80b883a 	mov	r5,r21
 880c460:	1886b03a 	or	r3,r3,r2
 880c464:	d8c00115 	stw	r3,4(sp)
 880c468:	88043d40 	call	88043d4 <__udivsi3>
 880c46c:	8809883a 	mov	r4,r17
 880c470:	a80b883a 	mov	r5,r21
 880c474:	d8800415 	stw	r2,16(sp)
 880c478:	88043dc0 	call	88043dc <__umodsi3>
 880c47c:	d9000117 	ldw	r4,4(sp)
 880c480:	d9400417 	ldw	r5,16(sp)
 880c484:	1004943a 	slli	r2,r2,16
 880c488:	85ffffcc 	andi	r23,r16,65535
 880c48c:	2006d43a 	srli	r3,r4,16
 880c490:	b963383a 	mul	r17,r23,r5
 880c494:	10c4b03a 	or	r2,r2,r3
 880c498:	1440042e 	bgeu	r2,r17,880c4ac <__udivdi3+0x4ac>
 880c49c:	297fffc4 	addi	r5,r5,-1
 880c4a0:	1405883a 	add	r2,r2,r16
 880c4a4:	d9400415 	stw	r5,16(sp)
 880c4a8:	1400442e 	bgeu	r2,r16,880c5bc <__udivdi3+0x5bc>
 880c4ac:	1463c83a 	sub	r17,r2,r17
 880c4b0:	8809883a 	mov	r4,r17
 880c4b4:	a80b883a 	mov	r5,r21
 880c4b8:	88043d40 	call	88043d4 <__udivsi3>
 880c4bc:	8809883a 	mov	r4,r17
 880c4c0:	a80b883a 	mov	r5,r21
 880c4c4:	1029883a 	mov	r20,r2
 880c4c8:	88043dc0 	call	88043dc <__umodsi3>
 880c4cc:	d9400117 	ldw	r5,4(sp)
 880c4d0:	1004943a 	slli	r2,r2,16
 880c4d4:	bd09383a 	mul	r4,r23,r20
 880c4d8:	28ffffcc 	andi	r3,r5,65535
 880c4dc:	10c6b03a 	or	r3,r2,r3
 880c4e0:	1900062e 	bgeu	r3,r4,880c4fc <__udivdi3+0x4fc>
 880c4e4:	1c07883a 	add	r3,r3,r16
 880c4e8:	a53fffc4 	addi	r20,r20,-1
 880c4ec:	1c000336 	bltu	r3,r16,880c4fc <__udivdi3+0x4fc>
 880c4f0:	1900022e 	bgeu	r3,r4,880c4fc <__udivdi3+0x4fc>
 880c4f4:	a53fffc4 	addi	r20,r20,-1
 880c4f8:	1c07883a 	add	r3,r3,r16
 880c4fc:	d9400417 	ldw	r5,16(sp)
 880c500:	e5b8983a 	sll	fp,fp,r22
 880c504:	1923c83a 	sub	r17,r3,r4
 880c508:	2804943a 	slli	r2,r5,16
 880c50c:	a0a8b03a 	or	r20,r20,r2
 880c510:	dd000315 	stw	r20,12(sp)
 880c514:	003ee106 	br	880c09c <__udivdi3+0x9c>
 880c518:	2004943a 	slli	r2,r4,16
 880c51c:	e5c8983a 	sll	r4,fp,r23
 880c520:	48ffffcc 	andi	r3,r9,65535
 880c524:	10c5883a 	add	r2,r2,r3
 880c528:	20bfc22e 	bgeu	r4,r2,880c434 <__udivdi3+0x434>
 880c52c:	40bfffc4 	addi	r2,r8,-1
 880c530:	0009883a 	mov	r4,zero
 880c534:	003f1306 	br	880c184 <__udivdi3+0x184>
 880c538:	01400204 	movi	r5,8
 880c53c:	2805883a 	mov	r2,r5
 880c540:	003f0306 	br	880c150 <__udivdi3+0x150>
 880c544:	01400604 	movi	r5,24
 880c548:	2805883a 	mov	r2,r5
 880c54c:	003f0006 	br	880c150 <__udivdi3+0x150>
 880c550:	01400204 	movi	r5,8
 880c554:	2805883a 	mov	r2,r5
 880c558:	003ec206 	br	880c064 <__udivdi3+0x64>
 880c55c:	01400604 	movi	r5,24
 880c560:	2805883a 	mov	r2,r5
 880c564:	003ebf06 	br	880c064 <__udivdi3+0x64>
 880c568:	01400204 	movi	r5,8
 880c56c:	2805883a 	mov	r2,r5
 880c570:	003f1706 	br	880c1d0 <__udivdi3+0x1d0>
 880c574:	01400604 	movi	r5,24
 880c578:	2805883a 	mov	r2,r5
 880c57c:	003f1406 	br	880c1d0 <__udivdi3+0x1d0>
 880c580:	89ff962e 	bgeu	r17,r7,880c3dc <__udivdi3+0x3dc>
 880c584:	8d63883a 	add	r17,r17,r21
 880c588:	843fffc4 	addi	r16,r16,-1
 880c58c:	003f9306 	br	880c3dc <__udivdi3+0x3dc>
 880c590:	147f802e 	bgeu	r2,r17,880c394 <__udivdi3+0x394>
 880c594:	a53fffc4 	addi	r20,r20,-1
 880c598:	1545883a 	add	r2,r2,r21
 880c59c:	003f7d06 	br	880c394 <__udivdi3+0x394>
 880c5a0:	a53fffc4 	addi	r20,r20,-1
 880c5a4:	003ede06 	br	880c120 <__udivdi3+0x120>
 880c5a8:	b5bfffc4 	addi	r22,r22,-1
 880c5ac:	1405883a 	add	r2,r2,r16
 880c5b0:	003f2806 	br	880c254 <__udivdi3+0x254>
 880c5b4:	a53fffc4 	addi	r20,r20,-1
 880c5b8:	003f3706 	br	880c298 <__udivdi3+0x298>
 880c5bc:	147fbb2e 	bgeu	r2,r17,880c4ac <__udivdi3+0x4ac>
 880c5c0:	297fffc4 	addi	r5,r5,-1
 880c5c4:	1405883a 	add	r2,r2,r16
 880c5c8:	d9400415 	stw	r5,16(sp)
 880c5cc:	003fb706 	br	880c4ac <__udivdi3+0x4ac>
 880c5d0:	b5bfffc4 	addi	r22,r22,-1
 880c5d4:	1405883a 	add	r2,r2,r16
 880c5d8:	003ec006 	br	880c0dc <__udivdi3+0xdc>

0880c5dc <__umoddi3>:
 880c5dc:	defff104 	addi	sp,sp,-60
 880c5e0:	dd800b15 	stw	r22,44(sp)
 880c5e4:	dd000915 	stw	r20,36(sp)
 880c5e8:	dc000515 	stw	r16,20(sp)
 880c5ec:	dfc00e15 	stw	ra,56(sp)
 880c5f0:	df000d15 	stw	fp,52(sp)
 880c5f4:	ddc00c15 	stw	r23,48(sp)
 880c5f8:	dd400a15 	stw	r21,40(sp)
 880c5fc:	dcc00815 	stw	r19,32(sp)
 880c600:	dc800715 	stw	r18,28(sp)
 880c604:	dc400615 	stw	r17,24(sp)
 880c608:	3021883a 	mov	r16,r6
 880c60c:	202d883a 	mov	r22,r4
 880c610:	2829883a 	mov	r20,r5
 880c614:	38002b1e 	bne	r7,zero,880c6c4 <__umoddi3+0xe8>
 880c618:	29805036 	bltu	r5,r6,880c75c <__umoddi3+0x180>
 880c61c:	30008a26 	beq	r6,zero,880c848 <__umoddi3+0x26c>
 880c620:	00bfffd4 	movui	r2,65535
 880c624:	14008236 	bltu	r2,r16,880c830 <__umoddi3+0x254>
 880c628:	00803fc4 	movi	r2,255
 880c62c:	14013636 	bltu	r2,r16,880cb08 <__umoddi3+0x52c>
 880c630:	000b883a 	mov	r5,zero
 880c634:	0005883a 	mov	r2,zero
 880c638:	8084d83a 	srl	r2,r16,r2
 880c63c:	01022074 	movhi	r4,2177
 880c640:	21066204 	addi	r4,r4,6536
 880c644:	01800804 	movi	r6,32
 880c648:	1105883a 	add	r2,r2,r4
 880c64c:	10c00003 	ldbu	r3,0(r2)
 880c650:	28c7883a 	add	r3,r5,r3
 880c654:	30efc83a 	sub	r23,r6,r3
 880c658:	b800941e 	bne	r23,zero,880c8ac <__umoddi3+0x2d0>
 880c65c:	802ad43a 	srli	r21,r16,16
 880c660:	a423c83a 	sub	r17,r20,r16
 880c664:	0039883a 	mov	fp,zero
 880c668:	853fffcc 	andi	r20,r16,65535
 880c66c:	8809883a 	mov	r4,r17
 880c670:	a80b883a 	mov	r5,r21
 880c674:	88043d40 	call	88043d4 <__udivsi3>
 880c678:	8809883a 	mov	r4,r17
 880c67c:	a80b883a 	mov	r5,r21
 880c680:	a0a3383a 	mul	r17,r20,r2
 880c684:	88043dc0 	call	88043dc <__umodsi3>
 880c688:	1004943a 	slli	r2,r2,16
 880c68c:	b006d43a 	srli	r3,r22,16
 880c690:	10c4b03a 	or	r2,r2,r3
 880c694:	1440032e 	bgeu	r2,r17,880c6a4 <__umoddi3+0xc8>
 880c698:	1405883a 	add	r2,r2,r16
 880c69c:	14000136 	bltu	r2,r16,880c6a4 <__umoddi3+0xc8>
 880c6a0:	14413536 	bltu	r2,r17,880cb78 <__umoddi3+0x59c>
 880c6a4:	1463c83a 	sub	r17,r2,r17
 880c6a8:	8809883a 	mov	r4,r17
 880c6ac:	a80b883a 	mov	r5,r21
 880c6b0:	88043d40 	call	88043d4 <__udivsi3>
 880c6b4:	8809883a 	mov	r4,r17
 880c6b8:	a0a3383a 	mul	r17,r20,r2
 880c6bc:	a80b883a 	mov	r5,r21
 880c6c0:	00004d06 	br	880c7f8 <__umoddi3+0x21c>
 880c6c4:	380d883a 	mov	r6,r7
 880c6c8:	29c0102e 	bgeu	r5,r7,880c70c <__umoddi3+0x130>
 880c6cc:	2011883a 	mov	r8,r4
 880c6d0:	2813883a 	mov	r9,r5
 880c6d4:	4005883a 	mov	r2,r8
 880c6d8:	4807883a 	mov	r3,r9
 880c6dc:	dfc00e17 	ldw	ra,56(sp)
 880c6e0:	df000d17 	ldw	fp,52(sp)
 880c6e4:	ddc00c17 	ldw	r23,48(sp)
 880c6e8:	dd800b17 	ldw	r22,44(sp)
 880c6ec:	dd400a17 	ldw	r21,40(sp)
 880c6f0:	dd000917 	ldw	r20,36(sp)
 880c6f4:	dcc00817 	ldw	r19,32(sp)
 880c6f8:	dc800717 	ldw	r18,28(sp)
 880c6fc:	dc400617 	ldw	r17,24(sp)
 880c700:	dc000517 	ldw	r16,20(sp)
 880c704:	dec00f04 	addi	sp,sp,60
 880c708:	f800283a 	ret
 880c70c:	00bfffd4 	movui	r2,65535
 880c710:	11c05a36 	bltu	r2,r7,880c87c <__umoddi3+0x2a0>
 880c714:	00803fc4 	movi	r2,255
 880c718:	11c0fe36 	bltu	r2,r7,880cb14 <__umoddi3+0x538>
 880c71c:	000b883a 	mov	r5,zero
 880c720:	0005883a 	mov	r2,zero
 880c724:	3084d83a 	srl	r2,r6,r2
 880c728:	01022074 	movhi	r4,2177
 880c72c:	21066204 	addi	r4,r4,6536
 880c730:	01c00804 	movi	r7,32
 880c734:	1105883a 	add	r2,r2,r4
 880c738:	10c00003 	ldbu	r3,0(r2)
 880c73c:	28c7883a 	add	r3,r5,r3
 880c740:	38ebc83a 	sub	r21,r7,r3
 880c744:	a800851e 	bne	r21,zero,880c95c <__umoddi3+0x380>
 880c748:	35005236 	bltu	r6,r20,880c894 <__umoddi3+0x2b8>
 880c74c:	b400512e 	bgeu	r22,r16,880c894 <__umoddi3+0x2b8>
 880c750:	b011883a 	mov	r8,r22
 880c754:	a013883a 	mov	r9,r20
 880c758:	003fde06 	br	880c6d4 <__umoddi3+0xf8>
 880c75c:	00bfffd4 	movui	r2,65535
 880c760:	11804036 	bltu	r2,r6,880c864 <__umoddi3+0x288>
 880c764:	00803fc4 	movi	r2,255
 880c768:	1180ed36 	bltu	r2,r6,880cb20 <__umoddi3+0x544>
 880c76c:	000b883a 	mov	r5,zero
 880c770:	0005883a 	mov	r2,zero
 880c774:	8084d83a 	srl	r2,r16,r2
 880c778:	01022074 	movhi	r4,2177
 880c77c:	21066204 	addi	r4,r4,6536
 880c780:	01800804 	movi	r6,32
 880c784:	1105883a 	add	r2,r2,r4
 880c788:	10c00003 	ldbu	r3,0(r2)
 880c78c:	28c7883a 	add	r3,r5,r3
 880c790:	30c7c83a 	sub	r3,r6,r3
 880c794:	1800bf1e 	bne	r3,zero,880ca94 <__umoddi3+0x4b8>
 880c798:	0039883a 	mov	fp,zero
 880c79c:	802ad43a 	srli	r21,r16,16
 880c7a0:	a009883a 	mov	r4,r20
 880c7a4:	85ffffcc 	andi	r23,r16,65535
 880c7a8:	a80b883a 	mov	r5,r21
 880c7ac:	88043d40 	call	88043d4 <__udivsi3>
 880c7b0:	a009883a 	mov	r4,r20
 880c7b4:	a80b883a 	mov	r5,r21
 880c7b8:	b8a3383a 	mul	r17,r23,r2
 880c7bc:	88043dc0 	call	88043dc <__umodsi3>
 880c7c0:	1004943a 	slli	r2,r2,16
 880c7c4:	b006d43a 	srli	r3,r22,16
 880c7c8:	10c4b03a 	or	r2,r2,r3
 880c7cc:	1440032e 	bgeu	r2,r17,880c7dc <__umoddi3+0x200>
 880c7d0:	1405883a 	add	r2,r2,r16
 880c7d4:	14000136 	bltu	r2,r16,880c7dc <__umoddi3+0x200>
 880c7d8:	1440e536 	bltu	r2,r17,880cb70 <__umoddi3+0x594>
 880c7dc:	1463c83a 	sub	r17,r2,r17
 880c7e0:	8809883a 	mov	r4,r17
 880c7e4:	a80b883a 	mov	r5,r21
 880c7e8:	88043d40 	call	88043d4 <__udivsi3>
 880c7ec:	8809883a 	mov	r4,r17
 880c7f0:	b8a3383a 	mul	r17,r23,r2
 880c7f4:	a80b883a 	mov	r5,r21
 880c7f8:	88043dc0 	call	88043dc <__umodsi3>
 880c7fc:	1004943a 	slli	r2,r2,16
 880c800:	b0ffffcc 	andi	r3,r22,65535
 880c804:	10c4b03a 	or	r2,r2,r3
 880c808:	1440042e 	bgeu	r2,r17,880c81c <__umoddi3+0x240>
 880c80c:	1405883a 	add	r2,r2,r16
 880c810:	14000236 	bltu	r2,r16,880c81c <__umoddi3+0x240>
 880c814:	1440012e 	bgeu	r2,r17,880c81c <__umoddi3+0x240>
 880c818:	1405883a 	add	r2,r2,r16
 880c81c:	1445c83a 	sub	r2,r2,r17
 880c820:	1724d83a 	srl	r18,r2,fp
 880c824:	0013883a 	mov	r9,zero
 880c828:	9011883a 	mov	r8,r18
 880c82c:	003fa906 	br	880c6d4 <__umoddi3+0xf8>
 880c830:	00804034 	movhi	r2,256
 880c834:	10bfffc4 	addi	r2,r2,-1
 880c838:	1400b036 	bltu	r2,r16,880cafc <__umoddi3+0x520>
 880c83c:	01400404 	movi	r5,16
 880c840:	2805883a 	mov	r2,r5
 880c844:	003f7c06 	br	880c638 <__umoddi3+0x5c>
 880c848:	01000044 	movi	r4,1
 880c84c:	000b883a 	mov	r5,zero
 880c850:	88043d40 	call	88043d4 <__udivsi3>
 880c854:	1021883a 	mov	r16,r2
 880c858:	00bfffd4 	movui	r2,65535
 880c85c:	143ff436 	bltu	r2,r16,880c830 <__umoddi3+0x254>
 880c860:	003f7106 	br	880c628 <__umoddi3+0x4c>
 880c864:	00804034 	movhi	r2,256
 880c868:	10bfffc4 	addi	r2,r2,-1
 880c86c:	1180af36 	bltu	r2,r6,880cb2c <__umoddi3+0x550>
 880c870:	01400404 	movi	r5,16
 880c874:	2805883a 	mov	r2,r5
 880c878:	003fbe06 	br	880c774 <__umoddi3+0x198>
 880c87c:	00804034 	movhi	r2,256
 880c880:	10bfffc4 	addi	r2,r2,-1
 880c884:	11c0ac36 	bltu	r2,r7,880cb38 <__umoddi3+0x55c>
 880c888:	01400404 	movi	r5,16
 880c88c:	2805883a 	mov	r2,r5
 880c890:	003fa406 	br	880c724 <__umoddi3+0x148>
 880c894:	b409c83a 	sub	r4,r22,r16
 880c898:	b105803a 	cmpltu	r2,r22,r4
 880c89c:	a187c83a 	sub	r3,r20,r6
 880c8a0:	18a9c83a 	sub	r20,r3,r2
 880c8a4:	202d883a 	mov	r22,r4
 880c8a8:	003fa906 	br	880c750 <__umoddi3+0x174>
 880c8ac:	85e0983a 	sll	r16,r16,r23
 880c8b0:	35c5c83a 	sub	r2,r6,r23
 880c8b4:	a0a2d83a 	srl	r17,r20,r2
 880c8b8:	802ad43a 	srli	r21,r16,16
 880c8bc:	b084d83a 	srl	r2,r22,r2
 880c8c0:	a5c6983a 	sll	r3,r20,r23
 880c8c4:	8809883a 	mov	r4,r17
 880c8c8:	a80b883a 	mov	r5,r21
 880c8cc:	1886b03a 	or	r3,r3,r2
 880c8d0:	d8c00115 	stw	r3,4(sp)
 880c8d4:	853fffcc 	andi	r20,r16,65535
 880c8d8:	88043d40 	call	88043d4 <__udivsi3>
 880c8dc:	8809883a 	mov	r4,r17
 880c8e0:	a80b883a 	mov	r5,r21
 880c8e4:	a0a3383a 	mul	r17,r20,r2
 880c8e8:	88043dc0 	call	88043dc <__umodsi3>
 880c8ec:	d9000117 	ldw	r4,4(sp)
 880c8f0:	1004943a 	slli	r2,r2,16
 880c8f4:	b839883a 	mov	fp,r23
 880c8f8:	2006d43a 	srli	r3,r4,16
 880c8fc:	10c4b03a 	or	r2,r2,r3
 880c900:	1440022e 	bgeu	r2,r17,880c90c <__umoddi3+0x330>
 880c904:	1405883a 	add	r2,r2,r16
 880c908:	1400962e 	bgeu	r2,r16,880cb64 <__umoddi3+0x588>
 880c90c:	1463c83a 	sub	r17,r2,r17
 880c910:	8809883a 	mov	r4,r17
 880c914:	a80b883a 	mov	r5,r21
 880c918:	88043d40 	call	88043d4 <__udivsi3>
 880c91c:	8809883a 	mov	r4,r17
 880c920:	a80b883a 	mov	r5,r21
 880c924:	a0a3383a 	mul	r17,r20,r2
 880c928:	88043dc0 	call	88043dc <__umodsi3>
 880c92c:	d9400117 	ldw	r5,4(sp)
 880c930:	1004943a 	slli	r2,r2,16
 880c934:	28ffffcc 	andi	r3,r5,65535
 880c938:	10c4b03a 	or	r2,r2,r3
 880c93c:	1440042e 	bgeu	r2,r17,880c950 <__umoddi3+0x374>
 880c940:	1405883a 	add	r2,r2,r16
 880c944:	14000236 	bltu	r2,r16,880c950 <__umoddi3+0x374>
 880c948:	1440012e 	bgeu	r2,r17,880c950 <__umoddi3+0x374>
 880c94c:	1405883a 	add	r2,r2,r16
 880c950:	b5ec983a 	sll	r22,r22,r23
 880c954:	1463c83a 	sub	r17,r2,r17
 880c958:	003f4406 	br	880c66c <__umoddi3+0x90>
 880c95c:	3d4fc83a 	sub	r7,r7,r21
 880c960:	3546983a 	sll	r3,r6,r21
 880c964:	81c4d83a 	srl	r2,r16,r7
 880c968:	a1e2d83a 	srl	r17,r20,r7
 880c96c:	a54c983a 	sll	r6,r20,r21
 880c970:	18aeb03a 	or	r23,r3,r2
 880c974:	b828d43a 	srli	r20,r23,16
 880c978:	b1c4d83a 	srl	r2,r22,r7
 880c97c:	8809883a 	mov	r4,r17
 880c980:	a00b883a 	mov	r5,r20
 880c984:	308cb03a 	or	r6,r6,r2
 880c988:	d9c00315 	stw	r7,12(sp)
 880c98c:	d9800215 	stw	r6,8(sp)
 880c990:	88043d40 	call	88043d4 <__udivsi3>
 880c994:	8809883a 	mov	r4,r17
 880c998:	a00b883a 	mov	r5,r20
 880c99c:	1039883a 	mov	fp,r2
 880c9a0:	88043dc0 	call	88043dc <__umodsi3>
 880c9a4:	b8ffffcc 	andi	r3,r23,65535
 880c9a8:	d8c00415 	stw	r3,16(sp)
 880c9ac:	d9000217 	ldw	r4,8(sp)
 880c9b0:	d9400417 	ldw	r5,16(sp)
 880c9b4:	1004943a 	slli	r2,r2,16
 880c9b8:	2006d43a 	srli	r3,r4,16
 880c9bc:	8560983a 	sll	r16,r16,r21
 880c9c0:	2f23383a 	mul	r17,r5,fp
 880c9c4:	10c4b03a 	or	r2,r2,r3
 880c9c8:	dc000015 	stw	r16,0(sp)
 880c9cc:	b56c983a 	sll	r22,r22,r21
 880c9d0:	1440032e 	bgeu	r2,r17,880c9e0 <__umoddi3+0x404>
 880c9d4:	15c5883a 	add	r2,r2,r23
 880c9d8:	e73fffc4 	addi	fp,fp,-1
 880c9dc:	15c05d2e 	bgeu	r2,r23,880cb54 <__umoddi3+0x578>
 880c9e0:	1463c83a 	sub	r17,r2,r17
 880c9e4:	8809883a 	mov	r4,r17
 880c9e8:	a00b883a 	mov	r5,r20
 880c9ec:	88043d40 	call	88043d4 <__udivsi3>
 880c9f0:	8809883a 	mov	r4,r17
 880c9f4:	a00b883a 	mov	r5,r20
 880c9f8:	1021883a 	mov	r16,r2
 880c9fc:	88043dc0 	call	88043dc <__umodsi3>
 880ca00:	d8c00417 	ldw	r3,16(sp)
 880ca04:	d9000217 	ldw	r4,8(sp)
 880ca08:	1004943a 	slli	r2,r2,16
 880ca0c:	1c23383a 	mul	r17,r3,r16
 880ca10:	20ffffcc 	andi	r3,r4,65535
 880ca14:	10ceb03a 	or	r7,r2,r3
 880ca18:	3c40032e 	bgeu	r7,r17,880ca28 <__umoddi3+0x44c>
 880ca1c:	3dcf883a 	add	r7,r7,r23
 880ca20:	843fffc4 	addi	r16,r16,-1
 880ca24:	3dc0472e 	bgeu	r7,r23,880cb44 <__umoddi3+0x568>
 880ca28:	e004943a 	slli	r2,fp,16
 880ca2c:	d9400017 	ldw	r5,0(sp)
 880ca30:	3c4fc83a 	sub	r7,r7,r17
 880ca34:	8084b03a 	or	r2,r16,r2
 880ca38:	28ffffcc 	andi	r3,r5,65535
 880ca3c:	280cd43a 	srli	r6,r5,16
 880ca40:	100ad43a 	srli	r5,r2,16
 880ca44:	10bfffcc 	andi	r2,r2,65535
 880ca48:	10d1383a 	mul	r8,r2,r3
 880ca4c:	28c7383a 	mul	r3,r5,r3
 880ca50:	1185383a 	mul	r2,r2,r6
 880ca54:	4008d43a 	srli	r4,r8,16
 880ca58:	298b383a 	mul	r5,r5,r6
 880ca5c:	10c5883a 	add	r2,r2,r3
 880ca60:	2089883a 	add	r4,r4,r2
 880ca64:	20c0022e 	bgeu	r4,r3,880ca70 <__umoddi3+0x494>
 880ca68:	00800074 	movhi	r2,1
 880ca6c:	288b883a 	add	r5,r5,r2
 880ca70:	2004d43a 	srli	r2,r4,16
 880ca74:	2008943a 	slli	r4,r4,16
 880ca78:	40ffffcc 	andi	r3,r8,65535
 880ca7c:	288b883a 	add	r5,r5,r2
 880ca80:	20c9883a 	add	r4,r4,r3
 880ca84:	39400b36 	bltu	r7,r5,880cab4 <__umoddi3+0x4d8>
 880ca88:	39403d26 	beq	r7,r5,880cb80 <__umoddi3+0x5a4>
 880ca8c:	394bc83a 	sub	r5,r7,r5
 880ca90:	00000f06 	br	880cad0 <__umoddi3+0x4f4>
 880ca94:	30c5c83a 	sub	r2,r6,r3
 880ca98:	1839883a 	mov	fp,r3
 880ca9c:	b084d83a 	srl	r2,r22,r2
 880caa0:	a0c6983a 	sll	r3,r20,r3
 880caa4:	8720983a 	sll	r16,r16,fp
 880caa8:	b72c983a 	sll	r22,r22,fp
 880caac:	18a8b03a 	or	r20,r3,r2
 880cab0:	003f3a06 	br	880c79c <__umoddi3+0x1c0>
 880cab4:	d8c00017 	ldw	r3,0(sp)
 880cab8:	20c5c83a 	sub	r2,r4,r3
 880cabc:	2089803a 	cmpltu	r4,r4,r2
 880cac0:	2dc7c83a 	sub	r3,r5,r23
 880cac4:	1907c83a 	sub	r3,r3,r4
 880cac8:	38cbc83a 	sub	r5,r7,r3
 880cacc:	1009883a 	mov	r4,r2
 880cad0:	b105c83a 	sub	r2,r22,r4
 880cad4:	b087803a 	cmpltu	r3,r22,r2
 880cad8:	28c7c83a 	sub	r3,r5,r3
 880cadc:	d9400317 	ldw	r5,12(sp)
 880cae0:	1544d83a 	srl	r2,r2,r21
 880cae4:	1948983a 	sll	r4,r3,r5
 880cae8:	1d46d83a 	srl	r3,r3,r21
 880caec:	20a4b03a 	or	r18,r4,r2
 880caf0:	9011883a 	mov	r8,r18
 880caf4:	1813883a 	mov	r9,r3
 880caf8:	003ef606 	br	880c6d4 <__umoddi3+0xf8>
 880cafc:	01400604 	movi	r5,24
 880cb00:	2805883a 	mov	r2,r5
 880cb04:	003ecc06 	br	880c638 <__umoddi3+0x5c>
 880cb08:	01400204 	movi	r5,8
 880cb0c:	2805883a 	mov	r2,r5
 880cb10:	003ec906 	br	880c638 <__umoddi3+0x5c>
 880cb14:	01400204 	movi	r5,8
 880cb18:	2805883a 	mov	r2,r5
 880cb1c:	003f0106 	br	880c724 <__umoddi3+0x148>
 880cb20:	01400204 	movi	r5,8
 880cb24:	2805883a 	mov	r2,r5
 880cb28:	003f1206 	br	880c774 <__umoddi3+0x198>
 880cb2c:	01400604 	movi	r5,24
 880cb30:	2805883a 	mov	r2,r5
 880cb34:	003f0f06 	br	880c774 <__umoddi3+0x198>
 880cb38:	01400604 	movi	r5,24
 880cb3c:	2805883a 	mov	r2,r5
 880cb40:	003ef806 	br	880c724 <__umoddi3+0x148>
 880cb44:	3c7fb82e 	bgeu	r7,r17,880ca28 <__umoddi3+0x44c>
 880cb48:	843fffc4 	addi	r16,r16,-1
 880cb4c:	3dcf883a 	add	r7,r7,r23
 880cb50:	003fb506 	br	880ca28 <__umoddi3+0x44c>
 880cb54:	147fa22e 	bgeu	r2,r17,880c9e0 <__umoddi3+0x404>
 880cb58:	e73fffc4 	addi	fp,fp,-1
 880cb5c:	15c5883a 	add	r2,r2,r23
 880cb60:	003f9f06 	br	880c9e0 <__umoddi3+0x404>
 880cb64:	147f692e 	bgeu	r2,r17,880c90c <__umoddi3+0x330>
 880cb68:	1405883a 	add	r2,r2,r16
 880cb6c:	003f6706 	br	880c90c <__umoddi3+0x330>
 880cb70:	1405883a 	add	r2,r2,r16
 880cb74:	003f1906 	br	880c7dc <__umoddi3+0x200>
 880cb78:	1405883a 	add	r2,r2,r16
 880cb7c:	003ec906 	br	880c6a4 <__umoddi3+0xc8>
 880cb80:	b13fcc36 	bltu	r22,r4,880cab4 <__umoddi3+0x4d8>
 880cb84:	000b883a 	mov	r5,zero
 880cb88:	003fd106 	br	880cad0 <__umoddi3+0x4f4>

0880cb8c <__gedf2>:
 880cb8c:	deffef04 	addi	sp,sp,-68
 880cb90:	dc400f15 	stw	r17,60(sp)
 880cb94:	dc400404 	addi	r17,sp,16
 880cb98:	2005883a 	mov	r2,r4
 880cb9c:	2807883a 	mov	r3,r5
 880cba0:	dc000e15 	stw	r16,56(sp)
 880cba4:	d809883a 	mov	r4,sp
 880cba8:	880b883a 	mov	r5,r17
 880cbac:	dc000904 	addi	r16,sp,36
 880cbb0:	d8c00115 	stw	r3,4(sp)
 880cbb4:	d8800015 	stw	r2,0(sp)
 880cbb8:	d9800215 	stw	r6,8(sp)
 880cbbc:	dfc01015 	stw	ra,64(sp)
 880cbc0:	d9c00315 	stw	r7,12(sp)
 880cbc4:	8804b0c0 	call	8804b0c <__unpack_d>
 880cbc8:	d9000204 	addi	r4,sp,8
 880cbcc:	800b883a 	mov	r5,r16
 880cbd0:	8804b0c0 	call	8804b0c <__unpack_d>
 880cbd4:	d8800417 	ldw	r2,16(sp)
 880cbd8:	00c00044 	movi	r3,1
 880cbdc:	01bfffc4 	movi	r6,-1
 880cbe0:	1880062e 	bgeu	r3,r2,880cbfc <__gedf2+0x70>
 880cbe4:	d8800917 	ldw	r2,36(sp)
 880cbe8:	8809883a 	mov	r4,r17
 880cbec:	800b883a 	mov	r5,r16
 880cbf0:	1880022e 	bgeu	r3,r2,880cbfc <__gedf2+0x70>
 880cbf4:	8804c440 	call	8804c44 <__fpcmp_parts_d>
 880cbf8:	100d883a 	mov	r6,r2
 880cbfc:	3005883a 	mov	r2,r6
 880cc00:	dfc01017 	ldw	ra,64(sp)
 880cc04:	dc400f17 	ldw	r17,60(sp)
 880cc08:	dc000e17 	ldw	r16,56(sp)
 880cc0c:	dec01104 	addi	sp,sp,68
 880cc10:	f800283a 	ret

0880cc14 <__fixdfsi>:
 880cc14:	defff804 	addi	sp,sp,-32
 880cc18:	2005883a 	mov	r2,r4
 880cc1c:	2807883a 	mov	r3,r5
 880cc20:	d809883a 	mov	r4,sp
 880cc24:	d9400204 	addi	r5,sp,8
 880cc28:	d8c00115 	stw	r3,4(sp)
 880cc2c:	d8800015 	stw	r2,0(sp)
 880cc30:	dfc00715 	stw	ra,28(sp)
 880cc34:	8804b0c0 	call	8804b0c <__unpack_d>
 880cc38:	d8c00217 	ldw	r3,8(sp)
 880cc3c:	00800084 	movi	r2,2
 880cc40:	1880051e 	bne	r3,r2,880cc58 <__fixdfsi+0x44>
 880cc44:	0007883a 	mov	r3,zero
 880cc48:	1805883a 	mov	r2,r3
 880cc4c:	dfc00717 	ldw	ra,28(sp)
 880cc50:	dec00804 	addi	sp,sp,32
 880cc54:	f800283a 	ret
 880cc58:	00800044 	movi	r2,1
 880cc5c:	10fff92e 	bgeu	r2,r3,880cc44 <__fixdfsi+0x30>
 880cc60:	00800104 	movi	r2,4
 880cc64:	18800426 	beq	r3,r2,880cc78 <__fixdfsi+0x64>
 880cc68:	d8c00417 	ldw	r3,16(sp)
 880cc6c:	183ff516 	blt	r3,zero,880cc44 <__fixdfsi+0x30>
 880cc70:	00800784 	movi	r2,30
 880cc74:	10c0080e 	bge	r2,r3,880cc98 <__fixdfsi+0x84>
 880cc78:	d8800317 	ldw	r2,12(sp)
 880cc7c:	1000121e 	bne	r2,zero,880ccc8 <__fixdfsi+0xb4>
 880cc80:	00e00034 	movhi	r3,32768
 880cc84:	18ffffc4 	addi	r3,r3,-1
 880cc88:	1805883a 	mov	r2,r3
 880cc8c:	dfc00717 	ldw	ra,28(sp)
 880cc90:	dec00804 	addi	sp,sp,32
 880cc94:	f800283a 	ret
 880cc98:	00800f04 	movi	r2,60
 880cc9c:	10d1c83a 	sub	r8,r2,r3
 880cca0:	40bff804 	addi	r2,r8,-32
 880cca4:	d9800517 	ldw	r6,20(sp)
 880cca8:	d9c00617 	ldw	r7,24(sp)
 880ccac:	10000816 	blt	r2,zero,880ccd0 <__fixdfsi+0xbc>
 880ccb0:	3888d83a 	srl	r4,r7,r2
 880ccb4:	d8800317 	ldw	r2,12(sp)
 880ccb8:	2007883a 	mov	r3,r4
 880ccbc:	103fe226 	beq	r2,zero,880cc48 <__fixdfsi+0x34>
 880ccc0:	0107c83a 	sub	r3,zero,r4
 880ccc4:	003fe006 	br	880cc48 <__fixdfsi+0x34>
 880ccc8:	00e00034 	movhi	r3,32768
 880cccc:	003fde06 	br	880cc48 <__fixdfsi+0x34>
 880ccd0:	39c7883a 	add	r3,r7,r7
 880ccd4:	008007c4 	movi	r2,31
 880ccd8:	1205c83a 	sub	r2,r2,r8
 880ccdc:	1886983a 	sll	r3,r3,r2
 880cce0:	3208d83a 	srl	r4,r6,r8
 880cce4:	1908b03a 	or	r4,r3,r4
 880cce8:	003ff206 	br	880ccb4 <__fixdfsi+0xa0>

0880ccec <__floatunsidf>:
 880ccec:	defff204 	addi	sp,sp,-56
 880ccf0:	dfc00d15 	stw	ra,52(sp)
 880ccf4:	ddc00c15 	stw	r23,48(sp)
 880ccf8:	dd800b15 	stw	r22,44(sp)
 880ccfc:	dd400a15 	stw	r21,40(sp)
 880cd00:	dd000915 	stw	r20,36(sp)
 880cd04:	dcc00815 	stw	r19,32(sp)
 880cd08:	dc800715 	stw	r18,28(sp)
 880cd0c:	dc400615 	stw	r17,24(sp)
 880cd10:	dc000515 	stw	r16,20(sp)
 880cd14:	d8000115 	stw	zero,4(sp)
 880cd18:	20000f1e 	bne	r4,zero,880cd58 <__floatunsidf+0x6c>
 880cd1c:	00800084 	movi	r2,2
 880cd20:	d8800015 	stw	r2,0(sp)
 880cd24:	d809883a 	mov	r4,sp
 880cd28:	88047f80 	call	88047f8 <__pack_d>
 880cd2c:	dfc00d17 	ldw	ra,52(sp)
 880cd30:	ddc00c17 	ldw	r23,48(sp)
 880cd34:	dd800b17 	ldw	r22,44(sp)
 880cd38:	dd400a17 	ldw	r21,40(sp)
 880cd3c:	dd000917 	ldw	r20,36(sp)
 880cd40:	dcc00817 	ldw	r19,32(sp)
 880cd44:	dc800717 	ldw	r18,28(sp)
 880cd48:	dc400617 	ldw	r17,24(sp)
 880cd4c:	dc000517 	ldw	r16,20(sp)
 880cd50:	dec00e04 	addi	sp,sp,56
 880cd54:	f800283a 	ret
 880cd58:	008000c4 	movi	r2,3
 880cd5c:	00c00f04 	movi	r3,60
 880cd60:	002f883a 	mov	r23,zero
 880cd64:	202d883a 	mov	r22,r4
 880cd68:	d8800015 	stw	r2,0(sp)
 880cd6c:	d8c00215 	stw	r3,8(sp)
 880cd70:	d9000315 	stw	r4,12(sp)
 880cd74:	ddc00415 	stw	r23,16(sp)
 880cd78:	880447c0 	call	880447c <__clzsi2>
 880cd7c:	12400744 	addi	r9,r2,29
 880cd80:	48000b16 	blt	r9,zero,880cdb0 <__floatunsidf+0xc4>
 880cd84:	483fe726 	beq	r9,zero,880cd24 <__floatunsidf+0x38>
 880cd88:	10bfff44 	addi	r2,r2,-3
 880cd8c:	10002e16 	blt	r2,zero,880ce48 <__floatunsidf+0x15c>
 880cd90:	b0a2983a 	sll	r17,r22,r2
 880cd94:	0021883a 	mov	r16,zero
 880cd98:	d8800217 	ldw	r2,8(sp)
 880cd9c:	dc400415 	stw	r17,16(sp)
 880cda0:	dc000315 	stw	r16,12(sp)
 880cda4:	1245c83a 	sub	r2,r2,r9
 880cda8:	d8800215 	stw	r2,8(sp)
 880cdac:	003fdd06 	br	880cd24 <__floatunsidf+0x38>
 880cdb0:	0255c83a 	sub	r10,zero,r9
 880cdb4:	51bff804 	addi	r6,r10,-32
 880cdb8:	30001b16 	blt	r6,zero,880ce28 <__floatunsidf+0x13c>
 880cdbc:	b9a8d83a 	srl	r20,r23,r6
 880cdc0:	002b883a 	mov	r21,zero
 880cdc4:	000f883a 	mov	r7,zero
 880cdc8:	01000044 	movi	r4,1
 880cdcc:	0011883a 	mov	r8,zero
 880cdd0:	30002516 	blt	r6,zero,880ce68 <__floatunsidf+0x17c>
 880cdd4:	21a6983a 	sll	r19,r4,r6
 880cdd8:	0025883a 	mov	r18,zero
 880cddc:	00bfffc4 	movi	r2,-1
 880cde0:	9089883a 	add	r4,r18,r2
 880cde4:	988b883a 	add	r5,r19,r2
 880cde8:	248d803a 	cmpltu	r6,r4,r18
 880cdec:	314b883a 	add	r5,r6,r5
 880cdf0:	b104703a 	and	r2,r22,r4
 880cdf4:	b946703a 	and	r3,r23,r5
 880cdf8:	10c4b03a 	or	r2,r2,r3
 880cdfc:	10000226 	beq	r2,zero,880ce08 <__floatunsidf+0x11c>
 880ce00:	01c00044 	movi	r7,1
 880ce04:	0011883a 	mov	r8,zero
 880ce08:	d9000217 	ldw	r4,8(sp)
 880ce0c:	a1c4b03a 	or	r2,r20,r7
 880ce10:	aa06b03a 	or	r3,r21,r8
 880ce14:	2249c83a 	sub	r4,r4,r9
 880ce18:	d8c00415 	stw	r3,16(sp)
 880ce1c:	d9000215 	stw	r4,8(sp)
 880ce20:	d8800315 	stw	r2,12(sp)
 880ce24:	003fbf06 	br	880cd24 <__floatunsidf+0x38>
 880ce28:	bdc7883a 	add	r3,r23,r23
 880ce2c:	008007c4 	movi	r2,31
 880ce30:	1285c83a 	sub	r2,r2,r10
 880ce34:	1886983a 	sll	r3,r3,r2
 880ce38:	b2a8d83a 	srl	r20,r22,r10
 880ce3c:	baaad83a 	srl	r21,r23,r10
 880ce40:	1d28b03a 	or	r20,r3,r20
 880ce44:	003fdf06 	br	880cdc4 <__floatunsidf+0xd8>
 880ce48:	b006d07a 	srli	r3,r22,1
 880ce4c:	008007c4 	movi	r2,31
 880ce50:	1245c83a 	sub	r2,r2,r9
 880ce54:	1886d83a 	srl	r3,r3,r2
 880ce58:	ba62983a 	sll	r17,r23,r9
 880ce5c:	b260983a 	sll	r16,r22,r9
 880ce60:	1c62b03a 	or	r17,r3,r17
 880ce64:	003fcc06 	br	880cd98 <__floatunsidf+0xac>
 880ce68:	2006d07a 	srli	r3,r4,1
 880ce6c:	008007c4 	movi	r2,31
 880ce70:	1285c83a 	sub	r2,r2,r10
 880ce74:	18a6d83a 	srl	r19,r3,r2
 880ce78:	22a4983a 	sll	r18,r4,r10
 880ce7c:	003fd706 	br	880cddc <__floatunsidf+0xf0>

0880ce80 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 880ce80:	defff804 	addi	sp,sp,-32
 880ce84:	dfc00715 	stw	ra,28(sp)
 880ce88:	df000615 	stw	fp,24(sp)
 880ce8c:	df000604 	addi	fp,sp,24
 880ce90:	e13ffc15 	stw	r4,-16(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 880ce94:	e0bffc17 	ldw	r2,-16(fp)
 880ce98:	1004803a 	cmplt	r2,r2,zero
 880ce9c:	1000081e 	bne	r2,zero,880cec0 <close+0x40>
 880cea0:	e0bffc17 	ldw	r2,-16(fp)
 880cea4:	10800324 	muli	r2,r2,12
 880cea8:	1007883a 	mov	r3,r2
 880ceac:	00822074 	movhi	r2,2177
 880ceb0:	10898504 	addi	r2,r2,9748
 880ceb4:	1887883a 	add	r3,r3,r2
 880ceb8:	e0ffff15 	stw	r3,-4(fp)
 880cebc:	00000106 	br	880cec4 <close+0x44>
 880cec0:	e03fff15 	stw	zero,-4(fp)
 880cec4:	e0bfff17 	ldw	r2,-4(fp)
 880cec8:	e0bffb15 	stw	r2,-20(fp)

  if (fd)
 880cecc:	e0bffb17 	ldw	r2,-20(fp)
 880ced0:	1005003a 	cmpeq	r2,r2,zero
 880ced4:	10001d1e 	bne	r2,zero,880cf4c <close+0xcc>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 880ced8:	e0bffb17 	ldw	r2,-20(fp)
 880cedc:	10800017 	ldw	r2,0(r2)
 880cee0:	10800417 	ldw	r2,16(r2)
 880cee4:	1005003a 	cmpeq	r2,r2,zero
 880cee8:	1000071e 	bne	r2,zero,880cf08 <close+0x88>
 880ceec:	e0bffb17 	ldw	r2,-20(fp)
 880cef0:	10800017 	ldw	r2,0(r2)
 880cef4:	10800417 	ldw	r2,16(r2)
 880cef8:	e13ffb17 	ldw	r4,-20(fp)
 880cefc:	103ee83a 	callr	r2
 880cf00:	e0bffe15 	stw	r2,-8(fp)
 880cf04:	00000106 	br	880cf0c <close+0x8c>
 880cf08:	e03ffe15 	stw	zero,-8(fp)
 880cf0c:	e0bffe17 	ldw	r2,-8(fp)
 880cf10:	e0bffa15 	stw	r2,-24(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 880cf14:	e13ffc17 	ldw	r4,-16(fp)
 880cf18:	880d6c40 	call	880d6c4 <alt_release_fd>
    if (rval < 0)
 880cf1c:	e0bffa17 	ldw	r2,-24(fp)
 880cf20:	1004403a 	cmpge	r2,r2,zero
 880cf24:	1000071e 	bne	r2,zero,880cf44 <close+0xc4>
    {
      ALT_ERRNO = -rval;
 880cf28:	880cf7c0 	call	880cf7c <alt_get_errno>
 880cf2c:	e0fffa17 	ldw	r3,-24(fp)
 880cf30:	00c7c83a 	sub	r3,zero,r3
 880cf34:	10c00015 	stw	r3,0(r2)
      return -1;
 880cf38:	00bfffc4 	movi	r2,-1
 880cf3c:	e0bffd15 	stw	r2,-12(fp)
 880cf40:	00000806 	br	880cf64 <close+0xe4>
    }
    return 0;
 880cf44:	e03ffd15 	stw	zero,-12(fp)
 880cf48:	00000606 	br	880cf64 <close+0xe4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 880cf4c:	880cf7c0 	call	880cf7c <alt_get_errno>
 880cf50:	1007883a 	mov	r3,r2
 880cf54:	00801444 	movi	r2,81
 880cf58:	18800015 	stw	r2,0(r3)
    return -1;
 880cf5c:	00bfffc4 	movi	r2,-1
 880cf60:	e0bffd15 	stw	r2,-12(fp)
 880cf64:	e0bffd17 	ldw	r2,-12(fp)
  }
}
 880cf68:	e037883a 	mov	sp,fp
 880cf6c:	dfc00117 	ldw	ra,4(sp)
 880cf70:	df000017 	ldw	fp,0(sp)
 880cf74:	dec00204 	addi	sp,sp,8
 880cf78:	f800283a 	ret

0880cf7c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 880cf7c:	defffd04 	addi	sp,sp,-12
 880cf80:	dfc00215 	stw	ra,8(sp)
 880cf84:	df000115 	stw	fp,4(sp)
 880cf88:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 880cf8c:	00822074 	movhi	r2,2177
 880cf90:	108e5d04 	addi	r2,r2,14708
 880cf94:	10800017 	ldw	r2,0(r2)
 880cf98:	1005003a 	cmpeq	r2,r2,zero
 880cf9c:	1000061e 	bne	r2,zero,880cfb8 <alt_get_errno+0x3c>
 880cfa0:	00822074 	movhi	r2,2177
 880cfa4:	108e5d04 	addi	r2,r2,14708
 880cfa8:	10800017 	ldw	r2,0(r2)
 880cfac:	103ee83a 	callr	r2
 880cfb0:	e0bfff15 	stw	r2,-4(fp)
 880cfb4:	00000306 	br	880cfc4 <alt_get_errno+0x48>
 880cfb8:	00822074 	movhi	r2,2177
 880cfbc:	10956404 	addi	r2,r2,21904
 880cfc0:	e0bfff15 	stw	r2,-4(fp)
 880cfc4:	e0bfff17 	ldw	r2,-4(fp)
}
 880cfc8:	e037883a 	mov	sp,fp
 880cfcc:	dfc00117 	ldw	ra,4(sp)
 880cfd0:	df000017 	ldw	fp,0(sp)
 880cfd4:	dec00204 	addi	sp,sp,8
 880cfd8:	f800283a 	ret

0880cfdc <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 880cfdc:	defffc04 	addi	sp,sp,-16
 880cfe0:	df000315 	stw	fp,12(sp)
 880cfe4:	df000304 	addi	fp,sp,12
 880cfe8:	e13ffd15 	stw	r4,-12(fp)
 880cfec:	e17ffe15 	stw	r5,-8(fp)
 880cff0:	e1bfff15 	stw	r6,-4(fp)
  return len;
 880cff4:	e0bfff17 	ldw	r2,-4(fp)
}
 880cff8:	e037883a 	mov	sp,fp
 880cffc:	df000017 	ldw	fp,0(sp)
 880d000:	dec00104 	addi	sp,sp,4
 880d004:	f800283a 	ret

0880d008 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
 880d008:	defff904 	addi	sp,sp,-28
 880d00c:	dfc00615 	stw	ra,24(sp)
 880d010:	df000515 	stw	fp,20(sp)
 880d014:	df000504 	addi	fp,sp,20
 880d018:	e13ffc15 	stw	r4,-16(fp)
 880d01c:	e17ffd15 	stw	r5,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 880d020:	e0bffc17 	ldw	r2,-16(fp)
 880d024:	1004803a 	cmplt	r2,r2,zero
 880d028:	1000081e 	bne	r2,zero,880d04c <fstat+0x44>
 880d02c:	e0bffc17 	ldw	r2,-16(fp)
 880d030:	10800324 	muli	r2,r2,12
 880d034:	1007883a 	mov	r3,r2
 880d038:	00822074 	movhi	r2,2177
 880d03c:	10898504 	addi	r2,r2,9748
 880d040:	1887883a 	add	r3,r3,r2
 880d044:	e0ffff15 	stw	r3,-4(fp)
 880d048:	00000106 	br	880d050 <fstat+0x48>
 880d04c:	e03fff15 	stw	zero,-4(fp)
 880d050:	e0bfff17 	ldw	r2,-4(fp)
 880d054:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 880d058:	e0bffb17 	ldw	r2,-20(fp)
 880d05c:	1005003a 	cmpeq	r2,r2,zero
 880d060:	1000121e 	bne	r2,zero,880d0ac <fstat+0xa4>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
 880d064:	e0bffb17 	ldw	r2,-20(fp)
 880d068:	10800017 	ldw	r2,0(r2)
 880d06c:	10800817 	ldw	r2,32(r2)
 880d070:	1005003a 	cmpeq	r2,r2,zero
 880d074:	1000081e 	bne	r2,zero,880d098 <fstat+0x90>
    {
      return fd->dev->fstat(fd, st);
 880d078:	e0bffb17 	ldw	r2,-20(fp)
 880d07c:	10800017 	ldw	r2,0(r2)
 880d080:	10800817 	ldw	r2,32(r2)
 880d084:	e13ffb17 	ldw	r4,-20(fp)
 880d088:	e17ffd17 	ldw	r5,-12(fp)
 880d08c:	103ee83a 	callr	r2
 880d090:	e0bffe15 	stw	r2,-8(fp)
 880d094:	00000b06 	br	880d0c4 <fstat+0xbc>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
 880d098:	e0fffd17 	ldw	r3,-12(fp)
 880d09c:	00880004 	movi	r2,8192
 880d0a0:	18800115 	stw	r2,4(r3)
      return 0;
 880d0a4:	e03ffe15 	stw	zero,-8(fp)
 880d0a8:	00000606 	br	880d0c4 <fstat+0xbc>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 880d0ac:	880d0dc0 	call	880d0dc <alt_get_errno>
 880d0b0:	1007883a 	mov	r3,r2
 880d0b4:	00801444 	movi	r2,81
 880d0b8:	18800015 	stw	r2,0(r3)
    return -1;
 880d0bc:	00bfffc4 	movi	r2,-1
 880d0c0:	e0bffe15 	stw	r2,-8(fp)
 880d0c4:	e0bffe17 	ldw	r2,-8(fp)
  }
}
 880d0c8:	e037883a 	mov	sp,fp
 880d0cc:	dfc00117 	ldw	ra,4(sp)
 880d0d0:	df000017 	ldw	fp,0(sp)
 880d0d4:	dec00204 	addi	sp,sp,8
 880d0d8:	f800283a 	ret

0880d0dc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 880d0dc:	defffd04 	addi	sp,sp,-12
 880d0e0:	dfc00215 	stw	ra,8(sp)
 880d0e4:	df000115 	stw	fp,4(sp)
 880d0e8:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 880d0ec:	00822074 	movhi	r2,2177
 880d0f0:	108e5d04 	addi	r2,r2,14708
 880d0f4:	10800017 	ldw	r2,0(r2)
 880d0f8:	1005003a 	cmpeq	r2,r2,zero
 880d0fc:	1000061e 	bne	r2,zero,880d118 <alt_get_errno+0x3c>
 880d100:	00822074 	movhi	r2,2177
 880d104:	108e5d04 	addi	r2,r2,14708
 880d108:	10800017 	ldw	r2,0(r2)
 880d10c:	103ee83a 	callr	r2
 880d110:	e0bfff15 	stw	r2,-4(fp)
 880d114:	00000306 	br	880d124 <alt_get_errno+0x48>
 880d118:	00822074 	movhi	r2,2177
 880d11c:	10956404 	addi	r2,r2,21904
 880d120:	e0bfff15 	stw	r2,-4(fp)
 880d124:	e0bfff17 	ldw	r2,-4(fp)
}
 880d128:	e037883a 	mov	sp,fp
 880d12c:	dfc00117 	ldw	ra,4(sp)
 880d130:	df000017 	ldw	fp,0(sp)
 880d134:	dec00204 	addi	sp,sp,8
 880d138:	f800283a 	ret

0880d13c <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
 880d13c:	deffeb04 	addi	sp,sp,-84
 880d140:	dfc01415 	stw	ra,80(sp)
 880d144:	df001315 	stw	fp,76(sp)
 880d148:	df001304 	addi	fp,sp,76
 880d14c:	e13ffd15 	stw	r4,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 880d150:	e0bffd17 	ldw	r2,-12(fp)
 880d154:	1004803a 	cmplt	r2,r2,zero
 880d158:	1000081e 	bne	r2,zero,880d17c <isatty+0x40>
 880d15c:	e0bffd17 	ldw	r2,-12(fp)
 880d160:	10800324 	muli	r2,r2,12
 880d164:	1007883a 	mov	r3,r2
 880d168:	00822074 	movhi	r2,2177
 880d16c:	10898504 	addi	r2,r2,9748
 880d170:	1887883a 	add	r3,r3,r2
 880d174:	e0ffff15 	stw	r3,-4(fp)
 880d178:	00000106 	br	880d180 <isatty+0x44>
 880d17c:	e03fff15 	stw	zero,-4(fp)
 880d180:	e0bfff17 	ldw	r2,-4(fp)
 880d184:	e0bfed15 	stw	r2,-76(fp)
  
  if (fd)
 880d188:	e0bfed17 	ldw	r2,-76(fp)
 880d18c:	1005003a 	cmpeq	r2,r2,zero
 880d190:	10000f1e 	bne	r2,zero,880d1d0 <isatty+0x94>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
 880d194:	e0bfed17 	ldw	r2,-76(fp)
 880d198:	10800017 	ldw	r2,0(r2)
 880d19c:	10800817 	ldw	r2,32(r2)
 880d1a0:	1004c03a 	cmpne	r2,r2,zero
 880d1a4:	1000031e 	bne	r2,zero,880d1b4 <isatty+0x78>
    {
      return 1;
 880d1a8:	00800044 	movi	r2,1
 880d1ac:	e0bffe15 	stw	r2,-8(fp)
 880d1b0:	00000c06 	br	880d1e4 <isatty+0xa8>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
 880d1b4:	e17fee04 	addi	r5,fp,-72
 880d1b8:	e13ffd17 	ldw	r4,-12(fp)
 880d1bc:	880d0080 	call	880d008 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
 880d1c0:	e0bfef17 	ldw	r2,-68(fp)
 880d1c4:	10880020 	cmpeqi	r2,r2,8192
 880d1c8:	e0bffe15 	stw	r2,-8(fp)
 880d1cc:	00000506 	br	880d1e4 <isatty+0xa8>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 880d1d0:	880d1fc0 	call	880d1fc <alt_get_errno>
 880d1d4:	1007883a 	mov	r3,r2
 880d1d8:	00801444 	movi	r2,81
 880d1dc:	18800015 	stw	r2,0(r3)
    return 0;
 880d1e0:	e03ffe15 	stw	zero,-8(fp)
 880d1e4:	e0bffe17 	ldw	r2,-8(fp)
  }
}
 880d1e8:	e037883a 	mov	sp,fp
 880d1ec:	dfc00117 	ldw	ra,4(sp)
 880d1f0:	df000017 	ldw	fp,0(sp)
 880d1f4:	dec00204 	addi	sp,sp,8
 880d1f8:	f800283a 	ret

0880d1fc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 880d1fc:	defffd04 	addi	sp,sp,-12
 880d200:	dfc00215 	stw	ra,8(sp)
 880d204:	df000115 	stw	fp,4(sp)
 880d208:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 880d20c:	00822074 	movhi	r2,2177
 880d210:	108e5d04 	addi	r2,r2,14708
 880d214:	10800017 	ldw	r2,0(r2)
 880d218:	1005003a 	cmpeq	r2,r2,zero
 880d21c:	1000061e 	bne	r2,zero,880d238 <alt_get_errno+0x3c>
 880d220:	00822074 	movhi	r2,2177
 880d224:	108e5d04 	addi	r2,r2,14708
 880d228:	10800017 	ldw	r2,0(r2)
 880d22c:	103ee83a 	callr	r2
 880d230:	e0bfff15 	stw	r2,-4(fp)
 880d234:	00000306 	br	880d244 <alt_get_errno+0x48>
 880d238:	00822074 	movhi	r2,2177
 880d23c:	10956404 	addi	r2,r2,21904
 880d240:	e0bfff15 	stw	r2,-4(fp)
 880d244:	e0bfff17 	ldw	r2,-4(fp)
}
 880d248:	e037883a 	mov	sp,fp
 880d24c:	dfc00117 	ldw	ra,4(sp)
 880d250:	df000017 	ldw	fp,0(sp)
 880d254:	dec00204 	addi	sp,sp,8
 880d258:	f800283a 	ret

0880d25c <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 880d25c:	defffe04 	addi	sp,sp,-8
 880d260:	dfc00115 	stw	ra,4(sp)
 880d264:	df000015 	stw	fp,0(sp)
 880d268:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
 880d26c:	01022074 	movhi	r4,2177
 880d270:	210e6604 	addi	r4,r4,14744
 880d274:	01422074 	movhi	r5,2177
 880d278:	29477604 	addi	r5,r5,7640
 880d27c:	01822074 	movhi	r6,2177
 880d280:	318e6604 	addi	r6,r6,14744
 880d284:	880d2dc0 	call	880d2dc <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
 880d288:	01022034 	movhi	r4,2176
 880d28c:	21000804 	addi	r4,r4,32
 880d290:	01422034 	movhi	r5,2176
 880d294:	29400804 	addi	r5,r5,32
 880d298:	01822034 	movhi	r6,2176
 880d29c:	31806d04 	addi	r6,r6,436
 880d2a0:	880d2dc0 	call	880d2dc <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
 880d2a4:	01022074 	movhi	r4,2177
 880d2a8:	21060c04 	addi	r4,r4,6192
 880d2ac:	01422074 	movhi	r5,2177
 880d2b0:	29460c04 	addi	r5,r5,6192
 880d2b4:	01822074 	movhi	r6,2177
 880d2b8:	31877604 	addi	r6,r6,7640
 880d2bc:	880d2dc0 	call	880d2dc <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 880d2c0:	88105dc0 	call	88105dc <alt_dcache_flush_all>
  alt_icache_flush_all();
 880d2c4:	88108900 	call	8810890 <alt_icache_flush_all>
}
 880d2c8:	e037883a 	mov	sp,fp
 880d2cc:	dfc00117 	ldw	ra,4(sp)
 880d2d0:	df000017 	ldw	fp,0(sp)
 880d2d4:	dec00204 	addi	sp,sp,8
 880d2d8:	f800283a 	ret

0880d2dc <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
 880d2dc:	defffc04 	addi	sp,sp,-16
 880d2e0:	df000315 	stw	fp,12(sp)
 880d2e4:	df000304 	addi	fp,sp,12
 880d2e8:	e13ffd15 	stw	r4,-12(fp)
 880d2ec:	e17ffe15 	stw	r5,-8(fp)
 880d2f0:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
 880d2f4:	e0fffe17 	ldw	r3,-8(fp)
 880d2f8:	e0bffd17 	ldw	r2,-12(fp)
 880d2fc:	18800e26 	beq	r3,r2,880d338 <alt_load_section+0x5c>
  {
    while( to != end )
 880d300:	00000a06 	br	880d32c <alt_load_section+0x50>
    {
      *to++ = *from++;
 880d304:	e0bffd17 	ldw	r2,-12(fp)
 880d308:	10c00017 	ldw	r3,0(r2)
 880d30c:	e0bffe17 	ldw	r2,-8(fp)
 880d310:	10c00015 	stw	r3,0(r2)
 880d314:	e0bffe17 	ldw	r2,-8(fp)
 880d318:	10800104 	addi	r2,r2,4
 880d31c:	e0bffe15 	stw	r2,-8(fp)
 880d320:	e0bffd17 	ldw	r2,-12(fp)
 880d324:	10800104 	addi	r2,r2,4
 880d328:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
 880d32c:	e0fffe17 	ldw	r3,-8(fp)
 880d330:	e0bfff17 	ldw	r2,-4(fp)
 880d334:	18bff31e 	bne	r3,r2,880d304 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
 880d338:	e037883a 	mov	sp,fp
 880d33c:	df000017 	ldw	fp,0(sp)
 880d340:	dec00104 	addi	sp,sp,4
 880d344:	f800283a 	ret

0880d348 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
 880d348:	defff804 	addi	sp,sp,-32
 880d34c:	dfc00715 	stw	ra,28(sp)
 880d350:	df000615 	stw	fp,24(sp)
 880d354:	df000604 	addi	fp,sp,24
 880d358:	e13ffc15 	stw	r4,-16(fp)
 880d35c:	e17ffd15 	stw	r5,-12(fp)
 880d360:	e1bffe15 	stw	r6,-8(fp)
  alt_fd* fd;
  off_t   rc = 0; 
 880d364:	e03ffa15 	stw	zero,-24(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 880d368:	e0bffc17 	ldw	r2,-16(fp)
 880d36c:	1004803a 	cmplt	r2,r2,zero
 880d370:	1000081e 	bne	r2,zero,880d394 <lseek+0x4c>
 880d374:	e0bffc17 	ldw	r2,-16(fp)
 880d378:	10800324 	muli	r2,r2,12
 880d37c:	1007883a 	mov	r3,r2
 880d380:	00822074 	movhi	r2,2177
 880d384:	10898504 	addi	r2,r2,9748
 880d388:	1887883a 	add	r3,r3,r2
 880d38c:	e0ffff15 	stw	r3,-4(fp)
 880d390:	00000106 	br	880d398 <lseek+0x50>
 880d394:	e03fff15 	stw	zero,-4(fp)
 880d398:	e0bfff17 	ldw	r2,-4(fp)
 880d39c:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd) 
 880d3a0:	e0bffb17 	ldw	r2,-20(fp)
 880d3a4:	1005003a 	cmpeq	r2,r2,zero
 880d3a8:	1000111e 	bne	r2,zero,880d3f0 <lseek+0xa8>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
 880d3ac:	e0bffb17 	ldw	r2,-20(fp)
 880d3b0:	10800017 	ldw	r2,0(r2)
 880d3b4:	10800717 	ldw	r2,28(r2)
 880d3b8:	1005003a 	cmpeq	r2,r2,zero
 880d3bc:	1000091e 	bne	r2,zero,880d3e4 <lseek+0x9c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
 880d3c0:	e0bffb17 	ldw	r2,-20(fp)
 880d3c4:	10800017 	ldw	r2,0(r2)
 880d3c8:	10800717 	ldw	r2,28(r2)
 880d3cc:	e13ffb17 	ldw	r4,-20(fp)
 880d3d0:	e17ffd17 	ldw	r5,-12(fp)
 880d3d4:	e1bffe17 	ldw	r6,-8(fp)
 880d3d8:	103ee83a 	callr	r2
 880d3dc:	e0bffa15 	stw	r2,-24(fp)
 880d3e0:	00000506 	br	880d3f8 <lseek+0xb0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
 880d3e4:	00bfde84 	movi	r2,-134
 880d3e8:	e0bffa15 	stw	r2,-24(fp)
 880d3ec:	00000206 	br	880d3f8 <lseek+0xb0>
    }
  }
  else  
  {
    rc = -EBADFD;
 880d3f0:	00bfebc4 	movi	r2,-81
 880d3f4:	e0bffa15 	stw	r2,-24(fp)
  }

  if (rc < 0)
 880d3f8:	e0bffa17 	ldw	r2,-24(fp)
 880d3fc:	1004403a 	cmpge	r2,r2,zero
 880d400:	1000071e 	bne	r2,zero,880d420 <lseek+0xd8>
  {
    ALT_ERRNO = -rc;
 880d404:	880d4380 	call	880d438 <alt_get_errno>
 880d408:	1007883a 	mov	r3,r2
 880d40c:	e0bffa17 	ldw	r2,-24(fp)
 880d410:	0085c83a 	sub	r2,zero,r2
 880d414:	18800015 	stw	r2,0(r3)
    rc = -1;
 880d418:	00bfffc4 	movi	r2,-1
 880d41c:	e0bffa15 	stw	r2,-24(fp)
  }

  return rc;
 880d420:	e0bffa17 	ldw	r2,-24(fp)
}
 880d424:	e037883a 	mov	sp,fp
 880d428:	dfc00117 	ldw	ra,4(sp)
 880d42c:	df000017 	ldw	fp,0(sp)
 880d430:	dec00204 	addi	sp,sp,8
 880d434:	f800283a 	ret

0880d438 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 880d438:	defffd04 	addi	sp,sp,-12
 880d43c:	dfc00215 	stw	ra,8(sp)
 880d440:	df000115 	stw	fp,4(sp)
 880d444:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 880d448:	00822074 	movhi	r2,2177
 880d44c:	108e5d04 	addi	r2,r2,14708
 880d450:	10800017 	ldw	r2,0(r2)
 880d454:	1005003a 	cmpeq	r2,r2,zero
 880d458:	1000061e 	bne	r2,zero,880d474 <alt_get_errno+0x3c>
 880d45c:	00822074 	movhi	r2,2177
 880d460:	108e5d04 	addi	r2,r2,14708
 880d464:	10800017 	ldw	r2,0(r2)
 880d468:	103ee83a 	callr	r2
 880d46c:	e0bfff15 	stw	r2,-4(fp)
 880d470:	00000306 	br	880d480 <alt_get_errno+0x48>
 880d474:	00822074 	movhi	r2,2177
 880d478:	10956404 	addi	r2,r2,21904
 880d47c:	e0bfff15 	stw	r2,-4(fp)
 880d480:	e0bfff17 	ldw	r2,-4(fp)
}
 880d484:	e037883a 	mov	sp,fp
 880d488:	dfc00117 	ldw	ra,4(sp)
 880d48c:	df000017 	ldw	fp,0(sp)
 880d490:	dec00204 	addi	sp,sp,8
 880d494:	f800283a 	ret

0880d498 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 880d498:	defffd04 	addi	sp,sp,-12
 880d49c:	dfc00215 	stw	ra,8(sp)
 880d4a0:	df000115 	stw	fp,4(sp)
 880d4a4:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 880d4a8:	0009883a 	mov	r4,zero
 880d4ac:	880d9600 	call	880d960 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 880d4b0:	880d9940 	call	880d994 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 880d4b4:	01022074 	movhi	r4,2177
 880d4b8:	21072404 	addi	r4,r4,7312
 880d4bc:	01422074 	movhi	r5,2177
 880d4c0:	29472404 	addi	r5,r5,7312
 880d4c4:	01822074 	movhi	r6,2177
 880d4c8:	31872404 	addi	r6,r6,7312
 880d4cc:	8810c500 	call	8810c50 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
 880d4d0:	88107340 	call	8810734 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
 880d4d4:	01022074 	movhi	r4,2177
 880d4d8:	2101e604 	addi	r4,r4,1944
 880d4dc:	88113b80 	call	88113b8 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 880d4e0:	d1271717 	ldw	r4,-25508(gp)
 880d4e4:	d1671817 	ldw	r5,-25504(gp)
 880d4e8:	d1a71917 	ldw	r6,-25500(gp)
 880d4ec:	88002000 	call	8800200 <main>
 880d4f0:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
 880d4f4:	01000044 	movi	r4,1
 880d4f8:	880ce800 	call	880ce80 <close>
  exit (result);
 880d4fc:	e13fff17 	ldw	r4,-4(fp)
 880d500:	88113cc0 	call	88113cc <exit>

0880d504 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
 880d504:	defffe04 	addi	sp,sp,-8
 880d508:	df000115 	stw	fp,4(sp)
 880d50c:	df000104 	addi	fp,sp,4
 880d510:	e13fff15 	stw	r4,-4(fp)
}
 880d514:	e037883a 	mov	sp,fp
 880d518:	df000017 	ldw	fp,0(sp)
 880d51c:	dec00104 	addi	sp,sp,4
 880d520:	f800283a 	ret

0880d524 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
 880d524:	defffe04 	addi	sp,sp,-8
 880d528:	df000115 	stw	fp,4(sp)
 880d52c:	df000104 	addi	fp,sp,4
 880d530:	e13fff15 	stw	r4,-4(fp)
}
 880d534:	e037883a 	mov	sp,fp
 880d538:	df000017 	ldw	fp,0(sp)
 880d53c:	dec00104 	addi	sp,sp,4
 880d540:	f800283a 	ret

0880d544 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
 880d544:	defff704 	addi	sp,sp,-36
 880d548:	dfc00815 	stw	ra,32(sp)
 880d54c:	df000715 	stw	fp,28(sp)
 880d550:	df000704 	addi	fp,sp,28
 880d554:	e13ffb15 	stw	r4,-20(fp)
 880d558:	e17ffc15 	stw	r5,-16(fp)
 880d55c:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 880d560:	e0bffb17 	ldw	r2,-20(fp)
 880d564:	1004803a 	cmplt	r2,r2,zero
 880d568:	1000081e 	bne	r2,zero,880d58c <read+0x48>
 880d56c:	e0bffb17 	ldw	r2,-20(fp)
 880d570:	10800324 	muli	r2,r2,12
 880d574:	1007883a 	mov	r3,r2
 880d578:	00822074 	movhi	r2,2177
 880d57c:	10898504 	addi	r2,r2,9748
 880d580:	1887883a 	add	r3,r3,r2
 880d584:	e0ffff15 	stw	r3,-4(fp)
 880d588:	00000106 	br	880d590 <read+0x4c>
 880d58c:	e03fff15 	stw	zero,-4(fp)
 880d590:	e0bfff17 	ldw	r2,-4(fp)
 880d594:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
 880d598:	e0bffa17 	ldw	r2,-24(fp)
 880d59c:	1005003a 	cmpeq	r2,r2,zero
 880d5a0:	1000241e 	bne	r2,zero,880d634 <read+0xf0>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 880d5a4:	e0bffa17 	ldw	r2,-24(fp)
 880d5a8:	10800217 	ldw	r2,8(r2)
 880d5ac:	108000cc 	andi	r2,r2,3
 880d5b0:	10800060 	cmpeqi	r2,r2,1
 880d5b4:	10001a1e 	bne	r2,zero,880d620 <read+0xdc>
 880d5b8:	e0bffa17 	ldw	r2,-24(fp)
 880d5bc:	10800017 	ldw	r2,0(r2)
 880d5c0:	10800517 	ldw	r2,20(r2)
 880d5c4:	1005003a 	cmpeq	r2,r2,zero
 880d5c8:	1000151e 	bne	r2,zero,880d620 <read+0xdc>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
 880d5cc:	e0bffa17 	ldw	r2,-24(fp)
 880d5d0:	10800017 	ldw	r2,0(r2)
 880d5d4:	10800517 	ldw	r2,20(r2)
 880d5d8:	e17ffc17 	ldw	r5,-16(fp)
 880d5dc:	e1bffd17 	ldw	r6,-12(fp)
 880d5e0:	e13ffa17 	ldw	r4,-24(fp)
 880d5e4:	103ee83a 	callr	r2
 880d5e8:	e0bff915 	stw	r2,-28(fp)
 880d5ec:	e0bff917 	ldw	r2,-28(fp)
 880d5f0:	1004403a 	cmpge	r2,r2,zero
 880d5f4:	1000071e 	bne	r2,zero,880d614 <read+0xd0>
        {
          ALT_ERRNO = -rval;
 880d5f8:	880d6640 	call	880d664 <alt_get_errno>
 880d5fc:	e0fff917 	ldw	r3,-28(fp)
 880d600:	00c7c83a 	sub	r3,zero,r3
 880d604:	10c00015 	stw	r3,0(r2)
          return -1;
 880d608:	00bfffc4 	movi	r2,-1
 880d60c:	e0bffe15 	stw	r2,-8(fp)
 880d610:	00000e06 	br	880d64c <read+0x108>
        }
        return rval;
 880d614:	e0bff917 	ldw	r2,-28(fp)
 880d618:	e0bffe15 	stw	r2,-8(fp)
 880d61c:	00000b06 	br	880d64c <read+0x108>
      }
      else
      {
        ALT_ERRNO = EACCES;
 880d620:	880d6640 	call	880d664 <alt_get_errno>
 880d624:	1007883a 	mov	r3,r2
 880d628:	00800344 	movi	r2,13
 880d62c:	18800015 	stw	r2,0(r3)
 880d630:	00000406 	br	880d644 <read+0x100>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
 880d634:	880d6640 	call	880d664 <alt_get_errno>
 880d638:	1007883a 	mov	r3,r2
 880d63c:	00801444 	movi	r2,81
 880d640:	18800015 	stw	r2,0(r3)
  }
  return -1;
 880d644:	00bfffc4 	movi	r2,-1
 880d648:	e0bffe15 	stw	r2,-8(fp)
 880d64c:	e0bffe17 	ldw	r2,-8(fp)
}
 880d650:	e037883a 	mov	sp,fp
 880d654:	dfc00117 	ldw	ra,4(sp)
 880d658:	df000017 	ldw	fp,0(sp)
 880d65c:	dec00204 	addi	sp,sp,8
 880d660:	f800283a 	ret

0880d664 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 880d664:	defffd04 	addi	sp,sp,-12
 880d668:	dfc00215 	stw	ra,8(sp)
 880d66c:	df000115 	stw	fp,4(sp)
 880d670:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 880d674:	00822074 	movhi	r2,2177
 880d678:	108e5d04 	addi	r2,r2,14708
 880d67c:	10800017 	ldw	r2,0(r2)
 880d680:	1005003a 	cmpeq	r2,r2,zero
 880d684:	1000061e 	bne	r2,zero,880d6a0 <alt_get_errno+0x3c>
 880d688:	00822074 	movhi	r2,2177
 880d68c:	108e5d04 	addi	r2,r2,14708
 880d690:	10800017 	ldw	r2,0(r2)
 880d694:	103ee83a 	callr	r2
 880d698:	e0bfff15 	stw	r2,-4(fp)
 880d69c:	00000306 	br	880d6ac <alt_get_errno+0x48>
 880d6a0:	00822074 	movhi	r2,2177
 880d6a4:	10956404 	addi	r2,r2,21904
 880d6a8:	e0bfff15 	stw	r2,-4(fp)
 880d6ac:	e0bfff17 	ldw	r2,-4(fp)
}
 880d6b0:	e037883a 	mov	sp,fp
 880d6b4:	dfc00117 	ldw	ra,4(sp)
 880d6b8:	df000017 	ldw	fp,0(sp)
 880d6bc:	dec00204 	addi	sp,sp,8
 880d6c0:	f800283a 	ret

0880d6c4 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 880d6c4:	defffe04 	addi	sp,sp,-8
 880d6c8:	df000115 	stw	fp,4(sp)
 880d6cc:	df000104 	addi	fp,sp,4
 880d6d0:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
 880d6d4:	e0bfff17 	ldw	r2,-4(fp)
 880d6d8:	108000d0 	cmplti	r2,r2,3
 880d6dc:	10000d1e 	bne	r2,zero,880d714 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
 880d6e0:	e0bfff17 	ldw	r2,-4(fp)
 880d6e4:	00c22074 	movhi	r3,2177
 880d6e8:	18c98504 	addi	r3,r3,9748
 880d6ec:	10800324 	muli	r2,r2,12
 880d6f0:	10c5883a 	add	r2,r2,r3
 880d6f4:	10800204 	addi	r2,r2,8
 880d6f8:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
 880d6fc:	e0bfff17 	ldw	r2,-4(fp)
 880d700:	00c22074 	movhi	r3,2177
 880d704:	18c98504 	addi	r3,r3,9748
 880d708:	10800324 	muli	r2,r2,12
 880d70c:	10c5883a 	add	r2,r2,r3
 880d710:	10000015 	stw	zero,0(r2)
  }
}
 880d714:	e037883a 	mov	sp,fp
 880d718:	df000017 	ldw	fp,0(sp)
 880d71c:	dec00104 	addi	sp,sp,4
 880d720:	f800283a 	ret

0880d724 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
 880d724:	defff804 	addi	sp,sp,-32
 880d728:	df000715 	stw	fp,28(sp)
 880d72c:	df000704 	addi	fp,sp,28
 880d730:	e13ffe15 	stw	r4,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 880d734:	0005303a 	rdctl	r2,status
 880d738:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 880d73c:	e0fffb17 	ldw	r3,-20(fp)
 880d740:	00bfff84 	movi	r2,-2
 880d744:	1884703a 	and	r2,r3,r2
 880d748:	1001703a 	wrctl	status,r2
  
  return context;
 880d74c:	e0bffb17 	ldw	r2,-20(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
 880d750:	e0bffd15 	stw	r2,-12(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
 880d754:	d0a01017 	ldw	r2,-32704(gp)
 880d758:	10c000c4 	addi	r3,r2,3
 880d75c:	00bfff04 	movi	r2,-4
 880d760:	1884703a 	and	r2,r3,r2
 880d764:	d0a01015 	stw	r2,-32704(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
 880d768:	d0e01017 	ldw	r3,-32704(gp)
 880d76c:	e0bffe17 	ldw	r2,-8(fp)
 880d770:	1887883a 	add	r3,r3,r2
 880d774:	00840034 	movhi	r2,4096
 880d778:	10800004 	addi	r2,r2,0
 880d77c:	10c0072e 	bgeu	r2,r3,880d79c <sbrk+0x78>
 880d780:	e0bffd17 	ldw	r2,-12(fp)
 880d784:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 880d788:	e0bffa17 	ldw	r2,-24(fp)
 880d78c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
 880d790:	00bfffc4 	movi	r2,-1
 880d794:	e0bfff15 	stw	r2,-4(fp)
 880d798:	00000c06 	br	880d7cc <sbrk+0xa8>
  }
#endif

  prev_heap_end = heap_end; 
 880d79c:	d0a01017 	ldw	r2,-32704(gp)
 880d7a0:	e0bffc15 	stw	r2,-16(fp)
  heap_end += incr; 
 880d7a4:	d0e01017 	ldw	r3,-32704(gp)
 880d7a8:	e0bffe17 	ldw	r2,-8(fp)
 880d7ac:	1885883a 	add	r2,r3,r2
 880d7b0:	d0a01015 	stw	r2,-32704(gp)
 880d7b4:	e0bffd17 	ldw	r2,-12(fp)
 880d7b8:	e0bff915 	stw	r2,-28(fp)
 880d7bc:	e0bff917 	ldw	r2,-28(fp)
 880d7c0:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
 880d7c4:	e0bffc17 	ldw	r2,-16(fp)
 880d7c8:	e0bfff15 	stw	r2,-4(fp)
 880d7cc:	e0bfff17 	ldw	r2,-4(fp)
} 
 880d7d0:	e037883a 	mov	sp,fp
 880d7d4:	df000017 	ldw	fp,0(sp)
 880d7d8:	dec00104 	addi	sp,sp,4
 880d7dc:	f800283a 	ret

0880d7e0 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
 880d7e0:	defff704 	addi	sp,sp,-36
 880d7e4:	dfc00815 	stw	ra,32(sp)
 880d7e8:	df000715 	stw	fp,28(sp)
 880d7ec:	df000704 	addi	fp,sp,28
 880d7f0:	e13ffb15 	stw	r4,-20(fp)
 880d7f4:	e17ffc15 	stw	r5,-16(fp)
 880d7f8:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 880d7fc:	e0bffb17 	ldw	r2,-20(fp)
 880d800:	1004803a 	cmplt	r2,r2,zero
 880d804:	1000081e 	bne	r2,zero,880d828 <write+0x48>
 880d808:	e0bffb17 	ldw	r2,-20(fp)
 880d80c:	10800324 	muli	r2,r2,12
 880d810:	1007883a 	mov	r3,r2
 880d814:	00822074 	movhi	r2,2177
 880d818:	10898504 	addi	r2,r2,9748
 880d81c:	1887883a 	add	r3,r3,r2
 880d820:	e0ffff15 	stw	r3,-4(fp)
 880d824:	00000106 	br	880d82c <write+0x4c>
 880d828:	e03fff15 	stw	zero,-4(fp)
 880d82c:	e0bfff17 	ldw	r2,-4(fp)
 880d830:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
 880d834:	e0bffa17 	ldw	r2,-24(fp)
 880d838:	1005003a 	cmpeq	r2,r2,zero
 880d83c:	1000241e 	bne	r2,zero,880d8d0 <write+0xf0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
 880d840:	e0bffa17 	ldw	r2,-24(fp)
 880d844:	10800217 	ldw	r2,8(r2)
 880d848:	108000cc 	andi	r2,r2,3
 880d84c:	1005003a 	cmpeq	r2,r2,zero
 880d850:	10001a1e 	bne	r2,zero,880d8bc <write+0xdc>
 880d854:	e0bffa17 	ldw	r2,-24(fp)
 880d858:	10800017 	ldw	r2,0(r2)
 880d85c:	10800617 	ldw	r2,24(r2)
 880d860:	1005003a 	cmpeq	r2,r2,zero
 880d864:	1000151e 	bne	r2,zero,880d8bc <write+0xdc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
 880d868:	e0bffa17 	ldw	r2,-24(fp)
 880d86c:	10800017 	ldw	r2,0(r2)
 880d870:	10800617 	ldw	r2,24(r2)
 880d874:	e17ffc17 	ldw	r5,-16(fp)
 880d878:	e1bffd17 	ldw	r6,-12(fp)
 880d87c:	e13ffa17 	ldw	r4,-24(fp)
 880d880:	103ee83a 	callr	r2
 880d884:	e0bff915 	stw	r2,-28(fp)
 880d888:	e0bff917 	ldw	r2,-28(fp)
 880d88c:	1004403a 	cmpge	r2,r2,zero
 880d890:	1000071e 	bne	r2,zero,880d8b0 <write+0xd0>
      {
        ALT_ERRNO = -rval;
 880d894:	880d9000 	call	880d900 <alt_get_errno>
 880d898:	e0fff917 	ldw	r3,-28(fp)
 880d89c:	00c7c83a 	sub	r3,zero,r3
 880d8a0:	10c00015 	stw	r3,0(r2)
        return -1;
 880d8a4:	00bfffc4 	movi	r2,-1
 880d8a8:	e0bffe15 	stw	r2,-8(fp)
 880d8ac:	00000e06 	br	880d8e8 <write+0x108>
      }
      return rval;
 880d8b0:	e0bff917 	ldw	r2,-28(fp)
 880d8b4:	e0bffe15 	stw	r2,-8(fp)
 880d8b8:	00000b06 	br	880d8e8 <write+0x108>
    }
    else
    {
      ALT_ERRNO = EACCES;
 880d8bc:	880d9000 	call	880d900 <alt_get_errno>
 880d8c0:	1007883a 	mov	r3,r2
 880d8c4:	00800344 	movi	r2,13
 880d8c8:	18800015 	stw	r2,0(r3)
 880d8cc:	00000406 	br	880d8e0 <write+0x100>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
 880d8d0:	880d9000 	call	880d900 <alt_get_errno>
 880d8d4:	1007883a 	mov	r3,r2
 880d8d8:	00801444 	movi	r2,81
 880d8dc:	18800015 	stw	r2,0(r3)
  }
  return -1;
 880d8e0:	00bfffc4 	movi	r2,-1
 880d8e4:	e0bffe15 	stw	r2,-8(fp)
 880d8e8:	e0bffe17 	ldw	r2,-8(fp)
}
 880d8ec:	e037883a 	mov	sp,fp
 880d8f0:	dfc00117 	ldw	ra,4(sp)
 880d8f4:	df000017 	ldw	fp,0(sp)
 880d8f8:	dec00204 	addi	sp,sp,8
 880d8fc:	f800283a 	ret

0880d900 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 880d900:	defffd04 	addi	sp,sp,-12
 880d904:	dfc00215 	stw	ra,8(sp)
 880d908:	df000115 	stw	fp,4(sp)
 880d90c:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 880d910:	00822074 	movhi	r2,2177
 880d914:	108e5d04 	addi	r2,r2,14708
 880d918:	10800017 	ldw	r2,0(r2)
 880d91c:	1005003a 	cmpeq	r2,r2,zero
 880d920:	1000061e 	bne	r2,zero,880d93c <alt_get_errno+0x3c>
 880d924:	00822074 	movhi	r2,2177
 880d928:	108e5d04 	addi	r2,r2,14708
 880d92c:	10800017 	ldw	r2,0(r2)
 880d930:	103ee83a 	callr	r2
 880d934:	e0bfff15 	stw	r2,-4(fp)
 880d938:	00000306 	br	880d948 <alt_get_errno+0x48>
 880d93c:	00822074 	movhi	r2,2177
 880d940:	10956404 	addi	r2,r2,21904
 880d944:	e0bfff15 	stw	r2,-4(fp)
 880d948:	e0bfff17 	ldw	r2,-4(fp)
}
 880d94c:	e037883a 	mov	sp,fp
 880d950:	dfc00117 	ldw	ra,4(sp)
 880d954:	df000017 	ldw	fp,0(sp)
 880d958:	dec00204 	addi	sp,sp,8
 880d95c:	f800283a 	ret

0880d960 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 880d960:	defffd04 	addi	sp,sp,-12
 880d964:	dfc00215 	stw	ra,8(sp)
 880d968:	df000115 	stw	fp,4(sp)
 880d96c:	df000104 	addi	fp,sp,4
 880d970:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_IRQ_INIT ( CPU_2, cpu_2);
 880d974:	88111300 	call	8811130 <altera_nios2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 880d978:	00800044 	movi	r2,1
 880d97c:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 880d980:	e037883a 	mov	sp,fp
 880d984:	dfc00117 	ldw	ra,4(sp)
 880d988:	df000017 	ldw	fp,0(sp)
 880d98c:	dec00204 	addi	sp,sp,8
 880d990:	f800283a 	ret

0880d994 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 880d994:	defffd04 	addi	sp,sp,-12
 880d998:	dfc00215 	stw	ra,8(sp)
 880d99c:	df000115 	stw	fp,4(sp)
 880d9a0:	df000104 	addi	fp,sp,4
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_2, jtag_uart_2);
 880d9a4:	01022074 	movhi	r4,2177
 880d9a8:	2109ef04 	addi	r4,r4,10172
 880d9ac:	000b883a 	mov	r5,zero
 880d9b0:	01800084 	movi	r6,2
 880d9b4:	880dd8c0 	call	880dd8c <altera_avalon_jtag_uart_init>
 880d9b8:	01022074 	movhi	r4,2177
 880d9bc:	2109e504 	addi	r4,r4,10132
 880d9c0:	880dc0c0 	call	880dc0c <alt_dev_reg>
    ALTERA_AVALON_MAILBOX_INIT ( MAILBOX_0, mailbox_0);
 880d9c4:	01022074 	movhi	r4,2177
 880d9c8:	210dfd04 	addi	r4,r4,14324
 880d9cc:	880e6f00 	call	880e6f0 <alt_avalon_mailbox_init>
    ALTERA_AVALON_MAILBOX_INIT ( MAILBOX_1, mailbox_1);
 880d9d0:	01022074 	movhi	r4,2177
 880d9d4:	210e0c04 	addi	r4,r4,14384
 880d9d8:	880e6f00 	call	880e6f0 <alt_avalon_mailbox_init>
    ALTERA_AVALON_MAILBOX_INIT ( MAILBOX_2, mailbox_2);
 880d9dc:	01022074 	movhi	r4,2177
 880d9e0:	210e1b04 	addi	r4,r4,14444
 880d9e4:	880e6f00 	call	880e6f0 <alt_avalon_mailbox_init>
    ALTERA_AVALON_MAILBOX_INIT ( MAILBOX_3, mailbox_3);
 880d9e8:	01022074 	movhi	r4,2177
 880d9ec:	210e2a04 	addi	r4,r4,14504
 880d9f0:	880e6f00 	call	880e6f0 <alt_avalon_mailbox_init>
    ALTERA_AVALON_PERFORMANCE_COUNTER_INIT ( PERFORMANCE_COUNTER_0, performance_counter_0);
 880d9f4:	0007883a 	mov	r3,zero
 880d9f8:	00800044 	movi	r2,1
 880d9fc:	18800035 	stwio	r2,0(r3)
    ALTERA_AVALON_SYSID_INIT ( SYSID, sysid);
    ALTERA_UP_AVALON_VIDEO_PIXEL_BUFFER_DMA_INIT ( VIDEO_PIXEL_BUFFER_DMA_0, video_pixel_buffer_dma_0);
 880da00:	00822074 	movhi	r2,2177
 880da04:	108e3904 	addi	r2,r2,14564
 880da08:	10800a17 	ldw	r2,40(r2)
 880da0c:	10800017 	ldw	r2,0(r2)
 880da10:	1007883a 	mov	r3,r2
 880da14:	00822074 	movhi	r2,2177
 880da18:	108e3904 	addi	r2,r2,14564
 880da1c:	10c00b15 	stw	r3,44(r2)
 880da20:	00822074 	movhi	r2,2177
 880da24:	108e3904 	addi	r2,r2,14564
 880da28:	10800a17 	ldw	r2,40(r2)
 880da2c:	10800104 	addi	r2,r2,4
 880da30:	10800017 	ldw	r2,0(r2)
 880da34:	1007883a 	mov	r3,r2
 880da38:	00822074 	movhi	r2,2177
 880da3c:	108e3904 	addi	r2,r2,14564
 880da40:	10c00c15 	stw	r3,48(r2)
 880da44:	00822074 	movhi	r2,2177
 880da48:	108e3904 	addi	r2,r2,14564
 880da4c:	10800a17 	ldw	r2,40(r2)
 880da50:	10800204 	addi	r2,r2,8
 880da54:	10800017 	ldw	r2,0(r2)
 880da58:	10ffffcc 	andi	r3,r2,65535
 880da5c:	00822074 	movhi	r2,2177
 880da60:	108e3904 	addi	r2,r2,14564
 880da64:	10c00f15 	stw	r3,60(r2)
 880da68:	00822074 	movhi	r2,2177
 880da6c:	108e3904 	addi	r2,r2,14564
 880da70:	10800a17 	ldw	r2,40(r2)
 880da74:	10800204 	addi	r2,r2,8
 880da78:	10800017 	ldw	r2,0(r2)
 880da7c:	1005d43a 	srai	r2,r2,16
 880da80:	10ffffcc 	andi	r3,r2,65535
 880da84:	00822074 	movhi	r2,2177
 880da88:	108e3904 	addi	r2,r2,14564
 880da8c:	10c01015 	stw	r3,64(r2)
 880da90:	00822074 	movhi	r2,2177
 880da94:	108e3904 	addi	r2,r2,14564
 880da98:	10800a17 	ldw	r2,40(r2)
 880da9c:	10800304 	addi	r2,r2,12
 880daa0:	10800017 	ldw	r2,0(r2)
 880daa4:	1005d07a 	srai	r2,r2,1
 880daa8:	10c0004c 	andi	r3,r2,1
 880daac:	00822074 	movhi	r2,2177
 880dab0:	108e3904 	addi	r2,r2,14564
 880dab4:	10c00d15 	stw	r3,52(r2)
 880dab8:	00822074 	movhi	r2,2177
 880dabc:	108e3904 	addi	r2,r2,14564
 880dac0:	10800a17 	ldw	r2,40(r2)
 880dac4:	10800304 	addi	r2,r2,12
 880dac8:	10800017 	ldw	r2,0(r2)
 880dacc:	1005d13a 	srai	r2,r2,4
 880dad0:	10c003cc 	andi	r3,r2,15
 880dad4:	00822074 	movhi	r2,2177
 880dad8:	108e3904 	addi	r2,r2,14564
 880dadc:	10c00e15 	stw	r3,56(r2)
 880dae0:	00822074 	movhi	r2,2177
 880dae4:	108e3904 	addi	r2,r2,14564
 880dae8:	10800a17 	ldw	r2,40(r2)
 880daec:	10800304 	addi	r2,r2,12
 880daf0:	10800017 	ldw	r2,0(r2)
 880daf4:	1005d43a 	srai	r2,r2,16
 880daf8:	1007883a 	mov	r3,r2
 880dafc:	00bfffc4 	movi	r2,-1
 880db00:	1884703a 	and	r2,r3,r2
 880db04:	e0bfff45 	stb	r2,-3(fp)
 880db08:	00822074 	movhi	r2,2177
 880db0c:	108e3904 	addi	r2,r2,14564
 880db10:	10800a17 	ldw	r2,40(r2)
 880db14:	10800304 	addi	r2,r2,12
 880db18:	10800017 	ldw	r2,0(r2)
 880db1c:	1005d63a 	srai	r2,r2,24
 880db20:	1007883a 	mov	r3,r2
 880db24:	00bfffc4 	movi	r2,-1
 880db28:	1884703a 	and	r2,r3,r2
 880db2c:	e0bfff05 	stb	r2,-4(fp)
 880db30:	00822074 	movhi	r2,2177
 880db34:	108e3904 	addi	r2,r2,14564
 880db38:	10800e17 	ldw	r2,56(r2)
 880db3c:	10800058 	cmpnei	r2,r2,1
 880db40:	1000041e 	bne	r2,zero,880db54 <alt_sys_init+0x1c0>
 880db44:	00822074 	movhi	r2,2177
 880db48:	108e3904 	addi	r2,r2,14564
 880db4c:	10001115 	stw	zero,68(r2)
 880db50:	00000e06 	br	880db8c <alt_sys_init+0x1f8>
 880db54:	00822074 	movhi	r2,2177
 880db58:	108e3904 	addi	r2,r2,14564
 880db5c:	10800e17 	ldw	r2,56(r2)
 880db60:	10800098 	cmpnei	r2,r2,2
 880db64:	1000051e 	bne	r2,zero,880db7c <alt_sys_init+0x1e8>
 880db68:	00c22074 	movhi	r3,2177
 880db6c:	18ce3904 	addi	r3,r3,14564
 880db70:	00800044 	movi	r2,1
 880db74:	18801115 	stw	r2,68(r3)
 880db78:	00000406 	br	880db8c <alt_sys_init+0x1f8>
 880db7c:	00c22074 	movhi	r3,2177
 880db80:	18ce3904 	addi	r3,r3,14564
 880db84:	00800084 	movi	r2,2
 880db88:	18801115 	stw	r2,68(r3)
 880db8c:	e0ffff43 	ldbu	r3,-3(fp)
 880db90:	00800804 	movi	r2,32
 880db94:	10c7c83a 	sub	r3,r2,r3
 880db98:	00bfffc4 	movi	r2,-1
 880db9c:	10c6d83a 	srl	r3,r2,r3
 880dba0:	00822074 	movhi	r2,2177
 880dba4:	108e3904 	addi	r2,r2,14564
 880dba8:	10c01215 	stw	r3,72(r2)
 880dbac:	e0ffff43 	ldbu	r3,-3(fp)
 880dbb0:	00822074 	movhi	r2,2177
 880dbb4:	108e3904 	addi	r2,r2,14564
 880dbb8:	10801117 	ldw	r2,68(r2)
 880dbbc:	1887883a 	add	r3,r3,r2
 880dbc0:	00822074 	movhi	r2,2177
 880dbc4:	108e3904 	addi	r2,r2,14564
 880dbc8:	10c01315 	stw	r3,76(r2)
 880dbcc:	e0ffff03 	ldbu	r3,-4(fp)
 880dbd0:	00800804 	movi	r2,32
 880dbd4:	10c7c83a 	sub	r3,r2,r3
 880dbd8:	00bfffc4 	movi	r2,-1
 880dbdc:	10c6d83a 	srl	r3,r2,r3
 880dbe0:	00822074 	movhi	r2,2177
 880dbe4:	108e3904 	addi	r2,r2,14564
 880dbe8:	10c01415 	stw	r3,80(r2)
 880dbec:	01022074 	movhi	r4,2177
 880dbf0:	210e3904 	addi	r4,r4,14564
 880dbf4:	880dc0c0 	call	880dc0c <alt_dev_reg>
}
 880dbf8:	e037883a 	mov	sp,fp
 880dbfc:	dfc00117 	ldw	ra,4(sp)
 880dc00:	df000017 	ldw	fp,0(sp)
 880dc04:	dec00204 	addi	sp,sp,8
 880dc08:	f800283a 	ret

0880dc0c <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
 880dc0c:	defffd04 	addi	sp,sp,-12
 880dc10:	dfc00215 	stw	ra,8(sp)
 880dc14:	df000115 	stw	fp,4(sp)
 880dc18:	df000104 	addi	fp,sp,4
 880dc1c:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 880dc20:	e13fff17 	ldw	r4,-4(fp)
 880dc24:	01422074 	movhi	r5,2177
 880dc28:	294e5a04 	addi	r5,r5,14696
 880dc2c:	88106200 	call	8810620 <alt_dev_llist_insert>
}
 880dc30:	e037883a 	mov	sp,fp
 880dc34:	dfc00117 	ldw	ra,4(sp)
 880dc38:	df000017 	ldw	fp,0(sp)
 880dc3c:	dec00204 	addi	sp,sp,8
 880dc40:	f800283a 	ret

0880dc44 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 880dc44:	defffa04 	addi	sp,sp,-24
 880dc48:	dfc00515 	stw	ra,20(sp)
 880dc4c:	df000415 	stw	fp,16(sp)
 880dc50:	df000404 	addi	fp,sp,16
 880dc54:	e13ffd15 	stw	r4,-12(fp)
 880dc58:	e17ffe15 	stw	r5,-8(fp)
 880dc5c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 880dc60:	e0bffd17 	ldw	r2,-12(fp)
 880dc64:	10800017 	ldw	r2,0(r2)
 880dc68:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 880dc6c:	e0bffc17 	ldw	r2,-16(fp)
 880dc70:	11000a04 	addi	r4,r2,40
 880dc74:	e0bffd17 	ldw	r2,-12(fp)
 880dc78:	11c00217 	ldw	r7,8(r2)
 880dc7c:	e17ffe17 	ldw	r5,-8(fp)
 880dc80:	e1bfff17 	ldw	r6,-4(fp)
 880dc84:	880e28c0 	call	880e28c <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
 880dc88:	e037883a 	mov	sp,fp
 880dc8c:	dfc00117 	ldw	ra,4(sp)
 880dc90:	df000017 	ldw	fp,0(sp)
 880dc94:	dec00204 	addi	sp,sp,8
 880dc98:	f800283a 	ret

0880dc9c <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 880dc9c:	defffa04 	addi	sp,sp,-24
 880dca0:	dfc00515 	stw	ra,20(sp)
 880dca4:	df000415 	stw	fp,16(sp)
 880dca8:	df000404 	addi	fp,sp,16
 880dcac:	e13ffd15 	stw	r4,-12(fp)
 880dcb0:	e17ffe15 	stw	r5,-8(fp)
 880dcb4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 880dcb8:	e0bffd17 	ldw	r2,-12(fp)
 880dcbc:	10800017 	ldw	r2,0(r2)
 880dcc0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 880dcc4:	e0bffc17 	ldw	r2,-16(fp)
 880dcc8:	11000a04 	addi	r4,r2,40
 880dccc:	e0bffd17 	ldw	r2,-12(fp)
 880dcd0:	11c00217 	ldw	r7,8(r2)
 880dcd4:	e17ffe17 	ldw	r5,-8(fp)
 880dcd8:	e1bfff17 	ldw	r6,-4(fp)
 880dcdc:	880e4b00 	call	880e4b0 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
 880dce0:	e037883a 	mov	sp,fp
 880dce4:	dfc00117 	ldw	ra,4(sp)
 880dce8:	df000017 	ldw	fp,0(sp)
 880dcec:	dec00204 	addi	sp,sp,8
 880dcf0:	f800283a 	ret

0880dcf4 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
 880dcf4:	defffc04 	addi	sp,sp,-16
 880dcf8:	dfc00315 	stw	ra,12(sp)
 880dcfc:	df000215 	stw	fp,8(sp)
 880dd00:	df000204 	addi	fp,sp,8
 880dd04:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 880dd08:	e0bfff17 	ldw	r2,-4(fp)
 880dd0c:	10800017 	ldw	r2,0(r2)
 880dd10:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
 880dd14:	e0bffe17 	ldw	r2,-8(fp)
 880dd18:	11000a04 	addi	r4,r2,40
 880dd1c:	e0bfff17 	ldw	r2,-4(fp)
 880dd20:	11400217 	ldw	r5,8(r2)
 880dd24:	880e1240 	call	880e124 <altera_avalon_jtag_uart_close>
}
 880dd28:	e037883a 	mov	sp,fp
 880dd2c:	dfc00117 	ldw	ra,4(sp)
 880dd30:	df000017 	ldw	fp,0(sp)
 880dd34:	dec00204 	addi	sp,sp,8
 880dd38:	f800283a 	ret

0880dd3c <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
 880dd3c:	defffa04 	addi	sp,sp,-24
 880dd40:	dfc00515 	stw	ra,20(sp)
 880dd44:	df000415 	stw	fp,16(sp)
 880dd48:	df000404 	addi	fp,sp,16
 880dd4c:	e13ffd15 	stw	r4,-12(fp)
 880dd50:	e17ffe15 	stw	r5,-8(fp)
 880dd54:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
 880dd58:	e0bffd17 	ldw	r2,-12(fp)
 880dd5c:	10800017 	ldw	r2,0(r2)
 880dd60:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
 880dd64:	e0bffc17 	ldw	r2,-16(fp)
 880dd68:	11000a04 	addi	r4,r2,40
 880dd6c:	e17ffe17 	ldw	r5,-8(fp)
 880dd70:	e1bfff17 	ldw	r6,-4(fp)
 880dd74:	880e1980 	call	880e198 <altera_avalon_jtag_uart_ioctl>
}
 880dd78:	e037883a 	mov	sp,fp
 880dd7c:	dfc00117 	ldw	ra,4(sp)
 880dd80:	df000017 	ldw	fp,0(sp)
 880dd84:	dec00204 	addi	sp,sp,8
 880dd88:	f800283a 	ret

0880dd8c <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
 880dd8c:	defffa04 	addi	sp,sp,-24
 880dd90:	dfc00515 	stw	ra,20(sp)
 880dd94:	df000415 	stw	fp,16(sp)
 880dd98:	df000404 	addi	fp,sp,16
 880dd9c:	e13ffd15 	stw	r4,-12(fp)
 880dda0:	e17ffe15 	stw	r5,-8(fp)
 880dda4:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 880dda8:	e0fffd17 	ldw	r3,-12(fp)
 880ddac:	00800044 	movi	r2,1
 880ddb0:	18800815 	stw	r2,32(r3)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
 880ddb4:	e0bffd17 	ldw	r2,-12(fp)
 880ddb8:	10800017 	ldw	r2,0(r2)
 880ddbc:	11000104 	addi	r4,r2,4
 880ddc0:	e0bffd17 	ldw	r2,-12(fp)
 880ddc4:	10800817 	ldw	r2,32(r2)
 880ddc8:	1007883a 	mov	r3,r2
 880ddcc:	2005883a 	mov	r2,r4
 880ddd0:	10c00035 	stwio	r3,0(r2)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
 880ddd4:	e13ffe17 	ldw	r4,-8(fp)
 880ddd8:	e17fff17 	ldw	r5,-4(fp)
 880dddc:	d8000015 	stw	zero,0(sp)
 880dde0:	01822074 	movhi	r6,2177
 880dde4:	31b79304 	addi	r6,r6,-8628
 880dde8:	e1fffd17 	ldw	r7,-12(fp)
 880ddec:	88108c00 	call	88108c0 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
 880ddf0:	e0bffd17 	ldw	r2,-12(fp)
 880ddf4:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
 880ddf8:	e0bffd17 	ldw	r2,-12(fp)
 880ddfc:	11000204 	addi	r4,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 880de00:	00822074 	movhi	r2,2177
 880de04:	10956904 	addi	r2,r2,21924
 880de08:	10800017 	ldw	r2,0(r2)
 880de0c:	100b883a 	mov	r5,r2
 880de10:	01822074 	movhi	r6,2177
 880de14:	31b81d04 	addi	r6,r6,-8076
 880de18:	e1fffd17 	ldw	r7,-12(fp)
 880de1c:	88104880 	call	8810488 <alt_alarm_start>
 880de20:	1004403a 	cmpge	r2,r2,zero
 880de24:	1000041e 	bne	r2,zero,880de38 <altera_avalon_jtag_uart_init+0xac>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
 880de28:	e0fffd17 	ldw	r3,-12(fp)
 880de2c:	00a00034 	movhi	r2,32768
 880de30:	10bfffc4 	addi	r2,r2,-1
 880de34:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
 880de38:	e037883a 	mov	sp,fp
 880de3c:	dfc00117 	ldw	ra,4(sp)
 880de40:	df000017 	ldw	fp,0(sp)
 880de44:	dec00204 	addi	sp,sp,8
 880de48:	f800283a 	ret

0880de4c <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
 880de4c:	defff804 	addi	sp,sp,-32
 880de50:	df000715 	stw	fp,28(sp)
 880de54:	df000704 	addi	fp,sp,28
 880de58:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
 880de5c:	e0bfff17 	ldw	r2,-4(fp)
 880de60:	e0bffe15 	stw	r2,-8(fp)
  unsigned int base = sp->base;
 880de64:	e0bffe17 	ldw	r2,-8(fp)
 880de68:	10800017 	ldw	r2,0(r2)
 880de6c:	e0bffd15 	stw	r2,-12(fp)
 880de70:	00000006 	br	880de74 <altera_avalon_jtag_uart_irq+0x28>
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 880de74:	e0bffd17 	ldw	r2,-12(fp)
 880de78:	10800104 	addi	r2,r2,4
 880de7c:	10800037 	ldwio	r2,0(r2)
 880de80:	e0bffc15 	stw	r2,-16(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
 880de84:	e0bffc17 	ldw	r2,-16(fp)
 880de88:	1080c00c 	andi	r2,r2,768
 880de8c:	1005003a 	cmpeq	r2,r2,zero
 880de90:	1000741e 	bne	r2,zero,880e064 <altera_avalon_jtag_uart_irq+0x218>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
 880de94:	e0bffc17 	ldw	r2,-16(fp)
 880de98:	1080400c 	andi	r2,r2,256
 880de9c:	1005003a 	cmpeq	r2,r2,zero
 880dea0:	1000351e 	bne	r2,zero,880df78 <altera_avalon_jtag_uart_irq+0x12c>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
 880dea4:	00800074 	movhi	r2,1
 880dea8:	e0bffb15 	stw	r2,-20(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 880deac:	e0bffe17 	ldw	r2,-8(fp)
 880deb0:	10800a17 	ldw	r2,40(r2)
 880deb4:	10800044 	addi	r2,r2,1
 880deb8:	1081ffcc 	andi	r2,r2,2047
 880debc:	e0bffa15 	stw	r2,-24(fp)
        if (next == sp->rx_out)
 880dec0:	e0bffe17 	ldw	r2,-8(fp)
 880dec4:	10c00b17 	ldw	r3,44(r2)
 880dec8:	e0bffa17 	ldw	r2,-24(fp)
 880decc:	18801626 	beq	r3,r2,880df28 <altera_avalon_jtag_uart_irq+0xdc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 880ded0:	e0bffd17 	ldw	r2,-12(fp)
 880ded4:	10800037 	ldwio	r2,0(r2)
 880ded8:	e0bffb15 	stw	r2,-20(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
 880dedc:	e0bffb17 	ldw	r2,-20(fp)
 880dee0:	10a0000c 	andi	r2,r2,32768
 880dee4:	1005003a 	cmpeq	r2,r2,zero
 880dee8:	10000f1e 	bne	r2,zero,880df28 <altera_avalon_jtag_uart_irq+0xdc>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 880deec:	e0bffe17 	ldw	r2,-8(fp)
 880def0:	10c00a17 	ldw	r3,40(r2)
 880def4:	e0bffb17 	ldw	r2,-20(fp)
 880def8:	1009883a 	mov	r4,r2
 880defc:	e0bffe17 	ldw	r2,-8(fp)
 880df00:	1885883a 	add	r2,r3,r2
 880df04:	10800e04 	addi	r2,r2,56
 880df08:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 880df0c:	e0bffe17 	ldw	r2,-8(fp)
 880df10:	10800a17 	ldw	r2,40(r2)
 880df14:	10800044 	addi	r2,r2,1
 880df18:	10c1ffcc 	andi	r3,r2,2047
 880df1c:	e0bffe17 	ldw	r2,-8(fp)
 880df20:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
 880df24:	003fe106 	br	880deac <altera_avalon_jtag_uart_irq+0x60>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
 880df28:	e0bffb17 	ldw	r2,-20(fp)
 880df2c:	10bfffec 	andhi	r2,r2,65535
 880df30:	1005003a 	cmpeq	r2,r2,zero
 880df34:	1000101e 	bne	r2,zero,880df78 <altera_avalon_jtag_uart_irq+0x12c>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 880df38:	e0bffe17 	ldw	r2,-8(fp)
 880df3c:	10c00817 	ldw	r3,32(r2)
 880df40:	00bfff84 	movi	r2,-2
 880df44:	1886703a 	and	r3,r3,r2
 880df48:	e0bffe17 	ldw	r2,-8(fp)
 880df4c:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
 880df50:	e0bffd17 	ldw	r2,-12(fp)
 880df54:	11000104 	addi	r4,r2,4
 880df58:	e0bffe17 	ldw	r2,-8(fp)
 880df5c:	10800817 	ldw	r2,32(r2)
 880df60:	1007883a 	mov	r3,r2
 880df64:	2005883a 	mov	r2,r4
 880df68:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 880df6c:	e0bffd17 	ldw	r2,-12(fp)
 880df70:	10800104 	addi	r2,r2,4
 880df74:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
 880df78:	e0bffc17 	ldw	r2,-16(fp)
 880df7c:	1080800c 	andi	r2,r2,512
 880df80:	1005003a 	cmpeq	r2,r2,zero
 880df84:	103fbb1e 	bne	r2,zero,880de74 <altera_avalon_jtag_uart_irq+0x28>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
 880df88:	e0bffc17 	ldw	r2,-16(fp)
 880df8c:	10bfffec 	andhi	r2,r2,65535
 880df90:	1004d43a 	srli	r2,r2,16
 880df94:	e0bff915 	stw	r2,-28(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
 880df98:	00001506 	br	880dff0 <altera_avalon_jtag_uart_irq+0x1a4>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
 880df9c:	e13ffd17 	ldw	r4,-12(fp)
 880dfa0:	e0bffe17 	ldw	r2,-8(fp)
 880dfa4:	10c00d17 	ldw	r3,52(r2)
 880dfa8:	e0bffe17 	ldw	r2,-8(fp)
 880dfac:	1885883a 	add	r2,r3,r2
 880dfb0:	10820e04 	addi	r2,r2,2104
 880dfb4:	10800003 	ldbu	r2,0(r2)
 880dfb8:	10c03fcc 	andi	r3,r2,255
 880dfbc:	18c0201c 	xori	r3,r3,128
 880dfc0:	18ffe004 	addi	r3,r3,-128
 880dfc4:	2005883a 	mov	r2,r4
 880dfc8:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 880dfcc:	e0bffe17 	ldw	r2,-8(fp)
 880dfd0:	10800d17 	ldw	r2,52(r2)
 880dfd4:	10800044 	addi	r2,r2,1
 880dfd8:	10c1ffcc 	andi	r3,r2,2047
 880dfdc:	e0bffe17 	ldw	r2,-8(fp)
 880dfe0:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
 880dfe4:	e0bff917 	ldw	r2,-28(fp)
 880dfe8:	10bfffc4 	addi	r2,r2,-1
 880dfec:	e0bff915 	stw	r2,-28(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
 880dff0:	e0bff917 	ldw	r2,-28(fp)
 880dff4:	1005003a 	cmpeq	r2,r2,zero
 880dff8:	1000051e 	bne	r2,zero,880e010 <altera_avalon_jtag_uart_irq+0x1c4>
 880dffc:	e0bffe17 	ldw	r2,-8(fp)
 880e000:	10c00d17 	ldw	r3,52(r2)
 880e004:	e0bffe17 	ldw	r2,-8(fp)
 880e008:	10800c17 	ldw	r2,48(r2)
 880e00c:	18bfe31e 	bne	r3,r2,880df9c <altera_avalon_jtag_uart_irq+0x150>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
 880e010:	e0bff917 	ldw	r2,-28(fp)
 880e014:	1005003a 	cmpeq	r2,r2,zero
 880e018:	103f961e 	bne	r2,zero,880de74 <altera_avalon_jtag_uart_irq+0x28>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 880e01c:	e0bffe17 	ldw	r2,-8(fp)
 880e020:	10c00817 	ldw	r3,32(r2)
 880e024:	00bfff44 	movi	r2,-3
 880e028:	1886703a 	and	r3,r3,r2
 880e02c:	e0bffe17 	ldw	r2,-8(fp)
 880e030:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 880e034:	e0bffe17 	ldw	r2,-8(fp)
 880e038:	10800017 	ldw	r2,0(r2)
 880e03c:	11000104 	addi	r4,r2,4
 880e040:	e0bffe17 	ldw	r2,-8(fp)
 880e044:	10800817 	ldw	r2,32(r2)
 880e048:	1007883a 	mov	r3,r2
 880e04c:	2005883a 	mov	r2,r4
 880e050:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 880e054:	e0bffd17 	ldw	r2,-12(fp)
 880e058:	10800104 	addi	r2,r2,4
 880e05c:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
 880e060:	003f8406 	br	880de74 <altera_avalon_jtag_uart_irq+0x28>
}
 880e064:	e037883a 	mov	sp,fp
 880e068:	df000017 	ldw	fp,0(sp)
 880e06c:	dec00104 	addi	sp,sp,4
 880e070:	f800283a 	ret

0880e074 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
 880e074:	defffc04 	addi	sp,sp,-16
 880e078:	df000315 	stw	fp,12(sp)
 880e07c:	df000304 	addi	fp,sp,12
 880e080:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
 880e084:	e0bfff17 	ldw	r2,-4(fp)
 880e088:	e0bffe15 	stw	r2,-8(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
 880e08c:	e0bffe17 	ldw	r2,-8(fp)
 880e090:	10800017 	ldw	r2,0(r2)
 880e094:	10800104 	addi	r2,r2,4
 880e098:	10800037 	ldwio	r2,0(r2)
 880e09c:	e0bffd15 	stw	r2,-12(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
 880e0a0:	e0bffd17 	ldw	r2,-12(fp)
 880e0a4:	1081000c 	andi	r2,r2,1024
 880e0a8:	1005003a 	cmpeq	r2,r2,zero
 880e0ac:	10000c1e 	bne	r2,zero,880e0e0 <altera_avalon_jtag_uart_timeout+0x6c>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
 880e0b0:	e0bffe17 	ldw	r2,-8(fp)
 880e0b4:	10800017 	ldw	r2,0(r2)
 880e0b8:	11000104 	addi	r4,r2,4
 880e0bc:	e0bffe17 	ldw	r2,-8(fp)
 880e0c0:	10800817 	ldw	r2,32(r2)
 880e0c4:	10810014 	ori	r2,r2,1024
 880e0c8:	1007883a 	mov	r3,r2
 880e0cc:	2005883a 	mov	r2,r4
 880e0d0:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
 880e0d4:	e0bffe17 	ldw	r2,-8(fp)
 880e0d8:	10000915 	stw	zero,36(r2)
 880e0dc:	00000a06 	br	880e108 <altera_avalon_jtag_uart_timeout+0x94>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
 880e0e0:	e0bffe17 	ldw	r2,-8(fp)
 880e0e4:	10c00917 	ldw	r3,36(r2)
 880e0e8:	00a00034 	movhi	r2,32768
 880e0ec:	10bfff04 	addi	r2,r2,-4
 880e0f0:	10c00536 	bltu	r2,r3,880e108 <altera_avalon_jtag_uart_timeout+0x94>
    sp->host_inactive++;
 880e0f4:	e0bffe17 	ldw	r2,-8(fp)
 880e0f8:	10800917 	ldw	r2,36(r2)
 880e0fc:	10c00044 	addi	r3,r2,1
 880e100:	e0bffe17 	ldw	r2,-8(fp)
 880e104:	10c00915 	stw	r3,36(r2)
 880e108:	00822074 	movhi	r2,2177
 880e10c:	10956904 	addi	r2,r2,21924
 880e110:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
 880e114:	e037883a 	mov	sp,fp
 880e118:	df000017 	ldw	fp,0(sp)
 880e11c:	dec00104 	addi	sp,sp,4
 880e120:	f800283a 	ret

0880e124 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
 880e124:	defffc04 	addi	sp,sp,-16
 880e128:	df000315 	stw	fp,12(sp)
 880e12c:	df000304 	addi	fp,sp,12
 880e130:	e13ffd15 	stw	r4,-12(fp)
 880e134:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 880e138:	00000706 	br	880e158 <altera_avalon_jtag_uart_close+0x34>
    if (flags & O_NONBLOCK) {
 880e13c:	e0bffe17 	ldw	r2,-8(fp)
 880e140:	1090000c 	andi	r2,r2,16384
 880e144:	1005003a 	cmpeq	r2,r2,zero
 880e148:	1000031e 	bne	r2,zero,880e158 <altera_avalon_jtag_uart_close+0x34>
      return -EWOULDBLOCK; 
 880e14c:	00bffd44 	movi	r2,-11
 880e150:	e0bfff15 	stw	r2,-4(fp)
 880e154:	00000b06 	br	880e184 <altera_avalon_jtag_uart_close+0x60>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 880e158:	e0bffd17 	ldw	r2,-12(fp)
 880e15c:	10c00d17 	ldw	r3,52(r2)
 880e160:	e0bffd17 	ldw	r2,-12(fp)
 880e164:	10800c17 	ldw	r2,48(r2)
 880e168:	18800526 	beq	r3,r2,880e180 <altera_avalon_jtag_uart_close+0x5c>
 880e16c:	e0bffd17 	ldw	r2,-12(fp)
 880e170:	10c00917 	ldw	r3,36(r2)
 880e174:	e0bffd17 	ldw	r2,-12(fp)
 880e178:	10800117 	ldw	r2,4(r2)
 880e17c:	18bfef36 	bltu	r3,r2,880e13c <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
 880e180:	e03fff15 	stw	zero,-4(fp)
 880e184:	e0bfff17 	ldw	r2,-4(fp)
}
 880e188:	e037883a 	mov	sp,fp
 880e18c:	df000017 	ldw	fp,0(sp)
 880e190:	dec00104 	addi	sp,sp,4
 880e194:	f800283a 	ret

0880e198 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
 880e198:	defff804 	addi	sp,sp,-32
 880e19c:	df000715 	stw	fp,28(sp)
 880e1a0:	df000704 	addi	fp,sp,28
 880e1a4:	e13ffb15 	stw	r4,-20(fp)
 880e1a8:	e17ffc15 	stw	r5,-16(fp)
 880e1ac:	e1bffd15 	stw	r6,-12(fp)
  int rc = -ENOTTY;
 880e1b0:	00bff9c4 	movi	r2,-25
 880e1b4:	e0bffa15 	stw	r2,-24(fp)

  switch (req)
 880e1b8:	e0bffc17 	ldw	r2,-16(fp)
 880e1bc:	e0bfff15 	stw	r2,-4(fp)
 880e1c0:	e0ffff17 	ldw	r3,-4(fp)
 880e1c4:	189a8060 	cmpeqi	r2,r3,27137
 880e1c8:	1000041e 	bne	r2,zero,880e1dc <altera_avalon_jtag_uart_ioctl+0x44>
 880e1cc:	e0ffff17 	ldw	r3,-4(fp)
 880e1d0:	189a80a0 	cmpeqi	r2,r3,27138
 880e1d4:	10001b1e 	bne	r2,zero,880e244 <altera_avalon_jtag_uart_ioctl+0xac>
 880e1d8:	00002706 	br	880e278 <altera_avalon_jtag_uart_ioctl+0xe0>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
 880e1dc:	e0bffb17 	ldw	r2,-20(fp)
 880e1e0:	10c00117 	ldw	r3,4(r2)
 880e1e4:	00a00034 	movhi	r2,32768
 880e1e8:	10bfffc4 	addi	r2,r2,-1
 880e1ec:	18802226 	beq	r3,r2,880e278 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
 880e1f0:	e0bffd17 	ldw	r2,-12(fp)
 880e1f4:	10800017 	ldw	r2,0(r2)
 880e1f8:	e0bff915 	stw	r2,-28(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
 880e1fc:	e0bff917 	ldw	r2,-28(fp)
 880e200:	10800090 	cmplti	r2,r2,2
 880e204:	1000071e 	bne	r2,zero,880e224 <altera_avalon_jtag_uart_ioctl+0x8c>
 880e208:	e0fff917 	ldw	r3,-28(fp)
 880e20c:	00a00034 	movhi	r2,32768
 880e210:	10bfffc4 	addi	r2,r2,-1
 880e214:	18800326 	beq	r3,r2,880e224 <altera_avalon_jtag_uart_ioctl+0x8c>
 880e218:	e0bff917 	ldw	r2,-28(fp)
 880e21c:	e0bffe15 	stw	r2,-8(fp)
 880e220:	00000306 	br	880e230 <altera_avalon_jtag_uart_ioctl+0x98>
 880e224:	00e00034 	movhi	r3,32768
 880e228:	18ffff84 	addi	r3,r3,-2
 880e22c:	e0fffe15 	stw	r3,-8(fp)
 880e230:	e0bffb17 	ldw	r2,-20(fp)
 880e234:	e0fffe17 	ldw	r3,-8(fp)
 880e238:	10c00115 	stw	r3,4(r2)
      rc = 0;
 880e23c:	e03ffa15 	stw	zero,-24(fp)
    }
    break;
 880e240:	00000d06 	br	880e278 <altera_avalon_jtag_uart_ioctl+0xe0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
 880e244:	e0bffb17 	ldw	r2,-20(fp)
 880e248:	10c00117 	ldw	r3,4(r2)
 880e24c:	00a00034 	movhi	r2,32768
 880e250:	10bfffc4 	addi	r2,r2,-1
 880e254:	18800826 	beq	r3,r2,880e278 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
 880e258:	e13ffd17 	ldw	r4,-12(fp)
 880e25c:	e0bffb17 	ldw	r2,-20(fp)
 880e260:	10c00917 	ldw	r3,36(r2)
 880e264:	e0bffb17 	ldw	r2,-20(fp)
 880e268:	10800117 	ldw	r2,4(r2)
 880e26c:	1885803a 	cmpltu	r2,r3,r2
 880e270:	20800015 	stw	r2,0(r4)
      rc = 0;
 880e274:	e03ffa15 	stw	zero,-24(fp)

  default:
    break;
  }

  return rc;
 880e278:	e0bffa17 	ldw	r2,-24(fp)
}
 880e27c:	e037883a 	mov	sp,fp
 880e280:	df000017 	ldw	fp,0(sp)
 880e284:	dec00104 	addi	sp,sp,4
 880e288:	f800283a 	ret

0880e28c <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
 880e28c:	defff204 	addi	sp,sp,-56
 880e290:	dfc00d15 	stw	ra,52(sp)
 880e294:	df000c15 	stw	fp,48(sp)
 880e298:	df000c04 	addi	fp,sp,48
 880e29c:	e13ffb15 	stw	r4,-20(fp)
 880e2a0:	e17ffc15 	stw	r5,-16(fp)
 880e2a4:	e1bffd15 	stw	r6,-12(fp)
 880e2a8:	e1fffe15 	stw	r7,-8(fp)
  char * ptr = buffer;
 880e2ac:	e0bffc17 	ldw	r2,-16(fp)
 880e2b0:	e0bffa15 	stw	r2,-24(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 880e2b4:	00004806 	br	880e3d8 <altera_avalon_jtag_uart_read+0x14c>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
 880e2b8:	e0bffb17 	ldw	r2,-20(fp)
 880e2bc:	10800a17 	ldw	r2,40(r2)
 880e2c0:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
 880e2c4:	e0bffb17 	ldw	r2,-20(fp)
 880e2c8:	10800b17 	ldw	r2,44(r2)
 880e2cc:	e0bff615 	stw	r2,-40(fp)

      if (in >= out)
 880e2d0:	e0fff717 	ldw	r3,-36(fp)
 880e2d4:	e0bff617 	ldw	r2,-40(fp)
 880e2d8:	18800536 	bltu	r3,r2,880e2f0 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
 880e2dc:	e0bff717 	ldw	r2,-36(fp)
 880e2e0:	e0fff617 	ldw	r3,-40(fp)
 880e2e4:	10c5c83a 	sub	r2,r2,r3
 880e2e8:	e0bff815 	stw	r2,-32(fp)
 880e2ec:	00000406 	br	880e300 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
 880e2f0:	00820004 	movi	r2,2048
 880e2f4:	e0fff617 	ldw	r3,-40(fp)
 880e2f8:	10c5c83a 	sub	r2,r2,r3
 880e2fc:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
 880e300:	e0bff817 	ldw	r2,-32(fp)
 880e304:	1005003a 	cmpeq	r2,r2,zero
 880e308:	10001f1e 	bne	r2,zero,880e388 <altera_avalon_jtag_uart_read+0xfc>
        break; /* No more data available */

      if (n > space)
 880e30c:	e0fffd17 	ldw	r3,-12(fp)
 880e310:	e0bff817 	ldw	r2,-32(fp)
 880e314:	1880022e 	bgeu	r3,r2,880e320 <altera_avalon_jtag_uart_read+0x94>
        n = space;
 880e318:	e0bffd17 	ldw	r2,-12(fp)
 880e31c:	e0bff815 	stw	r2,-32(fp)

      memcpy(ptr, sp->rx_buf + out, n);
 880e320:	e0bffb17 	ldw	r2,-20(fp)
 880e324:	10c00e04 	addi	r3,r2,56
 880e328:	e0bff617 	ldw	r2,-40(fp)
 880e32c:	1887883a 	add	r3,r3,r2
 880e330:	e0bffa17 	ldw	r2,-24(fp)
 880e334:	1009883a 	mov	r4,r2
 880e338:	180b883a 	mov	r5,r3
 880e33c:	e1bff817 	ldw	r6,-32(fp)
 880e340:	880a0b40 	call	880a0b4 <memcpy>
      ptr   += n;
 880e344:	e0fff817 	ldw	r3,-32(fp)
 880e348:	e0bffa17 	ldw	r2,-24(fp)
 880e34c:	10c5883a 	add	r2,r2,r3
 880e350:	e0bffa15 	stw	r2,-24(fp)
      space -= n;
 880e354:	e0fffd17 	ldw	r3,-12(fp)
 880e358:	e0bff817 	ldw	r2,-32(fp)
 880e35c:	1885c83a 	sub	r2,r3,r2
 880e360:	e0bffd15 	stw	r2,-12(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 880e364:	e0fff617 	ldw	r3,-40(fp)
 880e368:	e0bff817 	ldw	r2,-32(fp)
 880e36c:	1885883a 	add	r2,r3,r2
 880e370:	10c1ffcc 	andi	r3,r2,2047
 880e374:	e0bffb17 	ldw	r2,-20(fp)
 880e378:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
 880e37c:	e0bffd17 	ldw	r2,-12(fp)
 880e380:	10800048 	cmpgei	r2,r2,1
 880e384:	103fcc1e 	bne	r2,zero,880e2b8 <altera_avalon_jtag_uart_read+0x2c>

    /* If we read any data then return it */
    if (ptr != buffer)
 880e388:	e0fffa17 	ldw	r3,-24(fp)
 880e38c:	e0bffc17 	ldw	r2,-16(fp)
 880e390:	1880141e 	bne	r3,r2,880e3e4 <altera_avalon_jtag_uart_read+0x158>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
 880e394:	e0bffe17 	ldw	r2,-8(fp)
 880e398:	1090000c 	andi	r2,r2,16384
 880e39c:	1004c03a 	cmpne	r2,r2,zero
 880e3a0:	1000101e 	bne	r2,zero,880e3e4 <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
 880e3a4:	e0bffb17 	ldw	r2,-20(fp)
 880e3a8:	10c00a17 	ldw	r3,40(r2)
 880e3ac:	e0bff717 	ldw	r2,-36(fp)
 880e3b0:	1880051e 	bne	r3,r2,880e3c8 <altera_avalon_jtag_uart_read+0x13c>
 880e3b4:	e0bffb17 	ldw	r2,-20(fp)
 880e3b8:	10c00917 	ldw	r3,36(r2)
 880e3bc:	e0bffb17 	ldw	r2,-20(fp)
 880e3c0:	10800117 	ldw	r2,4(r2)
 880e3c4:	18bff736 	bltu	r3,r2,880e3a4 <altera_avalon_jtag_uart_read+0x118>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
 880e3c8:	e0bffb17 	ldw	r2,-20(fp)
 880e3cc:	10c00a17 	ldw	r3,40(r2)
 880e3d0:	e0bff717 	ldw	r2,-36(fp)
 880e3d4:	18800326 	beq	r3,r2,880e3e4 <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 880e3d8:	e0bffd17 	ldw	r2,-12(fp)
 880e3dc:	10800048 	cmpgei	r2,r2,1
 880e3e0:	103fb51e 	bne	r2,zero,880e2b8 <altera_avalon_jtag_uart_read+0x2c>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
 880e3e4:	e0fffa17 	ldw	r3,-24(fp)
 880e3e8:	e0bffc17 	ldw	r2,-16(fp)
 880e3ec:	18801926 	beq	r3,r2,880e454 <altera_avalon_jtag_uart_read+0x1c8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 880e3f0:	0005303a 	rdctl	r2,status
 880e3f4:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 880e3f8:	e0fff517 	ldw	r3,-44(fp)
 880e3fc:	00bfff84 	movi	r2,-2
 880e400:	1884703a 	and	r2,r3,r2
 880e404:	1001703a 	wrctl	status,r2
  
  return context;
 880e408:	e0bff517 	ldw	r2,-44(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
 880e40c:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 880e410:	e0bffb17 	ldw	r2,-20(fp)
 880e414:	10800817 	ldw	r2,32(r2)
 880e418:	10c00054 	ori	r3,r2,1
 880e41c:	e0bffb17 	ldw	r2,-20(fp)
 880e420:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 880e424:	e0bffb17 	ldw	r2,-20(fp)
 880e428:	10800017 	ldw	r2,0(r2)
 880e42c:	11000104 	addi	r4,r2,4
 880e430:	e0bffb17 	ldw	r2,-20(fp)
 880e434:	10800817 	ldw	r2,32(r2)
 880e438:	1007883a 	mov	r3,r2
 880e43c:	2005883a 	mov	r2,r4
 880e440:	10c00035 	stwio	r3,0(r2)
 880e444:	e0bff917 	ldw	r2,-28(fp)
 880e448:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 880e44c:	e0bff417 	ldw	r2,-48(fp)
 880e450:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
 880e454:	e0fffa17 	ldw	r3,-24(fp)
 880e458:	e0bffc17 	ldw	r2,-16(fp)
 880e45c:	18800526 	beq	r3,r2,880e474 <altera_avalon_jtag_uart_read+0x1e8>
    return ptr - buffer;
 880e460:	e0fffa17 	ldw	r3,-24(fp)
 880e464:	e0bffc17 	ldw	r2,-16(fp)
 880e468:	1887c83a 	sub	r3,r3,r2
 880e46c:	e0ffff15 	stw	r3,-4(fp)
 880e470:	00000906 	br	880e498 <altera_avalon_jtag_uart_read+0x20c>
  else if (flags & O_NONBLOCK)
 880e474:	e0bffe17 	ldw	r2,-8(fp)
 880e478:	1090000c 	andi	r2,r2,16384
 880e47c:	1005003a 	cmpeq	r2,r2,zero
 880e480:	1000031e 	bne	r2,zero,880e490 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
 880e484:	00bffd44 	movi	r2,-11
 880e488:	e0bfff15 	stw	r2,-4(fp)
 880e48c:	00000206 	br	880e498 <altera_avalon_jtag_uart_read+0x20c>
  else
    return -EIO;
 880e490:	00bffec4 	movi	r2,-5
 880e494:	e0bfff15 	stw	r2,-4(fp)
 880e498:	e0bfff17 	ldw	r2,-4(fp)
}
 880e49c:	e037883a 	mov	sp,fp
 880e4a0:	dfc00117 	ldw	ra,4(sp)
 880e4a4:	df000017 	ldw	fp,0(sp)
 880e4a8:	dec00204 	addi	sp,sp,8
 880e4ac:	f800283a 	ret

0880e4b0 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 880e4b0:	defff204 	addi	sp,sp,-56
 880e4b4:	dfc00d15 	stw	ra,52(sp)
 880e4b8:	df000c15 	stw	fp,48(sp)
 880e4bc:	df000c04 	addi	fp,sp,48
 880e4c0:	e13ffb15 	stw	r4,-20(fp)
 880e4c4:	e17ffc15 	stw	r5,-16(fp)
 880e4c8:	e1bffd15 	stw	r6,-12(fp)
 880e4cc:	e1fffe15 	stw	r7,-8(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
 880e4d0:	e03ff915 	stw	zero,-28(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
 880e4d4:	e0bffc17 	ldw	r2,-16(fp)
 880e4d8:	e0bff615 	stw	r2,-40(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 880e4dc:	00003a06 	br	880e5c8 <altera_avalon_jtag_uart_write+0x118>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
 880e4e0:	e0bffb17 	ldw	r2,-20(fp)
 880e4e4:	10800c17 	ldw	r2,48(r2)
 880e4e8:	e0bffa15 	stw	r2,-24(fp)
      out = sp->tx_out;
 880e4ec:	e0bffb17 	ldw	r2,-20(fp)
 880e4f0:	10800d17 	ldw	r2,52(r2)
 880e4f4:	e0bff915 	stw	r2,-28(fp)

      if (in < out)
 880e4f8:	e0fffa17 	ldw	r3,-24(fp)
 880e4fc:	e0bff917 	ldw	r2,-28(fp)
 880e500:	1880062e 	bgeu	r3,r2,880e51c <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
 880e504:	e0fff917 	ldw	r3,-28(fp)
 880e508:	e0bffa17 	ldw	r2,-24(fp)
 880e50c:	1885c83a 	sub	r2,r3,r2
 880e510:	10bfffc4 	addi	r2,r2,-1
 880e514:	e0bff815 	stw	r2,-32(fp)
 880e518:	00000c06 	br	880e54c <altera_avalon_jtag_uart_write+0x9c>
      else if (out > 0)
 880e51c:	e0bff917 	ldw	r2,-28(fp)
 880e520:	1005003a 	cmpeq	r2,r2,zero
 880e524:	1000051e 	bne	r2,zero,880e53c <altera_avalon_jtag_uart_write+0x8c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
 880e528:	00820004 	movi	r2,2048
 880e52c:	e0fffa17 	ldw	r3,-24(fp)
 880e530:	10c5c83a 	sub	r2,r2,r3
 880e534:	e0bff815 	stw	r2,-32(fp)
 880e538:	00000406 	br	880e54c <altera_avalon_jtag_uart_write+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
 880e53c:	0081ffc4 	movi	r2,2047
 880e540:	e0fffa17 	ldw	r3,-24(fp)
 880e544:	10c5c83a 	sub	r2,r2,r3
 880e548:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
 880e54c:	e0bff817 	ldw	r2,-32(fp)
 880e550:	1005003a 	cmpeq	r2,r2,zero
 880e554:	10001f1e 	bne	r2,zero,880e5d4 <altera_avalon_jtag_uart_write+0x124>
        break;

      if (n > count)
 880e558:	e0fffd17 	ldw	r3,-12(fp)
 880e55c:	e0bff817 	ldw	r2,-32(fp)
 880e560:	1880022e 	bgeu	r3,r2,880e56c <altera_avalon_jtag_uart_write+0xbc>
        n = count;
 880e564:	e0bffd17 	ldw	r2,-12(fp)
 880e568:	e0bff815 	stw	r2,-32(fp)

      memcpy(sp->tx_buf + in, ptr, n);
 880e56c:	e0bffb17 	ldw	r2,-20(fp)
 880e570:	10c20e04 	addi	r3,r2,2104
 880e574:	e0bffa17 	ldw	r2,-24(fp)
 880e578:	1885883a 	add	r2,r3,r2
 880e57c:	e0fffc17 	ldw	r3,-16(fp)
 880e580:	1009883a 	mov	r4,r2
 880e584:	180b883a 	mov	r5,r3
 880e588:	e1bff817 	ldw	r6,-32(fp)
 880e58c:	880a0b40 	call	880a0b4 <memcpy>
      ptr   += n;
 880e590:	e0fff817 	ldw	r3,-32(fp)
 880e594:	e0bffc17 	ldw	r2,-16(fp)
 880e598:	10c5883a 	add	r2,r2,r3
 880e59c:	e0bffc15 	stw	r2,-16(fp)
      count -= n;
 880e5a0:	e0fffd17 	ldw	r3,-12(fp)
 880e5a4:	e0bff817 	ldw	r2,-32(fp)
 880e5a8:	1885c83a 	sub	r2,r3,r2
 880e5ac:	e0bffd15 	stw	r2,-12(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 880e5b0:	e0fffa17 	ldw	r3,-24(fp)
 880e5b4:	e0bff817 	ldw	r2,-32(fp)
 880e5b8:	1885883a 	add	r2,r3,r2
 880e5bc:	10c1ffcc 	andi	r3,r2,2047
 880e5c0:	e0bffb17 	ldw	r2,-20(fp)
 880e5c4:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 880e5c8:	e0bffd17 	ldw	r2,-12(fp)
 880e5cc:	10800048 	cmpgei	r2,r2,1
 880e5d0:	103fc31e 	bne	r2,zero,880e4e0 <altera_avalon_jtag_uart_write+0x30>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 880e5d4:	0005303a 	rdctl	r2,status
 880e5d8:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 880e5dc:	e0fff517 	ldw	r3,-44(fp)
 880e5e0:	00bfff84 	movi	r2,-2
 880e5e4:	1884703a 	and	r2,r3,r2
 880e5e8:	1001703a 	wrctl	status,r2
  
  return context;
 880e5ec:	e0bff517 	ldw	r2,-44(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
 880e5f0:	e0bff715 	stw	r2,-36(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 880e5f4:	e0bffb17 	ldw	r2,-20(fp)
 880e5f8:	10800817 	ldw	r2,32(r2)
 880e5fc:	10c00094 	ori	r3,r2,2
 880e600:	e0bffb17 	ldw	r2,-20(fp)
 880e604:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 880e608:	e0bffb17 	ldw	r2,-20(fp)
 880e60c:	10800017 	ldw	r2,0(r2)
 880e610:	11000104 	addi	r4,r2,4
 880e614:	e0bffb17 	ldw	r2,-20(fp)
 880e618:	10800817 	ldw	r2,32(r2)
 880e61c:	1007883a 	mov	r3,r2
 880e620:	2005883a 	mov	r2,r4
 880e624:	10c00035 	stwio	r3,0(r2)
 880e628:	e0bff717 	ldw	r2,-36(fp)
 880e62c:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 880e630:	e0bff417 	ldw	r2,-48(fp)
 880e634:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
 880e638:	e0bffd17 	ldw	r2,-12(fp)
 880e63c:	10800050 	cmplti	r2,r2,1
 880e640:	1000111e 	bne	r2,zero,880e688 <altera_avalon_jtag_uart_write+0x1d8>
    {
      if (flags & O_NONBLOCK)
 880e644:	e0bffe17 	ldw	r2,-8(fp)
 880e648:	1090000c 	andi	r2,r2,16384
 880e64c:	1004c03a 	cmpne	r2,r2,zero
 880e650:	1000101e 	bne	r2,zero,880e694 <altera_avalon_jtag_uart_write+0x1e4>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
 880e654:	e0bffb17 	ldw	r2,-20(fp)
 880e658:	10c00d17 	ldw	r3,52(r2)
 880e65c:	e0bff917 	ldw	r2,-28(fp)
 880e660:	1880051e 	bne	r3,r2,880e678 <altera_avalon_jtag_uart_write+0x1c8>
 880e664:	e0bffb17 	ldw	r2,-20(fp)
 880e668:	10c00917 	ldw	r3,36(r2)
 880e66c:	e0bffb17 	ldw	r2,-20(fp)
 880e670:	10800117 	ldw	r2,4(r2)
 880e674:	18bff736 	bltu	r3,r2,880e654 <altera_avalon_jtag_uart_write+0x1a4>
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
 880e678:	e0bffb17 	ldw	r2,-20(fp)
 880e67c:	10c00d17 	ldw	r3,52(r2)
 880e680:	e0bff917 	ldw	r2,-28(fp)
 880e684:	18800326 	beq	r3,r2,880e694 <altera_avalon_jtag_uart_write+0x1e4>
        break;
    }
  }
  while (count > 0);
 880e688:	e0bffd17 	ldw	r2,-12(fp)
 880e68c:	10800048 	cmpgei	r2,r2,1
 880e690:	103fcd1e 	bne	r2,zero,880e5c8 <altera_avalon_jtag_uart_write+0x118>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
 880e694:	e0fffc17 	ldw	r3,-16(fp)
 880e698:	e0bff617 	ldw	r2,-40(fp)
 880e69c:	18800526 	beq	r3,r2,880e6b4 <altera_avalon_jtag_uart_write+0x204>
    return ptr - start;
 880e6a0:	e0fffc17 	ldw	r3,-16(fp)
 880e6a4:	e0bff617 	ldw	r2,-40(fp)
 880e6a8:	1887c83a 	sub	r3,r3,r2
 880e6ac:	e0ffff15 	stw	r3,-4(fp)
 880e6b0:	00000906 	br	880e6d8 <altera_avalon_jtag_uart_write+0x228>
  else if (flags & O_NONBLOCK)
 880e6b4:	e0bffe17 	ldw	r2,-8(fp)
 880e6b8:	1090000c 	andi	r2,r2,16384
 880e6bc:	1005003a 	cmpeq	r2,r2,zero
 880e6c0:	1000031e 	bne	r2,zero,880e6d0 <altera_avalon_jtag_uart_write+0x220>
    return -EWOULDBLOCK;
 880e6c4:	00bffd44 	movi	r2,-11
 880e6c8:	e0bfff15 	stw	r2,-4(fp)
 880e6cc:	00000206 	br	880e6d8 <altera_avalon_jtag_uart_write+0x228>
  else
    return -EIO; /* Host not connected */
 880e6d0:	00bffec4 	movi	r2,-5
 880e6d4:	e0bfff15 	stw	r2,-4(fp)
 880e6d8:	e0bfff17 	ldw	r2,-4(fp)
}
 880e6dc:	e037883a 	mov	sp,fp
 880e6e0:	dfc00117 	ldw	ra,4(sp)
 880e6e4:	df000017 	ldw	fp,0(sp)
 880e6e8:	dec00204 	addi	sp,sp,8
 880e6ec:	f800283a 	ret

0880e6f0 <alt_avalon_mailbox_init>:

/*
 * Register a Mutex device
 */
int alt_avalon_mailbox_init (alt_mailbox_dev* dev)
{
 880e6f0:	defffa04 	addi	sp,sp,-24
 880e6f4:	dfc00515 	stw	ra,20(sp)
 880e6f8:	df000415 	stw	fp,16(sp)
 880e6fc:	df000404 	addi	fp,sp,16
 880e700:	e13fff15 	stw	r4,-4(fp)
  int ret_code;
  alt_mutex_dev* write_mutex, *read_mutex;
  extern alt_llist alt_mailbox_list;

  ret_code = alt_avalon_mutex_reg( &dev->write_mutex );
 880e704:	e0bfff17 	ldw	r2,-4(fp)
 880e708:	11000704 	addi	r4,r2,28
 880e70c:	880e8480 	call	880e848 <alt_avalon_mutex_reg>
 880e710:	e0bffe15 	stw	r2,-8(fp)

  if (!ret_code)
 880e714:	e0bffe17 	ldw	r2,-8(fp)
 880e718:	1004c03a 	cmpne	r2,r2,zero
 880e71c:	1000041e 	bne	r2,zero,880e730 <alt_avalon_mailbox_init+0x40>
  {
    ret_code = alt_avalon_mutex_reg( &dev->read_mutex );
 880e720:	e0bfff17 	ldw	r2,-4(fp)
 880e724:	11000b04 	addi	r4,r2,44
 880e728:	880e8480 	call	880e848 <alt_avalon_mutex_reg>
 880e72c:	e0bffe15 	stw	r2,-8(fp)
  }

  if (!ret_code)
 880e730:	e0bffe17 	ldw	r2,-8(fp)
 880e734:	1004c03a 	cmpne	r2,r2,zero
 880e738:	1000041e 	bne	r2,zero,880e74c <alt_avalon_mailbox_init+0x5c>
  {
    ret_code = alt_dev_llist_insert((alt_dev_llist*) dev, &alt_mailbox_list);
 880e73c:	e13fff17 	ldw	r4,-4(fp)
 880e740:	d1601104 	addi	r5,gp,-32700
 880e744:	88106200 	call	8810620 <alt_dev_llist_insert>
 880e748:	e0bffe15 	stw	r2,-8(fp)
  }

  if (!ret_code)
 880e74c:	e0bffe17 	ldw	r2,-8(fp)
 880e750:	1004c03a 	cmpne	r2,r2,zero
 880e754:	1000361e 	bne	r2,zero,880e830 <alt_avalon_mailbox_init+0x140>
  {
    write_mutex = altera_avalon_mutex_open(dev->write_mutex.name);
 880e758:	e0bfff17 	ldw	r2,-4(fp)
 880e75c:	11000917 	ldw	r4,36(r2)
 880e760:	880ec940 	call	880ec94 <altera_avalon_mutex_open>
 880e764:	e0bffd15 	stw	r2,-12(fp)
    if (write_mutex)
 880e768:	e0bffd17 	ldw	r2,-12(fp)
 880e76c:	1005003a 	cmpeq	r2,r2,zero
 880e770:	10002f1e 	bne	r2,zero,880e830 <alt_avalon_mailbox_init+0x140>
    {
      read_mutex = altera_avalon_mutex_open(dev->read_mutex.name);
 880e774:	e0bfff17 	ldw	r2,-4(fp)
 880e778:	11000d17 	ldw	r4,52(r2)
 880e77c:	880ec940 	call	880ec94 <altera_avalon_mutex_open>
 880e780:	e0bffc15 	stw	r2,-16(fp)
      if (read_mutex)
 880e784:	e0bffc17 	ldw	r2,-16(fp)
 880e788:	1005003a 	cmpeq	r2,r2,zero
 880e78c:	1000281e 	bne	r2,zero,880e830 <alt_avalon_mailbox_init+0x140>
      {
        while (altera_avalon_mutex_first_lock(write_mutex))
 880e790:	00000f06 	br	880e7d0 <alt_avalon_mailbox_init+0xe0>
        {
          if (!altera_avalon_mutex_trylock(write_mutex, 1))
 880e794:	e13ffd17 	ldw	r4,-12(fp)
 880e798:	01400044 	movi	r5,1
 880e79c:	880edac0 	call	880edac <altera_avalon_mutex_trylock>
 880e7a0:	1004c03a 	cmpne	r2,r2,zero
 880e7a4:	10000a1e 	bne	r2,zero,880e7d0 <alt_avalon_mailbox_init+0xe0>
          {
            IOWR((alt_u32)(dev->write_ptr), 0,
 880e7a8:	e0bfff17 	ldw	r2,-4(fp)
 880e7ac:	10800317 	ldw	r2,12(r2)
 880e7b0:	1009883a 	mov	r4,r2
 880e7b4:	e0bfff17 	ldw	r2,-4(fp)
 880e7b8:	10800517 	ldw	r2,20(r2)
 880e7bc:	1007883a 	mov	r3,r2
 880e7c0:	2005883a 	mov	r2,r4
 880e7c4:	10c00035 	stwio	r3,0(r2)
              (alt_u32) dev->mailbox_mem_start_ptr);
            altera_avalon_mutex_unlock(write_mutex);
 880e7c8:	e13ffd17 	ldw	r4,-12(fp)
 880e7cc:	880edec0 	call	880edec <altera_avalon_mutex_unlock>
    if (write_mutex)
    {
      read_mutex = altera_avalon_mutex_open(dev->read_mutex.name);
      if (read_mutex)
      {
        while (altera_avalon_mutex_first_lock(write_mutex))
 880e7d0:	e13ffd17 	ldw	r4,-12(fp)
 880e7d4:	880eec40 	call	880eec4 <altera_avalon_mutex_first_lock>
 880e7d8:	1004c03a 	cmpne	r2,r2,zero
 880e7dc:	103fed1e 	bne	r2,zero,880e794 <alt_avalon_mailbox_init+0xa4>
              (alt_u32) dev->mailbox_mem_start_ptr);
            altera_avalon_mutex_unlock(write_mutex);
          }
        }

        while (altera_avalon_mutex_first_lock(read_mutex))
 880e7e0:	00000f06 	br	880e820 <alt_avalon_mailbox_init+0x130>
        {
          if (!altera_avalon_mutex_trylock(read_mutex, 1))
 880e7e4:	e13ffc17 	ldw	r4,-16(fp)
 880e7e8:	01400044 	movi	r5,1
 880e7ec:	880edac0 	call	880edac <altera_avalon_mutex_trylock>
 880e7f0:	1004c03a 	cmpne	r2,r2,zero
 880e7f4:	10000a1e 	bne	r2,zero,880e820 <alt_avalon_mailbox_init+0x130>
          {
            IOWR((alt_u32)(dev->read_ptr), 0,
 880e7f8:	e0bfff17 	ldw	r2,-4(fp)
 880e7fc:	10800417 	ldw	r2,16(r2)
 880e800:	1009883a 	mov	r4,r2
 880e804:	e0bfff17 	ldw	r2,-4(fp)
 880e808:	10800517 	ldw	r2,20(r2)
 880e80c:	1007883a 	mov	r3,r2
 880e810:	2005883a 	mov	r2,r4
 880e814:	10c00035 	stwio	r3,0(r2)
              (alt_u32) dev->mailbox_mem_start_ptr);
            altera_avalon_mutex_unlock(read_mutex);
 880e818:	e13ffc17 	ldw	r4,-16(fp)
 880e81c:	880edec0 	call	880edec <altera_avalon_mutex_unlock>
              (alt_u32) dev->mailbox_mem_start_ptr);
            altera_avalon_mutex_unlock(write_mutex);
          }
        }

        while (altera_avalon_mutex_first_lock(read_mutex))
 880e820:	e13ffc17 	ldw	r4,-16(fp)
 880e824:	880eec40 	call	880eec4 <altera_avalon_mutex_first_lock>
 880e828:	1004c03a 	cmpne	r2,r2,zero
 880e82c:	103fed1e 	bne	r2,zero,880e7e4 <alt_avalon_mailbox_init+0xf4>
          }
        }
      }
    }
  }
  return ret_code;
 880e830:	e0bffe17 	ldw	r2,-8(fp)
}
 880e834:	e037883a 	mov	sp,fp
 880e838:	dfc00117 	ldw	ra,4(sp)
 880e83c:	df000017 	ldw	fp,0(sp)
 880e840:	dec00204 	addi	sp,sp,8
 880e844:	f800283a 	ret

0880e848 <alt_avalon_mutex_reg>:
/*
 * Register a Mutex device
 */

static ALT_INLINE int alt_avalon_mutex_reg (alt_mutex_dev* dev)
{
 880e848:	defffc04 	addi	sp,sp,-16
 880e84c:	dfc00315 	stw	ra,12(sp)
 880e850:	df000215 	stw	fp,8(sp)
 880e854:	df000204 	addi	fp,sp,8
 880e858:	e13fff15 	stw	r4,-4(fp)
 * HAL.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_no_error (void)
{
  return 0;
 880e85c:	0005883a 	mov	r2,zero
  int ret_code;
  extern alt_llist alt_mutex_list;
  ret_code = ALT_SEM_CREATE (&dev->lock, 1);
 880e860:	e0bffe15 	stw	r2,-8(fp)
  if (!ret_code)
 880e864:	e0bffe17 	ldw	r2,-8(fp)
 880e868:	1004c03a 	cmpne	r2,r2,zero
 880e86c:	1000061e 	bne	r2,zero,880e888 <alt_avalon_mutex_reg+0x40>
  {
    ret_code = alt_dev_llist_insert((alt_dev_llist*) dev, &alt_mutex_list);
 880e870:	e13fff17 	ldw	r4,-4(fp)
 880e874:	01422074 	movhi	r5,2177
 880e878:	294e6104 	addi	r5,r5,14724
 880e87c:	88106200 	call	8810620 <alt_dev_llist_insert>
 880e880:	e0bffe15 	stw	r2,-8(fp)
 880e884:	00000506 	br	880e89c <alt_avalon_mutex_reg+0x54>
  }
  else
  {
    ALT_ERRNO = ENOMEM;
 880e888:	880e8b40 	call	880e8b4 <alt_get_errno>
 880e88c:	00c00304 	movi	r3,12
 880e890:	10c00015 	stw	r3,0(r2)
    ret_code = -ENOMEM;
 880e894:	00bffd04 	movi	r2,-12
 880e898:	e0bffe15 	stw	r2,-8(fp)
  }

  return ret_code;
 880e89c:	e0bffe17 	ldw	r2,-8(fp)
}
 880e8a0:	e037883a 	mov	sp,fp
 880e8a4:	dfc00117 	ldw	ra,4(sp)
 880e8a8:	df000017 	ldw	fp,0(sp)
 880e8ac:	dec00204 	addi	sp,sp,8
 880e8b0:	f800283a 	ret

0880e8b4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 880e8b4:	defffd04 	addi	sp,sp,-12
 880e8b8:	dfc00215 	stw	ra,8(sp)
 880e8bc:	df000115 	stw	fp,4(sp)
 880e8c0:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 880e8c4:	00822074 	movhi	r2,2177
 880e8c8:	108e5d04 	addi	r2,r2,14708
 880e8cc:	10800017 	ldw	r2,0(r2)
 880e8d0:	1005003a 	cmpeq	r2,r2,zero
 880e8d4:	1000061e 	bne	r2,zero,880e8f0 <alt_get_errno+0x3c>
 880e8d8:	00822074 	movhi	r2,2177
 880e8dc:	108e5d04 	addi	r2,r2,14708
 880e8e0:	10800017 	ldw	r2,0(r2)
 880e8e4:	103ee83a 	callr	r2
 880e8e8:	e0bfff15 	stw	r2,-4(fp)
 880e8ec:	00000306 	br	880e8fc <alt_get_errno+0x48>
 880e8f0:	00822074 	movhi	r2,2177
 880e8f4:	10956404 	addi	r2,r2,21904
 880e8f8:	e0bfff15 	stw	r2,-4(fp)
 880e8fc:	e0bfff17 	ldw	r2,-4(fp)
}
 880e900:	e037883a 	mov	sp,fp
 880e904:	dfc00117 	ldw	ra,4(sp)
 880e908:	df000017 	ldw	fp,0(sp)
 880e90c:	dec00204 	addi	sp,sp,8
 880e910:	f800283a 	ret

0880e914 <altera_avalon_mailbox_open>:
 * Search the list of registered mailboxes for one with the supplied name.
 *
 * The return value will be NULL on failure, and non-NULL otherwise.
 */
alt_mailbox_dev* altera_avalon_mailbox_open (const char* name)
{
 880e914:	defffc04 	addi	sp,sp,-16
 880e918:	dfc00315 	stw	ra,12(sp)
 880e91c:	df000215 	stw	fp,8(sp)
 880e920:	df000204 	addi	fp,sp,8
 880e924:	e13fff15 	stw	r4,-4(fp)
  alt_mailbox_dev* dev;

  dev = (alt_mailbox_dev*) alt_find_dev (name, &alt_mailbox_list);
 880e928:	e13fff17 	ldw	r4,-4(fp)
 880e92c:	d1601104 	addi	r5,gp,-32700
 880e930:	88107fc0 	call	88107fc <alt_find_dev>
 880e934:	e0bffe15 	stw	r2,-8(fp)

  if (NULL == dev)
 880e938:	e0bffe17 	ldw	r2,-8(fp)
 880e93c:	1004c03a 	cmpne	r2,r2,zero
 880e940:	1000041e 	bne	r2,zero,880e954 <altera_avalon_mailbox_open+0x40>
  {
    ALT_ERRNO = ENODEV;
 880e944:	880e8b40 	call	880e8b4 <alt_get_errno>
 880e948:	1007883a 	mov	r3,r2
 880e94c:	008004c4 	movi	r2,19
 880e950:	18800015 	stw	r2,0(r3)
  }

  return dev;
 880e954:	e0bffe17 	ldw	r2,-8(fp)

}
 880e958:	e037883a 	mov	sp,fp
 880e95c:	dfc00117 	ldw	ra,4(sp)
 880e960:	df000017 	ldw	fp,0(sp)
 880e964:	dec00204 	addi	sp,sp,8
 880e968:	f800283a 	ret

0880e96c <altera_avalon_mailbox_close>:
 * altera_avalon_mailbox_close - Does nothing at the moment, but included for 
 * completeness
 *
 */
void altera_avalon_mailbox_close (alt_mailbox_dev* dev)
{
 880e96c:	defffe04 	addi	sp,sp,-8
 880e970:	df000115 	stw	fp,4(sp)
 880e974:	df000104 	addi	fp,sp,4
 880e978:	e13fff15 	stw	r4,-4(fp)
  return;
}
 880e97c:	e037883a 	mov	sp,fp
 880e980:	df000017 	ldw	fp,0(sp)
 880e984:	dec00104 	addi	sp,sp,4
 880e988:	f800283a 	ret

0880e98c <altera_avalon_mailbox_post>:
 * 
 * Post a message to the mailbox
 *
 */
int altera_avalon_mailbox_post (alt_mailbox_dev* dev, alt_u32 msg)
{
 880e98c:	defff904 	addi	sp,sp,-28
 880e990:	dfc00615 	stw	ra,24(sp)
 880e994:	df000515 	stw	fp,20(sp)
 880e998:	df000504 	addi	fp,sp,20
 880e99c:	e13ffe15 	stw	r4,-8(fp)
 880e9a0:	e17fff15 	stw	r5,-4(fp)
  int ret_code = 0;
 880e9a4:	e03ffd15 	stw	zero,-12(fp)
  *   Claim the Mutex on the write pointer 
  *
  *   The mutex function takes care of the thread sempahore if running
  *   in a multi-threaded environment
  */
  altera_avalon_mutex_lock( &dev->write_mutex, 1 );
 880e9a8:	e0bffe17 	ldw	r2,-8(fp)
 880e9ac:	11000704 	addi	r4,r2,28
 880e9b0:	01400044 	movi	r5,1
 880e9b4:	880ed6c0 	call	880ed6c <altera_avalon_mutex_lock>

  temp = (alt_u32 *) IORD(dev->write_ptr, 0);
 880e9b8:	e0bffe17 	ldw	r2,-8(fp)
 880e9bc:	10800317 	ldw	r2,12(r2)
 880e9c0:	10800037 	ldwio	r2,0(r2)
 880e9c4:	e0bffc15 	stw	r2,-16(fp)
  next_write = alt_mailbox_increment_ptr(dev, temp);
 880e9c8:	e13ffe17 	ldw	r4,-8(fp)
 880e9cc:	e17ffc17 	ldw	r5,-16(fp)
 880e9d0:	880ea480 	call	880ea48 <alt_mailbox_increment_ptr>
 880e9d4:	e0bffb15 	stw	r2,-20(fp)

  if (next_write == ((alt_u32 *)IORD(dev->read_ptr, 0)) )
 880e9d8:	e0bffe17 	ldw	r2,-8(fp)
 880e9dc:	10800417 	ldw	r2,16(r2)
 880e9e0:	10800037 	ldwio	r2,0(r2)
 880e9e4:	1007883a 	mov	r3,r2
 880e9e8:	e0bffb17 	ldw	r2,-20(fp)
 880e9ec:	1880061e 	bne	r3,r2,880ea08 <altera_avalon_mailbox_post+0x7c>
  {
    ALT_ERRNO = EWOULDBLOCK;
 880e9f0:	880e8b40 	call	880e8b4 <alt_get_errno>
 880e9f4:	00c002c4 	movi	r3,11
 880e9f8:	10c00015 	stw	r3,0(r2)
    ret_code = -EWOULDBLOCK;
 880e9fc:	00bffd44 	movi	r2,-11
 880ea00:	e0bffd15 	stw	r2,-12(fp)
 880ea04:	00000706 	br	880ea24 <altera_avalon_mailbox_post+0x98>
  }
  else
  {
    IOWR(temp, 0, msg);
 880ea08:	e0bffc17 	ldw	r2,-16(fp)
 880ea0c:	e0ffff17 	ldw	r3,-4(fp)
 880ea10:	10c00035 	stwio	r3,0(r2)
    IOWR((alt_u32)(dev->write_ptr), 0, (alt_u32)next_write);
 880ea14:	e0bffe17 	ldw	r2,-8(fp)
 880ea18:	10800317 	ldw	r2,12(r2)
 880ea1c:	e0fffb17 	ldw	r3,-20(fp)
 880ea20:	10c00035 	stwio	r3,0(r2)
  }

  altera_avalon_mutex_unlock( &dev->write_mutex );
 880ea24:	e0bffe17 	ldw	r2,-8(fp)
 880ea28:	11000704 	addi	r4,r2,28
 880ea2c:	880edec0 	call	880edec <altera_avalon_mutex_unlock>

  return ret_code;
 880ea30:	e0bffd17 	ldw	r2,-12(fp)

}
 880ea34:	e037883a 	mov	sp,fp
 880ea38:	dfc00117 	ldw	ra,4(sp)
 880ea3c:	df000017 	ldw	fp,0(sp)
 880ea40:	dec00204 	addi	sp,sp,8
 880ea44:	f800283a 	ret

0880ea48 <alt_mailbox_increment_ptr>:
 *
 * Increment one of the pointers and if that would take it beyond the end
 * of the shared memory put it at the start
 */
static inline alt_u32* alt_mailbox_increment_ptr(alt_mailbox_dev* dev, alt_u32* ptr)
{
 880ea48:	defffd04 	addi	sp,sp,-12
 880ea4c:	df000215 	stw	fp,8(sp)
 880ea50:	df000204 	addi	fp,sp,8
 880ea54:	e13ffe15 	stw	r4,-8(fp)
 880ea58:	e17fff15 	stw	r5,-4(fp)
  ptr += 1;
 880ea5c:	e0bfff17 	ldw	r2,-4(fp)
 880ea60:	10800104 	addi	r2,r2,4
 880ea64:	e0bfff15 	stw	r2,-4(fp)

  if (ptr > dev->mailbox_mem_end_ptr)
 880ea68:	e0bffe17 	ldw	r2,-8(fp)
 880ea6c:	10c00617 	ldw	r3,24(r2)
 880ea70:	e0bfff17 	ldw	r2,-4(fp)
 880ea74:	1880032e 	bgeu	r3,r2,880ea84 <alt_mailbox_increment_ptr+0x3c>
  {
    ptr = dev->mailbox_mem_start_ptr;
 880ea78:	e0bffe17 	ldw	r2,-8(fp)
 880ea7c:	10800517 	ldw	r2,20(r2)
 880ea80:	e0bfff15 	stw	r2,-4(fp)
  }

  return ptr;
 880ea84:	e0bfff17 	ldw	r2,-4(fp)
}
 880ea88:	e037883a 	mov	sp,fp
 880ea8c:	df000017 	ldw	fp,0(sp)
 880ea90:	dec00104 	addi	sp,sp,4
 880ea94:	f800283a 	ret

0880ea98 <altera_avalon_mailbox_pend>:
 * 
 * Block until a message is available in the mailbox
 *
 */
alt_u32 altera_avalon_mailbox_pend (alt_mailbox_dev* dev)
{
 880ea98:	defffa04 	addi	sp,sp,-24
 880ea9c:	dfc00515 	stw	ra,20(sp)
 880eaa0:	df000415 	stw	fp,16(sp)
 880eaa4:	dc000315 	stw	r16,12(sp)
 880eaa8:	df000304 	addi	fp,sp,12
 880eaac:	e13fff15 	stw	r4,-4(fp)
  *   Claim the Mutex on the read pointer
  *
  *   The mutex function takes care of the thread sempahore if running
  *   in a multi-threaded environment
  */
  altera_avalon_mutex_lock( &dev->read_mutex, 1 );
 880eab0:	e0bfff17 	ldw	r2,-4(fp)
 880eab4:	11000b04 	addi	r4,r2,44
 880eab8:	01400044 	movi	r5,1
 880eabc:	880ed6c0 	call	880ed6c <altera_avalon_mutex_lock>

  temp = (alt_u32 *)IORD(dev->read_ptr, 0);
 880eac0:	e0bfff17 	ldw	r2,-4(fp)
 880eac4:	10800417 	ldw	r2,16(r2)
 880eac8:	10800037 	ldwio	r2,0(r2)
 880eacc:	e0bffd15 	stw	r2,-12(fp)

  while ( (alt_u32 *)(IORD(dev->write_ptr, 0)) == temp );
 880ead0:	e0bfff17 	ldw	r2,-4(fp)
 880ead4:	10800317 	ldw	r2,12(r2)
 880ead8:	10800037 	ldwio	r2,0(r2)
 880eadc:	1007883a 	mov	r3,r2
 880eae0:	e0bffd17 	ldw	r2,-12(fp)
 880eae4:	18bffa26 	beq	r3,r2,880ead0 <altera_avalon_mailbox_pend+0x38>

  msg = IORD(temp, 0);
 880eae8:	e0bffd17 	ldw	r2,-12(fp)
 880eaec:	10800037 	ldwio	r2,0(r2)
 880eaf0:	e0bffe15 	stw	r2,-8(fp)

  IOWR( (alt_u32)(dev->read_ptr), 0,
 880eaf4:	e0bfff17 	ldw	r2,-4(fp)
 880eaf8:	10800417 	ldw	r2,16(r2)
 880eafc:	1021883a 	mov	r16,r2
 880eb00:	e13fff17 	ldw	r4,-4(fp)
 880eb04:	e17ffd17 	ldw	r5,-12(fp)
 880eb08:	880ea480 	call	880ea48 <alt_mailbox_increment_ptr>
 880eb0c:	1007883a 	mov	r3,r2
 880eb10:	8005883a 	mov	r2,r16
 880eb14:	10c00035 	stwio	r3,0(r2)
    (alt_u32)(alt_mailbox_increment_ptr(dev, temp)) );

  altera_avalon_mutex_unlock( &dev->read_mutex );
 880eb18:	e0bfff17 	ldw	r2,-4(fp)
 880eb1c:	11000b04 	addi	r4,r2,44
 880eb20:	880edec0 	call	880edec <altera_avalon_mutex_unlock>

  return msg;
 880eb24:	e0bffe17 	ldw	r2,-8(fp)

}
 880eb28:	e037883a 	mov	sp,fp
 880eb2c:	dfc00217 	ldw	ra,8(sp)
 880eb30:	df000117 	ldw	fp,4(sp)
 880eb34:	dc000017 	ldw	r16,0(sp)
 880eb38:	dec00304 	addi	sp,sp,12
 880eb3c:	f800283a 	ret

0880eb40 <altera_avalon_mailbox_get>:
 * If a message is available in the mailbox return it otherwise return NULL
 * i.e. this is Non-Blocking
 *
 */
alt_u32 altera_avalon_mailbox_get (alt_mailbox_dev* dev, int* err)
{
 880eb40:	defff904 	addi	sp,sp,-28
 880eb44:	dfc00615 	stw	ra,24(sp)
 880eb48:	df000515 	stw	fp,20(sp)
 880eb4c:	dc000415 	stw	r16,16(sp)
 880eb50:	df000404 	addi	fp,sp,16
 880eb54:	e13ffe15 	stw	r4,-8(fp)
 880eb58:	e17fff15 	stw	r5,-4(fp)
  alt_u32 msg;
  alt_u32* temp;
  *err = 0;
 880eb5c:	e0bfff17 	ldw	r2,-4(fp)
 880eb60:	10000015 	stw	zero,0(r2)
  *   Claim the Mutex on the read pointer 
  *
  *   The mutex function takes care of the thread sempahore if running
  *   in a multi-threaded environment
  */
  altera_avalon_mutex_lock( &dev->read_mutex, 1 );
 880eb64:	e0bffe17 	ldw	r2,-8(fp)
 880eb68:	11000b04 	addi	r4,r2,44
 880eb6c:	01400044 	movi	r5,1
 880eb70:	880ed6c0 	call	880ed6c <altera_avalon_mutex_lock>

  temp = (alt_u32 *)IORD(dev->read_ptr, 0);
 880eb74:	e0bffe17 	ldw	r2,-8(fp)
 880eb78:	10800417 	ldw	r2,16(r2)
 880eb7c:	10800037 	ldwio	r2,0(r2)
 880eb80:	e0bffc15 	stw	r2,-16(fp)

  if ( (alt_u32 *)(IORD(dev->write_ptr, 0)) == temp )
 880eb84:	e0bffe17 	ldw	r2,-8(fp)
 880eb88:	10800317 	ldw	r2,12(r2)
 880eb8c:	10800037 	ldwio	r2,0(r2)
 880eb90:	1007883a 	mov	r3,r2
 880eb94:	e0bffc17 	ldw	r2,-16(fp)
 880eb98:	1880091e 	bne	r3,r2,880ebc0 <altera_avalon_mailbox_get+0x80>
  {
    *err = -EWOULDBLOCK;
 880eb9c:	e0ffff17 	ldw	r3,-4(fp)
 880eba0:	00bffd44 	movi	r2,-11
 880eba4:	18800015 	stw	r2,0(r3)
    ALT_ERRNO = EWOULDBLOCK;
 880eba8:	880e8b40 	call	880e8b4 <alt_get_errno>
 880ebac:	1007883a 	mov	r3,r2
 880ebb0:	008002c4 	movi	r2,11
 880ebb4:	18800015 	stw	r2,0(r3)
    msg = 0;
 880ebb8:	e03ffd15 	stw	zero,-12(fp)
 880ebbc:	00000c06 	br	880ebf0 <altera_avalon_mailbox_get+0xb0>
  }
  else
  {
    msg = IORD(temp, 0);
 880ebc0:	e0bffc17 	ldw	r2,-16(fp)
 880ebc4:	10800037 	ldwio	r2,0(r2)
 880ebc8:	e0bffd15 	stw	r2,-12(fp)
    IOWR(dev->read_ptr, 0,
 880ebcc:	e0bffe17 	ldw	r2,-8(fp)
 880ebd0:	10800417 	ldw	r2,16(r2)
 880ebd4:	1021883a 	mov	r16,r2
 880ebd8:	e13ffe17 	ldw	r4,-8(fp)
 880ebdc:	e17ffc17 	ldw	r5,-16(fp)
 880ebe0:	880ea480 	call	880ea48 <alt_mailbox_increment_ptr>
 880ebe4:	1007883a 	mov	r3,r2
 880ebe8:	8005883a 	mov	r2,r16
 880ebec:	10c00035 	stwio	r3,0(r2)
      (alt_u32)(alt_mailbox_increment_ptr(dev, temp)) );
  }

  altera_avalon_mutex_unlock( &dev->read_mutex );
 880ebf0:	e0bffe17 	ldw	r2,-8(fp)
 880ebf4:	11000b04 	addi	r4,r2,44
 880ebf8:	880edec0 	call	880edec <altera_avalon_mutex_unlock>

  return msg;
 880ebfc:	e0bffd17 	ldw	r2,-12(fp)

}
 880ec00:	e037883a 	mov	sp,fp
 880ec04:	dfc00217 	ldw	ra,8(sp)
 880ec08:	df000117 	ldw	fp,4(sp)
 880ec0c:	dc000017 	ldw	r16,0(sp)
 880ec10:	dec00304 	addi	sp,sp,12
 880ec14:	f800283a 	ret

0880ec18 <alt_mutex_trylock>:
 *
 * returns 0 on success -1 otherwise
 *
 */
static int alt_mutex_trylock( alt_mutex_dev* dev, alt_u32 value )
{
 880ec18:	defff904 	addi	sp,sp,-28
 880ec1c:	df000615 	stw	fp,24(sp)
 880ec20:	df000604 	addi	fp,sp,24
 880ec24:	e13ffe15 	stw	r4,-8(fp)
 880ec28:	e17fff15 	stw	r5,-4(fp)
  alt_u32 id, data, check;
  int ret_code = -1;
 880ec2c:	00bfffc4 	movi	r2,-1
 880ec30:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_READ_CPUID(id);
 880ec34:	0005317a 	rdctl	r2,cpuid
 880ec38:	e0bffd15 	stw	r2,-12(fp)

  /* the data we want the mutex to hold */
  data = (id << ALTERA_AVALON_MUTEX_MUTEX_OWNER_OFST) | value;
 880ec3c:	e0bffd17 	ldw	r2,-12(fp)
 880ec40:	1006943a 	slli	r3,r2,16
 880ec44:	e0bfff17 	ldw	r2,-4(fp)
 880ec48:	1884b03a 	or	r2,r3,r2
 880ec4c:	e0bffc15 	stw	r2,-16(fp)

  /* attempt to write to the mutex */
  IOWR_ALTERA_AVALON_MUTEX_MUTEX(dev->mutex_base, data);
 880ec50:	e0bffe17 	ldw	r2,-8(fp)
 880ec54:	10800317 	ldw	r2,12(r2)
 880ec58:	e0fffc17 	ldw	r3,-16(fp)
 880ec5c:	10c00035 	stwio	r3,0(r2)
  
  check = IORD_ALTERA_AVALON_MUTEX_MUTEX(dev->mutex_base);
 880ec60:	e0bffe17 	ldw	r2,-8(fp)
 880ec64:	10800317 	ldw	r2,12(r2)
 880ec68:	10800037 	ldwio	r2,0(r2)
 880ec6c:	e0bffb15 	stw	r2,-20(fp)

  if ( check == data)
 880ec70:	e0fffb17 	ldw	r3,-20(fp)
 880ec74:	e0bffc17 	ldw	r2,-16(fp)
 880ec78:	1880011e 	bne	r3,r2,880ec80 <alt_mutex_trylock+0x68>
  {
    ret_code = 0;
 880ec7c:	e03ffa15 	stw	zero,-24(fp)
  }

  return ret_code;
 880ec80:	e0bffa17 	ldw	r2,-24(fp)
}
 880ec84:	e037883a 	mov	sp,fp
 880ec88:	df000017 	ldw	fp,0(sp)
 880ec8c:	dec00104 	addi	sp,sp,4
 880ec90:	f800283a 	ret

0880ec94 <altera_avalon_mutex_open>:
 * Search the list of registered mutexes for one with the supplied name.
 *
 * The return value will be NULL on failure, and non-NULL otherwise.
 */
alt_mutex_dev* altera_avalon_mutex_open (const char* name)
{
 880ec94:	defffc04 	addi	sp,sp,-16
 880ec98:	dfc00315 	stw	ra,12(sp)
 880ec9c:	df000215 	stw	fp,8(sp)
 880eca0:	df000204 	addi	fp,sp,8
 880eca4:	e13fff15 	stw	r4,-4(fp)
  alt_mutex_dev* dev;

  dev = (alt_mutex_dev*) alt_find_dev (name, &alt_mutex_list);
 880eca8:	e13fff17 	ldw	r4,-4(fp)
 880ecac:	d1601304 	addi	r5,gp,-32692
 880ecb0:	88107fc0 	call	88107fc <alt_find_dev>
 880ecb4:	e0bffe15 	stw	r2,-8(fp)

  if (NULL == dev)
 880ecb8:	e0bffe17 	ldw	r2,-8(fp)
 880ecbc:	1004c03a 	cmpne	r2,r2,zero
 880ecc0:	1000041e 	bne	r2,zero,880ecd4 <altera_avalon_mutex_open+0x40>
  {
    ALT_ERRNO = ENODEV;
 880ecc4:	880ecec0 	call	880ecec <alt_get_errno>
 880ecc8:	1007883a 	mov	r3,r2
 880eccc:	008004c4 	movi	r2,19
 880ecd0:	18800015 	stw	r2,0(r3)
  }

  return dev;
 880ecd4:	e0bffe17 	ldw	r2,-8(fp)
}
 880ecd8:	e037883a 	mov	sp,fp
 880ecdc:	dfc00117 	ldw	ra,4(sp)
 880ece0:	df000017 	ldw	fp,0(sp)
 880ece4:	dec00204 	addi	sp,sp,8
 880ece8:	f800283a 	ret

0880ecec <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 880ecec:	defffd04 	addi	sp,sp,-12
 880ecf0:	dfc00215 	stw	ra,8(sp)
 880ecf4:	df000115 	stw	fp,4(sp)
 880ecf8:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 880ecfc:	00822074 	movhi	r2,2177
 880ed00:	108e5d04 	addi	r2,r2,14708
 880ed04:	10800017 	ldw	r2,0(r2)
 880ed08:	1005003a 	cmpeq	r2,r2,zero
 880ed0c:	1000061e 	bne	r2,zero,880ed28 <alt_get_errno+0x3c>
 880ed10:	00822074 	movhi	r2,2177
 880ed14:	108e5d04 	addi	r2,r2,14708
 880ed18:	10800017 	ldw	r2,0(r2)
 880ed1c:	103ee83a 	callr	r2
 880ed20:	e0bfff15 	stw	r2,-4(fp)
 880ed24:	00000306 	br	880ed34 <alt_get_errno+0x48>
 880ed28:	00822074 	movhi	r2,2177
 880ed2c:	10956404 	addi	r2,r2,21904
 880ed30:	e0bfff15 	stw	r2,-4(fp)
 880ed34:	e0bfff17 	ldw	r2,-4(fp)
}
 880ed38:	e037883a 	mov	sp,fp
 880ed3c:	dfc00117 	ldw	ra,4(sp)
 880ed40:	df000017 	ldw	fp,0(sp)
 880ed44:	dec00204 	addi	sp,sp,8
 880ed48:	f800283a 	ret

0880ed4c <altera_avalon_mutex_close>:
 * altera_avalon_mutex_close - Does nothing at the moment, but included for 
 * completeness
 *
 */
void altera_avalon_mutex_close (alt_mutex_dev* dev)
{
 880ed4c:	defffe04 	addi	sp,sp,-8
 880ed50:	df000115 	stw	fp,4(sp)
 880ed54:	df000104 	addi	fp,sp,4
 880ed58:	e13fff15 	stw	r4,-4(fp)
  return;
}
 880ed5c:	e037883a 	mov	sp,fp
 880ed60:	df000017 	ldw	fp,0(sp)
 880ed64:	dec00104 	addi	sp,sp,4
 880ed68:	f800283a 	ret

0880ed6c <altera_avalon_mutex_lock>:
/*
 * altera_avalon_mutex_lock - Lock the hardware mutex
 *
 */
void altera_avalon_mutex_lock( alt_mutex_dev* dev, alt_u32 value )
{
 880ed6c:	defffc04 	addi	sp,sp,-16
 880ed70:	dfc00315 	stw	ra,12(sp)
 880ed74:	df000215 	stw	fp,8(sp)
 880ed78:	df000204 	addi	fp,sp,8
 880ed7c:	e13ffe15 	stw	r4,-8(fp)
 880ed80:	e17fff15 	stw	r5,-4(fp)
   * semaphore. This ensures that reading from the device is thread-safe.
   */

  ALT_SEM_PEND (dev->lock, 0);

  while ( alt_mutex_trylock( dev, value ) != 0);
 880ed84:	e13ffe17 	ldw	r4,-8(fp)
 880ed88:	e17fff17 	ldw	r5,-4(fp)
 880ed8c:	880ec180 	call	880ec18 <alt_mutex_trylock>
 880ed90:	1004c03a 	cmpne	r2,r2,zero
 880ed94:	103ffb1e 	bne	r2,zero,880ed84 <altera_avalon_mutex_lock+0x18>
}
 880ed98:	e037883a 	mov	sp,fp
 880ed9c:	dfc00117 	ldw	ra,4(sp)
 880eda0:	df000017 	ldw	fp,0(sp)
 880eda4:	dec00204 	addi	sp,sp,8
 880eda8:	f800283a 	ret

0880edac <altera_avalon_mutex_trylock>:
 *
 * returns 0 on success -1 otherwise
 *
 */
int altera_avalon_mutex_trylock( alt_mutex_dev* dev, alt_u32 value )
{
 880edac:	defffb04 	addi	sp,sp,-20
 880edb0:	dfc00415 	stw	ra,16(sp)
 880edb4:	df000315 	stw	fp,12(sp)
 880edb8:	df000304 	addi	fp,sp,12
 880edbc:	e13ffe15 	stw	r4,-8(fp)
 880edc0:	e17fff15 	stw	r5,-4(fp)
  int ret_code;

  ALT_SEM_PEND (dev->lock, 0);

  ret_code = alt_mutex_trylock( dev, value);
 880edc4:	e13ffe17 	ldw	r4,-8(fp)
 880edc8:	e17fff17 	ldw	r5,-4(fp)
 880edcc:	880ec180 	call	880ec18 <alt_mutex_trylock>
 880edd0:	e0bffd15 	stw	r2,-12(fp)
  if (ret_code)
  {
    ALT_SEM_POST (dev->lock);
  }

  return ret_code;
 880edd4:	e0bffd17 	ldw	r2,-12(fp)
}
 880edd8:	e037883a 	mov	sp,fp
 880eddc:	dfc00117 	ldw	ra,4(sp)
 880ede0:	df000017 	ldw	fp,0(sp)
 880ede4:	dec00204 	addi	sp,sp,8
 880ede8:	f800283a 	ret

0880edec <altera_avalon_mutex_unlock>:
 * This function does not check that you own the Mutex if you try to release
 * a Mutex you do not own the behaviour is undefined
 *
 */
void altera_avalon_mutex_unlock( alt_mutex_dev* dev )
{
 880edec:	defffd04 	addi	sp,sp,-12
 880edf0:	df000215 	stw	fp,8(sp)
 880edf4:	df000204 	addi	fp,sp,8
 880edf8:	e13fff15 	stw	r4,-4(fp)
  alt_u32 id;
  NIOS2_READ_CPUID(id);
 880edfc:	0005317a 	rdctl	r2,cpuid
 880ee00:	e0bffe15 	stw	r2,-8(fp)

  /*
  * This Mutex has been claimed and released since Reset so clear the Reset bit
  * This MUST happen before we release the MUTEX
  */
  IOWR_ALTERA_AVALON_MUTEX_RESET(dev->mutex_base, 
 880ee04:	e0bfff17 	ldw	r2,-4(fp)
 880ee08:	10800317 	ldw	r2,12(r2)
 880ee0c:	10800104 	addi	r2,r2,4
 880ee10:	1007883a 	mov	r3,r2
 880ee14:	00800044 	movi	r2,1
 880ee18:	18800035 	stwio	r2,0(r3)
                                  ALTERA_AVALON_MUTEX_RESET_RESET_MSK);
  IOWR_ALTERA_AVALON_MUTEX_MUTEX(dev->mutex_base, 
 880ee1c:	e0bfff17 	ldw	r2,-4(fp)
 880ee20:	11000317 	ldw	r4,12(r2)
 880ee24:	e0bffe17 	ldw	r2,-8(fp)
 880ee28:	1004943a 	slli	r2,r2,16
 880ee2c:	1007883a 	mov	r3,r2
 880ee30:	2005883a 	mov	r2,r4
 880ee34:	10c00035 	stwio	r3,0(r2)

  /*
  * Now that access to the hardware Mutex is complete, release the thread lock
  */
  ALT_SEM_POST (dev->lock);
}
 880ee38:	e037883a 	mov	sp,fp
 880ee3c:	df000017 	ldw	fp,0(sp)
 880ee40:	dec00104 	addi	sp,sp,4
 880ee44:	f800283a 	ret

0880ee48 <altera_avalon_mutex_is_mine>:
 * altera_avalon_mutex_is_mine - Do I own the Mutex?
 *
 *  returns non zero if the mutex is owned by this CPU
 */
int altera_avalon_mutex_is_mine( alt_mutex_dev* dev )
{
 880ee48:	defff904 	addi	sp,sp,-28
 880ee4c:	df000615 	stw	fp,24(sp)
 880ee50:	df000604 	addi	fp,sp,24
 880ee54:	e13fff15 	stw	r4,-4(fp)
  alt_u32 id, data, owner, value;
  int ret_code = 0;
 880ee58:	e03ffa15 	stw	zero,-24(fp)

  NIOS2_READ_CPUID(id);
 880ee5c:	0005317a 	rdctl	r2,cpuid
 880ee60:	e0bffe15 	stw	r2,-8(fp)

  /* retrieve the contents of the mutex */
  data = IORD_ALTERA_AVALON_MUTEX_MUTEX(dev->mutex_base);
 880ee64:	e0bfff17 	ldw	r2,-4(fp)
 880ee68:	10800317 	ldw	r2,12(r2)
 880ee6c:	10800037 	ldwio	r2,0(r2)
 880ee70:	e0bffd15 	stw	r2,-12(fp)
  owner = (data & ALTERA_AVALON_MUTEX_MUTEX_OWNER_MSK) >> 
 880ee74:	e0bffd17 	ldw	r2,-12(fp)
 880ee78:	10bfffec 	andhi	r2,r2,65535
 880ee7c:	1004d43a 	srli	r2,r2,16
 880ee80:	e0bffc15 	stw	r2,-16(fp)
              ALTERA_AVALON_MUTEX_MUTEX_OWNER_OFST;

  if (owner == id) 
 880ee84:	e0fffc17 	ldw	r3,-16(fp)
 880ee88:	e0bffe17 	ldw	r2,-8(fp)
 880ee8c:	1880081e 	bne	r3,r2,880eeb0 <altera_avalon_mutex_is_mine+0x68>
  {
    value = (data & ALTERA_AVALON_MUTEX_MUTEX_VALUE_MSK) >> 
 880ee90:	e0bffd17 	ldw	r2,-12(fp)
 880ee94:	10bfffcc 	andi	r2,r2,65535
 880ee98:	e0bffb15 	stw	r2,-20(fp)
                  ALTERA_AVALON_MUTEX_MUTEX_VALUE_OFST;
    if (value != 0)
 880ee9c:	e0bffb17 	ldw	r2,-20(fp)
 880eea0:	1005003a 	cmpeq	r2,r2,zero
 880eea4:	1000021e 	bne	r2,zero,880eeb0 <altera_avalon_mutex_is_mine+0x68>
    {
      ret_code = 1;
 880eea8:	00800044 	movi	r2,1
 880eeac:	e0bffa15 	stw	r2,-24(fp)
    }
  }

  return ret_code;
 880eeb0:	e0bffa17 	ldw	r2,-24(fp)
}
 880eeb4:	e037883a 	mov	sp,fp
 880eeb8:	df000017 	ldw	fp,0(sp)
 880eebc:	dec00104 	addi	sp,sp,4
 880eec0:	f800283a 	ret

0880eec4 <altera_avalon_mutex_first_lock>:
 *
 * Has this Mutex been released since reset if not return 1
 * otherwise return 0
 */
int altera_avalon_mutex_first_lock( alt_mutex_dev* dev )
{
 880eec4:	defffc04 	addi	sp,sp,-16
 880eec8:	df000315 	stw	fp,12(sp)
 880eecc:	df000304 	addi	fp,sp,12
 880eed0:	e13fff15 	stw	r4,-4(fp)
  alt_u32 data;
  int ret_code = 0;
 880eed4:	e03ffd15 	stw	zero,-12(fp)

  data = IORD_ALTERA_AVALON_MUTEX_RESET(dev->mutex_base);
 880eed8:	e0bfff17 	ldw	r2,-4(fp)
 880eedc:	10800317 	ldw	r2,12(r2)
 880eee0:	10800104 	addi	r2,r2,4
 880eee4:	10800037 	ldwio	r2,0(r2)
 880eee8:	e0bffe15 	stw	r2,-8(fp)

  if (data & ALTERA_AVALON_MUTEX_RESET_RESET_MSK) 
 880eeec:	e0bffe17 	ldw	r2,-8(fp)
 880eef0:	1080004c 	andi	r2,r2,1
 880eef4:	10803fcc 	andi	r2,r2,255
 880eef8:	1005003a 	cmpeq	r2,r2,zero
 880eefc:	1000021e 	bne	r2,zero,880ef08 <altera_avalon_mutex_first_lock+0x44>
  {
    ret_code = 1;
 880ef00:	00800044 	movi	r2,1
 880ef04:	e0bffd15 	stw	r2,-12(fp)
  }

  return ret_code;
 880ef08:	e0bffd17 	ldw	r2,-12(fp)
}
 880ef0c:	e037883a 	mov	sp,fp
 880ef10:	df000017 	ldw	fp,0(sp)
 880ef14:	dec00104 	addi	sp,sp,4
 880ef18:	f800283a 	ret

0880ef1c <alt_up_pixel_buffer_dma_open_dev>:

#include "altera_up_avalon_video_pixel_buffer_dma.h"

#define ABS(x)	((x >= 0) ? (x) : (-(x)))

alt_up_pixel_buffer_dma_dev* alt_up_pixel_buffer_dma_open_dev(const char* name) {
 880ef1c:	defffc04 	addi	sp,sp,-16
 880ef20:	dfc00315 	stw	ra,12(sp)
 880ef24:	df000215 	stw	fp,8(sp)
 880ef28:	df000204 	addi	fp,sp,8
 880ef2c:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_pixel_buffer_dma_dev *dev = (alt_up_pixel_buffer_dma_dev*)alt_find_dev(name, &alt_dev_list);
 880ef30:	e13fff17 	ldw	r4,-4(fp)
 880ef34:	01422074 	movhi	r5,2177
 880ef38:	294e5a04 	addi	r5,r5,14696
 880ef3c:	88107fc0 	call	88107fc <alt_find_dev>
 880ef40:	e0bffe15 	stw	r2,-8(fp)

  return dev;
 880ef44:	e0bffe17 	ldw	r2,-8(fp)
}
 880ef48:	e037883a 	mov	sp,fp
 880ef4c:	dfc00117 	ldw	ra,4(sp)
 880ef50:	df000017 	ldw	fp,0(sp)
 880ef54:	dec00204 	addi	sp,sp,8
 880ef58:	f800283a 	ret

0880ef5c <alt_up_pixel_buffer_dma_draw>:

int alt_up_pixel_buffer_dma_draw(alt_up_pixel_buffer_dma_dev *pixel_buffer, unsigned int color, unsigned int x, unsigned int y)
/* This function draws a pixel to the back buffer.
 */
{
 880ef5c:	defff904 	addi	sp,sp,-28
 880ef60:	df000615 	stw	fp,24(sp)
 880ef64:	df000604 	addi	fp,sp,24
 880ef68:	e13ffb15 	stw	r4,-20(fp)
 880ef6c:	e17ffc15 	stw	r5,-16(fp)
 880ef70:	e1bffd15 	stw	r6,-12(fp)
 880ef74:	e1fffe15 	stw	r7,-8(fp)
	// boundary check
	if (x >= pixel_buffer->x_resolution || y >= pixel_buffer->y_resolution )
 880ef78:	e0bffb17 	ldw	r2,-20(fp)
 880ef7c:	10c00f17 	ldw	r3,60(r2)
 880ef80:	e0bffd17 	ldw	r2,-12(fp)
 880ef84:	10c0042e 	bgeu	r2,r3,880ef98 <alt_up_pixel_buffer_dma_draw+0x3c>
 880ef88:	e0bffb17 	ldw	r2,-20(fp)
 880ef8c:	10c01017 	ldw	r3,64(r2)
 880ef90:	e0bffe17 	ldw	r2,-8(fp)
 880ef94:	10c00336 	bltu	r2,r3,880efa4 <alt_up_pixel_buffer_dma_draw+0x48>
		return -1;
 880ef98:	00bfffc4 	movi	r2,-1
 880ef9c:	e0bfff15 	stw	r2,-4(fp)
 880efa0:	00005106 	br	880f0e8 <alt_up_pixel_buffer_dma_draw+0x18c>

	unsigned int addr = 0;
 880efa4:	e03ffa15 	stw	zero,-24(fp)
	/* Check the mode VGA Pixel Buffer is using. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
 880efa8:	e0bffb17 	ldw	r2,-20(fp)
 880efac:	10800d17 	ldw	r2,52(r2)
 880efb0:	1004c03a 	cmpne	r2,r2,zero
 880efb4:	1000151e 	bne	r2,zero,880f00c <alt_up_pixel_buffer_dma_draw+0xb0>
		/* For X-Y addressing mode, the address format is | unused | Y | X |. So shift bits for coordinates X and Y into their respective locations. */
		addr |= ((x & pixel_buffer->x_coord_mask) << pixel_buffer->x_coord_offset);
 880efb8:	e0bffb17 	ldw	r2,-20(fp)
 880efbc:	10c01217 	ldw	r3,72(r2)
 880efc0:	e0bffd17 	ldw	r2,-12(fp)
 880efc4:	1886703a 	and	r3,r3,r2
 880efc8:	e0bffb17 	ldw	r2,-20(fp)
 880efcc:	10801117 	ldw	r2,68(r2)
 880efd0:	1886983a 	sll	r3,r3,r2
 880efd4:	e0bffa17 	ldw	r2,-24(fp)
 880efd8:	10c4b03a 	or	r2,r2,r3
 880efdc:	e0bffa15 	stw	r2,-24(fp)
		addr |= ((y & pixel_buffer->y_coord_mask) << pixel_buffer->y_coord_offset);
 880efe0:	e0bffb17 	ldw	r2,-20(fp)
 880efe4:	10c01417 	ldw	r3,80(r2)
 880efe8:	e0bffe17 	ldw	r2,-8(fp)
 880efec:	1886703a 	and	r3,r3,r2
 880eff0:	e0bffb17 	ldw	r2,-20(fp)
 880eff4:	10801317 	ldw	r2,76(r2)
 880eff8:	1886983a 	sll	r3,r3,r2
 880effc:	e0bffa17 	ldw	r2,-24(fp)
 880f000:	10c4b03a 	or	r2,r2,r3
 880f004:	e0bffa15 	stw	r2,-24(fp)
 880f008:	00001706 	br	880f068 <alt_up_pixel_buffer_dma_draw+0x10c>
	} else {
		/* In a consecutive addressing mode, the pixels are stored in consecutive memory locations. So the address of a pixel at (x,y) can be computed as
		 * (y*x_resolution + x).*/
		addr += ((x & pixel_buffer->x_coord_mask) << pixel_buffer->x_coord_offset);
 880f00c:	e0bffb17 	ldw	r2,-20(fp)
 880f010:	10c01217 	ldw	r3,72(r2)
 880f014:	e0bffd17 	ldw	r2,-12(fp)
 880f018:	1886703a 	and	r3,r3,r2
 880f01c:	e0bffb17 	ldw	r2,-20(fp)
 880f020:	10801117 	ldw	r2,68(r2)
 880f024:	1886983a 	sll	r3,r3,r2
 880f028:	e0bffa17 	ldw	r2,-24(fp)
 880f02c:	10c5883a 	add	r2,r2,r3
 880f030:	e0bffa15 	stw	r2,-24(fp)
		addr += (((y & pixel_buffer->y_coord_mask) * pixel_buffer->x_resolution) << pixel_buffer->x_coord_offset);
 880f034:	e0bffb17 	ldw	r2,-20(fp)
 880f038:	10c01417 	ldw	r3,80(r2)
 880f03c:	e0bffe17 	ldw	r2,-8(fp)
 880f040:	1886703a 	and	r3,r3,r2
 880f044:	e0bffb17 	ldw	r2,-20(fp)
 880f048:	10800f17 	ldw	r2,60(r2)
 880f04c:	1887383a 	mul	r3,r3,r2
 880f050:	e0bffb17 	ldw	r2,-20(fp)
 880f054:	10801117 	ldw	r2,68(r2)
 880f058:	1886983a 	sll	r3,r3,r2
 880f05c:	e0bffa17 	ldw	r2,-24(fp)
 880f060:	10c5883a 	add	r2,r2,r3
 880f064:	e0bffa15 	stw	r2,-24(fp)
	}
	/* Now, depending on the color depth, write the pixel color to the specified memory location. */
	if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
 880f068:	e0bffb17 	ldw	r2,-20(fp)
 880f06c:	10800e17 	ldw	r2,56(r2)
 880f070:	10800058 	cmpnei	r2,r2,1
 880f074:	1000081e 	bne	r2,zero,880f098 <alt_up_pixel_buffer_dma_draw+0x13c>
		IOWR_8DIRECT(pixel_buffer->back_buffer_start_address, addr, color);
 880f078:	e0bffb17 	ldw	r2,-20(fp)
 880f07c:	10800c17 	ldw	r2,48(r2)
 880f080:	1007883a 	mov	r3,r2
 880f084:	e0bffa17 	ldw	r2,-24(fp)
 880f088:	1885883a 	add	r2,r3,r2
 880f08c:	e0fffc17 	ldw	r3,-16(fp)
 880f090:	10c00025 	stbio	r3,0(r2)
 880f094:	00001306 	br	880f0e4 <alt_up_pixel_buffer_dma_draw+0x188>
	} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
 880f098:	e0bffb17 	ldw	r2,-20(fp)
 880f09c:	10800e17 	ldw	r2,56(r2)
 880f0a0:	10800098 	cmpnei	r2,r2,2
 880f0a4:	1000081e 	bne	r2,zero,880f0c8 <alt_up_pixel_buffer_dma_draw+0x16c>
		IOWR_16DIRECT(pixel_buffer->back_buffer_start_address, addr, color);
 880f0a8:	e0bffb17 	ldw	r2,-20(fp)
 880f0ac:	10800c17 	ldw	r2,48(r2)
 880f0b0:	1007883a 	mov	r3,r2
 880f0b4:	e0bffa17 	ldw	r2,-24(fp)
 880f0b8:	1885883a 	add	r2,r3,r2
 880f0bc:	e0fffc17 	ldw	r3,-16(fp)
 880f0c0:	10c0002d 	sthio	r3,0(r2)
 880f0c4:	00000706 	br	880f0e4 <alt_up_pixel_buffer_dma_draw+0x188>
	} else {
		IOWR_32DIRECT(pixel_buffer->back_buffer_start_address, addr, color);
 880f0c8:	e0bffb17 	ldw	r2,-20(fp)
 880f0cc:	10800c17 	ldw	r2,48(r2)
 880f0d0:	1007883a 	mov	r3,r2
 880f0d4:	e0bffa17 	ldw	r2,-24(fp)
 880f0d8:	1885883a 	add	r2,r3,r2
 880f0dc:	e0fffc17 	ldw	r3,-16(fp)
 880f0e0:	10c00035 	stwio	r3,0(r2)
	}

	return 0;
 880f0e4:	e03fff15 	stw	zero,-4(fp)
 880f0e8:	e0bfff17 	ldw	r2,-4(fp)
}
 880f0ec:	e037883a 	mov	sp,fp
 880f0f0:	df000017 	ldw	fp,0(sp)
 880f0f4:	dec00104 	addi	sp,sp,4
 880f0f8:	f800283a 	ret

0880f0fc <alt_up_pixel_buffer_dma_change_back_buffer_address>:

int alt_up_pixel_buffer_dma_change_back_buffer_address(alt_up_pixel_buffer_dma_dev *pixel_buffer, unsigned int new_address)
/* This function changes the memory address for the back buffer. */
{
 880f0fc:	defffd04 	addi	sp,sp,-12
 880f100:	df000215 	stw	fp,8(sp)
 880f104:	df000204 	addi	fp,sp,8
 880f108:	e13ffe15 	stw	r4,-8(fp)
 880f10c:	e17fff15 	stw	r5,-4(fp)
	IOWR_32DIRECT(pixel_buffer->base, 4, new_address);
 880f110:	e0bffe17 	ldw	r2,-8(fp)
 880f114:	10800a17 	ldw	r2,40(r2)
 880f118:	10800104 	addi	r2,r2,4
 880f11c:	e0ffff17 	ldw	r3,-4(fp)
 880f120:	10c00035 	stwio	r3,0(r2)
	pixel_buffer->back_buffer_start_address = IORD_32DIRECT(pixel_buffer->base, 4);
 880f124:	e0bffe17 	ldw	r2,-8(fp)
 880f128:	10800a17 	ldw	r2,40(r2)
 880f12c:	10800104 	addi	r2,r2,4
 880f130:	10800037 	ldwio	r2,0(r2)
 880f134:	1007883a 	mov	r3,r2
 880f138:	e0bffe17 	ldw	r2,-8(fp)
 880f13c:	10c00c15 	stw	r3,48(r2)
	return 0;
 880f140:	0005883a 	mov	r2,zero
}
 880f144:	e037883a 	mov	sp,fp
 880f148:	df000017 	ldw	fp,0(sp)
 880f14c:	dec00104 	addi	sp,sp,4
 880f150:	f800283a 	ret

0880f154 <alt_up_pixel_buffer_dma_swap_buffers>:

int alt_up_pixel_buffer_dma_swap_buffers(alt_up_pixel_buffer_dma_dev *pixel_buffer)
/* This function swaps the front and back buffers. At the next refresh cycle the back buffer will be drawn on the screen
 * and will become the front buffer. */
{
 880f154:	defffe04 	addi	sp,sp,-8
 880f158:	df000115 	stw	fp,4(sp)
 880f15c:	df000104 	addi	fp,sp,4
 880f160:	e13fff15 	stw	r4,-4(fp)
	register unsigned int temp = pixel_buffer->back_buffer_start_address;
 880f164:	e0bfff17 	ldw	r2,-4(fp)
 880f168:	11000c17 	ldw	r4,48(r2)
	IOWR_32DIRECT(pixel_buffer->base, 0, 1);
 880f16c:	e0bfff17 	ldw	r2,-4(fp)
 880f170:	10800a17 	ldw	r2,40(r2)
 880f174:	1007883a 	mov	r3,r2
 880f178:	00800044 	movi	r2,1
 880f17c:	18800035 	stwio	r2,0(r3)
	pixel_buffer->back_buffer_start_address = pixel_buffer->buffer_start_address;
 880f180:	e0bfff17 	ldw	r2,-4(fp)
 880f184:	10c00b17 	ldw	r3,44(r2)
 880f188:	e0bfff17 	ldw	r2,-4(fp)
 880f18c:	10c00c15 	stw	r3,48(r2)
	pixel_buffer->buffer_start_address = temp;
 880f190:	e0bfff17 	ldw	r2,-4(fp)
 880f194:	11000b15 	stw	r4,44(r2)
	return 0;
 880f198:	0005883a 	mov	r2,zero
}
 880f19c:	e037883a 	mov	sp,fp
 880f1a0:	df000017 	ldw	fp,0(sp)
 880f1a4:	dec00104 	addi	sp,sp,4
 880f1a8:	f800283a 	ret

0880f1ac <alt_up_pixel_buffer_dma_check_swap_buffers_status>:
int alt_up_pixel_buffer_dma_check_swap_buffers_status(alt_up_pixel_buffer_dma_dev *pixel_buffer)
/* This function checks if the buffer swap has occured. Since the buffer swap only happens after an entire screen is drawn,
 * it is important to wait for this function to return 0 before proceeding to draw on either buffer. When both front and the back buffers
 * have the same address calling the alt_up_pixel_buffer_dma_swap_buffers(...) function and then waiting for this function to return 0, causes your program to
 * wait for the screen to refresh. */
{
 880f1ac:	defffe04 	addi	sp,sp,-8
 880f1b0:	df000115 	stw	fp,4(sp)
 880f1b4:	df000104 	addi	fp,sp,4
 880f1b8:	e13fff15 	stw	r4,-4(fp)
	return (IORD_32DIRECT(pixel_buffer->base, 12) & 0x1);
 880f1bc:	e0bfff17 	ldw	r2,-4(fp)
 880f1c0:	10800a17 	ldw	r2,40(r2)
 880f1c4:	10800304 	addi	r2,r2,12
 880f1c8:	10800037 	ldwio	r2,0(r2)
 880f1cc:	1080004c 	andi	r2,r2,1
}
 880f1d0:	e037883a 	mov	sp,fp
 880f1d4:	df000017 	ldw	fp,0(sp)
 880f1d8:	dec00104 	addi	sp,sp,4
 880f1dc:	f800283a 	ret

0880f1e0 <alt_up_pixel_buffer_dma_clear_screen>:

void alt_up_pixel_buffer_dma_clear_screen(alt_up_pixel_buffer_dma_dev *pixel_buffer, int backbuffer)
/* This function clears the screen by setting each pixel to a black color. */
{
 880f1e0:	defff604 	addi	sp,sp,-40
 880f1e4:	df000915 	stw	fp,36(sp)
 880f1e8:	df000904 	addi	fp,sp,36
 880f1ec:	e13ff715 	stw	r4,-36(fp)
 880f1f0:	e17ff815 	stw	r5,-32(fp)
	register unsigned int addr;
	register unsigned int limit_x, limit_y;
	
	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
 880f1f4:	e0bff817 	ldw	r2,-32(fp)
 880f1f8:	10800058 	cmpnei	r2,r2,1
 880f1fc:	1000041e 	bne	r2,zero,880f210 <alt_up_pixel_buffer_dma_clear_screen+0x30>
		addr = pixel_buffer->back_buffer_start_address;
 880f200:	e0bff717 	ldw	r2,-36(fp)
 880f204:	10800c17 	ldw	r2,48(r2)
 880f208:	e0bfff15 	stw	r2,-4(fp)
 880f20c:	00000306 	br	880f21c <alt_up_pixel_buffer_dma_clear_screen+0x3c>
	else
		addr = pixel_buffer->buffer_start_address;
 880f210:	e0bff717 	ldw	r2,-36(fp)
 880f214:	10800b17 	ldw	r2,44(r2)
 880f218:	e0bfff15 	stw	r2,-4(fp)
	limit_x = pixel_buffer->x_resolution;
 880f21c:	e0bff717 	ldw	r2,-36(fp)
 880f220:	10800f17 	ldw	r2,60(r2)
 880f224:	e0bffe15 	stw	r2,-8(fp)
	/* In 16 and 32-bit color modes we use twice or four times more memory for the display buffer.*/
	if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
 880f228:	e0bff717 	ldw	r2,-36(fp)
 880f22c:	10800e17 	ldw	r2,56(r2)
 880f230:	10800098 	cmpnei	r2,r2,2
 880f234:	1000051e 	bne	r2,zero,880f24c <alt_up_pixel_buffer_dma_clear_screen+0x6c>
		limit_x = limit_x << 1;
 880f238:	e0fffe17 	ldw	r3,-8(fp)
 880f23c:	e0fffe17 	ldw	r3,-8(fp)
 880f240:	18c5883a 	add	r2,r3,r3
 880f244:	e0bffe15 	stw	r2,-8(fp)
 880f248:	00000506 	br	880f260 <alt_up_pixel_buffer_dma_clear_screen+0x80>
	} else {
		limit_x = limit_x << 2;
 880f24c:	e13ffe17 	ldw	r4,-8(fp)
 880f250:	e13ffe17 	ldw	r4,-8(fp)
 880f254:	2105883a 	add	r2,r4,r4
 880f258:	1085883a 	add	r2,r2,r2
 880f25c:	e0bffe15 	stw	r2,-8(fp)
	}	
	limit_y = pixel_buffer->y_resolution;
 880f260:	e0bff717 	ldw	r2,-36(fp)
 880f264:	10801017 	ldw	r2,64(r2)
 880f268:	e0bffd15 	stw	r2,-12(fp)

	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
 880f26c:	e0bff717 	ldw	r2,-36(fp)
 880f270:	10800d17 	ldw	r2,52(r2)
 880f274:	1004c03a 	cmpne	r2,r2,zero
 880f278:	10001e1e 	bne	r2,zero,880f2f4 <alt_up_pixel_buffer_dma_clear_screen+0x114>
		/* Clear the screen when the VGA is set up in an XY addressing mode. */
		register unsigned int x,y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
 880f27c:	e0bff717 	ldw	r2,-36(fp)
 880f280:	10801317 	ldw	r2,76(r2)
 880f284:	e0bffa15 	stw	r2,-24(fp)

		for (y = 0; y < limit_y; y++)
 880f288:	e03ffb15 	stw	zero,-20(fp)
 880f28c:	00001506 	br	880f2e4 <alt_up_pixel_buffer_dma_clear_screen+0x104>
		{
			for (x = 0; x < limit_x; x = x + 4)
 880f290:	e03ffc15 	stw	zero,-16(fp)
 880f294:	00000706 	br	880f2b4 <alt_up_pixel_buffer_dma_clear_screen+0xd4>
			{
				IOWR_32DIRECT(addr, x, 0);
 880f298:	e0ffff17 	ldw	r3,-4(fp)
 880f29c:	e0bffc17 	ldw	r2,-16(fp)
 880f2a0:	1885883a 	add	r2,r3,r2
 880f2a4:	10000035 	stwio	zero,0(r2)
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;

		for (y = 0; y < limit_y; y++)
		{
			for (x = 0; x < limit_x; x = x + 4)
 880f2a8:	e0bffc17 	ldw	r2,-16(fp)
 880f2ac:	10800104 	addi	r2,r2,4
 880f2b0:	e0bffc15 	stw	r2,-16(fp)
 880f2b4:	e0fffc17 	ldw	r3,-16(fp)
 880f2b8:	e13ffe17 	ldw	r4,-8(fp)
 880f2bc:	193ff636 	bltu	r3,r4,880f298 <alt_up_pixel_buffer_dma_clear_screen+0xb8>
			{
				IOWR_32DIRECT(addr, x, 0);
			}
			addr = addr + (1 << offset_y);
 880f2c0:	e0fffa17 	ldw	r3,-24(fp)
 880f2c4:	00800044 	movi	r2,1
 880f2c8:	10c4983a 	sll	r2,r2,r3
 880f2cc:	e0ffff17 	ldw	r3,-4(fp)
 880f2d0:	1887883a 	add	r3,r3,r2
 880f2d4:	e0ffff15 	stw	r3,-4(fp)
		/* Clear the screen when the VGA is set up in an XY addressing mode. */
		register unsigned int x,y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;

		for (y = 0; y < limit_y; y++)
 880f2d8:	e13ffb17 	ldw	r4,-20(fp)
 880f2dc:	21000044 	addi	r4,r4,1
 880f2e0:	e13ffb15 	stw	r4,-20(fp)
 880f2e4:	e0bffb17 	ldw	r2,-20(fp)
 880f2e8:	e0fffd17 	ldw	r3,-12(fp)
 880f2ec:	10ffe836 	bltu	r2,r3,880f290 <alt_up_pixel_buffer_dma_clear_screen+0xb0>
 880f2f0:	00001006 	br	880f334 <alt_up_pixel_buffer_dma_clear_screen+0x154>
			addr = addr + (1 << offset_y);
		}
	} else {
		/* Clear the screen when the VGA is set up in a linear addressing mode. */
		register int x;
		limit_y = limit_x*limit_y;	
 880f2f4:	e13ffd17 	ldw	r4,-12(fp)
 880f2f8:	e0bffe17 	ldw	r2,-8(fp)
 880f2fc:	2089383a 	mul	r4,r4,r2
 880f300:	e13ffd15 	stw	r4,-12(fp)

		for (x = 0; x < limit_y; x = x + 4)
 880f304:	e03ff915 	stw	zero,-28(fp)
 880f308:	00000706 	br	880f328 <alt_up_pixel_buffer_dma_clear_screen+0x148>
		{
			IOWR_32DIRECT(addr, x, 0);
 880f30c:	e0ffff17 	ldw	r3,-4(fp)
 880f310:	e0bff917 	ldw	r2,-28(fp)
 880f314:	1885883a 	add	r2,r3,r2
 880f318:	10000035 	stwio	zero,0(r2)
	} else {
		/* Clear the screen when the VGA is set up in a linear addressing mode. */
		register int x;
		limit_y = limit_x*limit_y;	

		for (x = 0; x < limit_y; x = x + 4)
 880f31c:	e0fff917 	ldw	r3,-28(fp)
 880f320:	18c00104 	addi	r3,r3,4
 880f324:	e0fff915 	stw	r3,-28(fp)
 880f328:	e0bff917 	ldw	r2,-28(fp)
 880f32c:	e13ffd17 	ldw	r4,-12(fp)
 880f330:	113ff636 	bltu	r2,r4,880f30c <alt_up_pixel_buffer_dma_clear_screen+0x12c>
		{
			IOWR_32DIRECT(addr, x, 0);
		}
	}
}
 880f334:	e037883a 	mov	sp,fp
 880f338:	df000017 	ldw	fp,0(sp)
 880f33c:	dec00104 	addi	sp,sp,4
 880f340:	f800283a 	ret

0880f344 <alt_up_pixel_buffer_dma_draw_box>:

void alt_up_pixel_buffer_dma_draw_box(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int y0, int x1, int y1, int color, int backbuffer)
/* This function draws a filled box. */
{
 880f344:	deffed04 	addi	sp,sp,-76
 880f348:	df001215 	stw	fp,72(sp)
 880f34c:	df001204 	addi	fp,sp,72
 880f350:	e13fee15 	stw	r4,-72(fp)
 880f354:	e17fef15 	stw	r5,-68(fp)
 880f358:	e1bff015 	stw	r6,-64(fp)
 880f35c:	e1fff115 	stw	r7,-60(fp)
	register unsigned int addr;
	register unsigned int limit_x = pixel_buffer->x_resolution;
 880f360:	e0bfee17 	ldw	r2,-72(fp)
 880f364:	10800f17 	ldw	r2,60(r2)
 880f368:	e0bffe15 	stw	r2,-8(fp)
	register unsigned int limit_y = pixel_buffer->y_resolution;
 880f36c:	e0bfee17 	ldw	r2,-72(fp)
 880f370:	10801017 	ldw	r2,64(r2)
 880f374:	e0bffd15 	stw	r2,-12(fp)
	register unsigned int temp;
	register unsigned int l_x = x0;
 880f378:	e0bfef17 	ldw	r2,-68(fp)
 880f37c:	e0bffb15 	stw	r2,-20(fp)
	register unsigned int r_x = x1;
 880f380:	e0fff117 	ldw	r3,-60(fp)
 880f384:	e0fffa15 	stw	r3,-24(fp)
	register unsigned int t_y = y0;
 880f388:	e13ff017 	ldw	r4,-64(fp)
 880f38c:	e13ff915 	stw	r4,-28(fp)
	register unsigned int b_y = y1;
 880f390:	e0800117 	ldw	r2,4(fp)
 880f394:	e0bff815 	stw	r2,-32(fp)
	register unsigned int local_color = color;
 880f398:	e0c00217 	ldw	r3,8(fp)
 880f39c:	e0fff715 	stw	r3,-36(fp)
	
	/* Check coordinates */
	if (l_x > r_x)
 880f3a0:	e13ffa17 	ldw	r4,-24(fp)
 880f3a4:	e0bffb17 	ldw	r2,-20(fp)
 880f3a8:	2080062e 	bgeu	r4,r2,880f3c4 <alt_up_pixel_buffer_dma_draw_box+0x80>
	{
		temp = l_x;
 880f3ac:	e0fffb17 	ldw	r3,-20(fp)
 880f3b0:	e0fffc15 	stw	r3,-16(fp)
		l_x = r_x;
 880f3b4:	e13ffa17 	ldw	r4,-24(fp)
 880f3b8:	e13ffb15 	stw	r4,-20(fp)
		r_x = temp;
 880f3bc:	e0bffc17 	ldw	r2,-16(fp)
 880f3c0:	e0bffa15 	stw	r2,-24(fp)
	}
	if (t_y > b_y)
 880f3c4:	e0fff817 	ldw	r3,-32(fp)
 880f3c8:	e13ff917 	ldw	r4,-28(fp)
 880f3cc:	1900062e 	bgeu	r3,r4,880f3e8 <alt_up_pixel_buffer_dma_draw_box+0xa4>
	{
		temp = t_y;
 880f3d0:	e0bff917 	ldw	r2,-28(fp)
 880f3d4:	e0bffc15 	stw	r2,-16(fp)
		t_y = b_y;
 880f3d8:	e0fff817 	ldw	r3,-32(fp)
 880f3dc:	e0fff915 	stw	r3,-28(fp)
		b_y = temp;
 880f3e0:	e13ffc17 	ldw	r4,-16(fp)
 880f3e4:	e13ff815 	stw	r4,-32(fp)
	}
	if ((l_x >= limit_x) || (t_y >= limit_y) || (r_x < 0) || (b_y < 0))
 880f3e8:	e0bffb17 	ldw	r2,-20(fp)
 880f3ec:	e0fffe17 	ldw	r3,-8(fp)
 880f3f0:	10c10d2e 	bgeu	r2,r3,880f828 <alt_up_pixel_buffer_dma_draw_box+0x4e4>
 880f3f4:	e13ff917 	ldw	r4,-28(fp)
 880f3f8:	e0bffd17 	ldw	r2,-12(fp)
 880f3fc:	20800136 	bltu	r4,r2,880f404 <alt_up_pixel_buffer_dma_draw_box+0xc0>
	{
		/* Drawing outside of the window, so don't bother. */
		return;
 880f400:	00010906 	br	880f828 <alt_up_pixel_buffer_dma_draw_box+0x4e4>
	/* Clip the box and draw only within the confines of the screen. */
	if (l_x < 0)
	{
		l_x = 0;
	}
	if (r_x >= limit_x)
 880f404:	e0fffa17 	ldw	r3,-24(fp)
 880f408:	e13ffe17 	ldw	r4,-8(fp)
 880f40c:	19000336 	bltu	r3,r4,880f41c <alt_up_pixel_buffer_dma_draw_box+0xd8>
	{
		r_x = limit_x - 1;
 880f410:	e0bffe17 	ldw	r2,-8(fp)
 880f414:	10bfffc4 	addi	r2,r2,-1
 880f418:	e0bffa15 	stw	r2,-24(fp)
	}
	if (t_y < 0)
	{
		t_y = 0;
	}
	if (b_y >= limit_y)
 880f41c:	e0fff817 	ldw	r3,-32(fp)
 880f420:	e13ffd17 	ldw	r4,-12(fp)
 880f424:	19000336 	bltu	r3,r4,880f434 <alt_up_pixel_buffer_dma_draw_box+0xf0>
	{
		b_y = limit_y - 1;
 880f428:	e0bffd17 	ldw	r2,-12(fp)
 880f42c:	10bfffc4 	addi	r2,r2,-1
 880f430:	e0bff815 	stw	r2,-32(fp)
	}

	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
 880f434:	e0800317 	ldw	r2,12(fp)
 880f438:	10800058 	cmpnei	r2,r2,1
 880f43c:	1000041e 	bne	r2,zero,880f450 <alt_up_pixel_buffer_dma_draw_box+0x10c>
		addr = pixel_buffer->back_buffer_start_address;
 880f440:	e0bfee17 	ldw	r2,-72(fp)
 880f444:	10800c17 	ldw	r2,48(r2)
 880f448:	e0bfff15 	stw	r2,-4(fp)
 880f44c:	00000306 	br	880f45c <alt_up_pixel_buffer_dma_draw_box+0x118>
	else
		addr = pixel_buffer->buffer_start_address;
 880f450:	e0bfee17 	ldw	r2,-72(fp)
 880f454:	10800b17 	ldw	r2,44(r2)
 880f458:	e0bfff15 	stw	r2,-4(fp)

	/* Draw the box using one of the addressing modes. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
 880f45c:	e0bfee17 	ldw	r2,-72(fp)
 880f460:	10800d17 	ldw	r2,52(r2)
 880f464:	1004c03a 	cmpne	r2,r2,zero
 880f468:	1000721e 	bne	r2,zero,880f634 <alt_up_pixel_buffer_dma_draw_box+0x2f0>
		/* Draw a box of a given color on the screen using the XY addressing mode. */
		register unsigned int x,y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
 880f46c:	e0bfee17 	ldw	r2,-72(fp)
 880f470:	10801317 	ldw	r2,76(r2)
 880f474:	e0bff415 	stw	r2,-48(fp)
		addr = addr + (t_y << offset_y);
 880f478:	e0bff417 	ldw	r2,-48(fp)
 880f47c:	e0fff917 	ldw	r3,-28(fp)
 880f480:	1884983a 	sll	r2,r3,r2
 880f484:	e13fff17 	ldw	r4,-4(fp)
 880f488:	2089883a 	add	r4,r4,r2
 880f48c:	e13fff15 	stw	r4,-4(fp)
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
 880f490:	e0bfee17 	ldw	r2,-72(fp)
 880f494:	10800e17 	ldw	r2,56(r2)
 880f498:	10800058 	cmpnei	r2,r2,1
 880f49c:	10001e1e 	bne	r2,zero,880f518 <alt_up_pixel_buffer_dma_draw_box+0x1d4>
			for (y = t_y; y <= b_y; y++)
 880f4a0:	e0bff917 	ldw	r2,-28(fp)
 880f4a4:	e0bff515 	stw	r2,-44(fp)
 880f4a8:	00001706 	br	880f508 <alt_up_pixel_buffer_dma_draw_box+0x1c4>
			{
				for (x = l_x; x <= r_x; x++)
 880f4ac:	e0fffb17 	ldw	r3,-20(fp)
 880f4b0:	e0fff615 	stw	r3,-40(fp)
 880f4b4:	00000806 	br	880f4d8 <alt_up_pixel_buffer_dma_draw_box+0x194>
				{
					IOWR_8DIRECT(addr, x, local_color);
 880f4b8:	e0ffff17 	ldw	r3,-4(fp)
 880f4bc:	e0bff617 	ldw	r2,-40(fp)
 880f4c0:	1885883a 	add	r2,r3,r2
 880f4c4:	e0fff717 	ldw	r3,-36(fp)
 880f4c8:	10c00025 	stbio	r3,0(r2)
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
 880f4cc:	e13ff617 	ldw	r4,-40(fp)
 880f4d0:	21000044 	addi	r4,r4,1
 880f4d4:	e13ff615 	stw	r4,-40(fp)
 880f4d8:	e0bffa17 	ldw	r2,-24(fp)
 880f4dc:	e0fff617 	ldw	r3,-40(fp)
 880f4e0:	10fff52e 	bgeu	r2,r3,880f4b8 <alt_up_pixel_buffer_dma_draw_box+0x174>
				{
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + (1 << offset_y);
 880f4e4:	e0fff417 	ldw	r3,-48(fp)
 880f4e8:	00800044 	movi	r2,1
 880f4ec:	10c4983a 	sll	r2,r2,r3
 880f4f0:	e13fff17 	ldw	r4,-4(fp)
 880f4f4:	2089883a 	add	r4,r4,r2
 880f4f8:	e13fff15 	stw	r4,-4(fp)
		addr = addr + (t_y << offset_y);
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
 880f4fc:	e0bff517 	ldw	r2,-44(fp)
 880f500:	10800044 	addi	r2,r2,1
 880f504:	e0bff515 	stw	r2,-44(fp)
 880f508:	e0fff817 	ldw	r3,-32(fp)
 880f50c:	e13ff517 	ldw	r4,-44(fp)
 880f510:	193fe62e 	bgeu	r3,r4,880f4ac <alt_up_pixel_buffer_dma_draw_box+0x168>
 880f514:	0000c406 	br	880f828 <alt_up_pixel_buffer_dma_draw_box+0x4e4>
				{
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
 880f518:	e0bfee17 	ldw	r2,-72(fp)
 880f51c:	10800e17 	ldw	r2,56(r2)
 880f520:	10800098 	cmpnei	r2,r2,2
 880f524:	1000211e 	bne	r2,zero,880f5ac <alt_up_pixel_buffer_dma_draw_box+0x268>
			for (y = t_y; y <= b_y; y++)
 880f528:	e0bff917 	ldw	r2,-28(fp)
 880f52c:	e0bff515 	stw	r2,-44(fp)
 880f530:	00001a06 	br	880f59c <alt_up_pixel_buffer_dma_draw_box+0x258>
			{
				for (x = l_x; x <= r_x; x++)
 880f534:	e0fffb17 	ldw	r3,-20(fp)
 880f538:	e0fff615 	stw	r3,-40(fp)
 880f53c:	00000b06 	br	880f56c <alt_up_pixel_buffer_dma_draw_box+0x228>
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
 880f540:	e13ff617 	ldw	r4,-40(fp)
 880f544:	e13ff617 	ldw	r4,-40(fp)
 880f548:	2105883a 	add	r2,r4,r4
 880f54c:	1007883a 	mov	r3,r2
 880f550:	e0bfff17 	ldw	r2,-4(fp)
 880f554:	1885883a 	add	r2,r3,r2
 880f558:	e0fff717 	ldw	r3,-36(fp)
 880f55c:	10c0002d 	sthio	r3,0(r2)
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
 880f560:	e0bff617 	ldw	r2,-40(fp)
 880f564:	10800044 	addi	r2,r2,1
 880f568:	e0bff615 	stw	r2,-40(fp)
 880f56c:	e0fffa17 	ldw	r3,-24(fp)
 880f570:	e13ff617 	ldw	r4,-40(fp)
 880f574:	193ff22e 	bgeu	r3,r4,880f540 <alt_up_pixel_buffer_dma_draw_box+0x1fc>
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
				}
				addr = addr + (1 << offset_y);
 880f578:	e0fff417 	ldw	r3,-48(fp)
 880f57c:	00800044 	movi	r2,1
 880f580:	10c4983a 	sll	r2,r2,r3
 880f584:	e0ffff17 	ldw	r3,-4(fp)
 880f588:	1887883a 	add	r3,r3,r2
 880f58c:	e0ffff15 	stw	r3,-4(fp)
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
 880f590:	e13ff517 	ldw	r4,-44(fp)
 880f594:	21000044 	addi	r4,r4,1
 880f598:	e13ff515 	stw	r4,-44(fp)
 880f59c:	e0bff817 	ldw	r2,-32(fp)
 880f5a0:	e0fff517 	ldw	r3,-44(fp)
 880f5a4:	10ffe32e 	bgeu	r2,r3,880f534 <alt_up_pixel_buffer_dma_draw_box+0x1f0>
 880f5a8:	00009f06 	br	880f828 <alt_up_pixel_buffer_dma_draw_box+0x4e4>
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
 880f5ac:	e13ff917 	ldw	r4,-28(fp)
 880f5b0:	e13ff515 	stw	r4,-44(fp)
 880f5b4:	00001b06 	br	880f624 <alt_up_pixel_buffer_dma_draw_box+0x2e0>
			{
				for (x = l_x; x <= r_x; x++)
 880f5b8:	e0bffb17 	ldw	r2,-20(fp)
 880f5bc:	e0bff615 	stw	r2,-40(fp)
 880f5c0:	00000c06 	br	880f5f4 <alt_up_pixel_buffer_dma_draw_box+0x2b0>
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
 880f5c4:	e0fff617 	ldw	r3,-40(fp)
 880f5c8:	e0fff617 	ldw	r3,-40(fp)
 880f5cc:	18c5883a 	add	r2,r3,r3
 880f5d0:	1085883a 	add	r2,r2,r2
 880f5d4:	1007883a 	mov	r3,r2
 880f5d8:	e0bfff17 	ldw	r2,-4(fp)
 880f5dc:	1885883a 	add	r2,r3,r2
 880f5e0:	e0fff717 	ldw	r3,-36(fp)
 880f5e4:	10c00035 	stwio	r3,0(r2)
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
 880f5e8:	e13ff617 	ldw	r4,-40(fp)
 880f5ec:	21000044 	addi	r4,r4,1
 880f5f0:	e13ff615 	stw	r4,-40(fp)
 880f5f4:	e0bffa17 	ldw	r2,-24(fp)
 880f5f8:	e0fff617 	ldw	r3,-40(fp)
 880f5fc:	10fff12e 	bgeu	r2,r3,880f5c4 <alt_up_pixel_buffer_dma_draw_box+0x280>
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
				}
				addr = addr + (1 << offset_y);
 880f600:	e0fff417 	ldw	r3,-48(fp)
 880f604:	00800044 	movi	r2,1
 880f608:	10c4983a 	sll	r2,r2,r3
 880f60c:	e13fff17 	ldw	r4,-4(fp)
 880f610:	2089883a 	add	r4,r4,r2
 880f614:	e13fff15 	stw	r4,-4(fp)
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
 880f618:	e0bff517 	ldw	r2,-44(fp)
 880f61c:	10800044 	addi	r2,r2,1
 880f620:	e0bff515 	stw	r2,-44(fp)
 880f624:	e0fff817 	ldw	r3,-32(fp)
 880f628:	e13ff517 	ldw	r4,-44(fp)
 880f62c:	193fe22e 	bgeu	r3,r4,880f5b8 <alt_up_pixel_buffer_dma_draw_box+0x274>
 880f630:	00007d06 	br	880f828 <alt_up_pixel_buffer_dma_draw_box+0x4e4>
	} else {
		/* Draw a box of a given color on the screen using the linear addressing mode. */
		register unsigned int x,y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
 880f634:	e0bfee17 	ldw	r2,-72(fp)
 880f638:	10800e17 	ldw	r2,56(r2)
 880f63c:	10800058 	cmpnei	r2,r2,1
 880f640:	1000221e 	bne	r2,zero,880f6cc <alt_up_pixel_buffer_dma_draw_box+0x388>
			addr = addr + t_y * limit_x;
 880f644:	e0fff917 	ldw	r3,-28(fp)
 880f648:	e13ffe17 	ldw	r4,-8(fp)
 880f64c:	1905383a 	mul	r2,r3,r4
 880f650:	e0ffff17 	ldw	r3,-4(fp)
 880f654:	1887883a 	add	r3,r3,r2
 880f658:	e0ffff15 	stw	r3,-4(fp)
			for (y = t_y; y <= b_y; y++)
 880f65c:	e13ff917 	ldw	r4,-28(fp)
 880f660:	e13ff215 	stw	r4,-56(fp)
 880f664:	00001506 	br	880f6bc <alt_up_pixel_buffer_dma_draw_box+0x378>
			{
				for (x = l_x; x <= r_x; x++)
 880f668:	e0bffb17 	ldw	r2,-20(fp)
 880f66c:	e0bff315 	stw	r2,-52(fp)
 880f670:	00000806 	br	880f694 <alt_up_pixel_buffer_dma_draw_box+0x350>
				{
					IOWR_8DIRECT(addr, x, local_color);
 880f674:	e0ffff17 	ldw	r3,-4(fp)
 880f678:	e0bff317 	ldw	r2,-52(fp)
 880f67c:	1885883a 	add	r2,r3,r2
 880f680:	e0fff717 	ldw	r3,-36(fp)
 880f684:	10c00025 	stbio	r3,0(r2)
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
 880f688:	e0fff317 	ldw	r3,-52(fp)
 880f68c:	18c00044 	addi	r3,r3,1
 880f690:	e0fff315 	stw	r3,-52(fp)
 880f694:	e13ffa17 	ldw	r4,-24(fp)
 880f698:	e0bff317 	ldw	r2,-52(fp)
 880f69c:	20bff52e 	bgeu	r4,r2,880f674 <alt_up_pixel_buffer_dma_draw_box+0x330>
				{
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + limit_x;
 880f6a0:	e0ffff17 	ldw	r3,-4(fp)
 880f6a4:	e13ffe17 	ldw	r4,-8(fp)
 880f6a8:	1907883a 	add	r3,r3,r4
 880f6ac:	e0ffff15 	stw	r3,-4(fp)
		register unsigned int x,y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
 880f6b0:	e0bff217 	ldw	r2,-56(fp)
 880f6b4:	10800044 	addi	r2,r2,1
 880f6b8:	e0bff215 	stw	r2,-56(fp)
 880f6bc:	e0fff817 	ldw	r3,-32(fp)
 880f6c0:	e13ff217 	ldw	r4,-56(fp)
 880f6c4:	193fe82e 	bgeu	r3,r4,880f668 <alt_up_pixel_buffer_dma_draw_box+0x324>
 880f6c8:	00005706 	br	880f828 <alt_up_pixel_buffer_dma_draw_box+0x4e4>
				{
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
 880f6cc:	e0bfee17 	ldw	r2,-72(fp)
 880f6d0:	10800e17 	ldw	r2,56(r2)
 880f6d4:	10800098 	cmpnei	r2,r2,2
 880f6d8:	1000291e 	bne	r2,zero,880f780 <alt_up_pixel_buffer_dma_draw_box+0x43c>
			limit_x = limit_x << 1;
 880f6dc:	e0fffe17 	ldw	r3,-8(fp)
 880f6e0:	e0fffe17 	ldw	r3,-8(fp)
 880f6e4:	18c5883a 	add	r2,r3,r3
 880f6e8:	e0bffe15 	stw	r2,-8(fp)
			addr = addr + t_y * limit_x;
 880f6ec:	e13ff917 	ldw	r4,-28(fp)
 880f6f0:	e0fffe17 	ldw	r3,-8(fp)
 880f6f4:	20c5383a 	mul	r2,r4,r3
 880f6f8:	e13fff17 	ldw	r4,-4(fp)
 880f6fc:	2089883a 	add	r4,r4,r2
 880f700:	e13fff15 	stw	r4,-4(fp)
			for (y = t_y; y <= b_y; y++)
 880f704:	e0bff917 	ldw	r2,-28(fp)
 880f708:	e0bff215 	stw	r2,-56(fp)
 880f70c:	00001806 	br	880f770 <alt_up_pixel_buffer_dma_draw_box+0x42c>
			{
				for (x = l_x; x <= r_x; x++)
 880f710:	e0fffb17 	ldw	r3,-20(fp)
 880f714:	e0fff315 	stw	r3,-52(fp)
 880f718:	00000b06 	br	880f748 <alt_up_pixel_buffer_dma_draw_box+0x404>
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
 880f71c:	e13ff317 	ldw	r4,-52(fp)
 880f720:	e13ff317 	ldw	r4,-52(fp)
 880f724:	2105883a 	add	r2,r4,r4
 880f728:	1007883a 	mov	r3,r2
 880f72c:	e0bfff17 	ldw	r2,-4(fp)
 880f730:	1885883a 	add	r2,r3,r2
 880f734:	e0fff717 	ldw	r3,-36(fp)
 880f738:	10c0002d 	sthio	r3,0(r2)
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
 880f73c:	e0bff317 	ldw	r2,-52(fp)
 880f740:	10800044 	addi	r2,r2,1
 880f744:	e0bff315 	stw	r2,-52(fp)
 880f748:	e0fffa17 	ldw	r3,-24(fp)
 880f74c:	e13ff317 	ldw	r4,-52(fp)
 880f750:	193ff22e 	bgeu	r3,r4,880f71c <alt_up_pixel_buffer_dma_draw_box+0x3d8>
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
				}
				addr = addr + limit_x;
 880f754:	e0bfff17 	ldw	r2,-4(fp)
 880f758:	e0fffe17 	ldw	r3,-8(fp)
 880f75c:	10c5883a 	add	r2,r2,r3
 880f760:	e0bfff15 	stw	r2,-4(fp)
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
 880f764:	e13ff217 	ldw	r4,-56(fp)
 880f768:	21000044 	addi	r4,r4,1
 880f76c:	e13ff215 	stw	r4,-56(fp)
 880f770:	e0bff817 	ldw	r2,-32(fp)
 880f774:	e0fff217 	ldw	r3,-56(fp)
 880f778:	10ffe52e 	bgeu	r2,r3,880f710 <alt_up_pixel_buffer_dma_draw_box+0x3cc>
 880f77c:	00002a06 	br	880f828 <alt_up_pixel_buffer_dma_draw_box+0x4e4>
				addr = addr + limit_x;
			}
		}
		else
		{
			limit_x = limit_x << 2;
 880f780:	e13ffe17 	ldw	r4,-8(fp)
 880f784:	e13ffe17 	ldw	r4,-8(fp)
 880f788:	2105883a 	add	r2,r4,r4
 880f78c:	1085883a 	add	r2,r2,r2
 880f790:	e0bffe15 	stw	r2,-8(fp)
			addr = addr + t_y * limit_x;
 880f794:	e0fff917 	ldw	r3,-28(fp)
 880f798:	e13ffe17 	ldw	r4,-8(fp)
 880f79c:	1905383a 	mul	r2,r3,r4
 880f7a0:	e0ffff17 	ldw	r3,-4(fp)
 880f7a4:	1887883a 	add	r3,r3,r2
 880f7a8:	e0ffff15 	stw	r3,-4(fp)
			for (y = t_y; y <= b_y; y++)
 880f7ac:	e13ff917 	ldw	r4,-28(fp)
 880f7b0:	e13ff215 	stw	r4,-56(fp)
 880f7b4:	00001906 	br	880f81c <alt_up_pixel_buffer_dma_draw_box+0x4d8>
			{
				for (x = l_x; x <= r_x; x++)
 880f7b8:	e0bffb17 	ldw	r2,-20(fp)
 880f7bc:	e0bff315 	stw	r2,-52(fp)
 880f7c0:	00000c06 	br	880f7f4 <alt_up_pixel_buffer_dma_draw_box+0x4b0>
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
 880f7c4:	e0fff317 	ldw	r3,-52(fp)
 880f7c8:	e0fff317 	ldw	r3,-52(fp)
 880f7cc:	18c5883a 	add	r2,r3,r3
 880f7d0:	1085883a 	add	r2,r2,r2
 880f7d4:	1007883a 	mov	r3,r2
 880f7d8:	e0bfff17 	ldw	r2,-4(fp)
 880f7dc:	1885883a 	add	r2,r3,r2
 880f7e0:	e0fff717 	ldw	r3,-36(fp)
 880f7e4:	10c00035 	stwio	r3,0(r2)
		{
			limit_x = limit_x << 2;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
 880f7e8:	e13ff317 	ldw	r4,-52(fp)
 880f7ec:	21000044 	addi	r4,r4,1
 880f7f0:	e13ff315 	stw	r4,-52(fp)
 880f7f4:	e0bffa17 	ldw	r2,-24(fp)
 880f7f8:	e0fff317 	ldw	r3,-52(fp)
 880f7fc:	10fff12e 	bgeu	r2,r3,880f7c4 <alt_up_pixel_buffer_dma_draw_box+0x480>
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
				}
				addr = addr + limit_x;
 880f800:	e13fff17 	ldw	r4,-4(fp)
 880f804:	e0bffe17 	ldw	r2,-8(fp)
 880f808:	2089883a 	add	r4,r4,r2
 880f80c:	e13fff15 	stw	r4,-4(fp)
		}
		else
		{
			limit_x = limit_x << 2;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
 880f810:	e0fff217 	ldw	r3,-56(fp)
 880f814:	18c00044 	addi	r3,r3,1
 880f818:	e0fff215 	stw	r3,-56(fp)
 880f81c:	e13ff817 	ldw	r4,-32(fp)
 880f820:	e0bff217 	ldw	r2,-56(fp)
 880f824:	20bfe42e 	bgeu	r4,r2,880f7b8 <alt_up_pixel_buffer_dma_draw_box+0x474>
				}
				addr = addr + limit_x;
			}
		}
	}
}
 880f828:	e037883a 	mov	sp,fp
 880f82c:	df000017 	ldw	fp,0(sp)
 880f830:	dec00104 	addi	sp,sp,4
 880f834:	f800283a 	ret

0880f838 <alt_up_pixel_buffer_dma_draw_hline>:

void alt_up_pixel_buffer_dma_draw_hline(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int x1, int y, int color, int backbuffer)
/* This method draws a horizontal line. This method is faster than using the line method because we know the direction of the line. */
{
 880f838:	defff204 	addi	sp,sp,-56
 880f83c:	df000d15 	stw	fp,52(sp)
 880f840:	df000d04 	addi	fp,sp,52
 880f844:	e13ff315 	stw	r4,-52(fp)
 880f848:	e17ff415 	stw	r5,-48(fp)
 880f84c:	e1bff515 	stw	r6,-44(fp)
 880f850:	e1fff615 	stw	r7,-40(fp)
	register unsigned int addr;
	register unsigned int limit_x = pixel_buffer->x_resolution;
 880f854:	e0bff317 	ldw	r2,-52(fp)
 880f858:	10800f17 	ldw	r2,60(r2)
 880f85c:	e0bffe15 	stw	r2,-8(fp)
	register unsigned int limit_y = pixel_buffer->y_resolution;
 880f860:	e0bff317 	ldw	r2,-52(fp)
 880f864:	10801017 	ldw	r2,64(r2)
 880f868:	e0bffd15 	stw	r2,-12(fp)
	register unsigned int temp;
	register unsigned int l_x = x0;
 880f86c:	e0bff417 	ldw	r2,-48(fp)
 880f870:	e0bffc15 	stw	r2,-16(fp)
	register unsigned int r_x = x1;
 880f874:	e0fff517 	ldw	r3,-44(fp)
 880f878:	e0fffb15 	stw	r3,-20(fp)
	register unsigned int line_y = y;
 880f87c:	e13ff617 	ldw	r4,-40(fp)
 880f880:	e13ffa15 	stw	r4,-24(fp)
	register unsigned int local_color = color;
 880f884:	e0800117 	ldw	r2,4(fp)
 880f888:	e0bff915 	stw	r2,-28(fp)
	
	/* Check coordinates */
	if (l_x > r_x)
 880f88c:	e0fffb17 	ldw	r3,-20(fp)
 880f890:	e13ffc17 	ldw	r4,-16(fp)
 880f894:	1900042e 	bgeu	r3,r4,880f8a8 <alt_up_pixel_buffer_dma_draw_hline+0x70>
	{
		temp = l_x;
 880f898:	e0bffc17 	ldw	r2,-16(fp)
		l_x = r_x;
 880f89c:	e0fffb17 	ldw	r3,-20(fp)
 880f8a0:	e0fffc15 	stw	r3,-16(fp)
		r_x = temp;
 880f8a4:	e0bffb15 	stw	r2,-20(fp)
	}
	if ((l_x >= limit_x) || (line_y >= limit_y) || (r_x < 0) || (line_y < 0))
 880f8a8:	e13ffc17 	ldw	r4,-16(fp)
 880f8ac:	e0bffe17 	ldw	r2,-8(fp)
 880f8b0:	2080b12e 	bgeu	r4,r2,880fb78 <alt_up_pixel_buffer_dma_draw_hline+0x340>
 880f8b4:	e0fffa17 	ldw	r3,-24(fp)
 880f8b8:	e13ffd17 	ldw	r4,-12(fp)
 880f8bc:	19000136 	bltu	r3,r4,880f8c4 <alt_up_pixel_buffer_dma_draw_hline+0x8c>
	{
		/* Drawing outside of the window, so don't bother. */
		return;
 880f8c0:	0000ad06 	br	880fb78 <alt_up_pixel_buffer_dma_draw_hline+0x340>
	/* Clip the box and draw only within the confines of the screen. */
	if (l_x < 0)
	{
		l_x = 0;
	}
	if (r_x >= limit_x)
 880f8c4:	e0bffb17 	ldw	r2,-20(fp)
 880f8c8:	e0fffe17 	ldw	r3,-8(fp)
 880f8cc:	10c00336 	bltu	r2,r3,880f8dc <alt_up_pixel_buffer_dma_draw_hline+0xa4>
	{
		r_x = limit_x - 1;
 880f8d0:	e13ffe17 	ldw	r4,-8(fp)
 880f8d4:	213fffc4 	addi	r4,r4,-1
 880f8d8:	e13ffb15 	stw	r4,-20(fp)
	}

	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
 880f8dc:	e0800217 	ldw	r2,8(fp)
 880f8e0:	10800058 	cmpnei	r2,r2,1
 880f8e4:	1000041e 	bne	r2,zero,880f8f8 <alt_up_pixel_buffer_dma_draw_hline+0xc0>
		addr = pixel_buffer->back_buffer_start_address;
 880f8e8:	e0bff317 	ldw	r2,-52(fp)
 880f8ec:	10800c17 	ldw	r2,48(r2)
 880f8f0:	e0bfff15 	stw	r2,-4(fp)
 880f8f4:	00000306 	br	880f904 <alt_up_pixel_buffer_dma_draw_hline+0xcc>
	else
		addr = pixel_buffer->buffer_start_address;
 880f8f8:	e0bff317 	ldw	r2,-52(fp)
 880f8fc:	10800b17 	ldw	r2,44(r2)
 880f900:	e0bfff15 	stw	r2,-4(fp)

	/* Draw a horizontal line using one of the addressing modes. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
 880f904:	e0bff317 	ldw	r2,-52(fp)
 880f908:	10800d17 	ldw	r2,52(r2)
 880f90c:	1004c03a 	cmpne	r2,r2,zero
 880f910:	1000431e 	bne	r2,zero,880fa20 <alt_up_pixel_buffer_dma_draw_hline+0x1e8>
		/* Draw a horizontal line of a given color on the screen using the XY addressing mode. */
		register unsigned int x;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
 880f914:	e0bff317 	ldw	r2,-52(fp)
 880f918:	10801317 	ldw	r2,76(r2)
		addr = addr + (line_y << offset_y);
 880f91c:	e0fffa17 	ldw	r3,-24(fp)
 880f920:	1884983a 	sll	r2,r3,r2
 880f924:	e13fff17 	ldw	r4,-4(fp)
 880f928:	2089883a 	add	r4,r4,r2
 880f92c:	e13fff15 	stw	r4,-4(fp)
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a horizontal line. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
 880f930:	e0bff317 	ldw	r2,-52(fp)
 880f934:	10800e17 	ldw	r2,56(r2)
 880f938:	10800058 	cmpnei	r2,r2,1
 880f93c:	10000f1e 	bne	r2,zero,880f97c <alt_up_pixel_buffer_dma_draw_hline+0x144>
			for (x = l_x; x <= r_x; x++)
 880f940:	e0bffc17 	ldw	r2,-16(fp)
 880f944:	e0bff815 	stw	r2,-32(fp)
 880f948:	00000806 	br	880f96c <alt_up_pixel_buffer_dma_draw_hline+0x134>
			{
				IOWR_8DIRECT(addr, x, local_color);
 880f94c:	e0ffff17 	ldw	r3,-4(fp)
 880f950:	e0bff817 	ldw	r2,-32(fp)
 880f954:	1885883a 	add	r2,r3,r2
 880f958:	e0fff917 	ldw	r3,-28(fp)
 880f95c:	10c00025 	stbio	r3,0(r2)
		addr = addr + (line_y << offset_y);
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a horizontal line. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (x = l_x; x <= r_x; x++)
 880f960:	e0fff817 	ldw	r3,-32(fp)
 880f964:	18c00044 	addi	r3,r3,1
 880f968:	e0fff815 	stw	r3,-32(fp)
 880f96c:	e13ffb17 	ldw	r4,-20(fp)
 880f970:	e0bff817 	ldw	r2,-32(fp)
 880f974:	20bff52e 	bgeu	r4,r2,880f94c <alt_up_pixel_buffer_dma_draw_hline+0x114>
 880f978:	00007f06 	br	880fb78 <alt_up_pixel_buffer_dma_draw_hline+0x340>
			{
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
 880f97c:	e0bff317 	ldw	r2,-52(fp)
 880f980:	10800e17 	ldw	r2,56(r2)
 880f984:	10800098 	cmpnei	r2,r2,2
 880f988:	1000121e 	bne	r2,zero,880f9d4 <alt_up_pixel_buffer_dma_draw_hline+0x19c>
			for (x = l_x; x <= r_x; x++)
 880f98c:	e0fffc17 	ldw	r3,-16(fp)
 880f990:	e0fff815 	stw	r3,-32(fp)
 880f994:	00000b06 	br	880f9c4 <alt_up_pixel_buffer_dma_draw_hline+0x18c>
			{
				IOWR_16DIRECT(addr, x << 1, local_color);
 880f998:	e13ff817 	ldw	r4,-32(fp)
 880f99c:	e13ff817 	ldw	r4,-32(fp)
 880f9a0:	2105883a 	add	r2,r4,r4
 880f9a4:	1007883a 	mov	r3,r2
 880f9a8:	e0bfff17 	ldw	r2,-4(fp)
 880f9ac:	1885883a 	add	r2,r3,r2
 880f9b0:	e0fff917 	ldw	r3,-28(fp)
 880f9b4:	10c0002d 	sthio	r3,0(r2)
			for (x = l_x; x <= r_x; x++)
			{
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (x = l_x; x <= r_x; x++)
 880f9b8:	e0bff817 	ldw	r2,-32(fp)
 880f9bc:	10800044 	addi	r2,r2,1
 880f9c0:	e0bff815 	stw	r2,-32(fp)
 880f9c4:	e0fffb17 	ldw	r3,-20(fp)
 880f9c8:	e13ff817 	ldw	r4,-32(fp)
 880f9cc:	193ff22e 	bgeu	r3,r4,880f998 <alt_up_pixel_buffer_dma_draw_hline+0x160>
 880f9d0:	00006906 	br	880fb78 <alt_up_pixel_buffer_dma_draw_hline+0x340>
				IOWR_16DIRECT(addr, x << 1, local_color);
			}
		}
		else
		{
			for (x = l_x; x <= r_x; x++)
 880f9d4:	e0bffc17 	ldw	r2,-16(fp)
 880f9d8:	e0bff815 	stw	r2,-32(fp)
 880f9dc:	00000c06 	br	880fa10 <alt_up_pixel_buffer_dma_draw_hline+0x1d8>
			{
				IOWR_32DIRECT(addr, x << 2, local_color);
 880f9e0:	e0fff817 	ldw	r3,-32(fp)
 880f9e4:	e0fff817 	ldw	r3,-32(fp)
 880f9e8:	18c5883a 	add	r2,r3,r3
 880f9ec:	1085883a 	add	r2,r2,r2
 880f9f0:	1007883a 	mov	r3,r2
 880f9f4:	e0bfff17 	ldw	r2,-4(fp)
 880f9f8:	1885883a 	add	r2,r3,r2
 880f9fc:	e0fff917 	ldw	r3,-28(fp)
 880fa00:	10c00035 	stwio	r3,0(r2)
				IOWR_16DIRECT(addr, x << 1, local_color);
			}
		}
		else
		{
			for (x = l_x; x <= r_x; x++)
 880fa04:	e13ff817 	ldw	r4,-32(fp)
 880fa08:	21000044 	addi	r4,r4,1
 880fa0c:	e13ff815 	stw	r4,-32(fp)
 880fa10:	e0bffb17 	ldw	r2,-20(fp)
 880fa14:	e0fff817 	ldw	r3,-32(fp)
 880fa18:	10fff12e 	bgeu	r2,r3,880f9e0 <alt_up_pixel_buffer_dma_draw_hline+0x1a8>
 880fa1c:	00005606 	br	880fb78 <alt_up_pixel_buffer_dma_draw_hline+0x340>
	} else {
		/* Draw a horizontal line of a given color on the screen using the linear addressing mode. */
		register unsigned int x;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
 880fa20:	e0bff317 	ldw	r2,-52(fp)
 880fa24:	10800e17 	ldw	r2,56(r2)
 880fa28:	10800058 	cmpnei	r2,r2,1
 880fa2c:	1000151e 	bne	r2,zero,880fa84 <alt_up_pixel_buffer_dma_draw_hline+0x24c>
			addr = addr + line_y * limit_x;
 880fa30:	e13ffa17 	ldw	r4,-24(fp)
 880fa34:	e0fffe17 	ldw	r3,-8(fp)
 880fa38:	20c5383a 	mul	r2,r4,r3
 880fa3c:	e13fff17 	ldw	r4,-4(fp)
 880fa40:	2089883a 	add	r4,r4,r2
 880fa44:	e13fff15 	stw	r4,-4(fp)
			for (x = l_x; x <= r_x; x++)
 880fa48:	e0bffc17 	ldw	r2,-16(fp)
 880fa4c:	e0bff715 	stw	r2,-36(fp)
 880fa50:	00000806 	br	880fa74 <alt_up_pixel_buffer_dma_draw_hline+0x23c>
			{
				IOWR_8DIRECT(addr, x, local_color);
 880fa54:	e0ffff17 	ldw	r3,-4(fp)
 880fa58:	e0bff717 	ldw	r2,-36(fp)
 880fa5c:	1885883a 	add	r2,r3,r2
 880fa60:	e0fff917 	ldw	r3,-28(fp)
 880fa64:	10c00025 	stbio	r3,0(r2)
		register unsigned int x;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + line_y * limit_x;
			for (x = l_x; x <= r_x; x++)
 880fa68:	e0fff717 	ldw	r3,-36(fp)
 880fa6c:	18c00044 	addi	r3,r3,1
 880fa70:	e0fff715 	stw	r3,-36(fp)
 880fa74:	e13ffb17 	ldw	r4,-20(fp)
 880fa78:	e0bff717 	ldw	r2,-36(fp)
 880fa7c:	20bff52e 	bgeu	r4,r2,880fa54 <alt_up_pixel_buffer_dma_draw_hline+0x21c>
 880fa80:	00003d06 	br	880fb78 <alt_up_pixel_buffer_dma_draw_hline+0x340>
			{
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
 880fa84:	e0bff317 	ldw	r2,-52(fp)
 880fa88:	10800e17 	ldw	r2,56(r2)
 880fa8c:	10800098 	cmpnei	r2,r2,2
 880fa90:	10001c1e 	bne	r2,zero,880fb04 <alt_up_pixel_buffer_dma_draw_hline+0x2cc>
			limit_x = limit_x << 1;
 880fa94:	e0fffe17 	ldw	r3,-8(fp)
 880fa98:	e0fffe17 	ldw	r3,-8(fp)
 880fa9c:	18c5883a 	add	r2,r3,r3
 880faa0:	e0bffe15 	stw	r2,-8(fp)
			addr = addr + line_y * limit_x;
 880faa4:	e13ffa17 	ldw	r4,-24(fp)
 880faa8:	e0fffe17 	ldw	r3,-8(fp)
 880faac:	20c5383a 	mul	r2,r4,r3
 880fab0:	e13fff17 	ldw	r4,-4(fp)
 880fab4:	2089883a 	add	r4,r4,r2
 880fab8:	e13fff15 	stw	r4,-4(fp)
			for (x = l_x; x <= r_x; x++)
 880fabc:	e0bffc17 	ldw	r2,-16(fp)
 880fac0:	e0bff715 	stw	r2,-36(fp)
 880fac4:	00000b06 	br	880faf4 <alt_up_pixel_buffer_dma_draw_hline+0x2bc>
			{
				IOWR_16DIRECT(addr, x << 1, local_color);
 880fac8:	e0fff717 	ldw	r3,-36(fp)
 880facc:	e0fff717 	ldw	r3,-36(fp)
 880fad0:	18c5883a 	add	r2,r3,r3
 880fad4:	1007883a 	mov	r3,r2
 880fad8:	e0bfff17 	ldw	r2,-4(fp)
 880fadc:	1885883a 	add	r2,r3,r2
 880fae0:	e0fff917 	ldw	r3,-28(fp)
 880fae4:	10c0002d 	sthio	r3,0(r2)
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + line_y * limit_x;
			for (x = l_x; x <= r_x; x++)
 880fae8:	e13ff717 	ldw	r4,-36(fp)
 880faec:	21000044 	addi	r4,r4,1
 880faf0:	e13ff715 	stw	r4,-36(fp)
 880faf4:	e0bffb17 	ldw	r2,-20(fp)
 880faf8:	e0fff717 	ldw	r3,-36(fp)
 880fafc:	10fff22e 	bgeu	r2,r3,880fac8 <alt_up_pixel_buffer_dma_draw_hline+0x290>
 880fb00:	00001d06 	br	880fb78 <alt_up_pixel_buffer_dma_draw_hline+0x340>
				IOWR_16DIRECT(addr, x << 1, local_color);
			}
		}
		else
		{
			limit_x = limit_x << 2;
 880fb04:	e13ffe17 	ldw	r4,-8(fp)
 880fb08:	e13ffe17 	ldw	r4,-8(fp)
 880fb0c:	2105883a 	add	r2,r4,r4
 880fb10:	1085883a 	add	r2,r2,r2
 880fb14:	e0bffe15 	stw	r2,-8(fp)
			addr = addr + line_y * limit_x;
 880fb18:	e0fffa17 	ldw	r3,-24(fp)
 880fb1c:	e13ffe17 	ldw	r4,-8(fp)
 880fb20:	1905383a 	mul	r2,r3,r4
 880fb24:	e0ffff17 	ldw	r3,-4(fp)
 880fb28:	1887883a 	add	r3,r3,r2
 880fb2c:	e0ffff15 	stw	r3,-4(fp)
			for (x = l_x; x <= r_x; x++)
 880fb30:	e13ffc17 	ldw	r4,-16(fp)
 880fb34:	e13ff715 	stw	r4,-36(fp)
 880fb38:	00000c06 	br	880fb6c <alt_up_pixel_buffer_dma_draw_hline+0x334>
			{
				IOWR_32DIRECT(addr, x << 2, local_color);
 880fb3c:	e0fff717 	ldw	r3,-36(fp)
 880fb40:	e0fff717 	ldw	r3,-36(fp)
 880fb44:	18c5883a 	add	r2,r3,r3
 880fb48:	1085883a 	add	r2,r2,r2
 880fb4c:	1007883a 	mov	r3,r2
 880fb50:	e0bfff17 	ldw	r2,-4(fp)
 880fb54:	1885883a 	add	r2,r3,r2
 880fb58:	e0fff917 	ldw	r3,-28(fp)
 880fb5c:	10c00035 	stwio	r3,0(r2)
		}
		else
		{
			limit_x = limit_x << 2;
			addr = addr + line_y * limit_x;
			for (x = l_x; x <= r_x; x++)
 880fb60:	e13ff717 	ldw	r4,-36(fp)
 880fb64:	21000044 	addi	r4,r4,1
 880fb68:	e13ff715 	stw	r4,-36(fp)
 880fb6c:	e0bffb17 	ldw	r2,-20(fp)
 880fb70:	e0fff717 	ldw	r3,-36(fp)
 880fb74:	10fff12e 	bgeu	r2,r3,880fb3c <alt_up_pixel_buffer_dma_draw_hline+0x304>
				IOWR_32DIRECT(addr, x << 2, local_color);
			}
			addr = addr + limit_x;
		}
	}
}
 880fb78:	e037883a 	mov	sp,fp
 880fb7c:	df000017 	ldw	fp,0(sp)
 880fb80:	dec00104 	addi	sp,sp,4
 880fb84:	f800283a 	ret

0880fb88 <alt_up_pixel_buffer_dma_draw_vline>:


void alt_up_pixel_buffer_dma_draw_vline(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x, int y0, int y1, int color, int backbuffer)
/* This method draws a vertical line. This method is faster than using the line method because we know the direction of the line. */

{
 880fb88:	defff104 	addi	sp,sp,-60
 880fb8c:	df000e15 	stw	fp,56(sp)
 880fb90:	df000e04 	addi	fp,sp,56
 880fb94:	e13ff215 	stw	r4,-56(fp)
 880fb98:	e17ff315 	stw	r5,-52(fp)
 880fb9c:	e1bff415 	stw	r6,-48(fp)
 880fba0:	e1fff515 	stw	r7,-44(fp)
	register unsigned int addr;
	register unsigned int limit_x = pixel_buffer->x_resolution;
 880fba4:	e0bff217 	ldw	r2,-56(fp)
 880fba8:	10800f17 	ldw	r2,60(r2)
 880fbac:	e0bffe15 	stw	r2,-8(fp)
	register unsigned int limit_y = pixel_buffer->y_resolution;
 880fbb0:	e0bff217 	ldw	r2,-56(fp)
 880fbb4:	10801017 	ldw	r2,64(r2)
 880fbb8:	e0bffd15 	stw	r2,-12(fp)
	register unsigned int temp;
	register unsigned int line_x = x;
 880fbbc:	e0bff317 	ldw	r2,-52(fp)
 880fbc0:	e0bffc15 	stw	r2,-16(fp)
	register unsigned int t_y = y0;
 880fbc4:	e0fff417 	ldw	r3,-48(fp)
 880fbc8:	e0fffb15 	stw	r3,-20(fp)
	register unsigned int b_y = y1;
 880fbcc:	e13ff517 	ldw	r4,-44(fp)
 880fbd0:	e13ffa15 	stw	r4,-24(fp)
	register unsigned int local_color = color;
 880fbd4:	e0800117 	ldw	r2,4(fp)
 880fbd8:	e0bff915 	stw	r2,-28(fp)
	
	/* Check coordinates */
	if (t_y > b_y)
 880fbdc:	e0fffa17 	ldw	r3,-24(fp)
 880fbe0:	e13ffb17 	ldw	r4,-20(fp)
 880fbe4:	1900042e 	bgeu	r3,r4,880fbf8 <alt_up_pixel_buffer_dma_draw_vline+0x70>
	{
		temp = t_y;
 880fbe8:	e0bffb17 	ldw	r2,-20(fp)
		t_y = b_y;
 880fbec:	e0fffa17 	ldw	r3,-24(fp)
 880fbf0:	e0fffb15 	stw	r3,-20(fp)
		b_y = temp;
 880fbf4:	e0bffa15 	stw	r2,-24(fp)
	}
	if ((line_x >= limit_x) || (t_y >= limit_y) || (line_x < 0) || (b_y < 0))
 880fbf8:	e13ffc17 	ldw	r4,-16(fp)
 880fbfc:	e0bffe17 	ldw	r2,-8(fp)
 880fc00:	2080d12e 	bgeu	r4,r2,880ff48 <alt_up_pixel_buffer_dma_draw_vline+0x3c0>
 880fc04:	e0fffb17 	ldw	r3,-20(fp)
 880fc08:	e13ffd17 	ldw	r4,-12(fp)
 880fc0c:	19000136 	bltu	r3,r4,880fc14 <alt_up_pixel_buffer_dma_draw_vline+0x8c>
	{
		/* Drawing outside of the window, so don't bother. */
		return;
 880fc10:	0000cd06 	br	880ff48 <alt_up_pixel_buffer_dma_draw_vline+0x3c0>
	/* Clip the box and draw only within the confines of the screen. */
	if (t_y < 0)
	{
		t_y = 0;
	}
	if (b_y >= limit_y)
 880fc14:	e0bffa17 	ldw	r2,-24(fp)
 880fc18:	e0fffd17 	ldw	r3,-12(fp)
 880fc1c:	10c00336 	bltu	r2,r3,880fc2c <alt_up_pixel_buffer_dma_draw_vline+0xa4>
	{
		b_y = limit_y - 1;
 880fc20:	e13ffd17 	ldw	r4,-12(fp)
 880fc24:	213fffc4 	addi	r4,r4,-1
 880fc28:	e13ffa15 	stw	r4,-24(fp)
	}

	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
 880fc2c:	e0800217 	ldw	r2,8(fp)
 880fc30:	10800058 	cmpnei	r2,r2,1
 880fc34:	1000041e 	bne	r2,zero,880fc48 <alt_up_pixel_buffer_dma_draw_vline+0xc0>
		addr = pixel_buffer->back_buffer_start_address;
 880fc38:	e0bff217 	ldw	r2,-56(fp)
 880fc3c:	10800c17 	ldw	r2,48(r2)
 880fc40:	e0bfff15 	stw	r2,-4(fp)
 880fc44:	00000306 	br	880fc54 <alt_up_pixel_buffer_dma_draw_vline+0xcc>
	else
		addr = pixel_buffer->buffer_start_address;
 880fc48:	e0bff217 	ldw	r2,-56(fp)
 880fc4c:	10800b17 	ldw	r2,44(r2)
 880fc50:	e0bfff15 	stw	r2,-4(fp)

	/* Draw the vertical line using one of the addressing modes. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
 880fc54:	e0bff217 	ldw	r2,-56(fp)
 880fc58:	10800d17 	ldw	r2,52(r2)
 880fc5c:	1004c03a 	cmpne	r2,r2,zero
 880fc60:	1000571e 	bne	r2,zero,880fdc0 <alt_up_pixel_buffer_dma_draw_vline+0x238>
		/* Draw a vertical line of a given color on the screen using the XY addressing mode. */
		register unsigned int y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
 880fc64:	e0bff217 	ldw	r2,-56(fp)
 880fc68:	10801317 	ldw	r2,76(r2)
 880fc6c:	e0bff715 	stw	r2,-36(fp)
		addr = addr + (t_y << offset_y);
 880fc70:	e0bff717 	ldw	r2,-36(fp)
 880fc74:	e0fffb17 	ldw	r3,-20(fp)
 880fc78:	1884983a 	sll	r2,r3,r2
 880fc7c:	e13fff17 	ldw	r4,-4(fp)
 880fc80:	2089883a 	add	r4,r4,r2
 880fc84:	e13fff15 	stw	r4,-4(fp)
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
 880fc88:	e0bff217 	ldw	r2,-56(fp)
 880fc8c:	10800e17 	ldw	r2,56(r2)
 880fc90:	10800058 	cmpnei	r2,r2,1
 880fc94:	1000151e 	bne	r2,zero,880fcec <alt_up_pixel_buffer_dma_draw_vline+0x164>
			for (y = t_y; y <= b_y; y++)
 880fc98:	e0bffb17 	ldw	r2,-20(fp)
 880fc9c:	e0bff815 	stw	r2,-32(fp)
 880fca0:	00000e06 	br	880fcdc <alt_up_pixel_buffer_dma_draw_vline+0x154>
			{
				IOWR_8DIRECT(addr, line_x, local_color);
 880fca4:	e0ffff17 	ldw	r3,-4(fp)
 880fca8:	e0bffc17 	ldw	r2,-16(fp)
 880fcac:	1885883a 	add	r2,r3,r2
 880fcb0:	e0fff917 	ldw	r3,-28(fp)
 880fcb4:	10c00025 	stbio	r3,0(r2)
				addr = addr + (1 << offset_y);
 880fcb8:	e0fff717 	ldw	r3,-36(fp)
 880fcbc:	00800044 	movi	r2,1
 880fcc0:	10c4983a 	sll	r2,r2,r3
 880fcc4:	e0ffff17 	ldw	r3,-4(fp)
 880fcc8:	1887883a 	add	r3,r3,r2
 880fccc:	e0ffff15 	stw	r3,-4(fp)
		addr = addr + (t_y << offset_y);
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
 880fcd0:	e13ff817 	ldw	r4,-32(fp)
 880fcd4:	21000044 	addi	r4,r4,1
 880fcd8:	e13ff815 	stw	r4,-32(fp)
 880fcdc:	e0bffa17 	ldw	r2,-24(fp)
 880fce0:	e0fff817 	ldw	r3,-32(fp)
 880fce4:	10ffef2e 	bgeu	r2,r3,880fca4 <alt_up_pixel_buffer_dma_draw_vline+0x11c>
 880fce8:	00009706 	br	880ff48 <alt_up_pixel_buffer_dma_draw_vline+0x3c0>
			{
				IOWR_8DIRECT(addr, line_x, local_color);
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
 880fcec:	e0bff217 	ldw	r2,-56(fp)
 880fcf0:	10800e17 	ldw	r2,56(r2)
 880fcf4:	10800098 	cmpnei	r2,r2,2
 880fcf8:	1000181e 	bne	r2,zero,880fd5c <alt_up_pixel_buffer_dma_draw_vline+0x1d4>
			for (y = t_y; y <= b_y; y++)
 880fcfc:	e13ffb17 	ldw	r4,-20(fp)
 880fd00:	e13ff815 	stw	r4,-32(fp)
 880fd04:	00001106 	br	880fd4c <alt_up_pixel_buffer_dma_draw_vline+0x1c4>
			{
				IOWR_16DIRECT(addr, line_x << 1, local_color);
 880fd08:	e0fffc17 	ldw	r3,-16(fp)
 880fd0c:	e0fffc17 	ldw	r3,-16(fp)
 880fd10:	18c5883a 	add	r2,r3,r3
 880fd14:	1007883a 	mov	r3,r2
 880fd18:	e0bfff17 	ldw	r2,-4(fp)
 880fd1c:	1885883a 	add	r2,r3,r2
 880fd20:	e0fff917 	ldw	r3,-28(fp)
 880fd24:	10c0002d 	sthio	r3,0(r2)
				addr = addr + (1 << offset_y);
 880fd28:	e0fff717 	ldw	r3,-36(fp)
 880fd2c:	00800044 	movi	r2,1
 880fd30:	10c4983a 	sll	r2,r2,r3
 880fd34:	e13fff17 	ldw	r4,-4(fp)
 880fd38:	2089883a 	add	r4,r4,r2
 880fd3c:	e13fff15 	stw	r4,-4(fp)
			{
				IOWR_8DIRECT(addr, line_x, local_color);
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
 880fd40:	e0bff817 	ldw	r2,-32(fp)
 880fd44:	10800044 	addi	r2,r2,1
 880fd48:	e0bff815 	stw	r2,-32(fp)
 880fd4c:	e0fffa17 	ldw	r3,-24(fp)
 880fd50:	e13ff817 	ldw	r4,-32(fp)
 880fd54:	193fec2e 	bgeu	r3,r4,880fd08 <alt_up_pixel_buffer_dma_draw_vline+0x180>
 880fd58:	00007b06 	br	880ff48 <alt_up_pixel_buffer_dma_draw_vline+0x3c0>
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
 880fd5c:	e0bffb17 	ldw	r2,-20(fp)
 880fd60:	e0bff815 	stw	r2,-32(fp)
 880fd64:	00001206 	br	880fdb0 <alt_up_pixel_buffer_dma_draw_vline+0x228>
			{
				IOWR_32DIRECT(addr, line_x << 2, local_color);
 880fd68:	e0fffc17 	ldw	r3,-16(fp)
 880fd6c:	e0fffc17 	ldw	r3,-16(fp)
 880fd70:	18c5883a 	add	r2,r3,r3
 880fd74:	1085883a 	add	r2,r2,r2
 880fd78:	1007883a 	mov	r3,r2
 880fd7c:	e0bfff17 	ldw	r2,-4(fp)
 880fd80:	1885883a 	add	r2,r3,r2
 880fd84:	e0fff917 	ldw	r3,-28(fp)
 880fd88:	10c00035 	stwio	r3,0(r2)
				addr = addr + (1 << offset_y);
 880fd8c:	e0fff717 	ldw	r3,-36(fp)
 880fd90:	00800044 	movi	r2,1
 880fd94:	10c4983a 	sll	r2,r2,r3
 880fd98:	e13fff17 	ldw	r4,-4(fp)
 880fd9c:	2089883a 	add	r4,r4,r2
 880fda0:	e13fff15 	stw	r4,-4(fp)
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
 880fda4:	e0bff817 	ldw	r2,-32(fp)
 880fda8:	10800044 	addi	r2,r2,1
 880fdac:	e0bff815 	stw	r2,-32(fp)
 880fdb0:	e0fffa17 	ldw	r3,-24(fp)
 880fdb4:	e13ff817 	ldw	r4,-32(fp)
 880fdb8:	193feb2e 	bgeu	r3,r4,880fd68 <alt_up_pixel_buffer_dma_draw_vline+0x1e0>
 880fdbc:	00006206 	br	880ff48 <alt_up_pixel_buffer_dma_draw_vline+0x3c0>
	} else {
		/* Draw a vertical line of a given color on the screen using the linear addressing mode. */
		register unsigned int y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
 880fdc0:	e0bff217 	ldw	r2,-56(fp)
 880fdc4:	10800e17 	ldw	r2,56(r2)
 880fdc8:	10800058 	cmpnei	r2,r2,1
 880fdcc:	1000191e 	bne	r2,zero,880fe34 <alt_up_pixel_buffer_dma_draw_vline+0x2ac>
			addr = addr + t_y * limit_x;
 880fdd0:	e0fffb17 	ldw	r3,-20(fp)
 880fdd4:	e13ffe17 	ldw	r4,-8(fp)
 880fdd8:	1905383a 	mul	r2,r3,r4
 880fddc:	e0ffff17 	ldw	r3,-4(fp)
 880fde0:	1887883a 	add	r3,r3,r2
 880fde4:	e0ffff15 	stw	r3,-4(fp)
			for (y = t_y; y <= b_y; y++)
 880fde8:	e13ffb17 	ldw	r4,-20(fp)
 880fdec:	e13ff615 	stw	r4,-40(fp)
 880fdf0:	00000c06 	br	880fe24 <alt_up_pixel_buffer_dma_draw_vline+0x29c>
			{
				IOWR_8DIRECT(addr, line_x, local_color);
 880fdf4:	e0ffff17 	ldw	r3,-4(fp)
 880fdf8:	e0bffc17 	ldw	r2,-16(fp)
 880fdfc:	1885883a 	add	r2,r3,r2
 880fe00:	e0fff917 	ldw	r3,-28(fp)
 880fe04:	10c00025 	stbio	r3,0(r2)
				addr = addr + limit_x;
 880fe08:	e0bfff17 	ldw	r2,-4(fp)
 880fe0c:	e0fffe17 	ldw	r3,-8(fp)
 880fe10:	10c5883a 	add	r2,r2,r3
 880fe14:	e0bfff15 	stw	r2,-4(fp)
		register unsigned int y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
 880fe18:	e13ff617 	ldw	r4,-40(fp)
 880fe1c:	21000044 	addi	r4,r4,1
 880fe20:	e13ff615 	stw	r4,-40(fp)
 880fe24:	e0bffa17 	ldw	r2,-24(fp)
 880fe28:	e0fff617 	ldw	r3,-40(fp)
 880fe2c:	10fff12e 	bgeu	r2,r3,880fdf4 <alt_up_pixel_buffer_dma_draw_vline+0x26c>
 880fe30:	00004506 	br	880ff48 <alt_up_pixel_buffer_dma_draw_vline+0x3c0>
			{
				IOWR_8DIRECT(addr, line_x, local_color);
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
 880fe34:	e0bff217 	ldw	r2,-56(fp)
 880fe38:	10800e17 	ldw	r2,56(r2)
 880fe3c:	10800098 	cmpnei	r2,r2,2
 880fe40:	1000201e 	bne	r2,zero,880fec4 <alt_up_pixel_buffer_dma_draw_vline+0x33c>
			limit_x = limit_x << 1;
 880fe44:	e13ffe17 	ldw	r4,-8(fp)
 880fe48:	e13ffe17 	ldw	r4,-8(fp)
 880fe4c:	2105883a 	add	r2,r4,r4
 880fe50:	e0bffe15 	stw	r2,-8(fp)
			addr = addr + t_y * limit_x;
 880fe54:	e0fffb17 	ldw	r3,-20(fp)
 880fe58:	e13ffe17 	ldw	r4,-8(fp)
 880fe5c:	1905383a 	mul	r2,r3,r4
 880fe60:	e0ffff17 	ldw	r3,-4(fp)
 880fe64:	1887883a 	add	r3,r3,r2
 880fe68:	e0ffff15 	stw	r3,-4(fp)
			for (y = t_y; y <= b_y; y++)
 880fe6c:	e13ffb17 	ldw	r4,-20(fp)
 880fe70:	e13ff615 	stw	r4,-40(fp)
 880fe74:	00000f06 	br	880feb4 <alt_up_pixel_buffer_dma_draw_vline+0x32c>
			{
				IOWR_16DIRECT(addr, line_x << 1, local_color);
 880fe78:	e0fffc17 	ldw	r3,-16(fp)
 880fe7c:	e0fffc17 	ldw	r3,-16(fp)
 880fe80:	18c5883a 	add	r2,r3,r3
 880fe84:	1007883a 	mov	r3,r2
 880fe88:	e0bfff17 	ldw	r2,-4(fp)
 880fe8c:	1885883a 	add	r2,r3,r2
 880fe90:	e0fff917 	ldw	r3,-28(fp)
 880fe94:	10c0002d 	sthio	r3,0(r2)
				addr = addr + limit_x;
 880fe98:	e13fff17 	ldw	r4,-4(fp)
 880fe9c:	e0bffe17 	ldw	r2,-8(fp)
 880fea0:	2089883a 	add	r4,r4,r2
 880fea4:	e13fff15 	stw	r4,-4(fp)
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
 880fea8:	e0fff617 	ldw	r3,-40(fp)
 880feac:	18c00044 	addi	r3,r3,1
 880feb0:	e0fff615 	stw	r3,-40(fp)
 880feb4:	e13ffa17 	ldw	r4,-24(fp)
 880feb8:	e0bff617 	ldw	r2,-40(fp)
 880febc:	20bfee2e 	bgeu	r4,r2,880fe78 <alt_up_pixel_buffer_dma_draw_vline+0x2f0>
 880fec0:	00002106 	br	880ff48 <alt_up_pixel_buffer_dma_draw_vline+0x3c0>
				addr = addr + limit_x;
			}
		}
		else
		{
			limit_x = limit_x << 2;
 880fec4:	e0fffe17 	ldw	r3,-8(fp)
 880fec8:	e0fffe17 	ldw	r3,-8(fp)
 880fecc:	18c5883a 	add	r2,r3,r3
 880fed0:	1085883a 	add	r2,r2,r2
 880fed4:	e0bffe15 	stw	r2,-8(fp)
			addr = addr + t_y * limit_x;
 880fed8:	e13ffb17 	ldw	r4,-20(fp)
 880fedc:	e0fffe17 	ldw	r3,-8(fp)
 880fee0:	20c5383a 	mul	r2,r4,r3
 880fee4:	e13fff17 	ldw	r4,-4(fp)
 880fee8:	2089883a 	add	r4,r4,r2
 880feec:	e13fff15 	stw	r4,-4(fp)
			for (y = t_y; y <= b_y; y++)
 880fef0:	e0bffb17 	ldw	r2,-20(fp)
 880fef4:	e0bff615 	stw	r2,-40(fp)
 880fef8:	00001006 	br	880ff3c <alt_up_pixel_buffer_dma_draw_vline+0x3b4>
			{
				IOWR_32DIRECT(addr, line_x << 2, local_color);
 880fefc:	e0fffc17 	ldw	r3,-16(fp)
 880ff00:	e0fffc17 	ldw	r3,-16(fp)
 880ff04:	18c5883a 	add	r2,r3,r3
 880ff08:	1085883a 	add	r2,r2,r2
 880ff0c:	1007883a 	mov	r3,r2
 880ff10:	e0bfff17 	ldw	r2,-4(fp)
 880ff14:	1885883a 	add	r2,r3,r2
 880ff18:	e0fff917 	ldw	r3,-28(fp)
 880ff1c:	10c00035 	stwio	r3,0(r2)
				addr = addr + limit_x;
 880ff20:	e13fff17 	ldw	r4,-4(fp)
 880ff24:	e0bffe17 	ldw	r2,-8(fp)
 880ff28:	2089883a 	add	r4,r4,r2
 880ff2c:	e13fff15 	stw	r4,-4(fp)
		}
		else
		{
			limit_x = limit_x << 2;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
 880ff30:	e0fff617 	ldw	r3,-40(fp)
 880ff34:	18c00044 	addi	r3,r3,1
 880ff38:	e0fff615 	stw	r3,-40(fp)
 880ff3c:	e13ffa17 	ldw	r4,-24(fp)
 880ff40:	e0bff617 	ldw	r2,-40(fp)
 880ff44:	20bfed2e 	bgeu	r4,r2,880fefc <alt_up_pixel_buffer_dma_draw_vline+0x374>
				IOWR_32DIRECT(addr, line_x << 2, local_color);
				addr = addr + limit_x;
			}
		}
	}
}
 880ff48:	e037883a 	mov	sp,fp
 880ff4c:	df000017 	ldw	fp,0(sp)
 880ff50:	dec00104 	addi	sp,sp,4
 880ff54:	f800283a 	ret

0880ff58 <alt_up_pixel_buffer_dma_draw_rectangle>:

void alt_up_pixel_buffer_dma_draw_rectangle(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int y0, int x1, int y1, int color, int backbuffer)
{
 880ff58:	defff804 	addi	sp,sp,-32
 880ff5c:	dfc00715 	stw	ra,28(sp)
 880ff60:	df000615 	stw	fp,24(sp)
 880ff64:	df000604 	addi	fp,sp,24
 880ff68:	e13ffc15 	stw	r4,-16(fp)
 880ff6c:	e17ffd15 	stw	r5,-12(fp)
 880ff70:	e1bffe15 	stw	r6,-8(fp)
 880ff74:	e1ffff15 	stw	r7,-4(fp)
	alt_up_pixel_buffer_dma_draw_hline(pixel_buffer, x0, x1, y0, color, backbuffer);
 880ff78:	e0800317 	ldw	r2,12(fp)
 880ff7c:	d8800015 	stw	r2,0(sp)
 880ff80:	e0800417 	ldw	r2,16(fp)
 880ff84:	d8800115 	stw	r2,4(sp)
 880ff88:	e13ffc17 	ldw	r4,-16(fp)
 880ff8c:	e17ffd17 	ldw	r5,-12(fp)
 880ff90:	e1bfff17 	ldw	r6,-4(fp)
 880ff94:	e1fffe17 	ldw	r7,-8(fp)
 880ff98:	880f8380 	call	880f838 <alt_up_pixel_buffer_dma_draw_hline>
	alt_up_pixel_buffer_dma_draw_hline(pixel_buffer, x0, x1, y1, color, backbuffer);
 880ff9c:	e0800317 	ldw	r2,12(fp)
 880ffa0:	d8800015 	stw	r2,0(sp)
 880ffa4:	e0800417 	ldw	r2,16(fp)
 880ffa8:	d8800115 	stw	r2,4(sp)
 880ffac:	e13ffc17 	ldw	r4,-16(fp)
 880ffb0:	e17ffd17 	ldw	r5,-12(fp)
 880ffb4:	e1bfff17 	ldw	r6,-4(fp)
 880ffb8:	e1c00217 	ldw	r7,8(fp)
 880ffbc:	880f8380 	call	880f838 <alt_up_pixel_buffer_dma_draw_hline>
	alt_up_pixel_buffer_dma_draw_vline(pixel_buffer, x0, y0, y1, color, backbuffer);
 880ffc0:	e0800317 	ldw	r2,12(fp)
 880ffc4:	d8800015 	stw	r2,0(sp)
 880ffc8:	e0800417 	ldw	r2,16(fp)
 880ffcc:	d8800115 	stw	r2,4(sp)
 880ffd0:	e13ffc17 	ldw	r4,-16(fp)
 880ffd4:	e17ffd17 	ldw	r5,-12(fp)
 880ffd8:	e1bffe17 	ldw	r6,-8(fp)
 880ffdc:	e1c00217 	ldw	r7,8(fp)
 880ffe0:	880fb880 	call	880fb88 <alt_up_pixel_buffer_dma_draw_vline>
	alt_up_pixel_buffer_dma_draw_vline(pixel_buffer, x1, y0, y1, color, backbuffer);
 880ffe4:	e0800317 	ldw	r2,12(fp)
 880ffe8:	d8800015 	stw	r2,0(sp)
 880ffec:	e0800417 	ldw	r2,16(fp)
 880fff0:	d8800115 	stw	r2,4(sp)
 880fff4:	e13ffc17 	ldw	r4,-16(fp)
 880fff8:	e17fff17 	ldw	r5,-4(fp)
 880fffc:	e1bffe17 	ldw	r6,-8(fp)
 8810000:	e1c00217 	ldw	r7,8(fp)
 8810004:	880fb880 	call	880fb88 <alt_up_pixel_buffer_dma_draw_vline>
}
 8810008:	e037883a 	mov	sp,fp
 881000c:	dfc00117 	ldw	ra,4(sp)
 8810010:	df000017 	ldw	fp,0(sp)
 8810014:	dec00204 	addi	sp,sp,8
 8810018:	f800283a 	ret

0881001c <helper_plot_pixel>:

void helper_plot_pixel(register unsigned int buffer_start, register int line_size, register int x, register int y, register int color, register int mode)
/* This is a helper function that draws a pixel at a given location. Note that no boundary checks are made,
 * so drawing off-screen may cause unpredictable side effects. */
{
 881001c:	defffb04 	addi	sp,sp,-20
 8810020:	df000415 	stw	fp,16(sp)
 8810024:	df000404 	addi	fp,sp,16
 8810028:	e13ffc15 	stw	r4,-16(fp)
 881002c:	e17ffd15 	stw	r5,-12(fp)
 8810030:	e1bffe15 	stw	r6,-8(fp)
 8810034:	e1ffff15 	stw	r7,-4(fp)
	if (mode == 0)
 8810038:	e0c00217 	ldw	r3,8(fp)
 881003c:	1804c03a 	cmpne	r2,r3,zero
 8810040:	10000b1e 	bne	r2,zero,8810070 <helper_plot_pixel+0x54>
		IOWR_8DIRECT(buffer_start, line_size*y+x, color);
 8810044:	e13ffd17 	ldw	r4,-12(fp)
 8810048:	e0ffff17 	ldw	r3,-4(fp)
 881004c:	20c5383a 	mul	r2,r4,r3
 8810050:	e13ffe17 	ldw	r4,-8(fp)
 8810054:	1105883a 	add	r2,r2,r4
 8810058:	1007883a 	mov	r3,r2
 881005c:	e0bffc17 	ldw	r2,-16(fp)
 8810060:	1885883a 	add	r2,r3,r2
 8810064:	e0c00117 	ldw	r3,4(fp)
 8810068:	10c00025 	stbio	r3,0(r2)
 881006c:	00001b06 	br	88100dc <helper_plot_pixel+0xc0>
	else if (mode == 1)
 8810070:	e1000217 	ldw	r4,8(fp)
 8810074:	20800058 	cmpnei	r2,r4,1
 8810078:	10000c1e 	bne	r2,zero,88100ac <helper_plot_pixel+0x90>
		IOWR_16DIRECT(buffer_start, (line_size*y+x) << 1, color);
 881007c:	e0fffd17 	ldw	r3,-12(fp)
 8810080:	e13fff17 	ldw	r4,-4(fp)
 8810084:	1905383a 	mul	r2,r3,r4
 8810088:	e0fffe17 	ldw	r3,-8(fp)
 881008c:	10c5883a 	add	r2,r2,r3
 8810090:	1085883a 	add	r2,r2,r2
 8810094:	1007883a 	mov	r3,r2
 8810098:	e0bffc17 	ldw	r2,-16(fp)
 881009c:	1885883a 	add	r2,r3,r2
 88100a0:	e1000117 	ldw	r4,4(fp)
 88100a4:	1100002d 	sthio	r4,0(r2)
 88100a8:	00000c06 	br	88100dc <helper_plot_pixel+0xc0>
	else
		IOWR_32DIRECT(buffer_start, (line_size*y+x) << 2, color);
 88100ac:	e0fffd17 	ldw	r3,-12(fp)
 88100b0:	e13fff17 	ldw	r4,-4(fp)
 88100b4:	1905383a 	mul	r2,r3,r4
 88100b8:	e0fffe17 	ldw	r3,-8(fp)
 88100bc:	10c5883a 	add	r2,r2,r3
 88100c0:	1085883a 	add	r2,r2,r2
 88100c4:	1085883a 	add	r2,r2,r2
 88100c8:	1007883a 	mov	r3,r2
 88100cc:	e0bffc17 	ldw	r2,-16(fp)
 88100d0:	1885883a 	add	r2,r3,r2
 88100d4:	e1000117 	ldw	r4,4(fp)
 88100d8:	11000035 	stwio	r4,0(r2)
}
 88100dc:	e037883a 	mov	sp,fp
 88100e0:	df000017 	ldw	fp,0(sp)
 88100e4:	dec00104 	addi	sp,sp,4
 88100e8:	f800283a 	ret

088100ec <alt_up_pixel_buffer_dma_draw_line>:

void alt_up_pixel_buffer_dma_draw_line(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int y0, int x1, int y1, int color, int backbuffer)
/* This function draws a line between points (x0, y0) and (x1, y1). The function does not check if it draws a pixel within screen boundaries.
 * users should ensure that the line is drawn within the screen boundaries. */
{
 88100ec:	deffe404 	addi	sp,sp,-112
 88100f0:	dfc01b15 	stw	ra,108(sp)
 88100f4:	df001a15 	stw	fp,104(sp)
 88100f8:	df001a04 	addi	fp,sp,104
 88100fc:	e13fe815 	stw	r4,-96(fp)
 8810100:	e17fe915 	stw	r5,-92(fp)
 8810104:	e1bfea15 	stw	r6,-88(fp)
 8810108:	e1ffeb15 	stw	r7,-84(fp)
	register int x_0 = x0;
 881010c:	e0bfe917 	ldw	r2,-92(fp)
 8810110:	e0bffa15 	stw	r2,-24(fp)
	register int y_0 = y0;
 8810114:	e0ffea17 	ldw	r3,-88(fp)
 8810118:	e0fff915 	stw	r3,-28(fp)
	register int x_1 = x1;
 881011c:	e13feb17 	ldw	r4,-84(fp)
 8810120:	e13ff815 	stw	r4,-32(fp)
	register int y_1 = y1;
 8810124:	e0800217 	ldw	r2,8(fp)
 8810128:	e0bff715 	stw	r2,-36(fp)
	register char steep = (ABS(y_1 - y_0) > ABS(x_1 - x_0)) ? 1 : 0;
 881012c:	e0fff717 	ldw	r3,-36(fp)
 8810130:	e13ff917 	ldw	r4,-28(fp)
 8810134:	1905c83a 	sub	r2,r3,r4
 8810138:	e0bfff15 	stw	r2,-4(fp)
 881013c:	e0ffff17 	ldw	r3,-4(fp)
 8810140:	1804403a 	cmpge	r2,r3,zero
 8810144:	1000031e 	bne	r2,zero,8810154 <alt_up_pixel_buffer_dma_draw_line+0x68>
 8810148:	e13fff17 	ldw	r4,-4(fp)
 881014c:	0109c83a 	sub	r4,zero,r4
 8810150:	e13fff15 	stw	r4,-4(fp)
 8810154:	e0fff817 	ldw	r3,-32(fp)
 8810158:	e13ffa17 	ldw	r4,-24(fp)
 881015c:	1905c83a 	sub	r2,r3,r4
 8810160:	e0bffe15 	stw	r2,-8(fp)
 8810164:	e0fffe17 	ldw	r3,-8(fp)
 8810168:	1804403a 	cmpge	r2,r3,zero
 881016c:	1000031e 	bne	r2,zero,881017c <alt_up_pixel_buffer_dma_draw_line+0x90>
 8810170:	e13ffe17 	ldw	r4,-8(fp)
 8810174:	0109c83a 	sub	r4,zero,r4
 8810178:	e13ffe15 	stw	r4,-8(fp)
 881017c:	e0fffe17 	ldw	r3,-8(fp)
 8810180:	e13fff17 	ldw	r4,-4(fp)
 8810184:	1904803a 	cmplt	r2,r3,r4
 8810188:	e0bff605 	stb	r2,-40(fp)
	register int deltax, deltay, error, ystep, x, y;
	register int color_mode =	(pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) ? 0 :
								(pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) ? 1 : 2;
 881018c:	e0bfe817 	ldw	r2,-96(fp)
 8810190:	10800e17 	ldw	r2,56(r2)
 8810194:	10800060 	cmpeqi	r2,r2,1
 8810198:	10000c1e 	bne	r2,zero,88101cc <alt_up_pixel_buffer_dma_draw_line+0xe0>
 881019c:	e0bfe817 	ldw	r2,-96(fp)
 88101a0:	10800e17 	ldw	r2,56(r2)
 88101a4:	10800098 	cmpnei	r2,r2,2
 88101a8:	1000031e 	bne	r2,zero,88101b8 <alt_up_pixel_buffer_dma_draw_line+0xcc>
 88101ac:	00800044 	movi	r2,1
 88101b0:	e0bffc15 	stw	r2,-16(fp)
 88101b4:	00000206 	br	88101c0 <alt_up_pixel_buffer_dma_draw_line+0xd4>
 88101b8:	00c00084 	movi	r3,2
 88101bc:	e0fffc15 	stw	r3,-16(fp)
 88101c0:	e13ffc17 	ldw	r4,-16(fp)
 88101c4:	e13ffd15 	stw	r4,-12(fp)
 88101c8:	00000106 	br	88101d0 <alt_up_pixel_buffer_dma_draw_line+0xe4>
 88101cc:	e03ffd15 	stw	zero,-12(fp)
 88101d0:	e0bffd17 	ldw	r2,-12(fp)
 88101d4:	e0bfef15 	stw	r2,-68(fp)
	register int line_color = color;
 88101d8:	e0c00317 	ldw	r3,12(fp)
 88101dc:	e0ffee15 	stw	r3,-72(fp)
	register unsigned int buffer_start;
	register int line_size = (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) ? (1 << (pixel_buffer->y_coord_offset-color_mode)) : pixel_buffer->x_resolution;
 88101e0:	e0bfe817 	ldw	r2,-96(fp)
 88101e4:	10800d17 	ldw	r2,52(r2)
 88101e8:	1004c03a 	cmpne	r2,r2,zero
 88101ec:	1000091e 	bne	r2,zero,8810214 <alt_up_pixel_buffer_dma_draw_line+0x128>
 88101f0:	e0bfe817 	ldw	r2,-96(fp)
 88101f4:	10c01317 	ldw	r3,76(r2)
 88101f8:	e0bfef17 	ldw	r2,-68(fp)
 88101fc:	1885c83a 	sub	r2,r3,r2
 8810200:	1007883a 	mov	r3,r2
 8810204:	00800044 	movi	r2,1
 8810208:	10c4983a 	sll	r2,r2,r3
 881020c:	e0bffb15 	stw	r2,-20(fp)
 8810210:	00000306 	br	8810220 <alt_up_pixel_buffer_dma_draw_line+0x134>
 8810214:	e0bfe817 	ldw	r2,-96(fp)
 8810218:	10800f17 	ldw	r2,60(r2)
 881021c:	e0bffb15 	stw	r2,-20(fp)
 8810220:	e13ffb17 	ldw	r4,-20(fp)
 8810224:	e13fec15 	stw	r4,-80(fp)

	if (backbuffer == 1)
 8810228:	e0800417 	ldw	r2,16(fp)
 881022c:	10800058 	cmpnei	r2,r2,1
 8810230:	1000041e 	bne	r2,zero,8810244 <alt_up_pixel_buffer_dma_draw_line+0x158>
		buffer_start = pixel_buffer->back_buffer_start_address;
 8810234:	e0bfe817 	ldw	r2,-96(fp)
 8810238:	10800c17 	ldw	r2,48(r2)
 881023c:	e0bfed15 	stw	r2,-76(fp)
 8810240:	00000306 	br	8810250 <alt_up_pixel_buffer_dma_draw_line+0x164>
	else
		buffer_start = pixel_buffer->buffer_start_address;
 8810244:	e0bfe817 	ldw	r2,-96(fp)
 8810248:	10800b17 	ldw	r2,44(r2)
 881024c:	e0bfed15 	stw	r2,-76(fp)

	/* Preprocessing inputs */
	if (steep > 0) {
 8810250:	e0fff603 	ldbu	r3,-40(fp)
 8810254:	18803fcc 	andi	r2,r3,255
 8810258:	1080201c 	xori	r2,r2,128
 881025c:	10bfe004 	addi	r2,r2,-128
 8810260:	10800050 	cmplti	r2,r2,1
 8810264:	10000c1e 	bne	r2,zero,8810298 <alt_up_pixel_buffer_dma_draw_line+0x1ac>
		// Swap x_0 and y_0
		error = x_0;
 8810268:	e13ffa17 	ldw	r4,-24(fp)
 881026c:	e13ff315 	stw	r4,-52(fp)
		x_0 = y_0;
 8810270:	e0bff917 	ldw	r2,-28(fp)
 8810274:	e0bffa15 	stw	r2,-24(fp)
		y_0 = error;
 8810278:	e0fff317 	ldw	r3,-52(fp)
 881027c:	e0fff915 	stw	r3,-28(fp)
		// Swap x_1 and y_1
		error = x_1;
 8810280:	e13ff817 	ldw	r4,-32(fp)
 8810284:	e13ff315 	stw	r4,-52(fp)
		x_1 = y_1;
 8810288:	e0bff717 	ldw	r2,-36(fp)
 881028c:	e0bff815 	stw	r2,-32(fp)
		y_1 = error;
 8810290:	e0fff317 	ldw	r3,-52(fp)
 8810294:	e0fff715 	stw	r3,-36(fp)
	}
	if (x_0 > x_1) {
 8810298:	e13ff817 	ldw	r4,-32(fp)
 881029c:	e0bffa17 	ldw	r2,-24(fp)
 88102a0:	20800c0e 	bge	r4,r2,88102d4 <alt_up_pixel_buffer_dma_draw_line+0x1e8>
		// Swap x_0 and x_1
		error = x_0;
 88102a4:	e0fffa17 	ldw	r3,-24(fp)
 88102a8:	e0fff315 	stw	r3,-52(fp)
		x_0 = x_1;
 88102ac:	e13ff817 	ldw	r4,-32(fp)
 88102b0:	e13ffa15 	stw	r4,-24(fp)
		x_1 = error;
 88102b4:	e0bff317 	ldw	r2,-52(fp)
 88102b8:	e0bff815 	stw	r2,-32(fp)
		// Swap y_0 and y_1
		error = y_0;
 88102bc:	e0fff917 	ldw	r3,-28(fp)
 88102c0:	e0fff315 	stw	r3,-52(fp)
		y_0 = y_1;
 88102c4:	e13ff717 	ldw	r4,-36(fp)
 88102c8:	e13ff915 	stw	r4,-28(fp)
		y_1 = error;
 88102cc:	e0bff317 	ldw	r2,-52(fp)
 88102d0:	e0bff715 	stw	r2,-36(fp)
	}

	/* Setup local variables */
	deltax = x_1 - x_0;
 88102d4:	e0fff817 	ldw	r3,-32(fp)
 88102d8:	e13ffa17 	ldw	r4,-24(fp)
 88102dc:	1907c83a 	sub	r3,r3,r4
 88102e0:	e0fff515 	stw	r3,-44(fp)
	deltay = ABS(y_1 - y_0);
 88102e4:	e0fff717 	ldw	r3,-36(fp)
 88102e8:	e13ff917 	ldw	r4,-28(fp)
 88102ec:	1905c83a 	sub	r2,r3,r4
 88102f0:	e0bff415 	stw	r2,-48(fp)
 88102f4:	e0fff417 	ldw	r3,-48(fp)
 88102f8:	1804403a 	cmpge	r2,r3,zero
 88102fc:	1000031e 	bne	r2,zero,881030c <alt_up_pixel_buffer_dma_draw_line+0x220>
 8810300:	e13ff417 	ldw	r4,-48(fp)
 8810304:	0109c83a 	sub	r4,zero,r4
 8810308:	e13ff415 	stw	r4,-48(fp)
	error = -(deltax / 2); 
 881030c:	e0fff517 	ldw	r3,-44(fp)
 8810310:	1804d7fa 	srli	r2,r3,31
 8810314:	e13ff517 	ldw	r4,-44(fp)
 8810318:	1105883a 	add	r2,r2,r4
 881031c:	1005d07a 	srai	r2,r2,1
 8810320:	0085c83a 	sub	r2,zero,r2
 8810324:	e0bff315 	stw	r2,-52(fp)
	y = y_0;
 8810328:	e0bff917 	ldw	r2,-28(fp)
 881032c:	e0bff015 	stw	r2,-64(fp)
	if (y_0 < y_1)
 8810330:	e0fff917 	ldw	r3,-28(fp)
 8810334:	e13ff717 	ldw	r4,-36(fp)
 8810338:	1900030e 	bge	r3,r4,8810348 <alt_up_pixel_buffer_dma_draw_line+0x25c>
		ystep = 1;
 881033c:	00800044 	movi	r2,1
 8810340:	e0bff215 	stw	r2,-56(fp)
 8810344:	00000206 	br	8810350 <alt_up_pixel_buffer_dma_draw_line+0x264>
	else
		ystep = -1;
 8810348:	00ffffc4 	movi	r3,-1
 881034c:	e0fff215 	stw	r3,-56(fp)

	/* Draw a line - either go along the x axis (steep = 0) or along the y axis (steep = 1). The code is replicated to
	 * compile well on low optimization levels. */
	if (steep == 1)
 8810350:	e13ff603 	ldbu	r4,-40(fp)
 8810354:	20803fcc 	andi	r2,r4,255
 8810358:	1080201c 	xori	r2,r2,128
 881035c:	10bfe004 	addi	r2,r2,-128
 8810360:	10800058 	cmpnei	r2,r2,1
 8810364:	1000221e 	bne	r2,zero,88103f0 <alt_up_pixel_buffer_dma_draw_line+0x304>
	{
		for (x=x_0; x <= x_1; x++) {
 8810368:	e0bffa17 	ldw	r2,-24(fp)
 881036c:	e0bff115 	stw	r2,-60(fp)
 8810370:	00001b06 	br	88103e0 <alt_up_pixel_buffer_dma_draw_line+0x2f4>
			helper_plot_pixel(buffer_start, line_size, y, x, line_color, color_mode);
 8810374:	e0ffee17 	ldw	r3,-72(fp)
 8810378:	d8c00015 	stw	r3,0(sp)
 881037c:	e13fef17 	ldw	r4,-68(fp)
 8810380:	d9000115 	stw	r4,4(sp)
 8810384:	e13fed17 	ldw	r4,-76(fp)
 8810388:	e17fec17 	ldw	r5,-80(fp)
 881038c:	e1bff017 	ldw	r6,-64(fp)
 8810390:	e1fff117 	ldw	r7,-60(fp)
 8810394:	881001c0 	call	881001c <helper_plot_pixel>
			error = error + deltay;
 8810398:	e0bff317 	ldw	r2,-52(fp)
 881039c:	e0fff417 	ldw	r3,-48(fp)
 88103a0:	10c5883a 	add	r2,r2,r3
 88103a4:	e0bff315 	stw	r2,-52(fp)
			if (error > 0) {
 88103a8:	e13ff317 	ldw	r4,-52(fp)
 88103ac:	20800050 	cmplti	r2,r4,1
 88103b0:	1000081e 	bne	r2,zero,88103d4 <alt_up_pixel_buffer_dma_draw_line+0x2e8>
				y = y + ystep;
 88103b4:	e0bff017 	ldw	r2,-64(fp)
 88103b8:	e0fff217 	ldw	r3,-56(fp)
 88103bc:	10c5883a 	add	r2,r2,r3
 88103c0:	e0bff015 	stw	r2,-64(fp)
				error = error - deltax;
 88103c4:	e13ff317 	ldw	r4,-52(fp)
 88103c8:	e0bff517 	ldw	r2,-44(fp)
 88103cc:	2089c83a 	sub	r4,r4,r2
 88103d0:	e13ff315 	stw	r4,-52(fp)

	/* Draw a line - either go along the x axis (steep = 0) or along the y axis (steep = 1). The code is replicated to
	 * compile well on low optimization levels. */
	if (steep == 1)
	{
		for (x=x_0; x <= x_1; x++) {
 88103d4:	e0fff117 	ldw	r3,-60(fp)
 88103d8:	18c00044 	addi	r3,r3,1
 88103dc:	e0fff115 	stw	r3,-60(fp)
 88103e0:	e13ff817 	ldw	r4,-32(fp)
 88103e4:	e0bff117 	ldw	r2,-60(fp)
 88103e8:	20bfe20e 	bge	r4,r2,8810374 <alt_up_pixel_buffer_dma_draw_line+0x288>
 88103ec:	00002106 	br	8810474 <alt_up_pixel_buffer_dma_draw_line+0x388>
			}
		}
	}
	else
	{
		for (x=x_0; x <= x_1; x++) {
 88103f0:	e0fffa17 	ldw	r3,-24(fp)
 88103f4:	e0fff115 	stw	r3,-60(fp)
 88103f8:	00001b06 	br	8810468 <alt_up_pixel_buffer_dma_draw_line+0x37c>
			helper_plot_pixel(buffer_start, line_size, x, y, line_color, color_mode);
 88103fc:	e13fee17 	ldw	r4,-72(fp)
 8810400:	d9000015 	stw	r4,0(sp)
 8810404:	e0bfef17 	ldw	r2,-68(fp)
 8810408:	d8800115 	stw	r2,4(sp)
 881040c:	e13fed17 	ldw	r4,-76(fp)
 8810410:	e17fec17 	ldw	r5,-80(fp)
 8810414:	e1bff117 	ldw	r6,-60(fp)
 8810418:	e1fff017 	ldw	r7,-64(fp)
 881041c:	881001c0 	call	881001c <helper_plot_pixel>
			error = error + deltay;
 8810420:	e0fff317 	ldw	r3,-52(fp)
 8810424:	e13ff417 	ldw	r4,-48(fp)
 8810428:	1907883a 	add	r3,r3,r4
 881042c:	e0fff315 	stw	r3,-52(fp)
			if (error > 0) {
 8810430:	e0fff317 	ldw	r3,-52(fp)
 8810434:	18800050 	cmplti	r2,r3,1
 8810438:	1000081e 	bne	r2,zero,881045c <alt_up_pixel_buffer_dma_draw_line+0x370>
				y = y + ystep;
 881043c:	e13ff017 	ldw	r4,-64(fp)
 8810440:	e0bff217 	ldw	r2,-56(fp)
 8810444:	2089883a 	add	r4,r4,r2
 8810448:	e13ff015 	stw	r4,-64(fp)
				error = error - deltax;
 881044c:	e0fff317 	ldw	r3,-52(fp)
 8810450:	e13ff517 	ldw	r4,-44(fp)
 8810454:	1907c83a 	sub	r3,r3,r4
 8810458:	e0fff315 	stw	r3,-52(fp)
			}
		}
	}
	else
	{
		for (x=x_0; x <= x_1; x++) {
 881045c:	e0bff117 	ldw	r2,-60(fp)
 8810460:	10800044 	addi	r2,r2,1
 8810464:	e0bff115 	stw	r2,-60(fp)
 8810468:	e0fff817 	ldw	r3,-32(fp)
 881046c:	e13ff117 	ldw	r4,-60(fp)
 8810470:	193fe20e 	bge	r3,r4,88103fc <alt_up_pixel_buffer_dma_draw_line+0x310>
				y = y + ystep;
				error = error - deltax;
			}
		}
	}
}
 8810474:	e037883a 	mov	sp,fp
 8810478:	dfc00117 	ldw	ra,4(sp)
 881047c:	df000017 	ldw	fp,0(sp)
 8810480:	dec00204 	addi	sp,sp,8
 8810484:	f800283a 	ret

08810488 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
 8810488:	defff404 	addi	sp,sp,-48
 881048c:	df000b15 	stw	fp,44(sp)
 8810490:	df000b04 	addi	fp,sp,44
 8810494:	e13ffb15 	stw	r4,-20(fp)
 8810498:	e17ffc15 	stw	r5,-16(fp)
 881049c:	e1bffd15 	stw	r6,-12(fp)
 88104a0:	e1fffe15 	stw	r7,-8(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
 88104a4:	e03ff915 	stw	zero,-28(fp)
 88104a8:	00822074 	movhi	r2,2177
 88104ac:	10956904 	addi	r2,r2,21924
 88104b0:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
 88104b4:	1005003a 	cmpeq	r2,r2,zero
 88104b8:	1000411e 	bne	r2,zero,88105c0 <alt_alarm_start+0x138>
  {
    if (alarm)
 88104bc:	e0bffb17 	ldw	r2,-20(fp)
 88104c0:	1005003a 	cmpeq	r2,r2,zero
 88104c4:	10003b1e 	bne	r2,zero,88105b4 <alt_alarm_start+0x12c>
    {
      alarm->callback = callback;
 88104c8:	e0fffb17 	ldw	r3,-20(fp)
 88104cc:	e0bffd17 	ldw	r2,-12(fp)
 88104d0:	18800315 	stw	r2,12(r3)
      alarm->context  = context;
 88104d4:	e0fffb17 	ldw	r3,-20(fp)
 88104d8:	e0bffe17 	ldw	r2,-8(fp)
 88104dc:	18800515 	stw	r2,20(r3)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 88104e0:	0005303a 	rdctl	r2,status
 88104e4:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 88104e8:	e0fff817 	ldw	r3,-32(fp)
 88104ec:	00bfff84 	movi	r2,-2
 88104f0:	1884703a 	and	r2,r3,r2
 88104f4:	1001703a 	wrctl	status,r2
  
  return context;
 88104f8:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
 88104fc:	e0bffa15 	stw	r2,-24(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 8810500:	00822074 	movhi	r2,2177
 8810504:	10956a04 	addi	r2,r2,21928
 8810508:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
 881050c:	e0bff915 	stw	r2,-28(fp)
      
      alarm->time = nticks + current_nticks + 1; 
 8810510:	e0fffc17 	ldw	r3,-16(fp)
 8810514:	e0bff917 	ldw	r2,-28(fp)
 8810518:	1885883a 	add	r2,r3,r2
 881051c:	10c00044 	addi	r3,r2,1
 8810520:	e0bffb17 	ldw	r2,-20(fp)
 8810524:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
 8810528:	e0bffb17 	ldw	r2,-20(fp)
 881052c:	10c00217 	ldw	r3,8(r2)
 8810530:	e0bff917 	ldw	r2,-28(fp)
 8810534:	1880042e 	bgeu	r3,r2,8810548 <alt_alarm_start+0xc0>
      {
        alarm->rollover = 1;
 8810538:	e0fffb17 	ldw	r3,-20(fp)
 881053c:	00800044 	movi	r2,1
 8810540:	18800405 	stb	r2,16(r3)
 8810544:	00000206 	br	8810550 <alt_alarm_start+0xc8>
      }
      else
      {
        alarm->rollover = 0;
 8810548:	e0bffb17 	ldw	r2,-20(fp)
 881054c:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
 8810550:	e0fffb17 	ldw	r3,-20(fp)
 8810554:	00822074 	movhi	r2,2177
 8810558:	108e6404 	addi	r2,r2,14736
 881055c:	e0bff615 	stw	r2,-40(fp)
 8810560:	e0fff715 	stw	r3,-36(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 8810564:	e0fff717 	ldw	r3,-36(fp)
 8810568:	e0bff617 	ldw	r2,-40(fp)
 881056c:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
 8810570:	e0bff617 	ldw	r2,-40(fp)
 8810574:	10c00017 	ldw	r3,0(r2)
 8810578:	e0bff717 	ldw	r2,-36(fp)
 881057c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 8810580:	e0bff617 	ldw	r2,-40(fp)
 8810584:	10c00017 	ldw	r3,0(r2)
 8810588:	e0bff717 	ldw	r2,-36(fp)
 881058c:	18800115 	stw	r2,4(r3)
  list->next           = entry;
 8810590:	e0fff617 	ldw	r3,-40(fp)
 8810594:	e0bff717 	ldw	r2,-36(fp)
 8810598:	18800015 	stw	r2,0(r3)
 881059c:	e0bffa17 	ldw	r2,-24(fp)
 88105a0:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 88105a4:	e0bff517 	ldw	r2,-44(fp)
 88105a8:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
 88105ac:	e03fff15 	stw	zero,-4(fp)
 88105b0:	00000506 	br	88105c8 <alt_alarm_start+0x140>
    }
    else
    {
      return -EINVAL;
 88105b4:	00bffa84 	movi	r2,-22
 88105b8:	e0bfff15 	stw	r2,-4(fp)
 88105bc:	00000206 	br	88105c8 <alt_alarm_start+0x140>
    }
  }
  else
  {
    return -ENOTSUP;
 88105c0:	00bfde84 	movi	r2,-134
 88105c4:	e0bfff15 	stw	r2,-4(fp)
 88105c8:	e0bfff17 	ldw	r2,-4(fp)
  }
}
 88105cc:	e037883a 	mov	sp,fp
 88105d0:	df000017 	ldw	fp,0(sp)
 88105d4:	dec00104 	addi	sp,sp,4
 88105d8:	f800283a 	ret

088105dc <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 88105dc:	defffe04 	addi	sp,sp,-8
 88105e0:	df000115 	stw	fp,4(sp)
 88105e4:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
 88105e8:	e03fff15 	stw	zero,-4(fp)
 88105ec:	00000506 	br	8810604 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
 88105f0:	e0bfff17 	ldw	r2,-4(fp)
 88105f4:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
 88105f8:	e0bfff17 	ldw	r2,-4(fp)
 88105fc:	10800804 	addi	r2,r2,32
 8810600:	e0bfff15 	stw	r2,-4(fp)
 8810604:	e0bfff17 	ldw	r2,-4(fp)
 8810608:	10810030 	cmpltui	r2,r2,1024
 881060c:	103ff81e 	bne	r2,zero,88105f0 <alt_dcache_flush_all+0x14>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 8810610:	e037883a 	mov	sp,fp
 8810614:	df000017 	ldw	fp,0(sp)
 8810618:	dec00104 	addi	sp,sp,4
 881061c:	f800283a 	ret

08810620 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
 8810620:	defff904 	addi	sp,sp,-28
 8810624:	dfc00615 	stw	ra,24(sp)
 8810628:	df000515 	stw	fp,20(sp)
 881062c:	df000504 	addi	fp,sp,20
 8810630:	e13ffd15 	stw	r4,-12(fp)
 8810634:	e17ffe15 	stw	r5,-8(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
 8810638:	e0bffd17 	ldw	r2,-12(fp)
 881063c:	1005003a 	cmpeq	r2,r2,zero
 8810640:	1000041e 	bne	r2,zero,8810654 <alt_dev_llist_insert+0x34>
 8810644:	e0bffd17 	ldw	r2,-12(fp)
 8810648:	10800217 	ldw	r2,8(r2)
 881064c:	1004c03a 	cmpne	r2,r2,zero
 8810650:	1000071e 	bne	r2,zero,8810670 <alt_dev_llist_insert+0x50>
  {
    ALT_ERRNO = EINVAL;
 8810654:	88106d40 	call	88106d4 <alt_get_errno>
 8810658:	1007883a 	mov	r3,r2
 881065c:	00800584 	movi	r2,22
 8810660:	18800015 	stw	r2,0(r3)
    return -EINVAL;
 8810664:	00bffa84 	movi	r2,-22
 8810668:	e0bfff15 	stw	r2,-4(fp)
 881066c:	00001306 	br	88106bc <alt_dev_llist_insert+0x9c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
 8810670:	e0fffd17 	ldw	r3,-12(fp)
 8810674:	e0bffe17 	ldw	r2,-8(fp)
 8810678:	e0bffb15 	stw	r2,-20(fp)
 881067c:	e0fffc15 	stw	r3,-16(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 8810680:	e0fffc17 	ldw	r3,-16(fp)
 8810684:	e0bffb17 	ldw	r2,-20(fp)
 8810688:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
 881068c:	e0bffb17 	ldw	r2,-20(fp)
 8810690:	10c00017 	ldw	r3,0(r2)
 8810694:	e0bffc17 	ldw	r2,-16(fp)
 8810698:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 881069c:	e0bffb17 	ldw	r2,-20(fp)
 88106a0:	10c00017 	ldw	r3,0(r2)
 88106a4:	e0bffc17 	ldw	r2,-16(fp)
 88106a8:	18800115 	stw	r2,4(r3)
  list->next           = entry;
 88106ac:	e0fffb17 	ldw	r3,-20(fp)
 88106b0:	e0bffc17 	ldw	r2,-16(fp)
 88106b4:	18800015 	stw	r2,0(r3)

  return 0;  
 88106b8:	e03fff15 	stw	zero,-4(fp)
 88106bc:	e0bfff17 	ldw	r2,-4(fp)
}
 88106c0:	e037883a 	mov	sp,fp
 88106c4:	dfc00117 	ldw	ra,4(sp)
 88106c8:	df000017 	ldw	fp,0(sp)
 88106cc:	dec00204 	addi	sp,sp,8
 88106d0:	f800283a 	ret

088106d4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 88106d4:	defffd04 	addi	sp,sp,-12
 88106d8:	dfc00215 	stw	ra,8(sp)
 88106dc:	df000115 	stw	fp,4(sp)
 88106e0:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 88106e4:	00822074 	movhi	r2,2177
 88106e8:	108e5d04 	addi	r2,r2,14708
 88106ec:	10800017 	ldw	r2,0(r2)
 88106f0:	1005003a 	cmpeq	r2,r2,zero
 88106f4:	1000061e 	bne	r2,zero,8810710 <alt_get_errno+0x3c>
 88106f8:	00822074 	movhi	r2,2177
 88106fc:	108e5d04 	addi	r2,r2,14708
 8810700:	10800017 	ldw	r2,0(r2)
 8810704:	103ee83a 	callr	r2
 8810708:	e0bfff15 	stw	r2,-4(fp)
 881070c:	00000306 	br	881071c <alt_get_errno+0x48>
 8810710:	00822074 	movhi	r2,2177
 8810714:	10956404 	addi	r2,r2,21904
 8810718:	e0bfff15 	stw	r2,-4(fp)
 881071c:	e0bfff17 	ldw	r2,-4(fp)
}
 8810720:	e037883a 	mov	sp,fp
 8810724:	dfc00117 	ldw	ra,4(sp)
 8810728:	df000017 	ldw	fp,0(sp)
 881072c:	dec00204 	addi	sp,sp,8
 8810730:	f800283a 	ret

08810734 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
 8810734:	defffd04 	addi	sp,sp,-12
 8810738:	dfc00215 	stw	ra,8(sp)
 881073c:	df000115 	stw	fp,4(sp)
 8810740:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 8810744:	00bfff04 	movi	r2,-4
 8810748:	00c22074 	movhi	r3,2177
 881074c:	18c60c04 	addi	r3,r3,6192
 8810750:	1885883a 	add	r2,r3,r2
 8810754:	e0bfff15 	stw	r2,-4(fp)
 8810758:	00000606 	br	8810774 <_do_ctors+0x40>
        (*ctor) (); 
 881075c:	e0bfff17 	ldw	r2,-4(fp)
 8810760:	10800017 	ldw	r2,0(r2)
 8810764:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 8810768:	e0bfff17 	ldw	r2,-4(fp)
 881076c:	10bfff04 	addi	r2,r2,-4
 8810770:	e0bfff15 	stw	r2,-4(fp)
 8810774:	e0ffff17 	ldw	r3,-4(fp)
 8810778:	00822074 	movhi	r2,2177
 881077c:	10860b04 	addi	r2,r2,6188
 8810780:	18bff62e 	bgeu	r3,r2,881075c <_do_ctors+0x28>
        (*ctor) (); 
}
 8810784:	e037883a 	mov	sp,fp
 8810788:	dfc00117 	ldw	ra,4(sp)
 881078c:	df000017 	ldw	fp,0(sp)
 8810790:	dec00204 	addi	sp,sp,8
 8810794:	f800283a 	ret

08810798 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
 8810798:	defffd04 	addi	sp,sp,-12
 881079c:	dfc00215 	stw	ra,8(sp)
 88107a0:	df000115 	stw	fp,4(sp)
 88107a4:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 88107a8:	00bfff04 	movi	r2,-4
 88107ac:	00c22074 	movhi	r3,2177
 88107b0:	18c60c04 	addi	r3,r3,6192
 88107b4:	1885883a 	add	r2,r3,r2
 88107b8:	e0bfff15 	stw	r2,-4(fp)
 88107bc:	00000606 	br	88107d8 <_do_dtors+0x40>
        (*dtor) (); 
 88107c0:	e0bfff17 	ldw	r2,-4(fp)
 88107c4:	10800017 	ldw	r2,0(r2)
 88107c8:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 88107cc:	e0bfff17 	ldw	r2,-4(fp)
 88107d0:	10bfff04 	addi	r2,r2,-4
 88107d4:	e0bfff15 	stw	r2,-4(fp)
 88107d8:	e0ffff17 	ldw	r3,-4(fp)
 88107dc:	00822074 	movhi	r2,2177
 88107e0:	10860c04 	addi	r2,r2,6192
 88107e4:	18bff62e 	bgeu	r3,r2,88107c0 <_do_dtors+0x28>
        (*dtor) (); 
}
 88107e8:	e037883a 	mov	sp,fp
 88107ec:	dfc00117 	ldw	ra,4(sp)
 88107f0:	df000017 	ldw	fp,0(sp)
 88107f4:	dec00204 	addi	sp,sp,8
 88107f8:	f800283a 	ret

088107fc <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 88107fc:	defff904 	addi	sp,sp,-28
 8810800:	dfc00615 	stw	ra,24(sp)
 8810804:	df000515 	stw	fp,20(sp)
 8810808:	df000504 	addi	fp,sp,20
 881080c:	e13ffd15 	stw	r4,-12(fp)
 8810810:	e17ffe15 	stw	r5,-8(fp)
  alt_dev* next = (alt_dev*) llist->next;
 8810814:	e0bffe17 	ldw	r2,-8(fp)
 8810818:	10800017 	ldw	r2,0(r2)
 881081c:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
 8810820:	e13ffd17 	ldw	r4,-12(fp)
 8810824:	8804e480 	call	8804e48 <strlen>
 8810828:	10800044 	addi	r2,r2,1
 881082c:	e0bffb15 	stw	r2,-20(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 8810830:	00000d06 	br	8810868 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 8810834:	e0bffc17 	ldw	r2,-16(fp)
 8810838:	11000217 	ldw	r4,8(r2)
 881083c:	e1bffb17 	ldw	r6,-20(fp)
 8810840:	e17ffd17 	ldw	r5,-12(fp)
 8810844:	88114040 	call	8811404 <memcmp>
 8810848:	1004c03a 	cmpne	r2,r2,zero
 881084c:	1000031e 	bne	r2,zero,881085c <alt_find_dev+0x60>
    {
      /* match found */

      return next;
 8810850:	e0bffc17 	ldw	r2,-16(fp)
 8810854:	e0bfff15 	stw	r2,-4(fp)
 8810858:	00000706 	br	8810878 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
 881085c:	e0bffc17 	ldw	r2,-16(fp)
 8810860:	10800017 	ldw	r2,0(r2)
 8810864:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 8810868:	e0fffe17 	ldw	r3,-8(fp)
 881086c:	e0bffc17 	ldw	r2,-16(fp)
 8810870:	10fff01e 	bne	r2,r3,8810834 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
 8810874:	e03fff15 	stw	zero,-4(fp)
 8810878:	e0bfff17 	ldw	r2,-4(fp)
}
 881087c:	e037883a 	mov	sp,fp
 8810880:	dfc00117 	ldw	ra,4(sp)
 8810884:	df000017 	ldw	fp,0(sp)
 8810888:	dec00204 	addi	sp,sp,8
 881088c:	f800283a 	ret

08810890 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 8810890:	defffe04 	addi	sp,sp,-8
 8810894:	dfc00115 	stw	ra,4(sp)
 8810898:	df000015 	stw	fp,0(sp)
 881089c:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
 88108a0:	0009883a 	mov	r4,zero
 88108a4:	01440004 	movi	r5,4096
 88108a8:	88113280 	call	8811328 <alt_icache_flush>
#endif
}
 88108ac:	e037883a 	mov	sp,fp
 88108b0:	dfc00117 	ldw	ra,4(sp)
 88108b4:	df000017 	ldw	fp,0(sp)
 88108b8:	dec00204 	addi	sp,sp,8
 88108bc:	f800283a 	ret

088108c0 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 88108c0:	defff904 	addi	sp,sp,-28
 88108c4:	dfc00615 	stw	ra,24(sp)
 88108c8:	df000515 	stw	fp,20(sp)
 88108cc:	df000504 	addi	fp,sp,20
 88108d0:	e13ffc15 	stw	r4,-16(fp)
 88108d4:	e17ffd15 	stw	r5,-12(fp)
 88108d8:	e1bffe15 	stw	r6,-8(fp)
 88108dc:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
 88108e0:	e0800217 	ldw	r2,8(fp)
 88108e4:	d8800015 	stw	r2,0(sp)
 88108e8:	e13ffc17 	ldw	r4,-16(fp)
 88108ec:	e17ffd17 	ldw	r5,-12(fp)
 88108f0:	e1bffe17 	ldw	r6,-8(fp)
 88108f4:	e1ffff17 	ldw	r7,-4(fp)
 88108f8:	8810a940 	call	8810a94 <alt_iic_isr_register>
}  
 88108fc:	e037883a 	mov	sp,fp
 8810900:	dfc00117 	ldw	ra,4(sp)
 8810904:	df000017 	ldw	fp,0(sp)
 8810908:	dec00204 	addi	sp,sp,8
 881090c:	f800283a 	ret

08810910 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
 8810910:	defff904 	addi	sp,sp,-28
 8810914:	df000615 	stw	fp,24(sp)
 8810918:	df000604 	addi	fp,sp,24
 881091c:	e13ffe15 	stw	r4,-8(fp)
 8810920:	e17fff15 	stw	r5,-4(fp)
 8810924:	e0bfff17 	ldw	r2,-4(fp)
 8810928:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 881092c:	0005303a 	rdctl	r2,status
 8810930:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8810934:	e0fffb17 	ldw	r3,-20(fp)
 8810938:	00bfff84 	movi	r2,-2
 881093c:	1884703a 	and	r2,r3,r2
 8810940:	1001703a 	wrctl	status,r2
  
  return context;
 8810944:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 8810948:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active |= (1 << id);
 881094c:	e0fffc17 	ldw	r3,-16(fp)
 8810950:	00800044 	movi	r2,1
 8810954:	10c4983a 	sll	r2,r2,r3
 8810958:	1007883a 	mov	r3,r2
 881095c:	00822074 	movhi	r2,2177
 8810960:	10956804 	addi	r2,r2,21920
 8810964:	10800017 	ldw	r2,0(r2)
 8810968:	1886b03a 	or	r3,r3,r2
 881096c:	00822074 	movhi	r2,2177
 8810970:	10956804 	addi	r2,r2,21920
 8810974:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 8810978:	00822074 	movhi	r2,2177
 881097c:	10956804 	addi	r2,r2,21920
 8810980:	10800017 	ldw	r2,0(r2)
 8810984:	100170fa 	wrctl	ienable,r2
 8810988:	e0bffd17 	ldw	r2,-12(fp)
 881098c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8810990:	e0bffa17 	ldw	r2,-24(fp)
 8810994:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 8810998:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
 881099c:	e037883a 	mov	sp,fp
 88109a0:	df000017 	ldw	fp,0(sp)
 88109a4:	dec00104 	addi	sp,sp,4
 88109a8:	f800283a 	ret

088109ac <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
 88109ac:	defff904 	addi	sp,sp,-28
 88109b0:	df000615 	stw	fp,24(sp)
 88109b4:	df000604 	addi	fp,sp,24
 88109b8:	e13ffe15 	stw	r4,-8(fp)
 88109bc:	e17fff15 	stw	r5,-4(fp)
 88109c0:	e0bfff17 	ldw	r2,-4(fp)
 88109c4:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 88109c8:	0005303a 	rdctl	r2,status
 88109cc:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 88109d0:	e0fffb17 	ldw	r3,-20(fp)
 88109d4:	00bfff84 	movi	r2,-2
 88109d8:	1884703a 	and	r2,r3,r2
 88109dc:	1001703a 	wrctl	status,r2
  
  return context;
 88109e0:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 88109e4:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active &= ~(1 << id);
 88109e8:	e0fffc17 	ldw	r3,-16(fp)
 88109ec:	00800044 	movi	r2,1
 88109f0:	10c4983a 	sll	r2,r2,r3
 88109f4:	0084303a 	nor	r2,zero,r2
 88109f8:	1007883a 	mov	r3,r2
 88109fc:	00822074 	movhi	r2,2177
 8810a00:	10956804 	addi	r2,r2,21920
 8810a04:	10800017 	ldw	r2,0(r2)
 8810a08:	1886703a 	and	r3,r3,r2
 8810a0c:	00822074 	movhi	r2,2177
 8810a10:	10956804 	addi	r2,r2,21920
 8810a14:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 8810a18:	00822074 	movhi	r2,2177
 8810a1c:	10956804 	addi	r2,r2,21920
 8810a20:	10800017 	ldw	r2,0(r2)
 8810a24:	100170fa 	wrctl	ienable,r2
 8810a28:	e0bffd17 	ldw	r2,-12(fp)
 8810a2c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8810a30:	e0bffa17 	ldw	r2,-24(fp)
 8810a34:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 8810a38:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
 8810a3c:	e037883a 	mov	sp,fp
 8810a40:	df000017 	ldw	fp,0(sp)
 8810a44:	dec00104 	addi	sp,sp,4
 8810a48:	f800283a 	ret

08810a4c <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
 8810a4c:	defffc04 	addi	sp,sp,-16
 8810a50:	df000315 	stw	fp,12(sp)
 8810a54:	df000304 	addi	fp,sp,12
 8810a58:	e13ffe15 	stw	r4,-8(fp)
 8810a5c:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
 8810a60:	000530fa 	rdctl	r2,ienable
 8810a64:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
 8810a68:	e0ffff17 	ldw	r3,-4(fp)
 8810a6c:	00800044 	movi	r2,1
 8810a70:	10c4983a 	sll	r2,r2,r3
 8810a74:	1007883a 	mov	r3,r2
 8810a78:	e0bffd17 	ldw	r2,-12(fp)
 8810a7c:	1884703a 	and	r2,r3,r2
 8810a80:	1004c03a 	cmpne	r2,r2,zero
}
 8810a84:	e037883a 	mov	sp,fp
 8810a88:	df000017 	ldw	fp,0(sp)
 8810a8c:	dec00104 	addi	sp,sp,4
 8810a90:	f800283a 	ret

08810a94 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 8810a94:	defff404 	addi	sp,sp,-48
 8810a98:	dfc00b15 	stw	ra,44(sp)
 8810a9c:	df000a15 	stw	fp,40(sp)
 8810aa0:	df000a04 	addi	fp,sp,40
 8810aa4:	e13ffb15 	stw	r4,-20(fp)
 8810aa8:	e17ffc15 	stw	r5,-16(fp)
 8810aac:	e1bffd15 	stw	r6,-12(fp)
 8810ab0:	e1fffe15 	stw	r7,-8(fp)
  int rc = -EINVAL;  
 8810ab4:	00bffa84 	movi	r2,-22
 8810ab8:	e0bffa15 	stw	r2,-24(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
 8810abc:	e0bffc17 	ldw	r2,-16(fp)
 8810ac0:	e0bff915 	stw	r2,-28(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 8810ac4:	e0bff917 	ldw	r2,-28(fp)
 8810ac8:	10800808 	cmpgei	r2,r2,32
 8810acc:	1000291e 	bne	r2,zero,8810b74 <alt_iic_isr_register+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8810ad0:	0005303a 	rdctl	r2,status
 8810ad4:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8810ad8:	e0fff717 	ldw	r3,-36(fp)
 8810adc:	00bfff84 	movi	r2,-2
 8810ae0:	1884703a 	and	r2,r3,r2
 8810ae4:	1001703a 	wrctl	status,r2
  
  return context;
 8810ae8:	e0bff717 	ldw	r2,-36(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
 8810aec:	e0bff815 	stw	r2,-32(fp)

    alt_irq[id].handler = isr;
 8810af0:	e0bff917 	ldw	r2,-28(fp)
 8810af4:	00c22074 	movhi	r3,2177
 8810af8:	18d57504 	addi	r3,r3,21972
 8810afc:	100490fa 	slli	r2,r2,3
 8810b00:	10c7883a 	add	r3,r2,r3
 8810b04:	e0bffd17 	ldw	r2,-12(fp)
 8810b08:	18800015 	stw	r2,0(r3)
    alt_irq[id].context = isr_context;
 8810b0c:	e0bff917 	ldw	r2,-28(fp)
 8810b10:	00c22074 	movhi	r3,2177
 8810b14:	18d57504 	addi	r3,r3,21972
 8810b18:	100490fa 	slli	r2,r2,3
 8810b1c:	10c5883a 	add	r2,r2,r3
 8810b20:	10c00104 	addi	r3,r2,4
 8810b24:	e0bffe17 	ldw	r2,-8(fp)
 8810b28:	18800015 	stw	r2,0(r3)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
 8810b2c:	e0bffd17 	ldw	r2,-12(fp)
 8810b30:	1005003a 	cmpeq	r2,r2,zero
 8810b34:	1000051e 	bne	r2,zero,8810b4c <alt_iic_isr_register+0xb8>
 8810b38:	e17ff917 	ldw	r5,-28(fp)
 8810b3c:	e13ffb17 	ldw	r4,-20(fp)
 8810b40:	88109100 	call	8810910 <alt_ic_irq_enable>
 8810b44:	e0bfff15 	stw	r2,-4(fp)
 8810b48:	00000406 	br	8810b5c <alt_iic_isr_register+0xc8>
 8810b4c:	e17ff917 	ldw	r5,-28(fp)
 8810b50:	e13ffb17 	ldw	r4,-20(fp)
 8810b54:	88109ac0 	call	88109ac <alt_ic_irq_disable>
 8810b58:	e0bfff15 	stw	r2,-4(fp)
 8810b5c:	e0bfff17 	ldw	r2,-4(fp)
 8810b60:	e0bffa15 	stw	r2,-24(fp)
 8810b64:	e0bff817 	ldw	r2,-32(fp)
 8810b68:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8810b6c:	e0bff617 	ldw	r2,-40(fp)
 8810b70:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
 8810b74:	e0bffa17 	ldw	r2,-24(fp)
}
 8810b78:	e037883a 	mov	sp,fp
 8810b7c:	dfc00117 	ldw	ra,4(sp)
 8810b80:	df000017 	ldw	fp,0(sp)
 8810b84:	dec00204 	addi	sp,sp,8
 8810b88:	f800283a 	ret

08810b8c <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
 8810b8c:	defff904 	addi	sp,sp,-28
 8810b90:	dfc00615 	stw	ra,24(sp)
 8810b94:	df000515 	stw	fp,20(sp)
 8810b98:	df000504 	addi	fp,sp,20
 8810b9c:	e13ffc15 	stw	r4,-16(fp)
 8810ba0:	e17ffd15 	stw	r5,-12(fp)
 8810ba4:	e1bffe15 	stw	r6,-8(fp)
 8810ba8:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
 8810bac:	e13ffd17 	ldw	r4,-12(fp)
 8810bb0:	e17ffe17 	ldw	r5,-8(fp)
 8810bb4:	e1bfff17 	ldw	r6,-4(fp)
 8810bb8:	8810da40 	call	8810da4 <open>
 8810bbc:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
 8810bc0:	e0bffb17 	ldw	r2,-20(fp)
 8810bc4:	1004803a 	cmplt	r2,r2,zero
 8810bc8:	10001c1e 	bne	r2,zero,8810c3c <alt_open_fd+0xb0>
  {
    fd->dev      = alt_fd_list[old].dev;
 8810bcc:	e0bffb17 	ldw	r2,-20(fp)
 8810bd0:	00c22074 	movhi	r3,2177
 8810bd4:	18c98504 	addi	r3,r3,9748
 8810bd8:	10800324 	muli	r2,r2,12
 8810bdc:	10c5883a 	add	r2,r2,r3
 8810be0:	10c00017 	ldw	r3,0(r2)
 8810be4:	e0bffc17 	ldw	r2,-16(fp)
 8810be8:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
 8810bec:	e0bffb17 	ldw	r2,-20(fp)
 8810bf0:	00c22074 	movhi	r3,2177
 8810bf4:	18c98504 	addi	r3,r3,9748
 8810bf8:	10800324 	muli	r2,r2,12
 8810bfc:	10c5883a 	add	r2,r2,r3
 8810c00:	10800104 	addi	r2,r2,4
 8810c04:	10c00017 	ldw	r3,0(r2)
 8810c08:	e0bffc17 	ldw	r2,-16(fp)
 8810c0c:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 8810c10:	e0bffb17 	ldw	r2,-20(fp)
 8810c14:	00c22074 	movhi	r3,2177
 8810c18:	18c98504 	addi	r3,r3,9748
 8810c1c:	10800324 	muli	r2,r2,12
 8810c20:	10c5883a 	add	r2,r2,r3
 8810c24:	10800204 	addi	r2,r2,8
 8810c28:	10c00017 	ldw	r3,0(r2)
 8810c2c:	e0bffc17 	ldw	r2,-16(fp)
 8810c30:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
 8810c34:	e13ffb17 	ldw	r4,-20(fp)
 8810c38:	880d6c40 	call	880d6c4 <alt_release_fd>
  }
} 
 8810c3c:	e037883a 	mov	sp,fp
 8810c40:	dfc00117 	ldw	ra,4(sp)
 8810c44:	df000017 	ldw	fp,0(sp)
 8810c48:	dec00204 	addi	sp,sp,8
 8810c4c:	f800283a 	ret

08810c50 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 8810c50:	defffb04 	addi	sp,sp,-20
 8810c54:	dfc00415 	stw	ra,16(sp)
 8810c58:	df000315 	stw	fp,12(sp)
 8810c5c:	df000304 	addi	fp,sp,12
 8810c60:	e13ffd15 	stw	r4,-12(fp)
 8810c64:	e17ffe15 	stw	r5,-8(fp)
 8810c68:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 8810c6c:	01022074 	movhi	r4,2177
 8810c70:	21098804 	addi	r4,r4,9760
 8810c74:	e17ffd17 	ldw	r5,-12(fp)
 8810c78:	01800044 	movi	r6,1
 8810c7c:	01c07fc4 	movi	r7,511
 8810c80:	8810b8c0 	call	8810b8c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 8810c84:	01022074 	movhi	r4,2177
 8810c88:	21098504 	addi	r4,r4,9748
 8810c8c:	e17ffe17 	ldw	r5,-8(fp)
 8810c90:	000d883a 	mov	r6,zero
 8810c94:	01c07fc4 	movi	r7,511
 8810c98:	8810b8c0 	call	8810b8c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 8810c9c:	01022074 	movhi	r4,2177
 8810ca0:	21098b04 	addi	r4,r4,9772
 8810ca4:	e17fff17 	ldw	r5,-4(fp)
 8810ca8:	01800044 	movi	r6,1
 8810cac:	01c07fc4 	movi	r7,511
 8810cb0:	8810b8c0 	call	8810b8c <alt_open_fd>
}  
 8810cb4:	e037883a 	mov	sp,fp
 8810cb8:	dfc00117 	ldw	ra,4(sp)
 8810cbc:	df000017 	ldw	fp,0(sp)
 8810cc0:	dec00204 	addi	sp,sp,8
 8810cc4:	f800283a 	ret

08810cc8 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
 8810cc8:	defffc04 	addi	sp,sp,-16
 8810ccc:	df000315 	stw	fp,12(sp)
 8810cd0:	df000304 	addi	fp,sp,12
 8810cd4:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 8810cd8:	e0bffe17 	ldw	r2,-8(fp)
 8810cdc:	10800217 	ldw	r2,8(r2)
 8810ce0:	10d00034 	orhi	r3,r2,16384
 8810ce4:	e0bffe17 	ldw	r2,-8(fp)
 8810ce8:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 8810cec:	e03ffd15 	stw	zero,-12(fp)
 8810cf0:	00002006 	br	8810d74 <alt_file_locked+0xac>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 8810cf4:	e0bffd17 	ldw	r2,-12(fp)
 8810cf8:	00c22074 	movhi	r3,2177
 8810cfc:	18c98504 	addi	r3,r3,9748
 8810d00:	10800324 	muli	r2,r2,12
 8810d04:	10c5883a 	add	r2,r2,r3
 8810d08:	10c00017 	ldw	r3,0(r2)
 8810d0c:	e0bffe17 	ldw	r2,-8(fp)
 8810d10:	10800017 	ldw	r2,0(r2)
 8810d14:	1880141e 	bne	r3,r2,8810d68 <alt_file_locked+0xa0>
 8810d18:	e0bffd17 	ldw	r2,-12(fp)
 8810d1c:	00c22074 	movhi	r3,2177
 8810d20:	18c98504 	addi	r3,r3,9748
 8810d24:	10800324 	muli	r2,r2,12
 8810d28:	10c5883a 	add	r2,r2,r3
 8810d2c:	10800204 	addi	r2,r2,8
 8810d30:	10800017 	ldw	r2,0(r2)
 8810d34:	1004403a 	cmpge	r2,r2,zero
 8810d38:	10000b1e 	bne	r2,zero,8810d68 <alt_file_locked+0xa0>
 8810d3c:	e0bffd17 	ldw	r2,-12(fp)
 8810d40:	10800324 	muli	r2,r2,12
 8810d44:	1007883a 	mov	r3,r2
 8810d48:	00822074 	movhi	r2,2177
 8810d4c:	10898504 	addi	r2,r2,9748
 8810d50:	1887883a 	add	r3,r3,r2
 8810d54:	e0bffe17 	ldw	r2,-8(fp)
 8810d58:	18800326 	beq	r3,r2,8810d68 <alt_file_locked+0xa0>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
 8810d5c:	00bffcc4 	movi	r2,-13
 8810d60:	e0bfff15 	stw	r2,-4(fp)
 8810d64:	00000a06 	br	8810d90 <alt_file_locked+0xc8>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 8810d68:	e0bffd17 	ldw	r2,-12(fp)
 8810d6c:	10800044 	addi	r2,r2,1
 8810d70:	e0bffd15 	stw	r2,-12(fp)
 8810d74:	00822074 	movhi	r2,2177
 8810d78:	108e5c04 	addi	r2,r2,14704
 8810d7c:	10800017 	ldw	r2,0(r2)
 8810d80:	1007883a 	mov	r3,r2
 8810d84:	e0bffd17 	ldw	r2,-12(fp)
 8810d88:	18bfda2e 	bgeu	r3,r2,8810cf4 <alt_file_locked+0x2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
 8810d8c:	e03fff15 	stw	zero,-4(fp)
 8810d90:	e0bfff17 	ldw	r2,-4(fp)
}
 8810d94:	e037883a 	mov	sp,fp
 8810d98:	df000017 	ldw	fp,0(sp)
 8810d9c:	dec00104 	addi	sp,sp,4
 8810da0:	f800283a 	ret

08810da4 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 8810da4:	defff404 	addi	sp,sp,-48
 8810da8:	dfc00b15 	stw	ra,44(sp)
 8810dac:	df000a15 	stw	fp,40(sp)
 8810db0:	df000a04 	addi	fp,sp,40
 8810db4:	e13ffb15 	stw	r4,-20(fp)
 8810db8:	e17ffc15 	stw	r5,-16(fp)
 8810dbc:	e1bffd15 	stw	r6,-12(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
 8810dc0:	00bfffc4 	movi	r2,-1
 8810dc4:	e0bff815 	stw	r2,-32(fp)
  int status = -ENODEV;
 8810dc8:	00bffb44 	movi	r2,-19
 8810dcc:	e0bff715 	stw	r2,-36(fp)
  int isafs = 0;
 8810dd0:	e03ff615 	stw	zero,-40(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 8810dd4:	e13ffb17 	ldw	r4,-20(fp)
 8810dd8:	01422074 	movhi	r5,2177
 8810ddc:	294e5a04 	addi	r5,r5,14696
 8810de0:	88107fc0 	call	88107fc <alt_find_dev>
 8810de4:	e0bffa15 	stw	r2,-24(fp)
 8810de8:	e0bffa17 	ldw	r2,-24(fp)
 8810dec:	1004c03a 	cmpne	r2,r2,zero
 8810df0:	1000051e 	bne	r2,zero,8810e08 <open+0x64>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 8810df4:	e13ffb17 	ldw	r4,-20(fp)
 8810df8:	88111500 	call	8811150 <alt_find_file>
 8810dfc:	e0bffa15 	stw	r2,-24(fp)
    isafs = 1;
 8810e00:	00800044 	movi	r2,1
 8810e04:	e0bff615 	stw	r2,-40(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 8810e08:	e0bffa17 	ldw	r2,-24(fp)
 8810e0c:	1005003a 	cmpeq	r2,r2,zero
 8810e10:	1000301e 	bne	r2,zero,8810ed4 <open+0x130>
  {
    if ((index = alt_get_fd (dev)) < 0)
 8810e14:	e13ffa17 	ldw	r4,-24(fp)
 8810e18:	88112700 	call	8811270 <alt_get_fd>
 8810e1c:	e0bff815 	stw	r2,-32(fp)
 8810e20:	e0bff817 	ldw	r2,-32(fp)
 8810e24:	1004403a 	cmpge	r2,r2,zero
 8810e28:	1000031e 	bne	r2,zero,8810e38 <open+0x94>
    {
      status = index;
 8810e2c:	e0bff817 	ldw	r2,-32(fp)
 8810e30:	e0bff715 	stw	r2,-36(fp)
 8810e34:	00002906 	br	8810edc <open+0x138>
    }
    else
    {
      fd = &alt_fd_list[index];
 8810e38:	e0bff817 	ldw	r2,-32(fp)
 8810e3c:	10800324 	muli	r2,r2,12
 8810e40:	1007883a 	mov	r3,r2
 8810e44:	00822074 	movhi	r2,2177
 8810e48:	10898504 	addi	r2,r2,9748
 8810e4c:	1885883a 	add	r2,r3,r2
 8810e50:	e0bff915 	stw	r2,-28(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 8810e54:	e0fffc17 	ldw	r3,-16(fp)
 8810e58:	00900034 	movhi	r2,16384
 8810e5c:	10bfffc4 	addi	r2,r2,-1
 8810e60:	1886703a 	and	r3,r3,r2
 8810e64:	e0bff917 	ldw	r2,-28(fp)
 8810e68:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
 8810e6c:	e0bff617 	ldw	r2,-40(fp)
 8810e70:	1004c03a 	cmpne	r2,r2,zero
 8810e74:	1000061e 	bne	r2,zero,8810e90 <open+0xec>
 8810e78:	e13ff917 	ldw	r4,-28(fp)
 8810e7c:	8810cc80 	call	8810cc8 <alt_file_locked>
 8810e80:	e0bff715 	stw	r2,-36(fp)
 8810e84:	e0bff717 	ldw	r2,-36(fp)
 8810e88:	1004803a 	cmplt	r2,r2,zero
 8810e8c:	1000131e 	bne	r2,zero,8810edc <open+0x138>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 8810e90:	e0bffa17 	ldw	r2,-24(fp)
 8810e94:	10800317 	ldw	r2,12(r2)
 8810e98:	1005003a 	cmpeq	r2,r2,zero
 8810e9c:	1000091e 	bne	r2,zero,8810ec4 <open+0x120>
 8810ea0:	e0bffa17 	ldw	r2,-24(fp)
 8810ea4:	10800317 	ldw	r2,12(r2)
 8810ea8:	e13ff917 	ldw	r4,-28(fp)
 8810eac:	e17ffb17 	ldw	r5,-20(fp)
 8810eb0:	e1bffc17 	ldw	r6,-16(fp)
 8810eb4:	e1fffd17 	ldw	r7,-12(fp)
 8810eb8:	103ee83a 	callr	r2
 8810ebc:	e0bfff15 	stw	r2,-4(fp)
 8810ec0:	00000106 	br	8810ec8 <open+0x124>
 8810ec4:	e03fff15 	stw	zero,-4(fp)
 8810ec8:	e0bfff17 	ldw	r2,-4(fp)
 8810ecc:	e0bff715 	stw	r2,-36(fp)
 8810ed0:	00000206 	br	8810edc <open+0x138>
      }
    }
  }
  else
  {
    status = -ENODEV;
 8810ed4:	00bffb44 	movi	r2,-19
 8810ed8:	e0bff715 	stw	r2,-36(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 8810edc:	e0bff717 	ldw	r2,-36(fp)
 8810ee0:	1004403a 	cmpge	r2,r2,zero
 8810ee4:	1000091e 	bne	r2,zero,8810f0c <open+0x168>
  {
    alt_release_fd (index);  
 8810ee8:	e13ff817 	ldw	r4,-32(fp)
 8810eec:	880d6c40 	call	880d6c4 <alt_release_fd>
    ALT_ERRNO = -status;
 8810ef0:	8810f2c0 	call	8810f2c <alt_get_errno>
 8810ef4:	e0fff717 	ldw	r3,-36(fp)
 8810ef8:	00c7c83a 	sub	r3,zero,r3
 8810efc:	10c00015 	stw	r3,0(r2)
    return -1;
 8810f00:	00bfffc4 	movi	r2,-1
 8810f04:	e0bffe15 	stw	r2,-8(fp)
 8810f08:	00000206 	br	8810f14 <open+0x170>
  }
  
  /* return the reference upon success */

  return index;
 8810f0c:	e0bff817 	ldw	r2,-32(fp)
 8810f10:	e0bffe15 	stw	r2,-8(fp)
 8810f14:	e0bffe17 	ldw	r2,-8(fp)
}
 8810f18:	e037883a 	mov	sp,fp
 8810f1c:	dfc00117 	ldw	ra,4(sp)
 8810f20:	df000017 	ldw	fp,0(sp)
 8810f24:	dec00204 	addi	sp,sp,8
 8810f28:	f800283a 	ret

08810f2c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 8810f2c:	defffd04 	addi	sp,sp,-12
 8810f30:	dfc00215 	stw	ra,8(sp)
 8810f34:	df000115 	stw	fp,4(sp)
 8810f38:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 8810f3c:	00822074 	movhi	r2,2177
 8810f40:	108e5d04 	addi	r2,r2,14708
 8810f44:	10800017 	ldw	r2,0(r2)
 8810f48:	1005003a 	cmpeq	r2,r2,zero
 8810f4c:	1000061e 	bne	r2,zero,8810f68 <alt_get_errno+0x3c>
 8810f50:	00822074 	movhi	r2,2177
 8810f54:	108e5d04 	addi	r2,r2,14708
 8810f58:	10800017 	ldw	r2,0(r2)
 8810f5c:	103ee83a 	callr	r2
 8810f60:	e0bfff15 	stw	r2,-4(fp)
 8810f64:	00000306 	br	8810f74 <alt_get_errno+0x48>
 8810f68:	00822074 	movhi	r2,2177
 8810f6c:	10956404 	addi	r2,r2,21904
 8810f70:	e0bfff15 	stw	r2,-4(fp)
 8810f74:	e0bfff17 	ldw	r2,-4(fp)
}
 8810f78:	e037883a 	mov	sp,fp
 8810f7c:	dfc00117 	ldw	ra,4(sp)
 8810f80:	df000017 	ldw	fp,0(sp)
 8810f84:	dec00204 	addi	sp,sp,8
 8810f88:	f800283a 	ret

08810f8c <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
 8810f8c:	defffa04 	addi	sp,sp,-24
 8810f90:	df000515 	stw	fp,20(sp)
 8810f94:	df000504 	addi	fp,sp,20
 8810f98:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8810f9c:	0005303a 	rdctl	r2,status
 8810fa0:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8810fa4:	e0fffd17 	ldw	r3,-12(fp)
 8810fa8:	00bfff84 	movi	r2,-2
 8810fac:	1884703a 	and	r2,r3,r2
 8810fb0:	1001703a 	wrctl	status,r2
  
  return context;
 8810fb4:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
 8810fb8:	e0bffe15 	stw	r2,-8(fp)
  alt_llist_remove (&alarm->llist);
 8810fbc:	e0bfff17 	ldw	r2,-4(fp)
 8810fc0:	e0bffc15 	stw	r2,-16(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 8810fc4:	e0bffc17 	ldw	r2,-16(fp)
 8810fc8:	10c00017 	ldw	r3,0(r2)
 8810fcc:	e0bffc17 	ldw	r2,-16(fp)
 8810fd0:	10800117 	ldw	r2,4(r2)
 8810fd4:	18800115 	stw	r2,4(r3)
  entry->previous->next = entry->next;
 8810fd8:	e0bffc17 	ldw	r2,-16(fp)
 8810fdc:	10c00117 	ldw	r3,4(r2)
 8810fe0:	e0bffc17 	ldw	r2,-16(fp)
 8810fe4:	10800017 	ldw	r2,0(r2)
 8810fe8:	18800015 	stw	r2,0(r3)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 8810fec:	e0fffc17 	ldw	r3,-16(fp)
 8810ff0:	e0bffc17 	ldw	r2,-16(fp)
 8810ff4:	18800115 	stw	r2,4(r3)
  entry->next     = entry;
 8810ff8:	e0fffc17 	ldw	r3,-16(fp)
 8810ffc:	e0bffc17 	ldw	r2,-16(fp)
 8811000:	18800015 	stw	r2,0(r3)
 8811004:	e0bffe17 	ldw	r2,-8(fp)
 8811008:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 881100c:	e0bffb17 	ldw	r2,-20(fp)
 8811010:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
 8811014:	e037883a 	mov	sp,fp
 8811018:	df000017 	ldw	fp,0(sp)
 881101c:	dec00104 	addi	sp,sp,4
 8811020:	f800283a 	ret

08811024 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 8811024:	defffb04 	addi	sp,sp,-20
 8811028:	dfc00415 	stw	ra,16(sp)
 881102c:	df000315 	stw	fp,12(sp)
 8811030:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 8811034:	d0a01617 	ldw	r2,-32680(gp)
 8811038:	e0bffe15 	stw	r2,-8(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 881103c:	d0a71c17 	ldw	r2,-25488(gp)
 8811040:	10800044 	addi	r2,r2,1
 8811044:	d0a71c15 	stw	r2,-25488(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 8811048:	00003106 	br	8811110 <alt_tick+0xec>
  {
    next = (alt_alarm*) alarm->llist.next;
 881104c:	e0bffe17 	ldw	r2,-8(fp)
 8811050:	10800017 	ldw	r2,0(r2)
 8811054:	e0bfff15 	stw	r2,-4(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 8811058:	e0bffe17 	ldw	r2,-8(fp)
 881105c:	10800403 	ldbu	r2,16(r2)
 8811060:	10803fcc 	andi	r2,r2,255
 8811064:	1005003a 	cmpeq	r2,r2,zero
 8811068:	1000051e 	bne	r2,zero,8811080 <alt_tick+0x5c>
 881106c:	d0a71c17 	ldw	r2,-25488(gp)
 8811070:	1004c03a 	cmpne	r2,r2,zero
 8811074:	1000021e 	bne	r2,zero,8811080 <alt_tick+0x5c>
    {
      alarm->rollover = 0;
 8811078:	e0bffe17 	ldw	r2,-8(fp)
 881107c:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 8811080:	e0bffe17 	ldw	r2,-8(fp)
 8811084:	10c00217 	ldw	r3,8(r2)
 8811088:	d0a71c17 	ldw	r2,-25488(gp)
 881108c:	10c01e36 	bltu	r2,r3,8811108 <alt_tick+0xe4>
 8811090:	e0bffe17 	ldw	r2,-8(fp)
 8811094:	10800403 	ldbu	r2,16(r2)
 8811098:	10803fcc 	andi	r2,r2,255
 881109c:	1004c03a 	cmpne	r2,r2,zero
 88110a0:	1000191e 	bne	r2,zero,8811108 <alt_tick+0xe4>
    {
      next_callback = alarm->callback (alarm->context);
 88110a4:	e0bffe17 	ldw	r2,-8(fp)
 88110a8:	10c00317 	ldw	r3,12(r2)
 88110ac:	e0bffe17 	ldw	r2,-8(fp)
 88110b0:	11000517 	ldw	r4,20(r2)
 88110b4:	183ee83a 	callr	r3
 88110b8:	e0bffd15 	stw	r2,-12(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 88110bc:	e0bffd17 	ldw	r2,-12(fp)
 88110c0:	1004c03a 	cmpne	r2,r2,zero
 88110c4:	1000031e 	bne	r2,zero,88110d4 <alt_tick+0xb0>
      {
        alt_alarm_stop (alarm);
 88110c8:	e13ffe17 	ldw	r4,-8(fp)
 88110cc:	8810f8c0 	call	8810f8c <alt_alarm_stop>
 88110d0:	00000d06 	br	8811108 <alt_tick+0xe4>
      }
      else
      {
        alarm->time += next_callback;
 88110d4:	e0bffe17 	ldw	r2,-8(fp)
 88110d8:	10c00217 	ldw	r3,8(r2)
 88110dc:	e0bffd17 	ldw	r2,-12(fp)
 88110e0:	1887883a 	add	r3,r3,r2
 88110e4:	e0bffe17 	ldw	r2,-8(fp)
 88110e8:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 88110ec:	e0bffe17 	ldw	r2,-8(fp)
 88110f0:	10c00217 	ldw	r3,8(r2)
 88110f4:	d0a71c17 	ldw	r2,-25488(gp)
 88110f8:	1880032e 	bgeu	r3,r2,8811108 <alt_tick+0xe4>
        {
          alarm->rollover = 1;
 88110fc:	e0fffe17 	ldw	r3,-8(fp)
 8811100:	00800044 	movi	r2,1
 8811104:	18800405 	stb	r2,16(r3)
        }
      }
    }
    alarm = next;
 8811108:	e0bfff17 	ldw	r2,-4(fp)
 881110c:	e0bffe15 	stw	r2,-8(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 8811110:	d0e01604 	addi	r3,gp,-32680
 8811114:	e0bffe17 	ldw	r2,-8(fp)
 8811118:	10ffcc1e 	bne	r2,r3,881104c <alt_tick+0x28>
  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
}
 881111c:	e037883a 	mov	sp,fp
 8811120:	dfc00117 	ldw	ra,4(sp)
 8811124:	df000017 	ldw	fp,0(sp)
 8811128:	dec00204 	addi	sp,sp,8
 881112c:	f800283a 	ret

08811130 <altera_nios2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_irq_init(void) 
{
 8811130:	deffff04 	addi	sp,sp,-4
 8811134:	df000015 	stw	fp,0(sp)
 8811138:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 881113c:	000170fa 	wrctl	ienable,zero
}
 8811140:	e037883a 	mov	sp,fp
 8811144:	df000017 	ldw	fp,0(sp)
 8811148:	dec00104 	addi	sp,sp,4
 881114c:	f800283a 	ret

08811150 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 8811150:	defffa04 	addi	sp,sp,-24
 8811154:	dfc00515 	stw	ra,20(sp)
 8811158:	df000415 	stw	fp,16(sp)
 881115c:	df000404 	addi	fp,sp,16
 8811160:	e13ffe15 	stw	r4,-8(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 8811164:	00822074 	movhi	r2,2177
 8811168:	108e5804 	addi	r2,r2,14688
 881116c:	10800017 	ldw	r2,0(r2)
 8811170:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 8811174:	00003306 	br	8811244 <alt_find_file+0xf4>
  {
    len = strlen(next->name);
 8811178:	e0bffd17 	ldw	r2,-12(fp)
 881117c:	11000217 	ldw	r4,8(r2)
 8811180:	8804e480 	call	8804e48 <strlen>
 8811184:	e0bffc15 	stw	r2,-16(fp)
    
    if (next->name[len-1] == '/')
 8811188:	e0bffd17 	ldw	r2,-12(fp)
 881118c:	10c00217 	ldw	r3,8(r2)
 8811190:	e0bffc17 	ldw	r2,-16(fp)
 8811194:	1885883a 	add	r2,r3,r2
 8811198:	10bfffc4 	addi	r2,r2,-1
 881119c:	10800003 	ldbu	r2,0(r2)
 88111a0:	10803fcc 	andi	r2,r2,255
 88111a4:	1080201c 	xori	r2,r2,128
 88111a8:	10bfe004 	addi	r2,r2,-128
 88111ac:	10800bd8 	cmpnei	r2,r2,47
 88111b0:	1000031e 	bne	r2,zero,88111c0 <alt_find_file+0x70>
    {
      len -= 1;
 88111b4:	e0bffc17 	ldw	r2,-16(fp)
 88111b8:	10bfffc4 	addi	r2,r2,-1
 88111bc:	e0bffc15 	stw	r2,-16(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 88111c0:	e0bffc17 	ldw	r2,-16(fp)
 88111c4:	1007883a 	mov	r3,r2
 88111c8:	e0bffe17 	ldw	r2,-8(fp)
 88111cc:	1885883a 	add	r2,r3,r2
 88111d0:	10800003 	ldbu	r2,0(r2)
 88111d4:	10803fcc 	andi	r2,r2,255
 88111d8:	1080201c 	xori	r2,r2,128
 88111dc:	10bfe004 	addi	r2,r2,-128
 88111e0:	10800be0 	cmpeqi	r2,r2,47
 88111e4:	10000a1e 	bne	r2,zero,8811210 <alt_find_file+0xc0>
 88111e8:	e0bffc17 	ldw	r2,-16(fp)
 88111ec:	1007883a 	mov	r3,r2
 88111f0:	e0bffe17 	ldw	r2,-8(fp)
 88111f4:	1885883a 	add	r2,r3,r2
 88111f8:	10800003 	ldbu	r2,0(r2)
 88111fc:	10803fcc 	andi	r2,r2,255
 8811200:	1080201c 	xori	r2,r2,128
 8811204:	10bfe004 	addi	r2,r2,-128
 8811208:	1004c03a 	cmpne	r2,r2,zero
 881120c:	10000a1e 	bne	r2,zero,8811238 <alt_find_file+0xe8>
 8811210:	e0bffd17 	ldw	r2,-12(fp)
 8811214:	11000217 	ldw	r4,8(r2)
 8811218:	e1bffc17 	ldw	r6,-16(fp)
 881121c:	e17ffe17 	ldw	r5,-8(fp)
 8811220:	88114040 	call	8811404 <memcmp>
 8811224:	1004c03a 	cmpne	r2,r2,zero
 8811228:	1000031e 	bne	r2,zero,8811238 <alt_find_file+0xe8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
 881122c:	e0bffd17 	ldw	r2,-12(fp)
 8811230:	e0bfff15 	stw	r2,-4(fp)
 8811234:	00000806 	br	8811258 <alt_find_file+0x108>
    }
    next = (alt_dev*) next->llist.next;
 8811238:	e0bffd17 	ldw	r2,-12(fp)
 881123c:	10800017 	ldw	r2,0(r2)
 8811240:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 8811244:	00c22074 	movhi	r3,2177
 8811248:	18ce5804 	addi	r3,r3,14688
 881124c:	e0bffd17 	ldw	r2,-12(fp)
 8811250:	10ffc91e 	bne	r2,r3,8811178 <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
 8811254:	e03fff15 	stw	zero,-4(fp)
 8811258:	e0bfff17 	ldw	r2,-4(fp)
}
 881125c:	e037883a 	mov	sp,fp
 8811260:	dfc00117 	ldw	ra,4(sp)
 8811264:	df000017 	ldw	fp,0(sp)
 8811268:	dec00204 	addi	sp,sp,8
 881126c:	f800283a 	ret

08811270 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 8811270:	defffc04 	addi	sp,sp,-16
 8811274:	df000315 	stw	fp,12(sp)
 8811278:	df000304 	addi	fp,sp,12
 881127c:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
 8811280:	00bffa04 	movi	r2,-24
 8811284:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 8811288:	e03ffe15 	stw	zero,-8(fp)
 881128c:	00001e06 	br	8811308 <alt_get_fd+0x98>
  {
    if (!alt_fd_list[i].dev)
 8811290:	e0bffe17 	ldw	r2,-8(fp)
 8811294:	00c22074 	movhi	r3,2177
 8811298:	18c98504 	addi	r3,r3,9748
 881129c:	10800324 	muli	r2,r2,12
 88112a0:	10c5883a 	add	r2,r2,r3
 88112a4:	10800017 	ldw	r2,0(r2)
 88112a8:	1004c03a 	cmpne	r2,r2,zero
 88112ac:	1000131e 	bne	r2,zero,88112fc <alt_get_fd+0x8c>
    {
      alt_fd_list[i].dev = dev;
 88112b0:	e0bffe17 	ldw	r2,-8(fp)
 88112b4:	00c22074 	movhi	r3,2177
 88112b8:	18c98504 	addi	r3,r3,9748
 88112bc:	10800324 	muli	r2,r2,12
 88112c0:	10c7883a 	add	r3,r2,r3
 88112c4:	e0bfff17 	ldw	r2,-4(fp)
 88112c8:	18800015 	stw	r2,0(r3)
      if (i > alt_max_fd)
 88112cc:	00822074 	movhi	r2,2177
 88112d0:	108e5c04 	addi	r2,r2,14704
 88112d4:	10c00017 	ldw	r3,0(r2)
 88112d8:	e0bffe17 	ldw	r2,-8(fp)
 88112dc:	1880040e 	bge	r3,r2,88112f0 <alt_get_fd+0x80>
      {
        alt_max_fd = i;
 88112e0:	00c22074 	movhi	r3,2177
 88112e4:	18ce5c04 	addi	r3,r3,14704
 88112e8:	e0bffe17 	ldw	r2,-8(fp)
 88112ec:	18800015 	stw	r2,0(r3)
      }
      rc = i;
 88112f0:	e0bffe17 	ldw	r2,-8(fp)
 88112f4:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
 88112f8:	00000606 	br	8811314 <alt_get_fd+0xa4>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 88112fc:	e0bffe17 	ldw	r2,-8(fp)
 8811300:	10800044 	addi	r2,r2,1
 8811304:	e0bffe15 	stw	r2,-8(fp)
 8811308:	e0bffe17 	ldw	r2,-8(fp)
 881130c:	10800810 	cmplti	r2,r2,32
 8811310:	103fdf1e 	bne	r2,zero,8811290 <alt_get_fd+0x20>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
 8811314:	e0bffd17 	ldw	r2,-12(fp)
}
 8811318:	e037883a 	mov	sp,fp
 881131c:	df000017 	ldw	fp,0(sp)
 8811320:	dec00104 	addi	sp,sp,4
 8811324:	f800283a 	ret

08811328 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
 8811328:	defffb04 	addi	sp,sp,-20
 881132c:	df000415 	stw	fp,16(sp)
 8811330:	df000404 	addi	fp,sp,16
 8811334:	e13ffe15 	stw	r4,-8(fp)
 8811338:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
 881133c:	e0bfff17 	ldw	r2,-4(fp)
 8811340:	10840070 	cmpltui	r2,r2,4097
 8811344:	1000021e 	bne	r2,zero,8811350 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
 8811348:	00840004 	movi	r2,4096
 881134c:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
 8811350:	e0fffe17 	ldw	r3,-8(fp)
 8811354:	e0bfff17 	ldw	r2,-4(fp)
 8811358:	1885883a 	add	r2,r3,r2
 881135c:	e0bffc15 	stw	r2,-16(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 8811360:	e0bffe17 	ldw	r2,-8(fp)
 8811364:	e0bffd15 	stw	r2,-12(fp)
 8811368:	00000506 	br	8811380 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
 881136c:	e0bffd17 	ldw	r2,-12(fp)
 8811370:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 8811374:	e0bffd17 	ldw	r2,-12(fp)
 8811378:	10800804 	addi	r2,r2,32
 881137c:	e0bffd15 	stw	r2,-12(fp)
 8811380:	e0fffd17 	ldw	r3,-12(fp)
 8811384:	e0bffc17 	ldw	r2,-16(fp)
 8811388:	18bff836 	bltu	r3,r2,881136c <alt_icache_flush+0x44>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
 881138c:	e0bffe17 	ldw	r2,-8(fp)
 8811390:	108007cc 	andi	r2,r2,31
 8811394:	1005003a 	cmpeq	r2,r2,zero
 8811398:	1000021e 	bne	r2,zero,88113a4 <alt_icache_flush+0x7c>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
 881139c:	e0bffd17 	ldw	r2,-12(fp)
 88113a0:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
 88113a4:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
 88113a8:	e037883a 	mov	sp,fp
 88113ac:	df000017 	ldw	fp,0(sp)
 88113b0:	dec00104 	addi	sp,sp,4
 88113b4:	f800283a 	ret

088113b8 <atexit>:
 88113b8:	200b883a 	mov	r5,r4
 88113bc:	000d883a 	mov	r6,zero
 88113c0:	0009883a 	mov	r4,zero
 88113c4:	000f883a 	mov	r7,zero
 88113c8:	88114781 	jmpi	8811478 <__register_exitproc>

088113cc <exit>:
 88113cc:	defffe04 	addi	sp,sp,-8
 88113d0:	000b883a 	mov	r5,zero
 88113d4:	dc000015 	stw	r16,0(sp)
 88113d8:	dfc00115 	stw	ra,4(sp)
 88113dc:	2021883a 	mov	r16,r4
 88113e0:	88115b00 	call	88115b0 <__call_exitprocs>
 88113e4:	00822074 	movhi	r2,2177
 88113e8:	108e5304 	addi	r2,r2,14668
 88113ec:	11000017 	ldw	r4,0(r2)
 88113f0:	20800f17 	ldw	r2,60(r4)
 88113f4:	10000126 	beq	r2,zero,88113fc <exit+0x30>
 88113f8:	103ee83a 	callr	r2
 88113fc:	8009883a 	mov	r4,r16
 8811400:	88117a00 	call	88117a0 <_exit>

08811404 <memcmp>:
 8811404:	00c000c4 	movi	r3,3
 8811408:	1980032e 	bgeu	r3,r6,8811418 <memcmp+0x14>
 881140c:	2144b03a 	or	r2,r4,r5
 8811410:	10c4703a 	and	r2,r2,r3
 8811414:	10000f26 	beq	r2,zero,8811454 <memcmp+0x50>
 8811418:	31ffffc4 	addi	r7,r6,-1
 881141c:	3000061e 	bne	r6,zero,8811438 <memcmp+0x34>
 8811420:	00000a06 	br	881144c <memcmp+0x48>
 8811424:	39ffffc4 	addi	r7,r7,-1
 8811428:	00bfffc4 	movi	r2,-1
 881142c:	21000044 	addi	r4,r4,1
 8811430:	29400044 	addi	r5,r5,1
 8811434:	38800526 	beq	r7,r2,881144c <memcmp+0x48>
 8811438:	20c00003 	ldbu	r3,0(r4)
 881143c:	28800003 	ldbu	r2,0(r5)
 8811440:	18bff826 	beq	r3,r2,8811424 <memcmp+0x20>
 8811444:	1885c83a 	sub	r2,r3,r2
 8811448:	f800283a 	ret
 881144c:	0005883a 	mov	r2,zero
 8811450:	f800283a 	ret
 8811454:	180f883a 	mov	r7,r3
 8811458:	20c00017 	ldw	r3,0(r4)
 881145c:	28800017 	ldw	r2,0(r5)
 8811460:	18bfed1e 	bne	r3,r2,8811418 <memcmp+0x14>
 8811464:	31bfff04 	addi	r6,r6,-4
 8811468:	21000104 	addi	r4,r4,4
 881146c:	29400104 	addi	r5,r5,4
 8811470:	39bff936 	bltu	r7,r6,8811458 <memcmp+0x54>
 8811474:	003fe806 	br	8811418 <memcmp+0x14>

08811478 <__register_exitproc>:
 8811478:	defffa04 	addi	sp,sp,-24
 881147c:	00822074 	movhi	r2,2177
 8811480:	108e5304 	addi	r2,r2,14668
 8811484:	dc000015 	stw	r16,0(sp)
 8811488:	14000017 	ldw	r16,0(r2)
 881148c:	dd000415 	stw	r20,16(sp)
 8811490:	2829883a 	mov	r20,r5
 8811494:	81405217 	ldw	r5,328(r16)
 8811498:	dcc00315 	stw	r19,12(sp)
 881149c:	dc800215 	stw	r18,8(sp)
 88114a0:	dc400115 	stw	r17,4(sp)
 88114a4:	dfc00515 	stw	ra,20(sp)
 88114a8:	2023883a 	mov	r17,r4
 88114ac:	3027883a 	mov	r19,r6
 88114b0:	3825883a 	mov	r18,r7
 88114b4:	28002526 	beq	r5,zero,881154c <__register_exitproc+0xd4>
 88114b8:	29000117 	ldw	r4,4(r5)
 88114bc:	008007c4 	movi	r2,31
 88114c0:	11002716 	blt	r2,r4,8811560 <__register_exitproc+0xe8>
 88114c4:	8800101e 	bne	r17,zero,8811508 <__register_exitproc+0x90>
 88114c8:	2105883a 	add	r2,r4,r4
 88114cc:	1085883a 	add	r2,r2,r2
 88114d0:	20c00044 	addi	r3,r4,1
 88114d4:	1145883a 	add	r2,r2,r5
 88114d8:	0009883a 	mov	r4,zero
 88114dc:	15000215 	stw	r20,8(r2)
 88114e0:	28c00115 	stw	r3,4(r5)
 88114e4:	2005883a 	mov	r2,r4
 88114e8:	dfc00517 	ldw	ra,20(sp)
 88114ec:	dd000417 	ldw	r20,16(sp)
 88114f0:	dcc00317 	ldw	r19,12(sp)
 88114f4:	dc800217 	ldw	r18,8(sp)
 88114f8:	dc400117 	ldw	r17,4(sp)
 88114fc:	dc000017 	ldw	r16,0(sp)
 8811500:	dec00604 	addi	sp,sp,24
 8811504:	f800283a 	ret
 8811508:	29802204 	addi	r6,r5,136
 881150c:	00800044 	movi	r2,1
 8811510:	110e983a 	sll	r7,r2,r4
 8811514:	30c04017 	ldw	r3,256(r6)
 8811518:	2105883a 	add	r2,r4,r4
 881151c:	1085883a 	add	r2,r2,r2
 8811520:	1185883a 	add	r2,r2,r6
 8811524:	19c6b03a 	or	r3,r3,r7
 8811528:	14802015 	stw	r18,128(r2)
 881152c:	14c00015 	stw	r19,0(r2)
 8811530:	00800084 	movi	r2,2
 8811534:	30c04015 	stw	r3,256(r6)
 8811538:	88bfe31e 	bne	r17,r2,88114c8 <__register_exitproc+0x50>
 881153c:	30804117 	ldw	r2,260(r6)
 8811540:	11c4b03a 	or	r2,r2,r7
 8811544:	30804115 	stw	r2,260(r6)
 8811548:	003fdf06 	br	88114c8 <__register_exitproc+0x50>
 881154c:	00822074 	movhi	r2,2177
 8811550:	1095b504 	addi	r2,r2,22228
 8811554:	100b883a 	mov	r5,r2
 8811558:	80805215 	stw	r2,328(r16)
 881155c:	003fd606 	br	88114b8 <__register_exitproc+0x40>
 8811560:	00800034 	movhi	r2,0
 8811564:	10800004 	addi	r2,r2,0
 8811568:	1000021e 	bne	r2,zero,8811574 <__register_exitproc+0xfc>
 881156c:	013fffc4 	movi	r4,-1
 8811570:	003fdc06 	br	88114e4 <__register_exitproc+0x6c>
 8811574:	01006404 	movi	r4,400
 8811578:	103ee83a 	callr	r2
 881157c:	1007883a 	mov	r3,r2
 8811580:	103ffa26 	beq	r2,zero,881156c <__register_exitproc+0xf4>
 8811584:	80805217 	ldw	r2,328(r16)
 8811588:	180b883a 	mov	r5,r3
 881158c:	18000115 	stw	zero,4(r3)
 8811590:	18800015 	stw	r2,0(r3)
 8811594:	80c05215 	stw	r3,328(r16)
 8811598:	18006215 	stw	zero,392(r3)
 881159c:	18006315 	stw	zero,396(r3)
 88115a0:	0009883a 	mov	r4,zero
 88115a4:	883fc826 	beq	r17,zero,88114c8 <__register_exitproc+0x50>
 88115a8:	003fd706 	br	8811508 <__register_exitproc+0x90>

088115ac <register_fini>:
 88115ac:	f800283a 	ret

088115b0 <__call_exitprocs>:
 88115b0:	00822074 	movhi	r2,2177
 88115b4:	108e5304 	addi	r2,r2,14668
 88115b8:	10800017 	ldw	r2,0(r2)
 88115bc:	defff304 	addi	sp,sp,-52
 88115c0:	df000b15 	stw	fp,44(sp)
 88115c4:	d8800115 	stw	r2,4(sp)
 88115c8:	00800034 	movhi	r2,0
 88115cc:	10800004 	addi	r2,r2,0
 88115d0:	1005003a 	cmpeq	r2,r2,zero
 88115d4:	d8800215 	stw	r2,8(sp)
 88115d8:	d8800117 	ldw	r2,4(sp)
 88115dc:	dd400815 	stw	r21,32(sp)
 88115e0:	dd000715 	stw	r20,28(sp)
 88115e4:	10805204 	addi	r2,r2,328
 88115e8:	dfc00c15 	stw	ra,48(sp)
 88115ec:	ddc00a15 	stw	r23,40(sp)
 88115f0:	dd800915 	stw	r22,36(sp)
 88115f4:	dcc00615 	stw	r19,24(sp)
 88115f8:	dc800515 	stw	r18,20(sp)
 88115fc:	dc400415 	stw	r17,16(sp)
 8811600:	dc000315 	stw	r16,12(sp)
 8811604:	282b883a 	mov	r21,r5
 8811608:	2039883a 	mov	fp,r4
 881160c:	d8800015 	stw	r2,0(sp)
 8811610:	2829003a 	cmpeq	r20,r5,zero
 8811614:	d8800117 	ldw	r2,4(sp)
 8811618:	14405217 	ldw	r17,328(r2)
 881161c:	88001026 	beq	r17,zero,8811660 <__call_exitprocs+0xb0>
 8811620:	ddc00017 	ldw	r23,0(sp)
 8811624:	88800117 	ldw	r2,4(r17)
 8811628:	8c802204 	addi	r18,r17,136
 881162c:	143fffc4 	addi	r16,r2,-1
 8811630:	80000916 	blt	r16,zero,8811658 <__call_exitprocs+0xa8>
 8811634:	05bfffc4 	movi	r22,-1
 8811638:	a000151e 	bne	r20,zero,8811690 <__call_exitprocs+0xe0>
 881163c:	8409883a 	add	r4,r16,r16
 8811640:	2105883a 	add	r2,r4,r4
 8811644:	1485883a 	add	r2,r2,r18
 8811648:	10c02017 	ldw	r3,128(r2)
 881164c:	a8c01126 	beq	r21,r3,8811694 <__call_exitprocs+0xe4>
 8811650:	843fffc4 	addi	r16,r16,-1
 8811654:	85bff81e 	bne	r16,r22,8811638 <__call_exitprocs+0x88>
 8811658:	d8800217 	ldw	r2,8(sp)
 881165c:	10003126 	beq	r2,zero,8811724 <__call_exitprocs+0x174>
 8811660:	dfc00c17 	ldw	ra,48(sp)
 8811664:	df000b17 	ldw	fp,44(sp)
 8811668:	ddc00a17 	ldw	r23,40(sp)
 881166c:	dd800917 	ldw	r22,36(sp)
 8811670:	dd400817 	ldw	r21,32(sp)
 8811674:	dd000717 	ldw	r20,28(sp)
 8811678:	dcc00617 	ldw	r19,24(sp)
 881167c:	dc800517 	ldw	r18,20(sp)
 8811680:	dc400417 	ldw	r17,16(sp)
 8811684:	dc000317 	ldw	r16,12(sp)
 8811688:	dec00d04 	addi	sp,sp,52
 881168c:	f800283a 	ret
 8811690:	8409883a 	add	r4,r16,r16
 8811694:	88c00117 	ldw	r3,4(r17)
 8811698:	2105883a 	add	r2,r4,r4
 881169c:	1445883a 	add	r2,r2,r17
 88116a0:	18ffffc4 	addi	r3,r3,-1
 88116a4:	11800217 	ldw	r6,8(r2)
 88116a8:	1c001526 	beq	r3,r16,8811700 <__call_exitprocs+0x150>
 88116ac:	10000215 	stw	zero,8(r2)
 88116b0:	303fe726 	beq	r6,zero,8811650 <__call_exitprocs+0xa0>
 88116b4:	00c00044 	movi	r3,1
 88116b8:	1c06983a 	sll	r3,r3,r16
 88116bc:	90804017 	ldw	r2,256(r18)
 88116c0:	8cc00117 	ldw	r19,4(r17)
 88116c4:	1884703a 	and	r2,r3,r2
 88116c8:	10001426 	beq	r2,zero,881171c <__call_exitprocs+0x16c>
 88116cc:	90804117 	ldw	r2,260(r18)
 88116d0:	1884703a 	and	r2,r3,r2
 88116d4:	10000c1e 	bne	r2,zero,8811708 <__call_exitprocs+0x158>
 88116d8:	2105883a 	add	r2,r4,r4
 88116dc:	1485883a 	add	r2,r2,r18
 88116e0:	11400017 	ldw	r5,0(r2)
 88116e4:	e009883a 	mov	r4,fp
 88116e8:	303ee83a 	callr	r6
 88116ec:	88800117 	ldw	r2,4(r17)
 88116f0:	98bfc81e 	bne	r19,r2,8811614 <__call_exitprocs+0x64>
 88116f4:	b8800017 	ldw	r2,0(r23)
 88116f8:	147fd526 	beq	r2,r17,8811650 <__call_exitprocs+0xa0>
 88116fc:	003fc506 	br	8811614 <__call_exitprocs+0x64>
 8811700:	8c000115 	stw	r16,4(r17)
 8811704:	003fea06 	br	88116b0 <__call_exitprocs+0x100>
 8811708:	2105883a 	add	r2,r4,r4
 881170c:	1485883a 	add	r2,r2,r18
 8811710:	11000017 	ldw	r4,0(r2)
 8811714:	303ee83a 	callr	r6
 8811718:	003ff406 	br	88116ec <__call_exitprocs+0x13c>
 881171c:	303ee83a 	callr	r6
 8811720:	003ff206 	br	88116ec <__call_exitprocs+0x13c>
 8811724:	88800117 	ldw	r2,4(r17)
 8811728:	1000081e 	bne	r2,zero,881174c <__call_exitprocs+0x19c>
 881172c:	89000017 	ldw	r4,0(r17)
 8811730:	20000726 	beq	r4,zero,8811750 <__call_exitprocs+0x1a0>
 8811734:	b9000015 	stw	r4,0(r23)
 8811738:	8809883a 	mov	r4,r17
 881173c:	00000000 	call	0 <__alt_mem_onchip_memory2_0-0x3000>
 8811740:	bc400017 	ldw	r17,0(r23)
 8811744:	883fb71e 	bne	r17,zero,8811624 <__call_exitprocs+0x74>
 8811748:	003fc506 	br	8811660 <__call_exitprocs+0xb0>
 881174c:	89000017 	ldw	r4,0(r17)
 8811750:	882f883a 	mov	r23,r17
 8811754:	2023883a 	mov	r17,r4
 8811758:	883fb21e 	bne	r17,zero,8811624 <__call_exitprocs+0x74>
 881175c:	003fc006 	br	8811660 <__call_exitprocs+0xb0>

08811760 <alt_sim_halt>:

/*
 * Routine called on exit.
 */
static ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
 8811760:	defffd04 	addi	sp,sp,-12
 8811764:	df000215 	stw	fp,8(sp)
 8811768:	df000204 	addi	fp,sp,8
 881176c:	e13fff15 	stw	r4,-4(fp)
  int r2 = exit_code;
 8811770:	e0bfff17 	ldw	r2,-4(fp)
 8811774:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 8811778:	e0bffe17 	ldw	r2,-8(fp)
 881177c:	1005003a 	cmpeq	r2,r2,zero
 8811780:	1000021e 	bne	r2,zero,881178c <alt_sim_halt+0x2c>
    ALT_SIM_FAIL();
 8811784:	002af070 	cmpltui	zero,zero,43969
 8811788:	00000106 	br	8811790 <alt_sim_halt+0x30>
  } else {
    ALT_SIM_PASS();
 881178c:	002af0b0 	cmpltui	zero,zero,43970
  }
#endif /* DEBUG_STUB */
}
 8811790:	e037883a 	mov	sp,fp
 8811794:	df000017 	ldw	fp,0(sp)
 8811798:	dec00104 	addi	sp,sp,4
 881179c:	f800283a 	ret

088117a0 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 88117a0:	defffd04 	addi	sp,sp,-12
 88117a4:	dfc00215 	stw	ra,8(sp)
 88117a8:	df000115 	stw	fp,4(sp)
 88117ac:	df000104 	addi	fp,sp,4
 88117b0:	e13fff15 	stw	r4,-4(fp)
  ALT_OS_STOP();

  /* Provide notification to the simulator that we've stopped */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_SIM_HALT().\r\n");
  ALT_SIM_HALT(exit_code);
 88117b4:	e13fff17 	ldw	r4,-4(fp)
 88117b8:	88117600 	call	8811760 <alt_sim_halt>

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 88117bc:	003fff06 	br	88117bc <_exit+0x1c>
 88117c0:	00000010 	cmplti	zero,zero,0
 88117c4:	00000000 	call	0 <__alt_mem_onchip_memory2_0-0x3000>
 88117c8:	00527a01 	jmpi	527a0 <__alt_mem_onchip_memory2_3+0x4b7a0>
 88117cc:	011f7c01 	jmpi	11f7c0 <__alt_mem_onchip_memory2_3+0x1187c0>
 88117d0:	001b0c0b 	ldhu	zero,27696(zero)
 88117d4:	00000028 	cmpgeui	zero,zero,0
 88117d8:	00000018 	cmpnei	zero,zero,0
 88117dc:	0880c000 	call	880c00 <__alt_mem_onchip_memory2_3+0x879c00>
 88117e0:	000005dc 	xori	zero,zero,23
 88117e4:	400e4400 	call	400e440 <__alt_mem_onchip_memory2_3+0x4007440>
 88117e8:	92099170 	cmpltui	r8,r18,9797
 88117ec:	95079308 	cmpgei	r20,r18,7756
 88117f0:	97049605 	stb	fp,4696(r18)
 88117f4:	90019f03 	ldbu	zero,1660(r18)
 88117f8:	9c06940a 	0x9c06940a
 88117fc:	00000002 	0x2
 8811800:	00000028 	cmpgeui	zero,zero,0
 8811804:	00000044 	movi	zero,1
 8811808:	0880c5dc 	xori	r2,at,791
 881180c:	000005b0 	cmpltui	zero,zero,22
 8811810:	3c0e4400 	call	3c0e440 <__alt_mem_onchip_memory2_3+0x3c07440>
 8811814:	92099168 	cmpgeui	r8,r18,9797
 8811818:	95079308 	cmpgei	r20,r18,7756
 881181c:	9c039705 	stb	r16,3676(r19)
 8811820:	90019f02 	0x90019f02
 8811824:	9606940a 	0x9606940a
 8811828:	00000004 	movi	zero,0
 881182c:	088115ac 	andhi	r2,at,1110
