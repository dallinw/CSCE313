
fractals2.elf:     file format elf32-littlenios2
fractals2.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x088001b4

Program Header:
    LOAD off    0x00001000 vaddr 0x08800000 paddr 0x08800000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x08800020 paddr 0x08800020 align 2**12
         filesz 0x00008b34 memsz 0x00008b34 flags r-x
    LOAD off    0x00009b54 vaddr 0x08808b54 paddr 0x0880a2ec align 2**12
         filesz 0x00001798 memsz 0x00001798 flags rw-
    LOAD off    0x0000ba84 vaddr 0x0880ba84 paddr 0x0880ba84 align 2**12
         filesz 0x00000000 memsz 0x000002cc flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  08800000  08800000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000194  08800020  08800020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0000867c  088001b4  088001b4  000011b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000324  08808830  08808830  00009830  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001798  08808b54  0880a2ec  00009b54  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000002cc  0880ba84  0880ba84  0000ba84  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000023  00000000  00000000  0000b2ec  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000a38  00000000  00000000  0000b310  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 0000117b  00000000  00000000  0000bd48  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   000126af  00000000  00000000  0000cec3  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00005823  00000000  00000000  0001f572  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000d8fd  00000000  00000000  00024d95  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  000012a8  00000000  00000000  00032694  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000016b5  00000000  00000000  0003393c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000448a  00000000  00000000  00034ff1  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000030  00000000  00000000  0003947c  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000538  00000000  00000000  000394b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0003c4cf  2**0
                  CONTENTS, READONLY
 18 .cpu          00000005  00000000  00000000  0003c4d2  2**0
                  CONTENTS, READONLY
 19 .simulation_enabled 00000001  00000000  00000000  0003c4d7  2**0
                  CONTENTS, READONLY
 20 .sysid_hash   00000004  00000000  00000000  0003c4d8  2**0
                  CONTENTS, READONLY
 21 .sysid_base   00000004  00000000  00000000  0003c4dc  2**0
                  CONTENTS, READONLY
 22 .sysid_time   00000004  00000000  00000000  0003c4e0  2**0
                  CONTENTS, READONLY
 23 .stderr_dev   0000000b  00000000  00000000  0003c4e4  2**0
                  CONTENTS, READONLY
 24 .stdin_dev    0000000b  00000000  00000000  0003c4ef  2**0
                  CONTENTS, READONLY
 25 .stdout_dev   0000000b  00000000  00000000  0003c4fa  2**0
                  CONTENTS, READONLY
 26 .sopc_system_name 0000000b  00000000  00000000  0003c505  2**0
                  CONTENTS, READONLY
 27 .quartus_project_dir 00000020  00000000  00000000  0003c510  2**0
                  CONTENTS, READONLY
 28 .jdi          0001085c  00000000  00000000  0003c530  2**0
                  CONTENTS, READONLY
 29 .sopcinfo     00113e1c  00000000  00000000  0004cd8c  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
08800000 l    d  .entry	00000000 .entry
08800020 l    d  .exceptions	00000000 .exceptions
088001b4 l    d  .text	00000000 .text
08808830 l    d  .rodata	00000000 .rodata
08808b54 l    d  .rwdata	00000000 .rwdata
0880ba84 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
088001fc l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 w_pow.c
00000000 l    df *ABS*	00000000 e_pow.c
08808898 l     O .rodata	00000010 bp
088088a8 l     O .rodata	00000010 dp_l
088088b8 l     O .rodata	00000010 dp_h
00000000 l    df *ABS*	00000000 e_sqrt.c
00000000 l    df *ABS*	00000000 s_fabs.c
00000000 l    df *ABS*	00000000 s_finite.c
00000000 l    df *ABS*	00000000 s_isnand.c
00000000 l    df *ABS*	00000000 s_lib_ver.c
00000000 l    df *ABS*	00000000 s_matherr.c
00000000 l    df *ABS*	00000000 s_nan.c
00000000 l    df *ABS*	00000000 s_rint.c
088088c8 l     O .rodata	00000010 TWO52
00000000 l    df *ABS*	00000000 s_scalbn.c
00000000 l    df *ABS*	00000000 s_copysign.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
08802b88 l     F .text	00000410 _fpadd_parts
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
08803af4 l     F .text	0000007c udivmodsi4
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 errno.c
00000000 l    df *ABS*	00000000 impure.c
08808b54 l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 alt_load.c
088045f8 l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
08808f54 l     O .rwdata	00001060 jtag_uart_2
08809fb4 l     O .rwdata	0000003c mailbox_0
08809ff0 l     O .rwdata	0000003c mailbox_1
0880a02c l     O .rwdata	0000003c mailbox_2
0880a068 l     O .rwdata	0000003c mailbox_3
0880a0a4 l     O .rwdata	00000054 video_pixel_buffer_dma_0
0880497c l     F .text	00000038 alt_dev_reg
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
08804bbc l     F .text	00000228 altera_avalon_jtag_uart_irq
08804de4 l     F .text	000000b0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_mailbox.c
088055b8 l     F .text	0000006c alt_avalon_mutex_reg
08805624 l     F .text	00000060 alt_get_errno
088057b8 l     F .text	00000050 alt_mailbox_increment_ptr
00000000 l    df *ABS*	00000000 altera_avalon_mutex.c
08805988 l     F .text	0000007c alt_mutex_trylock
08805a5c l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 altera_up_avalon_video_pixel_buffer_dma.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_close.c
08807448 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
088074ec l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
088075cc l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
08807a84 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
08807bc0 l     F .text	000000dc alt_file_locked
08807e24 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_irq.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
08808618 l     F .text	00000004 register_fini
00000000 l    df *ABS*	00000000 alt_exit.c
088087cc l     F .text	00000040 alt_sim_halt
00007000 g       *ABS*	00000000 __alt_mem_onchip_memory2_3
08804664 g     F .text	0000006c alt_main
08805808 g     F .text	000000a8 altera_avalon_mailbox_pend
088068f8 g     F .text	000003d0 alt_up_pixel_buffer_dma_draw_vline
0880bac0 g     O .bss	00000100 alt_irq
08802420 g     F .text	00000018 fabs
0880ba88 g     O .bss	00000004 mailbox_0
0880a2ec g       *ABS*	00000000 __flash_rwdata_start
088036a8 g     F .text	00000088 __eqdf2
0880ba8c g     O .bss	00000004 mailbox_2
088058b0 g     F .text	000000d8 altera_avalon_mailbox_get
088028b0 g     F .text	00000174 __divsf3
08805b1c g     F .text	00000040 altera_avalon_mutex_trylock
0880a2a8 g     O .rwdata	00000004 n
08805ccc g     F .text	000001a0 alt_up_pixel_buffer_dma_draw
088037b8 g     F .text	00000088 __gtdf2
08804568 g     F .text	00000010 __errno
08805c8c g     F .text	00000040 alt_up_pixel_buffer_dma_open_dev
08800000 g     F .entry	0000001c __reset
08805bb8 g     F .text	0000007c altera_avalon_mutex_is_mine
08800020 g       *ABS*	00000000 __flash_exceptions_start
0880babc g     O .bss	00000004 errno
08803a48 g     F .text	00000038 __make_dp
08804028 g     F .text	0000002c __make_fp
0880baa8 g     O .bss	00000004 alt_argv
088122a0 g       *ABS*	00000000 _gp
08805e6c g     F .text	00000058 alt_up_pixel_buffer_dma_change_back_buffer_address
00005000 g       *ABS*	00000000 __alt_mem_onchip_memory2_2
0880a120 g     O .rwdata	00000180 alt_fd_list
0880ba90 g     O .bss	00000004 mailbox_1
088076f4 g     F .text	00000094 alt_find_dev
088083d0 g     F .text	000000a0 memcpy
08803950 g     F .text	000000f8 __floatsidf
08807b48 g     F .text	00000078 alt_io_redirect
08803840 g     F .text	00000088 __ltdf2
08808830 g       *ABS*	00000000 __DTOR_END__
08808088 g     F .text	00000020 altera_nios2_irq_init
088056fc g     F .text	000000bc altera_avalon_mailbox_post
08805f1c g     F .text	00000034 alt_up_pixel_buffer_dma_check_swap_buffers_status
08804ffc g     F .text	00000224 altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
00003000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
08803c30 g     F .text	00000008 __udivsi3
088056dc g     F .text	00000020 altera_avalon_mailbox_close
088065a8 g     F .text	00000350 alt_up_pixel_buffer_dma_draw_hline
08802a24 g     F .text	00000078 __lesf2
08808280 g     F .text	00000090 alt_icache_flush
08806d8c g     F .text	000000d0 helper_plot_pixel
0880a2d8 g     O .rwdata	00000004 alt_max_fd
08804368 g     F .text	00000138 __unpack_d
08802b34 g     F .text	00000054 __extendsfdf2
08803018 g     F .text	00000074 __adddf3
08805f50 g     F .text	00000164 alt_up_pixel_buffer_dma_clear_screen
08805c34 g     F .text	00000058 altera_avalon_mutex_first_lock
0880a2ac g     O .rwdata	00000004 __fdlib_version
0880a2b4 g     O .rwdata	00000004 _global_impure_ptr
0880bd50 g       *ABS*	00000000 __bss_end
0880798c g     F .text	000000f8 alt_iic_isr_register
088060b4 g     F .text	000004f4 alt_up_pixel_buffer_dma_draw_box
08807f7c g     F .text	0000010c alt_tick
0880ba84 g     O .bss	00000004 message
08807944 g     F .text	00000048 alt_ic_irq_enabled
08807ee4 g     F .text	00000098 alt_alarm_stop
0880bab0 g     O .bss	00000004 alt_irq_active
088000ec g     F .exceptions	000000c8 alt_irq_handler
0880a0f8 g     O .rwdata	00000028 alt_dev_null
08800790 g     F .text	00000124 barrier
08805a04 g     F .text	00000058 altera_avalon_mutex_open
0880249c g     F .text	00000210 rint
08803eb8 g     F .text	000000c8 __unpack_f
088074a8 g     F .text	00000044 alt_dcache_flush_all
08806cc8 g     F .text	000000c4 alt_up_pixel_buffer_dma_draw_rectangle
0880a2ec g       *ABS*	00000000 __ram_rwdata_end
0880a2d0 g     O .rwdata	00000008 alt_dev_list
08806e5c g     F .text	0000039c alt_up_pixel_buffer_dma_draw_line
0880a2c0 g     O .rwdata	00000008 alt_mutex_list
08808b54 g       *ABS*	00000000 __ram_rodata_end
088038c8 g     F .text	00000088 __ledf2
08803c38 g     F .text	00000008 __umodsi3
0880bd50 g       *ABS*	00000000 end
08803d58 g     F .text	00000160 __pack_f
08804afc g     F .text	000000c0 altera_avalon_jtag_uart_init
0880882c g       *ABS*	00000000 __CTOR_LIST__
10000000 g       *ABS*	00000000 __alt_stack_pointer
08803cd8 g     F .text	00000080 __clzsi2
08805220 g     F .text	00000240 altera_avalon_jtag_uart_write
08805460 g     F .text	00000158 alt_avalon_mailbox_init
0880861c g     F .text	000001b0 __call_exitprocs
088001b4 g     F .text	0000004c _start
0880bab4 g     O .bss	00000004 _alt_tick_rate
0880bab8 g     O .bss	00000004 _alt_nticks
08804704 g     F .text	00000278 alt_sys_init
08802a9c g     F .text	00000098 __floatsisf
088084e4 g     F .text	00000134 __register_exitproc
08805b5c g     F .text	0000005c altera_avalon_mutex_unlock
08800e58 g     F .text	00001300 __ieee754_pow
08804e94 g     F .text	00000074 altera_avalon_jtag_uart_close
088009d0 g     F .text	00000488 pow
08808b54 g       *ABS*	00000000 __ram_rwdata_start
08808830 g       *ABS*	00000000 __ram_rodata_start
00004000 g       *ABS*	00000000 __alt_mem_onchip_memory2_1
088049b4 g     F .text	00000058 altera_avalon_jtag_uart_read_fd
088081c8 g     F .text	000000b8 alt_get_fd
088044a0 g     F .text	000000c8 __fpcmp_parts_d
0880835c g     F .text	00000074 memcmp
08804a64 g     F .text	00000048 altera_avalon_jtag_uart_close_fd
0880ba94 g     O .bss	00000004 col
0880bd50 g       *ABS*	00000000 __alt_stack_base
08804aac g     F .text	00000050 altera_avalon_jtag_uart_ioctl_fd
08803450 g     F .text	00000258 __divdf3
0880308c g     F .text	000003c4 __muldf3
088088d8 g     O .rodata	00000010 __thenan_sf
088080a8 g     F .text	00000120 alt_find_file
08807518 g     F .text	000000b4 alt_dev_llist_insert
0880ba84 g       *ABS*	00000000 __bss_start
08800200 g     F .text	00000590 main
0880baac g     O .bss	00000004 alt_envp
08805ec4 g     F .text	00000058 alt_up_pixel_buffer_dma_swap_buffers
08804a0c g     F .text	00000058 altera_avalon_jtag_uart_write_fd
08802484 g     F .text	00000008 matherr
08803a80 g     F .text	00000074 __truncdfsf2
0880bbc0 g     O .bss	00000190 _atexit0
08805adc g     F .text	00000040 altera_avalon_mutex_lock
0880a2dc g     O .rwdata	00000004 alt_errno
08803b70 g     F .text	00000060 __divsi3
088088e8 g     O .rodata	00000014 __thenan_df
08808830 g       *ABS*	00000000 __CTOR_END__
08802438 g     F .text	0000001c finite
08808830 g       *ABS*	00000000 __flash_rodata_start
08808830 g       *ABS*	00000000 __DTOR_LIST__
0880288c g     F .text	00000024 copysign
08803730 g     F .text	00000088 __nedf2
11000000 g       *ABS*	00000000 __alt_mem_sram_0
088046d0 g     F .text	00000034 alt_irq_init
08807e84 g     F .text	00000060 alt_release_fd
088088fc g     O .rodata	00000100 __clz_tab
08808310 g     F .text	00000014 atexit
0880ba98 g     O .bss	00000004 my_pixel_buffer
0880ba9c g     O .bss	00000004 mailbox_3
0880a2b0 g     O .rwdata	00000004 _impure_ptr
0880baa4 g     O .bss	00000004 alt_argc
088026ac g     F .text	000001e0 scalbn
08807690 g     F .text	00000064 _do_dtors
08000000 g       *ABS*	00000000 __alt_mem_sdram_0
08800020 g       .exceptions	00000000 alt_irq_entry
0880a2b8 g     O .rwdata	00000008 alt_mailbox_list
0880a2a0 g     O .rwdata	00000004 num_rows
0880a2c8 g     O .rwdata	00000008 alt_fs_list
0880248c g     F .text	00000010 nan
08800020 g       *ABS*	00000000 __ram_exceptions_start
08802158 g     F .text	000002c8 __ieee754_sqrt
088077b8 g     F .text	00000050 alt_ic_isr_register
0880a2ec g       *ABS*	00000000 _edata
0880bd50 g       *ABS*	00000000 _end
088008e4 g     F .text	000000ec post
088001b4 g       *ABS*	00000000 __ram_exceptions_end
08804f08 g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
088078a4 g     F .text	000000a0 alt_ic_irq_disable
08808324 g     F .text	00000038 exit
08803bd0 g     F .text	00000060 __modsi3
10000000 g       *ABS*	00000000 __alt_data_end
08800020 g     F .exceptions	00000000 alt_exception
08805684 g     F .text	00000058 altera_avalon_mailbox_open
08803f80 g     F .text	000000a8 __fpcmp_parts_f
0880880c g     F .text	00000020 _exit
08802454 g     F .text	00000030 __isnand
088071f8 g     F .text	00000154 alt_alarm_start
08803c40 g     F .text	00000098 __muldi3
08808470 g     F .text	00000074 strlen
08807c9c g     F .text	00000188 open
08807788 g     F .text	00000030 alt_icache_flush_all
088008b4 g     F .text	00000030 pend
0880a2e0 g     O .rwdata	00000004 alt_priority_mask
0880a2a4 g     O .rwdata	00000004 num_cols
08807808 g     F .text	0000009c alt_ic_irq_enable
08805abc g     F .text	00000020 altera_avalon_mutex_close
08802f98 g     F .text	00000080 __subdf3
0880a2e4 g     O .rwdata	00000008 alt_alarm_list
0880762c g     F .text	00000064 _do_ctors
0880734c g     F .text	000000fc close
08804578 g     F .text	00000080 alt_load
0880baa0 g     O .bss	00000004 row
08804054 g     F .text	00000314 __pack_d
00000000  w      *UND*	00000000 free



Disassembly of section .entry:

08800000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && !defined(ALT_SIM_OPTIMIZE)
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
 8800000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
 8800004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
 8800008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
 880000c:	00bffd16 	blt	zero,r2,8800004 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 8800010:	00422034 	movhi	at,2176
    ori r1, r1, %lo(_start)
 8800014:	08406d14 	ori	at,at,436
    jmp r1
 8800018:	0800683a 	jmp	at
 880001c:	00000000 	call	0 <__alt_mem_onchip_memory2_0-0x3000>

Disassembly of section .exceptions:

08800020 <alt_exception>:
         * Process an exception.  For all exceptions we must preserve all
         * caller saved registers on the stack (See the Nios2 ABI
         * documentation for details).
         */

        addi  sp, sp, -76
 8800020:	deffed04 	addi	sp,sp,-76

#endif

#endif

        stw   ra,  0(sp)
 8800024:	dfc00015 	stw	ra,0(sp)
        /*
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */

        stw   r1,   8(sp)
 8800028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 880002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 8800030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 8800034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 8800038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 880003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 8800040:	d9c00815 	stw	r7,32(sp)

        rdctl r5, estatus
 8800044:	000b307a 	rdctl	r5,estatus

        stw   r8,  36(sp)
 8800048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 880004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 8800050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 8800054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 8800058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 880005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 8800060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 8800064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 8800068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 880006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 8800070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 8800074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 8800078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 880007c:	10000326 	beq	r2,zero,880008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 8800080:	20000226 	beq	r4,zero,880008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 8800084:	88000ec0 	call	88000ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 8800088:	00000306 	br	8800098 <alt_exception+0x78>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
 880008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
 8800090:	e8bfff17 	ldw	r2,-4(ea)
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
 8800094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 8800098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 880009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 88000a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 88000a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 88000a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 88000ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 88000b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 88000b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 88000b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 88000bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 88000c0:	d9c00817 	ldw	r7,32(sp)
#ifdef ALT_STACK_CHECK
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif
#endif

        ldw   r8,  36(sp)
 88000c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 88000c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 88000cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 88000d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 88000d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 88000d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 88000dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 88000e0:	dbc01017 	ldw	r15,64(sp)
#endif

        ldw   sp,  76(sp)

#else
        addi  sp, sp, 76
 88000e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 88000e8:	ef80083a 	eret

088000ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 88000ec:	defff904 	addi	sp,sp,-28
 88000f0:	dfc00615 	stw	ra,24(sp)
 88000f4:	df000515 	stw	fp,20(sp)
 88000f8:	df000504 	addi	fp,sp,20
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 88000fc:	0005313a 	rdctl	r2,ipending
 8800100:	e0bffc15 	stw	r2,-16(fp)

  return active;
 8800104:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 8800108:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
 880010c:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 8800110:	00800044 	movi	r2,1
 8800114:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 8800118:	e0ffff17 	ldw	r3,-4(fp)
 880011c:	e0bffe17 	ldw	r2,-8(fp)
 8800120:	1884703a 	and	r2,r3,r2
 8800124:	1005003a 	cmpeq	r2,r2,zero
 8800128:	1000161e 	bne	r2,zero,8800184 <alt_irq_handler+0x98>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 880012c:	e0bffd17 	ldw	r2,-12(fp)
 8800130:	00c22074 	movhi	r3,2177
 8800134:	18eeb004 	addi	r3,r3,-17728
 8800138:	100490fa 	slli	r2,r2,3
 880013c:	10c5883a 	add	r2,r2,r3
 8800140:	11400017 	ldw	r5,0(r2)
 8800144:	e0bffd17 	ldw	r2,-12(fp)
 8800148:	00c22074 	movhi	r3,2177
 880014c:	18eeb004 	addi	r3,r3,-17728
 8800150:	100490fa 	slli	r2,r2,3
 8800154:	10c5883a 	add	r2,r2,r3
 8800158:	10800104 	addi	r2,r2,4
 880015c:	11000017 	ldw	r4,0(r2)
 8800160:	283ee83a 	callr	r5
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 8800164:	0005313a 	rdctl	r2,ipending
 8800168:	e0bffb15 	stw	r2,-20(fp)

  return active;
 880016c:	e0bffb17 	ldw	r2,-20(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
 8800170:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
 8800174:	e0bfff17 	ldw	r2,-4(fp)
 8800178:	1004c03a 	cmpne	r2,r2,zero
 880017c:	103fe31e 	bne	r2,zero,880010c <alt_irq_handler+0x20>
 8800180:	00000706 	br	88001a0 <alt_irq_handler+0xb4>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
 8800184:	e0bffe17 	ldw	r2,-8(fp)
 8800188:	1085883a 	add	r2,r2,r2
 880018c:	e0bffe15 	stw	r2,-8(fp)
      i++;
 8800190:	e0bffd17 	ldw	r2,-12(fp)
 8800194:	10800044 	addi	r2,r2,1
 8800198:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 880019c:	003fde06 	br	8800118 <alt_irq_handler+0x2c>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
 88001a0:	e037883a 	mov	sp,fp
 88001a4:	dfc00117 	ldw	ra,4(sp)
 88001a8:	df000017 	ldw	fp,0(sp)
 88001ac:	dec00204 	addi	sp,sp,8
 88001b0:	f800283a 	ret

Disassembly of section .text:

088001b4 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
 88001b4:	00810014 	movui	r2,1024
#endif

0:
    initd 0(r2)
 88001b8:	10000033 	initd	0(r2)
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
 88001bc:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
 88001c0:	00bffd16 	blt	zero,r2,88001b8 <_start+0x4>
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 88001c4:	06c40034 	movhi	sp,4096
    ori sp, sp, %lo(__alt_stack_pointer)
 88001c8:	dec00014 	ori	sp,sp,0

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
 88001cc:	06822074 	movhi	gp,2177
    ori gp, gp, %lo(_gp)
 88001d0:	d688a814 	ori	gp,gp,8864
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 88001d4:	00822034 	movhi	r2,2176
    ori r2, r2, %lo(__bss_start)
 88001d8:	10aea114 	ori	r2,r2,47748

    movhi r3, %hi(__bss_end)
 88001dc:	00c22034 	movhi	r3,2176
    ori r3, r3, %lo(__bss_end)
 88001e0:	18ef5414 	ori	r3,r3,48464

    beq r2, r3, 1f
 88001e4:	10c00326 	beq	r2,r3,88001f4 <_start+0x40>

0:
    stw zero, (r2)
 88001e8:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 88001ec:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 88001f0:	10fffd36 	bltu	r2,r3,88001e8 <_start+0x34>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 88001f4:	88045780 	call	8804578 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 88001f8:	88046640 	call	8804664 <alt_main>

088001fc <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 88001fc:	003fff06 	br	88001fc <alt_after_alt_main>

08800200 <main>:
void barrier(int id);
void pend(alt_mailbox_dev*);
void post(int id, alt_u32 mess);


int main() {
 8800200:	deffe904 	addi	sp,sp,-92
 8800204:	dfc01615 	stw	ra,88(sp)
 8800208:	df001515 	stw	fp,84(sp)
 880020c:	dc401415 	stw	r17,80(sp)
 8800210:	dc001315 	stw	r16,76(sp)
 8800214:	df001304 	addi	fp,sp,76

	mailbox_0 = altera_avalon_mailbox_open("/dev/mailbox_0");
 8800218:	01022074 	movhi	r4,2177
 880021c:	21220c04 	addi	r4,r4,-30672
 8800220:	88056840 	call	8805684 <altera_avalon_mailbox_open>
 8800224:	d0a5fa15 	stw	r2,-26648(gp)
	mailbox_1 = altera_avalon_mailbox_open("/dev/mailbox_1");
 8800228:	01022074 	movhi	r4,2177
 880022c:	21221004 	addi	r4,r4,-30656
 8800230:	88056840 	call	8805684 <altera_avalon_mailbox_open>
 8800234:	d0a5fc15 	stw	r2,-26640(gp)
	mailbox_2 = altera_avalon_mailbox_open("/dev/mailbox_2");
 8800238:	01022074 	movhi	r4,2177
 880023c:	21221404 	addi	r4,r4,-30640
 8800240:	88056840 	call	8805684 <altera_avalon_mailbox_open>
 8800244:	d0a5fb15 	stw	r2,-26644(gp)
	mailbox_3 = altera_avalon_mailbox_open("/dev/mailbox_3");
 8800248:	01022074 	movhi	r4,2177
 880024c:	21221804 	addi	r4,r4,-30624
 8800250:	88056840 	call	8805684 <altera_avalon_mailbox_open>
 8800254:	d0a5ff15 	stw	r2,-26628(gp)

	int cpuid = __builtin_rdctl(5);
 8800258:	0005317a 	rdctl	r2,cpuid
 880025c:	e0bffe15 	stw	r2,-8(fp)

	barrier(cpuid);
 8800260:	e13ffe17 	ldw	r4,-8(fp)
 8800264:	88007900 	call	8800790 <barrier>
	//alt_up_pixel_buffer_dma_dev *my_pixel_buffer; //declare global var
	my_pixel_buffer=alt_up_pixel_buffer_dma_open_dev("/dev/video_pixel_buffer_dma_0"); //assign it
 8800268:	01022074 	movhi	r4,2177
 880026c:	21221c04 	addi	r4,r4,-30608
 8800270:	8805c8c0 	call	8805c8c <alt_up_pixel_buffer_dma_open_dev>
 8800274:	d0a5fe15 	stw	r2,-26632(gp)
	alt_up_pixel_buffer_dma_clear_screen(my_pixel_buffer,0);//clear_screen();
 8800278:	d125fe17 	ldw	r4,-26632(gp)
 880027c:	000b883a 	mov	r5,zero
 8800280:	8805f500 	call	8805f50 <alt_up_pixel_buffer_dma_clear_screen>

	int zoom = 1;
 8800284:	00800044 	movi	r2,1
 8800288:	e0bffd15 	stw	r2,-12(fp)
	float min_x, max_x, min_y, max_y;
	min_x = -2.5;
 880028c:	00b00834 	movhi	r2,49184
 8800290:	e0bffc15 	stw	r2,-16(fp)
	max_x = 1.0;
 8800294:	008fe034 	movhi	r2,16256
 8800298:	e0bffb15 	stw	r2,-20(fp)
	min_y = -1.0;
 880029c:	00afe034 	movhi	r2,49024
 88002a0:	e0bffa15 	stw	r2,-24(fp)
	max_y = 1.0;
 88002a4:	008fe034 	movhi	r2,16256
 88002a8:	e0bff915 	stw	r2,-28(fp)

	float target_x, target_y;
	int iteration;
	int is_target; //false

	barrier(cpuid);
 88002ac:	e13ffe17 	ldw	r4,-8(fp)
 88002b0:	88007900 	call	8800790 <barrier>
	while (1) {
		//printf("barrier 1")
		barrier(cpuid);
 88002b4:	e13ffe17 	ldw	r4,-8(fp)
 88002b8:	88007900 	call	8800790 <barrier>
		//printf("%d", cpuid);
		is_target = 0;
 88002bc:	e03fee15 	stw	zero,-72(fp)

		for (i = cpuid; i < num_rows; i+=4) {
 88002c0:	e0bffe17 	ldw	r2,-8(fp)
 88002c4:	e0bff815 	stw	r2,-32(fp)
 88002c8:	00008806 	br	88004ec <main+0x2ec>
			for (j = 0; j < num_cols; j++) {
 88002cc:	e03ff715 	stw	zero,-36(fp)
 88002d0:	00007e06 	br	88004cc <main+0x2cc>
				x = 0;
 88002d4:	e03ff615 	stw	zero,-40(fp)
				y = 0;
 88002d8:	e03ff515 	stw	zero,-44(fp)
				z = 0;
 88002dc:	e03ff415 	stw	zero,-48(fp)
				x0 = j/320.0*(max_x - min_x) + min_x;
 88002e0:	e13ff717 	ldw	r4,-36(fp)
 88002e4:	8802a9c0 	call	8802a9c <__floatsisf>
 88002e8:	1009883a 	mov	r4,r2
 88002ec:	0150e834 	movhi	r5,17312
 88002f0:	88028b00 	call	88028b0 <__divsf3>
 88002f4:	1009883a 	mov	r4,r2
 88002f8:	e0fffb17 	ldw	r3,-20(fp)
 88002fc:	e0bffc17 	ldw	r2,-16(fp)
 8800300:	1885ffb2 	custom	254,r2,r3,r2
 8800304:	2087ff32 	custom	252,r3,r4,r2
 8800308:	e0bffc17 	ldw	r2,-16(fp)
 880030c:	1885ff72 	custom	253,r2,r3,r2
 8800310:	e0bff315 	stw	r2,-52(fp)
				y0 = (239.0-i)/240.0*(max_y - min_y) + min_y;
 8800314:	e13ff817 	ldw	r4,-32(fp)
 8800318:	8802a9c0 	call	8802a9c <__floatsisf>
 880031c:	1007883a 	mov	r3,r2
 8800320:	0090dbf4 	movhi	r2,17263
 8800324:	10c5ffb2 	custom	254,r2,r2,r3
 8800328:	1009883a 	mov	r4,r2
 880032c:	0150dc34 	movhi	r5,17264
 8800330:	88028b00 	call	88028b0 <__divsf3>
 8800334:	1009883a 	mov	r4,r2
 8800338:	e0fff917 	ldw	r3,-28(fp)
 880033c:	e0bffa17 	ldw	r2,-24(fp)
 8800340:	1885ffb2 	custom	254,r2,r3,r2
 8800344:	2087ff32 	custom	252,r3,r4,r2
 8800348:	e0bffa17 	ldw	r2,-24(fp)
 880034c:	1885ff72 	custom	253,r2,r3,r2
 8800350:	e0bff215 	stw	r2,-56(fp)
				//printf("x0: %f...", x0);
				//printf("y0: %f\n", y0);
				iteration = 0;
 8800354:	e03fef15 	stw	zero,-68(fp)

				while( (x*x + y*y) <= 4 && iteration < 500) {
 8800358:	00002006 	br	88003dc <main+0x1dc>
					float xtemp = x*x - y*y + x0;
 880035c:	e0fff617 	ldw	r3,-40(fp)
 8800360:	e0bff617 	ldw	r2,-40(fp)
 8800364:	1889ff32 	custom	252,r4,r3,r2
 8800368:	e0fff517 	ldw	r3,-44(fp)
 880036c:	e0bff517 	ldw	r2,-44(fp)
 8800370:	1885ff32 	custom	252,r2,r3,r2
 8800374:	2087ffb2 	custom	254,r3,r4,r2
 8800378:	e0bff317 	ldw	r2,-52(fp)
 880037c:	1885ff72 	custom	253,r2,r3,r2
 8800380:	e0bfed15 	stw	r2,-76(fp)
					y = 2*x*y + y0;
 8800384:	e0bff617 	ldw	r2,-40(fp)
 8800388:	1087ff72 	custom	253,r3,r2,r2
 880038c:	e0bff517 	ldw	r2,-44(fp)
 8800390:	1887ff32 	custom	252,r3,r3,r2
 8800394:	e0bff217 	ldw	r2,-56(fp)
 8800398:	1885ff72 	custom	253,r2,r3,r2
 880039c:	e0bff515 	stw	r2,-44(fp)
					x = xtemp;
 88003a0:	e0bfed17 	ldw	r2,-76(fp)
 88003a4:	e0bff615 	stw	r2,-40(fp)
					iteration++;
 88003a8:	e0bfef17 	ldw	r2,-68(fp)
 88003ac:	10800044 	addi	r2,r2,1
 88003b0:	e0bfef15 	stw	r2,-68(fp)
					if(iteration == 450 && is_target == 0) {
 88003b4:	e0bfef17 	ldw	r2,-68(fp)
 88003b8:	10807098 	cmpnei	r2,r2,450
 88003bc:	1000071e 	bne	r2,zero,88003dc <main+0x1dc>
 88003c0:	e0bfee17 	ldw	r2,-72(fp)
 88003c4:	1004c03a 	cmpne	r2,r2,zero
 88003c8:	1000041e 	bne	r2,zero,88003dc <main+0x1dc>
						barrier(cpuid);
 88003cc:	e13ffe17 	ldw	r4,-8(fp)
 88003d0:	88007900 	call	8800790 <barrier>
						is_target = 1;
 88003d4:	00800044 	movi	r2,1
 88003d8:	e0bfee15 	stw	r2,-72(fp)
				y0 = (239.0-i)/240.0*(max_y - min_y) + min_y;
				//printf("x0: %f...", x0);
				//printf("y0: %f\n", y0);
				iteration = 0;

				while( (x*x + y*y) <= 4 && iteration < 500) {
 88003dc:	e0fff617 	ldw	r3,-40(fp)
 88003e0:	e0bff617 	ldw	r2,-40(fp)
 88003e4:	1889ff32 	custom	252,r4,r3,r2
 88003e8:	e0fff517 	ldw	r3,-44(fp)
 88003ec:	e0bff517 	ldw	r2,-44(fp)
 88003f0:	1885ff32 	custom	252,r2,r3,r2
 88003f4:	2085ff72 	custom	253,r2,r4,r2
 88003f8:	e03fff05 	stb	zero,-4(fp)
 88003fc:	1009883a 	mov	r4,r2
 8800400:	01502034 	movhi	r5,16512
 8800404:	8802a240 	call	8802a24 <__lesf2>
 8800408:	10800050 	cmplti	r2,r2,1
 880040c:	1000011e 	bne	r2,zero,8800414 <main+0x214>
 8800410:	00000206 	br	880041c <main+0x21c>
 8800414:	00800044 	movi	r2,1
 8800418:	e0bfff05 	stb	r2,-4(fp)
 880041c:	e0ffff03 	ldbu	r3,-4(fp)
 8800420:	1880005c 	xori	r2,r3,1
 8800424:	10803fcc 	andi	r2,r2,255
 8800428:	1004c03a 	cmpne	r2,r2,zero
 880042c:	1000031e 	bne	r2,zero,880043c <main+0x23c>
 8800430:	e0bfef17 	ldw	r2,-68(fp)
 8800434:	10807d10 	cmplti	r2,r2,500
 8800438:	103fc81e 	bne	r2,zero,880035c <main+0x15c>
						barrier(cpuid);
						is_target = 1;
					}
				}
				//printf("Iteration: %d\n", iteration);
				if(iteration == 500) {
 880043c:	e0bfef17 	ldw	r2,-68(fp)
 8800440:	10807d18 	cmpnei	r2,r2,500
 8800444:	1000061e 	bne	r2,zero,8800460 <main+0x260>
					alt_up_pixel_buffer_dma_draw(my_pixel_buffer, 0,j,i );
 8800448:	d125fe17 	ldw	r4,-26632(gp)
 880044c:	e1bff717 	ldw	r6,-36(fp)
 8800450:	e1fff817 	ldw	r7,-32(fp)
 8800454:	000b883a 	mov	r5,zero
 8800458:	8805ccc0 	call	8805ccc <alt_up_pixel_buffer_dma_draw>
 880045c:	00001806 	br	88004c0 <main+0x2c0>
				} else {
					alt_up_pixel_buffer_dma_draw(my_pixel_buffer, (iteration*8/zoom) + (iteration*4/zoom) +(iteration*2/zoom), j, i);
 8800460:	d465fe17 	ldw	r17,-26632(gp)
 8800464:	e0bfef17 	ldw	r2,-68(fp)
 8800468:	100890fa 	slli	r4,r2,3
 880046c:	e17ffd17 	ldw	r5,-12(fp)
 8800470:	8803b700 	call	8803b70 <__divsi3>
 8800474:	1021883a 	mov	r16,r2
 8800478:	e0bfef17 	ldw	r2,-68(fp)
 880047c:	1085883a 	add	r2,r2,r2
 8800480:	1085883a 	add	r2,r2,r2
 8800484:	1009883a 	mov	r4,r2
 8800488:	e17ffd17 	ldw	r5,-12(fp)
 880048c:	8803b700 	call	8803b70 <__divsi3>
 8800490:	80a1883a 	add	r16,r16,r2
 8800494:	e0bfef17 	ldw	r2,-68(fp)
 8800498:	1085883a 	add	r2,r2,r2
 880049c:	1009883a 	mov	r4,r2
 88004a0:	e17ffd17 	ldw	r5,-12(fp)
 88004a4:	8803b700 	call	8803b70 <__divsi3>
 88004a8:	8085883a 	add	r2,r16,r2
 88004ac:	100b883a 	mov	r5,r2
 88004b0:	e1bff717 	ldw	r6,-36(fp)
 88004b4:	e1fff817 	ldw	r7,-32(fp)
 88004b8:	8809883a 	mov	r4,r17
 88004bc:	8805ccc0 	call	8805ccc <alt_up_pixel_buffer_dma_draw>
		barrier(cpuid);
		//printf("%d", cpuid);
		is_target = 0;

		for (i = cpuid; i < num_rows; i+=4) {
			for (j = 0; j < num_cols; j++) {
 88004c0:	e0bff717 	ldw	r2,-36(fp)
 88004c4:	10800044 	addi	r2,r2,1
 88004c8:	e0bff715 	stw	r2,-36(fp)
 88004cc:	d0e00117 	ldw	r3,-32764(gp)
 88004d0:	e0bff717 	ldw	r2,-36(fp)
 88004d4:	10ff7f16 	blt	r2,r3,88002d4 <main+0xd4>
				} else {
					alt_up_pixel_buffer_dma_draw(my_pixel_buffer, (iteration*8/zoom) + (iteration*4/zoom) +(iteration*2/zoom), j, i);
				}
				//barrier(cpuid);
			}
			barrier(cpuid);
 88004d8:	e13ffe17 	ldw	r4,-8(fp)
 88004dc:	88007900 	call	8800790 <barrier>
		//printf("barrier 1")
		barrier(cpuid);
		//printf("%d", cpuid);
		is_target = 0;

		for (i = cpuid; i < num_rows; i+=4) {
 88004e0:	e0bff817 	ldw	r2,-32(fp)
 88004e4:	10800104 	addi	r2,r2,4
 88004e8:	e0bff815 	stw	r2,-32(fp)
 88004ec:	d0e00017 	ldw	r3,-32768(gp)
 88004f0:	e0bff817 	ldw	r2,-32(fp)
 88004f4:	10ff7516 	blt	r2,r3,88002cc <main+0xcc>
				}
				//barrier(cpuid);
			}
			barrier(cpuid);
		}
		if(is_target == 1) {
 88004f8:	e0bfee17 	ldw	r2,-72(fp)
 88004fc:	10800058 	cmpnei	r2,r2,1
 8800500:	1000041e 	bne	r2,zero,8800514 <main+0x314>
			target_x = x0;
 8800504:	e0bff317 	ldw	r2,-52(fp)
 8800508:	e0bff115 	stw	r2,-60(fp)
			target_y = y0;
 880050c:	e0bff217 	ldw	r2,-56(fp)
 8800510:	e0bff015 	stw	r2,-64(fp)
		}
		barrier(cpuid);
 8800514:	e13ffe17 	ldw	r4,-8(fp)
 8800518:	88007900 	call	8800790 <barrier>
		min_x = target_x - (1/(pow(1.5, zoom)));
 880051c:	e13ff117 	ldw	r4,-60(fp)
 8800520:	8802b340 	call	8802b34 <__extendsfdf2>
 8800524:	1021883a 	mov	r16,r2
 8800528:	1823883a 	mov	r17,r3
 880052c:	e13ffd17 	ldw	r4,-12(fp)
 8800530:	88039500 	call	8803950 <__floatsidf>
 8800534:	100f883a 	mov	r7,r2
 8800538:	1811883a 	mov	r8,r3
 880053c:	0009883a 	mov	r4,zero
 8800540:	014ffe34 	movhi	r5,16376
 8800544:	380d883a 	mov	r6,r7
 8800548:	400f883a 	mov	r7,r8
 880054c:	88009d00 	call	88009d0 <pow>
 8800550:	1009883a 	mov	r4,r2
 8800554:	180b883a 	mov	r5,r3
 8800558:	2005883a 	mov	r2,r4
 880055c:	2807883a 	mov	r3,r5
 8800560:	0009883a 	mov	r4,zero
 8800564:	016ffc34 	movhi	r5,49136
 8800568:	100d883a 	mov	r6,r2
 880056c:	180f883a 	mov	r7,r3
 8800570:	88034500 	call	8803450 <__divdf3>
 8800574:	1009883a 	mov	r4,r2
 8800578:	180b883a 	mov	r5,r3
 880057c:	2005883a 	mov	r2,r4
 8800580:	2807883a 	mov	r3,r5
 8800584:	8009883a 	mov	r4,r16
 8800588:	880b883a 	mov	r5,r17
 880058c:	100d883a 	mov	r6,r2
 8800590:	180f883a 	mov	r7,r3
 8800594:	88030180 	call	8803018 <__adddf3>
 8800598:	1009883a 	mov	r4,r2
 880059c:	180b883a 	mov	r5,r3
 88005a0:	2005883a 	mov	r2,r4
 88005a4:	2807883a 	mov	r3,r5
 88005a8:	1009883a 	mov	r4,r2
 88005ac:	180b883a 	mov	r5,r3
 88005b0:	8803a800 	call	8803a80 <__truncdfsf2>
 88005b4:	e0bffc15 	stw	r2,-16(fp)
		max_x = target_x + (1/(pow(1.5, zoom)));
 88005b8:	e13ff117 	ldw	r4,-60(fp)
 88005bc:	8802b340 	call	8802b34 <__extendsfdf2>
 88005c0:	1021883a 	mov	r16,r2
 88005c4:	1823883a 	mov	r17,r3
 88005c8:	e13ffd17 	ldw	r4,-12(fp)
 88005cc:	88039500 	call	8803950 <__floatsidf>
 88005d0:	100f883a 	mov	r7,r2
 88005d4:	1811883a 	mov	r8,r3
 88005d8:	0009883a 	mov	r4,zero
 88005dc:	014ffe34 	movhi	r5,16376
 88005e0:	380d883a 	mov	r6,r7
 88005e4:	400f883a 	mov	r7,r8
 88005e8:	88009d00 	call	88009d0 <pow>
 88005ec:	100f883a 	mov	r7,r2
 88005f0:	1811883a 	mov	r8,r3
 88005f4:	0009883a 	mov	r4,zero
 88005f8:	014ffc34 	movhi	r5,16368
 88005fc:	380d883a 	mov	r6,r7
 8800600:	400f883a 	mov	r7,r8
 8800604:	88034500 	call	8803450 <__divdf3>
 8800608:	1009883a 	mov	r4,r2
 880060c:	180b883a 	mov	r5,r3
 8800610:	2005883a 	mov	r2,r4
 8800614:	2807883a 	mov	r3,r5
 8800618:	8009883a 	mov	r4,r16
 880061c:	880b883a 	mov	r5,r17
 8800620:	100d883a 	mov	r6,r2
 8800624:	180f883a 	mov	r7,r3
 8800628:	88030180 	call	8803018 <__adddf3>
 880062c:	1009883a 	mov	r4,r2
 8800630:	180b883a 	mov	r5,r3
 8800634:	2005883a 	mov	r2,r4
 8800638:	2807883a 	mov	r3,r5
 880063c:	1009883a 	mov	r4,r2
 8800640:	180b883a 	mov	r5,r3
 8800644:	8803a800 	call	8803a80 <__truncdfsf2>
 8800648:	e0bffb15 	stw	r2,-20(fp)
		min_y = target_y - (0.75/(pow(1.5, zoom)));
 880064c:	e13ff017 	ldw	r4,-64(fp)
 8800650:	8802b340 	call	8802b34 <__extendsfdf2>
 8800654:	1021883a 	mov	r16,r2
 8800658:	1823883a 	mov	r17,r3
 880065c:	e13ffd17 	ldw	r4,-12(fp)
 8800660:	88039500 	call	8803950 <__floatsidf>
 8800664:	100f883a 	mov	r7,r2
 8800668:	1811883a 	mov	r8,r3
 880066c:	0009883a 	mov	r4,zero
 8800670:	014ffe34 	movhi	r5,16376
 8800674:	380d883a 	mov	r6,r7
 8800678:	400f883a 	mov	r7,r8
 880067c:	88009d00 	call	88009d0 <pow>
 8800680:	100f883a 	mov	r7,r2
 8800684:	1811883a 	mov	r8,r3
 8800688:	0009883a 	mov	r4,zero
 880068c:	016ffa34 	movhi	r5,49128
 8800690:	380d883a 	mov	r6,r7
 8800694:	400f883a 	mov	r7,r8
 8800698:	88034500 	call	8803450 <__divdf3>
 880069c:	1009883a 	mov	r4,r2
 88006a0:	180b883a 	mov	r5,r3
 88006a4:	2005883a 	mov	r2,r4
 88006a8:	2807883a 	mov	r3,r5
 88006ac:	8009883a 	mov	r4,r16
 88006b0:	880b883a 	mov	r5,r17
 88006b4:	100d883a 	mov	r6,r2
 88006b8:	180f883a 	mov	r7,r3
 88006bc:	88030180 	call	8803018 <__adddf3>
 88006c0:	1009883a 	mov	r4,r2
 88006c4:	180b883a 	mov	r5,r3
 88006c8:	2005883a 	mov	r2,r4
 88006cc:	2807883a 	mov	r3,r5
 88006d0:	1009883a 	mov	r4,r2
 88006d4:	180b883a 	mov	r5,r3
 88006d8:	8803a800 	call	8803a80 <__truncdfsf2>
 88006dc:	e0bffa15 	stw	r2,-24(fp)
		max_y = target_y + (0.75/(pow(1.5, zoom)));
 88006e0:	e13ff017 	ldw	r4,-64(fp)
 88006e4:	8802b340 	call	8802b34 <__extendsfdf2>
 88006e8:	1021883a 	mov	r16,r2
 88006ec:	1823883a 	mov	r17,r3
 88006f0:	e13ffd17 	ldw	r4,-12(fp)
 88006f4:	88039500 	call	8803950 <__floatsidf>
 88006f8:	100f883a 	mov	r7,r2
 88006fc:	1811883a 	mov	r8,r3
 8800700:	0009883a 	mov	r4,zero
 8800704:	014ffe34 	movhi	r5,16376
 8800708:	380d883a 	mov	r6,r7
 880070c:	400f883a 	mov	r7,r8
 8800710:	88009d00 	call	88009d0 <pow>
 8800714:	100f883a 	mov	r7,r2
 8800718:	1811883a 	mov	r8,r3
 880071c:	0009883a 	mov	r4,zero
 8800720:	014ffa34 	movhi	r5,16360
 8800724:	380d883a 	mov	r6,r7
 8800728:	400f883a 	mov	r7,r8
 880072c:	88034500 	call	8803450 <__divdf3>
 8800730:	1009883a 	mov	r4,r2
 8800734:	180b883a 	mov	r5,r3
 8800738:	2005883a 	mov	r2,r4
 880073c:	2807883a 	mov	r3,r5
 8800740:	8009883a 	mov	r4,r16
 8800744:	880b883a 	mov	r5,r17
 8800748:	100d883a 	mov	r6,r2
 880074c:	180f883a 	mov	r7,r3
 8800750:	88030180 	call	8803018 <__adddf3>
 8800754:	1009883a 	mov	r4,r2
 8800758:	180b883a 	mov	r5,r3
 880075c:	2005883a 	mov	r2,r4
 8800760:	2807883a 	mov	r3,r5
 8800764:	1009883a 	mov	r4,r2
 8800768:	180b883a 	mov	r5,r3
 880076c:	8803a800 	call	8803a80 <__truncdfsf2>
 8800770:	e0bff915 	stw	r2,-28(fp)
		zoom += 1;
 8800774:	e0bffd17 	ldw	r2,-12(fp)
 8800778:	10800044 	addi	r2,r2,1
 880077c:	e0bffd15 	stw	r2,-12(fp)

		alt_up_pixel_buffer_dma_clear_screen(my_pixel_buffer,0);
 8800780:	d125fe17 	ldw	r4,-26632(gp)
 8800784:	000b883a 	mov	r5,zero
 8800788:	8805f500 	call	8805f50 <alt_up_pixel_buffer_dma_clear_screen>
	}
 880078c:	003ec906 	br	88002b4 <main+0xb4>

08800790 <barrier>:
}

void barrier(int id){
 8800790:	defff904 	addi	sp,sp,-28
 8800794:	dfc00615 	stw	ra,24(sp)
 8800798:	df000515 	stw	fp,20(sp)
 880079c:	df000504 	addi	fp,sp,20
 88007a0:	e13fff15 	stw	r4,-4(fp)
	post(id, message);
 88007a4:	d165f917 	ldw	r5,-26652(gp)
 88007a8:	e13fff17 	ldw	r4,-4(fp)
 88007ac:	88008e40 	call	88008e4 <post>
	if(id == 0){
 88007b0:	e0bfff17 	ldw	r2,-4(fp)
 88007b4:	1004c03a 	cmpne	r2,r2,zero
 88007b8:	10000c1e 	bne	r2,zero,88007ec <barrier+0x5c>
		int i;
		for(i = 1; i < n-1; i++){
 88007bc:	00800044 	movi	r2,1
 88007c0:	e0bffe15 	stw	r2,-8(fp)
 88007c4:	00000506 	br	88007dc <barrier+0x4c>
			pend(mailbox_0);
 88007c8:	d125fa17 	ldw	r4,-26648(gp)
 88007cc:	88008b40 	call	88008b4 <pend>

void barrier(int id){
	post(id, message);
	if(id == 0){
		int i;
		for(i = 1; i < n-1; i++){
 88007d0:	e0bffe17 	ldw	r2,-8(fp)
 88007d4:	10800044 	addi	r2,r2,1
 88007d8:	e0bffe15 	stw	r2,-8(fp)
 88007dc:	d0a00217 	ldw	r2,-32760(gp)
 88007e0:	10ffffc4 	addi	r3,r2,-1
 88007e4:	e0bffe17 	ldw	r2,-8(fp)
 88007e8:	10fff716 	blt	r2,r3,88007c8 <barrier+0x38>
			pend(mailbox_0);
		}
	}
	if(id == 1){
 88007ec:	e0bfff17 	ldw	r2,-4(fp)
 88007f0:	10800058 	cmpnei	r2,r2,1
 88007f4:	10000c1e 	bne	r2,zero,8800828 <barrier+0x98>
		int i;
		for(i = 1; i < n-1; i++){
 88007f8:	00800044 	movi	r2,1
 88007fc:	e0bffd15 	stw	r2,-12(fp)
 8800800:	00000506 	br	8800818 <barrier+0x88>
			pend(mailbox_1);
 8800804:	d125fc17 	ldw	r4,-26640(gp)
 8800808:	88008b40 	call	88008b4 <pend>
			pend(mailbox_0);
		}
	}
	if(id == 1){
		int i;
		for(i = 1; i < n-1; i++){
 880080c:	e0bffd17 	ldw	r2,-12(fp)
 8800810:	10800044 	addi	r2,r2,1
 8800814:	e0bffd15 	stw	r2,-12(fp)
 8800818:	d0a00217 	ldw	r2,-32760(gp)
 880081c:	10ffffc4 	addi	r3,r2,-1
 8800820:	e0bffd17 	ldw	r2,-12(fp)
 8800824:	10fff716 	blt	r2,r3,8800804 <barrier+0x74>
			pend(mailbox_1);
		}
	}
	if(id == 2){
 8800828:	e0bfff17 	ldw	r2,-4(fp)
 880082c:	10800098 	cmpnei	r2,r2,2
 8800830:	10000c1e 	bne	r2,zero,8800864 <barrier+0xd4>
		int i;
		for(i = 1; i < n-1; i++){
 8800834:	00800044 	movi	r2,1
 8800838:	e0bffc15 	stw	r2,-16(fp)
 880083c:	00000506 	br	8800854 <barrier+0xc4>
			pend(mailbox_2);
 8800840:	d125fb17 	ldw	r4,-26644(gp)
 8800844:	88008b40 	call	88008b4 <pend>
			pend(mailbox_1);
		}
	}
	if(id == 2){
		int i;
		for(i = 1; i < n-1; i++){
 8800848:	e0bffc17 	ldw	r2,-16(fp)
 880084c:	10800044 	addi	r2,r2,1
 8800850:	e0bffc15 	stw	r2,-16(fp)
 8800854:	d0a00217 	ldw	r2,-32760(gp)
 8800858:	10ffffc4 	addi	r3,r2,-1
 880085c:	e0bffc17 	ldw	r2,-16(fp)
 8800860:	10fff716 	blt	r2,r3,8800840 <barrier+0xb0>
			pend(mailbox_2);
		}
	}
	if(id == 3){
 8800864:	e0bfff17 	ldw	r2,-4(fp)
 8800868:	108000d8 	cmpnei	r2,r2,3
 880086c:	10000c1e 	bne	r2,zero,88008a0 <barrier+0x110>
		int i;
		for(i = 1; i < n-1; i++){
 8800870:	00800044 	movi	r2,1
 8800874:	e0bffb15 	stw	r2,-20(fp)
 8800878:	00000506 	br	8800890 <barrier+0x100>
			pend(mailbox_3);
 880087c:	d125ff17 	ldw	r4,-26628(gp)
 8800880:	88008b40 	call	88008b4 <pend>
			pend(mailbox_2);
		}
	}
	if(id == 3){
		int i;
		for(i = 1; i < n-1; i++){
 8800884:	e0bffb17 	ldw	r2,-20(fp)
 8800888:	10800044 	addi	r2,r2,1
 880088c:	e0bffb15 	stw	r2,-20(fp)
 8800890:	d0a00217 	ldw	r2,-32760(gp)
 8800894:	10ffffc4 	addi	r3,r2,-1
 8800898:	e0bffb17 	ldw	r2,-20(fp)
 880089c:	10fff716 	blt	r2,r3,880087c <barrier+0xec>
			pend(mailbox_3);
		}
	}
}
 88008a0:	e037883a 	mov	sp,fp
 88008a4:	dfc00117 	ldw	ra,4(sp)
 88008a8:	df000017 	ldw	fp,0(sp)
 88008ac:	dec00204 	addi	sp,sp,8
 88008b0:	f800283a 	ret

088008b4 <pend>:
void pend(alt_mailbox_dev* box){
 88008b4:	defffd04 	addi	sp,sp,-12
 88008b8:	dfc00215 	stw	ra,8(sp)
 88008bc:	df000115 	stw	fp,4(sp)
 88008c0:	df000104 	addi	fp,sp,4
 88008c4:	e13fff15 	stw	r4,-4(fp)
	//printf("MAILBOX PENDING \n");
	altera_avalon_mailbox_pend(box);
 88008c8:	e13fff17 	ldw	r4,-4(fp)
 88008cc:	88058080 	call	8805808 <altera_avalon_mailbox_pend>
}
 88008d0:	e037883a 	mov	sp,fp
 88008d4:	dfc00117 	ldw	ra,4(sp)
 88008d8:	df000017 	ldw	fp,0(sp)
 88008dc:	dec00204 	addi	sp,sp,8
 88008e0:	f800283a 	ret

088008e4 <post>:

void post(int id, alt_u32 mess){
 88008e4:	defffc04 	addi	sp,sp,-16
 88008e8:	dfc00315 	stw	ra,12(sp)
 88008ec:	df000215 	stw	fp,8(sp)
 88008f0:	df000204 	addi	fp,sp,8
 88008f4:	e13ffe15 	stw	r4,-8(fp)
 88008f8:	e17fff15 	stw	r5,-4(fp)
	 //altera_avalon_mailbox_post(box, message);

	 if(id == 0){
 88008fc:	e0bffe17 	ldw	r2,-8(fp)
 8800900:	1004c03a 	cmpne	r2,r2,zero
 8800904:	1000091e 	bne	r2,zero,880092c <post+0x48>
	 //printf("MAILBOX 0 POSTING \n");
	 altera_avalon_mailbox_post(mailbox_1, mess);
 8800908:	d125fc17 	ldw	r4,-26640(gp)
 880090c:	e17fff17 	ldw	r5,-4(fp)
 8800910:	88056fc0 	call	88056fc <altera_avalon_mailbox_post>
	 altera_avalon_mailbox_post(mailbox_2, mess);
 8800914:	d125fb17 	ldw	r4,-26644(gp)
 8800918:	e17fff17 	ldw	r5,-4(fp)
 880091c:	88056fc0 	call	88056fc <altera_avalon_mailbox_post>
	 altera_avalon_mailbox_post(mailbox_3, mess);
 8800920:	d125ff17 	ldw	r4,-26628(gp)
 8800924:	e17fff17 	ldw	r5,-4(fp)
 8800928:	88056fc0 	call	88056fc <altera_avalon_mailbox_post>
	 }
	 if(id == 1){
 880092c:	e0bffe17 	ldw	r2,-8(fp)
 8800930:	10800058 	cmpnei	r2,r2,1
 8800934:	1000091e 	bne	r2,zero,880095c <post+0x78>
	 //printf("MAILBOX 1 POSTING \n");
	 altera_avalon_mailbox_post(mailbox_0, mess);
 8800938:	d125fa17 	ldw	r4,-26648(gp)
 880093c:	e17fff17 	ldw	r5,-4(fp)
 8800940:	88056fc0 	call	88056fc <altera_avalon_mailbox_post>
	 altera_avalon_mailbox_post(mailbox_2, mess);
 8800944:	d125fb17 	ldw	r4,-26644(gp)
 8800948:	e17fff17 	ldw	r5,-4(fp)
 880094c:	88056fc0 	call	88056fc <altera_avalon_mailbox_post>
	 altera_avalon_mailbox_post(mailbox_3, mess);
 8800950:	d125ff17 	ldw	r4,-26628(gp)
 8800954:	e17fff17 	ldw	r5,-4(fp)
 8800958:	88056fc0 	call	88056fc <altera_avalon_mailbox_post>
	 }

	 if(id == 2){
 880095c:	e0bffe17 	ldw	r2,-8(fp)
 8800960:	10800098 	cmpnei	r2,r2,2
 8800964:	1000091e 	bne	r2,zero,880098c <post+0xa8>
	 //printf("MAILBOX 2 POSTING \n");
	 altera_avalon_mailbox_post(mailbox_0, mess);
 8800968:	d125fa17 	ldw	r4,-26648(gp)
 880096c:	e17fff17 	ldw	r5,-4(fp)
 8800970:	88056fc0 	call	88056fc <altera_avalon_mailbox_post>
	 altera_avalon_mailbox_post(mailbox_1, mess);
 8800974:	d125fc17 	ldw	r4,-26640(gp)
 8800978:	e17fff17 	ldw	r5,-4(fp)
 880097c:	88056fc0 	call	88056fc <altera_avalon_mailbox_post>
	 altera_avalon_mailbox_post(mailbox_3, mess);
 8800980:	d125ff17 	ldw	r4,-26628(gp)
 8800984:	e17fff17 	ldw	r5,-4(fp)
 8800988:	88056fc0 	call	88056fc <altera_avalon_mailbox_post>
	 }

	 if(id == 3){
 880098c:	e0bffe17 	ldw	r2,-8(fp)
 8800990:	108000d8 	cmpnei	r2,r2,3
 8800994:	1000091e 	bne	r2,zero,88009bc <post+0xd8>
	 //printf("MAILBOX 3 POSTING \n");
	 altera_avalon_mailbox_post(mailbox_0, mess);
 8800998:	d125fa17 	ldw	r4,-26648(gp)
 880099c:	e17fff17 	ldw	r5,-4(fp)
 88009a0:	88056fc0 	call	88056fc <altera_avalon_mailbox_post>
	 altera_avalon_mailbox_post(mailbox_1, mess);
 88009a4:	d125fc17 	ldw	r4,-26640(gp)
 88009a8:	e17fff17 	ldw	r5,-4(fp)
 88009ac:	88056fc0 	call	88056fc <altera_avalon_mailbox_post>
	 altera_avalon_mailbox_post(mailbox_2, mess);
 88009b0:	d125fb17 	ldw	r4,-26644(gp)
 88009b4:	e17fff17 	ldw	r5,-4(fp)
 88009b8:	88056fc0 	call	88056fc <altera_avalon_mailbox_post>
	 }

}
 88009bc:	e037883a 	mov	sp,fp
 88009c0:	dfc00117 	ldw	ra,4(sp)
 88009c4:	df000017 	ldw	fp,0(sp)
 88009c8:	dec00204 	addi	sp,sp,8
 88009cc:	f800283a 	ret

088009d0 <pow>:
 88009d0:	deffee04 	addi	sp,sp,-72
 88009d4:	ddc01015 	stw	r23,64(sp)
 88009d8:	05c22074 	movhi	r23,2177
 88009dc:	bde8ab04 	addi	r23,r23,-23892
 88009e0:	dd800f15 	stw	r22,60(sp)
 88009e4:	dd400e15 	stw	r21,56(sp)
 88009e8:	dd000d15 	stw	r20,52(sp)
 88009ec:	dcc00c15 	stw	r19,48(sp)
 88009f0:	dc800b15 	stw	r18,44(sp)
 88009f4:	dc400a15 	stw	r17,40(sp)
 88009f8:	dc000915 	stw	r16,36(sp)
 88009fc:	2029883a 	mov	r20,r4
 8800a00:	dfc01115 	stw	ra,68(sp)
 8800a04:	3025883a 	mov	r18,r6
 8800a08:	282b883a 	mov	r21,r5
 8800a0c:	3827883a 	mov	r19,r7
 8800a10:	8800e580 	call	8800e58 <__ieee754_pow>
 8800a14:	b9000017 	ldw	r4,0(r23)
 8800a18:	05bfffc4 	movi	r22,-1
 8800a1c:	1021883a 	mov	r16,r2
 8800a20:	1823883a 	mov	r17,r3
 8800a24:	25800426 	beq	r4,r22,8800a38 <pow+0x68>
 8800a28:	9009883a 	mov	r4,r18
 8800a2c:	980b883a 	mov	r5,r19
 8800a30:	88024540 	call	8802454 <__isnand>
 8800a34:	10000d26 	beq	r2,zero,8800a6c <pow+0x9c>
 8800a38:	8005883a 	mov	r2,r16
 8800a3c:	8807883a 	mov	r3,r17
 8800a40:	dfc01117 	ldw	ra,68(sp)
 8800a44:	ddc01017 	ldw	r23,64(sp)
 8800a48:	dd800f17 	ldw	r22,60(sp)
 8800a4c:	dd400e17 	ldw	r21,56(sp)
 8800a50:	dd000d17 	ldw	r20,52(sp)
 8800a54:	dcc00c17 	ldw	r19,48(sp)
 8800a58:	dc800b17 	ldw	r18,44(sp)
 8800a5c:	dc400a17 	ldw	r17,40(sp)
 8800a60:	dc000917 	ldw	r16,36(sp)
 8800a64:	dec01204 	addi	sp,sp,72
 8800a68:	f800283a 	ret
 8800a6c:	a009883a 	mov	r4,r20
 8800a70:	a80b883a 	mov	r5,r21
 8800a74:	88024540 	call	8802454 <__isnand>
 8800a78:	1000151e 	bne	r2,zero,8800ad0 <pow+0x100>
 8800a7c:	000d883a 	mov	r6,zero
 8800a80:	000f883a 	mov	r7,zero
 8800a84:	a009883a 	mov	r4,r20
 8800a88:	a80b883a 	mov	r5,r21
 8800a8c:	88036a80 	call	88036a8 <__eqdf2>
 8800a90:	1000541e 	bne	r2,zero,8800be4 <pow+0x214>
 8800a94:	000d883a 	mov	r6,zero
 8800a98:	000f883a 	mov	r7,zero
 8800a9c:	9009883a 	mov	r4,r18
 8800aa0:	980b883a 	mov	r5,r19
 8800aa4:	88036a80 	call	88036a8 <__eqdf2>
 8800aa8:	10002c1e 	bne	r2,zero,8800b5c <pow+0x18c>
 8800aac:	b8800017 	ldw	r2,0(r23)
 8800ab0:	d8000615 	stw	zero,24(sp)
 8800ab4:	d8000715 	stw	zero,28(sp)
 8800ab8:	10001226 	beq	r2,zero,8800b04 <pow+0x134>
 8800abc:	008ffc34 	movhi	r2,16368
 8800ac0:	d8800715 	stw	r2,28(sp)
 8800ac4:	dc000617 	ldw	r16,24(sp)
 8800ac8:	dc400717 	ldw	r17,28(sp)
 8800acc:	003fda06 	br	8800a38 <pow+0x68>
 8800ad0:	000d883a 	mov	r6,zero
 8800ad4:	000f883a 	mov	r7,zero
 8800ad8:	9009883a 	mov	r4,r18
 8800adc:	980b883a 	mov	r5,r19
 8800ae0:	88036a80 	call	88036a8 <__eqdf2>
 8800ae4:	103fd41e 	bne	r2,zero,8800a38 <pow+0x68>
 8800ae8:	b8c00017 	ldw	r3,0(r23)
 8800aec:	010ffc34 	movhi	r4,16368
 8800af0:	d8000615 	stw	zero,24(sp)
 8800af4:	d9000715 	stw	r4,28(sp)
 8800af8:	1d801526 	beq	r3,r22,8800b50 <pow+0x180>
 8800afc:	00800084 	movi	r2,2
 8800b00:	18801326 	beq	r3,r2,8800b50 <pow+0x180>
 8800b04:	00822074 	movhi	r2,2177
 8800b08:	10a22404 	addi	r2,r2,-30576
 8800b0c:	00c00044 	movi	r3,1
 8800b10:	d809883a 	mov	r4,sp
 8800b14:	dcc00515 	stw	r19,20(sp)
 8800b18:	dd400315 	stw	r21,12(sp)
 8800b1c:	d8800115 	stw	r2,4(sp)
 8800b20:	d8c00015 	stw	r3,0(sp)
 8800b24:	dc800415 	stw	r18,16(sp)
 8800b28:	dd000215 	stw	r20,8(sp)
 8800b2c:	d8000815 	stw	zero,32(sp)
 8800b30:	88024840 	call	8802484 <matherr>
 8800b34:	10002726 	beq	r2,zero,8800bd4 <pow+0x204>
 8800b38:	d8800817 	ldw	r2,32(sp)
 8800b3c:	103fe126 	beq	r2,zero,8800ac4 <pow+0xf4>
 8800b40:	88045680 	call	8804568 <__errno>
 8800b44:	d8c00817 	ldw	r3,32(sp)
 8800b48:	10c00015 	stw	r3,0(r2)
 8800b4c:	003fdd06 	br	8800ac4 <pow+0xf4>
 8800b50:	d9000715 	stw	r4,28(sp)
 8800b54:	d8000615 	stw	zero,24(sp)
 8800b58:	003fda06 	br	8800ac4 <pow+0xf4>
 8800b5c:	9009883a 	mov	r4,r18
 8800b60:	980b883a 	mov	r5,r19
 8800b64:	88024380 	call	8802438 <finite>
 8800b68:	103fb326 	beq	r2,zero,8800a38 <pow+0x68>
 8800b6c:	000d883a 	mov	r6,zero
 8800b70:	000f883a 	mov	r7,zero
 8800b74:	9009883a 	mov	r4,r18
 8800b78:	980b883a 	mov	r5,r19
 8800b7c:	88038400 	call	8803840 <__ltdf2>
 8800b80:	103fad0e 	bge	r2,zero,8800a38 <pow+0x68>
 8800b84:	b9000017 	ldw	r4,0(r23)
 8800b88:	00800044 	movi	r2,1
 8800b8c:	00c22074 	movhi	r3,2177
 8800b90:	18e22404 	addi	r3,r3,-30576
 8800b94:	d8800015 	stw	r2,0(sp)
 8800b98:	d8c00115 	stw	r3,4(sp)
 8800b9c:	dd400315 	stw	r21,12(sp)
 8800ba0:	dcc00515 	stw	r19,20(sp)
 8800ba4:	d8000815 	stw	zero,32(sp)
 8800ba8:	dd000215 	stw	r20,8(sp)
 8800bac:	dc800415 	stw	r18,16(sp)
 8800bb0:	20005626 	beq	r4,zero,8800d0c <pow+0x33c>
 8800bb4:	00bffc34 	movhi	r2,65520
 8800bb8:	d8800715 	stw	r2,28(sp)
 8800bbc:	00800084 	movi	r2,2
 8800bc0:	d8000615 	stw	zero,24(sp)
 8800bc4:	20800326 	beq	r4,r2,8800bd4 <pow+0x204>
 8800bc8:	d809883a 	mov	r4,sp
 8800bcc:	88024840 	call	8802484 <matherr>
 8800bd0:	103fd91e 	bne	r2,zero,8800b38 <pow+0x168>
 8800bd4:	88045680 	call	8804568 <__errno>
 8800bd8:	00c00844 	movi	r3,33
 8800bdc:	10c00015 	stw	r3,0(r2)
 8800be0:	003fd506 	br	8800b38 <pow+0x168>
 8800be4:	8009883a 	mov	r4,r16
 8800be8:	880b883a 	mov	r5,r17
 8800bec:	88024380 	call	8802438 <finite>
 8800bf0:	10002426 	beq	r2,zero,8800c84 <pow+0x2b4>
 8800bf4:	000d883a 	mov	r6,zero
 8800bf8:	000f883a 	mov	r7,zero
 8800bfc:	8009883a 	mov	r4,r16
 8800c00:	880b883a 	mov	r5,r17
 8800c04:	88036a80 	call	88036a8 <__eqdf2>
 8800c08:	103f8b1e 	bne	r2,zero,8800a38 <pow+0x68>
 8800c0c:	a009883a 	mov	r4,r20
 8800c10:	a80b883a 	mov	r5,r21
 8800c14:	88024380 	call	8802438 <finite>
 8800c18:	103f8726 	beq	r2,zero,8800a38 <pow+0x68>
 8800c1c:	9009883a 	mov	r4,r18
 8800c20:	980b883a 	mov	r5,r19
 8800c24:	88024380 	call	8802438 <finite>
 8800c28:	103f8326 	beq	r2,zero,8800a38 <pow+0x68>
 8800c2c:	b9000017 	ldw	r4,0(r23)
 8800c30:	00800104 	movi	r2,4
 8800c34:	d8800015 	stw	r2,0(sp)
 8800c38:	00c22074 	movhi	r3,2177
 8800c3c:	18e22404 	addi	r3,r3,-30576
 8800c40:	00800084 	movi	r2,2
 8800c44:	d8c00115 	stw	r3,4(sp)
 8800c48:	dd400315 	stw	r21,12(sp)
 8800c4c:	dcc00515 	stw	r19,20(sp)
 8800c50:	d8000815 	stw	zero,32(sp)
 8800c54:	dd000215 	stw	r20,8(sp)
 8800c58:	dc800415 	stw	r18,16(sp)
 8800c5c:	d8000615 	stw	zero,24(sp)
 8800c60:	d8000715 	stw	zero,28(sp)
 8800c64:	20800326 	beq	r4,r2,8800c74 <pow+0x2a4>
 8800c68:	d809883a 	mov	r4,sp
 8800c6c:	88024840 	call	8802484 <matherr>
 8800c70:	103fb11e 	bne	r2,zero,8800b38 <pow+0x168>
 8800c74:	88045680 	call	8804568 <__errno>
 8800c78:	00c00884 	movi	r3,34
 8800c7c:	10c00015 	stw	r3,0(r2)
 8800c80:	003fad06 	br	8800b38 <pow+0x168>
 8800c84:	a009883a 	mov	r4,r20
 8800c88:	a80b883a 	mov	r5,r21
 8800c8c:	88024380 	call	8802438 <finite>
 8800c90:	103fd826 	beq	r2,zero,8800bf4 <pow+0x224>
 8800c94:	9009883a 	mov	r4,r18
 8800c98:	980b883a 	mov	r5,r19
 8800c9c:	88024380 	call	8802438 <finite>
 8800ca0:	103fd426 	beq	r2,zero,8800bf4 <pow+0x224>
 8800ca4:	880b883a 	mov	r5,r17
 8800ca8:	8009883a 	mov	r4,r16
 8800cac:	88024540 	call	8802454 <__isnand>
 8800cb0:	10001926 	beq	r2,zero,8800d18 <pow+0x348>
 8800cb4:	bc000017 	ldw	r16,0(r23)
 8800cb8:	00800044 	movi	r2,1
 8800cbc:	00c22074 	movhi	r3,2177
 8800cc0:	18e22404 	addi	r3,r3,-30576
 8800cc4:	d8800015 	stw	r2,0(sp)
 8800cc8:	d8c00115 	stw	r3,4(sp)
 8800ccc:	dd400315 	stw	r21,12(sp)
 8800cd0:	dcc00515 	stw	r19,20(sp)
 8800cd4:	d8000815 	stw	zero,32(sp)
 8800cd8:	dd000215 	stw	r20,8(sp)
 8800cdc:	dc800415 	stw	r18,16(sp)
 8800ce0:	80000a26 	beq	r16,zero,8800d0c <pow+0x33c>
 8800ce4:	0009883a 	mov	r4,zero
 8800ce8:	000d883a 	mov	r6,zero
 8800cec:	000b883a 	mov	r5,zero
 8800cf0:	000f883a 	mov	r7,zero
 8800cf4:	88034500 	call	8803450 <__divdf3>
 8800cf8:	d8800615 	stw	r2,24(sp)
 8800cfc:	00800084 	movi	r2,2
 8800d00:	d8c00715 	stw	r3,28(sp)
 8800d04:	80bfb01e 	bne	r16,r2,8800bc8 <pow+0x1f8>
 8800d08:	003fb206 	br	8800bd4 <pow+0x204>
 8800d0c:	d8000615 	stw	zero,24(sp)
 8800d10:	d8000715 	stw	zero,28(sp)
 8800d14:	003fac06 	br	8800bc8 <pow+0x1f8>
 8800d18:	b8800017 	ldw	r2,0(r23)
 8800d1c:	00c000c4 	movi	r3,3
 8800d20:	01022074 	movhi	r4,2177
 8800d24:	21222404 	addi	r4,r4,-30576
 8800d28:	d8c00015 	stw	r3,0(sp)
 8800d2c:	d9000115 	stw	r4,4(sp)
 8800d30:	d8000815 	stw	zero,32(sp)
 8800d34:	dd000215 	stw	r20,8(sp)
 8800d38:	dd400315 	stw	r21,12(sp)
 8800d3c:	dc800415 	stw	r18,16(sp)
 8800d40:	dcc00515 	stw	r19,20(sp)
 8800d44:	1000251e 	bne	r2,zero,8800ddc <pow+0x40c>
 8800d48:	05b80034 	movhi	r22,57344
 8800d4c:	0091fc34 	movhi	r2,18416
 8800d50:	10bfffc4 	addi	r2,r2,-1
 8800d54:	000d883a 	mov	r6,zero
 8800d58:	000f883a 	mov	r7,zero
 8800d5c:	a80b883a 	mov	r5,r21
 8800d60:	a009883a 	mov	r4,r20
 8800d64:	d8800715 	stw	r2,28(sp)
 8800d68:	dd800615 	stw	r22,24(sp)
 8800d6c:	88038400 	call	8803840 <__ltdf2>
 8800d70:	103fbd0e 	bge	r2,zero,8800c68 <pow+0x298>
 8800d74:	0005883a 	mov	r2,zero
 8800d78:	00cff834 	movhi	r3,16352
 8800d7c:	180f883a 	mov	r7,r3
 8800d80:	100d883a 	mov	r6,r2
 8800d84:	980b883a 	mov	r5,r19
 8800d88:	9009883a 	mov	r4,r18
 8800d8c:	880308c0 	call	880308c <__muldf3>
 8800d90:	1009883a 	mov	r4,r2
 8800d94:	180b883a 	mov	r5,r3
 8800d98:	1021883a 	mov	r16,r2
 8800d9c:	1823883a 	mov	r17,r3
 8800da0:	880249c0 	call	880249c <rint>
 8800da4:	180f883a 	mov	r7,r3
 8800da8:	8009883a 	mov	r4,r16
 8800dac:	880b883a 	mov	r5,r17
 8800db0:	100d883a 	mov	r6,r2
 8800db4:	88037300 	call	8803730 <__nedf2>
 8800db8:	10000426 	beq	r2,zero,8800dcc <pow+0x3fc>
 8800dbc:	00b1fc34 	movhi	r2,51184
 8800dc0:	10bfffc4 	addi	r2,r2,-1
 8800dc4:	dd800615 	stw	r22,24(sp)
 8800dc8:	d8800715 	stw	r2,28(sp)
 8800dcc:	b8c00017 	ldw	r3,0(r23)
 8800dd0:	00800084 	movi	r2,2
 8800dd4:	18bfa41e 	bne	r3,r2,8800c68 <pow+0x298>
 8800dd8:	003fa606 	br	8800c74 <pow+0x2a4>
 8800ddc:	009ffc34 	movhi	r2,32752
 8800de0:	000d883a 	mov	r6,zero
 8800de4:	000f883a 	mov	r7,zero
 8800de8:	a80b883a 	mov	r5,r21
 8800dec:	a009883a 	mov	r4,r20
 8800df0:	d8800715 	stw	r2,28(sp)
 8800df4:	d8000615 	stw	zero,24(sp)
 8800df8:	88038400 	call	8803840 <__ltdf2>
 8800dfc:	103ff30e 	bge	r2,zero,8800dcc <pow+0x3fc>
 8800e00:	0005883a 	mov	r2,zero
 8800e04:	00cff834 	movhi	r3,16352
 8800e08:	180f883a 	mov	r7,r3
 8800e0c:	100d883a 	mov	r6,r2
 8800e10:	980b883a 	mov	r5,r19
 8800e14:	9009883a 	mov	r4,r18
 8800e18:	880308c0 	call	880308c <__muldf3>
 8800e1c:	1009883a 	mov	r4,r2
 8800e20:	180b883a 	mov	r5,r3
 8800e24:	1021883a 	mov	r16,r2
 8800e28:	1823883a 	mov	r17,r3
 8800e2c:	880249c0 	call	880249c <rint>
 8800e30:	180f883a 	mov	r7,r3
 8800e34:	8009883a 	mov	r4,r16
 8800e38:	880b883a 	mov	r5,r17
 8800e3c:	100d883a 	mov	r6,r2
 8800e40:	88037300 	call	8803730 <__nedf2>
 8800e44:	103fe126 	beq	r2,zero,8800dcc <pow+0x3fc>
 8800e48:	00bffc34 	movhi	r2,65520
 8800e4c:	d8800715 	stw	r2,28(sp)
 8800e50:	d8000615 	stw	zero,24(sp)
 8800e54:	003fdd06 	br	8800dcc <pow+0x3fc>

08800e58 <__ieee754_pow>:
 8800e58:	deffbb04 	addi	sp,sp,-276
 8800e5c:	3005883a 	mov	r2,r6
 8800e60:	dd404015 	stw	r21,256(sp)
 8800e64:	dd003f15 	stw	r20,252(sp)
 8800e68:	d9802815 	stw	r6,160(sp)
 8800e6c:	2029883a 	mov	r20,r4
 8800e70:	282b883a 	mov	r21,r5
 8800e74:	3009883a 	mov	r4,r6
 8800e78:	380b883a 	mov	r5,r7
 8800e7c:	01a00034 	movhi	r6,32768
 8800e80:	31bfffc4 	addi	r6,r6,-1
 8800e84:	dc003b15 	stw	r16,236(sp)
 8800e88:	29a0703a 	and	r16,r5,r6
 8800e8c:	1404b03a 	or	r2,r2,r16
 8800e90:	dd804115 	stw	r22,260(sp)
 8800e94:	dc403c15 	stw	r17,240(sp)
 8800e98:	d9c02915 	stw	r7,164(sp)
 8800e9c:	382d883a 	mov	r22,r7
 8800ea0:	dfc04415 	stw	ra,272(sp)
 8800ea4:	200f883a 	mov	r7,r4
 8800ea8:	df004315 	stw	fp,268(sp)
 8800eac:	ddc04215 	stw	r23,264(sp)
 8800eb0:	dcc03e15 	stw	r19,248(sp)
 8800eb4:	dc803d15 	stw	r18,244(sp)
 8800eb8:	a023883a 	mov	r17,r20
 8800ebc:	2809883a 	mov	r4,r5
 8800ec0:	10000826 	beq	r2,zero,8800ee4 <__ieee754_pow+0x8c>
 8800ec4:	a9a4703a 	and	r18,r21,r6
 8800ec8:	009ffc34 	movhi	r2,32752
 8800ecc:	a827883a 	mov	r19,r21
 8800ed0:	1480180e 	bge	r2,r18,8800f34 <__ieee754_pow+0xdc>
 8800ed4:	00b00434 	movhi	r2,49168
 8800ed8:	9085883a 	add	r2,r18,r2
 8800edc:	8884b03a 	or	r2,r17,r2
 8800ee0:	1000321e 	bne	r2,zero,8800fac <__ieee754_pow+0x154>
 8800ee4:	0009883a 	mov	r4,zero
 8800ee8:	014ffc34 	movhi	r5,16368
 8800eec:	d9002815 	stw	r4,160(sp)
 8800ef0:	d9402915 	stw	r5,164(sp)
 8800ef4:	d9002817 	ldw	r4,160(sp)
 8800ef8:	d9402917 	ldw	r5,164(sp)
 8800efc:	2005883a 	mov	r2,r4
 8800f00:	2807883a 	mov	r3,r5
 8800f04:	dfc04417 	ldw	ra,272(sp)
 8800f08:	df004317 	ldw	fp,268(sp)
 8800f0c:	ddc04217 	ldw	r23,264(sp)
 8800f10:	dd804117 	ldw	r22,260(sp)
 8800f14:	dd404017 	ldw	r21,256(sp)
 8800f18:	dd003f17 	ldw	r20,252(sp)
 8800f1c:	dcc03e17 	ldw	r19,248(sp)
 8800f20:	dc803d17 	ldw	r18,244(sp)
 8800f24:	dc403c17 	ldw	r17,240(sp)
 8800f28:	dc003b17 	ldw	r16,236(sp)
 8800f2c:	dec04504 	addi	sp,sp,276
 8800f30:	f800283a 	ret
 8800f34:	90802b26 	beq	r18,r2,8800fe4 <__ieee754_pow+0x18c>
 8800f38:	143fe616 	blt	r2,r16,8800ed4 <__ieee754_pow+0x7c>
 8800f3c:	80806126 	beq	r16,r2,88010c4 <__ieee754_pow+0x26c>
 8800f40:	982e403a 	cmpge	r23,r19,zero
 8800f44:	b8004e26 	beq	r23,zero,8801080 <__ieee754_pow+0x228>
 8800f48:	0039883a 	mov	fp,zero
 8800f4c:	3800281e 	bne	r7,zero,8800ff0 <__ieee754_pow+0x198>
 8800f50:	009ffc34 	movhi	r2,32752
 8800f54:	80804f26 	beq	r16,r2,8801094 <__ieee754_pow+0x23c>
 8800f58:	008ffc34 	movhi	r2,16368
 8800f5c:	80808226 	beq	r16,r2,8801168 <__ieee754_pow+0x310>
 8800f60:	00900034 	movhi	r2,16384
 8800f64:	20828426 	beq	r4,r2,8801978 <__ieee754_pow+0xb20>
 8800f68:	008ff834 	movhi	r2,16352
 8800f6c:	2080201e 	bne	r4,r2,8800ff0 <__ieee754_pow+0x198>
 8800f70:	98001f16 	blt	r19,zero,8800ff0 <__ieee754_pow+0x198>
 8800f74:	a80b883a 	mov	r5,r21
 8800f78:	a009883a 	mov	r4,r20
 8800f7c:	dfc04417 	ldw	ra,272(sp)
 8800f80:	df004317 	ldw	fp,268(sp)
 8800f84:	ddc04217 	ldw	r23,264(sp)
 8800f88:	dd804117 	ldw	r22,260(sp)
 8800f8c:	dd404017 	ldw	r21,256(sp)
 8800f90:	dd003f17 	ldw	r20,252(sp)
 8800f94:	dcc03e17 	ldw	r19,248(sp)
 8800f98:	dc803d17 	ldw	r18,244(sp)
 8800f9c:	dc403c17 	ldw	r17,240(sp)
 8800fa0:	dc003b17 	ldw	r16,236(sp)
 8800fa4:	dec04504 	addi	sp,sp,276
 8800fa8:	88021581 	jmpi	8802158 <__ieee754_sqrt>
 8800fac:	01022074 	movhi	r4,2177
 8800fb0:	21222504 	addi	r4,r4,-30572
 8800fb4:	dfc04417 	ldw	ra,272(sp)
 8800fb8:	df004317 	ldw	fp,268(sp)
 8800fbc:	ddc04217 	ldw	r23,264(sp)
 8800fc0:	dd804117 	ldw	r22,260(sp)
 8800fc4:	dd404017 	ldw	r21,256(sp)
 8800fc8:	dd003f17 	ldw	r20,252(sp)
 8800fcc:	dcc03e17 	ldw	r19,248(sp)
 8800fd0:	dc803d17 	ldw	r18,244(sp)
 8800fd4:	dc403c17 	ldw	r17,240(sp)
 8800fd8:	dc003b17 	ldw	r16,236(sp)
 8800fdc:	dec04504 	addi	sp,sp,276
 8800fe0:	880248c1 	jmpi	880248c <nan>
 8800fe4:	a03fbb1e 	bne	r20,zero,8800ed4 <__ieee754_pow+0x7c>
 8800fe8:	003fd306 	br	8800f38 <__ieee754_pow+0xe0>
 8800fec:	0039883a 	mov	fp,zero
 8800ff0:	a009883a 	mov	r4,r20
 8800ff4:	a80b883a 	mov	r5,r21
 8800ff8:	88024200 	call	8802420 <fabs>
 8800ffc:	1015883a 	mov	r10,r2
 8801000:	1817883a 	mov	r11,r3
 8801004:	88001226 	beq	r17,zero,8801050 <__ieee754_pow+0x1f8>
 8801008:	9804d7fa 	srli	r2,r19,31
 880100c:	10bfffc4 	addi	r2,r2,-1
 8801010:	1706b03a 	or	r3,r2,fp
 8801014:	d8802515 	stw	r2,148(sp)
 8801018:	18002c1e 	bne	r3,zero,88010cc <__ieee754_pow+0x274>
 880101c:	a80f883a 	mov	r7,r21
 8801020:	a009883a 	mov	r4,r20
 8801024:	a80b883a 	mov	r5,r21
 8801028:	a00d883a 	mov	r6,r20
 880102c:	8802f980 	call	8802f98 <__subdf3>
 8801030:	1009883a 	mov	r4,r2
 8801034:	180b883a 	mov	r5,r3
 8801038:	100d883a 	mov	r6,r2
 880103c:	180f883a 	mov	r7,r3
 8801040:	88034500 	call	8803450 <__divdf3>
 8801044:	d8802815 	stw	r2,160(sp)
 8801048:	d8c02915 	stw	r3,164(sp)
 880104c:	003fa906 	br	8800ef4 <__ieee754_pow+0x9c>
 8801050:	009ffc34 	movhi	r2,32752
 8801054:	90800326 	beq	r18,r2,8801064 <__ieee754_pow+0x20c>
 8801058:	90000226 	beq	r18,zero,8801064 <__ieee754_pow+0x20c>
 880105c:	008ffc34 	movhi	r2,16368
 8801060:	90bfe91e 	bne	r18,r2,8801008 <__ieee754_pow+0x1b0>
 8801064:	b0026316 	blt	r22,zero,88019f4 <__ieee754_pow+0xb9c>
 8801068:	5011883a 	mov	r8,r10
 880106c:	5813883a 	mov	r9,r11
 8801070:	b8023126 	beq	r23,zero,8801938 <__ieee754_pow+0xae0>
 8801074:	da002815 	stw	r8,160(sp)
 8801078:	da402915 	stw	r9,164(sp)
 880107c:	003f9d06 	br	8800ef4 <__ieee754_pow+0x9c>
 8801080:	0090d034 	movhi	r2,17216
 8801084:	10bfffc4 	addi	r2,r2,-1
 8801088:	1400270e 	bge	r2,r16,8801128 <__ieee754_pow+0x2d0>
 880108c:	07000084 	movi	fp,2
 8801090:	003fae06 	br	8800f4c <__ieee754_pow+0xf4>
 8801094:	00b00434 	movhi	r2,49168
 8801098:	9085883a 	add	r2,r18,r2
 880109c:	8884b03a 	or	r2,r17,r2
 88010a0:	103f9026 	beq	r2,zero,8800ee4 <__ieee754_pow+0x8c>
 88010a4:	008ffc34 	movhi	r2,16368
 88010a8:	10bfffc4 	addi	r2,r2,-1
 88010ac:	1482d00e 	bge	r2,r18,8801bf0 <__ieee754_pow+0xd98>
 88010b0:	b03f900e 	bge	r22,zero,8800ef4 <__ieee754_pow+0x9c>
 88010b4:	0005883a 	mov	r2,zero
 88010b8:	d8802815 	stw	r2,160(sp)
 88010bc:	d8802915 	stw	r2,164(sp)
 88010c0:	003f8c06 	br	8800ef4 <__ieee754_pow+0x9c>
 88010c4:	383f9e26 	beq	r7,zero,8800f40 <__ieee754_pow+0xe8>
 88010c8:	003f8206 	br	8800ed4 <__ieee754_pow+0x7c>
 88010cc:	00907834 	movhi	r2,16864
 88010d0:	1400290e 	bge	r2,r16,8801178 <__ieee754_pow+0x320>
 88010d4:	0090fc34 	movhi	r2,17392
 88010d8:	1402500e 	bge	r2,r16,8801a1c <__ieee754_pow+0xbc4>
 88010dc:	008ffc34 	movhi	r2,16368
 88010e0:	10bfffc4 	addi	r2,r2,-1
 88010e4:	14800b0e 	bge	r2,r18,8801114 <__ieee754_pow+0x2bc>
 88010e8:	05800b0e 	bge	zero,r22,8801118 <__ieee754_pow+0x2c0>
 88010ec:	00a20034 	movhi	r2,34816
 88010f0:	109d6704 	addi	r2,r2,30108
 88010f4:	00df8e34 	movhi	r3,32312
 88010f8:	18f90f04 	addi	r3,r3,-7108
 88010fc:	100d883a 	mov	r6,r2
 8801100:	180f883a 	mov	r7,r3
 8801104:	1009883a 	mov	r4,r2
 8801108:	180b883a 	mov	r5,r3
 880110c:	880308c0 	call	880308c <__muldf3>
 8801110:	003fcc06 	br	8801044 <__ieee754_pow+0x1ec>
 8801114:	b03ff516 	blt	r22,zero,88010ec <__ieee754_pow+0x294>
 8801118:	0007883a 	mov	r3,zero
 880111c:	d8c02815 	stw	r3,160(sp)
 8801120:	d8c02915 	stw	r3,164(sp)
 8801124:	003f7306 	br	8800ef4 <__ieee754_pow+0x9c>
 8801128:	008ffc34 	movhi	r2,16368
 880112c:	10bfffc4 	addi	r2,r2,-1
 8801130:	143f850e 	bge	r2,r16,8800f48 <__ieee754_pow+0xf0>
 8801134:	8005d53a 	srai	r2,r16,20
 8801138:	01400504 	movi	r5,20
 880113c:	10ff0044 	addi	r3,r2,-1023
 8801140:	28c3e10e 	bge	r5,r3,88020c8 <__ieee754_pow+0x1270>
 8801144:	00800d04 	movi	r2,52
 8801148:	10c5c83a 	sub	r2,r2,r3
 880114c:	3886d83a 	srl	r3,r7,r2
 8801150:	1884983a 	sll	r2,r3,r2
 8801154:	38bf7c1e 	bne	r7,r2,8800f48 <__ieee754_pow+0xf0>
 8801158:	18c0004c 	andi	r3,r3,1
 880115c:	00800084 	movi	r2,2
 8801160:	10f9c83a 	sub	fp,r2,r3
 8801164:	003f7906 	br	8800f4c <__ieee754_pow+0xf4>
 8801168:	b0038516 	blt	r22,zero,8801f80 <__ieee754_pow+0x1128>
 880116c:	dd002815 	stw	r20,160(sp)
 8801170:	dd402915 	stw	r21,164(sp)
 8801174:	003f5f06 	br	8800ef4 <__ieee754_pow+0x9c>
 8801178:	00800434 	movhi	r2,16
 880117c:	10bfffc4 	addi	r2,r2,-1
 8801180:	1482900e 	bge	r2,r18,8801bc4 <__ieee754_pow+0xd6c>
 8801184:	000b883a 	mov	r5,zero
 8801188:	9005d53a 	srai	r2,r18,20
 880118c:	00c00434 	movhi	r3,16
 8801190:	18ffffc4 	addi	r3,r3,-1
 8801194:	90c8703a 	and	r4,r18,r3
 8801198:	2887883a 	add	r3,r5,r2
 880119c:	18bf0044 	addi	r2,r3,-1023
 88011a0:	d8800015 	stw	r2,0(sp)
 88011a4:	00800134 	movhi	r2,4
 88011a8:	10a62384 	addi	r2,r2,-26482
 88011ac:	250ffc34 	orhi	r20,r4,16368
 88011b0:	1101ee0e 	bge	r2,r4,880196c <__ieee754_pow+0xb14>
 88011b4:	00800334 	movhi	r2,12
 88011b8:	10ad9e44 	addi	r2,r2,-18823
 88011bc:	1101e716 	blt	r2,r4,880195c <__ieee754_pow+0xb04>
 88011c0:	01000044 	movi	r4,1
 88011c4:	04000334 	movhi	r16,12
 88011c8:	200890fa 	slli	r4,r4,3
 88011cc:	da800115 	stw	r10,4(sp)
 88011d0:	dd000215 	stw	r20,8(sp)
 88011d4:	d9002c15 	stw	r4,176(sp)
 88011d8:	d9402c17 	ldw	r5,176(sp)
 88011dc:	01022074 	movhi	r4,2177
 88011e0:	21222604 	addi	r4,r4,-30568
 88011e4:	a02bd07a 	srai	r21,r20,1
 88011e8:	2909883a 	add	r4,r5,r4
 88011ec:	25800017 	ldw	r22,0(r4)
 88011f0:	25c00117 	ldw	r23,4(r4)
 88011f4:	a00b883a 	mov	r5,r20
 88011f8:	5009883a 	mov	r4,r10
 88011fc:	b00d883a 	mov	r6,r22
 8801200:	b80f883a 	mov	r7,r23
 8801204:	8802f980 	call	8802f98 <__subdf3>
 8801208:	d9000117 	ldw	r4,4(sp)
 880120c:	a00b883a 	mov	r5,r20
 8801210:	b00d883a 	mov	r6,r22
 8801214:	b80f883a 	mov	r7,r23
 8801218:	1025883a 	mov	r18,r2
 880121c:	1827883a 	mov	r19,r3
 8801220:	88030180 	call	8803018 <__adddf3>
 8801224:	0011883a 	mov	r8,zero
 8801228:	024ffc34 	movhi	r9,16368
 880122c:	480b883a 	mov	r5,r9
 8801230:	4009883a 	mov	r4,r8
 8801234:	180f883a 	mov	r7,r3
 8801238:	100d883a 	mov	r6,r2
 880123c:	88034500 	call	8803450 <__divdf3>
 8801240:	d8c02e15 	stw	r3,184(sp)
 8801244:	d8800f15 	stw	r2,60(sp)
 8801248:	d8802d15 	stw	r2,180(sp)
 880124c:	d8802e17 	ldw	r2,184(sp)
 8801250:	d9800f17 	ldw	r6,60(sp)
 8801254:	9009883a 	mov	r4,r18
 8801258:	980b883a 	mov	r5,r19
 880125c:	100f883a 	mov	r7,r2
 8801260:	dc800b15 	stw	r18,44(sp)
 8801264:	dcc00c15 	stw	r19,48(sp)
 8801268:	d8801015 	stw	r2,64(sp)
 880126c:	880308c0 	call	880308c <__muldf3>
 8801270:	d8c03015 	stw	r3,192(sp)
 8801274:	d9003017 	ldw	r4,192(sp)
 8801278:	d8802f15 	stw	r2,188(sp)
 880127c:	d8800315 	stw	r2,12(sp)
 8801280:	ad480034 	orhi	r21,r21,8192
 8801284:	0005883a 	mov	r2,zero
 8801288:	ac2b883a 	add	r21,r21,r16
 880128c:	000b883a 	mov	r5,zero
 8801290:	1021883a 	mov	r16,r2
 8801294:	2005883a 	mov	r2,r4
 8801298:	800d883a 	mov	r6,r16
 880129c:	a80f883a 	mov	r7,r21
 88012a0:	d9000415 	stw	r4,16(sp)
 88012a4:	d9002715 	stw	r4,156(sp)
 88012a8:	d9402615 	stw	r5,152(sp)
 88012ac:	d9401615 	stw	r5,88(sp)
 88012b0:	d9001715 	stw	r4,92(sp)
 88012b4:	100b883a 	mov	r5,r2
 88012b8:	0009883a 	mov	r4,zero
 88012bc:	880308c0 	call	880308c <__muldf3>
 88012c0:	d9000b17 	ldw	r4,44(sp)
 88012c4:	980b883a 	mov	r5,r19
 88012c8:	180f883a 	mov	r7,r3
 88012cc:	100d883a 	mov	r6,r2
 88012d0:	8802f980 	call	8802f98 <__subdf3>
 88012d4:	8009883a 	mov	r4,r16
 88012d8:	a80b883a 	mov	r5,r21
 88012dc:	b80f883a 	mov	r7,r23
 88012e0:	b00d883a 	mov	r6,r22
 88012e4:	1021883a 	mov	r16,r2
 88012e8:	1823883a 	mov	r17,r3
 88012ec:	8802f980 	call	8802f98 <__subdf3>
 88012f0:	d9000117 	ldw	r4,4(sp)
 88012f4:	a00b883a 	mov	r5,r20
 88012f8:	180f883a 	mov	r7,r3
 88012fc:	100d883a 	mov	r6,r2
 8801300:	8802f980 	call	8802f98 <__subdf3>
 8801304:	d9001617 	ldw	r4,88(sp)
 8801308:	d9402717 	ldw	r5,156(sp)
 880130c:	180f883a 	mov	r7,r3
 8801310:	100d883a 	mov	r6,r2
 8801314:	880308c0 	call	880308c <__muldf3>
 8801318:	180f883a 	mov	r7,r3
 880131c:	880b883a 	mov	r5,r17
 8801320:	8009883a 	mov	r4,r16
 8801324:	100d883a 	mov	r6,r2
 8801328:	8802f980 	call	8802f98 <__subdf3>
 880132c:	d9000f17 	ldw	r4,60(sp)
 8801330:	d9402e17 	ldw	r5,184(sp)
 8801334:	180f883a 	mov	r7,r3
 8801338:	100d883a 	mov	r6,r2
 880133c:	880308c0 	call	880308c <__muldf3>
 8801340:	d9000317 	ldw	r4,12(sp)
 8801344:	d9403017 	ldw	r5,192(sp)
 8801348:	d8803115 	stw	r2,196(sp)
 880134c:	200d883a 	mov	r6,r4
 8801350:	280f883a 	mov	r7,r5
 8801354:	d8c03215 	stw	r3,200(sp)
 8801358:	880308c0 	call	880308c <__muldf3>
 880135c:	1009883a 	mov	r4,r2
 8801360:	180b883a 	mov	r5,r3
 8801364:	100d883a 	mov	r6,r2
 8801368:	180f883a 	mov	r7,r3
 880136c:	1021883a 	mov	r16,r2
 8801370:	1823883a 	mov	r17,r3
 8801374:	880308c0 	call	880308c <__muldf3>
 8801378:	02129174 	movhi	r8,19013
 880137c:	4213bbc4 	addi	r8,r8,20207
 8801380:	024ff2b4 	movhi	r9,16330
 8801384:	4a5f8a04 	addi	r9,r9,32296
 8801388:	480f883a 	mov	r7,r9
 880138c:	8009883a 	mov	r4,r16
 8801390:	880b883a 	mov	r5,r17
 8801394:	400d883a 	mov	r6,r8
 8801398:	1029883a 	mov	r20,r2
 880139c:	182b883a 	mov	r21,r3
 88013a0:	880308c0 	call	880308c <__muldf3>
 88013a4:	0224f2b4 	movhi	r8,37834
 88013a8:	4236d944 	addi	r8,r8,-9371
 88013ac:	024ff3b4 	movhi	r9,16334
 88013b0:	4a619284 	addi	r9,r9,-31158
 88013b4:	480f883a 	mov	r7,r9
 88013b8:	400d883a 	mov	r6,r8
 88013bc:	180b883a 	mov	r5,r3
 88013c0:	1009883a 	mov	r4,r2
 88013c4:	88030180 	call	8803018 <__adddf3>
 88013c8:	180f883a 	mov	r7,r3
 88013cc:	8009883a 	mov	r4,r16
 88013d0:	880b883a 	mov	r5,r17
 88013d4:	100d883a 	mov	r6,r2
 88013d8:	880308c0 	call	880308c <__muldf3>
 88013dc:	022a4774 	movhi	r8,43293
 88013e0:	42104044 	addi	r8,r8,16641
 88013e4:	024ff474 	movhi	r9,16337
 88013e8:	4a5d1804 	addi	r9,r9,29792
 88013ec:	480f883a 	mov	r7,r9
 88013f0:	400d883a 	mov	r6,r8
 88013f4:	180b883a 	mov	r5,r3
 88013f8:	1009883a 	mov	r4,r2
 88013fc:	88030180 	call	8803018 <__adddf3>
 8801400:	180f883a 	mov	r7,r3
 8801404:	8009883a 	mov	r4,r16
 8801408:	880b883a 	mov	r5,r17
 880140c:	100d883a 	mov	r6,r2
 8801410:	880308c0 	call	880308c <__muldf3>
 8801414:	021463f4 	movhi	r8,20879
 8801418:	42099344 	addi	r8,r8,9805
 880141c:	024ff574 	movhi	r9,16341
 8801420:	4a555544 	addi	r9,r9,21845
 8801424:	480f883a 	mov	r7,r9
 8801428:	400d883a 	mov	r6,r8
 880142c:	180b883a 	mov	r5,r3
 8801430:	1009883a 	mov	r4,r2
 8801434:	88030180 	call	8803018 <__adddf3>
 8801438:	180f883a 	mov	r7,r3
 880143c:	8009883a 	mov	r4,r16
 8801440:	880b883a 	mov	r5,r17
 8801444:	100d883a 	mov	r6,r2
 8801448:	880308c0 	call	880308c <__muldf3>
 880144c:	0236dc34 	movhi	r8,56176
 8801450:	422affc4 	addi	r8,r8,-21505
 8801454:	024ff6f4 	movhi	r9,16347
 8801458:	4a5b6d84 	addi	r9,r9,28086
 880145c:	480f883a 	mov	r7,r9
 8801460:	400d883a 	mov	r6,r8
 8801464:	180b883a 	mov	r5,r3
 8801468:	1009883a 	mov	r4,r2
 880146c:	88030180 	call	8803018 <__adddf3>
 8801470:	180f883a 	mov	r7,r3
 8801474:	8009883a 	mov	r4,r16
 8801478:	880b883a 	mov	r5,r17
 880147c:	100d883a 	mov	r6,r2
 8801480:	880308c0 	call	880308c <__muldf3>
 8801484:	020cccf4 	movhi	r8,13107
 8801488:	420cc0c4 	addi	r8,r8,13059
 880148c:	024ff8f4 	movhi	r9,16355
 8801490:	4a4cccc4 	addi	r9,r9,13107
 8801494:	480f883a 	mov	r7,r9
 8801498:	400d883a 	mov	r6,r8
 880149c:	180b883a 	mov	r5,r3
 88014a0:	1009883a 	mov	r4,r2
 88014a4:	88030180 	call	8803018 <__adddf3>
 88014a8:	180f883a 	mov	r7,r3
 88014ac:	a80b883a 	mov	r5,r21
 88014b0:	a009883a 	mov	r4,r20
 88014b4:	100d883a 	mov	r6,r2
 88014b8:	880308c0 	call	880308c <__muldf3>
 88014bc:	d9000317 	ldw	r4,12(sp)
 88014c0:	d9403017 	ldw	r5,192(sp)
 88014c4:	d9801617 	ldw	r6,88(sp)
 88014c8:	d9c02717 	ldw	r7,156(sp)
 88014cc:	1021883a 	mov	r16,r2
 88014d0:	1823883a 	mov	r17,r3
 88014d4:	88030180 	call	8803018 <__adddf3>
 88014d8:	d9003117 	ldw	r4,196(sp)
 88014dc:	d9403217 	ldw	r5,200(sp)
 88014e0:	180f883a 	mov	r7,r3
 88014e4:	100d883a 	mov	r6,r2
 88014e8:	d9001415 	stw	r4,80(sp)
 88014ec:	d9401515 	stw	r5,84(sp)
 88014f0:	880308c0 	call	880308c <__muldf3>
 88014f4:	180f883a 	mov	r7,r3
 88014f8:	8009883a 	mov	r4,r16
 88014fc:	880b883a 	mov	r5,r17
 8801500:	100d883a 	mov	r6,r2
 8801504:	88030180 	call	8803018 <__adddf3>
 8801508:	d9001617 	ldw	r4,88(sp)
 880150c:	d9402717 	ldw	r5,156(sp)
 8801510:	d8803315 	stw	r2,204(sp)
 8801514:	200d883a 	mov	r6,r4
 8801518:	280f883a 	mov	r7,r5
 880151c:	d8c03415 	stw	r3,208(sp)
 8801520:	880308c0 	call	880308c <__muldf3>
 8801524:	182f883a 	mov	r23,r3
 8801528:	05500234 	movhi	r21,16392
 880152c:	0029883a 	mov	r20,zero
 8801530:	b80b883a 	mov	r5,r23
 8801534:	a00d883a 	mov	r6,r20
 8801538:	a80f883a 	mov	r7,r21
 880153c:	1009883a 	mov	r4,r2
 8801540:	d8800715 	stw	r2,28(sp)
 8801544:	d8c00815 	stw	r3,32(sp)
 8801548:	88030180 	call	8803018 <__adddf3>
 880154c:	d9003317 	ldw	r4,204(sp)
 8801550:	d9403417 	ldw	r5,208(sp)
 8801554:	180f883a 	mov	r7,r3
 8801558:	100d883a 	mov	r6,r2
 880155c:	d9000515 	stw	r4,20(sp)
 8801560:	d9400615 	stw	r5,24(sp)
 8801564:	88030180 	call	8803018 <__adddf3>
 8801568:	d9001617 	ldw	r4,88(sp)
 880156c:	d9402717 	ldw	r5,156(sp)
 8801570:	0025883a 	mov	r18,zero
 8801574:	900d883a 	mov	r6,r18
 8801578:	180f883a 	mov	r7,r3
 880157c:	1823883a 	mov	r17,r3
 8801580:	880308c0 	call	880308c <__muldf3>
 8801584:	d9001417 	ldw	r4,80(sp)
 8801588:	d9403217 	ldw	r5,200(sp)
 880158c:	880f883a 	mov	r7,r17
 8801590:	900d883a 	mov	r6,r18
 8801594:	d8803515 	stw	r2,212(sp)
 8801598:	d8c03615 	stw	r3,216(sp)
 880159c:	880308c0 	call	880308c <__muldf3>
 88015a0:	a80f883a 	mov	r7,r21
 88015a4:	880b883a 	mov	r5,r17
 88015a8:	000d883a 	mov	r6,zero
 88015ac:	9009883a 	mov	r4,r18
 88015b0:	1021883a 	mov	r16,r2
 88015b4:	1823883a 	mov	r17,r3
 88015b8:	8802f980 	call	8802f98 <__subdf3>
 88015bc:	d9800717 	ldw	r6,28(sp)
 88015c0:	b80f883a 	mov	r7,r23
 88015c4:	180b883a 	mov	r5,r3
 88015c8:	1009883a 	mov	r4,r2
 88015cc:	8802f980 	call	8802f98 <__subdf3>
 88015d0:	d9000517 	ldw	r4,20(sp)
 88015d4:	d9403417 	ldw	r5,208(sp)
 88015d8:	180f883a 	mov	r7,r3
 88015dc:	100d883a 	mov	r6,r2
 88015e0:	8802f980 	call	8802f98 <__subdf3>
 88015e4:	d9000317 	ldw	r4,12(sp)
 88015e8:	d9403017 	ldw	r5,192(sp)
 88015ec:	180f883a 	mov	r7,r3
 88015f0:	100d883a 	mov	r6,r2
 88015f4:	880308c0 	call	880308c <__muldf3>
 88015f8:	180f883a 	mov	r7,r3
 88015fc:	880b883a 	mov	r5,r17
 8801600:	8009883a 	mov	r4,r16
 8801604:	100d883a 	mov	r6,r2
 8801608:	88030180 	call	8803018 <__adddf3>
 880160c:	102d883a 	mov	r22,r2
 8801610:	d9003617 	ldw	r4,216(sp)
 8801614:	d8803517 	ldw	r2,212(sp)
 8801618:	d9403617 	ldw	r5,216(sp)
 880161c:	182f883a 	mov	r23,r3
 8801620:	b00d883a 	mov	r6,r22
 8801624:	b80f883a 	mov	r7,r23
 8801628:	d9000a15 	stw	r4,40(sp)
 880162c:	1009883a 	mov	r4,r2
 8801630:	054ffbf4 	movhi	r21,16367
 8801634:	ad71c244 	addi	r21,r21,-14583
 8801638:	dd800d15 	stw	r22,52(sp)
 880163c:	ddc00e15 	stw	r23,56(sp)
 8801640:	05380034 	movhi	r20,57344
 8801644:	d8800915 	stw	r2,36(sp)
 8801648:	88030180 	call	8803018 <__adddf3>
 880164c:	180b883a 	mov	r5,r3
 8801650:	a00d883a 	mov	r6,r20
 8801654:	a80f883a 	mov	r7,r21
 8801658:	9009883a 	mov	r4,r18
 880165c:	1823883a 	mov	r17,r3
 8801660:	880308c0 	call	880308c <__muldf3>
 8801664:	020516f4 	movhi	r8,5211
 8801668:	42007d44 	addi	r8,r8,501
 880166c:	026f8fb4 	movhi	r9,48702
 8801670:	4a4bf804 	addi	r9,r9,12256
 8801674:	480f883a 	mov	r7,r9
 8801678:	400d883a 	mov	r6,r8
 880167c:	880b883a 	mov	r5,r17
 8801680:	9009883a 	mov	r4,r18
 8801684:	d8803715 	stw	r2,220(sp)
 8801688:	d8c03815 	stw	r3,224(sp)
 880168c:	880308c0 	call	880308c <__muldf3>
 8801690:	d9800917 	ldw	r6,36(sp)
 8801694:	d9c03617 	ldw	r7,216(sp)
 8801698:	880b883a 	mov	r5,r17
 880169c:	9009883a 	mov	r4,r18
 88016a0:	1021883a 	mov	r16,r2
 88016a4:	1823883a 	mov	r17,r3
 88016a8:	8802f980 	call	8802f98 <__subdf3>
 88016ac:	d9000d17 	ldw	r4,52(sp)
 88016b0:	b80b883a 	mov	r5,r23
 88016b4:	180f883a 	mov	r7,r3
 88016b8:	100d883a 	mov	r6,r2
 88016bc:	8802f980 	call	8802f98 <__subdf3>
 88016c0:	180b883a 	mov	r5,r3
 88016c4:	a80f883a 	mov	r7,r21
 88016c8:	01b70eb4 	movhi	r6,56378
 88016cc:	3180ff44 	addi	r6,r6,1021
 88016d0:	1009883a 	mov	r4,r2
 88016d4:	880308c0 	call	880308c <__muldf3>
 88016d8:	180f883a 	mov	r7,r3
 88016dc:	880b883a 	mov	r5,r17
 88016e0:	8009883a 	mov	r4,r16
 88016e4:	100d883a 	mov	r6,r2
 88016e8:	88030180 	call	8803018 <__adddf3>
 88016ec:	d9402c17 	ldw	r5,176(sp)
 88016f0:	01022074 	movhi	r4,2177
 88016f4:	21222a04 	addi	r4,r4,-30552
 88016f8:	2909883a 	add	r4,r5,r4
 88016fc:	22400117 	ldw	r9,4(r4)
 8801700:	22000017 	ldw	r8,0(r4)
 8801704:	180b883a 	mov	r5,r3
 8801708:	480f883a 	mov	r7,r9
 880170c:	400d883a 	mov	r6,r8
 8801710:	1009883a 	mov	r4,r2
 8801714:	88030180 	call	8803018 <__adddf3>
 8801718:	d9000017 	ldw	r4,0(sp)
 880171c:	182f883a 	mov	r23,r3
 8801720:	102d883a 	mov	r22,r2
 8801724:	88039500 	call	8803950 <__floatsidf>
 8801728:	d9402c17 	ldw	r5,176(sp)
 880172c:	01022074 	movhi	r4,2177
 8801730:	21222e04 	addi	r4,r4,-30536
 8801734:	b00d883a 	mov	r6,r22
 8801738:	2911883a 	add	r8,r5,r4
 880173c:	d9003717 	ldw	r4,220(sp)
 8801740:	d9403817 	ldw	r5,224(sp)
 8801744:	45000017 	ldw	r20,0(r8)
 8801748:	d9002315 	stw	r4,140(sp)
 880174c:	d9003817 	ldw	r4,224(sp)
 8801750:	45400117 	ldw	r21,4(r8)
 8801754:	b80f883a 	mov	r7,r23
 8801758:	d9002415 	stw	r4,144(sp)
 880175c:	d9002317 	ldw	r4,140(sp)
 8801760:	1021883a 	mov	r16,r2
 8801764:	1823883a 	mov	r17,r3
 8801768:	dd802115 	stw	r22,132(sp)
 880176c:	ddc02215 	stw	r23,136(sp)
 8801770:	88030180 	call	8803018 <__adddf3>
 8801774:	180b883a 	mov	r5,r3
 8801778:	1009883a 	mov	r4,r2
 880177c:	a00d883a 	mov	r6,r20
 8801780:	a80f883a 	mov	r7,r21
 8801784:	88030180 	call	8803018 <__adddf3>
 8801788:	180f883a 	mov	r7,r3
 880178c:	8009883a 	mov	r4,r16
 8801790:	880b883a 	mov	r5,r17
 8801794:	100d883a 	mov	r6,r2
 8801798:	88030180 	call	8803018 <__adddf3>
 880179c:	180b883a 	mov	r5,r3
 88017a0:	0009883a 	mov	r4,zero
 88017a4:	800d883a 	mov	r6,r16
 88017a8:	880f883a 	mov	r7,r17
 88017ac:	d9001b15 	stw	r4,108(sp)
 88017b0:	d8c01c15 	stw	r3,112(sp)
 88017b4:	8802f980 	call	8802f98 <__subdf3>
 88017b8:	180b883a 	mov	r5,r3
 88017bc:	a80f883a 	mov	r7,r21
 88017c0:	1009883a 	mov	r4,r2
 88017c4:	a00d883a 	mov	r6,r20
 88017c8:	8802f980 	call	8802f98 <__subdf3>
 88017cc:	d9802317 	ldw	r6,140(sp)
 88017d0:	d9c03817 	ldw	r7,224(sp)
 88017d4:	180b883a 	mov	r5,r3
 88017d8:	1009883a 	mov	r4,r2
 88017dc:	8802f980 	call	8802f98 <__subdf3>
 88017e0:	d9002117 	ldw	r4,132(sp)
 88017e4:	1011883a 	mov	r8,r2
 88017e8:	1813883a 	mov	r9,r3
 88017ec:	b80b883a 	mov	r5,r23
 88017f0:	480f883a 	mov	r7,r9
 88017f4:	400d883a 	mov	r6,r8
 88017f8:	8802f980 	call	8802f98 <__subdf3>
 88017fc:	1823883a 	mov	r17,r3
 8801800:	d8c02517 	ldw	r3,148(sp)
 8801804:	1021883a 	mov	r16,r2
 8801808:	e0bfffc4 	addi	r2,fp,-1
 880180c:	1884b03a 	or	r2,r3,r2
 8801810:	1000731e 	bne	r2,zero,88019e0 <__ieee754_pow+0xb88>
 8801814:	0009883a 	mov	r4,zero
 8801818:	016ffc34 	movhi	r5,49136
 880181c:	d9001915 	stw	r4,100(sp)
 8801820:	d9401a15 	stw	r5,104(sp)
 8801824:	d9402917 	ldw	r5,164(sp)
 8801828:	d9002817 	ldw	r4,160(sp)
 880182c:	0029883a 	mov	r20,zero
 8801830:	a00d883a 	mov	r6,r20
 8801834:	280f883a 	mov	r7,r5
 8801838:	2827883a 	mov	r19,r5
 880183c:	8802f980 	call	8802f98 <__subdf3>
 8801840:	d9001b17 	ldw	r4,108(sp)
 8801844:	d9401c17 	ldw	r5,112(sp)
 8801848:	180f883a 	mov	r7,r3
 880184c:	100d883a 	mov	r6,r2
 8801850:	880308c0 	call	880308c <__muldf3>
 8801854:	d9c02917 	ldw	r7,164(sp)
 8801858:	d9802817 	ldw	r6,160(sp)
 880185c:	880b883a 	mov	r5,r17
 8801860:	8009883a 	mov	r4,r16
 8801864:	1823883a 	mov	r17,r3
 8801868:	1021883a 	mov	r16,r2
 880186c:	880308c0 	call	880308c <__muldf3>
 8801870:	180f883a 	mov	r7,r3
 8801874:	880b883a 	mov	r5,r17
 8801878:	8009883a 	mov	r4,r16
 880187c:	100d883a 	mov	r6,r2
 8801880:	88030180 	call	8803018 <__adddf3>
 8801884:	d9401c17 	ldw	r5,112(sp)
 8801888:	d9001b17 	ldw	r4,108(sp)
 880188c:	a00d883a 	mov	r6,r20
 8801890:	980f883a 	mov	r7,r19
 8801894:	1029883a 	mov	r20,r2
 8801898:	182b883a 	mov	r21,r3
 880189c:	880308c0 	call	880308c <__muldf3>
 88018a0:	1025883a 	mov	r18,r2
 88018a4:	1827883a 	mov	r19,r3
 88018a8:	a009883a 	mov	r4,r20
 88018ac:	a80b883a 	mov	r5,r21
 88018b0:	900d883a 	mov	r6,r18
 88018b4:	980f883a 	mov	r7,r19
 88018b8:	dd001d15 	stw	r20,116(sp)
 88018bc:	dc801f15 	stw	r18,124(sp)
 88018c0:	dd401e15 	stw	r21,120(sp)
 88018c4:	dcc02015 	stw	r19,128(sp)
 88018c8:	88030180 	call	8803018 <__adddf3>
 88018cc:	1823883a 	mov	r17,r3
 88018d0:	01102434 	movhi	r4,16528
 88018d4:	213fffc4 	addi	r4,r4,-1
 88018d8:	1021883a 	mov	r16,r2
 88018dc:	182f883a 	mov	r23,r3
 88018e0:	dc401815 	stw	r17,96(sp)
 88018e4:	100b883a 	mov	r5,r2
 88018e8:	20c02c0e 	bge	r4,r3,880199c <__ieee754_pow+0xb44>
 88018ec:	00afdc34 	movhi	r2,49008
 88018f0:	1885883a 	add	r2,r3,r2
 88018f4:	2884b03a 	or	r2,r5,r2
 88018f8:	1001a626 	beq	r2,zero,8801f94 <__ieee754_pow+0x113c>
 88018fc:	04220034 	movhi	r16,34816
 8801900:	841d6704 	addi	r16,r16,30108
 8801904:	045f8e34 	movhi	r17,32312
 8801908:	8c790f04 	addi	r17,r17,-7108
 880190c:	d9401a17 	ldw	r5,104(sp)
 8801910:	d9001917 	ldw	r4,100(sp)
 8801914:	800d883a 	mov	r6,r16
 8801918:	880f883a 	mov	r7,r17
 880191c:	880308c0 	call	880308c <__muldf3>
 8801920:	180b883a 	mov	r5,r3
 8801924:	800d883a 	mov	r6,r16
 8801928:	880f883a 	mov	r7,r17
 880192c:	1009883a 	mov	r4,r2
 8801930:	880308c0 	call	880308c <__muldf3>
 8801934:	003dc306 	br	8801044 <__ieee754_pow+0x1ec>
 8801938:	00b00434 	movhi	r2,49168
 880193c:	9085883a 	add	r2,r18,r2
 8801940:	e084b03a 	or	r2,fp,r2
 8801944:	1000af1e 	bne	r2,zero,8801c04 <__ieee754_pow+0xdac>
 8801948:	480f883a 	mov	r7,r9
 880194c:	4009883a 	mov	r4,r8
 8801950:	480b883a 	mov	r5,r9
 8801954:	400d883a 	mov	r6,r8
 8801958:	003db406 	br	880102c <__ieee754_pow+0x1d4>
 880195c:	00bffc34 	movhi	r2,65520
 8801960:	18ff0084 	addi	r3,r3,-1022
 8801964:	a0a9883a 	add	r20,r20,r2
 8801968:	d8c00015 	stw	r3,0(sp)
 880196c:	0009883a 	mov	r4,zero
 8801970:	04000234 	movhi	r16,8
 8801974:	003e1406 	br	88011c8 <__ieee754_pow+0x370>
 8801978:	a80f883a 	mov	r7,r21
 880197c:	a009883a 	mov	r4,r20
 8801980:	a80b883a 	mov	r5,r21
 8801984:	a00d883a 	mov	r6,r20
 8801988:	880308c0 	call	880308c <__muldf3>
 880198c:	180b883a 	mov	r5,r3
 8801990:	d8802815 	stw	r2,160(sp)
 8801994:	d9402915 	stw	r5,164(sp)
 8801998:	003d5606 	br	8800ef4 <__ieee754_pow+0x9c>
 880199c:	d9001817 	ldw	r4,96(sp)
 88019a0:	00a00034 	movhi	r2,32768
 88019a4:	10bfffc4 	addi	r2,r2,-1
 88019a8:	00d02474 	movhi	r3,16529
 88019ac:	18f2ffc4 	addi	r3,r3,-13313
 88019b0:	20b8703a 	and	fp,r4,r2
 88019b4:	1f009d0e 	bge	r3,fp,8801c2c <__ieee754_pow+0xdd4>
 88019b8:	008fdbf4 	movhi	r2,16239
 88019bc:	108d0004 	addi	r2,r2,13312
 88019c0:	2085883a 	add	r2,r4,r2
 88019c4:	1144b03a 	or	r2,r2,r5
 88019c8:	1001c626 	beq	r2,zero,88020e4 <__ieee754_pow+0x128c>
 88019cc:	0430be74 	movhi	r16,49913
 88019d0:	843cd644 	addi	r16,r16,-3239
 88019d4:	04406974 	movhi	r17,421
 88019d8:	8c5b87c4 	addi	r17,r17,28191
 88019dc:	003fcb06 	br	880190c <__ieee754_pow+0xab4>
 88019e0:	0005883a 	mov	r2,zero
 88019e4:	00cffc34 	movhi	r3,16368
 88019e8:	d8801915 	stw	r2,100(sp)
 88019ec:	d8c01a15 	stw	r3,104(sp)
 88019f0:	003f8c06 	br	8801824 <__ieee754_pow+0x9cc>
 88019f4:	0005883a 	mov	r2,zero
 88019f8:	00cffc34 	movhi	r3,16368
 88019fc:	180b883a 	mov	r5,r3
 8801a00:	580f883a 	mov	r7,r11
 8801a04:	1009883a 	mov	r4,r2
 8801a08:	500d883a 	mov	r6,r10
 8801a0c:	88034500 	call	8803450 <__divdf3>
 8801a10:	1011883a 	mov	r8,r2
 8801a14:	1813883a 	mov	r9,r3
 8801a18:	003d9506 	br	8801070 <__ieee754_pow+0x218>
 8801a1c:	008ffc34 	movhi	r2,16368
 8801a20:	10bfff84 	addi	r2,r2,-2
 8801a24:	14bdbb0e 	bge	r2,r18,8801114 <__ieee754_pow+0x2bc>
 8801a28:	008ffc34 	movhi	r2,16368
 8801a2c:	14bdae16 	blt	r2,r18,88010e8 <__ieee754_pow+0x290>
 8801a30:	580b883a 	mov	r5,r11
 8801a34:	5009883a 	mov	r4,r10
 8801a38:	000d883a 	mov	r6,zero
 8801a3c:	100f883a 	mov	r7,r2
 8801a40:	8802f980 	call	8802f98 <__subdf3>
 8801a44:	1021883a 	mov	r16,r2
 8801a48:	1823883a 	mov	r17,r3
 8801a4c:	00980034 	movhi	r2,24576
 8801a50:	00cffdf4 	movhi	r3,16375
 8801a54:	18c551c4 	addi	r3,r3,5447
 8801a58:	8009883a 	mov	r4,r16
 8801a5c:	880b883a 	mov	r5,r17
 8801a60:	180f883a 	mov	r7,r3
 8801a64:	100d883a 	mov	r6,r2
 8801a68:	880308c0 	call	880308c <__muldf3>
 8801a6c:	023e17b4 	movhi	r8,63582
 8801a70:	4237d104 	addi	r8,r8,-8380
 8801a74:	024f9574 	movhi	r9,15957
 8801a78:	4a6b82c4 	addi	r9,r9,-20981
 8801a7c:	480f883a 	mov	r7,r9
 8801a80:	400d883a 	mov	r6,r8
 8801a84:	8009883a 	mov	r4,r16
 8801a88:	880b883a 	mov	r5,r17
 8801a8c:	102d883a 	mov	r22,r2
 8801a90:	182f883a 	mov	r23,r3
 8801a94:	880308c0 	call	880308c <__muldf3>
 8801a98:	8009883a 	mov	r4,r16
 8801a9c:	880b883a 	mov	r5,r17
 8801aa0:	800d883a 	mov	r6,r16
 8801aa4:	880f883a 	mov	r7,r17
 8801aa8:	d8802a15 	stw	r2,168(sp)
 8801aac:	d8c02b15 	stw	r3,172(sp)
 8801ab0:	880308c0 	call	880308c <__muldf3>
 8801ab4:	0011883a 	mov	r8,zero
 8801ab8:	026ff434 	movhi	r9,49104
 8801abc:	480f883a 	mov	r7,r9
 8801ac0:	8009883a 	mov	r4,r16
 8801ac4:	880b883a 	mov	r5,r17
 8801ac8:	400d883a 	mov	r6,r8
 8801acc:	1029883a 	mov	r20,r2
 8801ad0:	182b883a 	mov	r21,r3
 8801ad4:	880308c0 	call	880308c <__muldf3>
 8801ad8:	02155574 	movhi	r8,21845
 8801adc:	42155544 	addi	r8,r8,21845
 8801ae0:	024ff574 	movhi	r9,16341
 8801ae4:	4a555544 	addi	r9,r9,21845
 8801ae8:	480f883a 	mov	r7,r9
 8801aec:	400d883a 	mov	r6,r8
 8801af0:	180b883a 	mov	r5,r3
 8801af4:	1009883a 	mov	r4,r2
 8801af8:	88030180 	call	8803018 <__adddf3>
 8801afc:	180f883a 	mov	r7,r3
 8801b00:	8009883a 	mov	r4,r16
 8801b04:	880b883a 	mov	r5,r17
 8801b08:	100d883a 	mov	r6,r2
 8801b0c:	880308c0 	call	880308c <__muldf3>
 8801b10:	0011883a 	mov	r8,zero
 8801b14:	024ff834 	movhi	r9,16352
 8801b18:	480b883a 	mov	r5,r9
 8801b1c:	4009883a 	mov	r4,r8
 8801b20:	180f883a 	mov	r7,r3
 8801b24:	100d883a 	mov	r6,r2
 8801b28:	8802f980 	call	8802f98 <__subdf3>
 8801b2c:	180f883a 	mov	r7,r3
 8801b30:	a80b883a 	mov	r5,r21
 8801b34:	a009883a 	mov	r4,r20
 8801b38:	100d883a 	mov	r6,r2
 8801b3c:	880308c0 	call	880308c <__muldf3>
 8801b40:	02194b34 	movhi	r8,25900
 8801b44:	4220bf84 	addi	r8,r8,-32002
 8801b48:	026ffdf4 	movhi	r9,49143
 8801b4c:	4a4551c4 	addi	r9,r9,5447
 8801b50:	480f883a 	mov	r7,r9
 8801b54:	400d883a 	mov	r6,r8
 8801b58:	180b883a 	mov	r5,r3
 8801b5c:	1009883a 	mov	r4,r2
 8801b60:	880308c0 	call	880308c <__muldf3>
 8801b64:	d9402b17 	ldw	r5,172(sp)
 8801b68:	d9002a17 	ldw	r4,168(sp)
 8801b6c:	180f883a 	mov	r7,r3
 8801b70:	100d883a 	mov	r6,r2
 8801b74:	88030180 	call	8803018 <__adddf3>
 8801b78:	100d883a 	mov	r6,r2
 8801b7c:	b009883a 	mov	r4,r22
 8801b80:	b80b883a 	mov	r5,r23
 8801b84:	180f883a 	mov	r7,r3
 8801b88:	1021883a 	mov	r16,r2
 8801b8c:	1823883a 	mov	r17,r3
 8801b90:	88030180 	call	8803018 <__adddf3>
 8801b94:	180b883a 	mov	r5,r3
 8801b98:	0009883a 	mov	r4,zero
 8801b9c:	b00d883a 	mov	r6,r22
 8801ba0:	b80f883a 	mov	r7,r23
 8801ba4:	d9001b15 	stw	r4,108(sp)
 8801ba8:	d8c01c15 	stw	r3,112(sp)
 8801bac:	8802f980 	call	8802f98 <__subdf3>
 8801bb0:	1011883a 	mov	r8,r2
 8801bb4:	1813883a 	mov	r9,r3
 8801bb8:	8009883a 	mov	r4,r16
 8801bbc:	880b883a 	mov	r5,r17
 8801bc0:	003f0b06 	br	88017f0 <__ieee754_pow+0x998>
 8801bc4:	0005883a 	mov	r2,zero
 8801bc8:	00d0d034 	movhi	r3,17216
 8801bcc:	580b883a 	mov	r5,r11
 8801bd0:	5009883a 	mov	r4,r10
 8801bd4:	180f883a 	mov	r7,r3
 8801bd8:	100d883a 	mov	r6,r2
 8801bdc:	880308c0 	call	880308c <__muldf3>
 8801be0:	1015883a 	mov	r10,r2
 8801be4:	1825883a 	mov	r18,r3
 8801be8:	017ff2c4 	movi	r5,-53
 8801bec:	003d6606 	br	8801188 <__ieee754_pow+0x330>
 8801bf0:	b03d300e 	bge	r22,zero,88010b4 <__ieee754_pow+0x25c>
 8801bf4:	d9402917 	ldw	r5,164(sp)
 8801bf8:	28e0003c 	xorhi	r3,r5,32768
 8801bfc:	d8c02915 	stw	r3,164(sp)
 8801c00:	003cbc06 	br	8800ef4 <__ieee754_pow+0x9c>
 8801c04:	00800044 	movi	r2,1
 8801c08:	e0bd1a1e 	bne	fp,r2,8801074 <__ieee754_pow+0x21c>
 8801c0c:	48e0003c 	xorhi	r3,r9,32768
 8801c10:	da002815 	stw	r8,160(sp)
 8801c14:	d8c02915 	stw	r3,164(sp)
 8801c18:	003cb606 	br	8800ef4 <__ieee754_pow+0x9c>
 8801c1c:	d9001817 	ldw	r4,96(sp)
 8801c20:	00a00034 	movhi	r2,32768
 8801c24:	10bfffc4 	addi	r2,r2,-1
 8801c28:	20b8703a 	and	fp,r4,r2
 8801c2c:	008ff834 	movhi	r2,16352
 8801c30:	1700fc16 	blt	r2,fp,8802024 <__ieee754_pow+0x11cc>
 8801c34:	0039883a 	mov	fp,zero
 8801c38:	d8001315 	stw	zero,76(sp)
 8801c3c:	0025883a 	mov	r18,zero
 8801c40:	0005883a 	mov	r2,zero
 8801c44:	00cff9b4 	movhi	r3,16358
 8801c48:	18cb90c4 	addi	r3,r3,11843
 8801c4c:	9009883a 	mov	r4,r18
 8801c50:	b80b883a 	mov	r5,r23
 8801c54:	180f883a 	mov	r7,r3
 8801c58:	100d883a 	mov	r6,r2
 8801c5c:	880308c0 	call	880308c <__muldf3>
 8801c60:	d9c02017 	ldw	r7,128(sp)
 8801c64:	d9801f17 	ldw	r6,124(sp)
 8801c68:	9009883a 	mov	r4,r18
 8801c6c:	b80b883a 	mov	r5,r23
 8801c70:	b823883a 	mov	r17,r23
 8801c74:	102d883a 	mov	r22,r2
 8801c78:	182f883a 	mov	r23,r3
 8801c7c:	8802f980 	call	8802f98 <__subdf3>
 8801c80:	d9401e17 	ldw	r5,120(sp)
 8801c84:	d9001d17 	ldw	r4,116(sp)
 8801c88:	180f883a 	mov	r7,r3
 8801c8c:	100d883a 	mov	r6,r2
 8801c90:	8802f980 	call	8802f98 <__subdf3>
 8801c94:	023fbeb4 	movhi	r8,65274
 8801c98:	420e7bc4 	addi	r8,r8,14831
 8801c9c:	024ff9b4 	movhi	r9,16358
 8801ca0:	4a4b9084 	addi	r9,r9,11842
 8801ca4:	480f883a 	mov	r7,r9
 8801ca8:	400d883a 	mov	r6,r8
 8801cac:	180b883a 	mov	r5,r3
 8801cb0:	1009883a 	mov	r4,r2
 8801cb4:	880308c0 	call	880308c <__muldf3>
 8801cb8:	02032a34 	movhi	r8,3240
 8801cbc:	421b0e44 	addi	r8,r8,27705
 8801cc0:	026f8834 	movhi	r9,48672
 8801cc4:	4a571844 	addi	r9,r9,23649
 8801cc8:	480f883a 	mov	r7,r9
 8801ccc:	400d883a 	mov	r6,r8
 8801cd0:	9009883a 	mov	r4,r18
 8801cd4:	880b883a 	mov	r5,r17
 8801cd8:	1021883a 	mov	r16,r2
 8801cdc:	1823883a 	mov	r17,r3
 8801ce0:	880308c0 	call	880308c <__muldf3>
 8801ce4:	180f883a 	mov	r7,r3
 8801ce8:	880b883a 	mov	r5,r17
 8801cec:	8009883a 	mov	r4,r16
 8801cf0:	100d883a 	mov	r6,r2
 8801cf4:	88030180 	call	8803018 <__adddf3>
 8801cf8:	100d883a 	mov	r6,r2
 8801cfc:	b009883a 	mov	r4,r22
 8801d00:	b80b883a 	mov	r5,r23
 8801d04:	180f883a 	mov	r7,r3
 8801d08:	1021883a 	mov	r16,r2
 8801d0c:	1823883a 	mov	r17,r3
 8801d10:	88030180 	call	8803018 <__adddf3>
 8801d14:	1009883a 	mov	r4,r2
 8801d18:	180b883a 	mov	r5,r3
 8801d1c:	b00d883a 	mov	r6,r22
 8801d20:	b80f883a 	mov	r7,r23
 8801d24:	d8803915 	stw	r2,228(sp)
 8801d28:	d8c03a15 	stw	r3,232(sp)
 8801d2c:	d8801115 	stw	r2,68(sp)
 8801d30:	d8c01215 	stw	r3,72(sp)
 8801d34:	8802f980 	call	8802f98 <__subdf3>
 8801d38:	180f883a 	mov	r7,r3
 8801d3c:	8009883a 	mov	r4,r16
 8801d40:	880b883a 	mov	r5,r17
 8801d44:	100d883a 	mov	r6,r2
 8801d48:	8802f980 	call	8802f98 <__subdf3>
 8801d4c:	d9001117 	ldw	r4,68(sp)
 8801d50:	d9403a17 	ldw	r5,232(sp)
 8801d54:	1029883a 	mov	r20,r2
 8801d58:	200d883a 	mov	r6,r4
 8801d5c:	280f883a 	mov	r7,r5
 8801d60:	182b883a 	mov	r21,r3
 8801d64:	880308c0 	call	880308c <__muldf3>
 8801d68:	1021883a 	mov	r16,r2
 8801d6c:	1823883a 	mov	r17,r3
 8801d70:	009caff4 	movhi	r2,29375
 8801d74:	10a93404 	addi	r2,r2,-23344
 8801d78:	00cf99b4 	movhi	r3,15974
 8801d7c:	18cdda44 	addi	r3,r3,14185
 8801d80:	8009883a 	mov	r4,r16
 8801d84:	880b883a 	mov	r5,r17
 8801d88:	180f883a 	mov	r7,r3
 8801d8c:	100d883a 	mov	r6,r2
 8801d90:	880308c0 	call	880308c <__muldf3>
 8801d94:	023174b4 	movhi	r8,50642
 8801d98:	421afc44 	addi	r8,r8,27633
 8801d9c:	024faf34 	movhi	r9,16060
 8801da0:	4a6f5044 	addi	r9,r9,-17087
 8801da4:	480f883a 	mov	r7,r9
 8801da8:	400d883a 	mov	r6,r8
 8801dac:	180b883a 	mov	r5,r3
 8801db0:	1009883a 	mov	r4,r2
 8801db4:	8802f980 	call	8802f98 <__subdf3>
 8801db8:	180f883a 	mov	r7,r3
 8801dbc:	8009883a 	mov	r4,r16
 8801dc0:	880b883a 	mov	r5,r17
 8801dc4:	100d883a 	mov	r6,r2
 8801dc8:	880308c0 	call	880308c <__muldf3>
 8801dcc:	022bc9b4 	movhi	r8,44838
 8801dd0:	42378b04 	addi	r8,r8,-8660
 8801dd4:	024fc474 	movhi	r9,16145
 8801dd8:	4a559a84 	addi	r9,r9,22122
 8801ddc:	480f883a 	mov	r7,r9
 8801de0:	400d883a 	mov	r6,r8
 8801de4:	180b883a 	mov	r5,r3
 8801de8:	1009883a 	mov	r4,r2
 8801dec:	88030180 	call	8803018 <__adddf3>
 8801df0:	180f883a 	mov	r7,r3
 8801df4:	8009883a 	mov	r4,r16
 8801df8:	880b883a 	mov	r5,r17
 8801dfc:	100d883a 	mov	r6,r2
 8801e00:	880308c0 	call	880308c <__muldf3>
 8801e04:	0205aff4 	movhi	r8,5823
 8801e08:	422f64c4 	addi	r8,r8,-17005
 8801e0c:	024fd9f4 	movhi	r9,16231
 8801e10:	4a705b04 	addi	r9,r9,-16020
 8801e14:	480f883a 	mov	r7,r9
 8801e18:	400d883a 	mov	r6,r8
 8801e1c:	180b883a 	mov	r5,r3
 8801e20:	1009883a 	mov	r4,r2
 8801e24:	8802f980 	call	8802f98 <__subdf3>
 8801e28:	180f883a 	mov	r7,r3
 8801e2c:	8009883a 	mov	r4,r16
 8801e30:	880b883a 	mov	r5,r17
 8801e34:	100d883a 	mov	r6,r2
 8801e38:	880308c0 	call	880308c <__muldf3>
 8801e3c:	02155574 	movhi	r8,21845
 8801e40:	42154f84 	addi	r8,r8,21822
 8801e44:	024ff174 	movhi	r9,16325
 8801e48:	4a555544 	addi	r9,r9,21845
 8801e4c:	480f883a 	mov	r7,r9
 8801e50:	400d883a 	mov	r6,r8
 8801e54:	180b883a 	mov	r5,r3
 8801e58:	1009883a 	mov	r4,r2
 8801e5c:	88030180 	call	8803018 <__adddf3>
 8801e60:	180f883a 	mov	r7,r3
 8801e64:	8009883a 	mov	r4,r16
 8801e68:	880b883a 	mov	r5,r17
 8801e6c:	100d883a 	mov	r6,r2
 8801e70:	880308c0 	call	880308c <__muldf3>
 8801e74:	d9001117 	ldw	r4,68(sp)
 8801e78:	d9403a17 	ldw	r5,232(sp)
 8801e7c:	180f883a 	mov	r7,r3
 8801e80:	100d883a 	mov	r6,r2
 8801e84:	8802f980 	call	8802f98 <__subdf3>
 8801e88:	d9001117 	ldw	r4,68(sp)
 8801e8c:	d9403a17 	ldw	r5,232(sp)
 8801e90:	100d883a 	mov	r6,r2
 8801e94:	180f883a 	mov	r7,r3
 8801e98:	1021883a 	mov	r16,r2
 8801e9c:	1823883a 	mov	r17,r3
 8801ea0:	880308c0 	call	880308c <__muldf3>
 8801ea4:	0011883a 	mov	r8,zero
 8801ea8:	02500034 	movhi	r9,16384
 8801eac:	480f883a 	mov	r7,r9
 8801eb0:	400d883a 	mov	r6,r8
 8801eb4:	8009883a 	mov	r4,r16
 8801eb8:	880b883a 	mov	r5,r17
 8801ebc:	1021883a 	mov	r16,r2
 8801ec0:	1823883a 	mov	r17,r3
 8801ec4:	8802f980 	call	8802f98 <__subdf3>
 8801ec8:	180f883a 	mov	r7,r3
 8801ecc:	880b883a 	mov	r5,r17
 8801ed0:	8009883a 	mov	r4,r16
 8801ed4:	100d883a 	mov	r6,r2
 8801ed8:	88034500 	call	8803450 <__divdf3>
 8801edc:	d9001117 	ldw	r4,68(sp)
 8801ee0:	d9403a17 	ldw	r5,232(sp)
 8801ee4:	a00d883a 	mov	r6,r20
 8801ee8:	a80f883a 	mov	r7,r21
 8801eec:	1025883a 	mov	r18,r2
 8801ef0:	1827883a 	mov	r19,r3
 8801ef4:	880308c0 	call	880308c <__muldf3>
 8801ef8:	180f883a 	mov	r7,r3
 8801efc:	a009883a 	mov	r4,r20
 8801f00:	a80b883a 	mov	r5,r21
 8801f04:	100d883a 	mov	r6,r2
 8801f08:	88030180 	call	8803018 <__adddf3>
 8801f0c:	180f883a 	mov	r7,r3
 8801f10:	980b883a 	mov	r5,r19
 8801f14:	9009883a 	mov	r4,r18
 8801f18:	100d883a 	mov	r6,r2
 8801f1c:	8802f980 	call	8802f98 <__subdf3>
 8801f20:	d9801117 	ldw	r6,68(sp)
 8801f24:	d9c03a17 	ldw	r7,232(sp)
 8801f28:	180b883a 	mov	r5,r3
 8801f2c:	1009883a 	mov	r4,r2
 8801f30:	8802f980 	call	8802f98 <__subdf3>
 8801f34:	0011883a 	mov	r8,zero
 8801f38:	024ffc34 	movhi	r9,16368
 8801f3c:	480b883a 	mov	r5,r9
 8801f40:	180f883a 	mov	r7,r3
 8801f44:	4009883a 	mov	r4,r8
 8801f48:	100d883a 	mov	r6,r2
 8801f4c:	8802f980 	call	8802f98 <__subdf3>
 8801f50:	100b883a 	mov	r5,r2
 8801f54:	d8801317 	ldw	r2,76(sp)
 8801f58:	10d5883a 	add	r10,r2,r3
 8801f5c:	5005d53a 	srai	r2,r10,20
 8801f60:	0080720e 	bge	zero,r2,880212c <__ieee754_pow+0x12d4>
 8801f64:	2811883a 	mov	r8,r5
 8801f68:	5013883a 	mov	r9,r10
 8801f6c:	d9c01a17 	ldw	r7,104(sp)
 8801f70:	d9801917 	ldw	r6,100(sp)
 8801f74:	480b883a 	mov	r5,r9
 8801f78:	4009883a 	mov	r4,r8
 8801f7c:	003e8206 	br	8801988 <__ieee754_pow+0xb30>
 8801f80:	0009883a 	mov	r4,zero
 8801f84:	800b883a 	mov	r5,r16
 8801f88:	a80f883a 	mov	r7,r21
 8801f8c:	a00d883a 	mov	r6,r20
 8801f90:	003c2b06 	br	8801040 <__ieee754_pow+0x1e8>
 8801f94:	d9001d17 	ldw	r4,116(sp)
 8801f98:	00994b34 	movhi	r2,25900
 8801f9c:	10a0bf84 	addi	r2,r2,-32002
 8801fa0:	00cf25f4 	movhi	r3,15511
 8801fa4:	18c551c4 	addi	r3,r3,5447
 8801fa8:	a80b883a 	mov	r5,r21
 8801fac:	180f883a 	mov	r7,r3
 8801fb0:	100d883a 	mov	r6,r2
 8801fb4:	88030180 	call	8803018 <__adddf3>
 8801fb8:	d9801f17 	ldw	r6,124(sp)
 8801fbc:	880b883a 	mov	r5,r17
 8801fc0:	8009883a 	mov	r4,r16
 8801fc4:	980f883a 	mov	r7,r19
 8801fc8:	1021883a 	mov	r16,r2
 8801fcc:	1823883a 	mov	r17,r3
 8801fd0:	8802f980 	call	8802f98 <__subdf3>
 8801fd4:	180f883a 	mov	r7,r3
 8801fd8:	880b883a 	mov	r5,r17
 8801fdc:	8009883a 	mov	r4,r16
 8801fe0:	100d883a 	mov	r6,r2
 8801fe4:	88037b80 	call	88037b8 <__gtdf2>
 8801fe8:	00bf0c0e 	bge	zero,r2,8801c1c <__ieee754_pow+0xdc4>
 8801fec:	04220034 	movhi	r16,34816
 8801ff0:	841d6704 	addi	r16,r16,30108
 8801ff4:	045f8e34 	movhi	r17,32312
 8801ff8:	8c790f04 	addi	r17,r17,-7108
 8801ffc:	d9401a17 	ldw	r5,104(sp)
 8802000:	d9001917 	ldw	r4,100(sp)
 8802004:	800d883a 	mov	r6,r16
 8802008:	880f883a 	mov	r7,r17
 880200c:	880308c0 	call	880308c <__muldf3>
 8802010:	180b883a 	mov	r5,r3
 8802014:	800d883a 	mov	r6,r16
 8802018:	880f883a 	mov	r7,r17
 880201c:	1009883a 	mov	r4,r2
 8802020:	003e5906 	br	8801988 <__ieee754_pow+0xb30>
 8802024:	e005d53a 	srai	r2,fp,20
 8802028:	01800434 	movhi	r6,16
 880202c:	d9401817 	ldw	r5,96(sp)
 8802030:	10bf0084 	addi	r2,r2,-1022
 8802034:	308dd83a 	sra	r6,r6,r2
 8802038:	02000434 	movhi	r8,16
 880203c:	423fffc4 	addi	r8,r8,-1
 8802040:	0005883a 	mov	r2,zero
 8802044:	298d883a 	add	r6,r5,r6
 8802048:	318b883a 	add	r5,r6,r6
 880204c:	320e703a 	and	r7,r6,r8
 8802050:	1013883a 	mov	r9,r2
 8802054:	280ad57a 	srli	r5,r5,21
 8802058:	d8801817 	ldw	r2,96(sp)
 880205c:	01000504 	movi	r4,20
 8802060:	297f0044 	addi	r5,r5,-1023
 8802064:	4151d83a 	sra	r8,r8,r5
 8802068:	39c00434 	orhi	r7,r7,16
 880206c:	2149c83a 	sub	r4,r4,r5
 8802070:	0210303a 	nor	r8,zero,r8
 8802074:	3939d83a 	sra	fp,r7,r4
 8802078:	320e703a 	and	r7,r6,r8
 880207c:	10002916 	blt	r2,zero,8802124 <__ieee754_pow+0x12cc>
 8802080:	d9402017 	ldw	r5,128(sp)
 8802084:	d9001f17 	ldw	r4,124(sp)
 8802088:	480d883a 	mov	r6,r9
 880208c:	8802f980 	call	8802f98 <__subdf3>
 8802090:	180b883a 	mov	r5,r3
 8802094:	d9402015 	stw	r5,128(sp)
 8802098:	280f883a 	mov	r7,r5
 880209c:	d9001d17 	ldw	r4,116(sp)
 88020a0:	d9401e17 	ldw	r5,120(sp)
 88020a4:	1007883a 	mov	r3,r2
 88020a8:	180d883a 	mov	r6,r3
 88020ac:	d8801f15 	stw	r2,124(sp)
 88020b0:	88030180 	call	8803018 <__adddf3>
 88020b4:	180b883a 	mov	r5,r3
 88020b8:	e006953a 	slli	r3,fp,20
 88020bc:	282f883a 	mov	r23,r5
 88020c0:	d8c01315 	stw	r3,76(sp)
 88020c4:	003edd06 	br	8801c3c <__ieee754_pow+0xde4>
 88020c8:	383bc81e 	bne	r7,zero,8800fec <__ieee754_pow+0x194>
 88020cc:	28c5c83a 	sub	r2,r5,r3
 88020d0:	8087d83a 	sra	r3,r16,r2
 88020d4:	1884983a 	sll	r2,r3,r2
 88020d8:	80801b26 	beq	r16,r2,8802148 <__ieee754_pow+0x12f0>
 88020dc:	0039883a 	mov	fp,zero
 88020e0:	003b9d06 	br	8800f58 <__ieee754_pow+0x100>
 88020e4:	d9801f17 	ldw	r6,124(sp)
 88020e8:	8009883a 	mov	r4,r16
 88020ec:	880b883a 	mov	r5,r17
 88020f0:	980f883a 	mov	r7,r19
 88020f4:	8802f980 	call	8802f98 <__subdf3>
 88020f8:	d9001d17 	ldw	r4,116(sp)
 88020fc:	a80b883a 	mov	r5,r21
 8802100:	180f883a 	mov	r7,r3
 8802104:	100d883a 	mov	r6,r2
 8802108:	88038c80 	call	88038c8 <__ledf2>
 880210c:	00bfc516 	blt	zero,r2,8802024 <__ieee754_pow+0x11cc>
 8802110:	0430be74 	movhi	r16,49913
 8802114:	843cd644 	addi	r16,r16,-3239
 8802118:	04406974 	movhi	r17,421
 880211c:	8c5b87c4 	addi	r17,r17,28191
 8802120:	003fb606 	br	8801ffc <__ieee754_pow+0x11a4>
 8802124:	0739c83a 	sub	fp,zero,fp
 8802128:	003fd506 	br	8802080 <__ieee754_pow+0x1228>
 880212c:	2809883a 	mov	r4,r5
 8802130:	e00d883a 	mov	r6,fp
 8802134:	180b883a 	mov	r5,r3
 8802138:	88026ac0 	call	88026ac <scalbn>
 880213c:	1011883a 	mov	r8,r2
 8802140:	1813883a 	mov	r9,r3
 8802144:	003f8906 	br	8801f6c <__ieee754_pow+0x1114>
 8802148:	18c0004c 	andi	r3,r3,1
 880214c:	00800084 	movi	r2,2
 8802150:	10f9c83a 	sub	fp,r2,r3
 8802154:	003b8006 	br	8800f58 <__ieee754_pow+0x100>

08802158 <__ieee754_sqrt>:
 8802158:	defffd04 	addi	sp,sp,-12
 880215c:	dc000015 	stw	r16,0(sp)
 8802160:	009ffc34 	movhi	r2,32752
 8802164:	2021883a 	mov	r16,r4
 8802168:	291ffc2c 	andhi	r4,r5,32752
 880216c:	dc400115 	stw	r17,4(sp)
 8802170:	dfc00215 	stw	ra,8(sp)
 8802174:	2823883a 	mov	r17,r5
 8802178:	280f883a 	mov	r7,r5
 880217c:	2807883a 	mov	r3,r5
 8802180:	8011883a 	mov	r8,r16
 8802184:	20807d26 	beq	r4,r2,880237c <__ieee754_sqrt+0x224>
 8802188:	01408d0e 	bge	zero,r5,88023c0 <__ieee754_sqrt+0x268>
 880218c:	380dd53a 	srai	r6,r7,20
 8802190:	3000131e 	bne	r6,zero,88021e0 <__ieee754_sqrt+0x88>
 8802194:	1800041e 	bne	r3,zero,88021a8 <__ieee754_sqrt+0x50>
 8802198:	400ed2fa 	srli	r7,r8,11
 880219c:	31bffac4 	addi	r6,r6,-21
 88021a0:	4010957a 	slli	r8,r8,21
 88021a4:	383ffc26 	beq	r7,zero,8802198 <__ieee754_sqrt+0x40>
 88021a8:	3880042c 	andhi	r2,r7,16
 88021ac:	1000991e 	bne	r2,zero,8802414 <__ieee754_sqrt+0x2bc>
 88021b0:	0009883a 	mov	r4,zero
 88021b4:	39cf883a 	add	r7,r7,r7
 88021b8:	3880042c 	andhi	r2,r7,16
 88021bc:	21000044 	addi	r4,r4,1
 88021c0:	103ffc26 	beq	r2,zero,88021b4 <__ieee754_sqrt+0x5c>
 88021c4:	00800804 	movi	r2,32
 88021c8:	1105c83a 	sub	r2,r2,r4
 88021cc:	4086d83a 	srl	r3,r8,r2
 88021d0:	4110983a 	sll	r8,r8,r4
 88021d4:	3105c83a 	sub	r2,r6,r4
 88021d8:	38ceb03a 	or	r7,r7,r3
 88021dc:	11800044 	addi	r6,r2,1
 88021e0:	31bf0044 	addi	r6,r6,-1023
 88021e4:	30c0004c 	andi	r3,r6,1
 88021e8:	00800434 	movhi	r2,16
 88021ec:	10bfffc4 	addi	r2,r2,-1
 88021f0:	3884703a 	and	r2,r7,r2
 88021f4:	1807003a 	cmpeq	r3,r3,zero
 88021f8:	11000434 	orhi	r4,r2,16
 88021fc:	18005426 	beq	r3,zero,8802350 <__ieee754_sqrt+0x1f8>
 8802200:	4004d7fa 	srli	r2,r8,31
 8802204:	4207883a 	add	r3,r8,r8
 8802208:	02800834 	movhi	r10,32
 880220c:	1105883a 	add	r2,r2,r4
 8802210:	2089883a 	add	r4,r4,r2
 8802214:	0011883a 	mov	r8,zero
 8802218:	000b883a 	mov	r5,zero
 880221c:	0013883a 	mov	r9,zero
 8802220:	02c00584 	movi	r11,22
 8802224:	520f883a 	add	r7,r10,r8
 8802228:	1804d7fa 	srli	r2,r3,31
 880222c:	4a400044 	addi	r9,r9,1
 8802230:	18c7883a 	add	r3,r3,r3
 8802234:	21c00316 	blt	r4,r7,8802244 <__ieee754_sqrt+0xec>
 8802238:	21c9c83a 	sub	r4,r4,r7
 880223c:	2a8b883a 	add	r5,r5,r10
 8802240:	51d1883a 	add	r8,r10,r7
 8802244:	1105883a 	add	r2,r2,r4
 8802248:	5014d07a 	srli	r10,r10,1
 880224c:	2089883a 	add	r4,r4,r2
 8802250:	4afff41e 	bne	r9,r11,8802224 <__ieee754_sqrt+0xcc>
 8802254:	02600034 	movhi	r9,32768
 8802258:	0017883a 	mov	r11,zero
 880225c:	0019883a 	mov	r12,zero
 8802260:	0015883a 	mov	r10,zero
 8802264:	4821883a 	mov	r16,r9
 8802268:	03c00804 	movi	r15,32
 880226c:	00000806 	br	8802290 <__ieee754_sqrt+0x138>
 8802270:	22003426 	beq	r4,r8,8802344 <__ieee754_sqrt+0x1ec>
 8802274:	1804d7fa 	srli	r2,r3,31
 8802278:	52800044 	addi	r10,r10,1
 880227c:	18c7883a 	add	r3,r3,r3
 8802280:	1105883a 	add	r2,r2,r4
 8802284:	2089883a 	add	r4,r4,r2
 8802288:	4812d07a 	srli	r9,r9,1
 880228c:	53c01326 	beq	r10,r15,88022dc <__ieee754_sqrt+0x184>
 8802290:	4acf883a 	add	r7,r9,r11
 8802294:	413ff60e 	bge	r8,r4,8802270 <__ieee754_sqrt+0x118>
 8802298:	38a0002c 	andhi	r2,r7,32768
 880229c:	3a57883a 	add	r11,r7,r9
 88022a0:	14002426 	beq	r2,r16,8802334 <__ieee754_sqrt+0x1dc>
 88022a4:	4005883a 	mov	r2,r8
 88022a8:	2209c83a 	sub	r4,r4,r8
 88022ac:	19c0012e 	bgeu	r3,r7,88022b4 <__ieee754_sqrt+0x15c>
 88022b0:	213fffc4 	addi	r4,r4,-1
 88022b4:	19c7c83a 	sub	r3,r3,r7
 88022b8:	1011883a 	mov	r8,r2
 88022bc:	1804d7fa 	srli	r2,r3,31
 88022c0:	52800044 	addi	r10,r10,1
 88022c4:	6259883a 	add	r12,r12,r9
 88022c8:	1105883a 	add	r2,r2,r4
 88022cc:	18c7883a 	add	r3,r3,r3
 88022d0:	2089883a 	add	r4,r4,r2
 88022d4:	4812d07a 	srli	r9,r9,1
 88022d8:	53ffed1e 	bne	r10,r15,8802290 <__ieee754_sqrt+0x138>
 88022dc:	20c4b03a 	or	r2,r4,r3
 88022e0:	1000201e 	bne	r2,zero,8802364 <__ieee754_sqrt+0x20c>
 88022e4:	600ed07a 	srli	r7,r12,1
 88022e8:	2880004c 	andi	r2,r5,1
 88022ec:	1005003a 	cmpeq	r2,r2,zero
 88022f0:	1000011e 	bne	r2,zero,88022f8 <__ieee754_sqrt+0x1a0>
 88022f4:	39e00034 	orhi	r7,r7,32768
 88022f8:	300dd07a 	srai	r6,r6,1
 88022fc:	280bd07a 	srai	r5,r5,1
 8802300:	010ff834 	movhi	r4,16352
 8802304:	300c953a 	slli	r6,r6,20
 8802308:	290b883a 	add	r5,r5,r4
 880230c:	3821883a 	mov	r16,r7
 8802310:	299d883a 	add	r14,r5,r6
 8802314:	7023883a 	mov	r17,r14
 8802318:	8005883a 	mov	r2,r16
 880231c:	8807883a 	mov	r3,r17
 8802320:	dfc00217 	ldw	ra,8(sp)
 8802324:	dc400117 	ldw	r17,4(sp)
 8802328:	dc000017 	ldw	r16,0(sp)
 880232c:	dec00304 	addi	sp,sp,12
 8802330:	f800283a 	ret
 8802334:	5884703a 	and	r2,r11,r2
 8802338:	103fda1e 	bne	r2,zero,88022a4 <__ieee754_sqrt+0x14c>
 880233c:	40800044 	addi	r2,r8,1
 8802340:	003fd906 	br	88022a8 <__ieee754_sqrt+0x150>
 8802344:	19ffd42e 	bgeu	r3,r7,8802298 <__ieee754_sqrt+0x140>
 8802348:	2011883a 	mov	r8,r4
 880234c:	003fc906 	br	8802274 <__ieee754_sqrt+0x11c>
 8802350:	4004d7fa 	srli	r2,r8,31
 8802354:	4211883a 	add	r8,r8,r8
 8802358:	1105883a 	add	r2,r2,r4
 880235c:	2089883a 	add	r4,r4,r2
 8802360:	003fa706 	br	8802200 <__ieee754_sqrt+0xa8>
 8802364:	00bfffc4 	movi	r2,-1
 8802368:	60802726 	beq	r12,r2,8802408 <__ieee754_sqrt+0x2b0>
 880236c:	6080004c 	andi	r2,r12,1
 8802370:	6085883a 	add	r2,r12,r2
 8802374:	100ed07a 	srli	r7,r2,1
 8802378:	003fdb06 	br	88022e8 <__ieee754_sqrt+0x190>
 880237c:	8009883a 	mov	r4,r16
 8802380:	800d883a 	mov	r6,r16
 8802384:	880308c0 	call	880308c <__muldf3>
 8802388:	180f883a 	mov	r7,r3
 880238c:	880b883a 	mov	r5,r17
 8802390:	8009883a 	mov	r4,r16
 8802394:	100d883a 	mov	r6,r2
 8802398:	88030180 	call	8803018 <__adddf3>
 880239c:	1021883a 	mov	r16,r2
 88023a0:	1823883a 	mov	r17,r3
 88023a4:	8005883a 	mov	r2,r16
 88023a8:	8807883a 	mov	r3,r17
 88023ac:	dfc00217 	ldw	ra,8(sp)
 88023b0:	dc400117 	ldw	r17,4(sp)
 88023b4:	dc000017 	ldw	r16,0(sp)
 88023b8:	dec00304 	addi	sp,sp,12
 88023bc:	f800283a 	ret
 88023c0:	00a00034 	movhi	r2,32768
 88023c4:	10bfffc4 	addi	r2,r2,-1
 88023c8:	2884703a 	and	r2,r5,r2
 88023cc:	8084b03a 	or	r2,r16,r2
 88023d0:	103fd126 	beq	r2,zero,8802318 <__ieee754_sqrt+0x1c0>
 88023d4:	283f6d26 	beq	r5,zero,880218c <__ieee754_sqrt+0x34>
 88023d8:	280f883a 	mov	r7,r5
 88023dc:	8009883a 	mov	r4,r16
 88023e0:	800d883a 	mov	r6,r16
 88023e4:	8802f980 	call	8802f98 <__subdf3>
 88023e8:	1009883a 	mov	r4,r2
 88023ec:	180b883a 	mov	r5,r3
 88023f0:	100d883a 	mov	r6,r2
 88023f4:	180f883a 	mov	r7,r3
 88023f8:	88034500 	call	8803450 <__divdf3>
 88023fc:	1021883a 	mov	r16,r2
 8802400:	1823883a 	mov	r17,r3
 8802404:	003fc406 	br	8802318 <__ieee754_sqrt+0x1c0>
 8802408:	29400044 	addi	r5,r5,1
 880240c:	000f883a 	mov	r7,zero
 8802410:	003fb506 	br	88022e8 <__ieee754_sqrt+0x190>
 8802414:	0009883a 	mov	r4,zero
 8802418:	00800804 	movi	r2,32
 880241c:	003f6b06 	br	88021cc <__ieee754_sqrt+0x74>

08802420 <fabs>:
 8802420:	01e00034 	movhi	r7,32768
 8802424:	39ffffc4 	addi	r7,r7,-1
 8802428:	394e703a 	and	r7,r7,r5
 880242c:	2005883a 	mov	r2,r4
 8802430:	3807883a 	mov	r3,r7
 8802434:	f800283a 	ret

08802438 <finite>:
 8802438:	00a00034 	movhi	r2,32768
 880243c:	10bfffc4 	addi	r2,r2,-1
 8802440:	2884703a 	and	r2,r5,r2
 8802444:	01600434 	movhi	r5,32784
 8802448:	1145883a 	add	r2,r2,r5
 880244c:	1004d7fa 	srli	r2,r2,31
 8802450:	f800283a 	ret

08802454 <__isnand>:
 8802454:	200d883a 	mov	r6,r4
 8802458:	0109c83a 	sub	r4,zero,r4
 880245c:	2188b03a 	or	r4,r4,r6
 8802460:	2008d7fa 	srli	r4,r4,31
 8802464:	00a00034 	movhi	r2,32768
 8802468:	10bfffc4 	addi	r2,r2,-1
 880246c:	1144703a 	and	r2,r2,r5
 8802470:	2088b03a 	or	r4,r4,r2
 8802474:	009ffc34 	movhi	r2,32752
 8802478:	1105c83a 	sub	r2,r2,r4
 880247c:	1004d7fa 	srli	r2,r2,31
 8802480:	f800283a 	ret

08802484 <matherr>:
 8802484:	0005883a 	mov	r2,zero
 8802488:	f800283a 	ret

0880248c <nan>:
 880248c:	015ffe34 	movhi	r5,32760
 8802490:	0005883a 	mov	r2,zero
 8802494:	2807883a 	mov	r3,r5
 8802498:	f800283a 	ret

0880249c <rint>:
 880249c:	2015883a 	mov	r10,r4
 88024a0:	2809d53a 	srai	r4,r5,20
 88024a4:	defff904 	addi	sp,sp,-28
 88024a8:	034004c4 	movi	r13,19
 88024ac:	2101ffcc 	andi	r4,r4,2047
 88024b0:	227f0044 	addi	r9,r4,-1023
 88024b4:	dc800415 	stw	r18,16(sp)
 88024b8:	dfc00615 	stw	ra,24(sp)
 88024bc:	dcc00515 	stw	r19,20(sp)
 88024c0:	dc400315 	stw	r17,12(sp)
 88024c4:	dc000215 	stw	r16,8(sp)
 88024c8:	2817883a 	mov	r11,r5
 88024cc:	500d883a 	mov	r6,r10
 88024d0:	2824d7fa 	srli	r18,r5,31
 88024d4:	6a403016 	blt	r13,r9,8802598 <rint+0xfc>
 88024d8:	48004916 	blt	r9,zero,8802600 <rint+0x164>
 88024dc:	00800434 	movhi	r2,16
 88024e0:	10bfffc4 	addi	r2,r2,-1
 88024e4:	1247d83a 	sra	r3,r2,r9
 88024e8:	2809883a 	mov	r4,r5
 88024ec:	1944703a 	and	r2,r3,r5
 88024f0:	5084b03a 	or	r2,r10,r2
 88024f4:	10001f26 	beq	r2,zero,8802574 <rint+0xd8>
 88024f8:	180ad07a 	srli	r5,r3,1
 88024fc:	5944703a 	and	r2,r11,r5
 8802500:	5084b03a 	or	r2,r10,r2
 8802504:	10000626 	beq	r2,zero,8802520 <rint+0x84>
 8802508:	4b406626 	beq	r9,r13,88026a4 <rint+0x208>
 880250c:	00c000b4 	movhi	r3,2
 8802510:	1a47d83a 	sra	r3,r3,r9
 8802514:	0144303a 	nor	r2,zero,r5
 8802518:	5884703a 	and	r2,r11,r2
 880251c:	10c8b03a 	or	r4,r2,r3
 8802520:	900690fa 	slli	r3,r18,3
 8802524:	00822074 	movhi	r2,2177
 8802528:	10a23204 	addi	r2,r2,-30520
 880252c:	200f883a 	mov	r7,r4
 8802530:	1887883a 	add	r3,r3,r2
 8802534:	1c000017 	ldw	r16,0(r3)
 8802538:	1c400117 	ldw	r17,4(r3)
 880253c:	8009883a 	mov	r4,r16
 8802540:	880b883a 	mov	r5,r17
 8802544:	88030180 	call	8803018 <__adddf3>
 8802548:	d8800015 	stw	r2,0(sp)
 880254c:	d8c00115 	stw	r3,4(sp)
 8802550:	d8800017 	ldw	r2,0(sp)
 8802554:	d8c00117 	ldw	r3,4(sp)
 8802558:	880f883a 	mov	r7,r17
 880255c:	800d883a 	mov	r6,r16
 8802560:	180b883a 	mov	r5,r3
 8802564:	1009883a 	mov	r4,r2
 8802568:	8802f980 	call	8802f98 <__subdf3>
 880256c:	1015883a 	mov	r10,r2
 8802570:	1817883a 	mov	r11,r3
 8802574:	5005883a 	mov	r2,r10
 8802578:	5807883a 	mov	r3,r11
 880257c:	dfc00617 	ldw	ra,24(sp)
 8802580:	dcc00517 	ldw	r19,20(sp)
 8802584:	dc800417 	ldw	r18,16(sp)
 8802588:	dc400317 	ldw	r17,12(sp)
 880258c:	dc000217 	ldw	r16,8(sp)
 8802590:	dec00704 	addi	sp,sp,28
 8802594:	f800283a 	ret
 8802598:	00800cc4 	movi	r2,51
 880259c:	12400f16 	blt	r2,r9,88025dc <rint+0x140>
 88025a0:	213efb44 	addi	r4,r4,-1043
 88025a4:	00bfffc4 	movi	r2,-1
 88025a8:	1104d83a 	srl	r2,r2,r4
 88025ac:	5086703a 	and	r3,r10,r2
 88025b0:	183ff026 	beq	r3,zero,8802574 <rint+0xd8>
 88025b4:	100ad07a 	srli	r5,r2,1
 88025b8:	5144703a 	and	r2,r10,r5
 88025bc:	10000526 	beq	r2,zero,88025d4 <rint+0x138>
 88025c0:	00d00034 	movhi	r3,16384
 88025c4:	1907d83a 	sra	r3,r3,r4
 88025c8:	0144303a 	nor	r2,zero,r5
 88025cc:	5084703a 	and	r2,r10,r2
 88025d0:	10ccb03a 	or	r6,r2,r3
 88025d4:	5809883a 	mov	r4,r11
 88025d8:	003fd106 	br	8802520 <rint+0x84>
 88025dc:	00810004 	movi	r2,1024
 88025e0:	48bfe41e 	bne	r9,r2,8802574 <rint+0xd8>
 88025e4:	5009883a 	mov	r4,r10
 88025e8:	500d883a 	mov	r6,r10
 88025ec:	280f883a 	mov	r7,r5
 88025f0:	88030180 	call	8803018 <__adddf3>
 88025f4:	1015883a 	mov	r10,r2
 88025f8:	1817883a 	mov	r11,r3
 88025fc:	003fdd06 	br	8802574 <rint+0xd8>
 8802600:	04e00034 	movhi	r19,32768
 8802604:	9cffffc4 	addi	r19,r19,-1
 8802608:	2cc4703a 	and	r2,r5,r19
 880260c:	5084b03a 	or	r2,r10,r2
 8802610:	103fd826 	beq	r2,zero,8802574 <rint+0xd8>
 8802614:	00c00434 	movhi	r3,16
 8802618:	18ffffc4 	addi	r3,r3,-1
 880261c:	28c6703a 	and	r3,r5,r3
 8802620:	50c6b03a 	or	r3,r10,r3
 8802624:	00cdc83a 	sub	r6,zero,r3
 8802628:	900a90fa 	slli	r5,r18,3
 880262c:	1986b03a 	or	r3,r3,r6
 8802630:	01022074 	movhi	r4,2177
 8802634:	21223204 	addi	r4,r4,-30520
 8802638:	1806d33a 	srli	r3,r3,12
 880263c:	290b883a 	add	r5,r5,r4
 8802640:	2c000017 	ldw	r16,0(r5)
 8802644:	2c400117 	ldw	r17,4(r5)
 8802648:	593fffac 	andhi	r4,r11,65534
 880264c:	18c0022c 	andhi	r3,r3,8
 8802650:	1906b03a 	or	r3,r3,r4
 8802654:	500d883a 	mov	r6,r10
 8802658:	180f883a 	mov	r7,r3
 880265c:	8009883a 	mov	r4,r16
 8802660:	880b883a 	mov	r5,r17
 8802664:	88030180 	call	8803018 <__adddf3>
 8802668:	d8800015 	stw	r2,0(sp)
 880266c:	d8c00115 	stw	r3,4(sp)
 8802670:	d8800017 	ldw	r2,0(sp)
 8802674:	d8c00117 	ldw	r3,4(sp)
 8802678:	880f883a 	mov	r7,r17
 880267c:	800d883a 	mov	r6,r16
 8802680:	180b883a 	mov	r5,r3
 8802684:	1009883a 	mov	r4,r2
 8802688:	8802f980 	call	8802f98 <__subdf3>
 880268c:	901297fa 	slli	r9,r18,31
 8802690:	98d0703a 	and	r8,r19,r3
 8802694:	1015883a 	mov	r10,r2
 8802698:	4250b03a 	or	r8,r8,r9
 880269c:	4017883a 	mov	r11,r8
 88026a0:	003fb406 	br	8802574 <rint+0xd8>
 88026a4:	01900034 	movhi	r6,16384
 88026a8:	003f9d06 	br	8802520 <rint+0x84>

088026ac <scalbn>:
 88026ac:	2011883a 	mov	r8,r4
 88026b0:	291ffc2c 	andhi	r4,r5,32752
 88026b4:	2009d53a 	srai	r4,r4,20
 88026b8:	defffd04 	addi	sp,sp,-12
 88026bc:	dc000015 	stw	r16,0(sp)
 88026c0:	dfc00215 	stw	ra,8(sp)
 88026c4:	dc400115 	stw	r17,4(sp)
 88026c8:	2813883a 	mov	r9,r5
 88026cc:	2815883a 	mov	r10,r5
 88026d0:	3021883a 	mov	r16,r6
 88026d4:	2000281e 	bne	r4,zero,8802778 <scalbn+0xcc>
 88026d8:	00a00034 	movhi	r2,32768
 88026dc:	10bfffc4 	addi	r2,r2,-1
 88026e0:	2884703a 	and	r2,r5,r2
 88026e4:	4084b03a 	or	r2,r8,r2
 88026e8:	10001826 	beq	r2,zero,880274c <scalbn+0xa0>
 88026ec:	0005883a 	mov	r2,zero
 88026f0:	00d0d434 	movhi	r3,17232
 88026f4:	4009883a 	mov	r4,r8
 88026f8:	100d883a 	mov	r6,r2
 88026fc:	180f883a 	mov	r7,r3
 8802700:	880308c0 	call	880308c <__muldf3>
 8802704:	100b883a 	mov	r5,r2
 8802708:	1011883a 	mov	r8,r2
 880270c:	00bffff4 	movhi	r2,65535
 8802710:	108f2c04 	addi	r2,r2,15536
 8802714:	180d883a 	mov	r6,r3
 8802718:	1813883a 	mov	r9,r3
 880271c:	8080120e 	bge	r16,r2,8802768 <scalbn+0xbc>
 8802720:	00b0be74 	movhi	r2,49913
 8802724:	10bcd644 	addi	r2,r2,-3239
 8802728:	00c06974 	movhi	r3,421
 880272c:	18db87c4 	addi	r3,r3,28191
 8802730:	2809883a 	mov	r4,r5
 8802734:	180f883a 	mov	r7,r3
 8802738:	300b883a 	mov	r5,r6
 880273c:	100d883a 	mov	r6,r2
 8802740:	880308c0 	call	880308c <__muldf3>
 8802744:	1011883a 	mov	r8,r2
 8802748:	1813883a 	mov	r9,r3
 880274c:	4005883a 	mov	r2,r8
 8802750:	4807883a 	mov	r3,r9
 8802754:	dfc00217 	ldw	ra,8(sp)
 8802758:	dc400117 	ldw	r17,4(sp)
 880275c:	dc000017 	ldw	r16,0(sp)
 8802760:	dec00304 	addi	sp,sp,12
 8802764:	f800283a 	ret
 8802768:	189ffc2c 	andhi	r2,r3,32752
 880276c:	1005d53a 	srai	r2,r2,20
 8802770:	1815883a 	mov	r10,r3
 8802774:	113ff284 	addi	r4,r2,-54
 8802778:	0081ffc4 	movi	r2,2047
 880277c:	20801126 	beq	r4,r2,88027c4 <scalbn+0x118>
 8802780:	2409883a 	add	r4,r4,r16
 8802784:	0081ff84 	movi	r2,2046
 8802788:	11001c16 	blt	r2,r4,88027fc <scalbn+0x150>
 880278c:	0100290e 	bge	zero,r4,8802834 <scalbn+0x188>
 8802790:	200a953a 	slli	r5,r4,20
 8802794:	01200434 	movhi	r4,32784
 8802798:	213fffc4 	addi	r4,r4,-1
 880279c:	5108703a 	and	r4,r10,r4
 88027a0:	2148b03a 	or	r4,r4,r5
 88027a4:	2013883a 	mov	r9,r4
 88027a8:	4005883a 	mov	r2,r8
 88027ac:	4807883a 	mov	r3,r9
 88027b0:	dfc00217 	ldw	ra,8(sp)
 88027b4:	dc400117 	ldw	r17,4(sp)
 88027b8:	dc000017 	ldw	r16,0(sp)
 88027bc:	dec00304 	addi	sp,sp,12
 88027c0:	f800283a 	ret
 88027c4:	480f883a 	mov	r7,r9
 88027c8:	4009883a 	mov	r4,r8
 88027cc:	480b883a 	mov	r5,r9
 88027d0:	400d883a 	mov	r6,r8
 88027d4:	88030180 	call	8803018 <__adddf3>
 88027d8:	1011883a 	mov	r8,r2
 88027dc:	1813883a 	mov	r9,r3
 88027e0:	4005883a 	mov	r2,r8
 88027e4:	4807883a 	mov	r3,r9
 88027e8:	dfc00217 	ldw	ra,8(sp)
 88027ec:	dc400117 	ldw	r17,4(sp)
 88027f0:	dc000017 	ldw	r16,0(sp)
 88027f4:	dec00304 	addi	sp,sp,12
 88027f8:	f800283a 	ret
 88027fc:	04220034 	movhi	r16,34816
 8802800:	841d6704 	addi	r16,r16,30108
 8802804:	045f8e34 	movhi	r17,32312
 8802808:	8c790f04 	addi	r17,r17,-7108
 880280c:	480f883a 	mov	r7,r9
 8802810:	400d883a 	mov	r6,r8
 8802814:	8009883a 	mov	r4,r16
 8802818:	880b883a 	mov	r5,r17
 880281c:	880288c0 	call	880288c <copysign>
 8802820:	180b883a 	mov	r5,r3
 8802824:	800d883a 	mov	r6,r16
 8802828:	880f883a 	mov	r7,r17
 880282c:	1009883a 	mov	r4,r2
 8802830:	003fc306 	br	8802740 <scalbn+0x94>
 8802834:	00bff284 	movi	r2,-54
 8802838:	11000716 	blt	r2,r4,8802858 <scalbn+0x1ac>
 880283c:	00b0d414 	movui	r2,50000
 8802840:	143fee16 	blt	r2,r16,88027fc <scalbn+0x150>
 8802844:	0430be74 	movhi	r16,49913
 8802848:	843cd644 	addi	r16,r16,-3239
 880284c:	04406974 	movhi	r17,421
 8802850:	8c5b87c4 	addi	r17,r17,28191
 8802854:	003fed06 	br	880280c <scalbn+0x160>
 8802858:	21000d84 	addi	r4,r4,54
 880285c:	2008953a 	slli	r4,r4,20
 8802860:	01e00434 	movhi	r7,32784
 8802864:	39ffffc4 	addi	r7,r7,-1
 8802868:	51ce703a 	and	r7,r10,r7
 880286c:	390eb03a 	or	r7,r7,r4
 8802870:	024f2434 	movhi	r9,15504
 8802874:	4009883a 	mov	r4,r8
 8802878:	0011883a 	mov	r8,zero
 880287c:	380b883a 	mov	r5,r7
 8802880:	400d883a 	mov	r6,r8
 8802884:	480f883a 	mov	r7,r9
 8802888:	003fad06 	br	8802740 <scalbn+0x94>

0880288c <copysign>:
 880288c:	3813883a 	mov	r9,r7
 8802890:	01e00034 	movhi	r7,32768
 8802894:	39ffffc4 	addi	r7,r7,-1
 8802898:	394e703a 	and	r7,r7,r5
 880289c:	4aa0002c 	andhi	r10,r9,32768
 88028a0:	3a8eb03a 	or	r7,r7,r10
 88028a4:	2005883a 	mov	r2,r4
 88028a8:	3807883a 	mov	r3,r7
 88028ac:	f800283a 	ret

088028b0 <__divsf3>:
 88028b0:	defff304 	addi	sp,sp,-52
 88028b4:	dc400b15 	stw	r17,44(sp)
 88028b8:	dc400204 	addi	r17,sp,8
 88028bc:	dc000a15 	stw	r16,40(sp)
 88028c0:	d9000015 	stw	r4,0(sp)
 88028c4:	d9400115 	stw	r5,4(sp)
 88028c8:	d809883a 	mov	r4,sp
 88028cc:	880b883a 	mov	r5,r17
 88028d0:	dc000604 	addi	r16,sp,24
 88028d4:	dfc00c15 	stw	ra,48(sp)
 88028d8:	8803eb80 	call	8803eb8 <__unpack_f>
 88028dc:	d9000104 	addi	r4,sp,4
 88028e0:	800b883a 	mov	r5,r16
 88028e4:	8803eb80 	call	8803eb8 <__unpack_f>
 88028e8:	d9000217 	ldw	r4,8(sp)
 88028ec:	00800044 	movi	r2,1
 88028f0:	01800104 	movi	r6,4
 88028f4:	11000a2e 	bgeu	r2,r4,8802920 <__divsf3+0x70>
 88028f8:	d9400617 	ldw	r5,24(sp)
 88028fc:	1140432e 	bgeu	r2,r5,8802a0c <__divsf3+0x15c>
 8802900:	d8800317 	ldw	r2,12(sp)
 8802904:	d8c00717 	ldw	r3,28(sp)
 8802908:	10c4f03a 	xor	r2,r2,r3
 880290c:	d8800315 	stw	r2,12(sp)
 8802910:	21800226 	beq	r4,r6,880291c <__divsf3+0x6c>
 8802914:	00800084 	movi	r2,2
 8802918:	2080101e 	bne	r4,r2,880295c <__divsf3+0xac>
 880291c:	29000726 	beq	r5,r4,880293c <__divsf3+0x8c>
 8802920:	8809883a 	mov	r4,r17
 8802924:	8803d580 	call	8803d58 <__pack_f>
 8802928:	dfc00c17 	ldw	ra,48(sp)
 880292c:	dc400b17 	ldw	r17,44(sp)
 8802930:	dc000a17 	ldw	r16,40(sp)
 8802934:	dec00d04 	addi	sp,sp,52
 8802938:	f800283a 	ret
 880293c:	01022074 	movhi	r4,2177
 8802940:	21223604 	addi	r4,r4,-30504
 8802944:	8803d580 	call	8803d58 <__pack_f>
 8802948:	dfc00c17 	ldw	ra,48(sp)
 880294c:	dc400b17 	ldw	r17,44(sp)
 8802950:	dc000a17 	ldw	r16,40(sp)
 8802954:	dec00d04 	addi	sp,sp,52
 8802958:	f800283a 	ret
 880295c:	29802d26 	beq	r5,r6,8802a14 <__divsf3+0x164>
 8802960:	28801a26 	beq	r5,r2,88029cc <__divsf3+0x11c>
 8802964:	d8c00417 	ldw	r3,16(sp)
 8802968:	d8800817 	ldw	r2,32(sp)
 880296c:	d9000517 	ldw	r4,20(sp)
 8802970:	d9800917 	ldw	r6,36(sp)
 8802974:	1885c83a 	sub	r2,r3,r2
 8802978:	d8800415 	stw	r2,16(sp)
 880297c:	2180032e 	bgeu	r4,r6,880298c <__divsf3+0xdc>
 8802980:	10bfffc4 	addi	r2,r2,-1
 8802984:	d8800415 	stw	r2,16(sp)
 8802988:	2109883a 	add	r4,r4,r4
 880298c:	01500034 	movhi	r5,16384
 8802990:	0007883a 	mov	r3,zero
 8802994:	0005883a 	mov	r2,zero
 8802998:	01c007c4 	movi	r7,31
 880299c:	10800044 	addi	r2,r2,1
 88029a0:	21800236 	bltu	r4,r6,88029ac <__divsf3+0xfc>
 88029a4:	1946b03a 	or	r3,r3,r5
 88029a8:	2189c83a 	sub	r4,r4,r6
 88029ac:	280ad07a 	srli	r5,r5,1
 88029b0:	2109883a 	add	r4,r4,r4
 88029b4:	11fff91e 	bne	r2,r7,880299c <__divsf3+0xec>
 88029b8:	19401fcc 	andi	r5,r3,127
 88029bc:	00801004 	movi	r2,64
 88029c0:	28800a26 	beq	r5,r2,88029ec <__divsf3+0x13c>
 88029c4:	d8c00515 	stw	r3,20(sp)
 88029c8:	003fd506 	br	8802920 <__divsf3+0x70>
 88029cc:	8809883a 	mov	r4,r17
 88029d0:	d9800215 	stw	r6,8(sp)
 88029d4:	8803d580 	call	8803d58 <__pack_f>
 88029d8:	dfc00c17 	ldw	ra,48(sp)
 88029dc:	dc400b17 	ldw	r17,44(sp)
 88029e0:	dc000a17 	ldw	r16,40(sp)
 88029e4:	dec00d04 	addi	sp,sp,52
 88029e8:	f800283a 	ret
 88029ec:	1880200c 	andi	r2,r3,128
 88029f0:	103ff41e 	bne	r2,zero,88029c4 <__divsf3+0x114>
 88029f4:	203ff326 	beq	r4,zero,88029c4 <__divsf3+0x114>
 88029f8:	1947883a 	add	r3,r3,r5
 88029fc:	00bfe004 	movi	r2,-128
 8802a00:	1886703a 	and	r3,r3,r2
 8802a04:	d8c00515 	stw	r3,20(sp)
 8802a08:	003fc506 	br	8802920 <__divsf3+0x70>
 8802a0c:	8009883a 	mov	r4,r16
 8802a10:	003fc406 	br	8802924 <__divsf3+0x74>
 8802a14:	8809883a 	mov	r4,r17
 8802a18:	d8000515 	stw	zero,20(sp)
 8802a1c:	d8000415 	stw	zero,16(sp)
 8802a20:	003fc006 	br	8802924 <__divsf3+0x74>

08802a24 <__lesf2>:
 8802a24:	defff304 	addi	sp,sp,-52
 8802a28:	dc400b15 	stw	r17,44(sp)
 8802a2c:	dc400204 	addi	r17,sp,8
 8802a30:	dc000a15 	stw	r16,40(sp)
 8802a34:	d9000015 	stw	r4,0(sp)
 8802a38:	d9400115 	stw	r5,4(sp)
 8802a3c:	d809883a 	mov	r4,sp
 8802a40:	880b883a 	mov	r5,r17
 8802a44:	dc000604 	addi	r16,sp,24
 8802a48:	dfc00c15 	stw	ra,48(sp)
 8802a4c:	8803eb80 	call	8803eb8 <__unpack_f>
 8802a50:	d9000104 	addi	r4,sp,4
 8802a54:	800b883a 	mov	r5,r16
 8802a58:	8803eb80 	call	8803eb8 <__unpack_f>
 8802a5c:	d8800217 	ldw	r2,8(sp)
 8802a60:	00c00044 	movi	r3,1
 8802a64:	180d883a 	mov	r6,r3
 8802a68:	1880062e 	bgeu	r3,r2,8802a84 <__lesf2+0x60>
 8802a6c:	d8800617 	ldw	r2,24(sp)
 8802a70:	8809883a 	mov	r4,r17
 8802a74:	800b883a 	mov	r5,r16
 8802a78:	1880022e 	bgeu	r3,r2,8802a84 <__lesf2+0x60>
 8802a7c:	8803f800 	call	8803f80 <__fpcmp_parts_f>
 8802a80:	100d883a 	mov	r6,r2
 8802a84:	3005883a 	mov	r2,r6
 8802a88:	dfc00c17 	ldw	ra,48(sp)
 8802a8c:	dc400b17 	ldw	r17,44(sp)
 8802a90:	dc000a17 	ldw	r16,40(sp)
 8802a94:	dec00d04 	addi	sp,sp,52
 8802a98:	f800283a 	ret

08802a9c <__floatsisf>:
 8802a9c:	2006d7fa 	srli	r3,r4,31
 8802aa0:	defffa04 	addi	sp,sp,-24
 8802aa4:	008000c4 	movi	r2,3
 8802aa8:	dfc00515 	stw	ra,20(sp)
 8802aac:	dc000415 	stw	r16,16(sp)
 8802ab0:	d8800015 	stw	r2,0(sp)
 8802ab4:	d8c00115 	stw	r3,4(sp)
 8802ab8:	2000081e 	bne	r4,zero,8802adc <__floatsisf+0x40>
 8802abc:	00800084 	movi	r2,2
 8802ac0:	d8800015 	stw	r2,0(sp)
 8802ac4:	d809883a 	mov	r4,sp
 8802ac8:	8803d580 	call	8803d58 <__pack_f>
 8802acc:	dfc00517 	ldw	ra,20(sp)
 8802ad0:	dc000417 	ldw	r16,16(sp)
 8802ad4:	dec00604 	addi	sp,sp,24
 8802ad8:	f800283a 	ret
 8802adc:	00800784 	movi	r2,30
 8802ae0:	1807003a 	cmpeq	r3,r3,zero
 8802ae4:	d8800215 	stw	r2,8(sp)
 8802ae8:	18000e1e 	bne	r3,zero,8802b24 <__floatsisf+0x88>
 8802aec:	00a00034 	movhi	r2,32768
 8802af0:	20800e26 	beq	r4,r2,8802b2c <__floatsisf+0x90>
 8802af4:	0121c83a 	sub	r16,zero,r4
 8802af8:	8009883a 	mov	r4,r16
 8802afc:	dc000315 	stw	r16,12(sp)
 8802b00:	8803cd80 	call	8803cd8 <__clzsi2>
 8802b04:	117fffc4 	addi	r5,r2,-1
 8802b08:	017fee0e 	bge	zero,r5,8802ac4 <__floatsisf+0x28>
 8802b0c:	d8800217 	ldw	r2,8(sp)
 8802b10:	8146983a 	sll	r3,r16,r5
 8802b14:	1145c83a 	sub	r2,r2,r5
 8802b18:	d8c00315 	stw	r3,12(sp)
 8802b1c:	d8800215 	stw	r2,8(sp)
 8802b20:	003fe806 	br	8802ac4 <__floatsisf+0x28>
 8802b24:	2021883a 	mov	r16,r4
 8802b28:	003ff306 	br	8802af8 <__floatsisf+0x5c>
 8802b2c:	00b3c034 	movhi	r2,52992
 8802b30:	003fe606 	br	8802acc <__floatsisf+0x30>

08802b34 <__extendsfdf2>:
 8802b34:	defff904 	addi	sp,sp,-28
 8802b38:	d9000115 	stw	r4,4(sp)
 8802b3c:	d9400204 	addi	r5,sp,8
 8802b40:	d9000104 	addi	r4,sp,4
 8802b44:	dfc00615 	stw	ra,24(sp)
 8802b48:	8803eb80 	call	8803eb8 <__unpack_f>
 8802b4c:	d9c00517 	ldw	r7,20(sp)
 8802b50:	0011883a 	mov	r8,zero
 8802b54:	400697ba 	slli	r3,r8,30
 8802b58:	3812d0ba 	srli	r9,r7,2
 8802b5c:	380497ba 	slli	r2,r7,30
 8802b60:	d9000217 	ldw	r4,8(sp)
 8802b64:	d9400317 	ldw	r5,12(sp)
 8802b68:	d9800417 	ldw	r6,16(sp)
 8802b6c:	48c6b03a 	or	r3,r9,r3
 8802b70:	100f883a 	mov	r7,r2
 8802b74:	d8c00015 	stw	r3,0(sp)
 8802b78:	8803a480 	call	8803a48 <__make_dp>
 8802b7c:	dfc00617 	ldw	ra,24(sp)
 8802b80:	dec00704 	addi	sp,sp,28
 8802b84:	f800283a 	ret

08802b88 <_fpadd_parts>:
 8802b88:	defff804 	addi	sp,sp,-32
 8802b8c:	dcc00315 	stw	r19,12(sp)
 8802b90:	2027883a 	mov	r19,r4
 8802b94:	21000017 	ldw	r4,0(r4)
 8802b98:	00c00044 	movi	r3,1
 8802b9c:	dd400515 	stw	r21,20(sp)
 8802ba0:	dd000415 	stw	r20,16(sp)
 8802ba4:	ddc00715 	stw	r23,28(sp)
 8802ba8:	dd800615 	stw	r22,24(sp)
 8802bac:	dc800215 	stw	r18,8(sp)
 8802bb0:	dc400115 	stw	r17,4(sp)
 8802bb4:	dc000015 	stw	r16,0(sp)
 8802bb8:	282b883a 	mov	r21,r5
 8802bbc:	3029883a 	mov	r20,r6
 8802bc0:	1900632e 	bgeu	r3,r4,8802d50 <_fpadd_parts+0x1c8>
 8802bc4:	28800017 	ldw	r2,0(r5)
 8802bc8:	1880812e 	bgeu	r3,r2,8802dd0 <_fpadd_parts+0x248>
 8802bcc:	00c00104 	movi	r3,4
 8802bd0:	20c0dc26 	beq	r4,r3,8802f44 <_fpadd_parts+0x3bc>
 8802bd4:	10c07e26 	beq	r2,r3,8802dd0 <_fpadd_parts+0x248>
 8802bd8:	00c00084 	movi	r3,2
 8802bdc:	10c06726 	beq	r2,r3,8802d7c <_fpadd_parts+0x1f4>
 8802be0:	20c07b26 	beq	r4,r3,8802dd0 <_fpadd_parts+0x248>
 8802be4:	9dc00217 	ldw	r23,8(r19)
 8802be8:	28c00217 	ldw	r3,8(r5)
 8802bec:	9c400317 	ldw	r17,12(r19)
 8802bf0:	2bc00317 	ldw	r15,12(r5)
 8802bf4:	b8cdc83a 	sub	r6,r23,r3
 8802bf8:	9c800417 	ldw	r18,16(r19)
 8802bfc:	2c000417 	ldw	r16,16(r5)
 8802c00:	3009883a 	mov	r4,r6
 8802c04:	30009716 	blt	r6,zero,8802e64 <_fpadd_parts+0x2dc>
 8802c08:	00800fc4 	movi	r2,63
 8802c0c:	11806b16 	blt	r2,r6,8802dbc <_fpadd_parts+0x234>
 8802c10:	0100a40e 	bge	zero,r4,8802ea4 <_fpadd_parts+0x31c>
 8802c14:	35bff804 	addi	r22,r6,-32
 8802c18:	b000bc16 	blt	r22,zero,8802f0c <_fpadd_parts+0x384>
 8802c1c:	8596d83a 	srl	r11,r16,r22
 8802c20:	0019883a 	mov	r12,zero
 8802c24:	0013883a 	mov	r9,zero
 8802c28:	01000044 	movi	r4,1
 8802c2c:	0015883a 	mov	r10,zero
 8802c30:	b000be16 	blt	r22,zero,8802f2c <_fpadd_parts+0x3a4>
 8802c34:	2590983a 	sll	r8,r4,r22
 8802c38:	000f883a 	mov	r7,zero
 8802c3c:	00bfffc4 	movi	r2,-1
 8802c40:	3889883a 	add	r4,r7,r2
 8802c44:	408b883a 	add	r5,r8,r2
 8802c48:	21cd803a 	cmpltu	r6,r4,r7
 8802c4c:	314b883a 	add	r5,r6,r5
 8802c50:	7904703a 	and	r2,r15,r4
 8802c54:	8146703a 	and	r3,r16,r5
 8802c58:	10c4b03a 	or	r2,r2,r3
 8802c5c:	10000226 	beq	r2,zero,8802c68 <_fpadd_parts+0xe0>
 8802c60:	02400044 	movi	r9,1
 8802c64:	0015883a 	mov	r10,zero
 8802c68:	5a5eb03a 	or	r15,r11,r9
 8802c6c:	62a0b03a 	or	r16,r12,r10
 8802c70:	99400117 	ldw	r5,4(r19)
 8802c74:	a8800117 	ldw	r2,4(r21)
 8802c78:	28806e26 	beq	r5,r2,8802e34 <_fpadd_parts+0x2ac>
 8802c7c:	28006626 	beq	r5,zero,8802e18 <_fpadd_parts+0x290>
 8802c80:	7c45c83a 	sub	r2,r15,r17
 8802c84:	7889803a 	cmpltu	r4,r15,r2
 8802c88:	8487c83a 	sub	r3,r16,r18
 8802c8c:	1909c83a 	sub	r4,r3,r4
 8802c90:	100d883a 	mov	r6,r2
 8802c94:	200f883a 	mov	r7,r4
 8802c98:	38007716 	blt	r7,zero,8802e78 <_fpadd_parts+0x2f0>
 8802c9c:	a5c00215 	stw	r23,8(r20)
 8802ca0:	a1c00415 	stw	r7,16(r20)
 8802ca4:	a0000115 	stw	zero,4(r20)
 8802ca8:	a1800315 	stw	r6,12(r20)
 8802cac:	a2000317 	ldw	r8,12(r20)
 8802cb0:	a2400417 	ldw	r9,16(r20)
 8802cb4:	00bfffc4 	movi	r2,-1
 8802cb8:	408b883a 	add	r5,r8,r2
 8802cbc:	2a09803a 	cmpltu	r4,r5,r8
 8802cc0:	488d883a 	add	r6,r9,r2
 8802cc4:	01c40034 	movhi	r7,4096
 8802cc8:	39ffffc4 	addi	r7,r7,-1
 8802ccc:	218d883a 	add	r6,r4,r6
 8802cd0:	39801736 	bltu	r7,r6,8802d30 <_fpadd_parts+0x1a8>
 8802cd4:	31c06526 	beq	r6,r7,8802e6c <_fpadd_parts+0x2e4>
 8802cd8:	a3000217 	ldw	r12,8(r20)
 8802cdc:	4209883a 	add	r4,r8,r8
 8802ce0:	00bfffc4 	movi	r2,-1
 8802ce4:	220f803a 	cmpltu	r7,r4,r8
 8802ce8:	4a4b883a 	add	r5,r9,r9
 8802cec:	394f883a 	add	r7,r7,r5
 8802cf0:	2095883a 	add	r10,r4,r2
 8802cf4:	3897883a 	add	r11,r7,r2
 8802cf8:	510d803a 	cmpltu	r6,r10,r4
 8802cfc:	6099883a 	add	r12,r12,r2
 8802d00:	32d7883a 	add	r11,r6,r11
 8802d04:	00840034 	movhi	r2,4096
 8802d08:	10bfffc4 	addi	r2,r2,-1
 8802d0c:	2011883a 	mov	r8,r4
 8802d10:	3813883a 	mov	r9,r7
 8802d14:	a1000315 	stw	r4,12(r20)
 8802d18:	a1c00415 	stw	r7,16(r20)
 8802d1c:	a3000215 	stw	r12,8(r20)
 8802d20:	12c00336 	bltu	r2,r11,8802d30 <_fpadd_parts+0x1a8>
 8802d24:	58bfed1e 	bne	r11,r2,8802cdc <_fpadd_parts+0x154>
 8802d28:	00bfff84 	movi	r2,-2
 8802d2c:	12bfeb2e 	bgeu	r2,r10,8802cdc <_fpadd_parts+0x154>
 8802d30:	a2800417 	ldw	r10,16(r20)
 8802d34:	008000c4 	movi	r2,3
 8802d38:	00c80034 	movhi	r3,8192
 8802d3c:	18ffffc4 	addi	r3,r3,-1
 8802d40:	a2400317 	ldw	r9,12(r20)
 8802d44:	a0800015 	stw	r2,0(r20)
 8802d48:	1a802336 	bltu	r3,r10,8802dd8 <_fpadd_parts+0x250>
 8802d4c:	a027883a 	mov	r19,r20
 8802d50:	9805883a 	mov	r2,r19
 8802d54:	ddc00717 	ldw	r23,28(sp)
 8802d58:	dd800617 	ldw	r22,24(sp)
 8802d5c:	dd400517 	ldw	r21,20(sp)
 8802d60:	dd000417 	ldw	r20,16(sp)
 8802d64:	dcc00317 	ldw	r19,12(sp)
 8802d68:	dc800217 	ldw	r18,8(sp)
 8802d6c:	dc400117 	ldw	r17,4(sp)
 8802d70:	dc000017 	ldw	r16,0(sp)
 8802d74:	dec00804 	addi	sp,sp,32
 8802d78:	f800283a 	ret
 8802d7c:	20fff41e 	bne	r4,r3,8802d50 <_fpadd_parts+0x1c8>
 8802d80:	31000015 	stw	r4,0(r6)
 8802d84:	98800117 	ldw	r2,4(r19)
 8802d88:	30800115 	stw	r2,4(r6)
 8802d8c:	98c00217 	ldw	r3,8(r19)
 8802d90:	30c00215 	stw	r3,8(r6)
 8802d94:	98800317 	ldw	r2,12(r19)
 8802d98:	30800315 	stw	r2,12(r6)
 8802d9c:	98c00417 	ldw	r3,16(r19)
 8802da0:	30c00415 	stw	r3,16(r6)
 8802da4:	98800117 	ldw	r2,4(r19)
 8802da8:	28c00117 	ldw	r3,4(r5)
 8802dac:	3027883a 	mov	r19,r6
 8802db0:	10c4703a 	and	r2,r2,r3
 8802db4:	30800115 	stw	r2,4(r6)
 8802db8:	003fe506 	br	8802d50 <_fpadd_parts+0x1c8>
 8802dbc:	1dc02616 	blt	r3,r23,8802e58 <_fpadd_parts+0x2d0>
 8802dc0:	0023883a 	mov	r17,zero
 8802dc4:	182f883a 	mov	r23,r3
 8802dc8:	0025883a 	mov	r18,zero
 8802dcc:	003fa806 	br	8802c70 <_fpadd_parts+0xe8>
 8802dd0:	a827883a 	mov	r19,r21
 8802dd4:	003fde06 	br	8802d50 <_fpadd_parts+0x1c8>
 8802dd8:	01800044 	movi	r6,1
 8802ddc:	500497fa 	slli	r2,r10,31
 8802de0:	4808d07a 	srli	r4,r9,1
 8802de4:	518ad83a 	srl	r5,r10,r6
 8802de8:	a2000217 	ldw	r8,8(r20)
 8802dec:	1108b03a 	or	r4,r2,r4
 8802df0:	0007883a 	mov	r3,zero
 8802df4:	4984703a 	and	r2,r9,r6
 8802df8:	208cb03a 	or	r6,r4,r2
 8802dfc:	28ceb03a 	or	r7,r5,r3
 8802e00:	42000044 	addi	r8,r8,1
 8802e04:	a027883a 	mov	r19,r20
 8802e08:	a1c00415 	stw	r7,16(r20)
 8802e0c:	a2000215 	stw	r8,8(r20)
 8802e10:	a1800315 	stw	r6,12(r20)
 8802e14:	003fce06 	br	8802d50 <_fpadd_parts+0x1c8>
 8802e18:	8bc5c83a 	sub	r2,r17,r15
 8802e1c:	8889803a 	cmpltu	r4,r17,r2
 8802e20:	9407c83a 	sub	r3,r18,r16
 8802e24:	1909c83a 	sub	r4,r3,r4
 8802e28:	100d883a 	mov	r6,r2
 8802e2c:	200f883a 	mov	r7,r4
 8802e30:	003f9906 	br	8802c98 <_fpadd_parts+0x110>
 8802e34:	7c45883a 	add	r2,r15,r17
 8802e38:	13c9803a 	cmpltu	r4,r2,r15
 8802e3c:	8487883a 	add	r3,r16,r18
 8802e40:	20c9883a 	add	r4,r4,r3
 8802e44:	a1400115 	stw	r5,4(r20)
 8802e48:	a5c00215 	stw	r23,8(r20)
 8802e4c:	a0800315 	stw	r2,12(r20)
 8802e50:	a1000415 	stw	r4,16(r20)
 8802e54:	003fb606 	br	8802d30 <_fpadd_parts+0x1a8>
 8802e58:	001f883a 	mov	r15,zero
 8802e5c:	0021883a 	mov	r16,zero
 8802e60:	003f8306 	br	8802c70 <_fpadd_parts+0xe8>
 8802e64:	018dc83a 	sub	r6,zero,r6
 8802e68:	003f6706 	br	8802c08 <_fpadd_parts+0x80>
 8802e6c:	00bfff84 	movi	r2,-2
 8802e70:	117faf36 	bltu	r2,r5,8802d30 <_fpadd_parts+0x1a8>
 8802e74:	003f9806 	br	8802cd8 <_fpadd_parts+0x150>
 8802e78:	0005883a 	mov	r2,zero
 8802e7c:	1189c83a 	sub	r4,r2,r6
 8802e80:	1105803a 	cmpltu	r2,r2,r4
 8802e84:	01cbc83a 	sub	r5,zero,r7
 8802e88:	2885c83a 	sub	r2,r5,r2
 8802e8c:	01800044 	movi	r6,1
 8802e90:	a1800115 	stw	r6,4(r20)
 8802e94:	a5c00215 	stw	r23,8(r20)
 8802e98:	a1000315 	stw	r4,12(r20)
 8802e9c:	a0800415 	stw	r2,16(r20)
 8802ea0:	003f8206 	br	8802cac <_fpadd_parts+0x124>
 8802ea4:	203f7226 	beq	r4,zero,8802c70 <_fpadd_parts+0xe8>
 8802ea8:	35bff804 	addi	r22,r6,-32
 8802eac:	b9af883a 	add	r23,r23,r6
 8802eb0:	b0003116 	blt	r22,zero,8802f78 <_fpadd_parts+0x3f0>
 8802eb4:	959ad83a 	srl	r13,r18,r22
 8802eb8:	001d883a 	mov	r14,zero
 8802ebc:	000f883a 	mov	r7,zero
 8802ec0:	01000044 	movi	r4,1
 8802ec4:	0011883a 	mov	r8,zero
 8802ec8:	b0002516 	blt	r22,zero,8802f60 <_fpadd_parts+0x3d8>
 8802ecc:	2594983a 	sll	r10,r4,r22
 8802ed0:	0013883a 	mov	r9,zero
 8802ed4:	00bfffc4 	movi	r2,-1
 8802ed8:	4889883a 	add	r4,r9,r2
 8802edc:	508b883a 	add	r5,r10,r2
 8802ee0:	224d803a 	cmpltu	r6,r4,r9
 8802ee4:	314b883a 	add	r5,r6,r5
 8802ee8:	8904703a 	and	r2,r17,r4
 8802eec:	9146703a 	and	r3,r18,r5
 8802ef0:	10c4b03a 	or	r2,r2,r3
 8802ef4:	10000226 	beq	r2,zero,8802f00 <_fpadd_parts+0x378>
 8802ef8:	01c00044 	movi	r7,1
 8802efc:	0011883a 	mov	r8,zero
 8802f00:	69e2b03a 	or	r17,r13,r7
 8802f04:	7224b03a 	or	r18,r14,r8
 8802f08:	003f5906 	br	8802c70 <_fpadd_parts+0xe8>
 8802f0c:	8407883a 	add	r3,r16,r16
 8802f10:	008007c4 	movi	r2,31
 8802f14:	1185c83a 	sub	r2,r2,r6
 8802f18:	1886983a 	sll	r3,r3,r2
 8802f1c:	7996d83a 	srl	r11,r15,r6
 8802f20:	8198d83a 	srl	r12,r16,r6
 8802f24:	1ad6b03a 	or	r11,r3,r11
 8802f28:	003f3e06 	br	8802c24 <_fpadd_parts+0x9c>
 8802f2c:	2006d07a 	srli	r3,r4,1
 8802f30:	008007c4 	movi	r2,31
 8802f34:	1185c83a 	sub	r2,r2,r6
 8802f38:	1890d83a 	srl	r8,r3,r2
 8802f3c:	218e983a 	sll	r7,r4,r6
 8802f40:	003f3e06 	br	8802c3c <_fpadd_parts+0xb4>
 8802f44:	113f821e 	bne	r2,r4,8802d50 <_fpadd_parts+0x1c8>
 8802f48:	28c00117 	ldw	r3,4(r5)
 8802f4c:	98800117 	ldw	r2,4(r19)
 8802f50:	10ff7f26 	beq	r2,r3,8802d50 <_fpadd_parts+0x1c8>
 8802f54:	04c22074 	movhi	r19,2177
 8802f58:	9ce23a04 	addi	r19,r19,-30488
 8802f5c:	003f7c06 	br	8802d50 <_fpadd_parts+0x1c8>
 8802f60:	2006d07a 	srli	r3,r4,1
 8802f64:	008007c4 	movi	r2,31
 8802f68:	1185c83a 	sub	r2,r2,r6
 8802f6c:	1894d83a 	srl	r10,r3,r2
 8802f70:	2192983a 	sll	r9,r4,r6
 8802f74:	003fd706 	br	8802ed4 <_fpadd_parts+0x34c>
 8802f78:	9487883a 	add	r3,r18,r18
 8802f7c:	008007c4 	movi	r2,31
 8802f80:	1185c83a 	sub	r2,r2,r6
 8802f84:	1886983a 	sll	r3,r3,r2
 8802f88:	899ad83a 	srl	r13,r17,r6
 8802f8c:	919cd83a 	srl	r14,r18,r6
 8802f90:	1b5ab03a 	or	r13,r3,r13
 8802f94:	003fc906 	br	8802ebc <_fpadd_parts+0x334>

08802f98 <__subdf3>:
 8802f98:	deffea04 	addi	sp,sp,-88
 8802f9c:	dcc01415 	stw	r19,80(sp)
 8802fa0:	dcc00404 	addi	r19,sp,16
 8802fa4:	2011883a 	mov	r8,r4
 8802fa8:	2813883a 	mov	r9,r5
 8802fac:	dc401315 	stw	r17,76(sp)
 8802fb0:	d809883a 	mov	r4,sp
 8802fb4:	980b883a 	mov	r5,r19
 8802fb8:	dc400904 	addi	r17,sp,36
 8802fbc:	dfc01515 	stw	ra,84(sp)
 8802fc0:	da400115 	stw	r9,4(sp)
 8802fc4:	d9c00315 	stw	r7,12(sp)
 8802fc8:	da000015 	stw	r8,0(sp)
 8802fcc:	d9800215 	stw	r6,8(sp)
 8802fd0:	88043680 	call	8804368 <__unpack_d>
 8802fd4:	d9000204 	addi	r4,sp,8
 8802fd8:	880b883a 	mov	r5,r17
 8802fdc:	88043680 	call	8804368 <__unpack_d>
 8802fe0:	d8800a17 	ldw	r2,40(sp)
 8802fe4:	880b883a 	mov	r5,r17
 8802fe8:	9809883a 	mov	r4,r19
 8802fec:	d9800e04 	addi	r6,sp,56
 8802ff0:	1080005c 	xori	r2,r2,1
 8802ff4:	d8800a15 	stw	r2,40(sp)
 8802ff8:	8802b880 	call	8802b88 <_fpadd_parts>
 8802ffc:	1009883a 	mov	r4,r2
 8803000:	88040540 	call	8804054 <__pack_d>
 8803004:	dfc01517 	ldw	ra,84(sp)
 8803008:	dcc01417 	ldw	r19,80(sp)
 880300c:	dc401317 	ldw	r17,76(sp)
 8803010:	dec01604 	addi	sp,sp,88
 8803014:	f800283a 	ret

08803018 <__adddf3>:
 8803018:	deffea04 	addi	sp,sp,-88
 880301c:	dcc01415 	stw	r19,80(sp)
 8803020:	dcc00404 	addi	r19,sp,16
 8803024:	2011883a 	mov	r8,r4
 8803028:	2813883a 	mov	r9,r5
 880302c:	dc401315 	stw	r17,76(sp)
 8803030:	d809883a 	mov	r4,sp
 8803034:	980b883a 	mov	r5,r19
 8803038:	dc400904 	addi	r17,sp,36
 880303c:	dfc01515 	stw	ra,84(sp)
 8803040:	da400115 	stw	r9,4(sp)
 8803044:	d9c00315 	stw	r7,12(sp)
 8803048:	da000015 	stw	r8,0(sp)
 880304c:	d9800215 	stw	r6,8(sp)
 8803050:	88043680 	call	8804368 <__unpack_d>
 8803054:	d9000204 	addi	r4,sp,8
 8803058:	880b883a 	mov	r5,r17
 880305c:	88043680 	call	8804368 <__unpack_d>
 8803060:	d9800e04 	addi	r6,sp,56
 8803064:	9809883a 	mov	r4,r19
 8803068:	880b883a 	mov	r5,r17
 880306c:	8802b880 	call	8802b88 <_fpadd_parts>
 8803070:	1009883a 	mov	r4,r2
 8803074:	88040540 	call	8804054 <__pack_d>
 8803078:	dfc01517 	ldw	ra,84(sp)
 880307c:	dcc01417 	ldw	r19,80(sp)
 8803080:	dc401317 	ldw	r17,76(sp)
 8803084:	dec01604 	addi	sp,sp,88
 8803088:	f800283a 	ret

0880308c <__muldf3>:
 880308c:	deffe004 	addi	sp,sp,-128
 8803090:	dc401815 	stw	r17,96(sp)
 8803094:	dc400404 	addi	r17,sp,16
 8803098:	2011883a 	mov	r8,r4
 880309c:	2813883a 	mov	r9,r5
 88030a0:	dc001715 	stw	r16,92(sp)
 88030a4:	d809883a 	mov	r4,sp
 88030a8:	880b883a 	mov	r5,r17
 88030ac:	dc000904 	addi	r16,sp,36
 88030b0:	dfc01f15 	stw	ra,124(sp)
 88030b4:	da400115 	stw	r9,4(sp)
 88030b8:	d9c00315 	stw	r7,12(sp)
 88030bc:	da000015 	stw	r8,0(sp)
 88030c0:	d9800215 	stw	r6,8(sp)
 88030c4:	ddc01e15 	stw	r23,120(sp)
 88030c8:	dd801d15 	stw	r22,116(sp)
 88030cc:	dd401c15 	stw	r21,112(sp)
 88030d0:	dd001b15 	stw	r20,108(sp)
 88030d4:	dcc01a15 	stw	r19,104(sp)
 88030d8:	dc801915 	stw	r18,100(sp)
 88030dc:	88043680 	call	8804368 <__unpack_d>
 88030e0:	d9000204 	addi	r4,sp,8
 88030e4:	800b883a 	mov	r5,r16
 88030e8:	88043680 	call	8804368 <__unpack_d>
 88030ec:	d9000417 	ldw	r4,16(sp)
 88030f0:	00800044 	movi	r2,1
 88030f4:	1100102e 	bgeu	r2,r4,8803138 <__muldf3+0xac>
 88030f8:	d8c00917 	ldw	r3,36(sp)
 88030fc:	10c0062e 	bgeu	r2,r3,8803118 <__muldf3+0x8c>
 8803100:	00800104 	movi	r2,4
 8803104:	20800a26 	beq	r4,r2,8803130 <__muldf3+0xa4>
 8803108:	1880cc26 	beq	r3,r2,880343c <__muldf3+0x3b0>
 880310c:	00800084 	movi	r2,2
 8803110:	20800926 	beq	r4,r2,8803138 <__muldf3+0xac>
 8803114:	1880191e 	bne	r3,r2,880317c <__muldf3+0xf0>
 8803118:	d8c00a17 	ldw	r3,40(sp)
 880311c:	d8800517 	ldw	r2,20(sp)
 8803120:	8009883a 	mov	r4,r16
 8803124:	10c4c03a 	cmpne	r2,r2,r3
 8803128:	d8800a15 	stw	r2,40(sp)
 880312c:	00000706 	br	880314c <__muldf3+0xc0>
 8803130:	00800084 	movi	r2,2
 8803134:	1880c326 	beq	r3,r2,8803444 <__muldf3+0x3b8>
 8803138:	d8800517 	ldw	r2,20(sp)
 880313c:	d8c00a17 	ldw	r3,40(sp)
 8803140:	8809883a 	mov	r4,r17
 8803144:	10c4c03a 	cmpne	r2,r2,r3
 8803148:	d8800515 	stw	r2,20(sp)
 880314c:	88040540 	call	8804054 <__pack_d>
 8803150:	dfc01f17 	ldw	ra,124(sp)
 8803154:	ddc01e17 	ldw	r23,120(sp)
 8803158:	dd801d17 	ldw	r22,116(sp)
 880315c:	dd401c17 	ldw	r21,112(sp)
 8803160:	dd001b17 	ldw	r20,108(sp)
 8803164:	dcc01a17 	ldw	r19,104(sp)
 8803168:	dc801917 	ldw	r18,100(sp)
 880316c:	dc401817 	ldw	r17,96(sp)
 8803170:	dc001717 	ldw	r16,92(sp)
 8803174:	dec02004 	addi	sp,sp,128
 8803178:	f800283a 	ret
 880317c:	dd800717 	ldw	r22,28(sp)
 8803180:	dc800c17 	ldw	r18,48(sp)
 8803184:	002b883a 	mov	r21,zero
 8803188:	0023883a 	mov	r17,zero
 880318c:	a80b883a 	mov	r5,r21
 8803190:	b00d883a 	mov	r6,r22
 8803194:	880f883a 	mov	r7,r17
 8803198:	ddc00817 	ldw	r23,32(sp)
 880319c:	dcc00d17 	ldw	r19,52(sp)
 88031a0:	9009883a 	mov	r4,r18
 88031a4:	8803c400 	call	8803c40 <__muldi3>
 88031a8:	001b883a 	mov	r13,zero
 88031ac:	680f883a 	mov	r7,r13
 88031b0:	b009883a 	mov	r4,r22
 88031b4:	000b883a 	mov	r5,zero
 88031b8:	980d883a 	mov	r6,r19
 88031bc:	b82d883a 	mov	r22,r23
 88031c0:	002f883a 	mov	r23,zero
 88031c4:	db401615 	stw	r13,88(sp)
 88031c8:	d8801315 	stw	r2,76(sp)
 88031cc:	d8c01415 	stw	r3,80(sp)
 88031d0:	dcc01515 	stw	r19,84(sp)
 88031d4:	8803c400 	call	8803c40 <__muldi3>
 88031d8:	b00d883a 	mov	r6,r22
 88031dc:	000b883a 	mov	r5,zero
 88031e0:	9009883a 	mov	r4,r18
 88031e4:	b80f883a 	mov	r7,r23
 88031e8:	1021883a 	mov	r16,r2
 88031ec:	1823883a 	mov	r17,r3
 88031f0:	8803c400 	call	8803c40 <__muldi3>
 88031f4:	8085883a 	add	r2,r16,r2
 88031f8:	140d803a 	cmpltu	r6,r2,r16
 88031fc:	88c7883a 	add	r3,r17,r3
 8803200:	30cd883a 	add	r6,r6,r3
 8803204:	1029883a 	mov	r20,r2
 8803208:	302b883a 	mov	r21,r6
 880320c:	da801317 	ldw	r10,76(sp)
 8803210:	dac01417 	ldw	r11,80(sp)
 8803214:	db001517 	ldw	r12,84(sp)
 8803218:	db401617 	ldw	r13,88(sp)
 880321c:	3440612e 	bgeu	r6,r17,88033a4 <__muldf3+0x318>
 8803220:	0009883a 	mov	r4,zero
 8803224:	5105883a 	add	r2,r10,r4
 8803228:	128d803a 	cmpltu	r6,r2,r10
 880322c:	5d07883a 	add	r3,r11,r20
 8803230:	30cd883a 	add	r6,r6,r3
 8803234:	0021883a 	mov	r16,zero
 8803238:	04400044 	movi	r17,1
 880323c:	1025883a 	mov	r18,r2
 8803240:	3027883a 	mov	r19,r6
 8803244:	32c06236 	bltu	r6,r11,88033d0 <__muldf3+0x344>
 8803248:	59807a26 	beq	r11,r6,8803434 <__muldf3+0x3a8>
 880324c:	680b883a 	mov	r5,r13
 8803250:	b80f883a 	mov	r7,r23
 8803254:	6009883a 	mov	r4,r12
 8803258:	b00d883a 	mov	r6,r22
 880325c:	8803c400 	call	8803c40 <__muldi3>
 8803260:	1009883a 	mov	r4,r2
 8803264:	000f883a 	mov	r7,zero
 8803268:	1545883a 	add	r2,r2,r21
 880326c:	1111803a 	cmpltu	r8,r2,r4
 8803270:	19c7883a 	add	r3,r3,r7
 8803274:	40c7883a 	add	r3,r8,r3
 8803278:	88cb883a 	add	r5,r17,r3
 880327c:	d8c00617 	ldw	r3,24(sp)
 8803280:	8089883a 	add	r4,r16,r2
 8803284:	d8800b17 	ldw	r2,44(sp)
 8803288:	18c00104 	addi	r3,r3,4
 880328c:	240d803a 	cmpltu	r6,r4,r16
 8803290:	10c7883a 	add	r3,r2,r3
 8803294:	2013883a 	mov	r9,r4
 8803298:	d8800a17 	ldw	r2,40(sp)
 880329c:	d9000517 	ldw	r4,20(sp)
 88032a0:	314d883a 	add	r6,r6,r5
 88032a4:	3015883a 	mov	r10,r6
 88032a8:	2088c03a 	cmpne	r4,r4,r2
 88032ac:	00880034 	movhi	r2,8192
 88032b0:	10bfffc4 	addi	r2,r2,-1
 88032b4:	d9000f15 	stw	r4,60(sp)
 88032b8:	d8c01015 	stw	r3,64(sp)
 88032bc:	1180162e 	bgeu	r2,r6,8803318 <__muldf3+0x28c>
 88032c0:	1811883a 	mov	r8,r3
 88032c4:	101f883a 	mov	r15,r2
 88032c8:	980497fa 	slli	r2,r19,31
 88032cc:	9016d07a 	srli	r11,r18,1
 88032d0:	500697fa 	slli	r3,r10,31
 88032d4:	480cd07a 	srli	r6,r9,1
 88032d8:	500ed07a 	srli	r7,r10,1
 88032dc:	12d6b03a 	or	r11,r2,r11
 88032e0:	00800044 	movi	r2,1
 88032e4:	198cb03a 	or	r6,r3,r6
 88032e8:	4888703a 	and	r4,r9,r2
 88032ec:	9818d07a 	srli	r12,r19,1
 88032f0:	001b883a 	mov	r13,zero
 88032f4:	03a00034 	movhi	r14,32768
 88032f8:	3013883a 	mov	r9,r6
 88032fc:	3815883a 	mov	r10,r7
 8803300:	4091883a 	add	r8,r8,r2
 8803304:	20000226 	beq	r4,zero,8803310 <__muldf3+0x284>
 8803308:	5b64b03a 	or	r18,r11,r13
 880330c:	63a6b03a 	or	r19,r12,r14
 8803310:	7abfed36 	bltu	r15,r10,88032c8 <__muldf3+0x23c>
 8803314:	da001015 	stw	r8,64(sp)
 8803318:	00840034 	movhi	r2,4096
 880331c:	10bfffc4 	addi	r2,r2,-1
 8803320:	12801436 	bltu	r2,r10,8803374 <__muldf3+0x2e8>
 8803324:	da001017 	ldw	r8,64(sp)
 8803328:	101f883a 	mov	r15,r2
 880332c:	4a45883a 	add	r2,r9,r9
 8803330:	124d803a 	cmpltu	r6,r2,r9
 8803334:	5287883a 	add	r3,r10,r10
 8803338:	9497883a 	add	r11,r18,r18
 880333c:	5c8f803a 	cmpltu	r7,r11,r18
 8803340:	9cd9883a 	add	r12,r19,r19
 8803344:	01000044 	movi	r4,1
 8803348:	30cd883a 	add	r6,r6,r3
 880334c:	3b0f883a 	add	r7,r7,r12
 8803350:	423fffc4 	addi	r8,r8,-1
 8803354:	1013883a 	mov	r9,r2
 8803358:	3015883a 	mov	r10,r6
 880335c:	111ab03a 	or	r13,r2,r4
 8803360:	98003016 	blt	r19,zero,8803424 <__muldf3+0x398>
 8803364:	5825883a 	mov	r18,r11
 8803368:	3827883a 	mov	r19,r7
 880336c:	7abfef2e 	bgeu	r15,r10,880332c <__muldf3+0x2a0>
 8803370:	da001015 	stw	r8,64(sp)
 8803374:	00803fc4 	movi	r2,255
 8803378:	488e703a 	and	r7,r9,r2
 880337c:	00802004 	movi	r2,128
 8803380:	0007883a 	mov	r3,zero
 8803384:	0011883a 	mov	r8,zero
 8803388:	38801826 	beq	r7,r2,88033ec <__muldf3+0x360>
 880338c:	008000c4 	movi	r2,3
 8803390:	d9000e04 	addi	r4,sp,56
 8803394:	da801215 	stw	r10,72(sp)
 8803398:	d8800e15 	stw	r2,56(sp)
 880339c:	da401115 	stw	r9,68(sp)
 88033a0:	003f6a06 	br	880314c <__muldf3+0xc0>
 88033a4:	89802126 	beq	r17,r6,880342c <__muldf3+0x3a0>
 88033a8:	0009883a 	mov	r4,zero
 88033ac:	5105883a 	add	r2,r10,r4
 88033b0:	128d803a 	cmpltu	r6,r2,r10
 88033b4:	5d07883a 	add	r3,r11,r20
 88033b8:	30cd883a 	add	r6,r6,r3
 88033bc:	0021883a 	mov	r16,zero
 88033c0:	0023883a 	mov	r17,zero
 88033c4:	1025883a 	mov	r18,r2
 88033c8:	3027883a 	mov	r19,r6
 88033cc:	32ff9e2e 	bgeu	r6,r11,8803248 <__muldf3+0x1bc>
 88033d0:	00800044 	movi	r2,1
 88033d4:	8089883a 	add	r4,r16,r2
 88033d8:	240d803a 	cmpltu	r6,r4,r16
 88033dc:	344d883a 	add	r6,r6,r17
 88033e0:	2021883a 	mov	r16,r4
 88033e4:	3023883a 	mov	r17,r6
 88033e8:	003f9806 	br	880324c <__muldf3+0x1c0>
 88033ec:	403fe71e 	bne	r8,zero,880338c <__muldf3+0x300>
 88033f0:	01004004 	movi	r4,256
 88033f4:	4904703a 	and	r2,r9,r4
 88033f8:	10c4b03a 	or	r2,r2,r3
 88033fc:	103fe31e 	bne	r2,zero,880338c <__muldf3+0x300>
 8803400:	94c4b03a 	or	r2,r18,r19
 8803404:	103fe126 	beq	r2,zero,880338c <__muldf3+0x300>
 8803408:	49c5883a 	add	r2,r9,r7
 880340c:	1251803a 	cmpltu	r8,r2,r9
 8803410:	4291883a 	add	r8,r8,r10
 8803414:	013fc004 	movi	r4,-256
 8803418:	1112703a 	and	r9,r2,r4
 880341c:	4015883a 	mov	r10,r8
 8803420:	003fda06 	br	880338c <__muldf3+0x300>
 8803424:	6813883a 	mov	r9,r13
 8803428:	003fce06 	br	8803364 <__muldf3+0x2d8>
 880342c:	143f7c36 	bltu	r2,r16,8803220 <__muldf3+0x194>
 8803430:	003fdd06 	br	88033a8 <__muldf3+0x31c>
 8803434:	12bf852e 	bgeu	r2,r10,880324c <__muldf3+0x1c0>
 8803438:	003fe506 	br	88033d0 <__muldf3+0x344>
 880343c:	00800084 	movi	r2,2
 8803440:	20bf351e 	bne	r4,r2,8803118 <__muldf3+0x8c>
 8803444:	01022074 	movhi	r4,2177
 8803448:	21223a04 	addi	r4,r4,-30488
 880344c:	003f3f06 	br	880314c <__muldf3+0xc0>

08803450 <__divdf3>:
 8803450:	deffed04 	addi	sp,sp,-76
 8803454:	dcc01115 	stw	r19,68(sp)
 8803458:	dcc00404 	addi	r19,sp,16
 880345c:	2011883a 	mov	r8,r4
 8803460:	2813883a 	mov	r9,r5
 8803464:	dc000e15 	stw	r16,56(sp)
 8803468:	d809883a 	mov	r4,sp
 880346c:	980b883a 	mov	r5,r19
 8803470:	dc000904 	addi	r16,sp,36
 8803474:	dfc01215 	stw	ra,72(sp)
 8803478:	da400115 	stw	r9,4(sp)
 880347c:	d9c00315 	stw	r7,12(sp)
 8803480:	da000015 	stw	r8,0(sp)
 8803484:	d9800215 	stw	r6,8(sp)
 8803488:	dc801015 	stw	r18,64(sp)
 880348c:	dc400f15 	stw	r17,60(sp)
 8803490:	88043680 	call	8804368 <__unpack_d>
 8803494:	d9000204 	addi	r4,sp,8
 8803498:	800b883a 	mov	r5,r16
 880349c:	88043680 	call	8804368 <__unpack_d>
 88034a0:	d9000417 	ldw	r4,16(sp)
 88034a4:	00800044 	movi	r2,1
 88034a8:	11000b2e 	bgeu	r2,r4,88034d8 <__divdf3+0x88>
 88034ac:	d9400917 	ldw	r5,36(sp)
 88034b0:	1140762e 	bgeu	r2,r5,880368c <__divdf3+0x23c>
 88034b4:	d8800517 	ldw	r2,20(sp)
 88034b8:	d8c00a17 	ldw	r3,40(sp)
 88034bc:	01800104 	movi	r6,4
 88034c0:	10c4f03a 	xor	r2,r2,r3
 88034c4:	d8800515 	stw	r2,20(sp)
 88034c8:	21800226 	beq	r4,r6,88034d4 <__divdf3+0x84>
 88034cc:	00800084 	movi	r2,2
 88034d0:	2080141e 	bne	r4,r2,8803524 <__divdf3+0xd4>
 88034d4:	29000926 	beq	r5,r4,88034fc <__divdf3+0xac>
 88034d8:	9809883a 	mov	r4,r19
 88034dc:	88040540 	call	8804054 <__pack_d>
 88034e0:	dfc01217 	ldw	ra,72(sp)
 88034e4:	dcc01117 	ldw	r19,68(sp)
 88034e8:	dc801017 	ldw	r18,64(sp)
 88034ec:	dc400f17 	ldw	r17,60(sp)
 88034f0:	dc000e17 	ldw	r16,56(sp)
 88034f4:	dec01304 	addi	sp,sp,76
 88034f8:	f800283a 	ret
 88034fc:	01022074 	movhi	r4,2177
 8803500:	21223a04 	addi	r4,r4,-30488
 8803504:	88040540 	call	8804054 <__pack_d>
 8803508:	dfc01217 	ldw	ra,72(sp)
 880350c:	dcc01117 	ldw	r19,68(sp)
 8803510:	dc801017 	ldw	r18,64(sp)
 8803514:	dc400f17 	ldw	r17,60(sp)
 8803518:	dc000e17 	ldw	r16,56(sp)
 880351c:	dec01304 	addi	sp,sp,76
 8803520:	f800283a 	ret
 8803524:	29805b26 	beq	r5,r6,8803694 <__divdf3+0x244>
 8803528:	28802d26 	beq	r5,r2,88035e0 <__divdf3+0x190>
 880352c:	d8c00617 	ldw	r3,24(sp)
 8803530:	d8800b17 	ldw	r2,44(sp)
 8803534:	d9c00817 	ldw	r7,32(sp)
 8803538:	dc400d17 	ldw	r17,52(sp)
 880353c:	188bc83a 	sub	r5,r3,r2
 8803540:	d9800717 	ldw	r6,28(sp)
 8803544:	dc000c17 	ldw	r16,48(sp)
 8803548:	d9400615 	stw	r5,24(sp)
 880354c:	3c403836 	bltu	r7,r17,8803630 <__divdf3+0x1e0>
 8803550:	89c03626 	beq	r17,r7,880362c <__divdf3+0x1dc>
 8803554:	0015883a 	mov	r10,zero
 8803558:	001d883a 	mov	r14,zero
 880355c:	02c40034 	movhi	r11,4096
 8803560:	001f883a 	mov	r15,zero
 8803564:	003f883a 	mov	ra,zero
 8803568:	04800f44 	movi	r18,61
 880356c:	00000f06 	br	88035ac <__divdf3+0x15c>
 8803570:	601d883a 	mov	r14,r12
 8803574:	681f883a 	mov	r15,r13
 8803578:	400d883a 	mov	r6,r8
 880357c:	100f883a 	mov	r7,r2
 8803580:	3191883a 	add	r8,r6,r6
 8803584:	5808d07a 	srli	r4,r11,1
 8803588:	4185803a 	cmpltu	r2,r8,r6
 880358c:	39d3883a 	add	r9,r7,r7
 8803590:	28c6b03a 	or	r3,r5,r3
 8803594:	1245883a 	add	r2,r2,r9
 8803598:	1815883a 	mov	r10,r3
 880359c:	2017883a 	mov	r11,r4
 88035a0:	400d883a 	mov	r6,r8
 88035a4:	100f883a 	mov	r7,r2
 88035a8:	fc801726 	beq	ra,r18,8803608 <__divdf3+0x1b8>
 88035ac:	580a97fa 	slli	r5,r11,31
 88035b0:	5006d07a 	srli	r3,r10,1
 88035b4:	ffc00044 	addi	ra,ra,1
 88035b8:	3c7ff136 	bltu	r7,r17,8803580 <__divdf3+0x130>
 88035bc:	3411c83a 	sub	r8,r6,r16
 88035c0:	3205803a 	cmpltu	r2,r6,r8
 88035c4:	3c53c83a 	sub	r9,r7,r17
 88035c8:	7298b03a 	or	r12,r14,r10
 88035cc:	7adab03a 	or	r13,r15,r11
 88035d0:	4885c83a 	sub	r2,r9,r2
 88035d4:	89ffe61e 	bne	r17,r7,8803570 <__divdf3+0x120>
 88035d8:	343fe936 	bltu	r6,r16,8803580 <__divdf3+0x130>
 88035dc:	003fe406 	br	8803570 <__divdf3+0x120>
 88035e0:	9809883a 	mov	r4,r19
 88035e4:	d9800415 	stw	r6,16(sp)
 88035e8:	88040540 	call	8804054 <__pack_d>
 88035ec:	dfc01217 	ldw	ra,72(sp)
 88035f0:	dcc01117 	ldw	r19,68(sp)
 88035f4:	dc801017 	ldw	r18,64(sp)
 88035f8:	dc400f17 	ldw	r17,60(sp)
 88035fc:	dc000e17 	ldw	r16,56(sp)
 8803600:	dec01304 	addi	sp,sp,76
 8803604:	f800283a 	ret
 8803608:	00803fc4 	movi	r2,255
 880360c:	7090703a 	and	r8,r14,r2
 8803610:	00802004 	movi	r2,128
 8803614:	0007883a 	mov	r3,zero
 8803618:	0013883a 	mov	r9,zero
 880361c:	40800d26 	beq	r8,r2,8803654 <__divdf3+0x204>
 8803620:	dbc00815 	stw	r15,32(sp)
 8803624:	db800715 	stw	r14,28(sp)
 8803628:	003fab06 	br	88034d8 <__divdf3+0x88>
 880362c:	343fc92e 	bgeu	r6,r16,8803554 <__divdf3+0x104>
 8803630:	3185883a 	add	r2,r6,r6
 8803634:	1189803a 	cmpltu	r4,r2,r6
 8803638:	39c7883a 	add	r3,r7,r7
 880363c:	20c9883a 	add	r4,r4,r3
 8803640:	297fffc4 	addi	r5,r5,-1
 8803644:	100d883a 	mov	r6,r2
 8803648:	200f883a 	mov	r7,r4
 880364c:	d9400615 	stw	r5,24(sp)
 8803650:	003fc006 	br	8803554 <__divdf3+0x104>
 8803654:	483ff21e 	bne	r9,zero,8803620 <__divdf3+0x1d0>
 8803658:	01004004 	movi	r4,256
 880365c:	7104703a 	and	r2,r14,r4
 8803660:	10c4b03a 	or	r2,r2,r3
 8803664:	103fee1e 	bne	r2,zero,8803620 <__divdf3+0x1d0>
 8803668:	31c4b03a 	or	r2,r6,r7
 880366c:	103fec26 	beq	r2,zero,8803620 <__divdf3+0x1d0>
 8803670:	7205883a 	add	r2,r14,r8
 8803674:	1391803a 	cmpltu	r8,r2,r14
 8803678:	43d1883a 	add	r8,r8,r15
 880367c:	013fc004 	movi	r4,-256
 8803680:	111c703a 	and	r14,r2,r4
 8803684:	401f883a 	mov	r15,r8
 8803688:	003fe506 	br	8803620 <__divdf3+0x1d0>
 880368c:	8009883a 	mov	r4,r16
 8803690:	003f9206 	br	88034dc <__divdf3+0x8c>
 8803694:	9809883a 	mov	r4,r19
 8803698:	d8000715 	stw	zero,28(sp)
 880369c:	d8000815 	stw	zero,32(sp)
 88036a0:	d8000615 	stw	zero,24(sp)
 88036a4:	003f8d06 	br	88034dc <__divdf3+0x8c>

088036a8 <__eqdf2>:
 88036a8:	deffef04 	addi	sp,sp,-68
 88036ac:	dc400f15 	stw	r17,60(sp)
 88036b0:	dc400404 	addi	r17,sp,16
 88036b4:	2005883a 	mov	r2,r4
 88036b8:	2807883a 	mov	r3,r5
 88036bc:	dc000e15 	stw	r16,56(sp)
 88036c0:	d809883a 	mov	r4,sp
 88036c4:	880b883a 	mov	r5,r17
 88036c8:	dc000904 	addi	r16,sp,36
 88036cc:	d8c00115 	stw	r3,4(sp)
 88036d0:	d8800015 	stw	r2,0(sp)
 88036d4:	d9800215 	stw	r6,8(sp)
 88036d8:	dfc01015 	stw	ra,64(sp)
 88036dc:	d9c00315 	stw	r7,12(sp)
 88036e0:	88043680 	call	8804368 <__unpack_d>
 88036e4:	d9000204 	addi	r4,sp,8
 88036e8:	800b883a 	mov	r5,r16
 88036ec:	88043680 	call	8804368 <__unpack_d>
 88036f0:	d8800417 	ldw	r2,16(sp)
 88036f4:	00c00044 	movi	r3,1
 88036f8:	180d883a 	mov	r6,r3
 88036fc:	1880062e 	bgeu	r3,r2,8803718 <__eqdf2+0x70>
 8803700:	d8800917 	ldw	r2,36(sp)
 8803704:	8809883a 	mov	r4,r17
 8803708:	800b883a 	mov	r5,r16
 880370c:	1880022e 	bgeu	r3,r2,8803718 <__eqdf2+0x70>
 8803710:	88044a00 	call	88044a0 <__fpcmp_parts_d>
 8803714:	100d883a 	mov	r6,r2
 8803718:	3005883a 	mov	r2,r6
 880371c:	dfc01017 	ldw	ra,64(sp)
 8803720:	dc400f17 	ldw	r17,60(sp)
 8803724:	dc000e17 	ldw	r16,56(sp)
 8803728:	dec01104 	addi	sp,sp,68
 880372c:	f800283a 	ret

08803730 <__nedf2>:
 8803730:	deffef04 	addi	sp,sp,-68
 8803734:	dc400f15 	stw	r17,60(sp)
 8803738:	dc400404 	addi	r17,sp,16
 880373c:	2005883a 	mov	r2,r4
 8803740:	2807883a 	mov	r3,r5
 8803744:	dc000e15 	stw	r16,56(sp)
 8803748:	d809883a 	mov	r4,sp
 880374c:	880b883a 	mov	r5,r17
 8803750:	dc000904 	addi	r16,sp,36
 8803754:	d8c00115 	stw	r3,4(sp)
 8803758:	d8800015 	stw	r2,0(sp)
 880375c:	d9800215 	stw	r6,8(sp)
 8803760:	dfc01015 	stw	ra,64(sp)
 8803764:	d9c00315 	stw	r7,12(sp)
 8803768:	88043680 	call	8804368 <__unpack_d>
 880376c:	d9000204 	addi	r4,sp,8
 8803770:	800b883a 	mov	r5,r16
 8803774:	88043680 	call	8804368 <__unpack_d>
 8803778:	d8800417 	ldw	r2,16(sp)
 880377c:	00c00044 	movi	r3,1
 8803780:	180d883a 	mov	r6,r3
 8803784:	1880062e 	bgeu	r3,r2,88037a0 <__nedf2+0x70>
 8803788:	d8800917 	ldw	r2,36(sp)
 880378c:	8809883a 	mov	r4,r17
 8803790:	800b883a 	mov	r5,r16
 8803794:	1880022e 	bgeu	r3,r2,88037a0 <__nedf2+0x70>
 8803798:	88044a00 	call	88044a0 <__fpcmp_parts_d>
 880379c:	100d883a 	mov	r6,r2
 88037a0:	3005883a 	mov	r2,r6
 88037a4:	dfc01017 	ldw	ra,64(sp)
 88037a8:	dc400f17 	ldw	r17,60(sp)
 88037ac:	dc000e17 	ldw	r16,56(sp)
 88037b0:	dec01104 	addi	sp,sp,68
 88037b4:	f800283a 	ret

088037b8 <__gtdf2>:
 88037b8:	deffef04 	addi	sp,sp,-68
 88037bc:	dc400f15 	stw	r17,60(sp)
 88037c0:	dc400404 	addi	r17,sp,16
 88037c4:	2005883a 	mov	r2,r4
 88037c8:	2807883a 	mov	r3,r5
 88037cc:	dc000e15 	stw	r16,56(sp)
 88037d0:	d809883a 	mov	r4,sp
 88037d4:	880b883a 	mov	r5,r17
 88037d8:	dc000904 	addi	r16,sp,36
 88037dc:	d8c00115 	stw	r3,4(sp)
 88037e0:	d8800015 	stw	r2,0(sp)
 88037e4:	d9800215 	stw	r6,8(sp)
 88037e8:	dfc01015 	stw	ra,64(sp)
 88037ec:	d9c00315 	stw	r7,12(sp)
 88037f0:	88043680 	call	8804368 <__unpack_d>
 88037f4:	d9000204 	addi	r4,sp,8
 88037f8:	800b883a 	mov	r5,r16
 88037fc:	88043680 	call	8804368 <__unpack_d>
 8803800:	d8800417 	ldw	r2,16(sp)
 8803804:	00c00044 	movi	r3,1
 8803808:	01bfffc4 	movi	r6,-1
 880380c:	1880062e 	bgeu	r3,r2,8803828 <__gtdf2+0x70>
 8803810:	d8800917 	ldw	r2,36(sp)
 8803814:	8809883a 	mov	r4,r17
 8803818:	800b883a 	mov	r5,r16
 880381c:	1880022e 	bgeu	r3,r2,8803828 <__gtdf2+0x70>
 8803820:	88044a00 	call	88044a0 <__fpcmp_parts_d>
 8803824:	100d883a 	mov	r6,r2
 8803828:	3005883a 	mov	r2,r6
 880382c:	dfc01017 	ldw	ra,64(sp)
 8803830:	dc400f17 	ldw	r17,60(sp)
 8803834:	dc000e17 	ldw	r16,56(sp)
 8803838:	dec01104 	addi	sp,sp,68
 880383c:	f800283a 	ret

08803840 <__ltdf2>:
 8803840:	deffef04 	addi	sp,sp,-68
 8803844:	dc400f15 	stw	r17,60(sp)
 8803848:	dc400404 	addi	r17,sp,16
 880384c:	2005883a 	mov	r2,r4
 8803850:	2807883a 	mov	r3,r5
 8803854:	dc000e15 	stw	r16,56(sp)
 8803858:	d809883a 	mov	r4,sp
 880385c:	880b883a 	mov	r5,r17
 8803860:	dc000904 	addi	r16,sp,36
 8803864:	d8c00115 	stw	r3,4(sp)
 8803868:	d8800015 	stw	r2,0(sp)
 880386c:	d9800215 	stw	r6,8(sp)
 8803870:	dfc01015 	stw	ra,64(sp)
 8803874:	d9c00315 	stw	r7,12(sp)
 8803878:	88043680 	call	8804368 <__unpack_d>
 880387c:	d9000204 	addi	r4,sp,8
 8803880:	800b883a 	mov	r5,r16
 8803884:	88043680 	call	8804368 <__unpack_d>
 8803888:	d8800417 	ldw	r2,16(sp)
 880388c:	00c00044 	movi	r3,1
 8803890:	180d883a 	mov	r6,r3
 8803894:	1880062e 	bgeu	r3,r2,88038b0 <__ltdf2+0x70>
 8803898:	d8800917 	ldw	r2,36(sp)
 880389c:	8809883a 	mov	r4,r17
 88038a0:	800b883a 	mov	r5,r16
 88038a4:	1880022e 	bgeu	r3,r2,88038b0 <__ltdf2+0x70>
 88038a8:	88044a00 	call	88044a0 <__fpcmp_parts_d>
 88038ac:	100d883a 	mov	r6,r2
 88038b0:	3005883a 	mov	r2,r6
 88038b4:	dfc01017 	ldw	ra,64(sp)
 88038b8:	dc400f17 	ldw	r17,60(sp)
 88038bc:	dc000e17 	ldw	r16,56(sp)
 88038c0:	dec01104 	addi	sp,sp,68
 88038c4:	f800283a 	ret

088038c8 <__ledf2>:
 88038c8:	deffef04 	addi	sp,sp,-68
 88038cc:	dc400f15 	stw	r17,60(sp)
 88038d0:	dc400404 	addi	r17,sp,16
 88038d4:	2005883a 	mov	r2,r4
 88038d8:	2807883a 	mov	r3,r5
 88038dc:	dc000e15 	stw	r16,56(sp)
 88038e0:	d809883a 	mov	r4,sp
 88038e4:	880b883a 	mov	r5,r17
 88038e8:	dc000904 	addi	r16,sp,36
 88038ec:	d8c00115 	stw	r3,4(sp)
 88038f0:	d8800015 	stw	r2,0(sp)
 88038f4:	d9800215 	stw	r6,8(sp)
 88038f8:	dfc01015 	stw	ra,64(sp)
 88038fc:	d9c00315 	stw	r7,12(sp)
 8803900:	88043680 	call	8804368 <__unpack_d>
 8803904:	d9000204 	addi	r4,sp,8
 8803908:	800b883a 	mov	r5,r16
 880390c:	88043680 	call	8804368 <__unpack_d>
 8803910:	d8800417 	ldw	r2,16(sp)
 8803914:	00c00044 	movi	r3,1
 8803918:	180d883a 	mov	r6,r3
 880391c:	1880062e 	bgeu	r3,r2,8803938 <__ledf2+0x70>
 8803920:	d8800917 	ldw	r2,36(sp)
 8803924:	8809883a 	mov	r4,r17
 8803928:	800b883a 	mov	r5,r16
 880392c:	1880022e 	bgeu	r3,r2,8803938 <__ledf2+0x70>
 8803930:	88044a00 	call	88044a0 <__fpcmp_parts_d>
 8803934:	100d883a 	mov	r6,r2
 8803938:	3005883a 	mov	r2,r6
 880393c:	dfc01017 	ldw	ra,64(sp)
 8803940:	dc400f17 	ldw	r17,60(sp)
 8803944:	dc000e17 	ldw	r16,56(sp)
 8803948:	dec01104 	addi	sp,sp,68
 880394c:	f800283a 	ret

08803950 <__floatsidf>:
 8803950:	2006d7fa 	srli	r3,r4,31
 8803954:	defff604 	addi	sp,sp,-40
 8803958:	008000c4 	movi	r2,3
 880395c:	dfc00915 	stw	ra,36(sp)
 8803960:	dcc00815 	stw	r19,32(sp)
 8803964:	dc800715 	stw	r18,28(sp)
 8803968:	dc400615 	stw	r17,24(sp)
 880396c:	dc000515 	stw	r16,20(sp)
 8803970:	d8800015 	stw	r2,0(sp)
 8803974:	d8c00115 	stw	r3,4(sp)
 8803978:	20000f1e 	bne	r4,zero,88039b8 <__floatsidf+0x68>
 880397c:	00800084 	movi	r2,2
 8803980:	d8800015 	stw	r2,0(sp)
 8803984:	d809883a 	mov	r4,sp
 8803988:	88040540 	call	8804054 <__pack_d>
 880398c:	1009883a 	mov	r4,r2
 8803990:	180b883a 	mov	r5,r3
 8803994:	2005883a 	mov	r2,r4
 8803998:	2807883a 	mov	r3,r5
 880399c:	dfc00917 	ldw	ra,36(sp)
 88039a0:	dcc00817 	ldw	r19,32(sp)
 88039a4:	dc800717 	ldw	r18,28(sp)
 88039a8:	dc400617 	ldw	r17,24(sp)
 88039ac:	dc000517 	ldw	r16,20(sp)
 88039b0:	dec00a04 	addi	sp,sp,40
 88039b4:	f800283a 	ret
 88039b8:	00800f04 	movi	r2,60
 88039bc:	1807003a 	cmpeq	r3,r3,zero
 88039c0:	d8800215 	stw	r2,8(sp)
 88039c4:	18001126 	beq	r3,zero,8803a0c <__floatsidf+0xbc>
 88039c8:	0027883a 	mov	r19,zero
 88039cc:	2025883a 	mov	r18,r4
 88039d0:	d9000315 	stw	r4,12(sp)
 88039d4:	dcc00415 	stw	r19,16(sp)
 88039d8:	8803cd80 	call	8803cd8 <__clzsi2>
 88039dc:	11000744 	addi	r4,r2,29
 88039e0:	013fe80e 	bge	zero,r4,8803984 <__floatsidf+0x34>
 88039e4:	10bfff44 	addi	r2,r2,-3
 88039e8:	10000c16 	blt	r2,zero,8803a1c <__floatsidf+0xcc>
 88039ec:	90a2983a 	sll	r17,r18,r2
 88039f0:	0021883a 	mov	r16,zero
 88039f4:	d8800217 	ldw	r2,8(sp)
 88039f8:	dc400415 	stw	r17,16(sp)
 88039fc:	dc000315 	stw	r16,12(sp)
 8803a00:	1105c83a 	sub	r2,r2,r4
 8803a04:	d8800215 	stw	r2,8(sp)
 8803a08:	003fde06 	br	8803984 <__floatsidf+0x34>
 8803a0c:	00a00034 	movhi	r2,32768
 8803a10:	20800a26 	beq	r4,r2,8803a3c <__floatsidf+0xec>
 8803a14:	0109c83a 	sub	r4,zero,r4
 8803a18:	003feb06 	br	88039c8 <__floatsidf+0x78>
 8803a1c:	9006d07a 	srli	r3,r18,1
 8803a20:	008007c4 	movi	r2,31
 8803a24:	1105c83a 	sub	r2,r2,r4
 8803a28:	1886d83a 	srl	r3,r3,r2
 8803a2c:	9922983a 	sll	r17,r19,r4
 8803a30:	9120983a 	sll	r16,r18,r4
 8803a34:	1c62b03a 	or	r17,r3,r17
 8803a38:	003fee06 	br	88039f4 <__floatsidf+0xa4>
 8803a3c:	0009883a 	mov	r4,zero
 8803a40:	01707834 	movhi	r5,49632
 8803a44:	003fd306 	br	8803994 <__floatsidf+0x44>

08803a48 <__make_dp>:
 8803a48:	defff904 	addi	sp,sp,-28
 8803a4c:	d8c00717 	ldw	r3,28(sp)
 8803a50:	d9000015 	stw	r4,0(sp)
 8803a54:	d809883a 	mov	r4,sp
 8803a58:	dfc00515 	stw	ra,20(sp)
 8803a5c:	d9c00615 	stw	r7,24(sp)
 8803a60:	d9400115 	stw	r5,4(sp)
 8803a64:	d9800215 	stw	r6,8(sp)
 8803a68:	d8c00415 	stw	r3,16(sp)
 8803a6c:	d9c00315 	stw	r7,12(sp)
 8803a70:	88040540 	call	8804054 <__pack_d>
 8803a74:	dfc00517 	ldw	ra,20(sp)
 8803a78:	dec00704 	addi	sp,sp,28
 8803a7c:	f800283a 	ret

08803a80 <__truncdfsf2>:
 8803a80:	defff804 	addi	sp,sp,-32
 8803a84:	2005883a 	mov	r2,r4
 8803a88:	2807883a 	mov	r3,r5
 8803a8c:	d809883a 	mov	r4,sp
 8803a90:	d9400204 	addi	r5,sp,8
 8803a94:	d8c00115 	stw	r3,4(sp)
 8803a98:	d8800015 	stw	r2,0(sp)
 8803a9c:	dfc00715 	stw	ra,28(sp)
 8803aa0:	88043680 	call	8804368 <__unpack_d>
 8803aa4:	d9c00517 	ldw	r7,20(sp)
 8803aa8:	da000617 	ldw	r8,24(sp)
 8803aac:	02d00034 	movhi	r11,16384
 8803ab0:	5affffc4 	addi	r11,r11,-1
 8803ab4:	3812d7ba 	srli	r9,r7,30
 8803ab8:	401a90ba 	slli	r13,r8,2
 8803abc:	3ac4703a 	and	r2,r7,r11
 8803ac0:	0007883a 	mov	r3,zero
 8803ac4:	6a52b03a 	or	r9,r13,r9
 8803ac8:	10c4b03a 	or	r2,r2,r3
 8803acc:	d9000217 	ldw	r4,8(sp)
 8803ad0:	d9400317 	ldw	r5,12(sp)
 8803ad4:	d9800417 	ldw	r6,16(sp)
 8803ad8:	480f883a 	mov	r7,r9
 8803adc:	10000126 	beq	r2,zero,8803ae4 <__truncdfsf2+0x64>
 8803ae0:	49c00054 	ori	r7,r9,1
 8803ae4:	88040280 	call	8804028 <__make_fp>
 8803ae8:	dfc00717 	ldw	ra,28(sp)
 8803aec:	dec00804 	addi	sp,sp,32
 8803af0:	f800283a 	ret

08803af4 <udivmodsi4>:
 8803af4:	29001b2e 	bgeu	r5,r4,8803b64 <udivmodsi4+0x70>
 8803af8:	28001a16 	blt	r5,zero,8803b64 <udivmodsi4+0x70>
 8803afc:	00800044 	movi	r2,1
 8803b00:	0007883a 	mov	r3,zero
 8803b04:	01c007c4 	movi	r7,31
 8803b08:	00000306 	br	8803b18 <udivmodsi4+0x24>
 8803b0c:	19c01326 	beq	r3,r7,8803b5c <udivmodsi4+0x68>
 8803b10:	18c00044 	addi	r3,r3,1
 8803b14:	28000416 	blt	r5,zero,8803b28 <udivmodsi4+0x34>
 8803b18:	294b883a 	add	r5,r5,r5
 8803b1c:	1085883a 	add	r2,r2,r2
 8803b20:	293ffa36 	bltu	r5,r4,8803b0c <udivmodsi4+0x18>
 8803b24:	10000d26 	beq	r2,zero,8803b5c <udivmodsi4+0x68>
 8803b28:	0007883a 	mov	r3,zero
 8803b2c:	21400236 	bltu	r4,r5,8803b38 <udivmodsi4+0x44>
 8803b30:	2149c83a 	sub	r4,r4,r5
 8803b34:	1886b03a 	or	r3,r3,r2
 8803b38:	1004d07a 	srli	r2,r2,1
 8803b3c:	280ad07a 	srli	r5,r5,1
 8803b40:	103ffa1e 	bne	r2,zero,8803b2c <udivmodsi4+0x38>
 8803b44:	30000226 	beq	r6,zero,8803b50 <udivmodsi4+0x5c>
 8803b48:	2005883a 	mov	r2,r4
 8803b4c:	f800283a 	ret
 8803b50:	1809883a 	mov	r4,r3
 8803b54:	2005883a 	mov	r2,r4
 8803b58:	f800283a 	ret
 8803b5c:	0007883a 	mov	r3,zero
 8803b60:	003ff806 	br	8803b44 <udivmodsi4+0x50>
 8803b64:	00800044 	movi	r2,1
 8803b68:	0007883a 	mov	r3,zero
 8803b6c:	003fef06 	br	8803b2c <udivmodsi4+0x38>

08803b70 <__divsi3>:
 8803b70:	defffe04 	addi	sp,sp,-8
 8803b74:	dc000015 	stw	r16,0(sp)
 8803b78:	dfc00115 	stw	ra,4(sp)
 8803b7c:	0021883a 	mov	r16,zero
 8803b80:	20000c16 	blt	r4,zero,8803bb4 <__divsi3+0x44>
 8803b84:	000d883a 	mov	r6,zero
 8803b88:	28000e16 	blt	r5,zero,8803bc4 <__divsi3+0x54>
 8803b8c:	8803af40 	call	8803af4 <udivmodsi4>
 8803b90:	1007883a 	mov	r3,r2
 8803b94:	8005003a 	cmpeq	r2,r16,zero
 8803b98:	1000011e 	bne	r2,zero,8803ba0 <__divsi3+0x30>
 8803b9c:	00c7c83a 	sub	r3,zero,r3
 8803ba0:	1805883a 	mov	r2,r3
 8803ba4:	dfc00117 	ldw	ra,4(sp)
 8803ba8:	dc000017 	ldw	r16,0(sp)
 8803bac:	dec00204 	addi	sp,sp,8
 8803bb0:	f800283a 	ret
 8803bb4:	0109c83a 	sub	r4,zero,r4
 8803bb8:	04000044 	movi	r16,1
 8803bbc:	000d883a 	mov	r6,zero
 8803bc0:	283ff20e 	bge	r5,zero,8803b8c <__divsi3+0x1c>
 8803bc4:	014bc83a 	sub	r5,zero,r5
 8803bc8:	8021003a 	cmpeq	r16,r16,zero
 8803bcc:	003fef06 	br	8803b8c <__divsi3+0x1c>

08803bd0 <__modsi3>:
 8803bd0:	deffff04 	addi	sp,sp,-4
 8803bd4:	dfc00015 	stw	ra,0(sp)
 8803bd8:	01800044 	movi	r6,1
 8803bdc:	2807883a 	mov	r3,r5
 8803be0:	20000416 	blt	r4,zero,8803bf4 <__modsi3+0x24>
 8803be4:	28000c16 	blt	r5,zero,8803c18 <__modsi3+0x48>
 8803be8:	dfc00017 	ldw	ra,0(sp)
 8803bec:	dec00104 	addi	sp,sp,4
 8803bf0:	8803af41 	jmpi	8803af4 <udivmodsi4>
 8803bf4:	0109c83a 	sub	r4,zero,r4
 8803bf8:	28000b16 	blt	r5,zero,8803c28 <__modsi3+0x58>
 8803bfc:	180b883a 	mov	r5,r3
 8803c00:	01800044 	movi	r6,1
 8803c04:	8803af40 	call	8803af4 <udivmodsi4>
 8803c08:	0085c83a 	sub	r2,zero,r2
 8803c0c:	dfc00017 	ldw	ra,0(sp)
 8803c10:	dec00104 	addi	sp,sp,4
 8803c14:	f800283a 	ret
 8803c18:	014bc83a 	sub	r5,zero,r5
 8803c1c:	dfc00017 	ldw	ra,0(sp)
 8803c20:	dec00104 	addi	sp,sp,4
 8803c24:	8803af41 	jmpi	8803af4 <udivmodsi4>
 8803c28:	0147c83a 	sub	r3,zero,r5
 8803c2c:	003ff306 	br	8803bfc <__modsi3+0x2c>

08803c30 <__udivsi3>:
 8803c30:	000d883a 	mov	r6,zero
 8803c34:	8803af41 	jmpi	8803af4 <udivmodsi4>

08803c38 <__umodsi3>:
 8803c38:	01800044 	movi	r6,1
 8803c3c:	8803af41 	jmpi	8803af4 <udivmodsi4>

08803c40 <__muldi3>:
 8803c40:	2011883a 	mov	r8,r4
 8803c44:	427fffcc 	andi	r9,r8,65535
 8803c48:	4018d43a 	srli	r12,r8,16
 8803c4c:	32bfffcc 	andi	r10,r6,65535
 8803c50:	3016d43a 	srli	r11,r6,16
 8803c54:	4a85383a 	mul	r2,r9,r10
 8803c58:	6295383a 	mul	r10,r12,r10
 8803c5c:	4ad3383a 	mul	r9,r9,r11
 8803c60:	113fffcc 	andi	r4,r2,65535
 8803c64:	1004d43a 	srli	r2,r2,16
 8803c68:	4a93883a 	add	r9,r9,r10
 8803c6c:	3807883a 	mov	r3,r7
 8803c70:	1245883a 	add	r2,r2,r9
 8803c74:	280f883a 	mov	r7,r5
 8803c78:	180b883a 	mov	r5,r3
 8803c7c:	1006943a 	slli	r3,r2,16
 8803c80:	defffd04 	addi	sp,sp,-12
 8803c84:	dc800215 	stw	r18,8(sp)
 8803c88:	1907883a 	add	r3,r3,r4
 8803c8c:	dc400115 	stw	r17,4(sp)
 8803c90:	dc000015 	stw	r16,0(sp)
 8803c94:	4165383a 	mul	r18,r8,r5
 8803c98:	31e3383a 	mul	r17,r6,r7
 8803c9c:	1012d43a 	srli	r9,r2,16
 8803ca0:	62d9383a 	mul	r12,r12,r11
 8803ca4:	181f883a 	mov	r15,r3
 8803ca8:	1280022e 	bgeu	r2,r10,8803cb4 <__muldi3+0x74>
 8803cac:	00800074 	movhi	r2,1
 8803cb0:	6099883a 	add	r12,r12,r2
 8803cb4:	624d883a 	add	r6,r12,r9
 8803cb8:	9187883a 	add	r3,r18,r6
 8803cbc:	88c7883a 	add	r3,r17,r3
 8803cc0:	7805883a 	mov	r2,r15
 8803cc4:	dc800217 	ldw	r18,8(sp)
 8803cc8:	dc400117 	ldw	r17,4(sp)
 8803ccc:	dc000017 	ldw	r16,0(sp)
 8803cd0:	dec00304 	addi	sp,sp,12
 8803cd4:	f800283a 	ret

08803cd8 <__clzsi2>:
 8803cd8:	00bfffd4 	movui	r2,65535
 8803cdc:	11000e36 	bltu	r2,r4,8803d18 <__clzsi2+0x40>
 8803ce0:	00803fc4 	movi	r2,255
 8803ce4:	01400204 	movi	r5,8
 8803ce8:	0007883a 	mov	r3,zero
 8803cec:	11001036 	bltu	r2,r4,8803d30 <__clzsi2+0x58>
 8803cf0:	000b883a 	mov	r5,zero
 8803cf4:	20c6d83a 	srl	r3,r4,r3
 8803cf8:	00822074 	movhi	r2,2177
 8803cfc:	10a23f04 	addi	r2,r2,-30468
 8803d00:	1887883a 	add	r3,r3,r2
 8803d04:	18800003 	ldbu	r2,0(r3)
 8803d08:	00c00804 	movi	r3,32
 8803d0c:	2885883a 	add	r2,r5,r2
 8803d10:	1885c83a 	sub	r2,r3,r2
 8803d14:	f800283a 	ret
 8803d18:	01400404 	movi	r5,16
 8803d1c:	00804034 	movhi	r2,256
 8803d20:	10bfffc4 	addi	r2,r2,-1
 8803d24:	2807883a 	mov	r3,r5
 8803d28:	113ff22e 	bgeu	r2,r4,8803cf4 <__clzsi2+0x1c>
 8803d2c:	01400604 	movi	r5,24
 8803d30:	2807883a 	mov	r3,r5
 8803d34:	20c6d83a 	srl	r3,r4,r3
 8803d38:	00822074 	movhi	r2,2177
 8803d3c:	10a23f04 	addi	r2,r2,-30468
 8803d40:	1887883a 	add	r3,r3,r2
 8803d44:	18800003 	ldbu	r2,0(r3)
 8803d48:	00c00804 	movi	r3,32
 8803d4c:	2885883a 	add	r2,r5,r2
 8803d50:	1885c83a 	sub	r2,r3,r2
 8803d54:	f800283a 	ret

08803d58 <__pack_f>:
 8803d58:	20c00017 	ldw	r3,0(r4)
 8803d5c:	01c00044 	movi	r7,1
 8803d60:	21800317 	ldw	r6,12(r4)
 8803d64:	21400117 	ldw	r5,4(r4)
 8803d68:	38c02d2e 	bgeu	r7,r3,8803e20 <__pack_f+0xc8>
 8803d6c:	00800104 	movi	r2,4
 8803d70:	18802826 	beq	r3,r2,8803e14 <__pack_f+0xbc>
 8803d74:	00800084 	movi	r2,2
 8803d78:	18800126 	beq	r3,r2,8803d80 <__pack_f+0x28>
 8803d7c:	3000101e 	bne	r6,zero,8803dc0 <__pack_f+0x68>
 8803d80:	000d883a 	mov	r6,zero
 8803d84:	0007883a 	mov	r3,zero
 8803d88:	19003fcc 	andi	r4,r3,255
 8803d8c:	200895fa 	slli	r4,r4,23
 8803d90:	00c02034 	movhi	r3,128
 8803d94:	18ffffc4 	addi	r3,r3,-1
 8803d98:	30c6703a 	and	r3,r6,r3
 8803d9c:	10a0002c 	andhi	r2,r2,32768
 8803da0:	10c4b03a 	or	r2,r2,r3
 8803da4:	280a97fa 	slli	r5,r5,31
 8803da8:	1104b03a 	or	r2,r2,r4
 8803dac:	00e00034 	movhi	r3,32768
 8803db0:	18ffffc4 	addi	r3,r3,-1
 8803db4:	10c4703a 	and	r2,r2,r3
 8803db8:	1144b03a 	or	r2,r2,r5
 8803dbc:	f800283a 	ret
 8803dc0:	21000217 	ldw	r4,8(r4)
 8803dc4:	00bfe084 	movi	r2,-126
 8803dc8:	20801b16 	blt	r4,r2,8803e38 <__pack_f+0xe0>
 8803dcc:	00801fc4 	movi	r2,127
 8803dd0:	11001016 	blt	r2,r4,8803e14 <__pack_f+0xbc>
 8803dd4:	308e703a 	and	r7,r6,r2
 8803dd8:	2087883a 	add	r3,r4,r2
 8803ddc:	00801004 	movi	r2,64
 8803de0:	38800526 	beq	r7,r2,8803df8 <__pack_f+0xa0>
 8803de4:	31800fc4 	addi	r6,r6,63
 8803de8:	30000716 	blt	r6,zero,8803e08 <__pack_f+0xb0>
 8803dec:	300490ba 	slli	r2,r6,2
 8803df0:	100cd27a 	srli	r6,r2,9
 8803df4:	003fe406 	br	8803d88 <__pack_f+0x30>
 8803df8:	3080200c 	andi	r2,r6,128
 8803dfc:	103ffa26 	beq	r2,zero,8803de8 <__pack_f+0x90>
 8803e00:	31cd883a 	add	r6,r6,r7
 8803e04:	003ff806 	br	8803de8 <__pack_f+0x90>
 8803e08:	300cd07a 	srli	r6,r6,1
 8803e0c:	18c00044 	addi	r3,r3,1
 8803e10:	003ff606 	br	8803dec <__pack_f+0x94>
 8803e14:	000d883a 	mov	r6,zero
 8803e18:	00ffffc4 	movi	r3,-1
 8803e1c:	003fda06 	br	8803d88 <__pack_f+0x30>
 8803e20:	31800434 	orhi	r6,r6,16
 8803e24:	00802034 	movhi	r2,128
 8803e28:	10bfffc4 	addi	r2,r2,-1
 8803e2c:	308c703a 	and	r6,r6,r2
 8803e30:	00ffffc4 	movi	r3,-1
 8803e34:	003fd406 	br	8803d88 <__pack_f+0x30>
 8803e38:	1109c83a 	sub	r4,r2,r4
 8803e3c:	00800644 	movi	r2,25
 8803e40:	11001216 	blt	r2,r4,8803e8c <__pack_f+0x134>
 8803e44:	3904983a 	sll	r2,r7,r4
 8803e48:	3106d83a 	srl	r3,r6,r4
 8803e4c:	10bfffc4 	addi	r2,r2,-1
 8803e50:	3084703a 	and	r2,r6,r2
 8803e54:	1004c03a 	cmpne	r2,r2,zero
 8803e58:	1886b03a 	or	r3,r3,r2
 8803e5c:	19001fcc 	andi	r4,r3,127
 8803e60:	00801004 	movi	r2,64
 8803e64:	20800c26 	beq	r4,r2,8803e98 <__pack_f+0x140>
 8803e68:	18c00fc4 	addi	r3,r3,63
 8803e6c:	00900034 	movhi	r2,16384
 8803e70:	10bfffc4 	addi	r2,r2,-1
 8803e74:	180cd1fa 	srli	r6,r3,7
 8803e78:	10c7803a 	cmpltu	r3,r2,r3
 8803e7c:	00802034 	movhi	r2,128
 8803e80:	10bfffc4 	addi	r2,r2,-1
 8803e84:	308c703a 	and	r6,r6,r2
 8803e88:	003fbf06 	br	8803d88 <__pack_f+0x30>
 8803e8c:	0007883a 	mov	r3,zero
 8803e90:	000d883a 	mov	r6,zero
 8803e94:	003ff906 	br	8803e7c <__pack_f+0x124>
 8803e98:	1880200c 	andi	r2,r3,128
 8803e9c:	10000126 	beq	r2,zero,8803ea4 <__pack_f+0x14c>
 8803ea0:	1907883a 	add	r3,r3,r4
 8803ea4:	180cd1fa 	srli	r6,r3,7
 8803ea8:	00900034 	movhi	r2,16384
 8803eac:	10bfffc4 	addi	r2,r2,-1
 8803eb0:	10c7803a 	cmpltu	r3,r2,r3
 8803eb4:	003ff106 	br	8803e7c <__pack_f+0x124>

08803eb8 <__unpack_f>:
 8803eb8:	21800017 	ldw	r6,0(r4)
 8803ebc:	00c02034 	movhi	r3,128
 8803ec0:	18ffffc4 	addi	r3,r3,-1
 8803ec4:	3004d5fa 	srli	r2,r6,23
 8803ec8:	3008d7fa 	srli	r4,r6,31
 8803ecc:	30ce703a 	and	r7,r6,r3
 8803ed0:	10c03fcc 	andi	r3,r2,255
 8803ed4:	29000115 	stw	r4,4(r5)
 8803ed8:	1800131e 	bne	r3,zero,8803f28 <__unpack_f+0x70>
 8803edc:	38000f26 	beq	r7,zero,8803f1c <__unpack_f+0x64>
 8803ee0:	380691fa 	slli	r3,r7,7
 8803ee4:	01bfe084 	movi	r6,-126
 8803ee8:	008000c4 	movi	r2,3
 8803eec:	01100034 	movhi	r4,16384
 8803ef0:	213fffc4 	addi	r4,r4,-1
 8803ef4:	28800015 	stw	r2,0(r5)
 8803ef8:	29800215 	stw	r6,8(r5)
 8803efc:	20c00536 	bltu	r4,r3,8803f14 <__unpack_f+0x5c>
 8803f00:	3005883a 	mov	r2,r6
 8803f04:	18c7883a 	add	r3,r3,r3
 8803f08:	10bfffc4 	addi	r2,r2,-1
 8803f0c:	20fffd2e 	bgeu	r4,r3,8803f04 <__unpack_f+0x4c>
 8803f10:	28800215 	stw	r2,8(r5)
 8803f14:	28c00315 	stw	r3,12(r5)
 8803f18:	f800283a 	ret
 8803f1c:	00800084 	movi	r2,2
 8803f20:	28800015 	stw	r2,0(r5)
 8803f24:	f800283a 	ret
 8803f28:	00803fc4 	movi	r2,255
 8803f2c:	18800826 	beq	r3,r2,8803f50 <__unpack_f+0x98>
 8803f30:	380491fa 	slli	r2,r7,7
 8803f34:	18ffe044 	addi	r3,r3,-127
 8803f38:	28c00215 	stw	r3,8(r5)
 8803f3c:	10900034 	orhi	r2,r2,16384
 8803f40:	28800315 	stw	r2,12(r5)
 8803f44:	008000c4 	movi	r2,3
 8803f48:	28800015 	stw	r2,0(r5)
 8803f4c:	f800283a 	ret
 8803f50:	3800031e 	bne	r7,zero,8803f60 <__unpack_f+0xa8>
 8803f54:	00800104 	movi	r2,4
 8803f58:	28800015 	stw	r2,0(r5)
 8803f5c:	f800283a 	ret
 8803f60:	3080042c 	andhi	r2,r6,16
 8803f64:	10000426 	beq	r2,zero,8803f78 <__unpack_f+0xc0>
 8803f68:	00800044 	movi	r2,1
 8803f6c:	28800015 	stw	r2,0(r5)
 8803f70:	29c00315 	stw	r7,12(r5)
 8803f74:	f800283a 	ret
 8803f78:	28000015 	stw	zero,0(r5)
 8803f7c:	003ffc06 	br	8803f70 <__unpack_f+0xb8>

08803f80 <__fpcmp_parts_f>:
 8803f80:	21800017 	ldw	r6,0(r4)
 8803f84:	00c00044 	movi	r3,1
 8803f88:	19800a2e 	bgeu	r3,r6,8803fb4 <__fpcmp_parts_f+0x34>
 8803f8c:	28800017 	ldw	r2,0(r5)
 8803f90:	1880082e 	bgeu	r3,r2,8803fb4 <__fpcmp_parts_f+0x34>
 8803f94:	00c00104 	movi	r3,4
 8803f98:	30c01e26 	beq	r6,r3,8804014 <__fpcmp_parts_f+0x94>
 8803f9c:	10c01a26 	beq	r2,r3,8804008 <__fpcmp_parts_f+0x88>
 8803fa0:	00c00084 	movi	r3,2
 8803fa4:	30c00526 	beq	r6,r3,8803fbc <__fpcmp_parts_f+0x3c>
 8803fa8:	10c0071e 	bne	r2,r3,8803fc8 <__fpcmp_parts_f+0x48>
 8803fac:	20800117 	ldw	r2,4(r4)
 8803fb0:	1000091e 	bne	r2,zero,8803fd8 <__fpcmp_parts_f+0x58>
 8803fb4:	00800044 	movi	r2,1
 8803fb8:	f800283a 	ret
 8803fbc:	10c0121e 	bne	r2,r3,8804008 <__fpcmp_parts_f+0x88>
 8803fc0:	0005883a 	mov	r2,zero
 8803fc4:	f800283a 	ret
 8803fc8:	20c00117 	ldw	r3,4(r4)
 8803fcc:	28800117 	ldw	r2,4(r5)
 8803fd0:	18800326 	beq	r3,r2,8803fe0 <__fpcmp_parts_f+0x60>
 8803fd4:	183ff726 	beq	r3,zero,8803fb4 <__fpcmp_parts_f+0x34>
 8803fd8:	00bfffc4 	movi	r2,-1
 8803fdc:	f800283a 	ret
 8803fe0:	21800217 	ldw	r6,8(r4)
 8803fe4:	28800217 	ldw	r2,8(r5)
 8803fe8:	11bffa16 	blt	r2,r6,8803fd4 <__fpcmp_parts_f+0x54>
 8803fec:	30800416 	blt	r6,r2,8804000 <__fpcmp_parts_f+0x80>
 8803ff0:	21000317 	ldw	r4,12(r4)
 8803ff4:	29400317 	ldw	r5,12(r5)
 8803ff8:	293ff636 	bltu	r5,r4,8803fd4 <__fpcmp_parts_f+0x54>
 8803ffc:	217ff02e 	bgeu	r4,r5,8803fc0 <__fpcmp_parts_f+0x40>
 8804000:	183fec1e 	bne	r3,zero,8803fb4 <__fpcmp_parts_f+0x34>
 8804004:	003ff406 	br	8803fd8 <__fpcmp_parts_f+0x58>
 8804008:	28800117 	ldw	r2,4(r5)
 880400c:	103fe91e 	bne	r2,zero,8803fb4 <__fpcmp_parts_f+0x34>
 8804010:	003ff106 	br	8803fd8 <__fpcmp_parts_f+0x58>
 8804014:	11bfe51e 	bne	r2,r6,8803fac <__fpcmp_parts_f+0x2c>
 8804018:	28c00117 	ldw	r3,4(r5)
 880401c:	20800117 	ldw	r2,4(r4)
 8804020:	1885c83a 	sub	r2,r3,r2
 8804024:	f800283a 	ret

08804028 <__make_fp>:
 8804028:	defffb04 	addi	sp,sp,-20
 880402c:	d9000015 	stw	r4,0(sp)
 8804030:	d809883a 	mov	r4,sp
 8804034:	dfc00415 	stw	ra,16(sp)
 8804038:	d9400115 	stw	r5,4(sp)
 880403c:	d9800215 	stw	r6,8(sp)
 8804040:	d9c00315 	stw	r7,12(sp)
 8804044:	8803d580 	call	8803d58 <__pack_f>
 8804048:	dfc00417 	ldw	ra,16(sp)
 880404c:	dec00504 	addi	sp,sp,20
 8804050:	f800283a 	ret

08804054 <__pack_d>:
 8804054:	20c00017 	ldw	r3,0(r4)
 8804058:	defffd04 	addi	sp,sp,-12
 880405c:	dc000015 	stw	r16,0(sp)
 8804060:	dc800215 	stw	r18,8(sp)
 8804064:	dc400115 	stw	r17,4(sp)
 8804068:	00800044 	movi	r2,1
 880406c:	22000317 	ldw	r8,12(r4)
 8804070:	001f883a 	mov	r15,zero
 8804074:	22400417 	ldw	r9,16(r4)
 8804078:	24000117 	ldw	r16,4(r4)
 880407c:	10c0552e 	bgeu	r2,r3,88041d4 <__pack_d+0x180>
 8804080:	00800104 	movi	r2,4
 8804084:	18804f26 	beq	r3,r2,88041c4 <__pack_d+0x170>
 8804088:	00800084 	movi	r2,2
 880408c:	18800226 	beq	r3,r2,8804098 <__pack_d+0x44>
 8804090:	4244b03a 	or	r2,r8,r9
 8804094:	10001a1e 	bne	r2,zero,8804100 <__pack_d+0xac>
 8804098:	000d883a 	mov	r6,zero
 880409c:	000f883a 	mov	r7,zero
 88040a0:	0011883a 	mov	r8,zero
 88040a4:	00800434 	movhi	r2,16
 88040a8:	10bfffc4 	addi	r2,r2,-1
 88040ac:	301d883a 	mov	r14,r6
 88040b0:	3884703a 	and	r2,r7,r2
 88040b4:	400a953a 	slli	r5,r8,20
 88040b8:	79bffc2c 	andhi	r6,r15,65520
 88040bc:	308cb03a 	or	r6,r6,r2
 88040c0:	00e00434 	movhi	r3,32784
 88040c4:	18ffffc4 	addi	r3,r3,-1
 88040c8:	800497fa 	slli	r2,r16,31
 88040cc:	30c6703a 	and	r3,r6,r3
 88040d0:	1946b03a 	or	r3,r3,r5
 88040d4:	01600034 	movhi	r5,32768
 88040d8:	297fffc4 	addi	r5,r5,-1
 88040dc:	194a703a 	and	r5,r3,r5
 88040e0:	288ab03a 	or	r5,r5,r2
 88040e4:	2807883a 	mov	r3,r5
 88040e8:	7005883a 	mov	r2,r14
 88040ec:	dc800217 	ldw	r18,8(sp)
 88040f0:	dc400117 	ldw	r17,4(sp)
 88040f4:	dc000017 	ldw	r16,0(sp)
 88040f8:	dec00304 	addi	sp,sp,12
 88040fc:	f800283a 	ret
 8804100:	21000217 	ldw	r4,8(r4)
 8804104:	00bf0084 	movi	r2,-1022
 8804108:	20803f16 	blt	r4,r2,8804208 <__pack_d+0x1b4>
 880410c:	0080ffc4 	movi	r2,1023
 8804110:	11002c16 	blt	r2,r4,88041c4 <__pack_d+0x170>
 8804114:	00803fc4 	movi	r2,255
 8804118:	408c703a 	and	r6,r8,r2
 880411c:	00802004 	movi	r2,128
 8804120:	0007883a 	mov	r3,zero
 8804124:	000f883a 	mov	r7,zero
 8804128:	2280ffc4 	addi	r10,r4,1023
 880412c:	30801e26 	beq	r6,r2,88041a8 <__pack_d+0x154>
 8804130:	00801fc4 	movi	r2,127
 8804134:	4089883a 	add	r4,r8,r2
 8804138:	220d803a 	cmpltu	r6,r4,r8
 880413c:	324d883a 	add	r6,r6,r9
 8804140:	2011883a 	mov	r8,r4
 8804144:	3013883a 	mov	r9,r6
 8804148:	00880034 	movhi	r2,8192
 880414c:	10bfffc4 	addi	r2,r2,-1
 8804150:	12400d36 	bltu	r2,r9,8804188 <__pack_d+0x134>
 8804154:	4804963a 	slli	r2,r9,24
 8804158:	400cd23a 	srli	r6,r8,8
 880415c:	480ed23a 	srli	r7,r9,8
 8804160:	013fffc4 	movi	r4,-1
 8804164:	118cb03a 	or	r6,r2,r6
 8804168:	01400434 	movhi	r5,16
 880416c:	297fffc4 	addi	r5,r5,-1
 8804170:	3104703a 	and	r2,r6,r4
 8804174:	3946703a 	and	r3,r7,r5
 8804178:	5201ffcc 	andi	r8,r10,2047
 880417c:	100d883a 	mov	r6,r2
 8804180:	180f883a 	mov	r7,r3
 8804184:	003fc706 	br	88040a4 <__pack_d+0x50>
 8804188:	480897fa 	slli	r4,r9,31
 880418c:	4004d07a 	srli	r2,r8,1
 8804190:	4806d07a 	srli	r3,r9,1
 8804194:	52800044 	addi	r10,r10,1
 8804198:	2084b03a 	or	r2,r4,r2
 880419c:	1011883a 	mov	r8,r2
 88041a0:	1813883a 	mov	r9,r3
 88041a4:	003feb06 	br	8804154 <__pack_d+0x100>
 88041a8:	383fe11e 	bne	r7,zero,8804130 <__pack_d+0xdc>
 88041ac:	01004004 	movi	r4,256
 88041b0:	4104703a 	and	r2,r8,r4
 88041b4:	10c4b03a 	or	r2,r2,r3
 88041b8:	103fe326 	beq	r2,zero,8804148 <__pack_d+0xf4>
 88041bc:	3005883a 	mov	r2,r6
 88041c0:	003fdc06 	br	8804134 <__pack_d+0xe0>
 88041c4:	000d883a 	mov	r6,zero
 88041c8:	000f883a 	mov	r7,zero
 88041cc:	0201ffc4 	movi	r8,2047
 88041d0:	003fb406 	br	88040a4 <__pack_d+0x50>
 88041d4:	0005883a 	mov	r2,zero
 88041d8:	00c00234 	movhi	r3,8
 88041dc:	408cb03a 	or	r6,r8,r2
 88041e0:	48ceb03a 	or	r7,r9,r3
 88041e4:	013fffc4 	movi	r4,-1
 88041e8:	01400434 	movhi	r5,16
 88041ec:	297fffc4 	addi	r5,r5,-1
 88041f0:	3104703a 	and	r2,r6,r4
 88041f4:	3946703a 	and	r3,r7,r5
 88041f8:	100d883a 	mov	r6,r2
 88041fc:	180f883a 	mov	r7,r3
 8804200:	0201ffc4 	movi	r8,2047
 8804204:	003fa706 	br	88040a4 <__pack_d+0x50>
 8804208:	1109c83a 	sub	r4,r2,r4
 880420c:	00800e04 	movi	r2,56
 8804210:	11004316 	blt	r2,r4,8804320 <__pack_d+0x2cc>
 8804214:	21fff804 	addi	r7,r4,-32
 8804218:	38004516 	blt	r7,zero,8804330 <__pack_d+0x2dc>
 880421c:	49d8d83a 	srl	r12,r9,r7
 8804220:	001b883a 	mov	r13,zero
 8804224:	0023883a 	mov	r17,zero
 8804228:	01400044 	movi	r5,1
 880422c:	0025883a 	mov	r18,zero
 8804230:	38004716 	blt	r7,zero,8804350 <__pack_d+0x2fc>
 8804234:	29d6983a 	sll	r11,r5,r7
 8804238:	0015883a 	mov	r10,zero
 880423c:	00bfffc4 	movi	r2,-1
 8804240:	5089883a 	add	r4,r10,r2
 8804244:	588b883a 	add	r5,r11,r2
 8804248:	228d803a 	cmpltu	r6,r4,r10
 880424c:	314b883a 	add	r5,r6,r5
 8804250:	4104703a 	and	r2,r8,r4
 8804254:	4946703a 	and	r3,r9,r5
 8804258:	10c4b03a 	or	r2,r2,r3
 880425c:	10000226 	beq	r2,zero,8804268 <__pack_d+0x214>
 8804260:	04400044 	movi	r17,1
 8804264:	0025883a 	mov	r18,zero
 8804268:	00803fc4 	movi	r2,255
 880426c:	644eb03a 	or	r7,r12,r17
 8804270:	3892703a 	and	r9,r7,r2
 8804274:	00802004 	movi	r2,128
 8804278:	6c90b03a 	or	r8,r13,r18
 880427c:	0015883a 	mov	r10,zero
 8804280:	48801626 	beq	r9,r2,88042dc <__pack_d+0x288>
 8804284:	01001fc4 	movi	r4,127
 8804288:	3905883a 	add	r2,r7,r4
 880428c:	11cd803a 	cmpltu	r6,r2,r7
 8804290:	320d883a 	add	r6,r6,r8
 8804294:	100f883a 	mov	r7,r2
 8804298:	00840034 	movhi	r2,4096
 880429c:	10bfffc4 	addi	r2,r2,-1
 88042a0:	3011883a 	mov	r8,r6
 88042a4:	0007883a 	mov	r3,zero
 88042a8:	11801b36 	bltu	r2,r6,8804318 <__pack_d+0x2c4>
 88042ac:	4004963a 	slli	r2,r8,24
 88042b0:	3808d23a 	srli	r4,r7,8
 88042b4:	400ad23a 	srli	r5,r8,8
 88042b8:	1813883a 	mov	r9,r3
 88042bc:	1108b03a 	or	r4,r2,r4
 88042c0:	00bfffc4 	movi	r2,-1
 88042c4:	00c00434 	movhi	r3,16
 88042c8:	18ffffc4 	addi	r3,r3,-1
 88042cc:	208c703a 	and	r6,r4,r2
 88042d0:	28ce703a 	and	r7,r5,r3
 88042d4:	4a01ffcc 	andi	r8,r9,2047
 88042d8:	003f7206 	br	88040a4 <__pack_d+0x50>
 88042dc:	503fe91e 	bne	r10,zero,8804284 <__pack_d+0x230>
 88042e0:	01004004 	movi	r4,256
 88042e4:	3904703a 	and	r2,r7,r4
 88042e8:	0007883a 	mov	r3,zero
 88042ec:	10c4b03a 	or	r2,r2,r3
 88042f0:	10000626 	beq	r2,zero,880430c <__pack_d+0x2b8>
 88042f4:	3a45883a 	add	r2,r7,r9
 88042f8:	11cd803a 	cmpltu	r6,r2,r7
 88042fc:	320d883a 	add	r6,r6,r8
 8804300:	100f883a 	mov	r7,r2
 8804304:	3011883a 	mov	r8,r6
 8804308:	0007883a 	mov	r3,zero
 880430c:	00840034 	movhi	r2,4096
 8804310:	10bfffc4 	addi	r2,r2,-1
 8804314:	123fe52e 	bgeu	r2,r8,88042ac <__pack_d+0x258>
 8804318:	00c00044 	movi	r3,1
 880431c:	003fe306 	br	88042ac <__pack_d+0x258>
 8804320:	0009883a 	mov	r4,zero
 8804324:	0013883a 	mov	r9,zero
 8804328:	000b883a 	mov	r5,zero
 880432c:	003fe406 	br	88042c0 <__pack_d+0x26c>
 8804330:	4a47883a 	add	r3,r9,r9
 8804334:	008007c4 	movi	r2,31
 8804338:	1105c83a 	sub	r2,r2,r4
 880433c:	1886983a 	sll	r3,r3,r2
 8804340:	4118d83a 	srl	r12,r8,r4
 8804344:	491ad83a 	srl	r13,r9,r4
 8804348:	1b18b03a 	or	r12,r3,r12
 880434c:	003fb506 	br	8804224 <__pack_d+0x1d0>
 8804350:	2806d07a 	srli	r3,r5,1
 8804354:	008007c4 	movi	r2,31
 8804358:	1105c83a 	sub	r2,r2,r4
 880435c:	1896d83a 	srl	r11,r3,r2
 8804360:	2914983a 	sll	r10,r5,r4
 8804364:	003fb506 	br	880423c <__pack_d+0x1e8>

08804368 <__unpack_d>:
 8804368:	20c00117 	ldw	r3,4(r4)
 880436c:	22400017 	ldw	r9,0(r4)
 8804370:	00800434 	movhi	r2,16
 8804374:	10bfffc4 	addi	r2,r2,-1
 8804378:	1808d53a 	srli	r4,r3,20
 880437c:	180cd7fa 	srli	r6,r3,31
 8804380:	1894703a 	and	r10,r3,r2
 8804384:	2201ffcc 	andi	r8,r4,2047
 8804388:	281b883a 	mov	r13,r5
 880438c:	4817883a 	mov	r11,r9
 8804390:	29800115 	stw	r6,4(r5)
 8804394:	5019883a 	mov	r12,r10
 8804398:	40001e1e 	bne	r8,zero,8804414 <__unpack_d+0xac>
 880439c:	4a84b03a 	or	r2,r9,r10
 88043a0:	10001926 	beq	r2,zero,8804408 <__unpack_d+0xa0>
 88043a4:	4804d63a 	srli	r2,r9,24
 88043a8:	500c923a 	slli	r6,r10,8
 88043ac:	013f0084 	movi	r4,-1022
 88043b0:	00c40034 	movhi	r3,4096
 88043b4:	18ffffc4 	addi	r3,r3,-1
 88043b8:	118cb03a 	or	r6,r2,r6
 88043bc:	008000c4 	movi	r2,3
 88043c0:	480a923a 	slli	r5,r9,8
 88043c4:	68800015 	stw	r2,0(r13)
 88043c8:	69000215 	stw	r4,8(r13)
 88043cc:	19800b36 	bltu	r3,r6,88043fc <__unpack_d+0x94>
 88043d0:	200f883a 	mov	r7,r4
 88043d4:	1811883a 	mov	r8,r3
 88043d8:	2945883a 	add	r2,r5,r5
 88043dc:	1149803a 	cmpltu	r4,r2,r5
 88043e0:	3187883a 	add	r3,r6,r6
 88043e4:	20c9883a 	add	r4,r4,r3
 88043e8:	100b883a 	mov	r5,r2
 88043ec:	200d883a 	mov	r6,r4
 88043f0:	39ffffc4 	addi	r7,r7,-1
 88043f4:	413ff82e 	bgeu	r8,r4,88043d8 <__unpack_d+0x70>
 88043f8:	69c00215 	stw	r7,8(r13)
 88043fc:	69800415 	stw	r6,16(r13)
 8804400:	69400315 	stw	r5,12(r13)
 8804404:	f800283a 	ret
 8804408:	00800084 	movi	r2,2
 880440c:	28800015 	stw	r2,0(r5)
 8804410:	f800283a 	ret
 8804414:	0081ffc4 	movi	r2,2047
 8804418:	40800f26 	beq	r8,r2,8804458 <__unpack_d+0xf0>
 880441c:	480cd63a 	srli	r6,r9,24
 8804420:	5006923a 	slli	r3,r10,8
 8804424:	4804923a 	slli	r2,r9,8
 8804428:	0009883a 	mov	r4,zero
 880442c:	30c6b03a 	or	r3,r6,r3
 8804430:	01440034 	movhi	r5,4096
 8804434:	110cb03a 	or	r6,r2,r4
 8804438:	423f0044 	addi	r8,r8,-1023
 880443c:	194eb03a 	or	r7,r3,r5
 8804440:	008000c4 	movi	r2,3
 8804444:	69c00415 	stw	r7,16(r13)
 8804448:	6a000215 	stw	r8,8(r13)
 880444c:	68800015 	stw	r2,0(r13)
 8804450:	69800315 	stw	r6,12(r13)
 8804454:	f800283a 	ret
 8804458:	4a84b03a 	or	r2,r9,r10
 880445c:	1000031e 	bne	r2,zero,880446c <__unpack_d+0x104>
 8804460:	00800104 	movi	r2,4
 8804464:	28800015 	stw	r2,0(r5)
 8804468:	f800283a 	ret
 880446c:	0009883a 	mov	r4,zero
 8804470:	01400234 	movhi	r5,8
 8804474:	4904703a 	and	r2,r9,r4
 8804478:	5146703a 	and	r3,r10,r5
 880447c:	10c4b03a 	or	r2,r2,r3
 8804480:	10000526 	beq	r2,zero,8804498 <__unpack_d+0x130>
 8804484:	00800044 	movi	r2,1
 8804488:	68800015 	stw	r2,0(r13)
 880448c:	6b000415 	stw	r12,16(r13)
 8804490:	6ac00315 	stw	r11,12(r13)
 8804494:	f800283a 	ret
 8804498:	68000015 	stw	zero,0(r13)
 880449c:	003ffb06 	br	880448c <__unpack_d+0x124>

088044a0 <__fpcmp_parts_d>:
 88044a0:	21800017 	ldw	r6,0(r4)
 88044a4:	00c00044 	movi	r3,1
 88044a8:	19800a2e 	bgeu	r3,r6,88044d4 <__fpcmp_parts_d+0x34>
 88044ac:	28800017 	ldw	r2,0(r5)
 88044b0:	1880082e 	bgeu	r3,r2,88044d4 <__fpcmp_parts_d+0x34>
 88044b4:	00c00104 	movi	r3,4
 88044b8:	30c02626 	beq	r6,r3,8804554 <__fpcmp_parts_d+0xb4>
 88044bc:	10c02226 	beq	r2,r3,8804548 <__fpcmp_parts_d+0xa8>
 88044c0:	00c00084 	movi	r3,2
 88044c4:	30c00526 	beq	r6,r3,88044dc <__fpcmp_parts_d+0x3c>
 88044c8:	10c0071e 	bne	r2,r3,88044e8 <__fpcmp_parts_d+0x48>
 88044cc:	20800117 	ldw	r2,4(r4)
 88044d0:	1000091e 	bne	r2,zero,88044f8 <__fpcmp_parts_d+0x58>
 88044d4:	00800044 	movi	r2,1
 88044d8:	f800283a 	ret
 88044dc:	10c01a1e 	bne	r2,r3,8804548 <__fpcmp_parts_d+0xa8>
 88044e0:	0005883a 	mov	r2,zero
 88044e4:	f800283a 	ret
 88044e8:	22000117 	ldw	r8,4(r4)
 88044ec:	28800117 	ldw	r2,4(r5)
 88044f0:	40800326 	beq	r8,r2,8804500 <__fpcmp_parts_d+0x60>
 88044f4:	403ff726 	beq	r8,zero,88044d4 <__fpcmp_parts_d+0x34>
 88044f8:	00bfffc4 	movi	r2,-1
 88044fc:	f800283a 	ret
 8804500:	20c00217 	ldw	r3,8(r4)
 8804504:	28800217 	ldw	r2,8(r5)
 8804508:	10fffa16 	blt	r2,r3,88044f4 <__fpcmp_parts_d+0x54>
 880450c:	18800916 	blt	r3,r2,8804534 <__fpcmp_parts_d+0x94>
 8804510:	21c00417 	ldw	r7,16(r4)
 8804514:	28c00417 	ldw	r3,16(r5)
 8804518:	21800317 	ldw	r6,12(r4)
 880451c:	28800317 	ldw	r2,12(r5)
 8804520:	19fff436 	bltu	r3,r7,88044f4 <__fpcmp_parts_d+0x54>
 8804524:	38c00526 	beq	r7,r3,880453c <__fpcmp_parts_d+0x9c>
 8804528:	38c00236 	bltu	r7,r3,8804534 <__fpcmp_parts_d+0x94>
 880452c:	19ffec1e 	bne	r3,r7,88044e0 <__fpcmp_parts_d+0x40>
 8804530:	30bfeb2e 	bgeu	r6,r2,88044e0 <__fpcmp_parts_d+0x40>
 8804534:	403fe71e 	bne	r8,zero,88044d4 <__fpcmp_parts_d+0x34>
 8804538:	003fef06 	br	88044f8 <__fpcmp_parts_d+0x58>
 880453c:	11bffa2e 	bgeu	r2,r6,8804528 <__fpcmp_parts_d+0x88>
 8804540:	403fe426 	beq	r8,zero,88044d4 <__fpcmp_parts_d+0x34>
 8804544:	003fec06 	br	88044f8 <__fpcmp_parts_d+0x58>
 8804548:	28800117 	ldw	r2,4(r5)
 880454c:	103fe11e 	bne	r2,zero,88044d4 <__fpcmp_parts_d+0x34>
 8804550:	003fe906 	br	88044f8 <__fpcmp_parts_d+0x58>
 8804554:	11bfdd1e 	bne	r2,r6,88044cc <__fpcmp_parts_d+0x2c>
 8804558:	28c00117 	ldw	r3,4(r5)
 880455c:	20800117 	ldw	r2,4(r4)
 8804560:	1885c83a 	sub	r2,r3,r2
 8804564:	f800283a 	ret

08804568 <__errno>:
 8804568:	00c22074 	movhi	r3,2177
 880456c:	18e8ac04 	addi	r3,r3,-23888
 8804570:	18800017 	ldw	r2,0(r3)
 8804574:	f800283a 	ret

08804578 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 8804578:	defffe04 	addi	sp,sp,-8
 880457c:	dfc00115 	stw	ra,4(sp)
 8804580:	df000015 	stw	fp,0(sp)
 8804584:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
 8804588:	01022074 	movhi	r4,2177
 880458c:	2128bb04 	addi	r4,r4,-23828
 8804590:	01422074 	movhi	r5,2177
 8804594:	2962d504 	addi	r5,r5,-29868
 8804598:	01822074 	movhi	r6,2177
 880459c:	31a8bb04 	addi	r6,r6,-23828
 88045a0:	88045f80 	call	88045f8 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
 88045a4:	01022034 	movhi	r4,2176
 88045a8:	21000804 	addi	r4,r4,32
 88045ac:	01422034 	movhi	r5,2176
 88045b0:	29400804 	addi	r5,r5,32
 88045b4:	01822034 	movhi	r6,2176
 88045b8:	31806d04 	addi	r6,r6,436
 88045bc:	88045f80 	call	88045f8 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
 88045c0:	01022074 	movhi	r4,2177
 88045c4:	21220c04 	addi	r4,r4,-30672
 88045c8:	01422074 	movhi	r5,2177
 88045cc:	29620c04 	addi	r5,r5,-30672
 88045d0:	01822074 	movhi	r6,2177
 88045d4:	31a2d504 	addi	r6,r6,-29868
 88045d8:	88045f80 	call	88045f8 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 88045dc:	88074a80 	call	88074a8 <alt_dcache_flush_all>
  alt_icache_flush_all();
 88045e0:	88077880 	call	8807788 <alt_icache_flush_all>
}
 88045e4:	e037883a 	mov	sp,fp
 88045e8:	dfc00117 	ldw	ra,4(sp)
 88045ec:	df000017 	ldw	fp,0(sp)
 88045f0:	dec00204 	addi	sp,sp,8
 88045f4:	f800283a 	ret

088045f8 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
 88045f8:	defffc04 	addi	sp,sp,-16
 88045fc:	df000315 	stw	fp,12(sp)
 8804600:	df000304 	addi	fp,sp,12
 8804604:	e13ffd15 	stw	r4,-12(fp)
 8804608:	e17ffe15 	stw	r5,-8(fp)
 880460c:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
 8804610:	e0fffe17 	ldw	r3,-8(fp)
 8804614:	e0bffd17 	ldw	r2,-12(fp)
 8804618:	18800e26 	beq	r3,r2,8804654 <alt_load_section+0x5c>
  {
    while( to != end )
 880461c:	00000a06 	br	8804648 <alt_load_section+0x50>
    {
      *to++ = *from++;
 8804620:	e0bffd17 	ldw	r2,-12(fp)
 8804624:	10c00017 	ldw	r3,0(r2)
 8804628:	e0bffe17 	ldw	r2,-8(fp)
 880462c:	10c00015 	stw	r3,0(r2)
 8804630:	e0bffe17 	ldw	r2,-8(fp)
 8804634:	10800104 	addi	r2,r2,4
 8804638:	e0bffe15 	stw	r2,-8(fp)
 880463c:	e0bffd17 	ldw	r2,-12(fp)
 8804640:	10800104 	addi	r2,r2,4
 8804644:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
 8804648:	e0fffe17 	ldw	r3,-8(fp)
 880464c:	e0bfff17 	ldw	r2,-4(fp)
 8804650:	18bff31e 	bne	r3,r2,8804620 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
 8804654:	e037883a 	mov	sp,fp
 8804658:	df000017 	ldw	fp,0(sp)
 880465c:	dec00104 	addi	sp,sp,4
 8804660:	f800283a 	ret

08804664 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 8804664:	defffd04 	addi	sp,sp,-12
 8804668:	dfc00215 	stw	ra,8(sp)
 880466c:	df000115 	stw	fp,4(sp)
 8804670:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 8804674:	0009883a 	mov	r4,zero
 8804678:	88046d00 	call	88046d0 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 880467c:	88047040 	call	8804704 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 8804680:	01022074 	movhi	r4,2177
 8804684:	21228004 	addi	r4,r4,-30208
 8804688:	01422074 	movhi	r5,2177
 880468c:	29628004 	addi	r5,r5,-30208
 8804690:	01822074 	movhi	r6,2177
 8804694:	31a28004 	addi	r6,r6,-30208
 8804698:	8807b480 	call	8807b48 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
 880469c:	880762c0 	call	880762c <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
 88046a0:	01022034 	movhi	r4,2176
 88046a4:	211da404 	addi	r4,r4,30352
 88046a8:	88083100 	call	8808310 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 88046ac:	d1260117 	ldw	r4,-26620(gp)
 88046b0:	d1660217 	ldw	r5,-26616(gp)
 88046b4:	d1a60317 	ldw	r6,-26612(gp)
 88046b8:	88002000 	call	8800200 <main>
 88046bc:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
 88046c0:	01000044 	movi	r4,1
 88046c4:	880734c0 	call	880734c <close>
  exit (result);
 88046c8:	e13fff17 	ldw	r4,-4(fp)
 88046cc:	88083240 	call	8808324 <exit>

088046d0 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 88046d0:	defffd04 	addi	sp,sp,-12
 88046d4:	dfc00215 	stw	ra,8(sp)
 88046d8:	df000115 	stw	fp,4(sp)
 88046dc:	df000104 	addi	fp,sp,4
 88046e0:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_IRQ_INIT ( CPU_2, cpu_2);
 88046e4:	88080880 	call	8808088 <altera_nios2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 88046e8:	00800044 	movi	r2,1
 88046ec:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 88046f0:	e037883a 	mov	sp,fp
 88046f4:	dfc00117 	ldw	ra,4(sp)
 88046f8:	df000017 	ldw	fp,0(sp)
 88046fc:	dec00204 	addi	sp,sp,8
 8804700:	f800283a 	ret

08804704 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 8804704:	defffd04 	addi	sp,sp,-12
 8804708:	dfc00215 	stw	ra,8(sp)
 880470c:	df000115 	stw	fp,4(sp)
 8804710:	df000104 	addi	fp,sp,4
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_2, jtag_uart_2);
 8804714:	01022074 	movhi	r4,2177
 8804718:	2123df04 	addi	r4,r4,-28804
 880471c:	000b883a 	mov	r5,zero
 8804720:	01800084 	movi	r6,2
 8804724:	8804afc0 	call	8804afc <altera_avalon_jtag_uart_init>
 8804728:	01022074 	movhi	r4,2177
 880472c:	2123d504 	addi	r4,r4,-28844
 8804730:	880497c0 	call	880497c <alt_dev_reg>
    ALTERA_AVALON_MAILBOX_INIT ( MAILBOX_0, mailbox_0);
 8804734:	01022074 	movhi	r4,2177
 8804738:	2127ed04 	addi	r4,r4,-24652
 880473c:	88054600 	call	8805460 <alt_avalon_mailbox_init>
    ALTERA_AVALON_MAILBOX_INIT ( MAILBOX_1, mailbox_1);
 8804740:	01022074 	movhi	r4,2177
 8804744:	2127fc04 	addi	r4,r4,-24592
 8804748:	88054600 	call	8805460 <alt_avalon_mailbox_init>
    ALTERA_AVALON_MAILBOX_INIT ( MAILBOX_2, mailbox_2);
 880474c:	01022074 	movhi	r4,2177
 8804750:	21280b04 	addi	r4,r4,-24532
 8804754:	88054600 	call	8805460 <alt_avalon_mailbox_init>
    ALTERA_AVALON_MAILBOX_INIT ( MAILBOX_3, mailbox_3);
 8804758:	01022074 	movhi	r4,2177
 880475c:	21281a04 	addi	r4,r4,-24472
 8804760:	88054600 	call	8805460 <alt_avalon_mailbox_init>
    ALTERA_AVALON_PERFORMANCE_COUNTER_INIT ( PERFORMANCE_COUNTER_0, performance_counter_0);
 8804764:	0007883a 	mov	r3,zero
 8804768:	00800044 	movi	r2,1
 880476c:	18800035 	stwio	r2,0(r3)
    ALTERA_AVALON_SYSID_INIT ( SYSID, sysid);
    ALTERA_UP_AVALON_VIDEO_PIXEL_BUFFER_DMA_INIT ( VIDEO_PIXEL_BUFFER_DMA_0, video_pixel_buffer_dma_0);
 8804770:	00822074 	movhi	r2,2177
 8804774:	10a82904 	addi	r2,r2,-24412
 8804778:	10800a17 	ldw	r2,40(r2)
 880477c:	10800017 	ldw	r2,0(r2)
 8804780:	1007883a 	mov	r3,r2
 8804784:	00822074 	movhi	r2,2177
 8804788:	10a82904 	addi	r2,r2,-24412
 880478c:	10c00b15 	stw	r3,44(r2)
 8804790:	00822074 	movhi	r2,2177
 8804794:	10a82904 	addi	r2,r2,-24412
 8804798:	10800a17 	ldw	r2,40(r2)
 880479c:	10800104 	addi	r2,r2,4
 88047a0:	10800017 	ldw	r2,0(r2)
 88047a4:	1007883a 	mov	r3,r2
 88047a8:	00822074 	movhi	r2,2177
 88047ac:	10a82904 	addi	r2,r2,-24412
 88047b0:	10c00c15 	stw	r3,48(r2)
 88047b4:	00822074 	movhi	r2,2177
 88047b8:	10a82904 	addi	r2,r2,-24412
 88047bc:	10800a17 	ldw	r2,40(r2)
 88047c0:	10800204 	addi	r2,r2,8
 88047c4:	10800017 	ldw	r2,0(r2)
 88047c8:	10ffffcc 	andi	r3,r2,65535
 88047cc:	00822074 	movhi	r2,2177
 88047d0:	10a82904 	addi	r2,r2,-24412
 88047d4:	10c00f15 	stw	r3,60(r2)
 88047d8:	00822074 	movhi	r2,2177
 88047dc:	10a82904 	addi	r2,r2,-24412
 88047e0:	10800a17 	ldw	r2,40(r2)
 88047e4:	10800204 	addi	r2,r2,8
 88047e8:	10800017 	ldw	r2,0(r2)
 88047ec:	1005d43a 	srai	r2,r2,16
 88047f0:	10ffffcc 	andi	r3,r2,65535
 88047f4:	00822074 	movhi	r2,2177
 88047f8:	10a82904 	addi	r2,r2,-24412
 88047fc:	10c01015 	stw	r3,64(r2)
 8804800:	00822074 	movhi	r2,2177
 8804804:	10a82904 	addi	r2,r2,-24412
 8804808:	10800a17 	ldw	r2,40(r2)
 880480c:	10800304 	addi	r2,r2,12
 8804810:	10800017 	ldw	r2,0(r2)
 8804814:	1005d07a 	srai	r2,r2,1
 8804818:	10c0004c 	andi	r3,r2,1
 880481c:	00822074 	movhi	r2,2177
 8804820:	10a82904 	addi	r2,r2,-24412
 8804824:	10c00d15 	stw	r3,52(r2)
 8804828:	00822074 	movhi	r2,2177
 880482c:	10a82904 	addi	r2,r2,-24412
 8804830:	10800a17 	ldw	r2,40(r2)
 8804834:	10800304 	addi	r2,r2,12
 8804838:	10800017 	ldw	r2,0(r2)
 880483c:	1005d13a 	srai	r2,r2,4
 8804840:	10c003cc 	andi	r3,r2,15
 8804844:	00822074 	movhi	r2,2177
 8804848:	10a82904 	addi	r2,r2,-24412
 880484c:	10c00e15 	stw	r3,56(r2)
 8804850:	00822074 	movhi	r2,2177
 8804854:	10a82904 	addi	r2,r2,-24412
 8804858:	10800a17 	ldw	r2,40(r2)
 880485c:	10800304 	addi	r2,r2,12
 8804860:	10800017 	ldw	r2,0(r2)
 8804864:	1005d43a 	srai	r2,r2,16
 8804868:	1007883a 	mov	r3,r2
 880486c:	00bfffc4 	movi	r2,-1
 8804870:	1884703a 	and	r2,r3,r2
 8804874:	e0bfff45 	stb	r2,-3(fp)
 8804878:	00822074 	movhi	r2,2177
 880487c:	10a82904 	addi	r2,r2,-24412
 8804880:	10800a17 	ldw	r2,40(r2)
 8804884:	10800304 	addi	r2,r2,12
 8804888:	10800017 	ldw	r2,0(r2)
 880488c:	1005d63a 	srai	r2,r2,24
 8804890:	1007883a 	mov	r3,r2
 8804894:	00bfffc4 	movi	r2,-1
 8804898:	1884703a 	and	r2,r3,r2
 880489c:	e0bfff05 	stb	r2,-4(fp)
 88048a0:	00822074 	movhi	r2,2177
 88048a4:	10a82904 	addi	r2,r2,-24412
 88048a8:	10800e17 	ldw	r2,56(r2)
 88048ac:	10800058 	cmpnei	r2,r2,1
 88048b0:	1000041e 	bne	r2,zero,88048c4 <alt_sys_init+0x1c0>
 88048b4:	00822074 	movhi	r2,2177
 88048b8:	10a82904 	addi	r2,r2,-24412
 88048bc:	10001115 	stw	zero,68(r2)
 88048c0:	00000e06 	br	88048fc <alt_sys_init+0x1f8>
 88048c4:	00822074 	movhi	r2,2177
 88048c8:	10a82904 	addi	r2,r2,-24412
 88048cc:	10800e17 	ldw	r2,56(r2)
 88048d0:	10800098 	cmpnei	r2,r2,2
 88048d4:	1000051e 	bne	r2,zero,88048ec <alt_sys_init+0x1e8>
 88048d8:	00c22074 	movhi	r3,2177
 88048dc:	18e82904 	addi	r3,r3,-24412
 88048e0:	00800044 	movi	r2,1
 88048e4:	18801115 	stw	r2,68(r3)
 88048e8:	00000406 	br	88048fc <alt_sys_init+0x1f8>
 88048ec:	00c22074 	movhi	r3,2177
 88048f0:	18e82904 	addi	r3,r3,-24412
 88048f4:	00800084 	movi	r2,2
 88048f8:	18801115 	stw	r2,68(r3)
 88048fc:	e0ffff43 	ldbu	r3,-3(fp)
 8804900:	00800804 	movi	r2,32
 8804904:	10c7c83a 	sub	r3,r2,r3
 8804908:	00bfffc4 	movi	r2,-1
 880490c:	10c6d83a 	srl	r3,r2,r3
 8804910:	00822074 	movhi	r2,2177
 8804914:	10a82904 	addi	r2,r2,-24412
 8804918:	10c01215 	stw	r3,72(r2)
 880491c:	e0ffff43 	ldbu	r3,-3(fp)
 8804920:	00822074 	movhi	r2,2177
 8804924:	10a82904 	addi	r2,r2,-24412
 8804928:	10801117 	ldw	r2,68(r2)
 880492c:	1887883a 	add	r3,r3,r2
 8804930:	00822074 	movhi	r2,2177
 8804934:	10a82904 	addi	r2,r2,-24412
 8804938:	10c01315 	stw	r3,76(r2)
 880493c:	e0ffff03 	ldbu	r3,-4(fp)
 8804940:	00800804 	movi	r2,32
 8804944:	10c7c83a 	sub	r3,r2,r3
 8804948:	00bfffc4 	movi	r2,-1
 880494c:	10c6d83a 	srl	r3,r2,r3
 8804950:	00822074 	movhi	r2,2177
 8804954:	10a82904 	addi	r2,r2,-24412
 8804958:	10c01415 	stw	r3,80(r2)
 880495c:	01022074 	movhi	r4,2177
 8804960:	21282904 	addi	r4,r4,-24412
 8804964:	880497c0 	call	880497c <alt_dev_reg>
}
 8804968:	e037883a 	mov	sp,fp
 880496c:	dfc00117 	ldw	ra,4(sp)
 8804970:	df000017 	ldw	fp,0(sp)
 8804974:	dec00204 	addi	sp,sp,8
 8804978:	f800283a 	ret

0880497c <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
 880497c:	defffd04 	addi	sp,sp,-12
 8804980:	dfc00215 	stw	ra,8(sp)
 8804984:	df000115 	stw	fp,4(sp)
 8804988:	df000104 	addi	fp,sp,4
 880498c:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 8804990:	e13fff17 	ldw	r4,-4(fp)
 8804994:	01422074 	movhi	r5,2177
 8804998:	2968b404 	addi	r5,r5,-23856
 880499c:	88075180 	call	8807518 <alt_dev_llist_insert>
}
 88049a0:	e037883a 	mov	sp,fp
 88049a4:	dfc00117 	ldw	ra,4(sp)
 88049a8:	df000017 	ldw	fp,0(sp)
 88049ac:	dec00204 	addi	sp,sp,8
 88049b0:	f800283a 	ret

088049b4 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 88049b4:	defffa04 	addi	sp,sp,-24
 88049b8:	dfc00515 	stw	ra,20(sp)
 88049bc:	df000415 	stw	fp,16(sp)
 88049c0:	df000404 	addi	fp,sp,16
 88049c4:	e13ffd15 	stw	r4,-12(fp)
 88049c8:	e17ffe15 	stw	r5,-8(fp)
 88049cc:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 88049d0:	e0bffd17 	ldw	r2,-12(fp)
 88049d4:	10800017 	ldw	r2,0(r2)
 88049d8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 88049dc:	e0bffc17 	ldw	r2,-16(fp)
 88049e0:	11000a04 	addi	r4,r2,40
 88049e4:	e0bffd17 	ldw	r2,-12(fp)
 88049e8:	11c00217 	ldw	r7,8(r2)
 88049ec:	e17ffe17 	ldw	r5,-8(fp)
 88049f0:	e1bfff17 	ldw	r6,-4(fp)
 88049f4:	8804ffc0 	call	8804ffc <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
 88049f8:	e037883a 	mov	sp,fp
 88049fc:	dfc00117 	ldw	ra,4(sp)
 8804a00:	df000017 	ldw	fp,0(sp)
 8804a04:	dec00204 	addi	sp,sp,8
 8804a08:	f800283a 	ret

08804a0c <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 8804a0c:	defffa04 	addi	sp,sp,-24
 8804a10:	dfc00515 	stw	ra,20(sp)
 8804a14:	df000415 	stw	fp,16(sp)
 8804a18:	df000404 	addi	fp,sp,16
 8804a1c:	e13ffd15 	stw	r4,-12(fp)
 8804a20:	e17ffe15 	stw	r5,-8(fp)
 8804a24:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 8804a28:	e0bffd17 	ldw	r2,-12(fp)
 8804a2c:	10800017 	ldw	r2,0(r2)
 8804a30:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 8804a34:	e0bffc17 	ldw	r2,-16(fp)
 8804a38:	11000a04 	addi	r4,r2,40
 8804a3c:	e0bffd17 	ldw	r2,-12(fp)
 8804a40:	11c00217 	ldw	r7,8(r2)
 8804a44:	e17ffe17 	ldw	r5,-8(fp)
 8804a48:	e1bfff17 	ldw	r6,-4(fp)
 8804a4c:	88052200 	call	8805220 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
 8804a50:	e037883a 	mov	sp,fp
 8804a54:	dfc00117 	ldw	ra,4(sp)
 8804a58:	df000017 	ldw	fp,0(sp)
 8804a5c:	dec00204 	addi	sp,sp,8
 8804a60:	f800283a 	ret

08804a64 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
 8804a64:	defffc04 	addi	sp,sp,-16
 8804a68:	dfc00315 	stw	ra,12(sp)
 8804a6c:	df000215 	stw	fp,8(sp)
 8804a70:	df000204 	addi	fp,sp,8
 8804a74:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 8804a78:	e0bfff17 	ldw	r2,-4(fp)
 8804a7c:	10800017 	ldw	r2,0(r2)
 8804a80:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
 8804a84:	e0bffe17 	ldw	r2,-8(fp)
 8804a88:	11000a04 	addi	r4,r2,40
 8804a8c:	e0bfff17 	ldw	r2,-4(fp)
 8804a90:	11400217 	ldw	r5,8(r2)
 8804a94:	8804e940 	call	8804e94 <altera_avalon_jtag_uart_close>
}
 8804a98:	e037883a 	mov	sp,fp
 8804a9c:	dfc00117 	ldw	ra,4(sp)
 8804aa0:	df000017 	ldw	fp,0(sp)
 8804aa4:	dec00204 	addi	sp,sp,8
 8804aa8:	f800283a 	ret

08804aac <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
 8804aac:	defffa04 	addi	sp,sp,-24
 8804ab0:	dfc00515 	stw	ra,20(sp)
 8804ab4:	df000415 	stw	fp,16(sp)
 8804ab8:	df000404 	addi	fp,sp,16
 8804abc:	e13ffd15 	stw	r4,-12(fp)
 8804ac0:	e17ffe15 	stw	r5,-8(fp)
 8804ac4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
 8804ac8:	e0bffd17 	ldw	r2,-12(fp)
 8804acc:	10800017 	ldw	r2,0(r2)
 8804ad0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
 8804ad4:	e0bffc17 	ldw	r2,-16(fp)
 8804ad8:	11000a04 	addi	r4,r2,40
 8804adc:	e17ffe17 	ldw	r5,-8(fp)
 8804ae0:	e1bfff17 	ldw	r6,-4(fp)
 8804ae4:	8804f080 	call	8804f08 <altera_avalon_jtag_uart_ioctl>
}
 8804ae8:	e037883a 	mov	sp,fp
 8804aec:	dfc00117 	ldw	ra,4(sp)
 8804af0:	df000017 	ldw	fp,0(sp)
 8804af4:	dec00204 	addi	sp,sp,8
 8804af8:	f800283a 	ret

08804afc <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
 8804afc:	defffa04 	addi	sp,sp,-24
 8804b00:	dfc00515 	stw	ra,20(sp)
 8804b04:	df000415 	stw	fp,16(sp)
 8804b08:	df000404 	addi	fp,sp,16
 8804b0c:	e13ffd15 	stw	r4,-12(fp)
 8804b10:	e17ffe15 	stw	r5,-8(fp)
 8804b14:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 8804b18:	e0fffd17 	ldw	r3,-12(fp)
 8804b1c:	00800044 	movi	r2,1
 8804b20:	18800815 	stw	r2,32(r3)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
 8804b24:	e0bffd17 	ldw	r2,-12(fp)
 8804b28:	10800017 	ldw	r2,0(r2)
 8804b2c:	11000104 	addi	r4,r2,4
 8804b30:	e0bffd17 	ldw	r2,-12(fp)
 8804b34:	10800817 	ldw	r2,32(r2)
 8804b38:	1007883a 	mov	r3,r2
 8804b3c:	2005883a 	mov	r2,r4
 8804b40:	10c00035 	stwio	r3,0(r2)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
 8804b44:	e13ffe17 	ldw	r4,-8(fp)
 8804b48:	e17fff17 	ldw	r5,-4(fp)
 8804b4c:	d8000015 	stw	zero,0(sp)
 8804b50:	01822034 	movhi	r6,2176
 8804b54:	3192ef04 	addi	r6,r6,19388
 8804b58:	e1fffd17 	ldw	r7,-12(fp)
 8804b5c:	88077b80 	call	88077b8 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
 8804b60:	e0bffd17 	ldw	r2,-12(fp)
 8804b64:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
 8804b68:	e0bffd17 	ldw	r2,-12(fp)
 8804b6c:	11000204 	addi	r4,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 8804b70:	00822074 	movhi	r2,2177
 8804b74:	10aead04 	addi	r2,r2,-17740
 8804b78:	10800017 	ldw	r2,0(r2)
 8804b7c:	100b883a 	mov	r5,r2
 8804b80:	01822034 	movhi	r6,2176
 8804b84:	31937904 	addi	r6,r6,19940
 8804b88:	e1fffd17 	ldw	r7,-12(fp)
 8804b8c:	88071f80 	call	88071f8 <alt_alarm_start>
 8804b90:	1004403a 	cmpge	r2,r2,zero
 8804b94:	1000041e 	bne	r2,zero,8804ba8 <altera_avalon_jtag_uart_init+0xac>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
 8804b98:	e0fffd17 	ldw	r3,-12(fp)
 8804b9c:	00a00034 	movhi	r2,32768
 8804ba0:	10bfffc4 	addi	r2,r2,-1
 8804ba4:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
 8804ba8:	e037883a 	mov	sp,fp
 8804bac:	dfc00117 	ldw	ra,4(sp)
 8804bb0:	df000017 	ldw	fp,0(sp)
 8804bb4:	dec00204 	addi	sp,sp,8
 8804bb8:	f800283a 	ret

08804bbc <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
 8804bbc:	defff804 	addi	sp,sp,-32
 8804bc0:	df000715 	stw	fp,28(sp)
 8804bc4:	df000704 	addi	fp,sp,28
 8804bc8:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
 8804bcc:	e0bfff17 	ldw	r2,-4(fp)
 8804bd0:	e0bffe15 	stw	r2,-8(fp)
  unsigned int base = sp->base;
 8804bd4:	e0bffe17 	ldw	r2,-8(fp)
 8804bd8:	10800017 	ldw	r2,0(r2)
 8804bdc:	e0bffd15 	stw	r2,-12(fp)
 8804be0:	00000006 	br	8804be4 <altera_avalon_jtag_uart_irq+0x28>
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 8804be4:	e0bffd17 	ldw	r2,-12(fp)
 8804be8:	10800104 	addi	r2,r2,4
 8804bec:	10800037 	ldwio	r2,0(r2)
 8804bf0:	e0bffc15 	stw	r2,-16(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
 8804bf4:	e0bffc17 	ldw	r2,-16(fp)
 8804bf8:	1080c00c 	andi	r2,r2,768
 8804bfc:	1005003a 	cmpeq	r2,r2,zero
 8804c00:	1000741e 	bne	r2,zero,8804dd4 <altera_avalon_jtag_uart_irq+0x218>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
 8804c04:	e0bffc17 	ldw	r2,-16(fp)
 8804c08:	1080400c 	andi	r2,r2,256
 8804c0c:	1005003a 	cmpeq	r2,r2,zero
 8804c10:	1000351e 	bne	r2,zero,8804ce8 <altera_avalon_jtag_uart_irq+0x12c>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
 8804c14:	00800074 	movhi	r2,1
 8804c18:	e0bffb15 	stw	r2,-20(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 8804c1c:	e0bffe17 	ldw	r2,-8(fp)
 8804c20:	10800a17 	ldw	r2,40(r2)
 8804c24:	10800044 	addi	r2,r2,1
 8804c28:	1081ffcc 	andi	r2,r2,2047
 8804c2c:	e0bffa15 	stw	r2,-24(fp)
        if (next == sp->rx_out)
 8804c30:	e0bffe17 	ldw	r2,-8(fp)
 8804c34:	10c00b17 	ldw	r3,44(r2)
 8804c38:	e0bffa17 	ldw	r2,-24(fp)
 8804c3c:	18801626 	beq	r3,r2,8804c98 <altera_avalon_jtag_uart_irq+0xdc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 8804c40:	e0bffd17 	ldw	r2,-12(fp)
 8804c44:	10800037 	ldwio	r2,0(r2)
 8804c48:	e0bffb15 	stw	r2,-20(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
 8804c4c:	e0bffb17 	ldw	r2,-20(fp)
 8804c50:	10a0000c 	andi	r2,r2,32768
 8804c54:	1005003a 	cmpeq	r2,r2,zero
 8804c58:	10000f1e 	bne	r2,zero,8804c98 <altera_avalon_jtag_uart_irq+0xdc>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 8804c5c:	e0bffe17 	ldw	r2,-8(fp)
 8804c60:	10c00a17 	ldw	r3,40(r2)
 8804c64:	e0bffb17 	ldw	r2,-20(fp)
 8804c68:	1009883a 	mov	r4,r2
 8804c6c:	e0bffe17 	ldw	r2,-8(fp)
 8804c70:	1885883a 	add	r2,r3,r2
 8804c74:	10800e04 	addi	r2,r2,56
 8804c78:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 8804c7c:	e0bffe17 	ldw	r2,-8(fp)
 8804c80:	10800a17 	ldw	r2,40(r2)
 8804c84:	10800044 	addi	r2,r2,1
 8804c88:	10c1ffcc 	andi	r3,r2,2047
 8804c8c:	e0bffe17 	ldw	r2,-8(fp)
 8804c90:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
 8804c94:	003fe106 	br	8804c1c <altera_avalon_jtag_uart_irq+0x60>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
 8804c98:	e0bffb17 	ldw	r2,-20(fp)
 8804c9c:	10bfffec 	andhi	r2,r2,65535
 8804ca0:	1005003a 	cmpeq	r2,r2,zero
 8804ca4:	1000101e 	bne	r2,zero,8804ce8 <altera_avalon_jtag_uart_irq+0x12c>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 8804ca8:	e0bffe17 	ldw	r2,-8(fp)
 8804cac:	10c00817 	ldw	r3,32(r2)
 8804cb0:	00bfff84 	movi	r2,-2
 8804cb4:	1886703a 	and	r3,r3,r2
 8804cb8:	e0bffe17 	ldw	r2,-8(fp)
 8804cbc:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
 8804cc0:	e0bffd17 	ldw	r2,-12(fp)
 8804cc4:	11000104 	addi	r4,r2,4
 8804cc8:	e0bffe17 	ldw	r2,-8(fp)
 8804ccc:	10800817 	ldw	r2,32(r2)
 8804cd0:	1007883a 	mov	r3,r2
 8804cd4:	2005883a 	mov	r2,r4
 8804cd8:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 8804cdc:	e0bffd17 	ldw	r2,-12(fp)
 8804ce0:	10800104 	addi	r2,r2,4
 8804ce4:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
 8804ce8:	e0bffc17 	ldw	r2,-16(fp)
 8804cec:	1080800c 	andi	r2,r2,512
 8804cf0:	1005003a 	cmpeq	r2,r2,zero
 8804cf4:	103fbb1e 	bne	r2,zero,8804be4 <altera_avalon_jtag_uart_irq+0x28>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
 8804cf8:	e0bffc17 	ldw	r2,-16(fp)
 8804cfc:	10bfffec 	andhi	r2,r2,65535
 8804d00:	1004d43a 	srli	r2,r2,16
 8804d04:	e0bff915 	stw	r2,-28(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
 8804d08:	00001506 	br	8804d60 <altera_avalon_jtag_uart_irq+0x1a4>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
 8804d0c:	e13ffd17 	ldw	r4,-12(fp)
 8804d10:	e0bffe17 	ldw	r2,-8(fp)
 8804d14:	10c00d17 	ldw	r3,52(r2)
 8804d18:	e0bffe17 	ldw	r2,-8(fp)
 8804d1c:	1885883a 	add	r2,r3,r2
 8804d20:	10820e04 	addi	r2,r2,2104
 8804d24:	10800003 	ldbu	r2,0(r2)
 8804d28:	10c03fcc 	andi	r3,r2,255
 8804d2c:	18c0201c 	xori	r3,r3,128
 8804d30:	18ffe004 	addi	r3,r3,-128
 8804d34:	2005883a 	mov	r2,r4
 8804d38:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 8804d3c:	e0bffe17 	ldw	r2,-8(fp)
 8804d40:	10800d17 	ldw	r2,52(r2)
 8804d44:	10800044 	addi	r2,r2,1
 8804d48:	10c1ffcc 	andi	r3,r2,2047
 8804d4c:	e0bffe17 	ldw	r2,-8(fp)
 8804d50:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
 8804d54:	e0bff917 	ldw	r2,-28(fp)
 8804d58:	10bfffc4 	addi	r2,r2,-1
 8804d5c:	e0bff915 	stw	r2,-28(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
 8804d60:	e0bff917 	ldw	r2,-28(fp)
 8804d64:	1005003a 	cmpeq	r2,r2,zero
 8804d68:	1000051e 	bne	r2,zero,8804d80 <altera_avalon_jtag_uart_irq+0x1c4>
 8804d6c:	e0bffe17 	ldw	r2,-8(fp)
 8804d70:	10c00d17 	ldw	r3,52(r2)
 8804d74:	e0bffe17 	ldw	r2,-8(fp)
 8804d78:	10800c17 	ldw	r2,48(r2)
 8804d7c:	18bfe31e 	bne	r3,r2,8804d0c <altera_avalon_jtag_uart_irq+0x150>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
 8804d80:	e0bff917 	ldw	r2,-28(fp)
 8804d84:	1005003a 	cmpeq	r2,r2,zero
 8804d88:	103f961e 	bne	r2,zero,8804be4 <altera_avalon_jtag_uart_irq+0x28>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 8804d8c:	e0bffe17 	ldw	r2,-8(fp)
 8804d90:	10c00817 	ldw	r3,32(r2)
 8804d94:	00bfff44 	movi	r2,-3
 8804d98:	1886703a 	and	r3,r3,r2
 8804d9c:	e0bffe17 	ldw	r2,-8(fp)
 8804da0:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 8804da4:	e0bffe17 	ldw	r2,-8(fp)
 8804da8:	10800017 	ldw	r2,0(r2)
 8804dac:	11000104 	addi	r4,r2,4
 8804db0:	e0bffe17 	ldw	r2,-8(fp)
 8804db4:	10800817 	ldw	r2,32(r2)
 8804db8:	1007883a 	mov	r3,r2
 8804dbc:	2005883a 	mov	r2,r4
 8804dc0:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 8804dc4:	e0bffd17 	ldw	r2,-12(fp)
 8804dc8:	10800104 	addi	r2,r2,4
 8804dcc:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
 8804dd0:	003f8406 	br	8804be4 <altera_avalon_jtag_uart_irq+0x28>
}
 8804dd4:	e037883a 	mov	sp,fp
 8804dd8:	df000017 	ldw	fp,0(sp)
 8804ddc:	dec00104 	addi	sp,sp,4
 8804de0:	f800283a 	ret

08804de4 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
 8804de4:	defffc04 	addi	sp,sp,-16
 8804de8:	df000315 	stw	fp,12(sp)
 8804dec:	df000304 	addi	fp,sp,12
 8804df0:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
 8804df4:	e0bfff17 	ldw	r2,-4(fp)
 8804df8:	e0bffe15 	stw	r2,-8(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
 8804dfc:	e0bffe17 	ldw	r2,-8(fp)
 8804e00:	10800017 	ldw	r2,0(r2)
 8804e04:	10800104 	addi	r2,r2,4
 8804e08:	10800037 	ldwio	r2,0(r2)
 8804e0c:	e0bffd15 	stw	r2,-12(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
 8804e10:	e0bffd17 	ldw	r2,-12(fp)
 8804e14:	1081000c 	andi	r2,r2,1024
 8804e18:	1005003a 	cmpeq	r2,r2,zero
 8804e1c:	10000c1e 	bne	r2,zero,8804e50 <altera_avalon_jtag_uart_timeout+0x6c>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
 8804e20:	e0bffe17 	ldw	r2,-8(fp)
 8804e24:	10800017 	ldw	r2,0(r2)
 8804e28:	11000104 	addi	r4,r2,4
 8804e2c:	e0bffe17 	ldw	r2,-8(fp)
 8804e30:	10800817 	ldw	r2,32(r2)
 8804e34:	10810014 	ori	r2,r2,1024
 8804e38:	1007883a 	mov	r3,r2
 8804e3c:	2005883a 	mov	r2,r4
 8804e40:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
 8804e44:	e0bffe17 	ldw	r2,-8(fp)
 8804e48:	10000915 	stw	zero,36(r2)
 8804e4c:	00000a06 	br	8804e78 <altera_avalon_jtag_uart_timeout+0x94>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
 8804e50:	e0bffe17 	ldw	r2,-8(fp)
 8804e54:	10c00917 	ldw	r3,36(r2)
 8804e58:	00a00034 	movhi	r2,32768
 8804e5c:	10bfff04 	addi	r2,r2,-4
 8804e60:	10c00536 	bltu	r2,r3,8804e78 <altera_avalon_jtag_uart_timeout+0x94>
    sp->host_inactive++;
 8804e64:	e0bffe17 	ldw	r2,-8(fp)
 8804e68:	10800917 	ldw	r2,36(r2)
 8804e6c:	10c00044 	addi	r3,r2,1
 8804e70:	e0bffe17 	ldw	r2,-8(fp)
 8804e74:	10c00915 	stw	r3,36(r2)
 8804e78:	00822074 	movhi	r2,2177
 8804e7c:	10aead04 	addi	r2,r2,-17740
 8804e80:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
 8804e84:	e037883a 	mov	sp,fp
 8804e88:	df000017 	ldw	fp,0(sp)
 8804e8c:	dec00104 	addi	sp,sp,4
 8804e90:	f800283a 	ret

08804e94 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
 8804e94:	defffc04 	addi	sp,sp,-16
 8804e98:	df000315 	stw	fp,12(sp)
 8804e9c:	df000304 	addi	fp,sp,12
 8804ea0:	e13ffd15 	stw	r4,-12(fp)
 8804ea4:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 8804ea8:	00000706 	br	8804ec8 <altera_avalon_jtag_uart_close+0x34>
    if (flags & O_NONBLOCK) {
 8804eac:	e0bffe17 	ldw	r2,-8(fp)
 8804eb0:	1090000c 	andi	r2,r2,16384
 8804eb4:	1005003a 	cmpeq	r2,r2,zero
 8804eb8:	1000031e 	bne	r2,zero,8804ec8 <altera_avalon_jtag_uart_close+0x34>
      return -EWOULDBLOCK; 
 8804ebc:	00bffd44 	movi	r2,-11
 8804ec0:	e0bfff15 	stw	r2,-4(fp)
 8804ec4:	00000b06 	br	8804ef4 <altera_avalon_jtag_uart_close+0x60>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 8804ec8:	e0bffd17 	ldw	r2,-12(fp)
 8804ecc:	10c00d17 	ldw	r3,52(r2)
 8804ed0:	e0bffd17 	ldw	r2,-12(fp)
 8804ed4:	10800c17 	ldw	r2,48(r2)
 8804ed8:	18800526 	beq	r3,r2,8804ef0 <altera_avalon_jtag_uart_close+0x5c>
 8804edc:	e0bffd17 	ldw	r2,-12(fp)
 8804ee0:	10c00917 	ldw	r3,36(r2)
 8804ee4:	e0bffd17 	ldw	r2,-12(fp)
 8804ee8:	10800117 	ldw	r2,4(r2)
 8804eec:	18bfef36 	bltu	r3,r2,8804eac <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
 8804ef0:	e03fff15 	stw	zero,-4(fp)
 8804ef4:	e0bfff17 	ldw	r2,-4(fp)
}
 8804ef8:	e037883a 	mov	sp,fp
 8804efc:	df000017 	ldw	fp,0(sp)
 8804f00:	dec00104 	addi	sp,sp,4
 8804f04:	f800283a 	ret

08804f08 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
 8804f08:	defff804 	addi	sp,sp,-32
 8804f0c:	df000715 	stw	fp,28(sp)
 8804f10:	df000704 	addi	fp,sp,28
 8804f14:	e13ffb15 	stw	r4,-20(fp)
 8804f18:	e17ffc15 	stw	r5,-16(fp)
 8804f1c:	e1bffd15 	stw	r6,-12(fp)
  int rc = -ENOTTY;
 8804f20:	00bff9c4 	movi	r2,-25
 8804f24:	e0bffa15 	stw	r2,-24(fp)

  switch (req)
 8804f28:	e0bffc17 	ldw	r2,-16(fp)
 8804f2c:	e0bfff15 	stw	r2,-4(fp)
 8804f30:	e0ffff17 	ldw	r3,-4(fp)
 8804f34:	189a8060 	cmpeqi	r2,r3,27137
 8804f38:	1000041e 	bne	r2,zero,8804f4c <altera_avalon_jtag_uart_ioctl+0x44>
 8804f3c:	e0ffff17 	ldw	r3,-4(fp)
 8804f40:	189a80a0 	cmpeqi	r2,r3,27138
 8804f44:	10001b1e 	bne	r2,zero,8804fb4 <altera_avalon_jtag_uart_ioctl+0xac>
 8804f48:	00002706 	br	8804fe8 <altera_avalon_jtag_uart_ioctl+0xe0>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
 8804f4c:	e0bffb17 	ldw	r2,-20(fp)
 8804f50:	10c00117 	ldw	r3,4(r2)
 8804f54:	00a00034 	movhi	r2,32768
 8804f58:	10bfffc4 	addi	r2,r2,-1
 8804f5c:	18802226 	beq	r3,r2,8804fe8 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
 8804f60:	e0bffd17 	ldw	r2,-12(fp)
 8804f64:	10800017 	ldw	r2,0(r2)
 8804f68:	e0bff915 	stw	r2,-28(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
 8804f6c:	e0bff917 	ldw	r2,-28(fp)
 8804f70:	10800090 	cmplti	r2,r2,2
 8804f74:	1000071e 	bne	r2,zero,8804f94 <altera_avalon_jtag_uart_ioctl+0x8c>
 8804f78:	e0fff917 	ldw	r3,-28(fp)
 8804f7c:	00a00034 	movhi	r2,32768
 8804f80:	10bfffc4 	addi	r2,r2,-1
 8804f84:	18800326 	beq	r3,r2,8804f94 <altera_avalon_jtag_uart_ioctl+0x8c>
 8804f88:	e0bff917 	ldw	r2,-28(fp)
 8804f8c:	e0bffe15 	stw	r2,-8(fp)
 8804f90:	00000306 	br	8804fa0 <altera_avalon_jtag_uart_ioctl+0x98>
 8804f94:	00e00034 	movhi	r3,32768
 8804f98:	18ffff84 	addi	r3,r3,-2
 8804f9c:	e0fffe15 	stw	r3,-8(fp)
 8804fa0:	e0bffb17 	ldw	r2,-20(fp)
 8804fa4:	e0fffe17 	ldw	r3,-8(fp)
 8804fa8:	10c00115 	stw	r3,4(r2)
      rc = 0;
 8804fac:	e03ffa15 	stw	zero,-24(fp)
    }
    break;
 8804fb0:	00000d06 	br	8804fe8 <altera_avalon_jtag_uart_ioctl+0xe0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
 8804fb4:	e0bffb17 	ldw	r2,-20(fp)
 8804fb8:	10c00117 	ldw	r3,4(r2)
 8804fbc:	00a00034 	movhi	r2,32768
 8804fc0:	10bfffc4 	addi	r2,r2,-1
 8804fc4:	18800826 	beq	r3,r2,8804fe8 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
 8804fc8:	e13ffd17 	ldw	r4,-12(fp)
 8804fcc:	e0bffb17 	ldw	r2,-20(fp)
 8804fd0:	10c00917 	ldw	r3,36(r2)
 8804fd4:	e0bffb17 	ldw	r2,-20(fp)
 8804fd8:	10800117 	ldw	r2,4(r2)
 8804fdc:	1885803a 	cmpltu	r2,r3,r2
 8804fe0:	20800015 	stw	r2,0(r4)
      rc = 0;
 8804fe4:	e03ffa15 	stw	zero,-24(fp)

  default:
    break;
  }

  return rc;
 8804fe8:	e0bffa17 	ldw	r2,-24(fp)
}
 8804fec:	e037883a 	mov	sp,fp
 8804ff0:	df000017 	ldw	fp,0(sp)
 8804ff4:	dec00104 	addi	sp,sp,4
 8804ff8:	f800283a 	ret

08804ffc <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
 8804ffc:	defff204 	addi	sp,sp,-56
 8805000:	dfc00d15 	stw	ra,52(sp)
 8805004:	df000c15 	stw	fp,48(sp)
 8805008:	df000c04 	addi	fp,sp,48
 880500c:	e13ffb15 	stw	r4,-20(fp)
 8805010:	e17ffc15 	stw	r5,-16(fp)
 8805014:	e1bffd15 	stw	r6,-12(fp)
 8805018:	e1fffe15 	stw	r7,-8(fp)
  char * ptr = buffer;
 880501c:	e0bffc17 	ldw	r2,-16(fp)
 8805020:	e0bffa15 	stw	r2,-24(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 8805024:	00004806 	br	8805148 <altera_avalon_jtag_uart_read+0x14c>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
 8805028:	e0bffb17 	ldw	r2,-20(fp)
 880502c:	10800a17 	ldw	r2,40(r2)
 8805030:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
 8805034:	e0bffb17 	ldw	r2,-20(fp)
 8805038:	10800b17 	ldw	r2,44(r2)
 880503c:	e0bff615 	stw	r2,-40(fp)

      if (in >= out)
 8805040:	e0fff717 	ldw	r3,-36(fp)
 8805044:	e0bff617 	ldw	r2,-40(fp)
 8805048:	18800536 	bltu	r3,r2,8805060 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
 880504c:	e0bff717 	ldw	r2,-36(fp)
 8805050:	e0fff617 	ldw	r3,-40(fp)
 8805054:	10c5c83a 	sub	r2,r2,r3
 8805058:	e0bff815 	stw	r2,-32(fp)
 880505c:	00000406 	br	8805070 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
 8805060:	00820004 	movi	r2,2048
 8805064:	e0fff617 	ldw	r3,-40(fp)
 8805068:	10c5c83a 	sub	r2,r2,r3
 880506c:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
 8805070:	e0bff817 	ldw	r2,-32(fp)
 8805074:	1005003a 	cmpeq	r2,r2,zero
 8805078:	10001f1e 	bne	r2,zero,88050f8 <altera_avalon_jtag_uart_read+0xfc>
        break; /* No more data available */

      if (n > space)
 880507c:	e0fffd17 	ldw	r3,-12(fp)
 8805080:	e0bff817 	ldw	r2,-32(fp)
 8805084:	1880022e 	bgeu	r3,r2,8805090 <altera_avalon_jtag_uart_read+0x94>
        n = space;
 8805088:	e0bffd17 	ldw	r2,-12(fp)
 880508c:	e0bff815 	stw	r2,-32(fp)

      memcpy(ptr, sp->rx_buf + out, n);
 8805090:	e0bffb17 	ldw	r2,-20(fp)
 8805094:	10c00e04 	addi	r3,r2,56
 8805098:	e0bff617 	ldw	r2,-40(fp)
 880509c:	1887883a 	add	r3,r3,r2
 88050a0:	e0bffa17 	ldw	r2,-24(fp)
 88050a4:	1009883a 	mov	r4,r2
 88050a8:	180b883a 	mov	r5,r3
 88050ac:	e1bff817 	ldw	r6,-32(fp)
 88050b0:	88083d00 	call	88083d0 <memcpy>
      ptr   += n;
 88050b4:	e0fff817 	ldw	r3,-32(fp)
 88050b8:	e0bffa17 	ldw	r2,-24(fp)
 88050bc:	10c5883a 	add	r2,r2,r3
 88050c0:	e0bffa15 	stw	r2,-24(fp)
      space -= n;
 88050c4:	e0fffd17 	ldw	r3,-12(fp)
 88050c8:	e0bff817 	ldw	r2,-32(fp)
 88050cc:	1885c83a 	sub	r2,r3,r2
 88050d0:	e0bffd15 	stw	r2,-12(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 88050d4:	e0fff617 	ldw	r3,-40(fp)
 88050d8:	e0bff817 	ldw	r2,-32(fp)
 88050dc:	1885883a 	add	r2,r3,r2
 88050e0:	10c1ffcc 	andi	r3,r2,2047
 88050e4:	e0bffb17 	ldw	r2,-20(fp)
 88050e8:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
 88050ec:	e0bffd17 	ldw	r2,-12(fp)
 88050f0:	10800048 	cmpgei	r2,r2,1
 88050f4:	103fcc1e 	bne	r2,zero,8805028 <altera_avalon_jtag_uart_read+0x2c>

    /* If we read any data then return it */
    if (ptr != buffer)
 88050f8:	e0fffa17 	ldw	r3,-24(fp)
 88050fc:	e0bffc17 	ldw	r2,-16(fp)
 8805100:	1880141e 	bne	r3,r2,8805154 <altera_avalon_jtag_uart_read+0x158>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
 8805104:	e0bffe17 	ldw	r2,-8(fp)
 8805108:	1090000c 	andi	r2,r2,16384
 880510c:	1004c03a 	cmpne	r2,r2,zero
 8805110:	1000101e 	bne	r2,zero,8805154 <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
 8805114:	e0bffb17 	ldw	r2,-20(fp)
 8805118:	10c00a17 	ldw	r3,40(r2)
 880511c:	e0bff717 	ldw	r2,-36(fp)
 8805120:	1880051e 	bne	r3,r2,8805138 <altera_avalon_jtag_uart_read+0x13c>
 8805124:	e0bffb17 	ldw	r2,-20(fp)
 8805128:	10c00917 	ldw	r3,36(r2)
 880512c:	e0bffb17 	ldw	r2,-20(fp)
 8805130:	10800117 	ldw	r2,4(r2)
 8805134:	18bff736 	bltu	r3,r2,8805114 <altera_avalon_jtag_uart_read+0x118>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
 8805138:	e0bffb17 	ldw	r2,-20(fp)
 880513c:	10c00a17 	ldw	r3,40(r2)
 8805140:	e0bff717 	ldw	r2,-36(fp)
 8805144:	18800326 	beq	r3,r2,8805154 <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 8805148:	e0bffd17 	ldw	r2,-12(fp)
 880514c:	10800048 	cmpgei	r2,r2,1
 8805150:	103fb51e 	bne	r2,zero,8805028 <altera_avalon_jtag_uart_read+0x2c>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
 8805154:	e0fffa17 	ldw	r3,-24(fp)
 8805158:	e0bffc17 	ldw	r2,-16(fp)
 880515c:	18801926 	beq	r3,r2,88051c4 <altera_avalon_jtag_uart_read+0x1c8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8805160:	0005303a 	rdctl	r2,status
 8805164:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8805168:	e0fff517 	ldw	r3,-44(fp)
 880516c:	00bfff84 	movi	r2,-2
 8805170:	1884703a 	and	r2,r3,r2
 8805174:	1001703a 	wrctl	status,r2
  
  return context;
 8805178:	e0bff517 	ldw	r2,-44(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
 880517c:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 8805180:	e0bffb17 	ldw	r2,-20(fp)
 8805184:	10800817 	ldw	r2,32(r2)
 8805188:	10c00054 	ori	r3,r2,1
 880518c:	e0bffb17 	ldw	r2,-20(fp)
 8805190:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 8805194:	e0bffb17 	ldw	r2,-20(fp)
 8805198:	10800017 	ldw	r2,0(r2)
 880519c:	11000104 	addi	r4,r2,4
 88051a0:	e0bffb17 	ldw	r2,-20(fp)
 88051a4:	10800817 	ldw	r2,32(r2)
 88051a8:	1007883a 	mov	r3,r2
 88051ac:	2005883a 	mov	r2,r4
 88051b0:	10c00035 	stwio	r3,0(r2)
 88051b4:	e0bff917 	ldw	r2,-28(fp)
 88051b8:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 88051bc:	e0bff417 	ldw	r2,-48(fp)
 88051c0:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
 88051c4:	e0fffa17 	ldw	r3,-24(fp)
 88051c8:	e0bffc17 	ldw	r2,-16(fp)
 88051cc:	18800526 	beq	r3,r2,88051e4 <altera_avalon_jtag_uart_read+0x1e8>
    return ptr - buffer;
 88051d0:	e0fffa17 	ldw	r3,-24(fp)
 88051d4:	e0bffc17 	ldw	r2,-16(fp)
 88051d8:	1887c83a 	sub	r3,r3,r2
 88051dc:	e0ffff15 	stw	r3,-4(fp)
 88051e0:	00000906 	br	8805208 <altera_avalon_jtag_uart_read+0x20c>
  else if (flags & O_NONBLOCK)
 88051e4:	e0bffe17 	ldw	r2,-8(fp)
 88051e8:	1090000c 	andi	r2,r2,16384
 88051ec:	1005003a 	cmpeq	r2,r2,zero
 88051f0:	1000031e 	bne	r2,zero,8805200 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
 88051f4:	00bffd44 	movi	r2,-11
 88051f8:	e0bfff15 	stw	r2,-4(fp)
 88051fc:	00000206 	br	8805208 <altera_avalon_jtag_uart_read+0x20c>
  else
    return -EIO;
 8805200:	00bffec4 	movi	r2,-5
 8805204:	e0bfff15 	stw	r2,-4(fp)
 8805208:	e0bfff17 	ldw	r2,-4(fp)
}
 880520c:	e037883a 	mov	sp,fp
 8805210:	dfc00117 	ldw	ra,4(sp)
 8805214:	df000017 	ldw	fp,0(sp)
 8805218:	dec00204 	addi	sp,sp,8
 880521c:	f800283a 	ret

08805220 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 8805220:	defff204 	addi	sp,sp,-56
 8805224:	dfc00d15 	stw	ra,52(sp)
 8805228:	df000c15 	stw	fp,48(sp)
 880522c:	df000c04 	addi	fp,sp,48
 8805230:	e13ffb15 	stw	r4,-20(fp)
 8805234:	e17ffc15 	stw	r5,-16(fp)
 8805238:	e1bffd15 	stw	r6,-12(fp)
 880523c:	e1fffe15 	stw	r7,-8(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
 8805240:	e03ff915 	stw	zero,-28(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
 8805244:	e0bffc17 	ldw	r2,-16(fp)
 8805248:	e0bff615 	stw	r2,-40(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 880524c:	00003a06 	br	8805338 <altera_avalon_jtag_uart_write+0x118>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
 8805250:	e0bffb17 	ldw	r2,-20(fp)
 8805254:	10800c17 	ldw	r2,48(r2)
 8805258:	e0bffa15 	stw	r2,-24(fp)
      out = sp->tx_out;
 880525c:	e0bffb17 	ldw	r2,-20(fp)
 8805260:	10800d17 	ldw	r2,52(r2)
 8805264:	e0bff915 	stw	r2,-28(fp)

      if (in < out)
 8805268:	e0fffa17 	ldw	r3,-24(fp)
 880526c:	e0bff917 	ldw	r2,-28(fp)
 8805270:	1880062e 	bgeu	r3,r2,880528c <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
 8805274:	e0fff917 	ldw	r3,-28(fp)
 8805278:	e0bffa17 	ldw	r2,-24(fp)
 880527c:	1885c83a 	sub	r2,r3,r2
 8805280:	10bfffc4 	addi	r2,r2,-1
 8805284:	e0bff815 	stw	r2,-32(fp)
 8805288:	00000c06 	br	88052bc <altera_avalon_jtag_uart_write+0x9c>
      else if (out > 0)
 880528c:	e0bff917 	ldw	r2,-28(fp)
 8805290:	1005003a 	cmpeq	r2,r2,zero
 8805294:	1000051e 	bne	r2,zero,88052ac <altera_avalon_jtag_uart_write+0x8c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
 8805298:	00820004 	movi	r2,2048
 880529c:	e0fffa17 	ldw	r3,-24(fp)
 88052a0:	10c5c83a 	sub	r2,r2,r3
 88052a4:	e0bff815 	stw	r2,-32(fp)
 88052a8:	00000406 	br	88052bc <altera_avalon_jtag_uart_write+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
 88052ac:	0081ffc4 	movi	r2,2047
 88052b0:	e0fffa17 	ldw	r3,-24(fp)
 88052b4:	10c5c83a 	sub	r2,r2,r3
 88052b8:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
 88052bc:	e0bff817 	ldw	r2,-32(fp)
 88052c0:	1005003a 	cmpeq	r2,r2,zero
 88052c4:	10001f1e 	bne	r2,zero,8805344 <altera_avalon_jtag_uart_write+0x124>
        break;

      if (n > count)
 88052c8:	e0fffd17 	ldw	r3,-12(fp)
 88052cc:	e0bff817 	ldw	r2,-32(fp)
 88052d0:	1880022e 	bgeu	r3,r2,88052dc <altera_avalon_jtag_uart_write+0xbc>
        n = count;
 88052d4:	e0bffd17 	ldw	r2,-12(fp)
 88052d8:	e0bff815 	stw	r2,-32(fp)

      memcpy(sp->tx_buf + in, ptr, n);
 88052dc:	e0bffb17 	ldw	r2,-20(fp)
 88052e0:	10c20e04 	addi	r3,r2,2104
 88052e4:	e0bffa17 	ldw	r2,-24(fp)
 88052e8:	1885883a 	add	r2,r3,r2
 88052ec:	e0fffc17 	ldw	r3,-16(fp)
 88052f0:	1009883a 	mov	r4,r2
 88052f4:	180b883a 	mov	r5,r3
 88052f8:	e1bff817 	ldw	r6,-32(fp)
 88052fc:	88083d00 	call	88083d0 <memcpy>
      ptr   += n;
 8805300:	e0fff817 	ldw	r3,-32(fp)
 8805304:	e0bffc17 	ldw	r2,-16(fp)
 8805308:	10c5883a 	add	r2,r2,r3
 880530c:	e0bffc15 	stw	r2,-16(fp)
      count -= n;
 8805310:	e0fffd17 	ldw	r3,-12(fp)
 8805314:	e0bff817 	ldw	r2,-32(fp)
 8805318:	1885c83a 	sub	r2,r3,r2
 880531c:	e0bffd15 	stw	r2,-12(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 8805320:	e0fffa17 	ldw	r3,-24(fp)
 8805324:	e0bff817 	ldw	r2,-32(fp)
 8805328:	1885883a 	add	r2,r3,r2
 880532c:	10c1ffcc 	andi	r3,r2,2047
 8805330:	e0bffb17 	ldw	r2,-20(fp)
 8805334:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 8805338:	e0bffd17 	ldw	r2,-12(fp)
 880533c:	10800048 	cmpgei	r2,r2,1
 8805340:	103fc31e 	bne	r2,zero,8805250 <altera_avalon_jtag_uart_write+0x30>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8805344:	0005303a 	rdctl	r2,status
 8805348:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 880534c:	e0fff517 	ldw	r3,-44(fp)
 8805350:	00bfff84 	movi	r2,-2
 8805354:	1884703a 	and	r2,r3,r2
 8805358:	1001703a 	wrctl	status,r2
  
  return context;
 880535c:	e0bff517 	ldw	r2,-44(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
 8805360:	e0bff715 	stw	r2,-36(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 8805364:	e0bffb17 	ldw	r2,-20(fp)
 8805368:	10800817 	ldw	r2,32(r2)
 880536c:	10c00094 	ori	r3,r2,2
 8805370:	e0bffb17 	ldw	r2,-20(fp)
 8805374:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 8805378:	e0bffb17 	ldw	r2,-20(fp)
 880537c:	10800017 	ldw	r2,0(r2)
 8805380:	11000104 	addi	r4,r2,4
 8805384:	e0bffb17 	ldw	r2,-20(fp)
 8805388:	10800817 	ldw	r2,32(r2)
 880538c:	1007883a 	mov	r3,r2
 8805390:	2005883a 	mov	r2,r4
 8805394:	10c00035 	stwio	r3,0(r2)
 8805398:	e0bff717 	ldw	r2,-36(fp)
 880539c:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 88053a0:	e0bff417 	ldw	r2,-48(fp)
 88053a4:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
 88053a8:	e0bffd17 	ldw	r2,-12(fp)
 88053ac:	10800050 	cmplti	r2,r2,1
 88053b0:	1000111e 	bne	r2,zero,88053f8 <altera_avalon_jtag_uart_write+0x1d8>
    {
      if (flags & O_NONBLOCK)
 88053b4:	e0bffe17 	ldw	r2,-8(fp)
 88053b8:	1090000c 	andi	r2,r2,16384
 88053bc:	1004c03a 	cmpne	r2,r2,zero
 88053c0:	1000101e 	bne	r2,zero,8805404 <altera_avalon_jtag_uart_write+0x1e4>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
 88053c4:	e0bffb17 	ldw	r2,-20(fp)
 88053c8:	10c00d17 	ldw	r3,52(r2)
 88053cc:	e0bff917 	ldw	r2,-28(fp)
 88053d0:	1880051e 	bne	r3,r2,88053e8 <altera_avalon_jtag_uart_write+0x1c8>
 88053d4:	e0bffb17 	ldw	r2,-20(fp)
 88053d8:	10c00917 	ldw	r3,36(r2)
 88053dc:	e0bffb17 	ldw	r2,-20(fp)
 88053e0:	10800117 	ldw	r2,4(r2)
 88053e4:	18bff736 	bltu	r3,r2,88053c4 <altera_avalon_jtag_uart_write+0x1a4>
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
 88053e8:	e0bffb17 	ldw	r2,-20(fp)
 88053ec:	10c00d17 	ldw	r3,52(r2)
 88053f0:	e0bff917 	ldw	r2,-28(fp)
 88053f4:	18800326 	beq	r3,r2,8805404 <altera_avalon_jtag_uart_write+0x1e4>
        break;
    }
  }
  while (count > 0);
 88053f8:	e0bffd17 	ldw	r2,-12(fp)
 88053fc:	10800048 	cmpgei	r2,r2,1
 8805400:	103fcd1e 	bne	r2,zero,8805338 <altera_avalon_jtag_uart_write+0x118>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
 8805404:	e0fffc17 	ldw	r3,-16(fp)
 8805408:	e0bff617 	ldw	r2,-40(fp)
 880540c:	18800526 	beq	r3,r2,8805424 <altera_avalon_jtag_uart_write+0x204>
    return ptr - start;
 8805410:	e0fffc17 	ldw	r3,-16(fp)
 8805414:	e0bff617 	ldw	r2,-40(fp)
 8805418:	1887c83a 	sub	r3,r3,r2
 880541c:	e0ffff15 	stw	r3,-4(fp)
 8805420:	00000906 	br	8805448 <altera_avalon_jtag_uart_write+0x228>
  else if (flags & O_NONBLOCK)
 8805424:	e0bffe17 	ldw	r2,-8(fp)
 8805428:	1090000c 	andi	r2,r2,16384
 880542c:	1005003a 	cmpeq	r2,r2,zero
 8805430:	1000031e 	bne	r2,zero,8805440 <altera_avalon_jtag_uart_write+0x220>
    return -EWOULDBLOCK;
 8805434:	00bffd44 	movi	r2,-11
 8805438:	e0bfff15 	stw	r2,-4(fp)
 880543c:	00000206 	br	8805448 <altera_avalon_jtag_uart_write+0x228>
  else
    return -EIO; /* Host not connected */
 8805440:	00bffec4 	movi	r2,-5
 8805444:	e0bfff15 	stw	r2,-4(fp)
 8805448:	e0bfff17 	ldw	r2,-4(fp)
}
 880544c:	e037883a 	mov	sp,fp
 8805450:	dfc00117 	ldw	ra,4(sp)
 8805454:	df000017 	ldw	fp,0(sp)
 8805458:	dec00204 	addi	sp,sp,8
 880545c:	f800283a 	ret

08805460 <alt_avalon_mailbox_init>:

/*
 * Register a Mutex device
 */
int alt_avalon_mailbox_init (alt_mailbox_dev* dev)
{
 8805460:	defffa04 	addi	sp,sp,-24
 8805464:	dfc00515 	stw	ra,20(sp)
 8805468:	df000415 	stw	fp,16(sp)
 880546c:	df000404 	addi	fp,sp,16
 8805470:	e13fff15 	stw	r4,-4(fp)
  int ret_code;
  alt_mutex_dev* write_mutex, *read_mutex;
  extern alt_llist alt_mailbox_list;

  ret_code = alt_avalon_mutex_reg( &dev->write_mutex );
 8805474:	e0bfff17 	ldw	r2,-4(fp)
 8805478:	11000704 	addi	r4,r2,28
 880547c:	88055b80 	call	88055b8 <alt_avalon_mutex_reg>
 8805480:	e0bffe15 	stw	r2,-8(fp)

  if (!ret_code)
 8805484:	e0bffe17 	ldw	r2,-8(fp)
 8805488:	1004c03a 	cmpne	r2,r2,zero
 880548c:	1000041e 	bne	r2,zero,88054a0 <alt_avalon_mailbox_init+0x40>
  {
    ret_code = alt_avalon_mutex_reg( &dev->read_mutex );
 8805490:	e0bfff17 	ldw	r2,-4(fp)
 8805494:	11000b04 	addi	r4,r2,44
 8805498:	88055b80 	call	88055b8 <alt_avalon_mutex_reg>
 880549c:	e0bffe15 	stw	r2,-8(fp)
  }

  if (!ret_code)
 88054a0:	e0bffe17 	ldw	r2,-8(fp)
 88054a4:	1004c03a 	cmpne	r2,r2,zero
 88054a8:	1000041e 	bne	r2,zero,88054bc <alt_avalon_mailbox_init+0x5c>
  {
    ret_code = alt_dev_llist_insert((alt_dev_llist*) dev, &alt_mailbox_list);
 88054ac:	e13fff17 	ldw	r4,-4(fp)
 88054b0:	d1600604 	addi	r5,gp,-32744
 88054b4:	88075180 	call	8807518 <alt_dev_llist_insert>
 88054b8:	e0bffe15 	stw	r2,-8(fp)
  }

  if (!ret_code)
 88054bc:	e0bffe17 	ldw	r2,-8(fp)
 88054c0:	1004c03a 	cmpne	r2,r2,zero
 88054c4:	1000361e 	bne	r2,zero,88055a0 <alt_avalon_mailbox_init+0x140>
  {
    write_mutex = altera_avalon_mutex_open(dev->write_mutex.name);
 88054c8:	e0bfff17 	ldw	r2,-4(fp)
 88054cc:	11000917 	ldw	r4,36(r2)
 88054d0:	8805a040 	call	8805a04 <altera_avalon_mutex_open>
 88054d4:	e0bffd15 	stw	r2,-12(fp)
    if (write_mutex)
 88054d8:	e0bffd17 	ldw	r2,-12(fp)
 88054dc:	1005003a 	cmpeq	r2,r2,zero
 88054e0:	10002f1e 	bne	r2,zero,88055a0 <alt_avalon_mailbox_init+0x140>
    {
      read_mutex = altera_avalon_mutex_open(dev->read_mutex.name);
 88054e4:	e0bfff17 	ldw	r2,-4(fp)
 88054e8:	11000d17 	ldw	r4,52(r2)
 88054ec:	8805a040 	call	8805a04 <altera_avalon_mutex_open>
 88054f0:	e0bffc15 	stw	r2,-16(fp)
      if (read_mutex)
 88054f4:	e0bffc17 	ldw	r2,-16(fp)
 88054f8:	1005003a 	cmpeq	r2,r2,zero
 88054fc:	1000281e 	bne	r2,zero,88055a0 <alt_avalon_mailbox_init+0x140>
      {
        while (altera_avalon_mutex_first_lock(write_mutex))
 8805500:	00000f06 	br	8805540 <alt_avalon_mailbox_init+0xe0>
        {
          if (!altera_avalon_mutex_trylock(write_mutex, 1))
 8805504:	e13ffd17 	ldw	r4,-12(fp)
 8805508:	01400044 	movi	r5,1
 880550c:	8805b1c0 	call	8805b1c <altera_avalon_mutex_trylock>
 8805510:	1004c03a 	cmpne	r2,r2,zero
 8805514:	10000a1e 	bne	r2,zero,8805540 <alt_avalon_mailbox_init+0xe0>
          {
            IOWR((alt_u32)(dev->write_ptr), 0,
 8805518:	e0bfff17 	ldw	r2,-4(fp)
 880551c:	10800317 	ldw	r2,12(r2)
 8805520:	1009883a 	mov	r4,r2
 8805524:	e0bfff17 	ldw	r2,-4(fp)
 8805528:	10800517 	ldw	r2,20(r2)
 880552c:	1007883a 	mov	r3,r2
 8805530:	2005883a 	mov	r2,r4
 8805534:	10c00035 	stwio	r3,0(r2)
              (alt_u32) dev->mailbox_mem_start_ptr);
            altera_avalon_mutex_unlock(write_mutex);
 8805538:	e13ffd17 	ldw	r4,-12(fp)
 880553c:	8805b5c0 	call	8805b5c <altera_avalon_mutex_unlock>
    if (write_mutex)
    {
      read_mutex = altera_avalon_mutex_open(dev->read_mutex.name);
      if (read_mutex)
      {
        while (altera_avalon_mutex_first_lock(write_mutex))
 8805540:	e13ffd17 	ldw	r4,-12(fp)
 8805544:	8805c340 	call	8805c34 <altera_avalon_mutex_first_lock>
 8805548:	1004c03a 	cmpne	r2,r2,zero
 880554c:	103fed1e 	bne	r2,zero,8805504 <alt_avalon_mailbox_init+0xa4>
              (alt_u32) dev->mailbox_mem_start_ptr);
            altera_avalon_mutex_unlock(write_mutex);
          }
        }

        while (altera_avalon_mutex_first_lock(read_mutex))
 8805550:	00000f06 	br	8805590 <alt_avalon_mailbox_init+0x130>
        {
          if (!altera_avalon_mutex_trylock(read_mutex, 1))
 8805554:	e13ffc17 	ldw	r4,-16(fp)
 8805558:	01400044 	movi	r5,1
 880555c:	8805b1c0 	call	8805b1c <altera_avalon_mutex_trylock>
 8805560:	1004c03a 	cmpne	r2,r2,zero
 8805564:	10000a1e 	bne	r2,zero,8805590 <alt_avalon_mailbox_init+0x130>
          {
            IOWR((alt_u32)(dev->read_ptr), 0,
 8805568:	e0bfff17 	ldw	r2,-4(fp)
 880556c:	10800417 	ldw	r2,16(r2)
 8805570:	1009883a 	mov	r4,r2
 8805574:	e0bfff17 	ldw	r2,-4(fp)
 8805578:	10800517 	ldw	r2,20(r2)
 880557c:	1007883a 	mov	r3,r2
 8805580:	2005883a 	mov	r2,r4
 8805584:	10c00035 	stwio	r3,0(r2)
              (alt_u32) dev->mailbox_mem_start_ptr);
            altera_avalon_mutex_unlock(read_mutex);
 8805588:	e13ffc17 	ldw	r4,-16(fp)
 880558c:	8805b5c0 	call	8805b5c <altera_avalon_mutex_unlock>
              (alt_u32) dev->mailbox_mem_start_ptr);
            altera_avalon_mutex_unlock(write_mutex);
          }
        }

        while (altera_avalon_mutex_first_lock(read_mutex))
 8805590:	e13ffc17 	ldw	r4,-16(fp)
 8805594:	8805c340 	call	8805c34 <altera_avalon_mutex_first_lock>
 8805598:	1004c03a 	cmpne	r2,r2,zero
 880559c:	103fed1e 	bne	r2,zero,8805554 <alt_avalon_mailbox_init+0xf4>
          }
        }
      }
    }
  }
  return ret_code;
 88055a0:	e0bffe17 	ldw	r2,-8(fp)
}
 88055a4:	e037883a 	mov	sp,fp
 88055a8:	dfc00117 	ldw	ra,4(sp)
 88055ac:	df000017 	ldw	fp,0(sp)
 88055b0:	dec00204 	addi	sp,sp,8
 88055b4:	f800283a 	ret

088055b8 <alt_avalon_mutex_reg>:
/*
 * Register a Mutex device
 */

static ALT_INLINE int alt_avalon_mutex_reg (alt_mutex_dev* dev)
{
 88055b8:	defffc04 	addi	sp,sp,-16
 88055bc:	dfc00315 	stw	ra,12(sp)
 88055c0:	df000215 	stw	fp,8(sp)
 88055c4:	df000204 	addi	fp,sp,8
 88055c8:	e13fff15 	stw	r4,-4(fp)
 * HAL.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_no_error (void)
{
  return 0;
 88055cc:	0005883a 	mov	r2,zero
  int ret_code;
  extern alt_llist alt_mutex_list;
  ret_code = ALT_SEM_CREATE (&dev->lock, 1);
 88055d0:	e0bffe15 	stw	r2,-8(fp)
  if (!ret_code)
 88055d4:	e0bffe17 	ldw	r2,-8(fp)
 88055d8:	1004c03a 	cmpne	r2,r2,zero
 88055dc:	1000061e 	bne	r2,zero,88055f8 <alt_avalon_mutex_reg+0x40>
  {
    ret_code = alt_dev_llist_insert((alt_dev_llist*) dev, &alt_mutex_list);
 88055e0:	e13fff17 	ldw	r4,-4(fp)
 88055e4:	01422074 	movhi	r5,2177
 88055e8:	2968b004 	addi	r5,r5,-23872
 88055ec:	88075180 	call	8807518 <alt_dev_llist_insert>
 88055f0:	e0bffe15 	stw	r2,-8(fp)
 88055f4:	00000506 	br	880560c <alt_avalon_mutex_reg+0x54>
  }
  else
  {
    ALT_ERRNO = ENOMEM;
 88055f8:	88056240 	call	8805624 <alt_get_errno>
 88055fc:	00c00304 	movi	r3,12
 8805600:	10c00015 	stw	r3,0(r2)
    ret_code = -ENOMEM;
 8805604:	00bffd04 	movi	r2,-12
 8805608:	e0bffe15 	stw	r2,-8(fp)
  }

  return ret_code;
 880560c:	e0bffe17 	ldw	r2,-8(fp)
}
 8805610:	e037883a 	mov	sp,fp
 8805614:	dfc00117 	ldw	ra,4(sp)
 8805618:	df000017 	ldw	fp,0(sp)
 880561c:	dec00204 	addi	sp,sp,8
 8805620:	f800283a 	ret

08805624 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 8805624:	defffd04 	addi	sp,sp,-12
 8805628:	dfc00215 	stw	ra,8(sp)
 880562c:	df000115 	stw	fp,4(sp)
 8805630:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 8805634:	00822074 	movhi	r2,2177
 8805638:	10a8b704 	addi	r2,r2,-23844
 880563c:	10800017 	ldw	r2,0(r2)
 8805640:	1005003a 	cmpeq	r2,r2,zero
 8805644:	1000061e 	bne	r2,zero,8805660 <alt_get_errno+0x3c>
 8805648:	00822074 	movhi	r2,2177
 880564c:	10a8b704 	addi	r2,r2,-23844
 8805650:	10800017 	ldw	r2,0(r2)
 8805654:	103ee83a 	callr	r2
 8805658:	e0bfff15 	stw	r2,-4(fp)
 880565c:	00000306 	br	880566c <alt_get_errno+0x48>
 8805660:	00822074 	movhi	r2,2177
 8805664:	10aeaf04 	addi	r2,r2,-17732
 8805668:	e0bfff15 	stw	r2,-4(fp)
 880566c:	e0bfff17 	ldw	r2,-4(fp)
}
 8805670:	e037883a 	mov	sp,fp
 8805674:	dfc00117 	ldw	ra,4(sp)
 8805678:	df000017 	ldw	fp,0(sp)
 880567c:	dec00204 	addi	sp,sp,8
 8805680:	f800283a 	ret

08805684 <altera_avalon_mailbox_open>:
 * Search the list of registered mailboxes for one with the supplied name.
 *
 * The return value will be NULL on failure, and non-NULL otherwise.
 */
alt_mailbox_dev* altera_avalon_mailbox_open (const char* name)
{
 8805684:	defffc04 	addi	sp,sp,-16
 8805688:	dfc00315 	stw	ra,12(sp)
 880568c:	df000215 	stw	fp,8(sp)
 8805690:	df000204 	addi	fp,sp,8
 8805694:	e13fff15 	stw	r4,-4(fp)
  alt_mailbox_dev* dev;

  dev = (alt_mailbox_dev*) alt_find_dev (name, &alt_mailbox_list);
 8805698:	e13fff17 	ldw	r4,-4(fp)
 880569c:	d1600604 	addi	r5,gp,-32744
 88056a0:	88076f40 	call	88076f4 <alt_find_dev>
 88056a4:	e0bffe15 	stw	r2,-8(fp)

  if (NULL == dev)
 88056a8:	e0bffe17 	ldw	r2,-8(fp)
 88056ac:	1004c03a 	cmpne	r2,r2,zero
 88056b0:	1000041e 	bne	r2,zero,88056c4 <altera_avalon_mailbox_open+0x40>
  {
    ALT_ERRNO = ENODEV;
 88056b4:	88056240 	call	8805624 <alt_get_errno>
 88056b8:	1007883a 	mov	r3,r2
 88056bc:	008004c4 	movi	r2,19
 88056c0:	18800015 	stw	r2,0(r3)
  }

  return dev;
 88056c4:	e0bffe17 	ldw	r2,-8(fp)

}
 88056c8:	e037883a 	mov	sp,fp
 88056cc:	dfc00117 	ldw	ra,4(sp)
 88056d0:	df000017 	ldw	fp,0(sp)
 88056d4:	dec00204 	addi	sp,sp,8
 88056d8:	f800283a 	ret

088056dc <altera_avalon_mailbox_close>:
 * altera_avalon_mailbox_close - Does nothing at the moment, but included for 
 * completeness
 *
 */
void altera_avalon_mailbox_close (alt_mailbox_dev* dev)
{
 88056dc:	defffe04 	addi	sp,sp,-8
 88056e0:	df000115 	stw	fp,4(sp)
 88056e4:	df000104 	addi	fp,sp,4
 88056e8:	e13fff15 	stw	r4,-4(fp)
  return;
}
 88056ec:	e037883a 	mov	sp,fp
 88056f0:	df000017 	ldw	fp,0(sp)
 88056f4:	dec00104 	addi	sp,sp,4
 88056f8:	f800283a 	ret

088056fc <altera_avalon_mailbox_post>:
 * 
 * Post a message to the mailbox
 *
 */
int altera_avalon_mailbox_post (alt_mailbox_dev* dev, alt_u32 msg)
{
 88056fc:	defff904 	addi	sp,sp,-28
 8805700:	dfc00615 	stw	ra,24(sp)
 8805704:	df000515 	stw	fp,20(sp)
 8805708:	df000504 	addi	fp,sp,20
 880570c:	e13ffe15 	stw	r4,-8(fp)
 8805710:	e17fff15 	stw	r5,-4(fp)
  int ret_code = 0;
 8805714:	e03ffd15 	stw	zero,-12(fp)
  *   Claim the Mutex on the write pointer 
  *
  *   The mutex function takes care of the thread sempahore if running
  *   in a multi-threaded environment
  */
  altera_avalon_mutex_lock( &dev->write_mutex, 1 );
 8805718:	e0bffe17 	ldw	r2,-8(fp)
 880571c:	11000704 	addi	r4,r2,28
 8805720:	01400044 	movi	r5,1
 8805724:	8805adc0 	call	8805adc <altera_avalon_mutex_lock>

  temp = (alt_u32 *) IORD(dev->write_ptr, 0);
 8805728:	e0bffe17 	ldw	r2,-8(fp)
 880572c:	10800317 	ldw	r2,12(r2)
 8805730:	10800037 	ldwio	r2,0(r2)
 8805734:	e0bffc15 	stw	r2,-16(fp)
  next_write = alt_mailbox_increment_ptr(dev, temp);
 8805738:	e13ffe17 	ldw	r4,-8(fp)
 880573c:	e17ffc17 	ldw	r5,-16(fp)
 8805740:	88057b80 	call	88057b8 <alt_mailbox_increment_ptr>
 8805744:	e0bffb15 	stw	r2,-20(fp)

  if (next_write == ((alt_u32 *)IORD(dev->read_ptr, 0)) )
 8805748:	e0bffe17 	ldw	r2,-8(fp)
 880574c:	10800417 	ldw	r2,16(r2)
 8805750:	10800037 	ldwio	r2,0(r2)
 8805754:	1007883a 	mov	r3,r2
 8805758:	e0bffb17 	ldw	r2,-20(fp)
 880575c:	1880061e 	bne	r3,r2,8805778 <altera_avalon_mailbox_post+0x7c>
  {
    ALT_ERRNO = EWOULDBLOCK;
 8805760:	88056240 	call	8805624 <alt_get_errno>
 8805764:	00c002c4 	movi	r3,11
 8805768:	10c00015 	stw	r3,0(r2)
    ret_code = -EWOULDBLOCK;
 880576c:	00bffd44 	movi	r2,-11
 8805770:	e0bffd15 	stw	r2,-12(fp)
 8805774:	00000706 	br	8805794 <altera_avalon_mailbox_post+0x98>
  }
  else
  {
    IOWR(temp, 0, msg);
 8805778:	e0bffc17 	ldw	r2,-16(fp)
 880577c:	e0ffff17 	ldw	r3,-4(fp)
 8805780:	10c00035 	stwio	r3,0(r2)
    IOWR((alt_u32)(dev->write_ptr), 0, (alt_u32)next_write);
 8805784:	e0bffe17 	ldw	r2,-8(fp)
 8805788:	10800317 	ldw	r2,12(r2)
 880578c:	e0fffb17 	ldw	r3,-20(fp)
 8805790:	10c00035 	stwio	r3,0(r2)
  }

  altera_avalon_mutex_unlock( &dev->write_mutex );
 8805794:	e0bffe17 	ldw	r2,-8(fp)
 8805798:	11000704 	addi	r4,r2,28
 880579c:	8805b5c0 	call	8805b5c <altera_avalon_mutex_unlock>

  return ret_code;
 88057a0:	e0bffd17 	ldw	r2,-12(fp)

}
 88057a4:	e037883a 	mov	sp,fp
 88057a8:	dfc00117 	ldw	ra,4(sp)
 88057ac:	df000017 	ldw	fp,0(sp)
 88057b0:	dec00204 	addi	sp,sp,8
 88057b4:	f800283a 	ret

088057b8 <alt_mailbox_increment_ptr>:
 *
 * Increment one of the pointers and if that would take it beyond the end
 * of the shared memory put it at the start
 */
static inline alt_u32* alt_mailbox_increment_ptr(alt_mailbox_dev* dev, alt_u32* ptr)
{
 88057b8:	defffd04 	addi	sp,sp,-12
 88057bc:	df000215 	stw	fp,8(sp)
 88057c0:	df000204 	addi	fp,sp,8
 88057c4:	e13ffe15 	stw	r4,-8(fp)
 88057c8:	e17fff15 	stw	r5,-4(fp)
  ptr += 1;
 88057cc:	e0bfff17 	ldw	r2,-4(fp)
 88057d0:	10800104 	addi	r2,r2,4
 88057d4:	e0bfff15 	stw	r2,-4(fp)

  if (ptr > dev->mailbox_mem_end_ptr)
 88057d8:	e0bffe17 	ldw	r2,-8(fp)
 88057dc:	10c00617 	ldw	r3,24(r2)
 88057e0:	e0bfff17 	ldw	r2,-4(fp)
 88057e4:	1880032e 	bgeu	r3,r2,88057f4 <alt_mailbox_increment_ptr+0x3c>
  {
    ptr = dev->mailbox_mem_start_ptr;
 88057e8:	e0bffe17 	ldw	r2,-8(fp)
 88057ec:	10800517 	ldw	r2,20(r2)
 88057f0:	e0bfff15 	stw	r2,-4(fp)
  }

  return ptr;
 88057f4:	e0bfff17 	ldw	r2,-4(fp)
}
 88057f8:	e037883a 	mov	sp,fp
 88057fc:	df000017 	ldw	fp,0(sp)
 8805800:	dec00104 	addi	sp,sp,4
 8805804:	f800283a 	ret

08805808 <altera_avalon_mailbox_pend>:
 * 
 * Block until a message is available in the mailbox
 *
 */
alt_u32 altera_avalon_mailbox_pend (alt_mailbox_dev* dev)
{
 8805808:	defffa04 	addi	sp,sp,-24
 880580c:	dfc00515 	stw	ra,20(sp)
 8805810:	df000415 	stw	fp,16(sp)
 8805814:	dc000315 	stw	r16,12(sp)
 8805818:	df000304 	addi	fp,sp,12
 880581c:	e13fff15 	stw	r4,-4(fp)
  *   Claim the Mutex on the read pointer
  *
  *   The mutex function takes care of the thread sempahore if running
  *   in a multi-threaded environment
  */
  altera_avalon_mutex_lock( &dev->read_mutex, 1 );
 8805820:	e0bfff17 	ldw	r2,-4(fp)
 8805824:	11000b04 	addi	r4,r2,44
 8805828:	01400044 	movi	r5,1
 880582c:	8805adc0 	call	8805adc <altera_avalon_mutex_lock>

  temp = (alt_u32 *)IORD(dev->read_ptr, 0);
 8805830:	e0bfff17 	ldw	r2,-4(fp)
 8805834:	10800417 	ldw	r2,16(r2)
 8805838:	10800037 	ldwio	r2,0(r2)
 880583c:	e0bffd15 	stw	r2,-12(fp)

  while ( (alt_u32 *)(IORD(dev->write_ptr, 0)) == temp );
 8805840:	e0bfff17 	ldw	r2,-4(fp)
 8805844:	10800317 	ldw	r2,12(r2)
 8805848:	10800037 	ldwio	r2,0(r2)
 880584c:	1007883a 	mov	r3,r2
 8805850:	e0bffd17 	ldw	r2,-12(fp)
 8805854:	18bffa26 	beq	r3,r2,8805840 <altera_avalon_mailbox_pend+0x38>

  msg = IORD(temp, 0);
 8805858:	e0bffd17 	ldw	r2,-12(fp)
 880585c:	10800037 	ldwio	r2,0(r2)
 8805860:	e0bffe15 	stw	r2,-8(fp)

  IOWR( (alt_u32)(dev->read_ptr), 0,
 8805864:	e0bfff17 	ldw	r2,-4(fp)
 8805868:	10800417 	ldw	r2,16(r2)
 880586c:	1021883a 	mov	r16,r2
 8805870:	e13fff17 	ldw	r4,-4(fp)
 8805874:	e17ffd17 	ldw	r5,-12(fp)
 8805878:	88057b80 	call	88057b8 <alt_mailbox_increment_ptr>
 880587c:	1007883a 	mov	r3,r2
 8805880:	8005883a 	mov	r2,r16
 8805884:	10c00035 	stwio	r3,0(r2)
    (alt_u32)(alt_mailbox_increment_ptr(dev, temp)) );

  altera_avalon_mutex_unlock( &dev->read_mutex );
 8805888:	e0bfff17 	ldw	r2,-4(fp)
 880588c:	11000b04 	addi	r4,r2,44
 8805890:	8805b5c0 	call	8805b5c <altera_avalon_mutex_unlock>

  return msg;
 8805894:	e0bffe17 	ldw	r2,-8(fp)

}
 8805898:	e037883a 	mov	sp,fp
 880589c:	dfc00217 	ldw	ra,8(sp)
 88058a0:	df000117 	ldw	fp,4(sp)
 88058a4:	dc000017 	ldw	r16,0(sp)
 88058a8:	dec00304 	addi	sp,sp,12
 88058ac:	f800283a 	ret

088058b0 <altera_avalon_mailbox_get>:
 * If a message is available in the mailbox return it otherwise return NULL
 * i.e. this is Non-Blocking
 *
 */
alt_u32 altera_avalon_mailbox_get (alt_mailbox_dev* dev, int* err)
{
 88058b0:	defff904 	addi	sp,sp,-28
 88058b4:	dfc00615 	stw	ra,24(sp)
 88058b8:	df000515 	stw	fp,20(sp)
 88058bc:	dc000415 	stw	r16,16(sp)
 88058c0:	df000404 	addi	fp,sp,16
 88058c4:	e13ffe15 	stw	r4,-8(fp)
 88058c8:	e17fff15 	stw	r5,-4(fp)
  alt_u32 msg;
  alt_u32* temp;
  *err = 0;
 88058cc:	e0bfff17 	ldw	r2,-4(fp)
 88058d0:	10000015 	stw	zero,0(r2)
  *   Claim the Mutex on the read pointer 
  *
  *   The mutex function takes care of the thread sempahore if running
  *   in a multi-threaded environment
  */
  altera_avalon_mutex_lock( &dev->read_mutex, 1 );
 88058d4:	e0bffe17 	ldw	r2,-8(fp)
 88058d8:	11000b04 	addi	r4,r2,44
 88058dc:	01400044 	movi	r5,1
 88058e0:	8805adc0 	call	8805adc <altera_avalon_mutex_lock>

  temp = (alt_u32 *)IORD(dev->read_ptr, 0);
 88058e4:	e0bffe17 	ldw	r2,-8(fp)
 88058e8:	10800417 	ldw	r2,16(r2)
 88058ec:	10800037 	ldwio	r2,0(r2)
 88058f0:	e0bffc15 	stw	r2,-16(fp)

  if ( (alt_u32 *)(IORD(dev->write_ptr, 0)) == temp )
 88058f4:	e0bffe17 	ldw	r2,-8(fp)
 88058f8:	10800317 	ldw	r2,12(r2)
 88058fc:	10800037 	ldwio	r2,0(r2)
 8805900:	1007883a 	mov	r3,r2
 8805904:	e0bffc17 	ldw	r2,-16(fp)
 8805908:	1880091e 	bne	r3,r2,8805930 <altera_avalon_mailbox_get+0x80>
  {
    *err = -EWOULDBLOCK;
 880590c:	e0ffff17 	ldw	r3,-4(fp)
 8805910:	00bffd44 	movi	r2,-11
 8805914:	18800015 	stw	r2,0(r3)
    ALT_ERRNO = EWOULDBLOCK;
 8805918:	88056240 	call	8805624 <alt_get_errno>
 880591c:	1007883a 	mov	r3,r2
 8805920:	008002c4 	movi	r2,11
 8805924:	18800015 	stw	r2,0(r3)
    msg = 0;
 8805928:	e03ffd15 	stw	zero,-12(fp)
 880592c:	00000c06 	br	8805960 <altera_avalon_mailbox_get+0xb0>
  }
  else
  {
    msg = IORD(temp, 0);
 8805930:	e0bffc17 	ldw	r2,-16(fp)
 8805934:	10800037 	ldwio	r2,0(r2)
 8805938:	e0bffd15 	stw	r2,-12(fp)
    IOWR(dev->read_ptr, 0,
 880593c:	e0bffe17 	ldw	r2,-8(fp)
 8805940:	10800417 	ldw	r2,16(r2)
 8805944:	1021883a 	mov	r16,r2
 8805948:	e13ffe17 	ldw	r4,-8(fp)
 880594c:	e17ffc17 	ldw	r5,-16(fp)
 8805950:	88057b80 	call	88057b8 <alt_mailbox_increment_ptr>
 8805954:	1007883a 	mov	r3,r2
 8805958:	8005883a 	mov	r2,r16
 880595c:	10c00035 	stwio	r3,0(r2)
      (alt_u32)(alt_mailbox_increment_ptr(dev, temp)) );
  }

  altera_avalon_mutex_unlock( &dev->read_mutex );
 8805960:	e0bffe17 	ldw	r2,-8(fp)
 8805964:	11000b04 	addi	r4,r2,44
 8805968:	8805b5c0 	call	8805b5c <altera_avalon_mutex_unlock>

  return msg;
 880596c:	e0bffd17 	ldw	r2,-12(fp)

}
 8805970:	e037883a 	mov	sp,fp
 8805974:	dfc00217 	ldw	ra,8(sp)
 8805978:	df000117 	ldw	fp,4(sp)
 880597c:	dc000017 	ldw	r16,0(sp)
 8805980:	dec00304 	addi	sp,sp,12
 8805984:	f800283a 	ret

08805988 <alt_mutex_trylock>:
 *
 * returns 0 on success -1 otherwise
 *
 */
static int alt_mutex_trylock( alt_mutex_dev* dev, alt_u32 value )
{
 8805988:	defff904 	addi	sp,sp,-28
 880598c:	df000615 	stw	fp,24(sp)
 8805990:	df000604 	addi	fp,sp,24
 8805994:	e13ffe15 	stw	r4,-8(fp)
 8805998:	e17fff15 	stw	r5,-4(fp)
  alt_u32 id, data, check;
  int ret_code = -1;
 880599c:	00bfffc4 	movi	r2,-1
 88059a0:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_READ_CPUID(id);
 88059a4:	0005317a 	rdctl	r2,cpuid
 88059a8:	e0bffd15 	stw	r2,-12(fp)

  /* the data we want the mutex to hold */
  data = (id << ALTERA_AVALON_MUTEX_MUTEX_OWNER_OFST) | value;
 88059ac:	e0bffd17 	ldw	r2,-12(fp)
 88059b0:	1006943a 	slli	r3,r2,16
 88059b4:	e0bfff17 	ldw	r2,-4(fp)
 88059b8:	1884b03a 	or	r2,r3,r2
 88059bc:	e0bffc15 	stw	r2,-16(fp)

  /* attempt to write to the mutex */
  IOWR_ALTERA_AVALON_MUTEX_MUTEX(dev->mutex_base, data);
 88059c0:	e0bffe17 	ldw	r2,-8(fp)
 88059c4:	10800317 	ldw	r2,12(r2)
 88059c8:	e0fffc17 	ldw	r3,-16(fp)
 88059cc:	10c00035 	stwio	r3,0(r2)
  
  check = IORD_ALTERA_AVALON_MUTEX_MUTEX(dev->mutex_base);
 88059d0:	e0bffe17 	ldw	r2,-8(fp)
 88059d4:	10800317 	ldw	r2,12(r2)
 88059d8:	10800037 	ldwio	r2,0(r2)
 88059dc:	e0bffb15 	stw	r2,-20(fp)

  if ( check == data)
 88059e0:	e0fffb17 	ldw	r3,-20(fp)
 88059e4:	e0bffc17 	ldw	r2,-16(fp)
 88059e8:	1880011e 	bne	r3,r2,88059f0 <alt_mutex_trylock+0x68>
  {
    ret_code = 0;
 88059ec:	e03ffa15 	stw	zero,-24(fp)
  }

  return ret_code;
 88059f0:	e0bffa17 	ldw	r2,-24(fp)
}
 88059f4:	e037883a 	mov	sp,fp
 88059f8:	df000017 	ldw	fp,0(sp)
 88059fc:	dec00104 	addi	sp,sp,4
 8805a00:	f800283a 	ret

08805a04 <altera_avalon_mutex_open>:
 * Search the list of registered mutexes for one with the supplied name.
 *
 * The return value will be NULL on failure, and non-NULL otherwise.
 */
alt_mutex_dev* altera_avalon_mutex_open (const char* name)
{
 8805a04:	defffc04 	addi	sp,sp,-16
 8805a08:	dfc00315 	stw	ra,12(sp)
 8805a0c:	df000215 	stw	fp,8(sp)
 8805a10:	df000204 	addi	fp,sp,8
 8805a14:	e13fff15 	stw	r4,-4(fp)
  alt_mutex_dev* dev;

  dev = (alt_mutex_dev*) alt_find_dev (name, &alt_mutex_list);
 8805a18:	e13fff17 	ldw	r4,-4(fp)
 8805a1c:	d1600804 	addi	r5,gp,-32736
 8805a20:	88076f40 	call	88076f4 <alt_find_dev>
 8805a24:	e0bffe15 	stw	r2,-8(fp)

  if (NULL == dev)
 8805a28:	e0bffe17 	ldw	r2,-8(fp)
 8805a2c:	1004c03a 	cmpne	r2,r2,zero
 8805a30:	1000041e 	bne	r2,zero,8805a44 <altera_avalon_mutex_open+0x40>
  {
    ALT_ERRNO = ENODEV;
 8805a34:	8805a5c0 	call	8805a5c <alt_get_errno>
 8805a38:	1007883a 	mov	r3,r2
 8805a3c:	008004c4 	movi	r2,19
 8805a40:	18800015 	stw	r2,0(r3)
  }

  return dev;
 8805a44:	e0bffe17 	ldw	r2,-8(fp)
}
 8805a48:	e037883a 	mov	sp,fp
 8805a4c:	dfc00117 	ldw	ra,4(sp)
 8805a50:	df000017 	ldw	fp,0(sp)
 8805a54:	dec00204 	addi	sp,sp,8
 8805a58:	f800283a 	ret

08805a5c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 8805a5c:	defffd04 	addi	sp,sp,-12
 8805a60:	dfc00215 	stw	ra,8(sp)
 8805a64:	df000115 	stw	fp,4(sp)
 8805a68:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 8805a6c:	00822074 	movhi	r2,2177
 8805a70:	10a8b704 	addi	r2,r2,-23844
 8805a74:	10800017 	ldw	r2,0(r2)
 8805a78:	1005003a 	cmpeq	r2,r2,zero
 8805a7c:	1000061e 	bne	r2,zero,8805a98 <alt_get_errno+0x3c>
 8805a80:	00822074 	movhi	r2,2177
 8805a84:	10a8b704 	addi	r2,r2,-23844
 8805a88:	10800017 	ldw	r2,0(r2)
 8805a8c:	103ee83a 	callr	r2
 8805a90:	e0bfff15 	stw	r2,-4(fp)
 8805a94:	00000306 	br	8805aa4 <alt_get_errno+0x48>
 8805a98:	00822074 	movhi	r2,2177
 8805a9c:	10aeaf04 	addi	r2,r2,-17732
 8805aa0:	e0bfff15 	stw	r2,-4(fp)
 8805aa4:	e0bfff17 	ldw	r2,-4(fp)
}
 8805aa8:	e037883a 	mov	sp,fp
 8805aac:	dfc00117 	ldw	ra,4(sp)
 8805ab0:	df000017 	ldw	fp,0(sp)
 8805ab4:	dec00204 	addi	sp,sp,8
 8805ab8:	f800283a 	ret

08805abc <altera_avalon_mutex_close>:
 * altera_avalon_mutex_close - Does nothing at the moment, but included for 
 * completeness
 *
 */
void altera_avalon_mutex_close (alt_mutex_dev* dev)
{
 8805abc:	defffe04 	addi	sp,sp,-8
 8805ac0:	df000115 	stw	fp,4(sp)
 8805ac4:	df000104 	addi	fp,sp,4
 8805ac8:	e13fff15 	stw	r4,-4(fp)
  return;
}
 8805acc:	e037883a 	mov	sp,fp
 8805ad0:	df000017 	ldw	fp,0(sp)
 8805ad4:	dec00104 	addi	sp,sp,4
 8805ad8:	f800283a 	ret

08805adc <altera_avalon_mutex_lock>:
/*
 * altera_avalon_mutex_lock - Lock the hardware mutex
 *
 */
void altera_avalon_mutex_lock( alt_mutex_dev* dev, alt_u32 value )
{
 8805adc:	defffc04 	addi	sp,sp,-16
 8805ae0:	dfc00315 	stw	ra,12(sp)
 8805ae4:	df000215 	stw	fp,8(sp)
 8805ae8:	df000204 	addi	fp,sp,8
 8805aec:	e13ffe15 	stw	r4,-8(fp)
 8805af0:	e17fff15 	stw	r5,-4(fp)
   * semaphore. This ensures that reading from the device is thread-safe.
   */

  ALT_SEM_PEND (dev->lock, 0);

  while ( alt_mutex_trylock( dev, value ) != 0);
 8805af4:	e13ffe17 	ldw	r4,-8(fp)
 8805af8:	e17fff17 	ldw	r5,-4(fp)
 8805afc:	88059880 	call	8805988 <alt_mutex_trylock>
 8805b00:	1004c03a 	cmpne	r2,r2,zero
 8805b04:	103ffb1e 	bne	r2,zero,8805af4 <altera_avalon_mutex_lock+0x18>
}
 8805b08:	e037883a 	mov	sp,fp
 8805b0c:	dfc00117 	ldw	ra,4(sp)
 8805b10:	df000017 	ldw	fp,0(sp)
 8805b14:	dec00204 	addi	sp,sp,8
 8805b18:	f800283a 	ret

08805b1c <altera_avalon_mutex_trylock>:
 *
 * returns 0 on success -1 otherwise
 *
 */
int altera_avalon_mutex_trylock( alt_mutex_dev* dev, alt_u32 value )
{
 8805b1c:	defffb04 	addi	sp,sp,-20
 8805b20:	dfc00415 	stw	ra,16(sp)
 8805b24:	df000315 	stw	fp,12(sp)
 8805b28:	df000304 	addi	fp,sp,12
 8805b2c:	e13ffe15 	stw	r4,-8(fp)
 8805b30:	e17fff15 	stw	r5,-4(fp)
  int ret_code;

  ALT_SEM_PEND (dev->lock, 0);

  ret_code = alt_mutex_trylock( dev, value);
 8805b34:	e13ffe17 	ldw	r4,-8(fp)
 8805b38:	e17fff17 	ldw	r5,-4(fp)
 8805b3c:	88059880 	call	8805988 <alt_mutex_trylock>
 8805b40:	e0bffd15 	stw	r2,-12(fp)
  if (ret_code)
  {
    ALT_SEM_POST (dev->lock);
  }

  return ret_code;
 8805b44:	e0bffd17 	ldw	r2,-12(fp)
}
 8805b48:	e037883a 	mov	sp,fp
 8805b4c:	dfc00117 	ldw	ra,4(sp)
 8805b50:	df000017 	ldw	fp,0(sp)
 8805b54:	dec00204 	addi	sp,sp,8
 8805b58:	f800283a 	ret

08805b5c <altera_avalon_mutex_unlock>:
 * This function does not check that you own the Mutex if you try to release
 * a Mutex you do not own the behaviour is undefined
 *
 */
void altera_avalon_mutex_unlock( alt_mutex_dev* dev )
{
 8805b5c:	defffd04 	addi	sp,sp,-12
 8805b60:	df000215 	stw	fp,8(sp)
 8805b64:	df000204 	addi	fp,sp,8
 8805b68:	e13fff15 	stw	r4,-4(fp)
  alt_u32 id;
  NIOS2_READ_CPUID(id);
 8805b6c:	0005317a 	rdctl	r2,cpuid
 8805b70:	e0bffe15 	stw	r2,-8(fp)

  /*
  * This Mutex has been claimed and released since Reset so clear the Reset bit
  * This MUST happen before we release the MUTEX
  */
  IOWR_ALTERA_AVALON_MUTEX_RESET(dev->mutex_base, 
 8805b74:	e0bfff17 	ldw	r2,-4(fp)
 8805b78:	10800317 	ldw	r2,12(r2)
 8805b7c:	10800104 	addi	r2,r2,4
 8805b80:	1007883a 	mov	r3,r2
 8805b84:	00800044 	movi	r2,1
 8805b88:	18800035 	stwio	r2,0(r3)
                                  ALTERA_AVALON_MUTEX_RESET_RESET_MSK);
  IOWR_ALTERA_AVALON_MUTEX_MUTEX(dev->mutex_base, 
 8805b8c:	e0bfff17 	ldw	r2,-4(fp)
 8805b90:	11000317 	ldw	r4,12(r2)
 8805b94:	e0bffe17 	ldw	r2,-8(fp)
 8805b98:	1004943a 	slli	r2,r2,16
 8805b9c:	1007883a 	mov	r3,r2
 8805ba0:	2005883a 	mov	r2,r4
 8805ba4:	10c00035 	stwio	r3,0(r2)

  /*
  * Now that access to the hardware Mutex is complete, release the thread lock
  */
  ALT_SEM_POST (dev->lock);
}
 8805ba8:	e037883a 	mov	sp,fp
 8805bac:	df000017 	ldw	fp,0(sp)
 8805bb0:	dec00104 	addi	sp,sp,4
 8805bb4:	f800283a 	ret

08805bb8 <altera_avalon_mutex_is_mine>:
 * altera_avalon_mutex_is_mine - Do I own the Mutex?
 *
 *  returns non zero if the mutex is owned by this CPU
 */
int altera_avalon_mutex_is_mine( alt_mutex_dev* dev )
{
 8805bb8:	defff904 	addi	sp,sp,-28
 8805bbc:	df000615 	stw	fp,24(sp)
 8805bc0:	df000604 	addi	fp,sp,24
 8805bc4:	e13fff15 	stw	r4,-4(fp)
  alt_u32 id, data, owner, value;
  int ret_code = 0;
 8805bc8:	e03ffa15 	stw	zero,-24(fp)

  NIOS2_READ_CPUID(id);
 8805bcc:	0005317a 	rdctl	r2,cpuid
 8805bd0:	e0bffe15 	stw	r2,-8(fp)

  /* retrieve the contents of the mutex */
  data = IORD_ALTERA_AVALON_MUTEX_MUTEX(dev->mutex_base);
 8805bd4:	e0bfff17 	ldw	r2,-4(fp)
 8805bd8:	10800317 	ldw	r2,12(r2)
 8805bdc:	10800037 	ldwio	r2,0(r2)
 8805be0:	e0bffd15 	stw	r2,-12(fp)
  owner = (data & ALTERA_AVALON_MUTEX_MUTEX_OWNER_MSK) >> 
 8805be4:	e0bffd17 	ldw	r2,-12(fp)
 8805be8:	10bfffec 	andhi	r2,r2,65535
 8805bec:	1004d43a 	srli	r2,r2,16
 8805bf0:	e0bffc15 	stw	r2,-16(fp)
              ALTERA_AVALON_MUTEX_MUTEX_OWNER_OFST;

  if (owner == id) 
 8805bf4:	e0fffc17 	ldw	r3,-16(fp)
 8805bf8:	e0bffe17 	ldw	r2,-8(fp)
 8805bfc:	1880081e 	bne	r3,r2,8805c20 <altera_avalon_mutex_is_mine+0x68>
  {
    value = (data & ALTERA_AVALON_MUTEX_MUTEX_VALUE_MSK) >> 
 8805c00:	e0bffd17 	ldw	r2,-12(fp)
 8805c04:	10bfffcc 	andi	r2,r2,65535
 8805c08:	e0bffb15 	stw	r2,-20(fp)
                  ALTERA_AVALON_MUTEX_MUTEX_VALUE_OFST;
    if (value != 0)
 8805c0c:	e0bffb17 	ldw	r2,-20(fp)
 8805c10:	1005003a 	cmpeq	r2,r2,zero
 8805c14:	1000021e 	bne	r2,zero,8805c20 <altera_avalon_mutex_is_mine+0x68>
    {
      ret_code = 1;
 8805c18:	00800044 	movi	r2,1
 8805c1c:	e0bffa15 	stw	r2,-24(fp)
    }
  }

  return ret_code;
 8805c20:	e0bffa17 	ldw	r2,-24(fp)
}
 8805c24:	e037883a 	mov	sp,fp
 8805c28:	df000017 	ldw	fp,0(sp)
 8805c2c:	dec00104 	addi	sp,sp,4
 8805c30:	f800283a 	ret

08805c34 <altera_avalon_mutex_first_lock>:
 *
 * Has this Mutex been released since reset if not return 1
 * otherwise return 0
 */
int altera_avalon_mutex_first_lock( alt_mutex_dev* dev )
{
 8805c34:	defffc04 	addi	sp,sp,-16
 8805c38:	df000315 	stw	fp,12(sp)
 8805c3c:	df000304 	addi	fp,sp,12
 8805c40:	e13fff15 	stw	r4,-4(fp)
  alt_u32 data;
  int ret_code = 0;
 8805c44:	e03ffd15 	stw	zero,-12(fp)

  data = IORD_ALTERA_AVALON_MUTEX_RESET(dev->mutex_base);
 8805c48:	e0bfff17 	ldw	r2,-4(fp)
 8805c4c:	10800317 	ldw	r2,12(r2)
 8805c50:	10800104 	addi	r2,r2,4
 8805c54:	10800037 	ldwio	r2,0(r2)
 8805c58:	e0bffe15 	stw	r2,-8(fp)

  if (data & ALTERA_AVALON_MUTEX_RESET_RESET_MSK) 
 8805c5c:	e0bffe17 	ldw	r2,-8(fp)
 8805c60:	1080004c 	andi	r2,r2,1
 8805c64:	10803fcc 	andi	r2,r2,255
 8805c68:	1005003a 	cmpeq	r2,r2,zero
 8805c6c:	1000021e 	bne	r2,zero,8805c78 <altera_avalon_mutex_first_lock+0x44>
  {
    ret_code = 1;
 8805c70:	00800044 	movi	r2,1
 8805c74:	e0bffd15 	stw	r2,-12(fp)
  }

  return ret_code;
 8805c78:	e0bffd17 	ldw	r2,-12(fp)
}
 8805c7c:	e037883a 	mov	sp,fp
 8805c80:	df000017 	ldw	fp,0(sp)
 8805c84:	dec00104 	addi	sp,sp,4
 8805c88:	f800283a 	ret

08805c8c <alt_up_pixel_buffer_dma_open_dev>:

#include "altera_up_avalon_video_pixel_buffer_dma.h"

#define ABS(x)	((x >= 0) ? (x) : (-(x)))

alt_up_pixel_buffer_dma_dev* alt_up_pixel_buffer_dma_open_dev(const char* name) {
 8805c8c:	defffc04 	addi	sp,sp,-16
 8805c90:	dfc00315 	stw	ra,12(sp)
 8805c94:	df000215 	stw	fp,8(sp)
 8805c98:	df000204 	addi	fp,sp,8
 8805c9c:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_pixel_buffer_dma_dev *dev = (alt_up_pixel_buffer_dma_dev*)alt_find_dev(name, &alt_dev_list);
 8805ca0:	e13fff17 	ldw	r4,-4(fp)
 8805ca4:	01422074 	movhi	r5,2177
 8805ca8:	2968b404 	addi	r5,r5,-23856
 8805cac:	88076f40 	call	88076f4 <alt_find_dev>
 8805cb0:	e0bffe15 	stw	r2,-8(fp)

  return dev;
 8805cb4:	e0bffe17 	ldw	r2,-8(fp)
}
 8805cb8:	e037883a 	mov	sp,fp
 8805cbc:	dfc00117 	ldw	ra,4(sp)
 8805cc0:	df000017 	ldw	fp,0(sp)
 8805cc4:	dec00204 	addi	sp,sp,8
 8805cc8:	f800283a 	ret

08805ccc <alt_up_pixel_buffer_dma_draw>:

int alt_up_pixel_buffer_dma_draw(alt_up_pixel_buffer_dma_dev *pixel_buffer, unsigned int color, unsigned int x, unsigned int y)
/* This function draws a pixel to the back buffer.
 */
{
 8805ccc:	defff904 	addi	sp,sp,-28
 8805cd0:	df000615 	stw	fp,24(sp)
 8805cd4:	df000604 	addi	fp,sp,24
 8805cd8:	e13ffb15 	stw	r4,-20(fp)
 8805cdc:	e17ffc15 	stw	r5,-16(fp)
 8805ce0:	e1bffd15 	stw	r6,-12(fp)
 8805ce4:	e1fffe15 	stw	r7,-8(fp)
	// boundary check
	if (x >= pixel_buffer->x_resolution || y >= pixel_buffer->y_resolution )
 8805ce8:	e0bffb17 	ldw	r2,-20(fp)
 8805cec:	10c00f17 	ldw	r3,60(r2)
 8805cf0:	e0bffd17 	ldw	r2,-12(fp)
 8805cf4:	10c0042e 	bgeu	r2,r3,8805d08 <alt_up_pixel_buffer_dma_draw+0x3c>
 8805cf8:	e0bffb17 	ldw	r2,-20(fp)
 8805cfc:	10c01017 	ldw	r3,64(r2)
 8805d00:	e0bffe17 	ldw	r2,-8(fp)
 8805d04:	10c00336 	bltu	r2,r3,8805d14 <alt_up_pixel_buffer_dma_draw+0x48>
		return -1;
 8805d08:	00bfffc4 	movi	r2,-1
 8805d0c:	e0bfff15 	stw	r2,-4(fp)
 8805d10:	00005106 	br	8805e58 <alt_up_pixel_buffer_dma_draw+0x18c>

	unsigned int addr = 0;
 8805d14:	e03ffa15 	stw	zero,-24(fp)
	/* Check the mode VGA Pixel Buffer is using. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
 8805d18:	e0bffb17 	ldw	r2,-20(fp)
 8805d1c:	10800d17 	ldw	r2,52(r2)
 8805d20:	1004c03a 	cmpne	r2,r2,zero
 8805d24:	1000151e 	bne	r2,zero,8805d7c <alt_up_pixel_buffer_dma_draw+0xb0>
		/* For X-Y addressing mode, the address format is | unused | Y | X |. So shift bits for coordinates X and Y into their respective locations. */
		addr |= ((x & pixel_buffer->x_coord_mask) << pixel_buffer->x_coord_offset);
 8805d28:	e0bffb17 	ldw	r2,-20(fp)
 8805d2c:	10c01217 	ldw	r3,72(r2)
 8805d30:	e0bffd17 	ldw	r2,-12(fp)
 8805d34:	1886703a 	and	r3,r3,r2
 8805d38:	e0bffb17 	ldw	r2,-20(fp)
 8805d3c:	10801117 	ldw	r2,68(r2)
 8805d40:	1886983a 	sll	r3,r3,r2
 8805d44:	e0bffa17 	ldw	r2,-24(fp)
 8805d48:	10c4b03a 	or	r2,r2,r3
 8805d4c:	e0bffa15 	stw	r2,-24(fp)
		addr |= ((y & pixel_buffer->y_coord_mask) << pixel_buffer->y_coord_offset);
 8805d50:	e0bffb17 	ldw	r2,-20(fp)
 8805d54:	10c01417 	ldw	r3,80(r2)
 8805d58:	e0bffe17 	ldw	r2,-8(fp)
 8805d5c:	1886703a 	and	r3,r3,r2
 8805d60:	e0bffb17 	ldw	r2,-20(fp)
 8805d64:	10801317 	ldw	r2,76(r2)
 8805d68:	1886983a 	sll	r3,r3,r2
 8805d6c:	e0bffa17 	ldw	r2,-24(fp)
 8805d70:	10c4b03a 	or	r2,r2,r3
 8805d74:	e0bffa15 	stw	r2,-24(fp)
 8805d78:	00001706 	br	8805dd8 <alt_up_pixel_buffer_dma_draw+0x10c>
	} else {
		/* In a consecutive addressing mode, the pixels are stored in consecutive memory locations. So the address of a pixel at (x,y) can be computed as
		 * (y*x_resolution + x).*/
		addr += ((x & pixel_buffer->x_coord_mask) << pixel_buffer->x_coord_offset);
 8805d7c:	e0bffb17 	ldw	r2,-20(fp)
 8805d80:	10c01217 	ldw	r3,72(r2)
 8805d84:	e0bffd17 	ldw	r2,-12(fp)
 8805d88:	1886703a 	and	r3,r3,r2
 8805d8c:	e0bffb17 	ldw	r2,-20(fp)
 8805d90:	10801117 	ldw	r2,68(r2)
 8805d94:	1886983a 	sll	r3,r3,r2
 8805d98:	e0bffa17 	ldw	r2,-24(fp)
 8805d9c:	10c5883a 	add	r2,r2,r3
 8805da0:	e0bffa15 	stw	r2,-24(fp)
		addr += (((y & pixel_buffer->y_coord_mask) * pixel_buffer->x_resolution) << pixel_buffer->x_coord_offset);
 8805da4:	e0bffb17 	ldw	r2,-20(fp)
 8805da8:	10c01417 	ldw	r3,80(r2)
 8805dac:	e0bffe17 	ldw	r2,-8(fp)
 8805db0:	1886703a 	and	r3,r3,r2
 8805db4:	e0bffb17 	ldw	r2,-20(fp)
 8805db8:	10800f17 	ldw	r2,60(r2)
 8805dbc:	1887383a 	mul	r3,r3,r2
 8805dc0:	e0bffb17 	ldw	r2,-20(fp)
 8805dc4:	10801117 	ldw	r2,68(r2)
 8805dc8:	1886983a 	sll	r3,r3,r2
 8805dcc:	e0bffa17 	ldw	r2,-24(fp)
 8805dd0:	10c5883a 	add	r2,r2,r3
 8805dd4:	e0bffa15 	stw	r2,-24(fp)
	}
	/* Now, depending on the color depth, write the pixel color to the specified memory location. */
	if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
 8805dd8:	e0bffb17 	ldw	r2,-20(fp)
 8805ddc:	10800e17 	ldw	r2,56(r2)
 8805de0:	10800058 	cmpnei	r2,r2,1
 8805de4:	1000081e 	bne	r2,zero,8805e08 <alt_up_pixel_buffer_dma_draw+0x13c>
		IOWR_8DIRECT(pixel_buffer->back_buffer_start_address, addr, color);
 8805de8:	e0bffb17 	ldw	r2,-20(fp)
 8805dec:	10800c17 	ldw	r2,48(r2)
 8805df0:	1007883a 	mov	r3,r2
 8805df4:	e0bffa17 	ldw	r2,-24(fp)
 8805df8:	1885883a 	add	r2,r3,r2
 8805dfc:	e0fffc17 	ldw	r3,-16(fp)
 8805e00:	10c00025 	stbio	r3,0(r2)
 8805e04:	00001306 	br	8805e54 <alt_up_pixel_buffer_dma_draw+0x188>
	} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
 8805e08:	e0bffb17 	ldw	r2,-20(fp)
 8805e0c:	10800e17 	ldw	r2,56(r2)
 8805e10:	10800098 	cmpnei	r2,r2,2
 8805e14:	1000081e 	bne	r2,zero,8805e38 <alt_up_pixel_buffer_dma_draw+0x16c>
		IOWR_16DIRECT(pixel_buffer->back_buffer_start_address, addr, color);
 8805e18:	e0bffb17 	ldw	r2,-20(fp)
 8805e1c:	10800c17 	ldw	r2,48(r2)
 8805e20:	1007883a 	mov	r3,r2
 8805e24:	e0bffa17 	ldw	r2,-24(fp)
 8805e28:	1885883a 	add	r2,r3,r2
 8805e2c:	e0fffc17 	ldw	r3,-16(fp)
 8805e30:	10c0002d 	sthio	r3,0(r2)
 8805e34:	00000706 	br	8805e54 <alt_up_pixel_buffer_dma_draw+0x188>
	} else {
		IOWR_32DIRECT(pixel_buffer->back_buffer_start_address, addr, color);
 8805e38:	e0bffb17 	ldw	r2,-20(fp)
 8805e3c:	10800c17 	ldw	r2,48(r2)
 8805e40:	1007883a 	mov	r3,r2
 8805e44:	e0bffa17 	ldw	r2,-24(fp)
 8805e48:	1885883a 	add	r2,r3,r2
 8805e4c:	e0fffc17 	ldw	r3,-16(fp)
 8805e50:	10c00035 	stwio	r3,0(r2)
	}

	return 0;
 8805e54:	e03fff15 	stw	zero,-4(fp)
 8805e58:	e0bfff17 	ldw	r2,-4(fp)
}
 8805e5c:	e037883a 	mov	sp,fp
 8805e60:	df000017 	ldw	fp,0(sp)
 8805e64:	dec00104 	addi	sp,sp,4
 8805e68:	f800283a 	ret

08805e6c <alt_up_pixel_buffer_dma_change_back_buffer_address>:

int alt_up_pixel_buffer_dma_change_back_buffer_address(alt_up_pixel_buffer_dma_dev *pixel_buffer, unsigned int new_address)
/* This function changes the memory address for the back buffer. */
{
 8805e6c:	defffd04 	addi	sp,sp,-12
 8805e70:	df000215 	stw	fp,8(sp)
 8805e74:	df000204 	addi	fp,sp,8
 8805e78:	e13ffe15 	stw	r4,-8(fp)
 8805e7c:	e17fff15 	stw	r5,-4(fp)
	IOWR_32DIRECT(pixel_buffer->base, 4, new_address);
 8805e80:	e0bffe17 	ldw	r2,-8(fp)
 8805e84:	10800a17 	ldw	r2,40(r2)
 8805e88:	10800104 	addi	r2,r2,4
 8805e8c:	e0ffff17 	ldw	r3,-4(fp)
 8805e90:	10c00035 	stwio	r3,0(r2)
	pixel_buffer->back_buffer_start_address = IORD_32DIRECT(pixel_buffer->base, 4);
 8805e94:	e0bffe17 	ldw	r2,-8(fp)
 8805e98:	10800a17 	ldw	r2,40(r2)
 8805e9c:	10800104 	addi	r2,r2,4
 8805ea0:	10800037 	ldwio	r2,0(r2)
 8805ea4:	1007883a 	mov	r3,r2
 8805ea8:	e0bffe17 	ldw	r2,-8(fp)
 8805eac:	10c00c15 	stw	r3,48(r2)
	return 0;
 8805eb0:	0005883a 	mov	r2,zero
}
 8805eb4:	e037883a 	mov	sp,fp
 8805eb8:	df000017 	ldw	fp,0(sp)
 8805ebc:	dec00104 	addi	sp,sp,4
 8805ec0:	f800283a 	ret

08805ec4 <alt_up_pixel_buffer_dma_swap_buffers>:

int alt_up_pixel_buffer_dma_swap_buffers(alt_up_pixel_buffer_dma_dev *pixel_buffer)
/* This function swaps the front and back buffers. At the next refresh cycle the back buffer will be drawn on the screen
 * and will become the front buffer. */
{
 8805ec4:	defffe04 	addi	sp,sp,-8
 8805ec8:	df000115 	stw	fp,4(sp)
 8805ecc:	df000104 	addi	fp,sp,4
 8805ed0:	e13fff15 	stw	r4,-4(fp)
	register unsigned int temp = pixel_buffer->back_buffer_start_address;
 8805ed4:	e0bfff17 	ldw	r2,-4(fp)
 8805ed8:	11000c17 	ldw	r4,48(r2)
	IOWR_32DIRECT(pixel_buffer->base, 0, 1);
 8805edc:	e0bfff17 	ldw	r2,-4(fp)
 8805ee0:	10800a17 	ldw	r2,40(r2)
 8805ee4:	1007883a 	mov	r3,r2
 8805ee8:	00800044 	movi	r2,1
 8805eec:	18800035 	stwio	r2,0(r3)
	pixel_buffer->back_buffer_start_address = pixel_buffer->buffer_start_address;
 8805ef0:	e0bfff17 	ldw	r2,-4(fp)
 8805ef4:	10c00b17 	ldw	r3,44(r2)
 8805ef8:	e0bfff17 	ldw	r2,-4(fp)
 8805efc:	10c00c15 	stw	r3,48(r2)
	pixel_buffer->buffer_start_address = temp;
 8805f00:	e0bfff17 	ldw	r2,-4(fp)
 8805f04:	11000b15 	stw	r4,44(r2)
	return 0;
 8805f08:	0005883a 	mov	r2,zero
}
 8805f0c:	e037883a 	mov	sp,fp
 8805f10:	df000017 	ldw	fp,0(sp)
 8805f14:	dec00104 	addi	sp,sp,4
 8805f18:	f800283a 	ret

08805f1c <alt_up_pixel_buffer_dma_check_swap_buffers_status>:
int alt_up_pixel_buffer_dma_check_swap_buffers_status(alt_up_pixel_buffer_dma_dev *pixel_buffer)
/* This function checks if the buffer swap has occured. Since the buffer swap only happens after an entire screen is drawn,
 * it is important to wait for this function to return 0 before proceeding to draw on either buffer. When both front and the back buffers
 * have the same address calling the alt_up_pixel_buffer_dma_swap_buffers(...) function and then waiting for this function to return 0, causes your program to
 * wait for the screen to refresh. */
{
 8805f1c:	defffe04 	addi	sp,sp,-8
 8805f20:	df000115 	stw	fp,4(sp)
 8805f24:	df000104 	addi	fp,sp,4
 8805f28:	e13fff15 	stw	r4,-4(fp)
	return (IORD_32DIRECT(pixel_buffer->base, 12) & 0x1);
 8805f2c:	e0bfff17 	ldw	r2,-4(fp)
 8805f30:	10800a17 	ldw	r2,40(r2)
 8805f34:	10800304 	addi	r2,r2,12
 8805f38:	10800037 	ldwio	r2,0(r2)
 8805f3c:	1080004c 	andi	r2,r2,1
}
 8805f40:	e037883a 	mov	sp,fp
 8805f44:	df000017 	ldw	fp,0(sp)
 8805f48:	dec00104 	addi	sp,sp,4
 8805f4c:	f800283a 	ret

08805f50 <alt_up_pixel_buffer_dma_clear_screen>:

void alt_up_pixel_buffer_dma_clear_screen(alt_up_pixel_buffer_dma_dev *pixel_buffer, int backbuffer)
/* This function clears the screen by setting each pixel to a black color. */
{
 8805f50:	defff604 	addi	sp,sp,-40
 8805f54:	df000915 	stw	fp,36(sp)
 8805f58:	df000904 	addi	fp,sp,36
 8805f5c:	e13ff715 	stw	r4,-36(fp)
 8805f60:	e17ff815 	stw	r5,-32(fp)
	register unsigned int addr;
	register unsigned int limit_x, limit_y;
	
	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
 8805f64:	e0bff817 	ldw	r2,-32(fp)
 8805f68:	10800058 	cmpnei	r2,r2,1
 8805f6c:	1000041e 	bne	r2,zero,8805f80 <alt_up_pixel_buffer_dma_clear_screen+0x30>
		addr = pixel_buffer->back_buffer_start_address;
 8805f70:	e0bff717 	ldw	r2,-36(fp)
 8805f74:	10800c17 	ldw	r2,48(r2)
 8805f78:	e0bfff15 	stw	r2,-4(fp)
 8805f7c:	00000306 	br	8805f8c <alt_up_pixel_buffer_dma_clear_screen+0x3c>
	else
		addr = pixel_buffer->buffer_start_address;
 8805f80:	e0bff717 	ldw	r2,-36(fp)
 8805f84:	10800b17 	ldw	r2,44(r2)
 8805f88:	e0bfff15 	stw	r2,-4(fp)
	limit_x = pixel_buffer->x_resolution;
 8805f8c:	e0bff717 	ldw	r2,-36(fp)
 8805f90:	10800f17 	ldw	r2,60(r2)
 8805f94:	e0bffe15 	stw	r2,-8(fp)
	/* In 16 and 32-bit color modes we use twice or four times more memory for the display buffer.*/
	if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
 8805f98:	e0bff717 	ldw	r2,-36(fp)
 8805f9c:	10800e17 	ldw	r2,56(r2)
 8805fa0:	10800098 	cmpnei	r2,r2,2
 8805fa4:	1000051e 	bne	r2,zero,8805fbc <alt_up_pixel_buffer_dma_clear_screen+0x6c>
		limit_x = limit_x << 1;
 8805fa8:	e0fffe17 	ldw	r3,-8(fp)
 8805fac:	e0fffe17 	ldw	r3,-8(fp)
 8805fb0:	18c5883a 	add	r2,r3,r3
 8805fb4:	e0bffe15 	stw	r2,-8(fp)
 8805fb8:	00000506 	br	8805fd0 <alt_up_pixel_buffer_dma_clear_screen+0x80>
	} else {
		limit_x = limit_x << 2;
 8805fbc:	e13ffe17 	ldw	r4,-8(fp)
 8805fc0:	e13ffe17 	ldw	r4,-8(fp)
 8805fc4:	2105883a 	add	r2,r4,r4
 8805fc8:	1085883a 	add	r2,r2,r2
 8805fcc:	e0bffe15 	stw	r2,-8(fp)
	}	
	limit_y = pixel_buffer->y_resolution;
 8805fd0:	e0bff717 	ldw	r2,-36(fp)
 8805fd4:	10801017 	ldw	r2,64(r2)
 8805fd8:	e0bffd15 	stw	r2,-12(fp)

	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
 8805fdc:	e0bff717 	ldw	r2,-36(fp)
 8805fe0:	10800d17 	ldw	r2,52(r2)
 8805fe4:	1004c03a 	cmpne	r2,r2,zero
 8805fe8:	10001e1e 	bne	r2,zero,8806064 <alt_up_pixel_buffer_dma_clear_screen+0x114>
		/* Clear the screen when the VGA is set up in an XY addressing mode. */
		register unsigned int x,y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
 8805fec:	e0bff717 	ldw	r2,-36(fp)
 8805ff0:	10801317 	ldw	r2,76(r2)
 8805ff4:	e0bffa15 	stw	r2,-24(fp)

		for (y = 0; y < limit_y; y++)
 8805ff8:	e03ffb15 	stw	zero,-20(fp)
 8805ffc:	00001506 	br	8806054 <alt_up_pixel_buffer_dma_clear_screen+0x104>
		{
			for (x = 0; x < limit_x; x = x + 4)
 8806000:	e03ffc15 	stw	zero,-16(fp)
 8806004:	00000706 	br	8806024 <alt_up_pixel_buffer_dma_clear_screen+0xd4>
			{
				IOWR_32DIRECT(addr, x, 0);
 8806008:	e0ffff17 	ldw	r3,-4(fp)
 880600c:	e0bffc17 	ldw	r2,-16(fp)
 8806010:	1885883a 	add	r2,r3,r2
 8806014:	10000035 	stwio	zero,0(r2)
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;

		for (y = 0; y < limit_y; y++)
		{
			for (x = 0; x < limit_x; x = x + 4)
 8806018:	e0bffc17 	ldw	r2,-16(fp)
 880601c:	10800104 	addi	r2,r2,4
 8806020:	e0bffc15 	stw	r2,-16(fp)
 8806024:	e0fffc17 	ldw	r3,-16(fp)
 8806028:	e13ffe17 	ldw	r4,-8(fp)
 880602c:	193ff636 	bltu	r3,r4,8806008 <alt_up_pixel_buffer_dma_clear_screen+0xb8>
			{
				IOWR_32DIRECT(addr, x, 0);
			}
			addr = addr + (1 << offset_y);
 8806030:	e0fffa17 	ldw	r3,-24(fp)
 8806034:	00800044 	movi	r2,1
 8806038:	10c4983a 	sll	r2,r2,r3
 880603c:	e0ffff17 	ldw	r3,-4(fp)
 8806040:	1887883a 	add	r3,r3,r2
 8806044:	e0ffff15 	stw	r3,-4(fp)
		/* Clear the screen when the VGA is set up in an XY addressing mode. */
		register unsigned int x,y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;

		for (y = 0; y < limit_y; y++)
 8806048:	e13ffb17 	ldw	r4,-20(fp)
 880604c:	21000044 	addi	r4,r4,1
 8806050:	e13ffb15 	stw	r4,-20(fp)
 8806054:	e0bffb17 	ldw	r2,-20(fp)
 8806058:	e0fffd17 	ldw	r3,-12(fp)
 880605c:	10ffe836 	bltu	r2,r3,8806000 <alt_up_pixel_buffer_dma_clear_screen+0xb0>
 8806060:	00001006 	br	88060a4 <alt_up_pixel_buffer_dma_clear_screen+0x154>
			addr = addr + (1 << offset_y);
		}
	} else {
		/* Clear the screen when the VGA is set up in a linear addressing mode. */
		register int x;
		limit_y = limit_x*limit_y;	
 8806064:	e13ffd17 	ldw	r4,-12(fp)
 8806068:	e0bffe17 	ldw	r2,-8(fp)
 880606c:	2089383a 	mul	r4,r4,r2
 8806070:	e13ffd15 	stw	r4,-12(fp)

		for (x = 0; x < limit_y; x = x + 4)
 8806074:	e03ff915 	stw	zero,-28(fp)
 8806078:	00000706 	br	8806098 <alt_up_pixel_buffer_dma_clear_screen+0x148>
		{
			IOWR_32DIRECT(addr, x, 0);
 880607c:	e0ffff17 	ldw	r3,-4(fp)
 8806080:	e0bff917 	ldw	r2,-28(fp)
 8806084:	1885883a 	add	r2,r3,r2
 8806088:	10000035 	stwio	zero,0(r2)
	} else {
		/* Clear the screen when the VGA is set up in a linear addressing mode. */
		register int x;
		limit_y = limit_x*limit_y;	

		for (x = 0; x < limit_y; x = x + 4)
 880608c:	e0fff917 	ldw	r3,-28(fp)
 8806090:	18c00104 	addi	r3,r3,4
 8806094:	e0fff915 	stw	r3,-28(fp)
 8806098:	e0bff917 	ldw	r2,-28(fp)
 880609c:	e13ffd17 	ldw	r4,-12(fp)
 88060a0:	113ff636 	bltu	r2,r4,880607c <alt_up_pixel_buffer_dma_clear_screen+0x12c>
		{
			IOWR_32DIRECT(addr, x, 0);
		}
	}
}
 88060a4:	e037883a 	mov	sp,fp
 88060a8:	df000017 	ldw	fp,0(sp)
 88060ac:	dec00104 	addi	sp,sp,4
 88060b0:	f800283a 	ret

088060b4 <alt_up_pixel_buffer_dma_draw_box>:

void alt_up_pixel_buffer_dma_draw_box(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int y0, int x1, int y1, int color, int backbuffer)
/* This function draws a filled box. */
{
 88060b4:	deffed04 	addi	sp,sp,-76
 88060b8:	df001215 	stw	fp,72(sp)
 88060bc:	df001204 	addi	fp,sp,72
 88060c0:	e13fee15 	stw	r4,-72(fp)
 88060c4:	e17fef15 	stw	r5,-68(fp)
 88060c8:	e1bff015 	stw	r6,-64(fp)
 88060cc:	e1fff115 	stw	r7,-60(fp)
	register unsigned int addr;
	register unsigned int limit_x = pixel_buffer->x_resolution;
 88060d0:	e0bfee17 	ldw	r2,-72(fp)
 88060d4:	10800f17 	ldw	r2,60(r2)
 88060d8:	e0bffe15 	stw	r2,-8(fp)
	register unsigned int limit_y = pixel_buffer->y_resolution;
 88060dc:	e0bfee17 	ldw	r2,-72(fp)
 88060e0:	10801017 	ldw	r2,64(r2)
 88060e4:	e0bffd15 	stw	r2,-12(fp)
	register unsigned int temp;
	register unsigned int l_x = x0;
 88060e8:	e0bfef17 	ldw	r2,-68(fp)
 88060ec:	e0bffb15 	stw	r2,-20(fp)
	register unsigned int r_x = x1;
 88060f0:	e0fff117 	ldw	r3,-60(fp)
 88060f4:	e0fffa15 	stw	r3,-24(fp)
	register unsigned int t_y = y0;
 88060f8:	e13ff017 	ldw	r4,-64(fp)
 88060fc:	e13ff915 	stw	r4,-28(fp)
	register unsigned int b_y = y1;
 8806100:	e0800117 	ldw	r2,4(fp)
 8806104:	e0bff815 	stw	r2,-32(fp)
	register unsigned int local_color = color;
 8806108:	e0c00217 	ldw	r3,8(fp)
 880610c:	e0fff715 	stw	r3,-36(fp)
	
	/* Check coordinates */
	if (l_x > r_x)
 8806110:	e13ffa17 	ldw	r4,-24(fp)
 8806114:	e0bffb17 	ldw	r2,-20(fp)
 8806118:	2080062e 	bgeu	r4,r2,8806134 <alt_up_pixel_buffer_dma_draw_box+0x80>
	{
		temp = l_x;
 880611c:	e0fffb17 	ldw	r3,-20(fp)
 8806120:	e0fffc15 	stw	r3,-16(fp)
		l_x = r_x;
 8806124:	e13ffa17 	ldw	r4,-24(fp)
 8806128:	e13ffb15 	stw	r4,-20(fp)
		r_x = temp;
 880612c:	e0bffc17 	ldw	r2,-16(fp)
 8806130:	e0bffa15 	stw	r2,-24(fp)
	}
	if (t_y > b_y)
 8806134:	e0fff817 	ldw	r3,-32(fp)
 8806138:	e13ff917 	ldw	r4,-28(fp)
 880613c:	1900062e 	bgeu	r3,r4,8806158 <alt_up_pixel_buffer_dma_draw_box+0xa4>
	{
		temp = t_y;
 8806140:	e0bff917 	ldw	r2,-28(fp)
 8806144:	e0bffc15 	stw	r2,-16(fp)
		t_y = b_y;
 8806148:	e0fff817 	ldw	r3,-32(fp)
 880614c:	e0fff915 	stw	r3,-28(fp)
		b_y = temp;
 8806150:	e13ffc17 	ldw	r4,-16(fp)
 8806154:	e13ff815 	stw	r4,-32(fp)
	}
	if ((l_x >= limit_x) || (t_y >= limit_y) || (r_x < 0) || (b_y < 0))
 8806158:	e0bffb17 	ldw	r2,-20(fp)
 880615c:	e0fffe17 	ldw	r3,-8(fp)
 8806160:	10c10d2e 	bgeu	r2,r3,8806598 <alt_up_pixel_buffer_dma_draw_box+0x4e4>
 8806164:	e13ff917 	ldw	r4,-28(fp)
 8806168:	e0bffd17 	ldw	r2,-12(fp)
 880616c:	20800136 	bltu	r4,r2,8806174 <alt_up_pixel_buffer_dma_draw_box+0xc0>
	{
		/* Drawing outside of the window, so don't bother. */
		return;
 8806170:	00010906 	br	8806598 <alt_up_pixel_buffer_dma_draw_box+0x4e4>
	/* Clip the box and draw only within the confines of the screen. */
	if (l_x < 0)
	{
		l_x = 0;
	}
	if (r_x >= limit_x)
 8806174:	e0fffa17 	ldw	r3,-24(fp)
 8806178:	e13ffe17 	ldw	r4,-8(fp)
 880617c:	19000336 	bltu	r3,r4,880618c <alt_up_pixel_buffer_dma_draw_box+0xd8>
	{
		r_x = limit_x - 1;
 8806180:	e0bffe17 	ldw	r2,-8(fp)
 8806184:	10bfffc4 	addi	r2,r2,-1
 8806188:	e0bffa15 	stw	r2,-24(fp)
	}
	if (t_y < 0)
	{
		t_y = 0;
	}
	if (b_y >= limit_y)
 880618c:	e0fff817 	ldw	r3,-32(fp)
 8806190:	e13ffd17 	ldw	r4,-12(fp)
 8806194:	19000336 	bltu	r3,r4,88061a4 <alt_up_pixel_buffer_dma_draw_box+0xf0>
	{
		b_y = limit_y - 1;
 8806198:	e0bffd17 	ldw	r2,-12(fp)
 880619c:	10bfffc4 	addi	r2,r2,-1
 88061a0:	e0bff815 	stw	r2,-32(fp)
	}

	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
 88061a4:	e0800317 	ldw	r2,12(fp)
 88061a8:	10800058 	cmpnei	r2,r2,1
 88061ac:	1000041e 	bne	r2,zero,88061c0 <alt_up_pixel_buffer_dma_draw_box+0x10c>
		addr = pixel_buffer->back_buffer_start_address;
 88061b0:	e0bfee17 	ldw	r2,-72(fp)
 88061b4:	10800c17 	ldw	r2,48(r2)
 88061b8:	e0bfff15 	stw	r2,-4(fp)
 88061bc:	00000306 	br	88061cc <alt_up_pixel_buffer_dma_draw_box+0x118>
	else
		addr = pixel_buffer->buffer_start_address;
 88061c0:	e0bfee17 	ldw	r2,-72(fp)
 88061c4:	10800b17 	ldw	r2,44(r2)
 88061c8:	e0bfff15 	stw	r2,-4(fp)

	/* Draw the box using one of the addressing modes. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
 88061cc:	e0bfee17 	ldw	r2,-72(fp)
 88061d0:	10800d17 	ldw	r2,52(r2)
 88061d4:	1004c03a 	cmpne	r2,r2,zero
 88061d8:	1000721e 	bne	r2,zero,88063a4 <alt_up_pixel_buffer_dma_draw_box+0x2f0>
		/* Draw a box of a given color on the screen using the XY addressing mode. */
		register unsigned int x,y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
 88061dc:	e0bfee17 	ldw	r2,-72(fp)
 88061e0:	10801317 	ldw	r2,76(r2)
 88061e4:	e0bff415 	stw	r2,-48(fp)
		addr = addr + (t_y << offset_y);
 88061e8:	e0bff417 	ldw	r2,-48(fp)
 88061ec:	e0fff917 	ldw	r3,-28(fp)
 88061f0:	1884983a 	sll	r2,r3,r2
 88061f4:	e13fff17 	ldw	r4,-4(fp)
 88061f8:	2089883a 	add	r4,r4,r2
 88061fc:	e13fff15 	stw	r4,-4(fp)
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
 8806200:	e0bfee17 	ldw	r2,-72(fp)
 8806204:	10800e17 	ldw	r2,56(r2)
 8806208:	10800058 	cmpnei	r2,r2,1
 880620c:	10001e1e 	bne	r2,zero,8806288 <alt_up_pixel_buffer_dma_draw_box+0x1d4>
			for (y = t_y; y <= b_y; y++)
 8806210:	e0bff917 	ldw	r2,-28(fp)
 8806214:	e0bff515 	stw	r2,-44(fp)
 8806218:	00001706 	br	8806278 <alt_up_pixel_buffer_dma_draw_box+0x1c4>
			{
				for (x = l_x; x <= r_x; x++)
 880621c:	e0fffb17 	ldw	r3,-20(fp)
 8806220:	e0fff615 	stw	r3,-40(fp)
 8806224:	00000806 	br	8806248 <alt_up_pixel_buffer_dma_draw_box+0x194>
				{
					IOWR_8DIRECT(addr, x, local_color);
 8806228:	e0ffff17 	ldw	r3,-4(fp)
 880622c:	e0bff617 	ldw	r2,-40(fp)
 8806230:	1885883a 	add	r2,r3,r2
 8806234:	e0fff717 	ldw	r3,-36(fp)
 8806238:	10c00025 	stbio	r3,0(r2)
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
 880623c:	e13ff617 	ldw	r4,-40(fp)
 8806240:	21000044 	addi	r4,r4,1
 8806244:	e13ff615 	stw	r4,-40(fp)
 8806248:	e0bffa17 	ldw	r2,-24(fp)
 880624c:	e0fff617 	ldw	r3,-40(fp)
 8806250:	10fff52e 	bgeu	r2,r3,8806228 <alt_up_pixel_buffer_dma_draw_box+0x174>
				{
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + (1 << offset_y);
 8806254:	e0fff417 	ldw	r3,-48(fp)
 8806258:	00800044 	movi	r2,1
 880625c:	10c4983a 	sll	r2,r2,r3
 8806260:	e13fff17 	ldw	r4,-4(fp)
 8806264:	2089883a 	add	r4,r4,r2
 8806268:	e13fff15 	stw	r4,-4(fp)
		addr = addr + (t_y << offset_y);
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
 880626c:	e0bff517 	ldw	r2,-44(fp)
 8806270:	10800044 	addi	r2,r2,1
 8806274:	e0bff515 	stw	r2,-44(fp)
 8806278:	e0fff817 	ldw	r3,-32(fp)
 880627c:	e13ff517 	ldw	r4,-44(fp)
 8806280:	193fe62e 	bgeu	r3,r4,880621c <alt_up_pixel_buffer_dma_draw_box+0x168>
 8806284:	0000c406 	br	8806598 <alt_up_pixel_buffer_dma_draw_box+0x4e4>
				{
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
 8806288:	e0bfee17 	ldw	r2,-72(fp)
 880628c:	10800e17 	ldw	r2,56(r2)
 8806290:	10800098 	cmpnei	r2,r2,2
 8806294:	1000211e 	bne	r2,zero,880631c <alt_up_pixel_buffer_dma_draw_box+0x268>
			for (y = t_y; y <= b_y; y++)
 8806298:	e0bff917 	ldw	r2,-28(fp)
 880629c:	e0bff515 	stw	r2,-44(fp)
 88062a0:	00001a06 	br	880630c <alt_up_pixel_buffer_dma_draw_box+0x258>
			{
				for (x = l_x; x <= r_x; x++)
 88062a4:	e0fffb17 	ldw	r3,-20(fp)
 88062a8:	e0fff615 	stw	r3,-40(fp)
 88062ac:	00000b06 	br	88062dc <alt_up_pixel_buffer_dma_draw_box+0x228>
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
 88062b0:	e13ff617 	ldw	r4,-40(fp)
 88062b4:	e13ff617 	ldw	r4,-40(fp)
 88062b8:	2105883a 	add	r2,r4,r4
 88062bc:	1007883a 	mov	r3,r2
 88062c0:	e0bfff17 	ldw	r2,-4(fp)
 88062c4:	1885883a 	add	r2,r3,r2
 88062c8:	e0fff717 	ldw	r3,-36(fp)
 88062cc:	10c0002d 	sthio	r3,0(r2)
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
 88062d0:	e0bff617 	ldw	r2,-40(fp)
 88062d4:	10800044 	addi	r2,r2,1
 88062d8:	e0bff615 	stw	r2,-40(fp)
 88062dc:	e0fffa17 	ldw	r3,-24(fp)
 88062e0:	e13ff617 	ldw	r4,-40(fp)
 88062e4:	193ff22e 	bgeu	r3,r4,88062b0 <alt_up_pixel_buffer_dma_draw_box+0x1fc>
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
				}
				addr = addr + (1 << offset_y);
 88062e8:	e0fff417 	ldw	r3,-48(fp)
 88062ec:	00800044 	movi	r2,1
 88062f0:	10c4983a 	sll	r2,r2,r3
 88062f4:	e0ffff17 	ldw	r3,-4(fp)
 88062f8:	1887883a 	add	r3,r3,r2
 88062fc:	e0ffff15 	stw	r3,-4(fp)
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
 8806300:	e13ff517 	ldw	r4,-44(fp)
 8806304:	21000044 	addi	r4,r4,1
 8806308:	e13ff515 	stw	r4,-44(fp)
 880630c:	e0bff817 	ldw	r2,-32(fp)
 8806310:	e0fff517 	ldw	r3,-44(fp)
 8806314:	10ffe32e 	bgeu	r2,r3,88062a4 <alt_up_pixel_buffer_dma_draw_box+0x1f0>
 8806318:	00009f06 	br	8806598 <alt_up_pixel_buffer_dma_draw_box+0x4e4>
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
 880631c:	e13ff917 	ldw	r4,-28(fp)
 8806320:	e13ff515 	stw	r4,-44(fp)
 8806324:	00001b06 	br	8806394 <alt_up_pixel_buffer_dma_draw_box+0x2e0>
			{
				for (x = l_x; x <= r_x; x++)
 8806328:	e0bffb17 	ldw	r2,-20(fp)
 880632c:	e0bff615 	stw	r2,-40(fp)
 8806330:	00000c06 	br	8806364 <alt_up_pixel_buffer_dma_draw_box+0x2b0>
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
 8806334:	e0fff617 	ldw	r3,-40(fp)
 8806338:	e0fff617 	ldw	r3,-40(fp)
 880633c:	18c5883a 	add	r2,r3,r3
 8806340:	1085883a 	add	r2,r2,r2
 8806344:	1007883a 	mov	r3,r2
 8806348:	e0bfff17 	ldw	r2,-4(fp)
 880634c:	1885883a 	add	r2,r3,r2
 8806350:	e0fff717 	ldw	r3,-36(fp)
 8806354:	10c00035 	stwio	r3,0(r2)
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
 8806358:	e13ff617 	ldw	r4,-40(fp)
 880635c:	21000044 	addi	r4,r4,1
 8806360:	e13ff615 	stw	r4,-40(fp)
 8806364:	e0bffa17 	ldw	r2,-24(fp)
 8806368:	e0fff617 	ldw	r3,-40(fp)
 880636c:	10fff12e 	bgeu	r2,r3,8806334 <alt_up_pixel_buffer_dma_draw_box+0x280>
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
				}
				addr = addr + (1 << offset_y);
 8806370:	e0fff417 	ldw	r3,-48(fp)
 8806374:	00800044 	movi	r2,1
 8806378:	10c4983a 	sll	r2,r2,r3
 880637c:	e13fff17 	ldw	r4,-4(fp)
 8806380:	2089883a 	add	r4,r4,r2
 8806384:	e13fff15 	stw	r4,-4(fp)
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
 8806388:	e0bff517 	ldw	r2,-44(fp)
 880638c:	10800044 	addi	r2,r2,1
 8806390:	e0bff515 	stw	r2,-44(fp)
 8806394:	e0fff817 	ldw	r3,-32(fp)
 8806398:	e13ff517 	ldw	r4,-44(fp)
 880639c:	193fe22e 	bgeu	r3,r4,8806328 <alt_up_pixel_buffer_dma_draw_box+0x274>
 88063a0:	00007d06 	br	8806598 <alt_up_pixel_buffer_dma_draw_box+0x4e4>
	} else {
		/* Draw a box of a given color on the screen using the linear addressing mode. */
		register unsigned int x,y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
 88063a4:	e0bfee17 	ldw	r2,-72(fp)
 88063a8:	10800e17 	ldw	r2,56(r2)
 88063ac:	10800058 	cmpnei	r2,r2,1
 88063b0:	1000221e 	bne	r2,zero,880643c <alt_up_pixel_buffer_dma_draw_box+0x388>
			addr = addr + t_y * limit_x;
 88063b4:	e0fff917 	ldw	r3,-28(fp)
 88063b8:	e13ffe17 	ldw	r4,-8(fp)
 88063bc:	1905383a 	mul	r2,r3,r4
 88063c0:	e0ffff17 	ldw	r3,-4(fp)
 88063c4:	1887883a 	add	r3,r3,r2
 88063c8:	e0ffff15 	stw	r3,-4(fp)
			for (y = t_y; y <= b_y; y++)
 88063cc:	e13ff917 	ldw	r4,-28(fp)
 88063d0:	e13ff215 	stw	r4,-56(fp)
 88063d4:	00001506 	br	880642c <alt_up_pixel_buffer_dma_draw_box+0x378>
			{
				for (x = l_x; x <= r_x; x++)
 88063d8:	e0bffb17 	ldw	r2,-20(fp)
 88063dc:	e0bff315 	stw	r2,-52(fp)
 88063e0:	00000806 	br	8806404 <alt_up_pixel_buffer_dma_draw_box+0x350>
				{
					IOWR_8DIRECT(addr, x, local_color);
 88063e4:	e0ffff17 	ldw	r3,-4(fp)
 88063e8:	e0bff317 	ldw	r2,-52(fp)
 88063ec:	1885883a 	add	r2,r3,r2
 88063f0:	e0fff717 	ldw	r3,-36(fp)
 88063f4:	10c00025 	stbio	r3,0(r2)
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
 88063f8:	e0fff317 	ldw	r3,-52(fp)
 88063fc:	18c00044 	addi	r3,r3,1
 8806400:	e0fff315 	stw	r3,-52(fp)
 8806404:	e13ffa17 	ldw	r4,-24(fp)
 8806408:	e0bff317 	ldw	r2,-52(fp)
 880640c:	20bff52e 	bgeu	r4,r2,88063e4 <alt_up_pixel_buffer_dma_draw_box+0x330>
				{
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + limit_x;
 8806410:	e0ffff17 	ldw	r3,-4(fp)
 8806414:	e13ffe17 	ldw	r4,-8(fp)
 8806418:	1907883a 	add	r3,r3,r4
 880641c:	e0ffff15 	stw	r3,-4(fp)
		register unsigned int x,y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
 8806420:	e0bff217 	ldw	r2,-56(fp)
 8806424:	10800044 	addi	r2,r2,1
 8806428:	e0bff215 	stw	r2,-56(fp)
 880642c:	e0fff817 	ldw	r3,-32(fp)
 8806430:	e13ff217 	ldw	r4,-56(fp)
 8806434:	193fe82e 	bgeu	r3,r4,88063d8 <alt_up_pixel_buffer_dma_draw_box+0x324>
 8806438:	00005706 	br	8806598 <alt_up_pixel_buffer_dma_draw_box+0x4e4>
				{
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
 880643c:	e0bfee17 	ldw	r2,-72(fp)
 8806440:	10800e17 	ldw	r2,56(r2)
 8806444:	10800098 	cmpnei	r2,r2,2
 8806448:	1000291e 	bne	r2,zero,88064f0 <alt_up_pixel_buffer_dma_draw_box+0x43c>
			limit_x = limit_x << 1;
 880644c:	e0fffe17 	ldw	r3,-8(fp)
 8806450:	e0fffe17 	ldw	r3,-8(fp)
 8806454:	18c5883a 	add	r2,r3,r3
 8806458:	e0bffe15 	stw	r2,-8(fp)
			addr = addr + t_y * limit_x;
 880645c:	e13ff917 	ldw	r4,-28(fp)
 8806460:	e0fffe17 	ldw	r3,-8(fp)
 8806464:	20c5383a 	mul	r2,r4,r3
 8806468:	e13fff17 	ldw	r4,-4(fp)
 880646c:	2089883a 	add	r4,r4,r2
 8806470:	e13fff15 	stw	r4,-4(fp)
			for (y = t_y; y <= b_y; y++)
 8806474:	e0bff917 	ldw	r2,-28(fp)
 8806478:	e0bff215 	stw	r2,-56(fp)
 880647c:	00001806 	br	88064e0 <alt_up_pixel_buffer_dma_draw_box+0x42c>
			{
				for (x = l_x; x <= r_x; x++)
 8806480:	e0fffb17 	ldw	r3,-20(fp)
 8806484:	e0fff315 	stw	r3,-52(fp)
 8806488:	00000b06 	br	88064b8 <alt_up_pixel_buffer_dma_draw_box+0x404>
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
 880648c:	e13ff317 	ldw	r4,-52(fp)
 8806490:	e13ff317 	ldw	r4,-52(fp)
 8806494:	2105883a 	add	r2,r4,r4
 8806498:	1007883a 	mov	r3,r2
 880649c:	e0bfff17 	ldw	r2,-4(fp)
 88064a0:	1885883a 	add	r2,r3,r2
 88064a4:	e0fff717 	ldw	r3,-36(fp)
 88064a8:	10c0002d 	sthio	r3,0(r2)
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
 88064ac:	e0bff317 	ldw	r2,-52(fp)
 88064b0:	10800044 	addi	r2,r2,1
 88064b4:	e0bff315 	stw	r2,-52(fp)
 88064b8:	e0fffa17 	ldw	r3,-24(fp)
 88064bc:	e13ff317 	ldw	r4,-52(fp)
 88064c0:	193ff22e 	bgeu	r3,r4,880648c <alt_up_pixel_buffer_dma_draw_box+0x3d8>
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
				}
				addr = addr + limit_x;
 88064c4:	e0bfff17 	ldw	r2,-4(fp)
 88064c8:	e0fffe17 	ldw	r3,-8(fp)
 88064cc:	10c5883a 	add	r2,r2,r3
 88064d0:	e0bfff15 	stw	r2,-4(fp)
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
 88064d4:	e13ff217 	ldw	r4,-56(fp)
 88064d8:	21000044 	addi	r4,r4,1
 88064dc:	e13ff215 	stw	r4,-56(fp)
 88064e0:	e0bff817 	ldw	r2,-32(fp)
 88064e4:	e0fff217 	ldw	r3,-56(fp)
 88064e8:	10ffe52e 	bgeu	r2,r3,8806480 <alt_up_pixel_buffer_dma_draw_box+0x3cc>
 88064ec:	00002a06 	br	8806598 <alt_up_pixel_buffer_dma_draw_box+0x4e4>
				addr = addr + limit_x;
			}
		}
		else
		{
			limit_x = limit_x << 2;
 88064f0:	e13ffe17 	ldw	r4,-8(fp)
 88064f4:	e13ffe17 	ldw	r4,-8(fp)
 88064f8:	2105883a 	add	r2,r4,r4
 88064fc:	1085883a 	add	r2,r2,r2
 8806500:	e0bffe15 	stw	r2,-8(fp)
			addr = addr + t_y * limit_x;
 8806504:	e0fff917 	ldw	r3,-28(fp)
 8806508:	e13ffe17 	ldw	r4,-8(fp)
 880650c:	1905383a 	mul	r2,r3,r4
 8806510:	e0ffff17 	ldw	r3,-4(fp)
 8806514:	1887883a 	add	r3,r3,r2
 8806518:	e0ffff15 	stw	r3,-4(fp)
			for (y = t_y; y <= b_y; y++)
 880651c:	e13ff917 	ldw	r4,-28(fp)
 8806520:	e13ff215 	stw	r4,-56(fp)
 8806524:	00001906 	br	880658c <alt_up_pixel_buffer_dma_draw_box+0x4d8>
			{
				for (x = l_x; x <= r_x; x++)
 8806528:	e0bffb17 	ldw	r2,-20(fp)
 880652c:	e0bff315 	stw	r2,-52(fp)
 8806530:	00000c06 	br	8806564 <alt_up_pixel_buffer_dma_draw_box+0x4b0>
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
 8806534:	e0fff317 	ldw	r3,-52(fp)
 8806538:	e0fff317 	ldw	r3,-52(fp)
 880653c:	18c5883a 	add	r2,r3,r3
 8806540:	1085883a 	add	r2,r2,r2
 8806544:	1007883a 	mov	r3,r2
 8806548:	e0bfff17 	ldw	r2,-4(fp)
 880654c:	1885883a 	add	r2,r3,r2
 8806550:	e0fff717 	ldw	r3,-36(fp)
 8806554:	10c00035 	stwio	r3,0(r2)
		{
			limit_x = limit_x << 2;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
 8806558:	e13ff317 	ldw	r4,-52(fp)
 880655c:	21000044 	addi	r4,r4,1
 8806560:	e13ff315 	stw	r4,-52(fp)
 8806564:	e0bffa17 	ldw	r2,-24(fp)
 8806568:	e0fff317 	ldw	r3,-52(fp)
 880656c:	10fff12e 	bgeu	r2,r3,8806534 <alt_up_pixel_buffer_dma_draw_box+0x480>
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
				}
				addr = addr + limit_x;
 8806570:	e13fff17 	ldw	r4,-4(fp)
 8806574:	e0bffe17 	ldw	r2,-8(fp)
 8806578:	2089883a 	add	r4,r4,r2
 880657c:	e13fff15 	stw	r4,-4(fp)
		}
		else
		{
			limit_x = limit_x << 2;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
 8806580:	e0fff217 	ldw	r3,-56(fp)
 8806584:	18c00044 	addi	r3,r3,1
 8806588:	e0fff215 	stw	r3,-56(fp)
 880658c:	e13ff817 	ldw	r4,-32(fp)
 8806590:	e0bff217 	ldw	r2,-56(fp)
 8806594:	20bfe42e 	bgeu	r4,r2,8806528 <alt_up_pixel_buffer_dma_draw_box+0x474>
				}
				addr = addr + limit_x;
			}
		}
	}
}
 8806598:	e037883a 	mov	sp,fp
 880659c:	df000017 	ldw	fp,0(sp)
 88065a0:	dec00104 	addi	sp,sp,4
 88065a4:	f800283a 	ret

088065a8 <alt_up_pixel_buffer_dma_draw_hline>:

void alt_up_pixel_buffer_dma_draw_hline(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int x1, int y, int color, int backbuffer)
/* This method draws a horizontal line. This method is faster than using the line method because we know the direction of the line. */
{
 88065a8:	defff204 	addi	sp,sp,-56
 88065ac:	df000d15 	stw	fp,52(sp)
 88065b0:	df000d04 	addi	fp,sp,52
 88065b4:	e13ff315 	stw	r4,-52(fp)
 88065b8:	e17ff415 	stw	r5,-48(fp)
 88065bc:	e1bff515 	stw	r6,-44(fp)
 88065c0:	e1fff615 	stw	r7,-40(fp)
	register unsigned int addr;
	register unsigned int limit_x = pixel_buffer->x_resolution;
 88065c4:	e0bff317 	ldw	r2,-52(fp)
 88065c8:	10800f17 	ldw	r2,60(r2)
 88065cc:	e0bffe15 	stw	r2,-8(fp)
	register unsigned int limit_y = pixel_buffer->y_resolution;
 88065d0:	e0bff317 	ldw	r2,-52(fp)
 88065d4:	10801017 	ldw	r2,64(r2)
 88065d8:	e0bffd15 	stw	r2,-12(fp)
	register unsigned int temp;
	register unsigned int l_x = x0;
 88065dc:	e0bff417 	ldw	r2,-48(fp)
 88065e0:	e0bffc15 	stw	r2,-16(fp)
	register unsigned int r_x = x1;
 88065e4:	e0fff517 	ldw	r3,-44(fp)
 88065e8:	e0fffb15 	stw	r3,-20(fp)
	register unsigned int line_y = y;
 88065ec:	e13ff617 	ldw	r4,-40(fp)
 88065f0:	e13ffa15 	stw	r4,-24(fp)
	register unsigned int local_color = color;
 88065f4:	e0800117 	ldw	r2,4(fp)
 88065f8:	e0bff915 	stw	r2,-28(fp)
	
	/* Check coordinates */
	if (l_x > r_x)
 88065fc:	e0fffb17 	ldw	r3,-20(fp)
 8806600:	e13ffc17 	ldw	r4,-16(fp)
 8806604:	1900042e 	bgeu	r3,r4,8806618 <alt_up_pixel_buffer_dma_draw_hline+0x70>
	{
		temp = l_x;
 8806608:	e0bffc17 	ldw	r2,-16(fp)
		l_x = r_x;
 880660c:	e0fffb17 	ldw	r3,-20(fp)
 8806610:	e0fffc15 	stw	r3,-16(fp)
		r_x = temp;
 8806614:	e0bffb15 	stw	r2,-20(fp)
	}
	if ((l_x >= limit_x) || (line_y >= limit_y) || (r_x < 0) || (line_y < 0))
 8806618:	e13ffc17 	ldw	r4,-16(fp)
 880661c:	e0bffe17 	ldw	r2,-8(fp)
 8806620:	2080b12e 	bgeu	r4,r2,88068e8 <alt_up_pixel_buffer_dma_draw_hline+0x340>
 8806624:	e0fffa17 	ldw	r3,-24(fp)
 8806628:	e13ffd17 	ldw	r4,-12(fp)
 880662c:	19000136 	bltu	r3,r4,8806634 <alt_up_pixel_buffer_dma_draw_hline+0x8c>
	{
		/* Drawing outside of the window, so don't bother. */
		return;
 8806630:	0000ad06 	br	88068e8 <alt_up_pixel_buffer_dma_draw_hline+0x340>
	/* Clip the box and draw only within the confines of the screen. */
	if (l_x < 0)
	{
		l_x = 0;
	}
	if (r_x >= limit_x)
 8806634:	e0bffb17 	ldw	r2,-20(fp)
 8806638:	e0fffe17 	ldw	r3,-8(fp)
 880663c:	10c00336 	bltu	r2,r3,880664c <alt_up_pixel_buffer_dma_draw_hline+0xa4>
	{
		r_x = limit_x - 1;
 8806640:	e13ffe17 	ldw	r4,-8(fp)
 8806644:	213fffc4 	addi	r4,r4,-1
 8806648:	e13ffb15 	stw	r4,-20(fp)
	}

	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
 880664c:	e0800217 	ldw	r2,8(fp)
 8806650:	10800058 	cmpnei	r2,r2,1
 8806654:	1000041e 	bne	r2,zero,8806668 <alt_up_pixel_buffer_dma_draw_hline+0xc0>
		addr = pixel_buffer->back_buffer_start_address;
 8806658:	e0bff317 	ldw	r2,-52(fp)
 880665c:	10800c17 	ldw	r2,48(r2)
 8806660:	e0bfff15 	stw	r2,-4(fp)
 8806664:	00000306 	br	8806674 <alt_up_pixel_buffer_dma_draw_hline+0xcc>
	else
		addr = pixel_buffer->buffer_start_address;
 8806668:	e0bff317 	ldw	r2,-52(fp)
 880666c:	10800b17 	ldw	r2,44(r2)
 8806670:	e0bfff15 	stw	r2,-4(fp)

	/* Draw a horizontal line using one of the addressing modes. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
 8806674:	e0bff317 	ldw	r2,-52(fp)
 8806678:	10800d17 	ldw	r2,52(r2)
 880667c:	1004c03a 	cmpne	r2,r2,zero
 8806680:	1000431e 	bne	r2,zero,8806790 <alt_up_pixel_buffer_dma_draw_hline+0x1e8>
		/* Draw a horizontal line of a given color on the screen using the XY addressing mode. */
		register unsigned int x;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
 8806684:	e0bff317 	ldw	r2,-52(fp)
 8806688:	10801317 	ldw	r2,76(r2)
		addr = addr + (line_y << offset_y);
 880668c:	e0fffa17 	ldw	r3,-24(fp)
 8806690:	1884983a 	sll	r2,r3,r2
 8806694:	e13fff17 	ldw	r4,-4(fp)
 8806698:	2089883a 	add	r4,r4,r2
 880669c:	e13fff15 	stw	r4,-4(fp)
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a horizontal line. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
 88066a0:	e0bff317 	ldw	r2,-52(fp)
 88066a4:	10800e17 	ldw	r2,56(r2)
 88066a8:	10800058 	cmpnei	r2,r2,1
 88066ac:	10000f1e 	bne	r2,zero,88066ec <alt_up_pixel_buffer_dma_draw_hline+0x144>
			for (x = l_x; x <= r_x; x++)
 88066b0:	e0bffc17 	ldw	r2,-16(fp)
 88066b4:	e0bff815 	stw	r2,-32(fp)
 88066b8:	00000806 	br	88066dc <alt_up_pixel_buffer_dma_draw_hline+0x134>
			{
				IOWR_8DIRECT(addr, x, local_color);
 88066bc:	e0ffff17 	ldw	r3,-4(fp)
 88066c0:	e0bff817 	ldw	r2,-32(fp)
 88066c4:	1885883a 	add	r2,r3,r2
 88066c8:	e0fff917 	ldw	r3,-28(fp)
 88066cc:	10c00025 	stbio	r3,0(r2)
		addr = addr + (line_y << offset_y);
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a horizontal line. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (x = l_x; x <= r_x; x++)
 88066d0:	e0fff817 	ldw	r3,-32(fp)
 88066d4:	18c00044 	addi	r3,r3,1
 88066d8:	e0fff815 	stw	r3,-32(fp)
 88066dc:	e13ffb17 	ldw	r4,-20(fp)
 88066e0:	e0bff817 	ldw	r2,-32(fp)
 88066e4:	20bff52e 	bgeu	r4,r2,88066bc <alt_up_pixel_buffer_dma_draw_hline+0x114>
 88066e8:	00007f06 	br	88068e8 <alt_up_pixel_buffer_dma_draw_hline+0x340>
			{
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
 88066ec:	e0bff317 	ldw	r2,-52(fp)
 88066f0:	10800e17 	ldw	r2,56(r2)
 88066f4:	10800098 	cmpnei	r2,r2,2
 88066f8:	1000121e 	bne	r2,zero,8806744 <alt_up_pixel_buffer_dma_draw_hline+0x19c>
			for (x = l_x; x <= r_x; x++)
 88066fc:	e0fffc17 	ldw	r3,-16(fp)
 8806700:	e0fff815 	stw	r3,-32(fp)
 8806704:	00000b06 	br	8806734 <alt_up_pixel_buffer_dma_draw_hline+0x18c>
			{
				IOWR_16DIRECT(addr, x << 1, local_color);
 8806708:	e13ff817 	ldw	r4,-32(fp)
 880670c:	e13ff817 	ldw	r4,-32(fp)
 8806710:	2105883a 	add	r2,r4,r4
 8806714:	1007883a 	mov	r3,r2
 8806718:	e0bfff17 	ldw	r2,-4(fp)
 880671c:	1885883a 	add	r2,r3,r2
 8806720:	e0fff917 	ldw	r3,-28(fp)
 8806724:	10c0002d 	sthio	r3,0(r2)
			for (x = l_x; x <= r_x; x++)
			{
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (x = l_x; x <= r_x; x++)
 8806728:	e0bff817 	ldw	r2,-32(fp)
 880672c:	10800044 	addi	r2,r2,1
 8806730:	e0bff815 	stw	r2,-32(fp)
 8806734:	e0fffb17 	ldw	r3,-20(fp)
 8806738:	e13ff817 	ldw	r4,-32(fp)
 880673c:	193ff22e 	bgeu	r3,r4,8806708 <alt_up_pixel_buffer_dma_draw_hline+0x160>
 8806740:	00006906 	br	88068e8 <alt_up_pixel_buffer_dma_draw_hline+0x340>
				IOWR_16DIRECT(addr, x << 1, local_color);
			}
		}
		else
		{
			for (x = l_x; x <= r_x; x++)
 8806744:	e0bffc17 	ldw	r2,-16(fp)
 8806748:	e0bff815 	stw	r2,-32(fp)
 880674c:	00000c06 	br	8806780 <alt_up_pixel_buffer_dma_draw_hline+0x1d8>
			{
				IOWR_32DIRECT(addr, x << 2, local_color);
 8806750:	e0fff817 	ldw	r3,-32(fp)
 8806754:	e0fff817 	ldw	r3,-32(fp)
 8806758:	18c5883a 	add	r2,r3,r3
 880675c:	1085883a 	add	r2,r2,r2
 8806760:	1007883a 	mov	r3,r2
 8806764:	e0bfff17 	ldw	r2,-4(fp)
 8806768:	1885883a 	add	r2,r3,r2
 880676c:	e0fff917 	ldw	r3,-28(fp)
 8806770:	10c00035 	stwio	r3,0(r2)
				IOWR_16DIRECT(addr, x << 1, local_color);
			}
		}
		else
		{
			for (x = l_x; x <= r_x; x++)
 8806774:	e13ff817 	ldw	r4,-32(fp)
 8806778:	21000044 	addi	r4,r4,1
 880677c:	e13ff815 	stw	r4,-32(fp)
 8806780:	e0bffb17 	ldw	r2,-20(fp)
 8806784:	e0fff817 	ldw	r3,-32(fp)
 8806788:	10fff12e 	bgeu	r2,r3,8806750 <alt_up_pixel_buffer_dma_draw_hline+0x1a8>
 880678c:	00005606 	br	88068e8 <alt_up_pixel_buffer_dma_draw_hline+0x340>
	} else {
		/* Draw a horizontal line of a given color on the screen using the linear addressing mode. */
		register unsigned int x;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
 8806790:	e0bff317 	ldw	r2,-52(fp)
 8806794:	10800e17 	ldw	r2,56(r2)
 8806798:	10800058 	cmpnei	r2,r2,1
 880679c:	1000151e 	bne	r2,zero,88067f4 <alt_up_pixel_buffer_dma_draw_hline+0x24c>
			addr = addr + line_y * limit_x;
 88067a0:	e13ffa17 	ldw	r4,-24(fp)
 88067a4:	e0fffe17 	ldw	r3,-8(fp)
 88067a8:	20c5383a 	mul	r2,r4,r3
 88067ac:	e13fff17 	ldw	r4,-4(fp)
 88067b0:	2089883a 	add	r4,r4,r2
 88067b4:	e13fff15 	stw	r4,-4(fp)
			for (x = l_x; x <= r_x; x++)
 88067b8:	e0bffc17 	ldw	r2,-16(fp)
 88067bc:	e0bff715 	stw	r2,-36(fp)
 88067c0:	00000806 	br	88067e4 <alt_up_pixel_buffer_dma_draw_hline+0x23c>
			{
				IOWR_8DIRECT(addr, x, local_color);
 88067c4:	e0ffff17 	ldw	r3,-4(fp)
 88067c8:	e0bff717 	ldw	r2,-36(fp)
 88067cc:	1885883a 	add	r2,r3,r2
 88067d0:	e0fff917 	ldw	r3,-28(fp)
 88067d4:	10c00025 	stbio	r3,0(r2)
		register unsigned int x;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + line_y * limit_x;
			for (x = l_x; x <= r_x; x++)
 88067d8:	e0fff717 	ldw	r3,-36(fp)
 88067dc:	18c00044 	addi	r3,r3,1
 88067e0:	e0fff715 	stw	r3,-36(fp)
 88067e4:	e13ffb17 	ldw	r4,-20(fp)
 88067e8:	e0bff717 	ldw	r2,-36(fp)
 88067ec:	20bff52e 	bgeu	r4,r2,88067c4 <alt_up_pixel_buffer_dma_draw_hline+0x21c>
 88067f0:	00003d06 	br	88068e8 <alt_up_pixel_buffer_dma_draw_hline+0x340>
			{
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
 88067f4:	e0bff317 	ldw	r2,-52(fp)
 88067f8:	10800e17 	ldw	r2,56(r2)
 88067fc:	10800098 	cmpnei	r2,r2,2
 8806800:	10001c1e 	bne	r2,zero,8806874 <alt_up_pixel_buffer_dma_draw_hline+0x2cc>
			limit_x = limit_x << 1;
 8806804:	e0fffe17 	ldw	r3,-8(fp)
 8806808:	e0fffe17 	ldw	r3,-8(fp)
 880680c:	18c5883a 	add	r2,r3,r3
 8806810:	e0bffe15 	stw	r2,-8(fp)
			addr = addr + line_y * limit_x;
 8806814:	e13ffa17 	ldw	r4,-24(fp)
 8806818:	e0fffe17 	ldw	r3,-8(fp)
 880681c:	20c5383a 	mul	r2,r4,r3
 8806820:	e13fff17 	ldw	r4,-4(fp)
 8806824:	2089883a 	add	r4,r4,r2
 8806828:	e13fff15 	stw	r4,-4(fp)
			for (x = l_x; x <= r_x; x++)
 880682c:	e0bffc17 	ldw	r2,-16(fp)
 8806830:	e0bff715 	stw	r2,-36(fp)
 8806834:	00000b06 	br	8806864 <alt_up_pixel_buffer_dma_draw_hline+0x2bc>
			{
				IOWR_16DIRECT(addr, x << 1, local_color);
 8806838:	e0fff717 	ldw	r3,-36(fp)
 880683c:	e0fff717 	ldw	r3,-36(fp)
 8806840:	18c5883a 	add	r2,r3,r3
 8806844:	1007883a 	mov	r3,r2
 8806848:	e0bfff17 	ldw	r2,-4(fp)
 880684c:	1885883a 	add	r2,r3,r2
 8806850:	e0fff917 	ldw	r3,-28(fp)
 8806854:	10c0002d 	sthio	r3,0(r2)
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + line_y * limit_x;
			for (x = l_x; x <= r_x; x++)
 8806858:	e13ff717 	ldw	r4,-36(fp)
 880685c:	21000044 	addi	r4,r4,1
 8806860:	e13ff715 	stw	r4,-36(fp)
 8806864:	e0bffb17 	ldw	r2,-20(fp)
 8806868:	e0fff717 	ldw	r3,-36(fp)
 880686c:	10fff22e 	bgeu	r2,r3,8806838 <alt_up_pixel_buffer_dma_draw_hline+0x290>
 8806870:	00001d06 	br	88068e8 <alt_up_pixel_buffer_dma_draw_hline+0x340>
				IOWR_16DIRECT(addr, x << 1, local_color);
			}
		}
		else
		{
			limit_x = limit_x << 2;
 8806874:	e13ffe17 	ldw	r4,-8(fp)
 8806878:	e13ffe17 	ldw	r4,-8(fp)
 880687c:	2105883a 	add	r2,r4,r4
 8806880:	1085883a 	add	r2,r2,r2
 8806884:	e0bffe15 	stw	r2,-8(fp)
			addr = addr + line_y * limit_x;
 8806888:	e0fffa17 	ldw	r3,-24(fp)
 880688c:	e13ffe17 	ldw	r4,-8(fp)
 8806890:	1905383a 	mul	r2,r3,r4
 8806894:	e0ffff17 	ldw	r3,-4(fp)
 8806898:	1887883a 	add	r3,r3,r2
 880689c:	e0ffff15 	stw	r3,-4(fp)
			for (x = l_x; x <= r_x; x++)
 88068a0:	e13ffc17 	ldw	r4,-16(fp)
 88068a4:	e13ff715 	stw	r4,-36(fp)
 88068a8:	00000c06 	br	88068dc <alt_up_pixel_buffer_dma_draw_hline+0x334>
			{
				IOWR_32DIRECT(addr, x << 2, local_color);
 88068ac:	e0fff717 	ldw	r3,-36(fp)
 88068b0:	e0fff717 	ldw	r3,-36(fp)
 88068b4:	18c5883a 	add	r2,r3,r3
 88068b8:	1085883a 	add	r2,r2,r2
 88068bc:	1007883a 	mov	r3,r2
 88068c0:	e0bfff17 	ldw	r2,-4(fp)
 88068c4:	1885883a 	add	r2,r3,r2
 88068c8:	e0fff917 	ldw	r3,-28(fp)
 88068cc:	10c00035 	stwio	r3,0(r2)
		}
		else
		{
			limit_x = limit_x << 2;
			addr = addr + line_y * limit_x;
			for (x = l_x; x <= r_x; x++)
 88068d0:	e13ff717 	ldw	r4,-36(fp)
 88068d4:	21000044 	addi	r4,r4,1
 88068d8:	e13ff715 	stw	r4,-36(fp)
 88068dc:	e0bffb17 	ldw	r2,-20(fp)
 88068e0:	e0fff717 	ldw	r3,-36(fp)
 88068e4:	10fff12e 	bgeu	r2,r3,88068ac <alt_up_pixel_buffer_dma_draw_hline+0x304>
				IOWR_32DIRECT(addr, x << 2, local_color);
			}
			addr = addr + limit_x;
		}
	}
}
 88068e8:	e037883a 	mov	sp,fp
 88068ec:	df000017 	ldw	fp,0(sp)
 88068f0:	dec00104 	addi	sp,sp,4
 88068f4:	f800283a 	ret

088068f8 <alt_up_pixel_buffer_dma_draw_vline>:


void alt_up_pixel_buffer_dma_draw_vline(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x, int y0, int y1, int color, int backbuffer)
/* This method draws a vertical line. This method is faster than using the line method because we know the direction of the line. */

{
 88068f8:	defff104 	addi	sp,sp,-60
 88068fc:	df000e15 	stw	fp,56(sp)
 8806900:	df000e04 	addi	fp,sp,56
 8806904:	e13ff215 	stw	r4,-56(fp)
 8806908:	e17ff315 	stw	r5,-52(fp)
 880690c:	e1bff415 	stw	r6,-48(fp)
 8806910:	e1fff515 	stw	r7,-44(fp)
	register unsigned int addr;
	register unsigned int limit_x = pixel_buffer->x_resolution;
 8806914:	e0bff217 	ldw	r2,-56(fp)
 8806918:	10800f17 	ldw	r2,60(r2)
 880691c:	e0bffe15 	stw	r2,-8(fp)
	register unsigned int limit_y = pixel_buffer->y_resolution;
 8806920:	e0bff217 	ldw	r2,-56(fp)
 8806924:	10801017 	ldw	r2,64(r2)
 8806928:	e0bffd15 	stw	r2,-12(fp)
	register unsigned int temp;
	register unsigned int line_x = x;
 880692c:	e0bff317 	ldw	r2,-52(fp)
 8806930:	e0bffc15 	stw	r2,-16(fp)
	register unsigned int t_y = y0;
 8806934:	e0fff417 	ldw	r3,-48(fp)
 8806938:	e0fffb15 	stw	r3,-20(fp)
	register unsigned int b_y = y1;
 880693c:	e13ff517 	ldw	r4,-44(fp)
 8806940:	e13ffa15 	stw	r4,-24(fp)
	register unsigned int local_color = color;
 8806944:	e0800117 	ldw	r2,4(fp)
 8806948:	e0bff915 	stw	r2,-28(fp)
	
	/* Check coordinates */
	if (t_y > b_y)
 880694c:	e0fffa17 	ldw	r3,-24(fp)
 8806950:	e13ffb17 	ldw	r4,-20(fp)
 8806954:	1900042e 	bgeu	r3,r4,8806968 <alt_up_pixel_buffer_dma_draw_vline+0x70>
	{
		temp = t_y;
 8806958:	e0bffb17 	ldw	r2,-20(fp)
		t_y = b_y;
 880695c:	e0fffa17 	ldw	r3,-24(fp)
 8806960:	e0fffb15 	stw	r3,-20(fp)
		b_y = temp;
 8806964:	e0bffa15 	stw	r2,-24(fp)
	}
	if ((line_x >= limit_x) || (t_y >= limit_y) || (line_x < 0) || (b_y < 0))
 8806968:	e13ffc17 	ldw	r4,-16(fp)
 880696c:	e0bffe17 	ldw	r2,-8(fp)
 8806970:	2080d12e 	bgeu	r4,r2,8806cb8 <alt_up_pixel_buffer_dma_draw_vline+0x3c0>
 8806974:	e0fffb17 	ldw	r3,-20(fp)
 8806978:	e13ffd17 	ldw	r4,-12(fp)
 880697c:	19000136 	bltu	r3,r4,8806984 <alt_up_pixel_buffer_dma_draw_vline+0x8c>
	{
		/* Drawing outside of the window, so don't bother. */
		return;
 8806980:	0000cd06 	br	8806cb8 <alt_up_pixel_buffer_dma_draw_vline+0x3c0>
	/* Clip the box and draw only within the confines of the screen. */
	if (t_y < 0)
	{
		t_y = 0;
	}
	if (b_y >= limit_y)
 8806984:	e0bffa17 	ldw	r2,-24(fp)
 8806988:	e0fffd17 	ldw	r3,-12(fp)
 880698c:	10c00336 	bltu	r2,r3,880699c <alt_up_pixel_buffer_dma_draw_vline+0xa4>
	{
		b_y = limit_y - 1;
 8806990:	e13ffd17 	ldw	r4,-12(fp)
 8806994:	213fffc4 	addi	r4,r4,-1
 8806998:	e13ffa15 	stw	r4,-24(fp)
	}

	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
 880699c:	e0800217 	ldw	r2,8(fp)
 88069a0:	10800058 	cmpnei	r2,r2,1
 88069a4:	1000041e 	bne	r2,zero,88069b8 <alt_up_pixel_buffer_dma_draw_vline+0xc0>
		addr = pixel_buffer->back_buffer_start_address;
 88069a8:	e0bff217 	ldw	r2,-56(fp)
 88069ac:	10800c17 	ldw	r2,48(r2)
 88069b0:	e0bfff15 	stw	r2,-4(fp)
 88069b4:	00000306 	br	88069c4 <alt_up_pixel_buffer_dma_draw_vline+0xcc>
	else
		addr = pixel_buffer->buffer_start_address;
 88069b8:	e0bff217 	ldw	r2,-56(fp)
 88069bc:	10800b17 	ldw	r2,44(r2)
 88069c0:	e0bfff15 	stw	r2,-4(fp)

	/* Draw the vertical line using one of the addressing modes. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
 88069c4:	e0bff217 	ldw	r2,-56(fp)
 88069c8:	10800d17 	ldw	r2,52(r2)
 88069cc:	1004c03a 	cmpne	r2,r2,zero
 88069d0:	1000571e 	bne	r2,zero,8806b30 <alt_up_pixel_buffer_dma_draw_vline+0x238>
		/* Draw a vertical line of a given color on the screen using the XY addressing mode. */
		register unsigned int y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
 88069d4:	e0bff217 	ldw	r2,-56(fp)
 88069d8:	10801317 	ldw	r2,76(r2)
 88069dc:	e0bff715 	stw	r2,-36(fp)
		addr = addr + (t_y << offset_y);
 88069e0:	e0bff717 	ldw	r2,-36(fp)
 88069e4:	e0fffb17 	ldw	r3,-20(fp)
 88069e8:	1884983a 	sll	r2,r3,r2
 88069ec:	e13fff17 	ldw	r4,-4(fp)
 88069f0:	2089883a 	add	r4,r4,r2
 88069f4:	e13fff15 	stw	r4,-4(fp)
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
 88069f8:	e0bff217 	ldw	r2,-56(fp)
 88069fc:	10800e17 	ldw	r2,56(r2)
 8806a00:	10800058 	cmpnei	r2,r2,1
 8806a04:	1000151e 	bne	r2,zero,8806a5c <alt_up_pixel_buffer_dma_draw_vline+0x164>
			for (y = t_y; y <= b_y; y++)
 8806a08:	e0bffb17 	ldw	r2,-20(fp)
 8806a0c:	e0bff815 	stw	r2,-32(fp)
 8806a10:	00000e06 	br	8806a4c <alt_up_pixel_buffer_dma_draw_vline+0x154>
			{
				IOWR_8DIRECT(addr, line_x, local_color);
 8806a14:	e0ffff17 	ldw	r3,-4(fp)
 8806a18:	e0bffc17 	ldw	r2,-16(fp)
 8806a1c:	1885883a 	add	r2,r3,r2
 8806a20:	e0fff917 	ldw	r3,-28(fp)
 8806a24:	10c00025 	stbio	r3,0(r2)
				addr = addr + (1 << offset_y);
 8806a28:	e0fff717 	ldw	r3,-36(fp)
 8806a2c:	00800044 	movi	r2,1
 8806a30:	10c4983a 	sll	r2,r2,r3
 8806a34:	e0ffff17 	ldw	r3,-4(fp)
 8806a38:	1887883a 	add	r3,r3,r2
 8806a3c:	e0ffff15 	stw	r3,-4(fp)
		addr = addr + (t_y << offset_y);
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
 8806a40:	e13ff817 	ldw	r4,-32(fp)
 8806a44:	21000044 	addi	r4,r4,1
 8806a48:	e13ff815 	stw	r4,-32(fp)
 8806a4c:	e0bffa17 	ldw	r2,-24(fp)
 8806a50:	e0fff817 	ldw	r3,-32(fp)
 8806a54:	10ffef2e 	bgeu	r2,r3,8806a14 <alt_up_pixel_buffer_dma_draw_vline+0x11c>
 8806a58:	00009706 	br	8806cb8 <alt_up_pixel_buffer_dma_draw_vline+0x3c0>
			{
				IOWR_8DIRECT(addr, line_x, local_color);
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
 8806a5c:	e0bff217 	ldw	r2,-56(fp)
 8806a60:	10800e17 	ldw	r2,56(r2)
 8806a64:	10800098 	cmpnei	r2,r2,2
 8806a68:	1000181e 	bne	r2,zero,8806acc <alt_up_pixel_buffer_dma_draw_vline+0x1d4>
			for (y = t_y; y <= b_y; y++)
 8806a6c:	e13ffb17 	ldw	r4,-20(fp)
 8806a70:	e13ff815 	stw	r4,-32(fp)
 8806a74:	00001106 	br	8806abc <alt_up_pixel_buffer_dma_draw_vline+0x1c4>
			{
				IOWR_16DIRECT(addr, line_x << 1, local_color);
 8806a78:	e0fffc17 	ldw	r3,-16(fp)
 8806a7c:	e0fffc17 	ldw	r3,-16(fp)
 8806a80:	18c5883a 	add	r2,r3,r3
 8806a84:	1007883a 	mov	r3,r2
 8806a88:	e0bfff17 	ldw	r2,-4(fp)
 8806a8c:	1885883a 	add	r2,r3,r2
 8806a90:	e0fff917 	ldw	r3,-28(fp)
 8806a94:	10c0002d 	sthio	r3,0(r2)
				addr = addr + (1 << offset_y);
 8806a98:	e0fff717 	ldw	r3,-36(fp)
 8806a9c:	00800044 	movi	r2,1
 8806aa0:	10c4983a 	sll	r2,r2,r3
 8806aa4:	e13fff17 	ldw	r4,-4(fp)
 8806aa8:	2089883a 	add	r4,r4,r2
 8806aac:	e13fff15 	stw	r4,-4(fp)
			{
				IOWR_8DIRECT(addr, line_x, local_color);
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
 8806ab0:	e0bff817 	ldw	r2,-32(fp)
 8806ab4:	10800044 	addi	r2,r2,1
 8806ab8:	e0bff815 	stw	r2,-32(fp)
 8806abc:	e0fffa17 	ldw	r3,-24(fp)
 8806ac0:	e13ff817 	ldw	r4,-32(fp)
 8806ac4:	193fec2e 	bgeu	r3,r4,8806a78 <alt_up_pixel_buffer_dma_draw_vline+0x180>
 8806ac8:	00007b06 	br	8806cb8 <alt_up_pixel_buffer_dma_draw_vline+0x3c0>
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
 8806acc:	e0bffb17 	ldw	r2,-20(fp)
 8806ad0:	e0bff815 	stw	r2,-32(fp)
 8806ad4:	00001206 	br	8806b20 <alt_up_pixel_buffer_dma_draw_vline+0x228>
			{
				IOWR_32DIRECT(addr, line_x << 2, local_color);
 8806ad8:	e0fffc17 	ldw	r3,-16(fp)
 8806adc:	e0fffc17 	ldw	r3,-16(fp)
 8806ae0:	18c5883a 	add	r2,r3,r3
 8806ae4:	1085883a 	add	r2,r2,r2
 8806ae8:	1007883a 	mov	r3,r2
 8806aec:	e0bfff17 	ldw	r2,-4(fp)
 8806af0:	1885883a 	add	r2,r3,r2
 8806af4:	e0fff917 	ldw	r3,-28(fp)
 8806af8:	10c00035 	stwio	r3,0(r2)
				addr = addr + (1 << offset_y);
 8806afc:	e0fff717 	ldw	r3,-36(fp)
 8806b00:	00800044 	movi	r2,1
 8806b04:	10c4983a 	sll	r2,r2,r3
 8806b08:	e13fff17 	ldw	r4,-4(fp)
 8806b0c:	2089883a 	add	r4,r4,r2
 8806b10:	e13fff15 	stw	r4,-4(fp)
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
 8806b14:	e0bff817 	ldw	r2,-32(fp)
 8806b18:	10800044 	addi	r2,r2,1
 8806b1c:	e0bff815 	stw	r2,-32(fp)
 8806b20:	e0fffa17 	ldw	r3,-24(fp)
 8806b24:	e13ff817 	ldw	r4,-32(fp)
 8806b28:	193feb2e 	bgeu	r3,r4,8806ad8 <alt_up_pixel_buffer_dma_draw_vline+0x1e0>
 8806b2c:	00006206 	br	8806cb8 <alt_up_pixel_buffer_dma_draw_vline+0x3c0>
	} else {
		/* Draw a vertical line of a given color on the screen using the linear addressing mode. */
		register unsigned int y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
 8806b30:	e0bff217 	ldw	r2,-56(fp)
 8806b34:	10800e17 	ldw	r2,56(r2)
 8806b38:	10800058 	cmpnei	r2,r2,1
 8806b3c:	1000191e 	bne	r2,zero,8806ba4 <alt_up_pixel_buffer_dma_draw_vline+0x2ac>
			addr = addr + t_y * limit_x;
 8806b40:	e0fffb17 	ldw	r3,-20(fp)
 8806b44:	e13ffe17 	ldw	r4,-8(fp)
 8806b48:	1905383a 	mul	r2,r3,r4
 8806b4c:	e0ffff17 	ldw	r3,-4(fp)
 8806b50:	1887883a 	add	r3,r3,r2
 8806b54:	e0ffff15 	stw	r3,-4(fp)
			for (y = t_y; y <= b_y; y++)
 8806b58:	e13ffb17 	ldw	r4,-20(fp)
 8806b5c:	e13ff615 	stw	r4,-40(fp)
 8806b60:	00000c06 	br	8806b94 <alt_up_pixel_buffer_dma_draw_vline+0x29c>
			{
				IOWR_8DIRECT(addr, line_x, local_color);
 8806b64:	e0ffff17 	ldw	r3,-4(fp)
 8806b68:	e0bffc17 	ldw	r2,-16(fp)
 8806b6c:	1885883a 	add	r2,r3,r2
 8806b70:	e0fff917 	ldw	r3,-28(fp)
 8806b74:	10c00025 	stbio	r3,0(r2)
				addr = addr + limit_x;
 8806b78:	e0bfff17 	ldw	r2,-4(fp)
 8806b7c:	e0fffe17 	ldw	r3,-8(fp)
 8806b80:	10c5883a 	add	r2,r2,r3
 8806b84:	e0bfff15 	stw	r2,-4(fp)
		register unsigned int y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
 8806b88:	e13ff617 	ldw	r4,-40(fp)
 8806b8c:	21000044 	addi	r4,r4,1
 8806b90:	e13ff615 	stw	r4,-40(fp)
 8806b94:	e0bffa17 	ldw	r2,-24(fp)
 8806b98:	e0fff617 	ldw	r3,-40(fp)
 8806b9c:	10fff12e 	bgeu	r2,r3,8806b64 <alt_up_pixel_buffer_dma_draw_vline+0x26c>
 8806ba0:	00004506 	br	8806cb8 <alt_up_pixel_buffer_dma_draw_vline+0x3c0>
			{
				IOWR_8DIRECT(addr, line_x, local_color);
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
 8806ba4:	e0bff217 	ldw	r2,-56(fp)
 8806ba8:	10800e17 	ldw	r2,56(r2)
 8806bac:	10800098 	cmpnei	r2,r2,2
 8806bb0:	1000201e 	bne	r2,zero,8806c34 <alt_up_pixel_buffer_dma_draw_vline+0x33c>
			limit_x = limit_x << 1;
 8806bb4:	e13ffe17 	ldw	r4,-8(fp)
 8806bb8:	e13ffe17 	ldw	r4,-8(fp)
 8806bbc:	2105883a 	add	r2,r4,r4
 8806bc0:	e0bffe15 	stw	r2,-8(fp)
			addr = addr + t_y * limit_x;
 8806bc4:	e0fffb17 	ldw	r3,-20(fp)
 8806bc8:	e13ffe17 	ldw	r4,-8(fp)
 8806bcc:	1905383a 	mul	r2,r3,r4
 8806bd0:	e0ffff17 	ldw	r3,-4(fp)
 8806bd4:	1887883a 	add	r3,r3,r2
 8806bd8:	e0ffff15 	stw	r3,-4(fp)
			for (y = t_y; y <= b_y; y++)
 8806bdc:	e13ffb17 	ldw	r4,-20(fp)
 8806be0:	e13ff615 	stw	r4,-40(fp)
 8806be4:	00000f06 	br	8806c24 <alt_up_pixel_buffer_dma_draw_vline+0x32c>
			{
				IOWR_16DIRECT(addr, line_x << 1, local_color);
 8806be8:	e0fffc17 	ldw	r3,-16(fp)
 8806bec:	e0fffc17 	ldw	r3,-16(fp)
 8806bf0:	18c5883a 	add	r2,r3,r3
 8806bf4:	1007883a 	mov	r3,r2
 8806bf8:	e0bfff17 	ldw	r2,-4(fp)
 8806bfc:	1885883a 	add	r2,r3,r2
 8806c00:	e0fff917 	ldw	r3,-28(fp)
 8806c04:	10c0002d 	sthio	r3,0(r2)
				addr = addr + limit_x;
 8806c08:	e13fff17 	ldw	r4,-4(fp)
 8806c0c:	e0bffe17 	ldw	r2,-8(fp)
 8806c10:	2089883a 	add	r4,r4,r2
 8806c14:	e13fff15 	stw	r4,-4(fp)
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
 8806c18:	e0fff617 	ldw	r3,-40(fp)
 8806c1c:	18c00044 	addi	r3,r3,1
 8806c20:	e0fff615 	stw	r3,-40(fp)
 8806c24:	e13ffa17 	ldw	r4,-24(fp)
 8806c28:	e0bff617 	ldw	r2,-40(fp)
 8806c2c:	20bfee2e 	bgeu	r4,r2,8806be8 <alt_up_pixel_buffer_dma_draw_vline+0x2f0>
 8806c30:	00002106 	br	8806cb8 <alt_up_pixel_buffer_dma_draw_vline+0x3c0>
				addr = addr + limit_x;
			}
		}
		else
		{
			limit_x = limit_x << 2;
 8806c34:	e0fffe17 	ldw	r3,-8(fp)
 8806c38:	e0fffe17 	ldw	r3,-8(fp)
 8806c3c:	18c5883a 	add	r2,r3,r3
 8806c40:	1085883a 	add	r2,r2,r2
 8806c44:	e0bffe15 	stw	r2,-8(fp)
			addr = addr + t_y * limit_x;
 8806c48:	e13ffb17 	ldw	r4,-20(fp)
 8806c4c:	e0fffe17 	ldw	r3,-8(fp)
 8806c50:	20c5383a 	mul	r2,r4,r3
 8806c54:	e13fff17 	ldw	r4,-4(fp)
 8806c58:	2089883a 	add	r4,r4,r2
 8806c5c:	e13fff15 	stw	r4,-4(fp)
			for (y = t_y; y <= b_y; y++)
 8806c60:	e0bffb17 	ldw	r2,-20(fp)
 8806c64:	e0bff615 	stw	r2,-40(fp)
 8806c68:	00001006 	br	8806cac <alt_up_pixel_buffer_dma_draw_vline+0x3b4>
			{
				IOWR_32DIRECT(addr, line_x << 2, local_color);
 8806c6c:	e0fffc17 	ldw	r3,-16(fp)
 8806c70:	e0fffc17 	ldw	r3,-16(fp)
 8806c74:	18c5883a 	add	r2,r3,r3
 8806c78:	1085883a 	add	r2,r2,r2
 8806c7c:	1007883a 	mov	r3,r2
 8806c80:	e0bfff17 	ldw	r2,-4(fp)
 8806c84:	1885883a 	add	r2,r3,r2
 8806c88:	e0fff917 	ldw	r3,-28(fp)
 8806c8c:	10c00035 	stwio	r3,0(r2)
				addr = addr + limit_x;
 8806c90:	e13fff17 	ldw	r4,-4(fp)
 8806c94:	e0bffe17 	ldw	r2,-8(fp)
 8806c98:	2089883a 	add	r4,r4,r2
 8806c9c:	e13fff15 	stw	r4,-4(fp)
		}
		else
		{
			limit_x = limit_x << 2;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
 8806ca0:	e0fff617 	ldw	r3,-40(fp)
 8806ca4:	18c00044 	addi	r3,r3,1
 8806ca8:	e0fff615 	stw	r3,-40(fp)
 8806cac:	e13ffa17 	ldw	r4,-24(fp)
 8806cb0:	e0bff617 	ldw	r2,-40(fp)
 8806cb4:	20bfed2e 	bgeu	r4,r2,8806c6c <alt_up_pixel_buffer_dma_draw_vline+0x374>
				IOWR_32DIRECT(addr, line_x << 2, local_color);
				addr = addr + limit_x;
			}
		}
	}
}
 8806cb8:	e037883a 	mov	sp,fp
 8806cbc:	df000017 	ldw	fp,0(sp)
 8806cc0:	dec00104 	addi	sp,sp,4
 8806cc4:	f800283a 	ret

08806cc8 <alt_up_pixel_buffer_dma_draw_rectangle>:

void alt_up_pixel_buffer_dma_draw_rectangle(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int y0, int x1, int y1, int color, int backbuffer)
{
 8806cc8:	defff804 	addi	sp,sp,-32
 8806ccc:	dfc00715 	stw	ra,28(sp)
 8806cd0:	df000615 	stw	fp,24(sp)
 8806cd4:	df000604 	addi	fp,sp,24
 8806cd8:	e13ffc15 	stw	r4,-16(fp)
 8806cdc:	e17ffd15 	stw	r5,-12(fp)
 8806ce0:	e1bffe15 	stw	r6,-8(fp)
 8806ce4:	e1ffff15 	stw	r7,-4(fp)
	alt_up_pixel_buffer_dma_draw_hline(pixel_buffer, x0, x1, y0, color, backbuffer);
 8806ce8:	e0800317 	ldw	r2,12(fp)
 8806cec:	d8800015 	stw	r2,0(sp)
 8806cf0:	e0800417 	ldw	r2,16(fp)
 8806cf4:	d8800115 	stw	r2,4(sp)
 8806cf8:	e13ffc17 	ldw	r4,-16(fp)
 8806cfc:	e17ffd17 	ldw	r5,-12(fp)
 8806d00:	e1bfff17 	ldw	r6,-4(fp)
 8806d04:	e1fffe17 	ldw	r7,-8(fp)
 8806d08:	88065a80 	call	88065a8 <alt_up_pixel_buffer_dma_draw_hline>
	alt_up_pixel_buffer_dma_draw_hline(pixel_buffer, x0, x1, y1, color, backbuffer);
 8806d0c:	e0800317 	ldw	r2,12(fp)
 8806d10:	d8800015 	stw	r2,0(sp)
 8806d14:	e0800417 	ldw	r2,16(fp)
 8806d18:	d8800115 	stw	r2,4(sp)
 8806d1c:	e13ffc17 	ldw	r4,-16(fp)
 8806d20:	e17ffd17 	ldw	r5,-12(fp)
 8806d24:	e1bfff17 	ldw	r6,-4(fp)
 8806d28:	e1c00217 	ldw	r7,8(fp)
 8806d2c:	88065a80 	call	88065a8 <alt_up_pixel_buffer_dma_draw_hline>
	alt_up_pixel_buffer_dma_draw_vline(pixel_buffer, x0, y0, y1, color, backbuffer);
 8806d30:	e0800317 	ldw	r2,12(fp)
 8806d34:	d8800015 	stw	r2,0(sp)
 8806d38:	e0800417 	ldw	r2,16(fp)
 8806d3c:	d8800115 	stw	r2,4(sp)
 8806d40:	e13ffc17 	ldw	r4,-16(fp)
 8806d44:	e17ffd17 	ldw	r5,-12(fp)
 8806d48:	e1bffe17 	ldw	r6,-8(fp)
 8806d4c:	e1c00217 	ldw	r7,8(fp)
 8806d50:	88068f80 	call	88068f8 <alt_up_pixel_buffer_dma_draw_vline>
	alt_up_pixel_buffer_dma_draw_vline(pixel_buffer, x1, y0, y1, color, backbuffer);
 8806d54:	e0800317 	ldw	r2,12(fp)
 8806d58:	d8800015 	stw	r2,0(sp)
 8806d5c:	e0800417 	ldw	r2,16(fp)
 8806d60:	d8800115 	stw	r2,4(sp)
 8806d64:	e13ffc17 	ldw	r4,-16(fp)
 8806d68:	e17fff17 	ldw	r5,-4(fp)
 8806d6c:	e1bffe17 	ldw	r6,-8(fp)
 8806d70:	e1c00217 	ldw	r7,8(fp)
 8806d74:	88068f80 	call	88068f8 <alt_up_pixel_buffer_dma_draw_vline>
}
 8806d78:	e037883a 	mov	sp,fp
 8806d7c:	dfc00117 	ldw	ra,4(sp)
 8806d80:	df000017 	ldw	fp,0(sp)
 8806d84:	dec00204 	addi	sp,sp,8
 8806d88:	f800283a 	ret

08806d8c <helper_plot_pixel>:

void helper_plot_pixel(register unsigned int buffer_start, register int line_size, register int x, register int y, register int color, register int mode)
/* This is a helper function that draws a pixel at a given location. Note that no boundary checks are made,
 * so drawing off-screen may cause unpredictable side effects. */
{
 8806d8c:	defffb04 	addi	sp,sp,-20
 8806d90:	df000415 	stw	fp,16(sp)
 8806d94:	df000404 	addi	fp,sp,16
 8806d98:	e13ffc15 	stw	r4,-16(fp)
 8806d9c:	e17ffd15 	stw	r5,-12(fp)
 8806da0:	e1bffe15 	stw	r6,-8(fp)
 8806da4:	e1ffff15 	stw	r7,-4(fp)
	if (mode == 0)
 8806da8:	e0c00217 	ldw	r3,8(fp)
 8806dac:	1804c03a 	cmpne	r2,r3,zero
 8806db0:	10000b1e 	bne	r2,zero,8806de0 <helper_plot_pixel+0x54>
		IOWR_8DIRECT(buffer_start, line_size*y+x, color);
 8806db4:	e13ffd17 	ldw	r4,-12(fp)
 8806db8:	e0ffff17 	ldw	r3,-4(fp)
 8806dbc:	20c5383a 	mul	r2,r4,r3
 8806dc0:	e13ffe17 	ldw	r4,-8(fp)
 8806dc4:	1105883a 	add	r2,r2,r4
 8806dc8:	1007883a 	mov	r3,r2
 8806dcc:	e0bffc17 	ldw	r2,-16(fp)
 8806dd0:	1885883a 	add	r2,r3,r2
 8806dd4:	e0c00117 	ldw	r3,4(fp)
 8806dd8:	10c00025 	stbio	r3,0(r2)
 8806ddc:	00001b06 	br	8806e4c <helper_plot_pixel+0xc0>
	else if (mode == 1)
 8806de0:	e1000217 	ldw	r4,8(fp)
 8806de4:	20800058 	cmpnei	r2,r4,1
 8806de8:	10000c1e 	bne	r2,zero,8806e1c <helper_plot_pixel+0x90>
		IOWR_16DIRECT(buffer_start, (line_size*y+x) << 1, color);
 8806dec:	e0fffd17 	ldw	r3,-12(fp)
 8806df0:	e13fff17 	ldw	r4,-4(fp)
 8806df4:	1905383a 	mul	r2,r3,r4
 8806df8:	e0fffe17 	ldw	r3,-8(fp)
 8806dfc:	10c5883a 	add	r2,r2,r3
 8806e00:	1085883a 	add	r2,r2,r2
 8806e04:	1007883a 	mov	r3,r2
 8806e08:	e0bffc17 	ldw	r2,-16(fp)
 8806e0c:	1885883a 	add	r2,r3,r2
 8806e10:	e1000117 	ldw	r4,4(fp)
 8806e14:	1100002d 	sthio	r4,0(r2)
 8806e18:	00000c06 	br	8806e4c <helper_plot_pixel+0xc0>
	else
		IOWR_32DIRECT(buffer_start, (line_size*y+x) << 2, color);
 8806e1c:	e0fffd17 	ldw	r3,-12(fp)
 8806e20:	e13fff17 	ldw	r4,-4(fp)
 8806e24:	1905383a 	mul	r2,r3,r4
 8806e28:	e0fffe17 	ldw	r3,-8(fp)
 8806e2c:	10c5883a 	add	r2,r2,r3
 8806e30:	1085883a 	add	r2,r2,r2
 8806e34:	1085883a 	add	r2,r2,r2
 8806e38:	1007883a 	mov	r3,r2
 8806e3c:	e0bffc17 	ldw	r2,-16(fp)
 8806e40:	1885883a 	add	r2,r3,r2
 8806e44:	e1000117 	ldw	r4,4(fp)
 8806e48:	11000035 	stwio	r4,0(r2)
}
 8806e4c:	e037883a 	mov	sp,fp
 8806e50:	df000017 	ldw	fp,0(sp)
 8806e54:	dec00104 	addi	sp,sp,4
 8806e58:	f800283a 	ret

08806e5c <alt_up_pixel_buffer_dma_draw_line>:

void alt_up_pixel_buffer_dma_draw_line(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int y0, int x1, int y1, int color, int backbuffer)
/* This function draws a line between points (x0, y0) and (x1, y1). The function does not check if it draws a pixel within screen boundaries.
 * users should ensure that the line is drawn within the screen boundaries. */
{
 8806e5c:	deffe404 	addi	sp,sp,-112
 8806e60:	dfc01b15 	stw	ra,108(sp)
 8806e64:	df001a15 	stw	fp,104(sp)
 8806e68:	df001a04 	addi	fp,sp,104
 8806e6c:	e13fe815 	stw	r4,-96(fp)
 8806e70:	e17fe915 	stw	r5,-92(fp)
 8806e74:	e1bfea15 	stw	r6,-88(fp)
 8806e78:	e1ffeb15 	stw	r7,-84(fp)
	register int x_0 = x0;
 8806e7c:	e0bfe917 	ldw	r2,-92(fp)
 8806e80:	e0bffa15 	stw	r2,-24(fp)
	register int y_0 = y0;
 8806e84:	e0ffea17 	ldw	r3,-88(fp)
 8806e88:	e0fff915 	stw	r3,-28(fp)
	register int x_1 = x1;
 8806e8c:	e13feb17 	ldw	r4,-84(fp)
 8806e90:	e13ff815 	stw	r4,-32(fp)
	register int y_1 = y1;
 8806e94:	e0800217 	ldw	r2,8(fp)
 8806e98:	e0bff715 	stw	r2,-36(fp)
	register char steep = (ABS(y_1 - y_0) > ABS(x_1 - x_0)) ? 1 : 0;
 8806e9c:	e0fff717 	ldw	r3,-36(fp)
 8806ea0:	e13ff917 	ldw	r4,-28(fp)
 8806ea4:	1905c83a 	sub	r2,r3,r4
 8806ea8:	e0bfff15 	stw	r2,-4(fp)
 8806eac:	e0ffff17 	ldw	r3,-4(fp)
 8806eb0:	1804403a 	cmpge	r2,r3,zero
 8806eb4:	1000031e 	bne	r2,zero,8806ec4 <alt_up_pixel_buffer_dma_draw_line+0x68>
 8806eb8:	e13fff17 	ldw	r4,-4(fp)
 8806ebc:	0109c83a 	sub	r4,zero,r4
 8806ec0:	e13fff15 	stw	r4,-4(fp)
 8806ec4:	e0fff817 	ldw	r3,-32(fp)
 8806ec8:	e13ffa17 	ldw	r4,-24(fp)
 8806ecc:	1905c83a 	sub	r2,r3,r4
 8806ed0:	e0bffe15 	stw	r2,-8(fp)
 8806ed4:	e0fffe17 	ldw	r3,-8(fp)
 8806ed8:	1804403a 	cmpge	r2,r3,zero
 8806edc:	1000031e 	bne	r2,zero,8806eec <alt_up_pixel_buffer_dma_draw_line+0x90>
 8806ee0:	e13ffe17 	ldw	r4,-8(fp)
 8806ee4:	0109c83a 	sub	r4,zero,r4
 8806ee8:	e13ffe15 	stw	r4,-8(fp)
 8806eec:	e0fffe17 	ldw	r3,-8(fp)
 8806ef0:	e13fff17 	ldw	r4,-4(fp)
 8806ef4:	1904803a 	cmplt	r2,r3,r4
 8806ef8:	e0bff605 	stb	r2,-40(fp)
	register int deltax, deltay, error, ystep, x, y;
	register int color_mode =	(pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) ? 0 :
								(pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) ? 1 : 2;
 8806efc:	e0bfe817 	ldw	r2,-96(fp)
 8806f00:	10800e17 	ldw	r2,56(r2)
 8806f04:	10800060 	cmpeqi	r2,r2,1
 8806f08:	10000c1e 	bne	r2,zero,8806f3c <alt_up_pixel_buffer_dma_draw_line+0xe0>
 8806f0c:	e0bfe817 	ldw	r2,-96(fp)
 8806f10:	10800e17 	ldw	r2,56(r2)
 8806f14:	10800098 	cmpnei	r2,r2,2
 8806f18:	1000031e 	bne	r2,zero,8806f28 <alt_up_pixel_buffer_dma_draw_line+0xcc>
 8806f1c:	00800044 	movi	r2,1
 8806f20:	e0bffc15 	stw	r2,-16(fp)
 8806f24:	00000206 	br	8806f30 <alt_up_pixel_buffer_dma_draw_line+0xd4>
 8806f28:	00c00084 	movi	r3,2
 8806f2c:	e0fffc15 	stw	r3,-16(fp)
 8806f30:	e13ffc17 	ldw	r4,-16(fp)
 8806f34:	e13ffd15 	stw	r4,-12(fp)
 8806f38:	00000106 	br	8806f40 <alt_up_pixel_buffer_dma_draw_line+0xe4>
 8806f3c:	e03ffd15 	stw	zero,-12(fp)
 8806f40:	e0bffd17 	ldw	r2,-12(fp)
 8806f44:	e0bfef15 	stw	r2,-68(fp)
	register int line_color = color;
 8806f48:	e0c00317 	ldw	r3,12(fp)
 8806f4c:	e0ffee15 	stw	r3,-72(fp)
	register unsigned int buffer_start;
	register int line_size = (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) ? (1 << (pixel_buffer->y_coord_offset-color_mode)) : pixel_buffer->x_resolution;
 8806f50:	e0bfe817 	ldw	r2,-96(fp)
 8806f54:	10800d17 	ldw	r2,52(r2)
 8806f58:	1004c03a 	cmpne	r2,r2,zero
 8806f5c:	1000091e 	bne	r2,zero,8806f84 <alt_up_pixel_buffer_dma_draw_line+0x128>
 8806f60:	e0bfe817 	ldw	r2,-96(fp)
 8806f64:	10c01317 	ldw	r3,76(r2)
 8806f68:	e0bfef17 	ldw	r2,-68(fp)
 8806f6c:	1885c83a 	sub	r2,r3,r2
 8806f70:	1007883a 	mov	r3,r2
 8806f74:	00800044 	movi	r2,1
 8806f78:	10c4983a 	sll	r2,r2,r3
 8806f7c:	e0bffb15 	stw	r2,-20(fp)
 8806f80:	00000306 	br	8806f90 <alt_up_pixel_buffer_dma_draw_line+0x134>
 8806f84:	e0bfe817 	ldw	r2,-96(fp)
 8806f88:	10800f17 	ldw	r2,60(r2)
 8806f8c:	e0bffb15 	stw	r2,-20(fp)
 8806f90:	e13ffb17 	ldw	r4,-20(fp)
 8806f94:	e13fec15 	stw	r4,-80(fp)

	if (backbuffer == 1)
 8806f98:	e0800417 	ldw	r2,16(fp)
 8806f9c:	10800058 	cmpnei	r2,r2,1
 8806fa0:	1000041e 	bne	r2,zero,8806fb4 <alt_up_pixel_buffer_dma_draw_line+0x158>
		buffer_start = pixel_buffer->back_buffer_start_address;
 8806fa4:	e0bfe817 	ldw	r2,-96(fp)
 8806fa8:	10800c17 	ldw	r2,48(r2)
 8806fac:	e0bfed15 	stw	r2,-76(fp)
 8806fb0:	00000306 	br	8806fc0 <alt_up_pixel_buffer_dma_draw_line+0x164>
	else
		buffer_start = pixel_buffer->buffer_start_address;
 8806fb4:	e0bfe817 	ldw	r2,-96(fp)
 8806fb8:	10800b17 	ldw	r2,44(r2)
 8806fbc:	e0bfed15 	stw	r2,-76(fp)

	/* Preprocessing inputs */
	if (steep > 0) {
 8806fc0:	e0fff603 	ldbu	r3,-40(fp)
 8806fc4:	18803fcc 	andi	r2,r3,255
 8806fc8:	1080201c 	xori	r2,r2,128
 8806fcc:	10bfe004 	addi	r2,r2,-128
 8806fd0:	10800050 	cmplti	r2,r2,1
 8806fd4:	10000c1e 	bne	r2,zero,8807008 <alt_up_pixel_buffer_dma_draw_line+0x1ac>
		// Swap x_0 and y_0
		error = x_0;
 8806fd8:	e13ffa17 	ldw	r4,-24(fp)
 8806fdc:	e13ff315 	stw	r4,-52(fp)
		x_0 = y_0;
 8806fe0:	e0bff917 	ldw	r2,-28(fp)
 8806fe4:	e0bffa15 	stw	r2,-24(fp)
		y_0 = error;
 8806fe8:	e0fff317 	ldw	r3,-52(fp)
 8806fec:	e0fff915 	stw	r3,-28(fp)
		// Swap x_1 and y_1
		error = x_1;
 8806ff0:	e13ff817 	ldw	r4,-32(fp)
 8806ff4:	e13ff315 	stw	r4,-52(fp)
		x_1 = y_1;
 8806ff8:	e0bff717 	ldw	r2,-36(fp)
 8806ffc:	e0bff815 	stw	r2,-32(fp)
		y_1 = error;
 8807000:	e0fff317 	ldw	r3,-52(fp)
 8807004:	e0fff715 	stw	r3,-36(fp)
	}
	if (x_0 > x_1) {
 8807008:	e13ff817 	ldw	r4,-32(fp)
 880700c:	e0bffa17 	ldw	r2,-24(fp)
 8807010:	20800c0e 	bge	r4,r2,8807044 <alt_up_pixel_buffer_dma_draw_line+0x1e8>
		// Swap x_0 and x_1
		error = x_0;
 8807014:	e0fffa17 	ldw	r3,-24(fp)
 8807018:	e0fff315 	stw	r3,-52(fp)
		x_0 = x_1;
 880701c:	e13ff817 	ldw	r4,-32(fp)
 8807020:	e13ffa15 	stw	r4,-24(fp)
		x_1 = error;
 8807024:	e0bff317 	ldw	r2,-52(fp)
 8807028:	e0bff815 	stw	r2,-32(fp)
		// Swap y_0 and y_1
		error = y_0;
 880702c:	e0fff917 	ldw	r3,-28(fp)
 8807030:	e0fff315 	stw	r3,-52(fp)
		y_0 = y_1;
 8807034:	e13ff717 	ldw	r4,-36(fp)
 8807038:	e13ff915 	stw	r4,-28(fp)
		y_1 = error;
 880703c:	e0bff317 	ldw	r2,-52(fp)
 8807040:	e0bff715 	stw	r2,-36(fp)
	}

	/* Setup local variables */
	deltax = x_1 - x_0;
 8807044:	e0fff817 	ldw	r3,-32(fp)
 8807048:	e13ffa17 	ldw	r4,-24(fp)
 880704c:	1907c83a 	sub	r3,r3,r4
 8807050:	e0fff515 	stw	r3,-44(fp)
	deltay = ABS(y_1 - y_0);
 8807054:	e0fff717 	ldw	r3,-36(fp)
 8807058:	e13ff917 	ldw	r4,-28(fp)
 880705c:	1905c83a 	sub	r2,r3,r4
 8807060:	e0bff415 	stw	r2,-48(fp)
 8807064:	e0fff417 	ldw	r3,-48(fp)
 8807068:	1804403a 	cmpge	r2,r3,zero
 880706c:	1000031e 	bne	r2,zero,880707c <alt_up_pixel_buffer_dma_draw_line+0x220>
 8807070:	e13ff417 	ldw	r4,-48(fp)
 8807074:	0109c83a 	sub	r4,zero,r4
 8807078:	e13ff415 	stw	r4,-48(fp)
	error = -(deltax / 2); 
 880707c:	e0fff517 	ldw	r3,-44(fp)
 8807080:	1804d7fa 	srli	r2,r3,31
 8807084:	e13ff517 	ldw	r4,-44(fp)
 8807088:	1105883a 	add	r2,r2,r4
 880708c:	1005d07a 	srai	r2,r2,1
 8807090:	0085c83a 	sub	r2,zero,r2
 8807094:	e0bff315 	stw	r2,-52(fp)
	y = y_0;
 8807098:	e0bff917 	ldw	r2,-28(fp)
 880709c:	e0bff015 	stw	r2,-64(fp)
	if (y_0 < y_1)
 88070a0:	e0fff917 	ldw	r3,-28(fp)
 88070a4:	e13ff717 	ldw	r4,-36(fp)
 88070a8:	1900030e 	bge	r3,r4,88070b8 <alt_up_pixel_buffer_dma_draw_line+0x25c>
		ystep = 1;
 88070ac:	00800044 	movi	r2,1
 88070b0:	e0bff215 	stw	r2,-56(fp)
 88070b4:	00000206 	br	88070c0 <alt_up_pixel_buffer_dma_draw_line+0x264>
	else
		ystep = -1;
 88070b8:	00ffffc4 	movi	r3,-1
 88070bc:	e0fff215 	stw	r3,-56(fp)

	/* Draw a line - either go along the x axis (steep = 0) or along the y axis (steep = 1). The code is replicated to
	 * compile well on low optimization levels. */
	if (steep == 1)
 88070c0:	e13ff603 	ldbu	r4,-40(fp)
 88070c4:	20803fcc 	andi	r2,r4,255
 88070c8:	1080201c 	xori	r2,r2,128
 88070cc:	10bfe004 	addi	r2,r2,-128
 88070d0:	10800058 	cmpnei	r2,r2,1
 88070d4:	1000221e 	bne	r2,zero,8807160 <alt_up_pixel_buffer_dma_draw_line+0x304>
	{
		for (x=x_0; x <= x_1; x++) {
 88070d8:	e0bffa17 	ldw	r2,-24(fp)
 88070dc:	e0bff115 	stw	r2,-60(fp)
 88070e0:	00001b06 	br	8807150 <alt_up_pixel_buffer_dma_draw_line+0x2f4>
			helper_plot_pixel(buffer_start, line_size, y, x, line_color, color_mode);
 88070e4:	e0ffee17 	ldw	r3,-72(fp)
 88070e8:	d8c00015 	stw	r3,0(sp)
 88070ec:	e13fef17 	ldw	r4,-68(fp)
 88070f0:	d9000115 	stw	r4,4(sp)
 88070f4:	e13fed17 	ldw	r4,-76(fp)
 88070f8:	e17fec17 	ldw	r5,-80(fp)
 88070fc:	e1bff017 	ldw	r6,-64(fp)
 8807100:	e1fff117 	ldw	r7,-60(fp)
 8807104:	8806d8c0 	call	8806d8c <helper_plot_pixel>
			error = error + deltay;
 8807108:	e0bff317 	ldw	r2,-52(fp)
 880710c:	e0fff417 	ldw	r3,-48(fp)
 8807110:	10c5883a 	add	r2,r2,r3
 8807114:	e0bff315 	stw	r2,-52(fp)
			if (error > 0) {
 8807118:	e13ff317 	ldw	r4,-52(fp)
 880711c:	20800050 	cmplti	r2,r4,1
 8807120:	1000081e 	bne	r2,zero,8807144 <alt_up_pixel_buffer_dma_draw_line+0x2e8>
				y = y + ystep;
 8807124:	e0bff017 	ldw	r2,-64(fp)
 8807128:	e0fff217 	ldw	r3,-56(fp)
 880712c:	10c5883a 	add	r2,r2,r3
 8807130:	e0bff015 	stw	r2,-64(fp)
				error = error - deltax;
 8807134:	e13ff317 	ldw	r4,-52(fp)
 8807138:	e0bff517 	ldw	r2,-44(fp)
 880713c:	2089c83a 	sub	r4,r4,r2
 8807140:	e13ff315 	stw	r4,-52(fp)

	/* Draw a line - either go along the x axis (steep = 0) or along the y axis (steep = 1). The code is replicated to
	 * compile well on low optimization levels. */
	if (steep == 1)
	{
		for (x=x_0; x <= x_1; x++) {
 8807144:	e0fff117 	ldw	r3,-60(fp)
 8807148:	18c00044 	addi	r3,r3,1
 880714c:	e0fff115 	stw	r3,-60(fp)
 8807150:	e13ff817 	ldw	r4,-32(fp)
 8807154:	e0bff117 	ldw	r2,-60(fp)
 8807158:	20bfe20e 	bge	r4,r2,88070e4 <alt_up_pixel_buffer_dma_draw_line+0x288>
 880715c:	00002106 	br	88071e4 <alt_up_pixel_buffer_dma_draw_line+0x388>
			}
		}
	}
	else
	{
		for (x=x_0; x <= x_1; x++) {
 8807160:	e0fffa17 	ldw	r3,-24(fp)
 8807164:	e0fff115 	stw	r3,-60(fp)
 8807168:	00001b06 	br	88071d8 <alt_up_pixel_buffer_dma_draw_line+0x37c>
			helper_plot_pixel(buffer_start, line_size, x, y, line_color, color_mode);
 880716c:	e13fee17 	ldw	r4,-72(fp)
 8807170:	d9000015 	stw	r4,0(sp)
 8807174:	e0bfef17 	ldw	r2,-68(fp)
 8807178:	d8800115 	stw	r2,4(sp)
 880717c:	e13fed17 	ldw	r4,-76(fp)
 8807180:	e17fec17 	ldw	r5,-80(fp)
 8807184:	e1bff117 	ldw	r6,-60(fp)
 8807188:	e1fff017 	ldw	r7,-64(fp)
 880718c:	8806d8c0 	call	8806d8c <helper_plot_pixel>
			error = error + deltay;
 8807190:	e0fff317 	ldw	r3,-52(fp)
 8807194:	e13ff417 	ldw	r4,-48(fp)
 8807198:	1907883a 	add	r3,r3,r4
 880719c:	e0fff315 	stw	r3,-52(fp)
			if (error > 0) {
 88071a0:	e0fff317 	ldw	r3,-52(fp)
 88071a4:	18800050 	cmplti	r2,r3,1
 88071a8:	1000081e 	bne	r2,zero,88071cc <alt_up_pixel_buffer_dma_draw_line+0x370>
				y = y + ystep;
 88071ac:	e13ff017 	ldw	r4,-64(fp)
 88071b0:	e0bff217 	ldw	r2,-56(fp)
 88071b4:	2089883a 	add	r4,r4,r2
 88071b8:	e13ff015 	stw	r4,-64(fp)
				error = error - deltax;
 88071bc:	e0fff317 	ldw	r3,-52(fp)
 88071c0:	e13ff517 	ldw	r4,-44(fp)
 88071c4:	1907c83a 	sub	r3,r3,r4
 88071c8:	e0fff315 	stw	r3,-52(fp)
			}
		}
	}
	else
	{
		for (x=x_0; x <= x_1; x++) {
 88071cc:	e0bff117 	ldw	r2,-60(fp)
 88071d0:	10800044 	addi	r2,r2,1
 88071d4:	e0bff115 	stw	r2,-60(fp)
 88071d8:	e0fff817 	ldw	r3,-32(fp)
 88071dc:	e13ff117 	ldw	r4,-60(fp)
 88071e0:	193fe20e 	bge	r3,r4,880716c <alt_up_pixel_buffer_dma_draw_line+0x310>
				y = y + ystep;
				error = error - deltax;
			}
		}
	}
}
 88071e4:	e037883a 	mov	sp,fp
 88071e8:	dfc00117 	ldw	ra,4(sp)
 88071ec:	df000017 	ldw	fp,0(sp)
 88071f0:	dec00204 	addi	sp,sp,8
 88071f4:	f800283a 	ret

088071f8 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
 88071f8:	defff404 	addi	sp,sp,-48
 88071fc:	df000b15 	stw	fp,44(sp)
 8807200:	df000b04 	addi	fp,sp,44
 8807204:	e13ffb15 	stw	r4,-20(fp)
 8807208:	e17ffc15 	stw	r5,-16(fp)
 880720c:	e1bffd15 	stw	r6,-12(fp)
 8807210:	e1fffe15 	stw	r7,-8(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
 8807214:	e03ff915 	stw	zero,-28(fp)
 8807218:	00822074 	movhi	r2,2177
 880721c:	10aead04 	addi	r2,r2,-17740
 8807220:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
 8807224:	1005003a 	cmpeq	r2,r2,zero
 8807228:	1000411e 	bne	r2,zero,8807330 <alt_alarm_start+0x138>
  {
    if (alarm)
 880722c:	e0bffb17 	ldw	r2,-20(fp)
 8807230:	1005003a 	cmpeq	r2,r2,zero
 8807234:	10003b1e 	bne	r2,zero,8807324 <alt_alarm_start+0x12c>
    {
      alarm->callback = callback;
 8807238:	e0fffb17 	ldw	r3,-20(fp)
 880723c:	e0bffd17 	ldw	r2,-12(fp)
 8807240:	18800315 	stw	r2,12(r3)
      alarm->context  = context;
 8807244:	e0fffb17 	ldw	r3,-20(fp)
 8807248:	e0bffe17 	ldw	r2,-8(fp)
 880724c:	18800515 	stw	r2,20(r3)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8807250:	0005303a 	rdctl	r2,status
 8807254:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8807258:	e0fff817 	ldw	r3,-32(fp)
 880725c:	00bfff84 	movi	r2,-2
 8807260:	1884703a 	and	r2,r3,r2
 8807264:	1001703a 	wrctl	status,r2
  
  return context;
 8807268:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
 880726c:	e0bffa15 	stw	r2,-24(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 8807270:	00822074 	movhi	r2,2177
 8807274:	10aeae04 	addi	r2,r2,-17736
 8807278:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
 880727c:	e0bff915 	stw	r2,-28(fp)
      
      alarm->time = nticks + current_nticks + 1; 
 8807280:	e0fffc17 	ldw	r3,-16(fp)
 8807284:	e0bff917 	ldw	r2,-28(fp)
 8807288:	1885883a 	add	r2,r3,r2
 880728c:	10c00044 	addi	r3,r2,1
 8807290:	e0bffb17 	ldw	r2,-20(fp)
 8807294:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
 8807298:	e0bffb17 	ldw	r2,-20(fp)
 880729c:	10c00217 	ldw	r3,8(r2)
 88072a0:	e0bff917 	ldw	r2,-28(fp)
 88072a4:	1880042e 	bgeu	r3,r2,88072b8 <alt_alarm_start+0xc0>
      {
        alarm->rollover = 1;
 88072a8:	e0fffb17 	ldw	r3,-20(fp)
 88072ac:	00800044 	movi	r2,1
 88072b0:	18800405 	stb	r2,16(r3)
 88072b4:	00000206 	br	88072c0 <alt_alarm_start+0xc8>
      }
      else
      {
        alarm->rollover = 0;
 88072b8:	e0bffb17 	ldw	r2,-20(fp)
 88072bc:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
 88072c0:	e0fffb17 	ldw	r3,-20(fp)
 88072c4:	00822074 	movhi	r2,2177
 88072c8:	10a8b904 	addi	r2,r2,-23836
 88072cc:	e0bff615 	stw	r2,-40(fp)
 88072d0:	e0fff715 	stw	r3,-36(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 88072d4:	e0fff717 	ldw	r3,-36(fp)
 88072d8:	e0bff617 	ldw	r2,-40(fp)
 88072dc:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
 88072e0:	e0bff617 	ldw	r2,-40(fp)
 88072e4:	10c00017 	ldw	r3,0(r2)
 88072e8:	e0bff717 	ldw	r2,-36(fp)
 88072ec:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 88072f0:	e0bff617 	ldw	r2,-40(fp)
 88072f4:	10c00017 	ldw	r3,0(r2)
 88072f8:	e0bff717 	ldw	r2,-36(fp)
 88072fc:	18800115 	stw	r2,4(r3)
  list->next           = entry;
 8807300:	e0fff617 	ldw	r3,-40(fp)
 8807304:	e0bff717 	ldw	r2,-36(fp)
 8807308:	18800015 	stw	r2,0(r3)
 880730c:	e0bffa17 	ldw	r2,-24(fp)
 8807310:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8807314:	e0bff517 	ldw	r2,-44(fp)
 8807318:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
 880731c:	e03fff15 	stw	zero,-4(fp)
 8807320:	00000506 	br	8807338 <alt_alarm_start+0x140>
    }
    else
    {
      return -EINVAL;
 8807324:	00bffa84 	movi	r2,-22
 8807328:	e0bfff15 	stw	r2,-4(fp)
 880732c:	00000206 	br	8807338 <alt_alarm_start+0x140>
    }
  }
  else
  {
    return -ENOTSUP;
 8807330:	00bfde84 	movi	r2,-134
 8807334:	e0bfff15 	stw	r2,-4(fp)
 8807338:	e0bfff17 	ldw	r2,-4(fp)
  }
}
 880733c:	e037883a 	mov	sp,fp
 8807340:	df000017 	ldw	fp,0(sp)
 8807344:	dec00104 	addi	sp,sp,4
 8807348:	f800283a 	ret

0880734c <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 880734c:	defff804 	addi	sp,sp,-32
 8807350:	dfc00715 	stw	ra,28(sp)
 8807354:	df000615 	stw	fp,24(sp)
 8807358:	df000604 	addi	fp,sp,24
 880735c:	e13ffc15 	stw	r4,-16(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 8807360:	e0bffc17 	ldw	r2,-16(fp)
 8807364:	1004803a 	cmplt	r2,r2,zero
 8807368:	1000081e 	bne	r2,zero,880738c <close+0x40>
 880736c:	e0bffc17 	ldw	r2,-16(fp)
 8807370:	10800324 	muli	r2,r2,12
 8807374:	1007883a 	mov	r3,r2
 8807378:	00822074 	movhi	r2,2177
 880737c:	10a84804 	addi	r2,r2,-24288
 8807380:	1887883a 	add	r3,r3,r2
 8807384:	e0ffff15 	stw	r3,-4(fp)
 8807388:	00000106 	br	8807390 <close+0x44>
 880738c:	e03fff15 	stw	zero,-4(fp)
 8807390:	e0bfff17 	ldw	r2,-4(fp)
 8807394:	e0bffb15 	stw	r2,-20(fp)

  if (fd)
 8807398:	e0bffb17 	ldw	r2,-20(fp)
 880739c:	1005003a 	cmpeq	r2,r2,zero
 88073a0:	10001d1e 	bne	r2,zero,8807418 <close+0xcc>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 88073a4:	e0bffb17 	ldw	r2,-20(fp)
 88073a8:	10800017 	ldw	r2,0(r2)
 88073ac:	10800417 	ldw	r2,16(r2)
 88073b0:	1005003a 	cmpeq	r2,r2,zero
 88073b4:	1000071e 	bne	r2,zero,88073d4 <close+0x88>
 88073b8:	e0bffb17 	ldw	r2,-20(fp)
 88073bc:	10800017 	ldw	r2,0(r2)
 88073c0:	10800417 	ldw	r2,16(r2)
 88073c4:	e13ffb17 	ldw	r4,-20(fp)
 88073c8:	103ee83a 	callr	r2
 88073cc:	e0bffe15 	stw	r2,-8(fp)
 88073d0:	00000106 	br	88073d8 <close+0x8c>
 88073d4:	e03ffe15 	stw	zero,-8(fp)
 88073d8:	e0bffe17 	ldw	r2,-8(fp)
 88073dc:	e0bffa15 	stw	r2,-24(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 88073e0:	e13ffc17 	ldw	r4,-16(fp)
 88073e4:	8807e840 	call	8807e84 <alt_release_fd>
    if (rval < 0)
 88073e8:	e0bffa17 	ldw	r2,-24(fp)
 88073ec:	1004403a 	cmpge	r2,r2,zero
 88073f0:	1000071e 	bne	r2,zero,8807410 <close+0xc4>
    {
      ALT_ERRNO = -rval;
 88073f4:	88074480 	call	8807448 <alt_get_errno>
 88073f8:	e0fffa17 	ldw	r3,-24(fp)
 88073fc:	00c7c83a 	sub	r3,zero,r3
 8807400:	10c00015 	stw	r3,0(r2)
      return -1;
 8807404:	00bfffc4 	movi	r2,-1
 8807408:	e0bffd15 	stw	r2,-12(fp)
 880740c:	00000806 	br	8807430 <close+0xe4>
    }
    return 0;
 8807410:	e03ffd15 	stw	zero,-12(fp)
 8807414:	00000606 	br	8807430 <close+0xe4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 8807418:	88074480 	call	8807448 <alt_get_errno>
 880741c:	1007883a 	mov	r3,r2
 8807420:	00801444 	movi	r2,81
 8807424:	18800015 	stw	r2,0(r3)
    return -1;
 8807428:	00bfffc4 	movi	r2,-1
 880742c:	e0bffd15 	stw	r2,-12(fp)
 8807430:	e0bffd17 	ldw	r2,-12(fp)
  }
}
 8807434:	e037883a 	mov	sp,fp
 8807438:	dfc00117 	ldw	ra,4(sp)
 880743c:	df000017 	ldw	fp,0(sp)
 8807440:	dec00204 	addi	sp,sp,8
 8807444:	f800283a 	ret

08807448 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 8807448:	defffd04 	addi	sp,sp,-12
 880744c:	dfc00215 	stw	ra,8(sp)
 8807450:	df000115 	stw	fp,4(sp)
 8807454:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 8807458:	00822074 	movhi	r2,2177
 880745c:	10a8b704 	addi	r2,r2,-23844
 8807460:	10800017 	ldw	r2,0(r2)
 8807464:	1005003a 	cmpeq	r2,r2,zero
 8807468:	1000061e 	bne	r2,zero,8807484 <alt_get_errno+0x3c>
 880746c:	00822074 	movhi	r2,2177
 8807470:	10a8b704 	addi	r2,r2,-23844
 8807474:	10800017 	ldw	r2,0(r2)
 8807478:	103ee83a 	callr	r2
 880747c:	e0bfff15 	stw	r2,-4(fp)
 8807480:	00000306 	br	8807490 <alt_get_errno+0x48>
 8807484:	00822074 	movhi	r2,2177
 8807488:	10aeaf04 	addi	r2,r2,-17732
 880748c:	e0bfff15 	stw	r2,-4(fp)
 8807490:	e0bfff17 	ldw	r2,-4(fp)
}
 8807494:	e037883a 	mov	sp,fp
 8807498:	dfc00117 	ldw	ra,4(sp)
 880749c:	df000017 	ldw	fp,0(sp)
 88074a0:	dec00204 	addi	sp,sp,8
 88074a4:	f800283a 	ret

088074a8 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 88074a8:	defffe04 	addi	sp,sp,-8
 88074ac:	df000115 	stw	fp,4(sp)
 88074b0:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
 88074b4:	e03fff15 	stw	zero,-4(fp)
 88074b8:	00000506 	br	88074d0 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
 88074bc:	e0bfff17 	ldw	r2,-4(fp)
 88074c0:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
 88074c4:	e0bfff17 	ldw	r2,-4(fp)
 88074c8:	10800804 	addi	r2,r2,32
 88074cc:	e0bfff15 	stw	r2,-4(fp)
 88074d0:	e0bfff17 	ldw	r2,-4(fp)
 88074d4:	10810030 	cmpltui	r2,r2,1024
 88074d8:	103ff81e 	bne	r2,zero,88074bc <alt_dcache_flush_all+0x14>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 88074dc:	e037883a 	mov	sp,fp
 88074e0:	df000017 	ldw	fp,0(sp)
 88074e4:	dec00104 	addi	sp,sp,4
 88074e8:	f800283a 	ret

088074ec <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 88074ec:	defffc04 	addi	sp,sp,-16
 88074f0:	df000315 	stw	fp,12(sp)
 88074f4:	df000304 	addi	fp,sp,12
 88074f8:	e13ffd15 	stw	r4,-12(fp)
 88074fc:	e17ffe15 	stw	r5,-8(fp)
 8807500:	e1bfff15 	stw	r6,-4(fp)
  return len;
 8807504:	e0bfff17 	ldw	r2,-4(fp)
}
 8807508:	e037883a 	mov	sp,fp
 880750c:	df000017 	ldw	fp,0(sp)
 8807510:	dec00104 	addi	sp,sp,4
 8807514:	f800283a 	ret

08807518 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
 8807518:	defff904 	addi	sp,sp,-28
 880751c:	dfc00615 	stw	ra,24(sp)
 8807520:	df000515 	stw	fp,20(sp)
 8807524:	df000504 	addi	fp,sp,20
 8807528:	e13ffd15 	stw	r4,-12(fp)
 880752c:	e17ffe15 	stw	r5,-8(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
 8807530:	e0bffd17 	ldw	r2,-12(fp)
 8807534:	1005003a 	cmpeq	r2,r2,zero
 8807538:	1000041e 	bne	r2,zero,880754c <alt_dev_llist_insert+0x34>
 880753c:	e0bffd17 	ldw	r2,-12(fp)
 8807540:	10800217 	ldw	r2,8(r2)
 8807544:	1004c03a 	cmpne	r2,r2,zero
 8807548:	1000071e 	bne	r2,zero,8807568 <alt_dev_llist_insert+0x50>
  {
    ALT_ERRNO = EINVAL;
 880754c:	88075cc0 	call	88075cc <alt_get_errno>
 8807550:	1007883a 	mov	r3,r2
 8807554:	00800584 	movi	r2,22
 8807558:	18800015 	stw	r2,0(r3)
    return -EINVAL;
 880755c:	00bffa84 	movi	r2,-22
 8807560:	e0bfff15 	stw	r2,-4(fp)
 8807564:	00001306 	br	88075b4 <alt_dev_llist_insert+0x9c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
 8807568:	e0fffd17 	ldw	r3,-12(fp)
 880756c:	e0bffe17 	ldw	r2,-8(fp)
 8807570:	e0bffb15 	stw	r2,-20(fp)
 8807574:	e0fffc15 	stw	r3,-16(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 8807578:	e0fffc17 	ldw	r3,-16(fp)
 880757c:	e0bffb17 	ldw	r2,-20(fp)
 8807580:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
 8807584:	e0bffb17 	ldw	r2,-20(fp)
 8807588:	10c00017 	ldw	r3,0(r2)
 880758c:	e0bffc17 	ldw	r2,-16(fp)
 8807590:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 8807594:	e0bffb17 	ldw	r2,-20(fp)
 8807598:	10c00017 	ldw	r3,0(r2)
 880759c:	e0bffc17 	ldw	r2,-16(fp)
 88075a0:	18800115 	stw	r2,4(r3)
  list->next           = entry;
 88075a4:	e0fffb17 	ldw	r3,-20(fp)
 88075a8:	e0bffc17 	ldw	r2,-16(fp)
 88075ac:	18800015 	stw	r2,0(r3)

  return 0;  
 88075b0:	e03fff15 	stw	zero,-4(fp)
 88075b4:	e0bfff17 	ldw	r2,-4(fp)
}
 88075b8:	e037883a 	mov	sp,fp
 88075bc:	dfc00117 	ldw	ra,4(sp)
 88075c0:	df000017 	ldw	fp,0(sp)
 88075c4:	dec00204 	addi	sp,sp,8
 88075c8:	f800283a 	ret

088075cc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 88075cc:	defffd04 	addi	sp,sp,-12
 88075d0:	dfc00215 	stw	ra,8(sp)
 88075d4:	df000115 	stw	fp,4(sp)
 88075d8:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 88075dc:	00822074 	movhi	r2,2177
 88075e0:	10a8b704 	addi	r2,r2,-23844
 88075e4:	10800017 	ldw	r2,0(r2)
 88075e8:	1005003a 	cmpeq	r2,r2,zero
 88075ec:	1000061e 	bne	r2,zero,8807608 <alt_get_errno+0x3c>
 88075f0:	00822074 	movhi	r2,2177
 88075f4:	10a8b704 	addi	r2,r2,-23844
 88075f8:	10800017 	ldw	r2,0(r2)
 88075fc:	103ee83a 	callr	r2
 8807600:	e0bfff15 	stw	r2,-4(fp)
 8807604:	00000306 	br	8807614 <alt_get_errno+0x48>
 8807608:	00822074 	movhi	r2,2177
 880760c:	10aeaf04 	addi	r2,r2,-17732
 8807610:	e0bfff15 	stw	r2,-4(fp)
 8807614:	e0bfff17 	ldw	r2,-4(fp)
}
 8807618:	e037883a 	mov	sp,fp
 880761c:	dfc00117 	ldw	ra,4(sp)
 8807620:	df000017 	ldw	fp,0(sp)
 8807624:	dec00204 	addi	sp,sp,8
 8807628:	f800283a 	ret

0880762c <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
 880762c:	defffd04 	addi	sp,sp,-12
 8807630:	dfc00215 	stw	ra,8(sp)
 8807634:	df000115 	stw	fp,4(sp)
 8807638:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 880763c:	00bfff04 	movi	r2,-4
 8807640:	00c22074 	movhi	r3,2177
 8807644:	18e20c04 	addi	r3,r3,-30672
 8807648:	1885883a 	add	r2,r3,r2
 880764c:	e0bfff15 	stw	r2,-4(fp)
 8807650:	00000606 	br	880766c <_do_ctors+0x40>
        (*ctor) (); 
 8807654:	e0bfff17 	ldw	r2,-4(fp)
 8807658:	10800017 	ldw	r2,0(r2)
 880765c:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 8807660:	e0bfff17 	ldw	r2,-4(fp)
 8807664:	10bfff04 	addi	r2,r2,-4
 8807668:	e0bfff15 	stw	r2,-4(fp)
 880766c:	e0ffff17 	ldw	r3,-4(fp)
 8807670:	00822074 	movhi	r2,2177
 8807674:	10a20b04 	addi	r2,r2,-30676
 8807678:	18bff62e 	bgeu	r3,r2,8807654 <_do_ctors+0x28>
        (*ctor) (); 
}
 880767c:	e037883a 	mov	sp,fp
 8807680:	dfc00117 	ldw	ra,4(sp)
 8807684:	df000017 	ldw	fp,0(sp)
 8807688:	dec00204 	addi	sp,sp,8
 880768c:	f800283a 	ret

08807690 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
 8807690:	defffd04 	addi	sp,sp,-12
 8807694:	dfc00215 	stw	ra,8(sp)
 8807698:	df000115 	stw	fp,4(sp)
 880769c:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 88076a0:	00bfff04 	movi	r2,-4
 88076a4:	00c22074 	movhi	r3,2177
 88076a8:	18e20c04 	addi	r3,r3,-30672
 88076ac:	1885883a 	add	r2,r3,r2
 88076b0:	e0bfff15 	stw	r2,-4(fp)
 88076b4:	00000606 	br	88076d0 <_do_dtors+0x40>
        (*dtor) (); 
 88076b8:	e0bfff17 	ldw	r2,-4(fp)
 88076bc:	10800017 	ldw	r2,0(r2)
 88076c0:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 88076c4:	e0bfff17 	ldw	r2,-4(fp)
 88076c8:	10bfff04 	addi	r2,r2,-4
 88076cc:	e0bfff15 	stw	r2,-4(fp)
 88076d0:	e0ffff17 	ldw	r3,-4(fp)
 88076d4:	00822074 	movhi	r2,2177
 88076d8:	10a20c04 	addi	r2,r2,-30672
 88076dc:	18bff62e 	bgeu	r3,r2,88076b8 <_do_dtors+0x28>
        (*dtor) (); 
}
 88076e0:	e037883a 	mov	sp,fp
 88076e4:	dfc00117 	ldw	ra,4(sp)
 88076e8:	df000017 	ldw	fp,0(sp)
 88076ec:	dec00204 	addi	sp,sp,8
 88076f0:	f800283a 	ret

088076f4 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 88076f4:	defff904 	addi	sp,sp,-28
 88076f8:	dfc00615 	stw	ra,24(sp)
 88076fc:	df000515 	stw	fp,20(sp)
 8807700:	df000504 	addi	fp,sp,20
 8807704:	e13ffd15 	stw	r4,-12(fp)
 8807708:	e17ffe15 	stw	r5,-8(fp)
  alt_dev* next = (alt_dev*) llist->next;
 880770c:	e0bffe17 	ldw	r2,-8(fp)
 8807710:	10800017 	ldw	r2,0(r2)
 8807714:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
 8807718:	e13ffd17 	ldw	r4,-12(fp)
 880771c:	88084700 	call	8808470 <strlen>
 8807720:	10800044 	addi	r2,r2,1
 8807724:	e0bffb15 	stw	r2,-20(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 8807728:	00000d06 	br	8807760 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 880772c:	e0bffc17 	ldw	r2,-16(fp)
 8807730:	11000217 	ldw	r4,8(r2)
 8807734:	e1bffb17 	ldw	r6,-20(fp)
 8807738:	e17ffd17 	ldw	r5,-12(fp)
 880773c:	880835c0 	call	880835c <memcmp>
 8807740:	1004c03a 	cmpne	r2,r2,zero
 8807744:	1000031e 	bne	r2,zero,8807754 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
 8807748:	e0bffc17 	ldw	r2,-16(fp)
 880774c:	e0bfff15 	stw	r2,-4(fp)
 8807750:	00000706 	br	8807770 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
 8807754:	e0bffc17 	ldw	r2,-16(fp)
 8807758:	10800017 	ldw	r2,0(r2)
 880775c:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 8807760:	e0fffe17 	ldw	r3,-8(fp)
 8807764:	e0bffc17 	ldw	r2,-16(fp)
 8807768:	10fff01e 	bne	r2,r3,880772c <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
 880776c:	e03fff15 	stw	zero,-4(fp)
 8807770:	e0bfff17 	ldw	r2,-4(fp)
}
 8807774:	e037883a 	mov	sp,fp
 8807778:	dfc00117 	ldw	ra,4(sp)
 880777c:	df000017 	ldw	fp,0(sp)
 8807780:	dec00204 	addi	sp,sp,8
 8807784:	f800283a 	ret

08807788 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 8807788:	defffe04 	addi	sp,sp,-8
 880778c:	dfc00115 	stw	ra,4(sp)
 8807790:	df000015 	stw	fp,0(sp)
 8807794:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
 8807798:	0009883a 	mov	r4,zero
 880779c:	01440004 	movi	r5,4096
 88077a0:	88082800 	call	8808280 <alt_icache_flush>
#endif
}
 88077a4:	e037883a 	mov	sp,fp
 88077a8:	dfc00117 	ldw	ra,4(sp)
 88077ac:	df000017 	ldw	fp,0(sp)
 88077b0:	dec00204 	addi	sp,sp,8
 88077b4:	f800283a 	ret

088077b8 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 88077b8:	defff904 	addi	sp,sp,-28
 88077bc:	dfc00615 	stw	ra,24(sp)
 88077c0:	df000515 	stw	fp,20(sp)
 88077c4:	df000504 	addi	fp,sp,20
 88077c8:	e13ffc15 	stw	r4,-16(fp)
 88077cc:	e17ffd15 	stw	r5,-12(fp)
 88077d0:	e1bffe15 	stw	r6,-8(fp)
 88077d4:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
 88077d8:	e0800217 	ldw	r2,8(fp)
 88077dc:	d8800015 	stw	r2,0(sp)
 88077e0:	e13ffc17 	ldw	r4,-16(fp)
 88077e4:	e17ffd17 	ldw	r5,-12(fp)
 88077e8:	e1bffe17 	ldw	r6,-8(fp)
 88077ec:	e1ffff17 	ldw	r7,-4(fp)
 88077f0:	880798c0 	call	880798c <alt_iic_isr_register>
}  
 88077f4:	e037883a 	mov	sp,fp
 88077f8:	dfc00117 	ldw	ra,4(sp)
 88077fc:	df000017 	ldw	fp,0(sp)
 8807800:	dec00204 	addi	sp,sp,8
 8807804:	f800283a 	ret

08807808 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
 8807808:	defff904 	addi	sp,sp,-28
 880780c:	df000615 	stw	fp,24(sp)
 8807810:	df000604 	addi	fp,sp,24
 8807814:	e13ffe15 	stw	r4,-8(fp)
 8807818:	e17fff15 	stw	r5,-4(fp)
 880781c:	e0bfff17 	ldw	r2,-4(fp)
 8807820:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8807824:	0005303a 	rdctl	r2,status
 8807828:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 880782c:	e0fffb17 	ldw	r3,-20(fp)
 8807830:	00bfff84 	movi	r2,-2
 8807834:	1884703a 	and	r2,r3,r2
 8807838:	1001703a 	wrctl	status,r2
  
  return context;
 880783c:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 8807840:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active |= (1 << id);
 8807844:	e0fffc17 	ldw	r3,-16(fp)
 8807848:	00800044 	movi	r2,1
 880784c:	10c4983a 	sll	r2,r2,r3
 8807850:	1007883a 	mov	r3,r2
 8807854:	00822074 	movhi	r2,2177
 8807858:	10aeac04 	addi	r2,r2,-17744
 880785c:	10800017 	ldw	r2,0(r2)
 8807860:	1886b03a 	or	r3,r3,r2
 8807864:	00822074 	movhi	r2,2177
 8807868:	10aeac04 	addi	r2,r2,-17744
 880786c:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 8807870:	00822074 	movhi	r2,2177
 8807874:	10aeac04 	addi	r2,r2,-17744
 8807878:	10800017 	ldw	r2,0(r2)
 880787c:	100170fa 	wrctl	ienable,r2
 8807880:	e0bffd17 	ldw	r2,-12(fp)
 8807884:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8807888:	e0bffa17 	ldw	r2,-24(fp)
 880788c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 8807890:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
 8807894:	e037883a 	mov	sp,fp
 8807898:	df000017 	ldw	fp,0(sp)
 880789c:	dec00104 	addi	sp,sp,4
 88078a0:	f800283a 	ret

088078a4 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
 88078a4:	defff904 	addi	sp,sp,-28
 88078a8:	df000615 	stw	fp,24(sp)
 88078ac:	df000604 	addi	fp,sp,24
 88078b0:	e13ffe15 	stw	r4,-8(fp)
 88078b4:	e17fff15 	stw	r5,-4(fp)
 88078b8:	e0bfff17 	ldw	r2,-4(fp)
 88078bc:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 88078c0:	0005303a 	rdctl	r2,status
 88078c4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 88078c8:	e0fffb17 	ldw	r3,-20(fp)
 88078cc:	00bfff84 	movi	r2,-2
 88078d0:	1884703a 	and	r2,r3,r2
 88078d4:	1001703a 	wrctl	status,r2
  
  return context;
 88078d8:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 88078dc:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active &= ~(1 << id);
 88078e0:	e0fffc17 	ldw	r3,-16(fp)
 88078e4:	00800044 	movi	r2,1
 88078e8:	10c4983a 	sll	r2,r2,r3
 88078ec:	0084303a 	nor	r2,zero,r2
 88078f0:	1007883a 	mov	r3,r2
 88078f4:	00822074 	movhi	r2,2177
 88078f8:	10aeac04 	addi	r2,r2,-17744
 88078fc:	10800017 	ldw	r2,0(r2)
 8807900:	1886703a 	and	r3,r3,r2
 8807904:	00822074 	movhi	r2,2177
 8807908:	10aeac04 	addi	r2,r2,-17744
 880790c:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 8807910:	00822074 	movhi	r2,2177
 8807914:	10aeac04 	addi	r2,r2,-17744
 8807918:	10800017 	ldw	r2,0(r2)
 880791c:	100170fa 	wrctl	ienable,r2
 8807920:	e0bffd17 	ldw	r2,-12(fp)
 8807924:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8807928:	e0bffa17 	ldw	r2,-24(fp)
 880792c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 8807930:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
 8807934:	e037883a 	mov	sp,fp
 8807938:	df000017 	ldw	fp,0(sp)
 880793c:	dec00104 	addi	sp,sp,4
 8807940:	f800283a 	ret

08807944 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
 8807944:	defffc04 	addi	sp,sp,-16
 8807948:	df000315 	stw	fp,12(sp)
 880794c:	df000304 	addi	fp,sp,12
 8807950:	e13ffe15 	stw	r4,-8(fp)
 8807954:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
 8807958:	000530fa 	rdctl	r2,ienable
 880795c:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
 8807960:	e0ffff17 	ldw	r3,-4(fp)
 8807964:	00800044 	movi	r2,1
 8807968:	10c4983a 	sll	r2,r2,r3
 880796c:	1007883a 	mov	r3,r2
 8807970:	e0bffd17 	ldw	r2,-12(fp)
 8807974:	1884703a 	and	r2,r3,r2
 8807978:	1004c03a 	cmpne	r2,r2,zero
}
 880797c:	e037883a 	mov	sp,fp
 8807980:	df000017 	ldw	fp,0(sp)
 8807984:	dec00104 	addi	sp,sp,4
 8807988:	f800283a 	ret

0880798c <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 880798c:	defff404 	addi	sp,sp,-48
 8807990:	dfc00b15 	stw	ra,44(sp)
 8807994:	df000a15 	stw	fp,40(sp)
 8807998:	df000a04 	addi	fp,sp,40
 880799c:	e13ffb15 	stw	r4,-20(fp)
 88079a0:	e17ffc15 	stw	r5,-16(fp)
 88079a4:	e1bffd15 	stw	r6,-12(fp)
 88079a8:	e1fffe15 	stw	r7,-8(fp)
  int rc = -EINVAL;  
 88079ac:	00bffa84 	movi	r2,-22
 88079b0:	e0bffa15 	stw	r2,-24(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
 88079b4:	e0bffc17 	ldw	r2,-16(fp)
 88079b8:	e0bff915 	stw	r2,-28(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 88079bc:	e0bff917 	ldw	r2,-28(fp)
 88079c0:	10800808 	cmpgei	r2,r2,32
 88079c4:	1000291e 	bne	r2,zero,8807a6c <alt_iic_isr_register+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 88079c8:	0005303a 	rdctl	r2,status
 88079cc:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 88079d0:	e0fff717 	ldw	r3,-36(fp)
 88079d4:	00bfff84 	movi	r2,-2
 88079d8:	1884703a 	and	r2,r3,r2
 88079dc:	1001703a 	wrctl	status,r2
  
  return context;
 88079e0:	e0bff717 	ldw	r2,-36(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
 88079e4:	e0bff815 	stw	r2,-32(fp)

    alt_irq[id].handler = isr;
 88079e8:	e0bff917 	ldw	r2,-28(fp)
 88079ec:	00c22074 	movhi	r3,2177
 88079f0:	18eeb004 	addi	r3,r3,-17728
 88079f4:	100490fa 	slli	r2,r2,3
 88079f8:	10c7883a 	add	r3,r2,r3
 88079fc:	e0bffd17 	ldw	r2,-12(fp)
 8807a00:	18800015 	stw	r2,0(r3)
    alt_irq[id].context = isr_context;
 8807a04:	e0bff917 	ldw	r2,-28(fp)
 8807a08:	00c22074 	movhi	r3,2177
 8807a0c:	18eeb004 	addi	r3,r3,-17728
 8807a10:	100490fa 	slli	r2,r2,3
 8807a14:	10c5883a 	add	r2,r2,r3
 8807a18:	10c00104 	addi	r3,r2,4
 8807a1c:	e0bffe17 	ldw	r2,-8(fp)
 8807a20:	18800015 	stw	r2,0(r3)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
 8807a24:	e0bffd17 	ldw	r2,-12(fp)
 8807a28:	1005003a 	cmpeq	r2,r2,zero
 8807a2c:	1000051e 	bne	r2,zero,8807a44 <alt_iic_isr_register+0xb8>
 8807a30:	e17ff917 	ldw	r5,-28(fp)
 8807a34:	e13ffb17 	ldw	r4,-20(fp)
 8807a38:	88078080 	call	8807808 <alt_ic_irq_enable>
 8807a3c:	e0bfff15 	stw	r2,-4(fp)
 8807a40:	00000406 	br	8807a54 <alt_iic_isr_register+0xc8>
 8807a44:	e17ff917 	ldw	r5,-28(fp)
 8807a48:	e13ffb17 	ldw	r4,-20(fp)
 8807a4c:	88078a40 	call	88078a4 <alt_ic_irq_disable>
 8807a50:	e0bfff15 	stw	r2,-4(fp)
 8807a54:	e0bfff17 	ldw	r2,-4(fp)
 8807a58:	e0bffa15 	stw	r2,-24(fp)
 8807a5c:	e0bff817 	ldw	r2,-32(fp)
 8807a60:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8807a64:	e0bff617 	ldw	r2,-40(fp)
 8807a68:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
 8807a6c:	e0bffa17 	ldw	r2,-24(fp)
}
 8807a70:	e037883a 	mov	sp,fp
 8807a74:	dfc00117 	ldw	ra,4(sp)
 8807a78:	df000017 	ldw	fp,0(sp)
 8807a7c:	dec00204 	addi	sp,sp,8
 8807a80:	f800283a 	ret

08807a84 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
 8807a84:	defff904 	addi	sp,sp,-28
 8807a88:	dfc00615 	stw	ra,24(sp)
 8807a8c:	df000515 	stw	fp,20(sp)
 8807a90:	df000504 	addi	fp,sp,20
 8807a94:	e13ffc15 	stw	r4,-16(fp)
 8807a98:	e17ffd15 	stw	r5,-12(fp)
 8807a9c:	e1bffe15 	stw	r6,-8(fp)
 8807aa0:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
 8807aa4:	e13ffd17 	ldw	r4,-12(fp)
 8807aa8:	e17ffe17 	ldw	r5,-8(fp)
 8807aac:	e1bfff17 	ldw	r6,-4(fp)
 8807ab0:	8807c9c0 	call	8807c9c <open>
 8807ab4:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
 8807ab8:	e0bffb17 	ldw	r2,-20(fp)
 8807abc:	1004803a 	cmplt	r2,r2,zero
 8807ac0:	10001c1e 	bne	r2,zero,8807b34 <alt_open_fd+0xb0>
  {
    fd->dev      = alt_fd_list[old].dev;
 8807ac4:	e0bffb17 	ldw	r2,-20(fp)
 8807ac8:	00c22074 	movhi	r3,2177
 8807acc:	18e84804 	addi	r3,r3,-24288
 8807ad0:	10800324 	muli	r2,r2,12
 8807ad4:	10c5883a 	add	r2,r2,r3
 8807ad8:	10c00017 	ldw	r3,0(r2)
 8807adc:	e0bffc17 	ldw	r2,-16(fp)
 8807ae0:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
 8807ae4:	e0bffb17 	ldw	r2,-20(fp)
 8807ae8:	00c22074 	movhi	r3,2177
 8807aec:	18e84804 	addi	r3,r3,-24288
 8807af0:	10800324 	muli	r2,r2,12
 8807af4:	10c5883a 	add	r2,r2,r3
 8807af8:	10800104 	addi	r2,r2,4
 8807afc:	10c00017 	ldw	r3,0(r2)
 8807b00:	e0bffc17 	ldw	r2,-16(fp)
 8807b04:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 8807b08:	e0bffb17 	ldw	r2,-20(fp)
 8807b0c:	00c22074 	movhi	r3,2177
 8807b10:	18e84804 	addi	r3,r3,-24288
 8807b14:	10800324 	muli	r2,r2,12
 8807b18:	10c5883a 	add	r2,r2,r3
 8807b1c:	10800204 	addi	r2,r2,8
 8807b20:	10c00017 	ldw	r3,0(r2)
 8807b24:	e0bffc17 	ldw	r2,-16(fp)
 8807b28:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
 8807b2c:	e13ffb17 	ldw	r4,-20(fp)
 8807b30:	8807e840 	call	8807e84 <alt_release_fd>
  }
} 
 8807b34:	e037883a 	mov	sp,fp
 8807b38:	dfc00117 	ldw	ra,4(sp)
 8807b3c:	df000017 	ldw	fp,0(sp)
 8807b40:	dec00204 	addi	sp,sp,8
 8807b44:	f800283a 	ret

08807b48 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 8807b48:	defffb04 	addi	sp,sp,-20
 8807b4c:	dfc00415 	stw	ra,16(sp)
 8807b50:	df000315 	stw	fp,12(sp)
 8807b54:	df000304 	addi	fp,sp,12
 8807b58:	e13ffd15 	stw	r4,-12(fp)
 8807b5c:	e17ffe15 	stw	r5,-8(fp)
 8807b60:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 8807b64:	01022074 	movhi	r4,2177
 8807b68:	21284b04 	addi	r4,r4,-24276
 8807b6c:	e17ffd17 	ldw	r5,-12(fp)
 8807b70:	01800044 	movi	r6,1
 8807b74:	01c07fc4 	movi	r7,511
 8807b78:	8807a840 	call	8807a84 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 8807b7c:	01022074 	movhi	r4,2177
 8807b80:	21284804 	addi	r4,r4,-24288
 8807b84:	e17ffe17 	ldw	r5,-8(fp)
 8807b88:	000d883a 	mov	r6,zero
 8807b8c:	01c07fc4 	movi	r7,511
 8807b90:	8807a840 	call	8807a84 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 8807b94:	01022074 	movhi	r4,2177
 8807b98:	21284e04 	addi	r4,r4,-24264
 8807b9c:	e17fff17 	ldw	r5,-4(fp)
 8807ba0:	01800044 	movi	r6,1
 8807ba4:	01c07fc4 	movi	r7,511
 8807ba8:	8807a840 	call	8807a84 <alt_open_fd>
}  
 8807bac:	e037883a 	mov	sp,fp
 8807bb0:	dfc00117 	ldw	ra,4(sp)
 8807bb4:	df000017 	ldw	fp,0(sp)
 8807bb8:	dec00204 	addi	sp,sp,8
 8807bbc:	f800283a 	ret

08807bc0 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
 8807bc0:	defffc04 	addi	sp,sp,-16
 8807bc4:	df000315 	stw	fp,12(sp)
 8807bc8:	df000304 	addi	fp,sp,12
 8807bcc:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 8807bd0:	e0bffe17 	ldw	r2,-8(fp)
 8807bd4:	10800217 	ldw	r2,8(r2)
 8807bd8:	10d00034 	orhi	r3,r2,16384
 8807bdc:	e0bffe17 	ldw	r2,-8(fp)
 8807be0:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 8807be4:	e03ffd15 	stw	zero,-12(fp)
 8807be8:	00002006 	br	8807c6c <alt_file_locked+0xac>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 8807bec:	e0bffd17 	ldw	r2,-12(fp)
 8807bf0:	00c22074 	movhi	r3,2177
 8807bf4:	18e84804 	addi	r3,r3,-24288
 8807bf8:	10800324 	muli	r2,r2,12
 8807bfc:	10c5883a 	add	r2,r2,r3
 8807c00:	10c00017 	ldw	r3,0(r2)
 8807c04:	e0bffe17 	ldw	r2,-8(fp)
 8807c08:	10800017 	ldw	r2,0(r2)
 8807c0c:	1880141e 	bne	r3,r2,8807c60 <alt_file_locked+0xa0>
 8807c10:	e0bffd17 	ldw	r2,-12(fp)
 8807c14:	00c22074 	movhi	r3,2177
 8807c18:	18e84804 	addi	r3,r3,-24288
 8807c1c:	10800324 	muli	r2,r2,12
 8807c20:	10c5883a 	add	r2,r2,r3
 8807c24:	10800204 	addi	r2,r2,8
 8807c28:	10800017 	ldw	r2,0(r2)
 8807c2c:	1004403a 	cmpge	r2,r2,zero
 8807c30:	10000b1e 	bne	r2,zero,8807c60 <alt_file_locked+0xa0>
 8807c34:	e0bffd17 	ldw	r2,-12(fp)
 8807c38:	10800324 	muli	r2,r2,12
 8807c3c:	1007883a 	mov	r3,r2
 8807c40:	00822074 	movhi	r2,2177
 8807c44:	10a84804 	addi	r2,r2,-24288
 8807c48:	1887883a 	add	r3,r3,r2
 8807c4c:	e0bffe17 	ldw	r2,-8(fp)
 8807c50:	18800326 	beq	r3,r2,8807c60 <alt_file_locked+0xa0>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
 8807c54:	00bffcc4 	movi	r2,-13
 8807c58:	e0bfff15 	stw	r2,-4(fp)
 8807c5c:	00000a06 	br	8807c88 <alt_file_locked+0xc8>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 8807c60:	e0bffd17 	ldw	r2,-12(fp)
 8807c64:	10800044 	addi	r2,r2,1
 8807c68:	e0bffd15 	stw	r2,-12(fp)
 8807c6c:	00822074 	movhi	r2,2177
 8807c70:	10a8b604 	addi	r2,r2,-23848
 8807c74:	10800017 	ldw	r2,0(r2)
 8807c78:	1007883a 	mov	r3,r2
 8807c7c:	e0bffd17 	ldw	r2,-12(fp)
 8807c80:	18bfda2e 	bgeu	r3,r2,8807bec <alt_file_locked+0x2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
 8807c84:	e03fff15 	stw	zero,-4(fp)
 8807c88:	e0bfff17 	ldw	r2,-4(fp)
}
 8807c8c:	e037883a 	mov	sp,fp
 8807c90:	df000017 	ldw	fp,0(sp)
 8807c94:	dec00104 	addi	sp,sp,4
 8807c98:	f800283a 	ret

08807c9c <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 8807c9c:	defff404 	addi	sp,sp,-48
 8807ca0:	dfc00b15 	stw	ra,44(sp)
 8807ca4:	df000a15 	stw	fp,40(sp)
 8807ca8:	df000a04 	addi	fp,sp,40
 8807cac:	e13ffb15 	stw	r4,-20(fp)
 8807cb0:	e17ffc15 	stw	r5,-16(fp)
 8807cb4:	e1bffd15 	stw	r6,-12(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
 8807cb8:	00bfffc4 	movi	r2,-1
 8807cbc:	e0bff815 	stw	r2,-32(fp)
  int status = -ENODEV;
 8807cc0:	00bffb44 	movi	r2,-19
 8807cc4:	e0bff715 	stw	r2,-36(fp)
  int isafs = 0;
 8807cc8:	e03ff615 	stw	zero,-40(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 8807ccc:	e13ffb17 	ldw	r4,-20(fp)
 8807cd0:	01422074 	movhi	r5,2177
 8807cd4:	2968b404 	addi	r5,r5,-23856
 8807cd8:	88076f40 	call	88076f4 <alt_find_dev>
 8807cdc:	e0bffa15 	stw	r2,-24(fp)
 8807ce0:	e0bffa17 	ldw	r2,-24(fp)
 8807ce4:	1004c03a 	cmpne	r2,r2,zero
 8807ce8:	1000051e 	bne	r2,zero,8807d00 <open+0x64>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 8807cec:	e13ffb17 	ldw	r4,-20(fp)
 8807cf0:	88080a80 	call	88080a8 <alt_find_file>
 8807cf4:	e0bffa15 	stw	r2,-24(fp)
    isafs = 1;
 8807cf8:	00800044 	movi	r2,1
 8807cfc:	e0bff615 	stw	r2,-40(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 8807d00:	e0bffa17 	ldw	r2,-24(fp)
 8807d04:	1005003a 	cmpeq	r2,r2,zero
 8807d08:	1000301e 	bne	r2,zero,8807dcc <open+0x130>
  {
    if ((index = alt_get_fd (dev)) < 0)
 8807d0c:	e13ffa17 	ldw	r4,-24(fp)
 8807d10:	88081c80 	call	88081c8 <alt_get_fd>
 8807d14:	e0bff815 	stw	r2,-32(fp)
 8807d18:	e0bff817 	ldw	r2,-32(fp)
 8807d1c:	1004403a 	cmpge	r2,r2,zero
 8807d20:	1000031e 	bne	r2,zero,8807d30 <open+0x94>
    {
      status = index;
 8807d24:	e0bff817 	ldw	r2,-32(fp)
 8807d28:	e0bff715 	stw	r2,-36(fp)
 8807d2c:	00002906 	br	8807dd4 <open+0x138>
    }
    else
    {
      fd = &alt_fd_list[index];
 8807d30:	e0bff817 	ldw	r2,-32(fp)
 8807d34:	10800324 	muli	r2,r2,12
 8807d38:	1007883a 	mov	r3,r2
 8807d3c:	00822074 	movhi	r2,2177
 8807d40:	10a84804 	addi	r2,r2,-24288
 8807d44:	1885883a 	add	r2,r3,r2
 8807d48:	e0bff915 	stw	r2,-28(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 8807d4c:	e0fffc17 	ldw	r3,-16(fp)
 8807d50:	00900034 	movhi	r2,16384
 8807d54:	10bfffc4 	addi	r2,r2,-1
 8807d58:	1886703a 	and	r3,r3,r2
 8807d5c:	e0bff917 	ldw	r2,-28(fp)
 8807d60:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
 8807d64:	e0bff617 	ldw	r2,-40(fp)
 8807d68:	1004c03a 	cmpne	r2,r2,zero
 8807d6c:	1000061e 	bne	r2,zero,8807d88 <open+0xec>
 8807d70:	e13ff917 	ldw	r4,-28(fp)
 8807d74:	8807bc00 	call	8807bc0 <alt_file_locked>
 8807d78:	e0bff715 	stw	r2,-36(fp)
 8807d7c:	e0bff717 	ldw	r2,-36(fp)
 8807d80:	1004803a 	cmplt	r2,r2,zero
 8807d84:	1000131e 	bne	r2,zero,8807dd4 <open+0x138>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 8807d88:	e0bffa17 	ldw	r2,-24(fp)
 8807d8c:	10800317 	ldw	r2,12(r2)
 8807d90:	1005003a 	cmpeq	r2,r2,zero
 8807d94:	1000091e 	bne	r2,zero,8807dbc <open+0x120>
 8807d98:	e0bffa17 	ldw	r2,-24(fp)
 8807d9c:	10800317 	ldw	r2,12(r2)
 8807da0:	e13ff917 	ldw	r4,-28(fp)
 8807da4:	e17ffb17 	ldw	r5,-20(fp)
 8807da8:	e1bffc17 	ldw	r6,-16(fp)
 8807dac:	e1fffd17 	ldw	r7,-12(fp)
 8807db0:	103ee83a 	callr	r2
 8807db4:	e0bfff15 	stw	r2,-4(fp)
 8807db8:	00000106 	br	8807dc0 <open+0x124>
 8807dbc:	e03fff15 	stw	zero,-4(fp)
 8807dc0:	e0bfff17 	ldw	r2,-4(fp)
 8807dc4:	e0bff715 	stw	r2,-36(fp)
 8807dc8:	00000206 	br	8807dd4 <open+0x138>
      }
    }
  }
  else
  {
    status = -ENODEV;
 8807dcc:	00bffb44 	movi	r2,-19
 8807dd0:	e0bff715 	stw	r2,-36(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 8807dd4:	e0bff717 	ldw	r2,-36(fp)
 8807dd8:	1004403a 	cmpge	r2,r2,zero
 8807ddc:	1000091e 	bne	r2,zero,8807e04 <open+0x168>
  {
    alt_release_fd (index);  
 8807de0:	e13ff817 	ldw	r4,-32(fp)
 8807de4:	8807e840 	call	8807e84 <alt_release_fd>
    ALT_ERRNO = -status;
 8807de8:	8807e240 	call	8807e24 <alt_get_errno>
 8807dec:	e0fff717 	ldw	r3,-36(fp)
 8807df0:	00c7c83a 	sub	r3,zero,r3
 8807df4:	10c00015 	stw	r3,0(r2)
    return -1;
 8807df8:	00bfffc4 	movi	r2,-1
 8807dfc:	e0bffe15 	stw	r2,-8(fp)
 8807e00:	00000206 	br	8807e0c <open+0x170>
  }
  
  /* return the reference upon success */

  return index;
 8807e04:	e0bff817 	ldw	r2,-32(fp)
 8807e08:	e0bffe15 	stw	r2,-8(fp)
 8807e0c:	e0bffe17 	ldw	r2,-8(fp)
}
 8807e10:	e037883a 	mov	sp,fp
 8807e14:	dfc00117 	ldw	ra,4(sp)
 8807e18:	df000017 	ldw	fp,0(sp)
 8807e1c:	dec00204 	addi	sp,sp,8
 8807e20:	f800283a 	ret

08807e24 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 8807e24:	defffd04 	addi	sp,sp,-12
 8807e28:	dfc00215 	stw	ra,8(sp)
 8807e2c:	df000115 	stw	fp,4(sp)
 8807e30:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 8807e34:	00822074 	movhi	r2,2177
 8807e38:	10a8b704 	addi	r2,r2,-23844
 8807e3c:	10800017 	ldw	r2,0(r2)
 8807e40:	1005003a 	cmpeq	r2,r2,zero
 8807e44:	1000061e 	bne	r2,zero,8807e60 <alt_get_errno+0x3c>
 8807e48:	00822074 	movhi	r2,2177
 8807e4c:	10a8b704 	addi	r2,r2,-23844
 8807e50:	10800017 	ldw	r2,0(r2)
 8807e54:	103ee83a 	callr	r2
 8807e58:	e0bfff15 	stw	r2,-4(fp)
 8807e5c:	00000306 	br	8807e6c <alt_get_errno+0x48>
 8807e60:	00822074 	movhi	r2,2177
 8807e64:	10aeaf04 	addi	r2,r2,-17732
 8807e68:	e0bfff15 	stw	r2,-4(fp)
 8807e6c:	e0bfff17 	ldw	r2,-4(fp)
}
 8807e70:	e037883a 	mov	sp,fp
 8807e74:	dfc00117 	ldw	ra,4(sp)
 8807e78:	df000017 	ldw	fp,0(sp)
 8807e7c:	dec00204 	addi	sp,sp,8
 8807e80:	f800283a 	ret

08807e84 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 8807e84:	defffe04 	addi	sp,sp,-8
 8807e88:	df000115 	stw	fp,4(sp)
 8807e8c:	df000104 	addi	fp,sp,4
 8807e90:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
 8807e94:	e0bfff17 	ldw	r2,-4(fp)
 8807e98:	108000d0 	cmplti	r2,r2,3
 8807e9c:	10000d1e 	bne	r2,zero,8807ed4 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
 8807ea0:	e0bfff17 	ldw	r2,-4(fp)
 8807ea4:	00c22074 	movhi	r3,2177
 8807ea8:	18e84804 	addi	r3,r3,-24288
 8807eac:	10800324 	muli	r2,r2,12
 8807eb0:	10c5883a 	add	r2,r2,r3
 8807eb4:	10800204 	addi	r2,r2,8
 8807eb8:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
 8807ebc:	e0bfff17 	ldw	r2,-4(fp)
 8807ec0:	00c22074 	movhi	r3,2177
 8807ec4:	18e84804 	addi	r3,r3,-24288
 8807ec8:	10800324 	muli	r2,r2,12
 8807ecc:	10c5883a 	add	r2,r2,r3
 8807ed0:	10000015 	stw	zero,0(r2)
  }
}
 8807ed4:	e037883a 	mov	sp,fp
 8807ed8:	df000017 	ldw	fp,0(sp)
 8807edc:	dec00104 	addi	sp,sp,4
 8807ee0:	f800283a 	ret

08807ee4 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
 8807ee4:	defffa04 	addi	sp,sp,-24
 8807ee8:	df000515 	stw	fp,20(sp)
 8807eec:	df000504 	addi	fp,sp,20
 8807ef0:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8807ef4:	0005303a 	rdctl	r2,status
 8807ef8:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8807efc:	e0fffd17 	ldw	r3,-12(fp)
 8807f00:	00bfff84 	movi	r2,-2
 8807f04:	1884703a 	and	r2,r3,r2
 8807f08:	1001703a 	wrctl	status,r2
  
  return context;
 8807f0c:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
 8807f10:	e0bffe15 	stw	r2,-8(fp)
  alt_llist_remove (&alarm->llist);
 8807f14:	e0bfff17 	ldw	r2,-4(fp)
 8807f18:	e0bffc15 	stw	r2,-16(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 8807f1c:	e0bffc17 	ldw	r2,-16(fp)
 8807f20:	10c00017 	ldw	r3,0(r2)
 8807f24:	e0bffc17 	ldw	r2,-16(fp)
 8807f28:	10800117 	ldw	r2,4(r2)
 8807f2c:	18800115 	stw	r2,4(r3)
  entry->previous->next = entry->next;
 8807f30:	e0bffc17 	ldw	r2,-16(fp)
 8807f34:	10c00117 	ldw	r3,4(r2)
 8807f38:	e0bffc17 	ldw	r2,-16(fp)
 8807f3c:	10800017 	ldw	r2,0(r2)
 8807f40:	18800015 	stw	r2,0(r3)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 8807f44:	e0fffc17 	ldw	r3,-16(fp)
 8807f48:	e0bffc17 	ldw	r2,-16(fp)
 8807f4c:	18800115 	stw	r2,4(r3)
  entry->next     = entry;
 8807f50:	e0fffc17 	ldw	r3,-16(fp)
 8807f54:	e0bffc17 	ldw	r2,-16(fp)
 8807f58:	18800015 	stw	r2,0(r3)
 8807f5c:	e0bffe17 	ldw	r2,-8(fp)
 8807f60:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8807f64:	e0bffb17 	ldw	r2,-20(fp)
 8807f68:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
 8807f6c:	e037883a 	mov	sp,fp
 8807f70:	df000017 	ldw	fp,0(sp)
 8807f74:	dec00104 	addi	sp,sp,4
 8807f78:	f800283a 	ret

08807f7c <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 8807f7c:	defffb04 	addi	sp,sp,-20
 8807f80:	dfc00415 	stw	ra,16(sp)
 8807f84:	df000315 	stw	fp,12(sp)
 8807f88:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 8807f8c:	d0a01117 	ldw	r2,-32700(gp)
 8807f90:	e0bffe15 	stw	r2,-8(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 8807f94:	d0a60617 	ldw	r2,-26600(gp)
 8807f98:	10800044 	addi	r2,r2,1
 8807f9c:	d0a60615 	stw	r2,-26600(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 8807fa0:	00003106 	br	8808068 <alt_tick+0xec>
  {
    next = (alt_alarm*) alarm->llist.next;
 8807fa4:	e0bffe17 	ldw	r2,-8(fp)
 8807fa8:	10800017 	ldw	r2,0(r2)
 8807fac:	e0bfff15 	stw	r2,-4(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 8807fb0:	e0bffe17 	ldw	r2,-8(fp)
 8807fb4:	10800403 	ldbu	r2,16(r2)
 8807fb8:	10803fcc 	andi	r2,r2,255
 8807fbc:	1005003a 	cmpeq	r2,r2,zero
 8807fc0:	1000051e 	bne	r2,zero,8807fd8 <alt_tick+0x5c>
 8807fc4:	d0a60617 	ldw	r2,-26600(gp)
 8807fc8:	1004c03a 	cmpne	r2,r2,zero
 8807fcc:	1000021e 	bne	r2,zero,8807fd8 <alt_tick+0x5c>
    {
      alarm->rollover = 0;
 8807fd0:	e0bffe17 	ldw	r2,-8(fp)
 8807fd4:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 8807fd8:	e0bffe17 	ldw	r2,-8(fp)
 8807fdc:	10c00217 	ldw	r3,8(r2)
 8807fe0:	d0a60617 	ldw	r2,-26600(gp)
 8807fe4:	10c01e36 	bltu	r2,r3,8808060 <alt_tick+0xe4>
 8807fe8:	e0bffe17 	ldw	r2,-8(fp)
 8807fec:	10800403 	ldbu	r2,16(r2)
 8807ff0:	10803fcc 	andi	r2,r2,255
 8807ff4:	1004c03a 	cmpne	r2,r2,zero
 8807ff8:	1000191e 	bne	r2,zero,8808060 <alt_tick+0xe4>
    {
      next_callback = alarm->callback (alarm->context);
 8807ffc:	e0bffe17 	ldw	r2,-8(fp)
 8808000:	10c00317 	ldw	r3,12(r2)
 8808004:	e0bffe17 	ldw	r2,-8(fp)
 8808008:	11000517 	ldw	r4,20(r2)
 880800c:	183ee83a 	callr	r3
 8808010:	e0bffd15 	stw	r2,-12(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 8808014:	e0bffd17 	ldw	r2,-12(fp)
 8808018:	1004c03a 	cmpne	r2,r2,zero
 880801c:	1000031e 	bne	r2,zero,880802c <alt_tick+0xb0>
      {
        alt_alarm_stop (alarm);
 8808020:	e13ffe17 	ldw	r4,-8(fp)
 8808024:	8807ee40 	call	8807ee4 <alt_alarm_stop>
 8808028:	00000d06 	br	8808060 <alt_tick+0xe4>
      }
      else
      {
        alarm->time += next_callback;
 880802c:	e0bffe17 	ldw	r2,-8(fp)
 8808030:	10c00217 	ldw	r3,8(r2)
 8808034:	e0bffd17 	ldw	r2,-12(fp)
 8808038:	1887883a 	add	r3,r3,r2
 880803c:	e0bffe17 	ldw	r2,-8(fp)
 8808040:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 8808044:	e0bffe17 	ldw	r2,-8(fp)
 8808048:	10c00217 	ldw	r3,8(r2)
 880804c:	d0a60617 	ldw	r2,-26600(gp)
 8808050:	1880032e 	bgeu	r3,r2,8808060 <alt_tick+0xe4>
        {
          alarm->rollover = 1;
 8808054:	e0fffe17 	ldw	r3,-8(fp)
 8808058:	00800044 	movi	r2,1
 880805c:	18800405 	stb	r2,16(r3)
        }
      }
    }
    alarm = next;
 8808060:	e0bfff17 	ldw	r2,-4(fp)
 8808064:	e0bffe15 	stw	r2,-8(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 8808068:	d0e01104 	addi	r3,gp,-32700
 880806c:	e0bffe17 	ldw	r2,-8(fp)
 8808070:	10ffcc1e 	bne	r2,r3,8807fa4 <alt_tick+0x28>
  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
}
 8808074:	e037883a 	mov	sp,fp
 8808078:	dfc00117 	ldw	ra,4(sp)
 880807c:	df000017 	ldw	fp,0(sp)
 8808080:	dec00204 	addi	sp,sp,8
 8808084:	f800283a 	ret

08808088 <altera_nios2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_irq_init(void) 
{
 8808088:	deffff04 	addi	sp,sp,-4
 880808c:	df000015 	stw	fp,0(sp)
 8808090:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 8808094:	000170fa 	wrctl	ienable,zero
}
 8808098:	e037883a 	mov	sp,fp
 880809c:	df000017 	ldw	fp,0(sp)
 88080a0:	dec00104 	addi	sp,sp,4
 88080a4:	f800283a 	ret

088080a8 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 88080a8:	defffa04 	addi	sp,sp,-24
 88080ac:	dfc00515 	stw	ra,20(sp)
 88080b0:	df000415 	stw	fp,16(sp)
 88080b4:	df000404 	addi	fp,sp,16
 88080b8:	e13ffe15 	stw	r4,-8(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 88080bc:	00822074 	movhi	r2,2177
 88080c0:	10a8b204 	addi	r2,r2,-23864
 88080c4:	10800017 	ldw	r2,0(r2)
 88080c8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 88080cc:	00003306 	br	880819c <alt_find_file+0xf4>
  {
    len = strlen(next->name);
 88080d0:	e0bffd17 	ldw	r2,-12(fp)
 88080d4:	11000217 	ldw	r4,8(r2)
 88080d8:	88084700 	call	8808470 <strlen>
 88080dc:	e0bffc15 	stw	r2,-16(fp)
    
    if (next->name[len-1] == '/')
 88080e0:	e0bffd17 	ldw	r2,-12(fp)
 88080e4:	10c00217 	ldw	r3,8(r2)
 88080e8:	e0bffc17 	ldw	r2,-16(fp)
 88080ec:	1885883a 	add	r2,r3,r2
 88080f0:	10bfffc4 	addi	r2,r2,-1
 88080f4:	10800003 	ldbu	r2,0(r2)
 88080f8:	10803fcc 	andi	r2,r2,255
 88080fc:	1080201c 	xori	r2,r2,128
 8808100:	10bfe004 	addi	r2,r2,-128
 8808104:	10800bd8 	cmpnei	r2,r2,47
 8808108:	1000031e 	bne	r2,zero,8808118 <alt_find_file+0x70>
    {
      len -= 1;
 880810c:	e0bffc17 	ldw	r2,-16(fp)
 8808110:	10bfffc4 	addi	r2,r2,-1
 8808114:	e0bffc15 	stw	r2,-16(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 8808118:	e0bffc17 	ldw	r2,-16(fp)
 880811c:	1007883a 	mov	r3,r2
 8808120:	e0bffe17 	ldw	r2,-8(fp)
 8808124:	1885883a 	add	r2,r3,r2
 8808128:	10800003 	ldbu	r2,0(r2)
 880812c:	10803fcc 	andi	r2,r2,255
 8808130:	1080201c 	xori	r2,r2,128
 8808134:	10bfe004 	addi	r2,r2,-128
 8808138:	10800be0 	cmpeqi	r2,r2,47
 880813c:	10000a1e 	bne	r2,zero,8808168 <alt_find_file+0xc0>
 8808140:	e0bffc17 	ldw	r2,-16(fp)
 8808144:	1007883a 	mov	r3,r2
 8808148:	e0bffe17 	ldw	r2,-8(fp)
 880814c:	1885883a 	add	r2,r3,r2
 8808150:	10800003 	ldbu	r2,0(r2)
 8808154:	10803fcc 	andi	r2,r2,255
 8808158:	1080201c 	xori	r2,r2,128
 880815c:	10bfe004 	addi	r2,r2,-128
 8808160:	1004c03a 	cmpne	r2,r2,zero
 8808164:	10000a1e 	bne	r2,zero,8808190 <alt_find_file+0xe8>
 8808168:	e0bffd17 	ldw	r2,-12(fp)
 880816c:	11000217 	ldw	r4,8(r2)
 8808170:	e1bffc17 	ldw	r6,-16(fp)
 8808174:	e17ffe17 	ldw	r5,-8(fp)
 8808178:	880835c0 	call	880835c <memcmp>
 880817c:	1004c03a 	cmpne	r2,r2,zero
 8808180:	1000031e 	bne	r2,zero,8808190 <alt_find_file+0xe8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
 8808184:	e0bffd17 	ldw	r2,-12(fp)
 8808188:	e0bfff15 	stw	r2,-4(fp)
 880818c:	00000806 	br	88081b0 <alt_find_file+0x108>
    }
    next = (alt_dev*) next->llist.next;
 8808190:	e0bffd17 	ldw	r2,-12(fp)
 8808194:	10800017 	ldw	r2,0(r2)
 8808198:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 880819c:	00c22074 	movhi	r3,2177
 88081a0:	18e8b204 	addi	r3,r3,-23864
 88081a4:	e0bffd17 	ldw	r2,-12(fp)
 88081a8:	10ffc91e 	bne	r2,r3,88080d0 <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
 88081ac:	e03fff15 	stw	zero,-4(fp)
 88081b0:	e0bfff17 	ldw	r2,-4(fp)
}
 88081b4:	e037883a 	mov	sp,fp
 88081b8:	dfc00117 	ldw	ra,4(sp)
 88081bc:	df000017 	ldw	fp,0(sp)
 88081c0:	dec00204 	addi	sp,sp,8
 88081c4:	f800283a 	ret

088081c8 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 88081c8:	defffc04 	addi	sp,sp,-16
 88081cc:	df000315 	stw	fp,12(sp)
 88081d0:	df000304 	addi	fp,sp,12
 88081d4:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
 88081d8:	00bffa04 	movi	r2,-24
 88081dc:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 88081e0:	e03ffe15 	stw	zero,-8(fp)
 88081e4:	00001e06 	br	8808260 <alt_get_fd+0x98>
  {
    if (!alt_fd_list[i].dev)
 88081e8:	e0bffe17 	ldw	r2,-8(fp)
 88081ec:	00c22074 	movhi	r3,2177
 88081f0:	18e84804 	addi	r3,r3,-24288
 88081f4:	10800324 	muli	r2,r2,12
 88081f8:	10c5883a 	add	r2,r2,r3
 88081fc:	10800017 	ldw	r2,0(r2)
 8808200:	1004c03a 	cmpne	r2,r2,zero
 8808204:	1000131e 	bne	r2,zero,8808254 <alt_get_fd+0x8c>
    {
      alt_fd_list[i].dev = dev;
 8808208:	e0bffe17 	ldw	r2,-8(fp)
 880820c:	00c22074 	movhi	r3,2177
 8808210:	18e84804 	addi	r3,r3,-24288
 8808214:	10800324 	muli	r2,r2,12
 8808218:	10c7883a 	add	r3,r2,r3
 880821c:	e0bfff17 	ldw	r2,-4(fp)
 8808220:	18800015 	stw	r2,0(r3)
      if (i > alt_max_fd)
 8808224:	00822074 	movhi	r2,2177
 8808228:	10a8b604 	addi	r2,r2,-23848
 880822c:	10c00017 	ldw	r3,0(r2)
 8808230:	e0bffe17 	ldw	r2,-8(fp)
 8808234:	1880040e 	bge	r3,r2,8808248 <alt_get_fd+0x80>
      {
        alt_max_fd = i;
 8808238:	00c22074 	movhi	r3,2177
 880823c:	18e8b604 	addi	r3,r3,-23848
 8808240:	e0bffe17 	ldw	r2,-8(fp)
 8808244:	18800015 	stw	r2,0(r3)
      }
      rc = i;
 8808248:	e0bffe17 	ldw	r2,-8(fp)
 880824c:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
 8808250:	00000606 	br	880826c <alt_get_fd+0xa4>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 8808254:	e0bffe17 	ldw	r2,-8(fp)
 8808258:	10800044 	addi	r2,r2,1
 880825c:	e0bffe15 	stw	r2,-8(fp)
 8808260:	e0bffe17 	ldw	r2,-8(fp)
 8808264:	10800810 	cmplti	r2,r2,32
 8808268:	103fdf1e 	bne	r2,zero,88081e8 <alt_get_fd+0x20>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
 880826c:	e0bffd17 	ldw	r2,-12(fp)
}
 8808270:	e037883a 	mov	sp,fp
 8808274:	df000017 	ldw	fp,0(sp)
 8808278:	dec00104 	addi	sp,sp,4
 880827c:	f800283a 	ret

08808280 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
 8808280:	defffb04 	addi	sp,sp,-20
 8808284:	df000415 	stw	fp,16(sp)
 8808288:	df000404 	addi	fp,sp,16
 880828c:	e13ffe15 	stw	r4,-8(fp)
 8808290:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
 8808294:	e0bfff17 	ldw	r2,-4(fp)
 8808298:	10840070 	cmpltui	r2,r2,4097
 880829c:	1000021e 	bne	r2,zero,88082a8 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
 88082a0:	00840004 	movi	r2,4096
 88082a4:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
 88082a8:	e0fffe17 	ldw	r3,-8(fp)
 88082ac:	e0bfff17 	ldw	r2,-4(fp)
 88082b0:	1885883a 	add	r2,r3,r2
 88082b4:	e0bffc15 	stw	r2,-16(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 88082b8:	e0bffe17 	ldw	r2,-8(fp)
 88082bc:	e0bffd15 	stw	r2,-12(fp)
 88082c0:	00000506 	br	88082d8 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
 88082c4:	e0bffd17 	ldw	r2,-12(fp)
 88082c8:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 88082cc:	e0bffd17 	ldw	r2,-12(fp)
 88082d0:	10800804 	addi	r2,r2,32
 88082d4:	e0bffd15 	stw	r2,-12(fp)
 88082d8:	e0fffd17 	ldw	r3,-12(fp)
 88082dc:	e0bffc17 	ldw	r2,-16(fp)
 88082e0:	18bff836 	bltu	r3,r2,88082c4 <alt_icache_flush+0x44>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
 88082e4:	e0bffe17 	ldw	r2,-8(fp)
 88082e8:	108007cc 	andi	r2,r2,31
 88082ec:	1005003a 	cmpeq	r2,r2,zero
 88082f0:	1000021e 	bne	r2,zero,88082fc <alt_icache_flush+0x7c>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
 88082f4:	e0bffd17 	ldw	r2,-12(fp)
 88082f8:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
 88082fc:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
 8808300:	e037883a 	mov	sp,fp
 8808304:	df000017 	ldw	fp,0(sp)
 8808308:	dec00104 	addi	sp,sp,4
 880830c:	f800283a 	ret

08808310 <atexit>:
 8808310:	200b883a 	mov	r5,r4
 8808314:	000d883a 	mov	r6,zero
 8808318:	0009883a 	mov	r4,zero
 880831c:	000f883a 	mov	r7,zero
 8808320:	88084e41 	jmpi	88084e4 <__register_exitproc>

08808324 <exit>:
 8808324:	defffe04 	addi	sp,sp,-8
 8808328:	000b883a 	mov	r5,zero
 880832c:	dc000015 	stw	r16,0(sp)
 8808330:	dfc00115 	stw	ra,4(sp)
 8808334:	2021883a 	mov	r16,r4
 8808338:	880861c0 	call	880861c <__call_exitprocs>
 880833c:	00822074 	movhi	r2,2177
 8808340:	10a8ad04 	addi	r2,r2,-23884
 8808344:	11000017 	ldw	r4,0(r2)
 8808348:	20800f17 	ldw	r2,60(r4)
 880834c:	10000126 	beq	r2,zero,8808354 <exit+0x30>
 8808350:	103ee83a 	callr	r2
 8808354:	8009883a 	mov	r4,r16
 8808358:	880880c0 	call	880880c <_exit>

0880835c <memcmp>:
 880835c:	00c000c4 	movi	r3,3
 8808360:	1980032e 	bgeu	r3,r6,8808370 <memcmp+0x14>
 8808364:	2144b03a 	or	r2,r4,r5
 8808368:	10c4703a 	and	r2,r2,r3
 880836c:	10000f26 	beq	r2,zero,88083ac <memcmp+0x50>
 8808370:	31ffffc4 	addi	r7,r6,-1
 8808374:	3000061e 	bne	r6,zero,8808390 <memcmp+0x34>
 8808378:	00000a06 	br	88083a4 <memcmp+0x48>
 880837c:	39ffffc4 	addi	r7,r7,-1
 8808380:	00bfffc4 	movi	r2,-1
 8808384:	21000044 	addi	r4,r4,1
 8808388:	29400044 	addi	r5,r5,1
 880838c:	38800526 	beq	r7,r2,88083a4 <memcmp+0x48>
 8808390:	20c00003 	ldbu	r3,0(r4)
 8808394:	28800003 	ldbu	r2,0(r5)
 8808398:	18bff826 	beq	r3,r2,880837c <memcmp+0x20>
 880839c:	1885c83a 	sub	r2,r3,r2
 88083a0:	f800283a 	ret
 88083a4:	0005883a 	mov	r2,zero
 88083a8:	f800283a 	ret
 88083ac:	180f883a 	mov	r7,r3
 88083b0:	20c00017 	ldw	r3,0(r4)
 88083b4:	28800017 	ldw	r2,0(r5)
 88083b8:	18bfed1e 	bne	r3,r2,8808370 <memcmp+0x14>
 88083bc:	31bfff04 	addi	r6,r6,-4
 88083c0:	21000104 	addi	r4,r4,4
 88083c4:	29400104 	addi	r5,r5,4
 88083c8:	39bff936 	bltu	r7,r6,88083b0 <memcmp+0x54>
 88083cc:	003fe806 	br	8808370 <memcmp+0x14>

088083d0 <memcpy>:
 88083d0:	01c003c4 	movi	r7,15
 88083d4:	2007883a 	mov	r3,r4
 88083d8:	3980032e 	bgeu	r7,r6,88083e8 <memcpy+0x18>
 88083dc:	2904b03a 	or	r2,r5,r4
 88083e0:	108000cc 	andi	r2,r2,3
 88083e4:	10000926 	beq	r2,zero,880840c <memcpy+0x3c>
 88083e8:	30000626 	beq	r6,zero,8808404 <memcpy+0x34>
 88083ec:	30cd883a 	add	r6,r6,r3
 88083f0:	28800003 	ldbu	r2,0(r5)
 88083f4:	29400044 	addi	r5,r5,1
 88083f8:	18800005 	stb	r2,0(r3)
 88083fc:	18c00044 	addi	r3,r3,1
 8808400:	30fffb1e 	bne	r6,r3,88083f0 <memcpy+0x20>
 8808404:	2005883a 	mov	r2,r4
 8808408:	f800283a 	ret
 880840c:	3811883a 	mov	r8,r7
 8808410:	200f883a 	mov	r7,r4
 8808414:	28c00017 	ldw	r3,0(r5)
 8808418:	31bffc04 	addi	r6,r6,-16
 880841c:	38c00015 	stw	r3,0(r7)
 8808420:	28800117 	ldw	r2,4(r5)
 8808424:	38800115 	stw	r2,4(r7)
 8808428:	28c00217 	ldw	r3,8(r5)
 880842c:	38c00215 	stw	r3,8(r7)
 8808430:	28800317 	ldw	r2,12(r5)
 8808434:	29400404 	addi	r5,r5,16
 8808438:	38800315 	stw	r2,12(r7)
 880843c:	39c00404 	addi	r7,r7,16
 8808440:	41bff436 	bltu	r8,r6,8808414 <memcpy+0x44>
 8808444:	008000c4 	movi	r2,3
 8808448:	1180072e 	bgeu	r2,r6,8808468 <memcpy+0x98>
 880844c:	1007883a 	mov	r3,r2
 8808450:	28800017 	ldw	r2,0(r5)
 8808454:	31bfff04 	addi	r6,r6,-4
 8808458:	29400104 	addi	r5,r5,4
 880845c:	38800015 	stw	r2,0(r7)
 8808460:	39c00104 	addi	r7,r7,4
 8808464:	19bffa36 	bltu	r3,r6,8808450 <memcpy+0x80>
 8808468:	3807883a 	mov	r3,r7
 880846c:	003fde06 	br	88083e8 <memcpy+0x18>

08808470 <strlen>:
 8808470:	208000cc 	andi	r2,r4,3
 8808474:	2011883a 	mov	r8,r4
 8808478:	1000161e 	bne	r2,zero,88084d4 <strlen+0x64>
 880847c:	20c00017 	ldw	r3,0(r4)
 8808480:	017fbff4 	movhi	r5,65279
 8808484:	297fbfc4 	addi	r5,r5,-257
 8808488:	01e02074 	movhi	r7,32897
 880848c:	39e02004 	addi	r7,r7,-32640
 8808490:	1945883a 	add	r2,r3,r5
 8808494:	11c4703a 	and	r2,r2,r7
 8808498:	00c6303a 	nor	r3,zero,r3
 880849c:	1886703a 	and	r3,r3,r2
 88084a0:	18000c1e 	bne	r3,zero,88084d4 <strlen+0x64>
 88084a4:	280d883a 	mov	r6,r5
 88084a8:	380b883a 	mov	r5,r7
 88084ac:	21000104 	addi	r4,r4,4
 88084b0:	20800017 	ldw	r2,0(r4)
 88084b4:	1187883a 	add	r3,r2,r6
 88084b8:	1946703a 	and	r3,r3,r5
 88084bc:	0084303a 	nor	r2,zero,r2
 88084c0:	10c4703a 	and	r2,r2,r3
 88084c4:	103ff926 	beq	r2,zero,88084ac <strlen+0x3c>
 88084c8:	20800007 	ldb	r2,0(r4)
 88084cc:	10000326 	beq	r2,zero,88084dc <strlen+0x6c>
 88084d0:	21000044 	addi	r4,r4,1
 88084d4:	20800007 	ldb	r2,0(r4)
 88084d8:	103ffd1e 	bne	r2,zero,88084d0 <strlen+0x60>
 88084dc:	2205c83a 	sub	r2,r4,r8
 88084e0:	f800283a 	ret

088084e4 <__register_exitproc>:
 88084e4:	defffa04 	addi	sp,sp,-24
 88084e8:	00822074 	movhi	r2,2177
 88084ec:	10a8ad04 	addi	r2,r2,-23884
 88084f0:	dc000015 	stw	r16,0(sp)
 88084f4:	14000017 	ldw	r16,0(r2)
 88084f8:	dd000415 	stw	r20,16(sp)
 88084fc:	2829883a 	mov	r20,r5
 8808500:	81405217 	ldw	r5,328(r16)
 8808504:	dcc00315 	stw	r19,12(sp)
 8808508:	dc800215 	stw	r18,8(sp)
 880850c:	dc400115 	stw	r17,4(sp)
 8808510:	dfc00515 	stw	ra,20(sp)
 8808514:	2023883a 	mov	r17,r4
 8808518:	3027883a 	mov	r19,r6
 880851c:	3825883a 	mov	r18,r7
 8808520:	28002526 	beq	r5,zero,88085b8 <__register_exitproc+0xd4>
 8808524:	29000117 	ldw	r4,4(r5)
 8808528:	008007c4 	movi	r2,31
 880852c:	11002716 	blt	r2,r4,88085cc <__register_exitproc+0xe8>
 8808530:	8800101e 	bne	r17,zero,8808574 <__register_exitproc+0x90>
 8808534:	2105883a 	add	r2,r4,r4
 8808538:	1085883a 	add	r2,r2,r2
 880853c:	20c00044 	addi	r3,r4,1
 8808540:	1145883a 	add	r2,r2,r5
 8808544:	0009883a 	mov	r4,zero
 8808548:	15000215 	stw	r20,8(r2)
 880854c:	28c00115 	stw	r3,4(r5)
 8808550:	2005883a 	mov	r2,r4
 8808554:	dfc00517 	ldw	ra,20(sp)
 8808558:	dd000417 	ldw	r20,16(sp)
 880855c:	dcc00317 	ldw	r19,12(sp)
 8808560:	dc800217 	ldw	r18,8(sp)
 8808564:	dc400117 	ldw	r17,4(sp)
 8808568:	dc000017 	ldw	r16,0(sp)
 880856c:	dec00604 	addi	sp,sp,24
 8808570:	f800283a 	ret
 8808574:	29802204 	addi	r6,r5,136
 8808578:	00800044 	movi	r2,1
 880857c:	110e983a 	sll	r7,r2,r4
 8808580:	30c04017 	ldw	r3,256(r6)
 8808584:	2105883a 	add	r2,r4,r4
 8808588:	1085883a 	add	r2,r2,r2
 880858c:	1185883a 	add	r2,r2,r6
 8808590:	19c6b03a 	or	r3,r3,r7
 8808594:	14802015 	stw	r18,128(r2)
 8808598:	14c00015 	stw	r19,0(r2)
 880859c:	00800084 	movi	r2,2
 88085a0:	30c04015 	stw	r3,256(r6)
 88085a4:	88bfe31e 	bne	r17,r2,8808534 <__register_exitproc+0x50>
 88085a8:	30804117 	ldw	r2,260(r6)
 88085ac:	11c4b03a 	or	r2,r2,r7
 88085b0:	30804115 	stw	r2,260(r6)
 88085b4:	003fdf06 	br	8808534 <__register_exitproc+0x50>
 88085b8:	00822074 	movhi	r2,2177
 88085bc:	10aef004 	addi	r2,r2,-17472
 88085c0:	100b883a 	mov	r5,r2
 88085c4:	80805215 	stw	r2,328(r16)
 88085c8:	003fd606 	br	8808524 <__register_exitproc+0x40>
 88085cc:	00800034 	movhi	r2,0
 88085d0:	10800004 	addi	r2,r2,0
 88085d4:	1000021e 	bne	r2,zero,88085e0 <__register_exitproc+0xfc>
 88085d8:	013fffc4 	movi	r4,-1
 88085dc:	003fdc06 	br	8808550 <__register_exitproc+0x6c>
 88085e0:	01006404 	movi	r4,400
 88085e4:	103ee83a 	callr	r2
 88085e8:	1007883a 	mov	r3,r2
 88085ec:	103ffa26 	beq	r2,zero,88085d8 <__register_exitproc+0xf4>
 88085f0:	80805217 	ldw	r2,328(r16)
 88085f4:	180b883a 	mov	r5,r3
 88085f8:	18000115 	stw	zero,4(r3)
 88085fc:	18800015 	stw	r2,0(r3)
 8808600:	80c05215 	stw	r3,328(r16)
 8808604:	18006215 	stw	zero,392(r3)
 8808608:	18006315 	stw	zero,396(r3)
 880860c:	0009883a 	mov	r4,zero
 8808610:	883fc826 	beq	r17,zero,8808534 <__register_exitproc+0x50>
 8808614:	003fd706 	br	8808574 <__register_exitproc+0x90>

08808618 <register_fini>:
 8808618:	f800283a 	ret

0880861c <__call_exitprocs>:
 880861c:	00822074 	movhi	r2,2177
 8808620:	10a8ad04 	addi	r2,r2,-23884
 8808624:	10800017 	ldw	r2,0(r2)
 8808628:	defff304 	addi	sp,sp,-52
 880862c:	df000b15 	stw	fp,44(sp)
 8808630:	d8800115 	stw	r2,4(sp)
 8808634:	00800034 	movhi	r2,0
 8808638:	10800004 	addi	r2,r2,0
 880863c:	1005003a 	cmpeq	r2,r2,zero
 8808640:	d8800215 	stw	r2,8(sp)
 8808644:	d8800117 	ldw	r2,4(sp)
 8808648:	dd400815 	stw	r21,32(sp)
 880864c:	dd000715 	stw	r20,28(sp)
 8808650:	10805204 	addi	r2,r2,328
 8808654:	dfc00c15 	stw	ra,48(sp)
 8808658:	ddc00a15 	stw	r23,40(sp)
 880865c:	dd800915 	stw	r22,36(sp)
 8808660:	dcc00615 	stw	r19,24(sp)
 8808664:	dc800515 	stw	r18,20(sp)
 8808668:	dc400415 	stw	r17,16(sp)
 880866c:	dc000315 	stw	r16,12(sp)
 8808670:	282b883a 	mov	r21,r5
 8808674:	2039883a 	mov	fp,r4
 8808678:	d8800015 	stw	r2,0(sp)
 880867c:	2829003a 	cmpeq	r20,r5,zero
 8808680:	d8800117 	ldw	r2,4(sp)
 8808684:	14405217 	ldw	r17,328(r2)
 8808688:	88001026 	beq	r17,zero,88086cc <__call_exitprocs+0xb0>
 880868c:	ddc00017 	ldw	r23,0(sp)
 8808690:	88800117 	ldw	r2,4(r17)
 8808694:	8c802204 	addi	r18,r17,136
 8808698:	143fffc4 	addi	r16,r2,-1
 880869c:	80000916 	blt	r16,zero,88086c4 <__call_exitprocs+0xa8>
 88086a0:	05bfffc4 	movi	r22,-1
 88086a4:	a000151e 	bne	r20,zero,88086fc <__call_exitprocs+0xe0>
 88086a8:	8409883a 	add	r4,r16,r16
 88086ac:	2105883a 	add	r2,r4,r4
 88086b0:	1485883a 	add	r2,r2,r18
 88086b4:	10c02017 	ldw	r3,128(r2)
 88086b8:	a8c01126 	beq	r21,r3,8808700 <__call_exitprocs+0xe4>
 88086bc:	843fffc4 	addi	r16,r16,-1
 88086c0:	85bff81e 	bne	r16,r22,88086a4 <__call_exitprocs+0x88>
 88086c4:	d8800217 	ldw	r2,8(sp)
 88086c8:	10003126 	beq	r2,zero,8808790 <__call_exitprocs+0x174>
 88086cc:	dfc00c17 	ldw	ra,48(sp)
 88086d0:	df000b17 	ldw	fp,44(sp)
 88086d4:	ddc00a17 	ldw	r23,40(sp)
 88086d8:	dd800917 	ldw	r22,36(sp)
 88086dc:	dd400817 	ldw	r21,32(sp)
 88086e0:	dd000717 	ldw	r20,28(sp)
 88086e4:	dcc00617 	ldw	r19,24(sp)
 88086e8:	dc800517 	ldw	r18,20(sp)
 88086ec:	dc400417 	ldw	r17,16(sp)
 88086f0:	dc000317 	ldw	r16,12(sp)
 88086f4:	dec00d04 	addi	sp,sp,52
 88086f8:	f800283a 	ret
 88086fc:	8409883a 	add	r4,r16,r16
 8808700:	88c00117 	ldw	r3,4(r17)
 8808704:	2105883a 	add	r2,r4,r4
 8808708:	1445883a 	add	r2,r2,r17
 880870c:	18ffffc4 	addi	r3,r3,-1
 8808710:	11800217 	ldw	r6,8(r2)
 8808714:	1c001526 	beq	r3,r16,880876c <__call_exitprocs+0x150>
 8808718:	10000215 	stw	zero,8(r2)
 880871c:	303fe726 	beq	r6,zero,88086bc <__call_exitprocs+0xa0>
 8808720:	00c00044 	movi	r3,1
 8808724:	1c06983a 	sll	r3,r3,r16
 8808728:	90804017 	ldw	r2,256(r18)
 880872c:	8cc00117 	ldw	r19,4(r17)
 8808730:	1884703a 	and	r2,r3,r2
 8808734:	10001426 	beq	r2,zero,8808788 <__call_exitprocs+0x16c>
 8808738:	90804117 	ldw	r2,260(r18)
 880873c:	1884703a 	and	r2,r3,r2
 8808740:	10000c1e 	bne	r2,zero,8808774 <__call_exitprocs+0x158>
 8808744:	2105883a 	add	r2,r4,r4
 8808748:	1485883a 	add	r2,r2,r18
 880874c:	11400017 	ldw	r5,0(r2)
 8808750:	e009883a 	mov	r4,fp
 8808754:	303ee83a 	callr	r6
 8808758:	88800117 	ldw	r2,4(r17)
 880875c:	98bfc81e 	bne	r19,r2,8808680 <__call_exitprocs+0x64>
 8808760:	b8800017 	ldw	r2,0(r23)
 8808764:	147fd526 	beq	r2,r17,88086bc <__call_exitprocs+0xa0>
 8808768:	003fc506 	br	8808680 <__call_exitprocs+0x64>
 880876c:	8c000115 	stw	r16,4(r17)
 8808770:	003fea06 	br	880871c <__call_exitprocs+0x100>
 8808774:	2105883a 	add	r2,r4,r4
 8808778:	1485883a 	add	r2,r2,r18
 880877c:	11000017 	ldw	r4,0(r2)
 8808780:	303ee83a 	callr	r6
 8808784:	003ff406 	br	8808758 <__call_exitprocs+0x13c>
 8808788:	303ee83a 	callr	r6
 880878c:	003ff206 	br	8808758 <__call_exitprocs+0x13c>
 8808790:	88800117 	ldw	r2,4(r17)
 8808794:	1000081e 	bne	r2,zero,88087b8 <__call_exitprocs+0x19c>
 8808798:	89000017 	ldw	r4,0(r17)
 880879c:	20000726 	beq	r4,zero,88087bc <__call_exitprocs+0x1a0>
 88087a0:	b9000015 	stw	r4,0(r23)
 88087a4:	8809883a 	mov	r4,r17
 88087a8:	00000000 	call	0 <__alt_mem_onchip_memory2_0-0x3000>
 88087ac:	bc400017 	ldw	r17,0(r23)
 88087b0:	883fb71e 	bne	r17,zero,8808690 <__call_exitprocs+0x74>
 88087b4:	003fc506 	br	88086cc <__call_exitprocs+0xb0>
 88087b8:	89000017 	ldw	r4,0(r17)
 88087bc:	882f883a 	mov	r23,r17
 88087c0:	2023883a 	mov	r17,r4
 88087c4:	883fb21e 	bne	r17,zero,8808690 <__call_exitprocs+0x74>
 88087c8:	003fc006 	br	88086cc <__call_exitprocs+0xb0>

088087cc <alt_sim_halt>:

/*
 * Routine called on exit.
 */
static ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
 88087cc:	defffd04 	addi	sp,sp,-12
 88087d0:	df000215 	stw	fp,8(sp)
 88087d4:	df000204 	addi	fp,sp,8
 88087d8:	e13fff15 	stw	r4,-4(fp)
  int r2 = exit_code;
 88087dc:	e0bfff17 	ldw	r2,-4(fp)
 88087e0:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 88087e4:	e0bffe17 	ldw	r2,-8(fp)
 88087e8:	1005003a 	cmpeq	r2,r2,zero
 88087ec:	1000021e 	bne	r2,zero,88087f8 <alt_sim_halt+0x2c>
    ALT_SIM_FAIL();
 88087f0:	002af070 	cmpltui	zero,zero,43969
 88087f4:	00000106 	br	88087fc <alt_sim_halt+0x30>
  } else {
    ALT_SIM_PASS();
 88087f8:	002af0b0 	cmpltui	zero,zero,43970
  }
#endif /* DEBUG_STUB */
}
 88087fc:	e037883a 	mov	sp,fp
 8808800:	df000017 	ldw	fp,0(sp)
 8808804:	dec00104 	addi	sp,sp,4
 8808808:	f800283a 	ret

0880880c <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 880880c:	defffd04 	addi	sp,sp,-12
 8808810:	dfc00215 	stw	ra,8(sp)
 8808814:	df000115 	stw	fp,4(sp)
 8808818:	df000104 	addi	fp,sp,4
 880881c:	e13fff15 	stw	r4,-4(fp)
  ALT_OS_STOP();

  /* Provide notification to the simulator that we've stopped */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_SIM_HALT().\r\n");
  ALT_SIM_HALT(exit_code);
 8808820:	e13fff17 	ldw	r4,-4(fp)
 8808824:	88087cc0 	call	88087cc <alt_sim_halt>

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 8808828:	003fff06 	br	8808828 <_exit+0x1c>
 880882c:	08808618 	cmpnei	r2,at,536
