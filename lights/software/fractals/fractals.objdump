
fractals.elf:     file format elf32-littlenios2
fractals.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x080001b4

Program Header:
    LOAD off    0x00001000 vaddr 0x08000000 paddr 0x08000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x08000020 paddr 0x08000020 align 2**12
         filesz 0x00011db8 memsz 0x00011db8 flags r-x
    LOAD off    0x00012dd8 vaddr 0x08011dd8 paddr 0x08013998 align 2**12
         filesz 0x00001bc0 memsz 0x00001bc0 flags rw-
    LOAD off    0x00015558 vaddr 0x08015558 paddr 0x08015558 align 2**12
         filesz 0x00000000 memsz 0x0000030c flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  08000000  08000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000194  08000020  08000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0001167c  080001b4  080001b4  000011b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000005a8  08011830  08011830  00012830  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001bc0  08011dd8  08013998  00012dd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          0000030c  08015558  08015558  00015558  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000023  00000000  00000000  00014998  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00001018  00000000  00000000  000149c0  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 00001b16  00000000  00000000  000159d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0002931c  00000000  00000000  000174ee  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00009d6e  00000000  00000000  0004080a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   000195f2  00000000  00000000  0004a578  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00002004  00000000  00000000  00063b6c  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00002901  00000000  00000000  00065b70  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000e66b  00000000  00000000  00068471  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000030  00000000  00000000  00076adc  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000ce0  00000000  00000000  00076b10  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0007b40e  2**0
                  CONTENTS, READONLY
 18 .cpu          00000005  00000000  00000000  0007b411  2**0
                  CONTENTS, READONLY
 19 .simulation_enabled 00000001  00000000  00000000  0007b416  2**0
                  CONTENTS, READONLY
 20 .sysid_hash   00000004  00000000  00000000  0007b417  2**0
                  CONTENTS, READONLY
 21 .sysid_base   00000004  00000000  00000000  0007b41b  2**0
                  CONTENTS, READONLY
 22 .sysid_time   00000004  00000000  00000000  0007b41f  2**0
                  CONTENTS, READONLY
 23 .stderr_dev   0000000b  00000000  00000000  0007b423  2**0
                  CONTENTS, READONLY
 24 .stdin_dev    0000000b  00000000  00000000  0007b42e  2**0
                  CONTENTS, READONLY
 25 .stdout_dev   0000000b  00000000  00000000  0007b439  2**0
                  CONTENTS, READONLY
 26 .sopc_system_name 0000000b  00000000  00000000  0007b444  2**0
                  CONTENTS, READONLY
 27 .quartus_project_dir 00000020  00000000  00000000  0007b44f  2**0
                  CONTENTS, READONLY
 28 .jdi          0001085c  00000000  00000000  0007b46f  2**0
                  CONTENTS, READONLY
 29 .sopcinfo     00113e1c  00000000  00000000  0008bccb  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
08000000 l    d  .entry	00000000 .entry
08000020 l    d  .exceptions	00000000 .exceptions
080001b4 l    d  .text	00000000 .text
08011830 l    d  .rodata	00000000 .rodata
08011dd8 l    d  .rwdata	00000000 .rwdata
08015558 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
080001fc l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 w_pow.c
00000000 l    df *ABS*	00000000 e_pow.c
08011924 l     O .rodata	00000010 bp
08011934 l     O .rodata	00000010 dp_l
08011944 l     O .rodata	00000010 dp_h
00000000 l    df *ABS*	00000000 e_sqrt.c
00000000 l    df *ABS*	00000000 s_fabs.c
00000000 l    df *ABS*	00000000 s_finite.c
00000000 l    df *ABS*	00000000 s_isnand.c
00000000 l    df *ABS*	00000000 s_lib_ver.c
00000000 l    df *ABS*	00000000 s_matherr.c
00000000 l    df *ABS*	00000000 s_nan.c
00000000 l    df *ABS*	00000000 s_rint.c
08011954 l     O .rodata	00000010 TWO52
00000000 l    df *ABS*	00000000 s_scalbn.c
00000000 l    df *ABS*	00000000 s_copysign.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 fp-bit.c
08002bd0 l     F .text	000001e4 _fpadd_parts
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
0800332c l     F .text	00000410 _fpadd_parts
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
08004298 l     F .text	0000007c udivmodsi4
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 errno.c
00000000 l    df *ABS*	00000000 impure.c
08011dd8 l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
08004ebc l     F .text	00000058 __sprint_r
08011afe l     O .rodata	00000010 blanks.3452
08011aee l     O .rodata	00000010 zeroes.3453
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
08006f20 l     F .text	00000218 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
0800891c l     F .text	00000058 std
08008a28 l     F .text	00000008 __fp_lock
08008a30 l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 locale.c
08013954 l     O .rwdata	00000004 charset
08011b30 l     O .rodata	00000030 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
08011c78 l     O .rodata	0000000c p05.2458
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_isinfd.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 alt_close.c
0800cf7c l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0800cfdc l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0800d0dc l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
0800d1fc l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0800d2dc l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0800d438 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
0800d664 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
08013978 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
0800d900 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
08012794 l     O .rwdata	00001060 jtag_uart_0
080137f4 l     O .rwdata	0000003c mailbox_0
08013830 l     O .rwdata	0000003c mailbox_1
0801386c l     O .rwdata	0000003c mailbox_2
080138a8 l     O .rwdata	0000003c mailbox_3
080138e4 l     O .rwdata	00000054 video_pixel_buffer_dma_0
0800dc0c l     F .text	00000038 alt_dev_reg
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0800de4c l     F .text	00000228 altera_avalon_jtag_uart_irq
0800e074 l     F .text	000000b0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_mailbox.c
0800e848 l     F .text	0000006c alt_avalon_mutex_reg
0800e8b4 l     F .text	00000060 alt_get_errno
0800ea48 l     F .text	00000050 alt_mailbox_increment_ptr
00000000 l    df *ABS*	00000000 altera_avalon_mutex.c
0800ec18 l     F .text	0000007c alt_mutex_trylock
0800ecec l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 altera_up_avalon_video_pixel_buffer_dma.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
080106d4 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
08010b8c l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
08010cc8 l     F .text	000000dc alt_file_locked
08010f2c l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_irq.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
080115ac l     F .text	00000004 register_fini
00000000 l    df *ABS*	00000000 alt_exit.c
08011760 l     F .text	00000040 alt_sim_halt
0800a6d8 g     F .text	00000094 _mprec_log10
00007000 g       *ABS*	00000000 __alt_mem_onchip_memory2_3
0800a7c4 g     F .text	00000088 __any_on
0800bea0 g     F .text	00000070 _isatty_r
08011c50 g     O .rodata	00000028 __mprec_tinytens
0800d498 g     F .text	0000006c alt_main
0800ea98 g     F .text	000000a8 altera_avalon_mailbox_pend
0800fb88 g     F .text	000003d0 alt_up_pixel_buffer_dma_draw_vline
08004d94 g     F .text	000000a0 _puts_r
080155d4 g     O .bss	00000100 alt_irq
080026d0 g     F .text	00000018 fabs
0800bf10 g     F .text	00000078 _lseek_r
0801555c g     O .bss	00000004 mailbox_0
08013998 g       *ABS*	00000000 __flash_rwdata_start
08003e4c g     F .text	00000088 __eqdf2
08015864 g       *ABS*	00000000 __alt_heap_start
08015560 g     O .bss	00000004 mailbox_2
0800eb40 g     F .text	000000d8 altera_avalon_mailbox_get
08004d1c g     F .text	00000044 printf
0800b96c g     F .text	00000068 __sseek
08008984 g     F .text	000000a4 __sinit
0800965c g     F .text	00000084 _setlocale_r
08008a84 g     F .text	00000068 __sfmoreglue
0800d524 g     F .text	00000020 __malloc_unlock
08002e88 g     F .text	00000174 __divsf3
0800a154 g     F .text	000000e0 memmove
08008a74 g     F .text	00000010 _cleanup
0800edac g     F .text	00000040 altera_avalon_mutex_trylock
0800a84c g     F .text	000000bc _Balloc
08003184 g     F .text	00000094 __fixsfsi
08013940 g     O .rwdata	00000004 n
0800ef5c g     F .text	000001a0 alt_up_pixel_buffer_dma_draw
08003f5c g     F .text	00000088 __gtdf2
08004d0c g     F .text	00000010 __errno
0800ef1c g     F .text	00000040 alt_up_pixel_buffer_dma_open_dev
08000000 g     F .entry	0000001c __reset
0800ee48 g     F .text	0000007c altera_avalon_mutex_is_mine
08000020 g       *ABS*	00000000 __flash_exceptions_start
0800be2c g     F .text	00000074 _fstat_r
08015590 g     O .bss	00000004 errno
080041ec g     F .text	00000038 __make_dp
080047cc g     F .text	0000002c __make_fp
08015598 g     O .bss	00000004 alt_argv
0801b938 g       *ABS*	00000000 _gp
08002db4 g     F .text	00000070 __subsf3
0800f0fc g     F .text	00000058 alt_up_pixel_buffer_dma_change_back_buffer_address
00005000 g       *ABS*	00000000 __alt_mem_onchip_memory2_2
08012614 g     O .rwdata	00000180 alt_fd_list
08015564 g     O .bss	00000004 mailbox_1
080107fc g     F .text	00000094 alt_find_dev
0800a0b4 g     F .text	000000a0 memcpy
08008a68 g     F .text	0000000c _cleanup_r
080040f4 g     F .text	000000f8 __floatsidf
08010c50 g     F .text	00000078 alt_io_redirect
08003fe4 g     F .text	00000088 __ltdf2
08011830 g       *ABS*	00000000 __DTOR_END__
08004e34 g     F .text	00000014 puts
08011130 g     F .text	00000020 altera_nios2_irq_init
0800a628 g     F .text	000000b0 __ratio
0800e98c g     F .text	000000bc altera_avalon_mailbox_post
0800f1ac g     F .text	00000034 alt_up_pixel_buffer_dma_check_swap_buffers_status
0800e28c g     F .text	00000224 altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
08004d60 g     F .text	00000034 _printf_r
00003000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
080043d4 g     F .text	00000008 __udivsi3
0800d13c g     F .text	000000c0 isatty
08011b60 g     O .rodata	000000c8 __mprec_tens
0800e96c g     F .text	00000020 altera_avalon_mailbox_close
0800f838 g     F .text	00000350 alt_up_pixel_buffer_dma_draw_hline
08009638 g     F .text	00000008 __locale_charset
08003074 g     F .text	00000078 __lesf2
08011328 g     F .text	00000090 alt_icache_flush
08015584 g     O .bss	00000004 __malloc_top_pad
08013950 g     O .rwdata	00000004 __mb_cur_max
08009640 g     F .text	0000000c _localeconv_r
0800af44 g     F .text	0000003c __i2b
0800901c g     F .text	0000049c __sfvwrite_r
0800b8f4 g     F .text	00000070 _sbrk_r
0801001c g     F .text	000000d0 helper_plot_pixel
0800bf88 g     F .text	00000078 _read_r
080121d8 g     O .rwdata	0000000c __lc_ctype
08013970 g     O .rwdata	00000004 alt_max_fd
08004b0c g     F .text	00000138 __unpack_d
0800bd08 g     F .text	00000110 _fclose_r
080088e8 g     F .text	00000034 fflush
08015588 g     O .bss	00000004 __malloc_max_sbrked_mem
08003218 g     F .text	00000054 __extendsfdf2
080037bc g     F .text	00000074 __adddf3
0800a508 g     F .text	00000120 __b2d
0800f1e0 g     F .text	00000164 alt_up_pixel_buffer_dma_clear_screen
0800c5dc g     F .text	000005b0 __umoddi3
0800d348 g     F .text	000000f0 lseek
0800eec4 g     F .text	00000058 altera_avalon_mutex_first_lock
08013944 g     O .rwdata	00000004 __fdlib_version
0801394c g     O .rwdata	00000004 _global_impure_ptr
0800b2c0 g     F .text	000005f4 _realloc_r
08015864 g       *ABS*	00000000 __bss_end
08010a94 g     F .text	000000f8 alt_iic_isr_register
0800f344 g     F .text	000004f4 alt_up_pixel_buffer_dma_draw_box
08011024 g     F .text	0000010c alt_tick
0800c000 g     F .text	000005dc __udivdi3
08011c28 g     O .rodata	00000028 __mprec_bigtens
0800b1a0 g     F .text	00000120 __s2b
0800ccec g     F .text	00000194 __floatunsidf
0800a428 g     F .text	00000060 __mcmp
08015558 g     O .bss	00000004 message
08008a50 g     F .text	00000018 __fp_lock_all
08010a4c g     F .text	00000048 alt_ic_irq_enabled
08010f8c g     F .text	00000098 alt_alarm_stop
080155a0 g     O .bss	00000004 alt_irq_active
080000ec g     F .exceptions	000000c8 alt_irq_handler
080125ec g     O .rwdata	00000028 alt_dev_null
08000a50 g     F .text	00000114 barrier
0800ec94 g     F .text	00000058 altera_avalon_mutex_open
0800274c g     F .text	00000210 rint
0800465c g     F .text	000000c8 __unpack_f
080105dc g     F .text	00000044 alt_dcache_flush_all
0800a2f4 g     F .text	00000070 __hi0bits
0800ff58 g     F .text	000000c4 alt_up_pixel_buffer_dma_draw_rectangle
0800cc14 g     F .text	000000d8 __fixdfsi
08013998 g       *ABS*	00000000 __ram_rwdata_end
08013968 g     O .rwdata	00000008 alt_dev_list
0800d7e0 g     F .text	00000120 write
080100ec g     F .text	0000039c alt_up_pixel_buffer_dma_draw_line
08013984 g     O .rwdata	00000008 alt_mutex_list
08011dd8 g       *ABS*	00000000 __ram_rodata_end
0800d008 g     F .text	000000d4 fstat
0800406c g     F .text	00000088 __ledf2
0800b080 g     F .text	00000120 __pow5mult
08015578 g     O .bss	00000004 __nlocale_changed
080043dc g     F .text	00000008 __umodsi3
08015864 g       *ABS*	00000000 end
080044fc g     F .text	00000160 __pack_f
0800dd8c g     F .text	000000c0 altera_avalon_jtag_uart_init
0801182c g       *ABS*	00000000 __CTOR_LIST__
08120000 g       *ABS*	00000000 __alt_stack_pointer
0800447c g     F .text	00000080 __clzsi2
0800e4b0 g     F .text	00000240 altera_avalon_jtag_uart_write
0800e6f0 g     F .text	00000158 alt_avalon_mailbox_init
08008974 g     F .text	00000004 __sfp_lock_acquire
08009fd0 g     F .text	000000e4 memchr
08004f14 g     F .text	00001eac ___vfprintf_internal_r
08008d08 g     F .text	00000314 _free_r
080115b0 g     F .text	000001b0 __call_exitprocs
0801557c g     O .bss	00000004 __mlocale_changed
0801395c g     O .rwdata	00000004 __malloc_sbrk_base
080001b4 g     F .text	0000004c _start
080155a4 g     O .bss	00000004 _alt_tick_rate
0800ac10 g     F .text	0000014c __lshift
080155a8 g     O .bss	00000004 _alt_nticks
0800d544 g     F .text	00000120 read
0800d994 g     F .text	00000278 alt_sys_init
080030ec g     F .text	00000098 __floatsisf
08011478 g     F .text	00000134 __register_exitproc
0800edec g     F .text	0000005c altera_avalon_mutex_unlock
0800ad5c g     F .text	000001e8 __multiply
08001108 g     F .text	00001300 __ieee754_pow
0800e124 g     F .text	00000074 altera_avalon_jtag_uart_close
08000c80 g     F .text	00000488 pow
08011dd8 g       *ABS*	00000000 __ram_rwdata_start
08011830 g       *ABS*	00000000 __ram_rodata_start
080155ac g     O .bss	00000028 __malloc_current_mallinfo
00004000 g       *ABS*	00000000 __alt_mem_onchip_memory2_1
0800a908 g     F .text	0000017c __d2b
0800dc44 g     F .text	00000058 altera_avalon_jtag_uart_read_fd
08011270 g     F .text	000000b8 alt_get_fd
08004c44 g     F .text	000000c8 __fpcmp_parts_d
0800bc98 g     F .text	00000070 _close_r
08011404 g     F .text	00000074 memcmp
0800dcf4 g     F .text	00000048 altera_avalon_jtag_uart_close_fd
08015568 g     O .bss	00000004 col
08015864 g       *ABS*	00000000 __alt_stack_base
0800dd3c g     F .text	00000050 altera_avalon_jtag_uart_ioctl_fd
08006de4 g     F .text	0000013c __swsetup_r
08003bf4 g     F .text	00000258 __divdf3
08008aec g     F .text	000000f0 __sfp
0800a76c g     F .text	00000058 __copybits
080121e4 g     O .rwdata	00000408 __malloc_av_
08008980 g     F .text	00000004 __sinit_lock_release
08003830 g     F .text	000003c4 __muldf3
0800ba50 g     F .text	00000060 __sread
08011964 g     O .rodata	00000010 __thenan_sf
08011150 g     F .text	00000120 alt_find_file
08010620 g     F .text	000000b4 alt_dev_llist_insert
0800d504 g     F .text	00000020 __malloc_lock
0800d724 g     F .text	000000bc sbrk
080086ec g     F .text	000001fc _fflush_r
0800bbe4 g     F .text	000000b4 _calloc_r
08015558 g       *ABS*	00000000 __bss_start
0800a234 g     F .text	00000098 memset
08000200 g     F .text	00000850 main
0801559c g     O .bss	00000004 alt_envp
0801558c g     O .bss	00000004 __malloc_max_total_mem
0800f154 g     F .text	00000058 alt_up_pixel_buffer_dma_swap_buffers
0800dc9c g     F .text	00000058 altera_avalon_jtag_uart_write_fd
0800b964 g     F .text	00000008 __sclose
08002734 g     F .text	00000008 matherr
08120000 g       *ABS*	00000000 __alt_heap_limit
0800be18 g     F .text	00000014 fclose
08004224 g     F .text	00000074 __truncdfsf2
080156d4 g     O .bss	00000190 _atexit0
0800ed6c g     F .text	00000040 altera_avalon_mutex_lock
08007138 g     F .text	000015b4 _dtoa_r
08009890 g     F .text	00000740 _malloc_r
08013974 g     O .rwdata	00000004 alt_errno
08009580 g     F .text	000000b8 _fwalk
08004314 g     F .text	00000060 __divsi3
08011974 g     O .rodata	00000014 __thenan_df
08008bdc g     F .text	0000012c _malloc_trim_r
08011830 g       *ABS*	00000000 __CTOR_END__
080026e8 g     F .text	0000001c finite
0800bab0 g     F .text	000000bc strcmp
08011830 g       *ABS*	00000000 __flash_rodata_start
08011830 g       *ABS*	00000000 __DTOR_LIST__
08002b3c g     F .text	00000024 copysign
08003ed4 g     F .text	00000088 __nedf2
11000000 g       *ABS*	00000000 __alt_mem_sram_0
0800d960 g     F .text	00000034 alt_irq_init
0800d6c4 g     F .text	00000060 alt_release_fd
08011988 g     O .rodata	00000100 __clz_tab
08015580 g     O .bss	00000004 _PathLocale
080113b8 g     F .text	00000014 atexit
0801556c g     O .bss	00000004 my_pixel_buffer
08002ffc g     F .text	00000078 __gesf2
0800bb6c g     F .text	00000078 _write_r
08015570 g     O .bss	00000004 mailbox_3
080096e0 g     F .text	0000001c setlocale
08013948 g     O .rwdata	00000004 _impure_ptr
08015594 g     O .bss	00000004 alt_argc
0800295c g     F .text	000001e0 scalbn
08010798 g     F .text	00000064 _do_dtors
08000000 g       *ABS*	00000000 __alt_mem_sdram_0
08000020 g       .exceptions	00000000 alt_irq_entry
0800a488 g     F .text	00000080 __ulp
0800b8b4 g     F .text	00000040 __isinfd
08008a38 g     F .text	00000018 __fp_unlock_all
0801397c g     O .rwdata	00000008 alt_mailbox_list
08013938 g     O .rwdata	00000004 num_rows
08013960 g     O .rwdata	00000008 alt_fs_list
0800273c g     F .text	00000010 nan
08000020 g       *ABS*	00000000 __ram_exceptions_start
0800964c g     F .text	00000010 localeconv
08002408 g     F .text	000002c8 __ieee754_sqrt
080108c0 g     F .text	00000050 alt_ic_isr_register
08013998 g       *ABS*	00000000 _edata
08015864 g       *ABS*	00000000 _end
08000b94 g     F .text	000000ec post
080001b4 g       *ABS*	00000000 __ram_exceptions_end
0800e198 g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
080109ac g     F .text	000000a0 alt_ic_irq_disable
0800b9d4 g     F .text	0000007c __swrite
08013958 g     O .rwdata	00000004 __malloc_trim_threshold
080113cc g     F .text	00000038 exit
080094b8 g     F .text	000000c8 _fwalk_reent
0800326c g     F .text	000000c0 __floatunsisf
0800aa84 g     F .text	0000018c __mdiff
08004374 g     F .text	00000060 __modsi3
08120000 g       *ABS*	00000000 __alt_data_end
08000020 g     F .exceptions	00000000 alt_exception
08008978 g     F .text	00000004 __sfp_lock_release
08002b60 g     F .text	00000070 __fixunssfsi
0800e914 g     F .text	00000058 altera_avalon_mailbox_open
08004724 g     F .text	000000a8 __fpcmp_parts_f
080117a0 g     F .text	00000020 _exit
08002704 g     F .text	00000030 __isnand
08010488 g     F .text	00000154 alt_alarm_start
080043e4 g     F .text	00000098 __muldi3
080096fc g     F .text	00000194 __smakebuf_r
08004e48 g     F .text	00000074 strlen
08010da4 g     F .text	00000188 open
0800cb8c g     F .text	00000088 __gedf2
08010890 g     F .text	00000030 alt_icache_flush_all
08000b64 g     F .text	00000030 pend
0801398c g     O .rwdata	00000004 alt_priority_mask
0801393c g     O .rwdata	00000004 num_cols
08010910 g     F .text	0000009c alt_ic_irq_enable
08006dc0 g     F .text	00000024 __vfprintf_internal
0800ed4c g     F .text	00000020 altera_avalon_mutex_close
0800373c g     F .text	00000080 __subdf3
0800a364 g     F .text	000000c4 __lo0bits
08013990 g     O .rwdata	00000008 alt_alarm_list
08010734 g     F .text	00000064 _do_ctors
0800ce80 g     F .text	000000fc close
08002e24 g     F .text	00000064 __addsf3
0800d25c g     F .text	00000080 alt_load
08015574 g     O .bss	00000004 row
080047f8 g     F .text	00000314 __pack_d
00000000  w      *UND*	00000000 free
0800897c g     F .text	00000004 __sinit_lock_acquire
0800af80 g     F .text	00000100 __multadd
0800a2cc g     F .text	00000028 _Bfree



Disassembly of section .entry:

08000000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && !defined(ALT_SIM_OPTIMIZE)
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
 8000000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
 8000004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
 8000008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
 800000c:	00bffd16 	blt	zero,r2,8000004 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 8000010:	00420034 	movhi	at,2048
    ori r1, r1, %lo(_start)
 8000014:	08406d14 	ori	at,at,436
    jmp r1
 8000018:	0800683a 	jmp	at
 800001c:	00000000 	call	0 <__alt_mem_onchip_memory2_0-0x3000>

Disassembly of section .exceptions:

08000020 <alt_exception>:
         * Process an exception.  For all exceptions we must preserve all
         * caller saved registers on the stack (See the Nios2 ABI
         * documentation for details).
         */

        addi  sp, sp, -76
 8000020:	deffed04 	addi	sp,sp,-76

#endif

#endif

        stw   ra,  0(sp)
 8000024:	dfc00015 	stw	ra,0(sp)
        /*
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */

        stw   r1,   8(sp)
 8000028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 800002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 8000030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 8000034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 8000038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 800003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 8000040:	d9c00815 	stw	r7,32(sp)

        rdctl r5, estatus
 8000044:	000b307a 	rdctl	r5,estatus

        stw   r8,  36(sp)
 8000048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 800004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 8000050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 8000054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 8000058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 800005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 8000060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 8000064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 8000068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 800006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 8000070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 8000074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 8000078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 800007c:	10000326 	beq	r2,zero,800008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 8000080:	20000226 	beq	r4,zero,800008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 8000084:	80000ec0 	call	80000ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 8000088:	00000306 	br	8000098 <alt_exception+0x78>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
 800008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
 8000090:	e8bfff17 	ldw	r2,-4(ea)
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
 8000094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 8000098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 800009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 80000a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 80000a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 80000a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 80000ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 80000b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 80000b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 80000b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 80000bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 80000c0:	d9c00817 	ldw	r7,32(sp)
#ifdef ALT_STACK_CHECK
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif
#endif

        ldw   r8,  36(sp)
 80000c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 80000c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 80000cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 80000d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 80000d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 80000d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 80000dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 80000e0:	dbc01017 	ldw	r15,64(sp)
#endif

        ldw   sp,  76(sp)

#else
        addi  sp, sp, 76
 80000e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 80000e8:	ef80083a 	eret

080000ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 80000ec:	defff904 	addi	sp,sp,-28
 80000f0:	dfc00615 	stw	ra,24(sp)
 80000f4:	df000515 	stw	fp,20(sp)
 80000f8:	df000504 	addi	fp,sp,20
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 80000fc:	0005313a 	rdctl	r2,ipending
 8000100:	e0bffc15 	stw	r2,-16(fp)

  return active;
 8000104:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 8000108:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
 800010c:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 8000110:	00800044 	movi	r2,1
 8000114:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 8000118:	e0ffff17 	ldw	r3,-4(fp)
 800011c:	e0bffe17 	ldw	r2,-8(fp)
 8000120:	1884703a 	and	r2,r3,r2
 8000124:	1005003a 	cmpeq	r2,r2,zero
 8000128:	1000161e 	bne	r2,zero,8000184 <alt_irq_handler+0x98>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 800012c:	e0bffd17 	ldw	r2,-12(fp)
 8000130:	00c20074 	movhi	r3,2049
 8000134:	18d57504 	addi	r3,r3,21972
 8000138:	100490fa 	slli	r2,r2,3
 800013c:	10c5883a 	add	r2,r2,r3
 8000140:	11400017 	ldw	r5,0(r2)
 8000144:	e0bffd17 	ldw	r2,-12(fp)
 8000148:	00c20074 	movhi	r3,2049
 800014c:	18d57504 	addi	r3,r3,21972
 8000150:	100490fa 	slli	r2,r2,3
 8000154:	10c5883a 	add	r2,r2,r3
 8000158:	10800104 	addi	r2,r2,4
 800015c:	11000017 	ldw	r4,0(r2)
 8000160:	283ee83a 	callr	r5
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 8000164:	0005313a 	rdctl	r2,ipending
 8000168:	e0bffb15 	stw	r2,-20(fp)

  return active;
 800016c:	e0bffb17 	ldw	r2,-20(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
 8000170:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
 8000174:	e0bfff17 	ldw	r2,-4(fp)
 8000178:	1004c03a 	cmpne	r2,r2,zero
 800017c:	103fe31e 	bne	r2,zero,800010c <alt_irq_handler+0x20>
 8000180:	00000706 	br	80001a0 <alt_irq_handler+0xb4>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
 8000184:	e0bffe17 	ldw	r2,-8(fp)
 8000188:	1085883a 	add	r2,r2,r2
 800018c:	e0bffe15 	stw	r2,-8(fp)
      i++;
 8000190:	e0bffd17 	ldw	r2,-12(fp)
 8000194:	10800044 	addi	r2,r2,1
 8000198:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 800019c:	003fde06 	br	8000118 <alt_irq_handler+0x2c>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
 80001a0:	e037883a 	mov	sp,fp
 80001a4:	dfc00117 	ldw	ra,4(sp)
 80001a8:	df000017 	ldw	fp,0(sp)
 80001ac:	dec00204 	addi	sp,sp,8
 80001b0:	f800283a 	ret

Disassembly of section .text:

080001b4 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
 80001b4:	00810014 	movui	r2,1024
#endif

0:
    initd 0(r2)
 80001b8:	10000033 	initd	0(r2)
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
 80001bc:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
 80001c0:	00bffd16 	blt	zero,r2,80001b8 <_start+0x4>
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 80001c4:	06c204b4 	movhi	sp,2066
    ori sp, sp, %lo(__alt_stack_pointer)
 80001c8:	dec00014 	ori	sp,sp,0

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
 80001cc:	06820074 	movhi	gp,2049
    ori gp, gp, %lo(_gp)
 80001d0:	d6ae4e14 	ori	gp,gp,47416
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 80001d4:	00820074 	movhi	r2,2049
    ori r2, r2, %lo(__bss_start)
 80001d8:	10955614 	ori	r2,r2,21848

    movhi r3, %hi(__bss_end)
 80001dc:	00c20074 	movhi	r3,2049
    ori r3, r3, %lo(__bss_end)
 80001e0:	18d61914 	ori	r3,r3,22628

    beq r2, r3, 1f
 80001e4:	10c00326 	beq	r2,r3,80001f4 <_start+0x40>

0:
    stw zero, (r2)
 80001e8:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 80001ec:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 80001f0:	10fffd36 	bltu	r2,r3,80001e8 <_start+0x34>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 80001f4:	800d25c0 	call	800d25c <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 80001f8:	800d4980 	call	800d498 <alt_main>

080001fc <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 80001fc:	003fff06 	br	80001fc <alt_after_alt_main>

08000200 <main>:
void barrier(int id);
void pend(alt_mailbox_dev* box);
void post(int id, alt_u32 mess);


int main() {
 8000200:	deffe704 	addi	sp,sp,-100
 8000204:	dfc01815 	stw	ra,96(sp)
 8000208:	df001715 	stw	fp,92(sp)
 800020c:	dc401615 	stw	r17,88(sp)
 8000210:	dc001515 	stw	r16,84(sp)
 8000214:	df001504 	addi	fp,sp,84

	mailbox_0 = altera_avalon_mailbox_open("/dev/mailbox_0");
 8000218:	01020074 	movhi	r4,2049
 800021c:	21060c04 	addi	r4,r4,6192
 8000220:	800e9140 	call	800e914 <altera_avalon_mailbox_open>
 8000224:	d0a70915 	stw	r2,-25564(gp)
	mailbox_1 = altera_avalon_mailbox_open("/dev/mailbox_1");
 8000228:	01020074 	movhi	r4,2049
 800022c:	21061004 	addi	r4,r4,6208
 8000230:	800e9140 	call	800e914 <altera_avalon_mailbox_open>
 8000234:	d0a70b15 	stw	r2,-25556(gp)
	mailbox_2 = altera_avalon_mailbox_open("/dev/mailbox_2");
 8000238:	01020074 	movhi	r4,2049
 800023c:	21061404 	addi	r4,r4,6224
 8000240:	800e9140 	call	800e914 <altera_avalon_mailbox_open>
 8000244:	d0a70a15 	stw	r2,-25560(gp)
	mailbox_3 = altera_avalon_mailbox_open("/dev/mailbox_3");
 8000248:	01020074 	movhi	r4,2049
 800024c:	21061804 	addi	r4,r4,6240
 8000250:	800e9140 	call	800e914 <altera_avalon_mailbox_open>
 8000254:	d0a70e15 	stw	r2,-25544(gp)

	int cpuid = __builtin_rdctl(5);
 8000258:	0005317a 	rdctl	r2,cpuid
 800025c:	e0bffe15 	stw	r2,-8(fp)

	barrier(cpuid);
 8000260:	e13ffe17 	ldw	r4,-8(fp)
 8000264:	8000a500 	call	8000a50 <barrier>
	alt_up_pixel_buffer_dma_dev *my_pixel_buffer; //declare global var
	my_pixel_buffer=alt_up_pixel_buffer_dma_open_dev("/dev/video_pixel_buffer_dma_0"); //assign it
 8000268:	01020074 	movhi	r4,2049
 800026c:	21061c04 	addi	r4,r4,6256
 8000270:	800ef1c0 	call	800ef1c <alt_up_pixel_buffer_dma_open_dev>
 8000274:	e0bffd15 	stw	r2,-12(fp)
	alt_up_pixel_buffer_dma_clear_screen(my_pixel_buffer,0);//clear_screen();
 8000278:	e13ffd17 	ldw	r4,-12(fp)
 800027c:	000b883a 	mov	r5,zero
 8000280:	800f1e00 	call	800f1e0 <alt_up_pixel_buffer_dma_clear_screen>

	int zoom = 1;
 8000284:	00800044 	movi	r2,1
 8000288:	e0bffc15 	stw	r2,-16(fp)
	float min_x, max_x, min_y, max_y;
	min_x = -2.5;
 800028c:	00b00834 	movhi	r2,49184
 8000290:	e0bffb15 	stw	r2,-20(fp)
	max_x = 1.0;
 8000294:	008fe034 	movhi	r2,16256
 8000298:	e0bffa15 	stw	r2,-24(fp)
	min_y = -1.0;
 800029c:	00afe034 	movhi	r2,49024
 80002a0:	e0bff915 	stw	r2,-28(fp)
	max_y = 1.0;
 80002a4:	008fe034 	movhi	r2,16256
 80002a8:	e0bff815 	stw	r2,-32(fp)
	float x, y, z;
	float x0, y0;
	float target_x, target_y, xtemp;
	int iteration;
	int is_target; //false
	int first_pass = 0; // on the first pass
 80002ac:	e03feb15 	stw	zero,-84(fp)

	//barrier(cpuid);
	while (1) {
		is_target = 0;
 80002b0:	e03fec15 	stw	zero,-80(fp)
		for (i = cpuid; i < num_rows; i+=4) {
 80002b4:	e0bffe17 	ldw	r2,-8(fp)
 80002b8:	e0bff715 	stw	r2,-36(fp)
 80002bc:	00014206 	br	80007c8 <main+0x5c8>
			for (j = 0; j < num_cols; j++) {
 80002c0:	e03ff615 	stw	zero,-40(fp)
 80002c4:	00013806 	br	80007a8 <main+0x5a8>
				x = 0;
 80002c8:	e03ff515 	stw	zero,-44(fp)
				y = 0;
 80002cc:	e03ff415 	stw	zero,-48(fp)
				z = 0;
 80002d0:	e03ff315 	stw	zero,-52(fp)
				x0 = j/320.0*(max_x - min_x) + min_x;
 80002d4:	e13ff617 	ldw	r4,-40(fp)
 80002d8:	80030ec0 	call	80030ec <__floatsisf>
 80002dc:	1009883a 	mov	r4,r2
 80002e0:	0150e834 	movhi	r5,17312
 80002e4:	8002e880 	call	8002e88 <__divsf3>
 80002e8:	1009883a 	mov	r4,r2
 80002ec:	e0fffa17 	ldw	r3,-24(fp)
 80002f0:	e0bffb17 	ldw	r2,-20(fp)
 80002f4:	1885ffb2 	custom	254,r2,r3,r2
 80002f8:	2087ff32 	custom	252,r3,r4,r2
 80002fc:	e0bffb17 	ldw	r2,-20(fp)
 8000300:	1885ff72 	custom	253,r2,r3,r2
 8000304:	e0bff215 	stw	r2,-56(fp)
				y0 = (239.0-i)/240.0*(max_y - min_y) + min_y;
 8000308:	e13ff717 	ldw	r4,-36(fp)
 800030c:	80030ec0 	call	80030ec <__floatsisf>
 8000310:	1007883a 	mov	r3,r2
 8000314:	0090dbf4 	movhi	r2,17263
 8000318:	10c5ffb2 	custom	254,r2,r2,r3
 800031c:	1009883a 	mov	r4,r2
 8000320:	0150dc34 	movhi	r5,17264
 8000324:	8002e880 	call	8002e88 <__divsf3>
 8000328:	1009883a 	mov	r4,r2
 800032c:	e0fff817 	ldw	r3,-32(fp)
 8000330:	e0bff917 	ldw	r2,-28(fp)
 8000334:	1885ffb2 	custom	254,r2,r3,r2
 8000338:	2087ff32 	custom	252,r3,r4,r2
 800033c:	e0bff917 	ldw	r2,-28(fp)
 8000340:	1885ff72 	custom	253,r2,r3,r2
 8000344:	e0bff115 	stw	r2,-60(fp)
				iteration = 0;
 8000348:	e03fed15 	stw	zero,-76(fp)

				while( (x*x + y*y) <= 4 && iteration < 500) {
 800034c:	0000db06 	br	80006bc <main+0x4bc>
					xtemp = x*x - y*y + x0;
 8000350:	e0fff517 	ldw	r3,-44(fp)
 8000354:	e0bff517 	ldw	r2,-44(fp)
 8000358:	1889ff32 	custom	252,r4,r3,r2
 800035c:	e0fff417 	ldw	r3,-48(fp)
 8000360:	e0bff417 	ldw	r2,-48(fp)
 8000364:	1885ff32 	custom	252,r2,r3,r2
 8000368:	2087ffb2 	custom	254,r3,r4,r2
 800036c:	e0bff217 	ldw	r2,-56(fp)
 8000370:	1885ff72 	custom	253,r2,r3,r2
 8000374:	e0bfee15 	stw	r2,-72(fp)
					y = 2*x*y + y0;
 8000378:	e0bff517 	ldw	r2,-44(fp)
 800037c:	1087ff72 	custom	253,r3,r2,r2
 8000380:	e0bff417 	ldw	r2,-48(fp)
 8000384:	1887ff32 	custom	252,r3,r3,r2
 8000388:	e0bff117 	ldw	r2,-60(fp)
 800038c:	1885ff72 	custom	253,r2,r3,r2
 8000390:	e0bff415 	stw	r2,-48(fp)
					x = xtemp;
 8000394:	e0bfee17 	ldw	r2,-72(fp)
 8000398:	e0bff515 	stw	r2,-44(fp)
					iteration++;
 800039c:	e0bfed17 	ldw	r2,-76(fp)
 80003a0:	10800044 	addi	r2,r2,1
 80003a4:	e0bfed15 	stw	r2,-76(fp)

					if(iteration == 450 && first_pass == 0) {
 80003a8:	e0bfed17 	ldw	r2,-76(fp)
 80003ac:	10807098 	cmpnei	r2,r2,450
 80003b0:	1000c21e 	bne	r2,zero,80006bc <main+0x4bc>
 80003b4:	e0bfeb17 	ldw	r2,-84(fp)
 80003b8:	1004c03a 	cmpne	r2,r2,zero
 80003bc:	1000bf1e 	bne	r2,zero,80006bc <main+0x4bc>
						printf("FIRST PASS COMPLETE\n");
 80003c0:	01020074 	movhi	r4,2049
 80003c4:	21062404 	addi	r4,r4,6288
 80003c8:	8004e340 	call	8004e34 <puts>
						first_pass = 1;
 80003cc:	00800044 	movi	r2,1
 80003d0:	e0bfeb15 	stw	r2,-84(fp)
						if(cpuid == 0 && is_target == 0){
 80003d4:	e0bffe17 	ldw	r2,-8(fp)
 80003d8:	1004c03a 	cmpne	r2,r2,zero
 80003dc:	1000481e 	bne	r2,zero,8000500 <main+0x300>
 80003e0:	e0bfec17 	ldw	r2,-80(fp)
 80003e4:	1004c03a 	cmpne	r2,r2,zero
 80003e8:	1000451e 	bne	r2,zero,8000500 <main+0x300>
							printf("set target x and y for zoom \n");
 80003ec:	01020074 	movhi	r4,2049
 80003f0:	21062904 	addi	r4,r4,6308
 80003f4:	8004e340 	call	8004e34 <puts>
							is_target = 1;
 80003f8:	00800044 	movi	r2,1
 80003fc:	e0bfec15 	stw	r2,-80(fp)
							target_x = x0;
 8000400:	e0bff217 	ldw	r2,-56(fp)
 8000404:	e0bff015 	stw	r2,-64(fp)
							target_y = y0;
 8000408:	e0bff117 	ldw	r2,-60(fp)
 800040c:	e0bfef15 	stw	r2,-68(fp)
							//comment out from here to the other dotted line to get rid of the zoom stuff
							//if you run it with no zoom you'll notice I was able to adjust the barriers and
							//smooth out the drawing of the frame so that certain CPUs don't pull ahead
							//*------------
							printf("target_x: %f...", target_x);
 8000410:	e13ff017 	ldw	r4,-64(fp)
 8000414:	80032180 	call	8003218 <__extendsfdf2>
 8000418:	100d883a 	mov	r6,r2
 800041c:	180f883a 	mov	r7,r3
 8000420:	01020074 	movhi	r4,2049
 8000424:	21063104 	addi	r4,r4,6340
 8000428:	300b883a 	mov	r5,r6
 800042c:	380d883a 	mov	r6,r7
 8000430:	8004d1c0 	call	8004d1c <printf>
							printf("target_y: %f\n", target_y);
 8000434:	e13fef17 	ldw	r4,-68(fp)
 8000438:	80032180 	call	8003218 <__extendsfdf2>
 800043c:	100d883a 	mov	r6,r2
 8000440:	180f883a 	mov	r7,r3
 8000444:	01020074 	movhi	r4,2049
 8000448:	21063504 	addi	r4,r4,6356
 800044c:	300b883a 	mov	r5,r6
 8000450:	380d883a 	mov	r6,r7
 8000454:	8004d1c0 	call	8004d1c <printf>
							 *
							 *
							 *
							 */

							altera_avalon_mailbox_post(mailbox_1, target_x);
 8000458:	d4270b17 	ldw	r16,-25556(gp)
 800045c:	e13ff017 	ldw	r4,-64(fp)
 8000460:	8002b600 	call	8002b60 <__fixunssfsi>
 8000464:	100b883a 	mov	r5,r2
 8000468:	8009883a 	mov	r4,r16
 800046c:	800e98c0 	call	800e98c <altera_avalon_mailbox_post>
							altera_avalon_mailbox_post(mailbox_2, target_x);
 8000470:	d4270a17 	ldw	r16,-25560(gp)
 8000474:	e13ff017 	ldw	r4,-64(fp)
 8000478:	8002b600 	call	8002b60 <__fixunssfsi>
 800047c:	100b883a 	mov	r5,r2
 8000480:	8009883a 	mov	r4,r16
 8000484:	800e98c0 	call	800e98c <altera_avalon_mailbox_post>
							altera_avalon_mailbox_post(mailbox_3, target_x);
 8000488:	d4270e17 	ldw	r16,-25544(gp)
 800048c:	e13ff017 	ldw	r4,-64(fp)
 8000490:	8002b600 	call	8002b60 <__fixunssfsi>
 8000494:	100b883a 	mov	r5,r2
 8000498:	8009883a 	mov	r4,r16
 800049c:	800e98c0 	call	800e98c <altera_avalon_mailbox_post>
							altera_avalon_mailbox_post(mailbox_1, target_y);
 80004a0:	d4270b17 	ldw	r16,-25556(gp)
 80004a4:	e13fef17 	ldw	r4,-68(fp)
 80004a8:	8002b600 	call	8002b60 <__fixunssfsi>
 80004ac:	100b883a 	mov	r5,r2
 80004b0:	8009883a 	mov	r4,r16
 80004b4:	800e98c0 	call	800e98c <altera_avalon_mailbox_post>
							altera_avalon_mailbox_post(mailbox_2, target_y);
 80004b8:	d4270a17 	ldw	r16,-25560(gp)
 80004bc:	e13fef17 	ldw	r4,-68(fp)
 80004c0:	8002b600 	call	8002b60 <__fixunssfsi>
 80004c4:	100b883a 	mov	r5,r2
 80004c8:	8009883a 	mov	r4,r16
 80004cc:	800e98c0 	call	800e98c <altera_avalon_mailbox_post>
							altera_avalon_mailbox_post(mailbox_3, target_y);
 80004d0:	d4270e17 	ldw	r16,-25544(gp)
 80004d4:	e13fef17 	ldw	r4,-68(fp)
 80004d8:	8002b600 	call	8002b60 <__fixunssfsi>
 80004dc:	100b883a 	mov	r5,r2
 80004e0:	8009883a 	mov	r4,r16
 80004e4:	800e98c0 	call	800e98c <altera_avalon_mailbox_post>
							//pend mailbox 0 until the other 3 boxes have posted
							altera_avalon_mailbox_pend(mailbox_0);
 80004e8:	d1270917 	ldw	r4,-25564(gp)
 80004ec:	800ea980 	call	800ea98 <altera_avalon_mailbox_pend>
							altera_avalon_mailbox_pend(mailbox_0);
 80004f0:	d1270917 	ldw	r4,-25564(gp)
 80004f4:	800ea980 	call	800ea98 <altera_avalon_mailbox_pend>
							altera_avalon_mailbox_pend(mailbox_0);
 80004f8:	d1270917 	ldw	r4,-25564(gp)
 80004fc:	800ea980 	call	800ea98 <altera_avalon_mailbox_pend>
						}
						if(cpuid == 1){
 8000500:	e0bffe17 	ldw	r2,-8(fp)
 8000504:	10800058 	cmpnei	r2,r2,1
 8000508:	1000221e 	bne	r2,zero,8000594 <main+0x394>
							printf("mailbox_1 pending\n");
 800050c:	01020074 	movhi	r4,2049
 8000510:	21063904 	addi	r4,r4,6372
 8000514:	8004e340 	call	8004e34 <puts>
							target_x = altera_avalon_mailbox_pend(mailbox_1);
 8000518:	d1270b17 	ldw	r4,-25556(gp)
 800051c:	800ea980 	call	800ea98 <altera_avalon_mailbox_pend>
 8000520:	1009883a 	mov	r4,r2
 8000524:	800326c0 	call	800326c <__floatunsisf>
 8000528:	e0bff015 	stw	r2,-64(fp)
							target_y = altera_avalon_mailbox_pend(mailbox_1);
 800052c:	d1270b17 	ldw	r4,-25556(gp)
 8000530:	800ea980 	call	800ea98 <altera_avalon_mailbox_pend>
 8000534:	1009883a 	mov	r4,r2
 8000538:	800326c0 	call	800326c <__floatunsisf>
 800053c:	e0bfef15 	stw	r2,-68(fp)
							printf("target_x: %f...", target_x);
 8000540:	e13ff017 	ldw	r4,-64(fp)
 8000544:	80032180 	call	8003218 <__extendsfdf2>
 8000548:	100d883a 	mov	r6,r2
 800054c:	180f883a 	mov	r7,r3
 8000550:	01020074 	movhi	r4,2049
 8000554:	21063104 	addi	r4,r4,6340
 8000558:	300b883a 	mov	r5,r6
 800055c:	380d883a 	mov	r6,r7
 8000560:	8004d1c0 	call	8004d1c <printf>
							printf("target_y: %f\n", target_y);
 8000564:	e13fef17 	ldw	r4,-68(fp)
 8000568:	80032180 	call	8003218 <__extendsfdf2>
 800056c:	100d883a 	mov	r6,r2
 8000570:	180f883a 	mov	r7,r3
 8000574:	01020074 	movhi	r4,2049
 8000578:	21063504 	addi	r4,r4,6356
 800057c:	300b883a 	mov	r5,r6
 8000580:	380d883a 	mov	r6,r7
 8000584:	8004d1c0 	call	8004d1c <printf>
							altera_avalon_mailbox_post(mailbox_0, message);
 8000588:	d1270917 	ldw	r4,-25564(gp)
 800058c:	d1670817 	ldw	r5,-25568(gp)
 8000590:	800e98c0 	call	800e98c <altera_avalon_mailbox_post>
						}
						if(cpuid == 2){
 8000594:	e0bffe17 	ldw	r2,-8(fp)
 8000598:	10800098 	cmpnei	r2,r2,2
 800059c:	1000221e 	bne	r2,zero,8000628 <main+0x428>
							printf("mailbox_2 pending\n");
 80005a0:	01020074 	movhi	r4,2049
 80005a4:	21063e04 	addi	r4,r4,6392
 80005a8:	8004e340 	call	8004e34 <puts>
							target_x = altera_avalon_mailbox_pend(mailbox_2);
 80005ac:	d1270a17 	ldw	r4,-25560(gp)
 80005b0:	800ea980 	call	800ea98 <altera_avalon_mailbox_pend>
 80005b4:	1009883a 	mov	r4,r2
 80005b8:	800326c0 	call	800326c <__floatunsisf>
 80005bc:	e0bff015 	stw	r2,-64(fp)
							target_y = altera_avalon_mailbox_pend(mailbox_2);
 80005c0:	d1270a17 	ldw	r4,-25560(gp)
 80005c4:	800ea980 	call	800ea98 <altera_avalon_mailbox_pend>
 80005c8:	1009883a 	mov	r4,r2
 80005cc:	800326c0 	call	800326c <__floatunsisf>
 80005d0:	e0bfef15 	stw	r2,-68(fp)
							printf("target_x: %f...", target_x);
 80005d4:	e13ff017 	ldw	r4,-64(fp)
 80005d8:	80032180 	call	8003218 <__extendsfdf2>
 80005dc:	100d883a 	mov	r6,r2
 80005e0:	180f883a 	mov	r7,r3
 80005e4:	01020074 	movhi	r4,2049
 80005e8:	21063104 	addi	r4,r4,6340
 80005ec:	300b883a 	mov	r5,r6
 80005f0:	380d883a 	mov	r6,r7
 80005f4:	8004d1c0 	call	8004d1c <printf>
							printf("target_y: %f\n", target_y);
 80005f8:	e13fef17 	ldw	r4,-68(fp)
 80005fc:	80032180 	call	8003218 <__extendsfdf2>
 8000600:	100d883a 	mov	r6,r2
 8000604:	180f883a 	mov	r7,r3
 8000608:	01020074 	movhi	r4,2049
 800060c:	21063504 	addi	r4,r4,6356
 8000610:	300b883a 	mov	r5,r6
 8000614:	380d883a 	mov	r6,r7
 8000618:	8004d1c0 	call	8004d1c <printf>
							altera_avalon_mailbox_post(mailbox_0, message);
 800061c:	d1270917 	ldw	r4,-25564(gp)
 8000620:	d1670817 	ldw	r5,-25568(gp)
 8000624:	800e98c0 	call	800e98c <altera_avalon_mailbox_post>
						}
						if(cpuid == 3){
 8000628:	e0bffe17 	ldw	r2,-8(fp)
 800062c:	108000d8 	cmpnei	r2,r2,3
 8000630:	1000221e 	bne	r2,zero,80006bc <main+0x4bc>
							printf("mailbox_3 pending\n");
 8000634:	01020074 	movhi	r4,2049
 8000638:	21064304 	addi	r4,r4,6412
 800063c:	8004e340 	call	8004e34 <puts>
							target_x = altera_avalon_mailbox_pend(mailbox_3);
 8000640:	d1270e17 	ldw	r4,-25544(gp)
 8000644:	800ea980 	call	800ea98 <altera_avalon_mailbox_pend>
 8000648:	1009883a 	mov	r4,r2
 800064c:	800326c0 	call	800326c <__floatunsisf>
 8000650:	e0bff015 	stw	r2,-64(fp)
							target_y = altera_avalon_mailbox_pend(mailbox_3);
 8000654:	d1270e17 	ldw	r4,-25544(gp)
 8000658:	800ea980 	call	800ea98 <altera_avalon_mailbox_pend>
 800065c:	1009883a 	mov	r4,r2
 8000660:	800326c0 	call	800326c <__floatunsisf>
 8000664:	e0bfef15 	stw	r2,-68(fp)
							printf("target_x: %f...", target_x);
 8000668:	e13ff017 	ldw	r4,-64(fp)
 800066c:	80032180 	call	8003218 <__extendsfdf2>
 8000670:	100d883a 	mov	r6,r2
 8000674:	180f883a 	mov	r7,r3
 8000678:	01020074 	movhi	r4,2049
 800067c:	21063104 	addi	r4,r4,6340
 8000680:	300b883a 	mov	r5,r6
 8000684:	380d883a 	mov	r6,r7
 8000688:	8004d1c0 	call	8004d1c <printf>
							printf("target_y: %f\n", target_y);
 800068c:	e13fef17 	ldw	r4,-68(fp)
 8000690:	80032180 	call	8003218 <__extendsfdf2>
 8000694:	100d883a 	mov	r6,r2
 8000698:	180f883a 	mov	r7,r3
 800069c:	01020074 	movhi	r4,2049
 80006a0:	21063504 	addi	r4,r4,6356
 80006a4:	300b883a 	mov	r5,r6
 80006a8:	380d883a 	mov	r6,r7
 80006ac:	8004d1c0 	call	8004d1c <printf>
							altera_avalon_mailbox_post(mailbox_0, message);
 80006b0:	d1270917 	ldw	r4,-25564(gp)
 80006b4:	d1670817 	ldw	r5,-25568(gp)
 80006b8:	800e98c0 	call	800e98c <altera_avalon_mailbox_post>
				z = 0;
				x0 = j/320.0*(max_x - min_x) + min_x;
				y0 = (239.0-i)/240.0*(max_y - min_y) + min_y;
				iteration = 0;

				while( (x*x + y*y) <= 4 && iteration < 500) {
 80006bc:	e0fff517 	ldw	r3,-44(fp)
 80006c0:	e0bff517 	ldw	r2,-44(fp)
 80006c4:	1889ff32 	custom	252,r4,r3,r2
 80006c8:	e0fff417 	ldw	r3,-48(fp)
 80006cc:	e0bff417 	ldw	r2,-48(fp)
 80006d0:	1885ff32 	custom	252,r2,r3,r2
 80006d4:	2085ff72 	custom	253,r2,r4,r2
 80006d8:	e03fff05 	stb	zero,-4(fp)
 80006dc:	1009883a 	mov	r4,r2
 80006e0:	01502034 	movhi	r5,16512
 80006e4:	80030740 	call	8003074 <__lesf2>
 80006e8:	10800050 	cmplti	r2,r2,1
 80006ec:	1000011e 	bne	r2,zero,80006f4 <main+0x4f4>
 80006f0:	00000206 	br	80006fc <main+0x4fc>
 80006f4:	00800044 	movi	r2,1
 80006f8:	e0bfff05 	stb	r2,-4(fp)
 80006fc:	e0ffff03 	ldbu	r3,-4(fp)
 8000700:	1880005c 	xori	r2,r3,1
 8000704:	10803fcc 	andi	r2,r2,255
 8000708:	1004c03a 	cmpne	r2,r2,zero
 800070c:	1000031e 	bne	r2,zero,800071c <main+0x51c>
 8000710:	e0bfed17 	ldw	r2,-76(fp)
 8000714:	10807d10 	cmplti	r2,r2,500
 8000718:	103f0d1e 	bne	r2,zero,8000350 <main+0x150>
						}
					}

				}
				//printf("Iteration: %d\n", iteration);
				if(iteration == 500) {
 800071c:	e0bfed17 	ldw	r2,-76(fp)
 8000720:	10807d18 	cmpnei	r2,r2,500
 8000724:	1000061e 	bne	r2,zero,8000740 <main+0x540>
					alt_up_pixel_buffer_dma_draw(my_pixel_buffer, 0,j,i );
 8000728:	e1bff617 	ldw	r6,-40(fp)
 800072c:	e1fff717 	ldw	r7,-36(fp)
 8000730:	e13ffd17 	ldw	r4,-12(fp)
 8000734:	000b883a 	mov	r5,zero
 8000738:	800ef5c0 	call	800ef5c <alt_up_pixel_buffer_dma_draw>
 800073c:	00001706 	br	800079c <main+0x59c>
				} else {
					alt_up_pixel_buffer_dma_draw(my_pixel_buffer, (iteration*8/zoom) + (iteration*4/zoom) +(iteration*2/zoom), j, i);
 8000740:	e0bfed17 	ldw	r2,-76(fp)
 8000744:	100890fa 	slli	r4,r2,3
 8000748:	e17ffc17 	ldw	r5,-16(fp)
 800074c:	80043140 	call	8004314 <__divsi3>
 8000750:	1021883a 	mov	r16,r2
 8000754:	e0bfed17 	ldw	r2,-76(fp)
 8000758:	1085883a 	add	r2,r2,r2
 800075c:	1085883a 	add	r2,r2,r2
 8000760:	1009883a 	mov	r4,r2
 8000764:	e17ffc17 	ldw	r5,-16(fp)
 8000768:	80043140 	call	8004314 <__divsi3>
 800076c:	80a1883a 	add	r16,r16,r2
 8000770:	e0bfed17 	ldw	r2,-76(fp)
 8000774:	1085883a 	add	r2,r2,r2
 8000778:	1009883a 	mov	r4,r2
 800077c:	e17ffc17 	ldw	r5,-16(fp)
 8000780:	80043140 	call	8004314 <__divsi3>
 8000784:	8085883a 	add	r2,r16,r2
 8000788:	100b883a 	mov	r5,r2
 800078c:	e1bff617 	ldw	r6,-40(fp)
 8000790:	e1fff717 	ldw	r7,-36(fp)
 8000794:	e13ffd17 	ldw	r4,-12(fp)
 8000798:	800ef5c0 	call	800ef5c <alt_up_pixel_buffer_dma_draw>

	//barrier(cpuid);
	while (1) {
		is_target = 0;
		for (i = cpuid; i < num_rows; i+=4) {
			for (j = 0; j < num_cols; j++) {
 800079c:	e0bff617 	ldw	r2,-40(fp)
 80007a0:	10800044 	addi	r2,r2,1
 80007a4:	e0bff615 	stw	r2,-40(fp)
 80007a8:	d0e00117 	ldw	r3,-32764(gp)
 80007ac:	e0bff617 	ldw	r2,-40(fp)
 80007b0:	10fec516 	blt	r2,r3,80002c8 <main+0xc8>
				} else {
					alt_up_pixel_buffer_dma_draw(my_pixel_buffer, (iteration*8/zoom) + (iteration*4/zoom) +(iteration*2/zoom), j, i);
				}
				//barrier(cpuid);
			}
			barrier(cpuid);
 80007b4:	e13ffe17 	ldw	r4,-8(fp)
 80007b8:	8000a500 	call	8000a50 <barrier>
	int first_pass = 0; // on the first pass

	//barrier(cpuid);
	while (1) {
		is_target = 0;
		for (i = cpuid; i < num_rows; i+=4) {
 80007bc:	e0bff717 	ldw	r2,-36(fp)
 80007c0:	10800104 	addi	r2,r2,4
 80007c4:	e0bff715 	stw	r2,-36(fp)
 80007c8:	d0e00017 	ldw	r3,-32768(gp)
 80007cc:	e0bff717 	ldw	r2,-36(fp)
 80007d0:	10febb16 	blt	r2,r3,80002c0 <main+0xc0>
				//barrier(cpuid);
			}
			barrier(cpuid);
		}

		barrier(cpuid);
 80007d4:	e13ffe17 	ldw	r4,-8(fp)
 80007d8:	8000a500 	call	8000a50 <barrier>
		min_x = target_x - (1/(pow(1.5, zoom)));
 80007dc:	e13ff017 	ldw	r4,-64(fp)
 80007e0:	80032180 	call	8003218 <__extendsfdf2>
 80007e4:	1021883a 	mov	r16,r2
 80007e8:	1823883a 	mov	r17,r3
 80007ec:	e13ffc17 	ldw	r4,-16(fp)
 80007f0:	80040f40 	call	80040f4 <__floatsidf>
 80007f4:	100f883a 	mov	r7,r2
 80007f8:	1811883a 	mov	r8,r3
 80007fc:	0009883a 	mov	r4,zero
 8000800:	014ffe34 	movhi	r5,16376
 8000804:	380d883a 	mov	r6,r7
 8000808:	400f883a 	mov	r7,r8
 800080c:	8000c800 	call	8000c80 <pow>
 8000810:	1009883a 	mov	r4,r2
 8000814:	180b883a 	mov	r5,r3
 8000818:	2005883a 	mov	r2,r4
 800081c:	2807883a 	mov	r3,r5
 8000820:	0009883a 	mov	r4,zero
 8000824:	016ffc34 	movhi	r5,49136
 8000828:	100d883a 	mov	r6,r2
 800082c:	180f883a 	mov	r7,r3
 8000830:	8003bf40 	call	8003bf4 <__divdf3>
 8000834:	1009883a 	mov	r4,r2
 8000838:	180b883a 	mov	r5,r3
 800083c:	2005883a 	mov	r2,r4
 8000840:	2807883a 	mov	r3,r5
 8000844:	8009883a 	mov	r4,r16
 8000848:	880b883a 	mov	r5,r17
 800084c:	100d883a 	mov	r6,r2
 8000850:	180f883a 	mov	r7,r3
 8000854:	80037bc0 	call	80037bc <__adddf3>
 8000858:	1009883a 	mov	r4,r2
 800085c:	180b883a 	mov	r5,r3
 8000860:	2005883a 	mov	r2,r4
 8000864:	2807883a 	mov	r3,r5
 8000868:	1009883a 	mov	r4,r2
 800086c:	180b883a 	mov	r5,r3
 8000870:	80042240 	call	8004224 <__truncdfsf2>
 8000874:	e0bffb15 	stw	r2,-20(fp)
		max_x = target_x + (1/(pow(1.5, zoom)));
 8000878:	e13ff017 	ldw	r4,-64(fp)
 800087c:	80032180 	call	8003218 <__extendsfdf2>
 8000880:	1021883a 	mov	r16,r2
 8000884:	1823883a 	mov	r17,r3
 8000888:	e13ffc17 	ldw	r4,-16(fp)
 800088c:	80040f40 	call	80040f4 <__floatsidf>
 8000890:	100f883a 	mov	r7,r2
 8000894:	1811883a 	mov	r8,r3
 8000898:	0009883a 	mov	r4,zero
 800089c:	014ffe34 	movhi	r5,16376
 80008a0:	380d883a 	mov	r6,r7
 80008a4:	400f883a 	mov	r7,r8
 80008a8:	8000c800 	call	8000c80 <pow>
 80008ac:	100f883a 	mov	r7,r2
 80008b0:	1811883a 	mov	r8,r3
 80008b4:	0009883a 	mov	r4,zero
 80008b8:	014ffc34 	movhi	r5,16368
 80008bc:	380d883a 	mov	r6,r7
 80008c0:	400f883a 	mov	r7,r8
 80008c4:	8003bf40 	call	8003bf4 <__divdf3>
 80008c8:	1009883a 	mov	r4,r2
 80008cc:	180b883a 	mov	r5,r3
 80008d0:	2005883a 	mov	r2,r4
 80008d4:	2807883a 	mov	r3,r5
 80008d8:	8009883a 	mov	r4,r16
 80008dc:	880b883a 	mov	r5,r17
 80008e0:	100d883a 	mov	r6,r2
 80008e4:	180f883a 	mov	r7,r3
 80008e8:	80037bc0 	call	80037bc <__adddf3>
 80008ec:	1009883a 	mov	r4,r2
 80008f0:	180b883a 	mov	r5,r3
 80008f4:	2005883a 	mov	r2,r4
 80008f8:	2807883a 	mov	r3,r5
 80008fc:	1009883a 	mov	r4,r2
 8000900:	180b883a 	mov	r5,r3
 8000904:	80042240 	call	8004224 <__truncdfsf2>
 8000908:	e0bffa15 	stw	r2,-24(fp)
		min_y = target_y - (0.75/(pow(1.5, zoom)));
 800090c:	e13fef17 	ldw	r4,-68(fp)
 8000910:	80032180 	call	8003218 <__extendsfdf2>
 8000914:	1021883a 	mov	r16,r2
 8000918:	1823883a 	mov	r17,r3
 800091c:	e13ffc17 	ldw	r4,-16(fp)
 8000920:	80040f40 	call	80040f4 <__floatsidf>
 8000924:	100f883a 	mov	r7,r2
 8000928:	1811883a 	mov	r8,r3
 800092c:	0009883a 	mov	r4,zero
 8000930:	014ffe34 	movhi	r5,16376
 8000934:	380d883a 	mov	r6,r7
 8000938:	400f883a 	mov	r7,r8
 800093c:	8000c800 	call	8000c80 <pow>
 8000940:	100f883a 	mov	r7,r2
 8000944:	1811883a 	mov	r8,r3
 8000948:	0009883a 	mov	r4,zero
 800094c:	016ffa34 	movhi	r5,49128
 8000950:	380d883a 	mov	r6,r7
 8000954:	400f883a 	mov	r7,r8
 8000958:	8003bf40 	call	8003bf4 <__divdf3>
 800095c:	1009883a 	mov	r4,r2
 8000960:	180b883a 	mov	r5,r3
 8000964:	2005883a 	mov	r2,r4
 8000968:	2807883a 	mov	r3,r5
 800096c:	8009883a 	mov	r4,r16
 8000970:	880b883a 	mov	r5,r17
 8000974:	100d883a 	mov	r6,r2
 8000978:	180f883a 	mov	r7,r3
 800097c:	80037bc0 	call	80037bc <__adddf3>
 8000980:	1009883a 	mov	r4,r2
 8000984:	180b883a 	mov	r5,r3
 8000988:	2005883a 	mov	r2,r4
 800098c:	2807883a 	mov	r3,r5
 8000990:	1009883a 	mov	r4,r2
 8000994:	180b883a 	mov	r5,r3
 8000998:	80042240 	call	8004224 <__truncdfsf2>
 800099c:	e0bff915 	stw	r2,-28(fp)
		max_y = target_y + (0.75/(pow(1.5, zoom)));
 80009a0:	e13fef17 	ldw	r4,-68(fp)
 80009a4:	80032180 	call	8003218 <__extendsfdf2>
 80009a8:	1021883a 	mov	r16,r2
 80009ac:	1823883a 	mov	r17,r3
 80009b0:	e13ffc17 	ldw	r4,-16(fp)
 80009b4:	80040f40 	call	80040f4 <__floatsidf>
 80009b8:	100f883a 	mov	r7,r2
 80009bc:	1811883a 	mov	r8,r3
 80009c0:	0009883a 	mov	r4,zero
 80009c4:	014ffe34 	movhi	r5,16376
 80009c8:	380d883a 	mov	r6,r7
 80009cc:	400f883a 	mov	r7,r8
 80009d0:	8000c800 	call	8000c80 <pow>
 80009d4:	100f883a 	mov	r7,r2
 80009d8:	1811883a 	mov	r8,r3
 80009dc:	0009883a 	mov	r4,zero
 80009e0:	014ffa34 	movhi	r5,16360
 80009e4:	380d883a 	mov	r6,r7
 80009e8:	400f883a 	mov	r7,r8
 80009ec:	8003bf40 	call	8003bf4 <__divdf3>
 80009f0:	1009883a 	mov	r4,r2
 80009f4:	180b883a 	mov	r5,r3
 80009f8:	2005883a 	mov	r2,r4
 80009fc:	2807883a 	mov	r3,r5
 8000a00:	8009883a 	mov	r4,r16
 8000a04:	880b883a 	mov	r5,r17
 8000a08:	100d883a 	mov	r6,r2
 8000a0c:	180f883a 	mov	r7,r3
 8000a10:	80037bc0 	call	80037bc <__adddf3>
 8000a14:	1009883a 	mov	r4,r2
 8000a18:	180b883a 	mov	r5,r3
 8000a1c:	2005883a 	mov	r2,r4
 8000a20:	2807883a 	mov	r3,r5
 8000a24:	1009883a 	mov	r4,r2
 8000a28:	180b883a 	mov	r5,r3
 8000a2c:	80042240 	call	8004224 <__truncdfsf2>
 8000a30:	e0bff815 	stw	r2,-32(fp)
		zoom += 1;
 8000a34:	e0bffc17 	ldw	r2,-16(fp)
 8000a38:	10800044 	addi	r2,r2,1
 8000a3c:	e0bffc15 	stw	r2,-16(fp)

		alt_up_pixel_buffer_dma_clear_screen(my_pixel_buffer,0);
 8000a40:	e13ffd17 	ldw	r4,-12(fp)
 8000a44:	000b883a 	mov	r5,zero
 8000a48:	800f1e00 	call	800f1e0 <alt_up_pixel_buffer_dma_clear_screen>
	}
 8000a4c:	003e1806 	br	80002b0 <main+0xb0>

08000a50 <barrier>:
	//barrier(cpuid);
}

void barrier(int id){
 8000a50:	defff904 	addi	sp,sp,-28
 8000a54:	dfc00615 	stw	ra,24(sp)
 8000a58:	df000515 	stw	fp,20(sp)
 8000a5c:	df000504 	addi	fp,sp,20
 8000a60:	e13fff15 	stw	r4,-4(fp)
	post(id, message);
 8000a64:	d1670817 	ldw	r5,-25568(gp)
 8000a68:	e13fff17 	ldw	r4,-4(fp)
 8000a6c:	8000b940 	call	8000b94 <post>
	if(id == 0){
 8000a70:	e0bfff17 	ldw	r2,-4(fp)
 8000a74:	1004c03a 	cmpne	r2,r2,zero
 8000a78:	10000b1e 	bne	r2,zero,8000aa8 <barrier+0x58>
		int i;
		for(i = 0; i < n-1; i++){
 8000a7c:	e03ffe15 	stw	zero,-8(fp)
 8000a80:	00000506 	br	8000a98 <barrier+0x48>
			pend(mailbox_0);
 8000a84:	d1270917 	ldw	r4,-25564(gp)
 8000a88:	8000b640 	call	8000b64 <pend>

void barrier(int id){
	post(id, message);
	if(id == 0){
		int i;
		for(i = 0; i < n-1; i++){
 8000a8c:	e0bffe17 	ldw	r2,-8(fp)
 8000a90:	10800044 	addi	r2,r2,1
 8000a94:	e0bffe15 	stw	r2,-8(fp)
 8000a98:	d0a00217 	ldw	r2,-32760(gp)
 8000a9c:	10ffffc4 	addi	r3,r2,-1
 8000aa0:	e0bffe17 	ldw	r2,-8(fp)
 8000aa4:	10fff716 	blt	r2,r3,8000a84 <barrier+0x34>
			pend(mailbox_0);
		}
	}
	if(id == 1){
 8000aa8:	e0bfff17 	ldw	r2,-4(fp)
 8000aac:	10800058 	cmpnei	r2,r2,1
 8000ab0:	10000b1e 	bne	r2,zero,8000ae0 <barrier+0x90>
		int i;
		for(i = 0; i < n-1; i++){
 8000ab4:	e03ffd15 	stw	zero,-12(fp)
 8000ab8:	00000506 	br	8000ad0 <barrier+0x80>
			pend(mailbox_1);
 8000abc:	d1270b17 	ldw	r4,-25556(gp)
 8000ac0:	8000b640 	call	8000b64 <pend>
			pend(mailbox_0);
		}
	}
	if(id == 1){
		int i;
		for(i = 0; i < n-1; i++){
 8000ac4:	e0bffd17 	ldw	r2,-12(fp)
 8000ac8:	10800044 	addi	r2,r2,1
 8000acc:	e0bffd15 	stw	r2,-12(fp)
 8000ad0:	d0a00217 	ldw	r2,-32760(gp)
 8000ad4:	10ffffc4 	addi	r3,r2,-1
 8000ad8:	e0bffd17 	ldw	r2,-12(fp)
 8000adc:	10fff716 	blt	r2,r3,8000abc <barrier+0x6c>
			pend(mailbox_1);
		}
	}
	if(id == 2){
 8000ae0:	e0bfff17 	ldw	r2,-4(fp)
 8000ae4:	10800098 	cmpnei	r2,r2,2
 8000ae8:	10000b1e 	bne	r2,zero,8000b18 <barrier+0xc8>
		int i;
		for(i = 0; i < n-1; i++){
 8000aec:	e03ffc15 	stw	zero,-16(fp)
 8000af0:	00000506 	br	8000b08 <barrier+0xb8>
			pend(mailbox_2);
 8000af4:	d1270a17 	ldw	r4,-25560(gp)
 8000af8:	8000b640 	call	8000b64 <pend>
			pend(mailbox_1);
		}
	}
	if(id == 2){
		int i;
		for(i = 0; i < n-1; i++){
 8000afc:	e0bffc17 	ldw	r2,-16(fp)
 8000b00:	10800044 	addi	r2,r2,1
 8000b04:	e0bffc15 	stw	r2,-16(fp)
 8000b08:	d0a00217 	ldw	r2,-32760(gp)
 8000b0c:	10ffffc4 	addi	r3,r2,-1
 8000b10:	e0bffc17 	ldw	r2,-16(fp)
 8000b14:	10fff716 	blt	r2,r3,8000af4 <barrier+0xa4>
			pend(mailbox_2);
		}
	}
	if(id == 3){
 8000b18:	e0bfff17 	ldw	r2,-4(fp)
 8000b1c:	108000d8 	cmpnei	r2,r2,3
 8000b20:	10000b1e 	bne	r2,zero,8000b50 <barrier+0x100>
		int i;
		for(i = 0; i < n-1; i++){
 8000b24:	e03ffb15 	stw	zero,-20(fp)
 8000b28:	00000506 	br	8000b40 <barrier+0xf0>
			pend(mailbox_3);
 8000b2c:	d1270e17 	ldw	r4,-25544(gp)
 8000b30:	8000b640 	call	8000b64 <pend>
			pend(mailbox_2);
		}
	}
	if(id == 3){
		int i;
		for(i = 0; i < n-1; i++){
 8000b34:	e0bffb17 	ldw	r2,-20(fp)
 8000b38:	10800044 	addi	r2,r2,1
 8000b3c:	e0bffb15 	stw	r2,-20(fp)
 8000b40:	d0a00217 	ldw	r2,-32760(gp)
 8000b44:	10ffffc4 	addi	r3,r2,-1
 8000b48:	e0bffb17 	ldw	r2,-20(fp)
 8000b4c:	10fff716 	blt	r2,r3,8000b2c <barrier+0xdc>
			pend(mailbox_3);
		}
	}
}
 8000b50:	e037883a 	mov	sp,fp
 8000b54:	dfc00117 	ldw	ra,4(sp)
 8000b58:	df000017 	ldw	fp,0(sp)
 8000b5c:	dec00204 	addi	sp,sp,8
 8000b60:	f800283a 	ret

08000b64 <pend>:
void pend(alt_mailbox_dev* box){
 8000b64:	defffd04 	addi	sp,sp,-12
 8000b68:	dfc00215 	stw	ra,8(sp)
 8000b6c:	df000115 	stw	fp,4(sp)
 8000b70:	df000104 	addi	fp,sp,4
 8000b74:	e13fff15 	stw	r4,-4(fp)
	//printf("MAILBOX PENDING \n");
	altera_avalon_mailbox_pend(box);
 8000b78:	e13fff17 	ldw	r4,-4(fp)
 8000b7c:	800ea980 	call	800ea98 <altera_avalon_mailbox_pend>
}
 8000b80:	e037883a 	mov	sp,fp
 8000b84:	dfc00117 	ldw	ra,4(sp)
 8000b88:	df000017 	ldw	fp,0(sp)
 8000b8c:	dec00204 	addi	sp,sp,8
 8000b90:	f800283a 	ret

08000b94 <post>:

void post(int id, alt_u32 mess){
 8000b94:	defffc04 	addi	sp,sp,-16
 8000b98:	dfc00315 	stw	ra,12(sp)
 8000b9c:	df000215 	stw	fp,8(sp)
 8000ba0:	df000204 	addi	fp,sp,8
 8000ba4:	e13ffe15 	stw	r4,-8(fp)
 8000ba8:	e17fff15 	stw	r5,-4(fp)
	 //altera_avalon_mailbox_post(box, message);

	 if(id == 0){
 8000bac:	e0bffe17 	ldw	r2,-8(fp)
 8000bb0:	1004c03a 	cmpne	r2,r2,zero
 8000bb4:	1000091e 	bne	r2,zero,8000bdc <post+0x48>
	 //printf("MAILBOX 0 POSTING \n");
	 altera_avalon_mailbox_post(mailbox_1, mess);
 8000bb8:	d1270b17 	ldw	r4,-25556(gp)
 8000bbc:	e17fff17 	ldw	r5,-4(fp)
 8000bc0:	800e98c0 	call	800e98c <altera_avalon_mailbox_post>
	 altera_avalon_mailbox_post(mailbox_2, mess);
 8000bc4:	d1270a17 	ldw	r4,-25560(gp)
 8000bc8:	e17fff17 	ldw	r5,-4(fp)
 8000bcc:	800e98c0 	call	800e98c <altera_avalon_mailbox_post>
	 altera_avalon_mailbox_post(mailbox_3, mess);
 8000bd0:	d1270e17 	ldw	r4,-25544(gp)
 8000bd4:	e17fff17 	ldw	r5,-4(fp)
 8000bd8:	800e98c0 	call	800e98c <altera_avalon_mailbox_post>
	 }
	 if(id == 1){
 8000bdc:	e0bffe17 	ldw	r2,-8(fp)
 8000be0:	10800058 	cmpnei	r2,r2,1
 8000be4:	1000091e 	bne	r2,zero,8000c0c <post+0x78>
	 //printf("MAILBOX 1 POSTING \n");
	 altera_avalon_mailbox_post(mailbox_0, mess);
 8000be8:	d1270917 	ldw	r4,-25564(gp)
 8000bec:	e17fff17 	ldw	r5,-4(fp)
 8000bf0:	800e98c0 	call	800e98c <altera_avalon_mailbox_post>
	 altera_avalon_mailbox_post(mailbox_2, mess);
 8000bf4:	d1270a17 	ldw	r4,-25560(gp)
 8000bf8:	e17fff17 	ldw	r5,-4(fp)
 8000bfc:	800e98c0 	call	800e98c <altera_avalon_mailbox_post>
	 altera_avalon_mailbox_post(mailbox_3, mess);
 8000c00:	d1270e17 	ldw	r4,-25544(gp)
 8000c04:	e17fff17 	ldw	r5,-4(fp)
 8000c08:	800e98c0 	call	800e98c <altera_avalon_mailbox_post>
	 }

	 if(id == 2){
 8000c0c:	e0bffe17 	ldw	r2,-8(fp)
 8000c10:	10800098 	cmpnei	r2,r2,2
 8000c14:	1000091e 	bne	r2,zero,8000c3c <post+0xa8>
	 //printf("MAILBOX 2 POSTING \n");
	 altera_avalon_mailbox_post(mailbox_0, mess);
 8000c18:	d1270917 	ldw	r4,-25564(gp)
 8000c1c:	e17fff17 	ldw	r5,-4(fp)
 8000c20:	800e98c0 	call	800e98c <altera_avalon_mailbox_post>
	 altera_avalon_mailbox_post(mailbox_1, mess);
 8000c24:	d1270b17 	ldw	r4,-25556(gp)
 8000c28:	e17fff17 	ldw	r5,-4(fp)
 8000c2c:	800e98c0 	call	800e98c <altera_avalon_mailbox_post>
	 altera_avalon_mailbox_post(mailbox_3, mess);
 8000c30:	d1270e17 	ldw	r4,-25544(gp)
 8000c34:	e17fff17 	ldw	r5,-4(fp)
 8000c38:	800e98c0 	call	800e98c <altera_avalon_mailbox_post>
	 }

	 if(id == 3){
 8000c3c:	e0bffe17 	ldw	r2,-8(fp)
 8000c40:	108000d8 	cmpnei	r2,r2,3
 8000c44:	1000091e 	bne	r2,zero,8000c6c <post+0xd8>
	 //printf("MAILBOX 3 POSTING \n");
	 altera_avalon_mailbox_post(mailbox_0, mess);
 8000c48:	d1270917 	ldw	r4,-25564(gp)
 8000c4c:	e17fff17 	ldw	r5,-4(fp)
 8000c50:	800e98c0 	call	800e98c <altera_avalon_mailbox_post>
	 altera_avalon_mailbox_post(mailbox_1, mess);
 8000c54:	d1270b17 	ldw	r4,-25556(gp)
 8000c58:	e17fff17 	ldw	r5,-4(fp)
 8000c5c:	800e98c0 	call	800e98c <altera_avalon_mailbox_post>
	 altera_avalon_mailbox_post(mailbox_2, mess);
 8000c60:	d1270a17 	ldw	r4,-25560(gp)
 8000c64:	e17fff17 	ldw	r5,-4(fp)
 8000c68:	800e98c0 	call	800e98c <altera_avalon_mailbox_post>
	 }

}
 8000c6c:	e037883a 	mov	sp,fp
 8000c70:	dfc00117 	ldw	ra,4(sp)
 8000c74:	df000017 	ldw	fp,0(sp)
 8000c78:	dec00204 	addi	sp,sp,8
 8000c7c:	f800283a 	ret

08000c80 <pow>:
 8000c80:	deffee04 	addi	sp,sp,-72
 8000c84:	ddc01015 	stw	r23,64(sp)
 8000c88:	05c20074 	movhi	r23,2049
 8000c8c:	bdce5104 	addi	r23,r23,14660
 8000c90:	dd800f15 	stw	r22,60(sp)
 8000c94:	dd400e15 	stw	r21,56(sp)
 8000c98:	dd000d15 	stw	r20,52(sp)
 8000c9c:	dcc00c15 	stw	r19,48(sp)
 8000ca0:	dc800b15 	stw	r18,44(sp)
 8000ca4:	dc400a15 	stw	r17,40(sp)
 8000ca8:	dc000915 	stw	r16,36(sp)
 8000cac:	2029883a 	mov	r20,r4
 8000cb0:	dfc01115 	stw	ra,68(sp)
 8000cb4:	3025883a 	mov	r18,r6
 8000cb8:	282b883a 	mov	r21,r5
 8000cbc:	3827883a 	mov	r19,r7
 8000cc0:	80011080 	call	8001108 <__ieee754_pow>
 8000cc4:	b9000017 	ldw	r4,0(r23)
 8000cc8:	05bfffc4 	movi	r22,-1
 8000ccc:	1021883a 	mov	r16,r2
 8000cd0:	1823883a 	mov	r17,r3
 8000cd4:	25800426 	beq	r4,r22,8000ce8 <pow+0x68>
 8000cd8:	9009883a 	mov	r4,r18
 8000cdc:	980b883a 	mov	r5,r19
 8000ce0:	80027040 	call	8002704 <__isnand>
 8000ce4:	10000d26 	beq	r2,zero,8000d1c <pow+0x9c>
 8000ce8:	8005883a 	mov	r2,r16
 8000cec:	8807883a 	mov	r3,r17
 8000cf0:	dfc01117 	ldw	ra,68(sp)
 8000cf4:	ddc01017 	ldw	r23,64(sp)
 8000cf8:	dd800f17 	ldw	r22,60(sp)
 8000cfc:	dd400e17 	ldw	r21,56(sp)
 8000d00:	dd000d17 	ldw	r20,52(sp)
 8000d04:	dcc00c17 	ldw	r19,48(sp)
 8000d08:	dc800b17 	ldw	r18,44(sp)
 8000d0c:	dc400a17 	ldw	r17,40(sp)
 8000d10:	dc000917 	ldw	r16,36(sp)
 8000d14:	dec01204 	addi	sp,sp,72
 8000d18:	f800283a 	ret
 8000d1c:	a009883a 	mov	r4,r20
 8000d20:	a80b883a 	mov	r5,r21
 8000d24:	80027040 	call	8002704 <__isnand>
 8000d28:	1000151e 	bne	r2,zero,8000d80 <pow+0x100>
 8000d2c:	000d883a 	mov	r6,zero
 8000d30:	000f883a 	mov	r7,zero
 8000d34:	a009883a 	mov	r4,r20
 8000d38:	a80b883a 	mov	r5,r21
 8000d3c:	8003e4c0 	call	8003e4c <__eqdf2>
 8000d40:	1000541e 	bne	r2,zero,8000e94 <pow+0x214>
 8000d44:	000d883a 	mov	r6,zero
 8000d48:	000f883a 	mov	r7,zero
 8000d4c:	9009883a 	mov	r4,r18
 8000d50:	980b883a 	mov	r5,r19
 8000d54:	8003e4c0 	call	8003e4c <__eqdf2>
 8000d58:	10002c1e 	bne	r2,zero,8000e0c <pow+0x18c>
 8000d5c:	b8800017 	ldw	r2,0(r23)
 8000d60:	d8000615 	stw	zero,24(sp)
 8000d64:	d8000715 	stw	zero,28(sp)
 8000d68:	10001226 	beq	r2,zero,8000db4 <pow+0x134>
 8000d6c:	008ffc34 	movhi	r2,16368
 8000d70:	d8800715 	stw	r2,28(sp)
 8000d74:	dc000617 	ldw	r16,24(sp)
 8000d78:	dc400717 	ldw	r17,28(sp)
 8000d7c:	003fda06 	br	8000ce8 <pow+0x68>
 8000d80:	000d883a 	mov	r6,zero
 8000d84:	000f883a 	mov	r7,zero
 8000d88:	9009883a 	mov	r4,r18
 8000d8c:	980b883a 	mov	r5,r19
 8000d90:	8003e4c0 	call	8003e4c <__eqdf2>
 8000d94:	103fd41e 	bne	r2,zero,8000ce8 <pow+0x68>
 8000d98:	b8c00017 	ldw	r3,0(r23)
 8000d9c:	010ffc34 	movhi	r4,16368
 8000da0:	d8000615 	stw	zero,24(sp)
 8000da4:	d9000715 	stw	r4,28(sp)
 8000da8:	1d801526 	beq	r3,r22,8000e00 <pow+0x180>
 8000dac:	00800084 	movi	r2,2
 8000db0:	18801326 	beq	r3,r2,8000e00 <pow+0x180>
 8000db4:	00820074 	movhi	r2,2049
 8000db8:	10864804 	addi	r2,r2,6432
 8000dbc:	00c00044 	movi	r3,1
 8000dc0:	d809883a 	mov	r4,sp
 8000dc4:	dcc00515 	stw	r19,20(sp)
 8000dc8:	dd400315 	stw	r21,12(sp)
 8000dcc:	d8800115 	stw	r2,4(sp)
 8000dd0:	d8c00015 	stw	r3,0(sp)
 8000dd4:	dc800415 	stw	r18,16(sp)
 8000dd8:	dd000215 	stw	r20,8(sp)
 8000ddc:	d8000815 	stw	zero,32(sp)
 8000de0:	80027340 	call	8002734 <matherr>
 8000de4:	10002726 	beq	r2,zero,8000e84 <pow+0x204>
 8000de8:	d8800817 	ldw	r2,32(sp)
 8000dec:	103fe126 	beq	r2,zero,8000d74 <pow+0xf4>
 8000df0:	8004d0c0 	call	8004d0c <__errno>
 8000df4:	d8c00817 	ldw	r3,32(sp)
 8000df8:	10c00015 	stw	r3,0(r2)
 8000dfc:	003fdd06 	br	8000d74 <pow+0xf4>
 8000e00:	d9000715 	stw	r4,28(sp)
 8000e04:	d8000615 	stw	zero,24(sp)
 8000e08:	003fda06 	br	8000d74 <pow+0xf4>
 8000e0c:	9009883a 	mov	r4,r18
 8000e10:	980b883a 	mov	r5,r19
 8000e14:	80026e80 	call	80026e8 <finite>
 8000e18:	103fb326 	beq	r2,zero,8000ce8 <pow+0x68>
 8000e1c:	000d883a 	mov	r6,zero
 8000e20:	000f883a 	mov	r7,zero
 8000e24:	9009883a 	mov	r4,r18
 8000e28:	980b883a 	mov	r5,r19
 8000e2c:	8003fe40 	call	8003fe4 <__ltdf2>
 8000e30:	103fad0e 	bge	r2,zero,8000ce8 <pow+0x68>
 8000e34:	b9000017 	ldw	r4,0(r23)
 8000e38:	00800044 	movi	r2,1
 8000e3c:	00c20074 	movhi	r3,2049
 8000e40:	18c64804 	addi	r3,r3,6432
 8000e44:	d8800015 	stw	r2,0(sp)
 8000e48:	d8c00115 	stw	r3,4(sp)
 8000e4c:	dd400315 	stw	r21,12(sp)
 8000e50:	dcc00515 	stw	r19,20(sp)
 8000e54:	d8000815 	stw	zero,32(sp)
 8000e58:	dd000215 	stw	r20,8(sp)
 8000e5c:	dc800415 	stw	r18,16(sp)
 8000e60:	20005626 	beq	r4,zero,8000fbc <pow+0x33c>
 8000e64:	00bffc34 	movhi	r2,65520
 8000e68:	d8800715 	stw	r2,28(sp)
 8000e6c:	00800084 	movi	r2,2
 8000e70:	d8000615 	stw	zero,24(sp)
 8000e74:	20800326 	beq	r4,r2,8000e84 <pow+0x204>
 8000e78:	d809883a 	mov	r4,sp
 8000e7c:	80027340 	call	8002734 <matherr>
 8000e80:	103fd91e 	bne	r2,zero,8000de8 <pow+0x168>
 8000e84:	8004d0c0 	call	8004d0c <__errno>
 8000e88:	00c00844 	movi	r3,33
 8000e8c:	10c00015 	stw	r3,0(r2)
 8000e90:	003fd506 	br	8000de8 <pow+0x168>
 8000e94:	8009883a 	mov	r4,r16
 8000e98:	880b883a 	mov	r5,r17
 8000e9c:	80026e80 	call	80026e8 <finite>
 8000ea0:	10002426 	beq	r2,zero,8000f34 <pow+0x2b4>
 8000ea4:	000d883a 	mov	r6,zero
 8000ea8:	000f883a 	mov	r7,zero
 8000eac:	8009883a 	mov	r4,r16
 8000eb0:	880b883a 	mov	r5,r17
 8000eb4:	8003e4c0 	call	8003e4c <__eqdf2>
 8000eb8:	103f8b1e 	bne	r2,zero,8000ce8 <pow+0x68>
 8000ebc:	a009883a 	mov	r4,r20
 8000ec0:	a80b883a 	mov	r5,r21
 8000ec4:	80026e80 	call	80026e8 <finite>
 8000ec8:	103f8726 	beq	r2,zero,8000ce8 <pow+0x68>
 8000ecc:	9009883a 	mov	r4,r18
 8000ed0:	980b883a 	mov	r5,r19
 8000ed4:	80026e80 	call	80026e8 <finite>
 8000ed8:	103f8326 	beq	r2,zero,8000ce8 <pow+0x68>
 8000edc:	b9000017 	ldw	r4,0(r23)
 8000ee0:	00800104 	movi	r2,4
 8000ee4:	d8800015 	stw	r2,0(sp)
 8000ee8:	00c20074 	movhi	r3,2049
 8000eec:	18c64804 	addi	r3,r3,6432
 8000ef0:	00800084 	movi	r2,2
 8000ef4:	d8c00115 	stw	r3,4(sp)
 8000ef8:	dd400315 	stw	r21,12(sp)
 8000efc:	dcc00515 	stw	r19,20(sp)
 8000f00:	d8000815 	stw	zero,32(sp)
 8000f04:	dd000215 	stw	r20,8(sp)
 8000f08:	dc800415 	stw	r18,16(sp)
 8000f0c:	d8000615 	stw	zero,24(sp)
 8000f10:	d8000715 	stw	zero,28(sp)
 8000f14:	20800326 	beq	r4,r2,8000f24 <pow+0x2a4>
 8000f18:	d809883a 	mov	r4,sp
 8000f1c:	80027340 	call	8002734 <matherr>
 8000f20:	103fb11e 	bne	r2,zero,8000de8 <pow+0x168>
 8000f24:	8004d0c0 	call	8004d0c <__errno>
 8000f28:	00c00884 	movi	r3,34
 8000f2c:	10c00015 	stw	r3,0(r2)
 8000f30:	003fad06 	br	8000de8 <pow+0x168>
 8000f34:	a009883a 	mov	r4,r20
 8000f38:	a80b883a 	mov	r5,r21
 8000f3c:	80026e80 	call	80026e8 <finite>
 8000f40:	103fd826 	beq	r2,zero,8000ea4 <pow+0x224>
 8000f44:	9009883a 	mov	r4,r18
 8000f48:	980b883a 	mov	r5,r19
 8000f4c:	80026e80 	call	80026e8 <finite>
 8000f50:	103fd426 	beq	r2,zero,8000ea4 <pow+0x224>
 8000f54:	880b883a 	mov	r5,r17
 8000f58:	8009883a 	mov	r4,r16
 8000f5c:	80027040 	call	8002704 <__isnand>
 8000f60:	10001926 	beq	r2,zero,8000fc8 <pow+0x348>
 8000f64:	bc000017 	ldw	r16,0(r23)
 8000f68:	00800044 	movi	r2,1
 8000f6c:	00c20074 	movhi	r3,2049
 8000f70:	18c64804 	addi	r3,r3,6432
 8000f74:	d8800015 	stw	r2,0(sp)
 8000f78:	d8c00115 	stw	r3,4(sp)
 8000f7c:	dd400315 	stw	r21,12(sp)
 8000f80:	dcc00515 	stw	r19,20(sp)
 8000f84:	d8000815 	stw	zero,32(sp)
 8000f88:	dd000215 	stw	r20,8(sp)
 8000f8c:	dc800415 	stw	r18,16(sp)
 8000f90:	80000a26 	beq	r16,zero,8000fbc <pow+0x33c>
 8000f94:	0009883a 	mov	r4,zero
 8000f98:	000d883a 	mov	r6,zero
 8000f9c:	000b883a 	mov	r5,zero
 8000fa0:	000f883a 	mov	r7,zero
 8000fa4:	8003bf40 	call	8003bf4 <__divdf3>
 8000fa8:	d8800615 	stw	r2,24(sp)
 8000fac:	00800084 	movi	r2,2
 8000fb0:	d8c00715 	stw	r3,28(sp)
 8000fb4:	80bfb01e 	bne	r16,r2,8000e78 <pow+0x1f8>
 8000fb8:	003fb206 	br	8000e84 <pow+0x204>
 8000fbc:	d8000615 	stw	zero,24(sp)
 8000fc0:	d8000715 	stw	zero,28(sp)
 8000fc4:	003fac06 	br	8000e78 <pow+0x1f8>
 8000fc8:	b8800017 	ldw	r2,0(r23)
 8000fcc:	00c000c4 	movi	r3,3
 8000fd0:	01020074 	movhi	r4,2049
 8000fd4:	21064804 	addi	r4,r4,6432
 8000fd8:	d8c00015 	stw	r3,0(sp)
 8000fdc:	d9000115 	stw	r4,4(sp)
 8000fe0:	d8000815 	stw	zero,32(sp)
 8000fe4:	dd000215 	stw	r20,8(sp)
 8000fe8:	dd400315 	stw	r21,12(sp)
 8000fec:	dc800415 	stw	r18,16(sp)
 8000ff0:	dcc00515 	stw	r19,20(sp)
 8000ff4:	1000251e 	bne	r2,zero,800108c <pow+0x40c>
 8000ff8:	05b80034 	movhi	r22,57344
 8000ffc:	0091fc34 	movhi	r2,18416
 8001000:	10bfffc4 	addi	r2,r2,-1
 8001004:	000d883a 	mov	r6,zero
 8001008:	000f883a 	mov	r7,zero
 800100c:	a80b883a 	mov	r5,r21
 8001010:	a009883a 	mov	r4,r20
 8001014:	d8800715 	stw	r2,28(sp)
 8001018:	dd800615 	stw	r22,24(sp)
 800101c:	8003fe40 	call	8003fe4 <__ltdf2>
 8001020:	103fbd0e 	bge	r2,zero,8000f18 <pow+0x298>
 8001024:	0005883a 	mov	r2,zero
 8001028:	00cff834 	movhi	r3,16352
 800102c:	180f883a 	mov	r7,r3
 8001030:	100d883a 	mov	r6,r2
 8001034:	980b883a 	mov	r5,r19
 8001038:	9009883a 	mov	r4,r18
 800103c:	80038300 	call	8003830 <__muldf3>
 8001040:	1009883a 	mov	r4,r2
 8001044:	180b883a 	mov	r5,r3
 8001048:	1021883a 	mov	r16,r2
 800104c:	1823883a 	mov	r17,r3
 8001050:	800274c0 	call	800274c <rint>
 8001054:	180f883a 	mov	r7,r3
 8001058:	8009883a 	mov	r4,r16
 800105c:	880b883a 	mov	r5,r17
 8001060:	100d883a 	mov	r6,r2
 8001064:	8003ed40 	call	8003ed4 <__nedf2>
 8001068:	10000426 	beq	r2,zero,800107c <pow+0x3fc>
 800106c:	00b1fc34 	movhi	r2,51184
 8001070:	10bfffc4 	addi	r2,r2,-1
 8001074:	dd800615 	stw	r22,24(sp)
 8001078:	d8800715 	stw	r2,28(sp)
 800107c:	b8c00017 	ldw	r3,0(r23)
 8001080:	00800084 	movi	r2,2
 8001084:	18bfa41e 	bne	r3,r2,8000f18 <pow+0x298>
 8001088:	003fa606 	br	8000f24 <pow+0x2a4>
 800108c:	009ffc34 	movhi	r2,32752
 8001090:	000d883a 	mov	r6,zero
 8001094:	000f883a 	mov	r7,zero
 8001098:	a80b883a 	mov	r5,r21
 800109c:	a009883a 	mov	r4,r20
 80010a0:	d8800715 	stw	r2,28(sp)
 80010a4:	d8000615 	stw	zero,24(sp)
 80010a8:	8003fe40 	call	8003fe4 <__ltdf2>
 80010ac:	103ff30e 	bge	r2,zero,800107c <pow+0x3fc>
 80010b0:	0005883a 	mov	r2,zero
 80010b4:	00cff834 	movhi	r3,16352
 80010b8:	180f883a 	mov	r7,r3
 80010bc:	100d883a 	mov	r6,r2
 80010c0:	980b883a 	mov	r5,r19
 80010c4:	9009883a 	mov	r4,r18
 80010c8:	80038300 	call	8003830 <__muldf3>
 80010cc:	1009883a 	mov	r4,r2
 80010d0:	180b883a 	mov	r5,r3
 80010d4:	1021883a 	mov	r16,r2
 80010d8:	1823883a 	mov	r17,r3
 80010dc:	800274c0 	call	800274c <rint>
 80010e0:	180f883a 	mov	r7,r3
 80010e4:	8009883a 	mov	r4,r16
 80010e8:	880b883a 	mov	r5,r17
 80010ec:	100d883a 	mov	r6,r2
 80010f0:	8003ed40 	call	8003ed4 <__nedf2>
 80010f4:	103fe126 	beq	r2,zero,800107c <pow+0x3fc>
 80010f8:	00bffc34 	movhi	r2,65520
 80010fc:	d8800715 	stw	r2,28(sp)
 8001100:	d8000615 	stw	zero,24(sp)
 8001104:	003fdd06 	br	800107c <pow+0x3fc>

08001108 <__ieee754_pow>:
 8001108:	deffbb04 	addi	sp,sp,-276
 800110c:	3005883a 	mov	r2,r6
 8001110:	dd404015 	stw	r21,256(sp)
 8001114:	dd003f15 	stw	r20,252(sp)
 8001118:	d9802815 	stw	r6,160(sp)
 800111c:	2029883a 	mov	r20,r4
 8001120:	282b883a 	mov	r21,r5
 8001124:	3009883a 	mov	r4,r6
 8001128:	380b883a 	mov	r5,r7
 800112c:	01a00034 	movhi	r6,32768
 8001130:	31bfffc4 	addi	r6,r6,-1
 8001134:	dc003b15 	stw	r16,236(sp)
 8001138:	29a0703a 	and	r16,r5,r6
 800113c:	1404b03a 	or	r2,r2,r16
 8001140:	dd804115 	stw	r22,260(sp)
 8001144:	dc403c15 	stw	r17,240(sp)
 8001148:	d9c02915 	stw	r7,164(sp)
 800114c:	382d883a 	mov	r22,r7
 8001150:	dfc04415 	stw	ra,272(sp)
 8001154:	200f883a 	mov	r7,r4
 8001158:	df004315 	stw	fp,268(sp)
 800115c:	ddc04215 	stw	r23,264(sp)
 8001160:	dcc03e15 	stw	r19,248(sp)
 8001164:	dc803d15 	stw	r18,244(sp)
 8001168:	a023883a 	mov	r17,r20
 800116c:	2809883a 	mov	r4,r5
 8001170:	10000826 	beq	r2,zero,8001194 <__ieee754_pow+0x8c>
 8001174:	a9a4703a 	and	r18,r21,r6
 8001178:	009ffc34 	movhi	r2,32752
 800117c:	a827883a 	mov	r19,r21
 8001180:	1480180e 	bge	r2,r18,80011e4 <__ieee754_pow+0xdc>
 8001184:	00b00434 	movhi	r2,49168
 8001188:	9085883a 	add	r2,r18,r2
 800118c:	8884b03a 	or	r2,r17,r2
 8001190:	1000321e 	bne	r2,zero,800125c <__ieee754_pow+0x154>
 8001194:	0009883a 	mov	r4,zero
 8001198:	014ffc34 	movhi	r5,16368
 800119c:	d9002815 	stw	r4,160(sp)
 80011a0:	d9402915 	stw	r5,164(sp)
 80011a4:	d9002817 	ldw	r4,160(sp)
 80011a8:	d9402917 	ldw	r5,164(sp)
 80011ac:	2005883a 	mov	r2,r4
 80011b0:	2807883a 	mov	r3,r5
 80011b4:	dfc04417 	ldw	ra,272(sp)
 80011b8:	df004317 	ldw	fp,268(sp)
 80011bc:	ddc04217 	ldw	r23,264(sp)
 80011c0:	dd804117 	ldw	r22,260(sp)
 80011c4:	dd404017 	ldw	r21,256(sp)
 80011c8:	dd003f17 	ldw	r20,252(sp)
 80011cc:	dcc03e17 	ldw	r19,248(sp)
 80011d0:	dc803d17 	ldw	r18,244(sp)
 80011d4:	dc403c17 	ldw	r17,240(sp)
 80011d8:	dc003b17 	ldw	r16,236(sp)
 80011dc:	dec04504 	addi	sp,sp,276
 80011e0:	f800283a 	ret
 80011e4:	90802b26 	beq	r18,r2,8001294 <__ieee754_pow+0x18c>
 80011e8:	143fe616 	blt	r2,r16,8001184 <__ieee754_pow+0x7c>
 80011ec:	80806126 	beq	r16,r2,8001374 <__ieee754_pow+0x26c>
 80011f0:	982e403a 	cmpge	r23,r19,zero
 80011f4:	b8004e26 	beq	r23,zero,8001330 <__ieee754_pow+0x228>
 80011f8:	0039883a 	mov	fp,zero
 80011fc:	3800281e 	bne	r7,zero,80012a0 <__ieee754_pow+0x198>
 8001200:	009ffc34 	movhi	r2,32752
 8001204:	80804f26 	beq	r16,r2,8001344 <__ieee754_pow+0x23c>
 8001208:	008ffc34 	movhi	r2,16368
 800120c:	80808226 	beq	r16,r2,8001418 <__ieee754_pow+0x310>
 8001210:	00900034 	movhi	r2,16384
 8001214:	20828426 	beq	r4,r2,8001c28 <__ieee754_pow+0xb20>
 8001218:	008ff834 	movhi	r2,16352
 800121c:	2080201e 	bne	r4,r2,80012a0 <__ieee754_pow+0x198>
 8001220:	98001f16 	blt	r19,zero,80012a0 <__ieee754_pow+0x198>
 8001224:	a80b883a 	mov	r5,r21
 8001228:	a009883a 	mov	r4,r20
 800122c:	dfc04417 	ldw	ra,272(sp)
 8001230:	df004317 	ldw	fp,268(sp)
 8001234:	ddc04217 	ldw	r23,264(sp)
 8001238:	dd804117 	ldw	r22,260(sp)
 800123c:	dd404017 	ldw	r21,256(sp)
 8001240:	dd003f17 	ldw	r20,252(sp)
 8001244:	dcc03e17 	ldw	r19,248(sp)
 8001248:	dc803d17 	ldw	r18,244(sp)
 800124c:	dc403c17 	ldw	r17,240(sp)
 8001250:	dc003b17 	ldw	r16,236(sp)
 8001254:	dec04504 	addi	sp,sp,276
 8001258:	80024081 	jmpi	8002408 <__ieee754_sqrt>
 800125c:	01020074 	movhi	r4,2049
 8001260:	2106b304 	addi	r4,r4,6860
 8001264:	dfc04417 	ldw	ra,272(sp)
 8001268:	df004317 	ldw	fp,268(sp)
 800126c:	ddc04217 	ldw	r23,264(sp)
 8001270:	dd804117 	ldw	r22,260(sp)
 8001274:	dd404017 	ldw	r21,256(sp)
 8001278:	dd003f17 	ldw	r20,252(sp)
 800127c:	dcc03e17 	ldw	r19,248(sp)
 8001280:	dc803d17 	ldw	r18,244(sp)
 8001284:	dc403c17 	ldw	r17,240(sp)
 8001288:	dc003b17 	ldw	r16,236(sp)
 800128c:	dec04504 	addi	sp,sp,276
 8001290:	800273c1 	jmpi	800273c <nan>
 8001294:	a03fbb1e 	bne	r20,zero,8001184 <__ieee754_pow+0x7c>
 8001298:	003fd306 	br	80011e8 <__ieee754_pow+0xe0>
 800129c:	0039883a 	mov	fp,zero
 80012a0:	a009883a 	mov	r4,r20
 80012a4:	a80b883a 	mov	r5,r21
 80012a8:	80026d00 	call	80026d0 <fabs>
 80012ac:	1015883a 	mov	r10,r2
 80012b0:	1817883a 	mov	r11,r3
 80012b4:	88001226 	beq	r17,zero,8001300 <__ieee754_pow+0x1f8>
 80012b8:	9804d7fa 	srli	r2,r19,31
 80012bc:	10bfffc4 	addi	r2,r2,-1
 80012c0:	1706b03a 	or	r3,r2,fp
 80012c4:	d8802515 	stw	r2,148(sp)
 80012c8:	18002c1e 	bne	r3,zero,800137c <__ieee754_pow+0x274>
 80012cc:	a80f883a 	mov	r7,r21
 80012d0:	a009883a 	mov	r4,r20
 80012d4:	a80b883a 	mov	r5,r21
 80012d8:	a00d883a 	mov	r6,r20
 80012dc:	800373c0 	call	800373c <__subdf3>
 80012e0:	1009883a 	mov	r4,r2
 80012e4:	180b883a 	mov	r5,r3
 80012e8:	100d883a 	mov	r6,r2
 80012ec:	180f883a 	mov	r7,r3
 80012f0:	8003bf40 	call	8003bf4 <__divdf3>
 80012f4:	d8802815 	stw	r2,160(sp)
 80012f8:	d8c02915 	stw	r3,164(sp)
 80012fc:	003fa906 	br	80011a4 <__ieee754_pow+0x9c>
 8001300:	009ffc34 	movhi	r2,32752
 8001304:	90800326 	beq	r18,r2,8001314 <__ieee754_pow+0x20c>
 8001308:	90000226 	beq	r18,zero,8001314 <__ieee754_pow+0x20c>
 800130c:	008ffc34 	movhi	r2,16368
 8001310:	90bfe91e 	bne	r18,r2,80012b8 <__ieee754_pow+0x1b0>
 8001314:	b0026316 	blt	r22,zero,8001ca4 <__ieee754_pow+0xb9c>
 8001318:	5011883a 	mov	r8,r10
 800131c:	5813883a 	mov	r9,r11
 8001320:	b8023126 	beq	r23,zero,8001be8 <__ieee754_pow+0xae0>
 8001324:	da002815 	stw	r8,160(sp)
 8001328:	da402915 	stw	r9,164(sp)
 800132c:	003f9d06 	br	80011a4 <__ieee754_pow+0x9c>
 8001330:	0090d034 	movhi	r2,17216
 8001334:	10bfffc4 	addi	r2,r2,-1
 8001338:	1400270e 	bge	r2,r16,80013d8 <__ieee754_pow+0x2d0>
 800133c:	07000084 	movi	fp,2
 8001340:	003fae06 	br	80011fc <__ieee754_pow+0xf4>
 8001344:	00b00434 	movhi	r2,49168
 8001348:	9085883a 	add	r2,r18,r2
 800134c:	8884b03a 	or	r2,r17,r2
 8001350:	103f9026 	beq	r2,zero,8001194 <__ieee754_pow+0x8c>
 8001354:	008ffc34 	movhi	r2,16368
 8001358:	10bfffc4 	addi	r2,r2,-1
 800135c:	1482d00e 	bge	r2,r18,8001ea0 <__ieee754_pow+0xd98>
 8001360:	b03f900e 	bge	r22,zero,80011a4 <__ieee754_pow+0x9c>
 8001364:	0005883a 	mov	r2,zero
 8001368:	d8802815 	stw	r2,160(sp)
 800136c:	d8802915 	stw	r2,164(sp)
 8001370:	003f8c06 	br	80011a4 <__ieee754_pow+0x9c>
 8001374:	383f9e26 	beq	r7,zero,80011f0 <__ieee754_pow+0xe8>
 8001378:	003f8206 	br	8001184 <__ieee754_pow+0x7c>
 800137c:	00907834 	movhi	r2,16864
 8001380:	1400290e 	bge	r2,r16,8001428 <__ieee754_pow+0x320>
 8001384:	0090fc34 	movhi	r2,17392
 8001388:	1402500e 	bge	r2,r16,8001ccc <__ieee754_pow+0xbc4>
 800138c:	008ffc34 	movhi	r2,16368
 8001390:	10bfffc4 	addi	r2,r2,-1
 8001394:	14800b0e 	bge	r2,r18,80013c4 <__ieee754_pow+0x2bc>
 8001398:	05800b0e 	bge	zero,r22,80013c8 <__ieee754_pow+0x2c0>
 800139c:	00a20034 	movhi	r2,34816
 80013a0:	109d6704 	addi	r2,r2,30108
 80013a4:	00df8e34 	movhi	r3,32312
 80013a8:	18f90f04 	addi	r3,r3,-7108
 80013ac:	100d883a 	mov	r6,r2
 80013b0:	180f883a 	mov	r7,r3
 80013b4:	1009883a 	mov	r4,r2
 80013b8:	180b883a 	mov	r5,r3
 80013bc:	80038300 	call	8003830 <__muldf3>
 80013c0:	003fcc06 	br	80012f4 <__ieee754_pow+0x1ec>
 80013c4:	b03ff516 	blt	r22,zero,800139c <__ieee754_pow+0x294>
 80013c8:	0007883a 	mov	r3,zero
 80013cc:	d8c02815 	stw	r3,160(sp)
 80013d0:	d8c02915 	stw	r3,164(sp)
 80013d4:	003f7306 	br	80011a4 <__ieee754_pow+0x9c>
 80013d8:	008ffc34 	movhi	r2,16368
 80013dc:	10bfffc4 	addi	r2,r2,-1
 80013e0:	143f850e 	bge	r2,r16,80011f8 <__ieee754_pow+0xf0>
 80013e4:	8005d53a 	srai	r2,r16,20
 80013e8:	01400504 	movi	r5,20
 80013ec:	10ff0044 	addi	r3,r2,-1023
 80013f0:	28c3e10e 	bge	r5,r3,8002378 <__ieee754_pow+0x1270>
 80013f4:	00800d04 	movi	r2,52
 80013f8:	10c5c83a 	sub	r2,r2,r3
 80013fc:	3886d83a 	srl	r3,r7,r2
 8001400:	1884983a 	sll	r2,r3,r2
 8001404:	38bf7c1e 	bne	r7,r2,80011f8 <__ieee754_pow+0xf0>
 8001408:	18c0004c 	andi	r3,r3,1
 800140c:	00800084 	movi	r2,2
 8001410:	10f9c83a 	sub	fp,r2,r3
 8001414:	003f7906 	br	80011fc <__ieee754_pow+0xf4>
 8001418:	b0038516 	blt	r22,zero,8002230 <__ieee754_pow+0x1128>
 800141c:	dd002815 	stw	r20,160(sp)
 8001420:	dd402915 	stw	r21,164(sp)
 8001424:	003f5f06 	br	80011a4 <__ieee754_pow+0x9c>
 8001428:	00800434 	movhi	r2,16
 800142c:	10bfffc4 	addi	r2,r2,-1
 8001430:	1482900e 	bge	r2,r18,8001e74 <__ieee754_pow+0xd6c>
 8001434:	000b883a 	mov	r5,zero
 8001438:	9005d53a 	srai	r2,r18,20
 800143c:	00c00434 	movhi	r3,16
 8001440:	18ffffc4 	addi	r3,r3,-1
 8001444:	90c8703a 	and	r4,r18,r3
 8001448:	2887883a 	add	r3,r5,r2
 800144c:	18bf0044 	addi	r2,r3,-1023
 8001450:	d8800015 	stw	r2,0(sp)
 8001454:	00800134 	movhi	r2,4
 8001458:	10a62384 	addi	r2,r2,-26482
 800145c:	250ffc34 	orhi	r20,r4,16368
 8001460:	1101ee0e 	bge	r2,r4,8001c1c <__ieee754_pow+0xb14>
 8001464:	00800334 	movhi	r2,12
 8001468:	10ad9e44 	addi	r2,r2,-18823
 800146c:	1101e716 	blt	r2,r4,8001c0c <__ieee754_pow+0xb04>
 8001470:	01000044 	movi	r4,1
 8001474:	04000334 	movhi	r16,12
 8001478:	200890fa 	slli	r4,r4,3
 800147c:	da800115 	stw	r10,4(sp)
 8001480:	dd000215 	stw	r20,8(sp)
 8001484:	d9002c15 	stw	r4,176(sp)
 8001488:	d9402c17 	ldw	r5,176(sp)
 800148c:	01020074 	movhi	r4,2049
 8001490:	21064904 	addi	r4,r4,6436
 8001494:	a02bd07a 	srai	r21,r20,1
 8001498:	2909883a 	add	r4,r5,r4
 800149c:	25800017 	ldw	r22,0(r4)
 80014a0:	25c00117 	ldw	r23,4(r4)
 80014a4:	a00b883a 	mov	r5,r20
 80014a8:	5009883a 	mov	r4,r10
 80014ac:	b00d883a 	mov	r6,r22
 80014b0:	b80f883a 	mov	r7,r23
 80014b4:	800373c0 	call	800373c <__subdf3>
 80014b8:	d9000117 	ldw	r4,4(sp)
 80014bc:	a00b883a 	mov	r5,r20
 80014c0:	b00d883a 	mov	r6,r22
 80014c4:	b80f883a 	mov	r7,r23
 80014c8:	1025883a 	mov	r18,r2
 80014cc:	1827883a 	mov	r19,r3
 80014d0:	80037bc0 	call	80037bc <__adddf3>
 80014d4:	0011883a 	mov	r8,zero
 80014d8:	024ffc34 	movhi	r9,16368
 80014dc:	480b883a 	mov	r5,r9
 80014e0:	4009883a 	mov	r4,r8
 80014e4:	180f883a 	mov	r7,r3
 80014e8:	100d883a 	mov	r6,r2
 80014ec:	8003bf40 	call	8003bf4 <__divdf3>
 80014f0:	d8c02e15 	stw	r3,184(sp)
 80014f4:	d8800f15 	stw	r2,60(sp)
 80014f8:	d8802d15 	stw	r2,180(sp)
 80014fc:	d8802e17 	ldw	r2,184(sp)
 8001500:	d9800f17 	ldw	r6,60(sp)
 8001504:	9009883a 	mov	r4,r18
 8001508:	980b883a 	mov	r5,r19
 800150c:	100f883a 	mov	r7,r2
 8001510:	dc800b15 	stw	r18,44(sp)
 8001514:	dcc00c15 	stw	r19,48(sp)
 8001518:	d8801015 	stw	r2,64(sp)
 800151c:	80038300 	call	8003830 <__muldf3>
 8001520:	d8c03015 	stw	r3,192(sp)
 8001524:	d9003017 	ldw	r4,192(sp)
 8001528:	d8802f15 	stw	r2,188(sp)
 800152c:	d8800315 	stw	r2,12(sp)
 8001530:	ad480034 	orhi	r21,r21,8192
 8001534:	0005883a 	mov	r2,zero
 8001538:	ac2b883a 	add	r21,r21,r16
 800153c:	000b883a 	mov	r5,zero
 8001540:	1021883a 	mov	r16,r2
 8001544:	2005883a 	mov	r2,r4
 8001548:	800d883a 	mov	r6,r16
 800154c:	a80f883a 	mov	r7,r21
 8001550:	d9000415 	stw	r4,16(sp)
 8001554:	d9002715 	stw	r4,156(sp)
 8001558:	d9402615 	stw	r5,152(sp)
 800155c:	d9401615 	stw	r5,88(sp)
 8001560:	d9001715 	stw	r4,92(sp)
 8001564:	100b883a 	mov	r5,r2
 8001568:	0009883a 	mov	r4,zero
 800156c:	80038300 	call	8003830 <__muldf3>
 8001570:	d9000b17 	ldw	r4,44(sp)
 8001574:	980b883a 	mov	r5,r19
 8001578:	180f883a 	mov	r7,r3
 800157c:	100d883a 	mov	r6,r2
 8001580:	800373c0 	call	800373c <__subdf3>
 8001584:	8009883a 	mov	r4,r16
 8001588:	a80b883a 	mov	r5,r21
 800158c:	b80f883a 	mov	r7,r23
 8001590:	b00d883a 	mov	r6,r22
 8001594:	1021883a 	mov	r16,r2
 8001598:	1823883a 	mov	r17,r3
 800159c:	800373c0 	call	800373c <__subdf3>
 80015a0:	d9000117 	ldw	r4,4(sp)
 80015a4:	a00b883a 	mov	r5,r20
 80015a8:	180f883a 	mov	r7,r3
 80015ac:	100d883a 	mov	r6,r2
 80015b0:	800373c0 	call	800373c <__subdf3>
 80015b4:	d9001617 	ldw	r4,88(sp)
 80015b8:	d9402717 	ldw	r5,156(sp)
 80015bc:	180f883a 	mov	r7,r3
 80015c0:	100d883a 	mov	r6,r2
 80015c4:	80038300 	call	8003830 <__muldf3>
 80015c8:	180f883a 	mov	r7,r3
 80015cc:	880b883a 	mov	r5,r17
 80015d0:	8009883a 	mov	r4,r16
 80015d4:	100d883a 	mov	r6,r2
 80015d8:	800373c0 	call	800373c <__subdf3>
 80015dc:	d9000f17 	ldw	r4,60(sp)
 80015e0:	d9402e17 	ldw	r5,184(sp)
 80015e4:	180f883a 	mov	r7,r3
 80015e8:	100d883a 	mov	r6,r2
 80015ec:	80038300 	call	8003830 <__muldf3>
 80015f0:	d9000317 	ldw	r4,12(sp)
 80015f4:	d9403017 	ldw	r5,192(sp)
 80015f8:	d8803115 	stw	r2,196(sp)
 80015fc:	200d883a 	mov	r6,r4
 8001600:	280f883a 	mov	r7,r5
 8001604:	d8c03215 	stw	r3,200(sp)
 8001608:	80038300 	call	8003830 <__muldf3>
 800160c:	1009883a 	mov	r4,r2
 8001610:	180b883a 	mov	r5,r3
 8001614:	100d883a 	mov	r6,r2
 8001618:	180f883a 	mov	r7,r3
 800161c:	1021883a 	mov	r16,r2
 8001620:	1823883a 	mov	r17,r3
 8001624:	80038300 	call	8003830 <__muldf3>
 8001628:	02129174 	movhi	r8,19013
 800162c:	4213bbc4 	addi	r8,r8,20207
 8001630:	024ff2b4 	movhi	r9,16330
 8001634:	4a5f8a04 	addi	r9,r9,32296
 8001638:	480f883a 	mov	r7,r9
 800163c:	8009883a 	mov	r4,r16
 8001640:	880b883a 	mov	r5,r17
 8001644:	400d883a 	mov	r6,r8
 8001648:	1029883a 	mov	r20,r2
 800164c:	182b883a 	mov	r21,r3
 8001650:	80038300 	call	8003830 <__muldf3>
 8001654:	0224f2b4 	movhi	r8,37834
 8001658:	4236d944 	addi	r8,r8,-9371
 800165c:	024ff3b4 	movhi	r9,16334
 8001660:	4a619284 	addi	r9,r9,-31158
 8001664:	480f883a 	mov	r7,r9
 8001668:	400d883a 	mov	r6,r8
 800166c:	180b883a 	mov	r5,r3
 8001670:	1009883a 	mov	r4,r2
 8001674:	80037bc0 	call	80037bc <__adddf3>
 8001678:	180f883a 	mov	r7,r3
 800167c:	8009883a 	mov	r4,r16
 8001680:	880b883a 	mov	r5,r17
 8001684:	100d883a 	mov	r6,r2
 8001688:	80038300 	call	8003830 <__muldf3>
 800168c:	022a4774 	movhi	r8,43293
 8001690:	42104044 	addi	r8,r8,16641
 8001694:	024ff474 	movhi	r9,16337
 8001698:	4a5d1804 	addi	r9,r9,29792
 800169c:	480f883a 	mov	r7,r9
 80016a0:	400d883a 	mov	r6,r8
 80016a4:	180b883a 	mov	r5,r3
 80016a8:	1009883a 	mov	r4,r2
 80016ac:	80037bc0 	call	80037bc <__adddf3>
 80016b0:	180f883a 	mov	r7,r3
 80016b4:	8009883a 	mov	r4,r16
 80016b8:	880b883a 	mov	r5,r17
 80016bc:	100d883a 	mov	r6,r2
 80016c0:	80038300 	call	8003830 <__muldf3>
 80016c4:	021463f4 	movhi	r8,20879
 80016c8:	42099344 	addi	r8,r8,9805
 80016cc:	024ff574 	movhi	r9,16341
 80016d0:	4a555544 	addi	r9,r9,21845
 80016d4:	480f883a 	mov	r7,r9
 80016d8:	400d883a 	mov	r6,r8
 80016dc:	180b883a 	mov	r5,r3
 80016e0:	1009883a 	mov	r4,r2
 80016e4:	80037bc0 	call	80037bc <__adddf3>
 80016e8:	180f883a 	mov	r7,r3
 80016ec:	8009883a 	mov	r4,r16
 80016f0:	880b883a 	mov	r5,r17
 80016f4:	100d883a 	mov	r6,r2
 80016f8:	80038300 	call	8003830 <__muldf3>
 80016fc:	0236dc34 	movhi	r8,56176
 8001700:	422affc4 	addi	r8,r8,-21505
 8001704:	024ff6f4 	movhi	r9,16347
 8001708:	4a5b6d84 	addi	r9,r9,28086
 800170c:	480f883a 	mov	r7,r9
 8001710:	400d883a 	mov	r6,r8
 8001714:	180b883a 	mov	r5,r3
 8001718:	1009883a 	mov	r4,r2
 800171c:	80037bc0 	call	80037bc <__adddf3>
 8001720:	180f883a 	mov	r7,r3
 8001724:	8009883a 	mov	r4,r16
 8001728:	880b883a 	mov	r5,r17
 800172c:	100d883a 	mov	r6,r2
 8001730:	80038300 	call	8003830 <__muldf3>
 8001734:	020cccf4 	movhi	r8,13107
 8001738:	420cc0c4 	addi	r8,r8,13059
 800173c:	024ff8f4 	movhi	r9,16355
 8001740:	4a4cccc4 	addi	r9,r9,13107
 8001744:	480f883a 	mov	r7,r9
 8001748:	400d883a 	mov	r6,r8
 800174c:	180b883a 	mov	r5,r3
 8001750:	1009883a 	mov	r4,r2
 8001754:	80037bc0 	call	80037bc <__adddf3>
 8001758:	180f883a 	mov	r7,r3
 800175c:	a80b883a 	mov	r5,r21
 8001760:	a009883a 	mov	r4,r20
 8001764:	100d883a 	mov	r6,r2
 8001768:	80038300 	call	8003830 <__muldf3>
 800176c:	d9000317 	ldw	r4,12(sp)
 8001770:	d9403017 	ldw	r5,192(sp)
 8001774:	d9801617 	ldw	r6,88(sp)
 8001778:	d9c02717 	ldw	r7,156(sp)
 800177c:	1021883a 	mov	r16,r2
 8001780:	1823883a 	mov	r17,r3
 8001784:	80037bc0 	call	80037bc <__adddf3>
 8001788:	d9003117 	ldw	r4,196(sp)
 800178c:	d9403217 	ldw	r5,200(sp)
 8001790:	180f883a 	mov	r7,r3
 8001794:	100d883a 	mov	r6,r2
 8001798:	d9001415 	stw	r4,80(sp)
 800179c:	d9401515 	stw	r5,84(sp)
 80017a0:	80038300 	call	8003830 <__muldf3>
 80017a4:	180f883a 	mov	r7,r3
 80017a8:	8009883a 	mov	r4,r16
 80017ac:	880b883a 	mov	r5,r17
 80017b0:	100d883a 	mov	r6,r2
 80017b4:	80037bc0 	call	80037bc <__adddf3>
 80017b8:	d9001617 	ldw	r4,88(sp)
 80017bc:	d9402717 	ldw	r5,156(sp)
 80017c0:	d8803315 	stw	r2,204(sp)
 80017c4:	200d883a 	mov	r6,r4
 80017c8:	280f883a 	mov	r7,r5
 80017cc:	d8c03415 	stw	r3,208(sp)
 80017d0:	80038300 	call	8003830 <__muldf3>
 80017d4:	182f883a 	mov	r23,r3
 80017d8:	05500234 	movhi	r21,16392
 80017dc:	0029883a 	mov	r20,zero
 80017e0:	b80b883a 	mov	r5,r23
 80017e4:	a00d883a 	mov	r6,r20
 80017e8:	a80f883a 	mov	r7,r21
 80017ec:	1009883a 	mov	r4,r2
 80017f0:	d8800715 	stw	r2,28(sp)
 80017f4:	d8c00815 	stw	r3,32(sp)
 80017f8:	80037bc0 	call	80037bc <__adddf3>
 80017fc:	d9003317 	ldw	r4,204(sp)
 8001800:	d9403417 	ldw	r5,208(sp)
 8001804:	180f883a 	mov	r7,r3
 8001808:	100d883a 	mov	r6,r2
 800180c:	d9000515 	stw	r4,20(sp)
 8001810:	d9400615 	stw	r5,24(sp)
 8001814:	80037bc0 	call	80037bc <__adddf3>
 8001818:	d9001617 	ldw	r4,88(sp)
 800181c:	d9402717 	ldw	r5,156(sp)
 8001820:	0025883a 	mov	r18,zero
 8001824:	900d883a 	mov	r6,r18
 8001828:	180f883a 	mov	r7,r3
 800182c:	1823883a 	mov	r17,r3
 8001830:	80038300 	call	8003830 <__muldf3>
 8001834:	d9001417 	ldw	r4,80(sp)
 8001838:	d9403217 	ldw	r5,200(sp)
 800183c:	880f883a 	mov	r7,r17
 8001840:	900d883a 	mov	r6,r18
 8001844:	d8803515 	stw	r2,212(sp)
 8001848:	d8c03615 	stw	r3,216(sp)
 800184c:	80038300 	call	8003830 <__muldf3>
 8001850:	a80f883a 	mov	r7,r21
 8001854:	880b883a 	mov	r5,r17
 8001858:	000d883a 	mov	r6,zero
 800185c:	9009883a 	mov	r4,r18
 8001860:	1021883a 	mov	r16,r2
 8001864:	1823883a 	mov	r17,r3
 8001868:	800373c0 	call	800373c <__subdf3>
 800186c:	d9800717 	ldw	r6,28(sp)
 8001870:	b80f883a 	mov	r7,r23
 8001874:	180b883a 	mov	r5,r3
 8001878:	1009883a 	mov	r4,r2
 800187c:	800373c0 	call	800373c <__subdf3>
 8001880:	d9000517 	ldw	r4,20(sp)
 8001884:	d9403417 	ldw	r5,208(sp)
 8001888:	180f883a 	mov	r7,r3
 800188c:	100d883a 	mov	r6,r2
 8001890:	800373c0 	call	800373c <__subdf3>
 8001894:	d9000317 	ldw	r4,12(sp)
 8001898:	d9403017 	ldw	r5,192(sp)
 800189c:	180f883a 	mov	r7,r3
 80018a0:	100d883a 	mov	r6,r2
 80018a4:	80038300 	call	8003830 <__muldf3>
 80018a8:	180f883a 	mov	r7,r3
 80018ac:	880b883a 	mov	r5,r17
 80018b0:	8009883a 	mov	r4,r16
 80018b4:	100d883a 	mov	r6,r2
 80018b8:	80037bc0 	call	80037bc <__adddf3>
 80018bc:	102d883a 	mov	r22,r2
 80018c0:	d9003617 	ldw	r4,216(sp)
 80018c4:	d8803517 	ldw	r2,212(sp)
 80018c8:	d9403617 	ldw	r5,216(sp)
 80018cc:	182f883a 	mov	r23,r3
 80018d0:	b00d883a 	mov	r6,r22
 80018d4:	b80f883a 	mov	r7,r23
 80018d8:	d9000a15 	stw	r4,40(sp)
 80018dc:	1009883a 	mov	r4,r2
 80018e0:	054ffbf4 	movhi	r21,16367
 80018e4:	ad71c244 	addi	r21,r21,-14583
 80018e8:	dd800d15 	stw	r22,52(sp)
 80018ec:	ddc00e15 	stw	r23,56(sp)
 80018f0:	05380034 	movhi	r20,57344
 80018f4:	d8800915 	stw	r2,36(sp)
 80018f8:	80037bc0 	call	80037bc <__adddf3>
 80018fc:	180b883a 	mov	r5,r3
 8001900:	a00d883a 	mov	r6,r20
 8001904:	a80f883a 	mov	r7,r21
 8001908:	9009883a 	mov	r4,r18
 800190c:	1823883a 	mov	r17,r3
 8001910:	80038300 	call	8003830 <__muldf3>
 8001914:	020516f4 	movhi	r8,5211
 8001918:	42007d44 	addi	r8,r8,501
 800191c:	026f8fb4 	movhi	r9,48702
 8001920:	4a4bf804 	addi	r9,r9,12256
 8001924:	480f883a 	mov	r7,r9
 8001928:	400d883a 	mov	r6,r8
 800192c:	880b883a 	mov	r5,r17
 8001930:	9009883a 	mov	r4,r18
 8001934:	d8803715 	stw	r2,220(sp)
 8001938:	d8c03815 	stw	r3,224(sp)
 800193c:	80038300 	call	8003830 <__muldf3>
 8001940:	d9800917 	ldw	r6,36(sp)
 8001944:	d9c03617 	ldw	r7,216(sp)
 8001948:	880b883a 	mov	r5,r17
 800194c:	9009883a 	mov	r4,r18
 8001950:	1021883a 	mov	r16,r2
 8001954:	1823883a 	mov	r17,r3
 8001958:	800373c0 	call	800373c <__subdf3>
 800195c:	d9000d17 	ldw	r4,52(sp)
 8001960:	b80b883a 	mov	r5,r23
 8001964:	180f883a 	mov	r7,r3
 8001968:	100d883a 	mov	r6,r2
 800196c:	800373c0 	call	800373c <__subdf3>
 8001970:	180b883a 	mov	r5,r3
 8001974:	a80f883a 	mov	r7,r21
 8001978:	01b70eb4 	movhi	r6,56378
 800197c:	3180ff44 	addi	r6,r6,1021
 8001980:	1009883a 	mov	r4,r2
 8001984:	80038300 	call	8003830 <__muldf3>
 8001988:	180f883a 	mov	r7,r3
 800198c:	880b883a 	mov	r5,r17
 8001990:	8009883a 	mov	r4,r16
 8001994:	100d883a 	mov	r6,r2
 8001998:	80037bc0 	call	80037bc <__adddf3>
 800199c:	d9402c17 	ldw	r5,176(sp)
 80019a0:	01020074 	movhi	r4,2049
 80019a4:	21064d04 	addi	r4,r4,6452
 80019a8:	2909883a 	add	r4,r5,r4
 80019ac:	22400117 	ldw	r9,4(r4)
 80019b0:	22000017 	ldw	r8,0(r4)
 80019b4:	180b883a 	mov	r5,r3
 80019b8:	480f883a 	mov	r7,r9
 80019bc:	400d883a 	mov	r6,r8
 80019c0:	1009883a 	mov	r4,r2
 80019c4:	80037bc0 	call	80037bc <__adddf3>
 80019c8:	d9000017 	ldw	r4,0(sp)
 80019cc:	182f883a 	mov	r23,r3
 80019d0:	102d883a 	mov	r22,r2
 80019d4:	80040f40 	call	80040f4 <__floatsidf>
 80019d8:	d9402c17 	ldw	r5,176(sp)
 80019dc:	01020074 	movhi	r4,2049
 80019e0:	21065104 	addi	r4,r4,6468
 80019e4:	b00d883a 	mov	r6,r22
 80019e8:	2911883a 	add	r8,r5,r4
 80019ec:	d9003717 	ldw	r4,220(sp)
 80019f0:	d9403817 	ldw	r5,224(sp)
 80019f4:	45000017 	ldw	r20,0(r8)
 80019f8:	d9002315 	stw	r4,140(sp)
 80019fc:	d9003817 	ldw	r4,224(sp)
 8001a00:	45400117 	ldw	r21,4(r8)
 8001a04:	b80f883a 	mov	r7,r23
 8001a08:	d9002415 	stw	r4,144(sp)
 8001a0c:	d9002317 	ldw	r4,140(sp)
 8001a10:	1021883a 	mov	r16,r2
 8001a14:	1823883a 	mov	r17,r3
 8001a18:	dd802115 	stw	r22,132(sp)
 8001a1c:	ddc02215 	stw	r23,136(sp)
 8001a20:	80037bc0 	call	80037bc <__adddf3>
 8001a24:	180b883a 	mov	r5,r3
 8001a28:	1009883a 	mov	r4,r2
 8001a2c:	a00d883a 	mov	r6,r20
 8001a30:	a80f883a 	mov	r7,r21
 8001a34:	80037bc0 	call	80037bc <__adddf3>
 8001a38:	180f883a 	mov	r7,r3
 8001a3c:	8009883a 	mov	r4,r16
 8001a40:	880b883a 	mov	r5,r17
 8001a44:	100d883a 	mov	r6,r2
 8001a48:	80037bc0 	call	80037bc <__adddf3>
 8001a4c:	180b883a 	mov	r5,r3
 8001a50:	0009883a 	mov	r4,zero
 8001a54:	800d883a 	mov	r6,r16
 8001a58:	880f883a 	mov	r7,r17
 8001a5c:	d9001b15 	stw	r4,108(sp)
 8001a60:	d8c01c15 	stw	r3,112(sp)
 8001a64:	800373c0 	call	800373c <__subdf3>
 8001a68:	180b883a 	mov	r5,r3
 8001a6c:	a80f883a 	mov	r7,r21
 8001a70:	1009883a 	mov	r4,r2
 8001a74:	a00d883a 	mov	r6,r20
 8001a78:	800373c0 	call	800373c <__subdf3>
 8001a7c:	d9802317 	ldw	r6,140(sp)
 8001a80:	d9c03817 	ldw	r7,224(sp)
 8001a84:	180b883a 	mov	r5,r3
 8001a88:	1009883a 	mov	r4,r2
 8001a8c:	800373c0 	call	800373c <__subdf3>
 8001a90:	d9002117 	ldw	r4,132(sp)
 8001a94:	1011883a 	mov	r8,r2
 8001a98:	1813883a 	mov	r9,r3
 8001a9c:	b80b883a 	mov	r5,r23
 8001aa0:	480f883a 	mov	r7,r9
 8001aa4:	400d883a 	mov	r6,r8
 8001aa8:	800373c0 	call	800373c <__subdf3>
 8001aac:	1823883a 	mov	r17,r3
 8001ab0:	d8c02517 	ldw	r3,148(sp)
 8001ab4:	1021883a 	mov	r16,r2
 8001ab8:	e0bfffc4 	addi	r2,fp,-1
 8001abc:	1884b03a 	or	r2,r3,r2
 8001ac0:	1000731e 	bne	r2,zero,8001c90 <__ieee754_pow+0xb88>
 8001ac4:	0009883a 	mov	r4,zero
 8001ac8:	016ffc34 	movhi	r5,49136
 8001acc:	d9001915 	stw	r4,100(sp)
 8001ad0:	d9401a15 	stw	r5,104(sp)
 8001ad4:	d9402917 	ldw	r5,164(sp)
 8001ad8:	d9002817 	ldw	r4,160(sp)
 8001adc:	0029883a 	mov	r20,zero
 8001ae0:	a00d883a 	mov	r6,r20
 8001ae4:	280f883a 	mov	r7,r5
 8001ae8:	2827883a 	mov	r19,r5
 8001aec:	800373c0 	call	800373c <__subdf3>
 8001af0:	d9001b17 	ldw	r4,108(sp)
 8001af4:	d9401c17 	ldw	r5,112(sp)
 8001af8:	180f883a 	mov	r7,r3
 8001afc:	100d883a 	mov	r6,r2
 8001b00:	80038300 	call	8003830 <__muldf3>
 8001b04:	d9c02917 	ldw	r7,164(sp)
 8001b08:	d9802817 	ldw	r6,160(sp)
 8001b0c:	880b883a 	mov	r5,r17
 8001b10:	8009883a 	mov	r4,r16
 8001b14:	1823883a 	mov	r17,r3
 8001b18:	1021883a 	mov	r16,r2
 8001b1c:	80038300 	call	8003830 <__muldf3>
 8001b20:	180f883a 	mov	r7,r3
 8001b24:	880b883a 	mov	r5,r17
 8001b28:	8009883a 	mov	r4,r16
 8001b2c:	100d883a 	mov	r6,r2
 8001b30:	80037bc0 	call	80037bc <__adddf3>
 8001b34:	d9401c17 	ldw	r5,112(sp)
 8001b38:	d9001b17 	ldw	r4,108(sp)
 8001b3c:	a00d883a 	mov	r6,r20
 8001b40:	980f883a 	mov	r7,r19
 8001b44:	1029883a 	mov	r20,r2
 8001b48:	182b883a 	mov	r21,r3
 8001b4c:	80038300 	call	8003830 <__muldf3>
 8001b50:	1025883a 	mov	r18,r2
 8001b54:	1827883a 	mov	r19,r3
 8001b58:	a009883a 	mov	r4,r20
 8001b5c:	a80b883a 	mov	r5,r21
 8001b60:	900d883a 	mov	r6,r18
 8001b64:	980f883a 	mov	r7,r19
 8001b68:	dd001d15 	stw	r20,116(sp)
 8001b6c:	dc801f15 	stw	r18,124(sp)
 8001b70:	dd401e15 	stw	r21,120(sp)
 8001b74:	dcc02015 	stw	r19,128(sp)
 8001b78:	80037bc0 	call	80037bc <__adddf3>
 8001b7c:	1823883a 	mov	r17,r3
 8001b80:	01102434 	movhi	r4,16528
 8001b84:	213fffc4 	addi	r4,r4,-1
 8001b88:	1021883a 	mov	r16,r2
 8001b8c:	182f883a 	mov	r23,r3
 8001b90:	dc401815 	stw	r17,96(sp)
 8001b94:	100b883a 	mov	r5,r2
 8001b98:	20c02c0e 	bge	r4,r3,8001c4c <__ieee754_pow+0xb44>
 8001b9c:	00afdc34 	movhi	r2,49008
 8001ba0:	1885883a 	add	r2,r3,r2
 8001ba4:	2884b03a 	or	r2,r5,r2
 8001ba8:	1001a626 	beq	r2,zero,8002244 <__ieee754_pow+0x113c>
 8001bac:	04220034 	movhi	r16,34816
 8001bb0:	841d6704 	addi	r16,r16,30108
 8001bb4:	045f8e34 	movhi	r17,32312
 8001bb8:	8c790f04 	addi	r17,r17,-7108
 8001bbc:	d9401a17 	ldw	r5,104(sp)
 8001bc0:	d9001917 	ldw	r4,100(sp)
 8001bc4:	800d883a 	mov	r6,r16
 8001bc8:	880f883a 	mov	r7,r17
 8001bcc:	80038300 	call	8003830 <__muldf3>
 8001bd0:	180b883a 	mov	r5,r3
 8001bd4:	800d883a 	mov	r6,r16
 8001bd8:	880f883a 	mov	r7,r17
 8001bdc:	1009883a 	mov	r4,r2
 8001be0:	80038300 	call	8003830 <__muldf3>
 8001be4:	003dc306 	br	80012f4 <__ieee754_pow+0x1ec>
 8001be8:	00b00434 	movhi	r2,49168
 8001bec:	9085883a 	add	r2,r18,r2
 8001bf0:	e084b03a 	or	r2,fp,r2
 8001bf4:	1000af1e 	bne	r2,zero,8001eb4 <__ieee754_pow+0xdac>
 8001bf8:	480f883a 	mov	r7,r9
 8001bfc:	4009883a 	mov	r4,r8
 8001c00:	480b883a 	mov	r5,r9
 8001c04:	400d883a 	mov	r6,r8
 8001c08:	003db406 	br	80012dc <__ieee754_pow+0x1d4>
 8001c0c:	00bffc34 	movhi	r2,65520
 8001c10:	18ff0084 	addi	r3,r3,-1022
 8001c14:	a0a9883a 	add	r20,r20,r2
 8001c18:	d8c00015 	stw	r3,0(sp)
 8001c1c:	0009883a 	mov	r4,zero
 8001c20:	04000234 	movhi	r16,8
 8001c24:	003e1406 	br	8001478 <__ieee754_pow+0x370>
 8001c28:	a80f883a 	mov	r7,r21
 8001c2c:	a009883a 	mov	r4,r20
 8001c30:	a80b883a 	mov	r5,r21
 8001c34:	a00d883a 	mov	r6,r20
 8001c38:	80038300 	call	8003830 <__muldf3>
 8001c3c:	180b883a 	mov	r5,r3
 8001c40:	d8802815 	stw	r2,160(sp)
 8001c44:	d9402915 	stw	r5,164(sp)
 8001c48:	003d5606 	br	80011a4 <__ieee754_pow+0x9c>
 8001c4c:	d9001817 	ldw	r4,96(sp)
 8001c50:	00a00034 	movhi	r2,32768
 8001c54:	10bfffc4 	addi	r2,r2,-1
 8001c58:	00d02474 	movhi	r3,16529
 8001c5c:	18f2ffc4 	addi	r3,r3,-13313
 8001c60:	20b8703a 	and	fp,r4,r2
 8001c64:	1f009d0e 	bge	r3,fp,8001edc <__ieee754_pow+0xdd4>
 8001c68:	008fdbf4 	movhi	r2,16239
 8001c6c:	108d0004 	addi	r2,r2,13312
 8001c70:	2085883a 	add	r2,r4,r2
 8001c74:	1144b03a 	or	r2,r2,r5
 8001c78:	1001c626 	beq	r2,zero,8002394 <__ieee754_pow+0x128c>
 8001c7c:	0430be74 	movhi	r16,49913
 8001c80:	843cd644 	addi	r16,r16,-3239
 8001c84:	04406974 	movhi	r17,421
 8001c88:	8c5b87c4 	addi	r17,r17,28191
 8001c8c:	003fcb06 	br	8001bbc <__ieee754_pow+0xab4>
 8001c90:	0005883a 	mov	r2,zero
 8001c94:	00cffc34 	movhi	r3,16368
 8001c98:	d8801915 	stw	r2,100(sp)
 8001c9c:	d8c01a15 	stw	r3,104(sp)
 8001ca0:	003f8c06 	br	8001ad4 <__ieee754_pow+0x9cc>
 8001ca4:	0005883a 	mov	r2,zero
 8001ca8:	00cffc34 	movhi	r3,16368
 8001cac:	180b883a 	mov	r5,r3
 8001cb0:	580f883a 	mov	r7,r11
 8001cb4:	1009883a 	mov	r4,r2
 8001cb8:	500d883a 	mov	r6,r10
 8001cbc:	8003bf40 	call	8003bf4 <__divdf3>
 8001cc0:	1011883a 	mov	r8,r2
 8001cc4:	1813883a 	mov	r9,r3
 8001cc8:	003d9506 	br	8001320 <__ieee754_pow+0x218>
 8001ccc:	008ffc34 	movhi	r2,16368
 8001cd0:	10bfff84 	addi	r2,r2,-2
 8001cd4:	14bdbb0e 	bge	r2,r18,80013c4 <__ieee754_pow+0x2bc>
 8001cd8:	008ffc34 	movhi	r2,16368
 8001cdc:	14bdae16 	blt	r2,r18,8001398 <__ieee754_pow+0x290>
 8001ce0:	580b883a 	mov	r5,r11
 8001ce4:	5009883a 	mov	r4,r10
 8001ce8:	000d883a 	mov	r6,zero
 8001cec:	100f883a 	mov	r7,r2
 8001cf0:	800373c0 	call	800373c <__subdf3>
 8001cf4:	1021883a 	mov	r16,r2
 8001cf8:	1823883a 	mov	r17,r3
 8001cfc:	00980034 	movhi	r2,24576
 8001d00:	00cffdf4 	movhi	r3,16375
 8001d04:	18c551c4 	addi	r3,r3,5447
 8001d08:	8009883a 	mov	r4,r16
 8001d0c:	880b883a 	mov	r5,r17
 8001d10:	180f883a 	mov	r7,r3
 8001d14:	100d883a 	mov	r6,r2
 8001d18:	80038300 	call	8003830 <__muldf3>
 8001d1c:	023e17b4 	movhi	r8,63582
 8001d20:	4237d104 	addi	r8,r8,-8380
 8001d24:	024f9574 	movhi	r9,15957
 8001d28:	4a6b82c4 	addi	r9,r9,-20981
 8001d2c:	480f883a 	mov	r7,r9
 8001d30:	400d883a 	mov	r6,r8
 8001d34:	8009883a 	mov	r4,r16
 8001d38:	880b883a 	mov	r5,r17
 8001d3c:	102d883a 	mov	r22,r2
 8001d40:	182f883a 	mov	r23,r3
 8001d44:	80038300 	call	8003830 <__muldf3>
 8001d48:	8009883a 	mov	r4,r16
 8001d4c:	880b883a 	mov	r5,r17
 8001d50:	800d883a 	mov	r6,r16
 8001d54:	880f883a 	mov	r7,r17
 8001d58:	d8802a15 	stw	r2,168(sp)
 8001d5c:	d8c02b15 	stw	r3,172(sp)
 8001d60:	80038300 	call	8003830 <__muldf3>
 8001d64:	0011883a 	mov	r8,zero
 8001d68:	026ff434 	movhi	r9,49104
 8001d6c:	480f883a 	mov	r7,r9
 8001d70:	8009883a 	mov	r4,r16
 8001d74:	880b883a 	mov	r5,r17
 8001d78:	400d883a 	mov	r6,r8
 8001d7c:	1029883a 	mov	r20,r2
 8001d80:	182b883a 	mov	r21,r3
 8001d84:	80038300 	call	8003830 <__muldf3>
 8001d88:	02155574 	movhi	r8,21845
 8001d8c:	42155544 	addi	r8,r8,21845
 8001d90:	024ff574 	movhi	r9,16341
 8001d94:	4a555544 	addi	r9,r9,21845
 8001d98:	480f883a 	mov	r7,r9
 8001d9c:	400d883a 	mov	r6,r8
 8001da0:	180b883a 	mov	r5,r3
 8001da4:	1009883a 	mov	r4,r2
 8001da8:	80037bc0 	call	80037bc <__adddf3>
 8001dac:	180f883a 	mov	r7,r3
 8001db0:	8009883a 	mov	r4,r16
 8001db4:	880b883a 	mov	r5,r17
 8001db8:	100d883a 	mov	r6,r2
 8001dbc:	80038300 	call	8003830 <__muldf3>
 8001dc0:	0011883a 	mov	r8,zero
 8001dc4:	024ff834 	movhi	r9,16352
 8001dc8:	480b883a 	mov	r5,r9
 8001dcc:	4009883a 	mov	r4,r8
 8001dd0:	180f883a 	mov	r7,r3
 8001dd4:	100d883a 	mov	r6,r2
 8001dd8:	800373c0 	call	800373c <__subdf3>
 8001ddc:	180f883a 	mov	r7,r3
 8001de0:	a80b883a 	mov	r5,r21
 8001de4:	a009883a 	mov	r4,r20
 8001de8:	100d883a 	mov	r6,r2
 8001dec:	80038300 	call	8003830 <__muldf3>
 8001df0:	02194b34 	movhi	r8,25900
 8001df4:	4220bf84 	addi	r8,r8,-32002
 8001df8:	026ffdf4 	movhi	r9,49143
 8001dfc:	4a4551c4 	addi	r9,r9,5447
 8001e00:	480f883a 	mov	r7,r9
 8001e04:	400d883a 	mov	r6,r8
 8001e08:	180b883a 	mov	r5,r3
 8001e0c:	1009883a 	mov	r4,r2
 8001e10:	80038300 	call	8003830 <__muldf3>
 8001e14:	d9402b17 	ldw	r5,172(sp)
 8001e18:	d9002a17 	ldw	r4,168(sp)
 8001e1c:	180f883a 	mov	r7,r3
 8001e20:	100d883a 	mov	r6,r2
 8001e24:	80037bc0 	call	80037bc <__adddf3>
 8001e28:	100d883a 	mov	r6,r2
 8001e2c:	b009883a 	mov	r4,r22
 8001e30:	b80b883a 	mov	r5,r23
 8001e34:	180f883a 	mov	r7,r3
 8001e38:	1021883a 	mov	r16,r2
 8001e3c:	1823883a 	mov	r17,r3
 8001e40:	80037bc0 	call	80037bc <__adddf3>
 8001e44:	180b883a 	mov	r5,r3
 8001e48:	0009883a 	mov	r4,zero
 8001e4c:	b00d883a 	mov	r6,r22
 8001e50:	b80f883a 	mov	r7,r23
 8001e54:	d9001b15 	stw	r4,108(sp)
 8001e58:	d8c01c15 	stw	r3,112(sp)
 8001e5c:	800373c0 	call	800373c <__subdf3>
 8001e60:	1011883a 	mov	r8,r2
 8001e64:	1813883a 	mov	r9,r3
 8001e68:	8009883a 	mov	r4,r16
 8001e6c:	880b883a 	mov	r5,r17
 8001e70:	003f0b06 	br	8001aa0 <__ieee754_pow+0x998>
 8001e74:	0005883a 	mov	r2,zero
 8001e78:	00d0d034 	movhi	r3,17216
 8001e7c:	580b883a 	mov	r5,r11
 8001e80:	5009883a 	mov	r4,r10
 8001e84:	180f883a 	mov	r7,r3
 8001e88:	100d883a 	mov	r6,r2
 8001e8c:	80038300 	call	8003830 <__muldf3>
 8001e90:	1015883a 	mov	r10,r2
 8001e94:	1825883a 	mov	r18,r3
 8001e98:	017ff2c4 	movi	r5,-53
 8001e9c:	003d6606 	br	8001438 <__ieee754_pow+0x330>
 8001ea0:	b03d300e 	bge	r22,zero,8001364 <__ieee754_pow+0x25c>
 8001ea4:	d9402917 	ldw	r5,164(sp)
 8001ea8:	28e0003c 	xorhi	r3,r5,32768
 8001eac:	d8c02915 	stw	r3,164(sp)
 8001eb0:	003cbc06 	br	80011a4 <__ieee754_pow+0x9c>
 8001eb4:	00800044 	movi	r2,1
 8001eb8:	e0bd1a1e 	bne	fp,r2,8001324 <__ieee754_pow+0x21c>
 8001ebc:	48e0003c 	xorhi	r3,r9,32768
 8001ec0:	da002815 	stw	r8,160(sp)
 8001ec4:	d8c02915 	stw	r3,164(sp)
 8001ec8:	003cb606 	br	80011a4 <__ieee754_pow+0x9c>
 8001ecc:	d9001817 	ldw	r4,96(sp)
 8001ed0:	00a00034 	movhi	r2,32768
 8001ed4:	10bfffc4 	addi	r2,r2,-1
 8001ed8:	20b8703a 	and	fp,r4,r2
 8001edc:	008ff834 	movhi	r2,16352
 8001ee0:	1700fc16 	blt	r2,fp,80022d4 <__ieee754_pow+0x11cc>
 8001ee4:	0039883a 	mov	fp,zero
 8001ee8:	d8001315 	stw	zero,76(sp)
 8001eec:	0025883a 	mov	r18,zero
 8001ef0:	0005883a 	mov	r2,zero
 8001ef4:	00cff9b4 	movhi	r3,16358
 8001ef8:	18cb90c4 	addi	r3,r3,11843
 8001efc:	9009883a 	mov	r4,r18
 8001f00:	b80b883a 	mov	r5,r23
 8001f04:	180f883a 	mov	r7,r3
 8001f08:	100d883a 	mov	r6,r2
 8001f0c:	80038300 	call	8003830 <__muldf3>
 8001f10:	d9c02017 	ldw	r7,128(sp)
 8001f14:	d9801f17 	ldw	r6,124(sp)
 8001f18:	9009883a 	mov	r4,r18
 8001f1c:	b80b883a 	mov	r5,r23
 8001f20:	b823883a 	mov	r17,r23
 8001f24:	102d883a 	mov	r22,r2
 8001f28:	182f883a 	mov	r23,r3
 8001f2c:	800373c0 	call	800373c <__subdf3>
 8001f30:	d9401e17 	ldw	r5,120(sp)
 8001f34:	d9001d17 	ldw	r4,116(sp)
 8001f38:	180f883a 	mov	r7,r3
 8001f3c:	100d883a 	mov	r6,r2
 8001f40:	800373c0 	call	800373c <__subdf3>
 8001f44:	023fbeb4 	movhi	r8,65274
 8001f48:	420e7bc4 	addi	r8,r8,14831
 8001f4c:	024ff9b4 	movhi	r9,16358
 8001f50:	4a4b9084 	addi	r9,r9,11842
 8001f54:	480f883a 	mov	r7,r9
 8001f58:	400d883a 	mov	r6,r8
 8001f5c:	180b883a 	mov	r5,r3
 8001f60:	1009883a 	mov	r4,r2
 8001f64:	80038300 	call	8003830 <__muldf3>
 8001f68:	02032a34 	movhi	r8,3240
 8001f6c:	421b0e44 	addi	r8,r8,27705
 8001f70:	026f8834 	movhi	r9,48672
 8001f74:	4a571844 	addi	r9,r9,23649
 8001f78:	480f883a 	mov	r7,r9
 8001f7c:	400d883a 	mov	r6,r8
 8001f80:	9009883a 	mov	r4,r18
 8001f84:	880b883a 	mov	r5,r17
 8001f88:	1021883a 	mov	r16,r2
 8001f8c:	1823883a 	mov	r17,r3
 8001f90:	80038300 	call	8003830 <__muldf3>
 8001f94:	180f883a 	mov	r7,r3
 8001f98:	880b883a 	mov	r5,r17
 8001f9c:	8009883a 	mov	r4,r16
 8001fa0:	100d883a 	mov	r6,r2
 8001fa4:	80037bc0 	call	80037bc <__adddf3>
 8001fa8:	100d883a 	mov	r6,r2
 8001fac:	b009883a 	mov	r4,r22
 8001fb0:	b80b883a 	mov	r5,r23
 8001fb4:	180f883a 	mov	r7,r3
 8001fb8:	1021883a 	mov	r16,r2
 8001fbc:	1823883a 	mov	r17,r3
 8001fc0:	80037bc0 	call	80037bc <__adddf3>
 8001fc4:	1009883a 	mov	r4,r2
 8001fc8:	180b883a 	mov	r5,r3
 8001fcc:	b00d883a 	mov	r6,r22
 8001fd0:	b80f883a 	mov	r7,r23
 8001fd4:	d8803915 	stw	r2,228(sp)
 8001fd8:	d8c03a15 	stw	r3,232(sp)
 8001fdc:	d8801115 	stw	r2,68(sp)
 8001fe0:	d8c01215 	stw	r3,72(sp)
 8001fe4:	800373c0 	call	800373c <__subdf3>
 8001fe8:	180f883a 	mov	r7,r3
 8001fec:	8009883a 	mov	r4,r16
 8001ff0:	880b883a 	mov	r5,r17
 8001ff4:	100d883a 	mov	r6,r2
 8001ff8:	800373c0 	call	800373c <__subdf3>
 8001ffc:	d9001117 	ldw	r4,68(sp)
 8002000:	d9403a17 	ldw	r5,232(sp)
 8002004:	1029883a 	mov	r20,r2
 8002008:	200d883a 	mov	r6,r4
 800200c:	280f883a 	mov	r7,r5
 8002010:	182b883a 	mov	r21,r3
 8002014:	80038300 	call	8003830 <__muldf3>
 8002018:	1021883a 	mov	r16,r2
 800201c:	1823883a 	mov	r17,r3
 8002020:	009caff4 	movhi	r2,29375
 8002024:	10a93404 	addi	r2,r2,-23344
 8002028:	00cf99b4 	movhi	r3,15974
 800202c:	18cdda44 	addi	r3,r3,14185
 8002030:	8009883a 	mov	r4,r16
 8002034:	880b883a 	mov	r5,r17
 8002038:	180f883a 	mov	r7,r3
 800203c:	100d883a 	mov	r6,r2
 8002040:	80038300 	call	8003830 <__muldf3>
 8002044:	023174b4 	movhi	r8,50642
 8002048:	421afc44 	addi	r8,r8,27633
 800204c:	024faf34 	movhi	r9,16060
 8002050:	4a6f5044 	addi	r9,r9,-17087
 8002054:	480f883a 	mov	r7,r9
 8002058:	400d883a 	mov	r6,r8
 800205c:	180b883a 	mov	r5,r3
 8002060:	1009883a 	mov	r4,r2
 8002064:	800373c0 	call	800373c <__subdf3>
 8002068:	180f883a 	mov	r7,r3
 800206c:	8009883a 	mov	r4,r16
 8002070:	880b883a 	mov	r5,r17
 8002074:	100d883a 	mov	r6,r2
 8002078:	80038300 	call	8003830 <__muldf3>
 800207c:	022bc9b4 	movhi	r8,44838
 8002080:	42378b04 	addi	r8,r8,-8660
 8002084:	024fc474 	movhi	r9,16145
 8002088:	4a559a84 	addi	r9,r9,22122
 800208c:	480f883a 	mov	r7,r9
 8002090:	400d883a 	mov	r6,r8
 8002094:	180b883a 	mov	r5,r3
 8002098:	1009883a 	mov	r4,r2
 800209c:	80037bc0 	call	80037bc <__adddf3>
 80020a0:	180f883a 	mov	r7,r3
 80020a4:	8009883a 	mov	r4,r16
 80020a8:	880b883a 	mov	r5,r17
 80020ac:	100d883a 	mov	r6,r2
 80020b0:	80038300 	call	8003830 <__muldf3>
 80020b4:	0205aff4 	movhi	r8,5823
 80020b8:	422f64c4 	addi	r8,r8,-17005
 80020bc:	024fd9f4 	movhi	r9,16231
 80020c0:	4a705b04 	addi	r9,r9,-16020
 80020c4:	480f883a 	mov	r7,r9
 80020c8:	400d883a 	mov	r6,r8
 80020cc:	180b883a 	mov	r5,r3
 80020d0:	1009883a 	mov	r4,r2
 80020d4:	800373c0 	call	800373c <__subdf3>
 80020d8:	180f883a 	mov	r7,r3
 80020dc:	8009883a 	mov	r4,r16
 80020e0:	880b883a 	mov	r5,r17
 80020e4:	100d883a 	mov	r6,r2
 80020e8:	80038300 	call	8003830 <__muldf3>
 80020ec:	02155574 	movhi	r8,21845
 80020f0:	42154f84 	addi	r8,r8,21822
 80020f4:	024ff174 	movhi	r9,16325
 80020f8:	4a555544 	addi	r9,r9,21845
 80020fc:	480f883a 	mov	r7,r9
 8002100:	400d883a 	mov	r6,r8
 8002104:	180b883a 	mov	r5,r3
 8002108:	1009883a 	mov	r4,r2
 800210c:	80037bc0 	call	80037bc <__adddf3>
 8002110:	180f883a 	mov	r7,r3
 8002114:	8009883a 	mov	r4,r16
 8002118:	880b883a 	mov	r5,r17
 800211c:	100d883a 	mov	r6,r2
 8002120:	80038300 	call	8003830 <__muldf3>
 8002124:	d9001117 	ldw	r4,68(sp)
 8002128:	d9403a17 	ldw	r5,232(sp)
 800212c:	180f883a 	mov	r7,r3
 8002130:	100d883a 	mov	r6,r2
 8002134:	800373c0 	call	800373c <__subdf3>
 8002138:	d9001117 	ldw	r4,68(sp)
 800213c:	d9403a17 	ldw	r5,232(sp)
 8002140:	100d883a 	mov	r6,r2
 8002144:	180f883a 	mov	r7,r3
 8002148:	1021883a 	mov	r16,r2
 800214c:	1823883a 	mov	r17,r3
 8002150:	80038300 	call	8003830 <__muldf3>
 8002154:	0011883a 	mov	r8,zero
 8002158:	02500034 	movhi	r9,16384
 800215c:	480f883a 	mov	r7,r9
 8002160:	400d883a 	mov	r6,r8
 8002164:	8009883a 	mov	r4,r16
 8002168:	880b883a 	mov	r5,r17
 800216c:	1021883a 	mov	r16,r2
 8002170:	1823883a 	mov	r17,r3
 8002174:	800373c0 	call	800373c <__subdf3>
 8002178:	180f883a 	mov	r7,r3
 800217c:	880b883a 	mov	r5,r17
 8002180:	8009883a 	mov	r4,r16
 8002184:	100d883a 	mov	r6,r2
 8002188:	8003bf40 	call	8003bf4 <__divdf3>
 800218c:	d9001117 	ldw	r4,68(sp)
 8002190:	d9403a17 	ldw	r5,232(sp)
 8002194:	a00d883a 	mov	r6,r20
 8002198:	a80f883a 	mov	r7,r21
 800219c:	1025883a 	mov	r18,r2
 80021a0:	1827883a 	mov	r19,r3
 80021a4:	80038300 	call	8003830 <__muldf3>
 80021a8:	180f883a 	mov	r7,r3
 80021ac:	a009883a 	mov	r4,r20
 80021b0:	a80b883a 	mov	r5,r21
 80021b4:	100d883a 	mov	r6,r2
 80021b8:	80037bc0 	call	80037bc <__adddf3>
 80021bc:	180f883a 	mov	r7,r3
 80021c0:	980b883a 	mov	r5,r19
 80021c4:	9009883a 	mov	r4,r18
 80021c8:	100d883a 	mov	r6,r2
 80021cc:	800373c0 	call	800373c <__subdf3>
 80021d0:	d9801117 	ldw	r6,68(sp)
 80021d4:	d9c03a17 	ldw	r7,232(sp)
 80021d8:	180b883a 	mov	r5,r3
 80021dc:	1009883a 	mov	r4,r2
 80021e0:	800373c0 	call	800373c <__subdf3>
 80021e4:	0011883a 	mov	r8,zero
 80021e8:	024ffc34 	movhi	r9,16368
 80021ec:	480b883a 	mov	r5,r9
 80021f0:	180f883a 	mov	r7,r3
 80021f4:	4009883a 	mov	r4,r8
 80021f8:	100d883a 	mov	r6,r2
 80021fc:	800373c0 	call	800373c <__subdf3>
 8002200:	100b883a 	mov	r5,r2
 8002204:	d8801317 	ldw	r2,76(sp)
 8002208:	10d5883a 	add	r10,r2,r3
 800220c:	5005d53a 	srai	r2,r10,20
 8002210:	0080720e 	bge	zero,r2,80023dc <__ieee754_pow+0x12d4>
 8002214:	2811883a 	mov	r8,r5
 8002218:	5013883a 	mov	r9,r10
 800221c:	d9c01a17 	ldw	r7,104(sp)
 8002220:	d9801917 	ldw	r6,100(sp)
 8002224:	480b883a 	mov	r5,r9
 8002228:	4009883a 	mov	r4,r8
 800222c:	003e8206 	br	8001c38 <__ieee754_pow+0xb30>
 8002230:	0009883a 	mov	r4,zero
 8002234:	800b883a 	mov	r5,r16
 8002238:	a80f883a 	mov	r7,r21
 800223c:	a00d883a 	mov	r6,r20
 8002240:	003c2b06 	br	80012f0 <__ieee754_pow+0x1e8>
 8002244:	d9001d17 	ldw	r4,116(sp)
 8002248:	00994b34 	movhi	r2,25900
 800224c:	10a0bf84 	addi	r2,r2,-32002
 8002250:	00cf25f4 	movhi	r3,15511
 8002254:	18c551c4 	addi	r3,r3,5447
 8002258:	a80b883a 	mov	r5,r21
 800225c:	180f883a 	mov	r7,r3
 8002260:	100d883a 	mov	r6,r2
 8002264:	80037bc0 	call	80037bc <__adddf3>
 8002268:	d9801f17 	ldw	r6,124(sp)
 800226c:	880b883a 	mov	r5,r17
 8002270:	8009883a 	mov	r4,r16
 8002274:	980f883a 	mov	r7,r19
 8002278:	1021883a 	mov	r16,r2
 800227c:	1823883a 	mov	r17,r3
 8002280:	800373c0 	call	800373c <__subdf3>
 8002284:	180f883a 	mov	r7,r3
 8002288:	880b883a 	mov	r5,r17
 800228c:	8009883a 	mov	r4,r16
 8002290:	100d883a 	mov	r6,r2
 8002294:	8003f5c0 	call	8003f5c <__gtdf2>
 8002298:	00bf0c0e 	bge	zero,r2,8001ecc <__ieee754_pow+0xdc4>
 800229c:	04220034 	movhi	r16,34816
 80022a0:	841d6704 	addi	r16,r16,30108
 80022a4:	045f8e34 	movhi	r17,32312
 80022a8:	8c790f04 	addi	r17,r17,-7108
 80022ac:	d9401a17 	ldw	r5,104(sp)
 80022b0:	d9001917 	ldw	r4,100(sp)
 80022b4:	800d883a 	mov	r6,r16
 80022b8:	880f883a 	mov	r7,r17
 80022bc:	80038300 	call	8003830 <__muldf3>
 80022c0:	180b883a 	mov	r5,r3
 80022c4:	800d883a 	mov	r6,r16
 80022c8:	880f883a 	mov	r7,r17
 80022cc:	1009883a 	mov	r4,r2
 80022d0:	003e5906 	br	8001c38 <__ieee754_pow+0xb30>
 80022d4:	e005d53a 	srai	r2,fp,20
 80022d8:	01800434 	movhi	r6,16
 80022dc:	d9401817 	ldw	r5,96(sp)
 80022e0:	10bf0084 	addi	r2,r2,-1022
 80022e4:	308dd83a 	sra	r6,r6,r2
 80022e8:	02000434 	movhi	r8,16
 80022ec:	423fffc4 	addi	r8,r8,-1
 80022f0:	0005883a 	mov	r2,zero
 80022f4:	298d883a 	add	r6,r5,r6
 80022f8:	318b883a 	add	r5,r6,r6
 80022fc:	320e703a 	and	r7,r6,r8
 8002300:	1013883a 	mov	r9,r2
 8002304:	280ad57a 	srli	r5,r5,21
 8002308:	d8801817 	ldw	r2,96(sp)
 800230c:	01000504 	movi	r4,20
 8002310:	297f0044 	addi	r5,r5,-1023
 8002314:	4151d83a 	sra	r8,r8,r5
 8002318:	39c00434 	orhi	r7,r7,16
 800231c:	2149c83a 	sub	r4,r4,r5
 8002320:	0210303a 	nor	r8,zero,r8
 8002324:	3939d83a 	sra	fp,r7,r4
 8002328:	320e703a 	and	r7,r6,r8
 800232c:	10002916 	blt	r2,zero,80023d4 <__ieee754_pow+0x12cc>
 8002330:	d9402017 	ldw	r5,128(sp)
 8002334:	d9001f17 	ldw	r4,124(sp)
 8002338:	480d883a 	mov	r6,r9
 800233c:	800373c0 	call	800373c <__subdf3>
 8002340:	180b883a 	mov	r5,r3
 8002344:	d9402015 	stw	r5,128(sp)
 8002348:	280f883a 	mov	r7,r5
 800234c:	d9001d17 	ldw	r4,116(sp)
 8002350:	d9401e17 	ldw	r5,120(sp)
 8002354:	1007883a 	mov	r3,r2
 8002358:	180d883a 	mov	r6,r3
 800235c:	d8801f15 	stw	r2,124(sp)
 8002360:	80037bc0 	call	80037bc <__adddf3>
 8002364:	180b883a 	mov	r5,r3
 8002368:	e006953a 	slli	r3,fp,20
 800236c:	282f883a 	mov	r23,r5
 8002370:	d8c01315 	stw	r3,76(sp)
 8002374:	003edd06 	br	8001eec <__ieee754_pow+0xde4>
 8002378:	383bc81e 	bne	r7,zero,800129c <__ieee754_pow+0x194>
 800237c:	28c5c83a 	sub	r2,r5,r3
 8002380:	8087d83a 	sra	r3,r16,r2
 8002384:	1884983a 	sll	r2,r3,r2
 8002388:	80801b26 	beq	r16,r2,80023f8 <__ieee754_pow+0x12f0>
 800238c:	0039883a 	mov	fp,zero
 8002390:	003b9d06 	br	8001208 <__ieee754_pow+0x100>
 8002394:	d9801f17 	ldw	r6,124(sp)
 8002398:	8009883a 	mov	r4,r16
 800239c:	880b883a 	mov	r5,r17
 80023a0:	980f883a 	mov	r7,r19
 80023a4:	800373c0 	call	800373c <__subdf3>
 80023a8:	d9001d17 	ldw	r4,116(sp)
 80023ac:	a80b883a 	mov	r5,r21
 80023b0:	180f883a 	mov	r7,r3
 80023b4:	100d883a 	mov	r6,r2
 80023b8:	800406c0 	call	800406c <__ledf2>
 80023bc:	00bfc516 	blt	zero,r2,80022d4 <__ieee754_pow+0x11cc>
 80023c0:	0430be74 	movhi	r16,49913
 80023c4:	843cd644 	addi	r16,r16,-3239
 80023c8:	04406974 	movhi	r17,421
 80023cc:	8c5b87c4 	addi	r17,r17,28191
 80023d0:	003fb606 	br	80022ac <__ieee754_pow+0x11a4>
 80023d4:	0739c83a 	sub	fp,zero,fp
 80023d8:	003fd506 	br	8002330 <__ieee754_pow+0x1228>
 80023dc:	2809883a 	mov	r4,r5
 80023e0:	e00d883a 	mov	r6,fp
 80023e4:	180b883a 	mov	r5,r3
 80023e8:	800295c0 	call	800295c <scalbn>
 80023ec:	1011883a 	mov	r8,r2
 80023f0:	1813883a 	mov	r9,r3
 80023f4:	003f8906 	br	800221c <__ieee754_pow+0x1114>
 80023f8:	18c0004c 	andi	r3,r3,1
 80023fc:	00800084 	movi	r2,2
 8002400:	10f9c83a 	sub	fp,r2,r3
 8002404:	003b8006 	br	8001208 <__ieee754_pow+0x100>

08002408 <__ieee754_sqrt>:
 8002408:	defffd04 	addi	sp,sp,-12
 800240c:	dc000015 	stw	r16,0(sp)
 8002410:	009ffc34 	movhi	r2,32752
 8002414:	2021883a 	mov	r16,r4
 8002418:	291ffc2c 	andhi	r4,r5,32752
 800241c:	dc400115 	stw	r17,4(sp)
 8002420:	dfc00215 	stw	ra,8(sp)
 8002424:	2823883a 	mov	r17,r5
 8002428:	280f883a 	mov	r7,r5
 800242c:	2807883a 	mov	r3,r5
 8002430:	8011883a 	mov	r8,r16
 8002434:	20807d26 	beq	r4,r2,800262c <__ieee754_sqrt+0x224>
 8002438:	01408d0e 	bge	zero,r5,8002670 <__ieee754_sqrt+0x268>
 800243c:	380dd53a 	srai	r6,r7,20
 8002440:	3000131e 	bne	r6,zero,8002490 <__ieee754_sqrt+0x88>
 8002444:	1800041e 	bne	r3,zero,8002458 <__ieee754_sqrt+0x50>
 8002448:	400ed2fa 	srli	r7,r8,11
 800244c:	31bffac4 	addi	r6,r6,-21
 8002450:	4010957a 	slli	r8,r8,21
 8002454:	383ffc26 	beq	r7,zero,8002448 <__ieee754_sqrt+0x40>
 8002458:	3880042c 	andhi	r2,r7,16
 800245c:	1000991e 	bne	r2,zero,80026c4 <__ieee754_sqrt+0x2bc>
 8002460:	0009883a 	mov	r4,zero
 8002464:	39cf883a 	add	r7,r7,r7
 8002468:	3880042c 	andhi	r2,r7,16
 800246c:	21000044 	addi	r4,r4,1
 8002470:	103ffc26 	beq	r2,zero,8002464 <__ieee754_sqrt+0x5c>
 8002474:	00800804 	movi	r2,32
 8002478:	1105c83a 	sub	r2,r2,r4
 800247c:	4086d83a 	srl	r3,r8,r2
 8002480:	4110983a 	sll	r8,r8,r4
 8002484:	3105c83a 	sub	r2,r6,r4
 8002488:	38ceb03a 	or	r7,r7,r3
 800248c:	11800044 	addi	r6,r2,1
 8002490:	31bf0044 	addi	r6,r6,-1023
 8002494:	30c0004c 	andi	r3,r6,1
 8002498:	00800434 	movhi	r2,16
 800249c:	10bfffc4 	addi	r2,r2,-1
 80024a0:	3884703a 	and	r2,r7,r2
 80024a4:	1807003a 	cmpeq	r3,r3,zero
 80024a8:	11000434 	orhi	r4,r2,16
 80024ac:	18005426 	beq	r3,zero,8002600 <__ieee754_sqrt+0x1f8>
 80024b0:	4004d7fa 	srli	r2,r8,31
 80024b4:	4207883a 	add	r3,r8,r8
 80024b8:	02800834 	movhi	r10,32
 80024bc:	1105883a 	add	r2,r2,r4
 80024c0:	2089883a 	add	r4,r4,r2
 80024c4:	0011883a 	mov	r8,zero
 80024c8:	000b883a 	mov	r5,zero
 80024cc:	0013883a 	mov	r9,zero
 80024d0:	02c00584 	movi	r11,22
 80024d4:	520f883a 	add	r7,r10,r8
 80024d8:	1804d7fa 	srli	r2,r3,31
 80024dc:	4a400044 	addi	r9,r9,1
 80024e0:	18c7883a 	add	r3,r3,r3
 80024e4:	21c00316 	blt	r4,r7,80024f4 <__ieee754_sqrt+0xec>
 80024e8:	21c9c83a 	sub	r4,r4,r7
 80024ec:	2a8b883a 	add	r5,r5,r10
 80024f0:	51d1883a 	add	r8,r10,r7
 80024f4:	1105883a 	add	r2,r2,r4
 80024f8:	5014d07a 	srli	r10,r10,1
 80024fc:	2089883a 	add	r4,r4,r2
 8002500:	4afff41e 	bne	r9,r11,80024d4 <__ieee754_sqrt+0xcc>
 8002504:	02600034 	movhi	r9,32768
 8002508:	0017883a 	mov	r11,zero
 800250c:	0019883a 	mov	r12,zero
 8002510:	0015883a 	mov	r10,zero
 8002514:	4821883a 	mov	r16,r9
 8002518:	03c00804 	movi	r15,32
 800251c:	00000806 	br	8002540 <__ieee754_sqrt+0x138>
 8002520:	22003426 	beq	r4,r8,80025f4 <__ieee754_sqrt+0x1ec>
 8002524:	1804d7fa 	srli	r2,r3,31
 8002528:	52800044 	addi	r10,r10,1
 800252c:	18c7883a 	add	r3,r3,r3
 8002530:	1105883a 	add	r2,r2,r4
 8002534:	2089883a 	add	r4,r4,r2
 8002538:	4812d07a 	srli	r9,r9,1
 800253c:	53c01326 	beq	r10,r15,800258c <__ieee754_sqrt+0x184>
 8002540:	4acf883a 	add	r7,r9,r11
 8002544:	413ff60e 	bge	r8,r4,8002520 <__ieee754_sqrt+0x118>
 8002548:	38a0002c 	andhi	r2,r7,32768
 800254c:	3a57883a 	add	r11,r7,r9
 8002550:	14002426 	beq	r2,r16,80025e4 <__ieee754_sqrt+0x1dc>
 8002554:	4005883a 	mov	r2,r8
 8002558:	2209c83a 	sub	r4,r4,r8
 800255c:	19c0012e 	bgeu	r3,r7,8002564 <__ieee754_sqrt+0x15c>
 8002560:	213fffc4 	addi	r4,r4,-1
 8002564:	19c7c83a 	sub	r3,r3,r7
 8002568:	1011883a 	mov	r8,r2
 800256c:	1804d7fa 	srli	r2,r3,31
 8002570:	52800044 	addi	r10,r10,1
 8002574:	6259883a 	add	r12,r12,r9
 8002578:	1105883a 	add	r2,r2,r4
 800257c:	18c7883a 	add	r3,r3,r3
 8002580:	2089883a 	add	r4,r4,r2
 8002584:	4812d07a 	srli	r9,r9,1
 8002588:	53ffed1e 	bne	r10,r15,8002540 <__ieee754_sqrt+0x138>
 800258c:	20c4b03a 	or	r2,r4,r3
 8002590:	1000201e 	bne	r2,zero,8002614 <__ieee754_sqrt+0x20c>
 8002594:	600ed07a 	srli	r7,r12,1
 8002598:	2880004c 	andi	r2,r5,1
 800259c:	1005003a 	cmpeq	r2,r2,zero
 80025a0:	1000011e 	bne	r2,zero,80025a8 <__ieee754_sqrt+0x1a0>
 80025a4:	39e00034 	orhi	r7,r7,32768
 80025a8:	300dd07a 	srai	r6,r6,1
 80025ac:	280bd07a 	srai	r5,r5,1
 80025b0:	010ff834 	movhi	r4,16352
 80025b4:	300c953a 	slli	r6,r6,20
 80025b8:	290b883a 	add	r5,r5,r4
 80025bc:	3821883a 	mov	r16,r7
 80025c0:	299d883a 	add	r14,r5,r6
 80025c4:	7023883a 	mov	r17,r14
 80025c8:	8005883a 	mov	r2,r16
 80025cc:	8807883a 	mov	r3,r17
 80025d0:	dfc00217 	ldw	ra,8(sp)
 80025d4:	dc400117 	ldw	r17,4(sp)
 80025d8:	dc000017 	ldw	r16,0(sp)
 80025dc:	dec00304 	addi	sp,sp,12
 80025e0:	f800283a 	ret
 80025e4:	5884703a 	and	r2,r11,r2
 80025e8:	103fda1e 	bne	r2,zero,8002554 <__ieee754_sqrt+0x14c>
 80025ec:	40800044 	addi	r2,r8,1
 80025f0:	003fd906 	br	8002558 <__ieee754_sqrt+0x150>
 80025f4:	19ffd42e 	bgeu	r3,r7,8002548 <__ieee754_sqrt+0x140>
 80025f8:	2011883a 	mov	r8,r4
 80025fc:	003fc906 	br	8002524 <__ieee754_sqrt+0x11c>
 8002600:	4004d7fa 	srli	r2,r8,31
 8002604:	4211883a 	add	r8,r8,r8
 8002608:	1105883a 	add	r2,r2,r4
 800260c:	2089883a 	add	r4,r4,r2
 8002610:	003fa706 	br	80024b0 <__ieee754_sqrt+0xa8>
 8002614:	00bfffc4 	movi	r2,-1
 8002618:	60802726 	beq	r12,r2,80026b8 <__ieee754_sqrt+0x2b0>
 800261c:	6080004c 	andi	r2,r12,1
 8002620:	6085883a 	add	r2,r12,r2
 8002624:	100ed07a 	srli	r7,r2,1
 8002628:	003fdb06 	br	8002598 <__ieee754_sqrt+0x190>
 800262c:	8009883a 	mov	r4,r16
 8002630:	800d883a 	mov	r6,r16
 8002634:	80038300 	call	8003830 <__muldf3>
 8002638:	180f883a 	mov	r7,r3
 800263c:	880b883a 	mov	r5,r17
 8002640:	8009883a 	mov	r4,r16
 8002644:	100d883a 	mov	r6,r2
 8002648:	80037bc0 	call	80037bc <__adddf3>
 800264c:	1021883a 	mov	r16,r2
 8002650:	1823883a 	mov	r17,r3
 8002654:	8005883a 	mov	r2,r16
 8002658:	8807883a 	mov	r3,r17
 800265c:	dfc00217 	ldw	ra,8(sp)
 8002660:	dc400117 	ldw	r17,4(sp)
 8002664:	dc000017 	ldw	r16,0(sp)
 8002668:	dec00304 	addi	sp,sp,12
 800266c:	f800283a 	ret
 8002670:	00a00034 	movhi	r2,32768
 8002674:	10bfffc4 	addi	r2,r2,-1
 8002678:	2884703a 	and	r2,r5,r2
 800267c:	8084b03a 	or	r2,r16,r2
 8002680:	103fd126 	beq	r2,zero,80025c8 <__ieee754_sqrt+0x1c0>
 8002684:	283f6d26 	beq	r5,zero,800243c <__ieee754_sqrt+0x34>
 8002688:	280f883a 	mov	r7,r5
 800268c:	8009883a 	mov	r4,r16
 8002690:	800d883a 	mov	r6,r16
 8002694:	800373c0 	call	800373c <__subdf3>
 8002698:	1009883a 	mov	r4,r2
 800269c:	180b883a 	mov	r5,r3
 80026a0:	100d883a 	mov	r6,r2
 80026a4:	180f883a 	mov	r7,r3
 80026a8:	8003bf40 	call	8003bf4 <__divdf3>
 80026ac:	1021883a 	mov	r16,r2
 80026b0:	1823883a 	mov	r17,r3
 80026b4:	003fc406 	br	80025c8 <__ieee754_sqrt+0x1c0>
 80026b8:	29400044 	addi	r5,r5,1
 80026bc:	000f883a 	mov	r7,zero
 80026c0:	003fb506 	br	8002598 <__ieee754_sqrt+0x190>
 80026c4:	0009883a 	mov	r4,zero
 80026c8:	00800804 	movi	r2,32
 80026cc:	003f6b06 	br	800247c <__ieee754_sqrt+0x74>

080026d0 <fabs>:
 80026d0:	01e00034 	movhi	r7,32768
 80026d4:	39ffffc4 	addi	r7,r7,-1
 80026d8:	394e703a 	and	r7,r7,r5
 80026dc:	2005883a 	mov	r2,r4
 80026e0:	3807883a 	mov	r3,r7
 80026e4:	f800283a 	ret

080026e8 <finite>:
 80026e8:	00a00034 	movhi	r2,32768
 80026ec:	10bfffc4 	addi	r2,r2,-1
 80026f0:	2884703a 	and	r2,r5,r2
 80026f4:	01600434 	movhi	r5,32784
 80026f8:	1145883a 	add	r2,r2,r5
 80026fc:	1004d7fa 	srli	r2,r2,31
 8002700:	f800283a 	ret

08002704 <__isnand>:
 8002704:	200d883a 	mov	r6,r4
 8002708:	0109c83a 	sub	r4,zero,r4
 800270c:	2188b03a 	or	r4,r4,r6
 8002710:	2008d7fa 	srli	r4,r4,31
 8002714:	00a00034 	movhi	r2,32768
 8002718:	10bfffc4 	addi	r2,r2,-1
 800271c:	1144703a 	and	r2,r2,r5
 8002720:	2088b03a 	or	r4,r4,r2
 8002724:	009ffc34 	movhi	r2,32752
 8002728:	1105c83a 	sub	r2,r2,r4
 800272c:	1004d7fa 	srli	r2,r2,31
 8002730:	f800283a 	ret

08002734 <matherr>:
 8002734:	0005883a 	mov	r2,zero
 8002738:	f800283a 	ret

0800273c <nan>:
 800273c:	015ffe34 	movhi	r5,32760
 8002740:	0005883a 	mov	r2,zero
 8002744:	2807883a 	mov	r3,r5
 8002748:	f800283a 	ret

0800274c <rint>:
 800274c:	2015883a 	mov	r10,r4
 8002750:	2809d53a 	srai	r4,r5,20
 8002754:	defff904 	addi	sp,sp,-28
 8002758:	034004c4 	movi	r13,19
 800275c:	2101ffcc 	andi	r4,r4,2047
 8002760:	227f0044 	addi	r9,r4,-1023
 8002764:	dc800415 	stw	r18,16(sp)
 8002768:	dfc00615 	stw	ra,24(sp)
 800276c:	dcc00515 	stw	r19,20(sp)
 8002770:	dc400315 	stw	r17,12(sp)
 8002774:	dc000215 	stw	r16,8(sp)
 8002778:	2817883a 	mov	r11,r5
 800277c:	500d883a 	mov	r6,r10
 8002780:	2824d7fa 	srli	r18,r5,31
 8002784:	6a403016 	blt	r13,r9,8002848 <rint+0xfc>
 8002788:	48004916 	blt	r9,zero,80028b0 <rint+0x164>
 800278c:	00800434 	movhi	r2,16
 8002790:	10bfffc4 	addi	r2,r2,-1
 8002794:	1247d83a 	sra	r3,r2,r9
 8002798:	2809883a 	mov	r4,r5
 800279c:	1944703a 	and	r2,r3,r5
 80027a0:	5084b03a 	or	r2,r10,r2
 80027a4:	10001f26 	beq	r2,zero,8002824 <rint+0xd8>
 80027a8:	180ad07a 	srli	r5,r3,1
 80027ac:	5944703a 	and	r2,r11,r5
 80027b0:	5084b03a 	or	r2,r10,r2
 80027b4:	10000626 	beq	r2,zero,80027d0 <rint+0x84>
 80027b8:	4b406626 	beq	r9,r13,8002954 <rint+0x208>
 80027bc:	00c000b4 	movhi	r3,2
 80027c0:	1a47d83a 	sra	r3,r3,r9
 80027c4:	0144303a 	nor	r2,zero,r5
 80027c8:	5884703a 	and	r2,r11,r2
 80027cc:	10c8b03a 	or	r4,r2,r3
 80027d0:	900690fa 	slli	r3,r18,3
 80027d4:	00820074 	movhi	r2,2049
 80027d8:	10865504 	addi	r2,r2,6484
 80027dc:	200f883a 	mov	r7,r4
 80027e0:	1887883a 	add	r3,r3,r2
 80027e4:	1c000017 	ldw	r16,0(r3)
 80027e8:	1c400117 	ldw	r17,4(r3)
 80027ec:	8009883a 	mov	r4,r16
 80027f0:	880b883a 	mov	r5,r17
 80027f4:	80037bc0 	call	80037bc <__adddf3>
 80027f8:	d8800015 	stw	r2,0(sp)
 80027fc:	d8c00115 	stw	r3,4(sp)
 8002800:	d8800017 	ldw	r2,0(sp)
 8002804:	d8c00117 	ldw	r3,4(sp)
 8002808:	880f883a 	mov	r7,r17
 800280c:	800d883a 	mov	r6,r16
 8002810:	180b883a 	mov	r5,r3
 8002814:	1009883a 	mov	r4,r2
 8002818:	800373c0 	call	800373c <__subdf3>
 800281c:	1015883a 	mov	r10,r2
 8002820:	1817883a 	mov	r11,r3
 8002824:	5005883a 	mov	r2,r10
 8002828:	5807883a 	mov	r3,r11
 800282c:	dfc00617 	ldw	ra,24(sp)
 8002830:	dcc00517 	ldw	r19,20(sp)
 8002834:	dc800417 	ldw	r18,16(sp)
 8002838:	dc400317 	ldw	r17,12(sp)
 800283c:	dc000217 	ldw	r16,8(sp)
 8002840:	dec00704 	addi	sp,sp,28
 8002844:	f800283a 	ret
 8002848:	00800cc4 	movi	r2,51
 800284c:	12400f16 	blt	r2,r9,800288c <rint+0x140>
 8002850:	213efb44 	addi	r4,r4,-1043
 8002854:	00bfffc4 	movi	r2,-1
 8002858:	1104d83a 	srl	r2,r2,r4
 800285c:	5086703a 	and	r3,r10,r2
 8002860:	183ff026 	beq	r3,zero,8002824 <rint+0xd8>
 8002864:	100ad07a 	srli	r5,r2,1
 8002868:	5144703a 	and	r2,r10,r5
 800286c:	10000526 	beq	r2,zero,8002884 <rint+0x138>
 8002870:	00d00034 	movhi	r3,16384
 8002874:	1907d83a 	sra	r3,r3,r4
 8002878:	0144303a 	nor	r2,zero,r5
 800287c:	5084703a 	and	r2,r10,r2
 8002880:	10ccb03a 	or	r6,r2,r3
 8002884:	5809883a 	mov	r4,r11
 8002888:	003fd106 	br	80027d0 <rint+0x84>
 800288c:	00810004 	movi	r2,1024
 8002890:	48bfe41e 	bne	r9,r2,8002824 <rint+0xd8>
 8002894:	5009883a 	mov	r4,r10
 8002898:	500d883a 	mov	r6,r10
 800289c:	280f883a 	mov	r7,r5
 80028a0:	80037bc0 	call	80037bc <__adddf3>
 80028a4:	1015883a 	mov	r10,r2
 80028a8:	1817883a 	mov	r11,r3
 80028ac:	003fdd06 	br	8002824 <rint+0xd8>
 80028b0:	04e00034 	movhi	r19,32768
 80028b4:	9cffffc4 	addi	r19,r19,-1
 80028b8:	2cc4703a 	and	r2,r5,r19
 80028bc:	5084b03a 	or	r2,r10,r2
 80028c0:	103fd826 	beq	r2,zero,8002824 <rint+0xd8>
 80028c4:	00c00434 	movhi	r3,16
 80028c8:	18ffffc4 	addi	r3,r3,-1
 80028cc:	28c6703a 	and	r3,r5,r3
 80028d0:	50c6b03a 	or	r3,r10,r3
 80028d4:	00cdc83a 	sub	r6,zero,r3
 80028d8:	900a90fa 	slli	r5,r18,3
 80028dc:	1986b03a 	or	r3,r3,r6
 80028e0:	01020074 	movhi	r4,2049
 80028e4:	21065504 	addi	r4,r4,6484
 80028e8:	1806d33a 	srli	r3,r3,12
 80028ec:	290b883a 	add	r5,r5,r4
 80028f0:	2c000017 	ldw	r16,0(r5)
 80028f4:	2c400117 	ldw	r17,4(r5)
 80028f8:	593fffac 	andhi	r4,r11,65534
 80028fc:	18c0022c 	andhi	r3,r3,8
 8002900:	1906b03a 	or	r3,r3,r4
 8002904:	500d883a 	mov	r6,r10
 8002908:	180f883a 	mov	r7,r3
 800290c:	8009883a 	mov	r4,r16
 8002910:	880b883a 	mov	r5,r17
 8002914:	80037bc0 	call	80037bc <__adddf3>
 8002918:	d8800015 	stw	r2,0(sp)
 800291c:	d8c00115 	stw	r3,4(sp)
 8002920:	d8800017 	ldw	r2,0(sp)
 8002924:	d8c00117 	ldw	r3,4(sp)
 8002928:	880f883a 	mov	r7,r17
 800292c:	800d883a 	mov	r6,r16
 8002930:	180b883a 	mov	r5,r3
 8002934:	1009883a 	mov	r4,r2
 8002938:	800373c0 	call	800373c <__subdf3>
 800293c:	901297fa 	slli	r9,r18,31
 8002940:	98d0703a 	and	r8,r19,r3
 8002944:	1015883a 	mov	r10,r2
 8002948:	4250b03a 	or	r8,r8,r9
 800294c:	4017883a 	mov	r11,r8
 8002950:	003fb406 	br	8002824 <rint+0xd8>
 8002954:	01900034 	movhi	r6,16384
 8002958:	003f9d06 	br	80027d0 <rint+0x84>

0800295c <scalbn>:
 800295c:	2011883a 	mov	r8,r4
 8002960:	291ffc2c 	andhi	r4,r5,32752
 8002964:	2009d53a 	srai	r4,r4,20
 8002968:	defffd04 	addi	sp,sp,-12
 800296c:	dc000015 	stw	r16,0(sp)
 8002970:	dfc00215 	stw	ra,8(sp)
 8002974:	dc400115 	stw	r17,4(sp)
 8002978:	2813883a 	mov	r9,r5
 800297c:	2815883a 	mov	r10,r5
 8002980:	3021883a 	mov	r16,r6
 8002984:	2000281e 	bne	r4,zero,8002a28 <scalbn+0xcc>
 8002988:	00a00034 	movhi	r2,32768
 800298c:	10bfffc4 	addi	r2,r2,-1
 8002990:	2884703a 	and	r2,r5,r2
 8002994:	4084b03a 	or	r2,r8,r2
 8002998:	10001826 	beq	r2,zero,80029fc <scalbn+0xa0>
 800299c:	0005883a 	mov	r2,zero
 80029a0:	00d0d434 	movhi	r3,17232
 80029a4:	4009883a 	mov	r4,r8
 80029a8:	100d883a 	mov	r6,r2
 80029ac:	180f883a 	mov	r7,r3
 80029b0:	80038300 	call	8003830 <__muldf3>
 80029b4:	100b883a 	mov	r5,r2
 80029b8:	1011883a 	mov	r8,r2
 80029bc:	00bffff4 	movhi	r2,65535
 80029c0:	108f2c04 	addi	r2,r2,15536
 80029c4:	180d883a 	mov	r6,r3
 80029c8:	1813883a 	mov	r9,r3
 80029cc:	8080120e 	bge	r16,r2,8002a18 <scalbn+0xbc>
 80029d0:	00b0be74 	movhi	r2,49913
 80029d4:	10bcd644 	addi	r2,r2,-3239
 80029d8:	00c06974 	movhi	r3,421
 80029dc:	18db87c4 	addi	r3,r3,28191
 80029e0:	2809883a 	mov	r4,r5
 80029e4:	180f883a 	mov	r7,r3
 80029e8:	300b883a 	mov	r5,r6
 80029ec:	100d883a 	mov	r6,r2
 80029f0:	80038300 	call	8003830 <__muldf3>
 80029f4:	1011883a 	mov	r8,r2
 80029f8:	1813883a 	mov	r9,r3
 80029fc:	4005883a 	mov	r2,r8
 8002a00:	4807883a 	mov	r3,r9
 8002a04:	dfc00217 	ldw	ra,8(sp)
 8002a08:	dc400117 	ldw	r17,4(sp)
 8002a0c:	dc000017 	ldw	r16,0(sp)
 8002a10:	dec00304 	addi	sp,sp,12
 8002a14:	f800283a 	ret
 8002a18:	189ffc2c 	andhi	r2,r3,32752
 8002a1c:	1005d53a 	srai	r2,r2,20
 8002a20:	1815883a 	mov	r10,r3
 8002a24:	113ff284 	addi	r4,r2,-54
 8002a28:	0081ffc4 	movi	r2,2047
 8002a2c:	20801126 	beq	r4,r2,8002a74 <scalbn+0x118>
 8002a30:	2409883a 	add	r4,r4,r16
 8002a34:	0081ff84 	movi	r2,2046
 8002a38:	11001c16 	blt	r2,r4,8002aac <scalbn+0x150>
 8002a3c:	0100290e 	bge	zero,r4,8002ae4 <scalbn+0x188>
 8002a40:	200a953a 	slli	r5,r4,20
 8002a44:	01200434 	movhi	r4,32784
 8002a48:	213fffc4 	addi	r4,r4,-1
 8002a4c:	5108703a 	and	r4,r10,r4
 8002a50:	2148b03a 	or	r4,r4,r5
 8002a54:	2013883a 	mov	r9,r4
 8002a58:	4005883a 	mov	r2,r8
 8002a5c:	4807883a 	mov	r3,r9
 8002a60:	dfc00217 	ldw	ra,8(sp)
 8002a64:	dc400117 	ldw	r17,4(sp)
 8002a68:	dc000017 	ldw	r16,0(sp)
 8002a6c:	dec00304 	addi	sp,sp,12
 8002a70:	f800283a 	ret
 8002a74:	480f883a 	mov	r7,r9
 8002a78:	4009883a 	mov	r4,r8
 8002a7c:	480b883a 	mov	r5,r9
 8002a80:	400d883a 	mov	r6,r8
 8002a84:	80037bc0 	call	80037bc <__adddf3>
 8002a88:	1011883a 	mov	r8,r2
 8002a8c:	1813883a 	mov	r9,r3
 8002a90:	4005883a 	mov	r2,r8
 8002a94:	4807883a 	mov	r3,r9
 8002a98:	dfc00217 	ldw	ra,8(sp)
 8002a9c:	dc400117 	ldw	r17,4(sp)
 8002aa0:	dc000017 	ldw	r16,0(sp)
 8002aa4:	dec00304 	addi	sp,sp,12
 8002aa8:	f800283a 	ret
 8002aac:	04220034 	movhi	r16,34816
 8002ab0:	841d6704 	addi	r16,r16,30108
 8002ab4:	045f8e34 	movhi	r17,32312
 8002ab8:	8c790f04 	addi	r17,r17,-7108
 8002abc:	480f883a 	mov	r7,r9
 8002ac0:	400d883a 	mov	r6,r8
 8002ac4:	8009883a 	mov	r4,r16
 8002ac8:	880b883a 	mov	r5,r17
 8002acc:	8002b3c0 	call	8002b3c <copysign>
 8002ad0:	180b883a 	mov	r5,r3
 8002ad4:	800d883a 	mov	r6,r16
 8002ad8:	880f883a 	mov	r7,r17
 8002adc:	1009883a 	mov	r4,r2
 8002ae0:	003fc306 	br	80029f0 <scalbn+0x94>
 8002ae4:	00bff284 	movi	r2,-54
 8002ae8:	11000716 	blt	r2,r4,8002b08 <scalbn+0x1ac>
 8002aec:	00b0d414 	movui	r2,50000
 8002af0:	143fee16 	blt	r2,r16,8002aac <scalbn+0x150>
 8002af4:	0430be74 	movhi	r16,49913
 8002af8:	843cd644 	addi	r16,r16,-3239
 8002afc:	04406974 	movhi	r17,421
 8002b00:	8c5b87c4 	addi	r17,r17,28191
 8002b04:	003fed06 	br	8002abc <scalbn+0x160>
 8002b08:	21000d84 	addi	r4,r4,54
 8002b0c:	2008953a 	slli	r4,r4,20
 8002b10:	01e00434 	movhi	r7,32784
 8002b14:	39ffffc4 	addi	r7,r7,-1
 8002b18:	51ce703a 	and	r7,r10,r7
 8002b1c:	390eb03a 	or	r7,r7,r4
 8002b20:	024f2434 	movhi	r9,15504
 8002b24:	4009883a 	mov	r4,r8
 8002b28:	0011883a 	mov	r8,zero
 8002b2c:	380b883a 	mov	r5,r7
 8002b30:	400d883a 	mov	r6,r8
 8002b34:	480f883a 	mov	r7,r9
 8002b38:	003fad06 	br	80029f0 <scalbn+0x94>

08002b3c <copysign>:
 8002b3c:	3813883a 	mov	r9,r7
 8002b40:	01e00034 	movhi	r7,32768
 8002b44:	39ffffc4 	addi	r7,r7,-1
 8002b48:	394e703a 	and	r7,r7,r5
 8002b4c:	4aa0002c 	andhi	r10,r9,32768
 8002b50:	3a8eb03a 	or	r7,r7,r10
 8002b54:	2005883a 	mov	r2,r4
 8002b58:	3807883a 	mov	r3,r7
 8002b5c:	f800283a 	ret

08002b60 <__fixunssfsi>:
 8002b60:	defffd04 	addi	sp,sp,-12
 8002b64:	dc000015 	stw	r16,0(sp)
 8002b68:	0413c034 	movhi	r16,20224
 8002b6c:	800b883a 	mov	r5,r16
 8002b70:	dc400115 	stw	r17,4(sp)
 8002b74:	dfc00215 	stw	ra,8(sp)
 8002b78:	2023883a 	mov	r17,r4
 8002b7c:	8002ffc0 	call	8002ffc <__gesf2>
 8002b80:	800b883a 	mov	r5,r16
 8002b84:	8809883a 	mov	r4,r17
 8002b88:	10000a16 	blt	r2,zero,8002bb4 <__fixunssfsi+0x54>
 8002b8c:	8002db40 	call	8002db4 <__subsf3>
 8002b90:	1009883a 	mov	r4,r2
 8002b94:	80031840 	call	8003184 <__fixsfsi>
 8002b98:	00e00034 	movhi	r3,32768
 8002b9c:	10c5883a 	add	r2,r2,r3
 8002ba0:	dfc00217 	ldw	ra,8(sp)
 8002ba4:	dc400117 	ldw	r17,4(sp)
 8002ba8:	dc000017 	ldw	r16,0(sp)
 8002bac:	dec00304 	addi	sp,sp,12
 8002bb0:	f800283a 	ret
 8002bb4:	8809883a 	mov	r4,r17
 8002bb8:	80031840 	call	8003184 <__fixsfsi>
 8002bbc:	dfc00217 	ldw	ra,8(sp)
 8002bc0:	dc400117 	ldw	r17,4(sp)
 8002bc4:	dc000017 	ldw	r16,0(sp)
 8002bc8:	dec00304 	addi	sp,sp,12
 8002bcc:	f800283a 	ret

08002bd0 <_fpadd_parts>:
 8002bd0:	21c00017 	ldw	r7,0(r4)
 8002bd4:	02000044 	movi	r8,1
 8002bd8:	41c0332e 	bgeu	r8,r7,8002ca8 <_fpadd_parts+0xd8>
 8002bdc:	28800017 	ldw	r2,0(r5)
 8002be0:	4080462e 	bgeu	r8,r2,8002cfc <_fpadd_parts+0x12c>
 8002be4:	00c00104 	movi	r3,4
 8002be8:	38c06b26 	beq	r7,r3,8002d98 <_fpadd_parts+0x1c8>
 8002bec:	10c04326 	beq	r2,r3,8002cfc <_fpadd_parts+0x12c>
 8002bf0:	00c00084 	movi	r3,2
 8002bf4:	10c02e26 	beq	r2,r3,8002cb0 <_fpadd_parts+0xe0>
 8002bf8:	38c04026 	beq	r7,r3,8002cfc <_fpadd_parts+0x12c>
 8002bfc:	22800217 	ldw	r10,8(r4)
 8002c00:	28c00217 	ldw	r3,8(r5)
 8002c04:	23000317 	ldw	r12,12(r4)
 8002c08:	2a400317 	ldw	r9,12(r5)
 8002c0c:	50cfc83a 	sub	r7,r10,r3
 8002c10:	3817883a 	mov	r11,r7
 8002c14:	38004f16 	blt	r7,zero,8002d54 <_fpadd_parts+0x184>
 8002c18:	008007c4 	movi	r2,31
 8002c1c:	11c03316 	blt	r2,r7,8002cec <_fpadd_parts+0x11c>
 8002c20:	02c0540e 	bge	zero,r11,8002d74 <_fpadd_parts+0x1a4>
 8002c24:	41c4983a 	sll	r2,r8,r7
 8002c28:	49c6d83a 	srl	r3,r9,r7
 8002c2c:	10bfffc4 	addi	r2,r2,-1
 8002c30:	4884703a 	and	r2,r9,r2
 8002c34:	1004c03a 	cmpne	r2,r2,zero
 8002c38:	1892b03a 	or	r9,r3,r2
 8002c3c:	20c00117 	ldw	r3,4(r4)
 8002c40:	28800117 	ldw	r2,4(r5)
 8002c44:	18803c26 	beq	r3,r2,8002d38 <_fpadd_parts+0x168>
 8002c48:	18002f26 	beq	r3,zero,8002d08 <_fpadd_parts+0x138>
 8002c4c:	4b05c83a 	sub	r2,r9,r12
 8002c50:	10004216 	blt	r2,zero,8002d5c <_fpadd_parts+0x18c>
 8002c54:	32800215 	stw	r10,8(r6)
 8002c58:	30800315 	stw	r2,12(r6)
 8002c5c:	30000115 	stw	zero,4(r6)
 8002c60:	31000317 	ldw	r4,12(r6)
 8002c64:	01d00034 	movhi	r7,16384
 8002c68:	39ffff84 	addi	r7,r7,-2
 8002c6c:	20bfffc4 	addi	r2,r4,-1
 8002c70:	2007883a 	mov	r3,r4
 8002c74:	38800836 	bltu	r7,r2,8002c98 <_fpadd_parts+0xc8>
 8002c78:	31400217 	ldw	r5,8(r6)
 8002c7c:	18c9883a 	add	r4,r3,r3
 8002c80:	20bfffc4 	addi	r2,r4,-1
 8002c84:	297fffc4 	addi	r5,r5,-1
 8002c88:	2007883a 	mov	r3,r4
 8002c8c:	38bffb2e 	bgeu	r7,r2,8002c7c <_fpadd_parts+0xac>
 8002c90:	31400215 	stw	r5,8(r6)
 8002c94:	31000315 	stw	r4,12(r6)
 8002c98:	008000c4 	movi	r2,3
 8002c9c:	30800015 	stw	r2,0(r6)
 8002ca0:	20001b16 	blt	r4,zero,8002d10 <_fpadd_parts+0x140>
 8002ca4:	3009883a 	mov	r4,r6
 8002ca8:	2005883a 	mov	r2,r4
 8002cac:	f800283a 	ret
 8002cb0:	38fffd1e 	bne	r7,r3,8002ca8 <_fpadd_parts+0xd8>
 8002cb4:	31c00015 	stw	r7,0(r6)
 8002cb8:	20800117 	ldw	r2,4(r4)
 8002cbc:	30800115 	stw	r2,4(r6)
 8002cc0:	20c00217 	ldw	r3,8(r4)
 8002cc4:	30c00215 	stw	r3,8(r6)
 8002cc8:	20800317 	ldw	r2,12(r4)
 8002ccc:	30800315 	stw	r2,12(r6)
 8002cd0:	20c00117 	ldw	r3,4(r4)
 8002cd4:	28800117 	ldw	r2,4(r5)
 8002cd8:	3009883a 	mov	r4,r6
 8002cdc:	1886703a 	and	r3,r3,r2
 8002ce0:	2005883a 	mov	r2,r4
 8002ce4:	30c00115 	stw	r3,4(r6)
 8002ce8:	f800283a 	ret
 8002cec:	1a801716 	blt	r3,r10,8002d4c <_fpadd_parts+0x17c>
 8002cf0:	1815883a 	mov	r10,r3
 8002cf4:	0019883a 	mov	r12,zero
 8002cf8:	003fd006 	br	8002c3c <_fpadd_parts+0x6c>
 8002cfc:	2809883a 	mov	r4,r5
 8002d00:	2005883a 	mov	r2,r4
 8002d04:	f800283a 	ret
 8002d08:	6245c83a 	sub	r2,r12,r9
 8002d0c:	003fd006 	br	8002c50 <_fpadd_parts+0x80>
 8002d10:	30800217 	ldw	r2,8(r6)
 8002d14:	2006d07a 	srli	r3,r4,1
 8002d18:	2100004c 	andi	r4,r4,1
 8002d1c:	10800044 	addi	r2,r2,1
 8002d20:	1906b03a 	or	r3,r3,r4
 8002d24:	3009883a 	mov	r4,r6
 8002d28:	30800215 	stw	r2,8(r6)
 8002d2c:	2005883a 	mov	r2,r4
 8002d30:	30c00315 	stw	r3,12(r6)
 8002d34:	f800283a 	ret
 8002d38:	4b09883a 	add	r4,r9,r12
 8002d3c:	30c00115 	stw	r3,4(r6)
 8002d40:	32800215 	stw	r10,8(r6)
 8002d44:	31000315 	stw	r4,12(r6)
 8002d48:	003fd306 	br	8002c98 <_fpadd_parts+0xc8>
 8002d4c:	0013883a 	mov	r9,zero
 8002d50:	003fba06 	br	8002c3c <_fpadd_parts+0x6c>
 8002d54:	01cfc83a 	sub	r7,zero,r7
 8002d58:	003faf06 	br	8002c18 <_fpadd_parts+0x48>
 8002d5c:	0089c83a 	sub	r4,zero,r2
 8002d60:	00800044 	movi	r2,1
 8002d64:	30800115 	stw	r2,4(r6)
 8002d68:	32800215 	stw	r10,8(r6)
 8002d6c:	31000315 	stw	r4,12(r6)
 8002d70:	003fbb06 	br	8002c60 <_fpadd_parts+0x90>
 8002d74:	583fb126 	beq	r11,zero,8002c3c <_fpadd_parts+0x6c>
 8002d78:	41c4983a 	sll	r2,r8,r7
 8002d7c:	61c6d83a 	srl	r3,r12,r7
 8002d80:	51d5883a 	add	r10,r10,r7
 8002d84:	10bfffc4 	addi	r2,r2,-1
 8002d88:	6084703a 	and	r2,r12,r2
 8002d8c:	1004c03a 	cmpne	r2,r2,zero
 8002d90:	1898b03a 	or	r12,r3,r2
 8002d94:	003fa906 	br	8002c3c <_fpadd_parts+0x6c>
 8002d98:	11ffc31e 	bne	r2,r7,8002ca8 <_fpadd_parts+0xd8>
 8002d9c:	28c00117 	ldw	r3,4(r5)
 8002da0:	20800117 	ldw	r2,4(r4)
 8002da4:	10ffc026 	beq	r2,r3,8002ca8 <_fpadd_parts+0xd8>
 8002da8:	01020074 	movhi	r4,2049
 8002dac:	21065904 	addi	r4,r4,6500
 8002db0:	003fbd06 	br	8002ca8 <_fpadd_parts+0xd8>

08002db4 <__subsf3>:
 8002db4:	deffef04 	addi	sp,sp,-68
 8002db8:	dcc00f15 	stw	r19,60(sp)
 8002dbc:	dcc00204 	addi	r19,sp,8
 8002dc0:	dc400e15 	stw	r17,56(sp)
 8002dc4:	d9000015 	stw	r4,0(sp)
 8002dc8:	d9400115 	stw	r5,4(sp)
 8002dcc:	d809883a 	mov	r4,sp
 8002dd0:	980b883a 	mov	r5,r19
 8002dd4:	dc400604 	addi	r17,sp,24
 8002dd8:	dfc01015 	stw	ra,64(sp)
 8002ddc:	800465c0 	call	800465c <__unpack_f>
 8002de0:	d9000104 	addi	r4,sp,4
 8002de4:	880b883a 	mov	r5,r17
 8002de8:	800465c0 	call	800465c <__unpack_f>
 8002dec:	d8800717 	ldw	r2,28(sp)
 8002df0:	9809883a 	mov	r4,r19
 8002df4:	880b883a 	mov	r5,r17
 8002df8:	d9800a04 	addi	r6,sp,40
 8002dfc:	1080005c 	xori	r2,r2,1
 8002e00:	d8800715 	stw	r2,28(sp)
 8002e04:	8002bd00 	call	8002bd0 <_fpadd_parts>
 8002e08:	1009883a 	mov	r4,r2
 8002e0c:	80044fc0 	call	80044fc <__pack_f>
 8002e10:	dfc01017 	ldw	ra,64(sp)
 8002e14:	dcc00f17 	ldw	r19,60(sp)
 8002e18:	dc400e17 	ldw	r17,56(sp)
 8002e1c:	dec01104 	addi	sp,sp,68
 8002e20:	f800283a 	ret

08002e24 <__addsf3>:
 8002e24:	deffef04 	addi	sp,sp,-68
 8002e28:	dcc00f15 	stw	r19,60(sp)
 8002e2c:	dcc00204 	addi	r19,sp,8
 8002e30:	dc400e15 	stw	r17,56(sp)
 8002e34:	d9000015 	stw	r4,0(sp)
 8002e38:	d9400115 	stw	r5,4(sp)
 8002e3c:	d809883a 	mov	r4,sp
 8002e40:	980b883a 	mov	r5,r19
 8002e44:	dc400604 	addi	r17,sp,24
 8002e48:	dfc01015 	stw	ra,64(sp)
 8002e4c:	800465c0 	call	800465c <__unpack_f>
 8002e50:	d9000104 	addi	r4,sp,4
 8002e54:	880b883a 	mov	r5,r17
 8002e58:	800465c0 	call	800465c <__unpack_f>
 8002e5c:	d9800a04 	addi	r6,sp,40
 8002e60:	9809883a 	mov	r4,r19
 8002e64:	880b883a 	mov	r5,r17
 8002e68:	8002bd00 	call	8002bd0 <_fpadd_parts>
 8002e6c:	1009883a 	mov	r4,r2
 8002e70:	80044fc0 	call	80044fc <__pack_f>
 8002e74:	dfc01017 	ldw	ra,64(sp)
 8002e78:	dcc00f17 	ldw	r19,60(sp)
 8002e7c:	dc400e17 	ldw	r17,56(sp)
 8002e80:	dec01104 	addi	sp,sp,68
 8002e84:	f800283a 	ret

08002e88 <__divsf3>:
 8002e88:	defff304 	addi	sp,sp,-52
 8002e8c:	dc400b15 	stw	r17,44(sp)
 8002e90:	dc400204 	addi	r17,sp,8
 8002e94:	dc000a15 	stw	r16,40(sp)
 8002e98:	d9000015 	stw	r4,0(sp)
 8002e9c:	d9400115 	stw	r5,4(sp)
 8002ea0:	d809883a 	mov	r4,sp
 8002ea4:	880b883a 	mov	r5,r17
 8002ea8:	dc000604 	addi	r16,sp,24
 8002eac:	dfc00c15 	stw	ra,48(sp)
 8002eb0:	800465c0 	call	800465c <__unpack_f>
 8002eb4:	d9000104 	addi	r4,sp,4
 8002eb8:	800b883a 	mov	r5,r16
 8002ebc:	800465c0 	call	800465c <__unpack_f>
 8002ec0:	d9000217 	ldw	r4,8(sp)
 8002ec4:	00800044 	movi	r2,1
 8002ec8:	01800104 	movi	r6,4
 8002ecc:	11000a2e 	bgeu	r2,r4,8002ef8 <__divsf3+0x70>
 8002ed0:	d9400617 	ldw	r5,24(sp)
 8002ed4:	1140432e 	bgeu	r2,r5,8002fe4 <__divsf3+0x15c>
 8002ed8:	d8800317 	ldw	r2,12(sp)
 8002edc:	d8c00717 	ldw	r3,28(sp)
 8002ee0:	10c4f03a 	xor	r2,r2,r3
 8002ee4:	d8800315 	stw	r2,12(sp)
 8002ee8:	21800226 	beq	r4,r6,8002ef4 <__divsf3+0x6c>
 8002eec:	00800084 	movi	r2,2
 8002ef0:	2080101e 	bne	r4,r2,8002f34 <__divsf3+0xac>
 8002ef4:	29000726 	beq	r5,r4,8002f14 <__divsf3+0x8c>
 8002ef8:	8809883a 	mov	r4,r17
 8002efc:	80044fc0 	call	80044fc <__pack_f>
 8002f00:	dfc00c17 	ldw	ra,48(sp)
 8002f04:	dc400b17 	ldw	r17,44(sp)
 8002f08:	dc000a17 	ldw	r16,40(sp)
 8002f0c:	dec00d04 	addi	sp,sp,52
 8002f10:	f800283a 	ret
 8002f14:	01020074 	movhi	r4,2049
 8002f18:	21065904 	addi	r4,r4,6500
 8002f1c:	80044fc0 	call	80044fc <__pack_f>
 8002f20:	dfc00c17 	ldw	ra,48(sp)
 8002f24:	dc400b17 	ldw	r17,44(sp)
 8002f28:	dc000a17 	ldw	r16,40(sp)
 8002f2c:	dec00d04 	addi	sp,sp,52
 8002f30:	f800283a 	ret
 8002f34:	29802d26 	beq	r5,r6,8002fec <__divsf3+0x164>
 8002f38:	28801a26 	beq	r5,r2,8002fa4 <__divsf3+0x11c>
 8002f3c:	d8c00417 	ldw	r3,16(sp)
 8002f40:	d8800817 	ldw	r2,32(sp)
 8002f44:	d9000517 	ldw	r4,20(sp)
 8002f48:	d9800917 	ldw	r6,36(sp)
 8002f4c:	1885c83a 	sub	r2,r3,r2
 8002f50:	d8800415 	stw	r2,16(sp)
 8002f54:	2180032e 	bgeu	r4,r6,8002f64 <__divsf3+0xdc>
 8002f58:	10bfffc4 	addi	r2,r2,-1
 8002f5c:	d8800415 	stw	r2,16(sp)
 8002f60:	2109883a 	add	r4,r4,r4
 8002f64:	01500034 	movhi	r5,16384
 8002f68:	0007883a 	mov	r3,zero
 8002f6c:	0005883a 	mov	r2,zero
 8002f70:	01c007c4 	movi	r7,31
 8002f74:	10800044 	addi	r2,r2,1
 8002f78:	21800236 	bltu	r4,r6,8002f84 <__divsf3+0xfc>
 8002f7c:	1946b03a 	or	r3,r3,r5
 8002f80:	2189c83a 	sub	r4,r4,r6
 8002f84:	280ad07a 	srli	r5,r5,1
 8002f88:	2109883a 	add	r4,r4,r4
 8002f8c:	11fff91e 	bne	r2,r7,8002f74 <__divsf3+0xec>
 8002f90:	19401fcc 	andi	r5,r3,127
 8002f94:	00801004 	movi	r2,64
 8002f98:	28800a26 	beq	r5,r2,8002fc4 <__divsf3+0x13c>
 8002f9c:	d8c00515 	stw	r3,20(sp)
 8002fa0:	003fd506 	br	8002ef8 <__divsf3+0x70>
 8002fa4:	8809883a 	mov	r4,r17
 8002fa8:	d9800215 	stw	r6,8(sp)
 8002fac:	80044fc0 	call	80044fc <__pack_f>
 8002fb0:	dfc00c17 	ldw	ra,48(sp)
 8002fb4:	dc400b17 	ldw	r17,44(sp)
 8002fb8:	dc000a17 	ldw	r16,40(sp)
 8002fbc:	dec00d04 	addi	sp,sp,52
 8002fc0:	f800283a 	ret
 8002fc4:	1880200c 	andi	r2,r3,128
 8002fc8:	103ff41e 	bne	r2,zero,8002f9c <__divsf3+0x114>
 8002fcc:	203ff326 	beq	r4,zero,8002f9c <__divsf3+0x114>
 8002fd0:	1947883a 	add	r3,r3,r5
 8002fd4:	00bfe004 	movi	r2,-128
 8002fd8:	1886703a 	and	r3,r3,r2
 8002fdc:	d8c00515 	stw	r3,20(sp)
 8002fe0:	003fc506 	br	8002ef8 <__divsf3+0x70>
 8002fe4:	8009883a 	mov	r4,r16
 8002fe8:	003fc406 	br	8002efc <__divsf3+0x74>
 8002fec:	8809883a 	mov	r4,r17
 8002ff0:	d8000515 	stw	zero,20(sp)
 8002ff4:	d8000415 	stw	zero,16(sp)
 8002ff8:	003fc006 	br	8002efc <__divsf3+0x74>

08002ffc <__gesf2>:
 8002ffc:	defff304 	addi	sp,sp,-52
 8003000:	dc400b15 	stw	r17,44(sp)
 8003004:	dc400204 	addi	r17,sp,8
 8003008:	dc000a15 	stw	r16,40(sp)
 800300c:	d9000015 	stw	r4,0(sp)
 8003010:	d9400115 	stw	r5,4(sp)
 8003014:	d809883a 	mov	r4,sp
 8003018:	880b883a 	mov	r5,r17
 800301c:	dc000604 	addi	r16,sp,24
 8003020:	dfc00c15 	stw	ra,48(sp)
 8003024:	800465c0 	call	800465c <__unpack_f>
 8003028:	d9000104 	addi	r4,sp,4
 800302c:	800b883a 	mov	r5,r16
 8003030:	800465c0 	call	800465c <__unpack_f>
 8003034:	d8800217 	ldw	r2,8(sp)
 8003038:	00c00044 	movi	r3,1
 800303c:	01bfffc4 	movi	r6,-1
 8003040:	1880062e 	bgeu	r3,r2,800305c <__gesf2+0x60>
 8003044:	d8800617 	ldw	r2,24(sp)
 8003048:	8809883a 	mov	r4,r17
 800304c:	800b883a 	mov	r5,r16
 8003050:	1880022e 	bgeu	r3,r2,800305c <__gesf2+0x60>
 8003054:	80047240 	call	8004724 <__fpcmp_parts_f>
 8003058:	100d883a 	mov	r6,r2
 800305c:	3005883a 	mov	r2,r6
 8003060:	dfc00c17 	ldw	ra,48(sp)
 8003064:	dc400b17 	ldw	r17,44(sp)
 8003068:	dc000a17 	ldw	r16,40(sp)
 800306c:	dec00d04 	addi	sp,sp,52
 8003070:	f800283a 	ret

08003074 <__lesf2>:
 8003074:	defff304 	addi	sp,sp,-52
 8003078:	dc400b15 	stw	r17,44(sp)
 800307c:	dc400204 	addi	r17,sp,8
 8003080:	dc000a15 	stw	r16,40(sp)
 8003084:	d9000015 	stw	r4,0(sp)
 8003088:	d9400115 	stw	r5,4(sp)
 800308c:	d809883a 	mov	r4,sp
 8003090:	880b883a 	mov	r5,r17
 8003094:	dc000604 	addi	r16,sp,24
 8003098:	dfc00c15 	stw	ra,48(sp)
 800309c:	800465c0 	call	800465c <__unpack_f>
 80030a0:	d9000104 	addi	r4,sp,4
 80030a4:	800b883a 	mov	r5,r16
 80030a8:	800465c0 	call	800465c <__unpack_f>
 80030ac:	d8800217 	ldw	r2,8(sp)
 80030b0:	00c00044 	movi	r3,1
 80030b4:	180d883a 	mov	r6,r3
 80030b8:	1880062e 	bgeu	r3,r2,80030d4 <__lesf2+0x60>
 80030bc:	d8800617 	ldw	r2,24(sp)
 80030c0:	8809883a 	mov	r4,r17
 80030c4:	800b883a 	mov	r5,r16
 80030c8:	1880022e 	bgeu	r3,r2,80030d4 <__lesf2+0x60>
 80030cc:	80047240 	call	8004724 <__fpcmp_parts_f>
 80030d0:	100d883a 	mov	r6,r2
 80030d4:	3005883a 	mov	r2,r6
 80030d8:	dfc00c17 	ldw	ra,48(sp)
 80030dc:	dc400b17 	ldw	r17,44(sp)
 80030e0:	dc000a17 	ldw	r16,40(sp)
 80030e4:	dec00d04 	addi	sp,sp,52
 80030e8:	f800283a 	ret

080030ec <__floatsisf>:
 80030ec:	2006d7fa 	srli	r3,r4,31
 80030f0:	defffa04 	addi	sp,sp,-24
 80030f4:	008000c4 	movi	r2,3
 80030f8:	dfc00515 	stw	ra,20(sp)
 80030fc:	dc000415 	stw	r16,16(sp)
 8003100:	d8800015 	stw	r2,0(sp)
 8003104:	d8c00115 	stw	r3,4(sp)
 8003108:	2000081e 	bne	r4,zero,800312c <__floatsisf+0x40>
 800310c:	00800084 	movi	r2,2
 8003110:	d8800015 	stw	r2,0(sp)
 8003114:	d809883a 	mov	r4,sp
 8003118:	80044fc0 	call	80044fc <__pack_f>
 800311c:	dfc00517 	ldw	ra,20(sp)
 8003120:	dc000417 	ldw	r16,16(sp)
 8003124:	dec00604 	addi	sp,sp,24
 8003128:	f800283a 	ret
 800312c:	00800784 	movi	r2,30
 8003130:	1807003a 	cmpeq	r3,r3,zero
 8003134:	d8800215 	stw	r2,8(sp)
 8003138:	18000e1e 	bne	r3,zero,8003174 <__floatsisf+0x88>
 800313c:	00a00034 	movhi	r2,32768
 8003140:	20800e26 	beq	r4,r2,800317c <__floatsisf+0x90>
 8003144:	0121c83a 	sub	r16,zero,r4
 8003148:	8009883a 	mov	r4,r16
 800314c:	dc000315 	stw	r16,12(sp)
 8003150:	800447c0 	call	800447c <__clzsi2>
 8003154:	117fffc4 	addi	r5,r2,-1
 8003158:	017fee0e 	bge	zero,r5,8003114 <__floatsisf+0x28>
 800315c:	d8800217 	ldw	r2,8(sp)
 8003160:	8146983a 	sll	r3,r16,r5
 8003164:	1145c83a 	sub	r2,r2,r5
 8003168:	d8c00315 	stw	r3,12(sp)
 800316c:	d8800215 	stw	r2,8(sp)
 8003170:	003fe806 	br	8003114 <__floatsisf+0x28>
 8003174:	2021883a 	mov	r16,r4
 8003178:	003ff306 	br	8003148 <__floatsisf+0x5c>
 800317c:	00b3c034 	movhi	r2,52992
 8003180:	003fe606 	br	800311c <__floatsisf+0x30>

08003184 <__fixsfsi>:
 8003184:	defffa04 	addi	sp,sp,-24
 8003188:	d9000015 	stw	r4,0(sp)
 800318c:	d9400104 	addi	r5,sp,4
 8003190:	d809883a 	mov	r4,sp
 8003194:	dfc00515 	stw	ra,20(sp)
 8003198:	800465c0 	call	800465c <__unpack_f>
 800319c:	d8c00117 	ldw	r3,4(sp)
 80031a0:	00800084 	movi	r2,2
 80031a4:	1880041e 	bne	r3,r2,80031b8 <__fixsfsi+0x34>
 80031a8:	0005883a 	mov	r2,zero
 80031ac:	dfc00517 	ldw	ra,20(sp)
 80031b0:	dec00604 	addi	sp,sp,24
 80031b4:	f800283a 	ret
 80031b8:	00800044 	movi	r2,1
 80031bc:	10fffa2e 	bgeu	r2,r3,80031a8 <__fixsfsi+0x24>
 80031c0:	00800104 	movi	r2,4
 80031c4:	18800426 	beq	r3,r2,80031d8 <__fixsfsi+0x54>
 80031c8:	d8800317 	ldw	r2,12(sp)
 80031cc:	103ff616 	blt	r2,zero,80031a8 <__fixsfsi+0x24>
 80031d0:	00c00784 	movi	r3,30
 80031d4:	1880070e 	bge	r3,r2,80031f4 <__fixsfsi+0x70>
 80031d8:	d8800217 	ldw	r2,8(sp)
 80031dc:	10000c1e 	bne	r2,zero,8003210 <__fixsfsi+0x8c>
 80031e0:	00a00034 	movhi	r2,32768
 80031e4:	10bfffc4 	addi	r2,r2,-1
 80031e8:	dfc00517 	ldw	ra,20(sp)
 80031ec:	dec00604 	addi	sp,sp,24
 80031f0:	f800283a 	ret
 80031f4:	1885c83a 	sub	r2,r3,r2
 80031f8:	d9000217 	ldw	r4,8(sp)
 80031fc:	d8c00417 	ldw	r3,16(sp)
 8003200:	1884d83a 	srl	r2,r3,r2
 8003204:	203fe926 	beq	r4,zero,80031ac <__fixsfsi+0x28>
 8003208:	0085c83a 	sub	r2,zero,r2
 800320c:	003fe706 	br	80031ac <__fixsfsi+0x28>
 8003210:	00a00034 	movhi	r2,32768
 8003214:	003fe506 	br	80031ac <__fixsfsi+0x28>

08003218 <__extendsfdf2>:
 8003218:	defff904 	addi	sp,sp,-28
 800321c:	d9000115 	stw	r4,4(sp)
 8003220:	d9400204 	addi	r5,sp,8
 8003224:	d9000104 	addi	r4,sp,4
 8003228:	dfc00615 	stw	ra,24(sp)
 800322c:	800465c0 	call	800465c <__unpack_f>
 8003230:	d9c00517 	ldw	r7,20(sp)
 8003234:	0011883a 	mov	r8,zero
 8003238:	400697ba 	slli	r3,r8,30
 800323c:	3812d0ba 	srli	r9,r7,2
 8003240:	380497ba 	slli	r2,r7,30
 8003244:	d9000217 	ldw	r4,8(sp)
 8003248:	d9400317 	ldw	r5,12(sp)
 800324c:	d9800417 	ldw	r6,16(sp)
 8003250:	48c6b03a 	or	r3,r9,r3
 8003254:	100f883a 	mov	r7,r2
 8003258:	d8c00015 	stw	r3,0(sp)
 800325c:	80041ec0 	call	80041ec <__make_dp>
 8003260:	dfc00617 	ldw	ra,24(sp)
 8003264:	dec00704 	addi	sp,sp,28
 8003268:	f800283a 	ret

0800326c <__floatunsisf>:
 800326c:	defff904 	addi	sp,sp,-28
 8003270:	dc400515 	stw	r17,20(sp)
 8003274:	dc000415 	stw	r16,16(sp)
 8003278:	dfc00615 	stw	ra,24(sp)
 800327c:	04400784 	movi	r17,30
 8003280:	2021883a 	mov	r16,r4
 8003284:	d8000115 	stw	zero,4(sp)
 8003288:	2000091e 	bne	r4,zero,80032b0 <__floatunsisf+0x44>
 800328c:	00800084 	movi	r2,2
 8003290:	d8800015 	stw	r2,0(sp)
 8003294:	d809883a 	mov	r4,sp
 8003298:	80044fc0 	call	80044fc <__pack_f>
 800329c:	dfc00617 	ldw	ra,24(sp)
 80032a0:	dc400517 	ldw	r17,20(sp)
 80032a4:	dc000417 	ldw	r16,16(sp)
 80032a8:	dec00704 	addi	sp,sp,28
 80032ac:	f800283a 	ret
 80032b0:	008000c4 	movi	r2,3
 80032b4:	d9000315 	stw	r4,12(sp)
 80032b8:	d8800015 	stw	r2,0(sp)
 80032bc:	dc400215 	stw	r17,8(sp)
 80032c0:	800447c0 	call	800447c <__clzsi2>
 80032c4:	117fffc4 	addi	r5,r2,-1
 80032c8:	0147c83a 	sub	r3,zero,r5
 80032cc:	00800044 	movi	r2,1
 80032d0:	10c4983a 	sll	r2,r2,r3
 80032d4:	80c6d83a 	srl	r3,r16,r3
 80032d8:	8949c83a 	sub	r4,r17,r5
 80032dc:	10bfffc4 	addi	r2,r2,-1
 80032e0:	8084703a 	and	r2,r16,r2
 80032e4:	1004c03a 	cmpne	r2,r2,zero
 80032e8:	1886b03a 	or	r3,r3,r2
 80032ec:	28000c16 	blt	r5,zero,8003320 <__floatunsisf+0xb4>
 80032f0:	8144983a 	sll	r2,r16,r5
 80032f4:	8947c83a 	sub	r3,r17,r5
 80032f8:	283fe626 	beq	r5,zero,8003294 <__floatunsisf+0x28>
 80032fc:	d809883a 	mov	r4,sp
 8003300:	d8800315 	stw	r2,12(sp)
 8003304:	d8c00215 	stw	r3,8(sp)
 8003308:	80044fc0 	call	80044fc <__pack_f>
 800330c:	dfc00617 	ldw	ra,24(sp)
 8003310:	dc400517 	ldw	r17,20(sp)
 8003314:	dc000417 	ldw	r16,16(sp)
 8003318:	dec00704 	addi	sp,sp,28
 800331c:	f800283a 	ret
 8003320:	d8c00315 	stw	r3,12(sp)
 8003324:	d9000215 	stw	r4,8(sp)
 8003328:	003fda06 	br	8003294 <__floatunsisf+0x28>

0800332c <_fpadd_parts>:
 800332c:	defff804 	addi	sp,sp,-32
 8003330:	dcc00315 	stw	r19,12(sp)
 8003334:	2027883a 	mov	r19,r4
 8003338:	21000017 	ldw	r4,0(r4)
 800333c:	00c00044 	movi	r3,1
 8003340:	dd400515 	stw	r21,20(sp)
 8003344:	dd000415 	stw	r20,16(sp)
 8003348:	ddc00715 	stw	r23,28(sp)
 800334c:	dd800615 	stw	r22,24(sp)
 8003350:	dc800215 	stw	r18,8(sp)
 8003354:	dc400115 	stw	r17,4(sp)
 8003358:	dc000015 	stw	r16,0(sp)
 800335c:	282b883a 	mov	r21,r5
 8003360:	3029883a 	mov	r20,r6
 8003364:	1900632e 	bgeu	r3,r4,80034f4 <_fpadd_parts+0x1c8>
 8003368:	28800017 	ldw	r2,0(r5)
 800336c:	1880812e 	bgeu	r3,r2,8003574 <_fpadd_parts+0x248>
 8003370:	00c00104 	movi	r3,4
 8003374:	20c0dc26 	beq	r4,r3,80036e8 <_fpadd_parts+0x3bc>
 8003378:	10c07e26 	beq	r2,r3,8003574 <_fpadd_parts+0x248>
 800337c:	00c00084 	movi	r3,2
 8003380:	10c06726 	beq	r2,r3,8003520 <_fpadd_parts+0x1f4>
 8003384:	20c07b26 	beq	r4,r3,8003574 <_fpadd_parts+0x248>
 8003388:	9dc00217 	ldw	r23,8(r19)
 800338c:	28c00217 	ldw	r3,8(r5)
 8003390:	9c400317 	ldw	r17,12(r19)
 8003394:	2bc00317 	ldw	r15,12(r5)
 8003398:	b8cdc83a 	sub	r6,r23,r3
 800339c:	9c800417 	ldw	r18,16(r19)
 80033a0:	2c000417 	ldw	r16,16(r5)
 80033a4:	3009883a 	mov	r4,r6
 80033a8:	30009716 	blt	r6,zero,8003608 <_fpadd_parts+0x2dc>
 80033ac:	00800fc4 	movi	r2,63
 80033b0:	11806b16 	blt	r2,r6,8003560 <_fpadd_parts+0x234>
 80033b4:	0100a40e 	bge	zero,r4,8003648 <_fpadd_parts+0x31c>
 80033b8:	35bff804 	addi	r22,r6,-32
 80033bc:	b000bc16 	blt	r22,zero,80036b0 <_fpadd_parts+0x384>
 80033c0:	8596d83a 	srl	r11,r16,r22
 80033c4:	0019883a 	mov	r12,zero
 80033c8:	0013883a 	mov	r9,zero
 80033cc:	01000044 	movi	r4,1
 80033d0:	0015883a 	mov	r10,zero
 80033d4:	b000be16 	blt	r22,zero,80036d0 <_fpadd_parts+0x3a4>
 80033d8:	2590983a 	sll	r8,r4,r22
 80033dc:	000f883a 	mov	r7,zero
 80033e0:	00bfffc4 	movi	r2,-1
 80033e4:	3889883a 	add	r4,r7,r2
 80033e8:	408b883a 	add	r5,r8,r2
 80033ec:	21cd803a 	cmpltu	r6,r4,r7
 80033f0:	314b883a 	add	r5,r6,r5
 80033f4:	7904703a 	and	r2,r15,r4
 80033f8:	8146703a 	and	r3,r16,r5
 80033fc:	10c4b03a 	or	r2,r2,r3
 8003400:	10000226 	beq	r2,zero,800340c <_fpadd_parts+0xe0>
 8003404:	02400044 	movi	r9,1
 8003408:	0015883a 	mov	r10,zero
 800340c:	5a5eb03a 	or	r15,r11,r9
 8003410:	62a0b03a 	or	r16,r12,r10
 8003414:	99400117 	ldw	r5,4(r19)
 8003418:	a8800117 	ldw	r2,4(r21)
 800341c:	28806e26 	beq	r5,r2,80035d8 <_fpadd_parts+0x2ac>
 8003420:	28006626 	beq	r5,zero,80035bc <_fpadd_parts+0x290>
 8003424:	7c45c83a 	sub	r2,r15,r17
 8003428:	7889803a 	cmpltu	r4,r15,r2
 800342c:	8487c83a 	sub	r3,r16,r18
 8003430:	1909c83a 	sub	r4,r3,r4
 8003434:	100d883a 	mov	r6,r2
 8003438:	200f883a 	mov	r7,r4
 800343c:	38007716 	blt	r7,zero,800361c <_fpadd_parts+0x2f0>
 8003440:	a5c00215 	stw	r23,8(r20)
 8003444:	a1c00415 	stw	r7,16(r20)
 8003448:	a0000115 	stw	zero,4(r20)
 800344c:	a1800315 	stw	r6,12(r20)
 8003450:	a2000317 	ldw	r8,12(r20)
 8003454:	a2400417 	ldw	r9,16(r20)
 8003458:	00bfffc4 	movi	r2,-1
 800345c:	408b883a 	add	r5,r8,r2
 8003460:	2a09803a 	cmpltu	r4,r5,r8
 8003464:	488d883a 	add	r6,r9,r2
 8003468:	01c40034 	movhi	r7,4096
 800346c:	39ffffc4 	addi	r7,r7,-1
 8003470:	218d883a 	add	r6,r4,r6
 8003474:	39801736 	bltu	r7,r6,80034d4 <_fpadd_parts+0x1a8>
 8003478:	31c06526 	beq	r6,r7,8003610 <_fpadd_parts+0x2e4>
 800347c:	a3000217 	ldw	r12,8(r20)
 8003480:	4209883a 	add	r4,r8,r8
 8003484:	00bfffc4 	movi	r2,-1
 8003488:	220f803a 	cmpltu	r7,r4,r8
 800348c:	4a4b883a 	add	r5,r9,r9
 8003490:	394f883a 	add	r7,r7,r5
 8003494:	2095883a 	add	r10,r4,r2
 8003498:	3897883a 	add	r11,r7,r2
 800349c:	510d803a 	cmpltu	r6,r10,r4
 80034a0:	6099883a 	add	r12,r12,r2
 80034a4:	32d7883a 	add	r11,r6,r11
 80034a8:	00840034 	movhi	r2,4096
 80034ac:	10bfffc4 	addi	r2,r2,-1
 80034b0:	2011883a 	mov	r8,r4
 80034b4:	3813883a 	mov	r9,r7
 80034b8:	a1000315 	stw	r4,12(r20)
 80034bc:	a1c00415 	stw	r7,16(r20)
 80034c0:	a3000215 	stw	r12,8(r20)
 80034c4:	12c00336 	bltu	r2,r11,80034d4 <_fpadd_parts+0x1a8>
 80034c8:	58bfed1e 	bne	r11,r2,8003480 <_fpadd_parts+0x154>
 80034cc:	00bfff84 	movi	r2,-2
 80034d0:	12bfeb2e 	bgeu	r2,r10,8003480 <_fpadd_parts+0x154>
 80034d4:	a2800417 	ldw	r10,16(r20)
 80034d8:	008000c4 	movi	r2,3
 80034dc:	00c80034 	movhi	r3,8192
 80034e0:	18ffffc4 	addi	r3,r3,-1
 80034e4:	a2400317 	ldw	r9,12(r20)
 80034e8:	a0800015 	stw	r2,0(r20)
 80034ec:	1a802336 	bltu	r3,r10,800357c <_fpadd_parts+0x250>
 80034f0:	a027883a 	mov	r19,r20
 80034f4:	9805883a 	mov	r2,r19
 80034f8:	ddc00717 	ldw	r23,28(sp)
 80034fc:	dd800617 	ldw	r22,24(sp)
 8003500:	dd400517 	ldw	r21,20(sp)
 8003504:	dd000417 	ldw	r20,16(sp)
 8003508:	dcc00317 	ldw	r19,12(sp)
 800350c:	dc800217 	ldw	r18,8(sp)
 8003510:	dc400117 	ldw	r17,4(sp)
 8003514:	dc000017 	ldw	r16,0(sp)
 8003518:	dec00804 	addi	sp,sp,32
 800351c:	f800283a 	ret
 8003520:	20fff41e 	bne	r4,r3,80034f4 <_fpadd_parts+0x1c8>
 8003524:	31000015 	stw	r4,0(r6)
 8003528:	98800117 	ldw	r2,4(r19)
 800352c:	30800115 	stw	r2,4(r6)
 8003530:	98c00217 	ldw	r3,8(r19)
 8003534:	30c00215 	stw	r3,8(r6)
 8003538:	98800317 	ldw	r2,12(r19)
 800353c:	30800315 	stw	r2,12(r6)
 8003540:	98c00417 	ldw	r3,16(r19)
 8003544:	30c00415 	stw	r3,16(r6)
 8003548:	98800117 	ldw	r2,4(r19)
 800354c:	28c00117 	ldw	r3,4(r5)
 8003550:	3027883a 	mov	r19,r6
 8003554:	10c4703a 	and	r2,r2,r3
 8003558:	30800115 	stw	r2,4(r6)
 800355c:	003fe506 	br	80034f4 <_fpadd_parts+0x1c8>
 8003560:	1dc02616 	blt	r3,r23,80035fc <_fpadd_parts+0x2d0>
 8003564:	0023883a 	mov	r17,zero
 8003568:	182f883a 	mov	r23,r3
 800356c:	0025883a 	mov	r18,zero
 8003570:	003fa806 	br	8003414 <_fpadd_parts+0xe8>
 8003574:	a827883a 	mov	r19,r21
 8003578:	003fde06 	br	80034f4 <_fpadd_parts+0x1c8>
 800357c:	01800044 	movi	r6,1
 8003580:	500497fa 	slli	r2,r10,31
 8003584:	4808d07a 	srli	r4,r9,1
 8003588:	518ad83a 	srl	r5,r10,r6
 800358c:	a2000217 	ldw	r8,8(r20)
 8003590:	1108b03a 	or	r4,r2,r4
 8003594:	0007883a 	mov	r3,zero
 8003598:	4984703a 	and	r2,r9,r6
 800359c:	208cb03a 	or	r6,r4,r2
 80035a0:	28ceb03a 	or	r7,r5,r3
 80035a4:	42000044 	addi	r8,r8,1
 80035a8:	a027883a 	mov	r19,r20
 80035ac:	a1c00415 	stw	r7,16(r20)
 80035b0:	a2000215 	stw	r8,8(r20)
 80035b4:	a1800315 	stw	r6,12(r20)
 80035b8:	003fce06 	br	80034f4 <_fpadd_parts+0x1c8>
 80035bc:	8bc5c83a 	sub	r2,r17,r15
 80035c0:	8889803a 	cmpltu	r4,r17,r2
 80035c4:	9407c83a 	sub	r3,r18,r16
 80035c8:	1909c83a 	sub	r4,r3,r4
 80035cc:	100d883a 	mov	r6,r2
 80035d0:	200f883a 	mov	r7,r4
 80035d4:	003f9906 	br	800343c <_fpadd_parts+0x110>
 80035d8:	7c45883a 	add	r2,r15,r17
 80035dc:	13c9803a 	cmpltu	r4,r2,r15
 80035e0:	8487883a 	add	r3,r16,r18
 80035e4:	20c9883a 	add	r4,r4,r3
 80035e8:	a1400115 	stw	r5,4(r20)
 80035ec:	a5c00215 	stw	r23,8(r20)
 80035f0:	a0800315 	stw	r2,12(r20)
 80035f4:	a1000415 	stw	r4,16(r20)
 80035f8:	003fb606 	br	80034d4 <_fpadd_parts+0x1a8>
 80035fc:	001f883a 	mov	r15,zero
 8003600:	0021883a 	mov	r16,zero
 8003604:	003f8306 	br	8003414 <_fpadd_parts+0xe8>
 8003608:	018dc83a 	sub	r6,zero,r6
 800360c:	003f6706 	br	80033ac <_fpadd_parts+0x80>
 8003610:	00bfff84 	movi	r2,-2
 8003614:	117faf36 	bltu	r2,r5,80034d4 <_fpadd_parts+0x1a8>
 8003618:	003f9806 	br	800347c <_fpadd_parts+0x150>
 800361c:	0005883a 	mov	r2,zero
 8003620:	1189c83a 	sub	r4,r2,r6
 8003624:	1105803a 	cmpltu	r2,r2,r4
 8003628:	01cbc83a 	sub	r5,zero,r7
 800362c:	2885c83a 	sub	r2,r5,r2
 8003630:	01800044 	movi	r6,1
 8003634:	a1800115 	stw	r6,4(r20)
 8003638:	a5c00215 	stw	r23,8(r20)
 800363c:	a1000315 	stw	r4,12(r20)
 8003640:	a0800415 	stw	r2,16(r20)
 8003644:	003f8206 	br	8003450 <_fpadd_parts+0x124>
 8003648:	203f7226 	beq	r4,zero,8003414 <_fpadd_parts+0xe8>
 800364c:	35bff804 	addi	r22,r6,-32
 8003650:	b9af883a 	add	r23,r23,r6
 8003654:	b0003116 	blt	r22,zero,800371c <_fpadd_parts+0x3f0>
 8003658:	959ad83a 	srl	r13,r18,r22
 800365c:	001d883a 	mov	r14,zero
 8003660:	000f883a 	mov	r7,zero
 8003664:	01000044 	movi	r4,1
 8003668:	0011883a 	mov	r8,zero
 800366c:	b0002516 	blt	r22,zero,8003704 <_fpadd_parts+0x3d8>
 8003670:	2594983a 	sll	r10,r4,r22
 8003674:	0013883a 	mov	r9,zero
 8003678:	00bfffc4 	movi	r2,-1
 800367c:	4889883a 	add	r4,r9,r2
 8003680:	508b883a 	add	r5,r10,r2
 8003684:	224d803a 	cmpltu	r6,r4,r9
 8003688:	314b883a 	add	r5,r6,r5
 800368c:	8904703a 	and	r2,r17,r4
 8003690:	9146703a 	and	r3,r18,r5
 8003694:	10c4b03a 	or	r2,r2,r3
 8003698:	10000226 	beq	r2,zero,80036a4 <_fpadd_parts+0x378>
 800369c:	01c00044 	movi	r7,1
 80036a0:	0011883a 	mov	r8,zero
 80036a4:	69e2b03a 	or	r17,r13,r7
 80036a8:	7224b03a 	or	r18,r14,r8
 80036ac:	003f5906 	br	8003414 <_fpadd_parts+0xe8>
 80036b0:	8407883a 	add	r3,r16,r16
 80036b4:	008007c4 	movi	r2,31
 80036b8:	1185c83a 	sub	r2,r2,r6
 80036bc:	1886983a 	sll	r3,r3,r2
 80036c0:	7996d83a 	srl	r11,r15,r6
 80036c4:	8198d83a 	srl	r12,r16,r6
 80036c8:	1ad6b03a 	or	r11,r3,r11
 80036cc:	003f3e06 	br	80033c8 <_fpadd_parts+0x9c>
 80036d0:	2006d07a 	srli	r3,r4,1
 80036d4:	008007c4 	movi	r2,31
 80036d8:	1185c83a 	sub	r2,r2,r6
 80036dc:	1890d83a 	srl	r8,r3,r2
 80036e0:	218e983a 	sll	r7,r4,r6
 80036e4:	003f3e06 	br	80033e0 <_fpadd_parts+0xb4>
 80036e8:	113f821e 	bne	r2,r4,80034f4 <_fpadd_parts+0x1c8>
 80036ec:	28c00117 	ldw	r3,4(r5)
 80036f0:	98800117 	ldw	r2,4(r19)
 80036f4:	10ff7f26 	beq	r2,r3,80034f4 <_fpadd_parts+0x1c8>
 80036f8:	04c20074 	movhi	r19,2049
 80036fc:	9cc65d04 	addi	r19,r19,6516
 8003700:	003f7c06 	br	80034f4 <_fpadd_parts+0x1c8>
 8003704:	2006d07a 	srli	r3,r4,1
 8003708:	008007c4 	movi	r2,31
 800370c:	1185c83a 	sub	r2,r2,r6
 8003710:	1894d83a 	srl	r10,r3,r2
 8003714:	2192983a 	sll	r9,r4,r6
 8003718:	003fd706 	br	8003678 <_fpadd_parts+0x34c>
 800371c:	9487883a 	add	r3,r18,r18
 8003720:	008007c4 	movi	r2,31
 8003724:	1185c83a 	sub	r2,r2,r6
 8003728:	1886983a 	sll	r3,r3,r2
 800372c:	899ad83a 	srl	r13,r17,r6
 8003730:	919cd83a 	srl	r14,r18,r6
 8003734:	1b5ab03a 	or	r13,r3,r13
 8003738:	003fc906 	br	8003660 <_fpadd_parts+0x334>

0800373c <__subdf3>:
 800373c:	deffea04 	addi	sp,sp,-88
 8003740:	dcc01415 	stw	r19,80(sp)
 8003744:	dcc00404 	addi	r19,sp,16
 8003748:	2011883a 	mov	r8,r4
 800374c:	2813883a 	mov	r9,r5
 8003750:	dc401315 	stw	r17,76(sp)
 8003754:	d809883a 	mov	r4,sp
 8003758:	980b883a 	mov	r5,r19
 800375c:	dc400904 	addi	r17,sp,36
 8003760:	dfc01515 	stw	ra,84(sp)
 8003764:	da400115 	stw	r9,4(sp)
 8003768:	d9c00315 	stw	r7,12(sp)
 800376c:	da000015 	stw	r8,0(sp)
 8003770:	d9800215 	stw	r6,8(sp)
 8003774:	8004b0c0 	call	8004b0c <__unpack_d>
 8003778:	d9000204 	addi	r4,sp,8
 800377c:	880b883a 	mov	r5,r17
 8003780:	8004b0c0 	call	8004b0c <__unpack_d>
 8003784:	d8800a17 	ldw	r2,40(sp)
 8003788:	880b883a 	mov	r5,r17
 800378c:	9809883a 	mov	r4,r19
 8003790:	d9800e04 	addi	r6,sp,56
 8003794:	1080005c 	xori	r2,r2,1
 8003798:	d8800a15 	stw	r2,40(sp)
 800379c:	800332c0 	call	800332c <_fpadd_parts>
 80037a0:	1009883a 	mov	r4,r2
 80037a4:	80047f80 	call	80047f8 <__pack_d>
 80037a8:	dfc01517 	ldw	ra,84(sp)
 80037ac:	dcc01417 	ldw	r19,80(sp)
 80037b0:	dc401317 	ldw	r17,76(sp)
 80037b4:	dec01604 	addi	sp,sp,88
 80037b8:	f800283a 	ret

080037bc <__adddf3>:
 80037bc:	deffea04 	addi	sp,sp,-88
 80037c0:	dcc01415 	stw	r19,80(sp)
 80037c4:	dcc00404 	addi	r19,sp,16
 80037c8:	2011883a 	mov	r8,r4
 80037cc:	2813883a 	mov	r9,r5
 80037d0:	dc401315 	stw	r17,76(sp)
 80037d4:	d809883a 	mov	r4,sp
 80037d8:	980b883a 	mov	r5,r19
 80037dc:	dc400904 	addi	r17,sp,36
 80037e0:	dfc01515 	stw	ra,84(sp)
 80037e4:	da400115 	stw	r9,4(sp)
 80037e8:	d9c00315 	stw	r7,12(sp)
 80037ec:	da000015 	stw	r8,0(sp)
 80037f0:	d9800215 	stw	r6,8(sp)
 80037f4:	8004b0c0 	call	8004b0c <__unpack_d>
 80037f8:	d9000204 	addi	r4,sp,8
 80037fc:	880b883a 	mov	r5,r17
 8003800:	8004b0c0 	call	8004b0c <__unpack_d>
 8003804:	d9800e04 	addi	r6,sp,56
 8003808:	9809883a 	mov	r4,r19
 800380c:	880b883a 	mov	r5,r17
 8003810:	800332c0 	call	800332c <_fpadd_parts>
 8003814:	1009883a 	mov	r4,r2
 8003818:	80047f80 	call	80047f8 <__pack_d>
 800381c:	dfc01517 	ldw	ra,84(sp)
 8003820:	dcc01417 	ldw	r19,80(sp)
 8003824:	dc401317 	ldw	r17,76(sp)
 8003828:	dec01604 	addi	sp,sp,88
 800382c:	f800283a 	ret

08003830 <__muldf3>:
 8003830:	deffe004 	addi	sp,sp,-128
 8003834:	dc401815 	stw	r17,96(sp)
 8003838:	dc400404 	addi	r17,sp,16
 800383c:	2011883a 	mov	r8,r4
 8003840:	2813883a 	mov	r9,r5
 8003844:	dc001715 	stw	r16,92(sp)
 8003848:	d809883a 	mov	r4,sp
 800384c:	880b883a 	mov	r5,r17
 8003850:	dc000904 	addi	r16,sp,36
 8003854:	dfc01f15 	stw	ra,124(sp)
 8003858:	da400115 	stw	r9,4(sp)
 800385c:	d9c00315 	stw	r7,12(sp)
 8003860:	da000015 	stw	r8,0(sp)
 8003864:	d9800215 	stw	r6,8(sp)
 8003868:	ddc01e15 	stw	r23,120(sp)
 800386c:	dd801d15 	stw	r22,116(sp)
 8003870:	dd401c15 	stw	r21,112(sp)
 8003874:	dd001b15 	stw	r20,108(sp)
 8003878:	dcc01a15 	stw	r19,104(sp)
 800387c:	dc801915 	stw	r18,100(sp)
 8003880:	8004b0c0 	call	8004b0c <__unpack_d>
 8003884:	d9000204 	addi	r4,sp,8
 8003888:	800b883a 	mov	r5,r16
 800388c:	8004b0c0 	call	8004b0c <__unpack_d>
 8003890:	d9000417 	ldw	r4,16(sp)
 8003894:	00800044 	movi	r2,1
 8003898:	1100102e 	bgeu	r2,r4,80038dc <__muldf3+0xac>
 800389c:	d8c00917 	ldw	r3,36(sp)
 80038a0:	10c0062e 	bgeu	r2,r3,80038bc <__muldf3+0x8c>
 80038a4:	00800104 	movi	r2,4
 80038a8:	20800a26 	beq	r4,r2,80038d4 <__muldf3+0xa4>
 80038ac:	1880cc26 	beq	r3,r2,8003be0 <__muldf3+0x3b0>
 80038b0:	00800084 	movi	r2,2
 80038b4:	20800926 	beq	r4,r2,80038dc <__muldf3+0xac>
 80038b8:	1880191e 	bne	r3,r2,8003920 <__muldf3+0xf0>
 80038bc:	d8c00a17 	ldw	r3,40(sp)
 80038c0:	d8800517 	ldw	r2,20(sp)
 80038c4:	8009883a 	mov	r4,r16
 80038c8:	10c4c03a 	cmpne	r2,r2,r3
 80038cc:	d8800a15 	stw	r2,40(sp)
 80038d0:	00000706 	br	80038f0 <__muldf3+0xc0>
 80038d4:	00800084 	movi	r2,2
 80038d8:	1880c326 	beq	r3,r2,8003be8 <__muldf3+0x3b8>
 80038dc:	d8800517 	ldw	r2,20(sp)
 80038e0:	d8c00a17 	ldw	r3,40(sp)
 80038e4:	8809883a 	mov	r4,r17
 80038e8:	10c4c03a 	cmpne	r2,r2,r3
 80038ec:	d8800515 	stw	r2,20(sp)
 80038f0:	80047f80 	call	80047f8 <__pack_d>
 80038f4:	dfc01f17 	ldw	ra,124(sp)
 80038f8:	ddc01e17 	ldw	r23,120(sp)
 80038fc:	dd801d17 	ldw	r22,116(sp)
 8003900:	dd401c17 	ldw	r21,112(sp)
 8003904:	dd001b17 	ldw	r20,108(sp)
 8003908:	dcc01a17 	ldw	r19,104(sp)
 800390c:	dc801917 	ldw	r18,100(sp)
 8003910:	dc401817 	ldw	r17,96(sp)
 8003914:	dc001717 	ldw	r16,92(sp)
 8003918:	dec02004 	addi	sp,sp,128
 800391c:	f800283a 	ret
 8003920:	dd800717 	ldw	r22,28(sp)
 8003924:	dc800c17 	ldw	r18,48(sp)
 8003928:	002b883a 	mov	r21,zero
 800392c:	0023883a 	mov	r17,zero
 8003930:	a80b883a 	mov	r5,r21
 8003934:	b00d883a 	mov	r6,r22
 8003938:	880f883a 	mov	r7,r17
 800393c:	ddc00817 	ldw	r23,32(sp)
 8003940:	dcc00d17 	ldw	r19,52(sp)
 8003944:	9009883a 	mov	r4,r18
 8003948:	80043e40 	call	80043e4 <__muldi3>
 800394c:	001b883a 	mov	r13,zero
 8003950:	680f883a 	mov	r7,r13
 8003954:	b009883a 	mov	r4,r22
 8003958:	000b883a 	mov	r5,zero
 800395c:	980d883a 	mov	r6,r19
 8003960:	b82d883a 	mov	r22,r23
 8003964:	002f883a 	mov	r23,zero
 8003968:	db401615 	stw	r13,88(sp)
 800396c:	d8801315 	stw	r2,76(sp)
 8003970:	d8c01415 	stw	r3,80(sp)
 8003974:	dcc01515 	stw	r19,84(sp)
 8003978:	80043e40 	call	80043e4 <__muldi3>
 800397c:	b00d883a 	mov	r6,r22
 8003980:	000b883a 	mov	r5,zero
 8003984:	9009883a 	mov	r4,r18
 8003988:	b80f883a 	mov	r7,r23
 800398c:	1021883a 	mov	r16,r2
 8003990:	1823883a 	mov	r17,r3
 8003994:	80043e40 	call	80043e4 <__muldi3>
 8003998:	8085883a 	add	r2,r16,r2
 800399c:	140d803a 	cmpltu	r6,r2,r16
 80039a0:	88c7883a 	add	r3,r17,r3
 80039a4:	30cd883a 	add	r6,r6,r3
 80039a8:	1029883a 	mov	r20,r2
 80039ac:	302b883a 	mov	r21,r6
 80039b0:	da801317 	ldw	r10,76(sp)
 80039b4:	dac01417 	ldw	r11,80(sp)
 80039b8:	db001517 	ldw	r12,84(sp)
 80039bc:	db401617 	ldw	r13,88(sp)
 80039c0:	3440612e 	bgeu	r6,r17,8003b48 <__muldf3+0x318>
 80039c4:	0009883a 	mov	r4,zero
 80039c8:	5105883a 	add	r2,r10,r4
 80039cc:	128d803a 	cmpltu	r6,r2,r10
 80039d0:	5d07883a 	add	r3,r11,r20
 80039d4:	30cd883a 	add	r6,r6,r3
 80039d8:	0021883a 	mov	r16,zero
 80039dc:	04400044 	movi	r17,1
 80039e0:	1025883a 	mov	r18,r2
 80039e4:	3027883a 	mov	r19,r6
 80039e8:	32c06236 	bltu	r6,r11,8003b74 <__muldf3+0x344>
 80039ec:	59807a26 	beq	r11,r6,8003bd8 <__muldf3+0x3a8>
 80039f0:	680b883a 	mov	r5,r13
 80039f4:	b80f883a 	mov	r7,r23
 80039f8:	6009883a 	mov	r4,r12
 80039fc:	b00d883a 	mov	r6,r22
 8003a00:	80043e40 	call	80043e4 <__muldi3>
 8003a04:	1009883a 	mov	r4,r2
 8003a08:	000f883a 	mov	r7,zero
 8003a0c:	1545883a 	add	r2,r2,r21
 8003a10:	1111803a 	cmpltu	r8,r2,r4
 8003a14:	19c7883a 	add	r3,r3,r7
 8003a18:	40c7883a 	add	r3,r8,r3
 8003a1c:	88cb883a 	add	r5,r17,r3
 8003a20:	d8c00617 	ldw	r3,24(sp)
 8003a24:	8089883a 	add	r4,r16,r2
 8003a28:	d8800b17 	ldw	r2,44(sp)
 8003a2c:	18c00104 	addi	r3,r3,4
 8003a30:	240d803a 	cmpltu	r6,r4,r16
 8003a34:	10c7883a 	add	r3,r2,r3
 8003a38:	2013883a 	mov	r9,r4
 8003a3c:	d8800a17 	ldw	r2,40(sp)
 8003a40:	d9000517 	ldw	r4,20(sp)
 8003a44:	314d883a 	add	r6,r6,r5
 8003a48:	3015883a 	mov	r10,r6
 8003a4c:	2088c03a 	cmpne	r4,r4,r2
 8003a50:	00880034 	movhi	r2,8192
 8003a54:	10bfffc4 	addi	r2,r2,-1
 8003a58:	d9000f15 	stw	r4,60(sp)
 8003a5c:	d8c01015 	stw	r3,64(sp)
 8003a60:	1180162e 	bgeu	r2,r6,8003abc <__muldf3+0x28c>
 8003a64:	1811883a 	mov	r8,r3
 8003a68:	101f883a 	mov	r15,r2
 8003a6c:	980497fa 	slli	r2,r19,31
 8003a70:	9016d07a 	srli	r11,r18,1
 8003a74:	500697fa 	slli	r3,r10,31
 8003a78:	480cd07a 	srli	r6,r9,1
 8003a7c:	500ed07a 	srli	r7,r10,1
 8003a80:	12d6b03a 	or	r11,r2,r11
 8003a84:	00800044 	movi	r2,1
 8003a88:	198cb03a 	or	r6,r3,r6
 8003a8c:	4888703a 	and	r4,r9,r2
 8003a90:	9818d07a 	srli	r12,r19,1
 8003a94:	001b883a 	mov	r13,zero
 8003a98:	03a00034 	movhi	r14,32768
 8003a9c:	3013883a 	mov	r9,r6
 8003aa0:	3815883a 	mov	r10,r7
 8003aa4:	4091883a 	add	r8,r8,r2
 8003aa8:	20000226 	beq	r4,zero,8003ab4 <__muldf3+0x284>
 8003aac:	5b64b03a 	or	r18,r11,r13
 8003ab0:	63a6b03a 	or	r19,r12,r14
 8003ab4:	7abfed36 	bltu	r15,r10,8003a6c <__muldf3+0x23c>
 8003ab8:	da001015 	stw	r8,64(sp)
 8003abc:	00840034 	movhi	r2,4096
 8003ac0:	10bfffc4 	addi	r2,r2,-1
 8003ac4:	12801436 	bltu	r2,r10,8003b18 <__muldf3+0x2e8>
 8003ac8:	da001017 	ldw	r8,64(sp)
 8003acc:	101f883a 	mov	r15,r2
 8003ad0:	4a45883a 	add	r2,r9,r9
 8003ad4:	124d803a 	cmpltu	r6,r2,r9
 8003ad8:	5287883a 	add	r3,r10,r10
 8003adc:	9497883a 	add	r11,r18,r18
 8003ae0:	5c8f803a 	cmpltu	r7,r11,r18
 8003ae4:	9cd9883a 	add	r12,r19,r19
 8003ae8:	01000044 	movi	r4,1
 8003aec:	30cd883a 	add	r6,r6,r3
 8003af0:	3b0f883a 	add	r7,r7,r12
 8003af4:	423fffc4 	addi	r8,r8,-1
 8003af8:	1013883a 	mov	r9,r2
 8003afc:	3015883a 	mov	r10,r6
 8003b00:	111ab03a 	or	r13,r2,r4
 8003b04:	98003016 	blt	r19,zero,8003bc8 <__muldf3+0x398>
 8003b08:	5825883a 	mov	r18,r11
 8003b0c:	3827883a 	mov	r19,r7
 8003b10:	7abfef2e 	bgeu	r15,r10,8003ad0 <__muldf3+0x2a0>
 8003b14:	da001015 	stw	r8,64(sp)
 8003b18:	00803fc4 	movi	r2,255
 8003b1c:	488e703a 	and	r7,r9,r2
 8003b20:	00802004 	movi	r2,128
 8003b24:	0007883a 	mov	r3,zero
 8003b28:	0011883a 	mov	r8,zero
 8003b2c:	38801826 	beq	r7,r2,8003b90 <__muldf3+0x360>
 8003b30:	008000c4 	movi	r2,3
 8003b34:	d9000e04 	addi	r4,sp,56
 8003b38:	da801215 	stw	r10,72(sp)
 8003b3c:	d8800e15 	stw	r2,56(sp)
 8003b40:	da401115 	stw	r9,68(sp)
 8003b44:	003f6a06 	br	80038f0 <__muldf3+0xc0>
 8003b48:	89802126 	beq	r17,r6,8003bd0 <__muldf3+0x3a0>
 8003b4c:	0009883a 	mov	r4,zero
 8003b50:	5105883a 	add	r2,r10,r4
 8003b54:	128d803a 	cmpltu	r6,r2,r10
 8003b58:	5d07883a 	add	r3,r11,r20
 8003b5c:	30cd883a 	add	r6,r6,r3
 8003b60:	0021883a 	mov	r16,zero
 8003b64:	0023883a 	mov	r17,zero
 8003b68:	1025883a 	mov	r18,r2
 8003b6c:	3027883a 	mov	r19,r6
 8003b70:	32ff9e2e 	bgeu	r6,r11,80039ec <__muldf3+0x1bc>
 8003b74:	00800044 	movi	r2,1
 8003b78:	8089883a 	add	r4,r16,r2
 8003b7c:	240d803a 	cmpltu	r6,r4,r16
 8003b80:	344d883a 	add	r6,r6,r17
 8003b84:	2021883a 	mov	r16,r4
 8003b88:	3023883a 	mov	r17,r6
 8003b8c:	003f9806 	br	80039f0 <__muldf3+0x1c0>
 8003b90:	403fe71e 	bne	r8,zero,8003b30 <__muldf3+0x300>
 8003b94:	01004004 	movi	r4,256
 8003b98:	4904703a 	and	r2,r9,r4
 8003b9c:	10c4b03a 	or	r2,r2,r3
 8003ba0:	103fe31e 	bne	r2,zero,8003b30 <__muldf3+0x300>
 8003ba4:	94c4b03a 	or	r2,r18,r19
 8003ba8:	103fe126 	beq	r2,zero,8003b30 <__muldf3+0x300>
 8003bac:	49c5883a 	add	r2,r9,r7
 8003bb0:	1251803a 	cmpltu	r8,r2,r9
 8003bb4:	4291883a 	add	r8,r8,r10
 8003bb8:	013fc004 	movi	r4,-256
 8003bbc:	1112703a 	and	r9,r2,r4
 8003bc0:	4015883a 	mov	r10,r8
 8003bc4:	003fda06 	br	8003b30 <__muldf3+0x300>
 8003bc8:	6813883a 	mov	r9,r13
 8003bcc:	003fce06 	br	8003b08 <__muldf3+0x2d8>
 8003bd0:	143f7c36 	bltu	r2,r16,80039c4 <__muldf3+0x194>
 8003bd4:	003fdd06 	br	8003b4c <__muldf3+0x31c>
 8003bd8:	12bf852e 	bgeu	r2,r10,80039f0 <__muldf3+0x1c0>
 8003bdc:	003fe506 	br	8003b74 <__muldf3+0x344>
 8003be0:	00800084 	movi	r2,2
 8003be4:	20bf351e 	bne	r4,r2,80038bc <__muldf3+0x8c>
 8003be8:	01020074 	movhi	r4,2049
 8003bec:	21065d04 	addi	r4,r4,6516
 8003bf0:	003f3f06 	br	80038f0 <__muldf3+0xc0>

08003bf4 <__divdf3>:
 8003bf4:	deffed04 	addi	sp,sp,-76
 8003bf8:	dcc01115 	stw	r19,68(sp)
 8003bfc:	dcc00404 	addi	r19,sp,16
 8003c00:	2011883a 	mov	r8,r4
 8003c04:	2813883a 	mov	r9,r5
 8003c08:	dc000e15 	stw	r16,56(sp)
 8003c0c:	d809883a 	mov	r4,sp
 8003c10:	980b883a 	mov	r5,r19
 8003c14:	dc000904 	addi	r16,sp,36
 8003c18:	dfc01215 	stw	ra,72(sp)
 8003c1c:	da400115 	stw	r9,4(sp)
 8003c20:	d9c00315 	stw	r7,12(sp)
 8003c24:	da000015 	stw	r8,0(sp)
 8003c28:	d9800215 	stw	r6,8(sp)
 8003c2c:	dc801015 	stw	r18,64(sp)
 8003c30:	dc400f15 	stw	r17,60(sp)
 8003c34:	8004b0c0 	call	8004b0c <__unpack_d>
 8003c38:	d9000204 	addi	r4,sp,8
 8003c3c:	800b883a 	mov	r5,r16
 8003c40:	8004b0c0 	call	8004b0c <__unpack_d>
 8003c44:	d9000417 	ldw	r4,16(sp)
 8003c48:	00800044 	movi	r2,1
 8003c4c:	11000b2e 	bgeu	r2,r4,8003c7c <__divdf3+0x88>
 8003c50:	d9400917 	ldw	r5,36(sp)
 8003c54:	1140762e 	bgeu	r2,r5,8003e30 <__divdf3+0x23c>
 8003c58:	d8800517 	ldw	r2,20(sp)
 8003c5c:	d8c00a17 	ldw	r3,40(sp)
 8003c60:	01800104 	movi	r6,4
 8003c64:	10c4f03a 	xor	r2,r2,r3
 8003c68:	d8800515 	stw	r2,20(sp)
 8003c6c:	21800226 	beq	r4,r6,8003c78 <__divdf3+0x84>
 8003c70:	00800084 	movi	r2,2
 8003c74:	2080141e 	bne	r4,r2,8003cc8 <__divdf3+0xd4>
 8003c78:	29000926 	beq	r5,r4,8003ca0 <__divdf3+0xac>
 8003c7c:	9809883a 	mov	r4,r19
 8003c80:	80047f80 	call	80047f8 <__pack_d>
 8003c84:	dfc01217 	ldw	ra,72(sp)
 8003c88:	dcc01117 	ldw	r19,68(sp)
 8003c8c:	dc801017 	ldw	r18,64(sp)
 8003c90:	dc400f17 	ldw	r17,60(sp)
 8003c94:	dc000e17 	ldw	r16,56(sp)
 8003c98:	dec01304 	addi	sp,sp,76
 8003c9c:	f800283a 	ret
 8003ca0:	01020074 	movhi	r4,2049
 8003ca4:	21065d04 	addi	r4,r4,6516
 8003ca8:	80047f80 	call	80047f8 <__pack_d>
 8003cac:	dfc01217 	ldw	ra,72(sp)
 8003cb0:	dcc01117 	ldw	r19,68(sp)
 8003cb4:	dc801017 	ldw	r18,64(sp)
 8003cb8:	dc400f17 	ldw	r17,60(sp)
 8003cbc:	dc000e17 	ldw	r16,56(sp)
 8003cc0:	dec01304 	addi	sp,sp,76
 8003cc4:	f800283a 	ret
 8003cc8:	29805b26 	beq	r5,r6,8003e38 <__divdf3+0x244>
 8003ccc:	28802d26 	beq	r5,r2,8003d84 <__divdf3+0x190>
 8003cd0:	d8c00617 	ldw	r3,24(sp)
 8003cd4:	d8800b17 	ldw	r2,44(sp)
 8003cd8:	d9c00817 	ldw	r7,32(sp)
 8003cdc:	dc400d17 	ldw	r17,52(sp)
 8003ce0:	188bc83a 	sub	r5,r3,r2
 8003ce4:	d9800717 	ldw	r6,28(sp)
 8003ce8:	dc000c17 	ldw	r16,48(sp)
 8003cec:	d9400615 	stw	r5,24(sp)
 8003cf0:	3c403836 	bltu	r7,r17,8003dd4 <__divdf3+0x1e0>
 8003cf4:	89c03626 	beq	r17,r7,8003dd0 <__divdf3+0x1dc>
 8003cf8:	0015883a 	mov	r10,zero
 8003cfc:	001d883a 	mov	r14,zero
 8003d00:	02c40034 	movhi	r11,4096
 8003d04:	001f883a 	mov	r15,zero
 8003d08:	003f883a 	mov	ra,zero
 8003d0c:	04800f44 	movi	r18,61
 8003d10:	00000f06 	br	8003d50 <__divdf3+0x15c>
 8003d14:	601d883a 	mov	r14,r12
 8003d18:	681f883a 	mov	r15,r13
 8003d1c:	400d883a 	mov	r6,r8
 8003d20:	100f883a 	mov	r7,r2
 8003d24:	3191883a 	add	r8,r6,r6
 8003d28:	5808d07a 	srli	r4,r11,1
 8003d2c:	4185803a 	cmpltu	r2,r8,r6
 8003d30:	39d3883a 	add	r9,r7,r7
 8003d34:	28c6b03a 	or	r3,r5,r3
 8003d38:	1245883a 	add	r2,r2,r9
 8003d3c:	1815883a 	mov	r10,r3
 8003d40:	2017883a 	mov	r11,r4
 8003d44:	400d883a 	mov	r6,r8
 8003d48:	100f883a 	mov	r7,r2
 8003d4c:	fc801726 	beq	ra,r18,8003dac <__divdf3+0x1b8>
 8003d50:	580a97fa 	slli	r5,r11,31
 8003d54:	5006d07a 	srli	r3,r10,1
 8003d58:	ffc00044 	addi	ra,ra,1
 8003d5c:	3c7ff136 	bltu	r7,r17,8003d24 <__divdf3+0x130>
 8003d60:	3411c83a 	sub	r8,r6,r16
 8003d64:	3205803a 	cmpltu	r2,r6,r8
 8003d68:	3c53c83a 	sub	r9,r7,r17
 8003d6c:	7298b03a 	or	r12,r14,r10
 8003d70:	7adab03a 	or	r13,r15,r11
 8003d74:	4885c83a 	sub	r2,r9,r2
 8003d78:	89ffe61e 	bne	r17,r7,8003d14 <__divdf3+0x120>
 8003d7c:	343fe936 	bltu	r6,r16,8003d24 <__divdf3+0x130>
 8003d80:	003fe406 	br	8003d14 <__divdf3+0x120>
 8003d84:	9809883a 	mov	r4,r19
 8003d88:	d9800415 	stw	r6,16(sp)
 8003d8c:	80047f80 	call	80047f8 <__pack_d>
 8003d90:	dfc01217 	ldw	ra,72(sp)
 8003d94:	dcc01117 	ldw	r19,68(sp)
 8003d98:	dc801017 	ldw	r18,64(sp)
 8003d9c:	dc400f17 	ldw	r17,60(sp)
 8003da0:	dc000e17 	ldw	r16,56(sp)
 8003da4:	dec01304 	addi	sp,sp,76
 8003da8:	f800283a 	ret
 8003dac:	00803fc4 	movi	r2,255
 8003db0:	7090703a 	and	r8,r14,r2
 8003db4:	00802004 	movi	r2,128
 8003db8:	0007883a 	mov	r3,zero
 8003dbc:	0013883a 	mov	r9,zero
 8003dc0:	40800d26 	beq	r8,r2,8003df8 <__divdf3+0x204>
 8003dc4:	dbc00815 	stw	r15,32(sp)
 8003dc8:	db800715 	stw	r14,28(sp)
 8003dcc:	003fab06 	br	8003c7c <__divdf3+0x88>
 8003dd0:	343fc92e 	bgeu	r6,r16,8003cf8 <__divdf3+0x104>
 8003dd4:	3185883a 	add	r2,r6,r6
 8003dd8:	1189803a 	cmpltu	r4,r2,r6
 8003ddc:	39c7883a 	add	r3,r7,r7
 8003de0:	20c9883a 	add	r4,r4,r3
 8003de4:	297fffc4 	addi	r5,r5,-1
 8003de8:	100d883a 	mov	r6,r2
 8003dec:	200f883a 	mov	r7,r4
 8003df0:	d9400615 	stw	r5,24(sp)
 8003df4:	003fc006 	br	8003cf8 <__divdf3+0x104>
 8003df8:	483ff21e 	bne	r9,zero,8003dc4 <__divdf3+0x1d0>
 8003dfc:	01004004 	movi	r4,256
 8003e00:	7104703a 	and	r2,r14,r4
 8003e04:	10c4b03a 	or	r2,r2,r3
 8003e08:	103fee1e 	bne	r2,zero,8003dc4 <__divdf3+0x1d0>
 8003e0c:	31c4b03a 	or	r2,r6,r7
 8003e10:	103fec26 	beq	r2,zero,8003dc4 <__divdf3+0x1d0>
 8003e14:	7205883a 	add	r2,r14,r8
 8003e18:	1391803a 	cmpltu	r8,r2,r14
 8003e1c:	43d1883a 	add	r8,r8,r15
 8003e20:	013fc004 	movi	r4,-256
 8003e24:	111c703a 	and	r14,r2,r4
 8003e28:	401f883a 	mov	r15,r8
 8003e2c:	003fe506 	br	8003dc4 <__divdf3+0x1d0>
 8003e30:	8009883a 	mov	r4,r16
 8003e34:	003f9206 	br	8003c80 <__divdf3+0x8c>
 8003e38:	9809883a 	mov	r4,r19
 8003e3c:	d8000715 	stw	zero,28(sp)
 8003e40:	d8000815 	stw	zero,32(sp)
 8003e44:	d8000615 	stw	zero,24(sp)
 8003e48:	003f8d06 	br	8003c80 <__divdf3+0x8c>

08003e4c <__eqdf2>:
 8003e4c:	deffef04 	addi	sp,sp,-68
 8003e50:	dc400f15 	stw	r17,60(sp)
 8003e54:	dc400404 	addi	r17,sp,16
 8003e58:	2005883a 	mov	r2,r4
 8003e5c:	2807883a 	mov	r3,r5
 8003e60:	dc000e15 	stw	r16,56(sp)
 8003e64:	d809883a 	mov	r4,sp
 8003e68:	880b883a 	mov	r5,r17
 8003e6c:	dc000904 	addi	r16,sp,36
 8003e70:	d8c00115 	stw	r3,4(sp)
 8003e74:	d8800015 	stw	r2,0(sp)
 8003e78:	d9800215 	stw	r6,8(sp)
 8003e7c:	dfc01015 	stw	ra,64(sp)
 8003e80:	d9c00315 	stw	r7,12(sp)
 8003e84:	8004b0c0 	call	8004b0c <__unpack_d>
 8003e88:	d9000204 	addi	r4,sp,8
 8003e8c:	800b883a 	mov	r5,r16
 8003e90:	8004b0c0 	call	8004b0c <__unpack_d>
 8003e94:	d8800417 	ldw	r2,16(sp)
 8003e98:	00c00044 	movi	r3,1
 8003e9c:	180d883a 	mov	r6,r3
 8003ea0:	1880062e 	bgeu	r3,r2,8003ebc <__eqdf2+0x70>
 8003ea4:	d8800917 	ldw	r2,36(sp)
 8003ea8:	8809883a 	mov	r4,r17
 8003eac:	800b883a 	mov	r5,r16
 8003eb0:	1880022e 	bgeu	r3,r2,8003ebc <__eqdf2+0x70>
 8003eb4:	8004c440 	call	8004c44 <__fpcmp_parts_d>
 8003eb8:	100d883a 	mov	r6,r2
 8003ebc:	3005883a 	mov	r2,r6
 8003ec0:	dfc01017 	ldw	ra,64(sp)
 8003ec4:	dc400f17 	ldw	r17,60(sp)
 8003ec8:	dc000e17 	ldw	r16,56(sp)
 8003ecc:	dec01104 	addi	sp,sp,68
 8003ed0:	f800283a 	ret

08003ed4 <__nedf2>:
 8003ed4:	deffef04 	addi	sp,sp,-68
 8003ed8:	dc400f15 	stw	r17,60(sp)
 8003edc:	dc400404 	addi	r17,sp,16
 8003ee0:	2005883a 	mov	r2,r4
 8003ee4:	2807883a 	mov	r3,r5
 8003ee8:	dc000e15 	stw	r16,56(sp)
 8003eec:	d809883a 	mov	r4,sp
 8003ef0:	880b883a 	mov	r5,r17
 8003ef4:	dc000904 	addi	r16,sp,36
 8003ef8:	d8c00115 	stw	r3,4(sp)
 8003efc:	d8800015 	stw	r2,0(sp)
 8003f00:	d9800215 	stw	r6,8(sp)
 8003f04:	dfc01015 	stw	ra,64(sp)
 8003f08:	d9c00315 	stw	r7,12(sp)
 8003f0c:	8004b0c0 	call	8004b0c <__unpack_d>
 8003f10:	d9000204 	addi	r4,sp,8
 8003f14:	800b883a 	mov	r5,r16
 8003f18:	8004b0c0 	call	8004b0c <__unpack_d>
 8003f1c:	d8800417 	ldw	r2,16(sp)
 8003f20:	00c00044 	movi	r3,1
 8003f24:	180d883a 	mov	r6,r3
 8003f28:	1880062e 	bgeu	r3,r2,8003f44 <__nedf2+0x70>
 8003f2c:	d8800917 	ldw	r2,36(sp)
 8003f30:	8809883a 	mov	r4,r17
 8003f34:	800b883a 	mov	r5,r16
 8003f38:	1880022e 	bgeu	r3,r2,8003f44 <__nedf2+0x70>
 8003f3c:	8004c440 	call	8004c44 <__fpcmp_parts_d>
 8003f40:	100d883a 	mov	r6,r2
 8003f44:	3005883a 	mov	r2,r6
 8003f48:	dfc01017 	ldw	ra,64(sp)
 8003f4c:	dc400f17 	ldw	r17,60(sp)
 8003f50:	dc000e17 	ldw	r16,56(sp)
 8003f54:	dec01104 	addi	sp,sp,68
 8003f58:	f800283a 	ret

08003f5c <__gtdf2>:
 8003f5c:	deffef04 	addi	sp,sp,-68
 8003f60:	dc400f15 	stw	r17,60(sp)
 8003f64:	dc400404 	addi	r17,sp,16
 8003f68:	2005883a 	mov	r2,r4
 8003f6c:	2807883a 	mov	r3,r5
 8003f70:	dc000e15 	stw	r16,56(sp)
 8003f74:	d809883a 	mov	r4,sp
 8003f78:	880b883a 	mov	r5,r17
 8003f7c:	dc000904 	addi	r16,sp,36
 8003f80:	d8c00115 	stw	r3,4(sp)
 8003f84:	d8800015 	stw	r2,0(sp)
 8003f88:	d9800215 	stw	r6,8(sp)
 8003f8c:	dfc01015 	stw	ra,64(sp)
 8003f90:	d9c00315 	stw	r7,12(sp)
 8003f94:	8004b0c0 	call	8004b0c <__unpack_d>
 8003f98:	d9000204 	addi	r4,sp,8
 8003f9c:	800b883a 	mov	r5,r16
 8003fa0:	8004b0c0 	call	8004b0c <__unpack_d>
 8003fa4:	d8800417 	ldw	r2,16(sp)
 8003fa8:	00c00044 	movi	r3,1
 8003fac:	01bfffc4 	movi	r6,-1
 8003fb0:	1880062e 	bgeu	r3,r2,8003fcc <__gtdf2+0x70>
 8003fb4:	d8800917 	ldw	r2,36(sp)
 8003fb8:	8809883a 	mov	r4,r17
 8003fbc:	800b883a 	mov	r5,r16
 8003fc0:	1880022e 	bgeu	r3,r2,8003fcc <__gtdf2+0x70>
 8003fc4:	8004c440 	call	8004c44 <__fpcmp_parts_d>
 8003fc8:	100d883a 	mov	r6,r2
 8003fcc:	3005883a 	mov	r2,r6
 8003fd0:	dfc01017 	ldw	ra,64(sp)
 8003fd4:	dc400f17 	ldw	r17,60(sp)
 8003fd8:	dc000e17 	ldw	r16,56(sp)
 8003fdc:	dec01104 	addi	sp,sp,68
 8003fe0:	f800283a 	ret

08003fe4 <__ltdf2>:
 8003fe4:	deffef04 	addi	sp,sp,-68
 8003fe8:	dc400f15 	stw	r17,60(sp)
 8003fec:	dc400404 	addi	r17,sp,16
 8003ff0:	2005883a 	mov	r2,r4
 8003ff4:	2807883a 	mov	r3,r5
 8003ff8:	dc000e15 	stw	r16,56(sp)
 8003ffc:	d809883a 	mov	r4,sp
 8004000:	880b883a 	mov	r5,r17
 8004004:	dc000904 	addi	r16,sp,36
 8004008:	d8c00115 	stw	r3,4(sp)
 800400c:	d8800015 	stw	r2,0(sp)
 8004010:	d9800215 	stw	r6,8(sp)
 8004014:	dfc01015 	stw	ra,64(sp)
 8004018:	d9c00315 	stw	r7,12(sp)
 800401c:	8004b0c0 	call	8004b0c <__unpack_d>
 8004020:	d9000204 	addi	r4,sp,8
 8004024:	800b883a 	mov	r5,r16
 8004028:	8004b0c0 	call	8004b0c <__unpack_d>
 800402c:	d8800417 	ldw	r2,16(sp)
 8004030:	00c00044 	movi	r3,1
 8004034:	180d883a 	mov	r6,r3
 8004038:	1880062e 	bgeu	r3,r2,8004054 <__ltdf2+0x70>
 800403c:	d8800917 	ldw	r2,36(sp)
 8004040:	8809883a 	mov	r4,r17
 8004044:	800b883a 	mov	r5,r16
 8004048:	1880022e 	bgeu	r3,r2,8004054 <__ltdf2+0x70>
 800404c:	8004c440 	call	8004c44 <__fpcmp_parts_d>
 8004050:	100d883a 	mov	r6,r2
 8004054:	3005883a 	mov	r2,r6
 8004058:	dfc01017 	ldw	ra,64(sp)
 800405c:	dc400f17 	ldw	r17,60(sp)
 8004060:	dc000e17 	ldw	r16,56(sp)
 8004064:	dec01104 	addi	sp,sp,68
 8004068:	f800283a 	ret

0800406c <__ledf2>:
 800406c:	deffef04 	addi	sp,sp,-68
 8004070:	dc400f15 	stw	r17,60(sp)
 8004074:	dc400404 	addi	r17,sp,16
 8004078:	2005883a 	mov	r2,r4
 800407c:	2807883a 	mov	r3,r5
 8004080:	dc000e15 	stw	r16,56(sp)
 8004084:	d809883a 	mov	r4,sp
 8004088:	880b883a 	mov	r5,r17
 800408c:	dc000904 	addi	r16,sp,36
 8004090:	d8c00115 	stw	r3,4(sp)
 8004094:	d8800015 	stw	r2,0(sp)
 8004098:	d9800215 	stw	r6,8(sp)
 800409c:	dfc01015 	stw	ra,64(sp)
 80040a0:	d9c00315 	stw	r7,12(sp)
 80040a4:	8004b0c0 	call	8004b0c <__unpack_d>
 80040a8:	d9000204 	addi	r4,sp,8
 80040ac:	800b883a 	mov	r5,r16
 80040b0:	8004b0c0 	call	8004b0c <__unpack_d>
 80040b4:	d8800417 	ldw	r2,16(sp)
 80040b8:	00c00044 	movi	r3,1
 80040bc:	180d883a 	mov	r6,r3
 80040c0:	1880062e 	bgeu	r3,r2,80040dc <__ledf2+0x70>
 80040c4:	d8800917 	ldw	r2,36(sp)
 80040c8:	8809883a 	mov	r4,r17
 80040cc:	800b883a 	mov	r5,r16
 80040d0:	1880022e 	bgeu	r3,r2,80040dc <__ledf2+0x70>
 80040d4:	8004c440 	call	8004c44 <__fpcmp_parts_d>
 80040d8:	100d883a 	mov	r6,r2
 80040dc:	3005883a 	mov	r2,r6
 80040e0:	dfc01017 	ldw	ra,64(sp)
 80040e4:	dc400f17 	ldw	r17,60(sp)
 80040e8:	dc000e17 	ldw	r16,56(sp)
 80040ec:	dec01104 	addi	sp,sp,68
 80040f0:	f800283a 	ret

080040f4 <__floatsidf>:
 80040f4:	2006d7fa 	srli	r3,r4,31
 80040f8:	defff604 	addi	sp,sp,-40
 80040fc:	008000c4 	movi	r2,3
 8004100:	dfc00915 	stw	ra,36(sp)
 8004104:	dcc00815 	stw	r19,32(sp)
 8004108:	dc800715 	stw	r18,28(sp)
 800410c:	dc400615 	stw	r17,24(sp)
 8004110:	dc000515 	stw	r16,20(sp)
 8004114:	d8800015 	stw	r2,0(sp)
 8004118:	d8c00115 	stw	r3,4(sp)
 800411c:	20000f1e 	bne	r4,zero,800415c <__floatsidf+0x68>
 8004120:	00800084 	movi	r2,2
 8004124:	d8800015 	stw	r2,0(sp)
 8004128:	d809883a 	mov	r4,sp
 800412c:	80047f80 	call	80047f8 <__pack_d>
 8004130:	1009883a 	mov	r4,r2
 8004134:	180b883a 	mov	r5,r3
 8004138:	2005883a 	mov	r2,r4
 800413c:	2807883a 	mov	r3,r5
 8004140:	dfc00917 	ldw	ra,36(sp)
 8004144:	dcc00817 	ldw	r19,32(sp)
 8004148:	dc800717 	ldw	r18,28(sp)
 800414c:	dc400617 	ldw	r17,24(sp)
 8004150:	dc000517 	ldw	r16,20(sp)
 8004154:	dec00a04 	addi	sp,sp,40
 8004158:	f800283a 	ret
 800415c:	00800f04 	movi	r2,60
 8004160:	1807003a 	cmpeq	r3,r3,zero
 8004164:	d8800215 	stw	r2,8(sp)
 8004168:	18001126 	beq	r3,zero,80041b0 <__floatsidf+0xbc>
 800416c:	0027883a 	mov	r19,zero
 8004170:	2025883a 	mov	r18,r4
 8004174:	d9000315 	stw	r4,12(sp)
 8004178:	dcc00415 	stw	r19,16(sp)
 800417c:	800447c0 	call	800447c <__clzsi2>
 8004180:	11000744 	addi	r4,r2,29
 8004184:	013fe80e 	bge	zero,r4,8004128 <__floatsidf+0x34>
 8004188:	10bfff44 	addi	r2,r2,-3
 800418c:	10000c16 	blt	r2,zero,80041c0 <__floatsidf+0xcc>
 8004190:	90a2983a 	sll	r17,r18,r2
 8004194:	0021883a 	mov	r16,zero
 8004198:	d8800217 	ldw	r2,8(sp)
 800419c:	dc400415 	stw	r17,16(sp)
 80041a0:	dc000315 	stw	r16,12(sp)
 80041a4:	1105c83a 	sub	r2,r2,r4
 80041a8:	d8800215 	stw	r2,8(sp)
 80041ac:	003fde06 	br	8004128 <__floatsidf+0x34>
 80041b0:	00a00034 	movhi	r2,32768
 80041b4:	20800a26 	beq	r4,r2,80041e0 <__floatsidf+0xec>
 80041b8:	0109c83a 	sub	r4,zero,r4
 80041bc:	003feb06 	br	800416c <__floatsidf+0x78>
 80041c0:	9006d07a 	srli	r3,r18,1
 80041c4:	008007c4 	movi	r2,31
 80041c8:	1105c83a 	sub	r2,r2,r4
 80041cc:	1886d83a 	srl	r3,r3,r2
 80041d0:	9922983a 	sll	r17,r19,r4
 80041d4:	9120983a 	sll	r16,r18,r4
 80041d8:	1c62b03a 	or	r17,r3,r17
 80041dc:	003fee06 	br	8004198 <__floatsidf+0xa4>
 80041e0:	0009883a 	mov	r4,zero
 80041e4:	01707834 	movhi	r5,49632
 80041e8:	003fd306 	br	8004138 <__floatsidf+0x44>

080041ec <__make_dp>:
 80041ec:	defff904 	addi	sp,sp,-28
 80041f0:	d8c00717 	ldw	r3,28(sp)
 80041f4:	d9000015 	stw	r4,0(sp)
 80041f8:	d809883a 	mov	r4,sp
 80041fc:	dfc00515 	stw	ra,20(sp)
 8004200:	d9c00615 	stw	r7,24(sp)
 8004204:	d9400115 	stw	r5,4(sp)
 8004208:	d9800215 	stw	r6,8(sp)
 800420c:	d8c00415 	stw	r3,16(sp)
 8004210:	d9c00315 	stw	r7,12(sp)
 8004214:	80047f80 	call	80047f8 <__pack_d>
 8004218:	dfc00517 	ldw	ra,20(sp)
 800421c:	dec00704 	addi	sp,sp,28
 8004220:	f800283a 	ret

08004224 <__truncdfsf2>:
 8004224:	defff804 	addi	sp,sp,-32
 8004228:	2005883a 	mov	r2,r4
 800422c:	2807883a 	mov	r3,r5
 8004230:	d809883a 	mov	r4,sp
 8004234:	d9400204 	addi	r5,sp,8
 8004238:	d8c00115 	stw	r3,4(sp)
 800423c:	d8800015 	stw	r2,0(sp)
 8004240:	dfc00715 	stw	ra,28(sp)
 8004244:	8004b0c0 	call	8004b0c <__unpack_d>
 8004248:	d9c00517 	ldw	r7,20(sp)
 800424c:	da000617 	ldw	r8,24(sp)
 8004250:	02d00034 	movhi	r11,16384
 8004254:	5affffc4 	addi	r11,r11,-1
 8004258:	3812d7ba 	srli	r9,r7,30
 800425c:	401a90ba 	slli	r13,r8,2
 8004260:	3ac4703a 	and	r2,r7,r11
 8004264:	0007883a 	mov	r3,zero
 8004268:	6a52b03a 	or	r9,r13,r9
 800426c:	10c4b03a 	or	r2,r2,r3
 8004270:	d9000217 	ldw	r4,8(sp)
 8004274:	d9400317 	ldw	r5,12(sp)
 8004278:	d9800417 	ldw	r6,16(sp)
 800427c:	480f883a 	mov	r7,r9
 8004280:	10000126 	beq	r2,zero,8004288 <__truncdfsf2+0x64>
 8004284:	49c00054 	ori	r7,r9,1
 8004288:	80047cc0 	call	80047cc <__make_fp>
 800428c:	dfc00717 	ldw	ra,28(sp)
 8004290:	dec00804 	addi	sp,sp,32
 8004294:	f800283a 	ret

08004298 <udivmodsi4>:
 8004298:	29001b2e 	bgeu	r5,r4,8004308 <udivmodsi4+0x70>
 800429c:	28001a16 	blt	r5,zero,8004308 <udivmodsi4+0x70>
 80042a0:	00800044 	movi	r2,1
 80042a4:	0007883a 	mov	r3,zero
 80042a8:	01c007c4 	movi	r7,31
 80042ac:	00000306 	br	80042bc <udivmodsi4+0x24>
 80042b0:	19c01326 	beq	r3,r7,8004300 <udivmodsi4+0x68>
 80042b4:	18c00044 	addi	r3,r3,1
 80042b8:	28000416 	blt	r5,zero,80042cc <udivmodsi4+0x34>
 80042bc:	294b883a 	add	r5,r5,r5
 80042c0:	1085883a 	add	r2,r2,r2
 80042c4:	293ffa36 	bltu	r5,r4,80042b0 <udivmodsi4+0x18>
 80042c8:	10000d26 	beq	r2,zero,8004300 <udivmodsi4+0x68>
 80042cc:	0007883a 	mov	r3,zero
 80042d0:	21400236 	bltu	r4,r5,80042dc <udivmodsi4+0x44>
 80042d4:	2149c83a 	sub	r4,r4,r5
 80042d8:	1886b03a 	or	r3,r3,r2
 80042dc:	1004d07a 	srli	r2,r2,1
 80042e0:	280ad07a 	srli	r5,r5,1
 80042e4:	103ffa1e 	bne	r2,zero,80042d0 <udivmodsi4+0x38>
 80042e8:	30000226 	beq	r6,zero,80042f4 <udivmodsi4+0x5c>
 80042ec:	2005883a 	mov	r2,r4
 80042f0:	f800283a 	ret
 80042f4:	1809883a 	mov	r4,r3
 80042f8:	2005883a 	mov	r2,r4
 80042fc:	f800283a 	ret
 8004300:	0007883a 	mov	r3,zero
 8004304:	003ff806 	br	80042e8 <udivmodsi4+0x50>
 8004308:	00800044 	movi	r2,1
 800430c:	0007883a 	mov	r3,zero
 8004310:	003fef06 	br	80042d0 <udivmodsi4+0x38>

08004314 <__divsi3>:
 8004314:	defffe04 	addi	sp,sp,-8
 8004318:	dc000015 	stw	r16,0(sp)
 800431c:	dfc00115 	stw	ra,4(sp)
 8004320:	0021883a 	mov	r16,zero
 8004324:	20000c16 	blt	r4,zero,8004358 <__divsi3+0x44>
 8004328:	000d883a 	mov	r6,zero
 800432c:	28000e16 	blt	r5,zero,8004368 <__divsi3+0x54>
 8004330:	80042980 	call	8004298 <udivmodsi4>
 8004334:	1007883a 	mov	r3,r2
 8004338:	8005003a 	cmpeq	r2,r16,zero
 800433c:	1000011e 	bne	r2,zero,8004344 <__divsi3+0x30>
 8004340:	00c7c83a 	sub	r3,zero,r3
 8004344:	1805883a 	mov	r2,r3
 8004348:	dfc00117 	ldw	ra,4(sp)
 800434c:	dc000017 	ldw	r16,0(sp)
 8004350:	dec00204 	addi	sp,sp,8
 8004354:	f800283a 	ret
 8004358:	0109c83a 	sub	r4,zero,r4
 800435c:	04000044 	movi	r16,1
 8004360:	000d883a 	mov	r6,zero
 8004364:	283ff20e 	bge	r5,zero,8004330 <__divsi3+0x1c>
 8004368:	014bc83a 	sub	r5,zero,r5
 800436c:	8021003a 	cmpeq	r16,r16,zero
 8004370:	003fef06 	br	8004330 <__divsi3+0x1c>

08004374 <__modsi3>:
 8004374:	deffff04 	addi	sp,sp,-4
 8004378:	dfc00015 	stw	ra,0(sp)
 800437c:	01800044 	movi	r6,1
 8004380:	2807883a 	mov	r3,r5
 8004384:	20000416 	blt	r4,zero,8004398 <__modsi3+0x24>
 8004388:	28000c16 	blt	r5,zero,80043bc <__modsi3+0x48>
 800438c:	dfc00017 	ldw	ra,0(sp)
 8004390:	dec00104 	addi	sp,sp,4
 8004394:	80042981 	jmpi	8004298 <udivmodsi4>
 8004398:	0109c83a 	sub	r4,zero,r4
 800439c:	28000b16 	blt	r5,zero,80043cc <__modsi3+0x58>
 80043a0:	180b883a 	mov	r5,r3
 80043a4:	01800044 	movi	r6,1
 80043a8:	80042980 	call	8004298 <udivmodsi4>
 80043ac:	0085c83a 	sub	r2,zero,r2
 80043b0:	dfc00017 	ldw	ra,0(sp)
 80043b4:	dec00104 	addi	sp,sp,4
 80043b8:	f800283a 	ret
 80043bc:	014bc83a 	sub	r5,zero,r5
 80043c0:	dfc00017 	ldw	ra,0(sp)
 80043c4:	dec00104 	addi	sp,sp,4
 80043c8:	80042981 	jmpi	8004298 <udivmodsi4>
 80043cc:	0147c83a 	sub	r3,zero,r5
 80043d0:	003ff306 	br	80043a0 <__modsi3+0x2c>

080043d4 <__udivsi3>:
 80043d4:	000d883a 	mov	r6,zero
 80043d8:	80042981 	jmpi	8004298 <udivmodsi4>

080043dc <__umodsi3>:
 80043dc:	01800044 	movi	r6,1
 80043e0:	80042981 	jmpi	8004298 <udivmodsi4>

080043e4 <__muldi3>:
 80043e4:	2011883a 	mov	r8,r4
 80043e8:	427fffcc 	andi	r9,r8,65535
 80043ec:	4018d43a 	srli	r12,r8,16
 80043f0:	32bfffcc 	andi	r10,r6,65535
 80043f4:	3016d43a 	srli	r11,r6,16
 80043f8:	4a85383a 	mul	r2,r9,r10
 80043fc:	6295383a 	mul	r10,r12,r10
 8004400:	4ad3383a 	mul	r9,r9,r11
 8004404:	113fffcc 	andi	r4,r2,65535
 8004408:	1004d43a 	srli	r2,r2,16
 800440c:	4a93883a 	add	r9,r9,r10
 8004410:	3807883a 	mov	r3,r7
 8004414:	1245883a 	add	r2,r2,r9
 8004418:	280f883a 	mov	r7,r5
 800441c:	180b883a 	mov	r5,r3
 8004420:	1006943a 	slli	r3,r2,16
 8004424:	defffd04 	addi	sp,sp,-12
 8004428:	dc800215 	stw	r18,8(sp)
 800442c:	1907883a 	add	r3,r3,r4
 8004430:	dc400115 	stw	r17,4(sp)
 8004434:	dc000015 	stw	r16,0(sp)
 8004438:	4165383a 	mul	r18,r8,r5
 800443c:	31e3383a 	mul	r17,r6,r7
 8004440:	1012d43a 	srli	r9,r2,16
 8004444:	62d9383a 	mul	r12,r12,r11
 8004448:	181f883a 	mov	r15,r3
 800444c:	1280022e 	bgeu	r2,r10,8004458 <__muldi3+0x74>
 8004450:	00800074 	movhi	r2,1
 8004454:	6099883a 	add	r12,r12,r2
 8004458:	624d883a 	add	r6,r12,r9
 800445c:	9187883a 	add	r3,r18,r6
 8004460:	88c7883a 	add	r3,r17,r3
 8004464:	7805883a 	mov	r2,r15
 8004468:	dc800217 	ldw	r18,8(sp)
 800446c:	dc400117 	ldw	r17,4(sp)
 8004470:	dc000017 	ldw	r16,0(sp)
 8004474:	dec00304 	addi	sp,sp,12
 8004478:	f800283a 	ret

0800447c <__clzsi2>:
 800447c:	00bfffd4 	movui	r2,65535
 8004480:	11000e36 	bltu	r2,r4,80044bc <__clzsi2+0x40>
 8004484:	00803fc4 	movi	r2,255
 8004488:	01400204 	movi	r5,8
 800448c:	0007883a 	mov	r3,zero
 8004490:	11001036 	bltu	r2,r4,80044d4 <__clzsi2+0x58>
 8004494:	000b883a 	mov	r5,zero
 8004498:	20c6d83a 	srl	r3,r4,r3
 800449c:	00820074 	movhi	r2,2049
 80044a0:	10866204 	addi	r2,r2,6536
 80044a4:	1887883a 	add	r3,r3,r2
 80044a8:	18800003 	ldbu	r2,0(r3)
 80044ac:	00c00804 	movi	r3,32
 80044b0:	2885883a 	add	r2,r5,r2
 80044b4:	1885c83a 	sub	r2,r3,r2
 80044b8:	f800283a 	ret
 80044bc:	01400404 	movi	r5,16
 80044c0:	00804034 	movhi	r2,256
 80044c4:	10bfffc4 	addi	r2,r2,-1
 80044c8:	2807883a 	mov	r3,r5
 80044cc:	113ff22e 	bgeu	r2,r4,8004498 <__clzsi2+0x1c>
 80044d0:	01400604 	movi	r5,24
 80044d4:	2807883a 	mov	r3,r5
 80044d8:	20c6d83a 	srl	r3,r4,r3
 80044dc:	00820074 	movhi	r2,2049
 80044e0:	10866204 	addi	r2,r2,6536
 80044e4:	1887883a 	add	r3,r3,r2
 80044e8:	18800003 	ldbu	r2,0(r3)
 80044ec:	00c00804 	movi	r3,32
 80044f0:	2885883a 	add	r2,r5,r2
 80044f4:	1885c83a 	sub	r2,r3,r2
 80044f8:	f800283a 	ret

080044fc <__pack_f>:
 80044fc:	20c00017 	ldw	r3,0(r4)
 8004500:	01c00044 	movi	r7,1
 8004504:	21800317 	ldw	r6,12(r4)
 8004508:	21400117 	ldw	r5,4(r4)
 800450c:	38c02d2e 	bgeu	r7,r3,80045c4 <__pack_f+0xc8>
 8004510:	00800104 	movi	r2,4
 8004514:	18802826 	beq	r3,r2,80045b8 <__pack_f+0xbc>
 8004518:	00800084 	movi	r2,2
 800451c:	18800126 	beq	r3,r2,8004524 <__pack_f+0x28>
 8004520:	3000101e 	bne	r6,zero,8004564 <__pack_f+0x68>
 8004524:	000d883a 	mov	r6,zero
 8004528:	0007883a 	mov	r3,zero
 800452c:	19003fcc 	andi	r4,r3,255
 8004530:	200895fa 	slli	r4,r4,23
 8004534:	00c02034 	movhi	r3,128
 8004538:	18ffffc4 	addi	r3,r3,-1
 800453c:	30c6703a 	and	r3,r6,r3
 8004540:	10a0002c 	andhi	r2,r2,32768
 8004544:	10c4b03a 	or	r2,r2,r3
 8004548:	280a97fa 	slli	r5,r5,31
 800454c:	1104b03a 	or	r2,r2,r4
 8004550:	00e00034 	movhi	r3,32768
 8004554:	18ffffc4 	addi	r3,r3,-1
 8004558:	10c4703a 	and	r2,r2,r3
 800455c:	1144b03a 	or	r2,r2,r5
 8004560:	f800283a 	ret
 8004564:	21000217 	ldw	r4,8(r4)
 8004568:	00bfe084 	movi	r2,-126
 800456c:	20801b16 	blt	r4,r2,80045dc <__pack_f+0xe0>
 8004570:	00801fc4 	movi	r2,127
 8004574:	11001016 	blt	r2,r4,80045b8 <__pack_f+0xbc>
 8004578:	308e703a 	and	r7,r6,r2
 800457c:	2087883a 	add	r3,r4,r2
 8004580:	00801004 	movi	r2,64
 8004584:	38800526 	beq	r7,r2,800459c <__pack_f+0xa0>
 8004588:	31800fc4 	addi	r6,r6,63
 800458c:	30000716 	blt	r6,zero,80045ac <__pack_f+0xb0>
 8004590:	300490ba 	slli	r2,r6,2
 8004594:	100cd27a 	srli	r6,r2,9
 8004598:	003fe406 	br	800452c <__pack_f+0x30>
 800459c:	3080200c 	andi	r2,r6,128
 80045a0:	103ffa26 	beq	r2,zero,800458c <__pack_f+0x90>
 80045a4:	31cd883a 	add	r6,r6,r7
 80045a8:	003ff806 	br	800458c <__pack_f+0x90>
 80045ac:	300cd07a 	srli	r6,r6,1
 80045b0:	18c00044 	addi	r3,r3,1
 80045b4:	003ff606 	br	8004590 <__pack_f+0x94>
 80045b8:	000d883a 	mov	r6,zero
 80045bc:	00ffffc4 	movi	r3,-1
 80045c0:	003fda06 	br	800452c <__pack_f+0x30>
 80045c4:	31800434 	orhi	r6,r6,16
 80045c8:	00802034 	movhi	r2,128
 80045cc:	10bfffc4 	addi	r2,r2,-1
 80045d0:	308c703a 	and	r6,r6,r2
 80045d4:	00ffffc4 	movi	r3,-1
 80045d8:	003fd406 	br	800452c <__pack_f+0x30>
 80045dc:	1109c83a 	sub	r4,r2,r4
 80045e0:	00800644 	movi	r2,25
 80045e4:	11001216 	blt	r2,r4,8004630 <__pack_f+0x134>
 80045e8:	3904983a 	sll	r2,r7,r4
 80045ec:	3106d83a 	srl	r3,r6,r4
 80045f0:	10bfffc4 	addi	r2,r2,-1
 80045f4:	3084703a 	and	r2,r6,r2
 80045f8:	1004c03a 	cmpne	r2,r2,zero
 80045fc:	1886b03a 	or	r3,r3,r2
 8004600:	19001fcc 	andi	r4,r3,127
 8004604:	00801004 	movi	r2,64
 8004608:	20800c26 	beq	r4,r2,800463c <__pack_f+0x140>
 800460c:	18c00fc4 	addi	r3,r3,63
 8004610:	00900034 	movhi	r2,16384
 8004614:	10bfffc4 	addi	r2,r2,-1
 8004618:	180cd1fa 	srli	r6,r3,7
 800461c:	10c7803a 	cmpltu	r3,r2,r3
 8004620:	00802034 	movhi	r2,128
 8004624:	10bfffc4 	addi	r2,r2,-1
 8004628:	308c703a 	and	r6,r6,r2
 800462c:	003fbf06 	br	800452c <__pack_f+0x30>
 8004630:	0007883a 	mov	r3,zero
 8004634:	000d883a 	mov	r6,zero
 8004638:	003ff906 	br	8004620 <__pack_f+0x124>
 800463c:	1880200c 	andi	r2,r3,128
 8004640:	10000126 	beq	r2,zero,8004648 <__pack_f+0x14c>
 8004644:	1907883a 	add	r3,r3,r4
 8004648:	180cd1fa 	srli	r6,r3,7
 800464c:	00900034 	movhi	r2,16384
 8004650:	10bfffc4 	addi	r2,r2,-1
 8004654:	10c7803a 	cmpltu	r3,r2,r3
 8004658:	003ff106 	br	8004620 <__pack_f+0x124>

0800465c <__unpack_f>:
 800465c:	21800017 	ldw	r6,0(r4)
 8004660:	00c02034 	movhi	r3,128
 8004664:	18ffffc4 	addi	r3,r3,-1
 8004668:	3004d5fa 	srli	r2,r6,23
 800466c:	3008d7fa 	srli	r4,r6,31
 8004670:	30ce703a 	and	r7,r6,r3
 8004674:	10c03fcc 	andi	r3,r2,255
 8004678:	29000115 	stw	r4,4(r5)
 800467c:	1800131e 	bne	r3,zero,80046cc <__unpack_f+0x70>
 8004680:	38000f26 	beq	r7,zero,80046c0 <__unpack_f+0x64>
 8004684:	380691fa 	slli	r3,r7,7
 8004688:	01bfe084 	movi	r6,-126
 800468c:	008000c4 	movi	r2,3
 8004690:	01100034 	movhi	r4,16384
 8004694:	213fffc4 	addi	r4,r4,-1
 8004698:	28800015 	stw	r2,0(r5)
 800469c:	29800215 	stw	r6,8(r5)
 80046a0:	20c00536 	bltu	r4,r3,80046b8 <__unpack_f+0x5c>
 80046a4:	3005883a 	mov	r2,r6
 80046a8:	18c7883a 	add	r3,r3,r3
 80046ac:	10bfffc4 	addi	r2,r2,-1
 80046b0:	20fffd2e 	bgeu	r4,r3,80046a8 <__unpack_f+0x4c>
 80046b4:	28800215 	stw	r2,8(r5)
 80046b8:	28c00315 	stw	r3,12(r5)
 80046bc:	f800283a 	ret
 80046c0:	00800084 	movi	r2,2
 80046c4:	28800015 	stw	r2,0(r5)
 80046c8:	f800283a 	ret
 80046cc:	00803fc4 	movi	r2,255
 80046d0:	18800826 	beq	r3,r2,80046f4 <__unpack_f+0x98>
 80046d4:	380491fa 	slli	r2,r7,7
 80046d8:	18ffe044 	addi	r3,r3,-127
 80046dc:	28c00215 	stw	r3,8(r5)
 80046e0:	10900034 	orhi	r2,r2,16384
 80046e4:	28800315 	stw	r2,12(r5)
 80046e8:	008000c4 	movi	r2,3
 80046ec:	28800015 	stw	r2,0(r5)
 80046f0:	f800283a 	ret
 80046f4:	3800031e 	bne	r7,zero,8004704 <__unpack_f+0xa8>
 80046f8:	00800104 	movi	r2,4
 80046fc:	28800015 	stw	r2,0(r5)
 8004700:	f800283a 	ret
 8004704:	3080042c 	andhi	r2,r6,16
 8004708:	10000426 	beq	r2,zero,800471c <__unpack_f+0xc0>
 800470c:	00800044 	movi	r2,1
 8004710:	28800015 	stw	r2,0(r5)
 8004714:	29c00315 	stw	r7,12(r5)
 8004718:	f800283a 	ret
 800471c:	28000015 	stw	zero,0(r5)
 8004720:	003ffc06 	br	8004714 <__unpack_f+0xb8>

08004724 <__fpcmp_parts_f>:
 8004724:	21800017 	ldw	r6,0(r4)
 8004728:	00c00044 	movi	r3,1
 800472c:	19800a2e 	bgeu	r3,r6,8004758 <__fpcmp_parts_f+0x34>
 8004730:	28800017 	ldw	r2,0(r5)
 8004734:	1880082e 	bgeu	r3,r2,8004758 <__fpcmp_parts_f+0x34>
 8004738:	00c00104 	movi	r3,4
 800473c:	30c01e26 	beq	r6,r3,80047b8 <__fpcmp_parts_f+0x94>
 8004740:	10c01a26 	beq	r2,r3,80047ac <__fpcmp_parts_f+0x88>
 8004744:	00c00084 	movi	r3,2
 8004748:	30c00526 	beq	r6,r3,8004760 <__fpcmp_parts_f+0x3c>
 800474c:	10c0071e 	bne	r2,r3,800476c <__fpcmp_parts_f+0x48>
 8004750:	20800117 	ldw	r2,4(r4)
 8004754:	1000091e 	bne	r2,zero,800477c <__fpcmp_parts_f+0x58>
 8004758:	00800044 	movi	r2,1
 800475c:	f800283a 	ret
 8004760:	10c0121e 	bne	r2,r3,80047ac <__fpcmp_parts_f+0x88>
 8004764:	0005883a 	mov	r2,zero
 8004768:	f800283a 	ret
 800476c:	20c00117 	ldw	r3,4(r4)
 8004770:	28800117 	ldw	r2,4(r5)
 8004774:	18800326 	beq	r3,r2,8004784 <__fpcmp_parts_f+0x60>
 8004778:	183ff726 	beq	r3,zero,8004758 <__fpcmp_parts_f+0x34>
 800477c:	00bfffc4 	movi	r2,-1
 8004780:	f800283a 	ret
 8004784:	21800217 	ldw	r6,8(r4)
 8004788:	28800217 	ldw	r2,8(r5)
 800478c:	11bffa16 	blt	r2,r6,8004778 <__fpcmp_parts_f+0x54>
 8004790:	30800416 	blt	r6,r2,80047a4 <__fpcmp_parts_f+0x80>
 8004794:	21000317 	ldw	r4,12(r4)
 8004798:	29400317 	ldw	r5,12(r5)
 800479c:	293ff636 	bltu	r5,r4,8004778 <__fpcmp_parts_f+0x54>
 80047a0:	217ff02e 	bgeu	r4,r5,8004764 <__fpcmp_parts_f+0x40>
 80047a4:	183fec1e 	bne	r3,zero,8004758 <__fpcmp_parts_f+0x34>
 80047a8:	003ff406 	br	800477c <__fpcmp_parts_f+0x58>
 80047ac:	28800117 	ldw	r2,4(r5)
 80047b0:	103fe91e 	bne	r2,zero,8004758 <__fpcmp_parts_f+0x34>
 80047b4:	003ff106 	br	800477c <__fpcmp_parts_f+0x58>
 80047b8:	11bfe51e 	bne	r2,r6,8004750 <__fpcmp_parts_f+0x2c>
 80047bc:	28c00117 	ldw	r3,4(r5)
 80047c0:	20800117 	ldw	r2,4(r4)
 80047c4:	1885c83a 	sub	r2,r3,r2
 80047c8:	f800283a 	ret

080047cc <__make_fp>:
 80047cc:	defffb04 	addi	sp,sp,-20
 80047d0:	d9000015 	stw	r4,0(sp)
 80047d4:	d809883a 	mov	r4,sp
 80047d8:	dfc00415 	stw	ra,16(sp)
 80047dc:	d9400115 	stw	r5,4(sp)
 80047e0:	d9800215 	stw	r6,8(sp)
 80047e4:	d9c00315 	stw	r7,12(sp)
 80047e8:	80044fc0 	call	80044fc <__pack_f>
 80047ec:	dfc00417 	ldw	ra,16(sp)
 80047f0:	dec00504 	addi	sp,sp,20
 80047f4:	f800283a 	ret

080047f8 <__pack_d>:
 80047f8:	20c00017 	ldw	r3,0(r4)
 80047fc:	defffd04 	addi	sp,sp,-12
 8004800:	dc000015 	stw	r16,0(sp)
 8004804:	dc800215 	stw	r18,8(sp)
 8004808:	dc400115 	stw	r17,4(sp)
 800480c:	00800044 	movi	r2,1
 8004810:	22000317 	ldw	r8,12(r4)
 8004814:	001f883a 	mov	r15,zero
 8004818:	22400417 	ldw	r9,16(r4)
 800481c:	24000117 	ldw	r16,4(r4)
 8004820:	10c0552e 	bgeu	r2,r3,8004978 <__pack_d+0x180>
 8004824:	00800104 	movi	r2,4
 8004828:	18804f26 	beq	r3,r2,8004968 <__pack_d+0x170>
 800482c:	00800084 	movi	r2,2
 8004830:	18800226 	beq	r3,r2,800483c <__pack_d+0x44>
 8004834:	4244b03a 	or	r2,r8,r9
 8004838:	10001a1e 	bne	r2,zero,80048a4 <__pack_d+0xac>
 800483c:	000d883a 	mov	r6,zero
 8004840:	000f883a 	mov	r7,zero
 8004844:	0011883a 	mov	r8,zero
 8004848:	00800434 	movhi	r2,16
 800484c:	10bfffc4 	addi	r2,r2,-1
 8004850:	301d883a 	mov	r14,r6
 8004854:	3884703a 	and	r2,r7,r2
 8004858:	400a953a 	slli	r5,r8,20
 800485c:	79bffc2c 	andhi	r6,r15,65520
 8004860:	308cb03a 	or	r6,r6,r2
 8004864:	00e00434 	movhi	r3,32784
 8004868:	18ffffc4 	addi	r3,r3,-1
 800486c:	800497fa 	slli	r2,r16,31
 8004870:	30c6703a 	and	r3,r6,r3
 8004874:	1946b03a 	or	r3,r3,r5
 8004878:	01600034 	movhi	r5,32768
 800487c:	297fffc4 	addi	r5,r5,-1
 8004880:	194a703a 	and	r5,r3,r5
 8004884:	288ab03a 	or	r5,r5,r2
 8004888:	2807883a 	mov	r3,r5
 800488c:	7005883a 	mov	r2,r14
 8004890:	dc800217 	ldw	r18,8(sp)
 8004894:	dc400117 	ldw	r17,4(sp)
 8004898:	dc000017 	ldw	r16,0(sp)
 800489c:	dec00304 	addi	sp,sp,12
 80048a0:	f800283a 	ret
 80048a4:	21000217 	ldw	r4,8(r4)
 80048a8:	00bf0084 	movi	r2,-1022
 80048ac:	20803f16 	blt	r4,r2,80049ac <__pack_d+0x1b4>
 80048b0:	0080ffc4 	movi	r2,1023
 80048b4:	11002c16 	blt	r2,r4,8004968 <__pack_d+0x170>
 80048b8:	00803fc4 	movi	r2,255
 80048bc:	408c703a 	and	r6,r8,r2
 80048c0:	00802004 	movi	r2,128
 80048c4:	0007883a 	mov	r3,zero
 80048c8:	000f883a 	mov	r7,zero
 80048cc:	2280ffc4 	addi	r10,r4,1023
 80048d0:	30801e26 	beq	r6,r2,800494c <__pack_d+0x154>
 80048d4:	00801fc4 	movi	r2,127
 80048d8:	4089883a 	add	r4,r8,r2
 80048dc:	220d803a 	cmpltu	r6,r4,r8
 80048e0:	324d883a 	add	r6,r6,r9
 80048e4:	2011883a 	mov	r8,r4
 80048e8:	3013883a 	mov	r9,r6
 80048ec:	00880034 	movhi	r2,8192
 80048f0:	10bfffc4 	addi	r2,r2,-1
 80048f4:	12400d36 	bltu	r2,r9,800492c <__pack_d+0x134>
 80048f8:	4804963a 	slli	r2,r9,24
 80048fc:	400cd23a 	srli	r6,r8,8
 8004900:	480ed23a 	srli	r7,r9,8
 8004904:	013fffc4 	movi	r4,-1
 8004908:	118cb03a 	or	r6,r2,r6
 800490c:	01400434 	movhi	r5,16
 8004910:	297fffc4 	addi	r5,r5,-1
 8004914:	3104703a 	and	r2,r6,r4
 8004918:	3946703a 	and	r3,r7,r5
 800491c:	5201ffcc 	andi	r8,r10,2047
 8004920:	100d883a 	mov	r6,r2
 8004924:	180f883a 	mov	r7,r3
 8004928:	003fc706 	br	8004848 <__pack_d+0x50>
 800492c:	480897fa 	slli	r4,r9,31
 8004930:	4004d07a 	srli	r2,r8,1
 8004934:	4806d07a 	srli	r3,r9,1
 8004938:	52800044 	addi	r10,r10,1
 800493c:	2084b03a 	or	r2,r4,r2
 8004940:	1011883a 	mov	r8,r2
 8004944:	1813883a 	mov	r9,r3
 8004948:	003feb06 	br	80048f8 <__pack_d+0x100>
 800494c:	383fe11e 	bne	r7,zero,80048d4 <__pack_d+0xdc>
 8004950:	01004004 	movi	r4,256
 8004954:	4104703a 	and	r2,r8,r4
 8004958:	10c4b03a 	or	r2,r2,r3
 800495c:	103fe326 	beq	r2,zero,80048ec <__pack_d+0xf4>
 8004960:	3005883a 	mov	r2,r6
 8004964:	003fdc06 	br	80048d8 <__pack_d+0xe0>
 8004968:	000d883a 	mov	r6,zero
 800496c:	000f883a 	mov	r7,zero
 8004970:	0201ffc4 	movi	r8,2047
 8004974:	003fb406 	br	8004848 <__pack_d+0x50>
 8004978:	0005883a 	mov	r2,zero
 800497c:	00c00234 	movhi	r3,8
 8004980:	408cb03a 	or	r6,r8,r2
 8004984:	48ceb03a 	or	r7,r9,r3
 8004988:	013fffc4 	movi	r4,-1
 800498c:	01400434 	movhi	r5,16
 8004990:	297fffc4 	addi	r5,r5,-1
 8004994:	3104703a 	and	r2,r6,r4
 8004998:	3946703a 	and	r3,r7,r5
 800499c:	100d883a 	mov	r6,r2
 80049a0:	180f883a 	mov	r7,r3
 80049a4:	0201ffc4 	movi	r8,2047
 80049a8:	003fa706 	br	8004848 <__pack_d+0x50>
 80049ac:	1109c83a 	sub	r4,r2,r4
 80049b0:	00800e04 	movi	r2,56
 80049b4:	11004316 	blt	r2,r4,8004ac4 <__pack_d+0x2cc>
 80049b8:	21fff804 	addi	r7,r4,-32
 80049bc:	38004516 	blt	r7,zero,8004ad4 <__pack_d+0x2dc>
 80049c0:	49d8d83a 	srl	r12,r9,r7
 80049c4:	001b883a 	mov	r13,zero
 80049c8:	0023883a 	mov	r17,zero
 80049cc:	01400044 	movi	r5,1
 80049d0:	0025883a 	mov	r18,zero
 80049d4:	38004716 	blt	r7,zero,8004af4 <__pack_d+0x2fc>
 80049d8:	29d6983a 	sll	r11,r5,r7
 80049dc:	0015883a 	mov	r10,zero
 80049e0:	00bfffc4 	movi	r2,-1
 80049e4:	5089883a 	add	r4,r10,r2
 80049e8:	588b883a 	add	r5,r11,r2
 80049ec:	228d803a 	cmpltu	r6,r4,r10
 80049f0:	314b883a 	add	r5,r6,r5
 80049f4:	4104703a 	and	r2,r8,r4
 80049f8:	4946703a 	and	r3,r9,r5
 80049fc:	10c4b03a 	or	r2,r2,r3
 8004a00:	10000226 	beq	r2,zero,8004a0c <__pack_d+0x214>
 8004a04:	04400044 	movi	r17,1
 8004a08:	0025883a 	mov	r18,zero
 8004a0c:	00803fc4 	movi	r2,255
 8004a10:	644eb03a 	or	r7,r12,r17
 8004a14:	3892703a 	and	r9,r7,r2
 8004a18:	00802004 	movi	r2,128
 8004a1c:	6c90b03a 	or	r8,r13,r18
 8004a20:	0015883a 	mov	r10,zero
 8004a24:	48801626 	beq	r9,r2,8004a80 <__pack_d+0x288>
 8004a28:	01001fc4 	movi	r4,127
 8004a2c:	3905883a 	add	r2,r7,r4
 8004a30:	11cd803a 	cmpltu	r6,r2,r7
 8004a34:	320d883a 	add	r6,r6,r8
 8004a38:	100f883a 	mov	r7,r2
 8004a3c:	00840034 	movhi	r2,4096
 8004a40:	10bfffc4 	addi	r2,r2,-1
 8004a44:	3011883a 	mov	r8,r6
 8004a48:	0007883a 	mov	r3,zero
 8004a4c:	11801b36 	bltu	r2,r6,8004abc <__pack_d+0x2c4>
 8004a50:	4004963a 	slli	r2,r8,24
 8004a54:	3808d23a 	srli	r4,r7,8
 8004a58:	400ad23a 	srli	r5,r8,8
 8004a5c:	1813883a 	mov	r9,r3
 8004a60:	1108b03a 	or	r4,r2,r4
 8004a64:	00bfffc4 	movi	r2,-1
 8004a68:	00c00434 	movhi	r3,16
 8004a6c:	18ffffc4 	addi	r3,r3,-1
 8004a70:	208c703a 	and	r6,r4,r2
 8004a74:	28ce703a 	and	r7,r5,r3
 8004a78:	4a01ffcc 	andi	r8,r9,2047
 8004a7c:	003f7206 	br	8004848 <__pack_d+0x50>
 8004a80:	503fe91e 	bne	r10,zero,8004a28 <__pack_d+0x230>
 8004a84:	01004004 	movi	r4,256
 8004a88:	3904703a 	and	r2,r7,r4
 8004a8c:	0007883a 	mov	r3,zero
 8004a90:	10c4b03a 	or	r2,r2,r3
 8004a94:	10000626 	beq	r2,zero,8004ab0 <__pack_d+0x2b8>
 8004a98:	3a45883a 	add	r2,r7,r9
 8004a9c:	11cd803a 	cmpltu	r6,r2,r7
 8004aa0:	320d883a 	add	r6,r6,r8
 8004aa4:	100f883a 	mov	r7,r2
 8004aa8:	3011883a 	mov	r8,r6
 8004aac:	0007883a 	mov	r3,zero
 8004ab0:	00840034 	movhi	r2,4096
 8004ab4:	10bfffc4 	addi	r2,r2,-1
 8004ab8:	123fe52e 	bgeu	r2,r8,8004a50 <__pack_d+0x258>
 8004abc:	00c00044 	movi	r3,1
 8004ac0:	003fe306 	br	8004a50 <__pack_d+0x258>
 8004ac4:	0009883a 	mov	r4,zero
 8004ac8:	0013883a 	mov	r9,zero
 8004acc:	000b883a 	mov	r5,zero
 8004ad0:	003fe406 	br	8004a64 <__pack_d+0x26c>
 8004ad4:	4a47883a 	add	r3,r9,r9
 8004ad8:	008007c4 	movi	r2,31
 8004adc:	1105c83a 	sub	r2,r2,r4
 8004ae0:	1886983a 	sll	r3,r3,r2
 8004ae4:	4118d83a 	srl	r12,r8,r4
 8004ae8:	491ad83a 	srl	r13,r9,r4
 8004aec:	1b18b03a 	or	r12,r3,r12
 8004af0:	003fb506 	br	80049c8 <__pack_d+0x1d0>
 8004af4:	2806d07a 	srli	r3,r5,1
 8004af8:	008007c4 	movi	r2,31
 8004afc:	1105c83a 	sub	r2,r2,r4
 8004b00:	1896d83a 	srl	r11,r3,r2
 8004b04:	2914983a 	sll	r10,r5,r4
 8004b08:	003fb506 	br	80049e0 <__pack_d+0x1e8>

08004b0c <__unpack_d>:
 8004b0c:	20c00117 	ldw	r3,4(r4)
 8004b10:	22400017 	ldw	r9,0(r4)
 8004b14:	00800434 	movhi	r2,16
 8004b18:	10bfffc4 	addi	r2,r2,-1
 8004b1c:	1808d53a 	srli	r4,r3,20
 8004b20:	180cd7fa 	srli	r6,r3,31
 8004b24:	1894703a 	and	r10,r3,r2
 8004b28:	2201ffcc 	andi	r8,r4,2047
 8004b2c:	281b883a 	mov	r13,r5
 8004b30:	4817883a 	mov	r11,r9
 8004b34:	29800115 	stw	r6,4(r5)
 8004b38:	5019883a 	mov	r12,r10
 8004b3c:	40001e1e 	bne	r8,zero,8004bb8 <__unpack_d+0xac>
 8004b40:	4a84b03a 	or	r2,r9,r10
 8004b44:	10001926 	beq	r2,zero,8004bac <__unpack_d+0xa0>
 8004b48:	4804d63a 	srli	r2,r9,24
 8004b4c:	500c923a 	slli	r6,r10,8
 8004b50:	013f0084 	movi	r4,-1022
 8004b54:	00c40034 	movhi	r3,4096
 8004b58:	18ffffc4 	addi	r3,r3,-1
 8004b5c:	118cb03a 	or	r6,r2,r6
 8004b60:	008000c4 	movi	r2,3
 8004b64:	480a923a 	slli	r5,r9,8
 8004b68:	68800015 	stw	r2,0(r13)
 8004b6c:	69000215 	stw	r4,8(r13)
 8004b70:	19800b36 	bltu	r3,r6,8004ba0 <__unpack_d+0x94>
 8004b74:	200f883a 	mov	r7,r4
 8004b78:	1811883a 	mov	r8,r3
 8004b7c:	2945883a 	add	r2,r5,r5
 8004b80:	1149803a 	cmpltu	r4,r2,r5
 8004b84:	3187883a 	add	r3,r6,r6
 8004b88:	20c9883a 	add	r4,r4,r3
 8004b8c:	100b883a 	mov	r5,r2
 8004b90:	200d883a 	mov	r6,r4
 8004b94:	39ffffc4 	addi	r7,r7,-1
 8004b98:	413ff82e 	bgeu	r8,r4,8004b7c <__unpack_d+0x70>
 8004b9c:	69c00215 	stw	r7,8(r13)
 8004ba0:	69800415 	stw	r6,16(r13)
 8004ba4:	69400315 	stw	r5,12(r13)
 8004ba8:	f800283a 	ret
 8004bac:	00800084 	movi	r2,2
 8004bb0:	28800015 	stw	r2,0(r5)
 8004bb4:	f800283a 	ret
 8004bb8:	0081ffc4 	movi	r2,2047
 8004bbc:	40800f26 	beq	r8,r2,8004bfc <__unpack_d+0xf0>
 8004bc0:	480cd63a 	srli	r6,r9,24
 8004bc4:	5006923a 	slli	r3,r10,8
 8004bc8:	4804923a 	slli	r2,r9,8
 8004bcc:	0009883a 	mov	r4,zero
 8004bd0:	30c6b03a 	or	r3,r6,r3
 8004bd4:	01440034 	movhi	r5,4096
 8004bd8:	110cb03a 	or	r6,r2,r4
 8004bdc:	423f0044 	addi	r8,r8,-1023
 8004be0:	194eb03a 	or	r7,r3,r5
 8004be4:	008000c4 	movi	r2,3
 8004be8:	69c00415 	stw	r7,16(r13)
 8004bec:	6a000215 	stw	r8,8(r13)
 8004bf0:	68800015 	stw	r2,0(r13)
 8004bf4:	69800315 	stw	r6,12(r13)
 8004bf8:	f800283a 	ret
 8004bfc:	4a84b03a 	or	r2,r9,r10
 8004c00:	1000031e 	bne	r2,zero,8004c10 <__unpack_d+0x104>
 8004c04:	00800104 	movi	r2,4
 8004c08:	28800015 	stw	r2,0(r5)
 8004c0c:	f800283a 	ret
 8004c10:	0009883a 	mov	r4,zero
 8004c14:	01400234 	movhi	r5,8
 8004c18:	4904703a 	and	r2,r9,r4
 8004c1c:	5146703a 	and	r3,r10,r5
 8004c20:	10c4b03a 	or	r2,r2,r3
 8004c24:	10000526 	beq	r2,zero,8004c3c <__unpack_d+0x130>
 8004c28:	00800044 	movi	r2,1
 8004c2c:	68800015 	stw	r2,0(r13)
 8004c30:	6b000415 	stw	r12,16(r13)
 8004c34:	6ac00315 	stw	r11,12(r13)
 8004c38:	f800283a 	ret
 8004c3c:	68000015 	stw	zero,0(r13)
 8004c40:	003ffb06 	br	8004c30 <__unpack_d+0x124>

08004c44 <__fpcmp_parts_d>:
 8004c44:	21800017 	ldw	r6,0(r4)
 8004c48:	00c00044 	movi	r3,1
 8004c4c:	19800a2e 	bgeu	r3,r6,8004c78 <__fpcmp_parts_d+0x34>
 8004c50:	28800017 	ldw	r2,0(r5)
 8004c54:	1880082e 	bgeu	r3,r2,8004c78 <__fpcmp_parts_d+0x34>
 8004c58:	00c00104 	movi	r3,4
 8004c5c:	30c02626 	beq	r6,r3,8004cf8 <__fpcmp_parts_d+0xb4>
 8004c60:	10c02226 	beq	r2,r3,8004cec <__fpcmp_parts_d+0xa8>
 8004c64:	00c00084 	movi	r3,2
 8004c68:	30c00526 	beq	r6,r3,8004c80 <__fpcmp_parts_d+0x3c>
 8004c6c:	10c0071e 	bne	r2,r3,8004c8c <__fpcmp_parts_d+0x48>
 8004c70:	20800117 	ldw	r2,4(r4)
 8004c74:	1000091e 	bne	r2,zero,8004c9c <__fpcmp_parts_d+0x58>
 8004c78:	00800044 	movi	r2,1
 8004c7c:	f800283a 	ret
 8004c80:	10c01a1e 	bne	r2,r3,8004cec <__fpcmp_parts_d+0xa8>
 8004c84:	0005883a 	mov	r2,zero
 8004c88:	f800283a 	ret
 8004c8c:	22000117 	ldw	r8,4(r4)
 8004c90:	28800117 	ldw	r2,4(r5)
 8004c94:	40800326 	beq	r8,r2,8004ca4 <__fpcmp_parts_d+0x60>
 8004c98:	403ff726 	beq	r8,zero,8004c78 <__fpcmp_parts_d+0x34>
 8004c9c:	00bfffc4 	movi	r2,-1
 8004ca0:	f800283a 	ret
 8004ca4:	20c00217 	ldw	r3,8(r4)
 8004ca8:	28800217 	ldw	r2,8(r5)
 8004cac:	10fffa16 	blt	r2,r3,8004c98 <__fpcmp_parts_d+0x54>
 8004cb0:	18800916 	blt	r3,r2,8004cd8 <__fpcmp_parts_d+0x94>
 8004cb4:	21c00417 	ldw	r7,16(r4)
 8004cb8:	28c00417 	ldw	r3,16(r5)
 8004cbc:	21800317 	ldw	r6,12(r4)
 8004cc0:	28800317 	ldw	r2,12(r5)
 8004cc4:	19fff436 	bltu	r3,r7,8004c98 <__fpcmp_parts_d+0x54>
 8004cc8:	38c00526 	beq	r7,r3,8004ce0 <__fpcmp_parts_d+0x9c>
 8004ccc:	38c00236 	bltu	r7,r3,8004cd8 <__fpcmp_parts_d+0x94>
 8004cd0:	19ffec1e 	bne	r3,r7,8004c84 <__fpcmp_parts_d+0x40>
 8004cd4:	30bfeb2e 	bgeu	r6,r2,8004c84 <__fpcmp_parts_d+0x40>
 8004cd8:	403fe71e 	bne	r8,zero,8004c78 <__fpcmp_parts_d+0x34>
 8004cdc:	003fef06 	br	8004c9c <__fpcmp_parts_d+0x58>
 8004ce0:	11bffa2e 	bgeu	r2,r6,8004ccc <__fpcmp_parts_d+0x88>
 8004ce4:	403fe426 	beq	r8,zero,8004c78 <__fpcmp_parts_d+0x34>
 8004ce8:	003fec06 	br	8004c9c <__fpcmp_parts_d+0x58>
 8004cec:	28800117 	ldw	r2,4(r5)
 8004cf0:	103fe11e 	bne	r2,zero,8004c78 <__fpcmp_parts_d+0x34>
 8004cf4:	003fe906 	br	8004c9c <__fpcmp_parts_d+0x58>
 8004cf8:	11bfdd1e 	bne	r2,r6,8004c70 <__fpcmp_parts_d+0x2c>
 8004cfc:	28c00117 	ldw	r3,4(r5)
 8004d00:	20800117 	ldw	r2,4(r4)
 8004d04:	1885c83a 	sub	r2,r3,r2
 8004d08:	f800283a 	ret

08004d0c <__errno>:
 8004d0c:	00c20074 	movhi	r3,2049
 8004d10:	18ce5204 	addi	r3,r3,14664
 8004d14:	18800017 	ldw	r2,0(r3)
 8004d18:	f800283a 	ret

08004d1c <printf>:
 8004d1c:	defffb04 	addi	sp,sp,-20
 8004d20:	dfc00115 	stw	ra,4(sp)
 8004d24:	d9400215 	stw	r5,8(sp)
 8004d28:	d9800315 	stw	r6,12(sp)
 8004d2c:	d9c00415 	stw	r7,16(sp)
 8004d30:	00820074 	movhi	r2,2049
 8004d34:	108e5204 	addi	r2,r2,14664
 8004d38:	10c00017 	ldw	r3,0(r2)
 8004d3c:	200b883a 	mov	r5,r4
 8004d40:	d8800204 	addi	r2,sp,8
 8004d44:	19000217 	ldw	r4,8(r3)
 8004d48:	100d883a 	mov	r6,r2
 8004d4c:	d8800015 	stw	r2,0(sp)
 8004d50:	8006dc00 	call	8006dc0 <__vfprintf_internal>
 8004d54:	dfc00117 	ldw	ra,4(sp)
 8004d58:	dec00504 	addi	sp,sp,20
 8004d5c:	f800283a 	ret

08004d60 <_printf_r>:
 8004d60:	defffc04 	addi	sp,sp,-16
 8004d64:	dfc00115 	stw	ra,4(sp)
 8004d68:	d9800215 	stw	r6,8(sp)
 8004d6c:	d9c00315 	stw	r7,12(sp)
 8004d70:	280d883a 	mov	r6,r5
 8004d74:	21400217 	ldw	r5,8(r4)
 8004d78:	d8c00204 	addi	r3,sp,8
 8004d7c:	180f883a 	mov	r7,r3
 8004d80:	d8c00015 	stw	r3,0(sp)
 8004d84:	8004f140 	call	8004f14 <___vfprintf_internal_r>
 8004d88:	dfc00117 	ldw	ra,4(sp)
 8004d8c:	dec00404 	addi	sp,sp,16
 8004d90:	f800283a 	ret

08004d94 <_puts_r>:
 8004d94:	defff604 	addi	sp,sp,-40
 8004d98:	dc400715 	stw	r17,28(sp)
 8004d9c:	2023883a 	mov	r17,r4
 8004da0:	2809883a 	mov	r4,r5
 8004da4:	dfc00915 	stw	ra,36(sp)
 8004da8:	dcc00815 	stw	r19,32(sp)
 8004dac:	2827883a 	mov	r19,r5
 8004db0:	8004e480 	call	8004e48 <strlen>
 8004db4:	89400217 	ldw	r5,8(r17)
 8004db8:	00c20074 	movhi	r3,2049
 8004dbc:	18c6a304 	addi	r3,r3,6796
 8004dc0:	01c00044 	movi	r7,1
 8004dc4:	12000044 	addi	r8,r2,1
 8004dc8:	d8c00515 	stw	r3,20(sp)
 8004dcc:	d9c00615 	stw	r7,24(sp)
 8004dd0:	d8c00304 	addi	r3,sp,12
 8004dd4:	01c00084 	movi	r7,2
 8004dd8:	8809883a 	mov	r4,r17
 8004ddc:	d80d883a 	mov	r6,sp
 8004de0:	d8c00015 	stw	r3,0(sp)
 8004de4:	dcc00315 	stw	r19,12(sp)
 8004de8:	da000215 	stw	r8,8(sp)
 8004dec:	d9c00115 	stw	r7,4(sp)
 8004df0:	d8800415 	stw	r2,16(sp)
 8004df4:	800901c0 	call	800901c <__sfvwrite_r>
 8004df8:	00ffffc4 	movi	r3,-1
 8004dfc:	10000626 	beq	r2,zero,8004e18 <_puts_r+0x84>
 8004e00:	1805883a 	mov	r2,r3
 8004e04:	dfc00917 	ldw	ra,36(sp)
 8004e08:	dcc00817 	ldw	r19,32(sp)
 8004e0c:	dc400717 	ldw	r17,28(sp)
 8004e10:	dec00a04 	addi	sp,sp,40
 8004e14:	f800283a 	ret
 8004e18:	00c00284 	movi	r3,10
 8004e1c:	1805883a 	mov	r2,r3
 8004e20:	dfc00917 	ldw	ra,36(sp)
 8004e24:	dcc00817 	ldw	r19,32(sp)
 8004e28:	dc400717 	ldw	r17,28(sp)
 8004e2c:	dec00a04 	addi	sp,sp,40
 8004e30:	f800283a 	ret

08004e34 <puts>:
 8004e34:	00820074 	movhi	r2,2049
 8004e38:	108e5204 	addi	r2,r2,14664
 8004e3c:	200b883a 	mov	r5,r4
 8004e40:	11000017 	ldw	r4,0(r2)
 8004e44:	8004d941 	jmpi	8004d94 <_puts_r>

08004e48 <strlen>:
 8004e48:	208000cc 	andi	r2,r4,3
 8004e4c:	2011883a 	mov	r8,r4
 8004e50:	1000161e 	bne	r2,zero,8004eac <strlen+0x64>
 8004e54:	20c00017 	ldw	r3,0(r4)
 8004e58:	017fbff4 	movhi	r5,65279
 8004e5c:	297fbfc4 	addi	r5,r5,-257
 8004e60:	01e02074 	movhi	r7,32897
 8004e64:	39e02004 	addi	r7,r7,-32640
 8004e68:	1945883a 	add	r2,r3,r5
 8004e6c:	11c4703a 	and	r2,r2,r7
 8004e70:	00c6303a 	nor	r3,zero,r3
 8004e74:	1886703a 	and	r3,r3,r2
 8004e78:	18000c1e 	bne	r3,zero,8004eac <strlen+0x64>
 8004e7c:	280d883a 	mov	r6,r5
 8004e80:	380b883a 	mov	r5,r7
 8004e84:	21000104 	addi	r4,r4,4
 8004e88:	20800017 	ldw	r2,0(r4)
 8004e8c:	1187883a 	add	r3,r2,r6
 8004e90:	1946703a 	and	r3,r3,r5
 8004e94:	0084303a 	nor	r2,zero,r2
 8004e98:	10c4703a 	and	r2,r2,r3
 8004e9c:	103ff926 	beq	r2,zero,8004e84 <strlen+0x3c>
 8004ea0:	20800007 	ldb	r2,0(r4)
 8004ea4:	10000326 	beq	r2,zero,8004eb4 <strlen+0x6c>
 8004ea8:	21000044 	addi	r4,r4,1
 8004eac:	20800007 	ldb	r2,0(r4)
 8004eb0:	103ffd1e 	bne	r2,zero,8004ea8 <strlen+0x60>
 8004eb4:	2205c83a 	sub	r2,r4,r8
 8004eb8:	f800283a 	ret

08004ebc <__sprint_r>:
 8004ebc:	30800217 	ldw	r2,8(r6)
 8004ec0:	defffe04 	addi	sp,sp,-8
 8004ec4:	dc000015 	stw	r16,0(sp)
 8004ec8:	dfc00115 	stw	ra,4(sp)
 8004ecc:	3021883a 	mov	r16,r6
 8004ed0:	0007883a 	mov	r3,zero
 8004ed4:	1000061e 	bne	r2,zero,8004ef0 <__sprint_r+0x34>
 8004ed8:	1805883a 	mov	r2,r3
 8004edc:	30000115 	stw	zero,4(r6)
 8004ee0:	dfc00117 	ldw	ra,4(sp)
 8004ee4:	dc000017 	ldw	r16,0(sp)
 8004ee8:	dec00204 	addi	sp,sp,8
 8004eec:	f800283a 	ret
 8004ef0:	800901c0 	call	800901c <__sfvwrite_r>
 8004ef4:	1007883a 	mov	r3,r2
 8004ef8:	1805883a 	mov	r2,r3
 8004efc:	80000115 	stw	zero,4(r16)
 8004f00:	80000215 	stw	zero,8(r16)
 8004f04:	dfc00117 	ldw	ra,4(sp)
 8004f08:	dc000017 	ldw	r16,0(sp)
 8004f0c:	dec00204 	addi	sp,sp,8
 8004f10:	f800283a 	ret

08004f14 <___vfprintf_internal_r>:
 8004f14:	defea404 	addi	sp,sp,-1392
 8004f18:	dd815815 	stw	r22,1376(sp)
 8004f1c:	dc015215 	stw	r16,1352(sp)
 8004f20:	d9c15115 	stw	r7,1348(sp)
 8004f24:	dfc15b15 	stw	ra,1388(sp)
 8004f28:	df015a15 	stw	fp,1384(sp)
 8004f2c:	ddc15915 	stw	r23,1380(sp)
 8004f30:	dd415715 	stw	r21,1372(sp)
 8004f34:	dd015615 	stw	r20,1368(sp)
 8004f38:	dcc15515 	stw	r19,1364(sp)
 8004f3c:	dc815415 	stw	r18,1360(sp)
 8004f40:	dc415315 	stw	r17,1356(sp)
 8004f44:	282d883a 	mov	r22,r5
 8004f48:	3021883a 	mov	r16,r6
 8004f4c:	d9014f15 	stw	r4,1340(sp)
 8004f50:	80096400 	call	8009640 <_localeconv_r>
 8004f54:	10800017 	ldw	r2,0(r2)
 8004f58:	d9c15117 	ldw	r7,1348(sp)
 8004f5c:	d8814915 	stw	r2,1316(sp)
 8004f60:	d8814f17 	ldw	r2,1340(sp)
 8004f64:	10000226 	beq	r2,zero,8004f70 <___vfprintf_internal_r+0x5c>
 8004f68:	10800e17 	ldw	r2,56(r2)
 8004f6c:	10020d26 	beq	r2,zero,80057a4 <___vfprintf_internal_r+0x890>
 8004f70:	b080030b 	ldhu	r2,12(r22)
 8004f74:	1080020c 	andi	r2,r2,8
 8004f78:	10020e26 	beq	r2,zero,80057b4 <___vfprintf_internal_r+0x8a0>
 8004f7c:	b0800417 	ldw	r2,16(r22)
 8004f80:	10020c26 	beq	r2,zero,80057b4 <___vfprintf_internal_r+0x8a0>
 8004f84:	b200030b 	ldhu	r8,12(r22)
 8004f88:	00800284 	movi	r2,10
 8004f8c:	40c0068c 	andi	r3,r8,26
 8004f90:	18802f1e 	bne	r3,r2,8005050 <___vfprintf_internal_r+0x13c>
 8004f94:	b080038f 	ldh	r2,14(r22)
 8004f98:	10002d16 	blt	r2,zero,8005050 <___vfprintf_internal_r+0x13c>
 8004f9c:	b240038b 	ldhu	r9,14(r22)
 8004fa0:	b2800717 	ldw	r10,28(r22)
 8004fa4:	b2c00917 	ldw	r11,36(r22)
 8004fa8:	d9014f17 	ldw	r4,1340(sp)
 8004fac:	dc402904 	addi	r17,sp,164
 8004fb0:	d8804004 	addi	r2,sp,256
 8004fb4:	00c10004 	movi	r3,1024
 8004fb8:	423fff4c 	andi	r8,r8,65533
 8004fbc:	800d883a 	mov	r6,r16
 8004fc0:	880b883a 	mov	r5,r17
 8004fc4:	da002c0d 	sth	r8,176(sp)
 8004fc8:	da402c8d 	sth	r9,178(sp)
 8004fcc:	da803015 	stw	r10,192(sp)
 8004fd0:	dac03215 	stw	r11,200(sp)
 8004fd4:	d8802d15 	stw	r2,180(sp)
 8004fd8:	d8c02e15 	stw	r3,184(sp)
 8004fdc:	d8802915 	stw	r2,164(sp)
 8004fe0:	d8c02b15 	stw	r3,172(sp)
 8004fe4:	d8002f15 	stw	zero,188(sp)
 8004fe8:	8004f140 	call	8004f14 <___vfprintf_internal_r>
 8004fec:	d8814b15 	stw	r2,1324(sp)
 8004ff0:	10000416 	blt	r2,zero,8005004 <___vfprintf_internal_r+0xf0>
 8004ff4:	d9014f17 	ldw	r4,1340(sp)
 8004ff8:	880b883a 	mov	r5,r17
 8004ffc:	80086ec0 	call	80086ec <_fflush_r>
 8005000:	1002321e 	bne	r2,zero,80058cc <___vfprintf_internal_r+0x9b8>
 8005004:	d8802c0b 	ldhu	r2,176(sp)
 8005008:	1080100c 	andi	r2,r2,64
 800500c:	10000326 	beq	r2,zero,800501c <___vfprintf_internal_r+0x108>
 8005010:	b080030b 	ldhu	r2,12(r22)
 8005014:	10801014 	ori	r2,r2,64
 8005018:	b080030d 	sth	r2,12(r22)
 800501c:	d8814b17 	ldw	r2,1324(sp)
 8005020:	dfc15b17 	ldw	ra,1388(sp)
 8005024:	df015a17 	ldw	fp,1384(sp)
 8005028:	ddc15917 	ldw	r23,1380(sp)
 800502c:	dd815817 	ldw	r22,1376(sp)
 8005030:	dd415717 	ldw	r21,1372(sp)
 8005034:	dd015617 	ldw	r20,1368(sp)
 8005038:	dcc15517 	ldw	r19,1364(sp)
 800503c:	dc815417 	ldw	r18,1360(sp)
 8005040:	dc415317 	ldw	r17,1356(sp)
 8005044:	dc015217 	ldw	r16,1352(sp)
 8005048:	dec15c04 	addi	sp,sp,1392
 800504c:	f800283a 	ret
 8005050:	0005883a 	mov	r2,zero
 8005054:	0007883a 	mov	r3,zero
 8005058:	dd401904 	addi	r21,sp,100
 800505c:	d8814215 	stw	r2,1288(sp)
 8005060:	802f883a 	mov	r23,r16
 8005064:	d8c14315 	stw	r3,1292(sp)
 8005068:	d8014b15 	stw	zero,1324(sp)
 800506c:	d8014815 	stw	zero,1312(sp)
 8005070:	d8014415 	stw	zero,1296(sp)
 8005074:	d8014715 	stw	zero,1308(sp)
 8005078:	dd400c15 	stw	r21,48(sp)
 800507c:	d8000e15 	stw	zero,56(sp)
 8005080:	d8000d15 	stw	zero,52(sp)
 8005084:	b8800007 	ldb	r2,0(r23)
 8005088:	10001926 	beq	r2,zero,80050f0 <___vfprintf_internal_r+0x1dc>
 800508c:	00c00944 	movi	r3,37
 8005090:	10c01726 	beq	r2,r3,80050f0 <___vfprintf_internal_r+0x1dc>
 8005094:	b821883a 	mov	r16,r23
 8005098:	00000106 	br	80050a0 <___vfprintf_internal_r+0x18c>
 800509c:	10c00326 	beq	r2,r3,80050ac <___vfprintf_internal_r+0x198>
 80050a0:	84000044 	addi	r16,r16,1
 80050a4:	80800007 	ldb	r2,0(r16)
 80050a8:	103ffc1e 	bne	r2,zero,800509c <___vfprintf_internal_r+0x188>
 80050ac:	85e7c83a 	sub	r19,r16,r23
 80050b0:	98000e26 	beq	r19,zero,80050ec <___vfprintf_internal_r+0x1d8>
 80050b4:	dc800e17 	ldw	r18,56(sp)
 80050b8:	dc400d17 	ldw	r17,52(sp)
 80050bc:	008001c4 	movi	r2,7
 80050c0:	94e5883a 	add	r18,r18,r19
 80050c4:	8c400044 	addi	r17,r17,1
 80050c8:	adc00015 	stw	r23,0(r21)
 80050cc:	dc800e15 	stw	r18,56(sp)
 80050d0:	acc00115 	stw	r19,4(r21)
 80050d4:	dc400d15 	stw	r17,52(sp)
 80050d8:	14428b16 	blt	r2,r17,8005b08 <___vfprintf_internal_r+0xbf4>
 80050dc:	ad400204 	addi	r21,r21,8
 80050e0:	d9014b17 	ldw	r4,1324(sp)
 80050e4:	24c9883a 	add	r4,r4,r19
 80050e8:	d9014b15 	stw	r4,1324(sp)
 80050ec:	802f883a 	mov	r23,r16
 80050f0:	b8800007 	ldb	r2,0(r23)
 80050f4:	10013c26 	beq	r2,zero,80055e8 <___vfprintf_internal_r+0x6d4>
 80050f8:	bdc00044 	addi	r23,r23,1
 80050fc:	d8000405 	stb	zero,16(sp)
 8005100:	b8c00007 	ldb	r3,0(r23)
 8005104:	04ffffc4 	movi	r19,-1
 8005108:	d8014c15 	stw	zero,1328(sp)
 800510c:	d8014a15 	stw	zero,1320(sp)
 8005110:	d8c14d15 	stw	r3,1332(sp)
 8005114:	bdc00044 	addi	r23,r23,1
 8005118:	d9414d17 	ldw	r5,1332(sp)
 800511c:	00801604 	movi	r2,88
 8005120:	28fff804 	addi	r3,r5,-32
 8005124:	10c06036 	bltu	r2,r3,80052a8 <___vfprintf_internal_r+0x394>
 8005128:	18c5883a 	add	r2,r3,r3
 800512c:	1085883a 	add	r2,r2,r2
 8005130:	00c20034 	movhi	r3,2048
 8005134:	18d45104 	addi	r3,r3,20804
 8005138:	10c5883a 	add	r2,r2,r3
 800513c:	11000017 	ldw	r4,0(r2)
 8005140:	2000683a 	jmp	r4
 8005144:	080060b8 	rdprs	zero,at,386
 8005148:	080052a8 	cmpgeui	zero,at,330
 800514c:	080052a8 	cmpgeui	zero,at,330
 8005150:	080060a4 	muli	zero,at,386
 8005154:	080052a8 	cmpgeui	zero,at,330
 8005158:	080052a8 	cmpgeui	zero,at,330
 800515c:	080052a8 	cmpgeui	zero,at,330
 8005160:	080052a8 	cmpgeui	zero,at,330
 8005164:	080052a8 	cmpgeui	zero,at,330
 8005168:	080052a8 	cmpgeui	zero,at,330
 800516c:	08005e84 	addi	zero,at,378
 8005170:	08006094 	ori	zero,at,386
 8005174:	080052a8 	cmpgeui	zero,at,330
 8005178:	08005e9c 	xori	zero,at,378
 800517c:	08006130 	cmpltui	zero,at,388
 8005180:	080052a8 	cmpgeui	zero,at,330
 8005184:	0800611c 	xori	zero,at,388
 8005188:	080060e4 	muli	zero,at,387
 800518c:	080060e4 	muli	zero,at,387
 8005190:	080060e4 	muli	zero,at,387
 8005194:	080060e4 	muli	zero,at,387
 8005198:	080060e4 	muli	zero,at,387
 800519c:	080060e4 	muli	zero,at,387
 80051a0:	080060e4 	muli	zero,at,387
 80051a4:	080060e4 	muli	zero,at,387
 80051a8:	080060e4 	muli	zero,at,387
 80051ac:	080052a8 	cmpgeui	zero,at,330
 80051b0:	080052a8 	cmpgeui	zero,at,330
 80051b4:	080052a8 	cmpgeui	zero,at,330
 80051b8:	080052a8 	cmpgeui	zero,at,330
 80051bc:	080052a8 	cmpgeui	zero,at,330
 80051c0:	080052a8 	cmpgeui	zero,at,330
 80051c4:	080052a8 	cmpgeui	zero,at,330
 80051c8:	080052a8 	cmpgeui	zero,at,330
 80051cc:	080052a8 	cmpgeui	zero,at,330
 80051d0:	080052a8 	cmpgeui	zero,at,330
 80051d4:	08005900 	call	800590 <__alt_mem_onchip_memory2_3+0x7f9590>
 80051d8:	08005f6c 	andhi	zero,at,381
 80051dc:	080052a8 	cmpgeui	zero,at,330
 80051e0:	08005f6c 	andhi	zero,at,381
 80051e4:	080052a8 	cmpgeui	zero,at,330
 80051e8:	080052a8 	cmpgeui	zero,at,330
 80051ec:	080052a8 	cmpgeui	zero,at,330
 80051f0:	080052a8 	cmpgeui	zero,at,330
 80051f4:	080060d0 	cmplti	zero,at,387
 80051f8:	080052a8 	cmpgeui	zero,at,330
 80051fc:	080052a8 	cmpgeui	zero,at,330
 8005200:	080059b4 	orhi	zero,at,358
 8005204:	080052a8 	cmpgeui	zero,at,330
 8005208:	080052a8 	cmpgeui	zero,at,330
 800520c:	080052a8 	cmpgeui	zero,at,330
 8005210:	080052a8 	cmpgeui	zero,at,330
 8005214:	080052a8 	cmpgeui	zero,at,330
 8005218:	08005a00 	call	8005a0 <__alt_mem_onchip_memory2_3+0x7f95a0>
 800521c:	080052a8 	cmpgeui	zero,at,330
 8005220:	080052a8 	cmpgeui	zero,at,330
 8005224:	08006020 	cmpeqi	zero,at,384
 8005228:	080052a8 	cmpgeui	zero,at,330
 800522c:	080052a8 	cmpgeui	zero,at,330
 8005230:	080052a8 	cmpgeui	zero,at,330
 8005234:	080052a8 	cmpgeui	zero,at,330
 8005238:	080052a8 	cmpgeui	zero,at,330
 800523c:	080052a8 	cmpgeui	zero,at,330
 8005240:	080052a8 	cmpgeui	zero,at,330
 8005244:	080052a8 	cmpgeui	zero,at,330
 8005248:	080052a8 	cmpgeui	zero,at,330
 800524c:	080052a8 	cmpgeui	zero,at,330
 8005250:	08005ff4 	orhi	zero,at,383
 8005254:	0800590c 	andi	zero,at,356
 8005258:	08005f6c 	andhi	zero,at,381
 800525c:	08005f6c 	andhi	zero,at,381
 8005260:	08005f6c 	andhi	zero,at,381
 8005264:	08005f58 	cmpnei	zero,at,381
 8005268:	0800590c 	andi	zero,at,356
 800526c:	080052a8 	cmpgeui	zero,at,330
 8005270:	080052a8 	cmpgeui	zero,at,330
 8005274:	08005ee0 	cmpeqi	zero,at,379
 8005278:	080052a8 	cmpgeui	zero,at,330
 800527c:	08005eb0 	cmpltui	zero,at,378
 8005280:	080059c0 	call	80059c <__alt_mem_onchip_memory2_3+0x7f959c>
 8005284:	08005f10 	cmplti	zero,at,380
 8005288:	08005efc 	xorhi	zero,at,379
 800528c:	080052a8 	cmpgeui	zero,at,330
 8005290:	0800618c 	andi	zero,at,390
 8005294:	080052a8 	cmpgeui	zero,at,330
 8005298:	08005a0c 	andi	zero,at,360
 800529c:	080052a8 	cmpgeui	zero,at,330
 80052a0:	080052a8 	cmpgeui	zero,at,330
 80052a4:	08006084 	addi	zero,at,386
 80052a8:	d9014d17 	ldw	r4,1332(sp)
 80052ac:	2000ce26 	beq	r4,zero,80055e8 <___vfprintf_internal_r+0x6d4>
 80052b0:	01400044 	movi	r5,1
 80052b4:	d9800f04 	addi	r6,sp,60
 80052b8:	d9c14015 	stw	r7,1280(sp)
 80052bc:	d9414515 	stw	r5,1300(sp)
 80052c0:	d9814115 	stw	r6,1284(sp)
 80052c4:	280f883a 	mov	r7,r5
 80052c8:	d9000f05 	stb	r4,60(sp)
 80052cc:	d8000405 	stb	zero,16(sp)
 80052d0:	d8014615 	stw	zero,1304(sp)
 80052d4:	d8c14c17 	ldw	r3,1328(sp)
 80052d8:	1880008c 	andi	r2,r3,2
 80052dc:	1005003a 	cmpeq	r2,r2,zero
 80052e0:	d8815015 	stw	r2,1344(sp)
 80052e4:	1000031e 	bne	r2,zero,80052f4 <___vfprintf_internal_r+0x3e0>
 80052e8:	d9014517 	ldw	r4,1300(sp)
 80052ec:	21000084 	addi	r4,r4,2
 80052f0:	d9014515 	stw	r4,1300(sp)
 80052f4:	d9414c17 	ldw	r5,1328(sp)
 80052f8:	2940210c 	andi	r5,r5,132
 80052fc:	d9414e15 	stw	r5,1336(sp)
 8005300:	28002d1e 	bne	r5,zero,80053b8 <___vfprintf_internal_r+0x4a4>
 8005304:	d9814a17 	ldw	r6,1320(sp)
 8005308:	d8814517 	ldw	r2,1300(sp)
 800530c:	30a1c83a 	sub	r16,r6,r2
 8005310:	0400290e 	bge	zero,r16,80053b8 <___vfprintf_internal_r+0x4a4>
 8005314:	00800404 	movi	r2,16
 8005318:	1404580e 	bge	r2,r16,800647c <___vfprintf_internal_r+0x1568>
 800531c:	dc800e17 	ldw	r18,56(sp)
 8005320:	dc400d17 	ldw	r17,52(sp)
 8005324:	1027883a 	mov	r19,r2
 8005328:	07020074 	movhi	fp,2049
 800532c:	e706bf84 	addi	fp,fp,6910
 8005330:	050001c4 	movi	r20,7
 8005334:	00000306 	br	8005344 <___vfprintf_internal_r+0x430>
 8005338:	843ffc04 	addi	r16,r16,-16
 800533c:	ad400204 	addi	r21,r21,8
 8005340:	9c00130e 	bge	r19,r16,8005390 <___vfprintf_internal_r+0x47c>
 8005344:	94800404 	addi	r18,r18,16
 8005348:	8c400044 	addi	r17,r17,1
 800534c:	af000015 	stw	fp,0(r21)
 8005350:	acc00115 	stw	r19,4(r21)
 8005354:	dc800e15 	stw	r18,56(sp)
 8005358:	dc400d15 	stw	r17,52(sp)
 800535c:	a47ff60e 	bge	r20,r17,8005338 <___vfprintf_internal_r+0x424>
 8005360:	d9014f17 	ldw	r4,1340(sp)
 8005364:	b00b883a 	mov	r5,r22
 8005368:	d9800c04 	addi	r6,sp,48
 800536c:	d9c15115 	stw	r7,1348(sp)
 8005370:	8004ebc0 	call	8004ebc <__sprint_r>
 8005374:	d9c15117 	ldw	r7,1348(sp)
 8005378:	10009e1e 	bne	r2,zero,80055f4 <___vfprintf_internal_r+0x6e0>
 800537c:	843ffc04 	addi	r16,r16,-16
 8005380:	dc800e17 	ldw	r18,56(sp)
 8005384:	dc400d17 	ldw	r17,52(sp)
 8005388:	dd401904 	addi	r21,sp,100
 800538c:	9c3fed16 	blt	r19,r16,8005344 <___vfprintf_internal_r+0x430>
 8005390:	9425883a 	add	r18,r18,r16
 8005394:	8c400044 	addi	r17,r17,1
 8005398:	008001c4 	movi	r2,7
 800539c:	af000015 	stw	fp,0(r21)
 80053a0:	ac000115 	stw	r16,4(r21)
 80053a4:	dc800e15 	stw	r18,56(sp)
 80053a8:	dc400d15 	stw	r17,52(sp)
 80053ac:	1441f516 	blt	r2,r17,8005b84 <___vfprintf_internal_r+0xc70>
 80053b0:	ad400204 	addi	r21,r21,8
 80053b4:	00000206 	br	80053c0 <___vfprintf_internal_r+0x4ac>
 80053b8:	dc800e17 	ldw	r18,56(sp)
 80053bc:	dc400d17 	ldw	r17,52(sp)
 80053c0:	d8800407 	ldb	r2,16(sp)
 80053c4:	10000b26 	beq	r2,zero,80053f4 <___vfprintf_internal_r+0x4e0>
 80053c8:	00800044 	movi	r2,1
 80053cc:	94800044 	addi	r18,r18,1
 80053d0:	8c400044 	addi	r17,r17,1
 80053d4:	a8800115 	stw	r2,4(r21)
 80053d8:	d8c00404 	addi	r3,sp,16
 80053dc:	008001c4 	movi	r2,7
 80053e0:	a8c00015 	stw	r3,0(r21)
 80053e4:	dc800e15 	stw	r18,56(sp)
 80053e8:	dc400d15 	stw	r17,52(sp)
 80053ec:	1441da16 	blt	r2,r17,8005b58 <___vfprintf_internal_r+0xc44>
 80053f0:	ad400204 	addi	r21,r21,8
 80053f4:	d9015017 	ldw	r4,1344(sp)
 80053f8:	20000b1e 	bne	r4,zero,8005428 <___vfprintf_internal_r+0x514>
 80053fc:	d8800444 	addi	r2,sp,17
 8005400:	94800084 	addi	r18,r18,2
 8005404:	8c400044 	addi	r17,r17,1
 8005408:	a8800015 	stw	r2,0(r21)
 800540c:	00c00084 	movi	r3,2
 8005410:	008001c4 	movi	r2,7
 8005414:	a8c00115 	stw	r3,4(r21)
 8005418:	dc800e15 	stw	r18,56(sp)
 800541c:	dc400d15 	stw	r17,52(sp)
 8005420:	1441c216 	blt	r2,r17,8005b2c <___vfprintf_internal_r+0xc18>
 8005424:	ad400204 	addi	r21,r21,8
 8005428:	d9414e17 	ldw	r5,1336(sp)
 800542c:	00802004 	movi	r2,128
 8005430:	2880b126 	beq	r5,r2,80056f8 <___vfprintf_internal_r+0x7e4>
 8005434:	d8c14617 	ldw	r3,1304(sp)
 8005438:	19e1c83a 	sub	r16,r3,r7
 800543c:	0400260e 	bge	zero,r16,80054d8 <___vfprintf_internal_r+0x5c4>
 8005440:	00800404 	movi	r2,16
 8005444:	1403c90e 	bge	r2,r16,800636c <___vfprintf_internal_r+0x1458>
 8005448:	1027883a 	mov	r19,r2
 800544c:	07020074 	movhi	fp,2049
 8005450:	e706bb84 	addi	fp,fp,6894
 8005454:	050001c4 	movi	r20,7
 8005458:	00000306 	br	8005468 <___vfprintf_internal_r+0x554>
 800545c:	843ffc04 	addi	r16,r16,-16
 8005460:	ad400204 	addi	r21,r21,8
 8005464:	9c00130e 	bge	r19,r16,80054b4 <___vfprintf_internal_r+0x5a0>
 8005468:	94800404 	addi	r18,r18,16
 800546c:	8c400044 	addi	r17,r17,1
 8005470:	af000015 	stw	fp,0(r21)
 8005474:	acc00115 	stw	r19,4(r21)
 8005478:	dc800e15 	stw	r18,56(sp)
 800547c:	dc400d15 	stw	r17,52(sp)
 8005480:	a47ff60e 	bge	r20,r17,800545c <___vfprintf_internal_r+0x548>
 8005484:	d9014f17 	ldw	r4,1340(sp)
 8005488:	b00b883a 	mov	r5,r22
 800548c:	d9800c04 	addi	r6,sp,48
 8005490:	d9c15115 	stw	r7,1348(sp)
 8005494:	8004ebc0 	call	8004ebc <__sprint_r>
 8005498:	d9c15117 	ldw	r7,1348(sp)
 800549c:	1000551e 	bne	r2,zero,80055f4 <___vfprintf_internal_r+0x6e0>
 80054a0:	843ffc04 	addi	r16,r16,-16
 80054a4:	dc800e17 	ldw	r18,56(sp)
 80054a8:	dc400d17 	ldw	r17,52(sp)
 80054ac:	dd401904 	addi	r21,sp,100
 80054b0:	9c3fed16 	blt	r19,r16,8005468 <___vfprintf_internal_r+0x554>
 80054b4:	9425883a 	add	r18,r18,r16
 80054b8:	8c400044 	addi	r17,r17,1
 80054bc:	008001c4 	movi	r2,7
 80054c0:	af000015 	stw	fp,0(r21)
 80054c4:	ac000115 	stw	r16,4(r21)
 80054c8:	dc800e15 	stw	r18,56(sp)
 80054cc:	dc400d15 	stw	r17,52(sp)
 80054d0:	14418216 	blt	r2,r17,8005adc <___vfprintf_internal_r+0xbc8>
 80054d4:	ad400204 	addi	r21,r21,8
 80054d8:	d9014c17 	ldw	r4,1328(sp)
 80054dc:	2080400c 	andi	r2,r4,256
 80054e0:	10004a1e 	bne	r2,zero,800560c <___vfprintf_internal_r+0x6f8>
 80054e4:	d9414117 	ldw	r5,1284(sp)
 80054e8:	91e5883a 	add	r18,r18,r7
 80054ec:	8c400044 	addi	r17,r17,1
 80054f0:	008001c4 	movi	r2,7
 80054f4:	a9400015 	stw	r5,0(r21)
 80054f8:	a9c00115 	stw	r7,4(r21)
 80054fc:	dc800e15 	stw	r18,56(sp)
 8005500:	dc400d15 	stw	r17,52(sp)
 8005504:	14416716 	blt	r2,r17,8005aa4 <___vfprintf_internal_r+0xb90>
 8005508:	a8c00204 	addi	r3,r21,8
 800550c:	d9814c17 	ldw	r6,1328(sp)
 8005510:	3080010c 	andi	r2,r6,4
 8005514:	10002826 	beq	r2,zero,80055b8 <___vfprintf_internal_r+0x6a4>
 8005518:	d8814a17 	ldw	r2,1320(sp)
 800551c:	d9014517 	ldw	r4,1300(sp)
 8005520:	1121c83a 	sub	r16,r2,r4
 8005524:	0400240e 	bge	zero,r16,80055b8 <___vfprintf_internal_r+0x6a4>
 8005528:	00800404 	movi	r2,16
 800552c:	14044f0e 	bge	r2,r16,800666c <___vfprintf_internal_r+0x1758>
 8005530:	dc400d17 	ldw	r17,52(sp)
 8005534:	1027883a 	mov	r19,r2
 8005538:	07020074 	movhi	fp,2049
 800553c:	e706bf84 	addi	fp,fp,6910
 8005540:	050001c4 	movi	r20,7
 8005544:	00000306 	br	8005554 <___vfprintf_internal_r+0x640>
 8005548:	843ffc04 	addi	r16,r16,-16
 800554c:	18c00204 	addi	r3,r3,8
 8005550:	9c00110e 	bge	r19,r16,8005598 <___vfprintf_internal_r+0x684>
 8005554:	94800404 	addi	r18,r18,16
 8005558:	8c400044 	addi	r17,r17,1
 800555c:	1f000015 	stw	fp,0(r3)
 8005560:	1cc00115 	stw	r19,4(r3)
 8005564:	dc800e15 	stw	r18,56(sp)
 8005568:	dc400d15 	stw	r17,52(sp)
 800556c:	a47ff60e 	bge	r20,r17,8005548 <___vfprintf_internal_r+0x634>
 8005570:	d9014f17 	ldw	r4,1340(sp)
 8005574:	b00b883a 	mov	r5,r22
 8005578:	d9800c04 	addi	r6,sp,48
 800557c:	8004ebc0 	call	8004ebc <__sprint_r>
 8005580:	10001c1e 	bne	r2,zero,80055f4 <___vfprintf_internal_r+0x6e0>
 8005584:	843ffc04 	addi	r16,r16,-16
 8005588:	dc800e17 	ldw	r18,56(sp)
 800558c:	dc400d17 	ldw	r17,52(sp)
 8005590:	d8c01904 	addi	r3,sp,100
 8005594:	9c3fef16 	blt	r19,r16,8005554 <___vfprintf_internal_r+0x640>
 8005598:	9425883a 	add	r18,r18,r16
 800559c:	8c400044 	addi	r17,r17,1
 80055a0:	008001c4 	movi	r2,7
 80055a4:	1f000015 	stw	fp,0(r3)
 80055a8:	1c000115 	stw	r16,4(r3)
 80055ac:	dc800e15 	stw	r18,56(sp)
 80055b0:	dc400d15 	stw	r17,52(sp)
 80055b4:	1440cb16 	blt	r2,r17,80058e4 <___vfprintf_internal_r+0x9d0>
 80055b8:	d8814a17 	ldw	r2,1320(sp)
 80055bc:	d9414517 	ldw	r5,1300(sp)
 80055c0:	1140010e 	bge	r2,r5,80055c8 <___vfprintf_internal_r+0x6b4>
 80055c4:	2805883a 	mov	r2,r5
 80055c8:	d9814b17 	ldw	r6,1324(sp)
 80055cc:	308d883a 	add	r6,r6,r2
 80055d0:	d9814b15 	stw	r6,1324(sp)
 80055d4:	90013b1e 	bne	r18,zero,8005ac4 <___vfprintf_internal_r+0xbb0>
 80055d8:	d9c14017 	ldw	r7,1280(sp)
 80055dc:	dd401904 	addi	r21,sp,100
 80055e0:	d8000d15 	stw	zero,52(sp)
 80055e4:	003ea706 	br	8005084 <___vfprintf_internal_r+0x170>
 80055e8:	d8800e17 	ldw	r2,56(sp)
 80055ec:	10053f1e 	bne	r2,zero,8006aec <___vfprintf_internal_r+0x1bd8>
 80055f0:	d8000d15 	stw	zero,52(sp)
 80055f4:	b080030b 	ldhu	r2,12(r22)
 80055f8:	1080100c 	andi	r2,r2,64
 80055fc:	103e8726 	beq	r2,zero,800501c <___vfprintf_internal_r+0x108>
 8005600:	00bfffc4 	movi	r2,-1
 8005604:	d8814b15 	stw	r2,1324(sp)
 8005608:	003e8406 	br	800501c <___vfprintf_internal_r+0x108>
 800560c:	d9814d17 	ldw	r6,1332(sp)
 8005610:	00801944 	movi	r2,101
 8005614:	11806e16 	blt	r2,r6,80057d0 <___vfprintf_internal_r+0x8bc>
 8005618:	d9414717 	ldw	r5,1308(sp)
 800561c:	00c00044 	movi	r3,1
 8005620:	1943430e 	bge	r3,r5,8006330 <___vfprintf_internal_r+0x141c>
 8005624:	d8814117 	ldw	r2,1284(sp)
 8005628:	94800044 	addi	r18,r18,1
 800562c:	8c400044 	addi	r17,r17,1
 8005630:	a8800015 	stw	r2,0(r21)
 8005634:	008001c4 	movi	r2,7
 8005638:	a8c00115 	stw	r3,4(r21)
 800563c:	dc800e15 	stw	r18,56(sp)
 8005640:	dc400d15 	stw	r17,52(sp)
 8005644:	1441ca16 	blt	r2,r17,8005d70 <___vfprintf_internal_r+0xe5c>
 8005648:	a8c00204 	addi	r3,r21,8
 800564c:	d9014917 	ldw	r4,1316(sp)
 8005650:	00800044 	movi	r2,1
 8005654:	94800044 	addi	r18,r18,1
 8005658:	8c400044 	addi	r17,r17,1
 800565c:	18800115 	stw	r2,4(r3)
 8005660:	008001c4 	movi	r2,7
 8005664:	19000015 	stw	r4,0(r3)
 8005668:	dc800e15 	stw	r18,56(sp)
 800566c:	dc400d15 	stw	r17,52(sp)
 8005670:	1441b616 	blt	r2,r17,8005d4c <___vfprintf_internal_r+0xe38>
 8005674:	1cc00204 	addi	r19,r3,8
 8005678:	d9014217 	ldw	r4,1288(sp)
 800567c:	d9414317 	ldw	r5,1292(sp)
 8005680:	000d883a 	mov	r6,zero
 8005684:	000f883a 	mov	r7,zero
 8005688:	8003ed40 	call	8003ed4 <__nedf2>
 800568c:	10017426 	beq	r2,zero,8005c60 <___vfprintf_internal_r+0xd4c>
 8005690:	d9414717 	ldw	r5,1308(sp)
 8005694:	d9814117 	ldw	r6,1284(sp)
 8005698:	8c400044 	addi	r17,r17,1
 800569c:	2c85883a 	add	r2,r5,r18
 80056a0:	14bfffc4 	addi	r18,r2,-1
 80056a4:	28bfffc4 	addi	r2,r5,-1
 80056a8:	30c00044 	addi	r3,r6,1
 80056ac:	98800115 	stw	r2,4(r19)
 80056b0:	008001c4 	movi	r2,7
 80056b4:	98c00015 	stw	r3,0(r19)
 80056b8:	dc800e15 	stw	r18,56(sp)
 80056bc:	dc400d15 	stw	r17,52(sp)
 80056c0:	14418e16 	blt	r2,r17,8005cfc <___vfprintf_internal_r+0xde8>
 80056c4:	9cc00204 	addi	r19,r19,8
 80056c8:	d9414817 	ldw	r5,1312(sp)
 80056cc:	d8800804 	addi	r2,sp,32
 80056d0:	8c400044 	addi	r17,r17,1
 80056d4:	9165883a 	add	r18,r18,r5
 80056d8:	98800015 	stw	r2,0(r19)
 80056dc:	008001c4 	movi	r2,7
 80056e0:	99400115 	stw	r5,4(r19)
 80056e4:	dc800e15 	stw	r18,56(sp)
 80056e8:	dc400d15 	stw	r17,52(sp)
 80056ec:	1440ed16 	blt	r2,r17,8005aa4 <___vfprintf_internal_r+0xb90>
 80056f0:	98c00204 	addi	r3,r19,8
 80056f4:	003f8506 	br	800550c <___vfprintf_internal_r+0x5f8>
 80056f8:	d9814a17 	ldw	r6,1320(sp)
 80056fc:	d8814517 	ldw	r2,1300(sp)
 8005700:	30a1c83a 	sub	r16,r6,r2
 8005704:	043f4b0e 	bge	zero,r16,8005434 <___vfprintf_internal_r+0x520>
 8005708:	00800404 	movi	r2,16
 800570c:	1404340e 	bge	r2,r16,80067e0 <___vfprintf_internal_r+0x18cc>
 8005710:	1027883a 	mov	r19,r2
 8005714:	07020074 	movhi	fp,2049
 8005718:	e706bb84 	addi	fp,fp,6894
 800571c:	050001c4 	movi	r20,7
 8005720:	00000306 	br	8005730 <___vfprintf_internal_r+0x81c>
 8005724:	843ffc04 	addi	r16,r16,-16
 8005728:	ad400204 	addi	r21,r21,8
 800572c:	9c00130e 	bge	r19,r16,800577c <___vfprintf_internal_r+0x868>
 8005730:	94800404 	addi	r18,r18,16
 8005734:	8c400044 	addi	r17,r17,1
 8005738:	af000015 	stw	fp,0(r21)
 800573c:	acc00115 	stw	r19,4(r21)
 8005740:	dc800e15 	stw	r18,56(sp)
 8005744:	dc400d15 	stw	r17,52(sp)
 8005748:	a47ff60e 	bge	r20,r17,8005724 <___vfprintf_internal_r+0x810>
 800574c:	d9014f17 	ldw	r4,1340(sp)
 8005750:	b00b883a 	mov	r5,r22
 8005754:	d9800c04 	addi	r6,sp,48
 8005758:	d9c15115 	stw	r7,1348(sp)
 800575c:	8004ebc0 	call	8004ebc <__sprint_r>
 8005760:	d9c15117 	ldw	r7,1348(sp)
 8005764:	103fa31e 	bne	r2,zero,80055f4 <___vfprintf_internal_r+0x6e0>
 8005768:	843ffc04 	addi	r16,r16,-16
 800576c:	dc800e17 	ldw	r18,56(sp)
 8005770:	dc400d17 	ldw	r17,52(sp)
 8005774:	dd401904 	addi	r21,sp,100
 8005778:	9c3fed16 	blt	r19,r16,8005730 <___vfprintf_internal_r+0x81c>
 800577c:	9425883a 	add	r18,r18,r16
 8005780:	8c400044 	addi	r17,r17,1
 8005784:	008001c4 	movi	r2,7
 8005788:	af000015 	stw	fp,0(r21)
 800578c:	ac000115 	stw	r16,4(r21)
 8005790:	dc800e15 	stw	r18,56(sp)
 8005794:	dc400d15 	stw	r17,52(sp)
 8005798:	14416116 	blt	r2,r17,8005d20 <___vfprintf_internal_r+0xe0c>
 800579c:	ad400204 	addi	r21,r21,8
 80057a0:	003f2406 	br	8005434 <___vfprintf_internal_r+0x520>
 80057a4:	d9014f17 	ldw	r4,1340(sp)
 80057a8:	80089840 	call	8008984 <__sinit>
 80057ac:	d9c15117 	ldw	r7,1348(sp)
 80057b0:	003def06 	br	8004f70 <___vfprintf_internal_r+0x5c>
 80057b4:	d9014f17 	ldw	r4,1340(sp)
 80057b8:	b00b883a 	mov	r5,r22
 80057bc:	d9c15115 	stw	r7,1348(sp)
 80057c0:	8006de40 	call	8006de4 <__swsetup_r>
 80057c4:	d9c15117 	ldw	r7,1348(sp)
 80057c8:	103dee26 	beq	r2,zero,8004f84 <___vfprintf_internal_r+0x70>
 80057cc:	003f8c06 	br	8005600 <___vfprintf_internal_r+0x6ec>
 80057d0:	d9014217 	ldw	r4,1288(sp)
 80057d4:	d9414317 	ldw	r5,1292(sp)
 80057d8:	000d883a 	mov	r6,zero
 80057dc:	000f883a 	mov	r7,zero
 80057e0:	8003e4c0 	call	8003e4c <__eqdf2>
 80057e4:	1000f21e 	bne	r2,zero,8005bb0 <___vfprintf_internal_r+0xc9c>
 80057e8:	00820074 	movhi	r2,2049
 80057ec:	1086bb04 	addi	r2,r2,6892
 80057f0:	94800044 	addi	r18,r18,1
 80057f4:	8c400044 	addi	r17,r17,1
 80057f8:	a8800015 	stw	r2,0(r21)
 80057fc:	00c00044 	movi	r3,1
 8005800:	008001c4 	movi	r2,7
 8005804:	a8c00115 	stw	r3,4(r21)
 8005808:	dc800e15 	stw	r18,56(sp)
 800580c:	dc400d15 	stw	r17,52(sp)
 8005810:	1442fa16 	blt	r2,r17,80063fc <___vfprintf_internal_r+0x14e8>
 8005814:	a8c00204 	addi	r3,r21,8
 8005818:	d8800517 	ldw	r2,20(sp)
 800581c:	d9014717 	ldw	r4,1308(sp)
 8005820:	11015c0e 	bge	r2,r4,8005d94 <___vfprintf_internal_r+0xe80>
 8005824:	dc400d17 	ldw	r17,52(sp)
 8005828:	d9814917 	ldw	r6,1316(sp)
 800582c:	00800044 	movi	r2,1
 8005830:	94800044 	addi	r18,r18,1
 8005834:	8c400044 	addi	r17,r17,1
 8005838:	18800115 	stw	r2,4(r3)
 800583c:	008001c4 	movi	r2,7
 8005840:	19800015 	stw	r6,0(r3)
 8005844:	dc800e15 	stw	r18,56(sp)
 8005848:	dc400d15 	stw	r17,52(sp)
 800584c:	14431016 	blt	r2,r17,8006490 <___vfprintf_internal_r+0x157c>
 8005850:	18c00204 	addi	r3,r3,8
 8005854:	d8814717 	ldw	r2,1308(sp)
 8005858:	143fffc4 	addi	r16,r2,-1
 800585c:	043f2b0e 	bge	zero,r16,800550c <___vfprintf_internal_r+0x5f8>
 8005860:	00800404 	movi	r2,16
 8005864:	1402a20e 	bge	r2,r16,80062f0 <___vfprintf_internal_r+0x13dc>
 8005868:	dc400d17 	ldw	r17,52(sp)
 800586c:	1027883a 	mov	r19,r2
 8005870:	07020074 	movhi	fp,2049
 8005874:	e706bb84 	addi	fp,fp,6894
 8005878:	050001c4 	movi	r20,7
 800587c:	00000306 	br	800588c <___vfprintf_internal_r+0x978>
 8005880:	18c00204 	addi	r3,r3,8
 8005884:	843ffc04 	addi	r16,r16,-16
 8005888:	9c029c0e 	bge	r19,r16,80062fc <___vfprintf_internal_r+0x13e8>
 800588c:	94800404 	addi	r18,r18,16
 8005890:	8c400044 	addi	r17,r17,1
 8005894:	1f000015 	stw	fp,0(r3)
 8005898:	1cc00115 	stw	r19,4(r3)
 800589c:	dc800e15 	stw	r18,56(sp)
 80058a0:	dc400d15 	stw	r17,52(sp)
 80058a4:	a47ff60e 	bge	r20,r17,8005880 <___vfprintf_internal_r+0x96c>
 80058a8:	d9014f17 	ldw	r4,1340(sp)
 80058ac:	b00b883a 	mov	r5,r22
 80058b0:	d9800c04 	addi	r6,sp,48
 80058b4:	8004ebc0 	call	8004ebc <__sprint_r>
 80058b8:	103f4e1e 	bne	r2,zero,80055f4 <___vfprintf_internal_r+0x6e0>
 80058bc:	dc800e17 	ldw	r18,56(sp)
 80058c0:	dc400d17 	ldw	r17,52(sp)
 80058c4:	d8c01904 	addi	r3,sp,100
 80058c8:	003fee06 	br	8005884 <___vfprintf_internal_r+0x970>
 80058cc:	d8802c0b 	ldhu	r2,176(sp)
 80058d0:	00ffffc4 	movi	r3,-1
 80058d4:	d8c14b15 	stw	r3,1324(sp)
 80058d8:	1080100c 	andi	r2,r2,64
 80058dc:	103dcc1e 	bne	r2,zero,8005010 <___vfprintf_internal_r+0xfc>
 80058e0:	003dce06 	br	800501c <___vfprintf_internal_r+0x108>
 80058e4:	d9014f17 	ldw	r4,1340(sp)
 80058e8:	b00b883a 	mov	r5,r22
 80058ec:	d9800c04 	addi	r6,sp,48
 80058f0:	8004ebc0 	call	8004ebc <__sprint_r>
 80058f4:	103f3f1e 	bne	r2,zero,80055f4 <___vfprintf_internal_r+0x6e0>
 80058f8:	dc800e17 	ldw	r18,56(sp)
 80058fc:	003f2e06 	br	80055b8 <___vfprintf_internal_r+0x6a4>
 8005900:	d9414c17 	ldw	r5,1328(sp)
 8005904:	29400414 	ori	r5,r5,16
 8005908:	d9414c15 	stw	r5,1328(sp)
 800590c:	d9814c17 	ldw	r6,1328(sp)
 8005910:	3080080c 	andi	r2,r6,32
 8005914:	10014f1e 	bne	r2,zero,8005e54 <___vfprintf_internal_r+0xf40>
 8005918:	d8c14c17 	ldw	r3,1328(sp)
 800591c:	1880040c 	andi	r2,r3,16
 8005920:	1002ea1e 	bne	r2,zero,80064cc <___vfprintf_internal_r+0x15b8>
 8005924:	d9014c17 	ldw	r4,1328(sp)
 8005928:	2080100c 	andi	r2,r4,64
 800592c:	1002e726 	beq	r2,zero,80064cc <___vfprintf_internal_r+0x15b8>
 8005930:	3880000f 	ldh	r2,0(r7)
 8005934:	39c00104 	addi	r7,r7,4
 8005938:	d9c14015 	stw	r7,1280(sp)
 800593c:	1023d7fa 	srai	r17,r2,31
 8005940:	1021883a 	mov	r16,r2
 8005944:	88037216 	blt	r17,zero,8006710 <___vfprintf_internal_r+0x17fc>
 8005948:	01000044 	movi	r4,1
 800594c:	98000416 	blt	r19,zero,8005960 <___vfprintf_internal_r+0xa4c>
 8005950:	d8c14c17 	ldw	r3,1328(sp)
 8005954:	00bfdfc4 	movi	r2,-129
 8005958:	1886703a 	and	r3,r3,r2
 800595c:	d8c14c15 	stw	r3,1328(sp)
 8005960:	8444b03a 	or	r2,r16,r17
 8005964:	1002261e 	bne	r2,zero,8006200 <___vfprintf_internal_r+0x12ec>
 8005968:	9802251e 	bne	r19,zero,8006200 <___vfprintf_internal_r+0x12ec>
 800596c:	20803fcc 	andi	r2,r4,255
 8005970:	10029b26 	beq	r2,zero,80063e0 <___vfprintf_internal_r+0x14cc>
 8005974:	d8c01904 	addi	r3,sp,100
 8005978:	dd000f04 	addi	r20,sp,60
 800597c:	d8c14115 	stw	r3,1284(sp)
 8005980:	d8c14117 	ldw	r3,1284(sp)
 8005984:	dcc14515 	stw	r19,1300(sp)
 8005988:	a0c5c83a 	sub	r2,r20,r3
 800598c:	11c00a04 	addi	r7,r2,40
 8005990:	99c0010e 	bge	r19,r7,8005998 <___vfprintf_internal_r+0xa84>
 8005994:	d9c14515 	stw	r7,1300(sp)
 8005998:	dcc14615 	stw	r19,1304(sp)
 800599c:	d8800407 	ldb	r2,16(sp)
 80059a0:	103e4c26 	beq	r2,zero,80052d4 <___vfprintf_internal_r+0x3c0>
 80059a4:	d8814517 	ldw	r2,1300(sp)
 80059a8:	10800044 	addi	r2,r2,1
 80059ac:	d8814515 	stw	r2,1300(sp)
 80059b0:	003e4806 	br	80052d4 <___vfprintf_internal_r+0x3c0>
 80059b4:	d9814c17 	ldw	r6,1328(sp)
 80059b8:	31800414 	ori	r6,r6,16
 80059bc:	d9814c15 	stw	r6,1328(sp)
 80059c0:	d8c14c17 	ldw	r3,1328(sp)
 80059c4:	1880080c 	andi	r2,r3,32
 80059c8:	1001271e 	bne	r2,zero,8005e68 <___vfprintf_internal_r+0xf54>
 80059cc:	d9414c17 	ldw	r5,1328(sp)
 80059d0:	2880040c 	andi	r2,r5,16
 80059d4:	1002b61e 	bne	r2,zero,80064b0 <___vfprintf_internal_r+0x159c>
 80059d8:	d9814c17 	ldw	r6,1328(sp)
 80059dc:	3080100c 	andi	r2,r6,64
 80059e0:	1002b326 	beq	r2,zero,80064b0 <___vfprintf_internal_r+0x159c>
 80059e4:	3c00000b 	ldhu	r16,0(r7)
 80059e8:	0009883a 	mov	r4,zero
 80059ec:	39c00104 	addi	r7,r7,4
 80059f0:	0023883a 	mov	r17,zero
 80059f4:	d9c14015 	stw	r7,1280(sp)
 80059f8:	d8000405 	stb	zero,16(sp)
 80059fc:	003fd306 	br	800594c <___vfprintf_internal_r+0xa38>
 8005a00:	d9014c17 	ldw	r4,1328(sp)
 8005a04:	21000414 	ori	r4,r4,16
 8005a08:	d9014c15 	stw	r4,1328(sp)
 8005a0c:	d9414c17 	ldw	r5,1328(sp)
 8005a10:	2880080c 	andi	r2,r5,32
 8005a14:	1001081e 	bne	r2,zero,8005e38 <___vfprintf_internal_r+0xf24>
 8005a18:	d8c14c17 	ldw	r3,1328(sp)
 8005a1c:	1880040c 	andi	r2,r3,16
 8005a20:	1002b01e 	bne	r2,zero,80064e4 <___vfprintf_internal_r+0x15d0>
 8005a24:	d9014c17 	ldw	r4,1328(sp)
 8005a28:	2080100c 	andi	r2,r4,64
 8005a2c:	1002ad26 	beq	r2,zero,80064e4 <___vfprintf_internal_r+0x15d0>
 8005a30:	3c00000b 	ldhu	r16,0(r7)
 8005a34:	01000044 	movi	r4,1
 8005a38:	39c00104 	addi	r7,r7,4
 8005a3c:	0023883a 	mov	r17,zero
 8005a40:	d9c14015 	stw	r7,1280(sp)
 8005a44:	d8000405 	stb	zero,16(sp)
 8005a48:	003fc006 	br	800594c <___vfprintf_internal_r+0xa38>
 8005a4c:	d9014f17 	ldw	r4,1340(sp)
 8005a50:	b00b883a 	mov	r5,r22
 8005a54:	d9800c04 	addi	r6,sp,48
 8005a58:	8004ebc0 	call	8004ebc <__sprint_r>
 8005a5c:	103ee51e 	bne	r2,zero,80055f4 <___vfprintf_internal_r+0x6e0>
 8005a60:	dc800e17 	ldw	r18,56(sp)
 8005a64:	d8c01904 	addi	r3,sp,100
 8005a68:	d9814c17 	ldw	r6,1328(sp)
 8005a6c:	3080004c 	andi	r2,r6,1
 8005a70:	1005003a 	cmpeq	r2,r2,zero
 8005a74:	103ea51e 	bne	r2,zero,800550c <___vfprintf_internal_r+0x5f8>
 8005a78:	00800044 	movi	r2,1
 8005a7c:	dc400d17 	ldw	r17,52(sp)
 8005a80:	18800115 	stw	r2,4(r3)
 8005a84:	d8814917 	ldw	r2,1316(sp)
 8005a88:	94800044 	addi	r18,r18,1
 8005a8c:	8c400044 	addi	r17,r17,1
 8005a90:	18800015 	stw	r2,0(r3)
 8005a94:	008001c4 	movi	r2,7
 8005a98:	dc800e15 	stw	r18,56(sp)
 8005a9c:	dc400d15 	stw	r17,52(sp)
 8005aa0:	14421e0e 	bge	r2,r17,800631c <___vfprintf_internal_r+0x1408>
 8005aa4:	d9014f17 	ldw	r4,1340(sp)
 8005aa8:	b00b883a 	mov	r5,r22
 8005aac:	d9800c04 	addi	r6,sp,48
 8005ab0:	8004ebc0 	call	8004ebc <__sprint_r>
 8005ab4:	103ecf1e 	bne	r2,zero,80055f4 <___vfprintf_internal_r+0x6e0>
 8005ab8:	dc800e17 	ldw	r18,56(sp)
 8005abc:	d8c01904 	addi	r3,sp,100
 8005ac0:	003e9206 	br	800550c <___vfprintf_internal_r+0x5f8>
 8005ac4:	d9014f17 	ldw	r4,1340(sp)
 8005ac8:	b00b883a 	mov	r5,r22
 8005acc:	d9800c04 	addi	r6,sp,48
 8005ad0:	8004ebc0 	call	8004ebc <__sprint_r>
 8005ad4:	103ec026 	beq	r2,zero,80055d8 <___vfprintf_internal_r+0x6c4>
 8005ad8:	003ec606 	br	80055f4 <___vfprintf_internal_r+0x6e0>
 8005adc:	d9014f17 	ldw	r4,1340(sp)
 8005ae0:	b00b883a 	mov	r5,r22
 8005ae4:	d9800c04 	addi	r6,sp,48
 8005ae8:	d9c15115 	stw	r7,1348(sp)
 8005aec:	8004ebc0 	call	8004ebc <__sprint_r>
 8005af0:	d9c15117 	ldw	r7,1348(sp)
 8005af4:	103ebf1e 	bne	r2,zero,80055f4 <___vfprintf_internal_r+0x6e0>
 8005af8:	dc800e17 	ldw	r18,56(sp)
 8005afc:	dc400d17 	ldw	r17,52(sp)
 8005b00:	dd401904 	addi	r21,sp,100
 8005b04:	003e7406 	br	80054d8 <___vfprintf_internal_r+0x5c4>
 8005b08:	d9014f17 	ldw	r4,1340(sp)
 8005b0c:	b00b883a 	mov	r5,r22
 8005b10:	d9800c04 	addi	r6,sp,48
 8005b14:	d9c15115 	stw	r7,1348(sp)
 8005b18:	8004ebc0 	call	8004ebc <__sprint_r>
 8005b1c:	d9c15117 	ldw	r7,1348(sp)
 8005b20:	103eb41e 	bne	r2,zero,80055f4 <___vfprintf_internal_r+0x6e0>
 8005b24:	dd401904 	addi	r21,sp,100
 8005b28:	003d6d06 	br	80050e0 <___vfprintf_internal_r+0x1cc>
 8005b2c:	d9014f17 	ldw	r4,1340(sp)
 8005b30:	b00b883a 	mov	r5,r22
 8005b34:	d9800c04 	addi	r6,sp,48
 8005b38:	d9c15115 	stw	r7,1348(sp)
 8005b3c:	8004ebc0 	call	8004ebc <__sprint_r>
 8005b40:	d9c15117 	ldw	r7,1348(sp)
 8005b44:	103eab1e 	bne	r2,zero,80055f4 <___vfprintf_internal_r+0x6e0>
 8005b48:	dc800e17 	ldw	r18,56(sp)
 8005b4c:	dc400d17 	ldw	r17,52(sp)
 8005b50:	dd401904 	addi	r21,sp,100
 8005b54:	003e3406 	br	8005428 <___vfprintf_internal_r+0x514>
 8005b58:	d9014f17 	ldw	r4,1340(sp)
 8005b5c:	b00b883a 	mov	r5,r22
 8005b60:	d9800c04 	addi	r6,sp,48
 8005b64:	d9c15115 	stw	r7,1348(sp)
 8005b68:	8004ebc0 	call	8004ebc <__sprint_r>
 8005b6c:	d9c15117 	ldw	r7,1348(sp)
 8005b70:	103ea01e 	bne	r2,zero,80055f4 <___vfprintf_internal_r+0x6e0>
 8005b74:	dc800e17 	ldw	r18,56(sp)
 8005b78:	dc400d17 	ldw	r17,52(sp)
 8005b7c:	dd401904 	addi	r21,sp,100
 8005b80:	003e1c06 	br	80053f4 <___vfprintf_internal_r+0x4e0>
 8005b84:	d9014f17 	ldw	r4,1340(sp)
 8005b88:	b00b883a 	mov	r5,r22
 8005b8c:	d9800c04 	addi	r6,sp,48
 8005b90:	d9c15115 	stw	r7,1348(sp)
 8005b94:	8004ebc0 	call	8004ebc <__sprint_r>
 8005b98:	d9c15117 	ldw	r7,1348(sp)
 8005b9c:	103e951e 	bne	r2,zero,80055f4 <___vfprintf_internal_r+0x6e0>
 8005ba0:	dc800e17 	ldw	r18,56(sp)
 8005ba4:	dc400d17 	ldw	r17,52(sp)
 8005ba8:	dd401904 	addi	r21,sp,100
 8005bac:	003e0406 	br	80053c0 <___vfprintf_internal_r+0x4ac>
 8005bb0:	d9000517 	ldw	r4,20(sp)
 8005bb4:	0102520e 	bge	zero,r4,8006500 <___vfprintf_internal_r+0x15ec>
 8005bb8:	d9814717 	ldw	r6,1308(sp)
 8005bbc:	21807a16 	blt	r4,r6,8005da8 <___vfprintf_internal_r+0xe94>
 8005bc0:	d8814117 	ldw	r2,1284(sp)
 8005bc4:	91a5883a 	add	r18,r18,r6
 8005bc8:	8c400044 	addi	r17,r17,1
 8005bcc:	a8800015 	stw	r2,0(r21)
 8005bd0:	008001c4 	movi	r2,7
 8005bd4:	a9800115 	stw	r6,4(r21)
 8005bd8:	dc800e15 	stw	r18,56(sp)
 8005bdc:	dc400d15 	stw	r17,52(sp)
 8005be0:	1442f616 	blt	r2,r17,80067bc <___vfprintf_internal_r+0x18a8>
 8005be4:	a8c00204 	addi	r3,r21,8
 8005be8:	d9414717 	ldw	r5,1308(sp)
 8005bec:	2161c83a 	sub	r16,r4,r5
 8005bf0:	043f9d0e 	bge	zero,r16,8005a68 <___vfprintf_internal_r+0xb54>
 8005bf4:	00800404 	movi	r2,16
 8005bf8:	1402130e 	bge	r2,r16,8006448 <___vfprintf_internal_r+0x1534>
 8005bfc:	dc400d17 	ldw	r17,52(sp)
 8005c00:	1027883a 	mov	r19,r2
 8005c04:	07020074 	movhi	fp,2049
 8005c08:	e706bb84 	addi	fp,fp,6894
 8005c0c:	050001c4 	movi	r20,7
 8005c10:	00000306 	br	8005c20 <___vfprintf_internal_r+0xd0c>
 8005c14:	18c00204 	addi	r3,r3,8
 8005c18:	843ffc04 	addi	r16,r16,-16
 8005c1c:	9c020d0e 	bge	r19,r16,8006454 <___vfprintf_internal_r+0x1540>
 8005c20:	94800404 	addi	r18,r18,16
 8005c24:	8c400044 	addi	r17,r17,1
 8005c28:	1f000015 	stw	fp,0(r3)
 8005c2c:	1cc00115 	stw	r19,4(r3)
 8005c30:	dc800e15 	stw	r18,56(sp)
 8005c34:	dc400d15 	stw	r17,52(sp)
 8005c38:	a47ff60e 	bge	r20,r17,8005c14 <___vfprintf_internal_r+0xd00>
 8005c3c:	d9014f17 	ldw	r4,1340(sp)
 8005c40:	b00b883a 	mov	r5,r22
 8005c44:	d9800c04 	addi	r6,sp,48
 8005c48:	8004ebc0 	call	8004ebc <__sprint_r>
 8005c4c:	103e691e 	bne	r2,zero,80055f4 <___vfprintf_internal_r+0x6e0>
 8005c50:	dc800e17 	ldw	r18,56(sp)
 8005c54:	dc400d17 	ldw	r17,52(sp)
 8005c58:	d8c01904 	addi	r3,sp,100
 8005c5c:	003fee06 	br	8005c18 <___vfprintf_internal_r+0xd04>
 8005c60:	d8814717 	ldw	r2,1308(sp)
 8005c64:	143fffc4 	addi	r16,r2,-1
 8005c68:	043e970e 	bge	zero,r16,80056c8 <___vfprintf_internal_r+0x7b4>
 8005c6c:	00800404 	movi	r2,16
 8005c70:	1400180e 	bge	r2,r16,8005cd4 <___vfprintf_internal_r+0xdc0>
 8005c74:	1029883a 	mov	r20,r2
 8005c78:	07020074 	movhi	fp,2049
 8005c7c:	e706bb84 	addi	fp,fp,6894
 8005c80:	054001c4 	movi	r21,7
 8005c84:	00000306 	br	8005c94 <___vfprintf_internal_r+0xd80>
 8005c88:	9cc00204 	addi	r19,r19,8
 8005c8c:	843ffc04 	addi	r16,r16,-16
 8005c90:	a400120e 	bge	r20,r16,8005cdc <___vfprintf_internal_r+0xdc8>
 8005c94:	94800404 	addi	r18,r18,16
 8005c98:	8c400044 	addi	r17,r17,1
 8005c9c:	9f000015 	stw	fp,0(r19)
 8005ca0:	9d000115 	stw	r20,4(r19)
 8005ca4:	dc800e15 	stw	r18,56(sp)
 8005ca8:	dc400d15 	stw	r17,52(sp)
 8005cac:	ac7ff60e 	bge	r21,r17,8005c88 <___vfprintf_internal_r+0xd74>
 8005cb0:	d9014f17 	ldw	r4,1340(sp)
 8005cb4:	b00b883a 	mov	r5,r22
 8005cb8:	d9800c04 	addi	r6,sp,48
 8005cbc:	8004ebc0 	call	8004ebc <__sprint_r>
 8005cc0:	103e4c1e 	bne	r2,zero,80055f4 <___vfprintf_internal_r+0x6e0>
 8005cc4:	dc800e17 	ldw	r18,56(sp)
 8005cc8:	dc400d17 	ldw	r17,52(sp)
 8005ccc:	dcc01904 	addi	r19,sp,100
 8005cd0:	003fee06 	br	8005c8c <___vfprintf_internal_r+0xd78>
 8005cd4:	07020074 	movhi	fp,2049
 8005cd8:	e706bb84 	addi	fp,fp,6894
 8005cdc:	9425883a 	add	r18,r18,r16
 8005ce0:	8c400044 	addi	r17,r17,1
 8005ce4:	008001c4 	movi	r2,7
 8005ce8:	9f000015 	stw	fp,0(r19)
 8005cec:	9c000115 	stw	r16,4(r19)
 8005cf0:	dc800e15 	stw	r18,56(sp)
 8005cf4:	dc400d15 	stw	r17,52(sp)
 8005cf8:	147e720e 	bge	r2,r17,80056c4 <___vfprintf_internal_r+0x7b0>
 8005cfc:	d9014f17 	ldw	r4,1340(sp)
 8005d00:	b00b883a 	mov	r5,r22
 8005d04:	d9800c04 	addi	r6,sp,48
 8005d08:	8004ebc0 	call	8004ebc <__sprint_r>
 8005d0c:	103e391e 	bne	r2,zero,80055f4 <___vfprintf_internal_r+0x6e0>
 8005d10:	dc800e17 	ldw	r18,56(sp)
 8005d14:	dc400d17 	ldw	r17,52(sp)
 8005d18:	dcc01904 	addi	r19,sp,100
 8005d1c:	003e6a06 	br	80056c8 <___vfprintf_internal_r+0x7b4>
 8005d20:	d9014f17 	ldw	r4,1340(sp)
 8005d24:	b00b883a 	mov	r5,r22
 8005d28:	d9800c04 	addi	r6,sp,48
 8005d2c:	d9c15115 	stw	r7,1348(sp)
 8005d30:	8004ebc0 	call	8004ebc <__sprint_r>
 8005d34:	d9c15117 	ldw	r7,1348(sp)
 8005d38:	103e2e1e 	bne	r2,zero,80055f4 <___vfprintf_internal_r+0x6e0>
 8005d3c:	dc800e17 	ldw	r18,56(sp)
 8005d40:	dc400d17 	ldw	r17,52(sp)
 8005d44:	dd401904 	addi	r21,sp,100
 8005d48:	003dba06 	br	8005434 <___vfprintf_internal_r+0x520>
 8005d4c:	d9014f17 	ldw	r4,1340(sp)
 8005d50:	b00b883a 	mov	r5,r22
 8005d54:	d9800c04 	addi	r6,sp,48
 8005d58:	8004ebc0 	call	8004ebc <__sprint_r>
 8005d5c:	103e251e 	bne	r2,zero,80055f4 <___vfprintf_internal_r+0x6e0>
 8005d60:	dc800e17 	ldw	r18,56(sp)
 8005d64:	dc400d17 	ldw	r17,52(sp)
 8005d68:	dcc01904 	addi	r19,sp,100
 8005d6c:	003e4206 	br	8005678 <___vfprintf_internal_r+0x764>
 8005d70:	d9014f17 	ldw	r4,1340(sp)
 8005d74:	b00b883a 	mov	r5,r22
 8005d78:	d9800c04 	addi	r6,sp,48
 8005d7c:	8004ebc0 	call	8004ebc <__sprint_r>
 8005d80:	103e1c1e 	bne	r2,zero,80055f4 <___vfprintf_internal_r+0x6e0>
 8005d84:	dc800e17 	ldw	r18,56(sp)
 8005d88:	dc400d17 	ldw	r17,52(sp)
 8005d8c:	d8c01904 	addi	r3,sp,100
 8005d90:	003e2e06 	br	800564c <___vfprintf_internal_r+0x738>
 8005d94:	d9414c17 	ldw	r5,1328(sp)
 8005d98:	2880004c 	andi	r2,r5,1
 8005d9c:	1005003a 	cmpeq	r2,r2,zero
 8005da0:	103dda1e 	bne	r2,zero,800550c <___vfprintf_internal_r+0x5f8>
 8005da4:	003e9f06 	br	8005824 <___vfprintf_internal_r+0x910>
 8005da8:	d8c14117 	ldw	r3,1284(sp)
 8005dac:	9125883a 	add	r18,r18,r4
 8005db0:	8c400044 	addi	r17,r17,1
 8005db4:	008001c4 	movi	r2,7
 8005db8:	a8c00015 	stw	r3,0(r21)
 8005dbc:	a9000115 	stw	r4,4(r21)
 8005dc0:	dc800e15 	stw	r18,56(sp)
 8005dc4:	dc400d15 	stw	r17,52(sp)
 8005dc8:	14426616 	blt	r2,r17,8006764 <___vfprintf_internal_r+0x1850>
 8005dcc:	a8c00204 	addi	r3,r21,8
 8005dd0:	d9414917 	ldw	r5,1316(sp)
 8005dd4:	00800044 	movi	r2,1
 8005dd8:	94800044 	addi	r18,r18,1
 8005ddc:	8c400044 	addi	r17,r17,1
 8005de0:	18800115 	stw	r2,4(r3)
 8005de4:	008001c4 	movi	r2,7
 8005de8:	19400015 	stw	r5,0(r3)
 8005dec:	dc800e15 	stw	r18,56(sp)
 8005df0:	dc400d15 	stw	r17,52(sp)
 8005df4:	2021883a 	mov	r16,r4
 8005df8:	14425016 	blt	r2,r17,800673c <___vfprintf_internal_r+0x1828>
 8005dfc:	19400204 	addi	r5,r3,8
 8005e00:	d9814717 	ldw	r6,1308(sp)
 8005e04:	8c400044 	addi	r17,r17,1
 8005e08:	dc400d15 	stw	r17,52(sp)
 8005e0c:	3107c83a 	sub	r3,r6,r4
 8005e10:	d9014117 	ldw	r4,1284(sp)
 8005e14:	90e5883a 	add	r18,r18,r3
 8005e18:	28c00115 	stw	r3,4(r5)
 8005e1c:	8105883a 	add	r2,r16,r4
 8005e20:	28800015 	stw	r2,0(r5)
 8005e24:	008001c4 	movi	r2,7
 8005e28:	dc800e15 	stw	r18,56(sp)
 8005e2c:	147f1d16 	blt	r2,r17,8005aa4 <___vfprintf_internal_r+0xb90>
 8005e30:	28c00204 	addi	r3,r5,8
 8005e34:	003db506 	br	800550c <___vfprintf_internal_r+0x5f8>
 8005e38:	3c000017 	ldw	r16,0(r7)
 8005e3c:	3c400117 	ldw	r17,4(r7)
 8005e40:	39800204 	addi	r6,r7,8
 8005e44:	01000044 	movi	r4,1
 8005e48:	d9814015 	stw	r6,1280(sp)
 8005e4c:	d8000405 	stb	zero,16(sp)
 8005e50:	003ebe06 	br	800594c <___vfprintf_internal_r+0xa38>
 8005e54:	3c000017 	ldw	r16,0(r7)
 8005e58:	3c400117 	ldw	r17,4(r7)
 8005e5c:	38800204 	addi	r2,r7,8
 8005e60:	d8814015 	stw	r2,1280(sp)
 8005e64:	003eb706 	br	8005944 <___vfprintf_internal_r+0xa30>
 8005e68:	3c000017 	ldw	r16,0(r7)
 8005e6c:	3c400117 	ldw	r17,4(r7)
 8005e70:	39000204 	addi	r4,r7,8
 8005e74:	d9014015 	stw	r4,1280(sp)
 8005e78:	0009883a 	mov	r4,zero
 8005e7c:	d8000405 	stb	zero,16(sp)
 8005e80:	003eb206 	br	800594c <___vfprintf_internal_r+0xa38>
 8005e84:	38c00017 	ldw	r3,0(r7)
 8005e88:	39c00104 	addi	r7,r7,4
 8005e8c:	d8c14a15 	stw	r3,1320(sp)
 8005e90:	1800d10e 	bge	r3,zero,80061d8 <___vfprintf_internal_r+0x12c4>
 8005e94:	00c7c83a 	sub	r3,zero,r3
 8005e98:	d8c14a15 	stw	r3,1320(sp)
 8005e9c:	d9014c17 	ldw	r4,1328(sp)
 8005ea0:	b8c00007 	ldb	r3,0(r23)
 8005ea4:	21000114 	ori	r4,r4,4
 8005ea8:	d9014c15 	stw	r4,1328(sp)
 8005eac:	003c9806 	br	8005110 <___vfprintf_internal_r+0x1fc>
 8005eb0:	d9814c17 	ldw	r6,1328(sp)
 8005eb4:	3080080c 	andi	r2,r6,32
 8005eb8:	1001f026 	beq	r2,zero,800667c <___vfprintf_internal_r+0x1768>
 8005ebc:	d9014b17 	ldw	r4,1324(sp)
 8005ec0:	38800017 	ldw	r2,0(r7)
 8005ec4:	39c00104 	addi	r7,r7,4
 8005ec8:	d9c14015 	stw	r7,1280(sp)
 8005ecc:	2007d7fa 	srai	r3,r4,31
 8005ed0:	d9c14017 	ldw	r7,1280(sp)
 8005ed4:	11000015 	stw	r4,0(r2)
 8005ed8:	10c00115 	stw	r3,4(r2)
 8005edc:	003c6906 	br	8005084 <___vfprintf_internal_r+0x170>
 8005ee0:	b8c00007 	ldb	r3,0(r23)
 8005ee4:	00801b04 	movi	r2,108
 8005ee8:	18824f26 	beq	r3,r2,8006828 <___vfprintf_internal_r+0x1914>
 8005eec:	d9414c17 	ldw	r5,1328(sp)
 8005ef0:	29400414 	ori	r5,r5,16
 8005ef4:	d9414c15 	stw	r5,1328(sp)
 8005ef8:	003c8506 	br	8005110 <___vfprintf_internal_r+0x1fc>
 8005efc:	d9814c17 	ldw	r6,1328(sp)
 8005f00:	b8c00007 	ldb	r3,0(r23)
 8005f04:	31800814 	ori	r6,r6,32
 8005f08:	d9814c15 	stw	r6,1328(sp)
 8005f0c:	003c8006 	br	8005110 <___vfprintf_internal_r+0x1fc>
 8005f10:	d8814c17 	ldw	r2,1328(sp)
 8005f14:	3c000017 	ldw	r16,0(r7)
 8005f18:	00c01e04 	movi	r3,120
 8005f1c:	10800094 	ori	r2,r2,2
 8005f20:	d8814c15 	stw	r2,1328(sp)
 8005f24:	39c00104 	addi	r7,r7,4
 8005f28:	01420074 	movhi	r5,2049
 8005f2c:	2946a404 	addi	r5,r5,6800
 8005f30:	00800c04 	movi	r2,48
 8005f34:	0023883a 	mov	r17,zero
 8005f38:	01000084 	movi	r4,2
 8005f3c:	d9c14015 	stw	r7,1280(sp)
 8005f40:	d8c14d15 	stw	r3,1332(sp)
 8005f44:	d9414415 	stw	r5,1296(sp)
 8005f48:	d8800445 	stb	r2,17(sp)
 8005f4c:	d8c00485 	stb	r3,18(sp)
 8005f50:	d8000405 	stb	zero,16(sp)
 8005f54:	003e7d06 	br	800594c <___vfprintf_internal_r+0xa38>
 8005f58:	d8814c17 	ldw	r2,1328(sp)
 8005f5c:	b8c00007 	ldb	r3,0(r23)
 8005f60:	10801014 	ori	r2,r2,64
 8005f64:	d8814c15 	stw	r2,1328(sp)
 8005f68:	003c6906 	br	8005110 <___vfprintf_internal_r+0x1fc>
 8005f6c:	d9414c17 	ldw	r5,1328(sp)
 8005f70:	2880020c 	andi	r2,r5,8
 8005f74:	1001df26 	beq	r2,zero,80066f4 <___vfprintf_internal_r+0x17e0>
 8005f78:	39800017 	ldw	r6,0(r7)
 8005f7c:	38800204 	addi	r2,r7,8
 8005f80:	d8814015 	stw	r2,1280(sp)
 8005f84:	d9814215 	stw	r6,1288(sp)
 8005f88:	39c00117 	ldw	r7,4(r7)
 8005f8c:	d9c14315 	stw	r7,1292(sp)
 8005f90:	d9014217 	ldw	r4,1288(sp)
 8005f94:	d9414317 	ldw	r5,1292(sp)
 8005f98:	800b8b40 	call	800b8b4 <__isinfd>
 8005f9c:	10021726 	beq	r2,zero,80067fc <___vfprintf_internal_r+0x18e8>
 8005fa0:	d9014217 	ldw	r4,1288(sp)
 8005fa4:	d9414317 	ldw	r5,1292(sp)
 8005fa8:	000d883a 	mov	r6,zero
 8005fac:	000f883a 	mov	r7,zero
 8005fb0:	8003fe40 	call	8003fe4 <__ltdf2>
 8005fb4:	1002ca16 	blt	r2,zero,8006ae0 <___vfprintf_internal_r+0x1bcc>
 8005fb8:	d9414d17 	ldw	r5,1332(sp)
 8005fbc:	008011c4 	movi	r2,71
 8005fc0:	11420a16 	blt	r2,r5,80067ec <___vfprintf_internal_r+0x18d8>
 8005fc4:	01820074 	movhi	r6,2049
 8005fc8:	3186a904 	addi	r6,r6,6820
 8005fcc:	d9814115 	stw	r6,1284(sp)
 8005fd0:	d9014c17 	ldw	r4,1328(sp)
 8005fd4:	00c000c4 	movi	r3,3
 8005fd8:	00bfdfc4 	movi	r2,-129
 8005fdc:	2088703a 	and	r4,r4,r2
 8005fe0:	180f883a 	mov	r7,r3
 8005fe4:	d8c14515 	stw	r3,1300(sp)
 8005fe8:	d9014c15 	stw	r4,1328(sp)
 8005fec:	d8014615 	stw	zero,1304(sp)
 8005ff0:	003e6a06 	br	800599c <___vfprintf_internal_r+0xa88>
 8005ff4:	38800017 	ldw	r2,0(r7)
 8005ff8:	00c00044 	movi	r3,1
 8005ffc:	39c00104 	addi	r7,r7,4
 8006000:	d9c14015 	stw	r7,1280(sp)
 8006004:	d9000f04 	addi	r4,sp,60
 8006008:	180f883a 	mov	r7,r3
 800600c:	d8c14515 	stw	r3,1300(sp)
 8006010:	d9014115 	stw	r4,1284(sp)
 8006014:	d8800f05 	stb	r2,60(sp)
 8006018:	d8000405 	stb	zero,16(sp)
 800601c:	003cac06 	br	80052d0 <___vfprintf_internal_r+0x3bc>
 8006020:	01420074 	movhi	r5,2049
 8006024:	2946af04 	addi	r5,r5,6844
 8006028:	d9414415 	stw	r5,1296(sp)
 800602c:	d9814c17 	ldw	r6,1328(sp)
 8006030:	3080080c 	andi	r2,r6,32
 8006034:	1000f926 	beq	r2,zero,800641c <___vfprintf_internal_r+0x1508>
 8006038:	3c000017 	ldw	r16,0(r7)
 800603c:	3c400117 	ldw	r17,4(r7)
 8006040:	38800204 	addi	r2,r7,8
 8006044:	d8814015 	stw	r2,1280(sp)
 8006048:	d9414c17 	ldw	r5,1328(sp)
 800604c:	2880004c 	andi	r2,r5,1
 8006050:	1005003a 	cmpeq	r2,r2,zero
 8006054:	1000b31e 	bne	r2,zero,8006324 <___vfprintf_internal_r+0x1410>
 8006058:	8444b03a 	or	r2,r16,r17
 800605c:	1000b126 	beq	r2,zero,8006324 <___vfprintf_internal_r+0x1410>
 8006060:	d9814d17 	ldw	r6,1332(sp)
 8006064:	29400094 	ori	r5,r5,2
 8006068:	00800c04 	movi	r2,48
 800606c:	01000084 	movi	r4,2
 8006070:	d9414c15 	stw	r5,1328(sp)
 8006074:	d8800445 	stb	r2,17(sp)
 8006078:	d9800485 	stb	r6,18(sp)
 800607c:	d8000405 	stb	zero,16(sp)
 8006080:	003e3206 	br	800594c <___vfprintf_internal_r+0xa38>
 8006084:	01820074 	movhi	r6,2049
 8006088:	3186a404 	addi	r6,r6,6800
 800608c:	d9814415 	stw	r6,1296(sp)
 8006090:	003fe606 	br	800602c <___vfprintf_internal_r+0x1118>
 8006094:	00800ac4 	movi	r2,43
 8006098:	d8800405 	stb	r2,16(sp)
 800609c:	b8c00007 	ldb	r3,0(r23)
 80060a0:	003c1b06 	br	8005110 <___vfprintf_internal_r+0x1fc>
 80060a4:	d8814c17 	ldw	r2,1328(sp)
 80060a8:	b8c00007 	ldb	r3,0(r23)
 80060ac:	10800054 	ori	r2,r2,1
 80060b0:	d8814c15 	stw	r2,1328(sp)
 80060b4:	003c1606 	br	8005110 <___vfprintf_internal_r+0x1fc>
 80060b8:	d8800407 	ldb	r2,16(sp)
 80060bc:	1000461e 	bne	r2,zero,80061d8 <___vfprintf_internal_r+0x12c4>
 80060c0:	00800804 	movi	r2,32
 80060c4:	d8800405 	stb	r2,16(sp)
 80060c8:	b8c00007 	ldb	r3,0(r23)
 80060cc:	003c1006 	br	8005110 <___vfprintf_internal_r+0x1fc>
 80060d0:	d9814c17 	ldw	r6,1328(sp)
 80060d4:	b8c00007 	ldb	r3,0(r23)
 80060d8:	31800214 	ori	r6,r6,8
 80060dc:	d9814c15 	stw	r6,1328(sp)
 80060e0:	003c0b06 	br	8005110 <___vfprintf_internal_r+0x1fc>
 80060e4:	0007883a 	mov	r3,zero
 80060e8:	01000244 	movi	r4,9
 80060ec:	188002a4 	muli	r2,r3,10
 80060f0:	b8c00007 	ldb	r3,0(r23)
 80060f4:	d9814d17 	ldw	r6,1332(sp)
 80060f8:	bdc00044 	addi	r23,r23,1
 80060fc:	d8c14d15 	stw	r3,1332(sp)
 8006100:	d9414d17 	ldw	r5,1332(sp)
 8006104:	3085883a 	add	r2,r6,r2
 8006108:	10fff404 	addi	r3,r2,-48
 800610c:	28bff404 	addi	r2,r5,-48
 8006110:	20bff62e 	bgeu	r4,r2,80060ec <___vfprintf_internal_r+0x11d8>
 8006114:	d8c14a15 	stw	r3,1320(sp)
 8006118:	003bff06 	br	8005118 <___vfprintf_internal_r+0x204>
 800611c:	d9414c17 	ldw	r5,1328(sp)
 8006120:	b8c00007 	ldb	r3,0(r23)
 8006124:	29402014 	ori	r5,r5,128
 8006128:	d9414c15 	stw	r5,1328(sp)
 800612c:	003bf806 	br	8005110 <___vfprintf_internal_r+0x1fc>
 8006130:	b8c00007 	ldb	r3,0(r23)
 8006134:	00800a84 	movi	r2,42
 8006138:	bdc00044 	addi	r23,r23,1
 800613c:	18831526 	beq	r3,r2,8006d94 <___vfprintf_internal_r+0x1e80>
 8006140:	d8c14d15 	stw	r3,1332(sp)
 8006144:	18bff404 	addi	r2,r3,-48
 8006148:	00c00244 	movi	r3,9
 800614c:	18827836 	bltu	r3,r2,8006b30 <___vfprintf_internal_r+0x1c1c>
 8006150:	000d883a 	mov	r6,zero
 8006154:	308002a4 	muli	r2,r6,10
 8006158:	b9800007 	ldb	r6,0(r23)
 800615c:	d9414d17 	ldw	r5,1332(sp)
 8006160:	bdc00044 	addi	r23,r23,1
 8006164:	d9814d15 	stw	r6,1332(sp)
 8006168:	d9014d17 	ldw	r4,1332(sp)
 800616c:	1145883a 	add	r2,r2,r5
 8006170:	11bff404 	addi	r6,r2,-48
 8006174:	20bff404 	addi	r2,r4,-48
 8006178:	18bff62e 	bgeu	r3,r2,8006154 <___vfprintf_internal_r+0x1240>
 800617c:	3027883a 	mov	r19,r6
 8006180:	303be50e 	bge	r6,zero,8005118 <___vfprintf_internal_r+0x204>
 8006184:	04ffffc4 	movi	r19,-1
 8006188:	003be306 	br	8005118 <___vfprintf_internal_r+0x204>
 800618c:	d8000405 	stb	zero,16(sp)
 8006190:	39800017 	ldw	r6,0(r7)
 8006194:	39c00104 	addi	r7,r7,4
 8006198:	d9c14015 	stw	r7,1280(sp)
 800619c:	d9814115 	stw	r6,1284(sp)
 80061a0:	3001c926 	beq	r6,zero,80068c8 <___vfprintf_internal_r+0x19b4>
 80061a4:	98000e16 	blt	r19,zero,80061e0 <___vfprintf_internal_r+0x12cc>
 80061a8:	d9014117 	ldw	r4,1284(sp)
 80061ac:	000b883a 	mov	r5,zero
 80061b0:	980d883a 	mov	r6,r19
 80061b4:	8009fd00 	call	8009fd0 <memchr>
 80061b8:	10025926 	beq	r2,zero,8006b20 <___vfprintf_internal_r+0x1c0c>
 80061bc:	d8c14117 	ldw	r3,1284(sp)
 80061c0:	10cfc83a 	sub	r7,r2,r3
 80061c4:	99c19e16 	blt	r19,r7,8006840 <___vfprintf_internal_r+0x192c>
 80061c8:	d9c14515 	stw	r7,1300(sp)
 80061cc:	38000916 	blt	r7,zero,80061f4 <___vfprintf_internal_r+0x12e0>
 80061d0:	d8014615 	stw	zero,1304(sp)
 80061d4:	003df106 	br	800599c <___vfprintf_internal_r+0xa88>
 80061d8:	b8c00007 	ldb	r3,0(r23)
 80061dc:	003bcc06 	br	8005110 <___vfprintf_internal_r+0x1fc>
 80061e0:	d9014117 	ldw	r4,1284(sp)
 80061e4:	8004e480 	call	8004e48 <strlen>
 80061e8:	d8814515 	stw	r2,1300(sp)
 80061ec:	100f883a 	mov	r7,r2
 80061f0:	103ff70e 	bge	r2,zero,80061d0 <___vfprintf_internal_r+0x12bc>
 80061f4:	d8014515 	stw	zero,1300(sp)
 80061f8:	d8014615 	stw	zero,1304(sp)
 80061fc:	003de706 	br	800599c <___vfprintf_internal_r+0xa88>
 8006200:	20c03fcc 	andi	r3,r4,255
 8006204:	00800044 	movi	r2,1
 8006208:	18802d26 	beq	r3,r2,80062c0 <___vfprintf_internal_r+0x13ac>
 800620c:	18800e36 	bltu	r3,r2,8006248 <___vfprintf_internal_r+0x1334>
 8006210:	00800084 	movi	r2,2
 8006214:	1880fa26 	beq	r3,r2,8006600 <___vfprintf_internal_r+0x16ec>
 8006218:	01020074 	movhi	r4,2049
 800621c:	2106b404 	addi	r4,r4,6864
 8006220:	8004e480 	call	8004e48 <strlen>
 8006224:	100f883a 	mov	r7,r2
 8006228:	dcc14515 	stw	r19,1300(sp)
 800622c:	9880010e 	bge	r19,r2,8006234 <___vfprintf_internal_r+0x1320>
 8006230:	d8814515 	stw	r2,1300(sp)
 8006234:	00820074 	movhi	r2,2049
 8006238:	1086b404 	addi	r2,r2,6864
 800623c:	dcc14615 	stw	r19,1304(sp)
 8006240:	d8814115 	stw	r2,1284(sp)
 8006244:	003dd506 	br	800599c <___vfprintf_internal_r+0xa88>
 8006248:	d9401904 	addi	r5,sp,100
 800624c:	dd000f04 	addi	r20,sp,60
 8006250:	d9414115 	stw	r5,1284(sp)
 8006254:	880a977a 	slli	r5,r17,29
 8006258:	d9814117 	ldw	r6,1284(sp)
 800625c:	8004d0fa 	srli	r2,r16,3
 8006260:	8806d0fa 	srli	r3,r17,3
 8006264:	810001cc 	andi	r4,r16,7
 8006268:	2884b03a 	or	r2,r5,r2
 800626c:	31bfffc4 	addi	r6,r6,-1
 8006270:	21000c04 	addi	r4,r4,48
 8006274:	d9814115 	stw	r6,1284(sp)
 8006278:	10cab03a 	or	r5,r2,r3
 800627c:	31000005 	stb	r4,0(r6)
 8006280:	1021883a 	mov	r16,r2
 8006284:	1823883a 	mov	r17,r3
 8006288:	283ff21e 	bne	r5,zero,8006254 <___vfprintf_internal_r+0x1340>
 800628c:	d8c14c17 	ldw	r3,1328(sp)
 8006290:	1880004c 	andi	r2,r3,1
 8006294:	1005003a 	cmpeq	r2,r2,zero
 8006298:	103db91e 	bne	r2,zero,8005980 <___vfprintf_internal_r+0xa6c>
 800629c:	20803fcc 	andi	r2,r4,255
 80062a0:	1080201c 	xori	r2,r2,128
 80062a4:	10bfe004 	addi	r2,r2,-128
 80062a8:	00c00c04 	movi	r3,48
 80062ac:	10fdb426 	beq	r2,r3,8005980 <___vfprintf_internal_r+0xa6c>
 80062b0:	31bfffc4 	addi	r6,r6,-1
 80062b4:	d9814115 	stw	r6,1284(sp)
 80062b8:	30c00005 	stb	r3,0(r6)
 80062bc:	003db006 	br	8005980 <___vfprintf_internal_r+0xa6c>
 80062c0:	88800068 	cmpgeui	r2,r17,1
 80062c4:	10002c1e 	bne	r2,zero,8006378 <___vfprintf_internal_r+0x1464>
 80062c8:	8800021e 	bne	r17,zero,80062d4 <___vfprintf_internal_r+0x13c0>
 80062cc:	00800244 	movi	r2,9
 80062d0:	14002936 	bltu	r2,r16,8006378 <___vfprintf_internal_r+0x1464>
 80062d4:	d90018c4 	addi	r4,sp,99
 80062d8:	dd000f04 	addi	r20,sp,60
 80062dc:	d9014115 	stw	r4,1284(sp)
 80062e0:	d9014117 	ldw	r4,1284(sp)
 80062e4:	80800c04 	addi	r2,r16,48
 80062e8:	20800005 	stb	r2,0(r4)
 80062ec:	003da406 	br	8005980 <___vfprintf_internal_r+0xa6c>
 80062f0:	dc400d17 	ldw	r17,52(sp)
 80062f4:	07020074 	movhi	fp,2049
 80062f8:	e706bb84 	addi	fp,fp,6894
 80062fc:	9425883a 	add	r18,r18,r16
 8006300:	8c400044 	addi	r17,r17,1
 8006304:	008001c4 	movi	r2,7
 8006308:	1f000015 	stw	fp,0(r3)
 800630c:	1c000115 	stw	r16,4(r3)
 8006310:	dc800e15 	stw	r18,56(sp)
 8006314:	dc400d15 	stw	r17,52(sp)
 8006318:	147de216 	blt	r2,r17,8005aa4 <___vfprintf_internal_r+0xb90>
 800631c:	18c00204 	addi	r3,r3,8
 8006320:	003c7a06 	br	800550c <___vfprintf_internal_r+0x5f8>
 8006324:	01000084 	movi	r4,2
 8006328:	d8000405 	stb	zero,16(sp)
 800632c:	003d8706 	br	800594c <___vfprintf_internal_r+0xa38>
 8006330:	d9814c17 	ldw	r6,1328(sp)
 8006334:	30c4703a 	and	r2,r6,r3
 8006338:	1005003a 	cmpeq	r2,r2,zero
 800633c:	103cb926 	beq	r2,zero,8005624 <___vfprintf_internal_r+0x710>
 8006340:	d9014117 	ldw	r4,1284(sp)
 8006344:	94800044 	addi	r18,r18,1
 8006348:	8c400044 	addi	r17,r17,1
 800634c:	008001c4 	movi	r2,7
 8006350:	a9000015 	stw	r4,0(r21)
 8006354:	a8c00115 	stw	r3,4(r21)
 8006358:	dc800e15 	stw	r18,56(sp)
 800635c:	dc400d15 	stw	r17,52(sp)
 8006360:	147e6616 	blt	r2,r17,8005cfc <___vfprintf_internal_r+0xde8>
 8006364:	acc00204 	addi	r19,r21,8
 8006368:	003cd706 	br	80056c8 <___vfprintf_internal_r+0x7b4>
 800636c:	07020074 	movhi	fp,2049
 8006370:	e706bb84 	addi	fp,fp,6894
 8006374:	003c4f06 	br	80054b4 <___vfprintf_internal_r+0x5a0>
 8006378:	dd000f04 	addi	r20,sp,60
 800637c:	dc801904 	addi	r18,sp,100
 8006380:	8009883a 	mov	r4,r16
 8006384:	880b883a 	mov	r5,r17
 8006388:	01800284 	movi	r6,10
 800638c:	000f883a 	mov	r7,zero
 8006390:	800c5dc0 	call	800c5dc <__umoddi3>
 8006394:	12000c04 	addi	r8,r2,48
 8006398:	94bfffc4 	addi	r18,r18,-1
 800639c:	8009883a 	mov	r4,r16
 80063a0:	880b883a 	mov	r5,r17
 80063a4:	01800284 	movi	r6,10
 80063a8:	000f883a 	mov	r7,zero
 80063ac:	92000005 	stb	r8,0(r18)
 80063b0:	800c0000 	call	800c000 <__udivdi3>
 80063b4:	1009883a 	mov	r4,r2
 80063b8:	1021883a 	mov	r16,r2
 80063bc:	18800068 	cmpgeui	r2,r3,1
 80063c0:	1823883a 	mov	r17,r3
 80063c4:	103fee1e 	bne	r2,zero,8006380 <___vfprintf_internal_r+0x146c>
 80063c8:	1800021e 	bne	r3,zero,80063d4 <___vfprintf_internal_r+0x14c0>
 80063cc:	00800244 	movi	r2,9
 80063d0:	113feb36 	bltu	r2,r4,8006380 <___vfprintf_internal_r+0x146c>
 80063d4:	94bfffc4 	addi	r18,r18,-1
 80063d8:	dc814115 	stw	r18,1284(sp)
 80063dc:	003fc006 	br	80062e0 <___vfprintf_internal_r+0x13cc>
 80063e0:	d9014c17 	ldw	r4,1328(sp)
 80063e4:	2080004c 	andi	r2,r4,1
 80063e8:	10009a1e 	bne	r2,zero,8006654 <___vfprintf_internal_r+0x1740>
 80063ec:	d9401904 	addi	r5,sp,100
 80063f0:	dd000f04 	addi	r20,sp,60
 80063f4:	d9414115 	stw	r5,1284(sp)
 80063f8:	003d6106 	br	8005980 <___vfprintf_internal_r+0xa6c>
 80063fc:	d9014f17 	ldw	r4,1340(sp)
 8006400:	b00b883a 	mov	r5,r22
 8006404:	d9800c04 	addi	r6,sp,48
 8006408:	8004ebc0 	call	8004ebc <__sprint_r>
 800640c:	103c791e 	bne	r2,zero,80055f4 <___vfprintf_internal_r+0x6e0>
 8006410:	dc800e17 	ldw	r18,56(sp)
 8006414:	d8c01904 	addi	r3,sp,100
 8006418:	003cff06 	br	8005818 <___vfprintf_internal_r+0x904>
 800641c:	d8c14c17 	ldw	r3,1328(sp)
 8006420:	1880040c 	andi	r2,r3,16
 8006424:	1000711e 	bne	r2,zero,80065ec <___vfprintf_internal_r+0x16d8>
 8006428:	d9014c17 	ldw	r4,1328(sp)
 800642c:	2080100c 	andi	r2,r4,64
 8006430:	10006e26 	beq	r2,zero,80065ec <___vfprintf_internal_r+0x16d8>
 8006434:	3c00000b 	ldhu	r16,0(r7)
 8006438:	0023883a 	mov	r17,zero
 800643c:	39c00104 	addi	r7,r7,4
 8006440:	d9c14015 	stw	r7,1280(sp)
 8006444:	003f0006 	br	8006048 <___vfprintf_internal_r+0x1134>
 8006448:	dc400d17 	ldw	r17,52(sp)
 800644c:	07020074 	movhi	fp,2049
 8006450:	e706bb84 	addi	fp,fp,6894
 8006454:	9425883a 	add	r18,r18,r16
 8006458:	8c400044 	addi	r17,r17,1
 800645c:	008001c4 	movi	r2,7
 8006460:	1f000015 	stw	fp,0(r3)
 8006464:	1c000115 	stw	r16,4(r3)
 8006468:	dc800e15 	stw	r18,56(sp)
 800646c:	dc400d15 	stw	r17,52(sp)
 8006470:	147d7616 	blt	r2,r17,8005a4c <___vfprintf_internal_r+0xb38>
 8006474:	18c00204 	addi	r3,r3,8
 8006478:	003d7b06 	br	8005a68 <___vfprintf_internal_r+0xb54>
 800647c:	dc800e17 	ldw	r18,56(sp)
 8006480:	dc400d17 	ldw	r17,52(sp)
 8006484:	07020074 	movhi	fp,2049
 8006488:	e706bf84 	addi	fp,fp,6910
 800648c:	003bc006 	br	8005390 <___vfprintf_internal_r+0x47c>
 8006490:	d9014f17 	ldw	r4,1340(sp)
 8006494:	b00b883a 	mov	r5,r22
 8006498:	d9800c04 	addi	r6,sp,48
 800649c:	8004ebc0 	call	8004ebc <__sprint_r>
 80064a0:	103c541e 	bne	r2,zero,80055f4 <___vfprintf_internal_r+0x6e0>
 80064a4:	dc800e17 	ldw	r18,56(sp)
 80064a8:	d8c01904 	addi	r3,sp,100
 80064ac:	003ce906 	br	8005854 <___vfprintf_internal_r+0x940>
 80064b0:	3c000017 	ldw	r16,0(r7)
 80064b4:	0009883a 	mov	r4,zero
 80064b8:	39c00104 	addi	r7,r7,4
 80064bc:	0023883a 	mov	r17,zero
 80064c0:	d9c14015 	stw	r7,1280(sp)
 80064c4:	d8000405 	stb	zero,16(sp)
 80064c8:	003d2006 	br	800594c <___vfprintf_internal_r+0xa38>
 80064cc:	38800017 	ldw	r2,0(r7)
 80064d0:	39c00104 	addi	r7,r7,4
 80064d4:	d9c14015 	stw	r7,1280(sp)
 80064d8:	1023d7fa 	srai	r17,r2,31
 80064dc:	1021883a 	mov	r16,r2
 80064e0:	003d1806 	br	8005944 <___vfprintf_internal_r+0xa30>
 80064e4:	3c000017 	ldw	r16,0(r7)
 80064e8:	01000044 	movi	r4,1
 80064ec:	39c00104 	addi	r7,r7,4
 80064f0:	0023883a 	mov	r17,zero
 80064f4:	d9c14015 	stw	r7,1280(sp)
 80064f8:	d8000405 	stb	zero,16(sp)
 80064fc:	003d1306 	br	800594c <___vfprintf_internal_r+0xa38>
 8006500:	00820074 	movhi	r2,2049
 8006504:	1086bb04 	addi	r2,r2,6892
 8006508:	94800044 	addi	r18,r18,1
 800650c:	8c400044 	addi	r17,r17,1
 8006510:	a8800015 	stw	r2,0(r21)
 8006514:	00c00044 	movi	r3,1
 8006518:	008001c4 	movi	r2,7
 800651c:	a8c00115 	stw	r3,4(r21)
 8006520:	dc800e15 	stw	r18,56(sp)
 8006524:	dc400d15 	stw	r17,52(sp)
 8006528:	1440ca16 	blt	r2,r17,8006854 <___vfprintf_internal_r+0x1940>
 800652c:	a8c00204 	addi	r3,r21,8
 8006530:	2000061e 	bne	r4,zero,800654c <___vfprintf_internal_r+0x1638>
 8006534:	d9414717 	ldw	r5,1308(sp)
 8006538:	2800041e 	bne	r5,zero,800654c <___vfprintf_internal_r+0x1638>
 800653c:	d9814c17 	ldw	r6,1328(sp)
 8006540:	3080004c 	andi	r2,r6,1
 8006544:	1005003a 	cmpeq	r2,r2,zero
 8006548:	103bf01e 	bne	r2,zero,800550c <___vfprintf_internal_r+0x5f8>
 800654c:	00800044 	movi	r2,1
 8006550:	dc400d17 	ldw	r17,52(sp)
 8006554:	18800115 	stw	r2,4(r3)
 8006558:	d8814917 	ldw	r2,1316(sp)
 800655c:	94800044 	addi	r18,r18,1
 8006560:	8c400044 	addi	r17,r17,1
 8006564:	18800015 	stw	r2,0(r3)
 8006568:	008001c4 	movi	r2,7
 800656c:	dc800e15 	stw	r18,56(sp)
 8006570:	dc400d15 	stw	r17,52(sp)
 8006574:	1440ca16 	blt	r2,r17,80068a0 <___vfprintf_internal_r+0x198c>
 8006578:	18c00204 	addi	r3,r3,8
 800657c:	0121c83a 	sub	r16,zero,r4
 8006580:	0400500e 	bge	zero,r16,80066c4 <___vfprintf_internal_r+0x17b0>
 8006584:	00800404 	movi	r2,16
 8006588:	1400800e 	bge	r2,r16,800678c <___vfprintf_internal_r+0x1878>
 800658c:	1027883a 	mov	r19,r2
 8006590:	07020074 	movhi	fp,2049
 8006594:	e706bb84 	addi	fp,fp,6894
 8006598:	050001c4 	movi	r20,7
 800659c:	00000306 	br	80065ac <___vfprintf_internal_r+0x1698>
 80065a0:	18c00204 	addi	r3,r3,8
 80065a4:	843ffc04 	addi	r16,r16,-16
 80065a8:	9c007a0e 	bge	r19,r16,8006794 <___vfprintf_internal_r+0x1880>
 80065ac:	94800404 	addi	r18,r18,16
 80065b0:	8c400044 	addi	r17,r17,1
 80065b4:	1f000015 	stw	fp,0(r3)
 80065b8:	1cc00115 	stw	r19,4(r3)
 80065bc:	dc800e15 	stw	r18,56(sp)
 80065c0:	dc400d15 	stw	r17,52(sp)
 80065c4:	a47ff60e 	bge	r20,r17,80065a0 <___vfprintf_internal_r+0x168c>
 80065c8:	d9014f17 	ldw	r4,1340(sp)
 80065cc:	b00b883a 	mov	r5,r22
 80065d0:	d9800c04 	addi	r6,sp,48
 80065d4:	8004ebc0 	call	8004ebc <__sprint_r>
 80065d8:	103c061e 	bne	r2,zero,80055f4 <___vfprintf_internal_r+0x6e0>
 80065dc:	dc800e17 	ldw	r18,56(sp)
 80065e0:	dc400d17 	ldw	r17,52(sp)
 80065e4:	d8c01904 	addi	r3,sp,100
 80065e8:	003fee06 	br	80065a4 <___vfprintf_internal_r+0x1690>
 80065ec:	3c000017 	ldw	r16,0(r7)
 80065f0:	0023883a 	mov	r17,zero
 80065f4:	39c00104 	addi	r7,r7,4
 80065f8:	d9c14015 	stw	r7,1280(sp)
 80065fc:	003e9206 	br	8006048 <___vfprintf_internal_r+0x1134>
 8006600:	d9401904 	addi	r5,sp,100
 8006604:	dd000f04 	addi	r20,sp,60
 8006608:	d9414115 	stw	r5,1284(sp)
 800660c:	d9814417 	ldw	r6,1296(sp)
 8006610:	880a973a 	slli	r5,r17,28
 8006614:	8004d13a 	srli	r2,r16,4
 8006618:	810003cc 	andi	r4,r16,15
 800661c:	3109883a 	add	r4,r6,r4
 8006620:	2884b03a 	or	r2,r5,r2
 8006624:	21400003 	ldbu	r5,0(r4)
 8006628:	d9014117 	ldw	r4,1284(sp)
 800662c:	8806d13a 	srli	r3,r17,4
 8006630:	1021883a 	mov	r16,r2
 8006634:	213fffc4 	addi	r4,r4,-1
 8006638:	d9014115 	stw	r4,1284(sp)
 800663c:	d9814117 	ldw	r6,1284(sp)
 8006640:	10c8b03a 	or	r4,r2,r3
 8006644:	1823883a 	mov	r17,r3
 8006648:	31400005 	stb	r5,0(r6)
 800664c:	203fef1e 	bne	r4,zero,800660c <___vfprintf_internal_r+0x16f8>
 8006650:	003ccb06 	br	8005980 <___vfprintf_internal_r+0xa6c>
 8006654:	00800c04 	movi	r2,48
 8006658:	d98018c4 	addi	r6,sp,99
 800665c:	dd000f04 	addi	r20,sp,60
 8006660:	d88018c5 	stb	r2,99(sp)
 8006664:	d9814115 	stw	r6,1284(sp)
 8006668:	003cc506 	br	8005980 <___vfprintf_internal_r+0xa6c>
 800666c:	dc400d17 	ldw	r17,52(sp)
 8006670:	07020074 	movhi	fp,2049
 8006674:	e706bf84 	addi	fp,fp,6910
 8006678:	003bc706 	br	8005598 <___vfprintf_internal_r+0x684>
 800667c:	d9414c17 	ldw	r5,1328(sp)
 8006680:	2880040c 	andi	r2,r5,16
 8006684:	10007c26 	beq	r2,zero,8006878 <___vfprintf_internal_r+0x1964>
 8006688:	38800017 	ldw	r2,0(r7)
 800668c:	39c00104 	addi	r7,r7,4
 8006690:	d9c14015 	stw	r7,1280(sp)
 8006694:	d9814b17 	ldw	r6,1324(sp)
 8006698:	d9c14017 	ldw	r7,1280(sp)
 800669c:	11800015 	stw	r6,0(r2)
 80066a0:	003a7806 	br	8005084 <___vfprintf_internal_r+0x170>
 80066a4:	d9014f17 	ldw	r4,1340(sp)
 80066a8:	b00b883a 	mov	r5,r22
 80066ac:	d9800c04 	addi	r6,sp,48
 80066b0:	8004ebc0 	call	8004ebc <__sprint_r>
 80066b4:	103bcf1e 	bne	r2,zero,80055f4 <___vfprintf_internal_r+0x6e0>
 80066b8:	dc800e17 	ldw	r18,56(sp)
 80066bc:	dc400d17 	ldw	r17,52(sp)
 80066c0:	d8c01904 	addi	r3,sp,100
 80066c4:	d9014717 	ldw	r4,1308(sp)
 80066c8:	d9414117 	ldw	r5,1284(sp)
 80066cc:	8c400044 	addi	r17,r17,1
 80066d0:	9125883a 	add	r18,r18,r4
 80066d4:	008001c4 	movi	r2,7
 80066d8:	19400015 	stw	r5,0(r3)
 80066dc:	19000115 	stw	r4,4(r3)
 80066e0:	dc800e15 	stw	r18,56(sp)
 80066e4:	dc400d15 	stw	r17,52(sp)
 80066e8:	147cee16 	blt	r2,r17,8005aa4 <___vfprintf_internal_r+0xb90>
 80066ec:	18c00204 	addi	r3,r3,8
 80066f0:	003b8606 	br	800550c <___vfprintf_internal_r+0x5f8>
 80066f4:	38c00017 	ldw	r3,0(r7)
 80066f8:	39000204 	addi	r4,r7,8
 80066fc:	d9014015 	stw	r4,1280(sp)
 8006700:	d8c14215 	stw	r3,1288(sp)
 8006704:	39c00117 	ldw	r7,4(r7)
 8006708:	d9c14315 	stw	r7,1292(sp)
 800670c:	003e2006 	br	8005f90 <___vfprintf_internal_r+0x107c>
 8006710:	0005883a 	mov	r2,zero
 8006714:	1409c83a 	sub	r4,r2,r16
 8006718:	1105803a 	cmpltu	r2,r2,r4
 800671c:	044bc83a 	sub	r5,zero,r17
 8006720:	2885c83a 	sub	r2,r5,r2
 8006724:	2021883a 	mov	r16,r4
 8006728:	1023883a 	mov	r17,r2
 800672c:	01000044 	movi	r4,1
 8006730:	00800b44 	movi	r2,45
 8006734:	d8800405 	stb	r2,16(sp)
 8006738:	003c8406 	br	800594c <___vfprintf_internal_r+0xa38>
 800673c:	d9014f17 	ldw	r4,1340(sp)
 8006740:	b00b883a 	mov	r5,r22
 8006744:	d9800c04 	addi	r6,sp,48
 8006748:	8004ebc0 	call	8004ebc <__sprint_r>
 800674c:	103ba91e 	bne	r2,zero,80055f4 <___vfprintf_internal_r+0x6e0>
 8006750:	dc800e17 	ldw	r18,56(sp)
 8006754:	dc400d17 	ldw	r17,52(sp)
 8006758:	d9000517 	ldw	r4,20(sp)
 800675c:	d9401904 	addi	r5,sp,100
 8006760:	003da706 	br	8005e00 <___vfprintf_internal_r+0xeec>
 8006764:	d9014f17 	ldw	r4,1340(sp)
 8006768:	b00b883a 	mov	r5,r22
 800676c:	d9800c04 	addi	r6,sp,48
 8006770:	8004ebc0 	call	8004ebc <__sprint_r>
 8006774:	103b9f1e 	bne	r2,zero,80055f4 <___vfprintf_internal_r+0x6e0>
 8006778:	dc800e17 	ldw	r18,56(sp)
 800677c:	dc400d17 	ldw	r17,52(sp)
 8006780:	d9000517 	ldw	r4,20(sp)
 8006784:	d8c01904 	addi	r3,sp,100
 8006788:	003d9106 	br	8005dd0 <___vfprintf_internal_r+0xebc>
 800678c:	07020074 	movhi	fp,2049
 8006790:	e706bb84 	addi	fp,fp,6894
 8006794:	9425883a 	add	r18,r18,r16
 8006798:	8c400044 	addi	r17,r17,1
 800679c:	008001c4 	movi	r2,7
 80067a0:	1f000015 	stw	fp,0(r3)
 80067a4:	1c000115 	stw	r16,4(r3)
 80067a8:	dc800e15 	stw	r18,56(sp)
 80067ac:	dc400d15 	stw	r17,52(sp)
 80067b0:	147fbc16 	blt	r2,r17,80066a4 <___vfprintf_internal_r+0x1790>
 80067b4:	18c00204 	addi	r3,r3,8
 80067b8:	003fc206 	br	80066c4 <___vfprintf_internal_r+0x17b0>
 80067bc:	d9014f17 	ldw	r4,1340(sp)
 80067c0:	b00b883a 	mov	r5,r22
 80067c4:	d9800c04 	addi	r6,sp,48
 80067c8:	8004ebc0 	call	8004ebc <__sprint_r>
 80067cc:	103b891e 	bne	r2,zero,80055f4 <___vfprintf_internal_r+0x6e0>
 80067d0:	dc800e17 	ldw	r18,56(sp)
 80067d4:	d9000517 	ldw	r4,20(sp)
 80067d8:	d8c01904 	addi	r3,sp,100
 80067dc:	003d0206 	br	8005be8 <___vfprintf_internal_r+0xcd4>
 80067e0:	07020074 	movhi	fp,2049
 80067e4:	e706bb84 	addi	fp,fp,6894
 80067e8:	003be406 	br	800577c <___vfprintf_internal_r+0x868>
 80067ec:	00820074 	movhi	r2,2049
 80067f0:	1086aa04 	addi	r2,r2,6824
 80067f4:	d8814115 	stw	r2,1284(sp)
 80067f8:	003df506 	br	8005fd0 <___vfprintf_internal_r+0x10bc>
 80067fc:	d9014217 	ldw	r4,1288(sp)
 8006800:	d9414317 	ldw	r5,1292(sp)
 8006804:	80027040 	call	8002704 <__isnand>
 8006808:	10003926 	beq	r2,zero,80068f0 <___vfprintf_internal_r+0x19dc>
 800680c:	d9414d17 	ldw	r5,1332(sp)
 8006810:	008011c4 	movi	r2,71
 8006814:	1140ce16 	blt	r2,r5,8006b50 <___vfprintf_internal_r+0x1c3c>
 8006818:	01820074 	movhi	r6,2049
 800681c:	3186ab04 	addi	r6,r6,6828
 8006820:	d9814115 	stw	r6,1284(sp)
 8006824:	003dea06 	br	8005fd0 <___vfprintf_internal_r+0x10bc>
 8006828:	d9014c17 	ldw	r4,1328(sp)
 800682c:	bdc00044 	addi	r23,r23,1
 8006830:	b8c00007 	ldb	r3,0(r23)
 8006834:	21000814 	ori	r4,r4,32
 8006838:	d9014c15 	stw	r4,1328(sp)
 800683c:	003a3406 	br	8005110 <___vfprintf_internal_r+0x1fc>
 8006840:	dcc14515 	stw	r19,1300(sp)
 8006844:	98011016 	blt	r19,zero,8006c88 <___vfprintf_internal_r+0x1d74>
 8006848:	980f883a 	mov	r7,r19
 800684c:	d8014615 	stw	zero,1304(sp)
 8006850:	003c5206 	br	800599c <___vfprintf_internal_r+0xa88>
 8006854:	d9014f17 	ldw	r4,1340(sp)
 8006858:	b00b883a 	mov	r5,r22
 800685c:	d9800c04 	addi	r6,sp,48
 8006860:	8004ebc0 	call	8004ebc <__sprint_r>
 8006864:	103b631e 	bne	r2,zero,80055f4 <___vfprintf_internal_r+0x6e0>
 8006868:	dc800e17 	ldw	r18,56(sp)
 800686c:	d9000517 	ldw	r4,20(sp)
 8006870:	d8c01904 	addi	r3,sp,100
 8006874:	003f2e06 	br	8006530 <___vfprintf_internal_r+0x161c>
 8006878:	d8c14c17 	ldw	r3,1328(sp)
 800687c:	1880100c 	andi	r2,r3,64
 8006880:	1000a026 	beq	r2,zero,8006b04 <___vfprintf_internal_r+0x1bf0>
 8006884:	38800017 	ldw	r2,0(r7)
 8006888:	39c00104 	addi	r7,r7,4
 800688c:	d9c14015 	stw	r7,1280(sp)
 8006890:	d9014b17 	ldw	r4,1324(sp)
 8006894:	d9c14017 	ldw	r7,1280(sp)
 8006898:	1100000d 	sth	r4,0(r2)
 800689c:	0039f906 	br	8005084 <___vfprintf_internal_r+0x170>
 80068a0:	d9014f17 	ldw	r4,1340(sp)
 80068a4:	b00b883a 	mov	r5,r22
 80068a8:	d9800c04 	addi	r6,sp,48
 80068ac:	8004ebc0 	call	8004ebc <__sprint_r>
 80068b0:	103b501e 	bne	r2,zero,80055f4 <___vfprintf_internal_r+0x6e0>
 80068b4:	dc800e17 	ldw	r18,56(sp)
 80068b8:	dc400d17 	ldw	r17,52(sp)
 80068bc:	d9000517 	ldw	r4,20(sp)
 80068c0:	d8c01904 	addi	r3,sp,100
 80068c4:	003f2d06 	br	800657c <___vfprintf_internal_r+0x1668>
 80068c8:	00800184 	movi	r2,6
 80068cc:	14c09a36 	bltu	r2,r19,8006b38 <___vfprintf_internal_r+0x1c24>
 80068d0:	dcc14515 	stw	r19,1300(sp)
 80068d4:	9800010e 	bge	r19,zero,80068dc <___vfprintf_internal_r+0x19c8>
 80068d8:	d8014515 	stw	zero,1300(sp)
 80068dc:	00820074 	movhi	r2,2049
 80068e0:	1086ad04 	addi	r2,r2,6836
 80068e4:	980f883a 	mov	r7,r19
 80068e8:	d8814115 	stw	r2,1284(sp)
 80068ec:	003a7806 	br	80052d0 <___vfprintf_internal_r+0x3bc>
 80068f0:	00bfffc4 	movi	r2,-1
 80068f4:	9880e226 	beq	r19,r2,8006c80 <___vfprintf_internal_r+0x1d6c>
 80068f8:	d9414d17 	ldw	r5,1332(sp)
 80068fc:	008019c4 	movi	r2,103
 8006900:	2880dc26 	beq	r5,r2,8006c74 <___vfprintf_internal_r+0x1d60>
 8006904:	008011c4 	movi	r2,71
 8006908:	2880da26 	beq	r5,r2,8006c74 <___vfprintf_internal_r+0x1d60>
 800690c:	d9414c17 	ldw	r5,1328(sp)
 8006910:	d9014317 	ldw	r4,1292(sp)
 8006914:	d9814217 	ldw	r6,1288(sp)
 8006918:	29404014 	ori	r5,r5,256
 800691c:	d9414c15 	stw	r5,1328(sp)
 8006920:	2000cc16 	blt	r4,zero,8006c54 <___vfprintf_internal_r+0x1d40>
 8006924:	3021883a 	mov	r16,r6
 8006928:	2023883a 	mov	r17,r4
 800692c:	0039883a 	mov	fp,zero
 8006930:	d9414d17 	ldw	r5,1332(sp)
 8006934:	00801984 	movi	r2,102
 8006938:	2880b726 	beq	r5,r2,8006c18 <___vfprintf_internal_r+0x1d04>
 800693c:	00801184 	movi	r2,70
 8006940:	2880b526 	beq	r5,r2,8006c18 <___vfprintf_internal_r+0x1d04>
 8006944:	00801944 	movi	r2,101
 8006948:	2880c826 	beq	r5,r2,8006c6c <___vfprintf_internal_r+0x1d58>
 800694c:	00801144 	movi	r2,69
 8006950:	2880c626 	beq	r5,r2,8006c6c <___vfprintf_internal_r+0x1d58>
 8006954:	9829883a 	mov	r20,r19
 8006958:	d9014f17 	ldw	r4,1340(sp)
 800695c:	d8800504 	addi	r2,sp,20
 8006960:	880d883a 	mov	r6,r17
 8006964:	d8800115 	stw	r2,4(sp)
 8006968:	d8c00604 	addi	r3,sp,24
 800696c:	d8800704 	addi	r2,sp,28
 8006970:	800b883a 	mov	r5,r16
 8006974:	01c00084 	movi	r7,2
 8006978:	d8c00215 	stw	r3,8(sp)
 800697c:	d8800315 	stw	r2,12(sp)
 8006980:	dd000015 	stw	r20,0(sp)
 8006984:	80071380 	call	8007138 <_dtoa_r>
 8006988:	d9814d17 	ldw	r6,1332(sp)
 800698c:	d8814115 	stw	r2,1284(sp)
 8006990:	008019c4 	movi	r2,103
 8006994:	30809526 	beq	r6,r2,8006bec <___vfprintf_internal_r+0x1cd8>
 8006998:	d8c14d17 	ldw	r3,1332(sp)
 800699c:	008011c4 	movi	r2,71
 80069a0:	18809226 	beq	r3,r2,8006bec <___vfprintf_internal_r+0x1cd8>
 80069a4:	d9414117 	ldw	r5,1284(sp)
 80069a8:	d9814d17 	ldw	r6,1332(sp)
 80069ac:	00801984 	movi	r2,102
 80069b0:	2d25883a 	add	r18,r5,r20
 80069b4:	30808626 	beq	r6,r2,8006bd0 <___vfprintf_internal_r+0x1cbc>
 80069b8:	00801184 	movi	r2,70
 80069bc:	30808426 	beq	r6,r2,8006bd0 <___vfprintf_internal_r+0x1cbc>
 80069c0:	000d883a 	mov	r6,zero
 80069c4:	000f883a 	mov	r7,zero
 80069c8:	880b883a 	mov	r5,r17
 80069cc:	8009883a 	mov	r4,r16
 80069d0:	8003e4c0 	call	8003e4c <__eqdf2>
 80069d4:	1000751e 	bne	r2,zero,8006bac <___vfprintf_internal_r+0x1c98>
 80069d8:	9005883a 	mov	r2,r18
 80069dc:	dc800715 	stw	r18,28(sp)
 80069e0:	d9014117 	ldw	r4,1284(sp)
 80069e4:	d9414d17 	ldw	r5,1332(sp)
 80069e8:	00c019c4 	movi	r3,103
 80069ec:	1125c83a 	sub	r18,r2,r4
 80069f0:	28c06826 	beq	r5,r3,8006b94 <___vfprintf_internal_r+0x1c80>
 80069f4:	008011c4 	movi	r2,71
 80069f8:	28806626 	beq	r5,r2,8006b94 <___vfprintf_internal_r+0x1c80>
 80069fc:	d9000517 	ldw	r4,20(sp)
 8006a00:	d8c14d17 	ldw	r3,1332(sp)
 8006a04:	00801944 	movi	r2,101
 8006a08:	10c05516 	blt	r2,r3,8006b60 <___vfprintf_internal_r+0x1c4c>
 8006a0c:	213fffc4 	addi	r4,r4,-1
 8006a10:	d9000515 	stw	r4,20(sp)
 8006a14:	d8c00805 	stb	r3,32(sp)
 8006a18:	2021883a 	mov	r16,r4
 8006a1c:	2000c116 	blt	r4,zero,8006d24 <___vfprintf_internal_r+0x1e10>
 8006a20:	00800ac4 	movi	r2,43
 8006a24:	d8800845 	stb	r2,33(sp)
 8006a28:	00800244 	movi	r2,9
 8006a2c:	1400af0e 	bge	r2,r16,8006cec <___vfprintf_internal_r+0x1dd8>
 8006a30:	1027883a 	mov	r19,r2
 8006a34:	dc400b84 	addi	r17,sp,46
 8006a38:	8009883a 	mov	r4,r16
 8006a3c:	01400284 	movi	r5,10
 8006a40:	80043740 	call	8004374 <__modsi3>
 8006a44:	10800c04 	addi	r2,r2,48
 8006a48:	8c7fffc4 	addi	r17,r17,-1
 8006a4c:	8009883a 	mov	r4,r16
 8006a50:	01400284 	movi	r5,10
 8006a54:	88800005 	stb	r2,0(r17)
 8006a58:	80043140 	call	8004314 <__divsi3>
 8006a5c:	1021883a 	mov	r16,r2
 8006a60:	98bff516 	blt	r19,r2,8006a38 <___vfprintf_internal_r+0x1b24>
 8006a64:	10c00c04 	addi	r3,r2,48
 8006a68:	d88009c4 	addi	r2,sp,39
 8006a6c:	108001c4 	addi	r2,r2,7
 8006a70:	897fffc4 	addi	r5,r17,-1
 8006a74:	88ffffc5 	stb	r3,-1(r17)
 8006a78:	2880a72e 	bgeu	r5,r2,8006d18 <___vfprintf_internal_r+0x1e04>
 8006a7c:	1009883a 	mov	r4,r2
 8006a80:	d9800804 	addi	r6,sp,32
 8006a84:	d8c00884 	addi	r3,sp,34
 8006a88:	28800003 	ldbu	r2,0(r5)
 8006a8c:	29400044 	addi	r5,r5,1
 8006a90:	18800005 	stb	r2,0(r3)
 8006a94:	18c00044 	addi	r3,r3,1
 8006a98:	293ffb36 	bltu	r5,r4,8006a88 <___vfprintf_internal_r+0x1b74>
 8006a9c:	1987c83a 	sub	r3,r3,r6
 8006aa0:	00800044 	movi	r2,1
 8006aa4:	d8c14815 	stw	r3,1312(sp)
 8006aa8:	90cf883a 	add	r7,r18,r3
 8006aac:	1480960e 	bge	r2,r18,8006d08 <___vfprintf_internal_r+0x1df4>
 8006ab0:	39c00044 	addi	r7,r7,1
 8006ab4:	d9c14515 	stw	r7,1300(sp)
 8006ab8:	38003416 	blt	r7,zero,8006b8c <___vfprintf_internal_r+0x1c78>
 8006abc:	e0803fcc 	andi	r2,fp,255
 8006ac0:	1080201c 	xori	r2,r2,128
 8006ac4:	10bfe004 	addi	r2,r2,-128
 8006ac8:	10004e26 	beq	r2,zero,8006c04 <___vfprintf_internal_r+0x1cf0>
 8006acc:	00800b44 	movi	r2,45
 8006ad0:	dc814715 	stw	r18,1308(sp)
 8006ad4:	d8014615 	stw	zero,1304(sp)
 8006ad8:	d8800405 	stb	r2,16(sp)
 8006adc:	003bb106 	br	80059a4 <___vfprintf_internal_r+0xa90>
 8006ae0:	00800b44 	movi	r2,45
 8006ae4:	d8800405 	stb	r2,16(sp)
 8006ae8:	003d3306 	br	8005fb8 <___vfprintf_internal_r+0x10a4>
 8006aec:	d9014f17 	ldw	r4,1340(sp)
 8006af0:	b00b883a 	mov	r5,r22
 8006af4:	d9800c04 	addi	r6,sp,48
 8006af8:	8004ebc0 	call	8004ebc <__sprint_r>
 8006afc:	103abd1e 	bne	r2,zero,80055f4 <___vfprintf_internal_r+0x6e0>
 8006b00:	003abb06 	br	80055f0 <___vfprintf_internal_r+0x6dc>
 8006b04:	38800017 	ldw	r2,0(r7)
 8006b08:	39c00104 	addi	r7,r7,4
 8006b0c:	d9c14015 	stw	r7,1280(sp)
 8006b10:	d9414b17 	ldw	r5,1324(sp)
 8006b14:	d9c14017 	ldw	r7,1280(sp)
 8006b18:	11400015 	stw	r5,0(r2)
 8006b1c:	00395906 	br	8005084 <___vfprintf_internal_r+0x170>
 8006b20:	980f883a 	mov	r7,r19
 8006b24:	dcc14515 	stw	r19,1300(sp)
 8006b28:	d8014615 	stw	zero,1304(sp)
 8006b2c:	003b9b06 	br	800599c <___vfprintf_internal_r+0xa88>
 8006b30:	0027883a 	mov	r19,zero
 8006b34:	00397806 	br	8005118 <___vfprintf_internal_r+0x204>
 8006b38:	00c20074 	movhi	r3,2049
 8006b3c:	18c6ad04 	addi	r3,r3,6836
 8006b40:	100f883a 	mov	r7,r2
 8006b44:	d8814515 	stw	r2,1300(sp)
 8006b48:	d8c14115 	stw	r3,1284(sp)
 8006b4c:	0039e006 	br	80052d0 <___vfprintf_internal_r+0x3bc>
 8006b50:	00820074 	movhi	r2,2049
 8006b54:	1086ac04 	addi	r2,r2,6832
 8006b58:	d8814115 	stw	r2,1284(sp)
 8006b5c:	003d1c06 	br	8005fd0 <___vfprintf_internal_r+0x10bc>
 8006b60:	d9414d17 	ldw	r5,1332(sp)
 8006b64:	00801984 	movi	r2,102
 8006b68:	28804926 	beq	r5,r2,8006c90 <___vfprintf_internal_r+0x1d7c>
 8006b6c:	200f883a 	mov	r7,r4
 8006b70:	24805716 	blt	r4,r18,8006cd0 <___vfprintf_internal_r+0x1dbc>
 8006b74:	d9414c17 	ldw	r5,1328(sp)
 8006b78:	2880004c 	andi	r2,r5,1
 8006b7c:	10000126 	beq	r2,zero,8006b84 <___vfprintf_internal_r+0x1c70>
 8006b80:	21c00044 	addi	r7,r4,1
 8006b84:	d9c14515 	stw	r7,1300(sp)
 8006b88:	383fcc0e 	bge	r7,zero,8006abc <___vfprintf_internal_r+0x1ba8>
 8006b8c:	d8014515 	stw	zero,1300(sp)
 8006b90:	003fca06 	br	8006abc <___vfprintf_internal_r+0x1ba8>
 8006b94:	d9000517 	ldw	r4,20(sp)
 8006b98:	00bfff04 	movi	r2,-4
 8006b9c:	1100480e 	bge	r2,r4,8006cc0 <___vfprintf_internal_r+0x1dac>
 8006ba0:	99004716 	blt	r19,r4,8006cc0 <___vfprintf_internal_r+0x1dac>
 8006ba4:	d8c14d15 	stw	r3,1332(sp)
 8006ba8:	003ff006 	br	8006b6c <___vfprintf_internal_r+0x1c58>
 8006bac:	d8800717 	ldw	r2,28(sp)
 8006bb0:	14bf8b2e 	bgeu	r2,r18,80069e0 <___vfprintf_internal_r+0x1acc>
 8006bb4:	9007883a 	mov	r3,r18
 8006bb8:	01000c04 	movi	r4,48
 8006bbc:	11000005 	stb	r4,0(r2)
 8006bc0:	10800044 	addi	r2,r2,1
 8006bc4:	d8800715 	stw	r2,28(sp)
 8006bc8:	18bffc1e 	bne	r3,r2,8006bbc <___vfprintf_internal_r+0x1ca8>
 8006bcc:	003f8406 	br	80069e0 <___vfprintf_internal_r+0x1acc>
 8006bd0:	d8814117 	ldw	r2,1284(sp)
 8006bd4:	10c00007 	ldb	r3,0(r2)
 8006bd8:	00800c04 	movi	r2,48
 8006bdc:	18805b26 	beq	r3,r2,8006d4c <___vfprintf_internal_r+0x1e38>
 8006be0:	d9000517 	ldw	r4,20(sp)
 8006be4:	9125883a 	add	r18,r18,r4
 8006be8:	003f7506 	br	80069c0 <___vfprintf_internal_r+0x1aac>
 8006bec:	d9014c17 	ldw	r4,1328(sp)
 8006bf0:	2080004c 	andi	r2,r4,1
 8006bf4:	1005003a 	cmpeq	r2,r2,zero
 8006bf8:	103f6a26 	beq	r2,zero,80069a4 <___vfprintf_internal_r+0x1a90>
 8006bfc:	d8800717 	ldw	r2,28(sp)
 8006c00:	003f7706 	br	80069e0 <___vfprintf_internal_r+0x1acc>
 8006c04:	d9c14515 	stw	r7,1300(sp)
 8006c08:	38004d16 	blt	r7,zero,8006d40 <___vfprintf_internal_r+0x1e2c>
 8006c0c:	dc814715 	stw	r18,1308(sp)
 8006c10:	d8014615 	stw	zero,1304(sp)
 8006c14:	003b6106 	br	800599c <___vfprintf_internal_r+0xa88>
 8006c18:	d9014f17 	ldw	r4,1340(sp)
 8006c1c:	d8800504 	addi	r2,sp,20
 8006c20:	d8800115 	stw	r2,4(sp)
 8006c24:	d8c00604 	addi	r3,sp,24
 8006c28:	d8800704 	addi	r2,sp,28
 8006c2c:	800b883a 	mov	r5,r16
 8006c30:	880d883a 	mov	r6,r17
 8006c34:	01c000c4 	movi	r7,3
 8006c38:	d8c00215 	stw	r3,8(sp)
 8006c3c:	d8800315 	stw	r2,12(sp)
 8006c40:	dcc00015 	stw	r19,0(sp)
 8006c44:	9829883a 	mov	r20,r19
 8006c48:	80071380 	call	8007138 <_dtoa_r>
 8006c4c:	d8814115 	stw	r2,1284(sp)
 8006c50:	003f5106 	br	8006998 <___vfprintf_internal_r+0x1a84>
 8006c54:	d8c14217 	ldw	r3,1288(sp)
 8006c58:	d9014317 	ldw	r4,1292(sp)
 8006c5c:	07000b44 	movi	fp,45
 8006c60:	1821883a 	mov	r16,r3
 8006c64:	2460003c 	xorhi	r17,r4,32768
 8006c68:	003f3106 	br	8006930 <___vfprintf_internal_r+0x1a1c>
 8006c6c:	9d000044 	addi	r20,r19,1
 8006c70:	003f3906 	br	8006958 <___vfprintf_internal_r+0x1a44>
 8006c74:	983f251e 	bne	r19,zero,800690c <___vfprintf_internal_r+0x19f8>
 8006c78:	04c00044 	movi	r19,1
 8006c7c:	003f2306 	br	800690c <___vfprintf_internal_r+0x19f8>
 8006c80:	04c00184 	movi	r19,6
 8006c84:	003f2106 	br	800690c <___vfprintf_internal_r+0x19f8>
 8006c88:	d8014515 	stw	zero,1300(sp)
 8006c8c:	003eee06 	br	8006848 <___vfprintf_internal_r+0x1934>
 8006c90:	200f883a 	mov	r7,r4
 8006c94:	0100370e 	bge	zero,r4,8006d74 <___vfprintf_internal_r+0x1e60>
 8006c98:	9800031e 	bne	r19,zero,8006ca8 <___vfprintf_internal_r+0x1d94>
 8006c9c:	d9814c17 	ldw	r6,1328(sp)
 8006ca0:	3080004c 	andi	r2,r6,1
 8006ca4:	103fb726 	beq	r2,zero,8006b84 <___vfprintf_internal_r+0x1c70>
 8006ca8:	20800044 	addi	r2,r4,1
 8006cac:	98a7883a 	add	r19,r19,r2
 8006cb0:	dcc14515 	stw	r19,1300(sp)
 8006cb4:	980f883a 	mov	r7,r19
 8006cb8:	983f800e 	bge	r19,zero,8006abc <___vfprintf_internal_r+0x1ba8>
 8006cbc:	003fb306 	br	8006b8c <___vfprintf_internal_r+0x1c78>
 8006cc0:	d9814d17 	ldw	r6,1332(sp)
 8006cc4:	31bfff84 	addi	r6,r6,-2
 8006cc8:	d9814d15 	stw	r6,1332(sp)
 8006ccc:	003f4c06 	br	8006a00 <___vfprintf_internal_r+0x1aec>
 8006cd0:	0100180e 	bge	zero,r4,8006d34 <___vfprintf_internal_r+0x1e20>
 8006cd4:	00800044 	movi	r2,1
 8006cd8:	1485883a 	add	r2,r2,r18
 8006cdc:	d8814515 	stw	r2,1300(sp)
 8006ce0:	100f883a 	mov	r7,r2
 8006ce4:	103f750e 	bge	r2,zero,8006abc <___vfprintf_internal_r+0x1ba8>
 8006ce8:	003fa806 	br	8006b8c <___vfprintf_internal_r+0x1c78>
 8006cec:	80c00c04 	addi	r3,r16,48
 8006cf0:	00800c04 	movi	r2,48
 8006cf4:	d8c008c5 	stb	r3,35(sp)
 8006cf8:	d9800804 	addi	r6,sp,32
 8006cfc:	d8c00904 	addi	r3,sp,36
 8006d00:	d8800885 	stb	r2,34(sp)
 8006d04:	003f6506 	br	8006a9c <___vfprintf_internal_r+0x1b88>
 8006d08:	d9014c17 	ldw	r4,1328(sp)
 8006d0c:	2084703a 	and	r2,r4,r2
 8006d10:	103f9c26 	beq	r2,zero,8006b84 <___vfprintf_internal_r+0x1c70>
 8006d14:	003f6606 	br	8006ab0 <___vfprintf_internal_r+0x1b9c>
 8006d18:	d9800804 	addi	r6,sp,32
 8006d1c:	d8c00884 	addi	r3,sp,34
 8006d20:	003f5e06 	br	8006a9c <___vfprintf_internal_r+0x1b88>
 8006d24:	00800b44 	movi	r2,45
 8006d28:	0121c83a 	sub	r16,zero,r4
 8006d2c:	d8800845 	stb	r2,33(sp)
 8006d30:	003f3d06 	br	8006a28 <___vfprintf_internal_r+0x1b14>
 8006d34:	00800084 	movi	r2,2
 8006d38:	1105c83a 	sub	r2,r2,r4
 8006d3c:	003fe606 	br	8006cd8 <___vfprintf_internal_r+0x1dc4>
 8006d40:	d8014515 	stw	zero,1300(sp)
 8006d44:	dc814715 	stw	r18,1308(sp)
 8006d48:	003fb106 	br	8006c10 <___vfprintf_internal_r+0x1cfc>
 8006d4c:	000d883a 	mov	r6,zero
 8006d50:	000f883a 	mov	r7,zero
 8006d54:	8009883a 	mov	r4,r16
 8006d58:	880b883a 	mov	r5,r17
 8006d5c:	8003ed40 	call	8003ed4 <__nedf2>
 8006d60:	103f9f26 	beq	r2,zero,8006be0 <___vfprintf_internal_r+0x1ccc>
 8006d64:	00800044 	movi	r2,1
 8006d68:	1509c83a 	sub	r4,r2,r20
 8006d6c:	d9000515 	stw	r4,20(sp)
 8006d70:	003f9b06 	br	8006be0 <___vfprintf_internal_r+0x1ccc>
 8006d74:	98000d1e 	bne	r19,zero,8006dac <___vfprintf_internal_r+0x1e98>
 8006d78:	d8c14c17 	ldw	r3,1328(sp)
 8006d7c:	1880004c 	andi	r2,r3,1
 8006d80:	10000a1e 	bne	r2,zero,8006dac <___vfprintf_internal_r+0x1e98>
 8006d84:	01000044 	movi	r4,1
 8006d88:	200f883a 	mov	r7,r4
 8006d8c:	d9014515 	stw	r4,1300(sp)
 8006d90:	003f4a06 	br	8006abc <___vfprintf_internal_r+0x1ba8>
 8006d94:	3cc00017 	ldw	r19,0(r7)
 8006d98:	39c00104 	addi	r7,r7,4
 8006d9c:	983d0e0e 	bge	r19,zero,80061d8 <___vfprintf_internal_r+0x12c4>
 8006da0:	b8c00007 	ldb	r3,0(r23)
 8006da4:	04ffffc4 	movi	r19,-1
 8006da8:	0038d906 	br	8005110 <___vfprintf_internal_r+0x1fc>
 8006dac:	9cc00084 	addi	r19,r19,2
 8006db0:	dcc14515 	stw	r19,1300(sp)
 8006db4:	980f883a 	mov	r7,r19
 8006db8:	983f400e 	bge	r19,zero,8006abc <___vfprintf_internal_r+0x1ba8>
 8006dbc:	003f7306 	br	8006b8c <___vfprintf_internal_r+0x1c78>

08006dc0 <__vfprintf_internal>:
 8006dc0:	00820074 	movhi	r2,2049
 8006dc4:	108e5204 	addi	r2,r2,14664
 8006dc8:	2013883a 	mov	r9,r4
 8006dcc:	11000017 	ldw	r4,0(r2)
 8006dd0:	2805883a 	mov	r2,r5
 8006dd4:	300f883a 	mov	r7,r6
 8006dd8:	480b883a 	mov	r5,r9
 8006ddc:	100d883a 	mov	r6,r2
 8006de0:	8004f141 	jmpi	8004f14 <___vfprintf_internal_r>

08006de4 <__swsetup_r>:
 8006de4:	00820074 	movhi	r2,2049
 8006de8:	108e5204 	addi	r2,r2,14664
 8006dec:	10c00017 	ldw	r3,0(r2)
 8006df0:	defffd04 	addi	sp,sp,-12
 8006df4:	dc400115 	stw	r17,4(sp)
 8006df8:	dc000015 	stw	r16,0(sp)
 8006dfc:	dfc00215 	stw	ra,8(sp)
 8006e00:	2023883a 	mov	r17,r4
 8006e04:	2821883a 	mov	r16,r5
 8006e08:	18000226 	beq	r3,zero,8006e14 <__swsetup_r+0x30>
 8006e0c:	18800e17 	ldw	r2,56(r3)
 8006e10:	10001f26 	beq	r2,zero,8006e90 <__swsetup_r+0xac>
 8006e14:	8100030b 	ldhu	r4,12(r16)
 8006e18:	2080020c 	andi	r2,r4,8
 8006e1c:	10002826 	beq	r2,zero,8006ec0 <__swsetup_r+0xdc>
 8006e20:	81400417 	ldw	r5,16(r16)
 8006e24:	28001d26 	beq	r5,zero,8006e9c <__swsetup_r+0xb8>
 8006e28:	2080004c 	andi	r2,r4,1
 8006e2c:	1005003a 	cmpeq	r2,r2,zero
 8006e30:	10000b26 	beq	r2,zero,8006e60 <__swsetup_r+0x7c>
 8006e34:	2080008c 	andi	r2,r4,2
 8006e38:	10001226 	beq	r2,zero,8006e84 <__swsetup_r+0xa0>
 8006e3c:	0005883a 	mov	r2,zero
 8006e40:	80800215 	stw	r2,8(r16)
 8006e44:	28000b26 	beq	r5,zero,8006e74 <__swsetup_r+0x90>
 8006e48:	0005883a 	mov	r2,zero
 8006e4c:	dfc00217 	ldw	ra,8(sp)
 8006e50:	dc400117 	ldw	r17,4(sp)
 8006e54:	dc000017 	ldw	r16,0(sp)
 8006e58:	dec00304 	addi	sp,sp,12
 8006e5c:	f800283a 	ret
 8006e60:	80800517 	ldw	r2,20(r16)
 8006e64:	80000215 	stw	zero,8(r16)
 8006e68:	0085c83a 	sub	r2,zero,r2
 8006e6c:	80800615 	stw	r2,24(r16)
 8006e70:	283ff51e 	bne	r5,zero,8006e48 <__swsetup_r+0x64>
 8006e74:	2080200c 	andi	r2,r4,128
 8006e78:	103ff326 	beq	r2,zero,8006e48 <__swsetup_r+0x64>
 8006e7c:	00bfffc4 	movi	r2,-1
 8006e80:	003ff206 	br	8006e4c <__swsetup_r+0x68>
 8006e84:	80800517 	ldw	r2,20(r16)
 8006e88:	80800215 	stw	r2,8(r16)
 8006e8c:	003fed06 	br	8006e44 <__swsetup_r+0x60>
 8006e90:	1809883a 	mov	r4,r3
 8006e94:	80089840 	call	8008984 <__sinit>
 8006e98:	003fde06 	br	8006e14 <__swsetup_r+0x30>
 8006e9c:	20c0a00c 	andi	r3,r4,640
 8006ea0:	00808004 	movi	r2,512
 8006ea4:	18bfe026 	beq	r3,r2,8006e28 <__swsetup_r+0x44>
 8006ea8:	8809883a 	mov	r4,r17
 8006eac:	800b883a 	mov	r5,r16
 8006eb0:	80096fc0 	call	80096fc <__smakebuf_r>
 8006eb4:	8100030b 	ldhu	r4,12(r16)
 8006eb8:	81400417 	ldw	r5,16(r16)
 8006ebc:	003fda06 	br	8006e28 <__swsetup_r+0x44>
 8006ec0:	2080040c 	andi	r2,r4,16
 8006ec4:	103fed26 	beq	r2,zero,8006e7c <__swsetup_r+0x98>
 8006ec8:	2080010c 	andi	r2,r4,4
 8006ecc:	10001226 	beq	r2,zero,8006f18 <__swsetup_r+0x134>
 8006ed0:	81400c17 	ldw	r5,48(r16)
 8006ed4:	28000526 	beq	r5,zero,8006eec <__swsetup_r+0x108>
 8006ed8:	80801004 	addi	r2,r16,64
 8006edc:	28800226 	beq	r5,r2,8006ee8 <__swsetup_r+0x104>
 8006ee0:	8809883a 	mov	r4,r17
 8006ee4:	8008d080 	call	8008d08 <_free_r>
 8006ee8:	80000c15 	stw	zero,48(r16)
 8006eec:	8080030b 	ldhu	r2,12(r16)
 8006ef0:	81400417 	ldw	r5,16(r16)
 8006ef4:	80000115 	stw	zero,4(r16)
 8006ef8:	10bff6cc 	andi	r2,r2,65499
 8006efc:	8080030d 	sth	r2,12(r16)
 8006f00:	81400015 	stw	r5,0(r16)
 8006f04:	8080030b 	ldhu	r2,12(r16)
 8006f08:	10800214 	ori	r2,r2,8
 8006f0c:	113fffcc 	andi	r4,r2,65535
 8006f10:	8080030d 	sth	r2,12(r16)
 8006f14:	003fc306 	br	8006e24 <__swsetup_r+0x40>
 8006f18:	81400417 	ldw	r5,16(r16)
 8006f1c:	003ff906 	br	8006f04 <__swsetup_r+0x120>

08006f20 <quorem>:
 8006f20:	28c00417 	ldw	r3,16(r5)
 8006f24:	20800417 	ldw	r2,16(r4)
 8006f28:	defff604 	addi	sp,sp,-40
 8006f2c:	ddc00715 	stw	r23,28(sp)
 8006f30:	dd400515 	stw	r21,20(sp)
 8006f34:	dfc00915 	stw	ra,36(sp)
 8006f38:	df000815 	stw	fp,32(sp)
 8006f3c:	dd800615 	stw	r22,24(sp)
 8006f40:	dd000415 	stw	r20,16(sp)
 8006f44:	dcc00315 	stw	r19,12(sp)
 8006f48:	dc800215 	stw	r18,8(sp)
 8006f4c:	dc400115 	stw	r17,4(sp)
 8006f50:	dc000015 	stw	r16,0(sp)
 8006f54:	202f883a 	mov	r23,r4
 8006f58:	282b883a 	mov	r21,r5
 8006f5c:	10c07416 	blt	r2,r3,8007130 <quorem+0x210>
 8006f60:	1c7fffc4 	addi	r17,r3,-1
 8006f64:	8c45883a 	add	r2,r17,r17
 8006f68:	1085883a 	add	r2,r2,r2
 8006f6c:	2c000504 	addi	r16,r5,20
 8006f70:	24c00504 	addi	r19,r4,20
 8006f74:	14ed883a 	add	r22,r2,r19
 8006f78:	80a5883a 	add	r18,r16,r2
 8006f7c:	b7000017 	ldw	fp,0(r22)
 8006f80:	91400017 	ldw	r5,0(r18)
 8006f84:	e009883a 	mov	r4,fp
 8006f88:	29400044 	addi	r5,r5,1
 8006f8c:	80043d40 	call	80043d4 <__udivsi3>
 8006f90:	1029883a 	mov	r20,r2
 8006f94:	10003c1e 	bne	r2,zero,8007088 <quorem+0x168>
 8006f98:	a80b883a 	mov	r5,r21
 8006f9c:	b809883a 	mov	r4,r23
 8006fa0:	800a4280 	call	800a428 <__mcmp>
 8006fa4:	10002b16 	blt	r2,zero,8007054 <quorem+0x134>
 8006fa8:	a5000044 	addi	r20,r20,1
 8006fac:	980f883a 	mov	r7,r19
 8006fb0:	0011883a 	mov	r8,zero
 8006fb4:	0009883a 	mov	r4,zero
 8006fb8:	81400017 	ldw	r5,0(r16)
 8006fbc:	38c00017 	ldw	r3,0(r7)
 8006fc0:	84000104 	addi	r16,r16,4
 8006fc4:	28bfffcc 	andi	r2,r5,65535
 8006fc8:	2085883a 	add	r2,r4,r2
 8006fcc:	11bfffcc 	andi	r6,r2,65535
 8006fd0:	193fffcc 	andi	r4,r3,65535
 8006fd4:	1004d43a 	srli	r2,r2,16
 8006fd8:	280ad43a 	srli	r5,r5,16
 8006fdc:	2189c83a 	sub	r4,r4,r6
 8006fe0:	2209883a 	add	r4,r4,r8
 8006fe4:	1806d43a 	srli	r3,r3,16
 8006fe8:	288b883a 	add	r5,r5,r2
 8006fec:	200dd43a 	srai	r6,r4,16
 8006ff0:	28bfffcc 	andi	r2,r5,65535
 8006ff4:	1887c83a 	sub	r3,r3,r2
 8006ff8:	1987883a 	add	r3,r3,r6
 8006ffc:	3900000d 	sth	r4,0(r7)
 8007000:	38c0008d 	sth	r3,2(r7)
 8007004:	2808d43a 	srli	r4,r5,16
 8007008:	39c00104 	addi	r7,r7,4
 800700c:	1811d43a 	srai	r8,r3,16
 8007010:	943fe92e 	bgeu	r18,r16,8006fb8 <quorem+0x98>
 8007014:	8c45883a 	add	r2,r17,r17
 8007018:	1085883a 	add	r2,r2,r2
 800701c:	9885883a 	add	r2,r19,r2
 8007020:	10c00017 	ldw	r3,0(r2)
 8007024:	18000b1e 	bne	r3,zero,8007054 <quorem+0x134>
 8007028:	113fff04 	addi	r4,r2,-4
 800702c:	9900082e 	bgeu	r19,r4,8007050 <quorem+0x130>
 8007030:	10bfff17 	ldw	r2,-4(r2)
 8007034:	10000326 	beq	r2,zero,8007044 <quorem+0x124>
 8007038:	00000506 	br	8007050 <quorem+0x130>
 800703c:	20800017 	ldw	r2,0(r4)
 8007040:	1000031e 	bne	r2,zero,8007050 <quorem+0x130>
 8007044:	213fff04 	addi	r4,r4,-4
 8007048:	8c7fffc4 	addi	r17,r17,-1
 800704c:	993ffb36 	bltu	r19,r4,800703c <quorem+0x11c>
 8007050:	bc400415 	stw	r17,16(r23)
 8007054:	a005883a 	mov	r2,r20
 8007058:	dfc00917 	ldw	ra,36(sp)
 800705c:	df000817 	ldw	fp,32(sp)
 8007060:	ddc00717 	ldw	r23,28(sp)
 8007064:	dd800617 	ldw	r22,24(sp)
 8007068:	dd400517 	ldw	r21,20(sp)
 800706c:	dd000417 	ldw	r20,16(sp)
 8007070:	dcc00317 	ldw	r19,12(sp)
 8007074:	dc800217 	ldw	r18,8(sp)
 8007078:	dc400117 	ldw	r17,4(sp)
 800707c:	dc000017 	ldw	r16,0(sp)
 8007080:	dec00a04 	addi	sp,sp,40
 8007084:	f800283a 	ret
 8007088:	980f883a 	mov	r7,r19
 800708c:	8011883a 	mov	r8,r16
 8007090:	0013883a 	mov	r9,zero
 8007094:	000d883a 	mov	r6,zero
 8007098:	40c00017 	ldw	r3,0(r8)
 800709c:	39000017 	ldw	r4,0(r7)
 80070a0:	42000104 	addi	r8,r8,4
 80070a4:	18bfffcc 	andi	r2,r3,65535
 80070a8:	a085383a 	mul	r2,r20,r2
 80070ac:	1806d43a 	srli	r3,r3,16
 80070b0:	217fffcc 	andi	r5,r4,65535
 80070b4:	3085883a 	add	r2,r6,r2
 80070b8:	11bfffcc 	andi	r6,r2,65535
 80070bc:	a0c7383a 	mul	r3,r20,r3
 80070c0:	1004d43a 	srli	r2,r2,16
 80070c4:	298bc83a 	sub	r5,r5,r6
 80070c8:	2a4b883a 	add	r5,r5,r9
 80070cc:	2008d43a 	srli	r4,r4,16
 80070d0:	1887883a 	add	r3,r3,r2
 80070d4:	280dd43a 	srai	r6,r5,16
 80070d8:	18bfffcc 	andi	r2,r3,65535
 80070dc:	2089c83a 	sub	r4,r4,r2
 80070e0:	2189883a 	add	r4,r4,r6
 80070e4:	3900008d 	sth	r4,2(r7)
 80070e8:	3940000d 	sth	r5,0(r7)
 80070ec:	180cd43a 	srli	r6,r3,16
 80070f0:	39c00104 	addi	r7,r7,4
 80070f4:	2013d43a 	srai	r9,r4,16
 80070f8:	923fe72e 	bgeu	r18,r8,8007098 <quorem+0x178>
 80070fc:	e03fa61e 	bne	fp,zero,8006f98 <quorem+0x78>
 8007100:	b0ffff04 	addi	r3,r22,-4
 8007104:	98c0082e 	bgeu	r19,r3,8007128 <quorem+0x208>
 8007108:	b0bfff17 	ldw	r2,-4(r22)
 800710c:	10000326 	beq	r2,zero,800711c <quorem+0x1fc>
 8007110:	00000506 	br	8007128 <quorem+0x208>
 8007114:	18800017 	ldw	r2,0(r3)
 8007118:	1000031e 	bne	r2,zero,8007128 <quorem+0x208>
 800711c:	18ffff04 	addi	r3,r3,-4
 8007120:	8c7fffc4 	addi	r17,r17,-1
 8007124:	98fffb36 	bltu	r19,r3,8007114 <quorem+0x1f4>
 8007128:	bc400415 	stw	r17,16(r23)
 800712c:	003f9a06 	br	8006f98 <quorem+0x78>
 8007130:	0005883a 	mov	r2,zero
 8007134:	003fc806 	br	8007058 <quorem+0x138>

08007138 <_dtoa_r>:
 8007138:	22001017 	ldw	r8,64(r4)
 800713c:	deffda04 	addi	sp,sp,-152
 8007140:	dd402115 	stw	r21,132(sp)
 8007144:	dd002015 	stw	r20,128(sp)
 8007148:	dc801e15 	stw	r18,120(sp)
 800714c:	dc401d15 	stw	r17,116(sp)
 8007150:	dfc02515 	stw	ra,148(sp)
 8007154:	df002415 	stw	fp,144(sp)
 8007158:	ddc02315 	stw	r23,140(sp)
 800715c:	dd802215 	stw	r22,136(sp)
 8007160:	dcc01f15 	stw	r19,124(sp)
 8007164:	dc001c15 	stw	r16,112(sp)
 8007168:	d9001615 	stw	r4,88(sp)
 800716c:	3023883a 	mov	r17,r6
 8007170:	2829883a 	mov	r20,r5
 8007174:	d9c01715 	stw	r7,92(sp)
 8007178:	dc802817 	ldw	r18,160(sp)
 800717c:	302b883a 	mov	r21,r6
 8007180:	40000a26 	beq	r8,zero,80071ac <_dtoa_r+0x74>
 8007184:	20801117 	ldw	r2,68(r4)
 8007188:	400b883a 	mov	r5,r8
 800718c:	40800115 	stw	r2,4(r8)
 8007190:	20c01117 	ldw	r3,68(r4)
 8007194:	00800044 	movi	r2,1
 8007198:	10c4983a 	sll	r2,r2,r3
 800719c:	40800215 	stw	r2,8(r8)
 80071a0:	800a2cc0 	call	800a2cc <_Bfree>
 80071a4:	d8c01617 	ldw	r3,88(sp)
 80071a8:	18001015 	stw	zero,64(r3)
 80071ac:	8800a316 	blt	r17,zero,800743c <_dtoa_r+0x304>
 80071b0:	90000015 	stw	zero,0(r18)
 80071b4:	a8dffc2c 	andhi	r3,r21,32752
 80071b8:	009ffc34 	movhi	r2,32752
 80071bc:	18809126 	beq	r3,r2,8007404 <_dtoa_r+0x2cc>
 80071c0:	000d883a 	mov	r6,zero
 80071c4:	000f883a 	mov	r7,zero
 80071c8:	a009883a 	mov	r4,r20
 80071cc:	a80b883a 	mov	r5,r21
 80071d0:	dd001215 	stw	r20,72(sp)
 80071d4:	dd401315 	stw	r21,76(sp)
 80071d8:	8003ed40 	call	8003ed4 <__nedf2>
 80071dc:	1000171e 	bne	r2,zero,800723c <_dtoa_r+0x104>
 80071e0:	d9802717 	ldw	r6,156(sp)
 80071e4:	00800044 	movi	r2,1
 80071e8:	30800015 	stw	r2,0(r6)
 80071ec:	d8802917 	ldw	r2,164(sp)
 80071f0:	10029b26 	beq	r2,zero,8007c60 <_dtoa_r+0xb28>
 80071f4:	d9002917 	ldw	r4,164(sp)
 80071f8:	00820074 	movhi	r2,2049
 80071fc:	1086bb44 	addi	r2,r2,6893
 8007200:	10ffffc4 	addi	r3,r2,-1
 8007204:	20800015 	stw	r2,0(r4)
 8007208:	1805883a 	mov	r2,r3
 800720c:	dfc02517 	ldw	ra,148(sp)
 8007210:	df002417 	ldw	fp,144(sp)
 8007214:	ddc02317 	ldw	r23,140(sp)
 8007218:	dd802217 	ldw	r22,136(sp)
 800721c:	dd402117 	ldw	r21,132(sp)
 8007220:	dd002017 	ldw	r20,128(sp)
 8007224:	dcc01f17 	ldw	r19,124(sp)
 8007228:	dc801e17 	ldw	r18,120(sp)
 800722c:	dc401d17 	ldw	r17,116(sp)
 8007230:	dc001c17 	ldw	r16,112(sp)
 8007234:	dec02604 	addi	sp,sp,152
 8007238:	f800283a 	ret
 800723c:	d9001617 	ldw	r4,88(sp)
 8007240:	d9401217 	ldw	r5,72(sp)
 8007244:	d8800104 	addi	r2,sp,4
 8007248:	a80d883a 	mov	r6,r21
 800724c:	d9c00204 	addi	r7,sp,8
 8007250:	d8800015 	stw	r2,0(sp)
 8007254:	800a9080 	call	800a908 <__d2b>
 8007258:	d8800715 	stw	r2,28(sp)
 800725c:	a804d53a 	srli	r2,r21,20
 8007260:	1101ffcc 	andi	r4,r2,2047
 8007264:	20008626 	beq	r4,zero,8007480 <_dtoa_r+0x348>
 8007268:	d8c01217 	ldw	r3,72(sp)
 800726c:	00800434 	movhi	r2,16
 8007270:	10bfffc4 	addi	r2,r2,-1
 8007274:	ddc00117 	ldw	r23,4(sp)
 8007278:	a884703a 	and	r2,r21,r2
 800727c:	1811883a 	mov	r8,r3
 8007280:	124ffc34 	orhi	r9,r2,16368
 8007284:	25bf0044 	addi	r22,r4,-1023
 8007288:	d8000815 	stw	zero,32(sp)
 800728c:	0005883a 	mov	r2,zero
 8007290:	00cffe34 	movhi	r3,16376
 8007294:	480b883a 	mov	r5,r9
 8007298:	4009883a 	mov	r4,r8
 800729c:	180f883a 	mov	r7,r3
 80072a0:	100d883a 	mov	r6,r2
 80072a4:	800373c0 	call	800373c <__subdf3>
 80072a8:	0218dbf4 	movhi	r8,25455
 80072ac:	4210d844 	addi	r8,r8,17249
 80072b0:	024ff4f4 	movhi	r9,16339
 80072b4:	4a61e9c4 	addi	r9,r9,-30809
 80072b8:	480f883a 	mov	r7,r9
 80072bc:	400d883a 	mov	r6,r8
 80072c0:	180b883a 	mov	r5,r3
 80072c4:	1009883a 	mov	r4,r2
 80072c8:	80038300 	call	8003830 <__muldf3>
 80072cc:	0222d874 	movhi	r8,35681
 80072d0:	42322cc4 	addi	r8,r8,-14157
 80072d4:	024ff1f4 	movhi	r9,16327
 80072d8:	4a628a04 	addi	r9,r9,-30168
 80072dc:	480f883a 	mov	r7,r9
 80072e0:	400d883a 	mov	r6,r8
 80072e4:	180b883a 	mov	r5,r3
 80072e8:	1009883a 	mov	r4,r2
 80072ec:	80037bc0 	call	80037bc <__adddf3>
 80072f0:	b009883a 	mov	r4,r22
 80072f4:	1021883a 	mov	r16,r2
 80072f8:	1823883a 	mov	r17,r3
 80072fc:	80040f40 	call	80040f4 <__floatsidf>
 8007300:	021427f4 	movhi	r8,20639
 8007304:	421e7ec4 	addi	r8,r8,31227
 8007308:	024ff4f4 	movhi	r9,16339
 800730c:	4a5104c4 	addi	r9,r9,17427
 8007310:	480f883a 	mov	r7,r9
 8007314:	400d883a 	mov	r6,r8
 8007318:	180b883a 	mov	r5,r3
 800731c:	1009883a 	mov	r4,r2
 8007320:	80038300 	call	8003830 <__muldf3>
 8007324:	180f883a 	mov	r7,r3
 8007328:	880b883a 	mov	r5,r17
 800732c:	100d883a 	mov	r6,r2
 8007330:	8009883a 	mov	r4,r16
 8007334:	80037bc0 	call	80037bc <__adddf3>
 8007338:	1009883a 	mov	r4,r2
 800733c:	180b883a 	mov	r5,r3
 8007340:	1021883a 	mov	r16,r2
 8007344:	1823883a 	mov	r17,r3
 8007348:	800cc140 	call	800cc14 <__fixdfsi>
 800734c:	000d883a 	mov	r6,zero
 8007350:	000f883a 	mov	r7,zero
 8007354:	8009883a 	mov	r4,r16
 8007358:	880b883a 	mov	r5,r17
 800735c:	d8800d15 	stw	r2,52(sp)
 8007360:	8003fe40 	call	8003fe4 <__ltdf2>
 8007364:	10031716 	blt	r2,zero,8007fc4 <_dtoa_r+0xe8c>
 8007368:	d8c00d17 	ldw	r3,52(sp)
 800736c:	00800584 	movi	r2,22
 8007370:	10c1482e 	bgeu	r2,r3,8007894 <_dtoa_r+0x75c>
 8007374:	01000044 	movi	r4,1
 8007378:	d9000c15 	stw	r4,48(sp)
 800737c:	bd85c83a 	sub	r2,r23,r22
 8007380:	11bfffc4 	addi	r6,r2,-1
 8007384:	30030b16 	blt	r6,zero,8007fb4 <_dtoa_r+0xe7c>
 8007388:	d9800a15 	stw	r6,40(sp)
 800738c:	d8001115 	stw	zero,68(sp)
 8007390:	d8c00d17 	ldw	r3,52(sp)
 8007394:	1802ff16 	blt	r3,zero,8007f94 <_dtoa_r+0xe5c>
 8007398:	d9000a17 	ldw	r4,40(sp)
 800739c:	d8c00915 	stw	r3,36(sp)
 80073a0:	d8001015 	stw	zero,64(sp)
 80073a4:	20c9883a 	add	r4,r4,r3
 80073a8:	d9000a15 	stw	r4,40(sp)
 80073ac:	d9001717 	ldw	r4,92(sp)
 80073b0:	00800244 	movi	r2,9
 80073b4:	11004636 	bltu	r2,r4,80074d0 <_dtoa_r+0x398>
 80073b8:	00800144 	movi	r2,5
 80073bc:	11020416 	blt	r2,r4,8007bd0 <_dtoa_r+0xa98>
 80073c0:	04400044 	movi	r17,1
 80073c4:	d8c01717 	ldw	r3,92(sp)
 80073c8:	00800144 	movi	r2,5
 80073cc:	10c1ed36 	bltu	r2,r3,8007b84 <_dtoa_r+0xa4c>
 80073d0:	18c5883a 	add	r2,r3,r3
 80073d4:	1085883a 	add	r2,r2,r2
 80073d8:	00c20034 	movhi	r3,2048
 80073dc:	18dcfb04 	addi	r3,r3,29676
 80073e0:	10c5883a 	add	r2,r2,r3
 80073e4:	11000017 	ldw	r4,0(r2)
 80073e8:	2000683a 	jmp	r4
 80073ec:	080074d8 	cmpnei	zero,at,467
 80073f0:	080074d8 	cmpnei	zero,at,467
 80073f4:	08007ed8 	cmpnei	zero,at,507
 80073f8:	08007eb0 	cmpltui	zero,at,506
 80073fc:	08007ef4 	orhi	zero,at,507
 8007400:	08007f00 	call	8007f0 <__alt_mem_onchip_memory2_3+0x7f97f0>
 8007404:	d9002717 	ldw	r4,156(sp)
 8007408:	0089c3c4 	movi	r2,9999
 800740c:	20800015 	stw	r2,0(r4)
 8007410:	a0001026 	beq	r20,zero,8007454 <_dtoa_r+0x31c>
 8007414:	00c20074 	movhi	r3,2049
 8007418:	18c6c704 	addi	r3,r3,6940
 800741c:	d9802917 	ldw	r6,164(sp)
 8007420:	303f7926 	beq	r6,zero,8007208 <_dtoa_r+0xd0>
 8007424:	188000c7 	ldb	r2,3(r3)
 8007428:	190000c4 	addi	r4,r3,3
 800742c:	1000101e 	bne	r2,zero,8007470 <_dtoa_r+0x338>
 8007430:	d8802917 	ldw	r2,164(sp)
 8007434:	11000015 	stw	r4,0(r2)
 8007438:	003f7306 	br	8007208 <_dtoa_r+0xd0>
 800743c:	00a00034 	movhi	r2,32768
 8007440:	10bfffc4 	addi	r2,r2,-1
 8007444:	00c00044 	movi	r3,1
 8007448:	88aa703a 	and	r21,r17,r2
 800744c:	90c00015 	stw	r3,0(r18)
 8007450:	003f5806 	br	80071b4 <_dtoa_r+0x7c>
 8007454:	00800434 	movhi	r2,16
 8007458:	10bfffc4 	addi	r2,r2,-1
 800745c:	a884703a 	and	r2,r21,r2
 8007460:	103fec1e 	bne	r2,zero,8007414 <_dtoa_r+0x2dc>
 8007464:	00c20074 	movhi	r3,2049
 8007468:	18c6c404 	addi	r3,r3,6928
 800746c:	003feb06 	br	800741c <_dtoa_r+0x2e4>
 8007470:	d8802917 	ldw	r2,164(sp)
 8007474:	19000204 	addi	r4,r3,8
 8007478:	11000015 	stw	r4,0(r2)
 800747c:	003f6206 	br	8007208 <_dtoa_r+0xd0>
 8007480:	ddc00117 	ldw	r23,4(sp)
 8007484:	d8800217 	ldw	r2,8(sp)
 8007488:	01000804 	movi	r4,32
 800748c:	b8c10c84 	addi	r3,r23,1074
 8007490:	18a3883a 	add	r17,r3,r2
 8007494:	2441b80e 	bge	r4,r17,8007b78 <_dtoa_r+0xa40>
 8007498:	00c01004 	movi	r3,64
 800749c:	1c47c83a 	sub	r3,r3,r17
 80074a0:	88bff804 	addi	r2,r17,-32
 80074a4:	a8c6983a 	sll	r3,r21,r3
 80074a8:	a084d83a 	srl	r2,r20,r2
 80074ac:	1888b03a 	or	r4,r3,r2
 80074b0:	800ccec0 	call	800ccec <__floatunsidf>
 80074b4:	1011883a 	mov	r8,r2
 80074b8:	00bf8434 	movhi	r2,65040
 80074bc:	01000044 	movi	r4,1
 80074c0:	10d3883a 	add	r9,r2,r3
 80074c4:	8dbef344 	addi	r22,r17,-1075
 80074c8:	d9000815 	stw	r4,32(sp)
 80074cc:	003f6f06 	br	800728c <_dtoa_r+0x154>
 80074d0:	d8001715 	stw	zero,92(sp)
 80074d4:	04400044 	movi	r17,1
 80074d8:	00bfffc4 	movi	r2,-1
 80074dc:	00c00044 	movi	r3,1
 80074e0:	d8800e15 	stw	r2,56(sp)
 80074e4:	d8002615 	stw	zero,152(sp)
 80074e8:	d8800f15 	stw	r2,60(sp)
 80074ec:	d8c00b15 	stw	r3,44(sp)
 80074f0:	1021883a 	mov	r16,r2
 80074f4:	d8801617 	ldw	r2,88(sp)
 80074f8:	10001115 	stw	zero,68(r2)
 80074fc:	d8801617 	ldw	r2,88(sp)
 8007500:	11401117 	ldw	r5,68(r2)
 8007504:	1009883a 	mov	r4,r2
 8007508:	800a84c0 	call	800a84c <_Balloc>
 800750c:	d8c01617 	ldw	r3,88(sp)
 8007510:	d8800515 	stw	r2,20(sp)
 8007514:	18801015 	stw	r2,64(r3)
 8007518:	00800384 	movi	r2,14
 800751c:	14006836 	bltu	r2,r16,80076c0 <_dtoa_r+0x588>
 8007520:	8805003a 	cmpeq	r2,r17,zero
 8007524:	1000661e 	bne	r2,zero,80076c0 <_dtoa_r+0x588>
 8007528:	d9000d17 	ldw	r4,52(sp)
 800752c:	0102300e 	bge	zero,r4,8007df0 <_dtoa_r+0xcb8>
 8007530:	208003cc 	andi	r2,r4,15
 8007534:	100490fa 	slli	r2,r2,3
 8007538:	2025d13a 	srai	r18,r4,4
 800753c:	00c20074 	movhi	r3,2049
 8007540:	18c6d804 	addi	r3,r3,7008
 8007544:	10c5883a 	add	r2,r2,r3
 8007548:	90c0040c 	andi	r3,r18,16
 800754c:	14000017 	ldw	r16,0(r2)
 8007550:	14400117 	ldw	r17,4(r2)
 8007554:	18036a1e 	bne	r3,zero,8008300 <_dtoa_r+0x11c8>
 8007558:	05800084 	movi	r22,2
 800755c:	90001026 	beq	r18,zero,80075a0 <_dtoa_r+0x468>
 8007560:	04c20074 	movhi	r19,2049
 8007564:	9cc70a04 	addi	r19,r19,7208
 8007568:	9080004c 	andi	r2,r18,1
 800756c:	1005003a 	cmpeq	r2,r2,zero
 8007570:	1000081e 	bne	r2,zero,8007594 <_dtoa_r+0x45c>
 8007574:	99800017 	ldw	r6,0(r19)
 8007578:	99c00117 	ldw	r7,4(r19)
 800757c:	880b883a 	mov	r5,r17
 8007580:	8009883a 	mov	r4,r16
 8007584:	80038300 	call	8003830 <__muldf3>
 8007588:	1021883a 	mov	r16,r2
 800758c:	b5800044 	addi	r22,r22,1
 8007590:	1823883a 	mov	r17,r3
 8007594:	9025d07a 	srai	r18,r18,1
 8007598:	9cc00204 	addi	r19,r19,8
 800759c:	903ff21e 	bne	r18,zero,8007568 <_dtoa_r+0x430>
 80075a0:	a80b883a 	mov	r5,r21
 80075a4:	a009883a 	mov	r4,r20
 80075a8:	880f883a 	mov	r7,r17
 80075ac:	800d883a 	mov	r6,r16
 80075b0:	8003bf40 	call	8003bf4 <__divdf3>
 80075b4:	1029883a 	mov	r20,r2
 80075b8:	182b883a 	mov	r21,r3
 80075bc:	d8c00c17 	ldw	r3,48(sp)
 80075c0:	1805003a 	cmpeq	r2,r3,zero
 80075c4:	1000081e 	bne	r2,zero,80075e8 <_dtoa_r+0x4b0>
 80075c8:	0005883a 	mov	r2,zero
 80075cc:	00cffc34 	movhi	r3,16368
 80075d0:	180f883a 	mov	r7,r3
 80075d4:	a009883a 	mov	r4,r20
 80075d8:	a80b883a 	mov	r5,r21
 80075dc:	100d883a 	mov	r6,r2
 80075e0:	8003fe40 	call	8003fe4 <__ltdf2>
 80075e4:	1003fe16 	blt	r2,zero,80085e0 <_dtoa_r+0x14a8>
 80075e8:	b009883a 	mov	r4,r22
 80075ec:	80040f40 	call	80040f4 <__floatsidf>
 80075f0:	180b883a 	mov	r5,r3
 80075f4:	1009883a 	mov	r4,r2
 80075f8:	a00d883a 	mov	r6,r20
 80075fc:	a80f883a 	mov	r7,r21
 8007600:	80038300 	call	8003830 <__muldf3>
 8007604:	0011883a 	mov	r8,zero
 8007608:	02500734 	movhi	r9,16412
 800760c:	1009883a 	mov	r4,r2
 8007610:	180b883a 	mov	r5,r3
 8007614:	480f883a 	mov	r7,r9
 8007618:	400d883a 	mov	r6,r8
 800761c:	80037bc0 	call	80037bc <__adddf3>
 8007620:	d9000f17 	ldw	r4,60(sp)
 8007624:	102d883a 	mov	r22,r2
 8007628:	00bf3034 	movhi	r2,64704
 800762c:	18b9883a 	add	fp,r3,r2
 8007630:	e02f883a 	mov	r23,fp
 8007634:	20028f1e 	bne	r4,zero,8008074 <_dtoa_r+0xf3c>
 8007638:	0005883a 	mov	r2,zero
 800763c:	00d00534 	movhi	r3,16404
 8007640:	a009883a 	mov	r4,r20
 8007644:	a80b883a 	mov	r5,r21
 8007648:	180f883a 	mov	r7,r3
 800764c:	100d883a 	mov	r6,r2
 8007650:	800373c0 	call	800373c <__subdf3>
 8007654:	1009883a 	mov	r4,r2
 8007658:	e00f883a 	mov	r7,fp
 800765c:	180b883a 	mov	r5,r3
 8007660:	b00d883a 	mov	r6,r22
 8007664:	1025883a 	mov	r18,r2
 8007668:	1827883a 	mov	r19,r3
 800766c:	8003f5c0 	call	8003f5c <__gtdf2>
 8007670:	00834f16 	blt	zero,r2,80083b0 <_dtoa_r+0x1278>
 8007674:	e0e0003c 	xorhi	r3,fp,32768
 8007678:	9009883a 	mov	r4,r18
 800767c:	980b883a 	mov	r5,r19
 8007680:	180f883a 	mov	r7,r3
 8007684:	b00d883a 	mov	r6,r22
 8007688:	8003fe40 	call	8003fe4 <__ltdf2>
 800768c:	1000080e 	bge	r2,zero,80076b0 <_dtoa_r+0x578>
 8007690:	0027883a 	mov	r19,zero
 8007694:	0025883a 	mov	r18,zero
 8007698:	d8802617 	ldw	r2,152(sp)
 800769c:	df000517 	ldw	fp,20(sp)
 80076a0:	d8000615 	stw	zero,24(sp)
 80076a4:	0084303a 	nor	r2,zero,r2
 80076a8:	d8800d15 	stw	r2,52(sp)
 80076ac:	00019b06 	br	8007d1c <_dtoa_r+0xbe4>
 80076b0:	d9801217 	ldw	r6,72(sp)
 80076b4:	d8801317 	ldw	r2,76(sp)
 80076b8:	3029883a 	mov	r20,r6
 80076bc:	102b883a 	mov	r21,r2
 80076c0:	d8c00217 	ldw	r3,8(sp)
 80076c4:	18008516 	blt	r3,zero,80078dc <_dtoa_r+0x7a4>
 80076c8:	d9000d17 	ldw	r4,52(sp)
 80076cc:	00800384 	movi	r2,14
 80076d0:	11008216 	blt	r2,r4,80078dc <_dtoa_r+0x7a4>
 80076d4:	200490fa 	slli	r2,r4,3
 80076d8:	d9802617 	ldw	r6,152(sp)
 80076dc:	00c20074 	movhi	r3,2049
 80076e0:	18c6d804 	addi	r3,r3,7008
 80076e4:	10c5883a 	add	r2,r2,r3
 80076e8:	14800017 	ldw	r18,0(r2)
 80076ec:	14c00117 	ldw	r19,4(r2)
 80076f0:	30031e16 	blt	r6,zero,800836c <_dtoa_r+0x1234>
 80076f4:	d9000517 	ldw	r4,20(sp)
 80076f8:	d8c00f17 	ldw	r3,60(sp)
 80076fc:	a823883a 	mov	r17,r21
 8007700:	a021883a 	mov	r16,r20
 8007704:	192b883a 	add	r21,r3,r4
 8007708:	2039883a 	mov	fp,r4
 800770c:	00000f06 	br	800774c <_dtoa_r+0x614>
 8007710:	0005883a 	mov	r2,zero
 8007714:	00d00934 	movhi	r3,16420
 8007718:	5009883a 	mov	r4,r10
 800771c:	580b883a 	mov	r5,r11
 8007720:	180f883a 	mov	r7,r3
 8007724:	100d883a 	mov	r6,r2
 8007728:	80038300 	call	8003830 <__muldf3>
 800772c:	180b883a 	mov	r5,r3
 8007730:	000d883a 	mov	r6,zero
 8007734:	000f883a 	mov	r7,zero
 8007738:	1009883a 	mov	r4,r2
 800773c:	1021883a 	mov	r16,r2
 8007740:	1823883a 	mov	r17,r3
 8007744:	8003ed40 	call	8003ed4 <__nedf2>
 8007748:	10004526 	beq	r2,zero,8007860 <_dtoa_r+0x728>
 800774c:	900d883a 	mov	r6,r18
 8007750:	980f883a 	mov	r7,r19
 8007754:	8009883a 	mov	r4,r16
 8007758:	880b883a 	mov	r5,r17
 800775c:	8003bf40 	call	8003bf4 <__divdf3>
 8007760:	180b883a 	mov	r5,r3
 8007764:	1009883a 	mov	r4,r2
 8007768:	800cc140 	call	800cc14 <__fixdfsi>
 800776c:	1009883a 	mov	r4,r2
 8007770:	1029883a 	mov	r20,r2
 8007774:	80040f40 	call	80040f4 <__floatsidf>
 8007778:	180f883a 	mov	r7,r3
 800777c:	9009883a 	mov	r4,r18
 8007780:	980b883a 	mov	r5,r19
 8007784:	100d883a 	mov	r6,r2
 8007788:	80038300 	call	8003830 <__muldf3>
 800778c:	180f883a 	mov	r7,r3
 8007790:	880b883a 	mov	r5,r17
 8007794:	8009883a 	mov	r4,r16
 8007798:	100d883a 	mov	r6,r2
 800779c:	800373c0 	call	800373c <__subdf3>
 80077a0:	1015883a 	mov	r10,r2
 80077a4:	a0800c04 	addi	r2,r20,48
 80077a8:	e0800005 	stb	r2,0(fp)
 80077ac:	e7000044 	addi	fp,fp,1
 80077b0:	1817883a 	mov	r11,r3
 80077b4:	e57fd61e 	bne	fp,r21,8007710 <_dtoa_r+0x5d8>
 80077b8:	500d883a 	mov	r6,r10
 80077bc:	180f883a 	mov	r7,r3
 80077c0:	5009883a 	mov	r4,r10
 80077c4:	180b883a 	mov	r5,r3
 80077c8:	80037bc0 	call	80037bc <__adddf3>
 80077cc:	100d883a 	mov	r6,r2
 80077d0:	9009883a 	mov	r4,r18
 80077d4:	980b883a 	mov	r5,r19
 80077d8:	180f883a 	mov	r7,r3
 80077dc:	1021883a 	mov	r16,r2
 80077e0:	1823883a 	mov	r17,r3
 80077e4:	8003fe40 	call	8003fe4 <__ltdf2>
 80077e8:	10000816 	blt	r2,zero,800780c <_dtoa_r+0x6d4>
 80077ec:	980b883a 	mov	r5,r19
 80077f0:	800d883a 	mov	r6,r16
 80077f4:	880f883a 	mov	r7,r17
 80077f8:	9009883a 	mov	r4,r18
 80077fc:	8003e4c0 	call	8003e4c <__eqdf2>
 8007800:	1000171e 	bne	r2,zero,8007860 <_dtoa_r+0x728>
 8007804:	a080004c 	andi	r2,r20,1
 8007808:	10001526 	beq	r2,zero,8007860 <_dtoa_r+0x728>
 800780c:	d8800d17 	ldw	r2,52(sp)
 8007810:	d8800415 	stw	r2,16(sp)
 8007814:	e009883a 	mov	r4,fp
 8007818:	213fffc4 	addi	r4,r4,-1
 800781c:	20c00007 	ldb	r3,0(r4)
 8007820:	00800e44 	movi	r2,57
 8007824:	1880081e 	bne	r3,r2,8007848 <_dtoa_r+0x710>
 8007828:	d8800517 	ldw	r2,20(sp)
 800782c:	113ffa1e 	bne	r2,r4,8007818 <_dtoa_r+0x6e0>
 8007830:	d8c00417 	ldw	r3,16(sp)
 8007834:	d9800517 	ldw	r6,20(sp)
 8007838:	00800c04 	movi	r2,48
 800783c:	18c00044 	addi	r3,r3,1
 8007840:	d8c00415 	stw	r3,16(sp)
 8007844:	30800005 	stb	r2,0(r6)
 8007848:	20800003 	ldbu	r2,0(r4)
 800784c:	d8c00417 	ldw	r3,16(sp)
 8007850:	27000044 	addi	fp,r4,1
 8007854:	10800044 	addi	r2,r2,1
 8007858:	d8c00d15 	stw	r3,52(sp)
 800785c:	20800005 	stb	r2,0(r4)
 8007860:	d9001617 	ldw	r4,88(sp)
 8007864:	d9400717 	ldw	r5,28(sp)
 8007868:	800a2cc0 	call	800a2cc <_Bfree>
 800786c:	e0000005 	stb	zero,0(fp)
 8007870:	d9800d17 	ldw	r6,52(sp)
 8007874:	d8c02717 	ldw	r3,156(sp)
 8007878:	d9002917 	ldw	r4,164(sp)
 800787c:	30800044 	addi	r2,r6,1
 8007880:	18800015 	stw	r2,0(r3)
 8007884:	20029c26 	beq	r4,zero,80082f8 <_dtoa_r+0x11c0>
 8007888:	d8c00517 	ldw	r3,20(sp)
 800788c:	27000015 	stw	fp,0(r4)
 8007890:	003e5d06 	br	8007208 <_dtoa_r+0xd0>
 8007894:	d9800d17 	ldw	r6,52(sp)
 8007898:	00c20074 	movhi	r3,2049
 800789c:	18c6d804 	addi	r3,r3,7008
 80078a0:	d9001217 	ldw	r4,72(sp)
 80078a4:	300490fa 	slli	r2,r6,3
 80078a8:	d9401317 	ldw	r5,76(sp)
 80078ac:	10c5883a 	add	r2,r2,r3
 80078b0:	12000017 	ldw	r8,0(r2)
 80078b4:	12400117 	ldw	r9,4(r2)
 80078b8:	400d883a 	mov	r6,r8
 80078bc:	480f883a 	mov	r7,r9
 80078c0:	8003fe40 	call	8003fe4 <__ltdf2>
 80078c4:	1000030e 	bge	r2,zero,80078d4 <_dtoa_r+0x79c>
 80078c8:	d8800d17 	ldw	r2,52(sp)
 80078cc:	10bfffc4 	addi	r2,r2,-1
 80078d0:	d8800d15 	stw	r2,52(sp)
 80078d4:	d8000c15 	stw	zero,48(sp)
 80078d8:	003ea806 	br	800737c <_dtoa_r+0x244>
 80078dc:	d9000b17 	ldw	r4,44(sp)
 80078e0:	202cc03a 	cmpne	r22,r4,zero
 80078e4:	b000c71e 	bne	r22,zero,8007c04 <_dtoa_r+0xacc>
 80078e8:	dc001117 	ldw	r16,68(sp)
 80078ec:	dc801017 	ldw	r18,64(sp)
 80078f0:	0027883a 	mov	r19,zero
 80078f4:	04000b0e 	bge	zero,r16,8007924 <_dtoa_r+0x7ec>
 80078f8:	d8c00a17 	ldw	r3,40(sp)
 80078fc:	00c0090e 	bge	zero,r3,8007924 <_dtoa_r+0x7ec>
 8007900:	8005883a 	mov	r2,r16
 8007904:	1c011316 	blt	r3,r16,8007d54 <_dtoa_r+0xc1c>
 8007908:	d9000a17 	ldw	r4,40(sp)
 800790c:	d9801117 	ldw	r6,68(sp)
 8007910:	80a1c83a 	sub	r16,r16,r2
 8007914:	2089c83a 	sub	r4,r4,r2
 8007918:	308dc83a 	sub	r6,r6,r2
 800791c:	d9000a15 	stw	r4,40(sp)
 8007920:	d9801115 	stw	r6,68(sp)
 8007924:	d8801017 	ldw	r2,64(sp)
 8007928:	0080150e 	bge	zero,r2,8007980 <_dtoa_r+0x848>
 800792c:	d8c00b17 	ldw	r3,44(sp)
 8007930:	1805003a 	cmpeq	r2,r3,zero
 8007934:	1001c91e 	bne	r2,zero,800805c <_dtoa_r+0xf24>
 8007938:	04800e0e 	bge	zero,r18,8007974 <_dtoa_r+0x83c>
 800793c:	d9001617 	ldw	r4,88(sp)
 8007940:	980b883a 	mov	r5,r19
 8007944:	900d883a 	mov	r6,r18
 8007948:	800b0800 	call	800b080 <__pow5mult>
 800794c:	d9001617 	ldw	r4,88(sp)
 8007950:	d9800717 	ldw	r6,28(sp)
 8007954:	100b883a 	mov	r5,r2
 8007958:	1027883a 	mov	r19,r2
 800795c:	800ad5c0 	call	800ad5c <__multiply>
 8007960:	d9001617 	ldw	r4,88(sp)
 8007964:	d9400717 	ldw	r5,28(sp)
 8007968:	1023883a 	mov	r17,r2
 800796c:	800a2cc0 	call	800a2cc <_Bfree>
 8007970:	dc400715 	stw	r17,28(sp)
 8007974:	d9001017 	ldw	r4,64(sp)
 8007978:	248dc83a 	sub	r6,r4,r18
 800797c:	30010e1e 	bne	r6,zero,8007db8 <_dtoa_r+0xc80>
 8007980:	d9001617 	ldw	r4,88(sp)
 8007984:	04400044 	movi	r17,1
 8007988:	880b883a 	mov	r5,r17
 800798c:	800af440 	call	800af44 <__i2b>
 8007990:	d9800917 	ldw	r6,36(sp)
 8007994:	1025883a 	mov	r18,r2
 8007998:	0180040e 	bge	zero,r6,80079ac <_dtoa_r+0x874>
 800799c:	d9001617 	ldw	r4,88(sp)
 80079a0:	100b883a 	mov	r5,r2
 80079a4:	800b0800 	call	800b080 <__pow5mult>
 80079a8:	1025883a 	mov	r18,r2
 80079ac:	d8801717 	ldw	r2,92(sp)
 80079b0:	8880f30e 	bge	r17,r2,8007d80 <_dtoa_r+0xc48>
 80079b4:	0023883a 	mov	r17,zero
 80079b8:	d9800917 	ldw	r6,36(sp)
 80079bc:	30019e1e 	bne	r6,zero,8008038 <_dtoa_r+0xf00>
 80079c0:	00c00044 	movi	r3,1
 80079c4:	d9000a17 	ldw	r4,40(sp)
 80079c8:	20c5883a 	add	r2,r4,r3
 80079cc:	10c007cc 	andi	r3,r2,31
 80079d0:	1800841e 	bne	r3,zero,8007be4 <_dtoa_r+0xaac>
 80079d4:	00800704 	movi	r2,28
 80079d8:	d9000a17 	ldw	r4,40(sp)
 80079dc:	d9801117 	ldw	r6,68(sp)
 80079e0:	80a1883a 	add	r16,r16,r2
 80079e4:	2089883a 	add	r4,r4,r2
 80079e8:	308d883a 	add	r6,r6,r2
 80079ec:	d9000a15 	stw	r4,40(sp)
 80079f0:	d9801115 	stw	r6,68(sp)
 80079f4:	d8801117 	ldw	r2,68(sp)
 80079f8:	0080050e 	bge	zero,r2,8007a10 <_dtoa_r+0x8d8>
 80079fc:	d9400717 	ldw	r5,28(sp)
 8007a00:	d9001617 	ldw	r4,88(sp)
 8007a04:	100d883a 	mov	r6,r2
 8007a08:	800ac100 	call	800ac10 <__lshift>
 8007a0c:	d8800715 	stw	r2,28(sp)
 8007a10:	d8c00a17 	ldw	r3,40(sp)
 8007a14:	00c0050e 	bge	zero,r3,8007a2c <_dtoa_r+0x8f4>
 8007a18:	d9001617 	ldw	r4,88(sp)
 8007a1c:	900b883a 	mov	r5,r18
 8007a20:	180d883a 	mov	r6,r3
 8007a24:	800ac100 	call	800ac10 <__lshift>
 8007a28:	1025883a 	mov	r18,r2
 8007a2c:	d9000c17 	ldw	r4,48(sp)
 8007a30:	2005003a 	cmpeq	r2,r4,zero
 8007a34:	10016f26 	beq	r2,zero,8007ff4 <_dtoa_r+0xebc>
 8007a38:	d9000f17 	ldw	r4,60(sp)
 8007a3c:	0102170e 	bge	zero,r4,800829c <_dtoa_r+0x1164>
 8007a40:	d9800b17 	ldw	r6,44(sp)
 8007a44:	3005003a 	cmpeq	r2,r6,zero
 8007a48:	1000881e 	bne	r2,zero,8007c6c <_dtoa_r+0xb34>
 8007a4c:	0400050e 	bge	zero,r16,8007a64 <_dtoa_r+0x92c>
 8007a50:	d9001617 	ldw	r4,88(sp)
 8007a54:	980b883a 	mov	r5,r19
 8007a58:	800d883a 	mov	r6,r16
 8007a5c:	800ac100 	call	800ac10 <__lshift>
 8007a60:	1027883a 	mov	r19,r2
 8007a64:	8804c03a 	cmpne	r2,r17,zero
 8007a68:	1002541e 	bne	r2,zero,80083bc <_dtoa_r+0x1284>
 8007a6c:	980b883a 	mov	r5,r19
 8007a70:	dd800517 	ldw	r22,20(sp)
 8007a74:	dcc00615 	stw	r19,24(sp)
 8007a78:	a700004c 	andi	fp,r20,1
 8007a7c:	2827883a 	mov	r19,r5
 8007a80:	d9000717 	ldw	r4,28(sp)
 8007a84:	900b883a 	mov	r5,r18
 8007a88:	8006f200 	call	8006f20 <quorem>
 8007a8c:	d9000717 	ldw	r4,28(sp)
 8007a90:	d9400617 	ldw	r5,24(sp)
 8007a94:	1023883a 	mov	r17,r2
 8007a98:	8dc00c04 	addi	r23,r17,48
 8007a9c:	800a4280 	call	800a428 <__mcmp>
 8007aa0:	d9001617 	ldw	r4,88(sp)
 8007aa4:	900b883a 	mov	r5,r18
 8007aa8:	980d883a 	mov	r6,r19
 8007aac:	1029883a 	mov	r20,r2
 8007ab0:	800aa840 	call	800aa84 <__mdiff>
 8007ab4:	102b883a 	mov	r21,r2
 8007ab8:	10800317 	ldw	r2,12(r2)
 8007abc:	1001281e 	bne	r2,zero,8007f60 <_dtoa_r+0xe28>
 8007ac0:	d9000717 	ldw	r4,28(sp)
 8007ac4:	a80b883a 	mov	r5,r21
 8007ac8:	800a4280 	call	800a428 <__mcmp>
 8007acc:	d9001617 	ldw	r4,88(sp)
 8007ad0:	1021883a 	mov	r16,r2
 8007ad4:	a80b883a 	mov	r5,r21
 8007ad8:	800a2cc0 	call	800a2cc <_Bfree>
 8007adc:	8000041e 	bne	r16,zero,8007af0 <_dtoa_r+0x9b8>
 8007ae0:	d8801717 	ldw	r2,92(sp)
 8007ae4:	1000021e 	bne	r2,zero,8007af0 <_dtoa_r+0x9b8>
 8007ae8:	e004c03a 	cmpne	r2,fp,zero
 8007aec:	10011726 	beq	r2,zero,8007f4c <_dtoa_r+0xe14>
 8007af0:	a0010616 	blt	r20,zero,8007f0c <_dtoa_r+0xdd4>
 8007af4:	a000041e 	bne	r20,zero,8007b08 <_dtoa_r+0x9d0>
 8007af8:	d8c01717 	ldw	r3,92(sp)
 8007afc:	1800021e 	bne	r3,zero,8007b08 <_dtoa_r+0x9d0>
 8007b00:	e004c03a 	cmpne	r2,fp,zero
 8007b04:	10010126 	beq	r2,zero,8007f0c <_dtoa_r+0xdd4>
 8007b08:	04023d16 	blt	zero,r16,8008400 <_dtoa_r+0x12c8>
 8007b0c:	b5c00005 	stb	r23,0(r22)
 8007b10:	d9800517 	ldw	r6,20(sp)
 8007b14:	d9000f17 	ldw	r4,60(sp)
 8007b18:	b5800044 	addi	r22,r22,1
 8007b1c:	3105883a 	add	r2,r6,r4
 8007b20:	b0806526 	beq	r22,r2,8007cb8 <_dtoa_r+0xb80>
 8007b24:	d9400717 	ldw	r5,28(sp)
 8007b28:	d9001617 	ldw	r4,88(sp)
 8007b2c:	01800284 	movi	r6,10
 8007b30:	000f883a 	mov	r7,zero
 8007b34:	800af800 	call	800af80 <__multadd>
 8007b38:	d8800715 	stw	r2,28(sp)
 8007b3c:	d8800617 	ldw	r2,24(sp)
 8007b40:	14c10c26 	beq	r2,r19,8007f74 <_dtoa_r+0xe3c>
 8007b44:	d9400617 	ldw	r5,24(sp)
 8007b48:	d9001617 	ldw	r4,88(sp)
 8007b4c:	01800284 	movi	r6,10
 8007b50:	000f883a 	mov	r7,zero
 8007b54:	800af800 	call	800af80 <__multadd>
 8007b58:	d9001617 	ldw	r4,88(sp)
 8007b5c:	980b883a 	mov	r5,r19
 8007b60:	01800284 	movi	r6,10
 8007b64:	000f883a 	mov	r7,zero
 8007b68:	d8800615 	stw	r2,24(sp)
 8007b6c:	800af800 	call	800af80 <__multadd>
 8007b70:	1027883a 	mov	r19,r2
 8007b74:	003fc206 	br	8007a80 <_dtoa_r+0x948>
 8007b78:	2445c83a 	sub	r2,r4,r17
 8007b7c:	a088983a 	sll	r4,r20,r2
 8007b80:	003e4b06 	br	80074b0 <_dtoa_r+0x378>
 8007b84:	01bfffc4 	movi	r6,-1
 8007b88:	00800044 	movi	r2,1
 8007b8c:	d9800e15 	stw	r6,56(sp)
 8007b90:	d9800f15 	stw	r6,60(sp)
 8007b94:	d8800b15 	stw	r2,44(sp)
 8007b98:	d8c01617 	ldw	r3,88(sp)
 8007b9c:	008005c4 	movi	r2,23
 8007ba0:	18001115 	stw	zero,68(r3)
 8007ba4:	1580082e 	bgeu	r2,r22,8007bc8 <_dtoa_r+0xa90>
 8007ba8:	00c00104 	movi	r3,4
 8007bac:	0009883a 	mov	r4,zero
 8007bb0:	18c7883a 	add	r3,r3,r3
 8007bb4:	18800504 	addi	r2,r3,20
 8007bb8:	21000044 	addi	r4,r4,1
 8007bbc:	b0bffc2e 	bgeu	r22,r2,8007bb0 <_dtoa_r+0xa78>
 8007bc0:	d9801617 	ldw	r6,88(sp)
 8007bc4:	31001115 	stw	r4,68(r6)
 8007bc8:	dc000f17 	ldw	r16,60(sp)
 8007bcc:	003e4b06 	br	80074fc <_dtoa_r+0x3c4>
 8007bd0:	d9801717 	ldw	r6,92(sp)
 8007bd4:	0023883a 	mov	r17,zero
 8007bd8:	31bfff04 	addi	r6,r6,-4
 8007bdc:	d9801715 	stw	r6,92(sp)
 8007be0:	003df806 	br	80073c4 <_dtoa_r+0x28c>
 8007be4:	00800804 	movi	r2,32
 8007be8:	10c9c83a 	sub	r4,r2,r3
 8007bec:	00c00104 	movi	r3,4
 8007bf0:	19005a16 	blt	r3,r4,8007d5c <_dtoa_r+0xc24>
 8007bf4:	008000c4 	movi	r2,3
 8007bf8:	113f7e16 	blt	r2,r4,80079f4 <_dtoa_r+0x8bc>
 8007bfc:	20800704 	addi	r2,r4,28
 8007c00:	003f7506 	br	80079d8 <_dtoa_r+0x8a0>
 8007c04:	d9801717 	ldw	r6,92(sp)
 8007c08:	00800044 	movi	r2,1
 8007c0c:	1180a10e 	bge	r2,r6,8007e94 <_dtoa_r+0xd5c>
 8007c10:	d9800f17 	ldw	r6,60(sp)
 8007c14:	d8c01017 	ldw	r3,64(sp)
 8007c18:	30bfffc4 	addi	r2,r6,-1
 8007c1c:	1881c616 	blt	r3,r2,8008338 <_dtoa_r+0x1200>
 8007c20:	18a5c83a 	sub	r18,r3,r2
 8007c24:	d8800f17 	ldw	r2,60(sp)
 8007c28:	10026216 	blt	r2,zero,80085b4 <_dtoa_r+0x147c>
 8007c2c:	dc001117 	ldw	r16,68(sp)
 8007c30:	1007883a 	mov	r3,r2
 8007c34:	d9800a17 	ldw	r6,40(sp)
 8007c38:	d8801117 	ldw	r2,68(sp)
 8007c3c:	d9001617 	ldw	r4,88(sp)
 8007c40:	30cd883a 	add	r6,r6,r3
 8007c44:	10c5883a 	add	r2,r2,r3
 8007c48:	01400044 	movi	r5,1
 8007c4c:	d9800a15 	stw	r6,40(sp)
 8007c50:	d8801115 	stw	r2,68(sp)
 8007c54:	800af440 	call	800af44 <__i2b>
 8007c58:	1027883a 	mov	r19,r2
 8007c5c:	003f2506 	br	80078f4 <_dtoa_r+0x7bc>
 8007c60:	00c20074 	movhi	r3,2049
 8007c64:	18c6bb04 	addi	r3,r3,6892
 8007c68:	003d6706 	br	8007208 <_dtoa_r+0xd0>
 8007c6c:	dd800517 	ldw	r22,20(sp)
 8007c70:	04000044 	movi	r16,1
 8007c74:	00000706 	br	8007c94 <_dtoa_r+0xb5c>
 8007c78:	d9400717 	ldw	r5,28(sp)
 8007c7c:	d9001617 	ldw	r4,88(sp)
 8007c80:	01800284 	movi	r6,10
 8007c84:	000f883a 	mov	r7,zero
 8007c88:	800af800 	call	800af80 <__multadd>
 8007c8c:	d8800715 	stw	r2,28(sp)
 8007c90:	84000044 	addi	r16,r16,1
 8007c94:	d9000717 	ldw	r4,28(sp)
 8007c98:	900b883a 	mov	r5,r18
 8007c9c:	8006f200 	call	8006f20 <quorem>
 8007ca0:	15c00c04 	addi	r23,r2,48
 8007ca4:	b5c00005 	stb	r23,0(r22)
 8007ca8:	d8c00f17 	ldw	r3,60(sp)
 8007cac:	b5800044 	addi	r22,r22,1
 8007cb0:	80fff116 	blt	r16,r3,8007c78 <_dtoa_r+0xb40>
 8007cb4:	d8000615 	stw	zero,24(sp)
 8007cb8:	d9400717 	ldw	r5,28(sp)
 8007cbc:	d9001617 	ldw	r4,88(sp)
 8007cc0:	01800044 	movi	r6,1
 8007cc4:	800ac100 	call	800ac10 <__lshift>
 8007cc8:	1009883a 	mov	r4,r2
 8007ccc:	900b883a 	mov	r5,r18
 8007cd0:	d8800715 	stw	r2,28(sp)
 8007cd4:	800a4280 	call	800a428 <__mcmp>
 8007cd8:	00803c0e 	bge	zero,r2,8007dcc <_dtoa_r+0xc94>
 8007cdc:	b009883a 	mov	r4,r22
 8007ce0:	213fffc4 	addi	r4,r4,-1
 8007ce4:	21400003 	ldbu	r5,0(r4)
 8007ce8:	00800e44 	movi	r2,57
 8007cec:	28c03fcc 	andi	r3,r5,255
 8007cf0:	18c0201c 	xori	r3,r3,128
 8007cf4:	18ffe004 	addi	r3,r3,-128
 8007cf8:	1881981e 	bne	r3,r2,800835c <_dtoa_r+0x1224>
 8007cfc:	d9800517 	ldw	r6,20(sp)
 8007d00:	21bff71e 	bne	r4,r6,8007ce0 <_dtoa_r+0xba8>
 8007d04:	d8800d17 	ldw	r2,52(sp)
 8007d08:	37000044 	addi	fp,r6,1
 8007d0c:	10800044 	addi	r2,r2,1
 8007d10:	d8800d15 	stw	r2,52(sp)
 8007d14:	00800c44 	movi	r2,49
 8007d18:	30800005 	stb	r2,0(r6)
 8007d1c:	d9001617 	ldw	r4,88(sp)
 8007d20:	900b883a 	mov	r5,r18
 8007d24:	800a2cc0 	call	800a2cc <_Bfree>
 8007d28:	983ecd26 	beq	r19,zero,8007860 <_dtoa_r+0x728>
 8007d2c:	d8c00617 	ldw	r3,24(sp)
 8007d30:	18000426 	beq	r3,zero,8007d44 <_dtoa_r+0xc0c>
 8007d34:	1cc00326 	beq	r3,r19,8007d44 <_dtoa_r+0xc0c>
 8007d38:	d9001617 	ldw	r4,88(sp)
 8007d3c:	180b883a 	mov	r5,r3
 8007d40:	800a2cc0 	call	800a2cc <_Bfree>
 8007d44:	d9001617 	ldw	r4,88(sp)
 8007d48:	980b883a 	mov	r5,r19
 8007d4c:	800a2cc0 	call	800a2cc <_Bfree>
 8007d50:	003ec306 	br	8007860 <_dtoa_r+0x728>
 8007d54:	1805883a 	mov	r2,r3
 8007d58:	003eeb06 	br	8007908 <_dtoa_r+0x7d0>
 8007d5c:	d9800a17 	ldw	r6,40(sp)
 8007d60:	d8c01117 	ldw	r3,68(sp)
 8007d64:	20bfff04 	addi	r2,r4,-4
 8007d68:	308d883a 	add	r6,r6,r2
 8007d6c:	1887883a 	add	r3,r3,r2
 8007d70:	80a1883a 	add	r16,r16,r2
 8007d74:	d9800a15 	stw	r6,40(sp)
 8007d78:	d8c01115 	stw	r3,68(sp)
 8007d7c:	003f1d06 	br	80079f4 <_dtoa_r+0x8bc>
 8007d80:	a03f0c1e 	bne	r20,zero,80079b4 <_dtoa_r+0x87c>
 8007d84:	00800434 	movhi	r2,16
 8007d88:	10bfffc4 	addi	r2,r2,-1
 8007d8c:	a884703a 	and	r2,r21,r2
 8007d90:	103f081e 	bne	r2,zero,80079b4 <_dtoa_r+0x87c>
 8007d94:	a89ffc2c 	andhi	r2,r21,32752
 8007d98:	103f0626 	beq	r2,zero,80079b4 <_dtoa_r+0x87c>
 8007d9c:	d8c01117 	ldw	r3,68(sp)
 8007da0:	d9000a17 	ldw	r4,40(sp)
 8007da4:	18c00044 	addi	r3,r3,1
 8007da8:	21000044 	addi	r4,r4,1
 8007dac:	d8c01115 	stw	r3,68(sp)
 8007db0:	d9000a15 	stw	r4,40(sp)
 8007db4:	003f0006 	br	80079b8 <_dtoa_r+0x880>
 8007db8:	d9400717 	ldw	r5,28(sp)
 8007dbc:	d9001617 	ldw	r4,88(sp)
 8007dc0:	800b0800 	call	800b080 <__pow5mult>
 8007dc4:	d8800715 	stw	r2,28(sp)
 8007dc8:	003eed06 	br	8007980 <_dtoa_r+0x848>
 8007dcc:	1000021e 	bne	r2,zero,8007dd8 <_dtoa_r+0xca0>
 8007dd0:	b880004c 	andi	r2,r23,1
 8007dd4:	103fc11e 	bne	r2,zero,8007cdc <_dtoa_r+0xba4>
 8007dd8:	b5bfffc4 	addi	r22,r22,-1
 8007ddc:	b0c00007 	ldb	r3,0(r22)
 8007de0:	00800c04 	movi	r2,48
 8007de4:	18bffc26 	beq	r3,r2,8007dd8 <_dtoa_r+0xca0>
 8007de8:	b7000044 	addi	fp,r22,1
 8007dec:	003fcb06 	br	8007d1c <_dtoa_r+0xbe4>
 8007df0:	d9800d17 	ldw	r6,52(sp)
 8007df4:	018fc83a 	sub	r7,zero,r6
 8007df8:	3801f726 	beq	r7,zero,80085d8 <_dtoa_r+0x14a0>
 8007dfc:	398003cc 	andi	r6,r7,15
 8007e00:	300c90fa 	slli	r6,r6,3
 8007e04:	01420074 	movhi	r5,2049
 8007e08:	2946d804 	addi	r5,r5,7008
 8007e0c:	d9001217 	ldw	r4,72(sp)
 8007e10:	314d883a 	add	r6,r6,r5
 8007e14:	30c00117 	ldw	r3,4(r6)
 8007e18:	30800017 	ldw	r2,0(r6)
 8007e1c:	d9401317 	ldw	r5,76(sp)
 8007e20:	3821d13a 	srai	r16,r7,4
 8007e24:	100d883a 	mov	r6,r2
 8007e28:	180f883a 	mov	r7,r3
 8007e2c:	80038300 	call	8003830 <__muldf3>
 8007e30:	1011883a 	mov	r8,r2
 8007e34:	1813883a 	mov	r9,r3
 8007e38:	1029883a 	mov	r20,r2
 8007e3c:	182b883a 	mov	r21,r3
 8007e40:	8001e526 	beq	r16,zero,80085d8 <_dtoa_r+0x14a0>
 8007e44:	05800084 	movi	r22,2
 8007e48:	04420074 	movhi	r17,2049
 8007e4c:	8c470a04 	addi	r17,r17,7208
 8007e50:	8080004c 	andi	r2,r16,1
 8007e54:	1005003a 	cmpeq	r2,r2,zero
 8007e58:	1000081e 	bne	r2,zero,8007e7c <_dtoa_r+0xd44>
 8007e5c:	89800017 	ldw	r6,0(r17)
 8007e60:	89c00117 	ldw	r7,4(r17)
 8007e64:	480b883a 	mov	r5,r9
 8007e68:	4009883a 	mov	r4,r8
 8007e6c:	80038300 	call	8003830 <__muldf3>
 8007e70:	1011883a 	mov	r8,r2
 8007e74:	b5800044 	addi	r22,r22,1
 8007e78:	1813883a 	mov	r9,r3
 8007e7c:	8021d07a 	srai	r16,r16,1
 8007e80:	8c400204 	addi	r17,r17,8
 8007e84:	803ff21e 	bne	r16,zero,8007e50 <_dtoa_r+0xd18>
 8007e88:	4029883a 	mov	r20,r8
 8007e8c:	482b883a 	mov	r21,r9
 8007e90:	003dca06 	br	80075bc <_dtoa_r+0x484>
 8007e94:	d9000817 	ldw	r4,32(sp)
 8007e98:	2005003a 	cmpeq	r2,r4,zero
 8007e9c:	1001f61e 	bne	r2,zero,8008678 <_dtoa_r+0x1540>
 8007ea0:	dc001117 	ldw	r16,68(sp)
 8007ea4:	dc801017 	ldw	r18,64(sp)
 8007ea8:	18c10cc4 	addi	r3,r3,1075
 8007eac:	003f6106 	br	8007c34 <_dtoa_r+0xafc>
 8007eb0:	d8000b15 	stw	zero,44(sp)
 8007eb4:	d9802617 	ldw	r6,152(sp)
 8007eb8:	d8c00d17 	ldw	r3,52(sp)
 8007ebc:	30800044 	addi	r2,r6,1
 8007ec0:	18ad883a 	add	r22,r3,r2
 8007ec4:	b13fffc4 	addi	r4,r22,-1
 8007ec8:	d9000e15 	stw	r4,56(sp)
 8007ecc:	0581f60e 	bge	zero,r22,80086a8 <_dtoa_r+0x1570>
 8007ed0:	dd800f15 	stw	r22,60(sp)
 8007ed4:	003f3006 	br	8007b98 <_dtoa_r+0xa60>
 8007ed8:	d8000b15 	stw	zero,44(sp)
 8007edc:	d9002617 	ldw	r4,152(sp)
 8007ee0:	0101eb0e 	bge	zero,r4,8008690 <_dtoa_r+0x1558>
 8007ee4:	202d883a 	mov	r22,r4
 8007ee8:	d9000e15 	stw	r4,56(sp)
 8007eec:	d9000f15 	stw	r4,60(sp)
 8007ef0:	003f2906 	br	8007b98 <_dtoa_r+0xa60>
 8007ef4:	01800044 	movi	r6,1
 8007ef8:	d9800b15 	stw	r6,44(sp)
 8007efc:	003ff706 	br	8007edc <_dtoa_r+0xda4>
 8007f00:	01000044 	movi	r4,1
 8007f04:	d9000b15 	stw	r4,44(sp)
 8007f08:	003fea06 	br	8007eb4 <_dtoa_r+0xd7c>
 8007f0c:	04000c0e 	bge	zero,r16,8007f40 <_dtoa_r+0xe08>
 8007f10:	d9400717 	ldw	r5,28(sp)
 8007f14:	d9001617 	ldw	r4,88(sp)
 8007f18:	01800044 	movi	r6,1
 8007f1c:	800ac100 	call	800ac10 <__lshift>
 8007f20:	1009883a 	mov	r4,r2
 8007f24:	900b883a 	mov	r5,r18
 8007f28:	d8800715 	stw	r2,28(sp)
 8007f2c:	800a4280 	call	800a428 <__mcmp>
 8007f30:	0081e00e 	bge	zero,r2,80086b4 <_dtoa_r+0x157c>
 8007f34:	bdc00044 	addi	r23,r23,1
 8007f38:	00800e84 	movi	r2,58
 8007f3c:	b881a226 	beq	r23,r2,80085c8 <_dtoa_r+0x1490>
 8007f40:	b7000044 	addi	fp,r22,1
 8007f44:	b5c00005 	stb	r23,0(r22)
 8007f48:	003f7406 	br	8007d1c <_dtoa_r+0xbe4>
 8007f4c:	00800e44 	movi	r2,57
 8007f50:	b8819d26 	beq	r23,r2,80085c8 <_dtoa_r+0x1490>
 8007f54:	053ffa0e 	bge	zero,r20,8007f40 <_dtoa_r+0xe08>
 8007f58:	8dc00c44 	addi	r23,r17,49
 8007f5c:	003ff806 	br	8007f40 <_dtoa_r+0xe08>
 8007f60:	d9001617 	ldw	r4,88(sp)
 8007f64:	a80b883a 	mov	r5,r21
 8007f68:	04000044 	movi	r16,1
 8007f6c:	800a2cc0 	call	800a2cc <_Bfree>
 8007f70:	003edf06 	br	8007af0 <_dtoa_r+0x9b8>
 8007f74:	d9001617 	ldw	r4,88(sp)
 8007f78:	980b883a 	mov	r5,r19
 8007f7c:	01800284 	movi	r6,10
 8007f80:	000f883a 	mov	r7,zero
 8007f84:	800af800 	call	800af80 <__multadd>
 8007f88:	1027883a 	mov	r19,r2
 8007f8c:	d8800615 	stw	r2,24(sp)
 8007f90:	003ebb06 	br	8007a80 <_dtoa_r+0x948>
 8007f94:	d9801117 	ldw	r6,68(sp)
 8007f98:	d8800d17 	ldw	r2,52(sp)
 8007f9c:	d8000915 	stw	zero,36(sp)
 8007fa0:	308dc83a 	sub	r6,r6,r2
 8007fa4:	0087c83a 	sub	r3,zero,r2
 8007fa8:	d9801115 	stw	r6,68(sp)
 8007fac:	d8c01015 	stw	r3,64(sp)
 8007fb0:	003cfe06 	br	80073ac <_dtoa_r+0x274>
 8007fb4:	018dc83a 	sub	r6,zero,r6
 8007fb8:	d9801115 	stw	r6,68(sp)
 8007fbc:	d8000a15 	stw	zero,40(sp)
 8007fc0:	003cf306 	br	8007390 <_dtoa_r+0x258>
 8007fc4:	d9000d17 	ldw	r4,52(sp)
 8007fc8:	80040f40 	call	80040f4 <__floatsidf>
 8007fcc:	880b883a 	mov	r5,r17
 8007fd0:	8009883a 	mov	r4,r16
 8007fd4:	180f883a 	mov	r7,r3
 8007fd8:	100d883a 	mov	r6,r2
 8007fdc:	8003ed40 	call	8003ed4 <__nedf2>
 8007fe0:	103ce126 	beq	r2,zero,8007368 <_dtoa_r+0x230>
 8007fe4:	d9800d17 	ldw	r6,52(sp)
 8007fe8:	31bfffc4 	addi	r6,r6,-1
 8007fec:	d9800d15 	stw	r6,52(sp)
 8007ff0:	003cdd06 	br	8007368 <_dtoa_r+0x230>
 8007ff4:	d9000717 	ldw	r4,28(sp)
 8007ff8:	900b883a 	mov	r5,r18
 8007ffc:	800a4280 	call	800a428 <__mcmp>
 8008000:	103e8d0e 	bge	r2,zero,8007a38 <_dtoa_r+0x900>
 8008004:	d9400717 	ldw	r5,28(sp)
 8008008:	d9001617 	ldw	r4,88(sp)
 800800c:	01800284 	movi	r6,10
 8008010:	000f883a 	mov	r7,zero
 8008014:	800af800 	call	800af80 <__multadd>
 8008018:	d9800d17 	ldw	r6,52(sp)
 800801c:	d8800715 	stw	r2,28(sp)
 8008020:	31bfffc4 	addi	r6,r6,-1
 8008024:	d9800d15 	stw	r6,52(sp)
 8008028:	b001a71e 	bne	r22,zero,80086c8 <_dtoa_r+0x1590>
 800802c:	d8800e17 	ldw	r2,56(sp)
 8008030:	d8800f15 	stw	r2,60(sp)
 8008034:	003e8006 	br	8007a38 <_dtoa_r+0x900>
 8008038:	90800417 	ldw	r2,16(r18)
 800803c:	1085883a 	add	r2,r2,r2
 8008040:	1085883a 	add	r2,r2,r2
 8008044:	1485883a 	add	r2,r2,r18
 8008048:	11000417 	ldw	r4,16(r2)
 800804c:	800a2f40 	call	800a2f4 <__hi0bits>
 8008050:	00c00804 	movi	r3,32
 8008054:	1887c83a 	sub	r3,r3,r2
 8008058:	003e5a06 	br	80079c4 <_dtoa_r+0x88c>
 800805c:	d9400717 	ldw	r5,28(sp)
 8008060:	d9801017 	ldw	r6,64(sp)
 8008064:	d9001617 	ldw	r4,88(sp)
 8008068:	800b0800 	call	800b080 <__pow5mult>
 800806c:	d8800715 	stw	r2,28(sp)
 8008070:	003e4306 	br	8007980 <_dtoa_r+0x848>
 8008074:	d9800f17 	ldw	r6,60(sp)
 8008078:	d8800d17 	ldw	r2,52(sp)
 800807c:	d9800315 	stw	r6,12(sp)
 8008080:	d8800415 	stw	r2,16(sp)
 8008084:	d8c00b17 	ldw	r3,44(sp)
 8008088:	1805003a 	cmpeq	r2,r3,zero
 800808c:	1000e21e 	bne	r2,zero,8008418 <_dtoa_r+0x12e0>
 8008090:	d9000317 	ldw	r4,12(sp)
 8008094:	0005883a 	mov	r2,zero
 8008098:	00cff834 	movhi	r3,16352
 800809c:	200c90fa 	slli	r6,r4,3
 80080a0:	01020074 	movhi	r4,2049
 80080a4:	2106d804 	addi	r4,r4,7008
 80080a8:	180b883a 	mov	r5,r3
 80080ac:	310d883a 	add	r6,r6,r4
 80080b0:	327fff17 	ldw	r9,-4(r6)
 80080b4:	323ffe17 	ldw	r8,-8(r6)
 80080b8:	1009883a 	mov	r4,r2
 80080bc:	480f883a 	mov	r7,r9
 80080c0:	400d883a 	mov	r6,r8
 80080c4:	8003bf40 	call	8003bf4 <__divdf3>
 80080c8:	180b883a 	mov	r5,r3
 80080cc:	b00d883a 	mov	r6,r22
 80080d0:	b80f883a 	mov	r7,r23
 80080d4:	1009883a 	mov	r4,r2
 80080d8:	800373c0 	call	800373c <__subdf3>
 80080dc:	a80b883a 	mov	r5,r21
 80080e0:	a009883a 	mov	r4,r20
 80080e4:	d8c01915 	stw	r3,100(sp)
 80080e8:	d8801815 	stw	r2,96(sp)
 80080ec:	800cc140 	call	800cc14 <__fixdfsi>
 80080f0:	1009883a 	mov	r4,r2
 80080f4:	1027883a 	mov	r19,r2
 80080f8:	80040f40 	call	80040f4 <__floatsidf>
 80080fc:	a80b883a 	mov	r5,r21
 8008100:	a009883a 	mov	r4,r20
 8008104:	180f883a 	mov	r7,r3
 8008108:	100d883a 	mov	r6,r2
 800810c:	800373c0 	call	800373c <__subdf3>
 8008110:	d9801817 	ldw	r6,96(sp)
 8008114:	1823883a 	mov	r17,r3
 8008118:	d8801415 	stw	r2,80(sp)
 800811c:	302d883a 	mov	r22,r6
 8008120:	d9800517 	ldw	r6,20(sp)
 8008124:	9cc00c04 	addi	r19,r19,48
 8008128:	dc401515 	stw	r17,84(sp)
 800812c:	d8c01917 	ldw	r3,100(sp)
 8008130:	34c00005 	stb	r19,0(r6)
 8008134:	d8800517 	ldw	r2,20(sp)
 8008138:	d9401917 	ldw	r5,100(sp)
 800813c:	d9801417 	ldw	r6,80(sp)
 8008140:	b009883a 	mov	r4,r22
 8008144:	880f883a 	mov	r7,r17
 8008148:	182f883a 	mov	r23,r3
 800814c:	17000044 	addi	fp,r2,1
 8008150:	8003f5c0 	call	8003f5c <__gtdf2>
 8008154:	00804e16 	blt	zero,r2,8008290 <_dtoa_r+0x1158>
 8008158:	d9801417 	ldw	r6,80(sp)
 800815c:	0005883a 	mov	r2,zero
 8008160:	00cffc34 	movhi	r3,16368
 8008164:	180b883a 	mov	r5,r3
 8008168:	880f883a 	mov	r7,r17
 800816c:	1009883a 	mov	r4,r2
 8008170:	800373c0 	call	800373c <__subdf3>
 8008174:	d9401917 	ldw	r5,100(sp)
 8008178:	180f883a 	mov	r7,r3
 800817c:	b009883a 	mov	r4,r22
 8008180:	100d883a 	mov	r6,r2
 8008184:	8003f5c0 	call	8003f5c <__gtdf2>
 8008188:	00bda216 	blt	zero,r2,8007814 <_dtoa_r+0x6dc>
 800818c:	d8c00317 	ldw	r3,12(sp)
 8008190:	00800044 	movi	r2,1
 8008194:	10c01216 	blt	r2,r3,80081e0 <_dtoa_r+0x10a8>
 8008198:	003d4506 	br	80076b0 <_dtoa_r+0x578>
 800819c:	d9801417 	ldw	r6,80(sp)
 80081a0:	0005883a 	mov	r2,zero
 80081a4:	00cffc34 	movhi	r3,16368
 80081a8:	180b883a 	mov	r5,r3
 80081ac:	880f883a 	mov	r7,r17
 80081b0:	1009883a 	mov	r4,r2
 80081b4:	800373c0 	call	800373c <__subdf3>
 80081b8:	d9c01b17 	ldw	r7,108(sp)
 80081bc:	180b883a 	mov	r5,r3
 80081c0:	1009883a 	mov	r4,r2
 80081c4:	b00d883a 	mov	r6,r22
 80081c8:	8003fe40 	call	8003fe4 <__ltdf2>
 80081cc:	103d9116 	blt	r2,zero,8007814 <_dtoa_r+0x6dc>
 80081d0:	d9800517 	ldw	r6,20(sp)
 80081d4:	d9000317 	ldw	r4,12(sp)
 80081d8:	3105883a 	add	r2,r6,r4
 80081dc:	e0bd3426 	beq	fp,r2,80076b0 <_dtoa_r+0x578>
 80081e0:	04500934 	movhi	r17,16420
 80081e4:	0021883a 	mov	r16,zero
 80081e8:	b80b883a 	mov	r5,r23
 80081ec:	b009883a 	mov	r4,r22
 80081f0:	800d883a 	mov	r6,r16
 80081f4:	880f883a 	mov	r7,r17
 80081f8:	80038300 	call	8003830 <__muldf3>
 80081fc:	d9401517 	ldw	r5,84(sp)
 8008200:	d9001417 	ldw	r4,80(sp)
 8008204:	880f883a 	mov	r7,r17
 8008208:	000d883a 	mov	r6,zero
 800820c:	d8801a15 	stw	r2,104(sp)
 8008210:	d8c01b15 	stw	r3,108(sp)
 8008214:	80038300 	call	8003830 <__muldf3>
 8008218:	180b883a 	mov	r5,r3
 800821c:	1009883a 	mov	r4,r2
 8008220:	1823883a 	mov	r17,r3
 8008224:	1021883a 	mov	r16,r2
 8008228:	800cc140 	call	800cc14 <__fixdfsi>
 800822c:	1009883a 	mov	r4,r2
 8008230:	102b883a 	mov	r21,r2
 8008234:	80040f40 	call	80040f4 <__floatsidf>
 8008238:	880b883a 	mov	r5,r17
 800823c:	8009883a 	mov	r4,r16
 8008240:	180f883a 	mov	r7,r3
 8008244:	100d883a 	mov	r6,r2
 8008248:	800373c0 	call	800373c <__subdf3>
 800824c:	1021883a 	mov	r16,r2
 8008250:	d9001b17 	ldw	r4,108(sp)
 8008254:	1823883a 	mov	r17,r3
 8008258:	dc001415 	stw	r16,80(sp)
 800825c:	ad400c04 	addi	r21,r21,48
 8008260:	dc401515 	stw	r17,84(sp)
 8008264:	d8801a17 	ldw	r2,104(sp)
 8008268:	e5400005 	stb	r21,0(fp)
 800826c:	202f883a 	mov	r23,r4
 8008270:	d9c01b17 	ldw	r7,108(sp)
 8008274:	d9001417 	ldw	r4,80(sp)
 8008278:	880b883a 	mov	r5,r17
 800827c:	100d883a 	mov	r6,r2
 8008280:	102d883a 	mov	r22,r2
 8008284:	e7000044 	addi	fp,fp,1
 8008288:	8003fe40 	call	8003fe4 <__ltdf2>
 800828c:	103fc30e 	bge	r2,zero,800819c <_dtoa_r+0x1064>
 8008290:	d9000417 	ldw	r4,16(sp)
 8008294:	d9000d15 	stw	r4,52(sp)
 8008298:	003d7106 	br	8007860 <_dtoa_r+0x728>
 800829c:	d9801717 	ldw	r6,92(sp)
 80082a0:	00800084 	movi	r2,2
 80082a4:	11bde60e 	bge	r2,r6,8007a40 <_dtoa_r+0x908>
 80082a8:	203cfb1e 	bne	r4,zero,8007698 <_dtoa_r+0x560>
 80082ac:	d9001617 	ldw	r4,88(sp)
 80082b0:	900b883a 	mov	r5,r18
 80082b4:	01800144 	movi	r6,5
 80082b8:	000f883a 	mov	r7,zero
 80082bc:	800af800 	call	800af80 <__multadd>
 80082c0:	d9000717 	ldw	r4,28(sp)
 80082c4:	100b883a 	mov	r5,r2
 80082c8:	1025883a 	mov	r18,r2
 80082cc:	800a4280 	call	800a428 <__mcmp>
 80082d0:	00bcf10e 	bge	zero,r2,8007698 <_dtoa_r+0x560>
 80082d4:	d8c00d17 	ldw	r3,52(sp)
 80082d8:	d9000517 	ldw	r4,20(sp)
 80082dc:	d8000615 	stw	zero,24(sp)
 80082e0:	18c00044 	addi	r3,r3,1
 80082e4:	d8c00d15 	stw	r3,52(sp)
 80082e8:	00800c44 	movi	r2,49
 80082ec:	27000044 	addi	fp,r4,1
 80082f0:	20800005 	stb	r2,0(r4)
 80082f4:	003e8906 	br	8007d1c <_dtoa_r+0xbe4>
 80082f8:	d8c00517 	ldw	r3,20(sp)
 80082fc:	003bc206 	br	8007208 <_dtoa_r+0xd0>
 8008300:	01820074 	movhi	r6,2049
 8008304:	31870a04 	addi	r6,r6,7208
 8008308:	30c00917 	ldw	r3,36(r6)
 800830c:	30800817 	ldw	r2,32(r6)
 8008310:	d9001217 	ldw	r4,72(sp)
 8008314:	d9401317 	ldw	r5,76(sp)
 8008318:	180f883a 	mov	r7,r3
 800831c:	100d883a 	mov	r6,r2
 8008320:	8003bf40 	call	8003bf4 <__divdf3>
 8008324:	948003cc 	andi	r18,r18,15
 8008328:	058000c4 	movi	r22,3
 800832c:	1029883a 	mov	r20,r2
 8008330:	182b883a 	mov	r21,r3
 8008334:	003c8906 	br	800755c <_dtoa_r+0x424>
 8008338:	d9001017 	ldw	r4,64(sp)
 800833c:	d9800917 	ldw	r6,36(sp)
 8008340:	0025883a 	mov	r18,zero
 8008344:	1105c83a 	sub	r2,r2,r4
 8008348:	2089883a 	add	r4,r4,r2
 800834c:	308d883a 	add	r6,r6,r2
 8008350:	d9001015 	stw	r4,64(sp)
 8008354:	d9800915 	stw	r6,36(sp)
 8008358:	003e3206 	br	8007c24 <_dtoa_r+0xaec>
 800835c:	28800044 	addi	r2,r5,1
 8008360:	27000044 	addi	fp,r4,1
 8008364:	20800005 	stb	r2,0(r4)
 8008368:	003e6c06 	br	8007d1c <_dtoa_r+0xbe4>
 800836c:	d8800f17 	ldw	r2,60(sp)
 8008370:	00bce016 	blt	zero,r2,80076f4 <_dtoa_r+0x5bc>
 8008374:	d9800f17 	ldw	r6,60(sp)
 8008378:	303cc51e 	bne	r6,zero,8007690 <_dtoa_r+0x558>
 800837c:	0005883a 	mov	r2,zero
 8008380:	00d00534 	movhi	r3,16404
 8008384:	980b883a 	mov	r5,r19
 8008388:	180f883a 	mov	r7,r3
 800838c:	9009883a 	mov	r4,r18
 8008390:	100d883a 	mov	r6,r2
 8008394:	80038300 	call	8003830 <__muldf3>
 8008398:	180b883a 	mov	r5,r3
 800839c:	a80f883a 	mov	r7,r21
 80083a0:	1009883a 	mov	r4,r2
 80083a4:	a00d883a 	mov	r6,r20
 80083a8:	800cb8c0 	call	800cb8c <__gedf2>
 80083ac:	103cb80e 	bge	r2,zero,8007690 <_dtoa_r+0x558>
 80083b0:	0027883a 	mov	r19,zero
 80083b4:	0025883a 	mov	r18,zero
 80083b8:	003fc606 	br	80082d4 <_dtoa_r+0x119c>
 80083bc:	99400117 	ldw	r5,4(r19)
 80083c0:	d9001617 	ldw	r4,88(sp)
 80083c4:	800a84c0 	call	800a84c <_Balloc>
 80083c8:	99800417 	ldw	r6,16(r19)
 80083cc:	11000304 	addi	r4,r2,12
 80083d0:	99400304 	addi	r5,r19,12
 80083d4:	318d883a 	add	r6,r6,r6
 80083d8:	318d883a 	add	r6,r6,r6
 80083dc:	31800204 	addi	r6,r6,8
 80083e0:	1023883a 	mov	r17,r2
 80083e4:	800a0b40 	call	800a0b4 <memcpy>
 80083e8:	d9001617 	ldw	r4,88(sp)
 80083ec:	880b883a 	mov	r5,r17
 80083f0:	01800044 	movi	r6,1
 80083f4:	800ac100 	call	800ac10 <__lshift>
 80083f8:	100b883a 	mov	r5,r2
 80083fc:	003d9c06 	br	8007a70 <_dtoa_r+0x938>
 8008400:	00800e44 	movi	r2,57
 8008404:	b8807026 	beq	r23,r2,80085c8 <_dtoa_r+0x1490>
 8008408:	b8800044 	addi	r2,r23,1
 800840c:	b7000044 	addi	fp,r22,1
 8008410:	b0800005 	stb	r2,0(r22)
 8008414:	003e4106 	br	8007d1c <_dtoa_r+0xbe4>
 8008418:	d8800317 	ldw	r2,12(sp)
 800841c:	01820074 	movhi	r6,2049
 8008420:	3186d804 	addi	r6,r6,7008
 8008424:	b009883a 	mov	r4,r22
 8008428:	100e90fa 	slli	r7,r2,3
 800842c:	b80b883a 	mov	r5,r23
 8008430:	398f883a 	add	r7,r7,r6
 8008434:	38bffe17 	ldw	r2,-8(r7)
 8008438:	d9800517 	ldw	r6,20(sp)
 800843c:	38ffff17 	ldw	r3,-4(r7)
 8008440:	37000044 	addi	fp,r6,1
 8008444:	180f883a 	mov	r7,r3
 8008448:	100d883a 	mov	r6,r2
 800844c:	80038300 	call	8003830 <__muldf3>
 8008450:	a80b883a 	mov	r5,r21
 8008454:	a009883a 	mov	r4,r20
 8008458:	182f883a 	mov	r23,r3
 800845c:	102d883a 	mov	r22,r2
 8008460:	800cc140 	call	800cc14 <__fixdfsi>
 8008464:	1009883a 	mov	r4,r2
 8008468:	1027883a 	mov	r19,r2
 800846c:	80040f40 	call	80040f4 <__floatsidf>
 8008470:	a80b883a 	mov	r5,r21
 8008474:	a009883a 	mov	r4,r20
 8008478:	180f883a 	mov	r7,r3
 800847c:	100d883a 	mov	r6,r2
 8008480:	800373c0 	call	800373c <__subdf3>
 8008484:	180b883a 	mov	r5,r3
 8008488:	d8c00517 	ldw	r3,20(sp)
 800848c:	9cc00c04 	addi	r19,r19,48
 8008490:	1009883a 	mov	r4,r2
 8008494:	1cc00005 	stb	r19,0(r3)
 8008498:	2021883a 	mov	r16,r4
 800849c:	d9000317 	ldw	r4,12(sp)
 80084a0:	00800044 	movi	r2,1
 80084a4:	2823883a 	mov	r17,r5
 80084a8:	20802226 	beq	r4,r2,8008534 <_dtoa_r+0x13fc>
 80084ac:	1029883a 	mov	r20,r2
 80084b0:	0005883a 	mov	r2,zero
 80084b4:	00d00934 	movhi	r3,16420
 80084b8:	180f883a 	mov	r7,r3
 80084bc:	100d883a 	mov	r6,r2
 80084c0:	880b883a 	mov	r5,r17
 80084c4:	8009883a 	mov	r4,r16
 80084c8:	80038300 	call	8003830 <__muldf3>
 80084cc:	180b883a 	mov	r5,r3
 80084d0:	1009883a 	mov	r4,r2
 80084d4:	1823883a 	mov	r17,r3
 80084d8:	1021883a 	mov	r16,r2
 80084dc:	800cc140 	call	800cc14 <__fixdfsi>
 80084e0:	1009883a 	mov	r4,r2
 80084e4:	102b883a 	mov	r21,r2
 80084e8:	80040f40 	call	80040f4 <__floatsidf>
 80084ec:	880b883a 	mov	r5,r17
 80084f0:	8009883a 	mov	r4,r16
 80084f4:	180f883a 	mov	r7,r3
 80084f8:	100d883a 	mov	r6,r2
 80084fc:	800373c0 	call	800373c <__subdf3>
 8008500:	180b883a 	mov	r5,r3
 8008504:	d8c00517 	ldw	r3,20(sp)
 8008508:	1009883a 	mov	r4,r2
 800850c:	ad400c04 	addi	r21,r21,48
 8008510:	1d05883a 	add	r2,r3,r20
 8008514:	15400005 	stb	r21,0(r2)
 8008518:	2021883a 	mov	r16,r4
 800851c:	d9000317 	ldw	r4,12(sp)
 8008520:	a5000044 	addi	r20,r20,1
 8008524:	2823883a 	mov	r17,r5
 8008528:	a13fe11e 	bne	r20,r4,80084b0 <_dtoa_r+0x1378>
 800852c:	e505883a 	add	r2,fp,r20
 8008530:	173fffc4 	addi	fp,r2,-1
 8008534:	0025883a 	mov	r18,zero
 8008538:	04cff834 	movhi	r19,16352
 800853c:	b009883a 	mov	r4,r22
 8008540:	b80b883a 	mov	r5,r23
 8008544:	900d883a 	mov	r6,r18
 8008548:	980f883a 	mov	r7,r19
 800854c:	80037bc0 	call	80037bc <__adddf3>
 8008550:	180b883a 	mov	r5,r3
 8008554:	1009883a 	mov	r4,r2
 8008558:	800d883a 	mov	r6,r16
 800855c:	880f883a 	mov	r7,r17
 8008560:	8003fe40 	call	8003fe4 <__ltdf2>
 8008564:	103cab16 	blt	r2,zero,8007814 <_dtoa_r+0x6dc>
 8008568:	0009883a 	mov	r4,zero
 800856c:	980b883a 	mov	r5,r19
 8008570:	b80f883a 	mov	r7,r23
 8008574:	b00d883a 	mov	r6,r22
 8008578:	800373c0 	call	800373c <__subdf3>
 800857c:	180b883a 	mov	r5,r3
 8008580:	880f883a 	mov	r7,r17
 8008584:	1009883a 	mov	r4,r2
 8008588:	800d883a 	mov	r6,r16
 800858c:	8003f5c0 	call	8003f5c <__gtdf2>
 8008590:	00bc470e 	bge	zero,r2,80076b0 <_dtoa_r+0x578>
 8008594:	00c00c04 	movi	r3,48
 8008598:	e73fffc4 	addi	fp,fp,-1
 800859c:	e0800007 	ldb	r2,0(fp)
 80085a0:	10fffd26 	beq	r2,r3,8008598 <_dtoa_r+0x1460>
 80085a4:	d9800417 	ldw	r6,16(sp)
 80085a8:	e7000044 	addi	fp,fp,1
 80085ac:	d9800d15 	stw	r6,52(sp)
 80085b0:	003cab06 	br	8007860 <_dtoa_r+0x728>
 80085b4:	d8c00f17 	ldw	r3,60(sp)
 80085b8:	d9001117 	ldw	r4,68(sp)
 80085bc:	20e1c83a 	sub	r16,r4,r3
 80085c0:	0007883a 	mov	r3,zero
 80085c4:	003d9b06 	br	8007c34 <_dtoa_r+0xafc>
 80085c8:	00800e44 	movi	r2,57
 80085cc:	b0800005 	stb	r2,0(r22)
 80085d0:	b5800044 	addi	r22,r22,1
 80085d4:	003dc106 	br	8007cdc <_dtoa_r+0xba4>
 80085d8:	05800084 	movi	r22,2
 80085dc:	003bf706 	br	80075bc <_dtoa_r+0x484>
 80085e0:	d9000f17 	ldw	r4,60(sp)
 80085e4:	013c000e 	bge	zero,r4,80075e8 <_dtoa_r+0x4b0>
 80085e8:	d9800e17 	ldw	r6,56(sp)
 80085ec:	01bc300e 	bge	zero,r6,80076b0 <_dtoa_r+0x578>
 80085f0:	0005883a 	mov	r2,zero
 80085f4:	00d00934 	movhi	r3,16420
 80085f8:	a80b883a 	mov	r5,r21
 80085fc:	180f883a 	mov	r7,r3
 8008600:	a009883a 	mov	r4,r20
 8008604:	100d883a 	mov	r6,r2
 8008608:	80038300 	call	8003830 <__muldf3>
 800860c:	b1000044 	addi	r4,r22,1
 8008610:	1021883a 	mov	r16,r2
 8008614:	1823883a 	mov	r17,r3
 8008618:	80040f40 	call	80040f4 <__floatsidf>
 800861c:	880b883a 	mov	r5,r17
 8008620:	8009883a 	mov	r4,r16
 8008624:	180f883a 	mov	r7,r3
 8008628:	100d883a 	mov	r6,r2
 800862c:	80038300 	call	8003830 <__muldf3>
 8008630:	0011883a 	mov	r8,zero
 8008634:	02500734 	movhi	r9,16412
 8008638:	180b883a 	mov	r5,r3
 800863c:	480f883a 	mov	r7,r9
 8008640:	1009883a 	mov	r4,r2
 8008644:	400d883a 	mov	r6,r8
 8008648:	80037bc0 	call	80037bc <__adddf3>
 800864c:	102d883a 	mov	r22,r2
 8008650:	00bf3034 	movhi	r2,64704
 8008654:	10ef883a 	add	r23,r2,r3
 8008658:	d8800d17 	ldw	r2,52(sp)
 800865c:	d8c00e17 	ldw	r3,56(sp)
 8008660:	8029883a 	mov	r20,r16
 8008664:	10bfffc4 	addi	r2,r2,-1
 8008668:	882b883a 	mov	r21,r17
 800866c:	d8800415 	stw	r2,16(sp)
 8008670:	d8c00315 	stw	r3,12(sp)
 8008674:	003e8306 	br	8008084 <_dtoa_r+0xf4c>
 8008678:	d8800117 	ldw	r2,4(sp)
 800867c:	dc001117 	ldw	r16,68(sp)
 8008680:	dc801017 	ldw	r18,64(sp)
 8008684:	00c00d84 	movi	r3,54
 8008688:	1887c83a 	sub	r3,r3,r2
 800868c:	003d6906 	br	8007c34 <_dtoa_r+0xafc>
 8008690:	01800044 	movi	r6,1
 8008694:	3021883a 	mov	r16,r6
 8008698:	d9800f15 	stw	r6,60(sp)
 800869c:	d9802615 	stw	r6,152(sp)
 80086a0:	d9800e15 	stw	r6,56(sp)
 80086a4:	003b9306 	br	80074f4 <_dtoa_r+0x3bc>
 80086a8:	b021883a 	mov	r16,r22
 80086ac:	dd800f15 	stw	r22,60(sp)
 80086b0:	003b9006 	br	80074f4 <_dtoa_r+0x3bc>
 80086b4:	103e221e 	bne	r2,zero,8007f40 <_dtoa_r+0xe08>
 80086b8:	b880004c 	andi	r2,r23,1
 80086bc:	1005003a 	cmpeq	r2,r2,zero
 80086c0:	103e1f1e 	bne	r2,zero,8007f40 <_dtoa_r+0xe08>
 80086c4:	003e1b06 	br	8007f34 <_dtoa_r+0xdfc>
 80086c8:	d9001617 	ldw	r4,88(sp)
 80086cc:	980b883a 	mov	r5,r19
 80086d0:	01800284 	movi	r6,10
 80086d4:	000f883a 	mov	r7,zero
 80086d8:	800af800 	call	800af80 <__multadd>
 80086dc:	d8c00e17 	ldw	r3,56(sp)
 80086e0:	1027883a 	mov	r19,r2
 80086e4:	d8c00f15 	stw	r3,60(sp)
 80086e8:	003cd306 	br	8007a38 <_dtoa_r+0x900>

080086ec <_fflush_r>:
 80086ec:	defffb04 	addi	sp,sp,-20
 80086f0:	dcc00315 	stw	r19,12(sp)
 80086f4:	dc800215 	stw	r18,8(sp)
 80086f8:	dfc00415 	stw	ra,16(sp)
 80086fc:	dc400115 	stw	r17,4(sp)
 8008700:	dc000015 	stw	r16,0(sp)
 8008704:	2027883a 	mov	r19,r4
 8008708:	2825883a 	mov	r18,r5
 800870c:	20000226 	beq	r4,zero,8008718 <_fflush_r+0x2c>
 8008710:	20800e17 	ldw	r2,56(r4)
 8008714:	10005626 	beq	r2,zero,8008870 <_fflush_r+0x184>
 8008718:	9100030b 	ldhu	r4,12(r18)
 800871c:	20ffffcc 	andi	r3,r4,65535
 8008720:	18e0001c 	xori	r3,r3,32768
 8008724:	18e00004 	addi	r3,r3,-32768
 8008728:	1880020c 	andi	r2,r3,8
 800872c:	1000261e 	bne	r2,zero,80087c8 <_fflush_r+0xdc>
 8008730:	90c00117 	ldw	r3,4(r18)
 8008734:	20820014 	ori	r2,r4,2048
 8008738:	9080030d 	sth	r2,12(r18)
 800873c:	1009883a 	mov	r4,r2
 8008740:	00c0400e 	bge	zero,r3,8008844 <_fflush_r+0x158>
 8008744:	92000a17 	ldw	r8,40(r18)
 8008748:	40004026 	beq	r8,zero,800884c <_fflush_r+0x160>
 800874c:	2084000c 	andi	r2,r4,4096
 8008750:	10005326 	beq	r2,zero,80088a0 <_fflush_r+0x1b4>
 8008754:	94001417 	ldw	r16,80(r18)
 8008758:	9080030b 	ldhu	r2,12(r18)
 800875c:	1080010c 	andi	r2,r2,4
 8008760:	1000481e 	bne	r2,zero,8008884 <_fflush_r+0x198>
 8008764:	91400717 	ldw	r5,28(r18)
 8008768:	9809883a 	mov	r4,r19
 800876c:	800d883a 	mov	r6,r16
 8008770:	000f883a 	mov	r7,zero
 8008774:	403ee83a 	callr	r8
 8008778:	8080261e 	bne	r16,r2,8008814 <_fflush_r+0x128>
 800877c:	9080030b 	ldhu	r2,12(r18)
 8008780:	91000417 	ldw	r4,16(r18)
 8008784:	90000115 	stw	zero,4(r18)
 8008788:	10bdffcc 	andi	r2,r2,63487
 800878c:	10ffffcc 	andi	r3,r2,65535
 8008790:	18c4000c 	andi	r3,r3,4096
 8008794:	9080030d 	sth	r2,12(r18)
 8008798:	91000015 	stw	r4,0(r18)
 800879c:	18002b26 	beq	r3,zero,800884c <_fflush_r+0x160>
 80087a0:	0007883a 	mov	r3,zero
 80087a4:	1805883a 	mov	r2,r3
 80087a8:	94001415 	stw	r16,80(r18)
 80087ac:	dfc00417 	ldw	ra,16(sp)
 80087b0:	dcc00317 	ldw	r19,12(sp)
 80087b4:	dc800217 	ldw	r18,8(sp)
 80087b8:	dc400117 	ldw	r17,4(sp)
 80087bc:	dc000017 	ldw	r16,0(sp)
 80087c0:	dec00504 	addi	sp,sp,20
 80087c4:	f800283a 	ret
 80087c8:	94400417 	ldw	r17,16(r18)
 80087cc:	88001f26 	beq	r17,zero,800884c <_fflush_r+0x160>
 80087d0:	90800017 	ldw	r2,0(r18)
 80087d4:	18c000cc 	andi	r3,r3,3
 80087d8:	94400015 	stw	r17,0(r18)
 80087dc:	1461c83a 	sub	r16,r2,r17
 80087e0:	18002526 	beq	r3,zero,8008878 <_fflush_r+0x18c>
 80087e4:	0005883a 	mov	r2,zero
 80087e8:	90800215 	stw	r2,8(r18)
 80087ec:	0400170e 	bge	zero,r16,800884c <_fflush_r+0x160>
 80087f0:	90c00917 	ldw	r3,36(r18)
 80087f4:	91400717 	ldw	r5,28(r18)
 80087f8:	880d883a 	mov	r6,r17
 80087fc:	800f883a 	mov	r7,r16
 8008800:	9809883a 	mov	r4,r19
 8008804:	183ee83a 	callr	r3
 8008808:	88a3883a 	add	r17,r17,r2
 800880c:	80a1c83a 	sub	r16,r16,r2
 8008810:	00bff616 	blt	zero,r2,80087ec <_fflush_r+0x100>
 8008814:	9080030b 	ldhu	r2,12(r18)
 8008818:	00ffffc4 	movi	r3,-1
 800881c:	10801014 	ori	r2,r2,64
 8008820:	9080030d 	sth	r2,12(r18)
 8008824:	1805883a 	mov	r2,r3
 8008828:	dfc00417 	ldw	ra,16(sp)
 800882c:	dcc00317 	ldw	r19,12(sp)
 8008830:	dc800217 	ldw	r18,8(sp)
 8008834:	dc400117 	ldw	r17,4(sp)
 8008838:	dc000017 	ldw	r16,0(sp)
 800883c:	dec00504 	addi	sp,sp,20
 8008840:	f800283a 	ret
 8008844:	90800f17 	ldw	r2,60(r18)
 8008848:	00bfbe16 	blt	zero,r2,8008744 <_fflush_r+0x58>
 800884c:	0007883a 	mov	r3,zero
 8008850:	1805883a 	mov	r2,r3
 8008854:	dfc00417 	ldw	ra,16(sp)
 8008858:	dcc00317 	ldw	r19,12(sp)
 800885c:	dc800217 	ldw	r18,8(sp)
 8008860:	dc400117 	ldw	r17,4(sp)
 8008864:	dc000017 	ldw	r16,0(sp)
 8008868:	dec00504 	addi	sp,sp,20
 800886c:	f800283a 	ret
 8008870:	80089840 	call	8008984 <__sinit>
 8008874:	003fa806 	br	8008718 <_fflush_r+0x2c>
 8008878:	90800517 	ldw	r2,20(r18)
 800887c:	90800215 	stw	r2,8(r18)
 8008880:	003fda06 	br	80087ec <_fflush_r+0x100>
 8008884:	90800117 	ldw	r2,4(r18)
 8008888:	90c00c17 	ldw	r3,48(r18)
 800888c:	80a1c83a 	sub	r16,r16,r2
 8008890:	183fb426 	beq	r3,zero,8008764 <_fflush_r+0x78>
 8008894:	90800f17 	ldw	r2,60(r18)
 8008898:	80a1c83a 	sub	r16,r16,r2
 800889c:	003fb106 	br	8008764 <_fflush_r+0x78>
 80088a0:	91400717 	ldw	r5,28(r18)
 80088a4:	9809883a 	mov	r4,r19
 80088a8:	000d883a 	mov	r6,zero
 80088ac:	01c00044 	movi	r7,1
 80088b0:	403ee83a 	callr	r8
 80088b4:	1021883a 	mov	r16,r2
 80088b8:	00bfffc4 	movi	r2,-1
 80088bc:	80800226 	beq	r16,r2,80088c8 <_fflush_r+0x1dc>
 80088c0:	92000a17 	ldw	r8,40(r18)
 80088c4:	003fa406 	br	8008758 <_fflush_r+0x6c>
 80088c8:	98c00017 	ldw	r3,0(r19)
 80088cc:	00800744 	movi	r2,29
 80088d0:	18bfde26 	beq	r3,r2,800884c <_fflush_r+0x160>
 80088d4:	9080030b 	ldhu	r2,12(r18)
 80088d8:	8007883a 	mov	r3,r16
 80088dc:	10801014 	ori	r2,r2,64
 80088e0:	9080030d 	sth	r2,12(r18)
 80088e4:	003fcf06 	br	8008824 <_fflush_r+0x138>

080088e8 <fflush>:
 80088e8:	01420074 	movhi	r5,2049
 80088ec:	2961bb04 	addi	r5,r5,-30996
 80088f0:	2007883a 	mov	r3,r4
 80088f4:	20000526 	beq	r4,zero,800890c <fflush+0x24>
 80088f8:	00820074 	movhi	r2,2049
 80088fc:	108e5204 	addi	r2,r2,14664
 8008900:	11000017 	ldw	r4,0(r2)
 8008904:	180b883a 	mov	r5,r3
 8008908:	80086ec1 	jmpi	80086ec <_fflush_r>
 800890c:	00820074 	movhi	r2,2049
 8008910:	108e5304 	addi	r2,r2,14668
 8008914:	11000017 	ldw	r4,0(r2)
 8008918:	80094b81 	jmpi	80094b8 <_fwalk_reent>

0800891c <std>:
 800891c:	00820074 	movhi	r2,2049
 8008920:	10ae5904 	addi	r2,r2,-18076
 8008924:	20800b15 	stw	r2,44(r4)
 8008928:	00820074 	movhi	r2,2049
 800892c:	10ae9404 	addi	r2,r2,-17840
 8008930:	20800815 	stw	r2,32(r4)
 8008934:	00c20074 	movhi	r3,2049
 8008938:	18ee7504 	addi	r3,r3,-17964
 800893c:	00820074 	movhi	r2,2049
 8008940:	10ae5b04 	addi	r2,r2,-18068
 8008944:	2140030d 	sth	r5,12(r4)
 8008948:	2180038d 	sth	r6,14(r4)
 800894c:	20c00915 	stw	r3,36(r4)
 8008950:	20800a15 	stw	r2,40(r4)
 8008954:	20000015 	stw	zero,0(r4)
 8008958:	20000115 	stw	zero,4(r4)
 800895c:	20000215 	stw	zero,8(r4)
 8008960:	20000415 	stw	zero,16(r4)
 8008964:	20000515 	stw	zero,20(r4)
 8008968:	20000615 	stw	zero,24(r4)
 800896c:	21000715 	stw	r4,28(r4)
 8008970:	f800283a 	ret

08008974 <__sfp_lock_acquire>:
 8008974:	f800283a 	ret

08008978 <__sfp_lock_release>:
 8008978:	f800283a 	ret

0800897c <__sinit_lock_acquire>:
 800897c:	f800283a 	ret

08008980 <__sinit_lock_release>:
 8008980:	f800283a 	ret

08008984 <__sinit>:
 8008984:	20800e17 	ldw	r2,56(r4)
 8008988:	defffd04 	addi	sp,sp,-12
 800898c:	dc400115 	stw	r17,4(sp)
 8008990:	dc000015 	stw	r16,0(sp)
 8008994:	dfc00215 	stw	ra,8(sp)
 8008998:	04400044 	movi	r17,1
 800899c:	01400104 	movi	r5,4
 80089a0:	000d883a 	mov	r6,zero
 80089a4:	2021883a 	mov	r16,r4
 80089a8:	2200bb04 	addi	r8,r4,748
 80089ac:	200f883a 	mov	r7,r4
 80089b0:	10000526 	beq	r2,zero,80089c8 <__sinit+0x44>
 80089b4:	dfc00217 	ldw	ra,8(sp)
 80089b8:	dc400117 	ldw	r17,4(sp)
 80089bc:	dc000017 	ldw	r16,0(sp)
 80089c0:	dec00304 	addi	sp,sp,12
 80089c4:	f800283a 	ret
 80089c8:	21000117 	ldw	r4,4(r4)
 80089cc:	00820074 	movhi	r2,2049
 80089d0:	10a29a04 	addi	r2,r2,-30104
 80089d4:	00c000c4 	movi	r3,3
 80089d8:	80800f15 	stw	r2,60(r16)
 80089dc:	80c0b915 	stw	r3,740(r16)
 80089e0:	8200ba15 	stw	r8,744(r16)
 80089e4:	84400e15 	stw	r17,56(r16)
 80089e8:	8000b815 	stw	zero,736(r16)
 80089ec:	800891c0 	call	800891c <std>
 80089f0:	81000217 	ldw	r4,8(r16)
 80089f4:	880d883a 	mov	r6,r17
 80089f8:	800f883a 	mov	r7,r16
 80089fc:	01400284 	movi	r5,10
 8008a00:	800891c0 	call	800891c <std>
 8008a04:	81000317 	ldw	r4,12(r16)
 8008a08:	800f883a 	mov	r7,r16
 8008a0c:	01400484 	movi	r5,18
 8008a10:	01800084 	movi	r6,2
 8008a14:	dfc00217 	ldw	ra,8(sp)
 8008a18:	dc400117 	ldw	r17,4(sp)
 8008a1c:	dc000017 	ldw	r16,0(sp)
 8008a20:	dec00304 	addi	sp,sp,12
 8008a24:	800891c1 	jmpi	800891c <std>

08008a28 <__fp_lock>:
 8008a28:	0005883a 	mov	r2,zero
 8008a2c:	f800283a 	ret

08008a30 <__fp_unlock>:
 8008a30:	0005883a 	mov	r2,zero
 8008a34:	f800283a 	ret

08008a38 <__fp_unlock_all>:
 8008a38:	00820074 	movhi	r2,2049
 8008a3c:	108e5204 	addi	r2,r2,14664
 8008a40:	11000017 	ldw	r4,0(r2)
 8008a44:	01420074 	movhi	r5,2049
 8008a48:	29628c04 	addi	r5,r5,-30160
 8008a4c:	80095801 	jmpi	8009580 <_fwalk>

08008a50 <__fp_lock_all>:
 8008a50:	00820074 	movhi	r2,2049
 8008a54:	108e5204 	addi	r2,r2,14664
 8008a58:	11000017 	ldw	r4,0(r2)
 8008a5c:	01420074 	movhi	r5,2049
 8008a60:	29628a04 	addi	r5,r5,-30168
 8008a64:	80095801 	jmpi	8009580 <_fwalk>

08008a68 <_cleanup_r>:
 8008a68:	01420074 	movhi	r5,2049
 8008a6c:	296f8604 	addi	r5,r5,-16872
 8008a70:	80095801 	jmpi	8009580 <_fwalk>

08008a74 <_cleanup>:
 8008a74:	00820074 	movhi	r2,2049
 8008a78:	108e5304 	addi	r2,r2,14668
 8008a7c:	11000017 	ldw	r4,0(r2)
 8008a80:	8008a681 	jmpi	8008a68 <_cleanup_r>

08008a84 <__sfmoreglue>:
 8008a84:	defffc04 	addi	sp,sp,-16
 8008a88:	dc400115 	stw	r17,4(sp)
 8008a8c:	2c401724 	muli	r17,r5,92
 8008a90:	dc800215 	stw	r18,8(sp)
 8008a94:	2825883a 	mov	r18,r5
 8008a98:	89400304 	addi	r5,r17,12
 8008a9c:	dc000015 	stw	r16,0(sp)
 8008aa0:	dfc00315 	stw	ra,12(sp)
 8008aa4:	80098900 	call	8009890 <_malloc_r>
 8008aa8:	0021883a 	mov	r16,zero
 8008aac:	880d883a 	mov	r6,r17
 8008ab0:	000b883a 	mov	r5,zero
 8008ab4:	10000626 	beq	r2,zero,8008ad0 <__sfmoreglue+0x4c>
 8008ab8:	11000304 	addi	r4,r2,12
 8008abc:	14800115 	stw	r18,4(r2)
 8008ac0:	10000015 	stw	zero,0(r2)
 8008ac4:	11000215 	stw	r4,8(r2)
 8008ac8:	1021883a 	mov	r16,r2
 8008acc:	800a2340 	call	800a234 <memset>
 8008ad0:	8005883a 	mov	r2,r16
 8008ad4:	dfc00317 	ldw	ra,12(sp)
 8008ad8:	dc800217 	ldw	r18,8(sp)
 8008adc:	dc400117 	ldw	r17,4(sp)
 8008ae0:	dc000017 	ldw	r16,0(sp)
 8008ae4:	dec00404 	addi	sp,sp,16
 8008ae8:	f800283a 	ret

08008aec <__sfp>:
 8008aec:	defffd04 	addi	sp,sp,-12
 8008af0:	00820074 	movhi	r2,2049
 8008af4:	108e5304 	addi	r2,r2,14668
 8008af8:	dc000015 	stw	r16,0(sp)
 8008afc:	14000017 	ldw	r16,0(r2)
 8008b00:	dc400115 	stw	r17,4(sp)
 8008b04:	dfc00215 	stw	ra,8(sp)
 8008b08:	80800e17 	ldw	r2,56(r16)
 8008b0c:	2023883a 	mov	r17,r4
 8008b10:	10002626 	beq	r2,zero,8008bac <__sfp+0xc0>
 8008b14:	8400b804 	addi	r16,r16,736
 8008b18:	80800117 	ldw	r2,4(r16)
 8008b1c:	81000217 	ldw	r4,8(r16)
 8008b20:	10ffffc4 	addi	r3,r2,-1
 8008b24:	18000916 	blt	r3,zero,8008b4c <__sfp+0x60>
 8008b28:	2080030f 	ldh	r2,12(r4)
 8008b2c:	10000b26 	beq	r2,zero,8008b5c <__sfp+0x70>
 8008b30:	017fffc4 	movi	r5,-1
 8008b34:	00000206 	br	8008b40 <__sfp+0x54>
 8008b38:	2080030f 	ldh	r2,12(r4)
 8008b3c:	10000726 	beq	r2,zero,8008b5c <__sfp+0x70>
 8008b40:	18ffffc4 	addi	r3,r3,-1
 8008b44:	21001704 	addi	r4,r4,92
 8008b48:	197ffb1e 	bne	r3,r5,8008b38 <__sfp+0x4c>
 8008b4c:	80800017 	ldw	r2,0(r16)
 8008b50:	10001926 	beq	r2,zero,8008bb8 <__sfp+0xcc>
 8008b54:	1021883a 	mov	r16,r2
 8008b58:	003fef06 	br	8008b18 <__sfp+0x2c>
 8008b5c:	00bfffc4 	movi	r2,-1
 8008b60:	00c00044 	movi	r3,1
 8008b64:	2080038d 	sth	r2,14(r4)
 8008b68:	20c0030d 	sth	r3,12(r4)
 8008b6c:	20000015 	stw	zero,0(r4)
 8008b70:	20000215 	stw	zero,8(r4)
 8008b74:	20000115 	stw	zero,4(r4)
 8008b78:	20000415 	stw	zero,16(r4)
 8008b7c:	20000515 	stw	zero,20(r4)
 8008b80:	20000615 	stw	zero,24(r4)
 8008b84:	20000c15 	stw	zero,48(r4)
 8008b88:	20000d15 	stw	zero,52(r4)
 8008b8c:	20001115 	stw	zero,68(r4)
 8008b90:	20001215 	stw	zero,72(r4)
 8008b94:	2005883a 	mov	r2,r4
 8008b98:	dfc00217 	ldw	ra,8(sp)
 8008b9c:	dc400117 	ldw	r17,4(sp)
 8008ba0:	dc000017 	ldw	r16,0(sp)
 8008ba4:	dec00304 	addi	sp,sp,12
 8008ba8:	f800283a 	ret
 8008bac:	8009883a 	mov	r4,r16
 8008bb0:	80089840 	call	8008984 <__sinit>
 8008bb4:	003fd706 	br	8008b14 <__sfp+0x28>
 8008bb8:	8809883a 	mov	r4,r17
 8008bbc:	01400104 	movi	r5,4
 8008bc0:	8008a840 	call	8008a84 <__sfmoreglue>
 8008bc4:	80800015 	stw	r2,0(r16)
 8008bc8:	103fe21e 	bne	r2,zero,8008b54 <__sfp+0x68>
 8008bcc:	00800304 	movi	r2,12
 8008bd0:	0009883a 	mov	r4,zero
 8008bd4:	88800015 	stw	r2,0(r17)
 8008bd8:	003fee06 	br	8008b94 <__sfp+0xa8>

08008bdc <_malloc_trim_r>:
 8008bdc:	defffb04 	addi	sp,sp,-20
 8008be0:	dcc00315 	stw	r19,12(sp)
 8008be4:	04c20074 	movhi	r19,2049
 8008be8:	9cc87904 	addi	r19,r19,8676
 8008bec:	dc800215 	stw	r18,8(sp)
 8008bf0:	dc400115 	stw	r17,4(sp)
 8008bf4:	dc000015 	stw	r16,0(sp)
 8008bf8:	2823883a 	mov	r17,r5
 8008bfc:	2025883a 	mov	r18,r4
 8008c00:	dfc00415 	stw	ra,16(sp)
 8008c04:	800d5040 	call	800d504 <__malloc_lock>
 8008c08:	98800217 	ldw	r2,8(r19)
 8008c0c:	9009883a 	mov	r4,r18
 8008c10:	000b883a 	mov	r5,zero
 8008c14:	10c00117 	ldw	r3,4(r2)
 8008c18:	00bfff04 	movi	r2,-4
 8008c1c:	18a0703a 	and	r16,r3,r2
 8008c20:	8463c83a 	sub	r17,r16,r17
 8008c24:	8c43fbc4 	addi	r17,r17,4079
 8008c28:	8822d33a 	srli	r17,r17,12
 8008c2c:	0083ffc4 	movi	r2,4095
 8008c30:	8c7fffc4 	addi	r17,r17,-1
 8008c34:	8822933a 	slli	r17,r17,12
 8008c38:	1440060e 	bge	r2,r17,8008c54 <_malloc_trim_r+0x78>
 8008c3c:	800b8f40 	call	800b8f4 <_sbrk_r>
 8008c40:	98c00217 	ldw	r3,8(r19)
 8008c44:	9009883a 	mov	r4,r18
 8008c48:	044bc83a 	sub	r5,zero,r17
 8008c4c:	80c7883a 	add	r3,r16,r3
 8008c50:	10c00926 	beq	r2,r3,8008c78 <_malloc_trim_r+0x9c>
 8008c54:	800d5240 	call	800d524 <__malloc_unlock>
 8008c58:	0005883a 	mov	r2,zero
 8008c5c:	dfc00417 	ldw	ra,16(sp)
 8008c60:	dcc00317 	ldw	r19,12(sp)
 8008c64:	dc800217 	ldw	r18,8(sp)
 8008c68:	dc400117 	ldw	r17,4(sp)
 8008c6c:	dc000017 	ldw	r16,0(sp)
 8008c70:	dec00504 	addi	sp,sp,20
 8008c74:	f800283a 	ret
 8008c78:	9009883a 	mov	r4,r18
 8008c7c:	800b8f40 	call	800b8f4 <_sbrk_r>
 8008c80:	844dc83a 	sub	r6,r16,r17
 8008c84:	00ffffc4 	movi	r3,-1
 8008c88:	9009883a 	mov	r4,r18
 8008c8c:	000b883a 	mov	r5,zero
 8008c90:	01c20074 	movhi	r7,2049
 8008c94:	39d56b04 	addi	r7,r7,21932
 8008c98:	31800054 	ori	r6,r6,1
 8008c9c:	10c00926 	beq	r2,r3,8008cc4 <_malloc_trim_r+0xe8>
 8008ca0:	38800017 	ldw	r2,0(r7)
 8008ca4:	98c00217 	ldw	r3,8(r19)
 8008ca8:	9009883a 	mov	r4,r18
 8008cac:	1445c83a 	sub	r2,r2,r17
 8008cb0:	38800015 	stw	r2,0(r7)
 8008cb4:	19800115 	stw	r6,4(r3)
 8008cb8:	800d5240 	call	800d524 <__malloc_unlock>
 8008cbc:	00800044 	movi	r2,1
 8008cc0:	003fe606 	br	8008c5c <_malloc_trim_r+0x80>
 8008cc4:	800b8f40 	call	800b8f4 <_sbrk_r>
 8008cc8:	99800217 	ldw	r6,8(r19)
 8008ccc:	100f883a 	mov	r7,r2
 8008cd0:	9009883a 	mov	r4,r18
 8008cd4:	1187c83a 	sub	r3,r2,r6
 8008cd8:	008003c4 	movi	r2,15
 8008cdc:	19400054 	ori	r5,r3,1
 8008ce0:	10ffdc0e 	bge	r2,r3,8008c54 <_malloc_trim_r+0x78>
 8008ce4:	00820074 	movhi	r2,2049
 8008ce8:	108e5704 	addi	r2,r2,14684
 8008cec:	10c00017 	ldw	r3,0(r2)
 8008cf0:	00820074 	movhi	r2,2049
 8008cf4:	10956b04 	addi	r2,r2,21932
 8008cf8:	31400115 	stw	r5,4(r6)
 8008cfc:	38c7c83a 	sub	r3,r7,r3
 8008d00:	10c00015 	stw	r3,0(r2)
 8008d04:	003fd306 	br	8008c54 <_malloc_trim_r+0x78>

08008d08 <_free_r>:
 8008d08:	defffd04 	addi	sp,sp,-12
 8008d0c:	dc400115 	stw	r17,4(sp)
 8008d10:	dc000015 	stw	r16,0(sp)
 8008d14:	dfc00215 	stw	ra,8(sp)
 8008d18:	2821883a 	mov	r16,r5
 8008d1c:	2023883a 	mov	r17,r4
 8008d20:	28005a26 	beq	r5,zero,8008e8c <_free_r+0x184>
 8008d24:	800d5040 	call	800d504 <__malloc_lock>
 8008d28:	823ffe04 	addi	r8,r16,-8
 8008d2c:	41400117 	ldw	r5,4(r8)
 8008d30:	00bfff84 	movi	r2,-2
 8008d34:	02820074 	movhi	r10,2049
 8008d38:	52887904 	addi	r10,r10,8676
 8008d3c:	288e703a 	and	r7,r5,r2
 8008d40:	41cd883a 	add	r6,r8,r7
 8008d44:	30c00117 	ldw	r3,4(r6)
 8008d48:	51000217 	ldw	r4,8(r10)
 8008d4c:	00bfff04 	movi	r2,-4
 8008d50:	1892703a 	and	r9,r3,r2
 8008d54:	5017883a 	mov	r11,r10
 8008d58:	31006726 	beq	r6,r4,8008ef8 <_free_r+0x1f0>
 8008d5c:	2880004c 	andi	r2,r5,1
 8008d60:	1005003a 	cmpeq	r2,r2,zero
 8008d64:	32400115 	stw	r9,4(r6)
 8008d68:	10001a1e 	bne	r2,zero,8008dd4 <_free_r+0xcc>
 8008d6c:	000b883a 	mov	r5,zero
 8008d70:	3247883a 	add	r3,r6,r9
 8008d74:	18800117 	ldw	r2,4(r3)
 8008d78:	1080004c 	andi	r2,r2,1
 8008d7c:	1000231e 	bne	r2,zero,8008e0c <_free_r+0x104>
 8008d80:	280ac03a 	cmpne	r5,r5,zero
 8008d84:	3a4f883a 	add	r7,r7,r9
 8008d88:	2800451e 	bne	r5,zero,8008ea0 <_free_r+0x198>
 8008d8c:	31000217 	ldw	r4,8(r6)
 8008d90:	00820074 	movhi	r2,2049
 8008d94:	10887b04 	addi	r2,r2,8684
 8008d98:	20807b26 	beq	r4,r2,8008f88 <_free_r+0x280>
 8008d9c:	30800317 	ldw	r2,12(r6)
 8008da0:	3a07883a 	add	r3,r7,r8
 8008da4:	19c00015 	stw	r7,0(r3)
 8008da8:	11000215 	stw	r4,8(r2)
 8008dac:	20800315 	stw	r2,12(r4)
 8008db0:	38800054 	ori	r2,r7,1
 8008db4:	40800115 	stw	r2,4(r8)
 8008db8:	28001a26 	beq	r5,zero,8008e24 <_free_r+0x11c>
 8008dbc:	8809883a 	mov	r4,r17
 8008dc0:	dfc00217 	ldw	ra,8(sp)
 8008dc4:	dc400117 	ldw	r17,4(sp)
 8008dc8:	dc000017 	ldw	r16,0(sp)
 8008dcc:	dec00304 	addi	sp,sp,12
 8008dd0:	800d5241 	jmpi	800d524 <__malloc_unlock>
 8008dd4:	80bffe17 	ldw	r2,-8(r16)
 8008dd8:	50c00204 	addi	r3,r10,8
 8008ddc:	4091c83a 	sub	r8,r8,r2
 8008de0:	41000217 	ldw	r4,8(r8)
 8008de4:	388f883a 	add	r7,r7,r2
 8008de8:	20c06126 	beq	r4,r3,8008f70 <_free_r+0x268>
 8008dec:	40800317 	ldw	r2,12(r8)
 8008df0:	3247883a 	add	r3,r6,r9
 8008df4:	000b883a 	mov	r5,zero
 8008df8:	11000215 	stw	r4,8(r2)
 8008dfc:	20800315 	stw	r2,12(r4)
 8008e00:	18800117 	ldw	r2,4(r3)
 8008e04:	1080004c 	andi	r2,r2,1
 8008e08:	103fdd26 	beq	r2,zero,8008d80 <_free_r+0x78>
 8008e0c:	38800054 	ori	r2,r7,1
 8008e10:	3a07883a 	add	r3,r7,r8
 8008e14:	280ac03a 	cmpne	r5,r5,zero
 8008e18:	40800115 	stw	r2,4(r8)
 8008e1c:	19c00015 	stw	r7,0(r3)
 8008e20:	283fe61e 	bne	r5,zero,8008dbc <_free_r+0xb4>
 8008e24:	00807fc4 	movi	r2,511
 8008e28:	11c01f2e 	bgeu	r2,r7,8008ea8 <_free_r+0x1a0>
 8008e2c:	3806d27a 	srli	r3,r7,9
 8008e30:	1800481e 	bne	r3,zero,8008f54 <_free_r+0x24c>
 8008e34:	3804d0fa 	srli	r2,r7,3
 8008e38:	100690fa 	slli	r3,r2,3
 8008e3c:	1acd883a 	add	r6,r3,r11
 8008e40:	31400217 	ldw	r5,8(r6)
 8008e44:	31405926 	beq	r6,r5,8008fac <_free_r+0x2a4>
 8008e48:	28800117 	ldw	r2,4(r5)
 8008e4c:	00ffff04 	movi	r3,-4
 8008e50:	10c4703a 	and	r2,r2,r3
 8008e54:	3880022e 	bgeu	r7,r2,8008e60 <_free_r+0x158>
 8008e58:	29400217 	ldw	r5,8(r5)
 8008e5c:	317ffa1e 	bne	r6,r5,8008e48 <_free_r+0x140>
 8008e60:	29800317 	ldw	r6,12(r5)
 8008e64:	41800315 	stw	r6,12(r8)
 8008e68:	41400215 	stw	r5,8(r8)
 8008e6c:	8809883a 	mov	r4,r17
 8008e70:	2a000315 	stw	r8,12(r5)
 8008e74:	32000215 	stw	r8,8(r6)
 8008e78:	dfc00217 	ldw	ra,8(sp)
 8008e7c:	dc400117 	ldw	r17,4(sp)
 8008e80:	dc000017 	ldw	r16,0(sp)
 8008e84:	dec00304 	addi	sp,sp,12
 8008e88:	800d5241 	jmpi	800d524 <__malloc_unlock>
 8008e8c:	dfc00217 	ldw	ra,8(sp)
 8008e90:	dc400117 	ldw	r17,4(sp)
 8008e94:	dc000017 	ldw	r16,0(sp)
 8008e98:	dec00304 	addi	sp,sp,12
 8008e9c:	f800283a 	ret
 8008ea0:	31000217 	ldw	r4,8(r6)
 8008ea4:	003fbd06 	br	8008d9c <_free_r+0x94>
 8008ea8:	3806d0fa 	srli	r3,r7,3
 8008eac:	00800044 	movi	r2,1
 8008eb0:	51400117 	ldw	r5,4(r10)
 8008eb4:	180890fa 	slli	r4,r3,3
 8008eb8:	1807d0ba 	srai	r3,r3,2
 8008ebc:	22c9883a 	add	r4,r4,r11
 8008ec0:	21800217 	ldw	r6,8(r4)
 8008ec4:	10c4983a 	sll	r2,r2,r3
 8008ec8:	41000315 	stw	r4,12(r8)
 8008ecc:	41800215 	stw	r6,8(r8)
 8008ed0:	288ab03a 	or	r5,r5,r2
 8008ed4:	22000215 	stw	r8,8(r4)
 8008ed8:	8809883a 	mov	r4,r17
 8008edc:	51400115 	stw	r5,4(r10)
 8008ee0:	32000315 	stw	r8,12(r6)
 8008ee4:	dfc00217 	ldw	ra,8(sp)
 8008ee8:	dc400117 	ldw	r17,4(sp)
 8008eec:	dc000017 	ldw	r16,0(sp)
 8008ef0:	dec00304 	addi	sp,sp,12
 8008ef4:	800d5241 	jmpi	800d524 <__malloc_unlock>
 8008ef8:	2880004c 	andi	r2,r5,1
 8008efc:	3a4d883a 	add	r6,r7,r9
 8008f00:	1000071e 	bne	r2,zero,8008f20 <_free_r+0x218>
 8008f04:	80bffe17 	ldw	r2,-8(r16)
 8008f08:	4091c83a 	sub	r8,r8,r2
 8008f0c:	41000317 	ldw	r4,12(r8)
 8008f10:	40c00217 	ldw	r3,8(r8)
 8008f14:	308d883a 	add	r6,r6,r2
 8008f18:	20c00215 	stw	r3,8(r4)
 8008f1c:	19000315 	stw	r4,12(r3)
 8008f20:	00820074 	movhi	r2,2049
 8008f24:	108e5604 	addi	r2,r2,14680
 8008f28:	11000017 	ldw	r4,0(r2)
 8008f2c:	30c00054 	ori	r3,r6,1
 8008f30:	52000215 	stw	r8,8(r10)
 8008f34:	40c00115 	stw	r3,4(r8)
 8008f38:	313fa036 	bltu	r6,r4,8008dbc <_free_r+0xb4>
 8008f3c:	00820074 	movhi	r2,2049
 8008f40:	10956104 	addi	r2,r2,21892
 8008f44:	11400017 	ldw	r5,0(r2)
 8008f48:	8809883a 	mov	r4,r17
 8008f4c:	8008bdc0 	call	8008bdc <_malloc_trim_r>
 8008f50:	003f9a06 	br	8008dbc <_free_r+0xb4>
 8008f54:	00800104 	movi	r2,4
 8008f58:	10c0072e 	bgeu	r2,r3,8008f78 <_free_r+0x270>
 8008f5c:	00800504 	movi	r2,20
 8008f60:	10c01936 	bltu	r2,r3,8008fc8 <_free_r+0x2c0>
 8008f64:	188016c4 	addi	r2,r3,91
 8008f68:	100690fa 	slli	r3,r2,3
 8008f6c:	003fb306 	br	8008e3c <_free_r+0x134>
 8008f70:	01400044 	movi	r5,1
 8008f74:	003f7e06 	br	8008d70 <_free_r+0x68>
 8008f78:	3804d1ba 	srli	r2,r7,6
 8008f7c:	10800e04 	addi	r2,r2,56
 8008f80:	100690fa 	slli	r3,r2,3
 8008f84:	003fad06 	br	8008e3c <_free_r+0x134>
 8008f88:	22000315 	stw	r8,12(r4)
 8008f8c:	22000215 	stw	r8,8(r4)
 8008f90:	3a05883a 	add	r2,r7,r8
 8008f94:	38c00054 	ori	r3,r7,1
 8008f98:	11c00015 	stw	r7,0(r2)
 8008f9c:	41000215 	stw	r4,8(r8)
 8008fa0:	40c00115 	stw	r3,4(r8)
 8008fa4:	41000315 	stw	r4,12(r8)
 8008fa8:	003f8406 	br	8008dbc <_free_r+0xb4>
 8008fac:	1005d0ba 	srai	r2,r2,2
 8008fb0:	00c00044 	movi	r3,1
 8008fb4:	51000117 	ldw	r4,4(r10)
 8008fb8:	1886983a 	sll	r3,r3,r2
 8008fbc:	20c8b03a 	or	r4,r4,r3
 8008fc0:	51000115 	stw	r4,4(r10)
 8008fc4:	003fa706 	br	8008e64 <_free_r+0x15c>
 8008fc8:	00801504 	movi	r2,84
 8008fcc:	10c00436 	bltu	r2,r3,8008fe0 <_free_r+0x2d8>
 8008fd0:	3804d33a 	srli	r2,r7,12
 8008fd4:	10801b84 	addi	r2,r2,110
 8008fd8:	100690fa 	slli	r3,r2,3
 8008fdc:	003f9706 	br	8008e3c <_free_r+0x134>
 8008fe0:	00805504 	movi	r2,340
 8008fe4:	10c00436 	bltu	r2,r3,8008ff8 <_free_r+0x2f0>
 8008fe8:	3804d3fa 	srli	r2,r7,15
 8008fec:	10801dc4 	addi	r2,r2,119
 8008ff0:	100690fa 	slli	r3,r2,3
 8008ff4:	003f9106 	br	8008e3c <_free_r+0x134>
 8008ff8:	00815504 	movi	r2,1364
 8008ffc:	10c0032e 	bgeu	r2,r3,800900c <_free_r+0x304>
 8009000:	00801f84 	movi	r2,126
 8009004:	00c0fc04 	movi	r3,1008
 8009008:	003f8c06 	br	8008e3c <_free_r+0x134>
 800900c:	3804d4ba 	srli	r2,r7,18
 8009010:	10801f04 	addi	r2,r2,124
 8009014:	100690fa 	slli	r3,r2,3
 8009018:	003f8806 	br	8008e3c <_free_r+0x134>

0800901c <__sfvwrite_r>:
 800901c:	30800217 	ldw	r2,8(r6)
 8009020:	defff504 	addi	sp,sp,-44
 8009024:	df000915 	stw	fp,36(sp)
 8009028:	dd800715 	stw	r22,28(sp)
 800902c:	dc800315 	stw	r18,12(sp)
 8009030:	dfc00a15 	stw	ra,40(sp)
 8009034:	ddc00815 	stw	r23,32(sp)
 8009038:	dd400615 	stw	r21,24(sp)
 800903c:	dd000515 	stw	r20,20(sp)
 8009040:	dcc00415 	stw	r19,16(sp)
 8009044:	dc400215 	stw	r17,8(sp)
 8009048:	dc000115 	stw	r16,4(sp)
 800904c:	302d883a 	mov	r22,r6
 8009050:	2039883a 	mov	fp,r4
 8009054:	2825883a 	mov	r18,r5
 8009058:	10001c26 	beq	r2,zero,80090cc <__sfvwrite_r+0xb0>
 800905c:	29c0030b 	ldhu	r7,12(r5)
 8009060:	3880020c 	andi	r2,r7,8
 8009064:	10002726 	beq	r2,zero,8009104 <__sfvwrite_r+0xe8>
 8009068:	28800417 	ldw	r2,16(r5)
 800906c:	10002526 	beq	r2,zero,8009104 <__sfvwrite_r+0xe8>
 8009070:	3880008c 	andi	r2,r7,2
 8009074:	b5400017 	ldw	r21,0(r22)
 8009078:	10002826 	beq	r2,zero,800911c <__sfvwrite_r+0x100>
 800907c:	0021883a 	mov	r16,zero
 8009080:	0023883a 	mov	r17,zero
 8009084:	880d883a 	mov	r6,r17
 8009088:	e009883a 	mov	r4,fp
 800908c:	00810004 	movi	r2,1024
 8009090:	80006e26 	beq	r16,zero,800924c <__sfvwrite_r+0x230>
 8009094:	800f883a 	mov	r7,r16
 8009098:	91400717 	ldw	r5,28(r18)
 800909c:	1400012e 	bgeu	r2,r16,80090a4 <__sfvwrite_r+0x88>
 80090a0:	100f883a 	mov	r7,r2
 80090a4:	90c00917 	ldw	r3,36(r18)
 80090a8:	183ee83a 	callr	r3
 80090ac:	1007883a 	mov	r3,r2
 80090b0:	80a1c83a 	sub	r16,r16,r2
 80090b4:	88a3883a 	add	r17,r17,r2
 80090b8:	00806d0e 	bge	zero,r2,8009270 <__sfvwrite_r+0x254>
 80090bc:	b0800217 	ldw	r2,8(r22)
 80090c0:	10c5c83a 	sub	r2,r2,r3
 80090c4:	b0800215 	stw	r2,8(r22)
 80090c8:	103fee1e 	bne	r2,zero,8009084 <__sfvwrite_r+0x68>
 80090cc:	0009883a 	mov	r4,zero
 80090d0:	2005883a 	mov	r2,r4
 80090d4:	dfc00a17 	ldw	ra,40(sp)
 80090d8:	df000917 	ldw	fp,36(sp)
 80090dc:	ddc00817 	ldw	r23,32(sp)
 80090e0:	dd800717 	ldw	r22,28(sp)
 80090e4:	dd400617 	ldw	r21,24(sp)
 80090e8:	dd000517 	ldw	r20,20(sp)
 80090ec:	dcc00417 	ldw	r19,16(sp)
 80090f0:	dc800317 	ldw	r18,12(sp)
 80090f4:	dc400217 	ldw	r17,8(sp)
 80090f8:	dc000117 	ldw	r16,4(sp)
 80090fc:	dec00b04 	addi	sp,sp,44
 8009100:	f800283a 	ret
 8009104:	8006de40 	call	8006de4 <__swsetup_r>
 8009108:	1000e41e 	bne	r2,zero,800949c <__sfvwrite_r+0x480>
 800910c:	91c0030b 	ldhu	r7,12(r18)
 8009110:	b5400017 	ldw	r21,0(r22)
 8009114:	3880008c 	andi	r2,r7,2
 8009118:	103fd81e 	bne	r2,zero,800907c <__sfvwrite_r+0x60>
 800911c:	3880004c 	andi	r2,r7,1
 8009120:	1005003a 	cmpeq	r2,r2,zero
 8009124:	10005726 	beq	r2,zero,8009284 <__sfvwrite_r+0x268>
 8009128:	0029883a 	mov	r20,zero
 800912c:	002f883a 	mov	r23,zero
 8009130:	a0004226 	beq	r20,zero,800923c <__sfvwrite_r+0x220>
 8009134:	3880800c 	andi	r2,r7,512
 8009138:	94000217 	ldw	r16,8(r18)
 800913c:	10008b26 	beq	r2,zero,800936c <__sfvwrite_r+0x350>
 8009140:	800d883a 	mov	r6,r16
 8009144:	a400a536 	bltu	r20,r16,80093dc <__sfvwrite_r+0x3c0>
 8009148:	3881200c 	andi	r2,r7,1152
 800914c:	10002726 	beq	r2,zero,80091ec <__sfvwrite_r+0x1d0>
 8009150:	90800517 	ldw	r2,20(r18)
 8009154:	92000417 	ldw	r8,16(r18)
 8009158:	91400017 	ldw	r5,0(r18)
 800915c:	1087883a 	add	r3,r2,r2
 8009160:	1887883a 	add	r3,r3,r2
 8009164:	1808d7fa 	srli	r4,r3,31
 8009168:	2a21c83a 	sub	r16,r5,r8
 800916c:	80800044 	addi	r2,r16,1
 8009170:	20c9883a 	add	r4,r4,r3
 8009174:	2027d07a 	srai	r19,r4,1
 8009178:	a085883a 	add	r2,r20,r2
 800917c:	980d883a 	mov	r6,r19
 8009180:	9880022e 	bgeu	r19,r2,800918c <__sfvwrite_r+0x170>
 8009184:	1027883a 	mov	r19,r2
 8009188:	100d883a 	mov	r6,r2
 800918c:	3881000c 	andi	r2,r7,1024
 8009190:	1000b826 	beq	r2,zero,8009474 <__sfvwrite_r+0x458>
 8009194:	300b883a 	mov	r5,r6
 8009198:	e009883a 	mov	r4,fp
 800919c:	80098900 	call	8009890 <_malloc_r>
 80091a0:	10003126 	beq	r2,zero,8009268 <__sfvwrite_r+0x24c>
 80091a4:	91400417 	ldw	r5,16(r18)
 80091a8:	1009883a 	mov	r4,r2
 80091ac:	800d883a 	mov	r6,r16
 80091b0:	1023883a 	mov	r17,r2
 80091b4:	800a0b40 	call	800a0b4 <memcpy>
 80091b8:	90c0030b 	ldhu	r3,12(r18)
 80091bc:	00beffc4 	movi	r2,-1025
 80091c0:	1886703a 	and	r3,r3,r2
 80091c4:	18c02014 	ori	r3,r3,128
 80091c8:	90c0030d 	sth	r3,12(r18)
 80091cc:	9c07c83a 	sub	r3,r19,r16
 80091d0:	8c05883a 	add	r2,r17,r16
 80091d4:	a00d883a 	mov	r6,r20
 80091d8:	a021883a 	mov	r16,r20
 80091dc:	90800015 	stw	r2,0(r18)
 80091e0:	90c00215 	stw	r3,8(r18)
 80091e4:	94400415 	stw	r17,16(r18)
 80091e8:	94c00515 	stw	r19,20(r18)
 80091ec:	91000017 	ldw	r4,0(r18)
 80091f0:	b80b883a 	mov	r5,r23
 80091f4:	a023883a 	mov	r17,r20
 80091f8:	800a1540 	call	800a154 <memmove>
 80091fc:	90c00217 	ldw	r3,8(r18)
 8009200:	90800017 	ldw	r2,0(r18)
 8009204:	a027883a 	mov	r19,r20
 8009208:	1c07c83a 	sub	r3,r3,r16
 800920c:	1405883a 	add	r2,r2,r16
 8009210:	90c00215 	stw	r3,8(r18)
 8009214:	a021883a 	mov	r16,r20
 8009218:	90800015 	stw	r2,0(r18)
 800921c:	b0800217 	ldw	r2,8(r22)
 8009220:	1405c83a 	sub	r2,r2,r16
 8009224:	b0800215 	stw	r2,8(r22)
 8009228:	103fa826 	beq	r2,zero,80090cc <__sfvwrite_r+0xb0>
 800922c:	a469c83a 	sub	r20,r20,r17
 8009230:	91c0030b 	ldhu	r7,12(r18)
 8009234:	bcef883a 	add	r23,r23,r19
 8009238:	a03fbe1e 	bne	r20,zero,8009134 <__sfvwrite_r+0x118>
 800923c:	adc00017 	ldw	r23,0(r21)
 8009240:	ad000117 	ldw	r20,4(r21)
 8009244:	ad400204 	addi	r21,r21,8
 8009248:	003fb906 	br	8009130 <__sfvwrite_r+0x114>
 800924c:	ac400017 	ldw	r17,0(r21)
 8009250:	ac000117 	ldw	r16,4(r21)
 8009254:	ad400204 	addi	r21,r21,8
 8009258:	003f8a06 	br	8009084 <__sfvwrite_r+0x68>
 800925c:	91400417 	ldw	r5,16(r18)
 8009260:	e009883a 	mov	r4,fp
 8009264:	8008d080 	call	8008d08 <_free_r>
 8009268:	00800304 	movi	r2,12
 800926c:	e0800015 	stw	r2,0(fp)
 8009270:	9080030b 	ldhu	r2,12(r18)
 8009274:	013fffc4 	movi	r4,-1
 8009278:	10801014 	ori	r2,r2,64
 800927c:	9080030d 	sth	r2,12(r18)
 8009280:	003f9306 	br	80090d0 <__sfvwrite_r+0xb4>
 8009284:	0027883a 	mov	r19,zero
 8009288:	002f883a 	mov	r23,zero
 800928c:	d8000015 	stw	zero,0(sp)
 8009290:	0029883a 	mov	r20,zero
 8009294:	98001e26 	beq	r19,zero,8009310 <__sfvwrite_r+0x2f4>
 8009298:	d8c00017 	ldw	r3,0(sp)
 800929c:	1804c03a 	cmpne	r2,r3,zero
 80092a0:	10005e26 	beq	r2,zero,800941c <__sfvwrite_r+0x400>
 80092a4:	9821883a 	mov	r16,r19
 80092a8:	a4c0012e 	bgeu	r20,r19,80092b0 <__sfvwrite_r+0x294>
 80092ac:	a021883a 	mov	r16,r20
 80092b0:	91000017 	ldw	r4,0(r18)
 80092b4:	90800417 	ldw	r2,16(r18)
 80092b8:	91800217 	ldw	r6,8(r18)
 80092bc:	91c00517 	ldw	r7,20(r18)
 80092c0:	1100022e 	bgeu	r2,r4,80092cc <__sfvwrite_r+0x2b0>
 80092c4:	31e3883a 	add	r17,r6,r7
 80092c8:	8c001616 	blt	r17,r16,8009324 <__sfvwrite_r+0x308>
 80092cc:	81c03816 	blt	r16,r7,80093b0 <__sfvwrite_r+0x394>
 80092d0:	90c00917 	ldw	r3,36(r18)
 80092d4:	91400717 	ldw	r5,28(r18)
 80092d8:	e009883a 	mov	r4,fp
 80092dc:	b80d883a 	mov	r6,r23
 80092e0:	183ee83a 	callr	r3
 80092e4:	1023883a 	mov	r17,r2
 80092e8:	00bfe10e 	bge	zero,r2,8009270 <__sfvwrite_r+0x254>
 80092ec:	a469c83a 	sub	r20,r20,r17
 80092f0:	a0001826 	beq	r20,zero,8009354 <__sfvwrite_r+0x338>
 80092f4:	b0800217 	ldw	r2,8(r22)
 80092f8:	1445c83a 	sub	r2,r2,r17
 80092fc:	b0800215 	stw	r2,8(r22)
 8009300:	103f7226 	beq	r2,zero,80090cc <__sfvwrite_r+0xb0>
 8009304:	9c67c83a 	sub	r19,r19,r17
 8009308:	bc6f883a 	add	r23,r23,r17
 800930c:	983fe21e 	bne	r19,zero,8009298 <__sfvwrite_r+0x27c>
 8009310:	adc00017 	ldw	r23,0(r21)
 8009314:	acc00117 	ldw	r19,4(r21)
 8009318:	ad400204 	addi	r21,r21,8
 800931c:	d8000015 	stw	zero,0(sp)
 8009320:	003fdc06 	br	8009294 <__sfvwrite_r+0x278>
 8009324:	b80b883a 	mov	r5,r23
 8009328:	880d883a 	mov	r6,r17
 800932c:	800a1540 	call	800a154 <memmove>
 8009330:	90c00017 	ldw	r3,0(r18)
 8009334:	e009883a 	mov	r4,fp
 8009338:	900b883a 	mov	r5,r18
 800933c:	1c47883a 	add	r3,r3,r17
 8009340:	90c00015 	stw	r3,0(r18)
 8009344:	80086ec0 	call	80086ec <_fflush_r>
 8009348:	103fc91e 	bne	r2,zero,8009270 <__sfvwrite_r+0x254>
 800934c:	a469c83a 	sub	r20,r20,r17
 8009350:	a03fe81e 	bne	r20,zero,80092f4 <__sfvwrite_r+0x2d8>
 8009354:	e009883a 	mov	r4,fp
 8009358:	900b883a 	mov	r5,r18
 800935c:	80086ec0 	call	80086ec <_fflush_r>
 8009360:	103fc31e 	bne	r2,zero,8009270 <__sfvwrite_r+0x254>
 8009364:	d8000015 	stw	zero,0(sp)
 8009368:	003fe206 	br	80092f4 <__sfvwrite_r+0x2d8>
 800936c:	91000017 	ldw	r4,0(r18)
 8009370:	90800417 	ldw	r2,16(r18)
 8009374:	1100022e 	bgeu	r2,r4,8009380 <__sfvwrite_r+0x364>
 8009378:	8023883a 	mov	r17,r16
 800937c:	85003136 	bltu	r16,r20,8009444 <__sfvwrite_r+0x428>
 8009380:	91c00517 	ldw	r7,20(r18)
 8009384:	a1c01836 	bltu	r20,r7,80093e8 <__sfvwrite_r+0x3cc>
 8009388:	90c00917 	ldw	r3,36(r18)
 800938c:	91400717 	ldw	r5,28(r18)
 8009390:	e009883a 	mov	r4,fp
 8009394:	b80d883a 	mov	r6,r23
 8009398:	183ee83a 	callr	r3
 800939c:	1021883a 	mov	r16,r2
 80093a0:	00bfb30e 	bge	zero,r2,8009270 <__sfvwrite_r+0x254>
 80093a4:	1023883a 	mov	r17,r2
 80093a8:	1027883a 	mov	r19,r2
 80093ac:	003f9b06 	br	800921c <__sfvwrite_r+0x200>
 80093b0:	b80b883a 	mov	r5,r23
 80093b4:	800d883a 	mov	r6,r16
 80093b8:	800a1540 	call	800a154 <memmove>
 80093bc:	90c00217 	ldw	r3,8(r18)
 80093c0:	90800017 	ldw	r2,0(r18)
 80093c4:	8023883a 	mov	r17,r16
 80093c8:	1c07c83a 	sub	r3,r3,r16
 80093cc:	1405883a 	add	r2,r2,r16
 80093d0:	90c00215 	stw	r3,8(r18)
 80093d4:	90800015 	stw	r2,0(r18)
 80093d8:	003fc406 	br	80092ec <__sfvwrite_r+0x2d0>
 80093dc:	a00d883a 	mov	r6,r20
 80093e0:	a021883a 	mov	r16,r20
 80093e4:	003f8106 	br	80091ec <__sfvwrite_r+0x1d0>
 80093e8:	b80b883a 	mov	r5,r23
 80093ec:	a00d883a 	mov	r6,r20
 80093f0:	800a1540 	call	800a154 <memmove>
 80093f4:	90c00217 	ldw	r3,8(r18)
 80093f8:	90800017 	ldw	r2,0(r18)
 80093fc:	a021883a 	mov	r16,r20
 8009400:	1d07c83a 	sub	r3,r3,r20
 8009404:	1505883a 	add	r2,r2,r20
 8009408:	a023883a 	mov	r17,r20
 800940c:	a027883a 	mov	r19,r20
 8009410:	90c00215 	stw	r3,8(r18)
 8009414:	90800015 	stw	r2,0(r18)
 8009418:	003f8006 	br	800921c <__sfvwrite_r+0x200>
 800941c:	b809883a 	mov	r4,r23
 8009420:	01400284 	movi	r5,10
 8009424:	980d883a 	mov	r6,r19
 8009428:	8009fd00 	call	8009fd0 <memchr>
 800942c:	10001726 	beq	r2,zero,800948c <__sfvwrite_r+0x470>
 8009430:	15c5c83a 	sub	r2,r2,r23
 8009434:	15000044 	addi	r20,r2,1
 8009438:	00800044 	movi	r2,1
 800943c:	d8800015 	stw	r2,0(sp)
 8009440:	003f9806 	br	80092a4 <__sfvwrite_r+0x288>
 8009444:	b80b883a 	mov	r5,r23
 8009448:	800d883a 	mov	r6,r16
 800944c:	800a1540 	call	800a154 <memmove>
 8009450:	90c00017 	ldw	r3,0(r18)
 8009454:	e009883a 	mov	r4,fp
 8009458:	900b883a 	mov	r5,r18
 800945c:	1c07883a 	add	r3,r3,r16
 8009460:	90c00015 	stw	r3,0(r18)
 8009464:	8027883a 	mov	r19,r16
 8009468:	80086ec0 	call	80086ec <_fflush_r>
 800946c:	103f6b26 	beq	r2,zero,800921c <__sfvwrite_r+0x200>
 8009470:	003f7f06 	br	8009270 <__sfvwrite_r+0x254>
 8009474:	400b883a 	mov	r5,r8
 8009478:	e009883a 	mov	r4,fp
 800947c:	800b2c00 	call	800b2c0 <_realloc_r>
 8009480:	103f7626 	beq	r2,zero,800925c <__sfvwrite_r+0x240>
 8009484:	1023883a 	mov	r17,r2
 8009488:	003f5006 	br	80091cc <__sfvwrite_r+0x1b0>
 800948c:	00c00044 	movi	r3,1
 8009490:	9d000044 	addi	r20,r19,1
 8009494:	d8c00015 	stw	r3,0(sp)
 8009498:	003f8206 	br	80092a4 <__sfvwrite_r+0x288>
 800949c:	9080030b 	ldhu	r2,12(r18)
 80094a0:	00c00244 	movi	r3,9
 80094a4:	013fffc4 	movi	r4,-1
 80094a8:	10801014 	ori	r2,r2,64
 80094ac:	9080030d 	sth	r2,12(r18)
 80094b0:	e0c00015 	stw	r3,0(fp)
 80094b4:	003f0606 	br	80090d0 <__sfvwrite_r+0xb4>

080094b8 <_fwalk_reent>:
 80094b8:	defff704 	addi	sp,sp,-36
 80094bc:	dcc00315 	stw	r19,12(sp)
 80094c0:	24c0b804 	addi	r19,r4,736
 80094c4:	dd800615 	stw	r22,24(sp)
 80094c8:	dd400515 	stw	r21,20(sp)
 80094cc:	dfc00815 	stw	ra,32(sp)
 80094d0:	ddc00715 	stw	r23,28(sp)
 80094d4:	dd000415 	stw	r20,16(sp)
 80094d8:	dc800215 	stw	r18,8(sp)
 80094dc:	dc400115 	stw	r17,4(sp)
 80094e0:	dc000015 	stw	r16,0(sp)
 80094e4:	202b883a 	mov	r21,r4
 80094e8:	282d883a 	mov	r22,r5
 80094ec:	80089740 	call	8008974 <__sfp_lock_acquire>
 80094f0:	98002126 	beq	r19,zero,8009578 <_fwalk_reent+0xc0>
 80094f4:	002f883a 	mov	r23,zero
 80094f8:	9c800117 	ldw	r18,4(r19)
 80094fc:	9c000217 	ldw	r16,8(r19)
 8009500:	90bfffc4 	addi	r2,r18,-1
 8009504:	10000d16 	blt	r2,zero,800953c <_fwalk_reent+0x84>
 8009508:	0023883a 	mov	r17,zero
 800950c:	053fffc4 	movi	r20,-1
 8009510:	8080030f 	ldh	r2,12(r16)
 8009514:	8c400044 	addi	r17,r17,1
 8009518:	10000626 	beq	r2,zero,8009534 <_fwalk_reent+0x7c>
 800951c:	8080038f 	ldh	r2,14(r16)
 8009520:	800b883a 	mov	r5,r16
 8009524:	a809883a 	mov	r4,r21
 8009528:	15000226 	beq	r2,r20,8009534 <_fwalk_reent+0x7c>
 800952c:	b03ee83a 	callr	r22
 8009530:	b8aeb03a 	or	r23,r23,r2
 8009534:	84001704 	addi	r16,r16,92
 8009538:	947ff51e 	bne	r18,r17,8009510 <_fwalk_reent+0x58>
 800953c:	9cc00017 	ldw	r19,0(r19)
 8009540:	983fed1e 	bne	r19,zero,80094f8 <_fwalk_reent+0x40>
 8009544:	80089780 	call	8008978 <__sfp_lock_release>
 8009548:	b805883a 	mov	r2,r23
 800954c:	dfc00817 	ldw	ra,32(sp)
 8009550:	ddc00717 	ldw	r23,28(sp)
 8009554:	dd800617 	ldw	r22,24(sp)
 8009558:	dd400517 	ldw	r21,20(sp)
 800955c:	dd000417 	ldw	r20,16(sp)
 8009560:	dcc00317 	ldw	r19,12(sp)
 8009564:	dc800217 	ldw	r18,8(sp)
 8009568:	dc400117 	ldw	r17,4(sp)
 800956c:	dc000017 	ldw	r16,0(sp)
 8009570:	dec00904 	addi	sp,sp,36
 8009574:	f800283a 	ret
 8009578:	002f883a 	mov	r23,zero
 800957c:	003ff106 	br	8009544 <_fwalk_reent+0x8c>

08009580 <_fwalk>:
 8009580:	defff804 	addi	sp,sp,-32
 8009584:	dcc00315 	stw	r19,12(sp)
 8009588:	24c0b804 	addi	r19,r4,736
 800958c:	dd400515 	stw	r21,20(sp)
 8009590:	dfc00715 	stw	ra,28(sp)
 8009594:	dd800615 	stw	r22,24(sp)
 8009598:	dd000415 	stw	r20,16(sp)
 800959c:	dc800215 	stw	r18,8(sp)
 80095a0:	dc400115 	stw	r17,4(sp)
 80095a4:	dc000015 	stw	r16,0(sp)
 80095a8:	282b883a 	mov	r21,r5
 80095ac:	80089740 	call	8008974 <__sfp_lock_acquire>
 80095b0:	98001f26 	beq	r19,zero,8009630 <_fwalk+0xb0>
 80095b4:	002d883a 	mov	r22,zero
 80095b8:	9c800117 	ldw	r18,4(r19)
 80095bc:	9c000217 	ldw	r16,8(r19)
 80095c0:	90bfffc4 	addi	r2,r18,-1
 80095c4:	10000c16 	blt	r2,zero,80095f8 <_fwalk+0x78>
 80095c8:	0023883a 	mov	r17,zero
 80095cc:	053fffc4 	movi	r20,-1
 80095d0:	8080030f 	ldh	r2,12(r16)
 80095d4:	8c400044 	addi	r17,r17,1
 80095d8:	10000526 	beq	r2,zero,80095f0 <_fwalk+0x70>
 80095dc:	8080038f 	ldh	r2,14(r16)
 80095e0:	8009883a 	mov	r4,r16
 80095e4:	15000226 	beq	r2,r20,80095f0 <_fwalk+0x70>
 80095e8:	a83ee83a 	callr	r21
 80095ec:	b0acb03a 	or	r22,r22,r2
 80095f0:	84001704 	addi	r16,r16,92
 80095f4:	947ff61e 	bne	r18,r17,80095d0 <_fwalk+0x50>
 80095f8:	9cc00017 	ldw	r19,0(r19)
 80095fc:	983fee1e 	bne	r19,zero,80095b8 <_fwalk+0x38>
 8009600:	80089780 	call	8008978 <__sfp_lock_release>
 8009604:	b005883a 	mov	r2,r22
 8009608:	dfc00717 	ldw	ra,28(sp)
 800960c:	dd800617 	ldw	r22,24(sp)
 8009610:	dd400517 	ldw	r21,20(sp)
 8009614:	dd000417 	ldw	r20,16(sp)
 8009618:	dcc00317 	ldw	r19,12(sp)
 800961c:	dc800217 	ldw	r18,8(sp)
 8009620:	dc400117 	ldw	r17,4(sp)
 8009624:	dc000017 	ldw	r16,0(sp)
 8009628:	dec00804 	addi	sp,sp,32
 800962c:	f800283a 	ret
 8009630:	002d883a 	mov	r22,zero
 8009634:	003ff206 	br	8009600 <_fwalk+0x80>

08009638 <__locale_charset>:
 8009638:	d0a00717 	ldw	r2,-32740(gp)
 800963c:	f800283a 	ret

08009640 <_localeconv_r>:
 8009640:	00820074 	movhi	r2,2049
 8009644:	1086cc04 	addi	r2,r2,6960
 8009648:	f800283a 	ret

0800964c <localeconv>:
 800964c:	00820074 	movhi	r2,2049
 8009650:	108e5204 	addi	r2,r2,14664
 8009654:	11000017 	ldw	r4,0(r2)
 8009658:	80096401 	jmpi	8009640 <_localeconv_r>

0800965c <_setlocale_r>:
 800965c:	defffc04 	addi	sp,sp,-16
 8009660:	00c20074 	movhi	r3,2049
 8009664:	18c6a204 	addi	r3,r3,6792
 8009668:	dc800215 	stw	r18,8(sp)
 800966c:	dc400115 	stw	r17,4(sp)
 8009670:	dc000015 	stw	r16,0(sp)
 8009674:	2023883a 	mov	r17,r4
 8009678:	2825883a 	mov	r18,r5
 800967c:	dfc00315 	stw	ra,12(sp)
 8009680:	3021883a 	mov	r16,r6
 8009684:	3009883a 	mov	r4,r6
 8009688:	180b883a 	mov	r5,r3
 800968c:	30000926 	beq	r6,zero,80096b4 <_setlocale_r+0x58>
 8009690:	800bab00 	call	800bab0 <strcmp>
 8009694:	8009883a 	mov	r4,r16
 8009698:	01420074 	movhi	r5,2049
 800969c:	2946b304 	addi	r5,r5,6860
 80096a0:	10000b1e 	bne	r2,zero,80096d0 <_setlocale_r+0x74>
 80096a4:	8c000d15 	stw	r16,52(r17)
 80096a8:	8c800c15 	stw	r18,48(r17)
 80096ac:	00c20074 	movhi	r3,2049
 80096b0:	18c6a204 	addi	r3,r3,6792
 80096b4:	1805883a 	mov	r2,r3
 80096b8:	dfc00317 	ldw	ra,12(sp)
 80096bc:	dc800217 	ldw	r18,8(sp)
 80096c0:	dc400117 	ldw	r17,4(sp)
 80096c4:	dc000017 	ldw	r16,0(sp)
 80096c8:	dec00404 	addi	sp,sp,16
 80096cc:	f800283a 	ret
 80096d0:	800bab00 	call	800bab0 <strcmp>
 80096d4:	0007883a 	mov	r3,zero
 80096d8:	103ff226 	beq	r2,zero,80096a4 <_setlocale_r+0x48>
 80096dc:	003ff506 	br	80096b4 <_setlocale_r+0x58>

080096e0 <setlocale>:
 80096e0:	01820074 	movhi	r6,2049
 80096e4:	318e5204 	addi	r6,r6,14664
 80096e8:	2007883a 	mov	r3,r4
 80096ec:	31000017 	ldw	r4,0(r6)
 80096f0:	280d883a 	mov	r6,r5
 80096f4:	180b883a 	mov	r5,r3
 80096f8:	800965c1 	jmpi	800965c <_setlocale_r>

080096fc <__smakebuf_r>:
 80096fc:	2880030b 	ldhu	r2,12(r5)
 8009700:	deffed04 	addi	sp,sp,-76
 8009704:	dc401015 	stw	r17,64(sp)
 8009708:	1080008c 	andi	r2,r2,2
 800970c:	dc000f15 	stw	r16,60(sp)
 8009710:	dfc01215 	stw	ra,72(sp)
 8009714:	dc801115 	stw	r18,68(sp)
 8009718:	2821883a 	mov	r16,r5
 800971c:	2023883a 	mov	r17,r4
 8009720:	10000b26 	beq	r2,zero,8009750 <__smakebuf_r+0x54>
 8009724:	28c010c4 	addi	r3,r5,67
 8009728:	00800044 	movi	r2,1
 800972c:	28800515 	stw	r2,20(r5)
 8009730:	28c00415 	stw	r3,16(r5)
 8009734:	28c00015 	stw	r3,0(r5)
 8009738:	dfc01217 	ldw	ra,72(sp)
 800973c:	dc801117 	ldw	r18,68(sp)
 8009740:	dc401017 	ldw	r17,64(sp)
 8009744:	dc000f17 	ldw	r16,60(sp)
 8009748:	dec01304 	addi	sp,sp,76
 800974c:	f800283a 	ret
 8009750:	2940038f 	ldh	r5,14(r5)
 8009754:	28002116 	blt	r5,zero,80097dc <__smakebuf_r+0xe0>
 8009758:	d80d883a 	mov	r6,sp
 800975c:	800be2c0 	call	800be2c <_fstat_r>
 8009760:	10001e16 	blt	r2,zero,80097dc <__smakebuf_r+0xe0>
 8009764:	d8800117 	ldw	r2,4(sp)
 8009768:	00e00014 	movui	r3,32768
 800976c:	113c000c 	andi	r4,r2,61440
 8009770:	20c03126 	beq	r4,r3,8009838 <__smakebuf_r+0x13c>
 8009774:	8080030b 	ldhu	r2,12(r16)
 8009778:	00c80004 	movi	r3,8192
 800977c:	10820014 	ori	r2,r2,2048
 8009780:	8080030d 	sth	r2,12(r16)
 8009784:	20c01e26 	beq	r4,r3,8009800 <__smakebuf_r+0x104>
 8009788:	04810004 	movi	r18,1024
 800978c:	8809883a 	mov	r4,r17
 8009790:	900b883a 	mov	r5,r18
 8009794:	80098900 	call	8009890 <_malloc_r>
 8009798:	1009883a 	mov	r4,r2
 800979c:	10003126 	beq	r2,zero,8009864 <__smakebuf_r+0x168>
 80097a0:	80c0030b 	ldhu	r3,12(r16)
 80097a4:	00820074 	movhi	r2,2049
 80097a8:	10a29a04 	addi	r2,r2,-30104
 80097ac:	88800f15 	stw	r2,60(r17)
 80097b0:	18c02014 	ori	r3,r3,128
 80097b4:	84800515 	stw	r18,20(r16)
 80097b8:	80c0030d 	sth	r3,12(r16)
 80097bc:	81000415 	stw	r4,16(r16)
 80097c0:	81000015 	stw	r4,0(r16)
 80097c4:	dfc01217 	ldw	ra,72(sp)
 80097c8:	dc801117 	ldw	r18,68(sp)
 80097cc:	dc401017 	ldw	r17,64(sp)
 80097d0:	dc000f17 	ldw	r16,60(sp)
 80097d4:	dec01304 	addi	sp,sp,76
 80097d8:	f800283a 	ret
 80097dc:	80c0030b 	ldhu	r3,12(r16)
 80097e0:	1880200c 	andi	r2,r3,128
 80097e4:	10000426 	beq	r2,zero,80097f8 <__smakebuf_r+0xfc>
 80097e8:	04801004 	movi	r18,64
 80097ec:	18820014 	ori	r2,r3,2048
 80097f0:	8080030d 	sth	r2,12(r16)
 80097f4:	003fe506 	br	800978c <__smakebuf_r+0x90>
 80097f8:	04810004 	movi	r18,1024
 80097fc:	003ffb06 	br	80097ec <__smakebuf_r+0xf0>
 8009800:	8140038f 	ldh	r5,14(r16)
 8009804:	8809883a 	mov	r4,r17
 8009808:	800bea00 	call	800bea0 <_isatty_r>
 800980c:	103fde26 	beq	r2,zero,8009788 <__smakebuf_r+0x8c>
 8009810:	8080030b 	ldhu	r2,12(r16)
 8009814:	80c010c4 	addi	r3,r16,67
 8009818:	04810004 	movi	r18,1024
 800981c:	10800054 	ori	r2,r2,1
 8009820:	8080030d 	sth	r2,12(r16)
 8009824:	00800044 	movi	r2,1
 8009828:	80c00415 	stw	r3,16(r16)
 800982c:	80800515 	stw	r2,20(r16)
 8009830:	80c00015 	stw	r3,0(r16)
 8009834:	003fd506 	br	800978c <__smakebuf_r+0x90>
 8009838:	80c00a17 	ldw	r3,40(r16)
 800983c:	00820074 	movhi	r2,2049
 8009840:	10ae5b04 	addi	r2,r2,-18068
 8009844:	18bfcb1e 	bne	r3,r2,8009774 <__smakebuf_r+0x78>
 8009848:	8080030b 	ldhu	r2,12(r16)
 800984c:	00c10004 	movi	r3,1024
 8009850:	1825883a 	mov	r18,r3
 8009854:	10c4b03a 	or	r2,r2,r3
 8009858:	8080030d 	sth	r2,12(r16)
 800985c:	80c01315 	stw	r3,76(r16)
 8009860:	003fca06 	br	800978c <__smakebuf_r+0x90>
 8009864:	8100030b 	ldhu	r4,12(r16)
 8009868:	2080800c 	andi	r2,r4,512
 800986c:	103fb21e 	bne	r2,zero,8009738 <__smakebuf_r+0x3c>
 8009870:	80c010c4 	addi	r3,r16,67
 8009874:	21000094 	ori	r4,r4,2
 8009878:	00800044 	movi	r2,1
 800987c:	80800515 	stw	r2,20(r16)
 8009880:	8100030d 	sth	r4,12(r16)
 8009884:	80c00415 	stw	r3,16(r16)
 8009888:	80c00015 	stw	r3,0(r16)
 800988c:	003faa06 	br	8009738 <__smakebuf_r+0x3c>

08009890 <_malloc_r>:
 8009890:	defff604 	addi	sp,sp,-40
 8009894:	28c002c4 	addi	r3,r5,11
 8009898:	00800584 	movi	r2,22
 800989c:	dc800215 	stw	r18,8(sp)
 80098a0:	dfc00915 	stw	ra,36(sp)
 80098a4:	df000815 	stw	fp,32(sp)
 80098a8:	ddc00715 	stw	r23,28(sp)
 80098ac:	dd800615 	stw	r22,24(sp)
 80098b0:	dd400515 	stw	r21,20(sp)
 80098b4:	dd000415 	stw	r20,16(sp)
 80098b8:	dcc00315 	stw	r19,12(sp)
 80098bc:	dc400115 	stw	r17,4(sp)
 80098c0:	dc000015 	stw	r16,0(sp)
 80098c4:	2025883a 	mov	r18,r4
 80098c8:	10c01236 	bltu	r2,r3,8009914 <_malloc_r+0x84>
 80098cc:	04400404 	movi	r17,16
 80098d0:	8940142e 	bgeu	r17,r5,8009924 <_malloc_r+0x94>
 80098d4:	00800304 	movi	r2,12
 80098d8:	0007883a 	mov	r3,zero
 80098dc:	90800015 	stw	r2,0(r18)
 80098e0:	1805883a 	mov	r2,r3
 80098e4:	dfc00917 	ldw	ra,36(sp)
 80098e8:	df000817 	ldw	fp,32(sp)
 80098ec:	ddc00717 	ldw	r23,28(sp)
 80098f0:	dd800617 	ldw	r22,24(sp)
 80098f4:	dd400517 	ldw	r21,20(sp)
 80098f8:	dd000417 	ldw	r20,16(sp)
 80098fc:	dcc00317 	ldw	r19,12(sp)
 8009900:	dc800217 	ldw	r18,8(sp)
 8009904:	dc400117 	ldw	r17,4(sp)
 8009908:	dc000017 	ldw	r16,0(sp)
 800990c:	dec00a04 	addi	sp,sp,40
 8009910:	f800283a 	ret
 8009914:	00bffe04 	movi	r2,-8
 8009918:	18a2703a 	and	r17,r3,r2
 800991c:	883fed16 	blt	r17,zero,80098d4 <_malloc_r+0x44>
 8009920:	897fec36 	bltu	r17,r5,80098d4 <_malloc_r+0x44>
 8009924:	9009883a 	mov	r4,r18
 8009928:	800d5040 	call	800d504 <__malloc_lock>
 800992c:	00807dc4 	movi	r2,503
 8009930:	14402b2e 	bgeu	r2,r17,80099e0 <_malloc_r+0x150>
 8009934:	8806d27a 	srli	r3,r17,9
 8009938:	18003f1e 	bne	r3,zero,8009a38 <_malloc_r+0x1a8>
 800993c:	880cd0fa 	srli	r6,r17,3
 8009940:	300490fa 	slli	r2,r6,3
 8009944:	02c20074 	movhi	r11,2049
 8009948:	5ac87904 	addi	r11,r11,8676
 800994c:	12cb883a 	add	r5,r2,r11
 8009950:	2c000317 	ldw	r16,12(r5)
 8009954:	580f883a 	mov	r7,r11
 8009958:	2c00041e 	bne	r5,r16,800996c <_malloc_r+0xdc>
 800995c:	00000a06 	br	8009988 <_malloc_r+0xf8>
 8009960:	1800860e 	bge	r3,zero,8009b7c <_malloc_r+0x2ec>
 8009964:	84000317 	ldw	r16,12(r16)
 8009968:	2c000726 	beq	r5,r16,8009988 <_malloc_r+0xf8>
 800996c:	80800117 	ldw	r2,4(r16)
 8009970:	00ffff04 	movi	r3,-4
 8009974:	10c8703a 	and	r4,r2,r3
 8009978:	2447c83a 	sub	r3,r4,r17
 800997c:	008003c4 	movi	r2,15
 8009980:	10fff70e 	bge	r2,r3,8009960 <_malloc_r+0xd0>
 8009984:	31bfffc4 	addi	r6,r6,-1
 8009988:	32400044 	addi	r9,r6,1
 800998c:	02820074 	movhi	r10,2049
 8009990:	52887b04 	addi	r10,r10,8684
 8009994:	54000217 	ldw	r16,8(r10)
 8009998:	8280a026 	beq	r16,r10,8009c1c <_malloc_r+0x38c>
 800999c:	80800117 	ldw	r2,4(r16)
 80099a0:	00ffff04 	movi	r3,-4
 80099a4:	10ca703a 	and	r5,r2,r3
 80099a8:	2c4dc83a 	sub	r6,r5,r17
 80099ac:	008003c4 	movi	r2,15
 80099b0:	11808316 	blt	r2,r6,8009bc0 <_malloc_r+0x330>
 80099b4:	52800315 	stw	r10,12(r10)
 80099b8:	52800215 	stw	r10,8(r10)
 80099bc:	30002916 	blt	r6,zero,8009a64 <_malloc_r+0x1d4>
 80099c0:	8147883a 	add	r3,r16,r5
 80099c4:	18800117 	ldw	r2,4(r3)
 80099c8:	9009883a 	mov	r4,r18
 80099cc:	10800054 	ori	r2,r2,1
 80099d0:	18800115 	stw	r2,4(r3)
 80099d4:	800d5240 	call	800d524 <__malloc_unlock>
 80099d8:	80c00204 	addi	r3,r16,8
 80099dc:	003fc006 	br	80098e0 <_malloc_r+0x50>
 80099e0:	02c20074 	movhi	r11,2049
 80099e4:	5ac87904 	addi	r11,r11,8676
 80099e8:	8ac5883a 	add	r2,r17,r11
 80099ec:	14000317 	ldw	r16,12(r2)
 80099f0:	580f883a 	mov	r7,r11
 80099f4:	8806d0fa 	srli	r3,r17,3
 80099f8:	14006c26 	beq	r2,r16,8009bac <_malloc_r+0x31c>
 80099fc:	80c00117 	ldw	r3,4(r16)
 8009a00:	00bfff04 	movi	r2,-4
 8009a04:	81800317 	ldw	r6,12(r16)
 8009a08:	1886703a 	and	r3,r3,r2
 8009a0c:	80c7883a 	add	r3,r16,r3
 8009a10:	18800117 	ldw	r2,4(r3)
 8009a14:	81400217 	ldw	r5,8(r16)
 8009a18:	9009883a 	mov	r4,r18
 8009a1c:	10800054 	ori	r2,r2,1
 8009a20:	18800115 	stw	r2,4(r3)
 8009a24:	31400215 	stw	r5,8(r6)
 8009a28:	29800315 	stw	r6,12(r5)
 8009a2c:	800d5240 	call	800d524 <__malloc_unlock>
 8009a30:	80c00204 	addi	r3,r16,8
 8009a34:	003faa06 	br	80098e0 <_malloc_r+0x50>
 8009a38:	00800104 	movi	r2,4
 8009a3c:	10c0052e 	bgeu	r2,r3,8009a54 <_malloc_r+0x1c4>
 8009a40:	00800504 	movi	r2,20
 8009a44:	10c07836 	bltu	r2,r3,8009c28 <_malloc_r+0x398>
 8009a48:	198016c4 	addi	r6,r3,91
 8009a4c:	300490fa 	slli	r2,r6,3
 8009a50:	003fbc06 	br	8009944 <_malloc_r+0xb4>
 8009a54:	8804d1ba 	srli	r2,r17,6
 8009a58:	11800e04 	addi	r6,r2,56
 8009a5c:	300490fa 	slli	r2,r6,3
 8009a60:	003fb806 	br	8009944 <_malloc_r+0xb4>
 8009a64:	00807fc4 	movi	r2,511
 8009a68:	1140bb36 	bltu	r2,r5,8009d58 <_malloc_r+0x4c8>
 8009a6c:	2806d0fa 	srli	r3,r5,3
 8009a70:	573ffe04 	addi	fp,r10,-8
 8009a74:	00800044 	movi	r2,1
 8009a78:	180890fa 	slli	r4,r3,3
 8009a7c:	1807d0ba 	srai	r3,r3,2
 8009a80:	e1c00117 	ldw	r7,4(fp)
 8009a84:	5909883a 	add	r4,r11,r4
 8009a88:	21400217 	ldw	r5,8(r4)
 8009a8c:	10c4983a 	sll	r2,r2,r3
 8009a90:	81000315 	stw	r4,12(r16)
 8009a94:	81400215 	stw	r5,8(r16)
 8009a98:	388eb03a 	or	r7,r7,r2
 8009a9c:	2c000315 	stw	r16,12(r5)
 8009aa0:	24000215 	stw	r16,8(r4)
 8009aa4:	e1c00115 	stw	r7,4(fp)
 8009aa8:	4807883a 	mov	r3,r9
 8009aac:	4800cd16 	blt	r9,zero,8009de4 <_malloc_r+0x554>
 8009ab0:	1807d0ba 	srai	r3,r3,2
 8009ab4:	00800044 	movi	r2,1
 8009ab8:	10c8983a 	sll	r4,r2,r3
 8009abc:	39004436 	bltu	r7,r4,8009bd0 <_malloc_r+0x340>
 8009ac0:	21c4703a 	and	r2,r4,r7
 8009ac4:	10000a1e 	bne	r2,zero,8009af0 <_malloc_r+0x260>
 8009ac8:	2109883a 	add	r4,r4,r4
 8009acc:	00bfff04 	movi	r2,-4
 8009ad0:	4884703a 	and	r2,r9,r2
 8009ad4:	3906703a 	and	r3,r7,r4
 8009ad8:	12400104 	addi	r9,r2,4
 8009adc:	1800041e 	bne	r3,zero,8009af0 <_malloc_r+0x260>
 8009ae0:	2109883a 	add	r4,r4,r4
 8009ae4:	3904703a 	and	r2,r7,r4
 8009ae8:	4a400104 	addi	r9,r9,4
 8009aec:	103ffc26 	beq	r2,zero,8009ae0 <_malloc_r+0x250>
 8009af0:	480490fa 	slli	r2,r9,3
 8009af4:	4819883a 	mov	r12,r9
 8009af8:	023fff04 	movi	r8,-4
 8009afc:	589b883a 	add	r13,r11,r2
 8009b00:	6807883a 	mov	r3,r13
 8009b04:	014003c4 	movi	r5,15
 8009b08:	1c000317 	ldw	r16,12(r3)
 8009b0c:	1c00041e 	bne	r3,r16,8009b20 <_malloc_r+0x290>
 8009b10:	0000a706 	br	8009db0 <_malloc_r+0x520>
 8009b14:	3000ab0e 	bge	r6,zero,8009dc4 <_malloc_r+0x534>
 8009b18:	84000317 	ldw	r16,12(r16)
 8009b1c:	1c00a426 	beq	r3,r16,8009db0 <_malloc_r+0x520>
 8009b20:	80800117 	ldw	r2,4(r16)
 8009b24:	1204703a 	and	r2,r2,r8
 8009b28:	144dc83a 	sub	r6,r2,r17
 8009b2c:	29bff90e 	bge	r5,r6,8009b14 <_malloc_r+0x284>
 8009b30:	81000317 	ldw	r4,12(r16)
 8009b34:	80c00217 	ldw	r3,8(r16)
 8009b38:	89400054 	ori	r5,r17,1
 8009b3c:	8445883a 	add	r2,r16,r17
 8009b40:	20c00215 	stw	r3,8(r4)
 8009b44:	19000315 	stw	r4,12(r3)
 8009b48:	81400115 	stw	r5,4(r16)
 8009b4c:	1187883a 	add	r3,r2,r6
 8009b50:	31000054 	ori	r4,r6,1
 8009b54:	50800315 	stw	r2,12(r10)
 8009b58:	50800215 	stw	r2,8(r10)
 8009b5c:	19800015 	stw	r6,0(r3)
 8009b60:	11000115 	stw	r4,4(r2)
 8009b64:	12800215 	stw	r10,8(r2)
 8009b68:	12800315 	stw	r10,12(r2)
 8009b6c:	9009883a 	mov	r4,r18
 8009b70:	800d5240 	call	800d524 <__malloc_unlock>
 8009b74:	80c00204 	addi	r3,r16,8
 8009b78:	003f5906 	br	80098e0 <_malloc_r+0x50>
 8009b7c:	8109883a 	add	r4,r16,r4
 8009b80:	20800117 	ldw	r2,4(r4)
 8009b84:	80c00217 	ldw	r3,8(r16)
 8009b88:	81400317 	ldw	r5,12(r16)
 8009b8c:	10800054 	ori	r2,r2,1
 8009b90:	20800115 	stw	r2,4(r4)
 8009b94:	28c00215 	stw	r3,8(r5)
 8009b98:	19400315 	stw	r5,12(r3)
 8009b9c:	9009883a 	mov	r4,r18
 8009ba0:	800d5240 	call	800d524 <__malloc_unlock>
 8009ba4:	80c00204 	addi	r3,r16,8
 8009ba8:	003f4d06 	br	80098e0 <_malloc_r+0x50>
 8009bac:	80800204 	addi	r2,r16,8
 8009bb0:	14000317 	ldw	r16,12(r2)
 8009bb4:	143f911e 	bne	r2,r16,80099fc <_malloc_r+0x16c>
 8009bb8:	1a400084 	addi	r9,r3,2
 8009bbc:	003f7306 	br	800998c <_malloc_r+0xfc>
 8009bc0:	88c00054 	ori	r3,r17,1
 8009bc4:	8445883a 	add	r2,r16,r17
 8009bc8:	80c00115 	stw	r3,4(r16)
 8009bcc:	003fdf06 	br	8009b4c <_malloc_r+0x2bc>
 8009bd0:	e4000217 	ldw	r16,8(fp)
 8009bd4:	00bfff04 	movi	r2,-4
 8009bd8:	80c00117 	ldw	r3,4(r16)
 8009bdc:	802d883a 	mov	r22,r16
 8009be0:	18aa703a 	and	r21,r3,r2
 8009be4:	ac401636 	bltu	r21,r17,8009c40 <_malloc_r+0x3b0>
 8009be8:	ac49c83a 	sub	r4,r21,r17
 8009bec:	008003c4 	movi	r2,15
 8009bf0:	1100130e 	bge	r2,r4,8009c40 <_malloc_r+0x3b0>
 8009bf4:	88800054 	ori	r2,r17,1
 8009bf8:	8447883a 	add	r3,r16,r17
 8009bfc:	80800115 	stw	r2,4(r16)
 8009c00:	20800054 	ori	r2,r4,1
 8009c04:	18800115 	stw	r2,4(r3)
 8009c08:	e0c00215 	stw	r3,8(fp)
 8009c0c:	9009883a 	mov	r4,r18
 8009c10:	800d5240 	call	800d524 <__malloc_unlock>
 8009c14:	80c00204 	addi	r3,r16,8
 8009c18:	003f3106 	br	80098e0 <_malloc_r+0x50>
 8009c1c:	39c00117 	ldw	r7,4(r7)
 8009c20:	573ffe04 	addi	fp,r10,-8
 8009c24:	003fa006 	br	8009aa8 <_malloc_r+0x218>
 8009c28:	00801504 	movi	r2,84
 8009c2c:	10c06736 	bltu	r2,r3,8009dcc <_malloc_r+0x53c>
 8009c30:	8804d33a 	srli	r2,r17,12
 8009c34:	11801b84 	addi	r6,r2,110
 8009c38:	300490fa 	slli	r2,r6,3
 8009c3c:	003f4106 	br	8009944 <_malloc_r+0xb4>
 8009c40:	d0a71317 	ldw	r2,-25524(gp)
 8009c44:	d0e00917 	ldw	r3,-32732(gp)
 8009c48:	053fffc4 	movi	r20,-1
 8009c4c:	10800404 	addi	r2,r2,16
 8009c50:	88a7883a 	add	r19,r17,r2
 8009c54:	1d000326 	beq	r3,r20,8009c64 <_malloc_r+0x3d4>
 8009c58:	98c3ffc4 	addi	r3,r19,4095
 8009c5c:	00bc0004 	movi	r2,-4096
 8009c60:	18a6703a 	and	r19,r3,r2
 8009c64:	9009883a 	mov	r4,r18
 8009c68:	980b883a 	mov	r5,r19
 8009c6c:	800b8f40 	call	800b8f4 <_sbrk_r>
 8009c70:	1009883a 	mov	r4,r2
 8009c74:	15000426 	beq	r2,r20,8009c88 <_malloc_r+0x3f8>
 8009c78:	854b883a 	add	r5,r16,r21
 8009c7c:	1029883a 	mov	r20,r2
 8009c80:	11405a2e 	bgeu	r2,r5,8009dec <_malloc_r+0x55c>
 8009c84:	87000c26 	beq	r16,fp,8009cb8 <_malloc_r+0x428>
 8009c88:	e4000217 	ldw	r16,8(fp)
 8009c8c:	80c00117 	ldw	r3,4(r16)
 8009c90:	00bfff04 	movi	r2,-4
 8009c94:	1884703a 	and	r2,r3,r2
 8009c98:	14400336 	bltu	r2,r17,8009ca8 <_malloc_r+0x418>
 8009c9c:	1449c83a 	sub	r4,r2,r17
 8009ca0:	008003c4 	movi	r2,15
 8009ca4:	113fd316 	blt	r2,r4,8009bf4 <_malloc_r+0x364>
 8009ca8:	9009883a 	mov	r4,r18
 8009cac:	800d5240 	call	800d524 <__malloc_unlock>
 8009cb0:	0007883a 	mov	r3,zero
 8009cb4:	003f0a06 	br	80098e0 <_malloc_r+0x50>
 8009cb8:	05c20074 	movhi	r23,2049
 8009cbc:	bdd56b04 	addi	r23,r23,21932
 8009cc0:	b8800017 	ldw	r2,0(r23)
 8009cc4:	988d883a 	add	r6,r19,r2
 8009cc8:	b9800015 	stw	r6,0(r23)
 8009ccc:	d0e00917 	ldw	r3,-32732(gp)
 8009cd0:	00bfffc4 	movi	r2,-1
 8009cd4:	18808e26 	beq	r3,r2,8009f10 <_malloc_r+0x680>
 8009cd8:	2145c83a 	sub	r2,r4,r5
 8009cdc:	3085883a 	add	r2,r6,r2
 8009ce0:	b8800015 	stw	r2,0(r23)
 8009ce4:	20c001cc 	andi	r3,r4,7
 8009ce8:	18005f1e 	bne	r3,zero,8009e68 <_malloc_r+0x5d8>
 8009cec:	000b883a 	mov	r5,zero
 8009cf0:	a4c5883a 	add	r2,r20,r19
 8009cf4:	1083ffcc 	andi	r2,r2,4095
 8009cf8:	00c40004 	movi	r3,4096
 8009cfc:	1887c83a 	sub	r3,r3,r2
 8009d00:	28e7883a 	add	r19,r5,r3
 8009d04:	9009883a 	mov	r4,r18
 8009d08:	980b883a 	mov	r5,r19
 8009d0c:	800b8f40 	call	800b8f4 <_sbrk_r>
 8009d10:	1007883a 	mov	r3,r2
 8009d14:	00bfffc4 	movi	r2,-1
 8009d18:	18807a26 	beq	r3,r2,8009f04 <_malloc_r+0x674>
 8009d1c:	1d05c83a 	sub	r2,r3,r20
 8009d20:	9885883a 	add	r2,r19,r2
 8009d24:	10c00054 	ori	r3,r2,1
 8009d28:	b8800017 	ldw	r2,0(r23)
 8009d2c:	a021883a 	mov	r16,r20
 8009d30:	a0c00115 	stw	r3,4(r20)
 8009d34:	9885883a 	add	r2,r19,r2
 8009d38:	b8800015 	stw	r2,0(r23)
 8009d3c:	e5000215 	stw	r20,8(fp)
 8009d40:	b7003626 	beq	r22,fp,8009e1c <_malloc_r+0x58c>
 8009d44:	018003c4 	movi	r6,15
 8009d48:	35404b36 	bltu	r6,r21,8009e78 <_malloc_r+0x5e8>
 8009d4c:	00800044 	movi	r2,1
 8009d50:	a0800115 	stw	r2,4(r20)
 8009d54:	003fcd06 	br	8009c8c <_malloc_r+0x3fc>
 8009d58:	2808d27a 	srli	r4,r5,9
 8009d5c:	2000371e 	bne	r4,zero,8009e3c <_malloc_r+0x5ac>
 8009d60:	2808d0fa 	srli	r4,r5,3
 8009d64:	200690fa 	slli	r3,r4,3
 8009d68:	1ad1883a 	add	r8,r3,r11
 8009d6c:	41800217 	ldw	r6,8(r8)
 8009d70:	41805b26 	beq	r8,r6,8009ee0 <_malloc_r+0x650>
 8009d74:	30800117 	ldw	r2,4(r6)
 8009d78:	00ffff04 	movi	r3,-4
 8009d7c:	10c4703a 	and	r2,r2,r3
 8009d80:	2880022e 	bgeu	r5,r2,8009d8c <_malloc_r+0x4fc>
 8009d84:	31800217 	ldw	r6,8(r6)
 8009d88:	41bffa1e 	bne	r8,r6,8009d74 <_malloc_r+0x4e4>
 8009d8c:	32000317 	ldw	r8,12(r6)
 8009d90:	39c00117 	ldw	r7,4(r7)
 8009d94:	82000315 	stw	r8,12(r16)
 8009d98:	81800215 	stw	r6,8(r16)
 8009d9c:	07020074 	movhi	fp,2049
 8009da0:	e7087904 	addi	fp,fp,8676
 8009da4:	34000315 	stw	r16,12(r6)
 8009da8:	44000215 	stw	r16,8(r8)
 8009dac:	003f3e06 	br	8009aa8 <_malloc_r+0x218>
 8009db0:	63000044 	addi	r12,r12,1
 8009db4:	608000cc 	andi	r2,r12,3
 8009db8:	10005d26 	beq	r2,zero,8009f30 <_malloc_r+0x6a0>
 8009dbc:	18c00204 	addi	r3,r3,8
 8009dc0:	003f5106 	br	8009b08 <_malloc_r+0x278>
 8009dc4:	8089883a 	add	r4,r16,r2
 8009dc8:	003f6d06 	br	8009b80 <_malloc_r+0x2f0>
 8009dcc:	00805504 	movi	r2,340
 8009dd0:	10c02036 	bltu	r2,r3,8009e54 <_malloc_r+0x5c4>
 8009dd4:	8804d3fa 	srli	r2,r17,15
 8009dd8:	11801dc4 	addi	r6,r2,119
 8009ddc:	300490fa 	slli	r2,r6,3
 8009de0:	003ed806 	br	8009944 <_malloc_r+0xb4>
 8009de4:	48c000c4 	addi	r3,r9,3
 8009de8:	003f3106 	br	8009ab0 <_malloc_r+0x220>
 8009dec:	05c20074 	movhi	r23,2049
 8009df0:	bdd56b04 	addi	r23,r23,21932
 8009df4:	b8800017 	ldw	r2,0(r23)
 8009df8:	988d883a 	add	r6,r19,r2
 8009dfc:	b9800015 	stw	r6,0(r23)
 8009e00:	293fb21e 	bne	r5,r4,8009ccc <_malloc_r+0x43c>
 8009e04:	2083ffcc 	andi	r2,r4,4095
 8009e08:	103fb01e 	bne	r2,zero,8009ccc <_malloc_r+0x43c>
 8009e0c:	e4000217 	ldw	r16,8(fp)
 8009e10:	9d45883a 	add	r2,r19,r21
 8009e14:	10800054 	ori	r2,r2,1
 8009e18:	80800115 	stw	r2,4(r16)
 8009e1c:	b8c00017 	ldw	r3,0(r23)
 8009e20:	d0a71417 	ldw	r2,-25520(gp)
 8009e24:	10c0012e 	bgeu	r2,r3,8009e2c <_malloc_r+0x59c>
 8009e28:	d0e71415 	stw	r3,-25520(gp)
 8009e2c:	d0a71517 	ldw	r2,-25516(gp)
 8009e30:	10ff962e 	bgeu	r2,r3,8009c8c <_malloc_r+0x3fc>
 8009e34:	d0e71515 	stw	r3,-25516(gp)
 8009e38:	003f9406 	br	8009c8c <_malloc_r+0x3fc>
 8009e3c:	00800104 	movi	r2,4
 8009e40:	11001e36 	bltu	r2,r4,8009ebc <_malloc_r+0x62c>
 8009e44:	2804d1ba 	srli	r2,r5,6
 8009e48:	11000e04 	addi	r4,r2,56
 8009e4c:	200690fa 	slli	r3,r4,3
 8009e50:	003fc506 	br	8009d68 <_malloc_r+0x4d8>
 8009e54:	00815504 	movi	r2,1364
 8009e58:	10c01d2e 	bgeu	r2,r3,8009ed0 <_malloc_r+0x640>
 8009e5c:	01801f84 	movi	r6,126
 8009e60:	0080fc04 	movi	r2,1008
 8009e64:	003eb706 	br	8009944 <_malloc_r+0xb4>
 8009e68:	00800204 	movi	r2,8
 8009e6c:	10cbc83a 	sub	r5,r2,r3
 8009e70:	2169883a 	add	r20,r4,r5
 8009e74:	003f9e06 	br	8009cf0 <_malloc_r+0x460>
 8009e78:	00bffe04 	movi	r2,-8
 8009e7c:	a93ffd04 	addi	r4,r21,-12
 8009e80:	2088703a 	and	r4,r4,r2
 8009e84:	b10b883a 	add	r5,r22,r4
 8009e88:	00c00144 	movi	r3,5
 8009e8c:	28c00215 	stw	r3,8(r5)
 8009e90:	28c00115 	stw	r3,4(r5)
 8009e94:	b0800117 	ldw	r2,4(r22)
 8009e98:	1080004c 	andi	r2,r2,1
 8009e9c:	2084b03a 	or	r2,r4,r2
 8009ea0:	b0800115 	stw	r2,4(r22)
 8009ea4:	313fdd2e 	bgeu	r6,r4,8009e1c <_malloc_r+0x58c>
 8009ea8:	b1400204 	addi	r5,r22,8
 8009eac:	9009883a 	mov	r4,r18
 8009eb0:	8008d080 	call	8008d08 <_free_r>
 8009eb4:	e4000217 	ldw	r16,8(fp)
 8009eb8:	003fd806 	br	8009e1c <_malloc_r+0x58c>
 8009ebc:	00800504 	movi	r2,20
 8009ec0:	11001536 	bltu	r2,r4,8009f18 <_malloc_r+0x688>
 8009ec4:	210016c4 	addi	r4,r4,91
 8009ec8:	200690fa 	slli	r3,r4,3
 8009ecc:	003fa606 	br	8009d68 <_malloc_r+0x4d8>
 8009ed0:	8804d4ba 	srli	r2,r17,18
 8009ed4:	11801f04 	addi	r6,r2,124
 8009ed8:	300490fa 	slli	r2,r6,3
 8009edc:	003e9906 	br	8009944 <_malloc_r+0xb4>
 8009ee0:	2009d0ba 	srai	r4,r4,2
 8009ee4:	01420074 	movhi	r5,2049
 8009ee8:	29487904 	addi	r5,r5,8676
 8009eec:	00c00044 	movi	r3,1
 8009ef0:	28800117 	ldw	r2,4(r5)
 8009ef4:	1906983a 	sll	r3,r3,r4
 8009ef8:	10c4b03a 	or	r2,r2,r3
 8009efc:	28800115 	stw	r2,4(r5)
 8009f00:	003fa306 	br	8009d90 <_malloc_r+0x500>
 8009f04:	0027883a 	mov	r19,zero
 8009f08:	00c00044 	movi	r3,1
 8009f0c:	003f8606 	br	8009d28 <_malloc_r+0x498>
 8009f10:	d1200915 	stw	r4,-32732(gp)
 8009f14:	003f7306 	br	8009ce4 <_malloc_r+0x454>
 8009f18:	00801504 	movi	r2,84
 8009f1c:	11001936 	bltu	r2,r4,8009f84 <_malloc_r+0x6f4>
 8009f20:	2804d33a 	srli	r2,r5,12
 8009f24:	11001b84 	addi	r4,r2,110
 8009f28:	200690fa 	slli	r3,r4,3
 8009f2c:	003f8e06 	br	8009d68 <_malloc_r+0x4d8>
 8009f30:	480b883a 	mov	r5,r9
 8009f34:	6807883a 	mov	r3,r13
 8009f38:	288000cc 	andi	r2,r5,3
 8009f3c:	18fffe04 	addi	r3,r3,-8
 8009f40:	297fffc4 	addi	r5,r5,-1
 8009f44:	10001526 	beq	r2,zero,8009f9c <_malloc_r+0x70c>
 8009f48:	18800217 	ldw	r2,8(r3)
 8009f4c:	10fffa26 	beq	r2,r3,8009f38 <_malloc_r+0x6a8>
 8009f50:	2109883a 	add	r4,r4,r4
 8009f54:	393f1e36 	bltu	r7,r4,8009bd0 <_malloc_r+0x340>
 8009f58:	203f1d26 	beq	r4,zero,8009bd0 <_malloc_r+0x340>
 8009f5c:	21c4703a 	and	r2,r4,r7
 8009f60:	10000226 	beq	r2,zero,8009f6c <_malloc_r+0x6dc>
 8009f64:	6013883a 	mov	r9,r12
 8009f68:	003ee106 	br	8009af0 <_malloc_r+0x260>
 8009f6c:	2109883a 	add	r4,r4,r4
 8009f70:	3904703a 	and	r2,r7,r4
 8009f74:	63000104 	addi	r12,r12,4
 8009f78:	103ffc26 	beq	r2,zero,8009f6c <_malloc_r+0x6dc>
 8009f7c:	6013883a 	mov	r9,r12
 8009f80:	003edb06 	br	8009af0 <_malloc_r+0x260>
 8009f84:	00805504 	movi	r2,340
 8009f88:	11000836 	bltu	r2,r4,8009fac <_malloc_r+0x71c>
 8009f8c:	2804d3fa 	srli	r2,r5,15
 8009f90:	11001dc4 	addi	r4,r2,119
 8009f94:	200690fa 	slli	r3,r4,3
 8009f98:	003f7306 	br	8009d68 <_malloc_r+0x4d8>
 8009f9c:	0104303a 	nor	r2,zero,r4
 8009fa0:	388e703a 	and	r7,r7,r2
 8009fa4:	e1c00115 	stw	r7,4(fp)
 8009fa8:	003fe906 	br	8009f50 <_malloc_r+0x6c0>
 8009fac:	00815504 	movi	r2,1364
 8009fb0:	1100032e 	bgeu	r2,r4,8009fc0 <_malloc_r+0x730>
 8009fb4:	01001f84 	movi	r4,126
 8009fb8:	00c0fc04 	movi	r3,1008
 8009fbc:	003f6a06 	br	8009d68 <_malloc_r+0x4d8>
 8009fc0:	2804d4ba 	srli	r2,r5,18
 8009fc4:	11001f04 	addi	r4,r2,124
 8009fc8:	200690fa 	slli	r3,r4,3
 8009fcc:	003f6606 	br	8009d68 <_malloc_r+0x4d8>

08009fd0 <memchr>:
 8009fd0:	008000c4 	movi	r2,3
 8009fd4:	29403fcc 	andi	r5,r5,255
 8009fd8:	2007883a 	mov	r3,r4
 8009fdc:	1180022e 	bgeu	r2,r6,8009fe8 <memchr+0x18>
 8009fe0:	2084703a 	and	r2,r4,r2
 8009fe4:	10000b26 	beq	r2,zero,800a014 <memchr+0x44>
 8009fe8:	313fffc4 	addi	r4,r6,-1
 8009fec:	3000051e 	bne	r6,zero,800a004 <memchr+0x34>
 8009ff0:	00002c06 	br	800a0a4 <memchr+0xd4>
 8009ff4:	213fffc4 	addi	r4,r4,-1
 8009ff8:	00bfffc4 	movi	r2,-1
 8009ffc:	18c00044 	addi	r3,r3,1
 800a000:	20802826 	beq	r4,r2,800a0a4 <memchr+0xd4>
 800a004:	18800003 	ldbu	r2,0(r3)
 800a008:	28bffa1e 	bne	r5,r2,8009ff4 <memchr+0x24>
 800a00c:	1805883a 	mov	r2,r3
 800a010:	f800283a 	ret
 800a014:	0011883a 	mov	r8,zero
 800a018:	0007883a 	mov	r3,zero
 800a01c:	01c00104 	movi	r7,4
 800a020:	4004923a 	slli	r2,r8,8
 800a024:	18c00044 	addi	r3,r3,1
 800a028:	1151883a 	add	r8,r2,r5
 800a02c:	19fffc1e 	bne	r3,r7,800a020 <memchr+0x50>
 800a030:	02bfbff4 	movhi	r10,65279
 800a034:	52bfbfc4 	addi	r10,r10,-257
 800a038:	02602074 	movhi	r9,32897
 800a03c:	4a602004 	addi	r9,r9,-32640
 800a040:	02c000c4 	movi	r11,3
 800a044:	20800017 	ldw	r2,0(r4)
 800a048:	31bfff04 	addi	r6,r6,-4
 800a04c:	200f883a 	mov	r7,r4
 800a050:	1204f03a 	xor	r2,r2,r8
 800a054:	1287883a 	add	r3,r2,r10
 800a058:	1a46703a 	and	r3,r3,r9
 800a05c:	0084303a 	nor	r2,zero,r2
 800a060:	10c4703a 	and	r2,r2,r3
 800a064:	10000b26 	beq	r2,zero,800a094 <memchr+0xc4>
 800a068:	20800003 	ldbu	r2,0(r4)
 800a06c:	28800f26 	beq	r5,r2,800a0ac <memchr+0xdc>
 800a070:	20800043 	ldbu	r2,1(r4)
 800a074:	21c00044 	addi	r7,r4,1
 800a078:	28800c26 	beq	r5,r2,800a0ac <memchr+0xdc>
 800a07c:	20800083 	ldbu	r2,2(r4)
 800a080:	21c00084 	addi	r7,r4,2
 800a084:	28800926 	beq	r5,r2,800a0ac <memchr+0xdc>
 800a088:	208000c3 	ldbu	r2,3(r4)
 800a08c:	21c000c4 	addi	r7,r4,3
 800a090:	28800626 	beq	r5,r2,800a0ac <memchr+0xdc>
 800a094:	21000104 	addi	r4,r4,4
 800a098:	59bfea36 	bltu	r11,r6,800a044 <memchr+0x74>
 800a09c:	2007883a 	mov	r3,r4
 800a0a0:	003fd106 	br	8009fe8 <memchr+0x18>
 800a0a4:	0005883a 	mov	r2,zero
 800a0a8:	f800283a 	ret
 800a0ac:	3805883a 	mov	r2,r7
 800a0b0:	f800283a 	ret

0800a0b4 <memcpy>:
 800a0b4:	01c003c4 	movi	r7,15
 800a0b8:	2007883a 	mov	r3,r4
 800a0bc:	3980032e 	bgeu	r7,r6,800a0cc <memcpy+0x18>
 800a0c0:	2904b03a 	or	r2,r5,r4
 800a0c4:	108000cc 	andi	r2,r2,3
 800a0c8:	10000926 	beq	r2,zero,800a0f0 <memcpy+0x3c>
 800a0cc:	30000626 	beq	r6,zero,800a0e8 <memcpy+0x34>
 800a0d0:	30cd883a 	add	r6,r6,r3
 800a0d4:	28800003 	ldbu	r2,0(r5)
 800a0d8:	29400044 	addi	r5,r5,1
 800a0dc:	18800005 	stb	r2,0(r3)
 800a0e0:	18c00044 	addi	r3,r3,1
 800a0e4:	30fffb1e 	bne	r6,r3,800a0d4 <memcpy+0x20>
 800a0e8:	2005883a 	mov	r2,r4
 800a0ec:	f800283a 	ret
 800a0f0:	3811883a 	mov	r8,r7
 800a0f4:	200f883a 	mov	r7,r4
 800a0f8:	28c00017 	ldw	r3,0(r5)
 800a0fc:	31bffc04 	addi	r6,r6,-16
 800a100:	38c00015 	stw	r3,0(r7)
 800a104:	28800117 	ldw	r2,4(r5)
 800a108:	38800115 	stw	r2,4(r7)
 800a10c:	28c00217 	ldw	r3,8(r5)
 800a110:	38c00215 	stw	r3,8(r7)
 800a114:	28800317 	ldw	r2,12(r5)
 800a118:	29400404 	addi	r5,r5,16
 800a11c:	38800315 	stw	r2,12(r7)
 800a120:	39c00404 	addi	r7,r7,16
 800a124:	41bff436 	bltu	r8,r6,800a0f8 <memcpy+0x44>
 800a128:	008000c4 	movi	r2,3
 800a12c:	1180072e 	bgeu	r2,r6,800a14c <memcpy+0x98>
 800a130:	1007883a 	mov	r3,r2
 800a134:	28800017 	ldw	r2,0(r5)
 800a138:	31bfff04 	addi	r6,r6,-4
 800a13c:	29400104 	addi	r5,r5,4
 800a140:	38800015 	stw	r2,0(r7)
 800a144:	39c00104 	addi	r7,r7,4
 800a148:	19bffa36 	bltu	r3,r6,800a134 <memcpy+0x80>
 800a14c:	3807883a 	mov	r3,r7
 800a150:	003fde06 	br	800a0cc <memcpy+0x18>

0800a154 <memmove>:
 800a154:	2807883a 	mov	r3,r5
 800a158:	2011883a 	mov	r8,r4
 800a15c:	29000c2e 	bgeu	r5,r4,800a190 <memmove+0x3c>
 800a160:	298f883a 	add	r7,r5,r6
 800a164:	21c00a2e 	bgeu	r4,r7,800a190 <memmove+0x3c>
 800a168:	30000726 	beq	r6,zero,800a188 <memmove+0x34>
 800a16c:	2187883a 	add	r3,r4,r6
 800a170:	198dc83a 	sub	r6,r3,r6
 800a174:	39ffffc4 	addi	r7,r7,-1
 800a178:	38800003 	ldbu	r2,0(r7)
 800a17c:	18ffffc4 	addi	r3,r3,-1
 800a180:	18800005 	stb	r2,0(r3)
 800a184:	19bffb1e 	bne	r3,r6,800a174 <memmove+0x20>
 800a188:	2005883a 	mov	r2,r4
 800a18c:	f800283a 	ret
 800a190:	01c003c4 	movi	r7,15
 800a194:	39800a36 	bltu	r7,r6,800a1c0 <memmove+0x6c>
 800a198:	303ffb26 	beq	r6,zero,800a188 <memmove+0x34>
 800a19c:	400f883a 	mov	r7,r8
 800a1a0:	320d883a 	add	r6,r6,r8
 800a1a4:	28800003 	ldbu	r2,0(r5)
 800a1a8:	29400044 	addi	r5,r5,1
 800a1ac:	38800005 	stb	r2,0(r7)
 800a1b0:	39c00044 	addi	r7,r7,1
 800a1b4:	39bffb1e 	bne	r7,r6,800a1a4 <memmove+0x50>
 800a1b8:	2005883a 	mov	r2,r4
 800a1bc:	f800283a 	ret
 800a1c0:	1904b03a 	or	r2,r3,r4
 800a1c4:	108000cc 	andi	r2,r2,3
 800a1c8:	103ff31e 	bne	r2,zero,800a198 <memmove+0x44>
 800a1cc:	3811883a 	mov	r8,r7
 800a1d0:	180b883a 	mov	r5,r3
 800a1d4:	200f883a 	mov	r7,r4
 800a1d8:	28c00017 	ldw	r3,0(r5)
 800a1dc:	31bffc04 	addi	r6,r6,-16
 800a1e0:	38c00015 	stw	r3,0(r7)
 800a1e4:	28800117 	ldw	r2,4(r5)
 800a1e8:	38800115 	stw	r2,4(r7)
 800a1ec:	28c00217 	ldw	r3,8(r5)
 800a1f0:	38c00215 	stw	r3,8(r7)
 800a1f4:	28800317 	ldw	r2,12(r5)
 800a1f8:	29400404 	addi	r5,r5,16
 800a1fc:	38800315 	stw	r2,12(r7)
 800a200:	39c00404 	addi	r7,r7,16
 800a204:	41bff436 	bltu	r8,r6,800a1d8 <memmove+0x84>
 800a208:	008000c4 	movi	r2,3
 800a20c:	1180072e 	bgeu	r2,r6,800a22c <memmove+0xd8>
 800a210:	1007883a 	mov	r3,r2
 800a214:	28800017 	ldw	r2,0(r5)
 800a218:	31bfff04 	addi	r6,r6,-4
 800a21c:	29400104 	addi	r5,r5,4
 800a220:	38800015 	stw	r2,0(r7)
 800a224:	39c00104 	addi	r7,r7,4
 800a228:	19bffa36 	bltu	r3,r6,800a214 <memmove+0xc0>
 800a22c:	3811883a 	mov	r8,r7
 800a230:	003fd906 	br	800a198 <memmove+0x44>

0800a234 <memset>:
 800a234:	008000c4 	movi	r2,3
 800a238:	29403fcc 	andi	r5,r5,255
 800a23c:	2007883a 	mov	r3,r4
 800a240:	1180022e 	bgeu	r2,r6,800a24c <memset+0x18>
 800a244:	2084703a 	and	r2,r4,r2
 800a248:	10000826 	beq	r2,zero,800a26c <memset+0x38>
 800a24c:	30000526 	beq	r6,zero,800a264 <memset+0x30>
 800a250:	2805883a 	mov	r2,r5
 800a254:	30cd883a 	add	r6,r6,r3
 800a258:	18800005 	stb	r2,0(r3)
 800a25c:	18c00044 	addi	r3,r3,1
 800a260:	19bffd1e 	bne	r3,r6,800a258 <memset+0x24>
 800a264:	2005883a 	mov	r2,r4
 800a268:	f800283a 	ret
 800a26c:	2804923a 	slli	r2,r5,8
 800a270:	020003c4 	movi	r8,15
 800a274:	200f883a 	mov	r7,r4
 800a278:	2884b03a 	or	r2,r5,r2
 800a27c:	1006943a 	slli	r3,r2,16
 800a280:	10c6b03a 	or	r3,r2,r3
 800a284:	41800a2e 	bgeu	r8,r6,800a2b0 <memset+0x7c>
 800a288:	4005883a 	mov	r2,r8
 800a28c:	31bffc04 	addi	r6,r6,-16
 800a290:	38c00015 	stw	r3,0(r7)
 800a294:	38c00115 	stw	r3,4(r7)
 800a298:	38c00215 	stw	r3,8(r7)
 800a29c:	38c00315 	stw	r3,12(r7)
 800a2a0:	39c00404 	addi	r7,r7,16
 800a2a4:	11bff936 	bltu	r2,r6,800a28c <memset+0x58>
 800a2a8:	008000c4 	movi	r2,3
 800a2ac:	1180052e 	bgeu	r2,r6,800a2c4 <memset+0x90>
 800a2b0:	31bfff04 	addi	r6,r6,-4
 800a2b4:	008000c4 	movi	r2,3
 800a2b8:	38c00015 	stw	r3,0(r7)
 800a2bc:	39c00104 	addi	r7,r7,4
 800a2c0:	11bffb36 	bltu	r2,r6,800a2b0 <memset+0x7c>
 800a2c4:	3807883a 	mov	r3,r7
 800a2c8:	003fe006 	br	800a24c <memset+0x18>

0800a2cc <_Bfree>:
 800a2cc:	28000826 	beq	r5,zero,800a2f0 <_Bfree+0x24>
 800a2d0:	28800117 	ldw	r2,4(r5)
 800a2d4:	21001317 	ldw	r4,76(r4)
 800a2d8:	1085883a 	add	r2,r2,r2
 800a2dc:	1085883a 	add	r2,r2,r2
 800a2e0:	1105883a 	add	r2,r2,r4
 800a2e4:	10c00017 	ldw	r3,0(r2)
 800a2e8:	28c00015 	stw	r3,0(r5)
 800a2ec:	11400015 	stw	r5,0(r2)
 800a2f0:	f800283a 	ret

0800a2f4 <__hi0bits>:
 800a2f4:	20bfffec 	andhi	r2,r4,65535
 800a2f8:	10001426 	beq	r2,zero,800a34c <__hi0bits+0x58>
 800a2fc:	0007883a 	mov	r3,zero
 800a300:	20bfc02c 	andhi	r2,r4,65280
 800a304:	1000021e 	bne	r2,zero,800a310 <__hi0bits+0x1c>
 800a308:	2008923a 	slli	r4,r4,8
 800a30c:	18c00204 	addi	r3,r3,8
 800a310:	20bc002c 	andhi	r2,r4,61440
 800a314:	1000021e 	bne	r2,zero,800a320 <__hi0bits+0x2c>
 800a318:	2008913a 	slli	r4,r4,4
 800a31c:	18c00104 	addi	r3,r3,4
 800a320:	20b0002c 	andhi	r2,r4,49152
 800a324:	1000031e 	bne	r2,zero,800a334 <__hi0bits+0x40>
 800a328:	2105883a 	add	r2,r4,r4
 800a32c:	18c00084 	addi	r3,r3,2
 800a330:	1089883a 	add	r4,r2,r2
 800a334:	20000316 	blt	r4,zero,800a344 <__hi0bits+0x50>
 800a338:	2090002c 	andhi	r2,r4,16384
 800a33c:	10000626 	beq	r2,zero,800a358 <__hi0bits+0x64>
 800a340:	18c00044 	addi	r3,r3,1
 800a344:	1805883a 	mov	r2,r3
 800a348:	f800283a 	ret
 800a34c:	2008943a 	slli	r4,r4,16
 800a350:	00c00404 	movi	r3,16
 800a354:	003fea06 	br	800a300 <__hi0bits+0xc>
 800a358:	00c00804 	movi	r3,32
 800a35c:	1805883a 	mov	r2,r3
 800a360:	f800283a 	ret

0800a364 <__lo0bits>:
 800a364:	20c00017 	ldw	r3,0(r4)
 800a368:	188001cc 	andi	r2,r3,7
 800a36c:	10000a26 	beq	r2,zero,800a398 <__lo0bits+0x34>
 800a370:	1880004c 	andi	r2,r3,1
 800a374:	1005003a 	cmpeq	r2,r2,zero
 800a378:	10002126 	beq	r2,zero,800a400 <__lo0bits+0x9c>
 800a37c:	1880008c 	andi	r2,r3,2
 800a380:	1000251e 	bne	r2,zero,800a418 <__lo0bits+0xb4>
 800a384:	1804d0ba 	srli	r2,r3,2
 800a388:	01400084 	movi	r5,2
 800a38c:	20800015 	stw	r2,0(r4)
 800a390:	2805883a 	mov	r2,r5
 800a394:	f800283a 	ret
 800a398:	18bfffcc 	andi	r2,r3,65535
 800a39c:	10001526 	beq	r2,zero,800a3f4 <__lo0bits+0x90>
 800a3a0:	000b883a 	mov	r5,zero
 800a3a4:	18803fcc 	andi	r2,r3,255
 800a3a8:	1000021e 	bne	r2,zero,800a3b4 <__lo0bits+0x50>
 800a3ac:	1806d23a 	srli	r3,r3,8
 800a3b0:	29400204 	addi	r5,r5,8
 800a3b4:	188003cc 	andi	r2,r3,15
 800a3b8:	1000021e 	bne	r2,zero,800a3c4 <__lo0bits+0x60>
 800a3bc:	1806d13a 	srli	r3,r3,4
 800a3c0:	29400104 	addi	r5,r5,4
 800a3c4:	188000cc 	andi	r2,r3,3
 800a3c8:	1000021e 	bne	r2,zero,800a3d4 <__lo0bits+0x70>
 800a3cc:	1806d0ba 	srli	r3,r3,2
 800a3d0:	29400084 	addi	r5,r5,2
 800a3d4:	1880004c 	andi	r2,r3,1
 800a3d8:	1000031e 	bne	r2,zero,800a3e8 <__lo0bits+0x84>
 800a3dc:	1806d07a 	srli	r3,r3,1
 800a3e0:	18000a26 	beq	r3,zero,800a40c <__lo0bits+0xa8>
 800a3e4:	29400044 	addi	r5,r5,1
 800a3e8:	2805883a 	mov	r2,r5
 800a3ec:	20c00015 	stw	r3,0(r4)
 800a3f0:	f800283a 	ret
 800a3f4:	1806d43a 	srli	r3,r3,16
 800a3f8:	01400404 	movi	r5,16
 800a3fc:	003fe906 	br	800a3a4 <__lo0bits+0x40>
 800a400:	000b883a 	mov	r5,zero
 800a404:	2805883a 	mov	r2,r5
 800a408:	f800283a 	ret
 800a40c:	01400804 	movi	r5,32
 800a410:	2805883a 	mov	r2,r5
 800a414:	f800283a 	ret
 800a418:	1804d07a 	srli	r2,r3,1
 800a41c:	01400044 	movi	r5,1
 800a420:	20800015 	stw	r2,0(r4)
 800a424:	003fda06 	br	800a390 <__lo0bits+0x2c>

0800a428 <__mcmp>:
 800a428:	20800417 	ldw	r2,16(r4)
 800a42c:	28c00417 	ldw	r3,16(r5)
 800a430:	10cfc83a 	sub	r7,r2,r3
 800a434:	38000c1e 	bne	r7,zero,800a468 <__mcmp+0x40>
 800a438:	18c5883a 	add	r2,r3,r3
 800a43c:	1085883a 	add	r2,r2,r2
 800a440:	10c00504 	addi	r3,r2,20
 800a444:	21000504 	addi	r4,r4,20
 800a448:	28cb883a 	add	r5,r5,r3
 800a44c:	2085883a 	add	r2,r4,r2
 800a450:	10bfff04 	addi	r2,r2,-4
 800a454:	297fff04 	addi	r5,r5,-4
 800a458:	11800017 	ldw	r6,0(r2)
 800a45c:	28c00017 	ldw	r3,0(r5)
 800a460:	30c0031e 	bne	r6,r3,800a470 <__mcmp+0x48>
 800a464:	20bffa36 	bltu	r4,r2,800a450 <__mcmp+0x28>
 800a468:	3805883a 	mov	r2,r7
 800a46c:	f800283a 	ret
 800a470:	30c00336 	bltu	r6,r3,800a480 <__mcmp+0x58>
 800a474:	01c00044 	movi	r7,1
 800a478:	3805883a 	mov	r2,r7
 800a47c:	f800283a 	ret
 800a480:	01ffffc4 	movi	r7,-1
 800a484:	003ff806 	br	800a468 <__mcmp+0x40>

0800a488 <__ulp>:
 800a488:	295ffc2c 	andhi	r5,r5,32752
 800a48c:	013f3034 	movhi	r4,64704
 800a490:	290b883a 	add	r5,r5,r4
 800a494:	0145c83a 	sub	r2,zero,r5
 800a498:	1007d53a 	srai	r3,r2,20
 800a49c:	000d883a 	mov	r6,zero
 800a4a0:	0140040e 	bge	zero,r5,800a4b4 <__ulp+0x2c>
 800a4a4:	280f883a 	mov	r7,r5
 800a4a8:	3807883a 	mov	r3,r7
 800a4ac:	3005883a 	mov	r2,r6
 800a4b0:	f800283a 	ret
 800a4b4:	008004c4 	movi	r2,19
 800a4b8:	193ffb04 	addi	r4,r3,-20
 800a4bc:	10c00c0e 	bge	r2,r3,800a4f0 <__ulp+0x68>
 800a4c0:	008007c4 	movi	r2,31
 800a4c4:	1107c83a 	sub	r3,r2,r4
 800a4c8:	00800784 	movi	r2,30
 800a4cc:	01400044 	movi	r5,1
 800a4d0:	11000216 	blt	r2,r4,800a4dc <__ulp+0x54>
 800a4d4:	00800044 	movi	r2,1
 800a4d8:	10ca983a 	sll	r5,r2,r3
 800a4dc:	000f883a 	mov	r7,zero
 800a4e0:	280d883a 	mov	r6,r5
 800a4e4:	3807883a 	mov	r3,r7
 800a4e8:	3005883a 	mov	r2,r6
 800a4ec:	f800283a 	ret
 800a4f0:	00800234 	movhi	r2,8
 800a4f4:	10cfd83a 	sra	r7,r2,r3
 800a4f8:	000d883a 	mov	r6,zero
 800a4fc:	3005883a 	mov	r2,r6
 800a500:	3807883a 	mov	r3,r7
 800a504:	f800283a 	ret

0800a508 <__b2d>:
 800a508:	20800417 	ldw	r2,16(r4)
 800a50c:	defff904 	addi	sp,sp,-28
 800a510:	dd000415 	stw	r20,16(sp)
 800a514:	1085883a 	add	r2,r2,r2
 800a518:	25000504 	addi	r20,r4,20
 800a51c:	1085883a 	add	r2,r2,r2
 800a520:	dc000015 	stw	r16,0(sp)
 800a524:	a0a1883a 	add	r16,r20,r2
 800a528:	dd400515 	stw	r21,20(sp)
 800a52c:	857fff17 	ldw	r21,-4(r16)
 800a530:	dc400115 	stw	r17,4(sp)
 800a534:	dfc00615 	stw	ra,24(sp)
 800a538:	a809883a 	mov	r4,r21
 800a53c:	2823883a 	mov	r17,r5
 800a540:	dcc00315 	stw	r19,12(sp)
 800a544:	dc800215 	stw	r18,8(sp)
 800a548:	800a2f40 	call	800a2f4 <__hi0bits>
 800a54c:	100b883a 	mov	r5,r2
 800a550:	00800804 	movi	r2,32
 800a554:	1145c83a 	sub	r2,r2,r5
 800a558:	88800015 	stw	r2,0(r17)
 800a55c:	00800284 	movi	r2,10
 800a560:	80ffff04 	addi	r3,r16,-4
 800a564:	11401416 	blt	r2,r5,800a5b8 <__b2d+0xb0>
 800a568:	008002c4 	movi	r2,11
 800a56c:	1149c83a 	sub	r4,r2,r5
 800a570:	a0c02736 	bltu	r20,r3,800a610 <__b2d+0x108>
 800a574:	000d883a 	mov	r6,zero
 800a578:	28800544 	addi	r2,r5,21
 800a57c:	a906d83a 	srl	r3,r21,r4
 800a580:	a884983a 	sll	r2,r21,r2
 800a584:	1ccffc34 	orhi	r19,r3,16368
 800a588:	11a4b03a 	or	r18,r2,r6
 800a58c:	9005883a 	mov	r2,r18
 800a590:	9807883a 	mov	r3,r19
 800a594:	dfc00617 	ldw	ra,24(sp)
 800a598:	dd400517 	ldw	r21,20(sp)
 800a59c:	dd000417 	ldw	r20,16(sp)
 800a5a0:	dcc00317 	ldw	r19,12(sp)
 800a5a4:	dc800217 	ldw	r18,8(sp)
 800a5a8:	dc400117 	ldw	r17,4(sp)
 800a5ac:	dc000017 	ldw	r16,0(sp)
 800a5b0:	dec00704 	addi	sp,sp,28
 800a5b4:	f800283a 	ret
 800a5b8:	a0c00e36 	bltu	r20,r3,800a5f4 <__b2d+0xec>
 800a5bc:	293ffd44 	addi	r4,r5,-11
 800a5c0:	000d883a 	mov	r6,zero
 800a5c4:	20000f26 	beq	r4,zero,800a604 <__b2d+0xfc>
 800a5c8:	00800804 	movi	r2,32
 800a5cc:	110bc83a 	sub	r5,r2,r4
 800a5d0:	a0c01236 	bltu	r20,r3,800a61c <__b2d+0x114>
 800a5d4:	000f883a 	mov	r7,zero
 800a5d8:	a904983a 	sll	r2,r21,r4
 800a5dc:	3146d83a 	srl	r3,r6,r5
 800a5e0:	3108983a 	sll	r4,r6,r4
 800a5e4:	108ffc34 	orhi	r2,r2,16368
 800a5e8:	18a6b03a 	or	r19,r3,r2
 800a5ec:	3924b03a 	or	r18,r7,r4
 800a5f0:	003fe606 	br	800a58c <__b2d+0x84>
 800a5f4:	293ffd44 	addi	r4,r5,-11
 800a5f8:	81bffe17 	ldw	r6,-8(r16)
 800a5fc:	80fffe04 	addi	r3,r16,-8
 800a600:	203ff11e 	bne	r4,zero,800a5c8 <__b2d+0xc0>
 800a604:	accffc34 	orhi	r19,r21,16368
 800a608:	3025883a 	mov	r18,r6
 800a60c:	003fdf06 	br	800a58c <__b2d+0x84>
 800a610:	18bfff17 	ldw	r2,-4(r3)
 800a614:	110cd83a 	srl	r6,r2,r4
 800a618:	003fd706 	br	800a578 <__b2d+0x70>
 800a61c:	18bfff17 	ldw	r2,-4(r3)
 800a620:	114ed83a 	srl	r7,r2,r5
 800a624:	003fec06 	br	800a5d8 <__b2d+0xd0>

0800a628 <__ratio>:
 800a628:	defff904 	addi	sp,sp,-28
 800a62c:	dc400215 	stw	r17,8(sp)
 800a630:	2823883a 	mov	r17,r5
 800a634:	d80b883a 	mov	r5,sp
 800a638:	dfc00615 	stw	ra,24(sp)
 800a63c:	dd000515 	stw	r20,20(sp)
 800a640:	dcc00415 	stw	r19,16(sp)
 800a644:	dc800315 	stw	r18,12(sp)
 800a648:	2025883a 	mov	r18,r4
 800a64c:	800a5080 	call	800a508 <__b2d>
 800a650:	8809883a 	mov	r4,r17
 800a654:	d9400104 	addi	r5,sp,4
 800a658:	1027883a 	mov	r19,r2
 800a65c:	1829883a 	mov	r20,r3
 800a660:	800a5080 	call	800a508 <__b2d>
 800a664:	89000417 	ldw	r4,16(r17)
 800a668:	91c00417 	ldw	r7,16(r18)
 800a66c:	d9800117 	ldw	r6,4(sp)
 800a670:	180b883a 	mov	r5,r3
 800a674:	390fc83a 	sub	r7,r7,r4
 800a678:	1009883a 	mov	r4,r2
 800a67c:	d8800017 	ldw	r2,0(sp)
 800a680:	380e917a 	slli	r7,r7,5
 800a684:	2011883a 	mov	r8,r4
 800a688:	1185c83a 	sub	r2,r2,r6
 800a68c:	11c5883a 	add	r2,r2,r7
 800a690:	1006953a 	slli	r3,r2,20
 800a694:	2813883a 	mov	r9,r5
 800a698:	00800d0e 	bge	zero,r2,800a6d0 <__ratio+0xa8>
 800a69c:	1d29883a 	add	r20,r3,r20
 800a6a0:	a00b883a 	mov	r5,r20
 800a6a4:	480f883a 	mov	r7,r9
 800a6a8:	9809883a 	mov	r4,r19
 800a6ac:	400d883a 	mov	r6,r8
 800a6b0:	8003bf40 	call	8003bf4 <__divdf3>
 800a6b4:	dfc00617 	ldw	ra,24(sp)
 800a6b8:	dd000517 	ldw	r20,20(sp)
 800a6bc:	dcc00417 	ldw	r19,16(sp)
 800a6c0:	dc800317 	ldw	r18,12(sp)
 800a6c4:	dc400217 	ldw	r17,8(sp)
 800a6c8:	dec00704 	addi	sp,sp,28
 800a6cc:	f800283a 	ret
 800a6d0:	28d3c83a 	sub	r9,r5,r3
 800a6d4:	003ff206 	br	800a6a0 <__ratio+0x78>

0800a6d8 <_mprec_log10>:
 800a6d8:	defffe04 	addi	sp,sp,-8
 800a6dc:	008005c4 	movi	r2,23
 800a6e0:	dc000015 	stw	r16,0(sp)
 800a6e4:	dfc00115 	stw	ra,4(sp)
 800a6e8:	2021883a 	mov	r16,r4
 800a6ec:	11000c16 	blt	r2,r4,800a720 <_mprec_log10+0x48>
 800a6f0:	200490fa 	slli	r2,r4,3
 800a6f4:	00c20074 	movhi	r3,2049
 800a6f8:	18c6d804 	addi	r3,r3,7008
 800a6fc:	10c5883a 	add	r2,r2,r3
 800a700:	12400117 	ldw	r9,4(r2)
 800a704:	12000017 	ldw	r8,0(r2)
 800a708:	4807883a 	mov	r3,r9
 800a70c:	4005883a 	mov	r2,r8
 800a710:	dfc00117 	ldw	ra,4(sp)
 800a714:	dc000017 	ldw	r16,0(sp)
 800a718:	dec00204 	addi	sp,sp,8
 800a71c:	f800283a 	ret
 800a720:	0011883a 	mov	r8,zero
 800a724:	024ffc34 	movhi	r9,16368
 800a728:	0005883a 	mov	r2,zero
 800a72c:	00d00934 	movhi	r3,16420
 800a730:	480b883a 	mov	r5,r9
 800a734:	4009883a 	mov	r4,r8
 800a738:	180f883a 	mov	r7,r3
 800a73c:	100d883a 	mov	r6,r2
 800a740:	80038300 	call	8003830 <__muldf3>
 800a744:	843fffc4 	addi	r16,r16,-1
 800a748:	1011883a 	mov	r8,r2
 800a74c:	1813883a 	mov	r9,r3
 800a750:	803ff51e 	bne	r16,zero,800a728 <_mprec_log10+0x50>
 800a754:	4005883a 	mov	r2,r8
 800a758:	4807883a 	mov	r3,r9
 800a75c:	dfc00117 	ldw	ra,4(sp)
 800a760:	dc000017 	ldw	r16,0(sp)
 800a764:	dec00204 	addi	sp,sp,8
 800a768:	f800283a 	ret

0800a76c <__copybits>:
 800a76c:	297fffc4 	addi	r5,r5,-1
 800a770:	30800417 	ldw	r2,16(r6)
 800a774:	280bd17a 	srai	r5,r5,5
 800a778:	31800504 	addi	r6,r6,20
 800a77c:	1085883a 	add	r2,r2,r2
 800a780:	294b883a 	add	r5,r5,r5
 800a784:	294b883a 	add	r5,r5,r5
 800a788:	1085883a 	add	r2,r2,r2
 800a78c:	290b883a 	add	r5,r5,r4
 800a790:	3087883a 	add	r3,r6,r2
 800a794:	29400104 	addi	r5,r5,4
 800a798:	30c0052e 	bgeu	r6,r3,800a7b0 <__copybits+0x44>
 800a79c:	30800017 	ldw	r2,0(r6)
 800a7a0:	31800104 	addi	r6,r6,4
 800a7a4:	20800015 	stw	r2,0(r4)
 800a7a8:	21000104 	addi	r4,r4,4
 800a7ac:	30fffb36 	bltu	r6,r3,800a79c <__copybits+0x30>
 800a7b0:	2140032e 	bgeu	r4,r5,800a7c0 <__copybits+0x54>
 800a7b4:	20000015 	stw	zero,0(r4)
 800a7b8:	21000104 	addi	r4,r4,4
 800a7bc:	217ffd36 	bltu	r4,r5,800a7b4 <__copybits+0x48>
 800a7c0:	f800283a 	ret

0800a7c4 <__any_on>:
 800a7c4:	20800417 	ldw	r2,16(r4)
 800a7c8:	2807d17a 	srai	r3,r5,5
 800a7cc:	21000504 	addi	r4,r4,20
 800a7d0:	10c00d0e 	bge	r2,r3,800a808 <__any_on+0x44>
 800a7d4:	1085883a 	add	r2,r2,r2
 800a7d8:	1085883a 	add	r2,r2,r2
 800a7dc:	208d883a 	add	r6,r4,r2
 800a7e0:	2180182e 	bgeu	r4,r6,800a844 <__any_on+0x80>
 800a7e4:	30bfff17 	ldw	r2,-4(r6)
 800a7e8:	30ffff04 	addi	r3,r6,-4
 800a7ec:	1000041e 	bne	r2,zero,800a800 <__any_on+0x3c>
 800a7f0:	20c0142e 	bgeu	r4,r3,800a844 <__any_on+0x80>
 800a7f4:	18ffff04 	addi	r3,r3,-4
 800a7f8:	18800017 	ldw	r2,0(r3)
 800a7fc:	103ffc26 	beq	r2,zero,800a7f0 <__any_on+0x2c>
 800a800:	00800044 	movi	r2,1
 800a804:	f800283a 	ret
 800a808:	18800a0e 	bge	r3,r2,800a834 <__any_on+0x70>
 800a80c:	294007cc 	andi	r5,r5,31
 800a810:	28000826 	beq	r5,zero,800a834 <__any_on+0x70>
 800a814:	18c5883a 	add	r2,r3,r3
 800a818:	1085883a 	add	r2,r2,r2
 800a81c:	208d883a 	add	r6,r4,r2
 800a820:	30c00017 	ldw	r3,0(r6)
 800a824:	1944d83a 	srl	r2,r3,r5
 800a828:	1144983a 	sll	r2,r2,r5
 800a82c:	18bff41e 	bne	r3,r2,800a800 <__any_on+0x3c>
 800a830:	003feb06 	br	800a7e0 <__any_on+0x1c>
 800a834:	18c5883a 	add	r2,r3,r3
 800a838:	1085883a 	add	r2,r2,r2
 800a83c:	208d883a 	add	r6,r4,r2
 800a840:	003fe706 	br	800a7e0 <__any_on+0x1c>
 800a844:	0005883a 	mov	r2,zero
 800a848:	f800283a 	ret

0800a84c <_Balloc>:
 800a84c:	20c01317 	ldw	r3,76(r4)
 800a850:	defffb04 	addi	sp,sp,-20
 800a854:	dcc00315 	stw	r19,12(sp)
 800a858:	dc800215 	stw	r18,8(sp)
 800a85c:	dfc00415 	stw	ra,16(sp)
 800a860:	2825883a 	mov	r18,r5
 800a864:	dc400115 	stw	r17,4(sp)
 800a868:	dc000015 	stw	r16,0(sp)
 800a86c:	2027883a 	mov	r19,r4
 800a870:	01800404 	movi	r6,16
 800a874:	01400104 	movi	r5,4
 800a878:	18001726 	beq	r3,zero,800a8d8 <_Balloc+0x8c>
 800a87c:	01400044 	movi	r5,1
 800a880:	9485883a 	add	r2,r18,r18
 800a884:	2ca2983a 	sll	r17,r5,r18
 800a888:	1085883a 	add	r2,r2,r2
 800a88c:	10c7883a 	add	r3,r2,r3
 800a890:	1c000017 	ldw	r16,0(r3)
 800a894:	8c4d883a 	add	r6,r17,r17
 800a898:	318d883a 	add	r6,r6,r6
 800a89c:	9809883a 	mov	r4,r19
 800a8a0:	31800504 	addi	r6,r6,20
 800a8a4:	80001226 	beq	r16,zero,800a8f0 <_Balloc+0xa4>
 800a8a8:	80800017 	ldw	r2,0(r16)
 800a8ac:	18800015 	stw	r2,0(r3)
 800a8b0:	80000415 	stw	zero,16(r16)
 800a8b4:	80000315 	stw	zero,12(r16)
 800a8b8:	8005883a 	mov	r2,r16
 800a8bc:	dfc00417 	ldw	ra,16(sp)
 800a8c0:	dcc00317 	ldw	r19,12(sp)
 800a8c4:	dc800217 	ldw	r18,8(sp)
 800a8c8:	dc400117 	ldw	r17,4(sp)
 800a8cc:	dc000017 	ldw	r16,0(sp)
 800a8d0:	dec00504 	addi	sp,sp,20
 800a8d4:	f800283a 	ret
 800a8d8:	800bbe40 	call	800bbe4 <_calloc_r>
 800a8dc:	1007883a 	mov	r3,r2
 800a8e0:	0021883a 	mov	r16,zero
 800a8e4:	98801315 	stw	r2,76(r19)
 800a8e8:	103fe41e 	bne	r2,zero,800a87c <_Balloc+0x30>
 800a8ec:	003ff206 	br	800a8b8 <_Balloc+0x6c>
 800a8f0:	800bbe40 	call	800bbe4 <_calloc_r>
 800a8f4:	103ff026 	beq	r2,zero,800a8b8 <_Balloc+0x6c>
 800a8f8:	1021883a 	mov	r16,r2
 800a8fc:	14800115 	stw	r18,4(r2)
 800a900:	14400215 	stw	r17,8(r2)
 800a904:	003fea06 	br	800a8b0 <_Balloc+0x64>

0800a908 <__d2b>:
 800a908:	defff504 	addi	sp,sp,-44
 800a90c:	dcc00515 	stw	r19,20(sp)
 800a910:	04c00044 	movi	r19,1
 800a914:	dc000215 	stw	r16,8(sp)
 800a918:	2821883a 	mov	r16,r5
 800a91c:	980b883a 	mov	r5,r19
 800a920:	ddc00915 	stw	r23,36(sp)
 800a924:	dd800815 	stw	r22,32(sp)
 800a928:	dd400715 	stw	r21,28(sp)
 800a92c:	dd000615 	stw	r20,24(sp)
 800a930:	dc800415 	stw	r18,16(sp)
 800a934:	dc400315 	stw	r17,12(sp)
 800a938:	dfc00a15 	stw	ra,40(sp)
 800a93c:	3023883a 	mov	r17,r6
 800a940:	382d883a 	mov	r22,r7
 800a944:	ddc00b17 	ldw	r23,44(sp)
 800a948:	800a84c0 	call	800a84c <_Balloc>
 800a94c:	1025883a 	mov	r18,r2
 800a950:	00a00034 	movhi	r2,32768
 800a954:	10bfffc4 	addi	r2,r2,-1
 800a958:	8888703a 	and	r4,r17,r2
 800a95c:	202ad53a 	srli	r21,r4,20
 800a960:	00800434 	movhi	r2,16
 800a964:	10bfffc4 	addi	r2,r2,-1
 800a968:	8886703a 	and	r3,r17,r2
 800a96c:	a829003a 	cmpeq	r20,r21,zero
 800a970:	800b883a 	mov	r5,r16
 800a974:	d8c00115 	stw	r3,4(sp)
 800a978:	94000504 	addi	r16,r18,20
 800a97c:	a000021e 	bne	r20,zero,800a988 <__d2b+0x80>
 800a980:	18c00434 	orhi	r3,r3,16
 800a984:	d8c00115 	stw	r3,4(sp)
 800a988:	28002726 	beq	r5,zero,800aa28 <__d2b+0x120>
 800a98c:	d809883a 	mov	r4,sp
 800a990:	d9400015 	stw	r5,0(sp)
 800a994:	800a3640 	call	800a364 <__lo0bits>
 800a998:	100d883a 	mov	r6,r2
 800a99c:	10003526 	beq	r2,zero,800aa74 <__d2b+0x16c>
 800a9a0:	d8c00117 	ldw	r3,4(sp)
 800a9a4:	00800804 	movi	r2,32
 800a9a8:	1185c83a 	sub	r2,r2,r6
 800a9ac:	d9000017 	ldw	r4,0(sp)
 800a9b0:	1886983a 	sll	r3,r3,r2
 800a9b4:	1906b03a 	or	r3,r3,r4
 800a9b8:	90c00515 	stw	r3,20(r18)
 800a9bc:	d8c00117 	ldw	r3,4(sp)
 800a9c0:	1986d83a 	srl	r3,r3,r6
 800a9c4:	d8c00115 	stw	r3,4(sp)
 800a9c8:	180b003a 	cmpeq	r5,r3,zero
 800a9cc:	00800084 	movi	r2,2
 800a9d0:	114bc83a 	sub	r5,r2,r5
 800a9d4:	80c00115 	stw	r3,4(r16)
 800a9d8:	91400415 	stw	r5,16(r18)
 800a9dc:	a0001a1e 	bne	r20,zero,800aa48 <__d2b+0x140>
 800a9e0:	3545883a 	add	r2,r6,r21
 800a9e4:	10bef344 	addi	r2,r2,-1075
 800a9e8:	00c00d44 	movi	r3,53
 800a9ec:	b0800015 	stw	r2,0(r22)
 800a9f0:	1987c83a 	sub	r3,r3,r6
 800a9f4:	b8c00015 	stw	r3,0(r23)
 800a9f8:	9005883a 	mov	r2,r18
 800a9fc:	dfc00a17 	ldw	ra,40(sp)
 800aa00:	ddc00917 	ldw	r23,36(sp)
 800aa04:	dd800817 	ldw	r22,32(sp)
 800aa08:	dd400717 	ldw	r21,28(sp)
 800aa0c:	dd000617 	ldw	r20,24(sp)
 800aa10:	dcc00517 	ldw	r19,20(sp)
 800aa14:	dc800417 	ldw	r18,16(sp)
 800aa18:	dc400317 	ldw	r17,12(sp)
 800aa1c:	dc000217 	ldw	r16,8(sp)
 800aa20:	dec00b04 	addi	sp,sp,44
 800aa24:	f800283a 	ret
 800aa28:	d9000104 	addi	r4,sp,4
 800aa2c:	800a3640 	call	800a364 <__lo0bits>
 800aa30:	11800804 	addi	r6,r2,32
 800aa34:	d8800117 	ldw	r2,4(sp)
 800aa38:	94c00415 	stw	r19,16(r18)
 800aa3c:	980b883a 	mov	r5,r19
 800aa40:	90800515 	stw	r2,20(r18)
 800aa44:	a03fe626 	beq	r20,zero,800a9e0 <__d2b+0xd8>
 800aa48:	2945883a 	add	r2,r5,r5
 800aa4c:	1085883a 	add	r2,r2,r2
 800aa50:	1405883a 	add	r2,r2,r16
 800aa54:	113fff17 	ldw	r4,-4(r2)
 800aa58:	30fef384 	addi	r3,r6,-1074
 800aa5c:	2820917a 	slli	r16,r5,5
 800aa60:	b0c00015 	stw	r3,0(r22)
 800aa64:	800a2f40 	call	800a2f4 <__hi0bits>
 800aa68:	80a1c83a 	sub	r16,r16,r2
 800aa6c:	bc000015 	stw	r16,0(r23)
 800aa70:	003fe106 	br	800a9f8 <__d2b+0xf0>
 800aa74:	d8800017 	ldw	r2,0(sp)
 800aa78:	90800515 	stw	r2,20(r18)
 800aa7c:	d8c00117 	ldw	r3,4(sp)
 800aa80:	003fd106 	br	800a9c8 <__d2b+0xc0>

0800aa84 <__mdiff>:
 800aa84:	defffb04 	addi	sp,sp,-20
 800aa88:	dc000015 	stw	r16,0(sp)
 800aa8c:	2821883a 	mov	r16,r5
 800aa90:	dc800215 	stw	r18,8(sp)
 800aa94:	300b883a 	mov	r5,r6
 800aa98:	2025883a 	mov	r18,r4
 800aa9c:	8009883a 	mov	r4,r16
 800aaa0:	dc400115 	stw	r17,4(sp)
 800aaa4:	dfc00415 	stw	ra,16(sp)
 800aaa8:	dcc00315 	stw	r19,12(sp)
 800aaac:	3023883a 	mov	r17,r6
 800aab0:	800a4280 	call	800a428 <__mcmp>
 800aab4:	10004226 	beq	r2,zero,800abc0 <__mdiff+0x13c>
 800aab8:	10005016 	blt	r2,zero,800abfc <__mdiff+0x178>
 800aabc:	0027883a 	mov	r19,zero
 800aac0:	81400117 	ldw	r5,4(r16)
 800aac4:	9009883a 	mov	r4,r18
 800aac8:	800a84c0 	call	800a84c <_Balloc>
 800aacc:	1019883a 	mov	r12,r2
 800aad0:	82800417 	ldw	r10,16(r16)
 800aad4:	88800417 	ldw	r2,16(r17)
 800aad8:	81800504 	addi	r6,r16,20
 800aadc:	5287883a 	add	r3,r10,r10
 800aae0:	1085883a 	add	r2,r2,r2
 800aae4:	18c7883a 	add	r3,r3,r3
 800aae8:	1085883a 	add	r2,r2,r2
 800aaec:	8a000504 	addi	r8,r17,20
 800aaf0:	64c00315 	stw	r19,12(r12)
 800aaf4:	30db883a 	add	r13,r6,r3
 800aaf8:	4097883a 	add	r11,r8,r2
 800aafc:	61c00504 	addi	r7,r12,20
 800ab00:	0013883a 	mov	r9,zero
 800ab04:	31000017 	ldw	r4,0(r6)
 800ab08:	41400017 	ldw	r5,0(r8)
 800ab0c:	42000104 	addi	r8,r8,4
 800ab10:	20bfffcc 	andi	r2,r4,65535
 800ab14:	28ffffcc 	andi	r3,r5,65535
 800ab18:	10c5c83a 	sub	r2,r2,r3
 800ab1c:	1245883a 	add	r2,r2,r9
 800ab20:	2008d43a 	srli	r4,r4,16
 800ab24:	280ad43a 	srli	r5,r5,16
 800ab28:	1007d43a 	srai	r3,r2,16
 800ab2c:	3880000d 	sth	r2,0(r7)
 800ab30:	2149c83a 	sub	r4,r4,r5
 800ab34:	20c9883a 	add	r4,r4,r3
 800ab38:	3900008d 	sth	r4,2(r7)
 800ab3c:	31800104 	addi	r6,r6,4
 800ab40:	39c00104 	addi	r7,r7,4
 800ab44:	2013d43a 	srai	r9,r4,16
 800ab48:	42ffee36 	bltu	r8,r11,800ab04 <__mdiff+0x80>
 800ab4c:	33400c2e 	bgeu	r6,r13,800ab80 <__mdiff+0xfc>
 800ab50:	30800017 	ldw	r2,0(r6)
 800ab54:	31800104 	addi	r6,r6,4
 800ab58:	10ffffcc 	andi	r3,r2,65535
 800ab5c:	1a47883a 	add	r3,r3,r9
 800ab60:	1004d43a 	srli	r2,r2,16
 800ab64:	1809d43a 	srai	r4,r3,16
 800ab68:	38c0000d 	sth	r3,0(r7)
 800ab6c:	1105883a 	add	r2,r2,r4
 800ab70:	3880008d 	sth	r2,2(r7)
 800ab74:	1013d43a 	srai	r9,r2,16
 800ab78:	39c00104 	addi	r7,r7,4
 800ab7c:	337ff436 	bltu	r6,r13,800ab50 <__mdiff+0xcc>
 800ab80:	38bfff17 	ldw	r2,-4(r7)
 800ab84:	38ffff04 	addi	r3,r7,-4
 800ab88:	1000041e 	bne	r2,zero,800ab9c <__mdiff+0x118>
 800ab8c:	18ffff04 	addi	r3,r3,-4
 800ab90:	18800017 	ldw	r2,0(r3)
 800ab94:	52bfffc4 	addi	r10,r10,-1
 800ab98:	103ffc26 	beq	r2,zero,800ab8c <__mdiff+0x108>
 800ab9c:	6005883a 	mov	r2,r12
 800aba0:	62800415 	stw	r10,16(r12)
 800aba4:	dfc00417 	ldw	ra,16(sp)
 800aba8:	dcc00317 	ldw	r19,12(sp)
 800abac:	dc800217 	ldw	r18,8(sp)
 800abb0:	dc400117 	ldw	r17,4(sp)
 800abb4:	dc000017 	ldw	r16,0(sp)
 800abb8:	dec00504 	addi	sp,sp,20
 800abbc:	f800283a 	ret
 800abc0:	9009883a 	mov	r4,r18
 800abc4:	000b883a 	mov	r5,zero
 800abc8:	800a84c0 	call	800a84c <_Balloc>
 800abcc:	1019883a 	mov	r12,r2
 800abd0:	00800044 	movi	r2,1
 800abd4:	60800415 	stw	r2,16(r12)
 800abd8:	6005883a 	mov	r2,r12
 800abdc:	60000515 	stw	zero,20(r12)
 800abe0:	dfc00417 	ldw	ra,16(sp)
 800abe4:	dcc00317 	ldw	r19,12(sp)
 800abe8:	dc800217 	ldw	r18,8(sp)
 800abec:	dc400117 	ldw	r17,4(sp)
 800abf0:	dc000017 	ldw	r16,0(sp)
 800abf4:	dec00504 	addi	sp,sp,20
 800abf8:	f800283a 	ret
 800abfc:	880d883a 	mov	r6,r17
 800ac00:	04c00044 	movi	r19,1
 800ac04:	8023883a 	mov	r17,r16
 800ac08:	3021883a 	mov	r16,r6
 800ac0c:	003fac06 	br	800aac0 <__mdiff+0x3c>

0800ac10 <__lshift>:
 800ac10:	defff904 	addi	sp,sp,-28
 800ac14:	28800417 	ldw	r2,16(r5)
 800ac18:	dc000015 	stw	r16,0(sp)
 800ac1c:	3021d17a 	srai	r16,r6,5
 800ac20:	28c00217 	ldw	r3,8(r5)
 800ac24:	10800044 	addi	r2,r2,1
 800ac28:	dc400115 	stw	r17,4(sp)
 800ac2c:	80a3883a 	add	r17,r16,r2
 800ac30:	dd400515 	stw	r21,20(sp)
 800ac34:	dd000415 	stw	r20,16(sp)
 800ac38:	dc800215 	stw	r18,8(sp)
 800ac3c:	dfc00615 	stw	ra,24(sp)
 800ac40:	2825883a 	mov	r18,r5
 800ac44:	dcc00315 	stw	r19,12(sp)
 800ac48:	3029883a 	mov	r20,r6
 800ac4c:	202b883a 	mov	r21,r4
 800ac50:	29400117 	ldw	r5,4(r5)
 800ac54:	1c40030e 	bge	r3,r17,800ac64 <__lshift+0x54>
 800ac58:	18c7883a 	add	r3,r3,r3
 800ac5c:	29400044 	addi	r5,r5,1
 800ac60:	1c7ffd16 	blt	r3,r17,800ac58 <__lshift+0x48>
 800ac64:	a809883a 	mov	r4,r21
 800ac68:	800a84c0 	call	800a84c <_Balloc>
 800ac6c:	1027883a 	mov	r19,r2
 800ac70:	11400504 	addi	r5,r2,20
 800ac74:	0400090e 	bge	zero,r16,800ac9c <__lshift+0x8c>
 800ac78:	2805883a 	mov	r2,r5
 800ac7c:	0007883a 	mov	r3,zero
 800ac80:	18c00044 	addi	r3,r3,1
 800ac84:	10000015 	stw	zero,0(r2)
 800ac88:	10800104 	addi	r2,r2,4
 800ac8c:	80fffc1e 	bne	r16,r3,800ac80 <__lshift+0x70>
 800ac90:	8405883a 	add	r2,r16,r16
 800ac94:	1085883a 	add	r2,r2,r2
 800ac98:	288b883a 	add	r5,r5,r2
 800ac9c:	90800417 	ldw	r2,16(r18)
 800aca0:	91000504 	addi	r4,r18,20
 800aca4:	a18007cc 	andi	r6,r20,31
 800aca8:	1085883a 	add	r2,r2,r2
 800acac:	1085883a 	add	r2,r2,r2
 800acb0:	208f883a 	add	r7,r4,r2
 800acb4:	30001e26 	beq	r6,zero,800ad30 <__lshift+0x120>
 800acb8:	00800804 	movi	r2,32
 800acbc:	1191c83a 	sub	r8,r2,r6
 800acc0:	0007883a 	mov	r3,zero
 800acc4:	20800017 	ldw	r2,0(r4)
 800acc8:	1184983a 	sll	r2,r2,r6
 800accc:	1884b03a 	or	r2,r3,r2
 800acd0:	28800015 	stw	r2,0(r5)
 800acd4:	20c00017 	ldw	r3,0(r4)
 800acd8:	21000104 	addi	r4,r4,4
 800acdc:	29400104 	addi	r5,r5,4
 800ace0:	1a06d83a 	srl	r3,r3,r8
 800ace4:	21fff736 	bltu	r4,r7,800acc4 <__lshift+0xb4>
 800ace8:	28c00015 	stw	r3,0(r5)
 800acec:	18000126 	beq	r3,zero,800acf4 <__lshift+0xe4>
 800acf0:	8c400044 	addi	r17,r17,1
 800acf4:	88bfffc4 	addi	r2,r17,-1
 800acf8:	98800415 	stw	r2,16(r19)
 800acfc:	a809883a 	mov	r4,r21
 800ad00:	900b883a 	mov	r5,r18
 800ad04:	800a2cc0 	call	800a2cc <_Bfree>
 800ad08:	9805883a 	mov	r2,r19
 800ad0c:	dfc00617 	ldw	ra,24(sp)
 800ad10:	dd400517 	ldw	r21,20(sp)
 800ad14:	dd000417 	ldw	r20,16(sp)
 800ad18:	dcc00317 	ldw	r19,12(sp)
 800ad1c:	dc800217 	ldw	r18,8(sp)
 800ad20:	dc400117 	ldw	r17,4(sp)
 800ad24:	dc000017 	ldw	r16,0(sp)
 800ad28:	dec00704 	addi	sp,sp,28
 800ad2c:	f800283a 	ret
 800ad30:	20800017 	ldw	r2,0(r4)
 800ad34:	21000104 	addi	r4,r4,4
 800ad38:	28800015 	stw	r2,0(r5)
 800ad3c:	29400104 	addi	r5,r5,4
 800ad40:	21ffec2e 	bgeu	r4,r7,800acf4 <__lshift+0xe4>
 800ad44:	20800017 	ldw	r2,0(r4)
 800ad48:	21000104 	addi	r4,r4,4
 800ad4c:	28800015 	stw	r2,0(r5)
 800ad50:	29400104 	addi	r5,r5,4
 800ad54:	21fff636 	bltu	r4,r7,800ad30 <__lshift+0x120>
 800ad58:	003fe606 	br	800acf4 <__lshift+0xe4>

0800ad5c <__multiply>:
 800ad5c:	defff904 	addi	sp,sp,-28
 800ad60:	dcc00315 	stw	r19,12(sp)
 800ad64:	dc800215 	stw	r18,8(sp)
 800ad68:	2cc00417 	ldw	r19,16(r5)
 800ad6c:	34800417 	ldw	r18,16(r6)
 800ad70:	dd000415 	stw	r20,16(sp)
 800ad74:	dc400115 	stw	r17,4(sp)
 800ad78:	dfc00615 	stw	ra,24(sp)
 800ad7c:	dd400515 	stw	r21,20(sp)
 800ad80:	dc000015 	stw	r16,0(sp)
 800ad84:	2823883a 	mov	r17,r5
 800ad88:	3029883a 	mov	r20,r6
 800ad8c:	9c80040e 	bge	r19,r18,800ada0 <__multiply+0x44>
 800ad90:	9027883a 	mov	r19,r18
 800ad94:	2c800417 	ldw	r18,16(r5)
 800ad98:	2829883a 	mov	r20,r5
 800ad9c:	3023883a 	mov	r17,r6
 800ada0:	88800217 	ldw	r2,8(r17)
 800ada4:	9ca1883a 	add	r16,r19,r18
 800ada8:	89400117 	ldw	r5,4(r17)
 800adac:	1400010e 	bge	r2,r16,800adb4 <__multiply+0x58>
 800adb0:	29400044 	addi	r5,r5,1
 800adb4:	800a84c0 	call	800a84c <_Balloc>
 800adb8:	102b883a 	mov	r21,r2
 800adbc:	8405883a 	add	r2,r16,r16
 800adc0:	1085883a 	add	r2,r2,r2
 800adc4:	a9000504 	addi	r4,r21,20
 800adc8:	209d883a 	add	r14,r4,r2
 800adcc:	2380042e 	bgeu	r4,r14,800ade0 <__multiply+0x84>
 800add0:	2005883a 	mov	r2,r4
 800add4:	10000015 	stw	zero,0(r2)
 800add8:	10800104 	addi	r2,r2,4
 800addc:	13bffd36 	bltu	r2,r14,800add4 <__multiply+0x78>
 800ade0:	9485883a 	add	r2,r18,r18
 800ade4:	9cc7883a 	add	r3,r19,r19
 800ade8:	a1800504 	addi	r6,r20,20
 800adec:	1085883a 	add	r2,r2,r2
 800adf0:	8b400504 	addi	r13,r17,20
 800adf4:	18c7883a 	add	r3,r3,r3
 800adf8:	309f883a 	add	r15,r6,r2
 800adfc:	68d7883a 	add	r11,r13,r3
 800ae00:	33c03b2e 	bgeu	r6,r15,800aef0 <__multiply+0x194>
 800ae04:	2019883a 	mov	r12,r4
 800ae08:	30800017 	ldw	r2,0(r6)
 800ae0c:	127fffcc 	andi	r9,r2,65535
 800ae10:	48001826 	beq	r9,zero,800ae74 <__multiply+0x118>
 800ae14:	6811883a 	mov	r8,r13
 800ae18:	600f883a 	mov	r7,r12
 800ae1c:	0015883a 	mov	r10,zero
 800ae20:	40c00017 	ldw	r3,0(r8)
 800ae24:	39400017 	ldw	r5,0(r7)
 800ae28:	42000104 	addi	r8,r8,4
 800ae2c:	193fffcc 	andi	r4,r3,65535
 800ae30:	4909383a 	mul	r4,r9,r4
 800ae34:	1806d43a 	srli	r3,r3,16
 800ae38:	28bfffcc 	andi	r2,r5,65535
 800ae3c:	5085883a 	add	r2,r10,r2
 800ae40:	2089883a 	add	r4,r4,r2
 800ae44:	48c7383a 	mul	r3,r9,r3
 800ae48:	280ad43a 	srli	r5,r5,16
 800ae4c:	2004d43a 	srli	r2,r4,16
 800ae50:	3900000d 	sth	r4,0(r7)
 800ae54:	1947883a 	add	r3,r3,r5
 800ae58:	10c5883a 	add	r2,r2,r3
 800ae5c:	3880008d 	sth	r2,2(r7)
 800ae60:	1014d43a 	srli	r10,r2,16
 800ae64:	39c00104 	addi	r7,r7,4
 800ae68:	42ffed36 	bltu	r8,r11,800ae20 <__multiply+0xc4>
 800ae6c:	3a800015 	stw	r10,0(r7)
 800ae70:	30800017 	ldw	r2,0(r6)
 800ae74:	1012d43a 	srli	r9,r2,16
 800ae78:	48001926 	beq	r9,zero,800aee0 <__multiply+0x184>
 800ae7c:	60800017 	ldw	r2,0(r12)
 800ae80:	6811883a 	mov	r8,r13
 800ae84:	600f883a 	mov	r7,r12
 800ae88:	0015883a 	mov	r10,zero
 800ae8c:	100b883a 	mov	r5,r2
 800ae90:	41000017 	ldw	r4,0(r8)
 800ae94:	2806d43a 	srli	r3,r5,16
 800ae98:	3880000d 	sth	r2,0(r7)
 800ae9c:	20bfffcc 	andi	r2,r4,65535
 800aea0:	4885383a 	mul	r2,r9,r2
 800aea4:	50c7883a 	add	r3,r10,r3
 800aea8:	2008d43a 	srli	r4,r4,16
 800aeac:	10c5883a 	add	r2,r2,r3
 800aeb0:	3880008d 	sth	r2,2(r7)
 800aeb4:	39c00104 	addi	r7,r7,4
 800aeb8:	39400017 	ldw	r5,0(r7)
 800aebc:	4909383a 	mul	r4,r9,r4
 800aec0:	1004d43a 	srli	r2,r2,16
 800aec4:	28ffffcc 	andi	r3,r5,65535
 800aec8:	20c9883a 	add	r4,r4,r3
 800aecc:	1105883a 	add	r2,r2,r4
 800aed0:	42000104 	addi	r8,r8,4
 800aed4:	1014d43a 	srli	r10,r2,16
 800aed8:	42ffed36 	bltu	r8,r11,800ae90 <__multiply+0x134>
 800aedc:	38800015 	stw	r2,0(r7)
 800aee0:	31800104 	addi	r6,r6,4
 800aee4:	33c0022e 	bgeu	r6,r15,800aef0 <__multiply+0x194>
 800aee8:	63000104 	addi	r12,r12,4
 800aeec:	003fc606 	br	800ae08 <__multiply+0xac>
 800aef0:	0400090e 	bge	zero,r16,800af18 <__multiply+0x1bc>
 800aef4:	70bfff17 	ldw	r2,-4(r14)
 800aef8:	70ffff04 	addi	r3,r14,-4
 800aefc:	10000326 	beq	r2,zero,800af0c <__multiply+0x1b0>
 800af00:	00000506 	br	800af18 <__multiply+0x1bc>
 800af04:	18800017 	ldw	r2,0(r3)
 800af08:	1000031e 	bne	r2,zero,800af18 <__multiply+0x1bc>
 800af0c:	843fffc4 	addi	r16,r16,-1
 800af10:	18ffff04 	addi	r3,r3,-4
 800af14:	803ffb1e 	bne	r16,zero,800af04 <__multiply+0x1a8>
 800af18:	a805883a 	mov	r2,r21
 800af1c:	ac000415 	stw	r16,16(r21)
 800af20:	dfc00617 	ldw	ra,24(sp)
 800af24:	dd400517 	ldw	r21,20(sp)
 800af28:	dd000417 	ldw	r20,16(sp)
 800af2c:	dcc00317 	ldw	r19,12(sp)
 800af30:	dc800217 	ldw	r18,8(sp)
 800af34:	dc400117 	ldw	r17,4(sp)
 800af38:	dc000017 	ldw	r16,0(sp)
 800af3c:	dec00704 	addi	sp,sp,28
 800af40:	f800283a 	ret

0800af44 <__i2b>:
 800af44:	defffd04 	addi	sp,sp,-12
 800af48:	dc000015 	stw	r16,0(sp)
 800af4c:	04000044 	movi	r16,1
 800af50:	dc800115 	stw	r18,4(sp)
 800af54:	2825883a 	mov	r18,r5
 800af58:	800b883a 	mov	r5,r16
 800af5c:	dfc00215 	stw	ra,8(sp)
 800af60:	800a84c0 	call	800a84c <_Balloc>
 800af64:	14000415 	stw	r16,16(r2)
 800af68:	14800515 	stw	r18,20(r2)
 800af6c:	dfc00217 	ldw	ra,8(sp)
 800af70:	dc800117 	ldw	r18,4(sp)
 800af74:	dc000017 	ldw	r16,0(sp)
 800af78:	dec00304 	addi	sp,sp,12
 800af7c:	f800283a 	ret

0800af80 <__multadd>:
 800af80:	defffa04 	addi	sp,sp,-24
 800af84:	dc800215 	stw	r18,8(sp)
 800af88:	2c800417 	ldw	r18,16(r5)
 800af8c:	dd000415 	stw	r20,16(sp)
 800af90:	dcc00315 	stw	r19,12(sp)
 800af94:	dc000015 	stw	r16,0(sp)
 800af98:	dfc00515 	stw	ra,20(sp)
 800af9c:	3821883a 	mov	r16,r7
 800afa0:	dc400115 	stw	r17,4(sp)
 800afa4:	2827883a 	mov	r19,r5
 800afa8:	2029883a 	mov	r20,r4
 800afac:	2a000504 	addi	r8,r5,20
 800afb0:	000f883a 	mov	r7,zero
 800afb4:	40800017 	ldw	r2,0(r8)
 800afb8:	39c00044 	addi	r7,r7,1
 800afbc:	10ffffcc 	andi	r3,r2,65535
 800afc0:	1987383a 	mul	r3,r3,r6
 800afc4:	1004d43a 	srli	r2,r2,16
 800afc8:	1c07883a 	add	r3,r3,r16
 800afcc:	180ad43a 	srli	r5,r3,16
 800afd0:	1185383a 	mul	r2,r2,r6
 800afd4:	18ffffcc 	andi	r3,r3,65535
 800afd8:	1145883a 	add	r2,r2,r5
 800afdc:	1008943a 	slli	r4,r2,16
 800afe0:	1020d43a 	srli	r16,r2,16
 800afe4:	20c9883a 	add	r4,r4,r3
 800afe8:	41000015 	stw	r4,0(r8)
 800afec:	42000104 	addi	r8,r8,4
 800aff0:	3cbff016 	blt	r7,r18,800afb4 <__multadd+0x34>
 800aff4:	80000826 	beq	r16,zero,800b018 <__multadd+0x98>
 800aff8:	98800217 	ldw	r2,8(r19)
 800affc:	90800f0e 	bge	r18,r2,800b03c <__multadd+0xbc>
 800b000:	9485883a 	add	r2,r18,r18
 800b004:	1085883a 	add	r2,r2,r2
 800b008:	14c5883a 	add	r2,r2,r19
 800b00c:	90c00044 	addi	r3,r18,1
 800b010:	14000515 	stw	r16,20(r2)
 800b014:	98c00415 	stw	r3,16(r19)
 800b018:	9805883a 	mov	r2,r19
 800b01c:	dfc00517 	ldw	ra,20(sp)
 800b020:	dd000417 	ldw	r20,16(sp)
 800b024:	dcc00317 	ldw	r19,12(sp)
 800b028:	dc800217 	ldw	r18,8(sp)
 800b02c:	dc400117 	ldw	r17,4(sp)
 800b030:	dc000017 	ldw	r16,0(sp)
 800b034:	dec00604 	addi	sp,sp,24
 800b038:	f800283a 	ret
 800b03c:	99400117 	ldw	r5,4(r19)
 800b040:	a009883a 	mov	r4,r20
 800b044:	29400044 	addi	r5,r5,1
 800b048:	800a84c0 	call	800a84c <_Balloc>
 800b04c:	99800417 	ldw	r6,16(r19)
 800b050:	99400304 	addi	r5,r19,12
 800b054:	11000304 	addi	r4,r2,12
 800b058:	318d883a 	add	r6,r6,r6
 800b05c:	318d883a 	add	r6,r6,r6
 800b060:	31800204 	addi	r6,r6,8
 800b064:	1023883a 	mov	r17,r2
 800b068:	800a0b40 	call	800a0b4 <memcpy>
 800b06c:	980b883a 	mov	r5,r19
 800b070:	a009883a 	mov	r4,r20
 800b074:	800a2cc0 	call	800a2cc <_Bfree>
 800b078:	8827883a 	mov	r19,r17
 800b07c:	003fe006 	br	800b000 <__multadd+0x80>

0800b080 <__pow5mult>:
 800b080:	defffa04 	addi	sp,sp,-24
 800b084:	308000cc 	andi	r2,r6,3
 800b088:	dd000415 	stw	r20,16(sp)
 800b08c:	dcc00315 	stw	r19,12(sp)
 800b090:	dc000015 	stw	r16,0(sp)
 800b094:	dfc00515 	stw	ra,20(sp)
 800b098:	dc800215 	stw	r18,8(sp)
 800b09c:	dc400115 	stw	r17,4(sp)
 800b0a0:	3021883a 	mov	r16,r6
 800b0a4:	2027883a 	mov	r19,r4
 800b0a8:	2829883a 	mov	r20,r5
 800b0ac:	10002b1e 	bne	r2,zero,800b15c <__pow5mult+0xdc>
 800b0b0:	8025d0ba 	srai	r18,r16,2
 800b0b4:	90001b26 	beq	r18,zero,800b124 <__pow5mult+0xa4>
 800b0b8:	9c001217 	ldw	r16,72(r19)
 800b0bc:	8000081e 	bne	r16,zero,800b0e0 <__pow5mult+0x60>
 800b0c0:	00003006 	br	800b184 <__pow5mult+0x104>
 800b0c4:	800b883a 	mov	r5,r16
 800b0c8:	800d883a 	mov	r6,r16
 800b0cc:	9809883a 	mov	r4,r19
 800b0d0:	90001426 	beq	r18,zero,800b124 <__pow5mult+0xa4>
 800b0d4:	80800017 	ldw	r2,0(r16)
 800b0d8:	10001b26 	beq	r2,zero,800b148 <__pow5mult+0xc8>
 800b0dc:	1021883a 	mov	r16,r2
 800b0e0:	9080004c 	andi	r2,r18,1
 800b0e4:	1005003a 	cmpeq	r2,r2,zero
 800b0e8:	9025d07a 	srai	r18,r18,1
 800b0ec:	800d883a 	mov	r6,r16
 800b0f0:	9809883a 	mov	r4,r19
 800b0f4:	a00b883a 	mov	r5,r20
 800b0f8:	103ff21e 	bne	r2,zero,800b0c4 <__pow5mult+0x44>
 800b0fc:	800ad5c0 	call	800ad5c <__multiply>
 800b100:	a00b883a 	mov	r5,r20
 800b104:	9809883a 	mov	r4,r19
 800b108:	1023883a 	mov	r17,r2
 800b10c:	800a2cc0 	call	800a2cc <_Bfree>
 800b110:	8829883a 	mov	r20,r17
 800b114:	800b883a 	mov	r5,r16
 800b118:	800d883a 	mov	r6,r16
 800b11c:	9809883a 	mov	r4,r19
 800b120:	903fec1e 	bne	r18,zero,800b0d4 <__pow5mult+0x54>
 800b124:	a005883a 	mov	r2,r20
 800b128:	dfc00517 	ldw	ra,20(sp)
 800b12c:	dd000417 	ldw	r20,16(sp)
 800b130:	dcc00317 	ldw	r19,12(sp)
 800b134:	dc800217 	ldw	r18,8(sp)
 800b138:	dc400117 	ldw	r17,4(sp)
 800b13c:	dc000017 	ldw	r16,0(sp)
 800b140:	dec00604 	addi	sp,sp,24
 800b144:	f800283a 	ret
 800b148:	800ad5c0 	call	800ad5c <__multiply>
 800b14c:	80800015 	stw	r2,0(r16)
 800b150:	1021883a 	mov	r16,r2
 800b154:	10000015 	stw	zero,0(r2)
 800b158:	003fe106 	br	800b0e0 <__pow5mult+0x60>
 800b15c:	1085883a 	add	r2,r2,r2
 800b160:	00c20074 	movhi	r3,2049
 800b164:	18c71e04 	addi	r3,r3,7288
 800b168:	1085883a 	add	r2,r2,r2
 800b16c:	10c5883a 	add	r2,r2,r3
 800b170:	11bfff17 	ldw	r6,-4(r2)
 800b174:	000f883a 	mov	r7,zero
 800b178:	800af800 	call	800af80 <__multadd>
 800b17c:	1029883a 	mov	r20,r2
 800b180:	003fcb06 	br	800b0b0 <__pow5mult+0x30>
 800b184:	9809883a 	mov	r4,r19
 800b188:	01409c44 	movi	r5,625
 800b18c:	800af440 	call	800af44 <__i2b>
 800b190:	98801215 	stw	r2,72(r19)
 800b194:	1021883a 	mov	r16,r2
 800b198:	10000015 	stw	zero,0(r2)
 800b19c:	003fd006 	br	800b0e0 <__pow5mult+0x60>

0800b1a0 <__s2b>:
 800b1a0:	defff904 	addi	sp,sp,-28
 800b1a4:	dcc00315 	stw	r19,12(sp)
 800b1a8:	dc800215 	stw	r18,8(sp)
 800b1ac:	2827883a 	mov	r19,r5
 800b1b0:	2025883a 	mov	r18,r4
 800b1b4:	01400244 	movi	r5,9
 800b1b8:	39000204 	addi	r4,r7,8
 800b1bc:	dd000415 	stw	r20,16(sp)
 800b1c0:	dc400115 	stw	r17,4(sp)
 800b1c4:	dfc00615 	stw	ra,24(sp)
 800b1c8:	dd400515 	stw	r21,20(sp)
 800b1cc:	dc000015 	stw	r16,0(sp)
 800b1d0:	3829883a 	mov	r20,r7
 800b1d4:	3023883a 	mov	r17,r6
 800b1d8:	80043140 	call	8004314 <__divsi3>
 800b1dc:	00c00044 	movi	r3,1
 800b1e0:	1880350e 	bge	r3,r2,800b2b8 <__s2b+0x118>
 800b1e4:	000b883a 	mov	r5,zero
 800b1e8:	18c7883a 	add	r3,r3,r3
 800b1ec:	29400044 	addi	r5,r5,1
 800b1f0:	18bffd16 	blt	r3,r2,800b1e8 <__s2b+0x48>
 800b1f4:	9009883a 	mov	r4,r18
 800b1f8:	800a84c0 	call	800a84c <_Balloc>
 800b1fc:	1011883a 	mov	r8,r2
 800b200:	d8800717 	ldw	r2,28(sp)
 800b204:	00c00044 	movi	r3,1
 800b208:	01800244 	movi	r6,9
 800b20c:	40800515 	stw	r2,20(r8)
 800b210:	40c00415 	stw	r3,16(r8)
 800b214:	3440260e 	bge	r6,r17,800b2b0 <__s2b+0x110>
 800b218:	3021883a 	mov	r16,r6
 800b21c:	99ab883a 	add	r21,r19,r6
 800b220:	9c05883a 	add	r2,r19,r16
 800b224:	11c00007 	ldb	r7,0(r2)
 800b228:	400b883a 	mov	r5,r8
 800b22c:	9009883a 	mov	r4,r18
 800b230:	39fff404 	addi	r7,r7,-48
 800b234:	01800284 	movi	r6,10
 800b238:	800af800 	call	800af80 <__multadd>
 800b23c:	84000044 	addi	r16,r16,1
 800b240:	1011883a 	mov	r8,r2
 800b244:	8c3ff61e 	bne	r17,r16,800b220 <__s2b+0x80>
 800b248:	ac45883a 	add	r2,r21,r17
 800b24c:	117ffe04 	addi	r5,r2,-8
 800b250:	880d883a 	mov	r6,r17
 800b254:	35000c0e 	bge	r6,r20,800b288 <__s2b+0xe8>
 800b258:	a185c83a 	sub	r2,r20,r6
 800b25c:	2821883a 	mov	r16,r5
 800b260:	28a3883a 	add	r17,r5,r2
 800b264:	81c00007 	ldb	r7,0(r16)
 800b268:	400b883a 	mov	r5,r8
 800b26c:	9009883a 	mov	r4,r18
 800b270:	39fff404 	addi	r7,r7,-48
 800b274:	01800284 	movi	r6,10
 800b278:	800af800 	call	800af80 <__multadd>
 800b27c:	84000044 	addi	r16,r16,1
 800b280:	1011883a 	mov	r8,r2
 800b284:	847ff71e 	bne	r16,r17,800b264 <__s2b+0xc4>
 800b288:	4005883a 	mov	r2,r8
 800b28c:	dfc00617 	ldw	ra,24(sp)
 800b290:	dd400517 	ldw	r21,20(sp)
 800b294:	dd000417 	ldw	r20,16(sp)
 800b298:	dcc00317 	ldw	r19,12(sp)
 800b29c:	dc800217 	ldw	r18,8(sp)
 800b2a0:	dc400117 	ldw	r17,4(sp)
 800b2a4:	dc000017 	ldw	r16,0(sp)
 800b2a8:	dec00704 	addi	sp,sp,28
 800b2ac:	f800283a 	ret
 800b2b0:	99400284 	addi	r5,r19,10
 800b2b4:	003fe706 	br	800b254 <__s2b+0xb4>
 800b2b8:	000b883a 	mov	r5,zero
 800b2bc:	003fcd06 	br	800b1f4 <__s2b+0x54>

0800b2c0 <_realloc_r>:
 800b2c0:	defff404 	addi	sp,sp,-48
 800b2c4:	dd800815 	stw	r22,32(sp)
 800b2c8:	dc800415 	stw	r18,16(sp)
 800b2cc:	dc400315 	stw	r17,12(sp)
 800b2d0:	dfc00b15 	stw	ra,44(sp)
 800b2d4:	df000a15 	stw	fp,40(sp)
 800b2d8:	ddc00915 	stw	r23,36(sp)
 800b2dc:	dd400715 	stw	r21,28(sp)
 800b2e0:	dd000615 	stw	r20,24(sp)
 800b2e4:	dcc00515 	stw	r19,20(sp)
 800b2e8:	dc000215 	stw	r16,8(sp)
 800b2ec:	2825883a 	mov	r18,r5
 800b2f0:	3023883a 	mov	r17,r6
 800b2f4:	202d883a 	mov	r22,r4
 800b2f8:	2800c926 	beq	r5,zero,800b620 <_realloc_r+0x360>
 800b2fc:	800d5040 	call	800d504 <__malloc_lock>
 800b300:	943ffe04 	addi	r16,r18,-8
 800b304:	88c002c4 	addi	r3,r17,11
 800b308:	00800584 	movi	r2,22
 800b30c:	82000117 	ldw	r8,4(r16)
 800b310:	10c01b2e 	bgeu	r2,r3,800b380 <_realloc_r+0xc0>
 800b314:	00bffe04 	movi	r2,-8
 800b318:	188e703a 	and	r7,r3,r2
 800b31c:	3839883a 	mov	fp,r7
 800b320:	38001a16 	blt	r7,zero,800b38c <_realloc_r+0xcc>
 800b324:	e4401936 	bltu	fp,r17,800b38c <_realloc_r+0xcc>
 800b328:	013fff04 	movi	r4,-4
 800b32c:	4126703a 	and	r19,r8,r4
 800b330:	99c02616 	blt	r19,r7,800b3cc <_realloc_r+0x10c>
 800b334:	802b883a 	mov	r21,r16
 800b338:	9829883a 	mov	r20,r19
 800b33c:	84000204 	addi	r16,r16,8
 800b340:	a80f883a 	mov	r7,r21
 800b344:	a70dc83a 	sub	r6,r20,fp
 800b348:	008003c4 	movi	r2,15
 800b34c:	1180c136 	bltu	r2,r6,800b654 <_realloc_r+0x394>
 800b350:	38800117 	ldw	r2,4(r7)
 800b354:	a549883a 	add	r4,r20,r21
 800b358:	1080004c 	andi	r2,r2,1
 800b35c:	a084b03a 	or	r2,r20,r2
 800b360:	38800115 	stw	r2,4(r7)
 800b364:	20c00117 	ldw	r3,4(r4)
 800b368:	18c00054 	ori	r3,r3,1
 800b36c:	20c00115 	stw	r3,4(r4)
 800b370:	b009883a 	mov	r4,r22
 800b374:	800d5240 	call	800d524 <__malloc_unlock>
 800b378:	8023883a 	mov	r17,r16
 800b37c:	00000606 	br	800b398 <_realloc_r+0xd8>
 800b380:	01c00404 	movi	r7,16
 800b384:	3839883a 	mov	fp,r7
 800b388:	e47fe72e 	bgeu	fp,r17,800b328 <_realloc_r+0x68>
 800b38c:	00800304 	movi	r2,12
 800b390:	0023883a 	mov	r17,zero
 800b394:	b0800015 	stw	r2,0(r22)
 800b398:	8805883a 	mov	r2,r17
 800b39c:	dfc00b17 	ldw	ra,44(sp)
 800b3a0:	df000a17 	ldw	fp,40(sp)
 800b3a4:	ddc00917 	ldw	r23,36(sp)
 800b3a8:	dd800817 	ldw	r22,32(sp)
 800b3ac:	dd400717 	ldw	r21,28(sp)
 800b3b0:	dd000617 	ldw	r20,24(sp)
 800b3b4:	dcc00517 	ldw	r19,20(sp)
 800b3b8:	dc800417 	ldw	r18,16(sp)
 800b3bc:	dc400317 	ldw	r17,12(sp)
 800b3c0:	dc000217 	ldw	r16,8(sp)
 800b3c4:	dec00c04 	addi	sp,sp,48
 800b3c8:	f800283a 	ret
 800b3cc:	00820074 	movhi	r2,2049
 800b3d0:	10887904 	addi	r2,r2,8676
 800b3d4:	12400217 	ldw	r9,8(r2)
 800b3d8:	84cd883a 	add	r6,r16,r19
 800b3dc:	802b883a 	mov	r21,r16
 800b3e0:	3240b926 	beq	r6,r9,800b6c8 <_realloc_r+0x408>
 800b3e4:	31400117 	ldw	r5,4(r6)
 800b3e8:	00bfff84 	movi	r2,-2
 800b3ec:	2884703a 	and	r2,r5,r2
 800b3f0:	1185883a 	add	r2,r2,r6
 800b3f4:	10c00117 	ldw	r3,4(r2)
 800b3f8:	18c0004c 	andi	r3,r3,1
 800b3fc:	1807003a 	cmpeq	r3,r3,zero
 800b400:	1800a326 	beq	r3,zero,800b690 <_realloc_r+0x3d0>
 800b404:	2908703a 	and	r4,r5,r4
 800b408:	9929883a 	add	r20,r19,r4
 800b40c:	a1c0a30e 	bge	r20,r7,800b69c <_realloc_r+0x3dc>
 800b410:	4080004c 	andi	r2,r8,1
 800b414:	1000551e 	bne	r2,zero,800b56c <_realloc_r+0x2ac>
 800b418:	80800017 	ldw	r2,0(r16)
 800b41c:	80afc83a 	sub	r23,r16,r2
 800b420:	b8c00117 	ldw	r3,4(r23)
 800b424:	00bfff04 	movi	r2,-4
 800b428:	1884703a 	and	r2,r3,r2
 800b42c:	30002e26 	beq	r6,zero,800b4e8 <_realloc_r+0x228>
 800b430:	3240b926 	beq	r6,r9,800b718 <_realloc_r+0x458>
 800b434:	98a9883a 	add	r20,r19,r2
 800b438:	2509883a 	add	r4,r4,r20
 800b43c:	d9000015 	stw	r4,0(sp)
 800b440:	21c02a16 	blt	r4,r7,800b4ec <_realloc_r+0x22c>
 800b444:	30800317 	ldw	r2,12(r6)
 800b448:	30c00217 	ldw	r3,8(r6)
 800b44c:	01400904 	movi	r5,36
 800b450:	99bfff04 	addi	r6,r19,-4
 800b454:	18800315 	stw	r2,12(r3)
 800b458:	10c00215 	stw	r3,8(r2)
 800b45c:	b9000317 	ldw	r4,12(r23)
 800b460:	b8800217 	ldw	r2,8(r23)
 800b464:	b82b883a 	mov	r21,r23
 800b468:	bc000204 	addi	r16,r23,8
 800b46c:	20800215 	stw	r2,8(r4)
 800b470:	11000315 	stw	r4,12(r2)
 800b474:	2980e436 	bltu	r5,r6,800b808 <_realloc_r+0x548>
 800b478:	008004c4 	movi	r2,19
 800b47c:	9009883a 	mov	r4,r18
 800b480:	8011883a 	mov	r8,r16
 800b484:	11800f2e 	bgeu	r2,r6,800b4c4 <_realloc_r+0x204>
 800b488:	90800017 	ldw	r2,0(r18)
 800b48c:	ba000404 	addi	r8,r23,16
 800b490:	91000204 	addi	r4,r18,8
 800b494:	b8800215 	stw	r2,8(r23)
 800b498:	90c00117 	ldw	r3,4(r18)
 800b49c:	008006c4 	movi	r2,27
 800b4a0:	b8c00315 	stw	r3,12(r23)
 800b4a4:	1180072e 	bgeu	r2,r6,800b4c4 <_realloc_r+0x204>
 800b4a8:	90c00217 	ldw	r3,8(r18)
 800b4ac:	ba000604 	addi	r8,r23,24
 800b4b0:	91000404 	addi	r4,r18,16
 800b4b4:	b8c00415 	stw	r3,16(r23)
 800b4b8:	90800317 	ldw	r2,12(r18)
 800b4bc:	b8800515 	stw	r2,20(r23)
 800b4c0:	3140e726 	beq	r6,r5,800b860 <_realloc_r+0x5a0>
 800b4c4:	20800017 	ldw	r2,0(r4)
 800b4c8:	dd000017 	ldw	r20,0(sp)
 800b4cc:	b80f883a 	mov	r7,r23
 800b4d0:	40800015 	stw	r2,0(r8)
 800b4d4:	20c00117 	ldw	r3,4(r4)
 800b4d8:	40c00115 	stw	r3,4(r8)
 800b4dc:	20800217 	ldw	r2,8(r4)
 800b4e0:	40800215 	stw	r2,8(r8)
 800b4e4:	003f9706 	br	800b344 <_realloc_r+0x84>
 800b4e8:	98a9883a 	add	r20,r19,r2
 800b4ec:	a1c01f16 	blt	r20,r7,800b56c <_realloc_r+0x2ac>
 800b4f0:	b8c00317 	ldw	r3,12(r23)
 800b4f4:	b8800217 	ldw	r2,8(r23)
 800b4f8:	99bfff04 	addi	r6,r19,-4
 800b4fc:	01400904 	movi	r5,36
 800b500:	b82b883a 	mov	r21,r23
 800b504:	18800215 	stw	r2,8(r3)
 800b508:	10c00315 	stw	r3,12(r2)
 800b50c:	bc000204 	addi	r16,r23,8
 800b510:	2980c336 	bltu	r5,r6,800b820 <_realloc_r+0x560>
 800b514:	008004c4 	movi	r2,19
 800b518:	9009883a 	mov	r4,r18
 800b51c:	8011883a 	mov	r8,r16
 800b520:	11800f2e 	bgeu	r2,r6,800b560 <_realloc_r+0x2a0>
 800b524:	90800017 	ldw	r2,0(r18)
 800b528:	ba000404 	addi	r8,r23,16
 800b52c:	91000204 	addi	r4,r18,8
 800b530:	b8800215 	stw	r2,8(r23)
 800b534:	90c00117 	ldw	r3,4(r18)
 800b538:	008006c4 	movi	r2,27
 800b53c:	b8c00315 	stw	r3,12(r23)
 800b540:	1180072e 	bgeu	r2,r6,800b560 <_realloc_r+0x2a0>
 800b544:	90c00217 	ldw	r3,8(r18)
 800b548:	ba000604 	addi	r8,r23,24
 800b54c:	91000404 	addi	r4,r18,16
 800b550:	b8c00415 	stw	r3,16(r23)
 800b554:	90800317 	ldw	r2,12(r18)
 800b558:	b8800515 	stw	r2,20(r23)
 800b55c:	3140c726 	beq	r6,r5,800b87c <_realloc_r+0x5bc>
 800b560:	20800017 	ldw	r2,0(r4)
 800b564:	b80f883a 	mov	r7,r23
 800b568:	003fd906 	br	800b4d0 <_realloc_r+0x210>
 800b56c:	880b883a 	mov	r5,r17
 800b570:	b009883a 	mov	r4,r22
 800b574:	80098900 	call	8009890 <_malloc_r>
 800b578:	1023883a 	mov	r17,r2
 800b57c:	10002526 	beq	r2,zero,800b614 <_realloc_r+0x354>
 800b580:	80800117 	ldw	r2,4(r16)
 800b584:	00ffff84 	movi	r3,-2
 800b588:	893ffe04 	addi	r4,r17,-8
 800b58c:	10c4703a 	and	r2,r2,r3
 800b590:	8085883a 	add	r2,r16,r2
 800b594:	20809526 	beq	r4,r2,800b7ec <_realloc_r+0x52c>
 800b598:	99bfff04 	addi	r6,r19,-4
 800b59c:	01c00904 	movi	r7,36
 800b5a0:	39804536 	bltu	r7,r6,800b6b8 <_realloc_r+0x3f8>
 800b5a4:	008004c4 	movi	r2,19
 800b5a8:	9009883a 	mov	r4,r18
 800b5ac:	880b883a 	mov	r5,r17
 800b5b0:	11800f2e 	bgeu	r2,r6,800b5f0 <_realloc_r+0x330>
 800b5b4:	90800017 	ldw	r2,0(r18)
 800b5b8:	89400204 	addi	r5,r17,8
 800b5bc:	91000204 	addi	r4,r18,8
 800b5c0:	88800015 	stw	r2,0(r17)
 800b5c4:	90c00117 	ldw	r3,4(r18)
 800b5c8:	008006c4 	movi	r2,27
 800b5cc:	88c00115 	stw	r3,4(r17)
 800b5d0:	1180072e 	bgeu	r2,r6,800b5f0 <_realloc_r+0x330>
 800b5d4:	90c00217 	ldw	r3,8(r18)
 800b5d8:	89400404 	addi	r5,r17,16
 800b5dc:	91000404 	addi	r4,r18,16
 800b5e0:	88c00215 	stw	r3,8(r17)
 800b5e4:	90800317 	ldw	r2,12(r18)
 800b5e8:	88800315 	stw	r2,12(r17)
 800b5ec:	31c09126 	beq	r6,r7,800b834 <_realloc_r+0x574>
 800b5f0:	20800017 	ldw	r2,0(r4)
 800b5f4:	28800015 	stw	r2,0(r5)
 800b5f8:	20c00117 	ldw	r3,4(r4)
 800b5fc:	28c00115 	stw	r3,4(r5)
 800b600:	20800217 	ldw	r2,8(r4)
 800b604:	28800215 	stw	r2,8(r5)
 800b608:	900b883a 	mov	r5,r18
 800b60c:	b009883a 	mov	r4,r22
 800b610:	8008d080 	call	8008d08 <_free_r>
 800b614:	b009883a 	mov	r4,r22
 800b618:	800d5240 	call	800d524 <__malloc_unlock>
 800b61c:	003f5e06 	br	800b398 <_realloc_r+0xd8>
 800b620:	300b883a 	mov	r5,r6
 800b624:	dfc00b17 	ldw	ra,44(sp)
 800b628:	df000a17 	ldw	fp,40(sp)
 800b62c:	ddc00917 	ldw	r23,36(sp)
 800b630:	dd800817 	ldw	r22,32(sp)
 800b634:	dd400717 	ldw	r21,28(sp)
 800b638:	dd000617 	ldw	r20,24(sp)
 800b63c:	dcc00517 	ldw	r19,20(sp)
 800b640:	dc800417 	ldw	r18,16(sp)
 800b644:	dc400317 	ldw	r17,12(sp)
 800b648:	dc000217 	ldw	r16,8(sp)
 800b64c:	dec00c04 	addi	sp,sp,48
 800b650:	80098901 	jmpi	8009890 <_malloc_r>
 800b654:	38800117 	ldw	r2,4(r7)
 800b658:	e54b883a 	add	r5,fp,r21
 800b65c:	31000054 	ori	r4,r6,1
 800b660:	1080004c 	andi	r2,r2,1
 800b664:	1704b03a 	or	r2,r2,fp
 800b668:	38800115 	stw	r2,4(r7)
 800b66c:	29000115 	stw	r4,4(r5)
 800b670:	2987883a 	add	r3,r5,r6
 800b674:	18800117 	ldw	r2,4(r3)
 800b678:	29400204 	addi	r5,r5,8
 800b67c:	b009883a 	mov	r4,r22
 800b680:	10800054 	ori	r2,r2,1
 800b684:	18800115 	stw	r2,4(r3)
 800b688:	8008d080 	call	8008d08 <_free_r>
 800b68c:	003f3806 	br	800b370 <_realloc_r+0xb0>
 800b690:	000d883a 	mov	r6,zero
 800b694:	0009883a 	mov	r4,zero
 800b698:	003f5d06 	br	800b410 <_realloc_r+0x150>
 800b69c:	30c00217 	ldw	r3,8(r6)
 800b6a0:	30800317 	ldw	r2,12(r6)
 800b6a4:	800f883a 	mov	r7,r16
 800b6a8:	84000204 	addi	r16,r16,8
 800b6ac:	10c00215 	stw	r3,8(r2)
 800b6b0:	18800315 	stw	r2,12(r3)
 800b6b4:	003f2306 	br	800b344 <_realloc_r+0x84>
 800b6b8:	8809883a 	mov	r4,r17
 800b6bc:	900b883a 	mov	r5,r18
 800b6c0:	800a1540 	call	800a154 <memmove>
 800b6c4:	003fd006 	br	800b608 <_realloc_r+0x348>
 800b6c8:	30800117 	ldw	r2,4(r6)
 800b6cc:	e0c00404 	addi	r3,fp,16
 800b6d0:	1108703a 	and	r4,r2,r4
 800b6d4:	9905883a 	add	r2,r19,r4
 800b6d8:	10ff4d16 	blt	r2,r3,800b410 <_realloc_r+0x150>
 800b6dc:	1705c83a 	sub	r2,r2,fp
 800b6e0:	870b883a 	add	r5,r16,fp
 800b6e4:	10800054 	ori	r2,r2,1
 800b6e8:	28800115 	stw	r2,4(r5)
 800b6ec:	80c00117 	ldw	r3,4(r16)
 800b6f0:	00820074 	movhi	r2,2049
 800b6f4:	10887904 	addi	r2,r2,8676
 800b6f8:	b009883a 	mov	r4,r22
 800b6fc:	18c0004c 	andi	r3,r3,1
 800b700:	e0c6b03a 	or	r3,fp,r3
 800b704:	11400215 	stw	r5,8(r2)
 800b708:	80c00115 	stw	r3,4(r16)
 800b70c:	800d5240 	call	800d524 <__malloc_unlock>
 800b710:	84400204 	addi	r17,r16,8
 800b714:	003f2006 	br	800b398 <_realloc_r+0xd8>
 800b718:	98a9883a 	add	r20,r19,r2
 800b71c:	2509883a 	add	r4,r4,r20
 800b720:	e0800404 	addi	r2,fp,16
 800b724:	d9000115 	stw	r4,4(sp)
 800b728:	20bf7016 	blt	r4,r2,800b4ec <_realloc_r+0x22c>
 800b72c:	b8c00317 	ldw	r3,12(r23)
 800b730:	b8800217 	ldw	r2,8(r23)
 800b734:	99bfff04 	addi	r6,r19,-4
 800b738:	01400904 	movi	r5,36
 800b73c:	18800215 	stw	r2,8(r3)
 800b740:	10c00315 	stw	r3,12(r2)
 800b744:	bc400204 	addi	r17,r23,8
 800b748:	29804136 	bltu	r5,r6,800b850 <_realloc_r+0x590>
 800b74c:	008004c4 	movi	r2,19
 800b750:	9009883a 	mov	r4,r18
 800b754:	880f883a 	mov	r7,r17
 800b758:	11800f2e 	bgeu	r2,r6,800b798 <_realloc_r+0x4d8>
 800b75c:	90800017 	ldw	r2,0(r18)
 800b760:	b9c00404 	addi	r7,r23,16
 800b764:	91000204 	addi	r4,r18,8
 800b768:	b8800215 	stw	r2,8(r23)
 800b76c:	90c00117 	ldw	r3,4(r18)
 800b770:	008006c4 	movi	r2,27
 800b774:	b8c00315 	stw	r3,12(r23)
 800b778:	1180072e 	bgeu	r2,r6,800b798 <_realloc_r+0x4d8>
 800b77c:	90c00217 	ldw	r3,8(r18)
 800b780:	b9c00604 	addi	r7,r23,24
 800b784:	91000404 	addi	r4,r18,16
 800b788:	b8c00415 	stw	r3,16(r23)
 800b78c:	90800317 	ldw	r2,12(r18)
 800b790:	b8800515 	stw	r2,20(r23)
 800b794:	31404026 	beq	r6,r5,800b898 <_realloc_r+0x5d8>
 800b798:	20800017 	ldw	r2,0(r4)
 800b79c:	38800015 	stw	r2,0(r7)
 800b7a0:	20c00117 	ldw	r3,4(r4)
 800b7a4:	38c00115 	stw	r3,4(r7)
 800b7a8:	20800217 	ldw	r2,8(r4)
 800b7ac:	38800215 	stw	r2,8(r7)
 800b7b0:	d8c00117 	ldw	r3,4(sp)
 800b7b4:	bf0b883a 	add	r5,r23,fp
 800b7b8:	b009883a 	mov	r4,r22
 800b7bc:	1f05c83a 	sub	r2,r3,fp
 800b7c0:	10800054 	ori	r2,r2,1
 800b7c4:	28800115 	stw	r2,4(r5)
 800b7c8:	b8c00117 	ldw	r3,4(r23)
 800b7cc:	00820074 	movhi	r2,2049
 800b7d0:	10887904 	addi	r2,r2,8676
 800b7d4:	11400215 	stw	r5,8(r2)
 800b7d8:	18c0004c 	andi	r3,r3,1
 800b7dc:	e0c6b03a 	or	r3,fp,r3
 800b7e0:	b8c00115 	stw	r3,4(r23)
 800b7e4:	800d5240 	call	800d524 <__malloc_unlock>
 800b7e8:	003eeb06 	br	800b398 <_realloc_r+0xd8>
 800b7ec:	20800117 	ldw	r2,4(r4)
 800b7f0:	00ffff04 	movi	r3,-4
 800b7f4:	800f883a 	mov	r7,r16
 800b7f8:	10c4703a 	and	r2,r2,r3
 800b7fc:	98a9883a 	add	r20,r19,r2
 800b800:	84000204 	addi	r16,r16,8
 800b804:	003ecf06 	br	800b344 <_realloc_r+0x84>
 800b808:	900b883a 	mov	r5,r18
 800b80c:	8009883a 	mov	r4,r16
 800b810:	800a1540 	call	800a154 <memmove>
 800b814:	dd000017 	ldw	r20,0(sp)
 800b818:	b80f883a 	mov	r7,r23
 800b81c:	003ec906 	br	800b344 <_realloc_r+0x84>
 800b820:	900b883a 	mov	r5,r18
 800b824:	8009883a 	mov	r4,r16
 800b828:	800a1540 	call	800a154 <memmove>
 800b82c:	b80f883a 	mov	r7,r23
 800b830:	003ec406 	br	800b344 <_realloc_r+0x84>
 800b834:	90c00417 	ldw	r3,16(r18)
 800b838:	89400604 	addi	r5,r17,24
 800b83c:	91000604 	addi	r4,r18,24
 800b840:	88c00415 	stw	r3,16(r17)
 800b844:	90800517 	ldw	r2,20(r18)
 800b848:	88800515 	stw	r2,20(r17)
 800b84c:	003f6806 	br	800b5f0 <_realloc_r+0x330>
 800b850:	900b883a 	mov	r5,r18
 800b854:	8809883a 	mov	r4,r17
 800b858:	800a1540 	call	800a154 <memmove>
 800b85c:	003fd406 	br	800b7b0 <_realloc_r+0x4f0>
 800b860:	90c00417 	ldw	r3,16(r18)
 800b864:	91000604 	addi	r4,r18,24
 800b868:	ba000804 	addi	r8,r23,32
 800b86c:	b8c00615 	stw	r3,24(r23)
 800b870:	90800517 	ldw	r2,20(r18)
 800b874:	b8800715 	stw	r2,28(r23)
 800b878:	003f1206 	br	800b4c4 <_realloc_r+0x204>
 800b87c:	90c00417 	ldw	r3,16(r18)
 800b880:	91000604 	addi	r4,r18,24
 800b884:	ba000804 	addi	r8,r23,32
 800b888:	b8c00615 	stw	r3,24(r23)
 800b88c:	90800517 	ldw	r2,20(r18)
 800b890:	b8800715 	stw	r2,28(r23)
 800b894:	003f3206 	br	800b560 <_realloc_r+0x2a0>
 800b898:	90c00417 	ldw	r3,16(r18)
 800b89c:	91000604 	addi	r4,r18,24
 800b8a0:	b9c00804 	addi	r7,r23,32
 800b8a4:	b8c00615 	stw	r3,24(r23)
 800b8a8:	90800517 	ldw	r2,20(r18)
 800b8ac:	b8800715 	stw	r2,28(r23)
 800b8b0:	003fb906 	br	800b798 <_realloc_r+0x4d8>

0800b8b4 <__isinfd>:
 800b8b4:	200d883a 	mov	r6,r4
 800b8b8:	0109c83a 	sub	r4,zero,r4
 800b8bc:	2188b03a 	or	r4,r4,r6
 800b8c0:	2008d7fa 	srli	r4,r4,31
 800b8c4:	00a00034 	movhi	r2,32768
 800b8c8:	10bfffc4 	addi	r2,r2,-1
 800b8cc:	1144703a 	and	r2,r2,r5
 800b8d0:	2088b03a 	or	r4,r4,r2
 800b8d4:	009ffc34 	movhi	r2,32752
 800b8d8:	1105c83a 	sub	r2,r2,r4
 800b8dc:	0087c83a 	sub	r3,zero,r2
 800b8e0:	10c4b03a 	or	r2,r2,r3
 800b8e4:	1004d7fa 	srli	r2,r2,31
 800b8e8:	00c00044 	movi	r3,1
 800b8ec:	1885c83a 	sub	r2,r3,r2
 800b8f0:	f800283a 	ret

0800b8f4 <_sbrk_r>:
 800b8f4:	defffd04 	addi	sp,sp,-12
 800b8f8:	dc000015 	stw	r16,0(sp)
 800b8fc:	04020074 	movhi	r16,2049
 800b900:	84156404 	addi	r16,r16,21904
 800b904:	dc400115 	stw	r17,4(sp)
 800b908:	80000015 	stw	zero,0(r16)
 800b90c:	2023883a 	mov	r17,r4
 800b910:	2809883a 	mov	r4,r5
 800b914:	dfc00215 	stw	ra,8(sp)
 800b918:	800d7240 	call	800d724 <sbrk>
 800b91c:	1007883a 	mov	r3,r2
 800b920:	00bfffc4 	movi	r2,-1
 800b924:	18800626 	beq	r3,r2,800b940 <_sbrk_r+0x4c>
 800b928:	1805883a 	mov	r2,r3
 800b92c:	dfc00217 	ldw	ra,8(sp)
 800b930:	dc400117 	ldw	r17,4(sp)
 800b934:	dc000017 	ldw	r16,0(sp)
 800b938:	dec00304 	addi	sp,sp,12
 800b93c:	f800283a 	ret
 800b940:	80800017 	ldw	r2,0(r16)
 800b944:	103ff826 	beq	r2,zero,800b928 <_sbrk_r+0x34>
 800b948:	88800015 	stw	r2,0(r17)
 800b94c:	1805883a 	mov	r2,r3
 800b950:	dfc00217 	ldw	ra,8(sp)
 800b954:	dc400117 	ldw	r17,4(sp)
 800b958:	dc000017 	ldw	r16,0(sp)
 800b95c:	dec00304 	addi	sp,sp,12
 800b960:	f800283a 	ret

0800b964 <__sclose>:
 800b964:	2940038f 	ldh	r5,14(r5)
 800b968:	800bc981 	jmpi	800bc98 <_close_r>

0800b96c <__sseek>:
 800b96c:	defffe04 	addi	sp,sp,-8
 800b970:	dc000015 	stw	r16,0(sp)
 800b974:	2821883a 	mov	r16,r5
 800b978:	2940038f 	ldh	r5,14(r5)
 800b97c:	dfc00115 	stw	ra,4(sp)
 800b980:	800bf100 	call	800bf10 <_lseek_r>
 800b984:	1007883a 	mov	r3,r2
 800b988:	00bfffc4 	movi	r2,-1
 800b98c:	18800926 	beq	r3,r2,800b9b4 <__sseek+0x48>
 800b990:	8080030b 	ldhu	r2,12(r16)
 800b994:	80c01415 	stw	r3,80(r16)
 800b998:	10840014 	ori	r2,r2,4096
 800b99c:	8080030d 	sth	r2,12(r16)
 800b9a0:	1805883a 	mov	r2,r3
 800b9a4:	dfc00117 	ldw	ra,4(sp)
 800b9a8:	dc000017 	ldw	r16,0(sp)
 800b9ac:	dec00204 	addi	sp,sp,8
 800b9b0:	f800283a 	ret
 800b9b4:	8080030b 	ldhu	r2,12(r16)
 800b9b8:	10bbffcc 	andi	r2,r2,61439
 800b9bc:	8080030d 	sth	r2,12(r16)
 800b9c0:	1805883a 	mov	r2,r3
 800b9c4:	dfc00117 	ldw	ra,4(sp)
 800b9c8:	dc000017 	ldw	r16,0(sp)
 800b9cc:	dec00204 	addi	sp,sp,8
 800b9d0:	f800283a 	ret

0800b9d4 <__swrite>:
 800b9d4:	2880030b 	ldhu	r2,12(r5)
 800b9d8:	defffb04 	addi	sp,sp,-20
 800b9dc:	dcc00315 	stw	r19,12(sp)
 800b9e0:	1080400c 	andi	r2,r2,256
 800b9e4:	dc800215 	stw	r18,8(sp)
 800b9e8:	dc400115 	stw	r17,4(sp)
 800b9ec:	dc000015 	stw	r16,0(sp)
 800b9f0:	3027883a 	mov	r19,r6
 800b9f4:	3825883a 	mov	r18,r7
 800b9f8:	dfc00415 	stw	ra,16(sp)
 800b9fc:	2821883a 	mov	r16,r5
 800ba00:	000d883a 	mov	r6,zero
 800ba04:	01c00084 	movi	r7,2
 800ba08:	2023883a 	mov	r17,r4
 800ba0c:	10000226 	beq	r2,zero,800ba18 <__swrite+0x44>
 800ba10:	2940038f 	ldh	r5,14(r5)
 800ba14:	800bf100 	call	800bf10 <_lseek_r>
 800ba18:	8080030b 	ldhu	r2,12(r16)
 800ba1c:	8140038f 	ldh	r5,14(r16)
 800ba20:	8809883a 	mov	r4,r17
 800ba24:	10bbffcc 	andi	r2,r2,61439
 800ba28:	980d883a 	mov	r6,r19
 800ba2c:	900f883a 	mov	r7,r18
 800ba30:	8080030d 	sth	r2,12(r16)
 800ba34:	dfc00417 	ldw	ra,16(sp)
 800ba38:	dcc00317 	ldw	r19,12(sp)
 800ba3c:	dc800217 	ldw	r18,8(sp)
 800ba40:	dc400117 	ldw	r17,4(sp)
 800ba44:	dc000017 	ldw	r16,0(sp)
 800ba48:	dec00504 	addi	sp,sp,20
 800ba4c:	800bb6c1 	jmpi	800bb6c <_write_r>

0800ba50 <__sread>:
 800ba50:	defffe04 	addi	sp,sp,-8
 800ba54:	dc000015 	stw	r16,0(sp)
 800ba58:	2821883a 	mov	r16,r5
 800ba5c:	2940038f 	ldh	r5,14(r5)
 800ba60:	dfc00115 	stw	ra,4(sp)
 800ba64:	800bf880 	call	800bf88 <_read_r>
 800ba68:	1007883a 	mov	r3,r2
 800ba6c:	10000816 	blt	r2,zero,800ba90 <__sread+0x40>
 800ba70:	80801417 	ldw	r2,80(r16)
 800ba74:	10c5883a 	add	r2,r2,r3
 800ba78:	80801415 	stw	r2,80(r16)
 800ba7c:	1805883a 	mov	r2,r3
 800ba80:	dfc00117 	ldw	ra,4(sp)
 800ba84:	dc000017 	ldw	r16,0(sp)
 800ba88:	dec00204 	addi	sp,sp,8
 800ba8c:	f800283a 	ret
 800ba90:	8080030b 	ldhu	r2,12(r16)
 800ba94:	10bbffcc 	andi	r2,r2,61439
 800ba98:	8080030d 	sth	r2,12(r16)
 800ba9c:	1805883a 	mov	r2,r3
 800baa0:	dfc00117 	ldw	ra,4(sp)
 800baa4:	dc000017 	ldw	r16,0(sp)
 800baa8:	dec00204 	addi	sp,sp,8
 800baac:	f800283a 	ret

0800bab0 <strcmp>:
 800bab0:	2144b03a 	or	r2,r4,r5
 800bab4:	108000cc 	andi	r2,r2,3
 800bab8:	10001d1e 	bne	r2,zero,800bb30 <strcmp+0x80>
 800babc:	200f883a 	mov	r7,r4
 800bac0:	28800017 	ldw	r2,0(r5)
 800bac4:	21000017 	ldw	r4,0(r4)
 800bac8:	280d883a 	mov	r6,r5
 800bacc:	2080161e 	bne	r4,r2,800bb28 <strcmp+0x78>
 800bad0:	023fbff4 	movhi	r8,65279
 800bad4:	423fbfc4 	addi	r8,r8,-257
 800bad8:	2207883a 	add	r3,r4,r8
 800badc:	01602074 	movhi	r5,32897
 800bae0:	29602004 	addi	r5,r5,-32640
 800bae4:	1946703a 	and	r3,r3,r5
 800bae8:	0104303a 	nor	r2,zero,r4
 800baec:	10c4703a 	and	r2,r2,r3
 800baf0:	10001c1e 	bne	r2,zero,800bb64 <strcmp+0xb4>
 800baf4:	4013883a 	mov	r9,r8
 800baf8:	2811883a 	mov	r8,r5
 800bafc:	00000106 	br	800bb04 <strcmp+0x54>
 800bb00:	1800181e 	bne	r3,zero,800bb64 <strcmp+0xb4>
 800bb04:	39c00104 	addi	r7,r7,4
 800bb08:	39000017 	ldw	r4,0(r7)
 800bb0c:	31800104 	addi	r6,r6,4
 800bb10:	31400017 	ldw	r5,0(r6)
 800bb14:	2245883a 	add	r2,r4,r9
 800bb18:	1204703a 	and	r2,r2,r8
 800bb1c:	0106303a 	nor	r3,zero,r4
 800bb20:	1886703a 	and	r3,r3,r2
 800bb24:	217ff626 	beq	r4,r5,800bb00 <strcmp+0x50>
 800bb28:	3809883a 	mov	r4,r7
 800bb2c:	300b883a 	mov	r5,r6
 800bb30:	20c00007 	ldb	r3,0(r4)
 800bb34:	1800051e 	bne	r3,zero,800bb4c <strcmp+0x9c>
 800bb38:	00000606 	br	800bb54 <strcmp+0xa4>
 800bb3c:	21000044 	addi	r4,r4,1
 800bb40:	20c00007 	ldb	r3,0(r4)
 800bb44:	29400044 	addi	r5,r5,1
 800bb48:	18000226 	beq	r3,zero,800bb54 <strcmp+0xa4>
 800bb4c:	28800007 	ldb	r2,0(r5)
 800bb50:	18bffa26 	beq	r3,r2,800bb3c <strcmp+0x8c>
 800bb54:	20c00003 	ldbu	r3,0(r4)
 800bb58:	28800003 	ldbu	r2,0(r5)
 800bb5c:	1885c83a 	sub	r2,r3,r2
 800bb60:	f800283a 	ret
 800bb64:	0005883a 	mov	r2,zero
 800bb68:	f800283a 	ret

0800bb6c <_write_r>:
 800bb6c:	defffd04 	addi	sp,sp,-12
 800bb70:	dc000015 	stw	r16,0(sp)
 800bb74:	04020074 	movhi	r16,2049
 800bb78:	84156404 	addi	r16,r16,21904
 800bb7c:	dc400115 	stw	r17,4(sp)
 800bb80:	80000015 	stw	zero,0(r16)
 800bb84:	2023883a 	mov	r17,r4
 800bb88:	2809883a 	mov	r4,r5
 800bb8c:	300b883a 	mov	r5,r6
 800bb90:	380d883a 	mov	r6,r7
 800bb94:	dfc00215 	stw	ra,8(sp)
 800bb98:	800d7e00 	call	800d7e0 <write>
 800bb9c:	1007883a 	mov	r3,r2
 800bba0:	00bfffc4 	movi	r2,-1
 800bba4:	18800626 	beq	r3,r2,800bbc0 <_write_r+0x54>
 800bba8:	1805883a 	mov	r2,r3
 800bbac:	dfc00217 	ldw	ra,8(sp)
 800bbb0:	dc400117 	ldw	r17,4(sp)
 800bbb4:	dc000017 	ldw	r16,0(sp)
 800bbb8:	dec00304 	addi	sp,sp,12
 800bbbc:	f800283a 	ret
 800bbc0:	80800017 	ldw	r2,0(r16)
 800bbc4:	103ff826 	beq	r2,zero,800bba8 <_write_r+0x3c>
 800bbc8:	88800015 	stw	r2,0(r17)
 800bbcc:	1805883a 	mov	r2,r3
 800bbd0:	dfc00217 	ldw	ra,8(sp)
 800bbd4:	dc400117 	ldw	r17,4(sp)
 800bbd8:	dc000017 	ldw	r16,0(sp)
 800bbdc:	dec00304 	addi	sp,sp,12
 800bbe0:	f800283a 	ret

0800bbe4 <_calloc_r>:
 800bbe4:	298b383a 	mul	r5,r5,r6
 800bbe8:	defffe04 	addi	sp,sp,-8
 800bbec:	dc000015 	stw	r16,0(sp)
 800bbf0:	dfc00115 	stw	ra,4(sp)
 800bbf4:	80098900 	call	8009890 <_malloc_r>
 800bbf8:	1021883a 	mov	r16,r2
 800bbfc:	01c00904 	movi	r7,36
 800bc00:	10000d26 	beq	r2,zero,800bc38 <_calloc_r+0x54>
 800bc04:	10ffff17 	ldw	r3,-4(r2)
 800bc08:	1009883a 	mov	r4,r2
 800bc0c:	00bfff04 	movi	r2,-4
 800bc10:	1886703a 	and	r3,r3,r2
 800bc14:	1887883a 	add	r3,r3,r2
 800bc18:	180d883a 	mov	r6,r3
 800bc1c:	000b883a 	mov	r5,zero
 800bc20:	38c01736 	bltu	r7,r3,800bc80 <_calloc_r+0x9c>
 800bc24:	008004c4 	movi	r2,19
 800bc28:	10c00836 	bltu	r2,r3,800bc4c <_calloc_r+0x68>
 800bc2c:	20000215 	stw	zero,8(r4)
 800bc30:	20000015 	stw	zero,0(r4)
 800bc34:	20000115 	stw	zero,4(r4)
 800bc38:	8005883a 	mov	r2,r16
 800bc3c:	dfc00117 	ldw	ra,4(sp)
 800bc40:	dc000017 	ldw	r16,0(sp)
 800bc44:	dec00204 	addi	sp,sp,8
 800bc48:	f800283a 	ret
 800bc4c:	008006c4 	movi	r2,27
 800bc50:	80000015 	stw	zero,0(r16)
 800bc54:	80000115 	stw	zero,4(r16)
 800bc58:	81000204 	addi	r4,r16,8
 800bc5c:	10fff32e 	bgeu	r2,r3,800bc2c <_calloc_r+0x48>
 800bc60:	80000215 	stw	zero,8(r16)
 800bc64:	80000315 	stw	zero,12(r16)
 800bc68:	81000404 	addi	r4,r16,16
 800bc6c:	19ffef1e 	bne	r3,r7,800bc2c <_calloc_r+0x48>
 800bc70:	81000604 	addi	r4,r16,24
 800bc74:	80000415 	stw	zero,16(r16)
 800bc78:	80000515 	stw	zero,20(r16)
 800bc7c:	003feb06 	br	800bc2c <_calloc_r+0x48>
 800bc80:	800a2340 	call	800a234 <memset>
 800bc84:	8005883a 	mov	r2,r16
 800bc88:	dfc00117 	ldw	ra,4(sp)
 800bc8c:	dc000017 	ldw	r16,0(sp)
 800bc90:	dec00204 	addi	sp,sp,8
 800bc94:	f800283a 	ret

0800bc98 <_close_r>:
 800bc98:	defffd04 	addi	sp,sp,-12
 800bc9c:	dc000015 	stw	r16,0(sp)
 800bca0:	04020074 	movhi	r16,2049
 800bca4:	84156404 	addi	r16,r16,21904
 800bca8:	dc400115 	stw	r17,4(sp)
 800bcac:	80000015 	stw	zero,0(r16)
 800bcb0:	2023883a 	mov	r17,r4
 800bcb4:	2809883a 	mov	r4,r5
 800bcb8:	dfc00215 	stw	ra,8(sp)
 800bcbc:	800ce800 	call	800ce80 <close>
 800bcc0:	1007883a 	mov	r3,r2
 800bcc4:	00bfffc4 	movi	r2,-1
 800bcc8:	18800626 	beq	r3,r2,800bce4 <_close_r+0x4c>
 800bccc:	1805883a 	mov	r2,r3
 800bcd0:	dfc00217 	ldw	ra,8(sp)
 800bcd4:	dc400117 	ldw	r17,4(sp)
 800bcd8:	dc000017 	ldw	r16,0(sp)
 800bcdc:	dec00304 	addi	sp,sp,12
 800bce0:	f800283a 	ret
 800bce4:	80800017 	ldw	r2,0(r16)
 800bce8:	103ff826 	beq	r2,zero,800bccc <_close_r+0x34>
 800bcec:	88800015 	stw	r2,0(r17)
 800bcf0:	1805883a 	mov	r2,r3
 800bcf4:	dfc00217 	ldw	ra,8(sp)
 800bcf8:	dc400117 	ldw	r17,4(sp)
 800bcfc:	dc000017 	ldw	r16,0(sp)
 800bd00:	dec00304 	addi	sp,sp,12
 800bd04:	f800283a 	ret

0800bd08 <_fclose_r>:
 800bd08:	defffc04 	addi	sp,sp,-16
 800bd0c:	dc400115 	stw	r17,4(sp)
 800bd10:	dc000015 	stw	r16,0(sp)
 800bd14:	dfc00315 	stw	ra,12(sp)
 800bd18:	dc800215 	stw	r18,8(sp)
 800bd1c:	2821883a 	mov	r16,r5
 800bd20:	2023883a 	mov	r17,r4
 800bd24:	28002926 	beq	r5,zero,800bdcc <_fclose_r+0xc4>
 800bd28:	80089740 	call	8008974 <__sfp_lock_acquire>
 800bd2c:	88000226 	beq	r17,zero,800bd38 <_fclose_r+0x30>
 800bd30:	88800e17 	ldw	r2,56(r17)
 800bd34:	10002d26 	beq	r2,zero,800bdec <_fclose_r+0xe4>
 800bd38:	8080030f 	ldh	r2,12(r16)
 800bd3c:	10002226 	beq	r2,zero,800bdc8 <_fclose_r+0xc0>
 800bd40:	8809883a 	mov	r4,r17
 800bd44:	800b883a 	mov	r5,r16
 800bd48:	80086ec0 	call	80086ec <_fflush_r>
 800bd4c:	1025883a 	mov	r18,r2
 800bd50:	80800b17 	ldw	r2,44(r16)
 800bd54:	10000426 	beq	r2,zero,800bd68 <_fclose_r+0x60>
 800bd58:	81400717 	ldw	r5,28(r16)
 800bd5c:	8809883a 	mov	r4,r17
 800bd60:	103ee83a 	callr	r2
 800bd64:	10002a16 	blt	r2,zero,800be10 <_fclose_r+0x108>
 800bd68:	8080030b 	ldhu	r2,12(r16)
 800bd6c:	1080200c 	andi	r2,r2,128
 800bd70:	1000231e 	bne	r2,zero,800be00 <_fclose_r+0xf8>
 800bd74:	81400c17 	ldw	r5,48(r16)
 800bd78:	28000526 	beq	r5,zero,800bd90 <_fclose_r+0x88>
 800bd7c:	80801004 	addi	r2,r16,64
 800bd80:	28800226 	beq	r5,r2,800bd8c <_fclose_r+0x84>
 800bd84:	8809883a 	mov	r4,r17
 800bd88:	8008d080 	call	8008d08 <_free_r>
 800bd8c:	80000c15 	stw	zero,48(r16)
 800bd90:	81401117 	ldw	r5,68(r16)
 800bd94:	28000326 	beq	r5,zero,800bda4 <_fclose_r+0x9c>
 800bd98:	8809883a 	mov	r4,r17
 800bd9c:	8008d080 	call	8008d08 <_free_r>
 800bda0:	80001115 	stw	zero,68(r16)
 800bda4:	8000030d 	sth	zero,12(r16)
 800bda8:	80089780 	call	8008978 <__sfp_lock_release>
 800bdac:	9005883a 	mov	r2,r18
 800bdb0:	dfc00317 	ldw	ra,12(sp)
 800bdb4:	dc800217 	ldw	r18,8(sp)
 800bdb8:	dc400117 	ldw	r17,4(sp)
 800bdbc:	dc000017 	ldw	r16,0(sp)
 800bdc0:	dec00404 	addi	sp,sp,16
 800bdc4:	f800283a 	ret
 800bdc8:	80089780 	call	8008978 <__sfp_lock_release>
 800bdcc:	0025883a 	mov	r18,zero
 800bdd0:	9005883a 	mov	r2,r18
 800bdd4:	dfc00317 	ldw	ra,12(sp)
 800bdd8:	dc800217 	ldw	r18,8(sp)
 800bddc:	dc400117 	ldw	r17,4(sp)
 800bde0:	dc000017 	ldw	r16,0(sp)
 800bde4:	dec00404 	addi	sp,sp,16
 800bde8:	f800283a 	ret
 800bdec:	8809883a 	mov	r4,r17
 800bdf0:	80089840 	call	8008984 <__sinit>
 800bdf4:	8080030f 	ldh	r2,12(r16)
 800bdf8:	103fd11e 	bne	r2,zero,800bd40 <_fclose_r+0x38>
 800bdfc:	003ff206 	br	800bdc8 <_fclose_r+0xc0>
 800be00:	81400417 	ldw	r5,16(r16)
 800be04:	8809883a 	mov	r4,r17
 800be08:	8008d080 	call	8008d08 <_free_r>
 800be0c:	003fd906 	br	800bd74 <_fclose_r+0x6c>
 800be10:	04bfffc4 	movi	r18,-1
 800be14:	003fd406 	br	800bd68 <_fclose_r+0x60>

0800be18 <fclose>:
 800be18:	00820074 	movhi	r2,2049
 800be1c:	108e5204 	addi	r2,r2,14664
 800be20:	200b883a 	mov	r5,r4
 800be24:	11000017 	ldw	r4,0(r2)
 800be28:	800bd081 	jmpi	800bd08 <_fclose_r>

0800be2c <_fstat_r>:
 800be2c:	defffd04 	addi	sp,sp,-12
 800be30:	dc000015 	stw	r16,0(sp)
 800be34:	04020074 	movhi	r16,2049
 800be38:	84156404 	addi	r16,r16,21904
 800be3c:	dc400115 	stw	r17,4(sp)
 800be40:	80000015 	stw	zero,0(r16)
 800be44:	2023883a 	mov	r17,r4
 800be48:	2809883a 	mov	r4,r5
 800be4c:	300b883a 	mov	r5,r6
 800be50:	dfc00215 	stw	ra,8(sp)
 800be54:	800d0080 	call	800d008 <fstat>
 800be58:	1007883a 	mov	r3,r2
 800be5c:	00bfffc4 	movi	r2,-1
 800be60:	18800626 	beq	r3,r2,800be7c <_fstat_r+0x50>
 800be64:	1805883a 	mov	r2,r3
 800be68:	dfc00217 	ldw	ra,8(sp)
 800be6c:	dc400117 	ldw	r17,4(sp)
 800be70:	dc000017 	ldw	r16,0(sp)
 800be74:	dec00304 	addi	sp,sp,12
 800be78:	f800283a 	ret
 800be7c:	80800017 	ldw	r2,0(r16)
 800be80:	103ff826 	beq	r2,zero,800be64 <_fstat_r+0x38>
 800be84:	88800015 	stw	r2,0(r17)
 800be88:	1805883a 	mov	r2,r3
 800be8c:	dfc00217 	ldw	ra,8(sp)
 800be90:	dc400117 	ldw	r17,4(sp)
 800be94:	dc000017 	ldw	r16,0(sp)
 800be98:	dec00304 	addi	sp,sp,12
 800be9c:	f800283a 	ret

0800bea0 <_isatty_r>:
 800bea0:	defffd04 	addi	sp,sp,-12
 800bea4:	dc000015 	stw	r16,0(sp)
 800bea8:	04020074 	movhi	r16,2049
 800beac:	84156404 	addi	r16,r16,21904
 800beb0:	dc400115 	stw	r17,4(sp)
 800beb4:	80000015 	stw	zero,0(r16)
 800beb8:	2023883a 	mov	r17,r4
 800bebc:	2809883a 	mov	r4,r5
 800bec0:	dfc00215 	stw	ra,8(sp)
 800bec4:	800d13c0 	call	800d13c <isatty>
 800bec8:	1007883a 	mov	r3,r2
 800becc:	00bfffc4 	movi	r2,-1
 800bed0:	18800626 	beq	r3,r2,800beec <_isatty_r+0x4c>
 800bed4:	1805883a 	mov	r2,r3
 800bed8:	dfc00217 	ldw	ra,8(sp)
 800bedc:	dc400117 	ldw	r17,4(sp)
 800bee0:	dc000017 	ldw	r16,0(sp)
 800bee4:	dec00304 	addi	sp,sp,12
 800bee8:	f800283a 	ret
 800beec:	80800017 	ldw	r2,0(r16)
 800bef0:	103ff826 	beq	r2,zero,800bed4 <_isatty_r+0x34>
 800bef4:	88800015 	stw	r2,0(r17)
 800bef8:	1805883a 	mov	r2,r3
 800befc:	dfc00217 	ldw	ra,8(sp)
 800bf00:	dc400117 	ldw	r17,4(sp)
 800bf04:	dc000017 	ldw	r16,0(sp)
 800bf08:	dec00304 	addi	sp,sp,12
 800bf0c:	f800283a 	ret

0800bf10 <_lseek_r>:
 800bf10:	defffd04 	addi	sp,sp,-12
 800bf14:	dc000015 	stw	r16,0(sp)
 800bf18:	04020074 	movhi	r16,2049
 800bf1c:	84156404 	addi	r16,r16,21904
 800bf20:	dc400115 	stw	r17,4(sp)
 800bf24:	80000015 	stw	zero,0(r16)
 800bf28:	2023883a 	mov	r17,r4
 800bf2c:	2809883a 	mov	r4,r5
 800bf30:	300b883a 	mov	r5,r6
 800bf34:	380d883a 	mov	r6,r7
 800bf38:	dfc00215 	stw	ra,8(sp)
 800bf3c:	800d3480 	call	800d348 <lseek>
 800bf40:	1007883a 	mov	r3,r2
 800bf44:	00bfffc4 	movi	r2,-1
 800bf48:	18800626 	beq	r3,r2,800bf64 <_lseek_r+0x54>
 800bf4c:	1805883a 	mov	r2,r3
 800bf50:	dfc00217 	ldw	ra,8(sp)
 800bf54:	dc400117 	ldw	r17,4(sp)
 800bf58:	dc000017 	ldw	r16,0(sp)
 800bf5c:	dec00304 	addi	sp,sp,12
 800bf60:	f800283a 	ret
 800bf64:	80800017 	ldw	r2,0(r16)
 800bf68:	103ff826 	beq	r2,zero,800bf4c <_lseek_r+0x3c>
 800bf6c:	88800015 	stw	r2,0(r17)
 800bf70:	1805883a 	mov	r2,r3
 800bf74:	dfc00217 	ldw	ra,8(sp)
 800bf78:	dc400117 	ldw	r17,4(sp)
 800bf7c:	dc000017 	ldw	r16,0(sp)
 800bf80:	dec00304 	addi	sp,sp,12
 800bf84:	f800283a 	ret

0800bf88 <_read_r>:
 800bf88:	defffd04 	addi	sp,sp,-12
 800bf8c:	dc000015 	stw	r16,0(sp)
 800bf90:	04020074 	movhi	r16,2049
 800bf94:	84156404 	addi	r16,r16,21904
 800bf98:	dc400115 	stw	r17,4(sp)
 800bf9c:	80000015 	stw	zero,0(r16)
 800bfa0:	2023883a 	mov	r17,r4
 800bfa4:	2809883a 	mov	r4,r5
 800bfa8:	300b883a 	mov	r5,r6
 800bfac:	380d883a 	mov	r6,r7
 800bfb0:	dfc00215 	stw	ra,8(sp)
 800bfb4:	800d5440 	call	800d544 <read>
 800bfb8:	1007883a 	mov	r3,r2
 800bfbc:	00bfffc4 	movi	r2,-1
 800bfc0:	18800626 	beq	r3,r2,800bfdc <_read_r+0x54>
 800bfc4:	1805883a 	mov	r2,r3
 800bfc8:	dfc00217 	ldw	ra,8(sp)
 800bfcc:	dc400117 	ldw	r17,4(sp)
 800bfd0:	dc000017 	ldw	r16,0(sp)
 800bfd4:	dec00304 	addi	sp,sp,12
 800bfd8:	f800283a 	ret
 800bfdc:	80800017 	ldw	r2,0(r16)
 800bfe0:	103ff826 	beq	r2,zero,800bfc4 <_read_r+0x3c>
 800bfe4:	88800015 	stw	r2,0(r17)
 800bfe8:	1805883a 	mov	r2,r3
 800bfec:	dfc00217 	ldw	ra,8(sp)
 800bff0:	dc400117 	ldw	r17,4(sp)
 800bff4:	dc000017 	ldw	r16,0(sp)
 800bff8:	dec00304 	addi	sp,sp,12
 800bffc:	f800283a 	ret

0800c000 <__udivdi3>:
 800c000:	defff004 	addi	sp,sp,-64
 800c004:	2005883a 	mov	r2,r4
 800c008:	3011883a 	mov	r8,r6
 800c00c:	df000e15 	stw	fp,56(sp)
 800c010:	dd000a15 	stw	r20,40(sp)
 800c014:	dc000615 	stw	r16,24(sp)
 800c018:	dfc00f15 	stw	ra,60(sp)
 800c01c:	ddc00d15 	stw	r23,52(sp)
 800c020:	dd800c15 	stw	r22,48(sp)
 800c024:	dd400b15 	stw	r21,44(sp)
 800c028:	dcc00915 	stw	r19,36(sp)
 800c02c:	dc800815 	stw	r18,32(sp)
 800c030:	dc400715 	stw	r17,28(sp)
 800c034:	4021883a 	mov	r16,r8
 800c038:	1039883a 	mov	fp,r2
 800c03c:	2829883a 	mov	r20,r5
 800c040:	38003b1e 	bne	r7,zero,800c130 <__udivdi3+0x130>
 800c044:	2a005c36 	bltu	r5,r8,800c1b8 <__udivdi3+0x1b8>
 800c048:	4000a626 	beq	r8,zero,800c2e4 <__udivdi3+0x2e4>
 800c04c:	00bfffd4 	movui	r2,65535
 800c050:	14009e36 	bltu	r2,r16,800c2cc <__udivdi3+0x2cc>
 800c054:	00803fc4 	movi	r2,255
 800c058:	14013d36 	bltu	r2,r16,800c550 <__udivdi3+0x550>
 800c05c:	000b883a 	mov	r5,zero
 800c060:	0005883a 	mov	r2,zero
 800c064:	8084d83a 	srl	r2,r16,r2
 800c068:	01020074 	movhi	r4,2049
 800c06c:	21066204 	addi	r4,r4,6536
 800c070:	01800804 	movi	r6,32
 800c074:	1105883a 	add	r2,r2,r4
 800c078:	10c00003 	ldbu	r3,0(r2)
 800c07c:	28c7883a 	add	r3,r5,r3
 800c080:	30edc83a 	sub	r22,r6,r3
 800c084:	b000ee1e 	bne	r22,zero,800c440 <__udivdi3+0x440>
 800c088:	802ad43a 	srli	r21,r16,16
 800c08c:	00800044 	movi	r2,1
 800c090:	a423c83a 	sub	r17,r20,r16
 800c094:	85ffffcc 	andi	r23,r16,65535
 800c098:	d8800315 	stw	r2,12(sp)
 800c09c:	8809883a 	mov	r4,r17
 800c0a0:	a80b883a 	mov	r5,r21
 800c0a4:	80043d40 	call	80043d4 <__udivsi3>
 800c0a8:	8809883a 	mov	r4,r17
 800c0ac:	a80b883a 	mov	r5,r21
 800c0b0:	102d883a 	mov	r22,r2
 800c0b4:	80043dc0 	call	80043dc <__umodsi3>
 800c0b8:	1004943a 	slli	r2,r2,16
 800c0bc:	e006d43a 	srli	r3,fp,16
 800c0c0:	bda3383a 	mul	r17,r23,r22
 800c0c4:	10c4b03a 	or	r2,r2,r3
 800c0c8:	1440042e 	bgeu	r2,r17,800c0dc <__udivdi3+0xdc>
 800c0cc:	1405883a 	add	r2,r2,r16
 800c0d0:	b5bfffc4 	addi	r22,r22,-1
 800c0d4:	14000136 	bltu	r2,r16,800c0dc <__udivdi3+0xdc>
 800c0d8:	14413d36 	bltu	r2,r17,800c5d0 <__udivdi3+0x5d0>
 800c0dc:	1463c83a 	sub	r17,r2,r17
 800c0e0:	8809883a 	mov	r4,r17
 800c0e4:	a80b883a 	mov	r5,r21
 800c0e8:	80043d40 	call	80043d4 <__udivsi3>
 800c0ec:	8809883a 	mov	r4,r17
 800c0f0:	a80b883a 	mov	r5,r21
 800c0f4:	1029883a 	mov	r20,r2
 800c0f8:	80043dc0 	call	80043dc <__umodsi3>
 800c0fc:	1004943a 	slli	r2,r2,16
 800c100:	bd09383a 	mul	r4,r23,r20
 800c104:	e0ffffcc 	andi	r3,fp,65535
 800c108:	10c4b03a 	or	r2,r2,r3
 800c10c:	1100042e 	bgeu	r2,r4,800c120 <__udivdi3+0x120>
 800c110:	8085883a 	add	r2,r16,r2
 800c114:	a53fffc4 	addi	r20,r20,-1
 800c118:	14000136 	bltu	r2,r16,800c120 <__udivdi3+0x120>
 800c11c:	11012036 	bltu	r2,r4,800c5a0 <__udivdi3+0x5a0>
 800c120:	b004943a 	slli	r2,r22,16
 800c124:	d9000317 	ldw	r4,12(sp)
 800c128:	a084b03a 	or	r2,r20,r2
 800c12c:	00001506 	br	800c184 <__udivdi3+0x184>
 800c130:	380d883a 	mov	r6,r7
 800c134:	29c06236 	bltu	r5,r7,800c2c0 <__udivdi3+0x2c0>
 800c138:	00bfffd4 	movui	r2,65535
 800c13c:	11c05a36 	bltu	r2,r7,800c2a8 <__udivdi3+0x2a8>
 800c140:	00803fc4 	movi	r2,255
 800c144:	11c0fc36 	bltu	r2,r7,800c538 <__udivdi3+0x538>
 800c148:	000b883a 	mov	r5,zero
 800c14c:	0005883a 	mov	r2,zero
 800c150:	3084d83a 	srl	r2,r6,r2
 800c154:	01020074 	movhi	r4,2049
 800c158:	21066204 	addi	r4,r4,6536
 800c15c:	01c00804 	movi	r7,32
 800c160:	1105883a 	add	r2,r2,r4
 800c164:	10c00003 	ldbu	r3,0(r2)
 800c168:	28c7883a 	add	r3,r5,r3
 800c16c:	38efc83a 	sub	r23,r7,r3
 800c170:	b800691e 	bne	r23,zero,800c318 <__udivdi3+0x318>
 800c174:	35000136 	bltu	r6,r20,800c17c <__udivdi3+0x17c>
 800c178:	e4005136 	bltu	fp,r16,800c2c0 <__udivdi3+0x2c0>
 800c17c:	00800044 	movi	r2,1
 800c180:	0009883a 	mov	r4,zero
 800c184:	2007883a 	mov	r3,r4
 800c188:	dfc00f17 	ldw	ra,60(sp)
 800c18c:	df000e17 	ldw	fp,56(sp)
 800c190:	ddc00d17 	ldw	r23,52(sp)
 800c194:	dd800c17 	ldw	r22,48(sp)
 800c198:	dd400b17 	ldw	r21,44(sp)
 800c19c:	dd000a17 	ldw	r20,40(sp)
 800c1a0:	dcc00917 	ldw	r19,36(sp)
 800c1a4:	dc800817 	ldw	r18,32(sp)
 800c1a8:	dc400717 	ldw	r17,28(sp)
 800c1ac:	dc000617 	ldw	r16,24(sp)
 800c1b0:	dec01004 	addi	sp,sp,64
 800c1b4:	f800283a 	ret
 800c1b8:	00bfffd4 	movui	r2,65535
 800c1bc:	12005036 	bltu	r2,r8,800c300 <__udivdi3+0x300>
 800c1c0:	00803fc4 	movi	r2,255
 800c1c4:	1200e836 	bltu	r2,r8,800c568 <__udivdi3+0x568>
 800c1c8:	000b883a 	mov	r5,zero
 800c1cc:	0005883a 	mov	r2,zero
 800c1d0:	8084d83a 	srl	r2,r16,r2
 800c1d4:	01020074 	movhi	r4,2049
 800c1d8:	21066204 	addi	r4,r4,6536
 800c1dc:	01800804 	movi	r6,32
 800c1e0:	1105883a 	add	r2,r2,r4
 800c1e4:	10c00003 	ldbu	r3,0(r2)
 800c1e8:	28c7883a 	add	r3,r5,r3
 800c1ec:	30cbc83a 	sub	r5,r6,r3
 800c1f0:	28000626 	beq	r5,zero,800c20c <__udivdi3+0x20c>
 800c1f4:	3145c83a 	sub	r2,r6,r5
 800c1f8:	e084d83a 	srl	r2,fp,r2
 800c1fc:	a146983a 	sll	r3,r20,r5
 800c200:	e178983a 	sll	fp,fp,r5
 800c204:	8160983a 	sll	r16,r16,r5
 800c208:	18a8b03a 	or	r20,r3,r2
 800c20c:	802ad43a 	srli	r21,r16,16
 800c210:	a009883a 	mov	r4,r20
 800c214:	85ffffcc 	andi	r23,r16,65535
 800c218:	a80b883a 	mov	r5,r21
 800c21c:	80043d40 	call	80043d4 <__udivsi3>
 800c220:	a009883a 	mov	r4,r20
 800c224:	a80b883a 	mov	r5,r21
 800c228:	102d883a 	mov	r22,r2
 800c22c:	80043dc0 	call	80043dc <__umodsi3>
 800c230:	1004943a 	slli	r2,r2,16
 800c234:	e006d43a 	srli	r3,fp,16
 800c238:	bda3383a 	mul	r17,r23,r22
 800c23c:	10c4b03a 	or	r2,r2,r3
 800c240:	1440042e 	bgeu	r2,r17,800c254 <__udivdi3+0x254>
 800c244:	1405883a 	add	r2,r2,r16
 800c248:	b5bfffc4 	addi	r22,r22,-1
 800c24c:	14000136 	bltu	r2,r16,800c254 <__udivdi3+0x254>
 800c250:	1440d536 	bltu	r2,r17,800c5a8 <__udivdi3+0x5a8>
 800c254:	1463c83a 	sub	r17,r2,r17
 800c258:	8809883a 	mov	r4,r17
 800c25c:	a80b883a 	mov	r5,r21
 800c260:	80043d40 	call	80043d4 <__udivsi3>
 800c264:	8809883a 	mov	r4,r17
 800c268:	a80b883a 	mov	r5,r21
 800c26c:	1029883a 	mov	r20,r2
 800c270:	80043dc0 	call	80043dc <__umodsi3>
 800c274:	1004943a 	slli	r2,r2,16
 800c278:	bd09383a 	mul	r4,r23,r20
 800c27c:	e0ffffcc 	andi	r3,fp,65535
 800c280:	10c4b03a 	or	r2,r2,r3
 800c284:	1100042e 	bgeu	r2,r4,800c298 <__udivdi3+0x298>
 800c288:	8085883a 	add	r2,r16,r2
 800c28c:	a53fffc4 	addi	r20,r20,-1
 800c290:	14000136 	bltu	r2,r16,800c298 <__udivdi3+0x298>
 800c294:	1100c736 	bltu	r2,r4,800c5b4 <__udivdi3+0x5b4>
 800c298:	b004943a 	slli	r2,r22,16
 800c29c:	0009883a 	mov	r4,zero
 800c2a0:	a084b03a 	or	r2,r20,r2
 800c2a4:	003fb706 	br	800c184 <__udivdi3+0x184>
 800c2a8:	00804034 	movhi	r2,256
 800c2ac:	10bfffc4 	addi	r2,r2,-1
 800c2b0:	11c0a436 	bltu	r2,r7,800c544 <__udivdi3+0x544>
 800c2b4:	01400404 	movi	r5,16
 800c2b8:	2805883a 	mov	r2,r5
 800c2bc:	003fa406 	br	800c150 <__udivdi3+0x150>
 800c2c0:	0005883a 	mov	r2,zero
 800c2c4:	0009883a 	mov	r4,zero
 800c2c8:	003fae06 	br	800c184 <__udivdi3+0x184>
 800c2cc:	00804034 	movhi	r2,256
 800c2d0:	10bfffc4 	addi	r2,r2,-1
 800c2d4:	1400a136 	bltu	r2,r16,800c55c <__udivdi3+0x55c>
 800c2d8:	01400404 	movi	r5,16
 800c2dc:	2805883a 	mov	r2,r5
 800c2e0:	003f6006 	br	800c064 <__udivdi3+0x64>
 800c2e4:	01000044 	movi	r4,1
 800c2e8:	000b883a 	mov	r5,zero
 800c2ec:	80043d40 	call	80043d4 <__udivsi3>
 800c2f0:	1021883a 	mov	r16,r2
 800c2f4:	00bfffd4 	movui	r2,65535
 800c2f8:	143ff436 	bltu	r2,r16,800c2cc <__udivdi3+0x2cc>
 800c2fc:	003f5506 	br	800c054 <__udivdi3+0x54>
 800c300:	00804034 	movhi	r2,256
 800c304:	10bfffc4 	addi	r2,r2,-1
 800c308:	12009a36 	bltu	r2,r8,800c574 <__udivdi3+0x574>
 800c30c:	01400404 	movi	r5,16
 800c310:	2805883a 	mov	r2,r5
 800c314:	003fae06 	br	800c1d0 <__udivdi3+0x1d0>
 800c318:	3dc5c83a 	sub	r2,r7,r23
 800c31c:	35c8983a 	sll	r4,r6,r23
 800c320:	8086d83a 	srl	r3,r16,r2
 800c324:	a0a2d83a 	srl	r17,r20,r2
 800c328:	e084d83a 	srl	r2,fp,r2
 800c32c:	20eab03a 	or	r21,r4,r3
 800c330:	a82cd43a 	srli	r22,r21,16
 800c334:	a5c6983a 	sll	r3,r20,r23
 800c338:	8809883a 	mov	r4,r17
 800c33c:	b00b883a 	mov	r5,r22
 800c340:	1886b03a 	or	r3,r3,r2
 800c344:	d8c00215 	stw	r3,8(sp)
 800c348:	80043d40 	call	80043d4 <__udivsi3>
 800c34c:	8809883a 	mov	r4,r17
 800c350:	b00b883a 	mov	r5,r22
 800c354:	1029883a 	mov	r20,r2
 800c358:	80043dc0 	call	80043dc <__umodsi3>
 800c35c:	a8ffffcc 	andi	r3,r21,65535
 800c360:	d8c00515 	stw	r3,20(sp)
 800c364:	d9000217 	ldw	r4,8(sp)
 800c368:	d9400517 	ldw	r5,20(sp)
 800c36c:	1004943a 	slli	r2,r2,16
 800c370:	2006d43a 	srli	r3,r4,16
 800c374:	85e0983a 	sll	r16,r16,r23
 800c378:	2d23383a 	mul	r17,r5,r20
 800c37c:	10c4b03a 	or	r2,r2,r3
 800c380:	dc000015 	stw	r16,0(sp)
 800c384:	1440032e 	bgeu	r2,r17,800c394 <__udivdi3+0x394>
 800c388:	1545883a 	add	r2,r2,r21
 800c38c:	a53fffc4 	addi	r20,r20,-1
 800c390:	15407f2e 	bgeu	r2,r21,800c590 <__udivdi3+0x590>
 800c394:	1463c83a 	sub	r17,r2,r17
 800c398:	8809883a 	mov	r4,r17
 800c39c:	b00b883a 	mov	r5,r22
 800c3a0:	80043d40 	call	80043d4 <__udivsi3>
 800c3a4:	8809883a 	mov	r4,r17
 800c3a8:	b00b883a 	mov	r5,r22
 800c3ac:	1021883a 	mov	r16,r2
 800c3b0:	80043dc0 	call	80043dc <__umodsi3>
 800c3b4:	d8c00517 	ldw	r3,20(sp)
 800c3b8:	d9000217 	ldw	r4,8(sp)
 800c3bc:	1004943a 	slli	r2,r2,16
 800c3c0:	1c0f383a 	mul	r7,r3,r16
 800c3c4:	20ffffcc 	andi	r3,r4,65535
 800c3c8:	10e2b03a 	or	r17,r2,r3
 800c3cc:	89c0032e 	bgeu	r17,r7,800c3dc <__udivdi3+0x3dc>
 800c3d0:	8d63883a 	add	r17,r17,r21
 800c3d4:	843fffc4 	addi	r16,r16,-1
 800c3d8:	8d40692e 	bgeu	r17,r21,800c580 <__udivdi3+0x580>
 800c3dc:	a008943a 	slli	r4,r20,16
 800c3e0:	d9400017 	ldw	r5,0(sp)
 800c3e4:	89e3c83a 	sub	r17,r17,r7
 800c3e8:	8110b03a 	or	r8,r16,r4
 800c3ec:	280cd43a 	srli	r6,r5,16
 800c3f0:	28ffffcc 	andi	r3,r5,65535
 800c3f4:	40bfffcc 	andi	r2,r8,65535
 800c3f8:	400ad43a 	srli	r5,r8,16
 800c3fc:	10d3383a 	mul	r9,r2,r3
 800c400:	1185383a 	mul	r2,r2,r6
 800c404:	28c7383a 	mul	r3,r5,r3
 800c408:	4808d43a 	srli	r4,r9,16
 800c40c:	298b383a 	mul	r5,r5,r6
 800c410:	10c5883a 	add	r2,r2,r3
 800c414:	2089883a 	add	r4,r4,r2
 800c418:	20c0022e 	bgeu	r4,r3,800c424 <__udivdi3+0x424>
 800c41c:	00800074 	movhi	r2,1
 800c420:	288b883a 	add	r5,r5,r2
 800c424:	2004d43a 	srli	r2,r4,16
 800c428:	288b883a 	add	r5,r5,r2
 800c42c:	89403f36 	bltu	r17,r5,800c52c <__udivdi3+0x52c>
 800c430:	89403926 	beq	r17,r5,800c518 <__udivdi3+0x518>
 800c434:	4005883a 	mov	r2,r8
 800c438:	0009883a 	mov	r4,zero
 800c43c:	003f5106 	br	800c184 <__udivdi3+0x184>
 800c440:	85a0983a 	sll	r16,r16,r22
 800c444:	3585c83a 	sub	r2,r6,r22
 800c448:	a0a2d83a 	srl	r17,r20,r2
 800c44c:	802ad43a 	srli	r21,r16,16
 800c450:	e084d83a 	srl	r2,fp,r2
 800c454:	a586983a 	sll	r3,r20,r22
 800c458:	8809883a 	mov	r4,r17
 800c45c:	a80b883a 	mov	r5,r21
 800c460:	1886b03a 	or	r3,r3,r2
 800c464:	d8c00115 	stw	r3,4(sp)
 800c468:	80043d40 	call	80043d4 <__udivsi3>
 800c46c:	8809883a 	mov	r4,r17
 800c470:	a80b883a 	mov	r5,r21
 800c474:	d8800415 	stw	r2,16(sp)
 800c478:	80043dc0 	call	80043dc <__umodsi3>
 800c47c:	d9000117 	ldw	r4,4(sp)
 800c480:	d9400417 	ldw	r5,16(sp)
 800c484:	1004943a 	slli	r2,r2,16
 800c488:	85ffffcc 	andi	r23,r16,65535
 800c48c:	2006d43a 	srli	r3,r4,16
 800c490:	b963383a 	mul	r17,r23,r5
 800c494:	10c4b03a 	or	r2,r2,r3
 800c498:	1440042e 	bgeu	r2,r17,800c4ac <__udivdi3+0x4ac>
 800c49c:	297fffc4 	addi	r5,r5,-1
 800c4a0:	1405883a 	add	r2,r2,r16
 800c4a4:	d9400415 	stw	r5,16(sp)
 800c4a8:	1400442e 	bgeu	r2,r16,800c5bc <__udivdi3+0x5bc>
 800c4ac:	1463c83a 	sub	r17,r2,r17
 800c4b0:	8809883a 	mov	r4,r17
 800c4b4:	a80b883a 	mov	r5,r21
 800c4b8:	80043d40 	call	80043d4 <__udivsi3>
 800c4bc:	8809883a 	mov	r4,r17
 800c4c0:	a80b883a 	mov	r5,r21
 800c4c4:	1029883a 	mov	r20,r2
 800c4c8:	80043dc0 	call	80043dc <__umodsi3>
 800c4cc:	d9400117 	ldw	r5,4(sp)
 800c4d0:	1004943a 	slli	r2,r2,16
 800c4d4:	bd09383a 	mul	r4,r23,r20
 800c4d8:	28ffffcc 	andi	r3,r5,65535
 800c4dc:	10c6b03a 	or	r3,r2,r3
 800c4e0:	1900062e 	bgeu	r3,r4,800c4fc <__udivdi3+0x4fc>
 800c4e4:	1c07883a 	add	r3,r3,r16
 800c4e8:	a53fffc4 	addi	r20,r20,-1
 800c4ec:	1c000336 	bltu	r3,r16,800c4fc <__udivdi3+0x4fc>
 800c4f0:	1900022e 	bgeu	r3,r4,800c4fc <__udivdi3+0x4fc>
 800c4f4:	a53fffc4 	addi	r20,r20,-1
 800c4f8:	1c07883a 	add	r3,r3,r16
 800c4fc:	d9400417 	ldw	r5,16(sp)
 800c500:	e5b8983a 	sll	fp,fp,r22
 800c504:	1923c83a 	sub	r17,r3,r4
 800c508:	2804943a 	slli	r2,r5,16
 800c50c:	a0a8b03a 	or	r20,r20,r2
 800c510:	dd000315 	stw	r20,12(sp)
 800c514:	003ee106 	br	800c09c <__udivdi3+0x9c>
 800c518:	2004943a 	slli	r2,r4,16
 800c51c:	e5c8983a 	sll	r4,fp,r23
 800c520:	48ffffcc 	andi	r3,r9,65535
 800c524:	10c5883a 	add	r2,r2,r3
 800c528:	20bfc22e 	bgeu	r4,r2,800c434 <__udivdi3+0x434>
 800c52c:	40bfffc4 	addi	r2,r8,-1
 800c530:	0009883a 	mov	r4,zero
 800c534:	003f1306 	br	800c184 <__udivdi3+0x184>
 800c538:	01400204 	movi	r5,8
 800c53c:	2805883a 	mov	r2,r5
 800c540:	003f0306 	br	800c150 <__udivdi3+0x150>
 800c544:	01400604 	movi	r5,24
 800c548:	2805883a 	mov	r2,r5
 800c54c:	003f0006 	br	800c150 <__udivdi3+0x150>
 800c550:	01400204 	movi	r5,8
 800c554:	2805883a 	mov	r2,r5
 800c558:	003ec206 	br	800c064 <__udivdi3+0x64>
 800c55c:	01400604 	movi	r5,24
 800c560:	2805883a 	mov	r2,r5
 800c564:	003ebf06 	br	800c064 <__udivdi3+0x64>
 800c568:	01400204 	movi	r5,8
 800c56c:	2805883a 	mov	r2,r5
 800c570:	003f1706 	br	800c1d0 <__udivdi3+0x1d0>
 800c574:	01400604 	movi	r5,24
 800c578:	2805883a 	mov	r2,r5
 800c57c:	003f1406 	br	800c1d0 <__udivdi3+0x1d0>
 800c580:	89ff962e 	bgeu	r17,r7,800c3dc <__udivdi3+0x3dc>
 800c584:	8d63883a 	add	r17,r17,r21
 800c588:	843fffc4 	addi	r16,r16,-1
 800c58c:	003f9306 	br	800c3dc <__udivdi3+0x3dc>
 800c590:	147f802e 	bgeu	r2,r17,800c394 <__udivdi3+0x394>
 800c594:	a53fffc4 	addi	r20,r20,-1
 800c598:	1545883a 	add	r2,r2,r21
 800c59c:	003f7d06 	br	800c394 <__udivdi3+0x394>
 800c5a0:	a53fffc4 	addi	r20,r20,-1
 800c5a4:	003ede06 	br	800c120 <__udivdi3+0x120>
 800c5a8:	b5bfffc4 	addi	r22,r22,-1
 800c5ac:	1405883a 	add	r2,r2,r16
 800c5b0:	003f2806 	br	800c254 <__udivdi3+0x254>
 800c5b4:	a53fffc4 	addi	r20,r20,-1
 800c5b8:	003f3706 	br	800c298 <__udivdi3+0x298>
 800c5bc:	147fbb2e 	bgeu	r2,r17,800c4ac <__udivdi3+0x4ac>
 800c5c0:	297fffc4 	addi	r5,r5,-1
 800c5c4:	1405883a 	add	r2,r2,r16
 800c5c8:	d9400415 	stw	r5,16(sp)
 800c5cc:	003fb706 	br	800c4ac <__udivdi3+0x4ac>
 800c5d0:	b5bfffc4 	addi	r22,r22,-1
 800c5d4:	1405883a 	add	r2,r2,r16
 800c5d8:	003ec006 	br	800c0dc <__udivdi3+0xdc>

0800c5dc <__umoddi3>:
 800c5dc:	defff104 	addi	sp,sp,-60
 800c5e0:	dd800b15 	stw	r22,44(sp)
 800c5e4:	dd000915 	stw	r20,36(sp)
 800c5e8:	dc000515 	stw	r16,20(sp)
 800c5ec:	dfc00e15 	stw	ra,56(sp)
 800c5f0:	df000d15 	stw	fp,52(sp)
 800c5f4:	ddc00c15 	stw	r23,48(sp)
 800c5f8:	dd400a15 	stw	r21,40(sp)
 800c5fc:	dcc00815 	stw	r19,32(sp)
 800c600:	dc800715 	stw	r18,28(sp)
 800c604:	dc400615 	stw	r17,24(sp)
 800c608:	3021883a 	mov	r16,r6
 800c60c:	202d883a 	mov	r22,r4
 800c610:	2829883a 	mov	r20,r5
 800c614:	38002b1e 	bne	r7,zero,800c6c4 <__umoddi3+0xe8>
 800c618:	29805036 	bltu	r5,r6,800c75c <__umoddi3+0x180>
 800c61c:	30008a26 	beq	r6,zero,800c848 <__umoddi3+0x26c>
 800c620:	00bfffd4 	movui	r2,65535
 800c624:	14008236 	bltu	r2,r16,800c830 <__umoddi3+0x254>
 800c628:	00803fc4 	movi	r2,255
 800c62c:	14013636 	bltu	r2,r16,800cb08 <__umoddi3+0x52c>
 800c630:	000b883a 	mov	r5,zero
 800c634:	0005883a 	mov	r2,zero
 800c638:	8084d83a 	srl	r2,r16,r2
 800c63c:	01020074 	movhi	r4,2049
 800c640:	21066204 	addi	r4,r4,6536
 800c644:	01800804 	movi	r6,32
 800c648:	1105883a 	add	r2,r2,r4
 800c64c:	10c00003 	ldbu	r3,0(r2)
 800c650:	28c7883a 	add	r3,r5,r3
 800c654:	30efc83a 	sub	r23,r6,r3
 800c658:	b800941e 	bne	r23,zero,800c8ac <__umoddi3+0x2d0>
 800c65c:	802ad43a 	srli	r21,r16,16
 800c660:	a423c83a 	sub	r17,r20,r16
 800c664:	0039883a 	mov	fp,zero
 800c668:	853fffcc 	andi	r20,r16,65535
 800c66c:	8809883a 	mov	r4,r17
 800c670:	a80b883a 	mov	r5,r21
 800c674:	80043d40 	call	80043d4 <__udivsi3>
 800c678:	8809883a 	mov	r4,r17
 800c67c:	a80b883a 	mov	r5,r21
 800c680:	a0a3383a 	mul	r17,r20,r2
 800c684:	80043dc0 	call	80043dc <__umodsi3>
 800c688:	1004943a 	slli	r2,r2,16
 800c68c:	b006d43a 	srli	r3,r22,16
 800c690:	10c4b03a 	or	r2,r2,r3
 800c694:	1440032e 	bgeu	r2,r17,800c6a4 <__umoddi3+0xc8>
 800c698:	1405883a 	add	r2,r2,r16
 800c69c:	14000136 	bltu	r2,r16,800c6a4 <__umoddi3+0xc8>
 800c6a0:	14413536 	bltu	r2,r17,800cb78 <__umoddi3+0x59c>
 800c6a4:	1463c83a 	sub	r17,r2,r17
 800c6a8:	8809883a 	mov	r4,r17
 800c6ac:	a80b883a 	mov	r5,r21
 800c6b0:	80043d40 	call	80043d4 <__udivsi3>
 800c6b4:	8809883a 	mov	r4,r17
 800c6b8:	a0a3383a 	mul	r17,r20,r2
 800c6bc:	a80b883a 	mov	r5,r21
 800c6c0:	00004d06 	br	800c7f8 <__umoddi3+0x21c>
 800c6c4:	380d883a 	mov	r6,r7
 800c6c8:	29c0102e 	bgeu	r5,r7,800c70c <__umoddi3+0x130>
 800c6cc:	2011883a 	mov	r8,r4
 800c6d0:	2813883a 	mov	r9,r5
 800c6d4:	4005883a 	mov	r2,r8
 800c6d8:	4807883a 	mov	r3,r9
 800c6dc:	dfc00e17 	ldw	ra,56(sp)
 800c6e0:	df000d17 	ldw	fp,52(sp)
 800c6e4:	ddc00c17 	ldw	r23,48(sp)
 800c6e8:	dd800b17 	ldw	r22,44(sp)
 800c6ec:	dd400a17 	ldw	r21,40(sp)
 800c6f0:	dd000917 	ldw	r20,36(sp)
 800c6f4:	dcc00817 	ldw	r19,32(sp)
 800c6f8:	dc800717 	ldw	r18,28(sp)
 800c6fc:	dc400617 	ldw	r17,24(sp)
 800c700:	dc000517 	ldw	r16,20(sp)
 800c704:	dec00f04 	addi	sp,sp,60
 800c708:	f800283a 	ret
 800c70c:	00bfffd4 	movui	r2,65535
 800c710:	11c05a36 	bltu	r2,r7,800c87c <__umoddi3+0x2a0>
 800c714:	00803fc4 	movi	r2,255
 800c718:	11c0fe36 	bltu	r2,r7,800cb14 <__umoddi3+0x538>
 800c71c:	000b883a 	mov	r5,zero
 800c720:	0005883a 	mov	r2,zero
 800c724:	3084d83a 	srl	r2,r6,r2
 800c728:	01020074 	movhi	r4,2049
 800c72c:	21066204 	addi	r4,r4,6536
 800c730:	01c00804 	movi	r7,32
 800c734:	1105883a 	add	r2,r2,r4
 800c738:	10c00003 	ldbu	r3,0(r2)
 800c73c:	28c7883a 	add	r3,r5,r3
 800c740:	38ebc83a 	sub	r21,r7,r3
 800c744:	a800851e 	bne	r21,zero,800c95c <__umoddi3+0x380>
 800c748:	35005236 	bltu	r6,r20,800c894 <__umoddi3+0x2b8>
 800c74c:	b400512e 	bgeu	r22,r16,800c894 <__umoddi3+0x2b8>
 800c750:	b011883a 	mov	r8,r22
 800c754:	a013883a 	mov	r9,r20
 800c758:	003fde06 	br	800c6d4 <__umoddi3+0xf8>
 800c75c:	00bfffd4 	movui	r2,65535
 800c760:	11804036 	bltu	r2,r6,800c864 <__umoddi3+0x288>
 800c764:	00803fc4 	movi	r2,255
 800c768:	1180ed36 	bltu	r2,r6,800cb20 <__umoddi3+0x544>
 800c76c:	000b883a 	mov	r5,zero
 800c770:	0005883a 	mov	r2,zero
 800c774:	8084d83a 	srl	r2,r16,r2
 800c778:	01020074 	movhi	r4,2049
 800c77c:	21066204 	addi	r4,r4,6536
 800c780:	01800804 	movi	r6,32
 800c784:	1105883a 	add	r2,r2,r4
 800c788:	10c00003 	ldbu	r3,0(r2)
 800c78c:	28c7883a 	add	r3,r5,r3
 800c790:	30c7c83a 	sub	r3,r6,r3
 800c794:	1800bf1e 	bne	r3,zero,800ca94 <__umoddi3+0x4b8>
 800c798:	0039883a 	mov	fp,zero
 800c79c:	802ad43a 	srli	r21,r16,16
 800c7a0:	a009883a 	mov	r4,r20
 800c7a4:	85ffffcc 	andi	r23,r16,65535
 800c7a8:	a80b883a 	mov	r5,r21
 800c7ac:	80043d40 	call	80043d4 <__udivsi3>
 800c7b0:	a009883a 	mov	r4,r20
 800c7b4:	a80b883a 	mov	r5,r21
 800c7b8:	b8a3383a 	mul	r17,r23,r2
 800c7bc:	80043dc0 	call	80043dc <__umodsi3>
 800c7c0:	1004943a 	slli	r2,r2,16
 800c7c4:	b006d43a 	srli	r3,r22,16
 800c7c8:	10c4b03a 	or	r2,r2,r3
 800c7cc:	1440032e 	bgeu	r2,r17,800c7dc <__umoddi3+0x200>
 800c7d0:	1405883a 	add	r2,r2,r16
 800c7d4:	14000136 	bltu	r2,r16,800c7dc <__umoddi3+0x200>
 800c7d8:	1440e536 	bltu	r2,r17,800cb70 <__umoddi3+0x594>
 800c7dc:	1463c83a 	sub	r17,r2,r17
 800c7e0:	8809883a 	mov	r4,r17
 800c7e4:	a80b883a 	mov	r5,r21
 800c7e8:	80043d40 	call	80043d4 <__udivsi3>
 800c7ec:	8809883a 	mov	r4,r17
 800c7f0:	b8a3383a 	mul	r17,r23,r2
 800c7f4:	a80b883a 	mov	r5,r21
 800c7f8:	80043dc0 	call	80043dc <__umodsi3>
 800c7fc:	1004943a 	slli	r2,r2,16
 800c800:	b0ffffcc 	andi	r3,r22,65535
 800c804:	10c4b03a 	or	r2,r2,r3
 800c808:	1440042e 	bgeu	r2,r17,800c81c <__umoddi3+0x240>
 800c80c:	1405883a 	add	r2,r2,r16
 800c810:	14000236 	bltu	r2,r16,800c81c <__umoddi3+0x240>
 800c814:	1440012e 	bgeu	r2,r17,800c81c <__umoddi3+0x240>
 800c818:	1405883a 	add	r2,r2,r16
 800c81c:	1445c83a 	sub	r2,r2,r17
 800c820:	1724d83a 	srl	r18,r2,fp
 800c824:	0013883a 	mov	r9,zero
 800c828:	9011883a 	mov	r8,r18
 800c82c:	003fa906 	br	800c6d4 <__umoddi3+0xf8>
 800c830:	00804034 	movhi	r2,256
 800c834:	10bfffc4 	addi	r2,r2,-1
 800c838:	1400b036 	bltu	r2,r16,800cafc <__umoddi3+0x520>
 800c83c:	01400404 	movi	r5,16
 800c840:	2805883a 	mov	r2,r5
 800c844:	003f7c06 	br	800c638 <__umoddi3+0x5c>
 800c848:	01000044 	movi	r4,1
 800c84c:	000b883a 	mov	r5,zero
 800c850:	80043d40 	call	80043d4 <__udivsi3>
 800c854:	1021883a 	mov	r16,r2
 800c858:	00bfffd4 	movui	r2,65535
 800c85c:	143ff436 	bltu	r2,r16,800c830 <__umoddi3+0x254>
 800c860:	003f7106 	br	800c628 <__umoddi3+0x4c>
 800c864:	00804034 	movhi	r2,256
 800c868:	10bfffc4 	addi	r2,r2,-1
 800c86c:	1180af36 	bltu	r2,r6,800cb2c <__umoddi3+0x550>
 800c870:	01400404 	movi	r5,16
 800c874:	2805883a 	mov	r2,r5
 800c878:	003fbe06 	br	800c774 <__umoddi3+0x198>
 800c87c:	00804034 	movhi	r2,256
 800c880:	10bfffc4 	addi	r2,r2,-1
 800c884:	11c0ac36 	bltu	r2,r7,800cb38 <__umoddi3+0x55c>
 800c888:	01400404 	movi	r5,16
 800c88c:	2805883a 	mov	r2,r5
 800c890:	003fa406 	br	800c724 <__umoddi3+0x148>
 800c894:	b409c83a 	sub	r4,r22,r16
 800c898:	b105803a 	cmpltu	r2,r22,r4
 800c89c:	a187c83a 	sub	r3,r20,r6
 800c8a0:	18a9c83a 	sub	r20,r3,r2
 800c8a4:	202d883a 	mov	r22,r4
 800c8a8:	003fa906 	br	800c750 <__umoddi3+0x174>
 800c8ac:	85e0983a 	sll	r16,r16,r23
 800c8b0:	35c5c83a 	sub	r2,r6,r23
 800c8b4:	a0a2d83a 	srl	r17,r20,r2
 800c8b8:	802ad43a 	srli	r21,r16,16
 800c8bc:	b084d83a 	srl	r2,r22,r2
 800c8c0:	a5c6983a 	sll	r3,r20,r23
 800c8c4:	8809883a 	mov	r4,r17
 800c8c8:	a80b883a 	mov	r5,r21
 800c8cc:	1886b03a 	or	r3,r3,r2
 800c8d0:	d8c00115 	stw	r3,4(sp)
 800c8d4:	853fffcc 	andi	r20,r16,65535
 800c8d8:	80043d40 	call	80043d4 <__udivsi3>
 800c8dc:	8809883a 	mov	r4,r17
 800c8e0:	a80b883a 	mov	r5,r21
 800c8e4:	a0a3383a 	mul	r17,r20,r2
 800c8e8:	80043dc0 	call	80043dc <__umodsi3>
 800c8ec:	d9000117 	ldw	r4,4(sp)
 800c8f0:	1004943a 	slli	r2,r2,16
 800c8f4:	b839883a 	mov	fp,r23
 800c8f8:	2006d43a 	srli	r3,r4,16
 800c8fc:	10c4b03a 	or	r2,r2,r3
 800c900:	1440022e 	bgeu	r2,r17,800c90c <__umoddi3+0x330>
 800c904:	1405883a 	add	r2,r2,r16
 800c908:	1400962e 	bgeu	r2,r16,800cb64 <__umoddi3+0x588>
 800c90c:	1463c83a 	sub	r17,r2,r17
 800c910:	8809883a 	mov	r4,r17
 800c914:	a80b883a 	mov	r5,r21
 800c918:	80043d40 	call	80043d4 <__udivsi3>
 800c91c:	8809883a 	mov	r4,r17
 800c920:	a80b883a 	mov	r5,r21
 800c924:	a0a3383a 	mul	r17,r20,r2
 800c928:	80043dc0 	call	80043dc <__umodsi3>
 800c92c:	d9400117 	ldw	r5,4(sp)
 800c930:	1004943a 	slli	r2,r2,16
 800c934:	28ffffcc 	andi	r3,r5,65535
 800c938:	10c4b03a 	or	r2,r2,r3
 800c93c:	1440042e 	bgeu	r2,r17,800c950 <__umoddi3+0x374>
 800c940:	1405883a 	add	r2,r2,r16
 800c944:	14000236 	bltu	r2,r16,800c950 <__umoddi3+0x374>
 800c948:	1440012e 	bgeu	r2,r17,800c950 <__umoddi3+0x374>
 800c94c:	1405883a 	add	r2,r2,r16
 800c950:	b5ec983a 	sll	r22,r22,r23
 800c954:	1463c83a 	sub	r17,r2,r17
 800c958:	003f4406 	br	800c66c <__umoddi3+0x90>
 800c95c:	3d4fc83a 	sub	r7,r7,r21
 800c960:	3546983a 	sll	r3,r6,r21
 800c964:	81c4d83a 	srl	r2,r16,r7
 800c968:	a1e2d83a 	srl	r17,r20,r7
 800c96c:	a54c983a 	sll	r6,r20,r21
 800c970:	18aeb03a 	or	r23,r3,r2
 800c974:	b828d43a 	srli	r20,r23,16
 800c978:	b1c4d83a 	srl	r2,r22,r7
 800c97c:	8809883a 	mov	r4,r17
 800c980:	a00b883a 	mov	r5,r20
 800c984:	308cb03a 	or	r6,r6,r2
 800c988:	d9c00315 	stw	r7,12(sp)
 800c98c:	d9800215 	stw	r6,8(sp)
 800c990:	80043d40 	call	80043d4 <__udivsi3>
 800c994:	8809883a 	mov	r4,r17
 800c998:	a00b883a 	mov	r5,r20
 800c99c:	1039883a 	mov	fp,r2
 800c9a0:	80043dc0 	call	80043dc <__umodsi3>
 800c9a4:	b8ffffcc 	andi	r3,r23,65535
 800c9a8:	d8c00415 	stw	r3,16(sp)
 800c9ac:	d9000217 	ldw	r4,8(sp)
 800c9b0:	d9400417 	ldw	r5,16(sp)
 800c9b4:	1004943a 	slli	r2,r2,16
 800c9b8:	2006d43a 	srli	r3,r4,16
 800c9bc:	8560983a 	sll	r16,r16,r21
 800c9c0:	2f23383a 	mul	r17,r5,fp
 800c9c4:	10c4b03a 	or	r2,r2,r3
 800c9c8:	dc000015 	stw	r16,0(sp)
 800c9cc:	b56c983a 	sll	r22,r22,r21
 800c9d0:	1440032e 	bgeu	r2,r17,800c9e0 <__umoddi3+0x404>
 800c9d4:	15c5883a 	add	r2,r2,r23
 800c9d8:	e73fffc4 	addi	fp,fp,-1
 800c9dc:	15c05d2e 	bgeu	r2,r23,800cb54 <__umoddi3+0x578>
 800c9e0:	1463c83a 	sub	r17,r2,r17
 800c9e4:	8809883a 	mov	r4,r17
 800c9e8:	a00b883a 	mov	r5,r20
 800c9ec:	80043d40 	call	80043d4 <__udivsi3>
 800c9f0:	8809883a 	mov	r4,r17
 800c9f4:	a00b883a 	mov	r5,r20
 800c9f8:	1021883a 	mov	r16,r2
 800c9fc:	80043dc0 	call	80043dc <__umodsi3>
 800ca00:	d8c00417 	ldw	r3,16(sp)
 800ca04:	d9000217 	ldw	r4,8(sp)
 800ca08:	1004943a 	slli	r2,r2,16
 800ca0c:	1c23383a 	mul	r17,r3,r16
 800ca10:	20ffffcc 	andi	r3,r4,65535
 800ca14:	10ceb03a 	or	r7,r2,r3
 800ca18:	3c40032e 	bgeu	r7,r17,800ca28 <__umoddi3+0x44c>
 800ca1c:	3dcf883a 	add	r7,r7,r23
 800ca20:	843fffc4 	addi	r16,r16,-1
 800ca24:	3dc0472e 	bgeu	r7,r23,800cb44 <__umoddi3+0x568>
 800ca28:	e004943a 	slli	r2,fp,16
 800ca2c:	d9400017 	ldw	r5,0(sp)
 800ca30:	3c4fc83a 	sub	r7,r7,r17
 800ca34:	8084b03a 	or	r2,r16,r2
 800ca38:	28ffffcc 	andi	r3,r5,65535
 800ca3c:	280cd43a 	srli	r6,r5,16
 800ca40:	100ad43a 	srli	r5,r2,16
 800ca44:	10bfffcc 	andi	r2,r2,65535
 800ca48:	10d1383a 	mul	r8,r2,r3
 800ca4c:	28c7383a 	mul	r3,r5,r3
 800ca50:	1185383a 	mul	r2,r2,r6
 800ca54:	4008d43a 	srli	r4,r8,16
 800ca58:	298b383a 	mul	r5,r5,r6
 800ca5c:	10c5883a 	add	r2,r2,r3
 800ca60:	2089883a 	add	r4,r4,r2
 800ca64:	20c0022e 	bgeu	r4,r3,800ca70 <__umoddi3+0x494>
 800ca68:	00800074 	movhi	r2,1
 800ca6c:	288b883a 	add	r5,r5,r2
 800ca70:	2004d43a 	srli	r2,r4,16
 800ca74:	2008943a 	slli	r4,r4,16
 800ca78:	40ffffcc 	andi	r3,r8,65535
 800ca7c:	288b883a 	add	r5,r5,r2
 800ca80:	20c9883a 	add	r4,r4,r3
 800ca84:	39400b36 	bltu	r7,r5,800cab4 <__umoddi3+0x4d8>
 800ca88:	39403d26 	beq	r7,r5,800cb80 <__umoddi3+0x5a4>
 800ca8c:	394bc83a 	sub	r5,r7,r5
 800ca90:	00000f06 	br	800cad0 <__umoddi3+0x4f4>
 800ca94:	30c5c83a 	sub	r2,r6,r3
 800ca98:	1839883a 	mov	fp,r3
 800ca9c:	b084d83a 	srl	r2,r22,r2
 800caa0:	a0c6983a 	sll	r3,r20,r3
 800caa4:	8720983a 	sll	r16,r16,fp
 800caa8:	b72c983a 	sll	r22,r22,fp
 800caac:	18a8b03a 	or	r20,r3,r2
 800cab0:	003f3a06 	br	800c79c <__umoddi3+0x1c0>
 800cab4:	d8c00017 	ldw	r3,0(sp)
 800cab8:	20c5c83a 	sub	r2,r4,r3
 800cabc:	2089803a 	cmpltu	r4,r4,r2
 800cac0:	2dc7c83a 	sub	r3,r5,r23
 800cac4:	1907c83a 	sub	r3,r3,r4
 800cac8:	38cbc83a 	sub	r5,r7,r3
 800cacc:	1009883a 	mov	r4,r2
 800cad0:	b105c83a 	sub	r2,r22,r4
 800cad4:	b087803a 	cmpltu	r3,r22,r2
 800cad8:	28c7c83a 	sub	r3,r5,r3
 800cadc:	d9400317 	ldw	r5,12(sp)
 800cae0:	1544d83a 	srl	r2,r2,r21
 800cae4:	1948983a 	sll	r4,r3,r5
 800cae8:	1d46d83a 	srl	r3,r3,r21
 800caec:	20a4b03a 	or	r18,r4,r2
 800caf0:	9011883a 	mov	r8,r18
 800caf4:	1813883a 	mov	r9,r3
 800caf8:	003ef606 	br	800c6d4 <__umoddi3+0xf8>
 800cafc:	01400604 	movi	r5,24
 800cb00:	2805883a 	mov	r2,r5
 800cb04:	003ecc06 	br	800c638 <__umoddi3+0x5c>
 800cb08:	01400204 	movi	r5,8
 800cb0c:	2805883a 	mov	r2,r5
 800cb10:	003ec906 	br	800c638 <__umoddi3+0x5c>
 800cb14:	01400204 	movi	r5,8
 800cb18:	2805883a 	mov	r2,r5
 800cb1c:	003f0106 	br	800c724 <__umoddi3+0x148>
 800cb20:	01400204 	movi	r5,8
 800cb24:	2805883a 	mov	r2,r5
 800cb28:	003f1206 	br	800c774 <__umoddi3+0x198>
 800cb2c:	01400604 	movi	r5,24
 800cb30:	2805883a 	mov	r2,r5
 800cb34:	003f0f06 	br	800c774 <__umoddi3+0x198>
 800cb38:	01400604 	movi	r5,24
 800cb3c:	2805883a 	mov	r2,r5
 800cb40:	003ef806 	br	800c724 <__umoddi3+0x148>
 800cb44:	3c7fb82e 	bgeu	r7,r17,800ca28 <__umoddi3+0x44c>
 800cb48:	843fffc4 	addi	r16,r16,-1
 800cb4c:	3dcf883a 	add	r7,r7,r23
 800cb50:	003fb506 	br	800ca28 <__umoddi3+0x44c>
 800cb54:	147fa22e 	bgeu	r2,r17,800c9e0 <__umoddi3+0x404>
 800cb58:	e73fffc4 	addi	fp,fp,-1
 800cb5c:	15c5883a 	add	r2,r2,r23
 800cb60:	003f9f06 	br	800c9e0 <__umoddi3+0x404>
 800cb64:	147f692e 	bgeu	r2,r17,800c90c <__umoddi3+0x330>
 800cb68:	1405883a 	add	r2,r2,r16
 800cb6c:	003f6706 	br	800c90c <__umoddi3+0x330>
 800cb70:	1405883a 	add	r2,r2,r16
 800cb74:	003f1906 	br	800c7dc <__umoddi3+0x200>
 800cb78:	1405883a 	add	r2,r2,r16
 800cb7c:	003ec906 	br	800c6a4 <__umoddi3+0xc8>
 800cb80:	b13fcc36 	bltu	r22,r4,800cab4 <__umoddi3+0x4d8>
 800cb84:	000b883a 	mov	r5,zero
 800cb88:	003fd106 	br	800cad0 <__umoddi3+0x4f4>

0800cb8c <__gedf2>:
 800cb8c:	deffef04 	addi	sp,sp,-68
 800cb90:	dc400f15 	stw	r17,60(sp)
 800cb94:	dc400404 	addi	r17,sp,16
 800cb98:	2005883a 	mov	r2,r4
 800cb9c:	2807883a 	mov	r3,r5
 800cba0:	dc000e15 	stw	r16,56(sp)
 800cba4:	d809883a 	mov	r4,sp
 800cba8:	880b883a 	mov	r5,r17
 800cbac:	dc000904 	addi	r16,sp,36
 800cbb0:	d8c00115 	stw	r3,4(sp)
 800cbb4:	d8800015 	stw	r2,0(sp)
 800cbb8:	d9800215 	stw	r6,8(sp)
 800cbbc:	dfc01015 	stw	ra,64(sp)
 800cbc0:	d9c00315 	stw	r7,12(sp)
 800cbc4:	8004b0c0 	call	8004b0c <__unpack_d>
 800cbc8:	d9000204 	addi	r4,sp,8
 800cbcc:	800b883a 	mov	r5,r16
 800cbd0:	8004b0c0 	call	8004b0c <__unpack_d>
 800cbd4:	d8800417 	ldw	r2,16(sp)
 800cbd8:	00c00044 	movi	r3,1
 800cbdc:	01bfffc4 	movi	r6,-1
 800cbe0:	1880062e 	bgeu	r3,r2,800cbfc <__gedf2+0x70>
 800cbe4:	d8800917 	ldw	r2,36(sp)
 800cbe8:	8809883a 	mov	r4,r17
 800cbec:	800b883a 	mov	r5,r16
 800cbf0:	1880022e 	bgeu	r3,r2,800cbfc <__gedf2+0x70>
 800cbf4:	8004c440 	call	8004c44 <__fpcmp_parts_d>
 800cbf8:	100d883a 	mov	r6,r2
 800cbfc:	3005883a 	mov	r2,r6
 800cc00:	dfc01017 	ldw	ra,64(sp)
 800cc04:	dc400f17 	ldw	r17,60(sp)
 800cc08:	dc000e17 	ldw	r16,56(sp)
 800cc0c:	dec01104 	addi	sp,sp,68
 800cc10:	f800283a 	ret

0800cc14 <__fixdfsi>:
 800cc14:	defff804 	addi	sp,sp,-32
 800cc18:	2005883a 	mov	r2,r4
 800cc1c:	2807883a 	mov	r3,r5
 800cc20:	d809883a 	mov	r4,sp
 800cc24:	d9400204 	addi	r5,sp,8
 800cc28:	d8c00115 	stw	r3,4(sp)
 800cc2c:	d8800015 	stw	r2,0(sp)
 800cc30:	dfc00715 	stw	ra,28(sp)
 800cc34:	8004b0c0 	call	8004b0c <__unpack_d>
 800cc38:	d8c00217 	ldw	r3,8(sp)
 800cc3c:	00800084 	movi	r2,2
 800cc40:	1880051e 	bne	r3,r2,800cc58 <__fixdfsi+0x44>
 800cc44:	0007883a 	mov	r3,zero
 800cc48:	1805883a 	mov	r2,r3
 800cc4c:	dfc00717 	ldw	ra,28(sp)
 800cc50:	dec00804 	addi	sp,sp,32
 800cc54:	f800283a 	ret
 800cc58:	00800044 	movi	r2,1
 800cc5c:	10fff92e 	bgeu	r2,r3,800cc44 <__fixdfsi+0x30>
 800cc60:	00800104 	movi	r2,4
 800cc64:	18800426 	beq	r3,r2,800cc78 <__fixdfsi+0x64>
 800cc68:	d8c00417 	ldw	r3,16(sp)
 800cc6c:	183ff516 	blt	r3,zero,800cc44 <__fixdfsi+0x30>
 800cc70:	00800784 	movi	r2,30
 800cc74:	10c0080e 	bge	r2,r3,800cc98 <__fixdfsi+0x84>
 800cc78:	d8800317 	ldw	r2,12(sp)
 800cc7c:	1000121e 	bne	r2,zero,800ccc8 <__fixdfsi+0xb4>
 800cc80:	00e00034 	movhi	r3,32768
 800cc84:	18ffffc4 	addi	r3,r3,-1
 800cc88:	1805883a 	mov	r2,r3
 800cc8c:	dfc00717 	ldw	ra,28(sp)
 800cc90:	dec00804 	addi	sp,sp,32
 800cc94:	f800283a 	ret
 800cc98:	00800f04 	movi	r2,60
 800cc9c:	10d1c83a 	sub	r8,r2,r3
 800cca0:	40bff804 	addi	r2,r8,-32
 800cca4:	d9800517 	ldw	r6,20(sp)
 800cca8:	d9c00617 	ldw	r7,24(sp)
 800ccac:	10000816 	blt	r2,zero,800ccd0 <__fixdfsi+0xbc>
 800ccb0:	3888d83a 	srl	r4,r7,r2
 800ccb4:	d8800317 	ldw	r2,12(sp)
 800ccb8:	2007883a 	mov	r3,r4
 800ccbc:	103fe226 	beq	r2,zero,800cc48 <__fixdfsi+0x34>
 800ccc0:	0107c83a 	sub	r3,zero,r4
 800ccc4:	003fe006 	br	800cc48 <__fixdfsi+0x34>
 800ccc8:	00e00034 	movhi	r3,32768
 800cccc:	003fde06 	br	800cc48 <__fixdfsi+0x34>
 800ccd0:	39c7883a 	add	r3,r7,r7
 800ccd4:	008007c4 	movi	r2,31
 800ccd8:	1205c83a 	sub	r2,r2,r8
 800ccdc:	1886983a 	sll	r3,r3,r2
 800cce0:	3208d83a 	srl	r4,r6,r8
 800cce4:	1908b03a 	or	r4,r3,r4
 800cce8:	003ff206 	br	800ccb4 <__fixdfsi+0xa0>

0800ccec <__floatunsidf>:
 800ccec:	defff204 	addi	sp,sp,-56
 800ccf0:	dfc00d15 	stw	ra,52(sp)
 800ccf4:	ddc00c15 	stw	r23,48(sp)
 800ccf8:	dd800b15 	stw	r22,44(sp)
 800ccfc:	dd400a15 	stw	r21,40(sp)
 800cd00:	dd000915 	stw	r20,36(sp)
 800cd04:	dcc00815 	stw	r19,32(sp)
 800cd08:	dc800715 	stw	r18,28(sp)
 800cd0c:	dc400615 	stw	r17,24(sp)
 800cd10:	dc000515 	stw	r16,20(sp)
 800cd14:	d8000115 	stw	zero,4(sp)
 800cd18:	20000f1e 	bne	r4,zero,800cd58 <__floatunsidf+0x6c>
 800cd1c:	00800084 	movi	r2,2
 800cd20:	d8800015 	stw	r2,0(sp)
 800cd24:	d809883a 	mov	r4,sp
 800cd28:	80047f80 	call	80047f8 <__pack_d>
 800cd2c:	dfc00d17 	ldw	ra,52(sp)
 800cd30:	ddc00c17 	ldw	r23,48(sp)
 800cd34:	dd800b17 	ldw	r22,44(sp)
 800cd38:	dd400a17 	ldw	r21,40(sp)
 800cd3c:	dd000917 	ldw	r20,36(sp)
 800cd40:	dcc00817 	ldw	r19,32(sp)
 800cd44:	dc800717 	ldw	r18,28(sp)
 800cd48:	dc400617 	ldw	r17,24(sp)
 800cd4c:	dc000517 	ldw	r16,20(sp)
 800cd50:	dec00e04 	addi	sp,sp,56
 800cd54:	f800283a 	ret
 800cd58:	008000c4 	movi	r2,3
 800cd5c:	00c00f04 	movi	r3,60
 800cd60:	002f883a 	mov	r23,zero
 800cd64:	202d883a 	mov	r22,r4
 800cd68:	d8800015 	stw	r2,0(sp)
 800cd6c:	d8c00215 	stw	r3,8(sp)
 800cd70:	d9000315 	stw	r4,12(sp)
 800cd74:	ddc00415 	stw	r23,16(sp)
 800cd78:	800447c0 	call	800447c <__clzsi2>
 800cd7c:	12400744 	addi	r9,r2,29
 800cd80:	48000b16 	blt	r9,zero,800cdb0 <__floatunsidf+0xc4>
 800cd84:	483fe726 	beq	r9,zero,800cd24 <__floatunsidf+0x38>
 800cd88:	10bfff44 	addi	r2,r2,-3
 800cd8c:	10002e16 	blt	r2,zero,800ce48 <__floatunsidf+0x15c>
 800cd90:	b0a2983a 	sll	r17,r22,r2
 800cd94:	0021883a 	mov	r16,zero
 800cd98:	d8800217 	ldw	r2,8(sp)
 800cd9c:	dc400415 	stw	r17,16(sp)
 800cda0:	dc000315 	stw	r16,12(sp)
 800cda4:	1245c83a 	sub	r2,r2,r9
 800cda8:	d8800215 	stw	r2,8(sp)
 800cdac:	003fdd06 	br	800cd24 <__floatunsidf+0x38>
 800cdb0:	0255c83a 	sub	r10,zero,r9
 800cdb4:	51bff804 	addi	r6,r10,-32
 800cdb8:	30001b16 	blt	r6,zero,800ce28 <__floatunsidf+0x13c>
 800cdbc:	b9a8d83a 	srl	r20,r23,r6
 800cdc0:	002b883a 	mov	r21,zero
 800cdc4:	000f883a 	mov	r7,zero
 800cdc8:	01000044 	movi	r4,1
 800cdcc:	0011883a 	mov	r8,zero
 800cdd0:	30002516 	blt	r6,zero,800ce68 <__floatunsidf+0x17c>
 800cdd4:	21a6983a 	sll	r19,r4,r6
 800cdd8:	0025883a 	mov	r18,zero
 800cddc:	00bfffc4 	movi	r2,-1
 800cde0:	9089883a 	add	r4,r18,r2
 800cde4:	988b883a 	add	r5,r19,r2
 800cde8:	248d803a 	cmpltu	r6,r4,r18
 800cdec:	314b883a 	add	r5,r6,r5
 800cdf0:	b104703a 	and	r2,r22,r4
 800cdf4:	b946703a 	and	r3,r23,r5
 800cdf8:	10c4b03a 	or	r2,r2,r3
 800cdfc:	10000226 	beq	r2,zero,800ce08 <__floatunsidf+0x11c>
 800ce00:	01c00044 	movi	r7,1
 800ce04:	0011883a 	mov	r8,zero
 800ce08:	d9000217 	ldw	r4,8(sp)
 800ce0c:	a1c4b03a 	or	r2,r20,r7
 800ce10:	aa06b03a 	or	r3,r21,r8
 800ce14:	2249c83a 	sub	r4,r4,r9
 800ce18:	d8c00415 	stw	r3,16(sp)
 800ce1c:	d9000215 	stw	r4,8(sp)
 800ce20:	d8800315 	stw	r2,12(sp)
 800ce24:	003fbf06 	br	800cd24 <__floatunsidf+0x38>
 800ce28:	bdc7883a 	add	r3,r23,r23
 800ce2c:	008007c4 	movi	r2,31
 800ce30:	1285c83a 	sub	r2,r2,r10
 800ce34:	1886983a 	sll	r3,r3,r2
 800ce38:	b2a8d83a 	srl	r20,r22,r10
 800ce3c:	baaad83a 	srl	r21,r23,r10
 800ce40:	1d28b03a 	or	r20,r3,r20
 800ce44:	003fdf06 	br	800cdc4 <__floatunsidf+0xd8>
 800ce48:	b006d07a 	srli	r3,r22,1
 800ce4c:	008007c4 	movi	r2,31
 800ce50:	1245c83a 	sub	r2,r2,r9
 800ce54:	1886d83a 	srl	r3,r3,r2
 800ce58:	ba62983a 	sll	r17,r23,r9
 800ce5c:	b260983a 	sll	r16,r22,r9
 800ce60:	1c62b03a 	or	r17,r3,r17
 800ce64:	003fcc06 	br	800cd98 <__floatunsidf+0xac>
 800ce68:	2006d07a 	srli	r3,r4,1
 800ce6c:	008007c4 	movi	r2,31
 800ce70:	1285c83a 	sub	r2,r2,r10
 800ce74:	18a6d83a 	srl	r19,r3,r2
 800ce78:	22a4983a 	sll	r18,r4,r10
 800ce7c:	003fd706 	br	800cddc <__floatunsidf+0xf0>

0800ce80 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 800ce80:	defff804 	addi	sp,sp,-32
 800ce84:	dfc00715 	stw	ra,28(sp)
 800ce88:	df000615 	stw	fp,24(sp)
 800ce8c:	df000604 	addi	fp,sp,24
 800ce90:	e13ffc15 	stw	r4,-16(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 800ce94:	e0bffc17 	ldw	r2,-16(fp)
 800ce98:	1004803a 	cmplt	r2,r2,zero
 800ce9c:	1000081e 	bne	r2,zero,800cec0 <close+0x40>
 800cea0:	e0bffc17 	ldw	r2,-16(fp)
 800cea4:	10800324 	muli	r2,r2,12
 800cea8:	1007883a 	mov	r3,r2
 800ceac:	00820074 	movhi	r2,2049
 800ceb0:	10898504 	addi	r2,r2,9748
 800ceb4:	1887883a 	add	r3,r3,r2
 800ceb8:	e0ffff15 	stw	r3,-4(fp)
 800cebc:	00000106 	br	800cec4 <close+0x44>
 800cec0:	e03fff15 	stw	zero,-4(fp)
 800cec4:	e0bfff17 	ldw	r2,-4(fp)
 800cec8:	e0bffb15 	stw	r2,-20(fp)

  if (fd)
 800cecc:	e0bffb17 	ldw	r2,-20(fp)
 800ced0:	1005003a 	cmpeq	r2,r2,zero
 800ced4:	10001d1e 	bne	r2,zero,800cf4c <close+0xcc>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 800ced8:	e0bffb17 	ldw	r2,-20(fp)
 800cedc:	10800017 	ldw	r2,0(r2)
 800cee0:	10800417 	ldw	r2,16(r2)
 800cee4:	1005003a 	cmpeq	r2,r2,zero
 800cee8:	1000071e 	bne	r2,zero,800cf08 <close+0x88>
 800ceec:	e0bffb17 	ldw	r2,-20(fp)
 800cef0:	10800017 	ldw	r2,0(r2)
 800cef4:	10800417 	ldw	r2,16(r2)
 800cef8:	e13ffb17 	ldw	r4,-20(fp)
 800cefc:	103ee83a 	callr	r2
 800cf00:	e0bffe15 	stw	r2,-8(fp)
 800cf04:	00000106 	br	800cf0c <close+0x8c>
 800cf08:	e03ffe15 	stw	zero,-8(fp)
 800cf0c:	e0bffe17 	ldw	r2,-8(fp)
 800cf10:	e0bffa15 	stw	r2,-24(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 800cf14:	e13ffc17 	ldw	r4,-16(fp)
 800cf18:	800d6c40 	call	800d6c4 <alt_release_fd>
    if (rval < 0)
 800cf1c:	e0bffa17 	ldw	r2,-24(fp)
 800cf20:	1004403a 	cmpge	r2,r2,zero
 800cf24:	1000071e 	bne	r2,zero,800cf44 <close+0xc4>
    {
      ALT_ERRNO = -rval;
 800cf28:	800cf7c0 	call	800cf7c <alt_get_errno>
 800cf2c:	e0fffa17 	ldw	r3,-24(fp)
 800cf30:	00c7c83a 	sub	r3,zero,r3
 800cf34:	10c00015 	stw	r3,0(r2)
      return -1;
 800cf38:	00bfffc4 	movi	r2,-1
 800cf3c:	e0bffd15 	stw	r2,-12(fp)
 800cf40:	00000806 	br	800cf64 <close+0xe4>
    }
    return 0;
 800cf44:	e03ffd15 	stw	zero,-12(fp)
 800cf48:	00000606 	br	800cf64 <close+0xe4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 800cf4c:	800cf7c0 	call	800cf7c <alt_get_errno>
 800cf50:	1007883a 	mov	r3,r2
 800cf54:	00801444 	movi	r2,81
 800cf58:	18800015 	stw	r2,0(r3)
    return -1;
 800cf5c:	00bfffc4 	movi	r2,-1
 800cf60:	e0bffd15 	stw	r2,-12(fp)
 800cf64:	e0bffd17 	ldw	r2,-12(fp)
  }
}
 800cf68:	e037883a 	mov	sp,fp
 800cf6c:	dfc00117 	ldw	ra,4(sp)
 800cf70:	df000017 	ldw	fp,0(sp)
 800cf74:	dec00204 	addi	sp,sp,8
 800cf78:	f800283a 	ret

0800cf7c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 800cf7c:	defffd04 	addi	sp,sp,-12
 800cf80:	dfc00215 	stw	ra,8(sp)
 800cf84:	df000115 	stw	fp,4(sp)
 800cf88:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 800cf8c:	00820074 	movhi	r2,2049
 800cf90:	108e5d04 	addi	r2,r2,14708
 800cf94:	10800017 	ldw	r2,0(r2)
 800cf98:	1005003a 	cmpeq	r2,r2,zero
 800cf9c:	1000061e 	bne	r2,zero,800cfb8 <alt_get_errno+0x3c>
 800cfa0:	00820074 	movhi	r2,2049
 800cfa4:	108e5d04 	addi	r2,r2,14708
 800cfa8:	10800017 	ldw	r2,0(r2)
 800cfac:	103ee83a 	callr	r2
 800cfb0:	e0bfff15 	stw	r2,-4(fp)
 800cfb4:	00000306 	br	800cfc4 <alt_get_errno+0x48>
 800cfb8:	00820074 	movhi	r2,2049
 800cfbc:	10956404 	addi	r2,r2,21904
 800cfc0:	e0bfff15 	stw	r2,-4(fp)
 800cfc4:	e0bfff17 	ldw	r2,-4(fp)
}
 800cfc8:	e037883a 	mov	sp,fp
 800cfcc:	dfc00117 	ldw	ra,4(sp)
 800cfd0:	df000017 	ldw	fp,0(sp)
 800cfd4:	dec00204 	addi	sp,sp,8
 800cfd8:	f800283a 	ret

0800cfdc <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 800cfdc:	defffc04 	addi	sp,sp,-16
 800cfe0:	df000315 	stw	fp,12(sp)
 800cfe4:	df000304 	addi	fp,sp,12
 800cfe8:	e13ffd15 	stw	r4,-12(fp)
 800cfec:	e17ffe15 	stw	r5,-8(fp)
 800cff0:	e1bfff15 	stw	r6,-4(fp)
  return len;
 800cff4:	e0bfff17 	ldw	r2,-4(fp)
}
 800cff8:	e037883a 	mov	sp,fp
 800cffc:	df000017 	ldw	fp,0(sp)
 800d000:	dec00104 	addi	sp,sp,4
 800d004:	f800283a 	ret

0800d008 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
 800d008:	defff904 	addi	sp,sp,-28
 800d00c:	dfc00615 	stw	ra,24(sp)
 800d010:	df000515 	stw	fp,20(sp)
 800d014:	df000504 	addi	fp,sp,20
 800d018:	e13ffc15 	stw	r4,-16(fp)
 800d01c:	e17ffd15 	stw	r5,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 800d020:	e0bffc17 	ldw	r2,-16(fp)
 800d024:	1004803a 	cmplt	r2,r2,zero
 800d028:	1000081e 	bne	r2,zero,800d04c <fstat+0x44>
 800d02c:	e0bffc17 	ldw	r2,-16(fp)
 800d030:	10800324 	muli	r2,r2,12
 800d034:	1007883a 	mov	r3,r2
 800d038:	00820074 	movhi	r2,2049
 800d03c:	10898504 	addi	r2,r2,9748
 800d040:	1887883a 	add	r3,r3,r2
 800d044:	e0ffff15 	stw	r3,-4(fp)
 800d048:	00000106 	br	800d050 <fstat+0x48>
 800d04c:	e03fff15 	stw	zero,-4(fp)
 800d050:	e0bfff17 	ldw	r2,-4(fp)
 800d054:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 800d058:	e0bffb17 	ldw	r2,-20(fp)
 800d05c:	1005003a 	cmpeq	r2,r2,zero
 800d060:	1000121e 	bne	r2,zero,800d0ac <fstat+0xa4>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
 800d064:	e0bffb17 	ldw	r2,-20(fp)
 800d068:	10800017 	ldw	r2,0(r2)
 800d06c:	10800817 	ldw	r2,32(r2)
 800d070:	1005003a 	cmpeq	r2,r2,zero
 800d074:	1000081e 	bne	r2,zero,800d098 <fstat+0x90>
    {
      return fd->dev->fstat(fd, st);
 800d078:	e0bffb17 	ldw	r2,-20(fp)
 800d07c:	10800017 	ldw	r2,0(r2)
 800d080:	10800817 	ldw	r2,32(r2)
 800d084:	e13ffb17 	ldw	r4,-20(fp)
 800d088:	e17ffd17 	ldw	r5,-12(fp)
 800d08c:	103ee83a 	callr	r2
 800d090:	e0bffe15 	stw	r2,-8(fp)
 800d094:	00000b06 	br	800d0c4 <fstat+0xbc>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
 800d098:	e0fffd17 	ldw	r3,-12(fp)
 800d09c:	00880004 	movi	r2,8192
 800d0a0:	18800115 	stw	r2,4(r3)
      return 0;
 800d0a4:	e03ffe15 	stw	zero,-8(fp)
 800d0a8:	00000606 	br	800d0c4 <fstat+0xbc>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 800d0ac:	800d0dc0 	call	800d0dc <alt_get_errno>
 800d0b0:	1007883a 	mov	r3,r2
 800d0b4:	00801444 	movi	r2,81
 800d0b8:	18800015 	stw	r2,0(r3)
    return -1;
 800d0bc:	00bfffc4 	movi	r2,-1
 800d0c0:	e0bffe15 	stw	r2,-8(fp)
 800d0c4:	e0bffe17 	ldw	r2,-8(fp)
  }
}
 800d0c8:	e037883a 	mov	sp,fp
 800d0cc:	dfc00117 	ldw	ra,4(sp)
 800d0d0:	df000017 	ldw	fp,0(sp)
 800d0d4:	dec00204 	addi	sp,sp,8
 800d0d8:	f800283a 	ret

0800d0dc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 800d0dc:	defffd04 	addi	sp,sp,-12
 800d0e0:	dfc00215 	stw	ra,8(sp)
 800d0e4:	df000115 	stw	fp,4(sp)
 800d0e8:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 800d0ec:	00820074 	movhi	r2,2049
 800d0f0:	108e5d04 	addi	r2,r2,14708
 800d0f4:	10800017 	ldw	r2,0(r2)
 800d0f8:	1005003a 	cmpeq	r2,r2,zero
 800d0fc:	1000061e 	bne	r2,zero,800d118 <alt_get_errno+0x3c>
 800d100:	00820074 	movhi	r2,2049
 800d104:	108e5d04 	addi	r2,r2,14708
 800d108:	10800017 	ldw	r2,0(r2)
 800d10c:	103ee83a 	callr	r2
 800d110:	e0bfff15 	stw	r2,-4(fp)
 800d114:	00000306 	br	800d124 <alt_get_errno+0x48>
 800d118:	00820074 	movhi	r2,2049
 800d11c:	10956404 	addi	r2,r2,21904
 800d120:	e0bfff15 	stw	r2,-4(fp)
 800d124:	e0bfff17 	ldw	r2,-4(fp)
}
 800d128:	e037883a 	mov	sp,fp
 800d12c:	dfc00117 	ldw	ra,4(sp)
 800d130:	df000017 	ldw	fp,0(sp)
 800d134:	dec00204 	addi	sp,sp,8
 800d138:	f800283a 	ret

0800d13c <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
 800d13c:	deffeb04 	addi	sp,sp,-84
 800d140:	dfc01415 	stw	ra,80(sp)
 800d144:	df001315 	stw	fp,76(sp)
 800d148:	df001304 	addi	fp,sp,76
 800d14c:	e13ffd15 	stw	r4,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 800d150:	e0bffd17 	ldw	r2,-12(fp)
 800d154:	1004803a 	cmplt	r2,r2,zero
 800d158:	1000081e 	bne	r2,zero,800d17c <isatty+0x40>
 800d15c:	e0bffd17 	ldw	r2,-12(fp)
 800d160:	10800324 	muli	r2,r2,12
 800d164:	1007883a 	mov	r3,r2
 800d168:	00820074 	movhi	r2,2049
 800d16c:	10898504 	addi	r2,r2,9748
 800d170:	1887883a 	add	r3,r3,r2
 800d174:	e0ffff15 	stw	r3,-4(fp)
 800d178:	00000106 	br	800d180 <isatty+0x44>
 800d17c:	e03fff15 	stw	zero,-4(fp)
 800d180:	e0bfff17 	ldw	r2,-4(fp)
 800d184:	e0bfed15 	stw	r2,-76(fp)
  
  if (fd)
 800d188:	e0bfed17 	ldw	r2,-76(fp)
 800d18c:	1005003a 	cmpeq	r2,r2,zero
 800d190:	10000f1e 	bne	r2,zero,800d1d0 <isatty+0x94>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
 800d194:	e0bfed17 	ldw	r2,-76(fp)
 800d198:	10800017 	ldw	r2,0(r2)
 800d19c:	10800817 	ldw	r2,32(r2)
 800d1a0:	1004c03a 	cmpne	r2,r2,zero
 800d1a4:	1000031e 	bne	r2,zero,800d1b4 <isatty+0x78>
    {
      return 1;
 800d1a8:	00800044 	movi	r2,1
 800d1ac:	e0bffe15 	stw	r2,-8(fp)
 800d1b0:	00000c06 	br	800d1e4 <isatty+0xa8>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
 800d1b4:	e17fee04 	addi	r5,fp,-72
 800d1b8:	e13ffd17 	ldw	r4,-12(fp)
 800d1bc:	800d0080 	call	800d008 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
 800d1c0:	e0bfef17 	ldw	r2,-68(fp)
 800d1c4:	10880020 	cmpeqi	r2,r2,8192
 800d1c8:	e0bffe15 	stw	r2,-8(fp)
 800d1cc:	00000506 	br	800d1e4 <isatty+0xa8>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 800d1d0:	800d1fc0 	call	800d1fc <alt_get_errno>
 800d1d4:	1007883a 	mov	r3,r2
 800d1d8:	00801444 	movi	r2,81
 800d1dc:	18800015 	stw	r2,0(r3)
    return 0;
 800d1e0:	e03ffe15 	stw	zero,-8(fp)
 800d1e4:	e0bffe17 	ldw	r2,-8(fp)
  }
}
 800d1e8:	e037883a 	mov	sp,fp
 800d1ec:	dfc00117 	ldw	ra,4(sp)
 800d1f0:	df000017 	ldw	fp,0(sp)
 800d1f4:	dec00204 	addi	sp,sp,8
 800d1f8:	f800283a 	ret

0800d1fc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 800d1fc:	defffd04 	addi	sp,sp,-12
 800d200:	dfc00215 	stw	ra,8(sp)
 800d204:	df000115 	stw	fp,4(sp)
 800d208:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 800d20c:	00820074 	movhi	r2,2049
 800d210:	108e5d04 	addi	r2,r2,14708
 800d214:	10800017 	ldw	r2,0(r2)
 800d218:	1005003a 	cmpeq	r2,r2,zero
 800d21c:	1000061e 	bne	r2,zero,800d238 <alt_get_errno+0x3c>
 800d220:	00820074 	movhi	r2,2049
 800d224:	108e5d04 	addi	r2,r2,14708
 800d228:	10800017 	ldw	r2,0(r2)
 800d22c:	103ee83a 	callr	r2
 800d230:	e0bfff15 	stw	r2,-4(fp)
 800d234:	00000306 	br	800d244 <alt_get_errno+0x48>
 800d238:	00820074 	movhi	r2,2049
 800d23c:	10956404 	addi	r2,r2,21904
 800d240:	e0bfff15 	stw	r2,-4(fp)
 800d244:	e0bfff17 	ldw	r2,-4(fp)
}
 800d248:	e037883a 	mov	sp,fp
 800d24c:	dfc00117 	ldw	ra,4(sp)
 800d250:	df000017 	ldw	fp,0(sp)
 800d254:	dec00204 	addi	sp,sp,8
 800d258:	f800283a 	ret

0800d25c <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 800d25c:	defffe04 	addi	sp,sp,-8
 800d260:	dfc00115 	stw	ra,4(sp)
 800d264:	df000015 	stw	fp,0(sp)
 800d268:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
 800d26c:	01020074 	movhi	r4,2049
 800d270:	210e6604 	addi	r4,r4,14744
 800d274:	01420074 	movhi	r5,2049
 800d278:	29477604 	addi	r5,r5,7640
 800d27c:	01820074 	movhi	r6,2049
 800d280:	318e6604 	addi	r6,r6,14744
 800d284:	800d2dc0 	call	800d2dc <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
 800d288:	01020034 	movhi	r4,2048
 800d28c:	21000804 	addi	r4,r4,32
 800d290:	01420034 	movhi	r5,2048
 800d294:	29400804 	addi	r5,r5,32
 800d298:	01820034 	movhi	r6,2048
 800d29c:	31806d04 	addi	r6,r6,436
 800d2a0:	800d2dc0 	call	800d2dc <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
 800d2a4:	01020074 	movhi	r4,2049
 800d2a8:	21060c04 	addi	r4,r4,6192
 800d2ac:	01420074 	movhi	r5,2049
 800d2b0:	29460c04 	addi	r5,r5,6192
 800d2b4:	01820074 	movhi	r6,2049
 800d2b8:	31877604 	addi	r6,r6,7640
 800d2bc:	800d2dc0 	call	800d2dc <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 800d2c0:	80105dc0 	call	80105dc <alt_dcache_flush_all>
  alt_icache_flush_all();
 800d2c4:	80108900 	call	8010890 <alt_icache_flush_all>
}
 800d2c8:	e037883a 	mov	sp,fp
 800d2cc:	dfc00117 	ldw	ra,4(sp)
 800d2d0:	df000017 	ldw	fp,0(sp)
 800d2d4:	dec00204 	addi	sp,sp,8
 800d2d8:	f800283a 	ret

0800d2dc <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
 800d2dc:	defffc04 	addi	sp,sp,-16
 800d2e0:	df000315 	stw	fp,12(sp)
 800d2e4:	df000304 	addi	fp,sp,12
 800d2e8:	e13ffd15 	stw	r4,-12(fp)
 800d2ec:	e17ffe15 	stw	r5,-8(fp)
 800d2f0:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
 800d2f4:	e0fffe17 	ldw	r3,-8(fp)
 800d2f8:	e0bffd17 	ldw	r2,-12(fp)
 800d2fc:	18800e26 	beq	r3,r2,800d338 <alt_load_section+0x5c>
  {
    while( to != end )
 800d300:	00000a06 	br	800d32c <alt_load_section+0x50>
    {
      *to++ = *from++;
 800d304:	e0bffd17 	ldw	r2,-12(fp)
 800d308:	10c00017 	ldw	r3,0(r2)
 800d30c:	e0bffe17 	ldw	r2,-8(fp)
 800d310:	10c00015 	stw	r3,0(r2)
 800d314:	e0bffe17 	ldw	r2,-8(fp)
 800d318:	10800104 	addi	r2,r2,4
 800d31c:	e0bffe15 	stw	r2,-8(fp)
 800d320:	e0bffd17 	ldw	r2,-12(fp)
 800d324:	10800104 	addi	r2,r2,4
 800d328:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
 800d32c:	e0fffe17 	ldw	r3,-8(fp)
 800d330:	e0bfff17 	ldw	r2,-4(fp)
 800d334:	18bff31e 	bne	r3,r2,800d304 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
 800d338:	e037883a 	mov	sp,fp
 800d33c:	df000017 	ldw	fp,0(sp)
 800d340:	dec00104 	addi	sp,sp,4
 800d344:	f800283a 	ret

0800d348 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
 800d348:	defff804 	addi	sp,sp,-32
 800d34c:	dfc00715 	stw	ra,28(sp)
 800d350:	df000615 	stw	fp,24(sp)
 800d354:	df000604 	addi	fp,sp,24
 800d358:	e13ffc15 	stw	r4,-16(fp)
 800d35c:	e17ffd15 	stw	r5,-12(fp)
 800d360:	e1bffe15 	stw	r6,-8(fp)
  alt_fd* fd;
  off_t   rc = 0; 
 800d364:	e03ffa15 	stw	zero,-24(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 800d368:	e0bffc17 	ldw	r2,-16(fp)
 800d36c:	1004803a 	cmplt	r2,r2,zero
 800d370:	1000081e 	bne	r2,zero,800d394 <lseek+0x4c>
 800d374:	e0bffc17 	ldw	r2,-16(fp)
 800d378:	10800324 	muli	r2,r2,12
 800d37c:	1007883a 	mov	r3,r2
 800d380:	00820074 	movhi	r2,2049
 800d384:	10898504 	addi	r2,r2,9748
 800d388:	1887883a 	add	r3,r3,r2
 800d38c:	e0ffff15 	stw	r3,-4(fp)
 800d390:	00000106 	br	800d398 <lseek+0x50>
 800d394:	e03fff15 	stw	zero,-4(fp)
 800d398:	e0bfff17 	ldw	r2,-4(fp)
 800d39c:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd) 
 800d3a0:	e0bffb17 	ldw	r2,-20(fp)
 800d3a4:	1005003a 	cmpeq	r2,r2,zero
 800d3a8:	1000111e 	bne	r2,zero,800d3f0 <lseek+0xa8>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
 800d3ac:	e0bffb17 	ldw	r2,-20(fp)
 800d3b0:	10800017 	ldw	r2,0(r2)
 800d3b4:	10800717 	ldw	r2,28(r2)
 800d3b8:	1005003a 	cmpeq	r2,r2,zero
 800d3bc:	1000091e 	bne	r2,zero,800d3e4 <lseek+0x9c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
 800d3c0:	e0bffb17 	ldw	r2,-20(fp)
 800d3c4:	10800017 	ldw	r2,0(r2)
 800d3c8:	10800717 	ldw	r2,28(r2)
 800d3cc:	e13ffb17 	ldw	r4,-20(fp)
 800d3d0:	e17ffd17 	ldw	r5,-12(fp)
 800d3d4:	e1bffe17 	ldw	r6,-8(fp)
 800d3d8:	103ee83a 	callr	r2
 800d3dc:	e0bffa15 	stw	r2,-24(fp)
 800d3e0:	00000506 	br	800d3f8 <lseek+0xb0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
 800d3e4:	00bfde84 	movi	r2,-134
 800d3e8:	e0bffa15 	stw	r2,-24(fp)
 800d3ec:	00000206 	br	800d3f8 <lseek+0xb0>
    }
  }
  else  
  {
    rc = -EBADFD;
 800d3f0:	00bfebc4 	movi	r2,-81
 800d3f4:	e0bffa15 	stw	r2,-24(fp)
  }

  if (rc < 0)
 800d3f8:	e0bffa17 	ldw	r2,-24(fp)
 800d3fc:	1004403a 	cmpge	r2,r2,zero
 800d400:	1000071e 	bne	r2,zero,800d420 <lseek+0xd8>
  {
    ALT_ERRNO = -rc;
 800d404:	800d4380 	call	800d438 <alt_get_errno>
 800d408:	1007883a 	mov	r3,r2
 800d40c:	e0bffa17 	ldw	r2,-24(fp)
 800d410:	0085c83a 	sub	r2,zero,r2
 800d414:	18800015 	stw	r2,0(r3)
    rc = -1;
 800d418:	00bfffc4 	movi	r2,-1
 800d41c:	e0bffa15 	stw	r2,-24(fp)
  }

  return rc;
 800d420:	e0bffa17 	ldw	r2,-24(fp)
}
 800d424:	e037883a 	mov	sp,fp
 800d428:	dfc00117 	ldw	ra,4(sp)
 800d42c:	df000017 	ldw	fp,0(sp)
 800d430:	dec00204 	addi	sp,sp,8
 800d434:	f800283a 	ret

0800d438 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 800d438:	defffd04 	addi	sp,sp,-12
 800d43c:	dfc00215 	stw	ra,8(sp)
 800d440:	df000115 	stw	fp,4(sp)
 800d444:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 800d448:	00820074 	movhi	r2,2049
 800d44c:	108e5d04 	addi	r2,r2,14708
 800d450:	10800017 	ldw	r2,0(r2)
 800d454:	1005003a 	cmpeq	r2,r2,zero
 800d458:	1000061e 	bne	r2,zero,800d474 <alt_get_errno+0x3c>
 800d45c:	00820074 	movhi	r2,2049
 800d460:	108e5d04 	addi	r2,r2,14708
 800d464:	10800017 	ldw	r2,0(r2)
 800d468:	103ee83a 	callr	r2
 800d46c:	e0bfff15 	stw	r2,-4(fp)
 800d470:	00000306 	br	800d480 <alt_get_errno+0x48>
 800d474:	00820074 	movhi	r2,2049
 800d478:	10956404 	addi	r2,r2,21904
 800d47c:	e0bfff15 	stw	r2,-4(fp)
 800d480:	e0bfff17 	ldw	r2,-4(fp)
}
 800d484:	e037883a 	mov	sp,fp
 800d488:	dfc00117 	ldw	ra,4(sp)
 800d48c:	df000017 	ldw	fp,0(sp)
 800d490:	dec00204 	addi	sp,sp,8
 800d494:	f800283a 	ret

0800d498 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 800d498:	defffd04 	addi	sp,sp,-12
 800d49c:	dfc00215 	stw	ra,8(sp)
 800d4a0:	df000115 	stw	fp,4(sp)
 800d4a4:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 800d4a8:	0009883a 	mov	r4,zero
 800d4ac:	800d9600 	call	800d960 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 800d4b0:	800d9940 	call	800d994 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 800d4b4:	01020074 	movhi	r4,2049
 800d4b8:	21072404 	addi	r4,r4,7312
 800d4bc:	01420074 	movhi	r5,2049
 800d4c0:	29472404 	addi	r5,r5,7312
 800d4c4:	01820074 	movhi	r6,2049
 800d4c8:	31872404 	addi	r6,r6,7312
 800d4cc:	8010c500 	call	8010c50 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
 800d4d0:	80107340 	call	8010734 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
 800d4d4:	01020074 	movhi	r4,2049
 800d4d8:	2101e604 	addi	r4,r4,1944
 800d4dc:	80113b80 	call	80113b8 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 800d4e0:	d1271717 	ldw	r4,-25508(gp)
 800d4e4:	d1671817 	ldw	r5,-25504(gp)
 800d4e8:	d1a71917 	ldw	r6,-25500(gp)
 800d4ec:	80002000 	call	8000200 <main>
 800d4f0:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
 800d4f4:	01000044 	movi	r4,1
 800d4f8:	800ce800 	call	800ce80 <close>
  exit (result);
 800d4fc:	e13fff17 	ldw	r4,-4(fp)
 800d500:	80113cc0 	call	80113cc <exit>

0800d504 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
 800d504:	defffe04 	addi	sp,sp,-8
 800d508:	df000115 	stw	fp,4(sp)
 800d50c:	df000104 	addi	fp,sp,4
 800d510:	e13fff15 	stw	r4,-4(fp)
}
 800d514:	e037883a 	mov	sp,fp
 800d518:	df000017 	ldw	fp,0(sp)
 800d51c:	dec00104 	addi	sp,sp,4
 800d520:	f800283a 	ret

0800d524 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
 800d524:	defffe04 	addi	sp,sp,-8
 800d528:	df000115 	stw	fp,4(sp)
 800d52c:	df000104 	addi	fp,sp,4
 800d530:	e13fff15 	stw	r4,-4(fp)
}
 800d534:	e037883a 	mov	sp,fp
 800d538:	df000017 	ldw	fp,0(sp)
 800d53c:	dec00104 	addi	sp,sp,4
 800d540:	f800283a 	ret

0800d544 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
 800d544:	defff704 	addi	sp,sp,-36
 800d548:	dfc00815 	stw	ra,32(sp)
 800d54c:	df000715 	stw	fp,28(sp)
 800d550:	df000704 	addi	fp,sp,28
 800d554:	e13ffb15 	stw	r4,-20(fp)
 800d558:	e17ffc15 	stw	r5,-16(fp)
 800d55c:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 800d560:	e0bffb17 	ldw	r2,-20(fp)
 800d564:	1004803a 	cmplt	r2,r2,zero
 800d568:	1000081e 	bne	r2,zero,800d58c <read+0x48>
 800d56c:	e0bffb17 	ldw	r2,-20(fp)
 800d570:	10800324 	muli	r2,r2,12
 800d574:	1007883a 	mov	r3,r2
 800d578:	00820074 	movhi	r2,2049
 800d57c:	10898504 	addi	r2,r2,9748
 800d580:	1887883a 	add	r3,r3,r2
 800d584:	e0ffff15 	stw	r3,-4(fp)
 800d588:	00000106 	br	800d590 <read+0x4c>
 800d58c:	e03fff15 	stw	zero,-4(fp)
 800d590:	e0bfff17 	ldw	r2,-4(fp)
 800d594:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
 800d598:	e0bffa17 	ldw	r2,-24(fp)
 800d59c:	1005003a 	cmpeq	r2,r2,zero
 800d5a0:	1000241e 	bne	r2,zero,800d634 <read+0xf0>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 800d5a4:	e0bffa17 	ldw	r2,-24(fp)
 800d5a8:	10800217 	ldw	r2,8(r2)
 800d5ac:	108000cc 	andi	r2,r2,3
 800d5b0:	10800060 	cmpeqi	r2,r2,1
 800d5b4:	10001a1e 	bne	r2,zero,800d620 <read+0xdc>
 800d5b8:	e0bffa17 	ldw	r2,-24(fp)
 800d5bc:	10800017 	ldw	r2,0(r2)
 800d5c0:	10800517 	ldw	r2,20(r2)
 800d5c4:	1005003a 	cmpeq	r2,r2,zero
 800d5c8:	1000151e 	bne	r2,zero,800d620 <read+0xdc>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
 800d5cc:	e0bffa17 	ldw	r2,-24(fp)
 800d5d0:	10800017 	ldw	r2,0(r2)
 800d5d4:	10800517 	ldw	r2,20(r2)
 800d5d8:	e17ffc17 	ldw	r5,-16(fp)
 800d5dc:	e1bffd17 	ldw	r6,-12(fp)
 800d5e0:	e13ffa17 	ldw	r4,-24(fp)
 800d5e4:	103ee83a 	callr	r2
 800d5e8:	e0bff915 	stw	r2,-28(fp)
 800d5ec:	e0bff917 	ldw	r2,-28(fp)
 800d5f0:	1004403a 	cmpge	r2,r2,zero
 800d5f4:	1000071e 	bne	r2,zero,800d614 <read+0xd0>
        {
          ALT_ERRNO = -rval;
 800d5f8:	800d6640 	call	800d664 <alt_get_errno>
 800d5fc:	e0fff917 	ldw	r3,-28(fp)
 800d600:	00c7c83a 	sub	r3,zero,r3
 800d604:	10c00015 	stw	r3,0(r2)
          return -1;
 800d608:	00bfffc4 	movi	r2,-1
 800d60c:	e0bffe15 	stw	r2,-8(fp)
 800d610:	00000e06 	br	800d64c <read+0x108>
        }
        return rval;
 800d614:	e0bff917 	ldw	r2,-28(fp)
 800d618:	e0bffe15 	stw	r2,-8(fp)
 800d61c:	00000b06 	br	800d64c <read+0x108>
      }
      else
      {
        ALT_ERRNO = EACCES;
 800d620:	800d6640 	call	800d664 <alt_get_errno>
 800d624:	1007883a 	mov	r3,r2
 800d628:	00800344 	movi	r2,13
 800d62c:	18800015 	stw	r2,0(r3)
 800d630:	00000406 	br	800d644 <read+0x100>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
 800d634:	800d6640 	call	800d664 <alt_get_errno>
 800d638:	1007883a 	mov	r3,r2
 800d63c:	00801444 	movi	r2,81
 800d640:	18800015 	stw	r2,0(r3)
  }
  return -1;
 800d644:	00bfffc4 	movi	r2,-1
 800d648:	e0bffe15 	stw	r2,-8(fp)
 800d64c:	e0bffe17 	ldw	r2,-8(fp)
}
 800d650:	e037883a 	mov	sp,fp
 800d654:	dfc00117 	ldw	ra,4(sp)
 800d658:	df000017 	ldw	fp,0(sp)
 800d65c:	dec00204 	addi	sp,sp,8
 800d660:	f800283a 	ret

0800d664 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 800d664:	defffd04 	addi	sp,sp,-12
 800d668:	dfc00215 	stw	ra,8(sp)
 800d66c:	df000115 	stw	fp,4(sp)
 800d670:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 800d674:	00820074 	movhi	r2,2049
 800d678:	108e5d04 	addi	r2,r2,14708
 800d67c:	10800017 	ldw	r2,0(r2)
 800d680:	1005003a 	cmpeq	r2,r2,zero
 800d684:	1000061e 	bne	r2,zero,800d6a0 <alt_get_errno+0x3c>
 800d688:	00820074 	movhi	r2,2049
 800d68c:	108e5d04 	addi	r2,r2,14708
 800d690:	10800017 	ldw	r2,0(r2)
 800d694:	103ee83a 	callr	r2
 800d698:	e0bfff15 	stw	r2,-4(fp)
 800d69c:	00000306 	br	800d6ac <alt_get_errno+0x48>
 800d6a0:	00820074 	movhi	r2,2049
 800d6a4:	10956404 	addi	r2,r2,21904
 800d6a8:	e0bfff15 	stw	r2,-4(fp)
 800d6ac:	e0bfff17 	ldw	r2,-4(fp)
}
 800d6b0:	e037883a 	mov	sp,fp
 800d6b4:	dfc00117 	ldw	ra,4(sp)
 800d6b8:	df000017 	ldw	fp,0(sp)
 800d6bc:	dec00204 	addi	sp,sp,8
 800d6c0:	f800283a 	ret

0800d6c4 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 800d6c4:	defffe04 	addi	sp,sp,-8
 800d6c8:	df000115 	stw	fp,4(sp)
 800d6cc:	df000104 	addi	fp,sp,4
 800d6d0:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
 800d6d4:	e0bfff17 	ldw	r2,-4(fp)
 800d6d8:	108000d0 	cmplti	r2,r2,3
 800d6dc:	10000d1e 	bne	r2,zero,800d714 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
 800d6e0:	e0bfff17 	ldw	r2,-4(fp)
 800d6e4:	00c20074 	movhi	r3,2049
 800d6e8:	18c98504 	addi	r3,r3,9748
 800d6ec:	10800324 	muli	r2,r2,12
 800d6f0:	10c5883a 	add	r2,r2,r3
 800d6f4:	10800204 	addi	r2,r2,8
 800d6f8:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
 800d6fc:	e0bfff17 	ldw	r2,-4(fp)
 800d700:	00c20074 	movhi	r3,2049
 800d704:	18c98504 	addi	r3,r3,9748
 800d708:	10800324 	muli	r2,r2,12
 800d70c:	10c5883a 	add	r2,r2,r3
 800d710:	10000015 	stw	zero,0(r2)
  }
}
 800d714:	e037883a 	mov	sp,fp
 800d718:	df000017 	ldw	fp,0(sp)
 800d71c:	dec00104 	addi	sp,sp,4
 800d720:	f800283a 	ret

0800d724 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
 800d724:	defff804 	addi	sp,sp,-32
 800d728:	df000715 	stw	fp,28(sp)
 800d72c:	df000704 	addi	fp,sp,28
 800d730:	e13ffe15 	stw	r4,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 800d734:	0005303a 	rdctl	r2,status
 800d738:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 800d73c:	e0fffb17 	ldw	r3,-20(fp)
 800d740:	00bfff84 	movi	r2,-2
 800d744:	1884703a 	and	r2,r3,r2
 800d748:	1001703a 	wrctl	status,r2
  
  return context;
 800d74c:	e0bffb17 	ldw	r2,-20(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
 800d750:	e0bffd15 	stw	r2,-12(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
 800d754:	d0a01017 	ldw	r2,-32704(gp)
 800d758:	10c000c4 	addi	r3,r2,3
 800d75c:	00bfff04 	movi	r2,-4
 800d760:	1884703a 	and	r2,r3,r2
 800d764:	d0a01015 	stw	r2,-32704(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
 800d768:	d0e01017 	ldw	r3,-32704(gp)
 800d76c:	e0bffe17 	ldw	r2,-8(fp)
 800d770:	1887883a 	add	r3,r3,r2
 800d774:	008204b4 	movhi	r2,2066
 800d778:	10800004 	addi	r2,r2,0
 800d77c:	10c0072e 	bgeu	r2,r3,800d79c <sbrk+0x78>
 800d780:	e0bffd17 	ldw	r2,-12(fp)
 800d784:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 800d788:	e0bffa17 	ldw	r2,-24(fp)
 800d78c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
 800d790:	00bfffc4 	movi	r2,-1
 800d794:	e0bfff15 	stw	r2,-4(fp)
 800d798:	00000c06 	br	800d7cc <sbrk+0xa8>
  }
#endif

  prev_heap_end = heap_end; 
 800d79c:	d0a01017 	ldw	r2,-32704(gp)
 800d7a0:	e0bffc15 	stw	r2,-16(fp)
  heap_end += incr; 
 800d7a4:	d0e01017 	ldw	r3,-32704(gp)
 800d7a8:	e0bffe17 	ldw	r2,-8(fp)
 800d7ac:	1885883a 	add	r2,r3,r2
 800d7b0:	d0a01015 	stw	r2,-32704(gp)
 800d7b4:	e0bffd17 	ldw	r2,-12(fp)
 800d7b8:	e0bff915 	stw	r2,-28(fp)
 800d7bc:	e0bff917 	ldw	r2,-28(fp)
 800d7c0:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
 800d7c4:	e0bffc17 	ldw	r2,-16(fp)
 800d7c8:	e0bfff15 	stw	r2,-4(fp)
 800d7cc:	e0bfff17 	ldw	r2,-4(fp)
} 
 800d7d0:	e037883a 	mov	sp,fp
 800d7d4:	df000017 	ldw	fp,0(sp)
 800d7d8:	dec00104 	addi	sp,sp,4
 800d7dc:	f800283a 	ret

0800d7e0 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
 800d7e0:	defff704 	addi	sp,sp,-36
 800d7e4:	dfc00815 	stw	ra,32(sp)
 800d7e8:	df000715 	stw	fp,28(sp)
 800d7ec:	df000704 	addi	fp,sp,28
 800d7f0:	e13ffb15 	stw	r4,-20(fp)
 800d7f4:	e17ffc15 	stw	r5,-16(fp)
 800d7f8:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 800d7fc:	e0bffb17 	ldw	r2,-20(fp)
 800d800:	1004803a 	cmplt	r2,r2,zero
 800d804:	1000081e 	bne	r2,zero,800d828 <write+0x48>
 800d808:	e0bffb17 	ldw	r2,-20(fp)
 800d80c:	10800324 	muli	r2,r2,12
 800d810:	1007883a 	mov	r3,r2
 800d814:	00820074 	movhi	r2,2049
 800d818:	10898504 	addi	r2,r2,9748
 800d81c:	1887883a 	add	r3,r3,r2
 800d820:	e0ffff15 	stw	r3,-4(fp)
 800d824:	00000106 	br	800d82c <write+0x4c>
 800d828:	e03fff15 	stw	zero,-4(fp)
 800d82c:	e0bfff17 	ldw	r2,-4(fp)
 800d830:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
 800d834:	e0bffa17 	ldw	r2,-24(fp)
 800d838:	1005003a 	cmpeq	r2,r2,zero
 800d83c:	1000241e 	bne	r2,zero,800d8d0 <write+0xf0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
 800d840:	e0bffa17 	ldw	r2,-24(fp)
 800d844:	10800217 	ldw	r2,8(r2)
 800d848:	108000cc 	andi	r2,r2,3
 800d84c:	1005003a 	cmpeq	r2,r2,zero
 800d850:	10001a1e 	bne	r2,zero,800d8bc <write+0xdc>
 800d854:	e0bffa17 	ldw	r2,-24(fp)
 800d858:	10800017 	ldw	r2,0(r2)
 800d85c:	10800617 	ldw	r2,24(r2)
 800d860:	1005003a 	cmpeq	r2,r2,zero
 800d864:	1000151e 	bne	r2,zero,800d8bc <write+0xdc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
 800d868:	e0bffa17 	ldw	r2,-24(fp)
 800d86c:	10800017 	ldw	r2,0(r2)
 800d870:	10800617 	ldw	r2,24(r2)
 800d874:	e17ffc17 	ldw	r5,-16(fp)
 800d878:	e1bffd17 	ldw	r6,-12(fp)
 800d87c:	e13ffa17 	ldw	r4,-24(fp)
 800d880:	103ee83a 	callr	r2
 800d884:	e0bff915 	stw	r2,-28(fp)
 800d888:	e0bff917 	ldw	r2,-28(fp)
 800d88c:	1004403a 	cmpge	r2,r2,zero
 800d890:	1000071e 	bne	r2,zero,800d8b0 <write+0xd0>
      {
        ALT_ERRNO = -rval;
 800d894:	800d9000 	call	800d900 <alt_get_errno>
 800d898:	e0fff917 	ldw	r3,-28(fp)
 800d89c:	00c7c83a 	sub	r3,zero,r3
 800d8a0:	10c00015 	stw	r3,0(r2)
        return -1;
 800d8a4:	00bfffc4 	movi	r2,-1
 800d8a8:	e0bffe15 	stw	r2,-8(fp)
 800d8ac:	00000e06 	br	800d8e8 <write+0x108>
      }
      return rval;
 800d8b0:	e0bff917 	ldw	r2,-28(fp)
 800d8b4:	e0bffe15 	stw	r2,-8(fp)
 800d8b8:	00000b06 	br	800d8e8 <write+0x108>
    }
    else
    {
      ALT_ERRNO = EACCES;
 800d8bc:	800d9000 	call	800d900 <alt_get_errno>
 800d8c0:	1007883a 	mov	r3,r2
 800d8c4:	00800344 	movi	r2,13
 800d8c8:	18800015 	stw	r2,0(r3)
 800d8cc:	00000406 	br	800d8e0 <write+0x100>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
 800d8d0:	800d9000 	call	800d900 <alt_get_errno>
 800d8d4:	1007883a 	mov	r3,r2
 800d8d8:	00801444 	movi	r2,81
 800d8dc:	18800015 	stw	r2,0(r3)
  }
  return -1;
 800d8e0:	00bfffc4 	movi	r2,-1
 800d8e4:	e0bffe15 	stw	r2,-8(fp)
 800d8e8:	e0bffe17 	ldw	r2,-8(fp)
}
 800d8ec:	e037883a 	mov	sp,fp
 800d8f0:	dfc00117 	ldw	ra,4(sp)
 800d8f4:	df000017 	ldw	fp,0(sp)
 800d8f8:	dec00204 	addi	sp,sp,8
 800d8fc:	f800283a 	ret

0800d900 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 800d900:	defffd04 	addi	sp,sp,-12
 800d904:	dfc00215 	stw	ra,8(sp)
 800d908:	df000115 	stw	fp,4(sp)
 800d90c:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 800d910:	00820074 	movhi	r2,2049
 800d914:	108e5d04 	addi	r2,r2,14708
 800d918:	10800017 	ldw	r2,0(r2)
 800d91c:	1005003a 	cmpeq	r2,r2,zero
 800d920:	1000061e 	bne	r2,zero,800d93c <alt_get_errno+0x3c>
 800d924:	00820074 	movhi	r2,2049
 800d928:	108e5d04 	addi	r2,r2,14708
 800d92c:	10800017 	ldw	r2,0(r2)
 800d930:	103ee83a 	callr	r2
 800d934:	e0bfff15 	stw	r2,-4(fp)
 800d938:	00000306 	br	800d948 <alt_get_errno+0x48>
 800d93c:	00820074 	movhi	r2,2049
 800d940:	10956404 	addi	r2,r2,21904
 800d944:	e0bfff15 	stw	r2,-4(fp)
 800d948:	e0bfff17 	ldw	r2,-4(fp)
}
 800d94c:	e037883a 	mov	sp,fp
 800d950:	dfc00117 	ldw	ra,4(sp)
 800d954:	df000017 	ldw	fp,0(sp)
 800d958:	dec00204 	addi	sp,sp,8
 800d95c:	f800283a 	ret

0800d960 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 800d960:	defffd04 	addi	sp,sp,-12
 800d964:	dfc00215 	stw	ra,8(sp)
 800d968:	df000115 	stw	fp,4(sp)
 800d96c:	df000104 	addi	fp,sp,4
 800d970:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_IRQ_INIT ( CPU_0, cpu_0);
 800d974:	80111300 	call	8011130 <altera_nios2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 800d978:	00800044 	movi	r2,1
 800d97c:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 800d980:	e037883a 	mov	sp,fp
 800d984:	dfc00117 	ldw	ra,4(sp)
 800d988:	df000017 	ldw	fp,0(sp)
 800d98c:	dec00204 	addi	sp,sp,8
 800d990:	f800283a 	ret

0800d994 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 800d994:	defffd04 	addi	sp,sp,-12
 800d998:	dfc00215 	stw	ra,8(sp)
 800d99c:	df000115 	stw	fp,4(sp)
 800d9a0:	df000104 	addi	fp,sp,4
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
 800d9a4:	01020074 	movhi	r4,2049
 800d9a8:	2109ef04 	addi	r4,r4,10172
 800d9ac:	000b883a 	mov	r5,zero
 800d9b0:	000d883a 	mov	r6,zero
 800d9b4:	800dd8c0 	call	800dd8c <altera_avalon_jtag_uart_init>
 800d9b8:	01020074 	movhi	r4,2049
 800d9bc:	2109e504 	addi	r4,r4,10132
 800d9c0:	800dc0c0 	call	800dc0c <alt_dev_reg>
    ALTERA_AVALON_MAILBOX_INIT ( MAILBOX_0, mailbox_0);
 800d9c4:	01020074 	movhi	r4,2049
 800d9c8:	210dfd04 	addi	r4,r4,14324
 800d9cc:	800e6f00 	call	800e6f0 <alt_avalon_mailbox_init>
    ALTERA_AVALON_MAILBOX_INIT ( MAILBOX_1, mailbox_1);
 800d9d0:	01020074 	movhi	r4,2049
 800d9d4:	210e0c04 	addi	r4,r4,14384
 800d9d8:	800e6f00 	call	800e6f0 <alt_avalon_mailbox_init>
    ALTERA_AVALON_MAILBOX_INIT ( MAILBOX_2, mailbox_2);
 800d9dc:	01020074 	movhi	r4,2049
 800d9e0:	210e1b04 	addi	r4,r4,14444
 800d9e4:	800e6f00 	call	800e6f0 <alt_avalon_mailbox_init>
    ALTERA_AVALON_MAILBOX_INIT ( MAILBOX_3, mailbox_3);
 800d9e8:	01020074 	movhi	r4,2049
 800d9ec:	210e2a04 	addi	r4,r4,14504
 800d9f0:	800e6f00 	call	800e6f0 <alt_avalon_mailbox_init>
    ALTERA_AVALON_PERFORMANCE_COUNTER_INIT ( PERFORMANCE_COUNTER_0, performance_counter_0);
 800d9f4:	0007883a 	mov	r3,zero
 800d9f8:	00800044 	movi	r2,1
 800d9fc:	18800035 	stwio	r2,0(r3)
    ALTERA_AVALON_SYSID_INIT ( SYSID, sysid);
    ALTERA_UP_AVALON_VIDEO_PIXEL_BUFFER_DMA_INIT ( VIDEO_PIXEL_BUFFER_DMA_0, video_pixel_buffer_dma_0);
 800da00:	00820074 	movhi	r2,2049
 800da04:	108e3904 	addi	r2,r2,14564
 800da08:	10800a17 	ldw	r2,40(r2)
 800da0c:	10800017 	ldw	r2,0(r2)
 800da10:	1007883a 	mov	r3,r2
 800da14:	00820074 	movhi	r2,2049
 800da18:	108e3904 	addi	r2,r2,14564
 800da1c:	10c00b15 	stw	r3,44(r2)
 800da20:	00820074 	movhi	r2,2049
 800da24:	108e3904 	addi	r2,r2,14564
 800da28:	10800a17 	ldw	r2,40(r2)
 800da2c:	10800104 	addi	r2,r2,4
 800da30:	10800017 	ldw	r2,0(r2)
 800da34:	1007883a 	mov	r3,r2
 800da38:	00820074 	movhi	r2,2049
 800da3c:	108e3904 	addi	r2,r2,14564
 800da40:	10c00c15 	stw	r3,48(r2)
 800da44:	00820074 	movhi	r2,2049
 800da48:	108e3904 	addi	r2,r2,14564
 800da4c:	10800a17 	ldw	r2,40(r2)
 800da50:	10800204 	addi	r2,r2,8
 800da54:	10800017 	ldw	r2,0(r2)
 800da58:	10ffffcc 	andi	r3,r2,65535
 800da5c:	00820074 	movhi	r2,2049
 800da60:	108e3904 	addi	r2,r2,14564
 800da64:	10c00f15 	stw	r3,60(r2)
 800da68:	00820074 	movhi	r2,2049
 800da6c:	108e3904 	addi	r2,r2,14564
 800da70:	10800a17 	ldw	r2,40(r2)
 800da74:	10800204 	addi	r2,r2,8
 800da78:	10800017 	ldw	r2,0(r2)
 800da7c:	1005d43a 	srai	r2,r2,16
 800da80:	10ffffcc 	andi	r3,r2,65535
 800da84:	00820074 	movhi	r2,2049
 800da88:	108e3904 	addi	r2,r2,14564
 800da8c:	10c01015 	stw	r3,64(r2)
 800da90:	00820074 	movhi	r2,2049
 800da94:	108e3904 	addi	r2,r2,14564
 800da98:	10800a17 	ldw	r2,40(r2)
 800da9c:	10800304 	addi	r2,r2,12
 800daa0:	10800017 	ldw	r2,0(r2)
 800daa4:	1005d07a 	srai	r2,r2,1
 800daa8:	10c0004c 	andi	r3,r2,1
 800daac:	00820074 	movhi	r2,2049
 800dab0:	108e3904 	addi	r2,r2,14564
 800dab4:	10c00d15 	stw	r3,52(r2)
 800dab8:	00820074 	movhi	r2,2049
 800dabc:	108e3904 	addi	r2,r2,14564
 800dac0:	10800a17 	ldw	r2,40(r2)
 800dac4:	10800304 	addi	r2,r2,12
 800dac8:	10800017 	ldw	r2,0(r2)
 800dacc:	1005d13a 	srai	r2,r2,4
 800dad0:	10c003cc 	andi	r3,r2,15
 800dad4:	00820074 	movhi	r2,2049
 800dad8:	108e3904 	addi	r2,r2,14564
 800dadc:	10c00e15 	stw	r3,56(r2)
 800dae0:	00820074 	movhi	r2,2049
 800dae4:	108e3904 	addi	r2,r2,14564
 800dae8:	10800a17 	ldw	r2,40(r2)
 800daec:	10800304 	addi	r2,r2,12
 800daf0:	10800017 	ldw	r2,0(r2)
 800daf4:	1005d43a 	srai	r2,r2,16
 800daf8:	1007883a 	mov	r3,r2
 800dafc:	00bfffc4 	movi	r2,-1
 800db00:	1884703a 	and	r2,r3,r2
 800db04:	e0bfff45 	stb	r2,-3(fp)
 800db08:	00820074 	movhi	r2,2049
 800db0c:	108e3904 	addi	r2,r2,14564
 800db10:	10800a17 	ldw	r2,40(r2)
 800db14:	10800304 	addi	r2,r2,12
 800db18:	10800017 	ldw	r2,0(r2)
 800db1c:	1005d63a 	srai	r2,r2,24
 800db20:	1007883a 	mov	r3,r2
 800db24:	00bfffc4 	movi	r2,-1
 800db28:	1884703a 	and	r2,r3,r2
 800db2c:	e0bfff05 	stb	r2,-4(fp)
 800db30:	00820074 	movhi	r2,2049
 800db34:	108e3904 	addi	r2,r2,14564
 800db38:	10800e17 	ldw	r2,56(r2)
 800db3c:	10800058 	cmpnei	r2,r2,1
 800db40:	1000041e 	bne	r2,zero,800db54 <alt_sys_init+0x1c0>
 800db44:	00820074 	movhi	r2,2049
 800db48:	108e3904 	addi	r2,r2,14564
 800db4c:	10001115 	stw	zero,68(r2)
 800db50:	00000e06 	br	800db8c <alt_sys_init+0x1f8>
 800db54:	00820074 	movhi	r2,2049
 800db58:	108e3904 	addi	r2,r2,14564
 800db5c:	10800e17 	ldw	r2,56(r2)
 800db60:	10800098 	cmpnei	r2,r2,2
 800db64:	1000051e 	bne	r2,zero,800db7c <alt_sys_init+0x1e8>
 800db68:	00c20074 	movhi	r3,2049
 800db6c:	18ce3904 	addi	r3,r3,14564
 800db70:	00800044 	movi	r2,1
 800db74:	18801115 	stw	r2,68(r3)
 800db78:	00000406 	br	800db8c <alt_sys_init+0x1f8>
 800db7c:	00c20074 	movhi	r3,2049
 800db80:	18ce3904 	addi	r3,r3,14564
 800db84:	00800084 	movi	r2,2
 800db88:	18801115 	stw	r2,68(r3)
 800db8c:	e0ffff43 	ldbu	r3,-3(fp)
 800db90:	00800804 	movi	r2,32
 800db94:	10c7c83a 	sub	r3,r2,r3
 800db98:	00bfffc4 	movi	r2,-1
 800db9c:	10c6d83a 	srl	r3,r2,r3
 800dba0:	00820074 	movhi	r2,2049
 800dba4:	108e3904 	addi	r2,r2,14564
 800dba8:	10c01215 	stw	r3,72(r2)
 800dbac:	e0ffff43 	ldbu	r3,-3(fp)
 800dbb0:	00820074 	movhi	r2,2049
 800dbb4:	108e3904 	addi	r2,r2,14564
 800dbb8:	10801117 	ldw	r2,68(r2)
 800dbbc:	1887883a 	add	r3,r3,r2
 800dbc0:	00820074 	movhi	r2,2049
 800dbc4:	108e3904 	addi	r2,r2,14564
 800dbc8:	10c01315 	stw	r3,76(r2)
 800dbcc:	e0ffff03 	ldbu	r3,-4(fp)
 800dbd0:	00800804 	movi	r2,32
 800dbd4:	10c7c83a 	sub	r3,r2,r3
 800dbd8:	00bfffc4 	movi	r2,-1
 800dbdc:	10c6d83a 	srl	r3,r2,r3
 800dbe0:	00820074 	movhi	r2,2049
 800dbe4:	108e3904 	addi	r2,r2,14564
 800dbe8:	10c01415 	stw	r3,80(r2)
 800dbec:	01020074 	movhi	r4,2049
 800dbf0:	210e3904 	addi	r4,r4,14564
 800dbf4:	800dc0c0 	call	800dc0c <alt_dev_reg>
}
 800dbf8:	e037883a 	mov	sp,fp
 800dbfc:	dfc00117 	ldw	ra,4(sp)
 800dc00:	df000017 	ldw	fp,0(sp)
 800dc04:	dec00204 	addi	sp,sp,8
 800dc08:	f800283a 	ret

0800dc0c <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
 800dc0c:	defffd04 	addi	sp,sp,-12
 800dc10:	dfc00215 	stw	ra,8(sp)
 800dc14:	df000115 	stw	fp,4(sp)
 800dc18:	df000104 	addi	fp,sp,4
 800dc1c:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 800dc20:	e13fff17 	ldw	r4,-4(fp)
 800dc24:	01420074 	movhi	r5,2049
 800dc28:	294e5a04 	addi	r5,r5,14696
 800dc2c:	80106200 	call	8010620 <alt_dev_llist_insert>
}
 800dc30:	e037883a 	mov	sp,fp
 800dc34:	dfc00117 	ldw	ra,4(sp)
 800dc38:	df000017 	ldw	fp,0(sp)
 800dc3c:	dec00204 	addi	sp,sp,8
 800dc40:	f800283a 	ret

0800dc44 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 800dc44:	defffa04 	addi	sp,sp,-24
 800dc48:	dfc00515 	stw	ra,20(sp)
 800dc4c:	df000415 	stw	fp,16(sp)
 800dc50:	df000404 	addi	fp,sp,16
 800dc54:	e13ffd15 	stw	r4,-12(fp)
 800dc58:	e17ffe15 	stw	r5,-8(fp)
 800dc5c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 800dc60:	e0bffd17 	ldw	r2,-12(fp)
 800dc64:	10800017 	ldw	r2,0(r2)
 800dc68:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 800dc6c:	e0bffc17 	ldw	r2,-16(fp)
 800dc70:	11000a04 	addi	r4,r2,40
 800dc74:	e0bffd17 	ldw	r2,-12(fp)
 800dc78:	11c00217 	ldw	r7,8(r2)
 800dc7c:	e17ffe17 	ldw	r5,-8(fp)
 800dc80:	e1bfff17 	ldw	r6,-4(fp)
 800dc84:	800e28c0 	call	800e28c <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
 800dc88:	e037883a 	mov	sp,fp
 800dc8c:	dfc00117 	ldw	ra,4(sp)
 800dc90:	df000017 	ldw	fp,0(sp)
 800dc94:	dec00204 	addi	sp,sp,8
 800dc98:	f800283a 	ret

0800dc9c <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 800dc9c:	defffa04 	addi	sp,sp,-24
 800dca0:	dfc00515 	stw	ra,20(sp)
 800dca4:	df000415 	stw	fp,16(sp)
 800dca8:	df000404 	addi	fp,sp,16
 800dcac:	e13ffd15 	stw	r4,-12(fp)
 800dcb0:	e17ffe15 	stw	r5,-8(fp)
 800dcb4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 800dcb8:	e0bffd17 	ldw	r2,-12(fp)
 800dcbc:	10800017 	ldw	r2,0(r2)
 800dcc0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 800dcc4:	e0bffc17 	ldw	r2,-16(fp)
 800dcc8:	11000a04 	addi	r4,r2,40
 800dccc:	e0bffd17 	ldw	r2,-12(fp)
 800dcd0:	11c00217 	ldw	r7,8(r2)
 800dcd4:	e17ffe17 	ldw	r5,-8(fp)
 800dcd8:	e1bfff17 	ldw	r6,-4(fp)
 800dcdc:	800e4b00 	call	800e4b0 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
 800dce0:	e037883a 	mov	sp,fp
 800dce4:	dfc00117 	ldw	ra,4(sp)
 800dce8:	df000017 	ldw	fp,0(sp)
 800dcec:	dec00204 	addi	sp,sp,8
 800dcf0:	f800283a 	ret

0800dcf4 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
 800dcf4:	defffc04 	addi	sp,sp,-16
 800dcf8:	dfc00315 	stw	ra,12(sp)
 800dcfc:	df000215 	stw	fp,8(sp)
 800dd00:	df000204 	addi	fp,sp,8
 800dd04:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 800dd08:	e0bfff17 	ldw	r2,-4(fp)
 800dd0c:	10800017 	ldw	r2,0(r2)
 800dd10:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
 800dd14:	e0bffe17 	ldw	r2,-8(fp)
 800dd18:	11000a04 	addi	r4,r2,40
 800dd1c:	e0bfff17 	ldw	r2,-4(fp)
 800dd20:	11400217 	ldw	r5,8(r2)
 800dd24:	800e1240 	call	800e124 <altera_avalon_jtag_uart_close>
}
 800dd28:	e037883a 	mov	sp,fp
 800dd2c:	dfc00117 	ldw	ra,4(sp)
 800dd30:	df000017 	ldw	fp,0(sp)
 800dd34:	dec00204 	addi	sp,sp,8
 800dd38:	f800283a 	ret

0800dd3c <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
 800dd3c:	defffa04 	addi	sp,sp,-24
 800dd40:	dfc00515 	stw	ra,20(sp)
 800dd44:	df000415 	stw	fp,16(sp)
 800dd48:	df000404 	addi	fp,sp,16
 800dd4c:	e13ffd15 	stw	r4,-12(fp)
 800dd50:	e17ffe15 	stw	r5,-8(fp)
 800dd54:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
 800dd58:	e0bffd17 	ldw	r2,-12(fp)
 800dd5c:	10800017 	ldw	r2,0(r2)
 800dd60:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
 800dd64:	e0bffc17 	ldw	r2,-16(fp)
 800dd68:	11000a04 	addi	r4,r2,40
 800dd6c:	e17ffe17 	ldw	r5,-8(fp)
 800dd70:	e1bfff17 	ldw	r6,-4(fp)
 800dd74:	800e1980 	call	800e198 <altera_avalon_jtag_uart_ioctl>
}
 800dd78:	e037883a 	mov	sp,fp
 800dd7c:	dfc00117 	ldw	ra,4(sp)
 800dd80:	df000017 	ldw	fp,0(sp)
 800dd84:	dec00204 	addi	sp,sp,8
 800dd88:	f800283a 	ret

0800dd8c <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
 800dd8c:	defffa04 	addi	sp,sp,-24
 800dd90:	dfc00515 	stw	ra,20(sp)
 800dd94:	df000415 	stw	fp,16(sp)
 800dd98:	df000404 	addi	fp,sp,16
 800dd9c:	e13ffd15 	stw	r4,-12(fp)
 800dda0:	e17ffe15 	stw	r5,-8(fp)
 800dda4:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 800dda8:	e0fffd17 	ldw	r3,-12(fp)
 800ddac:	00800044 	movi	r2,1
 800ddb0:	18800815 	stw	r2,32(r3)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
 800ddb4:	e0bffd17 	ldw	r2,-12(fp)
 800ddb8:	10800017 	ldw	r2,0(r2)
 800ddbc:	11000104 	addi	r4,r2,4
 800ddc0:	e0bffd17 	ldw	r2,-12(fp)
 800ddc4:	10800817 	ldw	r2,32(r2)
 800ddc8:	1007883a 	mov	r3,r2
 800ddcc:	2005883a 	mov	r2,r4
 800ddd0:	10c00035 	stwio	r3,0(r2)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
 800ddd4:	e13ffe17 	ldw	r4,-8(fp)
 800ddd8:	e17fff17 	ldw	r5,-4(fp)
 800dddc:	d8000015 	stw	zero,0(sp)
 800dde0:	01820074 	movhi	r6,2049
 800dde4:	31b79304 	addi	r6,r6,-8628
 800dde8:	e1fffd17 	ldw	r7,-12(fp)
 800ddec:	80108c00 	call	80108c0 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
 800ddf0:	e0bffd17 	ldw	r2,-12(fp)
 800ddf4:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
 800ddf8:	e0bffd17 	ldw	r2,-12(fp)
 800ddfc:	11000204 	addi	r4,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 800de00:	00820074 	movhi	r2,2049
 800de04:	10956904 	addi	r2,r2,21924
 800de08:	10800017 	ldw	r2,0(r2)
 800de0c:	100b883a 	mov	r5,r2
 800de10:	01820074 	movhi	r6,2049
 800de14:	31b81d04 	addi	r6,r6,-8076
 800de18:	e1fffd17 	ldw	r7,-12(fp)
 800de1c:	80104880 	call	8010488 <alt_alarm_start>
 800de20:	1004403a 	cmpge	r2,r2,zero
 800de24:	1000041e 	bne	r2,zero,800de38 <altera_avalon_jtag_uart_init+0xac>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
 800de28:	e0fffd17 	ldw	r3,-12(fp)
 800de2c:	00a00034 	movhi	r2,32768
 800de30:	10bfffc4 	addi	r2,r2,-1
 800de34:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
 800de38:	e037883a 	mov	sp,fp
 800de3c:	dfc00117 	ldw	ra,4(sp)
 800de40:	df000017 	ldw	fp,0(sp)
 800de44:	dec00204 	addi	sp,sp,8
 800de48:	f800283a 	ret

0800de4c <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
 800de4c:	defff804 	addi	sp,sp,-32
 800de50:	df000715 	stw	fp,28(sp)
 800de54:	df000704 	addi	fp,sp,28
 800de58:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
 800de5c:	e0bfff17 	ldw	r2,-4(fp)
 800de60:	e0bffe15 	stw	r2,-8(fp)
  unsigned int base = sp->base;
 800de64:	e0bffe17 	ldw	r2,-8(fp)
 800de68:	10800017 	ldw	r2,0(r2)
 800de6c:	e0bffd15 	stw	r2,-12(fp)
 800de70:	00000006 	br	800de74 <altera_avalon_jtag_uart_irq+0x28>
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 800de74:	e0bffd17 	ldw	r2,-12(fp)
 800de78:	10800104 	addi	r2,r2,4
 800de7c:	10800037 	ldwio	r2,0(r2)
 800de80:	e0bffc15 	stw	r2,-16(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
 800de84:	e0bffc17 	ldw	r2,-16(fp)
 800de88:	1080c00c 	andi	r2,r2,768
 800de8c:	1005003a 	cmpeq	r2,r2,zero
 800de90:	1000741e 	bne	r2,zero,800e064 <altera_avalon_jtag_uart_irq+0x218>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
 800de94:	e0bffc17 	ldw	r2,-16(fp)
 800de98:	1080400c 	andi	r2,r2,256
 800de9c:	1005003a 	cmpeq	r2,r2,zero
 800dea0:	1000351e 	bne	r2,zero,800df78 <altera_avalon_jtag_uart_irq+0x12c>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
 800dea4:	00800074 	movhi	r2,1
 800dea8:	e0bffb15 	stw	r2,-20(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 800deac:	e0bffe17 	ldw	r2,-8(fp)
 800deb0:	10800a17 	ldw	r2,40(r2)
 800deb4:	10800044 	addi	r2,r2,1
 800deb8:	1081ffcc 	andi	r2,r2,2047
 800debc:	e0bffa15 	stw	r2,-24(fp)
        if (next == sp->rx_out)
 800dec0:	e0bffe17 	ldw	r2,-8(fp)
 800dec4:	10c00b17 	ldw	r3,44(r2)
 800dec8:	e0bffa17 	ldw	r2,-24(fp)
 800decc:	18801626 	beq	r3,r2,800df28 <altera_avalon_jtag_uart_irq+0xdc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 800ded0:	e0bffd17 	ldw	r2,-12(fp)
 800ded4:	10800037 	ldwio	r2,0(r2)
 800ded8:	e0bffb15 	stw	r2,-20(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
 800dedc:	e0bffb17 	ldw	r2,-20(fp)
 800dee0:	10a0000c 	andi	r2,r2,32768
 800dee4:	1005003a 	cmpeq	r2,r2,zero
 800dee8:	10000f1e 	bne	r2,zero,800df28 <altera_avalon_jtag_uart_irq+0xdc>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 800deec:	e0bffe17 	ldw	r2,-8(fp)
 800def0:	10c00a17 	ldw	r3,40(r2)
 800def4:	e0bffb17 	ldw	r2,-20(fp)
 800def8:	1009883a 	mov	r4,r2
 800defc:	e0bffe17 	ldw	r2,-8(fp)
 800df00:	1885883a 	add	r2,r3,r2
 800df04:	10800e04 	addi	r2,r2,56
 800df08:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 800df0c:	e0bffe17 	ldw	r2,-8(fp)
 800df10:	10800a17 	ldw	r2,40(r2)
 800df14:	10800044 	addi	r2,r2,1
 800df18:	10c1ffcc 	andi	r3,r2,2047
 800df1c:	e0bffe17 	ldw	r2,-8(fp)
 800df20:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
 800df24:	003fe106 	br	800deac <altera_avalon_jtag_uart_irq+0x60>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
 800df28:	e0bffb17 	ldw	r2,-20(fp)
 800df2c:	10bfffec 	andhi	r2,r2,65535
 800df30:	1005003a 	cmpeq	r2,r2,zero
 800df34:	1000101e 	bne	r2,zero,800df78 <altera_avalon_jtag_uart_irq+0x12c>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 800df38:	e0bffe17 	ldw	r2,-8(fp)
 800df3c:	10c00817 	ldw	r3,32(r2)
 800df40:	00bfff84 	movi	r2,-2
 800df44:	1886703a 	and	r3,r3,r2
 800df48:	e0bffe17 	ldw	r2,-8(fp)
 800df4c:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
 800df50:	e0bffd17 	ldw	r2,-12(fp)
 800df54:	11000104 	addi	r4,r2,4
 800df58:	e0bffe17 	ldw	r2,-8(fp)
 800df5c:	10800817 	ldw	r2,32(r2)
 800df60:	1007883a 	mov	r3,r2
 800df64:	2005883a 	mov	r2,r4
 800df68:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 800df6c:	e0bffd17 	ldw	r2,-12(fp)
 800df70:	10800104 	addi	r2,r2,4
 800df74:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
 800df78:	e0bffc17 	ldw	r2,-16(fp)
 800df7c:	1080800c 	andi	r2,r2,512
 800df80:	1005003a 	cmpeq	r2,r2,zero
 800df84:	103fbb1e 	bne	r2,zero,800de74 <altera_avalon_jtag_uart_irq+0x28>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
 800df88:	e0bffc17 	ldw	r2,-16(fp)
 800df8c:	10bfffec 	andhi	r2,r2,65535
 800df90:	1004d43a 	srli	r2,r2,16
 800df94:	e0bff915 	stw	r2,-28(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
 800df98:	00001506 	br	800dff0 <altera_avalon_jtag_uart_irq+0x1a4>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
 800df9c:	e13ffd17 	ldw	r4,-12(fp)
 800dfa0:	e0bffe17 	ldw	r2,-8(fp)
 800dfa4:	10c00d17 	ldw	r3,52(r2)
 800dfa8:	e0bffe17 	ldw	r2,-8(fp)
 800dfac:	1885883a 	add	r2,r3,r2
 800dfb0:	10820e04 	addi	r2,r2,2104
 800dfb4:	10800003 	ldbu	r2,0(r2)
 800dfb8:	10c03fcc 	andi	r3,r2,255
 800dfbc:	18c0201c 	xori	r3,r3,128
 800dfc0:	18ffe004 	addi	r3,r3,-128
 800dfc4:	2005883a 	mov	r2,r4
 800dfc8:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 800dfcc:	e0bffe17 	ldw	r2,-8(fp)
 800dfd0:	10800d17 	ldw	r2,52(r2)
 800dfd4:	10800044 	addi	r2,r2,1
 800dfd8:	10c1ffcc 	andi	r3,r2,2047
 800dfdc:	e0bffe17 	ldw	r2,-8(fp)
 800dfe0:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
 800dfe4:	e0bff917 	ldw	r2,-28(fp)
 800dfe8:	10bfffc4 	addi	r2,r2,-1
 800dfec:	e0bff915 	stw	r2,-28(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
 800dff0:	e0bff917 	ldw	r2,-28(fp)
 800dff4:	1005003a 	cmpeq	r2,r2,zero
 800dff8:	1000051e 	bne	r2,zero,800e010 <altera_avalon_jtag_uart_irq+0x1c4>
 800dffc:	e0bffe17 	ldw	r2,-8(fp)
 800e000:	10c00d17 	ldw	r3,52(r2)
 800e004:	e0bffe17 	ldw	r2,-8(fp)
 800e008:	10800c17 	ldw	r2,48(r2)
 800e00c:	18bfe31e 	bne	r3,r2,800df9c <altera_avalon_jtag_uart_irq+0x150>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
 800e010:	e0bff917 	ldw	r2,-28(fp)
 800e014:	1005003a 	cmpeq	r2,r2,zero
 800e018:	103f961e 	bne	r2,zero,800de74 <altera_avalon_jtag_uart_irq+0x28>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 800e01c:	e0bffe17 	ldw	r2,-8(fp)
 800e020:	10c00817 	ldw	r3,32(r2)
 800e024:	00bfff44 	movi	r2,-3
 800e028:	1886703a 	and	r3,r3,r2
 800e02c:	e0bffe17 	ldw	r2,-8(fp)
 800e030:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 800e034:	e0bffe17 	ldw	r2,-8(fp)
 800e038:	10800017 	ldw	r2,0(r2)
 800e03c:	11000104 	addi	r4,r2,4
 800e040:	e0bffe17 	ldw	r2,-8(fp)
 800e044:	10800817 	ldw	r2,32(r2)
 800e048:	1007883a 	mov	r3,r2
 800e04c:	2005883a 	mov	r2,r4
 800e050:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 800e054:	e0bffd17 	ldw	r2,-12(fp)
 800e058:	10800104 	addi	r2,r2,4
 800e05c:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
 800e060:	003f8406 	br	800de74 <altera_avalon_jtag_uart_irq+0x28>
}
 800e064:	e037883a 	mov	sp,fp
 800e068:	df000017 	ldw	fp,0(sp)
 800e06c:	dec00104 	addi	sp,sp,4
 800e070:	f800283a 	ret

0800e074 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
 800e074:	defffc04 	addi	sp,sp,-16
 800e078:	df000315 	stw	fp,12(sp)
 800e07c:	df000304 	addi	fp,sp,12
 800e080:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
 800e084:	e0bfff17 	ldw	r2,-4(fp)
 800e088:	e0bffe15 	stw	r2,-8(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
 800e08c:	e0bffe17 	ldw	r2,-8(fp)
 800e090:	10800017 	ldw	r2,0(r2)
 800e094:	10800104 	addi	r2,r2,4
 800e098:	10800037 	ldwio	r2,0(r2)
 800e09c:	e0bffd15 	stw	r2,-12(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
 800e0a0:	e0bffd17 	ldw	r2,-12(fp)
 800e0a4:	1081000c 	andi	r2,r2,1024
 800e0a8:	1005003a 	cmpeq	r2,r2,zero
 800e0ac:	10000c1e 	bne	r2,zero,800e0e0 <altera_avalon_jtag_uart_timeout+0x6c>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
 800e0b0:	e0bffe17 	ldw	r2,-8(fp)
 800e0b4:	10800017 	ldw	r2,0(r2)
 800e0b8:	11000104 	addi	r4,r2,4
 800e0bc:	e0bffe17 	ldw	r2,-8(fp)
 800e0c0:	10800817 	ldw	r2,32(r2)
 800e0c4:	10810014 	ori	r2,r2,1024
 800e0c8:	1007883a 	mov	r3,r2
 800e0cc:	2005883a 	mov	r2,r4
 800e0d0:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
 800e0d4:	e0bffe17 	ldw	r2,-8(fp)
 800e0d8:	10000915 	stw	zero,36(r2)
 800e0dc:	00000a06 	br	800e108 <altera_avalon_jtag_uart_timeout+0x94>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
 800e0e0:	e0bffe17 	ldw	r2,-8(fp)
 800e0e4:	10c00917 	ldw	r3,36(r2)
 800e0e8:	00a00034 	movhi	r2,32768
 800e0ec:	10bfff04 	addi	r2,r2,-4
 800e0f0:	10c00536 	bltu	r2,r3,800e108 <altera_avalon_jtag_uart_timeout+0x94>
    sp->host_inactive++;
 800e0f4:	e0bffe17 	ldw	r2,-8(fp)
 800e0f8:	10800917 	ldw	r2,36(r2)
 800e0fc:	10c00044 	addi	r3,r2,1
 800e100:	e0bffe17 	ldw	r2,-8(fp)
 800e104:	10c00915 	stw	r3,36(r2)
 800e108:	00820074 	movhi	r2,2049
 800e10c:	10956904 	addi	r2,r2,21924
 800e110:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
 800e114:	e037883a 	mov	sp,fp
 800e118:	df000017 	ldw	fp,0(sp)
 800e11c:	dec00104 	addi	sp,sp,4
 800e120:	f800283a 	ret

0800e124 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
 800e124:	defffc04 	addi	sp,sp,-16
 800e128:	df000315 	stw	fp,12(sp)
 800e12c:	df000304 	addi	fp,sp,12
 800e130:	e13ffd15 	stw	r4,-12(fp)
 800e134:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 800e138:	00000706 	br	800e158 <altera_avalon_jtag_uart_close+0x34>
    if (flags & O_NONBLOCK) {
 800e13c:	e0bffe17 	ldw	r2,-8(fp)
 800e140:	1090000c 	andi	r2,r2,16384
 800e144:	1005003a 	cmpeq	r2,r2,zero
 800e148:	1000031e 	bne	r2,zero,800e158 <altera_avalon_jtag_uart_close+0x34>
      return -EWOULDBLOCK; 
 800e14c:	00bffd44 	movi	r2,-11
 800e150:	e0bfff15 	stw	r2,-4(fp)
 800e154:	00000b06 	br	800e184 <altera_avalon_jtag_uart_close+0x60>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 800e158:	e0bffd17 	ldw	r2,-12(fp)
 800e15c:	10c00d17 	ldw	r3,52(r2)
 800e160:	e0bffd17 	ldw	r2,-12(fp)
 800e164:	10800c17 	ldw	r2,48(r2)
 800e168:	18800526 	beq	r3,r2,800e180 <altera_avalon_jtag_uart_close+0x5c>
 800e16c:	e0bffd17 	ldw	r2,-12(fp)
 800e170:	10c00917 	ldw	r3,36(r2)
 800e174:	e0bffd17 	ldw	r2,-12(fp)
 800e178:	10800117 	ldw	r2,4(r2)
 800e17c:	18bfef36 	bltu	r3,r2,800e13c <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
 800e180:	e03fff15 	stw	zero,-4(fp)
 800e184:	e0bfff17 	ldw	r2,-4(fp)
}
 800e188:	e037883a 	mov	sp,fp
 800e18c:	df000017 	ldw	fp,0(sp)
 800e190:	dec00104 	addi	sp,sp,4
 800e194:	f800283a 	ret

0800e198 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
 800e198:	defff804 	addi	sp,sp,-32
 800e19c:	df000715 	stw	fp,28(sp)
 800e1a0:	df000704 	addi	fp,sp,28
 800e1a4:	e13ffb15 	stw	r4,-20(fp)
 800e1a8:	e17ffc15 	stw	r5,-16(fp)
 800e1ac:	e1bffd15 	stw	r6,-12(fp)
  int rc = -ENOTTY;
 800e1b0:	00bff9c4 	movi	r2,-25
 800e1b4:	e0bffa15 	stw	r2,-24(fp)

  switch (req)
 800e1b8:	e0bffc17 	ldw	r2,-16(fp)
 800e1bc:	e0bfff15 	stw	r2,-4(fp)
 800e1c0:	e0ffff17 	ldw	r3,-4(fp)
 800e1c4:	189a8060 	cmpeqi	r2,r3,27137
 800e1c8:	1000041e 	bne	r2,zero,800e1dc <altera_avalon_jtag_uart_ioctl+0x44>
 800e1cc:	e0ffff17 	ldw	r3,-4(fp)
 800e1d0:	189a80a0 	cmpeqi	r2,r3,27138
 800e1d4:	10001b1e 	bne	r2,zero,800e244 <altera_avalon_jtag_uart_ioctl+0xac>
 800e1d8:	00002706 	br	800e278 <altera_avalon_jtag_uart_ioctl+0xe0>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
 800e1dc:	e0bffb17 	ldw	r2,-20(fp)
 800e1e0:	10c00117 	ldw	r3,4(r2)
 800e1e4:	00a00034 	movhi	r2,32768
 800e1e8:	10bfffc4 	addi	r2,r2,-1
 800e1ec:	18802226 	beq	r3,r2,800e278 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
 800e1f0:	e0bffd17 	ldw	r2,-12(fp)
 800e1f4:	10800017 	ldw	r2,0(r2)
 800e1f8:	e0bff915 	stw	r2,-28(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
 800e1fc:	e0bff917 	ldw	r2,-28(fp)
 800e200:	10800090 	cmplti	r2,r2,2
 800e204:	1000071e 	bne	r2,zero,800e224 <altera_avalon_jtag_uart_ioctl+0x8c>
 800e208:	e0fff917 	ldw	r3,-28(fp)
 800e20c:	00a00034 	movhi	r2,32768
 800e210:	10bfffc4 	addi	r2,r2,-1
 800e214:	18800326 	beq	r3,r2,800e224 <altera_avalon_jtag_uart_ioctl+0x8c>
 800e218:	e0bff917 	ldw	r2,-28(fp)
 800e21c:	e0bffe15 	stw	r2,-8(fp)
 800e220:	00000306 	br	800e230 <altera_avalon_jtag_uart_ioctl+0x98>
 800e224:	00e00034 	movhi	r3,32768
 800e228:	18ffff84 	addi	r3,r3,-2
 800e22c:	e0fffe15 	stw	r3,-8(fp)
 800e230:	e0bffb17 	ldw	r2,-20(fp)
 800e234:	e0fffe17 	ldw	r3,-8(fp)
 800e238:	10c00115 	stw	r3,4(r2)
      rc = 0;
 800e23c:	e03ffa15 	stw	zero,-24(fp)
    }
    break;
 800e240:	00000d06 	br	800e278 <altera_avalon_jtag_uart_ioctl+0xe0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
 800e244:	e0bffb17 	ldw	r2,-20(fp)
 800e248:	10c00117 	ldw	r3,4(r2)
 800e24c:	00a00034 	movhi	r2,32768
 800e250:	10bfffc4 	addi	r2,r2,-1
 800e254:	18800826 	beq	r3,r2,800e278 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
 800e258:	e13ffd17 	ldw	r4,-12(fp)
 800e25c:	e0bffb17 	ldw	r2,-20(fp)
 800e260:	10c00917 	ldw	r3,36(r2)
 800e264:	e0bffb17 	ldw	r2,-20(fp)
 800e268:	10800117 	ldw	r2,4(r2)
 800e26c:	1885803a 	cmpltu	r2,r3,r2
 800e270:	20800015 	stw	r2,0(r4)
      rc = 0;
 800e274:	e03ffa15 	stw	zero,-24(fp)

  default:
    break;
  }

  return rc;
 800e278:	e0bffa17 	ldw	r2,-24(fp)
}
 800e27c:	e037883a 	mov	sp,fp
 800e280:	df000017 	ldw	fp,0(sp)
 800e284:	dec00104 	addi	sp,sp,4
 800e288:	f800283a 	ret

0800e28c <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
 800e28c:	defff204 	addi	sp,sp,-56
 800e290:	dfc00d15 	stw	ra,52(sp)
 800e294:	df000c15 	stw	fp,48(sp)
 800e298:	df000c04 	addi	fp,sp,48
 800e29c:	e13ffb15 	stw	r4,-20(fp)
 800e2a0:	e17ffc15 	stw	r5,-16(fp)
 800e2a4:	e1bffd15 	stw	r6,-12(fp)
 800e2a8:	e1fffe15 	stw	r7,-8(fp)
  char * ptr = buffer;
 800e2ac:	e0bffc17 	ldw	r2,-16(fp)
 800e2b0:	e0bffa15 	stw	r2,-24(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 800e2b4:	00004806 	br	800e3d8 <altera_avalon_jtag_uart_read+0x14c>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
 800e2b8:	e0bffb17 	ldw	r2,-20(fp)
 800e2bc:	10800a17 	ldw	r2,40(r2)
 800e2c0:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
 800e2c4:	e0bffb17 	ldw	r2,-20(fp)
 800e2c8:	10800b17 	ldw	r2,44(r2)
 800e2cc:	e0bff615 	stw	r2,-40(fp)

      if (in >= out)
 800e2d0:	e0fff717 	ldw	r3,-36(fp)
 800e2d4:	e0bff617 	ldw	r2,-40(fp)
 800e2d8:	18800536 	bltu	r3,r2,800e2f0 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
 800e2dc:	e0bff717 	ldw	r2,-36(fp)
 800e2e0:	e0fff617 	ldw	r3,-40(fp)
 800e2e4:	10c5c83a 	sub	r2,r2,r3
 800e2e8:	e0bff815 	stw	r2,-32(fp)
 800e2ec:	00000406 	br	800e300 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
 800e2f0:	00820004 	movi	r2,2048
 800e2f4:	e0fff617 	ldw	r3,-40(fp)
 800e2f8:	10c5c83a 	sub	r2,r2,r3
 800e2fc:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
 800e300:	e0bff817 	ldw	r2,-32(fp)
 800e304:	1005003a 	cmpeq	r2,r2,zero
 800e308:	10001f1e 	bne	r2,zero,800e388 <altera_avalon_jtag_uart_read+0xfc>
        break; /* No more data available */

      if (n > space)
 800e30c:	e0fffd17 	ldw	r3,-12(fp)
 800e310:	e0bff817 	ldw	r2,-32(fp)
 800e314:	1880022e 	bgeu	r3,r2,800e320 <altera_avalon_jtag_uart_read+0x94>
        n = space;
 800e318:	e0bffd17 	ldw	r2,-12(fp)
 800e31c:	e0bff815 	stw	r2,-32(fp)

      memcpy(ptr, sp->rx_buf + out, n);
 800e320:	e0bffb17 	ldw	r2,-20(fp)
 800e324:	10c00e04 	addi	r3,r2,56
 800e328:	e0bff617 	ldw	r2,-40(fp)
 800e32c:	1887883a 	add	r3,r3,r2
 800e330:	e0bffa17 	ldw	r2,-24(fp)
 800e334:	1009883a 	mov	r4,r2
 800e338:	180b883a 	mov	r5,r3
 800e33c:	e1bff817 	ldw	r6,-32(fp)
 800e340:	800a0b40 	call	800a0b4 <memcpy>
      ptr   += n;
 800e344:	e0fff817 	ldw	r3,-32(fp)
 800e348:	e0bffa17 	ldw	r2,-24(fp)
 800e34c:	10c5883a 	add	r2,r2,r3
 800e350:	e0bffa15 	stw	r2,-24(fp)
      space -= n;
 800e354:	e0fffd17 	ldw	r3,-12(fp)
 800e358:	e0bff817 	ldw	r2,-32(fp)
 800e35c:	1885c83a 	sub	r2,r3,r2
 800e360:	e0bffd15 	stw	r2,-12(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 800e364:	e0fff617 	ldw	r3,-40(fp)
 800e368:	e0bff817 	ldw	r2,-32(fp)
 800e36c:	1885883a 	add	r2,r3,r2
 800e370:	10c1ffcc 	andi	r3,r2,2047
 800e374:	e0bffb17 	ldw	r2,-20(fp)
 800e378:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
 800e37c:	e0bffd17 	ldw	r2,-12(fp)
 800e380:	10800048 	cmpgei	r2,r2,1
 800e384:	103fcc1e 	bne	r2,zero,800e2b8 <altera_avalon_jtag_uart_read+0x2c>

    /* If we read any data then return it */
    if (ptr != buffer)
 800e388:	e0fffa17 	ldw	r3,-24(fp)
 800e38c:	e0bffc17 	ldw	r2,-16(fp)
 800e390:	1880141e 	bne	r3,r2,800e3e4 <altera_avalon_jtag_uart_read+0x158>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
 800e394:	e0bffe17 	ldw	r2,-8(fp)
 800e398:	1090000c 	andi	r2,r2,16384
 800e39c:	1004c03a 	cmpne	r2,r2,zero
 800e3a0:	1000101e 	bne	r2,zero,800e3e4 <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
 800e3a4:	e0bffb17 	ldw	r2,-20(fp)
 800e3a8:	10c00a17 	ldw	r3,40(r2)
 800e3ac:	e0bff717 	ldw	r2,-36(fp)
 800e3b0:	1880051e 	bne	r3,r2,800e3c8 <altera_avalon_jtag_uart_read+0x13c>
 800e3b4:	e0bffb17 	ldw	r2,-20(fp)
 800e3b8:	10c00917 	ldw	r3,36(r2)
 800e3bc:	e0bffb17 	ldw	r2,-20(fp)
 800e3c0:	10800117 	ldw	r2,4(r2)
 800e3c4:	18bff736 	bltu	r3,r2,800e3a4 <altera_avalon_jtag_uart_read+0x118>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
 800e3c8:	e0bffb17 	ldw	r2,-20(fp)
 800e3cc:	10c00a17 	ldw	r3,40(r2)
 800e3d0:	e0bff717 	ldw	r2,-36(fp)
 800e3d4:	18800326 	beq	r3,r2,800e3e4 <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 800e3d8:	e0bffd17 	ldw	r2,-12(fp)
 800e3dc:	10800048 	cmpgei	r2,r2,1
 800e3e0:	103fb51e 	bne	r2,zero,800e2b8 <altera_avalon_jtag_uart_read+0x2c>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
 800e3e4:	e0fffa17 	ldw	r3,-24(fp)
 800e3e8:	e0bffc17 	ldw	r2,-16(fp)
 800e3ec:	18801926 	beq	r3,r2,800e454 <altera_avalon_jtag_uart_read+0x1c8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 800e3f0:	0005303a 	rdctl	r2,status
 800e3f4:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 800e3f8:	e0fff517 	ldw	r3,-44(fp)
 800e3fc:	00bfff84 	movi	r2,-2
 800e400:	1884703a 	and	r2,r3,r2
 800e404:	1001703a 	wrctl	status,r2
  
  return context;
 800e408:	e0bff517 	ldw	r2,-44(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
 800e40c:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 800e410:	e0bffb17 	ldw	r2,-20(fp)
 800e414:	10800817 	ldw	r2,32(r2)
 800e418:	10c00054 	ori	r3,r2,1
 800e41c:	e0bffb17 	ldw	r2,-20(fp)
 800e420:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 800e424:	e0bffb17 	ldw	r2,-20(fp)
 800e428:	10800017 	ldw	r2,0(r2)
 800e42c:	11000104 	addi	r4,r2,4
 800e430:	e0bffb17 	ldw	r2,-20(fp)
 800e434:	10800817 	ldw	r2,32(r2)
 800e438:	1007883a 	mov	r3,r2
 800e43c:	2005883a 	mov	r2,r4
 800e440:	10c00035 	stwio	r3,0(r2)
 800e444:	e0bff917 	ldw	r2,-28(fp)
 800e448:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 800e44c:	e0bff417 	ldw	r2,-48(fp)
 800e450:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
 800e454:	e0fffa17 	ldw	r3,-24(fp)
 800e458:	e0bffc17 	ldw	r2,-16(fp)
 800e45c:	18800526 	beq	r3,r2,800e474 <altera_avalon_jtag_uart_read+0x1e8>
    return ptr - buffer;
 800e460:	e0fffa17 	ldw	r3,-24(fp)
 800e464:	e0bffc17 	ldw	r2,-16(fp)
 800e468:	1887c83a 	sub	r3,r3,r2
 800e46c:	e0ffff15 	stw	r3,-4(fp)
 800e470:	00000906 	br	800e498 <altera_avalon_jtag_uart_read+0x20c>
  else if (flags & O_NONBLOCK)
 800e474:	e0bffe17 	ldw	r2,-8(fp)
 800e478:	1090000c 	andi	r2,r2,16384
 800e47c:	1005003a 	cmpeq	r2,r2,zero
 800e480:	1000031e 	bne	r2,zero,800e490 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
 800e484:	00bffd44 	movi	r2,-11
 800e488:	e0bfff15 	stw	r2,-4(fp)
 800e48c:	00000206 	br	800e498 <altera_avalon_jtag_uart_read+0x20c>
  else
    return -EIO;
 800e490:	00bffec4 	movi	r2,-5
 800e494:	e0bfff15 	stw	r2,-4(fp)
 800e498:	e0bfff17 	ldw	r2,-4(fp)
}
 800e49c:	e037883a 	mov	sp,fp
 800e4a0:	dfc00117 	ldw	ra,4(sp)
 800e4a4:	df000017 	ldw	fp,0(sp)
 800e4a8:	dec00204 	addi	sp,sp,8
 800e4ac:	f800283a 	ret

0800e4b0 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 800e4b0:	defff204 	addi	sp,sp,-56
 800e4b4:	dfc00d15 	stw	ra,52(sp)
 800e4b8:	df000c15 	stw	fp,48(sp)
 800e4bc:	df000c04 	addi	fp,sp,48
 800e4c0:	e13ffb15 	stw	r4,-20(fp)
 800e4c4:	e17ffc15 	stw	r5,-16(fp)
 800e4c8:	e1bffd15 	stw	r6,-12(fp)
 800e4cc:	e1fffe15 	stw	r7,-8(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
 800e4d0:	e03ff915 	stw	zero,-28(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
 800e4d4:	e0bffc17 	ldw	r2,-16(fp)
 800e4d8:	e0bff615 	stw	r2,-40(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 800e4dc:	00003a06 	br	800e5c8 <altera_avalon_jtag_uart_write+0x118>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
 800e4e0:	e0bffb17 	ldw	r2,-20(fp)
 800e4e4:	10800c17 	ldw	r2,48(r2)
 800e4e8:	e0bffa15 	stw	r2,-24(fp)
      out = sp->tx_out;
 800e4ec:	e0bffb17 	ldw	r2,-20(fp)
 800e4f0:	10800d17 	ldw	r2,52(r2)
 800e4f4:	e0bff915 	stw	r2,-28(fp)

      if (in < out)
 800e4f8:	e0fffa17 	ldw	r3,-24(fp)
 800e4fc:	e0bff917 	ldw	r2,-28(fp)
 800e500:	1880062e 	bgeu	r3,r2,800e51c <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
 800e504:	e0fff917 	ldw	r3,-28(fp)
 800e508:	e0bffa17 	ldw	r2,-24(fp)
 800e50c:	1885c83a 	sub	r2,r3,r2
 800e510:	10bfffc4 	addi	r2,r2,-1
 800e514:	e0bff815 	stw	r2,-32(fp)
 800e518:	00000c06 	br	800e54c <altera_avalon_jtag_uart_write+0x9c>
      else if (out > 0)
 800e51c:	e0bff917 	ldw	r2,-28(fp)
 800e520:	1005003a 	cmpeq	r2,r2,zero
 800e524:	1000051e 	bne	r2,zero,800e53c <altera_avalon_jtag_uart_write+0x8c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
 800e528:	00820004 	movi	r2,2048
 800e52c:	e0fffa17 	ldw	r3,-24(fp)
 800e530:	10c5c83a 	sub	r2,r2,r3
 800e534:	e0bff815 	stw	r2,-32(fp)
 800e538:	00000406 	br	800e54c <altera_avalon_jtag_uart_write+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
 800e53c:	0081ffc4 	movi	r2,2047
 800e540:	e0fffa17 	ldw	r3,-24(fp)
 800e544:	10c5c83a 	sub	r2,r2,r3
 800e548:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
 800e54c:	e0bff817 	ldw	r2,-32(fp)
 800e550:	1005003a 	cmpeq	r2,r2,zero
 800e554:	10001f1e 	bne	r2,zero,800e5d4 <altera_avalon_jtag_uart_write+0x124>
        break;

      if (n > count)
 800e558:	e0fffd17 	ldw	r3,-12(fp)
 800e55c:	e0bff817 	ldw	r2,-32(fp)
 800e560:	1880022e 	bgeu	r3,r2,800e56c <altera_avalon_jtag_uart_write+0xbc>
        n = count;
 800e564:	e0bffd17 	ldw	r2,-12(fp)
 800e568:	e0bff815 	stw	r2,-32(fp)

      memcpy(sp->tx_buf + in, ptr, n);
 800e56c:	e0bffb17 	ldw	r2,-20(fp)
 800e570:	10c20e04 	addi	r3,r2,2104
 800e574:	e0bffa17 	ldw	r2,-24(fp)
 800e578:	1885883a 	add	r2,r3,r2
 800e57c:	e0fffc17 	ldw	r3,-16(fp)
 800e580:	1009883a 	mov	r4,r2
 800e584:	180b883a 	mov	r5,r3
 800e588:	e1bff817 	ldw	r6,-32(fp)
 800e58c:	800a0b40 	call	800a0b4 <memcpy>
      ptr   += n;
 800e590:	e0fff817 	ldw	r3,-32(fp)
 800e594:	e0bffc17 	ldw	r2,-16(fp)
 800e598:	10c5883a 	add	r2,r2,r3
 800e59c:	e0bffc15 	stw	r2,-16(fp)
      count -= n;
 800e5a0:	e0fffd17 	ldw	r3,-12(fp)
 800e5a4:	e0bff817 	ldw	r2,-32(fp)
 800e5a8:	1885c83a 	sub	r2,r3,r2
 800e5ac:	e0bffd15 	stw	r2,-12(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 800e5b0:	e0fffa17 	ldw	r3,-24(fp)
 800e5b4:	e0bff817 	ldw	r2,-32(fp)
 800e5b8:	1885883a 	add	r2,r3,r2
 800e5bc:	10c1ffcc 	andi	r3,r2,2047
 800e5c0:	e0bffb17 	ldw	r2,-20(fp)
 800e5c4:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 800e5c8:	e0bffd17 	ldw	r2,-12(fp)
 800e5cc:	10800048 	cmpgei	r2,r2,1
 800e5d0:	103fc31e 	bne	r2,zero,800e4e0 <altera_avalon_jtag_uart_write+0x30>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 800e5d4:	0005303a 	rdctl	r2,status
 800e5d8:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 800e5dc:	e0fff517 	ldw	r3,-44(fp)
 800e5e0:	00bfff84 	movi	r2,-2
 800e5e4:	1884703a 	and	r2,r3,r2
 800e5e8:	1001703a 	wrctl	status,r2
  
  return context;
 800e5ec:	e0bff517 	ldw	r2,-44(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
 800e5f0:	e0bff715 	stw	r2,-36(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 800e5f4:	e0bffb17 	ldw	r2,-20(fp)
 800e5f8:	10800817 	ldw	r2,32(r2)
 800e5fc:	10c00094 	ori	r3,r2,2
 800e600:	e0bffb17 	ldw	r2,-20(fp)
 800e604:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 800e608:	e0bffb17 	ldw	r2,-20(fp)
 800e60c:	10800017 	ldw	r2,0(r2)
 800e610:	11000104 	addi	r4,r2,4
 800e614:	e0bffb17 	ldw	r2,-20(fp)
 800e618:	10800817 	ldw	r2,32(r2)
 800e61c:	1007883a 	mov	r3,r2
 800e620:	2005883a 	mov	r2,r4
 800e624:	10c00035 	stwio	r3,0(r2)
 800e628:	e0bff717 	ldw	r2,-36(fp)
 800e62c:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 800e630:	e0bff417 	ldw	r2,-48(fp)
 800e634:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
 800e638:	e0bffd17 	ldw	r2,-12(fp)
 800e63c:	10800050 	cmplti	r2,r2,1
 800e640:	1000111e 	bne	r2,zero,800e688 <altera_avalon_jtag_uart_write+0x1d8>
    {
      if (flags & O_NONBLOCK)
 800e644:	e0bffe17 	ldw	r2,-8(fp)
 800e648:	1090000c 	andi	r2,r2,16384
 800e64c:	1004c03a 	cmpne	r2,r2,zero
 800e650:	1000101e 	bne	r2,zero,800e694 <altera_avalon_jtag_uart_write+0x1e4>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
 800e654:	e0bffb17 	ldw	r2,-20(fp)
 800e658:	10c00d17 	ldw	r3,52(r2)
 800e65c:	e0bff917 	ldw	r2,-28(fp)
 800e660:	1880051e 	bne	r3,r2,800e678 <altera_avalon_jtag_uart_write+0x1c8>
 800e664:	e0bffb17 	ldw	r2,-20(fp)
 800e668:	10c00917 	ldw	r3,36(r2)
 800e66c:	e0bffb17 	ldw	r2,-20(fp)
 800e670:	10800117 	ldw	r2,4(r2)
 800e674:	18bff736 	bltu	r3,r2,800e654 <altera_avalon_jtag_uart_write+0x1a4>
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
 800e678:	e0bffb17 	ldw	r2,-20(fp)
 800e67c:	10c00d17 	ldw	r3,52(r2)
 800e680:	e0bff917 	ldw	r2,-28(fp)
 800e684:	18800326 	beq	r3,r2,800e694 <altera_avalon_jtag_uart_write+0x1e4>
        break;
    }
  }
  while (count > 0);
 800e688:	e0bffd17 	ldw	r2,-12(fp)
 800e68c:	10800048 	cmpgei	r2,r2,1
 800e690:	103fcd1e 	bne	r2,zero,800e5c8 <altera_avalon_jtag_uart_write+0x118>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
 800e694:	e0fffc17 	ldw	r3,-16(fp)
 800e698:	e0bff617 	ldw	r2,-40(fp)
 800e69c:	18800526 	beq	r3,r2,800e6b4 <altera_avalon_jtag_uart_write+0x204>
    return ptr - start;
 800e6a0:	e0fffc17 	ldw	r3,-16(fp)
 800e6a4:	e0bff617 	ldw	r2,-40(fp)
 800e6a8:	1887c83a 	sub	r3,r3,r2
 800e6ac:	e0ffff15 	stw	r3,-4(fp)
 800e6b0:	00000906 	br	800e6d8 <altera_avalon_jtag_uart_write+0x228>
  else if (flags & O_NONBLOCK)
 800e6b4:	e0bffe17 	ldw	r2,-8(fp)
 800e6b8:	1090000c 	andi	r2,r2,16384
 800e6bc:	1005003a 	cmpeq	r2,r2,zero
 800e6c0:	1000031e 	bne	r2,zero,800e6d0 <altera_avalon_jtag_uart_write+0x220>
    return -EWOULDBLOCK;
 800e6c4:	00bffd44 	movi	r2,-11
 800e6c8:	e0bfff15 	stw	r2,-4(fp)
 800e6cc:	00000206 	br	800e6d8 <altera_avalon_jtag_uart_write+0x228>
  else
    return -EIO; /* Host not connected */
 800e6d0:	00bffec4 	movi	r2,-5
 800e6d4:	e0bfff15 	stw	r2,-4(fp)
 800e6d8:	e0bfff17 	ldw	r2,-4(fp)
}
 800e6dc:	e037883a 	mov	sp,fp
 800e6e0:	dfc00117 	ldw	ra,4(sp)
 800e6e4:	df000017 	ldw	fp,0(sp)
 800e6e8:	dec00204 	addi	sp,sp,8
 800e6ec:	f800283a 	ret

0800e6f0 <alt_avalon_mailbox_init>:

/*
 * Register a Mutex device
 */
int alt_avalon_mailbox_init (alt_mailbox_dev* dev)
{
 800e6f0:	defffa04 	addi	sp,sp,-24
 800e6f4:	dfc00515 	stw	ra,20(sp)
 800e6f8:	df000415 	stw	fp,16(sp)
 800e6fc:	df000404 	addi	fp,sp,16
 800e700:	e13fff15 	stw	r4,-4(fp)
  int ret_code;
  alt_mutex_dev* write_mutex, *read_mutex;
  extern alt_llist alt_mailbox_list;

  ret_code = alt_avalon_mutex_reg( &dev->write_mutex );
 800e704:	e0bfff17 	ldw	r2,-4(fp)
 800e708:	11000704 	addi	r4,r2,28
 800e70c:	800e8480 	call	800e848 <alt_avalon_mutex_reg>
 800e710:	e0bffe15 	stw	r2,-8(fp)

  if (!ret_code)
 800e714:	e0bffe17 	ldw	r2,-8(fp)
 800e718:	1004c03a 	cmpne	r2,r2,zero
 800e71c:	1000041e 	bne	r2,zero,800e730 <alt_avalon_mailbox_init+0x40>
  {
    ret_code = alt_avalon_mutex_reg( &dev->read_mutex );
 800e720:	e0bfff17 	ldw	r2,-4(fp)
 800e724:	11000b04 	addi	r4,r2,44
 800e728:	800e8480 	call	800e848 <alt_avalon_mutex_reg>
 800e72c:	e0bffe15 	stw	r2,-8(fp)
  }

  if (!ret_code)
 800e730:	e0bffe17 	ldw	r2,-8(fp)
 800e734:	1004c03a 	cmpne	r2,r2,zero
 800e738:	1000041e 	bne	r2,zero,800e74c <alt_avalon_mailbox_init+0x5c>
  {
    ret_code = alt_dev_llist_insert((alt_dev_llist*) dev, &alt_mailbox_list);
 800e73c:	e13fff17 	ldw	r4,-4(fp)
 800e740:	d1601104 	addi	r5,gp,-32700
 800e744:	80106200 	call	8010620 <alt_dev_llist_insert>
 800e748:	e0bffe15 	stw	r2,-8(fp)
  }

  if (!ret_code)
 800e74c:	e0bffe17 	ldw	r2,-8(fp)
 800e750:	1004c03a 	cmpne	r2,r2,zero
 800e754:	1000361e 	bne	r2,zero,800e830 <alt_avalon_mailbox_init+0x140>
  {
    write_mutex = altera_avalon_mutex_open(dev->write_mutex.name);
 800e758:	e0bfff17 	ldw	r2,-4(fp)
 800e75c:	11000917 	ldw	r4,36(r2)
 800e760:	800ec940 	call	800ec94 <altera_avalon_mutex_open>
 800e764:	e0bffd15 	stw	r2,-12(fp)
    if (write_mutex)
 800e768:	e0bffd17 	ldw	r2,-12(fp)
 800e76c:	1005003a 	cmpeq	r2,r2,zero
 800e770:	10002f1e 	bne	r2,zero,800e830 <alt_avalon_mailbox_init+0x140>
    {
      read_mutex = altera_avalon_mutex_open(dev->read_mutex.name);
 800e774:	e0bfff17 	ldw	r2,-4(fp)
 800e778:	11000d17 	ldw	r4,52(r2)
 800e77c:	800ec940 	call	800ec94 <altera_avalon_mutex_open>
 800e780:	e0bffc15 	stw	r2,-16(fp)
      if (read_mutex)
 800e784:	e0bffc17 	ldw	r2,-16(fp)
 800e788:	1005003a 	cmpeq	r2,r2,zero
 800e78c:	1000281e 	bne	r2,zero,800e830 <alt_avalon_mailbox_init+0x140>
      {
        while (altera_avalon_mutex_first_lock(write_mutex))
 800e790:	00000f06 	br	800e7d0 <alt_avalon_mailbox_init+0xe0>
        {
          if (!altera_avalon_mutex_trylock(write_mutex, 1))
 800e794:	e13ffd17 	ldw	r4,-12(fp)
 800e798:	01400044 	movi	r5,1
 800e79c:	800edac0 	call	800edac <altera_avalon_mutex_trylock>
 800e7a0:	1004c03a 	cmpne	r2,r2,zero
 800e7a4:	10000a1e 	bne	r2,zero,800e7d0 <alt_avalon_mailbox_init+0xe0>
          {
            IOWR((alt_u32)(dev->write_ptr), 0,
 800e7a8:	e0bfff17 	ldw	r2,-4(fp)
 800e7ac:	10800317 	ldw	r2,12(r2)
 800e7b0:	1009883a 	mov	r4,r2
 800e7b4:	e0bfff17 	ldw	r2,-4(fp)
 800e7b8:	10800517 	ldw	r2,20(r2)
 800e7bc:	1007883a 	mov	r3,r2
 800e7c0:	2005883a 	mov	r2,r4
 800e7c4:	10c00035 	stwio	r3,0(r2)
              (alt_u32) dev->mailbox_mem_start_ptr);
            altera_avalon_mutex_unlock(write_mutex);
 800e7c8:	e13ffd17 	ldw	r4,-12(fp)
 800e7cc:	800edec0 	call	800edec <altera_avalon_mutex_unlock>
    if (write_mutex)
    {
      read_mutex = altera_avalon_mutex_open(dev->read_mutex.name);
      if (read_mutex)
      {
        while (altera_avalon_mutex_first_lock(write_mutex))
 800e7d0:	e13ffd17 	ldw	r4,-12(fp)
 800e7d4:	800eec40 	call	800eec4 <altera_avalon_mutex_first_lock>
 800e7d8:	1004c03a 	cmpne	r2,r2,zero
 800e7dc:	103fed1e 	bne	r2,zero,800e794 <alt_avalon_mailbox_init+0xa4>
              (alt_u32) dev->mailbox_mem_start_ptr);
            altera_avalon_mutex_unlock(write_mutex);
          }
        }

        while (altera_avalon_mutex_first_lock(read_mutex))
 800e7e0:	00000f06 	br	800e820 <alt_avalon_mailbox_init+0x130>
        {
          if (!altera_avalon_mutex_trylock(read_mutex, 1))
 800e7e4:	e13ffc17 	ldw	r4,-16(fp)
 800e7e8:	01400044 	movi	r5,1
 800e7ec:	800edac0 	call	800edac <altera_avalon_mutex_trylock>
 800e7f0:	1004c03a 	cmpne	r2,r2,zero
 800e7f4:	10000a1e 	bne	r2,zero,800e820 <alt_avalon_mailbox_init+0x130>
          {
            IOWR((alt_u32)(dev->read_ptr), 0,
 800e7f8:	e0bfff17 	ldw	r2,-4(fp)
 800e7fc:	10800417 	ldw	r2,16(r2)
 800e800:	1009883a 	mov	r4,r2
 800e804:	e0bfff17 	ldw	r2,-4(fp)
 800e808:	10800517 	ldw	r2,20(r2)
 800e80c:	1007883a 	mov	r3,r2
 800e810:	2005883a 	mov	r2,r4
 800e814:	10c00035 	stwio	r3,0(r2)
              (alt_u32) dev->mailbox_mem_start_ptr);
            altera_avalon_mutex_unlock(read_mutex);
 800e818:	e13ffc17 	ldw	r4,-16(fp)
 800e81c:	800edec0 	call	800edec <altera_avalon_mutex_unlock>
              (alt_u32) dev->mailbox_mem_start_ptr);
            altera_avalon_mutex_unlock(write_mutex);
          }
        }

        while (altera_avalon_mutex_first_lock(read_mutex))
 800e820:	e13ffc17 	ldw	r4,-16(fp)
 800e824:	800eec40 	call	800eec4 <altera_avalon_mutex_first_lock>
 800e828:	1004c03a 	cmpne	r2,r2,zero
 800e82c:	103fed1e 	bne	r2,zero,800e7e4 <alt_avalon_mailbox_init+0xf4>
          }
        }
      }
    }
  }
  return ret_code;
 800e830:	e0bffe17 	ldw	r2,-8(fp)
}
 800e834:	e037883a 	mov	sp,fp
 800e838:	dfc00117 	ldw	ra,4(sp)
 800e83c:	df000017 	ldw	fp,0(sp)
 800e840:	dec00204 	addi	sp,sp,8
 800e844:	f800283a 	ret

0800e848 <alt_avalon_mutex_reg>:
/*
 * Register a Mutex device
 */

static ALT_INLINE int alt_avalon_mutex_reg (alt_mutex_dev* dev)
{
 800e848:	defffc04 	addi	sp,sp,-16
 800e84c:	dfc00315 	stw	ra,12(sp)
 800e850:	df000215 	stw	fp,8(sp)
 800e854:	df000204 	addi	fp,sp,8
 800e858:	e13fff15 	stw	r4,-4(fp)
 * HAL.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_no_error (void)
{
  return 0;
 800e85c:	0005883a 	mov	r2,zero
  int ret_code;
  extern alt_llist alt_mutex_list;
  ret_code = ALT_SEM_CREATE (&dev->lock, 1);
 800e860:	e0bffe15 	stw	r2,-8(fp)
  if (!ret_code)
 800e864:	e0bffe17 	ldw	r2,-8(fp)
 800e868:	1004c03a 	cmpne	r2,r2,zero
 800e86c:	1000061e 	bne	r2,zero,800e888 <alt_avalon_mutex_reg+0x40>
  {
    ret_code = alt_dev_llist_insert((alt_dev_llist*) dev, &alt_mutex_list);
 800e870:	e13fff17 	ldw	r4,-4(fp)
 800e874:	01420074 	movhi	r5,2049
 800e878:	294e6104 	addi	r5,r5,14724
 800e87c:	80106200 	call	8010620 <alt_dev_llist_insert>
 800e880:	e0bffe15 	stw	r2,-8(fp)
 800e884:	00000506 	br	800e89c <alt_avalon_mutex_reg+0x54>
  }
  else
  {
    ALT_ERRNO = ENOMEM;
 800e888:	800e8b40 	call	800e8b4 <alt_get_errno>
 800e88c:	00c00304 	movi	r3,12
 800e890:	10c00015 	stw	r3,0(r2)
    ret_code = -ENOMEM;
 800e894:	00bffd04 	movi	r2,-12
 800e898:	e0bffe15 	stw	r2,-8(fp)
  }

  return ret_code;
 800e89c:	e0bffe17 	ldw	r2,-8(fp)
}
 800e8a0:	e037883a 	mov	sp,fp
 800e8a4:	dfc00117 	ldw	ra,4(sp)
 800e8a8:	df000017 	ldw	fp,0(sp)
 800e8ac:	dec00204 	addi	sp,sp,8
 800e8b0:	f800283a 	ret

0800e8b4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 800e8b4:	defffd04 	addi	sp,sp,-12
 800e8b8:	dfc00215 	stw	ra,8(sp)
 800e8bc:	df000115 	stw	fp,4(sp)
 800e8c0:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 800e8c4:	00820074 	movhi	r2,2049
 800e8c8:	108e5d04 	addi	r2,r2,14708
 800e8cc:	10800017 	ldw	r2,0(r2)
 800e8d0:	1005003a 	cmpeq	r2,r2,zero
 800e8d4:	1000061e 	bne	r2,zero,800e8f0 <alt_get_errno+0x3c>
 800e8d8:	00820074 	movhi	r2,2049
 800e8dc:	108e5d04 	addi	r2,r2,14708
 800e8e0:	10800017 	ldw	r2,0(r2)
 800e8e4:	103ee83a 	callr	r2
 800e8e8:	e0bfff15 	stw	r2,-4(fp)
 800e8ec:	00000306 	br	800e8fc <alt_get_errno+0x48>
 800e8f0:	00820074 	movhi	r2,2049
 800e8f4:	10956404 	addi	r2,r2,21904
 800e8f8:	e0bfff15 	stw	r2,-4(fp)
 800e8fc:	e0bfff17 	ldw	r2,-4(fp)
}
 800e900:	e037883a 	mov	sp,fp
 800e904:	dfc00117 	ldw	ra,4(sp)
 800e908:	df000017 	ldw	fp,0(sp)
 800e90c:	dec00204 	addi	sp,sp,8
 800e910:	f800283a 	ret

0800e914 <altera_avalon_mailbox_open>:
 * Search the list of registered mailboxes for one with the supplied name.
 *
 * The return value will be NULL on failure, and non-NULL otherwise.
 */
alt_mailbox_dev* altera_avalon_mailbox_open (const char* name)
{
 800e914:	defffc04 	addi	sp,sp,-16
 800e918:	dfc00315 	stw	ra,12(sp)
 800e91c:	df000215 	stw	fp,8(sp)
 800e920:	df000204 	addi	fp,sp,8
 800e924:	e13fff15 	stw	r4,-4(fp)
  alt_mailbox_dev* dev;

  dev = (alt_mailbox_dev*) alt_find_dev (name, &alt_mailbox_list);
 800e928:	e13fff17 	ldw	r4,-4(fp)
 800e92c:	d1601104 	addi	r5,gp,-32700
 800e930:	80107fc0 	call	80107fc <alt_find_dev>
 800e934:	e0bffe15 	stw	r2,-8(fp)

  if (NULL == dev)
 800e938:	e0bffe17 	ldw	r2,-8(fp)
 800e93c:	1004c03a 	cmpne	r2,r2,zero
 800e940:	1000041e 	bne	r2,zero,800e954 <altera_avalon_mailbox_open+0x40>
  {
    ALT_ERRNO = ENODEV;
 800e944:	800e8b40 	call	800e8b4 <alt_get_errno>
 800e948:	1007883a 	mov	r3,r2
 800e94c:	008004c4 	movi	r2,19
 800e950:	18800015 	stw	r2,0(r3)
  }

  return dev;
 800e954:	e0bffe17 	ldw	r2,-8(fp)

}
 800e958:	e037883a 	mov	sp,fp
 800e95c:	dfc00117 	ldw	ra,4(sp)
 800e960:	df000017 	ldw	fp,0(sp)
 800e964:	dec00204 	addi	sp,sp,8
 800e968:	f800283a 	ret

0800e96c <altera_avalon_mailbox_close>:
 * altera_avalon_mailbox_close - Does nothing at the moment, but included for 
 * completeness
 *
 */
void altera_avalon_mailbox_close (alt_mailbox_dev* dev)
{
 800e96c:	defffe04 	addi	sp,sp,-8
 800e970:	df000115 	stw	fp,4(sp)
 800e974:	df000104 	addi	fp,sp,4
 800e978:	e13fff15 	stw	r4,-4(fp)
  return;
}
 800e97c:	e037883a 	mov	sp,fp
 800e980:	df000017 	ldw	fp,0(sp)
 800e984:	dec00104 	addi	sp,sp,4
 800e988:	f800283a 	ret

0800e98c <altera_avalon_mailbox_post>:
 * 
 * Post a message to the mailbox
 *
 */
int altera_avalon_mailbox_post (alt_mailbox_dev* dev, alt_u32 msg)
{
 800e98c:	defff904 	addi	sp,sp,-28
 800e990:	dfc00615 	stw	ra,24(sp)
 800e994:	df000515 	stw	fp,20(sp)
 800e998:	df000504 	addi	fp,sp,20
 800e99c:	e13ffe15 	stw	r4,-8(fp)
 800e9a0:	e17fff15 	stw	r5,-4(fp)
  int ret_code = 0;
 800e9a4:	e03ffd15 	stw	zero,-12(fp)
  *   Claim the Mutex on the write pointer 
  *
  *   The mutex function takes care of the thread sempahore if running
  *   in a multi-threaded environment
  */
  altera_avalon_mutex_lock( &dev->write_mutex, 1 );
 800e9a8:	e0bffe17 	ldw	r2,-8(fp)
 800e9ac:	11000704 	addi	r4,r2,28
 800e9b0:	01400044 	movi	r5,1
 800e9b4:	800ed6c0 	call	800ed6c <altera_avalon_mutex_lock>

  temp = (alt_u32 *) IORD(dev->write_ptr, 0);
 800e9b8:	e0bffe17 	ldw	r2,-8(fp)
 800e9bc:	10800317 	ldw	r2,12(r2)
 800e9c0:	10800037 	ldwio	r2,0(r2)
 800e9c4:	e0bffc15 	stw	r2,-16(fp)
  next_write = alt_mailbox_increment_ptr(dev, temp);
 800e9c8:	e13ffe17 	ldw	r4,-8(fp)
 800e9cc:	e17ffc17 	ldw	r5,-16(fp)
 800e9d0:	800ea480 	call	800ea48 <alt_mailbox_increment_ptr>
 800e9d4:	e0bffb15 	stw	r2,-20(fp)

  if (next_write == ((alt_u32 *)IORD(dev->read_ptr, 0)) )
 800e9d8:	e0bffe17 	ldw	r2,-8(fp)
 800e9dc:	10800417 	ldw	r2,16(r2)
 800e9e0:	10800037 	ldwio	r2,0(r2)
 800e9e4:	1007883a 	mov	r3,r2
 800e9e8:	e0bffb17 	ldw	r2,-20(fp)
 800e9ec:	1880061e 	bne	r3,r2,800ea08 <altera_avalon_mailbox_post+0x7c>
  {
    ALT_ERRNO = EWOULDBLOCK;
 800e9f0:	800e8b40 	call	800e8b4 <alt_get_errno>
 800e9f4:	00c002c4 	movi	r3,11
 800e9f8:	10c00015 	stw	r3,0(r2)
    ret_code = -EWOULDBLOCK;
 800e9fc:	00bffd44 	movi	r2,-11
 800ea00:	e0bffd15 	stw	r2,-12(fp)
 800ea04:	00000706 	br	800ea24 <altera_avalon_mailbox_post+0x98>
  }
  else
  {
    IOWR(temp, 0, msg);
 800ea08:	e0bffc17 	ldw	r2,-16(fp)
 800ea0c:	e0ffff17 	ldw	r3,-4(fp)
 800ea10:	10c00035 	stwio	r3,0(r2)
    IOWR((alt_u32)(dev->write_ptr), 0, (alt_u32)next_write);
 800ea14:	e0bffe17 	ldw	r2,-8(fp)
 800ea18:	10800317 	ldw	r2,12(r2)
 800ea1c:	e0fffb17 	ldw	r3,-20(fp)
 800ea20:	10c00035 	stwio	r3,0(r2)
  }

  altera_avalon_mutex_unlock( &dev->write_mutex );
 800ea24:	e0bffe17 	ldw	r2,-8(fp)
 800ea28:	11000704 	addi	r4,r2,28
 800ea2c:	800edec0 	call	800edec <altera_avalon_mutex_unlock>

  return ret_code;
 800ea30:	e0bffd17 	ldw	r2,-12(fp)

}
 800ea34:	e037883a 	mov	sp,fp
 800ea38:	dfc00117 	ldw	ra,4(sp)
 800ea3c:	df000017 	ldw	fp,0(sp)
 800ea40:	dec00204 	addi	sp,sp,8
 800ea44:	f800283a 	ret

0800ea48 <alt_mailbox_increment_ptr>:
 *
 * Increment one of the pointers and if that would take it beyond the end
 * of the shared memory put it at the start
 */
static inline alt_u32* alt_mailbox_increment_ptr(alt_mailbox_dev* dev, alt_u32* ptr)
{
 800ea48:	defffd04 	addi	sp,sp,-12
 800ea4c:	df000215 	stw	fp,8(sp)
 800ea50:	df000204 	addi	fp,sp,8
 800ea54:	e13ffe15 	stw	r4,-8(fp)
 800ea58:	e17fff15 	stw	r5,-4(fp)
  ptr += 1;
 800ea5c:	e0bfff17 	ldw	r2,-4(fp)
 800ea60:	10800104 	addi	r2,r2,4
 800ea64:	e0bfff15 	stw	r2,-4(fp)

  if (ptr > dev->mailbox_mem_end_ptr)
 800ea68:	e0bffe17 	ldw	r2,-8(fp)
 800ea6c:	10c00617 	ldw	r3,24(r2)
 800ea70:	e0bfff17 	ldw	r2,-4(fp)
 800ea74:	1880032e 	bgeu	r3,r2,800ea84 <alt_mailbox_increment_ptr+0x3c>
  {
    ptr = dev->mailbox_mem_start_ptr;
 800ea78:	e0bffe17 	ldw	r2,-8(fp)
 800ea7c:	10800517 	ldw	r2,20(r2)
 800ea80:	e0bfff15 	stw	r2,-4(fp)
  }

  return ptr;
 800ea84:	e0bfff17 	ldw	r2,-4(fp)
}
 800ea88:	e037883a 	mov	sp,fp
 800ea8c:	df000017 	ldw	fp,0(sp)
 800ea90:	dec00104 	addi	sp,sp,4
 800ea94:	f800283a 	ret

0800ea98 <altera_avalon_mailbox_pend>:
 * 
 * Block until a message is available in the mailbox
 *
 */
alt_u32 altera_avalon_mailbox_pend (alt_mailbox_dev* dev)
{
 800ea98:	defffa04 	addi	sp,sp,-24
 800ea9c:	dfc00515 	stw	ra,20(sp)
 800eaa0:	df000415 	stw	fp,16(sp)
 800eaa4:	dc000315 	stw	r16,12(sp)
 800eaa8:	df000304 	addi	fp,sp,12
 800eaac:	e13fff15 	stw	r4,-4(fp)
  *   Claim the Mutex on the read pointer
  *
  *   The mutex function takes care of the thread sempahore if running
  *   in a multi-threaded environment
  */
  altera_avalon_mutex_lock( &dev->read_mutex, 1 );
 800eab0:	e0bfff17 	ldw	r2,-4(fp)
 800eab4:	11000b04 	addi	r4,r2,44
 800eab8:	01400044 	movi	r5,1
 800eabc:	800ed6c0 	call	800ed6c <altera_avalon_mutex_lock>

  temp = (alt_u32 *)IORD(dev->read_ptr, 0);
 800eac0:	e0bfff17 	ldw	r2,-4(fp)
 800eac4:	10800417 	ldw	r2,16(r2)
 800eac8:	10800037 	ldwio	r2,0(r2)
 800eacc:	e0bffd15 	stw	r2,-12(fp)

  while ( (alt_u32 *)(IORD(dev->write_ptr, 0)) == temp );
 800ead0:	e0bfff17 	ldw	r2,-4(fp)
 800ead4:	10800317 	ldw	r2,12(r2)
 800ead8:	10800037 	ldwio	r2,0(r2)
 800eadc:	1007883a 	mov	r3,r2
 800eae0:	e0bffd17 	ldw	r2,-12(fp)
 800eae4:	18bffa26 	beq	r3,r2,800ead0 <altera_avalon_mailbox_pend+0x38>

  msg = IORD(temp, 0);
 800eae8:	e0bffd17 	ldw	r2,-12(fp)
 800eaec:	10800037 	ldwio	r2,0(r2)
 800eaf0:	e0bffe15 	stw	r2,-8(fp)

  IOWR( (alt_u32)(dev->read_ptr), 0,
 800eaf4:	e0bfff17 	ldw	r2,-4(fp)
 800eaf8:	10800417 	ldw	r2,16(r2)
 800eafc:	1021883a 	mov	r16,r2
 800eb00:	e13fff17 	ldw	r4,-4(fp)
 800eb04:	e17ffd17 	ldw	r5,-12(fp)
 800eb08:	800ea480 	call	800ea48 <alt_mailbox_increment_ptr>
 800eb0c:	1007883a 	mov	r3,r2
 800eb10:	8005883a 	mov	r2,r16
 800eb14:	10c00035 	stwio	r3,0(r2)
    (alt_u32)(alt_mailbox_increment_ptr(dev, temp)) );

  altera_avalon_mutex_unlock( &dev->read_mutex );
 800eb18:	e0bfff17 	ldw	r2,-4(fp)
 800eb1c:	11000b04 	addi	r4,r2,44
 800eb20:	800edec0 	call	800edec <altera_avalon_mutex_unlock>

  return msg;
 800eb24:	e0bffe17 	ldw	r2,-8(fp)

}
 800eb28:	e037883a 	mov	sp,fp
 800eb2c:	dfc00217 	ldw	ra,8(sp)
 800eb30:	df000117 	ldw	fp,4(sp)
 800eb34:	dc000017 	ldw	r16,0(sp)
 800eb38:	dec00304 	addi	sp,sp,12
 800eb3c:	f800283a 	ret

0800eb40 <altera_avalon_mailbox_get>:
 * If a message is available in the mailbox return it otherwise return NULL
 * i.e. this is Non-Blocking
 *
 */
alt_u32 altera_avalon_mailbox_get (alt_mailbox_dev* dev, int* err)
{
 800eb40:	defff904 	addi	sp,sp,-28
 800eb44:	dfc00615 	stw	ra,24(sp)
 800eb48:	df000515 	stw	fp,20(sp)
 800eb4c:	dc000415 	stw	r16,16(sp)
 800eb50:	df000404 	addi	fp,sp,16
 800eb54:	e13ffe15 	stw	r4,-8(fp)
 800eb58:	e17fff15 	stw	r5,-4(fp)
  alt_u32 msg;
  alt_u32* temp;
  *err = 0;
 800eb5c:	e0bfff17 	ldw	r2,-4(fp)
 800eb60:	10000015 	stw	zero,0(r2)
  *   Claim the Mutex on the read pointer 
  *
  *   The mutex function takes care of the thread sempahore if running
  *   in a multi-threaded environment
  */
  altera_avalon_mutex_lock( &dev->read_mutex, 1 );
 800eb64:	e0bffe17 	ldw	r2,-8(fp)
 800eb68:	11000b04 	addi	r4,r2,44
 800eb6c:	01400044 	movi	r5,1
 800eb70:	800ed6c0 	call	800ed6c <altera_avalon_mutex_lock>

  temp = (alt_u32 *)IORD(dev->read_ptr, 0);
 800eb74:	e0bffe17 	ldw	r2,-8(fp)
 800eb78:	10800417 	ldw	r2,16(r2)
 800eb7c:	10800037 	ldwio	r2,0(r2)
 800eb80:	e0bffc15 	stw	r2,-16(fp)

  if ( (alt_u32 *)(IORD(dev->write_ptr, 0)) == temp )
 800eb84:	e0bffe17 	ldw	r2,-8(fp)
 800eb88:	10800317 	ldw	r2,12(r2)
 800eb8c:	10800037 	ldwio	r2,0(r2)
 800eb90:	1007883a 	mov	r3,r2
 800eb94:	e0bffc17 	ldw	r2,-16(fp)
 800eb98:	1880091e 	bne	r3,r2,800ebc0 <altera_avalon_mailbox_get+0x80>
  {
    *err = -EWOULDBLOCK;
 800eb9c:	e0ffff17 	ldw	r3,-4(fp)
 800eba0:	00bffd44 	movi	r2,-11
 800eba4:	18800015 	stw	r2,0(r3)
    ALT_ERRNO = EWOULDBLOCK;
 800eba8:	800e8b40 	call	800e8b4 <alt_get_errno>
 800ebac:	1007883a 	mov	r3,r2
 800ebb0:	008002c4 	movi	r2,11
 800ebb4:	18800015 	stw	r2,0(r3)
    msg = 0;
 800ebb8:	e03ffd15 	stw	zero,-12(fp)
 800ebbc:	00000c06 	br	800ebf0 <altera_avalon_mailbox_get+0xb0>
  }
  else
  {
    msg = IORD(temp, 0);
 800ebc0:	e0bffc17 	ldw	r2,-16(fp)
 800ebc4:	10800037 	ldwio	r2,0(r2)
 800ebc8:	e0bffd15 	stw	r2,-12(fp)
    IOWR(dev->read_ptr, 0,
 800ebcc:	e0bffe17 	ldw	r2,-8(fp)
 800ebd0:	10800417 	ldw	r2,16(r2)
 800ebd4:	1021883a 	mov	r16,r2
 800ebd8:	e13ffe17 	ldw	r4,-8(fp)
 800ebdc:	e17ffc17 	ldw	r5,-16(fp)
 800ebe0:	800ea480 	call	800ea48 <alt_mailbox_increment_ptr>
 800ebe4:	1007883a 	mov	r3,r2
 800ebe8:	8005883a 	mov	r2,r16
 800ebec:	10c00035 	stwio	r3,0(r2)
      (alt_u32)(alt_mailbox_increment_ptr(dev, temp)) );
  }

  altera_avalon_mutex_unlock( &dev->read_mutex );
 800ebf0:	e0bffe17 	ldw	r2,-8(fp)
 800ebf4:	11000b04 	addi	r4,r2,44
 800ebf8:	800edec0 	call	800edec <altera_avalon_mutex_unlock>

  return msg;
 800ebfc:	e0bffd17 	ldw	r2,-12(fp)

}
 800ec00:	e037883a 	mov	sp,fp
 800ec04:	dfc00217 	ldw	ra,8(sp)
 800ec08:	df000117 	ldw	fp,4(sp)
 800ec0c:	dc000017 	ldw	r16,0(sp)
 800ec10:	dec00304 	addi	sp,sp,12
 800ec14:	f800283a 	ret

0800ec18 <alt_mutex_trylock>:
 *
 * returns 0 on success -1 otherwise
 *
 */
static int alt_mutex_trylock( alt_mutex_dev* dev, alt_u32 value )
{
 800ec18:	defff904 	addi	sp,sp,-28
 800ec1c:	df000615 	stw	fp,24(sp)
 800ec20:	df000604 	addi	fp,sp,24
 800ec24:	e13ffe15 	stw	r4,-8(fp)
 800ec28:	e17fff15 	stw	r5,-4(fp)
  alt_u32 id, data, check;
  int ret_code = -1;
 800ec2c:	00bfffc4 	movi	r2,-1
 800ec30:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_READ_CPUID(id);
 800ec34:	0005317a 	rdctl	r2,cpuid
 800ec38:	e0bffd15 	stw	r2,-12(fp)

  /* the data we want the mutex to hold */
  data = (id << ALTERA_AVALON_MUTEX_MUTEX_OWNER_OFST) | value;
 800ec3c:	e0bffd17 	ldw	r2,-12(fp)
 800ec40:	1006943a 	slli	r3,r2,16
 800ec44:	e0bfff17 	ldw	r2,-4(fp)
 800ec48:	1884b03a 	or	r2,r3,r2
 800ec4c:	e0bffc15 	stw	r2,-16(fp)

  /* attempt to write to the mutex */
  IOWR_ALTERA_AVALON_MUTEX_MUTEX(dev->mutex_base, data);
 800ec50:	e0bffe17 	ldw	r2,-8(fp)
 800ec54:	10800317 	ldw	r2,12(r2)
 800ec58:	e0fffc17 	ldw	r3,-16(fp)
 800ec5c:	10c00035 	stwio	r3,0(r2)
  
  check = IORD_ALTERA_AVALON_MUTEX_MUTEX(dev->mutex_base);
 800ec60:	e0bffe17 	ldw	r2,-8(fp)
 800ec64:	10800317 	ldw	r2,12(r2)
 800ec68:	10800037 	ldwio	r2,0(r2)
 800ec6c:	e0bffb15 	stw	r2,-20(fp)

  if ( check == data)
 800ec70:	e0fffb17 	ldw	r3,-20(fp)
 800ec74:	e0bffc17 	ldw	r2,-16(fp)
 800ec78:	1880011e 	bne	r3,r2,800ec80 <alt_mutex_trylock+0x68>
  {
    ret_code = 0;
 800ec7c:	e03ffa15 	stw	zero,-24(fp)
  }

  return ret_code;
 800ec80:	e0bffa17 	ldw	r2,-24(fp)
}
 800ec84:	e037883a 	mov	sp,fp
 800ec88:	df000017 	ldw	fp,0(sp)
 800ec8c:	dec00104 	addi	sp,sp,4
 800ec90:	f800283a 	ret

0800ec94 <altera_avalon_mutex_open>:
 * Search the list of registered mutexes for one with the supplied name.
 *
 * The return value will be NULL on failure, and non-NULL otherwise.
 */
alt_mutex_dev* altera_avalon_mutex_open (const char* name)
{
 800ec94:	defffc04 	addi	sp,sp,-16
 800ec98:	dfc00315 	stw	ra,12(sp)
 800ec9c:	df000215 	stw	fp,8(sp)
 800eca0:	df000204 	addi	fp,sp,8
 800eca4:	e13fff15 	stw	r4,-4(fp)
  alt_mutex_dev* dev;

  dev = (alt_mutex_dev*) alt_find_dev (name, &alt_mutex_list);
 800eca8:	e13fff17 	ldw	r4,-4(fp)
 800ecac:	d1601304 	addi	r5,gp,-32692
 800ecb0:	80107fc0 	call	80107fc <alt_find_dev>
 800ecb4:	e0bffe15 	stw	r2,-8(fp)

  if (NULL == dev)
 800ecb8:	e0bffe17 	ldw	r2,-8(fp)
 800ecbc:	1004c03a 	cmpne	r2,r2,zero
 800ecc0:	1000041e 	bne	r2,zero,800ecd4 <altera_avalon_mutex_open+0x40>
  {
    ALT_ERRNO = ENODEV;
 800ecc4:	800ecec0 	call	800ecec <alt_get_errno>
 800ecc8:	1007883a 	mov	r3,r2
 800eccc:	008004c4 	movi	r2,19
 800ecd0:	18800015 	stw	r2,0(r3)
  }

  return dev;
 800ecd4:	e0bffe17 	ldw	r2,-8(fp)
}
 800ecd8:	e037883a 	mov	sp,fp
 800ecdc:	dfc00117 	ldw	ra,4(sp)
 800ece0:	df000017 	ldw	fp,0(sp)
 800ece4:	dec00204 	addi	sp,sp,8
 800ece8:	f800283a 	ret

0800ecec <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 800ecec:	defffd04 	addi	sp,sp,-12
 800ecf0:	dfc00215 	stw	ra,8(sp)
 800ecf4:	df000115 	stw	fp,4(sp)
 800ecf8:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 800ecfc:	00820074 	movhi	r2,2049
 800ed00:	108e5d04 	addi	r2,r2,14708
 800ed04:	10800017 	ldw	r2,0(r2)
 800ed08:	1005003a 	cmpeq	r2,r2,zero
 800ed0c:	1000061e 	bne	r2,zero,800ed28 <alt_get_errno+0x3c>
 800ed10:	00820074 	movhi	r2,2049
 800ed14:	108e5d04 	addi	r2,r2,14708
 800ed18:	10800017 	ldw	r2,0(r2)
 800ed1c:	103ee83a 	callr	r2
 800ed20:	e0bfff15 	stw	r2,-4(fp)
 800ed24:	00000306 	br	800ed34 <alt_get_errno+0x48>
 800ed28:	00820074 	movhi	r2,2049
 800ed2c:	10956404 	addi	r2,r2,21904
 800ed30:	e0bfff15 	stw	r2,-4(fp)
 800ed34:	e0bfff17 	ldw	r2,-4(fp)
}
 800ed38:	e037883a 	mov	sp,fp
 800ed3c:	dfc00117 	ldw	ra,4(sp)
 800ed40:	df000017 	ldw	fp,0(sp)
 800ed44:	dec00204 	addi	sp,sp,8
 800ed48:	f800283a 	ret

0800ed4c <altera_avalon_mutex_close>:
 * altera_avalon_mutex_close - Does nothing at the moment, but included for 
 * completeness
 *
 */
void altera_avalon_mutex_close (alt_mutex_dev* dev)
{
 800ed4c:	defffe04 	addi	sp,sp,-8
 800ed50:	df000115 	stw	fp,4(sp)
 800ed54:	df000104 	addi	fp,sp,4
 800ed58:	e13fff15 	stw	r4,-4(fp)
  return;
}
 800ed5c:	e037883a 	mov	sp,fp
 800ed60:	df000017 	ldw	fp,0(sp)
 800ed64:	dec00104 	addi	sp,sp,4
 800ed68:	f800283a 	ret

0800ed6c <altera_avalon_mutex_lock>:
/*
 * altera_avalon_mutex_lock - Lock the hardware mutex
 *
 */
void altera_avalon_mutex_lock( alt_mutex_dev* dev, alt_u32 value )
{
 800ed6c:	defffc04 	addi	sp,sp,-16
 800ed70:	dfc00315 	stw	ra,12(sp)
 800ed74:	df000215 	stw	fp,8(sp)
 800ed78:	df000204 	addi	fp,sp,8
 800ed7c:	e13ffe15 	stw	r4,-8(fp)
 800ed80:	e17fff15 	stw	r5,-4(fp)
   * semaphore. This ensures that reading from the device is thread-safe.
   */

  ALT_SEM_PEND (dev->lock, 0);

  while ( alt_mutex_trylock( dev, value ) != 0);
 800ed84:	e13ffe17 	ldw	r4,-8(fp)
 800ed88:	e17fff17 	ldw	r5,-4(fp)
 800ed8c:	800ec180 	call	800ec18 <alt_mutex_trylock>
 800ed90:	1004c03a 	cmpne	r2,r2,zero
 800ed94:	103ffb1e 	bne	r2,zero,800ed84 <altera_avalon_mutex_lock+0x18>
}
 800ed98:	e037883a 	mov	sp,fp
 800ed9c:	dfc00117 	ldw	ra,4(sp)
 800eda0:	df000017 	ldw	fp,0(sp)
 800eda4:	dec00204 	addi	sp,sp,8
 800eda8:	f800283a 	ret

0800edac <altera_avalon_mutex_trylock>:
 *
 * returns 0 on success -1 otherwise
 *
 */
int altera_avalon_mutex_trylock( alt_mutex_dev* dev, alt_u32 value )
{
 800edac:	defffb04 	addi	sp,sp,-20
 800edb0:	dfc00415 	stw	ra,16(sp)
 800edb4:	df000315 	stw	fp,12(sp)
 800edb8:	df000304 	addi	fp,sp,12
 800edbc:	e13ffe15 	stw	r4,-8(fp)
 800edc0:	e17fff15 	stw	r5,-4(fp)
  int ret_code;

  ALT_SEM_PEND (dev->lock, 0);

  ret_code = alt_mutex_trylock( dev, value);
 800edc4:	e13ffe17 	ldw	r4,-8(fp)
 800edc8:	e17fff17 	ldw	r5,-4(fp)
 800edcc:	800ec180 	call	800ec18 <alt_mutex_trylock>
 800edd0:	e0bffd15 	stw	r2,-12(fp)
  if (ret_code)
  {
    ALT_SEM_POST (dev->lock);
  }

  return ret_code;
 800edd4:	e0bffd17 	ldw	r2,-12(fp)
}
 800edd8:	e037883a 	mov	sp,fp
 800eddc:	dfc00117 	ldw	ra,4(sp)
 800ede0:	df000017 	ldw	fp,0(sp)
 800ede4:	dec00204 	addi	sp,sp,8
 800ede8:	f800283a 	ret

0800edec <altera_avalon_mutex_unlock>:
 * This function does not check that you own the Mutex if you try to release
 * a Mutex you do not own the behaviour is undefined
 *
 */
void altera_avalon_mutex_unlock( alt_mutex_dev* dev )
{
 800edec:	defffd04 	addi	sp,sp,-12
 800edf0:	df000215 	stw	fp,8(sp)
 800edf4:	df000204 	addi	fp,sp,8
 800edf8:	e13fff15 	stw	r4,-4(fp)
  alt_u32 id;
  NIOS2_READ_CPUID(id);
 800edfc:	0005317a 	rdctl	r2,cpuid
 800ee00:	e0bffe15 	stw	r2,-8(fp)

  /*
  * This Mutex has been claimed and released since Reset so clear the Reset bit
  * This MUST happen before we release the MUTEX
  */
  IOWR_ALTERA_AVALON_MUTEX_RESET(dev->mutex_base, 
 800ee04:	e0bfff17 	ldw	r2,-4(fp)
 800ee08:	10800317 	ldw	r2,12(r2)
 800ee0c:	10800104 	addi	r2,r2,4
 800ee10:	1007883a 	mov	r3,r2
 800ee14:	00800044 	movi	r2,1
 800ee18:	18800035 	stwio	r2,0(r3)
                                  ALTERA_AVALON_MUTEX_RESET_RESET_MSK);
  IOWR_ALTERA_AVALON_MUTEX_MUTEX(dev->mutex_base, 
 800ee1c:	e0bfff17 	ldw	r2,-4(fp)
 800ee20:	11000317 	ldw	r4,12(r2)
 800ee24:	e0bffe17 	ldw	r2,-8(fp)
 800ee28:	1004943a 	slli	r2,r2,16
 800ee2c:	1007883a 	mov	r3,r2
 800ee30:	2005883a 	mov	r2,r4
 800ee34:	10c00035 	stwio	r3,0(r2)

  /*
  * Now that access to the hardware Mutex is complete, release the thread lock
  */
  ALT_SEM_POST (dev->lock);
}
 800ee38:	e037883a 	mov	sp,fp
 800ee3c:	df000017 	ldw	fp,0(sp)
 800ee40:	dec00104 	addi	sp,sp,4
 800ee44:	f800283a 	ret

0800ee48 <altera_avalon_mutex_is_mine>:
 * altera_avalon_mutex_is_mine - Do I own the Mutex?
 *
 *  returns non zero if the mutex is owned by this CPU
 */
int altera_avalon_mutex_is_mine( alt_mutex_dev* dev )
{
 800ee48:	defff904 	addi	sp,sp,-28
 800ee4c:	df000615 	stw	fp,24(sp)
 800ee50:	df000604 	addi	fp,sp,24
 800ee54:	e13fff15 	stw	r4,-4(fp)
  alt_u32 id, data, owner, value;
  int ret_code = 0;
 800ee58:	e03ffa15 	stw	zero,-24(fp)

  NIOS2_READ_CPUID(id);
 800ee5c:	0005317a 	rdctl	r2,cpuid
 800ee60:	e0bffe15 	stw	r2,-8(fp)

  /* retrieve the contents of the mutex */
  data = IORD_ALTERA_AVALON_MUTEX_MUTEX(dev->mutex_base);
 800ee64:	e0bfff17 	ldw	r2,-4(fp)
 800ee68:	10800317 	ldw	r2,12(r2)
 800ee6c:	10800037 	ldwio	r2,0(r2)
 800ee70:	e0bffd15 	stw	r2,-12(fp)
  owner = (data & ALTERA_AVALON_MUTEX_MUTEX_OWNER_MSK) >> 
 800ee74:	e0bffd17 	ldw	r2,-12(fp)
 800ee78:	10bfffec 	andhi	r2,r2,65535
 800ee7c:	1004d43a 	srli	r2,r2,16
 800ee80:	e0bffc15 	stw	r2,-16(fp)
              ALTERA_AVALON_MUTEX_MUTEX_OWNER_OFST;

  if (owner == id) 
 800ee84:	e0fffc17 	ldw	r3,-16(fp)
 800ee88:	e0bffe17 	ldw	r2,-8(fp)
 800ee8c:	1880081e 	bne	r3,r2,800eeb0 <altera_avalon_mutex_is_mine+0x68>
  {
    value = (data & ALTERA_AVALON_MUTEX_MUTEX_VALUE_MSK) >> 
 800ee90:	e0bffd17 	ldw	r2,-12(fp)
 800ee94:	10bfffcc 	andi	r2,r2,65535
 800ee98:	e0bffb15 	stw	r2,-20(fp)
                  ALTERA_AVALON_MUTEX_MUTEX_VALUE_OFST;
    if (value != 0)
 800ee9c:	e0bffb17 	ldw	r2,-20(fp)
 800eea0:	1005003a 	cmpeq	r2,r2,zero
 800eea4:	1000021e 	bne	r2,zero,800eeb0 <altera_avalon_mutex_is_mine+0x68>
    {
      ret_code = 1;
 800eea8:	00800044 	movi	r2,1
 800eeac:	e0bffa15 	stw	r2,-24(fp)
    }
  }

  return ret_code;
 800eeb0:	e0bffa17 	ldw	r2,-24(fp)
}
 800eeb4:	e037883a 	mov	sp,fp
 800eeb8:	df000017 	ldw	fp,0(sp)
 800eebc:	dec00104 	addi	sp,sp,4
 800eec0:	f800283a 	ret

0800eec4 <altera_avalon_mutex_first_lock>:
 *
 * Has this Mutex been released since reset if not return 1
 * otherwise return 0
 */
int altera_avalon_mutex_first_lock( alt_mutex_dev* dev )
{
 800eec4:	defffc04 	addi	sp,sp,-16
 800eec8:	df000315 	stw	fp,12(sp)
 800eecc:	df000304 	addi	fp,sp,12
 800eed0:	e13fff15 	stw	r4,-4(fp)
  alt_u32 data;
  int ret_code = 0;
 800eed4:	e03ffd15 	stw	zero,-12(fp)

  data = IORD_ALTERA_AVALON_MUTEX_RESET(dev->mutex_base);
 800eed8:	e0bfff17 	ldw	r2,-4(fp)
 800eedc:	10800317 	ldw	r2,12(r2)
 800eee0:	10800104 	addi	r2,r2,4
 800eee4:	10800037 	ldwio	r2,0(r2)
 800eee8:	e0bffe15 	stw	r2,-8(fp)

  if (data & ALTERA_AVALON_MUTEX_RESET_RESET_MSK) 
 800eeec:	e0bffe17 	ldw	r2,-8(fp)
 800eef0:	1080004c 	andi	r2,r2,1
 800eef4:	10803fcc 	andi	r2,r2,255
 800eef8:	1005003a 	cmpeq	r2,r2,zero
 800eefc:	1000021e 	bne	r2,zero,800ef08 <altera_avalon_mutex_first_lock+0x44>
  {
    ret_code = 1;
 800ef00:	00800044 	movi	r2,1
 800ef04:	e0bffd15 	stw	r2,-12(fp)
  }

  return ret_code;
 800ef08:	e0bffd17 	ldw	r2,-12(fp)
}
 800ef0c:	e037883a 	mov	sp,fp
 800ef10:	df000017 	ldw	fp,0(sp)
 800ef14:	dec00104 	addi	sp,sp,4
 800ef18:	f800283a 	ret

0800ef1c <alt_up_pixel_buffer_dma_open_dev>:

#include "altera_up_avalon_video_pixel_buffer_dma.h"

#define ABS(x)	((x >= 0) ? (x) : (-(x)))

alt_up_pixel_buffer_dma_dev* alt_up_pixel_buffer_dma_open_dev(const char* name) {
 800ef1c:	defffc04 	addi	sp,sp,-16
 800ef20:	dfc00315 	stw	ra,12(sp)
 800ef24:	df000215 	stw	fp,8(sp)
 800ef28:	df000204 	addi	fp,sp,8
 800ef2c:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_pixel_buffer_dma_dev *dev = (alt_up_pixel_buffer_dma_dev*)alt_find_dev(name, &alt_dev_list);
 800ef30:	e13fff17 	ldw	r4,-4(fp)
 800ef34:	01420074 	movhi	r5,2049
 800ef38:	294e5a04 	addi	r5,r5,14696
 800ef3c:	80107fc0 	call	80107fc <alt_find_dev>
 800ef40:	e0bffe15 	stw	r2,-8(fp)

  return dev;
 800ef44:	e0bffe17 	ldw	r2,-8(fp)
}
 800ef48:	e037883a 	mov	sp,fp
 800ef4c:	dfc00117 	ldw	ra,4(sp)
 800ef50:	df000017 	ldw	fp,0(sp)
 800ef54:	dec00204 	addi	sp,sp,8
 800ef58:	f800283a 	ret

0800ef5c <alt_up_pixel_buffer_dma_draw>:

int alt_up_pixel_buffer_dma_draw(alt_up_pixel_buffer_dma_dev *pixel_buffer, unsigned int color, unsigned int x, unsigned int y)
/* This function draws a pixel to the back buffer.
 */
{
 800ef5c:	defff904 	addi	sp,sp,-28
 800ef60:	df000615 	stw	fp,24(sp)
 800ef64:	df000604 	addi	fp,sp,24
 800ef68:	e13ffb15 	stw	r4,-20(fp)
 800ef6c:	e17ffc15 	stw	r5,-16(fp)
 800ef70:	e1bffd15 	stw	r6,-12(fp)
 800ef74:	e1fffe15 	stw	r7,-8(fp)
	// boundary check
	if (x >= pixel_buffer->x_resolution || y >= pixel_buffer->y_resolution )
 800ef78:	e0bffb17 	ldw	r2,-20(fp)
 800ef7c:	10c00f17 	ldw	r3,60(r2)
 800ef80:	e0bffd17 	ldw	r2,-12(fp)
 800ef84:	10c0042e 	bgeu	r2,r3,800ef98 <alt_up_pixel_buffer_dma_draw+0x3c>
 800ef88:	e0bffb17 	ldw	r2,-20(fp)
 800ef8c:	10c01017 	ldw	r3,64(r2)
 800ef90:	e0bffe17 	ldw	r2,-8(fp)
 800ef94:	10c00336 	bltu	r2,r3,800efa4 <alt_up_pixel_buffer_dma_draw+0x48>
		return -1;
 800ef98:	00bfffc4 	movi	r2,-1
 800ef9c:	e0bfff15 	stw	r2,-4(fp)
 800efa0:	00005106 	br	800f0e8 <alt_up_pixel_buffer_dma_draw+0x18c>

	unsigned int addr = 0;
 800efa4:	e03ffa15 	stw	zero,-24(fp)
	/* Check the mode VGA Pixel Buffer is using. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
 800efa8:	e0bffb17 	ldw	r2,-20(fp)
 800efac:	10800d17 	ldw	r2,52(r2)
 800efb0:	1004c03a 	cmpne	r2,r2,zero
 800efb4:	1000151e 	bne	r2,zero,800f00c <alt_up_pixel_buffer_dma_draw+0xb0>
		/* For X-Y addressing mode, the address format is | unused | Y | X |. So shift bits for coordinates X and Y into their respective locations. */
		addr |= ((x & pixel_buffer->x_coord_mask) << pixel_buffer->x_coord_offset);
 800efb8:	e0bffb17 	ldw	r2,-20(fp)
 800efbc:	10c01217 	ldw	r3,72(r2)
 800efc0:	e0bffd17 	ldw	r2,-12(fp)
 800efc4:	1886703a 	and	r3,r3,r2
 800efc8:	e0bffb17 	ldw	r2,-20(fp)
 800efcc:	10801117 	ldw	r2,68(r2)
 800efd0:	1886983a 	sll	r3,r3,r2
 800efd4:	e0bffa17 	ldw	r2,-24(fp)
 800efd8:	10c4b03a 	or	r2,r2,r3
 800efdc:	e0bffa15 	stw	r2,-24(fp)
		addr |= ((y & pixel_buffer->y_coord_mask) << pixel_buffer->y_coord_offset);
 800efe0:	e0bffb17 	ldw	r2,-20(fp)
 800efe4:	10c01417 	ldw	r3,80(r2)
 800efe8:	e0bffe17 	ldw	r2,-8(fp)
 800efec:	1886703a 	and	r3,r3,r2
 800eff0:	e0bffb17 	ldw	r2,-20(fp)
 800eff4:	10801317 	ldw	r2,76(r2)
 800eff8:	1886983a 	sll	r3,r3,r2
 800effc:	e0bffa17 	ldw	r2,-24(fp)
 800f000:	10c4b03a 	or	r2,r2,r3
 800f004:	e0bffa15 	stw	r2,-24(fp)
 800f008:	00001706 	br	800f068 <alt_up_pixel_buffer_dma_draw+0x10c>
	} else {
		/* In a consecutive addressing mode, the pixels are stored in consecutive memory locations. So the address of a pixel at (x,y) can be computed as
		 * (y*x_resolution + x).*/
		addr += ((x & pixel_buffer->x_coord_mask) << pixel_buffer->x_coord_offset);
 800f00c:	e0bffb17 	ldw	r2,-20(fp)
 800f010:	10c01217 	ldw	r3,72(r2)
 800f014:	e0bffd17 	ldw	r2,-12(fp)
 800f018:	1886703a 	and	r3,r3,r2
 800f01c:	e0bffb17 	ldw	r2,-20(fp)
 800f020:	10801117 	ldw	r2,68(r2)
 800f024:	1886983a 	sll	r3,r3,r2
 800f028:	e0bffa17 	ldw	r2,-24(fp)
 800f02c:	10c5883a 	add	r2,r2,r3
 800f030:	e0bffa15 	stw	r2,-24(fp)
		addr += (((y & pixel_buffer->y_coord_mask) * pixel_buffer->x_resolution) << pixel_buffer->x_coord_offset);
 800f034:	e0bffb17 	ldw	r2,-20(fp)
 800f038:	10c01417 	ldw	r3,80(r2)
 800f03c:	e0bffe17 	ldw	r2,-8(fp)
 800f040:	1886703a 	and	r3,r3,r2
 800f044:	e0bffb17 	ldw	r2,-20(fp)
 800f048:	10800f17 	ldw	r2,60(r2)
 800f04c:	1887383a 	mul	r3,r3,r2
 800f050:	e0bffb17 	ldw	r2,-20(fp)
 800f054:	10801117 	ldw	r2,68(r2)
 800f058:	1886983a 	sll	r3,r3,r2
 800f05c:	e0bffa17 	ldw	r2,-24(fp)
 800f060:	10c5883a 	add	r2,r2,r3
 800f064:	e0bffa15 	stw	r2,-24(fp)
	}
	/* Now, depending on the color depth, write the pixel color to the specified memory location. */
	if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
 800f068:	e0bffb17 	ldw	r2,-20(fp)
 800f06c:	10800e17 	ldw	r2,56(r2)
 800f070:	10800058 	cmpnei	r2,r2,1
 800f074:	1000081e 	bne	r2,zero,800f098 <alt_up_pixel_buffer_dma_draw+0x13c>
		IOWR_8DIRECT(pixel_buffer->back_buffer_start_address, addr, color);
 800f078:	e0bffb17 	ldw	r2,-20(fp)
 800f07c:	10800c17 	ldw	r2,48(r2)
 800f080:	1007883a 	mov	r3,r2
 800f084:	e0bffa17 	ldw	r2,-24(fp)
 800f088:	1885883a 	add	r2,r3,r2
 800f08c:	e0fffc17 	ldw	r3,-16(fp)
 800f090:	10c00025 	stbio	r3,0(r2)
 800f094:	00001306 	br	800f0e4 <alt_up_pixel_buffer_dma_draw+0x188>
	} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
 800f098:	e0bffb17 	ldw	r2,-20(fp)
 800f09c:	10800e17 	ldw	r2,56(r2)
 800f0a0:	10800098 	cmpnei	r2,r2,2
 800f0a4:	1000081e 	bne	r2,zero,800f0c8 <alt_up_pixel_buffer_dma_draw+0x16c>
		IOWR_16DIRECT(pixel_buffer->back_buffer_start_address, addr, color);
 800f0a8:	e0bffb17 	ldw	r2,-20(fp)
 800f0ac:	10800c17 	ldw	r2,48(r2)
 800f0b0:	1007883a 	mov	r3,r2
 800f0b4:	e0bffa17 	ldw	r2,-24(fp)
 800f0b8:	1885883a 	add	r2,r3,r2
 800f0bc:	e0fffc17 	ldw	r3,-16(fp)
 800f0c0:	10c0002d 	sthio	r3,0(r2)
 800f0c4:	00000706 	br	800f0e4 <alt_up_pixel_buffer_dma_draw+0x188>
	} else {
		IOWR_32DIRECT(pixel_buffer->back_buffer_start_address, addr, color);
 800f0c8:	e0bffb17 	ldw	r2,-20(fp)
 800f0cc:	10800c17 	ldw	r2,48(r2)
 800f0d0:	1007883a 	mov	r3,r2
 800f0d4:	e0bffa17 	ldw	r2,-24(fp)
 800f0d8:	1885883a 	add	r2,r3,r2
 800f0dc:	e0fffc17 	ldw	r3,-16(fp)
 800f0e0:	10c00035 	stwio	r3,0(r2)
	}

	return 0;
 800f0e4:	e03fff15 	stw	zero,-4(fp)
 800f0e8:	e0bfff17 	ldw	r2,-4(fp)
}
 800f0ec:	e037883a 	mov	sp,fp
 800f0f0:	df000017 	ldw	fp,0(sp)
 800f0f4:	dec00104 	addi	sp,sp,4
 800f0f8:	f800283a 	ret

0800f0fc <alt_up_pixel_buffer_dma_change_back_buffer_address>:

int alt_up_pixel_buffer_dma_change_back_buffer_address(alt_up_pixel_buffer_dma_dev *pixel_buffer, unsigned int new_address)
/* This function changes the memory address for the back buffer. */
{
 800f0fc:	defffd04 	addi	sp,sp,-12
 800f100:	df000215 	stw	fp,8(sp)
 800f104:	df000204 	addi	fp,sp,8
 800f108:	e13ffe15 	stw	r4,-8(fp)
 800f10c:	e17fff15 	stw	r5,-4(fp)
	IOWR_32DIRECT(pixel_buffer->base, 4, new_address);
 800f110:	e0bffe17 	ldw	r2,-8(fp)
 800f114:	10800a17 	ldw	r2,40(r2)
 800f118:	10800104 	addi	r2,r2,4
 800f11c:	e0ffff17 	ldw	r3,-4(fp)
 800f120:	10c00035 	stwio	r3,0(r2)
	pixel_buffer->back_buffer_start_address = IORD_32DIRECT(pixel_buffer->base, 4);
 800f124:	e0bffe17 	ldw	r2,-8(fp)
 800f128:	10800a17 	ldw	r2,40(r2)
 800f12c:	10800104 	addi	r2,r2,4
 800f130:	10800037 	ldwio	r2,0(r2)
 800f134:	1007883a 	mov	r3,r2
 800f138:	e0bffe17 	ldw	r2,-8(fp)
 800f13c:	10c00c15 	stw	r3,48(r2)
	return 0;
 800f140:	0005883a 	mov	r2,zero
}
 800f144:	e037883a 	mov	sp,fp
 800f148:	df000017 	ldw	fp,0(sp)
 800f14c:	dec00104 	addi	sp,sp,4
 800f150:	f800283a 	ret

0800f154 <alt_up_pixel_buffer_dma_swap_buffers>:

int alt_up_pixel_buffer_dma_swap_buffers(alt_up_pixel_buffer_dma_dev *pixel_buffer)
/* This function swaps the front and back buffers. At the next refresh cycle the back buffer will be drawn on the screen
 * and will become the front buffer. */
{
 800f154:	defffe04 	addi	sp,sp,-8
 800f158:	df000115 	stw	fp,4(sp)
 800f15c:	df000104 	addi	fp,sp,4
 800f160:	e13fff15 	stw	r4,-4(fp)
	register unsigned int temp = pixel_buffer->back_buffer_start_address;
 800f164:	e0bfff17 	ldw	r2,-4(fp)
 800f168:	11000c17 	ldw	r4,48(r2)
	IOWR_32DIRECT(pixel_buffer->base, 0, 1);
 800f16c:	e0bfff17 	ldw	r2,-4(fp)
 800f170:	10800a17 	ldw	r2,40(r2)
 800f174:	1007883a 	mov	r3,r2
 800f178:	00800044 	movi	r2,1
 800f17c:	18800035 	stwio	r2,0(r3)
	pixel_buffer->back_buffer_start_address = pixel_buffer->buffer_start_address;
 800f180:	e0bfff17 	ldw	r2,-4(fp)
 800f184:	10c00b17 	ldw	r3,44(r2)
 800f188:	e0bfff17 	ldw	r2,-4(fp)
 800f18c:	10c00c15 	stw	r3,48(r2)
	pixel_buffer->buffer_start_address = temp;
 800f190:	e0bfff17 	ldw	r2,-4(fp)
 800f194:	11000b15 	stw	r4,44(r2)
	return 0;
 800f198:	0005883a 	mov	r2,zero
}
 800f19c:	e037883a 	mov	sp,fp
 800f1a0:	df000017 	ldw	fp,0(sp)
 800f1a4:	dec00104 	addi	sp,sp,4
 800f1a8:	f800283a 	ret

0800f1ac <alt_up_pixel_buffer_dma_check_swap_buffers_status>:
int alt_up_pixel_buffer_dma_check_swap_buffers_status(alt_up_pixel_buffer_dma_dev *pixel_buffer)
/* This function checks if the buffer swap has occured. Since the buffer swap only happens after an entire screen is drawn,
 * it is important to wait for this function to return 0 before proceeding to draw on either buffer. When both front and the back buffers
 * have the same address calling the alt_up_pixel_buffer_dma_swap_buffers(...) function and then waiting for this function to return 0, causes your program to
 * wait for the screen to refresh. */
{
 800f1ac:	defffe04 	addi	sp,sp,-8
 800f1b0:	df000115 	stw	fp,4(sp)
 800f1b4:	df000104 	addi	fp,sp,4
 800f1b8:	e13fff15 	stw	r4,-4(fp)
	return (IORD_32DIRECT(pixel_buffer->base, 12) & 0x1);
 800f1bc:	e0bfff17 	ldw	r2,-4(fp)
 800f1c0:	10800a17 	ldw	r2,40(r2)
 800f1c4:	10800304 	addi	r2,r2,12
 800f1c8:	10800037 	ldwio	r2,0(r2)
 800f1cc:	1080004c 	andi	r2,r2,1
}
 800f1d0:	e037883a 	mov	sp,fp
 800f1d4:	df000017 	ldw	fp,0(sp)
 800f1d8:	dec00104 	addi	sp,sp,4
 800f1dc:	f800283a 	ret

0800f1e0 <alt_up_pixel_buffer_dma_clear_screen>:

void alt_up_pixel_buffer_dma_clear_screen(alt_up_pixel_buffer_dma_dev *pixel_buffer, int backbuffer)
/* This function clears the screen by setting each pixel to a black color. */
{
 800f1e0:	defff604 	addi	sp,sp,-40
 800f1e4:	df000915 	stw	fp,36(sp)
 800f1e8:	df000904 	addi	fp,sp,36
 800f1ec:	e13ff715 	stw	r4,-36(fp)
 800f1f0:	e17ff815 	stw	r5,-32(fp)
	register unsigned int addr;
	register unsigned int limit_x, limit_y;
	
	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
 800f1f4:	e0bff817 	ldw	r2,-32(fp)
 800f1f8:	10800058 	cmpnei	r2,r2,1
 800f1fc:	1000041e 	bne	r2,zero,800f210 <alt_up_pixel_buffer_dma_clear_screen+0x30>
		addr = pixel_buffer->back_buffer_start_address;
 800f200:	e0bff717 	ldw	r2,-36(fp)
 800f204:	10800c17 	ldw	r2,48(r2)
 800f208:	e0bfff15 	stw	r2,-4(fp)
 800f20c:	00000306 	br	800f21c <alt_up_pixel_buffer_dma_clear_screen+0x3c>
	else
		addr = pixel_buffer->buffer_start_address;
 800f210:	e0bff717 	ldw	r2,-36(fp)
 800f214:	10800b17 	ldw	r2,44(r2)
 800f218:	e0bfff15 	stw	r2,-4(fp)
	limit_x = pixel_buffer->x_resolution;
 800f21c:	e0bff717 	ldw	r2,-36(fp)
 800f220:	10800f17 	ldw	r2,60(r2)
 800f224:	e0bffe15 	stw	r2,-8(fp)
	/* In 16 and 32-bit color modes we use twice or four times more memory for the display buffer.*/
	if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
 800f228:	e0bff717 	ldw	r2,-36(fp)
 800f22c:	10800e17 	ldw	r2,56(r2)
 800f230:	10800098 	cmpnei	r2,r2,2
 800f234:	1000051e 	bne	r2,zero,800f24c <alt_up_pixel_buffer_dma_clear_screen+0x6c>
		limit_x = limit_x << 1;
 800f238:	e0fffe17 	ldw	r3,-8(fp)
 800f23c:	e0fffe17 	ldw	r3,-8(fp)
 800f240:	18c5883a 	add	r2,r3,r3
 800f244:	e0bffe15 	stw	r2,-8(fp)
 800f248:	00000506 	br	800f260 <alt_up_pixel_buffer_dma_clear_screen+0x80>
	} else {
		limit_x = limit_x << 2;
 800f24c:	e13ffe17 	ldw	r4,-8(fp)
 800f250:	e13ffe17 	ldw	r4,-8(fp)
 800f254:	2105883a 	add	r2,r4,r4
 800f258:	1085883a 	add	r2,r2,r2
 800f25c:	e0bffe15 	stw	r2,-8(fp)
	}	
	limit_y = pixel_buffer->y_resolution;
 800f260:	e0bff717 	ldw	r2,-36(fp)
 800f264:	10801017 	ldw	r2,64(r2)
 800f268:	e0bffd15 	stw	r2,-12(fp)

	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
 800f26c:	e0bff717 	ldw	r2,-36(fp)
 800f270:	10800d17 	ldw	r2,52(r2)
 800f274:	1004c03a 	cmpne	r2,r2,zero
 800f278:	10001e1e 	bne	r2,zero,800f2f4 <alt_up_pixel_buffer_dma_clear_screen+0x114>
		/* Clear the screen when the VGA is set up in an XY addressing mode. */
		register unsigned int x,y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
 800f27c:	e0bff717 	ldw	r2,-36(fp)
 800f280:	10801317 	ldw	r2,76(r2)
 800f284:	e0bffa15 	stw	r2,-24(fp)

		for (y = 0; y < limit_y; y++)
 800f288:	e03ffb15 	stw	zero,-20(fp)
 800f28c:	00001506 	br	800f2e4 <alt_up_pixel_buffer_dma_clear_screen+0x104>
		{
			for (x = 0; x < limit_x; x = x + 4)
 800f290:	e03ffc15 	stw	zero,-16(fp)
 800f294:	00000706 	br	800f2b4 <alt_up_pixel_buffer_dma_clear_screen+0xd4>
			{
				IOWR_32DIRECT(addr, x, 0);
 800f298:	e0ffff17 	ldw	r3,-4(fp)
 800f29c:	e0bffc17 	ldw	r2,-16(fp)
 800f2a0:	1885883a 	add	r2,r3,r2
 800f2a4:	10000035 	stwio	zero,0(r2)
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;

		for (y = 0; y < limit_y; y++)
		{
			for (x = 0; x < limit_x; x = x + 4)
 800f2a8:	e0bffc17 	ldw	r2,-16(fp)
 800f2ac:	10800104 	addi	r2,r2,4
 800f2b0:	e0bffc15 	stw	r2,-16(fp)
 800f2b4:	e0fffc17 	ldw	r3,-16(fp)
 800f2b8:	e13ffe17 	ldw	r4,-8(fp)
 800f2bc:	193ff636 	bltu	r3,r4,800f298 <alt_up_pixel_buffer_dma_clear_screen+0xb8>
			{
				IOWR_32DIRECT(addr, x, 0);
			}
			addr = addr + (1 << offset_y);
 800f2c0:	e0fffa17 	ldw	r3,-24(fp)
 800f2c4:	00800044 	movi	r2,1
 800f2c8:	10c4983a 	sll	r2,r2,r3
 800f2cc:	e0ffff17 	ldw	r3,-4(fp)
 800f2d0:	1887883a 	add	r3,r3,r2
 800f2d4:	e0ffff15 	stw	r3,-4(fp)
		/* Clear the screen when the VGA is set up in an XY addressing mode. */
		register unsigned int x,y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;

		for (y = 0; y < limit_y; y++)
 800f2d8:	e13ffb17 	ldw	r4,-20(fp)
 800f2dc:	21000044 	addi	r4,r4,1
 800f2e0:	e13ffb15 	stw	r4,-20(fp)
 800f2e4:	e0bffb17 	ldw	r2,-20(fp)
 800f2e8:	e0fffd17 	ldw	r3,-12(fp)
 800f2ec:	10ffe836 	bltu	r2,r3,800f290 <alt_up_pixel_buffer_dma_clear_screen+0xb0>
 800f2f0:	00001006 	br	800f334 <alt_up_pixel_buffer_dma_clear_screen+0x154>
			addr = addr + (1 << offset_y);
		}
	} else {
		/* Clear the screen when the VGA is set up in a linear addressing mode. */
		register int x;
		limit_y = limit_x*limit_y;	
 800f2f4:	e13ffd17 	ldw	r4,-12(fp)
 800f2f8:	e0bffe17 	ldw	r2,-8(fp)
 800f2fc:	2089383a 	mul	r4,r4,r2
 800f300:	e13ffd15 	stw	r4,-12(fp)

		for (x = 0; x < limit_y; x = x + 4)
 800f304:	e03ff915 	stw	zero,-28(fp)
 800f308:	00000706 	br	800f328 <alt_up_pixel_buffer_dma_clear_screen+0x148>
		{
			IOWR_32DIRECT(addr, x, 0);
 800f30c:	e0ffff17 	ldw	r3,-4(fp)
 800f310:	e0bff917 	ldw	r2,-28(fp)
 800f314:	1885883a 	add	r2,r3,r2
 800f318:	10000035 	stwio	zero,0(r2)
	} else {
		/* Clear the screen when the VGA is set up in a linear addressing mode. */
		register int x;
		limit_y = limit_x*limit_y;	

		for (x = 0; x < limit_y; x = x + 4)
 800f31c:	e0fff917 	ldw	r3,-28(fp)
 800f320:	18c00104 	addi	r3,r3,4
 800f324:	e0fff915 	stw	r3,-28(fp)
 800f328:	e0bff917 	ldw	r2,-28(fp)
 800f32c:	e13ffd17 	ldw	r4,-12(fp)
 800f330:	113ff636 	bltu	r2,r4,800f30c <alt_up_pixel_buffer_dma_clear_screen+0x12c>
		{
			IOWR_32DIRECT(addr, x, 0);
		}
	}
}
 800f334:	e037883a 	mov	sp,fp
 800f338:	df000017 	ldw	fp,0(sp)
 800f33c:	dec00104 	addi	sp,sp,4
 800f340:	f800283a 	ret

0800f344 <alt_up_pixel_buffer_dma_draw_box>:

void alt_up_pixel_buffer_dma_draw_box(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int y0, int x1, int y1, int color, int backbuffer)
/* This function draws a filled box. */
{
 800f344:	deffed04 	addi	sp,sp,-76
 800f348:	df001215 	stw	fp,72(sp)
 800f34c:	df001204 	addi	fp,sp,72
 800f350:	e13fee15 	stw	r4,-72(fp)
 800f354:	e17fef15 	stw	r5,-68(fp)
 800f358:	e1bff015 	stw	r6,-64(fp)
 800f35c:	e1fff115 	stw	r7,-60(fp)
	register unsigned int addr;
	register unsigned int limit_x = pixel_buffer->x_resolution;
 800f360:	e0bfee17 	ldw	r2,-72(fp)
 800f364:	10800f17 	ldw	r2,60(r2)
 800f368:	e0bffe15 	stw	r2,-8(fp)
	register unsigned int limit_y = pixel_buffer->y_resolution;
 800f36c:	e0bfee17 	ldw	r2,-72(fp)
 800f370:	10801017 	ldw	r2,64(r2)
 800f374:	e0bffd15 	stw	r2,-12(fp)
	register unsigned int temp;
	register unsigned int l_x = x0;
 800f378:	e0bfef17 	ldw	r2,-68(fp)
 800f37c:	e0bffb15 	stw	r2,-20(fp)
	register unsigned int r_x = x1;
 800f380:	e0fff117 	ldw	r3,-60(fp)
 800f384:	e0fffa15 	stw	r3,-24(fp)
	register unsigned int t_y = y0;
 800f388:	e13ff017 	ldw	r4,-64(fp)
 800f38c:	e13ff915 	stw	r4,-28(fp)
	register unsigned int b_y = y1;
 800f390:	e0800117 	ldw	r2,4(fp)
 800f394:	e0bff815 	stw	r2,-32(fp)
	register unsigned int local_color = color;
 800f398:	e0c00217 	ldw	r3,8(fp)
 800f39c:	e0fff715 	stw	r3,-36(fp)
	
	/* Check coordinates */
	if (l_x > r_x)
 800f3a0:	e13ffa17 	ldw	r4,-24(fp)
 800f3a4:	e0bffb17 	ldw	r2,-20(fp)
 800f3a8:	2080062e 	bgeu	r4,r2,800f3c4 <alt_up_pixel_buffer_dma_draw_box+0x80>
	{
		temp = l_x;
 800f3ac:	e0fffb17 	ldw	r3,-20(fp)
 800f3b0:	e0fffc15 	stw	r3,-16(fp)
		l_x = r_x;
 800f3b4:	e13ffa17 	ldw	r4,-24(fp)
 800f3b8:	e13ffb15 	stw	r4,-20(fp)
		r_x = temp;
 800f3bc:	e0bffc17 	ldw	r2,-16(fp)
 800f3c0:	e0bffa15 	stw	r2,-24(fp)
	}
	if (t_y > b_y)
 800f3c4:	e0fff817 	ldw	r3,-32(fp)
 800f3c8:	e13ff917 	ldw	r4,-28(fp)
 800f3cc:	1900062e 	bgeu	r3,r4,800f3e8 <alt_up_pixel_buffer_dma_draw_box+0xa4>
	{
		temp = t_y;
 800f3d0:	e0bff917 	ldw	r2,-28(fp)
 800f3d4:	e0bffc15 	stw	r2,-16(fp)
		t_y = b_y;
 800f3d8:	e0fff817 	ldw	r3,-32(fp)
 800f3dc:	e0fff915 	stw	r3,-28(fp)
		b_y = temp;
 800f3e0:	e13ffc17 	ldw	r4,-16(fp)
 800f3e4:	e13ff815 	stw	r4,-32(fp)
	}
	if ((l_x >= limit_x) || (t_y >= limit_y) || (r_x < 0) || (b_y < 0))
 800f3e8:	e0bffb17 	ldw	r2,-20(fp)
 800f3ec:	e0fffe17 	ldw	r3,-8(fp)
 800f3f0:	10c10d2e 	bgeu	r2,r3,800f828 <alt_up_pixel_buffer_dma_draw_box+0x4e4>
 800f3f4:	e13ff917 	ldw	r4,-28(fp)
 800f3f8:	e0bffd17 	ldw	r2,-12(fp)
 800f3fc:	20800136 	bltu	r4,r2,800f404 <alt_up_pixel_buffer_dma_draw_box+0xc0>
	{
		/* Drawing outside of the window, so don't bother. */
		return;
 800f400:	00010906 	br	800f828 <alt_up_pixel_buffer_dma_draw_box+0x4e4>
	/* Clip the box and draw only within the confines of the screen. */
	if (l_x < 0)
	{
		l_x = 0;
	}
	if (r_x >= limit_x)
 800f404:	e0fffa17 	ldw	r3,-24(fp)
 800f408:	e13ffe17 	ldw	r4,-8(fp)
 800f40c:	19000336 	bltu	r3,r4,800f41c <alt_up_pixel_buffer_dma_draw_box+0xd8>
	{
		r_x = limit_x - 1;
 800f410:	e0bffe17 	ldw	r2,-8(fp)
 800f414:	10bfffc4 	addi	r2,r2,-1
 800f418:	e0bffa15 	stw	r2,-24(fp)
	}
	if (t_y < 0)
	{
		t_y = 0;
	}
	if (b_y >= limit_y)
 800f41c:	e0fff817 	ldw	r3,-32(fp)
 800f420:	e13ffd17 	ldw	r4,-12(fp)
 800f424:	19000336 	bltu	r3,r4,800f434 <alt_up_pixel_buffer_dma_draw_box+0xf0>
	{
		b_y = limit_y - 1;
 800f428:	e0bffd17 	ldw	r2,-12(fp)
 800f42c:	10bfffc4 	addi	r2,r2,-1
 800f430:	e0bff815 	stw	r2,-32(fp)
	}

	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
 800f434:	e0800317 	ldw	r2,12(fp)
 800f438:	10800058 	cmpnei	r2,r2,1
 800f43c:	1000041e 	bne	r2,zero,800f450 <alt_up_pixel_buffer_dma_draw_box+0x10c>
		addr = pixel_buffer->back_buffer_start_address;
 800f440:	e0bfee17 	ldw	r2,-72(fp)
 800f444:	10800c17 	ldw	r2,48(r2)
 800f448:	e0bfff15 	stw	r2,-4(fp)
 800f44c:	00000306 	br	800f45c <alt_up_pixel_buffer_dma_draw_box+0x118>
	else
		addr = pixel_buffer->buffer_start_address;
 800f450:	e0bfee17 	ldw	r2,-72(fp)
 800f454:	10800b17 	ldw	r2,44(r2)
 800f458:	e0bfff15 	stw	r2,-4(fp)

	/* Draw the box using one of the addressing modes. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
 800f45c:	e0bfee17 	ldw	r2,-72(fp)
 800f460:	10800d17 	ldw	r2,52(r2)
 800f464:	1004c03a 	cmpne	r2,r2,zero
 800f468:	1000721e 	bne	r2,zero,800f634 <alt_up_pixel_buffer_dma_draw_box+0x2f0>
		/* Draw a box of a given color on the screen using the XY addressing mode. */
		register unsigned int x,y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
 800f46c:	e0bfee17 	ldw	r2,-72(fp)
 800f470:	10801317 	ldw	r2,76(r2)
 800f474:	e0bff415 	stw	r2,-48(fp)
		addr = addr + (t_y << offset_y);
 800f478:	e0bff417 	ldw	r2,-48(fp)
 800f47c:	e0fff917 	ldw	r3,-28(fp)
 800f480:	1884983a 	sll	r2,r3,r2
 800f484:	e13fff17 	ldw	r4,-4(fp)
 800f488:	2089883a 	add	r4,r4,r2
 800f48c:	e13fff15 	stw	r4,-4(fp)
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
 800f490:	e0bfee17 	ldw	r2,-72(fp)
 800f494:	10800e17 	ldw	r2,56(r2)
 800f498:	10800058 	cmpnei	r2,r2,1
 800f49c:	10001e1e 	bne	r2,zero,800f518 <alt_up_pixel_buffer_dma_draw_box+0x1d4>
			for (y = t_y; y <= b_y; y++)
 800f4a0:	e0bff917 	ldw	r2,-28(fp)
 800f4a4:	e0bff515 	stw	r2,-44(fp)
 800f4a8:	00001706 	br	800f508 <alt_up_pixel_buffer_dma_draw_box+0x1c4>
			{
				for (x = l_x; x <= r_x; x++)
 800f4ac:	e0fffb17 	ldw	r3,-20(fp)
 800f4b0:	e0fff615 	stw	r3,-40(fp)
 800f4b4:	00000806 	br	800f4d8 <alt_up_pixel_buffer_dma_draw_box+0x194>
				{
					IOWR_8DIRECT(addr, x, local_color);
 800f4b8:	e0ffff17 	ldw	r3,-4(fp)
 800f4bc:	e0bff617 	ldw	r2,-40(fp)
 800f4c0:	1885883a 	add	r2,r3,r2
 800f4c4:	e0fff717 	ldw	r3,-36(fp)
 800f4c8:	10c00025 	stbio	r3,0(r2)
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
 800f4cc:	e13ff617 	ldw	r4,-40(fp)
 800f4d0:	21000044 	addi	r4,r4,1
 800f4d4:	e13ff615 	stw	r4,-40(fp)
 800f4d8:	e0bffa17 	ldw	r2,-24(fp)
 800f4dc:	e0fff617 	ldw	r3,-40(fp)
 800f4e0:	10fff52e 	bgeu	r2,r3,800f4b8 <alt_up_pixel_buffer_dma_draw_box+0x174>
				{
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + (1 << offset_y);
 800f4e4:	e0fff417 	ldw	r3,-48(fp)
 800f4e8:	00800044 	movi	r2,1
 800f4ec:	10c4983a 	sll	r2,r2,r3
 800f4f0:	e13fff17 	ldw	r4,-4(fp)
 800f4f4:	2089883a 	add	r4,r4,r2
 800f4f8:	e13fff15 	stw	r4,-4(fp)
		addr = addr + (t_y << offset_y);
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
 800f4fc:	e0bff517 	ldw	r2,-44(fp)
 800f500:	10800044 	addi	r2,r2,1
 800f504:	e0bff515 	stw	r2,-44(fp)
 800f508:	e0fff817 	ldw	r3,-32(fp)
 800f50c:	e13ff517 	ldw	r4,-44(fp)
 800f510:	193fe62e 	bgeu	r3,r4,800f4ac <alt_up_pixel_buffer_dma_draw_box+0x168>
 800f514:	0000c406 	br	800f828 <alt_up_pixel_buffer_dma_draw_box+0x4e4>
				{
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
 800f518:	e0bfee17 	ldw	r2,-72(fp)
 800f51c:	10800e17 	ldw	r2,56(r2)
 800f520:	10800098 	cmpnei	r2,r2,2
 800f524:	1000211e 	bne	r2,zero,800f5ac <alt_up_pixel_buffer_dma_draw_box+0x268>
			for (y = t_y; y <= b_y; y++)
 800f528:	e0bff917 	ldw	r2,-28(fp)
 800f52c:	e0bff515 	stw	r2,-44(fp)
 800f530:	00001a06 	br	800f59c <alt_up_pixel_buffer_dma_draw_box+0x258>
			{
				for (x = l_x; x <= r_x; x++)
 800f534:	e0fffb17 	ldw	r3,-20(fp)
 800f538:	e0fff615 	stw	r3,-40(fp)
 800f53c:	00000b06 	br	800f56c <alt_up_pixel_buffer_dma_draw_box+0x228>
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
 800f540:	e13ff617 	ldw	r4,-40(fp)
 800f544:	e13ff617 	ldw	r4,-40(fp)
 800f548:	2105883a 	add	r2,r4,r4
 800f54c:	1007883a 	mov	r3,r2
 800f550:	e0bfff17 	ldw	r2,-4(fp)
 800f554:	1885883a 	add	r2,r3,r2
 800f558:	e0fff717 	ldw	r3,-36(fp)
 800f55c:	10c0002d 	sthio	r3,0(r2)
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
 800f560:	e0bff617 	ldw	r2,-40(fp)
 800f564:	10800044 	addi	r2,r2,1
 800f568:	e0bff615 	stw	r2,-40(fp)
 800f56c:	e0fffa17 	ldw	r3,-24(fp)
 800f570:	e13ff617 	ldw	r4,-40(fp)
 800f574:	193ff22e 	bgeu	r3,r4,800f540 <alt_up_pixel_buffer_dma_draw_box+0x1fc>
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
				}
				addr = addr + (1 << offset_y);
 800f578:	e0fff417 	ldw	r3,-48(fp)
 800f57c:	00800044 	movi	r2,1
 800f580:	10c4983a 	sll	r2,r2,r3
 800f584:	e0ffff17 	ldw	r3,-4(fp)
 800f588:	1887883a 	add	r3,r3,r2
 800f58c:	e0ffff15 	stw	r3,-4(fp)
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
 800f590:	e13ff517 	ldw	r4,-44(fp)
 800f594:	21000044 	addi	r4,r4,1
 800f598:	e13ff515 	stw	r4,-44(fp)
 800f59c:	e0bff817 	ldw	r2,-32(fp)
 800f5a0:	e0fff517 	ldw	r3,-44(fp)
 800f5a4:	10ffe32e 	bgeu	r2,r3,800f534 <alt_up_pixel_buffer_dma_draw_box+0x1f0>
 800f5a8:	00009f06 	br	800f828 <alt_up_pixel_buffer_dma_draw_box+0x4e4>
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
 800f5ac:	e13ff917 	ldw	r4,-28(fp)
 800f5b0:	e13ff515 	stw	r4,-44(fp)
 800f5b4:	00001b06 	br	800f624 <alt_up_pixel_buffer_dma_draw_box+0x2e0>
			{
				for (x = l_x; x <= r_x; x++)
 800f5b8:	e0bffb17 	ldw	r2,-20(fp)
 800f5bc:	e0bff615 	stw	r2,-40(fp)
 800f5c0:	00000c06 	br	800f5f4 <alt_up_pixel_buffer_dma_draw_box+0x2b0>
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
 800f5c4:	e0fff617 	ldw	r3,-40(fp)
 800f5c8:	e0fff617 	ldw	r3,-40(fp)
 800f5cc:	18c5883a 	add	r2,r3,r3
 800f5d0:	1085883a 	add	r2,r2,r2
 800f5d4:	1007883a 	mov	r3,r2
 800f5d8:	e0bfff17 	ldw	r2,-4(fp)
 800f5dc:	1885883a 	add	r2,r3,r2
 800f5e0:	e0fff717 	ldw	r3,-36(fp)
 800f5e4:	10c00035 	stwio	r3,0(r2)
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
 800f5e8:	e13ff617 	ldw	r4,-40(fp)
 800f5ec:	21000044 	addi	r4,r4,1
 800f5f0:	e13ff615 	stw	r4,-40(fp)
 800f5f4:	e0bffa17 	ldw	r2,-24(fp)
 800f5f8:	e0fff617 	ldw	r3,-40(fp)
 800f5fc:	10fff12e 	bgeu	r2,r3,800f5c4 <alt_up_pixel_buffer_dma_draw_box+0x280>
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
				}
				addr = addr + (1 << offset_y);
 800f600:	e0fff417 	ldw	r3,-48(fp)
 800f604:	00800044 	movi	r2,1
 800f608:	10c4983a 	sll	r2,r2,r3
 800f60c:	e13fff17 	ldw	r4,-4(fp)
 800f610:	2089883a 	add	r4,r4,r2
 800f614:	e13fff15 	stw	r4,-4(fp)
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
 800f618:	e0bff517 	ldw	r2,-44(fp)
 800f61c:	10800044 	addi	r2,r2,1
 800f620:	e0bff515 	stw	r2,-44(fp)
 800f624:	e0fff817 	ldw	r3,-32(fp)
 800f628:	e13ff517 	ldw	r4,-44(fp)
 800f62c:	193fe22e 	bgeu	r3,r4,800f5b8 <alt_up_pixel_buffer_dma_draw_box+0x274>
 800f630:	00007d06 	br	800f828 <alt_up_pixel_buffer_dma_draw_box+0x4e4>
	} else {
		/* Draw a box of a given color on the screen using the linear addressing mode. */
		register unsigned int x,y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
 800f634:	e0bfee17 	ldw	r2,-72(fp)
 800f638:	10800e17 	ldw	r2,56(r2)
 800f63c:	10800058 	cmpnei	r2,r2,1
 800f640:	1000221e 	bne	r2,zero,800f6cc <alt_up_pixel_buffer_dma_draw_box+0x388>
			addr = addr + t_y * limit_x;
 800f644:	e0fff917 	ldw	r3,-28(fp)
 800f648:	e13ffe17 	ldw	r4,-8(fp)
 800f64c:	1905383a 	mul	r2,r3,r4
 800f650:	e0ffff17 	ldw	r3,-4(fp)
 800f654:	1887883a 	add	r3,r3,r2
 800f658:	e0ffff15 	stw	r3,-4(fp)
			for (y = t_y; y <= b_y; y++)
 800f65c:	e13ff917 	ldw	r4,-28(fp)
 800f660:	e13ff215 	stw	r4,-56(fp)
 800f664:	00001506 	br	800f6bc <alt_up_pixel_buffer_dma_draw_box+0x378>
			{
				for (x = l_x; x <= r_x; x++)
 800f668:	e0bffb17 	ldw	r2,-20(fp)
 800f66c:	e0bff315 	stw	r2,-52(fp)
 800f670:	00000806 	br	800f694 <alt_up_pixel_buffer_dma_draw_box+0x350>
				{
					IOWR_8DIRECT(addr, x, local_color);
 800f674:	e0ffff17 	ldw	r3,-4(fp)
 800f678:	e0bff317 	ldw	r2,-52(fp)
 800f67c:	1885883a 	add	r2,r3,r2
 800f680:	e0fff717 	ldw	r3,-36(fp)
 800f684:	10c00025 	stbio	r3,0(r2)
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
 800f688:	e0fff317 	ldw	r3,-52(fp)
 800f68c:	18c00044 	addi	r3,r3,1
 800f690:	e0fff315 	stw	r3,-52(fp)
 800f694:	e13ffa17 	ldw	r4,-24(fp)
 800f698:	e0bff317 	ldw	r2,-52(fp)
 800f69c:	20bff52e 	bgeu	r4,r2,800f674 <alt_up_pixel_buffer_dma_draw_box+0x330>
				{
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + limit_x;
 800f6a0:	e0ffff17 	ldw	r3,-4(fp)
 800f6a4:	e13ffe17 	ldw	r4,-8(fp)
 800f6a8:	1907883a 	add	r3,r3,r4
 800f6ac:	e0ffff15 	stw	r3,-4(fp)
		register unsigned int x,y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
 800f6b0:	e0bff217 	ldw	r2,-56(fp)
 800f6b4:	10800044 	addi	r2,r2,1
 800f6b8:	e0bff215 	stw	r2,-56(fp)
 800f6bc:	e0fff817 	ldw	r3,-32(fp)
 800f6c0:	e13ff217 	ldw	r4,-56(fp)
 800f6c4:	193fe82e 	bgeu	r3,r4,800f668 <alt_up_pixel_buffer_dma_draw_box+0x324>
 800f6c8:	00005706 	br	800f828 <alt_up_pixel_buffer_dma_draw_box+0x4e4>
				{
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
 800f6cc:	e0bfee17 	ldw	r2,-72(fp)
 800f6d0:	10800e17 	ldw	r2,56(r2)
 800f6d4:	10800098 	cmpnei	r2,r2,2
 800f6d8:	1000291e 	bne	r2,zero,800f780 <alt_up_pixel_buffer_dma_draw_box+0x43c>
			limit_x = limit_x << 1;
 800f6dc:	e0fffe17 	ldw	r3,-8(fp)
 800f6e0:	e0fffe17 	ldw	r3,-8(fp)
 800f6e4:	18c5883a 	add	r2,r3,r3
 800f6e8:	e0bffe15 	stw	r2,-8(fp)
			addr = addr + t_y * limit_x;
 800f6ec:	e13ff917 	ldw	r4,-28(fp)
 800f6f0:	e0fffe17 	ldw	r3,-8(fp)
 800f6f4:	20c5383a 	mul	r2,r4,r3
 800f6f8:	e13fff17 	ldw	r4,-4(fp)
 800f6fc:	2089883a 	add	r4,r4,r2
 800f700:	e13fff15 	stw	r4,-4(fp)
			for (y = t_y; y <= b_y; y++)
 800f704:	e0bff917 	ldw	r2,-28(fp)
 800f708:	e0bff215 	stw	r2,-56(fp)
 800f70c:	00001806 	br	800f770 <alt_up_pixel_buffer_dma_draw_box+0x42c>
			{
				for (x = l_x; x <= r_x; x++)
 800f710:	e0fffb17 	ldw	r3,-20(fp)
 800f714:	e0fff315 	stw	r3,-52(fp)
 800f718:	00000b06 	br	800f748 <alt_up_pixel_buffer_dma_draw_box+0x404>
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
 800f71c:	e13ff317 	ldw	r4,-52(fp)
 800f720:	e13ff317 	ldw	r4,-52(fp)
 800f724:	2105883a 	add	r2,r4,r4
 800f728:	1007883a 	mov	r3,r2
 800f72c:	e0bfff17 	ldw	r2,-4(fp)
 800f730:	1885883a 	add	r2,r3,r2
 800f734:	e0fff717 	ldw	r3,-36(fp)
 800f738:	10c0002d 	sthio	r3,0(r2)
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
 800f73c:	e0bff317 	ldw	r2,-52(fp)
 800f740:	10800044 	addi	r2,r2,1
 800f744:	e0bff315 	stw	r2,-52(fp)
 800f748:	e0fffa17 	ldw	r3,-24(fp)
 800f74c:	e13ff317 	ldw	r4,-52(fp)
 800f750:	193ff22e 	bgeu	r3,r4,800f71c <alt_up_pixel_buffer_dma_draw_box+0x3d8>
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
				}
				addr = addr + limit_x;
 800f754:	e0bfff17 	ldw	r2,-4(fp)
 800f758:	e0fffe17 	ldw	r3,-8(fp)
 800f75c:	10c5883a 	add	r2,r2,r3
 800f760:	e0bfff15 	stw	r2,-4(fp)
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
 800f764:	e13ff217 	ldw	r4,-56(fp)
 800f768:	21000044 	addi	r4,r4,1
 800f76c:	e13ff215 	stw	r4,-56(fp)
 800f770:	e0bff817 	ldw	r2,-32(fp)
 800f774:	e0fff217 	ldw	r3,-56(fp)
 800f778:	10ffe52e 	bgeu	r2,r3,800f710 <alt_up_pixel_buffer_dma_draw_box+0x3cc>
 800f77c:	00002a06 	br	800f828 <alt_up_pixel_buffer_dma_draw_box+0x4e4>
				addr = addr + limit_x;
			}
		}
		else
		{
			limit_x = limit_x << 2;
 800f780:	e13ffe17 	ldw	r4,-8(fp)
 800f784:	e13ffe17 	ldw	r4,-8(fp)
 800f788:	2105883a 	add	r2,r4,r4
 800f78c:	1085883a 	add	r2,r2,r2
 800f790:	e0bffe15 	stw	r2,-8(fp)
			addr = addr + t_y * limit_x;
 800f794:	e0fff917 	ldw	r3,-28(fp)
 800f798:	e13ffe17 	ldw	r4,-8(fp)
 800f79c:	1905383a 	mul	r2,r3,r4
 800f7a0:	e0ffff17 	ldw	r3,-4(fp)
 800f7a4:	1887883a 	add	r3,r3,r2
 800f7a8:	e0ffff15 	stw	r3,-4(fp)
			for (y = t_y; y <= b_y; y++)
 800f7ac:	e13ff917 	ldw	r4,-28(fp)
 800f7b0:	e13ff215 	stw	r4,-56(fp)
 800f7b4:	00001906 	br	800f81c <alt_up_pixel_buffer_dma_draw_box+0x4d8>
			{
				for (x = l_x; x <= r_x; x++)
 800f7b8:	e0bffb17 	ldw	r2,-20(fp)
 800f7bc:	e0bff315 	stw	r2,-52(fp)
 800f7c0:	00000c06 	br	800f7f4 <alt_up_pixel_buffer_dma_draw_box+0x4b0>
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
 800f7c4:	e0fff317 	ldw	r3,-52(fp)
 800f7c8:	e0fff317 	ldw	r3,-52(fp)
 800f7cc:	18c5883a 	add	r2,r3,r3
 800f7d0:	1085883a 	add	r2,r2,r2
 800f7d4:	1007883a 	mov	r3,r2
 800f7d8:	e0bfff17 	ldw	r2,-4(fp)
 800f7dc:	1885883a 	add	r2,r3,r2
 800f7e0:	e0fff717 	ldw	r3,-36(fp)
 800f7e4:	10c00035 	stwio	r3,0(r2)
		{
			limit_x = limit_x << 2;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
 800f7e8:	e13ff317 	ldw	r4,-52(fp)
 800f7ec:	21000044 	addi	r4,r4,1
 800f7f0:	e13ff315 	stw	r4,-52(fp)
 800f7f4:	e0bffa17 	ldw	r2,-24(fp)
 800f7f8:	e0fff317 	ldw	r3,-52(fp)
 800f7fc:	10fff12e 	bgeu	r2,r3,800f7c4 <alt_up_pixel_buffer_dma_draw_box+0x480>
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
				}
				addr = addr + limit_x;
 800f800:	e13fff17 	ldw	r4,-4(fp)
 800f804:	e0bffe17 	ldw	r2,-8(fp)
 800f808:	2089883a 	add	r4,r4,r2
 800f80c:	e13fff15 	stw	r4,-4(fp)
		}
		else
		{
			limit_x = limit_x << 2;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
 800f810:	e0fff217 	ldw	r3,-56(fp)
 800f814:	18c00044 	addi	r3,r3,1
 800f818:	e0fff215 	stw	r3,-56(fp)
 800f81c:	e13ff817 	ldw	r4,-32(fp)
 800f820:	e0bff217 	ldw	r2,-56(fp)
 800f824:	20bfe42e 	bgeu	r4,r2,800f7b8 <alt_up_pixel_buffer_dma_draw_box+0x474>
				}
				addr = addr + limit_x;
			}
		}
	}
}
 800f828:	e037883a 	mov	sp,fp
 800f82c:	df000017 	ldw	fp,0(sp)
 800f830:	dec00104 	addi	sp,sp,4
 800f834:	f800283a 	ret

0800f838 <alt_up_pixel_buffer_dma_draw_hline>:

void alt_up_pixel_buffer_dma_draw_hline(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int x1, int y, int color, int backbuffer)
/* This method draws a horizontal line. This method is faster than using the line method because we know the direction of the line. */
{
 800f838:	defff204 	addi	sp,sp,-56
 800f83c:	df000d15 	stw	fp,52(sp)
 800f840:	df000d04 	addi	fp,sp,52
 800f844:	e13ff315 	stw	r4,-52(fp)
 800f848:	e17ff415 	stw	r5,-48(fp)
 800f84c:	e1bff515 	stw	r6,-44(fp)
 800f850:	e1fff615 	stw	r7,-40(fp)
	register unsigned int addr;
	register unsigned int limit_x = pixel_buffer->x_resolution;
 800f854:	e0bff317 	ldw	r2,-52(fp)
 800f858:	10800f17 	ldw	r2,60(r2)
 800f85c:	e0bffe15 	stw	r2,-8(fp)
	register unsigned int limit_y = pixel_buffer->y_resolution;
 800f860:	e0bff317 	ldw	r2,-52(fp)
 800f864:	10801017 	ldw	r2,64(r2)
 800f868:	e0bffd15 	stw	r2,-12(fp)
	register unsigned int temp;
	register unsigned int l_x = x0;
 800f86c:	e0bff417 	ldw	r2,-48(fp)
 800f870:	e0bffc15 	stw	r2,-16(fp)
	register unsigned int r_x = x1;
 800f874:	e0fff517 	ldw	r3,-44(fp)
 800f878:	e0fffb15 	stw	r3,-20(fp)
	register unsigned int line_y = y;
 800f87c:	e13ff617 	ldw	r4,-40(fp)
 800f880:	e13ffa15 	stw	r4,-24(fp)
	register unsigned int local_color = color;
 800f884:	e0800117 	ldw	r2,4(fp)
 800f888:	e0bff915 	stw	r2,-28(fp)
	
	/* Check coordinates */
	if (l_x > r_x)
 800f88c:	e0fffb17 	ldw	r3,-20(fp)
 800f890:	e13ffc17 	ldw	r4,-16(fp)
 800f894:	1900042e 	bgeu	r3,r4,800f8a8 <alt_up_pixel_buffer_dma_draw_hline+0x70>
	{
		temp = l_x;
 800f898:	e0bffc17 	ldw	r2,-16(fp)
		l_x = r_x;
 800f89c:	e0fffb17 	ldw	r3,-20(fp)
 800f8a0:	e0fffc15 	stw	r3,-16(fp)
		r_x = temp;
 800f8a4:	e0bffb15 	stw	r2,-20(fp)
	}
	if ((l_x >= limit_x) || (line_y >= limit_y) || (r_x < 0) || (line_y < 0))
 800f8a8:	e13ffc17 	ldw	r4,-16(fp)
 800f8ac:	e0bffe17 	ldw	r2,-8(fp)
 800f8b0:	2080b12e 	bgeu	r4,r2,800fb78 <alt_up_pixel_buffer_dma_draw_hline+0x340>
 800f8b4:	e0fffa17 	ldw	r3,-24(fp)
 800f8b8:	e13ffd17 	ldw	r4,-12(fp)
 800f8bc:	19000136 	bltu	r3,r4,800f8c4 <alt_up_pixel_buffer_dma_draw_hline+0x8c>
	{
		/* Drawing outside of the window, so don't bother. */
		return;
 800f8c0:	0000ad06 	br	800fb78 <alt_up_pixel_buffer_dma_draw_hline+0x340>
	/* Clip the box and draw only within the confines of the screen. */
	if (l_x < 0)
	{
		l_x = 0;
	}
	if (r_x >= limit_x)
 800f8c4:	e0bffb17 	ldw	r2,-20(fp)
 800f8c8:	e0fffe17 	ldw	r3,-8(fp)
 800f8cc:	10c00336 	bltu	r2,r3,800f8dc <alt_up_pixel_buffer_dma_draw_hline+0xa4>
	{
		r_x = limit_x - 1;
 800f8d0:	e13ffe17 	ldw	r4,-8(fp)
 800f8d4:	213fffc4 	addi	r4,r4,-1
 800f8d8:	e13ffb15 	stw	r4,-20(fp)
	}

	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
 800f8dc:	e0800217 	ldw	r2,8(fp)
 800f8e0:	10800058 	cmpnei	r2,r2,1
 800f8e4:	1000041e 	bne	r2,zero,800f8f8 <alt_up_pixel_buffer_dma_draw_hline+0xc0>
		addr = pixel_buffer->back_buffer_start_address;
 800f8e8:	e0bff317 	ldw	r2,-52(fp)
 800f8ec:	10800c17 	ldw	r2,48(r2)
 800f8f0:	e0bfff15 	stw	r2,-4(fp)
 800f8f4:	00000306 	br	800f904 <alt_up_pixel_buffer_dma_draw_hline+0xcc>
	else
		addr = pixel_buffer->buffer_start_address;
 800f8f8:	e0bff317 	ldw	r2,-52(fp)
 800f8fc:	10800b17 	ldw	r2,44(r2)
 800f900:	e0bfff15 	stw	r2,-4(fp)

	/* Draw a horizontal line using one of the addressing modes. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
 800f904:	e0bff317 	ldw	r2,-52(fp)
 800f908:	10800d17 	ldw	r2,52(r2)
 800f90c:	1004c03a 	cmpne	r2,r2,zero
 800f910:	1000431e 	bne	r2,zero,800fa20 <alt_up_pixel_buffer_dma_draw_hline+0x1e8>
		/* Draw a horizontal line of a given color on the screen using the XY addressing mode. */
		register unsigned int x;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
 800f914:	e0bff317 	ldw	r2,-52(fp)
 800f918:	10801317 	ldw	r2,76(r2)
		addr = addr + (line_y << offset_y);
 800f91c:	e0fffa17 	ldw	r3,-24(fp)
 800f920:	1884983a 	sll	r2,r3,r2
 800f924:	e13fff17 	ldw	r4,-4(fp)
 800f928:	2089883a 	add	r4,r4,r2
 800f92c:	e13fff15 	stw	r4,-4(fp)
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a horizontal line. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
 800f930:	e0bff317 	ldw	r2,-52(fp)
 800f934:	10800e17 	ldw	r2,56(r2)
 800f938:	10800058 	cmpnei	r2,r2,1
 800f93c:	10000f1e 	bne	r2,zero,800f97c <alt_up_pixel_buffer_dma_draw_hline+0x144>
			for (x = l_x; x <= r_x; x++)
 800f940:	e0bffc17 	ldw	r2,-16(fp)
 800f944:	e0bff815 	stw	r2,-32(fp)
 800f948:	00000806 	br	800f96c <alt_up_pixel_buffer_dma_draw_hline+0x134>
			{
				IOWR_8DIRECT(addr, x, local_color);
 800f94c:	e0ffff17 	ldw	r3,-4(fp)
 800f950:	e0bff817 	ldw	r2,-32(fp)
 800f954:	1885883a 	add	r2,r3,r2
 800f958:	e0fff917 	ldw	r3,-28(fp)
 800f95c:	10c00025 	stbio	r3,0(r2)
		addr = addr + (line_y << offset_y);
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a horizontal line. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (x = l_x; x <= r_x; x++)
 800f960:	e0fff817 	ldw	r3,-32(fp)
 800f964:	18c00044 	addi	r3,r3,1
 800f968:	e0fff815 	stw	r3,-32(fp)
 800f96c:	e13ffb17 	ldw	r4,-20(fp)
 800f970:	e0bff817 	ldw	r2,-32(fp)
 800f974:	20bff52e 	bgeu	r4,r2,800f94c <alt_up_pixel_buffer_dma_draw_hline+0x114>
 800f978:	00007f06 	br	800fb78 <alt_up_pixel_buffer_dma_draw_hline+0x340>
			{
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
 800f97c:	e0bff317 	ldw	r2,-52(fp)
 800f980:	10800e17 	ldw	r2,56(r2)
 800f984:	10800098 	cmpnei	r2,r2,2
 800f988:	1000121e 	bne	r2,zero,800f9d4 <alt_up_pixel_buffer_dma_draw_hline+0x19c>
			for (x = l_x; x <= r_x; x++)
 800f98c:	e0fffc17 	ldw	r3,-16(fp)
 800f990:	e0fff815 	stw	r3,-32(fp)
 800f994:	00000b06 	br	800f9c4 <alt_up_pixel_buffer_dma_draw_hline+0x18c>
			{
				IOWR_16DIRECT(addr, x << 1, local_color);
 800f998:	e13ff817 	ldw	r4,-32(fp)
 800f99c:	e13ff817 	ldw	r4,-32(fp)
 800f9a0:	2105883a 	add	r2,r4,r4
 800f9a4:	1007883a 	mov	r3,r2
 800f9a8:	e0bfff17 	ldw	r2,-4(fp)
 800f9ac:	1885883a 	add	r2,r3,r2
 800f9b0:	e0fff917 	ldw	r3,-28(fp)
 800f9b4:	10c0002d 	sthio	r3,0(r2)
			for (x = l_x; x <= r_x; x++)
			{
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (x = l_x; x <= r_x; x++)
 800f9b8:	e0bff817 	ldw	r2,-32(fp)
 800f9bc:	10800044 	addi	r2,r2,1
 800f9c0:	e0bff815 	stw	r2,-32(fp)
 800f9c4:	e0fffb17 	ldw	r3,-20(fp)
 800f9c8:	e13ff817 	ldw	r4,-32(fp)
 800f9cc:	193ff22e 	bgeu	r3,r4,800f998 <alt_up_pixel_buffer_dma_draw_hline+0x160>
 800f9d0:	00006906 	br	800fb78 <alt_up_pixel_buffer_dma_draw_hline+0x340>
				IOWR_16DIRECT(addr, x << 1, local_color);
			}
		}
		else
		{
			for (x = l_x; x <= r_x; x++)
 800f9d4:	e0bffc17 	ldw	r2,-16(fp)
 800f9d8:	e0bff815 	stw	r2,-32(fp)
 800f9dc:	00000c06 	br	800fa10 <alt_up_pixel_buffer_dma_draw_hline+0x1d8>
			{
				IOWR_32DIRECT(addr, x << 2, local_color);
 800f9e0:	e0fff817 	ldw	r3,-32(fp)
 800f9e4:	e0fff817 	ldw	r3,-32(fp)
 800f9e8:	18c5883a 	add	r2,r3,r3
 800f9ec:	1085883a 	add	r2,r2,r2
 800f9f0:	1007883a 	mov	r3,r2
 800f9f4:	e0bfff17 	ldw	r2,-4(fp)
 800f9f8:	1885883a 	add	r2,r3,r2
 800f9fc:	e0fff917 	ldw	r3,-28(fp)
 800fa00:	10c00035 	stwio	r3,0(r2)
				IOWR_16DIRECT(addr, x << 1, local_color);
			}
		}
		else
		{
			for (x = l_x; x <= r_x; x++)
 800fa04:	e13ff817 	ldw	r4,-32(fp)
 800fa08:	21000044 	addi	r4,r4,1
 800fa0c:	e13ff815 	stw	r4,-32(fp)
 800fa10:	e0bffb17 	ldw	r2,-20(fp)
 800fa14:	e0fff817 	ldw	r3,-32(fp)
 800fa18:	10fff12e 	bgeu	r2,r3,800f9e0 <alt_up_pixel_buffer_dma_draw_hline+0x1a8>
 800fa1c:	00005606 	br	800fb78 <alt_up_pixel_buffer_dma_draw_hline+0x340>
	} else {
		/* Draw a horizontal line of a given color on the screen using the linear addressing mode. */
		register unsigned int x;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
 800fa20:	e0bff317 	ldw	r2,-52(fp)
 800fa24:	10800e17 	ldw	r2,56(r2)
 800fa28:	10800058 	cmpnei	r2,r2,1
 800fa2c:	1000151e 	bne	r2,zero,800fa84 <alt_up_pixel_buffer_dma_draw_hline+0x24c>
			addr = addr + line_y * limit_x;
 800fa30:	e13ffa17 	ldw	r4,-24(fp)
 800fa34:	e0fffe17 	ldw	r3,-8(fp)
 800fa38:	20c5383a 	mul	r2,r4,r3
 800fa3c:	e13fff17 	ldw	r4,-4(fp)
 800fa40:	2089883a 	add	r4,r4,r2
 800fa44:	e13fff15 	stw	r4,-4(fp)
			for (x = l_x; x <= r_x; x++)
 800fa48:	e0bffc17 	ldw	r2,-16(fp)
 800fa4c:	e0bff715 	stw	r2,-36(fp)
 800fa50:	00000806 	br	800fa74 <alt_up_pixel_buffer_dma_draw_hline+0x23c>
			{
				IOWR_8DIRECT(addr, x, local_color);
 800fa54:	e0ffff17 	ldw	r3,-4(fp)
 800fa58:	e0bff717 	ldw	r2,-36(fp)
 800fa5c:	1885883a 	add	r2,r3,r2
 800fa60:	e0fff917 	ldw	r3,-28(fp)
 800fa64:	10c00025 	stbio	r3,0(r2)
		register unsigned int x;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + line_y * limit_x;
			for (x = l_x; x <= r_x; x++)
 800fa68:	e0fff717 	ldw	r3,-36(fp)
 800fa6c:	18c00044 	addi	r3,r3,1
 800fa70:	e0fff715 	stw	r3,-36(fp)
 800fa74:	e13ffb17 	ldw	r4,-20(fp)
 800fa78:	e0bff717 	ldw	r2,-36(fp)
 800fa7c:	20bff52e 	bgeu	r4,r2,800fa54 <alt_up_pixel_buffer_dma_draw_hline+0x21c>
 800fa80:	00003d06 	br	800fb78 <alt_up_pixel_buffer_dma_draw_hline+0x340>
			{
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
 800fa84:	e0bff317 	ldw	r2,-52(fp)
 800fa88:	10800e17 	ldw	r2,56(r2)
 800fa8c:	10800098 	cmpnei	r2,r2,2
 800fa90:	10001c1e 	bne	r2,zero,800fb04 <alt_up_pixel_buffer_dma_draw_hline+0x2cc>
			limit_x = limit_x << 1;
 800fa94:	e0fffe17 	ldw	r3,-8(fp)
 800fa98:	e0fffe17 	ldw	r3,-8(fp)
 800fa9c:	18c5883a 	add	r2,r3,r3
 800faa0:	e0bffe15 	stw	r2,-8(fp)
			addr = addr + line_y * limit_x;
 800faa4:	e13ffa17 	ldw	r4,-24(fp)
 800faa8:	e0fffe17 	ldw	r3,-8(fp)
 800faac:	20c5383a 	mul	r2,r4,r3
 800fab0:	e13fff17 	ldw	r4,-4(fp)
 800fab4:	2089883a 	add	r4,r4,r2
 800fab8:	e13fff15 	stw	r4,-4(fp)
			for (x = l_x; x <= r_x; x++)
 800fabc:	e0bffc17 	ldw	r2,-16(fp)
 800fac0:	e0bff715 	stw	r2,-36(fp)
 800fac4:	00000b06 	br	800faf4 <alt_up_pixel_buffer_dma_draw_hline+0x2bc>
			{
				IOWR_16DIRECT(addr, x << 1, local_color);
 800fac8:	e0fff717 	ldw	r3,-36(fp)
 800facc:	e0fff717 	ldw	r3,-36(fp)
 800fad0:	18c5883a 	add	r2,r3,r3
 800fad4:	1007883a 	mov	r3,r2
 800fad8:	e0bfff17 	ldw	r2,-4(fp)
 800fadc:	1885883a 	add	r2,r3,r2
 800fae0:	e0fff917 	ldw	r3,-28(fp)
 800fae4:	10c0002d 	sthio	r3,0(r2)
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + line_y * limit_x;
			for (x = l_x; x <= r_x; x++)
 800fae8:	e13ff717 	ldw	r4,-36(fp)
 800faec:	21000044 	addi	r4,r4,1
 800faf0:	e13ff715 	stw	r4,-36(fp)
 800faf4:	e0bffb17 	ldw	r2,-20(fp)
 800faf8:	e0fff717 	ldw	r3,-36(fp)
 800fafc:	10fff22e 	bgeu	r2,r3,800fac8 <alt_up_pixel_buffer_dma_draw_hline+0x290>
 800fb00:	00001d06 	br	800fb78 <alt_up_pixel_buffer_dma_draw_hline+0x340>
				IOWR_16DIRECT(addr, x << 1, local_color);
			}
		}
		else
		{
			limit_x = limit_x << 2;
 800fb04:	e13ffe17 	ldw	r4,-8(fp)
 800fb08:	e13ffe17 	ldw	r4,-8(fp)
 800fb0c:	2105883a 	add	r2,r4,r4
 800fb10:	1085883a 	add	r2,r2,r2
 800fb14:	e0bffe15 	stw	r2,-8(fp)
			addr = addr + line_y * limit_x;
 800fb18:	e0fffa17 	ldw	r3,-24(fp)
 800fb1c:	e13ffe17 	ldw	r4,-8(fp)
 800fb20:	1905383a 	mul	r2,r3,r4
 800fb24:	e0ffff17 	ldw	r3,-4(fp)
 800fb28:	1887883a 	add	r3,r3,r2
 800fb2c:	e0ffff15 	stw	r3,-4(fp)
			for (x = l_x; x <= r_x; x++)
 800fb30:	e13ffc17 	ldw	r4,-16(fp)
 800fb34:	e13ff715 	stw	r4,-36(fp)
 800fb38:	00000c06 	br	800fb6c <alt_up_pixel_buffer_dma_draw_hline+0x334>
			{
				IOWR_32DIRECT(addr, x << 2, local_color);
 800fb3c:	e0fff717 	ldw	r3,-36(fp)
 800fb40:	e0fff717 	ldw	r3,-36(fp)
 800fb44:	18c5883a 	add	r2,r3,r3
 800fb48:	1085883a 	add	r2,r2,r2
 800fb4c:	1007883a 	mov	r3,r2
 800fb50:	e0bfff17 	ldw	r2,-4(fp)
 800fb54:	1885883a 	add	r2,r3,r2
 800fb58:	e0fff917 	ldw	r3,-28(fp)
 800fb5c:	10c00035 	stwio	r3,0(r2)
		}
		else
		{
			limit_x = limit_x << 2;
			addr = addr + line_y * limit_x;
			for (x = l_x; x <= r_x; x++)
 800fb60:	e13ff717 	ldw	r4,-36(fp)
 800fb64:	21000044 	addi	r4,r4,1
 800fb68:	e13ff715 	stw	r4,-36(fp)
 800fb6c:	e0bffb17 	ldw	r2,-20(fp)
 800fb70:	e0fff717 	ldw	r3,-36(fp)
 800fb74:	10fff12e 	bgeu	r2,r3,800fb3c <alt_up_pixel_buffer_dma_draw_hline+0x304>
				IOWR_32DIRECT(addr, x << 2, local_color);
			}
			addr = addr + limit_x;
		}
	}
}
 800fb78:	e037883a 	mov	sp,fp
 800fb7c:	df000017 	ldw	fp,0(sp)
 800fb80:	dec00104 	addi	sp,sp,4
 800fb84:	f800283a 	ret

0800fb88 <alt_up_pixel_buffer_dma_draw_vline>:


void alt_up_pixel_buffer_dma_draw_vline(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x, int y0, int y1, int color, int backbuffer)
/* This method draws a vertical line. This method is faster than using the line method because we know the direction of the line. */

{
 800fb88:	defff104 	addi	sp,sp,-60
 800fb8c:	df000e15 	stw	fp,56(sp)
 800fb90:	df000e04 	addi	fp,sp,56
 800fb94:	e13ff215 	stw	r4,-56(fp)
 800fb98:	e17ff315 	stw	r5,-52(fp)
 800fb9c:	e1bff415 	stw	r6,-48(fp)
 800fba0:	e1fff515 	stw	r7,-44(fp)
	register unsigned int addr;
	register unsigned int limit_x = pixel_buffer->x_resolution;
 800fba4:	e0bff217 	ldw	r2,-56(fp)
 800fba8:	10800f17 	ldw	r2,60(r2)
 800fbac:	e0bffe15 	stw	r2,-8(fp)
	register unsigned int limit_y = pixel_buffer->y_resolution;
 800fbb0:	e0bff217 	ldw	r2,-56(fp)
 800fbb4:	10801017 	ldw	r2,64(r2)
 800fbb8:	e0bffd15 	stw	r2,-12(fp)
	register unsigned int temp;
	register unsigned int line_x = x;
 800fbbc:	e0bff317 	ldw	r2,-52(fp)
 800fbc0:	e0bffc15 	stw	r2,-16(fp)
	register unsigned int t_y = y0;
 800fbc4:	e0fff417 	ldw	r3,-48(fp)
 800fbc8:	e0fffb15 	stw	r3,-20(fp)
	register unsigned int b_y = y1;
 800fbcc:	e13ff517 	ldw	r4,-44(fp)
 800fbd0:	e13ffa15 	stw	r4,-24(fp)
	register unsigned int local_color = color;
 800fbd4:	e0800117 	ldw	r2,4(fp)
 800fbd8:	e0bff915 	stw	r2,-28(fp)
	
	/* Check coordinates */
	if (t_y > b_y)
 800fbdc:	e0fffa17 	ldw	r3,-24(fp)
 800fbe0:	e13ffb17 	ldw	r4,-20(fp)
 800fbe4:	1900042e 	bgeu	r3,r4,800fbf8 <alt_up_pixel_buffer_dma_draw_vline+0x70>
	{
		temp = t_y;
 800fbe8:	e0bffb17 	ldw	r2,-20(fp)
		t_y = b_y;
 800fbec:	e0fffa17 	ldw	r3,-24(fp)
 800fbf0:	e0fffb15 	stw	r3,-20(fp)
		b_y = temp;
 800fbf4:	e0bffa15 	stw	r2,-24(fp)
	}
	if ((line_x >= limit_x) || (t_y >= limit_y) || (line_x < 0) || (b_y < 0))
 800fbf8:	e13ffc17 	ldw	r4,-16(fp)
 800fbfc:	e0bffe17 	ldw	r2,-8(fp)
 800fc00:	2080d12e 	bgeu	r4,r2,800ff48 <alt_up_pixel_buffer_dma_draw_vline+0x3c0>
 800fc04:	e0fffb17 	ldw	r3,-20(fp)
 800fc08:	e13ffd17 	ldw	r4,-12(fp)
 800fc0c:	19000136 	bltu	r3,r4,800fc14 <alt_up_pixel_buffer_dma_draw_vline+0x8c>
	{
		/* Drawing outside of the window, so don't bother. */
		return;
 800fc10:	0000cd06 	br	800ff48 <alt_up_pixel_buffer_dma_draw_vline+0x3c0>
	/* Clip the box and draw only within the confines of the screen. */
	if (t_y < 0)
	{
		t_y = 0;
	}
	if (b_y >= limit_y)
 800fc14:	e0bffa17 	ldw	r2,-24(fp)
 800fc18:	e0fffd17 	ldw	r3,-12(fp)
 800fc1c:	10c00336 	bltu	r2,r3,800fc2c <alt_up_pixel_buffer_dma_draw_vline+0xa4>
	{
		b_y = limit_y - 1;
 800fc20:	e13ffd17 	ldw	r4,-12(fp)
 800fc24:	213fffc4 	addi	r4,r4,-1
 800fc28:	e13ffa15 	stw	r4,-24(fp)
	}

	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
 800fc2c:	e0800217 	ldw	r2,8(fp)
 800fc30:	10800058 	cmpnei	r2,r2,1
 800fc34:	1000041e 	bne	r2,zero,800fc48 <alt_up_pixel_buffer_dma_draw_vline+0xc0>
		addr = pixel_buffer->back_buffer_start_address;
 800fc38:	e0bff217 	ldw	r2,-56(fp)
 800fc3c:	10800c17 	ldw	r2,48(r2)
 800fc40:	e0bfff15 	stw	r2,-4(fp)
 800fc44:	00000306 	br	800fc54 <alt_up_pixel_buffer_dma_draw_vline+0xcc>
	else
		addr = pixel_buffer->buffer_start_address;
 800fc48:	e0bff217 	ldw	r2,-56(fp)
 800fc4c:	10800b17 	ldw	r2,44(r2)
 800fc50:	e0bfff15 	stw	r2,-4(fp)

	/* Draw the vertical line using one of the addressing modes. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
 800fc54:	e0bff217 	ldw	r2,-56(fp)
 800fc58:	10800d17 	ldw	r2,52(r2)
 800fc5c:	1004c03a 	cmpne	r2,r2,zero
 800fc60:	1000571e 	bne	r2,zero,800fdc0 <alt_up_pixel_buffer_dma_draw_vline+0x238>
		/* Draw a vertical line of a given color on the screen using the XY addressing mode. */
		register unsigned int y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
 800fc64:	e0bff217 	ldw	r2,-56(fp)
 800fc68:	10801317 	ldw	r2,76(r2)
 800fc6c:	e0bff715 	stw	r2,-36(fp)
		addr = addr + (t_y << offset_y);
 800fc70:	e0bff717 	ldw	r2,-36(fp)
 800fc74:	e0fffb17 	ldw	r3,-20(fp)
 800fc78:	1884983a 	sll	r2,r3,r2
 800fc7c:	e13fff17 	ldw	r4,-4(fp)
 800fc80:	2089883a 	add	r4,r4,r2
 800fc84:	e13fff15 	stw	r4,-4(fp)
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
 800fc88:	e0bff217 	ldw	r2,-56(fp)
 800fc8c:	10800e17 	ldw	r2,56(r2)
 800fc90:	10800058 	cmpnei	r2,r2,1
 800fc94:	1000151e 	bne	r2,zero,800fcec <alt_up_pixel_buffer_dma_draw_vline+0x164>
			for (y = t_y; y <= b_y; y++)
 800fc98:	e0bffb17 	ldw	r2,-20(fp)
 800fc9c:	e0bff815 	stw	r2,-32(fp)
 800fca0:	00000e06 	br	800fcdc <alt_up_pixel_buffer_dma_draw_vline+0x154>
			{
				IOWR_8DIRECT(addr, line_x, local_color);
 800fca4:	e0ffff17 	ldw	r3,-4(fp)
 800fca8:	e0bffc17 	ldw	r2,-16(fp)
 800fcac:	1885883a 	add	r2,r3,r2
 800fcb0:	e0fff917 	ldw	r3,-28(fp)
 800fcb4:	10c00025 	stbio	r3,0(r2)
				addr = addr + (1 << offset_y);
 800fcb8:	e0fff717 	ldw	r3,-36(fp)
 800fcbc:	00800044 	movi	r2,1
 800fcc0:	10c4983a 	sll	r2,r2,r3
 800fcc4:	e0ffff17 	ldw	r3,-4(fp)
 800fcc8:	1887883a 	add	r3,r3,r2
 800fccc:	e0ffff15 	stw	r3,-4(fp)
		addr = addr + (t_y << offset_y);
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
 800fcd0:	e13ff817 	ldw	r4,-32(fp)
 800fcd4:	21000044 	addi	r4,r4,1
 800fcd8:	e13ff815 	stw	r4,-32(fp)
 800fcdc:	e0bffa17 	ldw	r2,-24(fp)
 800fce0:	e0fff817 	ldw	r3,-32(fp)
 800fce4:	10ffef2e 	bgeu	r2,r3,800fca4 <alt_up_pixel_buffer_dma_draw_vline+0x11c>
 800fce8:	00009706 	br	800ff48 <alt_up_pixel_buffer_dma_draw_vline+0x3c0>
			{
				IOWR_8DIRECT(addr, line_x, local_color);
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
 800fcec:	e0bff217 	ldw	r2,-56(fp)
 800fcf0:	10800e17 	ldw	r2,56(r2)
 800fcf4:	10800098 	cmpnei	r2,r2,2
 800fcf8:	1000181e 	bne	r2,zero,800fd5c <alt_up_pixel_buffer_dma_draw_vline+0x1d4>
			for (y = t_y; y <= b_y; y++)
 800fcfc:	e13ffb17 	ldw	r4,-20(fp)
 800fd00:	e13ff815 	stw	r4,-32(fp)
 800fd04:	00001106 	br	800fd4c <alt_up_pixel_buffer_dma_draw_vline+0x1c4>
			{
				IOWR_16DIRECT(addr, line_x << 1, local_color);
 800fd08:	e0fffc17 	ldw	r3,-16(fp)
 800fd0c:	e0fffc17 	ldw	r3,-16(fp)
 800fd10:	18c5883a 	add	r2,r3,r3
 800fd14:	1007883a 	mov	r3,r2
 800fd18:	e0bfff17 	ldw	r2,-4(fp)
 800fd1c:	1885883a 	add	r2,r3,r2
 800fd20:	e0fff917 	ldw	r3,-28(fp)
 800fd24:	10c0002d 	sthio	r3,0(r2)
				addr = addr + (1 << offset_y);
 800fd28:	e0fff717 	ldw	r3,-36(fp)
 800fd2c:	00800044 	movi	r2,1
 800fd30:	10c4983a 	sll	r2,r2,r3
 800fd34:	e13fff17 	ldw	r4,-4(fp)
 800fd38:	2089883a 	add	r4,r4,r2
 800fd3c:	e13fff15 	stw	r4,-4(fp)
			{
				IOWR_8DIRECT(addr, line_x, local_color);
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
 800fd40:	e0bff817 	ldw	r2,-32(fp)
 800fd44:	10800044 	addi	r2,r2,1
 800fd48:	e0bff815 	stw	r2,-32(fp)
 800fd4c:	e0fffa17 	ldw	r3,-24(fp)
 800fd50:	e13ff817 	ldw	r4,-32(fp)
 800fd54:	193fec2e 	bgeu	r3,r4,800fd08 <alt_up_pixel_buffer_dma_draw_vline+0x180>
 800fd58:	00007b06 	br	800ff48 <alt_up_pixel_buffer_dma_draw_vline+0x3c0>
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
 800fd5c:	e0bffb17 	ldw	r2,-20(fp)
 800fd60:	e0bff815 	stw	r2,-32(fp)
 800fd64:	00001206 	br	800fdb0 <alt_up_pixel_buffer_dma_draw_vline+0x228>
			{
				IOWR_32DIRECT(addr, line_x << 2, local_color);
 800fd68:	e0fffc17 	ldw	r3,-16(fp)
 800fd6c:	e0fffc17 	ldw	r3,-16(fp)
 800fd70:	18c5883a 	add	r2,r3,r3
 800fd74:	1085883a 	add	r2,r2,r2
 800fd78:	1007883a 	mov	r3,r2
 800fd7c:	e0bfff17 	ldw	r2,-4(fp)
 800fd80:	1885883a 	add	r2,r3,r2
 800fd84:	e0fff917 	ldw	r3,-28(fp)
 800fd88:	10c00035 	stwio	r3,0(r2)
				addr = addr + (1 << offset_y);
 800fd8c:	e0fff717 	ldw	r3,-36(fp)
 800fd90:	00800044 	movi	r2,1
 800fd94:	10c4983a 	sll	r2,r2,r3
 800fd98:	e13fff17 	ldw	r4,-4(fp)
 800fd9c:	2089883a 	add	r4,r4,r2
 800fda0:	e13fff15 	stw	r4,-4(fp)
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
 800fda4:	e0bff817 	ldw	r2,-32(fp)
 800fda8:	10800044 	addi	r2,r2,1
 800fdac:	e0bff815 	stw	r2,-32(fp)
 800fdb0:	e0fffa17 	ldw	r3,-24(fp)
 800fdb4:	e13ff817 	ldw	r4,-32(fp)
 800fdb8:	193feb2e 	bgeu	r3,r4,800fd68 <alt_up_pixel_buffer_dma_draw_vline+0x1e0>
 800fdbc:	00006206 	br	800ff48 <alt_up_pixel_buffer_dma_draw_vline+0x3c0>
	} else {
		/* Draw a vertical line of a given color on the screen using the linear addressing mode. */
		register unsigned int y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
 800fdc0:	e0bff217 	ldw	r2,-56(fp)
 800fdc4:	10800e17 	ldw	r2,56(r2)
 800fdc8:	10800058 	cmpnei	r2,r2,1
 800fdcc:	1000191e 	bne	r2,zero,800fe34 <alt_up_pixel_buffer_dma_draw_vline+0x2ac>
			addr = addr + t_y * limit_x;
 800fdd0:	e0fffb17 	ldw	r3,-20(fp)
 800fdd4:	e13ffe17 	ldw	r4,-8(fp)
 800fdd8:	1905383a 	mul	r2,r3,r4
 800fddc:	e0ffff17 	ldw	r3,-4(fp)
 800fde0:	1887883a 	add	r3,r3,r2
 800fde4:	e0ffff15 	stw	r3,-4(fp)
			for (y = t_y; y <= b_y; y++)
 800fde8:	e13ffb17 	ldw	r4,-20(fp)
 800fdec:	e13ff615 	stw	r4,-40(fp)
 800fdf0:	00000c06 	br	800fe24 <alt_up_pixel_buffer_dma_draw_vline+0x29c>
			{
				IOWR_8DIRECT(addr, line_x, local_color);
 800fdf4:	e0ffff17 	ldw	r3,-4(fp)
 800fdf8:	e0bffc17 	ldw	r2,-16(fp)
 800fdfc:	1885883a 	add	r2,r3,r2
 800fe00:	e0fff917 	ldw	r3,-28(fp)
 800fe04:	10c00025 	stbio	r3,0(r2)
				addr = addr + limit_x;
 800fe08:	e0bfff17 	ldw	r2,-4(fp)
 800fe0c:	e0fffe17 	ldw	r3,-8(fp)
 800fe10:	10c5883a 	add	r2,r2,r3
 800fe14:	e0bfff15 	stw	r2,-4(fp)
		register unsigned int y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
 800fe18:	e13ff617 	ldw	r4,-40(fp)
 800fe1c:	21000044 	addi	r4,r4,1
 800fe20:	e13ff615 	stw	r4,-40(fp)
 800fe24:	e0bffa17 	ldw	r2,-24(fp)
 800fe28:	e0fff617 	ldw	r3,-40(fp)
 800fe2c:	10fff12e 	bgeu	r2,r3,800fdf4 <alt_up_pixel_buffer_dma_draw_vline+0x26c>
 800fe30:	00004506 	br	800ff48 <alt_up_pixel_buffer_dma_draw_vline+0x3c0>
			{
				IOWR_8DIRECT(addr, line_x, local_color);
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
 800fe34:	e0bff217 	ldw	r2,-56(fp)
 800fe38:	10800e17 	ldw	r2,56(r2)
 800fe3c:	10800098 	cmpnei	r2,r2,2
 800fe40:	1000201e 	bne	r2,zero,800fec4 <alt_up_pixel_buffer_dma_draw_vline+0x33c>
			limit_x = limit_x << 1;
 800fe44:	e13ffe17 	ldw	r4,-8(fp)
 800fe48:	e13ffe17 	ldw	r4,-8(fp)
 800fe4c:	2105883a 	add	r2,r4,r4
 800fe50:	e0bffe15 	stw	r2,-8(fp)
			addr = addr + t_y * limit_x;
 800fe54:	e0fffb17 	ldw	r3,-20(fp)
 800fe58:	e13ffe17 	ldw	r4,-8(fp)
 800fe5c:	1905383a 	mul	r2,r3,r4
 800fe60:	e0ffff17 	ldw	r3,-4(fp)
 800fe64:	1887883a 	add	r3,r3,r2
 800fe68:	e0ffff15 	stw	r3,-4(fp)
			for (y = t_y; y <= b_y; y++)
 800fe6c:	e13ffb17 	ldw	r4,-20(fp)
 800fe70:	e13ff615 	stw	r4,-40(fp)
 800fe74:	00000f06 	br	800feb4 <alt_up_pixel_buffer_dma_draw_vline+0x32c>
			{
				IOWR_16DIRECT(addr, line_x << 1, local_color);
 800fe78:	e0fffc17 	ldw	r3,-16(fp)
 800fe7c:	e0fffc17 	ldw	r3,-16(fp)
 800fe80:	18c5883a 	add	r2,r3,r3
 800fe84:	1007883a 	mov	r3,r2
 800fe88:	e0bfff17 	ldw	r2,-4(fp)
 800fe8c:	1885883a 	add	r2,r3,r2
 800fe90:	e0fff917 	ldw	r3,-28(fp)
 800fe94:	10c0002d 	sthio	r3,0(r2)
				addr = addr + limit_x;
 800fe98:	e13fff17 	ldw	r4,-4(fp)
 800fe9c:	e0bffe17 	ldw	r2,-8(fp)
 800fea0:	2089883a 	add	r4,r4,r2
 800fea4:	e13fff15 	stw	r4,-4(fp)
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
 800fea8:	e0fff617 	ldw	r3,-40(fp)
 800feac:	18c00044 	addi	r3,r3,1
 800feb0:	e0fff615 	stw	r3,-40(fp)
 800feb4:	e13ffa17 	ldw	r4,-24(fp)
 800feb8:	e0bff617 	ldw	r2,-40(fp)
 800febc:	20bfee2e 	bgeu	r4,r2,800fe78 <alt_up_pixel_buffer_dma_draw_vline+0x2f0>
 800fec0:	00002106 	br	800ff48 <alt_up_pixel_buffer_dma_draw_vline+0x3c0>
				addr = addr + limit_x;
			}
		}
		else
		{
			limit_x = limit_x << 2;
 800fec4:	e0fffe17 	ldw	r3,-8(fp)
 800fec8:	e0fffe17 	ldw	r3,-8(fp)
 800fecc:	18c5883a 	add	r2,r3,r3
 800fed0:	1085883a 	add	r2,r2,r2
 800fed4:	e0bffe15 	stw	r2,-8(fp)
			addr = addr + t_y * limit_x;
 800fed8:	e13ffb17 	ldw	r4,-20(fp)
 800fedc:	e0fffe17 	ldw	r3,-8(fp)
 800fee0:	20c5383a 	mul	r2,r4,r3
 800fee4:	e13fff17 	ldw	r4,-4(fp)
 800fee8:	2089883a 	add	r4,r4,r2
 800feec:	e13fff15 	stw	r4,-4(fp)
			for (y = t_y; y <= b_y; y++)
 800fef0:	e0bffb17 	ldw	r2,-20(fp)
 800fef4:	e0bff615 	stw	r2,-40(fp)
 800fef8:	00001006 	br	800ff3c <alt_up_pixel_buffer_dma_draw_vline+0x3b4>
			{
				IOWR_32DIRECT(addr, line_x << 2, local_color);
 800fefc:	e0fffc17 	ldw	r3,-16(fp)
 800ff00:	e0fffc17 	ldw	r3,-16(fp)
 800ff04:	18c5883a 	add	r2,r3,r3
 800ff08:	1085883a 	add	r2,r2,r2
 800ff0c:	1007883a 	mov	r3,r2
 800ff10:	e0bfff17 	ldw	r2,-4(fp)
 800ff14:	1885883a 	add	r2,r3,r2
 800ff18:	e0fff917 	ldw	r3,-28(fp)
 800ff1c:	10c00035 	stwio	r3,0(r2)
				addr = addr + limit_x;
 800ff20:	e13fff17 	ldw	r4,-4(fp)
 800ff24:	e0bffe17 	ldw	r2,-8(fp)
 800ff28:	2089883a 	add	r4,r4,r2
 800ff2c:	e13fff15 	stw	r4,-4(fp)
		}
		else
		{
			limit_x = limit_x << 2;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
 800ff30:	e0fff617 	ldw	r3,-40(fp)
 800ff34:	18c00044 	addi	r3,r3,1
 800ff38:	e0fff615 	stw	r3,-40(fp)
 800ff3c:	e13ffa17 	ldw	r4,-24(fp)
 800ff40:	e0bff617 	ldw	r2,-40(fp)
 800ff44:	20bfed2e 	bgeu	r4,r2,800fefc <alt_up_pixel_buffer_dma_draw_vline+0x374>
				IOWR_32DIRECT(addr, line_x << 2, local_color);
				addr = addr + limit_x;
			}
		}
	}
}
 800ff48:	e037883a 	mov	sp,fp
 800ff4c:	df000017 	ldw	fp,0(sp)
 800ff50:	dec00104 	addi	sp,sp,4
 800ff54:	f800283a 	ret

0800ff58 <alt_up_pixel_buffer_dma_draw_rectangle>:

void alt_up_pixel_buffer_dma_draw_rectangle(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int y0, int x1, int y1, int color, int backbuffer)
{
 800ff58:	defff804 	addi	sp,sp,-32
 800ff5c:	dfc00715 	stw	ra,28(sp)
 800ff60:	df000615 	stw	fp,24(sp)
 800ff64:	df000604 	addi	fp,sp,24
 800ff68:	e13ffc15 	stw	r4,-16(fp)
 800ff6c:	e17ffd15 	stw	r5,-12(fp)
 800ff70:	e1bffe15 	stw	r6,-8(fp)
 800ff74:	e1ffff15 	stw	r7,-4(fp)
	alt_up_pixel_buffer_dma_draw_hline(pixel_buffer, x0, x1, y0, color, backbuffer);
 800ff78:	e0800317 	ldw	r2,12(fp)
 800ff7c:	d8800015 	stw	r2,0(sp)
 800ff80:	e0800417 	ldw	r2,16(fp)
 800ff84:	d8800115 	stw	r2,4(sp)
 800ff88:	e13ffc17 	ldw	r4,-16(fp)
 800ff8c:	e17ffd17 	ldw	r5,-12(fp)
 800ff90:	e1bfff17 	ldw	r6,-4(fp)
 800ff94:	e1fffe17 	ldw	r7,-8(fp)
 800ff98:	800f8380 	call	800f838 <alt_up_pixel_buffer_dma_draw_hline>
	alt_up_pixel_buffer_dma_draw_hline(pixel_buffer, x0, x1, y1, color, backbuffer);
 800ff9c:	e0800317 	ldw	r2,12(fp)
 800ffa0:	d8800015 	stw	r2,0(sp)
 800ffa4:	e0800417 	ldw	r2,16(fp)
 800ffa8:	d8800115 	stw	r2,4(sp)
 800ffac:	e13ffc17 	ldw	r4,-16(fp)
 800ffb0:	e17ffd17 	ldw	r5,-12(fp)
 800ffb4:	e1bfff17 	ldw	r6,-4(fp)
 800ffb8:	e1c00217 	ldw	r7,8(fp)
 800ffbc:	800f8380 	call	800f838 <alt_up_pixel_buffer_dma_draw_hline>
	alt_up_pixel_buffer_dma_draw_vline(pixel_buffer, x0, y0, y1, color, backbuffer);
 800ffc0:	e0800317 	ldw	r2,12(fp)
 800ffc4:	d8800015 	stw	r2,0(sp)
 800ffc8:	e0800417 	ldw	r2,16(fp)
 800ffcc:	d8800115 	stw	r2,4(sp)
 800ffd0:	e13ffc17 	ldw	r4,-16(fp)
 800ffd4:	e17ffd17 	ldw	r5,-12(fp)
 800ffd8:	e1bffe17 	ldw	r6,-8(fp)
 800ffdc:	e1c00217 	ldw	r7,8(fp)
 800ffe0:	800fb880 	call	800fb88 <alt_up_pixel_buffer_dma_draw_vline>
	alt_up_pixel_buffer_dma_draw_vline(pixel_buffer, x1, y0, y1, color, backbuffer);
 800ffe4:	e0800317 	ldw	r2,12(fp)
 800ffe8:	d8800015 	stw	r2,0(sp)
 800ffec:	e0800417 	ldw	r2,16(fp)
 800fff0:	d8800115 	stw	r2,4(sp)
 800fff4:	e13ffc17 	ldw	r4,-16(fp)
 800fff8:	e17fff17 	ldw	r5,-4(fp)
 800fffc:	e1bffe17 	ldw	r6,-8(fp)
 8010000:	e1c00217 	ldw	r7,8(fp)
 8010004:	800fb880 	call	800fb88 <alt_up_pixel_buffer_dma_draw_vline>
}
 8010008:	e037883a 	mov	sp,fp
 801000c:	dfc00117 	ldw	ra,4(sp)
 8010010:	df000017 	ldw	fp,0(sp)
 8010014:	dec00204 	addi	sp,sp,8
 8010018:	f800283a 	ret

0801001c <helper_plot_pixel>:

void helper_plot_pixel(register unsigned int buffer_start, register int line_size, register int x, register int y, register int color, register int mode)
/* This is a helper function that draws a pixel at a given location. Note that no boundary checks are made,
 * so drawing off-screen may cause unpredictable side effects. */
{
 801001c:	defffb04 	addi	sp,sp,-20
 8010020:	df000415 	stw	fp,16(sp)
 8010024:	df000404 	addi	fp,sp,16
 8010028:	e13ffc15 	stw	r4,-16(fp)
 801002c:	e17ffd15 	stw	r5,-12(fp)
 8010030:	e1bffe15 	stw	r6,-8(fp)
 8010034:	e1ffff15 	stw	r7,-4(fp)
	if (mode == 0)
 8010038:	e0c00217 	ldw	r3,8(fp)
 801003c:	1804c03a 	cmpne	r2,r3,zero
 8010040:	10000b1e 	bne	r2,zero,8010070 <helper_plot_pixel+0x54>
		IOWR_8DIRECT(buffer_start, line_size*y+x, color);
 8010044:	e13ffd17 	ldw	r4,-12(fp)
 8010048:	e0ffff17 	ldw	r3,-4(fp)
 801004c:	20c5383a 	mul	r2,r4,r3
 8010050:	e13ffe17 	ldw	r4,-8(fp)
 8010054:	1105883a 	add	r2,r2,r4
 8010058:	1007883a 	mov	r3,r2
 801005c:	e0bffc17 	ldw	r2,-16(fp)
 8010060:	1885883a 	add	r2,r3,r2
 8010064:	e0c00117 	ldw	r3,4(fp)
 8010068:	10c00025 	stbio	r3,0(r2)
 801006c:	00001b06 	br	80100dc <helper_plot_pixel+0xc0>
	else if (mode == 1)
 8010070:	e1000217 	ldw	r4,8(fp)
 8010074:	20800058 	cmpnei	r2,r4,1
 8010078:	10000c1e 	bne	r2,zero,80100ac <helper_plot_pixel+0x90>
		IOWR_16DIRECT(buffer_start, (line_size*y+x) << 1, color);
 801007c:	e0fffd17 	ldw	r3,-12(fp)
 8010080:	e13fff17 	ldw	r4,-4(fp)
 8010084:	1905383a 	mul	r2,r3,r4
 8010088:	e0fffe17 	ldw	r3,-8(fp)
 801008c:	10c5883a 	add	r2,r2,r3
 8010090:	1085883a 	add	r2,r2,r2
 8010094:	1007883a 	mov	r3,r2
 8010098:	e0bffc17 	ldw	r2,-16(fp)
 801009c:	1885883a 	add	r2,r3,r2
 80100a0:	e1000117 	ldw	r4,4(fp)
 80100a4:	1100002d 	sthio	r4,0(r2)
 80100a8:	00000c06 	br	80100dc <helper_plot_pixel+0xc0>
	else
		IOWR_32DIRECT(buffer_start, (line_size*y+x) << 2, color);
 80100ac:	e0fffd17 	ldw	r3,-12(fp)
 80100b0:	e13fff17 	ldw	r4,-4(fp)
 80100b4:	1905383a 	mul	r2,r3,r4
 80100b8:	e0fffe17 	ldw	r3,-8(fp)
 80100bc:	10c5883a 	add	r2,r2,r3
 80100c0:	1085883a 	add	r2,r2,r2
 80100c4:	1085883a 	add	r2,r2,r2
 80100c8:	1007883a 	mov	r3,r2
 80100cc:	e0bffc17 	ldw	r2,-16(fp)
 80100d0:	1885883a 	add	r2,r3,r2
 80100d4:	e1000117 	ldw	r4,4(fp)
 80100d8:	11000035 	stwio	r4,0(r2)
}
 80100dc:	e037883a 	mov	sp,fp
 80100e0:	df000017 	ldw	fp,0(sp)
 80100e4:	dec00104 	addi	sp,sp,4
 80100e8:	f800283a 	ret

080100ec <alt_up_pixel_buffer_dma_draw_line>:

void alt_up_pixel_buffer_dma_draw_line(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int y0, int x1, int y1, int color, int backbuffer)
/* This function draws a line between points (x0, y0) and (x1, y1). The function does not check if it draws a pixel within screen boundaries.
 * users should ensure that the line is drawn within the screen boundaries. */
{
 80100ec:	deffe404 	addi	sp,sp,-112
 80100f0:	dfc01b15 	stw	ra,108(sp)
 80100f4:	df001a15 	stw	fp,104(sp)
 80100f8:	df001a04 	addi	fp,sp,104
 80100fc:	e13fe815 	stw	r4,-96(fp)
 8010100:	e17fe915 	stw	r5,-92(fp)
 8010104:	e1bfea15 	stw	r6,-88(fp)
 8010108:	e1ffeb15 	stw	r7,-84(fp)
	register int x_0 = x0;
 801010c:	e0bfe917 	ldw	r2,-92(fp)
 8010110:	e0bffa15 	stw	r2,-24(fp)
	register int y_0 = y0;
 8010114:	e0ffea17 	ldw	r3,-88(fp)
 8010118:	e0fff915 	stw	r3,-28(fp)
	register int x_1 = x1;
 801011c:	e13feb17 	ldw	r4,-84(fp)
 8010120:	e13ff815 	stw	r4,-32(fp)
	register int y_1 = y1;
 8010124:	e0800217 	ldw	r2,8(fp)
 8010128:	e0bff715 	stw	r2,-36(fp)
	register char steep = (ABS(y_1 - y_0) > ABS(x_1 - x_0)) ? 1 : 0;
 801012c:	e0fff717 	ldw	r3,-36(fp)
 8010130:	e13ff917 	ldw	r4,-28(fp)
 8010134:	1905c83a 	sub	r2,r3,r4
 8010138:	e0bfff15 	stw	r2,-4(fp)
 801013c:	e0ffff17 	ldw	r3,-4(fp)
 8010140:	1804403a 	cmpge	r2,r3,zero
 8010144:	1000031e 	bne	r2,zero,8010154 <alt_up_pixel_buffer_dma_draw_line+0x68>
 8010148:	e13fff17 	ldw	r4,-4(fp)
 801014c:	0109c83a 	sub	r4,zero,r4
 8010150:	e13fff15 	stw	r4,-4(fp)
 8010154:	e0fff817 	ldw	r3,-32(fp)
 8010158:	e13ffa17 	ldw	r4,-24(fp)
 801015c:	1905c83a 	sub	r2,r3,r4
 8010160:	e0bffe15 	stw	r2,-8(fp)
 8010164:	e0fffe17 	ldw	r3,-8(fp)
 8010168:	1804403a 	cmpge	r2,r3,zero
 801016c:	1000031e 	bne	r2,zero,801017c <alt_up_pixel_buffer_dma_draw_line+0x90>
 8010170:	e13ffe17 	ldw	r4,-8(fp)
 8010174:	0109c83a 	sub	r4,zero,r4
 8010178:	e13ffe15 	stw	r4,-8(fp)
 801017c:	e0fffe17 	ldw	r3,-8(fp)
 8010180:	e13fff17 	ldw	r4,-4(fp)
 8010184:	1904803a 	cmplt	r2,r3,r4
 8010188:	e0bff605 	stb	r2,-40(fp)
	register int deltax, deltay, error, ystep, x, y;
	register int color_mode =	(pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) ? 0 :
								(pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) ? 1 : 2;
 801018c:	e0bfe817 	ldw	r2,-96(fp)
 8010190:	10800e17 	ldw	r2,56(r2)
 8010194:	10800060 	cmpeqi	r2,r2,1
 8010198:	10000c1e 	bne	r2,zero,80101cc <alt_up_pixel_buffer_dma_draw_line+0xe0>
 801019c:	e0bfe817 	ldw	r2,-96(fp)
 80101a0:	10800e17 	ldw	r2,56(r2)
 80101a4:	10800098 	cmpnei	r2,r2,2
 80101a8:	1000031e 	bne	r2,zero,80101b8 <alt_up_pixel_buffer_dma_draw_line+0xcc>
 80101ac:	00800044 	movi	r2,1
 80101b0:	e0bffc15 	stw	r2,-16(fp)
 80101b4:	00000206 	br	80101c0 <alt_up_pixel_buffer_dma_draw_line+0xd4>
 80101b8:	00c00084 	movi	r3,2
 80101bc:	e0fffc15 	stw	r3,-16(fp)
 80101c0:	e13ffc17 	ldw	r4,-16(fp)
 80101c4:	e13ffd15 	stw	r4,-12(fp)
 80101c8:	00000106 	br	80101d0 <alt_up_pixel_buffer_dma_draw_line+0xe4>
 80101cc:	e03ffd15 	stw	zero,-12(fp)
 80101d0:	e0bffd17 	ldw	r2,-12(fp)
 80101d4:	e0bfef15 	stw	r2,-68(fp)
	register int line_color = color;
 80101d8:	e0c00317 	ldw	r3,12(fp)
 80101dc:	e0ffee15 	stw	r3,-72(fp)
	register unsigned int buffer_start;
	register int line_size = (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) ? (1 << (pixel_buffer->y_coord_offset-color_mode)) : pixel_buffer->x_resolution;
 80101e0:	e0bfe817 	ldw	r2,-96(fp)
 80101e4:	10800d17 	ldw	r2,52(r2)
 80101e8:	1004c03a 	cmpne	r2,r2,zero
 80101ec:	1000091e 	bne	r2,zero,8010214 <alt_up_pixel_buffer_dma_draw_line+0x128>
 80101f0:	e0bfe817 	ldw	r2,-96(fp)
 80101f4:	10c01317 	ldw	r3,76(r2)
 80101f8:	e0bfef17 	ldw	r2,-68(fp)
 80101fc:	1885c83a 	sub	r2,r3,r2
 8010200:	1007883a 	mov	r3,r2
 8010204:	00800044 	movi	r2,1
 8010208:	10c4983a 	sll	r2,r2,r3
 801020c:	e0bffb15 	stw	r2,-20(fp)
 8010210:	00000306 	br	8010220 <alt_up_pixel_buffer_dma_draw_line+0x134>
 8010214:	e0bfe817 	ldw	r2,-96(fp)
 8010218:	10800f17 	ldw	r2,60(r2)
 801021c:	e0bffb15 	stw	r2,-20(fp)
 8010220:	e13ffb17 	ldw	r4,-20(fp)
 8010224:	e13fec15 	stw	r4,-80(fp)

	if (backbuffer == 1)
 8010228:	e0800417 	ldw	r2,16(fp)
 801022c:	10800058 	cmpnei	r2,r2,1
 8010230:	1000041e 	bne	r2,zero,8010244 <alt_up_pixel_buffer_dma_draw_line+0x158>
		buffer_start = pixel_buffer->back_buffer_start_address;
 8010234:	e0bfe817 	ldw	r2,-96(fp)
 8010238:	10800c17 	ldw	r2,48(r2)
 801023c:	e0bfed15 	stw	r2,-76(fp)
 8010240:	00000306 	br	8010250 <alt_up_pixel_buffer_dma_draw_line+0x164>
	else
		buffer_start = pixel_buffer->buffer_start_address;
 8010244:	e0bfe817 	ldw	r2,-96(fp)
 8010248:	10800b17 	ldw	r2,44(r2)
 801024c:	e0bfed15 	stw	r2,-76(fp)

	/* Preprocessing inputs */
	if (steep > 0) {
 8010250:	e0fff603 	ldbu	r3,-40(fp)
 8010254:	18803fcc 	andi	r2,r3,255
 8010258:	1080201c 	xori	r2,r2,128
 801025c:	10bfe004 	addi	r2,r2,-128
 8010260:	10800050 	cmplti	r2,r2,1
 8010264:	10000c1e 	bne	r2,zero,8010298 <alt_up_pixel_buffer_dma_draw_line+0x1ac>
		// Swap x_0 and y_0
		error = x_0;
 8010268:	e13ffa17 	ldw	r4,-24(fp)
 801026c:	e13ff315 	stw	r4,-52(fp)
		x_0 = y_0;
 8010270:	e0bff917 	ldw	r2,-28(fp)
 8010274:	e0bffa15 	stw	r2,-24(fp)
		y_0 = error;
 8010278:	e0fff317 	ldw	r3,-52(fp)
 801027c:	e0fff915 	stw	r3,-28(fp)
		// Swap x_1 and y_1
		error = x_1;
 8010280:	e13ff817 	ldw	r4,-32(fp)
 8010284:	e13ff315 	stw	r4,-52(fp)
		x_1 = y_1;
 8010288:	e0bff717 	ldw	r2,-36(fp)
 801028c:	e0bff815 	stw	r2,-32(fp)
		y_1 = error;
 8010290:	e0fff317 	ldw	r3,-52(fp)
 8010294:	e0fff715 	stw	r3,-36(fp)
	}
	if (x_0 > x_1) {
 8010298:	e13ff817 	ldw	r4,-32(fp)
 801029c:	e0bffa17 	ldw	r2,-24(fp)
 80102a0:	20800c0e 	bge	r4,r2,80102d4 <alt_up_pixel_buffer_dma_draw_line+0x1e8>
		// Swap x_0 and x_1
		error = x_0;
 80102a4:	e0fffa17 	ldw	r3,-24(fp)
 80102a8:	e0fff315 	stw	r3,-52(fp)
		x_0 = x_1;
 80102ac:	e13ff817 	ldw	r4,-32(fp)
 80102b0:	e13ffa15 	stw	r4,-24(fp)
		x_1 = error;
 80102b4:	e0bff317 	ldw	r2,-52(fp)
 80102b8:	e0bff815 	stw	r2,-32(fp)
		// Swap y_0 and y_1
		error = y_0;
 80102bc:	e0fff917 	ldw	r3,-28(fp)
 80102c0:	e0fff315 	stw	r3,-52(fp)
		y_0 = y_1;
 80102c4:	e13ff717 	ldw	r4,-36(fp)
 80102c8:	e13ff915 	stw	r4,-28(fp)
		y_1 = error;
 80102cc:	e0bff317 	ldw	r2,-52(fp)
 80102d0:	e0bff715 	stw	r2,-36(fp)
	}

	/* Setup local variables */
	deltax = x_1 - x_0;
 80102d4:	e0fff817 	ldw	r3,-32(fp)
 80102d8:	e13ffa17 	ldw	r4,-24(fp)
 80102dc:	1907c83a 	sub	r3,r3,r4
 80102e0:	e0fff515 	stw	r3,-44(fp)
	deltay = ABS(y_1 - y_0);
 80102e4:	e0fff717 	ldw	r3,-36(fp)
 80102e8:	e13ff917 	ldw	r4,-28(fp)
 80102ec:	1905c83a 	sub	r2,r3,r4
 80102f0:	e0bff415 	stw	r2,-48(fp)
 80102f4:	e0fff417 	ldw	r3,-48(fp)
 80102f8:	1804403a 	cmpge	r2,r3,zero
 80102fc:	1000031e 	bne	r2,zero,801030c <alt_up_pixel_buffer_dma_draw_line+0x220>
 8010300:	e13ff417 	ldw	r4,-48(fp)
 8010304:	0109c83a 	sub	r4,zero,r4
 8010308:	e13ff415 	stw	r4,-48(fp)
	error = -(deltax / 2); 
 801030c:	e0fff517 	ldw	r3,-44(fp)
 8010310:	1804d7fa 	srli	r2,r3,31
 8010314:	e13ff517 	ldw	r4,-44(fp)
 8010318:	1105883a 	add	r2,r2,r4
 801031c:	1005d07a 	srai	r2,r2,1
 8010320:	0085c83a 	sub	r2,zero,r2
 8010324:	e0bff315 	stw	r2,-52(fp)
	y = y_0;
 8010328:	e0bff917 	ldw	r2,-28(fp)
 801032c:	e0bff015 	stw	r2,-64(fp)
	if (y_0 < y_1)
 8010330:	e0fff917 	ldw	r3,-28(fp)
 8010334:	e13ff717 	ldw	r4,-36(fp)
 8010338:	1900030e 	bge	r3,r4,8010348 <alt_up_pixel_buffer_dma_draw_line+0x25c>
		ystep = 1;
 801033c:	00800044 	movi	r2,1
 8010340:	e0bff215 	stw	r2,-56(fp)
 8010344:	00000206 	br	8010350 <alt_up_pixel_buffer_dma_draw_line+0x264>
	else
		ystep = -1;
 8010348:	00ffffc4 	movi	r3,-1
 801034c:	e0fff215 	stw	r3,-56(fp)

	/* Draw a line - either go along the x axis (steep = 0) or along the y axis (steep = 1). The code is replicated to
	 * compile well on low optimization levels. */
	if (steep == 1)
 8010350:	e13ff603 	ldbu	r4,-40(fp)
 8010354:	20803fcc 	andi	r2,r4,255
 8010358:	1080201c 	xori	r2,r2,128
 801035c:	10bfe004 	addi	r2,r2,-128
 8010360:	10800058 	cmpnei	r2,r2,1
 8010364:	1000221e 	bne	r2,zero,80103f0 <alt_up_pixel_buffer_dma_draw_line+0x304>
	{
		for (x=x_0; x <= x_1; x++) {
 8010368:	e0bffa17 	ldw	r2,-24(fp)
 801036c:	e0bff115 	stw	r2,-60(fp)
 8010370:	00001b06 	br	80103e0 <alt_up_pixel_buffer_dma_draw_line+0x2f4>
			helper_plot_pixel(buffer_start, line_size, y, x, line_color, color_mode);
 8010374:	e0ffee17 	ldw	r3,-72(fp)
 8010378:	d8c00015 	stw	r3,0(sp)
 801037c:	e13fef17 	ldw	r4,-68(fp)
 8010380:	d9000115 	stw	r4,4(sp)
 8010384:	e13fed17 	ldw	r4,-76(fp)
 8010388:	e17fec17 	ldw	r5,-80(fp)
 801038c:	e1bff017 	ldw	r6,-64(fp)
 8010390:	e1fff117 	ldw	r7,-60(fp)
 8010394:	801001c0 	call	801001c <helper_plot_pixel>
			error = error + deltay;
 8010398:	e0bff317 	ldw	r2,-52(fp)
 801039c:	e0fff417 	ldw	r3,-48(fp)
 80103a0:	10c5883a 	add	r2,r2,r3
 80103a4:	e0bff315 	stw	r2,-52(fp)
			if (error > 0) {
 80103a8:	e13ff317 	ldw	r4,-52(fp)
 80103ac:	20800050 	cmplti	r2,r4,1
 80103b0:	1000081e 	bne	r2,zero,80103d4 <alt_up_pixel_buffer_dma_draw_line+0x2e8>
				y = y + ystep;
 80103b4:	e0bff017 	ldw	r2,-64(fp)
 80103b8:	e0fff217 	ldw	r3,-56(fp)
 80103bc:	10c5883a 	add	r2,r2,r3
 80103c0:	e0bff015 	stw	r2,-64(fp)
				error = error - deltax;
 80103c4:	e13ff317 	ldw	r4,-52(fp)
 80103c8:	e0bff517 	ldw	r2,-44(fp)
 80103cc:	2089c83a 	sub	r4,r4,r2
 80103d0:	e13ff315 	stw	r4,-52(fp)

	/* Draw a line - either go along the x axis (steep = 0) or along the y axis (steep = 1). The code is replicated to
	 * compile well on low optimization levels. */
	if (steep == 1)
	{
		for (x=x_0; x <= x_1; x++) {
 80103d4:	e0fff117 	ldw	r3,-60(fp)
 80103d8:	18c00044 	addi	r3,r3,1
 80103dc:	e0fff115 	stw	r3,-60(fp)
 80103e0:	e13ff817 	ldw	r4,-32(fp)
 80103e4:	e0bff117 	ldw	r2,-60(fp)
 80103e8:	20bfe20e 	bge	r4,r2,8010374 <alt_up_pixel_buffer_dma_draw_line+0x288>
 80103ec:	00002106 	br	8010474 <alt_up_pixel_buffer_dma_draw_line+0x388>
			}
		}
	}
	else
	{
		for (x=x_0; x <= x_1; x++) {
 80103f0:	e0fffa17 	ldw	r3,-24(fp)
 80103f4:	e0fff115 	stw	r3,-60(fp)
 80103f8:	00001b06 	br	8010468 <alt_up_pixel_buffer_dma_draw_line+0x37c>
			helper_plot_pixel(buffer_start, line_size, x, y, line_color, color_mode);
 80103fc:	e13fee17 	ldw	r4,-72(fp)
 8010400:	d9000015 	stw	r4,0(sp)
 8010404:	e0bfef17 	ldw	r2,-68(fp)
 8010408:	d8800115 	stw	r2,4(sp)
 801040c:	e13fed17 	ldw	r4,-76(fp)
 8010410:	e17fec17 	ldw	r5,-80(fp)
 8010414:	e1bff117 	ldw	r6,-60(fp)
 8010418:	e1fff017 	ldw	r7,-64(fp)
 801041c:	801001c0 	call	801001c <helper_plot_pixel>
			error = error + deltay;
 8010420:	e0fff317 	ldw	r3,-52(fp)
 8010424:	e13ff417 	ldw	r4,-48(fp)
 8010428:	1907883a 	add	r3,r3,r4
 801042c:	e0fff315 	stw	r3,-52(fp)
			if (error > 0) {
 8010430:	e0fff317 	ldw	r3,-52(fp)
 8010434:	18800050 	cmplti	r2,r3,1
 8010438:	1000081e 	bne	r2,zero,801045c <alt_up_pixel_buffer_dma_draw_line+0x370>
				y = y + ystep;
 801043c:	e13ff017 	ldw	r4,-64(fp)
 8010440:	e0bff217 	ldw	r2,-56(fp)
 8010444:	2089883a 	add	r4,r4,r2
 8010448:	e13ff015 	stw	r4,-64(fp)
				error = error - deltax;
 801044c:	e0fff317 	ldw	r3,-52(fp)
 8010450:	e13ff517 	ldw	r4,-44(fp)
 8010454:	1907c83a 	sub	r3,r3,r4
 8010458:	e0fff315 	stw	r3,-52(fp)
			}
		}
	}
	else
	{
		for (x=x_0; x <= x_1; x++) {
 801045c:	e0bff117 	ldw	r2,-60(fp)
 8010460:	10800044 	addi	r2,r2,1
 8010464:	e0bff115 	stw	r2,-60(fp)
 8010468:	e0fff817 	ldw	r3,-32(fp)
 801046c:	e13ff117 	ldw	r4,-60(fp)
 8010470:	193fe20e 	bge	r3,r4,80103fc <alt_up_pixel_buffer_dma_draw_line+0x310>
				y = y + ystep;
				error = error - deltax;
			}
		}
	}
}
 8010474:	e037883a 	mov	sp,fp
 8010478:	dfc00117 	ldw	ra,4(sp)
 801047c:	df000017 	ldw	fp,0(sp)
 8010480:	dec00204 	addi	sp,sp,8
 8010484:	f800283a 	ret

08010488 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
 8010488:	defff404 	addi	sp,sp,-48
 801048c:	df000b15 	stw	fp,44(sp)
 8010490:	df000b04 	addi	fp,sp,44
 8010494:	e13ffb15 	stw	r4,-20(fp)
 8010498:	e17ffc15 	stw	r5,-16(fp)
 801049c:	e1bffd15 	stw	r6,-12(fp)
 80104a0:	e1fffe15 	stw	r7,-8(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
 80104a4:	e03ff915 	stw	zero,-28(fp)
 80104a8:	00820074 	movhi	r2,2049
 80104ac:	10956904 	addi	r2,r2,21924
 80104b0:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
 80104b4:	1005003a 	cmpeq	r2,r2,zero
 80104b8:	1000411e 	bne	r2,zero,80105c0 <alt_alarm_start+0x138>
  {
    if (alarm)
 80104bc:	e0bffb17 	ldw	r2,-20(fp)
 80104c0:	1005003a 	cmpeq	r2,r2,zero
 80104c4:	10003b1e 	bne	r2,zero,80105b4 <alt_alarm_start+0x12c>
    {
      alarm->callback = callback;
 80104c8:	e0fffb17 	ldw	r3,-20(fp)
 80104cc:	e0bffd17 	ldw	r2,-12(fp)
 80104d0:	18800315 	stw	r2,12(r3)
      alarm->context  = context;
 80104d4:	e0fffb17 	ldw	r3,-20(fp)
 80104d8:	e0bffe17 	ldw	r2,-8(fp)
 80104dc:	18800515 	stw	r2,20(r3)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 80104e0:	0005303a 	rdctl	r2,status
 80104e4:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 80104e8:	e0fff817 	ldw	r3,-32(fp)
 80104ec:	00bfff84 	movi	r2,-2
 80104f0:	1884703a 	and	r2,r3,r2
 80104f4:	1001703a 	wrctl	status,r2
  
  return context;
 80104f8:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
 80104fc:	e0bffa15 	stw	r2,-24(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 8010500:	00820074 	movhi	r2,2049
 8010504:	10956a04 	addi	r2,r2,21928
 8010508:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
 801050c:	e0bff915 	stw	r2,-28(fp)
      
      alarm->time = nticks + current_nticks + 1; 
 8010510:	e0fffc17 	ldw	r3,-16(fp)
 8010514:	e0bff917 	ldw	r2,-28(fp)
 8010518:	1885883a 	add	r2,r3,r2
 801051c:	10c00044 	addi	r3,r2,1
 8010520:	e0bffb17 	ldw	r2,-20(fp)
 8010524:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
 8010528:	e0bffb17 	ldw	r2,-20(fp)
 801052c:	10c00217 	ldw	r3,8(r2)
 8010530:	e0bff917 	ldw	r2,-28(fp)
 8010534:	1880042e 	bgeu	r3,r2,8010548 <alt_alarm_start+0xc0>
      {
        alarm->rollover = 1;
 8010538:	e0fffb17 	ldw	r3,-20(fp)
 801053c:	00800044 	movi	r2,1
 8010540:	18800405 	stb	r2,16(r3)
 8010544:	00000206 	br	8010550 <alt_alarm_start+0xc8>
      }
      else
      {
        alarm->rollover = 0;
 8010548:	e0bffb17 	ldw	r2,-20(fp)
 801054c:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
 8010550:	e0fffb17 	ldw	r3,-20(fp)
 8010554:	00820074 	movhi	r2,2049
 8010558:	108e6404 	addi	r2,r2,14736
 801055c:	e0bff615 	stw	r2,-40(fp)
 8010560:	e0fff715 	stw	r3,-36(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 8010564:	e0fff717 	ldw	r3,-36(fp)
 8010568:	e0bff617 	ldw	r2,-40(fp)
 801056c:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
 8010570:	e0bff617 	ldw	r2,-40(fp)
 8010574:	10c00017 	ldw	r3,0(r2)
 8010578:	e0bff717 	ldw	r2,-36(fp)
 801057c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 8010580:	e0bff617 	ldw	r2,-40(fp)
 8010584:	10c00017 	ldw	r3,0(r2)
 8010588:	e0bff717 	ldw	r2,-36(fp)
 801058c:	18800115 	stw	r2,4(r3)
  list->next           = entry;
 8010590:	e0fff617 	ldw	r3,-40(fp)
 8010594:	e0bff717 	ldw	r2,-36(fp)
 8010598:	18800015 	stw	r2,0(r3)
 801059c:	e0bffa17 	ldw	r2,-24(fp)
 80105a0:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 80105a4:	e0bff517 	ldw	r2,-44(fp)
 80105a8:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
 80105ac:	e03fff15 	stw	zero,-4(fp)
 80105b0:	00000506 	br	80105c8 <alt_alarm_start+0x140>
    }
    else
    {
      return -EINVAL;
 80105b4:	00bffa84 	movi	r2,-22
 80105b8:	e0bfff15 	stw	r2,-4(fp)
 80105bc:	00000206 	br	80105c8 <alt_alarm_start+0x140>
    }
  }
  else
  {
    return -ENOTSUP;
 80105c0:	00bfde84 	movi	r2,-134
 80105c4:	e0bfff15 	stw	r2,-4(fp)
 80105c8:	e0bfff17 	ldw	r2,-4(fp)
  }
}
 80105cc:	e037883a 	mov	sp,fp
 80105d0:	df000017 	ldw	fp,0(sp)
 80105d4:	dec00104 	addi	sp,sp,4
 80105d8:	f800283a 	ret

080105dc <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 80105dc:	defffe04 	addi	sp,sp,-8
 80105e0:	df000115 	stw	fp,4(sp)
 80105e4:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
 80105e8:	e03fff15 	stw	zero,-4(fp)
 80105ec:	00000506 	br	8010604 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
 80105f0:	e0bfff17 	ldw	r2,-4(fp)
 80105f4:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
 80105f8:	e0bfff17 	ldw	r2,-4(fp)
 80105fc:	10800804 	addi	r2,r2,32
 8010600:	e0bfff15 	stw	r2,-4(fp)
 8010604:	e0bfff17 	ldw	r2,-4(fp)
 8010608:	10810030 	cmpltui	r2,r2,1024
 801060c:	103ff81e 	bne	r2,zero,80105f0 <alt_dcache_flush_all+0x14>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 8010610:	e037883a 	mov	sp,fp
 8010614:	df000017 	ldw	fp,0(sp)
 8010618:	dec00104 	addi	sp,sp,4
 801061c:	f800283a 	ret

08010620 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
 8010620:	defff904 	addi	sp,sp,-28
 8010624:	dfc00615 	stw	ra,24(sp)
 8010628:	df000515 	stw	fp,20(sp)
 801062c:	df000504 	addi	fp,sp,20
 8010630:	e13ffd15 	stw	r4,-12(fp)
 8010634:	e17ffe15 	stw	r5,-8(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
 8010638:	e0bffd17 	ldw	r2,-12(fp)
 801063c:	1005003a 	cmpeq	r2,r2,zero
 8010640:	1000041e 	bne	r2,zero,8010654 <alt_dev_llist_insert+0x34>
 8010644:	e0bffd17 	ldw	r2,-12(fp)
 8010648:	10800217 	ldw	r2,8(r2)
 801064c:	1004c03a 	cmpne	r2,r2,zero
 8010650:	1000071e 	bne	r2,zero,8010670 <alt_dev_llist_insert+0x50>
  {
    ALT_ERRNO = EINVAL;
 8010654:	80106d40 	call	80106d4 <alt_get_errno>
 8010658:	1007883a 	mov	r3,r2
 801065c:	00800584 	movi	r2,22
 8010660:	18800015 	stw	r2,0(r3)
    return -EINVAL;
 8010664:	00bffa84 	movi	r2,-22
 8010668:	e0bfff15 	stw	r2,-4(fp)
 801066c:	00001306 	br	80106bc <alt_dev_llist_insert+0x9c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
 8010670:	e0fffd17 	ldw	r3,-12(fp)
 8010674:	e0bffe17 	ldw	r2,-8(fp)
 8010678:	e0bffb15 	stw	r2,-20(fp)
 801067c:	e0fffc15 	stw	r3,-16(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 8010680:	e0fffc17 	ldw	r3,-16(fp)
 8010684:	e0bffb17 	ldw	r2,-20(fp)
 8010688:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
 801068c:	e0bffb17 	ldw	r2,-20(fp)
 8010690:	10c00017 	ldw	r3,0(r2)
 8010694:	e0bffc17 	ldw	r2,-16(fp)
 8010698:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 801069c:	e0bffb17 	ldw	r2,-20(fp)
 80106a0:	10c00017 	ldw	r3,0(r2)
 80106a4:	e0bffc17 	ldw	r2,-16(fp)
 80106a8:	18800115 	stw	r2,4(r3)
  list->next           = entry;
 80106ac:	e0fffb17 	ldw	r3,-20(fp)
 80106b0:	e0bffc17 	ldw	r2,-16(fp)
 80106b4:	18800015 	stw	r2,0(r3)

  return 0;  
 80106b8:	e03fff15 	stw	zero,-4(fp)
 80106bc:	e0bfff17 	ldw	r2,-4(fp)
}
 80106c0:	e037883a 	mov	sp,fp
 80106c4:	dfc00117 	ldw	ra,4(sp)
 80106c8:	df000017 	ldw	fp,0(sp)
 80106cc:	dec00204 	addi	sp,sp,8
 80106d0:	f800283a 	ret

080106d4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 80106d4:	defffd04 	addi	sp,sp,-12
 80106d8:	dfc00215 	stw	ra,8(sp)
 80106dc:	df000115 	stw	fp,4(sp)
 80106e0:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 80106e4:	00820074 	movhi	r2,2049
 80106e8:	108e5d04 	addi	r2,r2,14708
 80106ec:	10800017 	ldw	r2,0(r2)
 80106f0:	1005003a 	cmpeq	r2,r2,zero
 80106f4:	1000061e 	bne	r2,zero,8010710 <alt_get_errno+0x3c>
 80106f8:	00820074 	movhi	r2,2049
 80106fc:	108e5d04 	addi	r2,r2,14708
 8010700:	10800017 	ldw	r2,0(r2)
 8010704:	103ee83a 	callr	r2
 8010708:	e0bfff15 	stw	r2,-4(fp)
 801070c:	00000306 	br	801071c <alt_get_errno+0x48>
 8010710:	00820074 	movhi	r2,2049
 8010714:	10956404 	addi	r2,r2,21904
 8010718:	e0bfff15 	stw	r2,-4(fp)
 801071c:	e0bfff17 	ldw	r2,-4(fp)
}
 8010720:	e037883a 	mov	sp,fp
 8010724:	dfc00117 	ldw	ra,4(sp)
 8010728:	df000017 	ldw	fp,0(sp)
 801072c:	dec00204 	addi	sp,sp,8
 8010730:	f800283a 	ret

08010734 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
 8010734:	defffd04 	addi	sp,sp,-12
 8010738:	dfc00215 	stw	ra,8(sp)
 801073c:	df000115 	stw	fp,4(sp)
 8010740:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 8010744:	00bfff04 	movi	r2,-4
 8010748:	00c20074 	movhi	r3,2049
 801074c:	18c60c04 	addi	r3,r3,6192
 8010750:	1885883a 	add	r2,r3,r2
 8010754:	e0bfff15 	stw	r2,-4(fp)
 8010758:	00000606 	br	8010774 <_do_ctors+0x40>
        (*ctor) (); 
 801075c:	e0bfff17 	ldw	r2,-4(fp)
 8010760:	10800017 	ldw	r2,0(r2)
 8010764:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 8010768:	e0bfff17 	ldw	r2,-4(fp)
 801076c:	10bfff04 	addi	r2,r2,-4
 8010770:	e0bfff15 	stw	r2,-4(fp)
 8010774:	e0ffff17 	ldw	r3,-4(fp)
 8010778:	00820074 	movhi	r2,2049
 801077c:	10860b04 	addi	r2,r2,6188
 8010780:	18bff62e 	bgeu	r3,r2,801075c <_do_ctors+0x28>
        (*ctor) (); 
}
 8010784:	e037883a 	mov	sp,fp
 8010788:	dfc00117 	ldw	ra,4(sp)
 801078c:	df000017 	ldw	fp,0(sp)
 8010790:	dec00204 	addi	sp,sp,8
 8010794:	f800283a 	ret

08010798 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
 8010798:	defffd04 	addi	sp,sp,-12
 801079c:	dfc00215 	stw	ra,8(sp)
 80107a0:	df000115 	stw	fp,4(sp)
 80107a4:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 80107a8:	00bfff04 	movi	r2,-4
 80107ac:	00c20074 	movhi	r3,2049
 80107b0:	18c60c04 	addi	r3,r3,6192
 80107b4:	1885883a 	add	r2,r3,r2
 80107b8:	e0bfff15 	stw	r2,-4(fp)
 80107bc:	00000606 	br	80107d8 <_do_dtors+0x40>
        (*dtor) (); 
 80107c0:	e0bfff17 	ldw	r2,-4(fp)
 80107c4:	10800017 	ldw	r2,0(r2)
 80107c8:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 80107cc:	e0bfff17 	ldw	r2,-4(fp)
 80107d0:	10bfff04 	addi	r2,r2,-4
 80107d4:	e0bfff15 	stw	r2,-4(fp)
 80107d8:	e0ffff17 	ldw	r3,-4(fp)
 80107dc:	00820074 	movhi	r2,2049
 80107e0:	10860c04 	addi	r2,r2,6192
 80107e4:	18bff62e 	bgeu	r3,r2,80107c0 <_do_dtors+0x28>
        (*dtor) (); 
}
 80107e8:	e037883a 	mov	sp,fp
 80107ec:	dfc00117 	ldw	ra,4(sp)
 80107f0:	df000017 	ldw	fp,0(sp)
 80107f4:	dec00204 	addi	sp,sp,8
 80107f8:	f800283a 	ret

080107fc <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 80107fc:	defff904 	addi	sp,sp,-28
 8010800:	dfc00615 	stw	ra,24(sp)
 8010804:	df000515 	stw	fp,20(sp)
 8010808:	df000504 	addi	fp,sp,20
 801080c:	e13ffd15 	stw	r4,-12(fp)
 8010810:	e17ffe15 	stw	r5,-8(fp)
  alt_dev* next = (alt_dev*) llist->next;
 8010814:	e0bffe17 	ldw	r2,-8(fp)
 8010818:	10800017 	ldw	r2,0(r2)
 801081c:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
 8010820:	e13ffd17 	ldw	r4,-12(fp)
 8010824:	8004e480 	call	8004e48 <strlen>
 8010828:	10800044 	addi	r2,r2,1
 801082c:	e0bffb15 	stw	r2,-20(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 8010830:	00000d06 	br	8010868 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 8010834:	e0bffc17 	ldw	r2,-16(fp)
 8010838:	11000217 	ldw	r4,8(r2)
 801083c:	e1bffb17 	ldw	r6,-20(fp)
 8010840:	e17ffd17 	ldw	r5,-12(fp)
 8010844:	80114040 	call	8011404 <memcmp>
 8010848:	1004c03a 	cmpne	r2,r2,zero
 801084c:	1000031e 	bne	r2,zero,801085c <alt_find_dev+0x60>
    {
      /* match found */

      return next;
 8010850:	e0bffc17 	ldw	r2,-16(fp)
 8010854:	e0bfff15 	stw	r2,-4(fp)
 8010858:	00000706 	br	8010878 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
 801085c:	e0bffc17 	ldw	r2,-16(fp)
 8010860:	10800017 	ldw	r2,0(r2)
 8010864:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 8010868:	e0fffe17 	ldw	r3,-8(fp)
 801086c:	e0bffc17 	ldw	r2,-16(fp)
 8010870:	10fff01e 	bne	r2,r3,8010834 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
 8010874:	e03fff15 	stw	zero,-4(fp)
 8010878:	e0bfff17 	ldw	r2,-4(fp)
}
 801087c:	e037883a 	mov	sp,fp
 8010880:	dfc00117 	ldw	ra,4(sp)
 8010884:	df000017 	ldw	fp,0(sp)
 8010888:	dec00204 	addi	sp,sp,8
 801088c:	f800283a 	ret

08010890 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 8010890:	defffe04 	addi	sp,sp,-8
 8010894:	dfc00115 	stw	ra,4(sp)
 8010898:	df000015 	stw	fp,0(sp)
 801089c:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
 80108a0:	0009883a 	mov	r4,zero
 80108a4:	01440004 	movi	r5,4096
 80108a8:	80113280 	call	8011328 <alt_icache_flush>
#endif
}
 80108ac:	e037883a 	mov	sp,fp
 80108b0:	dfc00117 	ldw	ra,4(sp)
 80108b4:	df000017 	ldw	fp,0(sp)
 80108b8:	dec00204 	addi	sp,sp,8
 80108bc:	f800283a 	ret

080108c0 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 80108c0:	defff904 	addi	sp,sp,-28
 80108c4:	dfc00615 	stw	ra,24(sp)
 80108c8:	df000515 	stw	fp,20(sp)
 80108cc:	df000504 	addi	fp,sp,20
 80108d0:	e13ffc15 	stw	r4,-16(fp)
 80108d4:	e17ffd15 	stw	r5,-12(fp)
 80108d8:	e1bffe15 	stw	r6,-8(fp)
 80108dc:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
 80108e0:	e0800217 	ldw	r2,8(fp)
 80108e4:	d8800015 	stw	r2,0(sp)
 80108e8:	e13ffc17 	ldw	r4,-16(fp)
 80108ec:	e17ffd17 	ldw	r5,-12(fp)
 80108f0:	e1bffe17 	ldw	r6,-8(fp)
 80108f4:	e1ffff17 	ldw	r7,-4(fp)
 80108f8:	8010a940 	call	8010a94 <alt_iic_isr_register>
}  
 80108fc:	e037883a 	mov	sp,fp
 8010900:	dfc00117 	ldw	ra,4(sp)
 8010904:	df000017 	ldw	fp,0(sp)
 8010908:	dec00204 	addi	sp,sp,8
 801090c:	f800283a 	ret

08010910 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
 8010910:	defff904 	addi	sp,sp,-28
 8010914:	df000615 	stw	fp,24(sp)
 8010918:	df000604 	addi	fp,sp,24
 801091c:	e13ffe15 	stw	r4,-8(fp)
 8010920:	e17fff15 	stw	r5,-4(fp)
 8010924:	e0bfff17 	ldw	r2,-4(fp)
 8010928:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 801092c:	0005303a 	rdctl	r2,status
 8010930:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8010934:	e0fffb17 	ldw	r3,-20(fp)
 8010938:	00bfff84 	movi	r2,-2
 801093c:	1884703a 	and	r2,r3,r2
 8010940:	1001703a 	wrctl	status,r2
  
  return context;
 8010944:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 8010948:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active |= (1 << id);
 801094c:	e0fffc17 	ldw	r3,-16(fp)
 8010950:	00800044 	movi	r2,1
 8010954:	10c4983a 	sll	r2,r2,r3
 8010958:	1007883a 	mov	r3,r2
 801095c:	00820074 	movhi	r2,2049
 8010960:	10956804 	addi	r2,r2,21920
 8010964:	10800017 	ldw	r2,0(r2)
 8010968:	1886b03a 	or	r3,r3,r2
 801096c:	00820074 	movhi	r2,2049
 8010970:	10956804 	addi	r2,r2,21920
 8010974:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 8010978:	00820074 	movhi	r2,2049
 801097c:	10956804 	addi	r2,r2,21920
 8010980:	10800017 	ldw	r2,0(r2)
 8010984:	100170fa 	wrctl	ienable,r2
 8010988:	e0bffd17 	ldw	r2,-12(fp)
 801098c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8010990:	e0bffa17 	ldw	r2,-24(fp)
 8010994:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 8010998:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
 801099c:	e037883a 	mov	sp,fp
 80109a0:	df000017 	ldw	fp,0(sp)
 80109a4:	dec00104 	addi	sp,sp,4
 80109a8:	f800283a 	ret

080109ac <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
 80109ac:	defff904 	addi	sp,sp,-28
 80109b0:	df000615 	stw	fp,24(sp)
 80109b4:	df000604 	addi	fp,sp,24
 80109b8:	e13ffe15 	stw	r4,-8(fp)
 80109bc:	e17fff15 	stw	r5,-4(fp)
 80109c0:	e0bfff17 	ldw	r2,-4(fp)
 80109c4:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 80109c8:	0005303a 	rdctl	r2,status
 80109cc:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 80109d0:	e0fffb17 	ldw	r3,-20(fp)
 80109d4:	00bfff84 	movi	r2,-2
 80109d8:	1884703a 	and	r2,r3,r2
 80109dc:	1001703a 	wrctl	status,r2
  
  return context;
 80109e0:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 80109e4:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active &= ~(1 << id);
 80109e8:	e0fffc17 	ldw	r3,-16(fp)
 80109ec:	00800044 	movi	r2,1
 80109f0:	10c4983a 	sll	r2,r2,r3
 80109f4:	0084303a 	nor	r2,zero,r2
 80109f8:	1007883a 	mov	r3,r2
 80109fc:	00820074 	movhi	r2,2049
 8010a00:	10956804 	addi	r2,r2,21920
 8010a04:	10800017 	ldw	r2,0(r2)
 8010a08:	1886703a 	and	r3,r3,r2
 8010a0c:	00820074 	movhi	r2,2049
 8010a10:	10956804 	addi	r2,r2,21920
 8010a14:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 8010a18:	00820074 	movhi	r2,2049
 8010a1c:	10956804 	addi	r2,r2,21920
 8010a20:	10800017 	ldw	r2,0(r2)
 8010a24:	100170fa 	wrctl	ienable,r2
 8010a28:	e0bffd17 	ldw	r2,-12(fp)
 8010a2c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8010a30:	e0bffa17 	ldw	r2,-24(fp)
 8010a34:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 8010a38:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
 8010a3c:	e037883a 	mov	sp,fp
 8010a40:	df000017 	ldw	fp,0(sp)
 8010a44:	dec00104 	addi	sp,sp,4
 8010a48:	f800283a 	ret

08010a4c <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
 8010a4c:	defffc04 	addi	sp,sp,-16
 8010a50:	df000315 	stw	fp,12(sp)
 8010a54:	df000304 	addi	fp,sp,12
 8010a58:	e13ffe15 	stw	r4,-8(fp)
 8010a5c:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
 8010a60:	000530fa 	rdctl	r2,ienable
 8010a64:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
 8010a68:	e0ffff17 	ldw	r3,-4(fp)
 8010a6c:	00800044 	movi	r2,1
 8010a70:	10c4983a 	sll	r2,r2,r3
 8010a74:	1007883a 	mov	r3,r2
 8010a78:	e0bffd17 	ldw	r2,-12(fp)
 8010a7c:	1884703a 	and	r2,r3,r2
 8010a80:	1004c03a 	cmpne	r2,r2,zero
}
 8010a84:	e037883a 	mov	sp,fp
 8010a88:	df000017 	ldw	fp,0(sp)
 8010a8c:	dec00104 	addi	sp,sp,4
 8010a90:	f800283a 	ret

08010a94 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 8010a94:	defff404 	addi	sp,sp,-48
 8010a98:	dfc00b15 	stw	ra,44(sp)
 8010a9c:	df000a15 	stw	fp,40(sp)
 8010aa0:	df000a04 	addi	fp,sp,40
 8010aa4:	e13ffb15 	stw	r4,-20(fp)
 8010aa8:	e17ffc15 	stw	r5,-16(fp)
 8010aac:	e1bffd15 	stw	r6,-12(fp)
 8010ab0:	e1fffe15 	stw	r7,-8(fp)
  int rc = -EINVAL;  
 8010ab4:	00bffa84 	movi	r2,-22
 8010ab8:	e0bffa15 	stw	r2,-24(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
 8010abc:	e0bffc17 	ldw	r2,-16(fp)
 8010ac0:	e0bff915 	stw	r2,-28(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 8010ac4:	e0bff917 	ldw	r2,-28(fp)
 8010ac8:	10800808 	cmpgei	r2,r2,32
 8010acc:	1000291e 	bne	r2,zero,8010b74 <alt_iic_isr_register+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8010ad0:	0005303a 	rdctl	r2,status
 8010ad4:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8010ad8:	e0fff717 	ldw	r3,-36(fp)
 8010adc:	00bfff84 	movi	r2,-2
 8010ae0:	1884703a 	and	r2,r3,r2
 8010ae4:	1001703a 	wrctl	status,r2
  
  return context;
 8010ae8:	e0bff717 	ldw	r2,-36(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
 8010aec:	e0bff815 	stw	r2,-32(fp)

    alt_irq[id].handler = isr;
 8010af0:	e0bff917 	ldw	r2,-28(fp)
 8010af4:	00c20074 	movhi	r3,2049
 8010af8:	18d57504 	addi	r3,r3,21972
 8010afc:	100490fa 	slli	r2,r2,3
 8010b00:	10c7883a 	add	r3,r2,r3
 8010b04:	e0bffd17 	ldw	r2,-12(fp)
 8010b08:	18800015 	stw	r2,0(r3)
    alt_irq[id].context = isr_context;
 8010b0c:	e0bff917 	ldw	r2,-28(fp)
 8010b10:	00c20074 	movhi	r3,2049
 8010b14:	18d57504 	addi	r3,r3,21972
 8010b18:	100490fa 	slli	r2,r2,3
 8010b1c:	10c5883a 	add	r2,r2,r3
 8010b20:	10c00104 	addi	r3,r2,4
 8010b24:	e0bffe17 	ldw	r2,-8(fp)
 8010b28:	18800015 	stw	r2,0(r3)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
 8010b2c:	e0bffd17 	ldw	r2,-12(fp)
 8010b30:	1005003a 	cmpeq	r2,r2,zero
 8010b34:	1000051e 	bne	r2,zero,8010b4c <alt_iic_isr_register+0xb8>
 8010b38:	e17ff917 	ldw	r5,-28(fp)
 8010b3c:	e13ffb17 	ldw	r4,-20(fp)
 8010b40:	80109100 	call	8010910 <alt_ic_irq_enable>
 8010b44:	e0bfff15 	stw	r2,-4(fp)
 8010b48:	00000406 	br	8010b5c <alt_iic_isr_register+0xc8>
 8010b4c:	e17ff917 	ldw	r5,-28(fp)
 8010b50:	e13ffb17 	ldw	r4,-20(fp)
 8010b54:	80109ac0 	call	80109ac <alt_ic_irq_disable>
 8010b58:	e0bfff15 	stw	r2,-4(fp)
 8010b5c:	e0bfff17 	ldw	r2,-4(fp)
 8010b60:	e0bffa15 	stw	r2,-24(fp)
 8010b64:	e0bff817 	ldw	r2,-32(fp)
 8010b68:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8010b6c:	e0bff617 	ldw	r2,-40(fp)
 8010b70:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
 8010b74:	e0bffa17 	ldw	r2,-24(fp)
}
 8010b78:	e037883a 	mov	sp,fp
 8010b7c:	dfc00117 	ldw	ra,4(sp)
 8010b80:	df000017 	ldw	fp,0(sp)
 8010b84:	dec00204 	addi	sp,sp,8
 8010b88:	f800283a 	ret

08010b8c <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
 8010b8c:	defff904 	addi	sp,sp,-28
 8010b90:	dfc00615 	stw	ra,24(sp)
 8010b94:	df000515 	stw	fp,20(sp)
 8010b98:	df000504 	addi	fp,sp,20
 8010b9c:	e13ffc15 	stw	r4,-16(fp)
 8010ba0:	e17ffd15 	stw	r5,-12(fp)
 8010ba4:	e1bffe15 	stw	r6,-8(fp)
 8010ba8:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
 8010bac:	e13ffd17 	ldw	r4,-12(fp)
 8010bb0:	e17ffe17 	ldw	r5,-8(fp)
 8010bb4:	e1bfff17 	ldw	r6,-4(fp)
 8010bb8:	8010da40 	call	8010da4 <open>
 8010bbc:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
 8010bc0:	e0bffb17 	ldw	r2,-20(fp)
 8010bc4:	1004803a 	cmplt	r2,r2,zero
 8010bc8:	10001c1e 	bne	r2,zero,8010c3c <alt_open_fd+0xb0>
  {
    fd->dev      = alt_fd_list[old].dev;
 8010bcc:	e0bffb17 	ldw	r2,-20(fp)
 8010bd0:	00c20074 	movhi	r3,2049
 8010bd4:	18c98504 	addi	r3,r3,9748
 8010bd8:	10800324 	muli	r2,r2,12
 8010bdc:	10c5883a 	add	r2,r2,r3
 8010be0:	10c00017 	ldw	r3,0(r2)
 8010be4:	e0bffc17 	ldw	r2,-16(fp)
 8010be8:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
 8010bec:	e0bffb17 	ldw	r2,-20(fp)
 8010bf0:	00c20074 	movhi	r3,2049
 8010bf4:	18c98504 	addi	r3,r3,9748
 8010bf8:	10800324 	muli	r2,r2,12
 8010bfc:	10c5883a 	add	r2,r2,r3
 8010c00:	10800104 	addi	r2,r2,4
 8010c04:	10c00017 	ldw	r3,0(r2)
 8010c08:	e0bffc17 	ldw	r2,-16(fp)
 8010c0c:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 8010c10:	e0bffb17 	ldw	r2,-20(fp)
 8010c14:	00c20074 	movhi	r3,2049
 8010c18:	18c98504 	addi	r3,r3,9748
 8010c1c:	10800324 	muli	r2,r2,12
 8010c20:	10c5883a 	add	r2,r2,r3
 8010c24:	10800204 	addi	r2,r2,8
 8010c28:	10c00017 	ldw	r3,0(r2)
 8010c2c:	e0bffc17 	ldw	r2,-16(fp)
 8010c30:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
 8010c34:	e13ffb17 	ldw	r4,-20(fp)
 8010c38:	800d6c40 	call	800d6c4 <alt_release_fd>
  }
} 
 8010c3c:	e037883a 	mov	sp,fp
 8010c40:	dfc00117 	ldw	ra,4(sp)
 8010c44:	df000017 	ldw	fp,0(sp)
 8010c48:	dec00204 	addi	sp,sp,8
 8010c4c:	f800283a 	ret

08010c50 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 8010c50:	defffb04 	addi	sp,sp,-20
 8010c54:	dfc00415 	stw	ra,16(sp)
 8010c58:	df000315 	stw	fp,12(sp)
 8010c5c:	df000304 	addi	fp,sp,12
 8010c60:	e13ffd15 	stw	r4,-12(fp)
 8010c64:	e17ffe15 	stw	r5,-8(fp)
 8010c68:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 8010c6c:	01020074 	movhi	r4,2049
 8010c70:	21098804 	addi	r4,r4,9760
 8010c74:	e17ffd17 	ldw	r5,-12(fp)
 8010c78:	01800044 	movi	r6,1
 8010c7c:	01c07fc4 	movi	r7,511
 8010c80:	8010b8c0 	call	8010b8c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 8010c84:	01020074 	movhi	r4,2049
 8010c88:	21098504 	addi	r4,r4,9748
 8010c8c:	e17ffe17 	ldw	r5,-8(fp)
 8010c90:	000d883a 	mov	r6,zero
 8010c94:	01c07fc4 	movi	r7,511
 8010c98:	8010b8c0 	call	8010b8c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 8010c9c:	01020074 	movhi	r4,2049
 8010ca0:	21098b04 	addi	r4,r4,9772
 8010ca4:	e17fff17 	ldw	r5,-4(fp)
 8010ca8:	01800044 	movi	r6,1
 8010cac:	01c07fc4 	movi	r7,511
 8010cb0:	8010b8c0 	call	8010b8c <alt_open_fd>
}  
 8010cb4:	e037883a 	mov	sp,fp
 8010cb8:	dfc00117 	ldw	ra,4(sp)
 8010cbc:	df000017 	ldw	fp,0(sp)
 8010cc0:	dec00204 	addi	sp,sp,8
 8010cc4:	f800283a 	ret

08010cc8 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
 8010cc8:	defffc04 	addi	sp,sp,-16
 8010ccc:	df000315 	stw	fp,12(sp)
 8010cd0:	df000304 	addi	fp,sp,12
 8010cd4:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 8010cd8:	e0bffe17 	ldw	r2,-8(fp)
 8010cdc:	10800217 	ldw	r2,8(r2)
 8010ce0:	10d00034 	orhi	r3,r2,16384
 8010ce4:	e0bffe17 	ldw	r2,-8(fp)
 8010ce8:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 8010cec:	e03ffd15 	stw	zero,-12(fp)
 8010cf0:	00002006 	br	8010d74 <alt_file_locked+0xac>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 8010cf4:	e0bffd17 	ldw	r2,-12(fp)
 8010cf8:	00c20074 	movhi	r3,2049
 8010cfc:	18c98504 	addi	r3,r3,9748
 8010d00:	10800324 	muli	r2,r2,12
 8010d04:	10c5883a 	add	r2,r2,r3
 8010d08:	10c00017 	ldw	r3,0(r2)
 8010d0c:	e0bffe17 	ldw	r2,-8(fp)
 8010d10:	10800017 	ldw	r2,0(r2)
 8010d14:	1880141e 	bne	r3,r2,8010d68 <alt_file_locked+0xa0>
 8010d18:	e0bffd17 	ldw	r2,-12(fp)
 8010d1c:	00c20074 	movhi	r3,2049
 8010d20:	18c98504 	addi	r3,r3,9748
 8010d24:	10800324 	muli	r2,r2,12
 8010d28:	10c5883a 	add	r2,r2,r3
 8010d2c:	10800204 	addi	r2,r2,8
 8010d30:	10800017 	ldw	r2,0(r2)
 8010d34:	1004403a 	cmpge	r2,r2,zero
 8010d38:	10000b1e 	bne	r2,zero,8010d68 <alt_file_locked+0xa0>
 8010d3c:	e0bffd17 	ldw	r2,-12(fp)
 8010d40:	10800324 	muli	r2,r2,12
 8010d44:	1007883a 	mov	r3,r2
 8010d48:	00820074 	movhi	r2,2049
 8010d4c:	10898504 	addi	r2,r2,9748
 8010d50:	1887883a 	add	r3,r3,r2
 8010d54:	e0bffe17 	ldw	r2,-8(fp)
 8010d58:	18800326 	beq	r3,r2,8010d68 <alt_file_locked+0xa0>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
 8010d5c:	00bffcc4 	movi	r2,-13
 8010d60:	e0bfff15 	stw	r2,-4(fp)
 8010d64:	00000a06 	br	8010d90 <alt_file_locked+0xc8>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 8010d68:	e0bffd17 	ldw	r2,-12(fp)
 8010d6c:	10800044 	addi	r2,r2,1
 8010d70:	e0bffd15 	stw	r2,-12(fp)
 8010d74:	00820074 	movhi	r2,2049
 8010d78:	108e5c04 	addi	r2,r2,14704
 8010d7c:	10800017 	ldw	r2,0(r2)
 8010d80:	1007883a 	mov	r3,r2
 8010d84:	e0bffd17 	ldw	r2,-12(fp)
 8010d88:	18bfda2e 	bgeu	r3,r2,8010cf4 <alt_file_locked+0x2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
 8010d8c:	e03fff15 	stw	zero,-4(fp)
 8010d90:	e0bfff17 	ldw	r2,-4(fp)
}
 8010d94:	e037883a 	mov	sp,fp
 8010d98:	df000017 	ldw	fp,0(sp)
 8010d9c:	dec00104 	addi	sp,sp,4
 8010da0:	f800283a 	ret

08010da4 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 8010da4:	defff404 	addi	sp,sp,-48
 8010da8:	dfc00b15 	stw	ra,44(sp)
 8010dac:	df000a15 	stw	fp,40(sp)
 8010db0:	df000a04 	addi	fp,sp,40
 8010db4:	e13ffb15 	stw	r4,-20(fp)
 8010db8:	e17ffc15 	stw	r5,-16(fp)
 8010dbc:	e1bffd15 	stw	r6,-12(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
 8010dc0:	00bfffc4 	movi	r2,-1
 8010dc4:	e0bff815 	stw	r2,-32(fp)
  int status = -ENODEV;
 8010dc8:	00bffb44 	movi	r2,-19
 8010dcc:	e0bff715 	stw	r2,-36(fp)
  int isafs = 0;
 8010dd0:	e03ff615 	stw	zero,-40(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 8010dd4:	e13ffb17 	ldw	r4,-20(fp)
 8010dd8:	01420074 	movhi	r5,2049
 8010ddc:	294e5a04 	addi	r5,r5,14696
 8010de0:	80107fc0 	call	80107fc <alt_find_dev>
 8010de4:	e0bffa15 	stw	r2,-24(fp)
 8010de8:	e0bffa17 	ldw	r2,-24(fp)
 8010dec:	1004c03a 	cmpne	r2,r2,zero
 8010df0:	1000051e 	bne	r2,zero,8010e08 <open+0x64>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 8010df4:	e13ffb17 	ldw	r4,-20(fp)
 8010df8:	80111500 	call	8011150 <alt_find_file>
 8010dfc:	e0bffa15 	stw	r2,-24(fp)
    isafs = 1;
 8010e00:	00800044 	movi	r2,1
 8010e04:	e0bff615 	stw	r2,-40(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 8010e08:	e0bffa17 	ldw	r2,-24(fp)
 8010e0c:	1005003a 	cmpeq	r2,r2,zero
 8010e10:	1000301e 	bne	r2,zero,8010ed4 <open+0x130>
  {
    if ((index = alt_get_fd (dev)) < 0)
 8010e14:	e13ffa17 	ldw	r4,-24(fp)
 8010e18:	80112700 	call	8011270 <alt_get_fd>
 8010e1c:	e0bff815 	stw	r2,-32(fp)
 8010e20:	e0bff817 	ldw	r2,-32(fp)
 8010e24:	1004403a 	cmpge	r2,r2,zero
 8010e28:	1000031e 	bne	r2,zero,8010e38 <open+0x94>
    {
      status = index;
 8010e2c:	e0bff817 	ldw	r2,-32(fp)
 8010e30:	e0bff715 	stw	r2,-36(fp)
 8010e34:	00002906 	br	8010edc <open+0x138>
    }
    else
    {
      fd = &alt_fd_list[index];
 8010e38:	e0bff817 	ldw	r2,-32(fp)
 8010e3c:	10800324 	muli	r2,r2,12
 8010e40:	1007883a 	mov	r3,r2
 8010e44:	00820074 	movhi	r2,2049
 8010e48:	10898504 	addi	r2,r2,9748
 8010e4c:	1885883a 	add	r2,r3,r2
 8010e50:	e0bff915 	stw	r2,-28(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 8010e54:	e0fffc17 	ldw	r3,-16(fp)
 8010e58:	00900034 	movhi	r2,16384
 8010e5c:	10bfffc4 	addi	r2,r2,-1
 8010e60:	1886703a 	and	r3,r3,r2
 8010e64:	e0bff917 	ldw	r2,-28(fp)
 8010e68:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
 8010e6c:	e0bff617 	ldw	r2,-40(fp)
 8010e70:	1004c03a 	cmpne	r2,r2,zero
 8010e74:	1000061e 	bne	r2,zero,8010e90 <open+0xec>
 8010e78:	e13ff917 	ldw	r4,-28(fp)
 8010e7c:	8010cc80 	call	8010cc8 <alt_file_locked>
 8010e80:	e0bff715 	stw	r2,-36(fp)
 8010e84:	e0bff717 	ldw	r2,-36(fp)
 8010e88:	1004803a 	cmplt	r2,r2,zero
 8010e8c:	1000131e 	bne	r2,zero,8010edc <open+0x138>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 8010e90:	e0bffa17 	ldw	r2,-24(fp)
 8010e94:	10800317 	ldw	r2,12(r2)
 8010e98:	1005003a 	cmpeq	r2,r2,zero
 8010e9c:	1000091e 	bne	r2,zero,8010ec4 <open+0x120>
 8010ea0:	e0bffa17 	ldw	r2,-24(fp)
 8010ea4:	10800317 	ldw	r2,12(r2)
 8010ea8:	e13ff917 	ldw	r4,-28(fp)
 8010eac:	e17ffb17 	ldw	r5,-20(fp)
 8010eb0:	e1bffc17 	ldw	r6,-16(fp)
 8010eb4:	e1fffd17 	ldw	r7,-12(fp)
 8010eb8:	103ee83a 	callr	r2
 8010ebc:	e0bfff15 	stw	r2,-4(fp)
 8010ec0:	00000106 	br	8010ec8 <open+0x124>
 8010ec4:	e03fff15 	stw	zero,-4(fp)
 8010ec8:	e0bfff17 	ldw	r2,-4(fp)
 8010ecc:	e0bff715 	stw	r2,-36(fp)
 8010ed0:	00000206 	br	8010edc <open+0x138>
      }
    }
  }
  else
  {
    status = -ENODEV;
 8010ed4:	00bffb44 	movi	r2,-19
 8010ed8:	e0bff715 	stw	r2,-36(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 8010edc:	e0bff717 	ldw	r2,-36(fp)
 8010ee0:	1004403a 	cmpge	r2,r2,zero
 8010ee4:	1000091e 	bne	r2,zero,8010f0c <open+0x168>
  {
    alt_release_fd (index);  
 8010ee8:	e13ff817 	ldw	r4,-32(fp)
 8010eec:	800d6c40 	call	800d6c4 <alt_release_fd>
    ALT_ERRNO = -status;
 8010ef0:	8010f2c0 	call	8010f2c <alt_get_errno>
 8010ef4:	e0fff717 	ldw	r3,-36(fp)
 8010ef8:	00c7c83a 	sub	r3,zero,r3
 8010efc:	10c00015 	stw	r3,0(r2)
    return -1;
 8010f00:	00bfffc4 	movi	r2,-1
 8010f04:	e0bffe15 	stw	r2,-8(fp)
 8010f08:	00000206 	br	8010f14 <open+0x170>
  }
  
  /* return the reference upon success */

  return index;
 8010f0c:	e0bff817 	ldw	r2,-32(fp)
 8010f10:	e0bffe15 	stw	r2,-8(fp)
 8010f14:	e0bffe17 	ldw	r2,-8(fp)
}
 8010f18:	e037883a 	mov	sp,fp
 8010f1c:	dfc00117 	ldw	ra,4(sp)
 8010f20:	df000017 	ldw	fp,0(sp)
 8010f24:	dec00204 	addi	sp,sp,8
 8010f28:	f800283a 	ret

08010f2c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 8010f2c:	defffd04 	addi	sp,sp,-12
 8010f30:	dfc00215 	stw	ra,8(sp)
 8010f34:	df000115 	stw	fp,4(sp)
 8010f38:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 8010f3c:	00820074 	movhi	r2,2049
 8010f40:	108e5d04 	addi	r2,r2,14708
 8010f44:	10800017 	ldw	r2,0(r2)
 8010f48:	1005003a 	cmpeq	r2,r2,zero
 8010f4c:	1000061e 	bne	r2,zero,8010f68 <alt_get_errno+0x3c>
 8010f50:	00820074 	movhi	r2,2049
 8010f54:	108e5d04 	addi	r2,r2,14708
 8010f58:	10800017 	ldw	r2,0(r2)
 8010f5c:	103ee83a 	callr	r2
 8010f60:	e0bfff15 	stw	r2,-4(fp)
 8010f64:	00000306 	br	8010f74 <alt_get_errno+0x48>
 8010f68:	00820074 	movhi	r2,2049
 8010f6c:	10956404 	addi	r2,r2,21904
 8010f70:	e0bfff15 	stw	r2,-4(fp)
 8010f74:	e0bfff17 	ldw	r2,-4(fp)
}
 8010f78:	e037883a 	mov	sp,fp
 8010f7c:	dfc00117 	ldw	ra,4(sp)
 8010f80:	df000017 	ldw	fp,0(sp)
 8010f84:	dec00204 	addi	sp,sp,8
 8010f88:	f800283a 	ret

08010f8c <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
 8010f8c:	defffa04 	addi	sp,sp,-24
 8010f90:	df000515 	stw	fp,20(sp)
 8010f94:	df000504 	addi	fp,sp,20
 8010f98:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8010f9c:	0005303a 	rdctl	r2,status
 8010fa0:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8010fa4:	e0fffd17 	ldw	r3,-12(fp)
 8010fa8:	00bfff84 	movi	r2,-2
 8010fac:	1884703a 	and	r2,r3,r2
 8010fb0:	1001703a 	wrctl	status,r2
  
  return context;
 8010fb4:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
 8010fb8:	e0bffe15 	stw	r2,-8(fp)
  alt_llist_remove (&alarm->llist);
 8010fbc:	e0bfff17 	ldw	r2,-4(fp)
 8010fc0:	e0bffc15 	stw	r2,-16(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 8010fc4:	e0bffc17 	ldw	r2,-16(fp)
 8010fc8:	10c00017 	ldw	r3,0(r2)
 8010fcc:	e0bffc17 	ldw	r2,-16(fp)
 8010fd0:	10800117 	ldw	r2,4(r2)
 8010fd4:	18800115 	stw	r2,4(r3)
  entry->previous->next = entry->next;
 8010fd8:	e0bffc17 	ldw	r2,-16(fp)
 8010fdc:	10c00117 	ldw	r3,4(r2)
 8010fe0:	e0bffc17 	ldw	r2,-16(fp)
 8010fe4:	10800017 	ldw	r2,0(r2)
 8010fe8:	18800015 	stw	r2,0(r3)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 8010fec:	e0fffc17 	ldw	r3,-16(fp)
 8010ff0:	e0bffc17 	ldw	r2,-16(fp)
 8010ff4:	18800115 	stw	r2,4(r3)
  entry->next     = entry;
 8010ff8:	e0fffc17 	ldw	r3,-16(fp)
 8010ffc:	e0bffc17 	ldw	r2,-16(fp)
 8011000:	18800015 	stw	r2,0(r3)
 8011004:	e0bffe17 	ldw	r2,-8(fp)
 8011008:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 801100c:	e0bffb17 	ldw	r2,-20(fp)
 8011010:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
 8011014:	e037883a 	mov	sp,fp
 8011018:	df000017 	ldw	fp,0(sp)
 801101c:	dec00104 	addi	sp,sp,4
 8011020:	f800283a 	ret

08011024 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 8011024:	defffb04 	addi	sp,sp,-20
 8011028:	dfc00415 	stw	ra,16(sp)
 801102c:	df000315 	stw	fp,12(sp)
 8011030:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 8011034:	d0a01617 	ldw	r2,-32680(gp)
 8011038:	e0bffe15 	stw	r2,-8(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 801103c:	d0a71c17 	ldw	r2,-25488(gp)
 8011040:	10800044 	addi	r2,r2,1
 8011044:	d0a71c15 	stw	r2,-25488(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 8011048:	00003106 	br	8011110 <alt_tick+0xec>
  {
    next = (alt_alarm*) alarm->llist.next;
 801104c:	e0bffe17 	ldw	r2,-8(fp)
 8011050:	10800017 	ldw	r2,0(r2)
 8011054:	e0bfff15 	stw	r2,-4(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 8011058:	e0bffe17 	ldw	r2,-8(fp)
 801105c:	10800403 	ldbu	r2,16(r2)
 8011060:	10803fcc 	andi	r2,r2,255
 8011064:	1005003a 	cmpeq	r2,r2,zero
 8011068:	1000051e 	bne	r2,zero,8011080 <alt_tick+0x5c>
 801106c:	d0a71c17 	ldw	r2,-25488(gp)
 8011070:	1004c03a 	cmpne	r2,r2,zero
 8011074:	1000021e 	bne	r2,zero,8011080 <alt_tick+0x5c>
    {
      alarm->rollover = 0;
 8011078:	e0bffe17 	ldw	r2,-8(fp)
 801107c:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 8011080:	e0bffe17 	ldw	r2,-8(fp)
 8011084:	10c00217 	ldw	r3,8(r2)
 8011088:	d0a71c17 	ldw	r2,-25488(gp)
 801108c:	10c01e36 	bltu	r2,r3,8011108 <alt_tick+0xe4>
 8011090:	e0bffe17 	ldw	r2,-8(fp)
 8011094:	10800403 	ldbu	r2,16(r2)
 8011098:	10803fcc 	andi	r2,r2,255
 801109c:	1004c03a 	cmpne	r2,r2,zero
 80110a0:	1000191e 	bne	r2,zero,8011108 <alt_tick+0xe4>
    {
      next_callback = alarm->callback (alarm->context);
 80110a4:	e0bffe17 	ldw	r2,-8(fp)
 80110a8:	10c00317 	ldw	r3,12(r2)
 80110ac:	e0bffe17 	ldw	r2,-8(fp)
 80110b0:	11000517 	ldw	r4,20(r2)
 80110b4:	183ee83a 	callr	r3
 80110b8:	e0bffd15 	stw	r2,-12(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 80110bc:	e0bffd17 	ldw	r2,-12(fp)
 80110c0:	1004c03a 	cmpne	r2,r2,zero
 80110c4:	1000031e 	bne	r2,zero,80110d4 <alt_tick+0xb0>
      {
        alt_alarm_stop (alarm);
 80110c8:	e13ffe17 	ldw	r4,-8(fp)
 80110cc:	8010f8c0 	call	8010f8c <alt_alarm_stop>
 80110d0:	00000d06 	br	8011108 <alt_tick+0xe4>
      }
      else
      {
        alarm->time += next_callback;
 80110d4:	e0bffe17 	ldw	r2,-8(fp)
 80110d8:	10c00217 	ldw	r3,8(r2)
 80110dc:	e0bffd17 	ldw	r2,-12(fp)
 80110e0:	1887883a 	add	r3,r3,r2
 80110e4:	e0bffe17 	ldw	r2,-8(fp)
 80110e8:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 80110ec:	e0bffe17 	ldw	r2,-8(fp)
 80110f0:	10c00217 	ldw	r3,8(r2)
 80110f4:	d0a71c17 	ldw	r2,-25488(gp)
 80110f8:	1880032e 	bgeu	r3,r2,8011108 <alt_tick+0xe4>
        {
          alarm->rollover = 1;
 80110fc:	e0fffe17 	ldw	r3,-8(fp)
 8011100:	00800044 	movi	r2,1
 8011104:	18800405 	stb	r2,16(r3)
        }
      }
    }
    alarm = next;
 8011108:	e0bfff17 	ldw	r2,-4(fp)
 801110c:	e0bffe15 	stw	r2,-8(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 8011110:	d0e01604 	addi	r3,gp,-32680
 8011114:	e0bffe17 	ldw	r2,-8(fp)
 8011118:	10ffcc1e 	bne	r2,r3,801104c <alt_tick+0x28>
  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
}
 801111c:	e037883a 	mov	sp,fp
 8011120:	dfc00117 	ldw	ra,4(sp)
 8011124:	df000017 	ldw	fp,0(sp)
 8011128:	dec00204 	addi	sp,sp,8
 801112c:	f800283a 	ret

08011130 <altera_nios2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_irq_init(void) 
{
 8011130:	deffff04 	addi	sp,sp,-4
 8011134:	df000015 	stw	fp,0(sp)
 8011138:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 801113c:	000170fa 	wrctl	ienable,zero
}
 8011140:	e037883a 	mov	sp,fp
 8011144:	df000017 	ldw	fp,0(sp)
 8011148:	dec00104 	addi	sp,sp,4
 801114c:	f800283a 	ret

08011150 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 8011150:	defffa04 	addi	sp,sp,-24
 8011154:	dfc00515 	stw	ra,20(sp)
 8011158:	df000415 	stw	fp,16(sp)
 801115c:	df000404 	addi	fp,sp,16
 8011160:	e13ffe15 	stw	r4,-8(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 8011164:	00820074 	movhi	r2,2049
 8011168:	108e5804 	addi	r2,r2,14688
 801116c:	10800017 	ldw	r2,0(r2)
 8011170:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 8011174:	00003306 	br	8011244 <alt_find_file+0xf4>
  {
    len = strlen(next->name);
 8011178:	e0bffd17 	ldw	r2,-12(fp)
 801117c:	11000217 	ldw	r4,8(r2)
 8011180:	8004e480 	call	8004e48 <strlen>
 8011184:	e0bffc15 	stw	r2,-16(fp)
    
    if (next->name[len-1] == '/')
 8011188:	e0bffd17 	ldw	r2,-12(fp)
 801118c:	10c00217 	ldw	r3,8(r2)
 8011190:	e0bffc17 	ldw	r2,-16(fp)
 8011194:	1885883a 	add	r2,r3,r2
 8011198:	10bfffc4 	addi	r2,r2,-1
 801119c:	10800003 	ldbu	r2,0(r2)
 80111a0:	10803fcc 	andi	r2,r2,255
 80111a4:	1080201c 	xori	r2,r2,128
 80111a8:	10bfe004 	addi	r2,r2,-128
 80111ac:	10800bd8 	cmpnei	r2,r2,47
 80111b0:	1000031e 	bne	r2,zero,80111c0 <alt_find_file+0x70>
    {
      len -= 1;
 80111b4:	e0bffc17 	ldw	r2,-16(fp)
 80111b8:	10bfffc4 	addi	r2,r2,-1
 80111bc:	e0bffc15 	stw	r2,-16(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 80111c0:	e0bffc17 	ldw	r2,-16(fp)
 80111c4:	1007883a 	mov	r3,r2
 80111c8:	e0bffe17 	ldw	r2,-8(fp)
 80111cc:	1885883a 	add	r2,r3,r2
 80111d0:	10800003 	ldbu	r2,0(r2)
 80111d4:	10803fcc 	andi	r2,r2,255
 80111d8:	1080201c 	xori	r2,r2,128
 80111dc:	10bfe004 	addi	r2,r2,-128
 80111e0:	10800be0 	cmpeqi	r2,r2,47
 80111e4:	10000a1e 	bne	r2,zero,8011210 <alt_find_file+0xc0>
 80111e8:	e0bffc17 	ldw	r2,-16(fp)
 80111ec:	1007883a 	mov	r3,r2
 80111f0:	e0bffe17 	ldw	r2,-8(fp)
 80111f4:	1885883a 	add	r2,r3,r2
 80111f8:	10800003 	ldbu	r2,0(r2)
 80111fc:	10803fcc 	andi	r2,r2,255
 8011200:	1080201c 	xori	r2,r2,128
 8011204:	10bfe004 	addi	r2,r2,-128
 8011208:	1004c03a 	cmpne	r2,r2,zero
 801120c:	10000a1e 	bne	r2,zero,8011238 <alt_find_file+0xe8>
 8011210:	e0bffd17 	ldw	r2,-12(fp)
 8011214:	11000217 	ldw	r4,8(r2)
 8011218:	e1bffc17 	ldw	r6,-16(fp)
 801121c:	e17ffe17 	ldw	r5,-8(fp)
 8011220:	80114040 	call	8011404 <memcmp>
 8011224:	1004c03a 	cmpne	r2,r2,zero
 8011228:	1000031e 	bne	r2,zero,8011238 <alt_find_file+0xe8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
 801122c:	e0bffd17 	ldw	r2,-12(fp)
 8011230:	e0bfff15 	stw	r2,-4(fp)
 8011234:	00000806 	br	8011258 <alt_find_file+0x108>
    }
    next = (alt_dev*) next->llist.next;
 8011238:	e0bffd17 	ldw	r2,-12(fp)
 801123c:	10800017 	ldw	r2,0(r2)
 8011240:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 8011244:	00c20074 	movhi	r3,2049
 8011248:	18ce5804 	addi	r3,r3,14688
 801124c:	e0bffd17 	ldw	r2,-12(fp)
 8011250:	10ffc91e 	bne	r2,r3,8011178 <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
 8011254:	e03fff15 	stw	zero,-4(fp)
 8011258:	e0bfff17 	ldw	r2,-4(fp)
}
 801125c:	e037883a 	mov	sp,fp
 8011260:	dfc00117 	ldw	ra,4(sp)
 8011264:	df000017 	ldw	fp,0(sp)
 8011268:	dec00204 	addi	sp,sp,8
 801126c:	f800283a 	ret

08011270 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 8011270:	defffc04 	addi	sp,sp,-16
 8011274:	df000315 	stw	fp,12(sp)
 8011278:	df000304 	addi	fp,sp,12
 801127c:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
 8011280:	00bffa04 	movi	r2,-24
 8011284:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 8011288:	e03ffe15 	stw	zero,-8(fp)
 801128c:	00001e06 	br	8011308 <alt_get_fd+0x98>
  {
    if (!alt_fd_list[i].dev)
 8011290:	e0bffe17 	ldw	r2,-8(fp)
 8011294:	00c20074 	movhi	r3,2049
 8011298:	18c98504 	addi	r3,r3,9748
 801129c:	10800324 	muli	r2,r2,12
 80112a0:	10c5883a 	add	r2,r2,r3
 80112a4:	10800017 	ldw	r2,0(r2)
 80112a8:	1004c03a 	cmpne	r2,r2,zero
 80112ac:	1000131e 	bne	r2,zero,80112fc <alt_get_fd+0x8c>
    {
      alt_fd_list[i].dev = dev;
 80112b0:	e0bffe17 	ldw	r2,-8(fp)
 80112b4:	00c20074 	movhi	r3,2049
 80112b8:	18c98504 	addi	r3,r3,9748
 80112bc:	10800324 	muli	r2,r2,12
 80112c0:	10c7883a 	add	r3,r2,r3
 80112c4:	e0bfff17 	ldw	r2,-4(fp)
 80112c8:	18800015 	stw	r2,0(r3)
      if (i > alt_max_fd)
 80112cc:	00820074 	movhi	r2,2049
 80112d0:	108e5c04 	addi	r2,r2,14704
 80112d4:	10c00017 	ldw	r3,0(r2)
 80112d8:	e0bffe17 	ldw	r2,-8(fp)
 80112dc:	1880040e 	bge	r3,r2,80112f0 <alt_get_fd+0x80>
      {
        alt_max_fd = i;
 80112e0:	00c20074 	movhi	r3,2049
 80112e4:	18ce5c04 	addi	r3,r3,14704
 80112e8:	e0bffe17 	ldw	r2,-8(fp)
 80112ec:	18800015 	stw	r2,0(r3)
      }
      rc = i;
 80112f0:	e0bffe17 	ldw	r2,-8(fp)
 80112f4:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
 80112f8:	00000606 	br	8011314 <alt_get_fd+0xa4>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 80112fc:	e0bffe17 	ldw	r2,-8(fp)
 8011300:	10800044 	addi	r2,r2,1
 8011304:	e0bffe15 	stw	r2,-8(fp)
 8011308:	e0bffe17 	ldw	r2,-8(fp)
 801130c:	10800810 	cmplti	r2,r2,32
 8011310:	103fdf1e 	bne	r2,zero,8011290 <alt_get_fd+0x20>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
 8011314:	e0bffd17 	ldw	r2,-12(fp)
}
 8011318:	e037883a 	mov	sp,fp
 801131c:	df000017 	ldw	fp,0(sp)
 8011320:	dec00104 	addi	sp,sp,4
 8011324:	f800283a 	ret

08011328 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
 8011328:	defffb04 	addi	sp,sp,-20
 801132c:	df000415 	stw	fp,16(sp)
 8011330:	df000404 	addi	fp,sp,16
 8011334:	e13ffe15 	stw	r4,-8(fp)
 8011338:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
 801133c:	e0bfff17 	ldw	r2,-4(fp)
 8011340:	10840070 	cmpltui	r2,r2,4097
 8011344:	1000021e 	bne	r2,zero,8011350 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
 8011348:	00840004 	movi	r2,4096
 801134c:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
 8011350:	e0fffe17 	ldw	r3,-8(fp)
 8011354:	e0bfff17 	ldw	r2,-4(fp)
 8011358:	1885883a 	add	r2,r3,r2
 801135c:	e0bffc15 	stw	r2,-16(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 8011360:	e0bffe17 	ldw	r2,-8(fp)
 8011364:	e0bffd15 	stw	r2,-12(fp)
 8011368:	00000506 	br	8011380 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
 801136c:	e0bffd17 	ldw	r2,-12(fp)
 8011370:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 8011374:	e0bffd17 	ldw	r2,-12(fp)
 8011378:	10800804 	addi	r2,r2,32
 801137c:	e0bffd15 	stw	r2,-12(fp)
 8011380:	e0fffd17 	ldw	r3,-12(fp)
 8011384:	e0bffc17 	ldw	r2,-16(fp)
 8011388:	18bff836 	bltu	r3,r2,801136c <alt_icache_flush+0x44>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
 801138c:	e0bffe17 	ldw	r2,-8(fp)
 8011390:	108007cc 	andi	r2,r2,31
 8011394:	1005003a 	cmpeq	r2,r2,zero
 8011398:	1000021e 	bne	r2,zero,80113a4 <alt_icache_flush+0x7c>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
 801139c:	e0bffd17 	ldw	r2,-12(fp)
 80113a0:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
 80113a4:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
 80113a8:	e037883a 	mov	sp,fp
 80113ac:	df000017 	ldw	fp,0(sp)
 80113b0:	dec00104 	addi	sp,sp,4
 80113b4:	f800283a 	ret

080113b8 <atexit>:
 80113b8:	200b883a 	mov	r5,r4
 80113bc:	000d883a 	mov	r6,zero
 80113c0:	0009883a 	mov	r4,zero
 80113c4:	000f883a 	mov	r7,zero
 80113c8:	80114781 	jmpi	8011478 <__register_exitproc>

080113cc <exit>:
 80113cc:	defffe04 	addi	sp,sp,-8
 80113d0:	000b883a 	mov	r5,zero
 80113d4:	dc000015 	stw	r16,0(sp)
 80113d8:	dfc00115 	stw	ra,4(sp)
 80113dc:	2021883a 	mov	r16,r4
 80113e0:	80115b00 	call	80115b0 <__call_exitprocs>
 80113e4:	00820074 	movhi	r2,2049
 80113e8:	108e5304 	addi	r2,r2,14668
 80113ec:	11000017 	ldw	r4,0(r2)
 80113f0:	20800f17 	ldw	r2,60(r4)
 80113f4:	10000126 	beq	r2,zero,80113fc <exit+0x30>
 80113f8:	103ee83a 	callr	r2
 80113fc:	8009883a 	mov	r4,r16
 8011400:	80117a00 	call	80117a0 <_exit>

08011404 <memcmp>:
 8011404:	00c000c4 	movi	r3,3
 8011408:	1980032e 	bgeu	r3,r6,8011418 <memcmp+0x14>
 801140c:	2144b03a 	or	r2,r4,r5
 8011410:	10c4703a 	and	r2,r2,r3
 8011414:	10000f26 	beq	r2,zero,8011454 <memcmp+0x50>
 8011418:	31ffffc4 	addi	r7,r6,-1
 801141c:	3000061e 	bne	r6,zero,8011438 <memcmp+0x34>
 8011420:	00000a06 	br	801144c <memcmp+0x48>
 8011424:	39ffffc4 	addi	r7,r7,-1
 8011428:	00bfffc4 	movi	r2,-1
 801142c:	21000044 	addi	r4,r4,1
 8011430:	29400044 	addi	r5,r5,1
 8011434:	38800526 	beq	r7,r2,801144c <memcmp+0x48>
 8011438:	20c00003 	ldbu	r3,0(r4)
 801143c:	28800003 	ldbu	r2,0(r5)
 8011440:	18bff826 	beq	r3,r2,8011424 <memcmp+0x20>
 8011444:	1885c83a 	sub	r2,r3,r2
 8011448:	f800283a 	ret
 801144c:	0005883a 	mov	r2,zero
 8011450:	f800283a 	ret
 8011454:	180f883a 	mov	r7,r3
 8011458:	20c00017 	ldw	r3,0(r4)
 801145c:	28800017 	ldw	r2,0(r5)
 8011460:	18bfed1e 	bne	r3,r2,8011418 <memcmp+0x14>
 8011464:	31bfff04 	addi	r6,r6,-4
 8011468:	21000104 	addi	r4,r4,4
 801146c:	29400104 	addi	r5,r5,4
 8011470:	39bff936 	bltu	r7,r6,8011458 <memcmp+0x54>
 8011474:	003fe806 	br	8011418 <memcmp+0x14>

08011478 <__register_exitproc>:
 8011478:	defffa04 	addi	sp,sp,-24
 801147c:	00820074 	movhi	r2,2049
 8011480:	108e5304 	addi	r2,r2,14668
 8011484:	dc000015 	stw	r16,0(sp)
 8011488:	14000017 	ldw	r16,0(r2)
 801148c:	dd000415 	stw	r20,16(sp)
 8011490:	2829883a 	mov	r20,r5
 8011494:	81405217 	ldw	r5,328(r16)
 8011498:	dcc00315 	stw	r19,12(sp)
 801149c:	dc800215 	stw	r18,8(sp)
 80114a0:	dc400115 	stw	r17,4(sp)
 80114a4:	dfc00515 	stw	ra,20(sp)
 80114a8:	2023883a 	mov	r17,r4
 80114ac:	3027883a 	mov	r19,r6
 80114b0:	3825883a 	mov	r18,r7
 80114b4:	28002526 	beq	r5,zero,801154c <__register_exitproc+0xd4>
 80114b8:	29000117 	ldw	r4,4(r5)
 80114bc:	008007c4 	movi	r2,31
 80114c0:	11002716 	blt	r2,r4,8011560 <__register_exitproc+0xe8>
 80114c4:	8800101e 	bne	r17,zero,8011508 <__register_exitproc+0x90>
 80114c8:	2105883a 	add	r2,r4,r4
 80114cc:	1085883a 	add	r2,r2,r2
 80114d0:	20c00044 	addi	r3,r4,1
 80114d4:	1145883a 	add	r2,r2,r5
 80114d8:	0009883a 	mov	r4,zero
 80114dc:	15000215 	stw	r20,8(r2)
 80114e0:	28c00115 	stw	r3,4(r5)
 80114e4:	2005883a 	mov	r2,r4
 80114e8:	dfc00517 	ldw	ra,20(sp)
 80114ec:	dd000417 	ldw	r20,16(sp)
 80114f0:	dcc00317 	ldw	r19,12(sp)
 80114f4:	dc800217 	ldw	r18,8(sp)
 80114f8:	dc400117 	ldw	r17,4(sp)
 80114fc:	dc000017 	ldw	r16,0(sp)
 8011500:	dec00604 	addi	sp,sp,24
 8011504:	f800283a 	ret
 8011508:	29802204 	addi	r6,r5,136
 801150c:	00800044 	movi	r2,1
 8011510:	110e983a 	sll	r7,r2,r4
 8011514:	30c04017 	ldw	r3,256(r6)
 8011518:	2105883a 	add	r2,r4,r4
 801151c:	1085883a 	add	r2,r2,r2
 8011520:	1185883a 	add	r2,r2,r6
 8011524:	19c6b03a 	or	r3,r3,r7
 8011528:	14802015 	stw	r18,128(r2)
 801152c:	14c00015 	stw	r19,0(r2)
 8011530:	00800084 	movi	r2,2
 8011534:	30c04015 	stw	r3,256(r6)
 8011538:	88bfe31e 	bne	r17,r2,80114c8 <__register_exitproc+0x50>
 801153c:	30804117 	ldw	r2,260(r6)
 8011540:	11c4b03a 	or	r2,r2,r7
 8011544:	30804115 	stw	r2,260(r6)
 8011548:	003fdf06 	br	80114c8 <__register_exitproc+0x50>
 801154c:	00820074 	movhi	r2,2049
 8011550:	1095b504 	addi	r2,r2,22228
 8011554:	100b883a 	mov	r5,r2
 8011558:	80805215 	stw	r2,328(r16)
 801155c:	003fd606 	br	80114b8 <__register_exitproc+0x40>
 8011560:	00800034 	movhi	r2,0
 8011564:	10800004 	addi	r2,r2,0
 8011568:	1000021e 	bne	r2,zero,8011574 <__register_exitproc+0xfc>
 801156c:	013fffc4 	movi	r4,-1
 8011570:	003fdc06 	br	80114e4 <__register_exitproc+0x6c>
 8011574:	01006404 	movi	r4,400
 8011578:	103ee83a 	callr	r2
 801157c:	1007883a 	mov	r3,r2
 8011580:	103ffa26 	beq	r2,zero,801156c <__register_exitproc+0xf4>
 8011584:	80805217 	ldw	r2,328(r16)
 8011588:	180b883a 	mov	r5,r3
 801158c:	18000115 	stw	zero,4(r3)
 8011590:	18800015 	stw	r2,0(r3)
 8011594:	80c05215 	stw	r3,328(r16)
 8011598:	18006215 	stw	zero,392(r3)
 801159c:	18006315 	stw	zero,396(r3)
 80115a0:	0009883a 	mov	r4,zero
 80115a4:	883fc826 	beq	r17,zero,80114c8 <__register_exitproc+0x50>
 80115a8:	003fd706 	br	8011508 <__register_exitproc+0x90>

080115ac <register_fini>:
 80115ac:	f800283a 	ret

080115b0 <__call_exitprocs>:
 80115b0:	00820074 	movhi	r2,2049
 80115b4:	108e5304 	addi	r2,r2,14668
 80115b8:	10800017 	ldw	r2,0(r2)
 80115bc:	defff304 	addi	sp,sp,-52
 80115c0:	df000b15 	stw	fp,44(sp)
 80115c4:	d8800115 	stw	r2,4(sp)
 80115c8:	00800034 	movhi	r2,0
 80115cc:	10800004 	addi	r2,r2,0
 80115d0:	1005003a 	cmpeq	r2,r2,zero
 80115d4:	d8800215 	stw	r2,8(sp)
 80115d8:	d8800117 	ldw	r2,4(sp)
 80115dc:	dd400815 	stw	r21,32(sp)
 80115e0:	dd000715 	stw	r20,28(sp)
 80115e4:	10805204 	addi	r2,r2,328
 80115e8:	dfc00c15 	stw	ra,48(sp)
 80115ec:	ddc00a15 	stw	r23,40(sp)
 80115f0:	dd800915 	stw	r22,36(sp)
 80115f4:	dcc00615 	stw	r19,24(sp)
 80115f8:	dc800515 	stw	r18,20(sp)
 80115fc:	dc400415 	stw	r17,16(sp)
 8011600:	dc000315 	stw	r16,12(sp)
 8011604:	282b883a 	mov	r21,r5
 8011608:	2039883a 	mov	fp,r4
 801160c:	d8800015 	stw	r2,0(sp)
 8011610:	2829003a 	cmpeq	r20,r5,zero
 8011614:	d8800117 	ldw	r2,4(sp)
 8011618:	14405217 	ldw	r17,328(r2)
 801161c:	88001026 	beq	r17,zero,8011660 <__call_exitprocs+0xb0>
 8011620:	ddc00017 	ldw	r23,0(sp)
 8011624:	88800117 	ldw	r2,4(r17)
 8011628:	8c802204 	addi	r18,r17,136
 801162c:	143fffc4 	addi	r16,r2,-1
 8011630:	80000916 	blt	r16,zero,8011658 <__call_exitprocs+0xa8>
 8011634:	05bfffc4 	movi	r22,-1
 8011638:	a000151e 	bne	r20,zero,8011690 <__call_exitprocs+0xe0>
 801163c:	8409883a 	add	r4,r16,r16
 8011640:	2105883a 	add	r2,r4,r4
 8011644:	1485883a 	add	r2,r2,r18
 8011648:	10c02017 	ldw	r3,128(r2)
 801164c:	a8c01126 	beq	r21,r3,8011694 <__call_exitprocs+0xe4>
 8011650:	843fffc4 	addi	r16,r16,-1
 8011654:	85bff81e 	bne	r16,r22,8011638 <__call_exitprocs+0x88>
 8011658:	d8800217 	ldw	r2,8(sp)
 801165c:	10003126 	beq	r2,zero,8011724 <__call_exitprocs+0x174>
 8011660:	dfc00c17 	ldw	ra,48(sp)
 8011664:	df000b17 	ldw	fp,44(sp)
 8011668:	ddc00a17 	ldw	r23,40(sp)
 801166c:	dd800917 	ldw	r22,36(sp)
 8011670:	dd400817 	ldw	r21,32(sp)
 8011674:	dd000717 	ldw	r20,28(sp)
 8011678:	dcc00617 	ldw	r19,24(sp)
 801167c:	dc800517 	ldw	r18,20(sp)
 8011680:	dc400417 	ldw	r17,16(sp)
 8011684:	dc000317 	ldw	r16,12(sp)
 8011688:	dec00d04 	addi	sp,sp,52
 801168c:	f800283a 	ret
 8011690:	8409883a 	add	r4,r16,r16
 8011694:	88c00117 	ldw	r3,4(r17)
 8011698:	2105883a 	add	r2,r4,r4
 801169c:	1445883a 	add	r2,r2,r17
 80116a0:	18ffffc4 	addi	r3,r3,-1
 80116a4:	11800217 	ldw	r6,8(r2)
 80116a8:	1c001526 	beq	r3,r16,8011700 <__call_exitprocs+0x150>
 80116ac:	10000215 	stw	zero,8(r2)
 80116b0:	303fe726 	beq	r6,zero,8011650 <__call_exitprocs+0xa0>
 80116b4:	00c00044 	movi	r3,1
 80116b8:	1c06983a 	sll	r3,r3,r16
 80116bc:	90804017 	ldw	r2,256(r18)
 80116c0:	8cc00117 	ldw	r19,4(r17)
 80116c4:	1884703a 	and	r2,r3,r2
 80116c8:	10001426 	beq	r2,zero,801171c <__call_exitprocs+0x16c>
 80116cc:	90804117 	ldw	r2,260(r18)
 80116d0:	1884703a 	and	r2,r3,r2
 80116d4:	10000c1e 	bne	r2,zero,8011708 <__call_exitprocs+0x158>
 80116d8:	2105883a 	add	r2,r4,r4
 80116dc:	1485883a 	add	r2,r2,r18
 80116e0:	11400017 	ldw	r5,0(r2)
 80116e4:	e009883a 	mov	r4,fp
 80116e8:	303ee83a 	callr	r6
 80116ec:	88800117 	ldw	r2,4(r17)
 80116f0:	98bfc81e 	bne	r19,r2,8011614 <__call_exitprocs+0x64>
 80116f4:	b8800017 	ldw	r2,0(r23)
 80116f8:	147fd526 	beq	r2,r17,8011650 <__call_exitprocs+0xa0>
 80116fc:	003fc506 	br	8011614 <__call_exitprocs+0x64>
 8011700:	8c000115 	stw	r16,4(r17)
 8011704:	003fea06 	br	80116b0 <__call_exitprocs+0x100>
 8011708:	2105883a 	add	r2,r4,r4
 801170c:	1485883a 	add	r2,r2,r18
 8011710:	11000017 	ldw	r4,0(r2)
 8011714:	303ee83a 	callr	r6
 8011718:	003ff406 	br	80116ec <__call_exitprocs+0x13c>
 801171c:	303ee83a 	callr	r6
 8011720:	003ff206 	br	80116ec <__call_exitprocs+0x13c>
 8011724:	88800117 	ldw	r2,4(r17)
 8011728:	1000081e 	bne	r2,zero,801174c <__call_exitprocs+0x19c>
 801172c:	89000017 	ldw	r4,0(r17)
 8011730:	20000726 	beq	r4,zero,8011750 <__call_exitprocs+0x1a0>
 8011734:	b9000015 	stw	r4,0(r23)
 8011738:	8809883a 	mov	r4,r17
 801173c:	00000000 	call	0 <__alt_mem_onchip_memory2_0-0x3000>
 8011740:	bc400017 	ldw	r17,0(r23)
 8011744:	883fb71e 	bne	r17,zero,8011624 <__call_exitprocs+0x74>
 8011748:	003fc506 	br	8011660 <__call_exitprocs+0xb0>
 801174c:	89000017 	ldw	r4,0(r17)
 8011750:	882f883a 	mov	r23,r17
 8011754:	2023883a 	mov	r17,r4
 8011758:	883fb21e 	bne	r17,zero,8011624 <__call_exitprocs+0x74>
 801175c:	003fc006 	br	8011660 <__call_exitprocs+0xb0>

08011760 <alt_sim_halt>:

/*
 * Routine called on exit.
 */
static ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
 8011760:	defffd04 	addi	sp,sp,-12
 8011764:	df000215 	stw	fp,8(sp)
 8011768:	df000204 	addi	fp,sp,8
 801176c:	e13fff15 	stw	r4,-4(fp)
  int r2 = exit_code;
 8011770:	e0bfff17 	ldw	r2,-4(fp)
 8011774:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 8011778:	e0bffe17 	ldw	r2,-8(fp)
 801177c:	1005003a 	cmpeq	r2,r2,zero
 8011780:	1000021e 	bne	r2,zero,801178c <alt_sim_halt+0x2c>
    ALT_SIM_FAIL();
 8011784:	002af070 	cmpltui	zero,zero,43969
 8011788:	00000106 	br	8011790 <alt_sim_halt+0x30>
  } else {
    ALT_SIM_PASS();
 801178c:	002af0b0 	cmpltui	zero,zero,43970
  }
#endif /* DEBUG_STUB */
}
 8011790:	e037883a 	mov	sp,fp
 8011794:	df000017 	ldw	fp,0(sp)
 8011798:	dec00104 	addi	sp,sp,4
 801179c:	f800283a 	ret

080117a0 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 80117a0:	defffd04 	addi	sp,sp,-12
 80117a4:	dfc00215 	stw	ra,8(sp)
 80117a8:	df000115 	stw	fp,4(sp)
 80117ac:	df000104 	addi	fp,sp,4
 80117b0:	e13fff15 	stw	r4,-4(fp)
  ALT_OS_STOP();

  /* Provide notification to the simulator that we've stopped */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_SIM_HALT().\r\n");
  ALT_SIM_HALT(exit_code);
 80117b4:	e13fff17 	ldw	r4,-4(fp)
 80117b8:	80117600 	call	8011760 <alt_sim_halt>

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 80117bc:	003fff06 	br	80117bc <_exit+0x1c>
 80117c0:	00000010 	cmplti	zero,zero,0
 80117c4:	00000000 	call	0 <__alt_mem_onchip_memory2_0-0x3000>
 80117c8:	00527a01 	jmpi	527a0 <__alt_mem_onchip_memory2_3+0x4b7a0>
 80117cc:	011f7c01 	jmpi	11f7c0 <__alt_mem_onchip_memory2_3+0x1187c0>
 80117d0:	001b0c0b 	ldhu	zero,27696(zero)
 80117d4:	00000028 	cmpgeui	zero,zero,0
 80117d8:	00000018 	cmpnei	zero,zero,0
 80117dc:	0800c000 	call	800c00 <__alt_mem_onchip_memory2_3+0x7f9c00>
 80117e0:	000005dc 	xori	zero,zero,23
 80117e4:	400e4400 	call	400e440 <__alt_mem_onchip_memory2_3+0x4007440>
 80117e8:	92099170 	cmpltui	r8,r18,9797
 80117ec:	95079308 	cmpgei	r20,r18,7756
 80117f0:	97049605 	stb	fp,4696(r18)
 80117f4:	90019f03 	ldbu	zero,1660(r18)
 80117f8:	9c06940a 	0x9c06940a
 80117fc:	00000002 	0x2
 8011800:	00000028 	cmpgeui	zero,zero,0
 8011804:	00000044 	movi	zero,1
 8011808:	0800c5dc 	xori	zero,at,791
 801180c:	000005b0 	cmpltui	zero,zero,22
 8011810:	3c0e4400 	call	3c0e440 <__alt_mem_onchip_memory2_3+0x3c07440>
 8011814:	92099168 	cmpgeui	r8,r18,9797
 8011818:	95079308 	cmpgei	r20,r18,7756
 801181c:	9c039705 	stb	r16,3676(r19)
 8011820:	90019f02 	0x90019f02
 8011824:	9606940a 	0x9606940a
 8011828:	00000004 	movi	zero,0
 801182c:	080115ac 	andhi	zero,at,1110
