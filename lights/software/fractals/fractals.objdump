
fractals.elf:     file format elf32-littlenios2
fractals.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x080001b4

Program Header:
    LOAD off    0x00001000 vaddr 0x08000000 paddr 0x08000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x08000020 paddr 0x08000020 align 2**12
         filesz 0x00007ebc memsz 0x00007ebc flags r-x
    LOAD off    0x00008edc vaddr 0x08007edc paddr 0x08009570 align 2**12
         filesz 0x00001694 memsz 0x00001694 flags rw-
    LOAD off    0x0000ac04 vaddr 0x0800ac04 paddr 0x0800ac04 align 2**12
         filesz 0x00000000 memsz 0x000002b8 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  08000000  08000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000194  08000020  08000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00007b44  080001b4  080001b4  000011b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000001e4  08007cf8  08007cf8  00008cf8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001694  08007edc  08009570  00008edc  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000002b8  0800ac04  0800ac04  0000ac04  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000023  00000000  00000000  0000a570  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 000009f8  00000000  00000000  0000a598  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 00000f36  00000000  00000000  0000af90  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   000115ed  00000000  00000000  0000bec6  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000054fc  00000000  00000000  0001d4b3  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000cd49  00000000  00000000  000229af  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00001034  00000000  00000000  0002f6f8  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000015f4  00000000  00000000  0003072c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00004103  00000000  00000000  00031d20  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000030  00000000  00000000  00035e24  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000538  00000000  00000000  00035e58  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0003896b  2**0
                  CONTENTS, READONLY
 18 .cpu          00000005  00000000  00000000  0003896e  2**0
                  CONTENTS, READONLY
 19 .simulation_enabled 00000001  00000000  00000000  00038973  2**0
                  CONTENTS, READONLY
 20 .sysid_hash   00000004  00000000  00000000  00038974  2**0
                  CONTENTS, READONLY
 21 .sysid_base   00000004  00000000  00000000  00038978  2**0
                  CONTENTS, READONLY
 22 .sysid_time   00000004  00000000  00000000  0003897c  2**0
                  CONTENTS, READONLY
 23 .stderr_dev   0000000b  00000000  00000000  00038980  2**0
                  CONTENTS, READONLY
 24 .stdin_dev    0000000b  00000000  00000000  0003898b  2**0
                  CONTENTS, READONLY
 25 .stdout_dev   0000000b  00000000  00000000  00038996  2**0
                  CONTENTS, READONLY
 26 .sopc_system_name 0000000b  00000000  00000000  000389a1  2**0
                  CONTENTS, READONLY
 27 .quartus_project_dir 00000020  00000000  00000000  000389ac  2**0
                  CONTENTS, READONLY
 28 .jdi          000042c8  00000000  00000000  000389cc  2**0
                  CONTENTS, READONLY
 29 .sopcinfo     0007fee8  00000000  00000000  0003cc94  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
08000000 l    d  .entry	00000000 .entry
08000020 l    d  .exceptions	00000000 .exceptions
080001b4 l    d  .text	00000000 .text
08007cf8 l    d  .rodata	00000000 .rodata
08007edc l    d  .rwdata	00000000 .rwdata
0800ac04 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
080001fc l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 w_pow.c
00000000 l    df *ABS*	00000000 e_pow.c
08007d20 l     O .rodata	00000010 bp
08007d30 l     O .rodata	00000010 dp_l
08007d40 l     O .rodata	00000010 dp_h
00000000 l    df *ABS*	00000000 e_sqrt.c
00000000 l    df *ABS*	00000000 s_fabs.c
00000000 l    df *ABS*	00000000 s_finite.c
00000000 l    df *ABS*	00000000 s_isnand.c
00000000 l    df *ABS*	00000000 s_lib_ver.c
00000000 l    df *ABS*	00000000 s_matherr.c
00000000 l    df *ABS*	00000000 s_nan.c
00000000 l    df *ABS*	00000000 s_rint.c
08007d50 l     O .rodata	00000010 TWO52
00000000 l    df *ABS*	00000000 s_scalbn.c
00000000 l    df *ABS*	00000000 s_copysign.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
080028ac l     F .text	00000410 _fpadd_parts
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
08003818 l     F .text	0000007c udivmodsi4
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 errno.c
00000000 l    df *ABS*	00000000 impure.c
08007edc l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 alt_load.c
0800431c l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
080082dc l     O .rwdata	00001060 jtag_uart_0
0800933c l     O .rwdata	00000054 video_pixel_buffer_dma_0
08004670 l     F .text	00000038 alt_dev_reg
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
080048b0 l     F .text	00000228 altera_avalon_jtag_uart_irq
08004ad8 l     F .text	000000b0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_up_avalon_video_pixel_buffer_dma.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_close.c
08006910 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
080069b4 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
08006a94 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
08006f4c l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
08007088 l     F .text	000000dc alt_file_locked
080072ec l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_irq.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
08007ae0 l     F .text	00000004 register_fini
00000000 l    df *ABS*	00000000 alt_exit.c
08007c94 l     F .text	00000040 alt_sim_halt
08004388 g     F .text	0000006c alt_main
08005dc0 g     F .text	000003d0 alt_up_pixel_buffer_dma_draw_vline
0800ac2c g     O .bss	00000100 alt_irq
08002144 g     F .text	00000018 fabs
08009570 g       *ABS*	00000000 __flash_rwdata_start
080033cc g     F .text	00000088 __eqdf2
080025d4 g     F .text	00000174 __divsf3
08005194 g     F .text	000001a0 alt_up_pixel_buffer_dma_draw
080034dc g     F .text	00000088 __gtdf2
0800428c g     F .text	00000010 __errno
08005154 g     F .text	00000040 alt_up_pixel_buffer_dma_open_dev
08000000 g     F .entry	0000001c __reset
08000020 g       *ABS*	00000000 __flash_exceptions_start
0800ac28 g     O .bss	00000004 errno
0800376c g     F .text	00000038 __make_dp
08003d4c g     F .text	0000002c __make_fp
0800ac14 g     O .bss	00000004 alt_argv
08011538 g       *ABS*	00000000 _gp
08005334 g     F .text	00000058 alt_up_pixel_buffer_dma_change_back_buffer_address
080093b8 g     O .rwdata	00000180 alt_fd_list
08006bbc g     F .text	00000094 alt_find_dev
08007898 g     F .text	000000a0 memcpy
08003674 g     F .text	000000f8 __floatsidf
08007010 g     F .text	00000078 alt_io_redirect
08003564 g     F .text	00000088 __ltdf2
08007cf8 g       *ABS*	00000000 __DTOR_END__
08007550 g     F .text	00000020 altera_nios2_irq_init
080053e4 g     F .text	00000034 alt_up_pixel_buffer_dma_check_swap_buffers_status
08004cf0 g     F .text	00000224 altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
08003954 g     F .text	00000008 __udivsi3
08005a70 g     F .text	00000350 alt_up_pixel_buffer_dma_draw_hline
08002748 g     F .text	00000078 __lesf2
08007748 g     F .text	00000090 alt_icache_flush
08006254 g     F .text	000000d0 helper_plot_pixel
0800955c g     O .rwdata	00000004 alt_max_fd
0800408c g     F .text	00000138 __unpack_d
08002858 g     F .text	00000054 __extendsfdf2
08002d3c g     F .text	00000074 __adddf3
08005418 g     F .text	00000164 alt_up_pixel_buffer_dma_clear_screen
08009540 g     O .rwdata	00000004 __fdlib_version
08009548 g     O .rwdata	00000004 _global_impure_ptr
0800aebc g       *ABS*	00000000 __bss_end
08006e54 g     F .text	000000f8 alt_iic_isr_register
0800557c g     F .text	000004f4 alt_up_pixel_buffer_dma_draw_box
08007444 g     F .text	0000010c alt_tick
08006e0c g     F .text	00000048 alt_ic_irq_enabled
080073ac g     F .text	00000098 alt_alarm_stop
0800ac1c g     O .bss	00000004 alt_irq_active
080000ec g     F .exceptions	000000c8 alt_irq_handler
08009390 g     O .rwdata	00000028 alt_dev_null
080021c0 g     F .text	00000210 rint
08003bdc g     F .text	000000c8 __unpack_f
08006970 g     F .text	00000044 alt_dcache_flush_all
08006190 g     F .text	000000c4 alt_up_pixel_buffer_dma_draw_rectangle
08009570 g       *ABS*	00000000 __ram_rwdata_end
08009554 g     O .rwdata	00000008 alt_dev_list
08006324 g     F .text	0000039c alt_up_pixel_buffer_dma_draw_line
08007edc g       *ABS*	00000000 __ram_rodata_end
080035ec g     F .text	00000088 __ledf2
0800395c g     F .text	00000008 __umodsi3
0800aebc g       *ABS*	00000000 end
08003a7c g     F .text	00000160 __pack_f
080047f0 g     F .text	000000c0 altera_avalon_jtag_uart_init
08007cf4 g       *ABS*	00000000 __CTOR_LIST__
10000000 g       *ABS*	00000000 __alt_stack_pointer
080039fc g     F .text	00000080 __clzsi2
08004f14 g     F .text	00000240 altera_avalon_jtag_uart_write
08007ae4 g     F .text	000001b0 __call_exitprocs
080001b4 g     F .text	0000004c _start
0800ac20 g     O .bss	00000004 _alt_tick_rate
0800ac24 g     O .bss	00000004 _alt_nticks
08004428 g     F .text	00000248 alt_sys_init
080027c0 g     F .text	00000098 __floatsisf
080079ac g     F .text	00000134 __register_exitproc
08000b7c g     F .text	00001300 __ieee754_pow
08004b88 g     F .text	00000074 altera_avalon_jtag_uart_close
080006f4 g     F .text	00000488 pow
08007edc g       *ABS*	00000000 __ram_rwdata_start
08007cf8 g       *ABS*	00000000 __ram_rodata_start
080046a8 g     F .text	00000058 altera_avalon_jtag_uart_read_fd
08007690 g     F .text	000000b8 alt_get_fd
080041c4 g     F .text	000000c8 __fpcmp_parts_d
08007824 g     F .text	00000074 memcmp
08004758 g     F .text	00000048 altera_avalon_jtag_uart_close_fd
0800ac04 g     O .bss	00000004 col
0800aebc g       *ABS*	00000000 __alt_stack_base
080047a0 g     F .text	00000050 altera_avalon_jtag_uart_ioctl_fd
08003174 g     F .text	00000258 __divdf3
08002db0 g     F .text	000003c4 __muldf3
08007d60 g     O .rodata	00000010 __thenan_sf
08007570 g     F .text	00000120 alt_find_file
080069e0 g     F .text	000000b4 alt_dev_llist_insert
0800ac04 g       *ABS*	00000000 __bss_start
08000200 g     F .text	000004f4 main
0800ac18 g     O .bss	00000004 alt_envp
0800538c g     F .text	00000058 alt_up_pixel_buffer_dma_swap_buffers
08004700 g     F .text	00000058 altera_avalon_jtag_uart_write_fd
080021a8 g     F .text	00000008 matherr
080037a4 g     F .text	00000074 __truncdfsf2
0800ad2c g     O .bss	00000190 _atexit0
08009560 g     O .rwdata	00000004 alt_errno
08003894 g     F .text	00000060 __divsi3
08007d70 g     O .rodata	00000014 __thenan_df
08007cf8 g       *ABS*	00000000 __CTOR_END__
0800215c g     F .text	0000001c finite
08007cf8 g       *ABS*	00000000 __flash_rodata_start
08007cf8 g       *ABS*	00000000 __DTOR_LIST__
080025b0 g     F .text	00000024 copysign
08003454 g     F .text	00000088 __nedf2
11000000 g       *ABS*	00000000 __alt_mem_sram_0
080043f4 g     F .text	00000034 alt_irq_init
0800734c g     F .text	00000060 alt_release_fd
08007d84 g     O .rodata	00000100 __clz_tab
080077d8 g     F .text	00000014 atexit
0800ac08 g     O .bss	00000004 my_pixel_buffer
08009544 g     O .rwdata	00000004 _impure_ptr
0800ac10 g     O .bss	00000004 alt_argc
080023d0 g     F .text	000001e0 scalbn
08006b58 g     F .text	00000064 _do_dtors
08000000 g       *ABS*	00000000 __alt_mem_sdram_0
08000020 g       .exceptions	00000000 alt_irq_entry
08009538 g     O .rwdata	00000004 num_rows
0800954c g     O .rwdata	00000008 alt_fs_list
080021b0 g     F .text	00000010 nan
08000020 g       *ABS*	00000000 __ram_exceptions_start
08001e7c g     F .text	000002c8 __ieee754_sqrt
08006c80 g     F .text	00000050 alt_ic_isr_register
08009570 g       *ABS*	00000000 _edata
0800aebc g       *ABS*	00000000 _end
080001b4 g       *ABS*	00000000 __ram_exceptions_end
08004bfc g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
08006d6c g     F .text	000000a0 alt_ic_irq_disable
080077ec g     F .text	00000038 exit
080038f4 g     F .text	00000060 __modsi3
10000000 g       *ABS*	00000000 __alt_data_end
08000020 g     F .exceptions	00000000 alt_exception
08003ca4 g     F .text	000000a8 __fpcmp_parts_f
08007cd4 g     F .text	00000020 _exit
08002178 g     F .text	00000030 __isnand
080066c0 g     F .text	00000154 alt_alarm_start
08003964 g     F .text	00000098 __muldi3
08007938 g     F .text	00000074 strlen
08007164 g     F .text	00000188 open
08006c50 g     F .text	00000030 alt_icache_flush_all
08009564 g     O .rwdata	00000004 alt_priority_mask
0800953c g     O .rwdata	00000004 num_cols
08006cd0 g     F .text	0000009c alt_ic_irq_enable
08002cbc g     F .text	00000080 __subdf3
08009568 g     O .rwdata	00000008 alt_alarm_list
08006af4 g     F .text	00000064 _do_ctors
08006814 g     F .text	000000fc close
0800429c g     F .text	00000080 alt_load
0800ac0c g     O .bss	00000004 row
08003d78 g     F .text	00000314 __pack_d
00000000  w      *UND*	00000000 free



Disassembly of section .entry:

08000000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && !defined(ALT_SIM_OPTIMIZE)
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
 8000000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
 8000004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
 8000008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
 800000c:	00bffd16 	blt	zero,r2,8000004 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 8000010:	00420034 	movhi	at,2048
    ori r1, r1, %lo(_start)
 8000014:	08406d14 	ori	at,at,436
    jmp r1
 8000018:	0800683a 	jmp	at
 800001c:	00000000 	call	0 <__alt_mem_sdram_0-0x8000000>

Disassembly of section .exceptions:

08000020 <alt_exception>:
         * Process an exception.  For all exceptions we must preserve all
         * caller saved registers on the stack (See the Nios2 ABI
         * documentation for details).
         */

        addi  sp, sp, -76
 8000020:	deffed04 	addi	sp,sp,-76

#endif

#endif

        stw   ra,  0(sp)
 8000024:	dfc00015 	stw	ra,0(sp)
        /*
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */

        stw   r1,   8(sp)
 8000028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 800002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 8000030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 8000034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 8000038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 800003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 8000040:	d9c00815 	stw	r7,32(sp)

        rdctl r5, estatus
 8000044:	000b307a 	rdctl	r5,estatus

        stw   r8,  36(sp)
 8000048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 800004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 8000050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 8000054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 8000058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 800005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 8000060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 8000064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 8000068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 800006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 8000070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 8000074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 8000078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 800007c:	10000326 	beq	r2,zero,800008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 8000080:	20000226 	beq	r4,zero,800008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 8000084:	80000ec0 	call	80000ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 8000088:	00000306 	br	8000098 <alt_exception+0x78>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
 800008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
 8000090:	e8bfff17 	ldw	r2,-4(ea)
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
 8000094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 8000098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 800009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 80000a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 80000a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 80000a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 80000ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 80000b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 80000b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 80000b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 80000bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 80000c0:	d9c00817 	ldw	r7,32(sp)
#ifdef ALT_STACK_CHECK
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif
#endif

        ldw   r8,  36(sp)
 80000c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 80000c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 80000cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 80000d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 80000d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 80000d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 80000dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 80000e0:	dbc01017 	ldw	r15,64(sp)
#endif

        ldw   sp,  76(sp)

#else
        addi  sp, sp, 76
 80000e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 80000e8:	ef80083a 	eret

080000ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 80000ec:	defff904 	addi	sp,sp,-28
 80000f0:	dfc00615 	stw	ra,24(sp)
 80000f4:	df000515 	stw	fp,20(sp)
 80000f8:	df000504 	addi	fp,sp,20
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 80000fc:	0005313a 	rdctl	r2,ipending
 8000100:	e0bffc15 	stw	r2,-16(fp)

  return active;
 8000104:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 8000108:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
 800010c:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 8000110:	00800044 	movi	r2,1
 8000114:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 8000118:	e0ffff17 	ldw	r3,-4(fp)
 800011c:	e0bffe17 	ldw	r2,-8(fp)
 8000120:	1884703a 	and	r2,r3,r2
 8000124:	1005003a 	cmpeq	r2,r2,zero
 8000128:	1000161e 	bne	r2,zero,8000184 <alt_irq_handler+0x98>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 800012c:	e0bffd17 	ldw	r2,-12(fp)
 8000130:	00c20074 	movhi	r3,2049
 8000134:	18eb0b04 	addi	r3,r3,-21460
 8000138:	100490fa 	slli	r2,r2,3
 800013c:	10c5883a 	add	r2,r2,r3
 8000140:	11400017 	ldw	r5,0(r2)
 8000144:	e0bffd17 	ldw	r2,-12(fp)
 8000148:	00c20074 	movhi	r3,2049
 800014c:	18eb0b04 	addi	r3,r3,-21460
 8000150:	100490fa 	slli	r2,r2,3
 8000154:	10c5883a 	add	r2,r2,r3
 8000158:	10800104 	addi	r2,r2,4
 800015c:	11000017 	ldw	r4,0(r2)
 8000160:	283ee83a 	callr	r5
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 8000164:	0005313a 	rdctl	r2,ipending
 8000168:	e0bffb15 	stw	r2,-20(fp)

  return active;
 800016c:	e0bffb17 	ldw	r2,-20(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
 8000170:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
 8000174:	e0bfff17 	ldw	r2,-4(fp)
 8000178:	1004c03a 	cmpne	r2,r2,zero
 800017c:	103fe31e 	bne	r2,zero,800010c <alt_irq_handler+0x20>
 8000180:	00000706 	br	80001a0 <alt_irq_handler+0xb4>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
 8000184:	e0bffe17 	ldw	r2,-8(fp)
 8000188:	1085883a 	add	r2,r2,r2
 800018c:	e0bffe15 	stw	r2,-8(fp)
      i++;
 8000190:	e0bffd17 	ldw	r2,-12(fp)
 8000194:	10800044 	addi	r2,r2,1
 8000198:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 800019c:	003fde06 	br	8000118 <alt_irq_handler+0x2c>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
 80001a0:	e037883a 	mov	sp,fp
 80001a4:	dfc00117 	ldw	ra,4(sp)
 80001a8:	df000017 	ldw	fp,0(sp)
 80001ac:	dec00204 	addi	sp,sp,8
 80001b0:	f800283a 	ret

Disassembly of section .text:

080001b4 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
 80001b4:	00840014 	movui	r2,4096
#endif

0:
    initd 0(r2)
 80001b8:	10000033 	initd	0(r2)
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
 80001bc:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
 80001c0:	00bffd16 	blt	zero,r2,80001b8 <_start+0x4>
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 80001c4:	06c40034 	movhi	sp,4096
    ori sp, sp, %lo(__alt_stack_pointer)
 80001c8:	dec00014 	ori	sp,sp,0

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
 80001cc:	06820074 	movhi	gp,2049
    ori gp, gp, %lo(_gp)
 80001d0:	d6854e14 	ori	gp,gp,5432
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 80001d4:	00820034 	movhi	r2,2048
    ori r2, r2, %lo(__bss_start)
 80001d8:	10ab0114 	ori	r2,r2,44036

    movhi r3, %hi(__bss_end)
 80001dc:	00c20034 	movhi	r3,2048
    ori r3, r3, %lo(__bss_end)
 80001e0:	18ebaf14 	ori	r3,r3,44732

    beq r2, r3, 1f
 80001e4:	10c00326 	beq	r2,r3,80001f4 <_start+0x40>

0:
    stw zero, (r2)
 80001e8:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 80001ec:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 80001f0:	10fffd36 	bltu	r2,r3,80001e8 <_start+0x34>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 80001f4:	800429c0 	call	800429c <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 80001f8:	80043880 	call	8004388 <alt_main>

080001fc <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 80001fc:	003fff06 	br	80001fc <alt_after_alt_main>

08000200 <main>:
const int num_cols = 320; //from 240
float row;
float col;

int main()
{
 8000200:	deffea04 	addi	sp,sp,-88
 8000204:	dfc01515 	stw	ra,84(sp)
 8000208:	df001415 	stw	fp,80(sp)
 800020c:	dc401315 	stw	r17,76(sp)
 8000210:	dc001215 	stw	r16,72(sp)
 8000214:	df001204 	addi	fp,sp,72
*/

	//pixel buffer

	//alt_up_pixel_buffer_dma_dev *my_pixel_buffer; //declare global var
	my_pixel_buffer=alt_up_pixel_buffer_dma_open_dev("/dev/video_pixel_buffer_dma_0"); //assign it
 8000218:	01020034 	movhi	r4,2048
 800021c:	211f3e04 	addi	r4,r4,31992
 8000220:	80051540 	call	8005154 <alt_up_pixel_buffer_dma_open_dev>
 8000224:	d0a5b415 	stw	r2,-26928(gp)
	alt_up_pixel_buffer_dma_clear_screen(my_pixel_buffer,0);//clear_screen();
 8000228:	d125b417 	ldw	r4,-26928(gp)
 800022c:	000b883a 	mov	r5,zero
 8000230:	80054180 	call	8005418 <alt_up_pixel_buffer_dma_clear_screen>

	int zoom = 1;
 8000234:	00800044 	movi	r2,1
 8000238:	e0bffe15 	stw	r2,-8(fp)
	float min_x, max_x, min_y, max_y;
	min_x = -2.5;
 800023c:	00b00834 	movhi	r2,49184
 8000240:	e0bffd15 	stw	r2,-12(fp)
	max_x = 1.0;
 8000244:	008fe034 	movhi	r2,16256
 8000248:	e0bffc15 	stw	r2,-16(fp)
	min_y = -1.0;
 800024c:	00afe034 	movhi	r2,49024
 8000250:	e0bffb15 	stw	r2,-20(fp)
	max_y = 1.0;
 8000254:	008fe034 	movhi	r2,16256
 8000258:	e0bffa15 	stw	r2,-24(fp)
		float x, y, z;
		float x0, y0;

		float target_x, target_y;
		int iteration;
		int is_target = 0; //false
 800025c:	e03fef15 	stw	zero,-68(fp)

		for (i = 0; i < num_rows; i++) {
 8000260:	e03ff915 	stw	zero,-28(fp)
 8000264:	00008306 	br	8000474 <main+0x274>
			for (j = 0; j < num_cols; j++) {
 8000268:	e03ff815 	stw	zero,-32(fp)
 800026c:	00007b06 	br	800045c <main+0x25c>
				x = 0;
 8000270:	e03ff715 	stw	zero,-36(fp)
				y = 0;
 8000274:	e03ff615 	stw	zero,-40(fp)
				z = 0;
 8000278:	e03ff515 	stw	zero,-44(fp)
				x0 = j/320.0*(max_x - min_x) + min_x;
 800027c:	e13ff817 	ldw	r4,-32(fp)
 8000280:	80027c00 	call	80027c0 <__floatsisf>
 8000284:	1009883a 	mov	r4,r2
 8000288:	0150e834 	movhi	r5,17312
 800028c:	80025d40 	call	80025d4 <__divsf3>
 8000290:	1009883a 	mov	r4,r2
 8000294:	e0fffc17 	ldw	r3,-16(fp)
 8000298:	e0bffd17 	ldw	r2,-12(fp)
 800029c:	1885ffb2 	custom	254,r2,r3,r2
 80002a0:	2087ff32 	custom	252,r3,r4,r2
 80002a4:	e0bffd17 	ldw	r2,-12(fp)
 80002a8:	1885ff72 	custom	253,r2,r3,r2
 80002ac:	e0bff415 	stw	r2,-48(fp)
				y0 = (239.0-i)/240.0*(max_y - min_y) + min_y;
 80002b0:	e13ff917 	ldw	r4,-28(fp)
 80002b4:	80027c00 	call	80027c0 <__floatsisf>
 80002b8:	1007883a 	mov	r3,r2
 80002bc:	0090dbf4 	movhi	r2,17263
 80002c0:	10c5ffb2 	custom	254,r2,r2,r3
 80002c4:	1009883a 	mov	r4,r2
 80002c8:	0150dc34 	movhi	r5,17264
 80002cc:	80025d40 	call	80025d4 <__divsf3>
 80002d0:	1009883a 	mov	r4,r2
 80002d4:	e0fffa17 	ldw	r3,-24(fp)
 80002d8:	e0bffb17 	ldw	r2,-20(fp)
 80002dc:	1885ffb2 	custom	254,r2,r3,r2
 80002e0:	2087ff32 	custom	252,r3,r4,r2
 80002e4:	e0bffb17 	ldw	r2,-20(fp)
 80002e8:	1885ff72 	custom	253,r2,r3,r2
 80002ec:	e0bff315 	stw	r2,-52(fp)
				//printf("x0: %f...", x0);
				//printf("y0: %f\n", y0);
				iteration = 0;
 80002f0:	e03ff015 	stw	zero,-64(fp)

				while( (x*x + y*y) <= 4 && iteration < 500) {
 80002f4:	00001606 	br	8000350 <main+0x150>
					float xtemp = x*x - y*y + x0;
 80002f8:	e0fff717 	ldw	r3,-36(fp)
 80002fc:	e0bff717 	ldw	r2,-36(fp)
 8000300:	1889ff32 	custom	252,r4,r3,r2
 8000304:	e0fff617 	ldw	r3,-40(fp)
 8000308:	e0bff617 	ldw	r2,-40(fp)
 800030c:	1885ff32 	custom	252,r2,r3,r2
 8000310:	2087ffb2 	custom	254,r3,r4,r2
 8000314:	e0bff417 	ldw	r2,-48(fp)
 8000318:	1885ff72 	custom	253,r2,r3,r2
 800031c:	e0bfee15 	stw	r2,-72(fp)
					y = 2*x*y + y0;
 8000320:	e0bff717 	ldw	r2,-36(fp)
 8000324:	1087ff72 	custom	253,r3,r2,r2
 8000328:	e0bff617 	ldw	r2,-40(fp)
 800032c:	1887ff32 	custom	252,r3,r3,r2
 8000330:	e0bff317 	ldw	r2,-52(fp)
 8000334:	1885ff72 	custom	253,r2,r3,r2
 8000338:	e0bff615 	stw	r2,-40(fp)
					x = xtemp;
 800033c:	e0bfee17 	ldw	r2,-72(fp)
 8000340:	e0bff715 	stw	r2,-36(fp)
					iteration++;
 8000344:	e0bff017 	ldw	r2,-64(fp)
 8000348:	10800044 	addi	r2,r2,1
 800034c:	e0bff015 	stw	r2,-64(fp)
				y0 = (239.0-i)/240.0*(max_y - min_y) + min_y;
				//printf("x0: %f...", x0);
				//printf("y0: %f\n", y0);
				iteration = 0;

				while( (x*x + y*y) <= 4 && iteration < 500) {
 8000350:	e0fff717 	ldw	r3,-36(fp)
 8000354:	e0bff717 	ldw	r2,-36(fp)
 8000358:	1889ff32 	custom	252,r4,r3,r2
 800035c:	e0fff617 	ldw	r3,-40(fp)
 8000360:	e0bff617 	ldw	r2,-40(fp)
 8000364:	1885ff32 	custom	252,r2,r3,r2
 8000368:	2085ff72 	custom	253,r2,r4,r2
 800036c:	e03fff05 	stb	zero,-4(fp)
 8000370:	1009883a 	mov	r4,r2
 8000374:	01502034 	movhi	r5,16512
 8000378:	80027480 	call	8002748 <__lesf2>
 800037c:	10800050 	cmplti	r2,r2,1
 8000380:	1000011e 	bne	r2,zero,8000388 <main+0x188>
 8000384:	00000206 	br	8000390 <main+0x190>
 8000388:	00800044 	movi	r2,1
 800038c:	e0bfff05 	stb	r2,-4(fp)
 8000390:	e0ffff03 	ldbu	r3,-4(fp)
 8000394:	1880005c 	xori	r2,r3,1
 8000398:	10803fcc 	andi	r2,r2,255
 800039c:	1004c03a 	cmpne	r2,r2,zero
 80003a0:	1000031e 	bne	r2,zero,80003b0 <main+0x1b0>
 80003a4:	e0bff017 	ldw	r2,-64(fp)
 80003a8:	10807d10 	cmplti	r2,r2,500
 80003ac:	103fd21e 	bne	r2,zero,80002f8 <main+0xf8>
					iteration++;
					if(iteration == 450 && is_target == 0) {
						is_target == 1;
					}
				}
				if(is_target == 1) {
 80003b0:	e0bfef17 	ldw	r2,-68(fp)
 80003b4:	10800058 	cmpnei	r2,r2,1
 80003b8:	1000041e 	bne	r2,zero,80003cc <main+0x1cc>
					target_x = x0;
 80003bc:	e0bff417 	ldw	r2,-48(fp)
 80003c0:	e0bff215 	stw	r2,-56(fp)
					target_y = y0;
 80003c4:	e0bff317 	ldw	r2,-52(fp)
 80003c8:	e0bff115 	stw	r2,-60(fp)
				}

				//printf("Iteration: %d\n", iteration);
				if(iteration == 500) {
 80003cc:	e0bff017 	ldw	r2,-64(fp)
 80003d0:	10807d18 	cmpnei	r2,r2,500
 80003d4:	1000061e 	bne	r2,zero,80003f0 <main+0x1f0>
					alt_up_pixel_buffer_dma_draw(my_pixel_buffer, 0,j,i );
 80003d8:	d125b417 	ldw	r4,-26928(gp)
 80003dc:	e1bff817 	ldw	r6,-32(fp)
 80003e0:	e1fff917 	ldw	r7,-28(fp)
 80003e4:	000b883a 	mov	r5,zero
 80003e8:	80051940 	call	8005194 <alt_up_pixel_buffer_dma_draw>
 80003ec:	00001806 	br	8000450 <main+0x250>
				} else {
					alt_up_pixel_buffer_dma_draw(my_pixel_buffer, (iteration*8/zoom) + (iteration*4/zoom) +(iteration*2/zoom), j, i);
 80003f0:	d465b417 	ldw	r17,-26928(gp)
 80003f4:	e0bff017 	ldw	r2,-64(fp)
 80003f8:	100890fa 	slli	r4,r2,3
 80003fc:	e17ffe17 	ldw	r5,-8(fp)
 8000400:	80038940 	call	8003894 <__divsi3>
 8000404:	1021883a 	mov	r16,r2
 8000408:	e0bff017 	ldw	r2,-64(fp)
 800040c:	1085883a 	add	r2,r2,r2
 8000410:	1085883a 	add	r2,r2,r2
 8000414:	1009883a 	mov	r4,r2
 8000418:	e17ffe17 	ldw	r5,-8(fp)
 800041c:	80038940 	call	8003894 <__divsi3>
 8000420:	80a1883a 	add	r16,r16,r2
 8000424:	e0bff017 	ldw	r2,-64(fp)
 8000428:	1085883a 	add	r2,r2,r2
 800042c:	1009883a 	mov	r4,r2
 8000430:	e17ffe17 	ldw	r5,-8(fp)
 8000434:	80038940 	call	8003894 <__divsi3>
 8000438:	8085883a 	add	r2,r16,r2
 800043c:	100b883a 	mov	r5,r2
 8000440:	e1bff817 	ldw	r6,-32(fp)
 8000444:	e1fff917 	ldw	r7,-28(fp)
 8000448:	8809883a 	mov	r4,r17
 800044c:	80051940 	call	8005194 <alt_up_pixel_buffer_dma_draw>
		float target_x, target_y;
		int iteration;
		int is_target = 0; //false

		for (i = 0; i < num_rows; i++) {
			for (j = 0; j < num_cols; j++) {
 8000450:	e0bff817 	ldw	r2,-32(fp)
 8000454:	10800044 	addi	r2,r2,1
 8000458:	e0bff815 	stw	r2,-32(fp)
 800045c:	d0e00117 	ldw	r3,-32764(gp)
 8000460:	e0bff817 	ldw	r2,-32(fp)
 8000464:	10ff8216 	blt	r2,r3,8000270 <main+0x70>

		float target_x, target_y;
		int iteration;
		int is_target = 0; //false

		for (i = 0; i < num_rows; i++) {
 8000468:	e0bff917 	ldw	r2,-28(fp)
 800046c:	10800044 	addi	r2,r2,1
 8000470:	e0bff915 	stw	r2,-28(fp)
 8000474:	d0e00017 	ldw	r3,-32768(gp)
 8000478:	e0bff917 	ldw	r2,-28(fp)
 800047c:	10ff7a16 	blt	r2,r3,8000268 <main+0x68>
					alt_up_pixel_buffer_dma_draw(my_pixel_buffer, (iteration*8/zoom) + (iteration*4/zoom) +(iteration*2/zoom), j, i);
				}

			}
		}
		min_x = target_x - 1/(pow(1.5, zoom));
 8000480:	e13ff217 	ldw	r4,-56(fp)
 8000484:	80028580 	call	8002858 <__extendsfdf2>
 8000488:	1021883a 	mov	r16,r2
 800048c:	1823883a 	mov	r17,r3
 8000490:	e13ffe17 	ldw	r4,-8(fp)
 8000494:	80036740 	call	8003674 <__floatsidf>
 8000498:	100f883a 	mov	r7,r2
 800049c:	1811883a 	mov	r8,r3
 80004a0:	0009883a 	mov	r4,zero
 80004a4:	014ffe34 	movhi	r5,16376
 80004a8:	380d883a 	mov	r6,r7
 80004ac:	400f883a 	mov	r7,r8
 80004b0:	80006f40 	call	80006f4 <pow>
 80004b4:	1009883a 	mov	r4,r2
 80004b8:	180b883a 	mov	r5,r3
 80004bc:	2005883a 	mov	r2,r4
 80004c0:	2807883a 	mov	r3,r5
 80004c4:	0009883a 	mov	r4,zero
 80004c8:	016ffc34 	movhi	r5,49136
 80004cc:	100d883a 	mov	r6,r2
 80004d0:	180f883a 	mov	r7,r3
 80004d4:	80031740 	call	8003174 <__divdf3>
 80004d8:	1009883a 	mov	r4,r2
 80004dc:	180b883a 	mov	r5,r3
 80004e0:	2005883a 	mov	r2,r4
 80004e4:	2807883a 	mov	r3,r5
 80004e8:	8009883a 	mov	r4,r16
 80004ec:	880b883a 	mov	r5,r17
 80004f0:	100d883a 	mov	r6,r2
 80004f4:	180f883a 	mov	r7,r3
 80004f8:	8002d3c0 	call	8002d3c <__adddf3>
 80004fc:	1009883a 	mov	r4,r2
 8000500:	180b883a 	mov	r5,r3
 8000504:	2005883a 	mov	r2,r4
 8000508:	2807883a 	mov	r3,r5
 800050c:	1009883a 	mov	r4,r2
 8000510:	180b883a 	mov	r5,r3
 8000514:	80037a40 	call	80037a4 <__truncdfsf2>
 8000518:	e0bffd15 	stw	r2,-12(fp)
		max_x = target_x + 1/(pow(1.5, zoom));
 800051c:	e13ff217 	ldw	r4,-56(fp)
 8000520:	80028580 	call	8002858 <__extendsfdf2>
 8000524:	1021883a 	mov	r16,r2
 8000528:	1823883a 	mov	r17,r3
 800052c:	e13ffe17 	ldw	r4,-8(fp)
 8000530:	80036740 	call	8003674 <__floatsidf>
 8000534:	100f883a 	mov	r7,r2
 8000538:	1811883a 	mov	r8,r3
 800053c:	0009883a 	mov	r4,zero
 8000540:	014ffe34 	movhi	r5,16376
 8000544:	380d883a 	mov	r6,r7
 8000548:	400f883a 	mov	r7,r8
 800054c:	80006f40 	call	80006f4 <pow>
 8000550:	100f883a 	mov	r7,r2
 8000554:	1811883a 	mov	r8,r3
 8000558:	0009883a 	mov	r4,zero
 800055c:	014ffc34 	movhi	r5,16368
 8000560:	380d883a 	mov	r6,r7
 8000564:	400f883a 	mov	r7,r8
 8000568:	80031740 	call	8003174 <__divdf3>
 800056c:	1009883a 	mov	r4,r2
 8000570:	180b883a 	mov	r5,r3
 8000574:	2005883a 	mov	r2,r4
 8000578:	2807883a 	mov	r3,r5
 800057c:	8009883a 	mov	r4,r16
 8000580:	880b883a 	mov	r5,r17
 8000584:	100d883a 	mov	r6,r2
 8000588:	180f883a 	mov	r7,r3
 800058c:	8002d3c0 	call	8002d3c <__adddf3>
 8000590:	1009883a 	mov	r4,r2
 8000594:	180b883a 	mov	r5,r3
 8000598:	2005883a 	mov	r2,r4
 800059c:	2807883a 	mov	r3,r5
 80005a0:	1009883a 	mov	r4,r2
 80005a4:	180b883a 	mov	r5,r3
 80005a8:	80037a40 	call	80037a4 <__truncdfsf2>
 80005ac:	e0bffc15 	stw	r2,-16(fp)
		min_y = target_y - 0.75/(pow(1.5, zoom));
 80005b0:	e13ff117 	ldw	r4,-60(fp)
 80005b4:	80028580 	call	8002858 <__extendsfdf2>
 80005b8:	1021883a 	mov	r16,r2
 80005bc:	1823883a 	mov	r17,r3
 80005c0:	e13ffe17 	ldw	r4,-8(fp)
 80005c4:	80036740 	call	8003674 <__floatsidf>
 80005c8:	100f883a 	mov	r7,r2
 80005cc:	1811883a 	mov	r8,r3
 80005d0:	0009883a 	mov	r4,zero
 80005d4:	014ffe34 	movhi	r5,16376
 80005d8:	380d883a 	mov	r6,r7
 80005dc:	400f883a 	mov	r7,r8
 80005e0:	80006f40 	call	80006f4 <pow>
 80005e4:	100f883a 	mov	r7,r2
 80005e8:	1811883a 	mov	r8,r3
 80005ec:	0009883a 	mov	r4,zero
 80005f0:	016ffa34 	movhi	r5,49128
 80005f4:	380d883a 	mov	r6,r7
 80005f8:	400f883a 	mov	r7,r8
 80005fc:	80031740 	call	8003174 <__divdf3>
 8000600:	1009883a 	mov	r4,r2
 8000604:	180b883a 	mov	r5,r3
 8000608:	2005883a 	mov	r2,r4
 800060c:	2807883a 	mov	r3,r5
 8000610:	8009883a 	mov	r4,r16
 8000614:	880b883a 	mov	r5,r17
 8000618:	100d883a 	mov	r6,r2
 800061c:	180f883a 	mov	r7,r3
 8000620:	8002d3c0 	call	8002d3c <__adddf3>
 8000624:	1009883a 	mov	r4,r2
 8000628:	180b883a 	mov	r5,r3
 800062c:	2005883a 	mov	r2,r4
 8000630:	2807883a 	mov	r3,r5
 8000634:	1009883a 	mov	r4,r2
 8000638:	180b883a 	mov	r5,r3
 800063c:	80037a40 	call	80037a4 <__truncdfsf2>
 8000640:	e0bffb15 	stw	r2,-20(fp)
		max_y = target_y + 0.75/(pow(1.5, zoom));
 8000644:	e13ff117 	ldw	r4,-60(fp)
 8000648:	80028580 	call	8002858 <__extendsfdf2>
 800064c:	1021883a 	mov	r16,r2
 8000650:	1823883a 	mov	r17,r3
 8000654:	e13ffe17 	ldw	r4,-8(fp)
 8000658:	80036740 	call	8003674 <__floatsidf>
 800065c:	100f883a 	mov	r7,r2
 8000660:	1811883a 	mov	r8,r3
 8000664:	0009883a 	mov	r4,zero
 8000668:	014ffe34 	movhi	r5,16376
 800066c:	380d883a 	mov	r6,r7
 8000670:	400f883a 	mov	r7,r8
 8000674:	80006f40 	call	80006f4 <pow>
 8000678:	100f883a 	mov	r7,r2
 800067c:	1811883a 	mov	r8,r3
 8000680:	0009883a 	mov	r4,zero
 8000684:	014ffa34 	movhi	r5,16360
 8000688:	380d883a 	mov	r6,r7
 800068c:	400f883a 	mov	r7,r8
 8000690:	80031740 	call	8003174 <__divdf3>
 8000694:	1009883a 	mov	r4,r2
 8000698:	180b883a 	mov	r5,r3
 800069c:	2005883a 	mov	r2,r4
 80006a0:	2807883a 	mov	r3,r5
 80006a4:	8009883a 	mov	r4,r16
 80006a8:	880b883a 	mov	r5,r17
 80006ac:	100d883a 	mov	r6,r2
 80006b0:	180f883a 	mov	r7,r3
 80006b4:	8002d3c0 	call	8002d3c <__adddf3>
 80006b8:	1009883a 	mov	r4,r2
 80006bc:	180b883a 	mov	r5,r3
 80006c0:	2005883a 	mov	r2,r4
 80006c4:	2807883a 	mov	r3,r5
 80006c8:	1009883a 	mov	r4,r2
 80006cc:	180b883a 	mov	r5,r3
 80006d0:	80037a40 	call	80037a4 <__truncdfsf2>
 80006d4:	e0bffa15 	stw	r2,-24(fp)
		zoom += 1;
 80006d8:	e0bffe17 	ldw	r2,-8(fp)
 80006dc:	10800044 	addi	r2,r2,1
 80006e0:	e0bffe15 	stw	r2,-8(fp)
		alt_up_pixel_buffer_dma_clear_screen(my_pixel_buffer,0);
 80006e4:	d125b417 	ldw	r4,-26928(gp)
 80006e8:	000b883a 	mov	r5,zero
 80006ec:	80054180 	call	8005418 <alt_up_pixel_buffer_dma_clear_screen>
	}
 80006f0:	003eda06 	br	800025c <main+0x5c>

080006f4 <pow>:
 80006f4:	deffee04 	addi	sp,sp,-72
 80006f8:	ddc01015 	stw	r23,64(sp)
 80006fc:	05c20074 	movhi	r23,2049
 8000700:	bde55004 	addi	r23,r23,-27328
 8000704:	dd800f15 	stw	r22,60(sp)
 8000708:	dd400e15 	stw	r21,56(sp)
 800070c:	dd000d15 	stw	r20,52(sp)
 8000710:	dcc00c15 	stw	r19,48(sp)
 8000714:	dc800b15 	stw	r18,44(sp)
 8000718:	dc400a15 	stw	r17,40(sp)
 800071c:	dc000915 	stw	r16,36(sp)
 8000720:	2029883a 	mov	r20,r4
 8000724:	dfc01115 	stw	ra,68(sp)
 8000728:	3025883a 	mov	r18,r6
 800072c:	282b883a 	mov	r21,r5
 8000730:	3827883a 	mov	r19,r7
 8000734:	8000b7c0 	call	8000b7c <__ieee754_pow>
 8000738:	b9000017 	ldw	r4,0(r23)
 800073c:	05bfffc4 	movi	r22,-1
 8000740:	1021883a 	mov	r16,r2
 8000744:	1823883a 	mov	r17,r3
 8000748:	25800426 	beq	r4,r22,800075c <pow+0x68>
 800074c:	9009883a 	mov	r4,r18
 8000750:	980b883a 	mov	r5,r19
 8000754:	80021780 	call	8002178 <__isnand>
 8000758:	10000d26 	beq	r2,zero,8000790 <pow+0x9c>
 800075c:	8005883a 	mov	r2,r16
 8000760:	8807883a 	mov	r3,r17
 8000764:	dfc01117 	ldw	ra,68(sp)
 8000768:	ddc01017 	ldw	r23,64(sp)
 800076c:	dd800f17 	ldw	r22,60(sp)
 8000770:	dd400e17 	ldw	r21,56(sp)
 8000774:	dd000d17 	ldw	r20,52(sp)
 8000778:	dcc00c17 	ldw	r19,48(sp)
 800077c:	dc800b17 	ldw	r18,44(sp)
 8000780:	dc400a17 	ldw	r17,40(sp)
 8000784:	dc000917 	ldw	r16,36(sp)
 8000788:	dec01204 	addi	sp,sp,72
 800078c:	f800283a 	ret
 8000790:	a009883a 	mov	r4,r20
 8000794:	a80b883a 	mov	r5,r21
 8000798:	80021780 	call	8002178 <__isnand>
 800079c:	1000151e 	bne	r2,zero,80007f4 <pow+0x100>
 80007a0:	000d883a 	mov	r6,zero
 80007a4:	000f883a 	mov	r7,zero
 80007a8:	a009883a 	mov	r4,r20
 80007ac:	a80b883a 	mov	r5,r21
 80007b0:	80033cc0 	call	80033cc <__eqdf2>
 80007b4:	1000541e 	bne	r2,zero,8000908 <pow+0x214>
 80007b8:	000d883a 	mov	r6,zero
 80007bc:	000f883a 	mov	r7,zero
 80007c0:	9009883a 	mov	r4,r18
 80007c4:	980b883a 	mov	r5,r19
 80007c8:	80033cc0 	call	80033cc <__eqdf2>
 80007cc:	10002c1e 	bne	r2,zero,8000880 <pow+0x18c>
 80007d0:	b8800017 	ldw	r2,0(r23)
 80007d4:	d8000615 	stw	zero,24(sp)
 80007d8:	d8000715 	stw	zero,28(sp)
 80007dc:	10001226 	beq	r2,zero,8000828 <pow+0x134>
 80007e0:	008ffc34 	movhi	r2,16368
 80007e4:	d8800715 	stw	r2,28(sp)
 80007e8:	dc000617 	ldw	r16,24(sp)
 80007ec:	dc400717 	ldw	r17,28(sp)
 80007f0:	003fda06 	br	800075c <pow+0x68>
 80007f4:	000d883a 	mov	r6,zero
 80007f8:	000f883a 	mov	r7,zero
 80007fc:	9009883a 	mov	r4,r18
 8000800:	980b883a 	mov	r5,r19
 8000804:	80033cc0 	call	80033cc <__eqdf2>
 8000808:	103fd41e 	bne	r2,zero,800075c <pow+0x68>
 800080c:	b8c00017 	ldw	r3,0(r23)
 8000810:	010ffc34 	movhi	r4,16368
 8000814:	d8000615 	stw	zero,24(sp)
 8000818:	d9000715 	stw	r4,28(sp)
 800081c:	1d801526 	beq	r3,r22,8000874 <pow+0x180>
 8000820:	00800084 	movi	r2,2
 8000824:	18801326 	beq	r3,r2,8000874 <pow+0x180>
 8000828:	00820034 	movhi	r2,2048
 800082c:	109f4604 	addi	r2,r2,32024
 8000830:	00c00044 	movi	r3,1
 8000834:	d809883a 	mov	r4,sp
 8000838:	dcc00515 	stw	r19,20(sp)
 800083c:	dd400315 	stw	r21,12(sp)
 8000840:	d8800115 	stw	r2,4(sp)
 8000844:	d8c00015 	stw	r3,0(sp)
 8000848:	dc800415 	stw	r18,16(sp)
 800084c:	dd000215 	stw	r20,8(sp)
 8000850:	d8000815 	stw	zero,32(sp)
 8000854:	80021a80 	call	80021a8 <matherr>
 8000858:	10002726 	beq	r2,zero,80008f8 <pow+0x204>
 800085c:	d8800817 	ldw	r2,32(sp)
 8000860:	103fe126 	beq	r2,zero,80007e8 <pow+0xf4>
 8000864:	800428c0 	call	800428c <__errno>
 8000868:	d8c00817 	ldw	r3,32(sp)
 800086c:	10c00015 	stw	r3,0(r2)
 8000870:	003fdd06 	br	80007e8 <pow+0xf4>
 8000874:	d9000715 	stw	r4,28(sp)
 8000878:	d8000615 	stw	zero,24(sp)
 800087c:	003fda06 	br	80007e8 <pow+0xf4>
 8000880:	9009883a 	mov	r4,r18
 8000884:	980b883a 	mov	r5,r19
 8000888:	800215c0 	call	800215c <finite>
 800088c:	103fb326 	beq	r2,zero,800075c <pow+0x68>
 8000890:	000d883a 	mov	r6,zero
 8000894:	000f883a 	mov	r7,zero
 8000898:	9009883a 	mov	r4,r18
 800089c:	980b883a 	mov	r5,r19
 80008a0:	80035640 	call	8003564 <__ltdf2>
 80008a4:	103fad0e 	bge	r2,zero,800075c <pow+0x68>
 80008a8:	b9000017 	ldw	r4,0(r23)
 80008ac:	00800044 	movi	r2,1
 80008b0:	00c20034 	movhi	r3,2048
 80008b4:	18df4604 	addi	r3,r3,32024
 80008b8:	d8800015 	stw	r2,0(sp)
 80008bc:	d8c00115 	stw	r3,4(sp)
 80008c0:	dd400315 	stw	r21,12(sp)
 80008c4:	dcc00515 	stw	r19,20(sp)
 80008c8:	d8000815 	stw	zero,32(sp)
 80008cc:	dd000215 	stw	r20,8(sp)
 80008d0:	dc800415 	stw	r18,16(sp)
 80008d4:	20005626 	beq	r4,zero,8000a30 <pow+0x33c>
 80008d8:	00bffc34 	movhi	r2,65520
 80008dc:	d8800715 	stw	r2,28(sp)
 80008e0:	00800084 	movi	r2,2
 80008e4:	d8000615 	stw	zero,24(sp)
 80008e8:	20800326 	beq	r4,r2,80008f8 <pow+0x204>
 80008ec:	d809883a 	mov	r4,sp
 80008f0:	80021a80 	call	80021a8 <matherr>
 80008f4:	103fd91e 	bne	r2,zero,800085c <pow+0x168>
 80008f8:	800428c0 	call	800428c <__errno>
 80008fc:	00c00844 	movi	r3,33
 8000900:	10c00015 	stw	r3,0(r2)
 8000904:	003fd506 	br	800085c <pow+0x168>
 8000908:	8009883a 	mov	r4,r16
 800090c:	880b883a 	mov	r5,r17
 8000910:	800215c0 	call	800215c <finite>
 8000914:	10002426 	beq	r2,zero,80009a8 <pow+0x2b4>
 8000918:	000d883a 	mov	r6,zero
 800091c:	000f883a 	mov	r7,zero
 8000920:	8009883a 	mov	r4,r16
 8000924:	880b883a 	mov	r5,r17
 8000928:	80033cc0 	call	80033cc <__eqdf2>
 800092c:	103f8b1e 	bne	r2,zero,800075c <pow+0x68>
 8000930:	a009883a 	mov	r4,r20
 8000934:	a80b883a 	mov	r5,r21
 8000938:	800215c0 	call	800215c <finite>
 800093c:	103f8726 	beq	r2,zero,800075c <pow+0x68>
 8000940:	9009883a 	mov	r4,r18
 8000944:	980b883a 	mov	r5,r19
 8000948:	800215c0 	call	800215c <finite>
 800094c:	103f8326 	beq	r2,zero,800075c <pow+0x68>
 8000950:	b9000017 	ldw	r4,0(r23)
 8000954:	00800104 	movi	r2,4
 8000958:	d8800015 	stw	r2,0(sp)
 800095c:	00c20034 	movhi	r3,2048
 8000960:	18df4604 	addi	r3,r3,32024
 8000964:	00800084 	movi	r2,2
 8000968:	d8c00115 	stw	r3,4(sp)
 800096c:	dd400315 	stw	r21,12(sp)
 8000970:	dcc00515 	stw	r19,20(sp)
 8000974:	d8000815 	stw	zero,32(sp)
 8000978:	dd000215 	stw	r20,8(sp)
 800097c:	dc800415 	stw	r18,16(sp)
 8000980:	d8000615 	stw	zero,24(sp)
 8000984:	d8000715 	stw	zero,28(sp)
 8000988:	20800326 	beq	r4,r2,8000998 <pow+0x2a4>
 800098c:	d809883a 	mov	r4,sp
 8000990:	80021a80 	call	80021a8 <matherr>
 8000994:	103fb11e 	bne	r2,zero,800085c <pow+0x168>
 8000998:	800428c0 	call	800428c <__errno>
 800099c:	00c00884 	movi	r3,34
 80009a0:	10c00015 	stw	r3,0(r2)
 80009a4:	003fad06 	br	800085c <pow+0x168>
 80009a8:	a009883a 	mov	r4,r20
 80009ac:	a80b883a 	mov	r5,r21
 80009b0:	800215c0 	call	800215c <finite>
 80009b4:	103fd826 	beq	r2,zero,8000918 <pow+0x224>
 80009b8:	9009883a 	mov	r4,r18
 80009bc:	980b883a 	mov	r5,r19
 80009c0:	800215c0 	call	800215c <finite>
 80009c4:	103fd426 	beq	r2,zero,8000918 <pow+0x224>
 80009c8:	880b883a 	mov	r5,r17
 80009cc:	8009883a 	mov	r4,r16
 80009d0:	80021780 	call	8002178 <__isnand>
 80009d4:	10001926 	beq	r2,zero,8000a3c <pow+0x348>
 80009d8:	bc000017 	ldw	r16,0(r23)
 80009dc:	00800044 	movi	r2,1
 80009e0:	00c20034 	movhi	r3,2048
 80009e4:	18df4604 	addi	r3,r3,32024
 80009e8:	d8800015 	stw	r2,0(sp)
 80009ec:	d8c00115 	stw	r3,4(sp)
 80009f0:	dd400315 	stw	r21,12(sp)
 80009f4:	dcc00515 	stw	r19,20(sp)
 80009f8:	d8000815 	stw	zero,32(sp)
 80009fc:	dd000215 	stw	r20,8(sp)
 8000a00:	dc800415 	stw	r18,16(sp)
 8000a04:	80000a26 	beq	r16,zero,8000a30 <pow+0x33c>
 8000a08:	0009883a 	mov	r4,zero
 8000a0c:	000d883a 	mov	r6,zero
 8000a10:	000b883a 	mov	r5,zero
 8000a14:	000f883a 	mov	r7,zero
 8000a18:	80031740 	call	8003174 <__divdf3>
 8000a1c:	d8800615 	stw	r2,24(sp)
 8000a20:	00800084 	movi	r2,2
 8000a24:	d8c00715 	stw	r3,28(sp)
 8000a28:	80bfb01e 	bne	r16,r2,80008ec <pow+0x1f8>
 8000a2c:	003fb206 	br	80008f8 <pow+0x204>
 8000a30:	d8000615 	stw	zero,24(sp)
 8000a34:	d8000715 	stw	zero,28(sp)
 8000a38:	003fac06 	br	80008ec <pow+0x1f8>
 8000a3c:	b8800017 	ldw	r2,0(r23)
 8000a40:	00c000c4 	movi	r3,3
 8000a44:	01020034 	movhi	r4,2048
 8000a48:	211f4604 	addi	r4,r4,32024
 8000a4c:	d8c00015 	stw	r3,0(sp)
 8000a50:	d9000115 	stw	r4,4(sp)
 8000a54:	d8000815 	stw	zero,32(sp)
 8000a58:	dd000215 	stw	r20,8(sp)
 8000a5c:	dd400315 	stw	r21,12(sp)
 8000a60:	dc800415 	stw	r18,16(sp)
 8000a64:	dcc00515 	stw	r19,20(sp)
 8000a68:	1000251e 	bne	r2,zero,8000b00 <pow+0x40c>
 8000a6c:	05b80034 	movhi	r22,57344
 8000a70:	0091fc34 	movhi	r2,18416
 8000a74:	10bfffc4 	addi	r2,r2,-1
 8000a78:	000d883a 	mov	r6,zero
 8000a7c:	000f883a 	mov	r7,zero
 8000a80:	a80b883a 	mov	r5,r21
 8000a84:	a009883a 	mov	r4,r20
 8000a88:	d8800715 	stw	r2,28(sp)
 8000a8c:	dd800615 	stw	r22,24(sp)
 8000a90:	80035640 	call	8003564 <__ltdf2>
 8000a94:	103fbd0e 	bge	r2,zero,800098c <pow+0x298>
 8000a98:	0005883a 	mov	r2,zero
 8000a9c:	00cff834 	movhi	r3,16352
 8000aa0:	180f883a 	mov	r7,r3
 8000aa4:	100d883a 	mov	r6,r2
 8000aa8:	980b883a 	mov	r5,r19
 8000aac:	9009883a 	mov	r4,r18
 8000ab0:	8002db00 	call	8002db0 <__muldf3>
 8000ab4:	1009883a 	mov	r4,r2
 8000ab8:	180b883a 	mov	r5,r3
 8000abc:	1021883a 	mov	r16,r2
 8000ac0:	1823883a 	mov	r17,r3
 8000ac4:	80021c00 	call	80021c0 <rint>
 8000ac8:	180f883a 	mov	r7,r3
 8000acc:	8009883a 	mov	r4,r16
 8000ad0:	880b883a 	mov	r5,r17
 8000ad4:	100d883a 	mov	r6,r2
 8000ad8:	80034540 	call	8003454 <__nedf2>
 8000adc:	10000426 	beq	r2,zero,8000af0 <pow+0x3fc>
 8000ae0:	00b1fc34 	movhi	r2,51184
 8000ae4:	10bfffc4 	addi	r2,r2,-1
 8000ae8:	dd800615 	stw	r22,24(sp)
 8000aec:	d8800715 	stw	r2,28(sp)
 8000af0:	b8c00017 	ldw	r3,0(r23)
 8000af4:	00800084 	movi	r2,2
 8000af8:	18bfa41e 	bne	r3,r2,800098c <pow+0x298>
 8000afc:	003fa606 	br	8000998 <pow+0x2a4>
 8000b00:	009ffc34 	movhi	r2,32752
 8000b04:	000d883a 	mov	r6,zero
 8000b08:	000f883a 	mov	r7,zero
 8000b0c:	a80b883a 	mov	r5,r21
 8000b10:	a009883a 	mov	r4,r20
 8000b14:	d8800715 	stw	r2,28(sp)
 8000b18:	d8000615 	stw	zero,24(sp)
 8000b1c:	80035640 	call	8003564 <__ltdf2>
 8000b20:	103ff30e 	bge	r2,zero,8000af0 <pow+0x3fc>
 8000b24:	0005883a 	mov	r2,zero
 8000b28:	00cff834 	movhi	r3,16352
 8000b2c:	180f883a 	mov	r7,r3
 8000b30:	100d883a 	mov	r6,r2
 8000b34:	980b883a 	mov	r5,r19
 8000b38:	9009883a 	mov	r4,r18
 8000b3c:	8002db00 	call	8002db0 <__muldf3>
 8000b40:	1009883a 	mov	r4,r2
 8000b44:	180b883a 	mov	r5,r3
 8000b48:	1021883a 	mov	r16,r2
 8000b4c:	1823883a 	mov	r17,r3
 8000b50:	80021c00 	call	80021c0 <rint>
 8000b54:	180f883a 	mov	r7,r3
 8000b58:	8009883a 	mov	r4,r16
 8000b5c:	880b883a 	mov	r5,r17
 8000b60:	100d883a 	mov	r6,r2
 8000b64:	80034540 	call	8003454 <__nedf2>
 8000b68:	103fe126 	beq	r2,zero,8000af0 <pow+0x3fc>
 8000b6c:	00bffc34 	movhi	r2,65520
 8000b70:	d8800715 	stw	r2,28(sp)
 8000b74:	d8000615 	stw	zero,24(sp)
 8000b78:	003fdd06 	br	8000af0 <pow+0x3fc>

08000b7c <__ieee754_pow>:
 8000b7c:	deffbb04 	addi	sp,sp,-276
 8000b80:	3005883a 	mov	r2,r6
 8000b84:	dd404015 	stw	r21,256(sp)
 8000b88:	dd003f15 	stw	r20,252(sp)
 8000b8c:	d9802815 	stw	r6,160(sp)
 8000b90:	2029883a 	mov	r20,r4
 8000b94:	282b883a 	mov	r21,r5
 8000b98:	3009883a 	mov	r4,r6
 8000b9c:	380b883a 	mov	r5,r7
 8000ba0:	01a00034 	movhi	r6,32768
 8000ba4:	31bfffc4 	addi	r6,r6,-1
 8000ba8:	dc003b15 	stw	r16,236(sp)
 8000bac:	29a0703a 	and	r16,r5,r6
 8000bb0:	1404b03a 	or	r2,r2,r16
 8000bb4:	dd804115 	stw	r22,260(sp)
 8000bb8:	dc403c15 	stw	r17,240(sp)
 8000bbc:	d9c02915 	stw	r7,164(sp)
 8000bc0:	382d883a 	mov	r22,r7
 8000bc4:	dfc04415 	stw	ra,272(sp)
 8000bc8:	200f883a 	mov	r7,r4
 8000bcc:	df004315 	stw	fp,268(sp)
 8000bd0:	ddc04215 	stw	r23,264(sp)
 8000bd4:	dcc03e15 	stw	r19,248(sp)
 8000bd8:	dc803d15 	stw	r18,244(sp)
 8000bdc:	a023883a 	mov	r17,r20
 8000be0:	2809883a 	mov	r4,r5
 8000be4:	10000826 	beq	r2,zero,8000c08 <__ieee754_pow+0x8c>
 8000be8:	a9a4703a 	and	r18,r21,r6
 8000bec:	009ffc34 	movhi	r2,32752
 8000bf0:	a827883a 	mov	r19,r21
 8000bf4:	1480180e 	bge	r2,r18,8000c58 <__ieee754_pow+0xdc>
 8000bf8:	00b00434 	movhi	r2,49168
 8000bfc:	9085883a 	add	r2,r18,r2
 8000c00:	8884b03a 	or	r2,r17,r2
 8000c04:	1000321e 	bne	r2,zero,8000cd0 <__ieee754_pow+0x154>
 8000c08:	0009883a 	mov	r4,zero
 8000c0c:	014ffc34 	movhi	r5,16368
 8000c10:	d9002815 	stw	r4,160(sp)
 8000c14:	d9402915 	stw	r5,164(sp)
 8000c18:	d9002817 	ldw	r4,160(sp)
 8000c1c:	d9402917 	ldw	r5,164(sp)
 8000c20:	2005883a 	mov	r2,r4
 8000c24:	2807883a 	mov	r3,r5
 8000c28:	dfc04417 	ldw	ra,272(sp)
 8000c2c:	df004317 	ldw	fp,268(sp)
 8000c30:	ddc04217 	ldw	r23,264(sp)
 8000c34:	dd804117 	ldw	r22,260(sp)
 8000c38:	dd404017 	ldw	r21,256(sp)
 8000c3c:	dd003f17 	ldw	r20,252(sp)
 8000c40:	dcc03e17 	ldw	r19,248(sp)
 8000c44:	dc803d17 	ldw	r18,244(sp)
 8000c48:	dc403c17 	ldw	r17,240(sp)
 8000c4c:	dc003b17 	ldw	r16,236(sp)
 8000c50:	dec04504 	addi	sp,sp,276
 8000c54:	f800283a 	ret
 8000c58:	90802b26 	beq	r18,r2,8000d08 <__ieee754_pow+0x18c>
 8000c5c:	143fe616 	blt	r2,r16,8000bf8 <__ieee754_pow+0x7c>
 8000c60:	80806126 	beq	r16,r2,8000de8 <__ieee754_pow+0x26c>
 8000c64:	982e403a 	cmpge	r23,r19,zero
 8000c68:	b8004e26 	beq	r23,zero,8000da4 <__ieee754_pow+0x228>
 8000c6c:	0039883a 	mov	fp,zero
 8000c70:	3800281e 	bne	r7,zero,8000d14 <__ieee754_pow+0x198>
 8000c74:	009ffc34 	movhi	r2,32752
 8000c78:	80804f26 	beq	r16,r2,8000db8 <__ieee754_pow+0x23c>
 8000c7c:	008ffc34 	movhi	r2,16368
 8000c80:	80808226 	beq	r16,r2,8000e8c <__ieee754_pow+0x310>
 8000c84:	00900034 	movhi	r2,16384
 8000c88:	20828426 	beq	r4,r2,800169c <__ieee754_pow+0xb20>
 8000c8c:	008ff834 	movhi	r2,16352
 8000c90:	2080201e 	bne	r4,r2,8000d14 <__ieee754_pow+0x198>
 8000c94:	98001f16 	blt	r19,zero,8000d14 <__ieee754_pow+0x198>
 8000c98:	a80b883a 	mov	r5,r21
 8000c9c:	a009883a 	mov	r4,r20
 8000ca0:	dfc04417 	ldw	ra,272(sp)
 8000ca4:	df004317 	ldw	fp,268(sp)
 8000ca8:	ddc04217 	ldw	r23,264(sp)
 8000cac:	dd804117 	ldw	r22,260(sp)
 8000cb0:	dd404017 	ldw	r21,256(sp)
 8000cb4:	dd003f17 	ldw	r20,252(sp)
 8000cb8:	dcc03e17 	ldw	r19,248(sp)
 8000cbc:	dc803d17 	ldw	r18,244(sp)
 8000cc0:	dc403c17 	ldw	r17,240(sp)
 8000cc4:	dc003b17 	ldw	r16,236(sp)
 8000cc8:	dec04504 	addi	sp,sp,276
 8000ccc:	8001e7c1 	jmpi	8001e7c <__ieee754_sqrt>
 8000cd0:	01020034 	movhi	r4,2048
 8000cd4:	211f4704 	addi	r4,r4,32028
 8000cd8:	dfc04417 	ldw	ra,272(sp)
 8000cdc:	df004317 	ldw	fp,268(sp)
 8000ce0:	ddc04217 	ldw	r23,264(sp)
 8000ce4:	dd804117 	ldw	r22,260(sp)
 8000ce8:	dd404017 	ldw	r21,256(sp)
 8000cec:	dd003f17 	ldw	r20,252(sp)
 8000cf0:	dcc03e17 	ldw	r19,248(sp)
 8000cf4:	dc803d17 	ldw	r18,244(sp)
 8000cf8:	dc403c17 	ldw	r17,240(sp)
 8000cfc:	dc003b17 	ldw	r16,236(sp)
 8000d00:	dec04504 	addi	sp,sp,276
 8000d04:	80021b01 	jmpi	80021b0 <nan>
 8000d08:	a03fbb1e 	bne	r20,zero,8000bf8 <__ieee754_pow+0x7c>
 8000d0c:	003fd306 	br	8000c5c <__ieee754_pow+0xe0>
 8000d10:	0039883a 	mov	fp,zero
 8000d14:	a009883a 	mov	r4,r20
 8000d18:	a80b883a 	mov	r5,r21
 8000d1c:	80021440 	call	8002144 <fabs>
 8000d20:	1015883a 	mov	r10,r2
 8000d24:	1817883a 	mov	r11,r3
 8000d28:	88001226 	beq	r17,zero,8000d74 <__ieee754_pow+0x1f8>
 8000d2c:	9804d7fa 	srli	r2,r19,31
 8000d30:	10bfffc4 	addi	r2,r2,-1
 8000d34:	1706b03a 	or	r3,r2,fp
 8000d38:	d8802515 	stw	r2,148(sp)
 8000d3c:	18002c1e 	bne	r3,zero,8000df0 <__ieee754_pow+0x274>
 8000d40:	a80f883a 	mov	r7,r21
 8000d44:	a009883a 	mov	r4,r20
 8000d48:	a80b883a 	mov	r5,r21
 8000d4c:	a00d883a 	mov	r6,r20
 8000d50:	8002cbc0 	call	8002cbc <__subdf3>
 8000d54:	1009883a 	mov	r4,r2
 8000d58:	180b883a 	mov	r5,r3
 8000d5c:	100d883a 	mov	r6,r2
 8000d60:	180f883a 	mov	r7,r3
 8000d64:	80031740 	call	8003174 <__divdf3>
 8000d68:	d8802815 	stw	r2,160(sp)
 8000d6c:	d8c02915 	stw	r3,164(sp)
 8000d70:	003fa906 	br	8000c18 <__ieee754_pow+0x9c>
 8000d74:	009ffc34 	movhi	r2,32752
 8000d78:	90800326 	beq	r18,r2,8000d88 <__ieee754_pow+0x20c>
 8000d7c:	90000226 	beq	r18,zero,8000d88 <__ieee754_pow+0x20c>
 8000d80:	008ffc34 	movhi	r2,16368
 8000d84:	90bfe91e 	bne	r18,r2,8000d2c <__ieee754_pow+0x1b0>
 8000d88:	b0026316 	blt	r22,zero,8001718 <__ieee754_pow+0xb9c>
 8000d8c:	5011883a 	mov	r8,r10
 8000d90:	5813883a 	mov	r9,r11
 8000d94:	b8023126 	beq	r23,zero,800165c <__ieee754_pow+0xae0>
 8000d98:	da002815 	stw	r8,160(sp)
 8000d9c:	da402915 	stw	r9,164(sp)
 8000da0:	003f9d06 	br	8000c18 <__ieee754_pow+0x9c>
 8000da4:	0090d034 	movhi	r2,17216
 8000da8:	10bfffc4 	addi	r2,r2,-1
 8000dac:	1400270e 	bge	r2,r16,8000e4c <__ieee754_pow+0x2d0>
 8000db0:	07000084 	movi	fp,2
 8000db4:	003fae06 	br	8000c70 <__ieee754_pow+0xf4>
 8000db8:	00b00434 	movhi	r2,49168
 8000dbc:	9085883a 	add	r2,r18,r2
 8000dc0:	8884b03a 	or	r2,r17,r2
 8000dc4:	103f9026 	beq	r2,zero,8000c08 <__ieee754_pow+0x8c>
 8000dc8:	008ffc34 	movhi	r2,16368
 8000dcc:	10bfffc4 	addi	r2,r2,-1
 8000dd0:	1482d00e 	bge	r2,r18,8001914 <__ieee754_pow+0xd98>
 8000dd4:	b03f900e 	bge	r22,zero,8000c18 <__ieee754_pow+0x9c>
 8000dd8:	0005883a 	mov	r2,zero
 8000ddc:	d8802815 	stw	r2,160(sp)
 8000de0:	d8802915 	stw	r2,164(sp)
 8000de4:	003f8c06 	br	8000c18 <__ieee754_pow+0x9c>
 8000de8:	383f9e26 	beq	r7,zero,8000c64 <__ieee754_pow+0xe8>
 8000dec:	003f8206 	br	8000bf8 <__ieee754_pow+0x7c>
 8000df0:	00907834 	movhi	r2,16864
 8000df4:	1400290e 	bge	r2,r16,8000e9c <__ieee754_pow+0x320>
 8000df8:	0090fc34 	movhi	r2,17392
 8000dfc:	1402500e 	bge	r2,r16,8001740 <__ieee754_pow+0xbc4>
 8000e00:	008ffc34 	movhi	r2,16368
 8000e04:	10bfffc4 	addi	r2,r2,-1
 8000e08:	14800b0e 	bge	r2,r18,8000e38 <__ieee754_pow+0x2bc>
 8000e0c:	05800b0e 	bge	zero,r22,8000e3c <__ieee754_pow+0x2c0>
 8000e10:	00a20034 	movhi	r2,34816
 8000e14:	109d6704 	addi	r2,r2,30108
 8000e18:	00df8e34 	movhi	r3,32312
 8000e1c:	18f90f04 	addi	r3,r3,-7108
 8000e20:	100d883a 	mov	r6,r2
 8000e24:	180f883a 	mov	r7,r3
 8000e28:	1009883a 	mov	r4,r2
 8000e2c:	180b883a 	mov	r5,r3
 8000e30:	8002db00 	call	8002db0 <__muldf3>
 8000e34:	003fcc06 	br	8000d68 <__ieee754_pow+0x1ec>
 8000e38:	b03ff516 	blt	r22,zero,8000e10 <__ieee754_pow+0x294>
 8000e3c:	0007883a 	mov	r3,zero
 8000e40:	d8c02815 	stw	r3,160(sp)
 8000e44:	d8c02915 	stw	r3,164(sp)
 8000e48:	003f7306 	br	8000c18 <__ieee754_pow+0x9c>
 8000e4c:	008ffc34 	movhi	r2,16368
 8000e50:	10bfffc4 	addi	r2,r2,-1
 8000e54:	143f850e 	bge	r2,r16,8000c6c <__ieee754_pow+0xf0>
 8000e58:	8005d53a 	srai	r2,r16,20
 8000e5c:	01400504 	movi	r5,20
 8000e60:	10ff0044 	addi	r3,r2,-1023
 8000e64:	28c3e10e 	bge	r5,r3,8001dec <__ieee754_pow+0x1270>
 8000e68:	00800d04 	movi	r2,52
 8000e6c:	10c5c83a 	sub	r2,r2,r3
 8000e70:	3886d83a 	srl	r3,r7,r2
 8000e74:	1884983a 	sll	r2,r3,r2
 8000e78:	38bf7c1e 	bne	r7,r2,8000c6c <__ieee754_pow+0xf0>
 8000e7c:	18c0004c 	andi	r3,r3,1
 8000e80:	00800084 	movi	r2,2
 8000e84:	10f9c83a 	sub	fp,r2,r3
 8000e88:	003f7906 	br	8000c70 <__ieee754_pow+0xf4>
 8000e8c:	b0038516 	blt	r22,zero,8001ca4 <__ieee754_pow+0x1128>
 8000e90:	dd002815 	stw	r20,160(sp)
 8000e94:	dd402915 	stw	r21,164(sp)
 8000e98:	003f5f06 	br	8000c18 <__ieee754_pow+0x9c>
 8000e9c:	00800434 	movhi	r2,16
 8000ea0:	10bfffc4 	addi	r2,r2,-1
 8000ea4:	1482900e 	bge	r2,r18,80018e8 <__ieee754_pow+0xd6c>
 8000ea8:	000b883a 	mov	r5,zero
 8000eac:	9005d53a 	srai	r2,r18,20
 8000eb0:	00c00434 	movhi	r3,16
 8000eb4:	18ffffc4 	addi	r3,r3,-1
 8000eb8:	90c8703a 	and	r4,r18,r3
 8000ebc:	2887883a 	add	r3,r5,r2
 8000ec0:	18bf0044 	addi	r2,r3,-1023
 8000ec4:	d8800015 	stw	r2,0(sp)
 8000ec8:	00800134 	movhi	r2,4
 8000ecc:	10a62384 	addi	r2,r2,-26482
 8000ed0:	250ffc34 	orhi	r20,r4,16368
 8000ed4:	1101ee0e 	bge	r2,r4,8001690 <__ieee754_pow+0xb14>
 8000ed8:	00800334 	movhi	r2,12
 8000edc:	10ad9e44 	addi	r2,r2,-18823
 8000ee0:	1101e716 	blt	r2,r4,8001680 <__ieee754_pow+0xb04>
 8000ee4:	01000044 	movi	r4,1
 8000ee8:	04000334 	movhi	r16,12
 8000eec:	200890fa 	slli	r4,r4,3
 8000ef0:	da800115 	stw	r10,4(sp)
 8000ef4:	dd000215 	stw	r20,8(sp)
 8000ef8:	d9002c15 	stw	r4,176(sp)
 8000efc:	d9402c17 	ldw	r5,176(sp)
 8000f00:	01020034 	movhi	r4,2048
 8000f04:	211f4804 	addi	r4,r4,32032
 8000f08:	a02bd07a 	srai	r21,r20,1
 8000f0c:	2909883a 	add	r4,r5,r4
 8000f10:	25800017 	ldw	r22,0(r4)
 8000f14:	25c00117 	ldw	r23,4(r4)
 8000f18:	a00b883a 	mov	r5,r20
 8000f1c:	5009883a 	mov	r4,r10
 8000f20:	b00d883a 	mov	r6,r22
 8000f24:	b80f883a 	mov	r7,r23
 8000f28:	8002cbc0 	call	8002cbc <__subdf3>
 8000f2c:	d9000117 	ldw	r4,4(sp)
 8000f30:	a00b883a 	mov	r5,r20
 8000f34:	b00d883a 	mov	r6,r22
 8000f38:	b80f883a 	mov	r7,r23
 8000f3c:	1025883a 	mov	r18,r2
 8000f40:	1827883a 	mov	r19,r3
 8000f44:	8002d3c0 	call	8002d3c <__adddf3>
 8000f48:	0011883a 	mov	r8,zero
 8000f4c:	024ffc34 	movhi	r9,16368
 8000f50:	480b883a 	mov	r5,r9
 8000f54:	4009883a 	mov	r4,r8
 8000f58:	180f883a 	mov	r7,r3
 8000f5c:	100d883a 	mov	r6,r2
 8000f60:	80031740 	call	8003174 <__divdf3>
 8000f64:	d8c02e15 	stw	r3,184(sp)
 8000f68:	d8800f15 	stw	r2,60(sp)
 8000f6c:	d8802d15 	stw	r2,180(sp)
 8000f70:	d8802e17 	ldw	r2,184(sp)
 8000f74:	d9800f17 	ldw	r6,60(sp)
 8000f78:	9009883a 	mov	r4,r18
 8000f7c:	980b883a 	mov	r5,r19
 8000f80:	100f883a 	mov	r7,r2
 8000f84:	dc800b15 	stw	r18,44(sp)
 8000f88:	dcc00c15 	stw	r19,48(sp)
 8000f8c:	d8801015 	stw	r2,64(sp)
 8000f90:	8002db00 	call	8002db0 <__muldf3>
 8000f94:	d8c03015 	stw	r3,192(sp)
 8000f98:	d9003017 	ldw	r4,192(sp)
 8000f9c:	d8802f15 	stw	r2,188(sp)
 8000fa0:	d8800315 	stw	r2,12(sp)
 8000fa4:	ad480034 	orhi	r21,r21,8192
 8000fa8:	0005883a 	mov	r2,zero
 8000fac:	ac2b883a 	add	r21,r21,r16
 8000fb0:	000b883a 	mov	r5,zero
 8000fb4:	1021883a 	mov	r16,r2
 8000fb8:	2005883a 	mov	r2,r4
 8000fbc:	800d883a 	mov	r6,r16
 8000fc0:	a80f883a 	mov	r7,r21
 8000fc4:	d9000415 	stw	r4,16(sp)
 8000fc8:	d9002715 	stw	r4,156(sp)
 8000fcc:	d9402615 	stw	r5,152(sp)
 8000fd0:	d9401615 	stw	r5,88(sp)
 8000fd4:	d9001715 	stw	r4,92(sp)
 8000fd8:	100b883a 	mov	r5,r2
 8000fdc:	0009883a 	mov	r4,zero
 8000fe0:	8002db00 	call	8002db0 <__muldf3>
 8000fe4:	d9000b17 	ldw	r4,44(sp)
 8000fe8:	980b883a 	mov	r5,r19
 8000fec:	180f883a 	mov	r7,r3
 8000ff0:	100d883a 	mov	r6,r2
 8000ff4:	8002cbc0 	call	8002cbc <__subdf3>
 8000ff8:	8009883a 	mov	r4,r16
 8000ffc:	a80b883a 	mov	r5,r21
 8001000:	b80f883a 	mov	r7,r23
 8001004:	b00d883a 	mov	r6,r22
 8001008:	1021883a 	mov	r16,r2
 800100c:	1823883a 	mov	r17,r3
 8001010:	8002cbc0 	call	8002cbc <__subdf3>
 8001014:	d9000117 	ldw	r4,4(sp)
 8001018:	a00b883a 	mov	r5,r20
 800101c:	180f883a 	mov	r7,r3
 8001020:	100d883a 	mov	r6,r2
 8001024:	8002cbc0 	call	8002cbc <__subdf3>
 8001028:	d9001617 	ldw	r4,88(sp)
 800102c:	d9402717 	ldw	r5,156(sp)
 8001030:	180f883a 	mov	r7,r3
 8001034:	100d883a 	mov	r6,r2
 8001038:	8002db00 	call	8002db0 <__muldf3>
 800103c:	180f883a 	mov	r7,r3
 8001040:	880b883a 	mov	r5,r17
 8001044:	8009883a 	mov	r4,r16
 8001048:	100d883a 	mov	r6,r2
 800104c:	8002cbc0 	call	8002cbc <__subdf3>
 8001050:	d9000f17 	ldw	r4,60(sp)
 8001054:	d9402e17 	ldw	r5,184(sp)
 8001058:	180f883a 	mov	r7,r3
 800105c:	100d883a 	mov	r6,r2
 8001060:	8002db00 	call	8002db0 <__muldf3>
 8001064:	d9000317 	ldw	r4,12(sp)
 8001068:	d9403017 	ldw	r5,192(sp)
 800106c:	d8803115 	stw	r2,196(sp)
 8001070:	200d883a 	mov	r6,r4
 8001074:	280f883a 	mov	r7,r5
 8001078:	d8c03215 	stw	r3,200(sp)
 800107c:	8002db00 	call	8002db0 <__muldf3>
 8001080:	1009883a 	mov	r4,r2
 8001084:	180b883a 	mov	r5,r3
 8001088:	100d883a 	mov	r6,r2
 800108c:	180f883a 	mov	r7,r3
 8001090:	1021883a 	mov	r16,r2
 8001094:	1823883a 	mov	r17,r3
 8001098:	8002db00 	call	8002db0 <__muldf3>
 800109c:	02129174 	movhi	r8,19013
 80010a0:	4213bbc4 	addi	r8,r8,20207
 80010a4:	024ff2b4 	movhi	r9,16330
 80010a8:	4a5f8a04 	addi	r9,r9,32296
 80010ac:	480f883a 	mov	r7,r9
 80010b0:	8009883a 	mov	r4,r16
 80010b4:	880b883a 	mov	r5,r17
 80010b8:	400d883a 	mov	r6,r8
 80010bc:	1029883a 	mov	r20,r2
 80010c0:	182b883a 	mov	r21,r3
 80010c4:	8002db00 	call	8002db0 <__muldf3>
 80010c8:	0224f2b4 	movhi	r8,37834
 80010cc:	4236d944 	addi	r8,r8,-9371
 80010d0:	024ff3b4 	movhi	r9,16334
 80010d4:	4a619284 	addi	r9,r9,-31158
 80010d8:	480f883a 	mov	r7,r9
 80010dc:	400d883a 	mov	r6,r8
 80010e0:	180b883a 	mov	r5,r3
 80010e4:	1009883a 	mov	r4,r2
 80010e8:	8002d3c0 	call	8002d3c <__adddf3>
 80010ec:	180f883a 	mov	r7,r3
 80010f0:	8009883a 	mov	r4,r16
 80010f4:	880b883a 	mov	r5,r17
 80010f8:	100d883a 	mov	r6,r2
 80010fc:	8002db00 	call	8002db0 <__muldf3>
 8001100:	022a4774 	movhi	r8,43293
 8001104:	42104044 	addi	r8,r8,16641
 8001108:	024ff474 	movhi	r9,16337
 800110c:	4a5d1804 	addi	r9,r9,29792
 8001110:	480f883a 	mov	r7,r9
 8001114:	400d883a 	mov	r6,r8
 8001118:	180b883a 	mov	r5,r3
 800111c:	1009883a 	mov	r4,r2
 8001120:	8002d3c0 	call	8002d3c <__adddf3>
 8001124:	180f883a 	mov	r7,r3
 8001128:	8009883a 	mov	r4,r16
 800112c:	880b883a 	mov	r5,r17
 8001130:	100d883a 	mov	r6,r2
 8001134:	8002db00 	call	8002db0 <__muldf3>
 8001138:	021463f4 	movhi	r8,20879
 800113c:	42099344 	addi	r8,r8,9805
 8001140:	024ff574 	movhi	r9,16341
 8001144:	4a555544 	addi	r9,r9,21845
 8001148:	480f883a 	mov	r7,r9
 800114c:	400d883a 	mov	r6,r8
 8001150:	180b883a 	mov	r5,r3
 8001154:	1009883a 	mov	r4,r2
 8001158:	8002d3c0 	call	8002d3c <__adddf3>
 800115c:	180f883a 	mov	r7,r3
 8001160:	8009883a 	mov	r4,r16
 8001164:	880b883a 	mov	r5,r17
 8001168:	100d883a 	mov	r6,r2
 800116c:	8002db00 	call	8002db0 <__muldf3>
 8001170:	0236dc34 	movhi	r8,56176
 8001174:	422affc4 	addi	r8,r8,-21505
 8001178:	024ff6f4 	movhi	r9,16347
 800117c:	4a5b6d84 	addi	r9,r9,28086
 8001180:	480f883a 	mov	r7,r9
 8001184:	400d883a 	mov	r6,r8
 8001188:	180b883a 	mov	r5,r3
 800118c:	1009883a 	mov	r4,r2
 8001190:	8002d3c0 	call	8002d3c <__adddf3>
 8001194:	180f883a 	mov	r7,r3
 8001198:	8009883a 	mov	r4,r16
 800119c:	880b883a 	mov	r5,r17
 80011a0:	100d883a 	mov	r6,r2
 80011a4:	8002db00 	call	8002db0 <__muldf3>
 80011a8:	020cccf4 	movhi	r8,13107
 80011ac:	420cc0c4 	addi	r8,r8,13059
 80011b0:	024ff8f4 	movhi	r9,16355
 80011b4:	4a4cccc4 	addi	r9,r9,13107
 80011b8:	480f883a 	mov	r7,r9
 80011bc:	400d883a 	mov	r6,r8
 80011c0:	180b883a 	mov	r5,r3
 80011c4:	1009883a 	mov	r4,r2
 80011c8:	8002d3c0 	call	8002d3c <__adddf3>
 80011cc:	180f883a 	mov	r7,r3
 80011d0:	a80b883a 	mov	r5,r21
 80011d4:	a009883a 	mov	r4,r20
 80011d8:	100d883a 	mov	r6,r2
 80011dc:	8002db00 	call	8002db0 <__muldf3>
 80011e0:	d9000317 	ldw	r4,12(sp)
 80011e4:	d9403017 	ldw	r5,192(sp)
 80011e8:	d9801617 	ldw	r6,88(sp)
 80011ec:	d9c02717 	ldw	r7,156(sp)
 80011f0:	1021883a 	mov	r16,r2
 80011f4:	1823883a 	mov	r17,r3
 80011f8:	8002d3c0 	call	8002d3c <__adddf3>
 80011fc:	d9003117 	ldw	r4,196(sp)
 8001200:	d9403217 	ldw	r5,200(sp)
 8001204:	180f883a 	mov	r7,r3
 8001208:	100d883a 	mov	r6,r2
 800120c:	d9001415 	stw	r4,80(sp)
 8001210:	d9401515 	stw	r5,84(sp)
 8001214:	8002db00 	call	8002db0 <__muldf3>
 8001218:	180f883a 	mov	r7,r3
 800121c:	8009883a 	mov	r4,r16
 8001220:	880b883a 	mov	r5,r17
 8001224:	100d883a 	mov	r6,r2
 8001228:	8002d3c0 	call	8002d3c <__adddf3>
 800122c:	d9001617 	ldw	r4,88(sp)
 8001230:	d9402717 	ldw	r5,156(sp)
 8001234:	d8803315 	stw	r2,204(sp)
 8001238:	200d883a 	mov	r6,r4
 800123c:	280f883a 	mov	r7,r5
 8001240:	d8c03415 	stw	r3,208(sp)
 8001244:	8002db00 	call	8002db0 <__muldf3>
 8001248:	182f883a 	mov	r23,r3
 800124c:	05500234 	movhi	r21,16392
 8001250:	0029883a 	mov	r20,zero
 8001254:	b80b883a 	mov	r5,r23
 8001258:	a00d883a 	mov	r6,r20
 800125c:	a80f883a 	mov	r7,r21
 8001260:	1009883a 	mov	r4,r2
 8001264:	d8800715 	stw	r2,28(sp)
 8001268:	d8c00815 	stw	r3,32(sp)
 800126c:	8002d3c0 	call	8002d3c <__adddf3>
 8001270:	d9003317 	ldw	r4,204(sp)
 8001274:	d9403417 	ldw	r5,208(sp)
 8001278:	180f883a 	mov	r7,r3
 800127c:	100d883a 	mov	r6,r2
 8001280:	d9000515 	stw	r4,20(sp)
 8001284:	d9400615 	stw	r5,24(sp)
 8001288:	8002d3c0 	call	8002d3c <__adddf3>
 800128c:	d9001617 	ldw	r4,88(sp)
 8001290:	d9402717 	ldw	r5,156(sp)
 8001294:	0025883a 	mov	r18,zero
 8001298:	900d883a 	mov	r6,r18
 800129c:	180f883a 	mov	r7,r3
 80012a0:	1823883a 	mov	r17,r3
 80012a4:	8002db00 	call	8002db0 <__muldf3>
 80012a8:	d9001417 	ldw	r4,80(sp)
 80012ac:	d9403217 	ldw	r5,200(sp)
 80012b0:	880f883a 	mov	r7,r17
 80012b4:	900d883a 	mov	r6,r18
 80012b8:	d8803515 	stw	r2,212(sp)
 80012bc:	d8c03615 	stw	r3,216(sp)
 80012c0:	8002db00 	call	8002db0 <__muldf3>
 80012c4:	a80f883a 	mov	r7,r21
 80012c8:	880b883a 	mov	r5,r17
 80012cc:	000d883a 	mov	r6,zero
 80012d0:	9009883a 	mov	r4,r18
 80012d4:	1021883a 	mov	r16,r2
 80012d8:	1823883a 	mov	r17,r3
 80012dc:	8002cbc0 	call	8002cbc <__subdf3>
 80012e0:	d9800717 	ldw	r6,28(sp)
 80012e4:	b80f883a 	mov	r7,r23
 80012e8:	180b883a 	mov	r5,r3
 80012ec:	1009883a 	mov	r4,r2
 80012f0:	8002cbc0 	call	8002cbc <__subdf3>
 80012f4:	d9000517 	ldw	r4,20(sp)
 80012f8:	d9403417 	ldw	r5,208(sp)
 80012fc:	180f883a 	mov	r7,r3
 8001300:	100d883a 	mov	r6,r2
 8001304:	8002cbc0 	call	8002cbc <__subdf3>
 8001308:	d9000317 	ldw	r4,12(sp)
 800130c:	d9403017 	ldw	r5,192(sp)
 8001310:	180f883a 	mov	r7,r3
 8001314:	100d883a 	mov	r6,r2
 8001318:	8002db00 	call	8002db0 <__muldf3>
 800131c:	180f883a 	mov	r7,r3
 8001320:	880b883a 	mov	r5,r17
 8001324:	8009883a 	mov	r4,r16
 8001328:	100d883a 	mov	r6,r2
 800132c:	8002d3c0 	call	8002d3c <__adddf3>
 8001330:	102d883a 	mov	r22,r2
 8001334:	d9003617 	ldw	r4,216(sp)
 8001338:	d8803517 	ldw	r2,212(sp)
 800133c:	d9403617 	ldw	r5,216(sp)
 8001340:	182f883a 	mov	r23,r3
 8001344:	b00d883a 	mov	r6,r22
 8001348:	b80f883a 	mov	r7,r23
 800134c:	d9000a15 	stw	r4,40(sp)
 8001350:	1009883a 	mov	r4,r2
 8001354:	054ffbf4 	movhi	r21,16367
 8001358:	ad71c244 	addi	r21,r21,-14583
 800135c:	dd800d15 	stw	r22,52(sp)
 8001360:	ddc00e15 	stw	r23,56(sp)
 8001364:	05380034 	movhi	r20,57344
 8001368:	d8800915 	stw	r2,36(sp)
 800136c:	8002d3c0 	call	8002d3c <__adddf3>
 8001370:	180b883a 	mov	r5,r3
 8001374:	a00d883a 	mov	r6,r20
 8001378:	a80f883a 	mov	r7,r21
 800137c:	9009883a 	mov	r4,r18
 8001380:	1823883a 	mov	r17,r3
 8001384:	8002db00 	call	8002db0 <__muldf3>
 8001388:	020516f4 	movhi	r8,5211
 800138c:	42007d44 	addi	r8,r8,501
 8001390:	026f8fb4 	movhi	r9,48702
 8001394:	4a4bf804 	addi	r9,r9,12256
 8001398:	480f883a 	mov	r7,r9
 800139c:	400d883a 	mov	r6,r8
 80013a0:	880b883a 	mov	r5,r17
 80013a4:	9009883a 	mov	r4,r18
 80013a8:	d8803715 	stw	r2,220(sp)
 80013ac:	d8c03815 	stw	r3,224(sp)
 80013b0:	8002db00 	call	8002db0 <__muldf3>
 80013b4:	d9800917 	ldw	r6,36(sp)
 80013b8:	d9c03617 	ldw	r7,216(sp)
 80013bc:	880b883a 	mov	r5,r17
 80013c0:	9009883a 	mov	r4,r18
 80013c4:	1021883a 	mov	r16,r2
 80013c8:	1823883a 	mov	r17,r3
 80013cc:	8002cbc0 	call	8002cbc <__subdf3>
 80013d0:	d9000d17 	ldw	r4,52(sp)
 80013d4:	b80b883a 	mov	r5,r23
 80013d8:	180f883a 	mov	r7,r3
 80013dc:	100d883a 	mov	r6,r2
 80013e0:	8002cbc0 	call	8002cbc <__subdf3>
 80013e4:	180b883a 	mov	r5,r3
 80013e8:	a80f883a 	mov	r7,r21
 80013ec:	01b70eb4 	movhi	r6,56378
 80013f0:	3180ff44 	addi	r6,r6,1021
 80013f4:	1009883a 	mov	r4,r2
 80013f8:	8002db00 	call	8002db0 <__muldf3>
 80013fc:	180f883a 	mov	r7,r3
 8001400:	880b883a 	mov	r5,r17
 8001404:	8009883a 	mov	r4,r16
 8001408:	100d883a 	mov	r6,r2
 800140c:	8002d3c0 	call	8002d3c <__adddf3>
 8001410:	d9402c17 	ldw	r5,176(sp)
 8001414:	01020034 	movhi	r4,2048
 8001418:	211f4c04 	addi	r4,r4,32048
 800141c:	2909883a 	add	r4,r5,r4
 8001420:	22400117 	ldw	r9,4(r4)
 8001424:	22000017 	ldw	r8,0(r4)
 8001428:	180b883a 	mov	r5,r3
 800142c:	480f883a 	mov	r7,r9
 8001430:	400d883a 	mov	r6,r8
 8001434:	1009883a 	mov	r4,r2
 8001438:	8002d3c0 	call	8002d3c <__adddf3>
 800143c:	d9000017 	ldw	r4,0(sp)
 8001440:	182f883a 	mov	r23,r3
 8001444:	102d883a 	mov	r22,r2
 8001448:	80036740 	call	8003674 <__floatsidf>
 800144c:	d9402c17 	ldw	r5,176(sp)
 8001450:	01020034 	movhi	r4,2048
 8001454:	211f5004 	addi	r4,r4,32064
 8001458:	b00d883a 	mov	r6,r22
 800145c:	2911883a 	add	r8,r5,r4
 8001460:	d9003717 	ldw	r4,220(sp)
 8001464:	d9403817 	ldw	r5,224(sp)
 8001468:	45000017 	ldw	r20,0(r8)
 800146c:	d9002315 	stw	r4,140(sp)
 8001470:	d9003817 	ldw	r4,224(sp)
 8001474:	45400117 	ldw	r21,4(r8)
 8001478:	b80f883a 	mov	r7,r23
 800147c:	d9002415 	stw	r4,144(sp)
 8001480:	d9002317 	ldw	r4,140(sp)
 8001484:	1021883a 	mov	r16,r2
 8001488:	1823883a 	mov	r17,r3
 800148c:	dd802115 	stw	r22,132(sp)
 8001490:	ddc02215 	stw	r23,136(sp)
 8001494:	8002d3c0 	call	8002d3c <__adddf3>
 8001498:	180b883a 	mov	r5,r3
 800149c:	1009883a 	mov	r4,r2
 80014a0:	a00d883a 	mov	r6,r20
 80014a4:	a80f883a 	mov	r7,r21
 80014a8:	8002d3c0 	call	8002d3c <__adddf3>
 80014ac:	180f883a 	mov	r7,r3
 80014b0:	8009883a 	mov	r4,r16
 80014b4:	880b883a 	mov	r5,r17
 80014b8:	100d883a 	mov	r6,r2
 80014bc:	8002d3c0 	call	8002d3c <__adddf3>
 80014c0:	180b883a 	mov	r5,r3
 80014c4:	0009883a 	mov	r4,zero
 80014c8:	800d883a 	mov	r6,r16
 80014cc:	880f883a 	mov	r7,r17
 80014d0:	d9001b15 	stw	r4,108(sp)
 80014d4:	d8c01c15 	stw	r3,112(sp)
 80014d8:	8002cbc0 	call	8002cbc <__subdf3>
 80014dc:	180b883a 	mov	r5,r3
 80014e0:	a80f883a 	mov	r7,r21
 80014e4:	1009883a 	mov	r4,r2
 80014e8:	a00d883a 	mov	r6,r20
 80014ec:	8002cbc0 	call	8002cbc <__subdf3>
 80014f0:	d9802317 	ldw	r6,140(sp)
 80014f4:	d9c03817 	ldw	r7,224(sp)
 80014f8:	180b883a 	mov	r5,r3
 80014fc:	1009883a 	mov	r4,r2
 8001500:	8002cbc0 	call	8002cbc <__subdf3>
 8001504:	d9002117 	ldw	r4,132(sp)
 8001508:	1011883a 	mov	r8,r2
 800150c:	1813883a 	mov	r9,r3
 8001510:	b80b883a 	mov	r5,r23
 8001514:	480f883a 	mov	r7,r9
 8001518:	400d883a 	mov	r6,r8
 800151c:	8002cbc0 	call	8002cbc <__subdf3>
 8001520:	1823883a 	mov	r17,r3
 8001524:	d8c02517 	ldw	r3,148(sp)
 8001528:	1021883a 	mov	r16,r2
 800152c:	e0bfffc4 	addi	r2,fp,-1
 8001530:	1884b03a 	or	r2,r3,r2
 8001534:	1000731e 	bne	r2,zero,8001704 <__ieee754_pow+0xb88>
 8001538:	0009883a 	mov	r4,zero
 800153c:	016ffc34 	movhi	r5,49136
 8001540:	d9001915 	stw	r4,100(sp)
 8001544:	d9401a15 	stw	r5,104(sp)
 8001548:	d9402917 	ldw	r5,164(sp)
 800154c:	d9002817 	ldw	r4,160(sp)
 8001550:	0029883a 	mov	r20,zero
 8001554:	a00d883a 	mov	r6,r20
 8001558:	280f883a 	mov	r7,r5
 800155c:	2827883a 	mov	r19,r5
 8001560:	8002cbc0 	call	8002cbc <__subdf3>
 8001564:	d9001b17 	ldw	r4,108(sp)
 8001568:	d9401c17 	ldw	r5,112(sp)
 800156c:	180f883a 	mov	r7,r3
 8001570:	100d883a 	mov	r6,r2
 8001574:	8002db00 	call	8002db0 <__muldf3>
 8001578:	d9c02917 	ldw	r7,164(sp)
 800157c:	d9802817 	ldw	r6,160(sp)
 8001580:	880b883a 	mov	r5,r17
 8001584:	8009883a 	mov	r4,r16
 8001588:	1823883a 	mov	r17,r3
 800158c:	1021883a 	mov	r16,r2
 8001590:	8002db00 	call	8002db0 <__muldf3>
 8001594:	180f883a 	mov	r7,r3
 8001598:	880b883a 	mov	r5,r17
 800159c:	8009883a 	mov	r4,r16
 80015a0:	100d883a 	mov	r6,r2
 80015a4:	8002d3c0 	call	8002d3c <__adddf3>
 80015a8:	d9401c17 	ldw	r5,112(sp)
 80015ac:	d9001b17 	ldw	r4,108(sp)
 80015b0:	a00d883a 	mov	r6,r20
 80015b4:	980f883a 	mov	r7,r19
 80015b8:	1029883a 	mov	r20,r2
 80015bc:	182b883a 	mov	r21,r3
 80015c0:	8002db00 	call	8002db0 <__muldf3>
 80015c4:	1025883a 	mov	r18,r2
 80015c8:	1827883a 	mov	r19,r3
 80015cc:	a009883a 	mov	r4,r20
 80015d0:	a80b883a 	mov	r5,r21
 80015d4:	900d883a 	mov	r6,r18
 80015d8:	980f883a 	mov	r7,r19
 80015dc:	dd001d15 	stw	r20,116(sp)
 80015e0:	dc801f15 	stw	r18,124(sp)
 80015e4:	dd401e15 	stw	r21,120(sp)
 80015e8:	dcc02015 	stw	r19,128(sp)
 80015ec:	8002d3c0 	call	8002d3c <__adddf3>
 80015f0:	1823883a 	mov	r17,r3
 80015f4:	01102434 	movhi	r4,16528
 80015f8:	213fffc4 	addi	r4,r4,-1
 80015fc:	1021883a 	mov	r16,r2
 8001600:	182f883a 	mov	r23,r3
 8001604:	dc401815 	stw	r17,96(sp)
 8001608:	100b883a 	mov	r5,r2
 800160c:	20c02c0e 	bge	r4,r3,80016c0 <__ieee754_pow+0xb44>
 8001610:	00afdc34 	movhi	r2,49008
 8001614:	1885883a 	add	r2,r3,r2
 8001618:	2884b03a 	or	r2,r5,r2
 800161c:	1001a626 	beq	r2,zero,8001cb8 <__ieee754_pow+0x113c>
 8001620:	04220034 	movhi	r16,34816
 8001624:	841d6704 	addi	r16,r16,30108
 8001628:	045f8e34 	movhi	r17,32312
 800162c:	8c790f04 	addi	r17,r17,-7108
 8001630:	d9401a17 	ldw	r5,104(sp)
 8001634:	d9001917 	ldw	r4,100(sp)
 8001638:	800d883a 	mov	r6,r16
 800163c:	880f883a 	mov	r7,r17
 8001640:	8002db00 	call	8002db0 <__muldf3>
 8001644:	180b883a 	mov	r5,r3
 8001648:	800d883a 	mov	r6,r16
 800164c:	880f883a 	mov	r7,r17
 8001650:	1009883a 	mov	r4,r2
 8001654:	8002db00 	call	8002db0 <__muldf3>
 8001658:	003dc306 	br	8000d68 <__ieee754_pow+0x1ec>
 800165c:	00b00434 	movhi	r2,49168
 8001660:	9085883a 	add	r2,r18,r2
 8001664:	e084b03a 	or	r2,fp,r2
 8001668:	1000af1e 	bne	r2,zero,8001928 <__ieee754_pow+0xdac>
 800166c:	480f883a 	mov	r7,r9
 8001670:	4009883a 	mov	r4,r8
 8001674:	480b883a 	mov	r5,r9
 8001678:	400d883a 	mov	r6,r8
 800167c:	003db406 	br	8000d50 <__ieee754_pow+0x1d4>
 8001680:	00bffc34 	movhi	r2,65520
 8001684:	18ff0084 	addi	r3,r3,-1022
 8001688:	a0a9883a 	add	r20,r20,r2
 800168c:	d8c00015 	stw	r3,0(sp)
 8001690:	0009883a 	mov	r4,zero
 8001694:	04000234 	movhi	r16,8
 8001698:	003e1406 	br	8000eec <__ieee754_pow+0x370>
 800169c:	a80f883a 	mov	r7,r21
 80016a0:	a009883a 	mov	r4,r20
 80016a4:	a80b883a 	mov	r5,r21
 80016a8:	a00d883a 	mov	r6,r20
 80016ac:	8002db00 	call	8002db0 <__muldf3>
 80016b0:	180b883a 	mov	r5,r3
 80016b4:	d8802815 	stw	r2,160(sp)
 80016b8:	d9402915 	stw	r5,164(sp)
 80016bc:	003d5606 	br	8000c18 <__ieee754_pow+0x9c>
 80016c0:	d9001817 	ldw	r4,96(sp)
 80016c4:	00a00034 	movhi	r2,32768
 80016c8:	10bfffc4 	addi	r2,r2,-1
 80016cc:	00d02474 	movhi	r3,16529
 80016d0:	18f2ffc4 	addi	r3,r3,-13313
 80016d4:	20b8703a 	and	fp,r4,r2
 80016d8:	1f009d0e 	bge	r3,fp,8001950 <__ieee754_pow+0xdd4>
 80016dc:	008fdbf4 	movhi	r2,16239
 80016e0:	108d0004 	addi	r2,r2,13312
 80016e4:	2085883a 	add	r2,r4,r2
 80016e8:	1144b03a 	or	r2,r2,r5
 80016ec:	1001c626 	beq	r2,zero,8001e08 <__ieee754_pow+0x128c>
 80016f0:	0430be74 	movhi	r16,49913
 80016f4:	843cd644 	addi	r16,r16,-3239
 80016f8:	04406974 	movhi	r17,421
 80016fc:	8c5b87c4 	addi	r17,r17,28191
 8001700:	003fcb06 	br	8001630 <__ieee754_pow+0xab4>
 8001704:	0005883a 	mov	r2,zero
 8001708:	00cffc34 	movhi	r3,16368
 800170c:	d8801915 	stw	r2,100(sp)
 8001710:	d8c01a15 	stw	r3,104(sp)
 8001714:	003f8c06 	br	8001548 <__ieee754_pow+0x9cc>
 8001718:	0005883a 	mov	r2,zero
 800171c:	00cffc34 	movhi	r3,16368
 8001720:	180b883a 	mov	r5,r3
 8001724:	580f883a 	mov	r7,r11
 8001728:	1009883a 	mov	r4,r2
 800172c:	500d883a 	mov	r6,r10
 8001730:	80031740 	call	8003174 <__divdf3>
 8001734:	1011883a 	mov	r8,r2
 8001738:	1813883a 	mov	r9,r3
 800173c:	003d9506 	br	8000d94 <__ieee754_pow+0x218>
 8001740:	008ffc34 	movhi	r2,16368
 8001744:	10bfff84 	addi	r2,r2,-2
 8001748:	14bdbb0e 	bge	r2,r18,8000e38 <__ieee754_pow+0x2bc>
 800174c:	008ffc34 	movhi	r2,16368
 8001750:	14bdae16 	blt	r2,r18,8000e0c <__ieee754_pow+0x290>
 8001754:	580b883a 	mov	r5,r11
 8001758:	5009883a 	mov	r4,r10
 800175c:	000d883a 	mov	r6,zero
 8001760:	100f883a 	mov	r7,r2
 8001764:	8002cbc0 	call	8002cbc <__subdf3>
 8001768:	1021883a 	mov	r16,r2
 800176c:	1823883a 	mov	r17,r3
 8001770:	00980034 	movhi	r2,24576
 8001774:	00cffdf4 	movhi	r3,16375
 8001778:	18c551c4 	addi	r3,r3,5447
 800177c:	8009883a 	mov	r4,r16
 8001780:	880b883a 	mov	r5,r17
 8001784:	180f883a 	mov	r7,r3
 8001788:	100d883a 	mov	r6,r2
 800178c:	8002db00 	call	8002db0 <__muldf3>
 8001790:	023e17b4 	movhi	r8,63582
 8001794:	4237d104 	addi	r8,r8,-8380
 8001798:	024f9574 	movhi	r9,15957
 800179c:	4a6b82c4 	addi	r9,r9,-20981
 80017a0:	480f883a 	mov	r7,r9
 80017a4:	400d883a 	mov	r6,r8
 80017a8:	8009883a 	mov	r4,r16
 80017ac:	880b883a 	mov	r5,r17
 80017b0:	102d883a 	mov	r22,r2
 80017b4:	182f883a 	mov	r23,r3
 80017b8:	8002db00 	call	8002db0 <__muldf3>
 80017bc:	8009883a 	mov	r4,r16
 80017c0:	880b883a 	mov	r5,r17
 80017c4:	800d883a 	mov	r6,r16
 80017c8:	880f883a 	mov	r7,r17
 80017cc:	d8802a15 	stw	r2,168(sp)
 80017d0:	d8c02b15 	stw	r3,172(sp)
 80017d4:	8002db00 	call	8002db0 <__muldf3>
 80017d8:	0011883a 	mov	r8,zero
 80017dc:	026ff434 	movhi	r9,49104
 80017e0:	480f883a 	mov	r7,r9
 80017e4:	8009883a 	mov	r4,r16
 80017e8:	880b883a 	mov	r5,r17
 80017ec:	400d883a 	mov	r6,r8
 80017f0:	1029883a 	mov	r20,r2
 80017f4:	182b883a 	mov	r21,r3
 80017f8:	8002db00 	call	8002db0 <__muldf3>
 80017fc:	02155574 	movhi	r8,21845
 8001800:	42155544 	addi	r8,r8,21845
 8001804:	024ff574 	movhi	r9,16341
 8001808:	4a555544 	addi	r9,r9,21845
 800180c:	480f883a 	mov	r7,r9
 8001810:	400d883a 	mov	r6,r8
 8001814:	180b883a 	mov	r5,r3
 8001818:	1009883a 	mov	r4,r2
 800181c:	8002d3c0 	call	8002d3c <__adddf3>
 8001820:	180f883a 	mov	r7,r3
 8001824:	8009883a 	mov	r4,r16
 8001828:	880b883a 	mov	r5,r17
 800182c:	100d883a 	mov	r6,r2
 8001830:	8002db00 	call	8002db0 <__muldf3>
 8001834:	0011883a 	mov	r8,zero
 8001838:	024ff834 	movhi	r9,16352
 800183c:	480b883a 	mov	r5,r9
 8001840:	4009883a 	mov	r4,r8
 8001844:	180f883a 	mov	r7,r3
 8001848:	100d883a 	mov	r6,r2
 800184c:	8002cbc0 	call	8002cbc <__subdf3>
 8001850:	180f883a 	mov	r7,r3
 8001854:	a80b883a 	mov	r5,r21
 8001858:	a009883a 	mov	r4,r20
 800185c:	100d883a 	mov	r6,r2
 8001860:	8002db00 	call	8002db0 <__muldf3>
 8001864:	02194b34 	movhi	r8,25900
 8001868:	4220bf84 	addi	r8,r8,-32002
 800186c:	026ffdf4 	movhi	r9,49143
 8001870:	4a4551c4 	addi	r9,r9,5447
 8001874:	480f883a 	mov	r7,r9
 8001878:	400d883a 	mov	r6,r8
 800187c:	180b883a 	mov	r5,r3
 8001880:	1009883a 	mov	r4,r2
 8001884:	8002db00 	call	8002db0 <__muldf3>
 8001888:	d9402b17 	ldw	r5,172(sp)
 800188c:	d9002a17 	ldw	r4,168(sp)
 8001890:	180f883a 	mov	r7,r3
 8001894:	100d883a 	mov	r6,r2
 8001898:	8002d3c0 	call	8002d3c <__adddf3>
 800189c:	100d883a 	mov	r6,r2
 80018a0:	b009883a 	mov	r4,r22
 80018a4:	b80b883a 	mov	r5,r23
 80018a8:	180f883a 	mov	r7,r3
 80018ac:	1021883a 	mov	r16,r2
 80018b0:	1823883a 	mov	r17,r3
 80018b4:	8002d3c0 	call	8002d3c <__adddf3>
 80018b8:	180b883a 	mov	r5,r3
 80018bc:	0009883a 	mov	r4,zero
 80018c0:	b00d883a 	mov	r6,r22
 80018c4:	b80f883a 	mov	r7,r23
 80018c8:	d9001b15 	stw	r4,108(sp)
 80018cc:	d8c01c15 	stw	r3,112(sp)
 80018d0:	8002cbc0 	call	8002cbc <__subdf3>
 80018d4:	1011883a 	mov	r8,r2
 80018d8:	1813883a 	mov	r9,r3
 80018dc:	8009883a 	mov	r4,r16
 80018e0:	880b883a 	mov	r5,r17
 80018e4:	003f0b06 	br	8001514 <__ieee754_pow+0x998>
 80018e8:	0005883a 	mov	r2,zero
 80018ec:	00d0d034 	movhi	r3,17216
 80018f0:	580b883a 	mov	r5,r11
 80018f4:	5009883a 	mov	r4,r10
 80018f8:	180f883a 	mov	r7,r3
 80018fc:	100d883a 	mov	r6,r2
 8001900:	8002db00 	call	8002db0 <__muldf3>
 8001904:	1015883a 	mov	r10,r2
 8001908:	1825883a 	mov	r18,r3
 800190c:	017ff2c4 	movi	r5,-53
 8001910:	003d6606 	br	8000eac <__ieee754_pow+0x330>
 8001914:	b03d300e 	bge	r22,zero,8000dd8 <__ieee754_pow+0x25c>
 8001918:	d9402917 	ldw	r5,164(sp)
 800191c:	28e0003c 	xorhi	r3,r5,32768
 8001920:	d8c02915 	stw	r3,164(sp)
 8001924:	003cbc06 	br	8000c18 <__ieee754_pow+0x9c>
 8001928:	00800044 	movi	r2,1
 800192c:	e0bd1a1e 	bne	fp,r2,8000d98 <__ieee754_pow+0x21c>
 8001930:	48e0003c 	xorhi	r3,r9,32768
 8001934:	da002815 	stw	r8,160(sp)
 8001938:	d8c02915 	stw	r3,164(sp)
 800193c:	003cb606 	br	8000c18 <__ieee754_pow+0x9c>
 8001940:	d9001817 	ldw	r4,96(sp)
 8001944:	00a00034 	movhi	r2,32768
 8001948:	10bfffc4 	addi	r2,r2,-1
 800194c:	20b8703a 	and	fp,r4,r2
 8001950:	008ff834 	movhi	r2,16352
 8001954:	1700fc16 	blt	r2,fp,8001d48 <__ieee754_pow+0x11cc>
 8001958:	0039883a 	mov	fp,zero
 800195c:	d8001315 	stw	zero,76(sp)
 8001960:	0025883a 	mov	r18,zero
 8001964:	0005883a 	mov	r2,zero
 8001968:	00cff9b4 	movhi	r3,16358
 800196c:	18cb90c4 	addi	r3,r3,11843
 8001970:	9009883a 	mov	r4,r18
 8001974:	b80b883a 	mov	r5,r23
 8001978:	180f883a 	mov	r7,r3
 800197c:	100d883a 	mov	r6,r2
 8001980:	8002db00 	call	8002db0 <__muldf3>
 8001984:	d9c02017 	ldw	r7,128(sp)
 8001988:	d9801f17 	ldw	r6,124(sp)
 800198c:	9009883a 	mov	r4,r18
 8001990:	b80b883a 	mov	r5,r23
 8001994:	b823883a 	mov	r17,r23
 8001998:	102d883a 	mov	r22,r2
 800199c:	182f883a 	mov	r23,r3
 80019a0:	8002cbc0 	call	8002cbc <__subdf3>
 80019a4:	d9401e17 	ldw	r5,120(sp)
 80019a8:	d9001d17 	ldw	r4,116(sp)
 80019ac:	180f883a 	mov	r7,r3
 80019b0:	100d883a 	mov	r6,r2
 80019b4:	8002cbc0 	call	8002cbc <__subdf3>
 80019b8:	023fbeb4 	movhi	r8,65274
 80019bc:	420e7bc4 	addi	r8,r8,14831
 80019c0:	024ff9b4 	movhi	r9,16358
 80019c4:	4a4b9084 	addi	r9,r9,11842
 80019c8:	480f883a 	mov	r7,r9
 80019cc:	400d883a 	mov	r6,r8
 80019d0:	180b883a 	mov	r5,r3
 80019d4:	1009883a 	mov	r4,r2
 80019d8:	8002db00 	call	8002db0 <__muldf3>
 80019dc:	02032a34 	movhi	r8,3240
 80019e0:	421b0e44 	addi	r8,r8,27705
 80019e4:	026f8834 	movhi	r9,48672
 80019e8:	4a571844 	addi	r9,r9,23649
 80019ec:	480f883a 	mov	r7,r9
 80019f0:	400d883a 	mov	r6,r8
 80019f4:	9009883a 	mov	r4,r18
 80019f8:	880b883a 	mov	r5,r17
 80019fc:	1021883a 	mov	r16,r2
 8001a00:	1823883a 	mov	r17,r3
 8001a04:	8002db00 	call	8002db0 <__muldf3>
 8001a08:	180f883a 	mov	r7,r3
 8001a0c:	880b883a 	mov	r5,r17
 8001a10:	8009883a 	mov	r4,r16
 8001a14:	100d883a 	mov	r6,r2
 8001a18:	8002d3c0 	call	8002d3c <__adddf3>
 8001a1c:	100d883a 	mov	r6,r2
 8001a20:	b009883a 	mov	r4,r22
 8001a24:	b80b883a 	mov	r5,r23
 8001a28:	180f883a 	mov	r7,r3
 8001a2c:	1021883a 	mov	r16,r2
 8001a30:	1823883a 	mov	r17,r3
 8001a34:	8002d3c0 	call	8002d3c <__adddf3>
 8001a38:	1009883a 	mov	r4,r2
 8001a3c:	180b883a 	mov	r5,r3
 8001a40:	b00d883a 	mov	r6,r22
 8001a44:	b80f883a 	mov	r7,r23
 8001a48:	d8803915 	stw	r2,228(sp)
 8001a4c:	d8c03a15 	stw	r3,232(sp)
 8001a50:	d8801115 	stw	r2,68(sp)
 8001a54:	d8c01215 	stw	r3,72(sp)
 8001a58:	8002cbc0 	call	8002cbc <__subdf3>
 8001a5c:	180f883a 	mov	r7,r3
 8001a60:	8009883a 	mov	r4,r16
 8001a64:	880b883a 	mov	r5,r17
 8001a68:	100d883a 	mov	r6,r2
 8001a6c:	8002cbc0 	call	8002cbc <__subdf3>
 8001a70:	d9001117 	ldw	r4,68(sp)
 8001a74:	d9403a17 	ldw	r5,232(sp)
 8001a78:	1029883a 	mov	r20,r2
 8001a7c:	200d883a 	mov	r6,r4
 8001a80:	280f883a 	mov	r7,r5
 8001a84:	182b883a 	mov	r21,r3
 8001a88:	8002db00 	call	8002db0 <__muldf3>
 8001a8c:	1021883a 	mov	r16,r2
 8001a90:	1823883a 	mov	r17,r3
 8001a94:	009caff4 	movhi	r2,29375
 8001a98:	10a93404 	addi	r2,r2,-23344
 8001a9c:	00cf99b4 	movhi	r3,15974
 8001aa0:	18cdda44 	addi	r3,r3,14185
 8001aa4:	8009883a 	mov	r4,r16
 8001aa8:	880b883a 	mov	r5,r17
 8001aac:	180f883a 	mov	r7,r3
 8001ab0:	100d883a 	mov	r6,r2
 8001ab4:	8002db00 	call	8002db0 <__muldf3>
 8001ab8:	023174b4 	movhi	r8,50642
 8001abc:	421afc44 	addi	r8,r8,27633
 8001ac0:	024faf34 	movhi	r9,16060
 8001ac4:	4a6f5044 	addi	r9,r9,-17087
 8001ac8:	480f883a 	mov	r7,r9
 8001acc:	400d883a 	mov	r6,r8
 8001ad0:	180b883a 	mov	r5,r3
 8001ad4:	1009883a 	mov	r4,r2
 8001ad8:	8002cbc0 	call	8002cbc <__subdf3>
 8001adc:	180f883a 	mov	r7,r3
 8001ae0:	8009883a 	mov	r4,r16
 8001ae4:	880b883a 	mov	r5,r17
 8001ae8:	100d883a 	mov	r6,r2
 8001aec:	8002db00 	call	8002db0 <__muldf3>
 8001af0:	022bc9b4 	movhi	r8,44838
 8001af4:	42378b04 	addi	r8,r8,-8660
 8001af8:	024fc474 	movhi	r9,16145
 8001afc:	4a559a84 	addi	r9,r9,22122
 8001b00:	480f883a 	mov	r7,r9
 8001b04:	400d883a 	mov	r6,r8
 8001b08:	180b883a 	mov	r5,r3
 8001b0c:	1009883a 	mov	r4,r2
 8001b10:	8002d3c0 	call	8002d3c <__adddf3>
 8001b14:	180f883a 	mov	r7,r3
 8001b18:	8009883a 	mov	r4,r16
 8001b1c:	880b883a 	mov	r5,r17
 8001b20:	100d883a 	mov	r6,r2
 8001b24:	8002db00 	call	8002db0 <__muldf3>
 8001b28:	0205aff4 	movhi	r8,5823
 8001b2c:	422f64c4 	addi	r8,r8,-17005
 8001b30:	024fd9f4 	movhi	r9,16231
 8001b34:	4a705b04 	addi	r9,r9,-16020
 8001b38:	480f883a 	mov	r7,r9
 8001b3c:	400d883a 	mov	r6,r8
 8001b40:	180b883a 	mov	r5,r3
 8001b44:	1009883a 	mov	r4,r2
 8001b48:	8002cbc0 	call	8002cbc <__subdf3>
 8001b4c:	180f883a 	mov	r7,r3
 8001b50:	8009883a 	mov	r4,r16
 8001b54:	880b883a 	mov	r5,r17
 8001b58:	100d883a 	mov	r6,r2
 8001b5c:	8002db00 	call	8002db0 <__muldf3>
 8001b60:	02155574 	movhi	r8,21845
 8001b64:	42154f84 	addi	r8,r8,21822
 8001b68:	024ff174 	movhi	r9,16325
 8001b6c:	4a555544 	addi	r9,r9,21845
 8001b70:	480f883a 	mov	r7,r9
 8001b74:	400d883a 	mov	r6,r8
 8001b78:	180b883a 	mov	r5,r3
 8001b7c:	1009883a 	mov	r4,r2
 8001b80:	8002d3c0 	call	8002d3c <__adddf3>
 8001b84:	180f883a 	mov	r7,r3
 8001b88:	8009883a 	mov	r4,r16
 8001b8c:	880b883a 	mov	r5,r17
 8001b90:	100d883a 	mov	r6,r2
 8001b94:	8002db00 	call	8002db0 <__muldf3>
 8001b98:	d9001117 	ldw	r4,68(sp)
 8001b9c:	d9403a17 	ldw	r5,232(sp)
 8001ba0:	180f883a 	mov	r7,r3
 8001ba4:	100d883a 	mov	r6,r2
 8001ba8:	8002cbc0 	call	8002cbc <__subdf3>
 8001bac:	d9001117 	ldw	r4,68(sp)
 8001bb0:	d9403a17 	ldw	r5,232(sp)
 8001bb4:	100d883a 	mov	r6,r2
 8001bb8:	180f883a 	mov	r7,r3
 8001bbc:	1021883a 	mov	r16,r2
 8001bc0:	1823883a 	mov	r17,r3
 8001bc4:	8002db00 	call	8002db0 <__muldf3>
 8001bc8:	0011883a 	mov	r8,zero
 8001bcc:	02500034 	movhi	r9,16384
 8001bd0:	480f883a 	mov	r7,r9
 8001bd4:	400d883a 	mov	r6,r8
 8001bd8:	8009883a 	mov	r4,r16
 8001bdc:	880b883a 	mov	r5,r17
 8001be0:	1021883a 	mov	r16,r2
 8001be4:	1823883a 	mov	r17,r3
 8001be8:	8002cbc0 	call	8002cbc <__subdf3>
 8001bec:	180f883a 	mov	r7,r3
 8001bf0:	880b883a 	mov	r5,r17
 8001bf4:	8009883a 	mov	r4,r16
 8001bf8:	100d883a 	mov	r6,r2
 8001bfc:	80031740 	call	8003174 <__divdf3>
 8001c00:	d9001117 	ldw	r4,68(sp)
 8001c04:	d9403a17 	ldw	r5,232(sp)
 8001c08:	a00d883a 	mov	r6,r20
 8001c0c:	a80f883a 	mov	r7,r21
 8001c10:	1025883a 	mov	r18,r2
 8001c14:	1827883a 	mov	r19,r3
 8001c18:	8002db00 	call	8002db0 <__muldf3>
 8001c1c:	180f883a 	mov	r7,r3
 8001c20:	a009883a 	mov	r4,r20
 8001c24:	a80b883a 	mov	r5,r21
 8001c28:	100d883a 	mov	r6,r2
 8001c2c:	8002d3c0 	call	8002d3c <__adddf3>
 8001c30:	180f883a 	mov	r7,r3
 8001c34:	980b883a 	mov	r5,r19
 8001c38:	9009883a 	mov	r4,r18
 8001c3c:	100d883a 	mov	r6,r2
 8001c40:	8002cbc0 	call	8002cbc <__subdf3>
 8001c44:	d9801117 	ldw	r6,68(sp)
 8001c48:	d9c03a17 	ldw	r7,232(sp)
 8001c4c:	180b883a 	mov	r5,r3
 8001c50:	1009883a 	mov	r4,r2
 8001c54:	8002cbc0 	call	8002cbc <__subdf3>
 8001c58:	0011883a 	mov	r8,zero
 8001c5c:	024ffc34 	movhi	r9,16368
 8001c60:	480b883a 	mov	r5,r9
 8001c64:	180f883a 	mov	r7,r3
 8001c68:	4009883a 	mov	r4,r8
 8001c6c:	100d883a 	mov	r6,r2
 8001c70:	8002cbc0 	call	8002cbc <__subdf3>
 8001c74:	100b883a 	mov	r5,r2
 8001c78:	d8801317 	ldw	r2,76(sp)
 8001c7c:	10d5883a 	add	r10,r2,r3
 8001c80:	5005d53a 	srai	r2,r10,20
 8001c84:	0080720e 	bge	zero,r2,8001e50 <__ieee754_pow+0x12d4>
 8001c88:	2811883a 	mov	r8,r5
 8001c8c:	5013883a 	mov	r9,r10
 8001c90:	d9c01a17 	ldw	r7,104(sp)
 8001c94:	d9801917 	ldw	r6,100(sp)
 8001c98:	480b883a 	mov	r5,r9
 8001c9c:	4009883a 	mov	r4,r8
 8001ca0:	003e8206 	br	80016ac <__ieee754_pow+0xb30>
 8001ca4:	0009883a 	mov	r4,zero
 8001ca8:	800b883a 	mov	r5,r16
 8001cac:	a80f883a 	mov	r7,r21
 8001cb0:	a00d883a 	mov	r6,r20
 8001cb4:	003c2b06 	br	8000d64 <__ieee754_pow+0x1e8>
 8001cb8:	d9001d17 	ldw	r4,116(sp)
 8001cbc:	00994b34 	movhi	r2,25900
 8001cc0:	10a0bf84 	addi	r2,r2,-32002
 8001cc4:	00cf25f4 	movhi	r3,15511
 8001cc8:	18c551c4 	addi	r3,r3,5447
 8001ccc:	a80b883a 	mov	r5,r21
 8001cd0:	180f883a 	mov	r7,r3
 8001cd4:	100d883a 	mov	r6,r2
 8001cd8:	8002d3c0 	call	8002d3c <__adddf3>
 8001cdc:	d9801f17 	ldw	r6,124(sp)
 8001ce0:	880b883a 	mov	r5,r17
 8001ce4:	8009883a 	mov	r4,r16
 8001ce8:	980f883a 	mov	r7,r19
 8001cec:	1021883a 	mov	r16,r2
 8001cf0:	1823883a 	mov	r17,r3
 8001cf4:	8002cbc0 	call	8002cbc <__subdf3>
 8001cf8:	180f883a 	mov	r7,r3
 8001cfc:	880b883a 	mov	r5,r17
 8001d00:	8009883a 	mov	r4,r16
 8001d04:	100d883a 	mov	r6,r2
 8001d08:	80034dc0 	call	80034dc <__gtdf2>
 8001d0c:	00bf0c0e 	bge	zero,r2,8001940 <__ieee754_pow+0xdc4>
 8001d10:	04220034 	movhi	r16,34816
 8001d14:	841d6704 	addi	r16,r16,30108
 8001d18:	045f8e34 	movhi	r17,32312
 8001d1c:	8c790f04 	addi	r17,r17,-7108
 8001d20:	d9401a17 	ldw	r5,104(sp)
 8001d24:	d9001917 	ldw	r4,100(sp)
 8001d28:	800d883a 	mov	r6,r16
 8001d2c:	880f883a 	mov	r7,r17
 8001d30:	8002db00 	call	8002db0 <__muldf3>
 8001d34:	180b883a 	mov	r5,r3
 8001d38:	800d883a 	mov	r6,r16
 8001d3c:	880f883a 	mov	r7,r17
 8001d40:	1009883a 	mov	r4,r2
 8001d44:	003e5906 	br	80016ac <__ieee754_pow+0xb30>
 8001d48:	e005d53a 	srai	r2,fp,20
 8001d4c:	01800434 	movhi	r6,16
 8001d50:	d9401817 	ldw	r5,96(sp)
 8001d54:	10bf0084 	addi	r2,r2,-1022
 8001d58:	308dd83a 	sra	r6,r6,r2
 8001d5c:	02000434 	movhi	r8,16
 8001d60:	423fffc4 	addi	r8,r8,-1
 8001d64:	0005883a 	mov	r2,zero
 8001d68:	298d883a 	add	r6,r5,r6
 8001d6c:	318b883a 	add	r5,r6,r6
 8001d70:	320e703a 	and	r7,r6,r8
 8001d74:	1013883a 	mov	r9,r2
 8001d78:	280ad57a 	srli	r5,r5,21
 8001d7c:	d8801817 	ldw	r2,96(sp)
 8001d80:	01000504 	movi	r4,20
 8001d84:	297f0044 	addi	r5,r5,-1023
 8001d88:	4151d83a 	sra	r8,r8,r5
 8001d8c:	39c00434 	orhi	r7,r7,16
 8001d90:	2149c83a 	sub	r4,r4,r5
 8001d94:	0210303a 	nor	r8,zero,r8
 8001d98:	3939d83a 	sra	fp,r7,r4
 8001d9c:	320e703a 	and	r7,r6,r8
 8001da0:	10002916 	blt	r2,zero,8001e48 <__ieee754_pow+0x12cc>
 8001da4:	d9402017 	ldw	r5,128(sp)
 8001da8:	d9001f17 	ldw	r4,124(sp)
 8001dac:	480d883a 	mov	r6,r9
 8001db0:	8002cbc0 	call	8002cbc <__subdf3>
 8001db4:	180b883a 	mov	r5,r3
 8001db8:	d9402015 	stw	r5,128(sp)
 8001dbc:	280f883a 	mov	r7,r5
 8001dc0:	d9001d17 	ldw	r4,116(sp)
 8001dc4:	d9401e17 	ldw	r5,120(sp)
 8001dc8:	1007883a 	mov	r3,r2
 8001dcc:	180d883a 	mov	r6,r3
 8001dd0:	d8801f15 	stw	r2,124(sp)
 8001dd4:	8002d3c0 	call	8002d3c <__adddf3>
 8001dd8:	180b883a 	mov	r5,r3
 8001ddc:	e006953a 	slli	r3,fp,20
 8001de0:	282f883a 	mov	r23,r5
 8001de4:	d8c01315 	stw	r3,76(sp)
 8001de8:	003edd06 	br	8001960 <__ieee754_pow+0xde4>
 8001dec:	383bc81e 	bne	r7,zero,8000d10 <__ieee754_pow+0x194>
 8001df0:	28c5c83a 	sub	r2,r5,r3
 8001df4:	8087d83a 	sra	r3,r16,r2
 8001df8:	1884983a 	sll	r2,r3,r2
 8001dfc:	80801b26 	beq	r16,r2,8001e6c <__ieee754_pow+0x12f0>
 8001e00:	0039883a 	mov	fp,zero
 8001e04:	003b9d06 	br	8000c7c <__ieee754_pow+0x100>
 8001e08:	d9801f17 	ldw	r6,124(sp)
 8001e0c:	8009883a 	mov	r4,r16
 8001e10:	880b883a 	mov	r5,r17
 8001e14:	980f883a 	mov	r7,r19
 8001e18:	8002cbc0 	call	8002cbc <__subdf3>
 8001e1c:	d9001d17 	ldw	r4,116(sp)
 8001e20:	a80b883a 	mov	r5,r21
 8001e24:	180f883a 	mov	r7,r3
 8001e28:	100d883a 	mov	r6,r2
 8001e2c:	80035ec0 	call	80035ec <__ledf2>
 8001e30:	00bfc516 	blt	zero,r2,8001d48 <__ieee754_pow+0x11cc>
 8001e34:	0430be74 	movhi	r16,49913
 8001e38:	843cd644 	addi	r16,r16,-3239
 8001e3c:	04406974 	movhi	r17,421
 8001e40:	8c5b87c4 	addi	r17,r17,28191
 8001e44:	003fb606 	br	8001d20 <__ieee754_pow+0x11a4>
 8001e48:	0739c83a 	sub	fp,zero,fp
 8001e4c:	003fd506 	br	8001da4 <__ieee754_pow+0x1228>
 8001e50:	2809883a 	mov	r4,r5
 8001e54:	e00d883a 	mov	r6,fp
 8001e58:	180b883a 	mov	r5,r3
 8001e5c:	80023d00 	call	80023d0 <scalbn>
 8001e60:	1011883a 	mov	r8,r2
 8001e64:	1813883a 	mov	r9,r3
 8001e68:	003f8906 	br	8001c90 <__ieee754_pow+0x1114>
 8001e6c:	18c0004c 	andi	r3,r3,1
 8001e70:	00800084 	movi	r2,2
 8001e74:	10f9c83a 	sub	fp,r2,r3
 8001e78:	003b8006 	br	8000c7c <__ieee754_pow+0x100>

08001e7c <__ieee754_sqrt>:
 8001e7c:	defffd04 	addi	sp,sp,-12
 8001e80:	dc000015 	stw	r16,0(sp)
 8001e84:	009ffc34 	movhi	r2,32752
 8001e88:	2021883a 	mov	r16,r4
 8001e8c:	291ffc2c 	andhi	r4,r5,32752
 8001e90:	dc400115 	stw	r17,4(sp)
 8001e94:	dfc00215 	stw	ra,8(sp)
 8001e98:	2823883a 	mov	r17,r5
 8001e9c:	280f883a 	mov	r7,r5
 8001ea0:	2807883a 	mov	r3,r5
 8001ea4:	8011883a 	mov	r8,r16
 8001ea8:	20807d26 	beq	r4,r2,80020a0 <__ieee754_sqrt+0x224>
 8001eac:	01408d0e 	bge	zero,r5,80020e4 <__ieee754_sqrt+0x268>
 8001eb0:	380dd53a 	srai	r6,r7,20
 8001eb4:	3000131e 	bne	r6,zero,8001f04 <__ieee754_sqrt+0x88>
 8001eb8:	1800041e 	bne	r3,zero,8001ecc <__ieee754_sqrt+0x50>
 8001ebc:	400ed2fa 	srli	r7,r8,11
 8001ec0:	31bffac4 	addi	r6,r6,-21
 8001ec4:	4010957a 	slli	r8,r8,21
 8001ec8:	383ffc26 	beq	r7,zero,8001ebc <__ieee754_sqrt+0x40>
 8001ecc:	3880042c 	andhi	r2,r7,16
 8001ed0:	1000991e 	bne	r2,zero,8002138 <__ieee754_sqrt+0x2bc>
 8001ed4:	0009883a 	mov	r4,zero
 8001ed8:	39cf883a 	add	r7,r7,r7
 8001edc:	3880042c 	andhi	r2,r7,16
 8001ee0:	21000044 	addi	r4,r4,1
 8001ee4:	103ffc26 	beq	r2,zero,8001ed8 <__ieee754_sqrt+0x5c>
 8001ee8:	00800804 	movi	r2,32
 8001eec:	1105c83a 	sub	r2,r2,r4
 8001ef0:	4086d83a 	srl	r3,r8,r2
 8001ef4:	4110983a 	sll	r8,r8,r4
 8001ef8:	3105c83a 	sub	r2,r6,r4
 8001efc:	38ceb03a 	or	r7,r7,r3
 8001f00:	11800044 	addi	r6,r2,1
 8001f04:	31bf0044 	addi	r6,r6,-1023
 8001f08:	30c0004c 	andi	r3,r6,1
 8001f0c:	00800434 	movhi	r2,16
 8001f10:	10bfffc4 	addi	r2,r2,-1
 8001f14:	3884703a 	and	r2,r7,r2
 8001f18:	1807003a 	cmpeq	r3,r3,zero
 8001f1c:	11000434 	orhi	r4,r2,16
 8001f20:	18005426 	beq	r3,zero,8002074 <__ieee754_sqrt+0x1f8>
 8001f24:	4004d7fa 	srli	r2,r8,31
 8001f28:	4207883a 	add	r3,r8,r8
 8001f2c:	02800834 	movhi	r10,32
 8001f30:	1105883a 	add	r2,r2,r4
 8001f34:	2089883a 	add	r4,r4,r2
 8001f38:	0011883a 	mov	r8,zero
 8001f3c:	000b883a 	mov	r5,zero
 8001f40:	0013883a 	mov	r9,zero
 8001f44:	02c00584 	movi	r11,22
 8001f48:	520f883a 	add	r7,r10,r8
 8001f4c:	1804d7fa 	srli	r2,r3,31
 8001f50:	4a400044 	addi	r9,r9,1
 8001f54:	18c7883a 	add	r3,r3,r3
 8001f58:	21c00316 	blt	r4,r7,8001f68 <__ieee754_sqrt+0xec>
 8001f5c:	21c9c83a 	sub	r4,r4,r7
 8001f60:	2a8b883a 	add	r5,r5,r10
 8001f64:	51d1883a 	add	r8,r10,r7
 8001f68:	1105883a 	add	r2,r2,r4
 8001f6c:	5014d07a 	srli	r10,r10,1
 8001f70:	2089883a 	add	r4,r4,r2
 8001f74:	4afff41e 	bne	r9,r11,8001f48 <__ieee754_sqrt+0xcc>
 8001f78:	02600034 	movhi	r9,32768
 8001f7c:	0017883a 	mov	r11,zero
 8001f80:	0019883a 	mov	r12,zero
 8001f84:	0015883a 	mov	r10,zero
 8001f88:	4821883a 	mov	r16,r9
 8001f8c:	03c00804 	movi	r15,32
 8001f90:	00000806 	br	8001fb4 <__ieee754_sqrt+0x138>
 8001f94:	22003426 	beq	r4,r8,8002068 <__ieee754_sqrt+0x1ec>
 8001f98:	1804d7fa 	srli	r2,r3,31
 8001f9c:	52800044 	addi	r10,r10,1
 8001fa0:	18c7883a 	add	r3,r3,r3
 8001fa4:	1105883a 	add	r2,r2,r4
 8001fa8:	2089883a 	add	r4,r4,r2
 8001fac:	4812d07a 	srli	r9,r9,1
 8001fb0:	53c01326 	beq	r10,r15,8002000 <__ieee754_sqrt+0x184>
 8001fb4:	4acf883a 	add	r7,r9,r11
 8001fb8:	413ff60e 	bge	r8,r4,8001f94 <__ieee754_sqrt+0x118>
 8001fbc:	38a0002c 	andhi	r2,r7,32768
 8001fc0:	3a57883a 	add	r11,r7,r9
 8001fc4:	14002426 	beq	r2,r16,8002058 <__ieee754_sqrt+0x1dc>
 8001fc8:	4005883a 	mov	r2,r8
 8001fcc:	2209c83a 	sub	r4,r4,r8
 8001fd0:	19c0012e 	bgeu	r3,r7,8001fd8 <__ieee754_sqrt+0x15c>
 8001fd4:	213fffc4 	addi	r4,r4,-1
 8001fd8:	19c7c83a 	sub	r3,r3,r7
 8001fdc:	1011883a 	mov	r8,r2
 8001fe0:	1804d7fa 	srli	r2,r3,31
 8001fe4:	52800044 	addi	r10,r10,1
 8001fe8:	6259883a 	add	r12,r12,r9
 8001fec:	1105883a 	add	r2,r2,r4
 8001ff0:	18c7883a 	add	r3,r3,r3
 8001ff4:	2089883a 	add	r4,r4,r2
 8001ff8:	4812d07a 	srli	r9,r9,1
 8001ffc:	53ffed1e 	bne	r10,r15,8001fb4 <__ieee754_sqrt+0x138>
 8002000:	20c4b03a 	or	r2,r4,r3
 8002004:	1000201e 	bne	r2,zero,8002088 <__ieee754_sqrt+0x20c>
 8002008:	600ed07a 	srli	r7,r12,1
 800200c:	2880004c 	andi	r2,r5,1
 8002010:	1005003a 	cmpeq	r2,r2,zero
 8002014:	1000011e 	bne	r2,zero,800201c <__ieee754_sqrt+0x1a0>
 8002018:	39e00034 	orhi	r7,r7,32768
 800201c:	300dd07a 	srai	r6,r6,1
 8002020:	280bd07a 	srai	r5,r5,1
 8002024:	010ff834 	movhi	r4,16352
 8002028:	300c953a 	slli	r6,r6,20
 800202c:	290b883a 	add	r5,r5,r4
 8002030:	3821883a 	mov	r16,r7
 8002034:	299d883a 	add	r14,r5,r6
 8002038:	7023883a 	mov	r17,r14
 800203c:	8005883a 	mov	r2,r16
 8002040:	8807883a 	mov	r3,r17
 8002044:	dfc00217 	ldw	ra,8(sp)
 8002048:	dc400117 	ldw	r17,4(sp)
 800204c:	dc000017 	ldw	r16,0(sp)
 8002050:	dec00304 	addi	sp,sp,12
 8002054:	f800283a 	ret
 8002058:	5884703a 	and	r2,r11,r2
 800205c:	103fda1e 	bne	r2,zero,8001fc8 <__ieee754_sqrt+0x14c>
 8002060:	40800044 	addi	r2,r8,1
 8002064:	003fd906 	br	8001fcc <__ieee754_sqrt+0x150>
 8002068:	19ffd42e 	bgeu	r3,r7,8001fbc <__ieee754_sqrt+0x140>
 800206c:	2011883a 	mov	r8,r4
 8002070:	003fc906 	br	8001f98 <__ieee754_sqrt+0x11c>
 8002074:	4004d7fa 	srli	r2,r8,31
 8002078:	4211883a 	add	r8,r8,r8
 800207c:	1105883a 	add	r2,r2,r4
 8002080:	2089883a 	add	r4,r4,r2
 8002084:	003fa706 	br	8001f24 <__ieee754_sqrt+0xa8>
 8002088:	00bfffc4 	movi	r2,-1
 800208c:	60802726 	beq	r12,r2,800212c <__ieee754_sqrt+0x2b0>
 8002090:	6080004c 	andi	r2,r12,1
 8002094:	6085883a 	add	r2,r12,r2
 8002098:	100ed07a 	srli	r7,r2,1
 800209c:	003fdb06 	br	800200c <__ieee754_sqrt+0x190>
 80020a0:	8009883a 	mov	r4,r16
 80020a4:	800d883a 	mov	r6,r16
 80020a8:	8002db00 	call	8002db0 <__muldf3>
 80020ac:	180f883a 	mov	r7,r3
 80020b0:	880b883a 	mov	r5,r17
 80020b4:	8009883a 	mov	r4,r16
 80020b8:	100d883a 	mov	r6,r2
 80020bc:	8002d3c0 	call	8002d3c <__adddf3>
 80020c0:	1021883a 	mov	r16,r2
 80020c4:	1823883a 	mov	r17,r3
 80020c8:	8005883a 	mov	r2,r16
 80020cc:	8807883a 	mov	r3,r17
 80020d0:	dfc00217 	ldw	ra,8(sp)
 80020d4:	dc400117 	ldw	r17,4(sp)
 80020d8:	dc000017 	ldw	r16,0(sp)
 80020dc:	dec00304 	addi	sp,sp,12
 80020e0:	f800283a 	ret
 80020e4:	00a00034 	movhi	r2,32768
 80020e8:	10bfffc4 	addi	r2,r2,-1
 80020ec:	2884703a 	and	r2,r5,r2
 80020f0:	8084b03a 	or	r2,r16,r2
 80020f4:	103fd126 	beq	r2,zero,800203c <__ieee754_sqrt+0x1c0>
 80020f8:	283f6d26 	beq	r5,zero,8001eb0 <__ieee754_sqrt+0x34>
 80020fc:	280f883a 	mov	r7,r5
 8002100:	8009883a 	mov	r4,r16
 8002104:	800d883a 	mov	r6,r16
 8002108:	8002cbc0 	call	8002cbc <__subdf3>
 800210c:	1009883a 	mov	r4,r2
 8002110:	180b883a 	mov	r5,r3
 8002114:	100d883a 	mov	r6,r2
 8002118:	180f883a 	mov	r7,r3
 800211c:	80031740 	call	8003174 <__divdf3>
 8002120:	1021883a 	mov	r16,r2
 8002124:	1823883a 	mov	r17,r3
 8002128:	003fc406 	br	800203c <__ieee754_sqrt+0x1c0>
 800212c:	29400044 	addi	r5,r5,1
 8002130:	000f883a 	mov	r7,zero
 8002134:	003fb506 	br	800200c <__ieee754_sqrt+0x190>
 8002138:	0009883a 	mov	r4,zero
 800213c:	00800804 	movi	r2,32
 8002140:	003f6b06 	br	8001ef0 <__ieee754_sqrt+0x74>

08002144 <fabs>:
 8002144:	01e00034 	movhi	r7,32768
 8002148:	39ffffc4 	addi	r7,r7,-1
 800214c:	394e703a 	and	r7,r7,r5
 8002150:	2005883a 	mov	r2,r4
 8002154:	3807883a 	mov	r3,r7
 8002158:	f800283a 	ret

0800215c <finite>:
 800215c:	00a00034 	movhi	r2,32768
 8002160:	10bfffc4 	addi	r2,r2,-1
 8002164:	2884703a 	and	r2,r5,r2
 8002168:	01600434 	movhi	r5,32784
 800216c:	1145883a 	add	r2,r2,r5
 8002170:	1004d7fa 	srli	r2,r2,31
 8002174:	f800283a 	ret

08002178 <__isnand>:
 8002178:	200d883a 	mov	r6,r4
 800217c:	0109c83a 	sub	r4,zero,r4
 8002180:	2188b03a 	or	r4,r4,r6
 8002184:	2008d7fa 	srli	r4,r4,31
 8002188:	00a00034 	movhi	r2,32768
 800218c:	10bfffc4 	addi	r2,r2,-1
 8002190:	1144703a 	and	r2,r2,r5
 8002194:	2088b03a 	or	r4,r4,r2
 8002198:	009ffc34 	movhi	r2,32752
 800219c:	1105c83a 	sub	r2,r2,r4
 80021a0:	1004d7fa 	srli	r2,r2,31
 80021a4:	f800283a 	ret

080021a8 <matherr>:
 80021a8:	0005883a 	mov	r2,zero
 80021ac:	f800283a 	ret

080021b0 <nan>:
 80021b0:	015ffe34 	movhi	r5,32760
 80021b4:	0005883a 	mov	r2,zero
 80021b8:	2807883a 	mov	r3,r5
 80021bc:	f800283a 	ret

080021c0 <rint>:
 80021c0:	2015883a 	mov	r10,r4
 80021c4:	2809d53a 	srai	r4,r5,20
 80021c8:	defff904 	addi	sp,sp,-28
 80021cc:	034004c4 	movi	r13,19
 80021d0:	2101ffcc 	andi	r4,r4,2047
 80021d4:	227f0044 	addi	r9,r4,-1023
 80021d8:	dc800415 	stw	r18,16(sp)
 80021dc:	dfc00615 	stw	ra,24(sp)
 80021e0:	dcc00515 	stw	r19,20(sp)
 80021e4:	dc400315 	stw	r17,12(sp)
 80021e8:	dc000215 	stw	r16,8(sp)
 80021ec:	2817883a 	mov	r11,r5
 80021f0:	500d883a 	mov	r6,r10
 80021f4:	2824d7fa 	srli	r18,r5,31
 80021f8:	6a403016 	blt	r13,r9,80022bc <rint+0xfc>
 80021fc:	48004916 	blt	r9,zero,8002324 <rint+0x164>
 8002200:	00800434 	movhi	r2,16
 8002204:	10bfffc4 	addi	r2,r2,-1
 8002208:	1247d83a 	sra	r3,r2,r9
 800220c:	2809883a 	mov	r4,r5
 8002210:	1944703a 	and	r2,r3,r5
 8002214:	5084b03a 	or	r2,r10,r2
 8002218:	10001f26 	beq	r2,zero,8002298 <rint+0xd8>
 800221c:	180ad07a 	srli	r5,r3,1
 8002220:	5944703a 	and	r2,r11,r5
 8002224:	5084b03a 	or	r2,r10,r2
 8002228:	10000626 	beq	r2,zero,8002244 <rint+0x84>
 800222c:	4b406626 	beq	r9,r13,80023c8 <rint+0x208>
 8002230:	00c000b4 	movhi	r3,2
 8002234:	1a47d83a 	sra	r3,r3,r9
 8002238:	0144303a 	nor	r2,zero,r5
 800223c:	5884703a 	and	r2,r11,r2
 8002240:	10c8b03a 	or	r4,r2,r3
 8002244:	900690fa 	slli	r3,r18,3
 8002248:	00820034 	movhi	r2,2048
 800224c:	109f5404 	addi	r2,r2,32080
 8002250:	200f883a 	mov	r7,r4
 8002254:	1887883a 	add	r3,r3,r2
 8002258:	1c000017 	ldw	r16,0(r3)
 800225c:	1c400117 	ldw	r17,4(r3)
 8002260:	8009883a 	mov	r4,r16
 8002264:	880b883a 	mov	r5,r17
 8002268:	8002d3c0 	call	8002d3c <__adddf3>
 800226c:	d8800015 	stw	r2,0(sp)
 8002270:	d8c00115 	stw	r3,4(sp)
 8002274:	d8800017 	ldw	r2,0(sp)
 8002278:	d8c00117 	ldw	r3,4(sp)
 800227c:	880f883a 	mov	r7,r17
 8002280:	800d883a 	mov	r6,r16
 8002284:	180b883a 	mov	r5,r3
 8002288:	1009883a 	mov	r4,r2
 800228c:	8002cbc0 	call	8002cbc <__subdf3>
 8002290:	1015883a 	mov	r10,r2
 8002294:	1817883a 	mov	r11,r3
 8002298:	5005883a 	mov	r2,r10
 800229c:	5807883a 	mov	r3,r11
 80022a0:	dfc00617 	ldw	ra,24(sp)
 80022a4:	dcc00517 	ldw	r19,20(sp)
 80022a8:	dc800417 	ldw	r18,16(sp)
 80022ac:	dc400317 	ldw	r17,12(sp)
 80022b0:	dc000217 	ldw	r16,8(sp)
 80022b4:	dec00704 	addi	sp,sp,28
 80022b8:	f800283a 	ret
 80022bc:	00800cc4 	movi	r2,51
 80022c0:	12400f16 	blt	r2,r9,8002300 <rint+0x140>
 80022c4:	213efb44 	addi	r4,r4,-1043
 80022c8:	00bfffc4 	movi	r2,-1
 80022cc:	1104d83a 	srl	r2,r2,r4
 80022d0:	5086703a 	and	r3,r10,r2
 80022d4:	183ff026 	beq	r3,zero,8002298 <rint+0xd8>
 80022d8:	100ad07a 	srli	r5,r2,1
 80022dc:	5144703a 	and	r2,r10,r5
 80022e0:	10000526 	beq	r2,zero,80022f8 <rint+0x138>
 80022e4:	00d00034 	movhi	r3,16384
 80022e8:	1907d83a 	sra	r3,r3,r4
 80022ec:	0144303a 	nor	r2,zero,r5
 80022f0:	5084703a 	and	r2,r10,r2
 80022f4:	10ccb03a 	or	r6,r2,r3
 80022f8:	5809883a 	mov	r4,r11
 80022fc:	003fd106 	br	8002244 <rint+0x84>
 8002300:	00810004 	movi	r2,1024
 8002304:	48bfe41e 	bne	r9,r2,8002298 <rint+0xd8>
 8002308:	5009883a 	mov	r4,r10
 800230c:	500d883a 	mov	r6,r10
 8002310:	280f883a 	mov	r7,r5
 8002314:	8002d3c0 	call	8002d3c <__adddf3>
 8002318:	1015883a 	mov	r10,r2
 800231c:	1817883a 	mov	r11,r3
 8002320:	003fdd06 	br	8002298 <rint+0xd8>
 8002324:	04e00034 	movhi	r19,32768
 8002328:	9cffffc4 	addi	r19,r19,-1
 800232c:	2cc4703a 	and	r2,r5,r19
 8002330:	5084b03a 	or	r2,r10,r2
 8002334:	103fd826 	beq	r2,zero,8002298 <rint+0xd8>
 8002338:	00c00434 	movhi	r3,16
 800233c:	18ffffc4 	addi	r3,r3,-1
 8002340:	28c6703a 	and	r3,r5,r3
 8002344:	50c6b03a 	or	r3,r10,r3
 8002348:	00cdc83a 	sub	r6,zero,r3
 800234c:	900a90fa 	slli	r5,r18,3
 8002350:	1986b03a 	or	r3,r3,r6
 8002354:	01020034 	movhi	r4,2048
 8002358:	211f5404 	addi	r4,r4,32080
 800235c:	1806d33a 	srli	r3,r3,12
 8002360:	290b883a 	add	r5,r5,r4
 8002364:	2c000017 	ldw	r16,0(r5)
 8002368:	2c400117 	ldw	r17,4(r5)
 800236c:	593fffac 	andhi	r4,r11,65534
 8002370:	18c0022c 	andhi	r3,r3,8
 8002374:	1906b03a 	or	r3,r3,r4
 8002378:	500d883a 	mov	r6,r10
 800237c:	180f883a 	mov	r7,r3
 8002380:	8009883a 	mov	r4,r16
 8002384:	880b883a 	mov	r5,r17
 8002388:	8002d3c0 	call	8002d3c <__adddf3>
 800238c:	d8800015 	stw	r2,0(sp)
 8002390:	d8c00115 	stw	r3,4(sp)
 8002394:	d8800017 	ldw	r2,0(sp)
 8002398:	d8c00117 	ldw	r3,4(sp)
 800239c:	880f883a 	mov	r7,r17
 80023a0:	800d883a 	mov	r6,r16
 80023a4:	180b883a 	mov	r5,r3
 80023a8:	1009883a 	mov	r4,r2
 80023ac:	8002cbc0 	call	8002cbc <__subdf3>
 80023b0:	901297fa 	slli	r9,r18,31
 80023b4:	98d0703a 	and	r8,r19,r3
 80023b8:	1015883a 	mov	r10,r2
 80023bc:	4250b03a 	or	r8,r8,r9
 80023c0:	4017883a 	mov	r11,r8
 80023c4:	003fb406 	br	8002298 <rint+0xd8>
 80023c8:	01900034 	movhi	r6,16384
 80023cc:	003f9d06 	br	8002244 <rint+0x84>

080023d0 <scalbn>:
 80023d0:	2011883a 	mov	r8,r4
 80023d4:	291ffc2c 	andhi	r4,r5,32752
 80023d8:	2009d53a 	srai	r4,r4,20
 80023dc:	defffd04 	addi	sp,sp,-12
 80023e0:	dc000015 	stw	r16,0(sp)
 80023e4:	dfc00215 	stw	ra,8(sp)
 80023e8:	dc400115 	stw	r17,4(sp)
 80023ec:	2813883a 	mov	r9,r5
 80023f0:	2815883a 	mov	r10,r5
 80023f4:	3021883a 	mov	r16,r6
 80023f8:	2000281e 	bne	r4,zero,800249c <scalbn+0xcc>
 80023fc:	00a00034 	movhi	r2,32768
 8002400:	10bfffc4 	addi	r2,r2,-1
 8002404:	2884703a 	and	r2,r5,r2
 8002408:	4084b03a 	or	r2,r8,r2
 800240c:	10001826 	beq	r2,zero,8002470 <scalbn+0xa0>
 8002410:	0005883a 	mov	r2,zero
 8002414:	00d0d434 	movhi	r3,17232
 8002418:	4009883a 	mov	r4,r8
 800241c:	100d883a 	mov	r6,r2
 8002420:	180f883a 	mov	r7,r3
 8002424:	8002db00 	call	8002db0 <__muldf3>
 8002428:	100b883a 	mov	r5,r2
 800242c:	1011883a 	mov	r8,r2
 8002430:	00bffff4 	movhi	r2,65535
 8002434:	108f2c04 	addi	r2,r2,15536
 8002438:	180d883a 	mov	r6,r3
 800243c:	1813883a 	mov	r9,r3
 8002440:	8080120e 	bge	r16,r2,800248c <scalbn+0xbc>
 8002444:	00b0be74 	movhi	r2,49913
 8002448:	10bcd644 	addi	r2,r2,-3239
 800244c:	00c06974 	movhi	r3,421
 8002450:	18db87c4 	addi	r3,r3,28191
 8002454:	2809883a 	mov	r4,r5
 8002458:	180f883a 	mov	r7,r3
 800245c:	300b883a 	mov	r5,r6
 8002460:	100d883a 	mov	r6,r2
 8002464:	8002db00 	call	8002db0 <__muldf3>
 8002468:	1011883a 	mov	r8,r2
 800246c:	1813883a 	mov	r9,r3
 8002470:	4005883a 	mov	r2,r8
 8002474:	4807883a 	mov	r3,r9
 8002478:	dfc00217 	ldw	ra,8(sp)
 800247c:	dc400117 	ldw	r17,4(sp)
 8002480:	dc000017 	ldw	r16,0(sp)
 8002484:	dec00304 	addi	sp,sp,12
 8002488:	f800283a 	ret
 800248c:	189ffc2c 	andhi	r2,r3,32752
 8002490:	1005d53a 	srai	r2,r2,20
 8002494:	1815883a 	mov	r10,r3
 8002498:	113ff284 	addi	r4,r2,-54
 800249c:	0081ffc4 	movi	r2,2047
 80024a0:	20801126 	beq	r4,r2,80024e8 <scalbn+0x118>
 80024a4:	2409883a 	add	r4,r4,r16
 80024a8:	0081ff84 	movi	r2,2046
 80024ac:	11001c16 	blt	r2,r4,8002520 <scalbn+0x150>
 80024b0:	0100290e 	bge	zero,r4,8002558 <scalbn+0x188>
 80024b4:	200a953a 	slli	r5,r4,20
 80024b8:	01200434 	movhi	r4,32784
 80024bc:	213fffc4 	addi	r4,r4,-1
 80024c0:	5108703a 	and	r4,r10,r4
 80024c4:	2148b03a 	or	r4,r4,r5
 80024c8:	2013883a 	mov	r9,r4
 80024cc:	4005883a 	mov	r2,r8
 80024d0:	4807883a 	mov	r3,r9
 80024d4:	dfc00217 	ldw	ra,8(sp)
 80024d8:	dc400117 	ldw	r17,4(sp)
 80024dc:	dc000017 	ldw	r16,0(sp)
 80024e0:	dec00304 	addi	sp,sp,12
 80024e4:	f800283a 	ret
 80024e8:	480f883a 	mov	r7,r9
 80024ec:	4009883a 	mov	r4,r8
 80024f0:	480b883a 	mov	r5,r9
 80024f4:	400d883a 	mov	r6,r8
 80024f8:	8002d3c0 	call	8002d3c <__adddf3>
 80024fc:	1011883a 	mov	r8,r2
 8002500:	1813883a 	mov	r9,r3
 8002504:	4005883a 	mov	r2,r8
 8002508:	4807883a 	mov	r3,r9
 800250c:	dfc00217 	ldw	ra,8(sp)
 8002510:	dc400117 	ldw	r17,4(sp)
 8002514:	dc000017 	ldw	r16,0(sp)
 8002518:	dec00304 	addi	sp,sp,12
 800251c:	f800283a 	ret
 8002520:	04220034 	movhi	r16,34816
 8002524:	841d6704 	addi	r16,r16,30108
 8002528:	045f8e34 	movhi	r17,32312
 800252c:	8c790f04 	addi	r17,r17,-7108
 8002530:	480f883a 	mov	r7,r9
 8002534:	400d883a 	mov	r6,r8
 8002538:	8009883a 	mov	r4,r16
 800253c:	880b883a 	mov	r5,r17
 8002540:	80025b00 	call	80025b0 <copysign>
 8002544:	180b883a 	mov	r5,r3
 8002548:	800d883a 	mov	r6,r16
 800254c:	880f883a 	mov	r7,r17
 8002550:	1009883a 	mov	r4,r2
 8002554:	003fc306 	br	8002464 <scalbn+0x94>
 8002558:	00bff284 	movi	r2,-54
 800255c:	11000716 	blt	r2,r4,800257c <scalbn+0x1ac>
 8002560:	00b0d414 	movui	r2,50000
 8002564:	143fee16 	blt	r2,r16,8002520 <scalbn+0x150>
 8002568:	0430be74 	movhi	r16,49913
 800256c:	843cd644 	addi	r16,r16,-3239
 8002570:	04406974 	movhi	r17,421
 8002574:	8c5b87c4 	addi	r17,r17,28191
 8002578:	003fed06 	br	8002530 <scalbn+0x160>
 800257c:	21000d84 	addi	r4,r4,54
 8002580:	2008953a 	slli	r4,r4,20
 8002584:	01e00434 	movhi	r7,32784
 8002588:	39ffffc4 	addi	r7,r7,-1
 800258c:	51ce703a 	and	r7,r10,r7
 8002590:	390eb03a 	or	r7,r7,r4
 8002594:	024f2434 	movhi	r9,15504
 8002598:	4009883a 	mov	r4,r8
 800259c:	0011883a 	mov	r8,zero
 80025a0:	380b883a 	mov	r5,r7
 80025a4:	400d883a 	mov	r6,r8
 80025a8:	480f883a 	mov	r7,r9
 80025ac:	003fad06 	br	8002464 <scalbn+0x94>

080025b0 <copysign>:
 80025b0:	3813883a 	mov	r9,r7
 80025b4:	01e00034 	movhi	r7,32768
 80025b8:	39ffffc4 	addi	r7,r7,-1
 80025bc:	394e703a 	and	r7,r7,r5
 80025c0:	4aa0002c 	andhi	r10,r9,32768
 80025c4:	3a8eb03a 	or	r7,r7,r10
 80025c8:	2005883a 	mov	r2,r4
 80025cc:	3807883a 	mov	r3,r7
 80025d0:	f800283a 	ret

080025d4 <__divsf3>:
 80025d4:	defff304 	addi	sp,sp,-52
 80025d8:	dc400b15 	stw	r17,44(sp)
 80025dc:	dc400204 	addi	r17,sp,8
 80025e0:	dc000a15 	stw	r16,40(sp)
 80025e4:	d9000015 	stw	r4,0(sp)
 80025e8:	d9400115 	stw	r5,4(sp)
 80025ec:	d809883a 	mov	r4,sp
 80025f0:	880b883a 	mov	r5,r17
 80025f4:	dc000604 	addi	r16,sp,24
 80025f8:	dfc00c15 	stw	ra,48(sp)
 80025fc:	8003bdc0 	call	8003bdc <__unpack_f>
 8002600:	d9000104 	addi	r4,sp,4
 8002604:	800b883a 	mov	r5,r16
 8002608:	8003bdc0 	call	8003bdc <__unpack_f>
 800260c:	d9000217 	ldw	r4,8(sp)
 8002610:	00800044 	movi	r2,1
 8002614:	01800104 	movi	r6,4
 8002618:	11000a2e 	bgeu	r2,r4,8002644 <__divsf3+0x70>
 800261c:	d9400617 	ldw	r5,24(sp)
 8002620:	1140432e 	bgeu	r2,r5,8002730 <__divsf3+0x15c>
 8002624:	d8800317 	ldw	r2,12(sp)
 8002628:	d8c00717 	ldw	r3,28(sp)
 800262c:	10c4f03a 	xor	r2,r2,r3
 8002630:	d8800315 	stw	r2,12(sp)
 8002634:	21800226 	beq	r4,r6,8002640 <__divsf3+0x6c>
 8002638:	00800084 	movi	r2,2
 800263c:	2080101e 	bne	r4,r2,8002680 <__divsf3+0xac>
 8002640:	29000726 	beq	r5,r4,8002660 <__divsf3+0x8c>
 8002644:	8809883a 	mov	r4,r17
 8002648:	8003a7c0 	call	8003a7c <__pack_f>
 800264c:	dfc00c17 	ldw	ra,48(sp)
 8002650:	dc400b17 	ldw	r17,44(sp)
 8002654:	dc000a17 	ldw	r16,40(sp)
 8002658:	dec00d04 	addi	sp,sp,52
 800265c:	f800283a 	ret
 8002660:	01020034 	movhi	r4,2048
 8002664:	211f5804 	addi	r4,r4,32096
 8002668:	8003a7c0 	call	8003a7c <__pack_f>
 800266c:	dfc00c17 	ldw	ra,48(sp)
 8002670:	dc400b17 	ldw	r17,44(sp)
 8002674:	dc000a17 	ldw	r16,40(sp)
 8002678:	dec00d04 	addi	sp,sp,52
 800267c:	f800283a 	ret
 8002680:	29802d26 	beq	r5,r6,8002738 <__divsf3+0x164>
 8002684:	28801a26 	beq	r5,r2,80026f0 <__divsf3+0x11c>
 8002688:	d8c00417 	ldw	r3,16(sp)
 800268c:	d8800817 	ldw	r2,32(sp)
 8002690:	d9000517 	ldw	r4,20(sp)
 8002694:	d9800917 	ldw	r6,36(sp)
 8002698:	1885c83a 	sub	r2,r3,r2
 800269c:	d8800415 	stw	r2,16(sp)
 80026a0:	2180032e 	bgeu	r4,r6,80026b0 <__divsf3+0xdc>
 80026a4:	10bfffc4 	addi	r2,r2,-1
 80026a8:	d8800415 	stw	r2,16(sp)
 80026ac:	2109883a 	add	r4,r4,r4
 80026b0:	01500034 	movhi	r5,16384
 80026b4:	0007883a 	mov	r3,zero
 80026b8:	0005883a 	mov	r2,zero
 80026bc:	01c007c4 	movi	r7,31
 80026c0:	10800044 	addi	r2,r2,1
 80026c4:	21800236 	bltu	r4,r6,80026d0 <__divsf3+0xfc>
 80026c8:	1946b03a 	or	r3,r3,r5
 80026cc:	2189c83a 	sub	r4,r4,r6
 80026d0:	280ad07a 	srli	r5,r5,1
 80026d4:	2109883a 	add	r4,r4,r4
 80026d8:	11fff91e 	bne	r2,r7,80026c0 <__divsf3+0xec>
 80026dc:	19401fcc 	andi	r5,r3,127
 80026e0:	00801004 	movi	r2,64
 80026e4:	28800a26 	beq	r5,r2,8002710 <__divsf3+0x13c>
 80026e8:	d8c00515 	stw	r3,20(sp)
 80026ec:	003fd506 	br	8002644 <__divsf3+0x70>
 80026f0:	8809883a 	mov	r4,r17
 80026f4:	d9800215 	stw	r6,8(sp)
 80026f8:	8003a7c0 	call	8003a7c <__pack_f>
 80026fc:	dfc00c17 	ldw	ra,48(sp)
 8002700:	dc400b17 	ldw	r17,44(sp)
 8002704:	dc000a17 	ldw	r16,40(sp)
 8002708:	dec00d04 	addi	sp,sp,52
 800270c:	f800283a 	ret
 8002710:	1880200c 	andi	r2,r3,128
 8002714:	103ff41e 	bne	r2,zero,80026e8 <__divsf3+0x114>
 8002718:	203ff326 	beq	r4,zero,80026e8 <__divsf3+0x114>
 800271c:	1947883a 	add	r3,r3,r5
 8002720:	00bfe004 	movi	r2,-128
 8002724:	1886703a 	and	r3,r3,r2
 8002728:	d8c00515 	stw	r3,20(sp)
 800272c:	003fc506 	br	8002644 <__divsf3+0x70>
 8002730:	8009883a 	mov	r4,r16
 8002734:	003fc406 	br	8002648 <__divsf3+0x74>
 8002738:	8809883a 	mov	r4,r17
 800273c:	d8000515 	stw	zero,20(sp)
 8002740:	d8000415 	stw	zero,16(sp)
 8002744:	003fc006 	br	8002648 <__divsf3+0x74>

08002748 <__lesf2>:
 8002748:	defff304 	addi	sp,sp,-52
 800274c:	dc400b15 	stw	r17,44(sp)
 8002750:	dc400204 	addi	r17,sp,8
 8002754:	dc000a15 	stw	r16,40(sp)
 8002758:	d9000015 	stw	r4,0(sp)
 800275c:	d9400115 	stw	r5,4(sp)
 8002760:	d809883a 	mov	r4,sp
 8002764:	880b883a 	mov	r5,r17
 8002768:	dc000604 	addi	r16,sp,24
 800276c:	dfc00c15 	stw	ra,48(sp)
 8002770:	8003bdc0 	call	8003bdc <__unpack_f>
 8002774:	d9000104 	addi	r4,sp,4
 8002778:	800b883a 	mov	r5,r16
 800277c:	8003bdc0 	call	8003bdc <__unpack_f>
 8002780:	d8800217 	ldw	r2,8(sp)
 8002784:	00c00044 	movi	r3,1
 8002788:	180d883a 	mov	r6,r3
 800278c:	1880062e 	bgeu	r3,r2,80027a8 <__lesf2+0x60>
 8002790:	d8800617 	ldw	r2,24(sp)
 8002794:	8809883a 	mov	r4,r17
 8002798:	800b883a 	mov	r5,r16
 800279c:	1880022e 	bgeu	r3,r2,80027a8 <__lesf2+0x60>
 80027a0:	8003ca40 	call	8003ca4 <__fpcmp_parts_f>
 80027a4:	100d883a 	mov	r6,r2
 80027a8:	3005883a 	mov	r2,r6
 80027ac:	dfc00c17 	ldw	ra,48(sp)
 80027b0:	dc400b17 	ldw	r17,44(sp)
 80027b4:	dc000a17 	ldw	r16,40(sp)
 80027b8:	dec00d04 	addi	sp,sp,52
 80027bc:	f800283a 	ret

080027c0 <__floatsisf>:
 80027c0:	2006d7fa 	srli	r3,r4,31
 80027c4:	defffa04 	addi	sp,sp,-24
 80027c8:	008000c4 	movi	r2,3
 80027cc:	dfc00515 	stw	ra,20(sp)
 80027d0:	dc000415 	stw	r16,16(sp)
 80027d4:	d8800015 	stw	r2,0(sp)
 80027d8:	d8c00115 	stw	r3,4(sp)
 80027dc:	2000081e 	bne	r4,zero,8002800 <__floatsisf+0x40>
 80027e0:	00800084 	movi	r2,2
 80027e4:	d8800015 	stw	r2,0(sp)
 80027e8:	d809883a 	mov	r4,sp
 80027ec:	8003a7c0 	call	8003a7c <__pack_f>
 80027f0:	dfc00517 	ldw	ra,20(sp)
 80027f4:	dc000417 	ldw	r16,16(sp)
 80027f8:	dec00604 	addi	sp,sp,24
 80027fc:	f800283a 	ret
 8002800:	00800784 	movi	r2,30
 8002804:	1807003a 	cmpeq	r3,r3,zero
 8002808:	d8800215 	stw	r2,8(sp)
 800280c:	18000e1e 	bne	r3,zero,8002848 <__floatsisf+0x88>
 8002810:	00a00034 	movhi	r2,32768
 8002814:	20800e26 	beq	r4,r2,8002850 <__floatsisf+0x90>
 8002818:	0121c83a 	sub	r16,zero,r4
 800281c:	8009883a 	mov	r4,r16
 8002820:	dc000315 	stw	r16,12(sp)
 8002824:	80039fc0 	call	80039fc <__clzsi2>
 8002828:	117fffc4 	addi	r5,r2,-1
 800282c:	017fee0e 	bge	zero,r5,80027e8 <__floatsisf+0x28>
 8002830:	d8800217 	ldw	r2,8(sp)
 8002834:	8146983a 	sll	r3,r16,r5
 8002838:	1145c83a 	sub	r2,r2,r5
 800283c:	d8c00315 	stw	r3,12(sp)
 8002840:	d8800215 	stw	r2,8(sp)
 8002844:	003fe806 	br	80027e8 <__floatsisf+0x28>
 8002848:	2021883a 	mov	r16,r4
 800284c:	003ff306 	br	800281c <__floatsisf+0x5c>
 8002850:	00b3c034 	movhi	r2,52992
 8002854:	003fe606 	br	80027f0 <__floatsisf+0x30>

08002858 <__extendsfdf2>:
 8002858:	defff904 	addi	sp,sp,-28
 800285c:	d9000115 	stw	r4,4(sp)
 8002860:	d9400204 	addi	r5,sp,8
 8002864:	d9000104 	addi	r4,sp,4
 8002868:	dfc00615 	stw	ra,24(sp)
 800286c:	8003bdc0 	call	8003bdc <__unpack_f>
 8002870:	d9c00517 	ldw	r7,20(sp)
 8002874:	0011883a 	mov	r8,zero
 8002878:	400697ba 	slli	r3,r8,30
 800287c:	3812d0ba 	srli	r9,r7,2
 8002880:	380497ba 	slli	r2,r7,30
 8002884:	d9000217 	ldw	r4,8(sp)
 8002888:	d9400317 	ldw	r5,12(sp)
 800288c:	d9800417 	ldw	r6,16(sp)
 8002890:	48c6b03a 	or	r3,r9,r3
 8002894:	100f883a 	mov	r7,r2
 8002898:	d8c00015 	stw	r3,0(sp)
 800289c:	800376c0 	call	800376c <__make_dp>
 80028a0:	dfc00617 	ldw	ra,24(sp)
 80028a4:	dec00704 	addi	sp,sp,28
 80028a8:	f800283a 	ret

080028ac <_fpadd_parts>:
 80028ac:	defff804 	addi	sp,sp,-32
 80028b0:	dcc00315 	stw	r19,12(sp)
 80028b4:	2027883a 	mov	r19,r4
 80028b8:	21000017 	ldw	r4,0(r4)
 80028bc:	00c00044 	movi	r3,1
 80028c0:	dd400515 	stw	r21,20(sp)
 80028c4:	dd000415 	stw	r20,16(sp)
 80028c8:	ddc00715 	stw	r23,28(sp)
 80028cc:	dd800615 	stw	r22,24(sp)
 80028d0:	dc800215 	stw	r18,8(sp)
 80028d4:	dc400115 	stw	r17,4(sp)
 80028d8:	dc000015 	stw	r16,0(sp)
 80028dc:	282b883a 	mov	r21,r5
 80028e0:	3029883a 	mov	r20,r6
 80028e4:	1900632e 	bgeu	r3,r4,8002a74 <_fpadd_parts+0x1c8>
 80028e8:	28800017 	ldw	r2,0(r5)
 80028ec:	1880812e 	bgeu	r3,r2,8002af4 <_fpadd_parts+0x248>
 80028f0:	00c00104 	movi	r3,4
 80028f4:	20c0dc26 	beq	r4,r3,8002c68 <_fpadd_parts+0x3bc>
 80028f8:	10c07e26 	beq	r2,r3,8002af4 <_fpadd_parts+0x248>
 80028fc:	00c00084 	movi	r3,2
 8002900:	10c06726 	beq	r2,r3,8002aa0 <_fpadd_parts+0x1f4>
 8002904:	20c07b26 	beq	r4,r3,8002af4 <_fpadd_parts+0x248>
 8002908:	9dc00217 	ldw	r23,8(r19)
 800290c:	28c00217 	ldw	r3,8(r5)
 8002910:	9c400317 	ldw	r17,12(r19)
 8002914:	2bc00317 	ldw	r15,12(r5)
 8002918:	b8cdc83a 	sub	r6,r23,r3
 800291c:	9c800417 	ldw	r18,16(r19)
 8002920:	2c000417 	ldw	r16,16(r5)
 8002924:	3009883a 	mov	r4,r6
 8002928:	30009716 	blt	r6,zero,8002b88 <_fpadd_parts+0x2dc>
 800292c:	00800fc4 	movi	r2,63
 8002930:	11806b16 	blt	r2,r6,8002ae0 <_fpadd_parts+0x234>
 8002934:	0100a40e 	bge	zero,r4,8002bc8 <_fpadd_parts+0x31c>
 8002938:	35bff804 	addi	r22,r6,-32
 800293c:	b000bc16 	blt	r22,zero,8002c30 <_fpadd_parts+0x384>
 8002940:	8596d83a 	srl	r11,r16,r22
 8002944:	0019883a 	mov	r12,zero
 8002948:	0013883a 	mov	r9,zero
 800294c:	01000044 	movi	r4,1
 8002950:	0015883a 	mov	r10,zero
 8002954:	b000be16 	blt	r22,zero,8002c50 <_fpadd_parts+0x3a4>
 8002958:	2590983a 	sll	r8,r4,r22
 800295c:	000f883a 	mov	r7,zero
 8002960:	00bfffc4 	movi	r2,-1
 8002964:	3889883a 	add	r4,r7,r2
 8002968:	408b883a 	add	r5,r8,r2
 800296c:	21cd803a 	cmpltu	r6,r4,r7
 8002970:	314b883a 	add	r5,r6,r5
 8002974:	7904703a 	and	r2,r15,r4
 8002978:	8146703a 	and	r3,r16,r5
 800297c:	10c4b03a 	or	r2,r2,r3
 8002980:	10000226 	beq	r2,zero,800298c <_fpadd_parts+0xe0>
 8002984:	02400044 	movi	r9,1
 8002988:	0015883a 	mov	r10,zero
 800298c:	5a5eb03a 	or	r15,r11,r9
 8002990:	62a0b03a 	or	r16,r12,r10
 8002994:	99400117 	ldw	r5,4(r19)
 8002998:	a8800117 	ldw	r2,4(r21)
 800299c:	28806e26 	beq	r5,r2,8002b58 <_fpadd_parts+0x2ac>
 80029a0:	28006626 	beq	r5,zero,8002b3c <_fpadd_parts+0x290>
 80029a4:	7c45c83a 	sub	r2,r15,r17
 80029a8:	7889803a 	cmpltu	r4,r15,r2
 80029ac:	8487c83a 	sub	r3,r16,r18
 80029b0:	1909c83a 	sub	r4,r3,r4
 80029b4:	100d883a 	mov	r6,r2
 80029b8:	200f883a 	mov	r7,r4
 80029bc:	38007716 	blt	r7,zero,8002b9c <_fpadd_parts+0x2f0>
 80029c0:	a5c00215 	stw	r23,8(r20)
 80029c4:	a1c00415 	stw	r7,16(r20)
 80029c8:	a0000115 	stw	zero,4(r20)
 80029cc:	a1800315 	stw	r6,12(r20)
 80029d0:	a2000317 	ldw	r8,12(r20)
 80029d4:	a2400417 	ldw	r9,16(r20)
 80029d8:	00bfffc4 	movi	r2,-1
 80029dc:	408b883a 	add	r5,r8,r2
 80029e0:	2a09803a 	cmpltu	r4,r5,r8
 80029e4:	488d883a 	add	r6,r9,r2
 80029e8:	01c40034 	movhi	r7,4096
 80029ec:	39ffffc4 	addi	r7,r7,-1
 80029f0:	218d883a 	add	r6,r4,r6
 80029f4:	39801736 	bltu	r7,r6,8002a54 <_fpadd_parts+0x1a8>
 80029f8:	31c06526 	beq	r6,r7,8002b90 <_fpadd_parts+0x2e4>
 80029fc:	a3000217 	ldw	r12,8(r20)
 8002a00:	4209883a 	add	r4,r8,r8
 8002a04:	00bfffc4 	movi	r2,-1
 8002a08:	220f803a 	cmpltu	r7,r4,r8
 8002a0c:	4a4b883a 	add	r5,r9,r9
 8002a10:	394f883a 	add	r7,r7,r5
 8002a14:	2095883a 	add	r10,r4,r2
 8002a18:	3897883a 	add	r11,r7,r2
 8002a1c:	510d803a 	cmpltu	r6,r10,r4
 8002a20:	6099883a 	add	r12,r12,r2
 8002a24:	32d7883a 	add	r11,r6,r11
 8002a28:	00840034 	movhi	r2,4096
 8002a2c:	10bfffc4 	addi	r2,r2,-1
 8002a30:	2011883a 	mov	r8,r4
 8002a34:	3813883a 	mov	r9,r7
 8002a38:	a1000315 	stw	r4,12(r20)
 8002a3c:	a1c00415 	stw	r7,16(r20)
 8002a40:	a3000215 	stw	r12,8(r20)
 8002a44:	12c00336 	bltu	r2,r11,8002a54 <_fpadd_parts+0x1a8>
 8002a48:	58bfed1e 	bne	r11,r2,8002a00 <_fpadd_parts+0x154>
 8002a4c:	00bfff84 	movi	r2,-2
 8002a50:	12bfeb2e 	bgeu	r2,r10,8002a00 <_fpadd_parts+0x154>
 8002a54:	a2800417 	ldw	r10,16(r20)
 8002a58:	008000c4 	movi	r2,3
 8002a5c:	00c80034 	movhi	r3,8192
 8002a60:	18ffffc4 	addi	r3,r3,-1
 8002a64:	a2400317 	ldw	r9,12(r20)
 8002a68:	a0800015 	stw	r2,0(r20)
 8002a6c:	1a802336 	bltu	r3,r10,8002afc <_fpadd_parts+0x250>
 8002a70:	a027883a 	mov	r19,r20
 8002a74:	9805883a 	mov	r2,r19
 8002a78:	ddc00717 	ldw	r23,28(sp)
 8002a7c:	dd800617 	ldw	r22,24(sp)
 8002a80:	dd400517 	ldw	r21,20(sp)
 8002a84:	dd000417 	ldw	r20,16(sp)
 8002a88:	dcc00317 	ldw	r19,12(sp)
 8002a8c:	dc800217 	ldw	r18,8(sp)
 8002a90:	dc400117 	ldw	r17,4(sp)
 8002a94:	dc000017 	ldw	r16,0(sp)
 8002a98:	dec00804 	addi	sp,sp,32
 8002a9c:	f800283a 	ret
 8002aa0:	20fff41e 	bne	r4,r3,8002a74 <_fpadd_parts+0x1c8>
 8002aa4:	31000015 	stw	r4,0(r6)
 8002aa8:	98800117 	ldw	r2,4(r19)
 8002aac:	30800115 	stw	r2,4(r6)
 8002ab0:	98c00217 	ldw	r3,8(r19)
 8002ab4:	30c00215 	stw	r3,8(r6)
 8002ab8:	98800317 	ldw	r2,12(r19)
 8002abc:	30800315 	stw	r2,12(r6)
 8002ac0:	98c00417 	ldw	r3,16(r19)
 8002ac4:	30c00415 	stw	r3,16(r6)
 8002ac8:	98800117 	ldw	r2,4(r19)
 8002acc:	28c00117 	ldw	r3,4(r5)
 8002ad0:	3027883a 	mov	r19,r6
 8002ad4:	10c4703a 	and	r2,r2,r3
 8002ad8:	30800115 	stw	r2,4(r6)
 8002adc:	003fe506 	br	8002a74 <_fpadd_parts+0x1c8>
 8002ae0:	1dc02616 	blt	r3,r23,8002b7c <_fpadd_parts+0x2d0>
 8002ae4:	0023883a 	mov	r17,zero
 8002ae8:	182f883a 	mov	r23,r3
 8002aec:	0025883a 	mov	r18,zero
 8002af0:	003fa806 	br	8002994 <_fpadd_parts+0xe8>
 8002af4:	a827883a 	mov	r19,r21
 8002af8:	003fde06 	br	8002a74 <_fpadd_parts+0x1c8>
 8002afc:	01800044 	movi	r6,1
 8002b00:	500497fa 	slli	r2,r10,31
 8002b04:	4808d07a 	srli	r4,r9,1
 8002b08:	518ad83a 	srl	r5,r10,r6
 8002b0c:	a2000217 	ldw	r8,8(r20)
 8002b10:	1108b03a 	or	r4,r2,r4
 8002b14:	0007883a 	mov	r3,zero
 8002b18:	4984703a 	and	r2,r9,r6
 8002b1c:	208cb03a 	or	r6,r4,r2
 8002b20:	28ceb03a 	or	r7,r5,r3
 8002b24:	42000044 	addi	r8,r8,1
 8002b28:	a027883a 	mov	r19,r20
 8002b2c:	a1c00415 	stw	r7,16(r20)
 8002b30:	a2000215 	stw	r8,8(r20)
 8002b34:	a1800315 	stw	r6,12(r20)
 8002b38:	003fce06 	br	8002a74 <_fpadd_parts+0x1c8>
 8002b3c:	8bc5c83a 	sub	r2,r17,r15
 8002b40:	8889803a 	cmpltu	r4,r17,r2
 8002b44:	9407c83a 	sub	r3,r18,r16
 8002b48:	1909c83a 	sub	r4,r3,r4
 8002b4c:	100d883a 	mov	r6,r2
 8002b50:	200f883a 	mov	r7,r4
 8002b54:	003f9906 	br	80029bc <_fpadd_parts+0x110>
 8002b58:	7c45883a 	add	r2,r15,r17
 8002b5c:	13c9803a 	cmpltu	r4,r2,r15
 8002b60:	8487883a 	add	r3,r16,r18
 8002b64:	20c9883a 	add	r4,r4,r3
 8002b68:	a1400115 	stw	r5,4(r20)
 8002b6c:	a5c00215 	stw	r23,8(r20)
 8002b70:	a0800315 	stw	r2,12(r20)
 8002b74:	a1000415 	stw	r4,16(r20)
 8002b78:	003fb606 	br	8002a54 <_fpadd_parts+0x1a8>
 8002b7c:	001f883a 	mov	r15,zero
 8002b80:	0021883a 	mov	r16,zero
 8002b84:	003f8306 	br	8002994 <_fpadd_parts+0xe8>
 8002b88:	018dc83a 	sub	r6,zero,r6
 8002b8c:	003f6706 	br	800292c <_fpadd_parts+0x80>
 8002b90:	00bfff84 	movi	r2,-2
 8002b94:	117faf36 	bltu	r2,r5,8002a54 <_fpadd_parts+0x1a8>
 8002b98:	003f9806 	br	80029fc <_fpadd_parts+0x150>
 8002b9c:	0005883a 	mov	r2,zero
 8002ba0:	1189c83a 	sub	r4,r2,r6
 8002ba4:	1105803a 	cmpltu	r2,r2,r4
 8002ba8:	01cbc83a 	sub	r5,zero,r7
 8002bac:	2885c83a 	sub	r2,r5,r2
 8002bb0:	01800044 	movi	r6,1
 8002bb4:	a1800115 	stw	r6,4(r20)
 8002bb8:	a5c00215 	stw	r23,8(r20)
 8002bbc:	a1000315 	stw	r4,12(r20)
 8002bc0:	a0800415 	stw	r2,16(r20)
 8002bc4:	003f8206 	br	80029d0 <_fpadd_parts+0x124>
 8002bc8:	203f7226 	beq	r4,zero,8002994 <_fpadd_parts+0xe8>
 8002bcc:	35bff804 	addi	r22,r6,-32
 8002bd0:	b9af883a 	add	r23,r23,r6
 8002bd4:	b0003116 	blt	r22,zero,8002c9c <_fpadd_parts+0x3f0>
 8002bd8:	959ad83a 	srl	r13,r18,r22
 8002bdc:	001d883a 	mov	r14,zero
 8002be0:	000f883a 	mov	r7,zero
 8002be4:	01000044 	movi	r4,1
 8002be8:	0011883a 	mov	r8,zero
 8002bec:	b0002516 	blt	r22,zero,8002c84 <_fpadd_parts+0x3d8>
 8002bf0:	2594983a 	sll	r10,r4,r22
 8002bf4:	0013883a 	mov	r9,zero
 8002bf8:	00bfffc4 	movi	r2,-1
 8002bfc:	4889883a 	add	r4,r9,r2
 8002c00:	508b883a 	add	r5,r10,r2
 8002c04:	224d803a 	cmpltu	r6,r4,r9
 8002c08:	314b883a 	add	r5,r6,r5
 8002c0c:	8904703a 	and	r2,r17,r4
 8002c10:	9146703a 	and	r3,r18,r5
 8002c14:	10c4b03a 	or	r2,r2,r3
 8002c18:	10000226 	beq	r2,zero,8002c24 <_fpadd_parts+0x378>
 8002c1c:	01c00044 	movi	r7,1
 8002c20:	0011883a 	mov	r8,zero
 8002c24:	69e2b03a 	or	r17,r13,r7
 8002c28:	7224b03a 	or	r18,r14,r8
 8002c2c:	003f5906 	br	8002994 <_fpadd_parts+0xe8>
 8002c30:	8407883a 	add	r3,r16,r16
 8002c34:	008007c4 	movi	r2,31
 8002c38:	1185c83a 	sub	r2,r2,r6
 8002c3c:	1886983a 	sll	r3,r3,r2
 8002c40:	7996d83a 	srl	r11,r15,r6
 8002c44:	8198d83a 	srl	r12,r16,r6
 8002c48:	1ad6b03a 	or	r11,r3,r11
 8002c4c:	003f3e06 	br	8002948 <_fpadd_parts+0x9c>
 8002c50:	2006d07a 	srli	r3,r4,1
 8002c54:	008007c4 	movi	r2,31
 8002c58:	1185c83a 	sub	r2,r2,r6
 8002c5c:	1890d83a 	srl	r8,r3,r2
 8002c60:	218e983a 	sll	r7,r4,r6
 8002c64:	003f3e06 	br	8002960 <_fpadd_parts+0xb4>
 8002c68:	113f821e 	bne	r2,r4,8002a74 <_fpadd_parts+0x1c8>
 8002c6c:	28c00117 	ldw	r3,4(r5)
 8002c70:	98800117 	ldw	r2,4(r19)
 8002c74:	10ff7f26 	beq	r2,r3,8002a74 <_fpadd_parts+0x1c8>
 8002c78:	04c20034 	movhi	r19,2048
 8002c7c:	9cdf5c04 	addi	r19,r19,32112
 8002c80:	003f7c06 	br	8002a74 <_fpadd_parts+0x1c8>
 8002c84:	2006d07a 	srli	r3,r4,1
 8002c88:	008007c4 	movi	r2,31
 8002c8c:	1185c83a 	sub	r2,r2,r6
 8002c90:	1894d83a 	srl	r10,r3,r2
 8002c94:	2192983a 	sll	r9,r4,r6
 8002c98:	003fd706 	br	8002bf8 <_fpadd_parts+0x34c>
 8002c9c:	9487883a 	add	r3,r18,r18
 8002ca0:	008007c4 	movi	r2,31
 8002ca4:	1185c83a 	sub	r2,r2,r6
 8002ca8:	1886983a 	sll	r3,r3,r2
 8002cac:	899ad83a 	srl	r13,r17,r6
 8002cb0:	919cd83a 	srl	r14,r18,r6
 8002cb4:	1b5ab03a 	or	r13,r3,r13
 8002cb8:	003fc906 	br	8002be0 <_fpadd_parts+0x334>

08002cbc <__subdf3>:
 8002cbc:	deffea04 	addi	sp,sp,-88
 8002cc0:	dcc01415 	stw	r19,80(sp)
 8002cc4:	dcc00404 	addi	r19,sp,16
 8002cc8:	2011883a 	mov	r8,r4
 8002ccc:	2813883a 	mov	r9,r5
 8002cd0:	dc401315 	stw	r17,76(sp)
 8002cd4:	d809883a 	mov	r4,sp
 8002cd8:	980b883a 	mov	r5,r19
 8002cdc:	dc400904 	addi	r17,sp,36
 8002ce0:	dfc01515 	stw	ra,84(sp)
 8002ce4:	da400115 	stw	r9,4(sp)
 8002ce8:	d9c00315 	stw	r7,12(sp)
 8002cec:	da000015 	stw	r8,0(sp)
 8002cf0:	d9800215 	stw	r6,8(sp)
 8002cf4:	800408c0 	call	800408c <__unpack_d>
 8002cf8:	d9000204 	addi	r4,sp,8
 8002cfc:	880b883a 	mov	r5,r17
 8002d00:	800408c0 	call	800408c <__unpack_d>
 8002d04:	d8800a17 	ldw	r2,40(sp)
 8002d08:	880b883a 	mov	r5,r17
 8002d0c:	9809883a 	mov	r4,r19
 8002d10:	d9800e04 	addi	r6,sp,56
 8002d14:	1080005c 	xori	r2,r2,1
 8002d18:	d8800a15 	stw	r2,40(sp)
 8002d1c:	80028ac0 	call	80028ac <_fpadd_parts>
 8002d20:	1009883a 	mov	r4,r2
 8002d24:	8003d780 	call	8003d78 <__pack_d>
 8002d28:	dfc01517 	ldw	ra,84(sp)
 8002d2c:	dcc01417 	ldw	r19,80(sp)
 8002d30:	dc401317 	ldw	r17,76(sp)
 8002d34:	dec01604 	addi	sp,sp,88
 8002d38:	f800283a 	ret

08002d3c <__adddf3>:
 8002d3c:	deffea04 	addi	sp,sp,-88
 8002d40:	dcc01415 	stw	r19,80(sp)
 8002d44:	dcc00404 	addi	r19,sp,16
 8002d48:	2011883a 	mov	r8,r4
 8002d4c:	2813883a 	mov	r9,r5
 8002d50:	dc401315 	stw	r17,76(sp)
 8002d54:	d809883a 	mov	r4,sp
 8002d58:	980b883a 	mov	r5,r19
 8002d5c:	dc400904 	addi	r17,sp,36
 8002d60:	dfc01515 	stw	ra,84(sp)
 8002d64:	da400115 	stw	r9,4(sp)
 8002d68:	d9c00315 	stw	r7,12(sp)
 8002d6c:	da000015 	stw	r8,0(sp)
 8002d70:	d9800215 	stw	r6,8(sp)
 8002d74:	800408c0 	call	800408c <__unpack_d>
 8002d78:	d9000204 	addi	r4,sp,8
 8002d7c:	880b883a 	mov	r5,r17
 8002d80:	800408c0 	call	800408c <__unpack_d>
 8002d84:	d9800e04 	addi	r6,sp,56
 8002d88:	9809883a 	mov	r4,r19
 8002d8c:	880b883a 	mov	r5,r17
 8002d90:	80028ac0 	call	80028ac <_fpadd_parts>
 8002d94:	1009883a 	mov	r4,r2
 8002d98:	8003d780 	call	8003d78 <__pack_d>
 8002d9c:	dfc01517 	ldw	ra,84(sp)
 8002da0:	dcc01417 	ldw	r19,80(sp)
 8002da4:	dc401317 	ldw	r17,76(sp)
 8002da8:	dec01604 	addi	sp,sp,88
 8002dac:	f800283a 	ret

08002db0 <__muldf3>:
 8002db0:	deffe004 	addi	sp,sp,-128
 8002db4:	dc401815 	stw	r17,96(sp)
 8002db8:	dc400404 	addi	r17,sp,16
 8002dbc:	2011883a 	mov	r8,r4
 8002dc0:	2813883a 	mov	r9,r5
 8002dc4:	dc001715 	stw	r16,92(sp)
 8002dc8:	d809883a 	mov	r4,sp
 8002dcc:	880b883a 	mov	r5,r17
 8002dd0:	dc000904 	addi	r16,sp,36
 8002dd4:	dfc01f15 	stw	ra,124(sp)
 8002dd8:	da400115 	stw	r9,4(sp)
 8002ddc:	d9c00315 	stw	r7,12(sp)
 8002de0:	da000015 	stw	r8,0(sp)
 8002de4:	d9800215 	stw	r6,8(sp)
 8002de8:	ddc01e15 	stw	r23,120(sp)
 8002dec:	dd801d15 	stw	r22,116(sp)
 8002df0:	dd401c15 	stw	r21,112(sp)
 8002df4:	dd001b15 	stw	r20,108(sp)
 8002df8:	dcc01a15 	stw	r19,104(sp)
 8002dfc:	dc801915 	stw	r18,100(sp)
 8002e00:	800408c0 	call	800408c <__unpack_d>
 8002e04:	d9000204 	addi	r4,sp,8
 8002e08:	800b883a 	mov	r5,r16
 8002e0c:	800408c0 	call	800408c <__unpack_d>
 8002e10:	d9000417 	ldw	r4,16(sp)
 8002e14:	00800044 	movi	r2,1
 8002e18:	1100102e 	bgeu	r2,r4,8002e5c <__muldf3+0xac>
 8002e1c:	d8c00917 	ldw	r3,36(sp)
 8002e20:	10c0062e 	bgeu	r2,r3,8002e3c <__muldf3+0x8c>
 8002e24:	00800104 	movi	r2,4
 8002e28:	20800a26 	beq	r4,r2,8002e54 <__muldf3+0xa4>
 8002e2c:	1880cc26 	beq	r3,r2,8003160 <__muldf3+0x3b0>
 8002e30:	00800084 	movi	r2,2
 8002e34:	20800926 	beq	r4,r2,8002e5c <__muldf3+0xac>
 8002e38:	1880191e 	bne	r3,r2,8002ea0 <__muldf3+0xf0>
 8002e3c:	d8c00a17 	ldw	r3,40(sp)
 8002e40:	d8800517 	ldw	r2,20(sp)
 8002e44:	8009883a 	mov	r4,r16
 8002e48:	10c4c03a 	cmpne	r2,r2,r3
 8002e4c:	d8800a15 	stw	r2,40(sp)
 8002e50:	00000706 	br	8002e70 <__muldf3+0xc0>
 8002e54:	00800084 	movi	r2,2
 8002e58:	1880c326 	beq	r3,r2,8003168 <__muldf3+0x3b8>
 8002e5c:	d8800517 	ldw	r2,20(sp)
 8002e60:	d8c00a17 	ldw	r3,40(sp)
 8002e64:	8809883a 	mov	r4,r17
 8002e68:	10c4c03a 	cmpne	r2,r2,r3
 8002e6c:	d8800515 	stw	r2,20(sp)
 8002e70:	8003d780 	call	8003d78 <__pack_d>
 8002e74:	dfc01f17 	ldw	ra,124(sp)
 8002e78:	ddc01e17 	ldw	r23,120(sp)
 8002e7c:	dd801d17 	ldw	r22,116(sp)
 8002e80:	dd401c17 	ldw	r21,112(sp)
 8002e84:	dd001b17 	ldw	r20,108(sp)
 8002e88:	dcc01a17 	ldw	r19,104(sp)
 8002e8c:	dc801917 	ldw	r18,100(sp)
 8002e90:	dc401817 	ldw	r17,96(sp)
 8002e94:	dc001717 	ldw	r16,92(sp)
 8002e98:	dec02004 	addi	sp,sp,128
 8002e9c:	f800283a 	ret
 8002ea0:	dd800717 	ldw	r22,28(sp)
 8002ea4:	dc800c17 	ldw	r18,48(sp)
 8002ea8:	002b883a 	mov	r21,zero
 8002eac:	0023883a 	mov	r17,zero
 8002eb0:	a80b883a 	mov	r5,r21
 8002eb4:	b00d883a 	mov	r6,r22
 8002eb8:	880f883a 	mov	r7,r17
 8002ebc:	ddc00817 	ldw	r23,32(sp)
 8002ec0:	dcc00d17 	ldw	r19,52(sp)
 8002ec4:	9009883a 	mov	r4,r18
 8002ec8:	80039640 	call	8003964 <__muldi3>
 8002ecc:	001b883a 	mov	r13,zero
 8002ed0:	680f883a 	mov	r7,r13
 8002ed4:	b009883a 	mov	r4,r22
 8002ed8:	000b883a 	mov	r5,zero
 8002edc:	980d883a 	mov	r6,r19
 8002ee0:	b82d883a 	mov	r22,r23
 8002ee4:	002f883a 	mov	r23,zero
 8002ee8:	db401615 	stw	r13,88(sp)
 8002eec:	d8801315 	stw	r2,76(sp)
 8002ef0:	d8c01415 	stw	r3,80(sp)
 8002ef4:	dcc01515 	stw	r19,84(sp)
 8002ef8:	80039640 	call	8003964 <__muldi3>
 8002efc:	b00d883a 	mov	r6,r22
 8002f00:	000b883a 	mov	r5,zero
 8002f04:	9009883a 	mov	r4,r18
 8002f08:	b80f883a 	mov	r7,r23
 8002f0c:	1021883a 	mov	r16,r2
 8002f10:	1823883a 	mov	r17,r3
 8002f14:	80039640 	call	8003964 <__muldi3>
 8002f18:	8085883a 	add	r2,r16,r2
 8002f1c:	140d803a 	cmpltu	r6,r2,r16
 8002f20:	88c7883a 	add	r3,r17,r3
 8002f24:	30cd883a 	add	r6,r6,r3
 8002f28:	1029883a 	mov	r20,r2
 8002f2c:	302b883a 	mov	r21,r6
 8002f30:	da801317 	ldw	r10,76(sp)
 8002f34:	dac01417 	ldw	r11,80(sp)
 8002f38:	db001517 	ldw	r12,84(sp)
 8002f3c:	db401617 	ldw	r13,88(sp)
 8002f40:	3440612e 	bgeu	r6,r17,80030c8 <__muldf3+0x318>
 8002f44:	0009883a 	mov	r4,zero
 8002f48:	5105883a 	add	r2,r10,r4
 8002f4c:	128d803a 	cmpltu	r6,r2,r10
 8002f50:	5d07883a 	add	r3,r11,r20
 8002f54:	30cd883a 	add	r6,r6,r3
 8002f58:	0021883a 	mov	r16,zero
 8002f5c:	04400044 	movi	r17,1
 8002f60:	1025883a 	mov	r18,r2
 8002f64:	3027883a 	mov	r19,r6
 8002f68:	32c06236 	bltu	r6,r11,80030f4 <__muldf3+0x344>
 8002f6c:	59807a26 	beq	r11,r6,8003158 <__muldf3+0x3a8>
 8002f70:	680b883a 	mov	r5,r13
 8002f74:	b80f883a 	mov	r7,r23
 8002f78:	6009883a 	mov	r4,r12
 8002f7c:	b00d883a 	mov	r6,r22
 8002f80:	80039640 	call	8003964 <__muldi3>
 8002f84:	1009883a 	mov	r4,r2
 8002f88:	000f883a 	mov	r7,zero
 8002f8c:	1545883a 	add	r2,r2,r21
 8002f90:	1111803a 	cmpltu	r8,r2,r4
 8002f94:	19c7883a 	add	r3,r3,r7
 8002f98:	40c7883a 	add	r3,r8,r3
 8002f9c:	88cb883a 	add	r5,r17,r3
 8002fa0:	d8c00617 	ldw	r3,24(sp)
 8002fa4:	8089883a 	add	r4,r16,r2
 8002fa8:	d8800b17 	ldw	r2,44(sp)
 8002fac:	18c00104 	addi	r3,r3,4
 8002fb0:	240d803a 	cmpltu	r6,r4,r16
 8002fb4:	10c7883a 	add	r3,r2,r3
 8002fb8:	2013883a 	mov	r9,r4
 8002fbc:	d8800a17 	ldw	r2,40(sp)
 8002fc0:	d9000517 	ldw	r4,20(sp)
 8002fc4:	314d883a 	add	r6,r6,r5
 8002fc8:	3015883a 	mov	r10,r6
 8002fcc:	2088c03a 	cmpne	r4,r4,r2
 8002fd0:	00880034 	movhi	r2,8192
 8002fd4:	10bfffc4 	addi	r2,r2,-1
 8002fd8:	d9000f15 	stw	r4,60(sp)
 8002fdc:	d8c01015 	stw	r3,64(sp)
 8002fe0:	1180162e 	bgeu	r2,r6,800303c <__muldf3+0x28c>
 8002fe4:	1811883a 	mov	r8,r3
 8002fe8:	101f883a 	mov	r15,r2
 8002fec:	980497fa 	slli	r2,r19,31
 8002ff0:	9016d07a 	srli	r11,r18,1
 8002ff4:	500697fa 	slli	r3,r10,31
 8002ff8:	480cd07a 	srli	r6,r9,1
 8002ffc:	500ed07a 	srli	r7,r10,1
 8003000:	12d6b03a 	or	r11,r2,r11
 8003004:	00800044 	movi	r2,1
 8003008:	198cb03a 	or	r6,r3,r6
 800300c:	4888703a 	and	r4,r9,r2
 8003010:	9818d07a 	srli	r12,r19,1
 8003014:	001b883a 	mov	r13,zero
 8003018:	03a00034 	movhi	r14,32768
 800301c:	3013883a 	mov	r9,r6
 8003020:	3815883a 	mov	r10,r7
 8003024:	4091883a 	add	r8,r8,r2
 8003028:	20000226 	beq	r4,zero,8003034 <__muldf3+0x284>
 800302c:	5b64b03a 	or	r18,r11,r13
 8003030:	63a6b03a 	or	r19,r12,r14
 8003034:	7abfed36 	bltu	r15,r10,8002fec <__muldf3+0x23c>
 8003038:	da001015 	stw	r8,64(sp)
 800303c:	00840034 	movhi	r2,4096
 8003040:	10bfffc4 	addi	r2,r2,-1
 8003044:	12801436 	bltu	r2,r10,8003098 <__muldf3+0x2e8>
 8003048:	da001017 	ldw	r8,64(sp)
 800304c:	101f883a 	mov	r15,r2
 8003050:	4a45883a 	add	r2,r9,r9
 8003054:	124d803a 	cmpltu	r6,r2,r9
 8003058:	5287883a 	add	r3,r10,r10
 800305c:	9497883a 	add	r11,r18,r18
 8003060:	5c8f803a 	cmpltu	r7,r11,r18
 8003064:	9cd9883a 	add	r12,r19,r19
 8003068:	01000044 	movi	r4,1
 800306c:	30cd883a 	add	r6,r6,r3
 8003070:	3b0f883a 	add	r7,r7,r12
 8003074:	423fffc4 	addi	r8,r8,-1
 8003078:	1013883a 	mov	r9,r2
 800307c:	3015883a 	mov	r10,r6
 8003080:	111ab03a 	or	r13,r2,r4
 8003084:	98003016 	blt	r19,zero,8003148 <__muldf3+0x398>
 8003088:	5825883a 	mov	r18,r11
 800308c:	3827883a 	mov	r19,r7
 8003090:	7abfef2e 	bgeu	r15,r10,8003050 <__muldf3+0x2a0>
 8003094:	da001015 	stw	r8,64(sp)
 8003098:	00803fc4 	movi	r2,255
 800309c:	488e703a 	and	r7,r9,r2
 80030a0:	00802004 	movi	r2,128
 80030a4:	0007883a 	mov	r3,zero
 80030a8:	0011883a 	mov	r8,zero
 80030ac:	38801826 	beq	r7,r2,8003110 <__muldf3+0x360>
 80030b0:	008000c4 	movi	r2,3
 80030b4:	d9000e04 	addi	r4,sp,56
 80030b8:	da801215 	stw	r10,72(sp)
 80030bc:	d8800e15 	stw	r2,56(sp)
 80030c0:	da401115 	stw	r9,68(sp)
 80030c4:	003f6a06 	br	8002e70 <__muldf3+0xc0>
 80030c8:	89802126 	beq	r17,r6,8003150 <__muldf3+0x3a0>
 80030cc:	0009883a 	mov	r4,zero
 80030d0:	5105883a 	add	r2,r10,r4
 80030d4:	128d803a 	cmpltu	r6,r2,r10
 80030d8:	5d07883a 	add	r3,r11,r20
 80030dc:	30cd883a 	add	r6,r6,r3
 80030e0:	0021883a 	mov	r16,zero
 80030e4:	0023883a 	mov	r17,zero
 80030e8:	1025883a 	mov	r18,r2
 80030ec:	3027883a 	mov	r19,r6
 80030f0:	32ff9e2e 	bgeu	r6,r11,8002f6c <__muldf3+0x1bc>
 80030f4:	00800044 	movi	r2,1
 80030f8:	8089883a 	add	r4,r16,r2
 80030fc:	240d803a 	cmpltu	r6,r4,r16
 8003100:	344d883a 	add	r6,r6,r17
 8003104:	2021883a 	mov	r16,r4
 8003108:	3023883a 	mov	r17,r6
 800310c:	003f9806 	br	8002f70 <__muldf3+0x1c0>
 8003110:	403fe71e 	bne	r8,zero,80030b0 <__muldf3+0x300>
 8003114:	01004004 	movi	r4,256
 8003118:	4904703a 	and	r2,r9,r4
 800311c:	10c4b03a 	or	r2,r2,r3
 8003120:	103fe31e 	bne	r2,zero,80030b0 <__muldf3+0x300>
 8003124:	94c4b03a 	or	r2,r18,r19
 8003128:	103fe126 	beq	r2,zero,80030b0 <__muldf3+0x300>
 800312c:	49c5883a 	add	r2,r9,r7
 8003130:	1251803a 	cmpltu	r8,r2,r9
 8003134:	4291883a 	add	r8,r8,r10
 8003138:	013fc004 	movi	r4,-256
 800313c:	1112703a 	and	r9,r2,r4
 8003140:	4015883a 	mov	r10,r8
 8003144:	003fda06 	br	80030b0 <__muldf3+0x300>
 8003148:	6813883a 	mov	r9,r13
 800314c:	003fce06 	br	8003088 <__muldf3+0x2d8>
 8003150:	143f7c36 	bltu	r2,r16,8002f44 <__muldf3+0x194>
 8003154:	003fdd06 	br	80030cc <__muldf3+0x31c>
 8003158:	12bf852e 	bgeu	r2,r10,8002f70 <__muldf3+0x1c0>
 800315c:	003fe506 	br	80030f4 <__muldf3+0x344>
 8003160:	00800084 	movi	r2,2
 8003164:	20bf351e 	bne	r4,r2,8002e3c <__muldf3+0x8c>
 8003168:	01020034 	movhi	r4,2048
 800316c:	211f5c04 	addi	r4,r4,32112
 8003170:	003f3f06 	br	8002e70 <__muldf3+0xc0>

08003174 <__divdf3>:
 8003174:	deffed04 	addi	sp,sp,-76
 8003178:	dcc01115 	stw	r19,68(sp)
 800317c:	dcc00404 	addi	r19,sp,16
 8003180:	2011883a 	mov	r8,r4
 8003184:	2813883a 	mov	r9,r5
 8003188:	dc000e15 	stw	r16,56(sp)
 800318c:	d809883a 	mov	r4,sp
 8003190:	980b883a 	mov	r5,r19
 8003194:	dc000904 	addi	r16,sp,36
 8003198:	dfc01215 	stw	ra,72(sp)
 800319c:	da400115 	stw	r9,4(sp)
 80031a0:	d9c00315 	stw	r7,12(sp)
 80031a4:	da000015 	stw	r8,0(sp)
 80031a8:	d9800215 	stw	r6,8(sp)
 80031ac:	dc801015 	stw	r18,64(sp)
 80031b0:	dc400f15 	stw	r17,60(sp)
 80031b4:	800408c0 	call	800408c <__unpack_d>
 80031b8:	d9000204 	addi	r4,sp,8
 80031bc:	800b883a 	mov	r5,r16
 80031c0:	800408c0 	call	800408c <__unpack_d>
 80031c4:	d9000417 	ldw	r4,16(sp)
 80031c8:	00800044 	movi	r2,1
 80031cc:	11000b2e 	bgeu	r2,r4,80031fc <__divdf3+0x88>
 80031d0:	d9400917 	ldw	r5,36(sp)
 80031d4:	1140762e 	bgeu	r2,r5,80033b0 <__divdf3+0x23c>
 80031d8:	d8800517 	ldw	r2,20(sp)
 80031dc:	d8c00a17 	ldw	r3,40(sp)
 80031e0:	01800104 	movi	r6,4
 80031e4:	10c4f03a 	xor	r2,r2,r3
 80031e8:	d8800515 	stw	r2,20(sp)
 80031ec:	21800226 	beq	r4,r6,80031f8 <__divdf3+0x84>
 80031f0:	00800084 	movi	r2,2
 80031f4:	2080141e 	bne	r4,r2,8003248 <__divdf3+0xd4>
 80031f8:	29000926 	beq	r5,r4,8003220 <__divdf3+0xac>
 80031fc:	9809883a 	mov	r4,r19
 8003200:	8003d780 	call	8003d78 <__pack_d>
 8003204:	dfc01217 	ldw	ra,72(sp)
 8003208:	dcc01117 	ldw	r19,68(sp)
 800320c:	dc801017 	ldw	r18,64(sp)
 8003210:	dc400f17 	ldw	r17,60(sp)
 8003214:	dc000e17 	ldw	r16,56(sp)
 8003218:	dec01304 	addi	sp,sp,76
 800321c:	f800283a 	ret
 8003220:	01020034 	movhi	r4,2048
 8003224:	211f5c04 	addi	r4,r4,32112
 8003228:	8003d780 	call	8003d78 <__pack_d>
 800322c:	dfc01217 	ldw	ra,72(sp)
 8003230:	dcc01117 	ldw	r19,68(sp)
 8003234:	dc801017 	ldw	r18,64(sp)
 8003238:	dc400f17 	ldw	r17,60(sp)
 800323c:	dc000e17 	ldw	r16,56(sp)
 8003240:	dec01304 	addi	sp,sp,76
 8003244:	f800283a 	ret
 8003248:	29805b26 	beq	r5,r6,80033b8 <__divdf3+0x244>
 800324c:	28802d26 	beq	r5,r2,8003304 <__divdf3+0x190>
 8003250:	d8c00617 	ldw	r3,24(sp)
 8003254:	d8800b17 	ldw	r2,44(sp)
 8003258:	d9c00817 	ldw	r7,32(sp)
 800325c:	dc400d17 	ldw	r17,52(sp)
 8003260:	188bc83a 	sub	r5,r3,r2
 8003264:	d9800717 	ldw	r6,28(sp)
 8003268:	dc000c17 	ldw	r16,48(sp)
 800326c:	d9400615 	stw	r5,24(sp)
 8003270:	3c403836 	bltu	r7,r17,8003354 <__divdf3+0x1e0>
 8003274:	89c03626 	beq	r17,r7,8003350 <__divdf3+0x1dc>
 8003278:	0015883a 	mov	r10,zero
 800327c:	001d883a 	mov	r14,zero
 8003280:	02c40034 	movhi	r11,4096
 8003284:	001f883a 	mov	r15,zero
 8003288:	003f883a 	mov	ra,zero
 800328c:	04800f44 	movi	r18,61
 8003290:	00000f06 	br	80032d0 <__divdf3+0x15c>
 8003294:	601d883a 	mov	r14,r12
 8003298:	681f883a 	mov	r15,r13
 800329c:	400d883a 	mov	r6,r8
 80032a0:	100f883a 	mov	r7,r2
 80032a4:	3191883a 	add	r8,r6,r6
 80032a8:	5808d07a 	srli	r4,r11,1
 80032ac:	4185803a 	cmpltu	r2,r8,r6
 80032b0:	39d3883a 	add	r9,r7,r7
 80032b4:	28c6b03a 	or	r3,r5,r3
 80032b8:	1245883a 	add	r2,r2,r9
 80032bc:	1815883a 	mov	r10,r3
 80032c0:	2017883a 	mov	r11,r4
 80032c4:	400d883a 	mov	r6,r8
 80032c8:	100f883a 	mov	r7,r2
 80032cc:	fc801726 	beq	ra,r18,800332c <__divdf3+0x1b8>
 80032d0:	580a97fa 	slli	r5,r11,31
 80032d4:	5006d07a 	srli	r3,r10,1
 80032d8:	ffc00044 	addi	ra,ra,1
 80032dc:	3c7ff136 	bltu	r7,r17,80032a4 <__divdf3+0x130>
 80032e0:	3411c83a 	sub	r8,r6,r16
 80032e4:	3205803a 	cmpltu	r2,r6,r8
 80032e8:	3c53c83a 	sub	r9,r7,r17
 80032ec:	7298b03a 	or	r12,r14,r10
 80032f0:	7adab03a 	or	r13,r15,r11
 80032f4:	4885c83a 	sub	r2,r9,r2
 80032f8:	89ffe61e 	bne	r17,r7,8003294 <__divdf3+0x120>
 80032fc:	343fe936 	bltu	r6,r16,80032a4 <__divdf3+0x130>
 8003300:	003fe406 	br	8003294 <__divdf3+0x120>
 8003304:	9809883a 	mov	r4,r19
 8003308:	d9800415 	stw	r6,16(sp)
 800330c:	8003d780 	call	8003d78 <__pack_d>
 8003310:	dfc01217 	ldw	ra,72(sp)
 8003314:	dcc01117 	ldw	r19,68(sp)
 8003318:	dc801017 	ldw	r18,64(sp)
 800331c:	dc400f17 	ldw	r17,60(sp)
 8003320:	dc000e17 	ldw	r16,56(sp)
 8003324:	dec01304 	addi	sp,sp,76
 8003328:	f800283a 	ret
 800332c:	00803fc4 	movi	r2,255
 8003330:	7090703a 	and	r8,r14,r2
 8003334:	00802004 	movi	r2,128
 8003338:	0007883a 	mov	r3,zero
 800333c:	0013883a 	mov	r9,zero
 8003340:	40800d26 	beq	r8,r2,8003378 <__divdf3+0x204>
 8003344:	dbc00815 	stw	r15,32(sp)
 8003348:	db800715 	stw	r14,28(sp)
 800334c:	003fab06 	br	80031fc <__divdf3+0x88>
 8003350:	343fc92e 	bgeu	r6,r16,8003278 <__divdf3+0x104>
 8003354:	3185883a 	add	r2,r6,r6
 8003358:	1189803a 	cmpltu	r4,r2,r6
 800335c:	39c7883a 	add	r3,r7,r7
 8003360:	20c9883a 	add	r4,r4,r3
 8003364:	297fffc4 	addi	r5,r5,-1
 8003368:	100d883a 	mov	r6,r2
 800336c:	200f883a 	mov	r7,r4
 8003370:	d9400615 	stw	r5,24(sp)
 8003374:	003fc006 	br	8003278 <__divdf3+0x104>
 8003378:	483ff21e 	bne	r9,zero,8003344 <__divdf3+0x1d0>
 800337c:	01004004 	movi	r4,256
 8003380:	7104703a 	and	r2,r14,r4
 8003384:	10c4b03a 	or	r2,r2,r3
 8003388:	103fee1e 	bne	r2,zero,8003344 <__divdf3+0x1d0>
 800338c:	31c4b03a 	or	r2,r6,r7
 8003390:	103fec26 	beq	r2,zero,8003344 <__divdf3+0x1d0>
 8003394:	7205883a 	add	r2,r14,r8
 8003398:	1391803a 	cmpltu	r8,r2,r14
 800339c:	43d1883a 	add	r8,r8,r15
 80033a0:	013fc004 	movi	r4,-256
 80033a4:	111c703a 	and	r14,r2,r4
 80033a8:	401f883a 	mov	r15,r8
 80033ac:	003fe506 	br	8003344 <__divdf3+0x1d0>
 80033b0:	8009883a 	mov	r4,r16
 80033b4:	003f9206 	br	8003200 <__divdf3+0x8c>
 80033b8:	9809883a 	mov	r4,r19
 80033bc:	d8000715 	stw	zero,28(sp)
 80033c0:	d8000815 	stw	zero,32(sp)
 80033c4:	d8000615 	stw	zero,24(sp)
 80033c8:	003f8d06 	br	8003200 <__divdf3+0x8c>

080033cc <__eqdf2>:
 80033cc:	deffef04 	addi	sp,sp,-68
 80033d0:	dc400f15 	stw	r17,60(sp)
 80033d4:	dc400404 	addi	r17,sp,16
 80033d8:	2005883a 	mov	r2,r4
 80033dc:	2807883a 	mov	r3,r5
 80033e0:	dc000e15 	stw	r16,56(sp)
 80033e4:	d809883a 	mov	r4,sp
 80033e8:	880b883a 	mov	r5,r17
 80033ec:	dc000904 	addi	r16,sp,36
 80033f0:	d8c00115 	stw	r3,4(sp)
 80033f4:	d8800015 	stw	r2,0(sp)
 80033f8:	d9800215 	stw	r6,8(sp)
 80033fc:	dfc01015 	stw	ra,64(sp)
 8003400:	d9c00315 	stw	r7,12(sp)
 8003404:	800408c0 	call	800408c <__unpack_d>
 8003408:	d9000204 	addi	r4,sp,8
 800340c:	800b883a 	mov	r5,r16
 8003410:	800408c0 	call	800408c <__unpack_d>
 8003414:	d8800417 	ldw	r2,16(sp)
 8003418:	00c00044 	movi	r3,1
 800341c:	180d883a 	mov	r6,r3
 8003420:	1880062e 	bgeu	r3,r2,800343c <__eqdf2+0x70>
 8003424:	d8800917 	ldw	r2,36(sp)
 8003428:	8809883a 	mov	r4,r17
 800342c:	800b883a 	mov	r5,r16
 8003430:	1880022e 	bgeu	r3,r2,800343c <__eqdf2+0x70>
 8003434:	80041c40 	call	80041c4 <__fpcmp_parts_d>
 8003438:	100d883a 	mov	r6,r2
 800343c:	3005883a 	mov	r2,r6
 8003440:	dfc01017 	ldw	ra,64(sp)
 8003444:	dc400f17 	ldw	r17,60(sp)
 8003448:	dc000e17 	ldw	r16,56(sp)
 800344c:	dec01104 	addi	sp,sp,68
 8003450:	f800283a 	ret

08003454 <__nedf2>:
 8003454:	deffef04 	addi	sp,sp,-68
 8003458:	dc400f15 	stw	r17,60(sp)
 800345c:	dc400404 	addi	r17,sp,16
 8003460:	2005883a 	mov	r2,r4
 8003464:	2807883a 	mov	r3,r5
 8003468:	dc000e15 	stw	r16,56(sp)
 800346c:	d809883a 	mov	r4,sp
 8003470:	880b883a 	mov	r5,r17
 8003474:	dc000904 	addi	r16,sp,36
 8003478:	d8c00115 	stw	r3,4(sp)
 800347c:	d8800015 	stw	r2,0(sp)
 8003480:	d9800215 	stw	r6,8(sp)
 8003484:	dfc01015 	stw	ra,64(sp)
 8003488:	d9c00315 	stw	r7,12(sp)
 800348c:	800408c0 	call	800408c <__unpack_d>
 8003490:	d9000204 	addi	r4,sp,8
 8003494:	800b883a 	mov	r5,r16
 8003498:	800408c0 	call	800408c <__unpack_d>
 800349c:	d8800417 	ldw	r2,16(sp)
 80034a0:	00c00044 	movi	r3,1
 80034a4:	180d883a 	mov	r6,r3
 80034a8:	1880062e 	bgeu	r3,r2,80034c4 <__nedf2+0x70>
 80034ac:	d8800917 	ldw	r2,36(sp)
 80034b0:	8809883a 	mov	r4,r17
 80034b4:	800b883a 	mov	r5,r16
 80034b8:	1880022e 	bgeu	r3,r2,80034c4 <__nedf2+0x70>
 80034bc:	80041c40 	call	80041c4 <__fpcmp_parts_d>
 80034c0:	100d883a 	mov	r6,r2
 80034c4:	3005883a 	mov	r2,r6
 80034c8:	dfc01017 	ldw	ra,64(sp)
 80034cc:	dc400f17 	ldw	r17,60(sp)
 80034d0:	dc000e17 	ldw	r16,56(sp)
 80034d4:	dec01104 	addi	sp,sp,68
 80034d8:	f800283a 	ret

080034dc <__gtdf2>:
 80034dc:	deffef04 	addi	sp,sp,-68
 80034e0:	dc400f15 	stw	r17,60(sp)
 80034e4:	dc400404 	addi	r17,sp,16
 80034e8:	2005883a 	mov	r2,r4
 80034ec:	2807883a 	mov	r3,r5
 80034f0:	dc000e15 	stw	r16,56(sp)
 80034f4:	d809883a 	mov	r4,sp
 80034f8:	880b883a 	mov	r5,r17
 80034fc:	dc000904 	addi	r16,sp,36
 8003500:	d8c00115 	stw	r3,4(sp)
 8003504:	d8800015 	stw	r2,0(sp)
 8003508:	d9800215 	stw	r6,8(sp)
 800350c:	dfc01015 	stw	ra,64(sp)
 8003510:	d9c00315 	stw	r7,12(sp)
 8003514:	800408c0 	call	800408c <__unpack_d>
 8003518:	d9000204 	addi	r4,sp,8
 800351c:	800b883a 	mov	r5,r16
 8003520:	800408c0 	call	800408c <__unpack_d>
 8003524:	d8800417 	ldw	r2,16(sp)
 8003528:	00c00044 	movi	r3,1
 800352c:	01bfffc4 	movi	r6,-1
 8003530:	1880062e 	bgeu	r3,r2,800354c <__gtdf2+0x70>
 8003534:	d8800917 	ldw	r2,36(sp)
 8003538:	8809883a 	mov	r4,r17
 800353c:	800b883a 	mov	r5,r16
 8003540:	1880022e 	bgeu	r3,r2,800354c <__gtdf2+0x70>
 8003544:	80041c40 	call	80041c4 <__fpcmp_parts_d>
 8003548:	100d883a 	mov	r6,r2
 800354c:	3005883a 	mov	r2,r6
 8003550:	dfc01017 	ldw	ra,64(sp)
 8003554:	dc400f17 	ldw	r17,60(sp)
 8003558:	dc000e17 	ldw	r16,56(sp)
 800355c:	dec01104 	addi	sp,sp,68
 8003560:	f800283a 	ret

08003564 <__ltdf2>:
 8003564:	deffef04 	addi	sp,sp,-68
 8003568:	dc400f15 	stw	r17,60(sp)
 800356c:	dc400404 	addi	r17,sp,16
 8003570:	2005883a 	mov	r2,r4
 8003574:	2807883a 	mov	r3,r5
 8003578:	dc000e15 	stw	r16,56(sp)
 800357c:	d809883a 	mov	r4,sp
 8003580:	880b883a 	mov	r5,r17
 8003584:	dc000904 	addi	r16,sp,36
 8003588:	d8c00115 	stw	r3,4(sp)
 800358c:	d8800015 	stw	r2,0(sp)
 8003590:	d9800215 	stw	r6,8(sp)
 8003594:	dfc01015 	stw	ra,64(sp)
 8003598:	d9c00315 	stw	r7,12(sp)
 800359c:	800408c0 	call	800408c <__unpack_d>
 80035a0:	d9000204 	addi	r4,sp,8
 80035a4:	800b883a 	mov	r5,r16
 80035a8:	800408c0 	call	800408c <__unpack_d>
 80035ac:	d8800417 	ldw	r2,16(sp)
 80035b0:	00c00044 	movi	r3,1
 80035b4:	180d883a 	mov	r6,r3
 80035b8:	1880062e 	bgeu	r3,r2,80035d4 <__ltdf2+0x70>
 80035bc:	d8800917 	ldw	r2,36(sp)
 80035c0:	8809883a 	mov	r4,r17
 80035c4:	800b883a 	mov	r5,r16
 80035c8:	1880022e 	bgeu	r3,r2,80035d4 <__ltdf2+0x70>
 80035cc:	80041c40 	call	80041c4 <__fpcmp_parts_d>
 80035d0:	100d883a 	mov	r6,r2
 80035d4:	3005883a 	mov	r2,r6
 80035d8:	dfc01017 	ldw	ra,64(sp)
 80035dc:	dc400f17 	ldw	r17,60(sp)
 80035e0:	dc000e17 	ldw	r16,56(sp)
 80035e4:	dec01104 	addi	sp,sp,68
 80035e8:	f800283a 	ret

080035ec <__ledf2>:
 80035ec:	deffef04 	addi	sp,sp,-68
 80035f0:	dc400f15 	stw	r17,60(sp)
 80035f4:	dc400404 	addi	r17,sp,16
 80035f8:	2005883a 	mov	r2,r4
 80035fc:	2807883a 	mov	r3,r5
 8003600:	dc000e15 	stw	r16,56(sp)
 8003604:	d809883a 	mov	r4,sp
 8003608:	880b883a 	mov	r5,r17
 800360c:	dc000904 	addi	r16,sp,36
 8003610:	d8c00115 	stw	r3,4(sp)
 8003614:	d8800015 	stw	r2,0(sp)
 8003618:	d9800215 	stw	r6,8(sp)
 800361c:	dfc01015 	stw	ra,64(sp)
 8003620:	d9c00315 	stw	r7,12(sp)
 8003624:	800408c0 	call	800408c <__unpack_d>
 8003628:	d9000204 	addi	r4,sp,8
 800362c:	800b883a 	mov	r5,r16
 8003630:	800408c0 	call	800408c <__unpack_d>
 8003634:	d8800417 	ldw	r2,16(sp)
 8003638:	00c00044 	movi	r3,1
 800363c:	180d883a 	mov	r6,r3
 8003640:	1880062e 	bgeu	r3,r2,800365c <__ledf2+0x70>
 8003644:	d8800917 	ldw	r2,36(sp)
 8003648:	8809883a 	mov	r4,r17
 800364c:	800b883a 	mov	r5,r16
 8003650:	1880022e 	bgeu	r3,r2,800365c <__ledf2+0x70>
 8003654:	80041c40 	call	80041c4 <__fpcmp_parts_d>
 8003658:	100d883a 	mov	r6,r2
 800365c:	3005883a 	mov	r2,r6
 8003660:	dfc01017 	ldw	ra,64(sp)
 8003664:	dc400f17 	ldw	r17,60(sp)
 8003668:	dc000e17 	ldw	r16,56(sp)
 800366c:	dec01104 	addi	sp,sp,68
 8003670:	f800283a 	ret

08003674 <__floatsidf>:
 8003674:	2006d7fa 	srli	r3,r4,31
 8003678:	defff604 	addi	sp,sp,-40
 800367c:	008000c4 	movi	r2,3
 8003680:	dfc00915 	stw	ra,36(sp)
 8003684:	dcc00815 	stw	r19,32(sp)
 8003688:	dc800715 	stw	r18,28(sp)
 800368c:	dc400615 	stw	r17,24(sp)
 8003690:	dc000515 	stw	r16,20(sp)
 8003694:	d8800015 	stw	r2,0(sp)
 8003698:	d8c00115 	stw	r3,4(sp)
 800369c:	20000f1e 	bne	r4,zero,80036dc <__floatsidf+0x68>
 80036a0:	00800084 	movi	r2,2
 80036a4:	d8800015 	stw	r2,0(sp)
 80036a8:	d809883a 	mov	r4,sp
 80036ac:	8003d780 	call	8003d78 <__pack_d>
 80036b0:	1009883a 	mov	r4,r2
 80036b4:	180b883a 	mov	r5,r3
 80036b8:	2005883a 	mov	r2,r4
 80036bc:	2807883a 	mov	r3,r5
 80036c0:	dfc00917 	ldw	ra,36(sp)
 80036c4:	dcc00817 	ldw	r19,32(sp)
 80036c8:	dc800717 	ldw	r18,28(sp)
 80036cc:	dc400617 	ldw	r17,24(sp)
 80036d0:	dc000517 	ldw	r16,20(sp)
 80036d4:	dec00a04 	addi	sp,sp,40
 80036d8:	f800283a 	ret
 80036dc:	00800f04 	movi	r2,60
 80036e0:	1807003a 	cmpeq	r3,r3,zero
 80036e4:	d8800215 	stw	r2,8(sp)
 80036e8:	18001126 	beq	r3,zero,8003730 <__floatsidf+0xbc>
 80036ec:	0027883a 	mov	r19,zero
 80036f0:	2025883a 	mov	r18,r4
 80036f4:	d9000315 	stw	r4,12(sp)
 80036f8:	dcc00415 	stw	r19,16(sp)
 80036fc:	80039fc0 	call	80039fc <__clzsi2>
 8003700:	11000744 	addi	r4,r2,29
 8003704:	013fe80e 	bge	zero,r4,80036a8 <__floatsidf+0x34>
 8003708:	10bfff44 	addi	r2,r2,-3
 800370c:	10000c16 	blt	r2,zero,8003740 <__floatsidf+0xcc>
 8003710:	90a2983a 	sll	r17,r18,r2
 8003714:	0021883a 	mov	r16,zero
 8003718:	d8800217 	ldw	r2,8(sp)
 800371c:	dc400415 	stw	r17,16(sp)
 8003720:	dc000315 	stw	r16,12(sp)
 8003724:	1105c83a 	sub	r2,r2,r4
 8003728:	d8800215 	stw	r2,8(sp)
 800372c:	003fde06 	br	80036a8 <__floatsidf+0x34>
 8003730:	00a00034 	movhi	r2,32768
 8003734:	20800a26 	beq	r4,r2,8003760 <__floatsidf+0xec>
 8003738:	0109c83a 	sub	r4,zero,r4
 800373c:	003feb06 	br	80036ec <__floatsidf+0x78>
 8003740:	9006d07a 	srli	r3,r18,1
 8003744:	008007c4 	movi	r2,31
 8003748:	1105c83a 	sub	r2,r2,r4
 800374c:	1886d83a 	srl	r3,r3,r2
 8003750:	9922983a 	sll	r17,r19,r4
 8003754:	9120983a 	sll	r16,r18,r4
 8003758:	1c62b03a 	or	r17,r3,r17
 800375c:	003fee06 	br	8003718 <__floatsidf+0xa4>
 8003760:	0009883a 	mov	r4,zero
 8003764:	01707834 	movhi	r5,49632
 8003768:	003fd306 	br	80036b8 <__floatsidf+0x44>

0800376c <__make_dp>:
 800376c:	defff904 	addi	sp,sp,-28
 8003770:	d8c00717 	ldw	r3,28(sp)
 8003774:	d9000015 	stw	r4,0(sp)
 8003778:	d809883a 	mov	r4,sp
 800377c:	dfc00515 	stw	ra,20(sp)
 8003780:	d9c00615 	stw	r7,24(sp)
 8003784:	d9400115 	stw	r5,4(sp)
 8003788:	d9800215 	stw	r6,8(sp)
 800378c:	d8c00415 	stw	r3,16(sp)
 8003790:	d9c00315 	stw	r7,12(sp)
 8003794:	8003d780 	call	8003d78 <__pack_d>
 8003798:	dfc00517 	ldw	ra,20(sp)
 800379c:	dec00704 	addi	sp,sp,28
 80037a0:	f800283a 	ret

080037a4 <__truncdfsf2>:
 80037a4:	defff804 	addi	sp,sp,-32
 80037a8:	2005883a 	mov	r2,r4
 80037ac:	2807883a 	mov	r3,r5
 80037b0:	d809883a 	mov	r4,sp
 80037b4:	d9400204 	addi	r5,sp,8
 80037b8:	d8c00115 	stw	r3,4(sp)
 80037bc:	d8800015 	stw	r2,0(sp)
 80037c0:	dfc00715 	stw	ra,28(sp)
 80037c4:	800408c0 	call	800408c <__unpack_d>
 80037c8:	d9c00517 	ldw	r7,20(sp)
 80037cc:	da000617 	ldw	r8,24(sp)
 80037d0:	02d00034 	movhi	r11,16384
 80037d4:	5affffc4 	addi	r11,r11,-1
 80037d8:	3812d7ba 	srli	r9,r7,30
 80037dc:	401a90ba 	slli	r13,r8,2
 80037e0:	3ac4703a 	and	r2,r7,r11
 80037e4:	0007883a 	mov	r3,zero
 80037e8:	6a52b03a 	or	r9,r13,r9
 80037ec:	10c4b03a 	or	r2,r2,r3
 80037f0:	d9000217 	ldw	r4,8(sp)
 80037f4:	d9400317 	ldw	r5,12(sp)
 80037f8:	d9800417 	ldw	r6,16(sp)
 80037fc:	480f883a 	mov	r7,r9
 8003800:	10000126 	beq	r2,zero,8003808 <__truncdfsf2+0x64>
 8003804:	49c00054 	ori	r7,r9,1
 8003808:	8003d4c0 	call	8003d4c <__make_fp>
 800380c:	dfc00717 	ldw	ra,28(sp)
 8003810:	dec00804 	addi	sp,sp,32
 8003814:	f800283a 	ret

08003818 <udivmodsi4>:
 8003818:	29001b2e 	bgeu	r5,r4,8003888 <udivmodsi4+0x70>
 800381c:	28001a16 	blt	r5,zero,8003888 <udivmodsi4+0x70>
 8003820:	00800044 	movi	r2,1
 8003824:	0007883a 	mov	r3,zero
 8003828:	01c007c4 	movi	r7,31
 800382c:	00000306 	br	800383c <udivmodsi4+0x24>
 8003830:	19c01326 	beq	r3,r7,8003880 <udivmodsi4+0x68>
 8003834:	18c00044 	addi	r3,r3,1
 8003838:	28000416 	blt	r5,zero,800384c <udivmodsi4+0x34>
 800383c:	294b883a 	add	r5,r5,r5
 8003840:	1085883a 	add	r2,r2,r2
 8003844:	293ffa36 	bltu	r5,r4,8003830 <udivmodsi4+0x18>
 8003848:	10000d26 	beq	r2,zero,8003880 <udivmodsi4+0x68>
 800384c:	0007883a 	mov	r3,zero
 8003850:	21400236 	bltu	r4,r5,800385c <udivmodsi4+0x44>
 8003854:	2149c83a 	sub	r4,r4,r5
 8003858:	1886b03a 	or	r3,r3,r2
 800385c:	1004d07a 	srli	r2,r2,1
 8003860:	280ad07a 	srli	r5,r5,1
 8003864:	103ffa1e 	bne	r2,zero,8003850 <udivmodsi4+0x38>
 8003868:	30000226 	beq	r6,zero,8003874 <udivmodsi4+0x5c>
 800386c:	2005883a 	mov	r2,r4
 8003870:	f800283a 	ret
 8003874:	1809883a 	mov	r4,r3
 8003878:	2005883a 	mov	r2,r4
 800387c:	f800283a 	ret
 8003880:	0007883a 	mov	r3,zero
 8003884:	003ff806 	br	8003868 <udivmodsi4+0x50>
 8003888:	00800044 	movi	r2,1
 800388c:	0007883a 	mov	r3,zero
 8003890:	003fef06 	br	8003850 <udivmodsi4+0x38>

08003894 <__divsi3>:
 8003894:	defffe04 	addi	sp,sp,-8
 8003898:	dc000015 	stw	r16,0(sp)
 800389c:	dfc00115 	stw	ra,4(sp)
 80038a0:	0021883a 	mov	r16,zero
 80038a4:	20000c16 	blt	r4,zero,80038d8 <__divsi3+0x44>
 80038a8:	000d883a 	mov	r6,zero
 80038ac:	28000e16 	blt	r5,zero,80038e8 <__divsi3+0x54>
 80038b0:	80038180 	call	8003818 <udivmodsi4>
 80038b4:	1007883a 	mov	r3,r2
 80038b8:	8005003a 	cmpeq	r2,r16,zero
 80038bc:	1000011e 	bne	r2,zero,80038c4 <__divsi3+0x30>
 80038c0:	00c7c83a 	sub	r3,zero,r3
 80038c4:	1805883a 	mov	r2,r3
 80038c8:	dfc00117 	ldw	ra,4(sp)
 80038cc:	dc000017 	ldw	r16,0(sp)
 80038d0:	dec00204 	addi	sp,sp,8
 80038d4:	f800283a 	ret
 80038d8:	0109c83a 	sub	r4,zero,r4
 80038dc:	04000044 	movi	r16,1
 80038e0:	000d883a 	mov	r6,zero
 80038e4:	283ff20e 	bge	r5,zero,80038b0 <__divsi3+0x1c>
 80038e8:	014bc83a 	sub	r5,zero,r5
 80038ec:	8021003a 	cmpeq	r16,r16,zero
 80038f0:	003fef06 	br	80038b0 <__divsi3+0x1c>

080038f4 <__modsi3>:
 80038f4:	deffff04 	addi	sp,sp,-4
 80038f8:	dfc00015 	stw	ra,0(sp)
 80038fc:	01800044 	movi	r6,1
 8003900:	2807883a 	mov	r3,r5
 8003904:	20000416 	blt	r4,zero,8003918 <__modsi3+0x24>
 8003908:	28000c16 	blt	r5,zero,800393c <__modsi3+0x48>
 800390c:	dfc00017 	ldw	ra,0(sp)
 8003910:	dec00104 	addi	sp,sp,4
 8003914:	80038181 	jmpi	8003818 <udivmodsi4>
 8003918:	0109c83a 	sub	r4,zero,r4
 800391c:	28000b16 	blt	r5,zero,800394c <__modsi3+0x58>
 8003920:	180b883a 	mov	r5,r3
 8003924:	01800044 	movi	r6,1
 8003928:	80038180 	call	8003818 <udivmodsi4>
 800392c:	0085c83a 	sub	r2,zero,r2
 8003930:	dfc00017 	ldw	ra,0(sp)
 8003934:	dec00104 	addi	sp,sp,4
 8003938:	f800283a 	ret
 800393c:	014bc83a 	sub	r5,zero,r5
 8003940:	dfc00017 	ldw	ra,0(sp)
 8003944:	dec00104 	addi	sp,sp,4
 8003948:	80038181 	jmpi	8003818 <udivmodsi4>
 800394c:	0147c83a 	sub	r3,zero,r5
 8003950:	003ff306 	br	8003920 <__modsi3+0x2c>

08003954 <__udivsi3>:
 8003954:	000d883a 	mov	r6,zero
 8003958:	80038181 	jmpi	8003818 <udivmodsi4>

0800395c <__umodsi3>:
 800395c:	01800044 	movi	r6,1
 8003960:	80038181 	jmpi	8003818 <udivmodsi4>

08003964 <__muldi3>:
 8003964:	2011883a 	mov	r8,r4
 8003968:	427fffcc 	andi	r9,r8,65535
 800396c:	4018d43a 	srli	r12,r8,16
 8003970:	32bfffcc 	andi	r10,r6,65535
 8003974:	3016d43a 	srli	r11,r6,16
 8003978:	4a85383a 	mul	r2,r9,r10
 800397c:	6295383a 	mul	r10,r12,r10
 8003980:	4ad3383a 	mul	r9,r9,r11
 8003984:	113fffcc 	andi	r4,r2,65535
 8003988:	1004d43a 	srli	r2,r2,16
 800398c:	4a93883a 	add	r9,r9,r10
 8003990:	3807883a 	mov	r3,r7
 8003994:	1245883a 	add	r2,r2,r9
 8003998:	280f883a 	mov	r7,r5
 800399c:	180b883a 	mov	r5,r3
 80039a0:	1006943a 	slli	r3,r2,16
 80039a4:	defffd04 	addi	sp,sp,-12
 80039a8:	dc800215 	stw	r18,8(sp)
 80039ac:	1907883a 	add	r3,r3,r4
 80039b0:	dc400115 	stw	r17,4(sp)
 80039b4:	dc000015 	stw	r16,0(sp)
 80039b8:	4165383a 	mul	r18,r8,r5
 80039bc:	31e3383a 	mul	r17,r6,r7
 80039c0:	1012d43a 	srli	r9,r2,16
 80039c4:	62d9383a 	mul	r12,r12,r11
 80039c8:	181f883a 	mov	r15,r3
 80039cc:	1280022e 	bgeu	r2,r10,80039d8 <__muldi3+0x74>
 80039d0:	00800074 	movhi	r2,1
 80039d4:	6099883a 	add	r12,r12,r2
 80039d8:	624d883a 	add	r6,r12,r9
 80039dc:	9187883a 	add	r3,r18,r6
 80039e0:	88c7883a 	add	r3,r17,r3
 80039e4:	7805883a 	mov	r2,r15
 80039e8:	dc800217 	ldw	r18,8(sp)
 80039ec:	dc400117 	ldw	r17,4(sp)
 80039f0:	dc000017 	ldw	r16,0(sp)
 80039f4:	dec00304 	addi	sp,sp,12
 80039f8:	f800283a 	ret

080039fc <__clzsi2>:
 80039fc:	00bfffd4 	movui	r2,65535
 8003a00:	11000e36 	bltu	r2,r4,8003a3c <__clzsi2+0x40>
 8003a04:	00803fc4 	movi	r2,255
 8003a08:	01400204 	movi	r5,8
 8003a0c:	0007883a 	mov	r3,zero
 8003a10:	11001036 	bltu	r2,r4,8003a54 <__clzsi2+0x58>
 8003a14:	000b883a 	mov	r5,zero
 8003a18:	20c6d83a 	srl	r3,r4,r3
 8003a1c:	00820034 	movhi	r2,2048
 8003a20:	109f6104 	addi	r2,r2,32132
 8003a24:	1887883a 	add	r3,r3,r2
 8003a28:	18800003 	ldbu	r2,0(r3)
 8003a2c:	00c00804 	movi	r3,32
 8003a30:	2885883a 	add	r2,r5,r2
 8003a34:	1885c83a 	sub	r2,r3,r2
 8003a38:	f800283a 	ret
 8003a3c:	01400404 	movi	r5,16
 8003a40:	00804034 	movhi	r2,256
 8003a44:	10bfffc4 	addi	r2,r2,-1
 8003a48:	2807883a 	mov	r3,r5
 8003a4c:	113ff22e 	bgeu	r2,r4,8003a18 <__clzsi2+0x1c>
 8003a50:	01400604 	movi	r5,24
 8003a54:	2807883a 	mov	r3,r5
 8003a58:	20c6d83a 	srl	r3,r4,r3
 8003a5c:	00820034 	movhi	r2,2048
 8003a60:	109f6104 	addi	r2,r2,32132
 8003a64:	1887883a 	add	r3,r3,r2
 8003a68:	18800003 	ldbu	r2,0(r3)
 8003a6c:	00c00804 	movi	r3,32
 8003a70:	2885883a 	add	r2,r5,r2
 8003a74:	1885c83a 	sub	r2,r3,r2
 8003a78:	f800283a 	ret

08003a7c <__pack_f>:
 8003a7c:	20c00017 	ldw	r3,0(r4)
 8003a80:	01c00044 	movi	r7,1
 8003a84:	21800317 	ldw	r6,12(r4)
 8003a88:	21400117 	ldw	r5,4(r4)
 8003a8c:	38c02d2e 	bgeu	r7,r3,8003b44 <__pack_f+0xc8>
 8003a90:	00800104 	movi	r2,4
 8003a94:	18802826 	beq	r3,r2,8003b38 <__pack_f+0xbc>
 8003a98:	00800084 	movi	r2,2
 8003a9c:	18800126 	beq	r3,r2,8003aa4 <__pack_f+0x28>
 8003aa0:	3000101e 	bne	r6,zero,8003ae4 <__pack_f+0x68>
 8003aa4:	000d883a 	mov	r6,zero
 8003aa8:	0007883a 	mov	r3,zero
 8003aac:	19003fcc 	andi	r4,r3,255
 8003ab0:	200895fa 	slli	r4,r4,23
 8003ab4:	00c02034 	movhi	r3,128
 8003ab8:	18ffffc4 	addi	r3,r3,-1
 8003abc:	30c6703a 	and	r3,r6,r3
 8003ac0:	10a0002c 	andhi	r2,r2,32768
 8003ac4:	10c4b03a 	or	r2,r2,r3
 8003ac8:	280a97fa 	slli	r5,r5,31
 8003acc:	1104b03a 	or	r2,r2,r4
 8003ad0:	00e00034 	movhi	r3,32768
 8003ad4:	18ffffc4 	addi	r3,r3,-1
 8003ad8:	10c4703a 	and	r2,r2,r3
 8003adc:	1144b03a 	or	r2,r2,r5
 8003ae0:	f800283a 	ret
 8003ae4:	21000217 	ldw	r4,8(r4)
 8003ae8:	00bfe084 	movi	r2,-126
 8003aec:	20801b16 	blt	r4,r2,8003b5c <__pack_f+0xe0>
 8003af0:	00801fc4 	movi	r2,127
 8003af4:	11001016 	blt	r2,r4,8003b38 <__pack_f+0xbc>
 8003af8:	308e703a 	and	r7,r6,r2
 8003afc:	2087883a 	add	r3,r4,r2
 8003b00:	00801004 	movi	r2,64
 8003b04:	38800526 	beq	r7,r2,8003b1c <__pack_f+0xa0>
 8003b08:	31800fc4 	addi	r6,r6,63
 8003b0c:	30000716 	blt	r6,zero,8003b2c <__pack_f+0xb0>
 8003b10:	300490ba 	slli	r2,r6,2
 8003b14:	100cd27a 	srli	r6,r2,9
 8003b18:	003fe406 	br	8003aac <__pack_f+0x30>
 8003b1c:	3080200c 	andi	r2,r6,128
 8003b20:	103ffa26 	beq	r2,zero,8003b0c <__pack_f+0x90>
 8003b24:	31cd883a 	add	r6,r6,r7
 8003b28:	003ff806 	br	8003b0c <__pack_f+0x90>
 8003b2c:	300cd07a 	srli	r6,r6,1
 8003b30:	18c00044 	addi	r3,r3,1
 8003b34:	003ff606 	br	8003b10 <__pack_f+0x94>
 8003b38:	000d883a 	mov	r6,zero
 8003b3c:	00ffffc4 	movi	r3,-1
 8003b40:	003fda06 	br	8003aac <__pack_f+0x30>
 8003b44:	31800434 	orhi	r6,r6,16
 8003b48:	00802034 	movhi	r2,128
 8003b4c:	10bfffc4 	addi	r2,r2,-1
 8003b50:	308c703a 	and	r6,r6,r2
 8003b54:	00ffffc4 	movi	r3,-1
 8003b58:	003fd406 	br	8003aac <__pack_f+0x30>
 8003b5c:	1109c83a 	sub	r4,r2,r4
 8003b60:	00800644 	movi	r2,25
 8003b64:	11001216 	blt	r2,r4,8003bb0 <__pack_f+0x134>
 8003b68:	3904983a 	sll	r2,r7,r4
 8003b6c:	3106d83a 	srl	r3,r6,r4
 8003b70:	10bfffc4 	addi	r2,r2,-1
 8003b74:	3084703a 	and	r2,r6,r2
 8003b78:	1004c03a 	cmpne	r2,r2,zero
 8003b7c:	1886b03a 	or	r3,r3,r2
 8003b80:	19001fcc 	andi	r4,r3,127
 8003b84:	00801004 	movi	r2,64
 8003b88:	20800c26 	beq	r4,r2,8003bbc <__pack_f+0x140>
 8003b8c:	18c00fc4 	addi	r3,r3,63
 8003b90:	00900034 	movhi	r2,16384
 8003b94:	10bfffc4 	addi	r2,r2,-1
 8003b98:	180cd1fa 	srli	r6,r3,7
 8003b9c:	10c7803a 	cmpltu	r3,r2,r3
 8003ba0:	00802034 	movhi	r2,128
 8003ba4:	10bfffc4 	addi	r2,r2,-1
 8003ba8:	308c703a 	and	r6,r6,r2
 8003bac:	003fbf06 	br	8003aac <__pack_f+0x30>
 8003bb0:	0007883a 	mov	r3,zero
 8003bb4:	000d883a 	mov	r6,zero
 8003bb8:	003ff906 	br	8003ba0 <__pack_f+0x124>
 8003bbc:	1880200c 	andi	r2,r3,128
 8003bc0:	10000126 	beq	r2,zero,8003bc8 <__pack_f+0x14c>
 8003bc4:	1907883a 	add	r3,r3,r4
 8003bc8:	180cd1fa 	srli	r6,r3,7
 8003bcc:	00900034 	movhi	r2,16384
 8003bd0:	10bfffc4 	addi	r2,r2,-1
 8003bd4:	10c7803a 	cmpltu	r3,r2,r3
 8003bd8:	003ff106 	br	8003ba0 <__pack_f+0x124>

08003bdc <__unpack_f>:
 8003bdc:	21800017 	ldw	r6,0(r4)
 8003be0:	00c02034 	movhi	r3,128
 8003be4:	18ffffc4 	addi	r3,r3,-1
 8003be8:	3004d5fa 	srli	r2,r6,23
 8003bec:	3008d7fa 	srli	r4,r6,31
 8003bf0:	30ce703a 	and	r7,r6,r3
 8003bf4:	10c03fcc 	andi	r3,r2,255
 8003bf8:	29000115 	stw	r4,4(r5)
 8003bfc:	1800131e 	bne	r3,zero,8003c4c <__unpack_f+0x70>
 8003c00:	38000f26 	beq	r7,zero,8003c40 <__unpack_f+0x64>
 8003c04:	380691fa 	slli	r3,r7,7
 8003c08:	01bfe084 	movi	r6,-126
 8003c0c:	008000c4 	movi	r2,3
 8003c10:	01100034 	movhi	r4,16384
 8003c14:	213fffc4 	addi	r4,r4,-1
 8003c18:	28800015 	stw	r2,0(r5)
 8003c1c:	29800215 	stw	r6,8(r5)
 8003c20:	20c00536 	bltu	r4,r3,8003c38 <__unpack_f+0x5c>
 8003c24:	3005883a 	mov	r2,r6
 8003c28:	18c7883a 	add	r3,r3,r3
 8003c2c:	10bfffc4 	addi	r2,r2,-1
 8003c30:	20fffd2e 	bgeu	r4,r3,8003c28 <__unpack_f+0x4c>
 8003c34:	28800215 	stw	r2,8(r5)
 8003c38:	28c00315 	stw	r3,12(r5)
 8003c3c:	f800283a 	ret
 8003c40:	00800084 	movi	r2,2
 8003c44:	28800015 	stw	r2,0(r5)
 8003c48:	f800283a 	ret
 8003c4c:	00803fc4 	movi	r2,255
 8003c50:	18800826 	beq	r3,r2,8003c74 <__unpack_f+0x98>
 8003c54:	380491fa 	slli	r2,r7,7
 8003c58:	18ffe044 	addi	r3,r3,-127
 8003c5c:	28c00215 	stw	r3,8(r5)
 8003c60:	10900034 	orhi	r2,r2,16384
 8003c64:	28800315 	stw	r2,12(r5)
 8003c68:	008000c4 	movi	r2,3
 8003c6c:	28800015 	stw	r2,0(r5)
 8003c70:	f800283a 	ret
 8003c74:	3800031e 	bne	r7,zero,8003c84 <__unpack_f+0xa8>
 8003c78:	00800104 	movi	r2,4
 8003c7c:	28800015 	stw	r2,0(r5)
 8003c80:	f800283a 	ret
 8003c84:	3080042c 	andhi	r2,r6,16
 8003c88:	10000426 	beq	r2,zero,8003c9c <__unpack_f+0xc0>
 8003c8c:	00800044 	movi	r2,1
 8003c90:	28800015 	stw	r2,0(r5)
 8003c94:	29c00315 	stw	r7,12(r5)
 8003c98:	f800283a 	ret
 8003c9c:	28000015 	stw	zero,0(r5)
 8003ca0:	003ffc06 	br	8003c94 <__unpack_f+0xb8>

08003ca4 <__fpcmp_parts_f>:
 8003ca4:	21800017 	ldw	r6,0(r4)
 8003ca8:	00c00044 	movi	r3,1
 8003cac:	19800a2e 	bgeu	r3,r6,8003cd8 <__fpcmp_parts_f+0x34>
 8003cb0:	28800017 	ldw	r2,0(r5)
 8003cb4:	1880082e 	bgeu	r3,r2,8003cd8 <__fpcmp_parts_f+0x34>
 8003cb8:	00c00104 	movi	r3,4
 8003cbc:	30c01e26 	beq	r6,r3,8003d38 <__fpcmp_parts_f+0x94>
 8003cc0:	10c01a26 	beq	r2,r3,8003d2c <__fpcmp_parts_f+0x88>
 8003cc4:	00c00084 	movi	r3,2
 8003cc8:	30c00526 	beq	r6,r3,8003ce0 <__fpcmp_parts_f+0x3c>
 8003ccc:	10c0071e 	bne	r2,r3,8003cec <__fpcmp_parts_f+0x48>
 8003cd0:	20800117 	ldw	r2,4(r4)
 8003cd4:	1000091e 	bne	r2,zero,8003cfc <__fpcmp_parts_f+0x58>
 8003cd8:	00800044 	movi	r2,1
 8003cdc:	f800283a 	ret
 8003ce0:	10c0121e 	bne	r2,r3,8003d2c <__fpcmp_parts_f+0x88>
 8003ce4:	0005883a 	mov	r2,zero
 8003ce8:	f800283a 	ret
 8003cec:	20c00117 	ldw	r3,4(r4)
 8003cf0:	28800117 	ldw	r2,4(r5)
 8003cf4:	18800326 	beq	r3,r2,8003d04 <__fpcmp_parts_f+0x60>
 8003cf8:	183ff726 	beq	r3,zero,8003cd8 <__fpcmp_parts_f+0x34>
 8003cfc:	00bfffc4 	movi	r2,-1
 8003d00:	f800283a 	ret
 8003d04:	21800217 	ldw	r6,8(r4)
 8003d08:	28800217 	ldw	r2,8(r5)
 8003d0c:	11bffa16 	blt	r2,r6,8003cf8 <__fpcmp_parts_f+0x54>
 8003d10:	30800416 	blt	r6,r2,8003d24 <__fpcmp_parts_f+0x80>
 8003d14:	21000317 	ldw	r4,12(r4)
 8003d18:	29400317 	ldw	r5,12(r5)
 8003d1c:	293ff636 	bltu	r5,r4,8003cf8 <__fpcmp_parts_f+0x54>
 8003d20:	217ff02e 	bgeu	r4,r5,8003ce4 <__fpcmp_parts_f+0x40>
 8003d24:	183fec1e 	bne	r3,zero,8003cd8 <__fpcmp_parts_f+0x34>
 8003d28:	003ff406 	br	8003cfc <__fpcmp_parts_f+0x58>
 8003d2c:	28800117 	ldw	r2,4(r5)
 8003d30:	103fe91e 	bne	r2,zero,8003cd8 <__fpcmp_parts_f+0x34>
 8003d34:	003ff106 	br	8003cfc <__fpcmp_parts_f+0x58>
 8003d38:	11bfe51e 	bne	r2,r6,8003cd0 <__fpcmp_parts_f+0x2c>
 8003d3c:	28c00117 	ldw	r3,4(r5)
 8003d40:	20800117 	ldw	r2,4(r4)
 8003d44:	1885c83a 	sub	r2,r3,r2
 8003d48:	f800283a 	ret

08003d4c <__make_fp>:
 8003d4c:	defffb04 	addi	sp,sp,-20
 8003d50:	d9000015 	stw	r4,0(sp)
 8003d54:	d809883a 	mov	r4,sp
 8003d58:	dfc00415 	stw	ra,16(sp)
 8003d5c:	d9400115 	stw	r5,4(sp)
 8003d60:	d9800215 	stw	r6,8(sp)
 8003d64:	d9c00315 	stw	r7,12(sp)
 8003d68:	8003a7c0 	call	8003a7c <__pack_f>
 8003d6c:	dfc00417 	ldw	ra,16(sp)
 8003d70:	dec00504 	addi	sp,sp,20
 8003d74:	f800283a 	ret

08003d78 <__pack_d>:
 8003d78:	20c00017 	ldw	r3,0(r4)
 8003d7c:	defffd04 	addi	sp,sp,-12
 8003d80:	dc000015 	stw	r16,0(sp)
 8003d84:	dc800215 	stw	r18,8(sp)
 8003d88:	dc400115 	stw	r17,4(sp)
 8003d8c:	00800044 	movi	r2,1
 8003d90:	22000317 	ldw	r8,12(r4)
 8003d94:	001f883a 	mov	r15,zero
 8003d98:	22400417 	ldw	r9,16(r4)
 8003d9c:	24000117 	ldw	r16,4(r4)
 8003da0:	10c0552e 	bgeu	r2,r3,8003ef8 <__pack_d+0x180>
 8003da4:	00800104 	movi	r2,4
 8003da8:	18804f26 	beq	r3,r2,8003ee8 <__pack_d+0x170>
 8003dac:	00800084 	movi	r2,2
 8003db0:	18800226 	beq	r3,r2,8003dbc <__pack_d+0x44>
 8003db4:	4244b03a 	or	r2,r8,r9
 8003db8:	10001a1e 	bne	r2,zero,8003e24 <__pack_d+0xac>
 8003dbc:	000d883a 	mov	r6,zero
 8003dc0:	000f883a 	mov	r7,zero
 8003dc4:	0011883a 	mov	r8,zero
 8003dc8:	00800434 	movhi	r2,16
 8003dcc:	10bfffc4 	addi	r2,r2,-1
 8003dd0:	301d883a 	mov	r14,r6
 8003dd4:	3884703a 	and	r2,r7,r2
 8003dd8:	400a953a 	slli	r5,r8,20
 8003ddc:	79bffc2c 	andhi	r6,r15,65520
 8003de0:	308cb03a 	or	r6,r6,r2
 8003de4:	00e00434 	movhi	r3,32784
 8003de8:	18ffffc4 	addi	r3,r3,-1
 8003dec:	800497fa 	slli	r2,r16,31
 8003df0:	30c6703a 	and	r3,r6,r3
 8003df4:	1946b03a 	or	r3,r3,r5
 8003df8:	01600034 	movhi	r5,32768
 8003dfc:	297fffc4 	addi	r5,r5,-1
 8003e00:	194a703a 	and	r5,r3,r5
 8003e04:	288ab03a 	or	r5,r5,r2
 8003e08:	2807883a 	mov	r3,r5
 8003e0c:	7005883a 	mov	r2,r14
 8003e10:	dc800217 	ldw	r18,8(sp)
 8003e14:	dc400117 	ldw	r17,4(sp)
 8003e18:	dc000017 	ldw	r16,0(sp)
 8003e1c:	dec00304 	addi	sp,sp,12
 8003e20:	f800283a 	ret
 8003e24:	21000217 	ldw	r4,8(r4)
 8003e28:	00bf0084 	movi	r2,-1022
 8003e2c:	20803f16 	blt	r4,r2,8003f2c <__pack_d+0x1b4>
 8003e30:	0080ffc4 	movi	r2,1023
 8003e34:	11002c16 	blt	r2,r4,8003ee8 <__pack_d+0x170>
 8003e38:	00803fc4 	movi	r2,255
 8003e3c:	408c703a 	and	r6,r8,r2
 8003e40:	00802004 	movi	r2,128
 8003e44:	0007883a 	mov	r3,zero
 8003e48:	000f883a 	mov	r7,zero
 8003e4c:	2280ffc4 	addi	r10,r4,1023
 8003e50:	30801e26 	beq	r6,r2,8003ecc <__pack_d+0x154>
 8003e54:	00801fc4 	movi	r2,127
 8003e58:	4089883a 	add	r4,r8,r2
 8003e5c:	220d803a 	cmpltu	r6,r4,r8
 8003e60:	324d883a 	add	r6,r6,r9
 8003e64:	2011883a 	mov	r8,r4
 8003e68:	3013883a 	mov	r9,r6
 8003e6c:	00880034 	movhi	r2,8192
 8003e70:	10bfffc4 	addi	r2,r2,-1
 8003e74:	12400d36 	bltu	r2,r9,8003eac <__pack_d+0x134>
 8003e78:	4804963a 	slli	r2,r9,24
 8003e7c:	400cd23a 	srli	r6,r8,8
 8003e80:	480ed23a 	srli	r7,r9,8
 8003e84:	013fffc4 	movi	r4,-1
 8003e88:	118cb03a 	or	r6,r2,r6
 8003e8c:	01400434 	movhi	r5,16
 8003e90:	297fffc4 	addi	r5,r5,-1
 8003e94:	3104703a 	and	r2,r6,r4
 8003e98:	3946703a 	and	r3,r7,r5
 8003e9c:	5201ffcc 	andi	r8,r10,2047
 8003ea0:	100d883a 	mov	r6,r2
 8003ea4:	180f883a 	mov	r7,r3
 8003ea8:	003fc706 	br	8003dc8 <__pack_d+0x50>
 8003eac:	480897fa 	slli	r4,r9,31
 8003eb0:	4004d07a 	srli	r2,r8,1
 8003eb4:	4806d07a 	srli	r3,r9,1
 8003eb8:	52800044 	addi	r10,r10,1
 8003ebc:	2084b03a 	or	r2,r4,r2
 8003ec0:	1011883a 	mov	r8,r2
 8003ec4:	1813883a 	mov	r9,r3
 8003ec8:	003feb06 	br	8003e78 <__pack_d+0x100>
 8003ecc:	383fe11e 	bne	r7,zero,8003e54 <__pack_d+0xdc>
 8003ed0:	01004004 	movi	r4,256
 8003ed4:	4104703a 	and	r2,r8,r4
 8003ed8:	10c4b03a 	or	r2,r2,r3
 8003edc:	103fe326 	beq	r2,zero,8003e6c <__pack_d+0xf4>
 8003ee0:	3005883a 	mov	r2,r6
 8003ee4:	003fdc06 	br	8003e58 <__pack_d+0xe0>
 8003ee8:	000d883a 	mov	r6,zero
 8003eec:	000f883a 	mov	r7,zero
 8003ef0:	0201ffc4 	movi	r8,2047
 8003ef4:	003fb406 	br	8003dc8 <__pack_d+0x50>
 8003ef8:	0005883a 	mov	r2,zero
 8003efc:	00c00234 	movhi	r3,8
 8003f00:	408cb03a 	or	r6,r8,r2
 8003f04:	48ceb03a 	or	r7,r9,r3
 8003f08:	013fffc4 	movi	r4,-1
 8003f0c:	01400434 	movhi	r5,16
 8003f10:	297fffc4 	addi	r5,r5,-1
 8003f14:	3104703a 	and	r2,r6,r4
 8003f18:	3946703a 	and	r3,r7,r5
 8003f1c:	100d883a 	mov	r6,r2
 8003f20:	180f883a 	mov	r7,r3
 8003f24:	0201ffc4 	movi	r8,2047
 8003f28:	003fa706 	br	8003dc8 <__pack_d+0x50>
 8003f2c:	1109c83a 	sub	r4,r2,r4
 8003f30:	00800e04 	movi	r2,56
 8003f34:	11004316 	blt	r2,r4,8004044 <__pack_d+0x2cc>
 8003f38:	21fff804 	addi	r7,r4,-32
 8003f3c:	38004516 	blt	r7,zero,8004054 <__pack_d+0x2dc>
 8003f40:	49d8d83a 	srl	r12,r9,r7
 8003f44:	001b883a 	mov	r13,zero
 8003f48:	0023883a 	mov	r17,zero
 8003f4c:	01400044 	movi	r5,1
 8003f50:	0025883a 	mov	r18,zero
 8003f54:	38004716 	blt	r7,zero,8004074 <__pack_d+0x2fc>
 8003f58:	29d6983a 	sll	r11,r5,r7
 8003f5c:	0015883a 	mov	r10,zero
 8003f60:	00bfffc4 	movi	r2,-1
 8003f64:	5089883a 	add	r4,r10,r2
 8003f68:	588b883a 	add	r5,r11,r2
 8003f6c:	228d803a 	cmpltu	r6,r4,r10
 8003f70:	314b883a 	add	r5,r6,r5
 8003f74:	4104703a 	and	r2,r8,r4
 8003f78:	4946703a 	and	r3,r9,r5
 8003f7c:	10c4b03a 	or	r2,r2,r3
 8003f80:	10000226 	beq	r2,zero,8003f8c <__pack_d+0x214>
 8003f84:	04400044 	movi	r17,1
 8003f88:	0025883a 	mov	r18,zero
 8003f8c:	00803fc4 	movi	r2,255
 8003f90:	644eb03a 	or	r7,r12,r17
 8003f94:	3892703a 	and	r9,r7,r2
 8003f98:	00802004 	movi	r2,128
 8003f9c:	6c90b03a 	or	r8,r13,r18
 8003fa0:	0015883a 	mov	r10,zero
 8003fa4:	48801626 	beq	r9,r2,8004000 <__pack_d+0x288>
 8003fa8:	01001fc4 	movi	r4,127
 8003fac:	3905883a 	add	r2,r7,r4
 8003fb0:	11cd803a 	cmpltu	r6,r2,r7
 8003fb4:	320d883a 	add	r6,r6,r8
 8003fb8:	100f883a 	mov	r7,r2
 8003fbc:	00840034 	movhi	r2,4096
 8003fc0:	10bfffc4 	addi	r2,r2,-1
 8003fc4:	3011883a 	mov	r8,r6
 8003fc8:	0007883a 	mov	r3,zero
 8003fcc:	11801b36 	bltu	r2,r6,800403c <__pack_d+0x2c4>
 8003fd0:	4004963a 	slli	r2,r8,24
 8003fd4:	3808d23a 	srli	r4,r7,8
 8003fd8:	400ad23a 	srli	r5,r8,8
 8003fdc:	1813883a 	mov	r9,r3
 8003fe0:	1108b03a 	or	r4,r2,r4
 8003fe4:	00bfffc4 	movi	r2,-1
 8003fe8:	00c00434 	movhi	r3,16
 8003fec:	18ffffc4 	addi	r3,r3,-1
 8003ff0:	208c703a 	and	r6,r4,r2
 8003ff4:	28ce703a 	and	r7,r5,r3
 8003ff8:	4a01ffcc 	andi	r8,r9,2047
 8003ffc:	003f7206 	br	8003dc8 <__pack_d+0x50>
 8004000:	503fe91e 	bne	r10,zero,8003fa8 <__pack_d+0x230>
 8004004:	01004004 	movi	r4,256
 8004008:	3904703a 	and	r2,r7,r4
 800400c:	0007883a 	mov	r3,zero
 8004010:	10c4b03a 	or	r2,r2,r3
 8004014:	10000626 	beq	r2,zero,8004030 <__pack_d+0x2b8>
 8004018:	3a45883a 	add	r2,r7,r9
 800401c:	11cd803a 	cmpltu	r6,r2,r7
 8004020:	320d883a 	add	r6,r6,r8
 8004024:	100f883a 	mov	r7,r2
 8004028:	3011883a 	mov	r8,r6
 800402c:	0007883a 	mov	r3,zero
 8004030:	00840034 	movhi	r2,4096
 8004034:	10bfffc4 	addi	r2,r2,-1
 8004038:	123fe52e 	bgeu	r2,r8,8003fd0 <__pack_d+0x258>
 800403c:	00c00044 	movi	r3,1
 8004040:	003fe306 	br	8003fd0 <__pack_d+0x258>
 8004044:	0009883a 	mov	r4,zero
 8004048:	0013883a 	mov	r9,zero
 800404c:	000b883a 	mov	r5,zero
 8004050:	003fe406 	br	8003fe4 <__pack_d+0x26c>
 8004054:	4a47883a 	add	r3,r9,r9
 8004058:	008007c4 	movi	r2,31
 800405c:	1105c83a 	sub	r2,r2,r4
 8004060:	1886983a 	sll	r3,r3,r2
 8004064:	4118d83a 	srl	r12,r8,r4
 8004068:	491ad83a 	srl	r13,r9,r4
 800406c:	1b18b03a 	or	r12,r3,r12
 8004070:	003fb506 	br	8003f48 <__pack_d+0x1d0>
 8004074:	2806d07a 	srli	r3,r5,1
 8004078:	008007c4 	movi	r2,31
 800407c:	1105c83a 	sub	r2,r2,r4
 8004080:	1896d83a 	srl	r11,r3,r2
 8004084:	2914983a 	sll	r10,r5,r4
 8004088:	003fb506 	br	8003f60 <__pack_d+0x1e8>

0800408c <__unpack_d>:
 800408c:	20c00117 	ldw	r3,4(r4)
 8004090:	22400017 	ldw	r9,0(r4)
 8004094:	00800434 	movhi	r2,16
 8004098:	10bfffc4 	addi	r2,r2,-1
 800409c:	1808d53a 	srli	r4,r3,20
 80040a0:	180cd7fa 	srli	r6,r3,31
 80040a4:	1894703a 	and	r10,r3,r2
 80040a8:	2201ffcc 	andi	r8,r4,2047
 80040ac:	281b883a 	mov	r13,r5
 80040b0:	4817883a 	mov	r11,r9
 80040b4:	29800115 	stw	r6,4(r5)
 80040b8:	5019883a 	mov	r12,r10
 80040bc:	40001e1e 	bne	r8,zero,8004138 <__unpack_d+0xac>
 80040c0:	4a84b03a 	or	r2,r9,r10
 80040c4:	10001926 	beq	r2,zero,800412c <__unpack_d+0xa0>
 80040c8:	4804d63a 	srli	r2,r9,24
 80040cc:	500c923a 	slli	r6,r10,8
 80040d0:	013f0084 	movi	r4,-1022
 80040d4:	00c40034 	movhi	r3,4096
 80040d8:	18ffffc4 	addi	r3,r3,-1
 80040dc:	118cb03a 	or	r6,r2,r6
 80040e0:	008000c4 	movi	r2,3
 80040e4:	480a923a 	slli	r5,r9,8
 80040e8:	68800015 	stw	r2,0(r13)
 80040ec:	69000215 	stw	r4,8(r13)
 80040f0:	19800b36 	bltu	r3,r6,8004120 <__unpack_d+0x94>
 80040f4:	200f883a 	mov	r7,r4
 80040f8:	1811883a 	mov	r8,r3
 80040fc:	2945883a 	add	r2,r5,r5
 8004100:	1149803a 	cmpltu	r4,r2,r5
 8004104:	3187883a 	add	r3,r6,r6
 8004108:	20c9883a 	add	r4,r4,r3
 800410c:	100b883a 	mov	r5,r2
 8004110:	200d883a 	mov	r6,r4
 8004114:	39ffffc4 	addi	r7,r7,-1
 8004118:	413ff82e 	bgeu	r8,r4,80040fc <__unpack_d+0x70>
 800411c:	69c00215 	stw	r7,8(r13)
 8004120:	69800415 	stw	r6,16(r13)
 8004124:	69400315 	stw	r5,12(r13)
 8004128:	f800283a 	ret
 800412c:	00800084 	movi	r2,2
 8004130:	28800015 	stw	r2,0(r5)
 8004134:	f800283a 	ret
 8004138:	0081ffc4 	movi	r2,2047
 800413c:	40800f26 	beq	r8,r2,800417c <__unpack_d+0xf0>
 8004140:	480cd63a 	srli	r6,r9,24
 8004144:	5006923a 	slli	r3,r10,8
 8004148:	4804923a 	slli	r2,r9,8
 800414c:	0009883a 	mov	r4,zero
 8004150:	30c6b03a 	or	r3,r6,r3
 8004154:	01440034 	movhi	r5,4096
 8004158:	110cb03a 	or	r6,r2,r4
 800415c:	423f0044 	addi	r8,r8,-1023
 8004160:	194eb03a 	or	r7,r3,r5
 8004164:	008000c4 	movi	r2,3
 8004168:	69c00415 	stw	r7,16(r13)
 800416c:	6a000215 	stw	r8,8(r13)
 8004170:	68800015 	stw	r2,0(r13)
 8004174:	69800315 	stw	r6,12(r13)
 8004178:	f800283a 	ret
 800417c:	4a84b03a 	or	r2,r9,r10
 8004180:	1000031e 	bne	r2,zero,8004190 <__unpack_d+0x104>
 8004184:	00800104 	movi	r2,4
 8004188:	28800015 	stw	r2,0(r5)
 800418c:	f800283a 	ret
 8004190:	0009883a 	mov	r4,zero
 8004194:	01400234 	movhi	r5,8
 8004198:	4904703a 	and	r2,r9,r4
 800419c:	5146703a 	and	r3,r10,r5
 80041a0:	10c4b03a 	or	r2,r2,r3
 80041a4:	10000526 	beq	r2,zero,80041bc <__unpack_d+0x130>
 80041a8:	00800044 	movi	r2,1
 80041ac:	68800015 	stw	r2,0(r13)
 80041b0:	6b000415 	stw	r12,16(r13)
 80041b4:	6ac00315 	stw	r11,12(r13)
 80041b8:	f800283a 	ret
 80041bc:	68000015 	stw	zero,0(r13)
 80041c0:	003ffb06 	br	80041b0 <__unpack_d+0x124>

080041c4 <__fpcmp_parts_d>:
 80041c4:	21800017 	ldw	r6,0(r4)
 80041c8:	00c00044 	movi	r3,1
 80041cc:	19800a2e 	bgeu	r3,r6,80041f8 <__fpcmp_parts_d+0x34>
 80041d0:	28800017 	ldw	r2,0(r5)
 80041d4:	1880082e 	bgeu	r3,r2,80041f8 <__fpcmp_parts_d+0x34>
 80041d8:	00c00104 	movi	r3,4
 80041dc:	30c02626 	beq	r6,r3,8004278 <__fpcmp_parts_d+0xb4>
 80041e0:	10c02226 	beq	r2,r3,800426c <__fpcmp_parts_d+0xa8>
 80041e4:	00c00084 	movi	r3,2
 80041e8:	30c00526 	beq	r6,r3,8004200 <__fpcmp_parts_d+0x3c>
 80041ec:	10c0071e 	bne	r2,r3,800420c <__fpcmp_parts_d+0x48>
 80041f0:	20800117 	ldw	r2,4(r4)
 80041f4:	1000091e 	bne	r2,zero,800421c <__fpcmp_parts_d+0x58>
 80041f8:	00800044 	movi	r2,1
 80041fc:	f800283a 	ret
 8004200:	10c01a1e 	bne	r2,r3,800426c <__fpcmp_parts_d+0xa8>
 8004204:	0005883a 	mov	r2,zero
 8004208:	f800283a 	ret
 800420c:	22000117 	ldw	r8,4(r4)
 8004210:	28800117 	ldw	r2,4(r5)
 8004214:	40800326 	beq	r8,r2,8004224 <__fpcmp_parts_d+0x60>
 8004218:	403ff726 	beq	r8,zero,80041f8 <__fpcmp_parts_d+0x34>
 800421c:	00bfffc4 	movi	r2,-1
 8004220:	f800283a 	ret
 8004224:	20c00217 	ldw	r3,8(r4)
 8004228:	28800217 	ldw	r2,8(r5)
 800422c:	10fffa16 	blt	r2,r3,8004218 <__fpcmp_parts_d+0x54>
 8004230:	18800916 	blt	r3,r2,8004258 <__fpcmp_parts_d+0x94>
 8004234:	21c00417 	ldw	r7,16(r4)
 8004238:	28c00417 	ldw	r3,16(r5)
 800423c:	21800317 	ldw	r6,12(r4)
 8004240:	28800317 	ldw	r2,12(r5)
 8004244:	19fff436 	bltu	r3,r7,8004218 <__fpcmp_parts_d+0x54>
 8004248:	38c00526 	beq	r7,r3,8004260 <__fpcmp_parts_d+0x9c>
 800424c:	38c00236 	bltu	r7,r3,8004258 <__fpcmp_parts_d+0x94>
 8004250:	19ffec1e 	bne	r3,r7,8004204 <__fpcmp_parts_d+0x40>
 8004254:	30bfeb2e 	bgeu	r6,r2,8004204 <__fpcmp_parts_d+0x40>
 8004258:	403fe71e 	bne	r8,zero,80041f8 <__fpcmp_parts_d+0x34>
 800425c:	003fef06 	br	800421c <__fpcmp_parts_d+0x58>
 8004260:	11bffa2e 	bgeu	r2,r6,800424c <__fpcmp_parts_d+0x88>
 8004264:	403fe426 	beq	r8,zero,80041f8 <__fpcmp_parts_d+0x34>
 8004268:	003fec06 	br	800421c <__fpcmp_parts_d+0x58>
 800426c:	28800117 	ldw	r2,4(r5)
 8004270:	103fe11e 	bne	r2,zero,80041f8 <__fpcmp_parts_d+0x34>
 8004274:	003fe906 	br	800421c <__fpcmp_parts_d+0x58>
 8004278:	11bfdd1e 	bne	r2,r6,80041f0 <__fpcmp_parts_d+0x2c>
 800427c:	28c00117 	ldw	r3,4(r5)
 8004280:	20800117 	ldw	r2,4(r4)
 8004284:	1885c83a 	sub	r2,r3,r2
 8004288:	f800283a 	ret

0800428c <__errno>:
 800428c:	00c20074 	movhi	r3,2049
 8004290:	18e55104 	addi	r3,r3,-27324
 8004294:	18800017 	ldw	r2,0(r3)
 8004298:	f800283a 	ret

0800429c <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 800429c:	defffe04 	addi	sp,sp,-8
 80042a0:	dfc00115 	stw	ra,4(sp)
 80042a4:	df000015 	stw	fp,0(sp)
 80042a8:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
 80042ac:	01020074 	movhi	r4,2049
 80042b0:	21255c04 	addi	r4,r4,-27280
 80042b4:	01420034 	movhi	r5,2048
 80042b8:	295fb704 	addi	r5,r5,32476
 80042bc:	01820074 	movhi	r6,2049
 80042c0:	31a55c04 	addi	r6,r6,-27280
 80042c4:	800431c0 	call	800431c <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
 80042c8:	01020034 	movhi	r4,2048
 80042cc:	21000804 	addi	r4,r4,32
 80042d0:	01420034 	movhi	r5,2048
 80042d4:	29400804 	addi	r5,r5,32
 80042d8:	01820034 	movhi	r6,2048
 80042dc:	31806d04 	addi	r6,r6,436
 80042e0:	800431c0 	call	800431c <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
 80042e4:	01020034 	movhi	r4,2048
 80042e8:	211f3e04 	addi	r4,r4,31992
 80042ec:	01420034 	movhi	r5,2048
 80042f0:	295f3e04 	addi	r5,r5,31992
 80042f4:	01820034 	movhi	r6,2048
 80042f8:	319fb704 	addi	r6,r6,32476
 80042fc:	800431c0 	call	800431c <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 8004300:	80069700 	call	8006970 <alt_dcache_flush_all>
  alt_icache_flush_all();
 8004304:	8006c500 	call	8006c50 <alt_icache_flush_all>
}
 8004308:	e037883a 	mov	sp,fp
 800430c:	dfc00117 	ldw	ra,4(sp)
 8004310:	df000017 	ldw	fp,0(sp)
 8004314:	dec00204 	addi	sp,sp,8
 8004318:	f800283a 	ret

0800431c <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
 800431c:	defffc04 	addi	sp,sp,-16
 8004320:	df000315 	stw	fp,12(sp)
 8004324:	df000304 	addi	fp,sp,12
 8004328:	e13ffd15 	stw	r4,-12(fp)
 800432c:	e17ffe15 	stw	r5,-8(fp)
 8004330:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
 8004334:	e0fffe17 	ldw	r3,-8(fp)
 8004338:	e0bffd17 	ldw	r2,-12(fp)
 800433c:	18800e26 	beq	r3,r2,8004378 <alt_load_section+0x5c>
  {
    while( to != end )
 8004340:	00000a06 	br	800436c <alt_load_section+0x50>
    {
      *to++ = *from++;
 8004344:	e0bffd17 	ldw	r2,-12(fp)
 8004348:	10c00017 	ldw	r3,0(r2)
 800434c:	e0bffe17 	ldw	r2,-8(fp)
 8004350:	10c00015 	stw	r3,0(r2)
 8004354:	e0bffe17 	ldw	r2,-8(fp)
 8004358:	10800104 	addi	r2,r2,4
 800435c:	e0bffe15 	stw	r2,-8(fp)
 8004360:	e0bffd17 	ldw	r2,-12(fp)
 8004364:	10800104 	addi	r2,r2,4
 8004368:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
 800436c:	e0fffe17 	ldw	r3,-8(fp)
 8004370:	e0bfff17 	ldw	r2,-4(fp)
 8004374:	18bff31e 	bne	r3,r2,8004344 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
 8004378:	e037883a 	mov	sp,fp
 800437c:	df000017 	ldw	fp,0(sp)
 8004380:	dec00104 	addi	sp,sp,4
 8004384:	f800283a 	ret

08004388 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 8004388:	defffd04 	addi	sp,sp,-12
 800438c:	dfc00215 	stw	ra,8(sp)
 8004390:	df000115 	stw	fp,4(sp)
 8004394:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 8004398:	0009883a 	mov	r4,zero
 800439c:	80043f40 	call	80043f4 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 80043a0:	80044280 	call	8004428 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 80043a4:	01020034 	movhi	r4,2048
 80043a8:	211fa204 	addi	r4,r4,32392
 80043ac:	01420034 	movhi	r5,2048
 80043b0:	295fa204 	addi	r5,r5,32392
 80043b4:	01820034 	movhi	r6,2048
 80043b8:	319fa204 	addi	r6,r6,32392
 80043bc:	80070100 	call	8007010 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
 80043c0:	8006af40 	call	8006af4 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
 80043c4:	01020034 	movhi	r4,2048
 80043c8:	211ad604 	addi	r4,r4,27480
 80043cc:	80077d80 	call	80077d8 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 80043d0:	d125b617 	ldw	r4,-26920(gp)
 80043d4:	d165b717 	ldw	r5,-26916(gp)
 80043d8:	d1a5b817 	ldw	r6,-26912(gp)
 80043dc:	80002000 	call	8000200 <main>
 80043e0:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
 80043e4:	01000044 	movi	r4,1
 80043e8:	80068140 	call	8006814 <close>
  exit (result);
 80043ec:	e13fff17 	ldw	r4,-4(fp)
 80043f0:	80077ec0 	call	80077ec <exit>

080043f4 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 80043f4:	defffd04 	addi	sp,sp,-12
 80043f8:	dfc00215 	stw	ra,8(sp)
 80043fc:	df000115 	stw	fp,4(sp)
 8004400:	df000104 	addi	fp,sp,4
 8004404:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_IRQ_INIT ( CPU_0, cpu_0);
 8004408:	80075500 	call	8007550 <altera_nios2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 800440c:	00800044 	movi	r2,1
 8004410:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 8004414:	e037883a 	mov	sp,fp
 8004418:	dfc00117 	ldw	ra,4(sp)
 800441c:	df000017 	ldw	fp,0(sp)
 8004420:	dec00204 	addi	sp,sp,8
 8004424:	f800283a 	ret

08004428 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 8004428:	defffd04 	addi	sp,sp,-12
 800442c:	dfc00215 	stw	ra,8(sp)
 8004430:	df000115 	stw	fp,4(sp)
 8004434:	df000104 	addi	fp,sp,4
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
 8004438:	01020074 	movhi	r4,2049
 800443c:	2120c104 	addi	r4,r4,-31996
 8004440:	000b883a 	mov	r5,zero
 8004444:	000d883a 	mov	r6,zero
 8004448:	80047f00 	call	80047f0 <altera_avalon_jtag_uart_init>
 800444c:	01020074 	movhi	r4,2049
 8004450:	2120b704 	addi	r4,r4,-32036
 8004454:	80046700 	call	8004670 <alt_dev_reg>
    ALTERA_AVALON_PERFORMANCE_COUNTER_INIT ( PERFORMANCE_COUNTER_0, performance_counter_0);
 8004458:	0007883a 	mov	r3,zero
 800445c:	00800044 	movi	r2,1
 8004460:	18800035 	stwio	r2,0(r3)
    ALTERA_AVALON_SYSID_INIT ( SYSID, sysid);
    ALTERA_UP_AVALON_VIDEO_PIXEL_BUFFER_DMA_INIT ( VIDEO_PIXEL_BUFFER_DMA_0, video_pixel_buffer_dma_0);
 8004464:	00820074 	movhi	r2,2049
 8004468:	10a4cf04 	addi	r2,r2,-27844
 800446c:	10800a17 	ldw	r2,40(r2)
 8004470:	10800017 	ldw	r2,0(r2)
 8004474:	1007883a 	mov	r3,r2
 8004478:	00820074 	movhi	r2,2049
 800447c:	10a4cf04 	addi	r2,r2,-27844
 8004480:	10c00b15 	stw	r3,44(r2)
 8004484:	00820074 	movhi	r2,2049
 8004488:	10a4cf04 	addi	r2,r2,-27844
 800448c:	10800a17 	ldw	r2,40(r2)
 8004490:	10800104 	addi	r2,r2,4
 8004494:	10800017 	ldw	r2,0(r2)
 8004498:	1007883a 	mov	r3,r2
 800449c:	00820074 	movhi	r2,2049
 80044a0:	10a4cf04 	addi	r2,r2,-27844
 80044a4:	10c00c15 	stw	r3,48(r2)
 80044a8:	00820074 	movhi	r2,2049
 80044ac:	10a4cf04 	addi	r2,r2,-27844
 80044b0:	10800a17 	ldw	r2,40(r2)
 80044b4:	10800204 	addi	r2,r2,8
 80044b8:	10800017 	ldw	r2,0(r2)
 80044bc:	10ffffcc 	andi	r3,r2,65535
 80044c0:	00820074 	movhi	r2,2049
 80044c4:	10a4cf04 	addi	r2,r2,-27844
 80044c8:	10c00f15 	stw	r3,60(r2)
 80044cc:	00820074 	movhi	r2,2049
 80044d0:	10a4cf04 	addi	r2,r2,-27844
 80044d4:	10800a17 	ldw	r2,40(r2)
 80044d8:	10800204 	addi	r2,r2,8
 80044dc:	10800017 	ldw	r2,0(r2)
 80044e0:	1005d43a 	srai	r2,r2,16
 80044e4:	10ffffcc 	andi	r3,r2,65535
 80044e8:	00820074 	movhi	r2,2049
 80044ec:	10a4cf04 	addi	r2,r2,-27844
 80044f0:	10c01015 	stw	r3,64(r2)
 80044f4:	00820074 	movhi	r2,2049
 80044f8:	10a4cf04 	addi	r2,r2,-27844
 80044fc:	10800a17 	ldw	r2,40(r2)
 8004500:	10800304 	addi	r2,r2,12
 8004504:	10800017 	ldw	r2,0(r2)
 8004508:	1005d07a 	srai	r2,r2,1
 800450c:	10c0004c 	andi	r3,r2,1
 8004510:	00820074 	movhi	r2,2049
 8004514:	10a4cf04 	addi	r2,r2,-27844
 8004518:	10c00d15 	stw	r3,52(r2)
 800451c:	00820074 	movhi	r2,2049
 8004520:	10a4cf04 	addi	r2,r2,-27844
 8004524:	10800a17 	ldw	r2,40(r2)
 8004528:	10800304 	addi	r2,r2,12
 800452c:	10800017 	ldw	r2,0(r2)
 8004530:	1005d13a 	srai	r2,r2,4
 8004534:	10c003cc 	andi	r3,r2,15
 8004538:	00820074 	movhi	r2,2049
 800453c:	10a4cf04 	addi	r2,r2,-27844
 8004540:	10c00e15 	stw	r3,56(r2)
 8004544:	00820074 	movhi	r2,2049
 8004548:	10a4cf04 	addi	r2,r2,-27844
 800454c:	10800a17 	ldw	r2,40(r2)
 8004550:	10800304 	addi	r2,r2,12
 8004554:	10800017 	ldw	r2,0(r2)
 8004558:	1005d43a 	srai	r2,r2,16
 800455c:	1007883a 	mov	r3,r2
 8004560:	00bfffc4 	movi	r2,-1
 8004564:	1884703a 	and	r2,r3,r2
 8004568:	e0bfff45 	stb	r2,-3(fp)
 800456c:	00820074 	movhi	r2,2049
 8004570:	10a4cf04 	addi	r2,r2,-27844
 8004574:	10800a17 	ldw	r2,40(r2)
 8004578:	10800304 	addi	r2,r2,12
 800457c:	10800017 	ldw	r2,0(r2)
 8004580:	1005d63a 	srai	r2,r2,24
 8004584:	1007883a 	mov	r3,r2
 8004588:	00bfffc4 	movi	r2,-1
 800458c:	1884703a 	and	r2,r3,r2
 8004590:	e0bfff05 	stb	r2,-4(fp)
 8004594:	00820074 	movhi	r2,2049
 8004598:	10a4cf04 	addi	r2,r2,-27844
 800459c:	10800e17 	ldw	r2,56(r2)
 80045a0:	10800058 	cmpnei	r2,r2,1
 80045a4:	1000041e 	bne	r2,zero,80045b8 <alt_sys_init+0x190>
 80045a8:	00820074 	movhi	r2,2049
 80045ac:	10a4cf04 	addi	r2,r2,-27844
 80045b0:	10001115 	stw	zero,68(r2)
 80045b4:	00000e06 	br	80045f0 <alt_sys_init+0x1c8>
 80045b8:	00820074 	movhi	r2,2049
 80045bc:	10a4cf04 	addi	r2,r2,-27844
 80045c0:	10800e17 	ldw	r2,56(r2)
 80045c4:	10800098 	cmpnei	r2,r2,2
 80045c8:	1000051e 	bne	r2,zero,80045e0 <alt_sys_init+0x1b8>
 80045cc:	00c20074 	movhi	r3,2049
 80045d0:	18e4cf04 	addi	r3,r3,-27844
 80045d4:	00800044 	movi	r2,1
 80045d8:	18801115 	stw	r2,68(r3)
 80045dc:	00000406 	br	80045f0 <alt_sys_init+0x1c8>
 80045e0:	00c20074 	movhi	r3,2049
 80045e4:	18e4cf04 	addi	r3,r3,-27844
 80045e8:	00800084 	movi	r2,2
 80045ec:	18801115 	stw	r2,68(r3)
 80045f0:	e0ffff43 	ldbu	r3,-3(fp)
 80045f4:	00800804 	movi	r2,32
 80045f8:	10c7c83a 	sub	r3,r2,r3
 80045fc:	00bfffc4 	movi	r2,-1
 8004600:	10c6d83a 	srl	r3,r2,r3
 8004604:	00820074 	movhi	r2,2049
 8004608:	10a4cf04 	addi	r2,r2,-27844
 800460c:	10c01215 	stw	r3,72(r2)
 8004610:	e0ffff43 	ldbu	r3,-3(fp)
 8004614:	00820074 	movhi	r2,2049
 8004618:	10a4cf04 	addi	r2,r2,-27844
 800461c:	10801117 	ldw	r2,68(r2)
 8004620:	1887883a 	add	r3,r3,r2
 8004624:	00820074 	movhi	r2,2049
 8004628:	10a4cf04 	addi	r2,r2,-27844
 800462c:	10c01315 	stw	r3,76(r2)
 8004630:	e0ffff03 	ldbu	r3,-4(fp)
 8004634:	00800804 	movi	r2,32
 8004638:	10c7c83a 	sub	r3,r2,r3
 800463c:	00bfffc4 	movi	r2,-1
 8004640:	10c6d83a 	srl	r3,r2,r3
 8004644:	00820074 	movhi	r2,2049
 8004648:	10a4cf04 	addi	r2,r2,-27844
 800464c:	10c01415 	stw	r3,80(r2)
 8004650:	01020074 	movhi	r4,2049
 8004654:	2124cf04 	addi	r4,r4,-27844
 8004658:	80046700 	call	8004670 <alt_dev_reg>
}
 800465c:	e037883a 	mov	sp,fp
 8004660:	dfc00117 	ldw	ra,4(sp)
 8004664:	df000017 	ldw	fp,0(sp)
 8004668:	dec00204 	addi	sp,sp,8
 800466c:	f800283a 	ret

08004670 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
 8004670:	defffd04 	addi	sp,sp,-12
 8004674:	dfc00215 	stw	ra,8(sp)
 8004678:	df000115 	stw	fp,4(sp)
 800467c:	df000104 	addi	fp,sp,4
 8004680:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 8004684:	e13fff17 	ldw	r4,-4(fp)
 8004688:	01420074 	movhi	r5,2049
 800468c:	29655504 	addi	r5,r5,-27308
 8004690:	80069e00 	call	80069e0 <alt_dev_llist_insert>
}
 8004694:	e037883a 	mov	sp,fp
 8004698:	dfc00117 	ldw	ra,4(sp)
 800469c:	df000017 	ldw	fp,0(sp)
 80046a0:	dec00204 	addi	sp,sp,8
 80046a4:	f800283a 	ret

080046a8 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 80046a8:	defffa04 	addi	sp,sp,-24
 80046ac:	dfc00515 	stw	ra,20(sp)
 80046b0:	df000415 	stw	fp,16(sp)
 80046b4:	df000404 	addi	fp,sp,16
 80046b8:	e13ffd15 	stw	r4,-12(fp)
 80046bc:	e17ffe15 	stw	r5,-8(fp)
 80046c0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 80046c4:	e0bffd17 	ldw	r2,-12(fp)
 80046c8:	10800017 	ldw	r2,0(r2)
 80046cc:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 80046d0:	e0bffc17 	ldw	r2,-16(fp)
 80046d4:	11000a04 	addi	r4,r2,40
 80046d8:	e0bffd17 	ldw	r2,-12(fp)
 80046dc:	11c00217 	ldw	r7,8(r2)
 80046e0:	e17ffe17 	ldw	r5,-8(fp)
 80046e4:	e1bfff17 	ldw	r6,-4(fp)
 80046e8:	8004cf00 	call	8004cf0 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
 80046ec:	e037883a 	mov	sp,fp
 80046f0:	dfc00117 	ldw	ra,4(sp)
 80046f4:	df000017 	ldw	fp,0(sp)
 80046f8:	dec00204 	addi	sp,sp,8
 80046fc:	f800283a 	ret

08004700 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 8004700:	defffa04 	addi	sp,sp,-24
 8004704:	dfc00515 	stw	ra,20(sp)
 8004708:	df000415 	stw	fp,16(sp)
 800470c:	df000404 	addi	fp,sp,16
 8004710:	e13ffd15 	stw	r4,-12(fp)
 8004714:	e17ffe15 	stw	r5,-8(fp)
 8004718:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 800471c:	e0bffd17 	ldw	r2,-12(fp)
 8004720:	10800017 	ldw	r2,0(r2)
 8004724:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 8004728:	e0bffc17 	ldw	r2,-16(fp)
 800472c:	11000a04 	addi	r4,r2,40
 8004730:	e0bffd17 	ldw	r2,-12(fp)
 8004734:	11c00217 	ldw	r7,8(r2)
 8004738:	e17ffe17 	ldw	r5,-8(fp)
 800473c:	e1bfff17 	ldw	r6,-4(fp)
 8004740:	8004f140 	call	8004f14 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
 8004744:	e037883a 	mov	sp,fp
 8004748:	dfc00117 	ldw	ra,4(sp)
 800474c:	df000017 	ldw	fp,0(sp)
 8004750:	dec00204 	addi	sp,sp,8
 8004754:	f800283a 	ret

08004758 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
 8004758:	defffc04 	addi	sp,sp,-16
 800475c:	dfc00315 	stw	ra,12(sp)
 8004760:	df000215 	stw	fp,8(sp)
 8004764:	df000204 	addi	fp,sp,8
 8004768:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 800476c:	e0bfff17 	ldw	r2,-4(fp)
 8004770:	10800017 	ldw	r2,0(r2)
 8004774:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
 8004778:	e0bffe17 	ldw	r2,-8(fp)
 800477c:	11000a04 	addi	r4,r2,40
 8004780:	e0bfff17 	ldw	r2,-4(fp)
 8004784:	11400217 	ldw	r5,8(r2)
 8004788:	8004b880 	call	8004b88 <altera_avalon_jtag_uart_close>
}
 800478c:	e037883a 	mov	sp,fp
 8004790:	dfc00117 	ldw	ra,4(sp)
 8004794:	df000017 	ldw	fp,0(sp)
 8004798:	dec00204 	addi	sp,sp,8
 800479c:	f800283a 	ret

080047a0 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
 80047a0:	defffa04 	addi	sp,sp,-24
 80047a4:	dfc00515 	stw	ra,20(sp)
 80047a8:	df000415 	stw	fp,16(sp)
 80047ac:	df000404 	addi	fp,sp,16
 80047b0:	e13ffd15 	stw	r4,-12(fp)
 80047b4:	e17ffe15 	stw	r5,-8(fp)
 80047b8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
 80047bc:	e0bffd17 	ldw	r2,-12(fp)
 80047c0:	10800017 	ldw	r2,0(r2)
 80047c4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
 80047c8:	e0bffc17 	ldw	r2,-16(fp)
 80047cc:	11000a04 	addi	r4,r2,40
 80047d0:	e17ffe17 	ldw	r5,-8(fp)
 80047d4:	e1bfff17 	ldw	r6,-4(fp)
 80047d8:	8004bfc0 	call	8004bfc <altera_avalon_jtag_uart_ioctl>
}
 80047dc:	e037883a 	mov	sp,fp
 80047e0:	dfc00117 	ldw	ra,4(sp)
 80047e4:	df000017 	ldw	fp,0(sp)
 80047e8:	dec00204 	addi	sp,sp,8
 80047ec:	f800283a 	ret

080047f0 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
 80047f0:	defffa04 	addi	sp,sp,-24
 80047f4:	dfc00515 	stw	ra,20(sp)
 80047f8:	df000415 	stw	fp,16(sp)
 80047fc:	df000404 	addi	fp,sp,16
 8004800:	e13ffd15 	stw	r4,-12(fp)
 8004804:	e17ffe15 	stw	r5,-8(fp)
 8004808:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 800480c:	e0fffd17 	ldw	r3,-12(fp)
 8004810:	00800044 	movi	r2,1
 8004814:	18800815 	stw	r2,32(r3)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
 8004818:	e0bffd17 	ldw	r2,-12(fp)
 800481c:	10800017 	ldw	r2,0(r2)
 8004820:	11000104 	addi	r4,r2,4
 8004824:	e0bffd17 	ldw	r2,-12(fp)
 8004828:	10800817 	ldw	r2,32(r2)
 800482c:	1007883a 	mov	r3,r2
 8004830:	2005883a 	mov	r2,r4
 8004834:	10c00035 	stwio	r3,0(r2)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
 8004838:	e13ffe17 	ldw	r4,-8(fp)
 800483c:	e17fff17 	ldw	r5,-4(fp)
 8004840:	d8000015 	stw	zero,0(sp)
 8004844:	01820034 	movhi	r6,2048
 8004848:	31922c04 	addi	r6,r6,18608
 800484c:	e1fffd17 	ldw	r7,-12(fp)
 8004850:	8006c800 	call	8006c80 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
 8004854:	e0bffd17 	ldw	r2,-12(fp)
 8004858:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
 800485c:	e0bffd17 	ldw	r2,-12(fp)
 8004860:	11000204 	addi	r4,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 8004864:	00820074 	movhi	r2,2049
 8004868:	10ab0804 	addi	r2,r2,-21472
 800486c:	10800017 	ldw	r2,0(r2)
 8004870:	100b883a 	mov	r5,r2
 8004874:	01820034 	movhi	r6,2048
 8004878:	3192b604 	addi	r6,r6,19160
 800487c:	e1fffd17 	ldw	r7,-12(fp)
 8004880:	80066c00 	call	80066c0 <alt_alarm_start>
 8004884:	1004403a 	cmpge	r2,r2,zero
 8004888:	1000041e 	bne	r2,zero,800489c <altera_avalon_jtag_uart_init+0xac>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
 800488c:	e0fffd17 	ldw	r3,-12(fp)
 8004890:	00a00034 	movhi	r2,32768
 8004894:	10bfffc4 	addi	r2,r2,-1
 8004898:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
 800489c:	e037883a 	mov	sp,fp
 80048a0:	dfc00117 	ldw	ra,4(sp)
 80048a4:	df000017 	ldw	fp,0(sp)
 80048a8:	dec00204 	addi	sp,sp,8
 80048ac:	f800283a 	ret

080048b0 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
 80048b0:	defff804 	addi	sp,sp,-32
 80048b4:	df000715 	stw	fp,28(sp)
 80048b8:	df000704 	addi	fp,sp,28
 80048bc:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
 80048c0:	e0bfff17 	ldw	r2,-4(fp)
 80048c4:	e0bffe15 	stw	r2,-8(fp)
  unsigned int base = sp->base;
 80048c8:	e0bffe17 	ldw	r2,-8(fp)
 80048cc:	10800017 	ldw	r2,0(r2)
 80048d0:	e0bffd15 	stw	r2,-12(fp)
 80048d4:	00000006 	br	80048d8 <altera_avalon_jtag_uart_irq+0x28>
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 80048d8:	e0bffd17 	ldw	r2,-12(fp)
 80048dc:	10800104 	addi	r2,r2,4
 80048e0:	10800037 	ldwio	r2,0(r2)
 80048e4:	e0bffc15 	stw	r2,-16(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
 80048e8:	e0bffc17 	ldw	r2,-16(fp)
 80048ec:	1080c00c 	andi	r2,r2,768
 80048f0:	1005003a 	cmpeq	r2,r2,zero
 80048f4:	1000741e 	bne	r2,zero,8004ac8 <altera_avalon_jtag_uart_irq+0x218>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
 80048f8:	e0bffc17 	ldw	r2,-16(fp)
 80048fc:	1080400c 	andi	r2,r2,256
 8004900:	1005003a 	cmpeq	r2,r2,zero
 8004904:	1000351e 	bne	r2,zero,80049dc <altera_avalon_jtag_uart_irq+0x12c>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
 8004908:	00800074 	movhi	r2,1
 800490c:	e0bffb15 	stw	r2,-20(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 8004910:	e0bffe17 	ldw	r2,-8(fp)
 8004914:	10800a17 	ldw	r2,40(r2)
 8004918:	10800044 	addi	r2,r2,1
 800491c:	1081ffcc 	andi	r2,r2,2047
 8004920:	e0bffa15 	stw	r2,-24(fp)
        if (next == sp->rx_out)
 8004924:	e0bffe17 	ldw	r2,-8(fp)
 8004928:	10c00b17 	ldw	r3,44(r2)
 800492c:	e0bffa17 	ldw	r2,-24(fp)
 8004930:	18801626 	beq	r3,r2,800498c <altera_avalon_jtag_uart_irq+0xdc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 8004934:	e0bffd17 	ldw	r2,-12(fp)
 8004938:	10800037 	ldwio	r2,0(r2)
 800493c:	e0bffb15 	stw	r2,-20(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
 8004940:	e0bffb17 	ldw	r2,-20(fp)
 8004944:	10a0000c 	andi	r2,r2,32768
 8004948:	1005003a 	cmpeq	r2,r2,zero
 800494c:	10000f1e 	bne	r2,zero,800498c <altera_avalon_jtag_uart_irq+0xdc>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 8004950:	e0bffe17 	ldw	r2,-8(fp)
 8004954:	10c00a17 	ldw	r3,40(r2)
 8004958:	e0bffb17 	ldw	r2,-20(fp)
 800495c:	1009883a 	mov	r4,r2
 8004960:	e0bffe17 	ldw	r2,-8(fp)
 8004964:	1885883a 	add	r2,r3,r2
 8004968:	10800e04 	addi	r2,r2,56
 800496c:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 8004970:	e0bffe17 	ldw	r2,-8(fp)
 8004974:	10800a17 	ldw	r2,40(r2)
 8004978:	10800044 	addi	r2,r2,1
 800497c:	10c1ffcc 	andi	r3,r2,2047
 8004980:	e0bffe17 	ldw	r2,-8(fp)
 8004984:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
 8004988:	003fe106 	br	8004910 <altera_avalon_jtag_uart_irq+0x60>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
 800498c:	e0bffb17 	ldw	r2,-20(fp)
 8004990:	10bfffec 	andhi	r2,r2,65535
 8004994:	1005003a 	cmpeq	r2,r2,zero
 8004998:	1000101e 	bne	r2,zero,80049dc <altera_avalon_jtag_uart_irq+0x12c>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 800499c:	e0bffe17 	ldw	r2,-8(fp)
 80049a0:	10c00817 	ldw	r3,32(r2)
 80049a4:	00bfff84 	movi	r2,-2
 80049a8:	1886703a 	and	r3,r3,r2
 80049ac:	e0bffe17 	ldw	r2,-8(fp)
 80049b0:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
 80049b4:	e0bffd17 	ldw	r2,-12(fp)
 80049b8:	11000104 	addi	r4,r2,4
 80049bc:	e0bffe17 	ldw	r2,-8(fp)
 80049c0:	10800817 	ldw	r2,32(r2)
 80049c4:	1007883a 	mov	r3,r2
 80049c8:	2005883a 	mov	r2,r4
 80049cc:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 80049d0:	e0bffd17 	ldw	r2,-12(fp)
 80049d4:	10800104 	addi	r2,r2,4
 80049d8:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
 80049dc:	e0bffc17 	ldw	r2,-16(fp)
 80049e0:	1080800c 	andi	r2,r2,512
 80049e4:	1005003a 	cmpeq	r2,r2,zero
 80049e8:	103fbb1e 	bne	r2,zero,80048d8 <altera_avalon_jtag_uart_irq+0x28>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
 80049ec:	e0bffc17 	ldw	r2,-16(fp)
 80049f0:	10bfffec 	andhi	r2,r2,65535
 80049f4:	1004d43a 	srli	r2,r2,16
 80049f8:	e0bff915 	stw	r2,-28(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
 80049fc:	00001506 	br	8004a54 <altera_avalon_jtag_uart_irq+0x1a4>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
 8004a00:	e13ffd17 	ldw	r4,-12(fp)
 8004a04:	e0bffe17 	ldw	r2,-8(fp)
 8004a08:	10c00d17 	ldw	r3,52(r2)
 8004a0c:	e0bffe17 	ldw	r2,-8(fp)
 8004a10:	1885883a 	add	r2,r3,r2
 8004a14:	10820e04 	addi	r2,r2,2104
 8004a18:	10800003 	ldbu	r2,0(r2)
 8004a1c:	10c03fcc 	andi	r3,r2,255
 8004a20:	18c0201c 	xori	r3,r3,128
 8004a24:	18ffe004 	addi	r3,r3,-128
 8004a28:	2005883a 	mov	r2,r4
 8004a2c:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 8004a30:	e0bffe17 	ldw	r2,-8(fp)
 8004a34:	10800d17 	ldw	r2,52(r2)
 8004a38:	10800044 	addi	r2,r2,1
 8004a3c:	10c1ffcc 	andi	r3,r2,2047
 8004a40:	e0bffe17 	ldw	r2,-8(fp)
 8004a44:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
 8004a48:	e0bff917 	ldw	r2,-28(fp)
 8004a4c:	10bfffc4 	addi	r2,r2,-1
 8004a50:	e0bff915 	stw	r2,-28(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
 8004a54:	e0bff917 	ldw	r2,-28(fp)
 8004a58:	1005003a 	cmpeq	r2,r2,zero
 8004a5c:	1000051e 	bne	r2,zero,8004a74 <altera_avalon_jtag_uart_irq+0x1c4>
 8004a60:	e0bffe17 	ldw	r2,-8(fp)
 8004a64:	10c00d17 	ldw	r3,52(r2)
 8004a68:	e0bffe17 	ldw	r2,-8(fp)
 8004a6c:	10800c17 	ldw	r2,48(r2)
 8004a70:	18bfe31e 	bne	r3,r2,8004a00 <altera_avalon_jtag_uart_irq+0x150>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
 8004a74:	e0bff917 	ldw	r2,-28(fp)
 8004a78:	1005003a 	cmpeq	r2,r2,zero
 8004a7c:	103f961e 	bne	r2,zero,80048d8 <altera_avalon_jtag_uart_irq+0x28>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 8004a80:	e0bffe17 	ldw	r2,-8(fp)
 8004a84:	10c00817 	ldw	r3,32(r2)
 8004a88:	00bfff44 	movi	r2,-3
 8004a8c:	1886703a 	and	r3,r3,r2
 8004a90:	e0bffe17 	ldw	r2,-8(fp)
 8004a94:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 8004a98:	e0bffe17 	ldw	r2,-8(fp)
 8004a9c:	10800017 	ldw	r2,0(r2)
 8004aa0:	11000104 	addi	r4,r2,4
 8004aa4:	e0bffe17 	ldw	r2,-8(fp)
 8004aa8:	10800817 	ldw	r2,32(r2)
 8004aac:	1007883a 	mov	r3,r2
 8004ab0:	2005883a 	mov	r2,r4
 8004ab4:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 8004ab8:	e0bffd17 	ldw	r2,-12(fp)
 8004abc:	10800104 	addi	r2,r2,4
 8004ac0:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
 8004ac4:	003f8406 	br	80048d8 <altera_avalon_jtag_uart_irq+0x28>
}
 8004ac8:	e037883a 	mov	sp,fp
 8004acc:	df000017 	ldw	fp,0(sp)
 8004ad0:	dec00104 	addi	sp,sp,4
 8004ad4:	f800283a 	ret

08004ad8 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
 8004ad8:	defffc04 	addi	sp,sp,-16
 8004adc:	df000315 	stw	fp,12(sp)
 8004ae0:	df000304 	addi	fp,sp,12
 8004ae4:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
 8004ae8:	e0bfff17 	ldw	r2,-4(fp)
 8004aec:	e0bffe15 	stw	r2,-8(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
 8004af0:	e0bffe17 	ldw	r2,-8(fp)
 8004af4:	10800017 	ldw	r2,0(r2)
 8004af8:	10800104 	addi	r2,r2,4
 8004afc:	10800037 	ldwio	r2,0(r2)
 8004b00:	e0bffd15 	stw	r2,-12(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
 8004b04:	e0bffd17 	ldw	r2,-12(fp)
 8004b08:	1081000c 	andi	r2,r2,1024
 8004b0c:	1005003a 	cmpeq	r2,r2,zero
 8004b10:	10000c1e 	bne	r2,zero,8004b44 <altera_avalon_jtag_uart_timeout+0x6c>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
 8004b14:	e0bffe17 	ldw	r2,-8(fp)
 8004b18:	10800017 	ldw	r2,0(r2)
 8004b1c:	11000104 	addi	r4,r2,4
 8004b20:	e0bffe17 	ldw	r2,-8(fp)
 8004b24:	10800817 	ldw	r2,32(r2)
 8004b28:	10810014 	ori	r2,r2,1024
 8004b2c:	1007883a 	mov	r3,r2
 8004b30:	2005883a 	mov	r2,r4
 8004b34:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
 8004b38:	e0bffe17 	ldw	r2,-8(fp)
 8004b3c:	10000915 	stw	zero,36(r2)
 8004b40:	00000a06 	br	8004b6c <altera_avalon_jtag_uart_timeout+0x94>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
 8004b44:	e0bffe17 	ldw	r2,-8(fp)
 8004b48:	10c00917 	ldw	r3,36(r2)
 8004b4c:	00a00034 	movhi	r2,32768
 8004b50:	10bfff04 	addi	r2,r2,-4
 8004b54:	10c00536 	bltu	r2,r3,8004b6c <altera_avalon_jtag_uart_timeout+0x94>
    sp->host_inactive++;
 8004b58:	e0bffe17 	ldw	r2,-8(fp)
 8004b5c:	10800917 	ldw	r2,36(r2)
 8004b60:	10c00044 	addi	r3,r2,1
 8004b64:	e0bffe17 	ldw	r2,-8(fp)
 8004b68:	10c00915 	stw	r3,36(r2)
 8004b6c:	00820074 	movhi	r2,2049
 8004b70:	10ab0804 	addi	r2,r2,-21472
 8004b74:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
 8004b78:	e037883a 	mov	sp,fp
 8004b7c:	df000017 	ldw	fp,0(sp)
 8004b80:	dec00104 	addi	sp,sp,4
 8004b84:	f800283a 	ret

08004b88 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
 8004b88:	defffc04 	addi	sp,sp,-16
 8004b8c:	df000315 	stw	fp,12(sp)
 8004b90:	df000304 	addi	fp,sp,12
 8004b94:	e13ffd15 	stw	r4,-12(fp)
 8004b98:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 8004b9c:	00000706 	br	8004bbc <altera_avalon_jtag_uart_close+0x34>
    if (flags & O_NONBLOCK) {
 8004ba0:	e0bffe17 	ldw	r2,-8(fp)
 8004ba4:	1090000c 	andi	r2,r2,16384
 8004ba8:	1005003a 	cmpeq	r2,r2,zero
 8004bac:	1000031e 	bne	r2,zero,8004bbc <altera_avalon_jtag_uart_close+0x34>
      return -EWOULDBLOCK; 
 8004bb0:	00bffd44 	movi	r2,-11
 8004bb4:	e0bfff15 	stw	r2,-4(fp)
 8004bb8:	00000b06 	br	8004be8 <altera_avalon_jtag_uart_close+0x60>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 8004bbc:	e0bffd17 	ldw	r2,-12(fp)
 8004bc0:	10c00d17 	ldw	r3,52(r2)
 8004bc4:	e0bffd17 	ldw	r2,-12(fp)
 8004bc8:	10800c17 	ldw	r2,48(r2)
 8004bcc:	18800526 	beq	r3,r2,8004be4 <altera_avalon_jtag_uart_close+0x5c>
 8004bd0:	e0bffd17 	ldw	r2,-12(fp)
 8004bd4:	10c00917 	ldw	r3,36(r2)
 8004bd8:	e0bffd17 	ldw	r2,-12(fp)
 8004bdc:	10800117 	ldw	r2,4(r2)
 8004be0:	18bfef36 	bltu	r3,r2,8004ba0 <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
 8004be4:	e03fff15 	stw	zero,-4(fp)
 8004be8:	e0bfff17 	ldw	r2,-4(fp)
}
 8004bec:	e037883a 	mov	sp,fp
 8004bf0:	df000017 	ldw	fp,0(sp)
 8004bf4:	dec00104 	addi	sp,sp,4
 8004bf8:	f800283a 	ret

08004bfc <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
 8004bfc:	defff804 	addi	sp,sp,-32
 8004c00:	df000715 	stw	fp,28(sp)
 8004c04:	df000704 	addi	fp,sp,28
 8004c08:	e13ffb15 	stw	r4,-20(fp)
 8004c0c:	e17ffc15 	stw	r5,-16(fp)
 8004c10:	e1bffd15 	stw	r6,-12(fp)
  int rc = -ENOTTY;
 8004c14:	00bff9c4 	movi	r2,-25
 8004c18:	e0bffa15 	stw	r2,-24(fp)

  switch (req)
 8004c1c:	e0bffc17 	ldw	r2,-16(fp)
 8004c20:	e0bfff15 	stw	r2,-4(fp)
 8004c24:	e0ffff17 	ldw	r3,-4(fp)
 8004c28:	189a8060 	cmpeqi	r2,r3,27137
 8004c2c:	1000041e 	bne	r2,zero,8004c40 <altera_avalon_jtag_uart_ioctl+0x44>
 8004c30:	e0ffff17 	ldw	r3,-4(fp)
 8004c34:	189a80a0 	cmpeqi	r2,r3,27138
 8004c38:	10001b1e 	bne	r2,zero,8004ca8 <altera_avalon_jtag_uart_ioctl+0xac>
 8004c3c:	00002706 	br	8004cdc <altera_avalon_jtag_uart_ioctl+0xe0>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
 8004c40:	e0bffb17 	ldw	r2,-20(fp)
 8004c44:	10c00117 	ldw	r3,4(r2)
 8004c48:	00a00034 	movhi	r2,32768
 8004c4c:	10bfffc4 	addi	r2,r2,-1
 8004c50:	18802226 	beq	r3,r2,8004cdc <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
 8004c54:	e0bffd17 	ldw	r2,-12(fp)
 8004c58:	10800017 	ldw	r2,0(r2)
 8004c5c:	e0bff915 	stw	r2,-28(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
 8004c60:	e0bff917 	ldw	r2,-28(fp)
 8004c64:	10800090 	cmplti	r2,r2,2
 8004c68:	1000071e 	bne	r2,zero,8004c88 <altera_avalon_jtag_uart_ioctl+0x8c>
 8004c6c:	e0fff917 	ldw	r3,-28(fp)
 8004c70:	00a00034 	movhi	r2,32768
 8004c74:	10bfffc4 	addi	r2,r2,-1
 8004c78:	18800326 	beq	r3,r2,8004c88 <altera_avalon_jtag_uart_ioctl+0x8c>
 8004c7c:	e0bff917 	ldw	r2,-28(fp)
 8004c80:	e0bffe15 	stw	r2,-8(fp)
 8004c84:	00000306 	br	8004c94 <altera_avalon_jtag_uart_ioctl+0x98>
 8004c88:	00e00034 	movhi	r3,32768
 8004c8c:	18ffff84 	addi	r3,r3,-2
 8004c90:	e0fffe15 	stw	r3,-8(fp)
 8004c94:	e0bffb17 	ldw	r2,-20(fp)
 8004c98:	e0fffe17 	ldw	r3,-8(fp)
 8004c9c:	10c00115 	stw	r3,4(r2)
      rc = 0;
 8004ca0:	e03ffa15 	stw	zero,-24(fp)
    }
    break;
 8004ca4:	00000d06 	br	8004cdc <altera_avalon_jtag_uart_ioctl+0xe0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
 8004ca8:	e0bffb17 	ldw	r2,-20(fp)
 8004cac:	10c00117 	ldw	r3,4(r2)
 8004cb0:	00a00034 	movhi	r2,32768
 8004cb4:	10bfffc4 	addi	r2,r2,-1
 8004cb8:	18800826 	beq	r3,r2,8004cdc <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
 8004cbc:	e13ffd17 	ldw	r4,-12(fp)
 8004cc0:	e0bffb17 	ldw	r2,-20(fp)
 8004cc4:	10c00917 	ldw	r3,36(r2)
 8004cc8:	e0bffb17 	ldw	r2,-20(fp)
 8004ccc:	10800117 	ldw	r2,4(r2)
 8004cd0:	1885803a 	cmpltu	r2,r3,r2
 8004cd4:	20800015 	stw	r2,0(r4)
      rc = 0;
 8004cd8:	e03ffa15 	stw	zero,-24(fp)

  default:
    break;
  }

  return rc;
 8004cdc:	e0bffa17 	ldw	r2,-24(fp)
}
 8004ce0:	e037883a 	mov	sp,fp
 8004ce4:	df000017 	ldw	fp,0(sp)
 8004ce8:	dec00104 	addi	sp,sp,4
 8004cec:	f800283a 	ret

08004cf0 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
 8004cf0:	defff204 	addi	sp,sp,-56
 8004cf4:	dfc00d15 	stw	ra,52(sp)
 8004cf8:	df000c15 	stw	fp,48(sp)
 8004cfc:	df000c04 	addi	fp,sp,48
 8004d00:	e13ffb15 	stw	r4,-20(fp)
 8004d04:	e17ffc15 	stw	r5,-16(fp)
 8004d08:	e1bffd15 	stw	r6,-12(fp)
 8004d0c:	e1fffe15 	stw	r7,-8(fp)
  char * ptr = buffer;
 8004d10:	e0bffc17 	ldw	r2,-16(fp)
 8004d14:	e0bffa15 	stw	r2,-24(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 8004d18:	00004806 	br	8004e3c <altera_avalon_jtag_uart_read+0x14c>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
 8004d1c:	e0bffb17 	ldw	r2,-20(fp)
 8004d20:	10800a17 	ldw	r2,40(r2)
 8004d24:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
 8004d28:	e0bffb17 	ldw	r2,-20(fp)
 8004d2c:	10800b17 	ldw	r2,44(r2)
 8004d30:	e0bff615 	stw	r2,-40(fp)

      if (in >= out)
 8004d34:	e0fff717 	ldw	r3,-36(fp)
 8004d38:	e0bff617 	ldw	r2,-40(fp)
 8004d3c:	18800536 	bltu	r3,r2,8004d54 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
 8004d40:	e0bff717 	ldw	r2,-36(fp)
 8004d44:	e0fff617 	ldw	r3,-40(fp)
 8004d48:	10c5c83a 	sub	r2,r2,r3
 8004d4c:	e0bff815 	stw	r2,-32(fp)
 8004d50:	00000406 	br	8004d64 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
 8004d54:	00820004 	movi	r2,2048
 8004d58:	e0fff617 	ldw	r3,-40(fp)
 8004d5c:	10c5c83a 	sub	r2,r2,r3
 8004d60:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
 8004d64:	e0bff817 	ldw	r2,-32(fp)
 8004d68:	1005003a 	cmpeq	r2,r2,zero
 8004d6c:	10001f1e 	bne	r2,zero,8004dec <altera_avalon_jtag_uart_read+0xfc>
        break; /* No more data available */

      if (n > space)
 8004d70:	e0fffd17 	ldw	r3,-12(fp)
 8004d74:	e0bff817 	ldw	r2,-32(fp)
 8004d78:	1880022e 	bgeu	r3,r2,8004d84 <altera_avalon_jtag_uart_read+0x94>
        n = space;
 8004d7c:	e0bffd17 	ldw	r2,-12(fp)
 8004d80:	e0bff815 	stw	r2,-32(fp)

      memcpy(ptr, sp->rx_buf + out, n);
 8004d84:	e0bffb17 	ldw	r2,-20(fp)
 8004d88:	10c00e04 	addi	r3,r2,56
 8004d8c:	e0bff617 	ldw	r2,-40(fp)
 8004d90:	1887883a 	add	r3,r3,r2
 8004d94:	e0bffa17 	ldw	r2,-24(fp)
 8004d98:	1009883a 	mov	r4,r2
 8004d9c:	180b883a 	mov	r5,r3
 8004da0:	e1bff817 	ldw	r6,-32(fp)
 8004da4:	80078980 	call	8007898 <memcpy>
      ptr   += n;
 8004da8:	e0fff817 	ldw	r3,-32(fp)
 8004dac:	e0bffa17 	ldw	r2,-24(fp)
 8004db0:	10c5883a 	add	r2,r2,r3
 8004db4:	e0bffa15 	stw	r2,-24(fp)
      space -= n;
 8004db8:	e0fffd17 	ldw	r3,-12(fp)
 8004dbc:	e0bff817 	ldw	r2,-32(fp)
 8004dc0:	1885c83a 	sub	r2,r3,r2
 8004dc4:	e0bffd15 	stw	r2,-12(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 8004dc8:	e0fff617 	ldw	r3,-40(fp)
 8004dcc:	e0bff817 	ldw	r2,-32(fp)
 8004dd0:	1885883a 	add	r2,r3,r2
 8004dd4:	10c1ffcc 	andi	r3,r2,2047
 8004dd8:	e0bffb17 	ldw	r2,-20(fp)
 8004ddc:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
 8004de0:	e0bffd17 	ldw	r2,-12(fp)
 8004de4:	10800048 	cmpgei	r2,r2,1
 8004de8:	103fcc1e 	bne	r2,zero,8004d1c <altera_avalon_jtag_uart_read+0x2c>

    /* If we read any data then return it */
    if (ptr != buffer)
 8004dec:	e0fffa17 	ldw	r3,-24(fp)
 8004df0:	e0bffc17 	ldw	r2,-16(fp)
 8004df4:	1880141e 	bne	r3,r2,8004e48 <altera_avalon_jtag_uart_read+0x158>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
 8004df8:	e0bffe17 	ldw	r2,-8(fp)
 8004dfc:	1090000c 	andi	r2,r2,16384
 8004e00:	1004c03a 	cmpne	r2,r2,zero
 8004e04:	1000101e 	bne	r2,zero,8004e48 <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
 8004e08:	e0bffb17 	ldw	r2,-20(fp)
 8004e0c:	10c00a17 	ldw	r3,40(r2)
 8004e10:	e0bff717 	ldw	r2,-36(fp)
 8004e14:	1880051e 	bne	r3,r2,8004e2c <altera_avalon_jtag_uart_read+0x13c>
 8004e18:	e0bffb17 	ldw	r2,-20(fp)
 8004e1c:	10c00917 	ldw	r3,36(r2)
 8004e20:	e0bffb17 	ldw	r2,-20(fp)
 8004e24:	10800117 	ldw	r2,4(r2)
 8004e28:	18bff736 	bltu	r3,r2,8004e08 <altera_avalon_jtag_uart_read+0x118>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
 8004e2c:	e0bffb17 	ldw	r2,-20(fp)
 8004e30:	10c00a17 	ldw	r3,40(r2)
 8004e34:	e0bff717 	ldw	r2,-36(fp)
 8004e38:	18800326 	beq	r3,r2,8004e48 <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 8004e3c:	e0bffd17 	ldw	r2,-12(fp)
 8004e40:	10800048 	cmpgei	r2,r2,1
 8004e44:	103fb51e 	bne	r2,zero,8004d1c <altera_avalon_jtag_uart_read+0x2c>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
 8004e48:	e0fffa17 	ldw	r3,-24(fp)
 8004e4c:	e0bffc17 	ldw	r2,-16(fp)
 8004e50:	18801926 	beq	r3,r2,8004eb8 <altera_avalon_jtag_uart_read+0x1c8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8004e54:	0005303a 	rdctl	r2,status
 8004e58:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8004e5c:	e0fff517 	ldw	r3,-44(fp)
 8004e60:	00bfff84 	movi	r2,-2
 8004e64:	1884703a 	and	r2,r3,r2
 8004e68:	1001703a 	wrctl	status,r2
  
  return context;
 8004e6c:	e0bff517 	ldw	r2,-44(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
 8004e70:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 8004e74:	e0bffb17 	ldw	r2,-20(fp)
 8004e78:	10800817 	ldw	r2,32(r2)
 8004e7c:	10c00054 	ori	r3,r2,1
 8004e80:	e0bffb17 	ldw	r2,-20(fp)
 8004e84:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 8004e88:	e0bffb17 	ldw	r2,-20(fp)
 8004e8c:	10800017 	ldw	r2,0(r2)
 8004e90:	11000104 	addi	r4,r2,4
 8004e94:	e0bffb17 	ldw	r2,-20(fp)
 8004e98:	10800817 	ldw	r2,32(r2)
 8004e9c:	1007883a 	mov	r3,r2
 8004ea0:	2005883a 	mov	r2,r4
 8004ea4:	10c00035 	stwio	r3,0(r2)
 8004ea8:	e0bff917 	ldw	r2,-28(fp)
 8004eac:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8004eb0:	e0bff417 	ldw	r2,-48(fp)
 8004eb4:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
 8004eb8:	e0fffa17 	ldw	r3,-24(fp)
 8004ebc:	e0bffc17 	ldw	r2,-16(fp)
 8004ec0:	18800526 	beq	r3,r2,8004ed8 <altera_avalon_jtag_uart_read+0x1e8>
    return ptr - buffer;
 8004ec4:	e0fffa17 	ldw	r3,-24(fp)
 8004ec8:	e0bffc17 	ldw	r2,-16(fp)
 8004ecc:	1887c83a 	sub	r3,r3,r2
 8004ed0:	e0ffff15 	stw	r3,-4(fp)
 8004ed4:	00000906 	br	8004efc <altera_avalon_jtag_uart_read+0x20c>
  else if (flags & O_NONBLOCK)
 8004ed8:	e0bffe17 	ldw	r2,-8(fp)
 8004edc:	1090000c 	andi	r2,r2,16384
 8004ee0:	1005003a 	cmpeq	r2,r2,zero
 8004ee4:	1000031e 	bne	r2,zero,8004ef4 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
 8004ee8:	00bffd44 	movi	r2,-11
 8004eec:	e0bfff15 	stw	r2,-4(fp)
 8004ef0:	00000206 	br	8004efc <altera_avalon_jtag_uart_read+0x20c>
  else
    return -EIO;
 8004ef4:	00bffec4 	movi	r2,-5
 8004ef8:	e0bfff15 	stw	r2,-4(fp)
 8004efc:	e0bfff17 	ldw	r2,-4(fp)
}
 8004f00:	e037883a 	mov	sp,fp
 8004f04:	dfc00117 	ldw	ra,4(sp)
 8004f08:	df000017 	ldw	fp,0(sp)
 8004f0c:	dec00204 	addi	sp,sp,8
 8004f10:	f800283a 	ret

08004f14 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 8004f14:	defff204 	addi	sp,sp,-56
 8004f18:	dfc00d15 	stw	ra,52(sp)
 8004f1c:	df000c15 	stw	fp,48(sp)
 8004f20:	df000c04 	addi	fp,sp,48
 8004f24:	e13ffb15 	stw	r4,-20(fp)
 8004f28:	e17ffc15 	stw	r5,-16(fp)
 8004f2c:	e1bffd15 	stw	r6,-12(fp)
 8004f30:	e1fffe15 	stw	r7,-8(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
 8004f34:	e03ff915 	stw	zero,-28(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
 8004f38:	e0bffc17 	ldw	r2,-16(fp)
 8004f3c:	e0bff615 	stw	r2,-40(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 8004f40:	00003a06 	br	800502c <altera_avalon_jtag_uart_write+0x118>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
 8004f44:	e0bffb17 	ldw	r2,-20(fp)
 8004f48:	10800c17 	ldw	r2,48(r2)
 8004f4c:	e0bffa15 	stw	r2,-24(fp)
      out = sp->tx_out;
 8004f50:	e0bffb17 	ldw	r2,-20(fp)
 8004f54:	10800d17 	ldw	r2,52(r2)
 8004f58:	e0bff915 	stw	r2,-28(fp)

      if (in < out)
 8004f5c:	e0fffa17 	ldw	r3,-24(fp)
 8004f60:	e0bff917 	ldw	r2,-28(fp)
 8004f64:	1880062e 	bgeu	r3,r2,8004f80 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
 8004f68:	e0fff917 	ldw	r3,-28(fp)
 8004f6c:	e0bffa17 	ldw	r2,-24(fp)
 8004f70:	1885c83a 	sub	r2,r3,r2
 8004f74:	10bfffc4 	addi	r2,r2,-1
 8004f78:	e0bff815 	stw	r2,-32(fp)
 8004f7c:	00000c06 	br	8004fb0 <altera_avalon_jtag_uart_write+0x9c>
      else if (out > 0)
 8004f80:	e0bff917 	ldw	r2,-28(fp)
 8004f84:	1005003a 	cmpeq	r2,r2,zero
 8004f88:	1000051e 	bne	r2,zero,8004fa0 <altera_avalon_jtag_uart_write+0x8c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
 8004f8c:	00820004 	movi	r2,2048
 8004f90:	e0fffa17 	ldw	r3,-24(fp)
 8004f94:	10c5c83a 	sub	r2,r2,r3
 8004f98:	e0bff815 	stw	r2,-32(fp)
 8004f9c:	00000406 	br	8004fb0 <altera_avalon_jtag_uart_write+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
 8004fa0:	0081ffc4 	movi	r2,2047
 8004fa4:	e0fffa17 	ldw	r3,-24(fp)
 8004fa8:	10c5c83a 	sub	r2,r2,r3
 8004fac:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
 8004fb0:	e0bff817 	ldw	r2,-32(fp)
 8004fb4:	1005003a 	cmpeq	r2,r2,zero
 8004fb8:	10001f1e 	bne	r2,zero,8005038 <altera_avalon_jtag_uart_write+0x124>
        break;

      if (n > count)
 8004fbc:	e0fffd17 	ldw	r3,-12(fp)
 8004fc0:	e0bff817 	ldw	r2,-32(fp)
 8004fc4:	1880022e 	bgeu	r3,r2,8004fd0 <altera_avalon_jtag_uart_write+0xbc>
        n = count;
 8004fc8:	e0bffd17 	ldw	r2,-12(fp)
 8004fcc:	e0bff815 	stw	r2,-32(fp)

      memcpy(sp->tx_buf + in, ptr, n);
 8004fd0:	e0bffb17 	ldw	r2,-20(fp)
 8004fd4:	10c20e04 	addi	r3,r2,2104
 8004fd8:	e0bffa17 	ldw	r2,-24(fp)
 8004fdc:	1885883a 	add	r2,r3,r2
 8004fe0:	e0fffc17 	ldw	r3,-16(fp)
 8004fe4:	1009883a 	mov	r4,r2
 8004fe8:	180b883a 	mov	r5,r3
 8004fec:	e1bff817 	ldw	r6,-32(fp)
 8004ff0:	80078980 	call	8007898 <memcpy>
      ptr   += n;
 8004ff4:	e0fff817 	ldw	r3,-32(fp)
 8004ff8:	e0bffc17 	ldw	r2,-16(fp)
 8004ffc:	10c5883a 	add	r2,r2,r3
 8005000:	e0bffc15 	stw	r2,-16(fp)
      count -= n;
 8005004:	e0fffd17 	ldw	r3,-12(fp)
 8005008:	e0bff817 	ldw	r2,-32(fp)
 800500c:	1885c83a 	sub	r2,r3,r2
 8005010:	e0bffd15 	stw	r2,-12(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 8005014:	e0fffa17 	ldw	r3,-24(fp)
 8005018:	e0bff817 	ldw	r2,-32(fp)
 800501c:	1885883a 	add	r2,r3,r2
 8005020:	10c1ffcc 	andi	r3,r2,2047
 8005024:	e0bffb17 	ldw	r2,-20(fp)
 8005028:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 800502c:	e0bffd17 	ldw	r2,-12(fp)
 8005030:	10800048 	cmpgei	r2,r2,1
 8005034:	103fc31e 	bne	r2,zero,8004f44 <altera_avalon_jtag_uart_write+0x30>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8005038:	0005303a 	rdctl	r2,status
 800503c:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8005040:	e0fff517 	ldw	r3,-44(fp)
 8005044:	00bfff84 	movi	r2,-2
 8005048:	1884703a 	and	r2,r3,r2
 800504c:	1001703a 	wrctl	status,r2
  
  return context;
 8005050:	e0bff517 	ldw	r2,-44(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
 8005054:	e0bff715 	stw	r2,-36(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 8005058:	e0bffb17 	ldw	r2,-20(fp)
 800505c:	10800817 	ldw	r2,32(r2)
 8005060:	10c00094 	ori	r3,r2,2
 8005064:	e0bffb17 	ldw	r2,-20(fp)
 8005068:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 800506c:	e0bffb17 	ldw	r2,-20(fp)
 8005070:	10800017 	ldw	r2,0(r2)
 8005074:	11000104 	addi	r4,r2,4
 8005078:	e0bffb17 	ldw	r2,-20(fp)
 800507c:	10800817 	ldw	r2,32(r2)
 8005080:	1007883a 	mov	r3,r2
 8005084:	2005883a 	mov	r2,r4
 8005088:	10c00035 	stwio	r3,0(r2)
 800508c:	e0bff717 	ldw	r2,-36(fp)
 8005090:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8005094:	e0bff417 	ldw	r2,-48(fp)
 8005098:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
 800509c:	e0bffd17 	ldw	r2,-12(fp)
 80050a0:	10800050 	cmplti	r2,r2,1
 80050a4:	1000111e 	bne	r2,zero,80050ec <altera_avalon_jtag_uart_write+0x1d8>
    {
      if (flags & O_NONBLOCK)
 80050a8:	e0bffe17 	ldw	r2,-8(fp)
 80050ac:	1090000c 	andi	r2,r2,16384
 80050b0:	1004c03a 	cmpne	r2,r2,zero
 80050b4:	1000101e 	bne	r2,zero,80050f8 <altera_avalon_jtag_uart_write+0x1e4>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
 80050b8:	e0bffb17 	ldw	r2,-20(fp)
 80050bc:	10c00d17 	ldw	r3,52(r2)
 80050c0:	e0bff917 	ldw	r2,-28(fp)
 80050c4:	1880051e 	bne	r3,r2,80050dc <altera_avalon_jtag_uart_write+0x1c8>
 80050c8:	e0bffb17 	ldw	r2,-20(fp)
 80050cc:	10c00917 	ldw	r3,36(r2)
 80050d0:	e0bffb17 	ldw	r2,-20(fp)
 80050d4:	10800117 	ldw	r2,4(r2)
 80050d8:	18bff736 	bltu	r3,r2,80050b8 <altera_avalon_jtag_uart_write+0x1a4>
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
 80050dc:	e0bffb17 	ldw	r2,-20(fp)
 80050e0:	10c00d17 	ldw	r3,52(r2)
 80050e4:	e0bff917 	ldw	r2,-28(fp)
 80050e8:	18800326 	beq	r3,r2,80050f8 <altera_avalon_jtag_uart_write+0x1e4>
        break;
    }
  }
  while (count > 0);
 80050ec:	e0bffd17 	ldw	r2,-12(fp)
 80050f0:	10800048 	cmpgei	r2,r2,1
 80050f4:	103fcd1e 	bne	r2,zero,800502c <altera_avalon_jtag_uart_write+0x118>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
 80050f8:	e0fffc17 	ldw	r3,-16(fp)
 80050fc:	e0bff617 	ldw	r2,-40(fp)
 8005100:	18800526 	beq	r3,r2,8005118 <altera_avalon_jtag_uart_write+0x204>
    return ptr - start;
 8005104:	e0fffc17 	ldw	r3,-16(fp)
 8005108:	e0bff617 	ldw	r2,-40(fp)
 800510c:	1887c83a 	sub	r3,r3,r2
 8005110:	e0ffff15 	stw	r3,-4(fp)
 8005114:	00000906 	br	800513c <altera_avalon_jtag_uart_write+0x228>
  else if (flags & O_NONBLOCK)
 8005118:	e0bffe17 	ldw	r2,-8(fp)
 800511c:	1090000c 	andi	r2,r2,16384
 8005120:	1005003a 	cmpeq	r2,r2,zero
 8005124:	1000031e 	bne	r2,zero,8005134 <altera_avalon_jtag_uart_write+0x220>
    return -EWOULDBLOCK;
 8005128:	00bffd44 	movi	r2,-11
 800512c:	e0bfff15 	stw	r2,-4(fp)
 8005130:	00000206 	br	800513c <altera_avalon_jtag_uart_write+0x228>
  else
    return -EIO; /* Host not connected */
 8005134:	00bffec4 	movi	r2,-5
 8005138:	e0bfff15 	stw	r2,-4(fp)
 800513c:	e0bfff17 	ldw	r2,-4(fp)
}
 8005140:	e037883a 	mov	sp,fp
 8005144:	dfc00117 	ldw	ra,4(sp)
 8005148:	df000017 	ldw	fp,0(sp)
 800514c:	dec00204 	addi	sp,sp,8
 8005150:	f800283a 	ret

08005154 <alt_up_pixel_buffer_dma_open_dev>:

#include "altera_up_avalon_video_pixel_buffer_dma.h"

#define ABS(x)	((x >= 0) ? (x) : (-(x)))

alt_up_pixel_buffer_dma_dev* alt_up_pixel_buffer_dma_open_dev(const char* name) {
 8005154:	defffc04 	addi	sp,sp,-16
 8005158:	dfc00315 	stw	ra,12(sp)
 800515c:	df000215 	stw	fp,8(sp)
 8005160:	df000204 	addi	fp,sp,8
 8005164:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_pixel_buffer_dma_dev *dev = (alt_up_pixel_buffer_dma_dev*)alt_find_dev(name, &alt_dev_list);
 8005168:	e13fff17 	ldw	r4,-4(fp)
 800516c:	01420074 	movhi	r5,2049
 8005170:	29655504 	addi	r5,r5,-27308
 8005174:	8006bbc0 	call	8006bbc <alt_find_dev>
 8005178:	e0bffe15 	stw	r2,-8(fp)

  return dev;
 800517c:	e0bffe17 	ldw	r2,-8(fp)
}
 8005180:	e037883a 	mov	sp,fp
 8005184:	dfc00117 	ldw	ra,4(sp)
 8005188:	df000017 	ldw	fp,0(sp)
 800518c:	dec00204 	addi	sp,sp,8
 8005190:	f800283a 	ret

08005194 <alt_up_pixel_buffer_dma_draw>:

int alt_up_pixel_buffer_dma_draw(alt_up_pixel_buffer_dma_dev *pixel_buffer, unsigned int color, unsigned int x, unsigned int y)
/* This function draws a pixel to the back buffer.
 */
{
 8005194:	defff904 	addi	sp,sp,-28
 8005198:	df000615 	stw	fp,24(sp)
 800519c:	df000604 	addi	fp,sp,24
 80051a0:	e13ffb15 	stw	r4,-20(fp)
 80051a4:	e17ffc15 	stw	r5,-16(fp)
 80051a8:	e1bffd15 	stw	r6,-12(fp)
 80051ac:	e1fffe15 	stw	r7,-8(fp)
	// boundary check
	if (x >= pixel_buffer->x_resolution || y >= pixel_buffer->y_resolution )
 80051b0:	e0bffb17 	ldw	r2,-20(fp)
 80051b4:	10c00f17 	ldw	r3,60(r2)
 80051b8:	e0bffd17 	ldw	r2,-12(fp)
 80051bc:	10c0042e 	bgeu	r2,r3,80051d0 <alt_up_pixel_buffer_dma_draw+0x3c>
 80051c0:	e0bffb17 	ldw	r2,-20(fp)
 80051c4:	10c01017 	ldw	r3,64(r2)
 80051c8:	e0bffe17 	ldw	r2,-8(fp)
 80051cc:	10c00336 	bltu	r2,r3,80051dc <alt_up_pixel_buffer_dma_draw+0x48>
		return -1;
 80051d0:	00bfffc4 	movi	r2,-1
 80051d4:	e0bfff15 	stw	r2,-4(fp)
 80051d8:	00005106 	br	8005320 <alt_up_pixel_buffer_dma_draw+0x18c>

	unsigned int addr = 0;
 80051dc:	e03ffa15 	stw	zero,-24(fp)
	/* Check the mode VGA Pixel Buffer is using. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
 80051e0:	e0bffb17 	ldw	r2,-20(fp)
 80051e4:	10800d17 	ldw	r2,52(r2)
 80051e8:	1004c03a 	cmpne	r2,r2,zero
 80051ec:	1000151e 	bne	r2,zero,8005244 <alt_up_pixel_buffer_dma_draw+0xb0>
		/* For X-Y addressing mode, the address format is | unused | Y | X |. So shift bits for coordinates X and Y into their respective locations. */
		addr |= ((x & pixel_buffer->x_coord_mask) << pixel_buffer->x_coord_offset);
 80051f0:	e0bffb17 	ldw	r2,-20(fp)
 80051f4:	10c01217 	ldw	r3,72(r2)
 80051f8:	e0bffd17 	ldw	r2,-12(fp)
 80051fc:	1886703a 	and	r3,r3,r2
 8005200:	e0bffb17 	ldw	r2,-20(fp)
 8005204:	10801117 	ldw	r2,68(r2)
 8005208:	1886983a 	sll	r3,r3,r2
 800520c:	e0bffa17 	ldw	r2,-24(fp)
 8005210:	10c4b03a 	or	r2,r2,r3
 8005214:	e0bffa15 	stw	r2,-24(fp)
		addr |= ((y & pixel_buffer->y_coord_mask) << pixel_buffer->y_coord_offset);
 8005218:	e0bffb17 	ldw	r2,-20(fp)
 800521c:	10c01417 	ldw	r3,80(r2)
 8005220:	e0bffe17 	ldw	r2,-8(fp)
 8005224:	1886703a 	and	r3,r3,r2
 8005228:	e0bffb17 	ldw	r2,-20(fp)
 800522c:	10801317 	ldw	r2,76(r2)
 8005230:	1886983a 	sll	r3,r3,r2
 8005234:	e0bffa17 	ldw	r2,-24(fp)
 8005238:	10c4b03a 	or	r2,r2,r3
 800523c:	e0bffa15 	stw	r2,-24(fp)
 8005240:	00001706 	br	80052a0 <alt_up_pixel_buffer_dma_draw+0x10c>
	} else {
		/* In a consecutive addressing mode, the pixels are stored in consecutive memory locations. So the address of a pixel at (x,y) can be computed as
		 * (y*x_resolution + x).*/
		addr += ((x & pixel_buffer->x_coord_mask) << pixel_buffer->x_coord_offset);
 8005244:	e0bffb17 	ldw	r2,-20(fp)
 8005248:	10c01217 	ldw	r3,72(r2)
 800524c:	e0bffd17 	ldw	r2,-12(fp)
 8005250:	1886703a 	and	r3,r3,r2
 8005254:	e0bffb17 	ldw	r2,-20(fp)
 8005258:	10801117 	ldw	r2,68(r2)
 800525c:	1886983a 	sll	r3,r3,r2
 8005260:	e0bffa17 	ldw	r2,-24(fp)
 8005264:	10c5883a 	add	r2,r2,r3
 8005268:	e0bffa15 	stw	r2,-24(fp)
		addr += (((y & pixel_buffer->y_coord_mask) * pixel_buffer->x_resolution) << pixel_buffer->x_coord_offset);
 800526c:	e0bffb17 	ldw	r2,-20(fp)
 8005270:	10c01417 	ldw	r3,80(r2)
 8005274:	e0bffe17 	ldw	r2,-8(fp)
 8005278:	1886703a 	and	r3,r3,r2
 800527c:	e0bffb17 	ldw	r2,-20(fp)
 8005280:	10800f17 	ldw	r2,60(r2)
 8005284:	1887383a 	mul	r3,r3,r2
 8005288:	e0bffb17 	ldw	r2,-20(fp)
 800528c:	10801117 	ldw	r2,68(r2)
 8005290:	1886983a 	sll	r3,r3,r2
 8005294:	e0bffa17 	ldw	r2,-24(fp)
 8005298:	10c5883a 	add	r2,r2,r3
 800529c:	e0bffa15 	stw	r2,-24(fp)
	}
	/* Now, depending on the color depth, write the pixel color to the specified memory location. */
	if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
 80052a0:	e0bffb17 	ldw	r2,-20(fp)
 80052a4:	10800e17 	ldw	r2,56(r2)
 80052a8:	10800058 	cmpnei	r2,r2,1
 80052ac:	1000081e 	bne	r2,zero,80052d0 <alt_up_pixel_buffer_dma_draw+0x13c>
		IOWR_8DIRECT(pixel_buffer->back_buffer_start_address, addr, color);
 80052b0:	e0bffb17 	ldw	r2,-20(fp)
 80052b4:	10800c17 	ldw	r2,48(r2)
 80052b8:	1007883a 	mov	r3,r2
 80052bc:	e0bffa17 	ldw	r2,-24(fp)
 80052c0:	1885883a 	add	r2,r3,r2
 80052c4:	e0fffc17 	ldw	r3,-16(fp)
 80052c8:	10c00025 	stbio	r3,0(r2)
 80052cc:	00001306 	br	800531c <alt_up_pixel_buffer_dma_draw+0x188>
	} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
 80052d0:	e0bffb17 	ldw	r2,-20(fp)
 80052d4:	10800e17 	ldw	r2,56(r2)
 80052d8:	10800098 	cmpnei	r2,r2,2
 80052dc:	1000081e 	bne	r2,zero,8005300 <alt_up_pixel_buffer_dma_draw+0x16c>
		IOWR_16DIRECT(pixel_buffer->back_buffer_start_address, addr, color);
 80052e0:	e0bffb17 	ldw	r2,-20(fp)
 80052e4:	10800c17 	ldw	r2,48(r2)
 80052e8:	1007883a 	mov	r3,r2
 80052ec:	e0bffa17 	ldw	r2,-24(fp)
 80052f0:	1885883a 	add	r2,r3,r2
 80052f4:	e0fffc17 	ldw	r3,-16(fp)
 80052f8:	10c0002d 	sthio	r3,0(r2)
 80052fc:	00000706 	br	800531c <alt_up_pixel_buffer_dma_draw+0x188>
	} else {
		IOWR_32DIRECT(pixel_buffer->back_buffer_start_address, addr, color);
 8005300:	e0bffb17 	ldw	r2,-20(fp)
 8005304:	10800c17 	ldw	r2,48(r2)
 8005308:	1007883a 	mov	r3,r2
 800530c:	e0bffa17 	ldw	r2,-24(fp)
 8005310:	1885883a 	add	r2,r3,r2
 8005314:	e0fffc17 	ldw	r3,-16(fp)
 8005318:	10c00035 	stwio	r3,0(r2)
	}

	return 0;
 800531c:	e03fff15 	stw	zero,-4(fp)
 8005320:	e0bfff17 	ldw	r2,-4(fp)
}
 8005324:	e037883a 	mov	sp,fp
 8005328:	df000017 	ldw	fp,0(sp)
 800532c:	dec00104 	addi	sp,sp,4
 8005330:	f800283a 	ret

08005334 <alt_up_pixel_buffer_dma_change_back_buffer_address>:

int alt_up_pixel_buffer_dma_change_back_buffer_address(alt_up_pixel_buffer_dma_dev *pixel_buffer, unsigned int new_address)
/* This function changes the memory address for the back buffer. */
{
 8005334:	defffd04 	addi	sp,sp,-12
 8005338:	df000215 	stw	fp,8(sp)
 800533c:	df000204 	addi	fp,sp,8
 8005340:	e13ffe15 	stw	r4,-8(fp)
 8005344:	e17fff15 	stw	r5,-4(fp)
	IOWR_32DIRECT(pixel_buffer->base, 4, new_address);
 8005348:	e0bffe17 	ldw	r2,-8(fp)
 800534c:	10800a17 	ldw	r2,40(r2)
 8005350:	10800104 	addi	r2,r2,4
 8005354:	e0ffff17 	ldw	r3,-4(fp)
 8005358:	10c00035 	stwio	r3,0(r2)
	pixel_buffer->back_buffer_start_address = IORD_32DIRECT(pixel_buffer->base, 4);
 800535c:	e0bffe17 	ldw	r2,-8(fp)
 8005360:	10800a17 	ldw	r2,40(r2)
 8005364:	10800104 	addi	r2,r2,4
 8005368:	10800037 	ldwio	r2,0(r2)
 800536c:	1007883a 	mov	r3,r2
 8005370:	e0bffe17 	ldw	r2,-8(fp)
 8005374:	10c00c15 	stw	r3,48(r2)
	return 0;
 8005378:	0005883a 	mov	r2,zero
}
 800537c:	e037883a 	mov	sp,fp
 8005380:	df000017 	ldw	fp,0(sp)
 8005384:	dec00104 	addi	sp,sp,4
 8005388:	f800283a 	ret

0800538c <alt_up_pixel_buffer_dma_swap_buffers>:

int alt_up_pixel_buffer_dma_swap_buffers(alt_up_pixel_buffer_dma_dev *pixel_buffer)
/* This function swaps the front and back buffers. At the next refresh cycle the back buffer will be drawn on the screen
 * and will become the front buffer. */
{
 800538c:	defffe04 	addi	sp,sp,-8
 8005390:	df000115 	stw	fp,4(sp)
 8005394:	df000104 	addi	fp,sp,4
 8005398:	e13fff15 	stw	r4,-4(fp)
	register unsigned int temp = pixel_buffer->back_buffer_start_address;
 800539c:	e0bfff17 	ldw	r2,-4(fp)
 80053a0:	11000c17 	ldw	r4,48(r2)
	IOWR_32DIRECT(pixel_buffer->base, 0, 1);
 80053a4:	e0bfff17 	ldw	r2,-4(fp)
 80053a8:	10800a17 	ldw	r2,40(r2)
 80053ac:	1007883a 	mov	r3,r2
 80053b0:	00800044 	movi	r2,1
 80053b4:	18800035 	stwio	r2,0(r3)
	pixel_buffer->back_buffer_start_address = pixel_buffer->buffer_start_address;
 80053b8:	e0bfff17 	ldw	r2,-4(fp)
 80053bc:	10c00b17 	ldw	r3,44(r2)
 80053c0:	e0bfff17 	ldw	r2,-4(fp)
 80053c4:	10c00c15 	stw	r3,48(r2)
	pixel_buffer->buffer_start_address = temp;
 80053c8:	e0bfff17 	ldw	r2,-4(fp)
 80053cc:	11000b15 	stw	r4,44(r2)
	return 0;
 80053d0:	0005883a 	mov	r2,zero
}
 80053d4:	e037883a 	mov	sp,fp
 80053d8:	df000017 	ldw	fp,0(sp)
 80053dc:	dec00104 	addi	sp,sp,4
 80053e0:	f800283a 	ret

080053e4 <alt_up_pixel_buffer_dma_check_swap_buffers_status>:
int alt_up_pixel_buffer_dma_check_swap_buffers_status(alt_up_pixel_buffer_dma_dev *pixel_buffer)
/* This function checks if the buffer swap has occured. Since the buffer swap only happens after an entire screen is drawn,
 * it is important to wait for this function to return 0 before proceeding to draw on either buffer. When both front and the back buffers
 * have the same address calling the alt_up_pixel_buffer_dma_swap_buffers(...) function and then waiting for this function to return 0, causes your program to
 * wait for the screen to refresh. */
{
 80053e4:	defffe04 	addi	sp,sp,-8
 80053e8:	df000115 	stw	fp,4(sp)
 80053ec:	df000104 	addi	fp,sp,4
 80053f0:	e13fff15 	stw	r4,-4(fp)
	return (IORD_32DIRECT(pixel_buffer->base, 12) & 0x1);
 80053f4:	e0bfff17 	ldw	r2,-4(fp)
 80053f8:	10800a17 	ldw	r2,40(r2)
 80053fc:	10800304 	addi	r2,r2,12
 8005400:	10800037 	ldwio	r2,0(r2)
 8005404:	1080004c 	andi	r2,r2,1
}
 8005408:	e037883a 	mov	sp,fp
 800540c:	df000017 	ldw	fp,0(sp)
 8005410:	dec00104 	addi	sp,sp,4
 8005414:	f800283a 	ret

08005418 <alt_up_pixel_buffer_dma_clear_screen>:

void alt_up_pixel_buffer_dma_clear_screen(alt_up_pixel_buffer_dma_dev *pixel_buffer, int backbuffer)
/* This function clears the screen by setting each pixel to a black color. */
{
 8005418:	defff604 	addi	sp,sp,-40
 800541c:	df000915 	stw	fp,36(sp)
 8005420:	df000904 	addi	fp,sp,36
 8005424:	e13ff715 	stw	r4,-36(fp)
 8005428:	e17ff815 	stw	r5,-32(fp)
	register unsigned int addr;
	register unsigned int limit_x, limit_y;
	
	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
 800542c:	e0bff817 	ldw	r2,-32(fp)
 8005430:	10800058 	cmpnei	r2,r2,1
 8005434:	1000041e 	bne	r2,zero,8005448 <alt_up_pixel_buffer_dma_clear_screen+0x30>
		addr = pixel_buffer->back_buffer_start_address;
 8005438:	e0bff717 	ldw	r2,-36(fp)
 800543c:	10800c17 	ldw	r2,48(r2)
 8005440:	e0bfff15 	stw	r2,-4(fp)
 8005444:	00000306 	br	8005454 <alt_up_pixel_buffer_dma_clear_screen+0x3c>
	else
		addr = pixel_buffer->buffer_start_address;
 8005448:	e0bff717 	ldw	r2,-36(fp)
 800544c:	10800b17 	ldw	r2,44(r2)
 8005450:	e0bfff15 	stw	r2,-4(fp)
	limit_x = pixel_buffer->x_resolution;
 8005454:	e0bff717 	ldw	r2,-36(fp)
 8005458:	10800f17 	ldw	r2,60(r2)
 800545c:	e0bffe15 	stw	r2,-8(fp)
	/* In 16 and 32-bit color modes we use twice or four times more memory for the display buffer.*/
	if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
 8005460:	e0bff717 	ldw	r2,-36(fp)
 8005464:	10800e17 	ldw	r2,56(r2)
 8005468:	10800098 	cmpnei	r2,r2,2
 800546c:	1000051e 	bne	r2,zero,8005484 <alt_up_pixel_buffer_dma_clear_screen+0x6c>
		limit_x = limit_x << 1;
 8005470:	e0fffe17 	ldw	r3,-8(fp)
 8005474:	e0fffe17 	ldw	r3,-8(fp)
 8005478:	18c5883a 	add	r2,r3,r3
 800547c:	e0bffe15 	stw	r2,-8(fp)
 8005480:	00000506 	br	8005498 <alt_up_pixel_buffer_dma_clear_screen+0x80>
	} else {
		limit_x = limit_x << 2;
 8005484:	e13ffe17 	ldw	r4,-8(fp)
 8005488:	e13ffe17 	ldw	r4,-8(fp)
 800548c:	2105883a 	add	r2,r4,r4
 8005490:	1085883a 	add	r2,r2,r2
 8005494:	e0bffe15 	stw	r2,-8(fp)
	}	
	limit_y = pixel_buffer->y_resolution;
 8005498:	e0bff717 	ldw	r2,-36(fp)
 800549c:	10801017 	ldw	r2,64(r2)
 80054a0:	e0bffd15 	stw	r2,-12(fp)

	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
 80054a4:	e0bff717 	ldw	r2,-36(fp)
 80054a8:	10800d17 	ldw	r2,52(r2)
 80054ac:	1004c03a 	cmpne	r2,r2,zero
 80054b0:	10001e1e 	bne	r2,zero,800552c <alt_up_pixel_buffer_dma_clear_screen+0x114>
		/* Clear the screen when the VGA is set up in an XY addressing mode. */
		register unsigned int x,y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
 80054b4:	e0bff717 	ldw	r2,-36(fp)
 80054b8:	10801317 	ldw	r2,76(r2)
 80054bc:	e0bffa15 	stw	r2,-24(fp)

		for (y = 0; y < limit_y; y++)
 80054c0:	e03ffb15 	stw	zero,-20(fp)
 80054c4:	00001506 	br	800551c <alt_up_pixel_buffer_dma_clear_screen+0x104>
		{
			for (x = 0; x < limit_x; x = x + 4)
 80054c8:	e03ffc15 	stw	zero,-16(fp)
 80054cc:	00000706 	br	80054ec <alt_up_pixel_buffer_dma_clear_screen+0xd4>
			{
				IOWR_32DIRECT(addr, x, 0);
 80054d0:	e0ffff17 	ldw	r3,-4(fp)
 80054d4:	e0bffc17 	ldw	r2,-16(fp)
 80054d8:	1885883a 	add	r2,r3,r2
 80054dc:	10000035 	stwio	zero,0(r2)
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;

		for (y = 0; y < limit_y; y++)
		{
			for (x = 0; x < limit_x; x = x + 4)
 80054e0:	e0bffc17 	ldw	r2,-16(fp)
 80054e4:	10800104 	addi	r2,r2,4
 80054e8:	e0bffc15 	stw	r2,-16(fp)
 80054ec:	e0fffc17 	ldw	r3,-16(fp)
 80054f0:	e13ffe17 	ldw	r4,-8(fp)
 80054f4:	193ff636 	bltu	r3,r4,80054d0 <alt_up_pixel_buffer_dma_clear_screen+0xb8>
			{
				IOWR_32DIRECT(addr, x, 0);
			}
			addr = addr + (1 << offset_y);
 80054f8:	e0fffa17 	ldw	r3,-24(fp)
 80054fc:	00800044 	movi	r2,1
 8005500:	10c4983a 	sll	r2,r2,r3
 8005504:	e0ffff17 	ldw	r3,-4(fp)
 8005508:	1887883a 	add	r3,r3,r2
 800550c:	e0ffff15 	stw	r3,-4(fp)
		/* Clear the screen when the VGA is set up in an XY addressing mode. */
		register unsigned int x,y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;

		for (y = 0; y < limit_y; y++)
 8005510:	e13ffb17 	ldw	r4,-20(fp)
 8005514:	21000044 	addi	r4,r4,1
 8005518:	e13ffb15 	stw	r4,-20(fp)
 800551c:	e0bffb17 	ldw	r2,-20(fp)
 8005520:	e0fffd17 	ldw	r3,-12(fp)
 8005524:	10ffe836 	bltu	r2,r3,80054c8 <alt_up_pixel_buffer_dma_clear_screen+0xb0>
 8005528:	00001006 	br	800556c <alt_up_pixel_buffer_dma_clear_screen+0x154>
			addr = addr + (1 << offset_y);
		}
	} else {
		/* Clear the screen when the VGA is set up in a linear addressing mode. */
		register int x;
		limit_y = limit_x*limit_y;	
 800552c:	e13ffd17 	ldw	r4,-12(fp)
 8005530:	e0bffe17 	ldw	r2,-8(fp)
 8005534:	2089383a 	mul	r4,r4,r2
 8005538:	e13ffd15 	stw	r4,-12(fp)

		for (x = 0; x < limit_y; x = x + 4)
 800553c:	e03ff915 	stw	zero,-28(fp)
 8005540:	00000706 	br	8005560 <alt_up_pixel_buffer_dma_clear_screen+0x148>
		{
			IOWR_32DIRECT(addr, x, 0);
 8005544:	e0ffff17 	ldw	r3,-4(fp)
 8005548:	e0bff917 	ldw	r2,-28(fp)
 800554c:	1885883a 	add	r2,r3,r2
 8005550:	10000035 	stwio	zero,0(r2)
	} else {
		/* Clear the screen when the VGA is set up in a linear addressing mode. */
		register int x;
		limit_y = limit_x*limit_y;	

		for (x = 0; x < limit_y; x = x + 4)
 8005554:	e0fff917 	ldw	r3,-28(fp)
 8005558:	18c00104 	addi	r3,r3,4
 800555c:	e0fff915 	stw	r3,-28(fp)
 8005560:	e0bff917 	ldw	r2,-28(fp)
 8005564:	e13ffd17 	ldw	r4,-12(fp)
 8005568:	113ff636 	bltu	r2,r4,8005544 <alt_up_pixel_buffer_dma_clear_screen+0x12c>
		{
			IOWR_32DIRECT(addr, x, 0);
		}
	}
}
 800556c:	e037883a 	mov	sp,fp
 8005570:	df000017 	ldw	fp,0(sp)
 8005574:	dec00104 	addi	sp,sp,4
 8005578:	f800283a 	ret

0800557c <alt_up_pixel_buffer_dma_draw_box>:

void alt_up_pixel_buffer_dma_draw_box(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int y0, int x1, int y1, int color, int backbuffer)
/* This function draws a filled box. */
{
 800557c:	deffed04 	addi	sp,sp,-76
 8005580:	df001215 	stw	fp,72(sp)
 8005584:	df001204 	addi	fp,sp,72
 8005588:	e13fee15 	stw	r4,-72(fp)
 800558c:	e17fef15 	stw	r5,-68(fp)
 8005590:	e1bff015 	stw	r6,-64(fp)
 8005594:	e1fff115 	stw	r7,-60(fp)
	register unsigned int addr;
	register unsigned int limit_x = pixel_buffer->x_resolution;
 8005598:	e0bfee17 	ldw	r2,-72(fp)
 800559c:	10800f17 	ldw	r2,60(r2)
 80055a0:	e0bffe15 	stw	r2,-8(fp)
	register unsigned int limit_y = pixel_buffer->y_resolution;
 80055a4:	e0bfee17 	ldw	r2,-72(fp)
 80055a8:	10801017 	ldw	r2,64(r2)
 80055ac:	e0bffd15 	stw	r2,-12(fp)
	register unsigned int temp;
	register unsigned int l_x = x0;
 80055b0:	e0bfef17 	ldw	r2,-68(fp)
 80055b4:	e0bffb15 	stw	r2,-20(fp)
	register unsigned int r_x = x1;
 80055b8:	e0fff117 	ldw	r3,-60(fp)
 80055bc:	e0fffa15 	stw	r3,-24(fp)
	register unsigned int t_y = y0;
 80055c0:	e13ff017 	ldw	r4,-64(fp)
 80055c4:	e13ff915 	stw	r4,-28(fp)
	register unsigned int b_y = y1;
 80055c8:	e0800117 	ldw	r2,4(fp)
 80055cc:	e0bff815 	stw	r2,-32(fp)
	register unsigned int local_color = color;
 80055d0:	e0c00217 	ldw	r3,8(fp)
 80055d4:	e0fff715 	stw	r3,-36(fp)
	
	/* Check coordinates */
	if (l_x > r_x)
 80055d8:	e13ffa17 	ldw	r4,-24(fp)
 80055dc:	e0bffb17 	ldw	r2,-20(fp)
 80055e0:	2080062e 	bgeu	r4,r2,80055fc <alt_up_pixel_buffer_dma_draw_box+0x80>
	{
		temp = l_x;
 80055e4:	e0fffb17 	ldw	r3,-20(fp)
 80055e8:	e0fffc15 	stw	r3,-16(fp)
		l_x = r_x;
 80055ec:	e13ffa17 	ldw	r4,-24(fp)
 80055f0:	e13ffb15 	stw	r4,-20(fp)
		r_x = temp;
 80055f4:	e0bffc17 	ldw	r2,-16(fp)
 80055f8:	e0bffa15 	stw	r2,-24(fp)
	}
	if (t_y > b_y)
 80055fc:	e0fff817 	ldw	r3,-32(fp)
 8005600:	e13ff917 	ldw	r4,-28(fp)
 8005604:	1900062e 	bgeu	r3,r4,8005620 <alt_up_pixel_buffer_dma_draw_box+0xa4>
	{
		temp = t_y;
 8005608:	e0bff917 	ldw	r2,-28(fp)
 800560c:	e0bffc15 	stw	r2,-16(fp)
		t_y = b_y;
 8005610:	e0fff817 	ldw	r3,-32(fp)
 8005614:	e0fff915 	stw	r3,-28(fp)
		b_y = temp;
 8005618:	e13ffc17 	ldw	r4,-16(fp)
 800561c:	e13ff815 	stw	r4,-32(fp)
	}
	if ((l_x >= limit_x) || (t_y >= limit_y) || (r_x < 0) || (b_y < 0))
 8005620:	e0bffb17 	ldw	r2,-20(fp)
 8005624:	e0fffe17 	ldw	r3,-8(fp)
 8005628:	10c10d2e 	bgeu	r2,r3,8005a60 <alt_up_pixel_buffer_dma_draw_box+0x4e4>
 800562c:	e13ff917 	ldw	r4,-28(fp)
 8005630:	e0bffd17 	ldw	r2,-12(fp)
 8005634:	20800136 	bltu	r4,r2,800563c <alt_up_pixel_buffer_dma_draw_box+0xc0>
	{
		/* Drawing outside of the window, so don't bother. */
		return;
 8005638:	00010906 	br	8005a60 <alt_up_pixel_buffer_dma_draw_box+0x4e4>
	/* Clip the box and draw only within the confines of the screen. */
	if (l_x < 0)
	{
		l_x = 0;
	}
	if (r_x >= limit_x)
 800563c:	e0fffa17 	ldw	r3,-24(fp)
 8005640:	e13ffe17 	ldw	r4,-8(fp)
 8005644:	19000336 	bltu	r3,r4,8005654 <alt_up_pixel_buffer_dma_draw_box+0xd8>
	{
		r_x = limit_x - 1;
 8005648:	e0bffe17 	ldw	r2,-8(fp)
 800564c:	10bfffc4 	addi	r2,r2,-1
 8005650:	e0bffa15 	stw	r2,-24(fp)
	}
	if (t_y < 0)
	{
		t_y = 0;
	}
	if (b_y >= limit_y)
 8005654:	e0fff817 	ldw	r3,-32(fp)
 8005658:	e13ffd17 	ldw	r4,-12(fp)
 800565c:	19000336 	bltu	r3,r4,800566c <alt_up_pixel_buffer_dma_draw_box+0xf0>
	{
		b_y = limit_y - 1;
 8005660:	e0bffd17 	ldw	r2,-12(fp)
 8005664:	10bfffc4 	addi	r2,r2,-1
 8005668:	e0bff815 	stw	r2,-32(fp)
	}

	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
 800566c:	e0800317 	ldw	r2,12(fp)
 8005670:	10800058 	cmpnei	r2,r2,1
 8005674:	1000041e 	bne	r2,zero,8005688 <alt_up_pixel_buffer_dma_draw_box+0x10c>
		addr = pixel_buffer->back_buffer_start_address;
 8005678:	e0bfee17 	ldw	r2,-72(fp)
 800567c:	10800c17 	ldw	r2,48(r2)
 8005680:	e0bfff15 	stw	r2,-4(fp)
 8005684:	00000306 	br	8005694 <alt_up_pixel_buffer_dma_draw_box+0x118>
	else
		addr = pixel_buffer->buffer_start_address;
 8005688:	e0bfee17 	ldw	r2,-72(fp)
 800568c:	10800b17 	ldw	r2,44(r2)
 8005690:	e0bfff15 	stw	r2,-4(fp)

	/* Draw the box using one of the addressing modes. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
 8005694:	e0bfee17 	ldw	r2,-72(fp)
 8005698:	10800d17 	ldw	r2,52(r2)
 800569c:	1004c03a 	cmpne	r2,r2,zero
 80056a0:	1000721e 	bne	r2,zero,800586c <alt_up_pixel_buffer_dma_draw_box+0x2f0>
		/* Draw a box of a given color on the screen using the XY addressing mode. */
		register unsigned int x,y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
 80056a4:	e0bfee17 	ldw	r2,-72(fp)
 80056a8:	10801317 	ldw	r2,76(r2)
 80056ac:	e0bff415 	stw	r2,-48(fp)
		addr = addr + (t_y << offset_y);
 80056b0:	e0bff417 	ldw	r2,-48(fp)
 80056b4:	e0fff917 	ldw	r3,-28(fp)
 80056b8:	1884983a 	sll	r2,r3,r2
 80056bc:	e13fff17 	ldw	r4,-4(fp)
 80056c0:	2089883a 	add	r4,r4,r2
 80056c4:	e13fff15 	stw	r4,-4(fp)
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
 80056c8:	e0bfee17 	ldw	r2,-72(fp)
 80056cc:	10800e17 	ldw	r2,56(r2)
 80056d0:	10800058 	cmpnei	r2,r2,1
 80056d4:	10001e1e 	bne	r2,zero,8005750 <alt_up_pixel_buffer_dma_draw_box+0x1d4>
			for (y = t_y; y <= b_y; y++)
 80056d8:	e0bff917 	ldw	r2,-28(fp)
 80056dc:	e0bff515 	stw	r2,-44(fp)
 80056e0:	00001706 	br	8005740 <alt_up_pixel_buffer_dma_draw_box+0x1c4>
			{
				for (x = l_x; x <= r_x; x++)
 80056e4:	e0fffb17 	ldw	r3,-20(fp)
 80056e8:	e0fff615 	stw	r3,-40(fp)
 80056ec:	00000806 	br	8005710 <alt_up_pixel_buffer_dma_draw_box+0x194>
				{
					IOWR_8DIRECT(addr, x, local_color);
 80056f0:	e0ffff17 	ldw	r3,-4(fp)
 80056f4:	e0bff617 	ldw	r2,-40(fp)
 80056f8:	1885883a 	add	r2,r3,r2
 80056fc:	e0fff717 	ldw	r3,-36(fp)
 8005700:	10c00025 	stbio	r3,0(r2)
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
 8005704:	e13ff617 	ldw	r4,-40(fp)
 8005708:	21000044 	addi	r4,r4,1
 800570c:	e13ff615 	stw	r4,-40(fp)
 8005710:	e0bffa17 	ldw	r2,-24(fp)
 8005714:	e0fff617 	ldw	r3,-40(fp)
 8005718:	10fff52e 	bgeu	r2,r3,80056f0 <alt_up_pixel_buffer_dma_draw_box+0x174>
				{
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + (1 << offset_y);
 800571c:	e0fff417 	ldw	r3,-48(fp)
 8005720:	00800044 	movi	r2,1
 8005724:	10c4983a 	sll	r2,r2,r3
 8005728:	e13fff17 	ldw	r4,-4(fp)
 800572c:	2089883a 	add	r4,r4,r2
 8005730:	e13fff15 	stw	r4,-4(fp)
		addr = addr + (t_y << offset_y);
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
 8005734:	e0bff517 	ldw	r2,-44(fp)
 8005738:	10800044 	addi	r2,r2,1
 800573c:	e0bff515 	stw	r2,-44(fp)
 8005740:	e0fff817 	ldw	r3,-32(fp)
 8005744:	e13ff517 	ldw	r4,-44(fp)
 8005748:	193fe62e 	bgeu	r3,r4,80056e4 <alt_up_pixel_buffer_dma_draw_box+0x168>
 800574c:	0000c406 	br	8005a60 <alt_up_pixel_buffer_dma_draw_box+0x4e4>
				{
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
 8005750:	e0bfee17 	ldw	r2,-72(fp)
 8005754:	10800e17 	ldw	r2,56(r2)
 8005758:	10800098 	cmpnei	r2,r2,2
 800575c:	1000211e 	bne	r2,zero,80057e4 <alt_up_pixel_buffer_dma_draw_box+0x268>
			for (y = t_y; y <= b_y; y++)
 8005760:	e0bff917 	ldw	r2,-28(fp)
 8005764:	e0bff515 	stw	r2,-44(fp)
 8005768:	00001a06 	br	80057d4 <alt_up_pixel_buffer_dma_draw_box+0x258>
			{
				for (x = l_x; x <= r_x; x++)
 800576c:	e0fffb17 	ldw	r3,-20(fp)
 8005770:	e0fff615 	stw	r3,-40(fp)
 8005774:	00000b06 	br	80057a4 <alt_up_pixel_buffer_dma_draw_box+0x228>
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
 8005778:	e13ff617 	ldw	r4,-40(fp)
 800577c:	e13ff617 	ldw	r4,-40(fp)
 8005780:	2105883a 	add	r2,r4,r4
 8005784:	1007883a 	mov	r3,r2
 8005788:	e0bfff17 	ldw	r2,-4(fp)
 800578c:	1885883a 	add	r2,r3,r2
 8005790:	e0fff717 	ldw	r3,-36(fp)
 8005794:	10c0002d 	sthio	r3,0(r2)
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
 8005798:	e0bff617 	ldw	r2,-40(fp)
 800579c:	10800044 	addi	r2,r2,1
 80057a0:	e0bff615 	stw	r2,-40(fp)
 80057a4:	e0fffa17 	ldw	r3,-24(fp)
 80057a8:	e13ff617 	ldw	r4,-40(fp)
 80057ac:	193ff22e 	bgeu	r3,r4,8005778 <alt_up_pixel_buffer_dma_draw_box+0x1fc>
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
				}
				addr = addr + (1 << offset_y);
 80057b0:	e0fff417 	ldw	r3,-48(fp)
 80057b4:	00800044 	movi	r2,1
 80057b8:	10c4983a 	sll	r2,r2,r3
 80057bc:	e0ffff17 	ldw	r3,-4(fp)
 80057c0:	1887883a 	add	r3,r3,r2
 80057c4:	e0ffff15 	stw	r3,-4(fp)
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
 80057c8:	e13ff517 	ldw	r4,-44(fp)
 80057cc:	21000044 	addi	r4,r4,1
 80057d0:	e13ff515 	stw	r4,-44(fp)
 80057d4:	e0bff817 	ldw	r2,-32(fp)
 80057d8:	e0fff517 	ldw	r3,-44(fp)
 80057dc:	10ffe32e 	bgeu	r2,r3,800576c <alt_up_pixel_buffer_dma_draw_box+0x1f0>
 80057e0:	00009f06 	br	8005a60 <alt_up_pixel_buffer_dma_draw_box+0x4e4>
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
 80057e4:	e13ff917 	ldw	r4,-28(fp)
 80057e8:	e13ff515 	stw	r4,-44(fp)
 80057ec:	00001b06 	br	800585c <alt_up_pixel_buffer_dma_draw_box+0x2e0>
			{
				for (x = l_x; x <= r_x; x++)
 80057f0:	e0bffb17 	ldw	r2,-20(fp)
 80057f4:	e0bff615 	stw	r2,-40(fp)
 80057f8:	00000c06 	br	800582c <alt_up_pixel_buffer_dma_draw_box+0x2b0>
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
 80057fc:	e0fff617 	ldw	r3,-40(fp)
 8005800:	e0fff617 	ldw	r3,-40(fp)
 8005804:	18c5883a 	add	r2,r3,r3
 8005808:	1085883a 	add	r2,r2,r2
 800580c:	1007883a 	mov	r3,r2
 8005810:	e0bfff17 	ldw	r2,-4(fp)
 8005814:	1885883a 	add	r2,r3,r2
 8005818:	e0fff717 	ldw	r3,-36(fp)
 800581c:	10c00035 	stwio	r3,0(r2)
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
 8005820:	e13ff617 	ldw	r4,-40(fp)
 8005824:	21000044 	addi	r4,r4,1
 8005828:	e13ff615 	stw	r4,-40(fp)
 800582c:	e0bffa17 	ldw	r2,-24(fp)
 8005830:	e0fff617 	ldw	r3,-40(fp)
 8005834:	10fff12e 	bgeu	r2,r3,80057fc <alt_up_pixel_buffer_dma_draw_box+0x280>
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
				}
				addr = addr + (1 << offset_y);
 8005838:	e0fff417 	ldw	r3,-48(fp)
 800583c:	00800044 	movi	r2,1
 8005840:	10c4983a 	sll	r2,r2,r3
 8005844:	e13fff17 	ldw	r4,-4(fp)
 8005848:	2089883a 	add	r4,r4,r2
 800584c:	e13fff15 	stw	r4,-4(fp)
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
 8005850:	e0bff517 	ldw	r2,-44(fp)
 8005854:	10800044 	addi	r2,r2,1
 8005858:	e0bff515 	stw	r2,-44(fp)
 800585c:	e0fff817 	ldw	r3,-32(fp)
 8005860:	e13ff517 	ldw	r4,-44(fp)
 8005864:	193fe22e 	bgeu	r3,r4,80057f0 <alt_up_pixel_buffer_dma_draw_box+0x274>
 8005868:	00007d06 	br	8005a60 <alt_up_pixel_buffer_dma_draw_box+0x4e4>
	} else {
		/* Draw a box of a given color on the screen using the linear addressing mode. */
		register unsigned int x,y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
 800586c:	e0bfee17 	ldw	r2,-72(fp)
 8005870:	10800e17 	ldw	r2,56(r2)
 8005874:	10800058 	cmpnei	r2,r2,1
 8005878:	1000221e 	bne	r2,zero,8005904 <alt_up_pixel_buffer_dma_draw_box+0x388>
			addr = addr + t_y * limit_x;
 800587c:	e0fff917 	ldw	r3,-28(fp)
 8005880:	e13ffe17 	ldw	r4,-8(fp)
 8005884:	1905383a 	mul	r2,r3,r4
 8005888:	e0ffff17 	ldw	r3,-4(fp)
 800588c:	1887883a 	add	r3,r3,r2
 8005890:	e0ffff15 	stw	r3,-4(fp)
			for (y = t_y; y <= b_y; y++)
 8005894:	e13ff917 	ldw	r4,-28(fp)
 8005898:	e13ff215 	stw	r4,-56(fp)
 800589c:	00001506 	br	80058f4 <alt_up_pixel_buffer_dma_draw_box+0x378>
			{
				for (x = l_x; x <= r_x; x++)
 80058a0:	e0bffb17 	ldw	r2,-20(fp)
 80058a4:	e0bff315 	stw	r2,-52(fp)
 80058a8:	00000806 	br	80058cc <alt_up_pixel_buffer_dma_draw_box+0x350>
				{
					IOWR_8DIRECT(addr, x, local_color);
 80058ac:	e0ffff17 	ldw	r3,-4(fp)
 80058b0:	e0bff317 	ldw	r2,-52(fp)
 80058b4:	1885883a 	add	r2,r3,r2
 80058b8:	e0fff717 	ldw	r3,-36(fp)
 80058bc:	10c00025 	stbio	r3,0(r2)
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
 80058c0:	e0fff317 	ldw	r3,-52(fp)
 80058c4:	18c00044 	addi	r3,r3,1
 80058c8:	e0fff315 	stw	r3,-52(fp)
 80058cc:	e13ffa17 	ldw	r4,-24(fp)
 80058d0:	e0bff317 	ldw	r2,-52(fp)
 80058d4:	20bff52e 	bgeu	r4,r2,80058ac <alt_up_pixel_buffer_dma_draw_box+0x330>
				{
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + limit_x;
 80058d8:	e0ffff17 	ldw	r3,-4(fp)
 80058dc:	e13ffe17 	ldw	r4,-8(fp)
 80058e0:	1907883a 	add	r3,r3,r4
 80058e4:	e0ffff15 	stw	r3,-4(fp)
		register unsigned int x,y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
 80058e8:	e0bff217 	ldw	r2,-56(fp)
 80058ec:	10800044 	addi	r2,r2,1
 80058f0:	e0bff215 	stw	r2,-56(fp)
 80058f4:	e0fff817 	ldw	r3,-32(fp)
 80058f8:	e13ff217 	ldw	r4,-56(fp)
 80058fc:	193fe82e 	bgeu	r3,r4,80058a0 <alt_up_pixel_buffer_dma_draw_box+0x324>
 8005900:	00005706 	br	8005a60 <alt_up_pixel_buffer_dma_draw_box+0x4e4>
				{
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
 8005904:	e0bfee17 	ldw	r2,-72(fp)
 8005908:	10800e17 	ldw	r2,56(r2)
 800590c:	10800098 	cmpnei	r2,r2,2
 8005910:	1000291e 	bne	r2,zero,80059b8 <alt_up_pixel_buffer_dma_draw_box+0x43c>
			limit_x = limit_x << 1;
 8005914:	e0fffe17 	ldw	r3,-8(fp)
 8005918:	e0fffe17 	ldw	r3,-8(fp)
 800591c:	18c5883a 	add	r2,r3,r3
 8005920:	e0bffe15 	stw	r2,-8(fp)
			addr = addr + t_y * limit_x;
 8005924:	e13ff917 	ldw	r4,-28(fp)
 8005928:	e0fffe17 	ldw	r3,-8(fp)
 800592c:	20c5383a 	mul	r2,r4,r3
 8005930:	e13fff17 	ldw	r4,-4(fp)
 8005934:	2089883a 	add	r4,r4,r2
 8005938:	e13fff15 	stw	r4,-4(fp)
			for (y = t_y; y <= b_y; y++)
 800593c:	e0bff917 	ldw	r2,-28(fp)
 8005940:	e0bff215 	stw	r2,-56(fp)
 8005944:	00001806 	br	80059a8 <alt_up_pixel_buffer_dma_draw_box+0x42c>
			{
				for (x = l_x; x <= r_x; x++)
 8005948:	e0fffb17 	ldw	r3,-20(fp)
 800594c:	e0fff315 	stw	r3,-52(fp)
 8005950:	00000b06 	br	8005980 <alt_up_pixel_buffer_dma_draw_box+0x404>
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
 8005954:	e13ff317 	ldw	r4,-52(fp)
 8005958:	e13ff317 	ldw	r4,-52(fp)
 800595c:	2105883a 	add	r2,r4,r4
 8005960:	1007883a 	mov	r3,r2
 8005964:	e0bfff17 	ldw	r2,-4(fp)
 8005968:	1885883a 	add	r2,r3,r2
 800596c:	e0fff717 	ldw	r3,-36(fp)
 8005970:	10c0002d 	sthio	r3,0(r2)
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
 8005974:	e0bff317 	ldw	r2,-52(fp)
 8005978:	10800044 	addi	r2,r2,1
 800597c:	e0bff315 	stw	r2,-52(fp)
 8005980:	e0fffa17 	ldw	r3,-24(fp)
 8005984:	e13ff317 	ldw	r4,-52(fp)
 8005988:	193ff22e 	bgeu	r3,r4,8005954 <alt_up_pixel_buffer_dma_draw_box+0x3d8>
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
				}
				addr = addr + limit_x;
 800598c:	e0bfff17 	ldw	r2,-4(fp)
 8005990:	e0fffe17 	ldw	r3,-8(fp)
 8005994:	10c5883a 	add	r2,r2,r3
 8005998:	e0bfff15 	stw	r2,-4(fp)
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
 800599c:	e13ff217 	ldw	r4,-56(fp)
 80059a0:	21000044 	addi	r4,r4,1
 80059a4:	e13ff215 	stw	r4,-56(fp)
 80059a8:	e0bff817 	ldw	r2,-32(fp)
 80059ac:	e0fff217 	ldw	r3,-56(fp)
 80059b0:	10ffe52e 	bgeu	r2,r3,8005948 <alt_up_pixel_buffer_dma_draw_box+0x3cc>
 80059b4:	00002a06 	br	8005a60 <alt_up_pixel_buffer_dma_draw_box+0x4e4>
				addr = addr + limit_x;
			}
		}
		else
		{
			limit_x = limit_x << 2;
 80059b8:	e13ffe17 	ldw	r4,-8(fp)
 80059bc:	e13ffe17 	ldw	r4,-8(fp)
 80059c0:	2105883a 	add	r2,r4,r4
 80059c4:	1085883a 	add	r2,r2,r2
 80059c8:	e0bffe15 	stw	r2,-8(fp)
			addr = addr + t_y * limit_x;
 80059cc:	e0fff917 	ldw	r3,-28(fp)
 80059d0:	e13ffe17 	ldw	r4,-8(fp)
 80059d4:	1905383a 	mul	r2,r3,r4
 80059d8:	e0ffff17 	ldw	r3,-4(fp)
 80059dc:	1887883a 	add	r3,r3,r2
 80059e0:	e0ffff15 	stw	r3,-4(fp)
			for (y = t_y; y <= b_y; y++)
 80059e4:	e13ff917 	ldw	r4,-28(fp)
 80059e8:	e13ff215 	stw	r4,-56(fp)
 80059ec:	00001906 	br	8005a54 <alt_up_pixel_buffer_dma_draw_box+0x4d8>
			{
				for (x = l_x; x <= r_x; x++)
 80059f0:	e0bffb17 	ldw	r2,-20(fp)
 80059f4:	e0bff315 	stw	r2,-52(fp)
 80059f8:	00000c06 	br	8005a2c <alt_up_pixel_buffer_dma_draw_box+0x4b0>
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
 80059fc:	e0fff317 	ldw	r3,-52(fp)
 8005a00:	e0fff317 	ldw	r3,-52(fp)
 8005a04:	18c5883a 	add	r2,r3,r3
 8005a08:	1085883a 	add	r2,r2,r2
 8005a0c:	1007883a 	mov	r3,r2
 8005a10:	e0bfff17 	ldw	r2,-4(fp)
 8005a14:	1885883a 	add	r2,r3,r2
 8005a18:	e0fff717 	ldw	r3,-36(fp)
 8005a1c:	10c00035 	stwio	r3,0(r2)
		{
			limit_x = limit_x << 2;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
 8005a20:	e13ff317 	ldw	r4,-52(fp)
 8005a24:	21000044 	addi	r4,r4,1
 8005a28:	e13ff315 	stw	r4,-52(fp)
 8005a2c:	e0bffa17 	ldw	r2,-24(fp)
 8005a30:	e0fff317 	ldw	r3,-52(fp)
 8005a34:	10fff12e 	bgeu	r2,r3,80059fc <alt_up_pixel_buffer_dma_draw_box+0x480>
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
				}
				addr = addr + limit_x;
 8005a38:	e13fff17 	ldw	r4,-4(fp)
 8005a3c:	e0bffe17 	ldw	r2,-8(fp)
 8005a40:	2089883a 	add	r4,r4,r2
 8005a44:	e13fff15 	stw	r4,-4(fp)
		}
		else
		{
			limit_x = limit_x << 2;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
 8005a48:	e0fff217 	ldw	r3,-56(fp)
 8005a4c:	18c00044 	addi	r3,r3,1
 8005a50:	e0fff215 	stw	r3,-56(fp)
 8005a54:	e13ff817 	ldw	r4,-32(fp)
 8005a58:	e0bff217 	ldw	r2,-56(fp)
 8005a5c:	20bfe42e 	bgeu	r4,r2,80059f0 <alt_up_pixel_buffer_dma_draw_box+0x474>
				}
				addr = addr + limit_x;
			}
		}
	}
}
 8005a60:	e037883a 	mov	sp,fp
 8005a64:	df000017 	ldw	fp,0(sp)
 8005a68:	dec00104 	addi	sp,sp,4
 8005a6c:	f800283a 	ret

08005a70 <alt_up_pixel_buffer_dma_draw_hline>:

void alt_up_pixel_buffer_dma_draw_hline(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int x1, int y, int color, int backbuffer)
/* This method draws a horizontal line. This method is faster than using the line method because we know the direction of the line. */
{
 8005a70:	defff204 	addi	sp,sp,-56
 8005a74:	df000d15 	stw	fp,52(sp)
 8005a78:	df000d04 	addi	fp,sp,52
 8005a7c:	e13ff315 	stw	r4,-52(fp)
 8005a80:	e17ff415 	stw	r5,-48(fp)
 8005a84:	e1bff515 	stw	r6,-44(fp)
 8005a88:	e1fff615 	stw	r7,-40(fp)
	register unsigned int addr;
	register unsigned int limit_x = pixel_buffer->x_resolution;
 8005a8c:	e0bff317 	ldw	r2,-52(fp)
 8005a90:	10800f17 	ldw	r2,60(r2)
 8005a94:	e0bffe15 	stw	r2,-8(fp)
	register unsigned int limit_y = pixel_buffer->y_resolution;
 8005a98:	e0bff317 	ldw	r2,-52(fp)
 8005a9c:	10801017 	ldw	r2,64(r2)
 8005aa0:	e0bffd15 	stw	r2,-12(fp)
	register unsigned int temp;
	register unsigned int l_x = x0;
 8005aa4:	e0bff417 	ldw	r2,-48(fp)
 8005aa8:	e0bffc15 	stw	r2,-16(fp)
	register unsigned int r_x = x1;
 8005aac:	e0fff517 	ldw	r3,-44(fp)
 8005ab0:	e0fffb15 	stw	r3,-20(fp)
	register unsigned int line_y = y;
 8005ab4:	e13ff617 	ldw	r4,-40(fp)
 8005ab8:	e13ffa15 	stw	r4,-24(fp)
	register unsigned int local_color = color;
 8005abc:	e0800117 	ldw	r2,4(fp)
 8005ac0:	e0bff915 	stw	r2,-28(fp)
	
	/* Check coordinates */
	if (l_x > r_x)
 8005ac4:	e0fffb17 	ldw	r3,-20(fp)
 8005ac8:	e13ffc17 	ldw	r4,-16(fp)
 8005acc:	1900042e 	bgeu	r3,r4,8005ae0 <alt_up_pixel_buffer_dma_draw_hline+0x70>
	{
		temp = l_x;
 8005ad0:	e0bffc17 	ldw	r2,-16(fp)
		l_x = r_x;
 8005ad4:	e0fffb17 	ldw	r3,-20(fp)
 8005ad8:	e0fffc15 	stw	r3,-16(fp)
		r_x = temp;
 8005adc:	e0bffb15 	stw	r2,-20(fp)
	}
	if ((l_x >= limit_x) || (line_y >= limit_y) || (r_x < 0) || (line_y < 0))
 8005ae0:	e13ffc17 	ldw	r4,-16(fp)
 8005ae4:	e0bffe17 	ldw	r2,-8(fp)
 8005ae8:	2080b12e 	bgeu	r4,r2,8005db0 <alt_up_pixel_buffer_dma_draw_hline+0x340>
 8005aec:	e0fffa17 	ldw	r3,-24(fp)
 8005af0:	e13ffd17 	ldw	r4,-12(fp)
 8005af4:	19000136 	bltu	r3,r4,8005afc <alt_up_pixel_buffer_dma_draw_hline+0x8c>
	{
		/* Drawing outside of the window, so don't bother. */
		return;
 8005af8:	0000ad06 	br	8005db0 <alt_up_pixel_buffer_dma_draw_hline+0x340>
	/* Clip the box and draw only within the confines of the screen. */
	if (l_x < 0)
	{
		l_x = 0;
	}
	if (r_x >= limit_x)
 8005afc:	e0bffb17 	ldw	r2,-20(fp)
 8005b00:	e0fffe17 	ldw	r3,-8(fp)
 8005b04:	10c00336 	bltu	r2,r3,8005b14 <alt_up_pixel_buffer_dma_draw_hline+0xa4>
	{
		r_x = limit_x - 1;
 8005b08:	e13ffe17 	ldw	r4,-8(fp)
 8005b0c:	213fffc4 	addi	r4,r4,-1
 8005b10:	e13ffb15 	stw	r4,-20(fp)
	}

	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
 8005b14:	e0800217 	ldw	r2,8(fp)
 8005b18:	10800058 	cmpnei	r2,r2,1
 8005b1c:	1000041e 	bne	r2,zero,8005b30 <alt_up_pixel_buffer_dma_draw_hline+0xc0>
		addr = pixel_buffer->back_buffer_start_address;
 8005b20:	e0bff317 	ldw	r2,-52(fp)
 8005b24:	10800c17 	ldw	r2,48(r2)
 8005b28:	e0bfff15 	stw	r2,-4(fp)
 8005b2c:	00000306 	br	8005b3c <alt_up_pixel_buffer_dma_draw_hline+0xcc>
	else
		addr = pixel_buffer->buffer_start_address;
 8005b30:	e0bff317 	ldw	r2,-52(fp)
 8005b34:	10800b17 	ldw	r2,44(r2)
 8005b38:	e0bfff15 	stw	r2,-4(fp)

	/* Draw a horizontal line using one of the addressing modes. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
 8005b3c:	e0bff317 	ldw	r2,-52(fp)
 8005b40:	10800d17 	ldw	r2,52(r2)
 8005b44:	1004c03a 	cmpne	r2,r2,zero
 8005b48:	1000431e 	bne	r2,zero,8005c58 <alt_up_pixel_buffer_dma_draw_hline+0x1e8>
		/* Draw a horizontal line of a given color on the screen using the XY addressing mode. */
		register unsigned int x;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
 8005b4c:	e0bff317 	ldw	r2,-52(fp)
 8005b50:	10801317 	ldw	r2,76(r2)
		addr = addr + (line_y << offset_y);
 8005b54:	e0fffa17 	ldw	r3,-24(fp)
 8005b58:	1884983a 	sll	r2,r3,r2
 8005b5c:	e13fff17 	ldw	r4,-4(fp)
 8005b60:	2089883a 	add	r4,r4,r2
 8005b64:	e13fff15 	stw	r4,-4(fp)
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a horizontal line. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
 8005b68:	e0bff317 	ldw	r2,-52(fp)
 8005b6c:	10800e17 	ldw	r2,56(r2)
 8005b70:	10800058 	cmpnei	r2,r2,1
 8005b74:	10000f1e 	bne	r2,zero,8005bb4 <alt_up_pixel_buffer_dma_draw_hline+0x144>
			for (x = l_x; x <= r_x; x++)
 8005b78:	e0bffc17 	ldw	r2,-16(fp)
 8005b7c:	e0bff815 	stw	r2,-32(fp)
 8005b80:	00000806 	br	8005ba4 <alt_up_pixel_buffer_dma_draw_hline+0x134>
			{
				IOWR_8DIRECT(addr, x, local_color);
 8005b84:	e0ffff17 	ldw	r3,-4(fp)
 8005b88:	e0bff817 	ldw	r2,-32(fp)
 8005b8c:	1885883a 	add	r2,r3,r2
 8005b90:	e0fff917 	ldw	r3,-28(fp)
 8005b94:	10c00025 	stbio	r3,0(r2)
		addr = addr + (line_y << offset_y);
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a horizontal line. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (x = l_x; x <= r_x; x++)
 8005b98:	e0fff817 	ldw	r3,-32(fp)
 8005b9c:	18c00044 	addi	r3,r3,1
 8005ba0:	e0fff815 	stw	r3,-32(fp)
 8005ba4:	e13ffb17 	ldw	r4,-20(fp)
 8005ba8:	e0bff817 	ldw	r2,-32(fp)
 8005bac:	20bff52e 	bgeu	r4,r2,8005b84 <alt_up_pixel_buffer_dma_draw_hline+0x114>
 8005bb0:	00007f06 	br	8005db0 <alt_up_pixel_buffer_dma_draw_hline+0x340>
			{
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
 8005bb4:	e0bff317 	ldw	r2,-52(fp)
 8005bb8:	10800e17 	ldw	r2,56(r2)
 8005bbc:	10800098 	cmpnei	r2,r2,2
 8005bc0:	1000121e 	bne	r2,zero,8005c0c <alt_up_pixel_buffer_dma_draw_hline+0x19c>
			for (x = l_x; x <= r_x; x++)
 8005bc4:	e0fffc17 	ldw	r3,-16(fp)
 8005bc8:	e0fff815 	stw	r3,-32(fp)
 8005bcc:	00000b06 	br	8005bfc <alt_up_pixel_buffer_dma_draw_hline+0x18c>
			{
				IOWR_16DIRECT(addr, x << 1, local_color);
 8005bd0:	e13ff817 	ldw	r4,-32(fp)
 8005bd4:	e13ff817 	ldw	r4,-32(fp)
 8005bd8:	2105883a 	add	r2,r4,r4
 8005bdc:	1007883a 	mov	r3,r2
 8005be0:	e0bfff17 	ldw	r2,-4(fp)
 8005be4:	1885883a 	add	r2,r3,r2
 8005be8:	e0fff917 	ldw	r3,-28(fp)
 8005bec:	10c0002d 	sthio	r3,0(r2)
			for (x = l_x; x <= r_x; x++)
			{
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (x = l_x; x <= r_x; x++)
 8005bf0:	e0bff817 	ldw	r2,-32(fp)
 8005bf4:	10800044 	addi	r2,r2,1
 8005bf8:	e0bff815 	stw	r2,-32(fp)
 8005bfc:	e0fffb17 	ldw	r3,-20(fp)
 8005c00:	e13ff817 	ldw	r4,-32(fp)
 8005c04:	193ff22e 	bgeu	r3,r4,8005bd0 <alt_up_pixel_buffer_dma_draw_hline+0x160>
 8005c08:	00006906 	br	8005db0 <alt_up_pixel_buffer_dma_draw_hline+0x340>
				IOWR_16DIRECT(addr, x << 1, local_color);
			}
		}
		else
		{
			for (x = l_x; x <= r_x; x++)
 8005c0c:	e0bffc17 	ldw	r2,-16(fp)
 8005c10:	e0bff815 	stw	r2,-32(fp)
 8005c14:	00000c06 	br	8005c48 <alt_up_pixel_buffer_dma_draw_hline+0x1d8>
			{
				IOWR_32DIRECT(addr, x << 2, local_color);
 8005c18:	e0fff817 	ldw	r3,-32(fp)
 8005c1c:	e0fff817 	ldw	r3,-32(fp)
 8005c20:	18c5883a 	add	r2,r3,r3
 8005c24:	1085883a 	add	r2,r2,r2
 8005c28:	1007883a 	mov	r3,r2
 8005c2c:	e0bfff17 	ldw	r2,-4(fp)
 8005c30:	1885883a 	add	r2,r3,r2
 8005c34:	e0fff917 	ldw	r3,-28(fp)
 8005c38:	10c00035 	stwio	r3,0(r2)
				IOWR_16DIRECT(addr, x << 1, local_color);
			}
		}
		else
		{
			for (x = l_x; x <= r_x; x++)
 8005c3c:	e13ff817 	ldw	r4,-32(fp)
 8005c40:	21000044 	addi	r4,r4,1
 8005c44:	e13ff815 	stw	r4,-32(fp)
 8005c48:	e0bffb17 	ldw	r2,-20(fp)
 8005c4c:	e0fff817 	ldw	r3,-32(fp)
 8005c50:	10fff12e 	bgeu	r2,r3,8005c18 <alt_up_pixel_buffer_dma_draw_hline+0x1a8>
 8005c54:	00005606 	br	8005db0 <alt_up_pixel_buffer_dma_draw_hline+0x340>
	} else {
		/* Draw a horizontal line of a given color on the screen using the linear addressing mode. */
		register unsigned int x;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
 8005c58:	e0bff317 	ldw	r2,-52(fp)
 8005c5c:	10800e17 	ldw	r2,56(r2)
 8005c60:	10800058 	cmpnei	r2,r2,1
 8005c64:	1000151e 	bne	r2,zero,8005cbc <alt_up_pixel_buffer_dma_draw_hline+0x24c>
			addr = addr + line_y * limit_x;
 8005c68:	e13ffa17 	ldw	r4,-24(fp)
 8005c6c:	e0fffe17 	ldw	r3,-8(fp)
 8005c70:	20c5383a 	mul	r2,r4,r3
 8005c74:	e13fff17 	ldw	r4,-4(fp)
 8005c78:	2089883a 	add	r4,r4,r2
 8005c7c:	e13fff15 	stw	r4,-4(fp)
			for (x = l_x; x <= r_x; x++)
 8005c80:	e0bffc17 	ldw	r2,-16(fp)
 8005c84:	e0bff715 	stw	r2,-36(fp)
 8005c88:	00000806 	br	8005cac <alt_up_pixel_buffer_dma_draw_hline+0x23c>
			{
				IOWR_8DIRECT(addr, x, local_color);
 8005c8c:	e0ffff17 	ldw	r3,-4(fp)
 8005c90:	e0bff717 	ldw	r2,-36(fp)
 8005c94:	1885883a 	add	r2,r3,r2
 8005c98:	e0fff917 	ldw	r3,-28(fp)
 8005c9c:	10c00025 	stbio	r3,0(r2)
		register unsigned int x;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + line_y * limit_x;
			for (x = l_x; x <= r_x; x++)
 8005ca0:	e0fff717 	ldw	r3,-36(fp)
 8005ca4:	18c00044 	addi	r3,r3,1
 8005ca8:	e0fff715 	stw	r3,-36(fp)
 8005cac:	e13ffb17 	ldw	r4,-20(fp)
 8005cb0:	e0bff717 	ldw	r2,-36(fp)
 8005cb4:	20bff52e 	bgeu	r4,r2,8005c8c <alt_up_pixel_buffer_dma_draw_hline+0x21c>
 8005cb8:	00003d06 	br	8005db0 <alt_up_pixel_buffer_dma_draw_hline+0x340>
			{
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
 8005cbc:	e0bff317 	ldw	r2,-52(fp)
 8005cc0:	10800e17 	ldw	r2,56(r2)
 8005cc4:	10800098 	cmpnei	r2,r2,2
 8005cc8:	10001c1e 	bne	r2,zero,8005d3c <alt_up_pixel_buffer_dma_draw_hline+0x2cc>
			limit_x = limit_x << 1;
 8005ccc:	e0fffe17 	ldw	r3,-8(fp)
 8005cd0:	e0fffe17 	ldw	r3,-8(fp)
 8005cd4:	18c5883a 	add	r2,r3,r3
 8005cd8:	e0bffe15 	stw	r2,-8(fp)
			addr = addr + line_y * limit_x;
 8005cdc:	e13ffa17 	ldw	r4,-24(fp)
 8005ce0:	e0fffe17 	ldw	r3,-8(fp)
 8005ce4:	20c5383a 	mul	r2,r4,r3
 8005ce8:	e13fff17 	ldw	r4,-4(fp)
 8005cec:	2089883a 	add	r4,r4,r2
 8005cf0:	e13fff15 	stw	r4,-4(fp)
			for (x = l_x; x <= r_x; x++)
 8005cf4:	e0bffc17 	ldw	r2,-16(fp)
 8005cf8:	e0bff715 	stw	r2,-36(fp)
 8005cfc:	00000b06 	br	8005d2c <alt_up_pixel_buffer_dma_draw_hline+0x2bc>
			{
				IOWR_16DIRECT(addr, x << 1, local_color);
 8005d00:	e0fff717 	ldw	r3,-36(fp)
 8005d04:	e0fff717 	ldw	r3,-36(fp)
 8005d08:	18c5883a 	add	r2,r3,r3
 8005d0c:	1007883a 	mov	r3,r2
 8005d10:	e0bfff17 	ldw	r2,-4(fp)
 8005d14:	1885883a 	add	r2,r3,r2
 8005d18:	e0fff917 	ldw	r3,-28(fp)
 8005d1c:	10c0002d 	sthio	r3,0(r2)
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + line_y * limit_x;
			for (x = l_x; x <= r_x; x++)
 8005d20:	e13ff717 	ldw	r4,-36(fp)
 8005d24:	21000044 	addi	r4,r4,1
 8005d28:	e13ff715 	stw	r4,-36(fp)
 8005d2c:	e0bffb17 	ldw	r2,-20(fp)
 8005d30:	e0fff717 	ldw	r3,-36(fp)
 8005d34:	10fff22e 	bgeu	r2,r3,8005d00 <alt_up_pixel_buffer_dma_draw_hline+0x290>
 8005d38:	00001d06 	br	8005db0 <alt_up_pixel_buffer_dma_draw_hline+0x340>
				IOWR_16DIRECT(addr, x << 1, local_color);
			}
		}
		else
		{
			limit_x = limit_x << 2;
 8005d3c:	e13ffe17 	ldw	r4,-8(fp)
 8005d40:	e13ffe17 	ldw	r4,-8(fp)
 8005d44:	2105883a 	add	r2,r4,r4
 8005d48:	1085883a 	add	r2,r2,r2
 8005d4c:	e0bffe15 	stw	r2,-8(fp)
			addr = addr + line_y * limit_x;
 8005d50:	e0fffa17 	ldw	r3,-24(fp)
 8005d54:	e13ffe17 	ldw	r4,-8(fp)
 8005d58:	1905383a 	mul	r2,r3,r4
 8005d5c:	e0ffff17 	ldw	r3,-4(fp)
 8005d60:	1887883a 	add	r3,r3,r2
 8005d64:	e0ffff15 	stw	r3,-4(fp)
			for (x = l_x; x <= r_x; x++)
 8005d68:	e13ffc17 	ldw	r4,-16(fp)
 8005d6c:	e13ff715 	stw	r4,-36(fp)
 8005d70:	00000c06 	br	8005da4 <alt_up_pixel_buffer_dma_draw_hline+0x334>
			{
				IOWR_32DIRECT(addr, x << 2, local_color);
 8005d74:	e0fff717 	ldw	r3,-36(fp)
 8005d78:	e0fff717 	ldw	r3,-36(fp)
 8005d7c:	18c5883a 	add	r2,r3,r3
 8005d80:	1085883a 	add	r2,r2,r2
 8005d84:	1007883a 	mov	r3,r2
 8005d88:	e0bfff17 	ldw	r2,-4(fp)
 8005d8c:	1885883a 	add	r2,r3,r2
 8005d90:	e0fff917 	ldw	r3,-28(fp)
 8005d94:	10c00035 	stwio	r3,0(r2)
		}
		else
		{
			limit_x = limit_x << 2;
			addr = addr + line_y * limit_x;
			for (x = l_x; x <= r_x; x++)
 8005d98:	e13ff717 	ldw	r4,-36(fp)
 8005d9c:	21000044 	addi	r4,r4,1
 8005da0:	e13ff715 	stw	r4,-36(fp)
 8005da4:	e0bffb17 	ldw	r2,-20(fp)
 8005da8:	e0fff717 	ldw	r3,-36(fp)
 8005dac:	10fff12e 	bgeu	r2,r3,8005d74 <alt_up_pixel_buffer_dma_draw_hline+0x304>
				IOWR_32DIRECT(addr, x << 2, local_color);
			}
			addr = addr + limit_x;
		}
	}
}
 8005db0:	e037883a 	mov	sp,fp
 8005db4:	df000017 	ldw	fp,0(sp)
 8005db8:	dec00104 	addi	sp,sp,4
 8005dbc:	f800283a 	ret

08005dc0 <alt_up_pixel_buffer_dma_draw_vline>:


void alt_up_pixel_buffer_dma_draw_vline(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x, int y0, int y1, int color, int backbuffer)
/* This method draws a vertical line. This method is faster than using the line method because we know the direction of the line. */

{
 8005dc0:	defff104 	addi	sp,sp,-60
 8005dc4:	df000e15 	stw	fp,56(sp)
 8005dc8:	df000e04 	addi	fp,sp,56
 8005dcc:	e13ff215 	stw	r4,-56(fp)
 8005dd0:	e17ff315 	stw	r5,-52(fp)
 8005dd4:	e1bff415 	stw	r6,-48(fp)
 8005dd8:	e1fff515 	stw	r7,-44(fp)
	register unsigned int addr;
	register unsigned int limit_x = pixel_buffer->x_resolution;
 8005ddc:	e0bff217 	ldw	r2,-56(fp)
 8005de0:	10800f17 	ldw	r2,60(r2)
 8005de4:	e0bffe15 	stw	r2,-8(fp)
	register unsigned int limit_y = pixel_buffer->y_resolution;
 8005de8:	e0bff217 	ldw	r2,-56(fp)
 8005dec:	10801017 	ldw	r2,64(r2)
 8005df0:	e0bffd15 	stw	r2,-12(fp)
	register unsigned int temp;
	register unsigned int line_x = x;
 8005df4:	e0bff317 	ldw	r2,-52(fp)
 8005df8:	e0bffc15 	stw	r2,-16(fp)
	register unsigned int t_y = y0;
 8005dfc:	e0fff417 	ldw	r3,-48(fp)
 8005e00:	e0fffb15 	stw	r3,-20(fp)
	register unsigned int b_y = y1;
 8005e04:	e13ff517 	ldw	r4,-44(fp)
 8005e08:	e13ffa15 	stw	r4,-24(fp)
	register unsigned int local_color = color;
 8005e0c:	e0800117 	ldw	r2,4(fp)
 8005e10:	e0bff915 	stw	r2,-28(fp)
	
	/* Check coordinates */
	if (t_y > b_y)
 8005e14:	e0fffa17 	ldw	r3,-24(fp)
 8005e18:	e13ffb17 	ldw	r4,-20(fp)
 8005e1c:	1900042e 	bgeu	r3,r4,8005e30 <alt_up_pixel_buffer_dma_draw_vline+0x70>
	{
		temp = t_y;
 8005e20:	e0bffb17 	ldw	r2,-20(fp)
		t_y = b_y;
 8005e24:	e0fffa17 	ldw	r3,-24(fp)
 8005e28:	e0fffb15 	stw	r3,-20(fp)
		b_y = temp;
 8005e2c:	e0bffa15 	stw	r2,-24(fp)
	}
	if ((line_x >= limit_x) || (t_y >= limit_y) || (line_x < 0) || (b_y < 0))
 8005e30:	e13ffc17 	ldw	r4,-16(fp)
 8005e34:	e0bffe17 	ldw	r2,-8(fp)
 8005e38:	2080d12e 	bgeu	r4,r2,8006180 <alt_up_pixel_buffer_dma_draw_vline+0x3c0>
 8005e3c:	e0fffb17 	ldw	r3,-20(fp)
 8005e40:	e13ffd17 	ldw	r4,-12(fp)
 8005e44:	19000136 	bltu	r3,r4,8005e4c <alt_up_pixel_buffer_dma_draw_vline+0x8c>
	{
		/* Drawing outside of the window, so don't bother. */
		return;
 8005e48:	0000cd06 	br	8006180 <alt_up_pixel_buffer_dma_draw_vline+0x3c0>
	/* Clip the box and draw only within the confines of the screen. */
	if (t_y < 0)
	{
		t_y = 0;
	}
	if (b_y >= limit_y)
 8005e4c:	e0bffa17 	ldw	r2,-24(fp)
 8005e50:	e0fffd17 	ldw	r3,-12(fp)
 8005e54:	10c00336 	bltu	r2,r3,8005e64 <alt_up_pixel_buffer_dma_draw_vline+0xa4>
	{
		b_y = limit_y - 1;
 8005e58:	e13ffd17 	ldw	r4,-12(fp)
 8005e5c:	213fffc4 	addi	r4,r4,-1
 8005e60:	e13ffa15 	stw	r4,-24(fp)
	}

	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
 8005e64:	e0800217 	ldw	r2,8(fp)
 8005e68:	10800058 	cmpnei	r2,r2,1
 8005e6c:	1000041e 	bne	r2,zero,8005e80 <alt_up_pixel_buffer_dma_draw_vline+0xc0>
		addr = pixel_buffer->back_buffer_start_address;
 8005e70:	e0bff217 	ldw	r2,-56(fp)
 8005e74:	10800c17 	ldw	r2,48(r2)
 8005e78:	e0bfff15 	stw	r2,-4(fp)
 8005e7c:	00000306 	br	8005e8c <alt_up_pixel_buffer_dma_draw_vline+0xcc>
	else
		addr = pixel_buffer->buffer_start_address;
 8005e80:	e0bff217 	ldw	r2,-56(fp)
 8005e84:	10800b17 	ldw	r2,44(r2)
 8005e88:	e0bfff15 	stw	r2,-4(fp)

	/* Draw the vertical line using one of the addressing modes. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
 8005e8c:	e0bff217 	ldw	r2,-56(fp)
 8005e90:	10800d17 	ldw	r2,52(r2)
 8005e94:	1004c03a 	cmpne	r2,r2,zero
 8005e98:	1000571e 	bne	r2,zero,8005ff8 <alt_up_pixel_buffer_dma_draw_vline+0x238>
		/* Draw a vertical line of a given color on the screen using the XY addressing mode. */
		register unsigned int y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
 8005e9c:	e0bff217 	ldw	r2,-56(fp)
 8005ea0:	10801317 	ldw	r2,76(r2)
 8005ea4:	e0bff715 	stw	r2,-36(fp)
		addr = addr + (t_y << offset_y);
 8005ea8:	e0bff717 	ldw	r2,-36(fp)
 8005eac:	e0fffb17 	ldw	r3,-20(fp)
 8005eb0:	1884983a 	sll	r2,r3,r2
 8005eb4:	e13fff17 	ldw	r4,-4(fp)
 8005eb8:	2089883a 	add	r4,r4,r2
 8005ebc:	e13fff15 	stw	r4,-4(fp)
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
 8005ec0:	e0bff217 	ldw	r2,-56(fp)
 8005ec4:	10800e17 	ldw	r2,56(r2)
 8005ec8:	10800058 	cmpnei	r2,r2,1
 8005ecc:	1000151e 	bne	r2,zero,8005f24 <alt_up_pixel_buffer_dma_draw_vline+0x164>
			for (y = t_y; y <= b_y; y++)
 8005ed0:	e0bffb17 	ldw	r2,-20(fp)
 8005ed4:	e0bff815 	stw	r2,-32(fp)
 8005ed8:	00000e06 	br	8005f14 <alt_up_pixel_buffer_dma_draw_vline+0x154>
			{
				IOWR_8DIRECT(addr, line_x, local_color);
 8005edc:	e0ffff17 	ldw	r3,-4(fp)
 8005ee0:	e0bffc17 	ldw	r2,-16(fp)
 8005ee4:	1885883a 	add	r2,r3,r2
 8005ee8:	e0fff917 	ldw	r3,-28(fp)
 8005eec:	10c00025 	stbio	r3,0(r2)
				addr = addr + (1 << offset_y);
 8005ef0:	e0fff717 	ldw	r3,-36(fp)
 8005ef4:	00800044 	movi	r2,1
 8005ef8:	10c4983a 	sll	r2,r2,r3
 8005efc:	e0ffff17 	ldw	r3,-4(fp)
 8005f00:	1887883a 	add	r3,r3,r2
 8005f04:	e0ffff15 	stw	r3,-4(fp)
		addr = addr + (t_y << offset_y);
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
 8005f08:	e13ff817 	ldw	r4,-32(fp)
 8005f0c:	21000044 	addi	r4,r4,1
 8005f10:	e13ff815 	stw	r4,-32(fp)
 8005f14:	e0bffa17 	ldw	r2,-24(fp)
 8005f18:	e0fff817 	ldw	r3,-32(fp)
 8005f1c:	10ffef2e 	bgeu	r2,r3,8005edc <alt_up_pixel_buffer_dma_draw_vline+0x11c>
 8005f20:	00009706 	br	8006180 <alt_up_pixel_buffer_dma_draw_vline+0x3c0>
			{
				IOWR_8DIRECT(addr, line_x, local_color);
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
 8005f24:	e0bff217 	ldw	r2,-56(fp)
 8005f28:	10800e17 	ldw	r2,56(r2)
 8005f2c:	10800098 	cmpnei	r2,r2,2
 8005f30:	1000181e 	bne	r2,zero,8005f94 <alt_up_pixel_buffer_dma_draw_vline+0x1d4>
			for (y = t_y; y <= b_y; y++)
 8005f34:	e13ffb17 	ldw	r4,-20(fp)
 8005f38:	e13ff815 	stw	r4,-32(fp)
 8005f3c:	00001106 	br	8005f84 <alt_up_pixel_buffer_dma_draw_vline+0x1c4>
			{
				IOWR_16DIRECT(addr, line_x << 1, local_color);
 8005f40:	e0fffc17 	ldw	r3,-16(fp)
 8005f44:	e0fffc17 	ldw	r3,-16(fp)
 8005f48:	18c5883a 	add	r2,r3,r3
 8005f4c:	1007883a 	mov	r3,r2
 8005f50:	e0bfff17 	ldw	r2,-4(fp)
 8005f54:	1885883a 	add	r2,r3,r2
 8005f58:	e0fff917 	ldw	r3,-28(fp)
 8005f5c:	10c0002d 	sthio	r3,0(r2)
				addr = addr + (1 << offset_y);
 8005f60:	e0fff717 	ldw	r3,-36(fp)
 8005f64:	00800044 	movi	r2,1
 8005f68:	10c4983a 	sll	r2,r2,r3
 8005f6c:	e13fff17 	ldw	r4,-4(fp)
 8005f70:	2089883a 	add	r4,r4,r2
 8005f74:	e13fff15 	stw	r4,-4(fp)
			{
				IOWR_8DIRECT(addr, line_x, local_color);
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
 8005f78:	e0bff817 	ldw	r2,-32(fp)
 8005f7c:	10800044 	addi	r2,r2,1
 8005f80:	e0bff815 	stw	r2,-32(fp)
 8005f84:	e0fffa17 	ldw	r3,-24(fp)
 8005f88:	e13ff817 	ldw	r4,-32(fp)
 8005f8c:	193fec2e 	bgeu	r3,r4,8005f40 <alt_up_pixel_buffer_dma_draw_vline+0x180>
 8005f90:	00007b06 	br	8006180 <alt_up_pixel_buffer_dma_draw_vline+0x3c0>
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
 8005f94:	e0bffb17 	ldw	r2,-20(fp)
 8005f98:	e0bff815 	stw	r2,-32(fp)
 8005f9c:	00001206 	br	8005fe8 <alt_up_pixel_buffer_dma_draw_vline+0x228>
			{
				IOWR_32DIRECT(addr, line_x << 2, local_color);
 8005fa0:	e0fffc17 	ldw	r3,-16(fp)
 8005fa4:	e0fffc17 	ldw	r3,-16(fp)
 8005fa8:	18c5883a 	add	r2,r3,r3
 8005fac:	1085883a 	add	r2,r2,r2
 8005fb0:	1007883a 	mov	r3,r2
 8005fb4:	e0bfff17 	ldw	r2,-4(fp)
 8005fb8:	1885883a 	add	r2,r3,r2
 8005fbc:	e0fff917 	ldw	r3,-28(fp)
 8005fc0:	10c00035 	stwio	r3,0(r2)
				addr = addr + (1 << offset_y);
 8005fc4:	e0fff717 	ldw	r3,-36(fp)
 8005fc8:	00800044 	movi	r2,1
 8005fcc:	10c4983a 	sll	r2,r2,r3
 8005fd0:	e13fff17 	ldw	r4,-4(fp)
 8005fd4:	2089883a 	add	r4,r4,r2
 8005fd8:	e13fff15 	stw	r4,-4(fp)
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
 8005fdc:	e0bff817 	ldw	r2,-32(fp)
 8005fe0:	10800044 	addi	r2,r2,1
 8005fe4:	e0bff815 	stw	r2,-32(fp)
 8005fe8:	e0fffa17 	ldw	r3,-24(fp)
 8005fec:	e13ff817 	ldw	r4,-32(fp)
 8005ff0:	193feb2e 	bgeu	r3,r4,8005fa0 <alt_up_pixel_buffer_dma_draw_vline+0x1e0>
 8005ff4:	00006206 	br	8006180 <alt_up_pixel_buffer_dma_draw_vline+0x3c0>
	} else {
		/* Draw a vertical line of a given color on the screen using the linear addressing mode. */
		register unsigned int y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
 8005ff8:	e0bff217 	ldw	r2,-56(fp)
 8005ffc:	10800e17 	ldw	r2,56(r2)
 8006000:	10800058 	cmpnei	r2,r2,1
 8006004:	1000191e 	bne	r2,zero,800606c <alt_up_pixel_buffer_dma_draw_vline+0x2ac>
			addr = addr + t_y * limit_x;
 8006008:	e0fffb17 	ldw	r3,-20(fp)
 800600c:	e13ffe17 	ldw	r4,-8(fp)
 8006010:	1905383a 	mul	r2,r3,r4
 8006014:	e0ffff17 	ldw	r3,-4(fp)
 8006018:	1887883a 	add	r3,r3,r2
 800601c:	e0ffff15 	stw	r3,-4(fp)
			for (y = t_y; y <= b_y; y++)
 8006020:	e13ffb17 	ldw	r4,-20(fp)
 8006024:	e13ff615 	stw	r4,-40(fp)
 8006028:	00000c06 	br	800605c <alt_up_pixel_buffer_dma_draw_vline+0x29c>
			{
				IOWR_8DIRECT(addr, line_x, local_color);
 800602c:	e0ffff17 	ldw	r3,-4(fp)
 8006030:	e0bffc17 	ldw	r2,-16(fp)
 8006034:	1885883a 	add	r2,r3,r2
 8006038:	e0fff917 	ldw	r3,-28(fp)
 800603c:	10c00025 	stbio	r3,0(r2)
				addr = addr + limit_x;
 8006040:	e0bfff17 	ldw	r2,-4(fp)
 8006044:	e0fffe17 	ldw	r3,-8(fp)
 8006048:	10c5883a 	add	r2,r2,r3
 800604c:	e0bfff15 	stw	r2,-4(fp)
		register unsigned int y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
 8006050:	e13ff617 	ldw	r4,-40(fp)
 8006054:	21000044 	addi	r4,r4,1
 8006058:	e13ff615 	stw	r4,-40(fp)
 800605c:	e0bffa17 	ldw	r2,-24(fp)
 8006060:	e0fff617 	ldw	r3,-40(fp)
 8006064:	10fff12e 	bgeu	r2,r3,800602c <alt_up_pixel_buffer_dma_draw_vline+0x26c>
 8006068:	00004506 	br	8006180 <alt_up_pixel_buffer_dma_draw_vline+0x3c0>
			{
				IOWR_8DIRECT(addr, line_x, local_color);
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
 800606c:	e0bff217 	ldw	r2,-56(fp)
 8006070:	10800e17 	ldw	r2,56(r2)
 8006074:	10800098 	cmpnei	r2,r2,2
 8006078:	1000201e 	bne	r2,zero,80060fc <alt_up_pixel_buffer_dma_draw_vline+0x33c>
			limit_x = limit_x << 1;
 800607c:	e13ffe17 	ldw	r4,-8(fp)
 8006080:	e13ffe17 	ldw	r4,-8(fp)
 8006084:	2105883a 	add	r2,r4,r4
 8006088:	e0bffe15 	stw	r2,-8(fp)
			addr = addr + t_y * limit_x;
 800608c:	e0fffb17 	ldw	r3,-20(fp)
 8006090:	e13ffe17 	ldw	r4,-8(fp)
 8006094:	1905383a 	mul	r2,r3,r4
 8006098:	e0ffff17 	ldw	r3,-4(fp)
 800609c:	1887883a 	add	r3,r3,r2
 80060a0:	e0ffff15 	stw	r3,-4(fp)
			for (y = t_y; y <= b_y; y++)
 80060a4:	e13ffb17 	ldw	r4,-20(fp)
 80060a8:	e13ff615 	stw	r4,-40(fp)
 80060ac:	00000f06 	br	80060ec <alt_up_pixel_buffer_dma_draw_vline+0x32c>
			{
				IOWR_16DIRECT(addr, line_x << 1, local_color);
 80060b0:	e0fffc17 	ldw	r3,-16(fp)
 80060b4:	e0fffc17 	ldw	r3,-16(fp)
 80060b8:	18c5883a 	add	r2,r3,r3
 80060bc:	1007883a 	mov	r3,r2
 80060c0:	e0bfff17 	ldw	r2,-4(fp)
 80060c4:	1885883a 	add	r2,r3,r2
 80060c8:	e0fff917 	ldw	r3,-28(fp)
 80060cc:	10c0002d 	sthio	r3,0(r2)
				addr = addr + limit_x;
 80060d0:	e13fff17 	ldw	r4,-4(fp)
 80060d4:	e0bffe17 	ldw	r2,-8(fp)
 80060d8:	2089883a 	add	r4,r4,r2
 80060dc:	e13fff15 	stw	r4,-4(fp)
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
 80060e0:	e0fff617 	ldw	r3,-40(fp)
 80060e4:	18c00044 	addi	r3,r3,1
 80060e8:	e0fff615 	stw	r3,-40(fp)
 80060ec:	e13ffa17 	ldw	r4,-24(fp)
 80060f0:	e0bff617 	ldw	r2,-40(fp)
 80060f4:	20bfee2e 	bgeu	r4,r2,80060b0 <alt_up_pixel_buffer_dma_draw_vline+0x2f0>
 80060f8:	00002106 	br	8006180 <alt_up_pixel_buffer_dma_draw_vline+0x3c0>
				addr = addr + limit_x;
			}
		}
		else
		{
			limit_x = limit_x << 2;
 80060fc:	e0fffe17 	ldw	r3,-8(fp)
 8006100:	e0fffe17 	ldw	r3,-8(fp)
 8006104:	18c5883a 	add	r2,r3,r3
 8006108:	1085883a 	add	r2,r2,r2
 800610c:	e0bffe15 	stw	r2,-8(fp)
			addr = addr + t_y * limit_x;
 8006110:	e13ffb17 	ldw	r4,-20(fp)
 8006114:	e0fffe17 	ldw	r3,-8(fp)
 8006118:	20c5383a 	mul	r2,r4,r3
 800611c:	e13fff17 	ldw	r4,-4(fp)
 8006120:	2089883a 	add	r4,r4,r2
 8006124:	e13fff15 	stw	r4,-4(fp)
			for (y = t_y; y <= b_y; y++)
 8006128:	e0bffb17 	ldw	r2,-20(fp)
 800612c:	e0bff615 	stw	r2,-40(fp)
 8006130:	00001006 	br	8006174 <alt_up_pixel_buffer_dma_draw_vline+0x3b4>
			{
				IOWR_32DIRECT(addr, line_x << 2, local_color);
 8006134:	e0fffc17 	ldw	r3,-16(fp)
 8006138:	e0fffc17 	ldw	r3,-16(fp)
 800613c:	18c5883a 	add	r2,r3,r3
 8006140:	1085883a 	add	r2,r2,r2
 8006144:	1007883a 	mov	r3,r2
 8006148:	e0bfff17 	ldw	r2,-4(fp)
 800614c:	1885883a 	add	r2,r3,r2
 8006150:	e0fff917 	ldw	r3,-28(fp)
 8006154:	10c00035 	stwio	r3,0(r2)
				addr = addr + limit_x;
 8006158:	e13fff17 	ldw	r4,-4(fp)
 800615c:	e0bffe17 	ldw	r2,-8(fp)
 8006160:	2089883a 	add	r4,r4,r2
 8006164:	e13fff15 	stw	r4,-4(fp)
		}
		else
		{
			limit_x = limit_x << 2;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
 8006168:	e0fff617 	ldw	r3,-40(fp)
 800616c:	18c00044 	addi	r3,r3,1
 8006170:	e0fff615 	stw	r3,-40(fp)
 8006174:	e13ffa17 	ldw	r4,-24(fp)
 8006178:	e0bff617 	ldw	r2,-40(fp)
 800617c:	20bfed2e 	bgeu	r4,r2,8006134 <alt_up_pixel_buffer_dma_draw_vline+0x374>
				IOWR_32DIRECT(addr, line_x << 2, local_color);
				addr = addr + limit_x;
			}
		}
	}
}
 8006180:	e037883a 	mov	sp,fp
 8006184:	df000017 	ldw	fp,0(sp)
 8006188:	dec00104 	addi	sp,sp,4
 800618c:	f800283a 	ret

08006190 <alt_up_pixel_buffer_dma_draw_rectangle>:

void alt_up_pixel_buffer_dma_draw_rectangle(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int y0, int x1, int y1, int color, int backbuffer)
{
 8006190:	defff804 	addi	sp,sp,-32
 8006194:	dfc00715 	stw	ra,28(sp)
 8006198:	df000615 	stw	fp,24(sp)
 800619c:	df000604 	addi	fp,sp,24
 80061a0:	e13ffc15 	stw	r4,-16(fp)
 80061a4:	e17ffd15 	stw	r5,-12(fp)
 80061a8:	e1bffe15 	stw	r6,-8(fp)
 80061ac:	e1ffff15 	stw	r7,-4(fp)
	alt_up_pixel_buffer_dma_draw_hline(pixel_buffer, x0, x1, y0, color, backbuffer);
 80061b0:	e0800317 	ldw	r2,12(fp)
 80061b4:	d8800015 	stw	r2,0(sp)
 80061b8:	e0800417 	ldw	r2,16(fp)
 80061bc:	d8800115 	stw	r2,4(sp)
 80061c0:	e13ffc17 	ldw	r4,-16(fp)
 80061c4:	e17ffd17 	ldw	r5,-12(fp)
 80061c8:	e1bfff17 	ldw	r6,-4(fp)
 80061cc:	e1fffe17 	ldw	r7,-8(fp)
 80061d0:	8005a700 	call	8005a70 <alt_up_pixel_buffer_dma_draw_hline>
	alt_up_pixel_buffer_dma_draw_hline(pixel_buffer, x0, x1, y1, color, backbuffer);
 80061d4:	e0800317 	ldw	r2,12(fp)
 80061d8:	d8800015 	stw	r2,0(sp)
 80061dc:	e0800417 	ldw	r2,16(fp)
 80061e0:	d8800115 	stw	r2,4(sp)
 80061e4:	e13ffc17 	ldw	r4,-16(fp)
 80061e8:	e17ffd17 	ldw	r5,-12(fp)
 80061ec:	e1bfff17 	ldw	r6,-4(fp)
 80061f0:	e1c00217 	ldw	r7,8(fp)
 80061f4:	8005a700 	call	8005a70 <alt_up_pixel_buffer_dma_draw_hline>
	alt_up_pixel_buffer_dma_draw_vline(pixel_buffer, x0, y0, y1, color, backbuffer);
 80061f8:	e0800317 	ldw	r2,12(fp)
 80061fc:	d8800015 	stw	r2,0(sp)
 8006200:	e0800417 	ldw	r2,16(fp)
 8006204:	d8800115 	stw	r2,4(sp)
 8006208:	e13ffc17 	ldw	r4,-16(fp)
 800620c:	e17ffd17 	ldw	r5,-12(fp)
 8006210:	e1bffe17 	ldw	r6,-8(fp)
 8006214:	e1c00217 	ldw	r7,8(fp)
 8006218:	8005dc00 	call	8005dc0 <alt_up_pixel_buffer_dma_draw_vline>
	alt_up_pixel_buffer_dma_draw_vline(pixel_buffer, x1, y0, y1, color, backbuffer);
 800621c:	e0800317 	ldw	r2,12(fp)
 8006220:	d8800015 	stw	r2,0(sp)
 8006224:	e0800417 	ldw	r2,16(fp)
 8006228:	d8800115 	stw	r2,4(sp)
 800622c:	e13ffc17 	ldw	r4,-16(fp)
 8006230:	e17fff17 	ldw	r5,-4(fp)
 8006234:	e1bffe17 	ldw	r6,-8(fp)
 8006238:	e1c00217 	ldw	r7,8(fp)
 800623c:	8005dc00 	call	8005dc0 <alt_up_pixel_buffer_dma_draw_vline>
}
 8006240:	e037883a 	mov	sp,fp
 8006244:	dfc00117 	ldw	ra,4(sp)
 8006248:	df000017 	ldw	fp,0(sp)
 800624c:	dec00204 	addi	sp,sp,8
 8006250:	f800283a 	ret

08006254 <helper_plot_pixel>:

void helper_plot_pixel(register unsigned int buffer_start, register int line_size, register int x, register int y, register int color, register int mode)
/* This is a helper function that draws a pixel at a given location. Note that no boundary checks are made,
 * so drawing off-screen may cause unpredictable side effects. */
{
 8006254:	defffb04 	addi	sp,sp,-20
 8006258:	df000415 	stw	fp,16(sp)
 800625c:	df000404 	addi	fp,sp,16
 8006260:	e13ffc15 	stw	r4,-16(fp)
 8006264:	e17ffd15 	stw	r5,-12(fp)
 8006268:	e1bffe15 	stw	r6,-8(fp)
 800626c:	e1ffff15 	stw	r7,-4(fp)
	if (mode == 0)
 8006270:	e0c00217 	ldw	r3,8(fp)
 8006274:	1804c03a 	cmpne	r2,r3,zero
 8006278:	10000b1e 	bne	r2,zero,80062a8 <helper_plot_pixel+0x54>
		IOWR_8DIRECT(buffer_start, line_size*y+x, color);
 800627c:	e13ffd17 	ldw	r4,-12(fp)
 8006280:	e0ffff17 	ldw	r3,-4(fp)
 8006284:	20c5383a 	mul	r2,r4,r3
 8006288:	e13ffe17 	ldw	r4,-8(fp)
 800628c:	1105883a 	add	r2,r2,r4
 8006290:	1007883a 	mov	r3,r2
 8006294:	e0bffc17 	ldw	r2,-16(fp)
 8006298:	1885883a 	add	r2,r3,r2
 800629c:	e0c00117 	ldw	r3,4(fp)
 80062a0:	10c00025 	stbio	r3,0(r2)
 80062a4:	00001b06 	br	8006314 <helper_plot_pixel+0xc0>
	else if (mode == 1)
 80062a8:	e1000217 	ldw	r4,8(fp)
 80062ac:	20800058 	cmpnei	r2,r4,1
 80062b0:	10000c1e 	bne	r2,zero,80062e4 <helper_plot_pixel+0x90>
		IOWR_16DIRECT(buffer_start, (line_size*y+x) << 1, color);
 80062b4:	e0fffd17 	ldw	r3,-12(fp)
 80062b8:	e13fff17 	ldw	r4,-4(fp)
 80062bc:	1905383a 	mul	r2,r3,r4
 80062c0:	e0fffe17 	ldw	r3,-8(fp)
 80062c4:	10c5883a 	add	r2,r2,r3
 80062c8:	1085883a 	add	r2,r2,r2
 80062cc:	1007883a 	mov	r3,r2
 80062d0:	e0bffc17 	ldw	r2,-16(fp)
 80062d4:	1885883a 	add	r2,r3,r2
 80062d8:	e1000117 	ldw	r4,4(fp)
 80062dc:	1100002d 	sthio	r4,0(r2)
 80062e0:	00000c06 	br	8006314 <helper_plot_pixel+0xc0>
	else
		IOWR_32DIRECT(buffer_start, (line_size*y+x) << 2, color);
 80062e4:	e0fffd17 	ldw	r3,-12(fp)
 80062e8:	e13fff17 	ldw	r4,-4(fp)
 80062ec:	1905383a 	mul	r2,r3,r4
 80062f0:	e0fffe17 	ldw	r3,-8(fp)
 80062f4:	10c5883a 	add	r2,r2,r3
 80062f8:	1085883a 	add	r2,r2,r2
 80062fc:	1085883a 	add	r2,r2,r2
 8006300:	1007883a 	mov	r3,r2
 8006304:	e0bffc17 	ldw	r2,-16(fp)
 8006308:	1885883a 	add	r2,r3,r2
 800630c:	e1000117 	ldw	r4,4(fp)
 8006310:	11000035 	stwio	r4,0(r2)
}
 8006314:	e037883a 	mov	sp,fp
 8006318:	df000017 	ldw	fp,0(sp)
 800631c:	dec00104 	addi	sp,sp,4
 8006320:	f800283a 	ret

08006324 <alt_up_pixel_buffer_dma_draw_line>:

void alt_up_pixel_buffer_dma_draw_line(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int y0, int x1, int y1, int color, int backbuffer)
/* This function draws a line between points (x0, y0) and (x1, y1). The function does not check if it draws a pixel within screen boundaries.
 * users should ensure that the line is drawn within the screen boundaries. */
{
 8006324:	deffe404 	addi	sp,sp,-112
 8006328:	dfc01b15 	stw	ra,108(sp)
 800632c:	df001a15 	stw	fp,104(sp)
 8006330:	df001a04 	addi	fp,sp,104
 8006334:	e13fe815 	stw	r4,-96(fp)
 8006338:	e17fe915 	stw	r5,-92(fp)
 800633c:	e1bfea15 	stw	r6,-88(fp)
 8006340:	e1ffeb15 	stw	r7,-84(fp)
	register int x_0 = x0;
 8006344:	e0bfe917 	ldw	r2,-92(fp)
 8006348:	e0bffa15 	stw	r2,-24(fp)
	register int y_0 = y0;
 800634c:	e0ffea17 	ldw	r3,-88(fp)
 8006350:	e0fff915 	stw	r3,-28(fp)
	register int x_1 = x1;
 8006354:	e13feb17 	ldw	r4,-84(fp)
 8006358:	e13ff815 	stw	r4,-32(fp)
	register int y_1 = y1;
 800635c:	e0800217 	ldw	r2,8(fp)
 8006360:	e0bff715 	stw	r2,-36(fp)
	register char steep = (ABS(y_1 - y_0) > ABS(x_1 - x_0)) ? 1 : 0;
 8006364:	e0fff717 	ldw	r3,-36(fp)
 8006368:	e13ff917 	ldw	r4,-28(fp)
 800636c:	1905c83a 	sub	r2,r3,r4
 8006370:	e0bfff15 	stw	r2,-4(fp)
 8006374:	e0ffff17 	ldw	r3,-4(fp)
 8006378:	1804403a 	cmpge	r2,r3,zero
 800637c:	1000031e 	bne	r2,zero,800638c <alt_up_pixel_buffer_dma_draw_line+0x68>
 8006380:	e13fff17 	ldw	r4,-4(fp)
 8006384:	0109c83a 	sub	r4,zero,r4
 8006388:	e13fff15 	stw	r4,-4(fp)
 800638c:	e0fff817 	ldw	r3,-32(fp)
 8006390:	e13ffa17 	ldw	r4,-24(fp)
 8006394:	1905c83a 	sub	r2,r3,r4
 8006398:	e0bffe15 	stw	r2,-8(fp)
 800639c:	e0fffe17 	ldw	r3,-8(fp)
 80063a0:	1804403a 	cmpge	r2,r3,zero
 80063a4:	1000031e 	bne	r2,zero,80063b4 <alt_up_pixel_buffer_dma_draw_line+0x90>
 80063a8:	e13ffe17 	ldw	r4,-8(fp)
 80063ac:	0109c83a 	sub	r4,zero,r4
 80063b0:	e13ffe15 	stw	r4,-8(fp)
 80063b4:	e0fffe17 	ldw	r3,-8(fp)
 80063b8:	e13fff17 	ldw	r4,-4(fp)
 80063bc:	1904803a 	cmplt	r2,r3,r4
 80063c0:	e0bff605 	stb	r2,-40(fp)
	register int deltax, deltay, error, ystep, x, y;
	register int color_mode =	(pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) ? 0 :
								(pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) ? 1 : 2;
 80063c4:	e0bfe817 	ldw	r2,-96(fp)
 80063c8:	10800e17 	ldw	r2,56(r2)
 80063cc:	10800060 	cmpeqi	r2,r2,1
 80063d0:	10000c1e 	bne	r2,zero,8006404 <alt_up_pixel_buffer_dma_draw_line+0xe0>
 80063d4:	e0bfe817 	ldw	r2,-96(fp)
 80063d8:	10800e17 	ldw	r2,56(r2)
 80063dc:	10800098 	cmpnei	r2,r2,2
 80063e0:	1000031e 	bne	r2,zero,80063f0 <alt_up_pixel_buffer_dma_draw_line+0xcc>
 80063e4:	00800044 	movi	r2,1
 80063e8:	e0bffc15 	stw	r2,-16(fp)
 80063ec:	00000206 	br	80063f8 <alt_up_pixel_buffer_dma_draw_line+0xd4>
 80063f0:	00c00084 	movi	r3,2
 80063f4:	e0fffc15 	stw	r3,-16(fp)
 80063f8:	e13ffc17 	ldw	r4,-16(fp)
 80063fc:	e13ffd15 	stw	r4,-12(fp)
 8006400:	00000106 	br	8006408 <alt_up_pixel_buffer_dma_draw_line+0xe4>
 8006404:	e03ffd15 	stw	zero,-12(fp)
 8006408:	e0bffd17 	ldw	r2,-12(fp)
 800640c:	e0bfef15 	stw	r2,-68(fp)
	register int line_color = color;
 8006410:	e0c00317 	ldw	r3,12(fp)
 8006414:	e0ffee15 	stw	r3,-72(fp)
	register unsigned int buffer_start;
	register int line_size = (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) ? (1 << (pixel_buffer->y_coord_offset-color_mode)) : pixel_buffer->x_resolution;
 8006418:	e0bfe817 	ldw	r2,-96(fp)
 800641c:	10800d17 	ldw	r2,52(r2)
 8006420:	1004c03a 	cmpne	r2,r2,zero
 8006424:	1000091e 	bne	r2,zero,800644c <alt_up_pixel_buffer_dma_draw_line+0x128>
 8006428:	e0bfe817 	ldw	r2,-96(fp)
 800642c:	10c01317 	ldw	r3,76(r2)
 8006430:	e0bfef17 	ldw	r2,-68(fp)
 8006434:	1885c83a 	sub	r2,r3,r2
 8006438:	1007883a 	mov	r3,r2
 800643c:	00800044 	movi	r2,1
 8006440:	10c4983a 	sll	r2,r2,r3
 8006444:	e0bffb15 	stw	r2,-20(fp)
 8006448:	00000306 	br	8006458 <alt_up_pixel_buffer_dma_draw_line+0x134>
 800644c:	e0bfe817 	ldw	r2,-96(fp)
 8006450:	10800f17 	ldw	r2,60(r2)
 8006454:	e0bffb15 	stw	r2,-20(fp)
 8006458:	e13ffb17 	ldw	r4,-20(fp)
 800645c:	e13fec15 	stw	r4,-80(fp)

	if (backbuffer == 1)
 8006460:	e0800417 	ldw	r2,16(fp)
 8006464:	10800058 	cmpnei	r2,r2,1
 8006468:	1000041e 	bne	r2,zero,800647c <alt_up_pixel_buffer_dma_draw_line+0x158>
		buffer_start = pixel_buffer->back_buffer_start_address;
 800646c:	e0bfe817 	ldw	r2,-96(fp)
 8006470:	10800c17 	ldw	r2,48(r2)
 8006474:	e0bfed15 	stw	r2,-76(fp)
 8006478:	00000306 	br	8006488 <alt_up_pixel_buffer_dma_draw_line+0x164>
	else
		buffer_start = pixel_buffer->buffer_start_address;
 800647c:	e0bfe817 	ldw	r2,-96(fp)
 8006480:	10800b17 	ldw	r2,44(r2)
 8006484:	e0bfed15 	stw	r2,-76(fp)

	/* Preprocessing inputs */
	if (steep > 0) {
 8006488:	e0fff603 	ldbu	r3,-40(fp)
 800648c:	18803fcc 	andi	r2,r3,255
 8006490:	1080201c 	xori	r2,r2,128
 8006494:	10bfe004 	addi	r2,r2,-128
 8006498:	10800050 	cmplti	r2,r2,1
 800649c:	10000c1e 	bne	r2,zero,80064d0 <alt_up_pixel_buffer_dma_draw_line+0x1ac>
		// Swap x_0 and y_0
		error = x_0;
 80064a0:	e13ffa17 	ldw	r4,-24(fp)
 80064a4:	e13ff315 	stw	r4,-52(fp)
		x_0 = y_0;
 80064a8:	e0bff917 	ldw	r2,-28(fp)
 80064ac:	e0bffa15 	stw	r2,-24(fp)
		y_0 = error;
 80064b0:	e0fff317 	ldw	r3,-52(fp)
 80064b4:	e0fff915 	stw	r3,-28(fp)
		// Swap x_1 and y_1
		error = x_1;
 80064b8:	e13ff817 	ldw	r4,-32(fp)
 80064bc:	e13ff315 	stw	r4,-52(fp)
		x_1 = y_1;
 80064c0:	e0bff717 	ldw	r2,-36(fp)
 80064c4:	e0bff815 	stw	r2,-32(fp)
		y_1 = error;
 80064c8:	e0fff317 	ldw	r3,-52(fp)
 80064cc:	e0fff715 	stw	r3,-36(fp)
	}
	if (x_0 > x_1) {
 80064d0:	e13ff817 	ldw	r4,-32(fp)
 80064d4:	e0bffa17 	ldw	r2,-24(fp)
 80064d8:	20800c0e 	bge	r4,r2,800650c <alt_up_pixel_buffer_dma_draw_line+0x1e8>
		// Swap x_0 and x_1
		error = x_0;
 80064dc:	e0fffa17 	ldw	r3,-24(fp)
 80064e0:	e0fff315 	stw	r3,-52(fp)
		x_0 = x_1;
 80064e4:	e13ff817 	ldw	r4,-32(fp)
 80064e8:	e13ffa15 	stw	r4,-24(fp)
		x_1 = error;
 80064ec:	e0bff317 	ldw	r2,-52(fp)
 80064f0:	e0bff815 	stw	r2,-32(fp)
		// Swap y_0 and y_1
		error = y_0;
 80064f4:	e0fff917 	ldw	r3,-28(fp)
 80064f8:	e0fff315 	stw	r3,-52(fp)
		y_0 = y_1;
 80064fc:	e13ff717 	ldw	r4,-36(fp)
 8006500:	e13ff915 	stw	r4,-28(fp)
		y_1 = error;
 8006504:	e0bff317 	ldw	r2,-52(fp)
 8006508:	e0bff715 	stw	r2,-36(fp)
	}

	/* Setup local variables */
	deltax = x_1 - x_0;
 800650c:	e0fff817 	ldw	r3,-32(fp)
 8006510:	e13ffa17 	ldw	r4,-24(fp)
 8006514:	1907c83a 	sub	r3,r3,r4
 8006518:	e0fff515 	stw	r3,-44(fp)
	deltay = ABS(y_1 - y_0);
 800651c:	e0fff717 	ldw	r3,-36(fp)
 8006520:	e13ff917 	ldw	r4,-28(fp)
 8006524:	1905c83a 	sub	r2,r3,r4
 8006528:	e0bff415 	stw	r2,-48(fp)
 800652c:	e0fff417 	ldw	r3,-48(fp)
 8006530:	1804403a 	cmpge	r2,r3,zero
 8006534:	1000031e 	bne	r2,zero,8006544 <alt_up_pixel_buffer_dma_draw_line+0x220>
 8006538:	e13ff417 	ldw	r4,-48(fp)
 800653c:	0109c83a 	sub	r4,zero,r4
 8006540:	e13ff415 	stw	r4,-48(fp)
	error = -(deltax / 2); 
 8006544:	e0fff517 	ldw	r3,-44(fp)
 8006548:	1804d7fa 	srli	r2,r3,31
 800654c:	e13ff517 	ldw	r4,-44(fp)
 8006550:	1105883a 	add	r2,r2,r4
 8006554:	1005d07a 	srai	r2,r2,1
 8006558:	0085c83a 	sub	r2,zero,r2
 800655c:	e0bff315 	stw	r2,-52(fp)
	y = y_0;
 8006560:	e0bff917 	ldw	r2,-28(fp)
 8006564:	e0bff015 	stw	r2,-64(fp)
	if (y_0 < y_1)
 8006568:	e0fff917 	ldw	r3,-28(fp)
 800656c:	e13ff717 	ldw	r4,-36(fp)
 8006570:	1900030e 	bge	r3,r4,8006580 <alt_up_pixel_buffer_dma_draw_line+0x25c>
		ystep = 1;
 8006574:	00800044 	movi	r2,1
 8006578:	e0bff215 	stw	r2,-56(fp)
 800657c:	00000206 	br	8006588 <alt_up_pixel_buffer_dma_draw_line+0x264>
	else
		ystep = -1;
 8006580:	00ffffc4 	movi	r3,-1
 8006584:	e0fff215 	stw	r3,-56(fp)

	/* Draw a line - either go along the x axis (steep = 0) or along the y axis (steep = 1). The code is replicated to
	 * compile well on low optimization levels. */
	if (steep == 1)
 8006588:	e13ff603 	ldbu	r4,-40(fp)
 800658c:	20803fcc 	andi	r2,r4,255
 8006590:	1080201c 	xori	r2,r2,128
 8006594:	10bfe004 	addi	r2,r2,-128
 8006598:	10800058 	cmpnei	r2,r2,1
 800659c:	1000221e 	bne	r2,zero,8006628 <alt_up_pixel_buffer_dma_draw_line+0x304>
	{
		for (x=x_0; x <= x_1; x++) {
 80065a0:	e0bffa17 	ldw	r2,-24(fp)
 80065a4:	e0bff115 	stw	r2,-60(fp)
 80065a8:	00001b06 	br	8006618 <alt_up_pixel_buffer_dma_draw_line+0x2f4>
			helper_plot_pixel(buffer_start, line_size, y, x, line_color, color_mode);
 80065ac:	e0ffee17 	ldw	r3,-72(fp)
 80065b0:	d8c00015 	stw	r3,0(sp)
 80065b4:	e13fef17 	ldw	r4,-68(fp)
 80065b8:	d9000115 	stw	r4,4(sp)
 80065bc:	e13fed17 	ldw	r4,-76(fp)
 80065c0:	e17fec17 	ldw	r5,-80(fp)
 80065c4:	e1bff017 	ldw	r6,-64(fp)
 80065c8:	e1fff117 	ldw	r7,-60(fp)
 80065cc:	80062540 	call	8006254 <helper_plot_pixel>
			error = error + deltay;
 80065d0:	e0bff317 	ldw	r2,-52(fp)
 80065d4:	e0fff417 	ldw	r3,-48(fp)
 80065d8:	10c5883a 	add	r2,r2,r3
 80065dc:	e0bff315 	stw	r2,-52(fp)
			if (error > 0) {
 80065e0:	e13ff317 	ldw	r4,-52(fp)
 80065e4:	20800050 	cmplti	r2,r4,1
 80065e8:	1000081e 	bne	r2,zero,800660c <alt_up_pixel_buffer_dma_draw_line+0x2e8>
				y = y + ystep;
 80065ec:	e0bff017 	ldw	r2,-64(fp)
 80065f0:	e0fff217 	ldw	r3,-56(fp)
 80065f4:	10c5883a 	add	r2,r2,r3
 80065f8:	e0bff015 	stw	r2,-64(fp)
				error = error - deltax;
 80065fc:	e13ff317 	ldw	r4,-52(fp)
 8006600:	e0bff517 	ldw	r2,-44(fp)
 8006604:	2089c83a 	sub	r4,r4,r2
 8006608:	e13ff315 	stw	r4,-52(fp)

	/* Draw a line - either go along the x axis (steep = 0) or along the y axis (steep = 1). The code is replicated to
	 * compile well on low optimization levels. */
	if (steep == 1)
	{
		for (x=x_0; x <= x_1; x++) {
 800660c:	e0fff117 	ldw	r3,-60(fp)
 8006610:	18c00044 	addi	r3,r3,1
 8006614:	e0fff115 	stw	r3,-60(fp)
 8006618:	e13ff817 	ldw	r4,-32(fp)
 800661c:	e0bff117 	ldw	r2,-60(fp)
 8006620:	20bfe20e 	bge	r4,r2,80065ac <alt_up_pixel_buffer_dma_draw_line+0x288>
 8006624:	00002106 	br	80066ac <alt_up_pixel_buffer_dma_draw_line+0x388>
			}
		}
	}
	else
	{
		for (x=x_0; x <= x_1; x++) {
 8006628:	e0fffa17 	ldw	r3,-24(fp)
 800662c:	e0fff115 	stw	r3,-60(fp)
 8006630:	00001b06 	br	80066a0 <alt_up_pixel_buffer_dma_draw_line+0x37c>
			helper_plot_pixel(buffer_start, line_size, x, y, line_color, color_mode);
 8006634:	e13fee17 	ldw	r4,-72(fp)
 8006638:	d9000015 	stw	r4,0(sp)
 800663c:	e0bfef17 	ldw	r2,-68(fp)
 8006640:	d8800115 	stw	r2,4(sp)
 8006644:	e13fed17 	ldw	r4,-76(fp)
 8006648:	e17fec17 	ldw	r5,-80(fp)
 800664c:	e1bff117 	ldw	r6,-60(fp)
 8006650:	e1fff017 	ldw	r7,-64(fp)
 8006654:	80062540 	call	8006254 <helper_plot_pixel>
			error = error + deltay;
 8006658:	e0fff317 	ldw	r3,-52(fp)
 800665c:	e13ff417 	ldw	r4,-48(fp)
 8006660:	1907883a 	add	r3,r3,r4
 8006664:	e0fff315 	stw	r3,-52(fp)
			if (error > 0) {
 8006668:	e0fff317 	ldw	r3,-52(fp)
 800666c:	18800050 	cmplti	r2,r3,1
 8006670:	1000081e 	bne	r2,zero,8006694 <alt_up_pixel_buffer_dma_draw_line+0x370>
				y = y + ystep;
 8006674:	e13ff017 	ldw	r4,-64(fp)
 8006678:	e0bff217 	ldw	r2,-56(fp)
 800667c:	2089883a 	add	r4,r4,r2
 8006680:	e13ff015 	stw	r4,-64(fp)
				error = error - deltax;
 8006684:	e0fff317 	ldw	r3,-52(fp)
 8006688:	e13ff517 	ldw	r4,-44(fp)
 800668c:	1907c83a 	sub	r3,r3,r4
 8006690:	e0fff315 	stw	r3,-52(fp)
			}
		}
	}
	else
	{
		for (x=x_0; x <= x_1; x++) {
 8006694:	e0bff117 	ldw	r2,-60(fp)
 8006698:	10800044 	addi	r2,r2,1
 800669c:	e0bff115 	stw	r2,-60(fp)
 80066a0:	e0fff817 	ldw	r3,-32(fp)
 80066a4:	e13ff117 	ldw	r4,-60(fp)
 80066a8:	193fe20e 	bge	r3,r4,8006634 <alt_up_pixel_buffer_dma_draw_line+0x310>
				y = y + ystep;
				error = error - deltax;
			}
		}
	}
}
 80066ac:	e037883a 	mov	sp,fp
 80066b0:	dfc00117 	ldw	ra,4(sp)
 80066b4:	df000017 	ldw	fp,0(sp)
 80066b8:	dec00204 	addi	sp,sp,8
 80066bc:	f800283a 	ret

080066c0 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
 80066c0:	defff404 	addi	sp,sp,-48
 80066c4:	df000b15 	stw	fp,44(sp)
 80066c8:	df000b04 	addi	fp,sp,44
 80066cc:	e13ffb15 	stw	r4,-20(fp)
 80066d0:	e17ffc15 	stw	r5,-16(fp)
 80066d4:	e1bffd15 	stw	r6,-12(fp)
 80066d8:	e1fffe15 	stw	r7,-8(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
 80066dc:	e03ff915 	stw	zero,-28(fp)
 80066e0:	00820074 	movhi	r2,2049
 80066e4:	10ab0804 	addi	r2,r2,-21472
 80066e8:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
 80066ec:	1005003a 	cmpeq	r2,r2,zero
 80066f0:	1000411e 	bne	r2,zero,80067f8 <alt_alarm_start+0x138>
  {
    if (alarm)
 80066f4:	e0bffb17 	ldw	r2,-20(fp)
 80066f8:	1005003a 	cmpeq	r2,r2,zero
 80066fc:	10003b1e 	bne	r2,zero,80067ec <alt_alarm_start+0x12c>
    {
      alarm->callback = callback;
 8006700:	e0fffb17 	ldw	r3,-20(fp)
 8006704:	e0bffd17 	ldw	r2,-12(fp)
 8006708:	18800315 	stw	r2,12(r3)
      alarm->context  = context;
 800670c:	e0fffb17 	ldw	r3,-20(fp)
 8006710:	e0bffe17 	ldw	r2,-8(fp)
 8006714:	18800515 	stw	r2,20(r3)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8006718:	0005303a 	rdctl	r2,status
 800671c:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8006720:	e0fff817 	ldw	r3,-32(fp)
 8006724:	00bfff84 	movi	r2,-2
 8006728:	1884703a 	and	r2,r3,r2
 800672c:	1001703a 	wrctl	status,r2
  
  return context;
 8006730:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
 8006734:	e0bffa15 	stw	r2,-24(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 8006738:	00820074 	movhi	r2,2049
 800673c:	10ab0904 	addi	r2,r2,-21468
 8006740:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
 8006744:	e0bff915 	stw	r2,-28(fp)
      
      alarm->time = nticks + current_nticks + 1; 
 8006748:	e0fffc17 	ldw	r3,-16(fp)
 800674c:	e0bff917 	ldw	r2,-28(fp)
 8006750:	1885883a 	add	r2,r3,r2
 8006754:	10c00044 	addi	r3,r2,1
 8006758:	e0bffb17 	ldw	r2,-20(fp)
 800675c:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
 8006760:	e0bffb17 	ldw	r2,-20(fp)
 8006764:	10c00217 	ldw	r3,8(r2)
 8006768:	e0bff917 	ldw	r2,-28(fp)
 800676c:	1880042e 	bgeu	r3,r2,8006780 <alt_alarm_start+0xc0>
      {
        alarm->rollover = 1;
 8006770:	e0fffb17 	ldw	r3,-20(fp)
 8006774:	00800044 	movi	r2,1
 8006778:	18800405 	stb	r2,16(r3)
 800677c:	00000206 	br	8006788 <alt_alarm_start+0xc8>
      }
      else
      {
        alarm->rollover = 0;
 8006780:	e0bffb17 	ldw	r2,-20(fp)
 8006784:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
 8006788:	e0fffb17 	ldw	r3,-20(fp)
 800678c:	00820074 	movhi	r2,2049
 8006790:	10a55a04 	addi	r2,r2,-27288
 8006794:	e0bff615 	stw	r2,-40(fp)
 8006798:	e0fff715 	stw	r3,-36(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 800679c:	e0fff717 	ldw	r3,-36(fp)
 80067a0:	e0bff617 	ldw	r2,-40(fp)
 80067a4:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
 80067a8:	e0bff617 	ldw	r2,-40(fp)
 80067ac:	10c00017 	ldw	r3,0(r2)
 80067b0:	e0bff717 	ldw	r2,-36(fp)
 80067b4:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 80067b8:	e0bff617 	ldw	r2,-40(fp)
 80067bc:	10c00017 	ldw	r3,0(r2)
 80067c0:	e0bff717 	ldw	r2,-36(fp)
 80067c4:	18800115 	stw	r2,4(r3)
  list->next           = entry;
 80067c8:	e0fff617 	ldw	r3,-40(fp)
 80067cc:	e0bff717 	ldw	r2,-36(fp)
 80067d0:	18800015 	stw	r2,0(r3)
 80067d4:	e0bffa17 	ldw	r2,-24(fp)
 80067d8:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 80067dc:	e0bff517 	ldw	r2,-44(fp)
 80067e0:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
 80067e4:	e03fff15 	stw	zero,-4(fp)
 80067e8:	00000506 	br	8006800 <alt_alarm_start+0x140>
    }
    else
    {
      return -EINVAL;
 80067ec:	00bffa84 	movi	r2,-22
 80067f0:	e0bfff15 	stw	r2,-4(fp)
 80067f4:	00000206 	br	8006800 <alt_alarm_start+0x140>
    }
  }
  else
  {
    return -ENOTSUP;
 80067f8:	00bfde84 	movi	r2,-134
 80067fc:	e0bfff15 	stw	r2,-4(fp)
 8006800:	e0bfff17 	ldw	r2,-4(fp)
  }
}
 8006804:	e037883a 	mov	sp,fp
 8006808:	df000017 	ldw	fp,0(sp)
 800680c:	dec00104 	addi	sp,sp,4
 8006810:	f800283a 	ret

08006814 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 8006814:	defff804 	addi	sp,sp,-32
 8006818:	dfc00715 	stw	ra,28(sp)
 800681c:	df000615 	stw	fp,24(sp)
 8006820:	df000604 	addi	fp,sp,24
 8006824:	e13ffc15 	stw	r4,-16(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 8006828:	e0bffc17 	ldw	r2,-16(fp)
 800682c:	1004803a 	cmplt	r2,r2,zero
 8006830:	1000081e 	bne	r2,zero,8006854 <close+0x40>
 8006834:	e0bffc17 	ldw	r2,-16(fp)
 8006838:	10800324 	muli	r2,r2,12
 800683c:	1007883a 	mov	r3,r2
 8006840:	00820074 	movhi	r2,2049
 8006844:	10a4ee04 	addi	r2,r2,-27720
 8006848:	1887883a 	add	r3,r3,r2
 800684c:	e0ffff15 	stw	r3,-4(fp)
 8006850:	00000106 	br	8006858 <close+0x44>
 8006854:	e03fff15 	stw	zero,-4(fp)
 8006858:	e0bfff17 	ldw	r2,-4(fp)
 800685c:	e0bffb15 	stw	r2,-20(fp)

  if (fd)
 8006860:	e0bffb17 	ldw	r2,-20(fp)
 8006864:	1005003a 	cmpeq	r2,r2,zero
 8006868:	10001d1e 	bne	r2,zero,80068e0 <close+0xcc>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 800686c:	e0bffb17 	ldw	r2,-20(fp)
 8006870:	10800017 	ldw	r2,0(r2)
 8006874:	10800417 	ldw	r2,16(r2)
 8006878:	1005003a 	cmpeq	r2,r2,zero
 800687c:	1000071e 	bne	r2,zero,800689c <close+0x88>
 8006880:	e0bffb17 	ldw	r2,-20(fp)
 8006884:	10800017 	ldw	r2,0(r2)
 8006888:	10800417 	ldw	r2,16(r2)
 800688c:	e13ffb17 	ldw	r4,-20(fp)
 8006890:	103ee83a 	callr	r2
 8006894:	e0bffe15 	stw	r2,-8(fp)
 8006898:	00000106 	br	80068a0 <close+0x8c>
 800689c:	e03ffe15 	stw	zero,-8(fp)
 80068a0:	e0bffe17 	ldw	r2,-8(fp)
 80068a4:	e0bffa15 	stw	r2,-24(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 80068a8:	e13ffc17 	ldw	r4,-16(fp)
 80068ac:	800734c0 	call	800734c <alt_release_fd>
    if (rval < 0)
 80068b0:	e0bffa17 	ldw	r2,-24(fp)
 80068b4:	1004403a 	cmpge	r2,r2,zero
 80068b8:	1000071e 	bne	r2,zero,80068d8 <close+0xc4>
    {
      ALT_ERRNO = -rval;
 80068bc:	80069100 	call	8006910 <alt_get_errno>
 80068c0:	e0fffa17 	ldw	r3,-24(fp)
 80068c4:	00c7c83a 	sub	r3,zero,r3
 80068c8:	10c00015 	stw	r3,0(r2)
      return -1;
 80068cc:	00bfffc4 	movi	r2,-1
 80068d0:	e0bffd15 	stw	r2,-12(fp)
 80068d4:	00000806 	br	80068f8 <close+0xe4>
    }
    return 0;
 80068d8:	e03ffd15 	stw	zero,-12(fp)
 80068dc:	00000606 	br	80068f8 <close+0xe4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 80068e0:	80069100 	call	8006910 <alt_get_errno>
 80068e4:	1007883a 	mov	r3,r2
 80068e8:	00801444 	movi	r2,81
 80068ec:	18800015 	stw	r2,0(r3)
    return -1;
 80068f0:	00bfffc4 	movi	r2,-1
 80068f4:	e0bffd15 	stw	r2,-12(fp)
 80068f8:	e0bffd17 	ldw	r2,-12(fp)
  }
}
 80068fc:	e037883a 	mov	sp,fp
 8006900:	dfc00117 	ldw	ra,4(sp)
 8006904:	df000017 	ldw	fp,0(sp)
 8006908:	dec00204 	addi	sp,sp,8
 800690c:	f800283a 	ret

08006910 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 8006910:	defffd04 	addi	sp,sp,-12
 8006914:	dfc00215 	stw	ra,8(sp)
 8006918:	df000115 	stw	fp,4(sp)
 800691c:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 8006920:	00820074 	movhi	r2,2049
 8006924:	10a55804 	addi	r2,r2,-27296
 8006928:	10800017 	ldw	r2,0(r2)
 800692c:	1005003a 	cmpeq	r2,r2,zero
 8006930:	1000061e 	bne	r2,zero,800694c <alt_get_errno+0x3c>
 8006934:	00820074 	movhi	r2,2049
 8006938:	10a55804 	addi	r2,r2,-27296
 800693c:	10800017 	ldw	r2,0(r2)
 8006940:	103ee83a 	callr	r2
 8006944:	e0bfff15 	stw	r2,-4(fp)
 8006948:	00000306 	br	8006958 <alt_get_errno+0x48>
 800694c:	00820074 	movhi	r2,2049
 8006950:	10ab0a04 	addi	r2,r2,-21464
 8006954:	e0bfff15 	stw	r2,-4(fp)
 8006958:	e0bfff17 	ldw	r2,-4(fp)
}
 800695c:	e037883a 	mov	sp,fp
 8006960:	dfc00117 	ldw	ra,4(sp)
 8006964:	df000017 	ldw	fp,0(sp)
 8006968:	dec00204 	addi	sp,sp,8
 800696c:	f800283a 	ret

08006970 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 8006970:	defffe04 	addi	sp,sp,-8
 8006974:	df000115 	stw	fp,4(sp)
 8006978:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
 800697c:	e03fff15 	stw	zero,-4(fp)
 8006980:	00000506 	br	8006998 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
 8006984:	e0bfff17 	ldw	r2,-4(fp)
 8006988:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
 800698c:	e0bfff17 	ldw	r2,-4(fp)
 8006990:	10800804 	addi	r2,r2,32
 8006994:	e0bfff15 	stw	r2,-4(fp)
 8006998:	e0bfff17 	ldw	r2,-4(fp)
 800699c:	10840030 	cmpltui	r2,r2,4096
 80069a0:	103ff81e 	bne	r2,zero,8006984 <alt_dcache_flush_all+0x14>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 80069a4:	e037883a 	mov	sp,fp
 80069a8:	df000017 	ldw	fp,0(sp)
 80069ac:	dec00104 	addi	sp,sp,4
 80069b0:	f800283a 	ret

080069b4 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 80069b4:	defffc04 	addi	sp,sp,-16
 80069b8:	df000315 	stw	fp,12(sp)
 80069bc:	df000304 	addi	fp,sp,12
 80069c0:	e13ffd15 	stw	r4,-12(fp)
 80069c4:	e17ffe15 	stw	r5,-8(fp)
 80069c8:	e1bfff15 	stw	r6,-4(fp)
  return len;
 80069cc:	e0bfff17 	ldw	r2,-4(fp)
}
 80069d0:	e037883a 	mov	sp,fp
 80069d4:	df000017 	ldw	fp,0(sp)
 80069d8:	dec00104 	addi	sp,sp,4
 80069dc:	f800283a 	ret

080069e0 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
 80069e0:	defff904 	addi	sp,sp,-28
 80069e4:	dfc00615 	stw	ra,24(sp)
 80069e8:	df000515 	stw	fp,20(sp)
 80069ec:	df000504 	addi	fp,sp,20
 80069f0:	e13ffd15 	stw	r4,-12(fp)
 80069f4:	e17ffe15 	stw	r5,-8(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
 80069f8:	e0bffd17 	ldw	r2,-12(fp)
 80069fc:	1005003a 	cmpeq	r2,r2,zero
 8006a00:	1000041e 	bne	r2,zero,8006a14 <alt_dev_llist_insert+0x34>
 8006a04:	e0bffd17 	ldw	r2,-12(fp)
 8006a08:	10800217 	ldw	r2,8(r2)
 8006a0c:	1004c03a 	cmpne	r2,r2,zero
 8006a10:	1000071e 	bne	r2,zero,8006a30 <alt_dev_llist_insert+0x50>
  {
    ALT_ERRNO = EINVAL;
 8006a14:	8006a940 	call	8006a94 <alt_get_errno>
 8006a18:	1007883a 	mov	r3,r2
 8006a1c:	00800584 	movi	r2,22
 8006a20:	18800015 	stw	r2,0(r3)
    return -EINVAL;
 8006a24:	00bffa84 	movi	r2,-22
 8006a28:	e0bfff15 	stw	r2,-4(fp)
 8006a2c:	00001306 	br	8006a7c <alt_dev_llist_insert+0x9c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
 8006a30:	e0fffd17 	ldw	r3,-12(fp)
 8006a34:	e0bffe17 	ldw	r2,-8(fp)
 8006a38:	e0bffb15 	stw	r2,-20(fp)
 8006a3c:	e0fffc15 	stw	r3,-16(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 8006a40:	e0fffc17 	ldw	r3,-16(fp)
 8006a44:	e0bffb17 	ldw	r2,-20(fp)
 8006a48:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
 8006a4c:	e0bffb17 	ldw	r2,-20(fp)
 8006a50:	10c00017 	ldw	r3,0(r2)
 8006a54:	e0bffc17 	ldw	r2,-16(fp)
 8006a58:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 8006a5c:	e0bffb17 	ldw	r2,-20(fp)
 8006a60:	10c00017 	ldw	r3,0(r2)
 8006a64:	e0bffc17 	ldw	r2,-16(fp)
 8006a68:	18800115 	stw	r2,4(r3)
  list->next           = entry;
 8006a6c:	e0fffb17 	ldw	r3,-20(fp)
 8006a70:	e0bffc17 	ldw	r2,-16(fp)
 8006a74:	18800015 	stw	r2,0(r3)

  return 0;  
 8006a78:	e03fff15 	stw	zero,-4(fp)
 8006a7c:	e0bfff17 	ldw	r2,-4(fp)
}
 8006a80:	e037883a 	mov	sp,fp
 8006a84:	dfc00117 	ldw	ra,4(sp)
 8006a88:	df000017 	ldw	fp,0(sp)
 8006a8c:	dec00204 	addi	sp,sp,8
 8006a90:	f800283a 	ret

08006a94 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 8006a94:	defffd04 	addi	sp,sp,-12
 8006a98:	dfc00215 	stw	ra,8(sp)
 8006a9c:	df000115 	stw	fp,4(sp)
 8006aa0:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 8006aa4:	00820074 	movhi	r2,2049
 8006aa8:	10a55804 	addi	r2,r2,-27296
 8006aac:	10800017 	ldw	r2,0(r2)
 8006ab0:	1005003a 	cmpeq	r2,r2,zero
 8006ab4:	1000061e 	bne	r2,zero,8006ad0 <alt_get_errno+0x3c>
 8006ab8:	00820074 	movhi	r2,2049
 8006abc:	10a55804 	addi	r2,r2,-27296
 8006ac0:	10800017 	ldw	r2,0(r2)
 8006ac4:	103ee83a 	callr	r2
 8006ac8:	e0bfff15 	stw	r2,-4(fp)
 8006acc:	00000306 	br	8006adc <alt_get_errno+0x48>
 8006ad0:	00820074 	movhi	r2,2049
 8006ad4:	10ab0a04 	addi	r2,r2,-21464
 8006ad8:	e0bfff15 	stw	r2,-4(fp)
 8006adc:	e0bfff17 	ldw	r2,-4(fp)
}
 8006ae0:	e037883a 	mov	sp,fp
 8006ae4:	dfc00117 	ldw	ra,4(sp)
 8006ae8:	df000017 	ldw	fp,0(sp)
 8006aec:	dec00204 	addi	sp,sp,8
 8006af0:	f800283a 	ret

08006af4 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
 8006af4:	defffd04 	addi	sp,sp,-12
 8006af8:	dfc00215 	stw	ra,8(sp)
 8006afc:	df000115 	stw	fp,4(sp)
 8006b00:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 8006b04:	00bfff04 	movi	r2,-4
 8006b08:	00c20034 	movhi	r3,2048
 8006b0c:	18df3e04 	addi	r3,r3,31992
 8006b10:	1885883a 	add	r2,r3,r2
 8006b14:	e0bfff15 	stw	r2,-4(fp)
 8006b18:	00000606 	br	8006b34 <_do_ctors+0x40>
        (*ctor) (); 
 8006b1c:	e0bfff17 	ldw	r2,-4(fp)
 8006b20:	10800017 	ldw	r2,0(r2)
 8006b24:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 8006b28:	e0bfff17 	ldw	r2,-4(fp)
 8006b2c:	10bfff04 	addi	r2,r2,-4
 8006b30:	e0bfff15 	stw	r2,-4(fp)
 8006b34:	e0ffff17 	ldw	r3,-4(fp)
 8006b38:	00820034 	movhi	r2,2048
 8006b3c:	109f3d04 	addi	r2,r2,31988
 8006b40:	18bff62e 	bgeu	r3,r2,8006b1c <_do_ctors+0x28>
        (*ctor) (); 
}
 8006b44:	e037883a 	mov	sp,fp
 8006b48:	dfc00117 	ldw	ra,4(sp)
 8006b4c:	df000017 	ldw	fp,0(sp)
 8006b50:	dec00204 	addi	sp,sp,8
 8006b54:	f800283a 	ret

08006b58 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
 8006b58:	defffd04 	addi	sp,sp,-12
 8006b5c:	dfc00215 	stw	ra,8(sp)
 8006b60:	df000115 	stw	fp,4(sp)
 8006b64:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 8006b68:	00bfff04 	movi	r2,-4
 8006b6c:	00c20034 	movhi	r3,2048
 8006b70:	18df3e04 	addi	r3,r3,31992
 8006b74:	1885883a 	add	r2,r3,r2
 8006b78:	e0bfff15 	stw	r2,-4(fp)
 8006b7c:	00000606 	br	8006b98 <_do_dtors+0x40>
        (*dtor) (); 
 8006b80:	e0bfff17 	ldw	r2,-4(fp)
 8006b84:	10800017 	ldw	r2,0(r2)
 8006b88:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 8006b8c:	e0bfff17 	ldw	r2,-4(fp)
 8006b90:	10bfff04 	addi	r2,r2,-4
 8006b94:	e0bfff15 	stw	r2,-4(fp)
 8006b98:	e0ffff17 	ldw	r3,-4(fp)
 8006b9c:	00820034 	movhi	r2,2048
 8006ba0:	109f3e04 	addi	r2,r2,31992
 8006ba4:	18bff62e 	bgeu	r3,r2,8006b80 <_do_dtors+0x28>
        (*dtor) (); 
}
 8006ba8:	e037883a 	mov	sp,fp
 8006bac:	dfc00117 	ldw	ra,4(sp)
 8006bb0:	df000017 	ldw	fp,0(sp)
 8006bb4:	dec00204 	addi	sp,sp,8
 8006bb8:	f800283a 	ret

08006bbc <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 8006bbc:	defff904 	addi	sp,sp,-28
 8006bc0:	dfc00615 	stw	ra,24(sp)
 8006bc4:	df000515 	stw	fp,20(sp)
 8006bc8:	df000504 	addi	fp,sp,20
 8006bcc:	e13ffd15 	stw	r4,-12(fp)
 8006bd0:	e17ffe15 	stw	r5,-8(fp)
  alt_dev* next = (alt_dev*) llist->next;
 8006bd4:	e0bffe17 	ldw	r2,-8(fp)
 8006bd8:	10800017 	ldw	r2,0(r2)
 8006bdc:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
 8006be0:	e13ffd17 	ldw	r4,-12(fp)
 8006be4:	80079380 	call	8007938 <strlen>
 8006be8:	10800044 	addi	r2,r2,1
 8006bec:	e0bffb15 	stw	r2,-20(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 8006bf0:	00000d06 	br	8006c28 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 8006bf4:	e0bffc17 	ldw	r2,-16(fp)
 8006bf8:	11000217 	ldw	r4,8(r2)
 8006bfc:	e1bffb17 	ldw	r6,-20(fp)
 8006c00:	e17ffd17 	ldw	r5,-12(fp)
 8006c04:	80078240 	call	8007824 <memcmp>
 8006c08:	1004c03a 	cmpne	r2,r2,zero
 8006c0c:	1000031e 	bne	r2,zero,8006c1c <alt_find_dev+0x60>
    {
      /* match found */

      return next;
 8006c10:	e0bffc17 	ldw	r2,-16(fp)
 8006c14:	e0bfff15 	stw	r2,-4(fp)
 8006c18:	00000706 	br	8006c38 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
 8006c1c:	e0bffc17 	ldw	r2,-16(fp)
 8006c20:	10800017 	ldw	r2,0(r2)
 8006c24:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 8006c28:	e0fffe17 	ldw	r3,-8(fp)
 8006c2c:	e0bffc17 	ldw	r2,-16(fp)
 8006c30:	10fff01e 	bne	r2,r3,8006bf4 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
 8006c34:	e03fff15 	stw	zero,-4(fp)
 8006c38:	e0bfff17 	ldw	r2,-4(fp)
}
 8006c3c:	e037883a 	mov	sp,fp
 8006c40:	dfc00117 	ldw	ra,4(sp)
 8006c44:	df000017 	ldw	fp,0(sp)
 8006c48:	dec00204 	addi	sp,sp,8
 8006c4c:	f800283a 	ret

08006c50 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 8006c50:	defffe04 	addi	sp,sp,-8
 8006c54:	dfc00115 	stw	ra,4(sp)
 8006c58:	df000015 	stw	fp,0(sp)
 8006c5c:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
 8006c60:	0009883a 	mov	r4,zero
 8006c64:	01440004 	movi	r5,4096
 8006c68:	80077480 	call	8007748 <alt_icache_flush>
#endif
}
 8006c6c:	e037883a 	mov	sp,fp
 8006c70:	dfc00117 	ldw	ra,4(sp)
 8006c74:	df000017 	ldw	fp,0(sp)
 8006c78:	dec00204 	addi	sp,sp,8
 8006c7c:	f800283a 	ret

08006c80 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 8006c80:	defff904 	addi	sp,sp,-28
 8006c84:	dfc00615 	stw	ra,24(sp)
 8006c88:	df000515 	stw	fp,20(sp)
 8006c8c:	df000504 	addi	fp,sp,20
 8006c90:	e13ffc15 	stw	r4,-16(fp)
 8006c94:	e17ffd15 	stw	r5,-12(fp)
 8006c98:	e1bffe15 	stw	r6,-8(fp)
 8006c9c:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
 8006ca0:	e0800217 	ldw	r2,8(fp)
 8006ca4:	d8800015 	stw	r2,0(sp)
 8006ca8:	e13ffc17 	ldw	r4,-16(fp)
 8006cac:	e17ffd17 	ldw	r5,-12(fp)
 8006cb0:	e1bffe17 	ldw	r6,-8(fp)
 8006cb4:	e1ffff17 	ldw	r7,-4(fp)
 8006cb8:	8006e540 	call	8006e54 <alt_iic_isr_register>
}  
 8006cbc:	e037883a 	mov	sp,fp
 8006cc0:	dfc00117 	ldw	ra,4(sp)
 8006cc4:	df000017 	ldw	fp,0(sp)
 8006cc8:	dec00204 	addi	sp,sp,8
 8006ccc:	f800283a 	ret

08006cd0 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
 8006cd0:	defff904 	addi	sp,sp,-28
 8006cd4:	df000615 	stw	fp,24(sp)
 8006cd8:	df000604 	addi	fp,sp,24
 8006cdc:	e13ffe15 	stw	r4,-8(fp)
 8006ce0:	e17fff15 	stw	r5,-4(fp)
 8006ce4:	e0bfff17 	ldw	r2,-4(fp)
 8006ce8:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8006cec:	0005303a 	rdctl	r2,status
 8006cf0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8006cf4:	e0fffb17 	ldw	r3,-20(fp)
 8006cf8:	00bfff84 	movi	r2,-2
 8006cfc:	1884703a 	and	r2,r3,r2
 8006d00:	1001703a 	wrctl	status,r2
  
  return context;
 8006d04:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 8006d08:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active |= (1 << id);
 8006d0c:	e0fffc17 	ldw	r3,-16(fp)
 8006d10:	00800044 	movi	r2,1
 8006d14:	10c4983a 	sll	r2,r2,r3
 8006d18:	1007883a 	mov	r3,r2
 8006d1c:	00820074 	movhi	r2,2049
 8006d20:	10ab0704 	addi	r2,r2,-21476
 8006d24:	10800017 	ldw	r2,0(r2)
 8006d28:	1886b03a 	or	r3,r3,r2
 8006d2c:	00820074 	movhi	r2,2049
 8006d30:	10ab0704 	addi	r2,r2,-21476
 8006d34:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 8006d38:	00820074 	movhi	r2,2049
 8006d3c:	10ab0704 	addi	r2,r2,-21476
 8006d40:	10800017 	ldw	r2,0(r2)
 8006d44:	100170fa 	wrctl	ienable,r2
 8006d48:	e0bffd17 	ldw	r2,-12(fp)
 8006d4c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8006d50:	e0bffa17 	ldw	r2,-24(fp)
 8006d54:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 8006d58:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
 8006d5c:	e037883a 	mov	sp,fp
 8006d60:	df000017 	ldw	fp,0(sp)
 8006d64:	dec00104 	addi	sp,sp,4
 8006d68:	f800283a 	ret

08006d6c <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
 8006d6c:	defff904 	addi	sp,sp,-28
 8006d70:	df000615 	stw	fp,24(sp)
 8006d74:	df000604 	addi	fp,sp,24
 8006d78:	e13ffe15 	stw	r4,-8(fp)
 8006d7c:	e17fff15 	stw	r5,-4(fp)
 8006d80:	e0bfff17 	ldw	r2,-4(fp)
 8006d84:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8006d88:	0005303a 	rdctl	r2,status
 8006d8c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8006d90:	e0fffb17 	ldw	r3,-20(fp)
 8006d94:	00bfff84 	movi	r2,-2
 8006d98:	1884703a 	and	r2,r3,r2
 8006d9c:	1001703a 	wrctl	status,r2
  
  return context;
 8006da0:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 8006da4:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active &= ~(1 << id);
 8006da8:	e0fffc17 	ldw	r3,-16(fp)
 8006dac:	00800044 	movi	r2,1
 8006db0:	10c4983a 	sll	r2,r2,r3
 8006db4:	0084303a 	nor	r2,zero,r2
 8006db8:	1007883a 	mov	r3,r2
 8006dbc:	00820074 	movhi	r2,2049
 8006dc0:	10ab0704 	addi	r2,r2,-21476
 8006dc4:	10800017 	ldw	r2,0(r2)
 8006dc8:	1886703a 	and	r3,r3,r2
 8006dcc:	00820074 	movhi	r2,2049
 8006dd0:	10ab0704 	addi	r2,r2,-21476
 8006dd4:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 8006dd8:	00820074 	movhi	r2,2049
 8006ddc:	10ab0704 	addi	r2,r2,-21476
 8006de0:	10800017 	ldw	r2,0(r2)
 8006de4:	100170fa 	wrctl	ienable,r2
 8006de8:	e0bffd17 	ldw	r2,-12(fp)
 8006dec:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8006df0:	e0bffa17 	ldw	r2,-24(fp)
 8006df4:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 8006df8:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
 8006dfc:	e037883a 	mov	sp,fp
 8006e00:	df000017 	ldw	fp,0(sp)
 8006e04:	dec00104 	addi	sp,sp,4
 8006e08:	f800283a 	ret

08006e0c <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
 8006e0c:	defffc04 	addi	sp,sp,-16
 8006e10:	df000315 	stw	fp,12(sp)
 8006e14:	df000304 	addi	fp,sp,12
 8006e18:	e13ffe15 	stw	r4,-8(fp)
 8006e1c:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
 8006e20:	000530fa 	rdctl	r2,ienable
 8006e24:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
 8006e28:	e0ffff17 	ldw	r3,-4(fp)
 8006e2c:	00800044 	movi	r2,1
 8006e30:	10c4983a 	sll	r2,r2,r3
 8006e34:	1007883a 	mov	r3,r2
 8006e38:	e0bffd17 	ldw	r2,-12(fp)
 8006e3c:	1884703a 	and	r2,r3,r2
 8006e40:	1004c03a 	cmpne	r2,r2,zero
}
 8006e44:	e037883a 	mov	sp,fp
 8006e48:	df000017 	ldw	fp,0(sp)
 8006e4c:	dec00104 	addi	sp,sp,4
 8006e50:	f800283a 	ret

08006e54 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 8006e54:	defff404 	addi	sp,sp,-48
 8006e58:	dfc00b15 	stw	ra,44(sp)
 8006e5c:	df000a15 	stw	fp,40(sp)
 8006e60:	df000a04 	addi	fp,sp,40
 8006e64:	e13ffb15 	stw	r4,-20(fp)
 8006e68:	e17ffc15 	stw	r5,-16(fp)
 8006e6c:	e1bffd15 	stw	r6,-12(fp)
 8006e70:	e1fffe15 	stw	r7,-8(fp)
  int rc = -EINVAL;  
 8006e74:	00bffa84 	movi	r2,-22
 8006e78:	e0bffa15 	stw	r2,-24(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
 8006e7c:	e0bffc17 	ldw	r2,-16(fp)
 8006e80:	e0bff915 	stw	r2,-28(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 8006e84:	e0bff917 	ldw	r2,-28(fp)
 8006e88:	10800808 	cmpgei	r2,r2,32
 8006e8c:	1000291e 	bne	r2,zero,8006f34 <alt_iic_isr_register+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8006e90:	0005303a 	rdctl	r2,status
 8006e94:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8006e98:	e0fff717 	ldw	r3,-36(fp)
 8006e9c:	00bfff84 	movi	r2,-2
 8006ea0:	1884703a 	and	r2,r3,r2
 8006ea4:	1001703a 	wrctl	status,r2
  
  return context;
 8006ea8:	e0bff717 	ldw	r2,-36(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
 8006eac:	e0bff815 	stw	r2,-32(fp)

    alt_irq[id].handler = isr;
 8006eb0:	e0bff917 	ldw	r2,-28(fp)
 8006eb4:	00c20074 	movhi	r3,2049
 8006eb8:	18eb0b04 	addi	r3,r3,-21460
 8006ebc:	100490fa 	slli	r2,r2,3
 8006ec0:	10c7883a 	add	r3,r2,r3
 8006ec4:	e0bffd17 	ldw	r2,-12(fp)
 8006ec8:	18800015 	stw	r2,0(r3)
    alt_irq[id].context = isr_context;
 8006ecc:	e0bff917 	ldw	r2,-28(fp)
 8006ed0:	00c20074 	movhi	r3,2049
 8006ed4:	18eb0b04 	addi	r3,r3,-21460
 8006ed8:	100490fa 	slli	r2,r2,3
 8006edc:	10c5883a 	add	r2,r2,r3
 8006ee0:	10c00104 	addi	r3,r2,4
 8006ee4:	e0bffe17 	ldw	r2,-8(fp)
 8006ee8:	18800015 	stw	r2,0(r3)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
 8006eec:	e0bffd17 	ldw	r2,-12(fp)
 8006ef0:	1005003a 	cmpeq	r2,r2,zero
 8006ef4:	1000051e 	bne	r2,zero,8006f0c <alt_iic_isr_register+0xb8>
 8006ef8:	e17ff917 	ldw	r5,-28(fp)
 8006efc:	e13ffb17 	ldw	r4,-20(fp)
 8006f00:	8006cd00 	call	8006cd0 <alt_ic_irq_enable>
 8006f04:	e0bfff15 	stw	r2,-4(fp)
 8006f08:	00000406 	br	8006f1c <alt_iic_isr_register+0xc8>
 8006f0c:	e17ff917 	ldw	r5,-28(fp)
 8006f10:	e13ffb17 	ldw	r4,-20(fp)
 8006f14:	8006d6c0 	call	8006d6c <alt_ic_irq_disable>
 8006f18:	e0bfff15 	stw	r2,-4(fp)
 8006f1c:	e0bfff17 	ldw	r2,-4(fp)
 8006f20:	e0bffa15 	stw	r2,-24(fp)
 8006f24:	e0bff817 	ldw	r2,-32(fp)
 8006f28:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8006f2c:	e0bff617 	ldw	r2,-40(fp)
 8006f30:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
 8006f34:	e0bffa17 	ldw	r2,-24(fp)
}
 8006f38:	e037883a 	mov	sp,fp
 8006f3c:	dfc00117 	ldw	ra,4(sp)
 8006f40:	df000017 	ldw	fp,0(sp)
 8006f44:	dec00204 	addi	sp,sp,8
 8006f48:	f800283a 	ret

08006f4c <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
 8006f4c:	defff904 	addi	sp,sp,-28
 8006f50:	dfc00615 	stw	ra,24(sp)
 8006f54:	df000515 	stw	fp,20(sp)
 8006f58:	df000504 	addi	fp,sp,20
 8006f5c:	e13ffc15 	stw	r4,-16(fp)
 8006f60:	e17ffd15 	stw	r5,-12(fp)
 8006f64:	e1bffe15 	stw	r6,-8(fp)
 8006f68:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
 8006f6c:	e13ffd17 	ldw	r4,-12(fp)
 8006f70:	e17ffe17 	ldw	r5,-8(fp)
 8006f74:	e1bfff17 	ldw	r6,-4(fp)
 8006f78:	80071640 	call	8007164 <open>
 8006f7c:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
 8006f80:	e0bffb17 	ldw	r2,-20(fp)
 8006f84:	1004803a 	cmplt	r2,r2,zero
 8006f88:	10001c1e 	bne	r2,zero,8006ffc <alt_open_fd+0xb0>
  {
    fd->dev      = alt_fd_list[old].dev;
 8006f8c:	e0bffb17 	ldw	r2,-20(fp)
 8006f90:	00c20074 	movhi	r3,2049
 8006f94:	18e4ee04 	addi	r3,r3,-27720
 8006f98:	10800324 	muli	r2,r2,12
 8006f9c:	10c5883a 	add	r2,r2,r3
 8006fa0:	10c00017 	ldw	r3,0(r2)
 8006fa4:	e0bffc17 	ldw	r2,-16(fp)
 8006fa8:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
 8006fac:	e0bffb17 	ldw	r2,-20(fp)
 8006fb0:	00c20074 	movhi	r3,2049
 8006fb4:	18e4ee04 	addi	r3,r3,-27720
 8006fb8:	10800324 	muli	r2,r2,12
 8006fbc:	10c5883a 	add	r2,r2,r3
 8006fc0:	10800104 	addi	r2,r2,4
 8006fc4:	10c00017 	ldw	r3,0(r2)
 8006fc8:	e0bffc17 	ldw	r2,-16(fp)
 8006fcc:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 8006fd0:	e0bffb17 	ldw	r2,-20(fp)
 8006fd4:	00c20074 	movhi	r3,2049
 8006fd8:	18e4ee04 	addi	r3,r3,-27720
 8006fdc:	10800324 	muli	r2,r2,12
 8006fe0:	10c5883a 	add	r2,r2,r3
 8006fe4:	10800204 	addi	r2,r2,8
 8006fe8:	10c00017 	ldw	r3,0(r2)
 8006fec:	e0bffc17 	ldw	r2,-16(fp)
 8006ff0:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
 8006ff4:	e13ffb17 	ldw	r4,-20(fp)
 8006ff8:	800734c0 	call	800734c <alt_release_fd>
  }
} 
 8006ffc:	e037883a 	mov	sp,fp
 8007000:	dfc00117 	ldw	ra,4(sp)
 8007004:	df000017 	ldw	fp,0(sp)
 8007008:	dec00204 	addi	sp,sp,8
 800700c:	f800283a 	ret

08007010 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 8007010:	defffb04 	addi	sp,sp,-20
 8007014:	dfc00415 	stw	ra,16(sp)
 8007018:	df000315 	stw	fp,12(sp)
 800701c:	df000304 	addi	fp,sp,12
 8007020:	e13ffd15 	stw	r4,-12(fp)
 8007024:	e17ffe15 	stw	r5,-8(fp)
 8007028:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 800702c:	01020074 	movhi	r4,2049
 8007030:	2124f104 	addi	r4,r4,-27708
 8007034:	e17ffd17 	ldw	r5,-12(fp)
 8007038:	01800044 	movi	r6,1
 800703c:	01c07fc4 	movi	r7,511
 8007040:	8006f4c0 	call	8006f4c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 8007044:	01020074 	movhi	r4,2049
 8007048:	2124ee04 	addi	r4,r4,-27720
 800704c:	e17ffe17 	ldw	r5,-8(fp)
 8007050:	000d883a 	mov	r6,zero
 8007054:	01c07fc4 	movi	r7,511
 8007058:	8006f4c0 	call	8006f4c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 800705c:	01020074 	movhi	r4,2049
 8007060:	2124f404 	addi	r4,r4,-27696
 8007064:	e17fff17 	ldw	r5,-4(fp)
 8007068:	01800044 	movi	r6,1
 800706c:	01c07fc4 	movi	r7,511
 8007070:	8006f4c0 	call	8006f4c <alt_open_fd>
}  
 8007074:	e037883a 	mov	sp,fp
 8007078:	dfc00117 	ldw	ra,4(sp)
 800707c:	df000017 	ldw	fp,0(sp)
 8007080:	dec00204 	addi	sp,sp,8
 8007084:	f800283a 	ret

08007088 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
 8007088:	defffc04 	addi	sp,sp,-16
 800708c:	df000315 	stw	fp,12(sp)
 8007090:	df000304 	addi	fp,sp,12
 8007094:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 8007098:	e0bffe17 	ldw	r2,-8(fp)
 800709c:	10800217 	ldw	r2,8(r2)
 80070a0:	10d00034 	orhi	r3,r2,16384
 80070a4:	e0bffe17 	ldw	r2,-8(fp)
 80070a8:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 80070ac:	e03ffd15 	stw	zero,-12(fp)
 80070b0:	00002006 	br	8007134 <alt_file_locked+0xac>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 80070b4:	e0bffd17 	ldw	r2,-12(fp)
 80070b8:	00c20074 	movhi	r3,2049
 80070bc:	18e4ee04 	addi	r3,r3,-27720
 80070c0:	10800324 	muli	r2,r2,12
 80070c4:	10c5883a 	add	r2,r2,r3
 80070c8:	10c00017 	ldw	r3,0(r2)
 80070cc:	e0bffe17 	ldw	r2,-8(fp)
 80070d0:	10800017 	ldw	r2,0(r2)
 80070d4:	1880141e 	bne	r3,r2,8007128 <alt_file_locked+0xa0>
 80070d8:	e0bffd17 	ldw	r2,-12(fp)
 80070dc:	00c20074 	movhi	r3,2049
 80070e0:	18e4ee04 	addi	r3,r3,-27720
 80070e4:	10800324 	muli	r2,r2,12
 80070e8:	10c5883a 	add	r2,r2,r3
 80070ec:	10800204 	addi	r2,r2,8
 80070f0:	10800017 	ldw	r2,0(r2)
 80070f4:	1004403a 	cmpge	r2,r2,zero
 80070f8:	10000b1e 	bne	r2,zero,8007128 <alt_file_locked+0xa0>
 80070fc:	e0bffd17 	ldw	r2,-12(fp)
 8007100:	10800324 	muli	r2,r2,12
 8007104:	1007883a 	mov	r3,r2
 8007108:	00820074 	movhi	r2,2049
 800710c:	10a4ee04 	addi	r2,r2,-27720
 8007110:	1887883a 	add	r3,r3,r2
 8007114:	e0bffe17 	ldw	r2,-8(fp)
 8007118:	18800326 	beq	r3,r2,8007128 <alt_file_locked+0xa0>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
 800711c:	00bffcc4 	movi	r2,-13
 8007120:	e0bfff15 	stw	r2,-4(fp)
 8007124:	00000a06 	br	8007150 <alt_file_locked+0xc8>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 8007128:	e0bffd17 	ldw	r2,-12(fp)
 800712c:	10800044 	addi	r2,r2,1
 8007130:	e0bffd15 	stw	r2,-12(fp)
 8007134:	00820074 	movhi	r2,2049
 8007138:	10a55704 	addi	r2,r2,-27300
 800713c:	10800017 	ldw	r2,0(r2)
 8007140:	1007883a 	mov	r3,r2
 8007144:	e0bffd17 	ldw	r2,-12(fp)
 8007148:	18bfda2e 	bgeu	r3,r2,80070b4 <alt_file_locked+0x2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
 800714c:	e03fff15 	stw	zero,-4(fp)
 8007150:	e0bfff17 	ldw	r2,-4(fp)
}
 8007154:	e037883a 	mov	sp,fp
 8007158:	df000017 	ldw	fp,0(sp)
 800715c:	dec00104 	addi	sp,sp,4
 8007160:	f800283a 	ret

08007164 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 8007164:	defff404 	addi	sp,sp,-48
 8007168:	dfc00b15 	stw	ra,44(sp)
 800716c:	df000a15 	stw	fp,40(sp)
 8007170:	df000a04 	addi	fp,sp,40
 8007174:	e13ffb15 	stw	r4,-20(fp)
 8007178:	e17ffc15 	stw	r5,-16(fp)
 800717c:	e1bffd15 	stw	r6,-12(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
 8007180:	00bfffc4 	movi	r2,-1
 8007184:	e0bff815 	stw	r2,-32(fp)
  int status = -ENODEV;
 8007188:	00bffb44 	movi	r2,-19
 800718c:	e0bff715 	stw	r2,-36(fp)
  int isafs = 0;
 8007190:	e03ff615 	stw	zero,-40(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 8007194:	e13ffb17 	ldw	r4,-20(fp)
 8007198:	01420074 	movhi	r5,2049
 800719c:	29655504 	addi	r5,r5,-27308
 80071a0:	8006bbc0 	call	8006bbc <alt_find_dev>
 80071a4:	e0bffa15 	stw	r2,-24(fp)
 80071a8:	e0bffa17 	ldw	r2,-24(fp)
 80071ac:	1004c03a 	cmpne	r2,r2,zero
 80071b0:	1000051e 	bne	r2,zero,80071c8 <open+0x64>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 80071b4:	e13ffb17 	ldw	r4,-20(fp)
 80071b8:	80075700 	call	8007570 <alt_find_file>
 80071bc:	e0bffa15 	stw	r2,-24(fp)
    isafs = 1;
 80071c0:	00800044 	movi	r2,1
 80071c4:	e0bff615 	stw	r2,-40(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 80071c8:	e0bffa17 	ldw	r2,-24(fp)
 80071cc:	1005003a 	cmpeq	r2,r2,zero
 80071d0:	1000301e 	bne	r2,zero,8007294 <open+0x130>
  {
    if ((index = alt_get_fd (dev)) < 0)
 80071d4:	e13ffa17 	ldw	r4,-24(fp)
 80071d8:	80076900 	call	8007690 <alt_get_fd>
 80071dc:	e0bff815 	stw	r2,-32(fp)
 80071e0:	e0bff817 	ldw	r2,-32(fp)
 80071e4:	1004403a 	cmpge	r2,r2,zero
 80071e8:	1000031e 	bne	r2,zero,80071f8 <open+0x94>
    {
      status = index;
 80071ec:	e0bff817 	ldw	r2,-32(fp)
 80071f0:	e0bff715 	stw	r2,-36(fp)
 80071f4:	00002906 	br	800729c <open+0x138>
    }
    else
    {
      fd = &alt_fd_list[index];
 80071f8:	e0bff817 	ldw	r2,-32(fp)
 80071fc:	10800324 	muli	r2,r2,12
 8007200:	1007883a 	mov	r3,r2
 8007204:	00820074 	movhi	r2,2049
 8007208:	10a4ee04 	addi	r2,r2,-27720
 800720c:	1885883a 	add	r2,r3,r2
 8007210:	e0bff915 	stw	r2,-28(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 8007214:	e0fffc17 	ldw	r3,-16(fp)
 8007218:	00900034 	movhi	r2,16384
 800721c:	10bfffc4 	addi	r2,r2,-1
 8007220:	1886703a 	and	r3,r3,r2
 8007224:	e0bff917 	ldw	r2,-28(fp)
 8007228:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
 800722c:	e0bff617 	ldw	r2,-40(fp)
 8007230:	1004c03a 	cmpne	r2,r2,zero
 8007234:	1000061e 	bne	r2,zero,8007250 <open+0xec>
 8007238:	e13ff917 	ldw	r4,-28(fp)
 800723c:	80070880 	call	8007088 <alt_file_locked>
 8007240:	e0bff715 	stw	r2,-36(fp)
 8007244:	e0bff717 	ldw	r2,-36(fp)
 8007248:	1004803a 	cmplt	r2,r2,zero
 800724c:	1000131e 	bne	r2,zero,800729c <open+0x138>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 8007250:	e0bffa17 	ldw	r2,-24(fp)
 8007254:	10800317 	ldw	r2,12(r2)
 8007258:	1005003a 	cmpeq	r2,r2,zero
 800725c:	1000091e 	bne	r2,zero,8007284 <open+0x120>
 8007260:	e0bffa17 	ldw	r2,-24(fp)
 8007264:	10800317 	ldw	r2,12(r2)
 8007268:	e13ff917 	ldw	r4,-28(fp)
 800726c:	e17ffb17 	ldw	r5,-20(fp)
 8007270:	e1bffc17 	ldw	r6,-16(fp)
 8007274:	e1fffd17 	ldw	r7,-12(fp)
 8007278:	103ee83a 	callr	r2
 800727c:	e0bfff15 	stw	r2,-4(fp)
 8007280:	00000106 	br	8007288 <open+0x124>
 8007284:	e03fff15 	stw	zero,-4(fp)
 8007288:	e0bfff17 	ldw	r2,-4(fp)
 800728c:	e0bff715 	stw	r2,-36(fp)
 8007290:	00000206 	br	800729c <open+0x138>
      }
    }
  }
  else
  {
    status = -ENODEV;
 8007294:	00bffb44 	movi	r2,-19
 8007298:	e0bff715 	stw	r2,-36(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 800729c:	e0bff717 	ldw	r2,-36(fp)
 80072a0:	1004403a 	cmpge	r2,r2,zero
 80072a4:	1000091e 	bne	r2,zero,80072cc <open+0x168>
  {
    alt_release_fd (index);  
 80072a8:	e13ff817 	ldw	r4,-32(fp)
 80072ac:	800734c0 	call	800734c <alt_release_fd>
    ALT_ERRNO = -status;
 80072b0:	80072ec0 	call	80072ec <alt_get_errno>
 80072b4:	e0fff717 	ldw	r3,-36(fp)
 80072b8:	00c7c83a 	sub	r3,zero,r3
 80072bc:	10c00015 	stw	r3,0(r2)
    return -1;
 80072c0:	00bfffc4 	movi	r2,-1
 80072c4:	e0bffe15 	stw	r2,-8(fp)
 80072c8:	00000206 	br	80072d4 <open+0x170>
  }
  
  /* return the reference upon success */

  return index;
 80072cc:	e0bff817 	ldw	r2,-32(fp)
 80072d0:	e0bffe15 	stw	r2,-8(fp)
 80072d4:	e0bffe17 	ldw	r2,-8(fp)
}
 80072d8:	e037883a 	mov	sp,fp
 80072dc:	dfc00117 	ldw	ra,4(sp)
 80072e0:	df000017 	ldw	fp,0(sp)
 80072e4:	dec00204 	addi	sp,sp,8
 80072e8:	f800283a 	ret

080072ec <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 80072ec:	defffd04 	addi	sp,sp,-12
 80072f0:	dfc00215 	stw	ra,8(sp)
 80072f4:	df000115 	stw	fp,4(sp)
 80072f8:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 80072fc:	00820074 	movhi	r2,2049
 8007300:	10a55804 	addi	r2,r2,-27296
 8007304:	10800017 	ldw	r2,0(r2)
 8007308:	1005003a 	cmpeq	r2,r2,zero
 800730c:	1000061e 	bne	r2,zero,8007328 <alt_get_errno+0x3c>
 8007310:	00820074 	movhi	r2,2049
 8007314:	10a55804 	addi	r2,r2,-27296
 8007318:	10800017 	ldw	r2,0(r2)
 800731c:	103ee83a 	callr	r2
 8007320:	e0bfff15 	stw	r2,-4(fp)
 8007324:	00000306 	br	8007334 <alt_get_errno+0x48>
 8007328:	00820074 	movhi	r2,2049
 800732c:	10ab0a04 	addi	r2,r2,-21464
 8007330:	e0bfff15 	stw	r2,-4(fp)
 8007334:	e0bfff17 	ldw	r2,-4(fp)
}
 8007338:	e037883a 	mov	sp,fp
 800733c:	dfc00117 	ldw	ra,4(sp)
 8007340:	df000017 	ldw	fp,0(sp)
 8007344:	dec00204 	addi	sp,sp,8
 8007348:	f800283a 	ret

0800734c <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 800734c:	defffe04 	addi	sp,sp,-8
 8007350:	df000115 	stw	fp,4(sp)
 8007354:	df000104 	addi	fp,sp,4
 8007358:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
 800735c:	e0bfff17 	ldw	r2,-4(fp)
 8007360:	108000d0 	cmplti	r2,r2,3
 8007364:	10000d1e 	bne	r2,zero,800739c <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
 8007368:	e0bfff17 	ldw	r2,-4(fp)
 800736c:	00c20074 	movhi	r3,2049
 8007370:	18e4ee04 	addi	r3,r3,-27720
 8007374:	10800324 	muli	r2,r2,12
 8007378:	10c5883a 	add	r2,r2,r3
 800737c:	10800204 	addi	r2,r2,8
 8007380:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
 8007384:	e0bfff17 	ldw	r2,-4(fp)
 8007388:	00c20074 	movhi	r3,2049
 800738c:	18e4ee04 	addi	r3,r3,-27720
 8007390:	10800324 	muli	r2,r2,12
 8007394:	10c5883a 	add	r2,r2,r3
 8007398:	10000015 	stw	zero,0(r2)
  }
}
 800739c:	e037883a 	mov	sp,fp
 80073a0:	df000017 	ldw	fp,0(sp)
 80073a4:	dec00104 	addi	sp,sp,4
 80073a8:	f800283a 	ret

080073ac <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
 80073ac:	defffa04 	addi	sp,sp,-24
 80073b0:	df000515 	stw	fp,20(sp)
 80073b4:	df000504 	addi	fp,sp,20
 80073b8:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 80073bc:	0005303a 	rdctl	r2,status
 80073c0:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 80073c4:	e0fffd17 	ldw	r3,-12(fp)
 80073c8:	00bfff84 	movi	r2,-2
 80073cc:	1884703a 	and	r2,r3,r2
 80073d0:	1001703a 	wrctl	status,r2
  
  return context;
 80073d4:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
 80073d8:	e0bffe15 	stw	r2,-8(fp)
  alt_llist_remove (&alarm->llist);
 80073dc:	e0bfff17 	ldw	r2,-4(fp)
 80073e0:	e0bffc15 	stw	r2,-16(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 80073e4:	e0bffc17 	ldw	r2,-16(fp)
 80073e8:	10c00017 	ldw	r3,0(r2)
 80073ec:	e0bffc17 	ldw	r2,-16(fp)
 80073f0:	10800117 	ldw	r2,4(r2)
 80073f4:	18800115 	stw	r2,4(r3)
  entry->previous->next = entry->next;
 80073f8:	e0bffc17 	ldw	r2,-16(fp)
 80073fc:	10c00117 	ldw	r3,4(r2)
 8007400:	e0bffc17 	ldw	r2,-16(fp)
 8007404:	10800017 	ldw	r2,0(r2)
 8007408:	18800015 	stw	r2,0(r3)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 800740c:	e0fffc17 	ldw	r3,-16(fp)
 8007410:	e0bffc17 	ldw	r2,-16(fp)
 8007414:	18800115 	stw	r2,4(r3)
  entry->next     = entry;
 8007418:	e0fffc17 	ldw	r3,-16(fp)
 800741c:	e0bffc17 	ldw	r2,-16(fp)
 8007420:	18800015 	stw	r2,0(r3)
 8007424:	e0bffe17 	ldw	r2,-8(fp)
 8007428:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 800742c:	e0bffb17 	ldw	r2,-20(fp)
 8007430:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
 8007434:	e037883a 	mov	sp,fp
 8007438:	df000017 	ldw	fp,0(sp)
 800743c:	dec00104 	addi	sp,sp,4
 8007440:	f800283a 	ret

08007444 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 8007444:	defffb04 	addi	sp,sp,-20
 8007448:	dfc00415 	stw	ra,16(sp)
 800744c:	df000315 	stw	fp,12(sp)
 8007450:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 8007454:	d0a00c17 	ldw	r2,-32720(gp)
 8007458:	e0bffe15 	stw	r2,-8(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 800745c:	d0a5bb17 	ldw	r2,-26900(gp)
 8007460:	10800044 	addi	r2,r2,1
 8007464:	d0a5bb15 	stw	r2,-26900(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 8007468:	00003106 	br	8007530 <alt_tick+0xec>
  {
    next = (alt_alarm*) alarm->llist.next;
 800746c:	e0bffe17 	ldw	r2,-8(fp)
 8007470:	10800017 	ldw	r2,0(r2)
 8007474:	e0bfff15 	stw	r2,-4(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 8007478:	e0bffe17 	ldw	r2,-8(fp)
 800747c:	10800403 	ldbu	r2,16(r2)
 8007480:	10803fcc 	andi	r2,r2,255
 8007484:	1005003a 	cmpeq	r2,r2,zero
 8007488:	1000051e 	bne	r2,zero,80074a0 <alt_tick+0x5c>
 800748c:	d0a5bb17 	ldw	r2,-26900(gp)
 8007490:	1004c03a 	cmpne	r2,r2,zero
 8007494:	1000021e 	bne	r2,zero,80074a0 <alt_tick+0x5c>
    {
      alarm->rollover = 0;
 8007498:	e0bffe17 	ldw	r2,-8(fp)
 800749c:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 80074a0:	e0bffe17 	ldw	r2,-8(fp)
 80074a4:	10c00217 	ldw	r3,8(r2)
 80074a8:	d0a5bb17 	ldw	r2,-26900(gp)
 80074ac:	10c01e36 	bltu	r2,r3,8007528 <alt_tick+0xe4>
 80074b0:	e0bffe17 	ldw	r2,-8(fp)
 80074b4:	10800403 	ldbu	r2,16(r2)
 80074b8:	10803fcc 	andi	r2,r2,255
 80074bc:	1004c03a 	cmpne	r2,r2,zero
 80074c0:	1000191e 	bne	r2,zero,8007528 <alt_tick+0xe4>
    {
      next_callback = alarm->callback (alarm->context);
 80074c4:	e0bffe17 	ldw	r2,-8(fp)
 80074c8:	10c00317 	ldw	r3,12(r2)
 80074cc:	e0bffe17 	ldw	r2,-8(fp)
 80074d0:	11000517 	ldw	r4,20(r2)
 80074d4:	183ee83a 	callr	r3
 80074d8:	e0bffd15 	stw	r2,-12(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 80074dc:	e0bffd17 	ldw	r2,-12(fp)
 80074e0:	1004c03a 	cmpne	r2,r2,zero
 80074e4:	1000031e 	bne	r2,zero,80074f4 <alt_tick+0xb0>
      {
        alt_alarm_stop (alarm);
 80074e8:	e13ffe17 	ldw	r4,-8(fp)
 80074ec:	80073ac0 	call	80073ac <alt_alarm_stop>
 80074f0:	00000d06 	br	8007528 <alt_tick+0xe4>
      }
      else
      {
        alarm->time += next_callback;
 80074f4:	e0bffe17 	ldw	r2,-8(fp)
 80074f8:	10c00217 	ldw	r3,8(r2)
 80074fc:	e0bffd17 	ldw	r2,-12(fp)
 8007500:	1887883a 	add	r3,r3,r2
 8007504:	e0bffe17 	ldw	r2,-8(fp)
 8007508:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 800750c:	e0bffe17 	ldw	r2,-8(fp)
 8007510:	10c00217 	ldw	r3,8(r2)
 8007514:	d0a5bb17 	ldw	r2,-26900(gp)
 8007518:	1880032e 	bgeu	r3,r2,8007528 <alt_tick+0xe4>
        {
          alarm->rollover = 1;
 800751c:	e0fffe17 	ldw	r3,-8(fp)
 8007520:	00800044 	movi	r2,1
 8007524:	18800405 	stb	r2,16(r3)
        }
      }
    }
    alarm = next;
 8007528:	e0bfff17 	ldw	r2,-4(fp)
 800752c:	e0bffe15 	stw	r2,-8(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 8007530:	d0e00c04 	addi	r3,gp,-32720
 8007534:	e0bffe17 	ldw	r2,-8(fp)
 8007538:	10ffcc1e 	bne	r2,r3,800746c <alt_tick+0x28>
  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
}
 800753c:	e037883a 	mov	sp,fp
 8007540:	dfc00117 	ldw	ra,4(sp)
 8007544:	df000017 	ldw	fp,0(sp)
 8007548:	dec00204 	addi	sp,sp,8
 800754c:	f800283a 	ret

08007550 <altera_nios2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_irq_init(void) 
{
 8007550:	deffff04 	addi	sp,sp,-4
 8007554:	df000015 	stw	fp,0(sp)
 8007558:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 800755c:	000170fa 	wrctl	ienable,zero
}
 8007560:	e037883a 	mov	sp,fp
 8007564:	df000017 	ldw	fp,0(sp)
 8007568:	dec00104 	addi	sp,sp,4
 800756c:	f800283a 	ret

08007570 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 8007570:	defffa04 	addi	sp,sp,-24
 8007574:	dfc00515 	stw	ra,20(sp)
 8007578:	df000415 	stw	fp,16(sp)
 800757c:	df000404 	addi	fp,sp,16
 8007580:	e13ffe15 	stw	r4,-8(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 8007584:	00820074 	movhi	r2,2049
 8007588:	10a55304 	addi	r2,r2,-27316
 800758c:	10800017 	ldw	r2,0(r2)
 8007590:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 8007594:	00003306 	br	8007664 <alt_find_file+0xf4>
  {
    len = strlen(next->name);
 8007598:	e0bffd17 	ldw	r2,-12(fp)
 800759c:	11000217 	ldw	r4,8(r2)
 80075a0:	80079380 	call	8007938 <strlen>
 80075a4:	e0bffc15 	stw	r2,-16(fp)
    
    if (next->name[len-1] == '/')
 80075a8:	e0bffd17 	ldw	r2,-12(fp)
 80075ac:	10c00217 	ldw	r3,8(r2)
 80075b0:	e0bffc17 	ldw	r2,-16(fp)
 80075b4:	1885883a 	add	r2,r3,r2
 80075b8:	10bfffc4 	addi	r2,r2,-1
 80075bc:	10800003 	ldbu	r2,0(r2)
 80075c0:	10803fcc 	andi	r2,r2,255
 80075c4:	1080201c 	xori	r2,r2,128
 80075c8:	10bfe004 	addi	r2,r2,-128
 80075cc:	10800bd8 	cmpnei	r2,r2,47
 80075d0:	1000031e 	bne	r2,zero,80075e0 <alt_find_file+0x70>
    {
      len -= 1;
 80075d4:	e0bffc17 	ldw	r2,-16(fp)
 80075d8:	10bfffc4 	addi	r2,r2,-1
 80075dc:	e0bffc15 	stw	r2,-16(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 80075e0:	e0bffc17 	ldw	r2,-16(fp)
 80075e4:	1007883a 	mov	r3,r2
 80075e8:	e0bffe17 	ldw	r2,-8(fp)
 80075ec:	1885883a 	add	r2,r3,r2
 80075f0:	10800003 	ldbu	r2,0(r2)
 80075f4:	10803fcc 	andi	r2,r2,255
 80075f8:	1080201c 	xori	r2,r2,128
 80075fc:	10bfe004 	addi	r2,r2,-128
 8007600:	10800be0 	cmpeqi	r2,r2,47
 8007604:	10000a1e 	bne	r2,zero,8007630 <alt_find_file+0xc0>
 8007608:	e0bffc17 	ldw	r2,-16(fp)
 800760c:	1007883a 	mov	r3,r2
 8007610:	e0bffe17 	ldw	r2,-8(fp)
 8007614:	1885883a 	add	r2,r3,r2
 8007618:	10800003 	ldbu	r2,0(r2)
 800761c:	10803fcc 	andi	r2,r2,255
 8007620:	1080201c 	xori	r2,r2,128
 8007624:	10bfe004 	addi	r2,r2,-128
 8007628:	1004c03a 	cmpne	r2,r2,zero
 800762c:	10000a1e 	bne	r2,zero,8007658 <alt_find_file+0xe8>
 8007630:	e0bffd17 	ldw	r2,-12(fp)
 8007634:	11000217 	ldw	r4,8(r2)
 8007638:	e1bffc17 	ldw	r6,-16(fp)
 800763c:	e17ffe17 	ldw	r5,-8(fp)
 8007640:	80078240 	call	8007824 <memcmp>
 8007644:	1004c03a 	cmpne	r2,r2,zero
 8007648:	1000031e 	bne	r2,zero,8007658 <alt_find_file+0xe8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
 800764c:	e0bffd17 	ldw	r2,-12(fp)
 8007650:	e0bfff15 	stw	r2,-4(fp)
 8007654:	00000806 	br	8007678 <alt_find_file+0x108>
    }
    next = (alt_dev*) next->llist.next;
 8007658:	e0bffd17 	ldw	r2,-12(fp)
 800765c:	10800017 	ldw	r2,0(r2)
 8007660:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 8007664:	00c20074 	movhi	r3,2049
 8007668:	18e55304 	addi	r3,r3,-27316
 800766c:	e0bffd17 	ldw	r2,-12(fp)
 8007670:	10ffc91e 	bne	r2,r3,8007598 <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
 8007674:	e03fff15 	stw	zero,-4(fp)
 8007678:	e0bfff17 	ldw	r2,-4(fp)
}
 800767c:	e037883a 	mov	sp,fp
 8007680:	dfc00117 	ldw	ra,4(sp)
 8007684:	df000017 	ldw	fp,0(sp)
 8007688:	dec00204 	addi	sp,sp,8
 800768c:	f800283a 	ret

08007690 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 8007690:	defffc04 	addi	sp,sp,-16
 8007694:	df000315 	stw	fp,12(sp)
 8007698:	df000304 	addi	fp,sp,12
 800769c:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
 80076a0:	00bffa04 	movi	r2,-24
 80076a4:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 80076a8:	e03ffe15 	stw	zero,-8(fp)
 80076ac:	00001e06 	br	8007728 <alt_get_fd+0x98>
  {
    if (!alt_fd_list[i].dev)
 80076b0:	e0bffe17 	ldw	r2,-8(fp)
 80076b4:	00c20074 	movhi	r3,2049
 80076b8:	18e4ee04 	addi	r3,r3,-27720
 80076bc:	10800324 	muli	r2,r2,12
 80076c0:	10c5883a 	add	r2,r2,r3
 80076c4:	10800017 	ldw	r2,0(r2)
 80076c8:	1004c03a 	cmpne	r2,r2,zero
 80076cc:	1000131e 	bne	r2,zero,800771c <alt_get_fd+0x8c>
    {
      alt_fd_list[i].dev = dev;
 80076d0:	e0bffe17 	ldw	r2,-8(fp)
 80076d4:	00c20074 	movhi	r3,2049
 80076d8:	18e4ee04 	addi	r3,r3,-27720
 80076dc:	10800324 	muli	r2,r2,12
 80076e0:	10c7883a 	add	r3,r2,r3
 80076e4:	e0bfff17 	ldw	r2,-4(fp)
 80076e8:	18800015 	stw	r2,0(r3)
      if (i > alt_max_fd)
 80076ec:	00820074 	movhi	r2,2049
 80076f0:	10a55704 	addi	r2,r2,-27300
 80076f4:	10c00017 	ldw	r3,0(r2)
 80076f8:	e0bffe17 	ldw	r2,-8(fp)
 80076fc:	1880040e 	bge	r3,r2,8007710 <alt_get_fd+0x80>
      {
        alt_max_fd = i;
 8007700:	00c20074 	movhi	r3,2049
 8007704:	18e55704 	addi	r3,r3,-27300
 8007708:	e0bffe17 	ldw	r2,-8(fp)
 800770c:	18800015 	stw	r2,0(r3)
      }
      rc = i;
 8007710:	e0bffe17 	ldw	r2,-8(fp)
 8007714:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
 8007718:	00000606 	br	8007734 <alt_get_fd+0xa4>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 800771c:	e0bffe17 	ldw	r2,-8(fp)
 8007720:	10800044 	addi	r2,r2,1
 8007724:	e0bffe15 	stw	r2,-8(fp)
 8007728:	e0bffe17 	ldw	r2,-8(fp)
 800772c:	10800810 	cmplti	r2,r2,32
 8007730:	103fdf1e 	bne	r2,zero,80076b0 <alt_get_fd+0x20>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
 8007734:	e0bffd17 	ldw	r2,-12(fp)
}
 8007738:	e037883a 	mov	sp,fp
 800773c:	df000017 	ldw	fp,0(sp)
 8007740:	dec00104 	addi	sp,sp,4
 8007744:	f800283a 	ret

08007748 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
 8007748:	defffb04 	addi	sp,sp,-20
 800774c:	df000415 	stw	fp,16(sp)
 8007750:	df000404 	addi	fp,sp,16
 8007754:	e13ffe15 	stw	r4,-8(fp)
 8007758:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
 800775c:	e0bfff17 	ldw	r2,-4(fp)
 8007760:	10840070 	cmpltui	r2,r2,4097
 8007764:	1000021e 	bne	r2,zero,8007770 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
 8007768:	00840004 	movi	r2,4096
 800776c:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
 8007770:	e0fffe17 	ldw	r3,-8(fp)
 8007774:	e0bfff17 	ldw	r2,-4(fp)
 8007778:	1885883a 	add	r2,r3,r2
 800777c:	e0bffc15 	stw	r2,-16(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 8007780:	e0bffe17 	ldw	r2,-8(fp)
 8007784:	e0bffd15 	stw	r2,-12(fp)
 8007788:	00000506 	br	80077a0 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
 800778c:	e0bffd17 	ldw	r2,-12(fp)
 8007790:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 8007794:	e0bffd17 	ldw	r2,-12(fp)
 8007798:	10800804 	addi	r2,r2,32
 800779c:	e0bffd15 	stw	r2,-12(fp)
 80077a0:	e0fffd17 	ldw	r3,-12(fp)
 80077a4:	e0bffc17 	ldw	r2,-16(fp)
 80077a8:	18bff836 	bltu	r3,r2,800778c <alt_icache_flush+0x44>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
 80077ac:	e0bffe17 	ldw	r2,-8(fp)
 80077b0:	108007cc 	andi	r2,r2,31
 80077b4:	1005003a 	cmpeq	r2,r2,zero
 80077b8:	1000021e 	bne	r2,zero,80077c4 <alt_icache_flush+0x7c>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
 80077bc:	e0bffd17 	ldw	r2,-12(fp)
 80077c0:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
 80077c4:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
 80077c8:	e037883a 	mov	sp,fp
 80077cc:	df000017 	ldw	fp,0(sp)
 80077d0:	dec00104 	addi	sp,sp,4
 80077d4:	f800283a 	ret

080077d8 <atexit>:
 80077d8:	200b883a 	mov	r5,r4
 80077dc:	000d883a 	mov	r6,zero
 80077e0:	0009883a 	mov	r4,zero
 80077e4:	000f883a 	mov	r7,zero
 80077e8:	80079ac1 	jmpi	80079ac <__register_exitproc>

080077ec <exit>:
 80077ec:	defffe04 	addi	sp,sp,-8
 80077f0:	000b883a 	mov	r5,zero
 80077f4:	dc000015 	stw	r16,0(sp)
 80077f8:	dfc00115 	stw	ra,4(sp)
 80077fc:	2021883a 	mov	r16,r4
 8007800:	8007ae40 	call	8007ae4 <__call_exitprocs>
 8007804:	00820074 	movhi	r2,2049
 8007808:	10a55204 	addi	r2,r2,-27320
 800780c:	11000017 	ldw	r4,0(r2)
 8007810:	20800f17 	ldw	r2,60(r4)
 8007814:	10000126 	beq	r2,zero,800781c <exit+0x30>
 8007818:	103ee83a 	callr	r2
 800781c:	8009883a 	mov	r4,r16
 8007820:	8007cd40 	call	8007cd4 <_exit>

08007824 <memcmp>:
 8007824:	00c000c4 	movi	r3,3
 8007828:	1980032e 	bgeu	r3,r6,8007838 <memcmp+0x14>
 800782c:	2144b03a 	or	r2,r4,r5
 8007830:	10c4703a 	and	r2,r2,r3
 8007834:	10000f26 	beq	r2,zero,8007874 <memcmp+0x50>
 8007838:	31ffffc4 	addi	r7,r6,-1
 800783c:	3000061e 	bne	r6,zero,8007858 <memcmp+0x34>
 8007840:	00000a06 	br	800786c <memcmp+0x48>
 8007844:	39ffffc4 	addi	r7,r7,-1
 8007848:	00bfffc4 	movi	r2,-1
 800784c:	21000044 	addi	r4,r4,1
 8007850:	29400044 	addi	r5,r5,1
 8007854:	38800526 	beq	r7,r2,800786c <memcmp+0x48>
 8007858:	20c00003 	ldbu	r3,0(r4)
 800785c:	28800003 	ldbu	r2,0(r5)
 8007860:	18bff826 	beq	r3,r2,8007844 <memcmp+0x20>
 8007864:	1885c83a 	sub	r2,r3,r2
 8007868:	f800283a 	ret
 800786c:	0005883a 	mov	r2,zero
 8007870:	f800283a 	ret
 8007874:	180f883a 	mov	r7,r3
 8007878:	20c00017 	ldw	r3,0(r4)
 800787c:	28800017 	ldw	r2,0(r5)
 8007880:	18bfed1e 	bne	r3,r2,8007838 <memcmp+0x14>
 8007884:	31bfff04 	addi	r6,r6,-4
 8007888:	21000104 	addi	r4,r4,4
 800788c:	29400104 	addi	r5,r5,4
 8007890:	39bff936 	bltu	r7,r6,8007878 <memcmp+0x54>
 8007894:	003fe806 	br	8007838 <memcmp+0x14>

08007898 <memcpy>:
 8007898:	01c003c4 	movi	r7,15
 800789c:	2007883a 	mov	r3,r4
 80078a0:	3980032e 	bgeu	r7,r6,80078b0 <memcpy+0x18>
 80078a4:	2904b03a 	or	r2,r5,r4
 80078a8:	108000cc 	andi	r2,r2,3
 80078ac:	10000926 	beq	r2,zero,80078d4 <memcpy+0x3c>
 80078b0:	30000626 	beq	r6,zero,80078cc <memcpy+0x34>
 80078b4:	30cd883a 	add	r6,r6,r3
 80078b8:	28800003 	ldbu	r2,0(r5)
 80078bc:	29400044 	addi	r5,r5,1
 80078c0:	18800005 	stb	r2,0(r3)
 80078c4:	18c00044 	addi	r3,r3,1
 80078c8:	30fffb1e 	bne	r6,r3,80078b8 <memcpy+0x20>
 80078cc:	2005883a 	mov	r2,r4
 80078d0:	f800283a 	ret
 80078d4:	3811883a 	mov	r8,r7
 80078d8:	200f883a 	mov	r7,r4
 80078dc:	28c00017 	ldw	r3,0(r5)
 80078e0:	31bffc04 	addi	r6,r6,-16
 80078e4:	38c00015 	stw	r3,0(r7)
 80078e8:	28800117 	ldw	r2,4(r5)
 80078ec:	38800115 	stw	r2,4(r7)
 80078f0:	28c00217 	ldw	r3,8(r5)
 80078f4:	38c00215 	stw	r3,8(r7)
 80078f8:	28800317 	ldw	r2,12(r5)
 80078fc:	29400404 	addi	r5,r5,16
 8007900:	38800315 	stw	r2,12(r7)
 8007904:	39c00404 	addi	r7,r7,16
 8007908:	41bff436 	bltu	r8,r6,80078dc <memcpy+0x44>
 800790c:	008000c4 	movi	r2,3
 8007910:	1180072e 	bgeu	r2,r6,8007930 <memcpy+0x98>
 8007914:	1007883a 	mov	r3,r2
 8007918:	28800017 	ldw	r2,0(r5)
 800791c:	31bfff04 	addi	r6,r6,-4
 8007920:	29400104 	addi	r5,r5,4
 8007924:	38800015 	stw	r2,0(r7)
 8007928:	39c00104 	addi	r7,r7,4
 800792c:	19bffa36 	bltu	r3,r6,8007918 <memcpy+0x80>
 8007930:	3807883a 	mov	r3,r7
 8007934:	003fde06 	br	80078b0 <memcpy+0x18>

08007938 <strlen>:
 8007938:	208000cc 	andi	r2,r4,3
 800793c:	2011883a 	mov	r8,r4
 8007940:	1000161e 	bne	r2,zero,800799c <strlen+0x64>
 8007944:	20c00017 	ldw	r3,0(r4)
 8007948:	017fbff4 	movhi	r5,65279
 800794c:	297fbfc4 	addi	r5,r5,-257
 8007950:	01e02074 	movhi	r7,32897
 8007954:	39e02004 	addi	r7,r7,-32640
 8007958:	1945883a 	add	r2,r3,r5
 800795c:	11c4703a 	and	r2,r2,r7
 8007960:	00c6303a 	nor	r3,zero,r3
 8007964:	1886703a 	and	r3,r3,r2
 8007968:	18000c1e 	bne	r3,zero,800799c <strlen+0x64>
 800796c:	280d883a 	mov	r6,r5
 8007970:	380b883a 	mov	r5,r7
 8007974:	21000104 	addi	r4,r4,4
 8007978:	20800017 	ldw	r2,0(r4)
 800797c:	1187883a 	add	r3,r2,r6
 8007980:	1946703a 	and	r3,r3,r5
 8007984:	0084303a 	nor	r2,zero,r2
 8007988:	10c4703a 	and	r2,r2,r3
 800798c:	103ff926 	beq	r2,zero,8007974 <strlen+0x3c>
 8007990:	20800007 	ldb	r2,0(r4)
 8007994:	10000326 	beq	r2,zero,80079a4 <strlen+0x6c>
 8007998:	21000044 	addi	r4,r4,1
 800799c:	20800007 	ldb	r2,0(r4)
 80079a0:	103ffd1e 	bne	r2,zero,8007998 <strlen+0x60>
 80079a4:	2205c83a 	sub	r2,r4,r8
 80079a8:	f800283a 	ret

080079ac <__register_exitproc>:
 80079ac:	defffa04 	addi	sp,sp,-24
 80079b0:	00820074 	movhi	r2,2049
 80079b4:	10a55204 	addi	r2,r2,-27320
 80079b8:	dc000015 	stw	r16,0(sp)
 80079bc:	14000017 	ldw	r16,0(r2)
 80079c0:	dd000415 	stw	r20,16(sp)
 80079c4:	2829883a 	mov	r20,r5
 80079c8:	81405217 	ldw	r5,328(r16)
 80079cc:	dcc00315 	stw	r19,12(sp)
 80079d0:	dc800215 	stw	r18,8(sp)
 80079d4:	dc400115 	stw	r17,4(sp)
 80079d8:	dfc00515 	stw	ra,20(sp)
 80079dc:	2023883a 	mov	r17,r4
 80079e0:	3027883a 	mov	r19,r6
 80079e4:	3825883a 	mov	r18,r7
 80079e8:	28002526 	beq	r5,zero,8007a80 <__register_exitproc+0xd4>
 80079ec:	29000117 	ldw	r4,4(r5)
 80079f0:	008007c4 	movi	r2,31
 80079f4:	11002716 	blt	r2,r4,8007a94 <__register_exitproc+0xe8>
 80079f8:	8800101e 	bne	r17,zero,8007a3c <__register_exitproc+0x90>
 80079fc:	2105883a 	add	r2,r4,r4
 8007a00:	1085883a 	add	r2,r2,r2
 8007a04:	20c00044 	addi	r3,r4,1
 8007a08:	1145883a 	add	r2,r2,r5
 8007a0c:	0009883a 	mov	r4,zero
 8007a10:	15000215 	stw	r20,8(r2)
 8007a14:	28c00115 	stw	r3,4(r5)
 8007a18:	2005883a 	mov	r2,r4
 8007a1c:	dfc00517 	ldw	ra,20(sp)
 8007a20:	dd000417 	ldw	r20,16(sp)
 8007a24:	dcc00317 	ldw	r19,12(sp)
 8007a28:	dc800217 	ldw	r18,8(sp)
 8007a2c:	dc400117 	ldw	r17,4(sp)
 8007a30:	dc000017 	ldw	r16,0(sp)
 8007a34:	dec00604 	addi	sp,sp,24
 8007a38:	f800283a 	ret
 8007a3c:	29802204 	addi	r6,r5,136
 8007a40:	00800044 	movi	r2,1
 8007a44:	110e983a 	sll	r7,r2,r4
 8007a48:	30c04017 	ldw	r3,256(r6)
 8007a4c:	2105883a 	add	r2,r4,r4
 8007a50:	1085883a 	add	r2,r2,r2
 8007a54:	1185883a 	add	r2,r2,r6
 8007a58:	19c6b03a 	or	r3,r3,r7
 8007a5c:	14802015 	stw	r18,128(r2)
 8007a60:	14c00015 	stw	r19,0(r2)
 8007a64:	00800084 	movi	r2,2
 8007a68:	30c04015 	stw	r3,256(r6)
 8007a6c:	88bfe31e 	bne	r17,r2,80079fc <__register_exitproc+0x50>
 8007a70:	30804117 	ldw	r2,260(r6)
 8007a74:	11c4b03a 	or	r2,r2,r7
 8007a78:	30804115 	stw	r2,260(r6)
 8007a7c:	003fdf06 	br	80079fc <__register_exitproc+0x50>
 8007a80:	00820074 	movhi	r2,2049
 8007a84:	10ab4b04 	addi	r2,r2,-21204
 8007a88:	100b883a 	mov	r5,r2
 8007a8c:	80805215 	stw	r2,328(r16)
 8007a90:	003fd606 	br	80079ec <__register_exitproc+0x40>
 8007a94:	00800034 	movhi	r2,0
 8007a98:	10800004 	addi	r2,r2,0
 8007a9c:	1000021e 	bne	r2,zero,8007aa8 <__register_exitproc+0xfc>
 8007aa0:	013fffc4 	movi	r4,-1
 8007aa4:	003fdc06 	br	8007a18 <__register_exitproc+0x6c>
 8007aa8:	01006404 	movi	r4,400
 8007aac:	103ee83a 	callr	r2
 8007ab0:	1007883a 	mov	r3,r2
 8007ab4:	103ffa26 	beq	r2,zero,8007aa0 <__register_exitproc+0xf4>
 8007ab8:	80805217 	ldw	r2,328(r16)
 8007abc:	180b883a 	mov	r5,r3
 8007ac0:	18000115 	stw	zero,4(r3)
 8007ac4:	18800015 	stw	r2,0(r3)
 8007ac8:	80c05215 	stw	r3,328(r16)
 8007acc:	18006215 	stw	zero,392(r3)
 8007ad0:	18006315 	stw	zero,396(r3)
 8007ad4:	0009883a 	mov	r4,zero
 8007ad8:	883fc826 	beq	r17,zero,80079fc <__register_exitproc+0x50>
 8007adc:	003fd706 	br	8007a3c <__register_exitproc+0x90>

08007ae0 <register_fini>:
 8007ae0:	f800283a 	ret

08007ae4 <__call_exitprocs>:
 8007ae4:	00820074 	movhi	r2,2049
 8007ae8:	10a55204 	addi	r2,r2,-27320
 8007aec:	10800017 	ldw	r2,0(r2)
 8007af0:	defff304 	addi	sp,sp,-52
 8007af4:	df000b15 	stw	fp,44(sp)
 8007af8:	d8800115 	stw	r2,4(sp)
 8007afc:	00800034 	movhi	r2,0
 8007b00:	10800004 	addi	r2,r2,0
 8007b04:	1005003a 	cmpeq	r2,r2,zero
 8007b08:	d8800215 	stw	r2,8(sp)
 8007b0c:	d8800117 	ldw	r2,4(sp)
 8007b10:	dd400815 	stw	r21,32(sp)
 8007b14:	dd000715 	stw	r20,28(sp)
 8007b18:	10805204 	addi	r2,r2,328
 8007b1c:	dfc00c15 	stw	ra,48(sp)
 8007b20:	ddc00a15 	stw	r23,40(sp)
 8007b24:	dd800915 	stw	r22,36(sp)
 8007b28:	dcc00615 	stw	r19,24(sp)
 8007b2c:	dc800515 	stw	r18,20(sp)
 8007b30:	dc400415 	stw	r17,16(sp)
 8007b34:	dc000315 	stw	r16,12(sp)
 8007b38:	282b883a 	mov	r21,r5
 8007b3c:	2039883a 	mov	fp,r4
 8007b40:	d8800015 	stw	r2,0(sp)
 8007b44:	2829003a 	cmpeq	r20,r5,zero
 8007b48:	d8800117 	ldw	r2,4(sp)
 8007b4c:	14405217 	ldw	r17,328(r2)
 8007b50:	88001026 	beq	r17,zero,8007b94 <__call_exitprocs+0xb0>
 8007b54:	ddc00017 	ldw	r23,0(sp)
 8007b58:	88800117 	ldw	r2,4(r17)
 8007b5c:	8c802204 	addi	r18,r17,136
 8007b60:	143fffc4 	addi	r16,r2,-1
 8007b64:	80000916 	blt	r16,zero,8007b8c <__call_exitprocs+0xa8>
 8007b68:	05bfffc4 	movi	r22,-1
 8007b6c:	a000151e 	bne	r20,zero,8007bc4 <__call_exitprocs+0xe0>
 8007b70:	8409883a 	add	r4,r16,r16
 8007b74:	2105883a 	add	r2,r4,r4
 8007b78:	1485883a 	add	r2,r2,r18
 8007b7c:	10c02017 	ldw	r3,128(r2)
 8007b80:	a8c01126 	beq	r21,r3,8007bc8 <__call_exitprocs+0xe4>
 8007b84:	843fffc4 	addi	r16,r16,-1
 8007b88:	85bff81e 	bne	r16,r22,8007b6c <__call_exitprocs+0x88>
 8007b8c:	d8800217 	ldw	r2,8(sp)
 8007b90:	10003126 	beq	r2,zero,8007c58 <__call_exitprocs+0x174>
 8007b94:	dfc00c17 	ldw	ra,48(sp)
 8007b98:	df000b17 	ldw	fp,44(sp)
 8007b9c:	ddc00a17 	ldw	r23,40(sp)
 8007ba0:	dd800917 	ldw	r22,36(sp)
 8007ba4:	dd400817 	ldw	r21,32(sp)
 8007ba8:	dd000717 	ldw	r20,28(sp)
 8007bac:	dcc00617 	ldw	r19,24(sp)
 8007bb0:	dc800517 	ldw	r18,20(sp)
 8007bb4:	dc400417 	ldw	r17,16(sp)
 8007bb8:	dc000317 	ldw	r16,12(sp)
 8007bbc:	dec00d04 	addi	sp,sp,52
 8007bc0:	f800283a 	ret
 8007bc4:	8409883a 	add	r4,r16,r16
 8007bc8:	88c00117 	ldw	r3,4(r17)
 8007bcc:	2105883a 	add	r2,r4,r4
 8007bd0:	1445883a 	add	r2,r2,r17
 8007bd4:	18ffffc4 	addi	r3,r3,-1
 8007bd8:	11800217 	ldw	r6,8(r2)
 8007bdc:	1c001526 	beq	r3,r16,8007c34 <__call_exitprocs+0x150>
 8007be0:	10000215 	stw	zero,8(r2)
 8007be4:	303fe726 	beq	r6,zero,8007b84 <__call_exitprocs+0xa0>
 8007be8:	00c00044 	movi	r3,1
 8007bec:	1c06983a 	sll	r3,r3,r16
 8007bf0:	90804017 	ldw	r2,256(r18)
 8007bf4:	8cc00117 	ldw	r19,4(r17)
 8007bf8:	1884703a 	and	r2,r3,r2
 8007bfc:	10001426 	beq	r2,zero,8007c50 <__call_exitprocs+0x16c>
 8007c00:	90804117 	ldw	r2,260(r18)
 8007c04:	1884703a 	and	r2,r3,r2
 8007c08:	10000c1e 	bne	r2,zero,8007c3c <__call_exitprocs+0x158>
 8007c0c:	2105883a 	add	r2,r4,r4
 8007c10:	1485883a 	add	r2,r2,r18
 8007c14:	11400017 	ldw	r5,0(r2)
 8007c18:	e009883a 	mov	r4,fp
 8007c1c:	303ee83a 	callr	r6
 8007c20:	88800117 	ldw	r2,4(r17)
 8007c24:	98bfc81e 	bne	r19,r2,8007b48 <__call_exitprocs+0x64>
 8007c28:	b8800017 	ldw	r2,0(r23)
 8007c2c:	147fd526 	beq	r2,r17,8007b84 <__call_exitprocs+0xa0>
 8007c30:	003fc506 	br	8007b48 <__call_exitprocs+0x64>
 8007c34:	8c000115 	stw	r16,4(r17)
 8007c38:	003fea06 	br	8007be4 <__call_exitprocs+0x100>
 8007c3c:	2105883a 	add	r2,r4,r4
 8007c40:	1485883a 	add	r2,r2,r18
 8007c44:	11000017 	ldw	r4,0(r2)
 8007c48:	303ee83a 	callr	r6
 8007c4c:	003ff406 	br	8007c20 <__call_exitprocs+0x13c>
 8007c50:	303ee83a 	callr	r6
 8007c54:	003ff206 	br	8007c20 <__call_exitprocs+0x13c>
 8007c58:	88800117 	ldw	r2,4(r17)
 8007c5c:	1000081e 	bne	r2,zero,8007c80 <__call_exitprocs+0x19c>
 8007c60:	89000017 	ldw	r4,0(r17)
 8007c64:	20000726 	beq	r4,zero,8007c84 <__call_exitprocs+0x1a0>
 8007c68:	b9000015 	stw	r4,0(r23)
 8007c6c:	8809883a 	mov	r4,r17
 8007c70:	00000000 	call	0 <__alt_mem_sdram_0-0x8000000>
 8007c74:	bc400017 	ldw	r17,0(r23)
 8007c78:	883fb71e 	bne	r17,zero,8007b58 <__call_exitprocs+0x74>
 8007c7c:	003fc506 	br	8007b94 <__call_exitprocs+0xb0>
 8007c80:	89000017 	ldw	r4,0(r17)
 8007c84:	882f883a 	mov	r23,r17
 8007c88:	2023883a 	mov	r17,r4
 8007c8c:	883fb21e 	bne	r17,zero,8007b58 <__call_exitprocs+0x74>
 8007c90:	003fc006 	br	8007b94 <__call_exitprocs+0xb0>

08007c94 <alt_sim_halt>:

/*
 * Routine called on exit.
 */
static ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
 8007c94:	defffd04 	addi	sp,sp,-12
 8007c98:	df000215 	stw	fp,8(sp)
 8007c9c:	df000204 	addi	fp,sp,8
 8007ca0:	e13fff15 	stw	r4,-4(fp)
  int r2 = exit_code;
 8007ca4:	e0bfff17 	ldw	r2,-4(fp)
 8007ca8:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 8007cac:	e0bffe17 	ldw	r2,-8(fp)
 8007cb0:	1005003a 	cmpeq	r2,r2,zero
 8007cb4:	1000021e 	bne	r2,zero,8007cc0 <alt_sim_halt+0x2c>
    ALT_SIM_FAIL();
 8007cb8:	002af070 	cmpltui	zero,zero,43969
 8007cbc:	00000106 	br	8007cc4 <alt_sim_halt+0x30>
  } else {
    ALT_SIM_PASS();
 8007cc0:	002af0b0 	cmpltui	zero,zero,43970
  }
#endif /* DEBUG_STUB */
}
 8007cc4:	e037883a 	mov	sp,fp
 8007cc8:	df000017 	ldw	fp,0(sp)
 8007ccc:	dec00104 	addi	sp,sp,4
 8007cd0:	f800283a 	ret

08007cd4 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 8007cd4:	defffd04 	addi	sp,sp,-12
 8007cd8:	dfc00215 	stw	ra,8(sp)
 8007cdc:	df000115 	stw	fp,4(sp)
 8007ce0:	df000104 	addi	fp,sp,4
 8007ce4:	e13fff15 	stw	r4,-4(fp)
  ALT_OS_STOP();

  /* Provide notification to the simulator that we've stopped */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_SIM_HALT().\r\n");
  ALT_SIM_HALT(exit_code);
 8007ce8:	e13fff17 	ldw	r4,-4(fp)
 8007cec:	8007c940 	call	8007c94 <alt_sim_halt>

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 8007cf0:	003fff06 	br	8007cf0 <_exit+0x1c>
 8007cf4:	08007ae0 	cmpeqi	zero,at,491
