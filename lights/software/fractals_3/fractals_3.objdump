
fractals_3.elf:     file format elf32-littlenios2
fractals_3.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x081201b4

Program Header:
    LOAD off    0x00001000 vaddr 0x08120000 paddr 0x08120000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x08120020 paddr 0x08120020 align 2**12
         filesz 0x00008b34 memsz 0x00008b34 flags r-x
    LOAD off    0x00009b54 vaddr 0x08128b54 paddr 0x0812a2ec align 2**12
         filesz 0x00001798 memsz 0x00001798 flags rw-
    LOAD off    0x0000ba84 vaddr 0x0812ba84 paddr 0x0812ba84 align 2**12
         filesz 0x00000000 memsz 0x000002cc flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  08120000  08120000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000194  08120020  08120020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0000867c  081201b4  081201b4  000011b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000324  08128830  08128830  00009830  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001798  08128b54  0812a2ec  00009b54  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000002cc  0812ba84  0812ba84  0000ba84  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000023  00000000  00000000  0000b2ec  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000a38  00000000  00000000  0000b310  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 0000117b  00000000  00000000  0000bd48  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   000126d5  00000000  00000000  0000cec3  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00005823  00000000  00000000  0001f598  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000d8ff  00000000  00000000  00024dbb  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  000012a8  00000000  00000000  000326bc  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000016b5  00000000  00000000  00033964  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000448a  00000000  00000000  00035019  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000030  00000000  00000000  000394a4  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000538  00000000  00000000  000394d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0003c4f7  2**0
                  CONTENTS, READONLY
 18 .cpu          00000005  00000000  00000000  0003c4fa  2**0
                  CONTENTS, READONLY
 19 .simulation_enabled 00000001  00000000  00000000  0003c4ff  2**0
                  CONTENTS, READONLY
 20 .sysid_hash   00000004  00000000  00000000  0003c500  2**0
                  CONTENTS, READONLY
 21 .sysid_base   00000004  00000000  00000000  0003c504  2**0
                  CONTENTS, READONLY
 22 .sysid_time   00000004  00000000  00000000  0003c508  2**0
                  CONTENTS, READONLY
 23 .stderr_dev   0000000b  00000000  00000000  0003c50c  2**0
                  CONTENTS, READONLY
 24 .stdin_dev    0000000b  00000000  00000000  0003c517  2**0
                  CONTENTS, READONLY
 25 .stdout_dev   0000000b  00000000  00000000  0003c522  2**0
                  CONTENTS, READONLY
 26 .sopc_system_name 0000000b  00000000  00000000  0003c52d  2**0
                  CONTENTS, READONLY
 27 .quartus_project_dir 00000020  00000000  00000000  0003c538  2**0
                  CONTENTS, READONLY
 28 .jdi          0001085c  00000000  00000000  0003c558  2**0
                  CONTENTS, READONLY
 29 .sopcinfo     00113e1c  00000000  00000000  0004cdb4  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
08120000 l    d  .entry	00000000 .entry
08120020 l    d  .exceptions	00000000 .exceptions
081201b4 l    d  .text	00000000 .text
08128830 l    d  .rodata	00000000 .rodata
08128b54 l    d  .rwdata	00000000 .rwdata
0812ba84 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
081201fc l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 w_pow.c
00000000 l    df *ABS*	00000000 e_pow.c
08128898 l     O .rodata	00000010 bp
081288a8 l     O .rodata	00000010 dp_l
081288b8 l     O .rodata	00000010 dp_h
00000000 l    df *ABS*	00000000 e_sqrt.c
00000000 l    df *ABS*	00000000 s_fabs.c
00000000 l    df *ABS*	00000000 s_finite.c
00000000 l    df *ABS*	00000000 s_isnand.c
00000000 l    df *ABS*	00000000 s_lib_ver.c
00000000 l    df *ABS*	00000000 s_matherr.c
00000000 l    df *ABS*	00000000 s_nan.c
00000000 l    df *ABS*	00000000 s_rint.c
081288c8 l     O .rodata	00000010 TWO52
00000000 l    df *ABS*	00000000 s_scalbn.c
00000000 l    df *ABS*	00000000 s_copysign.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
08122b88 l     F .text	00000410 _fpadd_parts
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
08123af4 l     F .text	0000007c udivmodsi4
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 errno.c
00000000 l    df *ABS*	00000000 impure.c
08128b54 l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 alt_load.c
081245f8 l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
08128f54 l     O .rwdata	00001060 jtag_uart_3
08129fb4 l     O .rwdata	0000003c mailbox_0
08129ff0 l     O .rwdata	0000003c mailbox_1
0812a02c l     O .rwdata	0000003c mailbox_2
0812a068 l     O .rwdata	0000003c mailbox_3
0812a0a4 l     O .rwdata	00000054 video_pixel_buffer_dma_0
0812497c l     F .text	00000038 alt_dev_reg
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
08124bbc l     F .text	00000228 altera_avalon_jtag_uart_irq
08124de4 l     F .text	000000b0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_mailbox.c
081255b8 l     F .text	0000006c alt_avalon_mutex_reg
08125624 l     F .text	00000060 alt_get_errno
081257b8 l     F .text	00000050 alt_mailbox_increment_ptr
00000000 l    df *ABS*	00000000 altera_avalon_mutex.c
08125988 l     F .text	0000007c alt_mutex_trylock
08125a5c l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 altera_up_avalon_video_pixel_buffer_dma.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_close.c
08127448 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
081274ec l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
081275cc l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
08127a84 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
08127bc0 l     F .text	000000dc alt_file_locked
08127e24 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_irq.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
08128618 l     F .text	00000004 register_fini
00000000 l    df *ABS*	00000000 alt_exit.c
081287cc l     F .text	00000040 alt_sim_halt
00007000 g       *ABS*	00000000 __alt_mem_onchip_memory2_3
08124664 g     F .text	0000006c alt_main
08125808 g     F .text	000000a8 altera_avalon_mailbox_pend
081268f8 g     F .text	000003d0 alt_up_pixel_buffer_dma_draw_vline
0812bac0 g     O .bss	00000100 alt_irq
08122420 g     F .text	00000018 fabs
0812ba88 g     O .bss	00000004 mailbox_0
0812a2ec g       *ABS*	00000000 __flash_rwdata_start
081236a8 g     F .text	00000088 __eqdf2
0812ba8c g     O .bss	00000004 mailbox_2
081258b0 g     F .text	000000d8 altera_avalon_mailbox_get
081228b0 g     F .text	00000174 __divsf3
08125b1c g     F .text	00000040 altera_avalon_mutex_trylock
0812a2a8 g     O .rwdata	00000004 n
08125ccc g     F .text	000001a0 alt_up_pixel_buffer_dma_draw
081237b8 g     F .text	00000088 __gtdf2
08124568 g     F .text	00000010 __errno
08125c8c g     F .text	00000040 alt_up_pixel_buffer_dma_open_dev
08120000 g     F .entry	0000001c __reset
08125bb8 g     F .text	0000007c altera_avalon_mutex_is_mine
08120020 g       *ABS*	00000000 __flash_exceptions_start
0812babc g     O .bss	00000004 errno
08123a48 g     F .text	00000038 __make_dp
08124028 g     F .text	0000002c __make_fp
0812baa8 g     O .bss	00000004 alt_argv
081322a0 g       *ABS*	00000000 _gp
08125e6c g     F .text	00000058 alt_up_pixel_buffer_dma_change_back_buffer_address
00005000 g       *ABS*	00000000 __alt_mem_onchip_memory2_2
0812a120 g     O .rwdata	00000180 alt_fd_list
0812ba90 g     O .bss	00000004 mailbox_1
081276f4 g     F .text	00000094 alt_find_dev
081283d0 g     F .text	000000a0 memcpy
08123950 g     F .text	000000f8 __floatsidf
08127b48 g     F .text	00000078 alt_io_redirect
08123840 g     F .text	00000088 __ltdf2
08128830 g       *ABS*	00000000 __DTOR_END__
08128088 g     F .text	00000020 altera_nios2_irq_init
081256fc g     F .text	000000bc altera_avalon_mailbox_post
08125f1c g     F .text	00000034 alt_up_pixel_buffer_dma_check_swap_buffers_status
08124ffc g     F .text	00000224 altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
00003000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
08123c30 g     F .text	00000008 __udivsi3
081256dc g     F .text	00000020 altera_avalon_mailbox_close
081265a8 g     F .text	00000350 alt_up_pixel_buffer_dma_draw_hline
08122a24 g     F .text	00000078 __lesf2
08128280 g     F .text	00000090 alt_icache_flush
08126d8c g     F .text	000000d0 helper_plot_pixel
0812a2d8 g     O .rwdata	00000004 alt_max_fd
08124368 g     F .text	00000138 __unpack_d
08122b34 g     F .text	00000054 __extendsfdf2
08123018 g     F .text	00000074 __adddf3
08125f50 g     F .text	00000164 alt_up_pixel_buffer_dma_clear_screen
08125c34 g     F .text	00000058 altera_avalon_mutex_first_lock
0812a2ac g     O .rwdata	00000004 __fdlib_version
0812a2b4 g     O .rwdata	00000004 _global_impure_ptr
0812bd50 g       *ABS*	00000000 __bss_end
0812798c g     F .text	000000f8 alt_iic_isr_register
081260b4 g     F .text	000004f4 alt_up_pixel_buffer_dma_draw_box
08127f7c g     F .text	0000010c alt_tick
0812ba84 g     O .bss	00000004 message
08127944 g     F .text	00000048 alt_ic_irq_enabled
08127ee4 g     F .text	00000098 alt_alarm_stop
0812bab0 g     O .bss	00000004 alt_irq_active
081200ec g     F .exceptions	000000c8 alt_irq_handler
0812a0f8 g     O .rwdata	00000028 alt_dev_null
08120790 g     F .text	00000124 barrier
08125a04 g     F .text	00000058 altera_avalon_mutex_open
0812249c g     F .text	00000210 rint
08123eb8 g     F .text	000000c8 __unpack_f
081274a8 g     F .text	00000044 alt_dcache_flush_all
08126cc8 g     F .text	000000c4 alt_up_pixel_buffer_dma_draw_rectangle
0812a2ec g       *ABS*	00000000 __ram_rwdata_end
0812a2d0 g     O .rwdata	00000008 alt_dev_list
08126e5c g     F .text	0000039c alt_up_pixel_buffer_dma_draw_line
0812a2c0 g     O .rwdata	00000008 alt_mutex_list
08128b54 g       *ABS*	00000000 __ram_rodata_end
081238c8 g     F .text	00000088 __ledf2
08123c38 g     F .text	00000008 __umodsi3
0812bd50 g       *ABS*	00000000 end
08123d58 g     F .text	00000160 __pack_f
08124afc g     F .text	000000c0 altera_avalon_jtag_uart_init
0812882c g       *ABS*	00000000 __CTOR_LIST__
08400000 g       *ABS*	00000000 __alt_stack_pointer
08123cd8 g     F .text	00000080 __clzsi2
08125220 g     F .text	00000240 altera_avalon_jtag_uart_write
08125460 g     F .text	00000158 alt_avalon_mailbox_init
0812861c g     F .text	000001b0 __call_exitprocs
081201b4 g     F .text	0000004c _start
0812bab4 g     O .bss	00000004 _alt_tick_rate
0812bab8 g     O .bss	00000004 _alt_nticks
08124704 g     F .text	00000278 alt_sys_init
08122a9c g     F .text	00000098 __floatsisf
081284e4 g     F .text	00000134 __register_exitproc
08125b5c g     F .text	0000005c altera_avalon_mutex_unlock
08120e58 g     F .text	00001300 __ieee754_pow
08124e94 g     F .text	00000074 altera_avalon_jtag_uart_close
081209d0 g     F .text	00000488 pow
08128b54 g       *ABS*	00000000 __ram_rwdata_start
08128830 g       *ABS*	00000000 __ram_rodata_start
00004000 g       *ABS*	00000000 __alt_mem_onchip_memory2_1
081249b4 g     F .text	00000058 altera_avalon_jtag_uart_read_fd
081281c8 g     F .text	000000b8 alt_get_fd
081244a0 g     F .text	000000c8 __fpcmp_parts_d
0812835c g     F .text	00000074 memcmp
08124a64 g     F .text	00000048 altera_avalon_jtag_uart_close_fd
0812ba94 g     O .bss	00000004 col
0812bd50 g       *ABS*	00000000 __alt_stack_base
08124aac g     F .text	00000050 altera_avalon_jtag_uart_ioctl_fd
08123450 g     F .text	00000258 __divdf3
0812308c g     F .text	000003c4 __muldf3
081288d8 g     O .rodata	00000010 __thenan_sf
081280a8 g     F .text	00000120 alt_find_file
08127518 g     F .text	000000b4 alt_dev_llist_insert
0812ba84 g       *ABS*	00000000 __bss_start
08120200 g     F .text	00000590 main
0812baac g     O .bss	00000004 alt_envp
08125ec4 g     F .text	00000058 alt_up_pixel_buffer_dma_swap_buffers
08124a0c g     F .text	00000058 altera_avalon_jtag_uart_write_fd
08122484 g     F .text	00000008 matherr
08123a80 g     F .text	00000074 __truncdfsf2
0812bbc0 g     O .bss	00000190 _atexit0
08125adc g     F .text	00000040 altera_avalon_mutex_lock
0812a2dc g     O .rwdata	00000004 alt_errno
08123b70 g     F .text	00000060 __divsi3
081288e8 g     O .rodata	00000014 __thenan_df
08128830 g       *ABS*	00000000 __CTOR_END__
08122438 g     F .text	0000001c finite
08128830 g       *ABS*	00000000 __flash_rodata_start
08128830 g       *ABS*	00000000 __DTOR_LIST__
0812288c g     F .text	00000024 copysign
08123730 g     F .text	00000088 __nedf2
11000000 g       *ABS*	00000000 __alt_mem_sram_0
081246d0 g     F .text	00000034 alt_irq_init
08127e84 g     F .text	00000060 alt_release_fd
081288fc g     O .rodata	00000100 __clz_tab
08128310 g     F .text	00000014 atexit
0812ba98 g     O .bss	00000004 my_pixel_buffer
0812ba9c g     O .bss	00000004 mailbox_3
0812a2b0 g     O .rwdata	00000004 _impure_ptr
0812baa4 g     O .bss	00000004 alt_argc
081226ac g     F .text	000001e0 scalbn
08127690 g     F .text	00000064 _do_dtors
08000000 g       *ABS*	00000000 __alt_mem_sdram_0
08120020 g       .exceptions	00000000 alt_irq_entry
0812a2b8 g     O .rwdata	00000008 alt_mailbox_list
0812a2a0 g     O .rwdata	00000004 num_rows
0812a2c8 g     O .rwdata	00000008 alt_fs_list
0812248c g     F .text	00000010 nan
08120020 g       *ABS*	00000000 __ram_exceptions_start
08122158 g     F .text	000002c8 __ieee754_sqrt
081277b8 g     F .text	00000050 alt_ic_isr_register
0812a2ec g       *ABS*	00000000 _edata
0812bd50 g       *ABS*	00000000 _end
081208e4 g     F .text	000000ec post
081201b4 g       *ABS*	00000000 __ram_exceptions_end
08124f08 g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
081278a4 g     F .text	000000a0 alt_ic_irq_disable
08128324 g     F .text	00000038 exit
08123bd0 g     F .text	00000060 __modsi3
08400000 g       *ABS*	00000000 __alt_data_end
08120020 g     F .exceptions	00000000 alt_exception
08125684 g     F .text	00000058 altera_avalon_mailbox_open
08123f80 g     F .text	000000a8 __fpcmp_parts_f
0812880c g     F .text	00000020 _exit
08122454 g     F .text	00000030 __isnand
081271f8 g     F .text	00000154 alt_alarm_start
08123c40 g     F .text	00000098 __muldi3
08128470 g     F .text	00000074 strlen
08127c9c g     F .text	00000188 open
08127788 g     F .text	00000030 alt_icache_flush_all
081208b4 g     F .text	00000030 pend
0812a2e0 g     O .rwdata	00000004 alt_priority_mask
0812a2a4 g     O .rwdata	00000004 num_cols
08127808 g     F .text	0000009c alt_ic_irq_enable
08125abc g     F .text	00000020 altera_avalon_mutex_close
08122f98 g     F .text	00000080 __subdf3
0812a2e4 g     O .rwdata	00000008 alt_alarm_list
0812762c g     F .text	00000064 _do_ctors
0812734c g     F .text	000000fc close
08124578 g     F .text	00000080 alt_load
0812baa0 g     O .bss	00000004 row
08124054 g     F .text	00000314 __pack_d
00000000  w      *UND*	00000000 free



Disassembly of section .entry:

08120000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && !defined(ALT_SIM_OPTIMIZE)
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
 8120000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
 8120004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
 8120008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
 812000c:	00bffd16 	blt	zero,r2,8120004 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 8120010:	004204b4 	movhi	at,2066
    ori r1, r1, %lo(_start)
 8120014:	08406d14 	ori	at,at,436
    jmp r1
 8120018:	0800683a 	jmp	at
 812001c:	00000000 	call	0 <__alt_mem_onchip_memory2_0-0x3000>

Disassembly of section .exceptions:

08120020 <alt_exception>:
         * Process an exception.  For all exceptions we must preserve all
         * caller saved registers on the stack (See the Nios2 ABI
         * documentation for details).
         */

        addi  sp, sp, -76
 8120020:	deffed04 	addi	sp,sp,-76

#endif

#endif

        stw   ra,  0(sp)
 8120024:	dfc00015 	stw	ra,0(sp)
        /*
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */

        stw   r1,   8(sp)
 8120028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 812002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 8120030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 8120034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 8120038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 812003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 8120040:	d9c00815 	stw	r7,32(sp)

        rdctl r5, estatus
 8120044:	000b307a 	rdctl	r5,estatus

        stw   r8,  36(sp)
 8120048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 812004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 8120050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 8120054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 8120058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 812005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 8120060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 8120064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 8120068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 812006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 8120070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 8120074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 8120078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 812007c:	10000326 	beq	r2,zero,812008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 8120080:	20000226 	beq	r4,zero,812008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 8120084:	81200ec0 	call	81200ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 8120088:	00000306 	br	8120098 <alt_exception+0x78>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
 812008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
 8120090:	e8bfff17 	ldw	r2,-4(ea)
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
 8120094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 8120098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 812009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 81200a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 81200a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 81200a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 81200ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 81200b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 81200b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 81200b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 81200bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 81200c0:	d9c00817 	ldw	r7,32(sp)
#ifdef ALT_STACK_CHECK
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif
#endif

        ldw   r8,  36(sp)
 81200c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 81200c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 81200cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 81200d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 81200d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 81200d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 81200dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 81200e0:	dbc01017 	ldw	r15,64(sp)
#endif

        ldw   sp,  76(sp)

#else
        addi  sp, sp, 76
 81200e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 81200e8:	ef80083a 	eret

081200ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 81200ec:	defff904 	addi	sp,sp,-28
 81200f0:	dfc00615 	stw	ra,24(sp)
 81200f4:	df000515 	stw	fp,20(sp)
 81200f8:	df000504 	addi	fp,sp,20
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 81200fc:	0005313a 	rdctl	r2,ipending
 8120100:	e0bffc15 	stw	r2,-16(fp)

  return active;
 8120104:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 8120108:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
 812010c:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 8120110:	00800044 	movi	r2,1
 8120114:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 8120118:	e0ffff17 	ldw	r3,-4(fp)
 812011c:	e0bffe17 	ldw	r2,-8(fp)
 8120120:	1884703a 	and	r2,r3,r2
 8120124:	1005003a 	cmpeq	r2,r2,zero
 8120128:	1000161e 	bne	r2,zero,8120184 <alt_irq_handler+0x98>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 812012c:	e0bffd17 	ldw	r2,-12(fp)
 8120130:	00c204f4 	movhi	r3,2067
 8120134:	18eeb004 	addi	r3,r3,-17728
 8120138:	100490fa 	slli	r2,r2,3
 812013c:	10c5883a 	add	r2,r2,r3
 8120140:	11400017 	ldw	r5,0(r2)
 8120144:	e0bffd17 	ldw	r2,-12(fp)
 8120148:	00c204f4 	movhi	r3,2067
 812014c:	18eeb004 	addi	r3,r3,-17728
 8120150:	100490fa 	slli	r2,r2,3
 8120154:	10c5883a 	add	r2,r2,r3
 8120158:	10800104 	addi	r2,r2,4
 812015c:	11000017 	ldw	r4,0(r2)
 8120160:	283ee83a 	callr	r5
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 8120164:	0005313a 	rdctl	r2,ipending
 8120168:	e0bffb15 	stw	r2,-20(fp)

  return active;
 812016c:	e0bffb17 	ldw	r2,-20(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
 8120170:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
 8120174:	e0bfff17 	ldw	r2,-4(fp)
 8120178:	1004c03a 	cmpne	r2,r2,zero
 812017c:	103fe31e 	bne	r2,zero,812010c <alt_irq_handler+0x20>
 8120180:	00000706 	br	81201a0 <alt_irq_handler+0xb4>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
 8120184:	e0bffe17 	ldw	r2,-8(fp)
 8120188:	1085883a 	add	r2,r2,r2
 812018c:	e0bffe15 	stw	r2,-8(fp)
      i++;
 8120190:	e0bffd17 	ldw	r2,-12(fp)
 8120194:	10800044 	addi	r2,r2,1
 8120198:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 812019c:	003fde06 	br	8120118 <alt_irq_handler+0x2c>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
 81201a0:	e037883a 	mov	sp,fp
 81201a4:	dfc00117 	ldw	ra,4(sp)
 81201a8:	df000017 	ldw	fp,0(sp)
 81201ac:	dec00204 	addi	sp,sp,8
 81201b0:	f800283a 	ret

Disassembly of section .text:

081201b4 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
 81201b4:	00810014 	movui	r2,1024
#endif

0:
    initd 0(r2)
 81201b8:	10000033 	initd	0(r2)
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
 81201bc:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
 81201c0:	00bffd16 	blt	zero,r2,81201b8 <_start+0x4>
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 81201c4:	06c21034 	movhi	sp,2112
    ori sp, sp, %lo(__alt_stack_pointer)
 81201c8:	dec00014 	ori	sp,sp,0

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
 81201cc:	068204f4 	movhi	gp,2067
    ori gp, gp, %lo(_gp)
 81201d0:	d688a814 	ori	gp,gp,8864
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 81201d4:	008204b4 	movhi	r2,2066
    ori r2, r2, %lo(__bss_start)
 81201d8:	10aea114 	ori	r2,r2,47748

    movhi r3, %hi(__bss_end)
 81201dc:	00c204b4 	movhi	r3,2066
    ori r3, r3, %lo(__bss_end)
 81201e0:	18ef5414 	ori	r3,r3,48464

    beq r2, r3, 1f
 81201e4:	10c00326 	beq	r2,r3,81201f4 <_start+0x40>

0:
    stw zero, (r2)
 81201e8:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 81201ec:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 81201f0:	10fffd36 	bltu	r2,r3,81201e8 <_start+0x34>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 81201f4:	81245780 	call	8124578 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 81201f8:	81246640 	call	8124664 <alt_main>

081201fc <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 81201fc:	003fff06 	br	81201fc <alt_after_alt_main>

08120200 <main>:
void barrier(int id);
void pend(alt_mailbox_dev*);
void post(int id, alt_u32 mess);


int main() {
 8120200:	deffe904 	addi	sp,sp,-92
 8120204:	dfc01615 	stw	ra,88(sp)
 8120208:	df001515 	stw	fp,84(sp)
 812020c:	dc401415 	stw	r17,80(sp)
 8120210:	dc001315 	stw	r16,76(sp)
 8120214:	df001304 	addi	fp,sp,76

	mailbox_0 = altera_avalon_mailbox_open("/dev/mailbox_0");
 8120218:	010204f4 	movhi	r4,2067
 812021c:	21220c04 	addi	r4,r4,-30672
 8120220:	81256840 	call	8125684 <altera_avalon_mailbox_open>
 8120224:	d0a5fa15 	stw	r2,-26648(gp)
	mailbox_1 = altera_avalon_mailbox_open("/dev/mailbox_1");
 8120228:	010204f4 	movhi	r4,2067
 812022c:	21221004 	addi	r4,r4,-30656
 8120230:	81256840 	call	8125684 <altera_avalon_mailbox_open>
 8120234:	d0a5fc15 	stw	r2,-26640(gp)
	mailbox_2 = altera_avalon_mailbox_open("/dev/mailbox_2");
 8120238:	010204f4 	movhi	r4,2067
 812023c:	21221404 	addi	r4,r4,-30640
 8120240:	81256840 	call	8125684 <altera_avalon_mailbox_open>
 8120244:	d0a5fb15 	stw	r2,-26644(gp)
	mailbox_3 = altera_avalon_mailbox_open("/dev/mailbox_3");
 8120248:	010204f4 	movhi	r4,2067
 812024c:	21221804 	addi	r4,r4,-30624
 8120250:	81256840 	call	8125684 <altera_avalon_mailbox_open>
 8120254:	d0a5ff15 	stw	r2,-26628(gp)

	int cpuid = __builtin_rdctl(5);
 8120258:	0005317a 	rdctl	r2,cpuid
 812025c:	e0bffe15 	stw	r2,-8(fp)

	barrier(cpuid);
 8120260:	e13ffe17 	ldw	r4,-8(fp)
 8120264:	81207900 	call	8120790 <barrier>
	//alt_up_pixel_buffer_dma_dev *my_pixel_buffer; //declare global var
	my_pixel_buffer=alt_up_pixel_buffer_dma_open_dev("/dev/video_pixel_buffer_dma_0"); //assign it
 8120268:	010204f4 	movhi	r4,2067
 812026c:	21221c04 	addi	r4,r4,-30608
 8120270:	8125c8c0 	call	8125c8c <alt_up_pixel_buffer_dma_open_dev>
 8120274:	d0a5fe15 	stw	r2,-26632(gp)
	alt_up_pixel_buffer_dma_clear_screen(my_pixel_buffer,0);//clear_screen();
 8120278:	d125fe17 	ldw	r4,-26632(gp)
 812027c:	000b883a 	mov	r5,zero
 8120280:	8125f500 	call	8125f50 <alt_up_pixel_buffer_dma_clear_screen>

	int zoom = 1;
 8120284:	00800044 	movi	r2,1
 8120288:	e0bffd15 	stw	r2,-12(fp)
	float min_x, max_x, min_y, max_y;
	min_x = -2.5;
 812028c:	00b00834 	movhi	r2,49184
 8120290:	e0bffc15 	stw	r2,-16(fp)
	max_x = 1.0;
 8120294:	008fe034 	movhi	r2,16256
 8120298:	e0bffb15 	stw	r2,-20(fp)
	min_y = -1.0;
 812029c:	00afe034 	movhi	r2,49024
 81202a0:	e0bffa15 	stw	r2,-24(fp)
	max_y = 1.0;
 81202a4:	008fe034 	movhi	r2,16256
 81202a8:	e0bff915 	stw	r2,-28(fp)

	float target_x, target_y;
	int iteration;
	int is_target; //false

	barrier(cpuid);
 81202ac:	e13ffe17 	ldw	r4,-8(fp)
 81202b0:	81207900 	call	8120790 <barrier>
	while (1) {
		//printf("barrier 1")
		barrier(cpuid);
 81202b4:	e13ffe17 	ldw	r4,-8(fp)
 81202b8:	81207900 	call	8120790 <barrier>
		//printf("%d", cpuid);
		is_target = 0;
 81202bc:	e03fee15 	stw	zero,-72(fp)

		for (i = cpuid; i < num_rows; i+=4) {
 81202c0:	e0bffe17 	ldw	r2,-8(fp)
 81202c4:	e0bff815 	stw	r2,-32(fp)
 81202c8:	00008806 	br	81204ec <main+0x2ec>
			for (j = 0; j < num_cols; j++) {
 81202cc:	e03ff715 	stw	zero,-36(fp)
 81202d0:	00007e06 	br	81204cc <main+0x2cc>
				x = 0;
 81202d4:	e03ff615 	stw	zero,-40(fp)
				y = 0;
 81202d8:	e03ff515 	stw	zero,-44(fp)
				z = 0;
 81202dc:	e03ff415 	stw	zero,-48(fp)
				x0 = j/320.0*(max_x - min_x) + min_x;
 81202e0:	e13ff717 	ldw	r4,-36(fp)
 81202e4:	8122a9c0 	call	8122a9c <__floatsisf>
 81202e8:	1009883a 	mov	r4,r2
 81202ec:	0150e834 	movhi	r5,17312
 81202f0:	81228b00 	call	81228b0 <__divsf3>
 81202f4:	1009883a 	mov	r4,r2
 81202f8:	e0fffb17 	ldw	r3,-20(fp)
 81202fc:	e0bffc17 	ldw	r2,-16(fp)
 8120300:	1885ffb2 	custom	254,r2,r3,r2
 8120304:	2087ff32 	custom	252,r3,r4,r2
 8120308:	e0bffc17 	ldw	r2,-16(fp)
 812030c:	1885ff72 	custom	253,r2,r3,r2
 8120310:	e0bff315 	stw	r2,-52(fp)
				y0 = (239.0-i)/240.0*(max_y - min_y) + min_y;
 8120314:	e13ff817 	ldw	r4,-32(fp)
 8120318:	8122a9c0 	call	8122a9c <__floatsisf>
 812031c:	1007883a 	mov	r3,r2
 8120320:	0090dbf4 	movhi	r2,17263
 8120324:	10c5ffb2 	custom	254,r2,r2,r3
 8120328:	1009883a 	mov	r4,r2
 812032c:	0150dc34 	movhi	r5,17264
 8120330:	81228b00 	call	81228b0 <__divsf3>
 8120334:	1009883a 	mov	r4,r2
 8120338:	e0fff917 	ldw	r3,-28(fp)
 812033c:	e0bffa17 	ldw	r2,-24(fp)
 8120340:	1885ffb2 	custom	254,r2,r3,r2
 8120344:	2087ff32 	custom	252,r3,r4,r2
 8120348:	e0bffa17 	ldw	r2,-24(fp)
 812034c:	1885ff72 	custom	253,r2,r3,r2
 8120350:	e0bff215 	stw	r2,-56(fp)
				//printf("x0: %f...", x0);
				//printf("y0: %f\n", y0);
				iteration = 0;
 8120354:	e03fef15 	stw	zero,-68(fp)

				while( (x*x + y*y) <= 4 && iteration < 500) {
 8120358:	00002006 	br	81203dc <main+0x1dc>
					float xtemp = x*x - y*y + x0;
 812035c:	e0fff617 	ldw	r3,-40(fp)
 8120360:	e0bff617 	ldw	r2,-40(fp)
 8120364:	1889ff32 	custom	252,r4,r3,r2
 8120368:	e0fff517 	ldw	r3,-44(fp)
 812036c:	e0bff517 	ldw	r2,-44(fp)
 8120370:	1885ff32 	custom	252,r2,r3,r2
 8120374:	2087ffb2 	custom	254,r3,r4,r2
 8120378:	e0bff317 	ldw	r2,-52(fp)
 812037c:	1885ff72 	custom	253,r2,r3,r2
 8120380:	e0bfed15 	stw	r2,-76(fp)
					y = 2*x*y + y0;
 8120384:	e0bff617 	ldw	r2,-40(fp)
 8120388:	1087ff72 	custom	253,r3,r2,r2
 812038c:	e0bff517 	ldw	r2,-44(fp)
 8120390:	1887ff32 	custom	252,r3,r3,r2
 8120394:	e0bff217 	ldw	r2,-56(fp)
 8120398:	1885ff72 	custom	253,r2,r3,r2
 812039c:	e0bff515 	stw	r2,-44(fp)
					x = xtemp;
 81203a0:	e0bfed17 	ldw	r2,-76(fp)
 81203a4:	e0bff615 	stw	r2,-40(fp)
					iteration++;
 81203a8:	e0bfef17 	ldw	r2,-68(fp)
 81203ac:	10800044 	addi	r2,r2,1
 81203b0:	e0bfef15 	stw	r2,-68(fp)
					if(iteration == 450 && is_target == 0) {
 81203b4:	e0bfef17 	ldw	r2,-68(fp)
 81203b8:	10807098 	cmpnei	r2,r2,450
 81203bc:	1000071e 	bne	r2,zero,81203dc <main+0x1dc>
 81203c0:	e0bfee17 	ldw	r2,-72(fp)
 81203c4:	1004c03a 	cmpne	r2,r2,zero
 81203c8:	1000041e 	bne	r2,zero,81203dc <main+0x1dc>
						barrier(cpuid);
 81203cc:	e13ffe17 	ldw	r4,-8(fp)
 81203d0:	81207900 	call	8120790 <barrier>
						is_target = 1;
 81203d4:	00800044 	movi	r2,1
 81203d8:	e0bfee15 	stw	r2,-72(fp)
				y0 = (239.0-i)/240.0*(max_y - min_y) + min_y;
				//printf("x0: %f...", x0);
				//printf("y0: %f\n", y0);
				iteration = 0;

				while( (x*x + y*y) <= 4 && iteration < 500) {
 81203dc:	e0fff617 	ldw	r3,-40(fp)
 81203e0:	e0bff617 	ldw	r2,-40(fp)
 81203e4:	1889ff32 	custom	252,r4,r3,r2
 81203e8:	e0fff517 	ldw	r3,-44(fp)
 81203ec:	e0bff517 	ldw	r2,-44(fp)
 81203f0:	1885ff32 	custom	252,r2,r3,r2
 81203f4:	2085ff72 	custom	253,r2,r4,r2
 81203f8:	e03fff05 	stb	zero,-4(fp)
 81203fc:	1009883a 	mov	r4,r2
 8120400:	01502034 	movhi	r5,16512
 8120404:	8122a240 	call	8122a24 <__lesf2>
 8120408:	10800050 	cmplti	r2,r2,1
 812040c:	1000011e 	bne	r2,zero,8120414 <main+0x214>
 8120410:	00000206 	br	812041c <main+0x21c>
 8120414:	00800044 	movi	r2,1
 8120418:	e0bfff05 	stb	r2,-4(fp)
 812041c:	e0ffff03 	ldbu	r3,-4(fp)
 8120420:	1880005c 	xori	r2,r3,1
 8120424:	10803fcc 	andi	r2,r2,255
 8120428:	1004c03a 	cmpne	r2,r2,zero
 812042c:	1000031e 	bne	r2,zero,812043c <main+0x23c>
 8120430:	e0bfef17 	ldw	r2,-68(fp)
 8120434:	10807d10 	cmplti	r2,r2,500
 8120438:	103fc81e 	bne	r2,zero,812035c <main+0x15c>
						barrier(cpuid);
						is_target = 1;
					}
				}
				//printf("Iteration: %d\n", iteration);
				if(iteration == 500) {
 812043c:	e0bfef17 	ldw	r2,-68(fp)
 8120440:	10807d18 	cmpnei	r2,r2,500
 8120444:	1000061e 	bne	r2,zero,8120460 <main+0x260>
					alt_up_pixel_buffer_dma_draw(my_pixel_buffer, 0,j,i );
 8120448:	d125fe17 	ldw	r4,-26632(gp)
 812044c:	e1bff717 	ldw	r6,-36(fp)
 8120450:	e1fff817 	ldw	r7,-32(fp)
 8120454:	000b883a 	mov	r5,zero
 8120458:	8125ccc0 	call	8125ccc <alt_up_pixel_buffer_dma_draw>
 812045c:	00001806 	br	81204c0 <main+0x2c0>
				} else {
					alt_up_pixel_buffer_dma_draw(my_pixel_buffer, (iteration*8/zoom) + (iteration*4/zoom) +(iteration*2/zoom), j, i);
 8120460:	d465fe17 	ldw	r17,-26632(gp)
 8120464:	e0bfef17 	ldw	r2,-68(fp)
 8120468:	100890fa 	slli	r4,r2,3
 812046c:	e17ffd17 	ldw	r5,-12(fp)
 8120470:	8123b700 	call	8123b70 <__divsi3>
 8120474:	1021883a 	mov	r16,r2
 8120478:	e0bfef17 	ldw	r2,-68(fp)
 812047c:	1085883a 	add	r2,r2,r2
 8120480:	1085883a 	add	r2,r2,r2
 8120484:	1009883a 	mov	r4,r2
 8120488:	e17ffd17 	ldw	r5,-12(fp)
 812048c:	8123b700 	call	8123b70 <__divsi3>
 8120490:	80a1883a 	add	r16,r16,r2
 8120494:	e0bfef17 	ldw	r2,-68(fp)
 8120498:	1085883a 	add	r2,r2,r2
 812049c:	1009883a 	mov	r4,r2
 81204a0:	e17ffd17 	ldw	r5,-12(fp)
 81204a4:	8123b700 	call	8123b70 <__divsi3>
 81204a8:	8085883a 	add	r2,r16,r2
 81204ac:	100b883a 	mov	r5,r2
 81204b0:	e1bff717 	ldw	r6,-36(fp)
 81204b4:	e1fff817 	ldw	r7,-32(fp)
 81204b8:	8809883a 	mov	r4,r17
 81204bc:	8125ccc0 	call	8125ccc <alt_up_pixel_buffer_dma_draw>
		barrier(cpuid);
		//printf("%d", cpuid);
		is_target = 0;

		for (i = cpuid; i < num_rows; i+=4) {
			for (j = 0; j < num_cols; j++) {
 81204c0:	e0bff717 	ldw	r2,-36(fp)
 81204c4:	10800044 	addi	r2,r2,1
 81204c8:	e0bff715 	stw	r2,-36(fp)
 81204cc:	d0e00117 	ldw	r3,-32764(gp)
 81204d0:	e0bff717 	ldw	r2,-36(fp)
 81204d4:	10ff7f16 	blt	r2,r3,81202d4 <main+0xd4>
				} else {
					alt_up_pixel_buffer_dma_draw(my_pixel_buffer, (iteration*8/zoom) + (iteration*4/zoom) +(iteration*2/zoom), j, i);
				}
				//barrier(cpuid);
			}
			barrier(cpuid);
 81204d8:	e13ffe17 	ldw	r4,-8(fp)
 81204dc:	81207900 	call	8120790 <barrier>
		//printf("barrier 1")
		barrier(cpuid);
		//printf("%d", cpuid);
		is_target = 0;

		for (i = cpuid; i < num_rows; i+=4) {
 81204e0:	e0bff817 	ldw	r2,-32(fp)
 81204e4:	10800104 	addi	r2,r2,4
 81204e8:	e0bff815 	stw	r2,-32(fp)
 81204ec:	d0e00017 	ldw	r3,-32768(gp)
 81204f0:	e0bff817 	ldw	r2,-32(fp)
 81204f4:	10ff7516 	blt	r2,r3,81202cc <main+0xcc>
				}
				//barrier(cpuid);
			}
			barrier(cpuid);
		}
		if(is_target == 1) {
 81204f8:	e0bfee17 	ldw	r2,-72(fp)
 81204fc:	10800058 	cmpnei	r2,r2,1
 8120500:	1000041e 	bne	r2,zero,8120514 <main+0x314>
			target_x = x0;
 8120504:	e0bff317 	ldw	r2,-52(fp)
 8120508:	e0bff115 	stw	r2,-60(fp)
			target_y = y0;
 812050c:	e0bff217 	ldw	r2,-56(fp)
 8120510:	e0bff015 	stw	r2,-64(fp)
		}
		barrier(cpuid);
 8120514:	e13ffe17 	ldw	r4,-8(fp)
 8120518:	81207900 	call	8120790 <barrier>
		min_x = target_x - (1/(pow(1.5, zoom)));
 812051c:	e13ff117 	ldw	r4,-60(fp)
 8120520:	8122b340 	call	8122b34 <__extendsfdf2>
 8120524:	1021883a 	mov	r16,r2
 8120528:	1823883a 	mov	r17,r3
 812052c:	e13ffd17 	ldw	r4,-12(fp)
 8120530:	81239500 	call	8123950 <__floatsidf>
 8120534:	100f883a 	mov	r7,r2
 8120538:	1811883a 	mov	r8,r3
 812053c:	0009883a 	mov	r4,zero
 8120540:	014ffe34 	movhi	r5,16376
 8120544:	380d883a 	mov	r6,r7
 8120548:	400f883a 	mov	r7,r8
 812054c:	81209d00 	call	81209d0 <pow>
 8120550:	1009883a 	mov	r4,r2
 8120554:	180b883a 	mov	r5,r3
 8120558:	2005883a 	mov	r2,r4
 812055c:	2807883a 	mov	r3,r5
 8120560:	0009883a 	mov	r4,zero
 8120564:	016ffc34 	movhi	r5,49136
 8120568:	100d883a 	mov	r6,r2
 812056c:	180f883a 	mov	r7,r3
 8120570:	81234500 	call	8123450 <__divdf3>
 8120574:	1009883a 	mov	r4,r2
 8120578:	180b883a 	mov	r5,r3
 812057c:	2005883a 	mov	r2,r4
 8120580:	2807883a 	mov	r3,r5
 8120584:	8009883a 	mov	r4,r16
 8120588:	880b883a 	mov	r5,r17
 812058c:	100d883a 	mov	r6,r2
 8120590:	180f883a 	mov	r7,r3
 8120594:	81230180 	call	8123018 <__adddf3>
 8120598:	1009883a 	mov	r4,r2
 812059c:	180b883a 	mov	r5,r3
 81205a0:	2005883a 	mov	r2,r4
 81205a4:	2807883a 	mov	r3,r5
 81205a8:	1009883a 	mov	r4,r2
 81205ac:	180b883a 	mov	r5,r3
 81205b0:	8123a800 	call	8123a80 <__truncdfsf2>
 81205b4:	e0bffc15 	stw	r2,-16(fp)
		max_x = target_x + (1/(pow(1.5, zoom)));
 81205b8:	e13ff117 	ldw	r4,-60(fp)
 81205bc:	8122b340 	call	8122b34 <__extendsfdf2>
 81205c0:	1021883a 	mov	r16,r2
 81205c4:	1823883a 	mov	r17,r3
 81205c8:	e13ffd17 	ldw	r4,-12(fp)
 81205cc:	81239500 	call	8123950 <__floatsidf>
 81205d0:	100f883a 	mov	r7,r2
 81205d4:	1811883a 	mov	r8,r3
 81205d8:	0009883a 	mov	r4,zero
 81205dc:	014ffe34 	movhi	r5,16376
 81205e0:	380d883a 	mov	r6,r7
 81205e4:	400f883a 	mov	r7,r8
 81205e8:	81209d00 	call	81209d0 <pow>
 81205ec:	100f883a 	mov	r7,r2
 81205f0:	1811883a 	mov	r8,r3
 81205f4:	0009883a 	mov	r4,zero
 81205f8:	014ffc34 	movhi	r5,16368
 81205fc:	380d883a 	mov	r6,r7
 8120600:	400f883a 	mov	r7,r8
 8120604:	81234500 	call	8123450 <__divdf3>
 8120608:	1009883a 	mov	r4,r2
 812060c:	180b883a 	mov	r5,r3
 8120610:	2005883a 	mov	r2,r4
 8120614:	2807883a 	mov	r3,r5
 8120618:	8009883a 	mov	r4,r16
 812061c:	880b883a 	mov	r5,r17
 8120620:	100d883a 	mov	r6,r2
 8120624:	180f883a 	mov	r7,r3
 8120628:	81230180 	call	8123018 <__adddf3>
 812062c:	1009883a 	mov	r4,r2
 8120630:	180b883a 	mov	r5,r3
 8120634:	2005883a 	mov	r2,r4
 8120638:	2807883a 	mov	r3,r5
 812063c:	1009883a 	mov	r4,r2
 8120640:	180b883a 	mov	r5,r3
 8120644:	8123a800 	call	8123a80 <__truncdfsf2>
 8120648:	e0bffb15 	stw	r2,-20(fp)
		min_y = target_y - (0.75/(pow(1.5, zoom)));
 812064c:	e13ff017 	ldw	r4,-64(fp)
 8120650:	8122b340 	call	8122b34 <__extendsfdf2>
 8120654:	1021883a 	mov	r16,r2
 8120658:	1823883a 	mov	r17,r3
 812065c:	e13ffd17 	ldw	r4,-12(fp)
 8120660:	81239500 	call	8123950 <__floatsidf>
 8120664:	100f883a 	mov	r7,r2
 8120668:	1811883a 	mov	r8,r3
 812066c:	0009883a 	mov	r4,zero
 8120670:	014ffe34 	movhi	r5,16376
 8120674:	380d883a 	mov	r6,r7
 8120678:	400f883a 	mov	r7,r8
 812067c:	81209d00 	call	81209d0 <pow>
 8120680:	100f883a 	mov	r7,r2
 8120684:	1811883a 	mov	r8,r3
 8120688:	0009883a 	mov	r4,zero
 812068c:	016ffa34 	movhi	r5,49128
 8120690:	380d883a 	mov	r6,r7
 8120694:	400f883a 	mov	r7,r8
 8120698:	81234500 	call	8123450 <__divdf3>
 812069c:	1009883a 	mov	r4,r2
 81206a0:	180b883a 	mov	r5,r3
 81206a4:	2005883a 	mov	r2,r4
 81206a8:	2807883a 	mov	r3,r5
 81206ac:	8009883a 	mov	r4,r16
 81206b0:	880b883a 	mov	r5,r17
 81206b4:	100d883a 	mov	r6,r2
 81206b8:	180f883a 	mov	r7,r3
 81206bc:	81230180 	call	8123018 <__adddf3>
 81206c0:	1009883a 	mov	r4,r2
 81206c4:	180b883a 	mov	r5,r3
 81206c8:	2005883a 	mov	r2,r4
 81206cc:	2807883a 	mov	r3,r5
 81206d0:	1009883a 	mov	r4,r2
 81206d4:	180b883a 	mov	r5,r3
 81206d8:	8123a800 	call	8123a80 <__truncdfsf2>
 81206dc:	e0bffa15 	stw	r2,-24(fp)
		max_y = target_y + (0.75/(pow(1.5, zoom)));
 81206e0:	e13ff017 	ldw	r4,-64(fp)
 81206e4:	8122b340 	call	8122b34 <__extendsfdf2>
 81206e8:	1021883a 	mov	r16,r2
 81206ec:	1823883a 	mov	r17,r3
 81206f0:	e13ffd17 	ldw	r4,-12(fp)
 81206f4:	81239500 	call	8123950 <__floatsidf>
 81206f8:	100f883a 	mov	r7,r2
 81206fc:	1811883a 	mov	r8,r3
 8120700:	0009883a 	mov	r4,zero
 8120704:	014ffe34 	movhi	r5,16376
 8120708:	380d883a 	mov	r6,r7
 812070c:	400f883a 	mov	r7,r8
 8120710:	81209d00 	call	81209d0 <pow>
 8120714:	100f883a 	mov	r7,r2
 8120718:	1811883a 	mov	r8,r3
 812071c:	0009883a 	mov	r4,zero
 8120720:	014ffa34 	movhi	r5,16360
 8120724:	380d883a 	mov	r6,r7
 8120728:	400f883a 	mov	r7,r8
 812072c:	81234500 	call	8123450 <__divdf3>
 8120730:	1009883a 	mov	r4,r2
 8120734:	180b883a 	mov	r5,r3
 8120738:	2005883a 	mov	r2,r4
 812073c:	2807883a 	mov	r3,r5
 8120740:	8009883a 	mov	r4,r16
 8120744:	880b883a 	mov	r5,r17
 8120748:	100d883a 	mov	r6,r2
 812074c:	180f883a 	mov	r7,r3
 8120750:	81230180 	call	8123018 <__adddf3>
 8120754:	1009883a 	mov	r4,r2
 8120758:	180b883a 	mov	r5,r3
 812075c:	2005883a 	mov	r2,r4
 8120760:	2807883a 	mov	r3,r5
 8120764:	1009883a 	mov	r4,r2
 8120768:	180b883a 	mov	r5,r3
 812076c:	8123a800 	call	8123a80 <__truncdfsf2>
 8120770:	e0bff915 	stw	r2,-28(fp)
		zoom += 1;
 8120774:	e0bffd17 	ldw	r2,-12(fp)
 8120778:	10800044 	addi	r2,r2,1
 812077c:	e0bffd15 	stw	r2,-12(fp)

		alt_up_pixel_buffer_dma_clear_screen(my_pixel_buffer,0);
 8120780:	d125fe17 	ldw	r4,-26632(gp)
 8120784:	000b883a 	mov	r5,zero
 8120788:	8125f500 	call	8125f50 <alt_up_pixel_buffer_dma_clear_screen>
	}
 812078c:	003ec906 	br	81202b4 <main+0xb4>

08120790 <barrier>:
}

void barrier(int id){
 8120790:	defff904 	addi	sp,sp,-28
 8120794:	dfc00615 	stw	ra,24(sp)
 8120798:	df000515 	stw	fp,20(sp)
 812079c:	df000504 	addi	fp,sp,20
 81207a0:	e13fff15 	stw	r4,-4(fp)
	post(id, message);
 81207a4:	d165f917 	ldw	r5,-26652(gp)
 81207a8:	e13fff17 	ldw	r4,-4(fp)
 81207ac:	81208e40 	call	81208e4 <post>
	if(id == 0){
 81207b0:	e0bfff17 	ldw	r2,-4(fp)
 81207b4:	1004c03a 	cmpne	r2,r2,zero
 81207b8:	10000c1e 	bne	r2,zero,81207ec <barrier+0x5c>
		int i;
		for(i = 1; i < n-1; i++){
 81207bc:	00800044 	movi	r2,1
 81207c0:	e0bffe15 	stw	r2,-8(fp)
 81207c4:	00000506 	br	81207dc <barrier+0x4c>
			pend(mailbox_0);
 81207c8:	d125fa17 	ldw	r4,-26648(gp)
 81207cc:	81208b40 	call	81208b4 <pend>

void barrier(int id){
	post(id, message);
	if(id == 0){
		int i;
		for(i = 1; i < n-1; i++){
 81207d0:	e0bffe17 	ldw	r2,-8(fp)
 81207d4:	10800044 	addi	r2,r2,1
 81207d8:	e0bffe15 	stw	r2,-8(fp)
 81207dc:	d0a00217 	ldw	r2,-32760(gp)
 81207e0:	10ffffc4 	addi	r3,r2,-1
 81207e4:	e0bffe17 	ldw	r2,-8(fp)
 81207e8:	10fff716 	blt	r2,r3,81207c8 <barrier+0x38>
			pend(mailbox_0);
		}
	}
	if(id == 1){
 81207ec:	e0bfff17 	ldw	r2,-4(fp)
 81207f0:	10800058 	cmpnei	r2,r2,1
 81207f4:	10000c1e 	bne	r2,zero,8120828 <barrier+0x98>
		int i;
		for(i = 1; i < n-1; i++){
 81207f8:	00800044 	movi	r2,1
 81207fc:	e0bffd15 	stw	r2,-12(fp)
 8120800:	00000506 	br	8120818 <barrier+0x88>
			pend(mailbox_1);
 8120804:	d125fc17 	ldw	r4,-26640(gp)
 8120808:	81208b40 	call	81208b4 <pend>
			pend(mailbox_0);
		}
	}
	if(id == 1){
		int i;
		for(i = 1; i < n-1; i++){
 812080c:	e0bffd17 	ldw	r2,-12(fp)
 8120810:	10800044 	addi	r2,r2,1
 8120814:	e0bffd15 	stw	r2,-12(fp)
 8120818:	d0a00217 	ldw	r2,-32760(gp)
 812081c:	10ffffc4 	addi	r3,r2,-1
 8120820:	e0bffd17 	ldw	r2,-12(fp)
 8120824:	10fff716 	blt	r2,r3,8120804 <barrier+0x74>
			pend(mailbox_1);
		}
	}
	if(id == 2){
 8120828:	e0bfff17 	ldw	r2,-4(fp)
 812082c:	10800098 	cmpnei	r2,r2,2
 8120830:	10000c1e 	bne	r2,zero,8120864 <barrier+0xd4>
		int i;
		for(i = 1; i < n-1; i++){
 8120834:	00800044 	movi	r2,1
 8120838:	e0bffc15 	stw	r2,-16(fp)
 812083c:	00000506 	br	8120854 <barrier+0xc4>
			pend(mailbox_2);
 8120840:	d125fb17 	ldw	r4,-26644(gp)
 8120844:	81208b40 	call	81208b4 <pend>
			pend(mailbox_1);
		}
	}
	if(id == 2){
		int i;
		for(i = 1; i < n-1; i++){
 8120848:	e0bffc17 	ldw	r2,-16(fp)
 812084c:	10800044 	addi	r2,r2,1
 8120850:	e0bffc15 	stw	r2,-16(fp)
 8120854:	d0a00217 	ldw	r2,-32760(gp)
 8120858:	10ffffc4 	addi	r3,r2,-1
 812085c:	e0bffc17 	ldw	r2,-16(fp)
 8120860:	10fff716 	blt	r2,r3,8120840 <barrier+0xb0>
			pend(mailbox_2);
		}
	}
	if(id == 3){
 8120864:	e0bfff17 	ldw	r2,-4(fp)
 8120868:	108000d8 	cmpnei	r2,r2,3
 812086c:	10000c1e 	bne	r2,zero,81208a0 <barrier+0x110>
		int i;
		for(i = 1; i < n-1; i++){
 8120870:	00800044 	movi	r2,1
 8120874:	e0bffb15 	stw	r2,-20(fp)
 8120878:	00000506 	br	8120890 <barrier+0x100>
			pend(mailbox_3);
 812087c:	d125ff17 	ldw	r4,-26628(gp)
 8120880:	81208b40 	call	81208b4 <pend>
			pend(mailbox_2);
		}
	}
	if(id == 3){
		int i;
		for(i = 1; i < n-1; i++){
 8120884:	e0bffb17 	ldw	r2,-20(fp)
 8120888:	10800044 	addi	r2,r2,1
 812088c:	e0bffb15 	stw	r2,-20(fp)
 8120890:	d0a00217 	ldw	r2,-32760(gp)
 8120894:	10ffffc4 	addi	r3,r2,-1
 8120898:	e0bffb17 	ldw	r2,-20(fp)
 812089c:	10fff716 	blt	r2,r3,812087c <barrier+0xec>
			pend(mailbox_3);
		}
	}
}
 81208a0:	e037883a 	mov	sp,fp
 81208a4:	dfc00117 	ldw	ra,4(sp)
 81208a8:	df000017 	ldw	fp,0(sp)
 81208ac:	dec00204 	addi	sp,sp,8
 81208b0:	f800283a 	ret

081208b4 <pend>:
void pend(alt_mailbox_dev* box){
 81208b4:	defffd04 	addi	sp,sp,-12
 81208b8:	dfc00215 	stw	ra,8(sp)
 81208bc:	df000115 	stw	fp,4(sp)
 81208c0:	df000104 	addi	fp,sp,4
 81208c4:	e13fff15 	stw	r4,-4(fp)
	//printf("MAILBOX PENDING \n");
	altera_avalon_mailbox_pend(box);
 81208c8:	e13fff17 	ldw	r4,-4(fp)
 81208cc:	81258080 	call	8125808 <altera_avalon_mailbox_pend>
}
 81208d0:	e037883a 	mov	sp,fp
 81208d4:	dfc00117 	ldw	ra,4(sp)
 81208d8:	df000017 	ldw	fp,0(sp)
 81208dc:	dec00204 	addi	sp,sp,8
 81208e0:	f800283a 	ret

081208e4 <post>:

void post(int id, alt_u32 mess){
 81208e4:	defffc04 	addi	sp,sp,-16
 81208e8:	dfc00315 	stw	ra,12(sp)
 81208ec:	df000215 	stw	fp,8(sp)
 81208f0:	df000204 	addi	fp,sp,8
 81208f4:	e13ffe15 	stw	r4,-8(fp)
 81208f8:	e17fff15 	stw	r5,-4(fp)
	 //altera_avalon_mailbox_post(box, message);

	 if(id == 0){
 81208fc:	e0bffe17 	ldw	r2,-8(fp)
 8120900:	1004c03a 	cmpne	r2,r2,zero
 8120904:	1000091e 	bne	r2,zero,812092c <post+0x48>
	 //printf("MAILBOX 0 POSTING \n");
	 altera_avalon_mailbox_post(mailbox_1, mess);
 8120908:	d125fc17 	ldw	r4,-26640(gp)
 812090c:	e17fff17 	ldw	r5,-4(fp)
 8120910:	81256fc0 	call	81256fc <altera_avalon_mailbox_post>
	 altera_avalon_mailbox_post(mailbox_2, mess);
 8120914:	d125fb17 	ldw	r4,-26644(gp)
 8120918:	e17fff17 	ldw	r5,-4(fp)
 812091c:	81256fc0 	call	81256fc <altera_avalon_mailbox_post>
	 altera_avalon_mailbox_post(mailbox_3, mess);
 8120920:	d125ff17 	ldw	r4,-26628(gp)
 8120924:	e17fff17 	ldw	r5,-4(fp)
 8120928:	81256fc0 	call	81256fc <altera_avalon_mailbox_post>
	 }
	 if(id == 1){
 812092c:	e0bffe17 	ldw	r2,-8(fp)
 8120930:	10800058 	cmpnei	r2,r2,1
 8120934:	1000091e 	bne	r2,zero,812095c <post+0x78>
	 //printf("MAILBOX 1 POSTING \n");
	 altera_avalon_mailbox_post(mailbox_0, mess);
 8120938:	d125fa17 	ldw	r4,-26648(gp)
 812093c:	e17fff17 	ldw	r5,-4(fp)
 8120940:	81256fc0 	call	81256fc <altera_avalon_mailbox_post>
	 altera_avalon_mailbox_post(mailbox_2, mess);
 8120944:	d125fb17 	ldw	r4,-26644(gp)
 8120948:	e17fff17 	ldw	r5,-4(fp)
 812094c:	81256fc0 	call	81256fc <altera_avalon_mailbox_post>
	 altera_avalon_mailbox_post(mailbox_3, mess);
 8120950:	d125ff17 	ldw	r4,-26628(gp)
 8120954:	e17fff17 	ldw	r5,-4(fp)
 8120958:	81256fc0 	call	81256fc <altera_avalon_mailbox_post>
	 }

	 if(id == 2){
 812095c:	e0bffe17 	ldw	r2,-8(fp)
 8120960:	10800098 	cmpnei	r2,r2,2
 8120964:	1000091e 	bne	r2,zero,812098c <post+0xa8>
	 //printf("MAILBOX 2 POSTING \n");
	 altera_avalon_mailbox_post(mailbox_0, mess);
 8120968:	d125fa17 	ldw	r4,-26648(gp)
 812096c:	e17fff17 	ldw	r5,-4(fp)
 8120970:	81256fc0 	call	81256fc <altera_avalon_mailbox_post>
	 altera_avalon_mailbox_post(mailbox_1, mess);
 8120974:	d125fc17 	ldw	r4,-26640(gp)
 8120978:	e17fff17 	ldw	r5,-4(fp)
 812097c:	81256fc0 	call	81256fc <altera_avalon_mailbox_post>
	 altera_avalon_mailbox_post(mailbox_3, mess);
 8120980:	d125ff17 	ldw	r4,-26628(gp)
 8120984:	e17fff17 	ldw	r5,-4(fp)
 8120988:	81256fc0 	call	81256fc <altera_avalon_mailbox_post>
	 }

	 if(id == 3){
 812098c:	e0bffe17 	ldw	r2,-8(fp)
 8120990:	108000d8 	cmpnei	r2,r2,3
 8120994:	1000091e 	bne	r2,zero,81209bc <post+0xd8>
	 //printf("MAILBOX 3 POSTING \n");
	 altera_avalon_mailbox_post(mailbox_0, mess);
 8120998:	d125fa17 	ldw	r4,-26648(gp)
 812099c:	e17fff17 	ldw	r5,-4(fp)
 81209a0:	81256fc0 	call	81256fc <altera_avalon_mailbox_post>
	 altera_avalon_mailbox_post(mailbox_1, mess);
 81209a4:	d125fc17 	ldw	r4,-26640(gp)
 81209a8:	e17fff17 	ldw	r5,-4(fp)
 81209ac:	81256fc0 	call	81256fc <altera_avalon_mailbox_post>
	 altera_avalon_mailbox_post(mailbox_2, mess);
 81209b0:	d125fb17 	ldw	r4,-26644(gp)
 81209b4:	e17fff17 	ldw	r5,-4(fp)
 81209b8:	81256fc0 	call	81256fc <altera_avalon_mailbox_post>
	 }

}
 81209bc:	e037883a 	mov	sp,fp
 81209c0:	dfc00117 	ldw	ra,4(sp)
 81209c4:	df000017 	ldw	fp,0(sp)
 81209c8:	dec00204 	addi	sp,sp,8
 81209cc:	f800283a 	ret

081209d0 <pow>:
 81209d0:	deffee04 	addi	sp,sp,-72
 81209d4:	ddc01015 	stw	r23,64(sp)
 81209d8:	05c204f4 	movhi	r23,2067
 81209dc:	bde8ab04 	addi	r23,r23,-23892
 81209e0:	dd800f15 	stw	r22,60(sp)
 81209e4:	dd400e15 	stw	r21,56(sp)
 81209e8:	dd000d15 	stw	r20,52(sp)
 81209ec:	dcc00c15 	stw	r19,48(sp)
 81209f0:	dc800b15 	stw	r18,44(sp)
 81209f4:	dc400a15 	stw	r17,40(sp)
 81209f8:	dc000915 	stw	r16,36(sp)
 81209fc:	2029883a 	mov	r20,r4
 8120a00:	dfc01115 	stw	ra,68(sp)
 8120a04:	3025883a 	mov	r18,r6
 8120a08:	282b883a 	mov	r21,r5
 8120a0c:	3827883a 	mov	r19,r7
 8120a10:	8120e580 	call	8120e58 <__ieee754_pow>
 8120a14:	b9000017 	ldw	r4,0(r23)
 8120a18:	05bfffc4 	movi	r22,-1
 8120a1c:	1021883a 	mov	r16,r2
 8120a20:	1823883a 	mov	r17,r3
 8120a24:	25800426 	beq	r4,r22,8120a38 <pow+0x68>
 8120a28:	9009883a 	mov	r4,r18
 8120a2c:	980b883a 	mov	r5,r19
 8120a30:	81224540 	call	8122454 <__isnand>
 8120a34:	10000d26 	beq	r2,zero,8120a6c <pow+0x9c>
 8120a38:	8005883a 	mov	r2,r16
 8120a3c:	8807883a 	mov	r3,r17
 8120a40:	dfc01117 	ldw	ra,68(sp)
 8120a44:	ddc01017 	ldw	r23,64(sp)
 8120a48:	dd800f17 	ldw	r22,60(sp)
 8120a4c:	dd400e17 	ldw	r21,56(sp)
 8120a50:	dd000d17 	ldw	r20,52(sp)
 8120a54:	dcc00c17 	ldw	r19,48(sp)
 8120a58:	dc800b17 	ldw	r18,44(sp)
 8120a5c:	dc400a17 	ldw	r17,40(sp)
 8120a60:	dc000917 	ldw	r16,36(sp)
 8120a64:	dec01204 	addi	sp,sp,72
 8120a68:	f800283a 	ret
 8120a6c:	a009883a 	mov	r4,r20
 8120a70:	a80b883a 	mov	r5,r21
 8120a74:	81224540 	call	8122454 <__isnand>
 8120a78:	1000151e 	bne	r2,zero,8120ad0 <pow+0x100>
 8120a7c:	000d883a 	mov	r6,zero
 8120a80:	000f883a 	mov	r7,zero
 8120a84:	a009883a 	mov	r4,r20
 8120a88:	a80b883a 	mov	r5,r21
 8120a8c:	81236a80 	call	81236a8 <__eqdf2>
 8120a90:	1000541e 	bne	r2,zero,8120be4 <pow+0x214>
 8120a94:	000d883a 	mov	r6,zero
 8120a98:	000f883a 	mov	r7,zero
 8120a9c:	9009883a 	mov	r4,r18
 8120aa0:	980b883a 	mov	r5,r19
 8120aa4:	81236a80 	call	81236a8 <__eqdf2>
 8120aa8:	10002c1e 	bne	r2,zero,8120b5c <pow+0x18c>
 8120aac:	b8800017 	ldw	r2,0(r23)
 8120ab0:	d8000615 	stw	zero,24(sp)
 8120ab4:	d8000715 	stw	zero,28(sp)
 8120ab8:	10001226 	beq	r2,zero,8120b04 <pow+0x134>
 8120abc:	008ffc34 	movhi	r2,16368
 8120ac0:	d8800715 	stw	r2,28(sp)
 8120ac4:	dc000617 	ldw	r16,24(sp)
 8120ac8:	dc400717 	ldw	r17,28(sp)
 8120acc:	003fda06 	br	8120a38 <pow+0x68>
 8120ad0:	000d883a 	mov	r6,zero
 8120ad4:	000f883a 	mov	r7,zero
 8120ad8:	9009883a 	mov	r4,r18
 8120adc:	980b883a 	mov	r5,r19
 8120ae0:	81236a80 	call	81236a8 <__eqdf2>
 8120ae4:	103fd41e 	bne	r2,zero,8120a38 <pow+0x68>
 8120ae8:	b8c00017 	ldw	r3,0(r23)
 8120aec:	010ffc34 	movhi	r4,16368
 8120af0:	d8000615 	stw	zero,24(sp)
 8120af4:	d9000715 	stw	r4,28(sp)
 8120af8:	1d801526 	beq	r3,r22,8120b50 <pow+0x180>
 8120afc:	00800084 	movi	r2,2
 8120b00:	18801326 	beq	r3,r2,8120b50 <pow+0x180>
 8120b04:	008204f4 	movhi	r2,2067
 8120b08:	10a22404 	addi	r2,r2,-30576
 8120b0c:	00c00044 	movi	r3,1
 8120b10:	d809883a 	mov	r4,sp
 8120b14:	dcc00515 	stw	r19,20(sp)
 8120b18:	dd400315 	stw	r21,12(sp)
 8120b1c:	d8800115 	stw	r2,4(sp)
 8120b20:	d8c00015 	stw	r3,0(sp)
 8120b24:	dc800415 	stw	r18,16(sp)
 8120b28:	dd000215 	stw	r20,8(sp)
 8120b2c:	d8000815 	stw	zero,32(sp)
 8120b30:	81224840 	call	8122484 <matherr>
 8120b34:	10002726 	beq	r2,zero,8120bd4 <pow+0x204>
 8120b38:	d8800817 	ldw	r2,32(sp)
 8120b3c:	103fe126 	beq	r2,zero,8120ac4 <pow+0xf4>
 8120b40:	81245680 	call	8124568 <__errno>
 8120b44:	d8c00817 	ldw	r3,32(sp)
 8120b48:	10c00015 	stw	r3,0(r2)
 8120b4c:	003fdd06 	br	8120ac4 <pow+0xf4>
 8120b50:	d9000715 	stw	r4,28(sp)
 8120b54:	d8000615 	stw	zero,24(sp)
 8120b58:	003fda06 	br	8120ac4 <pow+0xf4>
 8120b5c:	9009883a 	mov	r4,r18
 8120b60:	980b883a 	mov	r5,r19
 8120b64:	81224380 	call	8122438 <finite>
 8120b68:	103fb326 	beq	r2,zero,8120a38 <pow+0x68>
 8120b6c:	000d883a 	mov	r6,zero
 8120b70:	000f883a 	mov	r7,zero
 8120b74:	9009883a 	mov	r4,r18
 8120b78:	980b883a 	mov	r5,r19
 8120b7c:	81238400 	call	8123840 <__ltdf2>
 8120b80:	103fad0e 	bge	r2,zero,8120a38 <pow+0x68>
 8120b84:	b9000017 	ldw	r4,0(r23)
 8120b88:	00800044 	movi	r2,1
 8120b8c:	00c204f4 	movhi	r3,2067
 8120b90:	18e22404 	addi	r3,r3,-30576
 8120b94:	d8800015 	stw	r2,0(sp)
 8120b98:	d8c00115 	stw	r3,4(sp)
 8120b9c:	dd400315 	stw	r21,12(sp)
 8120ba0:	dcc00515 	stw	r19,20(sp)
 8120ba4:	d8000815 	stw	zero,32(sp)
 8120ba8:	dd000215 	stw	r20,8(sp)
 8120bac:	dc800415 	stw	r18,16(sp)
 8120bb0:	20005626 	beq	r4,zero,8120d0c <pow+0x33c>
 8120bb4:	00bffc34 	movhi	r2,65520
 8120bb8:	d8800715 	stw	r2,28(sp)
 8120bbc:	00800084 	movi	r2,2
 8120bc0:	d8000615 	stw	zero,24(sp)
 8120bc4:	20800326 	beq	r4,r2,8120bd4 <pow+0x204>
 8120bc8:	d809883a 	mov	r4,sp
 8120bcc:	81224840 	call	8122484 <matherr>
 8120bd0:	103fd91e 	bne	r2,zero,8120b38 <pow+0x168>
 8120bd4:	81245680 	call	8124568 <__errno>
 8120bd8:	00c00844 	movi	r3,33
 8120bdc:	10c00015 	stw	r3,0(r2)
 8120be0:	003fd506 	br	8120b38 <pow+0x168>
 8120be4:	8009883a 	mov	r4,r16
 8120be8:	880b883a 	mov	r5,r17
 8120bec:	81224380 	call	8122438 <finite>
 8120bf0:	10002426 	beq	r2,zero,8120c84 <pow+0x2b4>
 8120bf4:	000d883a 	mov	r6,zero
 8120bf8:	000f883a 	mov	r7,zero
 8120bfc:	8009883a 	mov	r4,r16
 8120c00:	880b883a 	mov	r5,r17
 8120c04:	81236a80 	call	81236a8 <__eqdf2>
 8120c08:	103f8b1e 	bne	r2,zero,8120a38 <pow+0x68>
 8120c0c:	a009883a 	mov	r4,r20
 8120c10:	a80b883a 	mov	r5,r21
 8120c14:	81224380 	call	8122438 <finite>
 8120c18:	103f8726 	beq	r2,zero,8120a38 <pow+0x68>
 8120c1c:	9009883a 	mov	r4,r18
 8120c20:	980b883a 	mov	r5,r19
 8120c24:	81224380 	call	8122438 <finite>
 8120c28:	103f8326 	beq	r2,zero,8120a38 <pow+0x68>
 8120c2c:	b9000017 	ldw	r4,0(r23)
 8120c30:	00800104 	movi	r2,4
 8120c34:	d8800015 	stw	r2,0(sp)
 8120c38:	00c204f4 	movhi	r3,2067
 8120c3c:	18e22404 	addi	r3,r3,-30576
 8120c40:	00800084 	movi	r2,2
 8120c44:	d8c00115 	stw	r3,4(sp)
 8120c48:	dd400315 	stw	r21,12(sp)
 8120c4c:	dcc00515 	stw	r19,20(sp)
 8120c50:	d8000815 	stw	zero,32(sp)
 8120c54:	dd000215 	stw	r20,8(sp)
 8120c58:	dc800415 	stw	r18,16(sp)
 8120c5c:	d8000615 	stw	zero,24(sp)
 8120c60:	d8000715 	stw	zero,28(sp)
 8120c64:	20800326 	beq	r4,r2,8120c74 <pow+0x2a4>
 8120c68:	d809883a 	mov	r4,sp
 8120c6c:	81224840 	call	8122484 <matherr>
 8120c70:	103fb11e 	bne	r2,zero,8120b38 <pow+0x168>
 8120c74:	81245680 	call	8124568 <__errno>
 8120c78:	00c00884 	movi	r3,34
 8120c7c:	10c00015 	stw	r3,0(r2)
 8120c80:	003fad06 	br	8120b38 <pow+0x168>
 8120c84:	a009883a 	mov	r4,r20
 8120c88:	a80b883a 	mov	r5,r21
 8120c8c:	81224380 	call	8122438 <finite>
 8120c90:	103fd826 	beq	r2,zero,8120bf4 <pow+0x224>
 8120c94:	9009883a 	mov	r4,r18
 8120c98:	980b883a 	mov	r5,r19
 8120c9c:	81224380 	call	8122438 <finite>
 8120ca0:	103fd426 	beq	r2,zero,8120bf4 <pow+0x224>
 8120ca4:	880b883a 	mov	r5,r17
 8120ca8:	8009883a 	mov	r4,r16
 8120cac:	81224540 	call	8122454 <__isnand>
 8120cb0:	10001926 	beq	r2,zero,8120d18 <pow+0x348>
 8120cb4:	bc000017 	ldw	r16,0(r23)
 8120cb8:	00800044 	movi	r2,1
 8120cbc:	00c204f4 	movhi	r3,2067
 8120cc0:	18e22404 	addi	r3,r3,-30576
 8120cc4:	d8800015 	stw	r2,0(sp)
 8120cc8:	d8c00115 	stw	r3,4(sp)
 8120ccc:	dd400315 	stw	r21,12(sp)
 8120cd0:	dcc00515 	stw	r19,20(sp)
 8120cd4:	d8000815 	stw	zero,32(sp)
 8120cd8:	dd000215 	stw	r20,8(sp)
 8120cdc:	dc800415 	stw	r18,16(sp)
 8120ce0:	80000a26 	beq	r16,zero,8120d0c <pow+0x33c>
 8120ce4:	0009883a 	mov	r4,zero
 8120ce8:	000d883a 	mov	r6,zero
 8120cec:	000b883a 	mov	r5,zero
 8120cf0:	000f883a 	mov	r7,zero
 8120cf4:	81234500 	call	8123450 <__divdf3>
 8120cf8:	d8800615 	stw	r2,24(sp)
 8120cfc:	00800084 	movi	r2,2
 8120d00:	d8c00715 	stw	r3,28(sp)
 8120d04:	80bfb01e 	bne	r16,r2,8120bc8 <pow+0x1f8>
 8120d08:	003fb206 	br	8120bd4 <pow+0x204>
 8120d0c:	d8000615 	stw	zero,24(sp)
 8120d10:	d8000715 	stw	zero,28(sp)
 8120d14:	003fac06 	br	8120bc8 <pow+0x1f8>
 8120d18:	b8800017 	ldw	r2,0(r23)
 8120d1c:	00c000c4 	movi	r3,3
 8120d20:	010204f4 	movhi	r4,2067
 8120d24:	21222404 	addi	r4,r4,-30576
 8120d28:	d8c00015 	stw	r3,0(sp)
 8120d2c:	d9000115 	stw	r4,4(sp)
 8120d30:	d8000815 	stw	zero,32(sp)
 8120d34:	dd000215 	stw	r20,8(sp)
 8120d38:	dd400315 	stw	r21,12(sp)
 8120d3c:	dc800415 	stw	r18,16(sp)
 8120d40:	dcc00515 	stw	r19,20(sp)
 8120d44:	1000251e 	bne	r2,zero,8120ddc <pow+0x40c>
 8120d48:	05b80034 	movhi	r22,57344
 8120d4c:	0091fc34 	movhi	r2,18416
 8120d50:	10bfffc4 	addi	r2,r2,-1
 8120d54:	000d883a 	mov	r6,zero
 8120d58:	000f883a 	mov	r7,zero
 8120d5c:	a80b883a 	mov	r5,r21
 8120d60:	a009883a 	mov	r4,r20
 8120d64:	d8800715 	stw	r2,28(sp)
 8120d68:	dd800615 	stw	r22,24(sp)
 8120d6c:	81238400 	call	8123840 <__ltdf2>
 8120d70:	103fbd0e 	bge	r2,zero,8120c68 <pow+0x298>
 8120d74:	0005883a 	mov	r2,zero
 8120d78:	00cff834 	movhi	r3,16352
 8120d7c:	180f883a 	mov	r7,r3
 8120d80:	100d883a 	mov	r6,r2
 8120d84:	980b883a 	mov	r5,r19
 8120d88:	9009883a 	mov	r4,r18
 8120d8c:	812308c0 	call	812308c <__muldf3>
 8120d90:	1009883a 	mov	r4,r2
 8120d94:	180b883a 	mov	r5,r3
 8120d98:	1021883a 	mov	r16,r2
 8120d9c:	1823883a 	mov	r17,r3
 8120da0:	812249c0 	call	812249c <rint>
 8120da4:	180f883a 	mov	r7,r3
 8120da8:	8009883a 	mov	r4,r16
 8120dac:	880b883a 	mov	r5,r17
 8120db0:	100d883a 	mov	r6,r2
 8120db4:	81237300 	call	8123730 <__nedf2>
 8120db8:	10000426 	beq	r2,zero,8120dcc <pow+0x3fc>
 8120dbc:	00b1fc34 	movhi	r2,51184
 8120dc0:	10bfffc4 	addi	r2,r2,-1
 8120dc4:	dd800615 	stw	r22,24(sp)
 8120dc8:	d8800715 	stw	r2,28(sp)
 8120dcc:	b8c00017 	ldw	r3,0(r23)
 8120dd0:	00800084 	movi	r2,2
 8120dd4:	18bfa41e 	bne	r3,r2,8120c68 <pow+0x298>
 8120dd8:	003fa606 	br	8120c74 <pow+0x2a4>
 8120ddc:	009ffc34 	movhi	r2,32752
 8120de0:	000d883a 	mov	r6,zero
 8120de4:	000f883a 	mov	r7,zero
 8120de8:	a80b883a 	mov	r5,r21
 8120dec:	a009883a 	mov	r4,r20
 8120df0:	d8800715 	stw	r2,28(sp)
 8120df4:	d8000615 	stw	zero,24(sp)
 8120df8:	81238400 	call	8123840 <__ltdf2>
 8120dfc:	103ff30e 	bge	r2,zero,8120dcc <pow+0x3fc>
 8120e00:	0005883a 	mov	r2,zero
 8120e04:	00cff834 	movhi	r3,16352
 8120e08:	180f883a 	mov	r7,r3
 8120e0c:	100d883a 	mov	r6,r2
 8120e10:	980b883a 	mov	r5,r19
 8120e14:	9009883a 	mov	r4,r18
 8120e18:	812308c0 	call	812308c <__muldf3>
 8120e1c:	1009883a 	mov	r4,r2
 8120e20:	180b883a 	mov	r5,r3
 8120e24:	1021883a 	mov	r16,r2
 8120e28:	1823883a 	mov	r17,r3
 8120e2c:	812249c0 	call	812249c <rint>
 8120e30:	180f883a 	mov	r7,r3
 8120e34:	8009883a 	mov	r4,r16
 8120e38:	880b883a 	mov	r5,r17
 8120e3c:	100d883a 	mov	r6,r2
 8120e40:	81237300 	call	8123730 <__nedf2>
 8120e44:	103fe126 	beq	r2,zero,8120dcc <pow+0x3fc>
 8120e48:	00bffc34 	movhi	r2,65520
 8120e4c:	d8800715 	stw	r2,28(sp)
 8120e50:	d8000615 	stw	zero,24(sp)
 8120e54:	003fdd06 	br	8120dcc <pow+0x3fc>

08120e58 <__ieee754_pow>:
 8120e58:	deffbb04 	addi	sp,sp,-276
 8120e5c:	3005883a 	mov	r2,r6
 8120e60:	dd404015 	stw	r21,256(sp)
 8120e64:	dd003f15 	stw	r20,252(sp)
 8120e68:	d9802815 	stw	r6,160(sp)
 8120e6c:	2029883a 	mov	r20,r4
 8120e70:	282b883a 	mov	r21,r5
 8120e74:	3009883a 	mov	r4,r6
 8120e78:	380b883a 	mov	r5,r7
 8120e7c:	01a00034 	movhi	r6,32768
 8120e80:	31bfffc4 	addi	r6,r6,-1
 8120e84:	dc003b15 	stw	r16,236(sp)
 8120e88:	29a0703a 	and	r16,r5,r6
 8120e8c:	1404b03a 	or	r2,r2,r16
 8120e90:	dd804115 	stw	r22,260(sp)
 8120e94:	dc403c15 	stw	r17,240(sp)
 8120e98:	d9c02915 	stw	r7,164(sp)
 8120e9c:	382d883a 	mov	r22,r7
 8120ea0:	dfc04415 	stw	ra,272(sp)
 8120ea4:	200f883a 	mov	r7,r4
 8120ea8:	df004315 	stw	fp,268(sp)
 8120eac:	ddc04215 	stw	r23,264(sp)
 8120eb0:	dcc03e15 	stw	r19,248(sp)
 8120eb4:	dc803d15 	stw	r18,244(sp)
 8120eb8:	a023883a 	mov	r17,r20
 8120ebc:	2809883a 	mov	r4,r5
 8120ec0:	10000826 	beq	r2,zero,8120ee4 <__ieee754_pow+0x8c>
 8120ec4:	a9a4703a 	and	r18,r21,r6
 8120ec8:	009ffc34 	movhi	r2,32752
 8120ecc:	a827883a 	mov	r19,r21
 8120ed0:	1480180e 	bge	r2,r18,8120f34 <__ieee754_pow+0xdc>
 8120ed4:	00b00434 	movhi	r2,49168
 8120ed8:	9085883a 	add	r2,r18,r2
 8120edc:	8884b03a 	or	r2,r17,r2
 8120ee0:	1000321e 	bne	r2,zero,8120fac <__ieee754_pow+0x154>
 8120ee4:	0009883a 	mov	r4,zero
 8120ee8:	014ffc34 	movhi	r5,16368
 8120eec:	d9002815 	stw	r4,160(sp)
 8120ef0:	d9402915 	stw	r5,164(sp)
 8120ef4:	d9002817 	ldw	r4,160(sp)
 8120ef8:	d9402917 	ldw	r5,164(sp)
 8120efc:	2005883a 	mov	r2,r4
 8120f00:	2807883a 	mov	r3,r5
 8120f04:	dfc04417 	ldw	ra,272(sp)
 8120f08:	df004317 	ldw	fp,268(sp)
 8120f0c:	ddc04217 	ldw	r23,264(sp)
 8120f10:	dd804117 	ldw	r22,260(sp)
 8120f14:	dd404017 	ldw	r21,256(sp)
 8120f18:	dd003f17 	ldw	r20,252(sp)
 8120f1c:	dcc03e17 	ldw	r19,248(sp)
 8120f20:	dc803d17 	ldw	r18,244(sp)
 8120f24:	dc403c17 	ldw	r17,240(sp)
 8120f28:	dc003b17 	ldw	r16,236(sp)
 8120f2c:	dec04504 	addi	sp,sp,276
 8120f30:	f800283a 	ret
 8120f34:	90802b26 	beq	r18,r2,8120fe4 <__ieee754_pow+0x18c>
 8120f38:	143fe616 	blt	r2,r16,8120ed4 <__ieee754_pow+0x7c>
 8120f3c:	80806126 	beq	r16,r2,81210c4 <__ieee754_pow+0x26c>
 8120f40:	982e403a 	cmpge	r23,r19,zero
 8120f44:	b8004e26 	beq	r23,zero,8121080 <__ieee754_pow+0x228>
 8120f48:	0039883a 	mov	fp,zero
 8120f4c:	3800281e 	bne	r7,zero,8120ff0 <__ieee754_pow+0x198>
 8120f50:	009ffc34 	movhi	r2,32752
 8120f54:	80804f26 	beq	r16,r2,8121094 <__ieee754_pow+0x23c>
 8120f58:	008ffc34 	movhi	r2,16368
 8120f5c:	80808226 	beq	r16,r2,8121168 <__ieee754_pow+0x310>
 8120f60:	00900034 	movhi	r2,16384
 8120f64:	20828426 	beq	r4,r2,8121978 <__ieee754_pow+0xb20>
 8120f68:	008ff834 	movhi	r2,16352
 8120f6c:	2080201e 	bne	r4,r2,8120ff0 <__ieee754_pow+0x198>
 8120f70:	98001f16 	blt	r19,zero,8120ff0 <__ieee754_pow+0x198>
 8120f74:	a80b883a 	mov	r5,r21
 8120f78:	a009883a 	mov	r4,r20
 8120f7c:	dfc04417 	ldw	ra,272(sp)
 8120f80:	df004317 	ldw	fp,268(sp)
 8120f84:	ddc04217 	ldw	r23,264(sp)
 8120f88:	dd804117 	ldw	r22,260(sp)
 8120f8c:	dd404017 	ldw	r21,256(sp)
 8120f90:	dd003f17 	ldw	r20,252(sp)
 8120f94:	dcc03e17 	ldw	r19,248(sp)
 8120f98:	dc803d17 	ldw	r18,244(sp)
 8120f9c:	dc403c17 	ldw	r17,240(sp)
 8120fa0:	dc003b17 	ldw	r16,236(sp)
 8120fa4:	dec04504 	addi	sp,sp,276
 8120fa8:	81221581 	jmpi	8122158 <__ieee754_sqrt>
 8120fac:	010204f4 	movhi	r4,2067
 8120fb0:	21222504 	addi	r4,r4,-30572
 8120fb4:	dfc04417 	ldw	ra,272(sp)
 8120fb8:	df004317 	ldw	fp,268(sp)
 8120fbc:	ddc04217 	ldw	r23,264(sp)
 8120fc0:	dd804117 	ldw	r22,260(sp)
 8120fc4:	dd404017 	ldw	r21,256(sp)
 8120fc8:	dd003f17 	ldw	r20,252(sp)
 8120fcc:	dcc03e17 	ldw	r19,248(sp)
 8120fd0:	dc803d17 	ldw	r18,244(sp)
 8120fd4:	dc403c17 	ldw	r17,240(sp)
 8120fd8:	dc003b17 	ldw	r16,236(sp)
 8120fdc:	dec04504 	addi	sp,sp,276
 8120fe0:	812248c1 	jmpi	812248c <nan>
 8120fe4:	a03fbb1e 	bne	r20,zero,8120ed4 <__ieee754_pow+0x7c>
 8120fe8:	003fd306 	br	8120f38 <__ieee754_pow+0xe0>
 8120fec:	0039883a 	mov	fp,zero
 8120ff0:	a009883a 	mov	r4,r20
 8120ff4:	a80b883a 	mov	r5,r21
 8120ff8:	81224200 	call	8122420 <fabs>
 8120ffc:	1015883a 	mov	r10,r2
 8121000:	1817883a 	mov	r11,r3
 8121004:	88001226 	beq	r17,zero,8121050 <__ieee754_pow+0x1f8>
 8121008:	9804d7fa 	srli	r2,r19,31
 812100c:	10bfffc4 	addi	r2,r2,-1
 8121010:	1706b03a 	or	r3,r2,fp
 8121014:	d8802515 	stw	r2,148(sp)
 8121018:	18002c1e 	bne	r3,zero,81210cc <__ieee754_pow+0x274>
 812101c:	a80f883a 	mov	r7,r21
 8121020:	a009883a 	mov	r4,r20
 8121024:	a80b883a 	mov	r5,r21
 8121028:	a00d883a 	mov	r6,r20
 812102c:	8122f980 	call	8122f98 <__subdf3>
 8121030:	1009883a 	mov	r4,r2
 8121034:	180b883a 	mov	r5,r3
 8121038:	100d883a 	mov	r6,r2
 812103c:	180f883a 	mov	r7,r3
 8121040:	81234500 	call	8123450 <__divdf3>
 8121044:	d8802815 	stw	r2,160(sp)
 8121048:	d8c02915 	stw	r3,164(sp)
 812104c:	003fa906 	br	8120ef4 <__ieee754_pow+0x9c>
 8121050:	009ffc34 	movhi	r2,32752
 8121054:	90800326 	beq	r18,r2,8121064 <__ieee754_pow+0x20c>
 8121058:	90000226 	beq	r18,zero,8121064 <__ieee754_pow+0x20c>
 812105c:	008ffc34 	movhi	r2,16368
 8121060:	90bfe91e 	bne	r18,r2,8121008 <__ieee754_pow+0x1b0>
 8121064:	b0026316 	blt	r22,zero,81219f4 <__ieee754_pow+0xb9c>
 8121068:	5011883a 	mov	r8,r10
 812106c:	5813883a 	mov	r9,r11
 8121070:	b8023126 	beq	r23,zero,8121938 <__ieee754_pow+0xae0>
 8121074:	da002815 	stw	r8,160(sp)
 8121078:	da402915 	stw	r9,164(sp)
 812107c:	003f9d06 	br	8120ef4 <__ieee754_pow+0x9c>
 8121080:	0090d034 	movhi	r2,17216
 8121084:	10bfffc4 	addi	r2,r2,-1
 8121088:	1400270e 	bge	r2,r16,8121128 <__ieee754_pow+0x2d0>
 812108c:	07000084 	movi	fp,2
 8121090:	003fae06 	br	8120f4c <__ieee754_pow+0xf4>
 8121094:	00b00434 	movhi	r2,49168
 8121098:	9085883a 	add	r2,r18,r2
 812109c:	8884b03a 	or	r2,r17,r2
 81210a0:	103f9026 	beq	r2,zero,8120ee4 <__ieee754_pow+0x8c>
 81210a4:	008ffc34 	movhi	r2,16368
 81210a8:	10bfffc4 	addi	r2,r2,-1
 81210ac:	1482d00e 	bge	r2,r18,8121bf0 <__ieee754_pow+0xd98>
 81210b0:	b03f900e 	bge	r22,zero,8120ef4 <__ieee754_pow+0x9c>
 81210b4:	0005883a 	mov	r2,zero
 81210b8:	d8802815 	stw	r2,160(sp)
 81210bc:	d8802915 	stw	r2,164(sp)
 81210c0:	003f8c06 	br	8120ef4 <__ieee754_pow+0x9c>
 81210c4:	383f9e26 	beq	r7,zero,8120f40 <__ieee754_pow+0xe8>
 81210c8:	003f8206 	br	8120ed4 <__ieee754_pow+0x7c>
 81210cc:	00907834 	movhi	r2,16864
 81210d0:	1400290e 	bge	r2,r16,8121178 <__ieee754_pow+0x320>
 81210d4:	0090fc34 	movhi	r2,17392
 81210d8:	1402500e 	bge	r2,r16,8121a1c <__ieee754_pow+0xbc4>
 81210dc:	008ffc34 	movhi	r2,16368
 81210e0:	10bfffc4 	addi	r2,r2,-1
 81210e4:	14800b0e 	bge	r2,r18,8121114 <__ieee754_pow+0x2bc>
 81210e8:	05800b0e 	bge	zero,r22,8121118 <__ieee754_pow+0x2c0>
 81210ec:	00a20034 	movhi	r2,34816
 81210f0:	109d6704 	addi	r2,r2,30108
 81210f4:	00df8e34 	movhi	r3,32312
 81210f8:	18f90f04 	addi	r3,r3,-7108
 81210fc:	100d883a 	mov	r6,r2
 8121100:	180f883a 	mov	r7,r3
 8121104:	1009883a 	mov	r4,r2
 8121108:	180b883a 	mov	r5,r3
 812110c:	812308c0 	call	812308c <__muldf3>
 8121110:	003fcc06 	br	8121044 <__ieee754_pow+0x1ec>
 8121114:	b03ff516 	blt	r22,zero,81210ec <__ieee754_pow+0x294>
 8121118:	0007883a 	mov	r3,zero
 812111c:	d8c02815 	stw	r3,160(sp)
 8121120:	d8c02915 	stw	r3,164(sp)
 8121124:	003f7306 	br	8120ef4 <__ieee754_pow+0x9c>
 8121128:	008ffc34 	movhi	r2,16368
 812112c:	10bfffc4 	addi	r2,r2,-1
 8121130:	143f850e 	bge	r2,r16,8120f48 <__ieee754_pow+0xf0>
 8121134:	8005d53a 	srai	r2,r16,20
 8121138:	01400504 	movi	r5,20
 812113c:	10ff0044 	addi	r3,r2,-1023
 8121140:	28c3e10e 	bge	r5,r3,81220c8 <__ieee754_pow+0x1270>
 8121144:	00800d04 	movi	r2,52
 8121148:	10c5c83a 	sub	r2,r2,r3
 812114c:	3886d83a 	srl	r3,r7,r2
 8121150:	1884983a 	sll	r2,r3,r2
 8121154:	38bf7c1e 	bne	r7,r2,8120f48 <__ieee754_pow+0xf0>
 8121158:	18c0004c 	andi	r3,r3,1
 812115c:	00800084 	movi	r2,2
 8121160:	10f9c83a 	sub	fp,r2,r3
 8121164:	003f7906 	br	8120f4c <__ieee754_pow+0xf4>
 8121168:	b0038516 	blt	r22,zero,8121f80 <__ieee754_pow+0x1128>
 812116c:	dd002815 	stw	r20,160(sp)
 8121170:	dd402915 	stw	r21,164(sp)
 8121174:	003f5f06 	br	8120ef4 <__ieee754_pow+0x9c>
 8121178:	00800434 	movhi	r2,16
 812117c:	10bfffc4 	addi	r2,r2,-1
 8121180:	1482900e 	bge	r2,r18,8121bc4 <__ieee754_pow+0xd6c>
 8121184:	000b883a 	mov	r5,zero
 8121188:	9005d53a 	srai	r2,r18,20
 812118c:	00c00434 	movhi	r3,16
 8121190:	18ffffc4 	addi	r3,r3,-1
 8121194:	90c8703a 	and	r4,r18,r3
 8121198:	2887883a 	add	r3,r5,r2
 812119c:	18bf0044 	addi	r2,r3,-1023
 81211a0:	d8800015 	stw	r2,0(sp)
 81211a4:	00800134 	movhi	r2,4
 81211a8:	10a62384 	addi	r2,r2,-26482
 81211ac:	250ffc34 	orhi	r20,r4,16368
 81211b0:	1101ee0e 	bge	r2,r4,812196c <__ieee754_pow+0xb14>
 81211b4:	00800334 	movhi	r2,12
 81211b8:	10ad9e44 	addi	r2,r2,-18823
 81211bc:	1101e716 	blt	r2,r4,812195c <__ieee754_pow+0xb04>
 81211c0:	01000044 	movi	r4,1
 81211c4:	04000334 	movhi	r16,12
 81211c8:	200890fa 	slli	r4,r4,3
 81211cc:	da800115 	stw	r10,4(sp)
 81211d0:	dd000215 	stw	r20,8(sp)
 81211d4:	d9002c15 	stw	r4,176(sp)
 81211d8:	d9402c17 	ldw	r5,176(sp)
 81211dc:	010204f4 	movhi	r4,2067
 81211e0:	21222604 	addi	r4,r4,-30568
 81211e4:	a02bd07a 	srai	r21,r20,1
 81211e8:	2909883a 	add	r4,r5,r4
 81211ec:	25800017 	ldw	r22,0(r4)
 81211f0:	25c00117 	ldw	r23,4(r4)
 81211f4:	a00b883a 	mov	r5,r20
 81211f8:	5009883a 	mov	r4,r10
 81211fc:	b00d883a 	mov	r6,r22
 8121200:	b80f883a 	mov	r7,r23
 8121204:	8122f980 	call	8122f98 <__subdf3>
 8121208:	d9000117 	ldw	r4,4(sp)
 812120c:	a00b883a 	mov	r5,r20
 8121210:	b00d883a 	mov	r6,r22
 8121214:	b80f883a 	mov	r7,r23
 8121218:	1025883a 	mov	r18,r2
 812121c:	1827883a 	mov	r19,r3
 8121220:	81230180 	call	8123018 <__adddf3>
 8121224:	0011883a 	mov	r8,zero
 8121228:	024ffc34 	movhi	r9,16368
 812122c:	480b883a 	mov	r5,r9
 8121230:	4009883a 	mov	r4,r8
 8121234:	180f883a 	mov	r7,r3
 8121238:	100d883a 	mov	r6,r2
 812123c:	81234500 	call	8123450 <__divdf3>
 8121240:	d8c02e15 	stw	r3,184(sp)
 8121244:	d8800f15 	stw	r2,60(sp)
 8121248:	d8802d15 	stw	r2,180(sp)
 812124c:	d8802e17 	ldw	r2,184(sp)
 8121250:	d9800f17 	ldw	r6,60(sp)
 8121254:	9009883a 	mov	r4,r18
 8121258:	980b883a 	mov	r5,r19
 812125c:	100f883a 	mov	r7,r2
 8121260:	dc800b15 	stw	r18,44(sp)
 8121264:	dcc00c15 	stw	r19,48(sp)
 8121268:	d8801015 	stw	r2,64(sp)
 812126c:	812308c0 	call	812308c <__muldf3>
 8121270:	d8c03015 	stw	r3,192(sp)
 8121274:	d9003017 	ldw	r4,192(sp)
 8121278:	d8802f15 	stw	r2,188(sp)
 812127c:	d8800315 	stw	r2,12(sp)
 8121280:	ad480034 	orhi	r21,r21,8192
 8121284:	0005883a 	mov	r2,zero
 8121288:	ac2b883a 	add	r21,r21,r16
 812128c:	000b883a 	mov	r5,zero
 8121290:	1021883a 	mov	r16,r2
 8121294:	2005883a 	mov	r2,r4
 8121298:	800d883a 	mov	r6,r16
 812129c:	a80f883a 	mov	r7,r21
 81212a0:	d9000415 	stw	r4,16(sp)
 81212a4:	d9002715 	stw	r4,156(sp)
 81212a8:	d9402615 	stw	r5,152(sp)
 81212ac:	d9401615 	stw	r5,88(sp)
 81212b0:	d9001715 	stw	r4,92(sp)
 81212b4:	100b883a 	mov	r5,r2
 81212b8:	0009883a 	mov	r4,zero
 81212bc:	812308c0 	call	812308c <__muldf3>
 81212c0:	d9000b17 	ldw	r4,44(sp)
 81212c4:	980b883a 	mov	r5,r19
 81212c8:	180f883a 	mov	r7,r3
 81212cc:	100d883a 	mov	r6,r2
 81212d0:	8122f980 	call	8122f98 <__subdf3>
 81212d4:	8009883a 	mov	r4,r16
 81212d8:	a80b883a 	mov	r5,r21
 81212dc:	b80f883a 	mov	r7,r23
 81212e0:	b00d883a 	mov	r6,r22
 81212e4:	1021883a 	mov	r16,r2
 81212e8:	1823883a 	mov	r17,r3
 81212ec:	8122f980 	call	8122f98 <__subdf3>
 81212f0:	d9000117 	ldw	r4,4(sp)
 81212f4:	a00b883a 	mov	r5,r20
 81212f8:	180f883a 	mov	r7,r3
 81212fc:	100d883a 	mov	r6,r2
 8121300:	8122f980 	call	8122f98 <__subdf3>
 8121304:	d9001617 	ldw	r4,88(sp)
 8121308:	d9402717 	ldw	r5,156(sp)
 812130c:	180f883a 	mov	r7,r3
 8121310:	100d883a 	mov	r6,r2
 8121314:	812308c0 	call	812308c <__muldf3>
 8121318:	180f883a 	mov	r7,r3
 812131c:	880b883a 	mov	r5,r17
 8121320:	8009883a 	mov	r4,r16
 8121324:	100d883a 	mov	r6,r2
 8121328:	8122f980 	call	8122f98 <__subdf3>
 812132c:	d9000f17 	ldw	r4,60(sp)
 8121330:	d9402e17 	ldw	r5,184(sp)
 8121334:	180f883a 	mov	r7,r3
 8121338:	100d883a 	mov	r6,r2
 812133c:	812308c0 	call	812308c <__muldf3>
 8121340:	d9000317 	ldw	r4,12(sp)
 8121344:	d9403017 	ldw	r5,192(sp)
 8121348:	d8803115 	stw	r2,196(sp)
 812134c:	200d883a 	mov	r6,r4
 8121350:	280f883a 	mov	r7,r5
 8121354:	d8c03215 	stw	r3,200(sp)
 8121358:	812308c0 	call	812308c <__muldf3>
 812135c:	1009883a 	mov	r4,r2
 8121360:	180b883a 	mov	r5,r3
 8121364:	100d883a 	mov	r6,r2
 8121368:	180f883a 	mov	r7,r3
 812136c:	1021883a 	mov	r16,r2
 8121370:	1823883a 	mov	r17,r3
 8121374:	812308c0 	call	812308c <__muldf3>
 8121378:	02129174 	movhi	r8,19013
 812137c:	4213bbc4 	addi	r8,r8,20207
 8121380:	024ff2b4 	movhi	r9,16330
 8121384:	4a5f8a04 	addi	r9,r9,32296
 8121388:	480f883a 	mov	r7,r9
 812138c:	8009883a 	mov	r4,r16
 8121390:	880b883a 	mov	r5,r17
 8121394:	400d883a 	mov	r6,r8
 8121398:	1029883a 	mov	r20,r2
 812139c:	182b883a 	mov	r21,r3
 81213a0:	812308c0 	call	812308c <__muldf3>
 81213a4:	0224f2b4 	movhi	r8,37834
 81213a8:	4236d944 	addi	r8,r8,-9371
 81213ac:	024ff3b4 	movhi	r9,16334
 81213b0:	4a619284 	addi	r9,r9,-31158
 81213b4:	480f883a 	mov	r7,r9
 81213b8:	400d883a 	mov	r6,r8
 81213bc:	180b883a 	mov	r5,r3
 81213c0:	1009883a 	mov	r4,r2
 81213c4:	81230180 	call	8123018 <__adddf3>
 81213c8:	180f883a 	mov	r7,r3
 81213cc:	8009883a 	mov	r4,r16
 81213d0:	880b883a 	mov	r5,r17
 81213d4:	100d883a 	mov	r6,r2
 81213d8:	812308c0 	call	812308c <__muldf3>
 81213dc:	022a4774 	movhi	r8,43293
 81213e0:	42104044 	addi	r8,r8,16641
 81213e4:	024ff474 	movhi	r9,16337
 81213e8:	4a5d1804 	addi	r9,r9,29792
 81213ec:	480f883a 	mov	r7,r9
 81213f0:	400d883a 	mov	r6,r8
 81213f4:	180b883a 	mov	r5,r3
 81213f8:	1009883a 	mov	r4,r2
 81213fc:	81230180 	call	8123018 <__adddf3>
 8121400:	180f883a 	mov	r7,r3
 8121404:	8009883a 	mov	r4,r16
 8121408:	880b883a 	mov	r5,r17
 812140c:	100d883a 	mov	r6,r2
 8121410:	812308c0 	call	812308c <__muldf3>
 8121414:	021463f4 	movhi	r8,20879
 8121418:	42099344 	addi	r8,r8,9805
 812141c:	024ff574 	movhi	r9,16341
 8121420:	4a555544 	addi	r9,r9,21845
 8121424:	480f883a 	mov	r7,r9
 8121428:	400d883a 	mov	r6,r8
 812142c:	180b883a 	mov	r5,r3
 8121430:	1009883a 	mov	r4,r2
 8121434:	81230180 	call	8123018 <__adddf3>
 8121438:	180f883a 	mov	r7,r3
 812143c:	8009883a 	mov	r4,r16
 8121440:	880b883a 	mov	r5,r17
 8121444:	100d883a 	mov	r6,r2
 8121448:	812308c0 	call	812308c <__muldf3>
 812144c:	0236dc34 	movhi	r8,56176
 8121450:	422affc4 	addi	r8,r8,-21505
 8121454:	024ff6f4 	movhi	r9,16347
 8121458:	4a5b6d84 	addi	r9,r9,28086
 812145c:	480f883a 	mov	r7,r9
 8121460:	400d883a 	mov	r6,r8
 8121464:	180b883a 	mov	r5,r3
 8121468:	1009883a 	mov	r4,r2
 812146c:	81230180 	call	8123018 <__adddf3>
 8121470:	180f883a 	mov	r7,r3
 8121474:	8009883a 	mov	r4,r16
 8121478:	880b883a 	mov	r5,r17
 812147c:	100d883a 	mov	r6,r2
 8121480:	812308c0 	call	812308c <__muldf3>
 8121484:	020cccf4 	movhi	r8,13107
 8121488:	420cc0c4 	addi	r8,r8,13059
 812148c:	024ff8f4 	movhi	r9,16355
 8121490:	4a4cccc4 	addi	r9,r9,13107
 8121494:	480f883a 	mov	r7,r9
 8121498:	400d883a 	mov	r6,r8
 812149c:	180b883a 	mov	r5,r3
 81214a0:	1009883a 	mov	r4,r2
 81214a4:	81230180 	call	8123018 <__adddf3>
 81214a8:	180f883a 	mov	r7,r3
 81214ac:	a80b883a 	mov	r5,r21
 81214b0:	a009883a 	mov	r4,r20
 81214b4:	100d883a 	mov	r6,r2
 81214b8:	812308c0 	call	812308c <__muldf3>
 81214bc:	d9000317 	ldw	r4,12(sp)
 81214c0:	d9403017 	ldw	r5,192(sp)
 81214c4:	d9801617 	ldw	r6,88(sp)
 81214c8:	d9c02717 	ldw	r7,156(sp)
 81214cc:	1021883a 	mov	r16,r2
 81214d0:	1823883a 	mov	r17,r3
 81214d4:	81230180 	call	8123018 <__adddf3>
 81214d8:	d9003117 	ldw	r4,196(sp)
 81214dc:	d9403217 	ldw	r5,200(sp)
 81214e0:	180f883a 	mov	r7,r3
 81214e4:	100d883a 	mov	r6,r2
 81214e8:	d9001415 	stw	r4,80(sp)
 81214ec:	d9401515 	stw	r5,84(sp)
 81214f0:	812308c0 	call	812308c <__muldf3>
 81214f4:	180f883a 	mov	r7,r3
 81214f8:	8009883a 	mov	r4,r16
 81214fc:	880b883a 	mov	r5,r17
 8121500:	100d883a 	mov	r6,r2
 8121504:	81230180 	call	8123018 <__adddf3>
 8121508:	d9001617 	ldw	r4,88(sp)
 812150c:	d9402717 	ldw	r5,156(sp)
 8121510:	d8803315 	stw	r2,204(sp)
 8121514:	200d883a 	mov	r6,r4
 8121518:	280f883a 	mov	r7,r5
 812151c:	d8c03415 	stw	r3,208(sp)
 8121520:	812308c0 	call	812308c <__muldf3>
 8121524:	182f883a 	mov	r23,r3
 8121528:	05500234 	movhi	r21,16392
 812152c:	0029883a 	mov	r20,zero
 8121530:	b80b883a 	mov	r5,r23
 8121534:	a00d883a 	mov	r6,r20
 8121538:	a80f883a 	mov	r7,r21
 812153c:	1009883a 	mov	r4,r2
 8121540:	d8800715 	stw	r2,28(sp)
 8121544:	d8c00815 	stw	r3,32(sp)
 8121548:	81230180 	call	8123018 <__adddf3>
 812154c:	d9003317 	ldw	r4,204(sp)
 8121550:	d9403417 	ldw	r5,208(sp)
 8121554:	180f883a 	mov	r7,r3
 8121558:	100d883a 	mov	r6,r2
 812155c:	d9000515 	stw	r4,20(sp)
 8121560:	d9400615 	stw	r5,24(sp)
 8121564:	81230180 	call	8123018 <__adddf3>
 8121568:	d9001617 	ldw	r4,88(sp)
 812156c:	d9402717 	ldw	r5,156(sp)
 8121570:	0025883a 	mov	r18,zero
 8121574:	900d883a 	mov	r6,r18
 8121578:	180f883a 	mov	r7,r3
 812157c:	1823883a 	mov	r17,r3
 8121580:	812308c0 	call	812308c <__muldf3>
 8121584:	d9001417 	ldw	r4,80(sp)
 8121588:	d9403217 	ldw	r5,200(sp)
 812158c:	880f883a 	mov	r7,r17
 8121590:	900d883a 	mov	r6,r18
 8121594:	d8803515 	stw	r2,212(sp)
 8121598:	d8c03615 	stw	r3,216(sp)
 812159c:	812308c0 	call	812308c <__muldf3>
 81215a0:	a80f883a 	mov	r7,r21
 81215a4:	880b883a 	mov	r5,r17
 81215a8:	000d883a 	mov	r6,zero
 81215ac:	9009883a 	mov	r4,r18
 81215b0:	1021883a 	mov	r16,r2
 81215b4:	1823883a 	mov	r17,r3
 81215b8:	8122f980 	call	8122f98 <__subdf3>
 81215bc:	d9800717 	ldw	r6,28(sp)
 81215c0:	b80f883a 	mov	r7,r23
 81215c4:	180b883a 	mov	r5,r3
 81215c8:	1009883a 	mov	r4,r2
 81215cc:	8122f980 	call	8122f98 <__subdf3>
 81215d0:	d9000517 	ldw	r4,20(sp)
 81215d4:	d9403417 	ldw	r5,208(sp)
 81215d8:	180f883a 	mov	r7,r3
 81215dc:	100d883a 	mov	r6,r2
 81215e0:	8122f980 	call	8122f98 <__subdf3>
 81215e4:	d9000317 	ldw	r4,12(sp)
 81215e8:	d9403017 	ldw	r5,192(sp)
 81215ec:	180f883a 	mov	r7,r3
 81215f0:	100d883a 	mov	r6,r2
 81215f4:	812308c0 	call	812308c <__muldf3>
 81215f8:	180f883a 	mov	r7,r3
 81215fc:	880b883a 	mov	r5,r17
 8121600:	8009883a 	mov	r4,r16
 8121604:	100d883a 	mov	r6,r2
 8121608:	81230180 	call	8123018 <__adddf3>
 812160c:	102d883a 	mov	r22,r2
 8121610:	d9003617 	ldw	r4,216(sp)
 8121614:	d8803517 	ldw	r2,212(sp)
 8121618:	d9403617 	ldw	r5,216(sp)
 812161c:	182f883a 	mov	r23,r3
 8121620:	b00d883a 	mov	r6,r22
 8121624:	b80f883a 	mov	r7,r23
 8121628:	d9000a15 	stw	r4,40(sp)
 812162c:	1009883a 	mov	r4,r2
 8121630:	054ffbf4 	movhi	r21,16367
 8121634:	ad71c244 	addi	r21,r21,-14583
 8121638:	dd800d15 	stw	r22,52(sp)
 812163c:	ddc00e15 	stw	r23,56(sp)
 8121640:	05380034 	movhi	r20,57344
 8121644:	d8800915 	stw	r2,36(sp)
 8121648:	81230180 	call	8123018 <__adddf3>
 812164c:	180b883a 	mov	r5,r3
 8121650:	a00d883a 	mov	r6,r20
 8121654:	a80f883a 	mov	r7,r21
 8121658:	9009883a 	mov	r4,r18
 812165c:	1823883a 	mov	r17,r3
 8121660:	812308c0 	call	812308c <__muldf3>
 8121664:	020516f4 	movhi	r8,5211
 8121668:	42007d44 	addi	r8,r8,501
 812166c:	026f8fb4 	movhi	r9,48702
 8121670:	4a4bf804 	addi	r9,r9,12256
 8121674:	480f883a 	mov	r7,r9
 8121678:	400d883a 	mov	r6,r8
 812167c:	880b883a 	mov	r5,r17
 8121680:	9009883a 	mov	r4,r18
 8121684:	d8803715 	stw	r2,220(sp)
 8121688:	d8c03815 	stw	r3,224(sp)
 812168c:	812308c0 	call	812308c <__muldf3>
 8121690:	d9800917 	ldw	r6,36(sp)
 8121694:	d9c03617 	ldw	r7,216(sp)
 8121698:	880b883a 	mov	r5,r17
 812169c:	9009883a 	mov	r4,r18
 81216a0:	1021883a 	mov	r16,r2
 81216a4:	1823883a 	mov	r17,r3
 81216a8:	8122f980 	call	8122f98 <__subdf3>
 81216ac:	d9000d17 	ldw	r4,52(sp)
 81216b0:	b80b883a 	mov	r5,r23
 81216b4:	180f883a 	mov	r7,r3
 81216b8:	100d883a 	mov	r6,r2
 81216bc:	8122f980 	call	8122f98 <__subdf3>
 81216c0:	180b883a 	mov	r5,r3
 81216c4:	a80f883a 	mov	r7,r21
 81216c8:	01b70eb4 	movhi	r6,56378
 81216cc:	3180ff44 	addi	r6,r6,1021
 81216d0:	1009883a 	mov	r4,r2
 81216d4:	812308c0 	call	812308c <__muldf3>
 81216d8:	180f883a 	mov	r7,r3
 81216dc:	880b883a 	mov	r5,r17
 81216e0:	8009883a 	mov	r4,r16
 81216e4:	100d883a 	mov	r6,r2
 81216e8:	81230180 	call	8123018 <__adddf3>
 81216ec:	d9402c17 	ldw	r5,176(sp)
 81216f0:	010204f4 	movhi	r4,2067
 81216f4:	21222a04 	addi	r4,r4,-30552
 81216f8:	2909883a 	add	r4,r5,r4
 81216fc:	22400117 	ldw	r9,4(r4)
 8121700:	22000017 	ldw	r8,0(r4)
 8121704:	180b883a 	mov	r5,r3
 8121708:	480f883a 	mov	r7,r9
 812170c:	400d883a 	mov	r6,r8
 8121710:	1009883a 	mov	r4,r2
 8121714:	81230180 	call	8123018 <__adddf3>
 8121718:	d9000017 	ldw	r4,0(sp)
 812171c:	182f883a 	mov	r23,r3
 8121720:	102d883a 	mov	r22,r2
 8121724:	81239500 	call	8123950 <__floatsidf>
 8121728:	d9402c17 	ldw	r5,176(sp)
 812172c:	010204f4 	movhi	r4,2067
 8121730:	21222e04 	addi	r4,r4,-30536
 8121734:	b00d883a 	mov	r6,r22
 8121738:	2911883a 	add	r8,r5,r4
 812173c:	d9003717 	ldw	r4,220(sp)
 8121740:	d9403817 	ldw	r5,224(sp)
 8121744:	45000017 	ldw	r20,0(r8)
 8121748:	d9002315 	stw	r4,140(sp)
 812174c:	d9003817 	ldw	r4,224(sp)
 8121750:	45400117 	ldw	r21,4(r8)
 8121754:	b80f883a 	mov	r7,r23
 8121758:	d9002415 	stw	r4,144(sp)
 812175c:	d9002317 	ldw	r4,140(sp)
 8121760:	1021883a 	mov	r16,r2
 8121764:	1823883a 	mov	r17,r3
 8121768:	dd802115 	stw	r22,132(sp)
 812176c:	ddc02215 	stw	r23,136(sp)
 8121770:	81230180 	call	8123018 <__adddf3>
 8121774:	180b883a 	mov	r5,r3
 8121778:	1009883a 	mov	r4,r2
 812177c:	a00d883a 	mov	r6,r20
 8121780:	a80f883a 	mov	r7,r21
 8121784:	81230180 	call	8123018 <__adddf3>
 8121788:	180f883a 	mov	r7,r3
 812178c:	8009883a 	mov	r4,r16
 8121790:	880b883a 	mov	r5,r17
 8121794:	100d883a 	mov	r6,r2
 8121798:	81230180 	call	8123018 <__adddf3>
 812179c:	180b883a 	mov	r5,r3
 81217a0:	0009883a 	mov	r4,zero
 81217a4:	800d883a 	mov	r6,r16
 81217a8:	880f883a 	mov	r7,r17
 81217ac:	d9001b15 	stw	r4,108(sp)
 81217b0:	d8c01c15 	stw	r3,112(sp)
 81217b4:	8122f980 	call	8122f98 <__subdf3>
 81217b8:	180b883a 	mov	r5,r3
 81217bc:	a80f883a 	mov	r7,r21
 81217c0:	1009883a 	mov	r4,r2
 81217c4:	a00d883a 	mov	r6,r20
 81217c8:	8122f980 	call	8122f98 <__subdf3>
 81217cc:	d9802317 	ldw	r6,140(sp)
 81217d0:	d9c03817 	ldw	r7,224(sp)
 81217d4:	180b883a 	mov	r5,r3
 81217d8:	1009883a 	mov	r4,r2
 81217dc:	8122f980 	call	8122f98 <__subdf3>
 81217e0:	d9002117 	ldw	r4,132(sp)
 81217e4:	1011883a 	mov	r8,r2
 81217e8:	1813883a 	mov	r9,r3
 81217ec:	b80b883a 	mov	r5,r23
 81217f0:	480f883a 	mov	r7,r9
 81217f4:	400d883a 	mov	r6,r8
 81217f8:	8122f980 	call	8122f98 <__subdf3>
 81217fc:	1823883a 	mov	r17,r3
 8121800:	d8c02517 	ldw	r3,148(sp)
 8121804:	1021883a 	mov	r16,r2
 8121808:	e0bfffc4 	addi	r2,fp,-1
 812180c:	1884b03a 	or	r2,r3,r2
 8121810:	1000731e 	bne	r2,zero,81219e0 <__ieee754_pow+0xb88>
 8121814:	0009883a 	mov	r4,zero
 8121818:	016ffc34 	movhi	r5,49136
 812181c:	d9001915 	stw	r4,100(sp)
 8121820:	d9401a15 	stw	r5,104(sp)
 8121824:	d9402917 	ldw	r5,164(sp)
 8121828:	d9002817 	ldw	r4,160(sp)
 812182c:	0029883a 	mov	r20,zero
 8121830:	a00d883a 	mov	r6,r20
 8121834:	280f883a 	mov	r7,r5
 8121838:	2827883a 	mov	r19,r5
 812183c:	8122f980 	call	8122f98 <__subdf3>
 8121840:	d9001b17 	ldw	r4,108(sp)
 8121844:	d9401c17 	ldw	r5,112(sp)
 8121848:	180f883a 	mov	r7,r3
 812184c:	100d883a 	mov	r6,r2
 8121850:	812308c0 	call	812308c <__muldf3>
 8121854:	d9c02917 	ldw	r7,164(sp)
 8121858:	d9802817 	ldw	r6,160(sp)
 812185c:	880b883a 	mov	r5,r17
 8121860:	8009883a 	mov	r4,r16
 8121864:	1823883a 	mov	r17,r3
 8121868:	1021883a 	mov	r16,r2
 812186c:	812308c0 	call	812308c <__muldf3>
 8121870:	180f883a 	mov	r7,r3
 8121874:	880b883a 	mov	r5,r17
 8121878:	8009883a 	mov	r4,r16
 812187c:	100d883a 	mov	r6,r2
 8121880:	81230180 	call	8123018 <__adddf3>
 8121884:	d9401c17 	ldw	r5,112(sp)
 8121888:	d9001b17 	ldw	r4,108(sp)
 812188c:	a00d883a 	mov	r6,r20
 8121890:	980f883a 	mov	r7,r19
 8121894:	1029883a 	mov	r20,r2
 8121898:	182b883a 	mov	r21,r3
 812189c:	812308c0 	call	812308c <__muldf3>
 81218a0:	1025883a 	mov	r18,r2
 81218a4:	1827883a 	mov	r19,r3
 81218a8:	a009883a 	mov	r4,r20
 81218ac:	a80b883a 	mov	r5,r21
 81218b0:	900d883a 	mov	r6,r18
 81218b4:	980f883a 	mov	r7,r19
 81218b8:	dd001d15 	stw	r20,116(sp)
 81218bc:	dc801f15 	stw	r18,124(sp)
 81218c0:	dd401e15 	stw	r21,120(sp)
 81218c4:	dcc02015 	stw	r19,128(sp)
 81218c8:	81230180 	call	8123018 <__adddf3>
 81218cc:	1823883a 	mov	r17,r3
 81218d0:	01102434 	movhi	r4,16528
 81218d4:	213fffc4 	addi	r4,r4,-1
 81218d8:	1021883a 	mov	r16,r2
 81218dc:	182f883a 	mov	r23,r3
 81218e0:	dc401815 	stw	r17,96(sp)
 81218e4:	100b883a 	mov	r5,r2
 81218e8:	20c02c0e 	bge	r4,r3,812199c <__ieee754_pow+0xb44>
 81218ec:	00afdc34 	movhi	r2,49008
 81218f0:	1885883a 	add	r2,r3,r2
 81218f4:	2884b03a 	or	r2,r5,r2
 81218f8:	1001a626 	beq	r2,zero,8121f94 <__ieee754_pow+0x113c>
 81218fc:	04220034 	movhi	r16,34816
 8121900:	841d6704 	addi	r16,r16,30108
 8121904:	045f8e34 	movhi	r17,32312
 8121908:	8c790f04 	addi	r17,r17,-7108
 812190c:	d9401a17 	ldw	r5,104(sp)
 8121910:	d9001917 	ldw	r4,100(sp)
 8121914:	800d883a 	mov	r6,r16
 8121918:	880f883a 	mov	r7,r17
 812191c:	812308c0 	call	812308c <__muldf3>
 8121920:	180b883a 	mov	r5,r3
 8121924:	800d883a 	mov	r6,r16
 8121928:	880f883a 	mov	r7,r17
 812192c:	1009883a 	mov	r4,r2
 8121930:	812308c0 	call	812308c <__muldf3>
 8121934:	003dc306 	br	8121044 <__ieee754_pow+0x1ec>
 8121938:	00b00434 	movhi	r2,49168
 812193c:	9085883a 	add	r2,r18,r2
 8121940:	e084b03a 	or	r2,fp,r2
 8121944:	1000af1e 	bne	r2,zero,8121c04 <__ieee754_pow+0xdac>
 8121948:	480f883a 	mov	r7,r9
 812194c:	4009883a 	mov	r4,r8
 8121950:	480b883a 	mov	r5,r9
 8121954:	400d883a 	mov	r6,r8
 8121958:	003db406 	br	812102c <__ieee754_pow+0x1d4>
 812195c:	00bffc34 	movhi	r2,65520
 8121960:	18ff0084 	addi	r3,r3,-1022
 8121964:	a0a9883a 	add	r20,r20,r2
 8121968:	d8c00015 	stw	r3,0(sp)
 812196c:	0009883a 	mov	r4,zero
 8121970:	04000234 	movhi	r16,8
 8121974:	003e1406 	br	81211c8 <__ieee754_pow+0x370>
 8121978:	a80f883a 	mov	r7,r21
 812197c:	a009883a 	mov	r4,r20
 8121980:	a80b883a 	mov	r5,r21
 8121984:	a00d883a 	mov	r6,r20
 8121988:	812308c0 	call	812308c <__muldf3>
 812198c:	180b883a 	mov	r5,r3
 8121990:	d8802815 	stw	r2,160(sp)
 8121994:	d9402915 	stw	r5,164(sp)
 8121998:	003d5606 	br	8120ef4 <__ieee754_pow+0x9c>
 812199c:	d9001817 	ldw	r4,96(sp)
 81219a0:	00a00034 	movhi	r2,32768
 81219a4:	10bfffc4 	addi	r2,r2,-1
 81219a8:	00d02474 	movhi	r3,16529
 81219ac:	18f2ffc4 	addi	r3,r3,-13313
 81219b0:	20b8703a 	and	fp,r4,r2
 81219b4:	1f009d0e 	bge	r3,fp,8121c2c <__ieee754_pow+0xdd4>
 81219b8:	008fdbf4 	movhi	r2,16239
 81219bc:	108d0004 	addi	r2,r2,13312
 81219c0:	2085883a 	add	r2,r4,r2
 81219c4:	1144b03a 	or	r2,r2,r5
 81219c8:	1001c626 	beq	r2,zero,81220e4 <__ieee754_pow+0x128c>
 81219cc:	0430be74 	movhi	r16,49913
 81219d0:	843cd644 	addi	r16,r16,-3239
 81219d4:	04406974 	movhi	r17,421
 81219d8:	8c5b87c4 	addi	r17,r17,28191
 81219dc:	003fcb06 	br	812190c <__ieee754_pow+0xab4>
 81219e0:	0005883a 	mov	r2,zero
 81219e4:	00cffc34 	movhi	r3,16368
 81219e8:	d8801915 	stw	r2,100(sp)
 81219ec:	d8c01a15 	stw	r3,104(sp)
 81219f0:	003f8c06 	br	8121824 <__ieee754_pow+0x9cc>
 81219f4:	0005883a 	mov	r2,zero
 81219f8:	00cffc34 	movhi	r3,16368
 81219fc:	180b883a 	mov	r5,r3
 8121a00:	580f883a 	mov	r7,r11
 8121a04:	1009883a 	mov	r4,r2
 8121a08:	500d883a 	mov	r6,r10
 8121a0c:	81234500 	call	8123450 <__divdf3>
 8121a10:	1011883a 	mov	r8,r2
 8121a14:	1813883a 	mov	r9,r3
 8121a18:	003d9506 	br	8121070 <__ieee754_pow+0x218>
 8121a1c:	008ffc34 	movhi	r2,16368
 8121a20:	10bfff84 	addi	r2,r2,-2
 8121a24:	14bdbb0e 	bge	r2,r18,8121114 <__ieee754_pow+0x2bc>
 8121a28:	008ffc34 	movhi	r2,16368
 8121a2c:	14bdae16 	blt	r2,r18,81210e8 <__ieee754_pow+0x290>
 8121a30:	580b883a 	mov	r5,r11
 8121a34:	5009883a 	mov	r4,r10
 8121a38:	000d883a 	mov	r6,zero
 8121a3c:	100f883a 	mov	r7,r2
 8121a40:	8122f980 	call	8122f98 <__subdf3>
 8121a44:	1021883a 	mov	r16,r2
 8121a48:	1823883a 	mov	r17,r3
 8121a4c:	00980034 	movhi	r2,24576
 8121a50:	00cffdf4 	movhi	r3,16375
 8121a54:	18c551c4 	addi	r3,r3,5447
 8121a58:	8009883a 	mov	r4,r16
 8121a5c:	880b883a 	mov	r5,r17
 8121a60:	180f883a 	mov	r7,r3
 8121a64:	100d883a 	mov	r6,r2
 8121a68:	812308c0 	call	812308c <__muldf3>
 8121a6c:	023e17b4 	movhi	r8,63582
 8121a70:	4237d104 	addi	r8,r8,-8380
 8121a74:	024f9574 	movhi	r9,15957
 8121a78:	4a6b82c4 	addi	r9,r9,-20981
 8121a7c:	480f883a 	mov	r7,r9
 8121a80:	400d883a 	mov	r6,r8
 8121a84:	8009883a 	mov	r4,r16
 8121a88:	880b883a 	mov	r5,r17
 8121a8c:	102d883a 	mov	r22,r2
 8121a90:	182f883a 	mov	r23,r3
 8121a94:	812308c0 	call	812308c <__muldf3>
 8121a98:	8009883a 	mov	r4,r16
 8121a9c:	880b883a 	mov	r5,r17
 8121aa0:	800d883a 	mov	r6,r16
 8121aa4:	880f883a 	mov	r7,r17
 8121aa8:	d8802a15 	stw	r2,168(sp)
 8121aac:	d8c02b15 	stw	r3,172(sp)
 8121ab0:	812308c0 	call	812308c <__muldf3>
 8121ab4:	0011883a 	mov	r8,zero
 8121ab8:	026ff434 	movhi	r9,49104
 8121abc:	480f883a 	mov	r7,r9
 8121ac0:	8009883a 	mov	r4,r16
 8121ac4:	880b883a 	mov	r5,r17
 8121ac8:	400d883a 	mov	r6,r8
 8121acc:	1029883a 	mov	r20,r2
 8121ad0:	182b883a 	mov	r21,r3
 8121ad4:	812308c0 	call	812308c <__muldf3>
 8121ad8:	02155574 	movhi	r8,21845
 8121adc:	42155544 	addi	r8,r8,21845
 8121ae0:	024ff574 	movhi	r9,16341
 8121ae4:	4a555544 	addi	r9,r9,21845
 8121ae8:	480f883a 	mov	r7,r9
 8121aec:	400d883a 	mov	r6,r8
 8121af0:	180b883a 	mov	r5,r3
 8121af4:	1009883a 	mov	r4,r2
 8121af8:	81230180 	call	8123018 <__adddf3>
 8121afc:	180f883a 	mov	r7,r3
 8121b00:	8009883a 	mov	r4,r16
 8121b04:	880b883a 	mov	r5,r17
 8121b08:	100d883a 	mov	r6,r2
 8121b0c:	812308c0 	call	812308c <__muldf3>
 8121b10:	0011883a 	mov	r8,zero
 8121b14:	024ff834 	movhi	r9,16352
 8121b18:	480b883a 	mov	r5,r9
 8121b1c:	4009883a 	mov	r4,r8
 8121b20:	180f883a 	mov	r7,r3
 8121b24:	100d883a 	mov	r6,r2
 8121b28:	8122f980 	call	8122f98 <__subdf3>
 8121b2c:	180f883a 	mov	r7,r3
 8121b30:	a80b883a 	mov	r5,r21
 8121b34:	a009883a 	mov	r4,r20
 8121b38:	100d883a 	mov	r6,r2
 8121b3c:	812308c0 	call	812308c <__muldf3>
 8121b40:	02194b34 	movhi	r8,25900
 8121b44:	4220bf84 	addi	r8,r8,-32002
 8121b48:	026ffdf4 	movhi	r9,49143
 8121b4c:	4a4551c4 	addi	r9,r9,5447
 8121b50:	480f883a 	mov	r7,r9
 8121b54:	400d883a 	mov	r6,r8
 8121b58:	180b883a 	mov	r5,r3
 8121b5c:	1009883a 	mov	r4,r2
 8121b60:	812308c0 	call	812308c <__muldf3>
 8121b64:	d9402b17 	ldw	r5,172(sp)
 8121b68:	d9002a17 	ldw	r4,168(sp)
 8121b6c:	180f883a 	mov	r7,r3
 8121b70:	100d883a 	mov	r6,r2
 8121b74:	81230180 	call	8123018 <__adddf3>
 8121b78:	100d883a 	mov	r6,r2
 8121b7c:	b009883a 	mov	r4,r22
 8121b80:	b80b883a 	mov	r5,r23
 8121b84:	180f883a 	mov	r7,r3
 8121b88:	1021883a 	mov	r16,r2
 8121b8c:	1823883a 	mov	r17,r3
 8121b90:	81230180 	call	8123018 <__adddf3>
 8121b94:	180b883a 	mov	r5,r3
 8121b98:	0009883a 	mov	r4,zero
 8121b9c:	b00d883a 	mov	r6,r22
 8121ba0:	b80f883a 	mov	r7,r23
 8121ba4:	d9001b15 	stw	r4,108(sp)
 8121ba8:	d8c01c15 	stw	r3,112(sp)
 8121bac:	8122f980 	call	8122f98 <__subdf3>
 8121bb0:	1011883a 	mov	r8,r2
 8121bb4:	1813883a 	mov	r9,r3
 8121bb8:	8009883a 	mov	r4,r16
 8121bbc:	880b883a 	mov	r5,r17
 8121bc0:	003f0b06 	br	81217f0 <__ieee754_pow+0x998>
 8121bc4:	0005883a 	mov	r2,zero
 8121bc8:	00d0d034 	movhi	r3,17216
 8121bcc:	580b883a 	mov	r5,r11
 8121bd0:	5009883a 	mov	r4,r10
 8121bd4:	180f883a 	mov	r7,r3
 8121bd8:	100d883a 	mov	r6,r2
 8121bdc:	812308c0 	call	812308c <__muldf3>
 8121be0:	1015883a 	mov	r10,r2
 8121be4:	1825883a 	mov	r18,r3
 8121be8:	017ff2c4 	movi	r5,-53
 8121bec:	003d6606 	br	8121188 <__ieee754_pow+0x330>
 8121bf0:	b03d300e 	bge	r22,zero,81210b4 <__ieee754_pow+0x25c>
 8121bf4:	d9402917 	ldw	r5,164(sp)
 8121bf8:	28e0003c 	xorhi	r3,r5,32768
 8121bfc:	d8c02915 	stw	r3,164(sp)
 8121c00:	003cbc06 	br	8120ef4 <__ieee754_pow+0x9c>
 8121c04:	00800044 	movi	r2,1
 8121c08:	e0bd1a1e 	bne	fp,r2,8121074 <__ieee754_pow+0x21c>
 8121c0c:	48e0003c 	xorhi	r3,r9,32768
 8121c10:	da002815 	stw	r8,160(sp)
 8121c14:	d8c02915 	stw	r3,164(sp)
 8121c18:	003cb606 	br	8120ef4 <__ieee754_pow+0x9c>
 8121c1c:	d9001817 	ldw	r4,96(sp)
 8121c20:	00a00034 	movhi	r2,32768
 8121c24:	10bfffc4 	addi	r2,r2,-1
 8121c28:	20b8703a 	and	fp,r4,r2
 8121c2c:	008ff834 	movhi	r2,16352
 8121c30:	1700fc16 	blt	r2,fp,8122024 <__ieee754_pow+0x11cc>
 8121c34:	0039883a 	mov	fp,zero
 8121c38:	d8001315 	stw	zero,76(sp)
 8121c3c:	0025883a 	mov	r18,zero
 8121c40:	0005883a 	mov	r2,zero
 8121c44:	00cff9b4 	movhi	r3,16358
 8121c48:	18cb90c4 	addi	r3,r3,11843
 8121c4c:	9009883a 	mov	r4,r18
 8121c50:	b80b883a 	mov	r5,r23
 8121c54:	180f883a 	mov	r7,r3
 8121c58:	100d883a 	mov	r6,r2
 8121c5c:	812308c0 	call	812308c <__muldf3>
 8121c60:	d9c02017 	ldw	r7,128(sp)
 8121c64:	d9801f17 	ldw	r6,124(sp)
 8121c68:	9009883a 	mov	r4,r18
 8121c6c:	b80b883a 	mov	r5,r23
 8121c70:	b823883a 	mov	r17,r23
 8121c74:	102d883a 	mov	r22,r2
 8121c78:	182f883a 	mov	r23,r3
 8121c7c:	8122f980 	call	8122f98 <__subdf3>
 8121c80:	d9401e17 	ldw	r5,120(sp)
 8121c84:	d9001d17 	ldw	r4,116(sp)
 8121c88:	180f883a 	mov	r7,r3
 8121c8c:	100d883a 	mov	r6,r2
 8121c90:	8122f980 	call	8122f98 <__subdf3>
 8121c94:	023fbeb4 	movhi	r8,65274
 8121c98:	420e7bc4 	addi	r8,r8,14831
 8121c9c:	024ff9b4 	movhi	r9,16358
 8121ca0:	4a4b9084 	addi	r9,r9,11842
 8121ca4:	480f883a 	mov	r7,r9
 8121ca8:	400d883a 	mov	r6,r8
 8121cac:	180b883a 	mov	r5,r3
 8121cb0:	1009883a 	mov	r4,r2
 8121cb4:	812308c0 	call	812308c <__muldf3>
 8121cb8:	02032a34 	movhi	r8,3240
 8121cbc:	421b0e44 	addi	r8,r8,27705
 8121cc0:	026f8834 	movhi	r9,48672
 8121cc4:	4a571844 	addi	r9,r9,23649
 8121cc8:	480f883a 	mov	r7,r9
 8121ccc:	400d883a 	mov	r6,r8
 8121cd0:	9009883a 	mov	r4,r18
 8121cd4:	880b883a 	mov	r5,r17
 8121cd8:	1021883a 	mov	r16,r2
 8121cdc:	1823883a 	mov	r17,r3
 8121ce0:	812308c0 	call	812308c <__muldf3>
 8121ce4:	180f883a 	mov	r7,r3
 8121ce8:	880b883a 	mov	r5,r17
 8121cec:	8009883a 	mov	r4,r16
 8121cf0:	100d883a 	mov	r6,r2
 8121cf4:	81230180 	call	8123018 <__adddf3>
 8121cf8:	100d883a 	mov	r6,r2
 8121cfc:	b009883a 	mov	r4,r22
 8121d00:	b80b883a 	mov	r5,r23
 8121d04:	180f883a 	mov	r7,r3
 8121d08:	1021883a 	mov	r16,r2
 8121d0c:	1823883a 	mov	r17,r3
 8121d10:	81230180 	call	8123018 <__adddf3>
 8121d14:	1009883a 	mov	r4,r2
 8121d18:	180b883a 	mov	r5,r3
 8121d1c:	b00d883a 	mov	r6,r22
 8121d20:	b80f883a 	mov	r7,r23
 8121d24:	d8803915 	stw	r2,228(sp)
 8121d28:	d8c03a15 	stw	r3,232(sp)
 8121d2c:	d8801115 	stw	r2,68(sp)
 8121d30:	d8c01215 	stw	r3,72(sp)
 8121d34:	8122f980 	call	8122f98 <__subdf3>
 8121d38:	180f883a 	mov	r7,r3
 8121d3c:	8009883a 	mov	r4,r16
 8121d40:	880b883a 	mov	r5,r17
 8121d44:	100d883a 	mov	r6,r2
 8121d48:	8122f980 	call	8122f98 <__subdf3>
 8121d4c:	d9001117 	ldw	r4,68(sp)
 8121d50:	d9403a17 	ldw	r5,232(sp)
 8121d54:	1029883a 	mov	r20,r2
 8121d58:	200d883a 	mov	r6,r4
 8121d5c:	280f883a 	mov	r7,r5
 8121d60:	182b883a 	mov	r21,r3
 8121d64:	812308c0 	call	812308c <__muldf3>
 8121d68:	1021883a 	mov	r16,r2
 8121d6c:	1823883a 	mov	r17,r3
 8121d70:	009caff4 	movhi	r2,29375
 8121d74:	10a93404 	addi	r2,r2,-23344
 8121d78:	00cf99b4 	movhi	r3,15974
 8121d7c:	18cdda44 	addi	r3,r3,14185
 8121d80:	8009883a 	mov	r4,r16
 8121d84:	880b883a 	mov	r5,r17
 8121d88:	180f883a 	mov	r7,r3
 8121d8c:	100d883a 	mov	r6,r2
 8121d90:	812308c0 	call	812308c <__muldf3>
 8121d94:	023174b4 	movhi	r8,50642
 8121d98:	421afc44 	addi	r8,r8,27633
 8121d9c:	024faf34 	movhi	r9,16060
 8121da0:	4a6f5044 	addi	r9,r9,-17087
 8121da4:	480f883a 	mov	r7,r9
 8121da8:	400d883a 	mov	r6,r8
 8121dac:	180b883a 	mov	r5,r3
 8121db0:	1009883a 	mov	r4,r2
 8121db4:	8122f980 	call	8122f98 <__subdf3>
 8121db8:	180f883a 	mov	r7,r3
 8121dbc:	8009883a 	mov	r4,r16
 8121dc0:	880b883a 	mov	r5,r17
 8121dc4:	100d883a 	mov	r6,r2
 8121dc8:	812308c0 	call	812308c <__muldf3>
 8121dcc:	022bc9b4 	movhi	r8,44838
 8121dd0:	42378b04 	addi	r8,r8,-8660
 8121dd4:	024fc474 	movhi	r9,16145
 8121dd8:	4a559a84 	addi	r9,r9,22122
 8121ddc:	480f883a 	mov	r7,r9
 8121de0:	400d883a 	mov	r6,r8
 8121de4:	180b883a 	mov	r5,r3
 8121de8:	1009883a 	mov	r4,r2
 8121dec:	81230180 	call	8123018 <__adddf3>
 8121df0:	180f883a 	mov	r7,r3
 8121df4:	8009883a 	mov	r4,r16
 8121df8:	880b883a 	mov	r5,r17
 8121dfc:	100d883a 	mov	r6,r2
 8121e00:	812308c0 	call	812308c <__muldf3>
 8121e04:	0205aff4 	movhi	r8,5823
 8121e08:	422f64c4 	addi	r8,r8,-17005
 8121e0c:	024fd9f4 	movhi	r9,16231
 8121e10:	4a705b04 	addi	r9,r9,-16020
 8121e14:	480f883a 	mov	r7,r9
 8121e18:	400d883a 	mov	r6,r8
 8121e1c:	180b883a 	mov	r5,r3
 8121e20:	1009883a 	mov	r4,r2
 8121e24:	8122f980 	call	8122f98 <__subdf3>
 8121e28:	180f883a 	mov	r7,r3
 8121e2c:	8009883a 	mov	r4,r16
 8121e30:	880b883a 	mov	r5,r17
 8121e34:	100d883a 	mov	r6,r2
 8121e38:	812308c0 	call	812308c <__muldf3>
 8121e3c:	02155574 	movhi	r8,21845
 8121e40:	42154f84 	addi	r8,r8,21822
 8121e44:	024ff174 	movhi	r9,16325
 8121e48:	4a555544 	addi	r9,r9,21845
 8121e4c:	480f883a 	mov	r7,r9
 8121e50:	400d883a 	mov	r6,r8
 8121e54:	180b883a 	mov	r5,r3
 8121e58:	1009883a 	mov	r4,r2
 8121e5c:	81230180 	call	8123018 <__adddf3>
 8121e60:	180f883a 	mov	r7,r3
 8121e64:	8009883a 	mov	r4,r16
 8121e68:	880b883a 	mov	r5,r17
 8121e6c:	100d883a 	mov	r6,r2
 8121e70:	812308c0 	call	812308c <__muldf3>
 8121e74:	d9001117 	ldw	r4,68(sp)
 8121e78:	d9403a17 	ldw	r5,232(sp)
 8121e7c:	180f883a 	mov	r7,r3
 8121e80:	100d883a 	mov	r6,r2
 8121e84:	8122f980 	call	8122f98 <__subdf3>
 8121e88:	d9001117 	ldw	r4,68(sp)
 8121e8c:	d9403a17 	ldw	r5,232(sp)
 8121e90:	100d883a 	mov	r6,r2
 8121e94:	180f883a 	mov	r7,r3
 8121e98:	1021883a 	mov	r16,r2
 8121e9c:	1823883a 	mov	r17,r3
 8121ea0:	812308c0 	call	812308c <__muldf3>
 8121ea4:	0011883a 	mov	r8,zero
 8121ea8:	02500034 	movhi	r9,16384
 8121eac:	480f883a 	mov	r7,r9
 8121eb0:	400d883a 	mov	r6,r8
 8121eb4:	8009883a 	mov	r4,r16
 8121eb8:	880b883a 	mov	r5,r17
 8121ebc:	1021883a 	mov	r16,r2
 8121ec0:	1823883a 	mov	r17,r3
 8121ec4:	8122f980 	call	8122f98 <__subdf3>
 8121ec8:	180f883a 	mov	r7,r3
 8121ecc:	880b883a 	mov	r5,r17
 8121ed0:	8009883a 	mov	r4,r16
 8121ed4:	100d883a 	mov	r6,r2
 8121ed8:	81234500 	call	8123450 <__divdf3>
 8121edc:	d9001117 	ldw	r4,68(sp)
 8121ee0:	d9403a17 	ldw	r5,232(sp)
 8121ee4:	a00d883a 	mov	r6,r20
 8121ee8:	a80f883a 	mov	r7,r21
 8121eec:	1025883a 	mov	r18,r2
 8121ef0:	1827883a 	mov	r19,r3
 8121ef4:	812308c0 	call	812308c <__muldf3>
 8121ef8:	180f883a 	mov	r7,r3
 8121efc:	a009883a 	mov	r4,r20
 8121f00:	a80b883a 	mov	r5,r21
 8121f04:	100d883a 	mov	r6,r2
 8121f08:	81230180 	call	8123018 <__adddf3>
 8121f0c:	180f883a 	mov	r7,r3
 8121f10:	980b883a 	mov	r5,r19
 8121f14:	9009883a 	mov	r4,r18
 8121f18:	100d883a 	mov	r6,r2
 8121f1c:	8122f980 	call	8122f98 <__subdf3>
 8121f20:	d9801117 	ldw	r6,68(sp)
 8121f24:	d9c03a17 	ldw	r7,232(sp)
 8121f28:	180b883a 	mov	r5,r3
 8121f2c:	1009883a 	mov	r4,r2
 8121f30:	8122f980 	call	8122f98 <__subdf3>
 8121f34:	0011883a 	mov	r8,zero
 8121f38:	024ffc34 	movhi	r9,16368
 8121f3c:	480b883a 	mov	r5,r9
 8121f40:	180f883a 	mov	r7,r3
 8121f44:	4009883a 	mov	r4,r8
 8121f48:	100d883a 	mov	r6,r2
 8121f4c:	8122f980 	call	8122f98 <__subdf3>
 8121f50:	100b883a 	mov	r5,r2
 8121f54:	d8801317 	ldw	r2,76(sp)
 8121f58:	10d5883a 	add	r10,r2,r3
 8121f5c:	5005d53a 	srai	r2,r10,20
 8121f60:	0080720e 	bge	zero,r2,812212c <__ieee754_pow+0x12d4>
 8121f64:	2811883a 	mov	r8,r5
 8121f68:	5013883a 	mov	r9,r10
 8121f6c:	d9c01a17 	ldw	r7,104(sp)
 8121f70:	d9801917 	ldw	r6,100(sp)
 8121f74:	480b883a 	mov	r5,r9
 8121f78:	4009883a 	mov	r4,r8
 8121f7c:	003e8206 	br	8121988 <__ieee754_pow+0xb30>
 8121f80:	0009883a 	mov	r4,zero
 8121f84:	800b883a 	mov	r5,r16
 8121f88:	a80f883a 	mov	r7,r21
 8121f8c:	a00d883a 	mov	r6,r20
 8121f90:	003c2b06 	br	8121040 <__ieee754_pow+0x1e8>
 8121f94:	d9001d17 	ldw	r4,116(sp)
 8121f98:	00994b34 	movhi	r2,25900
 8121f9c:	10a0bf84 	addi	r2,r2,-32002
 8121fa0:	00cf25f4 	movhi	r3,15511
 8121fa4:	18c551c4 	addi	r3,r3,5447
 8121fa8:	a80b883a 	mov	r5,r21
 8121fac:	180f883a 	mov	r7,r3
 8121fb0:	100d883a 	mov	r6,r2
 8121fb4:	81230180 	call	8123018 <__adddf3>
 8121fb8:	d9801f17 	ldw	r6,124(sp)
 8121fbc:	880b883a 	mov	r5,r17
 8121fc0:	8009883a 	mov	r4,r16
 8121fc4:	980f883a 	mov	r7,r19
 8121fc8:	1021883a 	mov	r16,r2
 8121fcc:	1823883a 	mov	r17,r3
 8121fd0:	8122f980 	call	8122f98 <__subdf3>
 8121fd4:	180f883a 	mov	r7,r3
 8121fd8:	880b883a 	mov	r5,r17
 8121fdc:	8009883a 	mov	r4,r16
 8121fe0:	100d883a 	mov	r6,r2
 8121fe4:	81237b80 	call	81237b8 <__gtdf2>
 8121fe8:	00bf0c0e 	bge	zero,r2,8121c1c <__ieee754_pow+0xdc4>
 8121fec:	04220034 	movhi	r16,34816
 8121ff0:	841d6704 	addi	r16,r16,30108
 8121ff4:	045f8e34 	movhi	r17,32312
 8121ff8:	8c790f04 	addi	r17,r17,-7108
 8121ffc:	d9401a17 	ldw	r5,104(sp)
 8122000:	d9001917 	ldw	r4,100(sp)
 8122004:	800d883a 	mov	r6,r16
 8122008:	880f883a 	mov	r7,r17
 812200c:	812308c0 	call	812308c <__muldf3>
 8122010:	180b883a 	mov	r5,r3
 8122014:	800d883a 	mov	r6,r16
 8122018:	880f883a 	mov	r7,r17
 812201c:	1009883a 	mov	r4,r2
 8122020:	003e5906 	br	8121988 <__ieee754_pow+0xb30>
 8122024:	e005d53a 	srai	r2,fp,20
 8122028:	01800434 	movhi	r6,16
 812202c:	d9401817 	ldw	r5,96(sp)
 8122030:	10bf0084 	addi	r2,r2,-1022
 8122034:	308dd83a 	sra	r6,r6,r2
 8122038:	02000434 	movhi	r8,16
 812203c:	423fffc4 	addi	r8,r8,-1
 8122040:	0005883a 	mov	r2,zero
 8122044:	298d883a 	add	r6,r5,r6
 8122048:	318b883a 	add	r5,r6,r6
 812204c:	320e703a 	and	r7,r6,r8
 8122050:	1013883a 	mov	r9,r2
 8122054:	280ad57a 	srli	r5,r5,21
 8122058:	d8801817 	ldw	r2,96(sp)
 812205c:	01000504 	movi	r4,20
 8122060:	297f0044 	addi	r5,r5,-1023
 8122064:	4151d83a 	sra	r8,r8,r5
 8122068:	39c00434 	orhi	r7,r7,16
 812206c:	2149c83a 	sub	r4,r4,r5
 8122070:	0210303a 	nor	r8,zero,r8
 8122074:	3939d83a 	sra	fp,r7,r4
 8122078:	320e703a 	and	r7,r6,r8
 812207c:	10002916 	blt	r2,zero,8122124 <__ieee754_pow+0x12cc>
 8122080:	d9402017 	ldw	r5,128(sp)
 8122084:	d9001f17 	ldw	r4,124(sp)
 8122088:	480d883a 	mov	r6,r9
 812208c:	8122f980 	call	8122f98 <__subdf3>
 8122090:	180b883a 	mov	r5,r3
 8122094:	d9402015 	stw	r5,128(sp)
 8122098:	280f883a 	mov	r7,r5
 812209c:	d9001d17 	ldw	r4,116(sp)
 81220a0:	d9401e17 	ldw	r5,120(sp)
 81220a4:	1007883a 	mov	r3,r2
 81220a8:	180d883a 	mov	r6,r3
 81220ac:	d8801f15 	stw	r2,124(sp)
 81220b0:	81230180 	call	8123018 <__adddf3>
 81220b4:	180b883a 	mov	r5,r3
 81220b8:	e006953a 	slli	r3,fp,20
 81220bc:	282f883a 	mov	r23,r5
 81220c0:	d8c01315 	stw	r3,76(sp)
 81220c4:	003edd06 	br	8121c3c <__ieee754_pow+0xde4>
 81220c8:	383bc81e 	bne	r7,zero,8120fec <__ieee754_pow+0x194>
 81220cc:	28c5c83a 	sub	r2,r5,r3
 81220d0:	8087d83a 	sra	r3,r16,r2
 81220d4:	1884983a 	sll	r2,r3,r2
 81220d8:	80801b26 	beq	r16,r2,8122148 <__ieee754_pow+0x12f0>
 81220dc:	0039883a 	mov	fp,zero
 81220e0:	003b9d06 	br	8120f58 <__ieee754_pow+0x100>
 81220e4:	d9801f17 	ldw	r6,124(sp)
 81220e8:	8009883a 	mov	r4,r16
 81220ec:	880b883a 	mov	r5,r17
 81220f0:	980f883a 	mov	r7,r19
 81220f4:	8122f980 	call	8122f98 <__subdf3>
 81220f8:	d9001d17 	ldw	r4,116(sp)
 81220fc:	a80b883a 	mov	r5,r21
 8122100:	180f883a 	mov	r7,r3
 8122104:	100d883a 	mov	r6,r2
 8122108:	81238c80 	call	81238c8 <__ledf2>
 812210c:	00bfc516 	blt	zero,r2,8122024 <__ieee754_pow+0x11cc>
 8122110:	0430be74 	movhi	r16,49913
 8122114:	843cd644 	addi	r16,r16,-3239
 8122118:	04406974 	movhi	r17,421
 812211c:	8c5b87c4 	addi	r17,r17,28191
 8122120:	003fb606 	br	8121ffc <__ieee754_pow+0x11a4>
 8122124:	0739c83a 	sub	fp,zero,fp
 8122128:	003fd506 	br	8122080 <__ieee754_pow+0x1228>
 812212c:	2809883a 	mov	r4,r5
 8122130:	e00d883a 	mov	r6,fp
 8122134:	180b883a 	mov	r5,r3
 8122138:	81226ac0 	call	81226ac <scalbn>
 812213c:	1011883a 	mov	r8,r2
 8122140:	1813883a 	mov	r9,r3
 8122144:	003f8906 	br	8121f6c <__ieee754_pow+0x1114>
 8122148:	18c0004c 	andi	r3,r3,1
 812214c:	00800084 	movi	r2,2
 8122150:	10f9c83a 	sub	fp,r2,r3
 8122154:	003b8006 	br	8120f58 <__ieee754_pow+0x100>

08122158 <__ieee754_sqrt>:
 8122158:	defffd04 	addi	sp,sp,-12
 812215c:	dc000015 	stw	r16,0(sp)
 8122160:	009ffc34 	movhi	r2,32752
 8122164:	2021883a 	mov	r16,r4
 8122168:	291ffc2c 	andhi	r4,r5,32752
 812216c:	dc400115 	stw	r17,4(sp)
 8122170:	dfc00215 	stw	ra,8(sp)
 8122174:	2823883a 	mov	r17,r5
 8122178:	280f883a 	mov	r7,r5
 812217c:	2807883a 	mov	r3,r5
 8122180:	8011883a 	mov	r8,r16
 8122184:	20807d26 	beq	r4,r2,812237c <__ieee754_sqrt+0x224>
 8122188:	01408d0e 	bge	zero,r5,81223c0 <__ieee754_sqrt+0x268>
 812218c:	380dd53a 	srai	r6,r7,20
 8122190:	3000131e 	bne	r6,zero,81221e0 <__ieee754_sqrt+0x88>
 8122194:	1800041e 	bne	r3,zero,81221a8 <__ieee754_sqrt+0x50>
 8122198:	400ed2fa 	srli	r7,r8,11
 812219c:	31bffac4 	addi	r6,r6,-21
 81221a0:	4010957a 	slli	r8,r8,21
 81221a4:	383ffc26 	beq	r7,zero,8122198 <__ieee754_sqrt+0x40>
 81221a8:	3880042c 	andhi	r2,r7,16
 81221ac:	1000991e 	bne	r2,zero,8122414 <__ieee754_sqrt+0x2bc>
 81221b0:	0009883a 	mov	r4,zero
 81221b4:	39cf883a 	add	r7,r7,r7
 81221b8:	3880042c 	andhi	r2,r7,16
 81221bc:	21000044 	addi	r4,r4,1
 81221c0:	103ffc26 	beq	r2,zero,81221b4 <__ieee754_sqrt+0x5c>
 81221c4:	00800804 	movi	r2,32
 81221c8:	1105c83a 	sub	r2,r2,r4
 81221cc:	4086d83a 	srl	r3,r8,r2
 81221d0:	4110983a 	sll	r8,r8,r4
 81221d4:	3105c83a 	sub	r2,r6,r4
 81221d8:	38ceb03a 	or	r7,r7,r3
 81221dc:	11800044 	addi	r6,r2,1
 81221e0:	31bf0044 	addi	r6,r6,-1023
 81221e4:	30c0004c 	andi	r3,r6,1
 81221e8:	00800434 	movhi	r2,16
 81221ec:	10bfffc4 	addi	r2,r2,-1
 81221f0:	3884703a 	and	r2,r7,r2
 81221f4:	1807003a 	cmpeq	r3,r3,zero
 81221f8:	11000434 	orhi	r4,r2,16
 81221fc:	18005426 	beq	r3,zero,8122350 <__ieee754_sqrt+0x1f8>
 8122200:	4004d7fa 	srli	r2,r8,31
 8122204:	4207883a 	add	r3,r8,r8
 8122208:	02800834 	movhi	r10,32
 812220c:	1105883a 	add	r2,r2,r4
 8122210:	2089883a 	add	r4,r4,r2
 8122214:	0011883a 	mov	r8,zero
 8122218:	000b883a 	mov	r5,zero
 812221c:	0013883a 	mov	r9,zero
 8122220:	02c00584 	movi	r11,22
 8122224:	520f883a 	add	r7,r10,r8
 8122228:	1804d7fa 	srli	r2,r3,31
 812222c:	4a400044 	addi	r9,r9,1
 8122230:	18c7883a 	add	r3,r3,r3
 8122234:	21c00316 	blt	r4,r7,8122244 <__ieee754_sqrt+0xec>
 8122238:	21c9c83a 	sub	r4,r4,r7
 812223c:	2a8b883a 	add	r5,r5,r10
 8122240:	51d1883a 	add	r8,r10,r7
 8122244:	1105883a 	add	r2,r2,r4
 8122248:	5014d07a 	srli	r10,r10,1
 812224c:	2089883a 	add	r4,r4,r2
 8122250:	4afff41e 	bne	r9,r11,8122224 <__ieee754_sqrt+0xcc>
 8122254:	02600034 	movhi	r9,32768
 8122258:	0017883a 	mov	r11,zero
 812225c:	0019883a 	mov	r12,zero
 8122260:	0015883a 	mov	r10,zero
 8122264:	4821883a 	mov	r16,r9
 8122268:	03c00804 	movi	r15,32
 812226c:	00000806 	br	8122290 <__ieee754_sqrt+0x138>
 8122270:	22003426 	beq	r4,r8,8122344 <__ieee754_sqrt+0x1ec>
 8122274:	1804d7fa 	srli	r2,r3,31
 8122278:	52800044 	addi	r10,r10,1
 812227c:	18c7883a 	add	r3,r3,r3
 8122280:	1105883a 	add	r2,r2,r4
 8122284:	2089883a 	add	r4,r4,r2
 8122288:	4812d07a 	srli	r9,r9,1
 812228c:	53c01326 	beq	r10,r15,81222dc <__ieee754_sqrt+0x184>
 8122290:	4acf883a 	add	r7,r9,r11
 8122294:	413ff60e 	bge	r8,r4,8122270 <__ieee754_sqrt+0x118>
 8122298:	38a0002c 	andhi	r2,r7,32768
 812229c:	3a57883a 	add	r11,r7,r9
 81222a0:	14002426 	beq	r2,r16,8122334 <__ieee754_sqrt+0x1dc>
 81222a4:	4005883a 	mov	r2,r8
 81222a8:	2209c83a 	sub	r4,r4,r8
 81222ac:	19c0012e 	bgeu	r3,r7,81222b4 <__ieee754_sqrt+0x15c>
 81222b0:	213fffc4 	addi	r4,r4,-1
 81222b4:	19c7c83a 	sub	r3,r3,r7
 81222b8:	1011883a 	mov	r8,r2
 81222bc:	1804d7fa 	srli	r2,r3,31
 81222c0:	52800044 	addi	r10,r10,1
 81222c4:	6259883a 	add	r12,r12,r9
 81222c8:	1105883a 	add	r2,r2,r4
 81222cc:	18c7883a 	add	r3,r3,r3
 81222d0:	2089883a 	add	r4,r4,r2
 81222d4:	4812d07a 	srli	r9,r9,1
 81222d8:	53ffed1e 	bne	r10,r15,8122290 <__ieee754_sqrt+0x138>
 81222dc:	20c4b03a 	or	r2,r4,r3
 81222e0:	1000201e 	bne	r2,zero,8122364 <__ieee754_sqrt+0x20c>
 81222e4:	600ed07a 	srli	r7,r12,1
 81222e8:	2880004c 	andi	r2,r5,1
 81222ec:	1005003a 	cmpeq	r2,r2,zero
 81222f0:	1000011e 	bne	r2,zero,81222f8 <__ieee754_sqrt+0x1a0>
 81222f4:	39e00034 	orhi	r7,r7,32768
 81222f8:	300dd07a 	srai	r6,r6,1
 81222fc:	280bd07a 	srai	r5,r5,1
 8122300:	010ff834 	movhi	r4,16352
 8122304:	300c953a 	slli	r6,r6,20
 8122308:	290b883a 	add	r5,r5,r4
 812230c:	3821883a 	mov	r16,r7
 8122310:	299d883a 	add	r14,r5,r6
 8122314:	7023883a 	mov	r17,r14
 8122318:	8005883a 	mov	r2,r16
 812231c:	8807883a 	mov	r3,r17
 8122320:	dfc00217 	ldw	ra,8(sp)
 8122324:	dc400117 	ldw	r17,4(sp)
 8122328:	dc000017 	ldw	r16,0(sp)
 812232c:	dec00304 	addi	sp,sp,12
 8122330:	f800283a 	ret
 8122334:	5884703a 	and	r2,r11,r2
 8122338:	103fda1e 	bne	r2,zero,81222a4 <__ieee754_sqrt+0x14c>
 812233c:	40800044 	addi	r2,r8,1
 8122340:	003fd906 	br	81222a8 <__ieee754_sqrt+0x150>
 8122344:	19ffd42e 	bgeu	r3,r7,8122298 <__ieee754_sqrt+0x140>
 8122348:	2011883a 	mov	r8,r4
 812234c:	003fc906 	br	8122274 <__ieee754_sqrt+0x11c>
 8122350:	4004d7fa 	srli	r2,r8,31
 8122354:	4211883a 	add	r8,r8,r8
 8122358:	1105883a 	add	r2,r2,r4
 812235c:	2089883a 	add	r4,r4,r2
 8122360:	003fa706 	br	8122200 <__ieee754_sqrt+0xa8>
 8122364:	00bfffc4 	movi	r2,-1
 8122368:	60802726 	beq	r12,r2,8122408 <__ieee754_sqrt+0x2b0>
 812236c:	6080004c 	andi	r2,r12,1
 8122370:	6085883a 	add	r2,r12,r2
 8122374:	100ed07a 	srli	r7,r2,1
 8122378:	003fdb06 	br	81222e8 <__ieee754_sqrt+0x190>
 812237c:	8009883a 	mov	r4,r16
 8122380:	800d883a 	mov	r6,r16
 8122384:	812308c0 	call	812308c <__muldf3>
 8122388:	180f883a 	mov	r7,r3
 812238c:	880b883a 	mov	r5,r17
 8122390:	8009883a 	mov	r4,r16
 8122394:	100d883a 	mov	r6,r2
 8122398:	81230180 	call	8123018 <__adddf3>
 812239c:	1021883a 	mov	r16,r2
 81223a0:	1823883a 	mov	r17,r3
 81223a4:	8005883a 	mov	r2,r16
 81223a8:	8807883a 	mov	r3,r17
 81223ac:	dfc00217 	ldw	ra,8(sp)
 81223b0:	dc400117 	ldw	r17,4(sp)
 81223b4:	dc000017 	ldw	r16,0(sp)
 81223b8:	dec00304 	addi	sp,sp,12
 81223bc:	f800283a 	ret
 81223c0:	00a00034 	movhi	r2,32768
 81223c4:	10bfffc4 	addi	r2,r2,-1
 81223c8:	2884703a 	and	r2,r5,r2
 81223cc:	8084b03a 	or	r2,r16,r2
 81223d0:	103fd126 	beq	r2,zero,8122318 <__ieee754_sqrt+0x1c0>
 81223d4:	283f6d26 	beq	r5,zero,812218c <__ieee754_sqrt+0x34>
 81223d8:	280f883a 	mov	r7,r5
 81223dc:	8009883a 	mov	r4,r16
 81223e0:	800d883a 	mov	r6,r16
 81223e4:	8122f980 	call	8122f98 <__subdf3>
 81223e8:	1009883a 	mov	r4,r2
 81223ec:	180b883a 	mov	r5,r3
 81223f0:	100d883a 	mov	r6,r2
 81223f4:	180f883a 	mov	r7,r3
 81223f8:	81234500 	call	8123450 <__divdf3>
 81223fc:	1021883a 	mov	r16,r2
 8122400:	1823883a 	mov	r17,r3
 8122404:	003fc406 	br	8122318 <__ieee754_sqrt+0x1c0>
 8122408:	29400044 	addi	r5,r5,1
 812240c:	000f883a 	mov	r7,zero
 8122410:	003fb506 	br	81222e8 <__ieee754_sqrt+0x190>
 8122414:	0009883a 	mov	r4,zero
 8122418:	00800804 	movi	r2,32
 812241c:	003f6b06 	br	81221cc <__ieee754_sqrt+0x74>

08122420 <fabs>:
 8122420:	01e00034 	movhi	r7,32768
 8122424:	39ffffc4 	addi	r7,r7,-1
 8122428:	394e703a 	and	r7,r7,r5
 812242c:	2005883a 	mov	r2,r4
 8122430:	3807883a 	mov	r3,r7
 8122434:	f800283a 	ret

08122438 <finite>:
 8122438:	00a00034 	movhi	r2,32768
 812243c:	10bfffc4 	addi	r2,r2,-1
 8122440:	2884703a 	and	r2,r5,r2
 8122444:	01600434 	movhi	r5,32784
 8122448:	1145883a 	add	r2,r2,r5
 812244c:	1004d7fa 	srli	r2,r2,31
 8122450:	f800283a 	ret

08122454 <__isnand>:
 8122454:	200d883a 	mov	r6,r4
 8122458:	0109c83a 	sub	r4,zero,r4
 812245c:	2188b03a 	or	r4,r4,r6
 8122460:	2008d7fa 	srli	r4,r4,31
 8122464:	00a00034 	movhi	r2,32768
 8122468:	10bfffc4 	addi	r2,r2,-1
 812246c:	1144703a 	and	r2,r2,r5
 8122470:	2088b03a 	or	r4,r4,r2
 8122474:	009ffc34 	movhi	r2,32752
 8122478:	1105c83a 	sub	r2,r2,r4
 812247c:	1004d7fa 	srli	r2,r2,31
 8122480:	f800283a 	ret

08122484 <matherr>:
 8122484:	0005883a 	mov	r2,zero
 8122488:	f800283a 	ret

0812248c <nan>:
 812248c:	015ffe34 	movhi	r5,32760
 8122490:	0005883a 	mov	r2,zero
 8122494:	2807883a 	mov	r3,r5
 8122498:	f800283a 	ret

0812249c <rint>:
 812249c:	2015883a 	mov	r10,r4
 81224a0:	2809d53a 	srai	r4,r5,20
 81224a4:	defff904 	addi	sp,sp,-28
 81224a8:	034004c4 	movi	r13,19
 81224ac:	2101ffcc 	andi	r4,r4,2047
 81224b0:	227f0044 	addi	r9,r4,-1023
 81224b4:	dc800415 	stw	r18,16(sp)
 81224b8:	dfc00615 	stw	ra,24(sp)
 81224bc:	dcc00515 	stw	r19,20(sp)
 81224c0:	dc400315 	stw	r17,12(sp)
 81224c4:	dc000215 	stw	r16,8(sp)
 81224c8:	2817883a 	mov	r11,r5
 81224cc:	500d883a 	mov	r6,r10
 81224d0:	2824d7fa 	srli	r18,r5,31
 81224d4:	6a403016 	blt	r13,r9,8122598 <rint+0xfc>
 81224d8:	48004916 	blt	r9,zero,8122600 <rint+0x164>
 81224dc:	00800434 	movhi	r2,16
 81224e0:	10bfffc4 	addi	r2,r2,-1
 81224e4:	1247d83a 	sra	r3,r2,r9
 81224e8:	2809883a 	mov	r4,r5
 81224ec:	1944703a 	and	r2,r3,r5
 81224f0:	5084b03a 	or	r2,r10,r2
 81224f4:	10001f26 	beq	r2,zero,8122574 <rint+0xd8>
 81224f8:	180ad07a 	srli	r5,r3,1
 81224fc:	5944703a 	and	r2,r11,r5
 8122500:	5084b03a 	or	r2,r10,r2
 8122504:	10000626 	beq	r2,zero,8122520 <rint+0x84>
 8122508:	4b406626 	beq	r9,r13,81226a4 <rint+0x208>
 812250c:	00c000b4 	movhi	r3,2
 8122510:	1a47d83a 	sra	r3,r3,r9
 8122514:	0144303a 	nor	r2,zero,r5
 8122518:	5884703a 	and	r2,r11,r2
 812251c:	10c8b03a 	or	r4,r2,r3
 8122520:	900690fa 	slli	r3,r18,3
 8122524:	008204f4 	movhi	r2,2067
 8122528:	10a23204 	addi	r2,r2,-30520
 812252c:	200f883a 	mov	r7,r4
 8122530:	1887883a 	add	r3,r3,r2
 8122534:	1c000017 	ldw	r16,0(r3)
 8122538:	1c400117 	ldw	r17,4(r3)
 812253c:	8009883a 	mov	r4,r16
 8122540:	880b883a 	mov	r5,r17
 8122544:	81230180 	call	8123018 <__adddf3>
 8122548:	d8800015 	stw	r2,0(sp)
 812254c:	d8c00115 	stw	r3,4(sp)
 8122550:	d8800017 	ldw	r2,0(sp)
 8122554:	d8c00117 	ldw	r3,4(sp)
 8122558:	880f883a 	mov	r7,r17
 812255c:	800d883a 	mov	r6,r16
 8122560:	180b883a 	mov	r5,r3
 8122564:	1009883a 	mov	r4,r2
 8122568:	8122f980 	call	8122f98 <__subdf3>
 812256c:	1015883a 	mov	r10,r2
 8122570:	1817883a 	mov	r11,r3
 8122574:	5005883a 	mov	r2,r10
 8122578:	5807883a 	mov	r3,r11
 812257c:	dfc00617 	ldw	ra,24(sp)
 8122580:	dcc00517 	ldw	r19,20(sp)
 8122584:	dc800417 	ldw	r18,16(sp)
 8122588:	dc400317 	ldw	r17,12(sp)
 812258c:	dc000217 	ldw	r16,8(sp)
 8122590:	dec00704 	addi	sp,sp,28
 8122594:	f800283a 	ret
 8122598:	00800cc4 	movi	r2,51
 812259c:	12400f16 	blt	r2,r9,81225dc <rint+0x140>
 81225a0:	213efb44 	addi	r4,r4,-1043
 81225a4:	00bfffc4 	movi	r2,-1
 81225a8:	1104d83a 	srl	r2,r2,r4
 81225ac:	5086703a 	and	r3,r10,r2
 81225b0:	183ff026 	beq	r3,zero,8122574 <rint+0xd8>
 81225b4:	100ad07a 	srli	r5,r2,1
 81225b8:	5144703a 	and	r2,r10,r5
 81225bc:	10000526 	beq	r2,zero,81225d4 <rint+0x138>
 81225c0:	00d00034 	movhi	r3,16384
 81225c4:	1907d83a 	sra	r3,r3,r4
 81225c8:	0144303a 	nor	r2,zero,r5
 81225cc:	5084703a 	and	r2,r10,r2
 81225d0:	10ccb03a 	or	r6,r2,r3
 81225d4:	5809883a 	mov	r4,r11
 81225d8:	003fd106 	br	8122520 <rint+0x84>
 81225dc:	00810004 	movi	r2,1024
 81225e0:	48bfe41e 	bne	r9,r2,8122574 <rint+0xd8>
 81225e4:	5009883a 	mov	r4,r10
 81225e8:	500d883a 	mov	r6,r10
 81225ec:	280f883a 	mov	r7,r5
 81225f0:	81230180 	call	8123018 <__adddf3>
 81225f4:	1015883a 	mov	r10,r2
 81225f8:	1817883a 	mov	r11,r3
 81225fc:	003fdd06 	br	8122574 <rint+0xd8>
 8122600:	04e00034 	movhi	r19,32768
 8122604:	9cffffc4 	addi	r19,r19,-1
 8122608:	2cc4703a 	and	r2,r5,r19
 812260c:	5084b03a 	or	r2,r10,r2
 8122610:	103fd826 	beq	r2,zero,8122574 <rint+0xd8>
 8122614:	00c00434 	movhi	r3,16
 8122618:	18ffffc4 	addi	r3,r3,-1
 812261c:	28c6703a 	and	r3,r5,r3
 8122620:	50c6b03a 	or	r3,r10,r3
 8122624:	00cdc83a 	sub	r6,zero,r3
 8122628:	900a90fa 	slli	r5,r18,3
 812262c:	1986b03a 	or	r3,r3,r6
 8122630:	010204f4 	movhi	r4,2067
 8122634:	21223204 	addi	r4,r4,-30520
 8122638:	1806d33a 	srli	r3,r3,12
 812263c:	290b883a 	add	r5,r5,r4
 8122640:	2c000017 	ldw	r16,0(r5)
 8122644:	2c400117 	ldw	r17,4(r5)
 8122648:	593fffac 	andhi	r4,r11,65534
 812264c:	18c0022c 	andhi	r3,r3,8
 8122650:	1906b03a 	or	r3,r3,r4
 8122654:	500d883a 	mov	r6,r10
 8122658:	180f883a 	mov	r7,r3
 812265c:	8009883a 	mov	r4,r16
 8122660:	880b883a 	mov	r5,r17
 8122664:	81230180 	call	8123018 <__adddf3>
 8122668:	d8800015 	stw	r2,0(sp)
 812266c:	d8c00115 	stw	r3,4(sp)
 8122670:	d8800017 	ldw	r2,0(sp)
 8122674:	d8c00117 	ldw	r3,4(sp)
 8122678:	880f883a 	mov	r7,r17
 812267c:	800d883a 	mov	r6,r16
 8122680:	180b883a 	mov	r5,r3
 8122684:	1009883a 	mov	r4,r2
 8122688:	8122f980 	call	8122f98 <__subdf3>
 812268c:	901297fa 	slli	r9,r18,31
 8122690:	98d0703a 	and	r8,r19,r3
 8122694:	1015883a 	mov	r10,r2
 8122698:	4250b03a 	or	r8,r8,r9
 812269c:	4017883a 	mov	r11,r8
 81226a0:	003fb406 	br	8122574 <rint+0xd8>
 81226a4:	01900034 	movhi	r6,16384
 81226a8:	003f9d06 	br	8122520 <rint+0x84>

081226ac <scalbn>:
 81226ac:	2011883a 	mov	r8,r4
 81226b0:	291ffc2c 	andhi	r4,r5,32752
 81226b4:	2009d53a 	srai	r4,r4,20
 81226b8:	defffd04 	addi	sp,sp,-12
 81226bc:	dc000015 	stw	r16,0(sp)
 81226c0:	dfc00215 	stw	ra,8(sp)
 81226c4:	dc400115 	stw	r17,4(sp)
 81226c8:	2813883a 	mov	r9,r5
 81226cc:	2815883a 	mov	r10,r5
 81226d0:	3021883a 	mov	r16,r6
 81226d4:	2000281e 	bne	r4,zero,8122778 <scalbn+0xcc>
 81226d8:	00a00034 	movhi	r2,32768
 81226dc:	10bfffc4 	addi	r2,r2,-1
 81226e0:	2884703a 	and	r2,r5,r2
 81226e4:	4084b03a 	or	r2,r8,r2
 81226e8:	10001826 	beq	r2,zero,812274c <scalbn+0xa0>
 81226ec:	0005883a 	mov	r2,zero
 81226f0:	00d0d434 	movhi	r3,17232
 81226f4:	4009883a 	mov	r4,r8
 81226f8:	100d883a 	mov	r6,r2
 81226fc:	180f883a 	mov	r7,r3
 8122700:	812308c0 	call	812308c <__muldf3>
 8122704:	100b883a 	mov	r5,r2
 8122708:	1011883a 	mov	r8,r2
 812270c:	00bffff4 	movhi	r2,65535
 8122710:	108f2c04 	addi	r2,r2,15536
 8122714:	180d883a 	mov	r6,r3
 8122718:	1813883a 	mov	r9,r3
 812271c:	8080120e 	bge	r16,r2,8122768 <scalbn+0xbc>
 8122720:	00b0be74 	movhi	r2,49913
 8122724:	10bcd644 	addi	r2,r2,-3239
 8122728:	00c06974 	movhi	r3,421
 812272c:	18db87c4 	addi	r3,r3,28191
 8122730:	2809883a 	mov	r4,r5
 8122734:	180f883a 	mov	r7,r3
 8122738:	300b883a 	mov	r5,r6
 812273c:	100d883a 	mov	r6,r2
 8122740:	812308c0 	call	812308c <__muldf3>
 8122744:	1011883a 	mov	r8,r2
 8122748:	1813883a 	mov	r9,r3
 812274c:	4005883a 	mov	r2,r8
 8122750:	4807883a 	mov	r3,r9
 8122754:	dfc00217 	ldw	ra,8(sp)
 8122758:	dc400117 	ldw	r17,4(sp)
 812275c:	dc000017 	ldw	r16,0(sp)
 8122760:	dec00304 	addi	sp,sp,12
 8122764:	f800283a 	ret
 8122768:	189ffc2c 	andhi	r2,r3,32752
 812276c:	1005d53a 	srai	r2,r2,20
 8122770:	1815883a 	mov	r10,r3
 8122774:	113ff284 	addi	r4,r2,-54
 8122778:	0081ffc4 	movi	r2,2047
 812277c:	20801126 	beq	r4,r2,81227c4 <scalbn+0x118>
 8122780:	2409883a 	add	r4,r4,r16
 8122784:	0081ff84 	movi	r2,2046
 8122788:	11001c16 	blt	r2,r4,81227fc <scalbn+0x150>
 812278c:	0100290e 	bge	zero,r4,8122834 <scalbn+0x188>
 8122790:	200a953a 	slli	r5,r4,20
 8122794:	01200434 	movhi	r4,32784
 8122798:	213fffc4 	addi	r4,r4,-1
 812279c:	5108703a 	and	r4,r10,r4
 81227a0:	2148b03a 	or	r4,r4,r5
 81227a4:	2013883a 	mov	r9,r4
 81227a8:	4005883a 	mov	r2,r8
 81227ac:	4807883a 	mov	r3,r9
 81227b0:	dfc00217 	ldw	ra,8(sp)
 81227b4:	dc400117 	ldw	r17,4(sp)
 81227b8:	dc000017 	ldw	r16,0(sp)
 81227bc:	dec00304 	addi	sp,sp,12
 81227c0:	f800283a 	ret
 81227c4:	480f883a 	mov	r7,r9
 81227c8:	4009883a 	mov	r4,r8
 81227cc:	480b883a 	mov	r5,r9
 81227d0:	400d883a 	mov	r6,r8
 81227d4:	81230180 	call	8123018 <__adddf3>
 81227d8:	1011883a 	mov	r8,r2
 81227dc:	1813883a 	mov	r9,r3
 81227e0:	4005883a 	mov	r2,r8
 81227e4:	4807883a 	mov	r3,r9
 81227e8:	dfc00217 	ldw	ra,8(sp)
 81227ec:	dc400117 	ldw	r17,4(sp)
 81227f0:	dc000017 	ldw	r16,0(sp)
 81227f4:	dec00304 	addi	sp,sp,12
 81227f8:	f800283a 	ret
 81227fc:	04220034 	movhi	r16,34816
 8122800:	841d6704 	addi	r16,r16,30108
 8122804:	045f8e34 	movhi	r17,32312
 8122808:	8c790f04 	addi	r17,r17,-7108
 812280c:	480f883a 	mov	r7,r9
 8122810:	400d883a 	mov	r6,r8
 8122814:	8009883a 	mov	r4,r16
 8122818:	880b883a 	mov	r5,r17
 812281c:	812288c0 	call	812288c <copysign>
 8122820:	180b883a 	mov	r5,r3
 8122824:	800d883a 	mov	r6,r16
 8122828:	880f883a 	mov	r7,r17
 812282c:	1009883a 	mov	r4,r2
 8122830:	003fc306 	br	8122740 <scalbn+0x94>
 8122834:	00bff284 	movi	r2,-54
 8122838:	11000716 	blt	r2,r4,8122858 <scalbn+0x1ac>
 812283c:	00b0d414 	movui	r2,50000
 8122840:	143fee16 	blt	r2,r16,81227fc <scalbn+0x150>
 8122844:	0430be74 	movhi	r16,49913
 8122848:	843cd644 	addi	r16,r16,-3239
 812284c:	04406974 	movhi	r17,421
 8122850:	8c5b87c4 	addi	r17,r17,28191
 8122854:	003fed06 	br	812280c <scalbn+0x160>
 8122858:	21000d84 	addi	r4,r4,54
 812285c:	2008953a 	slli	r4,r4,20
 8122860:	01e00434 	movhi	r7,32784
 8122864:	39ffffc4 	addi	r7,r7,-1
 8122868:	51ce703a 	and	r7,r10,r7
 812286c:	390eb03a 	or	r7,r7,r4
 8122870:	024f2434 	movhi	r9,15504
 8122874:	4009883a 	mov	r4,r8
 8122878:	0011883a 	mov	r8,zero
 812287c:	380b883a 	mov	r5,r7
 8122880:	400d883a 	mov	r6,r8
 8122884:	480f883a 	mov	r7,r9
 8122888:	003fad06 	br	8122740 <scalbn+0x94>

0812288c <copysign>:
 812288c:	3813883a 	mov	r9,r7
 8122890:	01e00034 	movhi	r7,32768
 8122894:	39ffffc4 	addi	r7,r7,-1
 8122898:	394e703a 	and	r7,r7,r5
 812289c:	4aa0002c 	andhi	r10,r9,32768
 81228a0:	3a8eb03a 	or	r7,r7,r10
 81228a4:	2005883a 	mov	r2,r4
 81228a8:	3807883a 	mov	r3,r7
 81228ac:	f800283a 	ret

081228b0 <__divsf3>:
 81228b0:	defff304 	addi	sp,sp,-52
 81228b4:	dc400b15 	stw	r17,44(sp)
 81228b8:	dc400204 	addi	r17,sp,8
 81228bc:	dc000a15 	stw	r16,40(sp)
 81228c0:	d9000015 	stw	r4,0(sp)
 81228c4:	d9400115 	stw	r5,4(sp)
 81228c8:	d809883a 	mov	r4,sp
 81228cc:	880b883a 	mov	r5,r17
 81228d0:	dc000604 	addi	r16,sp,24
 81228d4:	dfc00c15 	stw	ra,48(sp)
 81228d8:	8123eb80 	call	8123eb8 <__unpack_f>
 81228dc:	d9000104 	addi	r4,sp,4
 81228e0:	800b883a 	mov	r5,r16
 81228e4:	8123eb80 	call	8123eb8 <__unpack_f>
 81228e8:	d9000217 	ldw	r4,8(sp)
 81228ec:	00800044 	movi	r2,1
 81228f0:	01800104 	movi	r6,4
 81228f4:	11000a2e 	bgeu	r2,r4,8122920 <__divsf3+0x70>
 81228f8:	d9400617 	ldw	r5,24(sp)
 81228fc:	1140432e 	bgeu	r2,r5,8122a0c <__divsf3+0x15c>
 8122900:	d8800317 	ldw	r2,12(sp)
 8122904:	d8c00717 	ldw	r3,28(sp)
 8122908:	10c4f03a 	xor	r2,r2,r3
 812290c:	d8800315 	stw	r2,12(sp)
 8122910:	21800226 	beq	r4,r6,812291c <__divsf3+0x6c>
 8122914:	00800084 	movi	r2,2
 8122918:	2080101e 	bne	r4,r2,812295c <__divsf3+0xac>
 812291c:	29000726 	beq	r5,r4,812293c <__divsf3+0x8c>
 8122920:	8809883a 	mov	r4,r17
 8122924:	8123d580 	call	8123d58 <__pack_f>
 8122928:	dfc00c17 	ldw	ra,48(sp)
 812292c:	dc400b17 	ldw	r17,44(sp)
 8122930:	dc000a17 	ldw	r16,40(sp)
 8122934:	dec00d04 	addi	sp,sp,52
 8122938:	f800283a 	ret
 812293c:	010204f4 	movhi	r4,2067
 8122940:	21223604 	addi	r4,r4,-30504
 8122944:	8123d580 	call	8123d58 <__pack_f>
 8122948:	dfc00c17 	ldw	ra,48(sp)
 812294c:	dc400b17 	ldw	r17,44(sp)
 8122950:	dc000a17 	ldw	r16,40(sp)
 8122954:	dec00d04 	addi	sp,sp,52
 8122958:	f800283a 	ret
 812295c:	29802d26 	beq	r5,r6,8122a14 <__divsf3+0x164>
 8122960:	28801a26 	beq	r5,r2,81229cc <__divsf3+0x11c>
 8122964:	d8c00417 	ldw	r3,16(sp)
 8122968:	d8800817 	ldw	r2,32(sp)
 812296c:	d9000517 	ldw	r4,20(sp)
 8122970:	d9800917 	ldw	r6,36(sp)
 8122974:	1885c83a 	sub	r2,r3,r2
 8122978:	d8800415 	stw	r2,16(sp)
 812297c:	2180032e 	bgeu	r4,r6,812298c <__divsf3+0xdc>
 8122980:	10bfffc4 	addi	r2,r2,-1
 8122984:	d8800415 	stw	r2,16(sp)
 8122988:	2109883a 	add	r4,r4,r4
 812298c:	01500034 	movhi	r5,16384
 8122990:	0007883a 	mov	r3,zero
 8122994:	0005883a 	mov	r2,zero
 8122998:	01c007c4 	movi	r7,31
 812299c:	10800044 	addi	r2,r2,1
 81229a0:	21800236 	bltu	r4,r6,81229ac <__divsf3+0xfc>
 81229a4:	1946b03a 	or	r3,r3,r5
 81229a8:	2189c83a 	sub	r4,r4,r6
 81229ac:	280ad07a 	srli	r5,r5,1
 81229b0:	2109883a 	add	r4,r4,r4
 81229b4:	11fff91e 	bne	r2,r7,812299c <__divsf3+0xec>
 81229b8:	19401fcc 	andi	r5,r3,127
 81229bc:	00801004 	movi	r2,64
 81229c0:	28800a26 	beq	r5,r2,81229ec <__divsf3+0x13c>
 81229c4:	d8c00515 	stw	r3,20(sp)
 81229c8:	003fd506 	br	8122920 <__divsf3+0x70>
 81229cc:	8809883a 	mov	r4,r17
 81229d0:	d9800215 	stw	r6,8(sp)
 81229d4:	8123d580 	call	8123d58 <__pack_f>
 81229d8:	dfc00c17 	ldw	ra,48(sp)
 81229dc:	dc400b17 	ldw	r17,44(sp)
 81229e0:	dc000a17 	ldw	r16,40(sp)
 81229e4:	dec00d04 	addi	sp,sp,52
 81229e8:	f800283a 	ret
 81229ec:	1880200c 	andi	r2,r3,128
 81229f0:	103ff41e 	bne	r2,zero,81229c4 <__divsf3+0x114>
 81229f4:	203ff326 	beq	r4,zero,81229c4 <__divsf3+0x114>
 81229f8:	1947883a 	add	r3,r3,r5
 81229fc:	00bfe004 	movi	r2,-128
 8122a00:	1886703a 	and	r3,r3,r2
 8122a04:	d8c00515 	stw	r3,20(sp)
 8122a08:	003fc506 	br	8122920 <__divsf3+0x70>
 8122a0c:	8009883a 	mov	r4,r16
 8122a10:	003fc406 	br	8122924 <__divsf3+0x74>
 8122a14:	8809883a 	mov	r4,r17
 8122a18:	d8000515 	stw	zero,20(sp)
 8122a1c:	d8000415 	stw	zero,16(sp)
 8122a20:	003fc006 	br	8122924 <__divsf3+0x74>

08122a24 <__lesf2>:
 8122a24:	defff304 	addi	sp,sp,-52
 8122a28:	dc400b15 	stw	r17,44(sp)
 8122a2c:	dc400204 	addi	r17,sp,8
 8122a30:	dc000a15 	stw	r16,40(sp)
 8122a34:	d9000015 	stw	r4,0(sp)
 8122a38:	d9400115 	stw	r5,4(sp)
 8122a3c:	d809883a 	mov	r4,sp
 8122a40:	880b883a 	mov	r5,r17
 8122a44:	dc000604 	addi	r16,sp,24
 8122a48:	dfc00c15 	stw	ra,48(sp)
 8122a4c:	8123eb80 	call	8123eb8 <__unpack_f>
 8122a50:	d9000104 	addi	r4,sp,4
 8122a54:	800b883a 	mov	r5,r16
 8122a58:	8123eb80 	call	8123eb8 <__unpack_f>
 8122a5c:	d8800217 	ldw	r2,8(sp)
 8122a60:	00c00044 	movi	r3,1
 8122a64:	180d883a 	mov	r6,r3
 8122a68:	1880062e 	bgeu	r3,r2,8122a84 <__lesf2+0x60>
 8122a6c:	d8800617 	ldw	r2,24(sp)
 8122a70:	8809883a 	mov	r4,r17
 8122a74:	800b883a 	mov	r5,r16
 8122a78:	1880022e 	bgeu	r3,r2,8122a84 <__lesf2+0x60>
 8122a7c:	8123f800 	call	8123f80 <__fpcmp_parts_f>
 8122a80:	100d883a 	mov	r6,r2
 8122a84:	3005883a 	mov	r2,r6
 8122a88:	dfc00c17 	ldw	ra,48(sp)
 8122a8c:	dc400b17 	ldw	r17,44(sp)
 8122a90:	dc000a17 	ldw	r16,40(sp)
 8122a94:	dec00d04 	addi	sp,sp,52
 8122a98:	f800283a 	ret

08122a9c <__floatsisf>:
 8122a9c:	2006d7fa 	srli	r3,r4,31
 8122aa0:	defffa04 	addi	sp,sp,-24
 8122aa4:	008000c4 	movi	r2,3
 8122aa8:	dfc00515 	stw	ra,20(sp)
 8122aac:	dc000415 	stw	r16,16(sp)
 8122ab0:	d8800015 	stw	r2,0(sp)
 8122ab4:	d8c00115 	stw	r3,4(sp)
 8122ab8:	2000081e 	bne	r4,zero,8122adc <__floatsisf+0x40>
 8122abc:	00800084 	movi	r2,2
 8122ac0:	d8800015 	stw	r2,0(sp)
 8122ac4:	d809883a 	mov	r4,sp
 8122ac8:	8123d580 	call	8123d58 <__pack_f>
 8122acc:	dfc00517 	ldw	ra,20(sp)
 8122ad0:	dc000417 	ldw	r16,16(sp)
 8122ad4:	dec00604 	addi	sp,sp,24
 8122ad8:	f800283a 	ret
 8122adc:	00800784 	movi	r2,30
 8122ae0:	1807003a 	cmpeq	r3,r3,zero
 8122ae4:	d8800215 	stw	r2,8(sp)
 8122ae8:	18000e1e 	bne	r3,zero,8122b24 <__floatsisf+0x88>
 8122aec:	00a00034 	movhi	r2,32768
 8122af0:	20800e26 	beq	r4,r2,8122b2c <__floatsisf+0x90>
 8122af4:	0121c83a 	sub	r16,zero,r4
 8122af8:	8009883a 	mov	r4,r16
 8122afc:	dc000315 	stw	r16,12(sp)
 8122b00:	8123cd80 	call	8123cd8 <__clzsi2>
 8122b04:	117fffc4 	addi	r5,r2,-1
 8122b08:	017fee0e 	bge	zero,r5,8122ac4 <__floatsisf+0x28>
 8122b0c:	d8800217 	ldw	r2,8(sp)
 8122b10:	8146983a 	sll	r3,r16,r5
 8122b14:	1145c83a 	sub	r2,r2,r5
 8122b18:	d8c00315 	stw	r3,12(sp)
 8122b1c:	d8800215 	stw	r2,8(sp)
 8122b20:	003fe806 	br	8122ac4 <__floatsisf+0x28>
 8122b24:	2021883a 	mov	r16,r4
 8122b28:	003ff306 	br	8122af8 <__floatsisf+0x5c>
 8122b2c:	00b3c034 	movhi	r2,52992
 8122b30:	003fe606 	br	8122acc <__floatsisf+0x30>

08122b34 <__extendsfdf2>:
 8122b34:	defff904 	addi	sp,sp,-28
 8122b38:	d9000115 	stw	r4,4(sp)
 8122b3c:	d9400204 	addi	r5,sp,8
 8122b40:	d9000104 	addi	r4,sp,4
 8122b44:	dfc00615 	stw	ra,24(sp)
 8122b48:	8123eb80 	call	8123eb8 <__unpack_f>
 8122b4c:	d9c00517 	ldw	r7,20(sp)
 8122b50:	0011883a 	mov	r8,zero
 8122b54:	400697ba 	slli	r3,r8,30
 8122b58:	3812d0ba 	srli	r9,r7,2
 8122b5c:	380497ba 	slli	r2,r7,30
 8122b60:	d9000217 	ldw	r4,8(sp)
 8122b64:	d9400317 	ldw	r5,12(sp)
 8122b68:	d9800417 	ldw	r6,16(sp)
 8122b6c:	48c6b03a 	or	r3,r9,r3
 8122b70:	100f883a 	mov	r7,r2
 8122b74:	d8c00015 	stw	r3,0(sp)
 8122b78:	8123a480 	call	8123a48 <__make_dp>
 8122b7c:	dfc00617 	ldw	ra,24(sp)
 8122b80:	dec00704 	addi	sp,sp,28
 8122b84:	f800283a 	ret

08122b88 <_fpadd_parts>:
 8122b88:	defff804 	addi	sp,sp,-32
 8122b8c:	dcc00315 	stw	r19,12(sp)
 8122b90:	2027883a 	mov	r19,r4
 8122b94:	21000017 	ldw	r4,0(r4)
 8122b98:	00c00044 	movi	r3,1
 8122b9c:	dd400515 	stw	r21,20(sp)
 8122ba0:	dd000415 	stw	r20,16(sp)
 8122ba4:	ddc00715 	stw	r23,28(sp)
 8122ba8:	dd800615 	stw	r22,24(sp)
 8122bac:	dc800215 	stw	r18,8(sp)
 8122bb0:	dc400115 	stw	r17,4(sp)
 8122bb4:	dc000015 	stw	r16,0(sp)
 8122bb8:	282b883a 	mov	r21,r5
 8122bbc:	3029883a 	mov	r20,r6
 8122bc0:	1900632e 	bgeu	r3,r4,8122d50 <_fpadd_parts+0x1c8>
 8122bc4:	28800017 	ldw	r2,0(r5)
 8122bc8:	1880812e 	bgeu	r3,r2,8122dd0 <_fpadd_parts+0x248>
 8122bcc:	00c00104 	movi	r3,4
 8122bd0:	20c0dc26 	beq	r4,r3,8122f44 <_fpadd_parts+0x3bc>
 8122bd4:	10c07e26 	beq	r2,r3,8122dd0 <_fpadd_parts+0x248>
 8122bd8:	00c00084 	movi	r3,2
 8122bdc:	10c06726 	beq	r2,r3,8122d7c <_fpadd_parts+0x1f4>
 8122be0:	20c07b26 	beq	r4,r3,8122dd0 <_fpadd_parts+0x248>
 8122be4:	9dc00217 	ldw	r23,8(r19)
 8122be8:	28c00217 	ldw	r3,8(r5)
 8122bec:	9c400317 	ldw	r17,12(r19)
 8122bf0:	2bc00317 	ldw	r15,12(r5)
 8122bf4:	b8cdc83a 	sub	r6,r23,r3
 8122bf8:	9c800417 	ldw	r18,16(r19)
 8122bfc:	2c000417 	ldw	r16,16(r5)
 8122c00:	3009883a 	mov	r4,r6
 8122c04:	30009716 	blt	r6,zero,8122e64 <_fpadd_parts+0x2dc>
 8122c08:	00800fc4 	movi	r2,63
 8122c0c:	11806b16 	blt	r2,r6,8122dbc <_fpadd_parts+0x234>
 8122c10:	0100a40e 	bge	zero,r4,8122ea4 <_fpadd_parts+0x31c>
 8122c14:	35bff804 	addi	r22,r6,-32
 8122c18:	b000bc16 	blt	r22,zero,8122f0c <_fpadd_parts+0x384>
 8122c1c:	8596d83a 	srl	r11,r16,r22
 8122c20:	0019883a 	mov	r12,zero
 8122c24:	0013883a 	mov	r9,zero
 8122c28:	01000044 	movi	r4,1
 8122c2c:	0015883a 	mov	r10,zero
 8122c30:	b000be16 	blt	r22,zero,8122f2c <_fpadd_parts+0x3a4>
 8122c34:	2590983a 	sll	r8,r4,r22
 8122c38:	000f883a 	mov	r7,zero
 8122c3c:	00bfffc4 	movi	r2,-1
 8122c40:	3889883a 	add	r4,r7,r2
 8122c44:	408b883a 	add	r5,r8,r2
 8122c48:	21cd803a 	cmpltu	r6,r4,r7
 8122c4c:	314b883a 	add	r5,r6,r5
 8122c50:	7904703a 	and	r2,r15,r4
 8122c54:	8146703a 	and	r3,r16,r5
 8122c58:	10c4b03a 	or	r2,r2,r3
 8122c5c:	10000226 	beq	r2,zero,8122c68 <_fpadd_parts+0xe0>
 8122c60:	02400044 	movi	r9,1
 8122c64:	0015883a 	mov	r10,zero
 8122c68:	5a5eb03a 	or	r15,r11,r9
 8122c6c:	62a0b03a 	or	r16,r12,r10
 8122c70:	99400117 	ldw	r5,4(r19)
 8122c74:	a8800117 	ldw	r2,4(r21)
 8122c78:	28806e26 	beq	r5,r2,8122e34 <_fpadd_parts+0x2ac>
 8122c7c:	28006626 	beq	r5,zero,8122e18 <_fpadd_parts+0x290>
 8122c80:	7c45c83a 	sub	r2,r15,r17
 8122c84:	7889803a 	cmpltu	r4,r15,r2
 8122c88:	8487c83a 	sub	r3,r16,r18
 8122c8c:	1909c83a 	sub	r4,r3,r4
 8122c90:	100d883a 	mov	r6,r2
 8122c94:	200f883a 	mov	r7,r4
 8122c98:	38007716 	blt	r7,zero,8122e78 <_fpadd_parts+0x2f0>
 8122c9c:	a5c00215 	stw	r23,8(r20)
 8122ca0:	a1c00415 	stw	r7,16(r20)
 8122ca4:	a0000115 	stw	zero,4(r20)
 8122ca8:	a1800315 	stw	r6,12(r20)
 8122cac:	a2000317 	ldw	r8,12(r20)
 8122cb0:	a2400417 	ldw	r9,16(r20)
 8122cb4:	00bfffc4 	movi	r2,-1
 8122cb8:	408b883a 	add	r5,r8,r2
 8122cbc:	2a09803a 	cmpltu	r4,r5,r8
 8122cc0:	488d883a 	add	r6,r9,r2
 8122cc4:	01c40034 	movhi	r7,4096
 8122cc8:	39ffffc4 	addi	r7,r7,-1
 8122ccc:	218d883a 	add	r6,r4,r6
 8122cd0:	39801736 	bltu	r7,r6,8122d30 <_fpadd_parts+0x1a8>
 8122cd4:	31c06526 	beq	r6,r7,8122e6c <_fpadd_parts+0x2e4>
 8122cd8:	a3000217 	ldw	r12,8(r20)
 8122cdc:	4209883a 	add	r4,r8,r8
 8122ce0:	00bfffc4 	movi	r2,-1
 8122ce4:	220f803a 	cmpltu	r7,r4,r8
 8122ce8:	4a4b883a 	add	r5,r9,r9
 8122cec:	394f883a 	add	r7,r7,r5
 8122cf0:	2095883a 	add	r10,r4,r2
 8122cf4:	3897883a 	add	r11,r7,r2
 8122cf8:	510d803a 	cmpltu	r6,r10,r4
 8122cfc:	6099883a 	add	r12,r12,r2
 8122d00:	32d7883a 	add	r11,r6,r11
 8122d04:	00840034 	movhi	r2,4096
 8122d08:	10bfffc4 	addi	r2,r2,-1
 8122d0c:	2011883a 	mov	r8,r4
 8122d10:	3813883a 	mov	r9,r7
 8122d14:	a1000315 	stw	r4,12(r20)
 8122d18:	a1c00415 	stw	r7,16(r20)
 8122d1c:	a3000215 	stw	r12,8(r20)
 8122d20:	12c00336 	bltu	r2,r11,8122d30 <_fpadd_parts+0x1a8>
 8122d24:	58bfed1e 	bne	r11,r2,8122cdc <_fpadd_parts+0x154>
 8122d28:	00bfff84 	movi	r2,-2
 8122d2c:	12bfeb2e 	bgeu	r2,r10,8122cdc <_fpadd_parts+0x154>
 8122d30:	a2800417 	ldw	r10,16(r20)
 8122d34:	008000c4 	movi	r2,3
 8122d38:	00c80034 	movhi	r3,8192
 8122d3c:	18ffffc4 	addi	r3,r3,-1
 8122d40:	a2400317 	ldw	r9,12(r20)
 8122d44:	a0800015 	stw	r2,0(r20)
 8122d48:	1a802336 	bltu	r3,r10,8122dd8 <_fpadd_parts+0x250>
 8122d4c:	a027883a 	mov	r19,r20
 8122d50:	9805883a 	mov	r2,r19
 8122d54:	ddc00717 	ldw	r23,28(sp)
 8122d58:	dd800617 	ldw	r22,24(sp)
 8122d5c:	dd400517 	ldw	r21,20(sp)
 8122d60:	dd000417 	ldw	r20,16(sp)
 8122d64:	dcc00317 	ldw	r19,12(sp)
 8122d68:	dc800217 	ldw	r18,8(sp)
 8122d6c:	dc400117 	ldw	r17,4(sp)
 8122d70:	dc000017 	ldw	r16,0(sp)
 8122d74:	dec00804 	addi	sp,sp,32
 8122d78:	f800283a 	ret
 8122d7c:	20fff41e 	bne	r4,r3,8122d50 <_fpadd_parts+0x1c8>
 8122d80:	31000015 	stw	r4,0(r6)
 8122d84:	98800117 	ldw	r2,4(r19)
 8122d88:	30800115 	stw	r2,4(r6)
 8122d8c:	98c00217 	ldw	r3,8(r19)
 8122d90:	30c00215 	stw	r3,8(r6)
 8122d94:	98800317 	ldw	r2,12(r19)
 8122d98:	30800315 	stw	r2,12(r6)
 8122d9c:	98c00417 	ldw	r3,16(r19)
 8122da0:	30c00415 	stw	r3,16(r6)
 8122da4:	98800117 	ldw	r2,4(r19)
 8122da8:	28c00117 	ldw	r3,4(r5)
 8122dac:	3027883a 	mov	r19,r6
 8122db0:	10c4703a 	and	r2,r2,r3
 8122db4:	30800115 	stw	r2,4(r6)
 8122db8:	003fe506 	br	8122d50 <_fpadd_parts+0x1c8>
 8122dbc:	1dc02616 	blt	r3,r23,8122e58 <_fpadd_parts+0x2d0>
 8122dc0:	0023883a 	mov	r17,zero
 8122dc4:	182f883a 	mov	r23,r3
 8122dc8:	0025883a 	mov	r18,zero
 8122dcc:	003fa806 	br	8122c70 <_fpadd_parts+0xe8>
 8122dd0:	a827883a 	mov	r19,r21
 8122dd4:	003fde06 	br	8122d50 <_fpadd_parts+0x1c8>
 8122dd8:	01800044 	movi	r6,1
 8122ddc:	500497fa 	slli	r2,r10,31
 8122de0:	4808d07a 	srli	r4,r9,1
 8122de4:	518ad83a 	srl	r5,r10,r6
 8122de8:	a2000217 	ldw	r8,8(r20)
 8122dec:	1108b03a 	or	r4,r2,r4
 8122df0:	0007883a 	mov	r3,zero
 8122df4:	4984703a 	and	r2,r9,r6
 8122df8:	208cb03a 	or	r6,r4,r2
 8122dfc:	28ceb03a 	or	r7,r5,r3
 8122e00:	42000044 	addi	r8,r8,1
 8122e04:	a027883a 	mov	r19,r20
 8122e08:	a1c00415 	stw	r7,16(r20)
 8122e0c:	a2000215 	stw	r8,8(r20)
 8122e10:	a1800315 	stw	r6,12(r20)
 8122e14:	003fce06 	br	8122d50 <_fpadd_parts+0x1c8>
 8122e18:	8bc5c83a 	sub	r2,r17,r15
 8122e1c:	8889803a 	cmpltu	r4,r17,r2
 8122e20:	9407c83a 	sub	r3,r18,r16
 8122e24:	1909c83a 	sub	r4,r3,r4
 8122e28:	100d883a 	mov	r6,r2
 8122e2c:	200f883a 	mov	r7,r4
 8122e30:	003f9906 	br	8122c98 <_fpadd_parts+0x110>
 8122e34:	7c45883a 	add	r2,r15,r17
 8122e38:	13c9803a 	cmpltu	r4,r2,r15
 8122e3c:	8487883a 	add	r3,r16,r18
 8122e40:	20c9883a 	add	r4,r4,r3
 8122e44:	a1400115 	stw	r5,4(r20)
 8122e48:	a5c00215 	stw	r23,8(r20)
 8122e4c:	a0800315 	stw	r2,12(r20)
 8122e50:	a1000415 	stw	r4,16(r20)
 8122e54:	003fb606 	br	8122d30 <_fpadd_parts+0x1a8>
 8122e58:	001f883a 	mov	r15,zero
 8122e5c:	0021883a 	mov	r16,zero
 8122e60:	003f8306 	br	8122c70 <_fpadd_parts+0xe8>
 8122e64:	018dc83a 	sub	r6,zero,r6
 8122e68:	003f6706 	br	8122c08 <_fpadd_parts+0x80>
 8122e6c:	00bfff84 	movi	r2,-2
 8122e70:	117faf36 	bltu	r2,r5,8122d30 <_fpadd_parts+0x1a8>
 8122e74:	003f9806 	br	8122cd8 <_fpadd_parts+0x150>
 8122e78:	0005883a 	mov	r2,zero
 8122e7c:	1189c83a 	sub	r4,r2,r6
 8122e80:	1105803a 	cmpltu	r2,r2,r4
 8122e84:	01cbc83a 	sub	r5,zero,r7
 8122e88:	2885c83a 	sub	r2,r5,r2
 8122e8c:	01800044 	movi	r6,1
 8122e90:	a1800115 	stw	r6,4(r20)
 8122e94:	a5c00215 	stw	r23,8(r20)
 8122e98:	a1000315 	stw	r4,12(r20)
 8122e9c:	a0800415 	stw	r2,16(r20)
 8122ea0:	003f8206 	br	8122cac <_fpadd_parts+0x124>
 8122ea4:	203f7226 	beq	r4,zero,8122c70 <_fpadd_parts+0xe8>
 8122ea8:	35bff804 	addi	r22,r6,-32
 8122eac:	b9af883a 	add	r23,r23,r6
 8122eb0:	b0003116 	blt	r22,zero,8122f78 <_fpadd_parts+0x3f0>
 8122eb4:	959ad83a 	srl	r13,r18,r22
 8122eb8:	001d883a 	mov	r14,zero
 8122ebc:	000f883a 	mov	r7,zero
 8122ec0:	01000044 	movi	r4,1
 8122ec4:	0011883a 	mov	r8,zero
 8122ec8:	b0002516 	blt	r22,zero,8122f60 <_fpadd_parts+0x3d8>
 8122ecc:	2594983a 	sll	r10,r4,r22
 8122ed0:	0013883a 	mov	r9,zero
 8122ed4:	00bfffc4 	movi	r2,-1
 8122ed8:	4889883a 	add	r4,r9,r2
 8122edc:	508b883a 	add	r5,r10,r2
 8122ee0:	224d803a 	cmpltu	r6,r4,r9
 8122ee4:	314b883a 	add	r5,r6,r5
 8122ee8:	8904703a 	and	r2,r17,r4
 8122eec:	9146703a 	and	r3,r18,r5
 8122ef0:	10c4b03a 	or	r2,r2,r3
 8122ef4:	10000226 	beq	r2,zero,8122f00 <_fpadd_parts+0x378>
 8122ef8:	01c00044 	movi	r7,1
 8122efc:	0011883a 	mov	r8,zero
 8122f00:	69e2b03a 	or	r17,r13,r7
 8122f04:	7224b03a 	or	r18,r14,r8
 8122f08:	003f5906 	br	8122c70 <_fpadd_parts+0xe8>
 8122f0c:	8407883a 	add	r3,r16,r16
 8122f10:	008007c4 	movi	r2,31
 8122f14:	1185c83a 	sub	r2,r2,r6
 8122f18:	1886983a 	sll	r3,r3,r2
 8122f1c:	7996d83a 	srl	r11,r15,r6
 8122f20:	8198d83a 	srl	r12,r16,r6
 8122f24:	1ad6b03a 	or	r11,r3,r11
 8122f28:	003f3e06 	br	8122c24 <_fpadd_parts+0x9c>
 8122f2c:	2006d07a 	srli	r3,r4,1
 8122f30:	008007c4 	movi	r2,31
 8122f34:	1185c83a 	sub	r2,r2,r6
 8122f38:	1890d83a 	srl	r8,r3,r2
 8122f3c:	218e983a 	sll	r7,r4,r6
 8122f40:	003f3e06 	br	8122c3c <_fpadd_parts+0xb4>
 8122f44:	113f821e 	bne	r2,r4,8122d50 <_fpadd_parts+0x1c8>
 8122f48:	28c00117 	ldw	r3,4(r5)
 8122f4c:	98800117 	ldw	r2,4(r19)
 8122f50:	10ff7f26 	beq	r2,r3,8122d50 <_fpadd_parts+0x1c8>
 8122f54:	04c204f4 	movhi	r19,2067
 8122f58:	9ce23a04 	addi	r19,r19,-30488
 8122f5c:	003f7c06 	br	8122d50 <_fpadd_parts+0x1c8>
 8122f60:	2006d07a 	srli	r3,r4,1
 8122f64:	008007c4 	movi	r2,31
 8122f68:	1185c83a 	sub	r2,r2,r6
 8122f6c:	1894d83a 	srl	r10,r3,r2
 8122f70:	2192983a 	sll	r9,r4,r6
 8122f74:	003fd706 	br	8122ed4 <_fpadd_parts+0x34c>
 8122f78:	9487883a 	add	r3,r18,r18
 8122f7c:	008007c4 	movi	r2,31
 8122f80:	1185c83a 	sub	r2,r2,r6
 8122f84:	1886983a 	sll	r3,r3,r2
 8122f88:	899ad83a 	srl	r13,r17,r6
 8122f8c:	919cd83a 	srl	r14,r18,r6
 8122f90:	1b5ab03a 	or	r13,r3,r13
 8122f94:	003fc906 	br	8122ebc <_fpadd_parts+0x334>

08122f98 <__subdf3>:
 8122f98:	deffea04 	addi	sp,sp,-88
 8122f9c:	dcc01415 	stw	r19,80(sp)
 8122fa0:	dcc00404 	addi	r19,sp,16
 8122fa4:	2011883a 	mov	r8,r4
 8122fa8:	2813883a 	mov	r9,r5
 8122fac:	dc401315 	stw	r17,76(sp)
 8122fb0:	d809883a 	mov	r4,sp
 8122fb4:	980b883a 	mov	r5,r19
 8122fb8:	dc400904 	addi	r17,sp,36
 8122fbc:	dfc01515 	stw	ra,84(sp)
 8122fc0:	da400115 	stw	r9,4(sp)
 8122fc4:	d9c00315 	stw	r7,12(sp)
 8122fc8:	da000015 	stw	r8,0(sp)
 8122fcc:	d9800215 	stw	r6,8(sp)
 8122fd0:	81243680 	call	8124368 <__unpack_d>
 8122fd4:	d9000204 	addi	r4,sp,8
 8122fd8:	880b883a 	mov	r5,r17
 8122fdc:	81243680 	call	8124368 <__unpack_d>
 8122fe0:	d8800a17 	ldw	r2,40(sp)
 8122fe4:	880b883a 	mov	r5,r17
 8122fe8:	9809883a 	mov	r4,r19
 8122fec:	d9800e04 	addi	r6,sp,56
 8122ff0:	1080005c 	xori	r2,r2,1
 8122ff4:	d8800a15 	stw	r2,40(sp)
 8122ff8:	8122b880 	call	8122b88 <_fpadd_parts>
 8122ffc:	1009883a 	mov	r4,r2
 8123000:	81240540 	call	8124054 <__pack_d>
 8123004:	dfc01517 	ldw	ra,84(sp)
 8123008:	dcc01417 	ldw	r19,80(sp)
 812300c:	dc401317 	ldw	r17,76(sp)
 8123010:	dec01604 	addi	sp,sp,88
 8123014:	f800283a 	ret

08123018 <__adddf3>:
 8123018:	deffea04 	addi	sp,sp,-88
 812301c:	dcc01415 	stw	r19,80(sp)
 8123020:	dcc00404 	addi	r19,sp,16
 8123024:	2011883a 	mov	r8,r4
 8123028:	2813883a 	mov	r9,r5
 812302c:	dc401315 	stw	r17,76(sp)
 8123030:	d809883a 	mov	r4,sp
 8123034:	980b883a 	mov	r5,r19
 8123038:	dc400904 	addi	r17,sp,36
 812303c:	dfc01515 	stw	ra,84(sp)
 8123040:	da400115 	stw	r9,4(sp)
 8123044:	d9c00315 	stw	r7,12(sp)
 8123048:	da000015 	stw	r8,0(sp)
 812304c:	d9800215 	stw	r6,8(sp)
 8123050:	81243680 	call	8124368 <__unpack_d>
 8123054:	d9000204 	addi	r4,sp,8
 8123058:	880b883a 	mov	r5,r17
 812305c:	81243680 	call	8124368 <__unpack_d>
 8123060:	d9800e04 	addi	r6,sp,56
 8123064:	9809883a 	mov	r4,r19
 8123068:	880b883a 	mov	r5,r17
 812306c:	8122b880 	call	8122b88 <_fpadd_parts>
 8123070:	1009883a 	mov	r4,r2
 8123074:	81240540 	call	8124054 <__pack_d>
 8123078:	dfc01517 	ldw	ra,84(sp)
 812307c:	dcc01417 	ldw	r19,80(sp)
 8123080:	dc401317 	ldw	r17,76(sp)
 8123084:	dec01604 	addi	sp,sp,88
 8123088:	f800283a 	ret

0812308c <__muldf3>:
 812308c:	deffe004 	addi	sp,sp,-128
 8123090:	dc401815 	stw	r17,96(sp)
 8123094:	dc400404 	addi	r17,sp,16
 8123098:	2011883a 	mov	r8,r4
 812309c:	2813883a 	mov	r9,r5
 81230a0:	dc001715 	stw	r16,92(sp)
 81230a4:	d809883a 	mov	r4,sp
 81230a8:	880b883a 	mov	r5,r17
 81230ac:	dc000904 	addi	r16,sp,36
 81230b0:	dfc01f15 	stw	ra,124(sp)
 81230b4:	da400115 	stw	r9,4(sp)
 81230b8:	d9c00315 	stw	r7,12(sp)
 81230bc:	da000015 	stw	r8,0(sp)
 81230c0:	d9800215 	stw	r6,8(sp)
 81230c4:	ddc01e15 	stw	r23,120(sp)
 81230c8:	dd801d15 	stw	r22,116(sp)
 81230cc:	dd401c15 	stw	r21,112(sp)
 81230d0:	dd001b15 	stw	r20,108(sp)
 81230d4:	dcc01a15 	stw	r19,104(sp)
 81230d8:	dc801915 	stw	r18,100(sp)
 81230dc:	81243680 	call	8124368 <__unpack_d>
 81230e0:	d9000204 	addi	r4,sp,8
 81230e4:	800b883a 	mov	r5,r16
 81230e8:	81243680 	call	8124368 <__unpack_d>
 81230ec:	d9000417 	ldw	r4,16(sp)
 81230f0:	00800044 	movi	r2,1
 81230f4:	1100102e 	bgeu	r2,r4,8123138 <__muldf3+0xac>
 81230f8:	d8c00917 	ldw	r3,36(sp)
 81230fc:	10c0062e 	bgeu	r2,r3,8123118 <__muldf3+0x8c>
 8123100:	00800104 	movi	r2,4
 8123104:	20800a26 	beq	r4,r2,8123130 <__muldf3+0xa4>
 8123108:	1880cc26 	beq	r3,r2,812343c <__muldf3+0x3b0>
 812310c:	00800084 	movi	r2,2
 8123110:	20800926 	beq	r4,r2,8123138 <__muldf3+0xac>
 8123114:	1880191e 	bne	r3,r2,812317c <__muldf3+0xf0>
 8123118:	d8c00a17 	ldw	r3,40(sp)
 812311c:	d8800517 	ldw	r2,20(sp)
 8123120:	8009883a 	mov	r4,r16
 8123124:	10c4c03a 	cmpne	r2,r2,r3
 8123128:	d8800a15 	stw	r2,40(sp)
 812312c:	00000706 	br	812314c <__muldf3+0xc0>
 8123130:	00800084 	movi	r2,2
 8123134:	1880c326 	beq	r3,r2,8123444 <__muldf3+0x3b8>
 8123138:	d8800517 	ldw	r2,20(sp)
 812313c:	d8c00a17 	ldw	r3,40(sp)
 8123140:	8809883a 	mov	r4,r17
 8123144:	10c4c03a 	cmpne	r2,r2,r3
 8123148:	d8800515 	stw	r2,20(sp)
 812314c:	81240540 	call	8124054 <__pack_d>
 8123150:	dfc01f17 	ldw	ra,124(sp)
 8123154:	ddc01e17 	ldw	r23,120(sp)
 8123158:	dd801d17 	ldw	r22,116(sp)
 812315c:	dd401c17 	ldw	r21,112(sp)
 8123160:	dd001b17 	ldw	r20,108(sp)
 8123164:	dcc01a17 	ldw	r19,104(sp)
 8123168:	dc801917 	ldw	r18,100(sp)
 812316c:	dc401817 	ldw	r17,96(sp)
 8123170:	dc001717 	ldw	r16,92(sp)
 8123174:	dec02004 	addi	sp,sp,128
 8123178:	f800283a 	ret
 812317c:	dd800717 	ldw	r22,28(sp)
 8123180:	dc800c17 	ldw	r18,48(sp)
 8123184:	002b883a 	mov	r21,zero
 8123188:	0023883a 	mov	r17,zero
 812318c:	a80b883a 	mov	r5,r21
 8123190:	b00d883a 	mov	r6,r22
 8123194:	880f883a 	mov	r7,r17
 8123198:	ddc00817 	ldw	r23,32(sp)
 812319c:	dcc00d17 	ldw	r19,52(sp)
 81231a0:	9009883a 	mov	r4,r18
 81231a4:	8123c400 	call	8123c40 <__muldi3>
 81231a8:	001b883a 	mov	r13,zero
 81231ac:	680f883a 	mov	r7,r13
 81231b0:	b009883a 	mov	r4,r22
 81231b4:	000b883a 	mov	r5,zero
 81231b8:	980d883a 	mov	r6,r19
 81231bc:	b82d883a 	mov	r22,r23
 81231c0:	002f883a 	mov	r23,zero
 81231c4:	db401615 	stw	r13,88(sp)
 81231c8:	d8801315 	stw	r2,76(sp)
 81231cc:	d8c01415 	stw	r3,80(sp)
 81231d0:	dcc01515 	stw	r19,84(sp)
 81231d4:	8123c400 	call	8123c40 <__muldi3>
 81231d8:	b00d883a 	mov	r6,r22
 81231dc:	000b883a 	mov	r5,zero
 81231e0:	9009883a 	mov	r4,r18
 81231e4:	b80f883a 	mov	r7,r23
 81231e8:	1021883a 	mov	r16,r2
 81231ec:	1823883a 	mov	r17,r3
 81231f0:	8123c400 	call	8123c40 <__muldi3>
 81231f4:	8085883a 	add	r2,r16,r2
 81231f8:	140d803a 	cmpltu	r6,r2,r16
 81231fc:	88c7883a 	add	r3,r17,r3
 8123200:	30cd883a 	add	r6,r6,r3
 8123204:	1029883a 	mov	r20,r2
 8123208:	302b883a 	mov	r21,r6
 812320c:	da801317 	ldw	r10,76(sp)
 8123210:	dac01417 	ldw	r11,80(sp)
 8123214:	db001517 	ldw	r12,84(sp)
 8123218:	db401617 	ldw	r13,88(sp)
 812321c:	3440612e 	bgeu	r6,r17,81233a4 <__muldf3+0x318>
 8123220:	0009883a 	mov	r4,zero
 8123224:	5105883a 	add	r2,r10,r4
 8123228:	128d803a 	cmpltu	r6,r2,r10
 812322c:	5d07883a 	add	r3,r11,r20
 8123230:	30cd883a 	add	r6,r6,r3
 8123234:	0021883a 	mov	r16,zero
 8123238:	04400044 	movi	r17,1
 812323c:	1025883a 	mov	r18,r2
 8123240:	3027883a 	mov	r19,r6
 8123244:	32c06236 	bltu	r6,r11,81233d0 <__muldf3+0x344>
 8123248:	59807a26 	beq	r11,r6,8123434 <__muldf3+0x3a8>
 812324c:	680b883a 	mov	r5,r13
 8123250:	b80f883a 	mov	r7,r23
 8123254:	6009883a 	mov	r4,r12
 8123258:	b00d883a 	mov	r6,r22
 812325c:	8123c400 	call	8123c40 <__muldi3>
 8123260:	1009883a 	mov	r4,r2
 8123264:	000f883a 	mov	r7,zero
 8123268:	1545883a 	add	r2,r2,r21
 812326c:	1111803a 	cmpltu	r8,r2,r4
 8123270:	19c7883a 	add	r3,r3,r7
 8123274:	40c7883a 	add	r3,r8,r3
 8123278:	88cb883a 	add	r5,r17,r3
 812327c:	d8c00617 	ldw	r3,24(sp)
 8123280:	8089883a 	add	r4,r16,r2
 8123284:	d8800b17 	ldw	r2,44(sp)
 8123288:	18c00104 	addi	r3,r3,4
 812328c:	240d803a 	cmpltu	r6,r4,r16
 8123290:	10c7883a 	add	r3,r2,r3
 8123294:	2013883a 	mov	r9,r4
 8123298:	d8800a17 	ldw	r2,40(sp)
 812329c:	d9000517 	ldw	r4,20(sp)
 81232a0:	314d883a 	add	r6,r6,r5
 81232a4:	3015883a 	mov	r10,r6
 81232a8:	2088c03a 	cmpne	r4,r4,r2
 81232ac:	00880034 	movhi	r2,8192
 81232b0:	10bfffc4 	addi	r2,r2,-1
 81232b4:	d9000f15 	stw	r4,60(sp)
 81232b8:	d8c01015 	stw	r3,64(sp)
 81232bc:	1180162e 	bgeu	r2,r6,8123318 <__muldf3+0x28c>
 81232c0:	1811883a 	mov	r8,r3
 81232c4:	101f883a 	mov	r15,r2
 81232c8:	980497fa 	slli	r2,r19,31
 81232cc:	9016d07a 	srli	r11,r18,1
 81232d0:	500697fa 	slli	r3,r10,31
 81232d4:	480cd07a 	srli	r6,r9,1
 81232d8:	500ed07a 	srli	r7,r10,1
 81232dc:	12d6b03a 	or	r11,r2,r11
 81232e0:	00800044 	movi	r2,1
 81232e4:	198cb03a 	or	r6,r3,r6
 81232e8:	4888703a 	and	r4,r9,r2
 81232ec:	9818d07a 	srli	r12,r19,1
 81232f0:	001b883a 	mov	r13,zero
 81232f4:	03a00034 	movhi	r14,32768
 81232f8:	3013883a 	mov	r9,r6
 81232fc:	3815883a 	mov	r10,r7
 8123300:	4091883a 	add	r8,r8,r2
 8123304:	20000226 	beq	r4,zero,8123310 <__muldf3+0x284>
 8123308:	5b64b03a 	or	r18,r11,r13
 812330c:	63a6b03a 	or	r19,r12,r14
 8123310:	7abfed36 	bltu	r15,r10,81232c8 <__muldf3+0x23c>
 8123314:	da001015 	stw	r8,64(sp)
 8123318:	00840034 	movhi	r2,4096
 812331c:	10bfffc4 	addi	r2,r2,-1
 8123320:	12801436 	bltu	r2,r10,8123374 <__muldf3+0x2e8>
 8123324:	da001017 	ldw	r8,64(sp)
 8123328:	101f883a 	mov	r15,r2
 812332c:	4a45883a 	add	r2,r9,r9
 8123330:	124d803a 	cmpltu	r6,r2,r9
 8123334:	5287883a 	add	r3,r10,r10
 8123338:	9497883a 	add	r11,r18,r18
 812333c:	5c8f803a 	cmpltu	r7,r11,r18
 8123340:	9cd9883a 	add	r12,r19,r19
 8123344:	01000044 	movi	r4,1
 8123348:	30cd883a 	add	r6,r6,r3
 812334c:	3b0f883a 	add	r7,r7,r12
 8123350:	423fffc4 	addi	r8,r8,-1
 8123354:	1013883a 	mov	r9,r2
 8123358:	3015883a 	mov	r10,r6
 812335c:	111ab03a 	or	r13,r2,r4
 8123360:	98003016 	blt	r19,zero,8123424 <__muldf3+0x398>
 8123364:	5825883a 	mov	r18,r11
 8123368:	3827883a 	mov	r19,r7
 812336c:	7abfef2e 	bgeu	r15,r10,812332c <__muldf3+0x2a0>
 8123370:	da001015 	stw	r8,64(sp)
 8123374:	00803fc4 	movi	r2,255
 8123378:	488e703a 	and	r7,r9,r2
 812337c:	00802004 	movi	r2,128
 8123380:	0007883a 	mov	r3,zero
 8123384:	0011883a 	mov	r8,zero
 8123388:	38801826 	beq	r7,r2,81233ec <__muldf3+0x360>
 812338c:	008000c4 	movi	r2,3
 8123390:	d9000e04 	addi	r4,sp,56
 8123394:	da801215 	stw	r10,72(sp)
 8123398:	d8800e15 	stw	r2,56(sp)
 812339c:	da401115 	stw	r9,68(sp)
 81233a0:	003f6a06 	br	812314c <__muldf3+0xc0>
 81233a4:	89802126 	beq	r17,r6,812342c <__muldf3+0x3a0>
 81233a8:	0009883a 	mov	r4,zero
 81233ac:	5105883a 	add	r2,r10,r4
 81233b0:	128d803a 	cmpltu	r6,r2,r10
 81233b4:	5d07883a 	add	r3,r11,r20
 81233b8:	30cd883a 	add	r6,r6,r3
 81233bc:	0021883a 	mov	r16,zero
 81233c0:	0023883a 	mov	r17,zero
 81233c4:	1025883a 	mov	r18,r2
 81233c8:	3027883a 	mov	r19,r6
 81233cc:	32ff9e2e 	bgeu	r6,r11,8123248 <__muldf3+0x1bc>
 81233d0:	00800044 	movi	r2,1
 81233d4:	8089883a 	add	r4,r16,r2
 81233d8:	240d803a 	cmpltu	r6,r4,r16
 81233dc:	344d883a 	add	r6,r6,r17
 81233e0:	2021883a 	mov	r16,r4
 81233e4:	3023883a 	mov	r17,r6
 81233e8:	003f9806 	br	812324c <__muldf3+0x1c0>
 81233ec:	403fe71e 	bne	r8,zero,812338c <__muldf3+0x300>
 81233f0:	01004004 	movi	r4,256
 81233f4:	4904703a 	and	r2,r9,r4
 81233f8:	10c4b03a 	or	r2,r2,r3
 81233fc:	103fe31e 	bne	r2,zero,812338c <__muldf3+0x300>
 8123400:	94c4b03a 	or	r2,r18,r19
 8123404:	103fe126 	beq	r2,zero,812338c <__muldf3+0x300>
 8123408:	49c5883a 	add	r2,r9,r7
 812340c:	1251803a 	cmpltu	r8,r2,r9
 8123410:	4291883a 	add	r8,r8,r10
 8123414:	013fc004 	movi	r4,-256
 8123418:	1112703a 	and	r9,r2,r4
 812341c:	4015883a 	mov	r10,r8
 8123420:	003fda06 	br	812338c <__muldf3+0x300>
 8123424:	6813883a 	mov	r9,r13
 8123428:	003fce06 	br	8123364 <__muldf3+0x2d8>
 812342c:	143f7c36 	bltu	r2,r16,8123220 <__muldf3+0x194>
 8123430:	003fdd06 	br	81233a8 <__muldf3+0x31c>
 8123434:	12bf852e 	bgeu	r2,r10,812324c <__muldf3+0x1c0>
 8123438:	003fe506 	br	81233d0 <__muldf3+0x344>
 812343c:	00800084 	movi	r2,2
 8123440:	20bf351e 	bne	r4,r2,8123118 <__muldf3+0x8c>
 8123444:	010204f4 	movhi	r4,2067
 8123448:	21223a04 	addi	r4,r4,-30488
 812344c:	003f3f06 	br	812314c <__muldf3+0xc0>

08123450 <__divdf3>:
 8123450:	deffed04 	addi	sp,sp,-76
 8123454:	dcc01115 	stw	r19,68(sp)
 8123458:	dcc00404 	addi	r19,sp,16
 812345c:	2011883a 	mov	r8,r4
 8123460:	2813883a 	mov	r9,r5
 8123464:	dc000e15 	stw	r16,56(sp)
 8123468:	d809883a 	mov	r4,sp
 812346c:	980b883a 	mov	r5,r19
 8123470:	dc000904 	addi	r16,sp,36
 8123474:	dfc01215 	stw	ra,72(sp)
 8123478:	da400115 	stw	r9,4(sp)
 812347c:	d9c00315 	stw	r7,12(sp)
 8123480:	da000015 	stw	r8,0(sp)
 8123484:	d9800215 	stw	r6,8(sp)
 8123488:	dc801015 	stw	r18,64(sp)
 812348c:	dc400f15 	stw	r17,60(sp)
 8123490:	81243680 	call	8124368 <__unpack_d>
 8123494:	d9000204 	addi	r4,sp,8
 8123498:	800b883a 	mov	r5,r16
 812349c:	81243680 	call	8124368 <__unpack_d>
 81234a0:	d9000417 	ldw	r4,16(sp)
 81234a4:	00800044 	movi	r2,1
 81234a8:	11000b2e 	bgeu	r2,r4,81234d8 <__divdf3+0x88>
 81234ac:	d9400917 	ldw	r5,36(sp)
 81234b0:	1140762e 	bgeu	r2,r5,812368c <__divdf3+0x23c>
 81234b4:	d8800517 	ldw	r2,20(sp)
 81234b8:	d8c00a17 	ldw	r3,40(sp)
 81234bc:	01800104 	movi	r6,4
 81234c0:	10c4f03a 	xor	r2,r2,r3
 81234c4:	d8800515 	stw	r2,20(sp)
 81234c8:	21800226 	beq	r4,r6,81234d4 <__divdf3+0x84>
 81234cc:	00800084 	movi	r2,2
 81234d0:	2080141e 	bne	r4,r2,8123524 <__divdf3+0xd4>
 81234d4:	29000926 	beq	r5,r4,81234fc <__divdf3+0xac>
 81234d8:	9809883a 	mov	r4,r19
 81234dc:	81240540 	call	8124054 <__pack_d>
 81234e0:	dfc01217 	ldw	ra,72(sp)
 81234e4:	dcc01117 	ldw	r19,68(sp)
 81234e8:	dc801017 	ldw	r18,64(sp)
 81234ec:	dc400f17 	ldw	r17,60(sp)
 81234f0:	dc000e17 	ldw	r16,56(sp)
 81234f4:	dec01304 	addi	sp,sp,76
 81234f8:	f800283a 	ret
 81234fc:	010204f4 	movhi	r4,2067
 8123500:	21223a04 	addi	r4,r4,-30488
 8123504:	81240540 	call	8124054 <__pack_d>
 8123508:	dfc01217 	ldw	ra,72(sp)
 812350c:	dcc01117 	ldw	r19,68(sp)
 8123510:	dc801017 	ldw	r18,64(sp)
 8123514:	dc400f17 	ldw	r17,60(sp)
 8123518:	dc000e17 	ldw	r16,56(sp)
 812351c:	dec01304 	addi	sp,sp,76
 8123520:	f800283a 	ret
 8123524:	29805b26 	beq	r5,r6,8123694 <__divdf3+0x244>
 8123528:	28802d26 	beq	r5,r2,81235e0 <__divdf3+0x190>
 812352c:	d8c00617 	ldw	r3,24(sp)
 8123530:	d8800b17 	ldw	r2,44(sp)
 8123534:	d9c00817 	ldw	r7,32(sp)
 8123538:	dc400d17 	ldw	r17,52(sp)
 812353c:	188bc83a 	sub	r5,r3,r2
 8123540:	d9800717 	ldw	r6,28(sp)
 8123544:	dc000c17 	ldw	r16,48(sp)
 8123548:	d9400615 	stw	r5,24(sp)
 812354c:	3c403836 	bltu	r7,r17,8123630 <__divdf3+0x1e0>
 8123550:	89c03626 	beq	r17,r7,812362c <__divdf3+0x1dc>
 8123554:	0015883a 	mov	r10,zero
 8123558:	001d883a 	mov	r14,zero
 812355c:	02c40034 	movhi	r11,4096
 8123560:	001f883a 	mov	r15,zero
 8123564:	003f883a 	mov	ra,zero
 8123568:	04800f44 	movi	r18,61
 812356c:	00000f06 	br	81235ac <__divdf3+0x15c>
 8123570:	601d883a 	mov	r14,r12
 8123574:	681f883a 	mov	r15,r13
 8123578:	400d883a 	mov	r6,r8
 812357c:	100f883a 	mov	r7,r2
 8123580:	3191883a 	add	r8,r6,r6
 8123584:	5808d07a 	srli	r4,r11,1
 8123588:	4185803a 	cmpltu	r2,r8,r6
 812358c:	39d3883a 	add	r9,r7,r7
 8123590:	28c6b03a 	or	r3,r5,r3
 8123594:	1245883a 	add	r2,r2,r9
 8123598:	1815883a 	mov	r10,r3
 812359c:	2017883a 	mov	r11,r4
 81235a0:	400d883a 	mov	r6,r8
 81235a4:	100f883a 	mov	r7,r2
 81235a8:	fc801726 	beq	ra,r18,8123608 <__divdf3+0x1b8>
 81235ac:	580a97fa 	slli	r5,r11,31
 81235b0:	5006d07a 	srli	r3,r10,1
 81235b4:	ffc00044 	addi	ra,ra,1
 81235b8:	3c7ff136 	bltu	r7,r17,8123580 <__divdf3+0x130>
 81235bc:	3411c83a 	sub	r8,r6,r16
 81235c0:	3205803a 	cmpltu	r2,r6,r8
 81235c4:	3c53c83a 	sub	r9,r7,r17
 81235c8:	7298b03a 	or	r12,r14,r10
 81235cc:	7adab03a 	or	r13,r15,r11
 81235d0:	4885c83a 	sub	r2,r9,r2
 81235d4:	89ffe61e 	bne	r17,r7,8123570 <__divdf3+0x120>
 81235d8:	343fe936 	bltu	r6,r16,8123580 <__divdf3+0x130>
 81235dc:	003fe406 	br	8123570 <__divdf3+0x120>
 81235e0:	9809883a 	mov	r4,r19
 81235e4:	d9800415 	stw	r6,16(sp)
 81235e8:	81240540 	call	8124054 <__pack_d>
 81235ec:	dfc01217 	ldw	ra,72(sp)
 81235f0:	dcc01117 	ldw	r19,68(sp)
 81235f4:	dc801017 	ldw	r18,64(sp)
 81235f8:	dc400f17 	ldw	r17,60(sp)
 81235fc:	dc000e17 	ldw	r16,56(sp)
 8123600:	dec01304 	addi	sp,sp,76
 8123604:	f800283a 	ret
 8123608:	00803fc4 	movi	r2,255
 812360c:	7090703a 	and	r8,r14,r2
 8123610:	00802004 	movi	r2,128
 8123614:	0007883a 	mov	r3,zero
 8123618:	0013883a 	mov	r9,zero
 812361c:	40800d26 	beq	r8,r2,8123654 <__divdf3+0x204>
 8123620:	dbc00815 	stw	r15,32(sp)
 8123624:	db800715 	stw	r14,28(sp)
 8123628:	003fab06 	br	81234d8 <__divdf3+0x88>
 812362c:	343fc92e 	bgeu	r6,r16,8123554 <__divdf3+0x104>
 8123630:	3185883a 	add	r2,r6,r6
 8123634:	1189803a 	cmpltu	r4,r2,r6
 8123638:	39c7883a 	add	r3,r7,r7
 812363c:	20c9883a 	add	r4,r4,r3
 8123640:	297fffc4 	addi	r5,r5,-1
 8123644:	100d883a 	mov	r6,r2
 8123648:	200f883a 	mov	r7,r4
 812364c:	d9400615 	stw	r5,24(sp)
 8123650:	003fc006 	br	8123554 <__divdf3+0x104>
 8123654:	483ff21e 	bne	r9,zero,8123620 <__divdf3+0x1d0>
 8123658:	01004004 	movi	r4,256
 812365c:	7104703a 	and	r2,r14,r4
 8123660:	10c4b03a 	or	r2,r2,r3
 8123664:	103fee1e 	bne	r2,zero,8123620 <__divdf3+0x1d0>
 8123668:	31c4b03a 	or	r2,r6,r7
 812366c:	103fec26 	beq	r2,zero,8123620 <__divdf3+0x1d0>
 8123670:	7205883a 	add	r2,r14,r8
 8123674:	1391803a 	cmpltu	r8,r2,r14
 8123678:	43d1883a 	add	r8,r8,r15
 812367c:	013fc004 	movi	r4,-256
 8123680:	111c703a 	and	r14,r2,r4
 8123684:	401f883a 	mov	r15,r8
 8123688:	003fe506 	br	8123620 <__divdf3+0x1d0>
 812368c:	8009883a 	mov	r4,r16
 8123690:	003f9206 	br	81234dc <__divdf3+0x8c>
 8123694:	9809883a 	mov	r4,r19
 8123698:	d8000715 	stw	zero,28(sp)
 812369c:	d8000815 	stw	zero,32(sp)
 81236a0:	d8000615 	stw	zero,24(sp)
 81236a4:	003f8d06 	br	81234dc <__divdf3+0x8c>

081236a8 <__eqdf2>:
 81236a8:	deffef04 	addi	sp,sp,-68
 81236ac:	dc400f15 	stw	r17,60(sp)
 81236b0:	dc400404 	addi	r17,sp,16
 81236b4:	2005883a 	mov	r2,r4
 81236b8:	2807883a 	mov	r3,r5
 81236bc:	dc000e15 	stw	r16,56(sp)
 81236c0:	d809883a 	mov	r4,sp
 81236c4:	880b883a 	mov	r5,r17
 81236c8:	dc000904 	addi	r16,sp,36
 81236cc:	d8c00115 	stw	r3,4(sp)
 81236d0:	d8800015 	stw	r2,0(sp)
 81236d4:	d9800215 	stw	r6,8(sp)
 81236d8:	dfc01015 	stw	ra,64(sp)
 81236dc:	d9c00315 	stw	r7,12(sp)
 81236e0:	81243680 	call	8124368 <__unpack_d>
 81236e4:	d9000204 	addi	r4,sp,8
 81236e8:	800b883a 	mov	r5,r16
 81236ec:	81243680 	call	8124368 <__unpack_d>
 81236f0:	d8800417 	ldw	r2,16(sp)
 81236f4:	00c00044 	movi	r3,1
 81236f8:	180d883a 	mov	r6,r3
 81236fc:	1880062e 	bgeu	r3,r2,8123718 <__eqdf2+0x70>
 8123700:	d8800917 	ldw	r2,36(sp)
 8123704:	8809883a 	mov	r4,r17
 8123708:	800b883a 	mov	r5,r16
 812370c:	1880022e 	bgeu	r3,r2,8123718 <__eqdf2+0x70>
 8123710:	81244a00 	call	81244a0 <__fpcmp_parts_d>
 8123714:	100d883a 	mov	r6,r2
 8123718:	3005883a 	mov	r2,r6
 812371c:	dfc01017 	ldw	ra,64(sp)
 8123720:	dc400f17 	ldw	r17,60(sp)
 8123724:	dc000e17 	ldw	r16,56(sp)
 8123728:	dec01104 	addi	sp,sp,68
 812372c:	f800283a 	ret

08123730 <__nedf2>:
 8123730:	deffef04 	addi	sp,sp,-68
 8123734:	dc400f15 	stw	r17,60(sp)
 8123738:	dc400404 	addi	r17,sp,16
 812373c:	2005883a 	mov	r2,r4
 8123740:	2807883a 	mov	r3,r5
 8123744:	dc000e15 	stw	r16,56(sp)
 8123748:	d809883a 	mov	r4,sp
 812374c:	880b883a 	mov	r5,r17
 8123750:	dc000904 	addi	r16,sp,36
 8123754:	d8c00115 	stw	r3,4(sp)
 8123758:	d8800015 	stw	r2,0(sp)
 812375c:	d9800215 	stw	r6,8(sp)
 8123760:	dfc01015 	stw	ra,64(sp)
 8123764:	d9c00315 	stw	r7,12(sp)
 8123768:	81243680 	call	8124368 <__unpack_d>
 812376c:	d9000204 	addi	r4,sp,8
 8123770:	800b883a 	mov	r5,r16
 8123774:	81243680 	call	8124368 <__unpack_d>
 8123778:	d8800417 	ldw	r2,16(sp)
 812377c:	00c00044 	movi	r3,1
 8123780:	180d883a 	mov	r6,r3
 8123784:	1880062e 	bgeu	r3,r2,81237a0 <__nedf2+0x70>
 8123788:	d8800917 	ldw	r2,36(sp)
 812378c:	8809883a 	mov	r4,r17
 8123790:	800b883a 	mov	r5,r16
 8123794:	1880022e 	bgeu	r3,r2,81237a0 <__nedf2+0x70>
 8123798:	81244a00 	call	81244a0 <__fpcmp_parts_d>
 812379c:	100d883a 	mov	r6,r2
 81237a0:	3005883a 	mov	r2,r6
 81237a4:	dfc01017 	ldw	ra,64(sp)
 81237a8:	dc400f17 	ldw	r17,60(sp)
 81237ac:	dc000e17 	ldw	r16,56(sp)
 81237b0:	dec01104 	addi	sp,sp,68
 81237b4:	f800283a 	ret

081237b8 <__gtdf2>:
 81237b8:	deffef04 	addi	sp,sp,-68
 81237bc:	dc400f15 	stw	r17,60(sp)
 81237c0:	dc400404 	addi	r17,sp,16
 81237c4:	2005883a 	mov	r2,r4
 81237c8:	2807883a 	mov	r3,r5
 81237cc:	dc000e15 	stw	r16,56(sp)
 81237d0:	d809883a 	mov	r4,sp
 81237d4:	880b883a 	mov	r5,r17
 81237d8:	dc000904 	addi	r16,sp,36
 81237dc:	d8c00115 	stw	r3,4(sp)
 81237e0:	d8800015 	stw	r2,0(sp)
 81237e4:	d9800215 	stw	r6,8(sp)
 81237e8:	dfc01015 	stw	ra,64(sp)
 81237ec:	d9c00315 	stw	r7,12(sp)
 81237f0:	81243680 	call	8124368 <__unpack_d>
 81237f4:	d9000204 	addi	r4,sp,8
 81237f8:	800b883a 	mov	r5,r16
 81237fc:	81243680 	call	8124368 <__unpack_d>
 8123800:	d8800417 	ldw	r2,16(sp)
 8123804:	00c00044 	movi	r3,1
 8123808:	01bfffc4 	movi	r6,-1
 812380c:	1880062e 	bgeu	r3,r2,8123828 <__gtdf2+0x70>
 8123810:	d8800917 	ldw	r2,36(sp)
 8123814:	8809883a 	mov	r4,r17
 8123818:	800b883a 	mov	r5,r16
 812381c:	1880022e 	bgeu	r3,r2,8123828 <__gtdf2+0x70>
 8123820:	81244a00 	call	81244a0 <__fpcmp_parts_d>
 8123824:	100d883a 	mov	r6,r2
 8123828:	3005883a 	mov	r2,r6
 812382c:	dfc01017 	ldw	ra,64(sp)
 8123830:	dc400f17 	ldw	r17,60(sp)
 8123834:	dc000e17 	ldw	r16,56(sp)
 8123838:	dec01104 	addi	sp,sp,68
 812383c:	f800283a 	ret

08123840 <__ltdf2>:
 8123840:	deffef04 	addi	sp,sp,-68
 8123844:	dc400f15 	stw	r17,60(sp)
 8123848:	dc400404 	addi	r17,sp,16
 812384c:	2005883a 	mov	r2,r4
 8123850:	2807883a 	mov	r3,r5
 8123854:	dc000e15 	stw	r16,56(sp)
 8123858:	d809883a 	mov	r4,sp
 812385c:	880b883a 	mov	r5,r17
 8123860:	dc000904 	addi	r16,sp,36
 8123864:	d8c00115 	stw	r3,4(sp)
 8123868:	d8800015 	stw	r2,0(sp)
 812386c:	d9800215 	stw	r6,8(sp)
 8123870:	dfc01015 	stw	ra,64(sp)
 8123874:	d9c00315 	stw	r7,12(sp)
 8123878:	81243680 	call	8124368 <__unpack_d>
 812387c:	d9000204 	addi	r4,sp,8
 8123880:	800b883a 	mov	r5,r16
 8123884:	81243680 	call	8124368 <__unpack_d>
 8123888:	d8800417 	ldw	r2,16(sp)
 812388c:	00c00044 	movi	r3,1
 8123890:	180d883a 	mov	r6,r3
 8123894:	1880062e 	bgeu	r3,r2,81238b0 <__ltdf2+0x70>
 8123898:	d8800917 	ldw	r2,36(sp)
 812389c:	8809883a 	mov	r4,r17
 81238a0:	800b883a 	mov	r5,r16
 81238a4:	1880022e 	bgeu	r3,r2,81238b0 <__ltdf2+0x70>
 81238a8:	81244a00 	call	81244a0 <__fpcmp_parts_d>
 81238ac:	100d883a 	mov	r6,r2
 81238b0:	3005883a 	mov	r2,r6
 81238b4:	dfc01017 	ldw	ra,64(sp)
 81238b8:	dc400f17 	ldw	r17,60(sp)
 81238bc:	dc000e17 	ldw	r16,56(sp)
 81238c0:	dec01104 	addi	sp,sp,68
 81238c4:	f800283a 	ret

081238c8 <__ledf2>:
 81238c8:	deffef04 	addi	sp,sp,-68
 81238cc:	dc400f15 	stw	r17,60(sp)
 81238d0:	dc400404 	addi	r17,sp,16
 81238d4:	2005883a 	mov	r2,r4
 81238d8:	2807883a 	mov	r3,r5
 81238dc:	dc000e15 	stw	r16,56(sp)
 81238e0:	d809883a 	mov	r4,sp
 81238e4:	880b883a 	mov	r5,r17
 81238e8:	dc000904 	addi	r16,sp,36
 81238ec:	d8c00115 	stw	r3,4(sp)
 81238f0:	d8800015 	stw	r2,0(sp)
 81238f4:	d9800215 	stw	r6,8(sp)
 81238f8:	dfc01015 	stw	ra,64(sp)
 81238fc:	d9c00315 	stw	r7,12(sp)
 8123900:	81243680 	call	8124368 <__unpack_d>
 8123904:	d9000204 	addi	r4,sp,8
 8123908:	800b883a 	mov	r5,r16
 812390c:	81243680 	call	8124368 <__unpack_d>
 8123910:	d8800417 	ldw	r2,16(sp)
 8123914:	00c00044 	movi	r3,1
 8123918:	180d883a 	mov	r6,r3
 812391c:	1880062e 	bgeu	r3,r2,8123938 <__ledf2+0x70>
 8123920:	d8800917 	ldw	r2,36(sp)
 8123924:	8809883a 	mov	r4,r17
 8123928:	800b883a 	mov	r5,r16
 812392c:	1880022e 	bgeu	r3,r2,8123938 <__ledf2+0x70>
 8123930:	81244a00 	call	81244a0 <__fpcmp_parts_d>
 8123934:	100d883a 	mov	r6,r2
 8123938:	3005883a 	mov	r2,r6
 812393c:	dfc01017 	ldw	ra,64(sp)
 8123940:	dc400f17 	ldw	r17,60(sp)
 8123944:	dc000e17 	ldw	r16,56(sp)
 8123948:	dec01104 	addi	sp,sp,68
 812394c:	f800283a 	ret

08123950 <__floatsidf>:
 8123950:	2006d7fa 	srli	r3,r4,31
 8123954:	defff604 	addi	sp,sp,-40
 8123958:	008000c4 	movi	r2,3
 812395c:	dfc00915 	stw	ra,36(sp)
 8123960:	dcc00815 	stw	r19,32(sp)
 8123964:	dc800715 	stw	r18,28(sp)
 8123968:	dc400615 	stw	r17,24(sp)
 812396c:	dc000515 	stw	r16,20(sp)
 8123970:	d8800015 	stw	r2,0(sp)
 8123974:	d8c00115 	stw	r3,4(sp)
 8123978:	20000f1e 	bne	r4,zero,81239b8 <__floatsidf+0x68>
 812397c:	00800084 	movi	r2,2
 8123980:	d8800015 	stw	r2,0(sp)
 8123984:	d809883a 	mov	r4,sp
 8123988:	81240540 	call	8124054 <__pack_d>
 812398c:	1009883a 	mov	r4,r2
 8123990:	180b883a 	mov	r5,r3
 8123994:	2005883a 	mov	r2,r4
 8123998:	2807883a 	mov	r3,r5
 812399c:	dfc00917 	ldw	ra,36(sp)
 81239a0:	dcc00817 	ldw	r19,32(sp)
 81239a4:	dc800717 	ldw	r18,28(sp)
 81239a8:	dc400617 	ldw	r17,24(sp)
 81239ac:	dc000517 	ldw	r16,20(sp)
 81239b0:	dec00a04 	addi	sp,sp,40
 81239b4:	f800283a 	ret
 81239b8:	00800f04 	movi	r2,60
 81239bc:	1807003a 	cmpeq	r3,r3,zero
 81239c0:	d8800215 	stw	r2,8(sp)
 81239c4:	18001126 	beq	r3,zero,8123a0c <__floatsidf+0xbc>
 81239c8:	0027883a 	mov	r19,zero
 81239cc:	2025883a 	mov	r18,r4
 81239d0:	d9000315 	stw	r4,12(sp)
 81239d4:	dcc00415 	stw	r19,16(sp)
 81239d8:	8123cd80 	call	8123cd8 <__clzsi2>
 81239dc:	11000744 	addi	r4,r2,29
 81239e0:	013fe80e 	bge	zero,r4,8123984 <__floatsidf+0x34>
 81239e4:	10bfff44 	addi	r2,r2,-3
 81239e8:	10000c16 	blt	r2,zero,8123a1c <__floatsidf+0xcc>
 81239ec:	90a2983a 	sll	r17,r18,r2
 81239f0:	0021883a 	mov	r16,zero
 81239f4:	d8800217 	ldw	r2,8(sp)
 81239f8:	dc400415 	stw	r17,16(sp)
 81239fc:	dc000315 	stw	r16,12(sp)
 8123a00:	1105c83a 	sub	r2,r2,r4
 8123a04:	d8800215 	stw	r2,8(sp)
 8123a08:	003fde06 	br	8123984 <__floatsidf+0x34>
 8123a0c:	00a00034 	movhi	r2,32768
 8123a10:	20800a26 	beq	r4,r2,8123a3c <__floatsidf+0xec>
 8123a14:	0109c83a 	sub	r4,zero,r4
 8123a18:	003feb06 	br	81239c8 <__floatsidf+0x78>
 8123a1c:	9006d07a 	srli	r3,r18,1
 8123a20:	008007c4 	movi	r2,31
 8123a24:	1105c83a 	sub	r2,r2,r4
 8123a28:	1886d83a 	srl	r3,r3,r2
 8123a2c:	9922983a 	sll	r17,r19,r4
 8123a30:	9120983a 	sll	r16,r18,r4
 8123a34:	1c62b03a 	or	r17,r3,r17
 8123a38:	003fee06 	br	81239f4 <__floatsidf+0xa4>
 8123a3c:	0009883a 	mov	r4,zero
 8123a40:	01707834 	movhi	r5,49632
 8123a44:	003fd306 	br	8123994 <__floatsidf+0x44>

08123a48 <__make_dp>:
 8123a48:	defff904 	addi	sp,sp,-28
 8123a4c:	d8c00717 	ldw	r3,28(sp)
 8123a50:	d9000015 	stw	r4,0(sp)
 8123a54:	d809883a 	mov	r4,sp
 8123a58:	dfc00515 	stw	ra,20(sp)
 8123a5c:	d9c00615 	stw	r7,24(sp)
 8123a60:	d9400115 	stw	r5,4(sp)
 8123a64:	d9800215 	stw	r6,8(sp)
 8123a68:	d8c00415 	stw	r3,16(sp)
 8123a6c:	d9c00315 	stw	r7,12(sp)
 8123a70:	81240540 	call	8124054 <__pack_d>
 8123a74:	dfc00517 	ldw	ra,20(sp)
 8123a78:	dec00704 	addi	sp,sp,28
 8123a7c:	f800283a 	ret

08123a80 <__truncdfsf2>:
 8123a80:	defff804 	addi	sp,sp,-32
 8123a84:	2005883a 	mov	r2,r4
 8123a88:	2807883a 	mov	r3,r5
 8123a8c:	d809883a 	mov	r4,sp
 8123a90:	d9400204 	addi	r5,sp,8
 8123a94:	d8c00115 	stw	r3,4(sp)
 8123a98:	d8800015 	stw	r2,0(sp)
 8123a9c:	dfc00715 	stw	ra,28(sp)
 8123aa0:	81243680 	call	8124368 <__unpack_d>
 8123aa4:	d9c00517 	ldw	r7,20(sp)
 8123aa8:	da000617 	ldw	r8,24(sp)
 8123aac:	02d00034 	movhi	r11,16384
 8123ab0:	5affffc4 	addi	r11,r11,-1
 8123ab4:	3812d7ba 	srli	r9,r7,30
 8123ab8:	401a90ba 	slli	r13,r8,2
 8123abc:	3ac4703a 	and	r2,r7,r11
 8123ac0:	0007883a 	mov	r3,zero
 8123ac4:	6a52b03a 	or	r9,r13,r9
 8123ac8:	10c4b03a 	or	r2,r2,r3
 8123acc:	d9000217 	ldw	r4,8(sp)
 8123ad0:	d9400317 	ldw	r5,12(sp)
 8123ad4:	d9800417 	ldw	r6,16(sp)
 8123ad8:	480f883a 	mov	r7,r9
 8123adc:	10000126 	beq	r2,zero,8123ae4 <__truncdfsf2+0x64>
 8123ae0:	49c00054 	ori	r7,r9,1
 8123ae4:	81240280 	call	8124028 <__make_fp>
 8123ae8:	dfc00717 	ldw	ra,28(sp)
 8123aec:	dec00804 	addi	sp,sp,32
 8123af0:	f800283a 	ret

08123af4 <udivmodsi4>:
 8123af4:	29001b2e 	bgeu	r5,r4,8123b64 <udivmodsi4+0x70>
 8123af8:	28001a16 	blt	r5,zero,8123b64 <udivmodsi4+0x70>
 8123afc:	00800044 	movi	r2,1
 8123b00:	0007883a 	mov	r3,zero
 8123b04:	01c007c4 	movi	r7,31
 8123b08:	00000306 	br	8123b18 <udivmodsi4+0x24>
 8123b0c:	19c01326 	beq	r3,r7,8123b5c <udivmodsi4+0x68>
 8123b10:	18c00044 	addi	r3,r3,1
 8123b14:	28000416 	blt	r5,zero,8123b28 <udivmodsi4+0x34>
 8123b18:	294b883a 	add	r5,r5,r5
 8123b1c:	1085883a 	add	r2,r2,r2
 8123b20:	293ffa36 	bltu	r5,r4,8123b0c <udivmodsi4+0x18>
 8123b24:	10000d26 	beq	r2,zero,8123b5c <udivmodsi4+0x68>
 8123b28:	0007883a 	mov	r3,zero
 8123b2c:	21400236 	bltu	r4,r5,8123b38 <udivmodsi4+0x44>
 8123b30:	2149c83a 	sub	r4,r4,r5
 8123b34:	1886b03a 	or	r3,r3,r2
 8123b38:	1004d07a 	srli	r2,r2,1
 8123b3c:	280ad07a 	srli	r5,r5,1
 8123b40:	103ffa1e 	bne	r2,zero,8123b2c <udivmodsi4+0x38>
 8123b44:	30000226 	beq	r6,zero,8123b50 <udivmodsi4+0x5c>
 8123b48:	2005883a 	mov	r2,r4
 8123b4c:	f800283a 	ret
 8123b50:	1809883a 	mov	r4,r3
 8123b54:	2005883a 	mov	r2,r4
 8123b58:	f800283a 	ret
 8123b5c:	0007883a 	mov	r3,zero
 8123b60:	003ff806 	br	8123b44 <udivmodsi4+0x50>
 8123b64:	00800044 	movi	r2,1
 8123b68:	0007883a 	mov	r3,zero
 8123b6c:	003fef06 	br	8123b2c <udivmodsi4+0x38>

08123b70 <__divsi3>:
 8123b70:	defffe04 	addi	sp,sp,-8
 8123b74:	dc000015 	stw	r16,0(sp)
 8123b78:	dfc00115 	stw	ra,4(sp)
 8123b7c:	0021883a 	mov	r16,zero
 8123b80:	20000c16 	blt	r4,zero,8123bb4 <__divsi3+0x44>
 8123b84:	000d883a 	mov	r6,zero
 8123b88:	28000e16 	blt	r5,zero,8123bc4 <__divsi3+0x54>
 8123b8c:	8123af40 	call	8123af4 <udivmodsi4>
 8123b90:	1007883a 	mov	r3,r2
 8123b94:	8005003a 	cmpeq	r2,r16,zero
 8123b98:	1000011e 	bne	r2,zero,8123ba0 <__divsi3+0x30>
 8123b9c:	00c7c83a 	sub	r3,zero,r3
 8123ba0:	1805883a 	mov	r2,r3
 8123ba4:	dfc00117 	ldw	ra,4(sp)
 8123ba8:	dc000017 	ldw	r16,0(sp)
 8123bac:	dec00204 	addi	sp,sp,8
 8123bb0:	f800283a 	ret
 8123bb4:	0109c83a 	sub	r4,zero,r4
 8123bb8:	04000044 	movi	r16,1
 8123bbc:	000d883a 	mov	r6,zero
 8123bc0:	283ff20e 	bge	r5,zero,8123b8c <__divsi3+0x1c>
 8123bc4:	014bc83a 	sub	r5,zero,r5
 8123bc8:	8021003a 	cmpeq	r16,r16,zero
 8123bcc:	003fef06 	br	8123b8c <__divsi3+0x1c>

08123bd0 <__modsi3>:
 8123bd0:	deffff04 	addi	sp,sp,-4
 8123bd4:	dfc00015 	stw	ra,0(sp)
 8123bd8:	01800044 	movi	r6,1
 8123bdc:	2807883a 	mov	r3,r5
 8123be0:	20000416 	blt	r4,zero,8123bf4 <__modsi3+0x24>
 8123be4:	28000c16 	blt	r5,zero,8123c18 <__modsi3+0x48>
 8123be8:	dfc00017 	ldw	ra,0(sp)
 8123bec:	dec00104 	addi	sp,sp,4
 8123bf0:	8123af41 	jmpi	8123af4 <udivmodsi4>
 8123bf4:	0109c83a 	sub	r4,zero,r4
 8123bf8:	28000b16 	blt	r5,zero,8123c28 <__modsi3+0x58>
 8123bfc:	180b883a 	mov	r5,r3
 8123c00:	01800044 	movi	r6,1
 8123c04:	8123af40 	call	8123af4 <udivmodsi4>
 8123c08:	0085c83a 	sub	r2,zero,r2
 8123c0c:	dfc00017 	ldw	ra,0(sp)
 8123c10:	dec00104 	addi	sp,sp,4
 8123c14:	f800283a 	ret
 8123c18:	014bc83a 	sub	r5,zero,r5
 8123c1c:	dfc00017 	ldw	ra,0(sp)
 8123c20:	dec00104 	addi	sp,sp,4
 8123c24:	8123af41 	jmpi	8123af4 <udivmodsi4>
 8123c28:	0147c83a 	sub	r3,zero,r5
 8123c2c:	003ff306 	br	8123bfc <__modsi3+0x2c>

08123c30 <__udivsi3>:
 8123c30:	000d883a 	mov	r6,zero
 8123c34:	8123af41 	jmpi	8123af4 <udivmodsi4>

08123c38 <__umodsi3>:
 8123c38:	01800044 	movi	r6,1
 8123c3c:	8123af41 	jmpi	8123af4 <udivmodsi4>

08123c40 <__muldi3>:
 8123c40:	2011883a 	mov	r8,r4
 8123c44:	427fffcc 	andi	r9,r8,65535
 8123c48:	4018d43a 	srli	r12,r8,16
 8123c4c:	32bfffcc 	andi	r10,r6,65535
 8123c50:	3016d43a 	srli	r11,r6,16
 8123c54:	4a85383a 	mul	r2,r9,r10
 8123c58:	6295383a 	mul	r10,r12,r10
 8123c5c:	4ad3383a 	mul	r9,r9,r11
 8123c60:	113fffcc 	andi	r4,r2,65535
 8123c64:	1004d43a 	srli	r2,r2,16
 8123c68:	4a93883a 	add	r9,r9,r10
 8123c6c:	3807883a 	mov	r3,r7
 8123c70:	1245883a 	add	r2,r2,r9
 8123c74:	280f883a 	mov	r7,r5
 8123c78:	180b883a 	mov	r5,r3
 8123c7c:	1006943a 	slli	r3,r2,16
 8123c80:	defffd04 	addi	sp,sp,-12
 8123c84:	dc800215 	stw	r18,8(sp)
 8123c88:	1907883a 	add	r3,r3,r4
 8123c8c:	dc400115 	stw	r17,4(sp)
 8123c90:	dc000015 	stw	r16,0(sp)
 8123c94:	4165383a 	mul	r18,r8,r5
 8123c98:	31e3383a 	mul	r17,r6,r7
 8123c9c:	1012d43a 	srli	r9,r2,16
 8123ca0:	62d9383a 	mul	r12,r12,r11
 8123ca4:	181f883a 	mov	r15,r3
 8123ca8:	1280022e 	bgeu	r2,r10,8123cb4 <__muldi3+0x74>
 8123cac:	00800074 	movhi	r2,1
 8123cb0:	6099883a 	add	r12,r12,r2
 8123cb4:	624d883a 	add	r6,r12,r9
 8123cb8:	9187883a 	add	r3,r18,r6
 8123cbc:	88c7883a 	add	r3,r17,r3
 8123cc0:	7805883a 	mov	r2,r15
 8123cc4:	dc800217 	ldw	r18,8(sp)
 8123cc8:	dc400117 	ldw	r17,4(sp)
 8123ccc:	dc000017 	ldw	r16,0(sp)
 8123cd0:	dec00304 	addi	sp,sp,12
 8123cd4:	f800283a 	ret

08123cd8 <__clzsi2>:
 8123cd8:	00bfffd4 	movui	r2,65535
 8123cdc:	11000e36 	bltu	r2,r4,8123d18 <__clzsi2+0x40>
 8123ce0:	00803fc4 	movi	r2,255
 8123ce4:	01400204 	movi	r5,8
 8123ce8:	0007883a 	mov	r3,zero
 8123cec:	11001036 	bltu	r2,r4,8123d30 <__clzsi2+0x58>
 8123cf0:	000b883a 	mov	r5,zero
 8123cf4:	20c6d83a 	srl	r3,r4,r3
 8123cf8:	008204f4 	movhi	r2,2067
 8123cfc:	10a23f04 	addi	r2,r2,-30468
 8123d00:	1887883a 	add	r3,r3,r2
 8123d04:	18800003 	ldbu	r2,0(r3)
 8123d08:	00c00804 	movi	r3,32
 8123d0c:	2885883a 	add	r2,r5,r2
 8123d10:	1885c83a 	sub	r2,r3,r2
 8123d14:	f800283a 	ret
 8123d18:	01400404 	movi	r5,16
 8123d1c:	00804034 	movhi	r2,256
 8123d20:	10bfffc4 	addi	r2,r2,-1
 8123d24:	2807883a 	mov	r3,r5
 8123d28:	113ff22e 	bgeu	r2,r4,8123cf4 <__clzsi2+0x1c>
 8123d2c:	01400604 	movi	r5,24
 8123d30:	2807883a 	mov	r3,r5
 8123d34:	20c6d83a 	srl	r3,r4,r3
 8123d38:	008204f4 	movhi	r2,2067
 8123d3c:	10a23f04 	addi	r2,r2,-30468
 8123d40:	1887883a 	add	r3,r3,r2
 8123d44:	18800003 	ldbu	r2,0(r3)
 8123d48:	00c00804 	movi	r3,32
 8123d4c:	2885883a 	add	r2,r5,r2
 8123d50:	1885c83a 	sub	r2,r3,r2
 8123d54:	f800283a 	ret

08123d58 <__pack_f>:
 8123d58:	20c00017 	ldw	r3,0(r4)
 8123d5c:	01c00044 	movi	r7,1
 8123d60:	21800317 	ldw	r6,12(r4)
 8123d64:	21400117 	ldw	r5,4(r4)
 8123d68:	38c02d2e 	bgeu	r7,r3,8123e20 <__pack_f+0xc8>
 8123d6c:	00800104 	movi	r2,4
 8123d70:	18802826 	beq	r3,r2,8123e14 <__pack_f+0xbc>
 8123d74:	00800084 	movi	r2,2
 8123d78:	18800126 	beq	r3,r2,8123d80 <__pack_f+0x28>
 8123d7c:	3000101e 	bne	r6,zero,8123dc0 <__pack_f+0x68>
 8123d80:	000d883a 	mov	r6,zero
 8123d84:	0007883a 	mov	r3,zero
 8123d88:	19003fcc 	andi	r4,r3,255
 8123d8c:	200895fa 	slli	r4,r4,23
 8123d90:	00c02034 	movhi	r3,128
 8123d94:	18ffffc4 	addi	r3,r3,-1
 8123d98:	30c6703a 	and	r3,r6,r3
 8123d9c:	10a0002c 	andhi	r2,r2,32768
 8123da0:	10c4b03a 	or	r2,r2,r3
 8123da4:	280a97fa 	slli	r5,r5,31
 8123da8:	1104b03a 	or	r2,r2,r4
 8123dac:	00e00034 	movhi	r3,32768
 8123db0:	18ffffc4 	addi	r3,r3,-1
 8123db4:	10c4703a 	and	r2,r2,r3
 8123db8:	1144b03a 	or	r2,r2,r5
 8123dbc:	f800283a 	ret
 8123dc0:	21000217 	ldw	r4,8(r4)
 8123dc4:	00bfe084 	movi	r2,-126
 8123dc8:	20801b16 	blt	r4,r2,8123e38 <__pack_f+0xe0>
 8123dcc:	00801fc4 	movi	r2,127
 8123dd0:	11001016 	blt	r2,r4,8123e14 <__pack_f+0xbc>
 8123dd4:	308e703a 	and	r7,r6,r2
 8123dd8:	2087883a 	add	r3,r4,r2
 8123ddc:	00801004 	movi	r2,64
 8123de0:	38800526 	beq	r7,r2,8123df8 <__pack_f+0xa0>
 8123de4:	31800fc4 	addi	r6,r6,63
 8123de8:	30000716 	blt	r6,zero,8123e08 <__pack_f+0xb0>
 8123dec:	300490ba 	slli	r2,r6,2
 8123df0:	100cd27a 	srli	r6,r2,9
 8123df4:	003fe406 	br	8123d88 <__pack_f+0x30>
 8123df8:	3080200c 	andi	r2,r6,128
 8123dfc:	103ffa26 	beq	r2,zero,8123de8 <__pack_f+0x90>
 8123e00:	31cd883a 	add	r6,r6,r7
 8123e04:	003ff806 	br	8123de8 <__pack_f+0x90>
 8123e08:	300cd07a 	srli	r6,r6,1
 8123e0c:	18c00044 	addi	r3,r3,1
 8123e10:	003ff606 	br	8123dec <__pack_f+0x94>
 8123e14:	000d883a 	mov	r6,zero
 8123e18:	00ffffc4 	movi	r3,-1
 8123e1c:	003fda06 	br	8123d88 <__pack_f+0x30>
 8123e20:	31800434 	orhi	r6,r6,16
 8123e24:	00802034 	movhi	r2,128
 8123e28:	10bfffc4 	addi	r2,r2,-1
 8123e2c:	308c703a 	and	r6,r6,r2
 8123e30:	00ffffc4 	movi	r3,-1
 8123e34:	003fd406 	br	8123d88 <__pack_f+0x30>
 8123e38:	1109c83a 	sub	r4,r2,r4
 8123e3c:	00800644 	movi	r2,25
 8123e40:	11001216 	blt	r2,r4,8123e8c <__pack_f+0x134>
 8123e44:	3904983a 	sll	r2,r7,r4
 8123e48:	3106d83a 	srl	r3,r6,r4
 8123e4c:	10bfffc4 	addi	r2,r2,-1
 8123e50:	3084703a 	and	r2,r6,r2
 8123e54:	1004c03a 	cmpne	r2,r2,zero
 8123e58:	1886b03a 	or	r3,r3,r2
 8123e5c:	19001fcc 	andi	r4,r3,127
 8123e60:	00801004 	movi	r2,64
 8123e64:	20800c26 	beq	r4,r2,8123e98 <__pack_f+0x140>
 8123e68:	18c00fc4 	addi	r3,r3,63
 8123e6c:	00900034 	movhi	r2,16384
 8123e70:	10bfffc4 	addi	r2,r2,-1
 8123e74:	180cd1fa 	srli	r6,r3,7
 8123e78:	10c7803a 	cmpltu	r3,r2,r3
 8123e7c:	00802034 	movhi	r2,128
 8123e80:	10bfffc4 	addi	r2,r2,-1
 8123e84:	308c703a 	and	r6,r6,r2
 8123e88:	003fbf06 	br	8123d88 <__pack_f+0x30>
 8123e8c:	0007883a 	mov	r3,zero
 8123e90:	000d883a 	mov	r6,zero
 8123e94:	003ff906 	br	8123e7c <__pack_f+0x124>
 8123e98:	1880200c 	andi	r2,r3,128
 8123e9c:	10000126 	beq	r2,zero,8123ea4 <__pack_f+0x14c>
 8123ea0:	1907883a 	add	r3,r3,r4
 8123ea4:	180cd1fa 	srli	r6,r3,7
 8123ea8:	00900034 	movhi	r2,16384
 8123eac:	10bfffc4 	addi	r2,r2,-1
 8123eb0:	10c7803a 	cmpltu	r3,r2,r3
 8123eb4:	003ff106 	br	8123e7c <__pack_f+0x124>

08123eb8 <__unpack_f>:
 8123eb8:	21800017 	ldw	r6,0(r4)
 8123ebc:	00c02034 	movhi	r3,128
 8123ec0:	18ffffc4 	addi	r3,r3,-1
 8123ec4:	3004d5fa 	srli	r2,r6,23
 8123ec8:	3008d7fa 	srli	r4,r6,31
 8123ecc:	30ce703a 	and	r7,r6,r3
 8123ed0:	10c03fcc 	andi	r3,r2,255
 8123ed4:	29000115 	stw	r4,4(r5)
 8123ed8:	1800131e 	bne	r3,zero,8123f28 <__unpack_f+0x70>
 8123edc:	38000f26 	beq	r7,zero,8123f1c <__unpack_f+0x64>
 8123ee0:	380691fa 	slli	r3,r7,7
 8123ee4:	01bfe084 	movi	r6,-126
 8123ee8:	008000c4 	movi	r2,3
 8123eec:	01100034 	movhi	r4,16384
 8123ef0:	213fffc4 	addi	r4,r4,-1
 8123ef4:	28800015 	stw	r2,0(r5)
 8123ef8:	29800215 	stw	r6,8(r5)
 8123efc:	20c00536 	bltu	r4,r3,8123f14 <__unpack_f+0x5c>
 8123f00:	3005883a 	mov	r2,r6
 8123f04:	18c7883a 	add	r3,r3,r3
 8123f08:	10bfffc4 	addi	r2,r2,-1
 8123f0c:	20fffd2e 	bgeu	r4,r3,8123f04 <__unpack_f+0x4c>
 8123f10:	28800215 	stw	r2,8(r5)
 8123f14:	28c00315 	stw	r3,12(r5)
 8123f18:	f800283a 	ret
 8123f1c:	00800084 	movi	r2,2
 8123f20:	28800015 	stw	r2,0(r5)
 8123f24:	f800283a 	ret
 8123f28:	00803fc4 	movi	r2,255
 8123f2c:	18800826 	beq	r3,r2,8123f50 <__unpack_f+0x98>
 8123f30:	380491fa 	slli	r2,r7,7
 8123f34:	18ffe044 	addi	r3,r3,-127
 8123f38:	28c00215 	stw	r3,8(r5)
 8123f3c:	10900034 	orhi	r2,r2,16384
 8123f40:	28800315 	stw	r2,12(r5)
 8123f44:	008000c4 	movi	r2,3
 8123f48:	28800015 	stw	r2,0(r5)
 8123f4c:	f800283a 	ret
 8123f50:	3800031e 	bne	r7,zero,8123f60 <__unpack_f+0xa8>
 8123f54:	00800104 	movi	r2,4
 8123f58:	28800015 	stw	r2,0(r5)
 8123f5c:	f800283a 	ret
 8123f60:	3080042c 	andhi	r2,r6,16
 8123f64:	10000426 	beq	r2,zero,8123f78 <__unpack_f+0xc0>
 8123f68:	00800044 	movi	r2,1
 8123f6c:	28800015 	stw	r2,0(r5)
 8123f70:	29c00315 	stw	r7,12(r5)
 8123f74:	f800283a 	ret
 8123f78:	28000015 	stw	zero,0(r5)
 8123f7c:	003ffc06 	br	8123f70 <__unpack_f+0xb8>

08123f80 <__fpcmp_parts_f>:
 8123f80:	21800017 	ldw	r6,0(r4)
 8123f84:	00c00044 	movi	r3,1
 8123f88:	19800a2e 	bgeu	r3,r6,8123fb4 <__fpcmp_parts_f+0x34>
 8123f8c:	28800017 	ldw	r2,0(r5)
 8123f90:	1880082e 	bgeu	r3,r2,8123fb4 <__fpcmp_parts_f+0x34>
 8123f94:	00c00104 	movi	r3,4
 8123f98:	30c01e26 	beq	r6,r3,8124014 <__fpcmp_parts_f+0x94>
 8123f9c:	10c01a26 	beq	r2,r3,8124008 <__fpcmp_parts_f+0x88>
 8123fa0:	00c00084 	movi	r3,2
 8123fa4:	30c00526 	beq	r6,r3,8123fbc <__fpcmp_parts_f+0x3c>
 8123fa8:	10c0071e 	bne	r2,r3,8123fc8 <__fpcmp_parts_f+0x48>
 8123fac:	20800117 	ldw	r2,4(r4)
 8123fb0:	1000091e 	bne	r2,zero,8123fd8 <__fpcmp_parts_f+0x58>
 8123fb4:	00800044 	movi	r2,1
 8123fb8:	f800283a 	ret
 8123fbc:	10c0121e 	bne	r2,r3,8124008 <__fpcmp_parts_f+0x88>
 8123fc0:	0005883a 	mov	r2,zero
 8123fc4:	f800283a 	ret
 8123fc8:	20c00117 	ldw	r3,4(r4)
 8123fcc:	28800117 	ldw	r2,4(r5)
 8123fd0:	18800326 	beq	r3,r2,8123fe0 <__fpcmp_parts_f+0x60>
 8123fd4:	183ff726 	beq	r3,zero,8123fb4 <__fpcmp_parts_f+0x34>
 8123fd8:	00bfffc4 	movi	r2,-1
 8123fdc:	f800283a 	ret
 8123fe0:	21800217 	ldw	r6,8(r4)
 8123fe4:	28800217 	ldw	r2,8(r5)
 8123fe8:	11bffa16 	blt	r2,r6,8123fd4 <__fpcmp_parts_f+0x54>
 8123fec:	30800416 	blt	r6,r2,8124000 <__fpcmp_parts_f+0x80>
 8123ff0:	21000317 	ldw	r4,12(r4)
 8123ff4:	29400317 	ldw	r5,12(r5)
 8123ff8:	293ff636 	bltu	r5,r4,8123fd4 <__fpcmp_parts_f+0x54>
 8123ffc:	217ff02e 	bgeu	r4,r5,8123fc0 <__fpcmp_parts_f+0x40>
 8124000:	183fec1e 	bne	r3,zero,8123fb4 <__fpcmp_parts_f+0x34>
 8124004:	003ff406 	br	8123fd8 <__fpcmp_parts_f+0x58>
 8124008:	28800117 	ldw	r2,4(r5)
 812400c:	103fe91e 	bne	r2,zero,8123fb4 <__fpcmp_parts_f+0x34>
 8124010:	003ff106 	br	8123fd8 <__fpcmp_parts_f+0x58>
 8124014:	11bfe51e 	bne	r2,r6,8123fac <__fpcmp_parts_f+0x2c>
 8124018:	28c00117 	ldw	r3,4(r5)
 812401c:	20800117 	ldw	r2,4(r4)
 8124020:	1885c83a 	sub	r2,r3,r2
 8124024:	f800283a 	ret

08124028 <__make_fp>:
 8124028:	defffb04 	addi	sp,sp,-20
 812402c:	d9000015 	stw	r4,0(sp)
 8124030:	d809883a 	mov	r4,sp
 8124034:	dfc00415 	stw	ra,16(sp)
 8124038:	d9400115 	stw	r5,4(sp)
 812403c:	d9800215 	stw	r6,8(sp)
 8124040:	d9c00315 	stw	r7,12(sp)
 8124044:	8123d580 	call	8123d58 <__pack_f>
 8124048:	dfc00417 	ldw	ra,16(sp)
 812404c:	dec00504 	addi	sp,sp,20
 8124050:	f800283a 	ret

08124054 <__pack_d>:
 8124054:	20c00017 	ldw	r3,0(r4)
 8124058:	defffd04 	addi	sp,sp,-12
 812405c:	dc000015 	stw	r16,0(sp)
 8124060:	dc800215 	stw	r18,8(sp)
 8124064:	dc400115 	stw	r17,4(sp)
 8124068:	00800044 	movi	r2,1
 812406c:	22000317 	ldw	r8,12(r4)
 8124070:	001f883a 	mov	r15,zero
 8124074:	22400417 	ldw	r9,16(r4)
 8124078:	24000117 	ldw	r16,4(r4)
 812407c:	10c0552e 	bgeu	r2,r3,81241d4 <__pack_d+0x180>
 8124080:	00800104 	movi	r2,4
 8124084:	18804f26 	beq	r3,r2,81241c4 <__pack_d+0x170>
 8124088:	00800084 	movi	r2,2
 812408c:	18800226 	beq	r3,r2,8124098 <__pack_d+0x44>
 8124090:	4244b03a 	or	r2,r8,r9
 8124094:	10001a1e 	bne	r2,zero,8124100 <__pack_d+0xac>
 8124098:	000d883a 	mov	r6,zero
 812409c:	000f883a 	mov	r7,zero
 81240a0:	0011883a 	mov	r8,zero
 81240a4:	00800434 	movhi	r2,16
 81240a8:	10bfffc4 	addi	r2,r2,-1
 81240ac:	301d883a 	mov	r14,r6
 81240b0:	3884703a 	and	r2,r7,r2
 81240b4:	400a953a 	slli	r5,r8,20
 81240b8:	79bffc2c 	andhi	r6,r15,65520
 81240bc:	308cb03a 	or	r6,r6,r2
 81240c0:	00e00434 	movhi	r3,32784
 81240c4:	18ffffc4 	addi	r3,r3,-1
 81240c8:	800497fa 	slli	r2,r16,31
 81240cc:	30c6703a 	and	r3,r6,r3
 81240d0:	1946b03a 	or	r3,r3,r5
 81240d4:	01600034 	movhi	r5,32768
 81240d8:	297fffc4 	addi	r5,r5,-1
 81240dc:	194a703a 	and	r5,r3,r5
 81240e0:	288ab03a 	or	r5,r5,r2
 81240e4:	2807883a 	mov	r3,r5
 81240e8:	7005883a 	mov	r2,r14
 81240ec:	dc800217 	ldw	r18,8(sp)
 81240f0:	dc400117 	ldw	r17,4(sp)
 81240f4:	dc000017 	ldw	r16,0(sp)
 81240f8:	dec00304 	addi	sp,sp,12
 81240fc:	f800283a 	ret
 8124100:	21000217 	ldw	r4,8(r4)
 8124104:	00bf0084 	movi	r2,-1022
 8124108:	20803f16 	blt	r4,r2,8124208 <__pack_d+0x1b4>
 812410c:	0080ffc4 	movi	r2,1023
 8124110:	11002c16 	blt	r2,r4,81241c4 <__pack_d+0x170>
 8124114:	00803fc4 	movi	r2,255
 8124118:	408c703a 	and	r6,r8,r2
 812411c:	00802004 	movi	r2,128
 8124120:	0007883a 	mov	r3,zero
 8124124:	000f883a 	mov	r7,zero
 8124128:	2280ffc4 	addi	r10,r4,1023
 812412c:	30801e26 	beq	r6,r2,81241a8 <__pack_d+0x154>
 8124130:	00801fc4 	movi	r2,127
 8124134:	4089883a 	add	r4,r8,r2
 8124138:	220d803a 	cmpltu	r6,r4,r8
 812413c:	324d883a 	add	r6,r6,r9
 8124140:	2011883a 	mov	r8,r4
 8124144:	3013883a 	mov	r9,r6
 8124148:	00880034 	movhi	r2,8192
 812414c:	10bfffc4 	addi	r2,r2,-1
 8124150:	12400d36 	bltu	r2,r9,8124188 <__pack_d+0x134>
 8124154:	4804963a 	slli	r2,r9,24
 8124158:	400cd23a 	srli	r6,r8,8
 812415c:	480ed23a 	srli	r7,r9,8
 8124160:	013fffc4 	movi	r4,-1
 8124164:	118cb03a 	or	r6,r2,r6
 8124168:	01400434 	movhi	r5,16
 812416c:	297fffc4 	addi	r5,r5,-1
 8124170:	3104703a 	and	r2,r6,r4
 8124174:	3946703a 	and	r3,r7,r5
 8124178:	5201ffcc 	andi	r8,r10,2047
 812417c:	100d883a 	mov	r6,r2
 8124180:	180f883a 	mov	r7,r3
 8124184:	003fc706 	br	81240a4 <__pack_d+0x50>
 8124188:	480897fa 	slli	r4,r9,31
 812418c:	4004d07a 	srli	r2,r8,1
 8124190:	4806d07a 	srli	r3,r9,1
 8124194:	52800044 	addi	r10,r10,1
 8124198:	2084b03a 	or	r2,r4,r2
 812419c:	1011883a 	mov	r8,r2
 81241a0:	1813883a 	mov	r9,r3
 81241a4:	003feb06 	br	8124154 <__pack_d+0x100>
 81241a8:	383fe11e 	bne	r7,zero,8124130 <__pack_d+0xdc>
 81241ac:	01004004 	movi	r4,256
 81241b0:	4104703a 	and	r2,r8,r4
 81241b4:	10c4b03a 	or	r2,r2,r3
 81241b8:	103fe326 	beq	r2,zero,8124148 <__pack_d+0xf4>
 81241bc:	3005883a 	mov	r2,r6
 81241c0:	003fdc06 	br	8124134 <__pack_d+0xe0>
 81241c4:	000d883a 	mov	r6,zero
 81241c8:	000f883a 	mov	r7,zero
 81241cc:	0201ffc4 	movi	r8,2047
 81241d0:	003fb406 	br	81240a4 <__pack_d+0x50>
 81241d4:	0005883a 	mov	r2,zero
 81241d8:	00c00234 	movhi	r3,8
 81241dc:	408cb03a 	or	r6,r8,r2
 81241e0:	48ceb03a 	or	r7,r9,r3
 81241e4:	013fffc4 	movi	r4,-1
 81241e8:	01400434 	movhi	r5,16
 81241ec:	297fffc4 	addi	r5,r5,-1
 81241f0:	3104703a 	and	r2,r6,r4
 81241f4:	3946703a 	and	r3,r7,r5
 81241f8:	100d883a 	mov	r6,r2
 81241fc:	180f883a 	mov	r7,r3
 8124200:	0201ffc4 	movi	r8,2047
 8124204:	003fa706 	br	81240a4 <__pack_d+0x50>
 8124208:	1109c83a 	sub	r4,r2,r4
 812420c:	00800e04 	movi	r2,56
 8124210:	11004316 	blt	r2,r4,8124320 <__pack_d+0x2cc>
 8124214:	21fff804 	addi	r7,r4,-32
 8124218:	38004516 	blt	r7,zero,8124330 <__pack_d+0x2dc>
 812421c:	49d8d83a 	srl	r12,r9,r7
 8124220:	001b883a 	mov	r13,zero
 8124224:	0023883a 	mov	r17,zero
 8124228:	01400044 	movi	r5,1
 812422c:	0025883a 	mov	r18,zero
 8124230:	38004716 	blt	r7,zero,8124350 <__pack_d+0x2fc>
 8124234:	29d6983a 	sll	r11,r5,r7
 8124238:	0015883a 	mov	r10,zero
 812423c:	00bfffc4 	movi	r2,-1
 8124240:	5089883a 	add	r4,r10,r2
 8124244:	588b883a 	add	r5,r11,r2
 8124248:	228d803a 	cmpltu	r6,r4,r10
 812424c:	314b883a 	add	r5,r6,r5
 8124250:	4104703a 	and	r2,r8,r4
 8124254:	4946703a 	and	r3,r9,r5
 8124258:	10c4b03a 	or	r2,r2,r3
 812425c:	10000226 	beq	r2,zero,8124268 <__pack_d+0x214>
 8124260:	04400044 	movi	r17,1
 8124264:	0025883a 	mov	r18,zero
 8124268:	00803fc4 	movi	r2,255
 812426c:	644eb03a 	or	r7,r12,r17
 8124270:	3892703a 	and	r9,r7,r2
 8124274:	00802004 	movi	r2,128
 8124278:	6c90b03a 	or	r8,r13,r18
 812427c:	0015883a 	mov	r10,zero
 8124280:	48801626 	beq	r9,r2,81242dc <__pack_d+0x288>
 8124284:	01001fc4 	movi	r4,127
 8124288:	3905883a 	add	r2,r7,r4
 812428c:	11cd803a 	cmpltu	r6,r2,r7
 8124290:	320d883a 	add	r6,r6,r8
 8124294:	100f883a 	mov	r7,r2
 8124298:	00840034 	movhi	r2,4096
 812429c:	10bfffc4 	addi	r2,r2,-1
 81242a0:	3011883a 	mov	r8,r6
 81242a4:	0007883a 	mov	r3,zero
 81242a8:	11801b36 	bltu	r2,r6,8124318 <__pack_d+0x2c4>
 81242ac:	4004963a 	slli	r2,r8,24
 81242b0:	3808d23a 	srli	r4,r7,8
 81242b4:	400ad23a 	srli	r5,r8,8
 81242b8:	1813883a 	mov	r9,r3
 81242bc:	1108b03a 	or	r4,r2,r4
 81242c0:	00bfffc4 	movi	r2,-1
 81242c4:	00c00434 	movhi	r3,16
 81242c8:	18ffffc4 	addi	r3,r3,-1
 81242cc:	208c703a 	and	r6,r4,r2
 81242d0:	28ce703a 	and	r7,r5,r3
 81242d4:	4a01ffcc 	andi	r8,r9,2047
 81242d8:	003f7206 	br	81240a4 <__pack_d+0x50>
 81242dc:	503fe91e 	bne	r10,zero,8124284 <__pack_d+0x230>
 81242e0:	01004004 	movi	r4,256
 81242e4:	3904703a 	and	r2,r7,r4
 81242e8:	0007883a 	mov	r3,zero
 81242ec:	10c4b03a 	or	r2,r2,r3
 81242f0:	10000626 	beq	r2,zero,812430c <__pack_d+0x2b8>
 81242f4:	3a45883a 	add	r2,r7,r9
 81242f8:	11cd803a 	cmpltu	r6,r2,r7
 81242fc:	320d883a 	add	r6,r6,r8
 8124300:	100f883a 	mov	r7,r2
 8124304:	3011883a 	mov	r8,r6
 8124308:	0007883a 	mov	r3,zero
 812430c:	00840034 	movhi	r2,4096
 8124310:	10bfffc4 	addi	r2,r2,-1
 8124314:	123fe52e 	bgeu	r2,r8,81242ac <__pack_d+0x258>
 8124318:	00c00044 	movi	r3,1
 812431c:	003fe306 	br	81242ac <__pack_d+0x258>
 8124320:	0009883a 	mov	r4,zero
 8124324:	0013883a 	mov	r9,zero
 8124328:	000b883a 	mov	r5,zero
 812432c:	003fe406 	br	81242c0 <__pack_d+0x26c>
 8124330:	4a47883a 	add	r3,r9,r9
 8124334:	008007c4 	movi	r2,31
 8124338:	1105c83a 	sub	r2,r2,r4
 812433c:	1886983a 	sll	r3,r3,r2
 8124340:	4118d83a 	srl	r12,r8,r4
 8124344:	491ad83a 	srl	r13,r9,r4
 8124348:	1b18b03a 	or	r12,r3,r12
 812434c:	003fb506 	br	8124224 <__pack_d+0x1d0>
 8124350:	2806d07a 	srli	r3,r5,1
 8124354:	008007c4 	movi	r2,31
 8124358:	1105c83a 	sub	r2,r2,r4
 812435c:	1896d83a 	srl	r11,r3,r2
 8124360:	2914983a 	sll	r10,r5,r4
 8124364:	003fb506 	br	812423c <__pack_d+0x1e8>

08124368 <__unpack_d>:
 8124368:	20c00117 	ldw	r3,4(r4)
 812436c:	22400017 	ldw	r9,0(r4)
 8124370:	00800434 	movhi	r2,16
 8124374:	10bfffc4 	addi	r2,r2,-1
 8124378:	1808d53a 	srli	r4,r3,20
 812437c:	180cd7fa 	srli	r6,r3,31
 8124380:	1894703a 	and	r10,r3,r2
 8124384:	2201ffcc 	andi	r8,r4,2047
 8124388:	281b883a 	mov	r13,r5
 812438c:	4817883a 	mov	r11,r9
 8124390:	29800115 	stw	r6,4(r5)
 8124394:	5019883a 	mov	r12,r10
 8124398:	40001e1e 	bne	r8,zero,8124414 <__unpack_d+0xac>
 812439c:	4a84b03a 	or	r2,r9,r10
 81243a0:	10001926 	beq	r2,zero,8124408 <__unpack_d+0xa0>
 81243a4:	4804d63a 	srli	r2,r9,24
 81243a8:	500c923a 	slli	r6,r10,8
 81243ac:	013f0084 	movi	r4,-1022
 81243b0:	00c40034 	movhi	r3,4096
 81243b4:	18ffffc4 	addi	r3,r3,-1
 81243b8:	118cb03a 	or	r6,r2,r6
 81243bc:	008000c4 	movi	r2,3
 81243c0:	480a923a 	slli	r5,r9,8
 81243c4:	68800015 	stw	r2,0(r13)
 81243c8:	69000215 	stw	r4,8(r13)
 81243cc:	19800b36 	bltu	r3,r6,81243fc <__unpack_d+0x94>
 81243d0:	200f883a 	mov	r7,r4
 81243d4:	1811883a 	mov	r8,r3
 81243d8:	2945883a 	add	r2,r5,r5
 81243dc:	1149803a 	cmpltu	r4,r2,r5
 81243e0:	3187883a 	add	r3,r6,r6
 81243e4:	20c9883a 	add	r4,r4,r3
 81243e8:	100b883a 	mov	r5,r2
 81243ec:	200d883a 	mov	r6,r4
 81243f0:	39ffffc4 	addi	r7,r7,-1
 81243f4:	413ff82e 	bgeu	r8,r4,81243d8 <__unpack_d+0x70>
 81243f8:	69c00215 	stw	r7,8(r13)
 81243fc:	69800415 	stw	r6,16(r13)
 8124400:	69400315 	stw	r5,12(r13)
 8124404:	f800283a 	ret
 8124408:	00800084 	movi	r2,2
 812440c:	28800015 	stw	r2,0(r5)
 8124410:	f800283a 	ret
 8124414:	0081ffc4 	movi	r2,2047
 8124418:	40800f26 	beq	r8,r2,8124458 <__unpack_d+0xf0>
 812441c:	480cd63a 	srli	r6,r9,24
 8124420:	5006923a 	slli	r3,r10,8
 8124424:	4804923a 	slli	r2,r9,8
 8124428:	0009883a 	mov	r4,zero
 812442c:	30c6b03a 	or	r3,r6,r3
 8124430:	01440034 	movhi	r5,4096
 8124434:	110cb03a 	or	r6,r2,r4
 8124438:	423f0044 	addi	r8,r8,-1023
 812443c:	194eb03a 	or	r7,r3,r5
 8124440:	008000c4 	movi	r2,3
 8124444:	69c00415 	stw	r7,16(r13)
 8124448:	6a000215 	stw	r8,8(r13)
 812444c:	68800015 	stw	r2,0(r13)
 8124450:	69800315 	stw	r6,12(r13)
 8124454:	f800283a 	ret
 8124458:	4a84b03a 	or	r2,r9,r10
 812445c:	1000031e 	bne	r2,zero,812446c <__unpack_d+0x104>
 8124460:	00800104 	movi	r2,4
 8124464:	28800015 	stw	r2,0(r5)
 8124468:	f800283a 	ret
 812446c:	0009883a 	mov	r4,zero
 8124470:	01400234 	movhi	r5,8
 8124474:	4904703a 	and	r2,r9,r4
 8124478:	5146703a 	and	r3,r10,r5
 812447c:	10c4b03a 	or	r2,r2,r3
 8124480:	10000526 	beq	r2,zero,8124498 <__unpack_d+0x130>
 8124484:	00800044 	movi	r2,1
 8124488:	68800015 	stw	r2,0(r13)
 812448c:	6b000415 	stw	r12,16(r13)
 8124490:	6ac00315 	stw	r11,12(r13)
 8124494:	f800283a 	ret
 8124498:	68000015 	stw	zero,0(r13)
 812449c:	003ffb06 	br	812448c <__unpack_d+0x124>

081244a0 <__fpcmp_parts_d>:
 81244a0:	21800017 	ldw	r6,0(r4)
 81244a4:	00c00044 	movi	r3,1
 81244a8:	19800a2e 	bgeu	r3,r6,81244d4 <__fpcmp_parts_d+0x34>
 81244ac:	28800017 	ldw	r2,0(r5)
 81244b0:	1880082e 	bgeu	r3,r2,81244d4 <__fpcmp_parts_d+0x34>
 81244b4:	00c00104 	movi	r3,4
 81244b8:	30c02626 	beq	r6,r3,8124554 <__fpcmp_parts_d+0xb4>
 81244bc:	10c02226 	beq	r2,r3,8124548 <__fpcmp_parts_d+0xa8>
 81244c0:	00c00084 	movi	r3,2
 81244c4:	30c00526 	beq	r6,r3,81244dc <__fpcmp_parts_d+0x3c>
 81244c8:	10c0071e 	bne	r2,r3,81244e8 <__fpcmp_parts_d+0x48>
 81244cc:	20800117 	ldw	r2,4(r4)
 81244d0:	1000091e 	bne	r2,zero,81244f8 <__fpcmp_parts_d+0x58>
 81244d4:	00800044 	movi	r2,1
 81244d8:	f800283a 	ret
 81244dc:	10c01a1e 	bne	r2,r3,8124548 <__fpcmp_parts_d+0xa8>
 81244e0:	0005883a 	mov	r2,zero
 81244e4:	f800283a 	ret
 81244e8:	22000117 	ldw	r8,4(r4)
 81244ec:	28800117 	ldw	r2,4(r5)
 81244f0:	40800326 	beq	r8,r2,8124500 <__fpcmp_parts_d+0x60>
 81244f4:	403ff726 	beq	r8,zero,81244d4 <__fpcmp_parts_d+0x34>
 81244f8:	00bfffc4 	movi	r2,-1
 81244fc:	f800283a 	ret
 8124500:	20c00217 	ldw	r3,8(r4)
 8124504:	28800217 	ldw	r2,8(r5)
 8124508:	10fffa16 	blt	r2,r3,81244f4 <__fpcmp_parts_d+0x54>
 812450c:	18800916 	blt	r3,r2,8124534 <__fpcmp_parts_d+0x94>
 8124510:	21c00417 	ldw	r7,16(r4)
 8124514:	28c00417 	ldw	r3,16(r5)
 8124518:	21800317 	ldw	r6,12(r4)
 812451c:	28800317 	ldw	r2,12(r5)
 8124520:	19fff436 	bltu	r3,r7,81244f4 <__fpcmp_parts_d+0x54>
 8124524:	38c00526 	beq	r7,r3,812453c <__fpcmp_parts_d+0x9c>
 8124528:	38c00236 	bltu	r7,r3,8124534 <__fpcmp_parts_d+0x94>
 812452c:	19ffec1e 	bne	r3,r7,81244e0 <__fpcmp_parts_d+0x40>
 8124530:	30bfeb2e 	bgeu	r6,r2,81244e0 <__fpcmp_parts_d+0x40>
 8124534:	403fe71e 	bne	r8,zero,81244d4 <__fpcmp_parts_d+0x34>
 8124538:	003fef06 	br	81244f8 <__fpcmp_parts_d+0x58>
 812453c:	11bffa2e 	bgeu	r2,r6,8124528 <__fpcmp_parts_d+0x88>
 8124540:	403fe426 	beq	r8,zero,81244d4 <__fpcmp_parts_d+0x34>
 8124544:	003fec06 	br	81244f8 <__fpcmp_parts_d+0x58>
 8124548:	28800117 	ldw	r2,4(r5)
 812454c:	103fe11e 	bne	r2,zero,81244d4 <__fpcmp_parts_d+0x34>
 8124550:	003fe906 	br	81244f8 <__fpcmp_parts_d+0x58>
 8124554:	11bfdd1e 	bne	r2,r6,81244cc <__fpcmp_parts_d+0x2c>
 8124558:	28c00117 	ldw	r3,4(r5)
 812455c:	20800117 	ldw	r2,4(r4)
 8124560:	1885c83a 	sub	r2,r3,r2
 8124564:	f800283a 	ret

08124568 <__errno>:
 8124568:	00c204f4 	movhi	r3,2067
 812456c:	18e8ac04 	addi	r3,r3,-23888
 8124570:	18800017 	ldw	r2,0(r3)
 8124574:	f800283a 	ret

08124578 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 8124578:	defffe04 	addi	sp,sp,-8
 812457c:	dfc00115 	stw	ra,4(sp)
 8124580:	df000015 	stw	fp,0(sp)
 8124584:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
 8124588:	010204f4 	movhi	r4,2067
 812458c:	2128bb04 	addi	r4,r4,-23828
 8124590:	014204f4 	movhi	r5,2067
 8124594:	2962d504 	addi	r5,r5,-29868
 8124598:	018204f4 	movhi	r6,2067
 812459c:	31a8bb04 	addi	r6,r6,-23828
 81245a0:	81245f80 	call	81245f8 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
 81245a4:	010204b4 	movhi	r4,2066
 81245a8:	21000804 	addi	r4,r4,32
 81245ac:	014204b4 	movhi	r5,2066
 81245b0:	29400804 	addi	r5,r5,32
 81245b4:	018204b4 	movhi	r6,2066
 81245b8:	31806d04 	addi	r6,r6,436
 81245bc:	81245f80 	call	81245f8 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
 81245c0:	010204f4 	movhi	r4,2067
 81245c4:	21220c04 	addi	r4,r4,-30672
 81245c8:	014204f4 	movhi	r5,2067
 81245cc:	29620c04 	addi	r5,r5,-30672
 81245d0:	018204f4 	movhi	r6,2067
 81245d4:	31a2d504 	addi	r6,r6,-29868
 81245d8:	81245f80 	call	81245f8 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 81245dc:	81274a80 	call	81274a8 <alt_dcache_flush_all>
  alt_icache_flush_all();
 81245e0:	81277880 	call	8127788 <alt_icache_flush_all>
}
 81245e4:	e037883a 	mov	sp,fp
 81245e8:	dfc00117 	ldw	ra,4(sp)
 81245ec:	df000017 	ldw	fp,0(sp)
 81245f0:	dec00204 	addi	sp,sp,8
 81245f4:	f800283a 	ret

081245f8 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
 81245f8:	defffc04 	addi	sp,sp,-16
 81245fc:	df000315 	stw	fp,12(sp)
 8124600:	df000304 	addi	fp,sp,12
 8124604:	e13ffd15 	stw	r4,-12(fp)
 8124608:	e17ffe15 	stw	r5,-8(fp)
 812460c:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
 8124610:	e0fffe17 	ldw	r3,-8(fp)
 8124614:	e0bffd17 	ldw	r2,-12(fp)
 8124618:	18800e26 	beq	r3,r2,8124654 <alt_load_section+0x5c>
  {
    while( to != end )
 812461c:	00000a06 	br	8124648 <alt_load_section+0x50>
    {
      *to++ = *from++;
 8124620:	e0bffd17 	ldw	r2,-12(fp)
 8124624:	10c00017 	ldw	r3,0(r2)
 8124628:	e0bffe17 	ldw	r2,-8(fp)
 812462c:	10c00015 	stw	r3,0(r2)
 8124630:	e0bffe17 	ldw	r2,-8(fp)
 8124634:	10800104 	addi	r2,r2,4
 8124638:	e0bffe15 	stw	r2,-8(fp)
 812463c:	e0bffd17 	ldw	r2,-12(fp)
 8124640:	10800104 	addi	r2,r2,4
 8124644:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
 8124648:	e0fffe17 	ldw	r3,-8(fp)
 812464c:	e0bfff17 	ldw	r2,-4(fp)
 8124650:	18bff31e 	bne	r3,r2,8124620 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
 8124654:	e037883a 	mov	sp,fp
 8124658:	df000017 	ldw	fp,0(sp)
 812465c:	dec00104 	addi	sp,sp,4
 8124660:	f800283a 	ret

08124664 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 8124664:	defffd04 	addi	sp,sp,-12
 8124668:	dfc00215 	stw	ra,8(sp)
 812466c:	df000115 	stw	fp,4(sp)
 8124670:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 8124674:	0009883a 	mov	r4,zero
 8124678:	81246d00 	call	81246d0 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 812467c:	81247040 	call	8124704 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 8124680:	010204f4 	movhi	r4,2067
 8124684:	21228004 	addi	r4,r4,-30208
 8124688:	014204f4 	movhi	r5,2067
 812468c:	29628004 	addi	r5,r5,-30208
 8124690:	018204f4 	movhi	r6,2067
 8124694:	31a28004 	addi	r6,r6,-30208
 8124698:	8127b480 	call	8127b48 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
 812469c:	812762c0 	call	812762c <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
 81246a0:	010204b4 	movhi	r4,2066
 81246a4:	211da404 	addi	r4,r4,30352
 81246a8:	81283100 	call	8128310 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 81246ac:	d1260117 	ldw	r4,-26620(gp)
 81246b0:	d1660217 	ldw	r5,-26616(gp)
 81246b4:	d1a60317 	ldw	r6,-26612(gp)
 81246b8:	81202000 	call	8120200 <main>
 81246bc:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
 81246c0:	01000044 	movi	r4,1
 81246c4:	812734c0 	call	812734c <close>
  exit (result);
 81246c8:	e13fff17 	ldw	r4,-4(fp)
 81246cc:	81283240 	call	8128324 <exit>

081246d0 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 81246d0:	defffd04 	addi	sp,sp,-12
 81246d4:	dfc00215 	stw	ra,8(sp)
 81246d8:	df000115 	stw	fp,4(sp)
 81246dc:	df000104 	addi	fp,sp,4
 81246e0:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_IRQ_INIT ( CPU_3, cpu_3);
 81246e4:	81280880 	call	8128088 <altera_nios2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 81246e8:	00800044 	movi	r2,1
 81246ec:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 81246f0:	e037883a 	mov	sp,fp
 81246f4:	dfc00117 	ldw	ra,4(sp)
 81246f8:	df000017 	ldw	fp,0(sp)
 81246fc:	dec00204 	addi	sp,sp,8
 8124700:	f800283a 	ret

08124704 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 8124704:	defffd04 	addi	sp,sp,-12
 8124708:	dfc00215 	stw	ra,8(sp)
 812470c:	df000115 	stw	fp,4(sp)
 8124710:	df000104 	addi	fp,sp,4
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_3, jtag_uart_3);
 8124714:	010204f4 	movhi	r4,2067
 8124718:	2123df04 	addi	r4,r4,-28804
 812471c:	000b883a 	mov	r5,zero
 8124720:	018000c4 	movi	r6,3
 8124724:	8124afc0 	call	8124afc <altera_avalon_jtag_uart_init>
 8124728:	010204f4 	movhi	r4,2067
 812472c:	2123d504 	addi	r4,r4,-28844
 8124730:	812497c0 	call	812497c <alt_dev_reg>
    ALTERA_AVALON_MAILBOX_INIT ( MAILBOX_0, mailbox_0);
 8124734:	010204f4 	movhi	r4,2067
 8124738:	2127ed04 	addi	r4,r4,-24652
 812473c:	81254600 	call	8125460 <alt_avalon_mailbox_init>
    ALTERA_AVALON_MAILBOX_INIT ( MAILBOX_1, mailbox_1);
 8124740:	010204f4 	movhi	r4,2067
 8124744:	2127fc04 	addi	r4,r4,-24592
 8124748:	81254600 	call	8125460 <alt_avalon_mailbox_init>
    ALTERA_AVALON_MAILBOX_INIT ( MAILBOX_2, mailbox_2);
 812474c:	010204f4 	movhi	r4,2067
 8124750:	21280b04 	addi	r4,r4,-24532
 8124754:	81254600 	call	8125460 <alt_avalon_mailbox_init>
    ALTERA_AVALON_MAILBOX_INIT ( MAILBOX_3, mailbox_3);
 8124758:	010204f4 	movhi	r4,2067
 812475c:	21281a04 	addi	r4,r4,-24472
 8124760:	81254600 	call	8125460 <alt_avalon_mailbox_init>
    ALTERA_AVALON_PERFORMANCE_COUNTER_INIT ( PERFORMANCE_COUNTER_0, performance_counter_0);
 8124764:	0007883a 	mov	r3,zero
 8124768:	00800044 	movi	r2,1
 812476c:	18800035 	stwio	r2,0(r3)
    ALTERA_AVALON_SYSID_INIT ( SYSID, sysid);
    ALTERA_UP_AVALON_VIDEO_PIXEL_BUFFER_DMA_INIT ( VIDEO_PIXEL_BUFFER_DMA_0, video_pixel_buffer_dma_0);
 8124770:	008204f4 	movhi	r2,2067
 8124774:	10a82904 	addi	r2,r2,-24412
 8124778:	10800a17 	ldw	r2,40(r2)
 812477c:	10800017 	ldw	r2,0(r2)
 8124780:	1007883a 	mov	r3,r2
 8124784:	008204f4 	movhi	r2,2067
 8124788:	10a82904 	addi	r2,r2,-24412
 812478c:	10c00b15 	stw	r3,44(r2)
 8124790:	008204f4 	movhi	r2,2067
 8124794:	10a82904 	addi	r2,r2,-24412
 8124798:	10800a17 	ldw	r2,40(r2)
 812479c:	10800104 	addi	r2,r2,4
 81247a0:	10800017 	ldw	r2,0(r2)
 81247a4:	1007883a 	mov	r3,r2
 81247a8:	008204f4 	movhi	r2,2067
 81247ac:	10a82904 	addi	r2,r2,-24412
 81247b0:	10c00c15 	stw	r3,48(r2)
 81247b4:	008204f4 	movhi	r2,2067
 81247b8:	10a82904 	addi	r2,r2,-24412
 81247bc:	10800a17 	ldw	r2,40(r2)
 81247c0:	10800204 	addi	r2,r2,8
 81247c4:	10800017 	ldw	r2,0(r2)
 81247c8:	10ffffcc 	andi	r3,r2,65535
 81247cc:	008204f4 	movhi	r2,2067
 81247d0:	10a82904 	addi	r2,r2,-24412
 81247d4:	10c00f15 	stw	r3,60(r2)
 81247d8:	008204f4 	movhi	r2,2067
 81247dc:	10a82904 	addi	r2,r2,-24412
 81247e0:	10800a17 	ldw	r2,40(r2)
 81247e4:	10800204 	addi	r2,r2,8
 81247e8:	10800017 	ldw	r2,0(r2)
 81247ec:	1005d43a 	srai	r2,r2,16
 81247f0:	10ffffcc 	andi	r3,r2,65535
 81247f4:	008204f4 	movhi	r2,2067
 81247f8:	10a82904 	addi	r2,r2,-24412
 81247fc:	10c01015 	stw	r3,64(r2)
 8124800:	008204f4 	movhi	r2,2067
 8124804:	10a82904 	addi	r2,r2,-24412
 8124808:	10800a17 	ldw	r2,40(r2)
 812480c:	10800304 	addi	r2,r2,12
 8124810:	10800017 	ldw	r2,0(r2)
 8124814:	1005d07a 	srai	r2,r2,1
 8124818:	10c0004c 	andi	r3,r2,1
 812481c:	008204f4 	movhi	r2,2067
 8124820:	10a82904 	addi	r2,r2,-24412
 8124824:	10c00d15 	stw	r3,52(r2)
 8124828:	008204f4 	movhi	r2,2067
 812482c:	10a82904 	addi	r2,r2,-24412
 8124830:	10800a17 	ldw	r2,40(r2)
 8124834:	10800304 	addi	r2,r2,12
 8124838:	10800017 	ldw	r2,0(r2)
 812483c:	1005d13a 	srai	r2,r2,4
 8124840:	10c003cc 	andi	r3,r2,15
 8124844:	008204f4 	movhi	r2,2067
 8124848:	10a82904 	addi	r2,r2,-24412
 812484c:	10c00e15 	stw	r3,56(r2)
 8124850:	008204f4 	movhi	r2,2067
 8124854:	10a82904 	addi	r2,r2,-24412
 8124858:	10800a17 	ldw	r2,40(r2)
 812485c:	10800304 	addi	r2,r2,12
 8124860:	10800017 	ldw	r2,0(r2)
 8124864:	1005d43a 	srai	r2,r2,16
 8124868:	1007883a 	mov	r3,r2
 812486c:	00bfffc4 	movi	r2,-1
 8124870:	1884703a 	and	r2,r3,r2
 8124874:	e0bfff45 	stb	r2,-3(fp)
 8124878:	008204f4 	movhi	r2,2067
 812487c:	10a82904 	addi	r2,r2,-24412
 8124880:	10800a17 	ldw	r2,40(r2)
 8124884:	10800304 	addi	r2,r2,12
 8124888:	10800017 	ldw	r2,0(r2)
 812488c:	1005d63a 	srai	r2,r2,24
 8124890:	1007883a 	mov	r3,r2
 8124894:	00bfffc4 	movi	r2,-1
 8124898:	1884703a 	and	r2,r3,r2
 812489c:	e0bfff05 	stb	r2,-4(fp)
 81248a0:	008204f4 	movhi	r2,2067
 81248a4:	10a82904 	addi	r2,r2,-24412
 81248a8:	10800e17 	ldw	r2,56(r2)
 81248ac:	10800058 	cmpnei	r2,r2,1
 81248b0:	1000041e 	bne	r2,zero,81248c4 <alt_sys_init+0x1c0>
 81248b4:	008204f4 	movhi	r2,2067
 81248b8:	10a82904 	addi	r2,r2,-24412
 81248bc:	10001115 	stw	zero,68(r2)
 81248c0:	00000e06 	br	81248fc <alt_sys_init+0x1f8>
 81248c4:	008204f4 	movhi	r2,2067
 81248c8:	10a82904 	addi	r2,r2,-24412
 81248cc:	10800e17 	ldw	r2,56(r2)
 81248d0:	10800098 	cmpnei	r2,r2,2
 81248d4:	1000051e 	bne	r2,zero,81248ec <alt_sys_init+0x1e8>
 81248d8:	00c204f4 	movhi	r3,2067
 81248dc:	18e82904 	addi	r3,r3,-24412
 81248e0:	00800044 	movi	r2,1
 81248e4:	18801115 	stw	r2,68(r3)
 81248e8:	00000406 	br	81248fc <alt_sys_init+0x1f8>
 81248ec:	00c204f4 	movhi	r3,2067
 81248f0:	18e82904 	addi	r3,r3,-24412
 81248f4:	00800084 	movi	r2,2
 81248f8:	18801115 	stw	r2,68(r3)
 81248fc:	e0ffff43 	ldbu	r3,-3(fp)
 8124900:	00800804 	movi	r2,32
 8124904:	10c7c83a 	sub	r3,r2,r3
 8124908:	00bfffc4 	movi	r2,-1
 812490c:	10c6d83a 	srl	r3,r2,r3
 8124910:	008204f4 	movhi	r2,2067
 8124914:	10a82904 	addi	r2,r2,-24412
 8124918:	10c01215 	stw	r3,72(r2)
 812491c:	e0ffff43 	ldbu	r3,-3(fp)
 8124920:	008204f4 	movhi	r2,2067
 8124924:	10a82904 	addi	r2,r2,-24412
 8124928:	10801117 	ldw	r2,68(r2)
 812492c:	1887883a 	add	r3,r3,r2
 8124930:	008204f4 	movhi	r2,2067
 8124934:	10a82904 	addi	r2,r2,-24412
 8124938:	10c01315 	stw	r3,76(r2)
 812493c:	e0ffff03 	ldbu	r3,-4(fp)
 8124940:	00800804 	movi	r2,32
 8124944:	10c7c83a 	sub	r3,r2,r3
 8124948:	00bfffc4 	movi	r2,-1
 812494c:	10c6d83a 	srl	r3,r2,r3
 8124950:	008204f4 	movhi	r2,2067
 8124954:	10a82904 	addi	r2,r2,-24412
 8124958:	10c01415 	stw	r3,80(r2)
 812495c:	010204f4 	movhi	r4,2067
 8124960:	21282904 	addi	r4,r4,-24412
 8124964:	812497c0 	call	812497c <alt_dev_reg>
}
 8124968:	e037883a 	mov	sp,fp
 812496c:	dfc00117 	ldw	ra,4(sp)
 8124970:	df000017 	ldw	fp,0(sp)
 8124974:	dec00204 	addi	sp,sp,8
 8124978:	f800283a 	ret

0812497c <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
 812497c:	defffd04 	addi	sp,sp,-12
 8124980:	dfc00215 	stw	ra,8(sp)
 8124984:	df000115 	stw	fp,4(sp)
 8124988:	df000104 	addi	fp,sp,4
 812498c:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 8124990:	e13fff17 	ldw	r4,-4(fp)
 8124994:	014204f4 	movhi	r5,2067
 8124998:	2968b404 	addi	r5,r5,-23856
 812499c:	81275180 	call	8127518 <alt_dev_llist_insert>
}
 81249a0:	e037883a 	mov	sp,fp
 81249a4:	dfc00117 	ldw	ra,4(sp)
 81249a8:	df000017 	ldw	fp,0(sp)
 81249ac:	dec00204 	addi	sp,sp,8
 81249b0:	f800283a 	ret

081249b4 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 81249b4:	defffa04 	addi	sp,sp,-24
 81249b8:	dfc00515 	stw	ra,20(sp)
 81249bc:	df000415 	stw	fp,16(sp)
 81249c0:	df000404 	addi	fp,sp,16
 81249c4:	e13ffd15 	stw	r4,-12(fp)
 81249c8:	e17ffe15 	stw	r5,-8(fp)
 81249cc:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 81249d0:	e0bffd17 	ldw	r2,-12(fp)
 81249d4:	10800017 	ldw	r2,0(r2)
 81249d8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 81249dc:	e0bffc17 	ldw	r2,-16(fp)
 81249e0:	11000a04 	addi	r4,r2,40
 81249e4:	e0bffd17 	ldw	r2,-12(fp)
 81249e8:	11c00217 	ldw	r7,8(r2)
 81249ec:	e17ffe17 	ldw	r5,-8(fp)
 81249f0:	e1bfff17 	ldw	r6,-4(fp)
 81249f4:	8124ffc0 	call	8124ffc <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
 81249f8:	e037883a 	mov	sp,fp
 81249fc:	dfc00117 	ldw	ra,4(sp)
 8124a00:	df000017 	ldw	fp,0(sp)
 8124a04:	dec00204 	addi	sp,sp,8
 8124a08:	f800283a 	ret

08124a0c <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 8124a0c:	defffa04 	addi	sp,sp,-24
 8124a10:	dfc00515 	stw	ra,20(sp)
 8124a14:	df000415 	stw	fp,16(sp)
 8124a18:	df000404 	addi	fp,sp,16
 8124a1c:	e13ffd15 	stw	r4,-12(fp)
 8124a20:	e17ffe15 	stw	r5,-8(fp)
 8124a24:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 8124a28:	e0bffd17 	ldw	r2,-12(fp)
 8124a2c:	10800017 	ldw	r2,0(r2)
 8124a30:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 8124a34:	e0bffc17 	ldw	r2,-16(fp)
 8124a38:	11000a04 	addi	r4,r2,40
 8124a3c:	e0bffd17 	ldw	r2,-12(fp)
 8124a40:	11c00217 	ldw	r7,8(r2)
 8124a44:	e17ffe17 	ldw	r5,-8(fp)
 8124a48:	e1bfff17 	ldw	r6,-4(fp)
 8124a4c:	81252200 	call	8125220 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
 8124a50:	e037883a 	mov	sp,fp
 8124a54:	dfc00117 	ldw	ra,4(sp)
 8124a58:	df000017 	ldw	fp,0(sp)
 8124a5c:	dec00204 	addi	sp,sp,8
 8124a60:	f800283a 	ret

08124a64 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
 8124a64:	defffc04 	addi	sp,sp,-16
 8124a68:	dfc00315 	stw	ra,12(sp)
 8124a6c:	df000215 	stw	fp,8(sp)
 8124a70:	df000204 	addi	fp,sp,8
 8124a74:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 8124a78:	e0bfff17 	ldw	r2,-4(fp)
 8124a7c:	10800017 	ldw	r2,0(r2)
 8124a80:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
 8124a84:	e0bffe17 	ldw	r2,-8(fp)
 8124a88:	11000a04 	addi	r4,r2,40
 8124a8c:	e0bfff17 	ldw	r2,-4(fp)
 8124a90:	11400217 	ldw	r5,8(r2)
 8124a94:	8124e940 	call	8124e94 <altera_avalon_jtag_uart_close>
}
 8124a98:	e037883a 	mov	sp,fp
 8124a9c:	dfc00117 	ldw	ra,4(sp)
 8124aa0:	df000017 	ldw	fp,0(sp)
 8124aa4:	dec00204 	addi	sp,sp,8
 8124aa8:	f800283a 	ret

08124aac <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
 8124aac:	defffa04 	addi	sp,sp,-24
 8124ab0:	dfc00515 	stw	ra,20(sp)
 8124ab4:	df000415 	stw	fp,16(sp)
 8124ab8:	df000404 	addi	fp,sp,16
 8124abc:	e13ffd15 	stw	r4,-12(fp)
 8124ac0:	e17ffe15 	stw	r5,-8(fp)
 8124ac4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
 8124ac8:	e0bffd17 	ldw	r2,-12(fp)
 8124acc:	10800017 	ldw	r2,0(r2)
 8124ad0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
 8124ad4:	e0bffc17 	ldw	r2,-16(fp)
 8124ad8:	11000a04 	addi	r4,r2,40
 8124adc:	e17ffe17 	ldw	r5,-8(fp)
 8124ae0:	e1bfff17 	ldw	r6,-4(fp)
 8124ae4:	8124f080 	call	8124f08 <altera_avalon_jtag_uart_ioctl>
}
 8124ae8:	e037883a 	mov	sp,fp
 8124aec:	dfc00117 	ldw	ra,4(sp)
 8124af0:	df000017 	ldw	fp,0(sp)
 8124af4:	dec00204 	addi	sp,sp,8
 8124af8:	f800283a 	ret

08124afc <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
 8124afc:	defffa04 	addi	sp,sp,-24
 8124b00:	dfc00515 	stw	ra,20(sp)
 8124b04:	df000415 	stw	fp,16(sp)
 8124b08:	df000404 	addi	fp,sp,16
 8124b0c:	e13ffd15 	stw	r4,-12(fp)
 8124b10:	e17ffe15 	stw	r5,-8(fp)
 8124b14:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 8124b18:	e0fffd17 	ldw	r3,-12(fp)
 8124b1c:	00800044 	movi	r2,1
 8124b20:	18800815 	stw	r2,32(r3)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
 8124b24:	e0bffd17 	ldw	r2,-12(fp)
 8124b28:	10800017 	ldw	r2,0(r2)
 8124b2c:	11000104 	addi	r4,r2,4
 8124b30:	e0bffd17 	ldw	r2,-12(fp)
 8124b34:	10800817 	ldw	r2,32(r2)
 8124b38:	1007883a 	mov	r3,r2
 8124b3c:	2005883a 	mov	r2,r4
 8124b40:	10c00035 	stwio	r3,0(r2)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
 8124b44:	e13ffe17 	ldw	r4,-8(fp)
 8124b48:	e17fff17 	ldw	r5,-4(fp)
 8124b4c:	d8000015 	stw	zero,0(sp)
 8124b50:	018204b4 	movhi	r6,2066
 8124b54:	3192ef04 	addi	r6,r6,19388
 8124b58:	e1fffd17 	ldw	r7,-12(fp)
 8124b5c:	81277b80 	call	81277b8 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
 8124b60:	e0bffd17 	ldw	r2,-12(fp)
 8124b64:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
 8124b68:	e0bffd17 	ldw	r2,-12(fp)
 8124b6c:	11000204 	addi	r4,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 8124b70:	008204f4 	movhi	r2,2067
 8124b74:	10aead04 	addi	r2,r2,-17740
 8124b78:	10800017 	ldw	r2,0(r2)
 8124b7c:	100b883a 	mov	r5,r2
 8124b80:	018204b4 	movhi	r6,2066
 8124b84:	31937904 	addi	r6,r6,19940
 8124b88:	e1fffd17 	ldw	r7,-12(fp)
 8124b8c:	81271f80 	call	81271f8 <alt_alarm_start>
 8124b90:	1004403a 	cmpge	r2,r2,zero
 8124b94:	1000041e 	bne	r2,zero,8124ba8 <altera_avalon_jtag_uart_init+0xac>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
 8124b98:	e0fffd17 	ldw	r3,-12(fp)
 8124b9c:	00a00034 	movhi	r2,32768
 8124ba0:	10bfffc4 	addi	r2,r2,-1
 8124ba4:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
 8124ba8:	e037883a 	mov	sp,fp
 8124bac:	dfc00117 	ldw	ra,4(sp)
 8124bb0:	df000017 	ldw	fp,0(sp)
 8124bb4:	dec00204 	addi	sp,sp,8
 8124bb8:	f800283a 	ret

08124bbc <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
 8124bbc:	defff804 	addi	sp,sp,-32
 8124bc0:	df000715 	stw	fp,28(sp)
 8124bc4:	df000704 	addi	fp,sp,28
 8124bc8:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
 8124bcc:	e0bfff17 	ldw	r2,-4(fp)
 8124bd0:	e0bffe15 	stw	r2,-8(fp)
  unsigned int base = sp->base;
 8124bd4:	e0bffe17 	ldw	r2,-8(fp)
 8124bd8:	10800017 	ldw	r2,0(r2)
 8124bdc:	e0bffd15 	stw	r2,-12(fp)
 8124be0:	00000006 	br	8124be4 <altera_avalon_jtag_uart_irq+0x28>
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 8124be4:	e0bffd17 	ldw	r2,-12(fp)
 8124be8:	10800104 	addi	r2,r2,4
 8124bec:	10800037 	ldwio	r2,0(r2)
 8124bf0:	e0bffc15 	stw	r2,-16(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
 8124bf4:	e0bffc17 	ldw	r2,-16(fp)
 8124bf8:	1080c00c 	andi	r2,r2,768
 8124bfc:	1005003a 	cmpeq	r2,r2,zero
 8124c00:	1000741e 	bne	r2,zero,8124dd4 <altera_avalon_jtag_uart_irq+0x218>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
 8124c04:	e0bffc17 	ldw	r2,-16(fp)
 8124c08:	1080400c 	andi	r2,r2,256
 8124c0c:	1005003a 	cmpeq	r2,r2,zero
 8124c10:	1000351e 	bne	r2,zero,8124ce8 <altera_avalon_jtag_uart_irq+0x12c>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
 8124c14:	00800074 	movhi	r2,1
 8124c18:	e0bffb15 	stw	r2,-20(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 8124c1c:	e0bffe17 	ldw	r2,-8(fp)
 8124c20:	10800a17 	ldw	r2,40(r2)
 8124c24:	10800044 	addi	r2,r2,1
 8124c28:	1081ffcc 	andi	r2,r2,2047
 8124c2c:	e0bffa15 	stw	r2,-24(fp)
        if (next == sp->rx_out)
 8124c30:	e0bffe17 	ldw	r2,-8(fp)
 8124c34:	10c00b17 	ldw	r3,44(r2)
 8124c38:	e0bffa17 	ldw	r2,-24(fp)
 8124c3c:	18801626 	beq	r3,r2,8124c98 <altera_avalon_jtag_uart_irq+0xdc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 8124c40:	e0bffd17 	ldw	r2,-12(fp)
 8124c44:	10800037 	ldwio	r2,0(r2)
 8124c48:	e0bffb15 	stw	r2,-20(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
 8124c4c:	e0bffb17 	ldw	r2,-20(fp)
 8124c50:	10a0000c 	andi	r2,r2,32768
 8124c54:	1005003a 	cmpeq	r2,r2,zero
 8124c58:	10000f1e 	bne	r2,zero,8124c98 <altera_avalon_jtag_uart_irq+0xdc>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 8124c5c:	e0bffe17 	ldw	r2,-8(fp)
 8124c60:	10c00a17 	ldw	r3,40(r2)
 8124c64:	e0bffb17 	ldw	r2,-20(fp)
 8124c68:	1009883a 	mov	r4,r2
 8124c6c:	e0bffe17 	ldw	r2,-8(fp)
 8124c70:	1885883a 	add	r2,r3,r2
 8124c74:	10800e04 	addi	r2,r2,56
 8124c78:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 8124c7c:	e0bffe17 	ldw	r2,-8(fp)
 8124c80:	10800a17 	ldw	r2,40(r2)
 8124c84:	10800044 	addi	r2,r2,1
 8124c88:	10c1ffcc 	andi	r3,r2,2047
 8124c8c:	e0bffe17 	ldw	r2,-8(fp)
 8124c90:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
 8124c94:	003fe106 	br	8124c1c <altera_avalon_jtag_uart_irq+0x60>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
 8124c98:	e0bffb17 	ldw	r2,-20(fp)
 8124c9c:	10bfffec 	andhi	r2,r2,65535
 8124ca0:	1005003a 	cmpeq	r2,r2,zero
 8124ca4:	1000101e 	bne	r2,zero,8124ce8 <altera_avalon_jtag_uart_irq+0x12c>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 8124ca8:	e0bffe17 	ldw	r2,-8(fp)
 8124cac:	10c00817 	ldw	r3,32(r2)
 8124cb0:	00bfff84 	movi	r2,-2
 8124cb4:	1886703a 	and	r3,r3,r2
 8124cb8:	e0bffe17 	ldw	r2,-8(fp)
 8124cbc:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
 8124cc0:	e0bffd17 	ldw	r2,-12(fp)
 8124cc4:	11000104 	addi	r4,r2,4
 8124cc8:	e0bffe17 	ldw	r2,-8(fp)
 8124ccc:	10800817 	ldw	r2,32(r2)
 8124cd0:	1007883a 	mov	r3,r2
 8124cd4:	2005883a 	mov	r2,r4
 8124cd8:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 8124cdc:	e0bffd17 	ldw	r2,-12(fp)
 8124ce0:	10800104 	addi	r2,r2,4
 8124ce4:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
 8124ce8:	e0bffc17 	ldw	r2,-16(fp)
 8124cec:	1080800c 	andi	r2,r2,512
 8124cf0:	1005003a 	cmpeq	r2,r2,zero
 8124cf4:	103fbb1e 	bne	r2,zero,8124be4 <altera_avalon_jtag_uart_irq+0x28>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
 8124cf8:	e0bffc17 	ldw	r2,-16(fp)
 8124cfc:	10bfffec 	andhi	r2,r2,65535
 8124d00:	1004d43a 	srli	r2,r2,16
 8124d04:	e0bff915 	stw	r2,-28(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
 8124d08:	00001506 	br	8124d60 <altera_avalon_jtag_uart_irq+0x1a4>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
 8124d0c:	e13ffd17 	ldw	r4,-12(fp)
 8124d10:	e0bffe17 	ldw	r2,-8(fp)
 8124d14:	10c00d17 	ldw	r3,52(r2)
 8124d18:	e0bffe17 	ldw	r2,-8(fp)
 8124d1c:	1885883a 	add	r2,r3,r2
 8124d20:	10820e04 	addi	r2,r2,2104
 8124d24:	10800003 	ldbu	r2,0(r2)
 8124d28:	10c03fcc 	andi	r3,r2,255
 8124d2c:	18c0201c 	xori	r3,r3,128
 8124d30:	18ffe004 	addi	r3,r3,-128
 8124d34:	2005883a 	mov	r2,r4
 8124d38:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 8124d3c:	e0bffe17 	ldw	r2,-8(fp)
 8124d40:	10800d17 	ldw	r2,52(r2)
 8124d44:	10800044 	addi	r2,r2,1
 8124d48:	10c1ffcc 	andi	r3,r2,2047
 8124d4c:	e0bffe17 	ldw	r2,-8(fp)
 8124d50:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
 8124d54:	e0bff917 	ldw	r2,-28(fp)
 8124d58:	10bfffc4 	addi	r2,r2,-1
 8124d5c:	e0bff915 	stw	r2,-28(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
 8124d60:	e0bff917 	ldw	r2,-28(fp)
 8124d64:	1005003a 	cmpeq	r2,r2,zero
 8124d68:	1000051e 	bne	r2,zero,8124d80 <altera_avalon_jtag_uart_irq+0x1c4>
 8124d6c:	e0bffe17 	ldw	r2,-8(fp)
 8124d70:	10c00d17 	ldw	r3,52(r2)
 8124d74:	e0bffe17 	ldw	r2,-8(fp)
 8124d78:	10800c17 	ldw	r2,48(r2)
 8124d7c:	18bfe31e 	bne	r3,r2,8124d0c <altera_avalon_jtag_uart_irq+0x150>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
 8124d80:	e0bff917 	ldw	r2,-28(fp)
 8124d84:	1005003a 	cmpeq	r2,r2,zero
 8124d88:	103f961e 	bne	r2,zero,8124be4 <altera_avalon_jtag_uart_irq+0x28>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 8124d8c:	e0bffe17 	ldw	r2,-8(fp)
 8124d90:	10c00817 	ldw	r3,32(r2)
 8124d94:	00bfff44 	movi	r2,-3
 8124d98:	1886703a 	and	r3,r3,r2
 8124d9c:	e0bffe17 	ldw	r2,-8(fp)
 8124da0:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 8124da4:	e0bffe17 	ldw	r2,-8(fp)
 8124da8:	10800017 	ldw	r2,0(r2)
 8124dac:	11000104 	addi	r4,r2,4
 8124db0:	e0bffe17 	ldw	r2,-8(fp)
 8124db4:	10800817 	ldw	r2,32(r2)
 8124db8:	1007883a 	mov	r3,r2
 8124dbc:	2005883a 	mov	r2,r4
 8124dc0:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 8124dc4:	e0bffd17 	ldw	r2,-12(fp)
 8124dc8:	10800104 	addi	r2,r2,4
 8124dcc:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
 8124dd0:	003f8406 	br	8124be4 <altera_avalon_jtag_uart_irq+0x28>
}
 8124dd4:	e037883a 	mov	sp,fp
 8124dd8:	df000017 	ldw	fp,0(sp)
 8124ddc:	dec00104 	addi	sp,sp,4
 8124de0:	f800283a 	ret

08124de4 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
 8124de4:	defffc04 	addi	sp,sp,-16
 8124de8:	df000315 	stw	fp,12(sp)
 8124dec:	df000304 	addi	fp,sp,12
 8124df0:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
 8124df4:	e0bfff17 	ldw	r2,-4(fp)
 8124df8:	e0bffe15 	stw	r2,-8(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
 8124dfc:	e0bffe17 	ldw	r2,-8(fp)
 8124e00:	10800017 	ldw	r2,0(r2)
 8124e04:	10800104 	addi	r2,r2,4
 8124e08:	10800037 	ldwio	r2,0(r2)
 8124e0c:	e0bffd15 	stw	r2,-12(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
 8124e10:	e0bffd17 	ldw	r2,-12(fp)
 8124e14:	1081000c 	andi	r2,r2,1024
 8124e18:	1005003a 	cmpeq	r2,r2,zero
 8124e1c:	10000c1e 	bne	r2,zero,8124e50 <altera_avalon_jtag_uart_timeout+0x6c>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
 8124e20:	e0bffe17 	ldw	r2,-8(fp)
 8124e24:	10800017 	ldw	r2,0(r2)
 8124e28:	11000104 	addi	r4,r2,4
 8124e2c:	e0bffe17 	ldw	r2,-8(fp)
 8124e30:	10800817 	ldw	r2,32(r2)
 8124e34:	10810014 	ori	r2,r2,1024
 8124e38:	1007883a 	mov	r3,r2
 8124e3c:	2005883a 	mov	r2,r4
 8124e40:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
 8124e44:	e0bffe17 	ldw	r2,-8(fp)
 8124e48:	10000915 	stw	zero,36(r2)
 8124e4c:	00000a06 	br	8124e78 <altera_avalon_jtag_uart_timeout+0x94>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
 8124e50:	e0bffe17 	ldw	r2,-8(fp)
 8124e54:	10c00917 	ldw	r3,36(r2)
 8124e58:	00a00034 	movhi	r2,32768
 8124e5c:	10bfff04 	addi	r2,r2,-4
 8124e60:	10c00536 	bltu	r2,r3,8124e78 <altera_avalon_jtag_uart_timeout+0x94>
    sp->host_inactive++;
 8124e64:	e0bffe17 	ldw	r2,-8(fp)
 8124e68:	10800917 	ldw	r2,36(r2)
 8124e6c:	10c00044 	addi	r3,r2,1
 8124e70:	e0bffe17 	ldw	r2,-8(fp)
 8124e74:	10c00915 	stw	r3,36(r2)
 8124e78:	008204f4 	movhi	r2,2067
 8124e7c:	10aead04 	addi	r2,r2,-17740
 8124e80:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
 8124e84:	e037883a 	mov	sp,fp
 8124e88:	df000017 	ldw	fp,0(sp)
 8124e8c:	dec00104 	addi	sp,sp,4
 8124e90:	f800283a 	ret

08124e94 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
 8124e94:	defffc04 	addi	sp,sp,-16
 8124e98:	df000315 	stw	fp,12(sp)
 8124e9c:	df000304 	addi	fp,sp,12
 8124ea0:	e13ffd15 	stw	r4,-12(fp)
 8124ea4:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 8124ea8:	00000706 	br	8124ec8 <altera_avalon_jtag_uart_close+0x34>
    if (flags & O_NONBLOCK) {
 8124eac:	e0bffe17 	ldw	r2,-8(fp)
 8124eb0:	1090000c 	andi	r2,r2,16384
 8124eb4:	1005003a 	cmpeq	r2,r2,zero
 8124eb8:	1000031e 	bne	r2,zero,8124ec8 <altera_avalon_jtag_uart_close+0x34>
      return -EWOULDBLOCK; 
 8124ebc:	00bffd44 	movi	r2,-11
 8124ec0:	e0bfff15 	stw	r2,-4(fp)
 8124ec4:	00000b06 	br	8124ef4 <altera_avalon_jtag_uart_close+0x60>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 8124ec8:	e0bffd17 	ldw	r2,-12(fp)
 8124ecc:	10c00d17 	ldw	r3,52(r2)
 8124ed0:	e0bffd17 	ldw	r2,-12(fp)
 8124ed4:	10800c17 	ldw	r2,48(r2)
 8124ed8:	18800526 	beq	r3,r2,8124ef0 <altera_avalon_jtag_uart_close+0x5c>
 8124edc:	e0bffd17 	ldw	r2,-12(fp)
 8124ee0:	10c00917 	ldw	r3,36(r2)
 8124ee4:	e0bffd17 	ldw	r2,-12(fp)
 8124ee8:	10800117 	ldw	r2,4(r2)
 8124eec:	18bfef36 	bltu	r3,r2,8124eac <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
 8124ef0:	e03fff15 	stw	zero,-4(fp)
 8124ef4:	e0bfff17 	ldw	r2,-4(fp)
}
 8124ef8:	e037883a 	mov	sp,fp
 8124efc:	df000017 	ldw	fp,0(sp)
 8124f00:	dec00104 	addi	sp,sp,4
 8124f04:	f800283a 	ret

08124f08 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
 8124f08:	defff804 	addi	sp,sp,-32
 8124f0c:	df000715 	stw	fp,28(sp)
 8124f10:	df000704 	addi	fp,sp,28
 8124f14:	e13ffb15 	stw	r4,-20(fp)
 8124f18:	e17ffc15 	stw	r5,-16(fp)
 8124f1c:	e1bffd15 	stw	r6,-12(fp)
  int rc = -ENOTTY;
 8124f20:	00bff9c4 	movi	r2,-25
 8124f24:	e0bffa15 	stw	r2,-24(fp)

  switch (req)
 8124f28:	e0bffc17 	ldw	r2,-16(fp)
 8124f2c:	e0bfff15 	stw	r2,-4(fp)
 8124f30:	e0ffff17 	ldw	r3,-4(fp)
 8124f34:	189a8060 	cmpeqi	r2,r3,27137
 8124f38:	1000041e 	bne	r2,zero,8124f4c <altera_avalon_jtag_uart_ioctl+0x44>
 8124f3c:	e0ffff17 	ldw	r3,-4(fp)
 8124f40:	189a80a0 	cmpeqi	r2,r3,27138
 8124f44:	10001b1e 	bne	r2,zero,8124fb4 <altera_avalon_jtag_uart_ioctl+0xac>
 8124f48:	00002706 	br	8124fe8 <altera_avalon_jtag_uart_ioctl+0xe0>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
 8124f4c:	e0bffb17 	ldw	r2,-20(fp)
 8124f50:	10c00117 	ldw	r3,4(r2)
 8124f54:	00a00034 	movhi	r2,32768
 8124f58:	10bfffc4 	addi	r2,r2,-1
 8124f5c:	18802226 	beq	r3,r2,8124fe8 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
 8124f60:	e0bffd17 	ldw	r2,-12(fp)
 8124f64:	10800017 	ldw	r2,0(r2)
 8124f68:	e0bff915 	stw	r2,-28(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
 8124f6c:	e0bff917 	ldw	r2,-28(fp)
 8124f70:	10800090 	cmplti	r2,r2,2
 8124f74:	1000071e 	bne	r2,zero,8124f94 <altera_avalon_jtag_uart_ioctl+0x8c>
 8124f78:	e0fff917 	ldw	r3,-28(fp)
 8124f7c:	00a00034 	movhi	r2,32768
 8124f80:	10bfffc4 	addi	r2,r2,-1
 8124f84:	18800326 	beq	r3,r2,8124f94 <altera_avalon_jtag_uart_ioctl+0x8c>
 8124f88:	e0bff917 	ldw	r2,-28(fp)
 8124f8c:	e0bffe15 	stw	r2,-8(fp)
 8124f90:	00000306 	br	8124fa0 <altera_avalon_jtag_uart_ioctl+0x98>
 8124f94:	00e00034 	movhi	r3,32768
 8124f98:	18ffff84 	addi	r3,r3,-2
 8124f9c:	e0fffe15 	stw	r3,-8(fp)
 8124fa0:	e0bffb17 	ldw	r2,-20(fp)
 8124fa4:	e0fffe17 	ldw	r3,-8(fp)
 8124fa8:	10c00115 	stw	r3,4(r2)
      rc = 0;
 8124fac:	e03ffa15 	stw	zero,-24(fp)
    }
    break;
 8124fb0:	00000d06 	br	8124fe8 <altera_avalon_jtag_uart_ioctl+0xe0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
 8124fb4:	e0bffb17 	ldw	r2,-20(fp)
 8124fb8:	10c00117 	ldw	r3,4(r2)
 8124fbc:	00a00034 	movhi	r2,32768
 8124fc0:	10bfffc4 	addi	r2,r2,-1
 8124fc4:	18800826 	beq	r3,r2,8124fe8 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
 8124fc8:	e13ffd17 	ldw	r4,-12(fp)
 8124fcc:	e0bffb17 	ldw	r2,-20(fp)
 8124fd0:	10c00917 	ldw	r3,36(r2)
 8124fd4:	e0bffb17 	ldw	r2,-20(fp)
 8124fd8:	10800117 	ldw	r2,4(r2)
 8124fdc:	1885803a 	cmpltu	r2,r3,r2
 8124fe0:	20800015 	stw	r2,0(r4)
      rc = 0;
 8124fe4:	e03ffa15 	stw	zero,-24(fp)

  default:
    break;
  }

  return rc;
 8124fe8:	e0bffa17 	ldw	r2,-24(fp)
}
 8124fec:	e037883a 	mov	sp,fp
 8124ff0:	df000017 	ldw	fp,0(sp)
 8124ff4:	dec00104 	addi	sp,sp,4
 8124ff8:	f800283a 	ret

08124ffc <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
 8124ffc:	defff204 	addi	sp,sp,-56
 8125000:	dfc00d15 	stw	ra,52(sp)
 8125004:	df000c15 	stw	fp,48(sp)
 8125008:	df000c04 	addi	fp,sp,48
 812500c:	e13ffb15 	stw	r4,-20(fp)
 8125010:	e17ffc15 	stw	r5,-16(fp)
 8125014:	e1bffd15 	stw	r6,-12(fp)
 8125018:	e1fffe15 	stw	r7,-8(fp)
  char * ptr = buffer;
 812501c:	e0bffc17 	ldw	r2,-16(fp)
 8125020:	e0bffa15 	stw	r2,-24(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 8125024:	00004806 	br	8125148 <altera_avalon_jtag_uart_read+0x14c>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
 8125028:	e0bffb17 	ldw	r2,-20(fp)
 812502c:	10800a17 	ldw	r2,40(r2)
 8125030:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
 8125034:	e0bffb17 	ldw	r2,-20(fp)
 8125038:	10800b17 	ldw	r2,44(r2)
 812503c:	e0bff615 	stw	r2,-40(fp)

      if (in >= out)
 8125040:	e0fff717 	ldw	r3,-36(fp)
 8125044:	e0bff617 	ldw	r2,-40(fp)
 8125048:	18800536 	bltu	r3,r2,8125060 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
 812504c:	e0bff717 	ldw	r2,-36(fp)
 8125050:	e0fff617 	ldw	r3,-40(fp)
 8125054:	10c5c83a 	sub	r2,r2,r3
 8125058:	e0bff815 	stw	r2,-32(fp)
 812505c:	00000406 	br	8125070 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
 8125060:	00820004 	movi	r2,2048
 8125064:	e0fff617 	ldw	r3,-40(fp)
 8125068:	10c5c83a 	sub	r2,r2,r3
 812506c:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
 8125070:	e0bff817 	ldw	r2,-32(fp)
 8125074:	1005003a 	cmpeq	r2,r2,zero
 8125078:	10001f1e 	bne	r2,zero,81250f8 <altera_avalon_jtag_uart_read+0xfc>
        break; /* No more data available */

      if (n > space)
 812507c:	e0fffd17 	ldw	r3,-12(fp)
 8125080:	e0bff817 	ldw	r2,-32(fp)
 8125084:	1880022e 	bgeu	r3,r2,8125090 <altera_avalon_jtag_uart_read+0x94>
        n = space;
 8125088:	e0bffd17 	ldw	r2,-12(fp)
 812508c:	e0bff815 	stw	r2,-32(fp)

      memcpy(ptr, sp->rx_buf + out, n);
 8125090:	e0bffb17 	ldw	r2,-20(fp)
 8125094:	10c00e04 	addi	r3,r2,56
 8125098:	e0bff617 	ldw	r2,-40(fp)
 812509c:	1887883a 	add	r3,r3,r2
 81250a0:	e0bffa17 	ldw	r2,-24(fp)
 81250a4:	1009883a 	mov	r4,r2
 81250a8:	180b883a 	mov	r5,r3
 81250ac:	e1bff817 	ldw	r6,-32(fp)
 81250b0:	81283d00 	call	81283d0 <memcpy>
      ptr   += n;
 81250b4:	e0fff817 	ldw	r3,-32(fp)
 81250b8:	e0bffa17 	ldw	r2,-24(fp)
 81250bc:	10c5883a 	add	r2,r2,r3
 81250c0:	e0bffa15 	stw	r2,-24(fp)
      space -= n;
 81250c4:	e0fffd17 	ldw	r3,-12(fp)
 81250c8:	e0bff817 	ldw	r2,-32(fp)
 81250cc:	1885c83a 	sub	r2,r3,r2
 81250d0:	e0bffd15 	stw	r2,-12(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 81250d4:	e0fff617 	ldw	r3,-40(fp)
 81250d8:	e0bff817 	ldw	r2,-32(fp)
 81250dc:	1885883a 	add	r2,r3,r2
 81250e0:	10c1ffcc 	andi	r3,r2,2047
 81250e4:	e0bffb17 	ldw	r2,-20(fp)
 81250e8:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
 81250ec:	e0bffd17 	ldw	r2,-12(fp)
 81250f0:	10800048 	cmpgei	r2,r2,1
 81250f4:	103fcc1e 	bne	r2,zero,8125028 <altera_avalon_jtag_uart_read+0x2c>

    /* If we read any data then return it */
    if (ptr != buffer)
 81250f8:	e0fffa17 	ldw	r3,-24(fp)
 81250fc:	e0bffc17 	ldw	r2,-16(fp)
 8125100:	1880141e 	bne	r3,r2,8125154 <altera_avalon_jtag_uart_read+0x158>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
 8125104:	e0bffe17 	ldw	r2,-8(fp)
 8125108:	1090000c 	andi	r2,r2,16384
 812510c:	1004c03a 	cmpne	r2,r2,zero
 8125110:	1000101e 	bne	r2,zero,8125154 <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
 8125114:	e0bffb17 	ldw	r2,-20(fp)
 8125118:	10c00a17 	ldw	r3,40(r2)
 812511c:	e0bff717 	ldw	r2,-36(fp)
 8125120:	1880051e 	bne	r3,r2,8125138 <altera_avalon_jtag_uart_read+0x13c>
 8125124:	e0bffb17 	ldw	r2,-20(fp)
 8125128:	10c00917 	ldw	r3,36(r2)
 812512c:	e0bffb17 	ldw	r2,-20(fp)
 8125130:	10800117 	ldw	r2,4(r2)
 8125134:	18bff736 	bltu	r3,r2,8125114 <altera_avalon_jtag_uart_read+0x118>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
 8125138:	e0bffb17 	ldw	r2,-20(fp)
 812513c:	10c00a17 	ldw	r3,40(r2)
 8125140:	e0bff717 	ldw	r2,-36(fp)
 8125144:	18800326 	beq	r3,r2,8125154 <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 8125148:	e0bffd17 	ldw	r2,-12(fp)
 812514c:	10800048 	cmpgei	r2,r2,1
 8125150:	103fb51e 	bne	r2,zero,8125028 <altera_avalon_jtag_uart_read+0x2c>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
 8125154:	e0fffa17 	ldw	r3,-24(fp)
 8125158:	e0bffc17 	ldw	r2,-16(fp)
 812515c:	18801926 	beq	r3,r2,81251c4 <altera_avalon_jtag_uart_read+0x1c8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8125160:	0005303a 	rdctl	r2,status
 8125164:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8125168:	e0fff517 	ldw	r3,-44(fp)
 812516c:	00bfff84 	movi	r2,-2
 8125170:	1884703a 	and	r2,r3,r2
 8125174:	1001703a 	wrctl	status,r2
  
  return context;
 8125178:	e0bff517 	ldw	r2,-44(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
 812517c:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 8125180:	e0bffb17 	ldw	r2,-20(fp)
 8125184:	10800817 	ldw	r2,32(r2)
 8125188:	10c00054 	ori	r3,r2,1
 812518c:	e0bffb17 	ldw	r2,-20(fp)
 8125190:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 8125194:	e0bffb17 	ldw	r2,-20(fp)
 8125198:	10800017 	ldw	r2,0(r2)
 812519c:	11000104 	addi	r4,r2,4
 81251a0:	e0bffb17 	ldw	r2,-20(fp)
 81251a4:	10800817 	ldw	r2,32(r2)
 81251a8:	1007883a 	mov	r3,r2
 81251ac:	2005883a 	mov	r2,r4
 81251b0:	10c00035 	stwio	r3,0(r2)
 81251b4:	e0bff917 	ldw	r2,-28(fp)
 81251b8:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 81251bc:	e0bff417 	ldw	r2,-48(fp)
 81251c0:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
 81251c4:	e0fffa17 	ldw	r3,-24(fp)
 81251c8:	e0bffc17 	ldw	r2,-16(fp)
 81251cc:	18800526 	beq	r3,r2,81251e4 <altera_avalon_jtag_uart_read+0x1e8>
    return ptr - buffer;
 81251d0:	e0fffa17 	ldw	r3,-24(fp)
 81251d4:	e0bffc17 	ldw	r2,-16(fp)
 81251d8:	1887c83a 	sub	r3,r3,r2
 81251dc:	e0ffff15 	stw	r3,-4(fp)
 81251e0:	00000906 	br	8125208 <altera_avalon_jtag_uart_read+0x20c>
  else if (flags & O_NONBLOCK)
 81251e4:	e0bffe17 	ldw	r2,-8(fp)
 81251e8:	1090000c 	andi	r2,r2,16384
 81251ec:	1005003a 	cmpeq	r2,r2,zero
 81251f0:	1000031e 	bne	r2,zero,8125200 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
 81251f4:	00bffd44 	movi	r2,-11
 81251f8:	e0bfff15 	stw	r2,-4(fp)
 81251fc:	00000206 	br	8125208 <altera_avalon_jtag_uart_read+0x20c>
  else
    return -EIO;
 8125200:	00bffec4 	movi	r2,-5
 8125204:	e0bfff15 	stw	r2,-4(fp)
 8125208:	e0bfff17 	ldw	r2,-4(fp)
}
 812520c:	e037883a 	mov	sp,fp
 8125210:	dfc00117 	ldw	ra,4(sp)
 8125214:	df000017 	ldw	fp,0(sp)
 8125218:	dec00204 	addi	sp,sp,8
 812521c:	f800283a 	ret

08125220 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 8125220:	defff204 	addi	sp,sp,-56
 8125224:	dfc00d15 	stw	ra,52(sp)
 8125228:	df000c15 	stw	fp,48(sp)
 812522c:	df000c04 	addi	fp,sp,48
 8125230:	e13ffb15 	stw	r4,-20(fp)
 8125234:	e17ffc15 	stw	r5,-16(fp)
 8125238:	e1bffd15 	stw	r6,-12(fp)
 812523c:	e1fffe15 	stw	r7,-8(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
 8125240:	e03ff915 	stw	zero,-28(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
 8125244:	e0bffc17 	ldw	r2,-16(fp)
 8125248:	e0bff615 	stw	r2,-40(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 812524c:	00003a06 	br	8125338 <altera_avalon_jtag_uart_write+0x118>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
 8125250:	e0bffb17 	ldw	r2,-20(fp)
 8125254:	10800c17 	ldw	r2,48(r2)
 8125258:	e0bffa15 	stw	r2,-24(fp)
      out = sp->tx_out;
 812525c:	e0bffb17 	ldw	r2,-20(fp)
 8125260:	10800d17 	ldw	r2,52(r2)
 8125264:	e0bff915 	stw	r2,-28(fp)

      if (in < out)
 8125268:	e0fffa17 	ldw	r3,-24(fp)
 812526c:	e0bff917 	ldw	r2,-28(fp)
 8125270:	1880062e 	bgeu	r3,r2,812528c <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
 8125274:	e0fff917 	ldw	r3,-28(fp)
 8125278:	e0bffa17 	ldw	r2,-24(fp)
 812527c:	1885c83a 	sub	r2,r3,r2
 8125280:	10bfffc4 	addi	r2,r2,-1
 8125284:	e0bff815 	stw	r2,-32(fp)
 8125288:	00000c06 	br	81252bc <altera_avalon_jtag_uart_write+0x9c>
      else if (out > 0)
 812528c:	e0bff917 	ldw	r2,-28(fp)
 8125290:	1005003a 	cmpeq	r2,r2,zero
 8125294:	1000051e 	bne	r2,zero,81252ac <altera_avalon_jtag_uart_write+0x8c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
 8125298:	00820004 	movi	r2,2048
 812529c:	e0fffa17 	ldw	r3,-24(fp)
 81252a0:	10c5c83a 	sub	r2,r2,r3
 81252a4:	e0bff815 	stw	r2,-32(fp)
 81252a8:	00000406 	br	81252bc <altera_avalon_jtag_uart_write+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
 81252ac:	0081ffc4 	movi	r2,2047
 81252b0:	e0fffa17 	ldw	r3,-24(fp)
 81252b4:	10c5c83a 	sub	r2,r2,r3
 81252b8:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
 81252bc:	e0bff817 	ldw	r2,-32(fp)
 81252c0:	1005003a 	cmpeq	r2,r2,zero
 81252c4:	10001f1e 	bne	r2,zero,8125344 <altera_avalon_jtag_uart_write+0x124>
        break;

      if (n > count)
 81252c8:	e0fffd17 	ldw	r3,-12(fp)
 81252cc:	e0bff817 	ldw	r2,-32(fp)
 81252d0:	1880022e 	bgeu	r3,r2,81252dc <altera_avalon_jtag_uart_write+0xbc>
        n = count;
 81252d4:	e0bffd17 	ldw	r2,-12(fp)
 81252d8:	e0bff815 	stw	r2,-32(fp)

      memcpy(sp->tx_buf + in, ptr, n);
 81252dc:	e0bffb17 	ldw	r2,-20(fp)
 81252e0:	10c20e04 	addi	r3,r2,2104
 81252e4:	e0bffa17 	ldw	r2,-24(fp)
 81252e8:	1885883a 	add	r2,r3,r2
 81252ec:	e0fffc17 	ldw	r3,-16(fp)
 81252f0:	1009883a 	mov	r4,r2
 81252f4:	180b883a 	mov	r5,r3
 81252f8:	e1bff817 	ldw	r6,-32(fp)
 81252fc:	81283d00 	call	81283d0 <memcpy>
      ptr   += n;
 8125300:	e0fff817 	ldw	r3,-32(fp)
 8125304:	e0bffc17 	ldw	r2,-16(fp)
 8125308:	10c5883a 	add	r2,r2,r3
 812530c:	e0bffc15 	stw	r2,-16(fp)
      count -= n;
 8125310:	e0fffd17 	ldw	r3,-12(fp)
 8125314:	e0bff817 	ldw	r2,-32(fp)
 8125318:	1885c83a 	sub	r2,r3,r2
 812531c:	e0bffd15 	stw	r2,-12(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 8125320:	e0fffa17 	ldw	r3,-24(fp)
 8125324:	e0bff817 	ldw	r2,-32(fp)
 8125328:	1885883a 	add	r2,r3,r2
 812532c:	10c1ffcc 	andi	r3,r2,2047
 8125330:	e0bffb17 	ldw	r2,-20(fp)
 8125334:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 8125338:	e0bffd17 	ldw	r2,-12(fp)
 812533c:	10800048 	cmpgei	r2,r2,1
 8125340:	103fc31e 	bne	r2,zero,8125250 <altera_avalon_jtag_uart_write+0x30>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8125344:	0005303a 	rdctl	r2,status
 8125348:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 812534c:	e0fff517 	ldw	r3,-44(fp)
 8125350:	00bfff84 	movi	r2,-2
 8125354:	1884703a 	and	r2,r3,r2
 8125358:	1001703a 	wrctl	status,r2
  
  return context;
 812535c:	e0bff517 	ldw	r2,-44(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
 8125360:	e0bff715 	stw	r2,-36(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 8125364:	e0bffb17 	ldw	r2,-20(fp)
 8125368:	10800817 	ldw	r2,32(r2)
 812536c:	10c00094 	ori	r3,r2,2
 8125370:	e0bffb17 	ldw	r2,-20(fp)
 8125374:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 8125378:	e0bffb17 	ldw	r2,-20(fp)
 812537c:	10800017 	ldw	r2,0(r2)
 8125380:	11000104 	addi	r4,r2,4
 8125384:	e0bffb17 	ldw	r2,-20(fp)
 8125388:	10800817 	ldw	r2,32(r2)
 812538c:	1007883a 	mov	r3,r2
 8125390:	2005883a 	mov	r2,r4
 8125394:	10c00035 	stwio	r3,0(r2)
 8125398:	e0bff717 	ldw	r2,-36(fp)
 812539c:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 81253a0:	e0bff417 	ldw	r2,-48(fp)
 81253a4:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
 81253a8:	e0bffd17 	ldw	r2,-12(fp)
 81253ac:	10800050 	cmplti	r2,r2,1
 81253b0:	1000111e 	bne	r2,zero,81253f8 <altera_avalon_jtag_uart_write+0x1d8>
    {
      if (flags & O_NONBLOCK)
 81253b4:	e0bffe17 	ldw	r2,-8(fp)
 81253b8:	1090000c 	andi	r2,r2,16384
 81253bc:	1004c03a 	cmpne	r2,r2,zero
 81253c0:	1000101e 	bne	r2,zero,8125404 <altera_avalon_jtag_uart_write+0x1e4>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
 81253c4:	e0bffb17 	ldw	r2,-20(fp)
 81253c8:	10c00d17 	ldw	r3,52(r2)
 81253cc:	e0bff917 	ldw	r2,-28(fp)
 81253d0:	1880051e 	bne	r3,r2,81253e8 <altera_avalon_jtag_uart_write+0x1c8>
 81253d4:	e0bffb17 	ldw	r2,-20(fp)
 81253d8:	10c00917 	ldw	r3,36(r2)
 81253dc:	e0bffb17 	ldw	r2,-20(fp)
 81253e0:	10800117 	ldw	r2,4(r2)
 81253e4:	18bff736 	bltu	r3,r2,81253c4 <altera_avalon_jtag_uart_write+0x1a4>
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
 81253e8:	e0bffb17 	ldw	r2,-20(fp)
 81253ec:	10c00d17 	ldw	r3,52(r2)
 81253f0:	e0bff917 	ldw	r2,-28(fp)
 81253f4:	18800326 	beq	r3,r2,8125404 <altera_avalon_jtag_uart_write+0x1e4>
        break;
    }
  }
  while (count > 0);
 81253f8:	e0bffd17 	ldw	r2,-12(fp)
 81253fc:	10800048 	cmpgei	r2,r2,1
 8125400:	103fcd1e 	bne	r2,zero,8125338 <altera_avalon_jtag_uart_write+0x118>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
 8125404:	e0fffc17 	ldw	r3,-16(fp)
 8125408:	e0bff617 	ldw	r2,-40(fp)
 812540c:	18800526 	beq	r3,r2,8125424 <altera_avalon_jtag_uart_write+0x204>
    return ptr - start;
 8125410:	e0fffc17 	ldw	r3,-16(fp)
 8125414:	e0bff617 	ldw	r2,-40(fp)
 8125418:	1887c83a 	sub	r3,r3,r2
 812541c:	e0ffff15 	stw	r3,-4(fp)
 8125420:	00000906 	br	8125448 <altera_avalon_jtag_uart_write+0x228>
  else if (flags & O_NONBLOCK)
 8125424:	e0bffe17 	ldw	r2,-8(fp)
 8125428:	1090000c 	andi	r2,r2,16384
 812542c:	1005003a 	cmpeq	r2,r2,zero
 8125430:	1000031e 	bne	r2,zero,8125440 <altera_avalon_jtag_uart_write+0x220>
    return -EWOULDBLOCK;
 8125434:	00bffd44 	movi	r2,-11
 8125438:	e0bfff15 	stw	r2,-4(fp)
 812543c:	00000206 	br	8125448 <altera_avalon_jtag_uart_write+0x228>
  else
    return -EIO; /* Host not connected */
 8125440:	00bffec4 	movi	r2,-5
 8125444:	e0bfff15 	stw	r2,-4(fp)
 8125448:	e0bfff17 	ldw	r2,-4(fp)
}
 812544c:	e037883a 	mov	sp,fp
 8125450:	dfc00117 	ldw	ra,4(sp)
 8125454:	df000017 	ldw	fp,0(sp)
 8125458:	dec00204 	addi	sp,sp,8
 812545c:	f800283a 	ret

08125460 <alt_avalon_mailbox_init>:

/*
 * Register a Mutex device
 */
int alt_avalon_mailbox_init (alt_mailbox_dev* dev)
{
 8125460:	defffa04 	addi	sp,sp,-24
 8125464:	dfc00515 	stw	ra,20(sp)
 8125468:	df000415 	stw	fp,16(sp)
 812546c:	df000404 	addi	fp,sp,16
 8125470:	e13fff15 	stw	r4,-4(fp)
  int ret_code;
  alt_mutex_dev* write_mutex, *read_mutex;
  extern alt_llist alt_mailbox_list;

  ret_code = alt_avalon_mutex_reg( &dev->write_mutex );
 8125474:	e0bfff17 	ldw	r2,-4(fp)
 8125478:	11000704 	addi	r4,r2,28
 812547c:	81255b80 	call	81255b8 <alt_avalon_mutex_reg>
 8125480:	e0bffe15 	stw	r2,-8(fp)

  if (!ret_code)
 8125484:	e0bffe17 	ldw	r2,-8(fp)
 8125488:	1004c03a 	cmpne	r2,r2,zero
 812548c:	1000041e 	bne	r2,zero,81254a0 <alt_avalon_mailbox_init+0x40>
  {
    ret_code = alt_avalon_mutex_reg( &dev->read_mutex );
 8125490:	e0bfff17 	ldw	r2,-4(fp)
 8125494:	11000b04 	addi	r4,r2,44
 8125498:	81255b80 	call	81255b8 <alt_avalon_mutex_reg>
 812549c:	e0bffe15 	stw	r2,-8(fp)
  }

  if (!ret_code)
 81254a0:	e0bffe17 	ldw	r2,-8(fp)
 81254a4:	1004c03a 	cmpne	r2,r2,zero
 81254a8:	1000041e 	bne	r2,zero,81254bc <alt_avalon_mailbox_init+0x5c>
  {
    ret_code = alt_dev_llist_insert((alt_dev_llist*) dev, &alt_mailbox_list);
 81254ac:	e13fff17 	ldw	r4,-4(fp)
 81254b0:	d1600604 	addi	r5,gp,-32744
 81254b4:	81275180 	call	8127518 <alt_dev_llist_insert>
 81254b8:	e0bffe15 	stw	r2,-8(fp)
  }

  if (!ret_code)
 81254bc:	e0bffe17 	ldw	r2,-8(fp)
 81254c0:	1004c03a 	cmpne	r2,r2,zero
 81254c4:	1000361e 	bne	r2,zero,81255a0 <alt_avalon_mailbox_init+0x140>
  {
    write_mutex = altera_avalon_mutex_open(dev->write_mutex.name);
 81254c8:	e0bfff17 	ldw	r2,-4(fp)
 81254cc:	11000917 	ldw	r4,36(r2)
 81254d0:	8125a040 	call	8125a04 <altera_avalon_mutex_open>
 81254d4:	e0bffd15 	stw	r2,-12(fp)
    if (write_mutex)
 81254d8:	e0bffd17 	ldw	r2,-12(fp)
 81254dc:	1005003a 	cmpeq	r2,r2,zero
 81254e0:	10002f1e 	bne	r2,zero,81255a0 <alt_avalon_mailbox_init+0x140>
    {
      read_mutex = altera_avalon_mutex_open(dev->read_mutex.name);
 81254e4:	e0bfff17 	ldw	r2,-4(fp)
 81254e8:	11000d17 	ldw	r4,52(r2)
 81254ec:	8125a040 	call	8125a04 <altera_avalon_mutex_open>
 81254f0:	e0bffc15 	stw	r2,-16(fp)
      if (read_mutex)
 81254f4:	e0bffc17 	ldw	r2,-16(fp)
 81254f8:	1005003a 	cmpeq	r2,r2,zero
 81254fc:	1000281e 	bne	r2,zero,81255a0 <alt_avalon_mailbox_init+0x140>
      {
        while (altera_avalon_mutex_first_lock(write_mutex))
 8125500:	00000f06 	br	8125540 <alt_avalon_mailbox_init+0xe0>
        {
          if (!altera_avalon_mutex_trylock(write_mutex, 1))
 8125504:	e13ffd17 	ldw	r4,-12(fp)
 8125508:	01400044 	movi	r5,1
 812550c:	8125b1c0 	call	8125b1c <altera_avalon_mutex_trylock>
 8125510:	1004c03a 	cmpne	r2,r2,zero
 8125514:	10000a1e 	bne	r2,zero,8125540 <alt_avalon_mailbox_init+0xe0>
          {
            IOWR((alt_u32)(dev->write_ptr), 0,
 8125518:	e0bfff17 	ldw	r2,-4(fp)
 812551c:	10800317 	ldw	r2,12(r2)
 8125520:	1009883a 	mov	r4,r2
 8125524:	e0bfff17 	ldw	r2,-4(fp)
 8125528:	10800517 	ldw	r2,20(r2)
 812552c:	1007883a 	mov	r3,r2
 8125530:	2005883a 	mov	r2,r4
 8125534:	10c00035 	stwio	r3,0(r2)
              (alt_u32) dev->mailbox_mem_start_ptr);
            altera_avalon_mutex_unlock(write_mutex);
 8125538:	e13ffd17 	ldw	r4,-12(fp)
 812553c:	8125b5c0 	call	8125b5c <altera_avalon_mutex_unlock>
    if (write_mutex)
    {
      read_mutex = altera_avalon_mutex_open(dev->read_mutex.name);
      if (read_mutex)
      {
        while (altera_avalon_mutex_first_lock(write_mutex))
 8125540:	e13ffd17 	ldw	r4,-12(fp)
 8125544:	8125c340 	call	8125c34 <altera_avalon_mutex_first_lock>
 8125548:	1004c03a 	cmpne	r2,r2,zero
 812554c:	103fed1e 	bne	r2,zero,8125504 <alt_avalon_mailbox_init+0xa4>
              (alt_u32) dev->mailbox_mem_start_ptr);
            altera_avalon_mutex_unlock(write_mutex);
          }
        }

        while (altera_avalon_mutex_first_lock(read_mutex))
 8125550:	00000f06 	br	8125590 <alt_avalon_mailbox_init+0x130>
        {
          if (!altera_avalon_mutex_trylock(read_mutex, 1))
 8125554:	e13ffc17 	ldw	r4,-16(fp)
 8125558:	01400044 	movi	r5,1
 812555c:	8125b1c0 	call	8125b1c <altera_avalon_mutex_trylock>
 8125560:	1004c03a 	cmpne	r2,r2,zero
 8125564:	10000a1e 	bne	r2,zero,8125590 <alt_avalon_mailbox_init+0x130>
          {
            IOWR((alt_u32)(dev->read_ptr), 0,
 8125568:	e0bfff17 	ldw	r2,-4(fp)
 812556c:	10800417 	ldw	r2,16(r2)
 8125570:	1009883a 	mov	r4,r2
 8125574:	e0bfff17 	ldw	r2,-4(fp)
 8125578:	10800517 	ldw	r2,20(r2)
 812557c:	1007883a 	mov	r3,r2
 8125580:	2005883a 	mov	r2,r4
 8125584:	10c00035 	stwio	r3,0(r2)
              (alt_u32) dev->mailbox_mem_start_ptr);
            altera_avalon_mutex_unlock(read_mutex);
 8125588:	e13ffc17 	ldw	r4,-16(fp)
 812558c:	8125b5c0 	call	8125b5c <altera_avalon_mutex_unlock>
              (alt_u32) dev->mailbox_mem_start_ptr);
            altera_avalon_mutex_unlock(write_mutex);
          }
        }

        while (altera_avalon_mutex_first_lock(read_mutex))
 8125590:	e13ffc17 	ldw	r4,-16(fp)
 8125594:	8125c340 	call	8125c34 <altera_avalon_mutex_first_lock>
 8125598:	1004c03a 	cmpne	r2,r2,zero
 812559c:	103fed1e 	bne	r2,zero,8125554 <alt_avalon_mailbox_init+0xf4>
          }
        }
      }
    }
  }
  return ret_code;
 81255a0:	e0bffe17 	ldw	r2,-8(fp)
}
 81255a4:	e037883a 	mov	sp,fp
 81255a8:	dfc00117 	ldw	ra,4(sp)
 81255ac:	df000017 	ldw	fp,0(sp)
 81255b0:	dec00204 	addi	sp,sp,8
 81255b4:	f800283a 	ret

081255b8 <alt_avalon_mutex_reg>:
/*
 * Register a Mutex device
 */

static ALT_INLINE int alt_avalon_mutex_reg (alt_mutex_dev* dev)
{
 81255b8:	defffc04 	addi	sp,sp,-16
 81255bc:	dfc00315 	stw	ra,12(sp)
 81255c0:	df000215 	stw	fp,8(sp)
 81255c4:	df000204 	addi	fp,sp,8
 81255c8:	e13fff15 	stw	r4,-4(fp)
 * HAL.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_no_error (void)
{
  return 0;
 81255cc:	0005883a 	mov	r2,zero
  int ret_code;
  extern alt_llist alt_mutex_list;
  ret_code = ALT_SEM_CREATE (&dev->lock, 1);
 81255d0:	e0bffe15 	stw	r2,-8(fp)
  if (!ret_code)
 81255d4:	e0bffe17 	ldw	r2,-8(fp)
 81255d8:	1004c03a 	cmpne	r2,r2,zero
 81255dc:	1000061e 	bne	r2,zero,81255f8 <alt_avalon_mutex_reg+0x40>
  {
    ret_code = alt_dev_llist_insert((alt_dev_llist*) dev, &alt_mutex_list);
 81255e0:	e13fff17 	ldw	r4,-4(fp)
 81255e4:	014204f4 	movhi	r5,2067
 81255e8:	2968b004 	addi	r5,r5,-23872
 81255ec:	81275180 	call	8127518 <alt_dev_llist_insert>
 81255f0:	e0bffe15 	stw	r2,-8(fp)
 81255f4:	00000506 	br	812560c <alt_avalon_mutex_reg+0x54>
  }
  else
  {
    ALT_ERRNO = ENOMEM;
 81255f8:	81256240 	call	8125624 <alt_get_errno>
 81255fc:	00c00304 	movi	r3,12
 8125600:	10c00015 	stw	r3,0(r2)
    ret_code = -ENOMEM;
 8125604:	00bffd04 	movi	r2,-12
 8125608:	e0bffe15 	stw	r2,-8(fp)
  }

  return ret_code;
 812560c:	e0bffe17 	ldw	r2,-8(fp)
}
 8125610:	e037883a 	mov	sp,fp
 8125614:	dfc00117 	ldw	ra,4(sp)
 8125618:	df000017 	ldw	fp,0(sp)
 812561c:	dec00204 	addi	sp,sp,8
 8125620:	f800283a 	ret

08125624 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 8125624:	defffd04 	addi	sp,sp,-12
 8125628:	dfc00215 	stw	ra,8(sp)
 812562c:	df000115 	stw	fp,4(sp)
 8125630:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 8125634:	008204f4 	movhi	r2,2067
 8125638:	10a8b704 	addi	r2,r2,-23844
 812563c:	10800017 	ldw	r2,0(r2)
 8125640:	1005003a 	cmpeq	r2,r2,zero
 8125644:	1000061e 	bne	r2,zero,8125660 <alt_get_errno+0x3c>
 8125648:	008204f4 	movhi	r2,2067
 812564c:	10a8b704 	addi	r2,r2,-23844
 8125650:	10800017 	ldw	r2,0(r2)
 8125654:	103ee83a 	callr	r2
 8125658:	e0bfff15 	stw	r2,-4(fp)
 812565c:	00000306 	br	812566c <alt_get_errno+0x48>
 8125660:	008204f4 	movhi	r2,2067
 8125664:	10aeaf04 	addi	r2,r2,-17732
 8125668:	e0bfff15 	stw	r2,-4(fp)
 812566c:	e0bfff17 	ldw	r2,-4(fp)
}
 8125670:	e037883a 	mov	sp,fp
 8125674:	dfc00117 	ldw	ra,4(sp)
 8125678:	df000017 	ldw	fp,0(sp)
 812567c:	dec00204 	addi	sp,sp,8
 8125680:	f800283a 	ret

08125684 <altera_avalon_mailbox_open>:
 * Search the list of registered mailboxes for one with the supplied name.
 *
 * The return value will be NULL on failure, and non-NULL otherwise.
 */
alt_mailbox_dev* altera_avalon_mailbox_open (const char* name)
{
 8125684:	defffc04 	addi	sp,sp,-16
 8125688:	dfc00315 	stw	ra,12(sp)
 812568c:	df000215 	stw	fp,8(sp)
 8125690:	df000204 	addi	fp,sp,8
 8125694:	e13fff15 	stw	r4,-4(fp)
  alt_mailbox_dev* dev;

  dev = (alt_mailbox_dev*) alt_find_dev (name, &alt_mailbox_list);
 8125698:	e13fff17 	ldw	r4,-4(fp)
 812569c:	d1600604 	addi	r5,gp,-32744
 81256a0:	81276f40 	call	81276f4 <alt_find_dev>
 81256a4:	e0bffe15 	stw	r2,-8(fp)

  if (NULL == dev)
 81256a8:	e0bffe17 	ldw	r2,-8(fp)
 81256ac:	1004c03a 	cmpne	r2,r2,zero
 81256b0:	1000041e 	bne	r2,zero,81256c4 <altera_avalon_mailbox_open+0x40>
  {
    ALT_ERRNO = ENODEV;
 81256b4:	81256240 	call	8125624 <alt_get_errno>
 81256b8:	1007883a 	mov	r3,r2
 81256bc:	008004c4 	movi	r2,19
 81256c0:	18800015 	stw	r2,0(r3)
  }

  return dev;
 81256c4:	e0bffe17 	ldw	r2,-8(fp)

}
 81256c8:	e037883a 	mov	sp,fp
 81256cc:	dfc00117 	ldw	ra,4(sp)
 81256d0:	df000017 	ldw	fp,0(sp)
 81256d4:	dec00204 	addi	sp,sp,8
 81256d8:	f800283a 	ret

081256dc <altera_avalon_mailbox_close>:
 * altera_avalon_mailbox_close - Does nothing at the moment, but included for 
 * completeness
 *
 */
void altera_avalon_mailbox_close (alt_mailbox_dev* dev)
{
 81256dc:	defffe04 	addi	sp,sp,-8
 81256e0:	df000115 	stw	fp,4(sp)
 81256e4:	df000104 	addi	fp,sp,4
 81256e8:	e13fff15 	stw	r4,-4(fp)
  return;
}
 81256ec:	e037883a 	mov	sp,fp
 81256f0:	df000017 	ldw	fp,0(sp)
 81256f4:	dec00104 	addi	sp,sp,4
 81256f8:	f800283a 	ret

081256fc <altera_avalon_mailbox_post>:
 * 
 * Post a message to the mailbox
 *
 */
int altera_avalon_mailbox_post (alt_mailbox_dev* dev, alt_u32 msg)
{
 81256fc:	defff904 	addi	sp,sp,-28
 8125700:	dfc00615 	stw	ra,24(sp)
 8125704:	df000515 	stw	fp,20(sp)
 8125708:	df000504 	addi	fp,sp,20
 812570c:	e13ffe15 	stw	r4,-8(fp)
 8125710:	e17fff15 	stw	r5,-4(fp)
  int ret_code = 0;
 8125714:	e03ffd15 	stw	zero,-12(fp)
  *   Claim the Mutex on the write pointer 
  *
  *   The mutex function takes care of the thread sempahore if running
  *   in a multi-threaded environment
  */
  altera_avalon_mutex_lock( &dev->write_mutex, 1 );
 8125718:	e0bffe17 	ldw	r2,-8(fp)
 812571c:	11000704 	addi	r4,r2,28
 8125720:	01400044 	movi	r5,1
 8125724:	8125adc0 	call	8125adc <altera_avalon_mutex_lock>

  temp = (alt_u32 *) IORD(dev->write_ptr, 0);
 8125728:	e0bffe17 	ldw	r2,-8(fp)
 812572c:	10800317 	ldw	r2,12(r2)
 8125730:	10800037 	ldwio	r2,0(r2)
 8125734:	e0bffc15 	stw	r2,-16(fp)
  next_write = alt_mailbox_increment_ptr(dev, temp);
 8125738:	e13ffe17 	ldw	r4,-8(fp)
 812573c:	e17ffc17 	ldw	r5,-16(fp)
 8125740:	81257b80 	call	81257b8 <alt_mailbox_increment_ptr>
 8125744:	e0bffb15 	stw	r2,-20(fp)

  if (next_write == ((alt_u32 *)IORD(dev->read_ptr, 0)) )
 8125748:	e0bffe17 	ldw	r2,-8(fp)
 812574c:	10800417 	ldw	r2,16(r2)
 8125750:	10800037 	ldwio	r2,0(r2)
 8125754:	1007883a 	mov	r3,r2
 8125758:	e0bffb17 	ldw	r2,-20(fp)
 812575c:	1880061e 	bne	r3,r2,8125778 <altera_avalon_mailbox_post+0x7c>
  {
    ALT_ERRNO = EWOULDBLOCK;
 8125760:	81256240 	call	8125624 <alt_get_errno>
 8125764:	00c002c4 	movi	r3,11
 8125768:	10c00015 	stw	r3,0(r2)
    ret_code = -EWOULDBLOCK;
 812576c:	00bffd44 	movi	r2,-11
 8125770:	e0bffd15 	stw	r2,-12(fp)
 8125774:	00000706 	br	8125794 <altera_avalon_mailbox_post+0x98>
  }
  else
  {
    IOWR(temp, 0, msg);
 8125778:	e0bffc17 	ldw	r2,-16(fp)
 812577c:	e0ffff17 	ldw	r3,-4(fp)
 8125780:	10c00035 	stwio	r3,0(r2)
    IOWR((alt_u32)(dev->write_ptr), 0, (alt_u32)next_write);
 8125784:	e0bffe17 	ldw	r2,-8(fp)
 8125788:	10800317 	ldw	r2,12(r2)
 812578c:	e0fffb17 	ldw	r3,-20(fp)
 8125790:	10c00035 	stwio	r3,0(r2)
  }

  altera_avalon_mutex_unlock( &dev->write_mutex );
 8125794:	e0bffe17 	ldw	r2,-8(fp)
 8125798:	11000704 	addi	r4,r2,28
 812579c:	8125b5c0 	call	8125b5c <altera_avalon_mutex_unlock>

  return ret_code;
 81257a0:	e0bffd17 	ldw	r2,-12(fp)

}
 81257a4:	e037883a 	mov	sp,fp
 81257a8:	dfc00117 	ldw	ra,4(sp)
 81257ac:	df000017 	ldw	fp,0(sp)
 81257b0:	dec00204 	addi	sp,sp,8
 81257b4:	f800283a 	ret

081257b8 <alt_mailbox_increment_ptr>:
 *
 * Increment one of the pointers and if that would take it beyond the end
 * of the shared memory put it at the start
 */
static inline alt_u32* alt_mailbox_increment_ptr(alt_mailbox_dev* dev, alt_u32* ptr)
{
 81257b8:	defffd04 	addi	sp,sp,-12
 81257bc:	df000215 	stw	fp,8(sp)
 81257c0:	df000204 	addi	fp,sp,8
 81257c4:	e13ffe15 	stw	r4,-8(fp)
 81257c8:	e17fff15 	stw	r5,-4(fp)
  ptr += 1;
 81257cc:	e0bfff17 	ldw	r2,-4(fp)
 81257d0:	10800104 	addi	r2,r2,4
 81257d4:	e0bfff15 	stw	r2,-4(fp)

  if (ptr > dev->mailbox_mem_end_ptr)
 81257d8:	e0bffe17 	ldw	r2,-8(fp)
 81257dc:	10c00617 	ldw	r3,24(r2)
 81257e0:	e0bfff17 	ldw	r2,-4(fp)
 81257e4:	1880032e 	bgeu	r3,r2,81257f4 <alt_mailbox_increment_ptr+0x3c>
  {
    ptr = dev->mailbox_mem_start_ptr;
 81257e8:	e0bffe17 	ldw	r2,-8(fp)
 81257ec:	10800517 	ldw	r2,20(r2)
 81257f0:	e0bfff15 	stw	r2,-4(fp)
  }

  return ptr;
 81257f4:	e0bfff17 	ldw	r2,-4(fp)
}
 81257f8:	e037883a 	mov	sp,fp
 81257fc:	df000017 	ldw	fp,0(sp)
 8125800:	dec00104 	addi	sp,sp,4
 8125804:	f800283a 	ret

08125808 <altera_avalon_mailbox_pend>:
 * 
 * Block until a message is available in the mailbox
 *
 */
alt_u32 altera_avalon_mailbox_pend (alt_mailbox_dev* dev)
{
 8125808:	defffa04 	addi	sp,sp,-24
 812580c:	dfc00515 	stw	ra,20(sp)
 8125810:	df000415 	stw	fp,16(sp)
 8125814:	dc000315 	stw	r16,12(sp)
 8125818:	df000304 	addi	fp,sp,12
 812581c:	e13fff15 	stw	r4,-4(fp)
  *   Claim the Mutex on the read pointer
  *
  *   The mutex function takes care of the thread sempahore if running
  *   in a multi-threaded environment
  */
  altera_avalon_mutex_lock( &dev->read_mutex, 1 );
 8125820:	e0bfff17 	ldw	r2,-4(fp)
 8125824:	11000b04 	addi	r4,r2,44
 8125828:	01400044 	movi	r5,1
 812582c:	8125adc0 	call	8125adc <altera_avalon_mutex_lock>

  temp = (alt_u32 *)IORD(dev->read_ptr, 0);
 8125830:	e0bfff17 	ldw	r2,-4(fp)
 8125834:	10800417 	ldw	r2,16(r2)
 8125838:	10800037 	ldwio	r2,0(r2)
 812583c:	e0bffd15 	stw	r2,-12(fp)

  while ( (alt_u32 *)(IORD(dev->write_ptr, 0)) == temp );
 8125840:	e0bfff17 	ldw	r2,-4(fp)
 8125844:	10800317 	ldw	r2,12(r2)
 8125848:	10800037 	ldwio	r2,0(r2)
 812584c:	1007883a 	mov	r3,r2
 8125850:	e0bffd17 	ldw	r2,-12(fp)
 8125854:	18bffa26 	beq	r3,r2,8125840 <altera_avalon_mailbox_pend+0x38>

  msg = IORD(temp, 0);
 8125858:	e0bffd17 	ldw	r2,-12(fp)
 812585c:	10800037 	ldwio	r2,0(r2)
 8125860:	e0bffe15 	stw	r2,-8(fp)

  IOWR( (alt_u32)(dev->read_ptr), 0,
 8125864:	e0bfff17 	ldw	r2,-4(fp)
 8125868:	10800417 	ldw	r2,16(r2)
 812586c:	1021883a 	mov	r16,r2
 8125870:	e13fff17 	ldw	r4,-4(fp)
 8125874:	e17ffd17 	ldw	r5,-12(fp)
 8125878:	81257b80 	call	81257b8 <alt_mailbox_increment_ptr>
 812587c:	1007883a 	mov	r3,r2
 8125880:	8005883a 	mov	r2,r16
 8125884:	10c00035 	stwio	r3,0(r2)
    (alt_u32)(alt_mailbox_increment_ptr(dev, temp)) );

  altera_avalon_mutex_unlock( &dev->read_mutex );
 8125888:	e0bfff17 	ldw	r2,-4(fp)
 812588c:	11000b04 	addi	r4,r2,44
 8125890:	8125b5c0 	call	8125b5c <altera_avalon_mutex_unlock>

  return msg;
 8125894:	e0bffe17 	ldw	r2,-8(fp)

}
 8125898:	e037883a 	mov	sp,fp
 812589c:	dfc00217 	ldw	ra,8(sp)
 81258a0:	df000117 	ldw	fp,4(sp)
 81258a4:	dc000017 	ldw	r16,0(sp)
 81258a8:	dec00304 	addi	sp,sp,12
 81258ac:	f800283a 	ret

081258b0 <altera_avalon_mailbox_get>:
 * If a message is available in the mailbox return it otherwise return NULL
 * i.e. this is Non-Blocking
 *
 */
alt_u32 altera_avalon_mailbox_get (alt_mailbox_dev* dev, int* err)
{
 81258b0:	defff904 	addi	sp,sp,-28
 81258b4:	dfc00615 	stw	ra,24(sp)
 81258b8:	df000515 	stw	fp,20(sp)
 81258bc:	dc000415 	stw	r16,16(sp)
 81258c0:	df000404 	addi	fp,sp,16
 81258c4:	e13ffe15 	stw	r4,-8(fp)
 81258c8:	e17fff15 	stw	r5,-4(fp)
  alt_u32 msg;
  alt_u32* temp;
  *err = 0;
 81258cc:	e0bfff17 	ldw	r2,-4(fp)
 81258d0:	10000015 	stw	zero,0(r2)
  *   Claim the Mutex on the read pointer 
  *
  *   The mutex function takes care of the thread sempahore if running
  *   in a multi-threaded environment
  */
  altera_avalon_mutex_lock( &dev->read_mutex, 1 );
 81258d4:	e0bffe17 	ldw	r2,-8(fp)
 81258d8:	11000b04 	addi	r4,r2,44
 81258dc:	01400044 	movi	r5,1
 81258e0:	8125adc0 	call	8125adc <altera_avalon_mutex_lock>

  temp = (alt_u32 *)IORD(dev->read_ptr, 0);
 81258e4:	e0bffe17 	ldw	r2,-8(fp)
 81258e8:	10800417 	ldw	r2,16(r2)
 81258ec:	10800037 	ldwio	r2,0(r2)
 81258f0:	e0bffc15 	stw	r2,-16(fp)

  if ( (alt_u32 *)(IORD(dev->write_ptr, 0)) == temp )
 81258f4:	e0bffe17 	ldw	r2,-8(fp)
 81258f8:	10800317 	ldw	r2,12(r2)
 81258fc:	10800037 	ldwio	r2,0(r2)
 8125900:	1007883a 	mov	r3,r2
 8125904:	e0bffc17 	ldw	r2,-16(fp)
 8125908:	1880091e 	bne	r3,r2,8125930 <altera_avalon_mailbox_get+0x80>
  {
    *err = -EWOULDBLOCK;
 812590c:	e0ffff17 	ldw	r3,-4(fp)
 8125910:	00bffd44 	movi	r2,-11
 8125914:	18800015 	stw	r2,0(r3)
    ALT_ERRNO = EWOULDBLOCK;
 8125918:	81256240 	call	8125624 <alt_get_errno>
 812591c:	1007883a 	mov	r3,r2
 8125920:	008002c4 	movi	r2,11
 8125924:	18800015 	stw	r2,0(r3)
    msg = 0;
 8125928:	e03ffd15 	stw	zero,-12(fp)
 812592c:	00000c06 	br	8125960 <altera_avalon_mailbox_get+0xb0>
  }
  else
  {
    msg = IORD(temp, 0);
 8125930:	e0bffc17 	ldw	r2,-16(fp)
 8125934:	10800037 	ldwio	r2,0(r2)
 8125938:	e0bffd15 	stw	r2,-12(fp)
    IOWR(dev->read_ptr, 0,
 812593c:	e0bffe17 	ldw	r2,-8(fp)
 8125940:	10800417 	ldw	r2,16(r2)
 8125944:	1021883a 	mov	r16,r2
 8125948:	e13ffe17 	ldw	r4,-8(fp)
 812594c:	e17ffc17 	ldw	r5,-16(fp)
 8125950:	81257b80 	call	81257b8 <alt_mailbox_increment_ptr>
 8125954:	1007883a 	mov	r3,r2
 8125958:	8005883a 	mov	r2,r16
 812595c:	10c00035 	stwio	r3,0(r2)
      (alt_u32)(alt_mailbox_increment_ptr(dev, temp)) );
  }

  altera_avalon_mutex_unlock( &dev->read_mutex );
 8125960:	e0bffe17 	ldw	r2,-8(fp)
 8125964:	11000b04 	addi	r4,r2,44
 8125968:	8125b5c0 	call	8125b5c <altera_avalon_mutex_unlock>

  return msg;
 812596c:	e0bffd17 	ldw	r2,-12(fp)

}
 8125970:	e037883a 	mov	sp,fp
 8125974:	dfc00217 	ldw	ra,8(sp)
 8125978:	df000117 	ldw	fp,4(sp)
 812597c:	dc000017 	ldw	r16,0(sp)
 8125980:	dec00304 	addi	sp,sp,12
 8125984:	f800283a 	ret

08125988 <alt_mutex_trylock>:
 *
 * returns 0 on success -1 otherwise
 *
 */
static int alt_mutex_trylock( alt_mutex_dev* dev, alt_u32 value )
{
 8125988:	defff904 	addi	sp,sp,-28
 812598c:	df000615 	stw	fp,24(sp)
 8125990:	df000604 	addi	fp,sp,24
 8125994:	e13ffe15 	stw	r4,-8(fp)
 8125998:	e17fff15 	stw	r5,-4(fp)
  alt_u32 id, data, check;
  int ret_code = -1;
 812599c:	00bfffc4 	movi	r2,-1
 81259a0:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_READ_CPUID(id);
 81259a4:	0005317a 	rdctl	r2,cpuid
 81259a8:	e0bffd15 	stw	r2,-12(fp)

  /* the data we want the mutex to hold */
  data = (id << ALTERA_AVALON_MUTEX_MUTEX_OWNER_OFST) | value;
 81259ac:	e0bffd17 	ldw	r2,-12(fp)
 81259b0:	1006943a 	slli	r3,r2,16
 81259b4:	e0bfff17 	ldw	r2,-4(fp)
 81259b8:	1884b03a 	or	r2,r3,r2
 81259bc:	e0bffc15 	stw	r2,-16(fp)

  /* attempt to write to the mutex */
  IOWR_ALTERA_AVALON_MUTEX_MUTEX(dev->mutex_base, data);
 81259c0:	e0bffe17 	ldw	r2,-8(fp)
 81259c4:	10800317 	ldw	r2,12(r2)
 81259c8:	e0fffc17 	ldw	r3,-16(fp)
 81259cc:	10c00035 	stwio	r3,0(r2)
  
  check = IORD_ALTERA_AVALON_MUTEX_MUTEX(dev->mutex_base);
 81259d0:	e0bffe17 	ldw	r2,-8(fp)
 81259d4:	10800317 	ldw	r2,12(r2)
 81259d8:	10800037 	ldwio	r2,0(r2)
 81259dc:	e0bffb15 	stw	r2,-20(fp)

  if ( check == data)
 81259e0:	e0fffb17 	ldw	r3,-20(fp)
 81259e4:	e0bffc17 	ldw	r2,-16(fp)
 81259e8:	1880011e 	bne	r3,r2,81259f0 <alt_mutex_trylock+0x68>
  {
    ret_code = 0;
 81259ec:	e03ffa15 	stw	zero,-24(fp)
  }

  return ret_code;
 81259f0:	e0bffa17 	ldw	r2,-24(fp)
}
 81259f4:	e037883a 	mov	sp,fp
 81259f8:	df000017 	ldw	fp,0(sp)
 81259fc:	dec00104 	addi	sp,sp,4
 8125a00:	f800283a 	ret

08125a04 <altera_avalon_mutex_open>:
 * Search the list of registered mutexes for one with the supplied name.
 *
 * The return value will be NULL on failure, and non-NULL otherwise.
 */
alt_mutex_dev* altera_avalon_mutex_open (const char* name)
{
 8125a04:	defffc04 	addi	sp,sp,-16
 8125a08:	dfc00315 	stw	ra,12(sp)
 8125a0c:	df000215 	stw	fp,8(sp)
 8125a10:	df000204 	addi	fp,sp,8
 8125a14:	e13fff15 	stw	r4,-4(fp)
  alt_mutex_dev* dev;

  dev = (alt_mutex_dev*) alt_find_dev (name, &alt_mutex_list);
 8125a18:	e13fff17 	ldw	r4,-4(fp)
 8125a1c:	d1600804 	addi	r5,gp,-32736
 8125a20:	81276f40 	call	81276f4 <alt_find_dev>
 8125a24:	e0bffe15 	stw	r2,-8(fp)

  if (NULL == dev)
 8125a28:	e0bffe17 	ldw	r2,-8(fp)
 8125a2c:	1004c03a 	cmpne	r2,r2,zero
 8125a30:	1000041e 	bne	r2,zero,8125a44 <altera_avalon_mutex_open+0x40>
  {
    ALT_ERRNO = ENODEV;
 8125a34:	8125a5c0 	call	8125a5c <alt_get_errno>
 8125a38:	1007883a 	mov	r3,r2
 8125a3c:	008004c4 	movi	r2,19
 8125a40:	18800015 	stw	r2,0(r3)
  }

  return dev;
 8125a44:	e0bffe17 	ldw	r2,-8(fp)
}
 8125a48:	e037883a 	mov	sp,fp
 8125a4c:	dfc00117 	ldw	ra,4(sp)
 8125a50:	df000017 	ldw	fp,0(sp)
 8125a54:	dec00204 	addi	sp,sp,8
 8125a58:	f800283a 	ret

08125a5c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 8125a5c:	defffd04 	addi	sp,sp,-12
 8125a60:	dfc00215 	stw	ra,8(sp)
 8125a64:	df000115 	stw	fp,4(sp)
 8125a68:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 8125a6c:	008204f4 	movhi	r2,2067
 8125a70:	10a8b704 	addi	r2,r2,-23844
 8125a74:	10800017 	ldw	r2,0(r2)
 8125a78:	1005003a 	cmpeq	r2,r2,zero
 8125a7c:	1000061e 	bne	r2,zero,8125a98 <alt_get_errno+0x3c>
 8125a80:	008204f4 	movhi	r2,2067
 8125a84:	10a8b704 	addi	r2,r2,-23844
 8125a88:	10800017 	ldw	r2,0(r2)
 8125a8c:	103ee83a 	callr	r2
 8125a90:	e0bfff15 	stw	r2,-4(fp)
 8125a94:	00000306 	br	8125aa4 <alt_get_errno+0x48>
 8125a98:	008204f4 	movhi	r2,2067
 8125a9c:	10aeaf04 	addi	r2,r2,-17732
 8125aa0:	e0bfff15 	stw	r2,-4(fp)
 8125aa4:	e0bfff17 	ldw	r2,-4(fp)
}
 8125aa8:	e037883a 	mov	sp,fp
 8125aac:	dfc00117 	ldw	ra,4(sp)
 8125ab0:	df000017 	ldw	fp,0(sp)
 8125ab4:	dec00204 	addi	sp,sp,8
 8125ab8:	f800283a 	ret

08125abc <altera_avalon_mutex_close>:
 * altera_avalon_mutex_close - Does nothing at the moment, but included for 
 * completeness
 *
 */
void altera_avalon_mutex_close (alt_mutex_dev* dev)
{
 8125abc:	defffe04 	addi	sp,sp,-8
 8125ac0:	df000115 	stw	fp,4(sp)
 8125ac4:	df000104 	addi	fp,sp,4
 8125ac8:	e13fff15 	stw	r4,-4(fp)
  return;
}
 8125acc:	e037883a 	mov	sp,fp
 8125ad0:	df000017 	ldw	fp,0(sp)
 8125ad4:	dec00104 	addi	sp,sp,4
 8125ad8:	f800283a 	ret

08125adc <altera_avalon_mutex_lock>:
/*
 * altera_avalon_mutex_lock - Lock the hardware mutex
 *
 */
void altera_avalon_mutex_lock( alt_mutex_dev* dev, alt_u32 value )
{
 8125adc:	defffc04 	addi	sp,sp,-16
 8125ae0:	dfc00315 	stw	ra,12(sp)
 8125ae4:	df000215 	stw	fp,8(sp)
 8125ae8:	df000204 	addi	fp,sp,8
 8125aec:	e13ffe15 	stw	r4,-8(fp)
 8125af0:	e17fff15 	stw	r5,-4(fp)
   * semaphore. This ensures that reading from the device is thread-safe.
   */

  ALT_SEM_PEND (dev->lock, 0);

  while ( alt_mutex_trylock( dev, value ) != 0);
 8125af4:	e13ffe17 	ldw	r4,-8(fp)
 8125af8:	e17fff17 	ldw	r5,-4(fp)
 8125afc:	81259880 	call	8125988 <alt_mutex_trylock>
 8125b00:	1004c03a 	cmpne	r2,r2,zero
 8125b04:	103ffb1e 	bne	r2,zero,8125af4 <altera_avalon_mutex_lock+0x18>
}
 8125b08:	e037883a 	mov	sp,fp
 8125b0c:	dfc00117 	ldw	ra,4(sp)
 8125b10:	df000017 	ldw	fp,0(sp)
 8125b14:	dec00204 	addi	sp,sp,8
 8125b18:	f800283a 	ret

08125b1c <altera_avalon_mutex_trylock>:
 *
 * returns 0 on success -1 otherwise
 *
 */
int altera_avalon_mutex_trylock( alt_mutex_dev* dev, alt_u32 value )
{
 8125b1c:	defffb04 	addi	sp,sp,-20
 8125b20:	dfc00415 	stw	ra,16(sp)
 8125b24:	df000315 	stw	fp,12(sp)
 8125b28:	df000304 	addi	fp,sp,12
 8125b2c:	e13ffe15 	stw	r4,-8(fp)
 8125b30:	e17fff15 	stw	r5,-4(fp)
  int ret_code;

  ALT_SEM_PEND (dev->lock, 0);

  ret_code = alt_mutex_trylock( dev, value);
 8125b34:	e13ffe17 	ldw	r4,-8(fp)
 8125b38:	e17fff17 	ldw	r5,-4(fp)
 8125b3c:	81259880 	call	8125988 <alt_mutex_trylock>
 8125b40:	e0bffd15 	stw	r2,-12(fp)
  if (ret_code)
  {
    ALT_SEM_POST (dev->lock);
  }

  return ret_code;
 8125b44:	e0bffd17 	ldw	r2,-12(fp)
}
 8125b48:	e037883a 	mov	sp,fp
 8125b4c:	dfc00117 	ldw	ra,4(sp)
 8125b50:	df000017 	ldw	fp,0(sp)
 8125b54:	dec00204 	addi	sp,sp,8
 8125b58:	f800283a 	ret

08125b5c <altera_avalon_mutex_unlock>:
 * This function does not check that you own the Mutex if you try to release
 * a Mutex you do not own the behaviour is undefined
 *
 */
void altera_avalon_mutex_unlock( alt_mutex_dev* dev )
{
 8125b5c:	defffd04 	addi	sp,sp,-12
 8125b60:	df000215 	stw	fp,8(sp)
 8125b64:	df000204 	addi	fp,sp,8
 8125b68:	e13fff15 	stw	r4,-4(fp)
  alt_u32 id;
  NIOS2_READ_CPUID(id);
 8125b6c:	0005317a 	rdctl	r2,cpuid
 8125b70:	e0bffe15 	stw	r2,-8(fp)

  /*
  * This Mutex has been claimed and released since Reset so clear the Reset bit
  * This MUST happen before we release the MUTEX
  */
  IOWR_ALTERA_AVALON_MUTEX_RESET(dev->mutex_base, 
 8125b74:	e0bfff17 	ldw	r2,-4(fp)
 8125b78:	10800317 	ldw	r2,12(r2)
 8125b7c:	10800104 	addi	r2,r2,4
 8125b80:	1007883a 	mov	r3,r2
 8125b84:	00800044 	movi	r2,1
 8125b88:	18800035 	stwio	r2,0(r3)
                                  ALTERA_AVALON_MUTEX_RESET_RESET_MSK);
  IOWR_ALTERA_AVALON_MUTEX_MUTEX(dev->mutex_base, 
 8125b8c:	e0bfff17 	ldw	r2,-4(fp)
 8125b90:	11000317 	ldw	r4,12(r2)
 8125b94:	e0bffe17 	ldw	r2,-8(fp)
 8125b98:	1004943a 	slli	r2,r2,16
 8125b9c:	1007883a 	mov	r3,r2
 8125ba0:	2005883a 	mov	r2,r4
 8125ba4:	10c00035 	stwio	r3,0(r2)

  /*
  * Now that access to the hardware Mutex is complete, release the thread lock
  */
  ALT_SEM_POST (dev->lock);
}
 8125ba8:	e037883a 	mov	sp,fp
 8125bac:	df000017 	ldw	fp,0(sp)
 8125bb0:	dec00104 	addi	sp,sp,4
 8125bb4:	f800283a 	ret

08125bb8 <altera_avalon_mutex_is_mine>:
 * altera_avalon_mutex_is_mine - Do I own the Mutex?
 *
 *  returns non zero if the mutex is owned by this CPU
 */
int altera_avalon_mutex_is_mine( alt_mutex_dev* dev )
{
 8125bb8:	defff904 	addi	sp,sp,-28
 8125bbc:	df000615 	stw	fp,24(sp)
 8125bc0:	df000604 	addi	fp,sp,24
 8125bc4:	e13fff15 	stw	r4,-4(fp)
  alt_u32 id, data, owner, value;
  int ret_code = 0;
 8125bc8:	e03ffa15 	stw	zero,-24(fp)

  NIOS2_READ_CPUID(id);
 8125bcc:	0005317a 	rdctl	r2,cpuid
 8125bd0:	e0bffe15 	stw	r2,-8(fp)

  /* retrieve the contents of the mutex */
  data = IORD_ALTERA_AVALON_MUTEX_MUTEX(dev->mutex_base);
 8125bd4:	e0bfff17 	ldw	r2,-4(fp)
 8125bd8:	10800317 	ldw	r2,12(r2)
 8125bdc:	10800037 	ldwio	r2,0(r2)
 8125be0:	e0bffd15 	stw	r2,-12(fp)
  owner = (data & ALTERA_AVALON_MUTEX_MUTEX_OWNER_MSK) >> 
 8125be4:	e0bffd17 	ldw	r2,-12(fp)
 8125be8:	10bfffec 	andhi	r2,r2,65535
 8125bec:	1004d43a 	srli	r2,r2,16
 8125bf0:	e0bffc15 	stw	r2,-16(fp)
              ALTERA_AVALON_MUTEX_MUTEX_OWNER_OFST;

  if (owner == id) 
 8125bf4:	e0fffc17 	ldw	r3,-16(fp)
 8125bf8:	e0bffe17 	ldw	r2,-8(fp)
 8125bfc:	1880081e 	bne	r3,r2,8125c20 <altera_avalon_mutex_is_mine+0x68>
  {
    value = (data & ALTERA_AVALON_MUTEX_MUTEX_VALUE_MSK) >> 
 8125c00:	e0bffd17 	ldw	r2,-12(fp)
 8125c04:	10bfffcc 	andi	r2,r2,65535
 8125c08:	e0bffb15 	stw	r2,-20(fp)
                  ALTERA_AVALON_MUTEX_MUTEX_VALUE_OFST;
    if (value != 0)
 8125c0c:	e0bffb17 	ldw	r2,-20(fp)
 8125c10:	1005003a 	cmpeq	r2,r2,zero
 8125c14:	1000021e 	bne	r2,zero,8125c20 <altera_avalon_mutex_is_mine+0x68>
    {
      ret_code = 1;
 8125c18:	00800044 	movi	r2,1
 8125c1c:	e0bffa15 	stw	r2,-24(fp)
    }
  }

  return ret_code;
 8125c20:	e0bffa17 	ldw	r2,-24(fp)
}
 8125c24:	e037883a 	mov	sp,fp
 8125c28:	df000017 	ldw	fp,0(sp)
 8125c2c:	dec00104 	addi	sp,sp,4
 8125c30:	f800283a 	ret

08125c34 <altera_avalon_mutex_first_lock>:
 *
 * Has this Mutex been released since reset if not return 1
 * otherwise return 0
 */
int altera_avalon_mutex_first_lock( alt_mutex_dev* dev )
{
 8125c34:	defffc04 	addi	sp,sp,-16
 8125c38:	df000315 	stw	fp,12(sp)
 8125c3c:	df000304 	addi	fp,sp,12
 8125c40:	e13fff15 	stw	r4,-4(fp)
  alt_u32 data;
  int ret_code = 0;
 8125c44:	e03ffd15 	stw	zero,-12(fp)

  data = IORD_ALTERA_AVALON_MUTEX_RESET(dev->mutex_base);
 8125c48:	e0bfff17 	ldw	r2,-4(fp)
 8125c4c:	10800317 	ldw	r2,12(r2)
 8125c50:	10800104 	addi	r2,r2,4
 8125c54:	10800037 	ldwio	r2,0(r2)
 8125c58:	e0bffe15 	stw	r2,-8(fp)

  if (data & ALTERA_AVALON_MUTEX_RESET_RESET_MSK) 
 8125c5c:	e0bffe17 	ldw	r2,-8(fp)
 8125c60:	1080004c 	andi	r2,r2,1
 8125c64:	10803fcc 	andi	r2,r2,255
 8125c68:	1005003a 	cmpeq	r2,r2,zero
 8125c6c:	1000021e 	bne	r2,zero,8125c78 <altera_avalon_mutex_first_lock+0x44>
  {
    ret_code = 1;
 8125c70:	00800044 	movi	r2,1
 8125c74:	e0bffd15 	stw	r2,-12(fp)
  }

  return ret_code;
 8125c78:	e0bffd17 	ldw	r2,-12(fp)
}
 8125c7c:	e037883a 	mov	sp,fp
 8125c80:	df000017 	ldw	fp,0(sp)
 8125c84:	dec00104 	addi	sp,sp,4
 8125c88:	f800283a 	ret

08125c8c <alt_up_pixel_buffer_dma_open_dev>:

#include "altera_up_avalon_video_pixel_buffer_dma.h"

#define ABS(x)	((x >= 0) ? (x) : (-(x)))

alt_up_pixel_buffer_dma_dev* alt_up_pixel_buffer_dma_open_dev(const char* name) {
 8125c8c:	defffc04 	addi	sp,sp,-16
 8125c90:	dfc00315 	stw	ra,12(sp)
 8125c94:	df000215 	stw	fp,8(sp)
 8125c98:	df000204 	addi	fp,sp,8
 8125c9c:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_pixel_buffer_dma_dev *dev = (alt_up_pixel_buffer_dma_dev*)alt_find_dev(name, &alt_dev_list);
 8125ca0:	e13fff17 	ldw	r4,-4(fp)
 8125ca4:	014204f4 	movhi	r5,2067
 8125ca8:	2968b404 	addi	r5,r5,-23856
 8125cac:	81276f40 	call	81276f4 <alt_find_dev>
 8125cb0:	e0bffe15 	stw	r2,-8(fp)

  return dev;
 8125cb4:	e0bffe17 	ldw	r2,-8(fp)
}
 8125cb8:	e037883a 	mov	sp,fp
 8125cbc:	dfc00117 	ldw	ra,4(sp)
 8125cc0:	df000017 	ldw	fp,0(sp)
 8125cc4:	dec00204 	addi	sp,sp,8
 8125cc8:	f800283a 	ret

08125ccc <alt_up_pixel_buffer_dma_draw>:

int alt_up_pixel_buffer_dma_draw(alt_up_pixel_buffer_dma_dev *pixel_buffer, unsigned int color, unsigned int x, unsigned int y)
/* This function draws a pixel to the back buffer.
 */
{
 8125ccc:	defff904 	addi	sp,sp,-28
 8125cd0:	df000615 	stw	fp,24(sp)
 8125cd4:	df000604 	addi	fp,sp,24
 8125cd8:	e13ffb15 	stw	r4,-20(fp)
 8125cdc:	e17ffc15 	stw	r5,-16(fp)
 8125ce0:	e1bffd15 	stw	r6,-12(fp)
 8125ce4:	e1fffe15 	stw	r7,-8(fp)
	// boundary check
	if (x >= pixel_buffer->x_resolution || y >= pixel_buffer->y_resolution )
 8125ce8:	e0bffb17 	ldw	r2,-20(fp)
 8125cec:	10c00f17 	ldw	r3,60(r2)
 8125cf0:	e0bffd17 	ldw	r2,-12(fp)
 8125cf4:	10c0042e 	bgeu	r2,r3,8125d08 <alt_up_pixel_buffer_dma_draw+0x3c>
 8125cf8:	e0bffb17 	ldw	r2,-20(fp)
 8125cfc:	10c01017 	ldw	r3,64(r2)
 8125d00:	e0bffe17 	ldw	r2,-8(fp)
 8125d04:	10c00336 	bltu	r2,r3,8125d14 <alt_up_pixel_buffer_dma_draw+0x48>
		return -1;
 8125d08:	00bfffc4 	movi	r2,-1
 8125d0c:	e0bfff15 	stw	r2,-4(fp)
 8125d10:	00005106 	br	8125e58 <alt_up_pixel_buffer_dma_draw+0x18c>

	unsigned int addr = 0;
 8125d14:	e03ffa15 	stw	zero,-24(fp)
	/* Check the mode VGA Pixel Buffer is using. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
 8125d18:	e0bffb17 	ldw	r2,-20(fp)
 8125d1c:	10800d17 	ldw	r2,52(r2)
 8125d20:	1004c03a 	cmpne	r2,r2,zero
 8125d24:	1000151e 	bne	r2,zero,8125d7c <alt_up_pixel_buffer_dma_draw+0xb0>
		/* For X-Y addressing mode, the address format is | unused | Y | X |. So shift bits for coordinates X and Y into their respective locations. */
		addr |= ((x & pixel_buffer->x_coord_mask) << pixel_buffer->x_coord_offset);
 8125d28:	e0bffb17 	ldw	r2,-20(fp)
 8125d2c:	10c01217 	ldw	r3,72(r2)
 8125d30:	e0bffd17 	ldw	r2,-12(fp)
 8125d34:	1886703a 	and	r3,r3,r2
 8125d38:	e0bffb17 	ldw	r2,-20(fp)
 8125d3c:	10801117 	ldw	r2,68(r2)
 8125d40:	1886983a 	sll	r3,r3,r2
 8125d44:	e0bffa17 	ldw	r2,-24(fp)
 8125d48:	10c4b03a 	or	r2,r2,r3
 8125d4c:	e0bffa15 	stw	r2,-24(fp)
		addr |= ((y & pixel_buffer->y_coord_mask) << pixel_buffer->y_coord_offset);
 8125d50:	e0bffb17 	ldw	r2,-20(fp)
 8125d54:	10c01417 	ldw	r3,80(r2)
 8125d58:	e0bffe17 	ldw	r2,-8(fp)
 8125d5c:	1886703a 	and	r3,r3,r2
 8125d60:	e0bffb17 	ldw	r2,-20(fp)
 8125d64:	10801317 	ldw	r2,76(r2)
 8125d68:	1886983a 	sll	r3,r3,r2
 8125d6c:	e0bffa17 	ldw	r2,-24(fp)
 8125d70:	10c4b03a 	or	r2,r2,r3
 8125d74:	e0bffa15 	stw	r2,-24(fp)
 8125d78:	00001706 	br	8125dd8 <alt_up_pixel_buffer_dma_draw+0x10c>
	} else {
		/* In a consecutive addressing mode, the pixels are stored in consecutive memory locations. So the address of a pixel at (x,y) can be computed as
		 * (y*x_resolution + x).*/
		addr += ((x & pixel_buffer->x_coord_mask) << pixel_buffer->x_coord_offset);
 8125d7c:	e0bffb17 	ldw	r2,-20(fp)
 8125d80:	10c01217 	ldw	r3,72(r2)
 8125d84:	e0bffd17 	ldw	r2,-12(fp)
 8125d88:	1886703a 	and	r3,r3,r2
 8125d8c:	e0bffb17 	ldw	r2,-20(fp)
 8125d90:	10801117 	ldw	r2,68(r2)
 8125d94:	1886983a 	sll	r3,r3,r2
 8125d98:	e0bffa17 	ldw	r2,-24(fp)
 8125d9c:	10c5883a 	add	r2,r2,r3
 8125da0:	e0bffa15 	stw	r2,-24(fp)
		addr += (((y & pixel_buffer->y_coord_mask) * pixel_buffer->x_resolution) << pixel_buffer->x_coord_offset);
 8125da4:	e0bffb17 	ldw	r2,-20(fp)
 8125da8:	10c01417 	ldw	r3,80(r2)
 8125dac:	e0bffe17 	ldw	r2,-8(fp)
 8125db0:	1886703a 	and	r3,r3,r2
 8125db4:	e0bffb17 	ldw	r2,-20(fp)
 8125db8:	10800f17 	ldw	r2,60(r2)
 8125dbc:	1887383a 	mul	r3,r3,r2
 8125dc0:	e0bffb17 	ldw	r2,-20(fp)
 8125dc4:	10801117 	ldw	r2,68(r2)
 8125dc8:	1886983a 	sll	r3,r3,r2
 8125dcc:	e0bffa17 	ldw	r2,-24(fp)
 8125dd0:	10c5883a 	add	r2,r2,r3
 8125dd4:	e0bffa15 	stw	r2,-24(fp)
	}
	/* Now, depending on the color depth, write the pixel color to the specified memory location. */
	if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
 8125dd8:	e0bffb17 	ldw	r2,-20(fp)
 8125ddc:	10800e17 	ldw	r2,56(r2)
 8125de0:	10800058 	cmpnei	r2,r2,1
 8125de4:	1000081e 	bne	r2,zero,8125e08 <alt_up_pixel_buffer_dma_draw+0x13c>
		IOWR_8DIRECT(pixel_buffer->back_buffer_start_address, addr, color);
 8125de8:	e0bffb17 	ldw	r2,-20(fp)
 8125dec:	10800c17 	ldw	r2,48(r2)
 8125df0:	1007883a 	mov	r3,r2
 8125df4:	e0bffa17 	ldw	r2,-24(fp)
 8125df8:	1885883a 	add	r2,r3,r2
 8125dfc:	e0fffc17 	ldw	r3,-16(fp)
 8125e00:	10c00025 	stbio	r3,0(r2)
 8125e04:	00001306 	br	8125e54 <alt_up_pixel_buffer_dma_draw+0x188>
	} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
 8125e08:	e0bffb17 	ldw	r2,-20(fp)
 8125e0c:	10800e17 	ldw	r2,56(r2)
 8125e10:	10800098 	cmpnei	r2,r2,2
 8125e14:	1000081e 	bne	r2,zero,8125e38 <alt_up_pixel_buffer_dma_draw+0x16c>
		IOWR_16DIRECT(pixel_buffer->back_buffer_start_address, addr, color);
 8125e18:	e0bffb17 	ldw	r2,-20(fp)
 8125e1c:	10800c17 	ldw	r2,48(r2)
 8125e20:	1007883a 	mov	r3,r2
 8125e24:	e0bffa17 	ldw	r2,-24(fp)
 8125e28:	1885883a 	add	r2,r3,r2
 8125e2c:	e0fffc17 	ldw	r3,-16(fp)
 8125e30:	10c0002d 	sthio	r3,0(r2)
 8125e34:	00000706 	br	8125e54 <alt_up_pixel_buffer_dma_draw+0x188>
	} else {
		IOWR_32DIRECT(pixel_buffer->back_buffer_start_address, addr, color);
 8125e38:	e0bffb17 	ldw	r2,-20(fp)
 8125e3c:	10800c17 	ldw	r2,48(r2)
 8125e40:	1007883a 	mov	r3,r2
 8125e44:	e0bffa17 	ldw	r2,-24(fp)
 8125e48:	1885883a 	add	r2,r3,r2
 8125e4c:	e0fffc17 	ldw	r3,-16(fp)
 8125e50:	10c00035 	stwio	r3,0(r2)
	}

	return 0;
 8125e54:	e03fff15 	stw	zero,-4(fp)
 8125e58:	e0bfff17 	ldw	r2,-4(fp)
}
 8125e5c:	e037883a 	mov	sp,fp
 8125e60:	df000017 	ldw	fp,0(sp)
 8125e64:	dec00104 	addi	sp,sp,4
 8125e68:	f800283a 	ret

08125e6c <alt_up_pixel_buffer_dma_change_back_buffer_address>:

int alt_up_pixel_buffer_dma_change_back_buffer_address(alt_up_pixel_buffer_dma_dev *pixel_buffer, unsigned int new_address)
/* This function changes the memory address for the back buffer. */
{
 8125e6c:	defffd04 	addi	sp,sp,-12
 8125e70:	df000215 	stw	fp,8(sp)
 8125e74:	df000204 	addi	fp,sp,8
 8125e78:	e13ffe15 	stw	r4,-8(fp)
 8125e7c:	e17fff15 	stw	r5,-4(fp)
	IOWR_32DIRECT(pixel_buffer->base, 4, new_address);
 8125e80:	e0bffe17 	ldw	r2,-8(fp)
 8125e84:	10800a17 	ldw	r2,40(r2)
 8125e88:	10800104 	addi	r2,r2,4
 8125e8c:	e0ffff17 	ldw	r3,-4(fp)
 8125e90:	10c00035 	stwio	r3,0(r2)
	pixel_buffer->back_buffer_start_address = IORD_32DIRECT(pixel_buffer->base, 4);
 8125e94:	e0bffe17 	ldw	r2,-8(fp)
 8125e98:	10800a17 	ldw	r2,40(r2)
 8125e9c:	10800104 	addi	r2,r2,4
 8125ea0:	10800037 	ldwio	r2,0(r2)
 8125ea4:	1007883a 	mov	r3,r2
 8125ea8:	e0bffe17 	ldw	r2,-8(fp)
 8125eac:	10c00c15 	stw	r3,48(r2)
	return 0;
 8125eb0:	0005883a 	mov	r2,zero
}
 8125eb4:	e037883a 	mov	sp,fp
 8125eb8:	df000017 	ldw	fp,0(sp)
 8125ebc:	dec00104 	addi	sp,sp,4
 8125ec0:	f800283a 	ret

08125ec4 <alt_up_pixel_buffer_dma_swap_buffers>:

int alt_up_pixel_buffer_dma_swap_buffers(alt_up_pixel_buffer_dma_dev *pixel_buffer)
/* This function swaps the front and back buffers. At the next refresh cycle the back buffer will be drawn on the screen
 * and will become the front buffer. */
{
 8125ec4:	defffe04 	addi	sp,sp,-8
 8125ec8:	df000115 	stw	fp,4(sp)
 8125ecc:	df000104 	addi	fp,sp,4
 8125ed0:	e13fff15 	stw	r4,-4(fp)
	register unsigned int temp = pixel_buffer->back_buffer_start_address;
 8125ed4:	e0bfff17 	ldw	r2,-4(fp)
 8125ed8:	11000c17 	ldw	r4,48(r2)
	IOWR_32DIRECT(pixel_buffer->base, 0, 1);
 8125edc:	e0bfff17 	ldw	r2,-4(fp)
 8125ee0:	10800a17 	ldw	r2,40(r2)
 8125ee4:	1007883a 	mov	r3,r2
 8125ee8:	00800044 	movi	r2,1
 8125eec:	18800035 	stwio	r2,0(r3)
	pixel_buffer->back_buffer_start_address = pixel_buffer->buffer_start_address;
 8125ef0:	e0bfff17 	ldw	r2,-4(fp)
 8125ef4:	10c00b17 	ldw	r3,44(r2)
 8125ef8:	e0bfff17 	ldw	r2,-4(fp)
 8125efc:	10c00c15 	stw	r3,48(r2)
	pixel_buffer->buffer_start_address = temp;
 8125f00:	e0bfff17 	ldw	r2,-4(fp)
 8125f04:	11000b15 	stw	r4,44(r2)
	return 0;
 8125f08:	0005883a 	mov	r2,zero
}
 8125f0c:	e037883a 	mov	sp,fp
 8125f10:	df000017 	ldw	fp,0(sp)
 8125f14:	dec00104 	addi	sp,sp,4
 8125f18:	f800283a 	ret

08125f1c <alt_up_pixel_buffer_dma_check_swap_buffers_status>:
int alt_up_pixel_buffer_dma_check_swap_buffers_status(alt_up_pixel_buffer_dma_dev *pixel_buffer)
/* This function checks if the buffer swap has occured. Since the buffer swap only happens after an entire screen is drawn,
 * it is important to wait for this function to return 0 before proceeding to draw on either buffer. When both front and the back buffers
 * have the same address calling the alt_up_pixel_buffer_dma_swap_buffers(...) function and then waiting for this function to return 0, causes your program to
 * wait for the screen to refresh. */
{
 8125f1c:	defffe04 	addi	sp,sp,-8
 8125f20:	df000115 	stw	fp,4(sp)
 8125f24:	df000104 	addi	fp,sp,4
 8125f28:	e13fff15 	stw	r4,-4(fp)
	return (IORD_32DIRECT(pixel_buffer->base, 12) & 0x1);
 8125f2c:	e0bfff17 	ldw	r2,-4(fp)
 8125f30:	10800a17 	ldw	r2,40(r2)
 8125f34:	10800304 	addi	r2,r2,12
 8125f38:	10800037 	ldwio	r2,0(r2)
 8125f3c:	1080004c 	andi	r2,r2,1
}
 8125f40:	e037883a 	mov	sp,fp
 8125f44:	df000017 	ldw	fp,0(sp)
 8125f48:	dec00104 	addi	sp,sp,4
 8125f4c:	f800283a 	ret

08125f50 <alt_up_pixel_buffer_dma_clear_screen>:

void alt_up_pixel_buffer_dma_clear_screen(alt_up_pixel_buffer_dma_dev *pixel_buffer, int backbuffer)
/* This function clears the screen by setting each pixel to a black color. */
{
 8125f50:	defff604 	addi	sp,sp,-40
 8125f54:	df000915 	stw	fp,36(sp)
 8125f58:	df000904 	addi	fp,sp,36
 8125f5c:	e13ff715 	stw	r4,-36(fp)
 8125f60:	e17ff815 	stw	r5,-32(fp)
	register unsigned int addr;
	register unsigned int limit_x, limit_y;
	
	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
 8125f64:	e0bff817 	ldw	r2,-32(fp)
 8125f68:	10800058 	cmpnei	r2,r2,1
 8125f6c:	1000041e 	bne	r2,zero,8125f80 <alt_up_pixel_buffer_dma_clear_screen+0x30>
		addr = pixel_buffer->back_buffer_start_address;
 8125f70:	e0bff717 	ldw	r2,-36(fp)
 8125f74:	10800c17 	ldw	r2,48(r2)
 8125f78:	e0bfff15 	stw	r2,-4(fp)
 8125f7c:	00000306 	br	8125f8c <alt_up_pixel_buffer_dma_clear_screen+0x3c>
	else
		addr = pixel_buffer->buffer_start_address;
 8125f80:	e0bff717 	ldw	r2,-36(fp)
 8125f84:	10800b17 	ldw	r2,44(r2)
 8125f88:	e0bfff15 	stw	r2,-4(fp)
	limit_x = pixel_buffer->x_resolution;
 8125f8c:	e0bff717 	ldw	r2,-36(fp)
 8125f90:	10800f17 	ldw	r2,60(r2)
 8125f94:	e0bffe15 	stw	r2,-8(fp)
	/* In 16 and 32-bit color modes we use twice or four times more memory for the display buffer.*/
	if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
 8125f98:	e0bff717 	ldw	r2,-36(fp)
 8125f9c:	10800e17 	ldw	r2,56(r2)
 8125fa0:	10800098 	cmpnei	r2,r2,2
 8125fa4:	1000051e 	bne	r2,zero,8125fbc <alt_up_pixel_buffer_dma_clear_screen+0x6c>
		limit_x = limit_x << 1;
 8125fa8:	e0fffe17 	ldw	r3,-8(fp)
 8125fac:	e0fffe17 	ldw	r3,-8(fp)
 8125fb0:	18c5883a 	add	r2,r3,r3
 8125fb4:	e0bffe15 	stw	r2,-8(fp)
 8125fb8:	00000506 	br	8125fd0 <alt_up_pixel_buffer_dma_clear_screen+0x80>
	} else {
		limit_x = limit_x << 2;
 8125fbc:	e13ffe17 	ldw	r4,-8(fp)
 8125fc0:	e13ffe17 	ldw	r4,-8(fp)
 8125fc4:	2105883a 	add	r2,r4,r4
 8125fc8:	1085883a 	add	r2,r2,r2
 8125fcc:	e0bffe15 	stw	r2,-8(fp)
	}	
	limit_y = pixel_buffer->y_resolution;
 8125fd0:	e0bff717 	ldw	r2,-36(fp)
 8125fd4:	10801017 	ldw	r2,64(r2)
 8125fd8:	e0bffd15 	stw	r2,-12(fp)

	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
 8125fdc:	e0bff717 	ldw	r2,-36(fp)
 8125fe0:	10800d17 	ldw	r2,52(r2)
 8125fe4:	1004c03a 	cmpne	r2,r2,zero
 8125fe8:	10001e1e 	bne	r2,zero,8126064 <alt_up_pixel_buffer_dma_clear_screen+0x114>
		/* Clear the screen when the VGA is set up in an XY addressing mode. */
		register unsigned int x,y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
 8125fec:	e0bff717 	ldw	r2,-36(fp)
 8125ff0:	10801317 	ldw	r2,76(r2)
 8125ff4:	e0bffa15 	stw	r2,-24(fp)

		for (y = 0; y < limit_y; y++)
 8125ff8:	e03ffb15 	stw	zero,-20(fp)
 8125ffc:	00001506 	br	8126054 <alt_up_pixel_buffer_dma_clear_screen+0x104>
		{
			for (x = 0; x < limit_x; x = x + 4)
 8126000:	e03ffc15 	stw	zero,-16(fp)
 8126004:	00000706 	br	8126024 <alt_up_pixel_buffer_dma_clear_screen+0xd4>
			{
				IOWR_32DIRECT(addr, x, 0);
 8126008:	e0ffff17 	ldw	r3,-4(fp)
 812600c:	e0bffc17 	ldw	r2,-16(fp)
 8126010:	1885883a 	add	r2,r3,r2
 8126014:	10000035 	stwio	zero,0(r2)
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;

		for (y = 0; y < limit_y; y++)
		{
			for (x = 0; x < limit_x; x = x + 4)
 8126018:	e0bffc17 	ldw	r2,-16(fp)
 812601c:	10800104 	addi	r2,r2,4
 8126020:	e0bffc15 	stw	r2,-16(fp)
 8126024:	e0fffc17 	ldw	r3,-16(fp)
 8126028:	e13ffe17 	ldw	r4,-8(fp)
 812602c:	193ff636 	bltu	r3,r4,8126008 <alt_up_pixel_buffer_dma_clear_screen+0xb8>
			{
				IOWR_32DIRECT(addr, x, 0);
			}
			addr = addr + (1 << offset_y);
 8126030:	e0fffa17 	ldw	r3,-24(fp)
 8126034:	00800044 	movi	r2,1
 8126038:	10c4983a 	sll	r2,r2,r3
 812603c:	e0ffff17 	ldw	r3,-4(fp)
 8126040:	1887883a 	add	r3,r3,r2
 8126044:	e0ffff15 	stw	r3,-4(fp)
		/* Clear the screen when the VGA is set up in an XY addressing mode. */
		register unsigned int x,y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;

		for (y = 0; y < limit_y; y++)
 8126048:	e13ffb17 	ldw	r4,-20(fp)
 812604c:	21000044 	addi	r4,r4,1
 8126050:	e13ffb15 	stw	r4,-20(fp)
 8126054:	e0bffb17 	ldw	r2,-20(fp)
 8126058:	e0fffd17 	ldw	r3,-12(fp)
 812605c:	10ffe836 	bltu	r2,r3,8126000 <alt_up_pixel_buffer_dma_clear_screen+0xb0>
 8126060:	00001006 	br	81260a4 <alt_up_pixel_buffer_dma_clear_screen+0x154>
			addr = addr + (1 << offset_y);
		}
	} else {
		/* Clear the screen when the VGA is set up in a linear addressing mode. */
		register int x;
		limit_y = limit_x*limit_y;	
 8126064:	e13ffd17 	ldw	r4,-12(fp)
 8126068:	e0bffe17 	ldw	r2,-8(fp)
 812606c:	2089383a 	mul	r4,r4,r2
 8126070:	e13ffd15 	stw	r4,-12(fp)

		for (x = 0; x < limit_y; x = x + 4)
 8126074:	e03ff915 	stw	zero,-28(fp)
 8126078:	00000706 	br	8126098 <alt_up_pixel_buffer_dma_clear_screen+0x148>
		{
			IOWR_32DIRECT(addr, x, 0);
 812607c:	e0ffff17 	ldw	r3,-4(fp)
 8126080:	e0bff917 	ldw	r2,-28(fp)
 8126084:	1885883a 	add	r2,r3,r2
 8126088:	10000035 	stwio	zero,0(r2)
	} else {
		/* Clear the screen when the VGA is set up in a linear addressing mode. */
		register int x;
		limit_y = limit_x*limit_y;	

		for (x = 0; x < limit_y; x = x + 4)
 812608c:	e0fff917 	ldw	r3,-28(fp)
 8126090:	18c00104 	addi	r3,r3,4
 8126094:	e0fff915 	stw	r3,-28(fp)
 8126098:	e0bff917 	ldw	r2,-28(fp)
 812609c:	e13ffd17 	ldw	r4,-12(fp)
 81260a0:	113ff636 	bltu	r2,r4,812607c <alt_up_pixel_buffer_dma_clear_screen+0x12c>
		{
			IOWR_32DIRECT(addr, x, 0);
		}
	}
}
 81260a4:	e037883a 	mov	sp,fp
 81260a8:	df000017 	ldw	fp,0(sp)
 81260ac:	dec00104 	addi	sp,sp,4
 81260b0:	f800283a 	ret

081260b4 <alt_up_pixel_buffer_dma_draw_box>:

void alt_up_pixel_buffer_dma_draw_box(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int y0, int x1, int y1, int color, int backbuffer)
/* This function draws a filled box. */
{
 81260b4:	deffed04 	addi	sp,sp,-76
 81260b8:	df001215 	stw	fp,72(sp)
 81260bc:	df001204 	addi	fp,sp,72
 81260c0:	e13fee15 	stw	r4,-72(fp)
 81260c4:	e17fef15 	stw	r5,-68(fp)
 81260c8:	e1bff015 	stw	r6,-64(fp)
 81260cc:	e1fff115 	stw	r7,-60(fp)
	register unsigned int addr;
	register unsigned int limit_x = pixel_buffer->x_resolution;
 81260d0:	e0bfee17 	ldw	r2,-72(fp)
 81260d4:	10800f17 	ldw	r2,60(r2)
 81260d8:	e0bffe15 	stw	r2,-8(fp)
	register unsigned int limit_y = pixel_buffer->y_resolution;
 81260dc:	e0bfee17 	ldw	r2,-72(fp)
 81260e0:	10801017 	ldw	r2,64(r2)
 81260e4:	e0bffd15 	stw	r2,-12(fp)
	register unsigned int temp;
	register unsigned int l_x = x0;
 81260e8:	e0bfef17 	ldw	r2,-68(fp)
 81260ec:	e0bffb15 	stw	r2,-20(fp)
	register unsigned int r_x = x1;
 81260f0:	e0fff117 	ldw	r3,-60(fp)
 81260f4:	e0fffa15 	stw	r3,-24(fp)
	register unsigned int t_y = y0;
 81260f8:	e13ff017 	ldw	r4,-64(fp)
 81260fc:	e13ff915 	stw	r4,-28(fp)
	register unsigned int b_y = y1;
 8126100:	e0800117 	ldw	r2,4(fp)
 8126104:	e0bff815 	stw	r2,-32(fp)
	register unsigned int local_color = color;
 8126108:	e0c00217 	ldw	r3,8(fp)
 812610c:	e0fff715 	stw	r3,-36(fp)
	
	/* Check coordinates */
	if (l_x > r_x)
 8126110:	e13ffa17 	ldw	r4,-24(fp)
 8126114:	e0bffb17 	ldw	r2,-20(fp)
 8126118:	2080062e 	bgeu	r4,r2,8126134 <alt_up_pixel_buffer_dma_draw_box+0x80>
	{
		temp = l_x;
 812611c:	e0fffb17 	ldw	r3,-20(fp)
 8126120:	e0fffc15 	stw	r3,-16(fp)
		l_x = r_x;
 8126124:	e13ffa17 	ldw	r4,-24(fp)
 8126128:	e13ffb15 	stw	r4,-20(fp)
		r_x = temp;
 812612c:	e0bffc17 	ldw	r2,-16(fp)
 8126130:	e0bffa15 	stw	r2,-24(fp)
	}
	if (t_y > b_y)
 8126134:	e0fff817 	ldw	r3,-32(fp)
 8126138:	e13ff917 	ldw	r4,-28(fp)
 812613c:	1900062e 	bgeu	r3,r4,8126158 <alt_up_pixel_buffer_dma_draw_box+0xa4>
	{
		temp = t_y;
 8126140:	e0bff917 	ldw	r2,-28(fp)
 8126144:	e0bffc15 	stw	r2,-16(fp)
		t_y = b_y;
 8126148:	e0fff817 	ldw	r3,-32(fp)
 812614c:	e0fff915 	stw	r3,-28(fp)
		b_y = temp;
 8126150:	e13ffc17 	ldw	r4,-16(fp)
 8126154:	e13ff815 	stw	r4,-32(fp)
	}
	if ((l_x >= limit_x) || (t_y >= limit_y) || (r_x < 0) || (b_y < 0))
 8126158:	e0bffb17 	ldw	r2,-20(fp)
 812615c:	e0fffe17 	ldw	r3,-8(fp)
 8126160:	10c10d2e 	bgeu	r2,r3,8126598 <alt_up_pixel_buffer_dma_draw_box+0x4e4>
 8126164:	e13ff917 	ldw	r4,-28(fp)
 8126168:	e0bffd17 	ldw	r2,-12(fp)
 812616c:	20800136 	bltu	r4,r2,8126174 <alt_up_pixel_buffer_dma_draw_box+0xc0>
	{
		/* Drawing outside of the window, so don't bother. */
		return;
 8126170:	00010906 	br	8126598 <alt_up_pixel_buffer_dma_draw_box+0x4e4>
	/* Clip the box and draw only within the confines of the screen. */
	if (l_x < 0)
	{
		l_x = 0;
	}
	if (r_x >= limit_x)
 8126174:	e0fffa17 	ldw	r3,-24(fp)
 8126178:	e13ffe17 	ldw	r4,-8(fp)
 812617c:	19000336 	bltu	r3,r4,812618c <alt_up_pixel_buffer_dma_draw_box+0xd8>
	{
		r_x = limit_x - 1;
 8126180:	e0bffe17 	ldw	r2,-8(fp)
 8126184:	10bfffc4 	addi	r2,r2,-1
 8126188:	e0bffa15 	stw	r2,-24(fp)
	}
	if (t_y < 0)
	{
		t_y = 0;
	}
	if (b_y >= limit_y)
 812618c:	e0fff817 	ldw	r3,-32(fp)
 8126190:	e13ffd17 	ldw	r4,-12(fp)
 8126194:	19000336 	bltu	r3,r4,81261a4 <alt_up_pixel_buffer_dma_draw_box+0xf0>
	{
		b_y = limit_y - 1;
 8126198:	e0bffd17 	ldw	r2,-12(fp)
 812619c:	10bfffc4 	addi	r2,r2,-1
 81261a0:	e0bff815 	stw	r2,-32(fp)
	}

	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
 81261a4:	e0800317 	ldw	r2,12(fp)
 81261a8:	10800058 	cmpnei	r2,r2,1
 81261ac:	1000041e 	bne	r2,zero,81261c0 <alt_up_pixel_buffer_dma_draw_box+0x10c>
		addr = pixel_buffer->back_buffer_start_address;
 81261b0:	e0bfee17 	ldw	r2,-72(fp)
 81261b4:	10800c17 	ldw	r2,48(r2)
 81261b8:	e0bfff15 	stw	r2,-4(fp)
 81261bc:	00000306 	br	81261cc <alt_up_pixel_buffer_dma_draw_box+0x118>
	else
		addr = pixel_buffer->buffer_start_address;
 81261c0:	e0bfee17 	ldw	r2,-72(fp)
 81261c4:	10800b17 	ldw	r2,44(r2)
 81261c8:	e0bfff15 	stw	r2,-4(fp)

	/* Draw the box using one of the addressing modes. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
 81261cc:	e0bfee17 	ldw	r2,-72(fp)
 81261d0:	10800d17 	ldw	r2,52(r2)
 81261d4:	1004c03a 	cmpne	r2,r2,zero
 81261d8:	1000721e 	bne	r2,zero,81263a4 <alt_up_pixel_buffer_dma_draw_box+0x2f0>
		/* Draw a box of a given color on the screen using the XY addressing mode. */
		register unsigned int x,y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
 81261dc:	e0bfee17 	ldw	r2,-72(fp)
 81261e0:	10801317 	ldw	r2,76(r2)
 81261e4:	e0bff415 	stw	r2,-48(fp)
		addr = addr + (t_y << offset_y);
 81261e8:	e0bff417 	ldw	r2,-48(fp)
 81261ec:	e0fff917 	ldw	r3,-28(fp)
 81261f0:	1884983a 	sll	r2,r3,r2
 81261f4:	e13fff17 	ldw	r4,-4(fp)
 81261f8:	2089883a 	add	r4,r4,r2
 81261fc:	e13fff15 	stw	r4,-4(fp)
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
 8126200:	e0bfee17 	ldw	r2,-72(fp)
 8126204:	10800e17 	ldw	r2,56(r2)
 8126208:	10800058 	cmpnei	r2,r2,1
 812620c:	10001e1e 	bne	r2,zero,8126288 <alt_up_pixel_buffer_dma_draw_box+0x1d4>
			for (y = t_y; y <= b_y; y++)
 8126210:	e0bff917 	ldw	r2,-28(fp)
 8126214:	e0bff515 	stw	r2,-44(fp)
 8126218:	00001706 	br	8126278 <alt_up_pixel_buffer_dma_draw_box+0x1c4>
			{
				for (x = l_x; x <= r_x; x++)
 812621c:	e0fffb17 	ldw	r3,-20(fp)
 8126220:	e0fff615 	stw	r3,-40(fp)
 8126224:	00000806 	br	8126248 <alt_up_pixel_buffer_dma_draw_box+0x194>
				{
					IOWR_8DIRECT(addr, x, local_color);
 8126228:	e0ffff17 	ldw	r3,-4(fp)
 812622c:	e0bff617 	ldw	r2,-40(fp)
 8126230:	1885883a 	add	r2,r3,r2
 8126234:	e0fff717 	ldw	r3,-36(fp)
 8126238:	10c00025 	stbio	r3,0(r2)
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
 812623c:	e13ff617 	ldw	r4,-40(fp)
 8126240:	21000044 	addi	r4,r4,1
 8126244:	e13ff615 	stw	r4,-40(fp)
 8126248:	e0bffa17 	ldw	r2,-24(fp)
 812624c:	e0fff617 	ldw	r3,-40(fp)
 8126250:	10fff52e 	bgeu	r2,r3,8126228 <alt_up_pixel_buffer_dma_draw_box+0x174>
				{
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + (1 << offset_y);
 8126254:	e0fff417 	ldw	r3,-48(fp)
 8126258:	00800044 	movi	r2,1
 812625c:	10c4983a 	sll	r2,r2,r3
 8126260:	e13fff17 	ldw	r4,-4(fp)
 8126264:	2089883a 	add	r4,r4,r2
 8126268:	e13fff15 	stw	r4,-4(fp)
		addr = addr + (t_y << offset_y);
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
 812626c:	e0bff517 	ldw	r2,-44(fp)
 8126270:	10800044 	addi	r2,r2,1
 8126274:	e0bff515 	stw	r2,-44(fp)
 8126278:	e0fff817 	ldw	r3,-32(fp)
 812627c:	e13ff517 	ldw	r4,-44(fp)
 8126280:	193fe62e 	bgeu	r3,r4,812621c <alt_up_pixel_buffer_dma_draw_box+0x168>
 8126284:	0000c406 	br	8126598 <alt_up_pixel_buffer_dma_draw_box+0x4e4>
				{
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
 8126288:	e0bfee17 	ldw	r2,-72(fp)
 812628c:	10800e17 	ldw	r2,56(r2)
 8126290:	10800098 	cmpnei	r2,r2,2
 8126294:	1000211e 	bne	r2,zero,812631c <alt_up_pixel_buffer_dma_draw_box+0x268>
			for (y = t_y; y <= b_y; y++)
 8126298:	e0bff917 	ldw	r2,-28(fp)
 812629c:	e0bff515 	stw	r2,-44(fp)
 81262a0:	00001a06 	br	812630c <alt_up_pixel_buffer_dma_draw_box+0x258>
			{
				for (x = l_x; x <= r_x; x++)
 81262a4:	e0fffb17 	ldw	r3,-20(fp)
 81262a8:	e0fff615 	stw	r3,-40(fp)
 81262ac:	00000b06 	br	81262dc <alt_up_pixel_buffer_dma_draw_box+0x228>
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
 81262b0:	e13ff617 	ldw	r4,-40(fp)
 81262b4:	e13ff617 	ldw	r4,-40(fp)
 81262b8:	2105883a 	add	r2,r4,r4
 81262bc:	1007883a 	mov	r3,r2
 81262c0:	e0bfff17 	ldw	r2,-4(fp)
 81262c4:	1885883a 	add	r2,r3,r2
 81262c8:	e0fff717 	ldw	r3,-36(fp)
 81262cc:	10c0002d 	sthio	r3,0(r2)
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
 81262d0:	e0bff617 	ldw	r2,-40(fp)
 81262d4:	10800044 	addi	r2,r2,1
 81262d8:	e0bff615 	stw	r2,-40(fp)
 81262dc:	e0fffa17 	ldw	r3,-24(fp)
 81262e0:	e13ff617 	ldw	r4,-40(fp)
 81262e4:	193ff22e 	bgeu	r3,r4,81262b0 <alt_up_pixel_buffer_dma_draw_box+0x1fc>
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
				}
				addr = addr + (1 << offset_y);
 81262e8:	e0fff417 	ldw	r3,-48(fp)
 81262ec:	00800044 	movi	r2,1
 81262f0:	10c4983a 	sll	r2,r2,r3
 81262f4:	e0ffff17 	ldw	r3,-4(fp)
 81262f8:	1887883a 	add	r3,r3,r2
 81262fc:	e0ffff15 	stw	r3,-4(fp)
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
 8126300:	e13ff517 	ldw	r4,-44(fp)
 8126304:	21000044 	addi	r4,r4,1
 8126308:	e13ff515 	stw	r4,-44(fp)
 812630c:	e0bff817 	ldw	r2,-32(fp)
 8126310:	e0fff517 	ldw	r3,-44(fp)
 8126314:	10ffe32e 	bgeu	r2,r3,81262a4 <alt_up_pixel_buffer_dma_draw_box+0x1f0>
 8126318:	00009f06 	br	8126598 <alt_up_pixel_buffer_dma_draw_box+0x4e4>
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
 812631c:	e13ff917 	ldw	r4,-28(fp)
 8126320:	e13ff515 	stw	r4,-44(fp)
 8126324:	00001b06 	br	8126394 <alt_up_pixel_buffer_dma_draw_box+0x2e0>
			{
				for (x = l_x; x <= r_x; x++)
 8126328:	e0bffb17 	ldw	r2,-20(fp)
 812632c:	e0bff615 	stw	r2,-40(fp)
 8126330:	00000c06 	br	8126364 <alt_up_pixel_buffer_dma_draw_box+0x2b0>
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
 8126334:	e0fff617 	ldw	r3,-40(fp)
 8126338:	e0fff617 	ldw	r3,-40(fp)
 812633c:	18c5883a 	add	r2,r3,r3
 8126340:	1085883a 	add	r2,r2,r2
 8126344:	1007883a 	mov	r3,r2
 8126348:	e0bfff17 	ldw	r2,-4(fp)
 812634c:	1885883a 	add	r2,r3,r2
 8126350:	e0fff717 	ldw	r3,-36(fp)
 8126354:	10c00035 	stwio	r3,0(r2)
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
 8126358:	e13ff617 	ldw	r4,-40(fp)
 812635c:	21000044 	addi	r4,r4,1
 8126360:	e13ff615 	stw	r4,-40(fp)
 8126364:	e0bffa17 	ldw	r2,-24(fp)
 8126368:	e0fff617 	ldw	r3,-40(fp)
 812636c:	10fff12e 	bgeu	r2,r3,8126334 <alt_up_pixel_buffer_dma_draw_box+0x280>
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
				}
				addr = addr + (1 << offset_y);
 8126370:	e0fff417 	ldw	r3,-48(fp)
 8126374:	00800044 	movi	r2,1
 8126378:	10c4983a 	sll	r2,r2,r3
 812637c:	e13fff17 	ldw	r4,-4(fp)
 8126380:	2089883a 	add	r4,r4,r2
 8126384:	e13fff15 	stw	r4,-4(fp)
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
 8126388:	e0bff517 	ldw	r2,-44(fp)
 812638c:	10800044 	addi	r2,r2,1
 8126390:	e0bff515 	stw	r2,-44(fp)
 8126394:	e0fff817 	ldw	r3,-32(fp)
 8126398:	e13ff517 	ldw	r4,-44(fp)
 812639c:	193fe22e 	bgeu	r3,r4,8126328 <alt_up_pixel_buffer_dma_draw_box+0x274>
 81263a0:	00007d06 	br	8126598 <alt_up_pixel_buffer_dma_draw_box+0x4e4>
	} else {
		/* Draw a box of a given color on the screen using the linear addressing mode. */
		register unsigned int x,y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
 81263a4:	e0bfee17 	ldw	r2,-72(fp)
 81263a8:	10800e17 	ldw	r2,56(r2)
 81263ac:	10800058 	cmpnei	r2,r2,1
 81263b0:	1000221e 	bne	r2,zero,812643c <alt_up_pixel_buffer_dma_draw_box+0x388>
			addr = addr + t_y * limit_x;
 81263b4:	e0fff917 	ldw	r3,-28(fp)
 81263b8:	e13ffe17 	ldw	r4,-8(fp)
 81263bc:	1905383a 	mul	r2,r3,r4
 81263c0:	e0ffff17 	ldw	r3,-4(fp)
 81263c4:	1887883a 	add	r3,r3,r2
 81263c8:	e0ffff15 	stw	r3,-4(fp)
			for (y = t_y; y <= b_y; y++)
 81263cc:	e13ff917 	ldw	r4,-28(fp)
 81263d0:	e13ff215 	stw	r4,-56(fp)
 81263d4:	00001506 	br	812642c <alt_up_pixel_buffer_dma_draw_box+0x378>
			{
				for (x = l_x; x <= r_x; x++)
 81263d8:	e0bffb17 	ldw	r2,-20(fp)
 81263dc:	e0bff315 	stw	r2,-52(fp)
 81263e0:	00000806 	br	8126404 <alt_up_pixel_buffer_dma_draw_box+0x350>
				{
					IOWR_8DIRECT(addr, x, local_color);
 81263e4:	e0ffff17 	ldw	r3,-4(fp)
 81263e8:	e0bff317 	ldw	r2,-52(fp)
 81263ec:	1885883a 	add	r2,r3,r2
 81263f0:	e0fff717 	ldw	r3,-36(fp)
 81263f4:	10c00025 	stbio	r3,0(r2)
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
 81263f8:	e0fff317 	ldw	r3,-52(fp)
 81263fc:	18c00044 	addi	r3,r3,1
 8126400:	e0fff315 	stw	r3,-52(fp)
 8126404:	e13ffa17 	ldw	r4,-24(fp)
 8126408:	e0bff317 	ldw	r2,-52(fp)
 812640c:	20bff52e 	bgeu	r4,r2,81263e4 <alt_up_pixel_buffer_dma_draw_box+0x330>
				{
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + limit_x;
 8126410:	e0ffff17 	ldw	r3,-4(fp)
 8126414:	e13ffe17 	ldw	r4,-8(fp)
 8126418:	1907883a 	add	r3,r3,r4
 812641c:	e0ffff15 	stw	r3,-4(fp)
		register unsigned int x,y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
 8126420:	e0bff217 	ldw	r2,-56(fp)
 8126424:	10800044 	addi	r2,r2,1
 8126428:	e0bff215 	stw	r2,-56(fp)
 812642c:	e0fff817 	ldw	r3,-32(fp)
 8126430:	e13ff217 	ldw	r4,-56(fp)
 8126434:	193fe82e 	bgeu	r3,r4,81263d8 <alt_up_pixel_buffer_dma_draw_box+0x324>
 8126438:	00005706 	br	8126598 <alt_up_pixel_buffer_dma_draw_box+0x4e4>
				{
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
 812643c:	e0bfee17 	ldw	r2,-72(fp)
 8126440:	10800e17 	ldw	r2,56(r2)
 8126444:	10800098 	cmpnei	r2,r2,2
 8126448:	1000291e 	bne	r2,zero,81264f0 <alt_up_pixel_buffer_dma_draw_box+0x43c>
			limit_x = limit_x << 1;
 812644c:	e0fffe17 	ldw	r3,-8(fp)
 8126450:	e0fffe17 	ldw	r3,-8(fp)
 8126454:	18c5883a 	add	r2,r3,r3
 8126458:	e0bffe15 	stw	r2,-8(fp)
			addr = addr + t_y * limit_x;
 812645c:	e13ff917 	ldw	r4,-28(fp)
 8126460:	e0fffe17 	ldw	r3,-8(fp)
 8126464:	20c5383a 	mul	r2,r4,r3
 8126468:	e13fff17 	ldw	r4,-4(fp)
 812646c:	2089883a 	add	r4,r4,r2
 8126470:	e13fff15 	stw	r4,-4(fp)
			for (y = t_y; y <= b_y; y++)
 8126474:	e0bff917 	ldw	r2,-28(fp)
 8126478:	e0bff215 	stw	r2,-56(fp)
 812647c:	00001806 	br	81264e0 <alt_up_pixel_buffer_dma_draw_box+0x42c>
			{
				for (x = l_x; x <= r_x; x++)
 8126480:	e0fffb17 	ldw	r3,-20(fp)
 8126484:	e0fff315 	stw	r3,-52(fp)
 8126488:	00000b06 	br	81264b8 <alt_up_pixel_buffer_dma_draw_box+0x404>
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
 812648c:	e13ff317 	ldw	r4,-52(fp)
 8126490:	e13ff317 	ldw	r4,-52(fp)
 8126494:	2105883a 	add	r2,r4,r4
 8126498:	1007883a 	mov	r3,r2
 812649c:	e0bfff17 	ldw	r2,-4(fp)
 81264a0:	1885883a 	add	r2,r3,r2
 81264a4:	e0fff717 	ldw	r3,-36(fp)
 81264a8:	10c0002d 	sthio	r3,0(r2)
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
 81264ac:	e0bff317 	ldw	r2,-52(fp)
 81264b0:	10800044 	addi	r2,r2,1
 81264b4:	e0bff315 	stw	r2,-52(fp)
 81264b8:	e0fffa17 	ldw	r3,-24(fp)
 81264bc:	e13ff317 	ldw	r4,-52(fp)
 81264c0:	193ff22e 	bgeu	r3,r4,812648c <alt_up_pixel_buffer_dma_draw_box+0x3d8>
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
				}
				addr = addr + limit_x;
 81264c4:	e0bfff17 	ldw	r2,-4(fp)
 81264c8:	e0fffe17 	ldw	r3,-8(fp)
 81264cc:	10c5883a 	add	r2,r2,r3
 81264d0:	e0bfff15 	stw	r2,-4(fp)
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
 81264d4:	e13ff217 	ldw	r4,-56(fp)
 81264d8:	21000044 	addi	r4,r4,1
 81264dc:	e13ff215 	stw	r4,-56(fp)
 81264e0:	e0bff817 	ldw	r2,-32(fp)
 81264e4:	e0fff217 	ldw	r3,-56(fp)
 81264e8:	10ffe52e 	bgeu	r2,r3,8126480 <alt_up_pixel_buffer_dma_draw_box+0x3cc>
 81264ec:	00002a06 	br	8126598 <alt_up_pixel_buffer_dma_draw_box+0x4e4>
				addr = addr + limit_x;
			}
		}
		else
		{
			limit_x = limit_x << 2;
 81264f0:	e13ffe17 	ldw	r4,-8(fp)
 81264f4:	e13ffe17 	ldw	r4,-8(fp)
 81264f8:	2105883a 	add	r2,r4,r4
 81264fc:	1085883a 	add	r2,r2,r2
 8126500:	e0bffe15 	stw	r2,-8(fp)
			addr = addr + t_y * limit_x;
 8126504:	e0fff917 	ldw	r3,-28(fp)
 8126508:	e13ffe17 	ldw	r4,-8(fp)
 812650c:	1905383a 	mul	r2,r3,r4
 8126510:	e0ffff17 	ldw	r3,-4(fp)
 8126514:	1887883a 	add	r3,r3,r2
 8126518:	e0ffff15 	stw	r3,-4(fp)
			for (y = t_y; y <= b_y; y++)
 812651c:	e13ff917 	ldw	r4,-28(fp)
 8126520:	e13ff215 	stw	r4,-56(fp)
 8126524:	00001906 	br	812658c <alt_up_pixel_buffer_dma_draw_box+0x4d8>
			{
				for (x = l_x; x <= r_x; x++)
 8126528:	e0bffb17 	ldw	r2,-20(fp)
 812652c:	e0bff315 	stw	r2,-52(fp)
 8126530:	00000c06 	br	8126564 <alt_up_pixel_buffer_dma_draw_box+0x4b0>
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
 8126534:	e0fff317 	ldw	r3,-52(fp)
 8126538:	e0fff317 	ldw	r3,-52(fp)
 812653c:	18c5883a 	add	r2,r3,r3
 8126540:	1085883a 	add	r2,r2,r2
 8126544:	1007883a 	mov	r3,r2
 8126548:	e0bfff17 	ldw	r2,-4(fp)
 812654c:	1885883a 	add	r2,r3,r2
 8126550:	e0fff717 	ldw	r3,-36(fp)
 8126554:	10c00035 	stwio	r3,0(r2)
		{
			limit_x = limit_x << 2;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
 8126558:	e13ff317 	ldw	r4,-52(fp)
 812655c:	21000044 	addi	r4,r4,1
 8126560:	e13ff315 	stw	r4,-52(fp)
 8126564:	e0bffa17 	ldw	r2,-24(fp)
 8126568:	e0fff317 	ldw	r3,-52(fp)
 812656c:	10fff12e 	bgeu	r2,r3,8126534 <alt_up_pixel_buffer_dma_draw_box+0x480>
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
				}
				addr = addr + limit_x;
 8126570:	e13fff17 	ldw	r4,-4(fp)
 8126574:	e0bffe17 	ldw	r2,-8(fp)
 8126578:	2089883a 	add	r4,r4,r2
 812657c:	e13fff15 	stw	r4,-4(fp)
		}
		else
		{
			limit_x = limit_x << 2;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
 8126580:	e0fff217 	ldw	r3,-56(fp)
 8126584:	18c00044 	addi	r3,r3,1
 8126588:	e0fff215 	stw	r3,-56(fp)
 812658c:	e13ff817 	ldw	r4,-32(fp)
 8126590:	e0bff217 	ldw	r2,-56(fp)
 8126594:	20bfe42e 	bgeu	r4,r2,8126528 <alt_up_pixel_buffer_dma_draw_box+0x474>
				}
				addr = addr + limit_x;
			}
		}
	}
}
 8126598:	e037883a 	mov	sp,fp
 812659c:	df000017 	ldw	fp,0(sp)
 81265a0:	dec00104 	addi	sp,sp,4
 81265a4:	f800283a 	ret

081265a8 <alt_up_pixel_buffer_dma_draw_hline>:

void alt_up_pixel_buffer_dma_draw_hline(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int x1, int y, int color, int backbuffer)
/* This method draws a horizontal line. This method is faster than using the line method because we know the direction of the line. */
{
 81265a8:	defff204 	addi	sp,sp,-56
 81265ac:	df000d15 	stw	fp,52(sp)
 81265b0:	df000d04 	addi	fp,sp,52
 81265b4:	e13ff315 	stw	r4,-52(fp)
 81265b8:	e17ff415 	stw	r5,-48(fp)
 81265bc:	e1bff515 	stw	r6,-44(fp)
 81265c0:	e1fff615 	stw	r7,-40(fp)
	register unsigned int addr;
	register unsigned int limit_x = pixel_buffer->x_resolution;
 81265c4:	e0bff317 	ldw	r2,-52(fp)
 81265c8:	10800f17 	ldw	r2,60(r2)
 81265cc:	e0bffe15 	stw	r2,-8(fp)
	register unsigned int limit_y = pixel_buffer->y_resolution;
 81265d0:	e0bff317 	ldw	r2,-52(fp)
 81265d4:	10801017 	ldw	r2,64(r2)
 81265d8:	e0bffd15 	stw	r2,-12(fp)
	register unsigned int temp;
	register unsigned int l_x = x0;
 81265dc:	e0bff417 	ldw	r2,-48(fp)
 81265e0:	e0bffc15 	stw	r2,-16(fp)
	register unsigned int r_x = x1;
 81265e4:	e0fff517 	ldw	r3,-44(fp)
 81265e8:	e0fffb15 	stw	r3,-20(fp)
	register unsigned int line_y = y;
 81265ec:	e13ff617 	ldw	r4,-40(fp)
 81265f0:	e13ffa15 	stw	r4,-24(fp)
	register unsigned int local_color = color;
 81265f4:	e0800117 	ldw	r2,4(fp)
 81265f8:	e0bff915 	stw	r2,-28(fp)
	
	/* Check coordinates */
	if (l_x > r_x)
 81265fc:	e0fffb17 	ldw	r3,-20(fp)
 8126600:	e13ffc17 	ldw	r4,-16(fp)
 8126604:	1900042e 	bgeu	r3,r4,8126618 <alt_up_pixel_buffer_dma_draw_hline+0x70>
	{
		temp = l_x;
 8126608:	e0bffc17 	ldw	r2,-16(fp)
		l_x = r_x;
 812660c:	e0fffb17 	ldw	r3,-20(fp)
 8126610:	e0fffc15 	stw	r3,-16(fp)
		r_x = temp;
 8126614:	e0bffb15 	stw	r2,-20(fp)
	}
	if ((l_x >= limit_x) || (line_y >= limit_y) || (r_x < 0) || (line_y < 0))
 8126618:	e13ffc17 	ldw	r4,-16(fp)
 812661c:	e0bffe17 	ldw	r2,-8(fp)
 8126620:	2080b12e 	bgeu	r4,r2,81268e8 <alt_up_pixel_buffer_dma_draw_hline+0x340>
 8126624:	e0fffa17 	ldw	r3,-24(fp)
 8126628:	e13ffd17 	ldw	r4,-12(fp)
 812662c:	19000136 	bltu	r3,r4,8126634 <alt_up_pixel_buffer_dma_draw_hline+0x8c>
	{
		/* Drawing outside of the window, so don't bother. */
		return;
 8126630:	0000ad06 	br	81268e8 <alt_up_pixel_buffer_dma_draw_hline+0x340>
	/* Clip the box and draw only within the confines of the screen. */
	if (l_x < 0)
	{
		l_x = 0;
	}
	if (r_x >= limit_x)
 8126634:	e0bffb17 	ldw	r2,-20(fp)
 8126638:	e0fffe17 	ldw	r3,-8(fp)
 812663c:	10c00336 	bltu	r2,r3,812664c <alt_up_pixel_buffer_dma_draw_hline+0xa4>
	{
		r_x = limit_x - 1;
 8126640:	e13ffe17 	ldw	r4,-8(fp)
 8126644:	213fffc4 	addi	r4,r4,-1
 8126648:	e13ffb15 	stw	r4,-20(fp)
	}

	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
 812664c:	e0800217 	ldw	r2,8(fp)
 8126650:	10800058 	cmpnei	r2,r2,1
 8126654:	1000041e 	bne	r2,zero,8126668 <alt_up_pixel_buffer_dma_draw_hline+0xc0>
		addr = pixel_buffer->back_buffer_start_address;
 8126658:	e0bff317 	ldw	r2,-52(fp)
 812665c:	10800c17 	ldw	r2,48(r2)
 8126660:	e0bfff15 	stw	r2,-4(fp)
 8126664:	00000306 	br	8126674 <alt_up_pixel_buffer_dma_draw_hline+0xcc>
	else
		addr = pixel_buffer->buffer_start_address;
 8126668:	e0bff317 	ldw	r2,-52(fp)
 812666c:	10800b17 	ldw	r2,44(r2)
 8126670:	e0bfff15 	stw	r2,-4(fp)

	/* Draw a horizontal line using one of the addressing modes. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
 8126674:	e0bff317 	ldw	r2,-52(fp)
 8126678:	10800d17 	ldw	r2,52(r2)
 812667c:	1004c03a 	cmpne	r2,r2,zero
 8126680:	1000431e 	bne	r2,zero,8126790 <alt_up_pixel_buffer_dma_draw_hline+0x1e8>
		/* Draw a horizontal line of a given color on the screen using the XY addressing mode. */
		register unsigned int x;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
 8126684:	e0bff317 	ldw	r2,-52(fp)
 8126688:	10801317 	ldw	r2,76(r2)
		addr = addr + (line_y << offset_y);
 812668c:	e0fffa17 	ldw	r3,-24(fp)
 8126690:	1884983a 	sll	r2,r3,r2
 8126694:	e13fff17 	ldw	r4,-4(fp)
 8126698:	2089883a 	add	r4,r4,r2
 812669c:	e13fff15 	stw	r4,-4(fp)
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a horizontal line. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
 81266a0:	e0bff317 	ldw	r2,-52(fp)
 81266a4:	10800e17 	ldw	r2,56(r2)
 81266a8:	10800058 	cmpnei	r2,r2,1
 81266ac:	10000f1e 	bne	r2,zero,81266ec <alt_up_pixel_buffer_dma_draw_hline+0x144>
			for (x = l_x; x <= r_x; x++)
 81266b0:	e0bffc17 	ldw	r2,-16(fp)
 81266b4:	e0bff815 	stw	r2,-32(fp)
 81266b8:	00000806 	br	81266dc <alt_up_pixel_buffer_dma_draw_hline+0x134>
			{
				IOWR_8DIRECT(addr, x, local_color);
 81266bc:	e0ffff17 	ldw	r3,-4(fp)
 81266c0:	e0bff817 	ldw	r2,-32(fp)
 81266c4:	1885883a 	add	r2,r3,r2
 81266c8:	e0fff917 	ldw	r3,-28(fp)
 81266cc:	10c00025 	stbio	r3,0(r2)
		addr = addr + (line_y << offset_y);
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a horizontal line. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (x = l_x; x <= r_x; x++)
 81266d0:	e0fff817 	ldw	r3,-32(fp)
 81266d4:	18c00044 	addi	r3,r3,1
 81266d8:	e0fff815 	stw	r3,-32(fp)
 81266dc:	e13ffb17 	ldw	r4,-20(fp)
 81266e0:	e0bff817 	ldw	r2,-32(fp)
 81266e4:	20bff52e 	bgeu	r4,r2,81266bc <alt_up_pixel_buffer_dma_draw_hline+0x114>
 81266e8:	00007f06 	br	81268e8 <alt_up_pixel_buffer_dma_draw_hline+0x340>
			{
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
 81266ec:	e0bff317 	ldw	r2,-52(fp)
 81266f0:	10800e17 	ldw	r2,56(r2)
 81266f4:	10800098 	cmpnei	r2,r2,2
 81266f8:	1000121e 	bne	r2,zero,8126744 <alt_up_pixel_buffer_dma_draw_hline+0x19c>
			for (x = l_x; x <= r_x; x++)
 81266fc:	e0fffc17 	ldw	r3,-16(fp)
 8126700:	e0fff815 	stw	r3,-32(fp)
 8126704:	00000b06 	br	8126734 <alt_up_pixel_buffer_dma_draw_hline+0x18c>
			{
				IOWR_16DIRECT(addr, x << 1, local_color);
 8126708:	e13ff817 	ldw	r4,-32(fp)
 812670c:	e13ff817 	ldw	r4,-32(fp)
 8126710:	2105883a 	add	r2,r4,r4
 8126714:	1007883a 	mov	r3,r2
 8126718:	e0bfff17 	ldw	r2,-4(fp)
 812671c:	1885883a 	add	r2,r3,r2
 8126720:	e0fff917 	ldw	r3,-28(fp)
 8126724:	10c0002d 	sthio	r3,0(r2)
			for (x = l_x; x <= r_x; x++)
			{
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (x = l_x; x <= r_x; x++)
 8126728:	e0bff817 	ldw	r2,-32(fp)
 812672c:	10800044 	addi	r2,r2,1
 8126730:	e0bff815 	stw	r2,-32(fp)
 8126734:	e0fffb17 	ldw	r3,-20(fp)
 8126738:	e13ff817 	ldw	r4,-32(fp)
 812673c:	193ff22e 	bgeu	r3,r4,8126708 <alt_up_pixel_buffer_dma_draw_hline+0x160>
 8126740:	00006906 	br	81268e8 <alt_up_pixel_buffer_dma_draw_hline+0x340>
				IOWR_16DIRECT(addr, x << 1, local_color);
			}
		}
		else
		{
			for (x = l_x; x <= r_x; x++)
 8126744:	e0bffc17 	ldw	r2,-16(fp)
 8126748:	e0bff815 	stw	r2,-32(fp)
 812674c:	00000c06 	br	8126780 <alt_up_pixel_buffer_dma_draw_hline+0x1d8>
			{
				IOWR_32DIRECT(addr, x << 2, local_color);
 8126750:	e0fff817 	ldw	r3,-32(fp)
 8126754:	e0fff817 	ldw	r3,-32(fp)
 8126758:	18c5883a 	add	r2,r3,r3
 812675c:	1085883a 	add	r2,r2,r2
 8126760:	1007883a 	mov	r3,r2
 8126764:	e0bfff17 	ldw	r2,-4(fp)
 8126768:	1885883a 	add	r2,r3,r2
 812676c:	e0fff917 	ldw	r3,-28(fp)
 8126770:	10c00035 	stwio	r3,0(r2)
				IOWR_16DIRECT(addr, x << 1, local_color);
			}
		}
		else
		{
			for (x = l_x; x <= r_x; x++)
 8126774:	e13ff817 	ldw	r4,-32(fp)
 8126778:	21000044 	addi	r4,r4,1
 812677c:	e13ff815 	stw	r4,-32(fp)
 8126780:	e0bffb17 	ldw	r2,-20(fp)
 8126784:	e0fff817 	ldw	r3,-32(fp)
 8126788:	10fff12e 	bgeu	r2,r3,8126750 <alt_up_pixel_buffer_dma_draw_hline+0x1a8>
 812678c:	00005606 	br	81268e8 <alt_up_pixel_buffer_dma_draw_hline+0x340>
	} else {
		/* Draw a horizontal line of a given color on the screen using the linear addressing mode. */
		register unsigned int x;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
 8126790:	e0bff317 	ldw	r2,-52(fp)
 8126794:	10800e17 	ldw	r2,56(r2)
 8126798:	10800058 	cmpnei	r2,r2,1
 812679c:	1000151e 	bne	r2,zero,81267f4 <alt_up_pixel_buffer_dma_draw_hline+0x24c>
			addr = addr + line_y * limit_x;
 81267a0:	e13ffa17 	ldw	r4,-24(fp)
 81267a4:	e0fffe17 	ldw	r3,-8(fp)
 81267a8:	20c5383a 	mul	r2,r4,r3
 81267ac:	e13fff17 	ldw	r4,-4(fp)
 81267b0:	2089883a 	add	r4,r4,r2
 81267b4:	e13fff15 	stw	r4,-4(fp)
			for (x = l_x; x <= r_x; x++)
 81267b8:	e0bffc17 	ldw	r2,-16(fp)
 81267bc:	e0bff715 	stw	r2,-36(fp)
 81267c0:	00000806 	br	81267e4 <alt_up_pixel_buffer_dma_draw_hline+0x23c>
			{
				IOWR_8DIRECT(addr, x, local_color);
 81267c4:	e0ffff17 	ldw	r3,-4(fp)
 81267c8:	e0bff717 	ldw	r2,-36(fp)
 81267cc:	1885883a 	add	r2,r3,r2
 81267d0:	e0fff917 	ldw	r3,-28(fp)
 81267d4:	10c00025 	stbio	r3,0(r2)
		register unsigned int x;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + line_y * limit_x;
			for (x = l_x; x <= r_x; x++)
 81267d8:	e0fff717 	ldw	r3,-36(fp)
 81267dc:	18c00044 	addi	r3,r3,1
 81267e0:	e0fff715 	stw	r3,-36(fp)
 81267e4:	e13ffb17 	ldw	r4,-20(fp)
 81267e8:	e0bff717 	ldw	r2,-36(fp)
 81267ec:	20bff52e 	bgeu	r4,r2,81267c4 <alt_up_pixel_buffer_dma_draw_hline+0x21c>
 81267f0:	00003d06 	br	81268e8 <alt_up_pixel_buffer_dma_draw_hline+0x340>
			{
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
 81267f4:	e0bff317 	ldw	r2,-52(fp)
 81267f8:	10800e17 	ldw	r2,56(r2)
 81267fc:	10800098 	cmpnei	r2,r2,2
 8126800:	10001c1e 	bne	r2,zero,8126874 <alt_up_pixel_buffer_dma_draw_hline+0x2cc>
			limit_x = limit_x << 1;
 8126804:	e0fffe17 	ldw	r3,-8(fp)
 8126808:	e0fffe17 	ldw	r3,-8(fp)
 812680c:	18c5883a 	add	r2,r3,r3
 8126810:	e0bffe15 	stw	r2,-8(fp)
			addr = addr + line_y * limit_x;
 8126814:	e13ffa17 	ldw	r4,-24(fp)
 8126818:	e0fffe17 	ldw	r3,-8(fp)
 812681c:	20c5383a 	mul	r2,r4,r3
 8126820:	e13fff17 	ldw	r4,-4(fp)
 8126824:	2089883a 	add	r4,r4,r2
 8126828:	e13fff15 	stw	r4,-4(fp)
			for (x = l_x; x <= r_x; x++)
 812682c:	e0bffc17 	ldw	r2,-16(fp)
 8126830:	e0bff715 	stw	r2,-36(fp)
 8126834:	00000b06 	br	8126864 <alt_up_pixel_buffer_dma_draw_hline+0x2bc>
			{
				IOWR_16DIRECT(addr, x << 1, local_color);
 8126838:	e0fff717 	ldw	r3,-36(fp)
 812683c:	e0fff717 	ldw	r3,-36(fp)
 8126840:	18c5883a 	add	r2,r3,r3
 8126844:	1007883a 	mov	r3,r2
 8126848:	e0bfff17 	ldw	r2,-4(fp)
 812684c:	1885883a 	add	r2,r3,r2
 8126850:	e0fff917 	ldw	r3,-28(fp)
 8126854:	10c0002d 	sthio	r3,0(r2)
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + line_y * limit_x;
			for (x = l_x; x <= r_x; x++)
 8126858:	e13ff717 	ldw	r4,-36(fp)
 812685c:	21000044 	addi	r4,r4,1
 8126860:	e13ff715 	stw	r4,-36(fp)
 8126864:	e0bffb17 	ldw	r2,-20(fp)
 8126868:	e0fff717 	ldw	r3,-36(fp)
 812686c:	10fff22e 	bgeu	r2,r3,8126838 <alt_up_pixel_buffer_dma_draw_hline+0x290>
 8126870:	00001d06 	br	81268e8 <alt_up_pixel_buffer_dma_draw_hline+0x340>
				IOWR_16DIRECT(addr, x << 1, local_color);
			}
		}
		else
		{
			limit_x = limit_x << 2;
 8126874:	e13ffe17 	ldw	r4,-8(fp)
 8126878:	e13ffe17 	ldw	r4,-8(fp)
 812687c:	2105883a 	add	r2,r4,r4
 8126880:	1085883a 	add	r2,r2,r2
 8126884:	e0bffe15 	stw	r2,-8(fp)
			addr = addr + line_y * limit_x;
 8126888:	e0fffa17 	ldw	r3,-24(fp)
 812688c:	e13ffe17 	ldw	r4,-8(fp)
 8126890:	1905383a 	mul	r2,r3,r4
 8126894:	e0ffff17 	ldw	r3,-4(fp)
 8126898:	1887883a 	add	r3,r3,r2
 812689c:	e0ffff15 	stw	r3,-4(fp)
			for (x = l_x; x <= r_x; x++)
 81268a0:	e13ffc17 	ldw	r4,-16(fp)
 81268a4:	e13ff715 	stw	r4,-36(fp)
 81268a8:	00000c06 	br	81268dc <alt_up_pixel_buffer_dma_draw_hline+0x334>
			{
				IOWR_32DIRECT(addr, x << 2, local_color);
 81268ac:	e0fff717 	ldw	r3,-36(fp)
 81268b0:	e0fff717 	ldw	r3,-36(fp)
 81268b4:	18c5883a 	add	r2,r3,r3
 81268b8:	1085883a 	add	r2,r2,r2
 81268bc:	1007883a 	mov	r3,r2
 81268c0:	e0bfff17 	ldw	r2,-4(fp)
 81268c4:	1885883a 	add	r2,r3,r2
 81268c8:	e0fff917 	ldw	r3,-28(fp)
 81268cc:	10c00035 	stwio	r3,0(r2)
		}
		else
		{
			limit_x = limit_x << 2;
			addr = addr + line_y * limit_x;
			for (x = l_x; x <= r_x; x++)
 81268d0:	e13ff717 	ldw	r4,-36(fp)
 81268d4:	21000044 	addi	r4,r4,1
 81268d8:	e13ff715 	stw	r4,-36(fp)
 81268dc:	e0bffb17 	ldw	r2,-20(fp)
 81268e0:	e0fff717 	ldw	r3,-36(fp)
 81268e4:	10fff12e 	bgeu	r2,r3,81268ac <alt_up_pixel_buffer_dma_draw_hline+0x304>
				IOWR_32DIRECT(addr, x << 2, local_color);
			}
			addr = addr + limit_x;
		}
	}
}
 81268e8:	e037883a 	mov	sp,fp
 81268ec:	df000017 	ldw	fp,0(sp)
 81268f0:	dec00104 	addi	sp,sp,4
 81268f4:	f800283a 	ret

081268f8 <alt_up_pixel_buffer_dma_draw_vline>:


void alt_up_pixel_buffer_dma_draw_vline(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x, int y0, int y1, int color, int backbuffer)
/* This method draws a vertical line. This method is faster than using the line method because we know the direction of the line. */

{
 81268f8:	defff104 	addi	sp,sp,-60
 81268fc:	df000e15 	stw	fp,56(sp)
 8126900:	df000e04 	addi	fp,sp,56
 8126904:	e13ff215 	stw	r4,-56(fp)
 8126908:	e17ff315 	stw	r5,-52(fp)
 812690c:	e1bff415 	stw	r6,-48(fp)
 8126910:	e1fff515 	stw	r7,-44(fp)
	register unsigned int addr;
	register unsigned int limit_x = pixel_buffer->x_resolution;
 8126914:	e0bff217 	ldw	r2,-56(fp)
 8126918:	10800f17 	ldw	r2,60(r2)
 812691c:	e0bffe15 	stw	r2,-8(fp)
	register unsigned int limit_y = pixel_buffer->y_resolution;
 8126920:	e0bff217 	ldw	r2,-56(fp)
 8126924:	10801017 	ldw	r2,64(r2)
 8126928:	e0bffd15 	stw	r2,-12(fp)
	register unsigned int temp;
	register unsigned int line_x = x;
 812692c:	e0bff317 	ldw	r2,-52(fp)
 8126930:	e0bffc15 	stw	r2,-16(fp)
	register unsigned int t_y = y0;
 8126934:	e0fff417 	ldw	r3,-48(fp)
 8126938:	e0fffb15 	stw	r3,-20(fp)
	register unsigned int b_y = y1;
 812693c:	e13ff517 	ldw	r4,-44(fp)
 8126940:	e13ffa15 	stw	r4,-24(fp)
	register unsigned int local_color = color;
 8126944:	e0800117 	ldw	r2,4(fp)
 8126948:	e0bff915 	stw	r2,-28(fp)
	
	/* Check coordinates */
	if (t_y > b_y)
 812694c:	e0fffa17 	ldw	r3,-24(fp)
 8126950:	e13ffb17 	ldw	r4,-20(fp)
 8126954:	1900042e 	bgeu	r3,r4,8126968 <alt_up_pixel_buffer_dma_draw_vline+0x70>
	{
		temp = t_y;
 8126958:	e0bffb17 	ldw	r2,-20(fp)
		t_y = b_y;
 812695c:	e0fffa17 	ldw	r3,-24(fp)
 8126960:	e0fffb15 	stw	r3,-20(fp)
		b_y = temp;
 8126964:	e0bffa15 	stw	r2,-24(fp)
	}
	if ((line_x >= limit_x) || (t_y >= limit_y) || (line_x < 0) || (b_y < 0))
 8126968:	e13ffc17 	ldw	r4,-16(fp)
 812696c:	e0bffe17 	ldw	r2,-8(fp)
 8126970:	2080d12e 	bgeu	r4,r2,8126cb8 <alt_up_pixel_buffer_dma_draw_vline+0x3c0>
 8126974:	e0fffb17 	ldw	r3,-20(fp)
 8126978:	e13ffd17 	ldw	r4,-12(fp)
 812697c:	19000136 	bltu	r3,r4,8126984 <alt_up_pixel_buffer_dma_draw_vline+0x8c>
	{
		/* Drawing outside of the window, so don't bother. */
		return;
 8126980:	0000cd06 	br	8126cb8 <alt_up_pixel_buffer_dma_draw_vline+0x3c0>
	/* Clip the box and draw only within the confines of the screen. */
	if (t_y < 0)
	{
		t_y = 0;
	}
	if (b_y >= limit_y)
 8126984:	e0bffa17 	ldw	r2,-24(fp)
 8126988:	e0fffd17 	ldw	r3,-12(fp)
 812698c:	10c00336 	bltu	r2,r3,812699c <alt_up_pixel_buffer_dma_draw_vline+0xa4>
	{
		b_y = limit_y - 1;
 8126990:	e13ffd17 	ldw	r4,-12(fp)
 8126994:	213fffc4 	addi	r4,r4,-1
 8126998:	e13ffa15 	stw	r4,-24(fp)
	}

	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
 812699c:	e0800217 	ldw	r2,8(fp)
 81269a0:	10800058 	cmpnei	r2,r2,1
 81269a4:	1000041e 	bne	r2,zero,81269b8 <alt_up_pixel_buffer_dma_draw_vline+0xc0>
		addr = pixel_buffer->back_buffer_start_address;
 81269a8:	e0bff217 	ldw	r2,-56(fp)
 81269ac:	10800c17 	ldw	r2,48(r2)
 81269b0:	e0bfff15 	stw	r2,-4(fp)
 81269b4:	00000306 	br	81269c4 <alt_up_pixel_buffer_dma_draw_vline+0xcc>
	else
		addr = pixel_buffer->buffer_start_address;
 81269b8:	e0bff217 	ldw	r2,-56(fp)
 81269bc:	10800b17 	ldw	r2,44(r2)
 81269c0:	e0bfff15 	stw	r2,-4(fp)

	/* Draw the vertical line using one of the addressing modes. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
 81269c4:	e0bff217 	ldw	r2,-56(fp)
 81269c8:	10800d17 	ldw	r2,52(r2)
 81269cc:	1004c03a 	cmpne	r2,r2,zero
 81269d0:	1000571e 	bne	r2,zero,8126b30 <alt_up_pixel_buffer_dma_draw_vline+0x238>
		/* Draw a vertical line of a given color on the screen using the XY addressing mode. */
		register unsigned int y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
 81269d4:	e0bff217 	ldw	r2,-56(fp)
 81269d8:	10801317 	ldw	r2,76(r2)
 81269dc:	e0bff715 	stw	r2,-36(fp)
		addr = addr + (t_y << offset_y);
 81269e0:	e0bff717 	ldw	r2,-36(fp)
 81269e4:	e0fffb17 	ldw	r3,-20(fp)
 81269e8:	1884983a 	sll	r2,r3,r2
 81269ec:	e13fff17 	ldw	r4,-4(fp)
 81269f0:	2089883a 	add	r4,r4,r2
 81269f4:	e13fff15 	stw	r4,-4(fp)
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
 81269f8:	e0bff217 	ldw	r2,-56(fp)
 81269fc:	10800e17 	ldw	r2,56(r2)
 8126a00:	10800058 	cmpnei	r2,r2,1
 8126a04:	1000151e 	bne	r2,zero,8126a5c <alt_up_pixel_buffer_dma_draw_vline+0x164>
			for (y = t_y; y <= b_y; y++)
 8126a08:	e0bffb17 	ldw	r2,-20(fp)
 8126a0c:	e0bff815 	stw	r2,-32(fp)
 8126a10:	00000e06 	br	8126a4c <alt_up_pixel_buffer_dma_draw_vline+0x154>
			{
				IOWR_8DIRECT(addr, line_x, local_color);
 8126a14:	e0ffff17 	ldw	r3,-4(fp)
 8126a18:	e0bffc17 	ldw	r2,-16(fp)
 8126a1c:	1885883a 	add	r2,r3,r2
 8126a20:	e0fff917 	ldw	r3,-28(fp)
 8126a24:	10c00025 	stbio	r3,0(r2)
				addr = addr + (1 << offset_y);
 8126a28:	e0fff717 	ldw	r3,-36(fp)
 8126a2c:	00800044 	movi	r2,1
 8126a30:	10c4983a 	sll	r2,r2,r3
 8126a34:	e0ffff17 	ldw	r3,-4(fp)
 8126a38:	1887883a 	add	r3,r3,r2
 8126a3c:	e0ffff15 	stw	r3,-4(fp)
		addr = addr + (t_y << offset_y);
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
 8126a40:	e13ff817 	ldw	r4,-32(fp)
 8126a44:	21000044 	addi	r4,r4,1
 8126a48:	e13ff815 	stw	r4,-32(fp)
 8126a4c:	e0bffa17 	ldw	r2,-24(fp)
 8126a50:	e0fff817 	ldw	r3,-32(fp)
 8126a54:	10ffef2e 	bgeu	r2,r3,8126a14 <alt_up_pixel_buffer_dma_draw_vline+0x11c>
 8126a58:	00009706 	br	8126cb8 <alt_up_pixel_buffer_dma_draw_vline+0x3c0>
			{
				IOWR_8DIRECT(addr, line_x, local_color);
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
 8126a5c:	e0bff217 	ldw	r2,-56(fp)
 8126a60:	10800e17 	ldw	r2,56(r2)
 8126a64:	10800098 	cmpnei	r2,r2,2
 8126a68:	1000181e 	bne	r2,zero,8126acc <alt_up_pixel_buffer_dma_draw_vline+0x1d4>
			for (y = t_y; y <= b_y; y++)
 8126a6c:	e13ffb17 	ldw	r4,-20(fp)
 8126a70:	e13ff815 	stw	r4,-32(fp)
 8126a74:	00001106 	br	8126abc <alt_up_pixel_buffer_dma_draw_vline+0x1c4>
			{
				IOWR_16DIRECT(addr, line_x << 1, local_color);
 8126a78:	e0fffc17 	ldw	r3,-16(fp)
 8126a7c:	e0fffc17 	ldw	r3,-16(fp)
 8126a80:	18c5883a 	add	r2,r3,r3
 8126a84:	1007883a 	mov	r3,r2
 8126a88:	e0bfff17 	ldw	r2,-4(fp)
 8126a8c:	1885883a 	add	r2,r3,r2
 8126a90:	e0fff917 	ldw	r3,-28(fp)
 8126a94:	10c0002d 	sthio	r3,0(r2)
				addr = addr + (1 << offset_y);
 8126a98:	e0fff717 	ldw	r3,-36(fp)
 8126a9c:	00800044 	movi	r2,1
 8126aa0:	10c4983a 	sll	r2,r2,r3
 8126aa4:	e13fff17 	ldw	r4,-4(fp)
 8126aa8:	2089883a 	add	r4,r4,r2
 8126aac:	e13fff15 	stw	r4,-4(fp)
			{
				IOWR_8DIRECT(addr, line_x, local_color);
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
 8126ab0:	e0bff817 	ldw	r2,-32(fp)
 8126ab4:	10800044 	addi	r2,r2,1
 8126ab8:	e0bff815 	stw	r2,-32(fp)
 8126abc:	e0fffa17 	ldw	r3,-24(fp)
 8126ac0:	e13ff817 	ldw	r4,-32(fp)
 8126ac4:	193fec2e 	bgeu	r3,r4,8126a78 <alt_up_pixel_buffer_dma_draw_vline+0x180>
 8126ac8:	00007b06 	br	8126cb8 <alt_up_pixel_buffer_dma_draw_vline+0x3c0>
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
 8126acc:	e0bffb17 	ldw	r2,-20(fp)
 8126ad0:	e0bff815 	stw	r2,-32(fp)
 8126ad4:	00001206 	br	8126b20 <alt_up_pixel_buffer_dma_draw_vline+0x228>
			{
				IOWR_32DIRECT(addr, line_x << 2, local_color);
 8126ad8:	e0fffc17 	ldw	r3,-16(fp)
 8126adc:	e0fffc17 	ldw	r3,-16(fp)
 8126ae0:	18c5883a 	add	r2,r3,r3
 8126ae4:	1085883a 	add	r2,r2,r2
 8126ae8:	1007883a 	mov	r3,r2
 8126aec:	e0bfff17 	ldw	r2,-4(fp)
 8126af0:	1885883a 	add	r2,r3,r2
 8126af4:	e0fff917 	ldw	r3,-28(fp)
 8126af8:	10c00035 	stwio	r3,0(r2)
				addr = addr + (1 << offset_y);
 8126afc:	e0fff717 	ldw	r3,-36(fp)
 8126b00:	00800044 	movi	r2,1
 8126b04:	10c4983a 	sll	r2,r2,r3
 8126b08:	e13fff17 	ldw	r4,-4(fp)
 8126b0c:	2089883a 	add	r4,r4,r2
 8126b10:	e13fff15 	stw	r4,-4(fp)
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
 8126b14:	e0bff817 	ldw	r2,-32(fp)
 8126b18:	10800044 	addi	r2,r2,1
 8126b1c:	e0bff815 	stw	r2,-32(fp)
 8126b20:	e0fffa17 	ldw	r3,-24(fp)
 8126b24:	e13ff817 	ldw	r4,-32(fp)
 8126b28:	193feb2e 	bgeu	r3,r4,8126ad8 <alt_up_pixel_buffer_dma_draw_vline+0x1e0>
 8126b2c:	00006206 	br	8126cb8 <alt_up_pixel_buffer_dma_draw_vline+0x3c0>
	} else {
		/* Draw a vertical line of a given color on the screen using the linear addressing mode. */
		register unsigned int y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
 8126b30:	e0bff217 	ldw	r2,-56(fp)
 8126b34:	10800e17 	ldw	r2,56(r2)
 8126b38:	10800058 	cmpnei	r2,r2,1
 8126b3c:	1000191e 	bne	r2,zero,8126ba4 <alt_up_pixel_buffer_dma_draw_vline+0x2ac>
			addr = addr + t_y * limit_x;
 8126b40:	e0fffb17 	ldw	r3,-20(fp)
 8126b44:	e13ffe17 	ldw	r4,-8(fp)
 8126b48:	1905383a 	mul	r2,r3,r4
 8126b4c:	e0ffff17 	ldw	r3,-4(fp)
 8126b50:	1887883a 	add	r3,r3,r2
 8126b54:	e0ffff15 	stw	r3,-4(fp)
			for (y = t_y; y <= b_y; y++)
 8126b58:	e13ffb17 	ldw	r4,-20(fp)
 8126b5c:	e13ff615 	stw	r4,-40(fp)
 8126b60:	00000c06 	br	8126b94 <alt_up_pixel_buffer_dma_draw_vline+0x29c>
			{
				IOWR_8DIRECT(addr, line_x, local_color);
 8126b64:	e0ffff17 	ldw	r3,-4(fp)
 8126b68:	e0bffc17 	ldw	r2,-16(fp)
 8126b6c:	1885883a 	add	r2,r3,r2
 8126b70:	e0fff917 	ldw	r3,-28(fp)
 8126b74:	10c00025 	stbio	r3,0(r2)
				addr = addr + limit_x;
 8126b78:	e0bfff17 	ldw	r2,-4(fp)
 8126b7c:	e0fffe17 	ldw	r3,-8(fp)
 8126b80:	10c5883a 	add	r2,r2,r3
 8126b84:	e0bfff15 	stw	r2,-4(fp)
		register unsigned int y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
 8126b88:	e13ff617 	ldw	r4,-40(fp)
 8126b8c:	21000044 	addi	r4,r4,1
 8126b90:	e13ff615 	stw	r4,-40(fp)
 8126b94:	e0bffa17 	ldw	r2,-24(fp)
 8126b98:	e0fff617 	ldw	r3,-40(fp)
 8126b9c:	10fff12e 	bgeu	r2,r3,8126b64 <alt_up_pixel_buffer_dma_draw_vline+0x26c>
 8126ba0:	00004506 	br	8126cb8 <alt_up_pixel_buffer_dma_draw_vline+0x3c0>
			{
				IOWR_8DIRECT(addr, line_x, local_color);
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
 8126ba4:	e0bff217 	ldw	r2,-56(fp)
 8126ba8:	10800e17 	ldw	r2,56(r2)
 8126bac:	10800098 	cmpnei	r2,r2,2
 8126bb0:	1000201e 	bne	r2,zero,8126c34 <alt_up_pixel_buffer_dma_draw_vline+0x33c>
			limit_x = limit_x << 1;
 8126bb4:	e13ffe17 	ldw	r4,-8(fp)
 8126bb8:	e13ffe17 	ldw	r4,-8(fp)
 8126bbc:	2105883a 	add	r2,r4,r4
 8126bc0:	e0bffe15 	stw	r2,-8(fp)
			addr = addr + t_y * limit_x;
 8126bc4:	e0fffb17 	ldw	r3,-20(fp)
 8126bc8:	e13ffe17 	ldw	r4,-8(fp)
 8126bcc:	1905383a 	mul	r2,r3,r4
 8126bd0:	e0ffff17 	ldw	r3,-4(fp)
 8126bd4:	1887883a 	add	r3,r3,r2
 8126bd8:	e0ffff15 	stw	r3,-4(fp)
			for (y = t_y; y <= b_y; y++)
 8126bdc:	e13ffb17 	ldw	r4,-20(fp)
 8126be0:	e13ff615 	stw	r4,-40(fp)
 8126be4:	00000f06 	br	8126c24 <alt_up_pixel_buffer_dma_draw_vline+0x32c>
			{
				IOWR_16DIRECT(addr, line_x << 1, local_color);
 8126be8:	e0fffc17 	ldw	r3,-16(fp)
 8126bec:	e0fffc17 	ldw	r3,-16(fp)
 8126bf0:	18c5883a 	add	r2,r3,r3
 8126bf4:	1007883a 	mov	r3,r2
 8126bf8:	e0bfff17 	ldw	r2,-4(fp)
 8126bfc:	1885883a 	add	r2,r3,r2
 8126c00:	e0fff917 	ldw	r3,-28(fp)
 8126c04:	10c0002d 	sthio	r3,0(r2)
				addr = addr + limit_x;
 8126c08:	e13fff17 	ldw	r4,-4(fp)
 8126c0c:	e0bffe17 	ldw	r2,-8(fp)
 8126c10:	2089883a 	add	r4,r4,r2
 8126c14:	e13fff15 	stw	r4,-4(fp)
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
 8126c18:	e0fff617 	ldw	r3,-40(fp)
 8126c1c:	18c00044 	addi	r3,r3,1
 8126c20:	e0fff615 	stw	r3,-40(fp)
 8126c24:	e13ffa17 	ldw	r4,-24(fp)
 8126c28:	e0bff617 	ldw	r2,-40(fp)
 8126c2c:	20bfee2e 	bgeu	r4,r2,8126be8 <alt_up_pixel_buffer_dma_draw_vline+0x2f0>
 8126c30:	00002106 	br	8126cb8 <alt_up_pixel_buffer_dma_draw_vline+0x3c0>
				addr = addr + limit_x;
			}
		}
		else
		{
			limit_x = limit_x << 2;
 8126c34:	e0fffe17 	ldw	r3,-8(fp)
 8126c38:	e0fffe17 	ldw	r3,-8(fp)
 8126c3c:	18c5883a 	add	r2,r3,r3
 8126c40:	1085883a 	add	r2,r2,r2
 8126c44:	e0bffe15 	stw	r2,-8(fp)
			addr = addr + t_y * limit_x;
 8126c48:	e13ffb17 	ldw	r4,-20(fp)
 8126c4c:	e0fffe17 	ldw	r3,-8(fp)
 8126c50:	20c5383a 	mul	r2,r4,r3
 8126c54:	e13fff17 	ldw	r4,-4(fp)
 8126c58:	2089883a 	add	r4,r4,r2
 8126c5c:	e13fff15 	stw	r4,-4(fp)
			for (y = t_y; y <= b_y; y++)
 8126c60:	e0bffb17 	ldw	r2,-20(fp)
 8126c64:	e0bff615 	stw	r2,-40(fp)
 8126c68:	00001006 	br	8126cac <alt_up_pixel_buffer_dma_draw_vline+0x3b4>
			{
				IOWR_32DIRECT(addr, line_x << 2, local_color);
 8126c6c:	e0fffc17 	ldw	r3,-16(fp)
 8126c70:	e0fffc17 	ldw	r3,-16(fp)
 8126c74:	18c5883a 	add	r2,r3,r3
 8126c78:	1085883a 	add	r2,r2,r2
 8126c7c:	1007883a 	mov	r3,r2
 8126c80:	e0bfff17 	ldw	r2,-4(fp)
 8126c84:	1885883a 	add	r2,r3,r2
 8126c88:	e0fff917 	ldw	r3,-28(fp)
 8126c8c:	10c00035 	stwio	r3,0(r2)
				addr = addr + limit_x;
 8126c90:	e13fff17 	ldw	r4,-4(fp)
 8126c94:	e0bffe17 	ldw	r2,-8(fp)
 8126c98:	2089883a 	add	r4,r4,r2
 8126c9c:	e13fff15 	stw	r4,-4(fp)
		}
		else
		{
			limit_x = limit_x << 2;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
 8126ca0:	e0fff617 	ldw	r3,-40(fp)
 8126ca4:	18c00044 	addi	r3,r3,1
 8126ca8:	e0fff615 	stw	r3,-40(fp)
 8126cac:	e13ffa17 	ldw	r4,-24(fp)
 8126cb0:	e0bff617 	ldw	r2,-40(fp)
 8126cb4:	20bfed2e 	bgeu	r4,r2,8126c6c <alt_up_pixel_buffer_dma_draw_vline+0x374>
				IOWR_32DIRECT(addr, line_x << 2, local_color);
				addr = addr + limit_x;
			}
		}
	}
}
 8126cb8:	e037883a 	mov	sp,fp
 8126cbc:	df000017 	ldw	fp,0(sp)
 8126cc0:	dec00104 	addi	sp,sp,4
 8126cc4:	f800283a 	ret

08126cc8 <alt_up_pixel_buffer_dma_draw_rectangle>:

void alt_up_pixel_buffer_dma_draw_rectangle(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int y0, int x1, int y1, int color, int backbuffer)
{
 8126cc8:	defff804 	addi	sp,sp,-32
 8126ccc:	dfc00715 	stw	ra,28(sp)
 8126cd0:	df000615 	stw	fp,24(sp)
 8126cd4:	df000604 	addi	fp,sp,24
 8126cd8:	e13ffc15 	stw	r4,-16(fp)
 8126cdc:	e17ffd15 	stw	r5,-12(fp)
 8126ce0:	e1bffe15 	stw	r6,-8(fp)
 8126ce4:	e1ffff15 	stw	r7,-4(fp)
	alt_up_pixel_buffer_dma_draw_hline(pixel_buffer, x0, x1, y0, color, backbuffer);
 8126ce8:	e0800317 	ldw	r2,12(fp)
 8126cec:	d8800015 	stw	r2,0(sp)
 8126cf0:	e0800417 	ldw	r2,16(fp)
 8126cf4:	d8800115 	stw	r2,4(sp)
 8126cf8:	e13ffc17 	ldw	r4,-16(fp)
 8126cfc:	e17ffd17 	ldw	r5,-12(fp)
 8126d00:	e1bfff17 	ldw	r6,-4(fp)
 8126d04:	e1fffe17 	ldw	r7,-8(fp)
 8126d08:	81265a80 	call	81265a8 <alt_up_pixel_buffer_dma_draw_hline>
	alt_up_pixel_buffer_dma_draw_hline(pixel_buffer, x0, x1, y1, color, backbuffer);
 8126d0c:	e0800317 	ldw	r2,12(fp)
 8126d10:	d8800015 	stw	r2,0(sp)
 8126d14:	e0800417 	ldw	r2,16(fp)
 8126d18:	d8800115 	stw	r2,4(sp)
 8126d1c:	e13ffc17 	ldw	r4,-16(fp)
 8126d20:	e17ffd17 	ldw	r5,-12(fp)
 8126d24:	e1bfff17 	ldw	r6,-4(fp)
 8126d28:	e1c00217 	ldw	r7,8(fp)
 8126d2c:	81265a80 	call	81265a8 <alt_up_pixel_buffer_dma_draw_hline>
	alt_up_pixel_buffer_dma_draw_vline(pixel_buffer, x0, y0, y1, color, backbuffer);
 8126d30:	e0800317 	ldw	r2,12(fp)
 8126d34:	d8800015 	stw	r2,0(sp)
 8126d38:	e0800417 	ldw	r2,16(fp)
 8126d3c:	d8800115 	stw	r2,4(sp)
 8126d40:	e13ffc17 	ldw	r4,-16(fp)
 8126d44:	e17ffd17 	ldw	r5,-12(fp)
 8126d48:	e1bffe17 	ldw	r6,-8(fp)
 8126d4c:	e1c00217 	ldw	r7,8(fp)
 8126d50:	81268f80 	call	81268f8 <alt_up_pixel_buffer_dma_draw_vline>
	alt_up_pixel_buffer_dma_draw_vline(pixel_buffer, x1, y0, y1, color, backbuffer);
 8126d54:	e0800317 	ldw	r2,12(fp)
 8126d58:	d8800015 	stw	r2,0(sp)
 8126d5c:	e0800417 	ldw	r2,16(fp)
 8126d60:	d8800115 	stw	r2,4(sp)
 8126d64:	e13ffc17 	ldw	r4,-16(fp)
 8126d68:	e17fff17 	ldw	r5,-4(fp)
 8126d6c:	e1bffe17 	ldw	r6,-8(fp)
 8126d70:	e1c00217 	ldw	r7,8(fp)
 8126d74:	81268f80 	call	81268f8 <alt_up_pixel_buffer_dma_draw_vline>
}
 8126d78:	e037883a 	mov	sp,fp
 8126d7c:	dfc00117 	ldw	ra,4(sp)
 8126d80:	df000017 	ldw	fp,0(sp)
 8126d84:	dec00204 	addi	sp,sp,8
 8126d88:	f800283a 	ret

08126d8c <helper_plot_pixel>:

void helper_plot_pixel(register unsigned int buffer_start, register int line_size, register int x, register int y, register int color, register int mode)
/* This is a helper function that draws a pixel at a given location. Note that no boundary checks are made,
 * so drawing off-screen may cause unpredictable side effects. */
{
 8126d8c:	defffb04 	addi	sp,sp,-20
 8126d90:	df000415 	stw	fp,16(sp)
 8126d94:	df000404 	addi	fp,sp,16
 8126d98:	e13ffc15 	stw	r4,-16(fp)
 8126d9c:	e17ffd15 	stw	r5,-12(fp)
 8126da0:	e1bffe15 	stw	r6,-8(fp)
 8126da4:	e1ffff15 	stw	r7,-4(fp)
	if (mode == 0)
 8126da8:	e0c00217 	ldw	r3,8(fp)
 8126dac:	1804c03a 	cmpne	r2,r3,zero
 8126db0:	10000b1e 	bne	r2,zero,8126de0 <helper_plot_pixel+0x54>
		IOWR_8DIRECT(buffer_start, line_size*y+x, color);
 8126db4:	e13ffd17 	ldw	r4,-12(fp)
 8126db8:	e0ffff17 	ldw	r3,-4(fp)
 8126dbc:	20c5383a 	mul	r2,r4,r3
 8126dc0:	e13ffe17 	ldw	r4,-8(fp)
 8126dc4:	1105883a 	add	r2,r2,r4
 8126dc8:	1007883a 	mov	r3,r2
 8126dcc:	e0bffc17 	ldw	r2,-16(fp)
 8126dd0:	1885883a 	add	r2,r3,r2
 8126dd4:	e0c00117 	ldw	r3,4(fp)
 8126dd8:	10c00025 	stbio	r3,0(r2)
 8126ddc:	00001b06 	br	8126e4c <helper_plot_pixel+0xc0>
	else if (mode == 1)
 8126de0:	e1000217 	ldw	r4,8(fp)
 8126de4:	20800058 	cmpnei	r2,r4,1
 8126de8:	10000c1e 	bne	r2,zero,8126e1c <helper_plot_pixel+0x90>
		IOWR_16DIRECT(buffer_start, (line_size*y+x) << 1, color);
 8126dec:	e0fffd17 	ldw	r3,-12(fp)
 8126df0:	e13fff17 	ldw	r4,-4(fp)
 8126df4:	1905383a 	mul	r2,r3,r4
 8126df8:	e0fffe17 	ldw	r3,-8(fp)
 8126dfc:	10c5883a 	add	r2,r2,r3
 8126e00:	1085883a 	add	r2,r2,r2
 8126e04:	1007883a 	mov	r3,r2
 8126e08:	e0bffc17 	ldw	r2,-16(fp)
 8126e0c:	1885883a 	add	r2,r3,r2
 8126e10:	e1000117 	ldw	r4,4(fp)
 8126e14:	1100002d 	sthio	r4,0(r2)
 8126e18:	00000c06 	br	8126e4c <helper_plot_pixel+0xc0>
	else
		IOWR_32DIRECT(buffer_start, (line_size*y+x) << 2, color);
 8126e1c:	e0fffd17 	ldw	r3,-12(fp)
 8126e20:	e13fff17 	ldw	r4,-4(fp)
 8126e24:	1905383a 	mul	r2,r3,r4
 8126e28:	e0fffe17 	ldw	r3,-8(fp)
 8126e2c:	10c5883a 	add	r2,r2,r3
 8126e30:	1085883a 	add	r2,r2,r2
 8126e34:	1085883a 	add	r2,r2,r2
 8126e38:	1007883a 	mov	r3,r2
 8126e3c:	e0bffc17 	ldw	r2,-16(fp)
 8126e40:	1885883a 	add	r2,r3,r2
 8126e44:	e1000117 	ldw	r4,4(fp)
 8126e48:	11000035 	stwio	r4,0(r2)
}
 8126e4c:	e037883a 	mov	sp,fp
 8126e50:	df000017 	ldw	fp,0(sp)
 8126e54:	dec00104 	addi	sp,sp,4
 8126e58:	f800283a 	ret

08126e5c <alt_up_pixel_buffer_dma_draw_line>:

void alt_up_pixel_buffer_dma_draw_line(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int y0, int x1, int y1, int color, int backbuffer)
/* This function draws a line between points (x0, y0) and (x1, y1). The function does not check if it draws a pixel within screen boundaries.
 * users should ensure that the line is drawn within the screen boundaries. */
{
 8126e5c:	deffe404 	addi	sp,sp,-112
 8126e60:	dfc01b15 	stw	ra,108(sp)
 8126e64:	df001a15 	stw	fp,104(sp)
 8126e68:	df001a04 	addi	fp,sp,104
 8126e6c:	e13fe815 	stw	r4,-96(fp)
 8126e70:	e17fe915 	stw	r5,-92(fp)
 8126e74:	e1bfea15 	stw	r6,-88(fp)
 8126e78:	e1ffeb15 	stw	r7,-84(fp)
	register int x_0 = x0;
 8126e7c:	e0bfe917 	ldw	r2,-92(fp)
 8126e80:	e0bffa15 	stw	r2,-24(fp)
	register int y_0 = y0;
 8126e84:	e0ffea17 	ldw	r3,-88(fp)
 8126e88:	e0fff915 	stw	r3,-28(fp)
	register int x_1 = x1;
 8126e8c:	e13feb17 	ldw	r4,-84(fp)
 8126e90:	e13ff815 	stw	r4,-32(fp)
	register int y_1 = y1;
 8126e94:	e0800217 	ldw	r2,8(fp)
 8126e98:	e0bff715 	stw	r2,-36(fp)
	register char steep = (ABS(y_1 - y_0) > ABS(x_1 - x_0)) ? 1 : 0;
 8126e9c:	e0fff717 	ldw	r3,-36(fp)
 8126ea0:	e13ff917 	ldw	r4,-28(fp)
 8126ea4:	1905c83a 	sub	r2,r3,r4
 8126ea8:	e0bfff15 	stw	r2,-4(fp)
 8126eac:	e0ffff17 	ldw	r3,-4(fp)
 8126eb0:	1804403a 	cmpge	r2,r3,zero
 8126eb4:	1000031e 	bne	r2,zero,8126ec4 <alt_up_pixel_buffer_dma_draw_line+0x68>
 8126eb8:	e13fff17 	ldw	r4,-4(fp)
 8126ebc:	0109c83a 	sub	r4,zero,r4
 8126ec0:	e13fff15 	stw	r4,-4(fp)
 8126ec4:	e0fff817 	ldw	r3,-32(fp)
 8126ec8:	e13ffa17 	ldw	r4,-24(fp)
 8126ecc:	1905c83a 	sub	r2,r3,r4
 8126ed0:	e0bffe15 	stw	r2,-8(fp)
 8126ed4:	e0fffe17 	ldw	r3,-8(fp)
 8126ed8:	1804403a 	cmpge	r2,r3,zero
 8126edc:	1000031e 	bne	r2,zero,8126eec <alt_up_pixel_buffer_dma_draw_line+0x90>
 8126ee0:	e13ffe17 	ldw	r4,-8(fp)
 8126ee4:	0109c83a 	sub	r4,zero,r4
 8126ee8:	e13ffe15 	stw	r4,-8(fp)
 8126eec:	e0fffe17 	ldw	r3,-8(fp)
 8126ef0:	e13fff17 	ldw	r4,-4(fp)
 8126ef4:	1904803a 	cmplt	r2,r3,r4
 8126ef8:	e0bff605 	stb	r2,-40(fp)
	register int deltax, deltay, error, ystep, x, y;
	register int color_mode =	(pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) ? 0 :
								(pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) ? 1 : 2;
 8126efc:	e0bfe817 	ldw	r2,-96(fp)
 8126f00:	10800e17 	ldw	r2,56(r2)
 8126f04:	10800060 	cmpeqi	r2,r2,1
 8126f08:	10000c1e 	bne	r2,zero,8126f3c <alt_up_pixel_buffer_dma_draw_line+0xe0>
 8126f0c:	e0bfe817 	ldw	r2,-96(fp)
 8126f10:	10800e17 	ldw	r2,56(r2)
 8126f14:	10800098 	cmpnei	r2,r2,2
 8126f18:	1000031e 	bne	r2,zero,8126f28 <alt_up_pixel_buffer_dma_draw_line+0xcc>
 8126f1c:	00800044 	movi	r2,1
 8126f20:	e0bffc15 	stw	r2,-16(fp)
 8126f24:	00000206 	br	8126f30 <alt_up_pixel_buffer_dma_draw_line+0xd4>
 8126f28:	00c00084 	movi	r3,2
 8126f2c:	e0fffc15 	stw	r3,-16(fp)
 8126f30:	e13ffc17 	ldw	r4,-16(fp)
 8126f34:	e13ffd15 	stw	r4,-12(fp)
 8126f38:	00000106 	br	8126f40 <alt_up_pixel_buffer_dma_draw_line+0xe4>
 8126f3c:	e03ffd15 	stw	zero,-12(fp)
 8126f40:	e0bffd17 	ldw	r2,-12(fp)
 8126f44:	e0bfef15 	stw	r2,-68(fp)
	register int line_color = color;
 8126f48:	e0c00317 	ldw	r3,12(fp)
 8126f4c:	e0ffee15 	stw	r3,-72(fp)
	register unsigned int buffer_start;
	register int line_size = (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) ? (1 << (pixel_buffer->y_coord_offset-color_mode)) : pixel_buffer->x_resolution;
 8126f50:	e0bfe817 	ldw	r2,-96(fp)
 8126f54:	10800d17 	ldw	r2,52(r2)
 8126f58:	1004c03a 	cmpne	r2,r2,zero
 8126f5c:	1000091e 	bne	r2,zero,8126f84 <alt_up_pixel_buffer_dma_draw_line+0x128>
 8126f60:	e0bfe817 	ldw	r2,-96(fp)
 8126f64:	10c01317 	ldw	r3,76(r2)
 8126f68:	e0bfef17 	ldw	r2,-68(fp)
 8126f6c:	1885c83a 	sub	r2,r3,r2
 8126f70:	1007883a 	mov	r3,r2
 8126f74:	00800044 	movi	r2,1
 8126f78:	10c4983a 	sll	r2,r2,r3
 8126f7c:	e0bffb15 	stw	r2,-20(fp)
 8126f80:	00000306 	br	8126f90 <alt_up_pixel_buffer_dma_draw_line+0x134>
 8126f84:	e0bfe817 	ldw	r2,-96(fp)
 8126f88:	10800f17 	ldw	r2,60(r2)
 8126f8c:	e0bffb15 	stw	r2,-20(fp)
 8126f90:	e13ffb17 	ldw	r4,-20(fp)
 8126f94:	e13fec15 	stw	r4,-80(fp)

	if (backbuffer == 1)
 8126f98:	e0800417 	ldw	r2,16(fp)
 8126f9c:	10800058 	cmpnei	r2,r2,1
 8126fa0:	1000041e 	bne	r2,zero,8126fb4 <alt_up_pixel_buffer_dma_draw_line+0x158>
		buffer_start = pixel_buffer->back_buffer_start_address;
 8126fa4:	e0bfe817 	ldw	r2,-96(fp)
 8126fa8:	10800c17 	ldw	r2,48(r2)
 8126fac:	e0bfed15 	stw	r2,-76(fp)
 8126fb0:	00000306 	br	8126fc0 <alt_up_pixel_buffer_dma_draw_line+0x164>
	else
		buffer_start = pixel_buffer->buffer_start_address;
 8126fb4:	e0bfe817 	ldw	r2,-96(fp)
 8126fb8:	10800b17 	ldw	r2,44(r2)
 8126fbc:	e0bfed15 	stw	r2,-76(fp)

	/* Preprocessing inputs */
	if (steep > 0) {
 8126fc0:	e0fff603 	ldbu	r3,-40(fp)
 8126fc4:	18803fcc 	andi	r2,r3,255
 8126fc8:	1080201c 	xori	r2,r2,128
 8126fcc:	10bfe004 	addi	r2,r2,-128
 8126fd0:	10800050 	cmplti	r2,r2,1
 8126fd4:	10000c1e 	bne	r2,zero,8127008 <alt_up_pixel_buffer_dma_draw_line+0x1ac>
		// Swap x_0 and y_0
		error = x_0;
 8126fd8:	e13ffa17 	ldw	r4,-24(fp)
 8126fdc:	e13ff315 	stw	r4,-52(fp)
		x_0 = y_0;
 8126fe0:	e0bff917 	ldw	r2,-28(fp)
 8126fe4:	e0bffa15 	stw	r2,-24(fp)
		y_0 = error;
 8126fe8:	e0fff317 	ldw	r3,-52(fp)
 8126fec:	e0fff915 	stw	r3,-28(fp)
		// Swap x_1 and y_1
		error = x_1;
 8126ff0:	e13ff817 	ldw	r4,-32(fp)
 8126ff4:	e13ff315 	stw	r4,-52(fp)
		x_1 = y_1;
 8126ff8:	e0bff717 	ldw	r2,-36(fp)
 8126ffc:	e0bff815 	stw	r2,-32(fp)
		y_1 = error;
 8127000:	e0fff317 	ldw	r3,-52(fp)
 8127004:	e0fff715 	stw	r3,-36(fp)
	}
	if (x_0 > x_1) {
 8127008:	e13ff817 	ldw	r4,-32(fp)
 812700c:	e0bffa17 	ldw	r2,-24(fp)
 8127010:	20800c0e 	bge	r4,r2,8127044 <alt_up_pixel_buffer_dma_draw_line+0x1e8>
		// Swap x_0 and x_1
		error = x_0;
 8127014:	e0fffa17 	ldw	r3,-24(fp)
 8127018:	e0fff315 	stw	r3,-52(fp)
		x_0 = x_1;
 812701c:	e13ff817 	ldw	r4,-32(fp)
 8127020:	e13ffa15 	stw	r4,-24(fp)
		x_1 = error;
 8127024:	e0bff317 	ldw	r2,-52(fp)
 8127028:	e0bff815 	stw	r2,-32(fp)
		// Swap y_0 and y_1
		error = y_0;
 812702c:	e0fff917 	ldw	r3,-28(fp)
 8127030:	e0fff315 	stw	r3,-52(fp)
		y_0 = y_1;
 8127034:	e13ff717 	ldw	r4,-36(fp)
 8127038:	e13ff915 	stw	r4,-28(fp)
		y_1 = error;
 812703c:	e0bff317 	ldw	r2,-52(fp)
 8127040:	e0bff715 	stw	r2,-36(fp)
	}

	/* Setup local variables */
	deltax = x_1 - x_0;
 8127044:	e0fff817 	ldw	r3,-32(fp)
 8127048:	e13ffa17 	ldw	r4,-24(fp)
 812704c:	1907c83a 	sub	r3,r3,r4
 8127050:	e0fff515 	stw	r3,-44(fp)
	deltay = ABS(y_1 - y_0);
 8127054:	e0fff717 	ldw	r3,-36(fp)
 8127058:	e13ff917 	ldw	r4,-28(fp)
 812705c:	1905c83a 	sub	r2,r3,r4
 8127060:	e0bff415 	stw	r2,-48(fp)
 8127064:	e0fff417 	ldw	r3,-48(fp)
 8127068:	1804403a 	cmpge	r2,r3,zero
 812706c:	1000031e 	bne	r2,zero,812707c <alt_up_pixel_buffer_dma_draw_line+0x220>
 8127070:	e13ff417 	ldw	r4,-48(fp)
 8127074:	0109c83a 	sub	r4,zero,r4
 8127078:	e13ff415 	stw	r4,-48(fp)
	error = -(deltax / 2); 
 812707c:	e0fff517 	ldw	r3,-44(fp)
 8127080:	1804d7fa 	srli	r2,r3,31
 8127084:	e13ff517 	ldw	r4,-44(fp)
 8127088:	1105883a 	add	r2,r2,r4
 812708c:	1005d07a 	srai	r2,r2,1
 8127090:	0085c83a 	sub	r2,zero,r2
 8127094:	e0bff315 	stw	r2,-52(fp)
	y = y_0;
 8127098:	e0bff917 	ldw	r2,-28(fp)
 812709c:	e0bff015 	stw	r2,-64(fp)
	if (y_0 < y_1)
 81270a0:	e0fff917 	ldw	r3,-28(fp)
 81270a4:	e13ff717 	ldw	r4,-36(fp)
 81270a8:	1900030e 	bge	r3,r4,81270b8 <alt_up_pixel_buffer_dma_draw_line+0x25c>
		ystep = 1;
 81270ac:	00800044 	movi	r2,1
 81270b0:	e0bff215 	stw	r2,-56(fp)
 81270b4:	00000206 	br	81270c0 <alt_up_pixel_buffer_dma_draw_line+0x264>
	else
		ystep = -1;
 81270b8:	00ffffc4 	movi	r3,-1
 81270bc:	e0fff215 	stw	r3,-56(fp)

	/* Draw a line - either go along the x axis (steep = 0) or along the y axis (steep = 1). The code is replicated to
	 * compile well on low optimization levels. */
	if (steep == 1)
 81270c0:	e13ff603 	ldbu	r4,-40(fp)
 81270c4:	20803fcc 	andi	r2,r4,255
 81270c8:	1080201c 	xori	r2,r2,128
 81270cc:	10bfe004 	addi	r2,r2,-128
 81270d0:	10800058 	cmpnei	r2,r2,1
 81270d4:	1000221e 	bne	r2,zero,8127160 <alt_up_pixel_buffer_dma_draw_line+0x304>
	{
		for (x=x_0; x <= x_1; x++) {
 81270d8:	e0bffa17 	ldw	r2,-24(fp)
 81270dc:	e0bff115 	stw	r2,-60(fp)
 81270e0:	00001b06 	br	8127150 <alt_up_pixel_buffer_dma_draw_line+0x2f4>
			helper_plot_pixel(buffer_start, line_size, y, x, line_color, color_mode);
 81270e4:	e0ffee17 	ldw	r3,-72(fp)
 81270e8:	d8c00015 	stw	r3,0(sp)
 81270ec:	e13fef17 	ldw	r4,-68(fp)
 81270f0:	d9000115 	stw	r4,4(sp)
 81270f4:	e13fed17 	ldw	r4,-76(fp)
 81270f8:	e17fec17 	ldw	r5,-80(fp)
 81270fc:	e1bff017 	ldw	r6,-64(fp)
 8127100:	e1fff117 	ldw	r7,-60(fp)
 8127104:	8126d8c0 	call	8126d8c <helper_plot_pixel>
			error = error + deltay;
 8127108:	e0bff317 	ldw	r2,-52(fp)
 812710c:	e0fff417 	ldw	r3,-48(fp)
 8127110:	10c5883a 	add	r2,r2,r3
 8127114:	e0bff315 	stw	r2,-52(fp)
			if (error > 0) {
 8127118:	e13ff317 	ldw	r4,-52(fp)
 812711c:	20800050 	cmplti	r2,r4,1
 8127120:	1000081e 	bne	r2,zero,8127144 <alt_up_pixel_buffer_dma_draw_line+0x2e8>
				y = y + ystep;
 8127124:	e0bff017 	ldw	r2,-64(fp)
 8127128:	e0fff217 	ldw	r3,-56(fp)
 812712c:	10c5883a 	add	r2,r2,r3
 8127130:	e0bff015 	stw	r2,-64(fp)
				error = error - deltax;
 8127134:	e13ff317 	ldw	r4,-52(fp)
 8127138:	e0bff517 	ldw	r2,-44(fp)
 812713c:	2089c83a 	sub	r4,r4,r2
 8127140:	e13ff315 	stw	r4,-52(fp)

	/* Draw a line - either go along the x axis (steep = 0) or along the y axis (steep = 1). The code is replicated to
	 * compile well on low optimization levels. */
	if (steep == 1)
	{
		for (x=x_0; x <= x_1; x++) {
 8127144:	e0fff117 	ldw	r3,-60(fp)
 8127148:	18c00044 	addi	r3,r3,1
 812714c:	e0fff115 	stw	r3,-60(fp)
 8127150:	e13ff817 	ldw	r4,-32(fp)
 8127154:	e0bff117 	ldw	r2,-60(fp)
 8127158:	20bfe20e 	bge	r4,r2,81270e4 <alt_up_pixel_buffer_dma_draw_line+0x288>
 812715c:	00002106 	br	81271e4 <alt_up_pixel_buffer_dma_draw_line+0x388>
			}
		}
	}
	else
	{
		for (x=x_0; x <= x_1; x++) {
 8127160:	e0fffa17 	ldw	r3,-24(fp)
 8127164:	e0fff115 	stw	r3,-60(fp)
 8127168:	00001b06 	br	81271d8 <alt_up_pixel_buffer_dma_draw_line+0x37c>
			helper_plot_pixel(buffer_start, line_size, x, y, line_color, color_mode);
 812716c:	e13fee17 	ldw	r4,-72(fp)
 8127170:	d9000015 	stw	r4,0(sp)
 8127174:	e0bfef17 	ldw	r2,-68(fp)
 8127178:	d8800115 	stw	r2,4(sp)
 812717c:	e13fed17 	ldw	r4,-76(fp)
 8127180:	e17fec17 	ldw	r5,-80(fp)
 8127184:	e1bff117 	ldw	r6,-60(fp)
 8127188:	e1fff017 	ldw	r7,-64(fp)
 812718c:	8126d8c0 	call	8126d8c <helper_plot_pixel>
			error = error + deltay;
 8127190:	e0fff317 	ldw	r3,-52(fp)
 8127194:	e13ff417 	ldw	r4,-48(fp)
 8127198:	1907883a 	add	r3,r3,r4
 812719c:	e0fff315 	stw	r3,-52(fp)
			if (error > 0) {
 81271a0:	e0fff317 	ldw	r3,-52(fp)
 81271a4:	18800050 	cmplti	r2,r3,1
 81271a8:	1000081e 	bne	r2,zero,81271cc <alt_up_pixel_buffer_dma_draw_line+0x370>
				y = y + ystep;
 81271ac:	e13ff017 	ldw	r4,-64(fp)
 81271b0:	e0bff217 	ldw	r2,-56(fp)
 81271b4:	2089883a 	add	r4,r4,r2
 81271b8:	e13ff015 	stw	r4,-64(fp)
				error = error - deltax;
 81271bc:	e0fff317 	ldw	r3,-52(fp)
 81271c0:	e13ff517 	ldw	r4,-44(fp)
 81271c4:	1907c83a 	sub	r3,r3,r4
 81271c8:	e0fff315 	stw	r3,-52(fp)
			}
		}
	}
	else
	{
		for (x=x_0; x <= x_1; x++) {
 81271cc:	e0bff117 	ldw	r2,-60(fp)
 81271d0:	10800044 	addi	r2,r2,1
 81271d4:	e0bff115 	stw	r2,-60(fp)
 81271d8:	e0fff817 	ldw	r3,-32(fp)
 81271dc:	e13ff117 	ldw	r4,-60(fp)
 81271e0:	193fe20e 	bge	r3,r4,812716c <alt_up_pixel_buffer_dma_draw_line+0x310>
				y = y + ystep;
				error = error - deltax;
			}
		}
	}
}
 81271e4:	e037883a 	mov	sp,fp
 81271e8:	dfc00117 	ldw	ra,4(sp)
 81271ec:	df000017 	ldw	fp,0(sp)
 81271f0:	dec00204 	addi	sp,sp,8
 81271f4:	f800283a 	ret

081271f8 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
 81271f8:	defff404 	addi	sp,sp,-48
 81271fc:	df000b15 	stw	fp,44(sp)
 8127200:	df000b04 	addi	fp,sp,44
 8127204:	e13ffb15 	stw	r4,-20(fp)
 8127208:	e17ffc15 	stw	r5,-16(fp)
 812720c:	e1bffd15 	stw	r6,-12(fp)
 8127210:	e1fffe15 	stw	r7,-8(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
 8127214:	e03ff915 	stw	zero,-28(fp)
 8127218:	008204f4 	movhi	r2,2067
 812721c:	10aead04 	addi	r2,r2,-17740
 8127220:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
 8127224:	1005003a 	cmpeq	r2,r2,zero
 8127228:	1000411e 	bne	r2,zero,8127330 <alt_alarm_start+0x138>
  {
    if (alarm)
 812722c:	e0bffb17 	ldw	r2,-20(fp)
 8127230:	1005003a 	cmpeq	r2,r2,zero
 8127234:	10003b1e 	bne	r2,zero,8127324 <alt_alarm_start+0x12c>
    {
      alarm->callback = callback;
 8127238:	e0fffb17 	ldw	r3,-20(fp)
 812723c:	e0bffd17 	ldw	r2,-12(fp)
 8127240:	18800315 	stw	r2,12(r3)
      alarm->context  = context;
 8127244:	e0fffb17 	ldw	r3,-20(fp)
 8127248:	e0bffe17 	ldw	r2,-8(fp)
 812724c:	18800515 	stw	r2,20(r3)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8127250:	0005303a 	rdctl	r2,status
 8127254:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8127258:	e0fff817 	ldw	r3,-32(fp)
 812725c:	00bfff84 	movi	r2,-2
 8127260:	1884703a 	and	r2,r3,r2
 8127264:	1001703a 	wrctl	status,r2
  
  return context;
 8127268:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
 812726c:	e0bffa15 	stw	r2,-24(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 8127270:	008204f4 	movhi	r2,2067
 8127274:	10aeae04 	addi	r2,r2,-17736
 8127278:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
 812727c:	e0bff915 	stw	r2,-28(fp)
      
      alarm->time = nticks + current_nticks + 1; 
 8127280:	e0fffc17 	ldw	r3,-16(fp)
 8127284:	e0bff917 	ldw	r2,-28(fp)
 8127288:	1885883a 	add	r2,r3,r2
 812728c:	10c00044 	addi	r3,r2,1
 8127290:	e0bffb17 	ldw	r2,-20(fp)
 8127294:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
 8127298:	e0bffb17 	ldw	r2,-20(fp)
 812729c:	10c00217 	ldw	r3,8(r2)
 81272a0:	e0bff917 	ldw	r2,-28(fp)
 81272a4:	1880042e 	bgeu	r3,r2,81272b8 <alt_alarm_start+0xc0>
      {
        alarm->rollover = 1;
 81272a8:	e0fffb17 	ldw	r3,-20(fp)
 81272ac:	00800044 	movi	r2,1
 81272b0:	18800405 	stb	r2,16(r3)
 81272b4:	00000206 	br	81272c0 <alt_alarm_start+0xc8>
      }
      else
      {
        alarm->rollover = 0;
 81272b8:	e0bffb17 	ldw	r2,-20(fp)
 81272bc:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
 81272c0:	e0fffb17 	ldw	r3,-20(fp)
 81272c4:	008204f4 	movhi	r2,2067
 81272c8:	10a8b904 	addi	r2,r2,-23836
 81272cc:	e0bff615 	stw	r2,-40(fp)
 81272d0:	e0fff715 	stw	r3,-36(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 81272d4:	e0fff717 	ldw	r3,-36(fp)
 81272d8:	e0bff617 	ldw	r2,-40(fp)
 81272dc:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
 81272e0:	e0bff617 	ldw	r2,-40(fp)
 81272e4:	10c00017 	ldw	r3,0(r2)
 81272e8:	e0bff717 	ldw	r2,-36(fp)
 81272ec:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 81272f0:	e0bff617 	ldw	r2,-40(fp)
 81272f4:	10c00017 	ldw	r3,0(r2)
 81272f8:	e0bff717 	ldw	r2,-36(fp)
 81272fc:	18800115 	stw	r2,4(r3)
  list->next           = entry;
 8127300:	e0fff617 	ldw	r3,-40(fp)
 8127304:	e0bff717 	ldw	r2,-36(fp)
 8127308:	18800015 	stw	r2,0(r3)
 812730c:	e0bffa17 	ldw	r2,-24(fp)
 8127310:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8127314:	e0bff517 	ldw	r2,-44(fp)
 8127318:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
 812731c:	e03fff15 	stw	zero,-4(fp)
 8127320:	00000506 	br	8127338 <alt_alarm_start+0x140>
    }
    else
    {
      return -EINVAL;
 8127324:	00bffa84 	movi	r2,-22
 8127328:	e0bfff15 	stw	r2,-4(fp)
 812732c:	00000206 	br	8127338 <alt_alarm_start+0x140>
    }
  }
  else
  {
    return -ENOTSUP;
 8127330:	00bfde84 	movi	r2,-134
 8127334:	e0bfff15 	stw	r2,-4(fp)
 8127338:	e0bfff17 	ldw	r2,-4(fp)
  }
}
 812733c:	e037883a 	mov	sp,fp
 8127340:	df000017 	ldw	fp,0(sp)
 8127344:	dec00104 	addi	sp,sp,4
 8127348:	f800283a 	ret

0812734c <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 812734c:	defff804 	addi	sp,sp,-32
 8127350:	dfc00715 	stw	ra,28(sp)
 8127354:	df000615 	stw	fp,24(sp)
 8127358:	df000604 	addi	fp,sp,24
 812735c:	e13ffc15 	stw	r4,-16(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 8127360:	e0bffc17 	ldw	r2,-16(fp)
 8127364:	1004803a 	cmplt	r2,r2,zero
 8127368:	1000081e 	bne	r2,zero,812738c <close+0x40>
 812736c:	e0bffc17 	ldw	r2,-16(fp)
 8127370:	10800324 	muli	r2,r2,12
 8127374:	1007883a 	mov	r3,r2
 8127378:	008204f4 	movhi	r2,2067
 812737c:	10a84804 	addi	r2,r2,-24288
 8127380:	1887883a 	add	r3,r3,r2
 8127384:	e0ffff15 	stw	r3,-4(fp)
 8127388:	00000106 	br	8127390 <close+0x44>
 812738c:	e03fff15 	stw	zero,-4(fp)
 8127390:	e0bfff17 	ldw	r2,-4(fp)
 8127394:	e0bffb15 	stw	r2,-20(fp)

  if (fd)
 8127398:	e0bffb17 	ldw	r2,-20(fp)
 812739c:	1005003a 	cmpeq	r2,r2,zero
 81273a0:	10001d1e 	bne	r2,zero,8127418 <close+0xcc>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 81273a4:	e0bffb17 	ldw	r2,-20(fp)
 81273a8:	10800017 	ldw	r2,0(r2)
 81273ac:	10800417 	ldw	r2,16(r2)
 81273b0:	1005003a 	cmpeq	r2,r2,zero
 81273b4:	1000071e 	bne	r2,zero,81273d4 <close+0x88>
 81273b8:	e0bffb17 	ldw	r2,-20(fp)
 81273bc:	10800017 	ldw	r2,0(r2)
 81273c0:	10800417 	ldw	r2,16(r2)
 81273c4:	e13ffb17 	ldw	r4,-20(fp)
 81273c8:	103ee83a 	callr	r2
 81273cc:	e0bffe15 	stw	r2,-8(fp)
 81273d0:	00000106 	br	81273d8 <close+0x8c>
 81273d4:	e03ffe15 	stw	zero,-8(fp)
 81273d8:	e0bffe17 	ldw	r2,-8(fp)
 81273dc:	e0bffa15 	stw	r2,-24(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 81273e0:	e13ffc17 	ldw	r4,-16(fp)
 81273e4:	8127e840 	call	8127e84 <alt_release_fd>
    if (rval < 0)
 81273e8:	e0bffa17 	ldw	r2,-24(fp)
 81273ec:	1004403a 	cmpge	r2,r2,zero
 81273f0:	1000071e 	bne	r2,zero,8127410 <close+0xc4>
    {
      ALT_ERRNO = -rval;
 81273f4:	81274480 	call	8127448 <alt_get_errno>
 81273f8:	e0fffa17 	ldw	r3,-24(fp)
 81273fc:	00c7c83a 	sub	r3,zero,r3
 8127400:	10c00015 	stw	r3,0(r2)
      return -1;
 8127404:	00bfffc4 	movi	r2,-1
 8127408:	e0bffd15 	stw	r2,-12(fp)
 812740c:	00000806 	br	8127430 <close+0xe4>
    }
    return 0;
 8127410:	e03ffd15 	stw	zero,-12(fp)
 8127414:	00000606 	br	8127430 <close+0xe4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 8127418:	81274480 	call	8127448 <alt_get_errno>
 812741c:	1007883a 	mov	r3,r2
 8127420:	00801444 	movi	r2,81
 8127424:	18800015 	stw	r2,0(r3)
    return -1;
 8127428:	00bfffc4 	movi	r2,-1
 812742c:	e0bffd15 	stw	r2,-12(fp)
 8127430:	e0bffd17 	ldw	r2,-12(fp)
  }
}
 8127434:	e037883a 	mov	sp,fp
 8127438:	dfc00117 	ldw	ra,4(sp)
 812743c:	df000017 	ldw	fp,0(sp)
 8127440:	dec00204 	addi	sp,sp,8
 8127444:	f800283a 	ret

08127448 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 8127448:	defffd04 	addi	sp,sp,-12
 812744c:	dfc00215 	stw	ra,8(sp)
 8127450:	df000115 	stw	fp,4(sp)
 8127454:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 8127458:	008204f4 	movhi	r2,2067
 812745c:	10a8b704 	addi	r2,r2,-23844
 8127460:	10800017 	ldw	r2,0(r2)
 8127464:	1005003a 	cmpeq	r2,r2,zero
 8127468:	1000061e 	bne	r2,zero,8127484 <alt_get_errno+0x3c>
 812746c:	008204f4 	movhi	r2,2067
 8127470:	10a8b704 	addi	r2,r2,-23844
 8127474:	10800017 	ldw	r2,0(r2)
 8127478:	103ee83a 	callr	r2
 812747c:	e0bfff15 	stw	r2,-4(fp)
 8127480:	00000306 	br	8127490 <alt_get_errno+0x48>
 8127484:	008204f4 	movhi	r2,2067
 8127488:	10aeaf04 	addi	r2,r2,-17732
 812748c:	e0bfff15 	stw	r2,-4(fp)
 8127490:	e0bfff17 	ldw	r2,-4(fp)
}
 8127494:	e037883a 	mov	sp,fp
 8127498:	dfc00117 	ldw	ra,4(sp)
 812749c:	df000017 	ldw	fp,0(sp)
 81274a0:	dec00204 	addi	sp,sp,8
 81274a4:	f800283a 	ret

081274a8 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 81274a8:	defffe04 	addi	sp,sp,-8
 81274ac:	df000115 	stw	fp,4(sp)
 81274b0:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
 81274b4:	e03fff15 	stw	zero,-4(fp)
 81274b8:	00000506 	br	81274d0 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
 81274bc:	e0bfff17 	ldw	r2,-4(fp)
 81274c0:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
 81274c4:	e0bfff17 	ldw	r2,-4(fp)
 81274c8:	10800804 	addi	r2,r2,32
 81274cc:	e0bfff15 	stw	r2,-4(fp)
 81274d0:	e0bfff17 	ldw	r2,-4(fp)
 81274d4:	10810030 	cmpltui	r2,r2,1024
 81274d8:	103ff81e 	bne	r2,zero,81274bc <alt_dcache_flush_all+0x14>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 81274dc:	e037883a 	mov	sp,fp
 81274e0:	df000017 	ldw	fp,0(sp)
 81274e4:	dec00104 	addi	sp,sp,4
 81274e8:	f800283a 	ret

081274ec <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 81274ec:	defffc04 	addi	sp,sp,-16
 81274f0:	df000315 	stw	fp,12(sp)
 81274f4:	df000304 	addi	fp,sp,12
 81274f8:	e13ffd15 	stw	r4,-12(fp)
 81274fc:	e17ffe15 	stw	r5,-8(fp)
 8127500:	e1bfff15 	stw	r6,-4(fp)
  return len;
 8127504:	e0bfff17 	ldw	r2,-4(fp)
}
 8127508:	e037883a 	mov	sp,fp
 812750c:	df000017 	ldw	fp,0(sp)
 8127510:	dec00104 	addi	sp,sp,4
 8127514:	f800283a 	ret

08127518 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
 8127518:	defff904 	addi	sp,sp,-28
 812751c:	dfc00615 	stw	ra,24(sp)
 8127520:	df000515 	stw	fp,20(sp)
 8127524:	df000504 	addi	fp,sp,20
 8127528:	e13ffd15 	stw	r4,-12(fp)
 812752c:	e17ffe15 	stw	r5,-8(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
 8127530:	e0bffd17 	ldw	r2,-12(fp)
 8127534:	1005003a 	cmpeq	r2,r2,zero
 8127538:	1000041e 	bne	r2,zero,812754c <alt_dev_llist_insert+0x34>
 812753c:	e0bffd17 	ldw	r2,-12(fp)
 8127540:	10800217 	ldw	r2,8(r2)
 8127544:	1004c03a 	cmpne	r2,r2,zero
 8127548:	1000071e 	bne	r2,zero,8127568 <alt_dev_llist_insert+0x50>
  {
    ALT_ERRNO = EINVAL;
 812754c:	81275cc0 	call	81275cc <alt_get_errno>
 8127550:	1007883a 	mov	r3,r2
 8127554:	00800584 	movi	r2,22
 8127558:	18800015 	stw	r2,0(r3)
    return -EINVAL;
 812755c:	00bffa84 	movi	r2,-22
 8127560:	e0bfff15 	stw	r2,-4(fp)
 8127564:	00001306 	br	81275b4 <alt_dev_llist_insert+0x9c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
 8127568:	e0fffd17 	ldw	r3,-12(fp)
 812756c:	e0bffe17 	ldw	r2,-8(fp)
 8127570:	e0bffb15 	stw	r2,-20(fp)
 8127574:	e0fffc15 	stw	r3,-16(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 8127578:	e0fffc17 	ldw	r3,-16(fp)
 812757c:	e0bffb17 	ldw	r2,-20(fp)
 8127580:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
 8127584:	e0bffb17 	ldw	r2,-20(fp)
 8127588:	10c00017 	ldw	r3,0(r2)
 812758c:	e0bffc17 	ldw	r2,-16(fp)
 8127590:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 8127594:	e0bffb17 	ldw	r2,-20(fp)
 8127598:	10c00017 	ldw	r3,0(r2)
 812759c:	e0bffc17 	ldw	r2,-16(fp)
 81275a0:	18800115 	stw	r2,4(r3)
  list->next           = entry;
 81275a4:	e0fffb17 	ldw	r3,-20(fp)
 81275a8:	e0bffc17 	ldw	r2,-16(fp)
 81275ac:	18800015 	stw	r2,0(r3)

  return 0;  
 81275b0:	e03fff15 	stw	zero,-4(fp)
 81275b4:	e0bfff17 	ldw	r2,-4(fp)
}
 81275b8:	e037883a 	mov	sp,fp
 81275bc:	dfc00117 	ldw	ra,4(sp)
 81275c0:	df000017 	ldw	fp,0(sp)
 81275c4:	dec00204 	addi	sp,sp,8
 81275c8:	f800283a 	ret

081275cc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 81275cc:	defffd04 	addi	sp,sp,-12
 81275d0:	dfc00215 	stw	ra,8(sp)
 81275d4:	df000115 	stw	fp,4(sp)
 81275d8:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 81275dc:	008204f4 	movhi	r2,2067
 81275e0:	10a8b704 	addi	r2,r2,-23844
 81275e4:	10800017 	ldw	r2,0(r2)
 81275e8:	1005003a 	cmpeq	r2,r2,zero
 81275ec:	1000061e 	bne	r2,zero,8127608 <alt_get_errno+0x3c>
 81275f0:	008204f4 	movhi	r2,2067
 81275f4:	10a8b704 	addi	r2,r2,-23844
 81275f8:	10800017 	ldw	r2,0(r2)
 81275fc:	103ee83a 	callr	r2
 8127600:	e0bfff15 	stw	r2,-4(fp)
 8127604:	00000306 	br	8127614 <alt_get_errno+0x48>
 8127608:	008204f4 	movhi	r2,2067
 812760c:	10aeaf04 	addi	r2,r2,-17732
 8127610:	e0bfff15 	stw	r2,-4(fp)
 8127614:	e0bfff17 	ldw	r2,-4(fp)
}
 8127618:	e037883a 	mov	sp,fp
 812761c:	dfc00117 	ldw	ra,4(sp)
 8127620:	df000017 	ldw	fp,0(sp)
 8127624:	dec00204 	addi	sp,sp,8
 8127628:	f800283a 	ret

0812762c <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
 812762c:	defffd04 	addi	sp,sp,-12
 8127630:	dfc00215 	stw	ra,8(sp)
 8127634:	df000115 	stw	fp,4(sp)
 8127638:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 812763c:	00bfff04 	movi	r2,-4
 8127640:	00c204f4 	movhi	r3,2067
 8127644:	18e20c04 	addi	r3,r3,-30672
 8127648:	1885883a 	add	r2,r3,r2
 812764c:	e0bfff15 	stw	r2,-4(fp)
 8127650:	00000606 	br	812766c <_do_ctors+0x40>
        (*ctor) (); 
 8127654:	e0bfff17 	ldw	r2,-4(fp)
 8127658:	10800017 	ldw	r2,0(r2)
 812765c:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 8127660:	e0bfff17 	ldw	r2,-4(fp)
 8127664:	10bfff04 	addi	r2,r2,-4
 8127668:	e0bfff15 	stw	r2,-4(fp)
 812766c:	e0ffff17 	ldw	r3,-4(fp)
 8127670:	008204f4 	movhi	r2,2067
 8127674:	10a20b04 	addi	r2,r2,-30676
 8127678:	18bff62e 	bgeu	r3,r2,8127654 <_do_ctors+0x28>
        (*ctor) (); 
}
 812767c:	e037883a 	mov	sp,fp
 8127680:	dfc00117 	ldw	ra,4(sp)
 8127684:	df000017 	ldw	fp,0(sp)
 8127688:	dec00204 	addi	sp,sp,8
 812768c:	f800283a 	ret

08127690 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
 8127690:	defffd04 	addi	sp,sp,-12
 8127694:	dfc00215 	stw	ra,8(sp)
 8127698:	df000115 	stw	fp,4(sp)
 812769c:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 81276a0:	00bfff04 	movi	r2,-4
 81276a4:	00c204f4 	movhi	r3,2067
 81276a8:	18e20c04 	addi	r3,r3,-30672
 81276ac:	1885883a 	add	r2,r3,r2
 81276b0:	e0bfff15 	stw	r2,-4(fp)
 81276b4:	00000606 	br	81276d0 <_do_dtors+0x40>
        (*dtor) (); 
 81276b8:	e0bfff17 	ldw	r2,-4(fp)
 81276bc:	10800017 	ldw	r2,0(r2)
 81276c0:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 81276c4:	e0bfff17 	ldw	r2,-4(fp)
 81276c8:	10bfff04 	addi	r2,r2,-4
 81276cc:	e0bfff15 	stw	r2,-4(fp)
 81276d0:	e0ffff17 	ldw	r3,-4(fp)
 81276d4:	008204f4 	movhi	r2,2067
 81276d8:	10a20c04 	addi	r2,r2,-30672
 81276dc:	18bff62e 	bgeu	r3,r2,81276b8 <_do_dtors+0x28>
        (*dtor) (); 
}
 81276e0:	e037883a 	mov	sp,fp
 81276e4:	dfc00117 	ldw	ra,4(sp)
 81276e8:	df000017 	ldw	fp,0(sp)
 81276ec:	dec00204 	addi	sp,sp,8
 81276f0:	f800283a 	ret

081276f4 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 81276f4:	defff904 	addi	sp,sp,-28
 81276f8:	dfc00615 	stw	ra,24(sp)
 81276fc:	df000515 	stw	fp,20(sp)
 8127700:	df000504 	addi	fp,sp,20
 8127704:	e13ffd15 	stw	r4,-12(fp)
 8127708:	e17ffe15 	stw	r5,-8(fp)
  alt_dev* next = (alt_dev*) llist->next;
 812770c:	e0bffe17 	ldw	r2,-8(fp)
 8127710:	10800017 	ldw	r2,0(r2)
 8127714:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
 8127718:	e13ffd17 	ldw	r4,-12(fp)
 812771c:	81284700 	call	8128470 <strlen>
 8127720:	10800044 	addi	r2,r2,1
 8127724:	e0bffb15 	stw	r2,-20(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 8127728:	00000d06 	br	8127760 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 812772c:	e0bffc17 	ldw	r2,-16(fp)
 8127730:	11000217 	ldw	r4,8(r2)
 8127734:	e1bffb17 	ldw	r6,-20(fp)
 8127738:	e17ffd17 	ldw	r5,-12(fp)
 812773c:	812835c0 	call	812835c <memcmp>
 8127740:	1004c03a 	cmpne	r2,r2,zero
 8127744:	1000031e 	bne	r2,zero,8127754 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
 8127748:	e0bffc17 	ldw	r2,-16(fp)
 812774c:	e0bfff15 	stw	r2,-4(fp)
 8127750:	00000706 	br	8127770 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
 8127754:	e0bffc17 	ldw	r2,-16(fp)
 8127758:	10800017 	ldw	r2,0(r2)
 812775c:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 8127760:	e0fffe17 	ldw	r3,-8(fp)
 8127764:	e0bffc17 	ldw	r2,-16(fp)
 8127768:	10fff01e 	bne	r2,r3,812772c <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
 812776c:	e03fff15 	stw	zero,-4(fp)
 8127770:	e0bfff17 	ldw	r2,-4(fp)
}
 8127774:	e037883a 	mov	sp,fp
 8127778:	dfc00117 	ldw	ra,4(sp)
 812777c:	df000017 	ldw	fp,0(sp)
 8127780:	dec00204 	addi	sp,sp,8
 8127784:	f800283a 	ret

08127788 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 8127788:	defffe04 	addi	sp,sp,-8
 812778c:	dfc00115 	stw	ra,4(sp)
 8127790:	df000015 	stw	fp,0(sp)
 8127794:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
 8127798:	0009883a 	mov	r4,zero
 812779c:	01440004 	movi	r5,4096
 81277a0:	81282800 	call	8128280 <alt_icache_flush>
#endif
}
 81277a4:	e037883a 	mov	sp,fp
 81277a8:	dfc00117 	ldw	ra,4(sp)
 81277ac:	df000017 	ldw	fp,0(sp)
 81277b0:	dec00204 	addi	sp,sp,8
 81277b4:	f800283a 	ret

081277b8 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 81277b8:	defff904 	addi	sp,sp,-28
 81277bc:	dfc00615 	stw	ra,24(sp)
 81277c0:	df000515 	stw	fp,20(sp)
 81277c4:	df000504 	addi	fp,sp,20
 81277c8:	e13ffc15 	stw	r4,-16(fp)
 81277cc:	e17ffd15 	stw	r5,-12(fp)
 81277d0:	e1bffe15 	stw	r6,-8(fp)
 81277d4:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
 81277d8:	e0800217 	ldw	r2,8(fp)
 81277dc:	d8800015 	stw	r2,0(sp)
 81277e0:	e13ffc17 	ldw	r4,-16(fp)
 81277e4:	e17ffd17 	ldw	r5,-12(fp)
 81277e8:	e1bffe17 	ldw	r6,-8(fp)
 81277ec:	e1ffff17 	ldw	r7,-4(fp)
 81277f0:	812798c0 	call	812798c <alt_iic_isr_register>
}  
 81277f4:	e037883a 	mov	sp,fp
 81277f8:	dfc00117 	ldw	ra,4(sp)
 81277fc:	df000017 	ldw	fp,0(sp)
 8127800:	dec00204 	addi	sp,sp,8
 8127804:	f800283a 	ret

08127808 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
 8127808:	defff904 	addi	sp,sp,-28
 812780c:	df000615 	stw	fp,24(sp)
 8127810:	df000604 	addi	fp,sp,24
 8127814:	e13ffe15 	stw	r4,-8(fp)
 8127818:	e17fff15 	stw	r5,-4(fp)
 812781c:	e0bfff17 	ldw	r2,-4(fp)
 8127820:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8127824:	0005303a 	rdctl	r2,status
 8127828:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 812782c:	e0fffb17 	ldw	r3,-20(fp)
 8127830:	00bfff84 	movi	r2,-2
 8127834:	1884703a 	and	r2,r3,r2
 8127838:	1001703a 	wrctl	status,r2
  
  return context;
 812783c:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 8127840:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active |= (1 << id);
 8127844:	e0fffc17 	ldw	r3,-16(fp)
 8127848:	00800044 	movi	r2,1
 812784c:	10c4983a 	sll	r2,r2,r3
 8127850:	1007883a 	mov	r3,r2
 8127854:	008204f4 	movhi	r2,2067
 8127858:	10aeac04 	addi	r2,r2,-17744
 812785c:	10800017 	ldw	r2,0(r2)
 8127860:	1886b03a 	or	r3,r3,r2
 8127864:	008204f4 	movhi	r2,2067
 8127868:	10aeac04 	addi	r2,r2,-17744
 812786c:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 8127870:	008204f4 	movhi	r2,2067
 8127874:	10aeac04 	addi	r2,r2,-17744
 8127878:	10800017 	ldw	r2,0(r2)
 812787c:	100170fa 	wrctl	ienable,r2
 8127880:	e0bffd17 	ldw	r2,-12(fp)
 8127884:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8127888:	e0bffa17 	ldw	r2,-24(fp)
 812788c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 8127890:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
 8127894:	e037883a 	mov	sp,fp
 8127898:	df000017 	ldw	fp,0(sp)
 812789c:	dec00104 	addi	sp,sp,4
 81278a0:	f800283a 	ret

081278a4 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
 81278a4:	defff904 	addi	sp,sp,-28
 81278a8:	df000615 	stw	fp,24(sp)
 81278ac:	df000604 	addi	fp,sp,24
 81278b0:	e13ffe15 	stw	r4,-8(fp)
 81278b4:	e17fff15 	stw	r5,-4(fp)
 81278b8:	e0bfff17 	ldw	r2,-4(fp)
 81278bc:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 81278c0:	0005303a 	rdctl	r2,status
 81278c4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 81278c8:	e0fffb17 	ldw	r3,-20(fp)
 81278cc:	00bfff84 	movi	r2,-2
 81278d0:	1884703a 	and	r2,r3,r2
 81278d4:	1001703a 	wrctl	status,r2
  
  return context;
 81278d8:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 81278dc:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active &= ~(1 << id);
 81278e0:	e0fffc17 	ldw	r3,-16(fp)
 81278e4:	00800044 	movi	r2,1
 81278e8:	10c4983a 	sll	r2,r2,r3
 81278ec:	0084303a 	nor	r2,zero,r2
 81278f0:	1007883a 	mov	r3,r2
 81278f4:	008204f4 	movhi	r2,2067
 81278f8:	10aeac04 	addi	r2,r2,-17744
 81278fc:	10800017 	ldw	r2,0(r2)
 8127900:	1886703a 	and	r3,r3,r2
 8127904:	008204f4 	movhi	r2,2067
 8127908:	10aeac04 	addi	r2,r2,-17744
 812790c:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 8127910:	008204f4 	movhi	r2,2067
 8127914:	10aeac04 	addi	r2,r2,-17744
 8127918:	10800017 	ldw	r2,0(r2)
 812791c:	100170fa 	wrctl	ienable,r2
 8127920:	e0bffd17 	ldw	r2,-12(fp)
 8127924:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8127928:	e0bffa17 	ldw	r2,-24(fp)
 812792c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 8127930:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
 8127934:	e037883a 	mov	sp,fp
 8127938:	df000017 	ldw	fp,0(sp)
 812793c:	dec00104 	addi	sp,sp,4
 8127940:	f800283a 	ret

08127944 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
 8127944:	defffc04 	addi	sp,sp,-16
 8127948:	df000315 	stw	fp,12(sp)
 812794c:	df000304 	addi	fp,sp,12
 8127950:	e13ffe15 	stw	r4,-8(fp)
 8127954:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
 8127958:	000530fa 	rdctl	r2,ienable
 812795c:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
 8127960:	e0ffff17 	ldw	r3,-4(fp)
 8127964:	00800044 	movi	r2,1
 8127968:	10c4983a 	sll	r2,r2,r3
 812796c:	1007883a 	mov	r3,r2
 8127970:	e0bffd17 	ldw	r2,-12(fp)
 8127974:	1884703a 	and	r2,r3,r2
 8127978:	1004c03a 	cmpne	r2,r2,zero
}
 812797c:	e037883a 	mov	sp,fp
 8127980:	df000017 	ldw	fp,0(sp)
 8127984:	dec00104 	addi	sp,sp,4
 8127988:	f800283a 	ret

0812798c <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 812798c:	defff404 	addi	sp,sp,-48
 8127990:	dfc00b15 	stw	ra,44(sp)
 8127994:	df000a15 	stw	fp,40(sp)
 8127998:	df000a04 	addi	fp,sp,40
 812799c:	e13ffb15 	stw	r4,-20(fp)
 81279a0:	e17ffc15 	stw	r5,-16(fp)
 81279a4:	e1bffd15 	stw	r6,-12(fp)
 81279a8:	e1fffe15 	stw	r7,-8(fp)
  int rc = -EINVAL;  
 81279ac:	00bffa84 	movi	r2,-22
 81279b0:	e0bffa15 	stw	r2,-24(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
 81279b4:	e0bffc17 	ldw	r2,-16(fp)
 81279b8:	e0bff915 	stw	r2,-28(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 81279bc:	e0bff917 	ldw	r2,-28(fp)
 81279c0:	10800808 	cmpgei	r2,r2,32
 81279c4:	1000291e 	bne	r2,zero,8127a6c <alt_iic_isr_register+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 81279c8:	0005303a 	rdctl	r2,status
 81279cc:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 81279d0:	e0fff717 	ldw	r3,-36(fp)
 81279d4:	00bfff84 	movi	r2,-2
 81279d8:	1884703a 	and	r2,r3,r2
 81279dc:	1001703a 	wrctl	status,r2
  
  return context;
 81279e0:	e0bff717 	ldw	r2,-36(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
 81279e4:	e0bff815 	stw	r2,-32(fp)

    alt_irq[id].handler = isr;
 81279e8:	e0bff917 	ldw	r2,-28(fp)
 81279ec:	00c204f4 	movhi	r3,2067
 81279f0:	18eeb004 	addi	r3,r3,-17728
 81279f4:	100490fa 	slli	r2,r2,3
 81279f8:	10c7883a 	add	r3,r2,r3
 81279fc:	e0bffd17 	ldw	r2,-12(fp)
 8127a00:	18800015 	stw	r2,0(r3)
    alt_irq[id].context = isr_context;
 8127a04:	e0bff917 	ldw	r2,-28(fp)
 8127a08:	00c204f4 	movhi	r3,2067
 8127a0c:	18eeb004 	addi	r3,r3,-17728
 8127a10:	100490fa 	slli	r2,r2,3
 8127a14:	10c5883a 	add	r2,r2,r3
 8127a18:	10c00104 	addi	r3,r2,4
 8127a1c:	e0bffe17 	ldw	r2,-8(fp)
 8127a20:	18800015 	stw	r2,0(r3)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
 8127a24:	e0bffd17 	ldw	r2,-12(fp)
 8127a28:	1005003a 	cmpeq	r2,r2,zero
 8127a2c:	1000051e 	bne	r2,zero,8127a44 <alt_iic_isr_register+0xb8>
 8127a30:	e17ff917 	ldw	r5,-28(fp)
 8127a34:	e13ffb17 	ldw	r4,-20(fp)
 8127a38:	81278080 	call	8127808 <alt_ic_irq_enable>
 8127a3c:	e0bfff15 	stw	r2,-4(fp)
 8127a40:	00000406 	br	8127a54 <alt_iic_isr_register+0xc8>
 8127a44:	e17ff917 	ldw	r5,-28(fp)
 8127a48:	e13ffb17 	ldw	r4,-20(fp)
 8127a4c:	81278a40 	call	81278a4 <alt_ic_irq_disable>
 8127a50:	e0bfff15 	stw	r2,-4(fp)
 8127a54:	e0bfff17 	ldw	r2,-4(fp)
 8127a58:	e0bffa15 	stw	r2,-24(fp)
 8127a5c:	e0bff817 	ldw	r2,-32(fp)
 8127a60:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8127a64:	e0bff617 	ldw	r2,-40(fp)
 8127a68:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
 8127a6c:	e0bffa17 	ldw	r2,-24(fp)
}
 8127a70:	e037883a 	mov	sp,fp
 8127a74:	dfc00117 	ldw	ra,4(sp)
 8127a78:	df000017 	ldw	fp,0(sp)
 8127a7c:	dec00204 	addi	sp,sp,8
 8127a80:	f800283a 	ret

08127a84 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
 8127a84:	defff904 	addi	sp,sp,-28
 8127a88:	dfc00615 	stw	ra,24(sp)
 8127a8c:	df000515 	stw	fp,20(sp)
 8127a90:	df000504 	addi	fp,sp,20
 8127a94:	e13ffc15 	stw	r4,-16(fp)
 8127a98:	e17ffd15 	stw	r5,-12(fp)
 8127a9c:	e1bffe15 	stw	r6,-8(fp)
 8127aa0:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
 8127aa4:	e13ffd17 	ldw	r4,-12(fp)
 8127aa8:	e17ffe17 	ldw	r5,-8(fp)
 8127aac:	e1bfff17 	ldw	r6,-4(fp)
 8127ab0:	8127c9c0 	call	8127c9c <open>
 8127ab4:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
 8127ab8:	e0bffb17 	ldw	r2,-20(fp)
 8127abc:	1004803a 	cmplt	r2,r2,zero
 8127ac0:	10001c1e 	bne	r2,zero,8127b34 <alt_open_fd+0xb0>
  {
    fd->dev      = alt_fd_list[old].dev;
 8127ac4:	e0bffb17 	ldw	r2,-20(fp)
 8127ac8:	00c204f4 	movhi	r3,2067
 8127acc:	18e84804 	addi	r3,r3,-24288
 8127ad0:	10800324 	muli	r2,r2,12
 8127ad4:	10c5883a 	add	r2,r2,r3
 8127ad8:	10c00017 	ldw	r3,0(r2)
 8127adc:	e0bffc17 	ldw	r2,-16(fp)
 8127ae0:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
 8127ae4:	e0bffb17 	ldw	r2,-20(fp)
 8127ae8:	00c204f4 	movhi	r3,2067
 8127aec:	18e84804 	addi	r3,r3,-24288
 8127af0:	10800324 	muli	r2,r2,12
 8127af4:	10c5883a 	add	r2,r2,r3
 8127af8:	10800104 	addi	r2,r2,4
 8127afc:	10c00017 	ldw	r3,0(r2)
 8127b00:	e0bffc17 	ldw	r2,-16(fp)
 8127b04:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 8127b08:	e0bffb17 	ldw	r2,-20(fp)
 8127b0c:	00c204f4 	movhi	r3,2067
 8127b10:	18e84804 	addi	r3,r3,-24288
 8127b14:	10800324 	muli	r2,r2,12
 8127b18:	10c5883a 	add	r2,r2,r3
 8127b1c:	10800204 	addi	r2,r2,8
 8127b20:	10c00017 	ldw	r3,0(r2)
 8127b24:	e0bffc17 	ldw	r2,-16(fp)
 8127b28:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
 8127b2c:	e13ffb17 	ldw	r4,-20(fp)
 8127b30:	8127e840 	call	8127e84 <alt_release_fd>
  }
} 
 8127b34:	e037883a 	mov	sp,fp
 8127b38:	dfc00117 	ldw	ra,4(sp)
 8127b3c:	df000017 	ldw	fp,0(sp)
 8127b40:	dec00204 	addi	sp,sp,8
 8127b44:	f800283a 	ret

08127b48 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 8127b48:	defffb04 	addi	sp,sp,-20
 8127b4c:	dfc00415 	stw	ra,16(sp)
 8127b50:	df000315 	stw	fp,12(sp)
 8127b54:	df000304 	addi	fp,sp,12
 8127b58:	e13ffd15 	stw	r4,-12(fp)
 8127b5c:	e17ffe15 	stw	r5,-8(fp)
 8127b60:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 8127b64:	010204f4 	movhi	r4,2067
 8127b68:	21284b04 	addi	r4,r4,-24276
 8127b6c:	e17ffd17 	ldw	r5,-12(fp)
 8127b70:	01800044 	movi	r6,1
 8127b74:	01c07fc4 	movi	r7,511
 8127b78:	8127a840 	call	8127a84 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 8127b7c:	010204f4 	movhi	r4,2067
 8127b80:	21284804 	addi	r4,r4,-24288
 8127b84:	e17ffe17 	ldw	r5,-8(fp)
 8127b88:	000d883a 	mov	r6,zero
 8127b8c:	01c07fc4 	movi	r7,511
 8127b90:	8127a840 	call	8127a84 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 8127b94:	010204f4 	movhi	r4,2067
 8127b98:	21284e04 	addi	r4,r4,-24264
 8127b9c:	e17fff17 	ldw	r5,-4(fp)
 8127ba0:	01800044 	movi	r6,1
 8127ba4:	01c07fc4 	movi	r7,511
 8127ba8:	8127a840 	call	8127a84 <alt_open_fd>
}  
 8127bac:	e037883a 	mov	sp,fp
 8127bb0:	dfc00117 	ldw	ra,4(sp)
 8127bb4:	df000017 	ldw	fp,0(sp)
 8127bb8:	dec00204 	addi	sp,sp,8
 8127bbc:	f800283a 	ret

08127bc0 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
 8127bc0:	defffc04 	addi	sp,sp,-16
 8127bc4:	df000315 	stw	fp,12(sp)
 8127bc8:	df000304 	addi	fp,sp,12
 8127bcc:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 8127bd0:	e0bffe17 	ldw	r2,-8(fp)
 8127bd4:	10800217 	ldw	r2,8(r2)
 8127bd8:	10d00034 	orhi	r3,r2,16384
 8127bdc:	e0bffe17 	ldw	r2,-8(fp)
 8127be0:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 8127be4:	e03ffd15 	stw	zero,-12(fp)
 8127be8:	00002006 	br	8127c6c <alt_file_locked+0xac>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 8127bec:	e0bffd17 	ldw	r2,-12(fp)
 8127bf0:	00c204f4 	movhi	r3,2067
 8127bf4:	18e84804 	addi	r3,r3,-24288
 8127bf8:	10800324 	muli	r2,r2,12
 8127bfc:	10c5883a 	add	r2,r2,r3
 8127c00:	10c00017 	ldw	r3,0(r2)
 8127c04:	e0bffe17 	ldw	r2,-8(fp)
 8127c08:	10800017 	ldw	r2,0(r2)
 8127c0c:	1880141e 	bne	r3,r2,8127c60 <alt_file_locked+0xa0>
 8127c10:	e0bffd17 	ldw	r2,-12(fp)
 8127c14:	00c204f4 	movhi	r3,2067
 8127c18:	18e84804 	addi	r3,r3,-24288
 8127c1c:	10800324 	muli	r2,r2,12
 8127c20:	10c5883a 	add	r2,r2,r3
 8127c24:	10800204 	addi	r2,r2,8
 8127c28:	10800017 	ldw	r2,0(r2)
 8127c2c:	1004403a 	cmpge	r2,r2,zero
 8127c30:	10000b1e 	bne	r2,zero,8127c60 <alt_file_locked+0xa0>
 8127c34:	e0bffd17 	ldw	r2,-12(fp)
 8127c38:	10800324 	muli	r2,r2,12
 8127c3c:	1007883a 	mov	r3,r2
 8127c40:	008204f4 	movhi	r2,2067
 8127c44:	10a84804 	addi	r2,r2,-24288
 8127c48:	1887883a 	add	r3,r3,r2
 8127c4c:	e0bffe17 	ldw	r2,-8(fp)
 8127c50:	18800326 	beq	r3,r2,8127c60 <alt_file_locked+0xa0>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
 8127c54:	00bffcc4 	movi	r2,-13
 8127c58:	e0bfff15 	stw	r2,-4(fp)
 8127c5c:	00000a06 	br	8127c88 <alt_file_locked+0xc8>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 8127c60:	e0bffd17 	ldw	r2,-12(fp)
 8127c64:	10800044 	addi	r2,r2,1
 8127c68:	e0bffd15 	stw	r2,-12(fp)
 8127c6c:	008204f4 	movhi	r2,2067
 8127c70:	10a8b604 	addi	r2,r2,-23848
 8127c74:	10800017 	ldw	r2,0(r2)
 8127c78:	1007883a 	mov	r3,r2
 8127c7c:	e0bffd17 	ldw	r2,-12(fp)
 8127c80:	18bfda2e 	bgeu	r3,r2,8127bec <alt_file_locked+0x2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
 8127c84:	e03fff15 	stw	zero,-4(fp)
 8127c88:	e0bfff17 	ldw	r2,-4(fp)
}
 8127c8c:	e037883a 	mov	sp,fp
 8127c90:	df000017 	ldw	fp,0(sp)
 8127c94:	dec00104 	addi	sp,sp,4
 8127c98:	f800283a 	ret

08127c9c <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 8127c9c:	defff404 	addi	sp,sp,-48
 8127ca0:	dfc00b15 	stw	ra,44(sp)
 8127ca4:	df000a15 	stw	fp,40(sp)
 8127ca8:	df000a04 	addi	fp,sp,40
 8127cac:	e13ffb15 	stw	r4,-20(fp)
 8127cb0:	e17ffc15 	stw	r5,-16(fp)
 8127cb4:	e1bffd15 	stw	r6,-12(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
 8127cb8:	00bfffc4 	movi	r2,-1
 8127cbc:	e0bff815 	stw	r2,-32(fp)
  int status = -ENODEV;
 8127cc0:	00bffb44 	movi	r2,-19
 8127cc4:	e0bff715 	stw	r2,-36(fp)
  int isafs = 0;
 8127cc8:	e03ff615 	stw	zero,-40(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 8127ccc:	e13ffb17 	ldw	r4,-20(fp)
 8127cd0:	014204f4 	movhi	r5,2067
 8127cd4:	2968b404 	addi	r5,r5,-23856
 8127cd8:	81276f40 	call	81276f4 <alt_find_dev>
 8127cdc:	e0bffa15 	stw	r2,-24(fp)
 8127ce0:	e0bffa17 	ldw	r2,-24(fp)
 8127ce4:	1004c03a 	cmpne	r2,r2,zero
 8127ce8:	1000051e 	bne	r2,zero,8127d00 <open+0x64>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 8127cec:	e13ffb17 	ldw	r4,-20(fp)
 8127cf0:	81280a80 	call	81280a8 <alt_find_file>
 8127cf4:	e0bffa15 	stw	r2,-24(fp)
    isafs = 1;
 8127cf8:	00800044 	movi	r2,1
 8127cfc:	e0bff615 	stw	r2,-40(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 8127d00:	e0bffa17 	ldw	r2,-24(fp)
 8127d04:	1005003a 	cmpeq	r2,r2,zero
 8127d08:	1000301e 	bne	r2,zero,8127dcc <open+0x130>
  {
    if ((index = alt_get_fd (dev)) < 0)
 8127d0c:	e13ffa17 	ldw	r4,-24(fp)
 8127d10:	81281c80 	call	81281c8 <alt_get_fd>
 8127d14:	e0bff815 	stw	r2,-32(fp)
 8127d18:	e0bff817 	ldw	r2,-32(fp)
 8127d1c:	1004403a 	cmpge	r2,r2,zero
 8127d20:	1000031e 	bne	r2,zero,8127d30 <open+0x94>
    {
      status = index;
 8127d24:	e0bff817 	ldw	r2,-32(fp)
 8127d28:	e0bff715 	stw	r2,-36(fp)
 8127d2c:	00002906 	br	8127dd4 <open+0x138>
    }
    else
    {
      fd = &alt_fd_list[index];
 8127d30:	e0bff817 	ldw	r2,-32(fp)
 8127d34:	10800324 	muli	r2,r2,12
 8127d38:	1007883a 	mov	r3,r2
 8127d3c:	008204f4 	movhi	r2,2067
 8127d40:	10a84804 	addi	r2,r2,-24288
 8127d44:	1885883a 	add	r2,r3,r2
 8127d48:	e0bff915 	stw	r2,-28(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 8127d4c:	e0fffc17 	ldw	r3,-16(fp)
 8127d50:	00900034 	movhi	r2,16384
 8127d54:	10bfffc4 	addi	r2,r2,-1
 8127d58:	1886703a 	and	r3,r3,r2
 8127d5c:	e0bff917 	ldw	r2,-28(fp)
 8127d60:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
 8127d64:	e0bff617 	ldw	r2,-40(fp)
 8127d68:	1004c03a 	cmpne	r2,r2,zero
 8127d6c:	1000061e 	bne	r2,zero,8127d88 <open+0xec>
 8127d70:	e13ff917 	ldw	r4,-28(fp)
 8127d74:	8127bc00 	call	8127bc0 <alt_file_locked>
 8127d78:	e0bff715 	stw	r2,-36(fp)
 8127d7c:	e0bff717 	ldw	r2,-36(fp)
 8127d80:	1004803a 	cmplt	r2,r2,zero
 8127d84:	1000131e 	bne	r2,zero,8127dd4 <open+0x138>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 8127d88:	e0bffa17 	ldw	r2,-24(fp)
 8127d8c:	10800317 	ldw	r2,12(r2)
 8127d90:	1005003a 	cmpeq	r2,r2,zero
 8127d94:	1000091e 	bne	r2,zero,8127dbc <open+0x120>
 8127d98:	e0bffa17 	ldw	r2,-24(fp)
 8127d9c:	10800317 	ldw	r2,12(r2)
 8127da0:	e13ff917 	ldw	r4,-28(fp)
 8127da4:	e17ffb17 	ldw	r5,-20(fp)
 8127da8:	e1bffc17 	ldw	r6,-16(fp)
 8127dac:	e1fffd17 	ldw	r7,-12(fp)
 8127db0:	103ee83a 	callr	r2
 8127db4:	e0bfff15 	stw	r2,-4(fp)
 8127db8:	00000106 	br	8127dc0 <open+0x124>
 8127dbc:	e03fff15 	stw	zero,-4(fp)
 8127dc0:	e0bfff17 	ldw	r2,-4(fp)
 8127dc4:	e0bff715 	stw	r2,-36(fp)
 8127dc8:	00000206 	br	8127dd4 <open+0x138>
      }
    }
  }
  else
  {
    status = -ENODEV;
 8127dcc:	00bffb44 	movi	r2,-19
 8127dd0:	e0bff715 	stw	r2,-36(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 8127dd4:	e0bff717 	ldw	r2,-36(fp)
 8127dd8:	1004403a 	cmpge	r2,r2,zero
 8127ddc:	1000091e 	bne	r2,zero,8127e04 <open+0x168>
  {
    alt_release_fd (index);  
 8127de0:	e13ff817 	ldw	r4,-32(fp)
 8127de4:	8127e840 	call	8127e84 <alt_release_fd>
    ALT_ERRNO = -status;
 8127de8:	8127e240 	call	8127e24 <alt_get_errno>
 8127dec:	e0fff717 	ldw	r3,-36(fp)
 8127df0:	00c7c83a 	sub	r3,zero,r3
 8127df4:	10c00015 	stw	r3,0(r2)
    return -1;
 8127df8:	00bfffc4 	movi	r2,-1
 8127dfc:	e0bffe15 	stw	r2,-8(fp)
 8127e00:	00000206 	br	8127e0c <open+0x170>
  }
  
  /* return the reference upon success */

  return index;
 8127e04:	e0bff817 	ldw	r2,-32(fp)
 8127e08:	e0bffe15 	stw	r2,-8(fp)
 8127e0c:	e0bffe17 	ldw	r2,-8(fp)
}
 8127e10:	e037883a 	mov	sp,fp
 8127e14:	dfc00117 	ldw	ra,4(sp)
 8127e18:	df000017 	ldw	fp,0(sp)
 8127e1c:	dec00204 	addi	sp,sp,8
 8127e20:	f800283a 	ret

08127e24 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 8127e24:	defffd04 	addi	sp,sp,-12
 8127e28:	dfc00215 	stw	ra,8(sp)
 8127e2c:	df000115 	stw	fp,4(sp)
 8127e30:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 8127e34:	008204f4 	movhi	r2,2067
 8127e38:	10a8b704 	addi	r2,r2,-23844
 8127e3c:	10800017 	ldw	r2,0(r2)
 8127e40:	1005003a 	cmpeq	r2,r2,zero
 8127e44:	1000061e 	bne	r2,zero,8127e60 <alt_get_errno+0x3c>
 8127e48:	008204f4 	movhi	r2,2067
 8127e4c:	10a8b704 	addi	r2,r2,-23844
 8127e50:	10800017 	ldw	r2,0(r2)
 8127e54:	103ee83a 	callr	r2
 8127e58:	e0bfff15 	stw	r2,-4(fp)
 8127e5c:	00000306 	br	8127e6c <alt_get_errno+0x48>
 8127e60:	008204f4 	movhi	r2,2067
 8127e64:	10aeaf04 	addi	r2,r2,-17732
 8127e68:	e0bfff15 	stw	r2,-4(fp)
 8127e6c:	e0bfff17 	ldw	r2,-4(fp)
}
 8127e70:	e037883a 	mov	sp,fp
 8127e74:	dfc00117 	ldw	ra,4(sp)
 8127e78:	df000017 	ldw	fp,0(sp)
 8127e7c:	dec00204 	addi	sp,sp,8
 8127e80:	f800283a 	ret

08127e84 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 8127e84:	defffe04 	addi	sp,sp,-8
 8127e88:	df000115 	stw	fp,4(sp)
 8127e8c:	df000104 	addi	fp,sp,4
 8127e90:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
 8127e94:	e0bfff17 	ldw	r2,-4(fp)
 8127e98:	108000d0 	cmplti	r2,r2,3
 8127e9c:	10000d1e 	bne	r2,zero,8127ed4 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
 8127ea0:	e0bfff17 	ldw	r2,-4(fp)
 8127ea4:	00c204f4 	movhi	r3,2067
 8127ea8:	18e84804 	addi	r3,r3,-24288
 8127eac:	10800324 	muli	r2,r2,12
 8127eb0:	10c5883a 	add	r2,r2,r3
 8127eb4:	10800204 	addi	r2,r2,8
 8127eb8:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
 8127ebc:	e0bfff17 	ldw	r2,-4(fp)
 8127ec0:	00c204f4 	movhi	r3,2067
 8127ec4:	18e84804 	addi	r3,r3,-24288
 8127ec8:	10800324 	muli	r2,r2,12
 8127ecc:	10c5883a 	add	r2,r2,r3
 8127ed0:	10000015 	stw	zero,0(r2)
  }
}
 8127ed4:	e037883a 	mov	sp,fp
 8127ed8:	df000017 	ldw	fp,0(sp)
 8127edc:	dec00104 	addi	sp,sp,4
 8127ee0:	f800283a 	ret

08127ee4 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
 8127ee4:	defffa04 	addi	sp,sp,-24
 8127ee8:	df000515 	stw	fp,20(sp)
 8127eec:	df000504 	addi	fp,sp,20
 8127ef0:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8127ef4:	0005303a 	rdctl	r2,status
 8127ef8:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8127efc:	e0fffd17 	ldw	r3,-12(fp)
 8127f00:	00bfff84 	movi	r2,-2
 8127f04:	1884703a 	and	r2,r3,r2
 8127f08:	1001703a 	wrctl	status,r2
  
  return context;
 8127f0c:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
 8127f10:	e0bffe15 	stw	r2,-8(fp)
  alt_llist_remove (&alarm->llist);
 8127f14:	e0bfff17 	ldw	r2,-4(fp)
 8127f18:	e0bffc15 	stw	r2,-16(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 8127f1c:	e0bffc17 	ldw	r2,-16(fp)
 8127f20:	10c00017 	ldw	r3,0(r2)
 8127f24:	e0bffc17 	ldw	r2,-16(fp)
 8127f28:	10800117 	ldw	r2,4(r2)
 8127f2c:	18800115 	stw	r2,4(r3)
  entry->previous->next = entry->next;
 8127f30:	e0bffc17 	ldw	r2,-16(fp)
 8127f34:	10c00117 	ldw	r3,4(r2)
 8127f38:	e0bffc17 	ldw	r2,-16(fp)
 8127f3c:	10800017 	ldw	r2,0(r2)
 8127f40:	18800015 	stw	r2,0(r3)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 8127f44:	e0fffc17 	ldw	r3,-16(fp)
 8127f48:	e0bffc17 	ldw	r2,-16(fp)
 8127f4c:	18800115 	stw	r2,4(r3)
  entry->next     = entry;
 8127f50:	e0fffc17 	ldw	r3,-16(fp)
 8127f54:	e0bffc17 	ldw	r2,-16(fp)
 8127f58:	18800015 	stw	r2,0(r3)
 8127f5c:	e0bffe17 	ldw	r2,-8(fp)
 8127f60:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8127f64:	e0bffb17 	ldw	r2,-20(fp)
 8127f68:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
 8127f6c:	e037883a 	mov	sp,fp
 8127f70:	df000017 	ldw	fp,0(sp)
 8127f74:	dec00104 	addi	sp,sp,4
 8127f78:	f800283a 	ret

08127f7c <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 8127f7c:	defffb04 	addi	sp,sp,-20
 8127f80:	dfc00415 	stw	ra,16(sp)
 8127f84:	df000315 	stw	fp,12(sp)
 8127f88:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 8127f8c:	d0a01117 	ldw	r2,-32700(gp)
 8127f90:	e0bffe15 	stw	r2,-8(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 8127f94:	d0a60617 	ldw	r2,-26600(gp)
 8127f98:	10800044 	addi	r2,r2,1
 8127f9c:	d0a60615 	stw	r2,-26600(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 8127fa0:	00003106 	br	8128068 <alt_tick+0xec>
  {
    next = (alt_alarm*) alarm->llist.next;
 8127fa4:	e0bffe17 	ldw	r2,-8(fp)
 8127fa8:	10800017 	ldw	r2,0(r2)
 8127fac:	e0bfff15 	stw	r2,-4(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 8127fb0:	e0bffe17 	ldw	r2,-8(fp)
 8127fb4:	10800403 	ldbu	r2,16(r2)
 8127fb8:	10803fcc 	andi	r2,r2,255
 8127fbc:	1005003a 	cmpeq	r2,r2,zero
 8127fc0:	1000051e 	bne	r2,zero,8127fd8 <alt_tick+0x5c>
 8127fc4:	d0a60617 	ldw	r2,-26600(gp)
 8127fc8:	1004c03a 	cmpne	r2,r2,zero
 8127fcc:	1000021e 	bne	r2,zero,8127fd8 <alt_tick+0x5c>
    {
      alarm->rollover = 0;
 8127fd0:	e0bffe17 	ldw	r2,-8(fp)
 8127fd4:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 8127fd8:	e0bffe17 	ldw	r2,-8(fp)
 8127fdc:	10c00217 	ldw	r3,8(r2)
 8127fe0:	d0a60617 	ldw	r2,-26600(gp)
 8127fe4:	10c01e36 	bltu	r2,r3,8128060 <alt_tick+0xe4>
 8127fe8:	e0bffe17 	ldw	r2,-8(fp)
 8127fec:	10800403 	ldbu	r2,16(r2)
 8127ff0:	10803fcc 	andi	r2,r2,255
 8127ff4:	1004c03a 	cmpne	r2,r2,zero
 8127ff8:	1000191e 	bne	r2,zero,8128060 <alt_tick+0xe4>
    {
      next_callback = alarm->callback (alarm->context);
 8127ffc:	e0bffe17 	ldw	r2,-8(fp)
 8128000:	10c00317 	ldw	r3,12(r2)
 8128004:	e0bffe17 	ldw	r2,-8(fp)
 8128008:	11000517 	ldw	r4,20(r2)
 812800c:	183ee83a 	callr	r3
 8128010:	e0bffd15 	stw	r2,-12(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 8128014:	e0bffd17 	ldw	r2,-12(fp)
 8128018:	1004c03a 	cmpne	r2,r2,zero
 812801c:	1000031e 	bne	r2,zero,812802c <alt_tick+0xb0>
      {
        alt_alarm_stop (alarm);
 8128020:	e13ffe17 	ldw	r4,-8(fp)
 8128024:	8127ee40 	call	8127ee4 <alt_alarm_stop>
 8128028:	00000d06 	br	8128060 <alt_tick+0xe4>
      }
      else
      {
        alarm->time += next_callback;
 812802c:	e0bffe17 	ldw	r2,-8(fp)
 8128030:	10c00217 	ldw	r3,8(r2)
 8128034:	e0bffd17 	ldw	r2,-12(fp)
 8128038:	1887883a 	add	r3,r3,r2
 812803c:	e0bffe17 	ldw	r2,-8(fp)
 8128040:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 8128044:	e0bffe17 	ldw	r2,-8(fp)
 8128048:	10c00217 	ldw	r3,8(r2)
 812804c:	d0a60617 	ldw	r2,-26600(gp)
 8128050:	1880032e 	bgeu	r3,r2,8128060 <alt_tick+0xe4>
        {
          alarm->rollover = 1;
 8128054:	e0fffe17 	ldw	r3,-8(fp)
 8128058:	00800044 	movi	r2,1
 812805c:	18800405 	stb	r2,16(r3)
        }
      }
    }
    alarm = next;
 8128060:	e0bfff17 	ldw	r2,-4(fp)
 8128064:	e0bffe15 	stw	r2,-8(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 8128068:	d0e01104 	addi	r3,gp,-32700
 812806c:	e0bffe17 	ldw	r2,-8(fp)
 8128070:	10ffcc1e 	bne	r2,r3,8127fa4 <alt_tick+0x28>
  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
}
 8128074:	e037883a 	mov	sp,fp
 8128078:	dfc00117 	ldw	ra,4(sp)
 812807c:	df000017 	ldw	fp,0(sp)
 8128080:	dec00204 	addi	sp,sp,8
 8128084:	f800283a 	ret

08128088 <altera_nios2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_irq_init(void) 
{
 8128088:	deffff04 	addi	sp,sp,-4
 812808c:	df000015 	stw	fp,0(sp)
 8128090:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 8128094:	000170fa 	wrctl	ienable,zero
}
 8128098:	e037883a 	mov	sp,fp
 812809c:	df000017 	ldw	fp,0(sp)
 81280a0:	dec00104 	addi	sp,sp,4
 81280a4:	f800283a 	ret

081280a8 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 81280a8:	defffa04 	addi	sp,sp,-24
 81280ac:	dfc00515 	stw	ra,20(sp)
 81280b0:	df000415 	stw	fp,16(sp)
 81280b4:	df000404 	addi	fp,sp,16
 81280b8:	e13ffe15 	stw	r4,-8(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 81280bc:	008204f4 	movhi	r2,2067
 81280c0:	10a8b204 	addi	r2,r2,-23864
 81280c4:	10800017 	ldw	r2,0(r2)
 81280c8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 81280cc:	00003306 	br	812819c <alt_find_file+0xf4>
  {
    len = strlen(next->name);
 81280d0:	e0bffd17 	ldw	r2,-12(fp)
 81280d4:	11000217 	ldw	r4,8(r2)
 81280d8:	81284700 	call	8128470 <strlen>
 81280dc:	e0bffc15 	stw	r2,-16(fp)
    
    if (next->name[len-1] == '/')
 81280e0:	e0bffd17 	ldw	r2,-12(fp)
 81280e4:	10c00217 	ldw	r3,8(r2)
 81280e8:	e0bffc17 	ldw	r2,-16(fp)
 81280ec:	1885883a 	add	r2,r3,r2
 81280f0:	10bfffc4 	addi	r2,r2,-1
 81280f4:	10800003 	ldbu	r2,0(r2)
 81280f8:	10803fcc 	andi	r2,r2,255
 81280fc:	1080201c 	xori	r2,r2,128
 8128100:	10bfe004 	addi	r2,r2,-128
 8128104:	10800bd8 	cmpnei	r2,r2,47
 8128108:	1000031e 	bne	r2,zero,8128118 <alt_find_file+0x70>
    {
      len -= 1;
 812810c:	e0bffc17 	ldw	r2,-16(fp)
 8128110:	10bfffc4 	addi	r2,r2,-1
 8128114:	e0bffc15 	stw	r2,-16(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 8128118:	e0bffc17 	ldw	r2,-16(fp)
 812811c:	1007883a 	mov	r3,r2
 8128120:	e0bffe17 	ldw	r2,-8(fp)
 8128124:	1885883a 	add	r2,r3,r2
 8128128:	10800003 	ldbu	r2,0(r2)
 812812c:	10803fcc 	andi	r2,r2,255
 8128130:	1080201c 	xori	r2,r2,128
 8128134:	10bfe004 	addi	r2,r2,-128
 8128138:	10800be0 	cmpeqi	r2,r2,47
 812813c:	10000a1e 	bne	r2,zero,8128168 <alt_find_file+0xc0>
 8128140:	e0bffc17 	ldw	r2,-16(fp)
 8128144:	1007883a 	mov	r3,r2
 8128148:	e0bffe17 	ldw	r2,-8(fp)
 812814c:	1885883a 	add	r2,r3,r2
 8128150:	10800003 	ldbu	r2,0(r2)
 8128154:	10803fcc 	andi	r2,r2,255
 8128158:	1080201c 	xori	r2,r2,128
 812815c:	10bfe004 	addi	r2,r2,-128
 8128160:	1004c03a 	cmpne	r2,r2,zero
 8128164:	10000a1e 	bne	r2,zero,8128190 <alt_find_file+0xe8>
 8128168:	e0bffd17 	ldw	r2,-12(fp)
 812816c:	11000217 	ldw	r4,8(r2)
 8128170:	e1bffc17 	ldw	r6,-16(fp)
 8128174:	e17ffe17 	ldw	r5,-8(fp)
 8128178:	812835c0 	call	812835c <memcmp>
 812817c:	1004c03a 	cmpne	r2,r2,zero
 8128180:	1000031e 	bne	r2,zero,8128190 <alt_find_file+0xe8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
 8128184:	e0bffd17 	ldw	r2,-12(fp)
 8128188:	e0bfff15 	stw	r2,-4(fp)
 812818c:	00000806 	br	81281b0 <alt_find_file+0x108>
    }
    next = (alt_dev*) next->llist.next;
 8128190:	e0bffd17 	ldw	r2,-12(fp)
 8128194:	10800017 	ldw	r2,0(r2)
 8128198:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 812819c:	00c204f4 	movhi	r3,2067
 81281a0:	18e8b204 	addi	r3,r3,-23864
 81281a4:	e0bffd17 	ldw	r2,-12(fp)
 81281a8:	10ffc91e 	bne	r2,r3,81280d0 <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
 81281ac:	e03fff15 	stw	zero,-4(fp)
 81281b0:	e0bfff17 	ldw	r2,-4(fp)
}
 81281b4:	e037883a 	mov	sp,fp
 81281b8:	dfc00117 	ldw	ra,4(sp)
 81281bc:	df000017 	ldw	fp,0(sp)
 81281c0:	dec00204 	addi	sp,sp,8
 81281c4:	f800283a 	ret

081281c8 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 81281c8:	defffc04 	addi	sp,sp,-16
 81281cc:	df000315 	stw	fp,12(sp)
 81281d0:	df000304 	addi	fp,sp,12
 81281d4:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
 81281d8:	00bffa04 	movi	r2,-24
 81281dc:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 81281e0:	e03ffe15 	stw	zero,-8(fp)
 81281e4:	00001e06 	br	8128260 <alt_get_fd+0x98>
  {
    if (!alt_fd_list[i].dev)
 81281e8:	e0bffe17 	ldw	r2,-8(fp)
 81281ec:	00c204f4 	movhi	r3,2067
 81281f0:	18e84804 	addi	r3,r3,-24288
 81281f4:	10800324 	muli	r2,r2,12
 81281f8:	10c5883a 	add	r2,r2,r3
 81281fc:	10800017 	ldw	r2,0(r2)
 8128200:	1004c03a 	cmpne	r2,r2,zero
 8128204:	1000131e 	bne	r2,zero,8128254 <alt_get_fd+0x8c>
    {
      alt_fd_list[i].dev = dev;
 8128208:	e0bffe17 	ldw	r2,-8(fp)
 812820c:	00c204f4 	movhi	r3,2067
 8128210:	18e84804 	addi	r3,r3,-24288
 8128214:	10800324 	muli	r2,r2,12
 8128218:	10c7883a 	add	r3,r2,r3
 812821c:	e0bfff17 	ldw	r2,-4(fp)
 8128220:	18800015 	stw	r2,0(r3)
      if (i > alt_max_fd)
 8128224:	008204f4 	movhi	r2,2067
 8128228:	10a8b604 	addi	r2,r2,-23848
 812822c:	10c00017 	ldw	r3,0(r2)
 8128230:	e0bffe17 	ldw	r2,-8(fp)
 8128234:	1880040e 	bge	r3,r2,8128248 <alt_get_fd+0x80>
      {
        alt_max_fd = i;
 8128238:	00c204f4 	movhi	r3,2067
 812823c:	18e8b604 	addi	r3,r3,-23848
 8128240:	e0bffe17 	ldw	r2,-8(fp)
 8128244:	18800015 	stw	r2,0(r3)
      }
      rc = i;
 8128248:	e0bffe17 	ldw	r2,-8(fp)
 812824c:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
 8128250:	00000606 	br	812826c <alt_get_fd+0xa4>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 8128254:	e0bffe17 	ldw	r2,-8(fp)
 8128258:	10800044 	addi	r2,r2,1
 812825c:	e0bffe15 	stw	r2,-8(fp)
 8128260:	e0bffe17 	ldw	r2,-8(fp)
 8128264:	10800810 	cmplti	r2,r2,32
 8128268:	103fdf1e 	bne	r2,zero,81281e8 <alt_get_fd+0x20>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
 812826c:	e0bffd17 	ldw	r2,-12(fp)
}
 8128270:	e037883a 	mov	sp,fp
 8128274:	df000017 	ldw	fp,0(sp)
 8128278:	dec00104 	addi	sp,sp,4
 812827c:	f800283a 	ret

08128280 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
 8128280:	defffb04 	addi	sp,sp,-20
 8128284:	df000415 	stw	fp,16(sp)
 8128288:	df000404 	addi	fp,sp,16
 812828c:	e13ffe15 	stw	r4,-8(fp)
 8128290:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
 8128294:	e0bfff17 	ldw	r2,-4(fp)
 8128298:	10840070 	cmpltui	r2,r2,4097
 812829c:	1000021e 	bne	r2,zero,81282a8 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
 81282a0:	00840004 	movi	r2,4096
 81282a4:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
 81282a8:	e0fffe17 	ldw	r3,-8(fp)
 81282ac:	e0bfff17 	ldw	r2,-4(fp)
 81282b0:	1885883a 	add	r2,r3,r2
 81282b4:	e0bffc15 	stw	r2,-16(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 81282b8:	e0bffe17 	ldw	r2,-8(fp)
 81282bc:	e0bffd15 	stw	r2,-12(fp)
 81282c0:	00000506 	br	81282d8 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
 81282c4:	e0bffd17 	ldw	r2,-12(fp)
 81282c8:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 81282cc:	e0bffd17 	ldw	r2,-12(fp)
 81282d0:	10800804 	addi	r2,r2,32
 81282d4:	e0bffd15 	stw	r2,-12(fp)
 81282d8:	e0fffd17 	ldw	r3,-12(fp)
 81282dc:	e0bffc17 	ldw	r2,-16(fp)
 81282e0:	18bff836 	bltu	r3,r2,81282c4 <alt_icache_flush+0x44>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
 81282e4:	e0bffe17 	ldw	r2,-8(fp)
 81282e8:	108007cc 	andi	r2,r2,31
 81282ec:	1005003a 	cmpeq	r2,r2,zero
 81282f0:	1000021e 	bne	r2,zero,81282fc <alt_icache_flush+0x7c>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
 81282f4:	e0bffd17 	ldw	r2,-12(fp)
 81282f8:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
 81282fc:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
 8128300:	e037883a 	mov	sp,fp
 8128304:	df000017 	ldw	fp,0(sp)
 8128308:	dec00104 	addi	sp,sp,4
 812830c:	f800283a 	ret

08128310 <atexit>:
 8128310:	200b883a 	mov	r5,r4
 8128314:	000d883a 	mov	r6,zero
 8128318:	0009883a 	mov	r4,zero
 812831c:	000f883a 	mov	r7,zero
 8128320:	81284e41 	jmpi	81284e4 <__register_exitproc>

08128324 <exit>:
 8128324:	defffe04 	addi	sp,sp,-8
 8128328:	000b883a 	mov	r5,zero
 812832c:	dc000015 	stw	r16,0(sp)
 8128330:	dfc00115 	stw	ra,4(sp)
 8128334:	2021883a 	mov	r16,r4
 8128338:	812861c0 	call	812861c <__call_exitprocs>
 812833c:	008204f4 	movhi	r2,2067
 8128340:	10a8ad04 	addi	r2,r2,-23884
 8128344:	11000017 	ldw	r4,0(r2)
 8128348:	20800f17 	ldw	r2,60(r4)
 812834c:	10000126 	beq	r2,zero,8128354 <exit+0x30>
 8128350:	103ee83a 	callr	r2
 8128354:	8009883a 	mov	r4,r16
 8128358:	812880c0 	call	812880c <_exit>

0812835c <memcmp>:
 812835c:	00c000c4 	movi	r3,3
 8128360:	1980032e 	bgeu	r3,r6,8128370 <memcmp+0x14>
 8128364:	2144b03a 	or	r2,r4,r5
 8128368:	10c4703a 	and	r2,r2,r3
 812836c:	10000f26 	beq	r2,zero,81283ac <memcmp+0x50>
 8128370:	31ffffc4 	addi	r7,r6,-1
 8128374:	3000061e 	bne	r6,zero,8128390 <memcmp+0x34>
 8128378:	00000a06 	br	81283a4 <memcmp+0x48>
 812837c:	39ffffc4 	addi	r7,r7,-1
 8128380:	00bfffc4 	movi	r2,-1
 8128384:	21000044 	addi	r4,r4,1
 8128388:	29400044 	addi	r5,r5,1
 812838c:	38800526 	beq	r7,r2,81283a4 <memcmp+0x48>
 8128390:	20c00003 	ldbu	r3,0(r4)
 8128394:	28800003 	ldbu	r2,0(r5)
 8128398:	18bff826 	beq	r3,r2,812837c <memcmp+0x20>
 812839c:	1885c83a 	sub	r2,r3,r2
 81283a0:	f800283a 	ret
 81283a4:	0005883a 	mov	r2,zero
 81283a8:	f800283a 	ret
 81283ac:	180f883a 	mov	r7,r3
 81283b0:	20c00017 	ldw	r3,0(r4)
 81283b4:	28800017 	ldw	r2,0(r5)
 81283b8:	18bfed1e 	bne	r3,r2,8128370 <memcmp+0x14>
 81283bc:	31bfff04 	addi	r6,r6,-4
 81283c0:	21000104 	addi	r4,r4,4
 81283c4:	29400104 	addi	r5,r5,4
 81283c8:	39bff936 	bltu	r7,r6,81283b0 <memcmp+0x54>
 81283cc:	003fe806 	br	8128370 <memcmp+0x14>

081283d0 <memcpy>:
 81283d0:	01c003c4 	movi	r7,15
 81283d4:	2007883a 	mov	r3,r4
 81283d8:	3980032e 	bgeu	r7,r6,81283e8 <memcpy+0x18>
 81283dc:	2904b03a 	or	r2,r5,r4
 81283e0:	108000cc 	andi	r2,r2,3
 81283e4:	10000926 	beq	r2,zero,812840c <memcpy+0x3c>
 81283e8:	30000626 	beq	r6,zero,8128404 <memcpy+0x34>
 81283ec:	30cd883a 	add	r6,r6,r3
 81283f0:	28800003 	ldbu	r2,0(r5)
 81283f4:	29400044 	addi	r5,r5,1
 81283f8:	18800005 	stb	r2,0(r3)
 81283fc:	18c00044 	addi	r3,r3,1
 8128400:	30fffb1e 	bne	r6,r3,81283f0 <memcpy+0x20>
 8128404:	2005883a 	mov	r2,r4
 8128408:	f800283a 	ret
 812840c:	3811883a 	mov	r8,r7
 8128410:	200f883a 	mov	r7,r4
 8128414:	28c00017 	ldw	r3,0(r5)
 8128418:	31bffc04 	addi	r6,r6,-16
 812841c:	38c00015 	stw	r3,0(r7)
 8128420:	28800117 	ldw	r2,4(r5)
 8128424:	38800115 	stw	r2,4(r7)
 8128428:	28c00217 	ldw	r3,8(r5)
 812842c:	38c00215 	stw	r3,8(r7)
 8128430:	28800317 	ldw	r2,12(r5)
 8128434:	29400404 	addi	r5,r5,16
 8128438:	38800315 	stw	r2,12(r7)
 812843c:	39c00404 	addi	r7,r7,16
 8128440:	41bff436 	bltu	r8,r6,8128414 <memcpy+0x44>
 8128444:	008000c4 	movi	r2,3
 8128448:	1180072e 	bgeu	r2,r6,8128468 <memcpy+0x98>
 812844c:	1007883a 	mov	r3,r2
 8128450:	28800017 	ldw	r2,0(r5)
 8128454:	31bfff04 	addi	r6,r6,-4
 8128458:	29400104 	addi	r5,r5,4
 812845c:	38800015 	stw	r2,0(r7)
 8128460:	39c00104 	addi	r7,r7,4
 8128464:	19bffa36 	bltu	r3,r6,8128450 <memcpy+0x80>
 8128468:	3807883a 	mov	r3,r7
 812846c:	003fde06 	br	81283e8 <memcpy+0x18>

08128470 <strlen>:
 8128470:	208000cc 	andi	r2,r4,3
 8128474:	2011883a 	mov	r8,r4
 8128478:	1000161e 	bne	r2,zero,81284d4 <strlen+0x64>
 812847c:	20c00017 	ldw	r3,0(r4)
 8128480:	017fbff4 	movhi	r5,65279
 8128484:	297fbfc4 	addi	r5,r5,-257
 8128488:	01e02074 	movhi	r7,32897
 812848c:	39e02004 	addi	r7,r7,-32640
 8128490:	1945883a 	add	r2,r3,r5
 8128494:	11c4703a 	and	r2,r2,r7
 8128498:	00c6303a 	nor	r3,zero,r3
 812849c:	1886703a 	and	r3,r3,r2
 81284a0:	18000c1e 	bne	r3,zero,81284d4 <strlen+0x64>
 81284a4:	280d883a 	mov	r6,r5
 81284a8:	380b883a 	mov	r5,r7
 81284ac:	21000104 	addi	r4,r4,4
 81284b0:	20800017 	ldw	r2,0(r4)
 81284b4:	1187883a 	add	r3,r2,r6
 81284b8:	1946703a 	and	r3,r3,r5
 81284bc:	0084303a 	nor	r2,zero,r2
 81284c0:	10c4703a 	and	r2,r2,r3
 81284c4:	103ff926 	beq	r2,zero,81284ac <strlen+0x3c>
 81284c8:	20800007 	ldb	r2,0(r4)
 81284cc:	10000326 	beq	r2,zero,81284dc <strlen+0x6c>
 81284d0:	21000044 	addi	r4,r4,1
 81284d4:	20800007 	ldb	r2,0(r4)
 81284d8:	103ffd1e 	bne	r2,zero,81284d0 <strlen+0x60>
 81284dc:	2205c83a 	sub	r2,r4,r8
 81284e0:	f800283a 	ret

081284e4 <__register_exitproc>:
 81284e4:	defffa04 	addi	sp,sp,-24
 81284e8:	008204f4 	movhi	r2,2067
 81284ec:	10a8ad04 	addi	r2,r2,-23884
 81284f0:	dc000015 	stw	r16,0(sp)
 81284f4:	14000017 	ldw	r16,0(r2)
 81284f8:	dd000415 	stw	r20,16(sp)
 81284fc:	2829883a 	mov	r20,r5
 8128500:	81405217 	ldw	r5,328(r16)
 8128504:	dcc00315 	stw	r19,12(sp)
 8128508:	dc800215 	stw	r18,8(sp)
 812850c:	dc400115 	stw	r17,4(sp)
 8128510:	dfc00515 	stw	ra,20(sp)
 8128514:	2023883a 	mov	r17,r4
 8128518:	3027883a 	mov	r19,r6
 812851c:	3825883a 	mov	r18,r7
 8128520:	28002526 	beq	r5,zero,81285b8 <__register_exitproc+0xd4>
 8128524:	29000117 	ldw	r4,4(r5)
 8128528:	008007c4 	movi	r2,31
 812852c:	11002716 	blt	r2,r4,81285cc <__register_exitproc+0xe8>
 8128530:	8800101e 	bne	r17,zero,8128574 <__register_exitproc+0x90>
 8128534:	2105883a 	add	r2,r4,r4
 8128538:	1085883a 	add	r2,r2,r2
 812853c:	20c00044 	addi	r3,r4,1
 8128540:	1145883a 	add	r2,r2,r5
 8128544:	0009883a 	mov	r4,zero
 8128548:	15000215 	stw	r20,8(r2)
 812854c:	28c00115 	stw	r3,4(r5)
 8128550:	2005883a 	mov	r2,r4
 8128554:	dfc00517 	ldw	ra,20(sp)
 8128558:	dd000417 	ldw	r20,16(sp)
 812855c:	dcc00317 	ldw	r19,12(sp)
 8128560:	dc800217 	ldw	r18,8(sp)
 8128564:	dc400117 	ldw	r17,4(sp)
 8128568:	dc000017 	ldw	r16,0(sp)
 812856c:	dec00604 	addi	sp,sp,24
 8128570:	f800283a 	ret
 8128574:	29802204 	addi	r6,r5,136
 8128578:	00800044 	movi	r2,1
 812857c:	110e983a 	sll	r7,r2,r4
 8128580:	30c04017 	ldw	r3,256(r6)
 8128584:	2105883a 	add	r2,r4,r4
 8128588:	1085883a 	add	r2,r2,r2
 812858c:	1185883a 	add	r2,r2,r6
 8128590:	19c6b03a 	or	r3,r3,r7
 8128594:	14802015 	stw	r18,128(r2)
 8128598:	14c00015 	stw	r19,0(r2)
 812859c:	00800084 	movi	r2,2
 81285a0:	30c04015 	stw	r3,256(r6)
 81285a4:	88bfe31e 	bne	r17,r2,8128534 <__register_exitproc+0x50>
 81285a8:	30804117 	ldw	r2,260(r6)
 81285ac:	11c4b03a 	or	r2,r2,r7
 81285b0:	30804115 	stw	r2,260(r6)
 81285b4:	003fdf06 	br	8128534 <__register_exitproc+0x50>
 81285b8:	008204f4 	movhi	r2,2067
 81285bc:	10aef004 	addi	r2,r2,-17472
 81285c0:	100b883a 	mov	r5,r2
 81285c4:	80805215 	stw	r2,328(r16)
 81285c8:	003fd606 	br	8128524 <__register_exitproc+0x40>
 81285cc:	00800034 	movhi	r2,0
 81285d0:	10800004 	addi	r2,r2,0
 81285d4:	1000021e 	bne	r2,zero,81285e0 <__register_exitproc+0xfc>
 81285d8:	013fffc4 	movi	r4,-1
 81285dc:	003fdc06 	br	8128550 <__register_exitproc+0x6c>
 81285e0:	01006404 	movi	r4,400
 81285e4:	103ee83a 	callr	r2
 81285e8:	1007883a 	mov	r3,r2
 81285ec:	103ffa26 	beq	r2,zero,81285d8 <__register_exitproc+0xf4>
 81285f0:	80805217 	ldw	r2,328(r16)
 81285f4:	180b883a 	mov	r5,r3
 81285f8:	18000115 	stw	zero,4(r3)
 81285fc:	18800015 	stw	r2,0(r3)
 8128600:	80c05215 	stw	r3,328(r16)
 8128604:	18006215 	stw	zero,392(r3)
 8128608:	18006315 	stw	zero,396(r3)
 812860c:	0009883a 	mov	r4,zero
 8128610:	883fc826 	beq	r17,zero,8128534 <__register_exitproc+0x50>
 8128614:	003fd706 	br	8128574 <__register_exitproc+0x90>

08128618 <register_fini>:
 8128618:	f800283a 	ret

0812861c <__call_exitprocs>:
 812861c:	008204f4 	movhi	r2,2067
 8128620:	10a8ad04 	addi	r2,r2,-23884
 8128624:	10800017 	ldw	r2,0(r2)
 8128628:	defff304 	addi	sp,sp,-52
 812862c:	df000b15 	stw	fp,44(sp)
 8128630:	d8800115 	stw	r2,4(sp)
 8128634:	00800034 	movhi	r2,0
 8128638:	10800004 	addi	r2,r2,0
 812863c:	1005003a 	cmpeq	r2,r2,zero
 8128640:	d8800215 	stw	r2,8(sp)
 8128644:	d8800117 	ldw	r2,4(sp)
 8128648:	dd400815 	stw	r21,32(sp)
 812864c:	dd000715 	stw	r20,28(sp)
 8128650:	10805204 	addi	r2,r2,328
 8128654:	dfc00c15 	stw	ra,48(sp)
 8128658:	ddc00a15 	stw	r23,40(sp)
 812865c:	dd800915 	stw	r22,36(sp)
 8128660:	dcc00615 	stw	r19,24(sp)
 8128664:	dc800515 	stw	r18,20(sp)
 8128668:	dc400415 	stw	r17,16(sp)
 812866c:	dc000315 	stw	r16,12(sp)
 8128670:	282b883a 	mov	r21,r5
 8128674:	2039883a 	mov	fp,r4
 8128678:	d8800015 	stw	r2,0(sp)
 812867c:	2829003a 	cmpeq	r20,r5,zero
 8128680:	d8800117 	ldw	r2,4(sp)
 8128684:	14405217 	ldw	r17,328(r2)
 8128688:	88001026 	beq	r17,zero,81286cc <__call_exitprocs+0xb0>
 812868c:	ddc00017 	ldw	r23,0(sp)
 8128690:	88800117 	ldw	r2,4(r17)
 8128694:	8c802204 	addi	r18,r17,136
 8128698:	143fffc4 	addi	r16,r2,-1
 812869c:	80000916 	blt	r16,zero,81286c4 <__call_exitprocs+0xa8>
 81286a0:	05bfffc4 	movi	r22,-1
 81286a4:	a000151e 	bne	r20,zero,81286fc <__call_exitprocs+0xe0>
 81286a8:	8409883a 	add	r4,r16,r16
 81286ac:	2105883a 	add	r2,r4,r4
 81286b0:	1485883a 	add	r2,r2,r18
 81286b4:	10c02017 	ldw	r3,128(r2)
 81286b8:	a8c01126 	beq	r21,r3,8128700 <__call_exitprocs+0xe4>
 81286bc:	843fffc4 	addi	r16,r16,-1
 81286c0:	85bff81e 	bne	r16,r22,81286a4 <__call_exitprocs+0x88>
 81286c4:	d8800217 	ldw	r2,8(sp)
 81286c8:	10003126 	beq	r2,zero,8128790 <__call_exitprocs+0x174>
 81286cc:	dfc00c17 	ldw	ra,48(sp)
 81286d0:	df000b17 	ldw	fp,44(sp)
 81286d4:	ddc00a17 	ldw	r23,40(sp)
 81286d8:	dd800917 	ldw	r22,36(sp)
 81286dc:	dd400817 	ldw	r21,32(sp)
 81286e0:	dd000717 	ldw	r20,28(sp)
 81286e4:	dcc00617 	ldw	r19,24(sp)
 81286e8:	dc800517 	ldw	r18,20(sp)
 81286ec:	dc400417 	ldw	r17,16(sp)
 81286f0:	dc000317 	ldw	r16,12(sp)
 81286f4:	dec00d04 	addi	sp,sp,52
 81286f8:	f800283a 	ret
 81286fc:	8409883a 	add	r4,r16,r16
 8128700:	88c00117 	ldw	r3,4(r17)
 8128704:	2105883a 	add	r2,r4,r4
 8128708:	1445883a 	add	r2,r2,r17
 812870c:	18ffffc4 	addi	r3,r3,-1
 8128710:	11800217 	ldw	r6,8(r2)
 8128714:	1c001526 	beq	r3,r16,812876c <__call_exitprocs+0x150>
 8128718:	10000215 	stw	zero,8(r2)
 812871c:	303fe726 	beq	r6,zero,81286bc <__call_exitprocs+0xa0>
 8128720:	00c00044 	movi	r3,1
 8128724:	1c06983a 	sll	r3,r3,r16
 8128728:	90804017 	ldw	r2,256(r18)
 812872c:	8cc00117 	ldw	r19,4(r17)
 8128730:	1884703a 	and	r2,r3,r2
 8128734:	10001426 	beq	r2,zero,8128788 <__call_exitprocs+0x16c>
 8128738:	90804117 	ldw	r2,260(r18)
 812873c:	1884703a 	and	r2,r3,r2
 8128740:	10000c1e 	bne	r2,zero,8128774 <__call_exitprocs+0x158>
 8128744:	2105883a 	add	r2,r4,r4
 8128748:	1485883a 	add	r2,r2,r18
 812874c:	11400017 	ldw	r5,0(r2)
 8128750:	e009883a 	mov	r4,fp
 8128754:	303ee83a 	callr	r6
 8128758:	88800117 	ldw	r2,4(r17)
 812875c:	98bfc81e 	bne	r19,r2,8128680 <__call_exitprocs+0x64>
 8128760:	b8800017 	ldw	r2,0(r23)
 8128764:	147fd526 	beq	r2,r17,81286bc <__call_exitprocs+0xa0>
 8128768:	003fc506 	br	8128680 <__call_exitprocs+0x64>
 812876c:	8c000115 	stw	r16,4(r17)
 8128770:	003fea06 	br	812871c <__call_exitprocs+0x100>
 8128774:	2105883a 	add	r2,r4,r4
 8128778:	1485883a 	add	r2,r2,r18
 812877c:	11000017 	ldw	r4,0(r2)
 8128780:	303ee83a 	callr	r6
 8128784:	003ff406 	br	8128758 <__call_exitprocs+0x13c>
 8128788:	303ee83a 	callr	r6
 812878c:	003ff206 	br	8128758 <__call_exitprocs+0x13c>
 8128790:	88800117 	ldw	r2,4(r17)
 8128794:	1000081e 	bne	r2,zero,81287b8 <__call_exitprocs+0x19c>
 8128798:	89000017 	ldw	r4,0(r17)
 812879c:	20000726 	beq	r4,zero,81287bc <__call_exitprocs+0x1a0>
 81287a0:	b9000015 	stw	r4,0(r23)
 81287a4:	8809883a 	mov	r4,r17
 81287a8:	00000000 	call	0 <__alt_mem_onchip_memory2_0-0x3000>
 81287ac:	bc400017 	ldw	r17,0(r23)
 81287b0:	883fb71e 	bne	r17,zero,8128690 <__call_exitprocs+0x74>
 81287b4:	003fc506 	br	81286cc <__call_exitprocs+0xb0>
 81287b8:	89000017 	ldw	r4,0(r17)
 81287bc:	882f883a 	mov	r23,r17
 81287c0:	2023883a 	mov	r17,r4
 81287c4:	883fb21e 	bne	r17,zero,8128690 <__call_exitprocs+0x74>
 81287c8:	003fc006 	br	81286cc <__call_exitprocs+0xb0>

081287cc <alt_sim_halt>:

/*
 * Routine called on exit.
 */
static ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
 81287cc:	defffd04 	addi	sp,sp,-12
 81287d0:	df000215 	stw	fp,8(sp)
 81287d4:	df000204 	addi	fp,sp,8
 81287d8:	e13fff15 	stw	r4,-4(fp)
  int r2 = exit_code;
 81287dc:	e0bfff17 	ldw	r2,-4(fp)
 81287e0:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 81287e4:	e0bffe17 	ldw	r2,-8(fp)
 81287e8:	1005003a 	cmpeq	r2,r2,zero
 81287ec:	1000021e 	bne	r2,zero,81287f8 <alt_sim_halt+0x2c>
    ALT_SIM_FAIL();
 81287f0:	002af070 	cmpltui	zero,zero,43969
 81287f4:	00000106 	br	81287fc <alt_sim_halt+0x30>
  } else {
    ALT_SIM_PASS();
 81287f8:	002af0b0 	cmpltui	zero,zero,43970
  }
#endif /* DEBUG_STUB */
}
 81287fc:	e037883a 	mov	sp,fp
 8128800:	df000017 	ldw	fp,0(sp)
 8128804:	dec00104 	addi	sp,sp,4
 8128808:	f800283a 	ret

0812880c <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 812880c:	defffd04 	addi	sp,sp,-12
 8128810:	dfc00215 	stw	ra,8(sp)
 8128814:	df000115 	stw	fp,4(sp)
 8128818:	df000104 	addi	fp,sp,4
 812881c:	e13fff15 	stw	r4,-4(fp)
  ALT_OS_STOP();

  /* Provide notification to the simulator that we've stopped */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_SIM_HALT().\r\n");
  ALT_SIM_HALT(exit_code);
 8128820:	e13fff17 	ldw	r4,-4(fp)
 8128824:	81287cc0 	call	81287cc <alt_sim_halt>

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 8128828:	003fff06 	br	8128828 <_exit+0x1c>
 812882c:	08128618 	cmpnei	zero,at,18968
