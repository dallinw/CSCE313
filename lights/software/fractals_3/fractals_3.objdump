
fractals_3.elf:     file format elf32-littlenios2
fractals_3.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x081201b4

Program Header:
    LOAD off    0x00001000 vaddr 0x08120000 paddr 0x08120000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x08120020 paddr 0x08120020 align 2**12
         filesz 0x00011db8 memsz 0x00011db8 flags r-x
    LOAD off    0x00012dd8 vaddr 0x08131dd8 paddr 0x08133998 align 2**12
         filesz 0x00001bc0 memsz 0x00001bc0 flags rw-
    LOAD off    0x00015558 vaddr 0x08135558 paddr 0x08135558 align 2**12
         filesz 0x00000000 memsz 0x0000030c flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  08120000  08120000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000194  08120020  08120020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0001167c  081201b4  081201b4  000011b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000005a8  08131830  08131830  00012830  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001bc0  08131dd8  08133998  00012dd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          0000030c  08135558  08135558  00015558  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000023  00000000  00000000  00014998  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00001018  00000000  00000000  000149c0  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 00001b16  00000000  00000000  000159d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00029376  00000000  00000000  000174ee  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00009d6e  00000000  00000000  00040864  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   000195f6  00000000  00000000  0004a5d2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00002004  00000000  00000000  00063bc8  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00002901  00000000  00000000  00065bcc  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000e66b  00000000  00000000  000684cd  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000030  00000000  00000000  00076b38  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000ce0  00000000  00000000  00076b68  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0007b466  2**0
                  CONTENTS, READONLY
 18 .cpu          00000005  00000000  00000000  0007b469  2**0
                  CONTENTS, READONLY
 19 .simulation_enabled 00000001  00000000  00000000  0007b46e  2**0
                  CONTENTS, READONLY
 20 .sysid_hash   00000004  00000000  00000000  0007b46f  2**0
                  CONTENTS, READONLY
 21 .sysid_base   00000004  00000000  00000000  0007b473  2**0
                  CONTENTS, READONLY
 22 .sysid_time   00000004  00000000  00000000  0007b477  2**0
                  CONTENTS, READONLY
 23 .stderr_dev   0000000b  00000000  00000000  0007b47b  2**0
                  CONTENTS, READONLY
 24 .stdin_dev    0000000b  00000000  00000000  0007b486  2**0
                  CONTENTS, READONLY
 25 .stdout_dev   0000000b  00000000  00000000  0007b491  2**0
                  CONTENTS, READONLY
 26 .sopc_system_name 0000000b  00000000  00000000  0007b49c  2**0
                  CONTENTS, READONLY
 27 .quartus_project_dir 00000020  00000000  00000000  0007b4a7  2**0
                  CONTENTS, READONLY
 28 .jdi          0001085c  00000000  00000000  0007b4c7  2**0
                  CONTENTS, READONLY
 29 .sopcinfo     00113e1c  00000000  00000000  0008bd23  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
08120000 l    d  .entry	00000000 .entry
08120020 l    d  .exceptions	00000000 .exceptions
081201b4 l    d  .text	00000000 .text
08131830 l    d  .rodata	00000000 .rodata
08131dd8 l    d  .rwdata	00000000 .rwdata
08135558 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
081201fc l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 w_pow.c
00000000 l    df *ABS*	00000000 e_pow.c
08131924 l     O .rodata	00000010 bp
08131934 l     O .rodata	00000010 dp_l
08131944 l     O .rodata	00000010 dp_h
00000000 l    df *ABS*	00000000 e_sqrt.c
00000000 l    df *ABS*	00000000 s_fabs.c
00000000 l    df *ABS*	00000000 s_finite.c
00000000 l    df *ABS*	00000000 s_isnand.c
00000000 l    df *ABS*	00000000 s_lib_ver.c
00000000 l    df *ABS*	00000000 s_matherr.c
00000000 l    df *ABS*	00000000 s_nan.c
00000000 l    df *ABS*	00000000 s_rint.c
08131954 l     O .rodata	00000010 TWO52
00000000 l    df *ABS*	00000000 s_scalbn.c
00000000 l    df *ABS*	00000000 s_copysign.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 fp-bit.c
08122bd0 l     F .text	000001e4 _fpadd_parts
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
0812332c l     F .text	00000410 _fpadd_parts
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
08124298 l     F .text	0000007c udivmodsi4
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 errno.c
00000000 l    df *ABS*	00000000 impure.c
08131dd8 l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
08124ebc l     F .text	00000058 __sprint_r
08131afe l     O .rodata	00000010 blanks.3452
08131aee l     O .rodata	00000010 zeroes.3453
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
08126f20 l     F .text	00000218 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
0812891c l     F .text	00000058 std
08128a28 l     F .text	00000008 __fp_lock
08128a30 l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 locale.c
08133954 l     O .rwdata	00000004 charset
08131b30 l     O .rodata	00000030 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
08131c78 l     O .rodata	0000000c p05.2458
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_isinfd.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 alt_close.c
0812cf7c l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0812cfdc l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0812d0dc l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
0812d1fc l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0812d2dc l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0812d438 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
0812d664 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
08133978 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
0812d900 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
08132794 l     O .rwdata	00001060 jtag_uart_3
081337f4 l     O .rwdata	0000003c mailbox_0
08133830 l     O .rwdata	0000003c mailbox_1
0813386c l     O .rwdata	0000003c mailbox_2
081338a8 l     O .rwdata	0000003c mailbox_3
081338e4 l     O .rwdata	00000054 video_pixel_buffer_dma_0
0812dc0c l     F .text	00000038 alt_dev_reg
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0812de4c l     F .text	00000228 altera_avalon_jtag_uart_irq
0812e074 l     F .text	000000b0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_mailbox.c
0812e848 l     F .text	0000006c alt_avalon_mutex_reg
0812e8b4 l     F .text	00000060 alt_get_errno
0812ea48 l     F .text	00000050 alt_mailbox_increment_ptr
00000000 l    df *ABS*	00000000 altera_avalon_mutex.c
0812ec18 l     F .text	0000007c alt_mutex_trylock
0812ecec l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 altera_up_avalon_video_pixel_buffer_dma.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
081306d4 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
08130b8c l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
08130cc8 l     F .text	000000dc alt_file_locked
08130f2c l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_irq.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
081315ac l     F .text	00000004 register_fini
00000000 l    df *ABS*	00000000 alt_exit.c
08131760 l     F .text	00000040 alt_sim_halt
0812a6d8 g     F .text	00000094 _mprec_log10
00007000 g       *ABS*	00000000 __alt_mem_onchip_memory2_3
0812a7c4 g     F .text	00000088 __any_on
0812bea0 g     F .text	00000070 _isatty_r
08131c50 g     O .rodata	00000028 __mprec_tinytens
0812d498 g     F .text	0000006c alt_main
0812ea98 g     F .text	000000a8 altera_avalon_mailbox_pend
0812fb88 g     F .text	000003d0 alt_up_pixel_buffer_dma_draw_vline
08124d94 g     F .text	000000a0 _puts_r
081355d4 g     O .bss	00000100 alt_irq
081226d0 g     F .text	00000018 fabs
0812bf10 g     F .text	00000078 _lseek_r
0813555c g     O .bss	00000004 mailbox_0
08133998 g       *ABS*	00000000 __flash_rwdata_start
08123e4c g     F .text	00000088 __eqdf2
08135864 g       *ABS*	00000000 __alt_heap_start
08135560 g     O .bss	00000004 mailbox_2
0812eb40 g     F .text	000000d8 altera_avalon_mailbox_get
08124d1c g     F .text	00000044 printf
0812b96c g     F .text	00000068 __sseek
08128984 g     F .text	000000a4 __sinit
0812965c g     F .text	00000084 _setlocale_r
08128a84 g     F .text	00000068 __sfmoreglue
0812d524 g     F .text	00000020 __malloc_unlock
08122e88 g     F .text	00000174 __divsf3
0812a154 g     F .text	000000e0 memmove
08128a74 g     F .text	00000010 _cleanup
0812edac g     F .text	00000040 altera_avalon_mutex_trylock
0812a84c g     F .text	000000bc _Balloc
08123184 g     F .text	00000094 __fixsfsi
08133940 g     O .rwdata	00000004 n
0812ef5c g     F .text	000001a0 alt_up_pixel_buffer_dma_draw
08123f5c g     F .text	00000088 __gtdf2
08124d0c g     F .text	00000010 __errno
0812ef1c g     F .text	00000040 alt_up_pixel_buffer_dma_open_dev
08120000 g     F .entry	0000001c __reset
0812ee48 g     F .text	0000007c altera_avalon_mutex_is_mine
08120020 g       *ABS*	00000000 __flash_exceptions_start
0812be2c g     F .text	00000074 _fstat_r
08135590 g     O .bss	00000004 errno
081241ec g     F .text	00000038 __make_dp
081247cc g     F .text	0000002c __make_fp
08135598 g     O .bss	00000004 alt_argv
0813b938 g       *ABS*	00000000 _gp
08122db4 g     F .text	00000070 __subsf3
0812f0fc g     F .text	00000058 alt_up_pixel_buffer_dma_change_back_buffer_address
00005000 g       *ABS*	00000000 __alt_mem_onchip_memory2_2
08132614 g     O .rwdata	00000180 alt_fd_list
08135564 g     O .bss	00000004 mailbox_1
081307fc g     F .text	00000094 alt_find_dev
0812a0b4 g     F .text	000000a0 memcpy
08128a68 g     F .text	0000000c _cleanup_r
081240f4 g     F .text	000000f8 __floatsidf
08130c50 g     F .text	00000078 alt_io_redirect
08123fe4 g     F .text	00000088 __ltdf2
08131830 g       *ABS*	00000000 __DTOR_END__
08124e34 g     F .text	00000014 puts
08131130 g     F .text	00000020 altera_nios2_irq_init
0812a628 g     F .text	000000b0 __ratio
0812e98c g     F .text	000000bc altera_avalon_mailbox_post
0812f1ac g     F .text	00000034 alt_up_pixel_buffer_dma_check_swap_buffers_status
0812e28c g     F .text	00000224 altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
08124d60 g     F .text	00000034 _printf_r
00003000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
081243d4 g     F .text	00000008 __udivsi3
0812d13c g     F .text	000000c0 isatty
08131b60 g     O .rodata	000000c8 __mprec_tens
0812e96c g     F .text	00000020 altera_avalon_mailbox_close
0812f838 g     F .text	00000350 alt_up_pixel_buffer_dma_draw_hline
08129638 g     F .text	00000008 __locale_charset
08123074 g     F .text	00000078 __lesf2
08131328 g     F .text	00000090 alt_icache_flush
08135584 g     O .bss	00000004 __malloc_top_pad
08133950 g     O .rwdata	00000004 __mb_cur_max
08129640 g     F .text	0000000c _localeconv_r
0812af44 g     F .text	0000003c __i2b
0812901c g     F .text	0000049c __sfvwrite_r
0812b8f4 g     F .text	00000070 _sbrk_r
0813001c g     F .text	000000d0 helper_plot_pixel
0812bf88 g     F .text	00000078 _read_r
081321d8 g     O .rwdata	0000000c __lc_ctype
08133970 g     O .rwdata	00000004 alt_max_fd
08124b0c g     F .text	00000138 __unpack_d
0812bd08 g     F .text	00000110 _fclose_r
081288e8 g     F .text	00000034 fflush
08135588 g     O .bss	00000004 __malloc_max_sbrked_mem
08123218 g     F .text	00000054 __extendsfdf2
081237bc g     F .text	00000074 __adddf3
0812a508 g     F .text	00000120 __b2d
0812f1e0 g     F .text	00000164 alt_up_pixel_buffer_dma_clear_screen
0812c5dc g     F .text	000005b0 __umoddi3
0812d348 g     F .text	000000f0 lseek
0812eec4 g     F .text	00000058 altera_avalon_mutex_first_lock
08133944 g     O .rwdata	00000004 __fdlib_version
0813394c g     O .rwdata	00000004 _global_impure_ptr
0812b2c0 g     F .text	000005f4 _realloc_r
08135864 g       *ABS*	00000000 __bss_end
08130a94 g     F .text	000000f8 alt_iic_isr_register
0812f344 g     F .text	000004f4 alt_up_pixel_buffer_dma_draw_box
08131024 g     F .text	0000010c alt_tick
0812c000 g     F .text	000005dc __udivdi3
08131c28 g     O .rodata	00000028 __mprec_bigtens
0812b1a0 g     F .text	00000120 __s2b
0812ccec g     F .text	00000194 __floatunsidf
0812a428 g     F .text	00000060 __mcmp
08135558 g     O .bss	00000004 message
08128a50 g     F .text	00000018 __fp_lock_all
08130a4c g     F .text	00000048 alt_ic_irq_enabled
08130f8c g     F .text	00000098 alt_alarm_stop
081355a0 g     O .bss	00000004 alt_irq_active
081200ec g     F .exceptions	000000c8 alt_irq_handler
081325ec g     O .rwdata	00000028 alt_dev_null
08120a50 g     F .text	00000114 barrier
0812ec94 g     F .text	00000058 altera_avalon_mutex_open
0812274c g     F .text	00000210 rint
0812465c g     F .text	000000c8 __unpack_f
081305dc g     F .text	00000044 alt_dcache_flush_all
0812a2f4 g     F .text	00000070 __hi0bits
0812ff58 g     F .text	000000c4 alt_up_pixel_buffer_dma_draw_rectangle
0812cc14 g     F .text	000000d8 __fixdfsi
08133998 g       *ABS*	00000000 __ram_rwdata_end
08133968 g     O .rwdata	00000008 alt_dev_list
0812d7e0 g     F .text	00000120 write
081300ec g     F .text	0000039c alt_up_pixel_buffer_dma_draw_line
08133984 g     O .rwdata	00000008 alt_mutex_list
08131dd8 g       *ABS*	00000000 __ram_rodata_end
0812d008 g     F .text	000000d4 fstat
0812406c g     F .text	00000088 __ledf2
0812b080 g     F .text	00000120 __pow5mult
08135578 g     O .bss	00000004 __nlocale_changed
081243dc g     F .text	00000008 __umodsi3
08135864 g       *ABS*	00000000 end
081244fc g     F .text	00000160 __pack_f
0812dd8c g     F .text	000000c0 altera_avalon_jtag_uart_init
0813182c g       *ABS*	00000000 __CTOR_LIST__
08400000 g       *ABS*	00000000 __alt_stack_pointer
0812447c g     F .text	00000080 __clzsi2
0812e4b0 g     F .text	00000240 altera_avalon_jtag_uart_write
0812e6f0 g     F .text	00000158 alt_avalon_mailbox_init
08128974 g     F .text	00000004 __sfp_lock_acquire
08129fd0 g     F .text	000000e4 memchr
08124f14 g     F .text	00001eac ___vfprintf_internal_r
08128d08 g     F .text	00000314 _free_r
081315b0 g     F .text	000001b0 __call_exitprocs
0813557c g     O .bss	00000004 __mlocale_changed
0813395c g     O .rwdata	00000004 __malloc_sbrk_base
081201b4 g     F .text	0000004c _start
081355a4 g     O .bss	00000004 _alt_tick_rate
0812ac10 g     F .text	0000014c __lshift
081355a8 g     O .bss	00000004 _alt_nticks
0812d544 g     F .text	00000120 read
0812d994 g     F .text	00000278 alt_sys_init
081230ec g     F .text	00000098 __floatsisf
08131478 g     F .text	00000134 __register_exitproc
0812edec g     F .text	0000005c altera_avalon_mutex_unlock
0812ad5c g     F .text	000001e8 __multiply
08121108 g     F .text	00001300 __ieee754_pow
0812e124 g     F .text	00000074 altera_avalon_jtag_uart_close
08120c80 g     F .text	00000488 pow
08131dd8 g       *ABS*	00000000 __ram_rwdata_start
08131830 g       *ABS*	00000000 __ram_rodata_start
081355ac g     O .bss	00000028 __malloc_current_mallinfo
00004000 g       *ABS*	00000000 __alt_mem_onchip_memory2_1
0812a908 g     F .text	0000017c __d2b
0812dc44 g     F .text	00000058 altera_avalon_jtag_uart_read_fd
08131270 g     F .text	000000b8 alt_get_fd
08124c44 g     F .text	000000c8 __fpcmp_parts_d
0812bc98 g     F .text	00000070 _close_r
08131404 g     F .text	00000074 memcmp
0812dcf4 g     F .text	00000048 altera_avalon_jtag_uart_close_fd
08135568 g     O .bss	00000004 col
08135864 g       *ABS*	00000000 __alt_stack_base
0812dd3c g     F .text	00000050 altera_avalon_jtag_uart_ioctl_fd
08126de4 g     F .text	0000013c __swsetup_r
08123bf4 g     F .text	00000258 __divdf3
08128aec g     F .text	000000f0 __sfp
0812a76c g     F .text	00000058 __copybits
081321e4 g     O .rwdata	00000408 __malloc_av_
08128980 g     F .text	00000004 __sinit_lock_release
08123830 g     F .text	000003c4 __muldf3
0812ba50 g     F .text	00000060 __sread
08131964 g     O .rodata	00000010 __thenan_sf
08131150 g     F .text	00000120 alt_find_file
08130620 g     F .text	000000b4 alt_dev_llist_insert
0812d504 g     F .text	00000020 __malloc_lock
0812d724 g     F .text	000000bc sbrk
081286ec g     F .text	000001fc _fflush_r
0812bbe4 g     F .text	000000b4 _calloc_r
08135558 g       *ABS*	00000000 __bss_start
0812a234 g     F .text	00000098 memset
08120200 g     F .text	00000850 main
0813559c g     O .bss	00000004 alt_envp
0813558c g     O .bss	00000004 __malloc_max_total_mem
0812f154 g     F .text	00000058 alt_up_pixel_buffer_dma_swap_buffers
0812dc9c g     F .text	00000058 altera_avalon_jtag_uart_write_fd
0812b964 g     F .text	00000008 __sclose
08122734 g     F .text	00000008 matherr
08400000 g       *ABS*	00000000 __alt_heap_limit
0812be18 g     F .text	00000014 fclose
08124224 g     F .text	00000074 __truncdfsf2
081356d4 g     O .bss	00000190 _atexit0
0812ed6c g     F .text	00000040 altera_avalon_mutex_lock
08127138 g     F .text	000015b4 _dtoa_r
08129890 g     F .text	00000740 _malloc_r
08133974 g     O .rwdata	00000004 alt_errno
08129580 g     F .text	000000b8 _fwalk
08124314 g     F .text	00000060 __divsi3
08131974 g     O .rodata	00000014 __thenan_df
08128bdc g     F .text	0000012c _malloc_trim_r
08131830 g       *ABS*	00000000 __CTOR_END__
081226e8 g     F .text	0000001c finite
0812bab0 g     F .text	000000bc strcmp
08131830 g       *ABS*	00000000 __flash_rodata_start
08131830 g       *ABS*	00000000 __DTOR_LIST__
08122b3c g     F .text	00000024 copysign
08123ed4 g     F .text	00000088 __nedf2
11000000 g       *ABS*	00000000 __alt_mem_sram_0
0812d960 g     F .text	00000034 alt_irq_init
0812d6c4 g     F .text	00000060 alt_release_fd
08131988 g     O .rodata	00000100 __clz_tab
08135580 g     O .bss	00000004 _PathLocale
081313b8 g     F .text	00000014 atexit
0813556c g     O .bss	00000004 my_pixel_buffer
08122ffc g     F .text	00000078 __gesf2
0812bb6c g     F .text	00000078 _write_r
08135570 g     O .bss	00000004 mailbox_3
081296e0 g     F .text	0000001c setlocale
08133948 g     O .rwdata	00000004 _impure_ptr
08135594 g     O .bss	00000004 alt_argc
0812295c g     F .text	000001e0 scalbn
08130798 g     F .text	00000064 _do_dtors
08000000 g       *ABS*	00000000 __alt_mem_sdram_0
08120020 g       .exceptions	00000000 alt_irq_entry
0812a488 g     F .text	00000080 __ulp
0812b8b4 g     F .text	00000040 __isinfd
08128a38 g     F .text	00000018 __fp_unlock_all
0813397c g     O .rwdata	00000008 alt_mailbox_list
08133938 g     O .rwdata	00000004 num_rows
08133960 g     O .rwdata	00000008 alt_fs_list
0812273c g     F .text	00000010 nan
08120020 g       *ABS*	00000000 __ram_exceptions_start
0812964c g     F .text	00000010 localeconv
08122408 g     F .text	000002c8 __ieee754_sqrt
081308c0 g     F .text	00000050 alt_ic_isr_register
08133998 g       *ABS*	00000000 _edata
08135864 g       *ABS*	00000000 _end
08120b94 g     F .text	000000ec post
081201b4 g       *ABS*	00000000 __ram_exceptions_end
0812e198 g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
081309ac g     F .text	000000a0 alt_ic_irq_disable
0812b9d4 g     F .text	0000007c __swrite
08133958 g     O .rwdata	00000004 __malloc_trim_threshold
081313cc g     F .text	00000038 exit
081294b8 g     F .text	000000c8 _fwalk_reent
0812326c g     F .text	000000c0 __floatunsisf
0812aa84 g     F .text	0000018c __mdiff
08124374 g     F .text	00000060 __modsi3
08400000 g       *ABS*	00000000 __alt_data_end
08120020 g     F .exceptions	00000000 alt_exception
08128978 g     F .text	00000004 __sfp_lock_release
08122b60 g     F .text	00000070 __fixunssfsi
0812e914 g     F .text	00000058 altera_avalon_mailbox_open
08124724 g     F .text	000000a8 __fpcmp_parts_f
081317a0 g     F .text	00000020 _exit
08122704 g     F .text	00000030 __isnand
08130488 g     F .text	00000154 alt_alarm_start
081243e4 g     F .text	00000098 __muldi3
081296fc g     F .text	00000194 __smakebuf_r
08124e48 g     F .text	00000074 strlen
08130da4 g     F .text	00000188 open
0812cb8c g     F .text	00000088 __gedf2
08130890 g     F .text	00000030 alt_icache_flush_all
08120b64 g     F .text	00000030 pend
0813398c g     O .rwdata	00000004 alt_priority_mask
0813393c g     O .rwdata	00000004 num_cols
08130910 g     F .text	0000009c alt_ic_irq_enable
08126dc0 g     F .text	00000024 __vfprintf_internal
0812ed4c g     F .text	00000020 altera_avalon_mutex_close
0812373c g     F .text	00000080 __subdf3
0812a364 g     F .text	000000c4 __lo0bits
08133990 g     O .rwdata	00000008 alt_alarm_list
08130734 g     F .text	00000064 _do_ctors
0812ce80 g     F .text	000000fc close
08122e24 g     F .text	00000064 __addsf3
0812d25c g     F .text	00000080 alt_load
08135574 g     O .bss	00000004 row
081247f8 g     F .text	00000314 __pack_d
00000000  w      *UND*	00000000 free
0812897c g     F .text	00000004 __sinit_lock_acquire
0812af80 g     F .text	00000100 __multadd
0812a2cc g     F .text	00000028 _Bfree



Disassembly of section .entry:

08120000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && !defined(ALT_SIM_OPTIMIZE)
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
 8120000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
 8120004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
 8120008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
 812000c:	00bffd16 	blt	zero,r2,8120004 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 8120010:	004204b4 	movhi	at,2066
    ori r1, r1, %lo(_start)
 8120014:	08406d14 	ori	at,at,436
    jmp r1
 8120018:	0800683a 	jmp	at
 812001c:	00000000 	call	0 <__alt_mem_onchip_memory2_0-0x3000>

Disassembly of section .exceptions:

08120020 <alt_exception>:
         * Process an exception.  For all exceptions we must preserve all
         * caller saved registers on the stack (See the Nios2 ABI
         * documentation for details).
         */

        addi  sp, sp, -76
 8120020:	deffed04 	addi	sp,sp,-76

#endif

#endif

        stw   ra,  0(sp)
 8120024:	dfc00015 	stw	ra,0(sp)
        /*
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */

        stw   r1,   8(sp)
 8120028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 812002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 8120030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 8120034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 8120038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 812003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 8120040:	d9c00815 	stw	r7,32(sp)

        rdctl r5, estatus
 8120044:	000b307a 	rdctl	r5,estatus

        stw   r8,  36(sp)
 8120048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 812004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 8120050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 8120054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 8120058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 812005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 8120060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 8120064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 8120068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 812006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 8120070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 8120074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 8120078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 812007c:	10000326 	beq	r2,zero,812008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 8120080:	20000226 	beq	r4,zero,812008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 8120084:	81200ec0 	call	81200ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 8120088:	00000306 	br	8120098 <alt_exception+0x78>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
 812008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
 8120090:	e8bfff17 	ldw	r2,-4(ea)
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
 8120094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 8120098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 812009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 81200a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 81200a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 81200a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 81200ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 81200b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 81200b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 81200b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 81200bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 81200c0:	d9c00817 	ldw	r7,32(sp)
#ifdef ALT_STACK_CHECK
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif
#endif

        ldw   r8,  36(sp)
 81200c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 81200c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 81200cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 81200d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 81200d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 81200d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 81200dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 81200e0:	dbc01017 	ldw	r15,64(sp)
#endif

        ldw   sp,  76(sp)

#else
        addi  sp, sp, 76
 81200e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 81200e8:	ef80083a 	eret

081200ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 81200ec:	defff904 	addi	sp,sp,-28
 81200f0:	dfc00615 	stw	ra,24(sp)
 81200f4:	df000515 	stw	fp,20(sp)
 81200f8:	df000504 	addi	fp,sp,20
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 81200fc:	0005313a 	rdctl	r2,ipending
 8120100:	e0bffc15 	stw	r2,-16(fp)

  return active;
 8120104:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 8120108:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
 812010c:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 8120110:	00800044 	movi	r2,1
 8120114:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 8120118:	e0ffff17 	ldw	r3,-4(fp)
 812011c:	e0bffe17 	ldw	r2,-8(fp)
 8120120:	1884703a 	and	r2,r3,r2
 8120124:	1005003a 	cmpeq	r2,r2,zero
 8120128:	1000161e 	bne	r2,zero,8120184 <alt_irq_handler+0x98>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 812012c:	e0bffd17 	ldw	r2,-12(fp)
 8120130:	00c204f4 	movhi	r3,2067
 8120134:	18d57504 	addi	r3,r3,21972
 8120138:	100490fa 	slli	r2,r2,3
 812013c:	10c5883a 	add	r2,r2,r3
 8120140:	11400017 	ldw	r5,0(r2)
 8120144:	e0bffd17 	ldw	r2,-12(fp)
 8120148:	00c204f4 	movhi	r3,2067
 812014c:	18d57504 	addi	r3,r3,21972
 8120150:	100490fa 	slli	r2,r2,3
 8120154:	10c5883a 	add	r2,r2,r3
 8120158:	10800104 	addi	r2,r2,4
 812015c:	11000017 	ldw	r4,0(r2)
 8120160:	283ee83a 	callr	r5
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 8120164:	0005313a 	rdctl	r2,ipending
 8120168:	e0bffb15 	stw	r2,-20(fp)

  return active;
 812016c:	e0bffb17 	ldw	r2,-20(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
 8120170:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
 8120174:	e0bfff17 	ldw	r2,-4(fp)
 8120178:	1004c03a 	cmpne	r2,r2,zero
 812017c:	103fe31e 	bne	r2,zero,812010c <alt_irq_handler+0x20>
 8120180:	00000706 	br	81201a0 <alt_irq_handler+0xb4>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
 8120184:	e0bffe17 	ldw	r2,-8(fp)
 8120188:	1085883a 	add	r2,r2,r2
 812018c:	e0bffe15 	stw	r2,-8(fp)
      i++;
 8120190:	e0bffd17 	ldw	r2,-12(fp)
 8120194:	10800044 	addi	r2,r2,1
 8120198:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 812019c:	003fde06 	br	8120118 <alt_irq_handler+0x2c>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
 81201a0:	e037883a 	mov	sp,fp
 81201a4:	dfc00117 	ldw	ra,4(sp)
 81201a8:	df000017 	ldw	fp,0(sp)
 81201ac:	dec00204 	addi	sp,sp,8
 81201b0:	f800283a 	ret

Disassembly of section .text:

081201b4 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
 81201b4:	00810014 	movui	r2,1024
#endif

0:
    initd 0(r2)
 81201b8:	10000033 	initd	0(r2)
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
 81201bc:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
 81201c0:	00bffd16 	blt	zero,r2,81201b8 <_start+0x4>
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 81201c4:	06c21034 	movhi	sp,2112
    ori sp, sp, %lo(__alt_stack_pointer)
 81201c8:	dec00014 	ori	sp,sp,0

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
 81201cc:	068204f4 	movhi	gp,2067
    ori gp, gp, %lo(_gp)
 81201d0:	d6ae4e14 	ori	gp,gp,47416
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 81201d4:	008204f4 	movhi	r2,2067
    ori r2, r2, %lo(__bss_start)
 81201d8:	10955614 	ori	r2,r2,21848

    movhi r3, %hi(__bss_end)
 81201dc:	00c204f4 	movhi	r3,2067
    ori r3, r3, %lo(__bss_end)
 81201e0:	18d61914 	ori	r3,r3,22628

    beq r2, r3, 1f
 81201e4:	10c00326 	beq	r2,r3,81201f4 <_start+0x40>

0:
    stw zero, (r2)
 81201e8:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 81201ec:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 81201f0:	10fffd36 	bltu	r2,r3,81201e8 <_start+0x34>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 81201f4:	812d25c0 	call	812d25c <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 81201f8:	812d4980 	call	812d498 <alt_main>

081201fc <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 81201fc:	003fff06 	br	81201fc <alt_after_alt_main>

08120200 <main>:
void barrier(int id);
void pend(alt_mailbox_dev* box);
void post(int id, alt_u32 mess);


int main() {
 8120200:	deffe704 	addi	sp,sp,-100
 8120204:	dfc01815 	stw	ra,96(sp)
 8120208:	df001715 	stw	fp,92(sp)
 812020c:	dc401615 	stw	r17,88(sp)
 8120210:	dc001515 	stw	r16,84(sp)
 8120214:	df001504 	addi	fp,sp,84

	mailbox_0 = altera_avalon_mailbox_open("/dev/mailbox_0");
 8120218:	010204f4 	movhi	r4,2067
 812021c:	21060c04 	addi	r4,r4,6192
 8120220:	812e9140 	call	812e914 <altera_avalon_mailbox_open>
 8120224:	d0a70915 	stw	r2,-25564(gp)
	mailbox_1 = altera_avalon_mailbox_open("/dev/mailbox_1");
 8120228:	010204f4 	movhi	r4,2067
 812022c:	21061004 	addi	r4,r4,6208
 8120230:	812e9140 	call	812e914 <altera_avalon_mailbox_open>
 8120234:	d0a70b15 	stw	r2,-25556(gp)
	mailbox_2 = altera_avalon_mailbox_open("/dev/mailbox_2");
 8120238:	010204f4 	movhi	r4,2067
 812023c:	21061404 	addi	r4,r4,6224
 8120240:	812e9140 	call	812e914 <altera_avalon_mailbox_open>
 8120244:	d0a70a15 	stw	r2,-25560(gp)
	mailbox_3 = altera_avalon_mailbox_open("/dev/mailbox_3");
 8120248:	010204f4 	movhi	r4,2067
 812024c:	21061804 	addi	r4,r4,6240
 8120250:	812e9140 	call	812e914 <altera_avalon_mailbox_open>
 8120254:	d0a70e15 	stw	r2,-25544(gp)

	int cpuid = __builtin_rdctl(5);
 8120258:	0005317a 	rdctl	r2,cpuid
 812025c:	e0bffe15 	stw	r2,-8(fp)

	barrier(cpuid);
 8120260:	e13ffe17 	ldw	r4,-8(fp)
 8120264:	8120a500 	call	8120a50 <barrier>
	alt_up_pixel_buffer_dma_dev *my_pixel_buffer; //declare global var
	my_pixel_buffer=alt_up_pixel_buffer_dma_open_dev("/dev/video_pixel_buffer_dma_0"); //assign it
 8120268:	010204f4 	movhi	r4,2067
 812026c:	21061c04 	addi	r4,r4,6256
 8120270:	812ef1c0 	call	812ef1c <alt_up_pixel_buffer_dma_open_dev>
 8120274:	e0bffd15 	stw	r2,-12(fp)
	alt_up_pixel_buffer_dma_clear_screen(my_pixel_buffer,0);//clear_screen();
 8120278:	e13ffd17 	ldw	r4,-12(fp)
 812027c:	000b883a 	mov	r5,zero
 8120280:	812f1e00 	call	812f1e0 <alt_up_pixel_buffer_dma_clear_screen>

	int zoom = 1;
 8120284:	00800044 	movi	r2,1
 8120288:	e0bffc15 	stw	r2,-16(fp)
	float min_x, max_x, min_y, max_y;
	min_x = -2.5;
 812028c:	00b00834 	movhi	r2,49184
 8120290:	e0bffb15 	stw	r2,-20(fp)
	max_x = 1.0;
 8120294:	008fe034 	movhi	r2,16256
 8120298:	e0bffa15 	stw	r2,-24(fp)
	min_y = -1.0;
 812029c:	00afe034 	movhi	r2,49024
 81202a0:	e0bff915 	stw	r2,-28(fp)
	max_y = 1.0;
 81202a4:	008fe034 	movhi	r2,16256
 81202a8:	e0bff815 	stw	r2,-32(fp)
	float x, y, z;
	float x0, y0;
	float target_x, target_y, xtemp;
	int iteration;
	int is_target; //false
	int first_pass = 0; // on the first pass
 81202ac:	e03feb15 	stw	zero,-84(fp)

	//barrier(cpuid);
	while (1) {
		is_target = 0;
 81202b0:	e03fec15 	stw	zero,-80(fp)
		for (i = cpuid; i < num_rows; i+=4) {
 81202b4:	e0bffe17 	ldw	r2,-8(fp)
 81202b8:	e0bff715 	stw	r2,-36(fp)
 81202bc:	00014206 	br	81207c8 <main+0x5c8>
			for (j = 0; j < num_cols; j++) {
 81202c0:	e03ff615 	stw	zero,-40(fp)
 81202c4:	00013806 	br	81207a8 <main+0x5a8>
				x = 0;
 81202c8:	e03ff515 	stw	zero,-44(fp)
				y = 0;
 81202cc:	e03ff415 	stw	zero,-48(fp)
				z = 0;
 81202d0:	e03ff315 	stw	zero,-52(fp)
				x0 = j/320.0*(max_x - min_x) + min_x;
 81202d4:	e13ff617 	ldw	r4,-40(fp)
 81202d8:	81230ec0 	call	81230ec <__floatsisf>
 81202dc:	1009883a 	mov	r4,r2
 81202e0:	0150e834 	movhi	r5,17312
 81202e4:	8122e880 	call	8122e88 <__divsf3>
 81202e8:	1009883a 	mov	r4,r2
 81202ec:	e0fffa17 	ldw	r3,-24(fp)
 81202f0:	e0bffb17 	ldw	r2,-20(fp)
 81202f4:	1885ffb2 	custom	254,r2,r3,r2
 81202f8:	2087ff32 	custom	252,r3,r4,r2
 81202fc:	e0bffb17 	ldw	r2,-20(fp)
 8120300:	1885ff72 	custom	253,r2,r3,r2
 8120304:	e0bff215 	stw	r2,-56(fp)
				y0 = (239.0-i)/240.0*(max_y - min_y) + min_y;
 8120308:	e13ff717 	ldw	r4,-36(fp)
 812030c:	81230ec0 	call	81230ec <__floatsisf>
 8120310:	1007883a 	mov	r3,r2
 8120314:	0090dbf4 	movhi	r2,17263
 8120318:	10c5ffb2 	custom	254,r2,r2,r3
 812031c:	1009883a 	mov	r4,r2
 8120320:	0150dc34 	movhi	r5,17264
 8120324:	8122e880 	call	8122e88 <__divsf3>
 8120328:	1009883a 	mov	r4,r2
 812032c:	e0fff817 	ldw	r3,-32(fp)
 8120330:	e0bff917 	ldw	r2,-28(fp)
 8120334:	1885ffb2 	custom	254,r2,r3,r2
 8120338:	2087ff32 	custom	252,r3,r4,r2
 812033c:	e0bff917 	ldw	r2,-28(fp)
 8120340:	1885ff72 	custom	253,r2,r3,r2
 8120344:	e0bff115 	stw	r2,-60(fp)
				iteration = 0;
 8120348:	e03fed15 	stw	zero,-76(fp)

				while( (x*x + y*y) <= 4 && iteration < 500) {
 812034c:	0000db06 	br	81206bc <main+0x4bc>
					xtemp = x*x - y*y + x0;
 8120350:	e0fff517 	ldw	r3,-44(fp)
 8120354:	e0bff517 	ldw	r2,-44(fp)
 8120358:	1889ff32 	custom	252,r4,r3,r2
 812035c:	e0fff417 	ldw	r3,-48(fp)
 8120360:	e0bff417 	ldw	r2,-48(fp)
 8120364:	1885ff32 	custom	252,r2,r3,r2
 8120368:	2087ffb2 	custom	254,r3,r4,r2
 812036c:	e0bff217 	ldw	r2,-56(fp)
 8120370:	1885ff72 	custom	253,r2,r3,r2
 8120374:	e0bfee15 	stw	r2,-72(fp)
					y = 2*x*y + y0;
 8120378:	e0bff517 	ldw	r2,-44(fp)
 812037c:	1087ff72 	custom	253,r3,r2,r2
 8120380:	e0bff417 	ldw	r2,-48(fp)
 8120384:	1887ff32 	custom	252,r3,r3,r2
 8120388:	e0bff117 	ldw	r2,-60(fp)
 812038c:	1885ff72 	custom	253,r2,r3,r2
 8120390:	e0bff415 	stw	r2,-48(fp)
					x = xtemp;
 8120394:	e0bfee17 	ldw	r2,-72(fp)
 8120398:	e0bff515 	stw	r2,-44(fp)
					iteration++;
 812039c:	e0bfed17 	ldw	r2,-76(fp)
 81203a0:	10800044 	addi	r2,r2,1
 81203a4:	e0bfed15 	stw	r2,-76(fp)

					if(iteration == 450 && first_pass == 0) {
 81203a8:	e0bfed17 	ldw	r2,-76(fp)
 81203ac:	10807098 	cmpnei	r2,r2,450
 81203b0:	1000c21e 	bne	r2,zero,81206bc <main+0x4bc>
 81203b4:	e0bfeb17 	ldw	r2,-84(fp)
 81203b8:	1004c03a 	cmpne	r2,r2,zero
 81203bc:	1000bf1e 	bne	r2,zero,81206bc <main+0x4bc>
						printf("FIRST PASS COMPLETE\n");
 81203c0:	010204f4 	movhi	r4,2067
 81203c4:	21062404 	addi	r4,r4,6288
 81203c8:	8124e340 	call	8124e34 <puts>
						first_pass = 1;
 81203cc:	00800044 	movi	r2,1
 81203d0:	e0bfeb15 	stw	r2,-84(fp)
						if(cpuid == 0 && is_target == 0){
 81203d4:	e0bffe17 	ldw	r2,-8(fp)
 81203d8:	1004c03a 	cmpne	r2,r2,zero
 81203dc:	1000481e 	bne	r2,zero,8120500 <main+0x300>
 81203e0:	e0bfec17 	ldw	r2,-80(fp)
 81203e4:	1004c03a 	cmpne	r2,r2,zero
 81203e8:	1000451e 	bne	r2,zero,8120500 <main+0x300>
							printf("set target x and y for zoom \n");
 81203ec:	010204f4 	movhi	r4,2067
 81203f0:	21062904 	addi	r4,r4,6308
 81203f4:	8124e340 	call	8124e34 <puts>
							is_target = 1;
 81203f8:	00800044 	movi	r2,1
 81203fc:	e0bfec15 	stw	r2,-80(fp)
							target_x = x0;
 8120400:	e0bff217 	ldw	r2,-56(fp)
 8120404:	e0bff015 	stw	r2,-64(fp)
							target_y = y0;
 8120408:	e0bff117 	ldw	r2,-60(fp)
 812040c:	e0bfef15 	stw	r2,-68(fp)
							//comment out from here to the other dotted line to get rid of the zoom stuff
							//if you run it with no zoom you'll notice I was able to adjust the barriers and
							//smooth out the drawing of the frame so that certain CPUs don't pull ahead
							//I
							//*------------
							printf("target_x: %f...", target_x);
 8120410:	e13ff017 	ldw	r4,-64(fp)
 8120414:	81232180 	call	8123218 <__extendsfdf2>
 8120418:	100d883a 	mov	r6,r2
 812041c:	180f883a 	mov	r7,r3
 8120420:	010204f4 	movhi	r4,2067
 8120424:	21063104 	addi	r4,r4,6340
 8120428:	300b883a 	mov	r5,r6
 812042c:	380d883a 	mov	r6,r7
 8120430:	8124d1c0 	call	8124d1c <printf>
							printf("target_y: %f\n", target_y);
 8120434:	e13fef17 	ldw	r4,-68(fp)
 8120438:	81232180 	call	8123218 <__extendsfdf2>
 812043c:	100d883a 	mov	r6,r2
 8120440:	180f883a 	mov	r7,r3
 8120444:	010204f4 	movhi	r4,2067
 8120448:	21063504 	addi	r4,r4,6356
 812044c:	300b883a 	mov	r5,r6
 8120450:	380d883a 	mov	r6,r7
 8120454:	8124d1c0 	call	8124d1c <printf>
							 *
							 *
							 *
							 */

							altera_avalon_mailbox_post(mailbox_1, target_x);
 8120458:	d4270b17 	ldw	r16,-25556(gp)
 812045c:	e13ff017 	ldw	r4,-64(fp)
 8120460:	8122b600 	call	8122b60 <__fixunssfsi>
 8120464:	100b883a 	mov	r5,r2
 8120468:	8009883a 	mov	r4,r16
 812046c:	812e98c0 	call	812e98c <altera_avalon_mailbox_post>
							altera_avalon_mailbox_post(mailbox_2, target_x);
 8120470:	d4270a17 	ldw	r16,-25560(gp)
 8120474:	e13ff017 	ldw	r4,-64(fp)
 8120478:	8122b600 	call	8122b60 <__fixunssfsi>
 812047c:	100b883a 	mov	r5,r2
 8120480:	8009883a 	mov	r4,r16
 8120484:	812e98c0 	call	812e98c <altera_avalon_mailbox_post>
							altera_avalon_mailbox_post(mailbox_3, target_x);
 8120488:	d4270e17 	ldw	r16,-25544(gp)
 812048c:	e13ff017 	ldw	r4,-64(fp)
 8120490:	8122b600 	call	8122b60 <__fixunssfsi>
 8120494:	100b883a 	mov	r5,r2
 8120498:	8009883a 	mov	r4,r16
 812049c:	812e98c0 	call	812e98c <altera_avalon_mailbox_post>
							altera_avalon_mailbox_post(mailbox_1, target_y);
 81204a0:	d4270b17 	ldw	r16,-25556(gp)
 81204a4:	e13fef17 	ldw	r4,-68(fp)
 81204a8:	8122b600 	call	8122b60 <__fixunssfsi>
 81204ac:	100b883a 	mov	r5,r2
 81204b0:	8009883a 	mov	r4,r16
 81204b4:	812e98c0 	call	812e98c <altera_avalon_mailbox_post>
							altera_avalon_mailbox_post(mailbox_2, target_y);
 81204b8:	d4270a17 	ldw	r16,-25560(gp)
 81204bc:	e13fef17 	ldw	r4,-68(fp)
 81204c0:	8122b600 	call	8122b60 <__fixunssfsi>
 81204c4:	100b883a 	mov	r5,r2
 81204c8:	8009883a 	mov	r4,r16
 81204cc:	812e98c0 	call	812e98c <altera_avalon_mailbox_post>
							altera_avalon_mailbox_post(mailbox_3, target_y);
 81204d0:	d4270e17 	ldw	r16,-25544(gp)
 81204d4:	e13fef17 	ldw	r4,-68(fp)
 81204d8:	8122b600 	call	8122b60 <__fixunssfsi>
 81204dc:	100b883a 	mov	r5,r2
 81204e0:	8009883a 	mov	r4,r16
 81204e4:	812e98c0 	call	812e98c <altera_avalon_mailbox_post>
							//pend mailbox 0 until the other 3 boxes have posted
							altera_avalon_mailbox_pend(mailbox_0);
 81204e8:	d1270917 	ldw	r4,-25564(gp)
 81204ec:	812ea980 	call	812ea98 <altera_avalon_mailbox_pend>
							altera_avalon_mailbox_pend(mailbox_0);
 81204f0:	d1270917 	ldw	r4,-25564(gp)
 81204f4:	812ea980 	call	812ea98 <altera_avalon_mailbox_pend>
							altera_avalon_mailbox_pend(mailbox_0);
 81204f8:	d1270917 	ldw	r4,-25564(gp)
 81204fc:	812ea980 	call	812ea98 <altera_avalon_mailbox_pend>
						}
						if(cpuid == 1){
 8120500:	e0bffe17 	ldw	r2,-8(fp)
 8120504:	10800058 	cmpnei	r2,r2,1
 8120508:	1000221e 	bne	r2,zero,8120594 <main+0x394>
							printf("mailbox_1 pending\n");
 812050c:	010204f4 	movhi	r4,2067
 8120510:	21063904 	addi	r4,r4,6372
 8120514:	8124e340 	call	8124e34 <puts>
							target_x = altera_avalon_mailbox_pend(mailbox_1);
 8120518:	d1270b17 	ldw	r4,-25556(gp)
 812051c:	812ea980 	call	812ea98 <altera_avalon_mailbox_pend>
 8120520:	1009883a 	mov	r4,r2
 8120524:	812326c0 	call	812326c <__floatunsisf>
 8120528:	e0bff015 	stw	r2,-64(fp)
							target_y = altera_avalon_mailbox_pend(mailbox_1);
 812052c:	d1270b17 	ldw	r4,-25556(gp)
 8120530:	812ea980 	call	812ea98 <altera_avalon_mailbox_pend>
 8120534:	1009883a 	mov	r4,r2
 8120538:	812326c0 	call	812326c <__floatunsisf>
 812053c:	e0bfef15 	stw	r2,-68(fp)
							printf("target_x: %f...", target_x);
 8120540:	e13ff017 	ldw	r4,-64(fp)
 8120544:	81232180 	call	8123218 <__extendsfdf2>
 8120548:	100d883a 	mov	r6,r2
 812054c:	180f883a 	mov	r7,r3
 8120550:	010204f4 	movhi	r4,2067
 8120554:	21063104 	addi	r4,r4,6340
 8120558:	300b883a 	mov	r5,r6
 812055c:	380d883a 	mov	r6,r7
 8120560:	8124d1c0 	call	8124d1c <printf>
							printf("target_y: %f\n", target_y);
 8120564:	e13fef17 	ldw	r4,-68(fp)
 8120568:	81232180 	call	8123218 <__extendsfdf2>
 812056c:	100d883a 	mov	r6,r2
 8120570:	180f883a 	mov	r7,r3
 8120574:	010204f4 	movhi	r4,2067
 8120578:	21063504 	addi	r4,r4,6356
 812057c:	300b883a 	mov	r5,r6
 8120580:	380d883a 	mov	r6,r7
 8120584:	8124d1c0 	call	8124d1c <printf>
							altera_avalon_mailbox_post(mailbox_0, message);
 8120588:	d1270917 	ldw	r4,-25564(gp)
 812058c:	d1670817 	ldw	r5,-25568(gp)
 8120590:	812e98c0 	call	812e98c <altera_avalon_mailbox_post>
						}
						if(cpuid == 2){
 8120594:	e0bffe17 	ldw	r2,-8(fp)
 8120598:	10800098 	cmpnei	r2,r2,2
 812059c:	1000221e 	bne	r2,zero,8120628 <main+0x428>
							printf("mailbox_2 pending\n");
 81205a0:	010204f4 	movhi	r4,2067
 81205a4:	21063e04 	addi	r4,r4,6392
 81205a8:	8124e340 	call	8124e34 <puts>
							target_x = altera_avalon_mailbox_pend(mailbox_2);
 81205ac:	d1270a17 	ldw	r4,-25560(gp)
 81205b0:	812ea980 	call	812ea98 <altera_avalon_mailbox_pend>
 81205b4:	1009883a 	mov	r4,r2
 81205b8:	812326c0 	call	812326c <__floatunsisf>
 81205bc:	e0bff015 	stw	r2,-64(fp)
							target_y = altera_avalon_mailbox_pend(mailbox_2);
 81205c0:	d1270a17 	ldw	r4,-25560(gp)
 81205c4:	812ea980 	call	812ea98 <altera_avalon_mailbox_pend>
 81205c8:	1009883a 	mov	r4,r2
 81205cc:	812326c0 	call	812326c <__floatunsisf>
 81205d0:	e0bfef15 	stw	r2,-68(fp)
							printf("target_x: %f...", target_x);
 81205d4:	e13ff017 	ldw	r4,-64(fp)
 81205d8:	81232180 	call	8123218 <__extendsfdf2>
 81205dc:	100d883a 	mov	r6,r2
 81205e0:	180f883a 	mov	r7,r3
 81205e4:	010204f4 	movhi	r4,2067
 81205e8:	21063104 	addi	r4,r4,6340
 81205ec:	300b883a 	mov	r5,r6
 81205f0:	380d883a 	mov	r6,r7
 81205f4:	8124d1c0 	call	8124d1c <printf>
							printf("target_y: %f\n", target_y);
 81205f8:	e13fef17 	ldw	r4,-68(fp)
 81205fc:	81232180 	call	8123218 <__extendsfdf2>
 8120600:	100d883a 	mov	r6,r2
 8120604:	180f883a 	mov	r7,r3
 8120608:	010204f4 	movhi	r4,2067
 812060c:	21063504 	addi	r4,r4,6356
 8120610:	300b883a 	mov	r5,r6
 8120614:	380d883a 	mov	r6,r7
 8120618:	8124d1c0 	call	8124d1c <printf>
							altera_avalon_mailbox_post(mailbox_0, message);
 812061c:	d1270917 	ldw	r4,-25564(gp)
 8120620:	d1670817 	ldw	r5,-25568(gp)
 8120624:	812e98c0 	call	812e98c <altera_avalon_mailbox_post>
						}
						if(cpuid == 3){
 8120628:	e0bffe17 	ldw	r2,-8(fp)
 812062c:	108000d8 	cmpnei	r2,r2,3
 8120630:	1000221e 	bne	r2,zero,81206bc <main+0x4bc>
							printf("mailbox_3 pending\n");
 8120634:	010204f4 	movhi	r4,2067
 8120638:	21064304 	addi	r4,r4,6412
 812063c:	8124e340 	call	8124e34 <puts>
							target_x = altera_avalon_mailbox_pend(mailbox_3);
 8120640:	d1270e17 	ldw	r4,-25544(gp)
 8120644:	812ea980 	call	812ea98 <altera_avalon_mailbox_pend>
 8120648:	1009883a 	mov	r4,r2
 812064c:	812326c0 	call	812326c <__floatunsisf>
 8120650:	e0bff015 	stw	r2,-64(fp)
							target_y = altera_avalon_mailbox_pend(mailbox_3);
 8120654:	d1270e17 	ldw	r4,-25544(gp)
 8120658:	812ea980 	call	812ea98 <altera_avalon_mailbox_pend>
 812065c:	1009883a 	mov	r4,r2
 8120660:	812326c0 	call	812326c <__floatunsisf>
 8120664:	e0bfef15 	stw	r2,-68(fp)
							printf("target_x: %f...", target_x);
 8120668:	e13ff017 	ldw	r4,-64(fp)
 812066c:	81232180 	call	8123218 <__extendsfdf2>
 8120670:	100d883a 	mov	r6,r2
 8120674:	180f883a 	mov	r7,r3
 8120678:	010204f4 	movhi	r4,2067
 812067c:	21063104 	addi	r4,r4,6340
 8120680:	300b883a 	mov	r5,r6
 8120684:	380d883a 	mov	r6,r7
 8120688:	8124d1c0 	call	8124d1c <printf>
							printf("target_y: %f\n", target_y);
 812068c:	e13fef17 	ldw	r4,-68(fp)
 8120690:	81232180 	call	8123218 <__extendsfdf2>
 8120694:	100d883a 	mov	r6,r2
 8120698:	180f883a 	mov	r7,r3
 812069c:	010204f4 	movhi	r4,2067
 81206a0:	21063504 	addi	r4,r4,6356
 81206a4:	300b883a 	mov	r5,r6
 81206a8:	380d883a 	mov	r6,r7
 81206ac:	8124d1c0 	call	8124d1c <printf>
							altera_avalon_mailbox_post(mailbox_0, message);
 81206b0:	d1270917 	ldw	r4,-25564(gp)
 81206b4:	d1670817 	ldw	r5,-25568(gp)
 81206b8:	812e98c0 	call	812e98c <altera_avalon_mailbox_post>
				z = 0;
				x0 = j/320.0*(max_x - min_x) + min_x;
				y0 = (239.0-i)/240.0*(max_y - min_y) + min_y;
				iteration = 0;

				while( (x*x + y*y) <= 4 && iteration < 500) {
 81206bc:	e0fff517 	ldw	r3,-44(fp)
 81206c0:	e0bff517 	ldw	r2,-44(fp)
 81206c4:	1889ff32 	custom	252,r4,r3,r2
 81206c8:	e0fff417 	ldw	r3,-48(fp)
 81206cc:	e0bff417 	ldw	r2,-48(fp)
 81206d0:	1885ff32 	custom	252,r2,r3,r2
 81206d4:	2085ff72 	custom	253,r2,r4,r2
 81206d8:	e03fff05 	stb	zero,-4(fp)
 81206dc:	1009883a 	mov	r4,r2
 81206e0:	01502034 	movhi	r5,16512
 81206e4:	81230740 	call	8123074 <__lesf2>
 81206e8:	10800050 	cmplti	r2,r2,1
 81206ec:	1000011e 	bne	r2,zero,81206f4 <main+0x4f4>
 81206f0:	00000206 	br	81206fc <main+0x4fc>
 81206f4:	00800044 	movi	r2,1
 81206f8:	e0bfff05 	stb	r2,-4(fp)
 81206fc:	e0ffff03 	ldbu	r3,-4(fp)
 8120700:	1880005c 	xori	r2,r3,1
 8120704:	10803fcc 	andi	r2,r2,255
 8120708:	1004c03a 	cmpne	r2,r2,zero
 812070c:	1000031e 	bne	r2,zero,812071c <main+0x51c>
 8120710:	e0bfed17 	ldw	r2,-76(fp)
 8120714:	10807d10 	cmplti	r2,r2,500
 8120718:	103f0d1e 	bne	r2,zero,8120350 <main+0x150>
						}
					}

				}
				//printf("Iteration: %d\n", iteration);
				if(iteration == 500) {
 812071c:	e0bfed17 	ldw	r2,-76(fp)
 8120720:	10807d18 	cmpnei	r2,r2,500
 8120724:	1000061e 	bne	r2,zero,8120740 <main+0x540>
					alt_up_pixel_buffer_dma_draw(my_pixel_buffer, 0,j,i );
 8120728:	e1bff617 	ldw	r6,-40(fp)
 812072c:	e1fff717 	ldw	r7,-36(fp)
 8120730:	e13ffd17 	ldw	r4,-12(fp)
 8120734:	000b883a 	mov	r5,zero
 8120738:	812ef5c0 	call	812ef5c <alt_up_pixel_buffer_dma_draw>
 812073c:	00001706 	br	812079c <main+0x59c>
				} else {
					alt_up_pixel_buffer_dma_draw(my_pixel_buffer, (iteration*8/zoom) + (iteration*4/zoom) +(iteration*2/zoom), j, i);
 8120740:	e0bfed17 	ldw	r2,-76(fp)
 8120744:	100890fa 	slli	r4,r2,3
 8120748:	e17ffc17 	ldw	r5,-16(fp)
 812074c:	81243140 	call	8124314 <__divsi3>
 8120750:	1021883a 	mov	r16,r2
 8120754:	e0bfed17 	ldw	r2,-76(fp)
 8120758:	1085883a 	add	r2,r2,r2
 812075c:	1085883a 	add	r2,r2,r2
 8120760:	1009883a 	mov	r4,r2
 8120764:	e17ffc17 	ldw	r5,-16(fp)
 8120768:	81243140 	call	8124314 <__divsi3>
 812076c:	80a1883a 	add	r16,r16,r2
 8120770:	e0bfed17 	ldw	r2,-76(fp)
 8120774:	1085883a 	add	r2,r2,r2
 8120778:	1009883a 	mov	r4,r2
 812077c:	e17ffc17 	ldw	r5,-16(fp)
 8120780:	81243140 	call	8124314 <__divsi3>
 8120784:	8085883a 	add	r2,r16,r2
 8120788:	100b883a 	mov	r5,r2
 812078c:	e1bff617 	ldw	r6,-40(fp)
 8120790:	e1fff717 	ldw	r7,-36(fp)
 8120794:	e13ffd17 	ldw	r4,-12(fp)
 8120798:	812ef5c0 	call	812ef5c <alt_up_pixel_buffer_dma_draw>

	//barrier(cpuid);
	while (1) {
		is_target = 0;
		for (i = cpuid; i < num_rows; i+=4) {
			for (j = 0; j < num_cols; j++) {
 812079c:	e0bff617 	ldw	r2,-40(fp)
 81207a0:	10800044 	addi	r2,r2,1
 81207a4:	e0bff615 	stw	r2,-40(fp)
 81207a8:	d0e00117 	ldw	r3,-32764(gp)
 81207ac:	e0bff617 	ldw	r2,-40(fp)
 81207b0:	10fec516 	blt	r2,r3,81202c8 <main+0xc8>
				} else {
					alt_up_pixel_buffer_dma_draw(my_pixel_buffer, (iteration*8/zoom) + (iteration*4/zoom) +(iteration*2/zoom), j, i);
				}
				//barrier(cpuid);
			}
			barrier(cpuid);
 81207b4:	e13ffe17 	ldw	r4,-8(fp)
 81207b8:	8120a500 	call	8120a50 <barrier>
	int first_pass = 0; // on the first pass

	//barrier(cpuid);
	while (1) {
		is_target = 0;
		for (i = cpuid; i < num_rows; i+=4) {
 81207bc:	e0bff717 	ldw	r2,-36(fp)
 81207c0:	10800104 	addi	r2,r2,4
 81207c4:	e0bff715 	stw	r2,-36(fp)
 81207c8:	d0e00017 	ldw	r3,-32768(gp)
 81207cc:	e0bff717 	ldw	r2,-36(fp)
 81207d0:	10febb16 	blt	r2,r3,81202c0 <main+0xc0>
				//barrier(cpuid);
			}
			barrier(cpuid);
		}

		barrier(cpuid);
 81207d4:	e13ffe17 	ldw	r4,-8(fp)
 81207d8:	8120a500 	call	8120a50 <barrier>
		min_x = target_x - (1/(pow(1.5, zoom)));
 81207dc:	e13ff017 	ldw	r4,-64(fp)
 81207e0:	81232180 	call	8123218 <__extendsfdf2>
 81207e4:	1021883a 	mov	r16,r2
 81207e8:	1823883a 	mov	r17,r3
 81207ec:	e13ffc17 	ldw	r4,-16(fp)
 81207f0:	81240f40 	call	81240f4 <__floatsidf>
 81207f4:	100f883a 	mov	r7,r2
 81207f8:	1811883a 	mov	r8,r3
 81207fc:	0009883a 	mov	r4,zero
 8120800:	014ffe34 	movhi	r5,16376
 8120804:	380d883a 	mov	r6,r7
 8120808:	400f883a 	mov	r7,r8
 812080c:	8120c800 	call	8120c80 <pow>
 8120810:	1009883a 	mov	r4,r2
 8120814:	180b883a 	mov	r5,r3
 8120818:	2005883a 	mov	r2,r4
 812081c:	2807883a 	mov	r3,r5
 8120820:	0009883a 	mov	r4,zero
 8120824:	016ffc34 	movhi	r5,49136
 8120828:	100d883a 	mov	r6,r2
 812082c:	180f883a 	mov	r7,r3
 8120830:	8123bf40 	call	8123bf4 <__divdf3>
 8120834:	1009883a 	mov	r4,r2
 8120838:	180b883a 	mov	r5,r3
 812083c:	2005883a 	mov	r2,r4
 8120840:	2807883a 	mov	r3,r5
 8120844:	8009883a 	mov	r4,r16
 8120848:	880b883a 	mov	r5,r17
 812084c:	100d883a 	mov	r6,r2
 8120850:	180f883a 	mov	r7,r3
 8120854:	81237bc0 	call	81237bc <__adddf3>
 8120858:	1009883a 	mov	r4,r2
 812085c:	180b883a 	mov	r5,r3
 8120860:	2005883a 	mov	r2,r4
 8120864:	2807883a 	mov	r3,r5
 8120868:	1009883a 	mov	r4,r2
 812086c:	180b883a 	mov	r5,r3
 8120870:	81242240 	call	8124224 <__truncdfsf2>
 8120874:	e0bffb15 	stw	r2,-20(fp)
		max_x = target_x + (1/(pow(1.5, zoom)));
 8120878:	e13ff017 	ldw	r4,-64(fp)
 812087c:	81232180 	call	8123218 <__extendsfdf2>
 8120880:	1021883a 	mov	r16,r2
 8120884:	1823883a 	mov	r17,r3
 8120888:	e13ffc17 	ldw	r4,-16(fp)
 812088c:	81240f40 	call	81240f4 <__floatsidf>
 8120890:	100f883a 	mov	r7,r2
 8120894:	1811883a 	mov	r8,r3
 8120898:	0009883a 	mov	r4,zero
 812089c:	014ffe34 	movhi	r5,16376
 81208a0:	380d883a 	mov	r6,r7
 81208a4:	400f883a 	mov	r7,r8
 81208a8:	8120c800 	call	8120c80 <pow>
 81208ac:	100f883a 	mov	r7,r2
 81208b0:	1811883a 	mov	r8,r3
 81208b4:	0009883a 	mov	r4,zero
 81208b8:	014ffc34 	movhi	r5,16368
 81208bc:	380d883a 	mov	r6,r7
 81208c0:	400f883a 	mov	r7,r8
 81208c4:	8123bf40 	call	8123bf4 <__divdf3>
 81208c8:	1009883a 	mov	r4,r2
 81208cc:	180b883a 	mov	r5,r3
 81208d0:	2005883a 	mov	r2,r4
 81208d4:	2807883a 	mov	r3,r5
 81208d8:	8009883a 	mov	r4,r16
 81208dc:	880b883a 	mov	r5,r17
 81208e0:	100d883a 	mov	r6,r2
 81208e4:	180f883a 	mov	r7,r3
 81208e8:	81237bc0 	call	81237bc <__adddf3>
 81208ec:	1009883a 	mov	r4,r2
 81208f0:	180b883a 	mov	r5,r3
 81208f4:	2005883a 	mov	r2,r4
 81208f8:	2807883a 	mov	r3,r5
 81208fc:	1009883a 	mov	r4,r2
 8120900:	180b883a 	mov	r5,r3
 8120904:	81242240 	call	8124224 <__truncdfsf2>
 8120908:	e0bffa15 	stw	r2,-24(fp)
		min_y = target_y - (0.75/(pow(1.5, zoom)));
 812090c:	e13fef17 	ldw	r4,-68(fp)
 8120910:	81232180 	call	8123218 <__extendsfdf2>
 8120914:	1021883a 	mov	r16,r2
 8120918:	1823883a 	mov	r17,r3
 812091c:	e13ffc17 	ldw	r4,-16(fp)
 8120920:	81240f40 	call	81240f4 <__floatsidf>
 8120924:	100f883a 	mov	r7,r2
 8120928:	1811883a 	mov	r8,r3
 812092c:	0009883a 	mov	r4,zero
 8120930:	014ffe34 	movhi	r5,16376
 8120934:	380d883a 	mov	r6,r7
 8120938:	400f883a 	mov	r7,r8
 812093c:	8120c800 	call	8120c80 <pow>
 8120940:	100f883a 	mov	r7,r2
 8120944:	1811883a 	mov	r8,r3
 8120948:	0009883a 	mov	r4,zero
 812094c:	016ffa34 	movhi	r5,49128
 8120950:	380d883a 	mov	r6,r7
 8120954:	400f883a 	mov	r7,r8
 8120958:	8123bf40 	call	8123bf4 <__divdf3>
 812095c:	1009883a 	mov	r4,r2
 8120960:	180b883a 	mov	r5,r3
 8120964:	2005883a 	mov	r2,r4
 8120968:	2807883a 	mov	r3,r5
 812096c:	8009883a 	mov	r4,r16
 8120970:	880b883a 	mov	r5,r17
 8120974:	100d883a 	mov	r6,r2
 8120978:	180f883a 	mov	r7,r3
 812097c:	81237bc0 	call	81237bc <__adddf3>
 8120980:	1009883a 	mov	r4,r2
 8120984:	180b883a 	mov	r5,r3
 8120988:	2005883a 	mov	r2,r4
 812098c:	2807883a 	mov	r3,r5
 8120990:	1009883a 	mov	r4,r2
 8120994:	180b883a 	mov	r5,r3
 8120998:	81242240 	call	8124224 <__truncdfsf2>
 812099c:	e0bff915 	stw	r2,-28(fp)
		max_y = target_y + (0.75/(pow(1.5, zoom)));
 81209a0:	e13fef17 	ldw	r4,-68(fp)
 81209a4:	81232180 	call	8123218 <__extendsfdf2>
 81209a8:	1021883a 	mov	r16,r2
 81209ac:	1823883a 	mov	r17,r3
 81209b0:	e13ffc17 	ldw	r4,-16(fp)
 81209b4:	81240f40 	call	81240f4 <__floatsidf>
 81209b8:	100f883a 	mov	r7,r2
 81209bc:	1811883a 	mov	r8,r3
 81209c0:	0009883a 	mov	r4,zero
 81209c4:	014ffe34 	movhi	r5,16376
 81209c8:	380d883a 	mov	r6,r7
 81209cc:	400f883a 	mov	r7,r8
 81209d0:	8120c800 	call	8120c80 <pow>
 81209d4:	100f883a 	mov	r7,r2
 81209d8:	1811883a 	mov	r8,r3
 81209dc:	0009883a 	mov	r4,zero
 81209e0:	014ffa34 	movhi	r5,16360
 81209e4:	380d883a 	mov	r6,r7
 81209e8:	400f883a 	mov	r7,r8
 81209ec:	8123bf40 	call	8123bf4 <__divdf3>
 81209f0:	1009883a 	mov	r4,r2
 81209f4:	180b883a 	mov	r5,r3
 81209f8:	2005883a 	mov	r2,r4
 81209fc:	2807883a 	mov	r3,r5
 8120a00:	8009883a 	mov	r4,r16
 8120a04:	880b883a 	mov	r5,r17
 8120a08:	100d883a 	mov	r6,r2
 8120a0c:	180f883a 	mov	r7,r3
 8120a10:	81237bc0 	call	81237bc <__adddf3>
 8120a14:	1009883a 	mov	r4,r2
 8120a18:	180b883a 	mov	r5,r3
 8120a1c:	2005883a 	mov	r2,r4
 8120a20:	2807883a 	mov	r3,r5
 8120a24:	1009883a 	mov	r4,r2
 8120a28:	180b883a 	mov	r5,r3
 8120a2c:	81242240 	call	8124224 <__truncdfsf2>
 8120a30:	e0bff815 	stw	r2,-32(fp)
		zoom += 1;
 8120a34:	e0bffc17 	ldw	r2,-16(fp)
 8120a38:	10800044 	addi	r2,r2,1
 8120a3c:	e0bffc15 	stw	r2,-16(fp)

		alt_up_pixel_buffer_dma_clear_screen(my_pixel_buffer,0);
 8120a40:	e13ffd17 	ldw	r4,-12(fp)
 8120a44:	000b883a 	mov	r5,zero
 8120a48:	812f1e00 	call	812f1e0 <alt_up_pixel_buffer_dma_clear_screen>
	}
 8120a4c:	003e1806 	br	81202b0 <main+0xb0>

08120a50 <barrier>:
	//barrier(cpuid);
}

void barrier(int id){
 8120a50:	defff904 	addi	sp,sp,-28
 8120a54:	dfc00615 	stw	ra,24(sp)
 8120a58:	df000515 	stw	fp,20(sp)
 8120a5c:	df000504 	addi	fp,sp,20
 8120a60:	e13fff15 	stw	r4,-4(fp)
	post(id, message);
 8120a64:	d1670817 	ldw	r5,-25568(gp)
 8120a68:	e13fff17 	ldw	r4,-4(fp)
 8120a6c:	8120b940 	call	8120b94 <post>
	if(id == 0){
 8120a70:	e0bfff17 	ldw	r2,-4(fp)
 8120a74:	1004c03a 	cmpne	r2,r2,zero
 8120a78:	10000b1e 	bne	r2,zero,8120aa8 <barrier+0x58>
		int i;
		for(i = 0; i < n-1; i++){
 8120a7c:	e03ffe15 	stw	zero,-8(fp)
 8120a80:	00000506 	br	8120a98 <barrier+0x48>
			pend(mailbox_0);
 8120a84:	d1270917 	ldw	r4,-25564(gp)
 8120a88:	8120b640 	call	8120b64 <pend>

void barrier(int id){
	post(id, message);
	if(id == 0){
		int i;
		for(i = 0; i < n-1; i++){
 8120a8c:	e0bffe17 	ldw	r2,-8(fp)
 8120a90:	10800044 	addi	r2,r2,1
 8120a94:	e0bffe15 	stw	r2,-8(fp)
 8120a98:	d0a00217 	ldw	r2,-32760(gp)
 8120a9c:	10ffffc4 	addi	r3,r2,-1
 8120aa0:	e0bffe17 	ldw	r2,-8(fp)
 8120aa4:	10fff716 	blt	r2,r3,8120a84 <barrier+0x34>
			pend(mailbox_0);
		}
	}
	if(id == 1){
 8120aa8:	e0bfff17 	ldw	r2,-4(fp)
 8120aac:	10800058 	cmpnei	r2,r2,1
 8120ab0:	10000b1e 	bne	r2,zero,8120ae0 <barrier+0x90>
		int i;
		for(i = 0; i < n-1; i++){
 8120ab4:	e03ffd15 	stw	zero,-12(fp)
 8120ab8:	00000506 	br	8120ad0 <barrier+0x80>
			pend(mailbox_1);
 8120abc:	d1270b17 	ldw	r4,-25556(gp)
 8120ac0:	8120b640 	call	8120b64 <pend>
			pend(mailbox_0);
		}
	}
	if(id == 1){
		int i;
		for(i = 0; i < n-1; i++){
 8120ac4:	e0bffd17 	ldw	r2,-12(fp)
 8120ac8:	10800044 	addi	r2,r2,1
 8120acc:	e0bffd15 	stw	r2,-12(fp)
 8120ad0:	d0a00217 	ldw	r2,-32760(gp)
 8120ad4:	10ffffc4 	addi	r3,r2,-1
 8120ad8:	e0bffd17 	ldw	r2,-12(fp)
 8120adc:	10fff716 	blt	r2,r3,8120abc <barrier+0x6c>
			pend(mailbox_1);
		}
	}
	if(id == 2){
 8120ae0:	e0bfff17 	ldw	r2,-4(fp)
 8120ae4:	10800098 	cmpnei	r2,r2,2
 8120ae8:	10000b1e 	bne	r2,zero,8120b18 <barrier+0xc8>
		int i;
		for(i = 0; i < n-1; i++){
 8120aec:	e03ffc15 	stw	zero,-16(fp)
 8120af0:	00000506 	br	8120b08 <barrier+0xb8>
			pend(mailbox_2);
 8120af4:	d1270a17 	ldw	r4,-25560(gp)
 8120af8:	8120b640 	call	8120b64 <pend>
			pend(mailbox_1);
		}
	}
	if(id == 2){
		int i;
		for(i = 0; i < n-1; i++){
 8120afc:	e0bffc17 	ldw	r2,-16(fp)
 8120b00:	10800044 	addi	r2,r2,1
 8120b04:	e0bffc15 	stw	r2,-16(fp)
 8120b08:	d0a00217 	ldw	r2,-32760(gp)
 8120b0c:	10ffffc4 	addi	r3,r2,-1
 8120b10:	e0bffc17 	ldw	r2,-16(fp)
 8120b14:	10fff716 	blt	r2,r3,8120af4 <barrier+0xa4>
			pend(mailbox_2);
		}
	}
	if(id == 3){
 8120b18:	e0bfff17 	ldw	r2,-4(fp)
 8120b1c:	108000d8 	cmpnei	r2,r2,3
 8120b20:	10000b1e 	bne	r2,zero,8120b50 <barrier+0x100>
		int i;
		for(i = 0; i < n-1; i++){
 8120b24:	e03ffb15 	stw	zero,-20(fp)
 8120b28:	00000506 	br	8120b40 <barrier+0xf0>
			pend(mailbox_3);
 8120b2c:	d1270e17 	ldw	r4,-25544(gp)
 8120b30:	8120b640 	call	8120b64 <pend>
			pend(mailbox_2);
		}
	}
	if(id == 3){
		int i;
		for(i = 0; i < n-1; i++){
 8120b34:	e0bffb17 	ldw	r2,-20(fp)
 8120b38:	10800044 	addi	r2,r2,1
 8120b3c:	e0bffb15 	stw	r2,-20(fp)
 8120b40:	d0a00217 	ldw	r2,-32760(gp)
 8120b44:	10ffffc4 	addi	r3,r2,-1
 8120b48:	e0bffb17 	ldw	r2,-20(fp)
 8120b4c:	10fff716 	blt	r2,r3,8120b2c <barrier+0xdc>
			pend(mailbox_3);
		}
	}
}
 8120b50:	e037883a 	mov	sp,fp
 8120b54:	dfc00117 	ldw	ra,4(sp)
 8120b58:	df000017 	ldw	fp,0(sp)
 8120b5c:	dec00204 	addi	sp,sp,8
 8120b60:	f800283a 	ret

08120b64 <pend>:
void pend(alt_mailbox_dev* box){
 8120b64:	defffd04 	addi	sp,sp,-12
 8120b68:	dfc00215 	stw	ra,8(sp)
 8120b6c:	df000115 	stw	fp,4(sp)
 8120b70:	df000104 	addi	fp,sp,4
 8120b74:	e13fff15 	stw	r4,-4(fp)
	//printf("MAILBOX PENDING \n");
	altera_avalon_mailbox_pend(box);
 8120b78:	e13fff17 	ldw	r4,-4(fp)
 8120b7c:	812ea980 	call	812ea98 <altera_avalon_mailbox_pend>
}
 8120b80:	e037883a 	mov	sp,fp
 8120b84:	dfc00117 	ldw	ra,4(sp)
 8120b88:	df000017 	ldw	fp,0(sp)
 8120b8c:	dec00204 	addi	sp,sp,8
 8120b90:	f800283a 	ret

08120b94 <post>:

void post(int id, alt_u32 mess){
 8120b94:	defffc04 	addi	sp,sp,-16
 8120b98:	dfc00315 	stw	ra,12(sp)
 8120b9c:	df000215 	stw	fp,8(sp)
 8120ba0:	df000204 	addi	fp,sp,8
 8120ba4:	e13ffe15 	stw	r4,-8(fp)
 8120ba8:	e17fff15 	stw	r5,-4(fp)
	 //altera_avalon_mailbox_post(box, message);

	 if(id == 0){
 8120bac:	e0bffe17 	ldw	r2,-8(fp)
 8120bb0:	1004c03a 	cmpne	r2,r2,zero
 8120bb4:	1000091e 	bne	r2,zero,8120bdc <post+0x48>
	 //printf("MAILBOX 0 POSTING \n");
	 altera_avalon_mailbox_post(mailbox_1, mess);
 8120bb8:	d1270b17 	ldw	r4,-25556(gp)
 8120bbc:	e17fff17 	ldw	r5,-4(fp)
 8120bc0:	812e98c0 	call	812e98c <altera_avalon_mailbox_post>
	 altera_avalon_mailbox_post(mailbox_2, mess);
 8120bc4:	d1270a17 	ldw	r4,-25560(gp)
 8120bc8:	e17fff17 	ldw	r5,-4(fp)
 8120bcc:	812e98c0 	call	812e98c <altera_avalon_mailbox_post>
	 altera_avalon_mailbox_post(mailbox_3, mess);
 8120bd0:	d1270e17 	ldw	r4,-25544(gp)
 8120bd4:	e17fff17 	ldw	r5,-4(fp)
 8120bd8:	812e98c0 	call	812e98c <altera_avalon_mailbox_post>
	 }
	 if(id == 1){
 8120bdc:	e0bffe17 	ldw	r2,-8(fp)
 8120be0:	10800058 	cmpnei	r2,r2,1
 8120be4:	1000091e 	bne	r2,zero,8120c0c <post+0x78>
	 //printf("MAILBOX 1 POSTING \n");
	 altera_avalon_mailbox_post(mailbox_0, mess);
 8120be8:	d1270917 	ldw	r4,-25564(gp)
 8120bec:	e17fff17 	ldw	r5,-4(fp)
 8120bf0:	812e98c0 	call	812e98c <altera_avalon_mailbox_post>
	 altera_avalon_mailbox_post(mailbox_2, mess);
 8120bf4:	d1270a17 	ldw	r4,-25560(gp)
 8120bf8:	e17fff17 	ldw	r5,-4(fp)
 8120bfc:	812e98c0 	call	812e98c <altera_avalon_mailbox_post>
	 altera_avalon_mailbox_post(mailbox_3, mess);
 8120c00:	d1270e17 	ldw	r4,-25544(gp)
 8120c04:	e17fff17 	ldw	r5,-4(fp)
 8120c08:	812e98c0 	call	812e98c <altera_avalon_mailbox_post>
	 }

	 if(id == 2){
 8120c0c:	e0bffe17 	ldw	r2,-8(fp)
 8120c10:	10800098 	cmpnei	r2,r2,2
 8120c14:	1000091e 	bne	r2,zero,8120c3c <post+0xa8>
	 //printf("MAILBOX 2 POSTING \n");
	 altera_avalon_mailbox_post(mailbox_0, mess);
 8120c18:	d1270917 	ldw	r4,-25564(gp)
 8120c1c:	e17fff17 	ldw	r5,-4(fp)
 8120c20:	812e98c0 	call	812e98c <altera_avalon_mailbox_post>
	 altera_avalon_mailbox_post(mailbox_1, mess);
 8120c24:	d1270b17 	ldw	r4,-25556(gp)
 8120c28:	e17fff17 	ldw	r5,-4(fp)
 8120c2c:	812e98c0 	call	812e98c <altera_avalon_mailbox_post>
	 altera_avalon_mailbox_post(mailbox_3, mess);
 8120c30:	d1270e17 	ldw	r4,-25544(gp)
 8120c34:	e17fff17 	ldw	r5,-4(fp)
 8120c38:	812e98c0 	call	812e98c <altera_avalon_mailbox_post>
	 }

	 if(id == 3){
 8120c3c:	e0bffe17 	ldw	r2,-8(fp)
 8120c40:	108000d8 	cmpnei	r2,r2,3
 8120c44:	1000091e 	bne	r2,zero,8120c6c <post+0xd8>
	 //printf("MAILBOX 3 POSTING \n");
	 altera_avalon_mailbox_post(mailbox_0, mess);
 8120c48:	d1270917 	ldw	r4,-25564(gp)
 8120c4c:	e17fff17 	ldw	r5,-4(fp)
 8120c50:	812e98c0 	call	812e98c <altera_avalon_mailbox_post>
	 altera_avalon_mailbox_post(mailbox_1, mess);
 8120c54:	d1270b17 	ldw	r4,-25556(gp)
 8120c58:	e17fff17 	ldw	r5,-4(fp)
 8120c5c:	812e98c0 	call	812e98c <altera_avalon_mailbox_post>
	 altera_avalon_mailbox_post(mailbox_2, mess);
 8120c60:	d1270a17 	ldw	r4,-25560(gp)
 8120c64:	e17fff17 	ldw	r5,-4(fp)
 8120c68:	812e98c0 	call	812e98c <altera_avalon_mailbox_post>
	 }

}
 8120c6c:	e037883a 	mov	sp,fp
 8120c70:	dfc00117 	ldw	ra,4(sp)
 8120c74:	df000017 	ldw	fp,0(sp)
 8120c78:	dec00204 	addi	sp,sp,8
 8120c7c:	f800283a 	ret

08120c80 <pow>:
 8120c80:	deffee04 	addi	sp,sp,-72
 8120c84:	ddc01015 	stw	r23,64(sp)
 8120c88:	05c204f4 	movhi	r23,2067
 8120c8c:	bdce5104 	addi	r23,r23,14660
 8120c90:	dd800f15 	stw	r22,60(sp)
 8120c94:	dd400e15 	stw	r21,56(sp)
 8120c98:	dd000d15 	stw	r20,52(sp)
 8120c9c:	dcc00c15 	stw	r19,48(sp)
 8120ca0:	dc800b15 	stw	r18,44(sp)
 8120ca4:	dc400a15 	stw	r17,40(sp)
 8120ca8:	dc000915 	stw	r16,36(sp)
 8120cac:	2029883a 	mov	r20,r4
 8120cb0:	dfc01115 	stw	ra,68(sp)
 8120cb4:	3025883a 	mov	r18,r6
 8120cb8:	282b883a 	mov	r21,r5
 8120cbc:	3827883a 	mov	r19,r7
 8120cc0:	81211080 	call	8121108 <__ieee754_pow>
 8120cc4:	b9000017 	ldw	r4,0(r23)
 8120cc8:	05bfffc4 	movi	r22,-1
 8120ccc:	1021883a 	mov	r16,r2
 8120cd0:	1823883a 	mov	r17,r3
 8120cd4:	25800426 	beq	r4,r22,8120ce8 <pow+0x68>
 8120cd8:	9009883a 	mov	r4,r18
 8120cdc:	980b883a 	mov	r5,r19
 8120ce0:	81227040 	call	8122704 <__isnand>
 8120ce4:	10000d26 	beq	r2,zero,8120d1c <pow+0x9c>
 8120ce8:	8005883a 	mov	r2,r16
 8120cec:	8807883a 	mov	r3,r17
 8120cf0:	dfc01117 	ldw	ra,68(sp)
 8120cf4:	ddc01017 	ldw	r23,64(sp)
 8120cf8:	dd800f17 	ldw	r22,60(sp)
 8120cfc:	dd400e17 	ldw	r21,56(sp)
 8120d00:	dd000d17 	ldw	r20,52(sp)
 8120d04:	dcc00c17 	ldw	r19,48(sp)
 8120d08:	dc800b17 	ldw	r18,44(sp)
 8120d0c:	dc400a17 	ldw	r17,40(sp)
 8120d10:	dc000917 	ldw	r16,36(sp)
 8120d14:	dec01204 	addi	sp,sp,72
 8120d18:	f800283a 	ret
 8120d1c:	a009883a 	mov	r4,r20
 8120d20:	a80b883a 	mov	r5,r21
 8120d24:	81227040 	call	8122704 <__isnand>
 8120d28:	1000151e 	bne	r2,zero,8120d80 <pow+0x100>
 8120d2c:	000d883a 	mov	r6,zero
 8120d30:	000f883a 	mov	r7,zero
 8120d34:	a009883a 	mov	r4,r20
 8120d38:	a80b883a 	mov	r5,r21
 8120d3c:	8123e4c0 	call	8123e4c <__eqdf2>
 8120d40:	1000541e 	bne	r2,zero,8120e94 <pow+0x214>
 8120d44:	000d883a 	mov	r6,zero
 8120d48:	000f883a 	mov	r7,zero
 8120d4c:	9009883a 	mov	r4,r18
 8120d50:	980b883a 	mov	r5,r19
 8120d54:	8123e4c0 	call	8123e4c <__eqdf2>
 8120d58:	10002c1e 	bne	r2,zero,8120e0c <pow+0x18c>
 8120d5c:	b8800017 	ldw	r2,0(r23)
 8120d60:	d8000615 	stw	zero,24(sp)
 8120d64:	d8000715 	stw	zero,28(sp)
 8120d68:	10001226 	beq	r2,zero,8120db4 <pow+0x134>
 8120d6c:	008ffc34 	movhi	r2,16368
 8120d70:	d8800715 	stw	r2,28(sp)
 8120d74:	dc000617 	ldw	r16,24(sp)
 8120d78:	dc400717 	ldw	r17,28(sp)
 8120d7c:	003fda06 	br	8120ce8 <pow+0x68>
 8120d80:	000d883a 	mov	r6,zero
 8120d84:	000f883a 	mov	r7,zero
 8120d88:	9009883a 	mov	r4,r18
 8120d8c:	980b883a 	mov	r5,r19
 8120d90:	8123e4c0 	call	8123e4c <__eqdf2>
 8120d94:	103fd41e 	bne	r2,zero,8120ce8 <pow+0x68>
 8120d98:	b8c00017 	ldw	r3,0(r23)
 8120d9c:	010ffc34 	movhi	r4,16368
 8120da0:	d8000615 	stw	zero,24(sp)
 8120da4:	d9000715 	stw	r4,28(sp)
 8120da8:	1d801526 	beq	r3,r22,8120e00 <pow+0x180>
 8120dac:	00800084 	movi	r2,2
 8120db0:	18801326 	beq	r3,r2,8120e00 <pow+0x180>
 8120db4:	008204f4 	movhi	r2,2067
 8120db8:	10864804 	addi	r2,r2,6432
 8120dbc:	00c00044 	movi	r3,1
 8120dc0:	d809883a 	mov	r4,sp
 8120dc4:	dcc00515 	stw	r19,20(sp)
 8120dc8:	dd400315 	stw	r21,12(sp)
 8120dcc:	d8800115 	stw	r2,4(sp)
 8120dd0:	d8c00015 	stw	r3,0(sp)
 8120dd4:	dc800415 	stw	r18,16(sp)
 8120dd8:	dd000215 	stw	r20,8(sp)
 8120ddc:	d8000815 	stw	zero,32(sp)
 8120de0:	81227340 	call	8122734 <matherr>
 8120de4:	10002726 	beq	r2,zero,8120e84 <pow+0x204>
 8120de8:	d8800817 	ldw	r2,32(sp)
 8120dec:	103fe126 	beq	r2,zero,8120d74 <pow+0xf4>
 8120df0:	8124d0c0 	call	8124d0c <__errno>
 8120df4:	d8c00817 	ldw	r3,32(sp)
 8120df8:	10c00015 	stw	r3,0(r2)
 8120dfc:	003fdd06 	br	8120d74 <pow+0xf4>
 8120e00:	d9000715 	stw	r4,28(sp)
 8120e04:	d8000615 	stw	zero,24(sp)
 8120e08:	003fda06 	br	8120d74 <pow+0xf4>
 8120e0c:	9009883a 	mov	r4,r18
 8120e10:	980b883a 	mov	r5,r19
 8120e14:	81226e80 	call	81226e8 <finite>
 8120e18:	103fb326 	beq	r2,zero,8120ce8 <pow+0x68>
 8120e1c:	000d883a 	mov	r6,zero
 8120e20:	000f883a 	mov	r7,zero
 8120e24:	9009883a 	mov	r4,r18
 8120e28:	980b883a 	mov	r5,r19
 8120e2c:	8123fe40 	call	8123fe4 <__ltdf2>
 8120e30:	103fad0e 	bge	r2,zero,8120ce8 <pow+0x68>
 8120e34:	b9000017 	ldw	r4,0(r23)
 8120e38:	00800044 	movi	r2,1
 8120e3c:	00c204f4 	movhi	r3,2067
 8120e40:	18c64804 	addi	r3,r3,6432
 8120e44:	d8800015 	stw	r2,0(sp)
 8120e48:	d8c00115 	stw	r3,4(sp)
 8120e4c:	dd400315 	stw	r21,12(sp)
 8120e50:	dcc00515 	stw	r19,20(sp)
 8120e54:	d8000815 	stw	zero,32(sp)
 8120e58:	dd000215 	stw	r20,8(sp)
 8120e5c:	dc800415 	stw	r18,16(sp)
 8120e60:	20005626 	beq	r4,zero,8120fbc <pow+0x33c>
 8120e64:	00bffc34 	movhi	r2,65520
 8120e68:	d8800715 	stw	r2,28(sp)
 8120e6c:	00800084 	movi	r2,2
 8120e70:	d8000615 	stw	zero,24(sp)
 8120e74:	20800326 	beq	r4,r2,8120e84 <pow+0x204>
 8120e78:	d809883a 	mov	r4,sp
 8120e7c:	81227340 	call	8122734 <matherr>
 8120e80:	103fd91e 	bne	r2,zero,8120de8 <pow+0x168>
 8120e84:	8124d0c0 	call	8124d0c <__errno>
 8120e88:	00c00844 	movi	r3,33
 8120e8c:	10c00015 	stw	r3,0(r2)
 8120e90:	003fd506 	br	8120de8 <pow+0x168>
 8120e94:	8009883a 	mov	r4,r16
 8120e98:	880b883a 	mov	r5,r17
 8120e9c:	81226e80 	call	81226e8 <finite>
 8120ea0:	10002426 	beq	r2,zero,8120f34 <pow+0x2b4>
 8120ea4:	000d883a 	mov	r6,zero
 8120ea8:	000f883a 	mov	r7,zero
 8120eac:	8009883a 	mov	r4,r16
 8120eb0:	880b883a 	mov	r5,r17
 8120eb4:	8123e4c0 	call	8123e4c <__eqdf2>
 8120eb8:	103f8b1e 	bne	r2,zero,8120ce8 <pow+0x68>
 8120ebc:	a009883a 	mov	r4,r20
 8120ec0:	a80b883a 	mov	r5,r21
 8120ec4:	81226e80 	call	81226e8 <finite>
 8120ec8:	103f8726 	beq	r2,zero,8120ce8 <pow+0x68>
 8120ecc:	9009883a 	mov	r4,r18
 8120ed0:	980b883a 	mov	r5,r19
 8120ed4:	81226e80 	call	81226e8 <finite>
 8120ed8:	103f8326 	beq	r2,zero,8120ce8 <pow+0x68>
 8120edc:	b9000017 	ldw	r4,0(r23)
 8120ee0:	00800104 	movi	r2,4
 8120ee4:	d8800015 	stw	r2,0(sp)
 8120ee8:	00c204f4 	movhi	r3,2067
 8120eec:	18c64804 	addi	r3,r3,6432
 8120ef0:	00800084 	movi	r2,2
 8120ef4:	d8c00115 	stw	r3,4(sp)
 8120ef8:	dd400315 	stw	r21,12(sp)
 8120efc:	dcc00515 	stw	r19,20(sp)
 8120f00:	d8000815 	stw	zero,32(sp)
 8120f04:	dd000215 	stw	r20,8(sp)
 8120f08:	dc800415 	stw	r18,16(sp)
 8120f0c:	d8000615 	stw	zero,24(sp)
 8120f10:	d8000715 	stw	zero,28(sp)
 8120f14:	20800326 	beq	r4,r2,8120f24 <pow+0x2a4>
 8120f18:	d809883a 	mov	r4,sp
 8120f1c:	81227340 	call	8122734 <matherr>
 8120f20:	103fb11e 	bne	r2,zero,8120de8 <pow+0x168>
 8120f24:	8124d0c0 	call	8124d0c <__errno>
 8120f28:	00c00884 	movi	r3,34
 8120f2c:	10c00015 	stw	r3,0(r2)
 8120f30:	003fad06 	br	8120de8 <pow+0x168>
 8120f34:	a009883a 	mov	r4,r20
 8120f38:	a80b883a 	mov	r5,r21
 8120f3c:	81226e80 	call	81226e8 <finite>
 8120f40:	103fd826 	beq	r2,zero,8120ea4 <pow+0x224>
 8120f44:	9009883a 	mov	r4,r18
 8120f48:	980b883a 	mov	r5,r19
 8120f4c:	81226e80 	call	81226e8 <finite>
 8120f50:	103fd426 	beq	r2,zero,8120ea4 <pow+0x224>
 8120f54:	880b883a 	mov	r5,r17
 8120f58:	8009883a 	mov	r4,r16
 8120f5c:	81227040 	call	8122704 <__isnand>
 8120f60:	10001926 	beq	r2,zero,8120fc8 <pow+0x348>
 8120f64:	bc000017 	ldw	r16,0(r23)
 8120f68:	00800044 	movi	r2,1
 8120f6c:	00c204f4 	movhi	r3,2067
 8120f70:	18c64804 	addi	r3,r3,6432
 8120f74:	d8800015 	stw	r2,0(sp)
 8120f78:	d8c00115 	stw	r3,4(sp)
 8120f7c:	dd400315 	stw	r21,12(sp)
 8120f80:	dcc00515 	stw	r19,20(sp)
 8120f84:	d8000815 	stw	zero,32(sp)
 8120f88:	dd000215 	stw	r20,8(sp)
 8120f8c:	dc800415 	stw	r18,16(sp)
 8120f90:	80000a26 	beq	r16,zero,8120fbc <pow+0x33c>
 8120f94:	0009883a 	mov	r4,zero
 8120f98:	000d883a 	mov	r6,zero
 8120f9c:	000b883a 	mov	r5,zero
 8120fa0:	000f883a 	mov	r7,zero
 8120fa4:	8123bf40 	call	8123bf4 <__divdf3>
 8120fa8:	d8800615 	stw	r2,24(sp)
 8120fac:	00800084 	movi	r2,2
 8120fb0:	d8c00715 	stw	r3,28(sp)
 8120fb4:	80bfb01e 	bne	r16,r2,8120e78 <pow+0x1f8>
 8120fb8:	003fb206 	br	8120e84 <pow+0x204>
 8120fbc:	d8000615 	stw	zero,24(sp)
 8120fc0:	d8000715 	stw	zero,28(sp)
 8120fc4:	003fac06 	br	8120e78 <pow+0x1f8>
 8120fc8:	b8800017 	ldw	r2,0(r23)
 8120fcc:	00c000c4 	movi	r3,3
 8120fd0:	010204f4 	movhi	r4,2067
 8120fd4:	21064804 	addi	r4,r4,6432
 8120fd8:	d8c00015 	stw	r3,0(sp)
 8120fdc:	d9000115 	stw	r4,4(sp)
 8120fe0:	d8000815 	stw	zero,32(sp)
 8120fe4:	dd000215 	stw	r20,8(sp)
 8120fe8:	dd400315 	stw	r21,12(sp)
 8120fec:	dc800415 	stw	r18,16(sp)
 8120ff0:	dcc00515 	stw	r19,20(sp)
 8120ff4:	1000251e 	bne	r2,zero,812108c <pow+0x40c>
 8120ff8:	05b80034 	movhi	r22,57344
 8120ffc:	0091fc34 	movhi	r2,18416
 8121000:	10bfffc4 	addi	r2,r2,-1
 8121004:	000d883a 	mov	r6,zero
 8121008:	000f883a 	mov	r7,zero
 812100c:	a80b883a 	mov	r5,r21
 8121010:	a009883a 	mov	r4,r20
 8121014:	d8800715 	stw	r2,28(sp)
 8121018:	dd800615 	stw	r22,24(sp)
 812101c:	8123fe40 	call	8123fe4 <__ltdf2>
 8121020:	103fbd0e 	bge	r2,zero,8120f18 <pow+0x298>
 8121024:	0005883a 	mov	r2,zero
 8121028:	00cff834 	movhi	r3,16352
 812102c:	180f883a 	mov	r7,r3
 8121030:	100d883a 	mov	r6,r2
 8121034:	980b883a 	mov	r5,r19
 8121038:	9009883a 	mov	r4,r18
 812103c:	81238300 	call	8123830 <__muldf3>
 8121040:	1009883a 	mov	r4,r2
 8121044:	180b883a 	mov	r5,r3
 8121048:	1021883a 	mov	r16,r2
 812104c:	1823883a 	mov	r17,r3
 8121050:	812274c0 	call	812274c <rint>
 8121054:	180f883a 	mov	r7,r3
 8121058:	8009883a 	mov	r4,r16
 812105c:	880b883a 	mov	r5,r17
 8121060:	100d883a 	mov	r6,r2
 8121064:	8123ed40 	call	8123ed4 <__nedf2>
 8121068:	10000426 	beq	r2,zero,812107c <pow+0x3fc>
 812106c:	00b1fc34 	movhi	r2,51184
 8121070:	10bfffc4 	addi	r2,r2,-1
 8121074:	dd800615 	stw	r22,24(sp)
 8121078:	d8800715 	stw	r2,28(sp)
 812107c:	b8c00017 	ldw	r3,0(r23)
 8121080:	00800084 	movi	r2,2
 8121084:	18bfa41e 	bne	r3,r2,8120f18 <pow+0x298>
 8121088:	003fa606 	br	8120f24 <pow+0x2a4>
 812108c:	009ffc34 	movhi	r2,32752
 8121090:	000d883a 	mov	r6,zero
 8121094:	000f883a 	mov	r7,zero
 8121098:	a80b883a 	mov	r5,r21
 812109c:	a009883a 	mov	r4,r20
 81210a0:	d8800715 	stw	r2,28(sp)
 81210a4:	d8000615 	stw	zero,24(sp)
 81210a8:	8123fe40 	call	8123fe4 <__ltdf2>
 81210ac:	103ff30e 	bge	r2,zero,812107c <pow+0x3fc>
 81210b0:	0005883a 	mov	r2,zero
 81210b4:	00cff834 	movhi	r3,16352
 81210b8:	180f883a 	mov	r7,r3
 81210bc:	100d883a 	mov	r6,r2
 81210c0:	980b883a 	mov	r5,r19
 81210c4:	9009883a 	mov	r4,r18
 81210c8:	81238300 	call	8123830 <__muldf3>
 81210cc:	1009883a 	mov	r4,r2
 81210d0:	180b883a 	mov	r5,r3
 81210d4:	1021883a 	mov	r16,r2
 81210d8:	1823883a 	mov	r17,r3
 81210dc:	812274c0 	call	812274c <rint>
 81210e0:	180f883a 	mov	r7,r3
 81210e4:	8009883a 	mov	r4,r16
 81210e8:	880b883a 	mov	r5,r17
 81210ec:	100d883a 	mov	r6,r2
 81210f0:	8123ed40 	call	8123ed4 <__nedf2>
 81210f4:	103fe126 	beq	r2,zero,812107c <pow+0x3fc>
 81210f8:	00bffc34 	movhi	r2,65520
 81210fc:	d8800715 	stw	r2,28(sp)
 8121100:	d8000615 	stw	zero,24(sp)
 8121104:	003fdd06 	br	812107c <pow+0x3fc>

08121108 <__ieee754_pow>:
 8121108:	deffbb04 	addi	sp,sp,-276
 812110c:	3005883a 	mov	r2,r6
 8121110:	dd404015 	stw	r21,256(sp)
 8121114:	dd003f15 	stw	r20,252(sp)
 8121118:	d9802815 	stw	r6,160(sp)
 812111c:	2029883a 	mov	r20,r4
 8121120:	282b883a 	mov	r21,r5
 8121124:	3009883a 	mov	r4,r6
 8121128:	380b883a 	mov	r5,r7
 812112c:	01a00034 	movhi	r6,32768
 8121130:	31bfffc4 	addi	r6,r6,-1
 8121134:	dc003b15 	stw	r16,236(sp)
 8121138:	29a0703a 	and	r16,r5,r6
 812113c:	1404b03a 	or	r2,r2,r16
 8121140:	dd804115 	stw	r22,260(sp)
 8121144:	dc403c15 	stw	r17,240(sp)
 8121148:	d9c02915 	stw	r7,164(sp)
 812114c:	382d883a 	mov	r22,r7
 8121150:	dfc04415 	stw	ra,272(sp)
 8121154:	200f883a 	mov	r7,r4
 8121158:	df004315 	stw	fp,268(sp)
 812115c:	ddc04215 	stw	r23,264(sp)
 8121160:	dcc03e15 	stw	r19,248(sp)
 8121164:	dc803d15 	stw	r18,244(sp)
 8121168:	a023883a 	mov	r17,r20
 812116c:	2809883a 	mov	r4,r5
 8121170:	10000826 	beq	r2,zero,8121194 <__ieee754_pow+0x8c>
 8121174:	a9a4703a 	and	r18,r21,r6
 8121178:	009ffc34 	movhi	r2,32752
 812117c:	a827883a 	mov	r19,r21
 8121180:	1480180e 	bge	r2,r18,81211e4 <__ieee754_pow+0xdc>
 8121184:	00b00434 	movhi	r2,49168
 8121188:	9085883a 	add	r2,r18,r2
 812118c:	8884b03a 	or	r2,r17,r2
 8121190:	1000321e 	bne	r2,zero,812125c <__ieee754_pow+0x154>
 8121194:	0009883a 	mov	r4,zero
 8121198:	014ffc34 	movhi	r5,16368
 812119c:	d9002815 	stw	r4,160(sp)
 81211a0:	d9402915 	stw	r5,164(sp)
 81211a4:	d9002817 	ldw	r4,160(sp)
 81211a8:	d9402917 	ldw	r5,164(sp)
 81211ac:	2005883a 	mov	r2,r4
 81211b0:	2807883a 	mov	r3,r5
 81211b4:	dfc04417 	ldw	ra,272(sp)
 81211b8:	df004317 	ldw	fp,268(sp)
 81211bc:	ddc04217 	ldw	r23,264(sp)
 81211c0:	dd804117 	ldw	r22,260(sp)
 81211c4:	dd404017 	ldw	r21,256(sp)
 81211c8:	dd003f17 	ldw	r20,252(sp)
 81211cc:	dcc03e17 	ldw	r19,248(sp)
 81211d0:	dc803d17 	ldw	r18,244(sp)
 81211d4:	dc403c17 	ldw	r17,240(sp)
 81211d8:	dc003b17 	ldw	r16,236(sp)
 81211dc:	dec04504 	addi	sp,sp,276
 81211e0:	f800283a 	ret
 81211e4:	90802b26 	beq	r18,r2,8121294 <__ieee754_pow+0x18c>
 81211e8:	143fe616 	blt	r2,r16,8121184 <__ieee754_pow+0x7c>
 81211ec:	80806126 	beq	r16,r2,8121374 <__ieee754_pow+0x26c>
 81211f0:	982e403a 	cmpge	r23,r19,zero
 81211f4:	b8004e26 	beq	r23,zero,8121330 <__ieee754_pow+0x228>
 81211f8:	0039883a 	mov	fp,zero
 81211fc:	3800281e 	bne	r7,zero,81212a0 <__ieee754_pow+0x198>
 8121200:	009ffc34 	movhi	r2,32752
 8121204:	80804f26 	beq	r16,r2,8121344 <__ieee754_pow+0x23c>
 8121208:	008ffc34 	movhi	r2,16368
 812120c:	80808226 	beq	r16,r2,8121418 <__ieee754_pow+0x310>
 8121210:	00900034 	movhi	r2,16384
 8121214:	20828426 	beq	r4,r2,8121c28 <__ieee754_pow+0xb20>
 8121218:	008ff834 	movhi	r2,16352
 812121c:	2080201e 	bne	r4,r2,81212a0 <__ieee754_pow+0x198>
 8121220:	98001f16 	blt	r19,zero,81212a0 <__ieee754_pow+0x198>
 8121224:	a80b883a 	mov	r5,r21
 8121228:	a009883a 	mov	r4,r20
 812122c:	dfc04417 	ldw	ra,272(sp)
 8121230:	df004317 	ldw	fp,268(sp)
 8121234:	ddc04217 	ldw	r23,264(sp)
 8121238:	dd804117 	ldw	r22,260(sp)
 812123c:	dd404017 	ldw	r21,256(sp)
 8121240:	dd003f17 	ldw	r20,252(sp)
 8121244:	dcc03e17 	ldw	r19,248(sp)
 8121248:	dc803d17 	ldw	r18,244(sp)
 812124c:	dc403c17 	ldw	r17,240(sp)
 8121250:	dc003b17 	ldw	r16,236(sp)
 8121254:	dec04504 	addi	sp,sp,276
 8121258:	81224081 	jmpi	8122408 <__ieee754_sqrt>
 812125c:	010204f4 	movhi	r4,2067
 8121260:	2106b304 	addi	r4,r4,6860
 8121264:	dfc04417 	ldw	ra,272(sp)
 8121268:	df004317 	ldw	fp,268(sp)
 812126c:	ddc04217 	ldw	r23,264(sp)
 8121270:	dd804117 	ldw	r22,260(sp)
 8121274:	dd404017 	ldw	r21,256(sp)
 8121278:	dd003f17 	ldw	r20,252(sp)
 812127c:	dcc03e17 	ldw	r19,248(sp)
 8121280:	dc803d17 	ldw	r18,244(sp)
 8121284:	dc403c17 	ldw	r17,240(sp)
 8121288:	dc003b17 	ldw	r16,236(sp)
 812128c:	dec04504 	addi	sp,sp,276
 8121290:	812273c1 	jmpi	812273c <nan>
 8121294:	a03fbb1e 	bne	r20,zero,8121184 <__ieee754_pow+0x7c>
 8121298:	003fd306 	br	81211e8 <__ieee754_pow+0xe0>
 812129c:	0039883a 	mov	fp,zero
 81212a0:	a009883a 	mov	r4,r20
 81212a4:	a80b883a 	mov	r5,r21
 81212a8:	81226d00 	call	81226d0 <fabs>
 81212ac:	1015883a 	mov	r10,r2
 81212b0:	1817883a 	mov	r11,r3
 81212b4:	88001226 	beq	r17,zero,8121300 <__ieee754_pow+0x1f8>
 81212b8:	9804d7fa 	srli	r2,r19,31
 81212bc:	10bfffc4 	addi	r2,r2,-1
 81212c0:	1706b03a 	or	r3,r2,fp
 81212c4:	d8802515 	stw	r2,148(sp)
 81212c8:	18002c1e 	bne	r3,zero,812137c <__ieee754_pow+0x274>
 81212cc:	a80f883a 	mov	r7,r21
 81212d0:	a009883a 	mov	r4,r20
 81212d4:	a80b883a 	mov	r5,r21
 81212d8:	a00d883a 	mov	r6,r20
 81212dc:	812373c0 	call	812373c <__subdf3>
 81212e0:	1009883a 	mov	r4,r2
 81212e4:	180b883a 	mov	r5,r3
 81212e8:	100d883a 	mov	r6,r2
 81212ec:	180f883a 	mov	r7,r3
 81212f0:	8123bf40 	call	8123bf4 <__divdf3>
 81212f4:	d8802815 	stw	r2,160(sp)
 81212f8:	d8c02915 	stw	r3,164(sp)
 81212fc:	003fa906 	br	81211a4 <__ieee754_pow+0x9c>
 8121300:	009ffc34 	movhi	r2,32752
 8121304:	90800326 	beq	r18,r2,8121314 <__ieee754_pow+0x20c>
 8121308:	90000226 	beq	r18,zero,8121314 <__ieee754_pow+0x20c>
 812130c:	008ffc34 	movhi	r2,16368
 8121310:	90bfe91e 	bne	r18,r2,81212b8 <__ieee754_pow+0x1b0>
 8121314:	b0026316 	blt	r22,zero,8121ca4 <__ieee754_pow+0xb9c>
 8121318:	5011883a 	mov	r8,r10
 812131c:	5813883a 	mov	r9,r11
 8121320:	b8023126 	beq	r23,zero,8121be8 <__ieee754_pow+0xae0>
 8121324:	da002815 	stw	r8,160(sp)
 8121328:	da402915 	stw	r9,164(sp)
 812132c:	003f9d06 	br	81211a4 <__ieee754_pow+0x9c>
 8121330:	0090d034 	movhi	r2,17216
 8121334:	10bfffc4 	addi	r2,r2,-1
 8121338:	1400270e 	bge	r2,r16,81213d8 <__ieee754_pow+0x2d0>
 812133c:	07000084 	movi	fp,2
 8121340:	003fae06 	br	81211fc <__ieee754_pow+0xf4>
 8121344:	00b00434 	movhi	r2,49168
 8121348:	9085883a 	add	r2,r18,r2
 812134c:	8884b03a 	or	r2,r17,r2
 8121350:	103f9026 	beq	r2,zero,8121194 <__ieee754_pow+0x8c>
 8121354:	008ffc34 	movhi	r2,16368
 8121358:	10bfffc4 	addi	r2,r2,-1
 812135c:	1482d00e 	bge	r2,r18,8121ea0 <__ieee754_pow+0xd98>
 8121360:	b03f900e 	bge	r22,zero,81211a4 <__ieee754_pow+0x9c>
 8121364:	0005883a 	mov	r2,zero
 8121368:	d8802815 	stw	r2,160(sp)
 812136c:	d8802915 	stw	r2,164(sp)
 8121370:	003f8c06 	br	81211a4 <__ieee754_pow+0x9c>
 8121374:	383f9e26 	beq	r7,zero,81211f0 <__ieee754_pow+0xe8>
 8121378:	003f8206 	br	8121184 <__ieee754_pow+0x7c>
 812137c:	00907834 	movhi	r2,16864
 8121380:	1400290e 	bge	r2,r16,8121428 <__ieee754_pow+0x320>
 8121384:	0090fc34 	movhi	r2,17392
 8121388:	1402500e 	bge	r2,r16,8121ccc <__ieee754_pow+0xbc4>
 812138c:	008ffc34 	movhi	r2,16368
 8121390:	10bfffc4 	addi	r2,r2,-1
 8121394:	14800b0e 	bge	r2,r18,81213c4 <__ieee754_pow+0x2bc>
 8121398:	05800b0e 	bge	zero,r22,81213c8 <__ieee754_pow+0x2c0>
 812139c:	00a20034 	movhi	r2,34816
 81213a0:	109d6704 	addi	r2,r2,30108
 81213a4:	00df8e34 	movhi	r3,32312
 81213a8:	18f90f04 	addi	r3,r3,-7108
 81213ac:	100d883a 	mov	r6,r2
 81213b0:	180f883a 	mov	r7,r3
 81213b4:	1009883a 	mov	r4,r2
 81213b8:	180b883a 	mov	r5,r3
 81213bc:	81238300 	call	8123830 <__muldf3>
 81213c0:	003fcc06 	br	81212f4 <__ieee754_pow+0x1ec>
 81213c4:	b03ff516 	blt	r22,zero,812139c <__ieee754_pow+0x294>
 81213c8:	0007883a 	mov	r3,zero
 81213cc:	d8c02815 	stw	r3,160(sp)
 81213d0:	d8c02915 	stw	r3,164(sp)
 81213d4:	003f7306 	br	81211a4 <__ieee754_pow+0x9c>
 81213d8:	008ffc34 	movhi	r2,16368
 81213dc:	10bfffc4 	addi	r2,r2,-1
 81213e0:	143f850e 	bge	r2,r16,81211f8 <__ieee754_pow+0xf0>
 81213e4:	8005d53a 	srai	r2,r16,20
 81213e8:	01400504 	movi	r5,20
 81213ec:	10ff0044 	addi	r3,r2,-1023
 81213f0:	28c3e10e 	bge	r5,r3,8122378 <__ieee754_pow+0x1270>
 81213f4:	00800d04 	movi	r2,52
 81213f8:	10c5c83a 	sub	r2,r2,r3
 81213fc:	3886d83a 	srl	r3,r7,r2
 8121400:	1884983a 	sll	r2,r3,r2
 8121404:	38bf7c1e 	bne	r7,r2,81211f8 <__ieee754_pow+0xf0>
 8121408:	18c0004c 	andi	r3,r3,1
 812140c:	00800084 	movi	r2,2
 8121410:	10f9c83a 	sub	fp,r2,r3
 8121414:	003f7906 	br	81211fc <__ieee754_pow+0xf4>
 8121418:	b0038516 	blt	r22,zero,8122230 <__ieee754_pow+0x1128>
 812141c:	dd002815 	stw	r20,160(sp)
 8121420:	dd402915 	stw	r21,164(sp)
 8121424:	003f5f06 	br	81211a4 <__ieee754_pow+0x9c>
 8121428:	00800434 	movhi	r2,16
 812142c:	10bfffc4 	addi	r2,r2,-1
 8121430:	1482900e 	bge	r2,r18,8121e74 <__ieee754_pow+0xd6c>
 8121434:	000b883a 	mov	r5,zero
 8121438:	9005d53a 	srai	r2,r18,20
 812143c:	00c00434 	movhi	r3,16
 8121440:	18ffffc4 	addi	r3,r3,-1
 8121444:	90c8703a 	and	r4,r18,r3
 8121448:	2887883a 	add	r3,r5,r2
 812144c:	18bf0044 	addi	r2,r3,-1023
 8121450:	d8800015 	stw	r2,0(sp)
 8121454:	00800134 	movhi	r2,4
 8121458:	10a62384 	addi	r2,r2,-26482
 812145c:	250ffc34 	orhi	r20,r4,16368
 8121460:	1101ee0e 	bge	r2,r4,8121c1c <__ieee754_pow+0xb14>
 8121464:	00800334 	movhi	r2,12
 8121468:	10ad9e44 	addi	r2,r2,-18823
 812146c:	1101e716 	blt	r2,r4,8121c0c <__ieee754_pow+0xb04>
 8121470:	01000044 	movi	r4,1
 8121474:	04000334 	movhi	r16,12
 8121478:	200890fa 	slli	r4,r4,3
 812147c:	da800115 	stw	r10,4(sp)
 8121480:	dd000215 	stw	r20,8(sp)
 8121484:	d9002c15 	stw	r4,176(sp)
 8121488:	d9402c17 	ldw	r5,176(sp)
 812148c:	010204f4 	movhi	r4,2067
 8121490:	21064904 	addi	r4,r4,6436
 8121494:	a02bd07a 	srai	r21,r20,1
 8121498:	2909883a 	add	r4,r5,r4
 812149c:	25800017 	ldw	r22,0(r4)
 81214a0:	25c00117 	ldw	r23,4(r4)
 81214a4:	a00b883a 	mov	r5,r20
 81214a8:	5009883a 	mov	r4,r10
 81214ac:	b00d883a 	mov	r6,r22
 81214b0:	b80f883a 	mov	r7,r23
 81214b4:	812373c0 	call	812373c <__subdf3>
 81214b8:	d9000117 	ldw	r4,4(sp)
 81214bc:	a00b883a 	mov	r5,r20
 81214c0:	b00d883a 	mov	r6,r22
 81214c4:	b80f883a 	mov	r7,r23
 81214c8:	1025883a 	mov	r18,r2
 81214cc:	1827883a 	mov	r19,r3
 81214d0:	81237bc0 	call	81237bc <__adddf3>
 81214d4:	0011883a 	mov	r8,zero
 81214d8:	024ffc34 	movhi	r9,16368
 81214dc:	480b883a 	mov	r5,r9
 81214e0:	4009883a 	mov	r4,r8
 81214e4:	180f883a 	mov	r7,r3
 81214e8:	100d883a 	mov	r6,r2
 81214ec:	8123bf40 	call	8123bf4 <__divdf3>
 81214f0:	d8c02e15 	stw	r3,184(sp)
 81214f4:	d8800f15 	stw	r2,60(sp)
 81214f8:	d8802d15 	stw	r2,180(sp)
 81214fc:	d8802e17 	ldw	r2,184(sp)
 8121500:	d9800f17 	ldw	r6,60(sp)
 8121504:	9009883a 	mov	r4,r18
 8121508:	980b883a 	mov	r5,r19
 812150c:	100f883a 	mov	r7,r2
 8121510:	dc800b15 	stw	r18,44(sp)
 8121514:	dcc00c15 	stw	r19,48(sp)
 8121518:	d8801015 	stw	r2,64(sp)
 812151c:	81238300 	call	8123830 <__muldf3>
 8121520:	d8c03015 	stw	r3,192(sp)
 8121524:	d9003017 	ldw	r4,192(sp)
 8121528:	d8802f15 	stw	r2,188(sp)
 812152c:	d8800315 	stw	r2,12(sp)
 8121530:	ad480034 	orhi	r21,r21,8192
 8121534:	0005883a 	mov	r2,zero
 8121538:	ac2b883a 	add	r21,r21,r16
 812153c:	000b883a 	mov	r5,zero
 8121540:	1021883a 	mov	r16,r2
 8121544:	2005883a 	mov	r2,r4
 8121548:	800d883a 	mov	r6,r16
 812154c:	a80f883a 	mov	r7,r21
 8121550:	d9000415 	stw	r4,16(sp)
 8121554:	d9002715 	stw	r4,156(sp)
 8121558:	d9402615 	stw	r5,152(sp)
 812155c:	d9401615 	stw	r5,88(sp)
 8121560:	d9001715 	stw	r4,92(sp)
 8121564:	100b883a 	mov	r5,r2
 8121568:	0009883a 	mov	r4,zero
 812156c:	81238300 	call	8123830 <__muldf3>
 8121570:	d9000b17 	ldw	r4,44(sp)
 8121574:	980b883a 	mov	r5,r19
 8121578:	180f883a 	mov	r7,r3
 812157c:	100d883a 	mov	r6,r2
 8121580:	812373c0 	call	812373c <__subdf3>
 8121584:	8009883a 	mov	r4,r16
 8121588:	a80b883a 	mov	r5,r21
 812158c:	b80f883a 	mov	r7,r23
 8121590:	b00d883a 	mov	r6,r22
 8121594:	1021883a 	mov	r16,r2
 8121598:	1823883a 	mov	r17,r3
 812159c:	812373c0 	call	812373c <__subdf3>
 81215a0:	d9000117 	ldw	r4,4(sp)
 81215a4:	a00b883a 	mov	r5,r20
 81215a8:	180f883a 	mov	r7,r3
 81215ac:	100d883a 	mov	r6,r2
 81215b0:	812373c0 	call	812373c <__subdf3>
 81215b4:	d9001617 	ldw	r4,88(sp)
 81215b8:	d9402717 	ldw	r5,156(sp)
 81215bc:	180f883a 	mov	r7,r3
 81215c0:	100d883a 	mov	r6,r2
 81215c4:	81238300 	call	8123830 <__muldf3>
 81215c8:	180f883a 	mov	r7,r3
 81215cc:	880b883a 	mov	r5,r17
 81215d0:	8009883a 	mov	r4,r16
 81215d4:	100d883a 	mov	r6,r2
 81215d8:	812373c0 	call	812373c <__subdf3>
 81215dc:	d9000f17 	ldw	r4,60(sp)
 81215e0:	d9402e17 	ldw	r5,184(sp)
 81215e4:	180f883a 	mov	r7,r3
 81215e8:	100d883a 	mov	r6,r2
 81215ec:	81238300 	call	8123830 <__muldf3>
 81215f0:	d9000317 	ldw	r4,12(sp)
 81215f4:	d9403017 	ldw	r5,192(sp)
 81215f8:	d8803115 	stw	r2,196(sp)
 81215fc:	200d883a 	mov	r6,r4
 8121600:	280f883a 	mov	r7,r5
 8121604:	d8c03215 	stw	r3,200(sp)
 8121608:	81238300 	call	8123830 <__muldf3>
 812160c:	1009883a 	mov	r4,r2
 8121610:	180b883a 	mov	r5,r3
 8121614:	100d883a 	mov	r6,r2
 8121618:	180f883a 	mov	r7,r3
 812161c:	1021883a 	mov	r16,r2
 8121620:	1823883a 	mov	r17,r3
 8121624:	81238300 	call	8123830 <__muldf3>
 8121628:	02129174 	movhi	r8,19013
 812162c:	4213bbc4 	addi	r8,r8,20207
 8121630:	024ff2b4 	movhi	r9,16330
 8121634:	4a5f8a04 	addi	r9,r9,32296
 8121638:	480f883a 	mov	r7,r9
 812163c:	8009883a 	mov	r4,r16
 8121640:	880b883a 	mov	r5,r17
 8121644:	400d883a 	mov	r6,r8
 8121648:	1029883a 	mov	r20,r2
 812164c:	182b883a 	mov	r21,r3
 8121650:	81238300 	call	8123830 <__muldf3>
 8121654:	0224f2b4 	movhi	r8,37834
 8121658:	4236d944 	addi	r8,r8,-9371
 812165c:	024ff3b4 	movhi	r9,16334
 8121660:	4a619284 	addi	r9,r9,-31158
 8121664:	480f883a 	mov	r7,r9
 8121668:	400d883a 	mov	r6,r8
 812166c:	180b883a 	mov	r5,r3
 8121670:	1009883a 	mov	r4,r2
 8121674:	81237bc0 	call	81237bc <__adddf3>
 8121678:	180f883a 	mov	r7,r3
 812167c:	8009883a 	mov	r4,r16
 8121680:	880b883a 	mov	r5,r17
 8121684:	100d883a 	mov	r6,r2
 8121688:	81238300 	call	8123830 <__muldf3>
 812168c:	022a4774 	movhi	r8,43293
 8121690:	42104044 	addi	r8,r8,16641
 8121694:	024ff474 	movhi	r9,16337
 8121698:	4a5d1804 	addi	r9,r9,29792
 812169c:	480f883a 	mov	r7,r9
 81216a0:	400d883a 	mov	r6,r8
 81216a4:	180b883a 	mov	r5,r3
 81216a8:	1009883a 	mov	r4,r2
 81216ac:	81237bc0 	call	81237bc <__adddf3>
 81216b0:	180f883a 	mov	r7,r3
 81216b4:	8009883a 	mov	r4,r16
 81216b8:	880b883a 	mov	r5,r17
 81216bc:	100d883a 	mov	r6,r2
 81216c0:	81238300 	call	8123830 <__muldf3>
 81216c4:	021463f4 	movhi	r8,20879
 81216c8:	42099344 	addi	r8,r8,9805
 81216cc:	024ff574 	movhi	r9,16341
 81216d0:	4a555544 	addi	r9,r9,21845
 81216d4:	480f883a 	mov	r7,r9
 81216d8:	400d883a 	mov	r6,r8
 81216dc:	180b883a 	mov	r5,r3
 81216e0:	1009883a 	mov	r4,r2
 81216e4:	81237bc0 	call	81237bc <__adddf3>
 81216e8:	180f883a 	mov	r7,r3
 81216ec:	8009883a 	mov	r4,r16
 81216f0:	880b883a 	mov	r5,r17
 81216f4:	100d883a 	mov	r6,r2
 81216f8:	81238300 	call	8123830 <__muldf3>
 81216fc:	0236dc34 	movhi	r8,56176
 8121700:	422affc4 	addi	r8,r8,-21505
 8121704:	024ff6f4 	movhi	r9,16347
 8121708:	4a5b6d84 	addi	r9,r9,28086
 812170c:	480f883a 	mov	r7,r9
 8121710:	400d883a 	mov	r6,r8
 8121714:	180b883a 	mov	r5,r3
 8121718:	1009883a 	mov	r4,r2
 812171c:	81237bc0 	call	81237bc <__adddf3>
 8121720:	180f883a 	mov	r7,r3
 8121724:	8009883a 	mov	r4,r16
 8121728:	880b883a 	mov	r5,r17
 812172c:	100d883a 	mov	r6,r2
 8121730:	81238300 	call	8123830 <__muldf3>
 8121734:	020cccf4 	movhi	r8,13107
 8121738:	420cc0c4 	addi	r8,r8,13059
 812173c:	024ff8f4 	movhi	r9,16355
 8121740:	4a4cccc4 	addi	r9,r9,13107
 8121744:	480f883a 	mov	r7,r9
 8121748:	400d883a 	mov	r6,r8
 812174c:	180b883a 	mov	r5,r3
 8121750:	1009883a 	mov	r4,r2
 8121754:	81237bc0 	call	81237bc <__adddf3>
 8121758:	180f883a 	mov	r7,r3
 812175c:	a80b883a 	mov	r5,r21
 8121760:	a009883a 	mov	r4,r20
 8121764:	100d883a 	mov	r6,r2
 8121768:	81238300 	call	8123830 <__muldf3>
 812176c:	d9000317 	ldw	r4,12(sp)
 8121770:	d9403017 	ldw	r5,192(sp)
 8121774:	d9801617 	ldw	r6,88(sp)
 8121778:	d9c02717 	ldw	r7,156(sp)
 812177c:	1021883a 	mov	r16,r2
 8121780:	1823883a 	mov	r17,r3
 8121784:	81237bc0 	call	81237bc <__adddf3>
 8121788:	d9003117 	ldw	r4,196(sp)
 812178c:	d9403217 	ldw	r5,200(sp)
 8121790:	180f883a 	mov	r7,r3
 8121794:	100d883a 	mov	r6,r2
 8121798:	d9001415 	stw	r4,80(sp)
 812179c:	d9401515 	stw	r5,84(sp)
 81217a0:	81238300 	call	8123830 <__muldf3>
 81217a4:	180f883a 	mov	r7,r3
 81217a8:	8009883a 	mov	r4,r16
 81217ac:	880b883a 	mov	r5,r17
 81217b0:	100d883a 	mov	r6,r2
 81217b4:	81237bc0 	call	81237bc <__adddf3>
 81217b8:	d9001617 	ldw	r4,88(sp)
 81217bc:	d9402717 	ldw	r5,156(sp)
 81217c0:	d8803315 	stw	r2,204(sp)
 81217c4:	200d883a 	mov	r6,r4
 81217c8:	280f883a 	mov	r7,r5
 81217cc:	d8c03415 	stw	r3,208(sp)
 81217d0:	81238300 	call	8123830 <__muldf3>
 81217d4:	182f883a 	mov	r23,r3
 81217d8:	05500234 	movhi	r21,16392
 81217dc:	0029883a 	mov	r20,zero
 81217e0:	b80b883a 	mov	r5,r23
 81217e4:	a00d883a 	mov	r6,r20
 81217e8:	a80f883a 	mov	r7,r21
 81217ec:	1009883a 	mov	r4,r2
 81217f0:	d8800715 	stw	r2,28(sp)
 81217f4:	d8c00815 	stw	r3,32(sp)
 81217f8:	81237bc0 	call	81237bc <__adddf3>
 81217fc:	d9003317 	ldw	r4,204(sp)
 8121800:	d9403417 	ldw	r5,208(sp)
 8121804:	180f883a 	mov	r7,r3
 8121808:	100d883a 	mov	r6,r2
 812180c:	d9000515 	stw	r4,20(sp)
 8121810:	d9400615 	stw	r5,24(sp)
 8121814:	81237bc0 	call	81237bc <__adddf3>
 8121818:	d9001617 	ldw	r4,88(sp)
 812181c:	d9402717 	ldw	r5,156(sp)
 8121820:	0025883a 	mov	r18,zero
 8121824:	900d883a 	mov	r6,r18
 8121828:	180f883a 	mov	r7,r3
 812182c:	1823883a 	mov	r17,r3
 8121830:	81238300 	call	8123830 <__muldf3>
 8121834:	d9001417 	ldw	r4,80(sp)
 8121838:	d9403217 	ldw	r5,200(sp)
 812183c:	880f883a 	mov	r7,r17
 8121840:	900d883a 	mov	r6,r18
 8121844:	d8803515 	stw	r2,212(sp)
 8121848:	d8c03615 	stw	r3,216(sp)
 812184c:	81238300 	call	8123830 <__muldf3>
 8121850:	a80f883a 	mov	r7,r21
 8121854:	880b883a 	mov	r5,r17
 8121858:	000d883a 	mov	r6,zero
 812185c:	9009883a 	mov	r4,r18
 8121860:	1021883a 	mov	r16,r2
 8121864:	1823883a 	mov	r17,r3
 8121868:	812373c0 	call	812373c <__subdf3>
 812186c:	d9800717 	ldw	r6,28(sp)
 8121870:	b80f883a 	mov	r7,r23
 8121874:	180b883a 	mov	r5,r3
 8121878:	1009883a 	mov	r4,r2
 812187c:	812373c0 	call	812373c <__subdf3>
 8121880:	d9000517 	ldw	r4,20(sp)
 8121884:	d9403417 	ldw	r5,208(sp)
 8121888:	180f883a 	mov	r7,r3
 812188c:	100d883a 	mov	r6,r2
 8121890:	812373c0 	call	812373c <__subdf3>
 8121894:	d9000317 	ldw	r4,12(sp)
 8121898:	d9403017 	ldw	r5,192(sp)
 812189c:	180f883a 	mov	r7,r3
 81218a0:	100d883a 	mov	r6,r2
 81218a4:	81238300 	call	8123830 <__muldf3>
 81218a8:	180f883a 	mov	r7,r3
 81218ac:	880b883a 	mov	r5,r17
 81218b0:	8009883a 	mov	r4,r16
 81218b4:	100d883a 	mov	r6,r2
 81218b8:	81237bc0 	call	81237bc <__adddf3>
 81218bc:	102d883a 	mov	r22,r2
 81218c0:	d9003617 	ldw	r4,216(sp)
 81218c4:	d8803517 	ldw	r2,212(sp)
 81218c8:	d9403617 	ldw	r5,216(sp)
 81218cc:	182f883a 	mov	r23,r3
 81218d0:	b00d883a 	mov	r6,r22
 81218d4:	b80f883a 	mov	r7,r23
 81218d8:	d9000a15 	stw	r4,40(sp)
 81218dc:	1009883a 	mov	r4,r2
 81218e0:	054ffbf4 	movhi	r21,16367
 81218e4:	ad71c244 	addi	r21,r21,-14583
 81218e8:	dd800d15 	stw	r22,52(sp)
 81218ec:	ddc00e15 	stw	r23,56(sp)
 81218f0:	05380034 	movhi	r20,57344
 81218f4:	d8800915 	stw	r2,36(sp)
 81218f8:	81237bc0 	call	81237bc <__adddf3>
 81218fc:	180b883a 	mov	r5,r3
 8121900:	a00d883a 	mov	r6,r20
 8121904:	a80f883a 	mov	r7,r21
 8121908:	9009883a 	mov	r4,r18
 812190c:	1823883a 	mov	r17,r3
 8121910:	81238300 	call	8123830 <__muldf3>
 8121914:	020516f4 	movhi	r8,5211
 8121918:	42007d44 	addi	r8,r8,501
 812191c:	026f8fb4 	movhi	r9,48702
 8121920:	4a4bf804 	addi	r9,r9,12256
 8121924:	480f883a 	mov	r7,r9
 8121928:	400d883a 	mov	r6,r8
 812192c:	880b883a 	mov	r5,r17
 8121930:	9009883a 	mov	r4,r18
 8121934:	d8803715 	stw	r2,220(sp)
 8121938:	d8c03815 	stw	r3,224(sp)
 812193c:	81238300 	call	8123830 <__muldf3>
 8121940:	d9800917 	ldw	r6,36(sp)
 8121944:	d9c03617 	ldw	r7,216(sp)
 8121948:	880b883a 	mov	r5,r17
 812194c:	9009883a 	mov	r4,r18
 8121950:	1021883a 	mov	r16,r2
 8121954:	1823883a 	mov	r17,r3
 8121958:	812373c0 	call	812373c <__subdf3>
 812195c:	d9000d17 	ldw	r4,52(sp)
 8121960:	b80b883a 	mov	r5,r23
 8121964:	180f883a 	mov	r7,r3
 8121968:	100d883a 	mov	r6,r2
 812196c:	812373c0 	call	812373c <__subdf3>
 8121970:	180b883a 	mov	r5,r3
 8121974:	a80f883a 	mov	r7,r21
 8121978:	01b70eb4 	movhi	r6,56378
 812197c:	3180ff44 	addi	r6,r6,1021
 8121980:	1009883a 	mov	r4,r2
 8121984:	81238300 	call	8123830 <__muldf3>
 8121988:	180f883a 	mov	r7,r3
 812198c:	880b883a 	mov	r5,r17
 8121990:	8009883a 	mov	r4,r16
 8121994:	100d883a 	mov	r6,r2
 8121998:	81237bc0 	call	81237bc <__adddf3>
 812199c:	d9402c17 	ldw	r5,176(sp)
 81219a0:	010204f4 	movhi	r4,2067
 81219a4:	21064d04 	addi	r4,r4,6452
 81219a8:	2909883a 	add	r4,r5,r4
 81219ac:	22400117 	ldw	r9,4(r4)
 81219b0:	22000017 	ldw	r8,0(r4)
 81219b4:	180b883a 	mov	r5,r3
 81219b8:	480f883a 	mov	r7,r9
 81219bc:	400d883a 	mov	r6,r8
 81219c0:	1009883a 	mov	r4,r2
 81219c4:	81237bc0 	call	81237bc <__adddf3>
 81219c8:	d9000017 	ldw	r4,0(sp)
 81219cc:	182f883a 	mov	r23,r3
 81219d0:	102d883a 	mov	r22,r2
 81219d4:	81240f40 	call	81240f4 <__floatsidf>
 81219d8:	d9402c17 	ldw	r5,176(sp)
 81219dc:	010204f4 	movhi	r4,2067
 81219e0:	21065104 	addi	r4,r4,6468
 81219e4:	b00d883a 	mov	r6,r22
 81219e8:	2911883a 	add	r8,r5,r4
 81219ec:	d9003717 	ldw	r4,220(sp)
 81219f0:	d9403817 	ldw	r5,224(sp)
 81219f4:	45000017 	ldw	r20,0(r8)
 81219f8:	d9002315 	stw	r4,140(sp)
 81219fc:	d9003817 	ldw	r4,224(sp)
 8121a00:	45400117 	ldw	r21,4(r8)
 8121a04:	b80f883a 	mov	r7,r23
 8121a08:	d9002415 	stw	r4,144(sp)
 8121a0c:	d9002317 	ldw	r4,140(sp)
 8121a10:	1021883a 	mov	r16,r2
 8121a14:	1823883a 	mov	r17,r3
 8121a18:	dd802115 	stw	r22,132(sp)
 8121a1c:	ddc02215 	stw	r23,136(sp)
 8121a20:	81237bc0 	call	81237bc <__adddf3>
 8121a24:	180b883a 	mov	r5,r3
 8121a28:	1009883a 	mov	r4,r2
 8121a2c:	a00d883a 	mov	r6,r20
 8121a30:	a80f883a 	mov	r7,r21
 8121a34:	81237bc0 	call	81237bc <__adddf3>
 8121a38:	180f883a 	mov	r7,r3
 8121a3c:	8009883a 	mov	r4,r16
 8121a40:	880b883a 	mov	r5,r17
 8121a44:	100d883a 	mov	r6,r2
 8121a48:	81237bc0 	call	81237bc <__adddf3>
 8121a4c:	180b883a 	mov	r5,r3
 8121a50:	0009883a 	mov	r4,zero
 8121a54:	800d883a 	mov	r6,r16
 8121a58:	880f883a 	mov	r7,r17
 8121a5c:	d9001b15 	stw	r4,108(sp)
 8121a60:	d8c01c15 	stw	r3,112(sp)
 8121a64:	812373c0 	call	812373c <__subdf3>
 8121a68:	180b883a 	mov	r5,r3
 8121a6c:	a80f883a 	mov	r7,r21
 8121a70:	1009883a 	mov	r4,r2
 8121a74:	a00d883a 	mov	r6,r20
 8121a78:	812373c0 	call	812373c <__subdf3>
 8121a7c:	d9802317 	ldw	r6,140(sp)
 8121a80:	d9c03817 	ldw	r7,224(sp)
 8121a84:	180b883a 	mov	r5,r3
 8121a88:	1009883a 	mov	r4,r2
 8121a8c:	812373c0 	call	812373c <__subdf3>
 8121a90:	d9002117 	ldw	r4,132(sp)
 8121a94:	1011883a 	mov	r8,r2
 8121a98:	1813883a 	mov	r9,r3
 8121a9c:	b80b883a 	mov	r5,r23
 8121aa0:	480f883a 	mov	r7,r9
 8121aa4:	400d883a 	mov	r6,r8
 8121aa8:	812373c0 	call	812373c <__subdf3>
 8121aac:	1823883a 	mov	r17,r3
 8121ab0:	d8c02517 	ldw	r3,148(sp)
 8121ab4:	1021883a 	mov	r16,r2
 8121ab8:	e0bfffc4 	addi	r2,fp,-1
 8121abc:	1884b03a 	or	r2,r3,r2
 8121ac0:	1000731e 	bne	r2,zero,8121c90 <__ieee754_pow+0xb88>
 8121ac4:	0009883a 	mov	r4,zero
 8121ac8:	016ffc34 	movhi	r5,49136
 8121acc:	d9001915 	stw	r4,100(sp)
 8121ad0:	d9401a15 	stw	r5,104(sp)
 8121ad4:	d9402917 	ldw	r5,164(sp)
 8121ad8:	d9002817 	ldw	r4,160(sp)
 8121adc:	0029883a 	mov	r20,zero
 8121ae0:	a00d883a 	mov	r6,r20
 8121ae4:	280f883a 	mov	r7,r5
 8121ae8:	2827883a 	mov	r19,r5
 8121aec:	812373c0 	call	812373c <__subdf3>
 8121af0:	d9001b17 	ldw	r4,108(sp)
 8121af4:	d9401c17 	ldw	r5,112(sp)
 8121af8:	180f883a 	mov	r7,r3
 8121afc:	100d883a 	mov	r6,r2
 8121b00:	81238300 	call	8123830 <__muldf3>
 8121b04:	d9c02917 	ldw	r7,164(sp)
 8121b08:	d9802817 	ldw	r6,160(sp)
 8121b0c:	880b883a 	mov	r5,r17
 8121b10:	8009883a 	mov	r4,r16
 8121b14:	1823883a 	mov	r17,r3
 8121b18:	1021883a 	mov	r16,r2
 8121b1c:	81238300 	call	8123830 <__muldf3>
 8121b20:	180f883a 	mov	r7,r3
 8121b24:	880b883a 	mov	r5,r17
 8121b28:	8009883a 	mov	r4,r16
 8121b2c:	100d883a 	mov	r6,r2
 8121b30:	81237bc0 	call	81237bc <__adddf3>
 8121b34:	d9401c17 	ldw	r5,112(sp)
 8121b38:	d9001b17 	ldw	r4,108(sp)
 8121b3c:	a00d883a 	mov	r6,r20
 8121b40:	980f883a 	mov	r7,r19
 8121b44:	1029883a 	mov	r20,r2
 8121b48:	182b883a 	mov	r21,r3
 8121b4c:	81238300 	call	8123830 <__muldf3>
 8121b50:	1025883a 	mov	r18,r2
 8121b54:	1827883a 	mov	r19,r3
 8121b58:	a009883a 	mov	r4,r20
 8121b5c:	a80b883a 	mov	r5,r21
 8121b60:	900d883a 	mov	r6,r18
 8121b64:	980f883a 	mov	r7,r19
 8121b68:	dd001d15 	stw	r20,116(sp)
 8121b6c:	dc801f15 	stw	r18,124(sp)
 8121b70:	dd401e15 	stw	r21,120(sp)
 8121b74:	dcc02015 	stw	r19,128(sp)
 8121b78:	81237bc0 	call	81237bc <__adddf3>
 8121b7c:	1823883a 	mov	r17,r3
 8121b80:	01102434 	movhi	r4,16528
 8121b84:	213fffc4 	addi	r4,r4,-1
 8121b88:	1021883a 	mov	r16,r2
 8121b8c:	182f883a 	mov	r23,r3
 8121b90:	dc401815 	stw	r17,96(sp)
 8121b94:	100b883a 	mov	r5,r2
 8121b98:	20c02c0e 	bge	r4,r3,8121c4c <__ieee754_pow+0xb44>
 8121b9c:	00afdc34 	movhi	r2,49008
 8121ba0:	1885883a 	add	r2,r3,r2
 8121ba4:	2884b03a 	or	r2,r5,r2
 8121ba8:	1001a626 	beq	r2,zero,8122244 <__ieee754_pow+0x113c>
 8121bac:	04220034 	movhi	r16,34816
 8121bb0:	841d6704 	addi	r16,r16,30108
 8121bb4:	045f8e34 	movhi	r17,32312
 8121bb8:	8c790f04 	addi	r17,r17,-7108
 8121bbc:	d9401a17 	ldw	r5,104(sp)
 8121bc0:	d9001917 	ldw	r4,100(sp)
 8121bc4:	800d883a 	mov	r6,r16
 8121bc8:	880f883a 	mov	r7,r17
 8121bcc:	81238300 	call	8123830 <__muldf3>
 8121bd0:	180b883a 	mov	r5,r3
 8121bd4:	800d883a 	mov	r6,r16
 8121bd8:	880f883a 	mov	r7,r17
 8121bdc:	1009883a 	mov	r4,r2
 8121be0:	81238300 	call	8123830 <__muldf3>
 8121be4:	003dc306 	br	81212f4 <__ieee754_pow+0x1ec>
 8121be8:	00b00434 	movhi	r2,49168
 8121bec:	9085883a 	add	r2,r18,r2
 8121bf0:	e084b03a 	or	r2,fp,r2
 8121bf4:	1000af1e 	bne	r2,zero,8121eb4 <__ieee754_pow+0xdac>
 8121bf8:	480f883a 	mov	r7,r9
 8121bfc:	4009883a 	mov	r4,r8
 8121c00:	480b883a 	mov	r5,r9
 8121c04:	400d883a 	mov	r6,r8
 8121c08:	003db406 	br	81212dc <__ieee754_pow+0x1d4>
 8121c0c:	00bffc34 	movhi	r2,65520
 8121c10:	18ff0084 	addi	r3,r3,-1022
 8121c14:	a0a9883a 	add	r20,r20,r2
 8121c18:	d8c00015 	stw	r3,0(sp)
 8121c1c:	0009883a 	mov	r4,zero
 8121c20:	04000234 	movhi	r16,8
 8121c24:	003e1406 	br	8121478 <__ieee754_pow+0x370>
 8121c28:	a80f883a 	mov	r7,r21
 8121c2c:	a009883a 	mov	r4,r20
 8121c30:	a80b883a 	mov	r5,r21
 8121c34:	a00d883a 	mov	r6,r20
 8121c38:	81238300 	call	8123830 <__muldf3>
 8121c3c:	180b883a 	mov	r5,r3
 8121c40:	d8802815 	stw	r2,160(sp)
 8121c44:	d9402915 	stw	r5,164(sp)
 8121c48:	003d5606 	br	81211a4 <__ieee754_pow+0x9c>
 8121c4c:	d9001817 	ldw	r4,96(sp)
 8121c50:	00a00034 	movhi	r2,32768
 8121c54:	10bfffc4 	addi	r2,r2,-1
 8121c58:	00d02474 	movhi	r3,16529
 8121c5c:	18f2ffc4 	addi	r3,r3,-13313
 8121c60:	20b8703a 	and	fp,r4,r2
 8121c64:	1f009d0e 	bge	r3,fp,8121edc <__ieee754_pow+0xdd4>
 8121c68:	008fdbf4 	movhi	r2,16239
 8121c6c:	108d0004 	addi	r2,r2,13312
 8121c70:	2085883a 	add	r2,r4,r2
 8121c74:	1144b03a 	or	r2,r2,r5
 8121c78:	1001c626 	beq	r2,zero,8122394 <__ieee754_pow+0x128c>
 8121c7c:	0430be74 	movhi	r16,49913
 8121c80:	843cd644 	addi	r16,r16,-3239
 8121c84:	04406974 	movhi	r17,421
 8121c88:	8c5b87c4 	addi	r17,r17,28191
 8121c8c:	003fcb06 	br	8121bbc <__ieee754_pow+0xab4>
 8121c90:	0005883a 	mov	r2,zero
 8121c94:	00cffc34 	movhi	r3,16368
 8121c98:	d8801915 	stw	r2,100(sp)
 8121c9c:	d8c01a15 	stw	r3,104(sp)
 8121ca0:	003f8c06 	br	8121ad4 <__ieee754_pow+0x9cc>
 8121ca4:	0005883a 	mov	r2,zero
 8121ca8:	00cffc34 	movhi	r3,16368
 8121cac:	180b883a 	mov	r5,r3
 8121cb0:	580f883a 	mov	r7,r11
 8121cb4:	1009883a 	mov	r4,r2
 8121cb8:	500d883a 	mov	r6,r10
 8121cbc:	8123bf40 	call	8123bf4 <__divdf3>
 8121cc0:	1011883a 	mov	r8,r2
 8121cc4:	1813883a 	mov	r9,r3
 8121cc8:	003d9506 	br	8121320 <__ieee754_pow+0x218>
 8121ccc:	008ffc34 	movhi	r2,16368
 8121cd0:	10bfff84 	addi	r2,r2,-2
 8121cd4:	14bdbb0e 	bge	r2,r18,81213c4 <__ieee754_pow+0x2bc>
 8121cd8:	008ffc34 	movhi	r2,16368
 8121cdc:	14bdae16 	blt	r2,r18,8121398 <__ieee754_pow+0x290>
 8121ce0:	580b883a 	mov	r5,r11
 8121ce4:	5009883a 	mov	r4,r10
 8121ce8:	000d883a 	mov	r6,zero
 8121cec:	100f883a 	mov	r7,r2
 8121cf0:	812373c0 	call	812373c <__subdf3>
 8121cf4:	1021883a 	mov	r16,r2
 8121cf8:	1823883a 	mov	r17,r3
 8121cfc:	00980034 	movhi	r2,24576
 8121d00:	00cffdf4 	movhi	r3,16375
 8121d04:	18c551c4 	addi	r3,r3,5447
 8121d08:	8009883a 	mov	r4,r16
 8121d0c:	880b883a 	mov	r5,r17
 8121d10:	180f883a 	mov	r7,r3
 8121d14:	100d883a 	mov	r6,r2
 8121d18:	81238300 	call	8123830 <__muldf3>
 8121d1c:	023e17b4 	movhi	r8,63582
 8121d20:	4237d104 	addi	r8,r8,-8380
 8121d24:	024f9574 	movhi	r9,15957
 8121d28:	4a6b82c4 	addi	r9,r9,-20981
 8121d2c:	480f883a 	mov	r7,r9
 8121d30:	400d883a 	mov	r6,r8
 8121d34:	8009883a 	mov	r4,r16
 8121d38:	880b883a 	mov	r5,r17
 8121d3c:	102d883a 	mov	r22,r2
 8121d40:	182f883a 	mov	r23,r3
 8121d44:	81238300 	call	8123830 <__muldf3>
 8121d48:	8009883a 	mov	r4,r16
 8121d4c:	880b883a 	mov	r5,r17
 8121d50:	800d883a 	mov	r6,r16
 8121d54:	880f883a 	mov	r7,r17
 8121d58:	d8802a15 	stw	r2,168(sp)
 8121d5c:	d8c02b15 	stw	r3,172(sp)
 8121d60:	81238300 	call	8123830 <__muldf3>
 8121d64:	0011883a 	mov	r8,zero
 8121d68:	026ff434 	movhi	r9,49104
 8121d6c:	480f883a 	mov	r7,r9
 8121d70:	8009883a 	mov	r4,r16
 8121d74:	880b883a 	mov	r5,r17
 8121d78:	400d883a 	mov	r6,r8
 8121d7c:	1029883a 	mov	r20,r2
 8121d80:	182b883a 	mov	r21,r3
 8121d84:	81238300 	call	8123830 <__muldf3>
 8121d88:	02155574 	movhi	r8,21845
 8121d8c:	42155544 	addi	r8,r8,21845
 8121d90:	024ff574 	movhi	r9,16341
 8121d94:	4a555544 	addi	r9,r9,21845
 8121d98:	480f883a 	mov	r7,r9
 8121d9c:	400d883a 	mov	r6,r8
 8121da0:	180b883a 	mov	r5,r3
 8121da4:	1009883a 	mov	r4,r2
 8121da8:	81237bc0 	call	81237bc <__adddf3>
 8121dac:	180f883a 	mov	r7,r3
 8121db0:	8009883a 	mov	r4,r16
 8121db4:	880b883a 	mov	r5,r17
 8121db8:	100d883a 	mov	r6,r2
 8121dbc:	81238300 	call	8123830 <__muldf3>
 8121dc0:	0011883a 	mov	r8,zero
 8121dc4:	024ff834 	movhi	r9,16352
 8121dc8:	480b883a 	mov	r5,r9
 8121dcc:	4009883a 	mov	r4,r8
 8121dd0:	180f883a 	mov	r7,r3
 8121dd4:	100d883a 	mov	r6,r2
 8121dd8:	812373c0 	call	812373c <__subdf3>
 8121ddc:	180f883a 	mov	r7,r3
 8121de0:	a80b883a 	mov	r5,r21
 8121de4:	a009883a 	mov	r4,r20
 8121de8:	100d883a 	mov	r6,r2
 8121dec:	81238300 	call	8123830 <__muldf3>
 8121df0:	02194b34 	movhi	r8,25900
 8121df4:	4220bf84 	addi	r8,r8,-32002
 8121df8:	026ffdf4 	movhi	r9,49143
 8121dfc:	4a4551c4 	addi	r9,r9,5447
 8121e00:	480f883a 	mov	r7,r9
 8121e04:	400d883a 	mov	r6,r8
 8121e08:	180b883a 	mov	r5,r3
 8121e0c:	1009883a 	mov	r4,r2
 8121e10:	81238300 	call	8123830 <__muldf3>
 8121e14:	d9402b17 	ldw	r5,172(sp)
 8121e18:	d9002a17 	ldw	r4,168(sp)
 8121e1c:	180f883a 	mov	r7,r3
 8121e20:	100d883a 	mov	r6,r2
 8121e24:	81237bc0 	call	81237bc <__adddf3>
 8121e28:	100d883a 	mov	r6,r2
 8121e2c:	b009883a 	mov	r4,r22
 8121e30:	b80b883a 	mov	r5,r23
 8121e34:	180f883a 	mov	r7,r3
 8121e38:	1021883a 	mov	r16,r2
 8121e3c:	1823883a 	mov	r17,r3
 8121e40:	81237bc0 	call	81237bc <__adddf3>
 8121e44:	180b883a 	mov	r5,r3
 8121e48:	0009883a 	mov	r4,zero
 8121e4c:	b00d883a 	mov	r6,r22
 8121e50:	b80f883a 	mov	r7,r23
 8121e54:	d9001b15 	stw	r4,108(sp)
 8121e58:	d8c01c15 	stw	r3,112(sp)
 8121e5c:	812373c0 	call	812373c <__subdf3>
 8121e60:	1011883a 	mov	r8,r2
 8121e64:	1813883a 	mov	r9,r3
 8121e68:	8009883a 	mov	r4,r16
 8121e6c:	880b883a 	mov	r5,r17
 8121e70:	003f0b06 	br	8121aa0 <__ieee754_pow+0x998>
 8121e74:	0005883a 	mov	r2,zero
 8121e78:	00d0d034 	movhi	r3,17216
 8121e7c:	580b883a 	mov	r5,r11
 8121e80:	5009883a 	mov	r4,r10
 8121e84:	180f883a 	mov	r7,r3
 8121e88:	100d883a 	mov	r6,r2
 8121e8c:	81238300 	call	8123830 <__muldf3>
 8121e90:	1015883a 	mov	r10,r2
 8121e94:	1825883a 	mov	r18,r3
 8121e98:	017ff2c4 	movi	r5,-53
 8121e9c:	003d6606 	br	8121438 <__ieee754_pow+0x330>
 8121ea0:	b03d300e 	bge	r22,zero,8121364 <__ieee754_pow+0x25c>
 8121ea4:	d9402917 	ldw	r5,164(sp)
 8121ea8:	28e0003c 	xorhi	r3,r5,32768
 8121eac:	d8c02915 	stw	r3,164(sp)
 8121eb0:	003cbc06 	br	81211a4 <__ieee754_pow+0x9c>
 8121eb4:	00800044 	movi	r2,1
 8121eb8:	e0bd1a1e 	bne	fp,r2,8121324 <__ieee754_pow+0x21c>
 8121ebc:	48e0003c 	xorhi	r3,r9,32768
 8121ec0:	da002815 	stw	r8,160(sp)
 8121ec4:	d8c02915 	stw	r3,164(sp)
 8121ec8:	003cb606 	br	81211a4 <__ieee754_pow+0x9c>
 8121ecc:	d9001817 	ldw	r4,96(sp)
 8121ed0:	00a00034 	movhi	r2,32768
 8121ed4:	10bfffc4 	addi	r2,r2,-1
 8121ed8:	20b8703a 	and	fp,r4,r2
 8121edc:	008ff834 	movhi	r2,16352
 8121ee0:	1700fc16 	blt	r2,fp,81222d4 <__ieee754_pow+0x11cc>
 8121ee4:	0039883a 	mov	fp,zero
 8121ee8:	d8001315 	stw	zero,76(sp)
 8121eec:	0025883a 	mov	r18,zero
 8121ef0:	0005883a 	mov	r2,zero
 8121ef4:	00cff9b4 	movhi	r3,16358
 8121ef8:	18cb90c4 	addi	r3,r3,11843
 8121efc:	9009883a 	mov	r4,r18
 8121f00:	b80b883a 	mov	r5,r23
 8121f04:	180f883a 	mov	r7,r3
 8121f08:	100d883a 	mov	r6,r2
 8121f0c:	81238300 	call	8123830 <__muldf3>
 8121f10:	d9c02017 	ldw	r7,128(sp)
 8121f14:	d9801f17 	ldw	r6,124(sp)
 8121f18:	9009883a 	mov	r4,r18
 8121f1c:	b80b883a 	mov	r5,r23
 8121f20:	b823883a 	mov	r17,r23
 8121f24:	102d883a 	mov	r22,r2
 8121f28:	182f883a 	mov	r23,r3
 8121f2c:	812373c0 	call	812373c <__subdf3>
 8121f30:	d9401e17 	ldw	r5,120(sp)
 8121f34:	d9001d17 	ldw	r4,116(sp)
 8121f38:	180f883a 	mov	r7,r3
 8121f3c:	100d883a 	mov	r6,r2
 8121f40:	812373c0 	call	812373c <__subdf3>
 8121f44:	023fbeb4 	movhi	r8,65274
 8121f48:	420e7bc4 	addi	r8,r8,14831
 8121f4c:	024ff9b4 	movhi	r9,16358
 8121f50:	4a4b9084 	addi	r9,r9,11842
 8121f54:	480f883a 	mov	r7,r9
 8121f58:	400d883a 	mov	r6,r8
 8121f5c:	180b883a 	mov	r5,r3
 8121f60:	1009883a 	mov	r4,r2
 8121f64:	81238300 	call	8123830 <__muldf3>
 8121f68:	02032a34 	movhi	r8,3240
 8121f6c:	421b0e44 	addi	r8,r8,27705
 8121f70:	026f8834 	movhi	r9,48672
 8121f74:	4a571844 	addi	r9,r9,23649
 8121f78:	480f883a 	mov	r7,r9
 8121f7c:	400d883a 	mov	r6,r8
 8121f80:	9009883a 	mov	r4,r18
 8121f84:	880b883a 	mov	r5,r17
 8121f88:	1021883a 	mov	r16,r2
 8121f8c:	1823883a 	mov	r17,r3
 8121f90:	81238300 	call	8123830 <__muldf3>
 8121f94:	180f883a 	mov	r7,r3
 8121f98:	880b883a 	mov	r5,r17
 8121f9c:	8009883a 	mov	r4,r16
 8121fa0:	100d883a 	mov	r6,r2
 8121fa4:	81237bc0 	call	81237bc <__adddf3>
 8121fa8:	100d883a 	mov	r6,r2
 8121fac:	b009883a 	mov	r4,r22
 8121fb0:	b80b883a 	mov	r5,r23
 8121fb4:	180f883a 	mov	r7,r3
 8121fb8:	1021883a 	mov	r16,r2
 8121fbc:	1823883a 	mov	r17,r3
 8121fc0:	81237bc0 	call	81237bc <__adddf3>
 8121fc4:	1009883a 	mov	r4,r2
 8121fc8:	180b883a 	mov	r5,r3
 8121fcc:	b00d883a 	mov	r6,r22
 8121fd0:	b80f883a 	mov	r7,r23
 8121fd4:	d8803915 	stw	r2,228(sp)
 8121fd8:	d8c03a15 	stw	r3,232(sp)
 8121fdc:	d8801115 	stw	r2,68(sp)
 8121fe0:	d8c01215 	stw	r3,72(sp)
 8121fe4:	812373c0 	call	812373c <__subdf3>
 8121fe8:	180f883a 	mov	r7,r3
 8121fec:	8009883a 	mov	r4,r16
 8121ff0:	880b883a 	mov	r5,r17
 8121ff4:	100d883a 	mov	r6,r2
 8121ff8:	812373c0 	call	812373c <__subdf3>
 8121ffc:	d9001117 	ldw	r4,68(sp)
 8122000:	d9403a17 	ldw	r5,232(sp)
 8122004:	1029883a 	mov	r20,r2
 8122008:	200d883a 	mov	r6,r4
 812200c:	280f883a 	mov	r7,r5
 8122010:	182b883a 	mov	r21,r3
 8122014:	81238300 	call	8123830 <__muldf3>
 8122018:	1021883a 	mov	r16,r2
 812201c:	1823883a 	mov	r17,r3
 8122020:	009caff4 	movhi	r2,29375
 8122024:	10a93404 	addi	r2,r2,-23344
 8122028:	00cf99b4 	movhi	r3,15974
 812202c:	18cdda44 	addi	r3,r3,14185
 8122030:	8009883a 	mov	r4,r16
 8122034:	880b883a 	mov	r5,r17
 8122038:	180f883a 	mov	r7,r3
 812203c:	100d883a 	mov	r6,r2
 8122040:	81238300 	call	8123830 <__muldf3>
 8122044:	023174b4 	movhi	r8,50642
 8122048:	421afc44 	addi	r8,r8,27633
 812204c:	024faf34 	movhi	r9,16060
 8122050:	4a6f5044 	addi	r9,r9,-17087
 8122054:	480f883a 	mov	r7,r9
 8122058:	400d883a 	mov	r6,r8
 812205c:	180b883a 	mov	r5,r3
 8122060:	1009883a 	mov	r4,r2
 8122064:	812373c0 	call	812373c <__subdf3>
 8122068:	180f883a 	mov	r7,r3
 812206c:	8009883a 	mov	r4,r16
 8122070:	880b883a 	mov	r5,r17
 8122074:	100d883a 	mov	r6,r2
 8122078:	81238300 	call	8123830 <__muldf3>
 812207c:	022bc9b4 	movhi	r8,44838
 8122080:	42378b04 	addi	r8,r8,-8660
 8122084:	024fc474 	movhi	r9,16145
 8122088:	4a559a84 	addi	r9,r9,22122
 812208c:	480f883a 	mov	r7,r9
 8122090:	400d883a 	mov	r6,r8
 8122094:	180b883a 	mov	r5,r3
 8122098:	1009883a 	mov	r4,r2
 812209c:	81237bc0 	call	81237bc <__adddf3>
 81220a0:	180f883a 	mov	r7,r3
 81220a4:	8009883a 	mov	r4,r16
 81220a8:	880b883a 	mov	r5,r17
 81220ac:	100d883a 	mov	r6,r2
 81220b0:	81238300 	call	8123830 <__muldf3>
 81220b4:	0205aff4 	movhi	r8,5823
 81220b8:	422f64c4 	addi	r8,r8,-17005
 81220bc:	024fd9f4 	movhi	r9,16231
 81220c0:	4a705b04 	addi	r9,r9,-16020
 81220c4:	480f883a 	mov	r7,r9
 81220c8:	400d883a 	mov	r6,r8
 81220cc:	180b883a 	mov	r5,r3
 81220d0:	1009883a 	mov	r4,r2
 81220d4:	812373c0 	call	812373c <__subdf3>
 81220d8:	180f883a 	mov	r7,r3
 81220dc:	8009883a 	mov	r4,r16
 81220e0:	880b883a 	mov	r5,r17
 81220e4:	100d883a 	mov	r6,r2
 81220e8:	81238300 	call	8123830 <__muldf3>
 81220ec:	02155574 	movhi	r8,21845
 81220f0:	42154f84 	addi	r8,r8,21822
 81220f4:	024ff174 	movhi	r9,16325
 81220f8:	4a555544 	addi	r9,r9,21845
 81220fc:	480f883a 	mov	r7,r9
 8122100:	400d883a 	mov	r6,r8
 8122104:	180b883a 	mov	r5,r3
 8122108:	1009883a 	mov	r4,r2
 812210c:	81237bc0 	call	81237bc <__adddf3>
 8122110:	180f883a 	mov	r7,r3
 8122114:	8009883a 	mov	r4,r16
 8122118:	880b883a 	mov	r5,r17
 812211c:	100d883a 	mov	r6,r2
 8122120:	81238300 	call	8123830 <__muldf3>
 8122124:	d9001117 	ldw	r4,68(sp)
 8122128:	d9403a17 	ldw	r5,232(sp)
 812212c:	180f883a 	mov	r7,r3
 8122130:	100d883a 	mov	r6,r2
 8122134:	812373c0 	call	812373c <__subdf3>
 8122138:	d9001117 	ldw	r4,68(sp)
 812213c:	d9403a17 	ldw	r5,232(sp)
 8122140:	100d883a 	mov	r6,r2
 8122144:	180f883a 	mov	r7,r3
 8122148:	1021883a 	mov	r16,r2
 812214c:	1823883a 	mov	r17,r3
 8122150:	81238300 	call	8123830 <__muldf3>
 8122154:	0011883a 	mov	r8,zero
 8122158:	02500034 	movhi	r9,16384
 812215c:	480f883a 	mov	r7,r9
 8122160:	400d883a 	mov	r6,r8
 8122164:	8009883a 	mov	r4,r16
 8122168:	880b883a 	mov	r5,r17
 812216c:	1021883a 	mov	r16,r2
 8122170:	1823883a 	mov	r17,r3
 8122174:	812373c0 	call	812373c <__subdf3>
 8122178:	180f883a 	mov	r7,r3
 812217c:	880b883a 	mov	r5,r17
 8122180:	8009883a 	mov	r4,r16
 8122184:	100d883a 	mov	r6,r2
 8122188:	8123bf40 	call	8123bf4 <__divdf3>
 812218c:	d9001117 	ldw	r4,68(sp)
 8122190:	d9403a17 	ldw	r5,232(sp)
 8122194:	a00d883a 	mov	r6,r20
 8122198:	a80f883a 	mov	r7,r21
 812219c:	1025883a 	mov	r18,r2
 81221a0:	1827883a 	mov	r19,r3
 81221a4:	81238300 	call	8123830 <__muldf3>
 81221a8:	180f883a 	mov	r7,r3
 81221ac:	a009883a 	mov	r4,r20
 81221b0:	a80b883a 	mov	r5,r21
 81221b4:	100d883a 	mov	r6,r2
 81221b8:	81237bc0 	call	81237bc <__adddf3>
 81221bc:	180f883a 	mov	r7,r3
 81221c0:	980b883a 	mov	r5,r19
 81221c4:	9009883a 	mov	r4,r18
 81221c8:	100d883a 	mov	r6,r2
 81221cc:	812373c0 	call	812373c <__subdf3>
 81221d0:	d9801117 	ldw	r6,68(sp)
 81221d4:	d9c03a17 	ldw	r7,232(sp)
 81221d8:	180b883a 	mov	r5,r3
 81221dc:	1009883a 	mov	r4,r2
 81221e0:	812373c0 	call	812373c <__subdf3>
 81221e4:	0011883a 	mov	r8,zero
 81221e8:	024ffc34 	movhi	r9,16368
 81221ec:	480b883a 	mov	r5,r9
 81221f0:	180f883a 	mov	r7,r3
 81221f4:	4009883a 	mov	r4,r8
 81221f8:	100d883a 	mov	r6,r2
 81221fc:	812373c0 	call	812373c <__subdf3>
 8122200:	100b883a 	mov	r5,r2
 8122204:	d8801317 	ldw	r2,76(sp)
 8122208:	10d5883a 	add	r10,r2,r3
 812220c:	5005d53a 	srai	r2,r10,20
 8122210:	0080720e 	bge	zero,r2,81223dc <__ieee754_pow+0x12d4>
 8122214:	2811883a 	mov	r8,r5
 8122218:	5013883a 	mov	r9,r10
 812221c:	d9c01a17 	ldw	r7,104(sp)
 8122220:	d9801917 	ldw	r6,100(sp)
 8122224:	480b883a 	mov	r5,r9
 8122228:	4009883a 	mov	r4,r8
 812222c:	003e8206 	br	8121c38 <__ieee754_pow+0xb30>
 8122230:	0009883a 	mov	r4,zero
 8122234:	800b883a 	mov	r5,r16
 8122238:	a80f883a 	mov	r7,r21
 812223c:	a00d883a 	mov	r6,r20
 8122240:	003c2b06 	br	81212f0 <__ieee754_pow+0x1e8>
 8122244:	d9001d17 	ldw	r4,116(sp)
 8122248:	00994b34 	movhi	r2,25900
 812224c:	10a0bf84 	addi	r2,r2,-32002
 8122250:	00cf25f4 	movhi	r3,15511
 8122254:	18c551c4 	addi	r3,r3,5447
 8122258:	a80b883a 	mov	r5,r21
 812225c:	180f883a 	mov	r7,r3
 8122260:	100d883a 	mov	r6,r2
 8122264:	81237bc0 	call	81237bc <__adddf3>
 8122268:	d9801f17 	ldw	r6,124(sp)
 812226c:	880b883a 	mov	r5,r17
 8122270:	8009883a 	mov	r4,r16
 8122274:	980f883a 	mov	r7,r19
 8122278:	1021883a 	mov	r16,r2
 812227c:	1823883a 	mov	r17,r3
 8122280:	812373c0 	call	812373c <__subdf3>
 8122284:	180f883a 	mov	r7,r3
 8122288:	880b883a 	mov	r5,r17
 812228c:	8009883a 	mov	r4,r16
 8122290:	100d883a 	mov	r6,r2
 8122294:	8123f5c0 	call	8123f5c <__gtdf2>
 8122298:	00bf0c0e 	bge	zero,r2,8121ecc <__ieee754_pow+0xdc4>
 812229c:	04220034 	movhi	r16,34816
 81222a0:	841d6704 	addi	r16,r16,30108
 81222a4:	045f8e34 	movhi	r17,32312
 81222a8:	8c790f04 	addi	r17,r17,-7108
 81222ac:	d9401a17 	ldw	r5,104(sp)
 81222b0:	d9001917 	ldw	r4,100(sp)
 81222b4:	800d883a 	mov	r6,r16
 81222b8:	880f883a 	mov	r7,r17
 81222bc:	81238300 	call	8123830 <__muldf3>
 81222c0:	180b883a 	mov	r5,r3
 81222c4:	800d883a 	mov	r6,r16
 81222c8:	880f883a 	mov	r7,r17
 81222cc:	1009883a 	mov	r4,r2
 81222d0:	003e5906 	br	8121c38 <__ieee754_pow+0xb30>
 81222d4:	e005d53a 	srai	r2,fp,20
 81222d8:	01800434 	movhi	r6,16
 81222dc:	d9401817 	ldw	r5,96(sp)
 81222e0:	10bf0084 	addi	r2,r2,-1022
 81222e4:	308dd83a 	sra	r6,r6,r2
 81222e8:	02000434 	movhi	r8,16
 81222ec:	423fffc4 	addi	r8,r8,-1
 81222f0:	0005883a 	mov	r2,zero
 81222f4:	298d883a 	add	r6,r5,r6
 81222f8:	318b883a 	add	r5,r6,r6
 81222fc:	320e703a 	and	r7,r6,r8
 8122300:	1013883a 	mov	r9,r2
 8122304:	280ad57a 	srli	r5,r5,21
 8122308:	d8801817 	ldw	r2,96(sp)
 812230c:	01000504 	movi	r4,20
 8122310:	297f0044 	addi	r5,r5,-1023
 8122314:	4151d83a 	sra	r8,r8,r5
 8122318:	39c00434 	orhi	r7,r7,16
 812231c:	2149c83a 	sub	r4,r4,r5
 8122320:	0210303a 	nor	r8,zero,r8
 8122324:	3939d83a 	sra	fp,r7,r4
 8122328:	320e703a 	and	r7,r6,r8
 812232c:	10002916 	blt	r2,zero,81223d4 <__ieee754_pow+0x12cc>
 8122330:	d9402017 	ldw	r5,128(sp)
 8122334:	d9001f17 	ldw	r4,124(sp)
 8122338:	480d883a 	mov	r6,r9
 812233c:	812373c0 	call	812373c <__subdf3>
 8122340:	180b883a 	mov	r5,r3
 8122344:	d9402015 	stw	r5,128(sp)
 8122348:	280f883a 	mov	r7,r5
 812234c:	d9001d17 	ldw	r4,116(sp)
 8122350:	d9401e17 	ldw	r5,120(sp)
 8122354:	1007883a 	mov	r3,r2
 8122358:	180d883a 	mov	r6,r3
 812235c:	d8801f15 	stw	r2,124(sp)
 8122360:	81237bc0 	call	81237bc <__adddf3>
 8122364:	180b883a 	mov	r5,r3
 8122368:	e006953a 	slli	r3,fp,20
 812236c:	282f883a 	mov	r23,r5
 8122370:	d8c01315 	stw	r3,76(sp)
 8122374:	003edd06 	br	8121eec <__ieee754_pow+0xde4>
 8122378:	383bc81e 	bne	r7,zero,812129c <__ieee754_pow+0x194>
 812237c:	28c5c83a 	sub	r2,r5,r3
 8122380:	8087d83a 	sra	r3,r16,r2
 8122384:	1884983a 	sll	r2,r3,r2
 8122388:	80801b26 	beq	r16,r2,81223f8 <__ieee754_pow+0x12f0>
 812238c:	0039883a 	mov	fp,zero
 8122390:	003b9d06 	br	8121208 <__ieee754_pow+0x100>
 8122394:	d9801f17 	ldw	r6,124(sp)
 8122398:	8009883a 	mov	r4,r16
 812239c:	880b883a 	mov	r5,r17
 81223a0:	980f883a 	mov	r7,r19
 81223a4:	812373c0 	call	812373c <__subdf3>
 81223a8:	d9001d17 	ldw	r4,116(sp)
 81223ac:	a80b883a 	mov	r5,r21
 81223b0:	180f883a 	mov	r7,r3
 81223b4:	100d883a 	mov	r6,r2
 81223b8:	812406c0 	call	812406c <__ledf2>
 81223bc:	00bfc516 	blt	zero,r2,81222d4 <__ieee754_pow+0x11cc>
 81223c0:	0430be74 	movhi	r16,49913
 81223c4:	843cd644 	addi	r16,r16,-3239
 81223c8:	04406974 	movhi	r17,421
 81223cc:	8c5b87c4 	addi	r17,r17,28191
 81223d0:	003fb606 	br	81222ac <__ieee754_pow+0x11a4>
 81223d4:	0739c83a 	sub	fp,zero,fp
 81223d8:	003fd506 	br	8122330 <__ieee754_pow+0x1228>
 81223dc:	2809883a 	mov	r4,r5
 81223e0:	e00d883a 	mov	r6,fp
 81223e4:	180b883a 	mov	r5,r3
 81223e8:	812295c0 	call	812295c <scalbn>
 81223ec:	1011883a 	mov	r8,r2
 81223f0:	1813883a 	mov	r9,r3
 81223f4:	003f8906 	br	812221c <__ieee754_pow+0x1114>
 81223f8:	18c0004c 	andi	r3,r3,1
 81223fc:	00800084 	movi	r2,2
 8122400:	10f9c83a 	sub	fp,r2,r3
 8122404:	003b8006 	br	8121208 <__ieee754_pow+0x100>

08122408 <__ieee754_sqrt>:
 8122408:	defffd04 	addi	sp,sp,-12
 812240c:	dc000015 	stw	r16,0(sp)
 8122410:	009ffc34 	movhi	r2,32752
 8122414:	2021883a 	mov	r16,r4
 8122418:	291ffc2c 	andhi	r4,r5,32752
 812241c:	dc400115 	stw	r17,4(sp)
 8122420:	dfc00215 	stw	ra,8(sp)
 8122424:	2823883a 	mov	r17,r5
 8122428:	280f883a 	mov	r7,r5
 812242c:	2807883a 	mov	r3,r5
 8122430:	8011883a 	mov	r8,r16
 8122434:	20807d26 	beq	r4,r2,812262c <__ieee754_sqrt+0x224>
 8122438:	01408d0e 	bge	zero,r5,8122670 <__ieee754_sqrt+0x268>
 812243c:	380dd53a 	srai	r6,r7,20
 8122440:	3000131e 	bne	r6,zero,8122490 <__ieee754_sqrt+0x88>
 8122444:	1800041e 	bne	r3,zero,8122458 <__ieee754_sqrt+0x50>
 8122448:	400ed2fa 	srli	r7,r8,11
 812244c:	31bffac4 	addi	r6,r6,-21
 8122450:	4010957a 	slli	r8,r8,21
 8122454:	383ffc26 	beq	r7,zero,8122448 <__ieee754_sqrt+0x40>
 8122458:	3880042c 	andhi	r2,r7,16
 812245c:	1000991e 	bne	r2,zero,81226c4 <__ieee754_sqrt+0x2bc>
 8122460:	0009883a 	mov	r4,zero
 8122464:	39cf883a 	add	r7,r7,r7
 8122468:	3880042c 	andhi	r2,r7,16
 812246c:	21000044 	addi	r4,r4,1
 8122470:	103ffc26 	beq	r2,zero,8122464 <__ieee754_sqrt+0x5c>
 8122474:	00800804 	movi	r2,32
 8122478:	1105c83a 	sub	r2,r2,r4
 812247c:	4086d83a 	srl	r3,r8,r2
 8122480:	4110983a 	sll	r8,r8,r4
 8122484:	3105c83a 	sub	r2,r6,r4
 8122488:	38ceb03a 	or	r7,r7,r3
 812248c:	11800044 	addi	r6,r2,1
 8122490:	31bf0044 	addi	r6,r6,-1023
 8122494:	30c0004c 	andi	r3,r6,1
 8122498:	00800434 	movhi	r2,16
 812249c:	10bfffc4 	addi	r2,r2,-1
 81224a0:	3884703a 	and	r2,r7,r2
 81224a4:	1807003a 	cmpeq	r3,r3,zero
 81224a8:	11000434 	orhi	r4,r2,16
 81224ac:	18005426 	beq	r3,zero,8122600 <__ieee754_sqrt+0x1f8>
 81224b0:	4004d7fa 	srli	r2,r8,31
 81224b4:	4207883a 	add	r3,r8,r8
 81224b8:	02800834 	movhi	r10,32
 81224bc:	1105883a 	add	r2,r2,r4
 81224c0:	2089883a 	add	r4,r4,r2
 81224c4:	0011883a 	mov	r8,zero
 81224c8:	000b883a 	mov	r5,zero
 81224cc:	0013883a 	mov	r9,zero
 81224d0:	02c00584 	movi	r11,22
 81224d4:	520f883a 	add	r7,r10,r8
 81224d8:	1804d7fa 	srli	r2,r3,31
 81224dc:	4a400044 	addi	r9,r9,1
 81224e0:	18c7883a 	add	r3,r3,r3
 81224e4:	21c00316 	blt	r4,r7,81224f4 <__ieee754_sqrt+0xec>
 81224e8:	21c9c83a 	sub	r4,r4,r7
 81224ec:	2a8b883a 	add	r5,r5,r10
 81224f0:	51d1883a 	add	r8,r10,r7
 81224f4:	1105883a 	add	r2,r2,r4
 81224f8:	5014d07a 	srli	r10,r10,1
 81224fc:	2089883a 	add	r4,r4,r2
 8122500:	4afff41e 	bne	r9,r11,81224d4 <__ieee754_sqrt+0xcc>
 8122504:	02600034 	movhi	r9,32768
 8122508:	0017883a 	mov	r11,zero
 812250c:	0019883a 	mov	r12,zero
 8122510:	0015883a 	mov	r10,zero
 8122514:	4821883a 	mov	r16,r9
 8122518:	03c00804 	movi	r15,32
 812251c:	00000806 	br	8122540 <__ieee754_sqrt+0x138>
 8122520:	22003426 	beq	r4,r8,81225f4 <__ieee754_sqrt+0x1ec>
 8122524:	1804d7fa 	srli	r2,r3,31
 8122528:	52800044 	addi	r10,r10,1
 812252c:	18c7883a 	add	r3,r3,r3
 8122530:	1105883a 	add	r2,r2,r4
 8122534:	2089883a 	add	r4,r4,r2
 8122538:	4812d07a 	srli	r9,r9,1
 812253c:	53c01326 	beq	r10,r15,812258c <__ieee754_sqrt+0x184>
 8122540:	4acf883a 	add	r7,r9,r11
 8122544:	413ff60e 	bge	r8,r4,8122520 <__ieee754_sqrt+0x118>
 8122548:	38a0002c 	andhi	r2,r7,32768
 812254c:	3a57883a 	add	r11,r7,r9
 8122550:	14002426 	beq	r2,r16,81225e4 <__ieee754_sqrt+0x1dc>
 8122554:	4005883a 	mov	r2,r8
 8122558:	2209c83a 	sub	r4,r4,r8
 812255c:	19c0012e 	bgeu	r3,r7,8122564 <__ieee754_sqrt+0x15c>
 8122560:	213fffc4 	addi	r4,r4,-1
 8122564:	19c7c83a 	sub	r3,r3,r7
 8122568:	1011883a 	mov	r8,r2
 812256c:	1804d7fa 	srli	r2,r3,31
 8122570:	52800044 	addi	r10,r10,1
 8122574:	6259883a 	add	r12,r12,r9
 8122578:	1105883a 	add	r2,r2,r4
 812257c:	18c7883a 	add	r3,r3,r3
 8122580:	2089883a 	add	r4,r4,r2
 8122584:	4812d07a 	srli	r9,r9,1
 8122588:	53ffed1e 	bne	r10,r15,8122540 <__ieee754_sqrt+0x138>
 812258c:	20c4b03a 	or	r2,r4,r3
 8122590:	1000201e 	bne	r2,zero,8122614 <__ieee754_sqrt+0x20c>
 8122594:	600ed07a 	srli	r7,r12,1
 8122598:	2880004c 	andi	r2,r5,1
 812259c:	1005003a 	cmpeq	r2,r2,zero
 81225a0:	1000011e 	bne	r2,zero,81225a8 <__ieee754_sqrt+0x1a0>
 81225a4:	39e00034 	orhi	r7,r7,32768
 81225a8:	300dd07a 	srai	r6,r6,1
 81225ac:	280bd07a 	srai	r5,r5,1
 81225b0:	010ff834 	movhi	r4,16352
 81225b4:	300c953a 	slli	r6,r6,20
 81225b8:	290b883a 	add	r5,r5,r4
 81225bc:	3821883a 	mov	r16,r7
 81225c0:	299d883a 	add	r14,r5,r6
 81225c4:	7023883a 	mov	r17,r14
 81225c8:	8005883a 	mov	r2,r16
 81225cc:	8807883a 	mov	r3,r17
 81225d0:	dfc00217 	ldw	ra,8(sp)
 81225d4:	dc400117 	ldw	r17,4(sp)
 81225d8:	dc000017 	ldw	r16,0(sp)
 81225dc:	dec00304 	addi	sp,sp,12
 81225e0:	f800283a 	ret
 81225e4:	5884703a 	and	r2,r11,r2
 81225e8:	103fda1e 	bne	r2,zero,8122554 <__ieee754_sqrt+0x14c>
 81225ec:	40800044 	addi	r2,r8,1
 81225f0:	003fd906 	br	8122558 <__ieee754_sqrt+0x150>
 81225f4:	19ffd42e 	bgeu	r3,r7,8122548 <__ieee754_sqrt+0x140>
 81225f8:	2011883a 	mov	r8,r4
 81225fc:	003fc906 	br	8122524 <__ieee754_sqrt+0x11c>
 8122600:	4004d7fa 	srli	r2,r8,31
 8122604:	4211883a 	add	r8,r8,r8
 8122608:	1105883a 	add	r2,r2,r4
 812260c:	2089883a 	add	r4,r4,r2
 8122610:	003fa706 	br	81224b0 <__ieee754_sqrt+0xa8>
 8122614:	00bfffc4 	movi	r2,-1
 8122618:	60802726 	beq	r12,r2,81226b8 <__ieee754_sqrt+0x2b0>
 812261c:	6080004c 	andi	r2,r12,1
 8122620:	6085883a 	add	r2,r12,r2
 8122624:	100ed07a 	srli	r7,r2,1
 8122628:	003fdb06 	br	8122598 <__ieee754_sqrt+0x190>
 812262c:	8009883a 	mov	r4,r16
 8122630:	800d883a 	mov	r6,r16
 8122634:	81238300 	call	8123830 <__muldf3>
 8122638:	180f883a 	mov	r7,r3
 812263c:	880b883a 	mov	r5,r17
 8122640:	8009883a 	mov	r4,r16
 8122644:	100d883a 	mov	r6,r2
 8122648:	81237bc0 	call	81237bc <__adddf3>
 812264c:	1021883a 	mov	r16,r2
 8122650:	1823883a 	mov	r17,r3
 8122654:	8005883a 	mov	r2,r16
 8122658:	8807883a 	mov	r3,r17
 812265c:	dfc00217 	ldw	ra,8(sp)
 8122660:	dc400117 	ldw	r17,4(sp)
 8122664:	dc000017 	ldw	r16,0(sp)
 8122668:	dec00304 	addi	sp,sp,12
 812266c:	f800283a 	ret
 8122670:	00a00034 	movhi	r2,32768
 8122674:	10bfffc4 	addi	r2,r2,-1
 8122678:	2884703a 	and	r2,r5,r2
 812267c:	8084b03a 	or	r2,r16,r2
 8122680:	103fd126 	beq	r2,zero,81225c8 <__ieee754_sqrt+0x1c0>
 8122684:	283f6d26 	beq	r5,zero,812243c <__ieee754_sqrt+0x34>
 8122688:	280f883a 	mov	r7,r5
 812268c:	8009883a 	mov	r4,r16
 8122690:	800d883a 	mov	r6,r16
 8122694:	812373c0 	call	812373c <__subdf3>
 8122698:	1009883a 	mov	r4,r2
 812269c:	180b883a 	mov	r5,r3
 81226a0:	100d883a 	mov	r6,r2
 81226a4:	180f883a 	mov	r7,r3
 81226a8:	8123bf40 	call	8123bf4 <__divdf3>
 81226ac:	1021883a 	mov	r16,r2
 81226b0:	1823883a 	mov	r17,r3
 81226b4:	003fc406 	br	81225c8 <__ieee754_sqrt+0x1c0>
 81226b8:	29400044 	addi	r5,r5,1
 81226bc:	000f883a 	mov	r7,zero
 81226c0:	003fb506 	br	8122598 <__ieee754_sqrt+0x190>
 81226c4:	0009883a 	mov	r4,zero
 81226c8:	00800804 	movi	r2,32
 81226cc:	003f6b06 	br	812247c <__ieee754_sqrt+0x74>

081226d0 <fabs>:
 81226d0:	01e00034 	movhi	r7,32768
 81226d4:	39ffffc4 	addi	r7,r7,-1
 81226d8:	394e703a 	and	r7,r7,r5
 81226dc:	2005883a 	mov	r2,r4
 81226e0:	3807883a 	mov	r3,r7
 81226e4:	f800283a 	ret

081226e8 <finite>:
 81226e8:	00a00034 	movhi	r2,32768
 81226ec:	10bfffc4 	addi	r2,r2,-1
 81226f0:	2884703a 	and	r2,r5,r2
 81226f4:	01600434 	movhi	r5,32784
 81226f8:	1145883a 	add	r2,r2,r5
 81226fc:	1004d7fa 	srli	r2,r2,31
 8122700:	f800283a 	ret

08122704 <__isnand>:
 8122704:	200d883a 	mov	r6,r4
 8122708:	0109c83a 	sub	r4,zero,r4
 812270c:	2188b03a 	or	r4,r4,r6
 8122710:	2008d7fa 	srli	r4,r4,31
 8122714:	00a00034 	movhi	r2,32768
 8122718:	10bfffc4 	addi	r2,r2,-1
 812271c:	1144703a 	and	r2,r2,r5
 8122720:	2088b03a 	or	r4,r4,r2
 8122724:	009ffc34 	movhi	r2,32752
 8122728:	1105c83a 	sub	r2,r2,r4
 812272c:	1004d7fa 	srli	r2,r2,31
 8122730:	f800283a 	ret

08122734 <matherr>:
 8122734:	0005883a 	mov	r2,zero
 8122738:	f800283a 	ret

0812273c <nan>:
 812273c:	015ffe34 	movhi	r5,32760
 8122740:	0005883a 	mov	r2,zero
 8122744:	2807883a 	mov	r3,r5
 8122748:	f800283a 	ret

0812274c <rint>:
 812274c:	2015883a 	mov	r10,r4
 8122750:	2809d53a 	srai	r4,r5,20
 8122754:	defff904 	addi	sp,sp,-28
 8122758:	034004c4 	movi	r13,19
 812275c:	2101ffcc 	andi	r4,r4,2047
 8122760:	227f0044 	addi	r9,r4,-1023
 8122764:	dc800415 	stw	r18,16(sp)
 8122768:	dfc00615 	stw	ra,24(sp)
 812276c:	dcc00515 	stw	r19,20(sp)
 8122770:	dc400315 	stw	r17,12(sp)
 8122774:	dc000215 	stw	r16,8(sp)
 8122778:	2817883a 	mov	r11,r5
 812277c:	500d883a 	mov	r6,r10
 8122780:	2824d7fa 	srli	r18,r5,31
 8122784:	6a403016 	blt	r13,r9,8122848 <rint+0xfc>
 8122788:	48004916 	blt	r9,zero,81228b0 <rint+0x164>
 812278c:	00800434 	movhi	r2,16
 8122790:	10bfffc4 	addi	r2,r2,-1
 8122794:	1247d83a 	sra	r3,r2,r9
 8122798:	2809883a 	mov	r4,r5
 812279c:	1944703a 	and	r2,r3,r5
 81227a0:	5084b03a 	or	r2,r10,r2
 81227a4:	10001f26 	beq	r2,zero,8122824 <rint+0xd8>
 81227a8:	180ad07a 	srli	r5,r3,1
 81227ac:	5944703a 	and	r2,r11,r5
 81227b0:	5084b03a 	or	r2,r10,r2
 81227b4:	10000626 	beq	r2,zero,81227d0 <rint+0x84>
 81227b8:	4b406626 	beq	r9,r13,8122954 <rint+0x208>
 81227bc:	00c000b4 	movhi	r3,2
 81227c0:	1a47d83a 	sra	r3,r3,r9
 81227c4:	0144303a 	nor	r2,zero,r5
 81227c8:	5884703a 	and	r2,r11,r2
 81227cc:	10c8b03a 	or	r4,r2,r3
 81227d0:	900690fa 	slli	r3,r18,3
 81227d4:	008204f4 	movhi	r2,2067
 81227d8:	10865504 	addi	r2,r2,6484
 81227dc:	200f883a 	mov	r7,r4
 81227e0:	1887883a 	add	r3,r3,r2
 81227e4:	1c000017 	ldw	r16,0(r3)
 81227e8:	1c400117 	ldw	r17,4(r3)
 81227ec:	8009883a 	mov	r4,r16
 81227f0:	880b883a 	mov	r5,r17
 81227f4:	81237bc0 	call	81237bc <__adddf3>
 81227f8:	d8800015 	stw	r2,0(sp)
 81227fc:	d8c00115 	stw	r3,4(sp)
 8122800:	d8800017 	ldw	r2,0(sp)
 8122804:	d8c00117 	ldw	r3,4(sp)
 8122808:	880f883a 	mov	r7,r17
 812280c:	800d883a 	mov	r6,r16
 8122810:	180b883a 	mov	r5,r3
 8122814:	1009883a 	mov	r4,r2
 8122818:	812373c0 	call	812373c <__subdf3>
 812281c:	1015883a 	mov	r10,r2
 8122820:	1817883a 	mov	r11,r3
 8122824:	5005883a 	mov	r2,r10
 8122828:	5807883a 	mov	r3,r11
 812282c:	dfc00617 	ldw	ra,24(sp)
 8122830:	dcc00517 	ldw	r19,20(sp)
 8122834:	dc800417 	ldw	r18,16(sp)
 8122838:	dc400317 	ldw	r17,12(sp)
 812283c:	dc000217 	ldw	r16,8(sp)
 8122840:	dec00704 	addi	sp,sp,28
 8122844:	f800283a 	ret
 8122848:	00800cc4 	movi	r2,51
 812284c:	12400f16 	blt	r2,r9,812288c <rint+0x140>
 8122850:	213efb44 	addi	r4,r4,-1043
 8122854:	00bfffc4 	movi	r2,-1
 8122858:	1104d83a 	srl	r2,r2,r4
 812285c:	5086703a 	and	r3,r10,r2
 8122860:	183ff026 	beq	r3,zero,8122824 <rint+0xd8>
 8122864:	100ad07a 	srli	r5,r2,1
 8122868:	5144703a 	and	r2,r10,r5
 812286c:	10000526 	beq	r2,zero,8122884 <rint+0x138>
 8122870:	00d00034 	movhi	r3,16384
 8122874:	1907d83a 	sra	r3,r3,r4
 8122878:	0144303a 	nor	r2,zero,r5
 812287c:	5084703a 	and	r2,r10,r2
 8122880:	10ccb03a 	or	r6,r2,r3
 8122884:	5809883a 	mov	r4,r11
 8122888:	003fd106 	br	81227d0 <rint+0x84>
 812288c:	00810004 	movi	r2,1024
 8122890:	48bfe41e 	bne	r9,r2,8122824 <rint+0xd8>
 8122894:	5009883a 	mov	r4,r10
 8122898:	500d883a 	mov	r6,r10
 812289c:	280f883a 	mov	r7,r5
 81228a0:	81237bc0 	call	81237bc <__adddf3>
 81228a4:	1015883a 	mov	r10,r2
 81228a8:	1817883a 	mov	r11,r3
 81228ac:	003fdd06 	br	8122824 <rint+0xd8>
 81228b0:	04e00034 	movhi	r19,32768
 81228b4:	9cffffc4 	addi	r19,r19,-1
 81228b8:	2cc4703a 	and	r2,r5,r19
 81228bc:	5084b03a 	or	r2,r10,r2
 81228c0:	103fd826 	beq	r2,zero,8122824 <rint+0xd8>
 81228c4:	00c00434 	movhi	r3,16
 81228c8:	18ffffc4 	addi	r3,r3,-1
 81228cc:	28c6703a 	and	r3,r5,r3
 81228d0:	50c6b03a 	or	r3,r10,r3
 81228d4:	00cdc83a 	sub	r6,zero,r3
 81228d8:	900a90fa 	slli	r5,r18,3
 81228dc:	1986b03a 	or	r3,r3,r6
 81228e0:	010204f4 	movhi	r4,2067
 81228e4:	21065504 	addi	r4,r4,6484
 81228e8:	1806d33a 	srli	r3,r3,12
 81228ec:	290b883a 	add	r5,r5,r4
 81228f0:	2c000017 	ldw	r16,0(r5)
 81228f4:	2c400117 	ldw	r17,4(r5)
 81228f8:	593fffac 	andhi	r4,r11,65534
 81228fc:	18c0022c 	andhi	r3,r3,8
 8122900:	1906b03a 	or	r3,r3,r4
 8122904:	500d883a 	mov	r6,r10
 8122908:	180f883a 	mov	r7,r3
 812290c:	8009883a 	mov	r4,r16
 8122910:	880b883a 	mov	r5,r17
 8122914:	81237bc0 	call	81237bc <__adddf3>
 8122918:	d8800015 	stw	r2,0(sp)
 812291c:	d8c00115 	stw	r3,4(sp)
 8122920:	d8800017 	ldw	r2,0(sp)
 8122924:	d8c00117 	ldw	r3,4(sp)
 8122928:	880f883a 	mov	r7,r17
 812292c:	800d883a 	mov	r6,r16
 8122930:	180b883a 	mov	r5,r3
 8122934:	1009883a 	mov	r4,r2
 8122938:	812373c0 	call	812373c <__subdf3>
 812293c:	901297fa 	slli	r9,r18,31
 8122940:	98d0703a 	and	r8,r19,r3
 8122944:	1015883a 	mov	r10,r2
 8122948:	4250b03a 	or	r8,r8,r9
 812294c:	4017883a 	mov	r11,r8
 8122950:	003fb406 	br	8122824 <rint+0xd8>
 8122954:	01900034 	movhi	r6,16384
 8122958:	003f9d06 	br	81227d0 <rint+0x84>

0812295c <scalbn>:
 812295c:	2011883a 	mov	r8,r4
 8122960:	291ffc2c 	andhi	r4,r5,32752
 8122964:	2009d53a 	srai	r4,r4,20
 8122968:	defffd04 	addi	sp,sp,-12
 812296c:	dc000015 	stw	r16,0(sp)
 8122970:	dfc00215 	stw	ra,8(sp)
 8122974:	dc400115 	stw	r17,4(sp)
 8122978:	2813883a 	mov	r9,r5
 812297c:	2815883a 	mov	r10,r5
 8122980:	3021883a 	mov	r16,r6
 8122984:	2000281e 	bne	r4,zero,8122a28 <scalbn+0xcc>
 8122988:	00a00034 	movhi	r2,32768
 812298c:	10bfffc4 	addi	r2,r2,-1
 8122990:	2884703a 	and	r2,r5,r2
 8122994:	4084b03a 	or	r2,r8,r2
 8122998:	10001826 	beq	r2,zero,81229fc <scalbn+0xa0>
 812299c:	0005883a 	mov	r2,zero
 81229a0:	00d0d434 	movhi	r3,17232
 81229a4:	4009883a 	mov	r4,r8
 81229a8:	100d883a 	mov	r6,r2
 81229ac:	180f883a 	mov	r7,r3
 81229b0:	81238300 	call	8123830 <__muldf3>
 81229b4:	100b883a 	mov	r5,r2
 81229b8:	1011883a 	mov	r8,r2
 81229bc:	00bffff4 	movhi	r2,65535
 81229c0:	108f2c04 	addi	r2,r2,15536
 81229c4:	180d883a 	mov	r6,r3
 81229c8:	1813883a 	mov	r9,r3
 81229cc:	8080120e 	bge	r16,r2,8122a18 <scalbn+0xbc>
 81229d0:	00b0be74 	movhi	r2,49913
 81229d4:	10bcd644 	addi	r2,r2,-3239
 81229d8:	00c06974 	movhi	r3,421
 81229dc:	18db87c4 	addi	r3,r3,28191
 81229e0:	2809883a 	mov	r4,r5
 81229e4:	180f883a 	mov	r7,r3
 81229e8:	300b883a 	mov	r5,r6
 81229ec:	100d883a 	mov	r6,r2
 81229f0:	81238300 	call	8123830 <__muldf3>
 81229f4:	1011883a 	mov	r8,r2
 81229f8:	1813883a 	mov	r9,r3
 81229fc:	4005883a 	mov	r2,r8
 8122a00:	4807883a 	mov	r3,r9
 8122a04:	dfc00217 	ldw	ra,8(sp)
 8122a08:	dc400117 	ldw	r17,4(sp)
 8122a0c:	dc000017 	ldw	r16,0(sp)
 8122a10:	dec00304 	addi	sp,sp,12
 8122a14:	f800283a 	ret
 8122a18:	189ffc2c 	andhi	r2,r3,32752
 8122a1c:	1005d53a 	srai	r2,r2,20
 8122a20:	1815883a 	mov	r10,r3
 8122a24:	113ff284 	addi	r4,r2,-54
 8122a28:	0081ffc4 	movi	r2,2047
 8122a2c:	20801126 	beq	r4,r2,8122a74 <scalbn+0x118>
 8122a30:	2409883a 	add	r4,r4,r16
 8122a34:	0081ff84 	movi	r2,2046
 8122a38:	11001c16 	blt	r2,r4,8122aac <scalbn+0x150>
 8122a3c:	0100290e 	bge	zero,r4,8122ae4 <scalbn+0x188>
 8122a40:	200a953a 	slli	r5,r4,20
 8122a44:	01200434 	movhi	r4,32784
 8122a48:	213fffc4 	addi	r4,r4,-1
 8122a4c:	5108703a 	and	r4,r10,r4
 8122a50:	2148b03a 	or	r4,r4,r5
 8122a54:	2013883a 	mov	r9,r4
 8122a58:	4005883a 	mov	r2,r8
 8122a5c:	4807883a 	mov	r3,r9
 8122a60:	dfc00217 	ldw	ra,8(sp)
 8122a64:	dc400117 	ldw	r17,4(sp)
 8122a68:	dc000017 	ldw	r16,0(sp)
 8122a6c:	dec00304 	addi	sp,sp,12
 8122a70:	f800283a 	ret
 8122a74:	480f883a 	mov	r7,r9
 8122a78:	4009883a 	mov	r4,r8
 8122a7c:	480b883a 	mov	r5,r9
 8122a80:	400d883a 	mov	r6,r8
 8122a84:	81237bc0 	call	81237bc <__adddf3>
 8122a88:	1011883a 	mov	r8,r2
 8122a8c:	1813883a 	mov	r9,r3
 8122a90:	4005883a 	mov	r2,r8
 8122a94:	4807883a 	mov	r3,r9
 8122a98:	dfc00217 	ldw	ra,8(sp)
 8122a9c:	dc400117 	ldw	r17,4(sp)
 8122aa0:	dc000017 	ldw	r16,0(sp)
 8122aa4:	dec00304 	addi	sp,sp,12
 8122aa8:	f800283a 	ret
 8122aac:	04220034 	movhi	r16,34816
 8122ab0:	841d6704 	addi	r16,r16,30108
 8122ab4:	045f8e34 	movhi	r17,32312
 8122ab8:	8c790f04 	addi	r17,r17,-7108
 8122abc:	480f883a 	mov	r7,r9
 8122ac0:	400d883a 	mov	r6,r8
 8122ac4:	8009883a 	mov	r4,r16
 8122ac8:	880b883a 	mov	r5,r17
 8122acc:	8122b3c0 	call	8122b3c <copysign>
 8122ad0:	180b883a 	mov	r5,r3
 8122ad4:	800d883a 	mov	r6,r16
 8122ad8:	880f883a 	mov	r7,r17
 8122adc:	1009883a 	mov	r4,r2
 8122ae0:	003fc306 	br	81229f0 <scalbn+0x94>
 8122ae4:	00bff284 	movi	r2,-54
 8122ae8:	11000716 	blt	r2,r4,8122b08 <scalbn+0x1ac>
 8122aec:	00b0d414 	movui	r2,50000
 8122af0:	143fee16 	blt	r2,r16,8122aac <scalbn+0x150>
 8122af4:	0430be74 	movhi	r16,49913
 8122af8:	843cd644 	addi	r16,r16,-3239
 8122afc:	04406974 	movhi	r17,421
 8122b00:	8c5b87c4 	addi	r17,r17,28191
 8122b04:	003fed06 	br	8122abc <scalbn+0x160>
 8122b08:	21000d84 	addi	r4,r4,54
 8122b0c:	2008953a 	slli	r4,r4,20
 8122b10:	01e00434 	movhi	r7,32784
 8122b14:	39ffffc4 	addi	r7,r7,-1
 8122b18:	51ce703a 	and	r7,r10,r7
 8122b1c:	390eb03a 	or	r7,r7,r4
 8122b20:	024f2434 	movhi	r9,15504
 8122b24:	4009883a 	mov	r4,r8
 8122b28:	0011883a 	mov	r8,zero
 8122b2c:	380b883a 	mov	r5,r7
 8122b30:	400d883a 	mov	r6,r8
 8122b34:	480f883a 	mov	r7,r9
 8122b38:	003fad06 	br	81229f0 <scalbn+0x94>

08122b3c <copysign>:
 8122b3c:	3813883a 	mov	r9,r7
 8122b40:	01e00034 	movhi	r7,32768
 8122b44:	39ffffc4 	addi	r7,r7,-1
 8122b48:	394e703a 	and	r7,r7,r5
 8122b4c:	4aa0002c 	andhi	r10,r9,32768
 8122b50:	3a8eb03a 	or	r7,r7,r10
 8122b54:	2005883a 	mov	r2,r4
 8122b58:	3807883a 	mov	r3,r7
 8122b5c:	f800283a 	ret

08122b60 <__fixunssfsi>:
 8122b60:	defffd04 	addi	sp,sp,-12
 8122b64:	dc000015 	stw	r16,0(sp)
 8122b68:	0413c034 	movhi	r16,20224
 8122b6c:	800b883a 	mov	r5,r16
 8122b70:	dc400115 	stw	r17,4(sp)
 8122b74:	dfc00215 	stw	ra,8(sp)
 8122b78:	2023883a 	mov	r17,r4
 8122b7c:	8122ffc0 	call	8122ffc <__gesf2>
 8122b80:	800b883a 	mov	r5,r16
 8122b84:	8809883a 	mov	r4,r17
 8122b88:	10000a16 	blt	r2,zero,8122bb4 <__fixunssfsi+0x54>
 8122b8c:	8122db40 	call	8122db4 <__subsf3>
 8122b90:	1009883a 	mov	r4,r2
 8122b94:	81231840 	call	8123184 <__fixsfsi>
 8122b98:	00e00034 	movhi	r3,32768
 8122b9c:	10c5883a 	add	r2,r2,r3
 8122ba0:	dfc00217 	ldw	ra,8(sp)
 8122ba4:	dc400117 	ldw	r17,4(sp)
 8122ba8:	dc000017 	ldw	r16,0(sp)
 8122bac:	dec00304 	addi	sp,sp,12
 8122bb0:	f800283a 	ret
 8122bb4:	8809883a 	mov	r4,r17
 8122bb8:	81231840 	call	8123184 <__fixsfsi>
 8122bbc:	dfc00217 	ldw	ra,8(sp)
 8122bc0:	dc400117 	ldw	r17,4(sp)
 8122bc4:	dc000017 	ldw	r16,0(sp)
 8122bc8:	dec00304 	addi	sp,sp,12
 8122bcc:	f800283a 	ret

08122bd0 <_fpadd_parts>:
 8122bd0:	21c00017 	ldw	r7,0(r4)
 8122bd4:	02000044 	movi	r8,1
 8122bd8:	41c0332e 	bgeu	r8,r7,8122ca8 <_fpadd_parts+0xd8>
 8122bdc:	28800017 	ldw	r2,0(r5)
 8122be0:	4080462e 	bgeu	r8,r2,8122cfc <_fpadd_parts+0x12c>
 8122be4:	00c00104 	movi	r3,4
 8122be8:	38c06b26 	beq	r7,r3,8122d98 <_fpadd_parts+0x1c8>
 8122bec:	10c04326 	beq	r2,r3,8122cfc <_fpadd_parts+0x12c>
 8122bf0:	00c00084 	movi	r3,2
 8122bf4:	10c02e26 	beq	r2,r3,8122cb0 <_fpadd_parts+0xe0>
 8122bf8:	38c04026 	beq	r7,r3,8122cfc <_fpadd_parts+0x12c>
 8122bfc:	22800217 	ldw	r10,8(r4)
 8122c00:	28c00217 	ldw	r3,8(r5)
 8122c04:	23000317 	ldw	r12,12(r4)
 8122c08:	2a400317 	ldw	r9,12(r5)
 8122c0c:	50cfc83a 	sub	r7,r10,r3
 8122c10:	3817883a 	mov	r11,r7
 8122c14:	38004f16 	blt	r7,zero,8122d54 <_fpadd_parts+0x184>
 8122c18:	008007c4 	movi	r2,31
 8122c1c:	11c03316 	blt	r2,r7,8122cec <_fpadd_parts+0x11c>
 8122c20:	02c0540e 	bge	zero,r11,8122d74 <_fpadd_parts+0x1a4>
 8122c24:	41c4983a 	sll	r2,r8,r7
 8122c28:	49c6d83a 	srl	r3,r9,r7
 8122c2c:	10bfffc4 	addi	r2,r2,-1
 8122c30:	4884703a 	and	r2,r9,r2
 8122c34:	1004c03a 	cmpne	r2,r2,zero
 8122c38:	1892b03a 	or	r9,r3,r2
 8122c3c:	20c00117 	ldw	r3,4(r4)
 8122c40:	28800117 	ldw	r2,4(r5)
 8122c44:	18803c26 	beq	r3,r2,8122d38 <_fpadd_parts+0x168>
 8122c48:	18002f26 	beq	r3,zero,8122d08 <_fpadd_parts+0x138>
 8122c4c:	4b05c83a 	sub	r2,r9,r12
 8122c50:	10004216 	blt	r2,zero,8122d5c <_fpadd_parts+0x18c>
 8122c54:	32800215 	stw	r10,8(r6)
 8122c58:	30800315 	stw	r2,12(r6)
 8122c5c:	30000115 	stw	zero,4(r6)
 8122c60:	31000317 	ldw	r4,12(r6)
 8122c64:	01d00034 	movhi	r7,16384
 8122c68:	39ffff84 	addi	r7,r7,-2
 8122c6c:	20bfffc4 	addi	r2,r4,-1
 8122c70:	2007883a 	mov	r3,r4
 8122c74:	38800836 	bltu	r7,r2,8122c98 <_fpadd_parts+0xc8>
 8122c78:	31400217 	ldw	r5,8(r6)
 8122c7c:	18c9883a 	add	r4,r3,r3
 8122c80:	20bfffc4 	addi	r2,r4,-1
 8122c84:	297fffc4 	addi	r5,r5,-1
 8122c88:	2007883a 	mov	r3,r4
 8122c8c:	38bffb2e 	bgeu	r7,r2,8122c7c <_fpadd_parts+0xac>
 8122c90:	31400215 	stw	r5,8(r6)
 8122c94:	31000315 	stw	r4,12(r6)
 8122c98:	008000c4 	movi	r2,3
 8122c9c:	30800015 	stw	r2,0(r6)
 8122ca0:	20001b16 	blt	r4,zero,8122d10 <_fpadd_parts+0x140>
 8122ca4:	3009883a 	mov	r4,r6
 8122ca8:	2005883a 	mov	r2,r4
 8122cac:	f800283a 	ret
 8122cb0:	38fffd1e 	bne	r7,r3,8122ca8 <_fpadd_parts+0xd8>
 8122cb4:	31c00015 	stw	r7,0(r6)
 8122cb8:	20800117 	ldw	r2,4(r4)
 8122cbc:	30800115 	stw	r2,4(r6)
 8122cc0:	20c00217 	ldw	r3,8(r4)
 8122cc4:	30c00215 	stw	r3,8(r6)
 8122cc8:	20800317 	ldw	r2,12(r4)
 8122ccc:	30800315 	stw	r2,12(r6)
 8122cd0:	20c00117 	ldw	r3,4(r4)
 8122cd4:	28800117 	ldw	r2,4(r5)
 8122cd8:	3009883a 	mov	r4,r6
 8122cdc:	1886703a 	and	r3,r3,r2
 8122ce0:	2005883a 	mov	r2,r4
 8122ce4:	30c00115 	stw	r3,4(r6)
 8122ce8:	f800283a 	ret
 8122cec:	1a801716 	blt	r3,r10,8122d4c <_fpadd_parts+0x17c>
 8122cf0:	1815883a 	mov	r10,r3
 8122cf4:	0019883a 	mov	r12,zero
 8122cf8:	003fd006 	br	8122c3c <_fpadd_parts+0x6c>
 8122cfc:	2809883a 	mov	r4,r5
 8122d00:	2005883a 	mov	r2,r4
 8122d04:	f800283a 	ret
 8122d08:	6245c83a 	sub	r2,r12,r9
 8122d0c:	003fd006 	br	8122c50 <_fpadd_parts+0x80>
 8122d10:	30800217 	ldw	r2,8(r6)
 8122d14:	2006d07a 	srli	r3,r4,1
 8122d18:	2100004c 	andi	r4,r4,1
 8122d1c:	10800044 	addi	r2,r2,1
 8122d20:	1906b03a 	or	r3,r3,r4
 8122d24:	3009883a 	mov	r4,r6
 8122d28:	30800215 	stw	r2,8(r6)
 8122d2c:	2005883a 	mov	r2,r4
 8122d30:	30c00315 	stw	r3,12(r6)
 8122d34:	f800283a 	ret
 8122d38:	4b09883a 	add	r4,r9,r12
 8122d3c:	30c00115 	stw	r3,4(r6)
 8122d40:	32800215 	stw	r10,8(r6)
 8122d44:	31000315 	stw	r4,12(r6)
 8122d48:	003fd306 	br	8122c98 <_fpadd_parts+0xc8>
 8122d4c:	0013883a 	mov	r9,zero
 8122d50:	003fba06 	br	8122c3c <_fpadd_parts+0x6c>
 8122d54:	01cfc83a 	sub	r7,zero,r7
 8122d58:	003faf06 	br	8122c18 <_fpadd_parts+0x48>
 8122d5c:	0089c83a 	sub	r4,zero,r2
 8122d60:	00800044 	movi	r2,1
 8122d64:	30800115 	stw	r2,4(r6)
 8122d68:	32800215 	stw	r10,8(r6)
 8122d6c:	31000315 	stw	r4,12(r6)
 8122d70:	003fbb06 	br	8122c60 <_fpadd_parts+0x90>
 8122d74:	583fb126 	beq	r11,zero,8122c3c <_fpadd_parts+0x6c>
 8122d78:	41c4983a 	sll	r2,r8,r7
 8122d7c:	61c6d83a 	srl	r3,r12,r7
 8122d80:	51d5883a 	add	r10,r10,r7
 8122d84:	10bfffc4 	addi	r2,r2,-1
 8122d88:	6084703a 	and	r2,r12,r2
 8122d8c:	1004c03a 	cmpne	r2,r2,zero
 8122d90:	1898b03a 	or	r12,r3,r2
 8122d94:	003fa906 	br	8122c3c <_fpadd_parts+0x6c>
 8122d98:	11ffc31e 	bne	r2,r7,8122ca8 <_fpadd_parts+0xd8>
 8122d9c:	28c00117 	ldw	r3,4(r5)
 8122da0:	20800117 	ldw	r2,4(r4)
 8122da4:	10ffc026 	beq	r2,r3,8122ca8 <_fpadd_parts+0xd8>
 8122da8:	010204f4 	movhi	r4,2067
 8122dac:	21065904 	addi	r4,r4,6500
 8122db0:	003fbd06 	br	8122ca8 <_fpadd_parts+0xd8>

08122db4 <__subsf3>:
 8122db4:	deffef04 	addi	sp,sp,-68
 8122db8:	dcc00f15 	stw	r19,60(sp)
 8122dbc:	dcc00204 	addi	r19,sp,8
 8122dc0:	dc400e15 	stw	r17,56(sp)
 8122dc4:	d9000015 	stw	r4,0(sp)
 8122dc8:	d9400115 	stw	r5,4(sp)
 8122dcc:	d809883a 	mov	r4,sp
 8122dd0:	980b883a 	mov	r5,r19
 8122dd4:	dc400604 	addi	r17,sp,24
 8122dd8:	dfc01015 	stw	ra,64(sp)
 8122ddc:	812465c0 	call	812465c <__unpack_f>
 8122de0:	d9000104 	addi	r4,sp,4
 8122de4:	880b883a 	mov	r5,r17
 8122de8:	812465c0 	call	812465c <__unpack_f>
 8122dec:	d8800717 	ldw	r2,28(sp)
 8122df0:	9809883a 	mov	r4,r19
 8122df4:	880b883a 	mov	r5,r17
 8122df8:	d9800a04 	addi	r6,sp,40
 8122dfc:	1080005c 	xori	r2,r2,1
 8122e00:	d8800715 	stw	r2,28(sp)
 8122e04:	8122bd00 	call	8122bd0 <_fpadd_parts>
 8122e08:	1009883a 	mov	r4,r2
 8122e0c:	81244fc0 	call	81244fc <__pack_f>
 8122e10:	dfc01017 	ldw	ra,64(sp)
 8122e14:	dcc00f17 	ldw	r19,60(sp)
 8122e18:	dc400e17 	ldw	r17,56(sp)
 8122e1c:	dec01104 	addi	sp,sp,68
 8122e20:	f800283a 	ret

08122e24 <__addsf3>:
 8122e24:	deffef04 	addi	sp,sp,-68
 8122e28:	dcc00f15 	stw	r19,60(sp)
 8122e2c:	dcc00204 	addi	r19,sp,8
 8122e30:	dc400e15 	stw	r17,56(sp)
 8122e34:	d9000015 	stw	r4,0(sp)
 8122e38:	d9400115 	stw	r5,4(sp)
 8122e3c:	d809883a 	mov	r4,sp
 8122e40:	980b883a 	mov	r5,r19
 8122e44:	dc400604 	addi	r17,sp,24
 8122e48:	dfc01015 	stw	ra,64(sp)
 8122e4c:	812465c0 	call	812465c <__unpack_f>
 8122e50:	d9000104 	addi	r4,sp,4
 8122e54:	880b883a 	mov	r5,r17
 8122e58:	812465c0 	call	812465c <__unpack_f>
 8122e5c:	d9800a04 	addi	r6,sp,40
 8122e60:	9809883a 	mov	r4,r19
 8122e64:	880b883a 	mov	r5,r17
 8122e68:	8122bd00 	call	8122bd0 <_fpadd_parts>
 8122e6c:	1009883a 	mov	r4,r2
 8122e70:	81244fc0 	call	81244fc <__pack_f>
 8122e74:	dfc01017 	ldw	ra,64(sp)
 8122e78:	dcc00f17 	ldw	r19,60(sp)
 8122e7c:	dc400e17 	ldw	r17,56(sp)
 8122e80:	dec01104 	addi	sp,sp,68
 8122e84:	f800283a 	ret

08122e88 <__divsf3>:
 8122e88:	defff304 	addi	sp,sp,-52
 8122e8c:	dc400b15 	stw	r17,44(sp)
 8122e90:	dc400204 	addi	r17,sp,8
 8122e94:	dc000a15 	stw	r16,40(sp)
 8122e98:	d9000015 	stw	r4,0(sp)
 8122e9c:	d9400115 	stw	r5,4(sp)
 8122ea0:	d809883a 	mov	r4,sp
 8122ea4:	880b883a 	mov	r5,r17
 8122ea8:	dc000604 	addi	r16,sp,24
 8122eac:	dfc00c15 	stw	ra,48(sp)
 8122eb0:	812465c0 	call	812465c <__unpack_f>
 8122eb4:	d9000104 	addi	r4,sp,4
 8122eb8:	800b883a 	mov	r5,r16
 8122ebc:	812465c0 	call	812465c <__unpack_f>
 8122ec0:	d9000217 	ldw	r4,8(sp)
 8122ec4:	00800044 	movi	r2,1
 8122ec8:	01800104 	movi	r6,4
 8122ecc:	11000a2e 	bgeu	r2,r4,8122ef8 <__divsf3+0x70>
 8122ed0:	d9400617 	ldw	r5,24(sp)
 8122ed4:	1140432e 	bgeu	r2,r5,8122fe4 <__divsf3+0x15c>
 8122ed8:	d8800317 	ldw	r2,12(sp)
 8122edc:	d8c00717 	ldw	r3,28(sp)
 8122ee0:	10c4f03a 	xor	r2,r2,r3
 8122ee4:	d8800315 	stw	r2,12(sp)
 8122ee8:	21800226 	beq	r4,r6,8122ef4 <__divsf3+0x6c>
 8122eec:	00800084 	movi	r2,2
 8122ef0:	2080101e 	bne	r4,r2,8122f34 <__divsf3+0xac>
 8122ef4:	29000726 	beq	r5,r4,8122f14 <__divsf3+0x8c>
 8122ef8:	8809883a 	mov	r4,r17
 8122efc:	81244fc0 	call	81244fc <__pack_f>
 8122f00:	dfc00c17 	ldw	ra,48(sp)
 8122f04:	dc400b17 	ldw	r17,44(sp)
 8122f08:	dc000a17 	ldw	r16,40(sp)
 8122f0c:	dec00d04 	addi	sp,sp,52
 8122f10:	f800283a 	ret
 8122f14:	010204f4 	movhi	r4,2067
 8122f18:	21065904 	addi	r4,r4,6500
 8122f1c:	81244fc0 	call	81244fc <__pack_f>
 8122f20:	dfc00c17 	ldw	ra,48(sp)
 8122f24:	dc400b17 	ldw	r17,44(sp)
 8122f28:	dc000a17 	ldw	r16,40(sp)
 8122f2c:	dec00d04 	addi	sp,sp,52
 8122f30:	f800283a 	ret
 8122f34:	29802d26 	beq	r5,r6,8122fec <__divsf3+0x164>
 8122f38:	28801a26 	beq	r5,r2,8122fa4 <__divsf3+0x11c>
 8122f3c:	d8c00417 	ldw	r3,16(sp)
 8122f40:	d8800817 	ldw	r2,32(sp)
 8122f44:	d9000517 	ldw	r4,20(sp)
 8122f48:	d9800917 	ldw	r6,36(sp)
 8122f4c:	1885c83a 	sub	r2,r3,r2
 8122f50:	d8800415 	stw	r2,16(sp)
 8122f54:	2180032e 	bgeu	r4,r6,8122f64 <__divsf3+0xdc>
 8122f58:	10bfffc4 	addi	r2,r2,-1
 8122f5c:	d8800415 	stw	r2,16(sp)
 8122f60:	2109883a 	add	r4,r4,r4
 8122f64:	01500034 	movhi	r5,16384
 8122f68:	0007883a 	mov	r3,zero
 8122f6c:	0005883a 	mov	r2,zero
 8122f70:	01c007c4 	movi	r7,31
 8122f74:	10800044 	addi	r2,r2,1
 8122f78:	21800236 	bltu	r4,r6,8122f84 <__divsf3+0xfc>
 8122f7c:	1946b03a 	or	r3,r3,r5
 8122f80:	2189c83a 	sub	r4,r4,r6
 8122f84:	280ad07a 	srli	r5,r5,1
 8122f88:	2109883a 	add	r4,r4,r4
 8122f8c:	11fff91e 	bne	r2,r7,8122f74 <__divsf3+0xec>
 8122f90:	19401fcc 	andi	r5,r3,127
 8122f94:	00801004 	movi	r2,64
 8122f98:	28800a26 	beq	r5,r2,8122fc4 <__divsf3+0x13c>
 8122f9c:	d8c00515 	stw	r3,20(sp)
 8122fa0:	003fd506 	br	8122ef8 <__divsf3+0x70>
 8122fa4:	8809883a 	mov	r4,r17
 8122fa8:	d9800215 	stw	r6,8(sp)
 8122fac:	81244fc0 	call	81244fc <__pack_f>
 8122fb0:	dfc00c17 	ldw	ra,48(sp)
 8122fb4:	dc400b17 	ldw	r17,44(sp)
 8122fb8:	dc000a17 	ldw	r16,40(sp)
 8122fbc:	dec00d04 	addi	sp,sp,52
 8122fc0:	f800283a 	ret
 8122fc4:	1880200c 	andi	r2,r3,128
 8122fc8:	103ff41e 	bne	r2,zero,8122f9c <__divsf3+0x114>
 8122fcc:	203ff326 	beq	r4,zero,8122f9c <__divsf3+0x114>
 8122fd0:	1947883a 	add	r3,r3,r5
 8122fd4:	00bfe004 	movi	r2,-128
 8122fd8:	1886703a 	and	r3,r3,r2
 8122fdc:	d8c00515 	stw	r3,20(sp)
 8122fe0:	003fc506 	br	8122ef8 <__divsf3+0x70>
 8122fe4:	8009883a 	mov	r4,r16
 8122fe8:	003fc406 	br	8122efc <__divsf3+0x74>
 8122fec:	8809883a 	mov	r4,r17
 8122ff0:	d8000515 	stw	zero,20(sp)
 8122ff4:	d8000415 	stw	zero,16(sp)
 8122ff8:	003fc006 	br	8122efc <__divsf3+0x74>

08122ffc <__gesf2>:
 8122ffc:	defff304 	addi	sp,sp,-52
 8123000:	dc400b15 	stw	r17,44(sp)
 8123004:	dc400204 	addi	r17,sp,8
 8123008:	dc000a15 	stw	r16,40(sp)
 812300c:	d9000015 	stw	r4,0(sp)
 8123010:	d9400115 	stw	r5,4(sp)
 8123014:	d809883a 	mov	r4,sp
 8123018:	880b883a 	mov	r5,r17
 812301c:	dc000604 	addi	r16,sp,24
 8123020:	dfc00c15 	stw	ra,48(sp)
 8123024:	812465c0 	call	812465c <__unpack_f>
 8123028:	d9000104 	addi	r4,sp,4
 812302c:	800b883a 	mov	r5,r16
 8123030:	812465c0 	call	812465c <__unpack_f>
 8123034:	d8800217 	ldw	r2,8(sp)
 8123038:	00c00044 	movi	r3,1
 812303c:	01bfffc4 	movi	r6,-1
 8123040:	1880062e 	bgeu	r3,r2,812305c <__gesf2+0x60>
 8123044:	d8800617 	ldw	r2,24(sp)
 8123048:	8809883a 	mov	r4,r17
 812304c:	800b883a 	mov	r5,r16
 8123050:	1880022e 	bgeu	r3,r2,812305c <__gesf2+0x60>
 8123054:	81247240 	call	8124724 <__fpcmp_parts_f>
 8123058:	100d883a 	mov	r6,r2
 812305c:	3005883a 	mov	r2,r6
 8123060:	dfc00c17 	ldw	ra,48(sp)
 8123064:	dc400b17 	ldw	r17,44(sp)
 8123068:	dc000a17 	ldw	r16,40(sp)
 812306c:	dec00d04 	addi	sp,sp,52
 8123070:	f800283a 	ret

08123074 <__lesf2>:
 8123074:	defff304 	addi	sp,sp,-52
 8123078:	dc400b15 	stw	r17,44(sp)
 812307c:	dc400204 	addi	r17,sp,8
 8123080:	dc000a15 	stw	r16,40(sp)
 8123084:	d9000015 	stw	r4,0(sp)
 8123088:	d9400115 	stw	r5,4(sp)
 812308c:	d809883a 	mov	r4,sp
 8123090:	880b883a 	mov	r5,r17
 8123094:	dc000604 	addi	r16,sp,24
 8123098:	dfc00c15 	stw	ra,48(sp)
 812309c:	812465c0 	call	812465c <__unpack_f>
 81230a0:	d9000104 	addi	r4,sp,4
 81230a4:	800b883a 	mov	r5,r16
 81230a8:	812465c0 	call	812465c <__unpack_f>
 81230ac:	d8800217 	ldw	r2,8(sp)
 81230b0:	00c00044 	movi	r3,1
 81230b4:	180d883a 	mov	r6,r3
 81230b8:	1880062e 	bgeu	r3,r2,81230d4 <__lesf2+0x60>
 81230bc:	d8800617 	ldw	r2,24(sp)
 81230c0:	8809883a 	mov	r4,r17
 81230c4:	800b883a 	mov	r5,r16
 81230c8:	1880022e 	bgeu	r3,r2,81230d4 <__lesf2+0x60>
 81230cc:	81247240 	call	8124724 <__fpcmp_parts_f>
 81230d0:	100d883a 	mov	r6,r2
 81230d4:	3005883a 	mov	r2,r6
 81230d8:	dfc00c17 	ldw	ra,48(sp)
 81230dc:	dc400b17 	ldw	r17,44(sp)
 81230e0:	dc000a17 	ldw	r16,40(sp)
 81230e4:	dec00d04 	addi	sp,sp,52
 81230e8:	f800283a 	ret

081230ec <__floatsisf>:
 81230ec:	2006d7fa 	srli	r3,r4,31
 81230f0:	defffa04 	addi	sp,sp,-24
 81230f4:	008000c4 	movi	r2,3
 81230f8:	dfc00515 	stw	ra,20(sp)
 81230fc:	dc000415 	stw	r16,16(sp)
 8123100:	d8800015 	stw	r2,0(sp)
 8123104:	d8c00115 	stw	r3,4(sp)
 8123108:	2000081e 	bne	r4,zero,812312c <__floatsisf+0x40>
 812310c:	00800084 	movi	r2,2
 8123110:	d8800015 	stw	r2,0(sp)
 8123114:	d809883a 	mov	r4,sp
 8123118:	81244fc0 	call	81244fc <__pack_f>
 812311c:	dfc00517 	ldw	ra,20(sp)
 8123120:	dc000417 	ldw	r16,16(sp)
 8123124:	dec00604 	addi	sp,sp,24
 8123128:	f800283a 	ret
 812312c:	00800784 	movi	r2,30
 8123130:	1807003a 	cmpeq	r3,r3,zero
 8123134:	d8800215 	stw	r2,8(sp)
 8123138:	18000e1e 	bne	r3,zero,8123174 <__floatsisf+0x88>
 812313c:	00a00034 	movhi	r2,32768
 8123140:	20800e26 	beq	r4,r2,812317c <__floatsisf+0x90>
 8123144:	0121c83a 	sub	r16,zero,r4
 8123148:	8009883a 	mov	r4,r16
 812314c:	dc000315 	stw	r16,12(sp)
 8123150:	812447c0 	call	812447c <__clzsi2>
 8123154:	117fffc4 	addi	r5,r2,-1
 8123158:	017fee0e 	bge	zero,r5,8123114 <__floatsisf+0x28>
 812315c:	d8800217 	ldw	r2,8(sp)
 8123160:	8146983a 	sll	r3,r16,r5
 8123164:	1145c83a 	sub	r2,r2,r5
 8123168:	d8c00315 	stw	r3,12(sp)
 812316c:	d8800215 	stw	r2,8(sp)
 8123170:	003fe806 	br	8123114 <__floatsisf+0x28>
 8123174:	2021883a 	mov	r16,r4
 8123178:	003ff306 	br	8123148 <__floatsisf+0x5c>
 812317c:	00b3c034 	movhi	r2,52992
 8123180:	003fe606 	br	812311c <__floatsisf+0x30>

08123184 <__fixsfsi>:
 8123184:	defffa04 	addi	sp,sp,-24
 8123188:	d9000015 	stw	r4,0(sp)
 812318c:	d9400104 	addi	r5,sp,4
 8123190:	d809883a 	mov	r4,sp
 8123194:	dfc00515 	stw	ra,20(sp)
 8123198:	812465c0 	call	812465c <__unpack_f>
 812319c:	d8c00117 	ldw	r3,4(sp)
 81231a0:	00800084 	movi	r2,2
 81231a4:	1880041e 	bne	r3,r2,81231b8 <__fixsfsi+0x34>
 81231a8:	0005883a 	mov	r2,zero
 81231ac:	dfc00517 	ldw	ra,20(sp)
 81231b0:	dec00604 	addi	sp,sp,24
 81231b4:	f800283a 	ret
 81231b8:	00800044 	movi	r2,1
 81231bc:	10fffa2e 	bgeu	r2,r3,81231a8 <__fixsfsi+0x24>
 81231c0:	00800104 	movi	r2,4
 81231c4:	18800426 	beq	r3,r2,81231d8 <__fixsfsi+0x54>
 81231c8:	d8800317 	ldw	r2,12(sp)
 81231cc:	103ff616 	blt	r2,zero,81231a8 <__fixsfsi+0x24>
 81231d0:	00c00784 	movi	r3,30
 81231d4:	1880070e 	bge	r3,r2,81231f4 <__fixsfsi+0x70>
 81231d8:	d8800217 	ldw	r2,8(sp)
 81231dc:	10000c1e 	bne	r2,zero,8123210 <__fixsfsi+0x8c>
 81231e0:	00a00034 	movhi	r2,32768
 81231e4:	10bfffc4 	addi	r2,r2,-1
 81231e8:	dfc00517 	ldw	ra,20(sp)
 81231ec:	dec00604 	addi	sp,sp,24
 81231f0:	f800283a 	ret
 81231f4:	1885c83a 	sub	r2,r3,r2
 81231f8:	d9000217 	ldw	r4,8(sp)
 81231fc:	d8c00417 	ldw	r3,16(sp)
 8123200:	1884d83a 	srl	r2,r3,r2
 8123204:	203fe926 	beq	r4,zero,81231ac <__fixsfsi+0x28>
 8123208:	0085c83a 	sub	r2,zero,r2
 812320c:	003fe706 	br	81231ac <__fixsfsi+0x28>
 8123210:	00a00034 	movhi	r2,32768
 8123214:	003fe506 	br	81231ac <__fixsfsi+0x28>

08123218 <__extendsfdf2>:
 8123218:	defff904 	addi	sp,sp,-28
 812321c:	d9000115 	stw	r4,4(sp)
 8123220:	d9400204 	addi	r5,sp,8
 8123224:	d9000104 	addi	r4,sp,4
 8123228:	dfc00615 	stw	ra,24(sp)
 812322c:	812465c0 	call	812465c <__unpack_f>
 8123230:	d9c00517 	ldw	r7,20(sp)
 8123234:	0011883a 	mov	r8,zero
 8123238:	400697ba 	slli	r3,r8,30
 812323c:	3812d0ba 	srli	r9,r7,2
 8123240:	380497ba 	slli	r2,r7,30
 8123244:	d9000217 	ldw	r4,8(sp)
 8123248:	d9400317 	ldw	r5,12(sp)
 812324c:	d9800417 	ldw	r6,16(sp)
 8123250:	48c6b03a 	or	r3,r9,r3
 8123254:	100f883a 	mov	r7,r2
 8123258:	d8c00015 	stw	r3,0(sp)
 812325c:	81241ec0 	call	81241ec <__make_dp>
 8123260:	dfc00617 	ldw	ra,24(sp)
 8123264:	dec00704 	addi	sp,sp,28
 8123268:	f800283a 	ret

0812326c <__floatunsisf>:
 812326c:	defff904 	addi	sp,sp,-28
 8123270:	dc400515 	stw	r17,20(sp)
 8123274:	dc000415 	stw	r16,16(sp)
 8123278:	dfc00615 	stw	ra,24(sp)
 812327c:	04400784 	movi	r17,30
 8123280:	2021883a 	mov	r16,r4
 8123284:	d8000115 	stw	zero,4(sp)
 8123288:	2000091e 	bne	r4,zero,81232b0 <__floatunsisf+0x44>
 812328c:	00800084 	movi	r2,2
 8123290:	d8800015 	stw	r2,0(sp)
 8123294:	d809883a 	mov	r4,sp
 8123298:	81244fc0 	call	81244fc <__pack_f>
 812329c:	dfc00617 	ldw	ra,24(sp)
 81232a0:	dc400517 	ldw	r17,20(sp)
 81232a4:	dc000417 	ldw	r16,16(sp)
 81232a8:	dec00704 	addi	sp,sp,28
 81232ac:	f800283a 	ret
 81232b0:	008000c4 	movi	r2,3
 81232b4:	d9000315 	stw	r4,12(sp)
 81232b8:	d8800015 	stw	r2,0(sp)
 81232bc:	dc400215 	stw	r17,8(sp)
 81232c0:	812447c0 	call	812447c <__clzsi2>
 81232c4:	117fffc4 	addi	r5,r2,-1
 81232c8:	0147c83a 	sub	r3,zero,r5
 81232cc:	00800044 	movi	r2,1
 81232d0:	10c4983a 	sll	r2,r2,r3
 81232d4:	80c6d83a 	srl	r3,r16,r3
 81232d8:	8949c83a 	sub	r4,r17,r5
 81232dc:	10bfffc4 	addi	r2,r2,-1
 81232e0:	8084703a 	and	r2,r16,r2
 81232e4:	1004c03a 	cmpne	r2,r2,zero
 81232e8:	1886b03a 	or	r3,r3,r2
 81232ec:	28000c16 	blt	r5,zero,8123320 <__floatunsisf+0xb4>
 81232f0:	8144983a 	sll	r2,r16,r5
 81232f4:	8947c83a 	sub	r3,r17,r5
 81232f8:	283fe626 	beq	r5,zero,8123294 <__floatunsisf+0x28>
 81232fc:	d809883a 	mov	r4,sp
 8123300:	d8800315 	stw	r2,12(sp)
 8123304:	d8c00215 	stw	r3,8(sp)
 8123308:	81244fc0 	call	81244fc <__pack_f>
 812330c:	dfc00617 	ldw	ra,24(sp)
 8123310:	dc400517 	ldw	r17,20(sp)
 8123314:	dc000417 	ldw	r16,16(sp)
 8123318:	dec00704 	addi	sp,sp,28
 812331c:	f800283a 	ret
 8123320:	d8c00315 	stw	r3,12(sp)
 8123324:	d9000215 	stw	r4,8(sp)
 8123328:	003fda06 	br	8123294 <__floatunsisf+0x28>

0812332c <_fpadd_parts>:
 812332c:	defff804 	addi	sp,sp,-32
 8123330:	dcc00315 	stw	r19,12(sp)
 8123334:	2027883a 	mov	r19,r4
 8123338:	21000017 	ldw	r4,0(r4)
 812333c:	00c00044 	movi	r3,1
 8123340:	dd400515 	stw	r21,20(sp)
 8123344:	dd000415 	stw	r20,16(sp)
 8123348:	ddc00715 	stw	r23,28(sp)
 812334c:	dd800615 	stw	r22,24(sp)
 8123350:	dc800215 	stw	r18,8(sp)
 8123354:	dc400115 	stw	r17,4(sp)
 8123358:	dc000015 	stw	r16,0(sp)
 812335c:	282b883a 	mov	r21,r5
 8123360:	3029883a 	mov	r20,r6
 8123364:	1900632e 	bgeu	r3,r4,81234f4 <_fpadd_parts+0x1c8>
 8123368:	28800017 	ldw	r2,0(r5)
 812336c:	1880812e 	bgeu	r3,r2,8123574 <_fpadd_parts+0x248>
 8123370:	00c00104 	movi	r3,4
 8123374:	20c0dc26 	beq	r4,r3,81236e8 <_fpadd_parts+0x3bc>
 8123378:	10c07e26 	beq	r2,r3,8123574 <_fpadd_parts+0x248>
 812337c:	00c00084 	movi	r3,2
 8123380:	10c06726 	beq	r2,r3,8123520 <_fpadd_parts+0x1f4>
 8123384:	20c07b26 	beq	r4,r3,8123574 <_fpadd_parts+0x248>
 8123388:	9dc00217 	ldw	r23,8(r19)
 812338c:	28c00217 	ldw	r3,8(r5)
 8123390:	9c400317 	ldw	r17,12(r19)
 8123394:	2bc00317 	ldw	r15,12(r5)
 8123398:	b8cdc83a 	sub	r6,r23,r3
 812339c:	9c800417 	ldw	r18,16(r19)
 81233a0:	2c000417 	ldw	r16,16(r5)
 81233a4:	3009883a 	mov	r4,r6
 81233a8:	30009716 	blt	r6,zero,8123608 <_fpadd_parts+0x2dc>
 81233ac:	00800fc4 	movi	r2,63
 81233b0:	11806b16 	blt	r2,r6,8123560 <_fpadd_parts+0x234>
 81233b4:	0100a40e 	bge	zero,r4,8123648 <_fpadd_parts+0x31c>
 81233b8:	35bff804 	addi	r22,r6,-32
 81233bc:	b000bc16 	blt	r22,zero,81236b0 <_fpadd_parts+0x384>
 81233c0:	8596d83a 	srl	r11,r16,r22
 81233c4:	0019883a 	mov	r12,zero
 81233c8:	0013883a 	mov	r9,zero
 81233cc:	01000044 	movi	r4,1
 81233d0:	0015883a 	mov	r10,zero
 81233d4:	b000be16 	blt	r22,zero,81236d0 <_fpadd_parts+0x3a4>
 81233d8:	2590983a 	sll	r8,r4,r22
 81233dc:	000f883a 	mov	r7,zero
 81233e0:	00bfffc4 	movi	r2,-1
 81233e4:	3889883a 	add	r4,r7,r2
 81233e8:	408b883a 	add	r5,r8,r2
 81233ec:	21cd803a 	cmpltu	r6,r4,r7
 81233f0:	314b883a 	add	r5,r6,r5
 81233f4:	7904703a 	and	r2,r15,r4
 81233f8:	8146703a 	and	r3,r16,r5
 81233fc:	10c4b03a 	or	r2,r2,r3
 8123400:	10000226 	beq	r2,zero,812340c <_fpadd_parts+0xe0>
 8123404:	02400044 	movi	r9,1
 8123408:	0015883a 	mov	r10,zero
 812340c:	5a5eb03a 	or	r15,r11,r9
 8123410:	62a0b03a 	or	r16,r12,r10
 8123414:	99400117 	ldw	r5,4(r19)
 8123418:	a8800117 	ldw	r2,4(r21)
 812341c:	28806e26 	beq	r5,r2,81235d8 <_fpadd_parts+0x2ac>
 8123420:	28006626 	beq	r5,zero,81235bc <_fpadd_parts+0x290>
 8123424:	7c45c83a 	sub	r2,r15,r17
 8123428:	7889803a 	cmpltu	r4,r15,r2
 812342c:	8487c83a 	sub	r3,r16,r18
 8123430:	1909c83a 	sub	r4,r3,r4
 8123434:	100d883a 	mov	r6,r2
 8123438:	200f883a 	mov	r7,r4
 812343c:	38007716 	blt	r7,zero,812361c <_fpadd_parts+0x2f0>
 8123440:	a5c00215 	stw	r23,8(r20)
 8123444:	a1c00415 	stw	r7,16(r20)
 8123448:	a0000115 	stw	zero,4(r20)
 812344c:	a1800315 	stw	r6,12(r20)
 8123450:	a2000317 	ldw	r8,12(r20)
 8123454:	a2400417 	ldw	r9,16(r20)
 8123458:	00bfffc4 	movi	r2,-1
 812345c:	408b883a 	add	r5,r8,r2
 8123460:	2a09803a 	cmpltu	r4,r5,r8
 8123464:	488d883a 	add	r6,r9,r2
 8123468:	01c40034 	movhi	r7,4096
 812346c:	39ffffc4 	addi	r7,r7,-1
 8123470:	218d883a 	add	r6,r4,r6
 8123474:	39801736 	bltu	r7,r6,81234d4 <_fpadd_parts+0x1a8>
 8123478:	31c06526 	beq	r6,r7,8123610 <_fpadd_parts+0x2e4>
 812347c:	a3000217 	ldw	r12,8(r20)
 8123480:	4209883a 	add	r4,r8,r8
 8123484:	00bfffc4 	movi	r2,-1
 8123488:	220f803a 	cmpltu	r7,r4,r8
 812348c:	4a4b883a 	add	r5,r9,r9
 8123490:	394f883a 	add	r7,r7,r5
 8123494:	2095883a 	add	r10,r4,r2
 8123498:	3897883a 	add	r11,r7,r2
 812349c:	510d803a 	cmpltu	r6,r10,r4
 81234a0:	6099883a 	add	r12,r12,r2
 81234a4:	32d7883a 	add	r11,r6,r11
 81234a8:	00840034 	movhi	r2,4096
 81234ac:	10bfffc4 	addi	r2,r2,-1
 81234b0:	2011883a 	mov	r8,r4
 81234b4:	3813883a 	mov	r9,r7
 81234b8:	a1000315 	stw	r4,12(r20)
 81234bc:	a1c00415 	stw	r7,16(r20)
 81234c0:	a3000215 	stw	r12,8(r20)
 81234c4:	12c00336 	bltu	r2,r11,81234d4 <_fpadd_parts+0x1a8>
 81234c8:	58bfed1e 	bne	r11,r2,8123480 <_fpadd_parts+0x154>
 81234cc:	00bfff84 	movi	r2,-2
 81234d0:	12bfeb2e 	bgeu	r2,r10,8123480 <_fpadd_parts+0x154>
 81234d4:	a2800417 	ldw	r10,16(r20)
 81234d8:	008000c4 	movi	r2,3
 81234dc:	00c80034 	movhi	r3,8192
 81234e0:	18ffffc4 	addi	r3,r3,-1
 81234e4:	a2400317 	ldw	r9,12(r20)
 81234e8:	a0800015 	stw	r2,0(r20)
 81234ec:	1a802336 	bltu	r3,r10,812357c <_fpadd_parts+0x250>
 81234f0:	a027883a 	mov	r19,r20
 81234f4:	9805883a 	mov	r2,r19
 81234f8:	ddc00717 	ldw	r23,28(sp)
 81234fc:	dd800617 	ldw	r22,24(sp)
 8123500:	dd400517 	ldw	r21,20(sp)
 8123504:	dd000417 	ldw	r20,16(sp)
 8123508:	dcc00317 	ldw	r19,12(sp)
 812350c:	dc800217 	ldw	r18,8(sp)
 8123510:	dc400117 	ldw	r17,4(sp)
 8123514:	dc000017 	ldw	r16,0(sp)
 8123518:	dec00804 	addi	sp,sp,32
 812351c:	f800283a 	ret
 8123520:	20fff41e 	bne	r4,r3,81234f4 <_fpadd_parts+0x1c8>
 8123524:	31000015 	stw	r4,0(r6)
 8123528:	98800117 	ldw	r2,4(r19)
 812352c:	30800115 	stw	r2,4(r6)
 8123530:	98c00217 	ldw	r3,8(r19)
 8123534:	30c00215 	stw	r3,8(r6)
 8123538:	98800317 	ldw	r2,12(r19)
 812353c:	30800315 	stw	r2,12(r6)
 8123540:	98c00417 	ldw	r3,16(r19)
 8123544:	30c00415 	stw	r3,16(r6)
 8123548:	98800117 	ldw	r2,4(r19)
 812354c:	28c00117 	ldw	r3,4(r5)
 8123550:	3027883a 	mov	r19,r6
 8123554:	10c4703a 	and	r2,r2,r3
 8123558:	30800115 	stw	r2,4(r6)
 812355c:	003fe506 	br	81234f4 <_fpadd_parts+0x1c8>
 8123560:	1dc02616 	blt	r3,r23,81235fc <_fpadd_parts+0x2d0>
 8123564:	0023883a 	mov	r17,zero
 8123568:	182f883a 	mov	r23,r3
 812356c:	0025883a 	mov	r18,zero
 8123570:	003fa806 	br	8123414 <_fpadd_parts+0xe8>
 8123574:	a827883a 	mov	r19,r21
 8123578:	003fde06 	br	81234f4 <_fpadd_parts+0x1c8>
 812357c:	01800044 	movi	r6,1
 8123580:	500497fa 	slli	r2,r10,31
 8123584:	4808d07a 	srli	r4,r9,1
 8123588:	518ad83a 	srl	r5,r10,r6
 812358c:	a2000217 	ldw	r8,8(r20)
 8123590:	1108b03a 	or	r4,r2,r4
 8123594:	0007883a 	mov	r3,zero
 8123598:	4984703a 	and	r2,r9,r6
 812359c:	208cb03a 	or	r6,r4,r2
 81235a0:	28ceb03a 	or	r7,r5,r3
 81235a4:	42000044 	addi	r8,r8,1
 81235a8:	a027883a 	mov	r19,r20
 81235ac:	a1c00415 	stw	r7,16(r20)
 81235b0:	a2000215 	stw	r8,8(r20)
 81235b4:	a1800315 	stw	r6,12(r20)
 81235b8:	003fce06 	br	81234f4 <_fpadd_parts+0x1c8>
 81235bc:	8bc5c83a 	sub	r2,r17,r15
 81235c0:	8889803a 	cmpltu	r4,r17,r2
 81235c4:	9407c83a 	sub	r3,r18,r16
 81235c8:	1909c83a 	sub	r4,r3,r4
 81235cc:	100d883a 	mov	r6,r2
 81235d0:	200f883a 	mov	r7,r4
 81235d4:	003f9906 	br	812343c <_fpadd_parts+0x110>
 81235d8:	7c45883a 	add	r2,r15,r17
 81235dc:	13c9803a 	cmpltu	r4,r2,r15
 81235e0:	8487883a 	add	r3,r16,r18
 81235e4:	20c9883a 	add	r4,r4,r3
 81235e8:	a1400115 	stw	r5,4(r20)
 81235ec:	a5c00215 	stw	r23,8(r20)
 81235f0:	a0800315 	stw	r2,12(r20)
 81235f4:	a1000415 	stw	r4,16(r20)
 81235f8:	003fb606 	br	81234d4 <_fpadd_parts+0x1a8>
 81235fc:	001f883a 	mov	r15,zero
 8123600:	0021883a 	mov	r16,zero
 8123604:	003f8306 	br	8123414 <_fpadd_parts+0xe8>
 8123608:	018dc83a 	sub	r6,zero,r6
 812360c:	003f6706 	br	81233ac <_fpadd_parts+0x80>
 8123610:	00bfff84 	movi	r2,-2
 8123614:	117faf36 	bltu	r2,r5,81234d4 <_fpadd_parts+0x1a8>
 8123618:	003f9806 	br	812347c <_fpadd_parts+0x150>
 812361c:	0005883a 	mov	r2,zero
 8123620:	1189c83a 	sub	r4,r2,r6
 8123624:	1105803a 	cmpltu	r2,r2,r4
 8123628:	01cbc83a 	sub	r5,zero,r7
 812362c:	2885c83a 	sub	r2,r5,r2
 8123630:	01800044 	movi	r6,1
 8123634:	a1800115 	stw	r6,4(r20)
 8123638:	a5c00215 	stw	r23,8(r20)
 812363c:	a1000315 	stw	r4,12(r20)
 8123640:	a0800415 	stw	r2,16(r20)
 8123644:	003f8206 	br	8123450 <_fpadd_parts+0x124>
 8123648:	203f7226 	beq	r4,zero,8123414 <_fpadd_parts+0xe8>
 812364c:	35bff804 	addi	r22,r6,-32
 8123650:	b9af883a 	add	r23,r23,r6
 8123654:	b0003116 	blt	r22,zero,812371c <_fpadd_parts+0x3f0>
 8123658:	959ad83a 	srl	r13,r18,r22
 812365c:	001d883a 	mov	r14,zero
 8123660:	000f883a 	mov	r7,zero
 8123664:	01000044 	movi	r4,1
 8123668:	0011883a 	mov	r8,zero
 812366c:	b0002516 	blt	r22,zero,8123704 <_fpadd_parts+0x3d8>
 8123670:	2594983a 	sll	r10,r4,r22
 8123674:	0013883a 	mov	r9,zero
 8123678:	00bfffc4 	movi	r2,-1
 812367c:	4889883a 	add	r4,r9,r2
 8123680:	508b883a 	add	r5,r10,r2
 8123684:	224d803a 	cmpltu	r6,r4,r9
 8123688:	314b883a 	add	r5,r6,r5
 812368c:	8904703a 	and	r2,r17,r4
 8123690:	9146703a 	and	r3,r18,r5
 8123694:	10c4b03a 	or	r2,r2,r3
 8123698:	10000226 	beq	r2,zero,81236a4 <_fpadd_parts+0x378>
 812369c:	01c00044 	movi	r7,1
 81236a0:	0011883a 	mov	r8,zero
 81236a4:	69e2b03a 	or	r17,r13,r7
 81236a8:	7224b03a 	or	r18,r14,r8
 81236ac:	003f5906 	br	8123414 <_fpadd_parts+0xe8>
 81236b0:	8407883a 	add	r3,r16,r16
 81236b4:	008007c4 	movi	r2,31
 81236b8:	1185c83a 	sub	r2,r2,r6
 81236bc:	1886983a 	sll	r3,r3,r2
 81236c0:	7996d83a 	srl	r11,r15,r6
 81236c4:	8198d83a 	srl	r12,r16,r6
 81236c8:	1ad6b03a 	or	r11,r3,r11
 81236cc:	003f3e06 	br	81233c8 <_fpadd_parts+0x9c>
 81236d0:	2006d07a 	srli	r3,r4,1
 81236d4:	008007c4 	movi	r2,31
 81236d8:	1185c83a 	sub	r2,r2,r6
 81236dc:	1890d83a 	srl	r8,r3,r2
 81236e0:	218e983a 	sll	r7,r4,r6
 81236e4:	003f3e06 	br	81233e0 <_fpadd_parts+0xb4>
 81236e8:	113f821e 	bne	r2,r4,81234f4 <_fpadd_parts+0x1c8>
 81236ec:	28c00117 	ldw	r3,4(r5)
 81236f0:	98800117 	ldw	r2,4(r19)
 81236f4:	10ff7f26 	beq	r2,r3,81234f4 <_fpadd_parts+0x1c8>
 81236f8:	04c204f4 	movhi	r19,2067
 81236fc:	9cc65d04 	addi	r19,r19,6516
 8123700:	003f7c06 	br	81234f4 <_fpadd_parts+0x1c8>
 8123704:	2006d07a 	srli	r3,r4,1
 8123708:	008007c4 	movi	r2,31
 812370c:	1185c83a 	sub	r2,r2,r6
 8123710:	1894d83a 	srl	r10,r3,r2
 8123714:	2192983a 	sll	r9,r4,r6
 8123718:	003fd706 	br	8123678 <_fpadd_parts+0x34c>
 812371c:	9487883a 	add	r3,r18,r18
 8123720:	008007c4 	movi	r2,31
 8123724:	1185c83a 	sub	r2,r2,r6
 8123728:	1886983a 	sll	r3,r3,r2
 812372c:	899ad83a 	srl	r13,r17,r6
 8123730:	919cd83a 	srl	r14,r18,r6
 8123734:	1b5ab03a 	or	r13,r3,r13
 8123738:	003fc906 	br	8123660 <_fpadd_parts+0x334>

0812373c <__subdf3>:
 812373c:	deffea04 	addi	sp,sp,-88
 8123740:	dcc01415 	stw	r19,80(sp)
 8123744:	dcc00404 	addi	r19,sp,16
 8123748:	2011883a 	mov	r8,r4
 812374c:	2813883a 	mov	r9,r5
 8123750:	dc401315 	stw	r17,76(sp)
 8123754:	d809883a 	mov	r4,sp
 8123758:	980b883a 	mov	r5,r19
 812375c:	dc400904 	addi	r17,sp,36
 8123760:	dfc01515 	stw	ra,84(sp)
 8123764:	da400115 	stw	r9,4(sp)
 8123768:	d9c00315 	stw	r7,12(sp)
 812376c:	da000015 	stw	r8,0(sp)
 8123770:	d9800215 	stw	r6,8(sp)
 8123774:	8124b0c0 	call	8124b0c <__unpack_d>
 8123778:	d9000204 	addi	r4,sp,8
 812377c:	880b883a 	mov	r5,r17
 8123780:	8124b0c0 	call	8124b0c <__unpack_d>
 8123784:	d8800a17 	ldw	r2,40(sp)
 8123788:	880b883a 	mov	r5,r17
 812378c:	9809883a 	mov	r4,r19
 8123790:	d9800e04 	addi	r6,sp,56
 8123794:	1080005c 	xori	r2,r2,1
 8123798:	d8800a15 	stw	r2,40(sp)
 812379c:	812332c0 	call	812332c <_fpadd_parts>
 81237a0:	1009883a 	mov	r4,r2
 81237a4:	81247f80 	call	81247f8 <__pack_d>
 81237a8:	dfc01517 	ldw	ra,84(sp)
 81237ac:	dcc01417 	ldw	r19,80(sp)
 81237b0:	dc401317 	ldw	r17,76(sp)
 81237b4:	dec01604 	addi	sp,sp,88
 81237b8:	f800283a 	ret

081237bc <__adddf3>:
 81237bc:	deffea04 	addi	sp,sp,-88
 81237c0:	dcc01415 	stw	r19,80(sp)
 81237c4:	dcc00404 	addi	r19,sp,16
 81237c8:	2011883a 	mov	r8,r4
 81237cc:	2813883a 	mov	r9,r5
 81237d0:	dc401315 	stw	r17,76(sp)
 81237d4:	d809883a 	mov	r4,sp
 81237d8:	980b883a 	mov	r5,r19
 81237dc:	dc400904 	addi	r17,sp,36
 81237e0:	dfc01515 	stw	ra,84(sp)
 81237e4:	da400115 	stw	r9,4(sp)
 81237e8:	d9c00315 	stw	r7,12(sp)
 81237ec:	da000015 	stw	r8,0(sp)
 81237f0:	d9800215 	stw	r6,8(sp)
 81237f4:	8124b0c0 	call	8124b0c <__unpack_d>
 81237f8:	d9000204 	addi	r4,sp,8
 81237fc:	880b883a 	mov	r5,r17
 8123800:	8124b0c0 	call	8124b0c <__unpack_d>
 8123804:	d9800e04 	addi	r6,sp,56
 8123808:	9809883a 	mov	r4,r19
 812380c:	880b883a 	mov	r5,r17
 8123810:	812332c0 	call	812332c <_fpadd_parts>
 8123814:	1009883a 	mov	r4,r2
 8123818:	81247f80 	call	81247f8 <__pack_d>
 812381c:	dfc01517 	ldw	ra,84(sp)
 8123820:	dcc01417 	ldw	r19,80(sp)
 8123824:	dc401317 	ldw	r17,76(sp)
 8123828:	dec01604 	addi	sp,sp,88
 812382c:	f800283a 	ret

08123830 <__muldf3>:
 8123830:	deffe004 	addi	sp,sp,-128
 8123834:	dc401815 	stw	r17,96(sp)
 8123838:	dc400404 	addi	r17,sp,16
 812383c:	2011883a 	mov	r8,r4
 8123840:	2813883a 	mov	r9,r5
 8123844:	dc001715 	stw	r16,92(sp)
 8123848:	d809883a 	mov	r4,sp
 812384c:	880b883a 	mov	r5,r17
 8123850:	dc000904 	addi	r16,sp,36
 8123854:	dfc01f15 	stw	ra,124(sp)
 8123858:	da400115 	stw	r9,4(sp)
 812385c:	d9c00315 	stw	r7,12(sp)
 8123860:	da000015 	stw	r8,0(sp)
 8123864:	d9800215 	stw	r6,8(sp)
 8123868:	ddc01e15 	stw	r23,120(sp)
 812386c:	dd801d15 	stw	r22,116(sp)
 8123870:	dd401c15 	stw	r21,112(sp)
 8123874:	dd001b15 	stw	r20,108(sp)
 8123878:	dcc01a15 	stw	r19,104(sp)
 812387c:	dc801915 	stw	r18,100(sp)
 8123880:	8124b0c0 	call	8124b0c <__unpack_d>
 8123884:	d9000204 	addi	r4,sp,8
 8123888:	800b883a 	mov	r5,r16
 812388c:	8124b0c0 	call	8124b0c <__unpack_d>
 8123890:	d9000417 	ldw	r4,16(sp)
 8123894:	00800044 	movi	r2,1
 8123898:	1100102e 	bgeu	r2,r4,81238dc <__muldf3+0xac>
 812389c:	d8c00917 	ldw	r3,36(sp)
 81238a0:	10c0062e 	bgeu	r2,r3,81238bc <__muldf3+0x8c>
 81238a4:	00800104 	movi	r2,4
 81238a8:	20800a26 	beq	r4,r2,81238d4 <__muldf3+0xa4>
 81238ac:	1880cc26 	beq	r3,r2,8123be0 <__muldf3+0x3b0>
 81238b0:	00800084 	movi	r2,2
 81238b4:	20800926 	beq	r4,r2,81238dc <__muldf3+0xac>
 81238b8:	1880191e 	bne	r3,r2,8123920 <__muldf3+0xf0>
 81238bc:	d8c00a17 	ldw	r3,40(sp)
 81238c0:	d8800517 	ldw	r2,20(sp)
 81238c4:	8009883a 	mov	r4,r16
 81238c8:	10c4c03a 	cmpne	r2,r2,r3
 81238cc:	d8800a15 	stw	r2,40(sp)
 81238d0:	00000706 	br	81238f0 <__muldf3+0xc0>
 81238d4:	00800084 	movi	r2,2
 81238d8:	1880c326 	beq	r3,r2,8123be8 <__muldf3+0x3b8>
 81238dc:	d8800517 	ldw	r2,20(sp)
 81238e0:	d8c00a17 	ldw	r3,40(sp)
 81238e4:	8809883a 	mov	r4,r17
 81238e8:	10c4c03a 	cmpne	r2,r2,r3
 81238ec:	d8800515 	stw	r2,20(sp)
 81238f0:	81247f80 	call	81247f8 <__pack_d>
 81238f4:	dfc01f17 	ldw	ra,124(sp)
 81238f8:	ddc01e17 	ldw	r23,120(sp)
 81238fc:	dd801d17 	ldw	r22,116(sp)
 8123900:	dd401c17 	ldw	r21,112(sp)
 8123904:	dd001b17 	ldw	r20,108(sp)
 8123908:	dcc01a17 	ldw	r19,104(sp)
 812390c:	dc801917 	ldw	r18,100(sp)
 8123910:	dc401817 	ldw	r17,96(sp)
 8123914:	dc001717 	ldw	r16,92(sp)
 8123918:	dec02004 	addi	sp,sp,128
 812391c:	f800283a 	ret
 8123920:	dd800717 	ldw	r22,28(sp)
 8123924:	dc800c17 	ldw	r18,48(sp)
 8123928:	002b883a 	mov	r21,zero
 812392c:	0023883a 	mov	r17,zero
 8123930:	a80b883a 	mov	r5,r21
 8123934:	b00d883a 	mov	r6,r22
 8123938:	880f883a 	mov	r7,r17
 812393c:	ddc00817 	ldw	r23,32(sp)
 8123940:	dcc00d17 	ldw	r19,52(sp)
 8123944:	9009883a 	mov	r4,r18
 8123948:	81243e40 	call	81243e4 <__muldi3>
 812394c:	001b883a 	mov	r13,zero
 8123950:	680f883a 	mov	r7,r13
 8123954:	b009883a 	mov	r4,r22
 8123958:	000b883a 	mov	r5,zero
 812395c:	980d883a 	mov	r6,r19
 8123960:	b82d883a 	mov	r22,r23
 8123964:	002f883a 	mov	r23,zero
 8123968:	db401615 	stw	r13,88(sp)
 812396c:	d8801315 	stw	r2,76(sp)
 8123970:	d8c01415 	stw	r3,80(sp)
 8123974:	dcc01515 	stw	r19,84(sp)
 8123978:	81243e40 	call	81243e4 <__muldi3>
 812397c:	b00d883a 	mov	r6,r22
 8123980:	000b883a 	mov	r5,zero
 8123984:	9009883a 	mov	r4,r18
 8123988:	b80f883a 	mov	r7,r23
 812398c:	1021883a 	mov	r16,r2
 8123990:	1823883a 	mov	r17,r3
 8123994:	81243e40 	call	81243e4 <__muldi3>
 8123998:	8085883a 	add	r2,r16,r2
 812399c:	140d803a 	cmpltu	r6,r2,r16
 81239a0:	88c7883a 	add	r3,r17,r3
 81239a4:	30cd883a 	add	r6,r6,r3
 81239a8:	1029883a 	mov	r20,r2
 81239ac:	302b883a 	mov	r21,r6
 81239b0:	da801317 	ldw	r10,76(sp)
 81239b4:	dac01417 	ldw	r11,80(sp)
 81239b8:	db001517 	ldw	r12,84(sp)
 81239bc:	db401617 	ldw	r13,88(sp)
 81239c0:	3440612e 	bgeu	r6,r17,8123b48 <__muldf3+0x318>
 81239c4:	0009883a 	mov	r4,zero
 81239c8:	5105883a 	add	r2,r10,r4
 81239cc:	128d803a 	cmpltu	r6,r2,r10
 81239d0:	5d07883a 	add	r3,r11,r20
 81239d4:	30cd883a 	add	r6,r6,r3
 81239d8:	0021883a 	mov	r16,zero
 81239dc:	04400044 	movi	r17,1
 81239e0:	1025883a 	mov	r18,r2
 81239e4:	3027883a 	mov	r19,r6
 81239e8:	32c06236 	bltu	r6,r11,8123b74 <__muldf3+0x344>
 81239ec:	59807a26 	beq	r11,r6,8123bd8 <__muldf3+0x3a8>
 81239f0:	680b883a 	mov	r5,r13
 81239f4:	b80f883a 	mov	r7,r23
 81239f8:	6009883a 	mov	r4,r12
 81239fc:	b00d883a 	mov	r6,r22
 8123a00:	81243e40 	call	81243e4 <__muldi3>
 8123a04:	1009883a 	mov	r4,r2
 8123a08:	000f883a 	mov	r7,zero
 8123a0c:	1545883a 	add	r2,r2,r21
 8123a10:	1111803a 	cmpltu	r8,r2,r4
 8123a14:	19c7883a 	add	r3,r3,r7
 8123a18:	40c7883a 	add	r3,r8,r3
 8123a1c:	88cb883a 	add	r5,r17,r3
 8123a20:	d8c00617 	ldw	r3,24(sp)
 8123a24:	8089883a 	add	r4,r16,r2
 8123a28:	d8800b17 	ldw	r2,44(sp)
 8123a2c:	18c00104 	addi	r3,r3,4
 8123a30:	240d803a 	cmpltu	r6,r4,r16
 8123a34:	10c7883a 	add	r3,r2,r3
 8123a38:	2013883a 	mov	r9,r4
 8123a3c:	d8800a17 	ldw	r2,40(sp)
 8123a40:	d9000517 	ldw	r4,20(sp)
 8123a44:	314d883a 	add	r6,r6,r5
 8123a48:	3015883a 	mov	r10,r6
 8123a4c:	2088c03a 	cmpne	r4,r4,r2
 8123a50:	00880034 	movhi	r2,8192
 8123a54:	10bfffc4 	addi	r2,r2,-1
 8123a58:	d9000f15 	stw	r4,60(sp)
 8123a5c:	d8c01015 	stw	r3,64(sp)
 8123a60:	1180162e 	bgeu	r2,r6,8123abc <__muldf3+0x28c>
 8123a64:	1811883a 	mov	r8,r3
 8123a68:	101f883a 	mov	r15,r2
 8123a6c:	980497fa 	slli	r2,r19,31
 8123a70:	9016d07a 	srli	r11,r18,1
 8123a74:	500697fa 	slli	r3,r10,31
 8123a78:	480cd07a 	srli	r6,r9,1
 8123a7c:	500ed07a 	srli	r7,r10,1
 8123a80:	12d6b03a 	or	r11,r2,r11
 8123a84:	00800044 	movi	r2,1
 8123a88:	198cb03a 	or	r6,r3,r6
 8123a8c:	4888703a 	and	r4,r9,r2
 8123a90:	9818d07a 	srli	r12,r19,1
 8123a94:	001b883a 	mov	r13,zero
 8123a98:	03a00034 	movhi	r14,32768
 8123a9c:	3013883a 	mov	r9,r6
 8123aa0:	3815883a 	mov	r10,r7
 8123aa4:	4091883a 	add	r8,r8,r2
 8123aa8:	20000226 	beq	r4,zero,8123ab4 <__muldf3+0x284>
 8123aac:	5b64b03a 	or	r18,r11,r13
 8123ab0:	63a6b03a 	or	r19,r12,r14
 8123ab4:	7abfed36 	bltu	r15,r10,8123a6c <__muldf3+0x23c>
 8123ab8:	da001015 	stw	r8,64(sp)
 8123abc:	00840034 	movhi	r2,4096
 8123ac0:	10bfffc4 	addi	r2,r2,-1
 8123ac4:	12801436 	bltu	r2,r10,8123b18 <__muldf3+0x2e8>
 8123ac8:	da001017 	ldw	r8,64(sp)
 8123acc:	101f883a 	mov	r15,r2
 8123ad0:	4a45883a 	add	r2,r9,r9
 8123ad4:	124d803a 	cmpltu	r6,r2,r9
 8123ad8:	5287883a 	add	r3,r10,r10
 8123adc:	9497883a 	add	r11,r18,r18
 8123ae0:	5c8f803a 	cmpltu	r7,r11,r18
 8123ae4:	9cd9883a 	add	r12,r19,r19
 8123ae8:	01000044 	movi	r4,1
 8123aec:	30cd883a 	add	r6,r6,r3
 8123af0:	3b0f883a 	add	r7,r7,r12
 8123af4:	423fffc4 	addi	r8,r8,-1
 8123af8:	1013883a 	mov	r9,r2
 8123afc:	3015883a 	mov	r10,r6
 8123b00:	111ab03a 	or	r13,r2,r4
 8123b04:	98003016 	blt	r19,zero,8123bc8 <__muldf3+0x398>
 8123b08:	5825883a 	mov	r18,r11
 8123b0c:	3827883a 	mov	r19,r7
 8123b10:	7abfef2e 	bgeu	r15,r10,8123ad0 <__muldf3+0x2a0>
 8123b14:	da001015 	stw	r8,64(sp)
 8123b18:	00803fc4 	movi	r2,255
 8123b1c:	488e703a 	and	r7,r9,r2
 8123b20:	00802004 	movi	r2,128
 8123b24:	0007883a 	mov	r3,zero
 8123b28:	0011883a 	mov	r8,zero
 8123b2c:	38801826 	beq	r7,r2,8123b90 <__muldf3+0x360>
 8123b30:	008000c4 	movi	r2,3
 8123b34:	d9000e04 	addi	r4,sp,56
 8123b38:	da801215 	stw	r10,72(sp)
 8123b3c:	d8800e15 	stw	r2,56(sp)
 8123b40:	da401115 	stw	r9,68(sp)
 8123b44:	003f6a06 	br	81238f0 <__muldf3+0xc0>
 8123b48:	89802126 	beq	r17,r6,8123bd0 <__muldf3+0x3a0>
 8123b4c:	0009883a 	mov	r4,zero
 8123b50:	5105883a 	add	r2,r10,r4
 8123b54:	128d803a 	cmpltu	r6,r2,r10
 8123b58:	5d07883a 	add	r3,r11,r20
 8123b5c:	30cd883a 	add	r6,r6,r3
 8123b60:	0021883a 	mov	r16,zero
 8123b64:	0023883a 	mov	r17,zero
 8123b68:	1025883a 	mov	r18,r2
 8123b6c:	3027883a 	mov	r19,r6
 8123b70:	32ff9e2e 	bgeu	r6,r11,81239ec <__muldf3+0x1bc>
 8123b74:	00800044 	movi	r2,1
 8123b78:	8089883a 	add	r4,r16,r2
 8123b7c:	240d803a 	cmpltu	r6,r4,r16
 8123b80:	344d883a 	add	r6,r6,r17
 8123b84:	2021883a 	mov	r16,r4
 8123b88:	3023883a 	mov	r17,r6
 8123b8c:	003f9806 	br	81239f0 <__muldf3+0x1c0>
 8123b90:	403fe71e 	bne	r8,zero,8123b30 <__muldf3+0x300>
 8123b94:	01004004 	movi	r4,256
 8123b98:	4904703a 	and	r2,r9,r4
 8123b9c:	10c4b03a 	or	r2,r2,r3
 8123ba0:	103fe31e 	bne	r2,zero,8123b30 <__muldf3+0x300>
 8123ba4:	94c4b03a 	or	r2,r18,r19
 8123ba8:	103fe126 	beq	r2,zero,8123b30 <__muldf3+0x300>
 8123bac:	49c5883a 	add	r2,r9,r7
 8123bb0:	1251803a 	cmpltu	r8,r2,r9
 8123bb4:	4291883a 	add	r8,r8,r10
 8123bb8:	013fc004 	movi	r4,-256
 8123bbc:	1112703a 	and	r9,r2,r4
 8123bc0:	4015883a 	mov	r10,r8
 8123bc4:	003fda06 	br	8123b30 <__muldf3+0x300>
 8123bc8:	6813883a 	mov	r9,r13
 8123bcc:	003fce06 	br	8123b08 <__muldf3+0x2d8>
 8123bd0:	143f7c36 	bltu	r2,r16,81239c4 <__muldf3+0x194>
 8123bd4:	003fdd06 	br	8123b4c <__muldf3+0x31c>
 8123bd8:	12bf852e 	bgeu	r2,r10,81239f0 <__muldf3+0x1c0>
 8123bdc:	003fe506 	br	8123b74 <__muldf3+0x344>
 8123be0:	00800084 	movi	r2,2
 8123be4:	20bf351e 	bne	r4,r2,81238bc <__muldf3+0x8c>
 8123be8:	010204f4 	movhi	r4,2067
 8123bec:	21065d04 	addi	r4,r4,6516
 8123bf0:	003f3f06 	br	81238f0 <__muldf3+0xc0>

08123bf4 <__divdf3>:
 8123bf4:	deffed04 	addi	sp,sp,-76
 8123bf8:	dcc01115 	stw	r19,68(sp)
 8123bfc:	dcc00404 	addi	r19,sp,16
 8123c00:	2011883a 	mov	r8,r4
 8123c04:	2813883a 	mov	r9,r5
 8123c08:	dc000e15 	stw	r16,56(sp)
 8123c0c:	d809883a 	mov	r4,sp
 8123c10:	980b883a 	mov	r5,r19
 8123c14:	dc000904 	addi	r16,sp,36
 8123c18:	dfc01215 	stw	ra,72(sp)
 8123c1c:	da400115 	stw	r9,4(sp)
 8123c20:	d9c00315 	stw	r7,12(sp)
 8123c24:	da000015 	stw	r8,0(sp)
 8123c28:	d9800215 	stw	r6,8(sp)
 8123c2c:	dc801015 	stw	r18,64(sp)
 8123c30:	dc400f15 	stw	r17,60(sp)
 8123c34:	8124b0c0 	call	8124b0c <__unpack_d>
 8123c38:	d9000204 	addi	r4,sp,8
 8123c3c:	800b883a 	mov	r5,r16
 8123c40:	8124b0c0 	call	8124b0c <__unpack_d>
 8123c44:	d9000417 	ldw	r4,16(sp)
 8123c48:	00800044 	movi	r2,1
 8123c4c:	11000b2e 	bgeu	r2,r4,8123c7c <__divdf3+0x88>
 8123c50:	d9400917 	ldw	r5,36(sp)
 8123c54:	1140762e 	bgeu	r2,r5,8123e30 <__divdf3+0x23c>
 8123c58:	d8800517 	ldw	r2,20(sp)
 8123c5c:	d8c00a17 	ldw	r3,40(sp)
 8123c60:	01800104 	movi	r6,4
 8123c64:	10c4f03a 	xor	r2,r2,r3
 8123c68:	d8800515 	stw	r2,20(sp)
 8123c6c:	21800226 	beq	r4,r6,8123c78 <__divdf3+0x84>
 8123c70:	00800084 	movi	r2,2
 8123c74:	2080141e 	bne	r4,r2,8123cc8 <__divdf3+0xd4>
 8123c78:	29000926 	beq	r5,r4,8123ca0 <__divdf3+0xac>
 8123c7c:	9809883a 	mov	r4,r19
 8123c80:	81247f80 	call	81247f8 <__pack_d>
 8123c84:	dfc01217 	ldw	ra,72(sp)
 8123c88:	dcc01117 	ldw	r19,68(sp)
 8123c8c:	dc801017 	ldw	r18,64(sp)
 8123c90:	dc400f17 	ldw	r17,60(sp)
 8123c94:	dc000e17 	ldw	r16,56(sp)
 8123c98:	dec01304 	addi	sp,sp,76
 8123c9c:	f800283a 	ret
 8123ca0:	010204f4 	movhi	r4,2067
 8123ca4:	21065d04 	addi	r4,r4,6516
 8123ca8:	81247f80 	call	81247f8 <__pack_d>
 8123cac:	dfc01217 	ldw	ra,72(sp)
 8123cb0:	dcc01117 	ldw	r19,68(sp)
 8123cb4:	dc801017 	ldw	r18,64(sp)
 8123cb8:	dc400f17 	ldw	r17,60(sp)
 8123cbc:	dc000e17 	ldw	r16,56(sp)
 8123cc0:	dec01304 	addi	sp,sp,76
 8123cc4:	f800283a 	ret
 8123cc8:	29805b26 	beq	r5,r6,8123e38 <__divdf3+0x244>
 8123ccc:	28802d26 	beq	r5,r2,8123d84 <__divdf3+0x190>
 8123cd0:	d8c00617 	ldw	r3,24(sp)
 8123cd4:	d8800b17 	ldw	r2,44(sp)
 8123cd8:	d9c00817 	ldw	r7,32(sp)
 8123cdc:	dc400d17 	ldw	r17,52(sp)
 8123ce0:	188bc83a 	sub	r5,r3,r2
 8123ce4:	d9800717 	ldw	r6,28(sp)
 8123ce8:	dc000c17 	ldw	r16,48(sp)
 8123cec:	d9400615 	stw	r5,24(sp)
 8123cf0:	3c403836 	bltu	r7,r17,8123dd4 <__divdf3+0x1e0>
 8123cf4:	89c03626 	beq	r17,r7,8123dd0 <__divdf3+0x1dc>
 8123cf8:	0015883a 	mov	r10,zero
 8123cfc:	001d883a 	mov	r14,zero
 8123d00:	02c40034 	movhi	r11,4096
 8123d04:	001f883a 	mov	r15,zero
 8123d08:	003f883a 	mov	ra,zero
 8123d0c:	04800f44 	movi	r18,61
 8123d10:	00000f06 	br	8123d50 <__divdf3+0x15c>
 8123d14:	601d883a 	mov	r14,r12
 8123d18:	681f883a 	mov	r15,r13
 8123d1c:	400d883a 	mov	r6,r8
 8123d20:	100f883a 	mov	r7,r2
 8123d24:	3191883a 	add	r8,r6,r6
 8123d28:	5808d07a 	srli	r4,r11,1
 8123d2c:	4185803a 	cmpltu	r2,r8,r6
 8123d30:	39d3883a 	add	r9,r7,r7
 8123d34:	28c6b03a 	or	r3,r5,r3
 8123d38:	1245883a 	add	r2,r2,r9
 8123d3c:	1815883a 	mov	r10,r3
 8123d40:	2017883a 	mov	r11,r4
 8123d44:	400d883a 	mov	r6,r8
 8123d48:	100f883a 	mov	r7,r2
 8123d4c:	fc801726 	beq	ra,r18,8123dac <__divdf3+0x1b8>
 8123d50:	580a97fa 	slli	r5,r11,31
 8123d54:	5006d07a 	srli	r3,r10,1
 8123d58:	ffc00044 	addi	ra,ra,1
 8123d5c:	3c7ff136 	bltu	r7,r17,8123d24 <__divdf3+0x130>
 8123d60:	3411c83a 	sub	r8,r6,r16
 8123d64:	3205803a 	cmpltu	r2,r6,r8
 8123d68:	3c53c83a 	sub	r9,r7,r17
 8123d6c:	7298b03a 	or	r12,r14,r10
 8123d70:	7adab03a 	or	r13,r15,r11
 8123d74:	4885c83a 	sub	r2,r9,r2
 8123d78:	89ffe61e 	bne	r17,r7,8123d14 <__divdf3+0x120>
 8123d7c:	343fe936 	bltu	r6,r16,8123d24 <__divdf3+0x130>
 8123d80:	003fe406 	br	8123d14 <__divdf3+0x120>
 8123d84:	9809883a 	mov	r4,r19
 8123d88:	d9800415 	stw	r6,16(sp)
 8123d8c:	81247f80 	call	81247f8 <__pack_d>
 8123d90:	dfc01217 	ldw	ra,72(sp)
 8123d94:	dcc01117 	ldw	r19,68(sp)
 8123d98:	dc801017 	ldw	r18,64(sp)
 8123d9c:	dc400f17 	ldw	r17,60(sp)
 8123da0:	dc000e17 	ldw	r16,56(sp)
 8123da4:	dec01304 	addi	sp,sp,76
 8123da8:	f800283a 	ret
 8123dac:	00803fc4 	movi	r2,255
 8123db0:	7090703a 	and	r8,r14,r2
 8123db4:	00802004 	movi	r2,128
 8123db8:	0007883a 	mov	r3,zero
 8123dbc:	0013883a 	mov	r9,zero
 8123dc0:	40800d26 	beq	r8,r2,8123df8 <__divdf3+0x204>
 8123dc4:	dbc00815 	stw	r15,32(sp)
 8123dc8:	db800715 	stw	r14,28(sp)
 8123dcc:	003fab06 	br	8123c7c <__divdf3+0x88>
 8123dd0:	343fc92e 	bgeu	r6,r16,8123cf8 <__divdf3+0x104>
 8123dd4:	3185883a 	add	r2,r6,r6
 8123dd8:	1189803a 	cmpltu	r4,r2,r6
 8123ddc:	39c7883a 	add	r3,r7,r7
 8123de0:	20c9883a 	add	r4,r4,r3
 8123de4:	297fffc4 	addi	r5,r5,-1
 8123de8:	100d883a 	mov	r6,r2
 8123dec:	200f883a 	mov	r7,r4
 8123df0:	d9400615 	stw	r5,24(sp)
 8123df4:	003fc006 	br	8123cf8 <__divdf3+0x104>
 8123df8:	483ff21e 	bne	r9,zero,8123dc4 <__divdf3+0x1d0>
 8123dfc:	01004004 	movi	r4,256
 8123e00:	7104703a 	and	r2,r14,r4
 8123e04:	10c4b03a 	or	r2,r2,r3
 8123e08:	103fee1e 	bne	r2,zero,8123dc4 <__divdf3+0x1d0>
 8123e0c:	31c4b03a 	or	r2,r6,r7
 8123e10:	103fec26 	beq	r2,zero,8123dc4 <__divdf3+0x1d0>
 8123e14:	7205883a 	add	r2,r14,r8
 8123e18:	1391803a 	cmpltu	r8,r2,r14
 8123e1c:	43d1883a 	add	r8,r8,r15
 8123e20:	013fc004 	movi	r4,-256
 8123e24:	111c703a 	and	r14,r2,r4
 8123e28:	401f883a 	mov	r15,r8
 8123e2c:	003fe506 	br	8123dc4 <__divdf3+0x1d0>
 8123e30:	8009883a 	mov	r4,r16
 8123e34:	003f9206 	br	8123c80 <__divdf3+0x8c>
 8123e38:	9809883a 	mov	r4,r19
 8123e3c:	d8000715 	stw	zero,28(sp)
 8123e40:	d8000815 	stw	zero,32(sp)
 8123e44:	d8000615 	stw	zero,24(sp)
 8123e48:	003f8d06 	br	8123c80 <__divdf3+0x8c>

08123e4c <__eqdf2>:
 8123e4c:	deffef04 	addi	sp,sp,-68
 8123e50:	dc400f15 	stw	r17,60(sp)
 8123e54:	dc400404 	addi	r17,sp,16
 8123e58:	2005883a 	mov	r2,r4
 8123e5c:	2807883a 	mov	r3,r5
 8123e60:	dc000e15 	stw	r16,56(sp)
 8123e64:	d809883a 	mov	r4,sp
 8123e68:	880b883a 	mov	r5,r17
 8123e6c:	dc000904 	addi	r16,sp,36
 8123e70:	d8c00115 	stw	r3,4(sp)
 8123e74:	d8800015 	stw	r2,0(sp)
 8123e78:	d9800215 	stw	r6,8(sp)
 8123e7c:	dfc01015 	stw	ra,64(sp)
 8123e80:	d9c00315 	stw	r7,12(sp)
 8123e84:	8124b0c0 	call	8124b0c <__unpack_d>
 8123e88:	d9000204 	addi	r4,sp,8
 8123e8c:	800b883a 	mov	r5,r16
 8123e90:	8124b0c0 	call	8124b0c <__unpack_d>
 8123e94:	d8800417 	ldw	r2,16(sp)
 8123e98:	00c00044 	movi	r3,1
 8123e9c:	180d883a 	mov	r6,r3
 8123ea0:	1880062e 	bgeu	r3,r2,8123ebc <__eqdf2+0x70>
 8123ea4:	d8800917 	ldw	r2,36(sp)
 8123ea8:	8809883a 	mov	r4,r17
 8123eac:	800b883a 	mov	r5,r16
 8123eb0:	1880022e 	bgeu	r3,r2,8123ebc <__eqdf2+0x70>
 8123eb4:	8124c440 	call	8124c44 <__fpcmp_parts_d>
 8123eb8:	100d883a 	mov	r6,r2
 8123ebc:	3005883a 	mov	r2,r6
 8123ec0:	dfc01017 	ldw	ra,64(sp)
 8123ec4:	dc400f17 	ldw	r17,60(sp)
 8123ec8:	dc000e17 	ldw	r16,56(sp)
 8123ecc:	dec01104 	addi	sp,sp,68
 8123ed0:	f800283a 	ret

08123ed4 <__nedf2>:
 8123ed4:	deffef04 	addi	sp,sp,-68
 8123ed8:	dc400f15 	stw	r17,60(sp)
 8123edc:	dc400404 	addi	r17,sp,16
 8123ee0:	2005883a 	mov	r2,r4
 8123ee4:	2807883a 	mov	r3,r5
 8123ee8:	dc000e15 	stw	r16,56(sp)
 8123eec:	d809883a 	mov	r4,sp
 8123ef0:	880b883a 	mov	r5,r17
 8123ef4:	dc000904 	addi	r16,sp,36
 8123ef8:	d8c00115 	stw	r3,4(sp)
 8123efc:	d8800015 	stw	r2,0(sp)
 8123f00:	d9800215 	stw	r6,8(sp)
 8123f04:	dfc01015 	stw	ra,64(sp)
 8123f08:	d9c00315 	stw	r7,12(sp)
 8123f0c:	8124b0c0 	call	8124b0c <__unpack_d>
 8123f10:	d9000204 	addi	r4,sp,8
 8123f14:	800b883a 	mov	r5,r16
 8123f18:	8124b0c0 	call	8124b0c <__unpack_d>
 8123f1c:	d8800417 	ldw	r2,16(sp)
 8123f20:	00c00044 	movi	r3,1
 8123f24:	180d883a 	mov	r6,r3
 8123f28:	1880062e 	bgeu	r3,r2,8123f44 <__nedf2+0x70>
 8123f2c:	d8800917 	ldw	r2,36(sp)
 8123f30:	8809883a 	mov	r4,r17
 8123f34:	800b883a 	mov	r5,r16
 8123f38:	1880022e 	bgeu	r3,r2,8123f44 <__nedf2+0x70>
 8123f3c:	8124c440 	call	8124c44 <__fpcmp_parts_d>
 8123f40:	100d883a 	mov	r6,r2
 8123f44:	3005883a 	mov	r2,r6
 8123f48:	dfc01017 	ldw	ra,64(sp)
 8123f4c:	dc400f17 	ldw	r17,60(sp)
 8123f50:	dc000e17 	ldw	r16,56(sp)
 8123f54:	dec01104 	addi	sp,sp,68
 8123f58:	f800283a 	ret

08123f5c <__gtdf2>:
 8123f5c:	deffef04 	addi	sp,sp,-68
 8123f60:	dc400f15 	stw	r17,60(sp)
 8123f64:	dc400404 	addi	r17,sp,16
 8123f68:	2005883a 	mov	r2,r4
 8123f6c:	2807883a 	mov	r3,r5
 8123f70:	dc000e15 	stw	r16,56(sp)
 8123f74:	d809883a 	mov	r4,sp
 8123f78:	880b883a 	mov	r5,r17
 8123f7c:	dc000904 	addi	r16,sp,36
 8123f80:	d8c00115 	stw	r3,4(sp)
 8123f84:	d8800015 	stw	r2,0(sp)
 8123f88:	d9800215 	stw	r6,8(sp)
 8123f8c:	dfc01015 	stw	ra,64(sp)
 8123f90:	d9c00315 	stw	r7,12(sp)
 8123f94:	8124b0c0 	call	8124b0c <__unpack_d>
 8123f98:	d9000204 	addi	r4,sp,8
 8123f9c:	800b883a 	mov	r5,r16
 8123fa0:	8124b0c0 	call	8124b0c <__unpack_d>
 8123fa4:	d8800417 	ldw	r2,16(sp)
 8123fa8:	00c00044 	movi	r3,1
 8123fac:	01bfffc4 	movi	r6,-1
 8123fb0:	1880062e 	bgeu	r3,r2,8123fcc <__gtdf2+0x70>
 8123fb4:	d8800917 	ldw	r2,36(sp)
 8123fb8:	8809883a 	mov	r4,r17
 8123fbc:	800b883a 	mov	r5,r16
 8123fc0:	1880022e 	bgeu	r3,r2,8123fcc <__gtdf2+0x70>
 8123fc4:	8124c440 	call	8124c44 <__fpcmp_parts_d>
 8123fc8:	100d883a 	mov	r6,r2
 8123fcc:	3005883a 	mov	r2,r6
 8123fd0:	dfc01017 	ldw	ra,64(sp)
 8123fd4:	dc400f17 	ldw	r17,60(sp)
 8123fd8:	dc000e17 	ldw	r16,56(sp)
 8123fdc:	dec01104 	addi	sp,sp,68
 8123fe0:	f800283a 	ret

08123fe4 <__ltdf2>:
 8123fe4:	deffef04 	addi	sp,sp,-68
 8123fe8:	dc400f15 	stw	r17,60(sp)
 8123fec:	dc400404 	addi	r17,sp,16
 8123ff0:	2005883a 	mov	r2,r4
 8123ff4:	2807883a 	mov	r3,r5
 8123ff8:	dc000e15 	stw	r16,56(sp)
 8123ffc:	d809883a 	mov	r4,sp
 8124000:	880b883a 	mov	r5,r17
 8124004:	dc000904 	addi	r16,sp,36
 8124008:	d8c00115 	stw	r3,4(sp)
 812400c:	d8800015 	stw	r2,0(sp)
 8124010:	d9800215 	stw	r6,8(sp)
 8124014:	dfc01015 	stw	ra,64(sp)
 8124018:	d9c00315 	stw	r7,12(sp)
 812401c:	8124b0c0 	call	8124b0c <__unpack_d>
 8124020:	d9000204 	addi	r4,sp,8
 8124024:	800b883a 	mov	r5,r16
 8124028:	8124b0c0 	call	8124b0c <__unpack_d>
 812402c:	d8800417 	ldw	r2,16(sp)
 8124030:	00c00044 	movi	r3,1
 8124034:	180d883a 	mov	r6,r3
 8124038:	1880062e 	bgeu	r3,r2,8124054 <__ltdf2+0x70>
 812403c:	d8800917 	ldw	r2,36(sp)
 8124040:	8809883a 	mov	r4,r17
 8124044:	800b883a 	mov	r5,r16
 8124048:	1880022e 	bgeu	r3,r2,8124054 <__ltdf2+0x70>
 812404c:	8124c440 	call	8124c44 <__fpcmp_parts_d>
 8124050:	100d883a 	mov	r6,r2
 8124054:	3005883a 	mov	r2,r6
 8124058:	dfc01017 	ldw	ra,64(sp)
 812405c:	dc400f17 	ldw	r17,60(sp)
 8124060:	dc000e17 	ldw	r16,56(sp)
 8124064:	dec01104 	addi	sp,sp,68
 8124068:	f800283a 	ret

0812406c <__ledf2>:
 812406c:	deffef04 	addi	sp,sp,-68
 8124070:	dc400f15 	stw	r17,60(sp)
 8124074:	dc400404 	addi	r17,sp,16
 8124078:	2005883a 	mov	r2,r4
 812407c:	2807883a 	mov	r3,r5
 8124080:	dc000e15 	stw	r16,56(sp)
 8124084:	d809883a 	mov	r4,sp
 8124088:	880b883a 	mov	r5,r17
 812408c:	dc000904 	addi	r16,sp,36
 8124090:	d8c00115 	stw	r3,4(sp)
 8124094:	d8800015 	stw	r2,0(sp)
 8124098:	d9800215 	stw	r6,8(sp)
 812409c:	dfc01015 	stw	ra,64(sp)
 81240a0:	d9c00315 	stw	r7,12(sp)
 81240a4:	8124b0c0 	call	8124b0c <__unpack_d>
 81240a8:	d9000204 	addi	r4,sp,8
 81240ac:	800b883a 	mov	r5,r16
 81240b0:	8124b0c0 	call	8124b0c <__unpack_d>
 81240b4:	d8800417 	ldw	r2,16(sp)
 81240b8:	00c00044 	movi	r3,1
 81240bc:	180d883a 	mov	r6,r3
 81240c0:	1880062e 	bgeu	r3,r2,81240dc <__ledf2+0x70>
 81240c4:	d8800917 	ldw	r2,36(sp)
 81240c8:	8809883a 	mov	r4,r17
 81240cc:	800b883a 	mov	r5,r16
 81240d0:	1880022e 	bgeu	r3,r2,81240dc <__ledf2+0x70>
 81240d4:	8124c440 	call	8124c44 <__fpcmp_parts_d>
 81240d8:	100d883a 	mov	r6,r2
 81240dc:	3005883a 	mov	r2,r6
 81240e0:	dfc01017 	ldw	ra,64(sp)
 81240e4:	dc400f17 	ldw	r17,60(sp)
 81240e8:	dc000e17 	ldw	r16,56(sp)
 81240ec:	dec01104 	addi	sp,sp,68
 81240f0:	f800283a 	ret

081240f4 <__floatsidf>:
 81240f4:	2006d7fa 	srli	r3,r4,31
 81240f8:	defff604 	addi	sp,sp,-40
 81240fc:	008000c4 	movi	r2,3
 8124100:	dfc00915 	stw	ra,36(sp)
 8124104:	dcc00815 	stw	r19,32(sp)
 8124108:	dc800715 	stw	r18,28(sp)
 812410c:	dc400615 	stw	r17,24(sp)
 8124110:	dc000515 	stw	r16,20(sp)
 8124114:	d8800015 	stw	r2,0(sp)
 8124118:	d8c00115 	stw	r3,4(sp)
 812411c:	20000f1e 	bne	r4,zero,812415c <__floatsidf+0x68>
 8124120:	00800084 	movi	r2,2
 8124124:	d8800015 	stw	r2,0(sp)
 8124128:	d809883a 	mov	r4,sp
 812412c:	81247f80 	call	81247f8 <__pack_d>
 8124130:	1009883a 	mov	r4,r2
 8124134:	180b883a 	mov	r5,r3
 8124138:	2005883a 	mov	r2,r4
 812413c:	2807883a 	mov	r3,r5
 8124140:	dfc00917 	ldw	ra,36(sp)
 8124144:	dcc00817 	ldw	r19,32(sp)
 8124148:	dc800717 	ldw	r18,28(sp)
 812414c:	dc400617 	ldw	r17,24(sp)
 8124150:	dc000517 	ldw	r16,20(sp)
 8124154:	dec00a04 	addi	sp,sp,40
 8124158:	f800283a 	ret
 812415c:	00800f04 	movi	r2,60
 8124160:	1807003a 	cmpeq	r3,r3,zero
 8124164:	d8800215 	stw	r2,8(sp)
 8124168:	18001126 	beq	r3,zero,81241b0 <__floatsidf+0xbc>
 812416c:	0027883a 	mov	r19,zero
 8124170:	2025883a 	mov	r18,r4
 8124174:	d9000315 	stw	r4,12(sp)
 8124178:	dcc00415 	stw	r19,16(sp)
 812417c:	812447c0 	call	812447c <__clzsi2>
 8124180:	11000744 	addi	r4,r2,29
 8124184:	013fe80e 	bge	zero,r4,8124128 <__floatsidf+0x34>
 8124188:	10bfff44 	addi	r2,r2,-3
 812418c:	10000c16 	blt	r2,zero,81241c0 <__floatsidf+0xcc>
 8124190:	90a2983a 	sll	r17,r18,r2
 8124194:	0021883a 	mov	r16,zero
 8124198:	d8800217 	ldw	r2,8(sp)
 812419c:	dc400415 	stw	r17,16(sp)
 81241a0:	dc000315 	stw	r16,12(sp)
 81241a4:	1105c83a 	sub	r2,r2,r4
 81241a8:	d8800215 	stw	r2,8(sp)
 81241ac:	003fde06 	br	8124128 <__floatsidf+0x34>
 81241b0:	00a00034 	movhi	r2,32768
 81241b4:	20800a26 	beq	r4,r2,81241e0 <__floatsidf+0xec>
 81241b8:	0109c83a 	sub	r4,zero,r4
 81241bc:	003feb06 	br	812416c <__floatsidf+0x78>
 81241c0:	9006d07a 	srli	r3,r18,1
 81241c4:	008007c4 	movi	r2,31
 81241c8:	1105c83a 	sub	r2,r2,r4
 81241cc:	1886d83a 	srl	r3,r3,r2
 81241d0:	9922983a 	sll	r17,r19,r4
 81241d4:	9120983a 	sll	r16,r18,r4
 81241d8:	1c62b03a 	or	r17,r3,r17
 81241dc:	003fee06 	br	8124198 <__floatsidf+0xa4>
 81241e0:	0009883a 	mov	r4,zero
 81241e4:	01707834 	movhi	r5,49632
 81241e8:	003fd306 	br	8124138 <__floatsidf+0x44>

081241ec <__make_dp>:
 81241ec:	defff904 	addi	sp,sp,-28
 81241f0:	d8c00717 	ldw	r3,28(sp)
 81241f4:	d9000015 	stw	r4,0(sp)
 81241f8:	d809883a 	mov	r4,sp
 81241fc:	dfc00515 	stw	ra,20(sp)
 8124200:	d9c00615 	stw	r7,24(sp)
 8124204:	d9400115 	stw	r5,4(sp)
 8124208:	d9800215 	stw	r6,8(sp)
 812420c:	d8c00415 	stw	r3,16(sp)
 8124210:	d9c00315 	stw	r7,12(sp)
 8124214:	81247f80 	call	81247f8 <__pack_d>
 8124218:	dfc00517 	ldw	ra,20(sp)
 812421c:	dec00704 	addi	sp,sp,28
 8124220:	f800283a 	ret

08124224 <__truncdfsf2>:
 8124224:	defff804 	addi	sp,sp,-32
 8124228:	2005883a 	mov	r2,r4
 812422c:	2807883a 	mov	r3,r5
 8124230:	d809883a 	mov	r4,sp
 8124234:	d9400204 	addi	r5,sp,8
 8124238:	d8c00115 	stw	r3,4(sp)
 812423c:	d8800015 	stw	r2,0(sp)
 8124240:	dfc00715 	stw	ra,28(sp)
 8124244:	8124b0c0 	call	8124b0c <__unpack_d>
 8124248:	d9c00517 	ldw	r7,20(sp)
 812424c:	da000617 	ldw	r8,24(sp)
 8124250:	02d00034 	movhi	r11,16384
 8124254:	5affffc4 	addi	r11,r11,-1
 8124258:	3812d7ba 	srli	r9,r7,30
 812425c:	401a90ba 	slli	r13,r8,2
 8124260:	3ac4703a 	and	r2,r7,r11
 8124264:	0007883a 	mov	r3,zero
 8124268:	6a52b03a 	or	r9,r13,r9
 812426c:	10c4b03a 	or	r2,r2,r3
 8124270:	d9000217 	ldw	r4,8(sp)
 8124274:	d9400317 	ldw	r5,12(sp)
 8124278:	d9800417 	ldw	r6,16(sp)
 812427c:	480f883a 	mov	r7,r9
 8124280:	10000126 	beq	r2,zero,8124288 <__truncdfsf2+0x64>
 8124284:	49c00054 	ori	r7,r9,1
 8124288:	81247cc0 	call	81247cc <__make_fp>
 812428c:	dfc00717 	ldw	ra,28(sp)
 8124290:	dec00804 	addi	sp,sp,32
 8124294:	f800283a 	ret

08124298 <udivmodsi4>:
 8124298:	29001b2e 	bgeu	r5,r4,8124308 <udivmodsi4+0x70>
 812429c:	28001a16 	blt	r5,zero,8124308 <udivmodsi4+0x70>
 81242a0:	00800044 	movi	r2,1
 81242a4:	0007883a 	mov	r3,zero
 81242a8:	01c007c4 	movi	r7,31
 81242ac:	00000306 	br	81242bc <udivmodsi4+0x24>
 81242b0:	19c01326 	beq	r3,r7,8124300 <udivmodsi4+0x68>
 81242b4:	18c00044 	addi	r3,r3,1
 81242b8:	28000416 	blt	r5,zero,81242cc <udivmodsi4+0x34>
 81242bc:	294b883a 	add	r5,r5,r5
 81242c0:	1085883a 	add	r2,r2,r2
 81242c4:	293ffa36 	bltu	r5,r4,81242b0 <udivmodsi4+0x18>
 81242c8:	10000d26 	beq	r2,zero,8124300 <udivmodsi4+0x68>
 81242cc:	0007883a 	mov	r3,zero
 81242d0:	21400236 	bltu	r4,r5,81242dc <udivmodsi4+0x44>
 81242d4:	2149c83a 	sub	r4,r4,r5
 81242d8:	1886b03a 	or	r3,r3,r2
 81242dc:	1004d07a 	srli	r2,r2,1
 81242e0:	280ad07a 	srli	r5,r5,1
 81242e4:	103ffa1e 	bne	r2,zero,81242d0 <udivmodsi4+0x38>
 81242e8:	30000226 	beq	r6,zero,81242f4 <udivmodsi4+0x5c>
 81242ec:	2005883a 	mov	r2,r4
 81242f0:	f800283a 	ret
 81242f4:	1809883a 	mov	r4,r3
 81242f8:	2005883a 	mov	r2,r4
 81242fc:	f800283a 	ret
 8124300:	0007883a 	mov	r3,zero
 8124304:	003ff806 	br	81242e8 <udivmodsi4+0x50>
 8124308:	00800044 	movi	r2,1
 812430c:	0007883a 	mov	r3,zero
 8124310:	003fef06 	br	81242d0 <udivmodsi4+0x38>

08124314 <__divsi3>:
 8124314:	defffe04 	addi	sp,sp,-8
 8124318:	dc000015 	stw	r16,0(sp)
 812431c:	dfc00115 	stw	ra,4(sp)
 8124320:	0021883a 	mov	r16,zero
 8124324:	20000c16 	blt	r4,zero,8124358 <__divsi3+0x44>
 8124328:	000d883a 	mov	r6,zero
 812432c:	28000e16 	blt	r5,zero,8124368 <__divsi3+0x54>
 8124330:	81242980 	call	8124298 <udivmodsi4>
 8124334:	1007883a 	mov	r3,r2
 8124338:	8005003a 	cmpeq	r2,r16,zero
 812433c:	1000011e 	bne	r2,zero,8124344 <__divsi3+0x30>
 8124340:	00c7c83a 	sub	r3,zero,r3
 8124344:	1805883a 	mov	r2,r3
 8124348:	dfc00117 	ldw	ra,4(sp)
 812434c:	dc000017 	ldw	r16,0(sp)
 8124350:	dec00204 	addi	sp,sp,8
 8124354:	f800283a 	ret
 8124358:	0109c83a 	sub	r4,zero,r4
 812435c:	04000044 	movi	r16,1
 8124360:	000d883a 	mov	r6,zero
 8124364:	283ff20e 	bge	r5,zero,8124330 <__divsi3+0x1c>
 8124368:	014bc83a 	sub	r5,zero,r5
 812436c:	8021003a 	cmpeq	r16,r16,zero
 8124370:	003fef06 	br	8124330 <__divsi3+0x1c>

08124374 <__modsi3>:
 8124374:	deffff04 	addi	sp,sp,-4
 8124378:	dfc00015 	stw	ra,0(sp)
 812437c:	01800044 	movi	r6,1
 8124380:	2807883a 	mov	r3,r5
 8124384:	20000416 	blt	r4,zero,8124398 <__modsi3+0x24>
 8124388:	28000c16 	blt	r5,zero,81243bc <__modsi3+0x48>
 812438c:	dfc00017 	ldw	ra,0(sp)
 8124390:	dec00104 	addi	sp,sp,4
 8124394:	81242981 	jmpi	8124298 <udivmodsi4>
 8124398:	0109c83a 	sub	r4,zero,r4
 812439c:	28000b16 	blt	r5,zero,81243cc <__modsi3+0x58>
 81243a0:	180b883a 	mov	r5,r3
 81243a4:	01800044 	movi	r6,1
 81243a8:	81242980 	call	8124298 <udivmodsi4>
 81243ac:	0085c83a 	sub	r2,zero,r2
 81243b0:	dfc00017 	ldw	ra,0(sp)
 81243b4:	dec00104 	addi	sp,sp,4
 81243b8:	f800283a 	ret
 81243bc:	014bc83a 	sub	r5,zero,r5
 81243c0:	dfc00017 	ldw	ra,0(sp)
 81243c4:	dec00104 	addi	sp,sp,4
 81243c8:	81242981 	jmpi	8124298 <udivmodsi4>
 81243cc:	0147c83a 	sub	r3,zero,r5
 81243d0:	003ff306 	br	81243a0 <__modsi3+0x2c>

081243d4 <__udivsi3>:
 81243d4:	000d883a 	mov	r6,zero
 81243d8:	81242981 	jmpi	8124298 <udivmodsi4>

081243dc <__umodsi3>:
 81243dc:	01800044 	movi	r6,1
 81243e0:	81242981 	jmpi	8124298 <udivmodsi4>

081243e4 <__muldi3>:
 81243e4:	2011883a 	mov	r8,r4
 81243e8:	427fffcc 	andi	r9,r8,65535
 81243ec:	4018d43a 	srli	r12,r8,16
 81243f0:	32bfffcc 	andi	r10,r6,65535
 81243f4:	3016d43a 	srli	r11,r6,16
 81243f8:	4a85383a 	mul	r2,r9,r10
 81243fc:	6295383a 	mul	r10,r12,r10
 8124400:	4ad3383a 	mul	r9,r9,r11
 8124404:	113fffcc 	andi	r4,r2,65535
 8124408:	1004d43a 	srli	r2,r2,16
 812440c:	4a93883a 	add	r9,r9,r10
 8124410:	3807883a 	mov	r3,r7
 8124414:	1245883a 	add	r2,r2,r9
 8124418:	280f883a 	mov	r7,r5
 812441c:	180b883a 	mov	r5,r3
 8124420:	1006943a 	slli	r3,r2,16
 8124424:	defffd04 	addi	sp,sp,-12
 8124428:	dc800215 	stw	r18,8(sp)
 812442c:	1907883a 	add	r3,r3,r4
 8124430:	dc400115 	stw	r17,4(sp)
 8124434:	dc000015 	stw	r16,0(sp)
 8124438:	4165383a 	mul	r18,r8,r5
 812443c:	31e3383a 	mul	r17,r6,r7
 8124440:	1012d43a 	srli	r9,r2,16
 8124444:	62d9383a 	mul	r12,r12,r11
 8124448:	181f883a 	mov	r15,r3
 812444c:	1280022e 	bgeu	r2,r10,8124458 <__muldi3+0x74>
 8124450:	00800074 	movhi	r2,1
 8124454:	6099883a 	add	r12,r12,r2
 8124458:	624d883a 	add	r6,r12,r9
 812445c:	9187883a 	add	r3,r18,r6
 8124460:	88c7883a 	add	r3,r17,r3
 8124464:	7805883a 	mov	r2,r15
 8124468:	dc800217 	ldw	r18,8(sp)
 812446c:	dc400117 	ldw	r17,4(sp)
 8124470:	dc000017 	ldw	r16,0(sp)
 8124474:	dec00304 	addi	sp,sp,12
 8124478:	f800283a 	ret

0812447c <__clzsi2>:
 812447c:	00bfffd4 	movui	r2,65535
 8124480:	11000e36 	bltu	r2,r4,81244bc <__clzsi2+0x40>
 8124484:	00803fc4 	movi	r2,255
 8124488:	01400204 	movi	r5,8
 812448c:	0007883a 	mov	r3,zero
 8124490:	11001036 	bltu	r2,r4,81244d4 <__clzsi2+0x58>
 8124494:	000b883a 	mov	r5,zero
 8124498:	20c6d83a 	srl	r3,r4,r3
 812449c:	008204f4 	movhi	r2,2067
 81244a0:	10866204 	addi	r2,r2,6536
 81244a4:	1887883a 	add	r3,r3,r2
 81244a8:	18800003 	ldbu	r2,0(r3)
 81244ac:	00c00804 	movi	r3,32
 81244b0:	2885883a 	add	r2,r5,r2
 81244b4:	1885c83a 	sub	r2,r3,r2
 81244b8:	f800283a 	ret
 81244bc:	01400404 	movi	r5,16
 81244c0:	00804034 	movhi	r2,256
 81244c4:	10bfffc4 	addi	r2,r2,-1
 81244c8:	2807883a 	mov	r3,r5
 81244cc:	113ff22e 	bgeu	r2,r4,8124498 <__clzsi2+0x1c>
 81244d0:	01400604 	movi	r5,24
 81244d4:	2807883a 	mov	r3,r5
 81244d8:	20c6d83a 	srl	r3,r4,r3
 81244dc:	008204f4 	movhi	r2,2067
 81244e0:	10866204 	addi	r2,r2,6536
 81244e4:	1887883a 	add	r3,r3,r2
 81244e8:	18800003 	ldbu	r2,0(r3)
 81244ec:	00c00804 	movi	r3,32
 81244f0:	2885883a 	add	r2,r5,r2
 81244f4:	1885c83a 	sub	r2,r3,r2
 81244f8:	f800283a 	ret

081244fc <__pack_f>:
 81244fc:	20c00017 	ldw	r3,0(r4)
 8124500:	01c00044 	movi	r7,1
 8124504:	21800317 	ldw	r6,12(r4)
 8124508:	21400117 	ldw	r5,4(r4)
 812450c:	38c02d2e 	bgeu	r7,r3,81245c4 <__pack_f+0xc8>
 8124510:	00800104 	movi	r2,4
 8124514:	18802826 	beq	r3,r2,81245b8 <__pack_f+0xbc>
 8124518:	00800084 	movi	r2,2
 812451c:	18800126 	beq	r3,r2,8124524 <__pack_f+0x28>
 8124520:	3000101e 	bne	r6,zero,8124564 <__pack_f+0x68>
 8124524:	000d883a 	mov	r6,zero
 8124528:	0007883a 	mov	r3,zero
 812452c:	19003fcc 	andi	r4,r3,255
 8124530:	200895fa 	slli	r4,r4,23
 8124534:	00c02034 	movhi	r3,128
 8124538:	18ffffc4 	addi	r3,r3,-1
 812453c:	30c6703a 	and	r3,r6,r3
 8124540:	10a0002c 	andhi	r2,r2,32768
 8124544:	10c4b03a 	or	r2,r2,r3
 8124548:	280a97fa 	slli	r5,r5,31
 812454c:	1104b03a 	or	r2,r2,r4
 8124550:	00e00034 	movhi	r3,32768
 8124554:	18ffffc4 	addi	r3,r3,-1
 8124558:	10c4703a 	and	r2,r2,r3
 812455c:	1144b03a 	or	r2,r2,r5
 8124560:	f800283a 	ret
 8124564:	21000217 	ldw	r4,8(r4)
 8124568:	00bfe084 	movi	r2,-126
 812456c:	20801b16 	blt	r4,r2,81245dc <__pack_f+0xe0>
 8124570:	00801fc4 	movi	r2,127
 8124574:	11001016 	blt	r2,r4,81245b8 <__pack_f+0xbc>
 8124578:	308e703a 	and	r7,r6,r2
 812457c:	2087883a 	add	r3,r4,r2
 8124580:	00801004 	movi	r2,64
 8124584:	38800526 	beq	r7,r2,812459c <__pack_f+0xa0>
 8124588:	31800fc4 	addi	r6,r6,63
 812458c:	30000716 	blt	r6,zero,81245ac <__pack_f+0xb0>
 8124590:	300490ba 	slli	r2,r6,2
 8124594:	100cd27a 	srli	r6,r2,9
 8124598:	003fe406 	br	812452c <__pack_f+0x30>
 812459c:	3080200c 	andi	r2,r6,128
 81245a0:	103ffa26 	beq	r2,zero,812458c <__pack_f+0x90>
 81245a4:	31cd883a 	add	r6,r6,r7
 81245a8:	003ff806 	br	812458c <__pack_f+0x90>
 81245ac:	300cd07a 	srli	r6,r6,1
 81245b0:	18c00044 	addi	r3,r3,1
 81245b4:	003ff606 	br	8124590 <__pack_f+0x94>
 81245b8:	000d883a 	mov	r6,zero
 81245bc:	00ffffc4 	movi	r3,-1
 81245c0:	003fda06 	br	812452c <__pack_f+0x30>
 81245c4:	31800434 	orhi	r6,r6,16
 81245c8:	00802034 	movhi	r2,128
 81245cc:	10bfffc4 	addi	r2,r2,-1
 81245d0:	308c703a 	and	r6,r6,r2
 81245d4:	00ffffc4 	movi	r3,-1
 81245d8:	003fd406 	br	812452c <__pack_f+0x30>
 81245dc:	1109c83a 	sub	r4,r2,r4
 81245e0:	00800644 	movi	r2,25
 81245e4:	11001216 	blt	r2,r4,8124630 <__pack_f+0x134>
 81245e8:	3904983a 	sll	r2,r7,r4
 81245ec:	3106d83a 	srl	r3,r6,r4
 81245f0:	10bfffc4 	addi	r2,r2,-1
 81245f4:	3084703a 	and	r2,r6,r2
 81245f8:	1004c03a 	cmpne	r2,r2,zero
 81245fc:	1886b03a 	or	r3,r3,r2
 8124600:	19001fcc 	andi	r4,r3,127
 8124604:	00801004 	movi	r2,64
 8124608:	20800c26 	beq	r4,r2,812463c <__pack_f+0x140>
 812460c:	18c00fc4 	addi	r3,r3,63
 8124610:	00900034 	movhi	r2,16384
 8124614:	10bfffc4 	addi	r2,r2,-1
 8124618:	180cd1fa 	srli	r6,r3,7
 812461c:	10c7803a 	cmpltu	r3,r2,r3
 8124620:	00802034 	movhi	r2,128
 8124624:	10bfffc4 	addi	r2,r2,-1
 8124628:	308c703a 	and	r6,r6,r2
 812462c:	003fbf06 	br	812452c <__pack_f+0x30>
 8124630:	0007883a 	mov	r3,zero
 8124634:	000d883a 	mov	r6,zero
 8124638:	003ff906 	br	8124620 <__pack_f+0x124>
 812463c:	1880200c 	andi	r2,r3,128
 8124640:	10000126 	beq	r2,zero,8124648 <__pack_f+0x14c>
 8124644:	1907883a 	add	r3,r3,r4
 8124648:	180cd1fa 	srli	r6,r3,7
 812464c:	00900034 	movhi	r2,16384
 8124650:	10bfffc4 	addi	r2,r2,-1
 8124654:	10c7803a 	cmpltu	r3,r2,r3
 8124658:	003ff106 	br	8124620 <__pack_f+0x124>

0812465c <__unpack_f>:
 812465c:	21800017 	ldw	r6,0(r4)
 8124660:	00c02034 	movhi	r3,128
 8124664:	18ffffc4 	addi	r3,r3,-1
 8124668:	3004d5fa 	srli	r2,r6,23
 812466c:	3008d7fa 	srli	r4,r6,31
 8124670:	30ce703a 	and	r7,r6,r3
 8124674:	10c03fcc 	andi	r3,r2,255
 8124678:	29000115 	stw	r4,4(r5)
 812467c:	1800131e 	bne	r3,zero,81246cc <__unpack_f+0x70>
 8124680:	38000f26 	beq	r7,zero,81246c0 <__unpack_f+0x64>
 8124684:	380691fa 	slli	r3,r7,7
 8124688:	01bfe084 	movi	r6,-126
 812468c:	008000c4 	movi	r2,3
 8124690:	01100034 	movhi	r4,16384
 8124694:	213fffc4 	addi	r4,r4,-1
 8124698:	28800015 	stw	r2,0(r5)
 812469c:	29800215 	stw	r6,8(r5)
 81246a0:	20c00536 	bltu	r4,r3,81246b8 <__unpack_f+0x5c>
 81246a4:	3005883a 	mov	r2,r6
 81246a8:	18c7883a 	add	r3,r3,r3
 81246ac:	10bfffc4 	addi	r2,r2,-1
 81246b0:	20fffd2e 	bgeu	r4,r3,81246a8 <__unpack_f+0x4c>
 81246b4:	28800215 	stw	r2,8(r5)
 81246b8:	28c00315 	stw	r3,12(r5)
 81246bc:	f800283a 	ret
 81246c0:	00800084 	movi	r2,2
 81246c4:	28800015 	stw	r2,0(r5)
 81246c8:	f800283a 	ret
 81246cc:	00803fc4 	movi	r2,255
 81246d0:	18800826 	beq	r3,r2,81246f4 <__unpack_f+0x98>
 81246d4:	380491fa 	slli	r2,r7,7
 81246d8:	18ffe044 	addi	r3,r3,-127
 81246dc:	28c00215 	stw	r3,8(r5)
 81246e0:	10900034 	orhi	r2,r2,16384
 81246e4:	28800315 	stw	r2,12(r5)
 81246e8:	008000c4 	movi	r2,3
 81246ec:	28800015 	stw	r2,0(r5)
 81246f0:	f800283a 	ret
 81246f4:	3800031e 	bne	r7,zero,8124704 <__unpack_f+0xa8>
 81246f8:	00800104 	movi	r2,4
 81246fc:	28800015 	stw	r2,0(r5)
 8124700:	f800283a 	ret
 8124704:	3080042c 	andhi	r2,r6,16
 8124708:	10000426 	beq	r2,zero,812471c <__unpack_f+0xc0>
 812470c:	00800044 	movi	r2,1
 8124710:	28800015 	stw	r2,0(r5)
 8124714:	29c00315 	stw	r7,12(r5)
 8124718:	f800283a 	ret
 812471c:	28000015 	stw	zero,0(r5)
 8124720:	003ffc06 	br	8124714 <__unpack_f+0xb8>

08124724 <__fpcmp_parts_f>:
 8124724:	21800017 	ldw	r6,0(r4)
 8124728:	00c00044 	movi	r3,1
 812472c:	19800a2e 	bgeu	r3,r6,8124758 <__fpcmp_parts_f+0x34>
 8124730:	28800017 	ldw	r2,0(r5)
 8124734:	1880082e 	bgeu	r3,r2,8124758 <__fpcmp_parts_f+0x34>
 8124738:	00c00104 	movi	r3,4
 812473c:	30c01e26 	beq	r6,r3,81247b8 <__fpcmp_parts_f+0x94>
 8124740:	10c01a26 	beq	r2,r3,81247ac <__fpcmp_parts_f+0x88>
 8124744:	00c00084 	movi	r3,2
 8124748:	30c00526 	beq	r6,r3,8124760 <__fpcmp_parts_f+0x3c>
 812474c:	10c0071e 	bne	r2,r3,812476c <__fpcmp_parts_f+0x48>
 8124750:	20800117 	ldw	r2,4(r4)
 8124754:	1000091e 	bne	r2,zero,812477c <__fpcmp_parts_f+0x58>
 8124758:	00800044 	movi	r2,1
 812475c:	f800283a 	ret
 8124760:	10c0121e 	bne	r2,r3,81247ac <__fpcmp_parts_f+0x88>
 8124764:	0005883a 	mov	r2,zero
 8124768:	f800283a 	ret
 812476c:	20c00117 	ldw	r3,4(r4)
 8124770:	28800117 	ldw	r2,4(r5)
 8124774:	18800326 	beq	r3,r2,8124784 <__fpcmp_parts_f+0x60>
 8124778:	183ff726 	beq	r3,zero,8124758 <__fpcmp_parts_f+0x34>
 812477c:	00bfffc4 	movi	r2,-1
 8124780:	f800283a 	ret
 8124784:	21800217 	ldw	r6,8(r4)
 8124788:	28800217 	ldw	r2,8(r5)
 812478c:	11bffa16 	blt	r2,r6,8124778 <__fpcmp_parts_f+0x54>
 8124790:	30800416 	blt	r6,r2,81247a4 <__fpcmp_parts_f+0x80>
 8124794:	21000317 	ldw	r4,12(r4)
 8124798:	29400317 	ldw	r5,12(r5)
 812479c:	293ff636 	bltu	r5,r4,8124778 <__fpcmp_parts_f+0x54>
 81247a0:	217ff02e 	bgeu	r4,r5,8124764 <__fpcmp_parts_f+0x40>
 81247a4:	183fec1e 	bne	r3,zero,8124758 <__fpcmp_parts_f+0x34>
 81247a8:	003ff406 	br	812477c <__fpcmp_parts_f+0x58>
 81247ac:	28800117 	ldw	r2,4(r5)
 81247b0:	103fe91e 	bne	r2,zero,8124758 <__fpcmp_parts_f+0x34>
 81247b4:	003ff106 	br	812477c <__fpcmp_parts_f+0x58>
 81247b8:	11bfe51e 	bne	r2,r6,8124750 <__fpcmp_parts_f+0x2c>
 81247bc:	28c00117 	ldw	r3,4(r5)
 81247c0:	20800117 	ldw	r2,4(r4)
 81247c4:	1885c83a 	sub	r2,r3,r2
 81247c8:	f800283a 	ret

081247cc <__make_fp>:
 81247cc:	defffb04 	addi	sp,sp,-20
 81247d0:	d9000015 	stw	r4,0(sp)
 81247d4:	d809883a 	mov	r4,sp
 81247d8:	dfc00415 	stw	ra,16(sp)
 81247dc:	d9400115 	stw	r5,4(sp)
 81247e0:	d9800215 	stw	r6,8(sp)
 81247e4:	d9c00315 	stw	r7,12(sp)
 81247e8:	81244fc0 	call	81244fc <__pack_f>
 81247ec:	dfc00417 	ldw	ra,16(sp)
 81247f0:	dec00504 	addi	sp,sp,20
 81247f4:	f800283a 	ret

081247f8 <__pack_d>:
 81247f8:	20c00017 	ldw	r3,0(r4)
 81247fc:	defffd04 	addi	sp,sp,-12
 8124800:	dc000015 	stw	r16,0(sp)
 8124804:	dc800215 	stw	r18,8(sp)
 8124808:	dc400115 	stw	r17,4(sp)
 812480c:	00800044 	movi	r2,1
 8124810:	22000317 	ldw	r8,12(r4)
 8124814:	001f883a 	mov	r15,zero
 8124818:	22400417 	ldw	r9,16(r4)
 812481c:	24000117 	ldw	r16,4(r4)
 8124820:	10c0552e 	bgeu	r2,r3,8124978 <__pack_d+0x180>
 8124824:	00800104 	movi	r2,4
 8124828:	18804f26 	beq	r3,r2,8124968 <__pack_d+0x170>
 812482c:	00800084 	movi	r2,2
 8124830:	18800226 	beq	r3,r2,812483c <__pack_d+0x44>
 8124834:	4244b03a 	or	r2,r8,r9
 8124838:	10001a1e 	bne	r2,zero,81248a4 <__pack_d+0xac>
 812483c:	000d883a 	mov	r6,zero
 8124840:	000f883a 	mov	r7,zero
 8124844:	0011883a 	mov	r8,zero
 8124848:	00800434 	movhi	r2,16
 812484c:	10bfffc4 	addi	r2,r2,-1
 8124850:	301d883a 	mov	r14,r6
 8124854:	3884703a 	and	r2,r7,r2
 8124858:	400a953a 	slli	r5,r8,20
 812485c:	79bffc2c 	andhi	r6,r15,65520
 8124860:	308cb03a 	or	r6,r6,r2
 8124864:	00e00434 	movhi	r3,32784
 8124868:	18ffffc4 	addi	r3,r3,-1
 812486c:	800497fa 	slli	r2,r16,31
 8124870:	30c6703a 	and	r3,r6,r3
 8124874:	1946b03a 	or	r3,r3,r5
 8124878:	01600034 	movhi	r5,32768
 812487c:	297fffc4 	addi	r5,r5,-1
 8124880:	194a703a 	and	r5,r3,r5
 8124884:	288ab03a 	or	r5,r5,r2
 8124888:	2807883a 	mov	r3,r5
 812488c:	7005883a 	mov	r2,r14
 8124890:	dc800217 	ldw	r18,8(sp)
 8124894:	dc400117 	ldw	r17,4(sp)
 8124898:	dc000017 	ldw	r16,0(sp)
 812489c:	dec00304 	addi	sp,sp,12
 81248a0:	f800283a 	ret
 81248a4:	21000217 	ldw	r4,8(r4)
 81248a8:	00bf0084 	movi	r2,-1022
 81248ac:	20803f16 	blt	r4,r2,81249ac <__pack_d+0x1b4>
 81248b0:	0080ffc4 	movi	r2,1023
 81248b4:	11002c16 	blt	r2,r4,8124968 <__pack_d+0x170>
 81248b8:	00803fc4 	movi	r2,255
 81248bc:	408c703a 	and	r6,r8,r2
 81248c0:	00802004 	movi	r2,128
 81248c4:	0007883a 	mov	r3,zero
 81248c8:	000f883a 	mov	r7,zero
 81248cc:	2280ffc4 	addi	r10,r4,1023
 81248d0:	30801e26 	beq	r6,r2,812494c <__pack_d+0x154>
 81248d4:	00801fc4 	movi	r2,127
 81248d8:	4089883a 	add	r4,r8,r2
 81248dc:	220d803a 	cmpltu	r6,r4,r8
 81248e0:	324d883a 	add	r6,r6,r9
 81248e4:	2011883a 	mov	r8,r4
 81248e8:	3013883a 	mov	r9,r6
 81248ec:	00880034 	movhi	r2,8192
 81248f0:	10bfffc4 	addi	r2,r2,-1
 81248f4:	12400d36 	bltu	r2,r9,812492c <__pack_d+0x134>
 81248f8:	4804963a 	slli	r2,r9,24
 81248fc:	400cd23a 	srli	r6,r8,8
 8124900:	480ed23a 	srli	r7,r9,8
 8124904:	013fffc4 	movi	r4,-1
 8124908:	118cb03a 	or	r6,r2,r6
 812490c:	01400434 	movhi	r5,16
 8124910:	297fffc4 	addi	r5,r5,-1
 8124914:	3104703a 	and	r2,r6,r4
 8124918:	3946703a 	and	r3,r7,r5
 812491c:	5201ffcc 	andi	r8,r10,2047
 8124920:	100d883a 	mov	r6,r2
 8124924:	180f883a 	mov	r7,r3
 8124928:	003fc706 	br	8124848 <__pack_d+0x50>
 812492c:	480897fa 	slli	r4,r9,31
 8124930:	4004d07a 	srli	r2,r8,1
 8124934:	4806d07a 	srli	r3,r9,1
 8124938:	52800044 	addi	r10,r10,1
 812493c:	2084b03a 	or	r2,r4,r2
 8124940:	1011883a 	mov	r8,r2
 8124944:	1813883a 	mov	r9,r3
 8124948:	003feb06 	br	81248f8 <__pack_d+0x100>
 812494c:	383fe11e 	bne	r7,zero,81248d4 <__pack_d+0xdc>
 8124950:	01004004 	movi	r4,256
 8124954:	4104703a 	and	r2,r8,r4
 8124958:	10c4b03a 	or	r2,r2,r3
 812495c:	103fe326 	beq	r2,zero,81248ec <__pack_d+0xf4>
 8124960:	3005883a 	mov	r2,r6
 8124964:	003fdc06 	br	81248d8 <__pack_d+0xe0>
 8124968:	000d883a 	mov	r6,zero
 812496c:	000f883a 	mov	r7,zero
 8124970:	0201ffc4 	movi	r8,2047
 8124974:	003fb406 	br	8124848 <__pack_d+0x50>
 8124978:	0005883a 	mov	r2,zero
 812497c:	00c00234 	movhi	r3,8
 8124980:	408cb03a 	or	r6,r8,r2
 8124984:	48ceb03a 	or	r7,r9,r3
 8124988:	013fffc4 	movi	r4,-1
 812498c:	01400434 	movhi	r5,16
 8124990:	297fffc4 	addi	r5,r5,-1
 8124994:	3104703a 	and	r2,r6,r4
 8124998:	3946703a 	and	r3,r7,r5
 812499c:	100d883a 	mov	r6,r2
 81249a0:	180f883a 	mov	r7,r3
 81249a4:	0201ffc4 	movi	r8,2047
 81249a8:	003fa706 	br	8124848 <__pack_d+0x50>
 81249ac:	1109c83a 	sub	r4,r2,r4
 81249b0:	00800e04 	movi	r2,56
 81249b4:	11004316 	blt	r2,r4,8124ac4 <__pack_d+0x2cc>
 81249b8:	21fff804 	addi	r7,r4,-32
 81249bc:	38004516 	blt	r7,zero,8124ad4 <__pack_d+0x2dc>
 81249c0:	49d8d83a 	srl	r12,r9,r7
 81249c4:	001b883a 	mov	r13,zero
 81249c8:	0023883a 	mov	r17,zero
 81249cc:	01400044 	movi	r5,1
 81249d0:	0025883a 	mov	r18,zero
 81249d4:	38004716 	blt	r7,zero,8124af4 <__pack_d+0x2fc>
 81249d8:	29d6983a 	sll	r11,r5,r7
 81249dc:	0015883a 	mov	r10,zero
 81249e0:	00bfffc4 	movi	r2,-1
 81249e4:	5089883a 	add	r4,r10,r2
 81249e8:	588b883a 	add	r5,r11,r2
 81249ec:	228d803a 	cmpltu	r6,r4,r10
 81249f0:	314b883a 	add	r5,r6,r5
 81249f4:	4104703a 	and	r2,r8,r4
 81249f8:	4946703a 	and	r3,r9,r5
 81249fc:	10c4b03a 	or	r2,r2,r3
 8124a00:	10000226 	beq	r2,zero,8124a0c <__pack_d+0x214>
 8124a04:	04400044 	movi	r17,1
 8124a08:	0025883a 	mov	r18,zero
 8124a0c:	00803fc4 	movi	r2,255
 8124a10:	644eb03a 	or	r7,r12,r17
 8124a14:	3892703a 	and	r9,r7,r2
 8124a18:	00802004 	movi	r2,128
 8124a1c:	6c90b03a 	or	r8,r13,r18
 8124a20:	0015883a 	mov	r10,zero
 8124a24:	48801626 	beq	r9,r2,8124a80 <__pack_d+0x288>
 8124a28:	01001fc4 	movi	r4,127
 8124a2c:	3905883a 	add	r2,r7,r4
 8124a30:	11cd803a 	cmpltu	r6,r2,r7
 8124a34:	320d883a 	add	r6,r6,r8
 8124a38:	100f883a 	mov	r7,r2
 8124a3c:	00840034 	movhi	r2,4096
 8124a40:	10bfffc4 	addi	r2,r2,-1
 8124a44:	3011883a 	mov	r8,r6
 8124a48:	0007883a 	mov	r3,zero
 8124a4c:	11801b36 	bltu	r2,r6,8124abc <__pack_d+0x2c4>
 8124a50:	4004963a 	slli	r2,r8,24
 8124a54:	3808d23a 	srli	r4,r7,8
 8124a58:	400ad23a 	srli	r5,r8,8
 8124a5c:	1813883a 	mov	r9,r3
 8124a60:	1108b03a 	or	r4,r2,r4
 8124a64:	00bfffc4 	movi	r2,-1
 8124a68:	00c00434 	movhi	r3,16
 8124a6c:	18ffffc4 	addi	r3,r3,-1
 8124a70:	208c703a 	and	r6,r4,r2
 8124a74:	28ce703a 	and	r7,r5,r3
 8124a78:	4a01ffcc 	andi	r8,r9,2047
 8124a7c:	003f7206 	br	8124848 <__pack_d+0x50>
 8124a80:	503fe91e 	bne	r10,zero,8124a28 <__pack_d+0x230>
 8124a84:	01004004 	movi	r4,256
 8124a88:	3904703a 	and	r2,r7,r4
 8124a8c:	0007883a 	mov	r3,zero
 8124a90:	10c4b03a 	or	r2,r2,r3
 8124a94:	10000626 	beq	r2,zero,8124ab0 <__pack_d+0x2b8>
 8124a98:	3a45883a 	add	r2,r7,r9
 8124a9c:	11cd803a 	cmpltu	r6,r2,r7
 8124aa0:	320d883a 	add	r6,r6,r8
 8124aa4:	100f883a 	mov	r7,r2
 8124aa8:	3011883a 	mov	r8,r6
 8124aac:	0007883a 	mov	r3,zero
 8124ab0:	00840034 	movhi	r2,4096
 8124ab4:	10bfffc4 	addi	r2,r2,-1
 8124ab8:	123fe52e 	bgeu	r2,r8,8124a50 <__pack_d+0x258>
 8124abc:	00c00044 	movi	r3,1
 8124ac0:	003fe306 	br	8124a50 <__pack_d+0x258>
 8124ac4:	0009883a 	mov	r4,zero
 8124ac8:	0013883a 	mov	r9,zero
 8124acc:	000b883a 	mov	r5,zero
 8124ad0:	003fe406 	br	8124a64 <__pack_d+0x26c>
 8124ad4:	4a47883a 	add	r3,r9,r9
 8124ad8:	008007c4 	movi	r2,31
 8124adc:	1105c83a 	sub	r2,r2,r4
 8124ae0:	1886983a 	sll	r3,r3,r2
 8124ae4:	4118d83a 	srl	r12,r8,r4
 8124ae8:	491ad83a 	srl	r13,r9,r4
 8124aec:	1b18b03a 	or	r12,r3,r12
 8124af0:	003fb506 	br	81249c8 <__pack_d+0x1d0>
 8124af4:	2806d07a 	srli	r3,r5,1
 8124af8:	008007c4 	movi	r2,31
 8124afc:	1105c83a 	sub	r2,r2,r4
 8124b00:	1896d83a 	srl	r11,r3,r2
 8124b04:	2914983a 	sll	r10,r5,r4
 8124b08:	003fb506 	br	81249e0 <__pack_d+0x1e8>

08124b0c <__unpack_d>:
 8124b0c:	20c00117 	ldw	r3,4(r4)
 8124b10:	22400017 	ldw	r9,0(r4)
 8124b14:	00800434 	movhi	r2,16
 8124b18:	10bfffc4 	addi	r2,r2,-1
 8124b1c:	1808d53a 	srli	r4,r3,20
 8124b20:	180cd7fa 	srli	r6,r3,31
 8124b24:	1894703a 	and	r10,r3,r2
 8124b28:	2201ffcc 	andi	r8,r4,2047
 8124b2c:	281b883a 	mov	r13,r5
 8124b30:	4817883a 	mov	r11,r9
 8124b34:	29800115 	stw	r6,4(r5)
 8124b38:	5019883a 	mov	r12,r10
 8124b3c:	40001e1e 	bne	r8,zero,8124bb8 <__unpack_d+0xac>
 8124b40:	4a84b03a 	or	r2,r9,r10
 8124b44:	10001926 	beq	r2,zero,8124bac <__unpack_d+0xa0>
 8124b48:	4804d63a 	srli	r2,r9,24
 8124b4c:	500c923a 	slli	r6,r10,8
 8124b50:	013f0084 	movi	r4,-1022
 8124b54:	00c40034 	movhi	r3,4096
 8124b58:	18ffffc4 	addi	r3,r3,-1
 8124b5c:	118cb03a 	or	r6,r2,r6
 8124b60:	008000c4 	movi	r2,3
 8124b64:	480a923a 	slli	r5,r9,8
 8124b68:	68800015 	stw	r2,0(r13)
 8124b6c:	69000215 	stw	r4,8(r13)
 8124b70:	19800b36 	bltu	r3,r6,8124ba0 <__unpack_d+0x94>
 8124b74:	200f883a 	mov	r7,r4
 8124b78:	1811883a 	mov	r8,r3
 8124b7c:	2945883a 	add	r2,r5,r5
 8124b80:	1149803a 	cmpltu	r4,r2,r5
 8124b84:	3187883a 	add	r3,r6,r6
 8124b88:	20c9883a 	add	r4,r4,r3
 8124b8c:	100b883a 	mov	r5,r2
 8124b90:	200d883a 	mov	r6,r4
 8124b94:	39ffffc4 	addi	r7,r7,-1
 8124b98:	413ff82e 	bgeu	r8,r4,8124b7c <__unpack_d+0x70>
 8124b9c:	69c00215 	stw	r7,8(r13)
 8124ba0:	69800415 	stw	r6,16(r13)
 8124ba4:	69400315 	stw	r5,12(r13)
 8124ba8:	f800283a 	ret
 8124bac:	00800084 	movi	r2,2
 8124bb0:	28800015 	stw	r2,0(r5)
 8124bb4:	f800283a 	ret
 8124bb8:	0081ffc4 	movi	r2,2047
 8124bbc:	40800f26 	beq	r8,r2,8124bfc <__unpack_d+0xf0>
 8124bc0:	480cd63a 	srli	r6,r9,24
 8124bc4:	5006923a 	slli	r3,r10,8
 8124bc8:	4804923a 	slli	r2,r9,8
 8124bcc:	0009883a 	mov	r4,zero
 8124bd0:	30c6b03a 	or	r3,r6,r3
 8124bd4:	01440034 	movhi	r5,4096
 8124bd8:	110cb03a 	or	r6,r2,r4
 8124bdc:	423f0044 	addi	r8,r8,-1023
 8124be0:	194eb03a 	or	r7,r3,r5
 8124be4:	008000c4 	movi	r2,3
 8124be8:	69c00415 	stw	r7,16(r13)
 8124bec:	6a000215 	stw	r8,8(r13)
 8124bf0:	68800015 	stw	r2,0(r13)
 8124bf4:	69800315 	stw	r6,12(r13)
 8124bf8:	f800283a 	ret
 8124bfc:	4a84b03a 	or	r2,r9,r10
 8124c00:	1000031e 	bne	r2,zero,8124c10 <__unpack_d+0x104>
 8124c04:	00800104 	movi	r2,4
 8124c08:	28800015 	stw	r2,0(r5)
 8124c0c:	f800283a 	ret
 8124c10:	0009883a 	mov	r4,zero
 8124c14:	01400234 	movhi	r5,8
 8124c18:	4904703a 	and	r2,r9,r4
 8124c1c:	5146703a 	and	r3,r10,r5
 8124c20:	10c4b03a 	or	r2,r2,r3
 8124c24:	10000526 	beq	r2,zero,8124c3c <__unpack_d+0x130>
 8124c28:	00800044 	movi	r2,1
 8124c2c:	68800015 	stw	r2,0(r13)
 8124c30:	6b000415 	stw	r12,16(r13)
 8124c34:	6ac00315 	stw	r11,12(r13)
 8124c38:	f800283a 	ret
 8124c3c:	68000015 	stw	zero,0(r13)
 8124c40:	003ffb06 	br	8124c30 <__unpack_d+0x124>

08124c44 <__fpcmp_parts_d>:
 8124c44:	21800017 	ldw	r6,0(r4)
 8124c48:	00c00044 	movi	r3,1
 8124c4c:	19800a2e 	bgeu	r3,r6,8124c78 <__fpcmp_parts_d+0x34>
 8124c50:	28800017 	ldw	r2,0(r5)
 8124c54:	1880082e 	bgeu	r3,r2,8124c78 <__fpcmp_parts_d+0x34>
 8124c58:	00c00104 	movi	r3,4
 8124c5c:	30c02626 	beq	r6,r3,8124cf8 <__fpcmp_parts_d+0xb4>
 8124c60:	10c02226 	beq	r2,r3,8124cec <__fpcmp_parts_d+0xa8>
 8124c64:	00c00084 	movi	r3,2
 8124c68:	30c00526 	beq	r6,r3,8124c80 <__fpcmp_parts_d+0x3c>
 8124c6c:	10c0071e 	bne	r2,r3,8124c8c <__fpcmp_parts_d+0x48>
 8124c70:	20800117 	ldw	r2,4(r4)
 8124c74:	1000091e 	bne	r2,zero,8124c9c <__fpcmp_parts_d+0x58>
 8124c78:	00800044 	movi	r2,1
 8124c7c:	f800283a 	ret
 8124c80:	10c01a1e 	bne	r2,r3,8124cec <__fpcmp_parts_d+0xa8>
 8124c84:	0005883a 	mov	r2,zero
 8124c88:	f800283a 	ret
 8124c8c:	22000117 	ldw	r8,4(r4)
 8124c90:	28800117 	ldw	r2,4(r5)
 8124c94:	40800326 	beq	r8,r2,8124ca4 <__fpcmp_parts_d+0x60>
 8124c98:	403ff726 	beq	r8,zero,8124c78 <__fpcmp_parts_d+0x34>
 8124c9c:	00bfffc4 	movi	r2,-1
 8124ca0:	f800283a 	ret
 8124ca4:	20c00217 	ldw	r3,8(r4)
 8124ca8:	28800217 	ldw	r2,8(r5)
 8124cac:	10fffa16 	blt	r2,r3,8124c98 <__fpcmp_parts_d+0x54>
 8124cb0:	18800916 	blt	r3,r2,8124cd8 <__fpcmp_parts_d+0x94>
 8124cb4:	21c00417 	ldw	r7,16(r4)
 8124cb8:	28c00417 	ldw	r3,16(r5)
 8124cbc:	21800317 	ldw	r6,12(r4)
 8124cc0:	28800317 	ldw	r2,12(r5)
 8124cc4:	19fff436 	bltu	r3,r7,8124c98 <__fpcmp_parts_d+0x54>
 8124cc8:	38c00526 	beq	r7,r3,8124ce0 <__fpcmp_parts_d+0x9c>
 8124ccc:	38c00236 	bltu	r7,r3,8124cd8 <__fpcmp_parts_d+0x94>
 8124cd0:	19ffec1e 	bne	r3,r7,8124c84 <__fpcmp_parts_d+0x40>
 8124cd4:	30bfeb2e 	bgeu	r6,r2,8124c84 <__fpcmp_parts_d+0x40>
 8124cd8:	403fe71e 	bne	r8,zero,8124c78 <__fpcmp_parts_d+0x34>
 8124cdc:	003fef06 	br	8124c9c <__fpcmp_parts_d+0x58>
 8124ce0:	11bffa2e 	bgeu	r2,r6,8124ccc <__fpcmp_parts_d+0x88>
 8124ce4:	403fe426 	beq	r8,zero,8124c78 <__fpcmp_parts_d+0x34>
 8124ce8:	003fec06 	br	8124c9c <__fpcmp_parts_d+0x58>
 8124cec:	28800117 	ldw	r2,4(r5)
 8124cf0:	103fe11e 	bne	r2,zero,8124c78 <__fpcmp_parts_d+0x34>
 8124cf4:	003fe906 	br	8124c9c <__fpcmp_parts_d+0x58>
 8124cf8:	11bfdd1e 	bne	r2,r6,8124c70 <__fpcmp_parts_d+0x2c>
 8124cfc:	28c00117 	ldw	r3,4(r5)
 8124d00:	20800117 	ldw	r2,4(r4)
 8124d04:	1885c83a 	sub	r2,r3,r2
 8124d08:	f800283a 	ret

08124d0c <__errno>:
 8124d0c:	00c204f4 	movhi	r3,2067
 8124d10:	18ce5204 	addi	r3,r3,14664
 8124d14:	18800017 	ldw	r2,0(r3)
 8124d18:	f800283a 	ret

08124d1c <printf>:
 8124d1c:	defffb04 	addi	sp,sp,-20
 8124d20:	dfc00115 	stw	ra,4(sp)
 8124d24:	d9400215 	stw	r5,8(sp)
 8124d28:	d9800315 	stw	r6,12(sp)
 8124d2c:	d9c00415 	stw	r7,16(sp)
 8124d30:	008204f4 	movhi	r2,2067
 8124d34:	108e5204 	addi	r2,r2,14664
 8124d38:	10c00017 	ldw	r3,0(r2)
 8124d3c:	200b883a 	mov	r5,r4
 8124d40:	d8800204 	addi	r2,sp,8
 8124d44:	19000217 	ldw	r4,8(r3)
 8124d48:	100d883a 	mov	r6,r2
 8124d4c:	d8800015 	stw	r2,0(sp)
 8124d50:	8126dc00 	call	8126dc0 <__vfprintf_internal>
 8124d54:	dfc00117 	ldw	ra,4(sp)
 8124d58:	dec00504 	addi	sp,sp,20
 8124d5c:	f800283a 	ret

08124d60 <_printf_r>:
 8124d60:	defffc04 	addi	sp,sp,-16
 8124d64:	dfc00115 	stw	ra,4(sp)
 8124d68:	d9800215 	stw	r6,8(sp)
 8124d6c:	d9c00315 	stw	r7,12(sp)
 8124d70:	280d883a 	mov	r6,r5
 8124d74:	21400217 	ldw	r5,8(r4)
 8124d78:	d8c00204 	addi	r3,sp,8
 8124d7c:	180f883a 	mov	r7,r3
 8124d80:	d8c00015 	stw	r3,0(sp)
 8124d84:	8124f140 	call	8124f14 <___vfprintf_internal_r>
 8124d88:	dfc00117 	ldw	ra,4(sp)
 8124d8c:	dec00404 	addi	sp,sp,16
 8124d90:	f800283a 	ret

08124d94 <_puts_r>:
 8124d94:	defff604 	addi	sp,sp,-40
 8124d98:	dc400715 	stw	r17,28(sp)
 8124d9c:	2023883a 	mov	r17,r4
 8124da0:	2809883a 	mov	r4,r5
 8124da4:	dfc00915 	stw	ra,36(sp)
 8124da8:	dcc00815 	stw	r19,32(sp)
 8124dac:	2827883a 	mov	r19,r5
 8124db0:	8124e480 	call	8124e48 <strlen>
 8124db4:	89400217 	ldw	r5,8(r17)
 8124db8:	00c204f4 	movhi	r3,2067
 8124dbc:	18c6a304 	addi	r3,r3,6796
 8124dc0:	01c00044 	movi	r7,1
 8124dc4:	12000044 	addi	r8,r2,1
 8124dc8:	d8c00515 	stw	r3,20(sp)
 8124dcc:	d9c00615 	stw	r7,24(sp)
 8124dd0:	d8c00304 	addi	r3,sp,12
 8124dd4:	01c00084 	movi	r7,2
 8124dd8:	8809883a 	mov	r4,r17
 8124ddc:	d80d883a 	mov	r6,sp
 8124de0:	d8c00015 	stw	r3,0(sp)
 8124de4:	dcc00315 	stw	r19,12(sp)
 8124de8:	da000215 	stw	r8,8(sp)
 8124dec:	d9c00115 	stw	r7,4(sp)
 8124df0:	d8800415 	stw	r2,16(sp)
 8124df4:	812901c0 	call	812901c <__sfvwrite_r>
 8124df8:	00ffffc4 	movi	r3,-1
 8124dfc:	10000626 	beq	r2,zero,8124e18 <_puts_r+0x84>
 8124e00:	1805883a 	mov	r2,r3
 8124e04:	dfc00917 	ldw	ra,36(sp)
 8124e08:	dcc00817 	ldw	r19,32(sp)
 8124e0c:	dc400717 	ldw	r17,28(sp)
 8124e10:	dec00a04 	addi	sp,sp,40
 8124e14:	f800283a 	ret
 8124e18:	00c00284 	movi	r3,10
 8124e1c:	1805883a 	mov	r2,r3
 8124e20:	dfc00917 	ldw	ra,36(sp)
 8124e24:	dcc00817 	ldw	r19,32(sp)
 8124e28:	dc400717 	ldw	r17,28(sp)
 8124e2c:	dec00a04 	addi	sp,sp,40
 8124e30:	f800283a 	ret

08124e34 <puts>:
 8124e34:	008204f4 	movhi	r2,2067
 8124e38:	108e5204 	addi	r2,r2,14664
 8124e3c:	200b883a 	mov	r5,r4
 8124e40:	11000017 	ldw	r4,0(r2)
 8124e44:	8124d941 	jmpi	8124d94 <_puts_r>

08124e48 <strlen>:
 8124e48:	208000cc 	andi	r2,r4,3
 8124e4c:	2011883a 	mov	r8,r4
 8124e50:	1000161e 	bne	r2,zero,8124eac <strlen+0x64>
 8124e54:	20c00017 	ldw	r3,0(r4)
 8124e58:	017fbff4 	movhi	r5,65279
 8124e5c:	297fbfc4 	addi	r5,r5,-257
 8124e60:	01e02074 	movhi	r7,32897
 8124e64:	39e02004 	addi	r7,r7,-32640
 8124e68:	1945883a 	add	r2,r3,r5
 8124e6c:	11c4703a 	and	r2,r2,r7
 8124e70:	00c6303a 	nor	r3,zero,r3
 8124e74:	1886703a 	and	r3,r3,r2
 8124e78:	18000c1e 	bne	r3,zero,8124eac <strlen+0x64>
 8124e7c:	280d883a 	mov	r6,r5
 8124e80:	380b883a 	mov	r5,r7
 8124e84:	21000104 	addi	r4,r4,4
 8124e88:	20800017 	ldw	r2,0(r4)
 8124e8c:	1187883a 	add	r3,r2,r6
 8124e90:	1946703a 	and	r3,r3,r5
 8124e94:	0084303a 	nor	r2,zero,r2
 8124e98:	10c4703a 	and	r2,r2,r3
 8124e9c:	103ff926 	beq	r2,zero,8124e84 <strlen+0x3c>
 8124ea0:	20800007 	ldb	r2,0(r4)
 8124ea4:	10000326 	beq	r2,zero,8124eb4 <strlen+0x6c>
 8124ea8:	21000044 	addi	r4,r4,1
 8124eac:	20800007 	ldb	r2,0(r4)
 8124eb0:	103ffd1e 	bne	r2,zero,8124ea8 <strlen+0x60>
 8124eb4:	2205c83a 	sub	r2,r4,r8
 8124eb8:	f800283a 	ret

08124ebc <__sprint_r>:
 8124ebc:	30800217 	ldw	r2,8(r6)
 8124ec0:	defffe04 	addi	sp,sp,-8
 8124ec4:	dc000015 	stw	r16,0(sp)
 8124ec8:	dfc00115 	stw	ra,4(sp)
 8124ecc:	3021883a 	mov	r16,r6
 8124ed0:	0007883a 	mov	r3,zero
 8124ed4:	1000061e 	bne	r2,zero,8124ef0 <__sprint_r+0x34>
 8124ed8:	1805883a 	mov	r2,r3
 8124edc:	30000115 	stw	zero,4(r6)
 8124ee0:	dfc00117 	ldw	ra,4(sp)
 8124ee4:	dc000017 	ldw	r16,0(sp)
 8124ee8:	dec00204 	addi	sp,sp,8
 8124eec:	f800283a 	ret
 8124ef0:	812901c0 	call	812901c <__sfvwrite_r>
 8124ef4:	1007883a 	mov	r3,r2
 8124ef8:	1805883a 	mov	r2,r3
 8124efc:	80000115 	stw	zero,4(r16)
 8124f00:	80000215 	stw	zero,8(r16)
 8124f04:	dfc00117 	ldw	ra,4(sp)
 8124f08:	dc000017 	ldw	r16,0(sp)
 8124f0c:	dec00204 	addi	sp,sp,8
 8124f10:	f800283a 	ret

08124f14 <___vfprintf_internal_r>:
 8124f14:	defea404 	addi	sp,sp,-1392
 8124f18:	dd815815 	stw	r22,1376(sp)
 8124f1c:	dc015215 	stw	r16,1352(sp)
 8124f20:	d9c15115 	stw	r7,1348(sp)
 8124f24:	dfc15b15 	stw	ra,1388(sp)
 8124f28:	df015a15 	stw	fp,1384(sp)
 8124f2c:	ddc15915 	stw	r23,1380(sp)
 8124f30:	dd415715 	stw	r21,1372(sp)
 8124f34:	dd015615 	stw	r20,1368(sp)
 8124f38:	dcc15515 	stw	r19,1364(sp)
 8124f3c:	dc815415 	stw	r18,1360(sp)
 8124f40:	dc415315 	stw	r17,1356(sp)
 8124f44:	282d883a 	mov	r22,r5
 8124f48:	3021883a 	mov	r16,r6
 8124f4c:	d9014f15 	stw	r4,1340(sp)
 8124f50:	81296400 	call	8129640 <_localeconv_r>
 8124f54:	10800017 	ldw	r2,0(r2)
 8124f58:	d9c15117 	ldw	r7,1348(sp)
 8124f5c:	d8814915 	stw	r2,1316(sp)
 8124f60:	d8814f17 	ldw	r2,1340(sp)
 8124f64:	10000226 	beq	r2,zero,8124f70 <___vfprintf_internal_r+0x5c>
 8124f68:	10800e17 	ldw	r2,56(r2)
 8124f6c:	10020d26 	beq	r2,zero,81257a4 <___vfprintf_internal_r+0x890>
 8124f70:	b080030b 	ldhu	r2,12(r22)
 8124f74:	1080020c 	andi	r2,r2,8
 8124f78:	10020e26 	beq	r2,zero,81257b4 <___vfprintf_internal_r+0x8a0>
 8124f7c:	b0800417 	ldw	r2,16(r22)
 8124f80:	10020c26 	beq	r2,zero,81257b4 <___vfprintf_internal_r+0x8a0>
 8124f84:	b200030b 	ldhu	r8,12(r22)
 8124f88:	00800284 	movi	r2,10
 8124f8c:	40c0068c 	andi	r3,r8,26
 8124f90:	18802f1e 	bne	r3,r2,8125050 <___vfprintf_internal_r+0x13c>
 8124f94:	b080038f 	ldh	r2,14(r22)
 8124f98:	10002d16 	blt	r2,zero,8125050 <___vfprintf_internal_r+0x13c>
 8124f9c:	b240038b 	ldhu	r9,14(r22)
 8124fa0:	b2800717 	ldw	r10,28(r22)
 8124fa4:	b2c00917 	ldw	r11,36(r22)
 8124fa8:	d9014f17 	ldw	r4,1340(sp)
 8124fac:	dc402904 	addi	r17,sp,164
 8124fb0:	d8804004 	addi	r2,sp,256
 8124fb4:	00c10004 	movi	r3,1024
 8124fb8:	423fff4c 	andi	r8,r8,65533
 8124fbc:	800d883a 	mov	r6,r16
 8124fc0:	880b883a 	mov	r5,r17
 8124fc4:	da002c0d 	sth	r8,176(sp)
 8124fc8:	da402c8d 	sth	r9,178(sp)
 8124fcc:	da803015 	stw	r10,192(sp)
 8124fd0:	dac03215 	stw	r11,200(sp)
 8124fd4:	d8802d15 	stw	r2,180(sp)
 8124fd8:	d8c02e15 	stw	r3,184(sp)
 8124fdc:	d8802915 	stw	r2,164(sp)
 8124fe0:	d8c02b15 	stw	r3,172(sp)
 8124fe4:	d8002f15 	stw	zero,188(sp)
 8124fe8:	8124f140 	call	8124f14 <___vfprintf_internal_r>
 8124fec:	d8814b15 	stw	r2,1324(sp)
 8124ff0:	10000416 	blt	r2,zero,8125004 <___vfprintf_internal_r+0xf0>
 8124ff4:	d9014f17 	ldw	r4,1340(sp)
 8124ff8:	880b883a 	mov	r5,r17
 8124ffc:	81286ec0 	call	81286ec <_fflush_r>
 8125000:	1002321e 	bne	r2,zero,81258cc <___vfprintf_internal_r+0x9b8>
 8125004:	d8802c0b 	ldhu	r2,176(sp)
 8125008:	1080100c 	andi	r2,r2,64
 812500c:	10000326 	beq	r2,zero,812501c <___vfprintf_internal_r+0x108>
 8125010:	b080030b 	ldhu	r2,12(r22)
 8125014:	10801014 	ori	r2,r2,64
 8125018:	b080030d 	sth	r2,12(r22)
 812501c:	d8814b17 	ldw	r2,1324(sp)
 8125020:	dfc15b17 	ldw	ra,1388(sp)
 8125024:	df015a17 	ldw	fp,1384(sp)
 8125028:	ddc15917 	ldw	r23,1380(sp)
 812502c:	dd815817 	ldw	r22,1376(sp)
 8125030:	dd415717 	ldw	r21,1372(sp)
 8125034:	dd015617 	ldw	r20,1368(sp)
 8125038:	dcc15517 	ldw	r19,1364(sp)
 812503c:	dc815417 	ldw	r18,1360(sp)
 8125040:	dc415317 	ldw	r17,1356(sp)
 8125044:	dc015217 	ldw	r16,1352(sp)
 8125048:	dec15c04 	addi	sp,sp,1392
 812504c:	f800283a 	ret
 8125050:	0005883a 	mov	r2,zero
 8125054:	0007883a 	mov	r3,zero
 8125058:	dd401904 	addi	r21,sp,100
 812505c:	d8814215 	stw	r2,1288(sp)
 8125060:	802f883a 	mov	r23,r16
 8125064:	d8c14315 	stw	r3,1292(sp)
 8125068:	d8014b15 	stw	zero,1324(sp)
 812506c:	d8014815 	stw	zero,1312(sp)
 8125070:	d8014415 	stw	zero,1296(sp)
 8125074:	d8014715 	stw	zero,1308(sp)
 8125078:	dd400c15 	stw	r21,48(sp)
 812507c:	d8000e15 	stw	zero,56(sp)
 8125080:	d8000d15 	stw	zero,52(sp)
 8125084:	b8800007 	ldb	r2,0(r23)
 8125088:	10001926 	beq	r2,zero,81250f0 <___vfprintf_internal_r+0x1dc>
 812508c:	00c00944 	movi	r3,37
 8125090:	10c01726 	beq	r2,r3,81250f0 <___vfprintf_internal_r+0x1dc>
 8125094:	b821883a 	mov	r16,r23
 8125098:	00000106 	br	81250a0 <___vfprintf_internal_r+0x18c>
 812509c:	10c00326 	beq	r2,r3,81250ac <___vfprintf_internal_r+0x198>
 81250a0:	84000044 	addi	r16,r16,1
 81250a4:	80800007 	ldb	r2,0(r16)
 81250a8:	103ffc1e 	bne	r2,zero,812509c <___vfprintf_internal_r+0x188>
 81250ac:	85e7c83a 	sub	r19,r16,r23
 81250b0:	98000e26 	beq	r19,zero,81250ec <___vfprintf_internal_r+0x1d8>
 81250b4:	dc800e17 	ldw	r18,56(sp)
 81250b8:	dc400d17 	ldw	r17,52(sp)
 81250bc:	008001c4 	movi	r2,7
 81250c0:	94e5883a 	add	r18,r18,r19
 81250c4:	8c400044 	addi	r17,r17,1
 81250c8:	adc00015 	stw	r23,0(r21)
 81250cc:	dc800e15 	stw	r18,56(sp)
 81250d0:	acc00115 	stw	r19,4(r21)
 81250d4:	dc400d15 	stw	r17,52(sp)
 81250d8:	14428b16 	blt	r2,r17,8125b08 <___vfprintf_internal_r+0xbf4>
 81250dc:	ad400204 	addi	r21,r21,8
 81250e0:	d9014b17 	ldw	r4,1324(sp)
 81250e4:	24c9883a 	add	r4,r4,r19
 81250e8:	d9014b15 	stw	r4,1324(sp)
 81250ec:	802f883a 	mov	r23,r16
 81250f0:	b8800007 	ldb	r2,0(r23)
 81250f4:	10013c26 	beq	r2,zero,81255e8 <___vfprintf_internal_r+0x6d4>
 81250f8:	bdc00044 	addi	r23,r23,1
 81250fc:	d8000405 	stb	zero,16(sp)
 8125100:	b8c00007 	ldb	r3,0(r23)
 8125104:	04ffffc4 	movi	r19,-1
 8125108:	d8014c15 	stw	zero,1328(sp)
 812510c:	d8014a15 	stw	zero,1320(sp)
 8125110:	d8c14d15 	stw	r3,1332(sp)
 8125114:	bdc00044 	addi	r23,r23,1
 8125118:	d9414d17 	ldw	r5,1332(sp)
 812511c:	00801604 	movi	r2,88
 8125120:	28fff804 	addi	r3,r5,-32
 8125124:	10c06036 	bltu	r2,r3,81252a8 <___vfprintf_internal_r+0x394>
 8125128:	18c5883a 	add	r2,r3,r3
 812512c:	1085883a 	add	r2,r2,r2
 8125130:	00c204b4 	movhi	r3,2066
 8125134:	18d45104 	addi	r3,r3,20804
 8125138:	10c5883a 	add	r2,r2,r3
 812513c:	11000017 	ldw	r4,0(r2)
 8125140:	2000683a 	jmp	r4
 8125144:	081260b8 	rdprs	zero,at,18818
 8125148:	081252a8 	cmpgeui	zero,at,18762
 812514c:	081252a8 	cmpgeui	zero,at,18762
 8125150:	081260a4 	muli	zero,at,18818
 8125154:	081252a8 	cmpgeui	zero,at,18762
 8125158:	081252a8 	cmpgeui	zero,at,18762
 812515c:	081252a8 	cmpgeui	zero,at,18762
 8125160:	081252a8 	cmpgeui	zero,at,18762
 8125164:	081252a8 	cmpgeui	zero,at,18762
 8125168:	081252a8 	cmpgeui	zero,at,18762
 812516c:	08125e84 	addi	zero,at,18810
 8125170:	08126094 	ori	zero,at,18818
 8125174:	081252a8 	cmpgeui	zero,at,18762
 8125178:	08125e9c 	xori	zero,at,18810
 812517c:	08126130 	cmpltui	zero,at,18820
 8125180:	081252a8 	cmpgeui	zero,at,18762
 8125184:	0812611c 	xori	zero,at,18820
 8125188:	081260e4 	muli	zero,at,18819
 812518c:	081260e4 	muli	zero,at,18819
 8125190:	081260e4 	muli	zero,at,18819
 8125194:	081260e4 	muli	zero,at,18819
 8125198:	081260e4 	muli	zero,at,18819
 812519c:	081260e4 	muli	zero,at,18819
 81251a0:	081260e4 	muli	zero,at,18819
 81251a4:	081260e4 	muli	zero,at,18819
 81251a8:	081260e4 	muli	zero,at,18819
 81251ac:	081252a8 	cmpgeui	zero,at,18762
 81251b0:	081252a8 	cmpgeui	zero,at,18762
 81251b4:	081252a8 	cmpgeui	zero,at,18762
 81251b8:	081252a8 	cmpgeui	zero,at,18762
 81251bc:	081252a8 	cmpgeui	zero,at,18762
 81251c0:	081252a8 	cmpgeui	zero,at,18762
 81251c4:	081252a8 	cmpgeui	zero,at,18762
 81251c8:	081252a8 	cmpgeui	zero,at,18762
 81251cc:	081252a8 	cmpgeui	zero,at,18762
 81251d0:	081252a8 	cmpgeui	zero,at,18762
 81251d4:	08125900 	call	812590 <__alt_mem_onchip_memory2_3+0x80b590>
 81251d8:	08125f6c 	andhi	zero,at,18813
 81251dc:	081252a8 	cmpgeui	zero,at,18762
 81251e0:	08125f6c 	andhi	zero,at,18813
 81251e4:	081252a8 	cmpgeui	zero,at,18762
 81251e8:	081252a8 	cmpgeui	zero,at,18762
 81251ec:	081252a8 	cmpgeui	zero,at,18762
 81251f0:	081252a8 	cmpgeui	zero,at,18762
 81251f4:	081260d0 	cmplti	zero,at,18819
 81251f8:	081252a8 	cmpgeui	zero,at,18762
 81251fc:	081252a8 	cmpgeui	zero,at,18762
 8125200:	081259b4 	orhi	zero,at,18790
 8125204:	081252a8 	cmpgeui	zero,at,18762
 8125208:	081252a8 	cmpgeui	zero,at,18762
 812520c:	081252a8 	cmpgeui	zero,at,18762
 8125210:	081252a8 	cmpgeui	zero,at,18762
 8125214:	081252a8 	cmpgeui	zero,at,18762
 8125218:	08125a00 	call	8125a0 <__alt_mem_onchip_memory2_3+0x80b5a0>
 812521c:	081252a8 	cmpgeui	zero,at,18762
 8125220:	081252a8 	cmpgeui	zero,at,18762
 8125224:	08126020 	cmpeqi	zero,at,18816
 8125228:	081252a8 	cmpgeui	zero,at,18762
 812522c:	081252a8 	cmpgeui	zero,at,18762
 8125230:	081252a8 	cmpgeui	zero,at,18762
 8125234:	081252a8 	cmpgeui	zero,at,18762
 8125238:	081252a8 	cmpgeui	zero,at,18762
 812523c:	081252a8 	cmpgeui	zero,at,18762
 8125240:	081252a8 	cmpgeui	zero,at,18762
 8125244:	081252a8 	cmpgeui	zero,at,18762
 8125248:	081252a8 	cmpgeui	zero,at,18762
 812524c:	081252a8 	cmpgeui	zero,at,18762
 8125250:	08125ff4 	orhi	zero,at,18815
 8125254:	0812590c 	andi	zero,at,18788
 8125258:	08125f6c 	andhi	zero,at,18813
 812525c:	08125f6c 	andhi	zero,at,18813
 8125260:	08125f6c 	andhi	zero,at,18813
 8125264:	08125f58 	cmpnei	zero,at,18813
 8125268:	0812590c 	andi	zero,at,18788
 812526c:	081252a8 	cmpgeui	zero,at,18762
 8125270:	081252a8 	cmpgeui	zero,at,18762
 8125274:	08125ee0 	cmpeqi	zero,at,18811
 8125278:	081252a8 	cmpgeui	zero,at,18762
 812527c:	08125eb0 	cmpltui	zero,at,18810
 8125280:	081259c0 	call	81259c <__alt_mem_onchip_memory2_3+0x80b59c>
 8125284:	08125f10 	cmplti	zero,at,18812
 8125288:	08125efc 	xorhi	zero,at,18811
 812528c:	081252a8 	cmpgeui	zero,at,18762
 8125290:	0812618c 	andi	zero,at,18822
 8125294:	081252a8 	cmpgeui	zero,at,18762
 8125298:	08125a0c 	andi	zero,at,18792
 812529c:	081252a8 	cmpgeui	zero,at,18762
 81252a0:	081252a8 	cmpgeui	zero,at,18762
 81252a4:	08126084 	addi	zero,at,18818
 81252a8:	d9014d17 	ldw	r4,1332(sp)
 81252ac:	2000ce26 	beq	r4,zero,81255e8 <___vfprintf_internal_r+0x6d4>
 81252b0:	01400044 	movi	r5,1
 81252b4:	d9800f04 	addi	r6,sp,60
 81252b8:	d9c14015 	stw	r7,1280(sp)
 81252bc:	d9414515 	stw	r5,1300(sp)
 81252c0:	d9814115 	stw	r6,1284(sp)
 81252c4:	280f883a 	mov	r7,r5
 81252c8:	d9000f05 	stb	r4,60(sp)
 81252cc:	d8000405 	stb	zero,16(sp)
 81252d0:	d8014615 	stw	zero,1304(sp)
 81252d4:	d8c14c17 	ldw	r3,1328(sp)
 81252d8:	1880008c 	andi	r2,r3,2
 81252dc:	1005003a 	cmpeq	r2,r2,zero
 81252e0:	d8815015 	stw	r2,1344(sp)
 81252e4:	1000031e 	bne	r2,zero,81252f4 <___vfprintf_internal_r+0x3e0>
 81252e8:	d9014517 	ldw	r4,1300(sp)
 81252ec:	21000084 	addi	r4,r4,2
 81252f0:	d9014515 	stw	r4,1300(sp)
 81252f4:	d9414c17 	ldw	r5,1328(sp)
 81252f8:	2940210c 	andi	r5,r5,132
 81252fc:	d9414e15 	stw	r5,1336(sp)
 8125300:	28002d1e 	bne	r5,zero,81253b8 <___vfprintf_internal_r+0x4a4>
 8125304:	d9814a17 	ldw	r6,1320(sp)
 8125308:	d8814517 	ldw	r2,1300(sp)
 812530c:	30a1c83a 	sub	r16,r6,r2
 8125310:	0400290e 	bge	zero,r16,81253b8 <___vfprintf_internal_r+0x4a4>
 8125314:	00800404 	movi	r2,16
 8125318:	1404580e 	bge	r2,r16,812647c <___vfprintf_internal_r+0x1568>
 812531c:	dc800e17 	ldw	r18,56(sp)
 8125320:	dc400d17 	ldw	r17,52(sp)
 8125324:	1027883a 	mov	r19,r2
 8125328:	070204f4 	movhi	fp,2067
 812532c:	e706bf84 	addi	fp,fp,6910
 8125330:	050001c4 	movi	r20,7
 8125334:	00000306 	br	8125344 <___vfprintf_internal_r+0x430>
 8125338:	843ffc04 	addi	r16,r16,-16
 812533c:	ad400204 	addi	r21,r21,8
 8125340:	9c00130e 	bge	r19,r16,8125390 <___vfprintf_internal_r+0x47c>
 8125344:	94800404 	addi	r18,r18,16
 8125348:	8c400044 	addi	r17,r17,1
 812534c:	af000015 	stw	fp,0(r21)
 8125350:	acc00115 	stw	r19,4(r21)
 8125354:	dc800e15 	stw	r18,56(sp)
 8125358:	dc400d15 	stw	r17,52(sp)
 812535c:	a47ff60e 	bge	r20,r17,8125338 <___vfprintf_internal_r+0x424>
 8125360:	d9014f17 	ldw	r4,1340(sp)
 8125364:	b00b883a 	mov	r5,r22
 8125368:	d9800c04 	addi	r6,sp,48
 812536c:	d9c15115 	stw	r7,1348(sp)
 8125370:	8124ebc0 	call	8124ebc <__sprint_r>
 8125374:	d9c15117 	ldw	r7,1348(sp)
 8125378:	10009e1e 	bne	r2,zero,81255f4 <___vfprintf_internal_r+0x6e0>
 812537c:	843ffc04 	addi	r16,r16,-16
 8125380:	dc800e17 	ldw	r18,56(sp)
 8125384:	dc400d17 	ldw	r17,52(sp)
 8125388:	dd401904 	addi	r21,sp,100
 812538c:	9c3fed16 	blt	r19,r16,8125344 <___vfprintf_internal_r+0x430>
 8125390:	9425883a 	add	r18,r18,r16
 8125394:	8c400044 	addi	r17,r17,1
 8125398:	008001c4 	movi	r2,7
 812539c:	af000015 	stw	fp,0(r21)
 81253a0:	ac000115 	stw	r16,4(r21)
 81253a4:	dc800e15 	stw	r18,56(sp)
 81253a8:	dc400d15 	stw	r17,52(sp)
 81253ac:	1441f516 	blt	r2,r17,8125b84 <___vfprintf_internal_r+0xc70>
 81253b0:	ad400204 	addi	r21,r21,8
 81253b4:	00000206 	br	81253c0 <___vfprintf_internal_r+0x4ac>
 81253b8:	dc800e17 	ldw	r18,56(sp)
 81253bc:	dc400d17 	ldw	r17,52(sp)
 81253c0:	d8800407 	ldb	r2,16(sp)
 81253c4:	10000b26 	beq	r2,zero,81253f4 <___vfprintf_internal_r+0x4e0>
 81253c8:	00800044 	movi	r2,1
 81253cc:	94800044 	addi	r18,r18,1
 81253d0:	8c400044 	addi	r17,r17,1
 81253d4:	a8800115 	stw	r2,4(r21)
 81253d8:	d8c00404 	addi	r3,sp,16
 81253dc:	008001c4 	movi	r2,7
 81253e0:	a8c00015 	stw	r3,0(r21)
 81253e4:	dc800e15 	stw	r18,56(sp)
 81253e8:	dc400d15 	stw	r17,52(sp)
 81253ec:	1441da16 	blt	r2,r17,8125b58 <___vfprintf_internal_r+0xc44>
 81253f0:	ad400204 	addi	r21,r21,8
 81253f4:	d9015017 	ldw	r4,1344(sp)
 81253f8:	20000b1e 	bne	r4,zero,8125428 <___vfprintf_internal_r+0x514>
 81253fc:	d8800444 	addi	r2,sp,17
 8125400:	94800084 	addi	r18,r18,2
 8125404:	8c400044 	addi	r17,r17,1
 8125408:	a8800015 	stw	r2,0(r21)
 812540c:	00c00084 	movi	r3,2
 8125410:	008001c4 	movi	r2,7
 8125414:	a8c00115 	stw	r3,4(r21)
 8125418:	dc800e15 	stw	r18,56(sp)
 812541c:	dc400d15 	stw	r17,52(sp)
 8125420:	1441c216 	blt	r2,r17,8125b2c <___vfprintf_internal_r+0xc18>
 8125424:	ad400204 	addi	r21,r21,8
 8125428:	d9414e17 	ldw	r5,1336(sp)
 812542c:	00802004 	movi	r2,128
 8125430:	2880b126 	beq	r5,r2,81256f8 <___vfprintf_internal_r+0x7e4>
 8125434:	d8c14617 	ldw	r3,1304(sp)
 8125438:	19e1c83a 	sub	r16,r3,r7
 812543c:	0400260e 	bge	zero,r16,81254d8 <___vfprintf_internal_r+0x5c4>
 8125440:	00800404 	movi	r2,16
 8125444:	1403c90e 	bge	r2,r16,812636c <___vfprintf_internal_r+0x1458>
 8125448:	1027883a 	mov	r19,r2
 812544c:	070204f4 	movhi	fp,2067
 8125450:	e706bb84 	addi	fp,fp,6894
 8125454:	050001c4 	movi	r20,7
 8125458:	00000306 	br	8125468 <___vfprintf_internal_r+0x554>
 812545c:	843ffc04 	addi	r16,r16,-16
 8125460:	ad400204 	addi	r21,r21,8
 8125464:	9c00130e 	bge	r19,r16,81254b4 <___vfprintf_internal_r+0x5a0>
 8125468:	94800404 	addi	r18,r18,16
 812546c:	8c400044 	addi	r17,r17,1
 8125470:	af000015 	stw	fp,0(r21)
 8125474:	acc00115 	stw	r19,4(r21)
 8125478:	dc800e15 	stw	r18,56(sp)
 812547c:	dc400d15 	stw	r17,52(sp)
 8125480:	a47ff60e 	bge	r20,r17,812545c <___vfprintf_internal_r+0x548>
 8125484:	d9014f17 	ldw	r4,1340(sp)
 8125488:	b00b883a 	mov	r5,r22
 812548c:	d9800c04 	addi	r6,sp,48
 8125490:	d9c15115 	stw	r7,1348(sp)
 8125494:	8124ebc0 	call	8124ebc <__sprint_r>
 8125498:	d9c15117 	ldw	r7,1348(sp)
 812549c:	1000551e 	bne	r2,zero,81255f4 <___vfprintf_internal_r+0x6e0>
 81254a0:	843ffc04 	addi	r16,r16,-16
 81254a4:	dc800e17 	ldw	r18,56(sp)
 81254a8:	dc400d17 	ldw	r17,52(sp)
 81254ac:	dd401904 	addi	r21,sp,100
 81254b0:	9c3fed16 	blt	r19,r16,8125468 <___vfprintf_internal_r+0x554>
 81254b4:	9425883a 	add	r18,r18,r16
 81254b8:	8c400044 	addi	r17,r17,1
 81254bc:	008001c4 	movi	r2,7
 81254c0:	af000015 	stw	fp,0(r21)
 81254c4:	ac000115 	stw	r16,4(r21)
 81254c8:	dc800e15 	stw	r18,56(sp)
 81254cc:	dc400d15 	stw	r17,52(sp)
 81254d0:	14418216 	blt	r2,r17,8125adc <___vfprintf_internal_r+0xbc8>
 81254d4:	ad400204 	addi	r21,r21,8
 81254d8:	d9014c17 	ldw	r4,1328(sp)
 81254dc:	2080400c 	andi	r2,r4,256
 81254e0:	10004a1e 	bne	r2,zero,812560c <___vfprintf_internal_r+0x6f8>
 81254e4:	d9414117 	ldw	r5,1284(sp)
 81254e8:	91e5883a 	add	r18,r18,r7
 81254ec:	8c400044 	addi	r17,r17,1
 81254f0:	008001c4 	movi	r2,7
 81254f4:	a9400015 	stw	r5,0(r21)
 81254f8:	a9c00115 	stw	r7,4(r21)
 81254fc:	dc800e15 	stw	r18,56(sp)
 8125500:	dc400d15 	stw	r17,52(sp)
 8125504:	14416716 	blt	r2,r17,8125aa4 <___vfprintf_internal_r+0xb90>
 8125508:	a8c00204 	addi	r3,r21,8
 812550c:	d9814c17 	ldw	r6,1328(sp)
 8125510:	3080010c 	andi	r2,r6,4
 8125514:	10002826 	beq	r2,zero,81255b8 <___vfprintf_internal_r+0x6a4>
 8125518:	d8814a17 	ldw	r2,1320(sp)
 812551c:	d9014517 	ldw	r4,1300(sp)
 8125520:	1121c83a 	sub	r16,r2,r4
 8125524:	0400240e 	bge	zero,r16,81255b8 <___vfprintf_internal_r+0x6a4>
 8125528:	00800404 	movi	r2,16
 812552c:	14044f0e 	bge	r2,r16,812666c <___vfprintf_internal_r+0x1758>
 8125530:	dc400d17 	ldw	r17,52(sp)
 8125534:	1027883a 	mov	r19,r2
 8125538:	070204f4 	movhi	fp,2067
 812553c:	e706bf84 	addi	fp,fp,6910
 8125540:	050001c4 	movi	r20,7
 8125544:	00000306 	br	8125554 <___vfprintf_internal_r+0x640>
 8125548:	843ffc04 	addi	r16,r16,-16
 812554c:	18c00204 	addi	r3,r3,8
 8125550:	9c00110e 	bge	r19,r16,8125598 <___vfprintf_internal_r+0x684>
 8125554:	94800404 	addi	r18,r18,16
 8125558:	8c400044 	addi	r17,r17,1
 812555c:	1f000015 	stw	fp,0(r3)
 8125560:	1cc00115 	stw	r19,4(r3)
 8125564:	dc800e15 	stw	r18,56(sp)
 8125568:	dc400d15 	stw	r17,52(sp)
 812556c:	a47ff60e 	bge	r20,r17,8125548 <___vfprintf_internal_r+0x634>
 8125570:	d9014f17 	ldw	r4,1340(sp)
 8125574:	b00b883a 	mov	r5,r22
 8125578:	d9800c04 	addi	r6,sp,48
 812557c:	8124ebc0 	call	8124ebc <__sprint_r>
 8125580:	10001c1e 	bne	r2,zero,81255f4 <___vfprintf_internal_r+0x6e0>
 8125584:	843ffc04 	addi	r16,r16,-16
 8125588:	dc800e17 	ldw	r18,56(sp)
 812558c:	dc400d17 	ldw	r17,52(sp)
 8125590:	d8c01904 	addi	r3,sp,100
 8125594:	9c3fef16 	blt	r19,r16,8125554 <___vfprintf_internal_r+0x640>
 8125598:	9425883a 	add	r18,r18,r16
 812559c:	8c400044 	addi	r17,r17,1
 81255a0:	008001c4 	movi	r2,7
 81255a4:	1f000015 	stw	fp,0(r3)
 81255a8:	1c000115 	stw	r16,4(r3)
 81255ac:	dc800e15 	stw	r18,56(sp)
 81255b0:	dc400d15 	stw	r17,52(sp)
 81255b4:	1440cb16 	blt	r2,r17,81258e4 <___vfprintf_internal_r+0x9d0>
 81255b8:	d8814a17 	ldw	r2,1320(sp)
 81255bc:	d9414517 	ldw	r5,1300(sp)
 81255c0:	1140010e 	bge	r2,r5,81255c8 <___vfprintf_internal_r+0x6b4>
 81255c4:	2805883a 	mov	r2,r5
 81255c8:	d9814b17 	ldw	r6,1324(sp)
 81255cc:	308d883a 	add	r6,r6,r2
 81255d0:	d9814b15 	stw	r6,1324(sp)
 81255d4:	90013b1e 	bne	r18,zero,8125ac4 <___vfprintf_internal_r+0xbb0>
 81255d8:	d9c14017 	ldw	r7,1280(sp)
 81255dc:	dd401904 	addi	r21,sp,100
 81255e0:	d8000d15 	stw	zero,52(sp)
 81255e4:	003ea706 	br	8125084 <___vfprintf_internal_r+0x170>
 81255e8:	d8800e17 	ldw	r2,56(sp)
 81255ec:	10053f1e 	bne	r2,zero,8126aec <___vfprintf_internal_r+0x1bd8>
 81255f0:	d8000d15 	stw	zero,52(sp)
 81255f4:	b080030b 	ldhu	r2,12(r22)
 81255f8:	1080100c 	andi	r2,r2,64
 81255fc:	103e8726 	beq	r2,zero,812501c <___vfprintf_internal_r+0x108>
 8125600:	00bfffc4 	movi	r2,-1
 8125604:	d8814b15 	stw	r2,1324(sp)
 8125608:	003e8406 	br	812501c <___vfprintf_internal_r+0x108>
 812560c:	d9814d17 	ldw	r6,1332(sp)
 8125610:	00801944 	movi	r2,101
 8125614:	11806e16 	blt	r2,r6,81257d0 <___vfprintf_internal_r+0x8bc>
 8125618:	d9414717 	ldw	r5,1308(sp)
 812561c:	00c00044 	movi	r3,1
 8125620:	1943430e 	bge	r3,r5,8126330 <___vfprintf_internal_r+0x141c>
 8125624:	d8814117 	ldw	r2,1284(sp)
 8125628:	94800044 	addi	r18,r18,1
 812562c:	8c400044 	addi	r17,r17,1
 8125630:	a8800015 	stw	r2,0(r21)
 8125634:	008001c4 	movi	r2,7
 8125638:	a8c00115 	stw	r3,4(r21)
 812563c:	dc800e15 	stw	r18,56(sp)
 8125640:	dc400d15 	stw	r17,52(sp)
 8125644:	1441ca16 	blt	r2,r17,8125d70 <___vfprintf_internal_r+0xe5c>
 8125648:	a8c00204 	addi	r3,r21,8
 812564c:	d9014917 	ldw	r4,1316(sp)
 8125650:	00800044 	movi	r2,1
 8125654:	94800044 	addi	r18,r18,1
 8125658:	8c400044 	addi	r17,r17,1
 812565c:	18800115 	stw	r2,4(r3)
 8125660:	008001c4 	movi	r2,7
 8125664:	19000015 	stw	r4,0(r3)
 8125668:	dc800e15 	stw	r18,56(sp)
 812566c:	dc400d15 	stw	r17,52(sp)
 8125670:	1441b616 	blt	r2,r17,8125d4c <___vfprintf_internal_r+0xe38>
 8125674:	1cc00204 	addi	r19,r3,8
 8125678:	d9014217 	ldw	r4,1288(sp)
 812567c:	d9414317 	ldw	r5,1292(sp)
 8125680:	000d883a 	mov	r6,zero
 8125684:	000f883a 	mov	r7,zero
 8125688:	8123ed40 	call	8123ed4 <__nedf2>
 812568c:	10017426 	beq	r2,zero,8125c60 <___vfprintf_internal_r+0xd4c>
 8125690:	d9414717 	ldw	r5,1308(sp)
 8125694:	d9814117 	ldw	r6,1284(sp)
 8125698:	8c400044 	addi	r17,r17,1
 812569c:	2c85883a 	add	r2,r5,r18
 81256a0:	14bfffc4 	addi	r18,r2,-1
 81256a4:	28bfffc4 	addi	r2,r5,-1
 81256a8:	30c00044 	addi	r3,r6,1
 81256ac:	98800115 	stw	r2,4(r19)
 81256b0:	008001c4 	movi	r2,7
 81256b4:	98c00015 	stw	r3,0(r19)
 81256b8:	dc800e15 	stw	r18,56(sp)
 81256bc:	dc400d15 	stw	r17,52(sp)
 81256c0:	14418e16 	blt	r2,r17,8125cfc <___vfprintf_internal_r+0xde8>
 81256c4:	9cc00204 	addi	r19,r19,8
 81256c8:	d9414817 	ldw	r5,1312(sp)
 81256cc:	d8800804 	addi	r2,sp,32
 81256d0:	8c400044 	addi	r17,r17,1
 81256d4:	9165883a 	add	r18,r18,r5
 81256d8:	98800015 	stw	r2,0(r19)
 81256dc:	008001c4 	movi	r2,7
 81256e0:	99400115 	stw	r5,4(r19)
 81256e4:	dc800e15 	stw	r18,56(sp)
 81256e8:	dc400d15 	stw	r17,52(sp)
 81256ec:	1440ed16 	blt	r2,r17,8125aa4 <___vfprintf_internal_r+0xb90>
 81256f0:	98c00204 	addi	r3,r19,8
 81256f4:	003f8506 	br	812550c <___vfprintf_internal_r+0x5f8>
 81256f8:	d9814a17 	ldw	r6,1320(sp)
 81256fc:	d8814517 	ldw	r2,1300(sp)
 8125700:	30a1c83a 	sub	r16,r6,r2
 8125704:	043f4b0e 	bge	zero,r16,8125434 <___vfprintf_internal_r+0x520>
 8125708:	00800404 	movi	r2,16
 812570c:	1404340e 	bge	r2,r16,81267e0 <___vfprintf_internal_r+0x18cc>
 8125710:	1027883a 	mov	r19,r2
 8125714:	070204f4 	movhi	fp,2067
 8125718:	e706bb84 	addi	fp,fp,6894
 812571c:	050001c4 	movi	r20,7
 8125720:	00000306 	br	8125730 <___vfprintf_internal_r+0x81c>
 8125724:	843ffc04 	addi	r16,r16,-16
 8125728:	ad400204 	addi	r21,r21,8
 812572c:	9c00130e 	bge	r19,r16,812577c <___vfprintf_internal_r+0x868>
 8125730:	94800404 	addi	r18,r18,16
 8125734:	8c400044 	addi	r17,r17,1
 8125738:	af000015 	stw	fp,0(r21)
 812573c:	acc00115 	stw	r19,4(r21)
 8125740:	dc800e15 	stw	r18,56(sp)
 8125744:	dc400d15 	stw	r17,52(sp)
 8125748:	a47ff60e 	bge	r20,r17,8125724 <___vfprintf_internal_r+0x810>
 812574c:	d9014f17 	ldw	r4,1340(sp)
 8125750:	b00b883a 	mov	r5,r22
 8125754:	d9800c04 	addi	r6,sp,48
 8125758:	d9c15115 	stw	r7,1348(sp)
 812575c:	8124ebc0 	call	8124ebc <__sprint_r>
 8125760:	d9c15117 	ldw	r7,1348(sp)
 8125764:	103fa31e 	bne	r2,zero,81255f4 <___vfprintf_internal_r+0x6e0>
 8125768:	843ffc04 	addi	r16,r16,-16
 812576c:	dc800e17 	ldw	r18,56(sp)
 8125770:	dc400d17 	ldw	r17,52(sp)
 8125774:	dd401904 	addi	r21,sp,100
 8125778:	9c3fed16 	blt	r19,r16,8125730 <___vfprintf_internal_r+0x81c>
 812577c:	9425883a 	add	r18,r18,r16
 8125780:	8c400044 	addi	r17,r17,1
 8125784:	008001c4 	movi	r2,7
 8125788:	af000015 	stw	fp,0(r21)
 812578c:	ac000115 	stw	r16,4(r21)
 8125790:	dc800e15 	stw	r18,56(sp)
 8125794:	dc400d15 	stw	r17,52(sp)
 8125798:	14416116 	blt	r2,r17,8125d20 <___vfprintf_internal_r+0xe0c>
 812579c:	ad400204 	addi	r21,r21,8
 81257a0:	003f2406 	br	8125434 <___vfprintf_internal_r+0x520>
 81257a4:	d9014f17 	ldw	r4,1340(sp)
 81257a8:	81289840 	call	8128984 <__sinit>
 81257ac:	d9c15117 	ldw	r7,1348(sp)
 81257b0:	003def06 	br	8124f70 <___vfprintf_internal_r+0x5c>
 81257b4:	d9014f17 	ldw	r4,1340(sp)
 81257b8:	b00b883a 	mov	r5,r22
 81257bc:	d9c15115 	stw	r7,1348(sp)
 81257c0:	8126de40 	call	8126de4 <__swsetup_r>
 81257c4:	d9c15117 	ldw	r7,1348(sp)
 81257c8:	103dee26 	beq	r2,zero,8124f84 <___vfprintf_internal_r+0x70>
 81257cc:	003f8c06 	br	8125600 <___vfprintf_internal_r+0x6ec>
 81257d0:	d9014217 	ldw	r4,1288(sp)
 81257d4:	d9414317 	ldw	r5,1292(sp)
 81257d8:	000d883a 	mov	r6,zero
 81257dc:	000f883a 	mov	r7,zero
 81257e0:	8123e4c0 	call	8123e4c <__eqdf2>
 81257e4:	1000f21e 	bne	r2,zero,8125bb0 <___vfprintf_internal_r+0xc9c>
 81257e8:	008204f4 	movhi	r2,2067
 81257ec:	1086bb04 	addi	r2,r2,6892
 81257f0:	94800044 	addi	r18,r18,1
 81257f4:	8c400044 	addi	r17,r17,1
 81257f8:	a8800015 	stw	r2,0(r21)
 81257fc:	00c00044 	movi	r3,1
 8125800:	008001c4 	movi	r2,7
 8125804:	a8c00115 	stw	r3,4(r21)
 8125808:	dc800e15 	stw	r18,56(sp)
 812580c:	dc400d15 	stw	r17,52(sp)
 8125810:	1442fa16 	blt	r2,r17,81263fc <___vfprintf_internal_r+0x14e8>
 8125814:	a8c00204 	addi	r3,r21,8
 8125818:	d8800517 	ldw	r2,20(sp)
 812581c:	d9014717 	ldw	r4,1308(sp)
 8125820:	11015c0e 	bge	r2,r4,8125d94 <___vfprintf_internal_r+0xe80>
 8125824:	dc400d17 	ldw	r17,52(sp)
 8125828:	d9814917 	ldw	r6,1316(sp)
 812582c:	00800044 	movi	r2,1
 8125830:	94800044 	addi	r18,r18,1
 8125834:	8c400044 	addi	r17,r17,1
 8125838:	18800115 	stw	r2,4(r3)
 812583c:	008001c4 	movi	r2,7
 8125840:	19800015 	stw	r6,0(r3)
 8125844:	dc800e15 	stw	r18,56(sp)
 8125848:	dc400d15 	stw	r17,52(sp)
 812584c:	14431016 	blt	r2,r17,8126490 <___vfprintf_internal_r+0x157c>
 8125850:	18c00204 	addi	r3,r3,8
 8125854:	d8814717 	ldw	r2,1308(sp)
 8125858:	143fffc4 	addi	r16,r2,-1
 812585c:	043f2b0e 	bge	zero,r16,812550c <___vfprintf_internal_r+0x5f8>
 8125860:	00800404 	movi	r2,16
 8125864:	1402a20e 	bge	r2,r16,81262f0 <___vfprintf_internal_r+0x13dc>
 8125868:	dc400d17 	ldw	r17,52(sp)
 812586c:	1027883a 	mov	r19,r2
 8125870:	070204f4 	movhi	fp,2067
 8125874:	e706bb84 	addi	fp,fp,6894
 8125878:	050001c4 	movi	r20,7
 812587c:	00000306 	br	812588c <___vfprintf_internal_r+0x978>
 8125880:	18c00204 	addi	r3,r3,8
 8125884:	843ffc04 	addi	r16,r16,-16
 8125888:	9c029c0e 	bge	r19,r16,81262fc <___vfprintf_internal_r+0x13e8>
 812588c:	94800404 	addi	r18,r18,16
 8125890:	8c400044 	addi	r17,r17,1
 8125894:	1f000015 	stw	fp,0(r3)
 8125898:	1cc00115 	stw	r19,4(r3)
 812589c:	dc800e15 	stw	r18,56(sp)
 81258a0:	dc400d15 	stw	r17,52(sp)
 81258a4:	a47ff60e 	bge	r20,r17,8125880 <___vfprintf_internal_r+0x96c>
 81258a8:	d9014f17 	ldw	r4,1340(sp)
 81258ac:	b00b883a 	mov	r5,r22
 81258b0:	d9800c04 	addi	r6,sp,48
 81258b4:	8124ebc0 	call	8124ebc <__sprint_r>
 81258b8:	103f4e1e 	bne	r2,zero,81255f4 <___vfprintf_internal_r+0x6e0>
 81258bc:	dc800e17 	ldw	r18,56(sp)
 81258c0:	dc400d17 	ldw	r17,52(sp)
 81258c4:	d8c01904 	addi	r3,sp,100
 81258c8:	003fee06 	br	8125884 <___vfprintf_internal_r+0x970>
 81258cc:	d8802c0b 	ldhu	r2,176(sp)
 81258d0:	00ffffc4 	movi	r3,-1
 81258d4:	d8c14b15 	stw	r3,1324(sp)
 81258d8:	1080100c 	andi	r2,r2,64
 81258dc:	103dcc1e 	bne	r2,zero,8125010 <___vfprintf_internal_r+0xfc>
 81258e0:	003dce06 	br	812501c <___vfprintf_internal_r+0x108>
 81258e4:	d9014f17 	ldw	r4,1340(sp)
 81258e8:	b00b883a 	mov	r5,r22
 81258ec:	d9800c04 	addi	r6,sp,48
 81258f0:	8124ebc0 	call	8124ebc <__sprint_r>
 81258f4:	103f3f1e 	bne	r2,zero,81255f4 <___vfprintf_internal_r+0x6e0>
 81258f8:	dc800e17 	ldw	r18,56(sp)
 81258fc:	003f2e06 	br	81255b8 <___vfprintf_internal_r+0x6a4>
 8125900:	d9414c17 	ldw	r5,1328(sp)
 8125904:	29400414 	ori	r5,r5,16
 8125908:	d9414c15 	stw	r5,1328(sp)
 812590c:	d9814c17 	ldw	r6,1328(sp)
 8125910:	3080080c 	andi	r2,r6,32
 8125914:	10014f1e 	bne	r2,zero,8125e54 <___vfprintf_internal_r+0xf40>
 8125918:	d8c14c17 	ldw	r3,1328(sp)
 812591c:	1880040c 	andi	r2,r3,16
 8125920:	1002ea1e 	bne	r2,zero,81264cc <___vfprintf_internal_r+0x15b8>
 8125924:	d9014c17 	ldw	r4,1328(sp)
 8125928:	2080100c 	andi	r2,r4,64
 812592c:	1002e726 	beq	r2,zero,81264cc <___vfprintf_internal_r+0x15b8>
 8125930:	3880000f 	ldh	r2,0(r7)
 8125934:	39c00104 	addi	r7,r7,4
 8125938:	d9c14015 	stw	r7,1280(sp)
 812593c:	1023d7fa 	srai	r17,r2,31
 8125940:	1021883a 	mov	r16,r2
 8125944:	88037216 	blt	r17,zero,8126710 <___vfprintf_internal_r+0x17fc>
 8125948:	01000044 	movi	r4,1
 812594c:	98000416 	blt	r19,zero,8125960 <___vfprintf_internal_r+0xa4c>
 8125950:	d8c14c17 	ldw	r3,1328(sp)
 8125954:	00bfdfc4 	movi	r2,-129
 8125958:	1886703a 	and	r3,r3,r2
 812595c:	d8c14c15 	stw	r3,1328(sp)
 8125960:	8444b03a 	or	r2,r16,r17
 8125964:	1002261e 	bne	r2,zero,8126200 <___vfprintf_internal_r+0x12ec>
 8125968:	9802251e 	bne	r19,zero,8126200 <___vfprintf_internal_r+0x12ec>
 812596c:	20803fcc 	andi	r2,r4,255
 8125970:	10029b26 	beq	r2,zero,81263e0 <___vfprintf_internal_r+0x14cc>
 8125974:	d8c01904 	addi	r3,sp,100
 8125978:	dd000f04 	addi	r20,sp,60
 812597c:	d8c14115 	stw	r3,1284(sp)
 8125980:	d8c14117 	ldw	r3,1284(sp)
 8125984:	dcc14515 	stw	r19,1300(sp)
 8125988:	a0c5c83a 	sub	r2,r20,r3
 812598c:	11c00a04 	addi	r7,r2,40
 8125990:	99c0010e 	bge	r19,r7,8125998 <___vfprintf_internal_r+0xa84>
 8125994:	d9c14515 	stw	r7,1300(sp)
 8125998:	dcc14615 	stw	r19,1304(sp)
 812599c:	d8800407 	ldb	r2,16(sp)
 81259a0:	103e4c26 	beq	r2,zero,81252d4 <___vfprintf_internal_r+0x3c0>
 81259a4:	d8814517 	ldw	r2,1300(sp)
 81259a8:	10800044 	addi	r2,r2,1
 81259ac:	d8814515 	stw	r2,1300(sp)
 81259b0:	003e4806 	br	81252d4 <___vfprintf_internal_r+0x3c0>
 81259b4:	d9814c17 	ldw	r6,1328(sp)
 81259b8:	31800414 	ori	r6,r6,16
 81259bc:	d9814c15 	stw	r6,1328(sp)
 81259c0:	d8c14c17 	ldw	r3,1328(sp)
 81259c4:	1880080c 	andi	r2,r3,32
 81259c8:	1001271e 	bne	r2,zero,8125e68 <___vfprintf_internal_r+0xf54>
 81259cc:	d9414c17 	ldw	r5,1328(sp)
 81259d0:	2880040c 	andi	r2,r5,16
 81259d4:	1002b61e 	bne	r2,zero,81264b0 <___vfprintf_internal_r+0x159c>
 81259d8:	d9814c17 	ldw	r6,1328(sp)
 81259dc:	3080100c 	andi	r2,r6,64
 81259e0:	1002b326 	beq	r2,zero,81264b0 <___vfprintf_internal_r+0x159c>
 81259e4:	3c00000b 	ldhu	r16,0(r7)
 81259e8:	0009883a 	mov	r4,zero
 81259ec:	39c00104 	addi	r7,r7,4
 81259f0:	0023883a 	mov	r17,zero
 81259f4:	d9c14015 	stw	r7,1280(sp)
 81259f8:	d8000405 	stb	zero,16(sp)
 81259fc:	003fd306 	br	812594c <___vfprintf_internal_r+0xa38>
 8125a00:	d9014c17 	ldw	r4,1328(sp)
 8125a04:	21000414 	ori	r4,r4,16
 8125a08:	d9014c15 	stw	r4,1328(sp)
 8125a0c:	d9414c17 	ldw	r5,1328(sp)
 8125a10:	2880080c 	andi	r2,r5,32
 8125a14:	1001081e 	bne	r2,zero,8125e38 <___vfprintf_internal_r+0xf24>
 8125a18:	d8c14c17 	ldw	r3,1328(sp)
 8125a1c:	1880040c 	andi	r2,r3,16
 8125a20:	1002b01e 	bne	r2,zero,81264e4 <___vfprintf_internal_r+0x15d0>
 8125a24:	d9014c17 	ldw	r4,1328(sp)
 8125a28:	2080100c 	andi	r2,r4,64
 8125a2c:	1002ad26 	beq	r2,zero,81264e4 <___vfprintf_internal_r+0x15d0>
 8125a30:	3c00000b 	ldhu	r16,0(r7)
 8125a34:	01000044 	movi	r4,1
 8125a38:	39c00104 	addi	r7,r7,4
 8125a3c:	0023883a 	mov	r17,zero
 8125a40:	d9c14015 	stw	r7,1280(sp)
 8125a44:	d8000405 	stb	zero,16(sp)
 8125a48:	003fc006 	br	812594c <___vfprintf_internal_r+0xa38>
 8125a4c:	d9014f17 	ldw	r4,1340(sp)
 8125a50:	b00b883a 	mov	r5,r22
 8125a54:	d9800c04 	addi	r6,sp,48
 8125a58:	8124ebc0 	call	8124ebc <__sprint_r>
 8125a5c:	103ee51e 	bne	r2,zero,81255f4 <___vfprintf_internal_r+0x6e0>
 8125a60:	dc800e17 	ldw	r18,56(sp)
 8125a64:	d8c01904 	addi	r3,sp,100
 8125a68:	d9814c17 	ldw	r6,1328(sp)
 8125a6c:	3080004c 	andi	r2,r6,1
 8125a70:	1005003a 	cmpeq	r2,r2,zero
 8125a74:	103ea51e 	bne	r2,zero,812550c <___vfprintf_internal_r+0x5f8>
 8125a78:	00800044 	movi	r2,1
 8125a7c:	dc400d17 	ldw	r17,52(sp)
 8125a80:	18800115 	stw	r2,4(r3)
 8125a84:	d8814917 	ldw	r2,1316(sp)
 8125a88:	94800044 	addi	r18,r18,1
 8125a8c:	8c400044 	addi	r17,r17,1
 8125a90:	18800015 	stw	r2,0(r3)
 8125a94:	008001c4 	movi	r2,7
 8125a98:	dc800e15 	stw	r18,56(sp)
 8125a9c:	dc400d15 	stw	r17,52(sp)
 8125aa0:	14421e0e 	bge	r2,r17,812631c <___vfprintf_internal_r+0x1408>
 8125aa4:	d9014f17 	ldw	r4,1340(sp)
 8125aa8:	b00b883a 	mov	r5,r22
 8125aac:	d9800c04 	addi	r6,sp,48
 8125ab0:	8124ebc0 	call	8124ebc <__sprint_r>
 8125ab4:	103ecf1e 	bne	r2,zero,81255f4 <___vfprintf_internal_r+0x6e0>
 8125ab8:	dc800e17 	ldw	r18,56(sp)
 8125abc:	d8c01904 	addi	r3,sp,100
 8125ac0:	003e9206 	br	812550c <___vfprintf_internal_r+0x5f8>
 8125ac4:	d9014f17 	ldw	r4,1340(sp)
 8125ac8:	b00b883a 	mov	r5,r22
 8125acc:	d9800c04 	addi	r6,sp,48
 8125ad0:	8124ebc0 	call	8124ebc <__sprint_r>
 8125ad4:	103ec026 	beq	r2,zero,81255d8 <___vfprintf_internal_r+0x6c4>
 8125ad8:	003ec606 	br	81255f4 <___vfprintf_internal_r+0x6e0>
 8125adc:	d9014f17 	ldw	r4,1340(sp)
 8125ae0:	b00b883a 	mov	r5,r22
 8125ae4:	d9800c04 	addi	r6,sp,48
 8125ae8:	d9c15115 	stw	r7,1348(sp)
 8125aec:	8124ebc0 	call	8124ebc <__sprint_r>
 8125af0:	d9c15117 	ldw	r7,1348(sp)
 8125af4:	103ebf1e 	bne	r2,zero,81255f4 <___vfprintf_internal_r+0x6e0>
 8125af8:	dc800e17 	ldw	r18,56(sp)
 8125afc:	dc400d17 	ldw	r17,52(sp)
 8125b00:	dd401904 	addi	r21,sp,100
 8125b04:	003e7406 	br	81254d8 <___vfprintf_internal_r+0x5c4>
 8125b08:	d9014f17 	ldw	r4,1340(sp)
 8125b0c:	b00b883a 	mov	r5,r22
 8125b10:	d9800c04 	addi	r6,sp,48
 8125b14:	d9c15115 	stw	r7,1348(sp)
 8125b18:	8124ebc0 	call	8124ebc <__sprint_r>
 8125b1c:	d9c15117 	ldw	r7,1348(sp)
 8125b20:	103eb41e 	bne	r2,zero,81255f4 <___vfprintf_internal_r+0x6e0>
 8125b24:	dd401904 	addi	r21,sp,100
 8125b28:	003d6d06 	br	81250e0 <___vfprintf_internal_r+0x1cc>
 8125b2c:	d9014f17 	ldw	r4,1340(sp)
 8125b30:	b00b883a 	mov	r5,r22
 8125b34:	d9800c04 	addi	r6,sp,48
 8125b38:	d9c15115 	stw	r7,1348(sp)
 8125b3c:	8124ebc0 	call	8124ebc <__sprint_r>
 8125b40:	d9c15117 	ldw	r7,1348(sp)
 8125b44:	103eab1e 	bne	r2,zero,81255f4 <___vfprintf_internal_r+0x6e0>
 8125b48:	dc800e17 	ldw	r18,56(sp)
 8125b4c:	dc400d17 	ldw	r17,52(sp)
 8125b50:	dd401904 	addi	r21,sp,100
 8125b54:	003e3406 	br	8125428 <___vfprintf_internal_r+0x514>
 8125b58:	d9014f17 	ldw	r4,1340(sp)
 8125b5c:	b00b883a 	mov	r5,r22
 8125b60:	d9800c04 	addi	r6,sp,48
 8125b64:	d9c15115 	stw	r7,1348(sp)
 8125b68:	8124ebc0 	call	8124ebc <__sprint_r>
 8125b6c:	d9c15117 	ldw	r7,1348(sp)
 8125b70:	103ea01e 	bne	r2,zero,81255f4 <___vfprintf_internal_r+0x6e0>
 8125b74:	dc800e17 	ldw	r18,56(sp)
 8125b78:	dc400d17 	ldw	r17,52(sp)
 8125b7c:	dd401904 	addi	r21,sp,100
 8125b80:	003e1c06 	br	81253f4 <___vfprintf_internal_r+0x4e0>
 8125b84:	d9014f17 	ldw	r4,1340(sp)
 8125b88:	b00b883a 	mov	r5,r22
 8125b8c:	d9800c04 	addi	r6,sp,48
 8125b90:	d9c15115 	stw	r7,1348(sp)
 8125b94:	8124ebc0 	call	8124ebc <__sprint_r>
 8125b98:	d9c15117 	ldw	r7,1348(sp)
 8125b9c:	103e951e 	bne	r2,zero,81255f4 <___vfprintf_internal_r+0x6e0>
 8125ba0:	dc800e17 	ldw	r18,56(sp)
 8125ba4:	dc400d17 	ldw	r17,52(sp)
 8125ba8:	dd401904 	addi	r21,sp,100
 8125bac:	003e0406 	br	81253c0 <___vfprintf_internal_r+0x4ac>
 8125bb0:	d9000517 	ldw	r4,20(sp)
 8125bb4:	0102520e 	bge	zero,r4,8126500 <___vfprintf_internal_r+0x15ec>
 8125bb8:	d9814717 	ldw	r6,1308(sp)
 8125bbc:	21807a16 	blt	r4,r6,8125da8 <___vfprintf_internal_r+0xe94>
 8125bc0:	d8814117 	ldw	r2,1284(sp)
 8125bc4:	91a5883a 	add	r18,r18,r6
 8125bc8:	8c400044 	addi	r17,r17,1
 8125bcc:	a8800015 	stw	r2,0(r21)
 8125bd0:	008001c4 	movi	r2,7
 8125bd4:	a9800115 	stw	r6,4(r21)
 8125bd8:	dc800e15 	stw	r18,56(sp)
 8125bdc:	dc400d15 	stw	r17,52(sp)
 8125be0:	1442f616 	blt	r2,r17,81267bc <___vfprintf_internal_r+0x18a8>
 8125be4:	a8c00204 	addi	r3,r21,8
 8125be8:	d9414717 	ldw	r5,1308(sp)
 8125bec:	2161c83a 	sub	r16,r4,r5
 8125bf0:	043f9d0e 	bge	zero,r16,8125a68 <___vfprintf_internal_r+0xb54>
 8125bf4:	00800404 	movi	r2,16
 8125bf8:	1402130e 	bge	r2,r16,8126448 <___vfprintf_internal_r+0x1534>
 8125bfc:	dc400d17 	ldw	r17,52(sp)
 8125c00:	1027883a 	mov	r19,r2
 8125c04:	070204f4 	movhi	fp,2067
 8125c08:	e706bb84 	addi	fp,fp,6894
 8125c0c:	050001c4 	movi	r20,7
 8125c10:	00000306 	br	8125c20 <___vfprintf_internal_r+0xd0c>
 8125c14:	18c00204 	addi	r3,r3,8
 8125c18:	843ffc04 	addi	r16,r16,-16
 8125c1c:	9c020d0e 	bge	r19,r16,8126454 <___vfprintf_internal_r+0x1540>
 8125c20:	94800404 	addi	r18,r18,16
 8125c24:	8c400044 	addi	r17,r17,1
 8125c28:	1f000015 	stw	fp,0(r3)
 8125c2c:	1cc00115 	stw	r19,4(r3)
 8125c30:	dc800e15 	stw	r18,56(sp)
 8125c34:	dc400d15 	stw	r17,52(sp)
 8125c38:	a47ff60e 	bge	r20,r17,8125c14 <___vfprintf_internal_r+0xd00>
 8125c3c:	d9014f17 	ldw	r4,1340(sp)
 8125c40:	b00b883a 	mov	r5,r22
 8125c44:	d9800c04 	addi	r6,sp,48
 8125c48:	8124ebc0 	call	8124ebc <__sprint_r>
 8125c4c:	103e691e 	bne	r2,zero,81255f4 <___vfprintf_internal_r+0x6e0>
 8125c50:	dc800e17 	ldw	r18,56(sp)
 8125c54:	dc400d17 	ldw	r17,52(sp)
 8125c58:	d8c01904 	addi	r3,sp,100
 8125c5c:	003fee06 	br	8125c18 <___vfprintf_internal_r+0xd04>
 8125c60:	d8814717 	ldw	r2,1308(sp)
 8125c64:	143fffc4 	addi	r16,r2,-1
 8125c68:	043e970e 	bge	zero,r16,81256c8 <___vfprintf_internal_r+0x7b4>
 8125c6c:	00800404 	movi	r2,16
 8125c70:	1400180e 	bge	r2,r16,8125cd4 <___vfprintf_internal_r+0xdc0>
 8125c74:	1029883a 	mov	r20,r2
 8125c78:	070204f4 	movhi	fp,2067
 8125c7c:	e706bb84 	addi	fp,fp,6894
 8125c80:	054001c4 	movi	r21,7
 8125c84:	00000306 	br	8125c94 <___vfprintf_internal_r+0xd80>
 8125c88:	9cc00204 	addi	r19,r19,8
 8125c8c:	843ffc04 	addi	r16,r16,-16
 8125c90:	a400120e 	bge	r20,r16,8125cdc <___vfprintf_internal_r+0xdc8>
 8125c94:	94800404 	addi	r18,r18,16
 8125c98:	8c400044 	addi	r17,r17,1
 8125c9c:	9f000015 	stw	fp,0(r19)
 8125ca0:	9d000115 	stw	r20,4(r19)
 8125ca4:	dc800e15 	stw	r18,56(sp)
 8125ca8:	dc400d15 	stw	r17,52(sp)
 8125cac:	ac7ff60e 	bge	r21,r17,8125c88 <___vfprintf_internal_r+0xd74>
 8125cb0:	d9014f17 	ldw	r4,1340(sp)
 8125cb4:	b00b883a 	mov	r5,r22
 8125cb8:	d9800c04 	addi	r6,sp,48
 8125cbc:	8124ebc0 	call	8124ebc <__sprint_r>
 8125cc0:	103e4c1e 	bne	r2,zero,81255f4 <___vfprintf_internal_r+0x6e0>
 8125cc4:	dc800e17 	ldw	r18,56(sp)
 8125cc8:	dc400d17 	ldw	r17,52(sp)
 8125ccc:	dcc01904 	addi	r19,sp,100
 8125cd0:	003fee06 	br	8125c8c <___vfprintf_internal_r+0xd78>
 8125cd4:	070204f4 	movhi	fp,2067
 8125cd8:	e706bb84 	addi	fp,fp,6894
 8125cdc:	9425883a 	add	r18,r18,r16
 8125ce0:	8c400044 	addi	r17,r17,1
 8125ce4:	008001c4 	movi	r2,7
 8125ce8:	9f000015 	stw	fp,0(r19)
 8125cec:	9c000115 	stw	r16,4(r19)
 8125cf0:	dc800e15 	stw	r18,56(sp)
 8125cf4:	dc400d15 	stw	r17,52(sp)
 8125cf8:	147e720e 	bge	r2,r17,81256c4 <___vfprintf_internal_r+0x7b0>
 8125cfc:	d9014f17 	ldw	r4,1340(sp)
 8125d00:	b00b883a 	mov	r5,r22
 8125d04:	d9800c04 	addi	r6,sp,48
 8125d08:	8124ebc0 	call	8124ebc <__sprint_r>
 8125d0c:	103e391e 	bne	r2,zero,81255f4 <___vfprintf_internal_r+0x6e0>
 8125d10:	dc800e17 	ldw	r18,56(sp)
 8125d14:	dc400d17 	ldw	r17,52(sp)
 8125d18:	dcc01904 	addi	r19,sp,100
 8125d1c:	003e6a06 	br	81256c8 <___vfprintf_internal_r+0x7b4>
 8125d20:	d9014f17 	ldw	r4,1340(sp)
 8125d24:	b00b883a 	mov	r5,r22
 8125d28:	d9800c04 	addi	r6,sp,48
 8125d2c:	d9c15115 	stw	r7,1348(sp)
 8125d30:	8124ebc0 	call	8124ebc <__sprint_r>
 8125d34:	d9c15117 	ldw	r7,1348(sp)
 8125d38:	103e2e1e 	bne	r2,zero,81255f4 <___vfprintf_internal_r+0x6e0>
 8125d3c:	dc800e17 	ldw	r18,56(sp)
 8125d40:	dc400d17 	ldw	r17,52(sp)
 8125d44:	dd401904 	addi	r21,sp,100
 8125d48:	003dba06 	br	8125434 <___vfprintf_internal_r+0x520>
 8125d4c:	d9014f17 	ldw	r4,1340(sp)
 8125d50:	b00b883a 	mov	r5,r22
 8125d54:	d9800c04 	addi	r6,sp,48
 8125d58:	8124ebc0 	call	8124ebc <__sprint_r>
 8125d5c:	103e251e 	bne	r2,zero,81255f4 <___vfprintf_internal_r+0x6e0>
 8125d60:	dc800e17 	ldw	r18,56(sp)
 8125d64:	dc400d17 	ldw	r17,52(sp)
 8125d68:	dcc01904 	addi	r19,sp,100
 8125d6c:	003e4206 	br	8125678 <___vfprintf_internal_r+0x764>
 8125d70:	d9014f17 	ldw	r4,1340(sp)
 8125d74:	b00b883a 	mov	r5,r22
 8125d78:	d9800c04 	addi	r6,sp,48
 8125d7c:	8124ebc0 	call	8124ebc <__sprint_r>
 8125d80:	103e1c1e 	bne	r2,zero,81255f4 <___vfprintf_internal_r+0x6e0>
 8125d84:	dc800e17 	ldw	r18,56(sp)
 8125d88:	dc400d17 	ldw	r17,52(sp)
 8125d8c:	d8c01904 	addi	r3,sp,100
 8125d90:	003e2e06 	br	812564c <___vfprintf_internal_r+0x738>
 8125d94:	d9414c17 	ldw	r5,1328(sp)
 8125d98:	2880004c 	andi	r2,r5,1
 8125d9c:	1005003a 	cmpeq	r2,r2,zero
 8125da0:	103dda1e 	bne	r2,zero,812550c <___vfprintf_internal_r+0x5f8>
 8125da4:	003e9f06 	br	8125824 <___vfprintf_internal_r+0x910>
 8125da8:	d8c14117 	ldw	r3,1284(sp)
 8125dac:	9125883a 	add	r18,r18,r4
 8125db0:	8c400044 	addi	r17,r17,1
 8125db4:	008001c4 	movi	r2,7
 8125db8:	a8c00015 	stw	r3,0(r21)
 8125dbc:	a9000115 	stw	r4,4(r21)
 8125dc0:	dc800e15 	stw	r18,56(sp)
 8125dc4:	dc400d15 	stw	r17,52(sp)
 8125dc8:	14426616 	blt	r2,r17,8126764 <___vfprintf_internal_r+0x1850>
 8125dcc:	a8c00204 	addi	r3,r21,8
 8125dd0:	d9414917 	ldw	r5,1316(sp)
 8125dd4:	00800044 	movi	r2,1
 8125dd8:	94800044 	addi	r18,r18,1
 8125ddc:	8c400044 	addi	r17,r17,1
 8125de0:	18800115 	stw	r2,4(r3)
 8125de4:	008001c4 	movi	r2,7
 8125de8:	19400015 	stw	r5,0(r3)
 8125dec:	dc800e15 	stw	r18,56(sp)
 8125df0:	dc400d15 	stw	r17,52(sp)
 8125df4:	2021883a 	mov	r16,r4
 8125df8:	14425016 	blt	r2,r17,812673c <___vfprintf_internal_r+0x1828>
 8125dfc:	19400204 	addi	r5,r3,8
 8125e00:	d9814717 	ldw	r6,1308(sp)
 8125e04:	8c400044 	addi	r17,r17,1
 8125e08:	dc400d15 	stw	r17,52(sp)
 8125e0c:	3107c83a 	sub	r3,r6,r4
 8125e10:	d9014117 	ldw	r4,1284(sp)
 8125e14:	90e5883a 	add	r18,r18,r3
 8125e18:	28c00115 	stw	r3,4(r5)
 8125e1c:	8105883a 	add	r2,r16,r4
 8125e20:	28800015 	stw	r2,0(r5)
 8125e24:	008001c4 	movi	r2,7
 8125e28:	dc800e15 	stw	r18,56(sp)
 8125e2c:	147f1d16 	blt	r2,r17,8125aa4 <___vfprintf_internal_r+0xb90>
 8125e30:	28c00204 	addi	r3,r5,8
 8125e34:	003db506 	br	812550c <___vfprintf_internal_r+0x5f8>
 8125e38:	3c000017 	ldw	r16,0(r7)
 8125e3c:	3c400117 	ldw	r17,4(r7)
 8125e40:	39800204 	addi	r6,r7,8
 8125e44:	01000044 	movi	r4,1
 8125e48:	d9814015 	stw	r6,1280(sp)
 8125e4c:	d8000405 	stb	zero,16(sp)
 8125e50:	003ebe06 	br	812594c <___vfprintf_internal_r+0xa38>
 8125e54:	3c000017 	ldw	r16,0(r7)
 8125e58:	3c400117 	ldw	r17,4(r7)
 8125e5c:	38800204 	addi	r2,r7,8
 8125e60:	d8814015 	stw	r2,1280(sp)
 8125e64:	003eb706 	br	8125944 <___vfprintf_internal_r+0xa30>
 8125e68:	3c000017 	ldw	r16,0(r7)
 8125e6c:	3c400117 	ldw	r17,4(r7)
 8125e70:	39000204 	addi	r4,r7,8
 8125e74:	d9014015 	stw	r4,1280(sp)
 8125e78:	0009883a 	mov	r4,zero
 8125e7c:	d8000405 	stb	zero,16(sp)
 8125e80:	003eb206 	br	812594c <___vfprintf_internal_r+0xa38>
 8125e84:	38c00017 	ldw	r3,0(r7)
 8125e88:	39c00104 	addi	r7,r7,4
 8125e8c:	d8c14a15 	stw	r3,1320(sp)
 8125e90:	1800d10e 	bge	r3,zero,81261d8 <___vfprintf_internal_r+0x12c4>
 8125e94:	00c7c83a 	sub	r3,zero,r3
 8125e98:	d8c14a15 	stw	r3,1320(sp)
 8125e9c:	d9014c17 	ldw	r4,1328(sp)
 8125ea0:	b8c00007 	ldb	r3,0(r23)
 8125ea4:	21000114 	ori	r4,r4,4
 8125ea8:	d9014c15 	stw	r4,1328(sp)
 8125eac:	003c9806 	br	8125110 <___vfprintf_internal_r+0x1fc>
 8125eb0:	d9814c17 	ldw	r6,1328(sp)
 8125eb4:	3080080c 	andi	r2,r6,32
 8125eb8:	1001f026 	beq	r2,zero,812667c <___vfprintf_internal_r+0x1768>
 8125ebc:	d9014b17 	ldw	r4,1324(sp)
 8125ec0:	38800017 	ldw	r2,0(r7)
 8125ec4:	39c00104 	addi	r7,r7,4
 8125ec8:	d9c14015 	stw	r7,1280(sp)
 8125ecc:	2007d7fa 	srai	r3,r4,31
 8125ed0:	d9c14017 	ldw	r7,1280(sp)
 8125ed4:	11000015 	stw	r4,0(r2)
 8125ed8:	10c00115 	stw	r3,4(r2)
 8125edc:	003c6906 	br	8125084 <___vfprintf_internal_r+0x170>
 8125ee0:	b8c00007 	ldb	r3,0(r23)
 8125ee4:	00801b04 	movi	r2,108
 8125ee8:	18824f26 	beq	r3,r2,8126828 <___vfprintf_internal_r+0x1914>
 8125eec:	d9414c17 	ldw	r5,1328(sp)
 8125ef0:	29400414 	ori	r5,r5,16
 8125ef4:	d9414c15 	stw	r5,1328(sp)
 8125ef8:	003c8506 	br	8125110 <___vfprintf_internal_r+0x1fc>
 8125efc:	d9814c17 	ldw	r6,1328(sp)
 8125f00:	b8c00007 	ldb	r3,0(r23)
 8125f04:	31800814 	ori	r6,r6,32
 8125f08:	d9814c15 	stw	r6,1328(sp)
 8125f0c:	003c8006 	br	8125110 <___vfprintf_internal_r+0x1fc>
 8125f10:	d8814c17 	ldw	r2,1328(sp)
 8125f14:	3c000017 	ldw	r16,0(r7)
 8125f18:	00c01e04 	movi	r3,120
 8125f1c:	10800094 	ori	r2,r2,2
 8125f20:	d8814c15 	stw	r2,1328(sp)
 8125f24:	39c00104 	addi	r7,r7,4
 8125f28:	014204f4 	movhi	r5,2067
 8125f2c:	2946a404 	addi	r5,r5,6800
 8125f30:	00800c04 	movi	r2,48
 8125f34:	0023883a 	mov	r17,zero
 8125f38:	01000084 	movi	r4,2
 8125f3c:	d9c14015 	stw	r7,1280(sp)
 8125f40:	d8c14d15 	stw	r3,1332(sp)
 8125f44:	d9414415 	stw	r5,1296(sp)
 8125f48:	d8800445 	stb	r2,17(sp)
 8125f4c:	d8c00485 	stb	r3,18(sp)
 8125f50:	d8000405 	stb	zero,16(sp)
 8125f54:	003e7d06 	br	812594c <___vfprintf_internal_r+0xa38>
 8125f58:	d8814c17 	ldw	r2,1328(sp)
 8125f5c:	b8c00007 	ldb	r3,0(r23)
 8125f60:	10801014 	ori	r2,r2,64
 8125f64:	d8814c15 	stw	r2,1328(sp)
 8125f68:	003c6906 	br	8125110 <___vfprintf_internal_r+0x1fc>
 8125f6c:	d9414c17 	ldw	r5,1328(sp)
 8125f70:	2880020c 	andi	r2,r5,8
 8125f74:	1001df26 	beq	r2,zero,81266f4 <___vfprintf_internal_r+0x17e0>
 8125f78:	39800017 	ldw	r6,0(r7)
 8125f7c:	38800204 	addi	r2,r7,8
 8125f80:	d8814015 	stw	r2,1280(sp)
 8125f84:	d9814215 	stw	r6,1288(sp)
 8125f88:	39c00117 	ldw	r7,4(r7)
 8125f8c:	d9c14315 	stw	r7,1292(sp)
 8125f90:	d9014217 	ldw	r4,1288(sp)
 8125f94:	d9414317 	ldw	r5,1292(sp)
 8125f98:	812b8b40 	call	812b8b4 <__isinfd>
 8125f9c:	10021726 	beq	r2,zero,81267fc <___vfprintf_internal_r+0x18e8>
 8125fa0:	d9014217 	ldw	r4,1288(sp)
 8125fa4:	d9414317 	ldw	r5,1292(sp)
 8125fa8:	000d883a 	mov	r6,zero
 8125fac:	000f883a 	mov	r7,zero
 8125fb0:	8123fe40 	call	8123fe4 <__ltdf2>
 8125fb4:	1002ca16 	blt	r2,zero,8126ae0 <___vfprintf_internal_r+0x1bcc>
 8125fb8:	d9414d17 	ldw	r5,1332(sp)
 8125fbc:	008011c4 	movi	r2,71
 8125fc0:	11420a16 	blt	r2,r5,81267ec <___vfprintf_internal_r+0x18d8>
 8125fc4:	018204f4 	movhi	r6,2067
 8125fc8:	3186a904 	addi	r6,r6,6820
 8125fcc:	d9814115 	stw	r6,1284(sp)
 8125fd0:	d9014c17 	ldw	r4,1328(sp)
 8125fd4:	00c000c4 	movi	r3,3
 8125fd8:	00bfdfc4 	movi	r2,-129
 8125fdc:	2088703a 	and	r4,r4,r2
 8125fe0:	180f883a 	mov	r7,r3
 8125fe4:	d8c14515 	stw	r3,1300(sp)
 8125fe8:	d9014c15 	stw	r4,1328(sp)
 8125fec:	d8014615 	stw	zero,1304(sp)
 8125ff0:	003e6a06 	br	812599c <___vfprintf_internal_r+0xa88>
 8125ff4:	38800017 	ldw	r2,0(r7)
 8125ff8:	00c00044 	movi	r3,1
 8125ffc:	39c00104 	addi	r7,r7,4
 8126000:	d9c14015 	stw	r7,1280(sp)
 8126004:	d9000f04 	addi	r4,sp,60
 8126008:	180f883a 	mov	r7,r3
 812600c:	d8c14515 	stw	r3,1300(sp)
 8126010:	d9014115 	stw	r4,1284(sp)
 8126014:	d8800f05 	stb	r2,60(sp)
 8126018:	d8000405 	stb	zero,16(sp)
 812601c:	003cac06 	br	81252d0 <___vfprintf_internal_r+0x3bc>
 8126020:	014204f4 	movhi	r5,2067
 8126024:	2946af04 	addi	r5,r5,6844
 8126028:	d9414415 	stw	r5,1296(sp)
 812602c:	d9814c17 	ldw	r6,1328(sp)
 8126030:	3080080c 	andi	r2,r6,32
 8126034:	1000f926 	beq	r2,zero,812641c <___vfprintf_internal_r+0x1508>
 8126038:	3c000017 	ldw	r16,0(r7)
 812603c:	3c400117 	ldw	r17,4(r7)
 8126040:	38800204 	addi	r2,r7,8
 8126044:	d8814015 	stw	r2,1280(sp)
 8126048:	d9414c17 	ldw	r5,1328(sp)
 812604c:	2880004c 	andi	r2,r5,1
 8126050:	1005003a 	cmpeq	r2,r2,zero
 8126054:	1000b31e 	bne	r2,zero,8126324 <___vfprintf_internal_r+0x1410>
 8126058:	8444b03a 	or	r2,r16,r17
 812605c:	1000b126 	beq	r2,zero,8126324 <___vfprintf_internal_r+0x1410>
 8126060:	d9814d17 	ldw	r6,1332(sp)
 8126064:	29400094 	ori	r5,r5,2
 8126068:	00800c04 	movi	r2,48
 812606c:	01000084 	movi	r4,2
 8126070:	d9414c15 	stw	r5,1328(sp)
 8126074:	d8800445 	stb	r2,17(sp)
 8126078:	d9800485 	stb	r6,18(sp)
 812607c:	d8000405 	stb	zero,16(sp)
 8126080:	003e3206 	br	812594c <___vfprintf_internal_r+0xa38>
 8126084:	018204f4 	movhi	r6,2067
 8126088:	3186a404 	addi	r6,r6,6800
 812608c:	d9814415 	stw	r6,1296(sp)
 8126090:	003fe606 	br	812602c <___vfprintf_internal_r+0x1118>
 8126094:	00800ac4 	movi	r2,43
 8126098:	d8800405 	stb	r2,16(sp)
 812609c:	b8c00007 	ldb	r3,0(r23)
 81260a0:	003c1b06 	br	8125110 <___vfprintf_internal_r+0x1fc>
 81260a4:	d8814c17 	ldw	r2,1328(sp)
 81260a8:	b8c00007 	ldb	r3,0(r23)
 81260ac:	10800054 	ori	r2,r2,1
 81260b0:	d8814c15 	stw	r2,1328(sp)
 81260b4:	003c1606 	br	8125110 <___vfprintf_internal_r+0x1fc>
 81260b8:	d8800407 	ldb	r2,16(sp)
 81260bc:	1000461e 	bne	r2,zero,81261d8 <___vfprintf_internal_r+0x12c4>
 81260c0:	00800804 	movi	r2,32
 81260c4:	d8800405 	stb	r2,16(sp)
 81260c8:	b8c00007 	ldb	r3,0(r23)
 81260cc:	003c1006 	br	8125110 <___vfprintf_internal_r+0x1fc>
 81260d0:	d9814c17 	ldw	r6,1328(sp)
 81260d4:	b8c00007 	ldb	r3,0(r23)
 81260d8:	31800214 	ori	r6,r6,8
 81260dc:	d9814c15 	stw	r6,1328(sp)
 81260e0:	003c0b06 	br	8125110 <___vfprintf_internal_r+0x1fc>
 81260e4:	0007883a 	mov	r3,zero
 81260e8:	01000244 	movi	r4,9
 81260ec:	188002a4 	muli	r2,r3,10
 81260f0:	b8c00007 	ldb	r3,0(r23)
 81260f4:	d9814d17 	ldw	r6,1332(sp)
 81260f8:	bdc00044 	addi	r23,r23,1
 81260fc:	d8c14d15 	stw	r3,1332(sp)
 8126100:	d9414d17 	ldw	r5,1332(sp)
 8126104:	3085883a 	add	r2,r6,r2
 8126108:	10fff404 	addi	r3,r2,-48
 812610c:	28bff404 	addi	r2,r5,-48
 8126110:	20bff62e 	bgeu	r4,r2,81260ec <___vfprintf_internal_r+0x11d8>
 8126114:	d8c14a15 	stw	r3,1320(sp)
 8126118:	003bff06 	br	8125118 <___vfprintf_internal_r+0x204>
 812611c:	d9414c17 	ldw	r5,1328(sp)
 8126120:	b8c00007 	ldb	r3,0(r23)
 8126124:	29402014 	ori	r5,r5,128
 8126128:	d9414c15 	stw	r5,1328(sp)
 812612c:	003bf806 	br	8125110 <___vfprintf_internal_r+0x1fc>
 8126130:	b8c00007 	ldb	r3,0(r23)
 8126134:	00800a84 	movi	r2,42
 8126138:	bdc00044 	addi	r23,r23,1
 812613c:	18831526 	beq	r3,r2,8126d94 <___vfprintf_internal_r+0x1e80>
 8126140:	d8c14d15 	stw	r3,1332(sp)
 8126144:	18bff404 	addi	r2,r3,-48
 8126148:	00c00244 	movi	r3,9
 812614c:	18827836 	bltu	r3,r2,8126b30 <___vfprintf_internal_r+0x1c1c>
 8126150:	000d883a 	mov	r6,zero
 8126154:	308002a4 	muli	r2,r6,10
 8126158:	b9800007 	ldb	r6,0(r23)
 812615c:	d9414d17 	ldw	r5,1332(sp)
 8126160:	bdc00044 	addi	r23,r23,1
 8126164:	d9814d15 	stw	r6,1332(sp)
 8126168:	d9014d17 	ldw	r4,1332(sp)
 812616c:	1145883a 	add	r2,r2,r5
 8126170:	11bff404 	addi	r6,r2,-48
 8126174:	20bff404 	addi	r2,r4,-48
 8126178:	18bff62e 	bgeu	r3,r2,8126154 <___vfprintf_internal_r+0x1240>
 812617c:	3027883a 	mov	r19,r6
 8126180:	303be50e 	bge	r6,zero,8125118 <___vfprintf_internal_r+0x204>
 8126184:	04ffffc4 	movi	r19,-1
 8126188:	003be306 	br	8125118 <___vfprintf_internal_r+0x204>
 812618c:	d8000405 	stb	zero,16(sp)
 8126190:	39800017 	ldw	r6,0(r7)
 8126194:	39c00104 	addi	r7,r7,4
 8126198:	d9c14015 	stw	r7,1280(sp)
 812619c:	d9814115 	stw	r6,1284(sp)
 81261a0:	3001c926 	beq	r6,zero,81268c8 <___vfprintf_internal_r+0x19b4>
 81261a4:	98000e16 	blt	r19,zero,81261e0 <___vfprintf_internal_r+0x12cc>
 81261a8:	d9014117 	ldw	r4,1284(sp)
 81261ac:	000b883a 	mov	r5,zero
 81261b0:	980d883a 	mov	r6,r19
 81261b4:	8129fd00 	call	8129fd0 <memchr>
 81261b8:	10025926 	beq	r2,zero,8126b20 <___vfprintf_internal_r+0x1c0c>
 81261bc:	d8c14117 	ldw	r3,1284(sp)
 81261c0:	10cfc83a 	sub	r7,r2,r3
 81261c4:	99c19e16 	blt	r19,r7,8126840 <___vfprintf_internal_r+0x192c>
 81261c8:	d9c14515 	stw	r7,1300(sp)
 81261cc:	38000916 	blt	r7,zero,81261f4 <___vfprintf_internal_r+0x12e0>
 81261d0:	d8014615 	stw	zero,1304(sp)
 81261d4:	003df106 	br	812599c <___vfprintf_internal_r+0xa88>
 81261d8:	b8c00007 	ldb	r3,0(r23)
 81261dc:	003bcc06 	br	8125110 <___vfprintf_internal_r+0x1fc>
 81261e0:	d9014117 	ldw	r4,1284(sp)
 81261e4:	8124e480 	call	8124e48 <strlen>
 81261e8:	d8814515 	stw	r2,1300(sp)
 81261ec:	100f883a 	mov	r7,r2
 81261f0:	103ff70e 	bge	r2,zero,81261d0 <___vfprintf_internal_r+0x12bc>
 81261f4:	d8014515 	stw	zero,1300(sp)
 81261f8:	d8014615 	stw	zero,1304(sp)
 81261fc:	003de706 	br	812599c <___vfprintf_internal_r+0xa88>
 8126200:	20c03fcc 	andi	r3,r4,255
 8126204:	00800044 	movi	r2,1
 8126208:	18802d26 	beq	r3,r2,81262c0 <___vfprintf_internal_r+0x13ac>
 812620c:	18800e36 	bltu	r3,r2,8126248 <___vfprintf_internal_r+0x1334>
 8126210:	00800084 	movi	r2,2
 8126214:	1880fa26 	beq	r3,r2,8126600 <___vfprintf_internal_r+0x16ec>
 8126218:	010204f4 	movhi	r4,2067
 812621c:	2106b404 	addi	r4,r4,6864
 8126220:	8124e480 	call	8124e48 <strlen>
 8126224:	100f883a 	mov	r7,r2
 8126228:	dcc14515 	stw	r19,1300(sp)
 812622c:	9880010e 	bge	r19,r2,8126234 <___vfprintf_internal_r+0x1320>
 8126230:	d8814515 	stw	r2,1300(sp)
 8126234:	008204f4 	movhi	r2,2067
 8126238:	1086b404 	addi	r2,r2,6864
 812623c:	dcc14615 	stw	r19,1304(sp)
 8126240:	d8814115 	stw	r2,1284(sp)
 8126244:	003dd506 	br	812599c <___vfprintf_internal_r+0xa88>
 8126248:	d9401904 	addi	r5,sp,100
 812624c:	dd000f04 	addi	r20,sp,60
 8126250:	d9414115 	stw	r5,1284(sp)
 8126254:	880a977a 	slli	r5,r17,29
 8126258:	d9814117 	ldw	r6,1284(sp)
 812625c:	8004d0fa 	srli	r2,r16,3
 8126260:	8806d0fa 	srli	r3,r17,3
 8126264:	810001cc 	andi	r4,r16,7
 8126268:	2884b03a 	or	r2,r5,r2
 812626c:	31bfffc4 	addi	r6,r6,-1
 8126270:	21000c04 	addi	r4,r4,48
 8126274:	d9814115 	stw	r6,1284(sp)
 8126278:	10cab03a 	or	r5,r2,r3
 812627c:	31000005 	stb	r4,0(r6)
 8126280:	1021883a 	mov	r16,r2
 8126284:	1823883a 	mov	r17,r3
 8126288:	283ff21e 	bne	r5,zero,8126254 <___vfprintf_internal_r+0x1340>
 812628c:	d8c14c17 	ldw	r3,1328(sp)
 8126290:	1880004c 	andi	r2,r3,1
 8126294:	1005003a 	cmpeq	r2,r2,zero
 8126298:	103db91e 	bne	r2,zero,8125980 <___vfprintf_internal_r+0xa6c>
 812629c:	20803fcc 	andi	r2,r4,255
 81262a0:	1080201c 	xori	r2,r2,128
 81262a4:	10bfe004 	addi	r2,r2,-128
 81262a8:	00c00c04 	movi	r3,48
 81262ac:	10fdb426 	beq	r2,r3,8125980 <___vfprintf_internal_r+0xa6c>
 81262b0:	31bfffc4 	addi	r6,r6,-1
 81262b4:	d9814115 	stw	r6,1284(sp)
 81262b8:	30c00005 	stb	r3,0(r6)
 81262bc:	003db006 	br	8125980 <___vfprintf_internal_r+0xa6c>
 81262c0:	88800068 	cmpgeui	r2,r17,1
 81262c4:	10002c1e 	bne	r2,zero,8126378 <___vfprintf_internal_r+0x1464>
 81262c8:	8800021e 	bne	r17,zero,81262d4 <___vfprintf_internal_r+0x13c0>
 81262cc:	00800244 	movi	r2,9
 81262d0:	14002936 	bltu	r2,r16,8126378 <___vfprintf_internal_r+0x1464>
 81262d4:	d90018c4 	addi	r4,sp,99
 81262d8:	dd000f04 	addi	r20,sp,60
 81262dc:	d9014115 	stw	r4,1284(sp)
 81262e0:	d9014117 	ldw	r4,1284(sp)
 81262e4:	80800c04 	addi	r2,r16,48
 81262e8:	20800005 	stb	r2,0(r4)
 81262ec:	003da406 	br	8125980 <___vfprintf_internal_r+0xa6c>
 81262f0:	dc400d17 	ldw	r17,52(sp)
 81262f4:	070204f4 	movhi	fp,2067
 81262f8:	e706bb84 	addi	fp,fp,6894
 81262fc:	9425883a 	add	r18,r18,r16
 8126300:	8c400044 	addi	r17,r17,1
 8126304:	008001c4 	movi	r2,7
 8126308:	1f000015 	stw	fp,0(r3)
 812630c:	1c000115 	stw	r16,4(r3)
 8126310:	dc800e15 	stw	r18,56(sp)
 8126314:	dc400d15 	stw	r17,52(sp)
 8126318:	147de216 	blt	r2,r17,8125aa4 <___vfprintf_internal_r+0xb90>
 812631c:	18c00204 	addi	r3,r3,8
 8126320:	003c7a06 	br	812550c <___vfprintf_internal_r+0x5f8>
 8126324:	01000084 	movi	r4,2
 8126328:	d8000405 	stb	zero,16(sp)
 812632c:	003d8706 	br	812594c <___vfprintf_internal_r+0xa38>
 8126330:	d9814c17 	ldw	r6,1328(sp)
 8126334:	30c4703a 	and	r2,r6,r3
 8126338:	1005003a 	cmpeq	r2,r2,zero
 812633c:	103cb926 	beq	r2,zero,8125624 <___vfprintf_internal_r+0x710>
 8126340:	d9014117 	ldw	r4,1284(sp)
 8126344:	94800044 	addi	r18,r18,1
 8126348:	8c400044 	addi	r17,r17,1
 812634c:	008001c4 	movi	r2,7
 8126350:	a9000015 	stw	r4,0(r21)
 8126354:	a8c00115 	stw	r3,4(r21)
 8126358:	dc800e15 	stw	r18,56(sp)
 812635c:	dc400d15 	stw	r17,52(sp)
 8126360:	147e6616 	blt	r2,r17,8125cfc <___vfprintf_internal_r+0xde8>
 8126364:	acc00204 	addi	r19,r21,8
 8126368:	003cd706 	br	81256c8 <___vfprintf_internal_r+0x7b4>
 812636c:	070204f4 	movhi	fp,2067
 8126370:	e706bb84 	addi	fp,fp,6894
 8126374:	003c4f06 	br	81254b4 <___vfprintf_internal_r+0x5a0>
 8126378:	dd000f04 	addi	r20,sp,60
 812637c:	dc801904 	addi	r18,sp,100
 8126380:	8009883a 	mov	r4,r16
 8126384:	880b883a 	mov	r5,r17
 8126388:	01800284 	movi	r6,10
 812638c:	000f883a 	mov	r7,zero
 8126390:	812c5dc0 	call	812c5dc <__umoddi3>
 8126394:	12000c04 	addi	r8,r2,48
 8126398:	94bfffc4 	addi	r18,r18,-1
 812639c:	8009883a 	mov	r4,r16
 81263a0:	880b883a 	mov	r5,r17
 81263a4:	01800284 	movi	r6,10
 81263a8:	000f883a 	mov	r7,zero
 81263ac:	92000005 	stb	r8,0(r18)
 81263b0:	812c0000 	call	812c000 <__udivdi3>
 81263b4:	1009883a 	mov	r4,r2
 81263b8:	1021883a 	mov	r16,r2
 81263bc:	18800068 	cmpgeui	r2,r3,1
 81263c0:	1823883a 	mov	r17,r3
 81263c4:	103fee1e 	bne	r2,zero,8126380 <___vfprintf_internal_r+0x146c>
 81263c8:	1800021e 	bne	r3,zero,81263d4 <___vfprintf_internal_r+0x14c0>
 81263cc:	00800244 	movi	r2,9
 81263d0:	113feb36 	bltu	r2,r4,8126380 <___vfprintf_internal_r+0x146c>
 81263d4:	94bfffc4 	addi	r18,r18,-1
 81263d8:	dc814115 	stw	r18,1284(sp)
 81263dc:	003fc006 	br	81262e0 <___vfprintf_internal_r+0x13cc>
 81263e0:	d9014c17 	ldw	r4,1328(sp)
 81263e4:	2080004c 	andi	r2,r4,1
 81263e8:	10009a1e 	bne	r2,zero,8126654 <___vfprintf_internal_r+0x1740>
 81263ec:	d9401904 	addi	r5,sp,100
 81263f0:	dd000f04 	addi	r20,sp,60
 81263f4:	d9414115 	stw	r5,1284(sp)
 81263f8:	003d6106 	br	8125980 <___vfprintf_internal_r+0xa6c>
 81263fc:	d9014f17 	ldw	r4,1340(sp)
 8126400:	b00b883a 	mov	r5,r22
 8126404:	d9800c04 	addi	r6,sp,48
 8126408:	8124ebc0 	call	8124ebc <__sprint_r>
 812640c:	103c791e 	bne	r2,zero,81255f4 <___vfprintf_internal_r+0x6e0>
 8126410:	dc800e17 	ldw	r18,56(sp)
 8126414:	d8c01904 	addi	r3,sp,100
 8126418:	003cff06 	br	8125818 <___vfprintf_internal_r+0x904>
 812641c:	d8c14c17 	ldw	r3,1328(sp)
 8126420:	1880040c 	andi	r2,r3,16
 8126424:	1000711e 	bne	r2,zero,81265ec <___vfprintf_internal_r+0x16d8>
 8126428:	d9014c17 	ldw	r4,1328(sp)
 812642c:	2080100c 	andi	r2,r4,64
 8126430:	10006e26 	beq	r2,zero,81265ec <___vfprintf_internal_r+0x16d8>
 8126434:	3c00000b 	ldhu	r16,0(r7)
 8126438:	0023883a 	mov	r17,zero
 812643c:	39c00104 	addi	r7,r7,4
 8126440:	d9c14015 	stw	r7,1280(sp)
 8126444:	003f0006 	br	8126048 <___vfprintf_internal_r+0x1134>
 8126448:	dc400d17 	ldw	r17,52(sp)
 812644c:	070204f4 	movhi	fp,2067
 8126450:	e706bb84 	addi	fp,fp,6894
 8126454:	9425883a 	add	r18,r18,r16
 8126458:	8c400044 	addi	r17,r17,1
 812645c:	008001c4 	movi	r2,7
 8126460:	1f000015 	stw	fp,0(r3)
 8126464:	1c000115 	stw	r16,4(r3)
 8126468:	dc800e15 	stw	r18,56(sp)
 812646c:	dc400d15 	stw	r17,52(sp)
 8126470:	147d7616 	blt	r2,r17,8125a4c <___vfprintf_internal_r+0xb38>
 8126474:	18c00204 	addi	r3,r3,8
 8126478:	003d7b06 	br	8125a68 <___vfprintf_internal_r+0xb54>
 812647c:	dc800e17 	ldw	r18,56(sp)
 8126480:	dc400d17 	ldw	r17,52(sp)
 8126484:	070204f4 	movhi	fp,2067
 8126488:	e706bf84 	addi	fp,fp,6910
 812648c:	003bc006 	br	8125390 <___vfprintf_internal_r+0x47c>
 8126490:	d9014f17 	ldw	r4,1340(sp)
 8126494:	b00b883a 	mov	r5,r22
 8126498:	d9800c04 	addi	r6,sp,48
 812649c:	8124ebc0 	call	8124ebc <__sprint_r>
 81264a0:	103c541e 	bne	r2,zero,81255f4 <___vfprintf_internal_r+0x6e0>
 81264a4:	dc800e17 	ldw	r18,56(sp)
 81264a8:	d8c01904 	addi	r3,sp,100
 81264ac:	003ce906 	br	8125854 <___vfprintf_internal_r+0x940>
 81264b0:	3c000017 	ldw	r16,0(r7)
 81264b4:	0009883a 	mov	r4,zero
 81264b8:	39c00104 	addi	r7,r7,4
 81264bc:	0023883a 	mov	r17,zero
 81264c0:	d9c14015 	stw	r7,1280(sp)
 81264c4:	d8000405 	stb	zero,16(sp)
 81264c8:	003d2006 	br	812594c <___vfprintf_internal_r+0xa38>
 81264cc:	38800017 	ldw	r2,0(r7)
 81264d0:	39c00104 	addi	r7,r7,4
 81264d4:	d9c14015 	stw	r7,1280(sp)
 81264d8:	1023d7fa 	srai	r17,r2,31
 81264dc:	1021883a 	mov	r16,r2
 81264e0:	003d1806 	br	8125944 <___vfprintf_internal_r+0xa30>
 81264e4:	3c000017 	ldw	r16,0(r7)
 81264e8:	01000044 	movi	r4,1
 81264ec:	39c00104 	addi	r7,r7,4
 81264f0:	0023883a 	mov	r17,zero
 81264f4:	d9c14015 	stw	r7,1280(sp)
 81264f8:	d8000405 	stb	zero,16(sp)
 81264fc:	003d1306 	br	812594c <___vfprintf_internal_r+0xa38>
 8126500:	008204f4 	movhi	r2,2067
 8126504:	1086bb04 	addi	r2,r2,6892
 8126508:	94800044 	addi	r18,r18,1
 812650c:	8c400044 	addi	r17,r17,1
 8126510:	a8800015 	stw	r2,0(r21)
 8126514:	00c00044 	movi	r3,1
 8126518:	008001c4 	movi	r2,7
 812651c:	a8c00115 	stw	r3,4(r21)
 8126520:	dc800e15 	stw	r18,56(sp)
 8126524:	dc400d15 	stw	r17,52(sp)
 8126528:	1440ca16 	blt	r2,r17,8126854 <___vfprintf_internal_r+0x1940>
 812652c:	a8c00204 	addi	r3,r21,8
 8126530:	2000061e 	bne	r4,zero,812654c <___vfprintf_internal_r+0x1638>
 8126534:	d9414717 	ldw	r5,1308(sp)
 8126538:	2800041e 	bne	r5,zero,812654c <___vfprintf_internal_r+0x1638>
 812653c:	d9814c17 	ldw	r6,1328(sp)
 8126540:	3080004c 	andi	r2,r6,1
 8126544:	1005003a 	cmpeq	r2,r2,zero
 8126548:	103bf01e 	bne	r2,zero,812550c <___vfprintf_internal_r+0x5f8>
 812654c:	00800044 	movi	r2,1
 8126550:	dc400d17 	ldw	r17,52(sp)
 8126554:	18800115 	stw	r2,4(r3)
 8126558:	d8814917 	ldw	r2,1316(sp)
 812655c:	94800044 	addi	r18,r18,1
 8126560:	8c400044 	addi	r17,r17,1
 8126564:	18800015 	stw	r2,0(r3)
 8126568:	008001c4 	movi	r2,7
 812656c:	dc800e15 	stw	r18,56(sp)
 8126570:	dc400d15 	stw	r17,52(sp)
 8126574:	1440ca16 	blt	r2,r17,81268a0 <___vfprintf_internal_r+0x198c>
 8126578:	18c00204 	addi	r3,r3,8
 812657c:	0121c83a 	sub	r16,zero,r4
 8126580:	0400500e 	bge	zero,r16,81266c4 <___vfprintf_internal_r+0x17b0>
 8126584:	00800404 	movi	r2,16
 8126588:	1400800e 	bge	r2,r16,812678c <___vfprintf_internal_r+0x1878>
 812658c:	1027883a 	mov	r19,r2
 8126590:	070204f4 	movhi	fp,2067
 8126594:	e706bb84 	addi	fp,fp,6894
 8126598:	050001c4 	movi	r20,7
 812659c:	00000306 	br	81265ac <___vfprintf_internal_r+0x1698>
 81265a0:	18c00204 	addi	r3,r3,8
 81265a4:	843ffc04 	addi	r16,r16,-16
 81265a8:	9c007a0e 	bge	r19,r16,8126794 <___vfprintf_internal_r+0x1880>
 81265ac:	94800404 	addi	r18,r18,16
 81265b0:	8c400044 	addi	r17,r17,1
 81265b4:	1f000015 	stw	fp,0(r3)
 81265b8:	1cc00115 	stw	r19,4(r3)
 81265bc:	dc800e15 	stw	r18,56(sp)
 81265c0:	dc400d15 	stw	r17,52(sp)
 81265c4:	a47ff60e 	bge	r20,r17,81265a0 <___vfprintf_internal_r+0x168c>
 81265c8:	d9014f17 	ldw	r4,1340(sp)
 81265cc:	b00b883a 	mov	r5,r22
 81265d0:	d9800c04 	addi	r6,sp,48
 81265d4:	8124ebc0 	call	8124ebc <__sprint_r>
 81265d8:	103c061e 	bne	r2,zero,81255f4 <___vfprintf_internal_r+0x6e0>
 81265dc:	dc800e17 	ldw	r18,56(sp)
 81265e0:	dc400d17 	ldw	r17,52(sp)
 81265e4:	d8c01904 	addi	r3,sp,100
 81265e8:	003fee06 	br	81265a4 <___vfprintf_internal_r+0x1690>
 81265ec:	3c000017 	ldw	r16,0(r7)
 81265f0:	0023883a 	mov	r17,zero
 81265f4:	39c00104 	addi	r7,r7,4
 81265f8:	d9c14015 	stw	r7,1280(sp)
 81265fc:	003e9206 	br	8126048 <___vfprintf_internal_r+0x1134>
 8126600:	d9401904 	addi	r5,sp,100
 8126604:	dd000f04 	addi	r20,sp,60
 8126608:	d9414115 	stw	r5,1284(sp)
 812660c:	d9814417 	ldw	r6,1296(sp)
 8126610:	880a973a 	slli	r5,r17,28
 8126614:	8004d13a 	srli	r2,r16,4
 8126618:	810003cc 	andi	r4,r16,15
 812661c:	3109883a 	add	r4,r6,r4
 8126620:	2884b03a 	or	r2,r5,r2
 8126624:	21400003 	ldbu	r5,0(r4)
 8126628:	d9014117 	ldw	r4,1284(sp)
 812662c:	8806d13a 	srli	r3,r17,4
 8126630:	1021883a 	mov	r16,r2
 8126634:	213fffc4 	addi	r4,r4,-1
 8126638:	d9014115 	stw	r4,1284(sp)
 812663c:	d9814117 	ldw	r6,1284(sp)
 8126640:	10c8b03a 	or	r4,r2,r3
 8126644:	1823883a 	mov	r17,r3
 8126648:	31400005 	stb	r5,0(r6)
 812664c:	203fef1e 	bne	r4,zero,812660c <___vfprintf_internal_r+0x16f8>
 8126650:	003ccb06 	br	8125980 <___vfprintf_internal_r+0xa6c>
 8126654:	00800c04 	movi	r2,48
 8126658:	d98018c4 	addi	r6,sp,99
 812665c:	dd000f04 	addi	r20,sp,60
 8126660:	d88018c5 	stb	r2,99(sp)
 8126664:	d9814115 	stw	r6,1284(sp)
 8126668:	003cc506 	br	8125980 <___vfprintf_internal_r+0xa6c>
 812666c:	dc400d17 	ldw	r17,52(sp)
 8126670:	070204f4 	movhi	fp,2067
 8126674:	e706bf84 	addi	fp,fp,6910
 8126678:	003bc706 	br	8125598 <___vfprintf_internal_r+0x684>
 812667c:	d9414c17 	ldw	r5,1328(sp)
 8126680:	2880040c 	andi	r2,r5,16
 8126684:	10007c26 	beq	r2,zero,8126878 <___vfprintf_internal_r+0x1964>
 8126688:	38800017 	ldw	r2,0(r7)
 812668c:	39c00104 	addi	r7,r7,4
 8126690:	d9c14015 	stw	r7,1280(sp)
 8126694:	d9814b17 	ldw	r6,1324(sp)
 8126698:	d9c14017 	ldw	r7,1280(sp)
 812669c:	11800015 	stw	r6,0(r2)
 81266a0:	003a7806 	br	8125084 <___vfprintf_internal_r+0x170>
 81266a4:	d9014f17 	ldw	r4,1340(sp)
 81266a8:	b00b883a 	mov	r5,r22
 81266ac:	d9800c04 	addi	r6,sp,48
 81266b0:	8124ebc0 	call	8124ebc <__sprint_r>
 81266b4:	103bcf1e 	bne	r2,zero,81255f4 <___vfprintf_internal_r+0x6e0>
 81266b8:	dc800e17 	ldw	r18,56(sp)
 81266bc:	dc400d17 	ldw	r17,52(sp)
 81266c0:	d8c01904 	addi	r3,sp,100
 81266c4:	d9014717 	ldw	r4,1308(sp)
 81266c8:	d9414117 	ldw	r5,1284(sp)
 81266cc:	8c400044 	addi	r17,r17,1
 81266d0:	9125883a 	add	r18,r18,r4
 81266d4:	008001c4 	movi	r2,7
 81266d8:	19400015 	stw	r5,0(r3)
 81266dc:	19000115 	stw	r4,4(r3)
 81266e0:	dc800e15 	stw	r18,56(sp)
 81266e4:	dc400d15 	stw	r17,52(sp)
 81266e8:	147cee16 	blt	r2,r17,8125aa4 <___vfprintf_internal_r+0xb90>
 81266ec:	18c00204 	addi	r3,r3,8
 81266f0:	003b8606 	br	812550c <___vfprintf_internal_r+0x5f8>
 81266f4:	38c00017 	ldw	r3,0(r7)
 81266f8:	39000204 	addi	r4,r7,8
 81266fc:	d9014015 	stw	r4,1280(sp)
 8126700:	d8c14215 	stw	r3,1288(sp)
 8126704:	39c00117 	ldw	r7,4(r7)
 8126708:	d9c14315 	stw	r7,1292(sp)
 812670c:	003e2006 	br	8125f90 <___vfprintf_internal_r+0x107c>
 8126710:	0005883a 	mov	r2,zero
 8126714:	1409c83a 	sub	r4,r2,r16
 8126718:	1105803a 	cmpltu	r2,r2,r4
 812671c:	044bc83a 	sub	r5,zero,r17
 8126720:	2885c83a 	sub	r2,r5,r2
 8126724:	2021883a 	mov	r16,r4
 8126728:	1023883a 	mov	r17,r2
 812672c:	01000044 	movi	r4,1
 8126730:	00800b44 	movi	r2,45
 8126734:	d8800405 	stb	r2,16(sp)
 8126738:	003c8406 	br	812594c <___vfprintf_internal_r+0xa38>
 812673c:	d9014f17 	ldw	r4,1340(sp)
 8126740:	b00b883a 	mov	r5,r22
 8126744:	d9800c04 	addi	r6,sp,48
 8126748:	8124ebc0 	call	8124ebc <__sprint_r>
 812674c:	103ba91e 	bne	r2,zero,81255f4 <___vfprintf_internal_r+0x6e0>
 8126750:	dc800e17 	ldw	r18,56(sp)
 8126754:	dc400d17 	ldw	r17,52(sp)
 8126758:	d9000517 	ldw	r4,20(sp)
 812675c:	d9401904 	addi	r5,sp,100
 8126760:	003da706 	br	8125e00 <___vfprintf_internal_r+0xeec>
 8126764:	d9014f17 	ldw	r4,1340(sp)
 8126768:	b00b883a 	mov	r5,r22
 812676c:	d9800c04 	addi	r6,sp,48
 8126770:	8124ebc0 	call	8124ebc <__sprint_r>
 8126774:	103b9f1e 	bne	r2,zero,81255f4 <___vfprintf_internal_r+0x6e0>
 8126778:	dc800e17 	ldw	r18,56(sp)
 812677c:	dc400d17 	ldw	r17,52(sp)
 8126780:	d9000517 	ldw	r4,20(sp)
 8126784:	d8c01904 	addi	r3,sp,100
 8126788:	003d9106 	br	8125dd0 <___vfprintf_internal_r+0xebc>
 812678c:	070204f4 	movhi	fp,2067
 8126790:	e706bb84 	addi	fp,fp,6894
 8126794:	9425883a 	add	r18,r18,r16
 8126798:	8c400044 	addi	r17,r17,1
 812679c:	008001c4 	movi	r2,7
 81267a0:	1f000015 	stw	fp,0(r3)
 81267a4:	1c000115 	stw	r16,4(r3)
 81267a8:	dc800e15 	stw	r18,56(sp)
 81267ac:	dc400d15 	stw	r17,52(sp)
 81267b0:	147fbc16 	blt	r2,r17,81266a4 <___vfprintf_internal_r+0x1790>
 81267b4:	18c00204 	addi	r3,r3,8
 81267b8:	003fc206 	br	81266c4 <___vfprintf_internal_r+0x17b0>
 81267bc:	d9014f17 	ldw	r4,1340(sp)
 81267c0:	b00b883a 	mov	r5,r22
 81267c4:	d9800c04 	addi	r6,sp,48
 81267c8:	8124ebc0 	call	8124ebc <__sprint_r>
 81267cc:	103b891e 	bne	r2,zero,81255f4 <___vfprintf_internal_r+0x6e0>
 81267d0:	dc800e17 	ldw	r18,56(sp)
 81267d4:	d9000517 	ldw	r4,20(sp)
 81267d8:	d8c01904 	addi	r3,sp,100
 81267dc:	003d0206 	br	8125be8 <___vfprintf_internal_r+0xcd4>
 81267e0:	070204f4 	movhi	fp,2067
 81267e4:	e706bb84 	addi	fp,fp,6894
 81267e8:	003be406 	br	812577c <___vfprintf_internal_r+0x868>
 81267ec:	008204f4 	movhi	r2,2067
 81267f0:	1086aa04 	addi	r2,r2,6824
 81267f4:	d8814115 	stw	r2,1284(sp)
 81267f8:	003df506 	br	8125fd0 <___vfprintf_internal_r+0x10bc>
 81267fc:	d9014217 	ldw	r4,1288(sp)
 8126800:	d9414317 	ldw	r5,1292(sp)
 8126804:	81227040 	call	8122704 <__isnand>
 8126808:	10003926 	beq	r2,zero,81268f0 <___vfprintf_internal_r+0x19dc>
 812680c:	d9414d17 	ldw	r5,1332(sp)
 8126810:	008011c4 	movi	r2,71
 8126814:	1140ce16 	blt	r2,r5,8126b50 <___vfprintf_internal_r+0x1c3c>
 8126818:	018204f4 	movhi	r6,2067
 812681c:	3186ab04 	addi	r6,r6,6828
 8126820:	d9814115 	stw	r6,1284(sp)
 8126824:	003dea06 	br	8125fd0 <___vfprintf_internal_r+0x10bc>
 8126828:	d9014c17 	ldw	r4,1328(sp)
 812682c:	bdc00044 	addi	r23,r23,1
 8126830:	b8c00007 	ldb	r3,0(r23)
 8126834:	21000814 	ori	r4,r4,32
 8126838:	d9014c15 	stw	r4,1328(sp)
 812683c:	003a3406 	br	8125110 <___vfprintf_internal_r+0x1fc>
 8126840:	dcc14515 	stw	r19,1300(sp)
 8126844:	98011016 	blt	r19,zero,8126c88 <___vfprintf_internal_r+0x1d74>
 8126848:	980f883a 	mov	r7,r19
 812684c:	d8014615 	stw	zero,1304(sp)
 8126850:	003c5206 	br	812599c <___vfprintf_internal_r+0xa88>
 8126854:	d9014f17 	ldw	r4,1340(sp)
 8126858:	b00b883a 	mov	r5,r22
 812685c:	d9800c04 	addi	r6,sp,48
 8126860:	8124ebc0 	call	8124ebc <__sprint_r>
 8126864:	103b631e 	bne	r2,zero,81255f4 <___vfprintf_internal_r+0x6e0>
 8126868:	dc800e17 	ldw	r18,56(sp)
 812686c:	d9000517 	ldw	r4,20(sp)
 8126870:	d8c01904 	addi	r3,sp,100
 8126874:	003f2e06 	br	8126530 <___vfprintf_internal_r+0x161c>
 8126878:	d8c14c17 	ldw	r3,1328(sp)
 812687c:	1880100c 	andi	r2,r3,64
 8126880:	1000a026 	beq	r2,zero,8126b04 <___vfprintf_internal_r+0x1bf0>
 8126884:	38800017 	ldw	r2,0(r7)
 8126888:	39c00104 	addi	r7,r7,4
 812688c:	d9c14015 	stw	r7,1280(sp)
 8126890:	d9014b17 	ldw	r4,1324(sp)
 8126894:	d9c14017 	ldw	r7,1280(sp)
 8126898:	1100000d 	sth	r4,0(r2)
 812689c:	0039f906 	br	8125084 <___vfprintf_internal_r+0x170>
 81268a0:	d9014f17 	ldw	r4,1340(sp)
 81268a4:	b00b883a 	mov	r5,r22
 81268a8:	d9800c04 	addi	r6,sp,48
 81268ac:	8124ebc0 	call	8124ebc <__sprint_r>
 81268b0:	103b501e 	bne	r2,zero,81255f4 <___vfprintf_internal_r+0x6e0>
 81268b4:	dc800e17 	ldw	r18,56(sp)
 81268b8:	dc400d17 	ldw	r17,52(sp)
 81268bc:	d9000517 	ldw	r4,20(sp)
 81268c0:	d8c01904 	addi	r3,sp,100
 81268c4:	003f2d06 	br	812657c <___vfprintf_internal_r+0x1668>
 81268c8:	00800184 	movi	r2,6
 81268cc:	14c09a36 	bltu	r2,r19,8126b38 <___vfprintf_internal_r+0x1c24>
 81268d0:	dcc14515 	stw	r19,1300(sp)
 81268d4:	9800010e 	bge	r19,zero,81268dc <___vfprintf_internal_r+0x19c8>
 81268d8:	d8014515 	stw	zero,1300(sp)
 81268dc:	008204f4 	movhi	r2,2067
 81268e0:	1086ad04 	addi	r2,r2,6836
 81268e4:	980f883a 	mov	r7,r19
 81268e8:	d8814115 	stw	r2,1284(sp)
 81268ec:	003a7806 	br	81252d0 <___vfprintf_internal_r+0x3bc>
 81268f0:	00bfffc4 	movi	r2,-1
 81268f4:	9880e226 	beq	r19,r2,8126c80 <___vfprintf_internal_r+0x1d6c>
 81268f8:	d9414d17 	ldw	r5,1332(sp)
 81268fc:	008019c4 	movi	r2,103
 8126900:	2880dc26 	beq	r5,r2,8126c74 <___vfprintf_internal_r+0x1d60>
 8126904:	008011c4 	movi	r2,71
 8126908:	2880da26 	beq	r5,r2,8126c74 <___vfprintf_internal_r+0x1d60>
 812690c:	d9414c17 	ldw	r5,1328(sp)
 8126910:	d9014317 	ldw	r4,1292(sp)
 8126914:	d9814217 	ldw	r6,1288(sp)
 8126918:	29404014 	ori	r5,r5,256
 812691c:	d9414c15 	stw	r5,1328(sp)
 8126920:	2000cc16 	blt	r4,zero,8126c54 <___vfprintf_internal_r+0x1d40>
 8126924:	3021883a 	mov	r16,r6
 8126928:	2023883a 	mov	r17,r4
 812692c:	0039883a 	mov	fp,zero
 8126930:	d9414d17 	ldw	r5,1332(sp)
 8126934:	00801984 	movi	r2,102
 8126938:	2880b726 	beq	r5,r2,8126c18 <___vfprintf_internal_r+0x1d04>
 812693c:	00801184 	movi	r2,70
 8126940:	2880b526 	beq	r5,r2,8126c18 <___vfprintf_internal_r+0x1d04>
 8126944:	00801944 	movi	r2,101
 8126948:	2880c826 	beq	r5,r2,8126c6c <___vfprintf_internal_r+0x1d58>
 812694c:	00801144 	movi	r2,69
 8126950:	2880c626 	beq	r5,r2,8126c6c <___vfprintf_internal_r+0x1d58>
 8126954:	9829883a 	mov	r20,r19
 8126958:	d9014f17 	ldw	r4,1340(sp)
 812695c:	d8800504 	addi	r2,sp,20
 8126960:	880d883a 	mov	r6,r17
 8126964:	d8800115 	stw	r2,4(sp)
 8126968:	d8c00604 	addi	r3,sp,24
 812696c:	d8800704 	addi	r2,sp,28
 8126970:	800b883a 	mov	r5,r16
 8126974:	01c00084 	movi	r7,2
 8126978:	d8c00215 	stw	r3,8(sp)
 812697c:	d8800315 	stw	r2,12(sp)
 8126980:	dd000015 	stw	r20,0(sp)
 8126984:	81271380 	call	8127138 <_dtoa_r>
 8126988:	d9814d17 	ldw	r6,1332(sp)
 812698c:	d8814115 	stw	r2,1284(sp)
 8126990:	008019c4 	movi	r2,103
 8126994:	30809526 	beq	r6,r2,8126bec <___vfprintf_internal_r+0x1cd8>
 8126998:	d8c14d17 	ldw	r3,1332(sp)
 812699c:	008011c4 	movi	r2,71
 81269a0:	18809226 	beq	r3,r2,8126bec <___vfprintf_internal_r+0x1cd8>
 81269a4:	d9414117 	ldw	r5,1284(sp)
 81269a8:	d9814d17 	ldw	r6,1332(sp)
 81269ac:	00801984 	movi	r2,102
 81269b0:	2d25883a 	add	r18,r5,r20
 81269b4:	30808626 	beq	r6,r2,8126bd0 <___vfprintf_internal_r+0x1cbc>
 81269b8:	00801184 	movi	r2,70
 81269bc:	30808426 	beq	r6,r2,8126bd0 <___vfprintf_internal_r+0x1cbc>
 81269c0:	000d883a 	mov	r6,zero
 81269c4:	000f883a 	mov	r7,zero
 81269c8:	880b883a 	mov	r5,r17
 81269cc:	8009883a 	mov	r4,r16
 81269d0:	8123e4c0 	call	8123e4c <__eqdf2>
 81269d4:	1000751e 	bne	r2,zero,8126bac <___vfprintf_internal_r+0x1c98>
 81269d8:	9005883a 	mov	r2,r18
 81269dc:	dc800715 	stw	r18,28(sp)
 81269e0:	d9014117 	ldw	r4,1284(sp)
 81269e4:	d9414d17 	ldw	r5,1332(sp)
 81269e8:	00c019c4 	movi	r3,103
 81269ec:	1125c83a 	sub	r18,r2,r4
 81269f0:	28c06826 	beq	r5,r3,8126b94 <___vfprintf_internal_r+0x1c80>
 81269f4:	008011c4 	movi	r2,71
 81269f8:	28806626 	beq	r5,r2,8126b94 <___vfprintf_internal_r+0x1c80>
 81269fc:	d9000517 	ldw	r4,20(sp)
 8126a00:	d8c14d17 	ldw	r3,1332(sp)
 8126a04:	00801944 	movi	r2,101
 8126a08:	10c05516 	blt	r2,r3,8126b60 <___vfprintf_internal_r+0x1c4c>
 8126a0c:	213fffc4 	addi	r4,r4,-1
 8126a10:	d9000515 	stw	r4,20(sp)
 8126a14:	d8c00805 	stb	r3,32(sp)
 8126a18:	2021883a 	mov	r16,r4
 8126a1c:	2000c116 	blt	r4,zero,8126d24 <___vfprintf_internal_r+0x1e10>
 8126a20:	00800ac4 	movi	r2,43
 8126a24:	d8800845 	stb	r2,33(sp)
 8126a28:	00800244 	movi	r2,9
 8126a2c:	1400af0e 	bge	r2,r16,8126cec <___vfprintf_internal_r+0x1dd8>
 8126a30:	1027883a 	mov	r19,r2
 8126a34:	dc400b84 	addi	r17,sp,46
 8126a38:	8009883a 	mov	r4,r16
 8126a3c:	01400284 	movi	r5,10
 8126a40:	81243740 	call	8124374 <__modsi3>
 8126a44:	10800c04 	addi	r2,r2,48
 8126a48:	8c7fffc4 	addi	r17,r17,-1
 8126a4c:	8009883a 	mov	r4,r16
 8126a50:	01400284 	movi	r5,10
 8126a54:	88800005 	stb	r2,0(r17)
 8126a58:	81243140 	call	8124314 <__divsi3>
 8126a5c:	1021883a 	mov	r16,r2
 8126a60:	98bff516 	blt	r19,r2,8126a38 <___vfprintf_internal_r+0x1b24>
 8126a64:	10c00c04 	addi	r3,r2,48
 8126a68:	d88009c4 	addi	r2,sp,39
 8126a6c:	108001c4 	addi	r2,r2,7
 8126a70:	897fffc4 	addi	r5,r17,-1
 8126a74:	88ffffc5 	stb	r3,-1(r17)
 8126a78:	2880a72e 	bgeu	r5,r2,8126d18 <___vfprintf_internal_r+0x1e04>
 8126a7c:	1009883a 	mov	r4,r2
 8126a80:	d9800804 	addi	r6,sp,32
 8126a84:	d8c00884 	addi	r3,sp,34
 8126a88:	28800003 	ldbu	r2,0(r5)
 8126a8c:	29400044 	addi	r5,r5,1
 8126a90:	18800005 	stb	r2,0(r3)
 8126a94:	18c00044 	addi	r3,r3,1
 8126a98:	293ffb36 	bltu	r5,r4,8126a88 <___vfprintf_internal_r+0x1b74>
 8126a9c:	1987c83a 	sub	r3,r3,r6
 8126aa0:	00800044 	movi	r2,1
 8126aa4:	d8c14815 	stw	r3,1312(sp)
 8126aa8:	90cf883a 	add	r7,r18,r3
 8126aac:	1480960e 	bge	r2,r18,8126d08 <___vfprintf_internal_r+0x1df4>
 8126ab0:	39c00044 	addi	r7,r7,1
 8126ab4:	d9c14515 	stw	r7,1300(sp)
 8126ab8:	38003416 	blt	r7,zero,8126b8c <___vfprintf_internal_r+0x1c78>
 8126abc:	e0803fcc 	andi	r2,fp,255
 8126ac0:	1080201c 	xori	r2,r2,128
 8126ac4:	10bfe004 	addi	r2,r2,-128
 8126ac8:	10004e26 	beq	r2,zero,8126c04 <___vfprintf_internal_r+0x1cf0>
 8126acc:	00800b44 	movi	r2,45
 8126ad0:	dc814715 	stw	r18,1308(sp)
 8126ad4:	d8014615 	stw	zero,1304(sp)
 8126ad8:	d8800405 	stb	r2,16(sp)
 8126adc:	003bb106 	br	81259a4 <___vfprintf_internal_r+0xa90>
 8126ae0:	00800b44 	movi	r2,45
 8126ae4:	d8800405 	stb	r2,16(sp)
 8126ae8:	003d3306 	br	8125fb8 <___vfprintf_internal_r+0x10a4>
 8126aec:	d9014f17 	ldw	r4,1340(sp)
 8126af0:	b00b883a 	mov	r5,r22
 8126af4:	d9800c04 	addi	r6,sp,48
 8126af8:	8124ebc0 	call	8124ebc <__sprint_r>
 8126afc:	103abd1e 	bne	r2,zero,81255f4 <___vfprintf_internal_r+0x6e0>
 8126b00:	003abb06 	br	81255f0 <___vfprintf_internal_r+0x6dc>
 8126b04:	38800017 	ldw	r2,0(r7)
 8126b08:	39c00104 	addi	r7,r7,4
 8126b0c:	d9c14015 	stw	r7,1280(sp)
 8126b10:	d9414b17 	ldw	r5,1324(sp)
 8126b14:	d9c14017 	ldw	r7,1280(sp)
 8126b18:	11400015 	stw	r5,0(r2)
 8126b1c:	00395906 	br	8125084 <___vfprintf_internal_r+0x170>
 8126b20:	980f883a 	mov	r7,r19
 8126b24:	dcc14515 	stw	r19,1300(sp)
 8126b28:	d8014615 	stw	zero,1304(sp)
 8126b2c:	003b9b06 	br	812599c <___vfprintf_internal_r+0xa88>
 8126b30:	0027883a 	mov	r19,zero
 8126b34:	00397806 	br	8125118 <___vfprintf_internal_r+0x204>
 8126b38:	00c204f4 	movhi	r3,2067
 8126b3c:	18c6ad04 	addi	r3,r3,6836
 8126b40:	100f883a 	mov	r7,r2
 8126b44:	d8814515 	stw	r2,1300(sp)
 8126b48:	d8c14115 	stw	r3,1284(sp)
 8126b4c:	0039e006 	br	81252d0 <___vfprintf_internal_r+0x3bc>
 8126b50:	008204f4 	movhi	r2,2067
 8126b54:	1086ac04 	addi	r2,r2,6832
 8126b58:	d8814115 	stw	r2,1284(sp)
 8126b5c:	003d1c06 	br	8125fd0 <___vfprintf_internal_r+0x10bc>
 8126b60:	d9414d17 	ldw	r5,1332(sp)
 8126b64:	00801984 	movi	r2,102
 8126b68:	28804926 	beq	r5,r2,8126c90 <___vfprintf_internal_r+0x1d7c>
 8126b6c:	200f883a 	mov	r7,r4
 8126b70:	24805716 	blt	r4,r18,8126cd0 <___vfprintf_internal_r+0x1dbc>
 8126b74:	d9414c17 	ldw	r5,1328(sp)
 8126b78:	2880004c 	andi	r2,r5,1
 8126b7c:	10000126 	beq	r2,zero,8126b84 <___vfprintf_internal_r+0x1c70>
 8126b80:	21c00044 	addi	r7,r4,1
 8126b84:	d9c14515 	stw	r7,1300(sp)
 8126b88:	383fcc0e 	bge	r7,zero,8126abc <___vfprintf_internal_r+0x1ba8>
 8126b8c:	d8014515 	stw	zero,1300(sp)
 8126b90:	003fca06 	br	8126abc <___vfprintf_internal_r+0x1ba8>
 8126b94:	d9000517 	ldw	r4,20(sp)
 8126b98:	00bfff04 	movi	r2,-4
 8126b9c:	1100480e 	bge	r2,r4,8126cc0 <___vfprintf_internal_r+0x1dac>
 8126ba0:	99004716 	blt	r19,r4,8126cc0 <___vfprintf_internal_r+0x1dac>
 8126ba4:	d8c14d15 	stw	r3,1332(sp)
 8126ba8:	003ff006 	br	8126b6c <___vfprintf_internal_r+0x1c58>
 8126bac:	d8800717 	ldw	r2,28(sp)
 8126bb0:	14bf8b2e 	bgeu	r2,r18,81269e0 <___vfprintf_internal_r+0x1acc>
 8126bb4:	9007883a 	mov	r3,r18
 8126bb8:	01000c04 	movi	r4,48
 8126bbc:	11000005 	stb	r4,0(r2)
 8126bc0:	10800044 	addi	r2,r2,1
 8126bc4:	d8800715 	stw	r2,28(sp)
 8126bc8:	18bffc1e 	bne	r3,r2,8126bbc <___vfprintf_internal_r+0x1ca8>
 8126bcc:	003f8406 	br	81269e0 <___vfprintf_internal_r+0x1acc>
 8126bd0:	d8814117 	ldw	r2,1284(sp)
 8126bd4:	10c00007 	ldb	r3,0(r2)
 8126bd8:	00800c04 	movi	r2,48
 8126bdc:	18805b26 	beq	r3,r2,8126d4c <___vfprintf_internal_r+0x1e38>
 8126be0:	d9000517 	ldw	r4,20(sp)
 8126be4:	9125883a 	add	r18,r18,r4
 8126be8:	003f7506 	br	81269c0 <___vfprintf_internal_r+0x1aac>
 8126bec:	d9014c17 	ldw	r4,1328(sp)
 8126bf0:	2080004c 	andi	r2,r4,1
 8126bf4:	1005003a 	cmpeq	r2,r2,zero
 8126bf8:	103f6a26 	beq	r2,zero,81269a4 <___vfprintf_internal_r+0x1a90>
 8126bfc:	d8800717 	ldw	r2,28(sp)
 8126c00:	003f7706 	br	81269e0 <___vfprintf_internal_r+0x1acc>
 8126c04:	d9c14515 	stw	r7,1300(sp)
 8126c08:	38004d16 	blt	r7,zero,8126d40 <___vfprintf_internal_r+0x1e2c>
 8126c0c:	dc814715 	stw	r18,1308(sp)
 8126c10:	d8014615 	stw	zero,1304(sp)
 8126c14:	003b6106 	br	812599c <___vfprintf_internal_r+0xa88>
 8126c18:	d9014f17 	ldw	r4,1340(sp)
 8126c1c:	d8800504 	addi	r2,sp,20
 8126c20:	d8800115 	stw	r2,4(sp)
 8126c24:	d8c00604 	addi	r3,sp,24
 8126c28:	d8800704 	addi	r2,sp,28
 8126c2c:	800b883a 	mov	r5,r16
 8126c30:	880d883a 	mov	r6,r17
 8126c34:	01c000c4 	movi	r7,3
 8126c38:	d8c00215 	stw	r3,8(sp)
 8126c3c:	d8800315 	stw	r2,12(sp)
 8126c40:	dcc00015 	stw	r19,0(sp)
 8126c44:	9829883a 	mov	r20,r19
 8126c48:	81271380 	call	8127138 <_dtoa_r>
 8126c4c:	d8814115 	stw	r2,1284(sp)
 8126c50:	003f5106 	br	8126998 <___vfprintf_internal_r+0x1a84>
 8126c54:	d8c14217 	ldw	r3,1288(sp)
 8126c58:	d9014317 	ldw	r4,1292(sp)
 8126c5c:	07000b44 	movi	fp,45
 8126c60:	1821883a 	mov	r16,r3
 8126c64:	2460003c 	xorhi	r17,r4,32768
 8126c68:	003f3106 	br	8126930 <___vfprintf_internal_r+0x1a1c>
 8126c6c:	9d000044 	addi	r20,r19,1
 8126c70:	003f3906 	br	8126958 <___vfprintf_internal_r+0x1a44>
 8126c74:	983f251e 	bne	r19,zero,812690c <___vfprintf_internal_r+0x19f8>
 8126c78:	04c00044 	movi	r19,1
 8126c7c:	003f2306 	br	812690c <___vfprintf_internal_r+0x19f8>
 8126c80:	04c00184 	movi	r19,6
 8126c84:	003f2106 	br	812690c <___vfprintf_internal_r+0x19f8>
 8126c88:	d8014515 	stw	zero,1300(sp)
 8126c8c:	003eee06 	br	8126848 <___vfprintf_internal_r+0x1934>
 8126c90:	200f883a 	mov	r7,r4
 8126c94:	0100370e 	bge	zero,r4,8126d74 <___vfprintf_internal_r+0x1e60>
 8126c98:	9800031e 	bne	r19,zero,8126ca8 <___vfprintf_internal_r+0x1d94>
 8126c9c:	d9814c17 	ldw	r6,1328(sp)
 8126ca0:	3080004c 	andi	r2,r6,1
 8126ca4:	103fb726 	beq	r2,zero,8126b84 <___vfprintf_internal_r+0x1c70>
 8126ca8:	20800044 	addi	r2,r4,1
 8126cac:	98a7883a 	add	r19,r19,r2
 8126cb0:	dcc14515 	stw	r19,1300(sp)
 8126cb4:	980f883a 	mov	r7,r19
 8126cb8:	983f800e 	bge	r19,zero,8126abc <___vfprintf_internal_r+0x1ba8>
 8126cbc:	003fb306 	br	8126b8c <___vfprintf_internal_r+0x1c78>
 8126cc0:	d9814d17 	ldw	r6,1332(sp)
 8126cc4:	31bfff84 	addi	r6,r6,-2
 8126cc8:	d9814d15 	stw	r6,1332(sp)
 8126ccc:	003f4c06 	br	8126a00 <___vfprintf_internal_r+0x1aec>
 8126cd0:	0100180e 	bge	zero,r4,8126d34 <___vfprintf_internal_r+0x1e20>
 8126cd4:	00800044 	movi	r2,1
 8126cd8:	1485883a 	add	r2,r2,r18
 8126cdc:	d8814515 	stw	r2,1300(sp)
 8126ce0:	100f883a 	mov	r7,r2
 8126ce4:	103f750e 	bge	r2,zero,8126abc <___vfprintf_internal_r+0x1ba8>
 8126ce8:	003fa806 	br	8126b8c <___vfprintf_internal_r+0x1c78>
 8126cec:	80c00c04 	addi	r3,r16,48
 8126cf0:	00800c04 	movi	r2,48
 8126cf4:	d8c008c5 	stb	r3,35(sp)
 8126cf8:	d9800804 	addi	r6,sp,32
 8126cfc:	d8c00904 	addi	r3,sp,36
 8126d00:	d8800885 	stb	r2,34(sp)
 8126d04:	003f6506 	br	8126a9c <___vfprintf_internal_r+0x1b88>
 8126d08:	d9014c17 	ldw	r4,1328(sp)
 8126d0c:	2084703a 	and	r2,r4,r2
 8126d10:	103f9c26 	beq	r2,zero,8126b84 <___vfprintf_internal_r+0x1c70>
 8126d14:	003f6606 	br	8126ab0 <___vfprintf_internal_r+0x1b9c>
 8126d18:	d9800804 	addi	r6,sp,32
 8126d1c:	d8c00884 	addi	r3,sp,34
 8126d20:	003f5e06 	br	8126a9c <___vfprintf_internal_r+0x1b88>
 8126d24:	00800b44 	movi	r2,45
 8126d28:	0121c83a 	sub	r16,zero,r4
 8126d2c:	d8800845 	stb	r2,33(sp)
 8126d30:	003f3d06 	br	8126a28 <___vfprintf_internal_r+0x1b14>
 8126d34:	00800084 	movi	r2,2
 8126d38:	1105c83a 	sub	r2,r2,r4
 8126d3c:	003fe606 	br	8126cd8 <___vfprintf_internal_r+0x1dc4>
 8126d40:	d8014515 	stw	zero,1300(sp)
 8126d44:	dc814715 	stw	r18,1308(sp)
 8126d48:	003fb106 	br	8126c10 <___vfprintf_internal_r+0x1cfc>
 8126d4c:	000d883a 	mov	r6,zero
 8126d50:	000f883a 	mov	r7,zero
 8126d54:	8009883a 	mov	r4,r16
 8126d58:	880b883a 	mov	r5,r17
 8126d5c:	8123ed40 	call	8123ed4 <__nedf2>
 8126d60:	103f9f26 	beq	r2,zero,8126be0 <___vfprintf_internal_r+0x1ccc>
 8126d64:	00800044 	movi	r2,1
 8126d68:	1509c83a 	sub	r4,r2,r20
 8126d6c:	d9000515 	stw	r4,20(sp)
 8126d70:	003f9b06 	br	8126be0 <___vfprintf_internal_r+0x1ccc>
 8126d74:	98000d1e 	bne	r19,zero,8126dac <___vfprintf_internal_r+0x1e98>
 8126d78:	d8c14c17 	ldw	r3,1328(sp)
 8126d7c:	1880004c 	andi	r2,r3,1
 8126d80:	10000a1e 	bne	r2,zero,8126dac <___vfprintf_internal_r+0x1e98>
 8126d84:	01000044 	movi	r4,1
 8126d88:	200f883a 	mov	r7,r4
 8126d8c:	d9014515 	stw	r4,1300(sp)
 8126d90:	003f4a06 	br	8126abc <___vfprintf_internal_r+0x1ba8>
 8126d94:	3cc00017 	ldw	r19,0(r7)
 8126d98:	39c00104 	addi	r7,r7,4
 8126d9c:	983d0e0e 	bge	r19,zero,81261d8 <___vfprintf_internal_r+0x12c4>
 8126da0:	b8c00007 	ldb	r3,0(r23)
 8126da4:	04ffffc4 	movi	r19,-1
 8126da8:	0038d906 	br	8125110 <___vfprintf_internal_r+0x1fc>
 8126dac:	9cc00084 	addi	r19,r19,2
 8126db0:	dcc14515 	stw	r19,1300(sp)
 8126db4:	980f883a 	mov	r7,r19
 8126db8:	983f400e 	bge	r19,zero,8126abc <___vfprintf_internal_r+0x1ba8>
 8126dbc:	003f7306 	br	8126b8c <___vfprintf_internal_r+0x1c78>

08126dc0 <__vfprintf_internal>:
 8126dc0:	008204f4 	movhi	r2,2067
 8126dc4:	108e5204 	addi	r2,r2,14664
 8126dc8:	2013883a 	mov	r9,r4
 8126dcc:	11000017 	ldw	r4,0(r2)
 8126dd0:	2805883a 	mov	r2,r5
 8126dd4:	300f883a 	mov	r7,r6
 8126dd8:	480b883a 	mov	r5,r9
 8126ddc:	100d883a 	mov	r6,r2
 8126de0:	8124f141 	jmpi	8124f14 <___vfprintf_internal_r>

08126de4 <__swsetup_r>:
 8126de4:	008204f4 	movhi	r2,2067
 8126de8:	108e5204 	addi	r2,r2,14664
 8126dec:	10c00017 	ldw	r3,0(r2)
 8126df0:	defffd04 	addi	sp,sp,-12
 8126df4:	dc400115 	stw	r17,4(sp)
 8126df8:	dc000015 	stw	r16,0(sp)
 8126dfc:	dfc00215 	stw	ra,8(sp)
 8126e00:	2023883a 	mov	r17,r4
 8126e04:	2821883a 	mov	r16,r5
 8126e08:	18000226 	beq	r3,zero,8126e14 <__swsetup_r+0x30>
 8126e0c:	18800e17 	ldw	r2,56(r3)
 8126e10:	10001f26 	beq	r2,zero,8126e90 <__swsetup_r+0xac>
 8126e14:	8100030b 	ldhu	r4,12(r16)
 8126e18:	2080020c 	andi	r2,r4,8
 8126e1c:	10002826 	beq	r2,zero,8126ec0 <__swsetup_r+0xdc>
 8126e20:	81400417 	ldw	r5,16(r16)
 8126e24:	28001d26 	beq	r5,zero,8126e9c <__swsetup_r+0xb8>
 8126e28:	2080004c 	andi	r2,r4,1
 8126e2c:	1005003a 	cmpeq	r2,r2,zero
 8126e30:	10000b26 	beq	r2,zero,8126e60 <__swsetup_r+0x7c>
 8126e34:	2080008c 	andi	r2,r4,2
 8126e38:	10001226 	beq	r2,zero,8126e84 <__swsetup_r+0xa0>
 8126e3c:	0005883a 	mov	r2,zero
 8126e40:	80800215 	stw	r2,8(r16)
 8126e44:	28000b26 	beq	r5,zero,8126e74 <__swsetup_r+0x90>
 8126e48:	0005883a 	mov	r2,zero
 8126e4c:	dfc00217 	ldw	ra,8(sp)
 8126e50:	dc400117 	ldw	r17,4(sp)
 8126e54:	dc000017 	ldw	r16,0(sp)
 8126e58:	dec00304 	addi	sp,sp,12
 8126e5c:	f800283a 	ret
 8126e60:	80800517 	ldw	r2,20(r16)
 8126e64:	80000215 	stw	zero,8(r16)
 8126e68:	0085c83a 	sub	r2,zero,r2
 8126e6c:	80800615 	stw	r2,24(r16)
 8126e70:	283ff51e 	bne	r5,zero,8126e48 <__swsetup_r+0x64>
 8126e74:	2080200c 	andi	r2,r4,128
 8126e78:	103ff326 	beq	r2,zero,8126e48 <__swsetup_r+0x64>
 8126e7c:	00bfffc4 	movi	r2,-1
 8126e80:	003ff206 	br	8126e4c <__swsetup_r+0x68>
 8126e84:	80800517 	ldw	r2,20(r16)
 8126e88:	80800215 	stw	r2,8(r16)
 8126e8c:	003fed06 	br	8126e44 <__swsetup_r+0x60>
 8126e90:	1809883a 	mov	r4,r3
 8126e94:	81289840 	call	8128984 <__sinit>
 8126e98:	003fde06 	br	8126e14 <__swsetup_r+0x30>
 8126e9c:	20c0a00c 	andi	r3,r4,640
 8126ea0:	00808004 	movi	r2,512
 8126ea4:	18bfe026 	beq	r3,r2,8126e28 <__swsetup_r+0x44>
 8126ea8:	8809883a 	mov	r4,r17
 8126eac:	800b883a 	mov	r5,r16
 8126eb0:	81296fc0 	call	81296fc <__smakebuf_r>
 8126eb4:	8100030b 	ldhu	r4,12(r16)
 8126eb8:	81400417 	ldw	r5,16(r16)
 8126ebc:	003fda06 	br	8126e28 <__swsetup_r+0x44>
 8126ec0:	2080040c 	andi	r2,r4,16
 8126ec4:	103fed26 	beq	r2,zero,8126e7c <__swsetup_r+0x98>
 8126ec8:	2080010c 	andi	r2,r4,4
 8126ecc:	10001226 	beq	r2,zero,8126f18 <__swsetup_r+0x134>
 8126ed0:	81400c17 	ldw	r5,48(r16)
 8126ed4:	28000526 	beq	r5,zero,8126eec <__swsetup_r+0x108>
 8126ed8:	80801004 	addi	r2,r16,64
 8126edc:	28800226 	beq	r5,r2,8126ee8 <__swsetup_r+0x104>
 8126ee0:	8809883a 	mov	r4,r17
 8126ee4:	8128d080 	call	8128d08 <_free_r>
 8126ee8:	80000c15 	stw	zero,48(r16)
 8126eec:	8080030b 	ldhu	r2,12(r16)
 8126ef0:	81400417 	ldw	r5,16(r16)
 8126ef4:	80000115 	stw	zero,4(r16)
 8126ef8:	10bff6cc 	andi	r2,r2,65499
 8126efc:	8080030d 	sth	r2,12(r16)
 8126f00:	81400015 	stw	r5,0(r16)
 8126f04:	8080030b 	ldhu	r2,12(r16)
 8126f08:	10800214 	ori	r2,r2,8
 8126f0c:	113fffcc 	andi	r4,r2,65535
 8126f10:	8080030d 	sth	r2,12(r16)
 8126f14:	003fc306 	br	8126e24 <__swsetup_r+0x40>
 8126f18:	81400417 	ldw	r5,16(r16)
 8126f1c:	003ff906 	br	8126f04 <__swsetup_r+0x120>

08126f20 <quorem>:
 8126f20:	28c00417 	ldw	r3,16(r5)
 8126f24:	20800417 	ldw	r2,16(r4)
 8126f28:	defff604 	addi	sp,sp,-40
 8126f2c:	ddc00715 	stw	r23,28(sp)
 8126f30:	dd400515 	stw	r21,20(sp)
 8126f34:	dfc00915 	stw	ra,36(sp)
 8126f38:	df000815 	stw	fp,32(sp)
 8126f3c:	dd800615 	stw	r22,24(sp)
 8126f40:	dd000415 	stw	r20,16(sp)
 8126f44:	dcc00315 	stw	r19,12(sp)
 8126f48:	dc800215 	stw	r18,8(sp)
 8126f4c:	dc400115 	stw	r17,4(sp)
 8126f50:	dc000015 	stw	r16,0(sp)
 8126f54:	202f883a 	mov	r23,r4
 8126f58:	282b883a 	mov	r21,r5
 8126f5c:	10c07416 	blt	r2,r3,8127130 <quorem+0x210>
 8126f60:	1c7fffc4 	addi	r17,r3,-1
 8126f64:	8c45883a 	add	r2,r17,r17
 8126f68:	1085883a 	add	r2,r2,r2
 8126f6c:	2c000504 	addi	r16,r5,20
 8126f70:	24c00504 	addi	r19,r4,20
 8126f74:	14ed883a 	add	r22,r2,r19
 8126f78:	80a5883a 	add	r18,r16,r2
 8126f7c:	b7000017 	ldw	fp,0(r22)
 8126f80:	91400017 	ldw	r5,0(r18)
 8126f84:	e009883a 	mov	r4,fp
 8126f88:	29400044 	addi	r5,r5,1
 8126f8c:	81243d40 	call	81243d4 <__udivsi3>
 8126f90:	1029883a 	mov	r20,r2
 8126f94:	10003c1e 	bne	r2,zero,8127088 <quorem+0x168>
 8126f98:	a80b883a 	mov	r5,r21
 8126f9c:	b809883a 	mov	r4,r23
 8126fa0:	812a4280 	call	812a428 <__mcmp>
 8126fa4:	10002b16 	blt	r2,zero,8127054 <quorem+0x134>
 8126fa8:	a5000044 	addi	r20,r20,1
 8126fac:	980f883a 	mov	r7,r19
 8126fb0:	0011883a 	mov	r8,zero
 8126fb4:	0009883a 	mov	r4,zero
 8126fb8:	81400017 	ldw	r5,0(r16)
 8126fbc:	38c00017 	ldw	r3,0(r7)
 8126fc0:	84000104 	addi	r16,r16,4
 8126fc4:	28bfffcc 	andi	r2,r5,65535
 8126fc8:	2085883a 	add	r2,r4,r2
 8126fcc:	11bfffcc 	andi	r6,r2,65535
 8126fd0:	193fffcc 	andi	r4,r3,65535
 8126fd4:	1004d43a 	srli	r2,r2,16
 8126fd8:	280ad43a 	srli	r5,r5,16
 8126fdc:	2189c83a 	sub	r4,r4,r6
 8126fe0:	2209883a 	add	r4,r4,r8
 8126fe4:	1806d43a 	srli	r3,r3,16
 8126fe8:	288b883a 	add	r5,r5,r2
 8126fec:	200dd43a 	srai	r6,r4,16
 8126ff0:	28bfffcc 	andi	r2,r5,65535
 8126ff4:	1887c83a 	sub	r3,r3,r2
 8126ff8:	1987883a 	add	r3,r3,r6
 8126ffc:	3900000d 	sth	r4,0(r7)
 8127000:	38c0008d 	sth	r3,2(r7)
 8127004:	2808d43a 	srli	r4,r5,16
 8127008:	39c00104 	addi	r7,r7,4
 812700c:	1811d43a 	srai	r8,r3,16
 8127010:	943fe92e 	bgeu	r18,r16,8126fb8 <quorem+0x98>
 8127014:	8c45883a 	add	r2,r17,r17
 8127018:	1085883a 	add	r2,r2,r2
 812701c:	9885883a 	add	r2,r19,r2
 8127020:	10c00017 	ldw	r3,0(r2)
 8127024:	18000b1e 	bne	r3,zero,8127054 <quorem+0x134>
 8127028:	113fff04 	addi	r4,r2,-4
 812702c:	9900082e 	bgeu	r19,r4,8127050 <quorem+0x130>
 8127030:	10bfff17 	ldw	r2,-4(r2)
 8127034:	10000326 	beq	r2,zero,8127044 <quorem+0x124>
 8127038:	00000506 	br	8127050 <quorem+0x130>
 812703c:	20800017 	ldw	r2,0(r4)
 8127040:	1000031e 	bne	r2,zero,8127050 <quorem+0x130>
 8127044:	213fff04 	addi	r4,r4,-4
 8127048:	8c7fffc4 	addi	r17,r17,-1
 812704c:	993ffb36 	bltu	r19,r4,812703c <quorem+0x11c>
 8127050:	bc400415 	stw	r17,16(r23)
 8127054:	a005883a 	mov	r2,r20
 8127058:	dfc00917 	ldw	ra,36(sp)
 812705c:	df000817 	ldw	fp,32(sp)
 8127060:	ddc00717 	ldw	r23,28(sp)
 8127064:	dd800617 	ldw	r22,24(sp)
 8127068:	dd400517 	ldw	r21,20(sp)
 812706c:	dd000417 	ldw	r20,16(sp)
 8127070:	dcc00317 	ldw	r19,12(sp)
 8127074:	dc800217 	ldw	r18,8(sp)
 8127078:	dc400117 	ldw	r17,4(sp)
 812707c:	dc000017 	ldw	r16,0(sp)
 8127080:	dec00a04 	addi	sp,sp,40
 8127084:	f800283a 	ret
 8127088:	980f883a 	mov	r7,r19
 812708c:	8011883a 	mov	r8,r16
 8127090:	0013883a 	mov	r9,zero
 8127094:	000d883a 	mov	r6,zero
 8127098:	40c00017 	ldw	r3,0(r8)
 812709c:	39000017 	ldw	r4,0(r7)
 81270a0:	42000104 	addi	r8,r8,4
 81270a4:	18bfffcc 	andi	r2,r3,65535
 81270a8:	a085383a 	mul	r2,r20,r2
 81270ac:	1806d43a 	srli	r3,r3,16
 81270b0:	217fffcc 	andi	r5,r4,65535
 81270b4:	3085883a 	add	r2,r6,r2
 81270b8:	11bfffcc 	andi	r6,r2,65535
 81270bc:	a0c7383a 	mul	r3,r20,r3
 81270c0:	1004d43a 	srli	r2,r2,16
 81270c4:	298bc83a 	sub	r5,r5,r6
 81270c8:	2a4b883a 	add	r5,r5,r9
 81270cc:	2008d43a 	srli	r4,r4,16
 81270d0:	1887883a 	add	r3,r3,r2
 81270d4:	280dd43a 	srai	r6,r5,16
 81270d8:	18bfffcc 	andi	r2,r3,65535
 81270dc:	2089c83a 	sub	r4,r4,r2
 81270e0:	2189883a 	add	r4,r4,r6
 81270e4:	3900008d 	sth	r4,2(r7)
 81270e8:	3940000d 	sth	r5,0(r7)
 81270ec:	180cd43a 	srli	r6,r3,16
 81270f0:	39c00104 	addi	r7,r7,4
 81270f4:	2013d43a 	srai	r9,r4,16
 81270f8:	923fe72e 	bgeu	r18,r8,8127098 <quorem+0x178>
 81270fc:	e03fa61e 	bne	fp,zero,8126f98 <quorem+0x78>
 8127100:	b0ffff04 	addi	r3,r22,-4
 8127104:	98c0082e 	bgeu	r19,r3,8127128 <quorem+0x208>
 8127108:	b0bfff17 	ldw	r2,-4(r22)
 812710c:	10000326 	beq	r2,zero,812711c <quorem+0x1fc>
 8127110:	00000506 	br	8127128 <quorem+0x208>
 8127114:	18800017 	ldw	r2,0(r3)
 8127118:	1000031e 	bne	r2,zero,8127128 <quorem+0x208>
 812711c:	18ffff04 	addi	r3,r3,-4
 8127120:	8c7fffc4 	addi	r17,r17,-1
 8127124:	98fffb36 	bltu	r19,r3,8127114 <quorem+0x1f4>
 8127128:	bc400415 	stw	r17,16(r23)
 812712c:	003f9a06 	br	8126f98 <quorem+0x78>
 8127130:	0005883a 	mov	r2,zero
 8127134:	003fc806 	br	8127058 <quorem+0x138>

08127138 <_dtoa_r>:
 8127138:	22001017 	ldw	r8,64(r4)
 812713c:	deffda04 	addi	sp,sp,-152
 8127140:	dd402115 	stw	r21,132(sp)
 8127144:	dd002015 	stw	r20,128(sp)
 8127148:	dc801e15 	stw	r18,120(sp)
 812714c:	dc401d15 	stw	r17,116(sp)
 8127150:	dfc02515 	stw	ra,148(sp)
 8127154:	df002415 	stw	fp,144(sp)
 8127158:	ddc02315 	stw	r23,140(sp)
 812715c:	dd802215 	stw	r22,136(sp)
 8127160:	dcc01f15 	stw	r19,124(sp)
 8127164:	dc001c15 	stw	r16,112(sp)
 8127168:	d9001615 	stw	r4,88(sp)
 812716c:	3023883a 	mov	r17,r6
 8127170:	2829883a 	mov	r20,r5
 8127174:	d9c01715 	stw	r7,92(sp)
 8127178:	dc802817 	ldw	r18,160(sp)
 812717c:	302b883a 	mov	r21,r6
 8127180:	40000a26 	beq	r8,zero,81271ac <_dtoa_r+0x74>
 8127184:	20801117 	ldw	r2,68(r4)
 8127188:	400b883a 	mov	r5,r8
 812718c:	40800115 	stw	r2,4(r8)
 8127190:	20c01117 	ldw	r3,68(r4)
 8127194:	00800044 	movi	r2,1
 8127198:	10c4983a 	sll	r2,r2,r3
 812719c:	40800215 	stw	r2,8(r8)
 81271a0:	812a2cc0 	call	812a2cc <_Bfree>
 81271a4:	d8c01617 	ldw	r3,88(sp)
 81271a8:	18001015 	stw	zero,64(r3)
 81271ac:	8800a316 	blt	r17,zero,812743c <_dtoa_r+0x304>
 81271b0:	90000015 	stw	zero,0(r18)
 81271b4:	a8dffc2c 	andhi	r3,r21,32752
 81271b8:	009ffc34 	movhi	r2,32752
 81271bc:	18809126 	beq	r3,r2,8127404 <_dtoa_r+0x2cc>
 81271c0:	000d883a 	mov	r6,zero
 81271c4:	000f883a 	mov	r7,zero
 81271c8:	a009883a 	mov	r4,r20
 81271cc:	a80b883a 	mov	r5,r21
 81271d0:	dd001215 	stw	r20,72(sp)
 81271d4:	dd401315 	stw	r21,76(sp)
 81271d8:	8123ed40 	call	8123ed4 <__nedf2>
 81271dc:	1000171e 	bne	r2,zero,812723c <_dtoa_r+0x104>
 81271e0:	d9802717 	ldw	r6,156(sp)
 81271e4:	00800044 	movi	r2,1
 81271e8:	30800015 	stw	r2,0(r6)
 81271ec:	d8802917 	ldw	r2,164(sp)
 81271f0:	10029b26 	beq	r2,zero,8127c60 <_dtoa_r+0xb28>
 81271f4:	d9002917 	ldw	r4,164(sp)
 81271f8:	008204f4 	movhi	r2,2067
 81271fc:	1086bb44 	addi	r2,r2,6893
 8127200:	10ffffc4 	addi	r3,r2,-1
 8127204:	20800015 	stw	r2,0(r4)
 8127208:	1805883a 	mov	r2,r3
 812720c:	dfc02517 	ldw	ra,148(sp)
 8127210:	df002417 	ldw	fp,144(sp)
 8127214:	ddc02317 	ldw	r23,140(sp)
 8127218:	dd802217 	ldw	r22,136(sp)
 812721c:	dd402117 	ldw	r21,132(sp)
 8127220:	dd002017 	ldw	r20,128(sp)
 8127224:	dcc01f17 	ldw	r19,124(sp)
 8127228:	dc801e17 	ldw	r18,120(sp)
 812722c:	dc401d17 	ldw	r17,116(sp)
 8127230:	dc001c17 	ldw	r16,112(sp)
 8127234:	dec02604 	addi	sp,sp,152
 8127238:	f800283a 	ret
 812723c:	d9001617 	ldw	r4,88(sp)
 8127240:	d9401217 	ldw	r5,72(sp)
 8127244:	d8800104 	addi	r2,sp,4
 8127248:	a80d883a 	mov	r6,r21
 812724c:	d9c00204 	addi	r7,sp,8
 8127250:	d8800015 	stw	r2,0(sp)
 8127254:	812a9080 	call	812a908 <__d2b>
 8127258:	d8800715 	stw	r2,28(sp)
 812725c:	a804d53a 	srli	r2,r21,20
 8127260:	1101ffcc 	andi	r4,r2,2047
 8127264:	20008626 	beq	r4,zero,8127480 <_dtoa_r+0x348>
 8127268:	d8c01217 	ldw	r3,72(sp)
 812726c:	00800434 	movhi	r2,16
 8127270:	10bfffc4 	addi	r2,r2,-1
 8127274:	ddc00117 	ldw	r23,4(sp)
 8127278:	a884703a 	and	r2,r21,r2
 812727c:	1811883a 	mov	r8,r3
 8127280:	124ffc34 	orhi	r9,r2,16368
 8127284:	25bf0044 	addi	r22,r4,-1023
 8127288:	d8000815 	stw	zero,32(sp)
 812728c:	0005883a 	mov	r2,zero
 8127290:	00cffe34 	movhi	r3,16376
 8127294:	480b883a 	mov	r5,r9
 8127298:	4009883a 	mov	r4,r8
 812729c:	180f883a 	mov	r7,r3
 81272a0:	100d883a 	mov	r6,r2
 81272a4:	812373c0 	call	812373c <__subdf3>
 81272a8:	0218dbf4 	movhi	r8,25455
 81272ac:	4210d844 	addi	r8,r8,17249
 81272b0:	024ff4f4 	movhi	r9,16339
 81272b4:	4a61e9c4 	addi	r9,r9,-30809
 81272b8:	480f883a 	mov	r7,r9
 81272bc:	400d883a 	mov	r6,r8
 81272c0:	180b883a 	mov	r5,r3
 81272c4:	1009883a 	mov	r4,r2
 81272c8:	81238300 	call	8123830 <__muldf3>
 81272cc:	0222d874 	movhi	r8,35681
 81272d0:	42322cc4 	addi	r8,r8,-14157
 81272d4:	024ff1f4 	movhi	r9,16327
 81272d8:	4a628a04 	addi	r9,r9,-30168
 81272dc:	480f883a 	mov	r7,r9
 81272e0:	400d883a 	mov	r6,r8
 81272e4:	180b883a 	mov	r5,r3
 81272e8:	1009883a 	mov	r4,r2
 81272ec:	81237bc0 	call	81237bc <__adddf3>
 81272f0:	b009883a 	mov	r4,r22
 81272f4:	1021883a 	mov	r16,r2
 81272f8:	1823883a 	mov	r17,r3
 81272fc:	81240f40 	call	81240f4 <__floatsidf>
 8127300:	021427f4 	movhi	r8,20639
 8127304:	421e7ec4 	addi	r8,r8,31227
 8127308:	024ff4f4 	movhi	r9,16339
 812730c:	4a5104c4 	addi	r9,r9,17427
 8127310:	480f883a 	mov	r7,r9
 8127314:	400d883a 	mov	r6,r8
 8127318:	180b883a 	mov	r5,r3
 812731c:	1009883a 	mov	r4,r2
 8127320:	81238300 	call	8123830 <__muldf3>
 8127324:	180f883a 	mov	r7,r3
 8127328:	880b883a 	mov	r5,r17
 812732c:	100d883a 	mov	r6,r2
 8127330:	8009883a 	mov	r4,r16
 8127334:	81237bc0 	call	81237bc <__adddf3>
 8127338:	1009883a 	mov	r4,r2
 812733c:	180b883a 	mov	r5,r3
 8127340:	1021883a 	mov	r16,r2
 8127344:	1823883a 	mov	r17,r3
 8127348:	812cc140 	call	812cc14 <__fixdfsi>
 812734c:	000d883a 	mov	r6,zero
 8127350:	000f883a 	mov	r7,zero
 8127354:	8009883a 	mov	r4,r16
 8127358:	880b883a 	mov	r5,r17
 812735c:	d8800d15 	stw	r2,52(sp)
 8127360:	8123fe40 	call	8123fe4 <__ltdf2>
 8127364:	10031716 	blt	r2,zero,8127fc4 <_dtoa_r+0xe8c>
 8127368:	d8c00d17 	ldw	r3,52(sp)
 812736c:	00800584 	movi	r2,22
 8127370:	10c1482e 	bgeu	r2,r3,8127894 <_dtoa_r+0x75c>
 8127374:	01000044 	movi	r4,1
 8127378:	d9000c15 	stw	r4,48(sp)
 812737c:	bd85c83a 	sub	r2,r23,r22
 8127380:	11bfffc4 	addi	r6,r2,-1
 8127384:	30030b16 	blt	r6,zero,8127fb4 <_dtoa_r+0xe7c>
 8127388:	d9800a15 	stw	r6,40(sp)
 812738c:	d8001115 	stw	zero,68(sp)
 8127390:	d8c00d17 	ldw	r3,52(sp)
 8127394:	1802ff16 	blt	r3,zero,8127f94 <_dtoa_r+0xe5c>
 8127398:	d9000a17 	ldw	r4,40(sp)
 812739c:	d8c00915 	stw	r3,36(sp)
 81273a0:	d8001015 	stw	zero,64(sp)
 81273a4:	20c9883a 	add	r4,r4,r3
 81273a8:	d9000a15 	stw	r4,40(sp)
 81273ac:	d9001717 	ldw	r4,92(sp)
 81273b0:	00800244 	movi	r2,9
 81273b4:	11004636 	bltu	r2,r4,81274d0 <_dtoa_r+0x398>
 81273b8:	00800144 	movi	r2,5
 81273bc:	11020416 	blt	r2,r4,8127bd0 <_dtoa_r+0xa98>
 81273c0:	04400044 	movi	r17,1
 81273c4:	d8c01717 	ldw	r3,92(sp)
 81273c8:	00800144 	movi	r2,5
 81273cc:	10c1ed36 	bltu	r2,r3,8127b84 <_dtoa_r+0xa4c>
 81273d0:	18c5883a 	add	r2,r3,r3
 81273d4:	1085883a 	add	r2,r2,r2
 81273d8:	00c204b4 	movhi	r3,2066
 81273dc:	18dcfb04 	addi	r3,r3,29676
 81273e0:	10c5883a 	add	r2,r2,r3
 81273e4:	11000017 	ldw	r4,0(r2)
 81273e8:	2000683a 	jmp	r4
 81273ec:	081274d8 	cmpnei	zero,at,18899
 81273f0:	081274d8 	cmpnei	zero,at,18899
 81273f4:	08127ed8 	cmpnei	zero,at,18939
 81273f8:	08127eb0 	cmpltui	zero,at,18938
 81273fc:	08127ef4 	orhi	zero,at,18939
 8127400:	08127f00 	call	8127f0 <__alt_mem_onchip_memory2_3+0x80b7f0>
 8127404:	d9002717 	ldw	r4,156(sp)
 8127408:	0089c3c4 	movi	r2,9999
 812740c:	20800015 	stw	r2,0(r4)
 8127410:	a0001026 	beq	r20,zero,8127454 <_dtoa_r+0x31c>
 8127414:	00c204f4 	movhi	r3,2067
 8127418:	18c6c704 	addi	r3,r3,6940
 812741c:	d9802917 	ldw	r6,164(sp)
 8127420:	303f7926 	beq	r6,zero,8127208 <_dtoa_r+0xd0>
 8127424:	188000c7 	ldb	r2,3(r3)
 8127428:	190000c4 	addi	r4,r3,3
 812742c:	1000101e 	bne	r2,zero,8127470 <_dtoa_r+0x338>
 8127430:	d8802917 	ldw	r2,164(sp)
 8127434:	11000015 	stw	r4,0(r2)
 8127438:	003f7306 	br	8127208 <_dtoa_r+0xd0>
 812743c:	00a00034 	movhi	r2,32768
 8127440:	10bfffc4 	addi	r2,r2,-1
 8127444:	00c00044 	movi	r3,1
 8127448:	88aa703a 	and	r21,r17,r2
 812744c:	90c00015 	stw	r3,0(r18)
 8127450:	003f5806 	br	81271b4 <_dtoa_r+0x7c>
 8127454:	00800434 	movhi	r2,16
 8127458:	10bfffc4 	addi	r2,r2,-1
 812745c:	a884703a 	and	r2,r21,r2
 8127460:	103fec1e 	bne	r2,zero,8127414 <_dtoa_r+0x2dc>
 8127464:	00c204f4 	movhi	r3,2067
 8127468:	18c6c404 	addi	r3,r3,6928
 812746c:	003feb06 	br	812741c <_dtoa_r+0x2e4>
 8127470:	d8802917 	ldw	r2,164(sp)
 8127474:	19000204 	addi	r4,r3,8
 8127478:	11000015 	stw	r4,0(r2)
 812747c:	003f6206 	br	8127208 <_dtoa_r+0xd0>
 8127480:	ddc00117 	ldw	r23,4(sp)
 8127484:	d8800217 	ldw	r2,8(sp)
 8127488:	01000804 	movi	r4,32
 812748c:	b8c10c84 	addi	r3,r23,1074
 8127490:	18a3883a 	add	r17,r3,r2
 8127494:	2441b80e 	bge	r4,r17,8127b78 <_dtoa_r+0xa40>
 8127498:	00c01004 	movi	r3,64
 812749c:	1c47c83a 	sub	r3,r3,r17
 81274a0:	88bff804 	addi	r2,r17,-32
 81274a4:	a8c6983a 	sll	r3,r21,r3
 81274a8:	a084d83a 	srl	r2,r20,r2
 81274ac:	1888b03a 	or	r4,r3,r2
 81274b0:	812ccec0 	call	812ccec <__floatunsidf>
 81274b4:	1011883a 	mov	r8,r2
 81274b8:	00bf8434 	movhi	r2,65040
 81274bc:	01000044 	movi	r4,1
 81274c0:	10d3883a 	add	r9,r2,r3
 81274c4:	8dbef344 	addi	r22,r17,-1075
 81274c8:	d9000815 	stw	r4,32(sp)
 81274cc:	003f6f06 	br	812728c <_dtoa_r+0x154>
 81274d0:	d8001715 	stw	zero,92(sp)
 81274d4:	04400044 	movi	r17,1
 81274d8:	00bfffc4 	movi	r2,-1
 81274dc:	00c00044 	movi	r3,1
 81274e0:	d8800e15 	stw	r2,56(sp)
 81274e4:	d8002615 	stw	zero,152(sp)
 81274e8:	d8800f15 	stw	r2,60(sp)
 81274ec:	d8c00b15 	stw	r3,44(sp)
 81274f0:	1021883a 	mov	r16,r2
 81274f4:	d8801617 	ldw	r2,88(sp)
 81274f8:	10001115 	stw	zero,68(r2)
 81274fc:	d8801617 	ldw	r2,88(sp)
 8127500:	11401117 	ldw	r5,68(r2)
 8127504:	1009883a 	mov	r4,r2
 8127508:	812a84c0 	call	812a84c <_Balloc>
 812750c:	d8c01617 	ldw	r3,88(sp)
 8127510:	d8800515 	stw	r2,20(sp)
 8127514:	18801015 	stw	r2,64(r3)
 8127518:	00800384 	movi	r2,14
 812751c:	14006836 	bltu	r2,r16,81276c0 <_dtoa_r+0x588>
 8127520:	8805003a 	cmpeq	r2,r17,zero
 8127524:	1000661e 	bne	r2,zero,81276c0 <_dtoa_r+0x588>
 8127528:	d9000d17 	ldw	r4,52(sp)
 812752c:	0102300e 	bge	zero,r4,8127df0 <_dtoa_r+0xcb8>
 8127530:	208003cc 	andi	r2,r4,15
 8127534:	100490fa 	slli	r2,r2,3
 8127538:	2025d13a 	srai	r18,r4,4
 812753c:	00c204f4 	movhi	r3,2067
 8127540:	18c6d804 	addi	r3,r3,7008
 8127544:	10c5883a 	add	r2,r2,r3
 8127548:	90c0040c 	andi	r3,r18,16
 812754c:	14000017 	ldw	r16,0(r2)
 8127550:	14400117 	ldw	r17,4(r2)
 8127554:	18036a1e 	bne	r3,zero,8128300 <_dtoa_r+0x11c8>
 8127558:	05800084 	movi	r22,2
 812755c:	90001026 	beq	r18,zero,81275a0 <_dtoa_r+0x468>
 8127560:	04c204f4 	movhi	r19,2067
 8127564:	9cc70a04 	addi	r19,r19,7208
 8127568:	9080004c 	andi	r2,r18,1
 812756c:	1005003a 	cmpeq	r2,r2,zero
 8127570:	1000081e 	bne	r2,zero,8127594 <_dtoa_r+0x45c>
 8127574:	99800017 	ldw	r6,0(r19)
 8127578:	99c00117 	ldw	r7,4(r19)
 812757c:	880b883a 	mov	r5,r17
 8127580:	8009883a 	mov	r4,r16
 8127584:	81238300 	call	8123830 <__muldf3>
 8127588:	1021883a 	mov	r16,r2
 812758c:	b5800044 	addi	r22,r22,1
 8127590:	1823883a 	mov	r17,r3
 8127594:	9025d07a 	srai	r18,r18,1
 8127598:	9cc00204 	addi	r19,r19,8
 812759c:	903ff21e 	bne	r18,zero,8127568 <_dtoa_r+0x430>
 81275a0:	a80b883a 	mov	r5,r21
 81275a4:	a009883a 	mov	r4,r20
 81275a8:	880f883a 	mov	r7,r17
 81275ac:	800d883a 	mov	r6,r16
 81275b0:	8123bf40 	call	8123bf4 <__divdf3>
 81275b4:	1029883a 	mov	r20,r2
 81275b8:	182b883a 	mov	r21,r3
 81275bc:	d8c00c17 	ldw	r3,48(sp)
 81275c0:	1805003a 	cmpeq	r2,r3,zero
 81275c4:	1000081e 	bne	r2,zero,81275e8 <_dtoa_r+0x4b0>
 81275c8:	0005883a 	mov	r2,zero
 81275cc:	00cffc34 	movhi	r3,16368
 81275d0:	180f883a 	mov	r7,r3
 81275d4:	a009883a 	mov	r4,r20
 81275d8:	a80b883a 	mov	r5,r21
 81275dc:	100d883a 	mov	r6,r2
 81275e0:	8123fe40 	call	8123fe4 <__ltdf2>
 81275e4:	1003fe16 	blt	r2,zero,81285e0 <_dtoa_r+0x14a8>
 81275e8:	b009883a 	mov	r4,r22
 81275ec:	81240f40 	call	81240f4 <__floatsidf>
 81275f0:	180b883a 	mov	r5,r3
 81275f4:	1009883a 	mov	r4,r2
 81275f8:	a00d883a 	mov	r6,r20
 81275fc:	a80f883a 	mov	r7,r21
 8127600:	81238300 	call	8123830 <__muldf3>
 8127604:	0011883a 	mov	r8,zero
 8127608:	02500734 	movhi	r9,16412
 812760c:	1009883a 	mov	r4,r2
 8127610:	180b883a 	mov	r5,r3
 8127614:	480f883a 	mov	r7,r9
 8127618:	400d883a 	mov	r6,r8
 812761c:	81237bc0 	call	81237bc <__adddf3>
 8127620:	d9000f17 	ldw	r4,60(sp)
 8127624:	102d883a 	mov	r22,r2
 8127628:	00bf3034 	movhi	r2,64704
 812762c:	18b9883a 	add	fp,r3,r2
 8127630:	e02f883a 	mov	r23,fp
 8127634:	20028f1e 	bne	r4,zero,8128074 <_dtoa_r+0xf3c>
 8127638:	0005883a 	mov	r2,zero
 812763c:	00d00534 	movhi	r3,16404
 8127640:	a009883a 	mov	r4,r20
 8127644:	a80b883a 	mov	r5,r21
 8127648:	180f883a 	mov	r7,r3
 812764c:	100d883a 	mov	r6,r2
 8127650:	812373c0 	call	812373c <__subdf3>
 8127654:	1009883a 	mov	r4,r2
 8127658:	e00f883a 	mov	r7,fp
 812765c:	180b883a 	mov	r5,r3
 8127660:	b00d883a 	mov	r6,r22
 8127664:	1025883a 	mov	r18,r2
 8127668:	1827883a 	mov	r19,r3
 812766c:	8123f5c0 	call	8123f5c <__gtdf2>
 8127670:	00834f16 	blt	zero,r2,81283b0 <_dtoa_r+0x1278>
 8127674:	e0e0003c 	xorhi	r3,fp,32768
 8127678:	9009883a 	mov	r4,r18
 812767c:	980b883a 	mov	r5,r19
 8127680:	180f883a 	mov	r7,r3
 8127684:	b00d883a 	mov	r6,r22
 8127688:	8123fe40 	call	8123fe4 <__ltdf2>
 812768c:	1000080e 	bge	r2,zero,81276b0 <_dtoa_r+0x578>
 8127690:	0027883a 	mov	r19,zero
 8127694:	0025883a 	mov	r18,zero
 8127698:	d8802617 	ldw	r2,152(sp)
 812769c:	df000517 	ldw	fp,20(sp)
 81276a0:	d8000615 	stw	zero,24(sp)
 81276a4:	0084303a 	nor	r2,zero,r2
 81276a8:	d8800d15 	stw	r2,52(sp)
 81276ac:	00019b06 	br	8127d1c <_dtoa_r+0xbe4>
 81276b0:	d9801217 	ldw	r6,72(sp)
 81276b4:	d8801317 	ldw	r2,76(sp)
 81276b8:	3029883a 	mov	r20,r6
 81276bc:	102b883a 	mov	r21,r2
 81276c0:	d8c00217 	ldw	r3,8(sp)
 81276c4:	18008516 	blt	r3,zero,81278dc <_dtoa_r+0x7a4>
 81276c8:	d9000d17 	ldw	r4,52(sp)
 81276cc:	00800384 	movi	r2,14
 81276d0:	11008216 	blt	r2,r4,81278dc <_dtoa_r+0x7a4>
 81276d4:	200490fa 	slli	r2,r4,3
 81276d8:	d9802617 	ldw	r6,152(sp)
 81276dc:	00c204f4 	movhi	r3,2067
 81276e0:	18c6d804 	addi	r3,r3,7008
 81276e4:	10c5883a 	add	r2,r2,r3
 81276e8:	14800017 	ldw	r18,0(r2)
 81276ec:	14c00117 	ldw	r19,4(r2)
 81276f0:	30031e16 	blt	r6,zero,812836c <_dtoa_r+0x1234>
 81276f4:	d9000517 	ldw	r4,20(sp)
 81276f8:	d8c00f17 	ldw	r3,60(sp)
 81276fc:	a823883a 	mov	r17,r21
 8127700:	a021883a 	mov	r16,r20
 8127704:	192b883a 	add	r21,r3,r4
 8127708:	2039883a 	mov	fp,r4
 812770c:	00000f06 	br	812774c <_dtoa_r+0x614>
 8127710:	0005883a 	mov	r2,zero
 8127714:	00d00934 	movhi	r3,16420
 8127718:	5009883a 	mov	r4,r10
 812771c:	580b883a 	mov	r5,r11
 8127720:	180f883a 	mov	r7,r3
 8127724:	100d883a 	mov	r6,r2
 8127728:	81238300 	call	8123830 <__muldf3>
 812772c:	180b883a 	mov	r5,r3
 8127730:	000d883a 	mov	r6,zero
 8127734:	000f883a 	mov	r7,zero
 8127738:	1009883a 	mov	r4,r2
 812773c:	1021883a 	mov	r16,r2
 8127740:	1823883a 	mov	r17,r3
 8127744:	8123ed40 	call	8123ed4 <__nedf2>
 8127748:	10004526 	beq	r2,zero,8127860 <_dtoa_r+0x728>
 812774c:	900d883a 	mov	r6,r18
 8127750:	980f883a 	mov	r7,r19
 8127754:	8009883a 	mov	r4,r16
 8127758:	880b883a 	mov	r5,r17
 812775c:	8123bf40 	call	8123bf4 <__divdf3>
 8127760:	180b883a 	mov	r5,r3
 8127764:	1009883a 	mov	r4,r2
 8127768:	812cc140 	call	812cc14 <__fixdfsi>
 812776c:	1009883a 	mov	r4,r2
 8127770:	1029883a 	mov	r20,r2
 8127774:	81240f40 	call	81240f4 <__floatsidf>
 8127778:	180f883a 	mov	r7,r3
 812777c:	9009883a 	mov	r4,r18
 8127780:	980b883a 	mov	r5,r19
 8127784:	100d883a 	mov	r6,r2
 8127788:	81238300 	call	8123830 <__muldf3>
 812778c:	180f883a 	mov	r7,r3
 8127790:	880b883a 	mov	r5,r17
 8127794:	8009883a 	mov	r4,r16
 8127798:	100d883a 	mov	r6,r2
 812779c:	812373c0 	call	812373c <__subdf3>
 81277a0:	1015883a 	mov	r10,r2
 81277a4:	a0800c04 	addi	r2,r20,48
 81277a8:	e0800005 	stb	r2,0(fp)
 81277ac:	e7000044 	addi	fp,fp,1
 81277b0:	1817883a 	mov	r11,r3
 81277b4:	e57fd61e 	bne	fp,r21,8127710 <_dtoa_r+0x5d8>
 81277b8:	500d883a 	mov	r6,r10
 81277bc:	180f883a 	mov	r7,r3
 81277c0:	5009883a 	mov	r4,r10
 81277c4:	180b883a 	mov	r5,r3
 81277c8:	81237bc0 	call	81237bc <__adddf3>
 81277cc:	100d883a 	mov	r6,r2
 81277d0:	9009883a 	mov	r4,r18
 81277d4:	980b883a 	mov	r5,r19
 81277d8:	180f883a 	mov	r7,r3
 81277dc:	1021883a 	mov	r16,r2
 81277e0:	1823883a 	mov	r17,r3
 81277e4:	8123fe40 	call	8123fe4 <__ltdf2>
 81277e8:	10000816 	blt	r2,zero,812780c <_dtoa_r+0x6d4>
 81277ec:	980b883a 	mov	r5,r19
 81277f0:	800d883a 	mov	r6,r16
 81277f4:	880f883a 	mov	r7,r17
 81277f8:	9009883a 	mov	r4,r18
 81277fc:	8123e4c0 	call	8123e4c <__eqdf2>
 8127800:	1000171e 	bne	r2,zero,8127860 <_dtoa_r+0x728>
 8127804:	a080004c 	andi	r2,r20,1
 8127808:	10001526 	beq	r2,zero,8127860 <_dtoa_r+0x728>
 812780c:	d8800d17 	ldw	r2,52(sp)
 8127810:	d8800415 	stw	r2,16(sp)
 8127814:	e009883a 	mov	r4,fp
 8127818:	213fffc4 	addi	r4,r4,-1
 812781c:	20c00007 	ldb	r3,0(r4)
 8127820:	00800e44 	movi	r2,57
 8127824:	1880081e 	bne	r3,r2,8127848 <_dtoa_r+0x710>
 8127828:	d8800517 	ldw	r2,20(sp)
 812782c:	113ffa1e 	bne	r2,r4,8127818 <_dtoa_r+0x6e0>
 8127830:	d8c00417 	ldw	r3,16(sp)
 8127834:	d9800517 	ldw	r6,20(sp)
 8127838:	00800c04 	movi	r2,48
 812783c:	18c00044 	addi	r3,r3,1
 8127840:	d8c00415 	stw	r3,16(sp)
 8127844:	30800005 	stb	r2,0(r6)
 8127848:	20800003 	ldbu	r2,0(r4)
 812784c:	d8c00417 	ldw	r3,16(sp)
 8127850:	27000044 	addi	fp,r4,1
 8127854:	10800044 	addi	r2,r2,1
 8127858:	d8c00d15 	stw	r3,52(sp)
 812785c:	20800005 	stb	r2,0(r4)
 8127860:	d9001617 	ldw	r4,88(sp)
 8127864:	d9400717 	ldw	r5,28(sp)
 8127868:	812a2cc0 	call	812a2cc <_Bfree>
 812786c:	e0000005 	stb	zero,0(fp)
 8127870:	d9800d17 	ldw	r6,52(sp)
 8127874:	d8c02717 	ldw	r3,156(sp)
 8127878:	d9002917 	ldw	r4,164(sp)
 812787c:	30800044 	addi	r2,r6,1
 8127880:	18800015 	stw	r2,0(r3)
 8127884:	20029c26 	beq	r4,zero,81282f8 <_dtoa_r+0x11c0>
 8127888:	d8c00517 	ldw	r3,20(sp)
 812788c:	27000015 	stw	fp,0(r4)
 8127890:	003e5d06 	br	8127208 <_dtoa_r+0xd0>
 8127894:	d9800d17 	ldw	r6,52(sp)
 8127898:	00c204f4 	movhi	r3,2067
 812789c:	18c6d804 	addi	r3,r3,7008
 81278a0:	d9001217 	ldw	r4,72(sp)
 81278a4:	300490fa 	slli	r2,r6,3
 81278a8:	d9401317 	ldw	r5,76(sp)
 81278ac:	10c5883a 	add	r2,r2,r3
 81278b0:	12000017 	ldw	r8,0(r2)
 81278b4:	12400117 	ldw	r9,4(r2)
 81278b8:	400d883a 	mov	r6,r8
 81278bc:	480f883a 	mov	r7,r9
 81278c0:	8123fe40 	call	8123fe4 <__ltdf2>
 81278c4:	1000030e 	bge	r2,zero,81278d4 <_dtoa_r+0x79c>
 81278c8:	d8800d17 	ldw	r2,52(sp)
 81278cc:	10bfffc4 	addi	r2,r2,-1
 81278d0:	d8800d15 	stw	r2,52(sp)
 81278d4:	d8000c15 	stw	zero,48(sp)
 81278d8:	003ea806 	br	812737c <_dtoa_r+0x244>
 81278dc:	d9000b17 	ldw	r4,44(sp)
 81278e0:	202cc03a 	cmpne	r22,r4,zero
 81278e4:	b000c71e 	bne	r22,zero,8127c04 <_dtoa_r+0xacc>
 81278e8:	dc001117 	ldw	r16,68(sp)
 81278ec:	dc801017 	ldw	r18,64(sp)
 81278f0:	0027883a 	mov	r19,zero
 81278f4:	04000b0e 	bge	zero,r16,8127924 <_dtoa_r+0x7ec>
 81278f8:	d8c00a17 	ldw	r3,40(sp)
 81278fc:	00c0090e 	bge	zero,r3,8127924 <_dtoa_r+0x7ec>
 8127900:	8005883a 	mov	r2,r16
 8127904:	1c011316 	blt	r3,r16,8127d54 <_dtoa_r+0xc1c>
 8127908:	d9000a17 	ldw	r4,40(sp)
 812790c:	d9801117 	ldw	r6,68(sp)
 8127910:	80a1c83a 	sub	r16,r16,r2
 8127914:	2089c83a 	sub	r4,r4,r2
 8127918:	308dc83a 	sub	r6,r6,r2
 812791c:	d9000a15 	stw	r4,40(sp)
 8127920:	d9801115 	stw	r6,68(sp)
 8127924:	d8801017 	ldw	r2,64(sp)
 8127928:	0080150e 	bge	zero,r2,8127980 <_dtoa_r+0x848>
 812792c:	d8c00b17 	ldw	r3,44(sp)
 8127930:	1805003a 	cmpeq	r2,r3,zero
 8127934:	1001c91e 	bne	r2,zero,812805c <_dtoa_r+0xf24>
 8127938:	04800e0e 	bge	zero,r18,8127974 <_dtoa_r+0x83c>
 812793c:	d9001617 	ldw	r4,88(sp)
 8127940:	980b883a 	mov	r5,r19
 8127944:	900d883a 	mov	r6,r18
 8127948:	812b0800 	call	812b080 <__pow5mult>
 812794c:	d9001617 	ldw	r4,88(sp)
 8127950:	d9800717 	ldw	r6,28(sp)
 8127954:	100b883a 	mov	r5,r2
 8127958:	1027883a 	mov	r19,r2
 812795c:	812ad5c0 	call	812ad5c <__multiply>
 8127960:	d9001617 	ldw	r4,88(sp)
 8127964:	d9400717 	ldw	r5,28(sp)
 8127968:	1023883a 	mov	r17,r2
 812796c:	812a2cc0 	call	812a2cc <_Bfree>
 8127970:	dc400715 	stw	r17,28(sp)
 8127974:	d9001017 	ldw	r4,64(sp)
 8127978:	248dc83a 	sub	r6,r4,r18
 812797c:	30010e1e 	bne	r6,zero,8127db8 <_dtoa_r+0xc80>
 8127980:	d9001617 	ldw	r4,88(sp)
 8127984:	04400044 	movi	r17,1
 8127988:	880b883a 	mov	r5,r17
 812798c:	812af440 	call	812af44 <__i2b>
 8127990:	d9800917 	ldw	r6,36(sp)
 8127994:	1025883a 	mov	r18,r2
 8127998:	0180040e 	bge	zero,r6,81279ac <_dtoa_r+0x874>
 812799c:	d9001617 	ldw	r4,88(sp)
 81279a0:	100b883a 	mov	r5,r2
 81279a4:	812b0800 	call	812b080 <__pow5mult>
 81279a8:	1025883a 	mov	r18,r2
 81279ac:	d8801717 	ldw	r2,92(sp)
 81279b0:	8880f30e 	bge	r17,r2,8127d80 <_dtoa_r+0xc48>
 81279b4:	0023883a 	mov	r17,zero
 81279b8:	d9800917 	ldw	r6,36(sp)
 81279bc:	30019e1e 	bne	r6,zero,8128038 <_dtoa_r+0xf00>
 81279c0:	00c00044 	movi	r3,1
 81279c4:	d9000a17 	ldw	r4,40(sp)
 81279c8:	20c5883a 	add	r2,r4,r3
 81279cc:	10c007cc 	andi	r3,r2,31
 81279d0:	1800841e 	bne	r3,zero,8127be4 <_dtoa_r+0xaac>
 81279d4:	00800704 	movi	r2,28
 81279d8:	d9000a17 	ldw	r4,40(sp)
 81279dc:	d9801117 	ldw	r6,68(sp)
 81279e0:	80a1883a 	add	r16,r16,r2
 81279e4:	2089883a 	add	r4,r4,r2
 81279e8:	308d883a 	add	r6,r6,r2
 81279ec:	d9000a15 	stw	r4,40(sp)
 81279f0:	d9801115 	stw	r6,68(sp)
 81279f4:	d8801117 	ldw	r2,68(sp)
 81279f8:	0080050e 	bge	zero,r2,8127a10 <_dtoa_r+0x8d8>
 81279fc:	d9400717 	ldw	r5,28(sp)
 8127a00:	d9001617 	ldw	r4,88(sp)
 8127a04:	100d883a 	mov	r6,r2
 8127a08:	812ac100 	call	812ac10 <__lshift>
 8127a0c:	d8800715 	stw	r2,28(sp)
 8127a10:	d8c00a17 	ldw	r3,40(sp)
 8127a14:	00c0050e 	bge	zero,r3,8127a2c <_dtoa_r+0x8f4>
 8127a18:	d9001617 	ldw	r4,88(sp)
 8127a1c:	900b883a 	mov	r5,r18
 8127a20:	180d883a 	mov	r6,r3
 8127a24:	812ac100 	call	812ac10 <__lshift>
 8127a28:	1025883a 	mov	r18,r2
 8127a2c:	d9000c17 	ldw	r4,48(sp)
 8127a30:	2005003a 	cmpeq	r2,r4,zero
 8127a34:	10016f26 	beq	r2,zero,8127ff4 <_dtoa_r+0xebc>
 8127a38:	d9000f17 	ldw	r4,60(sp)
 8127a3c:	0102170e 	bge	zero,r4,812829c <_dtoa_r+0x1164>
 8127a40:	d9800b17 	ldw	r6,44(sp)
 8127a44:	3005003a 	cmpeq	r2,r6,zero
 8127a48:	1000881e 	bne	r2,zero,8127c6c <_dtoa_r+0xb34>
 8127a4c:	0400050e 	bge	zero,r16,8127a64 <_dtoa_r+0x92c>
 8127a50:	d9001617 	ldw	r4,88(sp)
 8127a54:	980b883a 	mov	r5,r19
 8127a58:	800d883a 	mov	r6,r16
 8127a5c:	812ac100 	call	812ac10 <__lshift>
 8127a60:	1027883a 	mov	r19,r2
 8127a64:	8804c03a 	cmpne	r2,r17,zero
 8127a68:	1002541e 	bne	r2,zero,81283bc <_dtoa_r+0x1284>
 8127a6c:	980b883a 	mov	r5,r19
 8127a70:	dd800517 	ldw	r22,20(sp)
 8127a74:	dcc00615 	stw	r19,24(sp)
 8127a78:	a700004c 	andi	fp,r20,1
 8127a7c:	2827883a 	mov	r19,r5
 8127a80:	d9000717 	ldw	r4,28(sp)
 8127a84:	900b883a 	mov	r5,r18
 8127a88:	8126f200 	call	8126f20 <quorem>
 8127a8c:	d9000717 	ldw	r4,28(sp)
 8127a90:	d9400617 	ldw	r5,24(sp)
 8127a94:	1023883a 	mov	r17,r2
 8127a98:	8dc00c04 	addi	r23,r17,48
 8127a9c:	812a4280 	call	812a428 <__mcmp>
 8127aa0:	d9001617 	ldw	r4,88(sp)
 8127aa4:	900b883a 	mov	r5,r18
 8127aa8:	980d883a 	mov	r6,r19
 8127aac:	1029883a 	mov	r20,r2
 8127ab0:	812aa840 	call	812aa84 <__mdiff>
 8127ab4:	102b883a 	mov	r21,r2
 8127ab8:	10800317 	ldw	r2,12(r2)
 8127abc:	1001281e 	bne	r2,zero,8127f60 <_dtoa_r+0xe28>
 8127ac0:	d9000717 	ldw	r4,28(sp)
 8127ac4:	a80b883a 	mov	r5,r21
 8127ac8:	812a4280 	call	812a428 <__mcmp>
 8127acc:	d9001617 	ldw	r4,88(sp)
 8127ad0:	1021883a 	mov	r16,r2
 8127ad4:	a80b883a 	mov	r5,r21
 8127ad8:	812a2cc0 	call	812a2cc <_Bfree>
 8127adc:	8000041e 	bne	r16,zero,8127af0 <_dtoa_r+0x9b8>
 8127ae0:	d8801717 	ldw	r2,92(sp)
 8127ae4:	1000021e 	bne	r2,zero,8127af0 <_dtoa_r+0x9b8>
 8127ae8:	e004c03a 	cmpne	r2,fp,zero
 8127aec:	10011726 	beq	r2,zero,8127f4c <_dtoa_r+0xe14>
 8127af0:	a0010616 	blt	r20,zero,8127f0c <_dtoa_r+0xdd4>
 8127af4:	a000041e 	bne	r20,zero,8127b08 <_dtoa_r+0x9d0>
 8127af8:	d8c01717 	ldw	r3,92(sp)
 8127afc:	1800021e 	bne	r3,zero,8127b08 <_dtoa_r+0x9d0>
 8127b00:	e004c03a 	cmpne	r2,fp,zero
 8127b04:	10010126 	beq	r2,zero,8127f0c <_dtoa_r+0xdd4>
 8127b08:	04023d16 	blt	zero,r16,8128400 <_dtoa_r+0x12c8>
 8127b0c:	b5c00005 	stb	r23,0(r22)
 8127b10:	d9800517 	ldw	r6,20(sp)
 8127b14:	d9000f17 	ldw	r4,60(sp)
 8127b18:	b5800044 	addi	r22,r22,1
 8127b1c:	3105883a 	add	r2,r6,r4
 8127b20:	b0806526 	beq	r22,r2,8127cb8 <_dtoa_r+0xb80>
 8127b24:	d9400717 	ldw	r5,28(sp)
 8127b28:	d9001617 	ldw	r4,88(sp)
 8127b2c:	01800284 	movi	r6,10
 8127b30:	000f883a 	mov	r7,zero
 8127b34:	812af800 	call	812af80 <__multadd>
 8127b38:	d8800715 	stw	r2,28(sp)
 8127b3c:	d8800617 	ldw	r2,24(sp)
 8127b40:	14c10c26 	beq	r2,r19,8127f74 <_dtoa_r+0xe3c>
 8127b44:	d9400617 	ldw	r5,24(sp)
 8127b48:	d9001617 	ldw	r4,88(sp)
 8127b4c:	01800284 	movi	r6,10
 8127b50:	000f883a 	mov	r7,zero
 8127b54:	812af800 	call	812af80 <__multadd>
 8127b58:	d9001617 	ldw	r4,88(sp)
 8127b5c:	980b883a 	mov	r5,r19
 8127b60:	01800284 	movi	r6,10
 8127b64:	000f883a 	mov	r7,zero
 8127b68:	d8800615 	stw	r2,24(sp)
 8127b6c:	812af800 	call	812af80 <__multadd>
 8127b70:	1027883a 	mov	r19,r2
 8127b74:	003fc206 	br	8127a80 <_dtoa_r+0x948>
 8127b78:	2445c83a 	sub	r2,r4,r17
 8127b7c:	a088983a 	sll	r4,r20,r2
 8127b80:	003e4b06 	br	81274b0 <_dtoa_r+0x378>
 8127b84:	01bfffc4 	movi	r6,-1
 8127b88:	00800044 	movi	r2,1
 8127b8c:	d9800e15 	stw	r6,56(sp)
 8127b90:	d9800f15 	stw	r6,60(sp)
 8127b94:	d8800b15 	stw	r2,44(sp)
 8127b98:	d8c01617 	ldw	r3,88(sp)
 8127b9c:	008005c4 	movi	r2,23
 8127ba0:	18001115 	stw	zero,68(r3)
 8127ba4:	1580082e 	bgeu	r2,r22,8127bc8 <_dtoa_r+0xa90>
 8127ba8:	00c00104 	movi	r3,4
 8127bac:	0009883a 	mov	r4,zero
 8127bb0:	18c7883a 	add	r3,r3,r3
 8127bb4:	18800504 	addi	r2,r3,20
 8127bb8:	21000044 	addi	r4,r4,1
 8127bbc:	b0bffc2e 	bgeu	r22,r2,8127bb0 <_dtoa_r+0xa78>
 8127bc0:	d9801617 	ldw	r6,88(sp)
 8127bc4:	31001115 	stw	r4,68(r6)
 8127bc8:	dc000f17 	ldw	r16,60(sp)
 8127bcc:	003e4b06 	br	81274fc <_dtoa_r+0x3c4>
 8127bd0:	d9801717 	ldw	r6,92(sp)
 8127bd4:	0023883a 	mov	r17,zero
 8127bd8:	31bfff04 	addi	r6,r6,-4
 8127bdc:	d9801715 	stw	r6,92(sp)
 8127be0:	003df806 	br	81273c4 <_dtoa_r+0x28c>
 8127be4:	00800804 	movi	r2,32
 8127be8:	10c9c83a 	sub	r4,r2,r3
 8127bec:	00c00104 	movi	r3,4
 8127bf0:	19005a16 	blt	r3,r4,8127d5c <_dtoa_r+0xc24>
 8127bf4:	008000c4 	movi	r2,3
 8127bf8:	113f7e16 	blt	r2,r4,81279f4 <_dtoa_r+0x8bc>
 8127bfc:	20800704 	addi	r2,r4,28
 8127c00:	003f7506 	br	81279d8 <_dtoa_r+0x8a0>
 8127c04:	d9801717 	ldw	r6,92(sp)
 8127c08:	00800044 	movi	r2,1
 8127c0c:	1180a10e 	bge	r2,r6,8127e94 <_dtoa_r+0xd5c>
 8127c10:	d9800f17 	ldw	r6,60(sp)
 8127c14:	d8c01017 	ldw	r3,64(sp)
 8127c18:	30bfffc4 	addi	r2,r6,-1
 8127c1c:	1881c616 	blt	r3,r2,8128338 <_dtoa_r+0x1200>
 8127c20:	18a5c83a 	sub	r18,r3,r2
 8127c24:	d8800f17 	ldw	r2,60(sp)
 8127c28:	10026216 	blt	r2,zero,81285b4 <_dtoa_r+0x147c>
 8127c2c:	dc001117 	ldw	r16,68(sp)
 8127c30:	1007883a 	mov	r3,r2
 8127c34:	d9800a17 	ldw	r6,40(sp)
 8127c38:	d8801117 	ldw	r2,68(sp)
 8127c3c:	d9001617 	ldw	r4,88(sp)
 8127c40:	30cd883a 	add	r6,r6,r3
 8127c44:	10c5883a 	add	r2,r2,r3
 8127c48:	01400044 	movi	r5,1
 8127c4c:	d9800a15 	stw	r6,40(sp)
 8127c50:	d8801115 	stw	r2,68(sp)
 8127c54:	812af440 	call	812af44 <__i2b>
 8127c58:	1027883a 	mov	r19,r2
 8127c5c:	003f2506 	br	81278f4 <_dtoa_r+0x7bc>
 8127c60:	00c204f4 	movhi	r3,2067
 8127c64:	18c6bb04 	addi	r3,r3,6892
 8127c68:	003d6706 	br	8127208 <_dtoa_r+0xd0>
 8127c6c:	dd800517 	ldw	r22,20(sp)
 8127c70:	04000044 	movi	r16,1
 8127c74:	00000706 	br	8127c94 <_dtoa_r+0xb5c>
 8127c78:	d9400717 	ldw	r5,28(sp)
 8127c7c:	d9001617 	ldw	r4,88(sp)
 8127c80:	01800284 	movi	r6,10
 8127c84:	000f883a 	mov	r7,zero
 8127c88:	812af800 	call	812af80 <__multadd>
 8127c8c:	d8800715 	stw	r2,28(sp)
 8127c90:	84000044 	addi	r16,r16,1
 8127c94:	d9000717 	ldw	r4,28(sp)
 8127c98:	900b883a 	mov	r5,r18
 8127c9c:	8126f200 	call	8126f20 <quorem>
 8127ca0:	15c00c04 	addi	r23,r2,48
 8127ca4:	b5c00005 	stb	r23,0(r22)
 8127ca8:	d8c00f17 	ldw	r3,60(sp)
 8127cac:	b5800044 	addi	r22,r22,1
 8127cb0:	80fff116 	blt	r16,r3,8127c78 <_dtoa_r+0xb40>
 8127cb4:	d8000615 	stw	zero,24(sp)
 8127cb8:	d9400717 	ldw	r5,28(sp)
 8127cbc:	d9001617 	ldw	r4,88(sp)
 8127cc0:	01800044 	movi	r6,1
 8127cc4:	812ac100 	call	812ac10 <__lshift>
 8127cc8:	1009883a 	mov	r4,r2
 8127ccc:	900b883a 	mov	r5,r18
 8127cd0:	d8800715 	stw	r2,28(sp)
 8127cd4:	812a4280 	call	812a428 <__mcmp>
 8127cd8:	00803c0e 	bge	zero,r2,8127dcc <_dtoa_r+0xc94>
 8127cdc:	b009883a 	mov	r4,r22
 8127ce0:	213fffc4 	addi	r4,r4,-1
 8127ce4:	21400003 	ldbu	r5,0(r4)
 8127ce8:	00800e44 	movi	r2,57
 8127cec:	28c03fcc 	andi	r3,r5,255
 8127cf0:	18c0201c 	xori	r3,r3,128
 8127cf4:	18ffe004 	addi	r3,r3,-128
 8127cf8:	1881981e 	bne	r3,r2,812835c <_dtoa_r+0x1224>
 8127cfc:	d9800517 	ldw	r6,20(sp)
 8127d00:	21bff71e 	bne	r4,r6,8127ce0 <_dtoa_r+0xba8>
 8127d04:	d8800d17 	ldw	r2,52(sp)
 8127d08:	37000044 	addi	fp,r6,1
 8127d0c:	10800044 	addi	r2,r2,1
 8127d10:	d8800d15 	stw	r2,52(sp)
 8127d14:	00800c44 	movi	r2,49
 8127d18:	30800005 	stb	r2,0(r6)
 8127d1c:	d9001617 	ldw	r4,88(sp)
 8127d20:	900b883a 	mov	r5,r18
 8127d24:	812a2cc0 	call	812a2cc <_Bfree>
 8127d28:	983ecd26 	beq	r19,zero,8127860 <_dtoa_r+0x728>
 8127d2c:	d8c00617 	ldw	r3,24(sp)
 8127d30:	18000426 	beq	r3,zero,8127d44 <_dtoa_r+0xc0c>
 8127d34:	1cc00326 	beq	r3,r19,8127d44 <_dtoa_r+0xc0c>
 8127d38:	d9001617 	ldw	r4,88(sp)
 8127d3c:	180b883a 	mov	r5,r3
 8127d40:	812a2cc0 	call	812a2cc <_Bfree>
 8127d44:	d9001617 	ldw	r4,88(sp)
 8127d48:	980b883a 	mov	r5,r19
 8127d4c:	812a2cc0 	call	812a2cc <_Bfree>
 8127d50:	003ec306 	br	8127860 <_dtoa_r+0x728>
 8127d54:	1805883a 	mov	r2,r3
 8127d58:	003eeb06 	br	8127908 <_dtoa_r+0x7d0>
 8127d5c:	d9800a17 	ldw	r6,40(sp)
 8127d60:	d8c01117 	ldw	r3,68(sp)
 8127d64:	20bfff04 	addi	r2,r4,-4
 8127d68:	308d883a 	add	r6,r6,r2
 8127d6c:	1887883a 	add	r3,r3,r2
 8127d70:	80a1883a 	add	r16,r16,r2
 8127d74:	d9800a15 	stw	r6,40(sp)
 8127d78:	d8c01115 	stw	r3,68(sp)
 8127d7c:	003f1d06 	br	81279f4 <_dtoa_r+0x8bc>
 8127d80:	a03f0c1e 	bne	r20,zero,81279b4 <_dtoa_r+0x87c>
 8127d84:	00800434 	movhi	r2,16
 8127d88:	10bfffc4 	addi	r2,r2,-1
 8127d8c:	a884703a 	and	r2,r21,r2
 8127d90:	103f081e 	bne	r2,zero,81279b4 <_dtoa_r+0x87c>
 8127d94:	a89ffc2c 	andhi	r2,r21,32752
 8127d98:	103f0626 	beq	r2,zero,81279b4 <_dtoa_r+0x87c>
 8127d9c:	d8c01117 	ldw	r3,68(sp)
 8127da0:	d9000a17 	ldw	r4,40(sp)
 8127da4:	18c00044 	addi	r3,r3,1
 8127da8:	21000044 	addi	r4,r4,1
 8127dac:	d8c01115 	stw	r3,68(sp)
 8127db0:	d9000a15 	stw	r4,40(sp)
 8127db4:	003f0006 	br	81279b8 <_dtoa_r+0x880>
 8127db8:	d9400717 	ldw	r5,28(sp)
 8127dbc:	d9001617 	ldw	r4,88(sp)
 8127dc0:	812b0800 	call	812b080 <__pow5mult>
 8127dc4:	d8800715 	stw	r2,28(sp)
 8127dc8:	003eed06 	br	8127980 <_dtoa_r+0x848>
 8127dcc:	1000021e 	bne	r2,zero,8127dd8 <_dtoa_r+0xca0>
 8127dd0:	b880004c 	andi	r2,r23,1
 8127dd4:	103fc11e 	bne	r2,zero,8127cdc <_dtoa_r+0xba4>
 8127dd8:	b5bfffc4 	addi	r22,r22,-1
 8127ddc:	b0c00007 	ldb	r3,0(r22)
 8127de0:	00800c04 	movi	r2,48
 8127de4:	18bffc26 	beq	r3,r2,8127dd8 <_dtoa_r+0xca0>
 8127de8:	b7000044 	addi	fp,r22,1
 8127dec:	003fcb06 	br	8127d1c <_dtoa_r+0xbe4>
 8127df0:	d9800d17 	ldw	r6,52(sp)
 8127df4:	018fc83a 	sub	r7,zero,r6
 8127df8:	3801f726 	beq	r7,zero,81285d8 <_dtoa_r+0x14a0>
 8127dfc:	398003cc 	andi	r6,r7,15
 8127e00:	300c90fa 	slli	r6,r6,3
 8127e04:	014204f4 	movhi	r5,2067
 8127e08:	2946d804 	addi	r5,r5,7008
 8127e0c:	d9001217 	ldw	r4,72(sp)
 8127e10:	314d883a 	add	r6,r6,r5
 8127e14:	30c00117 	ldw	r3,4(r6)
 8127e18:	30800017 	ldw	r2,0(r6)
 8127e1c:	d9401317 	ldw	r5,76(sp)
 8127e20:	3821d13a 	srai	r16,r7,4
 8127e24:	100d883a 	mov	r6,r2
 8127e28:	180f883a 	mov	r7,r3
 8127e2c:	81238300 	call	8123830 <__muldf3>
 8127e30:	1011883a 	mov	r8,r2
 8127e34:	1813883a 	mov	r9,r3
 8127e38:	1029883a 	mov	r20,r2
 8127e3c:	182b883a 	mov	r21,r3
 8127e40:	8001e526 	beq	r16,zero,81285d8 <_dtoa_r+0x14a0>
 8127e44:	05800084 	movi	r22,2
 8127e48:	044204f4 	movhi	r17,2067
 8127e4c:	8c470a04 	addi	r17,r17,7208
 8127e50:	8080004c 	andi	r2,r16,1
 8127e54:	1005003a 	cmpeq	r2,r2,zero
 8127e58:	1000081e 	bne	r2,zero,8127e7c <_dtoa_r+0xd44>
 8127e5c:	89800017 	ldw	r6,0(r17)
 8127e60:	89c00117 	ldw	r7,4(r17)
 8127e64:	480b883a 	mov	r5,r9
 8127e68:	4009883a 	mov	r4,r8
 8127e6c:	81238300 	call	8123830 <__muldf3>
 8127e70:	1011883a 	mov	r8,r2
 8127e74:	b5800044 	addi	r22,r22,1
 8127e78:	1813883a 	mov	r9,r3
 8127e7c:	8021d07a 	srai	r16,r16,1
 8127e80:	8c400204 	addi	r17,r17,8
 8127e84:	803ff21e 	bne	r16,zero,8127e50 <_dtoa_r+0xd18>
 8127e88:	4029883a 	mov	r20,r8
 8127e8c:	482b883a 	mov	r21,r9
 8127e90:	003dca06 	br	81275bc <_dtoa_r+0x484>
 8127e94:	d9000817 	ldw	r4,32(sp)
 8127e98:	2005003a 	cmpeq	r2,r4,zero
 8127e9c:	1001f61e 	bne	r2,zero,8128678 <_dtoa_r+0x1540>
 8127ea0:	dc001117 	ldw	r16,68(sp)
 8127ea4:	dc801017 	ldw	r18,64(sp)
 8127ea8:	18c10cc4 	addi	r3,r3,1075
 8127eac:	003f6106 	br	8127c34 <_dtoa_r+0xafc>
 8127eb0:	d8000b15 	stw	zero,44(sp)
 8127eb4:	d9802617 	ldw	r6,152(sp)
 8127eb8:	d8c00d17 	ldw	r3,52(sp)
 8127ebc:	30800044 	addi	r2,r6,1
 8127ec0:	18ad883a 	add	r22,r3,r2
 8127ec4:	b13fffc4 	addi	r4,r22,-1
 8127ec8:	d9000e15 	stw	r4,56(sp)
 8127ecc:	0581f60e 	bge	zero,r22,81286a8 <_dtoa_r+0x1570>
 8127ed0:	dd800f15 	stw	r22,60(sp)
 8127ed4:	003f3006 	br	8127b98 <_dtoa_r+0xa60>
 8127ed8:	d8000b15 	stw	zero,44(sp)
 8127edc:	d9002617 	ldw	r4,152(sp)
 8127ee0:	0101eb0e 	bge	zero,r4,8128690 <_dtoa_r+0x1558>
 8127ee4:	202d883a 	mov	r22,r4
 8127ee8:	d9000e15 	stw	r4,56(sp)
 8127eec:	d9000f15 	stw	r4,60(sp)
 8127ef0:	003f2906 	br	8127b98 <_dtoa_r+0xa60>
 8127ef4:	01800044 	movi	r6,1
 8127ef8:	d9800b15 	stw	r6,44(sp)
 8127efc:	003ff706 	br	8127edc <_dtoa_r+0xda4>
 8127f00:	01000044 	movi	r4,1
 8127f04:	d9000b15 	stw	r4,44(sp)
 8127f08:	003fea06 	br	8127eb4 <_dtoa_r+0xd7c>
 8127f0c:	04000c0e 	bge	zero,r16,8127f40 <_dtoa_r+0xe08>
 8127f10:	d9400717 	ldw	r5,28(sp)
 8127f14:	d9001617 	ldw	r4,88(sp)
 8127f18:	01800044 	movi	r6,1
 8127f1c:	812ac100 	call	812ac10 <__lshift>
 8127f20:	1009883a 	mov	r4,r2
 8127f24:	900b883a 	mov	r5,r18
 8127f28:	d8800715 	stw	r2,28(sp)
 8127f2c:	812a4280 	call	812a428 <__mcmp>
 8127f30:	0081e00e 	bge	zero,r2,81286b4 <_dtoa_r+0x157c>
 8127f34:	bdc00044 	addi	r23,r23,1
 8127f38:	00800e84 	movi	r2,58
 8127f3c:	b881a226 	beq	r23,r2,81285c8 <_dtoa_r+0x1490>
 8127f40:	b7000044 	addi	fp,r22,1
 8127f44:	b5c00005 	stb	r23,0(r22)
 8127f48:	003f7406 	br	8127d1c <_dtoa_r+0xbe4>
 8127f4c:	00800e44 	movi	r2,57
 8127f50:	b8819d26 	beq	r23,r2,81285c8 <_dtoa_r+0x1490>
 8127f54:	053ffa0e 	bge	zero,r20,8127f40 <_dtoa_r+0xe08>
 8127f58:	8dc00c44 	addi	r23,r17,49
 8127f5c:	003ff806 	br	8127f40 <_dtoa_r+0xe08>
 8127f60:	d9001617 	ldw	r4,88(sp)
 8127f64:	a80b883a 	mov	r5,r21
 8127f68:	04000044 	movi	r16,1
 8127f6c:	812a2cc0 	call	812a2cc <_Bfree>
 8127f70:	003edf06 	br	8127af0 <_dtoa_r+0x9b8>
 8127f74:	d9001617 	ldw	r4,88(sp)
 8127f78:	980b883a 	mov	r5,r19
 8127f7c:	01800284 	movi	r6,10
 8127f80:	000f883a 	mov	r7,zero
 8127f84:	812af800 	call	812af80 <__multadd>
 8127f88:	1027883a 	mov	r19,r2
 8127f8c:	d8800615 	stw	r2,24(sp)
 8127f90:	003ebb06 	br	8127a80 <_dtoa_r+0x948>
 8127f94:	d9801117 	ldw	r6,68(sp)
 8127f98:	d8800d17 	ldw	r2,52(sp)
 8127f9c:	d8000915 	stw	zero,36(sp)
 8127fa0:	308dc83a 	sub	r6,r6,r2
 8127fa4:	0087c83a 	sub	r3,zero,r2
 8127fa8:	d9801115 	stw	r6,68(sp)
 8127fac:	d8c01015 	stw	r3,64(sp)
 8127fb0:	003cfe06 	br	81273ac <_dtoa_r+0x274>
 8127fb4:	018dc83a 	sub	r6,zero,r6
 8127fb8:	d9801115 	stw	r6,68(sp)
 8127fbc:	d8000a15 	stw	zero,40(sp)
 8127fc0:	003cf306 	br	8127390 <_dtoa_r+0x258>
 8127fc4:	d9000d17 	ldw	r4,52(sp)
 8127fc8:	81240f40 	call	81240f4 <__floatsidf>
 8127fcc:	880b883a 	mov	r5,r17
 8127fd0:	8009883a 	mov	r4,r16
 8127fd4:	180f883a 	mov	r7,r3
 8127fd8:	100d883a 	mov	r6,r2
 8127fdc:	8123ed40 	call	8123ed4 <__nedf2>
 8127fe0:	103ce126 	beq	r2,zero,8127368 <_dtoa_r+0x230>
 8127fe4:	d9800d17 	ldw	r6,52(sp)
 8127fe8:	31bfffc4 	addi	r6,r6,-1
 8127fec:	d9800d15 	stw	r6,52(sp)
 8127ff0:	003cdd06 	br	8127368 <_dtoa_r+0x230>
 8127ff4:	d9000717 	ldw	r4,28(sp)
 8127ff8:	900b883a 	mov	r5,r18
 8127ffc:	812a4280 	call	812a428 <__mcmp>
 8128000:	103e8d0e 	bge	r2,zero,8127a38 <_dtoa_r+0x900>
 8128004:	d9400717 	ldw	r5,28(sp)
 8128008:	d9001617 	ldw	r4,88(sp)
 812800c:	01800284 	movi	r6,10
 8128010:	000f883a 	mov	r7,zero
 8128014:	812af800 	call	812af80 <__multadd>
 8128018:	d9800d17 	ldw	r6,52(sp)
 812801c:	d8800715 	stw	r2,28(sp)
 8128020:	31bfffc4 	addi	r6,r6,-1
 8128024:	d9800d15 	stw	r6,52(sp)
 8128028:	b001a71e 	bne	r22,zero,81286c8 <_dtoa_r+0x1590>
 812802c:	d8800e17 	ldw	r2,56(sp)
 8128030:	d8800f15 	stw	r2,60(sp)
 8128034:	003e8006 	br	8127a38 <_dtoa_r+0x900>
 8128038:	90800417 	ldw	r2,16(r18)
 812803c:	1085883a 	add	r2,r2,r2
 8128040:	1085883a 	add	r2,r2,r2
 8128044:	1485883a 	add	r2,r2,r18
 8128048:	11000417 	ldw	r4,16(r2)
 812804c:	812a2f40 	call	812a2f4 <__hi0bits>
 8128050:	00c00804 	movi	r3,32
 8128054:	1887c83a 	sub	r3,r3,r2
 8128058:	003e5a06 	br	81279c4 <_dtoa_r+0x88c>
 812805c:	d9400717 	ldw	r5,28(sp)
 8128060:	d9801017 	ldw	r6,64(sp)
 8128064:	d9001617 	ldw	r4,88(sp)
 8128068:	812b0800 	call	812b080 <__pow5mult>
 812806c:	d8800715 	stw	r2,28(sp)
 8128070:	003e4306 	br	8127980 <_dtoa_r+0x848>
 8128074:	d9800f17 	ldw	r6,60(sp)
 8128078:	d8800d17 	ldw	r2,52(sp)
 812807c:	d9800315 	stw	r6,12(sp)
 8128080:	d8800415 	stw	r2,16(sp)
 8128084:	d8c00b17 	ldw	r3,44(sp)
 8128088:	1805003a 	cmpeq	r2,r3,zero
 812808c:	1000e21e 	bne	r2,zero,8128418 <_dtoa_r+0x12e0>
 8128090:	d9000317 	ldw	r4,12(sp)
 8128094:	0005883a 	mov	r2,zero
 8128098:	00cff834 	movhi	r3,16352
 812809c:	200c90fa 	slli	r6,r4,3
 81280a0:	010204f4 	movhi	r4,2067
 81280a4:	2106d804 	addi	r4,r4,7008
 81280a8:	180b883a 	mov	r5,r3
 81280ac:	310d883a 	add	r6,r6,r4
 81280b0:	327fff17 	ldw	r9,-4(r6)
 81280b4:	323ffe17 	ldw	r8,-8(r6)
 81280b8:	1009883a 	mov	r4,r2
 81280bc:	480f883a 	mov	r7,r9
 81280c0:	400d883a 	mov	r6,r8
 81280c4:	8123bf40 	call	8123bf4 <__divdf3>
 81280c8:	180b883a 	mov	r5,r3
 81280cc:	b00d883a 	mov	r6,r22
 81280d0:	b80f883a 	mov	r7,r23
 81280d4:	1009883a 	mov	r4,r2
 81280d8:	812373c0 	call	812373c <__subdf3>
 81280dc:	a80b883a 	mov	r5,r21
 81280e0:	a009883a 	mov	r4,r20
 81280e4:	d8c01915 	stw	r3,100(sp)
 81280e8:	d8801815 	stw	r2,96(sp)
 81280ec:	812cc140 	call	812cc14 <__fixdfsi>
 81280f0:	1009883a 	mov	r4,r2
 81280f4:	1027883a 	mov	r19,r2
 81280f8:	81240f40 	call	81240f4 <__floatsidf>
 81280fc:	a80b883a 	mov	r5,r21
 8128100:	a009883a 	mov	r4,r20
 8128104:	180f883a 	mov	r7,r3
 8128108:	100d883a 	mov	r6,r2
 812810c:	812373c0 	call	812373c <__subdf3>
 8128110:	d9801817 	ldw	r6,96(sp)
 8128114:	1823883a 	mov	r17,r3
 8128118:	d8801415 	stw	r2,80(sp)
 812811c:	302d883a 	mov	r22,r6
 8128120:	d9800517 	ldw	r6,20(sp)
 8128124:	9cc00c04 	addi	r19,r19,48
 8128128:	dc401515 	stw	r17,84(sp)
 812812c:	d8c01917 	ldw	r3,100(sp)
 8128130:	34c00005 	stb	r19,0(r6)
 8128134:	d8800517 	ldw	r2,20(sp)
 8128138:	d9401917 	ldw	r5,100(sp)
 812813c:	d9801417 	ldw	r6,80(sp)
 8128140:	b009883a 	mov	r4,r22
 8128144:	880f883a 	mov	r7,r17
 8128148:	182f883a 	mov	r23,r3
 812814c:	17000044 	addi	fp,r2,1
 8128150:	8123f5c0 	call	8123f5c <__gtdf2>
 8128154:	00804e16 	blt	zero,r2,8128290 <_dtoa_r+0x1158>
 8128158:	d9801417 	ldw	r6,80(sp)
 812815c:	0005883a 	mov	r2,zero
 8128160:	00cffc34 	movhi	r3,16368
 8128164:	180b883a 	mov	r5,r3
 8128168:	880f883a 	mov	r7,r17
 812816c:	1009883a 	mov	r4,r2
 8128170:	812373c0 	call	812373c <__subdf3>
 8128174:	d9401917 	ldw	r5,100(sp)
 8128178:	180f883a 	mov	r7,r3
 812817c:	b009883a 	mov	r4,r22
 8128180:	100d883a 	mov	r6,r2
 8128184:	8123f5c0 	call	8123f5c <__gtdf2>
 8128188:	00bda216 	blt	zero,r2,8127814 <_dtoa_r+0x6dc>
 812818c:	d8c00317 	ldw	r3,12(sp)
 8128190:	00800044 	movi	r2,1
 8128194:	10c01216 	blt	r2,r3,81281e0 <_dtoa_r+0x10a8>
 8128198:	003d4506 	br	81276b0 <_dtoa_r+0x578>
 812819c:	d9801417 	ldw	r6,80(sp)
 81281a0:	0005883a 	mov	r2,zero
 81281a4:	00cffc34 	movhi	r3,16368
 81281a8:	180b883a 	mov	r5,r3
 81281ac:	880f883a 	mov	r7,r17
 81281b0:	1009883a 	mov	r4,r2
 81281b4:	812373c0 	call	812373c <__subdf3>
 81281b8:	d9c01b17 	ldw	r7,108(sp)
 81281bc:	180b883a 	mov	r5,r3
 81281c0:	1009883a 	mov	r4,r2
 81281c4:	b00d883a 	mov	r6,r22
 81281c8:	8123fe40 	call	8123fe4 <__ltdf2>
 81281cc:	103d9116 	blt	r2,zero,8127814 <_dtoa_r+0x6dc>
 81281d0:	d9800517 	ldw	r6,20(sp)
 81281d4:	d9000317 	ldw	r4,12(sp)
 81281d8:	3105883a 	add	r2,r6,r4
 81281dc:	e0bd3426 	beq	fp,r2,81276b0 <_dtoa_r+0x578>
 81281e0:	04500934 	movhi	r17,16420
 81281e4:	0021883a 	mov	r16,zero
 81281e8:	b80b883a 	mov	r5,r23
 81281ec:	b009883a 	mov	r4,r22
 81281f0:	800d883a 	mov	r6,r16
 81281f4:	880f883a 	mov	r7,r17
 81281f8:	81238300 	call	8123830 <__muldf3>
 81281fc:	d9401517 	ldw	r5,84(sp)
 8128200:	d9001417 	ldw	r4,80(sp)
 8128204:	880f883a 	mov	r7,r17
 8128208:	000d883a 	mov	r6,zero
 812820c:	d8801a15 	stw	r2,104(sp)
 8128210:	d8c01b15 	stw	r3,108(sp)
 8128214:	81238300 	call	8123830 <__muldf3>
 8128218:	180b883a 	mov	r5,r3
 812821c:	1009883a 	mov	r4,r2
 8128220:	1823883a 	mov	r17,r3
 8128224:	1021883a 	mov	r16,r2
 8128228:	812cc140 	call	812cc14 <__fixdfsi>
 812822c:	1009883a 	mov	r4,r2
 8128230:	102b883a 	mov	r21,r2
 8128234:	81240f40 	call	81240f4 <__floatsidf>
 8128238:	880b883a 	mov	r5,r17
 812823c:	8009883a 	mov	r4,r16
 8128240:	180f883a 	mov	r7,r3
 8128244:	100d883a 	mov	r6,r2
 8128248:	812373c0 	call	812373c <__subdf3>
 812824c:	1021883a 	mov	r16,r2
 8128250:	d9001b17 	ldw	r4,108(sp)
 8128254:	1823883a 	mov	r17,r3
 8128258:	dc001415 	stw	r16,80(sp)
 812825c:	ad400c04 	addi	r21,r21,48
 8128260:	dc401515 	stw	r17,84(sp)
 8128264:	d8801a17 	ldw	r2,104(sp)
 8128268:	e5400005 	stb	r21,0(fp)
 812826c:	202f883a 	mov	r23,r4
 8128270:	d9c01b17 	ldw	r7,108(sp)
 8128274:	d9001417 	ldw	r4,80(sp)
 8128278:	880b883a 	mov	r5,r17
 812827c:	100d883a 	mov	r6,r2
 8128280:	102d883a 	mov	r22,r2
 8128284:	e7000044 	addi	fp,fp,1
 8128288:	8123fe40 	call	8123fe4 <__ltdf2>
 812828c:	103fc30e 	bge	r2,zero,812819c <_dtoa_r+0x1064>
 8128290:	d9000417 	ldw	r4,16(sp)
 8128294:	d9000d15 	stw	r4,52(sp)
 8128298:	003d7106 	br	8127860 <_dtoa_r+0x728>
 812829c:	d9801717 	ldw	r6,92(sp)
 81282a0:	00800084 	movi	r2,2
 81282a4:	11bde60e 	bge	r2,r6,8127a40 <_dtoa_r+0x908>
 81282a8:	203cfb1e 	bne	r4,zero,8127698 <_dtoa_r+0x560>
 81282ac:	d9001617 	ldw	r4,88(sp)
 81282b0:	900b883a 	mov	r5,r18
 81282b4:	01800144 	movi	r6,5
 81282b8:	000f883a 	mov	r7,zero
 81282bc:	812af800 	call	812af80 <__multadd>
 81282c0:	d9000717 	ldw	r4,28(sp)
 81282c4:	100b883a 	mov	r5,r2
 81282c8:	1025883a 	mov	r18,r2
 81282cc:	812a4280 	call	812a428 <__mcmp>
 81282d0:	00bcf10e 	bge	zero,r2,8127698 <_dtoa_r+0x560>
 81282d4:	d8c00d17 	ldw	r3,52(sp)
 81282d8:	d9000517 	ldw	r4,20(sp)
 81282dc:	d8000615 	stw	zero,24(sp)
 81282e0:	18c00044 	addi	r3,r3,1
 81282e4:	d8c00d15 	stw	r3,52(sp)
 81282e8:	00800c44 	movi	r2,49
 81282ec:	27000044 	addi	fp,r4,1
 81282f0:	20800005 	stb	r2,0(r4)
 81282f4:	003e8906 	br	8127d1c <_dtoa_r+0xbe4>
 81282f8:	d8c00517 	ldw	r3,20(sp)
 81282fc:	003bc206 	br	8127208 <_dtoa_r+0xd0>
 8128300:	018204f4 	movhi	r6,2067
 8128304:	31870a04 	addi	r6,r6,7208
 8128308:	30c00917 	ldw	r3,36(r6)
 812830c:	30800817 	ldw	r2,32(r6)
 8128310:	d9001217 	ldw	r4,72(sp)
 8128314:	d9401317 	ldw	r5,76(sp)
 8128318:	180f883a 	mov	r7,r3
 812831c:	100d883a 	mov	r6,r2
 8128320:	8123bf40 	call	8123bf4 <__divdf3>
 8128324:	948003cc 	andi	r18,r18,15
 8128328:	058000c4 	movi	r22,3
 812832c:	1029883a 	mov	r20,r2
 8128330:	182b883a 	mov	r21,r3
 8128334:	003c8906 	br	812755c <_dtoa_r+0x424>
 8128338:	d9001017 	ldw	r4,64(sp)
 812833c:	d9800917 	ldw	r6,36(sp)
 8128340:	0025883a 	mov	r18,zero
 8128344:	1105c83a 	sub	r2,r2,r4
 8128348:	2089883a 	add	r4,r4,r2
 812834c:	308d883a 	add	r6,r6,r2
 8128350:	d9001015 	stw	r4,64(sp)
 8128354:	d9800915 	stw	r6,36(sp)
 8128358:	003e3206 	br	8127c24 <_dtoa_r+0xaec>
 812835c:	28800044 	addi	r2,r5,1
 8128360:	27000044 	addi	fp,r4,1
 8128364:	20800005 	stb	r2,0(r4)
 8128368:	003e6c06 	br	8127d1c <_dtoa_r+0xbe4>
 812836c:	d8800f17 	ldw	r2,60(sp)
 8128370:	00bce016 	blt	zero,r2,81276f4 <_dtoa_r+0x5bc>
 8128374:	d9800f17 	ldw	r6,60(sp)
 8128378:	303cc51e 	bne	r6,zero,8127690 <_dtoa_r+0x558>
 812837c:	0005883a 	mov	r2,zero
 8128380:	00d00534 	movhi	r3,16404
 8128384:	980b883a 	mov	r5,r19
 8128388:	180f883a 	mov	r7,r3
 812838c:	9009883a 	mov	r4,r18
 8128390:	100d883a 	mov	r6,r2
 8128394:	81238300 	call	8123830 <__muldf3>
 8128398:	180b883a 	mov	r5,r3
 812839c:	a80f883a 	mov	r7,r21
 81283a0:	1009883a 	mov	r4,r2
 81283a4:	a00d883a 	mov	r6,r20
 81283a8:	812cb8c0 	call	812cb8c <__gedf2>
 81283ac:	103cb80e 	bge	r2,zero,8127690 <_dtoa_r+0x558>
 81283b0:	0027883a 	mov	r19,zero
 81283b4:	0025883a 	mov	r18,zero
 81283b8:	003fc606 	br	81282d4 <_dtoa_r+0x119c>
 81283bc:	99400117 	ldw	r5,4(r19)
 81283c0:	d9001617 	ldw	r4,88(sp)
 81283c4:	812a84c0 	call	812a84c <_Balloc>
 81283c8:	99800417 	ldw	r6,16(r19)
 81283cc:	11000304 	addi	r4,r2,12
 81283d0:	99400304 	addi	r5,r19,12
 81283d4:	318d883a 	add	r6,r6,r6
 81283d8:	318d883a 	add	r6,r6,r6
 81283dc:	31800204 	addi	r6,r6,8
 81283e0:	1023883a 	mov	r17,r2
 81283e4:	812a0b40 	call	812a0b4 <memcpy>
 81283e8:	d9001617 	ldw	r4,88(sp)
 81283ec:	880b883a 	mov	r5,r17
 81283f0:	01800044 	movi	r6,1
 81283f4:	812ac100 	call	812ac10 <__lshift>
 81283f8:	100b883a 	mov	r5,r2
 81283fc:	003d9c06 	br	8127a70 <_dtoa_r+0x938>
 8128400:	00800e44 	movi	r2,57
 8128404:	b8807026 	beq	r23,r2,81285c8 <_dtoa_r+0x1490>
 8128408:	b8800044 	addi	r2,r23,1
 812840c:	b7000044 	addi	fp,r22,1
 8128410:	b0800005 	stb	r2,0(r22)
 8128414:	003e4106 	br	8127d1c <_dtoa_r+0xbe4>
 8128418:	d8800317 	ldw	r2,12(sp)
 812841c:	018204f4 	movhi	r6,2067
 8128420:	3186d804 	addi	r6,r6,7008
 8128424:	b009883a 	mov	r4,r22
 8128428:	100e90fa 	slli	r7,r2,3
 812842c:	b80b883a 	mov	r5,r23
 8128430:	398f883a 	add	r7,r7,r6
 8128434:	38bffe17 	ldw	r2,-8(r7)
 8128438:	d9800517 	ldw	r6,20(sp)
 812843c:	38ffff17 	ldw	r3,-4(r7)
 8128440:	37000044 	addi	fp,r6,1
 8128444:	180f883a 	mov	r7,r3
 8128448:	100d883a 	mov	r6,r2
 812844c:	81238300 	call	8123830 <__muldf3>
 8128450:	a80b883a 	mov	r5,r21
 8128454:	a009883a 	mov	r4,r20
 8128458:	182f883a 	mov	r23,r3
 812845c:	102d883a 	mov	r22,r2
 8128460:	812cc140 	call	812cc14 <__fixdfsi>
 8128464:	1009883a 	mov	r4,r2
 8128468:	1027883a 	mov	r19,r2
 812846c:	81240f40 	call	81240f4 <__floatsidf>
 8128470:	a80b883a 	mov	r5,r21
 8128474:	a009883a 	mov	r4,r20
 8128478:	180f883a 	mov	r7,r3
 812847c:	100d883a 	mov	r6,r2
 8128480:	812373c0 	call	812373c <__subdf3>
 8128484:	180b883a 	mov	r5,r3
 8128488:	d8c00517 	ldw	r3,20(sp)
 812848c:	9cc00c04 	addi	r19,r19,48
 8128490:	1009883a 	mov	r4,r2
 8128494:	1cc00005 	stb	r19,0(r3)
 8128498:	2021883a 	mov	r16,r4
 812849c:	d9000317 	ldw	r4,12(sp)
 81284a0:	00800044 	movi	r2,1
 81284a4:	2823883a 	mov	r17,r5
 81284a8:	20802226 	beq	r4,r2,8128534 <_dtoa_r+0x13fc>
 81284ac:	1029883a 	mov	r20,r2
 81284b0:	0005883a 	mov	r2,zero
 81284b4:	00d00934 	movhi	r3,16420
 81284b8:	180f883a 	mov	r7,r3
 81284bc:	100d883a 	mov	r6,r2
 81284c0:	880b883a 	mov	r5,r17
 81284c4:	8009883a 	mov	r4,r16
 81284c8:	81238300 	call	8123830 <__muldf3>
 81284cc:	180b883a 	mov	r5,r3
 81284d0:	1009883a 	mov	r4,r2
 81284d4:	1823883a 	mov	r17,r3
 81284d8:	1021883a 	mov	r16,r2
 81284dc:	812cc140 	call	812cc14 <__fixdfsi>
 81284e0:	1009883a 	mov	r4,r2
 81284e4:	102b883a 	mov	r21,r2
 81284e8:	81240f40 	call	81240f4 <__floatsidf>
 81284ec:	880b883a 	mov	r5,r17
 81284f0:	8009883a 	mov	r4,r16
 81284f4:	180f883a 	mov	r7,r3
 81284f8:	100d883a 	mov	r6,r2
 81284fc:	812373c0 	call	812373c <__subdf3>
 8128500:	180b883a 	mov	r5,r3
 8128504:	d8c00517 	ldw	r3,20(sp)
 8128508:	1009883a 	mov	r4,r2
 812850c:	ad400c04 	addi	r21,r21,48
 8128510:	1d05883a 	add	r2,r3,r20
 8128514:	15400005 	stb	r21,0(r2)
 8128518:	2021883a 	mov	r16,r4
 812851c:	d9000317 	ldw	r4,12(sp)
 8128520:	a5000044 	addi	r20,r20,1
 8128524:	2823883a 	mov	r17,r5
 8128528:	a13fe11e 	bne	r20,r4,81284b0 <_dtoa_r+0x1378>
 812852c:	e505883a 	add	r2,fp,r20
 8128530:	173fffc4 	addi	fp,r2,-1
 8128534:	0025883a 	mov	r18,zero
 8128538:	04cff834 	movhi	r19,16352
 812853c:	b009883a 	mov	r4,r22
 8128540:	b80b883a 	mov	r5,r23
 8128544:	900d883a 	mov	r6,r18
 8128548:	980f883a 	mov	r7,r19
 812854c:	81237bc0 	call	81237bc <__adddf3>
 8128550:	180b883a 	mov	r5,r3
 8128554:	1009883a 	mov	r4,r2
 8128558:	800d883a 	mov	r6,r16
 812855c:	880f883a 	mov	r7,r17
 8128560:	8123fe40 	call	8123fe4 <__ltdf2>
 8128564:	103cab16 	blt	r2,zero,8127814 <_dtoa_r+0x6dc>
 8128568:	0009883a 	mov	r4,zero
 812856c:	980b883a 	mov	r5,r19
 8128570:	b80f883a 	mov	r7,r23
 8128574:	b00d883a 	mov	r6,r22
 8128578:	812373c0 	call	812373c <__subdf3>
 812857c:	180b883a 	mov	r5,r3
 8128580:	880f883a 	mov	r7,r17
 8128584:	1009883a 	mov	r4,r2
 8128588:	800d883a 	mov	r6,r16
 812858c:	8123f5c0 	call	8123f5c <__gtdf2>
 8128590:	00bc470e 	bge	zero,r2,81276b0 <_dtoa_r+0x578>
 8128594:	00c00c04 	movi	r3,48
 8128598:	e73fffc4 	addi	fp,fp,-1
 812859c:	e0800007 	ldb	r2,0(fp)
 81285a0:	10fffd26 	beq	r2,r3,8128598 <_dtoa_r+0x1460>
 81285a4:	d9800417 	ldw	r6,16(sp)
 81285a8:	e7000044 	addi	fp,fp,1
 81285ac:	d9800d15 	stw	r6,52(sp)
 81285b0:	003cab06 	br	8127860 <_dtoa_r+0x728>
 81285b4:	d8c00f17 	ldw	r3,60(sp)
 81285b8:	d9001117 	ldw	r4,68(sp)
 81285bc:	20e1c83a 	sub	r16,r4,r3
 81285c0:	0007883a 	mov	r3,zero
 81285c4:	003d9b06 	br	8127c34 <_dtoa_r+0xafc>
 81285c8:	00800e44 	movi	r2,57
 81285cc:	b0800005 	stb	r2,0(r22)
 81285d0:	b5800044 	addi	r22,r22,1
 81285d4:	003dc106 	br	8127cdc <_dtoa_r+0xba4>
 81285d8:	05800084 	movi	r22,2
 81285dc:	003bf706 	br	81275bc <_dtoa_r+0x484>
 81285e0:	d9000f17 	ldw	r4,60(sp)
 81285e4:	013c000e 	bge	zero,r4,81275e8 <_dtoa_r+0x4b0>
 81285e8:	d9800e17 	ldw	r6,56(sp)
 81285ec:	01bc300e 	bge	zero,r6,81276b0 <_dtoa_r+0x578>
 81285f0:	0005883a 	mov	r2,zero
 81285f4:	00d00934 	movhi	r3,16420
 81285f8:	a80b883a 	mov	r5,r21
 81285fc:	180f883a 	mov	r7,r3
 8128600:	a009883a 	mov	r4,r20
 8128604:	100d883a 	mov	r6,r2
 8128608:	81238300 	call	8123830 <__muldf3>
 812860c:	b1000044 	addi	r4,r22,1
 8128610:	1021883a 	mov	r16,r2
 8128614:	1823883a 	mov	r17,r3
 8128618:	81240f40 	call	81240f4 <__floatsidf>
 812861c:	880b883a 	mov	r5,r17
 8128620:	8009883a 	mov	r4,r16
 8128624:	180f883a 	mov	r7,r3
 8128628:	100d883a 	mov	r6,r2
 812862c:	81238300 	call	8123830 <__muldf3>
 8128630:	0011883a 	mov	r8,zero
 8128634:	02500734 	movhi	r9,16412
 8128638:	180b883a 	mov	r5,r3
 812863c:	480f883a 	mov	r7,r9
 8128640:	1009883a 	mov	r4,r2
 8128644:	400d883a 	mov	r6,r8
 8128648:	81237bc0 	call	81237bc <__adddf3>
 812864c:	102d883a 	mov	r22,r2
 8128650:	00bf3034 	movhi	r2,64704
 8128654:	10ef883a 	add	r23,r2,r3
 8128658:	d8800d17 	ldw	r2,52(sp)
 812865c:	d8c00e17 	ldw	r3,56(sp)
 8128660:	8029883a 	mov	r20,r16
 8128664:	10bfffc4 	addi	r2,r2,-1
 8128668:	882b883a 	mov	r21,r17
 812866c:	d8800415 	stw	r2,16(sp)
 8128670:	d8c00315 	stw	r3,12(sp)
 8128674:	003e8306 	br	8128084 <_dtoa_r+0xf4c>
 8128678:	d8800117 	ldw	r2,4(sp)
 812867c:	dc001117 	ldw	r16,68(sp)
 8128680:	dc801017 	ldw	r18,64(sp)
 8128684:	00c00d84 	movi	r3,54
 8128688:	1887c83a 	sub	r3,r3,r2
 812868c:	003d6906 	br	8127c34 <_dtoa_r+0xafc>
 8128690:	01800044 	movi	r6,1
 8128694:	3021883a 	mov	r16,r6
 8128698:	d9800f15 	stw	r6,60(sp)
 812869c:	d9802615 	stw	r6,152(sp)
 81286a0:	d9800e15 	stw	r6,56(sp)
 81286a4:	003b9306 	br	81274f4 <_dtoa_r+0x3bc>
 81286a8:	b021883a 	mov	r16,r22
 81286ac:	dd800f15 	stw	r22,60(sp)
 81286b0:	003b9006 	br	81274f4 <_dtoa_r+0x3bc>
 81286b4:	103e221e 	bne	r2,zero,8127f40 <_dtoa_r+0xe08>
 81286b8:	b880004c 	andi	r2,r23,1
 81286bc:	1005003a 	cmpeq	r2,r2,zero
 81286c0:	103e1f1e 	bne	r2,zero,8127f40 <_dtoa_r+0xe08>
 81286c4:	003e1b06 	br	8127f34 <_dtoa_r+0xdfc>
 81286c8:	d9001617 	ldw	r4,88(sp)
 81286cc:	980b883a 	mov	r5,r19
 81286d0:	01800284 	movi	r6,10
 81286d4:	000f883a 	mov	r7,zero
 81286d8:	812af800 	call	812af80 <__multadd>
 81286dc:	d8c00e17 	ldw	r3,56(sp)
 81286e0:	1027883a 	mov	r19,r2
 81286e4:	d8c00f15 	stw	r3,60(sp)
 81286e8:	003cd306 	br	8127a38 <_dtoa_r+0x900>

081286ec <_fflush_r>:
 81286ec:	defffb04 	addi	sp,sp,-20
 81286f0:	dcc00315 	stw	r19,12(sp)
 81286f4:	dc800215 	stw	r18,8(sp)
 81286f8:	dfc00415 	stw	ra,16(sp)
 81286fc:	dc400115 	stw	r17,4(sp)
 8128700:	dc000015 	stw	r16,0(sp)
 8128704:	2027883a 	mov	r19,r4
 8128708:	2825883a 	mov	r18,r5
 812870c:	20000226 	beq	r4,zero,8128718 <_fflush_r+0x2c>
 8128710:	20800e17 	ldw	r2,56(r4)
 8128714:	10005626 	beq	r2,zero,8128870 <_fflush_r+0x184>
 8128718:	9100030b 	ldhu	r4,12(r18)
 812871c:	20ffffcc 	andi	r3,r4,65535
 8128720:	18e0001c 	xori	r3,r3,32768
 8128724:	18e00004 	addi	r3,r3,-32768
 8128728:	1880020c 	andi	r2,r3,8
 812872c:	1000261e 	bne	r2,zero,81287c8 <_fflush_r+0xdc>
 8128730:	90c00117 	ldw	r3,4(r18)
 8128734:	20820014 	ori	r2,r4,2048
 8128738:	9080030d 	sth	r2,12(r18)
 812873c:	1009883a 	mov	r4,r2
 8128740:	00c0400e 	bge	zero,r3,8128844 <_fflush_r+0x158>
 8128744:	92000a17 	ldw	r8,40(r18)
 8128748:	40004026 	beq	r8,zero,812884c <_fflush_r+0x160>
 812874c:	2084000c 	andi	r2,r4,4096
 8128750:	10005326 	beq	r2,zero,81288a0 <_fflush_r+0x1b4>
 8128754:	94001417 	ldw	r16,80(r18)
 8128758:	9080030b 	ldhu	r2,12(r18)
 812875c:	1080010c 	andi	r2,r2,4
 8128760:	1000481e 	bne	r2,zero,8128884 <_fflush_r+0x198>
 8128764:	91400717 	ldw	r5,28(r18)
 8128768:	9809883a 	mov	r4,r19
 812876c:	800d883a 	mov	r6,r16
 8128770:	000f883a 	mov	r7,zero
 8128774:	403ee83a 	callr	r8
 8128778:	8080261e 	bne	r16,r2,8128814 <_fflush_r+0x128>
 812877c:	9080030b 	ldhu	r2,12(r18)
 8128780:	91000417 	ldw	r4,16(r18)
 8128784:	90000115 	stw	zero,4(r18)
 8128788:	10bdffcc 	andi	r2,r2,63487
 812878c:	10ffffcc 	andi	r3,r2,65535
 8128790:	18c4000c 	andi	r3,r3,4096
 8128794:	9080030d 	sth	r2,12(r18)
 8128798:	91000015 	stw	r4,0(r18)
 812879c:	18002b26 	beq	r3,zero,812884c <_fflush_r+0x160>
 81287a0:	0007883a 	mov	r3,zero
 81287a4:	1805883a 	mov	r2,r3
 81287a8:	94001415 	stw	r16,80(r18)
 81287ac:	dfc00417 	ldw	ra,16(sp)
 81287b0:	dcc00317 	ldw	r19,12(sp)
 81287b4:	dc800217 	ldw	r18,8(sp)
 81287b8:	dc400117 	ldw	r17,4(sp)
 81287bc:	dc000017 	ldw	r16,0(sp)
 81287c0:	dec00504 	addi	sp,sp,20
 81287c4:	f800283a 	ret
 81287c8:	94400417 	ldw	r17,16(r18)
 81287cc:	88001f26 	beq	r17,zero,812884c <_fflush_r+0x160>
 81287d0:	90800017 	ldw	r2,0(r18)
 81287d4:	18c000cc 	andi	r3,r3,3
 81287d8:	94400015 	stw	r17,0(r18)
 81287dc:	1461c83a 	sub	r16,r2,r17
 81287e0:	18002526 	beq	r3,zero,8128878 <_fflush_r+0x18c>
 81287e4:	0005883a 	mov	r2,zero
 81287e8:	90800215 	stw	r2,8(r18)
 81287ec:	0400170e 	bge	zero,r16,812884c <_fflush_r+0x160>
 81287f0:	90c00917 	ldw	r3,36(r18)
 81287f4:	91400717 	ldw	r5,28(r18)
 81287f8:	880d883a 	mov	r6,r17
 81287fc:	800f883a 	mov	r7,r16
 8128800:	9809883a 	mov	r4,r19
 8128804:	183ee83a 	callr	r3
 8128808:	88a3883a 	add	r17,r17,r2
 812880c:	80a1c83a 	sub	r16,r16,r2
 8128810:	00bff616 	blt	zero,r2,81287ec <_fflush_r+0x100>
 8128814:	9080030b 	ldhu	r2,12(r18)
 8128818:	00ffffc4 	movi	r3,-1
 812881c:	10801014 	ori	r2,r2,64
 8128820:	9080030d 	sth	r2,12(r18)
 8128824:	1805883a 	mov	r2,r3
 8128828:	dfc00417 	ldw	ra,16(sp)
 812882c:	dcc00317 	ldw	r19,12(sp)
 8128830:	dc800217 	ldw	r18,8(sp)
 8128834:	dc400117 	ldw	r17,4(sp)
 8128838:	dc000017 	ldw	r16,0(sp)
 812883c:	dec00504 	addi	sp,sp,20
 8128840:	f800283a 	ret
 8128844:	90800f17 	ldw	r2,60(r18)
 8128848:	00bfbe16 	blt	zero,r2,8128744 <_fflush_r+0x58>
 812884c:	0007883a 	mov	r3,zero
 8128850:	1805883a 	mov	r2,r3
 8128854:	dfc00417 	ldw	ra,16(sp)
 8128858:	dcc00317 	ldw	r19,12(sp)
 812885c:	dc800217 	ldw	r18,8(sp)
 8128860:	dc400117 	ldw	r17,4(sp)
 8128864:	dc000017 	ldw	r16,0(sp)
 8128868:	dec00504 	addi	sp,sp,20
 812886c:	f800283a 	ret
 8128870:	81289840 	call	8128984 <__sinit>
 8128874:	003fa806 	br	8128718 <_fflush_r+0x2c>
 8128878:	90800517 	ldw	r2,20(r18)
 812887c:	90800215 	stw	r2,8(r18)
 8128880:	003fda06 	br	81287ec <_fflush_r+0x100>
 8128884:	90800117 	ldw	r2,4(r18)
 8128888:	90c00c17 	ldw	r3,48(r18)
 812888c:	80a1c83a 	sub	r16,r16,r2
 8128890:	183fb426 	beq	r3,zero,8128764 <_fflush_r+0x78>
 8128894:	90800f17 	ldw	r2,60(r18)
 8128898:	80a1c83a 	sub	r16,r16,r2
 812889c:	003fb106 	br	8128764 <_fflush_r+0x78>
 81288a0:	91400717 	ldw	r5,28(r18)
 81288a4:	9809883a 	mov	r4,r19
 81288a8:	000d883a 	mov	r6,zero
 81288ac:	01c00044 	movi	r7,1
 81288b0:	403ee83a 	callr	r8
 81288b4:	1021883a 	mov	r16,r2
 81288b8:	00bfffc4 	movi	r2,-1
 81288bc:	80800226 	beq	r16,r2,81288c8 <_fflush_r+0x1dc>
 81288c0:	92000a17 	ldw	r8,40(r18)
 81288c4:	003fa406 	br	8128758 <_fflush_r+0x6c>
 81288c8:	98c00017 	ldw	r3,0(r19)
 81288cc:	00800744 	movi	r2,29
 81288d0:	18bfde26 	beq	r3,r2,812884c <_fflush_r+0x160>
 81288d4:	9080030b 	ldhu	r2,12(r18)
 81288d8:	8007883a 	mov	r3,r16
 81288dc:	10801014 	ori	r2,r2,64
 81288e0:	9080030d 	sth	r2,12(r18)
 81288e4:	003fcf06 	br	8128824 <_fflush_r+0x138>

081288e8 <fflush>:
 81288e8:	014204f4 	movhi	r5,2067
 81288ec:	2961bb04 	addi	r5,r5,-30996
 81288f0:	2007883a 	mov	r3,r4
 81288f4:	20000526 	beq	r4,zero,812890c <fflush+0x24>
 81288f8:	008204f4 	movhi	r2,2067
 81288fc:	108e5204 	addi	r2,r2,14664
 8128900:	11000017 	ldw	r4,0(r2)
 8128904:	180b883a 	mov	r5,r3
 8128908:	81286ec1 	jmpi	81286ec <_fflush_r>
 812890c:	008204f4 	movhi	r2,2067
 8128910:	108e5304 	addi	r2,r2,14668
 8128914:	11000017 	ldw	r4,0(r2)
 8128918:	81294b81 	jmpi	81294b8 <_fwalk_reent>

0812891c <std>:
 812891c:	008204f4 	movhi	r2,2067
 8128920:	10ae5904 	addi	r2,r2,-18076
 8128924:	20800b15 	stw	r2,44(r4)
 8128928:	008204f4 	movhi	r2,2067
 812892c:	10ae9404 	addi	r2,r2,-17840
 8128930:	20800815 	stw	r2,32(r4)
 8128934:	00c204f4 	movhi	r3,2067
 8128938:	18ee7504 	addi	r3,r3,-17964
 812893c:	008204f4 	movhi	r2,2067
 8128940:	10ae5b04 	addi	r2,r2,-18068
 8128944:	2140030d 	sth	r5,12(r4)
 8128948:	2180038d 	sth	r6,14(r4)
 812894c:	20c00915 	stw	r3,36(r4)
 8128950:	20800a15 	stw	r2,40(r4)
 8128954:	20000015 	stw	zero,0(r4)
 8128958:	20000115 	stw	zero,4(r4)
 812895c:	20000215 	stw	zero,8(r4)
 8128960:	20000415 	stw	zero,16(r4)
 8128964:	20000515 	stw	zero,20(r4)
 8128968:	20000615 	stw	zero,24(r4)
 812896c:	21000715 	stw	r4,28(r4)
 8128970:	f800283a 	ret

08128974 <__sfp_lock_acquire>:
 8128974:	f800283a 	ret

08128978 <__sfp_lock_release>:
 8128978:	f800283a 	ret

0812897c <__sinit_lock_acquire>:
 812897c:	f800283a 	ret

08128980 <__sinit_lock_release>:
 8128980:	f800283a 	ret

08128984 <__sinit>:
 8128984:	20800e17 	ldw	r2,56(r4)
 8128988:	defffd04 	addi	sp,sp,-12
 812898c:	dc400115 	stw	r17,4(sp)
 8128990:	dc000015 	stw	r16,0(sp)
 8128994:	dfc00215 	stw	ra,8(sp)
 8128998:	04400044 	movi	r17,1
 812899c:	01400104 	movi	r5,4
 81289a0:	000d883a 	mov	r6,zero
 81289a4:	2021883a 	mov	r16,r4
 81289a8:	2200bb04 	addi	r8,r4,748
 81289ac:	200f883a 	mov	r7,r4
 81289b0:	10000526 	beq	r2,zero,81289c8 <__sinit+0x44>
 81289b4:	dfc00217 	ldw	ra,8(sp)
 81289b8:	dc400117 	ldw	r17,4(sp)
 81289bc:	dc000017 	ldw	r16,0(sp)
 81289c0:	dec00304 	addi	sp,sp,12
 81289c4:	f800283a 	ret
 81289c8:	21000117 	ldw	r4,4(r4)
 81289cc:	008204f4 	movhi	r2,2067
 81289d0:	10a29a04 	addi	r2,r2,-30104
 81289d4:	00c000c4 	movi	r3,3
 81289d8:	80800f15 	stw	r2,60(r16)
 81289dc:	80c0b915 	stw	r3,740(r16)
 81289e0:	8200ba15 	stw	r8,744(r16)
 81289e4:	84400e15 	stw	r17,56(r16)
 81289e8:	8000b815 	stw	zero,736(r16)
 81289ec:	812891c0 	call	812891c <std>
 81289f0:	81000217 	ldw	r4,8(r16)
 81289f4:	880d883a 	mov	r6,r17
 81289f8:	800f883a 	mov	r7,r16
 81289fc:	01400284 	movi	r5,10
 8128a00:	812891c0 	call	812891c <std>
 8128a04:	81000317 	ldw	r4,12(r16)
 8128a08:	800f883a 	mov	r7,r16
 8128a0c:	01400484 	movi	r5,18
 8128a10:	01800084 	movi	r6,2
 8128a14:	dfc00217 	ldw	ra,8(sp)
 8128a18:	dc400117 	ldw	r17,4(sp)
 8128a1c:	dc000017 	ldw	r16,0(sp)
 8128a20:	dec00304 	addi	sp,sp,12
 8128a24:	812891c1 	jmpi	812891c <std>

08128a28 <__fp_lock>:
 8128a28:	0005883a 	mov	r2,zero
 8128a2c:	f800283a 	ret

08128a30 <__fp_unlock>:
 8128a30:	0005883a 	mov	r2,zero
 8128a34:	f800283a 	ret

08128a38 <__fp_unlock_all>:
 8128a38:	008204f4 	movhi	r2,2067
 8128a3c:	108e5204 	addi	r2,r2,14664
 8128a40:	11000017 	ldw	r4,0(r2)
 8128a44:	014204f4 	movhi	r5,2067
 8128a48:	29628c04 	addi	r5,r5,-30160
 8128a4c:	81295801 	jmpi	8129580 <_fwalk>

08128a50 <__fp_lock_all>:
 8128a50:	008204f4 	movhi	r2,2067
 8128a54:	108e5204 	addi	r2,r2,14664
 8128a58:	11000017 	ldw	r4,0(r2)
 8128a5c:	014204f4 	movhi	r5,2067
 8128a60:	29628a04 	addi	r5,r5,-30168
 8128a64:	81295801 	jmpi	8129580 <_fwalk>

08128a68 <_cleanup_r>:
 8128a68:	014204f4 	movhi	r5,2067
 8128a6c:	296f8604 	addi	r5,r5,-16872
 8128a70:	81295801 	jmpi	8129580 <_fwalk>

08128a74 <_cleanup>:
 8128a74:	008204f4 	movhi	r2,2067
 8128a78:	108e5304 	addi	r2,r2,14668
 8128a7c:	11000017 	ldw	r4,0(r2)
 8128a80:	8128a681 	jmpi	8128a68 <_cleanup_r>

08128a84 <__sfmoreglue>:
 8128a84:	defffc04 	addi	sp,sp,-16
 8128a88:	dc400115 	stw	r17,4(sp)
 8128a8c:	2c401724 	muli	r17,r5,92
 8128a90:	dc800215 	stw	r18,8(sp)
 8128a94:	2825883a 	mov	r18,r5
 8128a98:	89400304 	addi	r5,r17,12
 8128a9c:	dc000015 	stw	r16,0(sp)
 8128aa0:	dfc00315 	stw	ra,12(sp)
 8128aa4:	81298900 	call	8129890 <_malloc_r>
 8128aa8:	0021883a 	mov	r16,zero
 8128aac:	880d883a 	mov	r6,r17
 8128ab0:	000b883a 	mov	r5,zero
 8128ab4:	10000626 	beq	r2,zero,8128ad0 <__sfmoreglue+0x4c>
 8128ab8:	11000304 	addi	r4,r2,12
 8128abc:	14800115 	stw	r18,4(r2)
 8128ac0:	10000015 	stw	zero,0(r2)
 8128ac4:	11000215 	stw	r4,8(r2)
 8128ac8:	1021883a 	mov	r16,r2
 8128acc:	812a2340 	call	812a234 <memset>
 8128ad0:	8005883a 	mov	r2,r16
 8128ad4:	dfc00317 	ldw	ra,12(sp)
 8128ad8:	dc800217 	ldw	r18,8(sp)
 8128adc:	dc400117 	ldw	r17,4(sp)
 8128ae0:	dc000017 	ldw	r16,0(sp)
 8128ae4:	dec00404 	addi	sp,sp,16
 8128ae8:	f800283a 	ret

08128aec <__sfp>:
 8128aec:	defffd04 	addi	sp,sp,-12
 8128af0:	008204f4 	movhi	r2,2067
 8128af4:	108e5304 	addi	r2,r2,14668
 8128af8:	dc000015 	stw	r16,0(sp)
 8128afc:	14000017 	ldw	r16,0(r2)
 8128b00:	dc400115 	stw	r17,4(sp)
 8128b04:	dfc00215 	stw	ra,8(sp)
 8128b08:	80800e17 	ldw	r2,56(r16)
 8128b0c:	2023883a 	mov	r17,r4
 8128b10:	10002626 	beq	r2,zero,8128bac <__sfp+0xc0>
 8128b14:	8400b804 	addi	r16,r16,736
 8128b18:	80800117 	ldw	r2,4(r16)
 8128b1c:	81000217 	ldw	r4,8(r16)
 8128b20:	10ffffc4 	addi	r3,r2,-1
 8128b24:	18000916 	blt	r3,zero,8128b4c <__sfp+0x60>
 8128b28:	2080030f 	ldh	r2,12(r4)
 8128b2c:	10000b26 	beq	r2,zero,8128b5c <__sfp+0x70>
 8128b30:	017fffc4 	movi	r5,-1
 8128b34:	00000206 	br	8128b40 <__sfp+0x54>
 8128b38:	2080030f 	ldh	r2,12(r4)
 8128b3c:	10000726 	beq	r2,zero,8128b5c <__sfp+0x70>
 8128b40:	18ffffc4 	addi	r3,r3,-1
 8128b44:	21001704 	addi	r4,r4,92
 8128b48:	197ffb1e 	bne	r3,r5,8128b38 <__sfp+0x4c>
 8128b4c:	80800017 	ldw	r2,0(r16)
 8128b50:	10001926 	beq	r2,zero,8128bb8 <__sfp+0xcc>
 8128b54:	1021883a 	mov	r16,r2
 8128b58:	003fef06 	br	8128b18 <__sfp+0x2c>
 8128b5c:	00bfffc4 	movi	r2,-1
 8128b60:	00c00044 	movi	r3,1
 8128b64:	2080038d 	sth	r2,14(r4)
 8128b68:	20c0030d 	sth	r3,12(r4)
 8128b6c:	20000015 	stw	zero,0(r4)
 8128b70:	20000215 	stw	zero,8(r4)
 8128b74:	20000115 	stw	zero,4(r4)
 8128b78:	20000415 	stw	zero,16(r4)
 8128b7c:	20000515 	stw	zero,20(r4)
 8128b80:	20000615 	stw	zero,24(r4)
 8128b84:	20000c15 	stw	zero,48(r4)
 8128b88:	20000d15 	stw	zero,52(r4)
 8128b8c:	20001115 	stw	zero,68(r4)
 8128b90:	20001215 	stw	zero,72(r4)
 8128b94:	2005883a 	mov	r2,r4
 8128b98:	dfc00217 	ldw	ra,8(sp)
 8128b9c:	dc400117 	ldw	r17,4(sp)
 8128ba0:	dc000017 	ldw	r16,0(sp)
 8128ba4:	dec00304 	addi	sp,sp,12
 8128ba8:	f800283a 	ret
 8128bac:	8009883a 	mov	r4,r16
 8128bb0:	81289840 	call	8128984 <__sinit>
 8128bb4:	003fd706 	br	8128b14 <__sfp+0x28>
 8128bb8:	8809883a 	mov	r4,r17
 8128bbc:	01400104 	movi	r5,4
 8128bc0:	8128a840 	call	8128a84 <__sfmoreglue>
 8128bc4:	80800015 	stw	r2,0(r16)
 8128bc8:	103fe21e 	bne	r2,zero,8128b54 <__sfp+0x68>
 8128bcc:	00800304 	movi	r2,12
 8128bd0:	0009883a 	mov	r4,zero
 8128bd4:	88800015 	stw	r2,0(r17)
 8128bd8:	003fee06 	br	8128b94 <__sfp+0xa8>

08128bdc <_malloc_trim_r>:
 8128bdc:	defffb04 	addi	sp,sp,-20
 8128be0:	dcc00315 	stw	r19,12(sp)
 8128be4:	04c204f4 	movhi	r19,2067
 8128be8:	9cc87904 	addi	r19,r19,8676
 8128bec:	dc800215 	stw	r18,8(sp)
 8128bf0:	dc400115 	stw	r17,4(sp)
 8128bf4:	dc000015 	stw	r16,0(sp)
 8128bf8:	2823883a 	mov	r17,r5
 8128bfc:	2025883a 	mov	r18,r4
 8128c00:	dfc00415 	stw	ra,16(sp)
 8128c04:	812d5040 	call	812d504 <__malloc_lock>
 8128c08:	98800217 	ldw	r2,8(r19)
 8128c0c:	9009883a 	mov	r4,r18
 8128c10:	000b883a 	mov	r5,zero
 8128c14:	10c00117 	ldw	r3,4(r2)
 8128c18:	00bfff04 	movi	r2,-4
 8128c1c:	18a0703a 	and	r16,r3,r2
 8128c20:	8463c83a 	sub	r17,r16,r17
 8128c24:	8c43fbc4 	addi	r17,r17,4079
 8128c28:	8822d33a 	srli	r17,r17,12
 8128c2c:	0083ffc4 	movi	r2,4095
 8128c30:	8c7fffc4 	addi	r17,r17,-1
 8128c34:	8822933a 	slli	r17,r17,12
 8128c38:	1440060e 	bge	r2,r17,8128c54 <_malloc_trim_r+0x78>
 8128c3c:	812b8f40 	call	812b8f4 <_sbrk_r>
 8128c40:	98c00217 	ldw	r3,8(r19)
 8128c44:	9009883a 	mov	r4,r18
 8128c48:	044bc83a 	sub	r5,zero,r17
 8128c4c:	80c7883a 	add	r3,r16,r3
 8128c50:	10c00926 	beq	r2,r3,8128c78 <_malloc_trim_r+0x9c>
 8128c54:	812d5240 	call	812d524 <__malloc_unlock>
 8128c58:	0005883a 	mov	r2,zero
 8128c5c:	dfc00417 	ldw	ra,16(sp)
 8128c60:	dcc00317 	ldw	r19,12(sp)
 8128c64:	dc800217 	ldw	r18,8(sp)
 8128c68:	dc400117 	ldw	r17,4(sp)
 8128c6c:	dc000017 	ldw	r16,0(sp)
 8128c70:	dec00504 	addi	sp,sp,20
 8128c74:	f800283a 	ret
 8128c78:	9009883a 	mov	r4,r18
 8128c7c:	812b8f40 	call	812b8f4 <_sbrk_r>
 8128c80:	844dc83a 	sub	r6,r16,r17
 8128c84:	00ffffc4 	movi	r3,-1
 8128c88:	9009883a 	mov	r4,r18
 8128c8c:	000b883a 	mov	r5,zero
 8128c90:	01c204f4 	movhi	r7,2067
 8128c94:	39d56b04 	addi	r7,r7,21932
 8128c98:	31800054 	ori	r6,r6,1
 8128c9c:	10c00926 	beq	r2,r3,8128cc4 <_malloc_trim_r+0xe8>
 8128ca0:	38800017 	ldw	r2,0(r7)
 8128ca4:	98c00217 	ldw	r3,8(r19)
 8128ca8:	9009883a 	mov	r4,r18
 8128cac:	1445c83a 	sub	r2,r2,r17
 8128cb0:	38800015 	stw	r2,0(r7)
 8128cb4:	19800115 	stw	r6,4(r3)
 8128cb8:	812d5240 	call	812d524 <__malloc_unlock>
 8128cbc:	00800044 	movi	r2,1
 8128cc0:	003fe606 	br	8128c5c <_malloc_trim_r+0x80>
 8128cc4:	812b8f40 	call	812b8f4 <_sbrk_r>
 8128cc8:	99800217 	ldw	r6,8(r19)
 8128ccc:	100f883a 	mov	r7,r2
 8128cd0:	9009883a 	mov	r4,r18
 8128cd4:	1187c83a 	sub	r3,r2,r6
 8128cd8:	008003c4 	movi	r2,15
 8128cdc:	19400054 	ori	r5,r3,1
 8128ce0:	10ffdc0e 	bge	r2,r3,8128c54 <_malloc_trim_r+0x78>
 8128ce4:	008204f4 	movhi	r2,2067
 8128ce8:	108e5704 	addi	r2,r2,14684
 8128cec:	10c00017 	ldw	r3,0(r2)
 8128cf0:	008204f4 	movhi	r2,2067
 8128cf4:	10956b04 	addi	r2,r2,21932
 8128cf8:	31400115 	stw	r5,4(r6)
 8128cfc:	38c7c83a 	sub	r3,r7,r3
 8128d00:	10c00015 	stw	r3,0(r2)
 8128d04:	003fd306 	br	8128c54 <_malloc_trim_r+0x78>

08128d08 <_free_r>:
 8128d08:	defffd04 	addi	sp,sp,-12
 8128d0c:	dc400115 	stw	r17,4(sp)
 8128d10:	dc000015 	stw	r16,0(sp)
 8128d14:	dfc00215 	stw	ra,8(sp)
 8128d18:	2821883a 	mov	r16,r5
 8128d1c:	2023883a 	mov	r17,r4
 8128d20:	28005a26 	beq	r5,zero,8128e8c <_free_r+0x184>
 8128d24:	812d5040 	call	812d504 <__malloc_lock>
 8128d28:	823ffe04 	addi	r8,r16,-8
 8128d2c:	41400117 	ldw	r5,4(r8)
 8128d30:	00bfff84 	movi	r2,-2
 8128d34:	028204f4 	movhi	r10,2067
 8128d38:	52887904 	addi	r10,r10,8676
 8128d3c:	288e703a 	and	r7,r5,r2
 8128d40:	41cd883a 	add	r6,r8,r7
 8128d44:	30c00117 	ldw	r3,4(r6)
 8128d48:	51000217 	ldw	r4,8(r10)
 8128d4c:	00bfff04 	movi	r2,-4
 8128d50:	1892703a 	and	r9,r3,r2
 8128d54:	5017883a 	mov	r11,r10
 8128d58:	31006726 	beq	r6,r4,8128ef8 <_free_r+0x1f0>
 8128d5c:	2880004c 	andi	r2,r5,1
 8128d60:	1005003a 	cmpeq	r2,r2,zero
 8128d64:	32400115 	stw	r9,4(r6)
 8128d68:	10001a1e 	bne	r2,zero,8128dd4 <_free_r+0xcc>
 8128d6c:	000b883a 	mov	r5,zero
 8128d70:	3247883a 	add	r3,r6,r9
 8128d74:	18800117 	ldw	r2,4(r3)
 8128d78:	1080004c 	andi	r2,r2,1
 8128d7c:	1000231e 	bne	r2,zero,8128e0c <_free_r+0x104>
 8128d80:	280ac03a 	cmpne	r5,r5,zero
 8128d84:	3a4f883a 	add	r7,r7,r9
 8128d88:	2800451e 	bne	r5,zero,8128ea0 <_free_r+0x198>
 8128d8c:	31000217 	ldw	r4,8(r6)
 8128d90:	008204f4 	movhi	r2,2067
 8128d94:	10887b04 	addi	r2,r2,8684
 8128d98:	20807b26 	beq	r4,r2,8128f88 <_free_r+0x280>
 8128d9c:	30800317 	ldw	r2,12(r6)
 8128da0:	3a07883a 	add	r3,r7,r8
 8128da4:	19c00015 	stw	r7,0(r3)
 8128da8:	11000215 	stw	r4,8(r2)
 8128dac:	20800315 	stw	r2,12(r4)
 8128db0:	38800054 	ori	r2,r7,1
 8128db4:	40800115 	stw	r2,4(r8)
 8128db8:	28001a26 	beq	r5,zero,8128e24 <_free_r+0x11c>
 8128dbc:	8809883a 	mov	r4,r17
 8128dc0:	dfc00217 	ldw	ra,8(sp)
 8128dc4:	dc400117 	ldw	r17,4(sp)
 8128dc8:	dc000017 	ldw	r16,0(sp)
 8128dcc:	dec00304 	addi	sp,sp,12
 8128dd0:	812d5241 	jmpi	812d524 <__malloc_unlock>
 8128dd4:	80bffe17 	ldw	r2,-8(r16)
 8128dd8:	50c00204 	addi	r3,r10,8
 8128ddc:	4091c83a 	sub	r8,r8,r2
 8128de0:	41000217 	ldw	r4,8(r8)
 8128de4:	388f883a 	add	r7,r7,r2
 8128de8:	20c06126 	beq	r4,r3,8128f70 <_free_r+0x268>
 8128dec:	40800317 	ldw	r2,12(r8)
 8128df0:	3247883a 	add	r3,r6,r9
 8128df4:	000b883a 	mov	r5,zero
 8128df8:	11000215 	stw	r4,8(r2)
 8128dfc:	20800315 	stw	r2,12(r4)
 8128e00:	18800117 	ldw	r2,4(r3)
 8128e04:	1080004c 	andi	r2,r2,1
 8128e08:	103fdd26 	beq	r2,zero,8128d80 <_free_r+0x78>
 8128e0c:	38800054 	ori	r2,r7,1
 8128e10:	3a07883a 	add	r3,r7,r8
 8128e14:	280ac03a 	cmpne	r5,r5,zero
 8128e18:	40800115 	stw	r2,4(r8)
 8128e1c:	19c00015 	stw	r7,0(r3)
 8128e20:	283fe61e 	bne	r5,zero,8128dbc <_free_r+0xb4>
 8128e24:	00807fc4 	movi	r2,511
 8128e28:	11c01f2e 	bgeu	r2,r7,8128ea8 <_free_r+0x1a0>
 8128e2c:	3806d27a 	srli	r3,r7,9
 8128e30:	1800481e 	bne	r3,zero,8128f54 <_free_r+0x24c>
 8128e34:	3804d0fa 	srli	r2,r7,3
 8128e38:	100690fa 	slli	r3,r2,3
 8128e3c:	1acd883a 	add	r6,r3,r11
 8128e40:	31400217 	ldw	r5,8(r6)
 8128e44:	31405926 	beq	r6,r5,8128fac <_free_r+0x2a4>
 8128e48:	28800117 	ldw	r2,4(r5)
 8128e4c:	00ffff04 	movi	r3,-4
 8128e50:	10c4703a 	and	r2,r2,r3
 8128e54:	3880022e 	bgeu	r7,r2,8128e60 <_free_r+0x158>
 8128e58:	29400217 	ldw	r5,8(r5)
 8128e5c:	317ffa1e 	bne	r6,r5,8128e48 <_free_r+0x140>
 8128e60:	29800317 	ldw	r6,12(r5)
 8128e64:	41800315 	stw	r6,12(r8)
 8128e68:	41400215 	stw	r5,8(r8)
 8128e6c:	8809883a 	mov	r4,r17
 8128e70:	2a000315 	stw	r8,12(r5)
 8128e74:	32000215 	stw	r8,8(r6)
 8128e78:	dfc00217 	ldw	ra,8(sp)
 8128e7c:	dc400117 	ldw	r17,4(sp)
 8128e80:	dc000017 	ldw	r16,0(sp)
 8128e84:	dec00304 	addi	sp,sp,12
 8128e88:	812d5241 	jmpi	812d524 <__malloc_unlock>
 8128e8c:	dfc00217 	ldw	ra,8(sp)
 8128e90:	dc400117 	ldw	r17,4(sp)
 8128e94:	dc000017 	ldw	r16,0(sp)
 8128e98:	dec00304 	addi	sp,sp,12
 8128e9c:	f800283a 	ret
 8128ea0:	31000217 	ldw	r4,8(r6)
 8128ea4:	003fbd06 	br	8128d9c <_free_r+0x94>
 8128ea8:	3806d0fa 	srli	r3,r7,3
 8128eac:	00800044 	movi	r2,1
 8128eb0:	51400117 	ldw	r5,4(r10)
 8128eb4:	180890fa 	slli	r4,r3,3
 8128eb8:	1807d0ba 	srai	r3,r3,2
 8128ebc:	22c9883a 	add	r4,r4,r11
 8128ec0:	21800217 	ldw	r6,8(r4)
 8128ec4:	10c4983a 	sll	r2,r2,r3
 8128ec8:	41000315 	stw	r4,12(r8)
 8128ecc:	41800215 	stw	r6,8(r8)
 8128ed0:	288ab03a 	or	r5,r5,r2
 8128ed4:	22000215 	stw	r8,8(r4)
 8128ed8:	8809883a 	mov	r4,r17
 8128edc:	51400115 	stw	r5,4(r10)
 8128ee0:	32000315 	stw	r8,12(r6)
 8128ee4:	dfc00217 	ldw	ra,8(sp)
 8128ee8:	dc400117 	ldw	r17,4(sp)
 8128eec:	dc000017 	ldw	r16,0(sp)
 8128ef0:	dec00304 	addi	sp,sp,12
 8128ef4:	812d5241 	jmpi	812d524 <__malloc_unlock>
 8128ef8:	2880004c 	andi	r2,r5,1
 8128efc:	3a4d883a 	add	r6,r7,r9
 8128f00:	1000071e 	bne	r2,zero,8128f20 <_free_r+0x218>
 8128f04:	80bffe17 	ldw	r2,-8(r16)
 8128f08:	4091c83a 	sub	r8,r8,r2
 8128f0c:	41000317 	ldw	r4,12(r8)
 8128f10:	40c00217 	ldw	r3,8(r8)
 8128f14:	308d883a 	add	r6,r6,r2
 8128f18:	20c00215 	stw	r3,8(r4)
 8128f1c:	19000315 	stw	r4,12(r3)
 8128f20:	008204f4 	movhi	r2,2067
 8128f24:	108e5604 	addi	r2,r2,14680
 8128f28:	11000017 	ldw	r4,0(r2)
 8128f2c:	30c00054 	ori	r3,r6,1
 8128f30:	52000215 	stw	r8,8(r10)
 8128f34:	40c00115 	stw	r3,4(r8)
 8128f38:	313fa036 	bltu	r6,r4,8128dbc <_free_r+0xb4>
 8128f3c:	008204f4 	movhi	r2,2067
 8128f40:	10956104 	addi	r2,r2,21892
 8128f44:	11400017 	ldw	r5,0(r2)
 8128f48:	8809883a 	mov	r4,r17
 8128f4c:	8128bdc0 	call	8128bdc <_malloc_trim_r>
 8128f50:	003f9a06 	br	8128dbc <_free_r+0xb4>
 8128f54:	00800104 	movi	r2,4
 8128f58:	10c0072e 	bgeu	r2,r3,8128f78 <_free_r+0x270>
 8128f5c:	00800504 	movi	r2,20
 8128f60:	10c01936 	bltu	r2,r3,8128fc8 <_free_r+0x2c0>
 8128f64:	188016c4 	addi	r2,r3,91
 8128f68:	100690fa 	slli	r3,r2,3
 8128f6c:	003fb306 	br	8128e3c <_free_r+0x134>
 8128f70:	01400044 	movi	r5,1
 8128f74:	003f7e06 	br	8128d70 <_free_r+0x68>
 8128f78:	3804d1ba 	srli	r2,r7,6
 8128f7c:	10800e04 	addi	r2,r2,56
 8128f80:	100690fa 	slli	r3,r2,3
 8128f84:	003fad06 	br	8128e3c <_free_r+0x134>
 8128f88:	22000315 	stw	r8,12(r4)
 8128f8c:	22000215 	stw	r8,8(r4)
 8128f90:	3a05883a 	add	r2,r7,r8
 8128f94:	38c00054 	ori	r3,r7,1
 8128f98:	11c00015 	stw	r7,0(r2)
 8128f9c:	41000215 	stw	r4,8(r8)
 8128fa0:	40c00115 	stw	r3,4(r8)
 8128fa4:	41000315 	stw	r4,12(r8)
 8128fa8:	003f8406 	br	8128dbc <_free_r+0xb4>
 8128fac:	1005d0ba 	srai	r2,r2,2
 8128fb0:	00c00044 	movi	r3,1
 8128fb4:	51000117 	ldw	r4,4(r10)
 8128fb8:	1886983a 	sll	r3,r3,r2
 8128fbc:	20c8b03a 	or	r4,r4,r3
 8128fc0:	51000115 	stw	r4,4(r10)
 8128fc4:	003fa706 	br	8128e64 <_free_r+0x15c>
 8128fc8:	00801504 	movi	r2,84
 8128fcc:	10c00436 	bltu	r2,r3,8128fe0 <_free_r+0x2d8>
 8128fd0:	3804d33a 	srli	r2,r7,12
 8128fd4:	10801b84 	addi	r2,r2,110
 8128fd8:	100690fa 	slli	r3,r2,3
 8128fdc:	003f9706 	br	8128e3c <_free_r+0x134>
 8128fe0:	00805504 	movi	r2,340
 8128fe4:	10c00436 	bltu	r2,r3,8128ff8 <_free_r+0x2f0>
 8128fe8:	3804d3fa 	srli	r2,r7,15
 8128fec:	10801dc4 	addi	r2,r2,119
 8128ff0:	100690fa 	slli	r3,r2,3
 8128ff4:	003f9106 	br	8128e3c <_free_r+0x134>
 8128ff8:	00815504 	movi	r2,1364
 8128ffc:	10c0032e 	bgeu	r2,r3,812900c <_free_r+0x304>
 8129000:	00801f84 	movi	r2,126
 8129004:	00c0fc04 	movi	r3,1008
 8129008:	003f8c06 	br	8128e3c <_free_r+0x134>
 812900c:	3804d4ba 	srli	r2,r7,18
 8129010:	10801f04 	addi	r2,r2,124
 8129014:	100690fa 	slli	r3,r2,3
 8129018:	003f8806 	br	8128e3c <_free_r+0x134>

0812901c <__sfvwrite_r>:
 812901c:	30800217 	ldw	r2,8(r6)
 8129020:	defff504 	addi	sp,sp,-44
 8129024:	df000915 	stw	fp,36(sp)
 8129028:	dd800715 	stw	r22,28(sp)
 812902c:	dc800315 	stw	r18,12(sp)
 8129030:	dfc00a15 	stw	ra,40(sp)
 8129034:	ddc00815 	stw	r23,32(sp)
 8129038:	dd400615 	stw	r21,24(sp)
 812903c:	dd000515 	stw	r20,20(sp)
 8129040:	dcc00415 	stw	r19,16(sp)
 8129044:	dc400215 	stw	r17,8(sp)
 8129048:	dc000115 	stw	r16,4(sp)
 812904c:	302d883a 	mov	r22,r6
 8129050:	2039883a 	mov	fp,r4
 8129054:	2825883a 	mov	r18,r5
 8129058:	10001c26 	beq	r2,zero,81290cc <__sfvwrite_r+0xb0>
 812905c:	29c0030b 	ldhu	r7,12(r5)
 8129060:	3880020c 	andi	r2,r7,8
 8129064:	10002726 	beq	r2,zero,8129104 <__sfvwrite_r+0xe8>
 8129068:	28800417 	ldw	r2,16(r5)
 812906c:	10002526 	beq	r2,zero,8129104 <__sfvwrite_r+0xe8>
 8129070:	3880008c 	andi	r2,r7,2
 8129074:	b5400017 	ldw	r21,0(r22)
 8129078:	10002826 	beq	r2,zero,812911c <__sfvwrite_r+0x100>
 812907c:	0021883a 	mov	r16,zero
 8129080:	0023883a 	mov	r17,zero
 8129084:	880d883a 	mov	r6,r17
 8129088:	e009883a 	mov	r4,fp
 812908c:	00810004 	movi	r2,1024
 8129090:	80006e26 	beq	r16,zero,812924c <__sfvwrite_r+0x230>
 8129094:	800f883a 	mov	r7,r16
 8129098:	91400717 	ldw	r5,28(r18)
 812909c:	1400012e 	bgeu	r2,r16,81290a4 <__sfvwrite_r+0x88>
 81290a0:	100f883a 	mov	r7,r2
 81290a4:	90c00917 	ldw	r3,36(r18)
 81290a8:	183ee83a 	callr	r3
 81290ac:	1007883a 	mov	r3,r2
 81290b0:	80a1c83a 	sub	r16,r16,r2
 81290b4:	88a3883a 	add	r17,r17,r2
 81290b8:	00806d0e 	bge	zero,r2,8129270 <__sfvwrite_r+0x254>
 81290bc:	b0800217 	ldw	r2,8(r22)
 81290c0:	10c5c83a 	sub	r2,r2,r3
 81290c4:	b0800215 	stw	r2,8(r22)
 81290c8:	103fee1e 	bne	r2,zero,8129084 <__sfvwrite_r+0x68>
 81290cc:	0009883a 	mov	r4,zero
 81290d0:	2005883a 	mov	r2,r4
 81290d4:	dfc00a17 	ldw	ra,40(sp)
 81290d8:	df000917 	ldw	fp,36(sp)
 81290dc:	ddc00817 	ldw	r23,32(sp)
 81290e0:	dd800717 	ldw	r22,28(sp)
 81290e4:	dd400617 	ldw	r21,24(sp)
 81290e8:	dd000517 	ldw	r20,20(sp)
 81290ec:	dcc00417 	ldw	r19,16(sp)
 81290f0:	dc800317 	ldw	r18,12(sp)
 81290f4:	dc400217 	ldw	r17,8(sp)
 81290f8:	dc000117 	ldw	r16,4(sp)
 81290fc:	dec00b04 	addi	sp,sp,44
 8129100:	f800283a 	ret
 8129104:	8126de40 	call	8126de4 <__swsetup_r>
 8129108:	1000e41e 	bne	r2,zero,812949c <__sfvwrite_r+0x480>
 812910c:	91c0030b 	ldhu	r7,12(r18)
 8129110:	b5400017 	ldw	r21,0(r22)
 8129114:	3880008c 	andi	r2,r7,2
 8129118:	103fd81e 	bne	r2,zero,812907c <__sfvwrite_r+0x60>
 812911c:	3880004c 	andi	r2,r7,1
 8129120:	1005003a 	cmpeq	r2,r2,zero
 8129124:	10005726 	beq	r2,zero,8129284 <__sfvwrite_r+0x268>
 8129128:	0029883a 	mov	r20,zero
 812912c:	002f883a 	mov	r23,zero
 8129130:	a0004226 	beq	r20,zero,812923c <__sfvwrite_r+0x220>
 8129134:	3880800c 	andi	r2,r7,512
 8129138:	94000217 	ldw	r16,8(r18)
 812913c:	10008b26 	beq	r2,zero,812936c <__sfvwrite_r+0x350>
 8129140:	800d883a 	mov	r6,r16
 8129144:	a400a536 	bltu	r20,r16,81293dc <__sfvwrite_r+0x3c0>
 8129148:	3881200c 	andi	r2,r7,1152
 812914c:	10002726 	beq	r2,zero,81291ec <__sfvwrite_r+0x1d0>
 8129150:	90800517 	ldw	r2,20(r18)
 8129154:	92000417 	ldw	r8,16(r18)
 8129158:	91400017 	ldw	r5,0(r18)
 812915c:	1087883a 	add	r3,r2,r2
 8129160:	1887883a 	add	r3,r3,r2
 8129164:	1808d7fa 	srli	r4,r3,31
 8129168:	2a21c83a 	sub	r16,r5,r8
 812916c:	80800044 	addi	r2,r16,1
 8129170:	20c9883a 	add	r4,r4,r3
 8129174:	2027d07a 	srai	r19,r4,1
 8129178:	a085883a 	add	r2,r20,r2
 812917c:	980d883a 	mov	r6,r19
 8129180:	9880022e 	bgeu	r19,r2,812918c <__sfvwrite_r+0x170>
 8129184:	1027883a 	mov	r19,r2
 8129188:	100d883a 	mov	r6,r2
 812918c:	3881000c 	andi	r2,r7,1024
 8129190:	1000b826 	beq	r2,zero,8129474 <__sfvwrite_r+0x458>
 8129194:	300b883a 	mov	r5,r6
 8129198:	e009883a 	mov	r4,fp
 812919c:	81298900 	call	8129890 <_malloc_r>
 81291a0:	10003126 	beq	r2,zero,8129268 <__sfvwrite_r+0x24c>
 81291a4:	91400417 	ldw	r5,16(r18)
 81291a8:	1009883a 	mov	r4,r2
 81291ac:	800d883a 	mov	r6,r16
 81291b0:	1023883a 	mov	r17,r2
 81291b4:	812a0b40 	call	812a0b4 <memcpy>
 81291b8:	90c0030b 	ldhu	r3,12(r18)
 81291bc:	00beffc4 	movi	r2,-1025
 81291c0:	1886703a 	and	r3,r3,r2
 81291c4:	18c02014 	ori	r3,r3,128
 81291c8:	90c0030d 	sth	r3,12(r18)
 81291cc:	9c07c83a 	sub	r3,r19,r16
 81291d0:	8c05883a 	add	r2,r17,r16
 81291d4:	a00d883a 	mov	r6,r20
 81291d8:	a021883a 	mov	r16,r20
 81291dc:	90800015 	stw	r2,0(r18)
 81291e0:	90c00215 	stw	r3,8(r18)
 81291e4:	94400415 	stw	r17,16(r18)
 81291e8:	94c00515 	stw	r19,20(r18)
 81291ec:	91000017 	ldw	r4,0(r18)
 81291f0:	b80b883a 	mov	r5,r23
 81291f4:	a023883a 	mov	r17,r20
 81291f8:	812a1540 	call	812a154 <memmove>
 81291fc:	90c00217 	ldw	r3,8(r18)
 8129200:	90800017 	ldw	r2,0(r18)
 8129204:	a027883a 	mov	r19,r20
 8129208:	1c07c83a 	sub	r3,r3,r16
 812920c:	1405883a 	add	r2,r2,r16
 8129210:	90c00215 	stw	r3,8(r18)
 8129214:	a021883a 	mov	r16,r20
 8129218:	90800015 	stw	r2,0(r18)
 812921c:	b0800217 	ldw	r2,8(r22)
 8129220:	1405c83a 	sub	r2,r2,r16
 8129224:	b0800215 	stw	r2,8(r22)
 8129228:	103fa826 	beq	r2,zero,81290cc <__sfvwrite_r+0xb0>
 812922c:	a469c83a 	sub	r20,r20,r17
 8129230:	91c0030b 	ldhu	r7,12(r18)
 8129234:	bcef883a 	add	r23,r23,r19
 8129238:	a03fbe1e 	bne	r20,zero,8129134 <__sfvwrite_r+0x118>
 812923c:	adc00017 	ldw	r23,0(r21)
 8129240:	ad000117 	ldw	r20,4(r21)
 8129244:	ad400204 	addi	r21,r21,8
 8129248:	003fb906 	br	8129130 <__sfvwrite_r+0x114>
 812924c:	ac400017 	ldw	r17,0(r21)
 8129250:	ac000117 	ldw	r16,4(r21)
 8129254:	ad400204 	addi	r21,r21,8
 8129258:	003f8a06 	br	8129084 <__sfvwrite_r+0x68>
 812925c:	91400417 	ldw	r5,16(r18)
 8129260:	e009883a 	mov	r4,fp
 8129264:	8128d080 	call	8128d08 <_free_r>
 8129268:	00800304 	movi	r2,12
 812926c:	e0800015 	stw	r2,0(fp)
 8129270:	9080030b 	ldhu	r2,12(r18)
 8129274:	013fffc4 	movi	r4,-1
 8129278:	10801014 	ori	r2,r2,64
 812927c:	9080030d 	sth	r2,12(r18)
 8129280:	003f9306 	br	81290d0 <__sfvwrite_r+0xb4>
 8129284:	0027883a 	mov	r19,zero
 8129288:	002f883a 	mov	r23,zero
 812928c:	d8000015 	stw	zero,0(sp)
 8129290:	0029883a 	mov	r20,zero
 8129294:	98001e26 	beq	r19,zero,8129310 <__sfvwrite_r+0x2f4>
 8129298:	d8c00017 	ldw	r3,0(sp)
 812929c:	1804c03a 	cmpne	r2,r3,zero
 81292a0:	10005e26 	beq	r2,zero,812941c <__sfvwrite_r+0x400>
 81292a4:	9821883a 	mov	r16,r19
 81292a8:	a4c0012e 	bgeu	r20,r19,81292b0 <__sfvwrite_r+0x294>
 81292ac:	a021883a 	mov	r16,r20
 81292b0:	91000017 	ldw	r4,0(r18)
 81292b4:	90800417 	ldw	r2,16(r18)
 81292b8:	91800217 	ldw	r6,8(r18)
 81292bc:	91c00517 	ldw	r7,20(r18)
 81292c0:	1100022e 	bgeu	r2,r4,81292cc <__sfvwrite_r+0x2b0>
 81292c4:	31e3883a 	add	r17,r6,r7
 81292c8:	8c001616 	blt	r17,r16,8129324 <__sfvwrite_r+0x308>
 81292cc:	81c03816 	blt	r16,r7,81293b0 <__sfvwrite_r+0x394>
 81292d0:	90c00917 	ldw	r3,36(r18)
 81292d4:	91400717 	ldw	r5,28(r18)
 81292d8:	e009883a 	mov	r4,fp
 81292dc:	b80d883a 	mov	r6,r23
 81292e0:	183ee83a 	callr	r3
 81292e4:	1023883a 	mov	r17,r2
 81292e8:	00bfe10e 	bge	zero,r2,8129270 <__sfvwrite_r+0x254>
 81292ec:	a469c83a 	sub	r20,r20,r17
 81292f0:	a0001826 	beq	r20,zero,8129354 <__sfvwrite_r+0x338>
 81292f4:	b0800217 	ldw	r2,8(r22)
 81292f8:	1445c83a 	sub	r2,r2,r17
 81292fc:	b0800215 	stw	r2,8(r22)
 8129300:	103f7226 	beq	r2,zero,81290cc <__sfvwrite_r+0xb0>
 8129304:	9c67c83a 	sub	r19,r19,r17
 8129308:	bc6f883a 	add	r23,r23,r17
 812930c:	983fe21e 	bne	r19,zero,8129298 <__sfvwrite_r+0x27c>
 8129310:	adc00017 	ldw	r23,0(r21)
 8129314:	acc00117 	ldw	r19,4(r21)
 8129318:	ad400204 	addi	r21,r21,8
 812931c:	d8000015 	stw	zero,0(sp)
 8129320:	003fdc06 	br	8129294 <__sfvwrite_r+0x278>
 8129324:	b80b883a 	mov	r5,r23
 8129328:	880d883a 	mov	r6,r17
 812932c:	812a1540 	call	812a154 <memmove>
 8129330:	90c00017 	ldw	r3,0(r18)
 8129334:	e009883a 	mov	r4,fp
 8129338:	900b883a 	mov	r5,r18
 812933c:	1c47883a 	add	r3,r3,r17
 8129340:	90c00015 	stw	r3,0(r18)
 8129344:	81286ec0 	call	81286ec <_fflush_r>
 8129348:	103fc91e 	bne	r2,zero,8129270 <__sfvwrite_r+0x254>
 812934c:	a469c83a 	sub	r20,r20,r17
 8129350:	a03fe81e 	bne	r20,zero,81292f4 <__sfvwrite_r+0x2d8>
 8129354:	e009883a 	mov	r4,fp
 8129358:	900b883a 	mov	r5,r18
 812935c:	81286ec0 	call	81286ec <_fflush_r>
 8129360:	103fc31e 	bne	r2,zero,8129270 <__sfvwrite_r+0x254>
 8129364:	d8000015 	stw	zero,0(sp)
 8129368:	003fe206 	br	81292f4 <__sfvwrite_r+0x2d8>
 812936c:	91000017 	ldw	r4,0(r18)
 8129370:	90800417 	ldw	r2,16(r18)
 8129374:	1100022e 	bgeu	r2,r4,8129380 <__sfvwrite_r+0x364>
 8129378:	8023883a 	mov	r17,r16
 812937c:	85003136 	bltu	r16,r20,8129444 <__sfvwrite_r+0x428>
 8129380:	91c00517 	ldw	r7,20(r18)
 8129384:	a1c01836 	bltu	r20,r7,81293e8 <__sfvwrite_r+0x3cc>
 8129388:	90c00917 	ldw	r3,36(r18)
 812938c:	91400717 	ldw	r5,28(r18)
 8129390:	e009883a 	mov	r4,fp
 8129394:	b80d883a 	mov	r6,r23
 8129398:	183ee83a 	callr	r3
 812939c:	1021883a 	mov	r16,r2
 81293a0:	00bfb30e 	bge	zero,r2,8129270 <__sfvwrite_r+0x254>
 81293a4:	1023883a 	mov	r17,r2
 81293a8:	1027883a 	mov	r19,r2
 81293ac:	003f9b06 	br	812921c <__sfvwrite_r+0x200>
 81293b0:	b80b883a 	mov	r5,r23
 81293b4:	800d883a 	mov	r6,r16
 81293b8:	812a1540 	call	812a154 <memmove>
 81293bc:	90c00217 	ldw	r3,8(r18)
 81293c0:	90800017 	ldw	r2,0(r18)
 81293c4:	8023883a 	mov	r17,r16
 81293c8:	1c07c83a 	sub	r3,r3,r16
 81293cc:	1405883a 	add	r2,r2,r16
 81293d0:	90c00215 	stw	r3,8(r18)
 81293d4:	90800015 	stw	r2,0(r18)
 81293d8:	003fc406 	br	81292ec <__sfvwrite_r+0x2d0>
 81293dc:	a00d883a 	mov	r6,r20
 81293e0:	a021883a 	mov	r16,r20
 81293e4:	003f8106 	br	81291ec <__sfvwrite_r+0x1d0>
 81293e8:	b80b883a 	mov	r5,r23
 81293ec:	a00d883a 	mov	r6,r20
 81293f0:	812a1540 	call	812a154 <memmove>
 81293f4:	90c00217 	ldw	r3,8(r18)
 81293f8:	90800017 	ldw	r2,0(r18)
 81293fc:	a021883a 	mov	r16,r20
 8129400:	1d07c83a 	sub	r3,r3,r20
 8129404:	1505883a 	add	r2,r2,r20
 8129408:	a023883a 	mov	r17,r20
 812940c:	a027883a 	mov	r19,r20
 8129410:	90c00215 	stw	r3,8(r18)
 8129414:	90800015 	stw	r2,0(r18)
 8129418:	003f8006 	br	812921c <__sfvwrite_r+0x200>
 812941c:	b809883a 	mov	r4,r23
 8129420:	01400284 	movi	r5,10
 8129424:	980d883a 	mov	r6,r19
 8129428:	8129fd00 	call	8129fd0 <memchr>
 812942c:	10001726 	beq	r2,zero,812948c <__sfvwrite_r+0x470>
 8129430:	15c5c83a 	sub	r2,r2,r23
 8129434:	15000044 	addi	r20,r2,1
 8129438:	00800044 	movi	r2,1
 812943c:	d8800015 	stw	r2,0(sp)
 8129440:	003f9806 	br	81292a4 <__sfvwrite_r+0x288>
 8129444:	b80b883a 	mov	r5,r23
 8129448:	800d883a 	mov	r6,r16
 812944c:	812a1540 	call	812a154 <memmove>
 8129450:	90c00017 	ldw	r3,0(r18)
 8129454:	e009883a 	mov	r4,fp
 8129458:	900b883a 	mov	r5,r18
 812945c:	1c07883a 	add	r3,r3,r16
 8129460:	90c00015 	stw	r3,0(r18)
 8129464:	8027883a 	mov	r19,r16
 8129468:	81286ec0 	call	81286ec <_fflush_r>
 812946c:	103f6b26 	beq	r2,zero,812921c <__sfvwrite_r+0x200>
 8129470:	003f7f06 	br	8129270 <__sfvwrite_r+0x254>
 8129474:	400b883a 	mov	r5,r8
 8129478:	e009883a 	mov	r4,fp
 812947c:	812b2c00 	call	812b2c0 <_realloc_r>
 8129480:	103f7626 	beq	r2,zero,812925c <__sfvwrite_r+0x240>
 8129484:	1023883a 	mov	r17,r2
 8129488:	003f5006 	br	81291cc <__sfvwrite_r+0x1b0>
 812948c:	00c00044 	movi	r3,1
 8129490:	9d000044 	addi	r20,r19,1
 8129494:	d8c00015 	stw	r3,0(sp)
 8129498:	003f8206 	br	81292a4 <__sfvwrite_r+0x288>
 812949c:	9080030b 	ldhu	r2,12(r18)
 81294a0:	00c00244 	movi	r3,9
 81294a4:	013fffc4 	movi	r4,-1
 81294a8:	10801014 	ori	r2,r2,64
 81294ac:	9080030d 	sth	r2,12(r18)
 81294b0:	e0c00015 	stw	r3,0(fp)
 81294b4:	003f0606 	br	81290d0 <__sfvwrite_r+0xb4>

081294b8 <_fwalk_reent>:
 81294b8:	defff704 	addi	sp,sp,-36
 81294bc:	dcc00315 	stw	r19,12(sp)
 81294c0:	24c0b804 	addi	r19,r4,736
 81294c4:	dd800615 	stw	r22,24(sp)
 81294c8:	dd400515 	stw	r21,20(sp)
 81294cc:	dfc00815 	stw	ra,32(sp)
 81294d0:	ddc00715 	stw	r23,28(sp)
 81294d4:	dd000415 	stw	r20,16(sp)
 81294d8:	dc800215 	stw	r18,8(sp)
 81294dc:	dc400115 	stw	r17,4(sp)
 81294e0:	dc000015 	stw	r16,0(sp)
 81294e4:	202b883a 	mov	r21,r4
 81294e8:	282d883a 	mov	r22,r5
 81294ec:	81289740 	call	8128974 <__sfp_lock_acquire>
 81294f0:	98002126 	beq	r19,zero,8129578 <_fwalk_reent+0xc0>
 81294f4:	002f883a 	mov	r23,zero
 81294f8:	9c800117 	ldw	r18,4(r19)
 81294fc:	9c000217 	ldw	r16,8(r19)
 8129500:	90bfffc4 	addi	r2,r18,-1
 8129504:	10000d16 	blt	r2,zero,812953c <_fwalk_reent+0x84>
 8129508:	0023883a 	mov	r17,zero
 812950c:	053fffc4 	movi	r20,-1
 8129510:	8080030f 	ldh	r2,12(r16)
 8129514:	8c400044 	addi	r17,r17,1
 8129518:	10000626 	beq	r2,zero,8129534 <_fwalk_reent+0x7c>
 812951c:	8080038f 	ldh	r2,14(r16)
 8129520:	800b883a 	mov	r5,r16
 8129524:	a809883a 	mov	r4,r21
 8129528:	15000226 	beq	r2,r20,8129534 <_fwalk_reent+0x7c>
 812952c:	b03ee83a 	callr	r22
 8129530:	b8aeb03a 	or	r23,r23,r2
 8129534:	84001704 	addi	r16,r16,92
 8129538:	947ff51e 	bne	r18,r17,8129510 <_fwalk_reent+0x58>
 812953c:	9cc00017 	ldw	r19,0(r19)
 8129540:	983fed1e 	bne	r19,zero,81294f8 <_fwalk_reent+0x40>
 8129544:	81289780 	call	8128978 <__sfp_lock_release>
 8129548:	b805883a 	mov	r2,r23
 812954c:	dfc00817 	ldw	ra,32(sp)
 8129550:	ddc00717 	ldw	r23,28(sp)
 8129554:	dd800617 	ldw	r22,24(sp)
 8129558:	dd400517 	ldw	r21,20(sp)
 812955c:	dd000417 	ldw	r20,16(sp)
 8129560:	dcc00317 	ldw	r19,12(sp)
 8129564:	dc800217 	ldw	r18,8(sp)
 8129568:	dc400117 	ldw	r17,4(sp)
 812956c:	dc000017 	ldw	r16,0(sp)
 8129570:	dec00904 	addi	sp,sp,36
 8129574:	f800283a 	ret
 8129578:	002f883a 	mov	r23,zero
 812957c:	003ff106 	br	8129544 <_fwalk_reent+0x8c>

08129580 <_fwalk>:
 8129580:	defff804 	addi	sp,sp,-32
 8129584:	dcc00315 	stw	r19,12(sp)
 8129588:	24c0b804 	addi	r19,r4,736
 812958c:	dd400515 	stw	r21,20(sp)
 8129590:	dfc00715 	stw	ra,28(sp)
 8129594:	dd800615 	stw	r22,24(sp)
 8129598:	dd000415 	stw	r20,16(sp)
 812959c:	dc800215 	stw	r18,8(sp)
 81295a0:	dc400115 	stw	r17,4(sp)
 81295a4:	dc000015 	stw	r16,0(sp)
 81295a8:	282b883a 	mov	r21,r5
 81295ac:	81289740 	call	8128974 <__sfp_lock_acquire>
 81295b0:	98001f26 	beq	r19,zero,8129630 <_fwalk+0xb0>
 81295b4:	002d883a 	mov	r22,zero
 81295b8:	9c800117 	ldw	r18,4(r19)
 81295bc:	9c000217 	ldw	r16,8(r19)
 81295c0:	90bfffc4 	addi	r2,r18,-1
 81295c4:	10000c16 	blt	r2,zero,81295f8 <_fwalk+0x78>
 81295c8:	0023883a 	mov	r17,zero
 81295cc:	053fffc4 	movi	r20,-1
 81295d0:	8080030f 	ldh	r2,12(r16)
 81295d4:	8c400044 	addi	r17,r17,1
 81295d8:	10000526 	beq	r2,zero,81295f0 <_fwalk+0x70>
 81295dc:	8080038f 	ldh	r2,14(r16)
 81295e0:	8009883a 	mov	r4,r16
 81295e4:	15000226 	beq	r2,r20,81295f0 <_fwalk+0x70>
 81295e8:	a83ee83a 	callr	r21
 81295ec:	b0acb03a 	or	r22,r22,r2
 81295f0:	84001704 	addi	r16,r16,92
 81295f4:	947ff61e 	bne	r18,r17,81295d0 <_fwalk+0x50>
 81295f8:	9cc00017 	ldw	r19,0(r19)
 81295fc:	983fee1e 	bne	r19,zero,81295b8 <_fwalk+0x38>
 8129600:	81289780 	call	8128978 <__sfp_lock_release>
 8129604:	b005883a 	mov	r2,r22
 8129608:	dfc00717 	ldw	ra,28(sp)
 812960c:	dd800617 	ldw	r22,24(sp)
 8129610:	dd400517 	ldw	r21,20(sp)
 8129614:	dd000417 	ldw	r20,16(sp)
 8129618:	dcc00317 	ldw	r19,12(sp)
 812961c:	dc800217 	ldw	r18,8(sp)
 8129620:	dc400117 	ldw	r17,4(sp)
 8129624:	dc000017 	ldw	r16,0(sp)
 8129628:	dec00804 	addi	sp,sp,32
 812962c:	f800283a 	ret
 8129630:	002d883a 	mov	r22,zero
 8129634:	003ff206 	br	8129600 <_fwalk+0x80>

08129638 <__locale_charset>:
 8129638:	d0a00717 	ldw	r2,-32740(gp)
 812963c:	f800283a 	ret

08129640 <_localeconv_r>:
 8129640:	008204f4 	movhi	r2,2067
 8129644:	1086cc04 	addi	r2,r2,6960
 8129648:	f800283a 	ret

0812964c <localeconv>:
 812964c:	008204f4 	movhi	r2,2067
 8129650:	108e5204 	addi	r2,r2,14664
 8129654:	11000017 	ldw	r4,0(r2)
 8129658:	81296401 	jmpi	8129640 <_localeconv_r>

0812965c <_setlocale_r>:
 812965c:	defffc04 	addi	sp,sp,-16
 8129660:	00c204f4 	movhi	r3,2067
 8129664:	18c6a204 	addi	r3,r3,6792
 8129668:	dc800215 	stw	r18,8(sp)
 812966c:	dc400115 	stw	r17,4(sp)
 8129670:	dc000015 	stw	r16,0(sp)
 8129674:	2023883a 	mov	r17,r4
 8129678:	2825883a 	mov	r18,r5
 812967c:	dfc00315 	stw	ra,12(sp)
 8129680:	3021883a 	mov	r16,r6
 8129684:	3009883a 	mov	r4,r6
 8129688:	180b883a 	mov	r5,r3
 812968c:	30000926 	beq	r6,zero,81296b4 <_setlocale_r+0x58>
 8129690:	812bab00 	call	812bab0 <strcmp>
 8129694:	8009883a 	mov	r4,r16
 8129698:	014204f4 	movhi	r5,2067
 812969c:	2946b304 	addi	r5,r5,6860
 81296a0:	10000b1e 	bne	r2,zero,81296d0 <_setlocale_r+0x74>
 81296a4:	8c000d15 	stw	r16,52(r17)
 81296a8:	8c800c15 	stw	r18,48(r17)
 81296ac:	00c204f4 	movhi	r3,2067
 81296b0:	18c6a204 	addi	r3,r3,6792
 81296b4:	1805883a 	mov	r2,r3
 81296b8:	dfc00317 	ldw	ra,12(sp)
 81296bc:	dc800217 	ldw	r18,8(sp)
 81296c0:	dc400117 	ldw	r17,4(sp)
 81296c4:	dc000017 	ldw	r16,0(sp)
 81296c8:	dec00404 	addi	sp,sp,16
 81296cc:	f800283a 	ret
 81296d0:	812bab00 	call	812bab0 <strcmp>
 81296d4:	0007883a 	mov	r3,zero
 81296d8:	103ff226 	beq	r2,zero,81296a4 <_setlocale_r+0x48>
 81296dc:	003ff506 	br	81296b4 <_setlocale_r+0x58>

081296e0 <setlocale>:
 81296e0:	018204f4 	movhi	r6,2067
 81296e4:	318e5204 	addi	r6,r6,14664
 81296e8:	2007883a 	mov	r3,r4
 81296ec:	31000017 	ldw	r4,0(r6)
 81296f0:	280d883a 	mov	r6,r5
 81296f4:	180b883a 	mov	r5,r3
 81296f8:	812965c1 	jmpi	812965c <_setlocale_r>

081296fc <__smakebuf_r>:
 81296fc:	2880030b 	ldhu	r2,12(r5)
 8129700:	deffed04 	addi	sp,sp,-76
 8129704:	dc401015 	stw	r17,64(sp)
 8129708:	1080008c 	andi	r2,r2,2
 812970c:	dc000f15 	stw	r16,60(sp)
 8129710:	dfc01215 	stw	ra,72(sp)
 8129714:	dc801115 	stw	r18,68(sp)
 8129718:	2821883a 	mov	r16,r5
 812971c:	2023883a 	mov	r17,r4
 8129720:	10000b26 	beq	r2,zero,8129750 <__smakebuf_r+0x54>
 8129724:	28c010c4 	addi	r3,r5,67
 8129728:	00800044 	movi	r2,1
 812972c:	28800515 	stw	r2,20(r5)
 8129730:	28c00415 	stw	r3,16(r5)
 8129734:	28c00015 	stw	r3,0(r5)
 8129738:	dfc01217 	ldw	ra,72(sp)
 812973c:	dc801117 	ldw	r18,68(sp)
 8129740:	dc401017 	ldw	r17,64(sp)
 8129744:	dc000f17 	ldw	r16,60(sp)
 8129748:	dec01304 	addi	sp,sp,76
 812974c:	f800283a 	ret
 8129750:	2940038f 	ldh	r5,14(r5)
 8129754:	28002116 	blt	r5,zero,81297dc <__smakebuf_r+0xe0>
 8129758:	d80d883a 	mov	r6,sp
 812975c:	812be2c0 	call	812be2c <_fstat_r>
 8129760:	10001e16 	blt	r2,zero,81297dc <__smakebuf_r+0xe0>
 8129764:	d8800117 	ldw	r2,4(sp)
 8129768:	00e00014 	movui	r3,32768
 812976c:	113c000c 	andi	r4,r2,61440
 8129770:	20c03126 	beq	r4,r3,8129838 <__smakebuf_r+0x13c>
 8129774:	8080030b 	ldhu	r2,12(r16)
 8129778:	00c80004 	movi	r3,8192
 812977c:	10820014 	ori	r2,r2,2048
 8129780:	8080030d 	sth	r2,12(r16)
 8129784:	20c01e26 	beq	r4,r3,8129800 <__smakebuf_r+0x104>
 8129788:	04810004 	movi	r18,1024
 812978c:	8809883a 	mov	r4,r17
 8129790:	900b883a 	mov	r5,r18
 8129794:	81298900 	call	8129890 <_malloc_r>
 8129798:	1009883a 	mov	r4,r2
 812979c:	10003126 	beq	r2,zero,8129864 <__smakebuf_r+0x168>
 81297a0:	80c0030b 	ldhu	r3,12(r16)
 81297a4:	008204f4 	movhi	r2,2067
 81297a8:	10a29a04 	addi	r2,r2,-30104
 81297ac:	88800f15 	stw	r2,60(r17)
 81297b0:	18c02014 	ori	r3,r3,128
 81297b4:	84800515 	stw	r18,20(r16)
 81297b8:	80c0030d 	sth	r3,12(r16)
 81297bc:	81000415 	stw	r4,16(r16)
 81297c0:	81000015 	stw	r4,0(r16)
 81297c4:	dfc01217 	ldw	ra,72(sp)
 81297c8:	dc801117 	ldw	r18,68(sp)
 81297cc:	dc401017 	ldw	r17,64(sp)
 81297d0:	dc000f17 	ldw	r16,60(sp)
 81297d4:	dec01304 	addi	sp,sp,76
 81297d8:	f800283a 	ret
 81297dc:	80c0030b 	ldhu	r3,12(r16)
 81297e0:	1880200c 	andi	r2,r3,128
 81297e4:	10000426 	beq	r2,zero,81297f8 <__smakebuf_r+0xfc>
 81297e8:	04801004 	movi	r18,64
 81297ec:	18820014 	ori	r2,r3,2048
 81297f0:	8080030d 	sth	r2,12(r16)
 81297f4:	003fe506 	br	812978c <__smakebuf_r+0x90>
 81297f8:	04810004 	movi	r18,1024
 81297fc:	003ffb06 	br	81297ec <__smakebuf_r+0xf0>
 8129800:	8140038f 	ldh	r5,14(r16)
 8129804:	8809883a 	mov	r4,r17
 8129808:	812bea00 	call	812bea0 <_isatty_r>
 812980c:	103fde26 	beq	r2,zero,8129788 <__smakebuf_r+0x8c>
 8129810:	8080030b 	ldhu	r2,12(r16)
 8129814:	80c010c4 	addi	r3,r16,67
 8129818:	04810004 	movi	r18,1024
 812981c:	10800054 	ori	r2,r2,1
 8129820:	8080030d 	sth	r2,12(r16)
 8129824:	00800044 	movi	r2,1
 8129828:	80c00415 	stw	r3,16(r16)
 812982c:	80800515 	stw	r2,20(r16)
 8129830:	80c00015 	stw	r3,0(r16)
 8129834:	003fd506 	br	812978c <__smakebuf_r+0x90>
 8129838:	80c00a17 	ldw	r3,40(r16)
 812983c:	008204f4 	movhi	r2,2067
 8129840:	10ae5b04 	addi	r2,r2,-18068
 8129844:	18bfcb1e 	bne	r3,r2,8129774 <__smakebuf_r+0x78>
 8129848:	8080030b 	ldhu	r2,12(r16)
 812984c:	00c10004 	movi	r3,1024
 8129850:	1825883a 	mov	r18,r3
 8129854:	10c4b03a 	or	r2,r2,r3
 8129858:	8080030d 	sth	r2,12(r16)
 812985c:	80c01315 	stw	r3,76(r16)
 8129860:	003fca06 	br	812978c <__smakebuf_r+0x90>
 8129864:	8100030b 	ldhu	r4,12(r16)
 8129868:	2080800c 	andi	r2,r4,512
 812986c:	103fb21e 	bne	r2,zero,8129738 <__smakebuf_r+0x3c>
 8129870:	80c010c4 	addi	r3,r16,67
 8129874:	21000094 	ori	r4,r4,2
 8129878:	00800044 	movi	r2,1
 812987c:	80800515 	stw	r2,20(r16)
 8129880:	8100030d 	sth	r4,12(r16)
 8129884:	80c00415 	stw	r3,16(r16)
 8129888:	80c00015 	stw	r3,0(r16)
 812988c:	003faa06 	br	8129738 <__smakebuf_r+0x3c>

08129890 <_malloc_r>:
 8129890:	defff604 	addi	sp,sp,-40
 8129894:	28c002c4 	addi	r3,r5,11
 8129898:	00800584 	movi	r2,22
 812989c:	dc800215 	stw	r18,8(sp)
 81298a0:	dfc00915 	stw	ra,36(sp)
 81298a4:	df000815 	stw	fp,32(sp)
 81298a8:	ddc00715 	stw	r23,28(sp)
 81298ac:	dd800615 	stw	r22,24(sp)
 81298b0:	dd400515 	stw	r21,20(sp)
 81298b4:	dd000415 	stw	r20,16(sp)
 81298b8:	dcc00315 	stw	r19,12(sp)
 81298bc:	dc400115 	stw	r17,4(sp)
 81298c0:	dc000015 	stw	r16,0(sp)
 81298c4:	2025883a 	mov	r18,r4
 81298c8:	10c01236 	bltu	r2,r3,8129914 <_malloc_r+0x84>
 81298cc:	04400404 	movi	r17,16
 81298d0:	8940142e 	bgeu	r17,r5,8129924 <_malloc_r+0x94>
 81298d4:	00800304 	movi	r2,12
 81298d8:	0007883a 	mov	r3,zero
 81298dc:	90800015 	stw	r2,0(r18)
 81298e0:	1805883a 	mov	r2,r3
 81298e4:	dfc00917 	ldw	ra,36(sp)
 81298e8:	df000817 	ldw	fp,32(sp)
 81298ec:	ddc00717 	ldw	r23,28(sp)
 81298f0:	dd800617 	ldw	r22,24(sp)
 81298f4:	dd400517 	ldw	r21,20(sp)
 81298f8:	dd000417 	ldw	r20,16(sp)
 81298fc:	dcc00317 	ldw	r19,12(sp)
 8129900:	dc800217 	ldw	r18,8(sp)
 8129904:	dc400117 	ldw	r17,4(sp)
 8129908:	dc000017 	ldw	r16,0(sp)
 812990c:	dec00a04 	addi	sp,sp,40
 8129910:	f800283a 	ret
 8129914:	00bffe04 	movi	r2,-8
 8129918:	18a2703a 	and	r17,r3,r2
 812991c:	883fed16 	blt	r17,zero,81298d4 <_malloc_r+0x44>
 8129920:	897fec36 	bltu	r17,r5,81298d4 <_malloc_r+0x44>
 8129924:	9009883a 	mov	r4,r18
 8129928:	812d5040 	call	812d504 <__malloc_lock>
 812992c:	00807dc4 	movi	r2,503
 8129930:	14402b2e 	bgeu	r2,r17,81299e0 <_malloc_r+0x150>
 8129934:	8806d27a 	srli	r3,r17,9
 8129938:	18003f1e 	bne	r3,zero,8129a38 <_malloc_r+0x1a8>
 812993c:	880cd0fa 	srli	r6,r17,3
 8129940:	300490fa 	slli	r2,r6,3
 8129944:	02c204f4 	movhi	r11,2067
 8129948:	5ac87904 	addi	r11,r11,8676
 812994c:	12cb883a 	add	r5,r2,r11
 8129950:	2c000317 	ldw	r16,12(r5)
 8129954:	580f883a 	mov	r7,r11
 8129958:	2c00041e 	bne	r5,r16,812996c <_malloc_r+0xdc>
 812995c:	00000a06 	br	8129988 <_malloc_r+0xf8>
 8129960:	1800860e 	bge	r3,zero,8129b7c <_malloc_r+0x2ec>
 8129964:	84000317 	ldw	r16,12(r16)
 8129968:	2c000726 	beq	r5,r16,8129988 <_malloc_r+0xf8>
 812996c:	80800117 	ldw	r2,4(r16)
 8129970:	00ffff04 	movi	r3,-4
 8129974:	10c8703a 	and	r4,r2,r3
 8129978:	2447c83a 	sub	r3,r4,r17
 812997c:	008003c4 	movi	r2,15
 8129980:	10fff70e 	bge	r2,r3,8129960 <_malloc_r+0xd0>
 8129984:	31bfffc4 	addi	r6,r6,-1
 8129988:	32400044 	addi	r9,r6,1
 812998c:	028204f4 	movhi	r10,2067
 8129990:	52887b04 	addi	r10,r10,8684
 8129994:	54000217 	ldw	r16,8(r10)
 8129998:	8280a026 	beq	r16,r10,8129c1c <_malloc_r+0x38c>
 812999c:	80800117 	ldw	r2,4(r16)
 81299a0:	00ffff04 	movi	r3,-4
 81299a4:	10ca703a 	and	r5,r2,r3
 81299a8:	2c4dc83a 	sub	r6,r5,r17
 81299ac:	008003c4 	movi	r2,15
 81299b0:	11808316 	blt	r2,r6,8129bc0 <_malloc_r+0x330>
 81299b4:	52800315 	stw	r10,12(r10)
 81299b8:	52800215 	stw	r10,8(r10)
 81299bc:	30002916 	blt	r6,zero,8129a64 <_malloc_r+0x1d4>
 81299c0:	8147883a 	add	r3,r16,r5
 81299c4:	18800117 	ldw	r2,4(r3)
 81299c8:	9009883a 	mov	r4,r18
 81299cc:	10800054 	ori	r2,r2,1
 81299d0:	18800115 	stw	r2,4(r3)
 81299d4:	812d5240 	call	812d524 <__malloc_unlock>
 81299d8:	80c00204 	addi	r3,r16,8
 81299dc:	003fc006 	br	81298e0 <_malloc_r+0x50>
 81299e0:	02c204f4 	movhi	r11,2067
 81299e4:	5ac87904 	addi	r11,r11,8676
 81299e8:	8ac5883a 	add	r2,r17,r11
 81299ec:	14000317 	ldw	r16,12(r2)
 81299f0:	580f883a 	mov	r7,r11
 81299f4:	8806d0fa 	srli	r3,r17,3
 81299f8:	14006c26 	beq	r2,r16,8129bac <_malloc_r+0x31c>
 81299fc:	80c00117 	ldw	r3,4(r16)
 8129a00:	00bfff04 	movi	r2,-4
 8129a04:	81800317 	ldw	r6,12(r16)
 8129a08:	1886703a 	and	r3,r3,r2
 8129a0c:	80c7883a 	add	r3,r16,r3
 8129a10:	18800117 	ldw	r2,4(r3)
 8129a14:	81400217 	ldw	r5,8(r16)
 8129a18:	9009883a 	mov	r4,r18
 8129a1c:	10800054 	ori	r2,r2,1
 8129a20:	18800115 	stw	r2,4(r3)
 8129a24:	31400215 	stw	r5,8(r6)
 8129a28:	29800315 	stw	r6,12(r5)
 8129a2c:	812d5240 	call	812d524 <__malloc_unlock>
 8129a30:	80c00204 	addi	r3,r16,8
 8129a34:	003faa06 	br	81298e0 <_malloc_r+0x50>
 8129a38:	00800104 	movi	r2,4
 8129a3c:	10c0052e 	bgeu	r2,r3,8129a54 <_malloc_r+0x1c4>
 8129a40:	00800504 	movi	r2,20
 8129a44:	10c07836 	bltu	r2,r3,8129c28 <_malloc_r+0x398>
 8129a48:	198016c4 	addi	r6,r3,91
 8129a4c:	300490fa 	slli	r2,r6,3
 8129a50:	003fbc06 	br	8129944 <_malloc_r+0xb4>
 8129a54:	8804d1ba 	srli	r2,r17,6
 8129a58:	11800e04 	addi	r6,r2,56
 8129a5c:	300490fa 	slli	r2,r6,3
 8129a60:	003fb806 	br	8129944 <_malloc_r+0xb4>
 8129a64:	00807fc4 	movi	r2,511
 8129a68:	1140bb36 	bltu	r2,r5,8129d58 <_malloc_r+0x4c8>
 8129a6c:	2806d0fa 	srli	r3,r5,3
 8129a70:	573ffe04 	addi	fp,r10,-8
 8129a74:	00800044 	movi	r2,1
 8129a78:	180890fa 	slli	r4,r3,3
 8129a7c:	1807d0ba 	srai	r3,r3,2
 8129a80:	e1c00117 	ldw	r7,4(fp)
 8129a84:	5909883a 	add	r4,r11,r4
 8129a88:	21400217 	ldw	r5,8(r4)
 8129a8c:	10c4983a 	sll	r2,r2,r3
 8129a90:	81000315 	stw	r4,12(r16)
 8129a94:	81400215 	stw	r5,8(r16)
 8129a98:	388eb03a 	or	r7,r7,r2
 8129a9c:	2c000315 	stw	r16,12(r5)
 8129aa0:	24000215 	stw	r16,8(r4)
 8129aa4:	e1c00115 	stw	r7,4(fp)
 8129aa8:	4807883a 	mov	r3,r9
 8129aac:	4800cd16 	blt	r9,zero,8129de4 <_malloc_r+0x554>
 8129ab0:	1807d0ba 	srai	r3,r3,2
 8129ab4:	00800044 	movi	r2,1
 8129ab8:	10c8983a 	sll	r4,r2,r3
 8129abc:	39004436 	bltu	r7,r4,8129bd0 <_malloc_r+0x340>
 8129ac0:	21c4703a 	and	r2,r4,r7
 8129ac4:	10000a1e 	bne	r2,zero,8129af0 <_malloc_r+0x260>
 8129ac8:	2109883a 	add	r4,r4,r4
 8129acc:	00bfff04 	movi	r2,-4
 8129ad0:	4884703a 	and	r2,r9,r2
 8129ad4:	3906703a 	and	r3,r7,r4
 8129ad8:	12400104 	addi	r9,r2,4
 8129adc:	1800041e 	bne	r3,zero,8129af0 <_malloc_r+0x260>
 8129ae0:	2109883a 	add	r4,r4,r4
 8129ae4:	3904703a 	and	r2,r7,r4
 8129ae8:	4a400104 	addi	r9,r9,4
 8129aec:	103ffc26 	beq	r2,zero,8129ae0 <_malloc_r+0x250>
 8129af0:	480490fa 	slli	r2,r9,3
 8129af4:	4819883a 	mov	r12,r9
 8129af8:	023fff04 	movi	r8,-4
 8129afc:	589b883a 	add	r13,r11,r2
 8129b00:	6807883a 	mov	r3,r13
 8129b04:	014003c4 	movi	r5,15
 8129b08:	1c000317 	ldw	r16,12(r3)
 8129b0c:	1c00041e 	bne	r3,r16,8129b20 <_malloc_r+0x290>
 8129b10:	0000a706 	br	8129db0 <_malloc_r+0x520>
 8129b14:	3000ab0e 	bge	r6,zero,8129dc4 <_malloc_r+0x534>
 8129b18:	84000317 	ldw	r16,12(r16)
 8129b1c:	1c00a426 	beq	r3,r16,8129db0 <_malloc_r+0x520>
 8129b20:	80800117 	ldw	r2,4(r16)
 8129b24:	1204703a 	and	r2,r2,r8
 8129b28:	144dc83a 	sub	r6,r2,r17
 8129b2c:	29bff90e 	bge	r5,r6,8129b14 <_malloc_r+0x284>
 8129b30:	81000317 	ldw	r4,12(r16)
 8129b34:	80c00217 	ldw	r3,8(r16)
 8129b38:	89400054 	ori	r5,r17,1
 8129b3c:	8445883a 	add	r2,r16,r17
 8129b40:	20c00215 	stw	r3,8(r4)
 8129b44:	19000315 	stw	r4,12(r3)
 8129b48:	81400115 	stw	r5,4(r16)
 8129b4c:	1187883a 	add	r3,r2,r6
 8129b50:	31000054 	ori	r4,r6,1
 8129b54:	50800315 	stw	r2,12(r10)
 8129b58:	50800215 	stw	r2,8(r10)
 8129b5c:	19800015 	stw	r6,0(r3)
 8129b60:	11000115 	stw	r4,4(r2)
 8129b64:	12800215 	stw	r10,8(r2)
 8129b68:	12800315 	stw	r10,12(r2)
 8129b6c:	9009883a 	mov	r4,r18
 8129b70:	812d5240 	call	812d524 <__malloc_unlock>
 8129b74:	80c00204 	addi	r3,r16,8
 8129b78:	003f5906 	br	81298e0 <_malloc_r+0x50>
 8129b7c:	8109883a 	add	r4,r16,r4
 8129b80:	20800117 	ldw	r2,4(r4)
 8129b84:	80c00217 	ldw	r3,8(r16)
 8129b88:	81400317 	ldw	r5,12(r16)
 8129b8c:	10800054 	ori	r2,r2,1
 8129b90:	20800115 	stw	r2,4(r4)
 8129b94:	28c00215 	stw	r3,8(r5)
 8129b98:	19400315 	stw	r5,12(r3)
 8129b9c:	9009883a 	mov	r4,r18
 8129ba0:	812d5240 	call	812d524 <__malloc_unlock>
 8129ba4:	80c00204 	addi	r3,r16,8
 8129ba8:	003f4d06 	br	81298e0 <_malloc_r+0x50>
 8129bac:	80800204 	addi	r2,r16,8
 8129bb0:	14000317 	ldw	r16,12(r2)
 8129bb4:	143f911e 	bne	r2,r16,81299fc <_malloc_r+0x16c>
 8129bb8:	1a400084 	addi	r9,r3,2
 8129bbc:	003f7306 	br	812998c <_malloc_r+0xfc>
 8129bc0:	88c00054 	ori	r3,r17,1
 8129bc4:	8445883a 	add	r2,r16,r17
 8129bc8:	80c00115 	stw	r3,4(r16)
 8129bcc:	003fdf06 	br	8129b4c <_malloc_r+0x2bc>
 8129bd0:	e4000217 	ldw	r16,8(fp)
 8129bd4:	00bfff04 	movi	r2,-4
 8129bd8:	80c00117 	ldw	r3,4(r16)
 8129bdc:	802d883a 	mov	r22,r16
 8129be0:	18aa703a 	and	r21,r3,r2
 8129be4:	ac401636 	bltu	r21,r17,8129c40 <_malloc_r+0x3b0>
 8129be8:	ac49c83a 	sub	r4,r21,r17
 8129bec:	008003c4 	movi	r2,15
 8129bf0:	1100130e 	bge	r2,r4,8129c40 <_malloc_r+0x3b0>
 8129bf4:	88800054 	ori	r2,r17,1
 8129bf8:	8447883a 	add	r3,r16,r17
 8129bfc:	80800115 	stw	r2,4(r16)
 8129c00:	20800054 	ori	r2,r4,1
 8129c04:	18800115 	stw	r2,4(r3)
 8129c08:	e0c00215 	stw	r3,8(fp)
 8129c0c:	9009883a 	mov	r4,r18
 8129c10:	812d5240 	call	812d524 <__malloc_unlock>
 8129c14:	80c00204 	addi	r3,r16,8
 8129c18:	003f3106 	br	81298e0 <_malloc_r+0x50>
 8129c1c:	39c00117 	ldw	r7,4(r7)
 8129c20:	573ffe04 	addi	fp,r10,-8
 8129c24:	003fa006 	br	8129aa8 <_malloc_r+0x218>
 8129c28:	00801504 	movi	r2,84
 8129c2c:	10c06736 	bltu	r2,r3,8129dcc <_malloc_r+0x53c>
 8129c30:	8804d33a 	srli	r2,r17,12
 8129c34:	11801b84 	addi	r6,r2,110
 8129c38:	300490fa 	slli	r2,r6,3
 8129c3c:	003f4106 	br	8129944 <_malloc_r+0xb4>
 8129c40:	d0a71317 	ldw	r2,-25524(gp)
 8129c44:	d0e00917 	ldw	r3,-32732(gp)
 8129c48:	053fffc4 	movi	r20,-1
 8129c4c:	10800404 	addi	r2,r2,16
 8129c50:	88a7883a 	add	r19,r17,r2
 8129c54:	1d000326 	beq	r3,r20,8129c64 <_malloc_r+0x3d4>
 8129c58:	98c3ffc4 	addi	r3,r19,4095
 8129c5c:	00bc0004 	movi	r2,-4096
 8129c60:	18a6703a 	and	r19,r3,r2
 8129c64:	9009883a 	mov	r4,r18
 8129c68:	980b883a 	mov	r5,r19
 8129c6c:	812b8f40 	call	812b8f4 <_sbrk_r>
 8129c70:	1009883a 	mov	r4,r2
 8129c74:	15000426 	beq	r2,r20,8129c88 <_malloc_r+0x3f8>
 8129c78:	854b883a 	add	r5,r16,r21
 8129c7c:	1029883a 	mov	r20,r2
 8129c80:	11405a2e 	bgeu	r2,r5,8129dec <_malloc_r+0x55c>
 8129c84:	87000c26 	beq	r16,fp,8129cb8 <_malloc_r+0x428>
 8129c88:	e4000217 	ldw	r16,8(fp)
 8129c8c:	80c00117 	ldw	r3,4(r16)
 8129c90:	00bfff04 	movi	r2,-4
 8129c94:	1884703a 	and	r2,r3,r2
 8129c98:	14400336 	bltu	r2,r17,8129ca8 <_malloc_r+0x418>
 8129c9c:	1449c83a 	sub	r4,r2,r17
 8129ca0:	008003c4 	movi	r2,15
 8129ca4:	113fd316 	blt	r2,r4,8129bf4 <_malloc_r+0x364>
 8129ca8:	9009883a 	mov	r4,r18
 8129cac:	812d5240 	call	812d524 <__malloc_unlock>
 8129cb0:	0007883a 	mov	r3,zero
 8129cb4:	003f0a06 	br	81298e0 <_malloc_r+0x50>
 8129cb8:	05c204f4 	movhi	r23,2067
 8129cbc:	bdd56b04 	addi	r23,r23,21932
 8129cc0:	b8800017 	ldw	r2,0(r23)
 8129cc4:	988d883a 	add	r6,r19,r2
 8129cc8:	b9800015 	stw	r6,0(r23)
 8129ccc:	d0e00917 	ldw	r3,-32732(gp)
 8129cd0:	00bfffc4 	movi	r2,-1
 8129cd4:	18808e26 	beq	r3,r2,8129f10 <_malloc_r+0x680>
 8129cd8:	2145c83a 	sub	r2,r4,r5
 8129cdc:	3085883a 	add	r2,r6,r2
 8129ce0:	b8800015 	stw	r2,0(r23)
 8129ce4:	20c001cc 	andi	r3,r4,7
 8129ce8:	18005f1e 	bne	r3,zero,8129e68 <_malloc_r+0x5d8>
 8129cec:	000b883a 	mov	r5,zero
 8129cf0:	a4c5883a 	add	r2,r20,r19
 8129cf4:	1083ffcc 	andi	r2,r2,4095
 8129cf8:	00c40004 	movi	r3,4096
 8129cfc:	1887c83a 	sub	r3,r3,r2
 8129d00:	28e7883a 	add	r19,r5,r3
 8129d04:	9009883a 	mov	r4,r18
 8129d08:	980b883a 	mov	r5,r19
 8129d0c:	812b8f40 	call	812b8f4 <_sbrk_r>
 8129d10:	1007883a 	mov	r3,r2
 8129d14:	00bfffc4 	movi	r2,-1
 8129d18:	18807a26 	beq	r3,r2,8129f04 <_malloc_r+0x674>
 8129d1c:	1d05c83a 	sub	r2,r3,r20
 8129d20:	9885883a 	add	r2,r19,r2
 8129d24:	10c00054 	ori	r3,r2,1
 8129d28:	b8800017 	ldw	r2,0(r23)
 8129d2c:	a021883a 	mov	r16,r20
 8129d30:	a0c00115 	stw	r3,4(r20)
 8129d34:	9885883a 	add	r2,r19,r2
 8129d38:	b8800015 	stw	r2,0(r23)
 8129d3c:	e5000215 	stw	r20,8(fp)
 8129d40:	b7003626 	beq	r22,fp,8129e1c <_malloc_r+0x58c>
 8129d44:	018003c4 	movi	r6,15
 8129d48:	35404b36 	bltu	r6,r21,8129e78 <_malloc_r+0x5e8>
 8129d4c:	00800044 	movi	r2,1
 8129d50:	a0800115 	stw	r2,4(r20)
 8129d54:	003fcd06 	br	8129c8c <_malloc_r+0x3fc>
 8129d58:	2808d27a 	srli	r4,r5,9
 8129d5c:	2000371e 	bne	r4,zero,8129e3c <_malloc_r+0x5ac>
 8129d60:	2808d0fa 	srli	r4,r5,3
 8129d64:	200690fa 	slli	r3,r4,3
 8129d68:	1ad1883a 	add	r8,r3,r11
 8129d6c:	41800217 	ldw	r6,8(r8)
 8129d70:	41805b26 	beq	r8,r6,8129ee0 <_malloc_r+0x650>
 8129d74:	30800117 	ldw	r2,4(r6)
 8129d78:	00ffff04 	movi	r3,-4
 8129d7c:	10c4703a 	and	r2,r2,r3
 8129d80:	2880022e 	bgeu	r5,r2,8129d8c <_malloc_r+0x4fc>
 8129d84:	31800217 	ldw	r6,8(r6)
 8129d88:	41bffa1e 	bne	r8,r6,8129d74 <_malloc_r+0x4e4>
 8129d8c:	32000317 	ldw	r8,12(r6)
 8129d90:	39c00117 	ldw	r7,4(r7)
 8129d94:	82000315 	stw	r8,12(r16)
 8129d98:	81800215 	stw	r6,8(r16)
 8129d9c:	070204f4 	movhi	fp,2067
 8129da0:	e7087904 	addi	fp,fp,8676
 8129da4:	34000315 	stw	r16,12(r6)
 8129da8:	44000215 	stw	r16,8(r8)
 8129dac:	003f3e06 	br	8129aa8 <_malloc_r+0x218>
 8129db0:	63000044 	addi	r12,r12,1
 8129db4:	608000cc 	andi	r2,r12,3
 8129db8:	10005d26 	beq	r2,zero,8129f30 <_malloc_r+0x6a0>
 8129dbc:	18c00204 	addi	r3,r3,8
 8129dc0:	003f5106 	br	8129b08 <_malloc_r+0x278>
 8129dc4:	8089883a 	add	r4,r16,r2
 8129dc8:	003f6d06 	br	8129b80 <_malloc_r+0x2f0>
 8129dcc:	00805504 	movi	r2,340
 8129dd0:	10c02036 	bltu	r2,r3,8129e54 <_malloc_r+0x5c4>
 8129dd4:	8804d3fa 	srli	r2,r17,15
 8129dd8:	11801dc4 	addi	r6,r2,119
 8129ddc:	300490fa 	slli	r2,r6,3
 8129de0:	003ed806 	br	8129944 <_malloc_r+0xb4>
 8129de4:	48c000c4 	addi	r3,r9,3
 8129de8:	003f3106 	br	8129ab0 <_malloc_r+0x220>
 8129dec:	05c204f4 	movhi	r23,2067
 8129df0:	bdd56b04 	addi	r23,r23,21932
 8129df4:	b8800017 	ldw	r2,0(r23)
 8129df8:	988d883a 	add	r6,r19,r2
 8129dfc:	b9800015 	stw	r6,0(r23)
 8129e00:	293fb21e 	bne	r5,r4,8129ccc <_malloc_r+0x43c>
 8129e04:	2083ffcc 	andi	r2,r4,4095
 8129e08:	103fb01e 	bne	r2,zero,8129ccc <_malloc_r+0x43c>
 8129e0c:	e4000217 	ldw	r16,8(fp)
 8129e10:	9d45883a 	add	r2,r19,r21
 8129e14:	10800054 	ori	r2,r2,1
 8129e18:	80800115 	stw	r2,4(r16)
 8129e1c:	b8c00017 	ldw	r3,0(r23)
 8129e20:	d0a71417 	ldw	r2,-25520(gp)
 8129e24:	10c0012e 	bgeu	r2,r3,8129e2c <_malloc_r+0x59c>
 8129e28:	d0e71415 	stw	r3,-25520(gp)
 8129e2c:	d0a71517 	ldw	r2,-25516(gp)
 8129e30:	10ff962e 	bgeu	r2,r3,8129c8c <_malloc_r+0x3fc>
 8129e34:	d0e71515 	stw	r3,-25516(gp)
 8129e38:	003f9406 	br	8129c8c <_malloc_r+0x3fc>
 8129e3c:	00800104 	movi	r2,4
 8129e40:	11001e36 	bltu	r2,r4,8129ebc <_malloc_r+0x62c>
 8129e44:	2804d1ba 	srli	r2,r5,6
 8129e48:	11000e04 	addi	r4,r2,56
 8129e4c:	200690fa 	slli	r3,r4,3
 8129e50:	003fc506 	br	8129d68 <_malloc_r+0x4d8>
 8129e54:	00815504 	movi	r2,1364
 8129e58:	10c01d2e 	bgeu	r2,r3,8129ed0 <_malloc_r+0x640>
 8129e5c:	01801f84 	movi	r6,126
 8129e60:	0080fc04 	movi	r2,1008
 8129e64:	003eb706 	br	8129944 <_malloc_r+0xb4>
 8129e68:	00800204 	movi	r2,8
 8129e6c:	10cbc83a 	sub	r5,r2,r3
 8129e70:	2169883a 	add	r20,r4,r5
 8129e74:	003f9e06 	br	8129cf0 <_malloc_r+0x460>
 8129e78:	00bffe04 	movi	r2,-8
 8129e7c:	a93ffd04 	addi	r4,r21,-12
 8129e80:	2088703a 	and	r4,r4,r2
 8129e84:	b10b883a 	add	r5,r22,r4
 8129e88:	00c00144 	movi	r3,5
 8129e8c:	28c00215 	stw	r3,8(r5)
 8129e90:	28c00115 	stw	r3,4(r5)
 8129e94:	b0800117 	ldw	r2,4(r22)
 8129e98:	1080004c 	andi	r2,r2,1
 8129e9c:	2084b03a 	or	r2,r4,r2
 8129ea0:	b0800115 	stw	r2,4(r22)
 8129ea4:	313fdd2e 	bgeu	r6,r4,8129e1c <_malloc_r+0x58c>
 8129ea8:	b1400204 	addi	r5,r22,8
 8129eac:	9009883a 	mov	r4,r18
 8129eb0:	8128d080 	call	8128d08 <_free_r>
 8129eb4:	e4000217 	ldw	r16,8(fp)
 8129eb8:	003fd806 	br	8129e1c <_malloc_r+0x58c>
 8129ebc:	00800504 	movi	r2,20
 8129ec0:	11001536 	bltu	r2,r4,8129f18 <_malloc_r+0x688>
 8129ec4:	210016c4 	addi	r4,r4,91
 8129ec8:	200690fa 	slli	r3,r4,3
 8129ecc:	003fa606 	br	8129d68 <_malloc_r+0x4d8>
 8129ed0:	8804d4ba 	srli	r2,r17,18
 8129ed4:	11801f04 	addi	r6,r2,124
 8129ed8:	300490fa 	slli	r2,r6,3
 8129edc:	003e9906 	br	8129944 <_malloc_r+0xb4>
 8129ee0:	2009d0ba 	srai	r4,r4,2
 8129ee4:	014204f4 	movhi	r5,2067
 8129ee8:	29487904 	addi	r5,r5,8676
 8129eec:	00c00044 	movi	r3,1
 8129ef0:	28800117 	ldw	r2,4(r5)
 8129ef4:	1906983a 	sll	r3,r3,r4
 8129ef8:	10c4b03a 	or	r2,r2,r3
 8129efc:	28800115 	stw	r2,4(r5)
 8129f00:	003fa306 	br	8129d90 <_malloc_r+0x500>
 8129f04:	0027883a 	mov	r19,zero
 8129f08:	00c00044 	movi	r3,1
 8129f0c:	003f8606 	br	8129d28 <_malloc_r+0x498>
 8129f10:	d1200915 	stw	r4,-32732(gp)
 8129f14:	003f7306 	br	8129ce4 <_malloc_r+0x454>
 8129f18:	00801504 	movi	r2,84
 8129f1c:	11001936 	bltu	r2,r4,8129f84 <_malloc_r+0x6f4>
 8129f20:	2804d33a 	srli	r2,r5,12
 8129f24:	11001b84 	addi	r4,r2,110
 8129f28:	200690fa 	slli	r3,r4,3
 8129f2c:	003f8e06 	br	8129d68 <_malloc_r+0x4d8>
 8129f30:	480b883a 	mov	r5,r9
 8129f34:	6807883a 	mov	r3,r13
 8129f38:	288000cc 	andi	r2,r5,3
 8129f3c:	18fffe04 	addi	r3,r3,-8
 8129f40:	297fffc4 	addi	r5,r5,-1
 8129f44:	10001526 	beq	r2,zero,8129f9c <_malloc_r+0x70c>
 8129f48:	18800217 	ldw	r2,8(r3)
 8129f4c:	10fffa26 	beq	r2,r3,8129f38 <_malloc_r+0x6a8>
 8129f50:	2109883a 	add	r4,r4,r4
 8129f54:	393f1e36 	bltu	r7,r4,8129bd0 <_malloc_r+0x340>
 8129f58:	203f1d26 	beq	r4,zero,8129bd0 <_malloc_r+0x340>
 8129f5c:	21c4703a 	and	r2,r4,r7
 8129f60:	10000226 	beq	r2,zero,8129f6c <_malloc_r+0x6dc>
 8129f64:	6013883a 	mov	r9,r12
 8129f68:	003ee106 	br	8129af0 <_malloc_r+0x260>
 8129f6c:	2109883a 	add	r4,r4,r4
 8129f70:	3904703a 	and	r2,r7,r4
 8129f74:	63000104 	addi	r12,r12,4
 8129f78:	103ffc26 	beq	r2,zero,8129f6c <_malloc_r+0x6dc>
 8129f7c:	6013883a 	mov	r9,r12
 8129f80:	003edb06 	br	8129af0 <_malloc_r+0x260>
 8129f84:	00805504 	movi	r2,340
 8129f88:	11000836 	bltu	r2,r4,8129fac <_malloc_r+0x71c>
 8129f8c:	2804d3fa 	srli	r2,r5,15
 8129f90:	11001dc4 	addi	r4,r2,119
 8129f94:	200690fa 	slli	r3,r4,3
 8129f98:	003f7306 	br	8129d68 <_malloc_r+0x4d8>
 8129f9c:	0104303a 	nor	r2,zero,r4
 8129fa0:	388e703a 	and	r7,r7,r2
 8129fa4:	e1c00115 	stw	r7,4(fp)
 8129fa8:	003fe906 	br	8129f50 <_malloc_r+0x6c0>
 8129fac:	00815504 	movi	r2,1364
 8129fb0:	1100032e 	bgeu	r2,r4,8129fc0 <_malloc_r+0x730>
 8129fb4:	01001f84 	movi	r4,126
 8129fb8:	00c0fc04 	movi	r3,1008
 8129fbc:	003f6a06 	br	8129d68 <_malloc_r+0x4d8>
 8129fc0:	2804d4ba 	srli	r2,r5,18
 8129fc4:	11001f04 	addi	r4,r2,124
 8129fc8:	200690fa 	slli	r3,r4,3
 8129fcc:	003f6606 	br	8129d68 <_malloc_r+0x4d8>

08129fd0 <memchr>:
 8129fd0:	008000c4 	movi	r2,3
 8129fd4:	29403fcc 	andi	r5,r5,255
 8129fd8:	2007883a 	mov	r3,r4
 8129fdc:	1180022e 	bgeu	r2,r6,8129fe8 <memchr+0x18>
 8129fe0:	2084703a 	and	r2,r4,r2
 8129fe4:	10000b26 	beq	r2,zero,812a014 <memchr+0x44>
 8129fe8:	313fffc4 	addi	r4,r6,-1
 8129fec:	3000051e 	bne	r6,zero,812a004 <memchr+0x34>
 8129ff0:	00002c06 	br	812a0a4 <memchr+0xd4>
 8129ff4:	213fffc4 	addi	r4,r4,-1
 8129ff8:	00bfffc4 	movi	r2,-1
 8129ffc:	18c00044 	addi	r3,r3,1
 812a000:	20802826 	beq	r4,r2,812a0a4 <memchr+0xd4>
 812a004:	18800003 	ldbu	r2,0(r3)
 812a008:	28bffa1e 	bne	r5,r2,8129ff4 <memchr+0x24>
 812a00c:	1805883a 	mov	r2,r3
 812a010:	f800283a 	ret
 812a014:	0011883a 	mov	r8,zero
 812a018:	0007883a 	mov	r3,zero
 812a01c:	01c00104 	movi	r7,4
 812a020:	4004923a 	slli	r2,r8,8
 812a024:	18c00044 	addi	r3,r3,1
 812a028:	1151883a 	add	r8,r2,r5
 812a02c:	19fffc1e 	bne	r3,r7,812a020 <memchr+0x50>
 812a030:	02bfbff4 	movhi	r10,65279
 812a034:	52bfbfc4 	addi	r10,r10,-257
 812a038:	02602074 	movhi	r9,32897
 812a03c:	4a602004 	addi	r9,r9,-32640
 812a040:	02c000c4 	movi	r11,3
 812a044:	20800017 	ldw	r2,0(r4)
 812a048:	31bfff04 	addi	r6,r6,-4
 812a04c:	200f883a 	mov	r7,r4
 812a050:	1204f03a 	xor	r2,r2,r8
 812a054:	1287883a 	add	r3,r2,r10
 812a058:	1a46703a 	and	r3,r3,r9
 812a05c:	0084303a 	nor	r2,zero,r2
 812a060:	10c4703a 	and	r2,r2,r3
 812a064:	10000b26 	beq	r2,zero,812a094 <memchr+0xc4>
 812a068:	20800003 	ldbu	r2,0(r4)
 812a06c:	28800f26 	beq	r5,r2,812a0ac <memchr+0xdc>
 812a070:	20800043 	ldbu	r2,1(r4)
 812a074:	21c00044 	addi	r7,r4,1
 812a078:	28800c26 	beq	r5,r2,812a0ac <memchr+0xdc>
 812a07c:	20800083 	ldbu	r2,2(r4)
 812a080:	21c00084 	addi	r7,r4,2
 812a084:	28800926 	beq	r5,r2,812a0ac <memchr+0xdc>
 812a088:	208000c3 	ldbu	r2,3(r4)
 812a08c:	21c000c4 	addi	r7,r4,3
 812a090:	28800626 	beq	r5,r2,812a0ac <memchr+0xdc>
 812a094:	21000104 	addi	r4,r4,4
 812a098:	59bfea36 	bltu	r11,r6,812a044 <memchr+0x74>
 812a09c:	2007883a 	mov	r3,r4
 812a0a0:	003fd106 	br	8129fe8 <memchr+0x18>
 812a0a4:	0005883a 	mov	r2,zero
 812a0a8:	f800283a 	ret
 812a0ac:	3805883a 	mov	r2,r7
 812a0b0:	f800283a 	ret

0812a0b4 <memcpy>:
 812a0b4:	01c003c4 	movi	r7,15
 812a0b8:	2007883a 	mov	r3,r4
 812a0bc:	3980032e 	bgeu	r7,r6,812a0cc <memcpy+0x18>
 812a0c0:	2904b03a 	or	r2,r5,r4
 812a0c4:	108000cc 	andi	r2,r2,3
 812a0c8:	10000926 	beq	r2,zero,812a0f0 <memcpy+0x3c>
 812a0cc:	30000626 	beq	r6,zero,812a0e8 <memcpy+0x34>
 812a0d0:	30cd883a 	add	r6,r6,r3
 812a0d4:	28800003 	ldbu	r2,0(r5)
 812a0d8:	29400044 	addi	r5,r5,1
 812a0dc:	18800005 	stb	r2,0(r3)
 812a0e0:	18c00044 	addi	r3,r3,1
 812a0e4:	30fffb1e 	bne	r6,r3,812a0d4 <memcpy+0x20>
 812a0e8:	2005883a 	mov	r2,r4
 812a0ec:	f800283a 	ret
 812a0f0:	3811883a 	mov	r8,r7
 812a0f4:	200f883a 	mov	r7,r4
 812a0f8:	28c00017 	ldw	r3,0(r5)
 812a0fc:	31bffc04 	addi	r6,r6,-16
 812a100:	38c00015 	stw	r3,0(r7)
 812a104:	28800117 	ldw	r2,4(r5)
 812a108:	38800115 	stw	r2,4(r7)
 812a10c:	28c00217 	ldw	r3,8(r5)
 812a110:	38c00215 	stw	r3,8(r7)
 812a114:	28800317 	ldw	r2,12(r5)
 812a118:	29400404 	addi	r5,r5,16
 812a11c:	38800315 	stw	r2,12(r7)
 812a120:	39c00404 	addi	r7,r7,16
 812a124:	41bff436 	bltu	r8,r6,812a0f8 <memcpy+0x44>
 812a128:	008000c4 	movi	r2,3
 812a12c:	1180072e 	bgeu	r2,r6,812a14c <memcpy+0x98>
 812a130:	1007883a 	mov	r3,r2
 812a134:	28800017 	ldw	r2,0(r5)
 812a138:	31bfff04 	addi	r6,r6,-4
 812a13c:	29400104 	addi	r5,r5,4
 812a140:	38800015 	stw	r2,0(r7)
 812a144:	39c00104 	addi	r7,r7,4
 812a148:	19bffa36 	bltu	r3,r6,812a134 <memcpy+0x80>
 812a14c:	3807883a 	mov	r3,r7
 812a150:	003fde06 	br	812a0cc <memcpy+0x18>

0812a154 <memmove>:
 812a154:	2807883a 	mov	r3,r5
 812a158:	2011883a 	mov	r8,r4
 812a15c:	29000c2e 	bgeu	r5,r4,812a190 <memmove+0x3c>
 812a160:	298f883a 	add	r7,r5,r6
 812a164:	21c00a2e 	bgeu	r4,r7,812a190 <memmove+0x3c>
 812a168:	30000726 	beq	r6,zero,812a188 <memmove+0x34>
 812a16c:	2187883a 	add	r3,r4,r6
 812a170:	198dc83a 	sub	r6,r3,r6
 812a174:	39ffffc4 	addi	r7,r7,-1
 812a178:	38800003 	ldbu	r2,0(r7)
 812a17c:	18ffffc4 	addi	r3,r3,-1
 812a180:	18800005 	stb	r2,0(r3)
 812a184:	19bffb1e 	bne	r3,r6,812a174 <memmove+0x20>
 812a188:	2005883a 	mov	r2,r4
 812a18c:	f800283a 	ret
 812a190:	01c003c4 	movi	r7,15
 812a194:	39800a36 	bltu	r7,r6,812a1c0 <memmove+0x6c>
 812a198:	303ffb26 	beq	r6,zero,812a188 <memmove+0x34>
 812a19c:	400f883a 	mov	r7,r8
 812a1a0:	320d883a 	add	r6,r6,r8
 812a1a4:	28800003 	ldbu	r2,0(r5)
 812a1a8:	29400044 	addi	r5,r5,1
 812a1ac:	38800005 	stb	r2,0(r7)
 812a1b0:	39c00044 	addi	r7,r7,1
 812a1b4:	39bffb1e 	bne	r7,r6,812a1a4 <memmove+0x50>
 812a1b8:	2005883a 	mov	r2,r4
 812a1bc:	f800283a 	ret
 812a1c0:	1904b03a 	or	r2,r3,r4
 812a1c4:	108000cc 	andi	r2,r2,3
 812a1c8:	103ff31e 	bne	r2,zero,812a198 <memmove+0x44>
 812a1cc:	3811883a 	mov	r8,r7
 812a1d0:	180b883a 	mov	r5,r3
 812a1d4:	200f883a 	mov	r7,r4
 812a1d8:	28c00017 	ldw	r3,0(r5)
 812a1dc:	31bffc04 	addi	r6,r6,-16
 812a1e0:	38c00015 	stw	r3,0(r7)
 812a1e4:	28800117 	ldw	r2,4(r5)
 812a1e8:	38800115 	stw	r2,4(r7)
 812a1ec:	28c00217 	ldw	r3,8(r5)
 812a1f0:	38c00215 	stw	r3,8(r7)
 812a1f4:	28800317 	ldw	r2,12(r5)
 812a1f8:	29400404 	addi	r5,r5,16
 812a1fc:	38800315 	stw	r2,12(r7)
 812a200:	39c00404 	addi	r7,r7,16
 812a204:	41bff436 	bltu	r8,r6,812a1d8 <memmove+0x84>
 812a208:	008000c4 	movi	r2,3
 812a20c:	1180072e 	bgeu	r2,r6,812a22c <memmove+0xd8>
 812a210:	1007883a 	mov	r3,r2
 812a214:	28800017 	ldw	r2,0(r5)
 812a218:	31bfff04 	addi	r6,r6,-4
 812a21c:	29400104 	addi	r5,r5,4
 812a220:	38800015 	stw	r2,0(r7)
 812a224:	39c00104 	addi	r7,r7,4
 812a228:	19bffa36 	bltu	r3,r6,812a214 <memmove+0xc0>
 812a22c:	3811883a 	mov	r8,r7
 812a230:	003fd906 	br	812a198 <memmove+0x44>

0812a234 <memset>:
 812a234:	008000c4 	movi	r2,3
 812a238:	29403fcc 	andi	r5,r5,255
 812a23c:	2007883a 	mov	r3,r4
 812a240:	1180022e 	bgeu	r2,r6,812a24c <memset+0x18>
 812a244:	2084703a 	and	r2,r4,r2
 812a248:	10000826 	beq	r2,zero,812a26c <memset+0x38>
 812a24c:	30000526 	beq	r6,zero,812a264 <memset+0x30>
 812a250:	2805883a 	mov	r2,r5
 812a254:	30cd883a 	add	r6,r6,r3
 812a258:	18800005 	stb	r2,0(r3)
 812a25c:	18c00044 	addi	r3,r3,1
 812a260:	19bffd1e 	bne	r3,r6,812a258 <memset+0x24>
 812a264:	2005883a 	mov	r2,r4
 812a268:	f800283a 	ret
 812a26c:	2804923a 	slli	r2,r5,8
 812a270:	020003c4 	movi	r8,15
 812a274:	200f883a 	mov	r7,r4
 812a278:	2884b03a 	or	r2,r5,r2
 812a27c:	1006943a 	slli	r3,r2,16
 812a280:	10c6b03a 	or	r3,r2,r3
 812a284:	41800a2e 	bgeu	r8,r6,812a2b0 <memset+0x7c>
 812a288:	4005883a 	mov	r2,r8
 812a28c:	31bffc04 	addi	r6,r6,-16
 812a290:	38c00015 	stw	r3,0(r7)
 812a294:	38c00115 	stw	r3,4(r7)
 812a298:	38c00215 	stw	r3,8(r7)
 812a29c:	38c00315 	stw	r3,12(r7)
 812a2a0:	39c00404 	addi	r7,r7,16
 812a2a4:	11bff936 	bltu	r2,r6,812a28c <memset+0x58>
 812a2a8:	008000c4 	movi	r2,3
 812a2ac:	1180052e 	bgeu	r2,r6,812a2c4 <memset+0x90>
 812a2b0:	31bfff04 	addi	r6,r6,-4
 812a2b4:	008000c4 	movi	r2,3
 812a2b8:	38c00015 	stw	r3,0(r7)
 812a2bc:	39c00104 	addi	r7,r7,4
 812a2c0:	11bffb36 	bltu	r2,r6,812a2b0 <memset+0x7c>
 812a2c4:	3807883a 	mov	r3,r7
 812a2c8:	003fe006 	br	812a24c <memset+0x18>

0812a2cc <_Bfree>:
 812a2cc:	28000826 	beq	r5,zero,812a2f0 <_Bfree+0x24>
 812a2d0:	28800117 	ldw	r2,4(r5)
 812a2d4:	21001317 	ldw	r4,76(r4)
 812a2d8:	1085883a 	add	r2,r2,r2
 812a2dc:	1085883a 	add	r2,r2,r2
 812a2e0:	1105883a 	add	r2,r2,r4
 812a2e4:	10c00017 	ldw	r3,0(r2)
 812a2e8:	28c00015 	stw	r3,0(r5)
 812a2ec:	11400015 	stw	r5,0(r2)
 812a2f0:	f800283a 	ret

0812a2f4 <__hi0bits>:
 812a2f4:	20bfffec 	andhi	r2,r4,65535
 812a2f8:	10001426 	beq	r2,zero,812a34c <__hi0bits+0x58>
 812a2fc:	0007883a 	mov	r3,zero
 812a300:	20bfc02c 	andhi	r2,r4,65280
 812a304:	1000021e 	bne	r2,zero,812a310 <__hi0bits+0x1c>
 812a308:	2008923a 	slli	r4,r4,8
 812a30c:	18c00204 	addi	r3,r3,8
 812a310:	20bc002c 	andhi	r2,r4,61440
 812a314:	1000021e 	bne	r2,zero,812a320 <__hi0bits+0x2c>
 812a318:	2008913a 	slli	r4,r4,4
 812a31c:	18c00104 	addi	r3,r3,4
 812a320:	20b0002c 	andhi	r2,r4,49152
 812a324:	1000031e 	bne	r2,zero,812a334 <__hi0bits+0x40>
 812a328:	2105883a 	add	r2,r4,r4
 812a32c:	18c00084 	addi	r3,r3,2
 812a330:	1089883a 	add	r4,r2,r2
 812a334:	20000316 	blt	r4,zero,812a344 <__hi0bits+0x50>
 812a338:	2090002c 	andhi	r2,r4,16384
 812a33c:	10000626 	beq	r2,zero,812a358 <__hi0bits+0x64>
 812a340:	18c00044 	addi	r3,r3,1
 812a344:	1805883a 	mov	r2,r3
 812a348:	f800283a 	ret
 812a34c:	2008943a 	slli	r4,r4,16
 812a350:	00c00404 	movi	r3,16
 812a354:	003fea06 	br	812a300 <__hi0bits+0xc>
 812a358:	00c00804 	movi	r3,32
 812a35c:	1805883a 	mov	r2,r3
 812a360:	f800283a 	ret

0812a364 <__lo0bits>:
 812a364:	20c00017 	ldw	r3,0(r4)
 812a368:	188001cc 	andi	r2,r3,7
 812a36c:	10000a26 	beq	r2,zero,812a398 <__lo0bits+0x34>
 812a370:	1880004c 	andi	r2,r3,1
 812a374:	1005003a 	cmpeq	r2,r2,zero
 812a378:	10002126 	beq	r2,zero,812a400 <__lo0bits+0x9c>
 812a37c:	1880008c 	andi	r2,r3,2
 812a380:	1000251e 	bne	r2,zero,812a418 <__lo0bits+0xb4>
 812a384:	1804d0ba 	srli	r2,r3,2
 812a388:	01400084 	movi	r5,2
 812a38c:	20800015 	stw	r2,0(r4)
 812a390:	2805883a 	mov	r2,r5
 812a394:	f800283a 	ret
 812a398:	18bfffcc 	andi	r2,r3,65535
 812a39c:	10001526 	beq	r2,zero,812a3f4 <__lo0bits+0x90>
 812a3a0:	000b883a 	mov	r5,zero
 812a3a4:	18803fcc 	andi	r2,r3,255
 812a3a8:	1000021e 	bne	r2,zero,812a3b4 <__lo0bits+0x50>
 812a3ac:	1806d23a 	srli	r3,r3,8
 812a3b0:	29400204 	addi	r5,r5,8
 812a3b4:	188003cc 	andi	r2,r3,15
 812a3b8:	1000021e 	bne	r2,zero,812a3c4 <__lo0bits+0x60>
 812a3bc:	1806d13a 	srli	r3,r3,4
 812a3c0:	29400104 	addi	r5,r5,4
 812a3c4:	188000cc 	andi	r2,r3,3
 812a3c8:	1000021e 	bne	r2,zero,812a3d4 <__lo0bits+0x70>
 812a3cc:	1806d0ba 	srli	r3,r3,2
 812a3d0:	29400084 	addi	r5,r5,2
 812a3d4:	1880004c 	andi	r2,r3,1
 812a3d8:	1000031e 	bne	r2,zero,812a3e8 <__lo0bits+0x84>
 812a3dc:	1806d07a 	srli	r3,r3,1
 812a3e0:	18000a26 	beq	r3,zero,812a40c <__lo0bits+0xa8>
 812a3e4:	29400044 	addi	r5,r5,1
 812a3e8:	2805883a 	mov	r2,r5
 812a3ec:	20c00015 	stw	r3,0(r4)
 812a3f0:	f800283a 	ret
 812a3f4:	1806d43a 	srli	r3,r3,16
 812a3f8:	01400404 	movi	r5,16
 812a3fc:	003fe906 	br	812a3a4 <__lo0bits+0x40>
 812a400:	000b883a 	mov	r5,zero
 812a404:	2805883a 	mov	r2,r5
 812a408:	f800283a 	ret
 812a40c:	01400804 	movi	r5,32
 812a410:	2805883a 	mov	r2,r5
 812a414:	f800283a 	ret
 812a418:	1804d07a 	srli	r2,r3,1
 812a41c:	01400044 	movi	r5,1
 812a420:	20800015 	stw	r2,0(r4)
 812a424:	003fda06 	br	812a390 <__lo0bits+0x2c>

0812a428 <__mcmp>:
 812a428:	20800417 	ldw	r2,16(r4)
 812a42c:	28c00417 	ldw	r3,16(r5)
 812a430:	10cfc83a 	sub	r7,r2,r3
 812a434:	38000c1e 	bne	r7,zero,812a468 <__mcmp+0x40>
 812a438:	18c5883a 	add	r2,r3,r3
 812a43c:	1085883a 	add	r2,r2,r2
 812a440:	10c00504 	addi	r3,r2,20
 812a444:	21000504 	addi	r4,r4,20
 812a448:	28cb883a 	add	r5,r5,r3
 812a44c:	2085883a 	add	r2,r4,r2
 812a450:	10bfff04 	addi	r2,r2,-4
 812a454:	297fff04 	addi	r5,r5,-4
 812a458:	11800017 	ldw	r6,0(r2)
 812a45c:	28c00017 	ldw	r3,0(r5)
 812a460:	30c0031e 	bne	r6,r3,812a470 <__mcmp+0x48>
 812a464:	20bffa36 	bltu	r4,r2,812a450 <__mcmp+0x28>
 812a468:	3805883a 	mov	r2,r7
 812a46c:	f800283a 	ret
 812a470:	30c00336 	bltu	r6,r3,812a480 <__mcmp+0x58>
 812a474:	01c00044 	movi	r7,1
 812a478:	3805883a 	mov	r2,r7
 812a47c:	f800283a 	ret
 812a480:	01ffffc4 	movi	r7,-1
 812a484:	003ff806 	br	812a468 <__mcmp+0x40>

0812a488 <__ulp>:
 812a488:	295ffc2c 	andhi	r5,r5,32752
 812a48c:	013f3034 	movhi	r4,64704
 812a490:	290b883a 	add	r5,r5,r4
 812a494:	0145c83a 	sub	r2,zero,r5
 812a498:	1007d53a 	srai	r3,r2,20
 812a49c:	000d883a 	mov	r6,zero
 812a4a0:	0140040e 	bge	zero,r5,812a4b4 <__ulp+0x2c>
 812a4a4:	280f883a 	mov	r7,r5
 812a4a8:	3807883a 	mov	r3,r7
 812a4ac:	3005883a 	mov	r2,r6
 812a4b0:	f800283a 	ret
 812a4b4:	008004c4 	movi	r2,19
 812a4b8:	193ffb04 	addi	r4,r3,-20
 812a4bc:	10c00c0e 	bge	r2,r3,812a4f0 <__ulp+0x68>
 812a4c0:	008007c4 	movi	r2,31
 812a4c4:	1107c83a 	sub	r3,r2,r4
 812a4c8:	00800784 	movi	r2,30
 812a4cc:	01400044 	movi	r5,1
 812a4d0:	11000216 	blt	r2,r4,812a4dc <__ulp+0x54>
 812a4d4:	00800044 	movi	r2,1
 812a4d8:	10ca983a 	sll	r5,r2,r3
 812a4dc:	000f883a 	mov	r7,zero
 812a4e0:	280d883a 	mov	r6,r5
 812a4e4:	3807883a 	mov	r3,r7
 812a4e8:	3005883a 	mov	r2,r6
 812a4ec:	f800283a 	ret
 812a4f0:	00800234 	movhi	r2,8
 812a4f4:	10cfd83a 	sra	r7,r2,r3
 812a4f8:	000d883a 	mov	r6,zero
 812a4fc:	3005883a 	mov	r2,r6
 812a500:	3807883a 	mov	r3,r7
 812a504:	f800283a 	ret

0812a508 <__b2d>:
 812a508:	20800417 	ldw	r2,16(r4)
 812a50c:	defff904 	addi	sp,sp,-28
 812a510:	dd000415 	stw	r20,16(sp)
 812a514:	1085883a 	add	r2,r2,r2
 812a518:	25000504 	addi	r20,r4,20
 812a51c:	1085883a 	add	r2,r2,r2
 812a520:	dc000015 	stw	r16,0(sp)
 812a524:	a0a1883a 	add	r16,r20,r2
 812a528:	dd400515 	stw	r21,20(sp)
 812a52c:	857fff17 	ldw	r21,-4(r16)
 812a530:	dc400115 	stw	r17,4(sp)
 812a534:	dfc00615 	stw	ra,24(sp)
 812a538:	a809883a 	mov	r4,r21
 812a53c:	2823883a 	mov	r17,r5
 812a540:	dcc00315 	stw	r19,12(sp)
 812a544:	dc800215 	stw	r18,8(sp)
 812a548:	812a2f40 	call	812a2f4 <__hi0bits>
 812a54c:	100b883a 	mov	r5,r2
 812a550:	00800804 	movi	r2,32
 812a554:	1145c83a 	sub	r2,r2,r5
 812a558:	88800015 	stw	r2,0(r17)
 812a55c:	00800284 	movi	r2,10
 812a560:	80ffff04 	addi	r3,r16,-4
 812a564:	11401416 	blt	r2,r5,812a5b8 <__b2d+0xb0>
 812a568:	008002c4 	movi	r2,11
 812a56c:	1149c83a 	sub	r4,r2,r5
 812a570:	a0c02736 	bltu	r20,r3,812a610 <__b2d+0x108>
 812a574:	000d883a 	mov	r6,zero
 812a578:	28800544 	addi	r2,r5,21
 812a57c:	a906d83a 	srl	r3,r21,r4
 812a580:	a884983a 	sll	r2,r21,r2
 812a584:	1ccffc34 	orhi	r19,r3,16368
 812a588:	11a4b03a 	or	r18,r2,r6
 812a58c:	9005883a 	mov	r2,r18
 812a590:	9807883a 	mov	r3,r19
 812a594:	dfc00617 	ldw	ra,24(sp)
 812a598:	dd400517 	ldw	r21,20(sp)
 812a59c:	dd000417 	ldw	r20,16(sp)
 812a5a0:	dcc00317 	ldw	r19,12(sp)
 812a5a4:	dc800217 	ldw	r18,8(sp)
 812a5a8:	dc400117 	ldw	r17,4(sp)
 812a5ac:	dc000017 	ldw	r16,0(sp)
 812a5b0:	dec00704 	addi	sp,sp,28
 812a5b4:	f800283a 	ret
 812a5b8:	a0c00e36 	bltu	r20,r3,812a5f4 <__b2d+0xec>
 812a5bc:	293ffd44 	addi	r4,r5,-11
 812a5c0:	000d883a 	mov	r6,zero
 812a5c4:	20000f26 	beq	r4,zero,812a604 <__b2d+0xfc>
 812a5c8:	00800804 	movi	r2,32
 812a5cc:	110bc83a 	sub	r5,r2,r4
 812a5d0:	a0c01236 	bltu	r20,r3,812a61c <__b2d+0x114>
 812a5d4:	000f883a 	mov	r7,zero
 812a5d8:	a904983a 	sll	r2,r21,r4
 812a5dc:	3146d83a 	srl	r3,r6,r5
 812a5e0:	3108983a 	sll	r4,r6,r4
 812a5e4:	108ffc34 	orhi	r2,r2,16368
 812a5e8:	18a6b03a 	or	r19,r3,r2
 812a5ec:	3924b03a 	or	r18,r7,r4
 812a5f0:	003fe606 	br	812a58c <__b2d+0x84>
 812a5f4:	293ffd44 	addi	r4,r5,-11
 812a5f8:	81bffe17 	ldw	r6,-8(r16)
 812a5fc:	80fffe04 	addi	r3,r16,-8
 812a600:	203ff11e 	bne	r4,zero,812a5c8 <__b2d+0xc0>
 812a604:	accffc34 	orhi	r19,r21,16368
 812a608:	3025883a 	mov	r18,r6
 812a60c:	003fdf06 	br	812a58c <__b2d+0x84>
 812a610:	18bfff17 	ldw	r2,-4(r3)
 812a614:	110cd83a 	srl	r6,r2,r4
 812a618:	003fd706 	br	812a578 <__b2d+0x70>
 812a61c:	18bfff17 	ldw	r2,-4(r3)
 812a620:	114ed83a 	srl	r7,r2,r5
 812a624:	003fec06 	br	812a5d8 <__b2d+0xd0>

0812a628 <__ratio>:
 812a628:	defff904 	addi	sp,sp,-28
 812a62c:	dc400215 	stw	r17,8(sp)
 812a630:	2823883a 	mov	r17,r5
 812a634:	d80b883a 	mov	r5,sp
 812a638:	dfc00615 	stw	ra,24(sp)
 812a63c:	dd000515 	stw	r20,20(sp)
 812a640:	dcc00415 	stw	r19,16(sp)
 812a644:	dc800315 	stw	r18,12(sp)
 812a648:	2025883a 	mov	r18,r4
 812a64c:	812a5080 	call	812a508 <__b2d>
 812a650:	8809883a 	mov	r4,r17
 812a654:	d9400104 	addi	r5,sp,4
 812a658:	1027883a 	mov	r19,r2
 812a65c:	1829883a 	mov	r20,r3
 812a660:	812a5080 	call	812a508 <__b2d>
 812a664:	89000417 	ldw	r4,16(r17)
 812a668:	91c00417 	ldw	r7,16(r18)
 812a66c:	d9800117 	ldw	r6,4(sp)
 812a670:	180b883a 	mov	r5,r3
 812a674:	390fc83a 	sub	r7,r7,r4
 812a678:	1009883a 	mov	r4,r2
 812a67c:	d8800017 	ldw	r2,0(sp)
 812a680:	380e917a 	slli	r7,r7,5
 812a684:	2011883a 	mov	r8,r4
 812a688:	1185c83a 	sub	r2,r2,r6
 812a68c:	11c5883a 	add	r2,r2,r7
 812a690:	1006953a 	slli	r3,r2,20
 812a694:	2813883a 	mov	r9,r5
 812a698:	00800d0e 	bge	zero,r2,812a6d0 <__ratio+0xa8>
 812a69c:	1d29883a 	add	r20,r3,r20
 812a6a0:	a00b883a 	mov	r5,r20
 812a6a4:	480f883a 	mov	r7,r9
 812a6a8:	9809883a 	mov	r4,r19
 812a6ac:	400d883a 	mov	r6,r8
 812a6b0:	8123bf40 	call	8123bf4 <__divdf3>
 812a6b4:	dfc00617 	ldw	ra,24(sp)
 812a6b8:	dd000517 	ldw	r20,20(sp)
 812a6bc:	dcc00417 	ldw	r19,16(sp)
 812a6c0:	dc800317 	ldw	r18,12(sp)
 812a6c4:	dc400217 	ldw	r17,8(sp)
 812a6c8:	dec00704 	addi	sp,sp,28
 812a6cc:	f800283a 	ret
 812a6d0:	28d3c83a 	sub	r9,r5,r3
 812a6d4:	003ff206 	br	812a6a0 <__ratio+0x78>

0812a6d8 <_mprec_log10>:
 812a6d8:	defffe04 	addi	sp,sp,-8
 812a6dc:	008005c4 	movi	r2,23
 812a6e0:	dc000015 	stw	r16,0(sp)
 812a6e4:	dfc00115 	stw	ra,4(sp)
 812a6e8:	2021883a 	mov	r16,r4
 812a6ec:	11000c16 	blt	r2,r4,812a720 <_mprec_log10+0x48>
 812a6f0:	200490fa 	slli	r2,r4,3
 812a6f4:	00c204f4 	movhi	r3,2067
 812a6f8:	18c6d804 	addi	r3,r3,7008
 812a6fc:	10c5883a 	add	r2,r2,r3
 812a700:	12400117 	ldw	r9,4(r2)
 812a704:	12000017 	ldw	r8,0(r2)
 812a708:	4807883a 	mov	r3,r9
 812a70c:	4005883a 	mov	r2,r8
 812a710:	dfc00117 	ldw	ra,4(sp)
 812a714:	dc000017 	ldw	r16,0(sp)
 812a718:	dec00204 	addi	sp,sp,8
 812a71c:	f800283a 	ret
 812a720:	0011883a 	mov	r8,zero
 812a724:	024ffc34 	movhi	r9,16368
 812a728:	0005883a 	mov	r2,zero
 812a72c:	00d00934 	movhi	r3,16420
 812a730:	480b883a 	mov	r5,r9
 812a734:	4009883a 	mov	r4,r8
 812a738:	180f883a 	mov	r7,r3
 812a73c:	100d883a 	mov	r6,r2
 812a740:	81238300 	call	8123830 <__muldf3>
 812a744:	843fffc4 	addi	r16,r16,-1
 812a748:	1011883a 	mov	r8,r2
 812a74c:	1813883a 	mov	r9,r3
 812a750:	803ff51e 	bne	r16,zero,812a728 <_mprec_log10+0x50>
 812a754:	4005883a 	mov	r2,r8
 812a758:	4807883a 	mov	r3,r9
 812a75c:	dfc00117 	ldw	ra,4(sp)
 812a760:	dc000017 	ldw	r16,0(sp)
 812a764:	dec00204 	addi	sp,sp,8
 812a768:	f800283a 	ret

0812a76c <__copybits>:
 812a76c:	297fffc4 	addi	r5,r5,-1
 812a770:	30800417 	ldw	r2,16(r6)
 812a774:	280bd17a 	srai	r5,r5,5
 812a778:	31800504 	addi	r6,r6,20
 812a77c:	1085883a 	add	r2,r2,r2
 812a780:	294b883a 	add	r5,r5,r5
 812a784:	294b883a 	add	r5,r5,r5
 812a788:	1085883a 	add	r2,r2,r2
 812a78c:	290b883a 	add	r5,r5,r4
 812a790:	3087883a 	add	r3,r6,r2
 812a794:	29400104 	addi	r5,r5,4
 812a798:	30c0052e 	bgeu	r6,r3,812a7b0 <__copybits+0x44>
 812a79c:	30800017 	ldw	r2,0(r6)
 812a7a0:	31800104 	addi	r6,r6,4
 812a7a4:	20800015 	stw	r2,0(r4)
 812a7a8:	21000104 	addi	r4,r4,4
 812a7ac:	30fffb36 	bltu	r6,r3,812a79c <__copybits+0x30>
 812a7b0:	2140032e 	bgeu	r4,r5,812a7c0 <__copybits+0x54>
 812a7b4:	20000015 	stw	zero,0(r4)
 812a7b8:	21000104 	addi	r4,r4,4
 812a7bc:	217ffd36 	bltu	r4,r5,812a7b4 <__copybits+0x48>
 812a7c0:	f800283a 	ret

0812a7c4 <__any_on>:
 812a7c4:	20800417 	ldw	r2,16(r4)
 812a7c8:	2807d17a 	srai	r3,r5,5
 812a7cc:	21000504 	addi	r4,r4,20
 812a7d0:	10c00d0e 	bge	r2,r3,812a808 <__any_on+0x44>
 812a7d4:	1085883a 	add	r2,r2,r2
 812a7d8:	1085883a 	add	r2,r2,r2
 812a7dc:	208d883a 	add	r6,r4,r2
 812a7e0:	2180182e 	bgeu	r4,r6,812a844 <__any_on+0x80>
 812a7e4:	30bfff17 	ldw	r2,-4(r6)
 812a7e8:	30ffff04 	addi	r3,r6,-4
 812a7ec:	1000041e 	bne	r2,zero,812a800 <__any_on+0x3c>
 812a7f0:	20c0142e 	bgeu	r4,r3,812a844 <__any_on+0x80>
 812a7f4:	18ffff04 	addi	r3,r3,-4
 812a7f8:	18800017 	ldw	r2,0(r3)
 812a7fc:	103ffc26 	beq	r2,zero,812a7f0 <__any_on+0x2c>
 812a800:	00800044 	movi	r2,1
 812a804:	f800283a 	ret
 812a808:	18800a0e 	bge	r3,r2,812a834 <__any_on+0x70>
 812a80c:	294007cc 	andi	r5,r5,31
 812a810:	28000826 	beq	r5,zero,812a834 <__any_on+0x70>
 812a814:	18c5883a 	add	r2,r3,r3
 812a818:	1085883a 	add	r2,r2,r2
 812a81c:	208d883a 	add	r6,r4,r2
 812a820:	30c00017 	ldw	r3,0(r6)
 812a824:	1944d83a 	srl	r2,r3,r5
 812a828:	1144983a 	sll	r2,r2,r5
 812a82c:	18bff41e 	bne	r3,r2,812a800 <__any_on+0x3c>
 812a830:	003feb06 	br	812a7e0 <__any_on+0x1c>
 812a834:	18c5883a 	add	r2,r3,r3
 812a838:	1085883a 	add	r2,r2,r2
 812a83c:	208d883a 	add	r6,r4,r2
 812a840:	003fe706 	br	812a7e0 <__any_on+0x1c>
 812a844:	0005883a 	mov	r2,zero
 812a848:	f800283a 	ret

0812a84c <_Balloc>:
 812a84c:	20c01317 	ldw	r3,76(r4)
 812a850:	defffb04 	addi	sp,sp,-20
 812a854:	dcc00315 	stw	r19,12(sp)
 812a858:	dc800215 	stw	r18,8(sp)
 812a85c:	dfc00415 	stw	ra,16(sp)
 812a860:	2825883a 	mov	r18,r5
 812a864:	dc400115 	stw	r17,4(sp)
 812a868:	dc000015 	stw	r16,0(sp)
 812a86c:	2027883a 	mov	r19,r4
 812a870:	01800404 	movi	r6,16
 812a874:	01400104 	movi	r5,4
 812a878:	18001726 	beq	r3,zero,812a8d8 <_Balloc+0x8c>
 812a87c:	01400044 	movi	r5,1
 812a880:	9485883a 	add	r2,r18,r18
 812a884:	2ca2983a 	sll	r17,r5,r18
 812a888:	1085883a 	add	r2,r2,r2
 812a88c:	10c7883a 	add	r3,r2,r3
 812a890:	1c000017 	ldw	r16,0(r3)
 812a894:	8c4d883a 	add	r6,r17,r17
 812a898:	318d883a 	add	r6,r6,r6
 812a89c:	9809883a 	mov	r4,r19
 812a8a0:	31800504 	addi	r6,r6,20
 812a8a4:	80001226 	beq	r16,zero,812a8f0 <_Balloc+0xa4>
 812a8a8:	80800017 	ldw	r2,0(r16)
 812a8ac:	18800015 	stw	r2,0(r3)
 812a8b0:	80000415 	stw	zero,16(r16)
 812a8b4:	80000315 	stw	zero,12(r16)
 812a8b8:	8005883a 	mov	r2,r16
 812a8bc:	dfc00417 	ldw	ra,16(sp)
 812a8c0:	dcc00317 	ldw	r19,12(sp)
 812a8c4:	dc800217 	ldw	r18,8(sp)
 812a8c8:	dc400117 	ldw	r17,4(sp)
 812a8cc:	dc000017 	ldw	r16,0(sp)
 812a8d0:	dec00504 	addi	sp,sp,20
 812a8d4:	f800283a 	ret
 812a8d8:	812bbe40 	call	812bbe4 <_calloc_r>
 812a8dc:	1007883a 	mov	r3,r2
 812a8e0:	0021883a 	mov	r16,zero
 812a8e4:	98801315 	stw	r2,76(r19)
 812a8e8:	103fe41e 	bne	r2,zero,812a87c <_Balloc+0x30>
 812a8ec:	003ff206 	br	812a8b8 <_Balloc+0x6c>
 812a8f0:	812bbe40 	call	812bbe4 <_calloc_r>
 812a8f4:	103ff026 	beq	r2,zero,812a8b8 <_Balloc+0x6c>
 812a8f8:	1021883a 	mov	r16,r2
 812a8fc:	14800115 	stw	r18,4(r2)
 812a900:	14400215 	stw	r17,8(r2)
 812a904:	003fea06 	br	812a8b0 <_Balloc+0x64>

0812a908 <__d2b>:
 812a908:	defff504 	addi	sp,sp,-44
 812a90c:	dcc00515 	stw	r19,20(sp)
 812a910:	04c00044 	movi	r19,1
 812a914:	dc000215 	stw	r16,8(sp)
 812a918:	2821883a 	mov	r16,r5
 812a91c:	980b883a 	mov	r5,r19
 812a920:	ddc00915 	stw	r23,36(sp)
 812a924:	dd800815 	stw	r22,32(sp)
 812a928:	dd400715 	stw	r21,28(sp)
 812a92c:	dd000615 	stw	r20,24(sp)
 812a930:	dc800415 	stw	r18,16(sp)
 812a934:	dc400315 	stw	r17,12(sp)
 812a938:	dfc00a15 	stw	ra,40(sp)
 812a93c:	3023883a 	mov	r17,r6
 812a940:	382d883a 	mov	r22,r7
 812a944:	ddc00b17 	ldw	r23,44(sp)
 812a948:	812a84c0 	call	812a84c <_Balloc>
 812a94c:	1025883a 	mov	r18,r2
 812a950:	00a00034 	movhi	r2,32768
 812a954:	10bfffc4 	addi	r2,r2,-1
 812a958:	8888703a 	and	r4,r17,r2
 812a95c:	202ad53a 	srli	r21,r4,20
 812a960:	00800434 	movhi	r2,16
 812a964:	10bfffc4 	addi	r2,r2,-1
 812a968:	8886703a 	and	r3,r17,r2
 812a96c:	a829003a 	cmpeq	r20,r21,zero
 812a970:	800b883a 	mov	r5,r16
 812a974:	d8c00115 	stw	r3,4(sp)
 812a978:	94000504 	addi	r16,r18,20
 812a97c:	a000021e 	bne	r20,zero,812a988 <__d2b+0x80>
 812a980:	18c00434 	orhi	r3,r3,16
 812a984:	d8c00115 	stw	r3,4(sp)
 812a988:	28002726 	beq	r5,zero,812aa28 <__d2b+0x120>
 812a98c:	d809883a 	mov	r4,sp
 812a990:	d9400015 	stw	r5,0(sp)
 812a994:	812a3640 	call	812a364 <__lo0bits>
 812a998:	100d883a 	mov	r6,r2
 812a99c:	10003526 	beq	r2,zero,812aa74 <__d2b+0x16c>
 812a9a0:	d8c00117 	ldw	r3,4(sp)
 812a9a4:	00800804 	movi	r2,32
 812a9a8:	1185c83a 	sub	r2,r2,r6
 812a9ac:	d9000017 	ldw	r4,0(sp)
 812a9b0:	1886983a 	sll	r3,r3,r2
 812a9b4:	1906b03a 	or	r3,r3,r4
 812a9b8:	90c00515 	stw	r3,20(r18)
 812a9bc:	d8c00117 	ldw	r3,4(sp)
 812a9c0:	1986d83a 	srl	r3,r3,r6
 812a9c4:	d8c00115 	stw	r3,4(sp)
 812a9c8:	180b003a 	cmpeq	r5,r3,zero
 812a9cc:	00800084 	movi	r2,2
 812a9d0:	114bc83a 	sub	r5,r2,r5
 812a9d4:	80c00115 	stw	r3,4(r16)
 812a9d8:	91400415 	stw	r5,16(r18)
 812a9dc:	a0001a1e 	bne	r20,zero,812aa48 <__d2b+0x140>
 812a9e0:	3545883a 	add	r2,r6,r21
 812a9e4:	10bef344 	addi	r2,r2,-1075
 812a9e8:	00c00d44 	movi	r3,53
 812a9ec:	b0800015 	stw	r2,0(r22)
 812a9f0:	1987c83a 	sub	r3,r3,r6
 812a9f4:	b8c00015 	stw	r3,0(r23)
 812a9f8:	9005883a 	mov	r2,r18
 812a9fc:	dfc00a17 	ldw	ra,40(sp)
 812aa00:	ddc00917 	ldw	r23,36(sp)
 812aa04:	dd800817 	ldw	r22,32(sp)
 812aa08:	dd400717 	ldw	r21,28(sp)
 812aa0c:	dd000617 	ldw	r20,24(sp)
 812aa10:	dcc00517 	ldw	r19,20(sp)
 812aa14:	dc800417 	ldw	r18,16(sp)
 812aa18:	dc400317 	ldw	r17,12(sp)
 812aa1c:	dc000217 	ldw	r16,8(sp)
 812aa20:	dec00b04 	addi	sp,sp,44
 812aa24:	f800283a 	ret
 812aa28:	d9000104 	addi	r4,sp,4
 812aa2c:	812a3640 	call	812a364 <__lo0bits>
 812aa30:	11800804 	addi	r6,r2,32
 812aa34:	d8800117 	ldw	r2,4(sp)
 812aa38:	94c00415 	stw	r19,16(r18)
 812aa3c:	980b883a 	mov	r5,r19
 812aa40:	90800515 	stw	r2,20(r18)
 812aa44:	a03fe626 	beq	r20,zero,812a9e0 <__d2b+0xd8>
 812aa48:	2945883a 	add	r2,r5,r5
 812aa4c:	1085883a 	add	r2,r2,r2
 812aa50:	1405883a 	add	r2,r2,r16
 812aa54:	113fff17 	ldw	r4,-4(r2)
 812aa58:	30fef384 	addi	r3,r6,-1074
 812aa5c:	2820917a 	slli	r16,r5,5
 812aa60:	b0c00015 	stw	r3,0(r22)
 812aa64:	812a2f40 	call	812a2f4 <__hi0bits>
 812aa68:	80a1c83a 	sub	r16,r16,r2
 812aa6c:	bc000015 	stw	r16,0(r23)
 812aa70:	003fe106 	br	812a9f8 <__d2b+0xf0>
 812aa74:	d8800017 	ldw	r2,0(sp)
 812aa78:	90800515 	stw	r2,20(r18)
 812aa7c:	d8c00117 	ldw	r3,4(sp)
 812aa80:	003fd106 	br	812a9c8 <__d2b+0xc0>

0812aa84 <__mdiff>:
 812aa84:	defffb04 	addi	sp,sp,-20
 812aa88:	dc000015 	stw	r16,0(sp)
 812aa8c:	2821883a 	mov	r16,r5
 812aa90:	dc800215 	stw	r18,8(sp)
 812aa94:	300b883a 	mov	r5,r6
 812aa98:	2025883a 	mov	r18,r4
 812aa9c:	8009883a 	mov	r4,r16
 812aaa0:	dc400115 	stw	r17,4(sp)
 812aaa4:	dfc00415 	stw	ra,16(sp)
 812aaa8:	dcc00315 	stw	r19,12(sp)
 812aaac:	3023883a 	mov	r17,r6
 812aab0:	812a4280 	call	812a428 <__mcmp>
 812aab4:	10004226 	beq	r2,zero,812abc0 <__mdiff+0x13c>
 812aab8:	10005016 	blt	r2,zero,812abfc <__mdiff+0x178>
 812aabc:	0027883a 	mov	r19,zero
 812aac0:	81400117 	ldw	r5,4(r16)
 812aac4:	9009883a 	mov	r4,r18
 812aac8:	812a84c0 	call	812a84c <_Balloc>
 812aacc:	1019883a 	mov	r12,r2
 812aad0:	82800417 	ldw	r10,16(r16)
 812aad4:	88800417 	ldw	r2,16(r17)
 812aad8:	81800504 	addi	r6,r16,20
 812aadc:	5287883a 	add	r3,r10,r10
 812aae0:	1085883a 	add	r2,r2,r2
 812aae4:	18c7883a 	add	r3,r3,r3
 812aae8:	1085883a 	add	r2,r2,r2
 812aaec:	8a000504 	addi	r8,r17,20
 812aaf0:	64c00315 	stw	r19,12(r12)
 812aaf4:	30db883a 	add	r13,r6,r3
 812aaf8:	4097883a 	add	r11,r8,r2
 812aafc:	61c00504 	addi	r7,r12,20
 812ab00:	0013883a 	mov	r9,zero
 812ab04:	31000017 	ldw	r4,0(r6)
 812ab08:	41400017 	ldw	r5,0(r8)
 812ab0c:	42000104 	addi	r8,r8,4
 812ab10:	20bfffcc 	andi	r2,r4,65535
 812ab14:	28ffffcc 	andi	r3,r5,65535
 812ab18:	10c5c83a 	sub	r2,r2,r3
 812ab1c:	1245883a 	add	r2,r2,r9
 812ab20:	2008d43a 	srli	r4,r4,16
 812ab24:	280ad43a 	srli	r5,r5,16
 812ab28:	1007d43a 	srai	r3,r2,16
 812ab2c:	3880000d 	sth	r2,0(r7)
 812ab30:	2149c83a 	sub	r4,r4,r5
 812ab34:	20c9883a 	add	r4,r4,r3
 812ab38:	3900008d 	sth	r4,2(r7)
 812ab3c:	31800104 	addi	r6,r6,4
 812ab40:	39c00104 	addi	r7,r7,4
 812ab44:	2013d43a 	srai	r9,r4,16
 812ab48:	42ffee36 	bltu	r8,r11,812ab04 <__mdiff+0x80>
 812ab4c:	33400c2e 	bgeu	r6,r13,812ab80 <__mdiff+0xfc>
 812ab50:	30800017 	ldw	r2,0(r6)
 812ab54:	31800104 	addi	r6,r6,4
 812ab58:	10ffffcc 	andi	r3,r2,65535
 812ab5c:	1a47883a 	add	r3,r3,r9
 812ab60:	1004d43a 	srli	r2,r2,16
 812ab64:	1809d43a 	srai	r4,r3,16
 812ab68:	38c0000d 	sth	r3,0(r7)
 812ab6c:	1105883a 	add	r2,r2,r4
 812ab70:	3880008d 	sth	r2,2(r7)
 812ab74:	1013d43a 	srai	r9,r2,16
 812ab78:	39c00104 	addi	r7,r7,4
 812ab7c:	337ff436 	bltu	r6,r13,812ab50 <__mdiff+0xcc>
 812ab80:	38bfff17 	ldw	r2,-4(r7)
 812ab84:	38ffff04 	addi	r3,r7,-4
 812ab88:	1000041e 	bne	r2,zero,812ab9c <__mdiff+0x118>
 812ab8c:	18ffff04 	addi	r3,r3,-4
 812ab90:	18800017 	ldw	r2,0(r3)
 812ab94:	52bfffc4 	addi	r10,r10,-1
 812ab98:	103ffc26 	beq	r2,zero,812ab8c <__mdiff+0x108>
 812ab9c:	6005883a 	mov	r2,r12
 812aba0:	62800415 	stw	r10,16(r12)
 812aba4:	dfc00417 	ldw	ra,16(sp)
 812aba8:	dcc00317 	ldw	r19,12(sp)
 812abac:	dc800217 	ldw	r18,8(sp)
 812abb0:	dc400117 	ldw	r17,4(sp)
 812abb4:	dc000017 	ldw	r16,0(sp)
 812abb8:	dec00504 	addi	sp,sp,20
 812abbc:	f800283a 	ret
 812abc0:	9009883a 	mov	r4,r18
 812abc4:	000b883a 	mov	r5,zero
 812abc8:	812a84c0 	call	812a84c <_Balloc>
 812abcc:	1019883a 	mov	r12,r2
 812abd0:	00800044 	movi	r2,1
 812abd4:	60800415 	stw	r2,16(r12)
 812abd8:	6005883a 	mov	r2,r12
 812abdc:	60000515 	stw	zero,20(r12)
 812abe0:	dfc00417 	ldw	ra,16(sp)
 812abe4:	dcc00317 	ldw	r19,12(sp)
 812abe8:	dc800217 	ldw	r18,8(sp)
 812abec:	dc400117 	ldw	r17,4(sp)
 812abf0:	dc000017 	ldw	r16,0(sp)
 812abf4:	dec00504 	addi	sp,sp,20
 812abf8:	f800283a 	ret
 812abfc:	880d883a 	mov	r6,r17
 812ac00:	04c00044 	movi	r19,1
 812ac04:	8023883a 	mov	r17,r16
 812ac08:	3021883a 	mov	r16,r6
 812ac0c:	003fac06 	br	812aac0 <__mdiff+0x3c>

0812ac10 <__lshift>:
 812ac10:	defff904 	addi	sp,sp,-28
 812ac14:	28800417 	ldw	r2,16(r5)
 812ac18:	dc000015 	stw	r16,0(sp)
 812ac1c:	3021d17a 	srai	r16,r6,5
 812ac20:	28c00217 	ldw	r3,8(r5)
 812ac24:	10800044 	addi	r2,r2,1
 812ac28:	dc400115 	stw	r17,4(sp)
 812ac2c:	80a3883a 	add	r17,r16,r2
 812ac30:	dd400515 	stw	r21,20(sp)
 812ac34:	dd000415 	stw	r20,16(sp)
 812ac38:	dc800215 	stw	r18,8(sp)
 812ac3c:	dfc00615 	stw	ra,24(sp)
 812ac40:	2825883a 	mov	r18,r5
 812ac44:	dcc00315 	stw	r19,12(sp)
 812ac48:	3029883a 	mov	r20,r6
 812ac4c:	202b883a 	mov	r21,r4
 812ac50:	29400117 	ldw	r5,4(r5)
 812ac54:	1c40030e 	bge	r3,r17,812ac64 <__lshift+0x54>
 812ac58:	18c7883a 	add	r3,r3,r3
 812ac5c:	29400044 	addi	r5,r5,1
 812ac60:	1c7ffd16 	blt	r3,r17,812ac58 <__lshift+0x48>
 812ac64:	a809883a 	mov	r4,r21
 812ac68:	812a84c0 	call	812a84c <_Balloc>
 812ac6c:	1027883a 	mov	r19,r2
 812ac70:	11400504 	addi	r5,r2,20
 812ac74:	0400090e 	bge	zero,r16,812ac9c <__lshift+0x8c>
 812ac78:	2805883a 	mov	r2,r5
 812ac7c:	0007883a 	mov	r3,zero
 812ac80:	18c00044 	addi	r3,r3,1
 812ac84:	10000015 	stw	zero,0(r2)
 812ac88:	10800104 	addi	r2,r2,4
 812ac8c:	80fffc1e 	bne	r16,r3,812ac80 <__lshift+0x70>
 812ac90:	8405883a 	add	r2,r16,r16
 812ac94:	1085883a 	add	r2,r2,r2
 812ac98:	288b883a 	add	r5,r5,r2
 812ac9c:	90800417 	ldw	r2,16(r18)
 812aca0:	91000504 	addi	r4,r18,20
 812aca4:	a18007cc 	andi	r6,r20,31
 812aca8:	1085883a 	add	r2,r2,r2
 812acac:	1085883a 	add	r2,r2,r2
 812acb0:	208f883a 	add	r7,r4,r2
 812acb4:	30001e26 	beq	r6,zero,812ad30 <__lshift+0x120>
 812acb8:	00800804 	movi	r2,32
 812acbc:	1191c83a 	sub	r8,r2,r6
 812acc0:	0007883a 	mov	r3,zero
 812acc4:	20800017 	ldw	r2,0(r4)
 812acc8:	1184983a 	sll	r2,r2,r6
 812accc:	1884b03a 	or	r2,r3,r2
 812acd0:	28800015 	stw	r2,0(r5)
 812acd4:	20c00017 	ldw	r3,0(r4)
 812acd8:	21000104 	addi	r4,r4,4
 812acdc:	29400104 	addi	r5,r5,4
 812ace0:	1a06d83a 	srl	r3,r3,r8
 812ace4:	21fff736 	bltu	r4,r7,812acc4 <__lshift+0xb4>
 812ace8:	28c00015 	stw	r3,0(r5)
 812acec:	18000126 	beq	r3,zero,812acf4 <__lshift+0xe4>
 812acf0:	8c400044 	addi	r17,r17,1
 812acf4:	88bfffc4 	addi	r2,r17,-1
 812acf8:	98800415 	stw	r2,16(r19)
 812acfc:	a809883a 	mov	r4,r21
 812ad00:	900b883a 	mov	r5,r18
 812ad04:	812a2cc0 	call	812a2cc <_Bfree>
 812ad08:	9805883a 	mov	r2,r19
 812ad0c:	dfc00617 	ldw	ra,24(sp)
 812ad10:	dd400517 	ldw	r21,20(sp)
 812ad14:	dd000417 	ldw	r20,16(sp)
 812ad18:	dcc00317 	ldw	r19,12(sp)
 812ad1c:	dc800217 	ldw	r18,8(sp)
 812ad20:	dc400117 	ldw	r17,4(sp)
 812ad24:	dc000017 	ldw	r16,0(sp)
 812ad28:	dec00704 	addi	sp,sp,28
 812ad2c:	f800283a 	ret
 812ad30:	20800017 	ldw	r2,0(r4)
 812ad34:	21000104 	addi	r4,r4,4
 812ad38:	28800015 	stw	r2,0(r5)
 812ad3c:	29400104 	addi	r5,r5,4
 812ad40:	21ffec2e 	bgeu	r4,r7,812acf4 <__lshift+0xe4>
 812ad44:	20800017 	ldw	r2,0(r4)
 812ad48:	21000104 	addi	r4,r4,4
 812ad4c:	28800015 	stw	r2,0(r5)
 812ad50:	29400104 	addi	r5,r5,4
 812ad54:	21fff636 	bltu	r4,r7,812ad30 <__lshift+0x120>
 812ad58:	003fe606 	br	812acf4 <__lshift+0xe4>

0812ad5c <__multiply>:
 812ad5c:	defff904 	addi	sp,sp,-28
 812ad60:	dcc00315 	stw	r19,12(sp)
 812ad64:	dc800215 	stw	r18,8(sp)
 812ad68:	2cc00417 	ldw	r19,16(r5)
 812ad6c:	34800417 	ldw	r18,16(r6)
 812ad70:	dd000415 	stw	r20,16(sp)
 812ad74:	dc400115 	stw	r17,4(sp)
 812ad78:	dfc00615 	stw	ra,24(sp)
 812ad7c:	dd400515 	stw	r21,20(sp)
 812ad80:	dc000015 	stw	r16,0(sp)
 812ad84:	2823883a 	mov	r17,r5
 812ad88:	3029883a 	mov	r20,r6
 812ad8c:	9c80040e 	bge	r19,r18,812ada0 <__multiply+0x44>
 812ad90:	9027883a 	mov	r19,r18
 812ad94:	2c800417 	ldw	r18,16(r5)
 812ad98:	2829883a 	mov	r20,r5
 812ad9c:	3023883a 	mov	r17,r6
 812ada0:	88800217 	ldw	r2,8(r17)
 812ada4:	9ca1883a 	add	r16,r19,r18
 812ada8:	89400117 	ldw	r5,4(r17)
 812adac:	1400010e 	bge	r2,r16,812adb4 <__multiply+0x58>
 812adb0:	29400044 	addi	r5,r5,1
 812adb4:	812a84c0 	call	812a84c <_Balloc>
 812adb8:	102b883a 	mov	r21,r2
 812adbc:	8405883a 	add	r2,r16,r16
 812adc0:	1085883a 	add	r2,r2,r2
 812adc4:	a9000504 	addi	r4,r21,20
 812adc8:	209d883a 	add	r14,r4,r2
 812adcc:	2380042e 	bgeu	r4,r14,812ade0 <__multiply+0x84>
 812add0:	2005883a 	mov	r2,r4
 812add4:	10000015 	stw	zero,0(r2)
 812add8:	10800104 	addi	r2,r2,4
 812addc:	13bffd36 	bltu	r2,r14,812add4 <__multiply+0x78>
 812ade0:	9485883a 	add	r2,r18,r18
 812ade4:	9cc7883a 	add	r3,r19,r19
 812ade8:	a1800504 	addi	r6,r20,20
 812adec:	1085883a 	add	r2,r2,r2
 812adf0:	8b400504 	addi	r13,r17,20
 812adf4:	18c7883a 	add	r3,r3,r3
 812adf8:	309f883a 	add	r15,r6,r2
 812adfc:	68d7883a 	add	r11,r13,r3
 812ae00:	33c03b2e 	bgeu	r6,r15,812aef0 <__multiply+0x194>
 812ae04:	2019883a 	mov	r12,r4
 812ae08:	30800017 	ldw	r2,0(r6)
 812ae0c:	127fffcc 	andi	r9,r2,65535
 812ae10:	48001826 	beq	r9,zero,812ae74 <__multiply+0x118>
 812ae14:	6811883a 	mov	r8,r13
 812ae18:	600f883a 	mov	r7,r12
 812ae1c:	0015883a 	mov	r10,zero
 812ae20:	40c00017 	ldw	r3,0(r8)
 812ae24:	39400017 	ldw	r5,0(r7)
 812ae28:	42000104 	addi	r8,r8,4
 812ae2c:	193fffcc 	andi	r4,r3,65535
 812ae30:	4909383a 	mul	r4,r9,r4
 812ae34:	1806d43a 	srli	r3,r3,16
 812ae38:	28bfffcc 	andi	r2,r5,65535
 812ae3c:	5085883a 	add	r2,r10,r2
 812ae40:	2089883a 	add	r4,r4,r2
 812ae44:	48c7383a 	mul	r3,r9,r3
 812ae48:	280ad43a 	srli	r5,r5,16
 812ae4c:	2004d43a 	srli	r2,r4,16
 812ae50:	3900000d 	sth	r4,0(r7)
 812ae54:	1947883a 	add	r3,r3,r5
 812ae58:	10c5883a 	add	r2,r2,r3
 812ae5c:	3880008d 	sth	r2,2(r7)
 812ae60:	1014d43a 	srli	r10,r2,16
 812ae64:	39c00104 	addi	r7,r7,4
 812ae68:	42ffed36 	bltu	r8,r11,812ae20 <__multiply+0xc4>
 812ae6c:	3a800015 	stw	r10,0(r7)
 812ae70:	30800017 	ldw	r2,0(r6)
 812ae74:	1012d43a 	srli	r9,r2,16
 812ae78:	48001926 	beq	r9,zero,812aee0 <__multiply+0x184>
 812ae7c:	60800017 	ldw	r2,0(r12)
 812ae80:	6811883a 	mov	r8,r13
 812ae84:	600f883a 	mov	r7,r12
 812ae88:	0015883a 	mov	r10,zero
 812ae8c:	100b883a 	mov	r5,r2
 812ae90:	41000017 	ldw	r4,0(r8)
 812ae94:	2806d43a 	srli	r3,r5,16
 812ae98:	3880000d 	sth	r2,0(r7)
 812ae9c:	20bfffcc 	andi	r2,r4,65535
 812aea0:	4885383a 	mul	r2,r9,r2
 812aea4:	50c7883a 	add	r3,r10,r3
 812aea8:	2008d43a 	srli	r4,r4,16
 812aeac:	10c5883a 	add	r2,r2,r3
 812aeb0:	3880008d 	sth	r2,2(r7)
 812aeb4:	39c00104 	addi	r7,r7,4
 812aeb8:	39400017 	ldw	r5,0(r7)
 812aebc:	4909383a 	mul	r4,r9,r4
 812aec0:	1004d43a 	srli	r2,r2,16
 812aec4:	28ffffcc 	andi	r3,r5,65535
 812aec8:	20c9883a 	add	r4,r4,r3
 812aecc:	1105883a 	add	r2,r2,r4
 812aed0:	42000104 	addi	r8,r8,4
 812aed4:	1014d43a 	srli	r10,r2,16
 812aed8:	42ffed36 	bltu	r8,r11,812ae90 <__multiply+0x134>
 812aedc:	38800015 	stw	r2,0(r7)
 812aee0:	31800104 	addi	r6,r6,4
 812aee4:	33c0022e 	bgeu	r6,r15,812aef0 <__multiply+0x194>
 812aee8:	63000104 	addi	r12,r12,4
 812aeec:	003fc606 	br	812ae08 <__multiply+0xac>
 812aef0:	0400090e 	bge	zero,r16,812af18 <__multiply+0x1bc>
 812aef4:	70bfff17 	ldw	r2,-4(r14)
 812aef8:	70ffff04 	addi	r3,r14,-4
 812aefc:	10000326 	beq	r2,zero,812af0c <__multiply+0x1b0>
 812af00:	00000506 	br	812af18 <__multiply+0x1bc>
 812af04:	18800017 	ldw	r2,0(r3)
 812af08:	1000031e 	bne	r2,zero,812af18 <__multiply+0x1bc>
 812af0c:	843fffc4 	addi	r16,r16,-1
 812af10:	18ffff04 	addi	r3,r3,-4
 812af14:	803ffb1e 	bne	r16,zero,812af04 <__multiply+0x1a8>
 812af18:	a805883a 	mov	r2,r21
 812af1c:	ac000415 	stw	r16,16(r21)
 812af20:	dfc00617 	ldw	ra,24(sp)
 812af24:	dd400517 	ldw	r21,20(sp)
 812af28:	dd000417 	ldw	r20,16(sp)
 812af2c:	dcc00317 	ldw	r19,12(sp)
 812af30:	dc800217 	ldw	r18,8(sp)
 812af34:	dc400117 	ldw	r17,4(sp)
 812af38:	dc000017 	ldw	r16,0(sp)
 812af3c:	dec00704 	addi	sp,sp,28
 812af40:	f800283a 	ret

0812af44 <__i2b>:
 812af44:	defffd04 	addi	sp,sp,-12
 812af48:	dc000015 	stw	r16,0(sp)
 812af4c:	04000044 	movi	r16,1
 812af50:	dc800115 	stw	r18,4(sp)
 812af54:	2825883a 	mov	r18,r5
 812af58:	800b883a 	mov	r5,r16
 812af5c:	dfc00215 	stw	ra,8(sp)
 812af60:	812a84c0 	call	812a84c <_Balloc>
 812af64:	14000415 	stw	r16,16(r2)
 812af68:	14800515 	stw	r18,20(r2)
 812af6c:	dfc00217 	ldw	ra,8(sp)
 812af70:	dc800117 	ldw	r18,4(sp)
 812af74:	dc000017 	ldw	r16,0(sp)
 812af78:	dec00304 	addi	sp,sp,12
 812af7c:	f800283a 	ret

0812af80 <__multadd>:
 812af80:	defffa04 	addi	sp,sp,-24
 812af84:	dc800215 	stw	r18,8(sp)
 812af88:	2c800417 	ldw	r18,16(r5)
 812af8c:	dd000415 	stw	r20,16(sp)
 812af90:	dcc00315 	stw	r19,12(sp)
 812af94:	dc000015 	stw	r16,0(sp)
 812af98:	dfc00515 	stw	ra,20(sp)
 812af9c:	3821883a 	mov	r16,r7
 812afa0:	dc400115 	stw	r17,4(sp)
 812afa4:	2827883a 	mov	r19,r5
 812afa8:	2029883a 	mov	r20,r4
 812afac:	2a000504 	addi	r8,r5,20
 812afb0:	000f883a 	mov	r7,zero
 812afb4:	40800017 	ldw	r2,0(r8)
 812afb8:	39c00044 	addi	r7,r7,1
 812afbc:	10ffffcc 	andi	r3,r2,65535
 812afc0:	1987383a 	mul	r3,r3,r6
 812afc4:	1004d43a 	srli	r2,r2,16
 812afc8:	1c07883a 	add	r3,r3,r16
 812afcc:	180ad43a 	srli	r5,r3,16
 812afd0:	1185383a 	mul	r2,r2,r6
 812afd4:	18ffffcc 	andi	r3,r3,65535
 812afd8:	1145883a 	add	r2,r2,r5
 812afdc:	1008943a 	slli	r4,r2,16
 812afe0:	1020d43a 	srli	r16,r2,16
 812afe4:	20c9883a 	add	r4,r4,r3
 812afe8:	41000015 	stw	r4,0(r8)
 812afec:	42000104 	addi	r8,r8,4
 812aff0:	3cbff016 	blt	r7,r18,812afb4 <__multadd+0x34>
 812aff4:	80000826 	beq	r16,zero,812b018 <__multadd+0x98>
 812aff8:	98800217 	ldw	r2,8(r19)
 812affc:	90800f0e 	bge	r18,r2,812b03c <__multadd+0xbc>
 812b000:	9485883a 	add	r2,r18,r18
 812b004:	1085883a 	add	r2,r2,r2
 812b008:	14c5883a 	add	r2,r2,r19
 812b00c:	90c00044 	addi	r3,r18,1
 812b010:	14000515 	stw	r16,20(r2)
 812b014:	98c00415 	stw	r3,16(r19)
 812b018:	9805883a 	mov	r2,r19
 812b01c:	dfc00517 	ldw	ra,20(sp)
 812b020:	dd000417 	ldw	r20,16(sp)
 812b024:	dcc00317 	ldw	r19,12(sp)
 812b028:	dc800217 	ldw	r18,8(sp)
 812b02c:	dc400117 	ldw	r17,4(sp)
 812b030:	dc000017 	ldw	r16,0(sp)
 812b034:	dec00604 	addi	sp,sp,24
 812b038:	f800283a 	ret
 812b03c:	99400117 	ldw	r5,4(r19)
 812b040:	a009883a 	mov	r4,r20
 812b044:	29400044 	addi	r5,r5,1
 812b048:	812a84c0 	call	812a84c <_Balloc>
 812b04c:	99800417 	ldw	r6,16(r19)
 812b050:	99400304 	addi	r5,r19,12
 812b054:	11000304 	addi	r4,r2,12
 812b058:	318d883a 	add	r6,r6,r6
 812b05c:	318d883a 	add	r6,r6,r6
 812b060:	31800204 	addi	r6,r6,8
 812b064:	1023883a 	mov	r17,r2
 812b068:	812a0b40 	call	812a0b4 <memcpy>
 812b06c:	980b883a 	mov	r5,r19
 812b070:	a009883a 	mov	r4,r20
 812b074:	812a2cc0 	call	812a2cc <_Bfree>
 812b078:	8827883a 	mov	r19,r17
 812b07c:	003fe006 	br	812b000 <__multadd+0x80>

0812b080 <__pow5mult>:
 812b080:	defffa04 	addi	sp,sp,-24
 812b084:	308000cc 	andi	r2,r6,3
 812b088:	dd000415 	stw	r20,16(sp)
 812b08c:	dcc00315 	stw	r19,12(sp)
 812b090:	dc000015 	stw	r16,0(sp)
 812b094:	dfc00515 	stw	ra,20(sp)
 812b098:	dc800215 	stw	r18,8(sp)
 812b09c:	dc400115 	stw	r17,4(sp)
 812b0a0:	3021883a 	mov	r16,r6
 812b0a4:	2027883a 	mov	r19,r4
 812b0a8:	2829883a 	mov	r20,r5
 812b0ac:	10002b1e 	bne	r2,zero,812b15c <__pow5mult+0xdc>
 812b0b0:	8025d0ba 	srai	r18,r16,2
 812b0b4:	90001b26 	beq	r18,zero,812b124 <__pow5mult+0xa4>
 812b0b8:	9c001217 	ldw	r16,72(r19)
 812b0bc:	8000081e 	bne	r16,zero,812b0e0 <__pow5mult+0x60>
 812b0c0:	00003006 	br	812b184 <__pow5mult+0x104>
 812b0c4:	800b883a 	mov	r5,r16
 812b0c8:	800d883a 	mov	r6,r16
 812b0cc:	9809883a 	mov	r4,r19
 812b0d0:	90001426 	beq	r18,zero,812b124 <__pow5mult+0xa4>
 812b0d4:	80800017 	ldw	r2,0(r16)
 812b0d8:	10001b26 	beq	r2,zero,812b148 <__pow5mult+0xc8>
 812b0dc:	1021883a 	mov	r16,r2
 812b0e0:	9080004c 	andi	r2,r18,1
 812b0e4:	1005003a 	cmpeq	r2,r2,zero
 812b0e8:	9025d07a 	srai	r18,r18,1
 812b0ec:	800d883a 	mov	r6,r16
 812b0f0:	9809883a 	mov	r4,r19
 812b0f4:	a00b883a 	mov	r5,r20
 812b0f8:	103ff21e 	bne	r2,zero,812b0c4 <__pow5mult+0x44>
 812b0fc:	812ad5c0 	call	812ad5c <__multiply>
 812b100:	a00b883a 	mov	r5,r20
 812b104:	9809883a 	mov	r4,r19
 812b108:	1023883a 	mov	r17,r2
 812b10c:	812a2cc0 	call	812a2cc <_Bfree>
 812b110:	8829883a 	mov	r20,r17
 812b114:	800b883a 	mov	r5,r16
 812b118:	800d883a 	mov	r6,r16
 812b11c:	9809883a 	mov	r4,r19
 812b120:	903fec1e 	bne	r18,zero,812b0d4 <__pow5mult+0x54>
 812b124:	a005883a 	mov	r2,r20
 812b128:	dfc00517 	ldw	ra,20(sp)
 812b12c:	dd000417 	ldw	r20,16(sp)
 812b130:	dcc00317 	ldw	r19,12(sp)
 812b134:	dc800217 	ldw	r18,8(sp)
 812b138:	dc400117 	ldw	r17,4(sp)
 812b13c:	dc000017 	ldw	r16,0(sp)
 812b140:	dec00604 	addi	sp,sp,24
 812b144:	f800283a 	ret
 812b148:	812ad5c0 	call	812ad5c <__multiply>
 812b14c:	80800015 	stw	r2,0(r16)
 812b150:	1021883a 	mov	r16,r2
 812b154:	10000015 	stw	zero,0(r2)
 812b158:	003fe106 	br	812b0e0 <__pow5mult+0x60>
 812b15c:	1085883a 	add	r2,r2,r2
 812b160:	00c204f4 	movhi	r3,2067
 812b164:	18c71e04 	addi	r3,r3,7288
 812b168:	1085883a 	add	r2,r2,r2
 812b16c:	10c5883a 	add	r2,r2,r3
 812b170:	11bfff17 	ldw	r6,-4(r2)
 812b174:	000f883a 	mov	r7,zero
 812b178:	812af800 	call	812af80 <__multadd>
 812b17c:	1029883a 	mov	r20,r2
 812b180:	003fcb06 	br	812b0b0 <__pow5mult+0x30>
 812b184:	9809883a 	mov	r4,r19
 812b188:	01409c44 	movi	r5,625
 812b18c:	812af440 	call	812af44 <__i2b>
 812b190:	98801215 	stw	r2,72(r19)
 812b194:	1021883a 	mov	r16,r2
 812b198:	10000015 	stw	zero,0(r2)
 812b19c:	003fd006 	br	812b0e0 <__pow5mult+0x60>

0812b1a0 <__s2b>:
 812b1a0:	defff904 	addi	sp,sp,-28
 812b1a4:	dcc00315 	stw	r19,12(sp)
 812b1a8:	dc800215 	stw	r18,8(sp)
 812b1ac:	2827883a 	mov	r19,r5
 812b1b0:	2025883a 	mov	r18,r4
 812b1b4:	01400244 	movi	r5,9
 812b1b8:	39000204 	addi	r4,r7,8
 812b1bc:	dd000415 	stw	r20,16(sp)
 812b1c0:	dc400115 	stw	r17,4(sp)
 812b1c4:	dfc00615 	stw	ra,24(sp)
 812b1c8:	dd400515 	stw	r21,20(sp)
 812b1cc:	dc000015 	stw	r16,0(sp)
 812b1d0:	3829883a 	mov	r20,r7
 812b1d4:	3023883a 	mov	r17,r6
 812b1d8:	81243140 	call	8124314 <__divsi3>
 812b1dc:	00c00044 	movi	r3,1
 812b1e0:	1880350e 	bge	r3,r2,812b2b8 <__s2b+0x118>
 812b1e4:	000b883a 	mov	r5,zero
 812b1e8:	18c7883a 	add	r3,r3,r3
 812b1ec:	29400044 	addi	r5,r5,1
 812b1f0:	18bffd16 	blt	r3,r2,812b1e8 <__s2b+0x48>
 812b1f4:	9009883a 	mov	r4,r18
 812b1f8:	812a84c0 	call	812a84c <_Balloc>
 812b1fc:	1011883a 	mov	r8,r2
 812b200:	d8800717 	ldw	r2,28(sp)
 812b204:	00c00044 	movi	r3,1
 812b208:	01800244 	movi	r6,9
 812b20c:	40800515 	stw	r2,20(r8)
 812b210:	40c00415 	stw	r3,16(r8)
 812b214:	3440260e 	bge	r6,r17,812b2b0 <__s2b+0x110>
 812b218:	3021883a 	mov	r16,r6
 812b21c:	99ab883a 	add	r21,r19,r6
 812b220:	9c05883a 	add	r2,r19,r16
 812b224:	11c00007 	ldb	r7,0(r2)
 812b228:	400b883a 	mov	r5,r8
 812b22c:	9009883a 	mov	r4,r18
 812b230:	39fff404 	addi	r7,r7,-48
 812b234:	01800284 	movi	r6,10
 812b238:	812af800 	call	812af80 <__multadd>
 812b23c:	84000044 	addi	r16,r16,1
 812b240:	1011883a 	mov	r8,r2
 812b244:	8c3ff61e 	bne	r17,r16,812b220 <__s2b+0x80>
 812b248:	ac45883a 	add	r2,r21,r17
 812b24c:	117ffe04 	addi	r5,r2,-8
 812b250:	880d883a 	mov	r6,r17
 812b254:	35000c0e 	bge	r6,r20,812b288 <__s2b+0xe8>
 812b258:	a185c83a 	sub	r2,r20,r6
 812b25c:	2821883a 	mov	r16,r5
 812b260:	28a3883a 	add	r17,r5,r2
 812b264:	81c00007 	ldb	r7,0(r16)
 812b268:	400b883a 	mov	r5,r8
 812b26c:	9009883a 	mov	r4,r18
 812b270:	39fff404 	addi	r7,r7,-48
 812b274:	01800284 	movi	r6,10
 812b278:	812af800 	call	812af80 <__multadd>
 812b27c:	84000044 	addi	r16,r16,1
 812b280:	1011883a 	mov	r8,r2
 812b284:	847ff71e 	bne	r16,r17,812b264 <__s2b+0xc4>
 812b288:	4005883a 	mov	r2,r8
 812b28c:	dfc00617 	ldw	ra,24(sp)
 812b290:	dd400517 	ldw	r21,20(sp)
 812b294:	dd000417 	ldw	r20,16(sp)
 812b298:	dcc00317 	ldw	r19,12(sp)
 812b29c:	dc800217 	ldw	r18,8(sp)
 812b2a0:	dc400117 	ldw	r17,4(sp)
 812b2a4:	dc000017 	ldw	r16,0(sp)
 812b2a8:	dec00704 	addi	sp,sp,28
 812b2ac:	f800283a 	ret
 812b2b0:	99400284 	addi	r5,r19,10
 812b2b4:	003fe706 	br	812b254 <__s2b+0xb4>
 812b2b8:	000b883a 	mov	r5,zero
 812b2bc:	003fcd06 	br	812b1f4 <__s2b+0x54>

0812b2c0 <_realloc_r>:
 812b2c0:	defff404 	addi	sp,sp,-48
 812b2c4:	dd800815 	stw	r22,32(sp)
 812b2c8:	dc800415 	stw	r18,16(sp)
 812b2cc:	dc400315 	stw	r17,12(sp)
 812b2d0:	dfc00b15 	stw	ra,44(sp)
 812b2d4:	df000a15 	stw	fp,40(sp)
 812b2d8:	ddc00915 	stw	r23,36(sp)
 812b2dc:	dd400715 	stw	r21,28(sp)
 812b2e0:	dd000615 	stw	r20,24(sp)
 812b2e4:	dcc00515 	stw	r19,20(sp)
 812b2e8:	dc000215 	stw	r16,8(sp)
 812b2ec:	2825883a 	mov	r18,r5
 812b2f0:	3023883a 	mov	r17,r6
 812b2f4:	202d883a 	mov	r22,r4
 812b2f8:	2800c926 	beq	r5,zero,812b620 <_realloc_r+0x360>
 812b2fc:	812d5040 	call	812d504 <__malloc_lock>
 812b300:	943ffe04 	addi	r16,r18,-8
 812b304:	88c002c4 	addi	r3,r17,11
 812b308:	00800584 	movi	r2,22
 812b30c:	82000117 	ldw	r8,4(r16)
 812b310:	10c01b2e 	bgeu	r2,r3,812b380 <_realloc_r+0xc0>
 812b314:	00bffe04 	movi	r2,-8
 812b318:	188e703a 	and	r7,r3,r2
 812b31c:	3839883a 	mov	fp,r7
 812b320:	38001a16 	blt	r7,zero,812b38c <_realloc_r+0xcc>
 812b324:	e4401936 	bltu	fp,r17,812b38c <_realloc_r+0xcc>
 812b328:	013fff04 	movi	r4,-4
 812b32c:	4126703a 	and	r19,r8,r4
 812b330:	99c02616 	blt	r19,r7,812b3cc <_realloc_r+0x10c>
 812b334:	802b883a 	mov	r21,r16
 812b338:	9829883a 	mov	r20,r19
 812b33c:	84000204 	addi	r16,r16,8
 812b340:	a80f883a 	mov	r7,r21
 812b344:	a70dc83a 	sub	r6,r20,fp
 812b348:	008003c4 	movi	r2,15
 812b34c:	1180c136 	bltu	r2,r6,812b654 <_realloc_r+0x394>
 812b350:	38800117 	ldw	r2,4(r7)
 812b354:	a549883a 	add	r4,r20,r21
 812b358:	1080004c 	andi	r2,r2,1
 812b35c:	a084b03a 	or	r2,r20,r2
 812b360:	38800115 	stw	r2,4(r7)
 812b364:	20c00117 	ldw	r3,4(r4)
 812b368:	18c00054 	ori	r3,r3,1
 812b36c:	20c00115 	stw	r3,4(r4)
 812b370:	b009883a 	mov	r4,r22
 812b374:	812d5240 	call	812d524 <__malloc_unlock>
 812b378:	8023883a 	mov	r17,r16
 812b37c:	00000606 	br	812b398 <_realloc_r+0xd8>
 812b380:	01c00404 	movi	r7,16
 812b384:	3839883a 	mov	fp,r7
 812b388:	e47fe72e 	bgeu	fp,r17,812b328 <_realloc_r+0x68>
 812b38c:	00800304 	movi	r2,12
 812b390:	0023883a 	mov	r17,zero
 812b394:	b0800015 	stw	r2,0(r22)
 812b398:	8805883a 	mov	r2,r17
 812b39c:	dfc00b17 	ldw	ra,44(sp)
 812b3a0:	df000a17 	ldw	fp,40(sp)
 812b3a4:	ddc00917 	ldw	r23,36(sp)
 812b3a8:	dd800817 	ldw	r22,32(sp)
 812b3ac:	dd400717 	ldw	r21,28(sp)
 812b3b0:	dd000617 	ldw	r20,24(sp)
 812b3b4:	dcc00517 	ldw	r19,20(sp)
 812b3b8:	dc800417 	ldw	r18,16(sp)
 812b3bc:	dc400317 	ldw	r17,12(sp)
 812b3c0:	dc000217 	ldw	r16,8(sp)
 812b3c4:	dec00c04 	addi	sp,sp,48
 812b3c8:	f800283a 	ret
 812b3cc:	008204f4 	movhi	r2,2067
 812b3d0:	10887904 	addi	r2,r2,8676
 812b3d4:	12400217 	ldw	r9,8(r2)
 812b3d8:	84cd883a 	add	r6,r16,r19
 812b3dc:	802b883a 	mov	r21,r16
 812b3e0:	3240b926 	beq	r6,r9,812b6c8 <_realloc_r+0x408>
 812b3e4:	31400117 	ldw	r5,4(r6)
 812b3e8:	00bfff84 	movi	r2,-2
 812b3ec:	2884703a 	and	r2,r5,r2
 812b3f0:	1185883a 	add	r2,r2,r6
 812b3f4:	10c00117 	ldw	r3,4(r2)
 812b3f8:	18c0004c 	andi	r3,r3,1
 812b3fc:	1807003a 	cmpeq	r3,r3,zero
 812b400:	1800a326 	beq	r3,zero,812b690 <_realloc_r+0x3d0>
 812b404:	2908703a 	and	r4,r5,r4
 812b408:	9929883a 	add	r20,r19,r4
 812b40c:	a1c0a30e 	bge	r20,r7,812b69c <_realloc_r+0x3dc>
 812b410:	4080004c 	andi	r2,r8,1
 812b414:	1000551e 	bne	r2,zero,812b56c <_realloc_r+0x2ac>
 812b418:	80800017 	ldw	r2,0(r16)
 812b41c:	80afc83a 	sub	r23,r16,r2
 812b420:	b8c00117 	ldw	r3,4(r23)
 812b424:	00bfff04 	movi	r2,-4
 812b428:	1884703a 	and	r2,r3,r2
 812b42c:	30002e26 	beq	r6,zero,812b4e8 <_realloc_r+0x228>
 812b430:	3240b926 	beq	r6,r9,812b718 <_realloc_r+0x458>
 812b434:	98a9883a 	add	r20,r19,r2
 812b438:	2509883a 	add	r4,r4,r20
 812b43c:	d9000015 	stw	r4,0(sp)
 812b440:	21c02a16 	blt	r4,r7,812b4ec <_realloc_r+0x22c>
 812b444:	30800317 	ldw	r2,12(r6)
 812b448:	30c00217 	ldw	r3,8(r6)
 812b44c:	01400904 	movi	r5,36
 812b450:	99bfff04 	addi	r6,r19,-4
 812b454:	18800315 	stw	r2,12(r3)
 812b458:	10c00215 	stw	r3,8(r2)
 812b45c:	b9000317 	ldw	r4,12(r23)
 812b460:	b8800217 	ldw	r2,8(r23)
 812b464:	b82b883a 	mov	r21,r23
 812b468:	bc000204 	addi	r16,r23,8
 812b46c:	20800215 	stw	r2,8(r4)
 812b470:	11000315 	stw	r4,12(r2)
 812b474:	2980e436 	bltu	r5,r6,812b808 <_realloc_r+0x548>
 812b478:	008004c4 	movi	r2,19
 812b47c:	9009883a 	mov	r4,r18
 812b480:	8011883a 	mov	r8,r16
 812b484:	11800f2e 	bgeu	r2,r6,812b4c4 <_realloc_r+0x204>
 812b488:	90800017 	ldw	r2,0(r18)
 812b48c:	ba000404 	addi	r8,r23,16
 812b490:	91000204 	addi	r4,r18,8
 812b494:	b8800215 	stw	r2,8(r23)
 812b498:	90c00117 	ldw	r3,4(r18)
 812b49c:	008006c4 	movi	r2,27
 812b4a0:	b8c00315 	stw	r3,12(r23)
 812b4a4:	1180072e 	bgeu	r2,r6,812b4c4 <_realloc_r+0x204>
 812b4a8:	90c00217 	ldw	r3,8(r18)
 812b4ac:	ba000604 	addi	r8,r23,24
 812b4b0:	91000404 	addi	r4,r18,16
 812b4b4:	b8c00415 	stw	r3,16(r23)
 812b4b8:	90800317 	ldw	r2,12(r18)
 812b4bc:	b8800515 	stw	r2,20(r23)
 812b4c0:	3140e726 	beq	r6,r5,812b860 <_realloc_r+0x5a0>
 812b4c4:	20800017 	ldw	r2,0(r4)
 812b4c8:	dd000017 	ldw	r20,0(sp)
 812b4cc:	b80f883a 	mov	r7,r23
 812b4d0:	40800015 	stw	r2,0(r8)
 812b4d4:	20c00117 	ldw	r3,4(r4)
 812b4d8:	40c00115 	stw	r3,4(r8)
 812b4dc:	20800217 	ldw	r2,8(r4)
 812b4e0:	40800215 	stw	r2,8(r8)
 812b4e4:	003f9706 	br	812b344 <_realloc_r+0x84>
 812b4e8:	98a9883a 	add	r20,r19,r2
 812b4ec:	a1c01f16 	blt	r20,r7,812b56c <_realloc_r+0x2ac>
 812b4f0:	b8c00317 	ldw	r3,12(r23)
 812b4f4:	b8800217 	ldw	r2,8(r23)
 812b4f8:	99bfff04 	addi	r6,r19,-4
 812b4fc:	01400904 	movi	r5,36
 812b500:	b82b883a 	mov	r21,r23
 812b504:	18800215 	stw	r2,8(r3)
 812b508:	10c00315 	stw	r3,12(r2)
 812b50c:	bc000204 	addi	r16,r23,8
 812b510:	2980c336 	bltu	r5,r6,812b820 <_realloc_r+0x560>
 812b514:	008004c4 	movi	r2,19
 812b518:	9009883a 	mov	r4,r18
 812b51c:	8011883a 	mov	r8,r16
 812b520:	11800f2e 	bgeu	r2,r6,812b560 <_realloc_r+0x2a0>
 812b524:	90800017 	ldw	r2,0(r18)
 812b528:	ba000404 	addi	r8,r23,16
 812b52c:	91000204 	addi	r4,r18,8
 812b530:	b8800215 	stw	r2,8(r23)
 812b534:	90c00117 	ldw	r3,4(r18)
 812b538:	008006c4 	movi	r2,27
 812b53c:	b8c00315 	stw	r3,12(r23)
 812b540:	1180072e 	bgeu	r2,r6,812b560 <_realloc_r+0x2a0>
 812b544:	90c00217 	ldw	r3,8(r18)
 812b548:	ba000604 	addi	r8,r23,24
 812b54c:	91000404 	addi	r4,r18,16
 812b550:	b8c00415 	stw	r3,16(r23)
 812b554:	90800317 	ldw	r2,12(r18)
 812b558:	b8800515 	stw	r2,20(r23)
 812b55c:	3140c726 	beq	r6,r5,812b87c <_realloc_r+0x5bc>
 812b560:	20800017 	ldw	r2,0(r4)
 812b564:	b80f883a 	mov	r7,r23
 812b568:	003fd906 	br	812b4d0 <_realloc_r+0x210>
 812b56c:	880b883a 	mov	r5,r17
 812b570:	b009883a 	mov	r4,r22
 812b574:	81298900 	call	8129890 <_malloc_r>
 812b578:	1023883a 	mov	r17,r2
 812b57c:	10002526 	beq	r2,zero,812b614 <_realloc_r+0x354>
 812b580:	80800117 	ldw	r2,4(r16)
 812b584:	00ffff84 	movi	r3,-2
 812b588:	893ffe04 	addi	r4,r17,-8
 812b58c:	10c4703a 	and	r2,r2,r3
 812b590:	8085883a 	add	r2,r16,r2
 812b594:	20809526 	beq	r4,r2,812b7ec <_realloc_r+0x52c>
 812b598:	99bfff04 	addi	r6,r19,-4
 812b59c:	01c00904 	movi	r7,36
 812b5a0:	39804536 	bltu	r7,r6,812b6b8 <_realloc_r+0x3f8>
 812b5a4:	008004c4 	movi	r2,19
 812b5a8:	9009883a 	mov	r4,r18
 812b5ac:	880b883a 	mov	r5,r17
 812b5b0:	11800f2e 	bgeu	r2,r6,812b5f0 <_realloc_r+0x330>
 812b5b4:	90800017 	ldw	r2,0(r18)
 812b5b8:	89400204 	addi	r5,r17,8
 812b5bc:	91000204 	addi	r4,r18,8
 812b5c0:	88800015 	stw	r2,0(r17)
 812b5c4:	90c00117 	ldw	r3,4(r18)
 812b5c8:	008006c4 	movi	r2,27
 812b5cc:	88c00115 	stw	r3,4(r17)
 812b5d0:	1180072e 	bgeu	r2,r6,812b5f0 <_realloc_r+0x330>
 812b5d4:	90c00217 	ldw	r3,8(r18)
 812b5d8:	89400404 	addi	r5,r17,16
 812b5dc:	91000404 	addi	r4,r18,16
 812b5e0:	88c00215 	stw	r3,8(r17)
 812b5e4:	90800317 	ldw	r2,12(r18)
 812b5e8:	88800315 	stw	r2,12(r17)
 812b5ec:	31c09126 	beq	r6,r7,812b834 <_realloc_r+0x574>
 812b5f0:	20800017 	ldw	r2,0(r4)
 812b5f4:	28800015 	stw	r2,0(r5)
 812b5f8:	20c00117 	ldw	r3,4(r4)
 812b5fc:	28c00115 	stw	r3,4(r5)
 812b600:	20800217 	ldw	r2,8(r4)
 812b604:	28800215 	stw	r2,8(r5)
 812b608:	900b883a 	mov	r5,r18
 812b60c:	b009883a 	mov	r4,r22
 812b610:	8128d080 	call	8128d08 <_free_r>
 812b614:	b009883a 	mov	r4,r22
 812b618:	812d5240 	call	812d524 <__malloc_unlock>
 812b61c:	003f5e06 	br	812b398 <_realloc_r+0xd8>
 812b620:	300b883a 	mov	r5,r6
 812b624:	dfc00b17 	ldw	ra,44(sp)
 812b628:	df000a17 	ldw	fp,40(sp)
 812b62c:	ddc00917 	ldw	r23,36(sp)
 812b630:	dd800817 	ldw	r22,32(sp)
 812b634:	dd400717 	ldw	r21,28(sp)
 812b638:	dd000617 	ldw	r20,24(sp)
 812b63c:	dcc00517 	ldw	r19,20(sp)
 812b640:	dc800417 	ldw	r18,16(sp)
 812b644:	dc400317 	ldw	r17,12(sp)
 812b648:	dc000217 	ldw	r16,8(sp)
 812b64c:	dec00c04 	addi	sp,sp,48
 812b650:	81298901 	jmpi	8129890 <_malloc_r>
 812b654:	38800117 	ldw	r2,4(r7)
 812b658:	e54b883a 	add	r5,fp,r21
 812b65c:	31000054 	ori	r4,r6,1
 812b660:	1080004c 	andi	r2,r2,1
 812b664:	1704b03a 	or	r2,r2,fp
 812b668:	38800115 	stw	r2,4(r7)
 812b66c:	29000115 	stw	r4,4(r5)
 812b670:	2987883a 	add	r3,r5,r6
 812b674:	18800117 	ldw	r2,4(r3)
 812b678:	29400204 	addi	r5,r5,8
 812b67c:	b009883a 	mov	r4,r22
 812b680:	10800054 	ori	r2,r2,1
 812b684:	18800115 	stw	r2,4(r3)
 812b688:	8128d080 	call	8128d08 <_free_r>
 812b68c:	003f3806 	br	812b370 <_realloc_r+0xb0>
 812b690:	000d883a 	mov	r6,zero
 812b694:	0009883a 	mov	r4,zero
 812b698:	003f5d06 	br	812b410 <_realloc_r+0x150>
 812b69c:	30c00217 	ldw	r3,8(r6)
 812b6a0:	30800317 	ldw	r2,12(r6)
 812b6a4:	800f883a 	mov	r7,r16
 812b6a8:	84000204 	addi	r16,r16,8
 812b6ac:	10c00215 	stw	r3,8(r2)
 812b6b0:	18800315 	stw	r2,12(r3)
 812b6b4:	003f2306 	br	812b344 <_realloc_r+0x84>
 812b6b8:	8809883a 	mov	r4,r17
 812b6bc:	900b883a 	mov	r5,r18
 812b6c0:	812a1540 	call	812a154 <memmove>
 812b6c4:	003fd006 	br	812b608 <_realloc_r+0x348>
 812b6c8:	30800117 	ldw	r2,4(r6)
 812b6cc:	e0c00404 	addi	r3,fp,16
 812b6d0:	1108703a 	and	r4,r2,r4
 812b6d4:	9905883a 	add	r2,r19,r4
 812b6d8:	10ff4d16 	blt	r2,r3,812b410 <_realloc_r+0x150>
 812b6dc:	1705c83a 	sub	r2,r2,fp
 812b6e0:	870b883a 	add	r5,r16,fp
 812b6e4:	10800054 	ori	r2,r2,1
 812b6e8:	28800115 	stw	r2,4(r5)
 812b6ec:	80c00117 	ldw	r3,4(r16)
 812b6f0:	008204f4 	movhi	r2,2067
 812b6f4:	10887904 	addi	r2,r2,8676
 812b6f8:	b009883a 	mov	r4,r22
 812b6fc:	18c0004c 	andi	r3,r3,1
 812b700:	e0c6b03a 	or	r3,fp,r3
 812b704:	11400215 	stw	r5,8(r2)
 812b708:	80c00115 	stw	r3,4(r16)
 812b70c:	812d5240 	call	812d524 <__malloc_unlock>
 812b710:	84400204 	addi	r17,r16,8
 812b714:	003f2006 	br	812b398 <_realloc_r+0xd8>
 812b718:	98a9883a 	add	r20,r19,r2
 812b71c:	2509883a 	add	r4,r4,r20
 812b720:	e0800404 	addi	r2,fp,16
 812b724:	d9000115 	stw	r4,4(sp)
 812b728:	20bf7016 	blt	r4,r2,812b4ec <_realloc_r+0x22c>
 812b72c:	b8c00317 	ldw	r3,12(r23)
 812b730:	b8800217 	ldw	r2,8(r23)
 812b734:	99bfff04 	addi	r6,r19,-4
 812b738:	01400904 	movi	r5,36
 812b73c:	18800215 	stw	r2,8(r3)
 812b740:	10c00315 	stw	r3,12(r2)
 812b744:	bc400204 	addi	r17,r23,8
 812b748:	29804136 	bltu	r5,r6,812b850 <_realloc_r+0x590>
 812b74c:	008004c4 	movi	r2,19
 812b750:	9009883a 	mov	r4,r18
 812b754:	880f883a 	mov	r7,r17
 812b758:	11800f2e 	bgeu	r2,r6,812b798 <_realloc_r+0x4d8>
 812b75c:	90800017 	ldw	r2,0(r18)
 812b760:	b9c00404 	addi	r7,r23,16
 812b764:	91000204 	addi	r4,r18,8
 812b768:	b8800215 	stw	r2,8(r23)
 812b76c:	90c00117 	ldw	r3,4(r18)
 812b770:	008006c4 	movi	r2,27
 812b774:	b8c00315 	stw	r3,12(r23)
 812b778:	1180072e 	bgeu	r2,r6,812b798 <_realloc_r+0x4d8>
 812b77c:	90c00217 	ldw	r3,8(r18)
 812b780:	b9c00604 	addi	r7,r23,24
 812b784:	91000404 	addi	r4,r18,16
 812b788:	b8c00415 	stw	r3,16(r23)
 812b78c:	90800317 	ldw	r2,12(r18)
 812b790:	b8800515 	stw	r2,20(r23)
 812b794:	31404026 	beq	r6,r5,812b898 <_realloc_r+0x5d8>
 812b798:	20800017 	ldw	r2,0(r4)
 812b79c:	38800015 	stw	r2,0(r7)
 812b7a0:	20c00117 	ldw	r3,4(r4)
 812b7a4:	38c00115 	stw	r3,4(r7)
 812b7a8:	20800217 	ldw	r2,8(r4)
 812b7ac:	38800215 	stw	r2,8(r7)
 812b7b0:	d8c00117 	ldw	r3,4(sp)
 812b7b4:	bf0b883a 	add	r5,r23,fp
 812b7b8:	b009883a 	mov	r4,r22
 812b7bc:	1f05c83a 	sub	r2,r3,fp
 812b7c0:	10800054 	ori	r2,r2,1
 812b7c4:	28800115 	stw	r2,4(r5)
 812b7c8:	b8c00117 	ldw	r3,4(r23)
 812b7cc:	008204f4 	movhi	r2,2067
 812b7d0:	10887904 	addi	r2,r2,8676
 812b7d4:	11400215 	stw	r5,8(r2)
 812b7d8:	18c0004c 	andi	r3,r3,1
 812b7dc:	e0c6b03a 	or	r3,fp,r3
 812b7e0:	b8c00115 	stw	r3,4(r23)
 812b7e4:	812d5240 	call	812d524 <__malloc_unlock>
 812b7e8:	003eeb06 	br	812b398 <_realloc_r+0xd8>
 812b7ec:	20800117 	ldw	r2,4(r4)
 812b7f0:	00ffff04 	movi	r3,-4
 812b7f4:	800f883a 	mov	r7,r16
 812b7f8:	10c4703a 	and	r2,r2,r3
 812b7fc:	98a9883a 	add	r20,r19,r2
 812b800:	84000204 	addi	r16,r16,8
 812b804:	003ecf06 	br	812b344 <_realloc_r+0x84>
 812b808:	900b883a 	mov	r5,r18
 812b80c:	8009883a 	mov	r4,r16
 812b810:	812a1540 	call	812a154 <memmove>
 812b814:	dd000017 	ldw	r20,0(sp)
 812b818:	b80f883a 	mov	r7,r23
 812b81c:	003ec906 	br	812b344 <_realloc_r+0x84>
 812b820:	900b883a 	mov	r5,r18
 812b824:	8009883a 	mov	r4,r16
 812b828:	812a1540 	call	812a154 <memmove>
 812b82c:	b80f883a 	mov	r7,r23
 812b830:	003ec406 	br	812b344 <_realloc_r+0x84>
 812b834:	90c00417 	ldw	r3,16(r18)
 812b838:	89400604 	addi	r5,r17,24
 812b83c:	91000604 	addi	r4,r18,24
 812b840:	88c00415 	stw	r3,16(r17)
 812b844:	90800517 	ldw	r2,20(r18)
 812b848:	88800515 	stw	r2,20(r17)
 812b84c:	003f6806 	br	812b5f0 <_realloc_r+0x330>
 812b850:	900b883a 	mov	r5,r18
 812b854:	8809883a 	mov	r4,r17
 812b858:	812a1540 	call	812a154 <memmove>
 812b85c:	003fd406 	br	812b7b0 <_realloc_r+0x4f0>
 812b860:	90c00417 	ldw	r3,16(r18)
 812b864:	91000604 	addi	r4,r18,24
 812b868:	ba000804 	addi	r8,r23,32
 812b86c:	b8c00615 	stw	r3,24(r23)
 812b870:	90800517 	ldw	r2,20(r18)
 812b874:	b8800715 	stw	r2,28(r23)
 812b878:	003f1206 	br	812b4c4 <_realloc_r+0x204>
 812b87c:	90c00417 	ldw	r3,16(r18)
 812b880:	91000604 	addi	r4,r18,24
 812b884:	ba000804 	addi	r8,r23,32
 812b888:	b8c00615 	stw	r3,24(r23)
 812b88c:	90800517 	ldw	r2,20(r18)
 812b890:	b8800715 	stw	r2,28(r23)
 812b894:	003f3206 	br	812b560 <_realloc_r+0x2a0>
 812b898:	90c00417 	ldw	r3,16(r18)
 812b89c:	91000604 	addi	r4,r18,24
 812b8a0:	b9c00804 	addi	r7,r23,32
 812b8a4:	b8c00615 	stw	r3,24(r23)
 812b8a8:	90800517 	ldw	r2,20(r18)
 812b8ac:	b8800715 	stw	r2,28(r23)
 812b8b0:	003fb906 	br	812b798 <_realloc_r+0x4d8>

0812b8b4 <__isinfd>:
 812b8b4:	200d883a 	mov	r6,r4
 812b8b8:	0109c83a 	sub	r4,zero,r4
 812b8bc:	2188b03a 	or	r4,r4,r6
 812b8c0:	2008d7fa 	srli	r4,r4,31
 812b8c4:	00a00034 	movhi	r2,32768
 812b8c8:	10bfffc4 	addi	r2,r2,-1
 812b8cc:	1144703a 	and	r2,r2,r5
 812b8d0:	2088b03a 	or	r4,r4,r2
 812b8d4:	009ffc34 	movhi	r2,32752
 812b8d8:	1105c83a 	sub	r2,r2,r4
 812b8dc:	0087c83a 	sub	r3,zero,r2
 812b8e0:	10c4b03a 	or	r2,r2,r3
 812b8e4:	1004d7fa 	srli	r2,r2,31
 812b8e8:	00c00044 	movi	r3,1
 812b8ec:	1885c83a 	sub	r2,r3,r2
 812b8f0:	f800283a 	ret

0812b8f4 <_sbrk_r>:
 812b8f4:	defffd04 	addi	sp,sp,-12
 812b8f8:	dc000015 	stw	r16,0(sp)
 812b8fc:	040204f4 	movhi	r16,2067
 812b900:	84156404 	addi	r16,r16,21904
 812b904:	dc400115 	stw	r17,4(sp)
 812b908:	80000015 	stw	zero,0(r16)
 812b90c:	2023883a 	mov	r17,r4
 812b910:	2809883a 	mov	r4,r5
 812b914:	dfc00215 	stw	ra,8(sp)
 812b918:	812d7240 	call	812d724 <sbrk>
 812b91c:	1007883a 	mov	r3,r2
 812b920:	00bfffc4 	movi	r2,-1
 812b924:	18800626 	beq	r3,r2,812b940 <_sbrk_r+0x4c>
 812b928:	1805883a 	mov	r2,r3
 812b92c:	dfc00217 	ldw	ra,8(sp)
 812b930:	dc400117 	ldw	r17,4(sp)
 812b934:	dc000017 	ldw	r16,0(sp)
 812b938:	dec00304 	addi	sp,sp,12
 812b93c:	f800283a 	ret
 812b940:	80800017 	ldw	r2,0(r16)
 812b944:	103ff826 	beq	r2,zero,812b928 <_sbrk_r+0x34>
 812b948:	88800015 	stw	r2,0(r17)
 812b94c:	1805883a 	mov	r2,r3
 812b950:	dfc00217 	ldw	ra,8(sp)
 812b954:	dc400117 	ldw	r17,4(sp)
 812b958:	dc000017 	ldw	r16,0(sp)
 812b95c:	dec00304 	addi	sp,sp,12
 812b960:	f800283a 	ret

0812b964 <__sclose>:
 812b964:	2940038f 	ldh	r5,14(r5)
 812b968:	812bc981 	jmpi	812bc98 <_close_r>

0812b96c <__sseek>:
 812b96c:	defffe04 	addi	sp,sp,-8
 812b970:	dc000015 	stw	r16,0(sp)
 812b974:	2821883a 	mov	r16,r5
 812b978:	2940038f 	ldh	r5,14(r5)
 812b97c:	dfc00115 	stw	ra,4(sp)
 812b980:	812bf100 	call	812bf10 <_lseek_r>
 812b984:	1007883a 	mov	r3,r2
 812b988:	00bfffc4 	movi	r2,-1
 812b98c:	18800926 	beq	r3,r2,812b9b4 <__sseek+0x48>
 812b990:	8080030b 	ldhu	r2,12(r16)
 812b994:	80c01415 	stw	r3,80(r16)
 812b998:	10840014 	ori	r2,r2,4096
 812b99c:	8080030d 	sth	r2,12(r16)
 812b9a0:	1805883a 	mov	r2,r3
 812b9a4:	dfc00117 	ldw	ra,4(sp)
 812b9a8:	dc000017 	ldw	r16,0(sp)
 812b9ac:	dec00204 	addi	sp,sp,8
 812b9b0:	f800283a 	ret
 812b9b4:	8080030b 	ldhu	r2,12(r16)
 812b9b8:	10bbffcc 	andi	r2,r2,61439
 812b9bc:	8080030d 	sth	r2,12(r16)
 812b9c0:	1805883a 	mov	r2,r3
 812b9c4:	dfc00117 	ldw	ra,4(sp)
 812b9c8:	dc000017 	ldw	r16,0(sp)
 812b9cc:	dec00204 	addi	sp,sp,8
 812b9d0:	f800283a 	ret

0812b9d4 <__swrite>:
 812b9d4:	2880030b 	ldhu	r2,12(r5)
 812b9d8:	defffb04 	addi	sp,sp,-20
 812b9dc:	dcc00315 	stw	r19,12(sp)
 812b9e0:	1080400c 	andi	r2,r2,256
 812b9e4:	dc800215 	stw	r18,8(sp)
 812b9e8:	dc400115 	stw	r17,4(sp)
 812b9ec:	dc000015 	stw	r16,0(sp)
 812b9f0:	3027883a 	mov	r19,r6
 812b9f4:	3825883a 	mov	r18,r7
 812b9f8:	dfc00415 	stw	ra,16(sp)
 812b9fc:	2821883a 	mov	r16,r5
 812ba00:	000d883a 	mov	r6,zero
 812ba04:	01c00084 	movi	r7,2
 812ba08:	2023883a 	mov	r17,r4
 812ba0c:	10000226 	beq	r2,zero,812ba18 <__swrite+0x44>
 812ba10:	2940038f 	ldh	r5,14(r5)
 812ba14:	812bf100 	call	812bf10 <_lseek_r>
 812ba18:	8080030b 	ldhu	r2,12(r16)
 812ba1c:	8140038f 	ldh	r5,14(r16)
 812ba20:	8809883a 	mov	r4,r17
 812ba24:	10bbffcc 	andi	r2,r2,61439
 812ba28:	980d883a 	mov	r6,r19
 812ba2c:	900f883a 	mov	r7,r18
 812ba30:	8080030d 	sth	r2,12(r16)
 812ba34:	dfc00417 	ldw	ra,16(sp)
 812ba38:	dcc00317 	ldw	r19,12(sp)
 812ba3c:	dc800217 	ldw	r18,8(sp)
 812ba40:	dc400117 	ldw	r17,4(sp)
 812ba44:	dc000017 	ldw	r16,0(sp)
 812ba48:	dec00504 	addi	sp,sp,20
 812ba4c:	812bb6c1 	jmpi	812bb6c <_write_r>

0812ba50 <__sread>:
 812ba50:	defffe04 	addi	sp,sp,-8
 812ba54:	dc000015 	stw	r16,0(sp)
 812ba58:	2821883a 	mov	r16,r5
 812ba5c:	2940038f 	ldh	r5,14(r5)
 812ba60:	dfc00115 	stw	ra,4(sp)
 812ba64:	812bf880 	call	812bf88 <_read_r>
 812ba68:	1007883a 	mov	r3,r2
 812ba6c:	10000816 	blt	r2,zero,812ba90 <__sread+0x40>
 812ba70:	80801417 	ldw	r2,80(r16)
 812ba74:	10c5883a 	add	r2,r2,r3
 812ba78:	80801415 	stw	r2,80(r16)
 812ba7c:	1805883a 	mov	r2,r3
 812ba80:	dfc00117 	ldw	ra,4(sp)
 812ba84:	dc000017 	ldw	r16,0(sp)
 812ba88:	dec00204 	addi	sp,sp,8
 812ba8c:	f800283a 	ret
 812ba90:	8080030b 	ldhu	r2,12(r16)
 812ba94:	10bbffcc 	andi	r2,r2,61439
 812ba98:	8080030d 	sth	r2,12(r16)
 812ba9c:	1805883a 	mov	r2,r3
 812baa0:	dfc00117 	ldw	ra,4(sp)
 812baa4:	dc000017 	ldw	r16,0(sp)
 812baa8:	dec00204 	addi	sp,sp,8
 812baac:	f800283a 	ret

0812bab0 <strcmp>:
 812bab0:	2144b03a 	or	r2,r4,r5
 812bab4:	108000cc 	andi	r2,r2,3
 812bab8:	10001d1e 	bne	r2,zero,812bb30 <strcmp+0x80>
 812babc:	200f883a 	mov	r7,r4
 812bac0:	28800017 	ldw	r2,0(r5)
 812bac4:	21000017 	ldw	r4,0(r4)
 812bac8:	280d883a 	mov	r6,r5
 812bacc:	2080161e 	bne	r4,r2,812bb28 <strcmp+0x78>
 812bad0:	023fbff4 	movhi	r8,65279
 812bad4:	423fbfc4 	addi	r8,r8,-257
 812bad8:	2207883a 	add	r3,r4,r8
 812badc:	01602074 	movhi	r5,32897
 812bae0:	29602004 	addi	r5,r5,-32640
 812bae4:	1946703a 	and	r3,r3,r5
 812bae8:	0104303a 	nor	r2,zero,r4
 812baec:	10c4703a 	and	r2,r2,r3
 812baf0:	10001c1e 	bne	r2,zero,812bb64 <strcmp+0xb4>
 812baf4:	4013883a 	mov	r9,r8
 812baf8:	2811883a 	mov	r8,r5
 812bafc:	00000106 	br	812bb04 <strcmp+0x54>
 812bb00:	1800181e 	bne	r3,zero,812bb64 <strcmp+0xb4>
 812bb04:	39c00104 	addi	r7,r7,4
 812bb08:	39000017 	ldw	r4,0(r7)
 812bb0c:	31800104 	addi	r6,r6,4
 812bb10:	31400017 	ldw	r5,0(r6)
 812bb14:	2245883a 	add	r2,r4,r9
 812bb18:	1204703a 	and	r2,r2,r8
 812bb1c:	0106303a 	nor	r3,zero,r4
 812bb20:	1886703a 	and	r3,r3,r2
 812bb24:	217ff626 	beq	r4,r5,812bb00 <strcmp+0x50>
 812bb28:	3809883a 	mov	r4,r7
 812bb2c:	300b883a 	mov	r5,r6
 812bb30:	20c00007 	ldb	r3,0(r4)
 812bb34:	1800051e 	bne	r3,zero,812bb4c <strcmp+0x9c>
 812bb38:	00000606 	br	812bb54 <strcmp+0xa4>
 812bb3c:	21000044 	addi	r4,r4,1
 812bb40:	20c00007 	ldb	r3,0(r4)
 812bb44:	29400044 	addi	r5,r5,1
 812bb48:	18000226 	beq	r3,zero,812bb54 <strcmp+0xa4>
 812bb4c:	28800007 	ldb	r2,0(r5)
 812bb50:	18bffa26 	beq	r3,r2,812bb3c <strcmp+0x8c>
 812bb54:	20c00003 	ldbu	r3,0(r4)
 812bb58:	28800003 	ldbu	r2,0(r5)
 812bb5c:	1885c83a 	sub	r2,r3,r2
 812bb60:	f800283a 	ret
 812bb64:	0005883a 	mov	r2,zero
 812bb68:	f800283a 	ret

0812bb6c <_write_r>:
 812bb6c:	defffd04 	addi	sp,sp,-12
 812bb70:	dc000015 	stw	r16,0(sp)
 812bb74:	040204f4 	movhi	r16,2067
 812bb78:	84156404 	addi	r16,r16,21904
 812bb7c:	dc400115 	stw	r17,4(sp)
 812bb80:	80000015 	stw	zero,0(r16)
 812bb84:	2023883a 	mov	r17,r4
 812bb88:	2809883a 	mov	r4,r5
 812bb8c:	300b883a 	mov	r5,r6
 812bb90:	380d883a 	mov	r6,r7
 812bb94:	dfc00215 	stw	ra,8(sp)
 812bb98:	812d7e00 	call	812d7e0 <write>
 812bb9c:	1007883a 	mov	r3,r2
 812bba0:	00bfffc4 	movi	r2,-1
 812bba4:	18800626 	beq	r3,r2,812bbc0 <_write_r+0x54>
 812bba8:	1805883a 	mov	r2,r3
 812bbac:	dfc00217 	ldw	ra,8(sp)
 812bbb0:	dc400117 	ldw	r17,4(sp)
 812bbb4:	dc000017 	ldw	r16,0(sp)
 812bbb8:	dec00304 	addi	sp,sp,12
 812bbbc:	f800283a 	ret
 812bbc0:	80800017 	ldw	r2,0(r16)
 812bbc4:	103ff826 	beq	r2,zero,812bba8 <_write_r+0x3c>
 812bbc8:	88800015 	stw	r2,0(r17)
 812bbcc:	1805883a 	mov	r2,r3
 812bbd0:	dfc00217 	ldw	ra,8(sp)
 812bbd4:	dc400117 	ldw	r17,4(sp)
 812bbd8:	dc000017 	ldw	r16,0(sp)
 812bbdc:	dec00304 	addi	sp,sp,12
 812bbe0:	f800283a 	ret

0812bbe4 <_calloc_r>:
 812bbe4:	298b383a 	mul	r5,r5,r6
 812bbe8:	defffe04 	addi	sp,sp,-8
 812bbec:	dc000015 	stw	r16,0(sp)
 812bbf0:	dfc00115 	stw	ra,4(sp)
 812bbf4:	81298900 	call	8129890 <_malloc_r>
 812bbf8:	1021883a 	mov	r16,r2
 812bbfc:	01c00904 	movi	r7,36
 812bc00:	10000d26 	beq	r2,zero,812bc38 <_calloc_r+0x54>
 812bc04:	10ffff17 	ldw	r3,-4(r2)
 812bc08:	1009883a 	mov	r4,r2
 812bc0c:	00bfff04 	movi	r2,-4
 812bc10:	1886703a 	and	r3,r3,r2
 812bc14:	1887883a 	add	r3,r3,r2
 812bc18:	180d883a 	mov	r6,r3
 812bc1c:	000b883a 	mov	r5,zero
 812bc20:	38c01736 	bltu	r7,r3,812bc80 <_calloc_r+0x9c>
 812bc24:	008004c4 	movi	r2,19
 812bc28:	10c00836 	bltu	r2,r3,812bc4c <_calloc_r+0x68>
 812bc2c:	20000215 	stw	zero,8(r4)
 812bc30:	20000015 	stw	zero,0(r4)
 812bc34:	20000115 	stw	zero,4(r4)
 812bc38:	8005883a 	mov	r2,r16
 812bc3c:	dfc00117 	ldw	ra,4(sp)
 812bc40:	dc000017 	ldw	r16,0(sp)
 812bc44:	dec00204 	addi	sp,sp,8
 812bc48:	f800283a 	ret
 812bc4c:	008006c4 	movi	r2,27
 812bc50:	80000015 	stw	zero,0(r16)
 812bc54:	80000115 	stw	zero,4(r16)
 812bc58:	81000204 	addi	r4,r16,8
 812bc5c:	10fff32e 	bgeu	r2,r3,812bc2c <_calloc_r+0x48>
 812bc60:	80000215 	stw	zero,8(r16)
 812bc64:	80000315 	stw	zero,12(r16)
 812bc68:	81000404 	addi	r4,r16,16
 812bc6c:	19ffef1e 	bne	r3,r7,812bc2c <_calloc_r+0x48>
 812bc70:	81000604 	addi	r4,r16,24
 812bc74:	80000415 	stw	zero,16(r16)
 812bc78:	80000515 	stw	zero,20(r16)
 812bc7c:	003feb06 	br	812bc2c <_calloc_r+0x48>
 812bc80:	812a2340 	call	812a234 <memset>
 812bc84:	8005883a 	mov	r2,r16
 812bc88:	dfc00117 	ldw	ra,4(sp)
 812bc8c:	dc000017 	ldw	r16,0(sp)
 812bc90:	dec00204 	addi	sp,sp,8
 812bc94:	f800283a 	ret

0812bc98 <_close_r>:
 812bc98:	defffd04 	addi	sp,sp,-12
 812bc9c:	dc000015 	stw	r16,0(sp)
 812bca0:	040204f4 	movhi	r16,2067
 812bca4:	84156404 	addi	r16,r16,21904
 812bca8:	dc400115 	stw	r17,4(sp)
 812bcac:	80000015 	stw	zero,0(r16)
 812bcb0:	2023883a 	mov	r17,r4
 812bcb4:	2809883a 	mov	r4,r5
 812bcb8:	dfc00215 	stw	ra,8(sp)
 812bcbc:	812ce800 	call	812ce80 <close>
 812bcc0:	1007883a 	mov	r3,r2
 812bcc4:	00bfffc4 	movi	r2,-1
 812bcc8:	18800626 	beq	r3,r2,812bce4 <_close_r+0x4c>
 812bccc:	1805883a 	mov	r2,r3
 812bcd0:	dfc00217 	ldw	ra,8(sp)
 812bcd4:	dc400117 	ldw	r17,4(sp)
 812bcd8:	dc000017 	ldw	r16,0(sp)
 812bcdc:	dec00304 	addi	sp,sp,12
 812bce0:	f800283a 	ret
 812bce4:	80800017 	ldw	r2,0(r16)
 812bce8:	103ff826 	beq	r2,zero,812bccc <_close_r+0x34>
 812bcec:	88800015 	stw	r2,0(r17)
 812bcf0:	1805883a 	mov	r2,r3
 812bcf4:	dfc00217 	ldw	ra,8(sp)
 812bcf8:	dc400117 	ldw	r17,4(sp)
 812bcfc:	dc000017 	ldw	r16,0(sp)
 812bd00:	dec00304 	addi	sp,sp,12
 812bd04:	f800283a 	ret

0812bd08 <_fclose_r>:
 812bd08:	defffc04 	addi	sp,sp,-16
 812bd0c:	dc400115 	stw	r17,4(sp)
 812bd10:	dc000015 	stw	r16,0(sp)
 812bd14:	dfc00315 	stw	ra,12(sp)
 812bd18:	dc800215 	stw	r18,8(sp)
 812bd1c:	2821883a 	mov	r16,r5
 812bd20:	2023883a 	mov	r17,r4
 812bd24:	28002926 	beq	r5,zero,812bdcc <_fclose_r+0xc4>
 812bd28:	81289740 	call	8128974 <__sfp_lock_acquire>
 812bd2c:	88000226 	beq	r17,zero,812bd38 <_fclose_r+0x30>
 812bd30:	88800e17 	ldw	r2,56(r17)
 812bd34:	10002d26 	beq	r2,zero,812bdec <_fclose_r+0xe4>
 812bd38:	8080030f 	ldh	r2,12(r16)
 812bd3c:	10002226 	beq	r2,zero,812bdc8 <_fclose_r+0xc0>
 812bd40:	8809883a 	mov	r4,r17
 812bd44:	800b883a 	mov	r5,r16
 812bd48:	81286ec0 	call	81286ec <_fflush_r>
 812bd4c:	1025883a 	mov	r18,r2
 812bd50:	80800b17 	ldw	r2,44(r16)
 812bd54:	10000426 	beq	r2,zero,812bd68 <_fclose_r+0x60>
 812bd58:	81400717 	ldw	r5,28(r16)
 812bd5c:	8809883a 	mov	r4,r17
 812bd60:	103ee83a 	callr	r2
 812bd64:	10002a16 	blt	r2,zero,812be10 <_fclose_r+0x108>
 812bd68:	8080030b 	ldhu	r2,12(r16)
 812bd6c:	1080200c 	andi	r2,r2,128
 812bd70:	1000231e 	bne	r2,zero,812be00 <_fclose_r+0xf8>
 812bd74:	81400c17 	ldw	r5,48(r16)
 812bd78:	28000526 	beq	r5,zero,812bd90 <_fclose_r+0x88>
 812bd7c:	80801004 	addi	r2,r16,64
 812bd80:	28800226 	beq	r5,r2,812bd8c <_fclose_r+0x84>
 812bd84:	8809883a 	mov	r4,r17
 812bd88:	8128d080 	call	8128d08 <_free_r>
 812bd8c:	80000c15 	stw	zero,48(r16)
 812bd90:	81401117 	ldw	r5,68(r16)
 812bd94:	28000326 	beq	r5,zero,812bda4 <_fclose_r+0x9c>
 812bd98:	8809883a 	mov	r4,r17
 812bd9c:	8128d080 	call	8128d08 <_free_r>
 812bda0:	80001115 	stw	zero,68(r16)
 812bda4:	8000030d 	sth	zero,12(r16)
 812bda8:	81289780 	call	8128978 <__sfp_lock_release>
 812bdac:	9005883a 	mov	r2,r18
 812bdb0:	dfc00317 	ldw	ra,12(sp)
 812bdb4:	dc800217 	ldw	r18,8(sp)
 812bdb8:	dc400117 	ldw	r17,4(sp)
 812bdbc:	dc000017 	ldw	r16,0(sp)
 812bdc0:	dec00404 	addi	sp,sp,16
 812bdc4:	f800283a 	ret
 812bdc8:	81289780 	call	8128978 <__sfp_lock_release>
 812bdcc:	0025883a 	mov	r18,zero
 812bdd0:	9005883a 	mov	r2,r18
 812bdd4:	dfc00317 	ldw	ra,12(sp)
 812bdd8:	dc800217 	ldw	r18,8(sp)
 812bddc:	dc400117 	ldw	r17,4(sp)
 812bde0:	dc000017 	ldw	r16,0(sp)
 812bde4:	dec00404 	addi	sp,sp,16
 812bde8:	f800283a 	ret
 812bdec:	8809883a 	mov	r4,r17
 812bdf0:	81289840 	call	8128984 <__sinit>
 812bdf4:	8080030f 	ldh	r2,12(r16)
 812bdf8:	103fd11e 	bne	r2,zero,812bd40 <_fclose_r+0x38>
 812bdfc:	003ff206 	br	812bdc8 <_fclose_r+0xc0>
 812be00:	81400417 	ldw	r5,16(r16)
 812be04:	8809883a 	mov	r4,r17
 812be08:	8128d080 	call	8128d08 <_free_r>
 812be0c:	003fd906 	br	812bd74 <_fclose_r+0x6c>
 812be10:	04bfffc4 	movi	r18,-1
 812be14:	003fd406 	br	812bd68 <_fclose_r+0x60>

0812be18 <fclose>:
 812be18:	008204f4 	movhi	r2,2067
 812be1c:	108e5204 	addi	r2,r2,14664
 812be20:	200b883a 	mov	r5,r4
 812be24:	11000017 	ldw	r4,0(r2)
 812be28:	812bd081 	jmpi	812bd08 <_fclose_r>

0812be2c <_fstat_r>:
 812be2c:	defffd04 	addi	sp,sp,-12
 812be30:	dc000015 	stw	r16,0(sp)
 812be34:	040204f4 	movhi	r16,2067
 812be38:	84156404 	addi	r16,r16,21904
 812be3c:	dc400115 	stw	r17,4(sp)
 812be40:	80000015 	stw	zero,0(r16)
 812be44:	2023883a 	mov	r17,r4
 812be48:	2809883a 	mov	r4,r5
 812be4c:	300b883a 	mov	r5,r6
 812be50:	dfc00215 	stw	ra,8(sp)
 812be54:	812d0080 	call	812d008 <fstat>
 812be58:	1007883a 	mov	r3,r2
 812be5c:	00bfffc4 	movi	r2,-1
 812be60:	18800626 	beq	r3,r2,812be7c <_fstat_r+0x50>
 812be64:	1805883a 	mov	r2,r3
 812be68:	dfc00217 	ldw	ra,8(sp)
 812be6c:	dc400117 	ldw	r17,4(sp)
 812be70:	dc000017 	ldw	r16,0(sp)
 812be74:	dec00304 	addi	sp,sp,12
 812be78:	f800283a 	ret
 812be7c:	80800017 	ldw	r2,0(r16)
 812be80:	103ff826 	beq	r2,zero,812be64 <_fstat_r+0x38>
 812be84:	88800015 	stw	r2,0(r17)
 812be88:	1805883a 	mov	r2,r3
 812be8c:	dfc00217 	ldw	ra,8(sp)
 812be90:	dc400117 	ldw	r17,4(sp)
 812be94:	dc000017 	ldw	r16,0(sp)
 812be98:	dec00304 	addi	sp,sp,12
 812be9c:	f800283a 	ret

0812bea0 <_isatty_r>:
 812bea0:	defffd04 	addi	sp,sp,-12
 812bea4:	dc000015 	stw	r16,0(sp)
 812bea8:	040204f4 	movhi	r16,2067
 812beac:	84156404 	addi	r16,r16,21904
 812beb0:	dc400115 	stw	r17,4(sp)
 812beb4:	80000015 	stw	zero,0(r16)
 812beb8:	2023883a 	mov	r17,r4
 812bebc:	2809883a 	mov	r4,r5
 812bec0:	dfc00215 	stw	ra,8(sp)
 812bec4:	812d13c0 	call	812d13c <isatty>
 812bec8:	1007883a 	mov	r3,r2
 812becc:	00bfffc4 	movi	r2,-1
 812bed0:	18800626 	beq	r3,r2,812beec <_isatty_r+0x4c>
 812bed4:	1805883a 	mov	r2,r3
 812bed8:	dfc00217 	ldw	ra,8(sp)
 812bedc:	dc400117 	ldw	r17,4(sp)
 812bee0:	dc000017 	ldw	r16,0(sp)
 812bee4:	dec00304 	addi	sp,sp,12
 812bee8:	f800283a 	ret
 812beec:	80800017 	ldw	r2,0(r16)
 812bef0:	103ff826 	beq	r2,zero,812bed4 <_isatty_r+0x34>
 812bef4:	88800015 	stw	r2,0(r17)
 812bef8:	1805883a 	mov	r2,r3
 812befc:	dfc00217 	ldw	ra,8(sp)
 812bf00:	dc400117 	ldw	r17,4(sp)
 812bf04:	dc000017 	ldw	r16,0(sp)
 812bf08:	dec00304 	addi	sp,sp,12
 812bf0c:	f800283a 	ret

0812bf10 <_lseek_r>:
 812bf10:	defffd04 	addi	sp,sp,-12
 812bf14:	dc000015 	stw	r16,0(sp)
 812bf18:	040204f4 	movhi	r16,2067
 812bf1c:	84156404 	addi	r16,r16,21904
 812bf20:	dc400115 	stw	r17,4(sp)
 812bf24:	80000015 	stw	zero,0(r16)
 812bf28:	2023883a 	mov	r17,r4
 812bf2c:	2809883a 	mov	r4,r5
 812bf30:	300b883a 	mov	r5,r6
 812bf34:	380d883a 	mov	r6,r7
 812bf38:	dfc00215 	stw	ra,8(sp)
 812bf3c:	812d3480 	call	812d348 <lseek>
 812bf40:	1007883a 	mov	r3,r2
 812bf44:	00bfffc4 	movi	r2,-1
 812bf48:	18800626 	beq	r3,r2,812bf64 <_lseek_r+0x54>
 812bf4c:	1805883a 	mov	r2,r3
 812bf50:	dfc00217 	ldw	ra,8(sp)
 812bf54:	dc400117 	ldw	r17,4(sp)
 812bf58:	dc000017 	ldw	r16,0(sp)
 812bf5c:	dec00304 	addi	sp,sp,12
 812bf60:	f800283a 	ret
 812bf64:	80800017 	ldw	r2,0(r16)
 812bf68:	103ff826 	beq	r2,zero,812bf4c <_lseek_r+0x3c>
 812bf6c:	88800015 	stw	r2,0(r17)
 812bf70:	1805883a 	mov	r2,r3
 812bf74:	dfc00217 	ldw	ra,8(sp)
 812bf78:	dc400117 	ldw	r17,4(sp)
 812bf7c:	dc000017 	ldw	r16,0(sp)
 812bf80:	dec00304 	addi	sp,sp,12
 812bf84:	f800283a 	ret

0812bf88 <_read_r>:
 812bf88:	defffd04 	addi	sp,sp,-12
 812bf8c:	dc000015 	stw	r16,0(sp)
 812bf90:	040204f4 	movhi	r16,2067
 812bf94:	84156404 	addi	r16,r16,21904
 812bf98:	dc400115 	stw	r17,4(sp)
 812bf9c:	80000015 	stw	zero,0(r16)
 812bfa0:	2023883a 	mov	r17,r4
 812bfa4:	2809883a 	mov	r4,r5
 812bfa8:	300b883a 	mov	r5,r6
 812bfac:	380d883a 	mov	r6,r7
 812bfb0:	dfc00215 	stw	ra,8(sp)
 812bfb4:	812d5440 	call	812d544 <read>
 812bfb8:	1007883a 	mov	r3,r2
 812bfbc:	00bfffc4 	movi	r2,-1
 812bfc0:	18800626 	beq	r3,r2,812bfdc <_read_r+0x54>
 812bfc4:	1805883a 	mov	r2,r3
 812bfc8:	dfc00217 	ldw	ra,8(sp)
 812bfcc:	dc400117 	ldw	r17,4(sp)
 812bfd0:	dc000017 	ldw	r16,0(sp)
 812bfd4:	dec00304 	addi	sp,sp,12
 812bfd8:	f800283a 	ret
 812bfdc:	80800017 	ldw	r2,0(r16)
 812bfe0:	103ff826 	beq	r2,zero,812bfc4 <_read_r+0x3c>
 812bfe4:	88800015 	stw	r2,0(r17)
 812bfe8:	1805883a 	mov	r2,r3
 812bfec:	dfc00217 	ldw	ra,8(sp)
 812bff0:	dc400117 	ldw	r17,4(sp)
 812bff4:	dc000017 	ldw	r16,0(sp)
 812bff8:	dec00304 	addi	sp,sp,12
 812bffc:	f800283a 	ret

0812c000 <__udivdi3>:
 812c000:	defff004 	addi	sp,sp,-64
 812c004:	2005883a 	mov	r2,r4
 812c008:	3011883a 	mov	r8,r6
 812c00c:	df000e15 	stw	fp,56(sp)
 812c010:	dd000a15 	stw	r20,40(sp)
 812c014:	dc000615 	stw	r16,24(sp)
 812c018:	dfc00f15 	stw	ra,60(sp)
 812c01c:	ddc00d15 	stw	r23,52(sp)
 812c020:	dd800c15 	stw	r22,48(sp)
 812c024:	dd400b15 	stw	r21,44(sp)
 812c028:	dcc00915 	stw	r19,36(sp)
 812c02c:	dc800815 	stw	r18,32(sp)
 812c030:	dc400715 	stw	r17,28(sp)
 812c034:	4021883a 	mov	r16,r8
 812c038:	1039883a 	mov	fp,r2
 812c03c:	2829883a 	mov	r20,r5
 812c040:	38003b1e 	bne	r7,zero,812c130 <__udivdi3+0x130>
 812c044:	2a005c36 	bltu	r5,r8,812c1b8 <__udivdi3+0x1b8>
 812c048:	4000a626 	beq	r8,zero,812c2e4 <__udivdi3+0x2e4>
 812c04c:	00bfffd4 	movui	r2,65535
 812c050:	14009e36 	bltu	r2,r16,812c2cc <__udivdi3+0x2cc>
 812c054:	00803fc4 	movi	r2,255
 812c058:	14013d36 	bltu	r2,r16,812c550 <__udivdi3+0x550>
 812c05c:	000b883a 	mov	r5,zero
 812c060:	0005883a 	mov	r2,zero
 812c064:	8084d83a 	srl	r2,r16,r2
 812c068:	010204f4 	movhi	r4,2067
 812c06c:	21066204 	addi	r4,r4,6536
 812c070:	01800804 	movi	r6,32
 812c074:	1105883a 	add	r2,r2,r4
 812c078:	10c00003 	ldbu	r3,0(r2)
 812c07c:	28c7883a 	add	r3,r5,r3
 812c080:	30edc83a 	sub	r22,r6,r3
 812c084:	b000ee1e 	bne	r22,zero,812c440 <__udivdi3+0x440>
 812c088:	802ad43a 	srli	r21,r16,16
 812c08c:	00800044 	movi	r2,1
 812c090:	a423c83a 	sub	r17,r20,r16
 812c094:	85ffffcc 	andi	r23,r16,65535
 812c098:	d8800315 	stw	r2,12(sp)
 812c09c:	8809883a 	mov	r4,r17
 812c0a0:	a80b883a 	mov	r5,r21
 812c0a4:	81243d40 	call	81243d4 <__udivsi3>
 812c0a8:	8809883a 	mov	r4,r17
 812c0ac:	a80b883a 	mov	r5,r21
 812c0b0:	102d883a 	mov	r22,r2
 812c0b4:	81243dc0 	call	81243dc <__umodsi3>
 812c0b8:	1004943a 	slli	r2,r2,16
 812c0bc:	e006d43a 	srli	r3,fp,16
 812c0c0:	bda3383a 	mul	r17,r23,r22
 812c0c4:	10c4b03a 	or	r2,r2,r3
 812c0c8:	1440042e 	bgeu	r2,r17,812c0dc <__udivdi3+0xdc>
 812c0cc:	1405883a 	add	r2,r2,r16
 812c0d0:	b5bfffc4 	addi	r22,r22,-1
 812c0d4:	14000136 	bltu	r2,r16,812c0dc <__udivdi3+0xdc>
 812c0d8:	14413d36 	bltu	r2,r17,812c5d0 <__udivdi3+0x5d0>
 812c0dc:	1463c83a 	sub	r17,r2,r17
 812c0e0:	8809883a 	mov	r4,r17
 812c0e4:	a80b883a 	mov	r5,r21
 812c0e8:	81243d40 	call	81243d4 <__udivsi3>
 812c0ec:	8809883a 	mov	r4,r17
 812c0f0:	a80b883a 	mov	r5,r21
 812c0f4:	1029883a 	mov	r20,r2
 812c0f8:	81243dc0 	call	81243dc <__umodsi3>
 812c0fc:	1004943a 	slli	r2,r2,16
 812c100:	bd09383a 	mul	r4,r23,r20
 812c104:	e0ffffcc 	andi	r3,fp,65535
 812c108:	10c4b03a 	or	r2,r2,r3
 812c10c:	1100042e 	bgeu	r2,r4,812c120 <__udivdi3+0x120>
 812c110:	8085883a 	add	r2,r16,r2
 812c114:	a53fffc4 	addi	r20,r20,-1
 812c118:	14000136 	bltu	r2,r16,812c120 <__udivdi3+0x120>
 812c11c:	11012036 	bltu	r2,r4,812c5a0 <__udivdi3+0x5a0>
 812c120:	b004943a 	slli	r2,r22,16
 812c124:	d9000317 	ldw	r4,12(sp)
 812c128:	a084b03a 	or	r2,r20,r2
 812c12c:	00001506 	br	812c184 <__udivdi3+0x184>
 812c130:	380d883a 	mov	r6,r7
 812c134:	29c06236 	bltu	r5,r7,812c2c0 <__udivdi3+0x2c0>
 812c138:	00bfffd4 	movui	r2,65535
 812c13c:	11c05a36 	bltu	r2,r7,812c2a8 <__udivdi3+0x2a8>
 812c140:	00803fc4 	movi	r2,255
 812c144:	11c0fc36 	bltu	r2,r7,812c538 <__udivdi3+0x538>
 812c148:	000b883a 	mov	r5,zero
 812c14c:	0005883a 	mov	r2,zero
 812c150:	3084d83a 	srl	r2,r6,r2
 812c154:	010204f4 	movhi	r4,2067
 812c158:	21066204 	addi	r4,r4,6536
 812c15c:	01c00804 	movi	r7,32
 812c160:	1105883a 	add	r2,r2,r4
 812c164:	10c00003 	ldbu	r3,0(r2)
 812c168:	28c7883a 	add	r3,r5,r3
 812c16c:	38efc83a 	sub	r23,r7,r3
 812c170:	b800691e 	bne	r23,zero,812c318 <__udivdi3+0x318>
 812c174:	35000136 	bltu	r6,r20,812c17c <__udivdi3+0x17c>
 812c178:	e4005136 	bltu	fp,r16,812c2c0 <__udivdi3+0x2c0>
 812c17c:	00800044 	movi	r2,1
 812c180:	0009883a 	mov	r4,zero
 812c184:	2007883a 	mov	r3,r4
 812c188:	dfc00f17 	ldw	ra,60(sp)
 812c18c:	df000e17 	ldw	fp,56(sp)
 812c190:	ddc00d17 	ldw	r23,52(sp)
 812c194:	dd800c17 	ldw	r22,48(sp)
 812c198:	dd400b17 	ldw	r21,44(sp)
 812c19c:	dd000a17 	ldw	r20,40(sp)
 812c1a0:	dcc00917 	ldw	r19,36(sp)
 812c1a4:	dc800817 	ldw	r18,32(sp)
 812c1a8:	dc400717 	ldw	r17,28(sp)
 812c1ac:	dc000617 	ldw	r16,24(sp)
 812c1b0:	dec01004 	addi	sp,sp,64
 812c1b4:	f800283a 	ret
 812c1b8:	00bfffd4 	movui	r2,65535
 812c1bc:	12005036 	bltu	r2,r8,812c300 <__udivdi3+0x300>
 812c1c0:	00803fc4 	movi	r2,255
 812c1c4:	1200e836 	bltu	r2,r8,812c568 <__udivdi3+0x568>
 812c1c8:	000b883a 	mov	r5,zero
 812c1cc:	0005883a 	mov	r2,zero
 812c1d0:	8084d83a 	srl	r2,r16,r2
 812c1d4:	010204f4 	movhi	r4,2067
 812c1d8:	21066204 	addi	r4,r4,6536
 812c1dc:	01800804 	movi	r6,32
 812c1e0:	1105883a 	add	r2,r2,r4
 812c1e4:	10c00003 	ldbu	r3,0(r2)
 812c1e8:	28c7883a 	add	r3,r5,r3
 812c1ec:	30cbc83a 	sub	r5,r6,r3
 812c1f0:	28000626 	beq	r5,zero,812c20c <__udivdi3+0x20c>
 812c1f4:	3145c83a 	sub	r2,r6,r5
 812c1f8:	e084d83a 	srl	r2,fp,r2
 812c1fc:	a146983a 	sll	r3,r20,r5
 812c200:	e178983a 	sll	fp,fp,r5
 812c204:	8160983a 	sll	r16,r16,r5
 812c208:	18a8b03a 	or	r20,r3,r2
 812c20c:	802ad43a 	srli	r21,r16,16
 812c210:	a009883a 	mov	r4,r20
 812c214:	85ffffcc 	andi	r23,r16,65535
 812c218:	a80b883a 	mov	r5,r21
 812c21c:	81243d40 	call	81243d4 <__udivsi3>
 812c220:	a009883a 	mov	r4,r20
 812c224:	a80b883a 	mov	r5,r21
 812c228:	102d883a 	mov	r22,r2
 812c22c:	81243dc0 	call	81243dc <__umodsi3>
 812c230:	1004943a 	slli	r2,r2,16
 812c234:	e006d43a 	srli	r3,fp,16
 812c238:	bda3383a 	mul	r17,r23,r22
 812c23c:	10c4b03a 	or	r2,r2,r3
 812c240:	1440042e 	bgeu	r2,r17,812c254 <__udivdi3+0x254>
 812c244:	1405883a 	add	r2,r2,r16
 812c248:	b5bfffc4 	addi	r22,r22,-1
 812c24c:	14000136 	bltu	r2,r16,812c254 <__udivdi3+0x254>
 812c250:	1440d536 	bltu	r2,r17,812c5a8 <__udivdi3+0x5a8>
 812c254:	1463c83a 	sub	r17,r2,r17
 812c258:	8809883a 	mov	r4,r17
 812c25c:	a80b883a 	mov	r5,r21
 812c260:	81243d40 	call	81243d4 <__udivsi3>
 812c264:	8809883a 	mov	r4,r17
 812c268:	a80b883a 	mov	r5,r21
 812c26c:	1029883a 	mov	r20,r2
 812c270:	81243dc0 	call	81243dc <__umodsi3>
 812c274:	1004943a 	slli	r2,r2,16
 812c278:	bd09383a 	mul	r4,r23,r20
 812c27c:	e0ffffcc 	andi	r3,fp,65535
 812c280:	10c4b03a 	or	r2,r2,r3
 812c284:	1100042e 	bgeu	r2,r4,812c298 <__udivdi3+0x298>
 812c288:	8085883a 	add	r2,r16,r2
 812c28c:	a53fffc4 	addi	r20,r20,-1
 812c290:	14000136 	bltu	r2,r16,812c298 <__udivdi3+0x298>
 812c294:	1100c736 	bltu	r2,r4,812c5b4 <__udivdi3+0x5b4>
 812c298:	b004943a 	slli	r2,r22,16
 812c29c:	0009883a 	mov	r4,zero
 812c2a0:	a084b03a 	or	r2,r20,r2
 812c2a4:	003fb706 	br	812c184 <__udivdi3+0x184>
 812c2a8:	00804034 	movhi	r2,256
 812c2ac:	10bfffc4 	addi	r2,r2,-1
 812c2b0:	11c0a436 	bltu	r2,r7,812c544 <__udivdi3+0x544>
 812c2b4:	01400404 	movi	r5,16
 812c2b8:	2805883a 	mov	r2,r5
 812c2bc:	003fa406 	br	812c150 <__udivdi3+0x150>
 812c2c0:	0005883a 	mov	r2,zero
 812c2c4:	0009883a 	mov	r4,zero
 812c2c8:	003fae06 	br	812c184 <__udivdi3+0x184>
 812c2cc:	00804034 	movhi	r2,256
 812c2d0:	10bfffc4 	addi	r2,r2,-1
 812c2d4:	1400a136 	bltu	r2,r16,812c55c <__udivdi3+0x55c>
 812c2d8:	01400404 	movi	r5,16
 812c2dc:	2805883a 	mov	r2,r5
 812c2e0:	003f6006 	br	812c064 <__udivdi3+0x64>
 812c2e4:	01000044 	movi	r4,1
 812c2e8:	000b883a 	mov	r5,zero
 812c2ec:	81243d40 	call	81243d4 <__udivsi3>
 812c2f0:	1021883a 	mov	r16,r2
 812c2f4:	00bfffd4 	movui	r2,65535
 812c2f8:	143ff436 	bltu	r2,r16,812c2cc <__udivdi3+0x2cc>
 812c2fc:	003f5506 	br	812c054 <__udivdi3+0x54>
 812c300:	00804034 	movhi	r2,256
 812c304:	10bfffc4 	addi	r2,r2,-1
 812c308:	12009a36 	bltu	r2,r8,812c574 <__udivdi3+0x574>
 812c30c:	01400404 	movi	r5,16
 812c310:	2805883a 	mov	r2,r5
 812c314:	003fae06 	br	812c1d0 <__udivdi3+0x1d0>
 812c318:	3dc5c83a 	sub	r2,r7,r23
 812c31c:	35c8983a 	sll	r4,r6,r23
 812c320:	8086d83a 	srl	r3,r16,r2
 812c324:	a0a2d83a 	srl	r17,r20,r2
 812c328:	e084d83a 	srl	r2,fp,r2
 812c32c:	20eab03a 	or	r21,r4,r3
 812c330:	a82cd43a 	srli	r22,r21,16
 812c334:	a5c6983a 	sll	r3,r20,r23
 812c338:	8809883a 	mov	r4,r17
 812c33c:	b00b883a 	mov	r5,r22
 812c340:	1886b03a 	or	r3,r3,r2
 812c344:	d8c00215 	stw	r3,8(sp)
 812c348:	81243d40 	call	81243d4 <__udivsi3>
 812c34c:	8809883a 	mov	r4,r17
 812c350:	b00b883a 	mov	r5,r22
 812c354:	1029883a 	mov	r20,r2
 812c358:	81243dc0 	call	81243dc <__umodsi3>
 812c35c:	a8ffffcc 	andi	r3,r21,65535
 812c360:	d8c00515 	stw	r3,20(sp)
 812c364:	d9000217 	ldw	r4,8(sp)
 812c368:	d9400517 	ldw	r5,20(sp)
 812c36c:	1004943a 	slli	r2,r2,16
 812c370:	2006d43a 	srli	r3,r4,16
 812c374:	85e0983a 	sll	r16,r16,r23
 812c378:	2d23383a 	mul	r17,r5,r20
 812c37c:	10c4b03a 	or	r2,r2,r3
 812c380:	dc000015 	stw	r16,0(sp)
 812c384:	1440032e 	bgeu	r2,r17,812c394 <__udivdi3+0x394>
 812c388:	1545883a 	add	r2,r2,r21
 812c38c:	a53fffc4 	addi	r20,r20,-1
 812c390:	15407f2e 	bgeu	r2,r21,812c590 <__udivdi3+0x590>
 812c394:	1463c83a 	sub	r17,r2,r17
 812c398:	8809883a 	mov	r4,r17
 812c39c:	b00b883a 	mov	r5,r22
 812c3a0:	81243d40 	call	81243d4 <__udivsi3>
 812c3a4:	8809883a 	mov	r4,r17
 812c3a8:	b00b883a 	mov	r5,r22
 812c3ac:	1021883a 	mov	r16,r2
 812c3b0:	81243dc0 	call	81243dc <__umodsi3>
 812c3b4:	d8c00517 	ldw	r3,20(sp)
 812c3b8:	d9000217 	ldw	r4,8(sp)
 812c3bc:	1004943a 	slli	r2,r2,16
 812c3c0:	1c0f383a 	mul	r7,r3,r16
 812c3c4:	20ffffcc 	andi	r3,r4,65535
 812c3c8:	10e2b03a 	or	r17,r2,r3
 812c3cc:	89c0032e 	bgeu	r17,r7,812c3dc <__udivdi3+0x3dc>
 812c3d0:	8d63883a 	add	r17,r17,r21
 812c3d4:	843fffc4 	addi	r16,r16,-1
 812c3d8:	8d40692e 	bgeu	r17,r21,812c580 <__udivdi3+0x580>
 812c3dc:	a008943a 	slli	r4,r20,16
 812c3e0:	d9400017 	ldw	r5,0(sp)
 812c3e4:	89e3c83a 	sub	r17,r17,r7
 812c3e8:	8110b03a 	or	r8,r16,r4
 812c3ec:	280cd43a 	srli	r6,r5,16
 812c3f0:	28ffffcc 	andi	r3,r5,65535
 812c3f4:	40bfffcc 	andi	r2,r8,65535
 812c3f8:	400ad43a 	srli	r5,r8,16
 812c3fc:	10d3383a 	mul	r9,r2,r3
 812c400:	1185383a 	mul	r2,r2,r6
 812c404:	28c7383a 	mul	r3,r5,r3
 812c408:	4808d43a 	srli	r4,r9,16
 812c40c:	298b383a 	mul	r5,r5,r6
 812c410:	10c5883a 	add	r2,r2,r3
 812c414:	2089883a 	add	r4,r4,r2
 812c418:	20c0022e 	bgeu	r4,r3,812c424 <__udivdi3+0x424>
 812c41c:	00800074 	movhi	r2,1
 812c420:	288b883a 	add	r5,r5,r2
 812c424:	2004d43a 	srli	r2,r4,16
 812c428:	288b883a 	add	r5,r5,r2
 812c42c:	89403f36 	bltu	r17,r5,812c52c <__udivdi3+0x52c>
 812c430:	89403926 	beq	r17,r5,812c518 <__udivdi3+0x518>
 812c434:	4005883a 	mov	r2,r8
 812c438:	0009883a 	mov	r4,zero
 812c43c:	003f5106 	br	812c184 <__udivdi3+0x184>
 812c440:	85a0983a 	sll	r16,r16,r22
 812c444:	3585c83a 	sub	r2,r6,r22
 812c448:	a0a2d83a 	srl	r17,r20,r2
 812c44c:	802ad43a 	srli	r21,r16,16
 812c450:	e084d83a 	srl	r2,fp,r2
 812c454:	a586983a 	sll	r3,r20,r22
 812c458:	8809883a 	mov	r4,r17
 812c45c:	a80b883a 	mov	r5,r21
 812c460:	1886b03a 	or	r3,r3,r2
 812c464:	d8c00115 	stw	r3,4(sp)
 812c468:	81243d40 	call	81243d4 <__udivsi3>
 812c46c:	8809883a 	mov	r4,r17
 812c470:	a80b883a 	mov	r5,r21
 812c474:	d8800415 	stw	r2,16(sp)
 812c478:	81243dc0 	call	81243dc <__umodsi3>
 812c47c:	d9000117 	ldw	r4,4(sp)
 812c480:	d9400417 	ldw	r5,16(sp)
 812c484:	1004943a 	slli	r2,r2,16
 812c488:	85ffffcc 	andi	r23,r16,65535
 812c48c:	2006d43a 	srli	r3,r4,16
 812c490:	b963383a 	mul	r17,r23,r5
 812c494:	10c4b03a 	or	r2,r2,r3
 812c498:	1440042e 	bgeu	r2,r17,812c4ac <__udivdi3+0x4ac>
 812c49c:	297fffc4 	addi	r5,r5,-1
 812c4a0:	1405883a 	add	r2,r2,r16
 812c4a4:	d9400415 	stw	r5,16(sp)
 812c4a8:	1400442e 	bgeu	r2,r16,812c5bc <__udivdi3+0x5bc>
 812c4ac:	1463c83a 	sub	r17,r2,r17
 812c4b0:	8809883a 	mov	r4,r17
 812c4b4:	a80b883a 	mov	r5,r21
 812c4b8:	81243d40 	call	81243d4 <__udivsi3>
 812c4bc:	8809883a 	mov	r4,r17
 812c4c0:	a80b883a 	mov	r5,r21
 812c4c4:	1029883a 	mov	r20,r2
 812c4c8:	81243dc0 	call	81243dc <__umodsi3>
 812c4cc:	d9400117 	ldw	r5,4(sp)
 812c4d0:	1004943a 	slli	r2,r2,16
 812c4d4:	bd09383a 	mul	r4,r23,r20
 812c4d8:	28ffffcc 	andi	r3,r5,65535
 812c4dc:	10c6b03a 	or	r3,r2,r3
 812c4e0:	1900062e 	bgeu	r3,r4,812c4fc <__udivdi3+0x4fc>
 812c4e4:	1c07883a 	add	r3,r3,r16
 812c4e8:	a53fffc4 	addi	r20,r20,-1
 812c4ec:	1c000336 	bltu	r3,r16,812c4fc <__udivdi3+0x4fc>
 812c4f0:	1900022e 	bgeu	r3,r4,812c4fc <__udivdi3+0x4fc>
 812c4f4:	a53fffc4 	addi	r20,r20,-1
 812c4f8:	1c07883a 	add	r3,r3,r16
 812c4fc:	d9400417 	ldw	r5,16(sp)
 812c500:	e5b8983a 	sll	fp,fp,r22
 812c504:	1923c83a 	sub	r17,r3,r4
 812c508:	2804943a 	slli	r2,r5,16
 812c50c:	a0a8b03a 	or	r20,r20,r2
 812c510:	dd000315 	stw	r20,12(sp)
 812c514:	003ee106 	br	812c09c <__udivdi3+0x9c>
 812c518:	2004943a 	slli	r2,r4,16
 812c51c:	e5c8983a 	sll	r4,fp,r23
 812c520:	48ffffcc 	andi	r3,r9,65535
 812c524:	10c5883a 	add	r2,r2,r3
 812c528:	20bfc22e 	bgeu	r4,r2,812c434 <__udivdi3+0x434>
 812c52c:	40bfffc4 	addi	r2,r8,-1
 812c530:	0009883a 	mov	r4,zero
 812c534:	003f1306 	br	812c184 <__udivdi3+0x184>
 812c538:	01400204 	movi	r5,8
 812c53c:	2805883a 	mov	r2,r5
 812c540:	003f0306 	br	812c150 <__udivdi3+0x150>
 812c544:	01400604 	movi	r5,24
 812c548:	2805883a 	mov	r2,r5
 812c54c:	003f0006 	br	812c150 <__udivdi3+0x150>
 812c550:	01400204 	movi	r5,8
 812c554:	2805883a 	mov	r2,r5
 812c558:	003ec206 	br	812c064 <__udivdi3+0x64>
 812c55c:	01400604 	movi	r5,24
 812c560:	2805883a 	mov	r2,r5
 812c564:	003ebf06 	br	812c064 <__udivdi3+0x64>
 812c568:	01400204 	movi	r5,8
 812c56c:	2805883a 	mov	r2,r5
 812c570:	003f1706 	br	812c1d0 <__udivdi3+0x1d0>
 812c574:	01400604 	movi	r5,24
 812c578:	2805883a 	mov	r2,r5
 812c57c:	003f1406 	br	812c1d0 <__udivdi3+0x1d0>
 812c580:	89ff962e 	bgeu	r17,r7,812c3dc <__udivdi3+0x3dc>
 812c584:	8d63883a 	add	r17,r17,r21
 812c588:	843fffc4 	addi	r16,r16,-1
 812c58c:	003f9306 	br	812c3dc <__udivdi3+0x3dc>
 812c590:	147f802e 	bgeu	r2,r17,812c394 <__udivdi3+0x394>
 812c594:	a53fffc4 	addi	r20,r20,-1
 812c598:	1545883a 	add	r2,r2,r21
 812c59c:	003f7d06 	br	812c394 <__udivdi3+0x394>
 812c5a0:	a53fffc4 	addi	r20,r20,-1
 812c5a4:	003ede06 	br	812c120 <__udivdi3+0x120>
 812c5a8:	b5bfffc4 	addi	r22,r22,-1
 812c5ac:	1405883a 	add	r2,r2,r16
 812c5b0:	003f2806 	br	812c254 <__udivdi3+0x254>
 812c5b4:	a53fffc4 	addi	r20,r20,-1
 812c5b8:	003f3706 	br	812c298 <__udivdi3+0x298>
 812c5bc:	147fbb2e 	bgeu	r2,r17,812c4ac <__udivdi3+0x4ac>
 812c5c0:	297fffc4 	addi	r5,r5,-1
 812c5c4:	1405883a 	add	r2,r2,r16
 812c5c8:	d9400415 	stw	r5,16(sp)
 812c5cc:	003fb706 	br	812c4ac <__udivdi3+0x4ac>
 812c5d0:	b5bfffc4 	addi	r22,r22,-1
 812c5d4:	1405883a 	add	r2,r2,r16
 812c5d8:	003ec006 	br	812c0dc <__udivdi3+0xdc>

0812c5dc <__umoddi3>:
 812c5dc:	defff104 	addi	sp,sp,-60
 812c5e0:	dd800b15 	stw	r22,44(sp)
 812c5e4:	dd000915 	stw	r20,36(sp)
 812c5e8:	dc000515 	stw	r16,20(sp)
 812c5ec:	dfc00e15 	stw	ra,56(sp)
 812c5f0:	df000d15 	stw	fp,52(sp)
 812c5f4:	ddc00c15 	stw	r23,48(sp)
 812c5f8:	dd400a15 	stw	r21,40(sp)
 812c5fc:	dcc00815 	stw	r19,32(sp)
 812c600:	dc800715 	stw	r18,28(sp)
 812c604:	dc400615 	stw	r17,24(sp)
 812c608:	3021883a 	mov	r16,r6
 812c60c:	202d883a 	mov	r22,r4
 812c610:	2829883a 	mov	r20,r5
 812c614:	38002b1e 	bne	r7,zero,812c6c4 <__umoddi3+0xe8>
 812c618:	29805036 	bltu	r5,r6,812c75c <__umoddi3+0x180>
 812c61c:	30008a26 	beq	r6,zero,812c848 <__umoddi3+0x26c>
 812c620:	00bfffd4 	movui	r2,65535
 812c624:	14008236 	bltu	r2,r16,812c830 <__umoddi3+0x254>
 812c628:	00803fc4 	movi	r2,255
 812c62c:	14013636 	bltu	r2,r16,812cb08 <__umoddi3+0x52c>
 812c630:	000b883a 	mov	r5,zero
 812c634:	0005883a 	mov	r2,zero
 812c638:	8084d83a 	srl	r2,r16,r2
 812c63c:	010204f4 	movhi	r4,2067
 812c640:	21066204 	addi	r4,r4,6536
 812c644:	01800804 	movi	r6,32
 812c648:	1105883a 	add	r2,r2,r4
 812c64c:	10c00003 	ldbu	r3,0(r2)
 812c650:	28c7883a 	add	r3,r5,r3
 812c654:	30efc83a 	sub	r23,r6,r3
 812c658:	b800941e 	bne	r23,zero,812c8ac <__umoddi3+0x2d0>
 812c65c:	802ad43a 	srli	r21,r16,16
 812c660:	a423c83a 	sub	r17,r20,r16
 812c664:	0039883a 	mov	fp,zero
 812c668:	853fffcc 	andi	r20,r16,65535
 812c66c:	8809883a 	mov	r4,r17
 812c670:	a80b883a 	mov	r5,r21
 812c674:	81243d40 	call	81243d4 <__udivsi3>
 812c678:	8809883a 	mov	r4,r17
 812c67c:	a80b883a 	mov	r5,r21
 812c680:	a0a3383a 	mul	r17,r20,r2
 812c684:	81243dc0 	call	81243dc <__umodsi3>
 812c688:	1004943a 	slli	r2,r2,16
 812c68c:	b006d43a 	srli	r3,r22,16
 812c690:	10c4b03a 	or	r2,r2,r3
 812c694:	1440032e 	bgeu	r2,r17,812c6a4 <__umoddi3+0xc8>
 812c698:	1405883a 	add	r2,r2,r16
 812c69c:	14000136 	bltu	r2,r16,812c6a4 <__umoddi3+0xc8>
 812c6a0:	14413536 	bltu	r2,r17,812cb78 <__umoddi3+0x59c>
 812c6a4:	1463c83a 	sub	r17,r2,r17
 812c6a8:	8809883a 	mov	r4,r17
 812c6ac:	a80b883a 	mov	r5,r21
 812c6b0:	81243d40 	call	81243d4 <__udivsi3>
 812c6b4:	8809883a 	mov	r4,r17
 812c6b8:	a0a3383a 	mul	r17,r20,r2
 812c6bc:	a80b883a 	mov	r5,r21
 812c6c0:	00004d06 	br	812c7f8 <__umoddi3+0x21c>
 812c6c4:	380d883a 	mov	r6,r7
 812c6c8:	29c0102e 	bgeu	r5,r7,812c70c <__umoddi3+0x130>
 812c6cc:	2011883a 	mov	r8,r4
 812c6d0:	2813883a 	mov	r9,r5
 812c6d4:	4005883a 	mov	r2,r8
 812c6d8:	4807883a 	mov	r3,r9
 812c6dc:	dfc00e17 	ldw	ra,56(sp)
 812c6e0:	df000d17 	ldw	fp,52(sp)
 812c6e4:	ddc00c17 	ldw	r23,48(sp)
 812c6e8:	dd800b17 	ldw	r22,44(sp)
 812c6ec:	dd400a17 	ldw	r21,40(sp)
 812c6f0:	dd000917 	ldw	r20,36(sp)
 812c6f4:	dcc00817 	ldw	r19,32(sp)
 812c6f8:	dc800717 	ldw	r18,28(sp)
 812c6fc:	dc400617 	ldw	r17,24(sp)
 812c700:	dc000517 	ldw	r16,20(sp)
 812c704:	dec00f04 	addi	sp,sp,60
 812c708:	f800283a 	ret
 812c70c:	00bfffd4 	movui	r2,65535
 812c710:	11c05a36 	bltu	r2,r7,812c87c <__umoddi3+0x2a0>
 812c714:	00803fc4 	movi	r2,255
 812c718:	11c0fe36 	bltu	r2,r7,812cb14 <__umoddi3+0x538>
 812c71c:	000b883a 	mov	r5,zero
 812c720:	0005883a 	mov	r2,zero
 812c724:	3084d83a 	srl	r2,r6,r2
 812c728:	010204f4 	movhi	r4,2067
 812c72c:	21066204 	addi	r4,r4,6536
 812c730:	01c00804 	movi	r7,32
 812c734:	1105883a 	add	r2,r2,r4
 812c738:	10c00003 	ldbu	r3,0(r2)
 812c73c:	28c7883a 	add	r3,r5,r3
 812c740:	38ebc83a 	sub	r21,r7,r3
 812c744:	a800851e 	bne	r21,zero,812c95c <__umoddi3+0x380>
 812c748:	35005236 	bltu	r6,r20,812c894 <__umoddi3+0x2b8>
 812c74c:	b400512e 	bgeu	r22,r16,812c894 <__umoddi3+0x2b8>
 812c750:	b011883a 	mov	r8,r22
 812c754:	a013883a 	mov	r9,r20
 812c758:	003fde06 	br	812c6d4 <__umoddi3+0xf8>
 812c75c:	00bfffd4 	movui	r2,65535
 812c760:	11804036 	bltu	r2,r6,812c864 <__umoddi3+0x288>
 812c764:	00803fc4 	movi	r2,255
 812c768:	1180ed36 	bltu	r2,r6,812cb20 <__umoddi3+0x544>
 812c76c:	000b883a 	mov	r5,zero
 812c770:	0005883a 	mov	r2,zero
 812c774:	8084d83a 	srl	r2,r16,r2
 812c778:	010204f4 	movhi	r4,2067
 812c77c:	21066204 	addi	r4,r4,6536
 812c780:	01800804 	movi	r6,32
 812c784:	1105883a 	add	r2,r2,r4
 812c788:	10c00003 	ldbu	r3,0(r2)
 812c78c:	28c7883a 	add	r3,r5,r3
 812c790:	30c7c83a 	sub	r3,r6,r3
 812c794:	1800bf1e 	bne	r3,zero,812ca94 <__umoddi3+0x4b8>
 812c798:	0039883a 	mov	fp,zero
 812c79c:	802ad43a 	srli	r21,r16,16
 812c7a0:	a009883a 	mov	r4,r20
 812c7a4:	85ffffcc 	andi	r23,r16,65535
 812c7a8:	a80b883a 	mov	r5,r21
 812c7ac:	81243d40 	call	81243d4 <__udivsi3>
 812c7b0:	a009883a 	mov	r4,r20
 812c7b4:	a80b883a 	mov	r5,r21
 812c7b8:	b8a3383a 	mul	r17,r23,r2
 812c7bc:	81243dc0 	call	81243dc <__umodsi3>
 812c7c0:	1004943a 	slli	r2,r2,16
 812c7c4:	b006d43a 	srli	r3,r22,16
 812c7c8:	10c4b03a 	or	r2,r2,r3
 812c7cc:	1440032e 	bgeu	r2,r17,812c7dc <__umoddi3+0x200>
 812c7d0:	1405883a 	add	r2,r2,r16
 812c7d4:	14000136 	bltu	r2,r16,812c7dc <__umoddi3+0x200>
 812c7d8:	1440e536 	bltu	r2,r17,812cb70 <__umoddi3+0x594>
 812c7dc:	1463c83a 	sub	r17,r2,r17
 812c7e0:	8809883a 	mov	r4,r17
 812c7e4:	a80b883a 	mov	r5,r21
 812c7e8:	81243d40 	call	81243d4 <__udivsi3>
 812c7ec:	8809883a 	mov	r4,r17
 812c7f0:	b8a3383a 	mul	r17,r23,r2
 812c7f4:	a80b883a 	mov	r5,r21
 812c7f8:	81243dc0 	call	81243dc <__umodsi3>
 812c7fc:	1004943a 	slli	r2,r2,16
 812c800:	b0ffffcc 	andi	r3,r22,65535
 812c804:	10c4b03a 	or	r2,r2,r3
 812c808:	1440042e 	bgeu	r2,r17,812c81c <__umoddi3+0x240>
 812c80c:	1405883a 	add	r2,r2,r16
 812c810:	14000236 	bltu	r2,r16,812c81c <__umoddi3+0x240>
 812c814:	1440012e 	bgeu	r2,r17,812c81c <__umoddi3+0x240>
 812c818:	1405883a 	add	r2,r2,r16
 812c81c:	1445c83a 	sub	r2,r2,r17
 812c820:	1724d83a 	srl	r18,r2,fp
 812c824:	0013883a 	mov	r9,zero
 812c828:	9011883a 	mov	r8,r18
 812c82c:	003fa906 	br	812c6d4 <__umoddi3+0xf8>
 812c830:	00804034 	movhi	r2,256
 812c834:	10bfffc4 	addi	r2,r2,-1
 812c838:	1400b036 	bltu	r2,r16,812cafc <__umoddi3+0x520>
 812c83c:	01400404 	movi	r5,16
 812c840:	2805883a 	mov	r2,r5
 812c844:	003f7c06 	br	812c638 <__umoddi3+0x5c>
 812c848:	01000044 	movi	r4,1
 812c84c:	000b883a 	mov	r5,zero
 812c850:	81243d40 	call	81243d4 <__udivsi3>
 812c854:	1021883a 	mov	r16,r2
 812c858:	00bfffd4 	movui	r2,65535
 812c85c:	143ff436 	bltu	r2,r16,812c830 <__umoddi3+0x254>
 812c860:	003f7106 	br	812c628 <__umoddi3+0x4c>
 812c864:	00804034 	movhi	r2,256
 812c868:	10bfffc4 	addi	r2,r2,-1
 812c86c:	1180af36 	bltu	r2,r6,812cb2c <__umoddi3+0x550>
 812c870:	01400404 	movi	r5,16
 812c874:	2805883a 	mov	r2,r5
 812c878:	003fbe06 	br	812c774 <__umoddi3+0x198>
 812c87c:	00804034 	movhi	r2,256
 812c880:	10bfffc4 	addi	r2,r2,-1
 812c884:	11c0ac36 	bltu	r2,r7,812cb38 <__umoddi3+0x55c>
 812c888:	01400404 	movi	r5,16
 812c88c:	2805883a 	mov	r2,r5
 812c890:	003fa406 	br	812c724 <__umoddi3+0x148>
 812c894:	b409c83a 	sub	r4,r22,r16
 812c898:	b105803a 	cmpltu	r2,r22,r4
 812c89c:	a187c83a 	sub	r3,r20,r6
 812c8a0:	18a9c83a 	sub	r20,r3,r2
 812c8a4:	202d883a 	mov	r22,r4
 812c8a8:	003fa906 	br	812c750 <__umoddi3+0x174>
 812c8ac:	85e0983a 	sll	r16,r16,r23
 812c8b0:	35c5c83a 	sub	r2,r6,r23
 812c8b4:	a0a2d83a 	srl	r17,r20,r2
 812c8b8:	802ad43a 	srli	r21,r16,16
 812c8bc:	b084d83a 	srl	r2,r22,r2
 812c8c0:	a5c6983a 	sll	r3,r20,r23
 812c8c4:	8809883a 	mov	r4,r17
 812c8c8:	a80b883a 	mov	r5,r21
 812c8cc:	1886b03a 	or	r3,r3,r2
 812c8d0:	d8c00115 	stw	r3,4(sp)
 812c8d4:	853fffcc 	andi	r20,r16,65535
 812c8d8:	81243d40 	call	81243d4 <__udivsi3>
 812c8dc:	8809883a 	mov	r4,r17
 812c8e0:	a80b883a 	mov	r5,r21
 812c8e4:	a0a3383a 	mul	r17,r20,r2
 812c8e8:	81243dc0 	call	81243dc <__umodsi3>
 812c8ec:	d9000117 	ldw	r4,4(sp)
 812c8f0:	1004943a 	slli	r2,r2,16
 812c8f4:	b839883a 	mov	fp,r23
 812c8f8:	2006d43a 	srli	r3,r4,16
 812c8fc:	10c4b03a 	or	r2,r2,r3
 812c900:	1440022e 	bgeu	r2,r17,812c90c <__umoddi3+0x330>
 812c904:	1405883a 	add	r2,r2,r16
 812c908:	1400962e 	bgeu	r2,r16,812cb64 <__umoddi3+0x588>
 812c90c:	1463c83a 	sub	r17,r2,r17
 812c910:	8809883a 	mov	r4,r17
 812c914:	a80b883a 	mov	r5,r21
 812c918:	81243d40 	call	81243d4 <__udivsi3>
 812c91c:	8809883a 	mov	r4,r17
 812c920:	a80b883a 	mov	r5,r21
 812c924:	a0a3383a 	mul	r17,r20,r2
 812c928:	81243dc0 	call	81243dc <__umodsi3>
 812c92c:	d9400117 	ldw	r5,4(sp)
 812c930:	1004943a 	slli	r2,r2,16
 812c934:	28ffffcc 	andi	r3,r5,65535
 812c938:	10c4b03a 	or	r2,r2,r3
 812c93c:	1440042e 	bgeu	r2,r17,812c950 <__umoddi3+0x374>
 812c940:	1405883a 	add	r2,r2,r16
 812c944:	14000236 	bltu	r2,r16,812c950 <__umoddi3+0x374>
 812c948:	1440012e 	bgeu	r2,r17,812c950 <__umoddi3+0x374>
 812c94c:	1405883a 	add	r2,r2,r16
 812c950:	b5ec983a 	sll	r22,r22,r23
 812c954:	1463c83a 	sub	r17,r2,r17
 812c958:	003f4406 	br	812c66c <__umoddi3+0x90>
 812c95c:	3d4fc83a 	sub	r7,r7,r21
 812c960:	3546983a 	sll	r3,r6,r21
 812c964:	81c4d83a 	srl	r2,r16,r7
 812c968:	a1e2d83a 	srl	r17,r20,r7
 812c96c:	a54c983a 	sll	r6,r20,r21
 812c970:	18aeb03a 	or	r23,r3,r2
 812c974:	b828d43a 	srli	r20,r23,16
 812c978:	b1c4d83a 	srl	r2,r22,r7
 812c97c:	8809883a 	mov	r4,r17
 812c980:	a00b883a 	mov	r5,r20
 812c984:	308cb03a 	or	r6,r6,r2
 812c988:	d9c00315 	stw	r7,12(sp)
 812c98c:	d9800215 	stw	r6,8(sp)
 812c990:	81243d40 	call	81243d4 <__udivsi3>
 812c994:	8809883a 	mov	r4,r17
 812c998:	a00b883a 	mov	r5,r20
 812c99c:	1039883a 	mov	fp,r2
 812c9a0:	81243dc0 	call	81243dc <__umodsi3>
 812c9a4:	b8ffffcc 	andi	r3,r23,65535
 812c9a8:	d8c00415 	stw	r3,16(sp)
 812c9ac:	d9000217 	ldw	r4,8(sp)
 812c9b0:	d9400417 	ldw	r5,16(sp)
 812c9b4:	1004943a 	slli	r2,r2,16
 812c9b8:	2006d43a 	srli	r3,r4,16
 812c9bc:	8560983a 	sll	r16,r16,r21
 812c9c0:	2f23383a 	mul	r17,r5,fp
 812c9c4:	10c4b03a 	or	r2,r2,r3
 812c9c8:	dc000015 	stw	r16,0(sp)
 812c9cc:	b56c983a 	sll	r22,r22,r21
 812c9d0:	1440032e 	bgeu	r2,r17,812c9e0 <__umoddi3+0x404>
 812c9d4:	15c5883a 	add	r2,r2,r23
 812c9d8:	e73fffc4 	addi	fp,fp,-1
 812c9dc:	15c05d2e 	bgeu	r2,r23,812cb54 <__umoddi3+0x578>
 812c9e0:	1463c83a 	sub	r17,r2,r17
 812c9e4:	8809883a 	mov	r4,r17
 812c9e8:	a00b883a 	mov	r5,r20
 812c9ec:	81243d40 	call	81243d4 <__udivsi3>
 812c9f0:	8809883a 	mov	r4,r17
 812c9f4:	a00b883a 	mov	r5,r20
 812c9f8:	1021883a 	mov	r16,r2
 812c9fc:	81243dc0 	call	81243dc <__umodsi3>
 812ca00:	d8c00417 	ldw	r3,16(sp)
 812ca04:	d9000217 	ldw	r4,8(sp)
 812ca08:	1004943a 	slli	r2,r2,16
 812ca0c:	1c23383a 	mul	r17,r3,r16
 812ca10:	20ffffcc 	andi	r3,r4,65535
 812ca14:	10ceb03a 	or	r7,r2,r3
 812ca18:	3c40032e 	bgeu	r7,r17,812ca28 <__umoddi3+0x44c>
 812ca1c:	3dcf883a 	add	r7,r7,r23
 812ca20:	843fffc4 	addi	r16,r16,-1
 812ca24:	3dc0472e 	bgeu	r7,r23,812cb44 <__umoddi3+0x568>
 812ca28:	e004943a 	slli	r2,fp,16
 812ca2c:	d9400017 	ldw	r5,0(sp)
 812ca30:	3c4fc83a 	sub	r7,r7,r17
 812ca34:	8084b03a 	or	r2,r16,r2
 812ca38:	28ffffcc 	andi	r3,r5,65535
 812ca3c:	280cd43a 	srli	r6,r5,16
 812ca40:	100ad43a 	srli	r5,r2,16
 812ca44:	10bfffcc 	andi	r2,r2,65535
 812ca48:	10d1383a 	mul	r8,r2,r3
 812ca4c:	28c7383a 	mul	r3,r5,r3
 812ca50:	1185383a 	mul	r2,r2,r6
 812ca54:	4008d43a 	srli	r4,r8,16
 812ca58:	298b383a 	mul	r5,r5,r6
 812ca5c:	10c5883a 	add	r2,r2,r3
 812ca60:	2089883a 	add	r4,r4,r2
 812ca64:	20c0022e 	bgeu	r4,r3,812ca70 <__umoddi3+0x494>
 812ca68:	00800074 	movhi	r2,1
 812ca6c:	288b883a 	add	r5,r5,r2
 812ca70:	2004d43a 	srli	r2,r4,16
 812ca74:	2008943a 	slli	r4,r4,16
 812ca78:	40ffffcc 	andi	r3,r8,65535
 812ca7c:	288b883a 	add	r5,r5,r2
 812ca80:	20c9883a 	add	r4,r4,r3
 812ca84:	39400b36 	bltu	r7,r5,812cab4 <__umoddi3+0x4d8>
 812ca88:	39403d26 	beq	r7,r5,812cb80 <__umoddi3+0x5a4>
 812ca8c:	394bc83a 	sub	r5,r7,r5
 812ca90:	00000f06 	br	812cad0 <__umoddi3+0x4f4>
 812ca94:	30c5c83a 	sub	r2,r6,r3
 812ca98:	1839883a 	mov	fp,r3
 812ca9c:	b084d83a 	srl	r2,r22,r2
 812caa0:	a0c6983a 	sll	r3,r20,r3
 812caa4:	8720983a 	sll	r16,r16,fp
 812caa8:	b72c983a 	sll	r22,r22,fp
 812caac:	18a8b03a 	or	r20,r3,r2
 812cab0:	003f3a06 	br	812c79c <__umoddi3+0x1c0>
 812cab4:	d8c00017 	ldw	r3,0(sp)
 812cab8:	20c5c83a 	sub	r2,r4,r3
 812cabc:	2089803a 	cmpltu	r4,r4,r2
 812cac0:	2dc7c83a 	sub	r3,r5,r23
 812cac4:	1907c83a 	sub	r3,r3,r4
 812cac8:	38cbc83a 	sub	r5,r7,r3
 812cacc:	1009883a 	mov	r4,r2
 812cad0:	b105c83a 	sub	r2,r22,r4
 812cad4:	b087803a 	cmpltu	r3,r22,r2
 812cad8:	28c7c83a 	sub	r3,r5,r3
 812cadc:	d9400317 	ldw	r5,12(sp)
 812cae0:	1544d83a 	srl	r2,r2,r21
 812cae4:	1948983a 	sll	r4,r3,r5
 812cae8:	1d46d83a 	srl	r3,r3,r21
 812caec:	20a4b03a 	or	r18,r4,r2
 812caf0:	9011883a 	mov	r8,r18
 812caf4:	1813883a 	mov	r9,r3
 812caf8:	003ef606 	br	812c6d4 <__umoddi3+0xf8>
 812cafc:	01400604 	movi	r5,24
 812cb00:	2805883a 	mov	r2,r5
 812cb04:	003ecc06 	br	812c638 <__umoddi3+0x5c>
 812cb08:	01400204 	movi	r5,8
 812cb0c:	2805883a 	mov	r2,r5
 812cb10:	003ec906 	br	812c638 <__umoddi3+0x5c>
 812cb14:	01400204 	movi	r5,8
 812cb18:	2805883a 	mov	r2,r5
 812cb1c:	003f0106 	br	812c724 <__umoddi3+0x148>
 812cb20:	01400204 	movi	r5,8
 812cb24:	2805883a 	mov	r2,r5
 812cb28:	003f1206 	br	812c774 <__umoddi3+0x198>
 812cb2c:	01400604 	movi	r5,24
 812cb30:	2805883a 	mov	r2,r5
 812cb34:	003f0f06 	br	812c774 <__umoddi3+0x198>
 812cb38:	01400604 	movi	r5,24
 812cb3c:	2805883a 	mov	r2,r5
 812cb40:	003ef806 	br	812c724 <__umoddi3+0x148>
 812cb44:	3c7fb82e 	bgeu	r7,r17,812ca28 <__umoddi3+0x44c>
 812cb48:	843fffc4 	addi	r16,r16,-1
 812cb4c:	3dcf883a 	add	r7,r7,r23
 812cb50:	003fb506 	br	812ca28 <__umoddi3+0x44c>
 812cb54:	147fa22e 	bgeu	r2,r17,812c9e0 <__umoddi3+0x404>
 812cb58:	e73fffc4 	addi	fp,fp,-1
 812cb5c:	15c5883a 	add	r2,r2,r23
 812cb60:	003f9f06 	br	812c9e0 <__umoddi3+0x404>
 812cb64:	147f692e 	bgeu	r2,r17,812c90c <__umoddi3+0x330>
 812cb68:	1405883a 	add	r2,r2,r16
 812cb6c:	003f6706 	br	812c90c <__umoddi3+0x330>
 812cb70:	1405883a 	add	r2,r2,r16
 812cb74:	003f1906 	br	812c7dc <__umoddi3+0x200>
 812cb78:	1405883a 	add	r2,r2,r16
 812cb7c:	003ec906 	br	812c6a4 <__umoddi3+0xc8>
 812cb80:	b13fcc36 	bltu	r22,r4,812cab4 <__umoddi3+0x4d8>
 812cb84:	000b883a 	mov	r5,zero
 812cb88:	003fd106 	br	812cad0 <__umoddi3+0x4f4>

0812cb8c <__gedf2>:
 812cb8c:	deffef04 	addi	sp,sp,-68
 812cb90:	dc400f15 	stw	r17,60(sp)
 812cb94:	dc400404 	addi	r17,sp,16
 812cb98:	2005883a 	mov	r2,r4
 812cb9c:	2807883a 	mov	r3,r5
 812cba0:	dc000e15 	stw	r16,56(sp)
 812cba4:	d809883a 	mov	r4,sp
 812cba8:	880b883a 	mov	r5,r17
 812cbac:	dc000904 	addi	r16,sp,36
 812cbb0:	d8c00115 	stw	r3,4(sp)
 812cbb4:	d8800015 	stw	r2,0(sp)
 812cbb8:	d9800215 	stw	r6,8(sp)
 812cbbc:	dfc01015 	stw	ra,64(sp)
 812cbc0:	d9c00315 	stw	r7,12(sp)
 812cbc4:	8124b0c0 	call	8124b0c <__unpack_d>
 812cbc8:	d9000204 	addi	r4,sp,8
 812cbcc:	800b883a 	mov	r5,r16
 812cbd0:	8124b0c0 	call	8124b0c <__unpack_d>
 812cbd4:	d8800417 	ldw	r2,16(sp)
 812cbd8:	00c00044 	movi	r3,1
 812cbdc:	01bfffc4 	movi	r6,-1
 812cbe0:	1880062e 	bgeu	r3,r2,812cbfc <__gedf2+0x70>
 812cbe4:	d8800917 	ldw	r2,36(sp)
 812cbe8:	8809883a 	mov	r4,r17
 812cbec:	800b883a 	mov	r5,r16
 812cbf0:	1880022e 	bgeu	r3,r2,812cbfc <__gedf2+0x70>
 812cbf4:	8124c440 	call	8124c44 <__fpcmp_parts_d>
 812cbf8:	100d883a 	mov	r6,r2
 812cbfc:	3005883a 	mov	r2,r6
 812cc00:	dfc01017 	ldw	ra,64(sp)
 812cc04:	dc400f17 	ldw	r17,60(sp)
 812cc08:	dc000e17 	ldw	r16,56(sp)
 812cc0c:	dec01104 	addi	sp,sp,68
 812cc10:	f800283a 	ret

0812cc14 <__fixdfsi>:
 812cc14:	defff804 	addi	sp,sp,-32
 812cc18:	2005883a 	mov	r2,r4
 812cc1c:	2807883a 	mov	r3,r5
 812cc20:	d809883a 	mov	r4,sp
 812cc24:	d9400204 	addi	r5,sp,8
 812cc28:	d8c00115 	stw	r3,4(sp)
 812cc2c:	d8800015 	stw	r2,0(sp)
 812cc30:	dfc00715 	stw	ra,28(sp)
 812cc34:	8124b0c0 	call	8124b0c <__unpack_d>
 812cc38:	d8c00217 	ldw	r3,8(sp)
 812cc3c:	00800084 	movi	r2,2
 812cc40:	1880051e 	bne	r3,r2,812cc58 <__fixdfsi+0x44>
 812cc44:	0007883a 	mov	r3,zero
 812cc48:	1805883a 	mov	r2,r3
 812cc4c:	dfc00717 	ldw	ra,28(sp)
 812cc50:	dec00804 	addi	sp,sp,32
 812cc54:	f800283a 	ret
 812cc58:	00800044 	movi	r2,1
 812cc5c:	10fff92e 	bgeu	r2,r3,812cc44 <__fixdfsi+0x30>
 812cc60:	00800104 	movi	r2,4
 812cc64:	18800426 	beq	r3,r2,812cc78 <__fixdfsi+0x64>
 812cc68:	d8c00417 	ldw	r3,16(sp)
 812cc6c:	183ff516 	blt	r3,zero,812cc44 <__fixdfsi+0x30>
 812cc70:	00800784 	movi	r2,30
 812cc74:	10c0080e 	bge	r2,r3,812cc98 <__fixdfsi+0x84>
 812cc78:	d8800317 	ldw	r2,12(sp)
 812cc7c:	1000121e 	bne	r2,zero,812ccc8 <__fixdfsi+0xb4>
 812cc80:	00e00034 	movhi	r3,32768
 812cc84:	18ffffc4 	addi	r3,r3,-1
 812cc88:	1805883a 	mov	r2,r3
 812cc8c:	dfc00717 	ldw	ra,28(sp)
 812cc90:	dec00804 	addi	sp,sp,32
 812cc94:	f800283a 	ret
 812cc98:	00800f04 	movi	r2,60
 812cc9c:	10d1c83a 	sub	r8,r2,r3
 812cca0:	40bff804 	addi	r2,r8,-32
 812cca4:	d9800517 	ldw	r6,20(sp)
 812cca8:	d9c00617 	ldw	r7,24(sp)
 812ccac:	10000816 	blt	r2,zero,812ccd0 <__fixdfsi+0xbc>
 812ccb0:	3888d83a 	srl	r4,r7,r2
 812ccb4:	d8800317 	ldw	r2,12(sp)
 812ccb8:	2007883a 	mov	r3,r4
 812ccbc:	103fe226 	beq	r2,zero,812cc48 <__fixdfsi+0x34>
 812ccc0:	0107c83a 	sub	r3,zero,r4
 812ccc4:	003fe006 	br	812cc48 <__fixdfsi+0x34>
 812ccc8:	00e00034 	movhi	r3,32768
 812cccc:	003fde06 	br	812cc48 <__fixdfsi+0x34>
 812ccd0:	39c7883a 	add	r3,r7,r7
 812ccd4:	008007c4 	movi	r2,31
 812ccd8:	1205c83a 	sub	r2,r2,r8
 812ccdc:	1886983a 	sll	r3,r3,r2
 812cce0:	3208d83a 	srl	r4,r6,r8
 812cce4:	1908b03a 	or	r4,r3,r4
 812cce8:	003ff206 	br	812ccb4 <__fixdfsi+0xa0>

0812ccec <__floatunsidf>:
 812ccec:	defff204 	addi	sp,sp,-56
 812ccf0:	dfc00d15 	stw	ra,52(sp)
 812ccf4:	ddc00c15 	stw	r23,48(sp)
 812ccf8:	dd800b15 	stw	r22,44(sp)
 812ccfc:	dd400a15 	stw	r21,40(sp)
 812cd00:	dd000915 	stw	r20,36(sp)
 812cd04:	dcc00815 	stw	r19,32(sp)
 812cd08:	dc800715 	stw	r18,28(sp)
 812cd0c:	dc400615 	stw	r17,24(sp)
 812cd10:	dc000515 	stw	r16,20(sp)
 812cd14:	d8000115 	stw	zero,4(sp)
 812cd18:	20000f1e 	bne	r4,zero,812cd58 <__floatunsidf+0x6c>
 812cd1c:	00800084 	movi	r2,2
 812cd20:	d8800015 	stw	r2,0(sp)
 812cd24:	d809883a 	mov	r4,sp
 812cd28:	81247f80 	call	81247f8 <__pack_d>
 812cd2c:	dfc00d17 	ldw	ra,52(sp)
 812cd30:	ddc00c17 	ldw	r23,48(sp)
 812cd34:	dd800b17 	ldw	r22,44(sp)
 812cd38:	dd400a17 	ldw	r21,40(sp)
 812cd3c:	dd000917 	ldw	r20,36(sp)
 812cd40:	dcc00817 	ldw	r19,32(sp)
 812cd44:	dc800717 	ldw	r18,28(sp)
 812cd48:	dc400617 	ldw	r17,24(sp)
 812cd4c:	dc000517 	ldw	r16,20(sp)
 812cd50:	dec00e04 	addi	sp,sp,56
 812cd54:	f800283a 	ret
 812cd58:	008000c4 	movi	r2,3
 812cd5c:	00c00f04 	movi	r3,60
 812cd60:	002f883a 	mov	r23,zero
 812cd64:	202d883a 	mov	r22,r4
 812cd68:	d8800015 	stw	r2,0(sp)
 812cd6c:	d8c00215 	stw	r3,8(sp)
 812cd70:	d9000315 	stw	r4,12(sp)
 812cd74:	ddc00415 	stw	r23,16(sp)
 812cd78:	812447c0 	call	812447c <__clzsi2>
 812cd7c:	12400744 	addi	r9,r2,29
 812cd80:	48000b16 	blt	r9,zero,812cdb0 <__floatunsidf+0xc4>
 812cd84:	483fe726 	beq	r9,zero,812cd24 <__floatunsidf+0x38>
 812cd88:	10bfff44 	addi	r2,r2,-3
 812cd8c:	10002e16 	blt	r2,zero,812ce48 <__floatunsidf+0x15c>
 812cd90:	b0a2983a 	sll	r17,r22,r2
 812cd94:	0021883a 	mov	r16,zero
 812cd98:	d8800217 	ldw	r2,8(sp)
 812cd9c:	dc400415 	stw	r17,16(sp)
 812cda0:	dc000315 	stw	r16,12(sp)
 812cda4:	1245c83a 	sub	r2,r2,r9
 812cda8:	d8800215 	stw	r2,8(sp)
 812cdac:	003fdd06 	br	812cd24 <__floatunsidf+0x38>
 812cdb0:	0255c83a 	sub	r10,zero,r9
 812cdb4:	51bff804 	addi	r6,r10,-32
 812cdb8:	30001b16 	blt	r6,zero,812ce28 <__floatunsidf+0x13c>
 812cdbc:	b9a8d83a 	srl	r20,r23,r6
 812cdc0:	002b883a 	mov	r21,zero
 812cdc4:	000f883a 	mov	r7,zero
 812cdc8:	01000044 	movi	r4,1
 812cdcc:	0011883a 	mov	r8,zero
 812cdd0:	30002516 	blt	r6,zero,812ce68 <__floatunsidf+0x17c>
 812cdd4:	21a6983a 	sll	r19,r4,r6
 812cdd8:	0025883a 	mov	r18,zero
 812cddc:	00bfffc4 	movi	r2,-1
 812cde0:	9089883a 	add	r4,r18,r2
 812cde4:	988b883a 	add	r5,r19,r2
 812cde8:	248d803a 	cmpltu	r6,r4,r18
 812cdec:	314b883a 	add	r5,r6,r5
 812cdf0:	b104703a 	and	r2,r22,r4
 812cdf4:	b946703a 	and	r3,r23,r5
 812cdf8:	10c4b03a 	or	r2,r2,r3
 812cdfc:	10000226 	beq	r2,zero,812ce08 <__floatunsidf+0x11c>
 812ce00:	01c00044 	movi	r7,1
 812ce04:	0011883a 	mov	r8,zero
 812ce08:	d9000217 	ldw	r4,8(sp)
 812ce0c:	a1c4b03a 	or	r2,r20,r7
 812ce10:	aa06b03a 	or	r3,r21,r8
 812ce14:	2249c83a 	sub	r4,r4,r9
 812ce18:	d8c00415 	stw	r3,16(sp)
 812ce1c:	d9000215 	stw	r4,8(sp)
 812ce20:	d8800315 	stw	r2,12(sp)
 812ce24:	003fbf06 	br	812cd24 <__floatunsidf+0x38>
 812ce28:	bdc7883a 	add	r3,r23,r23
 812ce2c:	008007c4 	movi	r2,31
 812ce30:	1285c83a 	sub	r2,r2,r10
 812ce34:	1886983a 	sll	r3,r3,r2
 812ce38:	b2a8d83a 	srl	r20,r22,r10
 812ce3c:	baaad83a 	srl	r21,r23,r10
 812ce40:	1d28b03a 	or	r20,r3,r20
 812ce44:	003fdf06 	br	812cdc4 <__floatunsidf+0xd8>
 812ce48:	b006d07a 	srli	r3,r22,1
 812ce4c:	008007c4 	movi	r2,31
 812ce50:	1245c83a 	sub	r2,r2,r9
 812ce54:	1886d83a 	srl	r3,r3,r2
 812ce58:	ba62983a 	sll	r17,r23,r9
 812ce5c:	b260983a 	sll	r16,r22,r9
 812ce60:	1c62b03a 	or	r17,r3,r17
 812ce64:	003fcc06 	br	812cd98 <__floatunsidf+0xac>
 812ce68:	2006d07a 	srli	r3,r4,1
 812ce6c:	008007c4 	movi	r2,31
 812ce70:	1285c83a 	sub	r2,r2,r10
 812ce74:	18a6d83a 	srl	r19,r3,r2
 812ce78:	22a4983a 	sll	r18,r4,r10
 812ce7c:	003fd706 	br	812cddc <__floatunsidf+0xf0>

0812ce80 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 812ce80:	defff804 	addi	sp,sp,-32
 812ce84:	dfc00715 	stw	ra,28(sp)
 812ce88:	df000615 	stw	fp,24(sp)
 812ce8c:	df000604 	addi	fp,sp,24
 812ce90:	e13ffc15 	stw	r4,-16(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 812ce94:	e0bffc17 	ldw	r2,-16(fp)
 812ce98:	1004803a 	cmplt	r2,r2,zero
 812ce9c:	1000081e 	bne	r2,zero,812cec0 <close+0x40>
 812cea0:	e0bffc17 	ldw	r2,-16(fp)
 812cea4:	10800324 	muli	r2,r2,12
 812cea8:	1007883a 	mov	r3,r2
 812ceac:	008204f4 	movhi	r2,2067
 812ceb0:	10898504 	addi	r2,r2,9748
 812ceb4:	1887883a 	add	r3,r3,r2
 812ceb8:	e0ffff15 	stw	r3,-4(fp)
 812cebc:	00000106 	br	812cec4 <close+0x44>
 812cec0:	e03fff15 	stw	zero,-4(fp)
 812cec4:	e0bfff17 	ldw	r2,-4(fp)
 812cec8:	e0bffb15 	stw	r2,-20(fp)

  if (fd)
 812cecc:	e0bffb17 	ldw	r2,-20(fp)
 812ced0:	1005003a 	cmpeq	r2,r2,zero
 812ced4:	10001d1e 	bne	r2,zero,812cf4c <close+0xcc>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 812ced8:	e0bffb17 	ldw	r2,-20(fp)
 812cedc:	10800017 	ldw	r2,0(r2)
 812cee0:	10800417 	ldw	r2,16(r2)
 812cee4:	1005003a 	cmpeq	r2,r2,zero
 812cee8:	1000071e 	bne	r2,zero,812cf08 <close+0x88>
 812ceec:	e0bffb17 	ldw	r2,-20(fp)
 812cef0:	10800017 	ldw	r2,0(r2)
 812cef4:	10800417 	ldw	r2,16(r2)
 812cef8:	e13ffb17 	ldw	r4,-20(fp)
 812cefc:	103ee83a 	callr	r2
 812cf00:	e0bffe15 	stw	r2,-8(fp)
 812cf04:	00000106 	br	812cf0c <close+0x8c>
 812cf08:	e03ffe15 	stw	zero,-8(fp)
 812cf0c:	e0bffe17 	ldw	r2,-8(fp)
 812cf10:	e0bffa15 	stw	r2,-24(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 812cf14:	e13ffc17 	ldw	r4,-16(fp)
 812cf18:	812d6c40 	call	812d6c4 <alt_release_fd>
    if (rval < 0)
 812cf1c:	e0bffa17 	ldw	r2,-24(fp)
 812cf20:	1004403a 	cmpge	r2,r2,zero
 812cf24:	1000071e 	bne	r2,zero,812cf44 <close+0xc4>
    {
      ALT_ERRNO = -rval;
 812cf28:	812cf7c0 	call	812cf7c <alt_get_errno>
 812cf2c:	e0fffa17 	ldw	r3,-24(fp)
 812cf30:	00c7c83a 	sub	r3,zero,r3
 812cf34:	10c00015 	stw	r3,0(r2)
      return -1;
 812cf38:	00bfffc4 	movi	r2,-1
 812cf3c:	e0bffd15 	stw	r2,-12(fp)
 812cf40:	00000806 	br	812cf64 <close+0xe4>
    }
    return 0;
 812cf44:	e03ffd15 	stw	zero,-12(fp)
 812cf48:	00000606 	br	812cf64 <close+0xe4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 812cf4c:	812cf7c0 	call	812cf7c <alt_get_errno>
 812cf50:	1007883a 	mov	r3,r2
 812cf54:	00801444 	movi	r2,81
 812cf58:	18800015 	stw	r2,0(r3)
    return -1;
 812cf5c:	00bfffc4 	movi	r2,-1
 812cf60:	e0bffd15 	stw	r2,-12(fp)
 812cf64:	e0bffd17 	ldw	r2,-12(fp)
  }
}
 812cf68:	e037883a 	mov	sp,fp
 812cf6c:	dfc00117 	ldw	ra,4(sp)
 812cf70:	df000017 	ldw	fp,0(sp)
 812cf74:	dec00204 	addi	sp,sp,8
 812cf78:	f800283a 	ret

0812cf7c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 812cf7c:	defffd04 	addi	sp,sp,-12
 812cf80:	dfc00215 	stw	ra,8(sp)
 812cf84:	df000115 	stw	fp,4(sp)
 812cf88:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 812cf8c:	008204f4 	movhi	r2,2067
 812cf90:	108e5d04 	addi	r2,r2,14708
 812cf94:	10800017 	ldw	r2,0(r2)
 812cf98:	1005003a 	cmpeq	r2,r2,zero
 812cf9c:	1000061e 	bne	r2,zero,812cfb8 <alt_get_errno+0x3c>
 812cfa0:	008204f4 	movhi	r2,2067
 812cfa4:	108e5d04 	addi	r2,r2,14708
 812cfa8:	10800017 	ldw	r2,0(r2)
 812cfac:	103ee83a 	callr	r2
 812cfb0:	e0bfff15 	stw	r2,-4(fp)
 812cfb4:	00000306 	br	812cfc4 <alt_get_errno+0x48>
 812cfb8:	008204f4 	movhi	r2,2067
 812cfbc:	10956404 	addi	r2,r2,21904
 812cfc0:	e0bfff15 	stw	r2,-4(fp)
 812cfc4:	e0bfff17 	ldw	r2,-4(fp)
}
 812cfc8:	e037883a 	mov	sp,fp
 812cfcc:	dfc00117 	ldw	ra,4(sp)
 812cfd0:	df000017 	ldw	fp,0(sp)
 812cfd4:	dec00204 	addi	sp,sp,8
 812cfd8:	f800283a 	ret

0812cfdc <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 812cfdc:	defffc04 	addi	sp,sp,-16
 812cfe0:	df000315 	stw	fp,12(sp)
 812cfe4:	df000304 	addi	fp,sp,12
 812cfe8:	e13ffd15 	stw	r4,-12(fp)
 812cfec:	e17ffe15 	stw	r5,-8(fp)
 812cff0:	e1bfff15 	stw	r6,-4(fp)
  return len;
 812cff4:	e0bfff17 	ldw	r2,-4(fp)
}
 812cff8:	e037883a 	mov	sp,fp
 812cffc:	df000017 	ldw	fp,0(sp)
 812d000:	dec00104 	addi	sp,sp,4
 812d004:	f800283a 	ret

0812d008 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
 812d008:	defff904 	addi	sp,sp,-28
 812d00c:	dfc00615 	stw	ra,24(sp)
 812d010:	df000515 	stw	fp,20(sp)
 812d014:	df000504 	addi	fp,sp,20
 812d018:	e13ffc15 	stw	r4,-16(fp)
 812d01c:	e17ffd15 	stw	r5,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 812d020:	e0bffc17 	ldw	r2,-16(fp)
 812d024:	1004803a 	cmplt	r2,r2,zero
 812d028:	1000081e 	bne	r2,zero,812d04c <fstat+0x44>
 812d02c:	e0bffc17 	ldw	r2,-16(fp)
 812d030:	10800324 	muli	r2,r2,12
 812d034:	1007883a 	mov	r3,r2
 812d038:	008204f4 	movhi	r2,2067
 812d03c:	10898504 	addi	r2,r2,9748
 812d040:	1887883a 	add	r3,r3,r2
 812d044:	e0ffff15 	stw	r3,-4(fp)
 812d048:	00000106 	br	812d050 <fstat+0x48>
 812d04c:	e03fff15 	stw	zero,-4(fp)
 812d050:	e0bfff17 	ldw	r2,-4(fp)
 812d054:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 812d058:	e0bffb17 	ldw	r2,-20(fp)
 812d05c:	1005003a 	cmpeq	r2,r2,zero
 812d060:	1000121e 	bne	r2,zero,812d0ac <fstat+0xa4>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
 812d064:	e0bffb17 	ldw	r2,-20(fp)
 812d068:	10800017 	ldw	r2,0(r2)
 812d06c:	10800817 	ldw	r2,32(r2)
 812d070:	1005003a 	cmpeq	r2,r2,zero
 812d074:	1000081e 	bne	r2,zero,812d098 <fstat+0x90>
    {
      return fd->dev->fstat(fd, st);
 812d078:	e0bffb17 	ldw	r2,-20(fp)
 812d07c:	10800017 	ldw	r2,0(r2)
 812d080:	10800817 	ldw	r2,32(r2)
 812d084:	e13ffb17 	ldw	r4,-20(fp)
 812d088:	e17ffd17 	ldw	r5,-12(fp)
 812d08c:	103ee83a 	callr	r2
 812d090:	e0bffe15 	stw	r2,-8(fp)
 812d094:	00000b06 	br	812d0c4 <fstat+0xbc>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
 812d098:	e0fffd17 	ldw	r3,-12(fp)
 812d09c:	00880004 	movi	r2,8192
 812d0a0:	18800115 	stw	r2,4(r3)
      return 0;
 812d0a4:	e03ffe15 	stw	zero,-8(fp)
 812d0a8:	00000606 	br	812d0c4 <fstat+0xbc>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 812d0ac:	812d0dc0 	call	812d0dc <alt_get_errno>
 812d0b0:	1007883a 	mov	r3,r2
 812d0b4:	00801444 	movi	r2,81
 812d0b8:	18800015 	stw	r2,0(r3)
    return -1;
 812d0bc:	00bfffc4 	movi	r2,-1
 812d0c0:	e0bffe15 	stw	r2,-8(fp)
 812d0c4:	e0bffe17 	ldw	r2,-8(fp)
  }
}
 812d0c8:	e037883a 	mov	sp,fp
 812d0cc:	dfc00117 	ldw	ra,4(sp)
 812d0d0:	df000017 	ldw	fp,0(sp)
 812d0d4:	dec00204 	addi	sp,sp,8
 812d0d8:	f800283a 	ret

0812d0dc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 812d0dc:	defffd04 	addi	sp,sp,-12
 812d0e0:	dfc00215 	stw	ra,8(sp)
 812d0e4:	df000115 	stw	fp,4(sp)
 812d0e8:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 812d0ec:	008204f4 	movhi	r2,2067
 812d0f0:	108e5d04 	addi	r2,r2,14708
 812d0f4:	10800017 	ldw	r2,0(r2)
 812d0f8:	1005003a 	cmpeq	r2,r2,zero
 812d0fc:	1000061e 	bne	r2,zero,812d118 <alt_get_errno+0x3c>
 812d100:	008204f4 	movhi	r2,2067
 812d104:	108e5d04 	addi	r2,r2,14708
 812d108:	10800017 	ldw	r2,0(r2)
 812d10c:	103ee83a 	callr	r2
 812d110:	e0bfff15 	stw	r2,-4(fp)
 812d114:	00000306 	br	812d124 <alt_get_errno+0x48>
 812d118:	008204f4 	movhi	r2,2067
 812d11c:	10956404 	addi	r2,r2,21904
 812d120:	e0bfff15 	stw	r2,-4(fp)
 812d124:	e0bfff17 	ldw	r2,-4(fp)
}
 812d128:	e037883a 	mov	sp,fp
 812d12c:	dfc00117 	ldw	ra,4(sp)
 812d130:	df000017 	ldw	fp,0(sp)
 812d134:	dec00204 	addi	sp,sp,8
 812d138:	f800283a 	ret

0812d13c <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
 812d13c:	deffeb04 	addi	sp,sp,-84
 812d140:	dfc01415 	stw	ra,80(sp)
 812d144:	df001315 	stw	fp,76(sp)
 812d148:	df001304 	addi	fp,sp,76
 812d14c:	e13ffd15 	stw	r4,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 812d150:	e0bffd17 	ldw	r2,-12(fp)
 812d154:	1004803a 	cmplt	r2,r2,zero
 812d158:	1000081e 	bne	r2,zero,812d17c <isatty+0x40>
 812d15c:	e0bffd17 	ldw	r2,-12(fp)
 812d160:	10800324 	muli	r2,r2,12
 812d164:	1007883a 	mov	r3,r2
 812d168:	008204f4 	movhi	r2,2067
 812d16c:	10898504 	addi	r2,r2,9748
 812d170:	1887883a 	add	r3,r3,r2
 812d174:	e0ffff15 	stw	r3,-4(fp)
 812d178:	00000106 	br	812d180 <isatty+0x44>
 812d17c:	e03fff15 	stw	zero,-4(fp)
 812d180:	e0bfff17 	ldw	r2,-4(fp)
 812d184:	e0bfed15 	stw	r2,-76(fp)
  
  if (fd)
 812d188:	e0bfed17 	ldw	r2,-76(fp)
 812d18c:	1005003a 	cmpeq	r2,r2,zero
 812d190:	10000f1e 	bne	r2,zero,812d1d0 <isatty+0x94>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
 812d194:	e0bfed17 	ldw	r2,-76(fp)
 812d198:	10800017 	ldw	r2,0(r2)
 812d19c:	10800817 	ldw	r2,32(r2)
 812d1a0:	1004c03a 	cmpne	r2,r2,zero
 812d1a4:	1000031e 	bne	r2,zero,812d1b4 <isatty+0x78>
    {
      return 1;
 812d1a8:	00800044 	movi	r2,1
 812d1ac:	e0bffe15 	stw	r2,-8(fp)
 812d1b0:	00000c06 	br	812d1e4 <isatty+0xa8>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
 812d1b4:	e17fee04 	addi	r5,fp,-72
 812d1b8:	e13ffd17 	ldw	r4,-12(fp)
 812d1bc:	812d0080 	call	812d008 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
 812d1c0:	e0bfef17 	ldw	r2,-68(fp)
 812d1c4:	10880020 	cmpeqi	r2,r2,8192
 812d1c8:	e0bffe15 	stw	r2,-8(fp)
 812d1cc:	00000506 	br	812d1e4 <isatty+0xa8>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 812d1d0:	812d1fc0 	call	812d1fc <alt_get_errno>
 812d1d4:	1007883a 	mov	r3,r2
 812d1d8:	00801444 	movi	r2,81
 812d1dc:	18800015 	stw	r2,0(r3)
    return 0;
 812d1e0:	e03ffe15 	stw	zero,-8(fp)
 812d1e4:	e0bffe17 	ldw	r2,-8(fp)
  }
}
 812d1e8:	e037883a 	mov	sp,fp
 812d1ec:	dfc00117 	ldw	ra,4(sp)
 812d1f0:	df000017 	ldw	fp,0(sp)
 812d1f4:	dec00204 	addi	sp,sp,8
 812d1f8:	f800283a 	ret

0812d1fc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 812d1fc:	defffd04 	addi	sp,sp,-12
 812d200:	dfc00215 	stw	ra,8(sp)
 812d204:	df000115 	stw	fp,4(sp)
 812d208:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 812d20c:	008204f4 	movhi	r2,2067
 812d210:	108e5d04 	addi	r2,r2,14708
 812d214:	10800017 	ldw	r2,0(r2)
 812d218:	1005003a 	cmpeq	r2,r2,zero
 812d21c:	1000061e 	bne	r2,zero,812d238 <alt_get_errno+0x3c>
 812d220:	008204f4 	movhi	r2,2067
 812d224:	108e5d04 	addi	r2,r2,14708
 812d228:	10800017 	ldw	r2,0(r2)
 812d22c:	103ee83a 	callr	r2
 812d230:	e0bfff15 	stw	r2,-4(fp)
 812d234:	00000306 	br	812d244 <alt_get_errno+0x48>
 812d238:	008204f4 	movhi	r2,2067
 812d23c:	10956404 	addi	r2,r2,21904
 812d240:	e0bfff15 	stw	r2,-4(fp)
 812d244:	e0bfff17 	ldw	r2,-4(fp)
}
 812d248:	e037883a 	mov	sp,fp
 812d24c:	dfc00117 	ldw	ra,4(sp)
 812d250:	df000017 	ldw	fp,0(sp)
 812d254:	dec00204 	addi	sp,sp,8
 812d258:	f800283a 	ret

0812d25c <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 812d25c:	defffe04 	addi	sp,sp,-8
 812d260:	dfc00115 	stw	ra,4(sp)
 812d264:	df000015 	stw	fp,0(sp)
 812d268:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
 812d26c:	010204f4 	movhi	r4,2067
 812d270:	210e6604 	addi	r4,r4,14744
 812d274:	014204f4 	movhi	r5,2067
 812d278:	29477604 	addi	r5,r5,7640
 812d27c:	018204f4 	movhi	r6,2067
 812d280:	318e6604 	addi	r6,r6,14744
 812d284:	812d2dc0 	call	812d2dc <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
 812d288:	010204b4 	movhi	r4,2066
 812d28c:	21000804 	addi	r4,r4,32
 812d290:	014204b4 	movhi	r5,2066
 812d294:	29400804 	addi	r5,r5,32
 812d298:	018204b4 	movhi	r6,2066
 812d29c:	31806d04 	addi	r6,r6,436
 812d2a0:	812d2dc0 	call	812d2dc <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
 812d2a4:	010204f4 	movhi	r4,2067
 812d2a8:	21060c04 	addi	r4,r4,6192
 812d2ac:	014204f4 	movhi	r5,2067
 812d2b0:	29460c04 	addi	r5,r5,6192
 812d2b4:	018204f4 	movhi	r6,2067
 812d2b8:	31877604 	addi	r6,r6,7640
 812d2bc:	812d2dc0 	call	812d2dc <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 812d2c0:	81305dc0 	call	81305dc <alt_dcache_flush_all>
  alt_icache_flush_all();
 812d2c4:	81308900 	call	8130890 <alt_icache_flush_all>
}
 812d2c8:	e037883a 	mov	sp,fp
 812d2cc:	dfc00117 	ldw	ra,4(sp)
 812d2d0:	df000017 	ldw	fp,0(sp)
 812d2d4:	dec00204 	addi	sp,sp,8
 812d2d8:	f800283a 	ret

0812d2dc <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
 812d2dc:	defffc04 	addi	sp,sp,-16
 812d2e0:	df000315 	stw	fp,12(sp)
 812d2e4:	df000304 	addi	fp,sp,12
 812d2e8:	e13ffd15 	stw	r4,-12(fp)
 812d2ec:	e17ffe15 	stw	r5,-8(fp)
 812d2f0:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
 812d2f4:	e0fffe17 	ldw	r3,-8(fp)
 812d2f8:	e0bffd17 	ldw	r2,-12(fp)
 812d2fc:	18800e26 	beq	r3,r2,812d338 <alt_load_section+0x5c>
  {
    while( to != end )
 812d300:	00000a06 	br	812d32c <alt_load_section+0x50>
    {
      *to++ = *from++;
 812d304:	e0bffd17 	ldw	r2,-12(fp)
 812d308:	10c00017 	ldw	r3,0(r2)
 812d30c:	e0bffe17 	ldw	r2,-8(fp)
 812d310:	10c00015 	stw	r3,0(r2)
 812d314:	e0bffe17 	ldw	r2,-8(fp)
 812d318:	10800104 	addi	r2,r2,4
 812d31c:	e0bffe15 	stw	r2,-8(fp)
 812d320:	e0bffd17 	ldw	r2,-12(fp)
 812d324:	10800104 	addi	r2,r2,4
 812d328:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
 812d32c:	e0fffe17 	ldw	r3,-8(fp)
 812d330:	e0bfff17 	ldw	r2,-4(fp)
 812d334:	18bff31e 	bne	r3,r2,812d304 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
 812d338:	e037883a 	mov	sp,fp
 812d33c:	df000017 	ldw	fp,0(sp)
 812d340:	dec00104 	addi	sp,sp,4
 812d344:	f800283a 	ret

0812d348 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
 812d348:	defff804 	addi	sp,sp,-32
 812d34c:	dfc00715 	stw	ra,28(sp)
 812d350:	df000615 	stw	fp,24(sp)
 812d354:	df000604 	addi	fp,sp,24
 812d358:	e13ffc15 	stw	r4,-16(fp)
 812d35c:	e17ffd15 	stw	r5,-12(fp)
 812d360:	e1bffe15 	stw	r6,-8(fp)
  alt_fd* fd;
  off_t   rc = 0; 
 812d364:	e03ffa15 	stw	zero,-24(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 812d368:	e0bffc17 	ldw	r2,-16(fp)
 812d36c:	1004803a 	cmplt	r2,r2,zero
 812d370:	1000081e 	bne	r2,zero,812d394 <lseek+0x4c>
 812d374:	e0bffc17 	ldw	r2,-16(fp)
 812d378:	10800324 	muli	r2,r2,12
 812d37c:	1007883a 	mov	r3,r2
 812d380:	008204f4 	movhi	r2,2067
 812d384:	10898504 	addi	r2,r2,9748
 812d388:	1887883a 	add	r3,r3,r2
 812d38c:	e0ffff15 	stw	r3,-4(fp)
 812d390:	00000106 	br	812d398 <lseek+0x50>
 812d394:	e03fff15 	stw	zero,-4(fp)
 812d398:	e0bfff17 	ldw	r2,-4(fp)
 812d39c:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd) 
 812d3a0:	e0bffb17 	ldw	r2,-20(fp)
 812d3a4:	1005003a 	cmpeq	r2,r2,zero
 812d3a8:	1000111e 	bne	r2,zero,812d3f0 <lseek+0xa8>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
 812d3ac:	e0bffb17 	ldw	r2,-20(fp)
 812d3b0:	10800017 	ldw	r2,0(r2)
 812d3b4:	10800717 	ldw	r2,28(r2)
 812d3b8:	1005003a 	cmpeq	r2,r2,zero
 812d3bc:	1000091e 	bne	r2,zero,812d3e4 <lseek+0x9c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
 812d3c0:	e0bffb17 	ldw	r2,-20(fp)
 812d3c4:	10800017 	ldw	r2,0(r2)
 812d3c8:	10800717 	ldw	r2,28(r2)
 812d3cc:	e13ffb17 	ldw	r4,-20(fp)
 812d3d0:	e17ffd17 	ldw	r5,-12(fp)
 812d3d4:	e1bffe17 	ldw	r6,-8(fp)
 812d3d8:	103ee83a 	callr	r2
 812d3dc:	e0bffa15 	stw	r2,-24(fp)
 812d3e0:	00000506 	br	812d3f8 <lseek+0xb0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
 812d3e4:	00bfde84 	movi	r2,-134
 812d3e8:	e0bffa15 	stw	r2,-24(fp)
 812d3ec:	00000206 	br	812d3f8 <lseek+0xb0>
    }
  }
  else  
  {
    rc = -EBADFD;
 812d3f0:	00bfebc4 	movi	r2,-81
 812d3f4:	e0bffa15 	stw	r2,-24(fp)
  }

  if (rc < 0)
 812d3f8:	e0bffa17 	ldw	r2,-24(fp)
 812d3fc:	1004403a 	cmpge	r2,r2,zero
 812d400:	1000071e 	bne	r2,zero,812d420 <lseek+0xd8>
  {
    ALT_ERRNO = -rc;
 812d404:	812d4380 	call	812d438 <alt_get_errno>
 812d408:	1007883a 	mov	r3,r2
 812d40c:	e0bffa17 	ldw	r2,-24(fp)
 812d410:	0085c83a 	sub	r2,zero,r2
 812d414:	18800015 	stw	r2,0(r3)
    rc = -1;
 812d418:	00bfffc4 	movi	r2,-1
 812d41c:	e0bffa15 	stw	r2,-24(fp)
  }

  return rc;
 812d420:	e0bffa17 	ldw	r2,-24(fp)
}
 812d424:	e037883a 	mov	sp,fp
 812d428:	dfc00117 	ldw	ra,4(sp)
 812d42c:	df000017 	ldw	fp,0(sp)
 812d430:	dec00204 	addi	sp,sp,8
 812d434:	f800283a 	ret

0812d438 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 812d438:	defffd04 	addi	sp,sp,-12
 812d43c:	dfc00215 	stw	ra,8(sp)
 812d440:	df000115 	stw	fp,4(sp)
 812d444:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 812d448:	008204f4 	movhi	r2,2067
 812d44c:	108e5d04 	addi	r2,r2,14708
 812d450:	10800017 	ldw	r2,0(r2)
 812d454:	1005003a 	cmpeq	r2,r2,zero
 812d458:	1000061e 	bne	r2,zero,812d474 <alt_get_errno+0x3c>
 812d45c:	008204f4 	movhi	r2,2067
 812d460:	108e5d04 	addi	r2,r2,14708
 812d464:	10800017 	ldw	r2,0(r2)
 812d468:	103ee83a 	callr	r2
 812d46c:	e0bfff15 	stw	r2,-4(fp)
 812d470:	00000306 	br	812d480 <alt_get_errno+0x48>
 812d474:	008204f4 	movhi	r2,2067
 812d478:	10956404 	addi	r2,r2,21904
 812d47c:	e0bfff15 	stw	r2,-4(fp)
 812d480:	e0bfff17 	ldw	r2,-4(fp)
}
 812d484:	e037883a 	mov	sp,fp
 812d488:	dfc00117 	ldw	ra,4(sp)
 812d48c:	df000017 	ldw	fp,0(sp)
 812d490:	dec00204 	addi	sp,sp,8
 812d494:	f800283a 	ret

0812d498 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 812d498:	defffd04 	addi	sp,sp,-12
 812d49c:	dfc00215 	stw	ra,8(sp)
 812d4a0:	df000115 	stw	fp,4(sp)
 812d4a4:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 812d4a8:	0009883a 	mov	r4,zero
 812d4ac:	812d9600 	call	812d960 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 812d4b0:	812d9940 	call	812d994 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 812d4b4:	010204f4 	movhi	r4,2067
 812d4b8:	21072404 	addi	r4,r4,7312
 812d4bc:	014204f4 	movhi	r5,2067
 812d4c0:	29472404 	addi	r5,r5,7312
 812d4c4:	018204f4 	movhi	r6,2067
 812d4c8:	31872404 	addi	r6,r6,7312
 812d4cc:	8130c500 	call	8130c50 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
 812d4d0:	81307340 	call	8130734 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
 812d4d4:	010204f4 	movhi	r4,2067
 812d4d8:	2101e604 	addi	r4,r4,1944
 812d4dc:	81313b80 	call	81313b8 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 812d4e0:	d1271717 	ldw	r4,-25508(gp)
 812d4e4:	d1671817 	ldw	r5,-25504(gp)
 812d4e8:	d1a71917 	ldw	r6,-25500(gp)
 812d4ec:	81202000 	call	8120200 <main>
 812d4f0:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
 812d4f4:	01000044 	movi	r4,1
 812d4f8:	812ce800 	call	812ce80 <close>
  exit (result);
 812d4fc:	e13fff17 	ldw	r4,-4(fp)
 812d500:	81313cc0 	call	81313cc <exit>

0812d504 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
 812d504:	defffe04 	addi	sp,sp,-8
 812d508:	df000115 	stw	fp,4(sp)
 812d50c:	df000104 	addi	fp,sp,4
 812d510:	e13fff15 	stw	r4,-4(fp)
}
 812d514:	e037883a 	mov	sp,fp
 812d518:	df000017 	ldw	fp,0(sp)
 812d51c:	dec00104 	addi	sp,sp,4
 812d520:	f800283a 	ret

0812d524 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
 812d524:	defffe04 	addi	sp,sp,-8
 812d528:	df000115 	stw	fp,4(sp)
 812d52c:	df000104 	addi	fp,sp,4
 812d530:	e13fff15 	stw	r4,-4(fp)
}
 812d534:	e037883a 	mov	sp,fp
 812d538:	df000017 	ldw	fp,0(sp)
 812d53c:	dec00104 	addi	sp,sp,4
 812d540:	f800283a 	ret

0812d544 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
 812d544:	defff704 	addi	sp,sp,-36
 812d548:	dfc00815 	stw	ra,32(sp)
 812d54c:	df000715 	stw	fp,28(sp)
 812d550:	df000704 	addi	fp,sp,28
 812d554:	e13ffb15 	stw	r4,-20(fp)
 812d558:	e17ffc15 	stw	r5,-16(fp)
 812d55c:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 812d560:	e0bffb17 	ldw	r2,-20(fp)
 812d564:	1004803a 	cmplt	r2,r2,zero
 812d568:	1000081e 	bne	r2,zero,812d58c <read+0x48>
 812d56c:	e0bffb17 	ldw	r2,-20(fp)
 812d570:	10800324 	muli	r2,r2,12
 812d574:	1007883a 	mov	r3,r2
 812d578:	008204f4 	movhi	r2,2067
 812d57c:	10898504 	addi	r2,r2,9748
 812d580:	1887883a 	add	r3,r3,r2
 812d584:	e0ffff15 	stw	r3,-4(fp)
 812d588:	00000106 	br	812d590 <read+0x4c>
 812d58c:	e03fff15 	stw	zero,-4(fp)
 812d590:	e0bfff17 	ldw	r2,-4(fp)
 812d594:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
 812d598:	e0bffa17 	ldw	r2,-24(fp)
 812d59c:	1005003a 	cmpeq	r2,r2,zero
 812d5a0:	1000241e 	bne	r2,zero,812d634 <read+0xf0>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 812d5a4:	e0bffa17 	ldw	r2,-24(fp)
 812d5a8:	10800217 	ldw	r2,8(r2)
 812d5ac:	108000cc 	andi	r2,r2,3
 812d5b0:	10800060 	cmpeqi	r2,r2,1
 812d5b4:	10001a1e 	bne	r2,zero,812d620 <read+0xdc>
 812d5b8:	e0bffa17 	ldw	r2,-24(fp)
 812d5bc:	10800017 	ldw	r2,0(r2)
 812d5c0:	10800517 	ldw	r2,20(r2)
 812d5c4:	1005003a 	cmpeq	r2,r2,zero
 812d5c8:	1000151e 	bne	r2,zero,812d620 <read+0xdc>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
 812d5cc:	e0bffa17 	ldw	r2,-24(fp)
 812d5d0:	10800017 	ldw	r2,0(r2)
 812d5d4:	10800517 	ldw	r2,20(r2)
 812d5d8:	e17ffc17 	ldw	r5,-16(fp)
 812d5dc:	e1bffd17 	ldw	r6,-12(fp)
 812d5e0:	e13ffa17 	ldw	r4,-24(fp)
 812d5e4:	103ee83a 	callr	r2
 812d5e8:	e0bff915 	stw	r2,-28(fp)
 812d5ec:	e0bff917 	ldw	r2,-28(fp)
 812d5f0:	1004403a 	cmpge	r2,r2,zero
 812d5f4:	1000071e 	bne	r2,zero,812d614 <read+0xd0>
        {
          ALT_ERRNO = -rval;
 812d5f8:	812d6640 	call	812d664 <alt_get_errno>
 812d5fc:	e0fff917 	ldw	r3,-28(fp)
 812d600:	00c7c83a 	sub	r3,zero,r3
 812d604:	10c00015 	stw	r3,0(r2)
          return -1;
 812d608:	00bfffc4 	movi	r2,-1
 812d60c:	e0bffe15 	stw	r2,-8(fp)
 812d610:	00000e06 	br	812d64c <read+0x108>
        }
        return rval;
 812d614:	e0bff917 	ldw	r2,-28(fp)
 812d618:	e0bffe15 	stw	r2,-8(fp)
 812d61c:	00000b06 	br	812d64c <read+0x108>
      }
      else
      {
        ALT_ERRNO = EACCES;
 812d620:	812d6640 	call	812d664 <alt_get_errno>
 812d624:	1007883a 	mov	r3,r2
 812d628:	00800344 	movi	r2,13
 812d62c:	18800015 	stw	r2,0(r3)
 812d630:	00000406 	br	812d644 <read+0x100>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
 812d634:	812d6640 	call	812d664 <alt_get_errno>
 812d638:	1007883a 	mov	r3,r2
 812d63c:	00801444 	movi	r2,81
 812d640:	18800015 	stw	r2,0(r3)
  }
  return -1;
 812d644:	00bfffc4 	movi	r2,-1
 812d648:	e0bffe15 	stw	r2,-8(fp)
 812d64c:	e0bffe17 	ldw	r2,-8(fp)
}
 812d650:	e037883a 	mov	sp,fp
 812d654:	dfc00117 	ldw	ra,4(sp)
 812d658:	df000017 	ldw	fp,0(sp)
 812d65c:	dec00204 	addi	sp,sp,8
 812d660:	f800283a 	ret

0812d664 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 812d664:	defffd04 	addi	sp,sp,-12
 812d668:	dfc00215 	stw	ra,8(sp)
 812d66c:	df000115 	stw	fp,4(sp)
 812d670:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 812d674:	008204f4 	movhi	r2,2067
 812d678:	108e5d04 	addi	r2,r2,14708
 812d67c:	10800017 	ldw	r2,0(r2)
 812d680:	1005003a 	cmpeq	r2,r2,zero
 812d684:	1000061e 	bne	r2,zero,812d6a0 <alt_get_errno+0x3c>
 812d688:	008204f4 	movhi	r2,2067
 812d68c:	108e5d04 	addi	r2,r2,14708
 812d690:	10800017 	ldw	r2,0(r2)
 812d694:	103ee83a 	callr	r2
 812d698:	e0bfff15 	stw	r2,-4(fp)
 812d69c:	00000306 	br	812d6ac <alt_get_errno+0x48>
 812d6a0:	008204f4 	movhi	r2,2067
 812d6a4:	10956404 	addi	r2,r2,21904
 812d6a8:	e0bfff15 	stw	r2,-4(fp)
 812d6ac:	e0bfff17 	ldw	r2,-4(fp)
}
 812d6b0:	e037883a 	mov	sp,fp
 812d6b4:	dfc00117 	ldw	ra,4(sp)
 812d6b8:	df000017 	ldw	fp,0(sp)
 812d6bc:	dec00204 	addi	sp,sp,8
 812d6c0:	f800283a 	ret

0812d6c4 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 812d6c4:	defffe04 	addi	sp,sp,-8
 812d6c8:	df000115 	stw	fp,4(sp)
 812d6cc:	df000104 	addi	fp,sp,4
 812d6d0:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
 812d6d4:	e0bfff17 	ldw	r2,-4(fp)
 812d6d8:	108000d0 	cmplti	r2,r2,3
 812d6dc:	10000d1e 	bne	r2,zero,812d714 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
 812d6e0:	e0bfff17 	ldw	r2,-4(fp)
 812d6e4:	00c204f4 	movhi	r3,2067
 812d6e8:	18c98504 	addi	r3,r3,9748
 812d6ec:	10800324 	muli	r2,r2,12
 812d6f0:	10c5883a 	add	r2,r2,r3
 812d6f4:	10800204 	addi	r2,r2,8
 812d6f8:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
 812d6fc:	e0bfff17 	ldw	r2,-4(fp)
 812d700:	00c204f4 	movhi	r3,2067
 812d704:	18c98504 	addi	r3,r3,9748
 812d708:	10800324 	muli	r2,r2,12
 812d70c:	10c5883a 	add	r2,r2,r3
 812d710:	10000015 	stw	zero,0(r2)
  }
}
 812d714:	e037883a 	mov	sp,fp
 812d718:	df000017 	ldw	fp,0(sp)
 812d71c:	dec00104 	addi	sp,sp,4
 812d720:	f800283a 	ret

0812d724 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
 812d724:	defff804 	addi	sp,sp,-32
 812d728:	df000715 	stw	fp,28(sp)
 812d72c:	df000704 	addi	fp,sp,28
 812d730:	e13ffe15 	stw	r4,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 812d734:	0005303a 	rdctl	r2,status
 812d738:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 812d73c:	e0fffb17 	ldw	r3,-20(fp)
 812d740:	00bfff84 	movi	r2,-2
 812d744:	1884703a 	and	r2,r3,r2
 812d748:	1001703a 	wrctl	status,r2
  
  return context;
 812d74c:	e0bffb17 	ldw	r2,-20(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
 812d750:	e0bffd15 	stw	r2,-12(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
 812d754:	d0a01017 	ldw	r2,-32704(gp)
 812d758:	10c000c4 	addi	r3,r2,3
 812d75c:	00bfff04 	movi	r2,-4
 812d760:	1884703a 	and	r2,r3,r2
 812d764:	d0a01015 	stw	r2,-32704(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
 812d768:	d0e01017 	ldw	r3,-32704(gp)
 812d76c:	e0bffe17 	ldw	r2,-8(fp)
 812d770:	1887883a 	add	r3,r3,r2
 812d774:	00821034 	movhi	r2,2112
 812d778:	10800004 	addi	r2,r2,0
 812d77c:	10c0072e 	bgeu	r2,r3,812d79c <sbrk+0x78>
 812d780:	e0bffd17 	ldw	r2,-12(fp)
 812d784:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 812d788:	e0bffa17 	ldw	r2,-24(fp)
 812d78c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
 812d790:	00bfffc4 	movi	r2,-1
 812d794:	e0bfff15 	stw	r2,-4(fp)
 812d798:	00000c06 	br	812d7cc <sbrk+0xa8>
  }
#endif

  prev_heap_end = heap_end; 
 812d79c:	d0a01017 	ldw	r2,-32704(gp)
 812d7a0:	e0bffc15 	stw	r2,-16(fp)
  heap_end += incr; 
 812d7a4:	d0e01017 	ldw	r3,-32704(gp)
 812d7a8:	e0bffe17 	ldw	r2,-8(fp)
 812d7ac:	1885883a 	add	r2,r3,r2
 812d7b0:	d0a01015 	stw	r2,-32704(gp)
 812d7b4:	e0bffd17 	ldw	r2,-12(fp)
 812d7b8:	e0bff915 	stw	r2,-28(fp)
 812d7bc:	e0bff917 	ldw	r2,-28(fp)
 812d7c0:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
 812d7c4:	e0bffc17 	ldw	r2,-16(fp)
 812d7c8:	e0bfff15 	stw	r2,-4(fp)
 812d7cc:	e0bfff17 	ldw	r2,-4(fp)
} 
 812d7d0:	e037883a 	mov	sp,fp
 812d7d4:	df000017 	ldw	fp,0(sp)
 812d7d8:	dec00104 	addi	sp,sp,4
 812d7dc:	f800283a 	ret

0812d7e0 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
 812d7e0:	defff704 	addi	sp,sp,-36
 812d7e4:	dfc00815 	stw	ra,32(sp)
 812d7e8:	df000715 	stw	fp,28(sp)
 812d7ec:	df000704 	addi	fp,sp,28
 812d7f0:	e13ffb15 	stw	r4,-20(fp)
 812d7f4:	e17ffc15 	stw	r5,-16(fp)
 812d7f8:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 812d7fc:	e0bffb17 	ldw	r2,-20(fp)
 812d800:	1004803a 	cmplt	r2,r2,zero
 812d804:	1000081e 	bne	r2,zero,812d828 <write+0x48>
 812d808:	e0bffb17 	ldw	r2,-20(fp)
 812d80c:	10800324 	muli	r2,r2,12
 812d810:	1007883a 	mov	r3,r2
 812d814:	008204f4 	movhi	r2,2067
 812d818:	10898504 	addi	r2,r2,9748
 812d81c:	1887883a 	add	r3,r3,r2
 812d820:	e0ffff15 	stw	r3,-4(fp)
 812d824:	00000106 	br	812d82c <write+0x4c>
 812d828:	e03fff15 	stw	zero,-4(fp)
 812d82c:	e0bfff17 	ldw	r2,-4(fp)
 812d830:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
 812d834:	e0bffa17 	ldw	r2,-24(fp)
 812d838:	1005003a 	cmpeq	r2,r2,zero
 812d83c:	1000241e 	bne	r2,zero,812d8d0 <write+0xf0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
 812d840:	e0bffa17 	ldw	r2,-24(fp)
 812d844:	10800217 	ldw	r2,8(r2)
 812d848:	108000cc 	andi	r2,r2,3
 812d84c:	1005003a 	cmpeq	r2,r2,zero
 812d850:	10001a1e 	bne	r2,zero,812d8bc <write+0xdc>
 812d854:	e0bffa17 	ldw	r2,-24(fp)
 812d858:	10800017 	ldw	r2,0(r2)
 812d85c:	10800617 	ldw	r2,24(r2)
 812d860:	1005003a 	cmpeq	r2,r2,zero
 812d864:	1000151e 	bne	r2,zero,812d8bc <write+0xdc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
 812d868:	e0bffa17 	ldw	r2,-24(fp)
 812d86c:	10800017 	ldw	r2,0(r2)
 812d870:	10800617 	ldw	r2,24(r2)
 812d874:	e17ffc17 	ldw	r5,-16(fp)
 812d878:	e1bffd17 	ldw	r6,-12(fp)
 812d87c:	e13ffa17 	ldw	r4,-24(fp)
 812d880:	103ee83a 	callr	r2
 812d884:	e0bff915 	stw	r2,-28(fp)
 812d888:	e0bff917 	ldw	r2,-28(fp)
 812d88c:	1004403a 	cmpge	r2,r2,zero
 812d890:	1000071e 	bne	r2,zero,812d8b0 <write+0xd0>
      {
        ALT_ERRNO = -rval;
 812d894:	812d9000 	call	812d900 <alt_get_errno>
 812d898:	e0fff917 	ldw	r3,-28(fp)
 812d89c:	00c7c83a 	sub	r3,zero,r3
 812d8a0:	10c00015 	stw	r3,0(r2)
        return -1;
 812d8a4:	00bfffc4 	movi	r2,-1
 812d8a8:	e0bffe15 	stw	r2,-8(fp)
 812d8ac:	00000e06 	br	812d8e8 <write+0x108>
      }
      return rval;
 812d8b0:	e0bff917 	ldw	r2,-28(fp)
 812d8b4:	e0bffe15 	stw	r2,-8(fp)
 812d8b8:	00000b06 	br	812d8e8 <write+0x108>
    }
    else
    {
      ALT_ERRNO = EACCES;
 812d8bc:	812d9000 	call	812d900 <alt_get_errno>
 812d8c0:	1007883a 	mov	r3,r2
 812d8c4:	00800344 	movi	r2,13
 812d8c8:	18800015 	stw	r2,0(r3)
 812d8cc:	00000406 	br	812d8e0 <write+0x100>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
 812d8d0:	812d9000 	call	812d900 <alt_get_errno>
 812d8d4:	1007883a 	mov	r3,r2
 812d8d8:	00801444 	movi	r2,81
 812d8dc:	18800015 	stw	r2,0(r3)
  }
  return -1;
 812d8e0:	00bfffc4 	movi	r2,-1
 812d8e4:	e0bffe15 	stw	r2,-8(fp)
 812d8e8:	e0bffe17 	ldw	r2,-8(fp)
}
 812d8ec:	e037883a 	mov	sp,fp
 812d8f0:	dfc00117 	ldw	ra,4(sp)
 812d8f4:	df000017 	ldw	fp,0(sp)
 812d8f8:	dec00204 	addi	sp,sp,8
 812d8fc:	f800283a 	ret

0812d900 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 812d900:	defffd04 	addi	sp,sp,-12
 812d904:	dfc00215 	stw	ra,8(sp)
 812d908:	df000115 	stw	fp,4(sp)
 812d90c:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 812d910:	008204f4 	movhi	r2,2067
 812d914:	108e5d04 	addi	r2,r2,14708
 812d918:	10800017 	ldw	r2,0(r2)
 812d91c:	1005003a 	cmpeq	r2,r2,zero
 812d920:	1000061e 	bne	r2,zero,812d93c <alt_get_errno+0x3c>
 812d924:	008204f4 	movhi	r2,2067
 812d928:	108e5d04 	addi	r2,r2,14708
 812d92c:	10800017 	ldw	r2,0(r2)
 812d930:	103ee83a 	callr	r2
 812d934:	e0bfff15 	stw	r2,-4(fp)
 812d938:	00000306 	br	812d948 <alt_get_errno+0x48>
 812d93c:	008204f4 	movhi	r2,2067
 812d940:	10956404 	addi	r2,r2,21904
 812d944:	e0bfff15 	stw	r2,-4(fp)
 812d948:	e0bfff17 	ldw	r2,-4(fp)
}
 812d94c:	e037883a 	mov	sp,fp
 812d950:	dfc00117 	ldw	ra,4(sp)
 812d954:	df000017 	ldw	fp,0(sp)
 812d958:	dec00204 	addi	sp,sp,8
 812d95c:	f800283a 	ret

0812d960 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 812d960:	defffd04 	addi	sp,sp,-12
 812d964:	dfc00215 	stw	ra,8(sp)
 812d968:	df000115 	stw	fp,4(sp)
 812d96c:	df000104 	addi	fp,sp,4
 812d970:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_IRQ_INIT ( CPU_3, cpu_3);
 812d974:	81311300 	call	8131130 <altera_nios2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 812d978:	00800044 	movi	r2,1
 812d97c:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 812d980:	e037883a 	mov	sp,fp
 812d984:	dfc00117 	ldw	ra,4(sp)
 812d988:	df000017 	ldw	fp,0(sp)
 812d98c:	dec00204 	addi	sp,sp,8
 812d990:	f800283a 	ret

0812d994 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 812d994:	defffd04 	addi	sp,sp,-12
 812d998:	dfc00215 	stw	ra,8(sp)
 812d99c:	df000115 	stw	fp,4(sp)
 812d9a0:	df000104 	addi	fp,sp,4
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_3, jtag_uart_3);
 812d9a4:	010204f4 	movhi	r4,2067
 812d9a8:	2109ef04 	addi	r4,r4,10172
 812d9ac:	000b883a 	mov	r5,zero
 812d9b0:	018000c4 	movi	r6,3
 812d9b4:	812dd8c0 	call	812dd8c <altera_avalon_jtag_uart_init>
 812d9b8:	010204f4 	movhi	r4,2067
 812d9bc:	2109e504 	addi	r4,r4,10132
 812d9c0:	812dc0c0 	call	812dc0c <alt_dev_reg>
    ALTERA_AVALON_MAILBOX_INIT ( MAILBOX_0, mailbox_0);
 812d9c4:	010204f4 	movhi	r4,2067
 812d9c8:	210dfd04 	addi	r4,r4,14324
 812d9cc:	812e6f00 	call	812e6f0 <alt_avalon_mailbox_init>
    ALTERA_AVALON_MAILBOX_INIT ( MAILBOX_1, mailbox_1);
 812d9d0:	010204f4 	movhi	r4,2067
 812d9d4:	210e0c04 	addi	r4,r4,14384
 812d9d8:	812e6f00 	call	812e6f0 <alt_avalon_mailbox_init>
    ALTERA_AVALON_MAILBOX_INIT ( MAILBOX_2, mailbox_2);
 812d9dc:	010204f4 	movhi	r4,2067
 812d9e0:	210e1b04 	addi	r4,r4,14444
 812d9e4:	812e6f00 	call	812e6f0 <alt_avalon_mailbox_init>
    ALTERA_AVALON_MAILBOX_INIT ( MAILBOX_3, mailbox_3);
 812d9e8:	010204f4 	movhi	r4,2067
 812d9ec:	210e2a04 	addi	r4,r4,14504
 812d9f0:	812e6f00 	call	812e6f0 <alt_avalon_mailbox_init>
    ALTERA_AVALON_PERFORMANCE_COUNTER_INIT ( PERFORMANCE_COUNTER_0, performance_counter_0);
 812d9f4:	0007883a 	mov	r3,zero
 812d9f8:	00800044 	movi	r2,1
 812d9fc:	18800035 	stwio	r2,0(r3)
    ALTERA_AVALON_SYSID_INIT ( SYSID, sysid);
    ALTERA_UP_AVALON_VIDEO_PIXEL_BUFFER_DMA_INIT ( VIDEO_PIXEL_BUFFER_DMA_0, video_pixel_buffer_dma_0);
 812da00:	008204f4 	movhi	r2,2067
 812da04:	108e3904 	addi	r2,r2,14564
 812da08:	10800a17 	ldw	r2,40(r2)
 812da0c:	10800017 	ldw	r2,0(r2)
 812da10:	1007883a 	mov	r3,r2
 812da14:	008204f4 	movhi	r2,2067
 812da18:	108e3904 	addi	r2,r2,14564
 812da1c:	10c00b15 	stw	r3,44(r2)
 812da20:	008204f4 	movhi	r2,2067
 812da24:	108e3904 	addi	r2,r2,14564
 812da28:	10800a17 	ldw	r2,40(r2)
 812da2c:	10800104 	addi	r2,r2,4
 812da30:	10800017 	ldw	r2,0(r2)
 812da34:	1007883a 	mov	r3,r2
 812da38:	008204f4 	movhi	r2,2067
 812da3c:	108e3904 	addi	r2,r2,14564
 812da40:	10c00c15 	stw	r3,48(r2)
 812da44:	008204f4 	movhi	r2,2067
 812da48:	108e3904 	addi	r2,r2,14564
 812da4c:	10800a17 	ldw	r2,40(r2)
 812da50:	10800204 	addi	r2,r2,8
 812da54:	10800017 	ldw	r2,0(r2)
 812da58:	10ffffcc 	andi	r3,r2,65535
 812da5c:	008204f4 	movhi	r2,2067
 812da60:	108e3904 	addi	r2,r2,14564
 812da64:	10c00f15 	stw	r3,60(r2)
 812da68:	008204f4 	movhi	r2,2067
 812da6c:	108e3904 	addi	r2,r2,14564
 812da70:	10800a17 	ldw	r2,40(r2)
 812da74:	10800204 	addi	r2,r2,8
 812da78:	10800017 	ldw	r2,0(r2)
 812da7c:	1005d43a 	srai	r2,r2,16
 812da80:	10ffffcc 	andi	r3,r2,65535
 812da84:	008204f4 	movhi	r2,2067
 812da88:	108e3904 	addi	r2,r2,14564
 812da8c:	10c01015 	stw	r3,64(r2)
 812da90:	008204f4 	movhi	r2,2067
 812da94:	108e3904 	addi	r2,r2,14564
 812da98:	10800a17 	ldw	r2,40(r2)
 812da9c:	10800304 	addi	r2,r2,12
 812daa0:	10800017 	ldw	r2,0(r2)
 812daa4:	1005d07a 	srai	r2,r2,1
 812daa8:	10c0004c 	andi	r3,r2,1
 812daac:	008204f4 	movhi	r2,2067
 812dab0:	108e3904 	addi	r2,r2,14564
 812dab4:	10c00d15 	stw	r3,52(r2)
 812dab8:	008204f4 	movhi	r2,2067
 812dabc:	108e3904 	addi	r2,r2,14564
 812dac0:	10800a17 	ldw	r2,40(r2)
 812dac4:	10800304 	addi	r2,r2,12
 812dac8:	10800017 	ldw	r2,0(r2)
 812dacc:	1005d13a 	srai	r2,r2,4
 812dad0:	10c003cc 	andi	r3,r2,15
 812dad4:	008204f4 	movhi	r2,2067
 812dad8:	108e3904 	addi	r2,r2,14564
 812dadc:	10c00e15 	stw	r3,56(r2)
 812dae0:	008204f4 	movhi	r2,2067
 812dae4:	108e3904 	addi	r2,r2,14564
 812dae8:	10800a17 	ldw	r2,40(r2)
 812daec:	10800304 	addi	r2,r2,12
 812daf0:	10800017 	ldw	r2,0(r2)
 812daf4:	1005d43a 	srai	r2,r2,16
 812daf8:	1007883a 	mov	r3,r2
 812dafc:	00bfffc4 	movi	r2,-1
 812db00:	1884703a 	and	r2,r3,r2
 812db04:	e0bfff45 	stb	r2,-3(fp)
 812db08:	008204f4 	movhi	r2,2067
 812db0c:	108e3904 	addi	r2,r2,14564
 812db10:	10800a17 	ldw	r2,40(r2)
 812db14:	10800304 	addi	r2,r2,12
 812db18:	10800017 	ldw	r2,0(r2)
 812db1c:	1005d63a 	srai	r2,r2,24
 812db20:	1007883a 	mov	r3,r2
 812db24:	00bfffc4 	movi	r2,-1
 812db28:	1884703a 	and	r2,r3,r2
 812db2c:	e0bfff05 	stb	r2,-4(fp)
 812db30:	008204f4 	movhi	r2,2067
 812db34:	108e3904 	addi	r2,r2,14564
 812db38:	10800e17 	ldw	r2,56(r2)
 812db3c:	10800058 	cmpnei	r2,r2,1
 812db40:	1000041e 	bne	r2,zero,812db54 <alt_sys_init+0x1c0>
 812db44:	008204f4 	movhi	r2,2067
 812db48:	108e3904 	addi	r2,r2,14564
 812db4c:	10001115 	stw	zero,68(r2)
 812db50:	00000e06 	br	812db8c <alt_sys_init+0x1f8>
 812db54:	008204f4 	movhi	r2,2067
 812db58:	108e3904 	addi	r2,r2,14564
 812db5c:	10800e17 	ldw	r2,56(r2)
 812db60:	10800098 	cmpnei	r2,r2,2
 812db64:	1000051e 	bne	r2,zero,812db7c <alt_sys_init+0x1e8>
 812db68:	00c204f4 	movhi	r3,2067
 812db6c:	18ce3904 	addi	r3,r3,14564
 812db70:	00800044 	movi	r2,1
 812db74:	18801115 	stw	r2,68(r3)
 812db78:	00000406 	br	812db8c <alt_sys_init+0x1f8>
 812db7c:	00c204f4 	movhi	r3,2067
 812db80:	18ce3904 	addi	r3,r3,14564
 812db84:	00800084 	movi	r2,2
 812db88:	18801115 	stw	r2,68(r3)
 812db8c:	e0ffff43 	ldbu	r3,-3(fp)
 812db90:	00800804 	movi	r2,32
 812db94:	10c7c83a 	sub	r3,r2,r3
 812db98:	00bfffc4 	movi	r2,-1
 812db9c:	10c6d83a 	srl	r3,r2,r3
 812dba0:	008204f4 	movhi	r2,2067
 812dba4:	108e3904 	addi	r2,r2,14564
 812dba8:	10c01215 	stw	r3,72(r2)
 812dbac:	e0ffff43 	ldbu	r3,-3(fp)
 812dbb0:	008204f4 	movhi	r2,2067
 812dbb4:	108e3904 	addi	r2,r2,14564
 812dbb8:	10801117 	ldw	r2,68(r2)
 812dbbc:	1887883a 	add	r3,r3,r2
 812dbc0:	008204f4 	movhi	r2,2067
 812dbc4:	108e3904 	addi	r2,r2,14564
 812dbc8:	10c01315 	stw	r3,76(r2)
 812dbcc:	e0ffff03 	ldbu	r3,-4(fp)
 812dbd0:	00800804 	movi	r2,32
 812dbd4:	10c7c83a 	sub	r3,r2,r3
 812dbd8:	00bfffc4 	movi	r2,-1
 812dbdc:	10c6d83a 	srl	r3,r2,r3
 812dbe0:	008204f4 	movhi	r2,2067
 812dbe4:	108e3904 	addi	r2,r2,14564
 812dbe8:	10c01415 	stw	r3,80(r2)
 812dbec:	010204f4 	movhi	r4,2067
 812dbf0:	210e3904 	addi	r4,r4,14564
 812dbf4:	812dc0c0 	call	812dc0c <alt_dev_reg>
}
 812dbf8:	e037883a 	mov	sp,fp
 812dbfc:	dfc00117 	ldw	ra,4(sp)
 812dc00:	df000017 	ldw	fp,0(sp)
 812dc04:	dec00204 	addi	sp,sp,8
 812dc08:	f800283a 	ret

0812dc0c <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
 812dc0c:	defffd04 	addi	sp,sp,-12
 812dc10:	dfc00215 	stw	ra,8(sp)
 812dc14:	df000115 	stw	fp,4(sp)
 812dc18:	df000104 	addi	fp,sp,4
 812dc1c:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 812dc20:	e13fff17 	ldw	r4,-4(fp)
 812dc24:	014204f4 	movhi	r5,2067
 812dc28:	294e5a04 	addi	r5,r5,14696
 812dc2c:	81306200 	call	8130620 <alt_dev_llist_insert>
}
 812dc30:	e037883a 	mov	sp,fp
 812dc34:	dfc00117 	ldw	ra,4(sp)
 812dc38:	df000017 	ldw	fp,0(sp)
 812dc3c:	dec00204 	addi	sp,sp,8
 812dc40:	f800283a 	ret

0812dc44 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 812dc44:	defffa04 	addi	sp,sp,-24
 812dc48:	dfc00515 	stw	ra,20(sp)
 812dc4c:	df000415 	stw	fp,16(sp)
 812dc50:	df000404 	addi	fp,sp,16
 812dc54:	e13ffd15 	stw	r4,-12(fp)
 812dc58:	e17ffe15 	stw	r5,-8(fp)
 812dc5c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 812dc60:	e0bffd17 	ldw	r2,-12(fp)
 812dc64:	10800017 	ldw	r2,0(r2)
 812dc68:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 812dc6c:	e0bffc17 	ldw	r2,-16(fp)
 812dc70:	11000a04 	addi	r4,r2,40
 812dc74:	e0bffd17 	ldw	r2,-12(fp)
 812dc78:	11c00217 	ldw	r7,8(r2)
 812dc7c:	e17ffe17 	ldw	r5,-8(fp)
 812dc80:	e1bfff17 	ldw	r6,-4(fp)
 812dc84:	812e28c0 	call	812e28c <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
 812dc88:	e037883a 	mov	sp,fp
 812dc8c:	dfc00117 	ldw	ra,4(sp)
 812dc90:	df000017 	ldw	fp,0(sp)
 812dc94:	dec00204 	addi	sp,sp,8
 812dc98:	f800283a 	ret

0812dc9c <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 812dc9c:	defffa04 	addi	sp,sp,-24
 812dca0:	dfc00515 	stw	ra,20(sp)
 812dca4:	df000415 	stw	fp,16(sp)
 812dca8:	df000404 	addi	fp,sp,16
 812dcac:	e13ffd15 	stw	r4,-12(fp)
 812dcb0:	e17ffe15 	stw	r5,-8(fp)
 812dcb4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 812dcb8:	e0bffd17 	ldw	r2,-12(fp)
 812dcbc:	10800017 	ldw	r2,0(r2)
 812dcc0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 812dcc4:	e0bffc17 	ldw	r2,-16(fp)
 812dcc8:	11000a04 	addi	r4,r2,40
 812dccc:	e0bffd17 	ldw	r2,-12(fp)
 812dcd0:	11c00217 	ldw	r7,8(r2)
 812dcd4:	e17ffe17 	ldw	r5,-8(fp)
 812dcd8:	e1bfff17 	ldw	r6,-4(fp)
 812dcdc:	812e4b00 	call	812e4b0 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
 812dce0:	e037883a 	mov	sp,fp
 812dce4:	dfc00117 	ldw	ra,4(sp)
 812dce8:	df000017 	ldw	fp,0(sp)
 812dcec:	dec00204 	addi	sp,sp,8
 812dcf0:	f800283a 	ret

0812dcf4 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
 812dcf4:	defffc04 	addi	sp,sp,-16
 812dcf8:	dfc00315 	stw	ra,12(sp)
 812dcfc:	df000215 	stw	fp,8(sp)
 812dd00:	df000204 	addi	fp,sp,8
 812dd04:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 812dd08:	e0bfff17 	ldw	r2,-4(fp)
 812dd0c:	10800017 	ldw	r2,0(r2)
 812dd10:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
 812dd14:	e0bffe17 	ldw	r2,-8(fp)
 812dd18:	11000a04 	addi	r4,r2,40
 812dd1c:	e0bfff17 	ldw	r2,-4(fp)
 812dd20:	11400217 	ldw	r5,8(r2)
 812dd24:	812e1240 	call	812e124 <altera_avalon_jtag_uart_close>
}
 812dd28:	e037883a 	mov	sp,fp
 812dd2c:	dfc00117 	ldw	ra,4(sp)
 812dd30:	df000017 	ldw	fp,0(sp)
 812dd34:	dec00204 	addi	sp,sp,8
 812dd38:	f800283a 	ret

0812dd3c <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
 812dd3c:	defffa04 	addi	sp,sp,-24
 812dd40:	dfc00515 	stw	ra,20(sp)
 812dd44:	df000415 	stw	fp,16(sp)
 812dd48:	df000404 	addi	fp,sp,16
 812dd4c:	e13ffd15 	stw	r4,-12(fp)
 812dd50:	e17ffe15 	stw	r5,-8(fp)
 812dd54:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
 812dd58:	e0bffd17 	ldw	r2,-12(fp)
 812dd5c:	10800017 	ldw	r2,0(r2)
 812dd60:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
 812dd64:	e0bffc17 	ldw	r2,-16(fp)
 812dd68:	11000a04 	addi	r4,r2,40
 812dd6c:	e17ffe17 	ldw	r5,-8(fp)
 812dd70:	e1bfff17 	ldw	r6,-4(fp)
 812dd74:	812e1980 	call	812e198 <altera_avalon_jtag_uart_ioctl>
}
 812dd78:	e037883a 	mov	sp,fp
 812dd7c:	dfc00117 	ldw	ra,4(sp)
 812dd80:	df000017 	ldw	fp,0(sp)
 812dd84:	dec00204 	addi	sp,sp,8
 812dd88:	f800283a 	ret

0812dd8c <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
 812dd8c:	defffa04 	addi	sp,sp,-24
 812dd90:	dfc00515 	stw	ra,20(sp)
 812dd94:	df000415 	stw	fp,16(sp)
 812dd98:	df000404 	addi	fp,sp,16
 812dd9c:	e13ffd15 	stw	r4,-12(fp)
 812dda0:	e17ffe15 	stw	r5,-8(fp)
 812dda4:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 812dda8:	e0fffd17 	ldw	r3,-12(fp)
 812ddac:	00800044 	movi	r2,1
 812ddb0:	18800815 	stw	r2,32(r3)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
 812ddb4:	e0bffd17 	ldw	r2,-12(fp)
 812ddb8:	10800017 	ldw	r2,0(r2)
 812ddbc:	11000104 	addi	r4,r2,4
 812ddc0:	e0bffd17 	ldw	r2,-12(fp)
 812ddc4:	10800817 	ldw	r2,32(r2)
 812ddc8:	1007883a 	mov	r3,r2
 812ddcc:	2005883a 	mov	r2,r4
 812ddd0:	10c00035 	stwio	r3,0(r2)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
 812ddd4:	e13ffe17 	ldw	r4,-8(fp)
 812ddd8:	e17fff17 	ldw	r5,-4(fp)
 812dddc:	d8000015 	stw	zero,0(sp)
 812dde0:	018204f4 	movhi	r6,2067
 812dde4:	31b79304 	addi	r6,r6,-8628
 812dde8:	e1fffd17 	ldw	r7,-12(fp)
 812ddec:	81308c00 	call	81308c0 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
 812ddf0:	e0bffd17 	ldw	r2,-12(fp)
 812ddf4:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
 812ddf8:	e0bffd17 	ldw	r2,-12(fp)
 812ddfc:	11000204 	addi	r4,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 812de00:	008204f4 	movhi	r2,2067
 812de04:	10956904 	addi	r2,r2,21924
 812de08:	10800017 	ldw	r2,0(r2)
 812de0c:	100b883a 	mov	r5,r2
 812de10:	018204f4 	movhi	r6,2067
 812de14:	31b81d04 	addi	r6,r6,-8076
 812de18:	e1fffd17 	ldw	r7,-12(fp)
 812de1c:	81304880 	call	8130488 <alt_alarm_start>
 812de20:	1004403a 	cmpge	r2,r2,zero
 812de24:	1000041e 	bne	r2,zero,812de38 <altera_avalon_jtag_uart_init+0xac>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
 812de28:	e0fffd17 	ldw	r3,-12(fp)
 812de2c:	00a00034 	movhi	r2,32768
 812de30:	10bfffc4 	addi	r2,r2,-1
 812de34:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
 812de38:	e037883a 	mov	sp,fp
 812de3c:	dfc00117 	ldw	ra,4(sp)
 812de40:	df000017 	ldw	fp,0(sp)
 812de44:	dec00204 	addi	sp,sp,8
 812de48:	f800283a 	ret

0812de4c <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
 812de4c:	defff804 	addi	sp,sp,-32
 812de50:	df000715 	stw	fp,28(sp)
 812de54:	df000704 	addi	fp,sp,28
 812de58:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
 812de5c:	e0bfff17 	ldw	r2,-4(fp)
 812de60:	e0bffe15 	stw	r2,-8(fp)
  unsigned int base = sp->base;
 812de64:	e0bffe17 	ldw	r2,-8(fp)
 812de68:	10800017 	ldw	r2,0(r2)
 812de6c:	e0bffd15 	stw	r2,-12(fp)
 812de70:	00000006 	br	812de74 <altera_avalon_jtag_uart_irq+0x28>
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 812de74:	e0bffd17 	ldw	r2,-12(fp)
 812de78:	10800104 	addi	r2,r2,4
 812de7c:	10800037 	ldwio	r2,0(r2)
 812de80:	e0bffc15 	stw	r2,-16(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
 812de84:	e0bffc17 	ldw	r2,-16(fp)
 812de88:	1080c00c 	andi	r2,r2,768
 812de8c:	1005003a 	cmpeq	r2,r2,zero
 812de90:	1000741e 	bne	r2,zero,812e064 <altera_avalon_jtag_uart_irq+0x218>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
 812de94:	e0bffc17 	ldw	r2,-16(fp)
 812de98:	1080400c 	andi	r2,r2,256
 812de9c:	1005003a 	cmpeq	r2,r2,zero
 812dea0:	1000351e 	bne	r2,zero,812df78 <altera_avalon_jtag_uart_irq+0x12c>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
 812dea4:	00800074 	movhi	r2,1
 812dea8:	e0bffb15 	stw	r2,-20(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 812deac:	e0bffe17 	ldw	r2,-8(fp)
 812deb0:	10800a17 	ldw	r2,40(r2)
 812deb4:	10800044 	addi	r2,r2,1
 812deb8:	1081ffcc 	andi	r2,r2,2047
 812debc:	e0bffa15 	stw	r2,-24(fp)
        if (next == sp->rx_out)
 812dec0:	e0bffe17 	ldw	r2,-8(fp)
 812dec4:	10c00b17 	ldw	r3,44(r2)
 812dec8:	e0bffa17 	ldw	r2,-24(fp)
 812decc:	18801626 	beq	r3,r2,812df28 <altera_avalon_jtag_uart_irq+0xdc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 812ded0:	e0bffd17 	ldw	r2,-12(fp)
 812ded4:	10800037 	ldwio	r2,0(r2)
 812ded8:	e0bffb15 	stw	r2,-20(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
 812dedc:	e0bffb17 	ldw	r2,-20(fp)
 812dee0:	10a0000c 	andi	r2,r2,32768
 812dee4:	1005003a 	cmpeq	r2,r2,zero
 812dee8:	10000f1e 	bne	r2,zero,812df28 <altera_avalon_jtag_uart_irq+0xdc>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 812deec:	e0bffe17 	ldw	r2,-8(fp)
 812def0:	10c00a17 	ldw	r3,40(r2)
 812def4:	e0bffb17 	ldw	r2,-20(fp)
 812def8:	1009883a 	mov	r4,r2
 812defc:	e0bffe17 	ldw	r2,-8(fp)
 812df00:	1885883a 	add	r2,r3,r2
 812df04:	10800e04 	addi	r2,r2,56
 812df08:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 812df0c:	e0bffe17 	ldw	r2,-8(fp)
 812df10:	10800a17 	ldw	r2,40(r2)
 812df14:	10800044 	addi	r2,r2,1
 812df18:	10c1ffcc 	andi	r3,r2,2047
 812df1c:	e0bffe17 	ldw	r2,-8(fp)
 812df20:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
 812df24:	003fe106 	br	812deac <altera_avalon_jtag_uart_irq+0x60>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
 812df28:	e0bffb17 	ldw	r2,-20(fp)
 812df2c:	10bfffec 	andhi	r2,r2,65535
 812df30:	1005003a 	cmpeq	r2,r2,zero
 812df34:	1000101e 	bne	r2,zero,812df78 <altera_avalon_jtag_uart_irq+0x12c>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 812df38:	e0bffe17 	ldw	r2,-8(fp)
 812df3c:	10c00817 	ldw	r3,32(r2)
 812df40:	00bfff84 	movi	r2,-2
 812df44:	1886703a 	and	r3,r3,r2
 812df48:	e0bffe17 	ldw	r2,-8(fp)
 812df4c:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
 812df50:	e0bffd17 	ldw	r2,-12(fp)
 812df54:	11000104 	addi	r4,r2,4
 812df58:	e0bffe17 	ldw	r2,-8(fp)
 812df5c:	10800817 	ldw	r2,32(r2)
 812df60:	1007883a 	mov	r3,r2
 812df64:	2005883a 	mov	r2,r4
 812df68:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 812df6c:	e0bffd17 	ldw	r2,-12(fp)
 812df70:	10800104 	addi	r2,r2,4
 812df74:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
 812df78:	e0bffc17 	ldw	r2,-16(fp)
 812df7c:	1080800c 	andi	r2,r2,512
 812df80:	1005003a 	cmpeq	r2,r2,zero
 812df84:	103fbb1e 	bne	r2,zero,812de74 <altera_avalon_jtag_uart_irq+0x28>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
 812df88:	e0bffc17 	ldw	r2,-16(fp)
 812df8c:	10bfffec 	andhi	r2,r2,65535
 812df90:	1004d43a 	srli	r2,r2,16
 812df94:	e0bff915 	stw	r2,-28(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
 812df98:	00001506 	br	812dff0 <altera_avalon_jtag_uart_irq+0x1a4>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
 812df9c:	e13ffd17 	ldw	r4,-12(fp)
 812dfa0:	e0bffe17 	ldw	r2,-8(fp)
 812dfa4:	10c00d17 	ldw	r3,52(r2)
 812dfa8:	e0bffe17 	ldw	r2,-8(fp)
 812dfac:	1885883a 	add	r2,r3,r2
 812dfb0:	10820e04 	addi	r2,r2,2104
 812dfb4:	10800003 	ldbu	r2,0(r2)
 812dfb8:	10c03fcc 	andi	r3,r2,255
 812dfbc:	18c0201c 	xori	r3,r3,128
 812dfc0:	18ffe004 	addi	r3,r3,-128
 812dfc4:	2005883a 	mov	r2,r4
 812dfc8:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 812dfcc:	e0bffe17 	ldw	r2,-8(fp)
 812dfd0:	10800d17 	ldw	r2,52(r2)
 812dfd4:	10800044 	addi	r2,r2,1
 812dfd8:	10c1ffcc 	andi	r3,r2,2047
 812dfdc:	e0bffe17 	ldw	r2,-8(fp)
 812dfe0:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
 812dfe4:	e0bff917 	ldw	r2,-28(fp)
 812dfe8:	10bfffc4 	addi	r2,r2,-1
 812dfec:	e0bff915 	stw	r2,-28(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
 812dff0:	e0bff917 	ldw	r2,-28(fp)
 812dff4:	1005003a 	cmpeq	r2,r2,zero
 812dff8:	1000051e 	bne	r2,zero,812e010 <altera_avalon_jtag_uart_irq+0x1c4>
 812dffc:	e0bffe17 	ldw	r2,-8(fp)
 812e000:	10c00d17 	ldw	r3,52(r2)
 812e004:	e0bffe17 	ldw	r2,-8(fp)
 812e008:	10800c17 	ldw	r2,48(r2)
 812e00c:	18bfe31e 	bne	r3,r2,812df9c <altera_avalon_jtag_uart_irq+0x150>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
 812e010:	e0bff917 	ldw	r2,-28(fp)
 812e014:	1005003a 	cmpeq	r2,r2,zero
 812e018:	103f961e 	bne	r2,zero,812de74 <altera_avalon_jtag_uart_irq+0x28>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 812e01c:	e0bffe17 	ldw	r2,-8(fp)
 812e020:	10c00817 	ldw	r3,32(r2)
 812e024:	00bfff44 	movi	r2,-3
 812e028:	1886703a 	and	r3,r3,r2
 812e02c:	e0bffe17 	ldw	r2,-8(fp)
 812e030:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 812e034:	e0bffe17 	ldw	r2,-8(fp)
 812e038:	10800017 	ldw	r2,0(r2)
 812e03c:	11000104 	addi	r4,r2,4
 812e040:	e0bffe17 	ldw	r2,-8(fp)
 812e044:	10800817 	ldw	r2,32(r2)
 812e048:	1007883a 	mov	r3,r2
 812e04c:	2005883a 	mov	r2,r4
 812e050:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 812e054:	e0bffd17 	ldw	r2,-12(fp)
 812e058:	10800104 	addi	r2,r2,4
 812e05c:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
 812e060:	003f8406 	br	812de74 <altera_avalon_jtag_uart_irq+0x28>
}
 812e064:	e037883a 	mov	sp,fp
 812e068:	df000017 	ldw	fp,0(sp)
 812e06c:	dec00104 	addi	sp,sp,4
 812e070:	f800283a 	ret

0812e074 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
 812e074:	defffc04 	addi	sp,sp,-16
 812e078:	df000315 	stw	fp,12(sp)
 812e07c:	df000304 	addi	fp,sp,12
 812e080:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
 812e084:	e0bfff17 	ldw	r2,-4(fp)
 812e088:	e0bffe15 	stw	r2,-8(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
 812e08c:	e0bffe17 	ldw	r2,-8(fp)
 812e090:	10800017 	ldw	r2,0(r2)
 812e094:	10800104 	addi	r2,r2,4
 812e098:	10800037 	ldwio	r2,0(r2)
 812e09c:	e0bffd15 	stw	r2,-12(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
 812e0a0:	e0bffd17 	ldw	r2,-12(fp)
 812e0a4:	1081000c 	andi	r2,r2,1024
 812e0a8:	1005003a 	cmpeq	r2,r2,zero
 812e0ac:	10000c1e 	bne	r2,zero,812e0e0 <altera_avalon_jtag_uart_timeout+0x6c>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
 812e0b0:	e0bffe17 	ldw	r2,-8(fp)
 812e0b4:	10800017 	ldw	r2,0(r2)
 812e0b8:	11000104 	addi	r4,r2,4
 812e0bc:	e0bffe17 	ldw	r2,-8(fp)
 812e0c0:	10800817 	ldw	r2,32(r2)
 812e0c4:	10810014 	ori	r2,r2,1024
 812e0c8:	1007883a 	mov	r3,r2
 812e0cc:	2005883a 	mov	r2,r4
 812e0d0:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
 812e0d4:	e0bffe17 	ldw	r2,-8(fp)
 812e0d8:	10000915 	stw	zero,36(r2)
 812e0dc:	00000a06 	br	812e108 <altera_avalon_jtag_uart_timeout+0x94>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
 812e0e0:	e0bffe17 	ldw	r2,-8(fp)
 812e0e4:	10c00917 	ldw	r3,36(r2)
 812e0e8:	00a00034 	movhi	r2,32768
 812e0ec:	10bfff04 	addi	r2,r2,-4
 812e0f0:	10c00536 	bltu	r2,r3,812e108 <altera_avalon_jtag_uart_timeout+0x94>
    sp->host_inactive++;
 812e0f4:	e0bffe17 	ldw	r2,-8(fp)
 812e0f8:	10800917 	ldw	r2,36(r2)
 812e0fc:	10c00044 	addi	r3,r2,1
 812e100:	e0bffe17 	ldw	r2,-8(fp)
 812e104:	10c00915 	stw	r3,36(r2)
 812e108:	008204f4 	movhi	r2,2067
 812e10c:	10956904 	addi	r2,r2,21924
 812e110:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
 812e114:	e037883a 	mov	sp,fp
 812e118:	df000017 	ldw	fp,0(sp)
 812e11c:	dec00104 	addi	sp,sp,4
 812e120:	f800283a 	ret

0812e124 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
 812e124:	defffc04 	addi	sp,sp,-16
 812e128:	df000315 	stw	fp,12(sp)
 812e12c:	df000304 	addi	fp,sp,12
 812e130:	e13ffd15 	stw	r4,-12(fp)
 812e134:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 812e138:	00000706 	br	812e158 <altera_avalon_jtag_uart_close+0x34>
    if (flags & O_NONBLOCK) {
 812e13c:	e0bffe17 	ldw	r2,-8(fp)
 812e140:	1090000c 	andi	r2,r2,16384
 812e144:	1005003a 	cmpeq	r2,r2,zero
 812e148:	1000031e 	bne	r2,zero,812e158 <altera_avalon_jtag_uart_close+0x34>
      return -EWOULDBLOCK; 
 812e14c:	00bffd44 	movi	r2,-11
 812e150:	e0bfff15 	stw	r2,-4(fp)
 812e154:	00000b06 	br	812e184 <altera_avalon_jtag_uart_close+0x60>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 812e158:	e0bffd17 	ldw	r2,-12(fp)
 812e15c:	10c00d17 	ldw	r3,52(r2)
 812e160:	e0bffd17 	ldw	r2,-12(fp)
 812e164:	10800c17 	ldw	r2,48(r2)
 812e168:	18800526 	beq	r3,r2,812e180 <altera_avalon_jtag_uart_close+0x5c>
 812e16c:	e0bffd17 	ldw	r2,-12(fp)
 812e170:	10c00917 	ldw	r3,36(r2)
 812e174:	e0bffd17 	ldw	r2,-12(fp)
 812e178:	10800117 	ldw	r2,4(r2)
 812e17c:	18bfef36 	bltu	r3,r2,812e13c <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
 812e180:	e03fff15 	stw	zero,-4(fp)
 812e184:	e0bfff17 	ldw	r2,-4(fp)
}
 812e188:	e037883a 	mov	sp,fp
 812e18c:	df000017 	ldw	fp,0(sp)
 812e190:	dec00104 	addi	sp,sp,4
 812e194:	f800283a 	ret

0812e198 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
 812e198:	defff804 	addi	sp,sp,-32
 812e19c:	df000715 	stw	fp,28(sp)
 812e1a0:	df000704 	addi	fp,sp,28
 812e1a4:	e13ffb15 	stw	r4,-20(fp)
 812e1a8:	e17ffc15 	stw	r5,-16(fp)
 812e1ac:	e1bffd15 	stw	r6,-12(fp)
  int rc = -ENOTTY;
 812e1b0:	00bff9c4 	movi	r2,-25
 812e1b4:	e0bffa15 	stw	r2,-24(fp)

  switch (req)
 812e1b8:	e0bffc17 	ldw	r2,-16(fp)
 812e1bc:	e0bfff15 	stw	r2,-4(fp)
 812e1c0:	e0ffff17 	ldw	r3,-4(fp)
 812e1c4:	189a8060 	cmpeqi	r2,r3,27137
 812e1c8:	1000041e 	bne	r2,zero,812e1dc <altera_avalon_jtag_uart_ioctl+0x44>
 812e1cc:	e0ffff17 	ldw	r3,-4(fp)
 812e1d0:	189a80a0 	cmpeqi	r2,r3,27138
 812e1d4:	10001b1e 	bne	r2,zero,812e244 <altera_avalon_jtag_uart_ioctl+0xac>
 812e1d8:	00002706 	br	812e278 <altera_avalon_jtag_uart_ioctl+0xe0>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
 812e1dc:	e0bffb17 	ldw	r2,-20(fp)
 812e1e0:	10c00117 	ldw	r3,4(r2)
 812e1e4:	00a00034 	movhi	r2,32768
 812e1e8:	10bfffc4 	addi	r2,r2,-1
 812e1ec:	18802226 	beq	r3,r2,812e278 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
 812e1f0:	e0bffd17 	ldw	r2,-12(fp)
 812e1f4:	10800017 	ldw	r2,0(r2)
 812e1f8:	e0bff915 	stw	r2,-28(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
 812e1fc:	e0bff917 	ldw	r2,-28(fp)
 812e200:	10800090 	cmplti	r2,r2,2
 812e204:	1000071e 	bne	r2,zero,812e224 <altera_avalon_jtag_uart_ioctl+0x8c>
 812e208:	e0fff917 	ldw	r3,-28(fp)
 812e20c:	00a00034 	movhi	r2,32768
 812e210:	10bfffc4 	addi	r2,r2,-1
 812e214:	18800326 	beq	r3,r2,812e224 <altera_avalon_jtag_uart_ioctl+0x8c>
 812e218:	e0bff917 	ldw	r2,-28(fp)
 812e21c:	e0bffe15 	stw	r2,-8(fp)
 812e220:	00000306 	br	812e230 <altera_avalon_jtag_uart_ioctl+0x98>
 812e224:	00e00034 	movhi	r3,32768
 812e228:	18ffff84 	addi	r3,r3,-2
 812e22c:	e0fffe15 	stw	r3,-8(fp)
 812e230:	e0bffb17 	ldw	r2,-20(fp)
 812e234:	e0fffe17 	ldw	r3,-8(fp)
 812e238:	10c00115 	stw	r3,4(r2)
      rc = 0;
 812e23c:	e03ffa15 	stw	zero,-24(fp)
    }
    break;
 812e240:	00000d06 	br	812e278 <altera_avalon_jtag_uart_ioctl+0xe0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
 812e244:	e0bffb17 	ldw	r2,-20(fp)
 812e248:	10c00117 	ldw	r3,4(r2)
 812e24c:	00a00034 	movhi	r2,32768
 812e250:	10bfffc4 	addi	r2,r2,-1
 812e254:	18800826 	beq	r3,r2,812e278 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
 812e258:	e13ffd17 	ldw	r4,-12(fp)
 812e25c:	e0bffb17 	ldw	r2,-20(fp)
 812e260:	10c00917 	ldw	r3,36(r2)
 812e264:	e0bffb17 	ldw	r2,-20(fp)
 812e268:	10800117 	ldw	r2,4(r2)
 812e26c:	1885803a 	cmpltu	r2,r3,r2
 812e270:	20800015 	stw	r2,0(r4)
      rc = 0;
 812e274:	e03ffa15 	stw	zero,-24(fp)

  default:
    break;
  }

  return rc;
 812e278:	e0bffa17 	ldw	r2,-24(fp)
}
 812e27c:	e037883a 	mov	sp,fp
 812e280:	df000017 	ldw	fp,0(sp)
 812e284:	dec00104 	addi	sp,sp,4
 812e288:	f800283a 	ret

0812e28c <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
 812e28c:	defff204 	addi	sp,sp,-56
 812e290:	dfc00d15 	stw	ra,52(sp)
 812e294:	df000c15 	stw	fp,48(sp)
 812e298:	df000c04 	addi	fp,sp,48
 812e29c:	e13ffb15 	stw	r4,-20(fp)
 812e2a0:	e17ffc15 	stw	r5,-16(fp)
 812e2a4:	e1bffd15 	stw	r6,-12(fp)
 812e2a8:	e1fffe15 	stw	r7,-8(fp)
  char * ptr = buffer;
 812e2ac:	e0bffc17 	ldw	r2,-16(fp)
 812e2b0:	e0bffa15 	stw	r2,-24(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 812e2b4:	00004806 	br	812e3d8 <altera_avalon_jtag_uart_read+0x14c>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
 812e2b8:	e0bffb17 	ldw	r2,-20(fp)
 812e2bc:	10800a17 	ldw	r2,40(r2)
 812e2c0:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
 812e2c4:	e0bffb17 	ldw	r2,-20(fp)
 812e2c8:	10800b17 	ldw	r2,44(r2)
 812e2cc:	e0bff615 	stw	r2,-40(fp)

      if (in >= out)
 812e2d0:	e0fff717 	ldw	r3,-36(fp)
 812e2d4:	e0bff617 	ldw	r2,-40(fp)
 812e2d8:	18800536 	bltu	r3,r2,812e2f0 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
 812e2dc:	e0bff717 	ldw	r2,-36(fp)
 812e2e0:	e0fff617 	ldw	r3,-40(fp)
 812e2e4:	10c5c83a 	sub	r2,r2,r3
 812e2e8:	e0bff815 	stw	r2,-32(fp)
 812e2ec:	00000406 	br	812e300 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
 812e2f0:	00820004 	movi	r2,2048
 812e2f4:	e0fff617 	ldw	r3,-40(fp)
 812e2f8:	10c5c83a 	sub	r2,r2,r3
 812e2fc:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
 812e300:	e0bff817 	ldw	r2,-32(fp)
 812e304:	1005003a 	cmpeq	r2,r2,zero
 812e308:	10001f1e 	bne	r2,zero,812e388 <altera_avalon_jtag_uart_read+0xfc>
        break; /* No more data available */

      if (n > space)
 812e30c:	e0fffd17 	ldw	r3,-12(fp)
 812e310:	e0bff817 	ldw	r2,-32(fp)
 812e314:	1880022e 	bgeu	r3,r2,812e320 <altera_avalon_jtag_uart_read+0x94>
        n = space;
 812e318:	e0bffd17 	ldw	r2,-12(fp)
 812e31c:	e0bff815 	stw	r2,-32(fp)

      memcpy(ptr, sp->rx_buf + out, n);
 812e320:	e0bffb17 	ldw	r2,-20(fp)
 812e324:	10c00e04 	addi	r3,r2,56
 812e328:	e0bff617 	ldw	r2,-40(fp)
 812e32c:	1887883a 	add	r3,r3,r2
 812e330:	e0bffa17 	ldw	r2,-24(fp)
 812e334:	1009883a 	mov	r4,r2
 812e338:	180b883a 	mov	r5,r3
 812e33c:	e1bff817 	ldw	r6,-32(fp)
 812e340:	812a0b40 	call	812a0b4 <memcpy>
      ptr   += n;
 812e344:	e0fff817 	ldw	r3,-32(fp)
 812e348:	e0bffa17 	ldw	r2,-24(fp)
 812e34c:	10c5883a 	add	r2,r2,r3
 812e350:	e0bffa15 	stw	r2,-24(fp)
      space -= n;
 812e354:	e0fffd17 	ldw	r3,-12(fp)
 812e358:	e0bff817 	ldw	r2,-32(fp)
 812e35c:	1885c83a 	sub	r2,r3,r2
 812e360:	e0bffd15 	stw	r2,-12(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 812e364:	e0fff617 	ldw	r3,-40(fp)
 812e368:	e0bff817 	ldw	r2,-32(fp)
 812e36c:	1885883a 	add	r2,r3,r2
 812e370:	10c1ffcc 	andi	r3,r2,2047
 812e374:	e0bffb17 	ldw	r2,-20(fp)
 812e378:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
 812e37c:	e0bffd17 	ldw	r2,-12(fp)
 812e380:	10800048 	cmpgei	r2,r2,1
 812e384:	103fcc1e 	bne	r2,zero,812e2b8 <altera_avalon_jtag_uart_read+0x2c>

    /* If we read any data then return it */
    if (ptr != buffer)
 812e388:	e0fffa17 	ldw	r3,-24(fp)
 812e38c:	e0bffc17 	ldw	r2,-16(fp)
 812e390:	1880141e 	bne	r3,r2,812e3e4 <altera_avalon_jtag_uart_read+0x158>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
 812e394:	e0bffe17 	ldw	r2,-8(fp)
 812e398:	1090000c 	andi	r2,r2,16384
 812e39c:	1004c03a 	cmpne	r2,r2,zero
 812e3a0:	1000101e 	bne	r2,zero,812e3e4 <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
 812e3a4:	e0bffb17 	ldw	r2,-20(fp)
 812e3a8:	10c00a17 	ldw	r3,40(r2)
 812e3ac:	e0bff717 	ldw	r2,-36(fp)
 812e3b0:	1880051e 	bne	r3,r2,812e3c8 <altera_avalon_jtag_uart_read+0x13c>
 812e3b4:	e0bffb17 	ldw	r2,-20(fp)
 812e3b8:	10c00917 	ldw	r3,36(r2)
 812e3bc:	e0bffb17 	ldw	r2,-20(fp)
 812e3c0:	10800117 	ldw	r2,4(r2)
 812e3c4:	18bff736 	bltu	r3,r2,812e3a4 <altera_avalon_jtag_uart_read+0x118>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
 812e3c8:	e0bffb17 	ldw	r2,-20(fp)
 812e3cc:	10c00a17 	ldw	r3,40(r2)
 812e3d0:	e0bff717 	ldw	r2,-36(fp)
 812e3d4:	18800326 	beq	r3,r2,812e3e4 <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 812e3d8:	e0bffd17 	ldw	r2,-12(fp)
 812e3dc:	10800048 	cmpgei	r2,r2,1
 812e3e0:	103fb51e 	bne	r2,zero,812e2b8 <altera_avalon_jtag_uart_read+0x2c>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
 812e3e4:	e0fffa17 	ldw	r3,-24(fp)
 812e3e8:	e0bffc17 	ldw	r2,-16(fp)
 812e3ec:	18801926 	beq	r3,r2,812e454 <altera_avalon_jtag_uart_read+0x1c8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 812e3f0:	0005303a 	rdctl	r2,status
 812e3f4:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 812e3f8:	e0fff517 	ldw	r3,-44(fp)
 812e3fc:	00bfff84 	movi	r2,-2
 812e400:	1884703a 	and	r2,r3,r2
 812e404:	1001703a 	wrctl	status,r2
  
  return context;
 812e408:	e0bff517 	ldw	r2,-44(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
 812e40c:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 812e410:	e0bffb17 	ldw	r2,-20(fp)
 812e414:	10800817 	ldw	r2,32(r2)
 812e418:	10c00054 	ori	r3,r2,1
 812e41c:	e0bffb17 	ldw	r2,-20(fp)
 812e420:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 812e424:	e0bffb17 	ldw	r2,-20(fp)
 812e428:	10800017 	ldw	r2,0(r2)
 812e42c:	11000104 	addi	r4,r2,4
 812e430:	e0bffb17 	ldw	r2,-20(fp)
 812e434:	10800817 	ldw	r2,32(r2)
 812e438:	1007883a 	mov	r3,r2
 812e43c:	2005883a 	mov	r2,r4
 812e440:	10c00035 	stwio	r3,0(r2)
 812e444:	e0bff917 	ldw	r2,-28(fp)
 812e448:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 812e44c:	e0bff417 	ldw	r2,-48(fp)
 812e450:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
 812e454:	e0fffa17 	ldw	r3,-24(fp)
 812e458:	e0bffc17 	ldw	r2,-16(fp)
 812e45c:	18800526 	beq	r3,r2,812e474 <altera_avalon_jtag_uart_read+0x1e8>
    return ptr - buffer;
 812e460:	e0fffa17 	ldw	r3,-24(fp)
 812e464:	e0bffc17 	ldw	r2,-16(fp)
 812e468:	1887c83a 	sub	r3,r3,r2
 812e46c:	e0ffff15 	stw	r3,-4(fp)
 812e470:	00000906 	br	812e498 <altera_avalon_jtag_uart_read+0x20c>
  else if (flags & O_NONBLOCK)
 812e474:	e0bffe17 	ldw	r2,-8(fp)
 812e478:	1090000c 	andi	r2,r2,16384
 812e47c:	1005003a 	cmpeq	r2,r2,zero
 812e480:	1000031e 	bne	r2,zero,812e490 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
 812e484:	00bffd44 	movi	r2,-11
 812e488:	e0bfff15 	stw	r2,-4(fp)
 812e48c:	00000206 	br	812e498 <altera_avalon_jtag_uart_read+0x20c>
  else
    return -EIO;
 812e490:	00bffec4 	movi	r2,-5
 812e494:	e0bfff15 	stw	r2,-4(fp)
 812e498:	e0bfff17 	ldw	r2,-4(fp)
}
 812e49c:	e037883a 	mov	sp,fp
 812e4a0:	dfc00117 	ldw	ra,4(sp)
 812e4a4:	df000017 	ldw	fp,0(sp)
 812e4a8:	dec00204 	addi	sp,sp,8
 812e4ac:	f800283a 	ret

0812e4b0 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 812e4b0:	defff204 	addi	sp,sp,-56
 812e4b4:	dfc00d15 	stw	ra,52(sp)
 812e4b8:	df000c15 	stw	fp,48(sp)
 812e4bc:	df000c04 	addi	fp,sp,48
 812e4c0:	e13ffb15 	stw	r4,-20(fp)
 812e4c4:	e17ffc15 	stw	r5,-16(fp)
 812e4c8:	e1bffd15 	stw	r6,-12(fp)
 812e4cc:	e1fffe15 	stw	r7,-8(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
 812e4d0:	e03ff915 	stw	zero,-28(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
 812e4d4:	e0bffc17 	ldw	r2,-16(fp)
 812e4d8:	e0bff615 	stw	r2,-40(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 812e4dc:	00003a06 	br	812e5c8 <altera_avalon_jtag_uart_write+0x118>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
 812e4e0:	e0bffb17 	ldw	r2,-20(fp)
 812e4e4:	10800c17 	ldw	r2,48(r2)
 812e4e8:	e0bffa15 	stw	r2,-24(fp)
      out = sp->tx_out;
 812e4ec:	e0bffb17 	ldw	r2,-20(fp)
 812e4f0:	10800d17 	ldw	r2,52(r2)
 812e4f4:	e0bff915 	stw	r2,-28(fp)

      if (in < out)
 812e4f8:	e0fffa17 	ldw	r3,-24(fp)
 812e4fc:	e0bff917 	ldw	r2,-28(fp)
 812e500:	1880062e 	bgeu	r3,r2,812e51c <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
 812e504:	e0fff917 	ldw	r3,-28(fp)
 812e508:	e0bffa17 	ldw	r2,-24(fp)
 812e50c:	1885c83a 	sub	r2,r3,r2
 812e510:	10bfffc4 	addi	r2,r2,-1
 812e514:	e0bff815 	stw	r2,-32(fp)
 812e518:	00000c06 	br	812e54c <altera_avalon_jtag_uart_write+0x9c>
      else if (out > 0)
 812e51c:	e0bff917 	ldw	r2,-28(fp)
 812e520:	1005003a 	cmpeq	r2,r2,zero
 812e524:	1000051e 	bne	r2,zero,812e53c <altera_avalon_jtag_uart_write+0x8c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
 812e528:	00820004 	movi	r2,2048
 812e52c:	e0fffa17 	ldw	r3,-24(fp)
 812e530:	10c5c83a 	sub	r2,r2,r3
 812e534:	e0bff815 	stw	r2,-32(fp)
 812e538:	00000406 	br	812e54c <altera_avalon_jtag_uart_write+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
 812e53c:	0081ffc4 	movi	r2,2047
 812e540:	e0fffa17 	ldw	r3,-24(fp)
 812e544:	10c5c83a 	sub	r2,r2,r3
 812e548:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
 812e54c:	e0bff817 	ldw	r2,-32(fp)
 812e550:	1005003a 	cmpeq	r2,r2,zero
 812e554:	10001f1e 	bne	r2,zero,812e5d4 <altera_avalon_jtag_uart_write+0x124>
        break;

      if (n > count)
 812e558:	e0fffd17 	ldw	r3,-12(fp)
 812e55c:	e0bff817 	ldw	r2,-32(fp)
 812e560:	1880022e 	bgeu	r3,r2,812e56c <altera_avalon_jtag_uart_write+0xbc>
        n = count;
 812e564:	e0bffd17 	ldw	r2,-12(fp)
 812e568:	e0bff815 	stw	r2,-32(fp)

      memcpy(sp->tx_buf + in, ptr, n);
 812e56c:	e0bffb17 	ldw	r2,-20(fp)
 812e570:	10c20e04 	addi	r3,r2,2104
 812e574:	e0bffa17 	ldw	r2,-24(fp)
 812e578:	1885883a 	add	r2,r3,r2
 812e57c:	e0fffc17 	ldw	r3,-16(fp)
 812e580:	1009883a 	mov	r4,r2
 812e584:	180b883a 	mov	r5,r3
 812e588:	e1bff817 	ldw	r6,-32(fp)
 812e58c:	812a0b40 	call	812a0b4 <memcpy>
      ptr   += n;
 812e590:	e0fff817 	ldw	r3,-32(fp)
 812e594:	e0bffc17 	ldw	r2,-16(fp)
 812e598:	10c5883a 	add	r2,r2,r3
 812e59c:	e0bffc15 	stw	r2,-16(fp)
      count -= n;
 812e5a0:	e0fffd17 	ldw	r3,-12(fp)
 812e5a4:	e0bff817 	ldw	r2,-32(fp)
 812e5a8:	1885c83a 	sub	r2,r3,r2
 812e5ac:	e0bffd15 	stw	r2,-12(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 812e5b0:	e0fffa17 	ldw	r3,-24(fp)
 812e5b4:	e0bff817 	ldw	r2,-32(fp)
 812e5b8:	1885883a 	add	r2,r3,r2
 812e5bc:	10c1ffcc 	andi	r3,r2,2047
 812e5c0:	e0bffb17 	ldw	r2,-20(fp)
 812e5c4:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 812e5c8:	e0bffd17 	ldw	r2,-12(fp)
 812e5cc:	10800048 	cmpgei	r2,r2,1
 812e5d0:	103fc31e 	bne	r2,zero,812e4e0 <altera_avalon_jtag_uart_write+0x30>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 812e5d4:	0005303a 	rdctl	r2,status
 812e5d8:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 812e5dc:	e0fff517 	ldw	r3,-44(fp)
 812e5e0:	00bfff84 	movi	r2,-2
 812e5e4:	1884703a 	and	r2,r3,r2
 812e5e8:	1001703a 	wrctl	status,r2
  
  return context;
 812e5ec:	e0bff517 	ldw	r2,-44(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
 812e5f0:	e0bff715 	stw	r2,-36(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 812e5f4:	e0bffb17 	ldw	r2,-20(fp)
 812e5f8:	10800817 	ldw	r2,32(r2)
 812e5fc:	10c00094 	ori	r3,r2,2
 812e600:	e0bffb17 	ldw	r2,-20(fp)
 812e604:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 812e608:	e0bffb17 	ldw	r2,-20(fp)
 812e60c:	10800017 	ldw	r2,0(r2)
 812e610:	11000104 	addi	r4,r2,4
 812e614:	e0bffb17 	ldw	r2,-20(fp)
 812e618:	10800817 	ldw	r2,32(r2)
 812e61c:	1007883a 	mov	r3,r2
 812e620:	2005883a 	mov	r2,r4
 812e624:	10c00035 	stwio	r3,0(r2)
 812e628:	e0bff717 	ldw	r2,-36(fp)
 812e62c:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 812e630:	e0bff417 	ldw	r2,-48(fp)
 812e634:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
 812e638:	e0bffd17 	ldw	r2,-12(fp)
 812e63c:	10800050 	cmplti	r2,r2,1
 812e640:	1000111e 	bne	r2,zero,812e688 <altera_avalon_jtag_uart_write+0x1d8>
    {
      if (flags & O_NONBLOCK)
 812e644:	e0bffe17 	ldw	r2,-8(fp)
 812e648:	1090000c 	andi	r2,r2,16384
 812e64c:	1004c03a 	cmpne	r2,r2,zero
 812e650:	1000101e 	bne	r2,zero,812e694 <altera_avalon_jtag_uart_write+0x1e4>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
 812e654:	e0bffb17 	ldw	r2,-20(fp)
 812e658:	10c00d17 	ldw	r3,52(r2)
 812e65c:	e0bff917 	ldw	r2,-28(fp)
 812e660:	1880051e 	bne	r3,r2,812e678 <altera_avalon_jtag_uart_write+0x1c8>
 812e664:	e0bffb17 	ldw	r2,-20(fp)
 812e668:	10c00917 	ldw	r3,36(r2)
 812e66c:	e0bffb17 	ldw	r2,-20(fp)
 812e670:	10800117 	ldw	r2,4(r2)
 812e674:	18bff736 	bltu	r3,r2,812e654 <altera_avalon_jtag_uart_write+0x1a4>
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
 812e678:	e0bffb17 	ldw	r2,-20(fp)
 812e67c:	10c00d17 	ldw	r3,52(r2)
 812e680:	e0bff917 	ldw	r2,-28(fp)
 812e684:	18800326 	beq	r3,r2,812e694 <altera_avalon_jtag_uart_write+0x1e4>
        break;
    }
  }
  while (count > 0);
 812e688:	e0bffd17 	ldw	r2,-12(fp)
 812e68c:	10800048 	cmpgei	r2,r2,1
 812e690:	103fcd1e 	bne	r2,zero,812e5c8 <altera_avalon_jtag_uart_write+0x118>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
 812e694:	e0fffc17 	ldw	r3,-16(fp)
 812e698:	e0bff617 	ldw	r2,-40(fp)
 812e69c:	18800526 	beq	r3,r2,812e6b4 <altera_avalon_jtag_uart_write+0x204>
    return ptr - start;
 812e6a0:	e0fffc17 	ldw	r3,-16(fp)
 812e6a4:	e0bff617 	ldw	r2,-40(fp)
 812e6a8:	1887c83a 	sub	r3,r3,r2
 812e6ac:	e0ffff15 	stw	r3,-4(fp)
 812e6b0:	00000906 	br	812e6d8 <altera_avalon_jtag_uart_write+0x228>
  else if (flags & O_NONBLOCK)
 812e6b4:	e0bffe17 	ldw	r2,-8(fp)
 812e6b8:	1090000c 	andi	r2,r2,16384
 812e6bc:	1005003a 	cmpeq	r2,r2,zero
 812e6c0:	1000031e 	bne	r2,zero,812e6d0 <altera_avalon_jtag_uart_write+0x220>
    return -EWOULDBLOCK;
 812e6c4:	00bffd44 	movi	r2,-11
 812e6c8:	e0bfff15 	stw	r2,-4(fp)
 812e6cc:	00000206 	br	812e6d8 <altera_avalon_jtag_uart_write+0x228>
  else
    return -EIO; /* Host not connected */
 812e6d0:	00bffec4 	movi	r2,-5
 812e6d4:	e0bfff15 	stw	r2,-4(fp)
 812e6d8:	e0bfff17 	ldw	r2,-4(fp)
}
 812e6dc:	e037883a 	mov	sp,fp
 812e6e0:	dfc00117 	ldw	ra,4(sp)
 812e6e4:	df000017 	ldw	fp,0(sp)
 812e6e8:	dec00204 	addi	sp,sp,8
 812e6ec:	f800283a 	ret

0812e6f0 <alt_avalon_mailbox_init>:

/*
 * Register a Mutex device
 */
int alt_avalon_mailbox_init (alt_mailbox_dev* dev)
{
 812e6f0:	defffa04 	addi	sp,sp,-24
 812e6f4:	dfc00515 	stw	ra,20(sp)
 812e6f8:	df000415 	stw	fp,16(sp)
 812e6fc:	df000404 	addi	fp,sp,16
 812e700:	e13fff15 	stw	r4,-4(fp)
  int ret_code;
  alt_mutex_dev* write_mutex, *read_mutex;
  extern alt_llist alt_mailbox_list;

  ret_code = alt_avalon_mutex_reg( &dev->write_mutex );
 812e704:	e0bfff17 	ldw	r2,-4(fp)
 812e708:	11000704 	addi	r4,r2,28
 812e70c:	812e8480 	call	812e848 <alt_avalon_mutex_reg>
 812e710:	e0bffe15 	stw	r2,-8(fp)

  if (!ret_code)
 812e714:	e0bffe17 	ldw	r2,-8(fp)
 812e718:	1004c03a 	cmpne	r2,r2,zero
 812e71c:	1000041e 	bne	r2,zero,812e730 <alt_avalon_mailbox_init+0x40>
  {
    ret_code = alt_avalon_mutex_reg( &dev->read_mutex );
 812e720:	e0bfff17 	ldw	r2,-4(fp)
 812e724:	11000b04 	addi	r4,r2,44
 812e728:	812e8480 	call	812e848 <alt_avalon_mutex_reg>
 812e72c:	e0bffe15 	stw	r2,-8(fp)
  }

  if (!ret_code)
 812e730:	e0bffe17 	ldw	r2,-8(fp)
 812e734:	1004c03a 	cmpne	r2,r2,zero
 812e738:	1000041e 	bne	r2,zero,812e74c <alt_avalon_mailbox_init+0x5c>
  {
    ret_code = alt_dev_llist_insert((alt_dev_llist*) dev, &alt_mailbox_list);
 812e73c:	e13fff17 	ldw	r4,-4(fp)
 812e740:	d1601104 	addi	r5,gp,-32700
 812e744:	81306200 	call	8130620 <alt_dev_llist_insert>
 812e748:	e0bffe15 	stw	r2,-8(fp)
  }

  if (!ret_code)
 812e74c:	e0bffe17 	ldw	r2,-8(fp)
 812e750:	1004c03a 	cmpne	r2,r2,zero
 812e754:	1000361e 	bne	r2,zero,812e830 <alt_avalon_mailbox_init+0x140>
  {
    write_mutex = altera_avalon_mutex_open(dev->write_mutex.name);
 812e758:	e0bfff17 	ldw	r2,-4(fp)
 812e75c:	11000917 	ldw	r4,36(r2)
 812e760:	812ec940 	call	812ec94 <altera_avalon_mutex_open>
 812e764:	e0bffd15 	stw	r2,-12(fp)
    if (write_mutex)
 812e768:	e0bffd17 	ldw	r2,-12(fp)
 812e76c:	1005003a 	cmpeq	r2,r2,zero
 812e770:	10002f1e 	bne	r2,zero,812e830 <alt_avalon_mailbox_init+0x140>
    {
      read_mutex = altera_avalon_mutex_open(dev->read_mutex.name);
 812e774:	e0bfff17 	ldw	r2,-4(fp)
 812e778:	11000d17 	ldw	r4,52(r2)
 812e77c:	812ec940 	call	812ec94 <altera_avalon_mutex_open>
 812e780:	e0bffc15 	stw	r2,-16(fp)
      if (read_mutex)
 812e784:	e0bffc17 	ldw	r2,-16(fp)
 812e788:	1005003a 	cmpeq	r2,r2,zero
 812e78c:	1000281e 	bne	r2,zero,812e830 <alt_avalon_mailbox_init+0x140>
      {
        while (altera_avalon_mutex_first_lock(write_mutex))
 812e790:	00000f06 	br	812e7d0 <alt_avalon_mailbox_init+0xe0>
        {
          if (!altera_avalon_mutex_trylock(write_mutex, 1))
 812e794:	e13ffd17 	ldw	r4,-12(fp)
 812e798:	01400044 	movi	r5,1
 812e79c:	812edac0 	call	812edac <altera_avalon_mutex_trylock>
 812e7a0:	1004c03a 	cmpne	r2,r2,zero
 812e7a4:	10000a1e 	bne	r2,zero,812e7d0 <alt_avalon_mailbox_init+0xe0>
          {
            IOWR((alt_u32)(dev->write_ptr), 0,
 812e7a8:	e0bfff17 	ldw	r2,-4(fp)
 812e7ac:	10800317 	ldw	r2,12(r2)
 812e7b0:	1009883a 	mov	r4,r2
 812e7b4:	e0bfff17 	ldw	r2,-4(fp)
 812e7b8:	10800517 	ldw	r2,20(r2)
 812e7bc:	1007883a 	mov	r3,r2
 812e7c0:	2005883a 	mov	r2,r4
 812e7c4:	10c00035 	stwio	r3,0(r2)
              (alt_u32) dev->mailbox_mem_start_ptr);
            altera_avalon_mutex_unlock(write_mutex);
 812e7c8:	e13ffd17 	ldw	r4,-12(fp)
 812e7cc:	812edec0 	call	812edec <altera_avalon_mutex_unlock>
    if (write_mutex)
    {
      read_mutex = altera_avalon_mutex_open(dev->read_mutex.name);
      if (read_mutex)
      {
        while (altera_avalon_mutex_first_lock(write_mutex))
 812e7d0:	e13ffd17 	ldw	r4,-12(fp)
 812e7d4:	812eec40 	call	812eec4 <altera_avalon_mutex_first_lock>
 812e7d8:	1004c03a 	cmpne	r2,r2,zero
 812e7dc:	103fed1e 	bne	r2,zero,812e794 <alt_avalon_mailbox_init+0xa4>
              (alt_u32) dev->mailbox_mem_start_ptr);
            altera_avalon_mutex_unlock(write_mutex);
          }
        }

        while (altera_avalon_mutex_first_lock(read_mutex))
 812e7e0:	00000f06 	br	812e820 <alt_avalon_mailbox_init+0x130>
        {
          if (!altera_avalon_mutex_trylock(read_mutex, 1))
 812e7e4:	e13ffc17 	ldw	r4,-16(fp)
 812e7e8:	01400044 	movi	r5,1
 812e7ec:	812edac0 	call	812edac <altera_avalon_mutex_trylock>
 812e7f0:	1004c03a 	cmpne	r2,r2,zero
 812e7f4:	10000a1e 	bne	r2,zero,812e820 <alt_avalon_mailbox_init+0x130>
          {
            IOWR((alt_u32)(dev->read_ptr), 0,
 812e7f8:	e0bfff17 	ldw	r2,-4(fp)
 812e7fc:	10800417 	ldw	r2,16(r2)
 812e800:	1009883a 	mov	r4,r2
 812e804:	e0bfff17 	ldw	r2,-4(fp)
 812e808:	10800517 	ldw	r2,20(r2)
 812e80c:	1007883a 	mov	r3,r2
 812e810:	2005883a 	mov	r2,r4
 812e814:	10c00035 	stwio	r3,0(r2)
              (alt_u32) dev->mailbox_mem_start_ptr);
            altera_avalon_mutex_unlock(read_mutex);
 812e818:	e13ffc17 	ldw	r4,-16(fp)
 812e81c:	812edec0 	call	812edec <altera_avalon_mutex_unlock>
              (alt_u32) dev->mailbox_mem_start_ptr);
            altera_avalon_mutex_unlock(write_mutex);
          }
        }

        while (altera_avalon_mutex_first_lock(read_mutex))
 812e820:	e13ffc17 	ldw	r4,-16(fp)
 812e824:	812eec40 	call	812eec4 <altera_avalon_mutex_first_lock>
 812e828:	1004c03a 	cmpne	r2,r2,zero
 812e82c:	103fed1e 	bne	r2,zero,812e7e4 <alt_avalon_mailbox_init+0xf4>
          }
        }
      }
    }
  }
  return ret_code;
 812e830:	e0bffe17 	ldw	r2,-8(fp)
}
 812e834:	e037883a 	mov	sp,fp
 812e838:	dfc00117 	ldw	ra,4(sp)
 812e83c:	df000017 	ldw	fp,0(sp)
 812e840:	dec00204 	addi	sp,sp,8
 812e844:	f800283a 	ret

0812e848 <alt_avalon_mutex_reg>:
/*
 * Register a Mutex device
 */

static ALT_INLINE int alt_avalon_mutex_reg (alt_mutex_dev* dev)
{
 812e848:	defffc04 	addi	sp,sp,-16
 812e84c:	dfc00315 	stw	ra,12(sp)
 812e850:	df000215 	stw	fp,8(sp)
 812e854:	df000204 	addi	fp,sp,8
 812e858:	e13fff15 	stw	r4,-4(fp)
 * HAL.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_no_error (void)
{
  return 0;
 812e85c:	0005883a 	mov	r2,zero
  int ret_code;
  extern alt_llist alt_mutex_list;
  ret_code = ALT_SEM_CREATE (&dev->lock, 1);
 812e860:	e0bffe15 	stw	r2,-8(fp)
  if (!ret_code)
 812e864:	e0bffe17 	ldw	r2,-8(fp)
 812e868:	1004c03a 	cmpne	r2,r2,zero
 812e86c:	1000061e 	bne	r2,zero,812e888 <alt_avalon_mutex_reg+0x40>
  {
    ret_code = alt_dev_llist_insert((alt_dev_llist*) dev, &alt_mutex_list);
 812e870:	e13fff17 	ldw	r4,-4(fp)
 812e874:	014204f4 	movhi	r5,2067
 812e878:	294e6104 	addi	r5,r5,14724
 812e87c:	81306200 	call	8130620 <alt_dev_llist_insert>
 812e880:	e0bffe15 	stw	r2,-8(fp)
 812e884:	00000506 	br	812e89c <alt_avalon_mutex_reg+0x54>
  }
  else
  {
    ALT_ERRNO = ENOMEM;
 812e888:	812e8b40 	call	812e8b4 <alt_get_errno>
 812e88c:	00c00304 	movi	r3,12
 812e890:	10c00015 	stw	r3,0(r2)
    ret_code = -ENOMEM;
 812e894:	00bffd04 	movi	r2,-12
 812e898:	e0bffe15 	stw	r2,-8(fp)
  }

  return ret_code;
 812e89c:	e0bffe17 	ldw	r2,-8(fp)
}
 812e8a0:	e037883a 	mov	sp,fp
 812e8a4:	dfc00117 	ldw	ra,4(sp)
 812e8a8:	df000017 	ldw	fp,0(sp)
 812e8ac:	dec00204 	addi	sp,sp,8
 812e8b0:	f800283a 	ret

0812e8b4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 812e8b4:	defffd04 	addi	sp,sp,-12
 812e8b8:	dfc00215 	stw	ra,8(sp)
 812e8bc:	df000115 	stw	fp,4(sp)
 812e8c0:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 812e8c4:	008204f4 	movhi	r2,2067
 812e8c8:	108e5d04 	addi	r2,r2,14708
 812e8cc:	10800017 	ldw	r2,0(r2)
 812e8d0:	1005003a 	cmpeq	r2,r2,zero
 812e8d4:	1000061e 	bne	r2,zero,812e8f0 <alt_get_errno+0x3c>
 812e8d8:	008204f4 	movhi	r2,2067
 812e8dc:	108e5d04 	addi	r2,r2,14708
 812e8e0:	10800017 	ldw	r2,0(r2)
 812e8e4:	103ee83a 	callr	r2
 812e8e8:	e0bfff15 	stw	r2,-4(fp)
 812e8ec:	00000306 	br	812e8fc <alt_get_errno+0x48>
 812e8f0:	008204f4 	movhi	r2,2067
 812e8f4:	10956404 	addi	r2,r2,21904
 812e8f8:	e0bfff15 	stw	r2,-4(fp)
 812e8fc:	e0bfff17 	ldw	r2,-4(fp)
}
 812e900:	e037883a 	mov	sp,fp
 812e904:	dfc00117 	ldw	ra,4(sp)
 812e908:	df000017 	ldw	fp,0(sp)
 812e90c:	dec00204 	addi	sp,sp,8
 812e910:	f800283a 	ret

0812e914 <altera_avalon_mailbox_open>:
 * Search the list of registered mailboxes for one with the supplied name.
 *
 * The return value will be NULL on failure, and non-NULL otherwise.
 */
alt_mailbox_dev* altera_avalon_mailbox_open (const char* name)
{
 812e914:	defffc04 	addi	sp,sp,-16
 812e918:	dfc00315 	stw	ra,12(sp)
 812e91c:	df000215 	stw	fp,8(sp)
 812e920:	df000204 	addi	fp,sp,8
 812e924:	e13fff15 	stw	r4,-4(fp)
  alt_mailbox_dev* dev;

  dev = (alt_mailbox_dev*) alt_find_dev (name, &alt_mailbox_list);
 812e928:	e13fff17 	ldw	r4,-4(fp)
 812e92c:	d1601104 	addi	r5,gp,-32700
 812e930:	81307fc0 	call	81307fc <alt_find_dev>
 812e934:	e0bffe15 	stw	r2,-8(fp)

  if (NULL == dev)
 812e938:	e0bffe17 	ldw	r2,-8(fp)
 812e93c:	1004c03a 	cmpne	r2,r2,zero
 812e940:	1000041e 	bne	r2,zero,812e954 <altera_avalon_mailbox_open+0x40>
  {
    ALT_ERRNO = ENODEV;
 812e944:	812e8b40 	call	812e8b4 <alt_get_errno>
 812e948:	1007883a 	mov	r3,r2
 812e94c:	008004c4 	movi	r2,19
 812e950:	18800015 	stw	r2,0(r3)
  }

  return dev;
 812e954:	e0bffe17 	ldw	r2,-8(fp)

}
 812e958:	e037883a 	mov	sp,fp
 812e95c:	dfc00117 	ldw	ra,4(sp)
 812e960:	df000017 	ldw	fp,0(sp)
 812e964:	dec00204 	addi	sp,sp,8
 812e968:	f800283a 	ret

0812e96c <altera_avalon_mailbox_close>:
 * altera_avalon_mailbox_close - Does nothing at the moment, but included for 
 * completeness
 *
 */
void altera_avalon_mailbox_close (alt_mailbox_dev* dev)
{
 812e96c:	defffe04 	addi	sp,sp,-8
 812e970:	df000115 	stw	fp,4(sp)
 812e974:	df000104 	addi	fp,sp,4
 812e978:	e13fff15 	stw	r4,-4(fp)
  return;
}
 812e97c:	e037883a 	mov	sp,fp
 812e980:	df000017 	ldw	fp,0(sp)
 812e984:	dec00104 	addi	sp,sp,4
 812e988:	f800283a 	ret

0812e98c <altera_avalon_mailbox_post>:
 * 
 * Post a message to the mailbox
 *
 */
int altera_avalon_mailbox_post (alt_mailbox_dev* dev, alt_u32 msg)
{
 812e98c:	defff904 	addi	sp,sp,-28
 812e990:	dfc00615 	stw	ra,24(sp)
 812e994:	df000515 	stw	fp,20(sp)
 812e998:	df000504 	addi	fp,sp,20
 812e99c:	e13ffe15 	stw	r4,-8(fp)
 812e9a0:	e17fff15 	stw	r5,-4(fp)
  int ret_code = 0;
 812e9a4:	e03ffd15 	stw	zero,-12(fp)
  *   Claim the Mutex on the write pointer 
  *
  *   The mutex function takes care of the thread sempahore if running
  *   in a multi-threaded environment
  */
  altera_avalon_mutex_lock( &dev->write_mutex, 1 );
 812e9a8:	e0bffe17 	ldw	r2,-8(fp)
 812e9ac:	11000704 	addi	r4,r2,28
 812e9b0:	01400044 	movi	r5,1
 812e9b4:	812ed6c0 	call	812ed6c <altera_avalon_mutex_lock>

  temp = (alt_u32 *) IORD(dev->write_ptr, 0);
 812e9b8:	e0bffe17 	ldw	r2,-8(fp)
 812e9bc:	10800317 	ldw	r2,12(r2)
 812e9c0:	10800037 	ldwio	r2,0(r2)
 812e9c4:	e0bffc15 	stw	r2,-16(fp)
  next_write = alt_mailbox_increment_ptr(dev, temp);
 812e9c8:	e13ffe17 	ldw	r4,-8(fp)
 812e9cc:	e17ffc17 	ldw	r5,-16(fp)
 812e9d0:	812ea480 	call	812ea48 <alt_mailbox_increment_ptr>
 812e9d4:	e0bffb15 	stw	r2,-20(fp)

  if (next_write == ((alt_u32 *)IORD(dev->read_ptr, 0)) )
 812e9d8:	e0bffe17 	ldw	r2,-8(fp)
 812e9dc:	10800417 	ldw	r2,16(r2)
 812e9e0:	10800037 	ldwio	r2,0(r2)
 812e9e4:	1007883a 	mov	r3,r2
 812e9e8:	e0bffb17 	ldw	r2,-20(fp)
 812e9ec:	1880061e 	bne	r3,r2,812ea08 <altera_avalon_mailbox_post+0x7c>
  {
    ALT_ERRNO = EWOULDBLOCK;
 812e9f0:	812e8b40 	call	812e8b4 <alt_get_errno>
 812e9f4:	00c002c4 	movi	r3,11
 812e9f8:	10c00015 	stw	r3,0(r2)
    ret_code = -EWOULDBLOCK;
 812e9fc:	00bffd44 	movi	r2,-11
 812ea00:	e0bffd15 	stw	r2,-12(fp)
 812ea04:	00000706 	br	812ea24 <altera_avalon_mailbox_post+0x98>
  }
  else
  {
    IOWR(temp, 0, msg);
 812ea08:	e0bffc17 	ldw	r2,-16(fp)
 812ea0c:	e0ffff17 	ldw	r3,-4(fp)
 812ea10:	10c00035 	stwio	r3,0(r2)
    IOWR((alt_u32)(dev->write_ptr), 0, (alt_u32)next_write);
 812ea14:	e0bffe17 	ldw	r2,-8(fp)
 812ea18:	10800317 	ldw	r2,12(r2)
 812ea1c:	e0fffb17 	ldw	r3,-20(fp)
 812ea20:	10c00035 	stwio	r3,0(r2)
  }

  altera_avalon_mutex_unlock( &dev->write_mutex );
 812ea24:	e0bffe17 	ldw	r2,-8(fp)
 812ea28:	11000704 	addi	r4,r2,28
 812ea2c:	812edec0 	call	812edec <altera_avalon_mutex_unlock>

  return ret_code;
 812ea30:	e0bffd17 	ldw	r2,-12(fp)

}
 812ea34:	e037883a 	mov	sp,fp
 812ea38:	dfc00117 	ldw	ra,4(sp)
 812ea3c:	df000017 	ldw	fp,0(sp)
 812ea40:	dec00204 	addi	sp,sp,8
 812ea44:	f800283a 	ret

0812ea48 <alt_mailbox_increment_ptr>:
 *
 * Increment one of the pointers and if that would take it beyond the end
 * of the shared memory put it at the start
 */
static inline alt_u32* alt_mailbox_increment_ptr(alt_mailbox_dev* dev, alt_u32* ptr)
{
 812ea48:	defffd04 	addi	sp,sp,-12
 812ea4c:	df000215 	stw	fp,8(sp)
 812ea50:	df000204 	addi	fp,sp,8
 812ea54:	e13ffe15 	stw	r4,-8(fp)
 812ea58:	e17fff15 	stw	r5,-4(fp)
  ptr += 1;
 812ea5c:	e0bfff17 	ldw	r2,-4(fp)
 812ea60:	10800104 	addi	r2,r2,4
 812ea64:	e0bfff15 	stw	r2,-4(fp)

  if (ptr > dev->mailbox_mem_end_ptr)
 812ea68:	e0bffe17 	ldw	r2,-8(fp)
 812ea6c:	10c00617 	ldw	r3,24(r2)
 812ea70:	e0bfff17 	ldw	r2,-4(fp)
 812ea74:	1880032e 	bgeu	r3,r2,812ea84 <alt_mailbox_increment_ptr+0x3c>
  {
    ptr = dev->mailbox_mem_start_ptr;
 812ea78:	e0bffe17 	ldw	r2,-8(fp)
 812ea7c:	10800517 	ldw	r2,20(r2)
 812ea80:	e0bfff15 	stw	r2,-4(fp)
  }

  return ptr;
 812ea84:	e0bfff17 	ldw	r2,-4(fp)
}
 812ea88:	e037883a 	mov	sp,fp
 812ea8c:	df000017 	ldw	fp,0(sp)
 812ea90:	dec00104 	addi	sp,sp,4
 812ea94:	f800283a 	ret

0812ea98 <altera_avalon_mailbox_pend>:
 * 
 * Block until a message is available in the mailbox
 *
 */
alt_u32 altera_avalon_mailbox_pend (alt_mailbox_dev* dev)
{
 812ea98:	defffa04 	addi	sp,sp,-24
 812ea9c:	dfc00515 	stw	ra,20(sp)
 812eaa0:	df000415 	stw	fp,16(sp)
 812eaa4:	dc000315 	stw	r16,12(sp)
 812eaa8:	df000304 	addi	fp,sp,12
 812eaac:	e13fff15 	stw	r4,-4(fp)
  *   Claim the Mutex on the read pointer
  *
  *   The mutex function takes care of the thread sempahore if running
  *   in a multi-threaded environment
  */
  altera_avalon_mutex_lock( &dev->read_mutex, 1 );
 812eab0:	e0bfff17 	ldw	r2,-4(fp)
 812eab4:	11000b04 	addi	r4,r2,44
 812eab8:	01400044 	movi	r5,1
 812eabc:	812ed6c0 	call	812ed6c <altera_avalon_mutex_lock>

  temp = (alt_u32 *)IORD(dev->read_ptr, 0);
 812eac0:	e0bfff17 	ldw	r2,-4(fp)
 812eac4:	10800417 	ldw	r2,16(r2)
 812eac8:	10800037 	ldwio	r2,0(r2)
 812eacc:	e0bffd15 	stw	r2,-12(fp)

  while ( (alt_u32 *)(IORD(dev->write_ptr, 0)) == temp );
 812ead0:	e0bfff17 	ldw	r2,-4(fp)
 812ead4:	10800317 	ldw	r2,12(r2)
 812ead8:	10800037 	ldwio	r2,0(r2)
 812eadc:	1007883a 	mov	r3,r2
 812eae0:	e0bffd17 	ldw	r2,-12(fp)
 812eae4:	18bffa26 	beq	r3,r2,812ead0 <altera_avalon_mailbox_pend+0x38>

  msg = IORD(temp, 0);
 812eae8:	e0bffd17 	ldw	r2,-12(fp)
 812eaec:	10800037 	ldwio	r2,0(r2)
 812eaf0:	e0bffe15 	stw	r2,-8(fp)

  IOWR( (alt_u32)(dev->read_ptr), 0,
 812eaf4:	e0bfff17 	ldw	r2,-4(fp)
 812eaf8:	10800417 	ldw	r2,16(r2)
 812eafc:	1021883a 	mov	r16,r2
 812eb00:	e13fff17 	ldw	r4,-4(fp)
 812eb04:	e17ffd17 	ldw	r5,-12(fp)
 812eb08:	812ea480 	call	812ea48 <alt_mailbox_increment_ptr>
 812eb0c:	1007883a 	mov	r3,r2
 812eb10:	8005883a 	mov	r2,r16
 812eb14:	10c00035 	stwio	r3,0(r2)
    (alt_u32)(alt_mailbox_increment_ptr(dev, temp)) );

  altera_avalon_mutex_unlock( &dev->read_mutex );
 812eb18:	e0bfff17 	ldw	r2,-4(fp)
 812eb1c:	11000b04 	addi	r4,r2,44
 812eb20:	812edec0 	call	812edec <altera_avalon_mutex_unlock>

  return msg;
 812eb24:	e0bffe17 	ldw	r2,-8(fp)

}
 812eb28:	e037883a 	mov	sp,fp
 812eb2c:	dfc00217 	ldw	ra,8(sp)
 812eb30:	df000117 	ldw	fp,4(sp)
 812eb34:	dc000017 	ldw	r16,0(sp)
 812eb38:	dec00304 	addi	sp,sp,12
 812eb3c:	f800283a 	ret

0812eb40 <altera_avalon_mailbox_get>:
 * If a message is available in the mailbox return it otherwise return NULL
 * i.e. this is Non-Blocking
 *
 */
alt_u32 altera_avalon_mailbox_get (alt_mailbox_dev* dev, int* err)
{
 812eb40:	defff904 	addi	sp,sp,-28
 812eb44:	dfc00615 	stw	ra,24(sp)
 812eb48:	df000515 	stw	fp,20(sp)
 812eb4c:	dc000415 	stw	r16,16(sp)
 812eb50:	df000404 	addi	fp,sp,16
 812eb54:	e13ffe15 	stw	r4,-8(fp)
 812eb58:	e17fff15 	stw	r5,-4(fp)
  alt_u32 msg;
  alt_u32* temp;
  *err = 0;
 812eb5c:	e0bfff17 	ldw	r2,-4(fp)
 812eb60:	10000015 	stw	zero,0(r2)
  *   Claim the Mutex on the read pointer 
  *
  *   The mutex function takes care of the thread sempahore if running
  *   in a multi-threaded environment
  */
  altera_avalon_mutex_lock( &dev->read_mutex, 1 );
 812eb64:	e0bffe17 	ldw	r2,-8(fp)
 812eb68:	11000b04 	addi	r4,r2,44
 812eb6c:	01400044 	movi	r5,1
 812eb70:	812ed6c0 	call	812ed6c <altera_avalon_mutex_lock>

  temp = (alt_u32 *)IORD(dev->read_ptr, 0);
 812eb74:	e0bffe17 	ldw	r2,-8(fp)
 812eb78:	10800417 	ldw	r2,16(r2)
 812eb7c:	10800037 	ldwio	r2,0(r2)
 812eb80:	e0bffc15 	stw	r2,-16(fp)

  if ( (alt_u32 *)(IORD(dev->write_ptr, 0)) == temp )
 812eb84:	e0bffe17 	ldw	r2,-8(fp)
 812eb88:	10800317 	ldw	r2,12(r2)
 812eb8c:	10800037 	ldwio	r2,0(r2)
 812eb90:	1007883a 	mov	r3,r2
 812eb94:	e0bffc17 	ldw	r2,-16(fp)
 812eb98:	1880091e 	bne	r3,r2,812ebc0 <altera_avalon_mailbox_get+0x80>
  {
    *err = -EWOULDBLOCK;
 812eb9c:	e0ffff17 	ldw	r3,-4(fp)
 812eba0:	00bffd44 	movi	r2,-11
 812eba4:	18800015 	stw	r2,0(r3)
    ALT_ERRNO = EWOULDBLOCK;
 812eba8:	812e8b40 	call	812e8b4 <alt_get_errno>
 812ebac:	1007883a 	mov	r3,r2
 812ebb0:	008002c4 	movi	r2,11
 812ebb4:	18800015 	stw	r2,0(r3)
    msg = 0;
 812ebb8:	e03ffd15 	stw	zero,-12(fp)
 812ebbc:	00000c06 	br	812ebf0 <altera_avalon_mailbox_get+0xb0>
  }
  else
  {
    msg = IORD(temp, 0);
 812ebc0:	e0bffc17 	ldw	r2,-16(fp)
 812ebc4:	10800037 	ldwio	r2,0(r2)
 812ebc8:	e0bffd15 	stw	r2,-12(fp)
    IOWR(dev->read_ptr, 0,
 812ebcc:	e0bffe17 	ldw	r2,-8(fp)
 812ebd0:	10800417 	ldw	r2,16(r2)
 812ebd4:	1021883a 	mov	r16,r2
 812ebd8:	e13ffe17 	ldw	r4,-8(fp)
 812ebdc:	e17ffc17 	ldw	r5,-16(fp)
 812ebe0:	812ea480 	call	812ea48 <alt_mailbox_increment_ptr>
 812ebe4:	1007883a 	mov	r3,r2
 812ebe8:	8005883a 	mov	r2,r16
 812ebec:	10c00035 	stwio	r3,0(r2)
      (alt_u32)(alt_mailbox_increment_ptr(dev, temp)) );
  }

  altera_avalon_mutex_unlock( &dev->read_mutex );
 812ebf0:	e0bffe17 	ldw	r2,-8(fp)
 812ebf4:	11000b04 	addi	r4,r2,44
 812ebf8:	812edec0 	call	812edec <altera_avalon_mutex_unlock>

  return msg;
 812ebfc:	e0bffd17 	ldw	r2,-12(fp)

}
 812ec00:	e037883a 	mov	sp,fp
 812ec04:	dfc00217 	ldw	ra,8(sp)
 812ec08:	df000117 	ldw	fp,4(sp)
 812ec0c:	dc000017 	ldw	r16,0(sp)
 812ec10:	dec00304 	addi	sp,sp,12
 812ec14:	f800283a 	ret

0812ec18 <alt_mutex_trylock>:
 *
 * returns 0 on success -1 otherwise
 *
 */
static int alt_mutex_trylock( alt_mutex_dev* dev, alt_u32 value )
{
 812ec18:	defff904 	addi	sp,sp,-28
 812ec1c:	df000615 	stw	fp,24(sp)
 812ec20:	df000604 	addi	fp,sp,24
 812ec24:	e13ffe15 	stw	r4,-8(fp)
 812ec28:	e17fff15 	stw	r5,-4(fp)
  alt_u32 id, data, check;
  int ret_code = -1;
 812ec2c:	00bfffc4 	movi	r2,-1
 812ec30:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_READ_CPUID(id);
 812ec34:	0005317a 	rdctl	r2,cpuid
 812ec38:	e0bffd15 	stw	r2,-12(fp)

  /* the data we want the mutex to hold */
  data = (id << ALTERA_AVALON_MUTEX_MUTEX_OWNER_OFST) | value;
 812ec3c:	e0bffd17 	ldw	r2,-12(fp)
 812ec40:	1006943a 	slli	r3,r2,16
 812ec44:	e0bfff17 	ldw	r2,-4(fp)
 812ec48:	1884b03a 	or	r2,r3,r2
 812ec4c:	e0bffc15 	stw	r2,-16(fp)

  /* attempt to write to the mutex */
  IOWR_ALTERA_AVALON_MUTEX_MUTEX(dev->mutex_base, data);
 812ec50:	e0bffe17 	ldw	r2,-8(fp)
 812ec54:	10800317 	ldw	r2,12(r2)
 812ec58:	e0fffc17 	ldw	r3,-16(fp)
 812ec5c:	10c00035 	stwio	r3,0(r2)
  
  check = IORD_ALTERA_AVALON_MUTEX_MUTEX(dev->mutex_base);
 812ec60:	e0bffe17 	ldw	r2,-8(fp)
 812ec64:	10800317 	ldw	r2,12(r2)
 812ec68:	10800037 	ldwio	r2,0(r2)
 812ec6c:	e0bffb15 	stw	r2,-20(fp)

  if ( check == data)
 812ec70:	e0fffb17 	ldw	r3,-20(fp)
 812ec74:	e0bffc17 	ldw	r2,-16(fp)
 812ec78:	1880011e 	bne	r3,r2,812ec80 <alt_mutex_trylock+0x68>
  {
    ret_code = 0;
 812ec7c:	e03ffa15 	stw	zero,-24(fp)
  }

  return ret_code;
 812ec80:	e0bffa17 	ldw	r2,-24(fp)
}
 812ec84:	e037883a 	mov	sp,fp
 812ec88:	df000017 	ldw	fp,0(sp)
 812ec8c:	dec00104 	addi	sp,sp,4
 812ec90:	f800283a 	ret

0812ec94 <altera_avalon_mutex_open>:
 * Search the list of registered mutexes for one with the supplied name.
 *
 * The return value will be NULL on failure, and non-NULL otherwise.
 */
alt_mutex_dev* altera_avalon_mutex_open (const char* name)
{
 812ec94:	defffc04 	addi	sp,sp,-16
 812ec98:	dfc00315 	stw	ra,12(sp)
 812ec9c:	df000215 	stw	fp,8(sp)
 812eca0:	df000204 	addi	fp,sp,8
 812eca4:	e13fff15 	stw	r4,-4(fp)
  alt_mutex_dev* dev;

  dev = (alt_mutex_dev*) alt_find_dev (name, &alt_mutex_list);
 812eca8:	e13fff17 	ldw	r4,-4(fp)
 812ecac:	d1601304 	addi	r5,gp,-32692
 812ecb0:	81307fc0 	call	81307fc <alt_find_dev>
 812ecb4:	e0bffe15 	stw	r2,-8(fp)

  if (NULL == dev)
 812ecb8:	e0bffe17 	ldw	r2,-8(fp)
 812ecbc:	1004c03a 	cmpne	r2,r2,zero
 812ecc0:	1000041e 	bne	r2,zero,812ecd4 <altera_avalon_mutex_open+0x40>
  {
    ALT_ERRNO = ENODEV;
 812ecc4:	812ecec0 	call	812ecec <alt_get_errno>
 812ecc8:	1007883a 	mov	r3,r2
 812eccc:	008004c4 	movi	r2,19
 812ecd0:	18800015 	stw	r2,0(r3)
  }

  return dev;
 812ecd4:	e0bffe17 	ldw	r2,-8(fp)
}
 812ecd8:	e037883a 	mov	sp,fp
 812ecdc:	dfc00117 	ldw	ra,4(sp)
 812ece0:	df000017 	ldw	fp,0(sp)
 812ece4:	dec00204 	addi	sp,sp,8
 812ece8:	f800283a 	ret

0812ecec <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 812ecec:	defffd04 	addi	sp,sp,-12
 812ecf0:	dfc00215 	stw	ra,8(sp)
 812ecf4:	df000115 	stw	fp,4(sp)
 812ecf8:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 812ecfc:	008204f4 	movhi	r2,2067
 812ed00:	108e5d04 	addi	r2,r2,14708
 812ed04:	10800017 	ldw	r2,0(r2)
 812ed08:	1005003a 	cmpeq	r2,r2,zero
 812ed0c:	1000061e 	bne	r2,zero,812ed28 <alt_get_errno+0x3c>
 812ed10:	008204f4 	movhi	r2,2067
 812ed14:	108e5d04 	addi	r2,r2,14708
 812ed18:	10800017 	ldw	r2,0(r2)
 812ed1c:	103ee83a 	callr	r2
 812ed20:	e0bfff15 	stw	r2,-4(fp)
 812ed24:	00000306 	br	812ed34 <alt_get_errno+0x48>
 812ed28:	008204f4 	movhi	r2,2067
 812ed2c:	10956404 	addi	r2,r2,21904
 812ed30:	e0bfff15 	stw	r2,-4(fp)
 812ed34:	e0bfff17 	ldw	r2,-4(fp)
}
 812ed38:	e037883a 	mov	sp,fp
 812ed3c:	dfc00117 	ldw	ra,4(sp)
 812ed40:	df000017 	ldw	fp,0(sp)
 812ed44:	dec00204 	addi	sp,sp,8
 812ed48:	f800283a 	ret

0812ed4c <altera_avalon_mutex_close>:
 * altera_avalon_mutex_close - Does nothing at the moment, but included for 
 * completeness
 *
 */
void altera_avalon_mutex_close (alt_mutex_dev* dev)
{
 812ed4c:	defffe04 	addi	sp,sp,-8
 812ed50:	df000115 	stw	fp,4(sp)
 812ed54:	df000104 	addi	fp,sp,4
 812ed58:	e13fff15 	stw	r4,-4(fp)
  return;
}
 812ed5c:	e037883a 	mov	sp,fp
 812ed60:	df000017 	ldw	fp,0(sp)
 812ed64:	dec00104 	addi	sp,sp,4
 812ed68:	f800283a 	ret

0812ed6c <altera_avalon_mutex_lock>:
/*
 * altera_avalon_mutex_lock - Lock the hardware mutex
 *
 */
void altera_avalon_mutex_lock( alt_mutex_dev* dev, alt_u32 value )
{
 812ed6c:	defffc04 	addi	sp,sp,-16
 812ed70:	dfc00315 	stw	ra,12(sp)
 812ed74:	df000215 	stw	fp,8(sp)
 812ed78:	df000204 	addi	fp,sp,8
 812ed7c:	e13ffe15 	stw	r4,-8(fp)
 812ed80:	e17fff15 	stw	r5,-4(fp)
   * semaphore. This ensures that reading from the device is thread-safe.
   */

  ALT_SEM_PEND (dev->lock, 0);

  while ( alt_mutex_trylock( dev, value ) != 0);
 812ed84:	e13ffe17 	ldw	r4,-8(fp)
 812ed88:	e17fff17 	ldw	r5,-4(fp)
 812ed8c:	812ec180 	call	812ec18 <alt_mutex_trylock>
 812ed90:	1004c03a 	cmpne	r2,r2,zero
 812ed94:	103ffb1e 	bne	r2,zero,812ed84 <altera_avalon_mutex_lock+0x18>
}
 812ed98:	e037883a 	mov	sp,fp
 812ed9c:	dfc00117 	ldw	ra,4(sp)
 812eda0:	df000017 	ldw	fp,0(sp)
 812eda4:	dec00204 	addi	sp,sp,8
 812eda8:	f800283a 	ret

0812edac <altera_avalon_mutex_trylock>:
 *
 * returns 0 on success -1 otherwise
 *
 */
int altera_avalon_mutex_trylock( alt_mutex_dev* dev, alt_u32 value )
{
 812edac:	defffb04 	addi	sp,sp,-20
 812edb0:	dfc00415 	stw	ra,16(sp)
 812edb4:	df000315 	stw	fp,12(sp)
 812edb8:	df000304 	addi	fp,sp,12
 812edbc:	e13ffe15 	stw	r4,-8(fp)
 812edc0:	e17fff15 	stw	r5,-4(fp)
  int ret_code;

  ALT_SEM_PEND (dev->lock, 0);

  ret_code = alt_mutex_trylock( dev, value);
 812edc4:	e13ffe17 	ldw	r4,-8(fp)
 812edc8:	e17fff17 	ldw	r5,-4(fp)
 812edcc:	812ec180 	call	812ec18 <alt_mutex_trylock>
 812edd0:	e0bffd15 	stw	r2,-12(fp)
  if (ret_code)
  {
    ALT_SEM_POST (dev->lock);
  }

  return ret_code;
 812edd4:	e0bffd17 	ldw	r2,-12(fp)
}
 812edd8:	e037883a 	mov	sp,fp
 812eddc:	dfc00117 	ldw	ra,4(sp)
 812ede0:	df000017 	ldw	fp,0(sp)
 812ede4:	dec00204 	addi	sp,sp,8
 812ede8:	f800283a 	ret

0812edec <altera_avalon_mutex_unlock>:
 * This function does not check that you own the Mutex if you try to release
 * a Mutex you do not own the behaviour is undefined
 *
 */
void altera_avalon_mutex_unlock( alt_mutex_dev* dev )
{
 812edec:	defffd04 	addi	sp,sp,-12
 812edf0:	df000215 	stw	fp,8(sp)
 812edf4:	df000204 	addi	fp,sp,8
 812edf8:	e13fff15 	stw	r4,-4(fp)
  alt_u32 id;
  NIOS2_READ_CPUID(id);
 812edfc:	0005317a 	rdctl	r2,cpuid
 812ee00:	e0bffe15 	stw	r2,-8(fp)

  /*
  * This Mutex has been claimed and released since Reset so clear the Reset bit
  * This MUST happen before we release the MUTEX
  */
  IOWR_ALTERA_AVALON_MUTEX_RESET(dev->mutex_base, 
 812ee04:	e0bfff17 	ldw	r2,-4(fp)
 812ee08:	10800317 	ldw	r2,12(r2)
 812ee0c:	10800104 	addi	r2,r2,4
 812ee10:	1007883a 	mov	r3,r2
 812ee14:	00800044 	movi	r2,1
 812ee18:	18800035 	stwio	r2,0(r3)
                                  ALTERA_AVALON_MUTEX_RESET_RESET_MSK);
  IOWR_ALTERA_AVALON_MUTEX_MUTEX(dev->mutex_base, 
 812ee1c:	e0bfff17 	ldw	r2,-4(fp)
 812ee20:	11000317 	ldw	r4,12(r2)
 812ee24:	e0bffe17 	ldw	r2,-8(fp)
 812ee28:	1004943a 	slli	r2,r2,16
 812ee2c:	1007883a 	mov	r3,r2
 812ee30:	2005883a 	mov	r2,r4
 812ee34:	10c00035 	stwio	r3,0(r2)

  /*
  * Now that access to the hardware Mutex is complete, release the thread lock
  */
  ALT_SEM_POST (dev->lock);
}
 812ee38:	e037883a 	mov	sp,fp
 812ee3c:	df000017 	ldw	fp,0(sp)
 812ee40:	dec00104 	addi	sp,sp,4
 812ee44:	f800283a 	ret

0812ee48 <altera_avalon_mutex_is_mine>:
 * altera_avalon_mutex_is_mine - Do I own the Mutex?
 *
 *  returns non zero if the mutex is owned by this CPU
 */
int altera_avalon_mutex_is_mine( alt_mutex_dev* dev )
{
 812ee48:	defff904 	addi	sp,sp,-28
 812ee4c:	df000615 	stw	fp,24(sp)
 812ee50:	df000604 	addi	fp,sp,24
 812ee54:	e13fff15 	stw	r4,-4(fp)
  alt_u32 id, data, owner, value;
  int ret_code = 0;
 812ee58:	e03ffa15 	stw	zero,-24(fp)

  NIOS2_READ_CPUID(id);
 812ee5c:	0005317a 	rdctl	r2,cpuid
 812ee60:	e0bffe15 	stw	r2,-8(fp)

  /* retrieve the contents of the mutex */
  data = IORD_ALTERA_AVALON_MUTEX_MUTEX(dev->mutex_base);
 812ee64:	e0bfff17 	ldw	r2,-4(fp)
 812ee68:	10800317 	ldw	r2,12(r2)
 812ee6c:	10800037 	ldwio	r2,0(r2)
 812ee70:	e0bffd15 	stw	r2,-12(fp)
  owner = (data & ALTERA_AVALON_MUTEX_MUTEX_OWNER_MSK) >> 
 812ee74:	e0bffd17 	ldw	r2,-12(fp)
 812ee78:	10bfffec 	andhi	r2,r2,65535
 812ee7c:	1004d43a 	srli	r2,r2,16
 812ee80:	e0bffc15 	stw	r2,-16(fp)
              ALTERA_AVALON_MUTEX_MUTEX_OWNER_OFST;

  if (owner == id) 
 812ee84:	e0fffc17 	ldw	r3,-16(fp)
 812ee88:	e0bffe17 	ldw	r2,-8(fp)
 812ee8c:	1880081e 	bne	r3,r2,812eeb0 <altera_avalon_mutex_is_mine+0x68>
  {
    value = (data & ALTERA_AVALON_MUTEX_MUTEX_VALUE_MSK) >> 
 812ee90:	e0bffd17 	ldw	r2,-12(fp)
 812ee94:	10bfffcc 	andi	r2,r2,65535
 812ee98:	e0bffb15 	stw	r2,-20(fp)
                  ALTERA_AVALON_MUTEX_MUTEX_VALUE_OFST;
    if (value != 0)
 812ee9c:	e0bffb17 	ldw	r2,-20(fp)
 812eea0:	1005003a 	cmpeq	r2,r2,zero
 812eea4:	1000021e 	bne	r2,zero,812eeb0 <altera_avalon_mutex_is_mine+0x68>
    {
      ret_code = 1;
 812eea8:	00800044 	movi	r2,1
 812eeac:	e0bffa15 	stw	r2,-24(fp)
    }
  }

  return ret_code;
 812eeb0:	e0bffa17 	ldw	r2,-24(fp)
}
 812eeb4:	e037883a 	mov	sp,fp
 812eeb8:	df000017 	ldw	fp,0(sp)
 812eebc:	dec00104 	addi	sp,sp,4
 812eec0:	f800283a 	ret

0812eec4 <altera_avalon_mutex_first_lock>:
 *
 * Has this Mutex been released since reset if not return 1
 * otherwise return 0
 */
int altera_avalon_mutex_first_lock( alt_mutex_dev* dev )
{
 812eec4:	defffc04 	addi	sp,sp,-16
 812eec8:	df000315 	stw	fp,12(sp)
 812eecc:	df000304 	addi	fp,sp,12
 812eed0:	e13fff15 	stw	r4,-4(fp)
  alt_u32 data;
  int ret_code = 0;
 812eed4:	e03ffd15 	stw	zero,-12(fp)

  data = IORD_ALTERA_AVALON_MUTEX_RESET(dev->mutex_base);
 812eed8:	e0bfff17 	ldw	r2,-4(fp)
 812eedc:	10800317 	ldw	r2,12(r2)
 812eee0:	10800104 	addi	r2,r2,4
 812eee4:	10800037 	ldwio	r2,0(r2)
 812eee8:	e0bffe15 	stw	r2,-8(fp)

  if (data & ALTERA_AVALON_MUTEX_RESET_RESET_MSK) 
 812eeec:	e0bffe17 	ldw	r2,-8(fp)
 812eef0:	1080004c 	andi	r2,r2,1
 812eef4:	10803fcc 	andi	r2,r2,255
 812eef8:	1005003a 	cmpeq	r2,r2,zero
 812eefc:	1000021e 	bne	r2,zero,812ef08 <altera_avalon_mutex_first_lock+0x44>
  {
    ret_code = 1;
 812ef00:	00800044 	movi	r2,1
 812ef04:	e0bffd15 	stw	r2,-12(fp)
  }

  return ret_code;
 812ef08:	e0bffd17 	ldw	r2,-12(fp)
}
 812ef0c:	e037883a 	mov	sp,fp
 812ef10:	df000017 	ldw	fp,0(sp)
 812ef14:	dec00104 	addi	sp,sp,4
 812ef18:	f800283a 	ret

0812ef1c <alt_up_pixel_buffer_dma_open_dev>:

#include "altera_up_avalon_video_pixel_buffer_dma.h"

#define ABS(x)	((x >= 0) ? (x) : (-(x)))

alt_up_pixel_buffer_dma_dev* alt_up_pixel_buffer_dma_open_dev(const char* name) {
 812ef1c:	defffc04 	addi	sp,sp,-16
 812ef20:	dfc00315 	stw	ra,12(sp)
 812ef24:	df000215 	stw	fp,8(sp)
 812ef28:	df000204 	addi	fp,sp,8
 812ef2c:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_pixel_buffer_dma_dev *dev = (alt_up_pixel_buffer_dma_dev*)alt_find_dev(name, &alt_dev_list);
 812ef30:	e13fff17 	ldw	r4,-4(fp)
 812ef34:	014204f4 	movhi	r5,2067
 812ef38:	294e5a04 	addi	r5,r5,14696
 812ef3c:	81307fc0 	call	81307fc <alt_find_dev>
 812ef40:	e0bffe15 	stw	r2,-8(fp)

  return dev;
 812ef44:	e0bffe17 	ldw	r2,-8(fp)
}
 812ef48:	e037883a 	mov	sp,fp
 812ef4c:	dfc00117 	ldw	ra,4(sp)
 812ef50:	df000017 	ldw	fp,0(sp)
 812ef54:	dec00204 	addi	sp,sp,8
 812ef58:	f800283a 	ret

0812ef5c <alt_up_pixel_buffer_dma_draw>:

int alt_up_pixel_buffer_dma_draw(alt_up_pixel_buffer_dma_dev *pixel_buffer, unsigned int color, unsigned int x, unsigned int y)
/* This function draws a pixel to the back buffer.
 */
{
 812ef5c:	defff904 	addi	sp,sp,-28
 812ef60:	df000615 	stw	fp,24(sp)
 812ef64:	df000604 	addi	fp,sp,24
 812ef68:	e13ffb15 	stw	r4,-20(fp)
 812ef6c:	e17ffc15 	stw	r5,-16(fp)
 812ef70:	e1bffd15 	stw	r6,-12(fp)
 812ef74:	e1fffe15 	stw	r7,-8(fp)
	// boundary check
	if (x >= pixel_buffer->x_resolution || y >= pixel_buffer->y_resolution )
 812ef78:	e0bffb17 	ldw	r2,-20(fp)
 812ef7c:	10c00f17 	ldw	r3,60(r2)
 812ef80:	e0bffd17 	ldw	r2,-12(fp)
 812ef84:	10c0042e 	bgeu	r2,r3,812ef98 <alt_up_pixel_buffer_dma_draw+0x3c>
 812ef88:	e0bffb17 	ldw	r2,-20(fp)
 812ef8c:	10c01017 	ldw	r3,64(r2)
 812ef90:	e0bffe17 	ldw	r2,-8(fp)
 812ef94:	10c00336 	bltu	r2,r3,812efa4 <alt_up_pixel_buffer_dma_draw+0x48>
		return -1;
 812ef98:	00bfffc4 	movi	r2,-1
 812ef9c:	e0bfff15 	stw	r2,-4(fp)
 812efa0:	00005106 	br	812f0e8 <alt_up_pixel_buffer_dma_draw+0x18c>

	unsigned int addr = 0;
 812efa4:	e03ffa15 	stw	zero,-24(fp)
	/* Check the mode VGA Pixel Buffer is using. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
 812efa8:	e0bffb17 	ldw	r2,-20(fp)
 812efac:	10800d17 	ldw	r2,52(r2)
 812efb0:	1004c03a 	cmpne	r2,r2,zero
 812efb4:	1000151e 	bne	r2,zero,812f00c <alt_up_pixel_buffer_dma_draw+0xb0>
		/* For X-Y addressing mode, the address format is | unused | Y | X |. So shift bits for coordinates X and Y into their respective locations. */
		addr |= ((x & pixel_buffer->x_coord_mask) << pixel_buffer->x_coord_offset);
 812efb8:	e0bffb17 	ldw	r2,-20(fp)
 812efbc:	10c01217 	ldw	r3,72(r2)
 812efc0:	e0bffd17 	ldw	r2,-12(fp)
 812efc4:	1886703a 	and	r3,r3,r2
 812efc8:	e0bffb17 	ldw	r2,-20(fp)
 812efcc:	10801117 	ldw	r2,68(r2)
 812efd0:	1886983a 	sll	r3,r3,r2
 812efd4:	e0bffa17 	ldw	r2,-24(fp)
 812efd8:	10c4b03a 	or	r2,r2,r3
 812efdc:	e0bffa15 	stw	r2,-24(fp)
		addr |= ((y & pixel_buffer->y_coord_mask) << pixel_buffer->y_coord_offset);
 812efe0:	e0bffb17 	ldw	r2,-20(fp)
 812efe4:	10c01417 	ldw	r3,80(r2)
 812efe8:	e0bffe17 	ldw	r2,-8(fp)
 812efec:	1886703a 	and	r3,r3,r2
 812eff0:	e0bffb17 	ldw	r2,-20(fp)
 812eff4:	10801317 	ldw	r2,76(r2)
 812eff8:	1886983a 	sll	r3,r3,r2
 812effc:	e0bffa17 	ldw	r2,-24(fp)
 812f000:	10c4b03a 	or	r2,r2,r3
 812f004:	e0bffa15 	stw	r2,-24(fp)
 812f008:	00001706 	br	812f068 <alt_up_pixel_buffer_dma_draw+0x10c>
	} else {
		/* In a consecutive addressing mode, the pixels are stored in consecutive memory locations. So the address of a pixel at (x,y) can be computed as
		 * (y*x_resolution + x).*/
		addr += ((x & pixel_buffer->x_coord_mask) << pixel_buffer->x_coord_offset);
 812f00c:	e0bffb17 	ldw	r2,-20(fp)
 812f010:	10c01217 	ldw	r3,72(r2)
 812f014:	e0bffd17 	ldw	r2,-12(fp)
 812f018:	1886703a 	and	r3,r3,r2
 812f01c:	e0bffb17 	ldw	r2,-20(fp)
 812f020:	10801117 	ldw	r2,68(r2)
 812f024:	1886983a 	sll	r3,r3,r2
 812f028:	e0bffa17 	ldw	r2,-24(fp)
 812f02c:	10c5883a 	add	r2,r2,r3
 812f030:	e0bffa15 	stw	r2,-24(fp)
		addr += (((y & pixel_buffer->y_coord_mask) * pixel_buffer->x_resolution) << pixel_buffer->x_coord_offset);
 812f034:	e0bffb17 	ldw	r2,-20(fp)
 812f038:	10c01417 	ldw	r3,80(r2)
 812f03c:	e0bffe17 	ldw	r2,-8(fp)
 812f040:	1886703a 	and	r3,r3,r2
 812f044:	e0bffb17 	ldw	r2,-20(fp)
 812f048:	10800f17 	ldw	r2,60(r2)
 812f04c:	1887383a 	mul	r3,r3,r2
 812f050:	e0bffb17 	ldw	r2,-20(fp)
 812f054:	10801117 	ldw	r2,68(r2)
 812f058:	1886983a 	sll	r3,r3,r2
 812f05c:	e0bffa17 	ldw	r2,-24(fp)
 812f060:	10c5883a 	add	r2,r2,r3
 812f064:	e0bffa15 	stw	r2,-24(fp)
	}
	/* Now, depending on the color depth, write the pixel color to the specified memory location. */
	if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
 812f068:	e0bffb17 	ldw	r2,-20(fp)
 812f06c:	10800e17 	ldw	r2,56(r2)
 812f070:	10800058 	cmpnei	r2,r2,1
 812f074:	1000081e 	bne	r2,zero,812f098 <alt_up_pixel_buffer_dma_draw+0x13c>
		IOWR_8DIRECT(pixel_buffer->back_buffer_start_address, addr, color);
 812f078:	e0bffb17 	ldw	r2,-20(fp)
 812f07c:	10800c17 	ldw	r2,48(r2)
 812f080:	1007883a 	mov	r3,r2
 812f084:	e0bffa17 	ldw	r2,-24(fp)
 812f088:	1885883a 	add	r2,r3,r2
 812f08c:	e0fffc17 	ldw	r3,-16(fp)
 812f090:	10c00025 	stbio	r3,0(r2)
 812f094:	00001306 	br	812f0e4 <alt_up_pixel_buffer_dma_draw+0x188>
	} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
 812f098:	e0bffb17 	ldw	r2,-20(fp)
 812f09c:	10800e17 	ldw	r2,56(r2)
 812f0a0:	10800098 	cmpnei	r2,r2,2
 812f0a4:	1000081e 	bne	r2,zero,812f0c8 <alt_up_pixel_buffer_dma_draw+0x16c>
		IOWR_16DIRECT(pixel_buffer->back_buffer_start_address, addr, color);
 812f0a8:	e0bffb17 	ldw	r2,-20(fp)
 812f0ac:	10800c17 	ldw	r2,48(r2)
 812f0b0:	1007883a 	mov	r3,r2
 812f0b4:	e0bffa17 	ldw	r2,-24(fp)
 812f0b8:	1885883a 	add	r2,r3,r2
 812f0bc:	e0fffc17 	ldw	r3,-16(fp)
 812f0c0:	10c0002d 	sthio	r3,0(r2)
 812f0c4:	00000706 	br	812f0e4 <alt_up_pixel_buffer_dma_draw+0x188>
	} else {
		IOWR_32DIRECT(pixel_buffer->back_buffer_start_address, addr, color);
 812f0c8:	e0bffb17 	ldw	r2,-20(fp)
 812f0cc:	10800c17 	ldw	r2,48(r2)
 812f0d0:	1007883a 	mov	r3,r2
 812f0d4:	e0bffa17 	ldw	r2,-24(fp)
 812f0d8:	1885883a 	add	r2,r3,r2
 812f0dc:	e0fffc17 	ldw	r3,-16(fp)
 812f0e0:	10c00035 	stwio	r3,0(r2)
	}

	return 0;
 812f0e4:	e03fff15 	stw	zero,-4(fp)
 812f0e8:	e0bfff17 	ldw	r2,-4(fp)
}
 812f0ec:	e037883a 	mov	sp,fp
 812f0f0:	df000017 	ldw	fp,0(sp)
 812f0f4:	dec00104 	addi	sp,sp,4
 812f0f8:	f800283a 	ret

0812f0fc <alt_up_pixel_buffer_dma_change_back_buffer_address>:

int alt_up_pixel_buffer_dma_change_back_buffer_address(alt_up_pixel_buffer_dma_dev *pixel_buffer, unsigned int new_address)
/* This function changes the memory address for the back buffer. */
{
 812f0fc:	defffd04 	addi	sp,sp,-12
 812f100:	df000215 	stw	fp,8(sp)
 812f104:	df000204 	addi	fp,sp,8
 812f108:	e13ffe15 	stw	r4,-8(fp)
 812f10c:	e17fff15 	stw	r5,-4(fp)
	IOWR_32DIRECT(pixel_buffer->base, 4, new_address);
 812f110:	e0bffe17 	ldw	r2,-8(fp)
 812f114:	10800a17 	ldw	r2,40(r2)
 812f118:	10800104 	addi	r2,r2,4
 812f11c:	e0ffff17 	ldw	r3,-4(fp)
 812f120:	10c00035 	stwio	r3,0(r2)
	pixel_buffer->back_buffer_start_address = IORD_32DIRECT(pixel_buffer->base, 4);
 812f124:	e0bffe17 	ldw	r2,-8(fp)
 812f128:	10800a17 	ldw	r2,40(r2)
 812f12c:	10800104 	addi	r2,r2,4
 812f130:	10800037 	ldwio	r2,0(r2)
 812f134:	1007883a 	mov	r3,r2
 812f138:	e0bffe17 	ldw	r2,-8(fp)
 812f13c:	10c00c15 	stw	r3,48(r2)
	return 0;
 812f140:	0005883a 	mov	r2,zero
}
 812f144:	e037883a 	mov	sp,fp
 812f148:	df000017 	ldw	fp,0(sp)
 812f14c:	dec00104 	addi	sp,sp,4
 812f150:	f800283a 	ret

0812f154 <alt_up_pixel_buffer_dma_swap_buffers>:

int alt_up_pixel_buffer_dma_swap_buffers(alt_up_pixel_buffer_dma_dev *pixel_buffer)
/* This function swaps the front and back buffers. At the next refresh cycle the back buffer will be drawn on the screen
 * and will become the front buffer. */
{
 812f154:	defffe04 	addi	sp,sp,-8
 812f158:	df000115 	stw	fp,4(sp)
 812f15c:	df000104 	addi	fp,sp,4
 812f160:	e13fff15 	stw	r4,-4(fp)
	register unsigned int temp = pixel_buffer->back_buffer_start_address;
 812f164:	e0bfff17 	ldw	r2,-4(fp)
 812f168:	11000c17 	ldw	r4,48(r2)
	IOWR_32DIRECT(pixel_buffer->base, 0, 1);
 812f16c:	e0bfff17 	ldw	r2,-4(fp)
 812f170:	10800a17 	ldw	r2,40(r2)
 812f174:	1007883a 	mov	r3,r2
 812f178:	00800044 	movi	r2,1
 812f17c:	18800035 	stwio	r2,0(r3)
	pixel_buffer->back_buffer_start_address = pixel_buffer->buffer_start_address;
 812f180:	e0bfff17 	ldw	r2,-4(fp)
 812f184:	10c00b17 	ldw	r3,44(r2)
 812f188:	e0bfff17 	ldw	r2,-4(fp)
 812f18c:	10c00c15 	stw	r3,48(r2)
	pixel_buffer->buffer_start_address = temp;
 812f190:	e0bfff17 	ldw	r2,-4(fp)
 812f194:	11000b15 	stw	r4,44(r2)
	return 0;
 812f198:	0005883a 	mov	r2,zero
}
 812f19c:	e037883a 	mov	sp,fp
 812f1a0:	df000017 	ldw	fp,0(sp)
 812f1a4:	dec00104 	addi	sp,sp,4
 812f1a8:	f800283a 	ret

0812f1ac <alt_up_pixel_buffer_dma_check_swap_buffers_status>:
int alt_up_pixel_buffer_dma_check_swap_buffers_status(alt_up_pixel_buffer_dma_dev *pixel_buffer)
/* This function checks if the buffer swap has occured. Since the buffer swap only happens after an entire screen is drawn,
 * it is important to wait for this function to return 0 before proceeding to draw on either buffer. When both front and the back buffers
 * have the same address calling the alt_up_pixel_buffer_dma_swap_buffers(...) function and then waiting for this function to return 0, causes your program to
 * wait for the screen to refresh. */
{
 812f1ac:	defffe04 	addi	sp,sp,-8
 812f1b0:	df000115 	stw	fp,4(sp)
 812f1b4:	df000104 	addi	fp,sp,4
 812f1b8:	e13fff15 	stw	r4,-4(fp)
	return (IORD_32DIRECT(pixel_buffer->base, 12) & 0x1);
 812f1bc:	e0bfff17 	ldw	r2,-4(fp)
 812f1c0:	10800a17 	ldw	r2,40(r2)
 812f1c4:	10800304 	addi	r2,r2,12
 812f1c8:	10800037 	ldwio	r2,0(r2)
 812f1cc:	1080004c 	andi	r2,r2,1
}
 812f1d0:	e037883a 	mov	sp,fp
 812f1d4:	df000017 	ldw	fp,0(sp)
 812f1d8:	dec00104 	addi	sp,sp,4
 812f1dc:	f800283a 	ret

0812f1e0 <alt_up_pixel_buffer_dma_clear_screen>:

void alt_up_pixel_buffer_dma_clear_screen(alt_up_pixel_buffer_dma_dev *pixel_buffer, int backbuffer)
/* This function clears the screen by setting each pixel to a black color. */
{
 812f1e0:	defff604 	addi	sp,sp,-40
 812f1e4:	df000915 	stw	fp,36(sp)
 812f1e8:	df000904 	addi	fp,sp,36
 812f1ec:	e13ff715 	stw	r4,-36(fp)
 812f1f0:	e17ff815 	stw	r5,-32(fp)
	register unsigned int addr;
	register unsigned int limit_x, limit_y;
	
	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
 812f1f4:	e0bff817 	ldw	r2,-32(fp)
 812f1f8:	10800058 	cmpnei	r2,r2,1
 812f1fc:	1000041e 	bne	r2,zero,812f210 <alt_up_pixel_buffer_dma_clear_screen+0x30>
		addr = pixel_buffer->back_buffer_start_address;
 812f200:	e0bff717 	ldw	r2,-36(fp)
 812f204:	10800c17 	ldw	r2,48(r2)
 812f208:	e0bfff15 	stw	r2,-4(fp)
 812f20c:	00000306 	br	812f21c <alt_up_pixel_buffer_dma_clear_screen+0x3c>
	else
		addr = pixel_buffer->buffer_start_address;
 812f210:	e0bff717 	ldw	r2,-36(fp)
 812f214:	10800b17 	ldw	r2,44(r2)
 812f218:	e0bfff15 	stw	r2,-4(fp)
	limit_x = pixel_buffer->x_resolution;
 812f21c:	e0bff717 	ldw	r2,-36(fp)
 812f220:	10800f17 	ldw	r2,60(r2)
 812f224:	e0bffe15 	stw	r2,-8(fp)
	/* In 16 and 32-bit color modes we use twice or four times more memory for the display buffer.*/
	if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
 812f228:	e0bff717 	ldw	r2,-36(fp)
 812f22c:	10800e17 	ldw	r2,56(r2)
 812f230:	10800098 	cmpnei	r2,r2,2
 812f234:	1000051e 	bne	r2,zero,812f24c <alt_up_pixel_buffer_dma_clear_screen+0x6c>
		limit_x = limit_x << 1;
 812f238:	e0fffe17 	ldw	r3,-8(fp)
 812f23c:	e0fffe17 	ldw	r3,-8(fp)
 812f240:	18c5883a 	add	r2,r3,r3
 812f244:	e0bffe15 	stw	r2,-8(fp)
 812f248:	00000506 	br	812f260 <alt_up_pixel_buffer_dma_clear_screen+0x80>
	} else {
		limit_x = limit_x << 2;
 812f24c:	e13ffe17 	ldw	r4,-8(fp)
 812f250:	e13ffe17 	ldw	r4,-8(fp)
 812f254:	2105883a 	add	r2,r4,r4
 812f258:	1085883a 	add	r2,r2,r2
 812f25c:	e0bffe15 	stw	r2,-8(fp)
	}	
	limit_y = pixel_buffer->y_resolution;
 812f260:	e0bff717 	ldw	r2,-36(fp)
 812f264:	10801017 	ldw	r2,64(r2)
 812f268:	e0bffd15 	stw	r2,-12(fp)

	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
 812f26c:	e0bff717 	ldw	r2,-36(fp)
 812f270:	10800d17 	ldw	r2,52(r2)
 812f274:	1004c03a 	cmpne	r2,r2,zero
 812f278:	10001e1e 	bne	r2,zero,812f2f4 <alt_up_pixel_buffer_dma_clear_screen+0x114>
		/* Clear the screen when the VGA is set up in an XY addressing mode. */
		register unsigned int x,y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
 812f27c:	e0bff717 	ldw	r2,-36(fp)
 812f280:	10801317 	ldw	r2,76(r2)
 812f284:	e0bffa15 	stw	r2,-24(fp)

		for (y = 0; y < limit_y; y++)
 812f288:	e03ffb15 	stw	zero,-20(fp)
 812f28c:	00001506 	br	812f2e4 <alt_up_pixel_buffer_dma_clear_screen+0x104>
		{
			for (x = 0; x < limit_x; x = x + 4)
 812f290:	e03ffc15 	stw	zero,-16(fp)
 812f294:	00000706 	br	812f2b4 <alt_up_pixel_buffer_dma_clear_screen+0xd4>
			{
				IOWR_32DIRECT(addr, x, 0);
 812f298:	e0ffff17 	ldw	r3,-4(fp)
 812f29c:	e0bffc17 	ldw	r2,-16(fp)
 812f2a0:	1885883a 	add	r2,r3,r2
 812f2a4:	10000035 	stwio	zero,0(r2)
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;

		for (y = 0; y < limit_y; y++)
		{
			for (x = 0; x < limit_x; x = x + 4)
 812f2a8:	e0bffc17 	ldw	r2,-16(fp)
 812f2ac:	10800104 	addi	r2,r2,4
 812f2b0:	e0bffc15 	stw	r2,-16(fp)
 812f2b4:	e0fffc17 	ldw	r3,-16(fp)
 812f2b8:	e13ffe17 	ldw	r4,-8(fp)
 812f2bc:	193ff636 	bltu	r3,r4,812f298 <alt_up_pixel_buffer_dma_clear_screen+0xb8>
			{
				IOWR_32DIRECT(addr, x, 0);
			}
			addr = addr + (1 << offset_y);
 812f2c0:	e0fffa17 	ldw	r3,-24(fp)
 812f2c4:	00800044 	movi	r2,1
 812f2c8:	10c4983a 	sll	r2,r2,r3
 812f2cc:	e0ffff17 	ldw	r3,-4(fp)
 812f2d0:	1887883a 	add	r3,r3,r2
 812f2d4:	e0ffff15 	stw	r3,-4(fp)
		/* Clear the screen when the VGA is set up in an XY addressing mode. */
		register unsigned int x,y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;

		for (y = 0; y < limit_y; y++)
 812f2d8:	e13ffb17 	ldw	r4,-20(fp)
 812f2dc:	21000044 	addi	r4,r4,1
 812f2e0:	e13ffb15 	stw	r4,-20(fp)
 812f2e4:	e0bffb17 	ldw	r2,-20(fp)
 812f2e8:	e0fffd17 	ldw	r3,-12(fp)
 812f2ec:	10ffe836 	bltu	r2,r3,812f290 <alt_up_pixel_buffer_dma_clear_screen+0xb0>
 812f2f0:	00001006 	br	812f334 <alt_up_pixel_buffer_dma_clear_screen+0x154>
			addr = addr + (1 << offset_y);
		}
	} else {
		/* Clear the screen when the VGA is set up in a linear addressing mode. */
		register int x;
		limit_y = limit_x*limit_y;	
 812f2f4:	e13ffd17 	ldw	r4,-12(fp)
 812f2f8:	e0bffe17 	ldw	r2,-8(fp)
 812f2fc:	2089383a 	mul	r4,r4,r2
 812f300:	e13ffd15 	stw	r4,-12(fp)

		for (x = 0; x < limit_y; x = x + 4)
 812f304:	e03ff915 	stw	zero,-28(fp)
 812f308:	00000706 	br	812f328 <alt_up_pixel_buffer_dma_clear_screen+0x148>
		{
			IOWR_32DIRECT(addr, x, 0);
 812f30c:	e0ffff17 	ldw	r3,-4(fp)
 812f310:	e0bff917 	ldw	r2,-28(fp)
 812f314:	1885883a 	add	r2,r3,r2
 812f318:	10000035 	stwio	zero,0(r2)
	} else {
		/* Clear the screen when the VGA is set up in a linear addressing mode. */
		register int x;
		limit_y = limit_x*limit_y;	

		for (x = 0; x < limit_y; x = x + 4)
 812f31c:	e0fff917 	ldw	r3,-28(fp)
 812f320:	18c00104 	addi	r3,r3,4
 812f324:	e0fff915 	stw	r3,-28(fp)
 812f328:	e0bff917 	ldw	r2,-28(fp)
 812f32c:	e13ffd17 	ldw	r4,-12(fp)
 812f330:	113ff636 	bltu	r2,r4,812f30c <alt_up_pixel_buffer_dma_clear_screen+0x12c>
		{
			IOWR_32DIRECT(addr, x, 0);
		}
	}
}
 812f334:	e037883a 	mov	sp,fp
 812f338:	df000017 	ldw	fp,0(sp)
 812f33c:	dec00104 	addi	sp,sp,4
 812f340:	f800283a 	ret

0812f344 <alt_up_pixel_buffer_dma_draw_box>:

void alt_up_pixel_buffer_dma_draw_box(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int y0, int x1, int y1, int color, int backbuffer)
/* This function draws a filled box. */
{
 812f344:	deffed04 	addi	sp,sp,-76
 812f348:	df001215 	stw	fp,72(sp)
 812f34c:	df001204 	addi	fp,sp,72
 812f350:	e13fee15 	stw	r4,-72(fp)
 812f354:	e17fef15 	stw	r5,-68(fp)
 812f358:	e1bff015 	stw	r6,-64(fp)
 812f35c:	e1fff115 	stw	r7,-60(fp)
	register unsigned int addr;
	register unsigned int limit_x = pixel_buffer->x_resolution;
 812f360:	e0bfee17 	ldw	r2,-72(fp)
 812f364:	10800f17 	ldw	r2,60(r2)
 812f368:	e0bffe15 	stw	r2,-8(fp)
	register unsigned int limit_y = pixel_buffer->y_resolution;
 812f36c:	e0bfee17 	ldw	r2,-72(fp)
 812f370:	10801017 	ldw	r2,64(r2)
 812f374:	e0bffd15 	stw	r2,-12(fp)
	register unsigned int temp;
	register unsigned int l_x = x0;
 812f378:	e0bfef17 	ldw	r2,-68(fp)
 812f37c:	e0bffb15 	stw	r2,-20(fp)
	register unsigned int r_x = x1;
 812f380:	e0fff117 	ldw	r3,-60(fp)
 812f384:	e0fffa15 	stw	r3,-24(fp)
	register unsigned int t_y = y0;
 812f388:	e13ff017 	ldw	r4,-64(fp)
 812f38c:	e13ff915 	stw	r4,-28(fp)
	register unsigned int b_y = y1;
 812f390:	e0800117 	ldw	r2,4(fp)
 812f394:	e0bff815 	stw	r2,-32(fp)
	register unsigned int local_color = color;
 812f398:	e0c00217 	ldw	r3,8(fp)
 812f39c:	e0fff715 	stw	r3,-36(fp)
	
	/* Check coordinates */
	if (l_x > r_x)
 812f3a0:	e13ffa17 	ldw	r4,-24(fp)
 812f3a4:	e0bffb17 	ldw	r2,-20(fp)
 812f3a8:	2080062e 	bgeu	r4,r2,812f3c4 <alt_up_pixel_buffer_dma_draw_box+0x80>
	{
		temp = l_x;
 812f3ac:	e0fffb17 	ldw	r3,-20(fp)
 812f3b0:	e0fffc15 	stw	r3,-16(fp)
		l_x = r_x;
 812f3b4:	e13ffa17 	ldw	r4,-24(fp)
 812f3b8:	e13ffb15 	stw	r4,-20(fp)
		r_x = temp;
 812f3bc:	e0bffc17 	ldw	r2,-16(fp)
 812f3c0:	e0bffa15 	stw	r2,-24(fp)
	}
	if (t_y > b_y)
 812f3c4:	e0fff817 	ldw	r3,-32(fp)
 812f3c8:	e13ff917 	ldw	r4,-28(fp)
 812f3cc:	1900062e 	bgeu	r3,r4,812f3e8 <alt_up_pixel_buffer_dma_draw_box+0xa4>
	{
		temp = t_y;
 812f3d0:	e0bff917 	ldw	r2,-28(fp)
 812f3d4:	e0bffc15 	stw	r2,-16(fp)
		t_y = b_y;
 812f3d8:	e0fff817 	ldw	r3,-32(fp)
 812f3dc:	e0fff915 	stw	r3,-28(fp)
		b_y = temp;
 812f3e0:	e13ffc17 	ldw	r4,-16(fp)
 812f3e4:	e13ff815 	stw	r4,-32(fp)
	}
	if ((l_x >= limit_x) || (t_y >= limit_y) || (r_x < 0) || (b_y < 0))
 812f3e8:	e0bffb17 	ldw	r2,-20(fp)
 812f3ec:	e0fffe17 	ldw	r3,-8(fp)
 812f3f0:	10c10d2e 	bgeu	r2,r3,812f828 <alt_up_pixel_buffer_dma_draw_box+0x4e4>
 812f3f4:	e13ff917 	ldw	r4,-28(fp)
 812f3f8:	e0bffd17 	ldw	r2,-12(fp)
 812f3fc:	20800136 	bltu	r4,r2,812f404 <alt_up_pixel_buffer_dma_draw_box+0xc0>
	{
		/* Drawing outside of the window, so don't bother. */
		return;
 812f400:	00010906 	br	812f828 <alt_up_pixel_buffer_dma_draw_box+0x4e4>
	/* Clip the box and draw only within the confines of the screen. */
	if (l_x < 0)
	{
		l_x = 0;
	}
	if (r_x >= limit_x)
 812f404:	e0fffa17 	ldw	r3,-24(fp)
 812f408:	e13ffe17 	ldw	r4,-8(fp)
 812f40c:	19000336 	bltu	r3,r4,812f41c <alt_up_pixel_buffer_dma_draw_box+0xd8>
	{
		r_x = limit_x - 1;
 812f410:	e0bffe17 	ldw	r2,-8(fp)
 812f414:	10bfffc4 	addi	r2,r2,-1
 812f418:	e0bffa15 	stw	r2,-24(fp)
	}
	if (t_y < 0)
	{
		t_y = 0;
	}
	if (b_y >= limit_y)
 812f41c:	e0fff817 	ldw	r3,-32(fp)
 812f420:	e13ffd17 	ldw	r4,-12(fp)
 812f424:	19000336 	bltu	r3,r4,812f434 <alt_up_pixel_buffer_dma_draw_box+0xf0>
	{
		b_y = limit_y - 1;
 812f428:	e0bffd17 	ldw	r2,-12(fp)
 812f42c:	10bfffc4 	addi	r2,r2,-1
 812f430:	e0bff815 	stw	r2,-32(fp)
	}

	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
 812f434:	e0800317 	ldw	r2,12(fp)
 812f438:	10800058 	cmpnei	r2,r2,1
 812f43c:	1000041e 	bne	r2,zero,812f450 <alt_up_pixel_buffer_dma_draw_box+0x10c>
		addr = pixel_buffer->back_buffer_start_address;
 812f440:	e0bfee17 	ldw	r2,-72(fp)
 812f444:	10800c17 	ldw	r2,48(r2)
 812f448:	e0bfff15 	stw	r2,-4(fp)
 812f44c:	00000306 	br	812f45c <alt_up_pixel_buffer_dma_draw_box+0x118>
	else
		addr = pixel_buffer->buffer_start_address;
 812f450:	e0bfee17 	ldw	r2,-72(fp)
 812f454:	10800b17 	ldw	r2,44(r2)
 812f458:	e0bfff15 	stw	r2,-4(fp)

	/* Draw the box using one of the addressing modes. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
 812f45c:	e0bfee17 	ldw	r2,-72(fp)
 812f460:	10800d17 	ldw	r2,52(r2)
 812f464:	1004c03a 	cmpne	r2,r2,zero
 812f468:	1000721e 	bne	r2,zero,812f634 <alt_up_pixel_buffer_dma_draw_box+0x2f0>
		/* Draw a box of a given color on the screen using the XY addressing mode. */
		register unsigned int x,y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
 812f46c:	e0bfee17 	ldw	r2,-72(fp)
 812f470:	10801317 	ldw	r2,76(r2)
 812f474:	e0bff415 	stw	r2,-48(fp)
		addr = addr + (t_y << offset_y);
 812f478:	e0bff417 	ldw	r2,-48(fp)
 812f47c:	e0fff917 	ldw	r3,-28(fp)
 812f480:	1884983a 	sll	r2,r3,r2
 812f484:	e13fff17 	ldw	r4,-4(fp)
 812f488:	2089883a 	add	r4,r4,r2
 812f48c:	e13fff15 	stw	r4,-4(fp)
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
 812f490:	e0bfee17 	ldw	r2,-72(fp)
 812f494:	10800e17 	ldw	r2,56(r2)
 812f498:	10800058 	cmpnei	r2,r2,1
 812f49c:	10001e1e 	bne	r2,zero,812f518 <alt_up_pixel_buffer_dma_draw_box+0x1d4>
			for (y = t_y; y <= b_y; y++)
 812f4a0:	e0bff917 	ldw	r2,-28(fp)
 812f4a4:	e0bff515 	stw	r2,-44(fp)
 812f4a8:	00001706 	br	812f508 <alt_up_pixel_buffer_dma_draw_box+0x1c4>
			{
				for (x = l_x; x <= r_x; x++)
 812f4ac:	e0fffb17 	ldw	r3,-20(fp)
 812f4b0:	e0fff615 	stw	r3,-40(fp)
 812f4b4:	00000806 	br	812f4d8 <alt_up_pixel_buffer_dma_draw_box+0x194>
				{
					IOWR_8DIRECT(addr, x, local_color);
 812f4b8:	e0ffff17 	ldw	r3,-4(fp)
 812f4bc:	e0bff617 	ldw	r2,-40(fp)
 812f4c0:	1885883a 	add	r2,r3,r2
 812f4c4:	e0fff717 	ldw	r3,-36(fp)
 812f4c8:	10c00025 	stbio	r3,0(r2)
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
 812f4cc:	e13ff617 	ldw	r4,-40(fp)
 812f4d0:	21000044 	addi	r4,r4,1
 812f4d4:	e13ff615 	stw	r4,-40(fp)
 812f4d8:	e0bffa17 	ldw	r2,-24(fp)
 812f4dc:	e0fff617 	ldw	r3,-40(fp)
 812f4e0:	10fff52e 	bgeu	r2,r3,812f4b8 <alt_up_pixel_buffer_dma_draw_box+0x174>
				{
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + (1 << offset_y);
 812f4e4:	e0fff417 	ldw	r3,-48(fp)
 812f4e8:	00800044 	movi	r2,1
 812f4ec:	10c4983a 	sll	r2,r2,r3
 812f4f0:	e13fff17 	ldw	r4,-4(fp)
 812f4f4:	2089883a 	add	r4,r4,r2
 812f4f8:	e13fff15 	stw	r4,-4(fp)
		addr = addr + (t_y << offset_y);
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
 812f4fc:	e0bff517 	ldw	r2,-44(fp)
 812f500:	10800044 	addi	r2,r2,1
 812f504:	e0bff515 	stw	r2,-44(fp)
 812f508:	e0fff817 	ldw	r3,-32(fp)
 812f50c:	e13ff517 	ldw	r4,-44(fp)
 812f510:	193fe62e 	bgeu	r3,r4,812f4ac <alt_up_pixel_buffer_dma_draw_box+0x168>
 812f514:	0000c406 	br	812f828 <alt_up_pixel_buffer_dma_draw_box+0x4e4>
				{
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
 812f518:	e0bfee17 	ldw	r2,-72(fp)
 812f51c:	10800e17 	ldw	r2,56(r2)
 812f520:	10800098 	cmpnei	r2,r2,2
 812f524:	1000211e 	bne	r2,zero,812f5ac <alt_up_pixel_buffer_dma_draw_box+0x268>
			for (y = t_y; y <= b_y; y++)
 812f528:	e0bff917 	ldw	r2,-28(fp)
 812f52c:	e0bff515 	stw	r2,-44(fp)
 812f530:	00001a06 	br	812f59c <alt_up_pixel_buffer_dma_draw_box+0x258>
			{
				for (x = l_x; x <= r_x; x++)
 812f534:	e0fffb17 	ldw	r3,-20(fp)
 812f538:	e0fff615 	stw	r3,-40(fp)
 812f53c:	00000b06 	br	812f56c <alt_up_pixel_buffer_dma_draw_box+0x228>
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
 812f540:	e13ff617 	ldw	r4,-40(fp)
 812f544:	e13ff617 	ldw	r4,-40(fp)
 812f548:	2105883a 	add	r2,r4,r4
 812f54c:	1007883a 	mov	r3,r2
 812f550:	e0bfff17 	ldw	r2,-4(fp)
 812f554:	1885883a 	add	r2,r3,r2
 812f558:	e0fff717 	ldw	r3,-36(fp)
 812f55c:	10c0002d 	sthio	r3,0(r2)
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
 812f560:	e0bff617 	ldw	r2,-40(fp)
 812f564:	10800044 	addi	r2,r2,1
 812f568:	e0bff615 	stw	r2,-40(fp)
 812f56c:	e0fffa17 	ldw	r3,-24(fp)
 812f570:	e13ff617 	ldw	r4,-40(fp)
 812f574:	193ff22e 	bgeu	r3,r4,812f540 <alt_up_pixel_buffer_dma_draw_box+0x1fc>
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
				}
				addr = addr + (1 << offset_y);
 812f578:	e0fff417 	ldw	r3,-48(fp)
 812f57c:	00800044 	movi	r2,1
 812f580:	10c4983a 	sll	r2,r2,r3
 812f584:	e0ffff17 	ldw	r3,-4(fp)
 812f588:	1887883a 	add	r3,r3,r2
 812f58c:	e0ffff15 	stw	r3,-4(fp)
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
 812f590:	e13ff517 	ldw	r4,-44(fp)
 812f594:	21000044 	addi	r4,r4,1
 812f598:	e13ff515 	stw	r4,-44(fp)
 812f59c:	e0bff817 	ldw	r2,-32(fp)
 812f5a0:	e0fff517 	ldw	r3,-44(fp)
 812f5a4:	10ffe32e 	bgeu	r2,r3,812f534 <alt_up_pixel_buffer_dma_draw_box+0x1f0>
 812f5a8:	00009f06 	br	812f828 <alt_up_pixel_buffer_dma_draw_box+0x4e4>
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
 812f5ac:	e13ff917 	ldw	r4,-28(fp)
 812f5b0:	e13ff515 	stw	r4,-44(fp)
 812f5b4:	00001b06 	br	812f624 <alt_up_pixel_buffer_dma_draw_box+0x2e0>
			{
				for (x = l_x; x <= r_x; x++)
 812f5b8:	e0bffb17 	ldw	r2,-20(fp)
 812f5bc:	e0bff615 	stw	r2,-40(fp)
 812f5c0:	00000c06 	br	812f5f4 <alt_up_pixel_buffer_dma_draw_box+0x2b0>
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
 812f5c4:	e0fff617 	ldw	r3,-40(fp)
 812f5c8:	e0fff617 	ldw	r3,-40(fp)
 812f5cc:	18c5883a 	add	r2,r3,r3
 812f5d0:	1085883a 	add	r2,r2,r2
 812f5d4:	1007883a 	mov	r3,r2
 812f5d8:	e0bfff17 	ldw	r2,-4(fp)
 812f5dc:	1885883a 	add	r2,r3,r2
 812f5e0:	e0fff717 	ldw	r3,-36(fp)
 812f5e4:	10c00035 	stwio	r3,0(r2)
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
 812f5e8:	e13ff617 	ldw	r4,-40(fp)
 812f5ec:	21000044 	addi	r4,r4,1
 812f5f0:	e13ff615 	stw	r4,-40(fp)
 812f5f4:	e0bffa17 	ldw	r2,-24(fp)
 812f5f8:	e0fff617 	ldw	r3,-40(fp)
 812f5fc:	10fff12e 	bgeu	r2,r3,812f5c4 <alt_up_pixel_buffer_dma_draw_box+0x280>
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
				}
				addr = addr + (1 << offset_y);
 812f600:	e0fff417 	ldw	r3,-48(fp)
 812f604:	00800044 	movi	r2,1
 812f608:	10c4983a 	sll	r2,r2,r3
 812f60c:	e13fff17 	ldw	r4,-4(fp)
 812f610:	2089883a 	add	r4,r4,r2
 812f614:	e13fff15 	stw	r4,-4(fp)
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
 812f618:	e0bff517 	ldw	r2,-44(fp)
 812f61c:	10800044 	addi	r2,r2,1
 812f620:	e0bff515 	stw	r2,-44(fp)
 812f624:	e0fff817 	ldw	r3,-32(fp)
 812f628:	e13ff517 	ldw	r4,-44(fp)
 812f62c:	193fe22e 	bgeu	r3,r4,812f5b8 <alt_up_pixel_buffer_dma_draw_box+0x274>
 812f630:	00007d06 	br	812f828 <alt_up_pixel_buffer_dma_draw_box+0x4e4>
	} else {
		/* Draw a box of a given color on the screen using the linear addressing mode. */
		register unsigned int x,y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
 812f634:	e0bfee17 	ldw	r2,-72(fp)
 812f638:	10800e17 	ldw	r2,56(r2)
 812f63c:	10800058 	cmpnei	r2,r2,1
 812f640:	1000221e 	bne	r2,zero,812f6cc <alt_up_pixel_buffer_dma_draw_box+0x388>
			addr = addr + t_y * limit_x;
 812f644:	e0fff917 	ldw	r3,-28(fp)
 812f648:	e13ffe17 	ldw	r4,-8(fp)
 812f64c:	1905383a 	mul	r2,r3,r4
 812f650:	e0ffff17 	ldw	r3,-4(fp)
 812f654:	1887883a 	add	r3,r3,r2
 812f658:	e0ffff15 	stw	r3,-4(fp)
			for (y = t_y; y <= b_y; y++)
 812f65c:	e13ff917 	ldw	r4,-28(fp)
 812f660:	e13ff215 	stw	r4,-56(fp)
 812f664:	00001506 	br	812f6bc <alt_up_pixel_buffer_dma_draw_box+0x378>
			{
				for (x = l_x; x <= r_x; x++)
 812f668:	e0bffb17 	ldw	r2,-20(fp)
 812f66c:	e0bff315 	stw	r2,-52(fp)
 812f670:	00000806 	br	812f694 <alt_up_pixel_buffer_dma_draw_box+0x350>
				{
					IOWR_8DIRECT(addr, x, local_color);
 812f674:	e0ffff17 	ldw	r3,-4(fp)
 812f678:	e0bff317 	ldw	r2,-52(fp)
 812f67c:	1885883a 	add	r2,r3,r2
 812f680:	e0fff717 	ldw	r3,-36(fp)
 812f684:	10c00025 	stbio	r3,0(r2)
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
 812f688:	e0fff317 	ldw	r3,-52(fp)
 812f68c:	18c00044 	addi	r3,r3,1
 812f690:	e0fff315 	stw	r3,-52(fp)
 812f694:	e13ffa17 	ldw	r4,-24(fp)
 812f698:	e0bff317 	ldw	r2,-52(fp)
 812f69c:	20bff52e 	bgeu	r4,r2,812f674 <alt_up_pixel_buffer_dma_draw_box+0x330>
				{
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + limit_x;
 812f6a0:	e0ffff17 	ldw	r3,-4(fp)
 812f6a4:	e13ffe17 	ldw	r4,-8(fp)
 812f6a8:	1907883a 	add	r3,r3,r4
 812f6ac:	e0ffff15 	stw	r3,-4(fp)
		register unsigned int x,y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
 812f6b0:	e0bff217 	ldw	r2,-56(fp)
 812f6b4:	10800044 	addi	r2,r2,1
 812f6b8:	e0bff215 	stw	r2,-56(fp)
 812f6bc:	e0fff817 	ldw	r3,-32(fp)
 812f6c0:	e13ff217 	ldw	r4,-56(fp)
 812f6c4:	193fe82e 	bgeu	r3,r4,812f668 <alt_up_pixel_buffer_dma_draw_box+0x324>
 812f6c8:	00005706 	br	812f828 <alt_up_pixel_buffer_dma_draw_box+0x4e4>
				{
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
 812f6cc:	e0bfee17 	ldw	r2,-72(fp)
 812f6d0:	10800e17 	ldw	r2,56(r2)
 812f6d4:	10800098 	cmpnei	r2,r2,2
 812f6d8:	1000291e 	bne	r2,zero,812f780 <alt_up_pixel_buffer_dma_draw_box+0x43c>
			limit_x = limit_x << 1;
 812f6dc:	e0fffe17 	ldw	r3,-8(fp)
 812f6e0:	e0fffe17 	ldw	r3,-8(fp)
 812f6e4:	18c5883a 	add	r2,r3,r3
 812f6e8:	e0bffe15 	stw	r2,-8(fp)
			addr = addr + t_y * limit_x;
 812f6ec:	e13ff917 	ldw	r4,-28(fp)
 812f6f0:	e0fffe17 	ldw	r3,-8(fp)
 812f6f4:	20c5383a 	mul	r2,r4,r3
 812f6f8:	e13fff17 	ldw	r4,-4(fp)
 812f6fc:	2089883a 	add	r4,r4,r2
 812f700:	e13fff15 	stw	r4,-4(fp)
			for (y = t_y; y <= b_y; y++)
 812f704:	e0bff917 	ldw	r2,-28(fp)
 812f708:	e0bff215 	stw	r2,-56(fp)
 812f70c:	00001806 	br	812f770 <alt_up_pixel_buffer_dma_draw_box+0x42c>
			{
				for (x = l_x; x <= r_x; x++)
 812f710:	e0fffb17 	ldw	r3,-20(fp)
 812f714:	e0fff315 	stw	r3,-52(fp)
 812f718:	00000b06 	br	812f748 <alt_up_pixel_buffer_dma_draw_box+0x404>
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
 812f71c:	e13ff317 	ldw	r4,-52(fp)
 812f720:	e13ff317 	ldw	r4,-52(fp)
 812f724:	2105883a 	add	r2,r4,r4
 812f728:	1007883a 	mov	r3,r2
 812f72c:	e0bfff17 	ldw	r2,-4(fp)
 812f730:	1885883a 	add	r2,r3,r2
 812f734:	e0fff717 	ldw	r3,-36(fp)
 812f738:	10c0002d 	sthio	r3,0(r2)
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
 812f73c:	e0bff317 	ldw	r2,-52(fp)
 812f740:	10800044 	addi	r2,r2,1
 812f744:	e0bff315 	stw	r2,-52(fp)
 812f748:	e0fffa17 	ldw	r3,-24(fp)
 812f74c:	e13ff317 	ldw	r4,-52(fp)
 812f750:	193ff22e 	bgeu	r3,r4,812f71c <alt_up_pixel_buffer_dma_draw_box+0x3d8>
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
				}
				addr = addr + limit_x;
 812f754:	e0bfff17 	ldw	r2,-4(fp)
 812f758:	e0fffe17 	ldw	r3,-8(fp)
 812f75c:	10c5883a 	add	r2,r2,r3
 812f760:	e0bfff15 	stw	r2,-4(fp)
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
 812f764:	e13ff217 	ldw	r4,-56(fp)
 812f768:	21000044 	addi	r4,r4,1
 812f76c:	e13ff215 	stw	r4,-56(fp)
 812f770:	e0bff817 	ldw	r2,-32(fp)
 812f774:	e0fff217 	ldw	r3,-56(fp)
 812f778:	10ffe52e 	bgeu	r2,r3,812f710 <alt_up_pixel_buffer_dma_draw_box+0x3cc>
 812f77c:	00002a06 	br	812f828 <alt_up_pixel_buffer_dma_draw_box+0x4e4>
				addr = addr + limit_x;
			}
		}
		else
		{
			limit_x = limit_x << 2;
 812f780:	e13ffe17 	ldw	r4,-8(fp)
 812f784:	e13ffe17 	ldw	r4,-8(fp)
 812f788:	2105883a 	add	r2,r4,r4
 812f78c:	1085883a 	add	r2,r2,r2
 812f790:	e0bffe15 	stw	r2,-8(fp)
			addr = addr + t_y * limit_x;
 812f794:	e0fff917 	ldw	r3,-28(fp)
 812f798:	e13ffe17 	ldw	r4,-8(fp)
 812f79c:	1905383a 	mul	r2,r3,r4
 812f7a0:	e0ffff17 	ldw	r3,-4(fp)
 812f7a4:	1887883a 	add	r3,r3,r2
 812f7a8:	e0ffff15 	stw	r3,-4(fp)
			for (y = t_y; y <= b_y; y++)
 812f7ac:	e13ff917 	ldw	r4,-28(fp)
 812f7b0:	e13ff215 	stw	r4,-56(fp)
 812f7b4:	00001906 	br	812f81c <alt_up_pixel_buffer_dma_draw_box+0x4d8>
			{
				for (x = l_x; x <= r_x; x++)
 812f7b8:	e0bffb17 	ldw	r2,-20(fp)
 812f7bc:	e0bff315 	stw	r2,-52(fp)
 812f7c0:	00000c06 	br	812f7f4 <alt_up_pixel_buffer_dma_draw_box+0x4b0>
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
 812f7c4:	e0fff317 	ldw	r3,-52(fp)
 812f7c8:	e0fff317 	ldw	r3,-52(fp)
 812f7cc:	18c5883a 	add	r2,r3,r3
 812f7d0:	1085883a 	add	r2,r2,r2
 812f7d4:	1007883a 	mov	r3,r2
 812f7d8:	e0bfff17 	ldw	r2,-4(fp)
 812f7dc:	1885883a 	add	r2,r3,r2
 812f7e0:	e0fff717 	ldw	r3,-36(fp)
 812f7e4:	10c00035 	stwio	r3,0(r2)
		{
			limit_x = limit_x << 2;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
 812f7e8:	e13ff317 	ldw	r4,-52(fp)
 812f7ec:	21000044 	addi	r4,r4,1
 812f7f0:	e13ff315 	stw	r4,-52(fp)
 812f7f4:	e0bffa17 	ldw	r2,-24(fp)
 812f7f8:	e0fff317 	ldw	r3,-52(fp)
 812f7fc:	10fff12e 	bgeu	r2,r3,812f7c4 <alt_up_pixel_buffer_dma_draw_box+0x480>
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
				}
				addr = addr + limit_x;
 812f800:	e13fff17 	ldw	r4,-4(fp)
 812f804:	e0bffe17 	ldw	r2,-8(fp)
 812f808:	2089883a 	add	r4,r4,r2
 812f80c:	e13fff15 	stw	r4,-4(fp)
		}
		else
		{
			limit_x = limit_x << 2;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
 812f810:	e0fff217 	ldw	r3,-56(fp)
 812f814:	18c00044 	addi	r3,r3,1
 812f818:	e0fff215 	stw	r3,-56(fp)
 812f81c:	e13ff817 	ldw	r4,-32(fp)
 812f820:	e0bff217 	ldw	r2,-56(fp)
 812f824:	20bfe42e 	bgeu	r4,r2,812f7b8 <alt_up_pixel_buffer_dma_draw_box+0x474>
				}
				addr = addr + limit_x;
			}
		}
	}
}
 812f828:	e037883a 	mov	sp,fp
 812f82c:	df000017 	ldw	fp,0(sp)
 812f830:	dec00104 	addi	sp,sp,4
 812f834:	f800283a 	ret

0812f838 <alt_up_pixel_buffer_dma_draw_hline>:

void alt_up_pixel_buffer_dma_draw_hline(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int x1, int y, int color, int backbuffer)
/* This method draws a horizontal line. This method is faster than using the line method because we know the direction of the line. */
{
 812f838:	defff204 	addi	sp,sp,-56
 812f83c:	df000d15 	stw	fp,52(sp)
 812f840:	df000d04 	addi	fp,sp,52
 812f844:	e13ff315 	stw	r4,-52(fp)
 812f848:	e17ff415 	stw	r5,-48(fp)
 812f84c:	e1bff515 	stw	r6,-44(fp)
 812f850:	e1fff615 	stw	r7,-40(fp)
	register unsigned int addr;
	register unsigned int limit_x = pixel_buffer->x_resolution;
 812f854:	e0bff317 	ldw	r2,-52(fp)
 812f858:	10800f17 	ldw	r2,60(r2)
 812f85c:	e0bffe15 	stw	r2,-8(fp)
	register unsigned int limit_y = pixel_buffer->y_resolution;
 812f860:	e0bff317 	ldw	r2,-52(fp)
 812f864:	10801017 	ldw	r2,64(r2)
 812f868:	e0bffd15 	stw	r2,-12(fp)
	register unsigned int temp;
	register unsigned int l_x = x0;
 812f86c:	e0bff417 	ldw	r2,-48(fp)
 812f870:	e0bffc15 	stw	r2,-16(fp)
	register unsigned int r_x = x1;
 812f874:	e0fff517 	ldw	r3,-44(fp)
 812f878:	e0fffb15 	stw	r3,-20(fp)
	register unsigned int line_y = y;
 812f87c:	e13ff617 	ldw	r4,-40(fp)
 812f880:	e13ffa15 	stw	r4,-24(fp)
	register unsigned int local_color = color;
 812f884:	e0800117 	ldw	r2,4(fp)
 812f888:	e0bff915 	stw	r2,-28(fp)
	
	/* Check coordinates */
	if (l_x > r_x)
 812f88c:	e0fffb17 	ldw	r3,-20(fp)
 812f890:	e13ffc17 	ldw	r4,-16(fp)
 812f894:	1900042e 	bgeu	r3,r4,812f8a8 <alt_up_pixel_buffer_dma_draw_hline+0x70>
	{
		temp = l_x;
 812f898:	e0bffc17 	ldw	r2,-16(fp)
		l_x = r_x;
 812f89c:	e0fffb17 	ldw	r3,-20(fp)
 812f8a0:	e0fffc15 	stw	r3,-16(fp)
		r_x = temp;
 812f8a4:	e0bffb15 	stw	r2,-20(fp)
	}
	if ((l_x >= limit_x) || (line_y >= limit_y) || (r_x < 0) || (line_y < 0))
 812f8a8:	e13ffc17 	ldw	r4,-16(fp)
 812f8ac:	e0bffe17 	ldw	r2,-8(fp)
 812f8b0:	2080b12e 	bgeu	r4,r2,812fb78 <alt_up_pixel_buffer_dma_draw_hline+0x340>
 812f8b4:	e0fffa17 	ldw	r3,-24(fp)
 812f8b8:	e13ffd17 	ldw	r4,-12(fp)
 812f8bc:	19000136 	bltu	r3,r4,812f8c4 <alt_up_pixel_buffer_dma_draw_hline+0x8c>
	{
		/* Drawing outside of the window, so don't bother. */
		return;
 812f8c0:	0000ad06 	br	812fb78 <alt_up_pixel_buffer_dma_draw_hline+0x340>
	/* Clip the box and draw only within the confines of the screen. */
	if (l_x < 0)
	{
		l_x = 0;
	}
	if (r_x >= limit_x)
 812f8c4:	e0bffb17 	ldw	r2,-20(fp)
 812f8c8:	e0fffe17 	ldw	r3,-8(fp)
 812f8cc:	10c00336 	bltu	r2,r3,812f8dc <alt_up_pixel_buffer_dma_draw_hline+0xa4>
	{
		r_x = limit_x - 1;
 812f8d0:	e13ffe17 	ldw	r4,-8(fp)
 812f8d4:	213fffc4 	addi	r4,r4,-1
 812f8d8:	e13ffb15 	stw	r4,-20(fp)
	}

	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
 812f8dc:	e0800217 	ldw	r2,8(fp)
 812f8e0:	10800058 	cmpnei	r2,r2,1
 812f8e4:	1000041e 	bne	r2,zero,812f8f8 <alt_up_pixel_buffer_dma_draw_hline+0xc0>
		addr = pixel_buffer->back_buffer_start_address;
 812f8e8:	e0bff317 	ldw	r2,-52(fp)
 812f8ec:	10800c17 	ldw	r2,48(r2)
 812f8f0:	e0bfff15 	stw	r2,-4(fp)
 812f8f4:	00000306 	br	812f904 <alt_up_pixel_buffer_dma_draw_hline+0xcc>
	else
		addr = pixel_buffer->buffer_start_address;
 812f8f8:	e0bff317 	ldw	r2,-52(fp)
 812f8fc:	10800b17 	ldw	r2,44(r2)
 812f900:	e0bfff15 	stw	r2,-4(fp)

	/* Draw a horizontal line using one of the addressing modes. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
 812f904:	e0bff317 	ldw	r2,-52(fp)
 812f908:	10800d17 	ldw	r2,52(r2)
 812f90c:	1004c03a 	cmpne	r2,r2,zero
 812f910:	1000431e 	bne	r2,zero,812fa20 <alt_up_pixel_buffer_dma_draw_hline+0x1e8>
		/* Draw a horizontal line of a given color on the screen using the XY addressing mode. */
		register unsigned int x;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
 812f914:	e0bff317 	ldw	r2,-52(fp)
 812f918:	10801317 	ldw	r2,76(r2)
		addr = addr + (line_y << offset_y);
 812f91c:	e0fffa17 	ldw	r3,-24(fp)
 812f920:	1884983a 	sll	r2,r3,r2
 812f924:	e13fff17 	ldw	r4,-4(fp)
 812f928:	2089883a 	add	r4,r4,r2
 812f92c:	e13fff15 	stw	r4,-4(fp)
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a horizontal line. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
 812f930:	e0bff317 	ldw	r2,-52(fp)
 812f934:	10800e17 	ldw	r2,56(r2)
 812f938:	10800058 	cmpnei	r2,r2,1
 812f93c:	10000f1e 	bne	r2,zero,812f97c <alt_up_pixel_buffer_dma_draw_hline+0x144>
			for (x = l_x; x <= r_x; x++)
 812f940:	e0bffc17 	ldw	r2,-16(fp)
 812f944:	e0bff815 	stw	r2,-32(fp)
 812f948:	00000806 	br	812f96c <alt_up_pixel_buffer_dma_draw_hline+0x134>
			{
				IOWR_8DIRECT(addr, x, local_color);
 812f94c:	e0ffff17 	ldw	r3,-4(fp)
 812f950:	e0bff817 	ldw	r2,-32(fp)
 812f954:	1885883a 	add	r2,r3,r2
 812f958:	e0fff917 	ldw	r3,-28(fp)
 812f95c:	10c00025 	stbio	r3,0(r2)
		addr = addr + (line_y << offset_y);
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a horizontal line. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (x = l_x; x <= r_x; x++)
 812f960:	e0fff817 	ldw	r3,-32(fp)
 812f964:	18c00044 	addi	r3,r3,1
 812f968:	e0fff815 	stw	r3,-32(fp)
 812f96c:	e13ffb17 	ldw	r4,-20(fp)
 812f970:	e0bff817 	ldw	r2,-32(fp)
 812f974:	20bff52e 	bgeu	r4,r2,812f94c <alt_up_pixel_buffer_dma_draw_hline+0x114>
 812f978:	00007f06 	br	812fb78 <alt_up_pixel_buffer_dma_draw_hline+0x340>
			{
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
 812f97c:	e0bff317 	ldw	r2,-52(fp)
 812f980:	10800e17 	ldw	r2,56(r2)
 812f984:	10800098 	cmpnei	r2,r2,2
 812f988:	1000121e 	bne	r2,zero,812f9d4 <alt_up_pixel_buffer_dma_draw_hline+0x19c>
			for (x = l_x; x <= r_x; x++)
 812f98c:	e0fffc17 	ldw	r3,-16(fp)
 812f990:	e0fff815 	stw	r3,-32(fp)
 812f994:	00000b06 	br	812f9c4 <alt_up_pixel_buffer_dma_draw_hline+0x18c>
			{
				IOWR_16DIRECT(addr, x << 1, local_color);
 812f998:	e13ff817 	ldw	r4,-32(fp)
 812f99c:	e13ff817 	ldw	r4,-32(fp)
 812f9a0:	2105883a 	add	r2,r4,r4
 812f9a4:	1007883a 	mov	r3,r2
 812f9a8:	e0bfff17 	ldw	r2,-4(fp)
 812f9ac:	1885883a 	add	r2,r3,r2
 812f9b0:	e0fff917 	ldw	r3,-28(fp)
 812f9b4:	10c0002d 	sthio	r3,0(r2)
			for (x = l_x; x <= r_x; x++)
			{
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (x = l_x; x <= r_x; x++)
 812f9b8:	e0bff817 	ldw	r2,-32(fp)
 812f9bc:	10800044 	addi	r2,r2,1
 812f9c0:	e0bff815 	stw	r2,-32(fp)
 812f9c4:	e0fffb17 	ldw	r3,-20(fp)
 812f9c8:	e13ff817 	ldw	r4,-32(fp)
 812f9cc:	193ff22e 	bgeu	r3,r4,812f998 <alt_up_pixel_buffer_dma_draw_hline+0x160>
 812f9d0:	00006906 	br	812fb78 <alt_up_pixel_buffer_dma_draw_hline+0x340>
				IOWR_16DIRECT(addr, x << 1, local_color);
			}
		}
		else
		{
			for (x = l_x; x <= r_x; x++)
 812f9d4:	e0bffc17 	ldw	r2,-16(fp)
 812f9d8:	e0bff815 	stw	r2,-32(fp)
 812f9dc:	00000c06 	br	812fa10 <alt_up_pixel_buffer_dma_draw_hline+0x1d8>
			{
				IOWR_32DIRECT(addr, x << 2, local_color);
 812f9e0:	e0fff817 	ldw	r3,-32(fp)
 812f9e4:	e0fff817 	ldw	r3,-32(fp)
 812f9e8:	18c5883a 	add	r2,r3,r3
 812f9ec:	1085883a 	add	r2,r2,r2
 812f9f0:	1007883a 	mov	r3,r2
 812f9f4:	e0bfff17 	ldw	r2,-4(fp)
 812f9f8:	1885883a 	add	r2,r3,r2
 812f9fc:	e0fff917 	ldw	r3,-28(fp)
 812fa00:	10c00035 	stwio	r3,0(r2)
				IOWR_16DIRECT(addr, x << 1, local_color);
			}
		}
		else
		{
			for (x = l_x; x <= r_x; x++)
 812fa04:	e13ff817 	ldw	r4,-32(fp)
 812fa08:	21000044 	addi	r4,r4,1
 812fa0c:	e13ff815 	stw	r4,-32(fp)
 812fa10:	e0bffb17 	ldw	r2,-20(fp)
 812fa14:	e0fff817 	ldw	r3,-32(fp)
 812fa18:	10fff12e 	bgeu	r2,r3,812f9e0 <alt_up_pixel_buffer_dma_draw_hline+0x1a8>
 812fa1c:	00005606 	br	812fb78 <alt_up_pixel_buffer_dma_draw_hline+0x340>
	} else {
		/* Draw a horizontal line of a given color on the screen using the linear addressing mode. */
		register unsigned int x;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
 812fa20:	e0bff317 	ldw	r2,-52(fp)
 812fa24:	10800e17 	ldw	r2,56(r2)
 812fa28:	10800058 	cmpnei	r2,r2,1
 812fa2c:	1000151e 	bne	r2,zero,812fa84 <alt_up_pixel_buffer_dma_draw_hline+0x24c>
			addr = addr + line_y * limit_x;
 812fa30:	e13ffa17 	ldw	r4,-24(fp)
 812fa34:	e0fffe17 	ldw	r3,-8(fp)
 812fa38:	20c5383a 	mul	r2,r4,r3
 812fa3c:	e13fff17 	ldw	r4,-4(fp)
 812fa40:	2089883a 	add	r4,r4,r2
 812fa44:	e13fff15 	stw	r4,-4(fp)
			for (x = l_x; x <= r_x; x++)
 812fa48:	e0bffc17 	ldw	r2,-16(fp)
 812fa4c:	e0bff715 	stw	r2,-36(fp)
 812fa50:	00000806 	br	812fa74 <alt_up_pixel_buffer_dma_draw_hline+0x23c>
			{
				IOWR_8DIRECT(addr, x, local_color);
 812fa54:	e0ffff17 	ldw	r3,-4(fp)
 812fa58:	e0bff717 	ldw	r2,-36(fp)
 812fa5c:	1885883a 	add	r2,r3,r2
 812fa60:	e0fff917 	ldw	r3,-28(fp)
 812fa64:	10c00025 	stbio	r3,0(r2)
		register unsigned int x;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + line_y * limit_x;
			for (x = l_x; x <= r_x; x++)
 812fa68:	e0fff717 	ldw	r3,-36(fp)
 812fa6c:	18c00044 	addi	r3,r3,1
 812fa70:	e0fff715 	stw	r3,-36(fp)
 812fa74:	e13ffb17 	ldw	r4,-20(fp)
 812fa78:	e0bff717 	ldw	r2,-36(fp)
 812fa7c:	20bff52e 	bgeu	r4,r2,812fa54 <alt_up_pixel_buffer_dma_draw_hline+0x21c>
 812fa80:	00003d06 	br	812fb78 <alt_up_pixel_buffer_dma_draw_hline+0x340>
			{
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
 812fa84:	e0bff317 	ldw	r2,-52(fp)
 812fa88:	10800e17 	ldw	r2,56(r2)
 812fa8c:	10800098 	cmpnei	r2,r2,2
 812fa90:	10001c1e 	bne	r2,zero,812fb04 <alt_up_pixel_buffer_dma_draw_hline+0x2cc>
			limit_x = limit_x << 1;
 812fa94:	e0fffe17 	ldw	r3,-8(fp)
 812fa98:	e0fffe17 	ldw	r3,-8(fp)
 812fa9c:	18c5883a 	add	r2,r3,r3
 812faa0:	e0bffe15 	stw	r2,-8(fp)
			addr = addr + line_y * limit_x;
 812faa4:	e13ffa17 	ldw	r4,-24(fp)
 812faa8:	e0fffe17 	ldw	r3,-8(fp)
 812faac:	20c5383a 	mul	r2,r4,r3
 812fab0:	e13fff17 	ldw	r4,-4(fp)
 812fab4:	2089883a 	add	r4,r4,r2
 812fab8:	e13fff15 	stw	r4,-4(fp)
			for (x = l_x; x <= r_x; x++)
 812fabc:	e0bffc17 	ldw	r2,-16(fp)
 812fac0:	e0bff715 	stw	r2,-36(fp)
 812fac4:	00000b06 	br	812faf4 <alt_up_pixel_buffer_dma_draw_hline+0x2bc>
			{
				IOWR_16DIRECT(addr, x << 1, local_color);
 812fac8:	e0fff717 	ldw	r3,-36(fp)
 812facc:	e0fff717 	ldw	r3,-36(fp)
 812fad0:	18c5883a 	add	r2,r3,r3
 812fad4:	1007883a 	mov	r3,r2
 812fad8:	e0bfff17 	ldw	r2,-4(fp)
 812fadc:	1885883a 	add	r2,r3,r2
 812fae0:	e0fff917 	ldw	r3,-28(fp)
 812fae4:	10c0002d 	sthio	r3,0(r2)
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + line_y * limit_x;
			for (x = l_x; x <= r_x; x++)
 812fae8:	e13ff717 	ldw	r4,-36(fp)
 812faec:	21000044 	addi	r4,r4,1
 812faf0:	e13ff715 	stw	r4,-36(fp)
 812faf4:	e0bffb17 	ldw	r2,-20(fp)
 812faf8:	e0fff717 	ldw	r3,-36(fp)
 812fafc:	10fff22e 	bgeu	r2,r3,812fac8 <alt_up_pixel_buffer_dma_draw_hline+0x290>
 812fb00:	00001d06 	br	812fb78 <alt_up_pixel_buffer_dma_draw_hline+0x340>
				IOWR_16DIRECT(addr, x << 1, local_color);
			}
		}
		else
		{
			limit_x = limit_x << 2;
 812fb04:	e13ffe17 	ldw	r4,-8(fp)
 812fb08:	e13ffe17 	ldw	r4,-8(fp)
 812fb0c:	2105883a 	add	r2,r4,r4
 812fb10:	1085883a 	add	r2,r2,r2
 812fb14:	e0bffe15 	stw	r2,-8(fp)
			addr = addr + line_y * limit_x;
 812fb18:	e0fffa17 	ldw	r3,-24(fp)
 812fb1c:	e13ffe17 	ldw	r4,-8(fp)
 812fb20:	1905383a 	mul	r2,r3,r4
 812fb24:	e0ffff17 	ldw	r3,-4(fp)
 812fb28:	1887883a 	add	r3,r3,r2
 812fb2c:	e0ffff15 	stw	r3,-4(fp)
			for (x = l_x; x <= r_x; x++)
 812fb30:	e13ffc17 	ldw	r4,-16(fp)
 812fb34:	e13ff715 	stw	r4,-36(fp)
 812fb38:	00000c06 	br	812fb6c <alt_up_pixel_buffer_dma_draw_hline+0x334>
			{
				IOWR_32DIRECT(addr, x << 2, local_color);
 812fb3c:	e0fff717 	ldw	r3,-36(fp)
 812fb40:	e0fff717 	ldw	r3,-36(fp)
 812fb44:	18c5883a 	add	r2,r3,r3
 812fb48:	1085883a 	add	r2,r2,r2
 812fb4c:	1007883a 	mov	r3,r2
 812fb50:	e0bfff17 	ldw	r2,-4(fp)
 812fb54:	1885883a 	add	r2,r3,r2
 812fb58:	e0fff917 	ldw	r3,-28(fp)
 812fb5c:	10c00035 	stwio	r3,0(r2)
		}
		else
		{
			limit_x = limit_x << 2;
			addr = addr + line_y * limit_x;
			for (x = l_x; x <= r_x; x++)
 812fb60:	e13ff717 	ldw	r4,-36(fp)
 812fb64:	21000044 	addi	r4,r4,1
 812fb68:	e13ff715 	stw	r4,-36(fp)
 812fb6c:	e0bffb17 	ldw	r2,-20(fp)
 812fb70:	e0fff717 	ldw	r3,-36(fp)
 812fb74:	10fff12e 	bgeu	r2,r3,812fb3c <alt_up_pixel_buffer_dma_draw_hline+0x304>
				IOWR_32DIRECT(addr, x << 2, local_color);
			}
			addr = addr + limit_x;
		}
	}
}
 812fb78:	e037883a 	mov	sp,fp
 812fb7c:	df000017 	ldw	fp,0(sp)
 812fb80:	dec00104 	addi	sp,sp,4
 812fb84:	f800283a 	ret

0812fb88 <alt_up_pixel_buffer_dma_draw_vline>:


void alt_up_pixel_buffer_dma_draw_vline(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x, int y0, int y1, int color, int backbuffer)
/* This method draws a vertical line. This method is faster than using the line method because we know the direction of the line. */

{
 812fb88:	defff104 	addi	sp,sp,-60
 812fb8c:	df000e15 	stw	fp,56(sp)
 812fb90:	df000e04 	addi	fp,sp,56
 812fb94:	e13ff215 	stw	r4,-56(fp)
 812fb98:	e17ff315 	stw	r5,-52(fp)
 812fb9c:	e1bff415 	stw	r6,-48(fp)
 812fba0:	e1fff515 	stw	r7,-44(fp)
	register unsigned int addr;
	register unsigned int limit_x = pixel_buffer->x_resolution;
 812fba4:	e0bff217 	ldw	r2,-56(fp)
 812fba8:	10800f17 	ldw	r2,60(r2)
 812fbac:	e0bffe15 	stw	r2,-8(fp)
	register unsigned int limit_y = pixel_buffer->y_resolution;
 812fbb0:	e0bff217 	ldw	r2,-56(fp)
 812fbb4:	10801017 	ldw	r2,64(r2)
 812fbb8:	e0bffd15 	stw	r2,-12(fp)
	register unsigned int temp;
	register unsigned int line_x = x;
 812fbbc:	e0bff317 	ldw	r2,-52(fp)
 812fbc0:	e0bffc15 	stw	r2,-16(fp)
	register unsigned int t_y = y0;
 812fbc4:	e0fff417 	ldw	r3,-48(fp)
 812fbc8:	e0fffb15 	stw	r3,-20(fp)
	register unsigned int b_y = y1;
 812fbcc:	e13ff517 	ldw	r4,-44(fp)
 812fbd0:	e13ffa15 	stw	r4,-24(fp)
	register unsigned int local_color = color;
 812fbd4:	e0800117 	ldw	r2,4(fp)
 812fbd8:	e0bff915 	stw	r2,-28(fp)
	
	/* Check coordinates */
	if (t_y > b_y)
 812fbdc:	e0fffa17 	ldw	r3,-24(fp)
 812fbe0:	e13ffb17 	ldw	r4,-20(fp)
 812fbe4:	1900042e 	bgeu	r3,r4,812fbf8 <alt_up_pixel_buffer_dma_draw_vline+0x70>
	{
		temp = t_y;
 812fbe8:	e0bffb17 	ldw	r2,-20(fp)
		t_y = b_y;
 812fbec:	e0fffa17 	ldw	r3,-24(fp)
 812fbf0:	e0fffb15 	stw	r3,-20(fp)
		b_y = temp;
 812fbf4:	e0bffa15 	stw	r2,-24(fp)
	}
	if ((line_x >= limit_x) || (t_y >= limit_y) || (line_x < 0) || (b_y < 0))
 812fbf8:	e13ffc17 	ldw	r4,-16(fp)
 812fbfc:	e0bffe17 	ldw	r2,-8(fp)
 812fc00:	2080d12e 	bgeu	r4,r2,812ff48 <alt_up_pixel_buffer_dma_draw_vline+0x3c0>
 812fc04:	e0fffb17 	ldw	r3,-20(fp)
 812fc08:	e13ffd17 	ldw	r4,-12(fp)
 812fc0c:	19000136 	bltu	r3,r4,812fc14 <alt_up_pixel_buffer_dma_draw_vline+0x8c>
	{
		/* Drawing outside of the window, so don't bother. */
		return;
 812fc10:	0000cd06 	br	812ff48 <alt_up_pixel_buffer_dma_draw_vline+0x3c0>
	/* Clip the box and draw only within the confines of the screen. */
	if (t_y < 0)
	{
		t_y = 0;
	}
	if (b_y >= limit_y)
 812fc14:	e0bffa17 	ldw	r2,-24(fp)
 812fc18:	e0fffd17 	ldw	r3,-12(fp)
 812fc1c:	10c00336 	bltu	r2,r3,812fc2c <alt_up_pixel_buffer_dma_draw_vline+0xa4>
	{
		b_y = limit_y - 1;
 812fc20:	e13ffd17 	ldw	r4,-12(fp)
 812fc24:	213fffc4 	addi	r4,r4,-1
 812fc28:	e13ffa15 	stw	r4,-24(fp)
	}

	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
 812fc2c:	e0800217 	ldw	r2,8(fp)
 812fc30:	10800058 	cmpnei	r2,r2,1
 812fc34:	1000041e 	bne	r2,zero,812fc48 <alt_up_pixel_buffer_dma_draw_vline+0xc0>
		addr = pixel_buffer->back_buffer_start_address;
 812fc38:	e0bff217 	ldw	r2,-56(fp)
 812fc3c:	10800c17 	ldw	r2,48(r2)
 812fc40:	e0bfff15 	stw	r2,-4(fp)
 812fc44:	00000306 	br	812fc54 <alt_up_pixel_buffer_dma_draw_vline+0xcc>
	else
		addr = pixel_buffer->buffer_start_address;
 812fc48:	e0bff217 	ldw	r2,-56(fp)
 812fc4c:	10800b17 	ldw	r2,44(r2)
 812fc50:	e0bfff15 	stw	r2,-4(fp)

	/* Draw the vertical line using one of the addressing modes. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
 812fc54:	e0bff217 	ldw	r2,-56(fp)
 812fc58:	10800d17 	ldw	r2,52(r2)
 812fc5c:	1004c03a 	cmpne	r2,r2,zero
 812fc60:	1000571e 	bne	r2,zero,812fdc0 <alt_up_pixel_buffer_dma_draw_vline+0x238>
		/* Draw a vertical line of a given color on the screen using the XY addressing mode. */
		register unsigned int y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
 812fc64:	e0bff217 	ldw	r2,-56(fp)
 812fc68:	10801317 	ldw	r2,76(r2)
 812fc6c:	e0bff715 	stw	r2,-36(fp)
		addr = addr + (t_y << offset_y);
 812fc70:	e0bff717 	ldw	r2,-36(fp)
 812fc74:	e0fffb17 	ldw	r3,-20(fp)
 812fc78:	1884983a 	sll	r2,r3,r2
 812fc7c:	e13fff17 	ldw	r4,-4(fp)
 812fc80:	2089883a 	add	r4,r4,r2
 812fc84:	e13fff15 	stw	r4,-4(fp)
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
 812fc88:	e0bff217 	ldw	r2,-56(fp)
 812fc8c:	10800e17 	ldw	r2,56(r2)
 812fc90:	10800058 	cmpnei	r2,r2,1
 812fc94:	1000151e 	bne	r2,zero,812fcec <alt_up_pixel_buffer_dma_draw_vline+0x164>
			for (y = t_y; y <= b_y; y++)
 812fc98:	e0bffb17 	ldw	r2,-20(fp)
 812fc9c:	e0bff815 	stw	r2,-32(fp)
 812fca0:	00000e06 	br	812fcdc <alt_up_pixel_buffer_dma_draw_vline+0x154>
			{
				IOWR_8DIRECT(addr, line_x, local_color);
 812fca4:	e0ffff17 	ldw	r3,-4(fp)
 812fca8:	e0bffc17 	ldw	r2,-16(fp)
 812fcac:	1885883a 	add	r2,r3,r2
 812fcb0:	e0fff917 	ldw	r3,-28(fp)
 812fcb4:	10c00025 	stbio	r3,0(r2)
				addr = addr + (1 << offset_y);
 812fcb8:	e0fff717 	ldw	r3,-36(fp)
 812fcbc:	00800044 	movi	r2,1
 812fcc0:	10c4983a 	sll	r2,r2,r3
 812fcc4:	e0ffff17 	ldw	r3,-4(fp)
 812fcc8:	1887883a 	add	r3,r3,r2
 812fccc:	e0ffff15 	stw	r3,-4(fp)
		addr = addr + (t_y << offset_y);
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
 812fcd0:	e13ff817 	ldw	r4,-32(fp)
 812fcd4:	21000044 	addi	r4,r4,1
 812fcd8:	e13ff815 	stw	r4,-32(fp)
 812fcdc:	e0bffa17 	ldw	r2,-24(fp)
 812fce0:	e0fff817 	ldw	r3,-32(fp)
 812fce4:	10ffef2e 	bgeu	r2,r3,812fca4 <alt_up_pixel_buffer_dma_draw_vline+0x11c>
 812fce8:	00009706 	br	812ff48 <alt_up_pixel_buffer_dma_draw_vline+0x3c0>
			{
				IOWR_8DIRECT(addr, line_x, local_color);
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
 812fcec:	e0bff217 	ldw	r2,-56(fp)
 812fcf0:	10800e17 	ldw	r2,56(r2)
 812fcf4:	10800098 	cmpnei	r2,r2,2
 812fcf8:	1000181e 	bne	r2,zero,812fd5c <alt_up_pixel_buffer_dma_draw_vline+0x1d4>
			for (y = t_y; y <= b_y; y++)
 812fcfc:	e13ffb17 	ldw	r4,-20(fp)
 812fd00:	e13ff815 	stw	r4,-32(fp)
 812fd04:	00001106 	br	812fd4c <alt_up_pixel_buffer_dma_draw_vline+0x1c4>
			{
				IOWR_16DIRECT(addr, line_x << 1, local_color);
 812fd08:	e0fffc17 	ldw	r3,-16(fp)
 812fd0c:	e0fffc17 	ldw	r3,-16(fp)
 812fd10:	18c5883a 	add	r2,r3,r3
 812fd14:	1007883a 	mov	r3,r2
 812fd18:	e0bfff17 	ldw	r2,-4(fp)
 812fd1c:	1885883a 	add	r2,r3,r2
 812fd20:	e0fff917 	ldw	r3,-28(fp)
 812fd24:	10c0002d 	sthio	r3,0(r2)
				addr = addr + (1 << offset_y);
 812fd28:	e0fff717 	ldw	r3,-36(fp)
 812fd2c:	00800044 	movi	r2,1
 812fd30:	10c4983a 	sll	r2,r2,r3
 812fd34:	e13fff17 	ldw	r4,-4(fp)
 812fd38:	2089883a 	add	r4,r4,r2
 812fd3c:	e13fff15 	stw	r4,-4(fp)
			{
				IOWR_8DIRECT(addr, line_x, local_color);
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
 812fd40:	e0bff817 	ldw	r2,-32(fp)
 812fd44:	10800044 	addi	r2,r2,1
 812fd48:	e0bff815 	stw	r2,-32(fp)
 812fd4c:	e0fffa17 	ldw	r3,-24(fp)
 812fd50:	e13ff817 	ldw	r4,-32(fp)
 812fd54:	193fec2e 	bgeu	r3,r4,812fd08 <alt_up_pixel_buffer_dma_draw_vline+0x180>
 812fd58:	00007b06 	br	812ff48 <alt_up_pixel_buffer_dma_draw_vline+0x3c0>
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
 812fd5c:	e0bffb17 	ldw	r2,-20(fp)
 812fd60:	e0bff815 	stw	r2,-32(fp)
 812fd64:	00001206 	br	812fdb0 <alt_up_pixel_buffer_dma_draw_vline+0x228>
			{
				IOWR_32DIRECT(addr, line_x << 2, local_color);
 812fd68:	e0fffc17 	ldw	r3,-16(fp)
 812fd6c:	e0fffc17 	ldw	r3,-16(fp)
 812fd70:	18c5883a 	add	r2,r3,r3
 812fd74:	1085883a 	add	r2,r2,r2
 812fd78:	1007883a 	mov	r3,r2
 812fd7c:	e0bfff17 	ldw	r2,-4(fp)
 812fd80:	1885883a 	add	r2,r3,r2
 812fd84:	e0fff917 	ldw	r3,-28(fp)
 812fd88:	10c00035 	stwio	r3,0(r2)
				addr = addr + (1 << offset_y);
 812fd8c:	e0fff717 	ldw	r3,-36(fp)
 812fd90:	00800044 	movi	r2,1
 812fd94:	10c4983a 	sll	r2,r2,r3
 812fd98:	e13fff17 	ldw	r4,-4(fp)
 812fd9c:	2089883a 	add	r4,r4,r2
 812fda0:	e13fff15 	stw	r4,-4(fp)
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
 812fda4:	e0bff817 	ldw	r2,-32(fp)
 812fda8:	10800044 	addi	r2,r2,1
 812fdac:	e0bff815 	stw	r2,-32(fp)
 812fdb0:	e0fffa17 	ldw	r3,-24(fp)
 812fdb4:	e13ff817 	ldw	r4,-32(fp)
 812fdb8:	193feb2e 	bgeu	r3,r4,812fd68 <alt_up_pixel_buffer_dma_draw_vline+0x1e0>
 812fdbc:	00006206 	br	812ff48 <alt_up_pixel_buffer_dma_draw_vline+0x3c0>
	} else {
		/* Draw a vertical line of a given color on the screen using the linear addressing mode. */
		register unsigned int y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
 812fdc0:	e0bff217 	ldw	r2,-56(fp)
 812fdc4:	10800e17 	ldw	r2,56(r2)
 812fdc8:	10800058 	cmpnei	r2,r2,1
 812fdcc:	1000191e 	bne	r2,zero,812fe34 <alt_up_pixel_buffer_dma_draw_vline+0x2ac>
			addr = addr + t_y * limit_x;
 812fdd0:	e0fffb17 	ldw	r3,-20(fp)
 812fdd4:	e13ffe17 	ldw	r4,-8(fp)
 812fdd8:	1905383a 	mul	r2,r3,r4
 812fddc:	e0ffff17 	ldw	r3,-4(fp)
 812fde0:	1887883a 	add	r3,r3,r2
 812fde4:	e0ffff15 	stw	r3,-4(fp)
			for (y = t_y; y <= b_y; y++)
 812fde8:	e13ffb17 	ldw	r4,-20(fp)
 812fdec:	e13ff615 	stw	r4,-40(fp)
 812fdf0:	00000c06 	br	812fe24 <alt_up_pixel_buffer_dma_draw_vline+0x29c>
			{
				IOWR_8DIRECT(addr, line_x, local_color);
 812fdf4:	e0ffff17 	ldw	r3,-4(fp)
 812fdf8:	e0bffc17 	ldw	r2,-16(fp)
 812fdfc:	1885883a 	add	r2,r3,r2
 812fe00:	e0fff917 	ldw	r3,-28(fp)
 812fe04:	10c00025 	stbio	r3,0(r2)
				addr = addr + limit_x;
 812fe08:	e0bfff17 	ldw	r2,-4(fp)
 812fe0c:	e0fffe17 	ldw	r3,-8(fp)
 812fe10:	10c5883a 	add	r2,r2,r3
 812fe14:	e0bfff15 	stw	r2,-4(fp)
		register unsigned int y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
 812fe18:	e13ff617 	ldw	r4,-40(fp)
 812fe1c:	21000044 	addi	r4,r4,1
 812fe20:	e13ff615 	stw	r4,-40(fp)
 812fe24:	e0bffa17 	ldw	r2,-24(fp)
 812fe28:	e0fff617 	ldw	r3,-40(fp)
 812fe2c:	10fff12e 	bgeu	r2,r3,812fdf4 <alt_up_pixel_buffer_dma_draw_vline+0x26c>
 812fe30:	00004506 	br	812ff48 <alt_up_pixel_buffer_dma_draw_vline+0x3c0>
			{
				IOWR_8DIRECT(addr, line_x, local_color);
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
 812fe34:	e0bff217 	ldw	r2,-56(fp)
 812fe38:	10800e17 	ldw	r2,56(r2)
 812fe3c:	10800098 	cmpnei	r2,r2,2
 812fe40:	1000201e 	bne	r2,zero,812fec4 <alt_up_pixel_buffer_dma_draw_vline+0x33c>
			limit_x = limit_x << 1;
 812fe44:	e13ffe17 	ldw	r4,-8(fp)
 812fe48:	e13ffe17 	ldw	r4,-8(fp)
 812fe4c:	2105883a 	add	r2,r4,r4
 812fe50:	e0bffe15 	stw	r2,-8(fp)
			addr = addr + t_y * limit_x;
 812fe54:	e0fffb17 	ldw	r3,-20(fp)
 812fe58:	e13ffe17 	ldw	r4,-8(fp)
 812fe5c:	1905383a 	mul	r2,r3,r4
 812fe60:	e0ffff17 	ldw	r3,-4(fp)
 812fe64:	1887883a 	add	r3,r3,r2
 812fe68:	e0ffff15 	stw	r3,-4(fp)
			for (y = t_y; y <= b_y; y++)
 812fe6c:	e13ffb17 	ldw	r4,-20(fp)
 812fe70:	e13ff615 	stw	r4,-40(fp)
 812fe74:	00000f06 	br	812feb4 <alt_up_pixel_buffer_dma_draw_vline+0x32c>
			{
				IOWR_16DIRECT(addr, line_x << 1, local_color);
 812fe78:	e0fffc17 	ldw	r3,-16(fp)
 812fe7c:	e0fffc17 	ldw	r3,-16(fp)
 812fe80:	18c5883a 	add	r2,r3,r3
 812fe84:	1007883a 	mov	r3,r2
 812fe88:	e0bfff17 	ldw	r2,-4(fp)
 812fe8c:	1885883a 	add	r2,r3,r2
 812fe90:	e0fff917 	ldw	r3,-28(fp)
 812fe94:	10c0002d 	sthio	r3,0(r2)
				addr = addr + limit_x;
 812fe98:	e13fff17 	ldw	r4,-4(fp)
 812fe9c:	e0bffe17 	ldw	r2,-8(fp)
 812fea0:	2089883a 	add	r4,r4,r2
 812fea4:	e13fff15 	stw	r4,-4(fp)
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
 812fea8:	e0fff617 	ldw	r3,-40(fp)
 812feac:	18c00044 	addi	r3,r3,1
 812feb0:	e0fff615 	stw	r3,-40(fp)
 812feb4:	e13ffa17 	ldw	r4,-24(fp)
 812feb8:	e0bff617 	ldw	r2,-40(fp)
 812febc:	20bfee2e 	bgeu	r4,r2,812fe78 <alt_up_pixel_buffer_dma_draw_vline+0x2f0>
 812fec0:	00002106 	br	812ff48 <alt_up_pixel_buffer_dma_draw_vline+0x3c0>
				addr = addr + limit_x;
			}
		}
		else
		{
			limit_x = limit_x << 2;
 812fec4:	e0fffe17 	ldw	r3,-8(fp)
 812fec8:	e0fffe17 	ldw	r3,-8(fp)
 812fecc:	18c5883a 	add	r2,r3,r3
 812fed0:	1085883a 	add	r2,r2,r2
 812fed4:	e0bffe15 	stw	r2,-8(fp)
			addr = addr + t_y * limit_x;
 812fed8:	e13ffb17 	ldw	r4,-20(fp)
 812fedc:	e0fffe17 	ldw	r3,-8(fp)
 812fee0:	20c5383a 	mul	r2,r4,r3
 812fee4:	e13fff17 	ldw	r4,-4(fp)
 812fee8:	2089883a 	add	r4,r4,r2
 812feec:	e13fff15 	stw	r4,-4(fp)
			for (y = t_y; y <= b_y; y++)
 812fef0:	e0bffb17 	ldw	r2,-20(fp)
 812fef4:	e0bff615 	stw	r2,-40(fp)
 812fef8:	00001006 	br	812ff3c <alt_up_pixel_buffer_dma_draw_vline+0x3b4>
			{
				IOWR_32DIRECT(addr, line_x << 2, local_color);
 812fefc:	e0fffc17 	ldw	r3,-16(fp)
 812ff00:	e0fffc17 	ldw	r3,-16(fp)
 812ff04:	18c5883a 	add	r2,r3,r3
 812ff08:	1085883a 	add	r2,r2,r2
 812ff0c:	1007883a 	mov	r3,r2
 812ff10:	e0bfff17 	ldw	r2,-4(fp)
 812ff14:	1885883a 	add	r2,r3,r2
 812ff18:	e0fff917 	ldw	r3,-28(fp)
 812ff1c:	10c00035 	stwio	r3,0(r2)
				addr = addr + limit_x;
 812ff20:	e13fff17 	ldw	r4,-4(fp)
 812ff24:	e0bffe17 	ldw	r2,-8(fp)
 812ff28:	2089883a 	add	r4,r4,r2
 812ff2c:	e13fff15 	stw	r4,-4(fp)
		}
		else
		{
			limit_x = limit_x << 2;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
 812ff30:	e0fff617 	ldw	r3,-40(fp)
 812ff34:	18c00044 	addi	r3,r3,1
 812ff38:	e0fff615 	stw	r3,-40(fp)
 812ff3c:	e13ffa17 	ldw	r4,-24(fp)
 812ff40:	e0bff617 	ldw	r2,-40(fp)
 812ff44:	20bfed2e 	bgeu	r4,r2,812fefc <alt_up_pixel_buffer_dma_draw_vline+0x374>
				IOWR_32DIRECT(addr, line_x << 2, local_color);
				addr = addr + limit_x;
			}
		}
	}
}
 812ff48:	e037883a 	mov	sp,fp
 812ff4c:	df000017 	ldw	fp,0(sp)
 812ff50:	dec00104 	addi	sp,sp,4
 812ff54:	f800283a 	ret

0812ff58 <alt_up_pixel_buffer_dma_draw_rectangle>:

void alt_up_pixel_buffer_dma_draw_rectangle(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int y0, int x1, int y1, int color, int backbuffer)
{
 812ff58:	defff804 	addi	sp,sp,-32
 812ff5c:	dfc00715 	stw	ra,28(sp)
 812ff60:	df000615 	stw	fp,24(sp)
 812ff64:	df000604 	addi	fp,sp,24
 812ff68:	e13ffc15 	stw	r4,-16(fp)
 812ff6c:	e17ffd15 	stw	r5,-12(fp)
 812ff70:	e1bffe15 	stw	r6,-8(fp)
 812ff74:	e1ffff15 	stw	r7,-4(fp)
	alt_up_pixel_buffer_dma_draw_hline(pixel_buffer, x0, x1, y0, color, backbuffer);
 812ff78:	e0800317 	ldw	r2,12(fp)
 812ff7c:	d8800015 	stw	r2,0(sp)
 812ff80:	e0800417 	ldw	r2,16(fp)
 812ff84:	d8800115 	stw	r2,4(sp)
 812ff88:	e13ffc17 	ldw	r4,-16(fp)
 812ff8c:	e17ffd17 	ldw	r5,-12(fp)
 812ff90:	e1bfff17 	ldw	r6,-4(fp)
 812ff94:	e1fffe17 	ldw	r7,-8(fp)
 812ff98:	812f8380 	call	812f838 <alt_up_pixel_buffer_dma_draw_hline>
	alt_up_pixel_buffer_dma_draw_hline(pixel_buffer, x0, x1, y1, color, backbuffer);
 812ff9c:	e0800317 	ldw	r2,12(fp)
 812ffa0:	d8800015 	stw	r2,0(sp)
 812ffa4:	e0800417 	ldw	r2,16(fp)
 812ffa8:	d8800115 	stw	r2,4(sp)
 812ffac:	e13ffc17 	ldw	r4,-16(fp)
 812ffb0:	e17ffd17 	ldw	r5,-12(fp)
 812ffb4:	e1bfff17 	ldw	r6,-4(fp)
 812ffb8:	e1c00217 	ldw	r7,8(fp)
 812ffbc:	812f8380 	call	812f838 <alt_up_pixel_buffer_dma_draw_hline>
	alt_up_pixel_buffer_dma_draw_vline(pixel_buffer, x0, y0, y1, color, backbuffer);
 812ffc0:	e0800317 	ldw	r2,12(fp)
 812ffc4:	d8800015 	stw	r2,0(sp)
 812ffc8:	e0800417 	ldw	r2,16(fp)
 812ffcc:	d8800115 	stw	r2,4(sp)
 812ffd0:	e13ffc17 	ldw	r4,-16(fp)
 812ffd4:	e17ffd17 	ldw	r5,-12(fp)
 812ffd8:	e1bffe17 	ldw	r6,-8(fp)
 812ffdc:	e1c00217 	ldw	r7,8(fp)
 812ffe0:	812fb880 	call	812fb88 <alt_up_pixel_buffer_dma_draw_vline>
	alt_up_pixel_buffer_dma_draw_vline(pixel_buffer, x1, y0, y1, color, backbuffer);
 812ffe4:	e0800317 	ldw	r2,12(fp)
 812ffe8:	d8800015 	stw	r2,0(sp)
 812ffec:	e0800417 	ldw	r2,16(fp)
 812fff0:	d8800115 	stw	r2,4(sp)
 812fff4:	e13ffc17 	ldw	r4,-16(fp)
 812fff8:	e17fff17 	ldw	r5,-4(fp)
 812fffc:	e1bffe17 	ldw	r6,-8(fp)
 8130000:	e1c00217 	ldw	r7,8(fp)
 8130004:	812fb880 	call	812fb88 <alt_up_pixel_buffer_dma_draw_vline>
}
 8130008:	e037883a 	mov	sp,fp
 813000c:	dfc00117 	ldw	ra,4(sp)
 8130010:	df000017 	ldw	fp,0(sp)
 8130014:	dec00204 	addi	sp,sp,8
 8130018:	f800283a 	ret

0813001c <helper_plot_pixel>:

void helper_plot_pixel(register unsigned int buffer_start, register int line_size, register int x, register int y, register int color, register int mode)
/* This is a helper function that draws a pixel at a given location. Note that no boundary checks are made,
 * so drawing off-screen may cause unpredictable side effects. */
{
 813001c:	defffb04 	addi	sp,sp,-20
 8130020:	df000415 	stw	fp,16(sp)
 8130024:	df000404 	addi	fp,sp,16
 8130028:	e13ffc15 	stw	r4,-16(fp)
 813002c:	e17ffd15 	stw	r5,-12(fp)
 8130030:	e1bffe15 	stw	r6,-8(fp)
 8130034:	e1ffff15 	stw	r7,-4(fp)
	if (mode == 0)
 8130038:	e0c00217 	ldw	r3,8(fp)
 813003c:	1804c03a 	cmpne	r2,r3,zero
 8130040:	10000b1e 	bne	r2,zero,8130070 <helper_plot_pixel+0x54>
		IOWR_8DIRECT(buffer_start, line_size*y+x, color);
 8130044:	e13ffd17 	ldw	r4,-12(fp)
 8130048:	e0ffff17 	ldw	r3,-4(fp)
 813004c:	20c5383a 	mul	r2,r4,r3
 8130050:	e13ffe17 	ldw	r4,-8(fp)
 8130054:	1105883a 	add	r2,r2,r4
 8130058:	1007883a 	mov	r3,r2
 813005c:	e0bffc17 	ldw	r2,-16(fp)
 8130060:	1885883a 	add	r2,r3,r2
 8130064:	e0c00117 	ldw	r3,4(fp)
 8130068:	10c00025 	stbio	r3,0(r2)
 813006c:	00001b06 	br	81300dc <helper_plot_pixel+0xc0>
	else if (mode == 1)
 8130070:	e1000217 	ldw	r4,8(fp)
 8130074:	20800058 	cmpnei	r2,r4,1
 8130078:	10000c1e 	bne	r2,zero,81300ac <helper_plot_pixel+0x90>
		IOWR_16DIRECT(buffer_start, (line_size*y+x) << 1, color);
 813007c:	e0fffd17 	ldw	r3,-12(fp)
 8130080:	e13fff17 	ldw	r4,-4(fp)
 8130084:	1905383a 	mul	r2,r3,r4
 8130088:	e0fffe17 	ldw	r3,-8(fp)
 813008c:	10c5883a 	add	r2,r2,r3
 8130090:	1085883a 	add	r2,r2,r2
 8130094:	1007883a 	mov	r3,r2
 8130098:	e0bffc17 	ldw	r2,-16(fp)
 813009c:	1885883a 	add	r2,r3,r2
 81300a0:	e1000117 	ldw	r4,4(fp)
 81300a4:	1100002d 	sthio	r4,0(r2)
 81300a8:	00000c06 	br	81300dc <helper_plot_pixel+0xc0>
	else
		IOWR_32DIRECT(buffer_start, (line_size*y+x) << 2, color);
 81300ac:	e0fffd17 	ldw	r3,-12(fp)
 81300b0:	e13fff17 	ldw	r4,-4(fp)
 81300b4:	1905383a 	mul	r2,r3,r4
 81300b8:	e0fffe17 	ldw	r3,-8(fp)
 81300bc:	10c5883a 	add	r2,r2,r3
 81300c0:	1085883a 	add	r2,r2,r2
 81300c4:	1085883a 	add	r2,r2,r2
 81300c8:	1007883a 	mov	r3,r2
 81300cc:	e0bffc17 	ldw	r2,-16(fp)
 81300d0:	1885883a 	add	r2,r3,r2
 81300d4:	e1000117 	ldw	r4,4(fp)
 81300d8:	11000035 	stwio	r4,0(r2)
}
 81300dc:	e037883a 	mov	sp,fp
 81300e0:	df000017 	ldw	fp,0(sp)
 81300e4:	dec00104 	addi	sp,sp,4
 81300e8:	f800283a 	ret

081300ec <alt_up_pixel_buffer_dma_draw_line>:

void alt_up_pixel_buffer_dma_draw_line(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int y0, int x1, int y1, int color, int backbuffer)
/* This function draws a line between points (x0, y0) and (x1, y1). The function does not check if it draws a pixel within screen boundaries.
 * users should ensure that the line is drawn within the screen boundaries. */
{
 81300ec:	deffe404 	addi	sp,sp,-112
 81300f0:	dfc01b15 	stw	ra,108(sp)
 81300f4:	df001a15 	stw	fp,104(sp)
 81300f8:	df001a04 	addi	fp,sp,104
 81300fc:	e13fe815 	stw	r4,-96(fp)
 8130100:	e17fe915 	stw	r5,-92(fp)
 8130104:	e1bfea15 	stw	r6,-88(fp)
 8130108:	e1ffeb15 	stw	r7,-84(fp)
	register int x_0 = x0;
 813010c:	e0bfe917 	ldw	r2,-92(fp)
 8130110:	e0bffa15 	stw	r2,-24(fp)
	register int y_0 = y0;
 8130114:	e0ffea17 	ldw	r3,-88(fp)
 8130118:	e0fff915 	stw	r3,-28(fp)
	register int x_1 = x1;
 813011c:	e13feb17 	ldw	r4,-84(fp)
 8130120:	e13ff815 	stw	r4,-32(fp)
	register int y_1 = y1;
 8130124:	e0800217 	ldw	r2,8(fp)
 8130128:	e0bff715 	stw	r2,-36(fp)
	register char steep = (ABS(y_1 - y_0) > ABS(x_1 - x_0)) ? 1 : 0;
 813012c:	e0fff717 	ldw	r3,-36(fp)
 8130130:	e13ff917 	ldw	r4,-28(fp)
 8130134:	1905c83a 	sub	r2,r3,r4
 8130138:	e0bfff15 	stw	r2,-4(fp)
 813013c:	e0ffff17 	ldw	r3,-4(fp)
 8130140:	1804403a 	cmpge	r2,r3,zero
 8130144:	1000031e 	bne	r2,zero,8130154 <alt_up_pixel_buffer_dma_draw_line+0x68>
 8130148:	e13fff17 	ldw	r4,-4(fp)
 813014c:	0109c83a 	sub	r4,zero,r4
 8130150:	e13fff15 	stw	r4,-4(fp)
 8130154:	e0fff817 	ldw	r3,-32(fp)
 8130158:	e13ffa17 	ldw	r4,-24(fp)
 813015c:	1905c83a 	sub	r2,r3,r4
 8130160:	e0bffe15 	stw	r2,-8(fp)
 8130164:	e0fffe17 	ldw	r3,-8(fp)
 8130168:	1804403a 	cmpge	r2,r3,zero
 813016c:	1000031e 	bne	r2,zero,813017c <alt_up_pixel_buffer_dma_draw_line+0x90>
 8130170:	e13ffe17 	ldw	r4,-8(fp)
 8130174:	0109c83a 	sub	r4,zero,r4
 8130178:	e13ffe15 	stw	r4,-8(fp)
 813017c:	e0fffe17 	ldw	r3,-8(fp)
 8130180:	e13fff17 	ldw	r4,-4(fp)
 8130184:	1904803a 	cmplt	r2,r3,r4
 8130188:	e0bff605 	stb	r2,-40(fp)
	register int deltax, deltay, error, ystep, x, y;
	register int color_mode =	(pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) ? 0 :
								(pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) ? 1 : 2;
 813018c:	e0bfe817 	ldw	r2,-96(fp)
 8130190:	10800e17 	ldw	r2,56(r2)
 8130194:	10800060 	cmpeqi	r2,r2,1
 8130198:	10000c1e 	bne	r2,zero,81301cc <alt_up_pixel_buffer_dma_draw_line+0xe0>
 813019c:	e0bfe817 	ldw	r2,-96(fp)
 81301a0:	10800e17 	ldw	r2,56(r2)
 81301a4:	10800098 	cmpnei	r2,r2,2
 81301a8:	1000031e 	bne	r2,zero,81301b8 <alt_up_pixel_buffer_dma_draw_line+0xcc>
 81301ac:	00800044 	movi	r2,1
 81301b0:	e0bffc15 	stw	r2,-16(fp)
 81301b4:	00000206 	br	81301c0 <alt_up_pixel_buffer_dma_draw_line+0xd4>
 81301b8:	00c00084 	movi	r3,2
 81301bc:	e0fffc15 	stw	r3,-16(fp)
 81301c0:	e13ffc17 	ldw	r4,-16(fp)
 81301c4:	e13ffd15 	stw	r4,-12(fp)
 81301c8:	00000106 	br	81301d0 <alt_up_pixel_buffer_dma_draw_line+0xe4>
 81301cc:	e03ffd15 	stw	zero,-12(fp)
 81301d0:	e0bffd17 	ldw	r2,-12(fp)
 81301d4:	e0bfef15 	stw	r2,-68(fp)
	register int line_color = color;
 81301d8:	e0c00317 	ldw	r3,12(fp)
 81301dc:	e0ffee15 	stw	r3,-72(fp)
	register unsigned int buffer_start;
	register int line_size = (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) ? (1 << (pixel_buffer->y_coord_offset-color_mode)) : pixel_buffer->x_resolution;
 81301e0:	e0bfe817 	ldw	r2,-96(fp)
 81301e4:	10800d17 	ldw	r2,52(r2)
 81301e8:	1004c03a 	cmpne	r2,r2,zero
 81301ec:	1000091e 	bne	r2,zero,8130214 <alt_up_pixel_buffer_dma_draw_line+0x128>
 81301f0:	e0bfe817 	ldw	r2,-96(fp)
 81301f4:	10c01317 	ldw	r3,76(r2)
 81301f8:	e0bfef17 	ldw	r2,-68(fp)
 81301fc:	1885c83a 	sub	r2,r3,r2
 8130200:	1007883a 	mov	r3,r2
 8130204:	00800044 	movi	r2,1
 8130208:	10c4983a 	sll	r2,r2,r3
 813020c:	e0bffb15 	stw	r2,-20(fp)
 8130210:	00000306 	br	8130220 <alt_up_pixel_buffer_dma_draw_line+0x134>
 8130214:	e0bfe817 	ldw	r2,-96(fp)
 8130218:	10800f17 	ldw	r2,60(r2)
 813021c:	e0bffb15 	stw	r2,-20(fp)
 8130220:	e13ffb17 	ldw	r4,-20(fp)
 8130224:	e13fec15 	stw	r4,-80(fp)

	if (backbuffer == 1)
 8130228:	e0800417 	ldw	r2,16(fp)
 813022c:	10800058 	cmpnei	r2,r2,1
 8130230:	1000041e 	bne	r2,zero,8130244 <alt_up_pixel_buffer_dma_draw_line+0x158>
		buffer_start = pixel_buffer->back_buffer_start_address;
 8130234:	e0bfe817 	ldw	r2,-96(fp)
 8130238:	10800c17 	ldw	r2,48(r2)
 813023c:	e0bfed15 	stw	r2,-76(fp)
 8130240:	00000306 	br	8130250 <alt_up_pixel_buffer_dma_draw_line+0x164>
	else
		buffer_start = pixel_buffer->buffer_start_address;
 8130244:	e0bfe817 	ldw	r2,-96(fp)
 8130248:	10800b17 	ldw	r2,44(r2)
 813024c:	e0bfed15 	stw	r2,-76(fp)

	/* Preprocessing inputs */
	if (steep > 0) {
 8130250:	e0fff603 	ldbu	r3,-40(fp)
 8130254:	18803fcc 	andi	r2,r3,255
 8130258:	1080201c 	xori	r2,r2,128
 813025c:	10bfe004 	addi	r2,r2,-128
 8130260:	10800050 	cmplti	r2,r2,1
 8130264:	10000c1e 	bne	r2,zero,8130298 <alt_up_pixel_buffer_dma_draw_line+0x1ac>
		// Swap x_0 and y_0
		error = x_0;
 8130268:	e13ffa17 	ldw	r4,-24(fp)
 813026c:	e13ff315 	stw	r4,-52(fp)
		x_0 = y_0;
 8130270:	e0bff917 	ldw	r2,-28(fp)
 8130274:	e0bffa15 	stw	r2,-24(fp)
		y_0 = error;
 8130278:	e0fff317 	ldw	r3,-52(fp)
 813027c:	e0fff915 	stw	r3,-28(fp)
		// Swap x_1 and y_1
		error = x_1;
 8130280:	e13ff817 	ldw	r4,-32(fp)
 8130284:	e13ff315 	stw	r4,-52(fp)
		x_1 = y_1;
 8130288:	e0bff717 	ldw	r2,-36(fp)
 813028c:	e0bff815 	stw	r2,-32(fp)
		y_1 = error;
 8130290:	e0fff317 	ldw	r3,-52(fp)
 8130294:	e0fff715 	stw	r3,-36(fp)
	}
	if (x_0 > x_1) {
 8130298:	e13ff817 	ldw	r4,-32(fp)
 813029c:	e0bffa17 	ldw	r2,-24(fp)
 81302a0:	20800c0e 	bge	r4,r2,81302d4 <alt_up_pixel_buffer_dma_draw_line+0x1e8>
		// Swap x_0 and x_1
		error = x_0;
 81302a4:	e0fffa17 	ldw	r3,-24(fp)
 81302a8:	e0fff315 	stw	r3,-52(fp)
		x_0 = x_1;
 81302ac:	e13ff817 	ldw	r4,-32(fp)
 81302b0:	e13ffa15 	stw	r4,-24(fp)
		x_1 = error;
 81302b4:	e0bff317 	ldw	r2,-52(fp)
 81302b8:	e0bff815 	stw	r2,-32(fp)
		// Swap y_0 and y_1
		error = y_0;
 81302bc:	e0fff917 	ldw	r3,-28(fp)
 81302c0:	e0fff315 	stw	r3,-52(fp)
		y_0 = y_1;
 81302c4:	e13ff717 	ldw	r4,-36(fp)
 81302c8:	e13ff915 	stw	r4,-28(fp)
		y_1 = error;
 81302cc:	e0bff317 	ldw	r2,-52(fp)
 81302d0:	e0bff715 	stw	r2,-36(fp)
	}

	/* Setup local variables */
	deltax = x_1 - x_0;
 81302d4:	e0fff817 	ldw	r3,-32(fp)
 81302d8:	e13ffa17 	ldw	r4,-24(fp)
 81302dc:	1907c83a 	sub	r3,r3,r4
 81302e0:	e0fff515 	stw	r3,-44(fp)
	deltay = ABS(y_1 - y_0);
 81302e4:	e0fff717 	ldw	r3,-36(fp)
 81302e8:	e13ff917 	ldw	r4,-28(fp)
 81302ec:	1905c83a 	sub	r2,r3,r4
 81302f0:	e0bff415 	stw	r2,-48(fp)
 81302f4:	e0fff417 	ldw	r3,-48(fp)
 81302f8:	1804403a 	cmpge	r2,r3,zero
 81302fc:	1000031e 	bne	r2,zero,813030c <alt_up_pixel_buffer_dma_draw_line+0x220>
 8130300:	e13ff417 	ldw	r4,-48(fp)
 8130304:	0109c83a 	sub	r4,zero,r4
 8130308:	e13ff415 	stw	r4,-48(fp)
	error = -(deltax / 2); 
 813030c:	e0fff517 	ldw	r3,-44(fp)
 8130310:	1804d7fa 	srli	r2,r3,31
 8130314:	e13ff517 	ldw	r4,-44(fp)
 8130318:	1105883a 	add	r2,r2,r4
 813031c:	1005d07a 	srai	r2,r2,1
 8130320:	0085c83a 	sub	r2,zero,r2
 8130324:	e0bff315 	stw	r2,-52(fp)
	y = y_0;
 8130328:	e0bff917 	ldw	r2,-28(fp)
 813032c:	e0bff015 	stw	r2,-64(fp)
	if (y_0 < y_1)
 8130330:	e0fff917 	ldw	r3,-28(fp)
 8130334:	e13ff717 	ldw	r4,-36(fp)
 8130338:	1900030e 	bge	r3,r4,8130348 <alt_up_pixel_buffer_dma_draw_line+0x25c>
		ystep = 1;
 813033c:	00800044 	movi	r2,1
 8130340:	e0bff215 	stw	r2,-56(fp)
 8130344:	00000206 	br	8130350 <alt_up_pixel_buffer_dma_draw_line+0x264>
	else
		ystep = -1;
 8130348:	00ffffc4 	movi	r3,-1
 813034c:	e0fff215 	stw	r3,-56(fp)

	/* Draw a line - either go along the x axis (steep = 0) or along the y axis (steep = 1). The code is replicated to
	 * compile well on low optimization levels. */
	if (steep == 1)
 8130350:	e13ff603 	ldbu	r4,-40(fp)
 8130354:	20803fcc 	andi	r2,r4,255
 8130358:	1080201c 	xori	r2,r2,128
 813035c:	10bfe004 	addi	r2,r2,-128
 8130360:	10800058 	cmpnei	r2,r2,1
 8130364:	1000221e 	bne	r2,zero,81303f0 <alt_up_pixel_buffer_dma_draw_line+0x304>
	{
		for (x=x_0; x <= x_1; x++) {
 8130368:	e0bffa17 	ldw	r2,-24(fp)
 813036c:	e0bff115 	stw	r2,-60(fp)
 8130370:	00001b06 	br	81303e0 <alt_up_pixel_buffer_dma_draw_line+0x2f4>
			helper_plot_pixel(buffer_start, line_size, y, x, line_color, color_mode);
 8130374:	e0ffee17 	ldw	r3,-72(fp)
 8130378:	d8c00015 	stw	r3,0(sp)
 813037c:	e13fef17 	ldw	r4,-68(fp)
 8130380:	d9000115 	stw	r4,4(sp)
 8130384:	e13fed17 	ldw	r4,-76(fp)
 8130388:	e17fec17 	ldw	r5,-80(fp)
 813038c:	e1bff017 	ldw	r6,-64(fp)
 8130390:	e1fff117 	ldw	r7,-60(fp)
 8130394:	813001c0 	call	813001c <helper_plot_pixel>
			error = error + deltay;
 8130398:	e0bff317 	ldw	r2,-52(fp)
 813039c:	e0fff417 	ldw	r3,-48(fp)
 81303a0:	10c5883a 	add	r2,r2,r3
 81303a4:	e0bff315 	stw	r2,-52(fp)
			if (error > 0) {
 81303a8:	e13ff317 	ldw	r4,-52(fp)
 81303ac:	20800050 	cmplti	r2,r4,1
 81303b0:	1000081e 	bne	r2,zero,81303d4 <alt_up_pixel_buffer_dma_draw_line+0x2e8>
				y = y + ystep;
 81303b4:	e0bff017 	ldw	r2,-64(fp)
 81303b8:	e0fff217 	ldw	r3,-56(fp)
 81303bc:	10c5883a 	add	r2,r2,r3
 81303c0:	e0bff015 	stw	r2,-64(fp)
				error = error - deltax;
 81303c4:	e13ff317 	ldw	r4,-52(fp)
 81303c8:	e0bff517 	ldw	r2,-44(fp)
 81303cc:	2089c83a 	sub	r4,r4,r2
 81303d0:	e13ff315 	stw	r4,-52(fp)

	/* Draw a line - either go along the x axis (steep = 0) or along the y axis (steep = 1). The code is replicated to
	 * compile well on low optimization levels. */
	if (steep == 1)
	{
		for (x=x_0; x <= x_1; x++) {
 81303d4:	e0fff117 	ldw	r3,-60(fp)
 81303d8:	18c00044 	addi	r3,r3,1
 81303dc:	e0fff115 	stw	r3,-60(fp)
 81303e0:	e13ff817 	ldw	r4,-32(fp)
 81303e4:	e0bff117 	ldw	r2,-60(fp)
 81303e8:	20bfe20e 	bge	r4,r2,8130374 <alt_up_pixel_buffer_dma_draw_line+0x288>
 81303ec:	00002106 	br	8130474 <alt_up_pixel_buffer_dma_draw_line+0x388>
			}
		}
	}
	else
	{
		for (x=x_0; x <= x_1; x++) {
 81303f0:	e0fffa17 	ldw	r3,-24(fp)
 81303f4:	e0fff115 	stw	r3,-60(fp)
 81303f8:	00001b06 	br	8130468 <alt_up_pixel_buffer_dma_draw_line+0x37c>
			helper_plot_pixel(buffer_start, line_size, x, y, line_color, color_mode);
 81303fc:	e13fee17 	ldw	r4,-72(fp)
 8130400:	d9000015 	stw	r4,0(sp)
 8130404:	e0bfef17 	ldw	r2,-68(fp)
 8130408:	d8800115 	stw	r2,4(sp)
 813040c:	e13fed17 	ldw	r4,-76(fp)
 8130410:	e17fec17 	ldw	r5,-80(fp)
 8130414:	e1bff117 	ldw	r6,-60(fp)
 8130418:	e1fff017 	ldw	r7,-64(fp)
 813041c:	813001c0 	call	813001c <helper_plot_pixel>
			error = error + deltay;
 8130420:	e0fff317 	ldw	r3,-52(fp)
 8130424:	e13ff417 	ldw	r4,-48(fp)
 8130428:	1907883a 	add	r3,r3,r4
 813042c:	e0fff315 	stw	r3,-52(fp)
			if (error > 0) {
 8130430:	e0fff317 	ldw	r3,-52(fp)
 8130434:	18800050 	cmplti	r2,r3,1
 8130438:	1000081e 	bne	r2,zero,813045c <alt_up_pixel_buffer_dma_draw_line+0x370>
				y = y + ystep;
 813043c:	e13ff017 	ldw	r4,-64(fp)
 8130440:	e0bff217 	ldw	r2,-56(fp)
 8130444:	2089883a 	add	r4,r4,r2
 8130448:	e13ff015 	stw	r4,-64(fp)
				error = error - deltax;
 813044c:	e0fff317 	ldw	r3,-52(fp)
 8130450:	e13ff517 	ldw	r4,-44(fp)
 8130454:	1907c83a 	sub	r3,r3,r4
 8130458:	e0fff315 	stw	r3,-52(fp)
			}
		}
	}
	else
	{
		for (x=x_0; x <= x_1; x++) {
 813045c:	e0bff117 	ldw	r2,-60(fp)
 8130460:	10800044 	addi	r2,r2,1
 8130464:	e0bff115 	stw	r2,-60(fp)
 8130468:	e0fff817 	ldw	r3,-32(fp)
 813046c:	e13ff117 	ldw	r4,-60(fp)
 8130470:	193fe20e 	bge	r3,r4,81303fc <alt_up_pixel_buffer_dma_draw_line+0x310>
				y = y + ystep;
				error = error - deltax;
			}
		}
	}
}
 8130474:	e037883a 	mov	sp,fp
 8130478:	dfc00117 	ldw	ra,4(sp)
 813047c:	df000017 	ldw	fp,0(sp)
 8130480:	dec00204 	addi	sp,sp,8
 8130484:	f800283a 	ret

08130488 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
 8130488:	defff404 	addi	sp,sp,-48
 813048c:	df000b15 	stw	fp,44(sp)
 8130490:	df000b04 	addi	fp,sp,44
 8130494:	e13ffb15 	stw	r4,-20(fp)
 8130498:	e17ffc15 	stw	r5,-16(fp)
 813049c:	e1bffd15 	stw	r6,-12(fp)
 81304a0:	e1fffe15 	stw	r7,-8(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
 81304a4:	e03ff915 	stw	zero,-28(fp)
 81304a8:	008204f4 	movhi	r2,2067
 81304ac:	10956904 	addi	r2,r2,21924
 81304b0:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
 81304b4:	1005003a 	cmpeq	r2,r2,zero
 81304b8:	1000411e 	bne	r2,zero,81305c0 <alt_alarm_start+0x138>
  {
    if (alarm)
 81304bc:	e0bffb17 	ldw	r2,-20(fp)
 81304c0:	1005003a 	cmpeq	r2,r2,zero
 81304c4:	10003b1e 	bne	r2,zero,81305b4 <alt_alarm_start+0x12c>
    {
      alarm->callback = callback;
 81304c8:	e0fffb17 	ldw	r3,-20(fp)
 81304cc:	e0bffd17 	ldw	r2,-12(fp)
 81304d0:	18800315 	stw	r2,12(r3)
      alarm->context  = context;
 81304d4:	e0fffb17 	ldw	r3,-20(fp)
 81304d8:	e0bffe17 	ldw	r2,-8(fp)
 81304dc:	18800515 	stw	r2,20(r3)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 81304e0:	0005303a 	rdctl	r2,status
 81304e4:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 81304e8:	e0fff817 	ldw	r3,-32(fp)
 81304ec:	00bfff84 	movi	r2,-2
 81304f0:	1884703a 	and	r2,r3,r2
 81304f4:	1001703a 	wrctl	status,r2
  
  return context;
 81304f8:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
 81304fc:	e0bffa15 	stw	r2,-24(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 8130500:	008204f4 	movhi	r2,2067
 8130504:	10956a04 	addi	r2,r2,21928
 8130508:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
 813050c:	e0bff915 	stw	r2,-28(fp)
      
      alarm->time = nticks + current_nticks + 1; 
 8130510:	e0fffc17 	ldw	r3,-16(fp)
 8130514:	e0bff917 	ldw	r2,-28(fp)
 8130518:	1885883a 	add	r2,r3,r2
 813051c:	10c00044 	addi	r3,r2,1
 8130520:	e0bffb17 	ldw	r2,-20(fp)
 8130524:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
 8130528:	e0bffb17 	ldw	r2,-20(fp)
 813052c:	10c00217 	ldw	r3,8(r2)
 8130530:	e0bff917 	ldw	r2,-28(fp)
 8130534:	1880042e 	bgeu	r3,r2,8130548 <alt_alarm_start+0xc0>
      {
        alarm->rollover = 1;
 8130538:	e0fffb17 	ldw	r3,-20(fp)
 813053c:	00800044 	movi	r2,1
 8130540:	18800405 	stb	r2,16(r3)
 8130544:	00000206 	br	8130550 <alt_alarm_start+0xc8>
      }
      else
      {
        alarm->rollover = 0;
 8130548:	e0bffb17 	ldw	r2,-20(fp)
 813054c:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
 8130550:	e0fffb17 	ldw	r3,-20(fp)
 8130554:	008204f4 	movhi	r2,2067
 8130558:	108e6404 	addi	r2,r2,14736
 813055c:	e0bff615 	stw	r2,-40(fp)
 8130560:	e0fff715 	stw	r3,-36(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 8130564:	e0fff717 	ldw	r3,-36(fp)
 8130568:	e0bff617 	ldw	r2,-40(fp)
 813056c:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
 8130570:	e0bff617 	ldw	r2,-40(fp)
 8130574:	10c00017 	ldw	r3,0(r2)
 8130578:	e0bff717 	ldw	r2,-36(fp)
 813057c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 8130580:	e0bff617 	ldw	r2,-40(fp)
 8130584:	10c00017 	ldw	r3,0(r2)
 8130588:	e0bff717 	ldw	r2,-36(fp)
 813058c:	18800115 	stw	r2,4(r3)
  list->next           = entry;
 8130590:	e0fff617 	ldw	r3,-40(fp)
 8130594:	e0bff717 	ldw	r2,-36(fp)
 8130598:	18800015 	stw	r2,0(r3)
 813059c:	e0bffa17 	ldw	r2,-24(fp)
 81305a0:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 81305a4:	e0bff517 	ldw	r2,-44(fp)
 81305a8:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
 81305ac:	e03fff15 	stw	zero,-4(fp)
 81305b0:	00000506 	br	81305c8 <alt_alarm_start+0x140>
    }
    else
    {
      return -EINVAL;
 81305b4:	00bffa84 	movi	r2,-22
 81305b8:	e0bfff15 	stw	r2,-4(fp)
 81305bc:	00000206 	br	81305c8 <alt_alarm_start+0x140>
    }
  }
  else
  {
    return -ENOTSUP;
 81305c0:	00bfde84 	movi	r2,-134
 81305c4:	e0bfff15 	stw	r2,-4(fp)
 81305c8:	e0bfff17 	ldw	r2,-4(fp)
  }
}
 81305cc:	e037883a 	mov	sp,fp
 81305d0:	df000017 	ldw	fp,0(sp)
 81305d4:	dec00104 	addi	sp,sp,4
 81305d8:	f800283a 	ret

081305dc <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 81305dc:	defffe04 	addi	sp,sp,-8
 81305e0:	df000115 	stw	fp,4(sp)
 81305e4:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
 81305e8:	e03fff15 	stw	zero,-4(fp)
 81305ec:	00000506 	br	8130604 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
 81305f0:	e0bfff17 	ldw	r2,-4(fp)
 81305f4:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
 81305f8:	e0bfff17 	ldw	r2,-4(fp)
 81305fc:	10800804 	addi	r2,r2,32
 8130600:	e0bfff15 	stw	r2,-4(fp)
 8130604:	e0bfff17 	ldw	r2,-4(fp)
 8130608:	10810030 	cmpltui	r2,r2,1024
 813060c:	103ff81e 	bne	r2,zero,81305f0 <alt_dcache_flush_all+0x14>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 8130610:	e037883a 	mov	sp,fp
 8130614:	df000017 	ldw	fp,0(sp)
 8130618:	dec00104 	addi	sp,sp,4
 813061c:	f800283a 	ret

08130620 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
 8130620:	defff904 	addi	sp,sp,-28
 8130624:	dfc00615 	stw	ra,24(sp)
 8130628:	df000515 	stw	fp,20(sp)
 813062c:	df000504 	addi	fp,sp,20
 8130630:	e13ffd15 	stw	r4,-12(fp)
 8130634:	e17ffe15 	stw	r5,-8(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
 8130638:	e0bffd17 	ldw	r2,-12(fp)
 813063c:	1005003a 	cmpeq	r2,r2,zero
 8130640:	1000041e 	bne	r2,zero,8130654 <alt_dev_llist_insert+0x34>
 8130644:	e0bffd17 	ldw	r2,-12(fp)
 8130648:	10800217 	ldw	r2,8(r2)
 813064c:	1004c03a 	cmpne	r2,r2,zero
 8130650:	1000071e 	bne	r2,zero,8130670 <alt_dev_llist_insert+0x50>
  {
    ALT_ERRNO = EINVAL;
 8130654:	81306d40 	call	81306d4 <alt_get_errno>
 8130658:	1007883a 	mov	r3,r2
 813065c:	00800584 	movi	r2,22
 8130660:	18800015 	stw	r2,0(r3)
    return -EINVAL;
 8130664:	00bffa84 	movi	r2,-22
 8130668:	e0bfff15 	stw	r2,-4(fp)
 813066c:	00001306 	br	81306bc <alt_dev_llist_insert+0x9c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
 8130670:	e0fffd17 	ldw	r3,-12(fp)
 8130674:	e0bffe17 	ldw	r2,-8(fp)
 8130678:	e0bffb15 	stw	r2,-20(fp)
 813067c:	e0fffc15 	stw	r3,-16(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 8130680:	e0fffc17 	ldw	r3,-16(fp)
 8130684:	e0bffb17 	ldw	r2,-20(fp)
 8130688:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
 813068c:	e0bffb17 	ldw	r2,-20(fp)
 8130690:	10c00017 	ldw	r3,0(r2)
 8130694:	e0bffc17 	ldw	r2,-16(fp)
 8130698:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 813069c:	e0bffb17 	ldw	r2,-20(fp)
 81306a0:	10c00017 	ldw	r3,0(r2)
 81306a4:	e0bffc17 	ldw	r2,-16(fp)
 81306a8:	18800115 	stw	r2,4(r3)
  list->next           = entry;
 81306ac:	e0fffb17 	ldw	r3,-20(fp)
 81306b0:	e0bffc17 	ldw	r2,-16(fp)
 81306b4:	18800015 	stw	r2,0(r3)

  return 0;  
 81306b8:	e03fff15 	stw	zero,-4(fp)
 81306bc:	e0bfff17 	ldw	r2,-4(fp)
}
 81306c0:	e037883a 	mov	sp,fp
 81306c4:	dfc00117 	ldw	ra,4(sp)
 81306c8:	df000017 	ldw	fp,0(sp)
 81306cc:	dec00204 	addi	sp,sp,8
 81306d0:	f800283a 	ret

081306d4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 81306d4:	defffd04 	addi	sp,sp,-12
 81306d8:	dfc00215 	stw	ra,8(sp)
 81306dc:	df000115 	stw	fp,4(sp)
 81306e0:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 81306e4:	008204f4 	movhi	r2,2067
 81306e8:	108e5d04 	addi	r2,r2,14708
 81306ec:	10800017 	ldw	r2,0(r2)
 81306f0:	1005003a 	cmpeq	r2,r2,zero
 81306f4:	1000061e 	bne	r2,zero,8130710 <alt_get_errno+0x3c>
 81306f8:	008204f4 	movhi	r2,2067
 81306fc:	108e5d04 	addi	r2,r2,14708
 8130700:	10800017 	ldw	r2,0(r2)
 8130704:	103ee83a 	callr	r2
 8130708:	e0bfff15 	stw	r2,-4(fp)
 813070c:	00000306 	br	813071c <alt_get_errno+0x48>
 8130710:	008204f4 	movhi	r2,2067
 8130714:	10956404 	addi	r2,r2,21904
 8130718:	e0bfff15 	stw	r2,-4(fp)
 813071c:	e0bfff17 	ldw	r2,-4(fp)
}
 8130720:	e037883a 	mov	sp,fp
 8130724:	dfc00117 	ldw	ra,4(sp)
 8130728:	df000017 	ldw	fp,0(sp)
 813072c:	dec00204 	addi	sp,sp,8
 8130730:	f800283a 	ret

08130734 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
 8130734:	defffd04 	addi	sp,sp,-12
 8130738:	dfc00215 	stw	ra,8(sp)
 813073c:	df000115 	stw	fp,4(sp)
 8130740:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 8130744:	00bfff04 	movi	r2,-4
 8130748:	00c204f4 	movhi	r3,2067
 813074c:	18c60c04 	addi	r3,r3,6192
 8130750:	1885883a 	add	r2,r3,r2
 8130754:	e0bfff15 	stw	r2,-4(fp)
 8130758:	00000606 	br	8130774 <_do_ctors+0x40>
        (*ctor) (); 
 813075c:	e0bfff17 	ldw	r2,-4(fp)
 8130760:	10800017 	ldw	r2,0(r2)
 8130764:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 8130768:	e0bfff17 	ldw	r2,-4(fp)
 813076c:	10bfff04 	addi	r2,r2,-4
 8130770:	e0bfff15 	stw	r2,-4(fp)
 8130774:	e0ffff17 	ldw	r3,-4(fp)
 8130778:	008204f4 	movhi	r2,2067
 813077c:	10860b04 	addi	r2,r2,6188
 8130780:	18bff62e 	bgeu	r3,r2,813075c <_do_ctors+0x28>
        (*ctor) (); 
}
 8130784:	e037883a 	mov	sp,fp
 8130788:	dfc00117 	ldw	ra,4(sp)
 813078c:	df000017 	ldw	fp,0(sp)
 8130790:	dec00204 	addi	sp,sp,8
 8130794:	f800283a 	ret

08130798 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
 8130798:	defffd04 	addi	sp,sp,-12
 813079c:	dfc00215 	stw	ra,8(sp)
 81307a0:	df000115 	stw	fp,4(sp)
 81307a4:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 81307a8:	00bfff04 	movi	r2,-4
 81307ac:	00c204f4 	movhi	r3,2067
 81307b0:	18c60c04 	addi	r3,r3,6192
 81307b4:	1885883a 	add	r2,r3,r2
 81307b8:	e0bfff15 	stw	r2,-4(fp)
 81307bc:	00000606 	br	81307d8 <_do_dtors+0x40>
        (*dtor) (); 
 81307c0:	e0bfff17 	ldw	r2,-4(fp)
 81307c4:	10800017 	ldw	r2,0(r2)
 81307c8:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 81307cc:	e0bfff17 	ldw	r2,-4(fp)
 81307d0:	10bfff04 	addi	r2,r2,-4
 81307d4:	e0bfff15 	stw	r2,-4(fp)
 81307d8:	e0ffff17 	ldw	r3,-4(fp)
 81307dc:	008204f4 	movhi	r2,2067
 81307e0:	10860c04 	addi	r2,r2,6192
 81307e4:	18bff62e 	bgeu	r3,r2,81307c0 <_do_dtors+0x28>
        (*dtor) (); 
}
 81307e8:	e037883a 	mov	sp,fp
 81307ec:	dfc00117 	ldw	ra,4(sp)
 81307f0:	df000017 	ldw	fp,0(sp)
 81307f4:	dec00204 	addi	sp,sp,8
 81307f8:	f800283a 	ret

081307fc <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 81307fc:	defff904 	addi	sp,sp,-28
 8130800:	dfc00615 	stw	ra,24(sp)
 8130804:	df000515 	stw	fp,20(sp)
 8130808:	df000504 	addi	fp,sp,20
 813080c:	e13ffd15 	stw	r4,-12(fp)
 8130810:	e17ffe15 	stw	r5,-8(fp)
  alt_dev* next = (alt_dev*) llist->next;
 8130814:	e0bffe17 	ldw	r2,-8(fp)
 8130818:	10800017 	ldw	r2,0(r2)
 813081c:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
 8130820:	e13ffd17 	ldw	r4,-12(fp)
 8130824:	8124e480 	call	8124e48 <strlen>
 8130828:	10800044 	addi	r2,r2,1
 813082c:	e0bffb15 	stw	r2,-20(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 8130830:	00000d06 	br	8130868 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 8130834:	e0bffc17 	ldw	r2,-16(fp)
 8130838:	11000217 	ldw	r4,8(r2)
 813083c:	e1bffb17 	ldw	r6,-20(fp)
 8130840:	e17ffd17 	ldw	r5,-12(fp)
 8130844:	81314040 	call	8131404 <memcmp>
 8130848:	1004c03a 	cmpne	r2,r2,zero
 813084c:	1000031e 	bne	r2,zero,813085c <alt_find_dev+0x60>
    {
      /* match found */

      return next;
 8130850:	e0bffc17 	ldw	r2,-16(fp)
 8130854:	e0bfff15 	stw	r2,-4(fp)
 8130858:	00000706 	br	8130878 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
 813085c:	e0bffc17 	ldw	r2,-16(fp)
 8130860:	10800017 	ldw	r2,0(r2)
 8130864:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 8130868:	e0fffe17 	ldw	r3,-8(fp)
 813086c:	e0bffc17 	ldw	r2,-16(fp)
 8130870:	10fff01e 	bne	r2,r3,8130834 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
 8130874:	e03fff15 	stw	zero,-4(fp)
 8130878:	e0bfff17 	ldw	r2,-4(fp)
}
 813087c:	e037883a 	mov	sp,fp
 8130880:	dfc00117 	ldw	ra,4(sp)
 8130884:	df000017 	ldw	fp,0(sp)
 8130888:	dec00204 	addi	sp,sp,8
 813088c:	f800283a 	ret

08130890 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 8130890:	defffe04 	addi	sp,sp,-8
 8130894:	dfc00115 	stw	ra,4(sp)
 8130898:	df000015 	stw	fp,0(sp)
 813089c:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
 81308a0:	0009883a 	mov	r4,zero
 81308a4:	01440004 	movi	r5,4096
 81308a8:	81313280 	call	8131328 <alt_icache_flush>
#endif
}
 81308ac:	e037883a 	mov	sp,fp
 81308b0:	dfc00117 	ldw	ra,4(sp)
 81308b4:	df000017 	ldw	fp,0(sp)
 81308b8:	dec00204 	addi	sp,sp,8
 81308bc:	f800283a 	ret

081308c0 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 81308c0:	defff904 	addi	sp,sp,-28
 81308c4:	dfc00615 	stw	ra,24(sp)
 81308c8:	df000515 	stw	fp,20(sp)
 81308cc:	df000504 	addi	fp,sp,20
 81308d0:	e13ffc15 	stw	r4,-16(fp)
 81308d4:	e17ffd15 	stw	r5,-12(fp)
 81308d8:	e1bffe15 	stw	r6,-8(fp)
 81308dc:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
 81308e0:	e0800217 	ldw	r2,8(fp)
 81308e4:	d8800015 	stw	r2,0(sp)
 81308e8:	e13ffc17 	ldw	r4,-16(fp)
 81308ec:	e17ffd17 	ldw	r5,-12(fp)
 81308f0:	e1bffe17 	ldw	r6,-8(fp)
 81308f4:	e1ffff17 	ldw	r7,-4(fp)
 81308f8:	8130a940 	call	8130a94 <alt_iic_isr_register>
}  
 81308fc:	e037883a 	mov	sp,fp
 8130900:	dfc00117 	ldw	ra,4(sp)
 8130904:	df000017 	ldw	fp,0(sp)
 8130908:	dec00204 	addi	sp,sp,8
 813090c:	f800283a 	ret

08130910 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
 8130910:	defff904 	addi	sp,sp,-28
 8130914:	df000615 	stw	fp,24(sp)
 8130918:	df000604 	addi	fp,sp,24
 813091c:	e13ffe15 	stw	r4,-8(fp)
 8130920:	e17fff15 	stw	r5,-4(fp)
 8130924:	e0bfff17 	ldw	r2,-4(fp)
 8130928:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 813092c:	0005303a 	rdctl	r2,status
 8130930:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8130934:	e0fffb17 	ldw	r3,-20(fp)
 8130938:	00bfff84 	movi	r2,-2
 813093c:	1884703a 	and	r2,r3,r2
 8130940:	1001703a 	wrctl	status,r2
  
  return context;
 8130944:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 8130948:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active |= (1 << id);
 813094c:	e0fffc17 	ldw	r3,-16(fp)
 8130950:	00800044 	movi	r2,1
 8130954:	10c4983a 	sll	r2,r2,r3
 8130958:	1007883a 	mov	r3,r2
 813095c:	008204f4 	movhi	r2,2067
 8130960:	10956804 	addi	r2,r2,21920
 8130964:	10800017 	ldw	r2,0(r2)
 8130968:	1886b03a 	or	r3,r3,r2
 813096c:	008204f4 	movhi	r2,2067
 8130970:	10956804 	addi	r2,r2,21920
 8130974:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 8130978:	008204f4 	movhi	r2,2067
 813097c:	10956804 	addi	r2,r2,21920
 8130980:	10800017 	ldw	r2,0(r2)
 8130984:	100170fa 	wrctl	ienable,r2
 8130988:	e0bffd17 	ldw	r2,-12(fp)
 813098c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8130990:	e0bffa17 	ldw	r2,-24(fp)
 8130994:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 8130998:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
 813099c:	e037883a 	mov	sp,fp
 81309a0:	df000017 	ldw	fp,0(sp)
 81309a4:	dec00104 	addi	sp,sp,4
 81309a8:	f800283a 	ret

081309ac <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
 81309ac:	defff904 	addi	sp,sp,-28
 81309b0:	df000615 	stw	fp,24(sp)
 81309b4:	df000604 	addi	fp,sp,24
 81309b8:	e13ffe15 	stw	r4,-8(fp)
 81309bc:	e17fff15 	stw	r5,-4(fp)
 81309c0:	e0bfff17 	ldw	r2,-4(fp)
 81309c4:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 81309c8:	0005303a 	rdctl	r2,status
 81309cc:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 81309d0:	e0fffb17 	ldw	r3,-20(fp)
 81309d4:	00bfff84 	movi	r2,-2
 81309d8:	1884703a 	and	r2,r3,r2
 81309dc:	1001703a 	wrctl	status,r2
  
  return context;
 81309e0:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 81309e4:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active &= ~(1 << id);
 81309e8:	e0fffc17 	ldw	r3,-16(fp)
 81309ec:	00800044 	movi	r2,1
 81309f0:	10c4983a 	sll	r2,r2,r3
 81309f4:	0084303a 	nor	r2,zero,r2
 81309f8:	1007883a 	mov	r3,r2
 81309fc:	008204f4 	movhi	r2,2067
 8130a00:	10956804 	addi	r2,r2,21920
 8130a04:	10800017 	ldw	r2,0(r2)
 8130a08:	1886703a 	and	r3,r3,r2
 8130a0c:	008204f4 	movhi	r2,2067
 8130a10:	10956804 	addi	r2,r2,21920
 8130a14:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 8130a18:	008204f4 	movhi	r2,2067
 8130a1c:	10956804 	addi	r2,r2,21920
 8130a20:	10800017 	ldw	r2,0(r2)
 8130a24:	100170fa 	wrctl	ienable,r2
 8130a28:	e0bffd17 	ldw	r2,-12(fp)
 8130a2c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8130a30:	e0bffa17 	ldw	r2,-24(fp)
 8130a34:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 8130a38:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
 8130a3c:	e037883a 	mov	sp,fp
 8130a40:	df000017 	ldw	fp,0(sp)
 8130a44:	dec00104 	addi	sp,sp,4
 8130a48:	f800283a 	ret

08130a4c <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
 8130a4c:	defffc04 	addi	sp,sp,-16
 8130a50:	df000315 	stw	fp,12(sp)
 8130a54:	df000304 	addi	fp,sp,12
 8130a58:	e13ffe15 	stw	r4,-8(fp)
 8130a5c:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
 8130a60:	000530fa 	rdctl	r2,ienable
 8130a64:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
 8130a68:	e0ffff17 	ldw	r3,-4(fp)
 8130a6c:	00800044 	movi	r2,1
 8130a70:	10c4983a 	sll	r2,r2,r3
 8130a74:	1007883a 	mov	r3,r2
 8130a78:	e0bffd17 	ldw	r2,-12(fp)
 8130a7c:	1884703a 	and	r2,r3,r2
 8130a80:	1004c03a 	cmpne	r2,r2,zero
}
 8130a84:	e037883a 	mov	sp,fp
 8130a88:	df000017 	ldw	fp,0(sp)
 8130a8c:	dec00104 	addi	sp,sp,4
 8130a90:	f800283a 	ret

08130a94 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 8130a94:	defff404 	addi	sp,sp,-48
 8130a98:	dfc00b15 	stw	ra,44(sp)
 8130a9c:	df000a15 	stw	fp,40(sp)
 8130aa0:	df000a04 	addi	fp,sp,40
 8130aa4:	e13ffb15 	stw	r4,-20(fp)
 8130aa8:	e17ffc15 	stw	r5,-16(fp)
 8130aac:	e1bffd15 	stw	r6,-12(fp)
 8130ab0:	e1fffe15 	stw	r7,-8(fp)
  int rc = -EINVAL;  
 8130ab4:	00bffa84 	movi	r2,-22
 8130ab8:	e0bffa15 	stw	r2,-24(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
 8130abc:	e0bffc17 	ldw	r2,-16(fp)
 8130ac0:	e0bff915 	stw	r2,-28(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 8130ac4:	e0bff917 	ldw	r2,-28(fp)
 8130ac8:	10800808 	cmpgei	r2,r2,32
 8130acc:	1000291e 	bne	r2,zero,8130b74 <alt_iic_isr_register+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8130ad0:	0005303a 	rdctl	r2,status
 8130ad4:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8130ad8:	e0fff717 	ldw	r3,-36(fp)
 8130adc:	00bfff84 	movi	r2,-2
 8130ae0:	1884703a 	and	r2,r3,r2
 8130ae4:	1001703a 	wrctl	status,r2
  
  return context;
 8130ae8:	e0bff717 	ldw	r2,-36(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
 8130aec:	e0bff815 	stw	r2,-32(fp)

    alt_irq[id].handler = isr;
 8130af0:	e0bff917 	ldw	r2,-28(fp)
 8130af4:	00c204f4 	movhi	r3,2067
 8130af8:	18d57504 	addi	r3,r3,21972
 8130afc:	100490fa 	slli	r2,r2,3
 8130b00:	10c7883a 	add	r3,r2,r3
 8130b04:	e0bffd17 	ldw	r2,-12(fp)
 8130b08:	18800015 	stw	r2,0(r3)
    alt_irq[id].context = isr_context;
 8130b0c:	e0bff917 	ldw	r2,-28(fp)
 8130b10:	00c204f4 	movhi	r3,2067
 8130b14:	18d57504 	addi	r3,r3,21972
 8130b18:	100490fa 	slli	r2,r2,3
 8130b1c:	10c5883a 	add	r2,r2,r3
 8130b20:	10c00104 	addi	r3,r2,4
 8130b24:	e0bffe17 	ldw	r2,-8(fp)
 8130b28:	18800015 	stw	r2,0(r3)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
 8130b2c:	e0bffd17 	ldw	r2,-12(fp)
 8130b30:	1005003a 	cmpeq	r2,r2,zero
 8130b34:	1000051e 	bne	r2,zero,8130b4c <alt_iic_isr_register+0xb8>
 8130b38:	e17ff917 	ldw	r5,-28(fp)
 8130b3c:	e13ffb17 	ldw	r4,-20(fp)
 8130b40:	81309100 	call	8130910 <alt_ic_irq_enable>
 8130b44:	e0bfff15 	stw	r2,-4(fp)
 8130b48:	00000406 	br	8130b5c <alt_iic_isr_register+0xc8>
 8130b4c:	e17ff917 	ldw	r5,-28(fp)
 8130b50:	e13ffb17 	ldw	r4,-20(fp)
 8130b54:	81309ac0 	call	81309ac <alt_ic_irq_disable>
 8130b58:	e0bfff15 	stw	r2,-4(fp)
 8130b5c:	e0bfff17 	ldw	r2,-4(fp)
 8130b60:	e0bffa15 	stw	r2,-24(fp)
 8130b64:	e0bff817 	ldw	r2,-32(fp)
 8130b68:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8130b6c:	e0bff617 	ldw	r2,-40(fp)
 8130b70:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
 8130b74:	e0bffa17 	ldw	r2,-24(fp)
}
 8130b78:	e037883a 	mov	sp,fp
 8130b7c:	dfc00117 	ldw	ra,4(sp)
 8130b80:	df000017 	ldw	fp,0(sp)
 8130b84:	dec00204 	addi	sp,sp,8
 8130b88:	f800283a 	ret

08130b8c <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
 8130b8c:	defff904 	addi	sp,sp,-28
 8130b90:	dfc00615 	stw	ra,24(sp)
 8130b94:	df000515 	stw	fp,20(sp)
 8130b98:	df000504 	addi	fp,sp,20
 8130b9c:	e13ffc15 	stw	r4,-16(fp)
 8130ba0:	e17ffd15 	stw	r5,-12(fp)
 8130ba4:	e1bffe15 	stw	r6,-8(fp)
 8130ba8:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
 8130bac:	e13ffd17 	ldw	r4,-12(fp)
 8130bb0:	e17ffe17 	ldw	r5,-8(fp)
 8130bb4:	e1bfff17 	ldw	r6,-4(fp)
 8130bb8:	8130da40 	call	8130da4 <open>
 8130bbc:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
 8130bc0:	e0bffb17 	ldw	r2,-20(fp)
 8130bc4:	1004803a 	cmplt	r2,r2,zero
 8130bc8:	10001c1e 	bne	r2,zero,8130c3c <alt_open_fd+0xb0>
  {
    fd->dev      = alt_fd_list[old].dev;
 8130bcc:	e0bffb17 	ldw	r2,-20(fp)
 8130bd0:	00c204f4 	movhi	r3,2067
 8130bd4:	18c98504 	addi	r3,r3,9748
 8130bd8:	10800324 	muli	r2,r2,12
 8130bdc:	10c5883a 	add	r2,r2,r3
 8130be0:	10c00017 	ldw	r3,0(r2)
 8130be4:	e0bffc17 	ldw	r2,-16(fp)
 8130be8:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
 8130bec:	e0bffb17 	ldw	r2,-20(fp)
 8130bf0:	00c204f4 	movhi	r3,2067
 8130bf4:	18c98504 	addi	r3,r3,9748
 8130bf8:	10800324 	muli	r2,r2,12
 8130bfc:	10c5883a 	add	r2,r2,r3
 8130c00:	10800104 	addi	r2,r2,4
 8130c04:	10c00017 	ldw	r3,0(r2)
 8130c08:	e0bffc17 	ldw	r2,-16(fp)
 8130c0c:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 8130c10:	e0bffb17 	ldw	r2,-20(fp)
 8130c14:	00c204f4 	movhi	r3,2067
 8130c18:	18c98504 	addi	r3,r3,9748
 8130c1c:	10800324 	muli	r2,r2,12
 8130c20:	10c5883a 	add	r2,r2,r3
 8130c24:	10800204 	addi	r2,r2,8
 8130c28:	10c00017 	ldw	r3,0(r2)
 8130c2c:	e0bffc17 	ldw	r2,-16(fp)
 8130c30:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
 8130c34:	e13ffb17 	ldw	r4,-20(fp)
 8130c38:	812d6c40 	call	812d6c4 <alt_release_fd>
  }
} 
 8130c3c:	e037883a 	mov	sp,fp
 8130c40:	dfc00117 	ldw	ra,4(sp)
 8130c44:	df000017 	ldw	fp,0(sp)
 8130c48:	dec00204 	addi	sp,sp,8
 8130c4c:	f800283a 	ret

08130c50 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 8130c50:	defffb04 	addi	sp,sp,-20
 8130c54:	dfc00415 	stw	ra,16(sp)
 8130c58:	df000315 	stw	fp,12(sp)
 8130c5c:	df000304 	addi	fp,sp,12
 8130c60:	e13ffd15 	stw	r4,-12(fp)
 8130c64:	e17ffe15 	stw	r5,-8(fp)
 8130c68:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 8130c6c:	010204f4 	movhi	r4,2067
 8130c70:	21098804 	addi	r4,r4,9760
 8130c74:	e17ffd17 	ldw	r5,-12(fp)
 8130c78:	01800044 	movi	r6,1
 8130c7c:	01c07fc4 	movi	r7,511
 8130c80:	8130b8c0 	call	8130b8c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 8130c84:	010204f4 	movhi	r4,2067
 8130c88:	21098504 	addi	r4,r4,9748
 8130c8c:	e17ffe17 	ldw	r5,-8(fp)
 8130c90:	000d883a 	mov	r6,zero
 8130c94:	01c07fc4 	movi	r7,511
 8130c98:	8130b8c0 	call	8130b8c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 8130c9c:	010204f4 	movhi	r4,2067
 8130ca0:	21098b04 	addi	r4,r4,9772
 8130ca4:	e17fff17 	ldw	r5,-4(fp)
 8130ca8:	01800044 	movi	r6,1
 8130cac:	01c07fc4 	movi	r7,511
 8130cb0:	8130b8c0 	call	8130b8c <alt_open_fd>
}  
 8130cb4:	e037883a 	mov	sp,fp
 8130cb8:	dfc00117 	ldw	ra,4(sp)
 8130cbc:	df000017 	ldw	fp,0(sp)
 8130cc0:	dec00204 	addi	sp,sp,8
 8130cc4:	f800283a 	ret

08130cc8 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
 8130cc8:	defffc04 	addi	sp,sp,-16
 8130ccc:	df000315 	stw	fp,12(sp)
 8130cd0:	df000304 	addi	fp,sp,12
 8130cd4:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 8130cd8:	e0bffe17 	ldw	r2,-8(fp)
 8130cdc:	10800217 	ldw	r2,8(r2)
 8130ce0:	10d00034 	orhi	r3,r2,16384
 8130ce4:	e0bffe17 	ldw	r2,-8(fp)
 8130ce8:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 8130cec:	e03ffd15 	stw	zero,-12(fp)
 8130cf0:	00002006 	br	8130d74 <alt_file_locked+0xac>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 8130cf4:	e0bffd17 	ldw	r2,-12(fp)
 8130cf8:	00c204f4 	movhi	r3,2067
 8130cfc:	18c98504 	addi	r3,r3,9748
 8130d00:	10800324 	muli	r2,r2,12
 8130d04:	10c5883a 	add	r2,r2,r3
 8130d08:	10c00017 	ldw	r3,0(r2)
 8130d0c:	e0bffe17 	ldw	r2,-8(fp)
 8130d10:	10800017 	ldw	r2,0(r2)
 8130d14:	1880141e 	bne	r3,r2,8130d68 <alt_file_locked+0xa0>
 8130d18:	e0bffd17 	ldw	r2,-12(fp)
 8130d1c:	00c204f4 	movhi	r3,2067
 8130d20:	18c98504 	addi	r3,r3,9748
 8130d24:	10800324 	muli	r2,r2,12
 8130d28:	10c5883a 	add	r2,r2,r3
 8130d2c:	10800204 	addi	r2,r2,8
 8130d30:	10800017 	ldw	r2,0(r2)
 8130d34:	1004403a 	cmpge	r2,r2,zero
 8130d38:	10000b1e 	bne	r2,zero,8130d68 <alt_file_locked+0xa0>
 8130d3c:	e0bffd17 	ldw	r2,-12(fp)
 8130d40:	10800324 	muli	r2,r2,12
 8130d44:	1007883a 	mov	r3,r2
 8130d48:	008204f4 	movhi	r2,2067
 8130d4c:	10898504 	addi	r2,r2,9748
 8130d50:	1887883a 	add	r3,r3,r2
 8130d54:	e0bffe17 	ldw	r2,-8(fp)
 8130d58:	18800326 	beq	r3,r2,8130d68 <alt_file_locked+0xa0>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
 8130d5c:	00bffcc4 	movi	r2,-13
 8130d60:	e0bfff15 	stw	r2,-4(fp)
 8130d64:	00000a06 	br	8130d90 <alt_file_locked+0xc8>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 8130d68:	e0bffd17 	ldw	r2,-12(fp)
 8130d6c:	10800044 	addi	r2,r2,1
 8130d70:	e0bffd15 	stw	r2,-12(fp)
 8130d74:	008204f4 	movhi	r2,2067
 8130d78:	108e5c04 	addi	r2,r2,14704
 8130d7c:	10800017 	ldw	r2,0(r2)
 8130d80:	1007883a 	mov	r3,r2
 8130d84:	e0bffd17 	ldw	r2,-12(fp)
 8130d88:	18bfda2e 	bgeu	r3,r2,8130cf4 <alt_file_locked+0x2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
 8130d8c:	e03fff15 	stw	zero,-4(fp)
 8130d90:	e0bfff17 	ldw	r2,-4(fp)
}
 8130d94:	e037883a 	mov	sp,fp
 8130d98:	df000017 	ldw	fp,0(sp)
 8130d9c:	dec00104 	addi	sp,sp,4
 8130da0:	f800283a 	ret

08130da4 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 8130da4:	defff404 	addi	sp,sp,-48
 8130da8:	dfc00b15 	stw	ra,44(sp)
 8130dac:	df000a15 	stw	fp,40(sp)
 8130db0:	df000a04 	addi	fp,sp,40
 8130db4:	e13ffb15 	stw	r4,-20(fp)
 8130db8:	e17ffc15 	stw	r5,-16(fp)
 8130dbc:	e1bffd15 	stw	r6,-12(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
 8130dc0:	00bfffc4 	movi	r2,-1
 8130dc4:	e0bff815 	stw	r2,-32(fp)
  int status = -ENODEV;
 8130dc8:	00bffb44 	movi	r2,-19
 8130dcc:	e0bff715 	stw	r2,-36(fp)
  int isafs = 0;
 8130dd0:	e03ff615 	stw	zero,-40(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 8130dd4:	e13ffb17 	ldw	r4,-20(fp)
 8130dd8:	014204f4 	movhi	r5,2067
 8130ddc:	294e5a04 	addi	r5,r5,14696
 8130de0:	81307fc0 	call	81307fc <alt_find_dev>
 8130de4:	e0bffa15 	stw	r2,-24(fp)
 8130de8:	e0bffa17 	ldw	r2,-24(fp)
 8130dec:	1004c03a 	cmpne	r2,r2,zero
 8130df0:	1000051e 	bne	r2,zero,8130e08 <open+0x64>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 8130df4:	e13ffb17 	ldw	r4,-20(fp)
 8130df8:	81311500 	call	8131150 <alt_find_file>
 8130dfc:	e0bffa15 	stw	r2,-24(fp)
    isafs = 1;
 8130e00:	00800044 	movi	r2,1
 8130e04:	e0bff615 	stw	r2,-40(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 8130e08:	e0bffa17 	ldw	r2,-24(fp)
 8130e0c:	1005003a 	cmpeq	r2,r2,zero
 8130e10:	1000301e 	bne	r2,zero,8130ed4 <open+0x130>
  {
    if ((index = alt_get_fd (dev)) < 0)
 8130e14:	e13ffa17 	ldw	r4,-24(fp)
 8130e18:	81312700 	call	8131270 <alt_get_fd>
 8130e1c:	e0bff815 	stw	r2,-32(fp)
 8130e20:	e0bff817 	ldw	r2,-32(fp)
 8130e24:	1004403a 	cmpge	r2,r2,zero
 8130e28:	1000031e 	bne	r2,zero,8130e38 <open+0x94>
    {
      status = index;
 8130e2c:	e0bff817 	ldw	r2,-32(fp)
 8130e30:	e0bff715 	stw	r2,-36(fp)
 8130e34:	00002906 	br	8130edc <open+0x138>
    }
    else
    {
      fd = &alt_fd_list[index];
 8130e38:	e0bff817 	ldw	r2,-32(fp)
 8130e3c:	10800324 	muli	r2,r2,12
 8130e40:	1007883a 	mov	r3,r2
 8130e44:	008204f4 	movhi	r2,2067
 8130e48:	10898504 	addi	r2,r2,9748
 8130e4c:	1885883a 	add	r2,r3,r2
 8130e50:	e0bff915 	stw	r2,-28(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 8130e54:	e0fffc17 	ldw	r3,-16(fp)
 8130e58:	00900034 	movhi	r2,16384
 8130e5c:	10bfffc4 	addi	r2,r2,-1
 8130e60:	1886703a 	and	r3,r3,r2
 8130e64:	e0bff917 	ldw	r2,-28(fp)
 8130e68:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
 8130e6c:	e0bff617 	ldw	r2,-40(fp)
 8130e70:	1004c03a 	cmpne	r2,r2,zero
 8130e74:	1000061e 	bne	r2,zero,8130e90 <open+0xec>
 8130e78:	e13ff917 	ldw	r4,-28(fp)
 8130e7c:	8130cc80 	call	8130cc8 <alt_file_locked>
 8130e80:	e0bff715 	stw	r2,-36(fp)
 8130e84:	e0bff717 	ldw	r2,-36(fp)
 8130e88:	1004803a 	cmplt	r2,r2,zero
 8130e8c:	1000131e 	bne	r2,zero,8130edc <open+0x138>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 8130e90:	e0bffa17 	ldw	r2,-24(fp)
 8130e94:	10800317 	ldw	r2,12(r2)
 8130e98:	1005003a 	cmpeq	r2,r2,zero
 8130e9c:	1000091e 	bne	r2,zero,8130ec4 <open+0x120>
 8130ea0:	e0bffa17 	ldw	r2,-24(fp)
 8130ea4:	10800317 	ldw	r2,12(r2)
 8130ea8:	e13ff917 	ldw	r4,-28(fp)
 8130eac:	e17ffb17 	ldw	r5,-20(fp)
 8130eb0:	e1bffc17 	ldw	r6,-16(fp)
 8130eb4:	e1fffd17 	ldw	r7,-12(fp)
 8130eb8:	103ee83a 	callr	r2
 8130ebc:	e0bfff15 	stw	r2,-4(fp)
 8130ec0:	00000106 	br	8130ec8 <open+0x124>
 8130ec4:	e03fff15 	stw	zero,-4(fp)
 8130ec8:	e0bfff17 	ldw	r2,-4(fp)
 8130ecc:	e0bff715 	stw	r2,-36(fp)
 8130ed0:	00000206 	br	8130edc <open+0x138>
      }
    }
  }
  else
  {
    status = -ENODEV;
 8130ed4:	00bffb44 	movi	r2,-19
 8130ed8:	e0bff715 	stw	r2,-36(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 8130edc:	e0bff717 	ldw	r2,-36(fp)
 8130ee0:	1004403a 	cmpge	r2,r2,zero
 8130ee4:	1000091e 	bne	r2,zero,8130f0c <open+0x168>
  {
    alt_release_fd (index);  
 8130ee8:	e13ff817 	ldw	r4,-32(fp)
 8130eec:	812d6c40 	call	812d6c4 <alt_release_fd>
    ALT_ERRNO = -status;
 8130ef0:	8130f2c0 	call	8130f2c <alt_get_errno>
 8130ef4:	e0fff717 	ldw	r3,-36(fp)
 8130ef8:	00c7c83a 	sub	r3,zero,r3
 8130efc:	10c00015 	stw	r3,0(r2)
    return -1;
 8130f00:	00bfffc4 	movi	r2,-1
 8130f04:	e0bffe15 	stw	r2,-8(fp)
 8130f08:	00000206 	br	8130f14 <open+0x170>
  }
  
  /* return the reference upon success */

  return index;
 8130f0c:	e0bff817 	ldw	r2,-32(fp)
 8130f10:	e0bffe15 	stw	r2,-8(fp)
 8130f14:	e0bffe17 	ldw	r2,-8(fp)
}
 8130f18:	e037883a 	mov	sp,fp
 8130f1c:	dfc00117 	ldw	ra,4(sp)
 8130f20:	df000017 	ldw	fp,0(sp)
 8130f24:	dec00204 	addi	sp,sp,8
 8130f28:	f800283a 	ret

08130f2c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 8130f2c:	defffd04 	addi	sp,sp,-12
 8130f30:	dfc00215 	stw	ra,8(sp)
 8130f34:	df000115 	stw	fp,4(sp)
 8130f38:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 8130f3c:	008204f4 	movhi	r2,2067
 8130f40:	108e5d04 	addi	r2,r2,14708
 8130f44:	10800017 	ldw	r2,0(r2)
 8130f48:	1005003a 	cmpeq	r2,r2,zero
 8130f4c:	1000061e 	bne	r2,zero,8130f68 <alt_get_errno+0x3c>
 8130f50:	008204f4 	movhi	r2,2067
 8130f54:	108e5d04 	addi	r2,r2,14708
 8130f58:	10800017 	ldw	r2,0(r2)
 8130f5c:	103ee83a 	callr	r2
 8130f60:	e0bfff15 	stw	r2,-4(fp)
 8130f64:	00000306 	br	8130f74 <alt_get_errno+0x48>
 8130f68:	008204f4 	movhi	r2,2067
 8130f6c:	10956404 	addi	r2,r2,21904
 8130f70:	e0bfff15 	stw	r2,-4(fp)
 8130f74:	e0bfff17 	ldw	r2,-4(fp)
}
 8130f78:	e037883a 	mov	sp,fp
 8130f7c:	dfc00117 	ldw	ra,4(sp)
 8130f80:	df000017 	ldw	fp,0(sp)
 8130f84:	dec00204 	addi	sp,sp,8
 8130f88:	f800283a 	ret

08130f8c <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
 8130f8c:	defffa04 	addi	sp,sp,-24
 8130f90:	df000515 	stw	fp,20(sp)
 8130f94:	df000504 	addi	fp,sp,20
 8130f98:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8130f9c:	0005303a 	rdctl	r2,status
 8130fa0:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8130fa4:	e0fffd17 	ldw	r3,-12(fp)
 8130fa8:	00bfff84 	movi	r2,-2
 8130fac:	1884703a 	and	r2,r3,r2
 8130fb0:	1001703a 	wrctl	status,r2
  
  return context;
 8130fb4:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
 8130fb8:	e0bffe15 	stw	r2,-8(fp)
  alt_llist_remove (&alarm->llist);
 8130fbc:	e0bfff17 	ldw	r2,-4(fp)
 8130fc0:	e0bffc15 	stw	r2,-16(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 8130fc4:	e0bffc17 	ldw	r2,-16(fp)
 8130fc8:	10c00017 	ldw	r3,0(r2)
 8130fcc:	e0bffc17 	ldw	r2,-16(fp)
 8130fd0:	10800117 	ldw	r2,4(r2)
 8130fd4:	18800115 	stw	r2,4(r3)
  entry->previous->next = entry->next;
 8130fd8:	e0bffc17 	ldw	r2,-16(fp)
 8130fdc:	10c00117 	ldw	r3,4(r2)
 8130fe0:	e0bffc17 	ldw	r2,-16(fp)
 8130fe4:	10800017 	ldw	r2,0(r2)
 8130fe8:	18800015 	stw	r2,0(r3)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 8130fec:	e0fffc17 	ldw	r3,-16(fp)
 8130ff0:	e0bffc17 	ldw	r2,-16(fp)
 8130ff4:	18800115 	stw	r2,4(r3)
  entry->next     = entry;
 8130ff8:	e0fffc17 	ldw	r3,-16(fp)
 8130ffc:	e0bffc17 	ldw	r2,-16(fp)
 8131000:	18800015 	stw	r2,0(r3)
 8131004:	e0bffe17 	ldw	r2,-8(fp)
 8131008:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 813100c:	e0bffb17 	ldw	r2,-20(fp)
 8131010:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
 8131014:	e037883a 	mov	sp,fp
 8131018:	df000017 	ldw	fp,0(sp)
 813101c:	dec00104 	addi	sp,sp,4
 8131020:	f800283a 	ret

08131024 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 8131024:	defffb04 	addi	sp,sp,-20
 8131028:	dfc00415 	stw	ra,16(sp)
 813102c:	df000315 	stw	fp,12(sp)
 8131030:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 8131034:	d0a01617 	ldw	r2,-32680(gp)
 8131038:	e0bffe15 	stw	r2,-8(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 813103c:	d0a71c17 	ldw	r2,-25488(gp)
 8131040:	10800044 	addi	r2,r2,1
 8131044:	d0a71c15 	stw	r2,-25488(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 8131048:	00003106 	br	8131110 <alt_tick+0xec>
  {
    next = (alt_alarm*) alarm->llist.next;
 813104c:	e0bffe17 	ldw	r2,-8(fp)
 8131050:	10800017 	ldw	r2,0(r2)
 8131054:	e0bfff15 	stw	r2,-4(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 8131058:	e0bffe17 	ldw	r2,-8(fp)
 813105c:	10800403 	ldbu	r2,16(r2)
 8131060:	10803fcc 	andi	r2,r2,255
 8131064:	1005003a 	cmpeq	r2,r2,zero
 8131068:	1000051e 	bne	r2,zero,8131080 <alt_tick+0x5c>
 813106c:	d0a71c17 	ldw	r2,-25488(gp)
 8131070:	1004c03a 	cmpne	r2,r2,zero
 8131074:	1000021e 	bne	r2,zero,8131080 <alt_tick+0x5c>
    {
      alarm->rollover = 0;
 8131078:	e0bffe17 	ldw	r2,-8(fp)
 813107c:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 8131080:	e0bffe17 	ldw	r2,-8(fp)
 8131084:	10c00217 	ldw	r3,8(r2)
 8131088:	d0a71c17 	ldw	r2,-25488(gp)
 813108c:	10c01e36 	bltu	r2,r3,8131108 <alt_tick+0xe4>
 8131090:	e0bffe17 	ldw	r2,-8(fp)
 8131094:	10800403 	ldbu	r2,16(r2)
 8131098:	10803fcc 	andi	r2,r2,255
 813109c:	1004c03a 	cmpne	r2,r2,zero
 81310a0:	1000191e 	bne	r2,zero,8131108 <alt_tick+0xe4>
    {
      next_callback = alarm->callback (alarm->context);
 81310a4:	e0bffe17 	ldw	r2,-8(fp)
 81310a8:	10c00317 	ldw	r3,12(r2)
 81310ac:	e0bffe17 	ldw	r2,-8(fp)
 81310b0:	11000517 	ldw	r4,20(r2)
 81310b4:	183ee83a 	callr	r3
 81310b8:	e0bffd15 	stw	r2,-12(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 81310bc:	e0bffd17 	ldw	r2,-12(fp)
 81310c0:	1004c03a 	cmpne	r2,r2,zero
 81310c4:	1000031e 	bne	r2,zero,81310d4 <alt_tick+0xb0>
      {
        alt_alarm_stop (alarm);
 81310c8:	e13ffe17 	ldw	r4,-8(fp)
 81310cc:	8130f8c0 	call	8130f8c <alt_alarm_stop>
 81310d0:	00000d06 	br	8131108 <alt_tick+0xe4>
      }
      else
      {
        alarm->time += next_callback;
 81310d4:	e0bffe17 	ldw	r2,-8(fp)
 81310d8:	10c00217 	ldw	r3,8(r2)
 81310dc:	e0bffd17 	ldw	r2,-12(fp)
 81310e0:	1887883a 	add	r3,r3,r2
 81310e4:	e0bffe17 	ldw	r2,-8(fp)
 81310e8:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 81310ec:	e0bffe17 	ldw	r2,-8(fp)
 81310f0:	10c00217 	ldw	r3,8(r2)
 81310f4:	d0a71c17 	ldw	r2,-25488(gp)
 81310f8:	1880032e 	bgeu	r3,r2,8131108 <alt_tick+0xe4>
        {
          alarm->rollover = 1;
 81310fc:	e0fffe17 	ldw	r3,-8(fp)
 8131100:	00800044 	movi	r2,1
 8131104:	18800405 	stb	r2,16(r3)
        }
      }
    }
    alarm = next;
 8131108:	e0bfff17 	ldw	r2,-4(fp)
 813110c:	e0bffe15 	stw	r2,-8(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 8131110:	d0e01604 	addi	r3,gp,-32680
 8131114:	e0bffe17 	ldw	r2,-8(fp)
 8131118:	10ffcc1e 	bne	r2,r3,813104c <alt_tick+0x28>
  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
}
 813111c:	e037883a 	mov	sp,fp
 8131120:	dfc00117 	ldw	ra,4(sp)
 8131124:	df000017 	ldw	fp,0(sp)
 8131128:	dec00204 	addi	sp,sp,8
 813112c:	f800283a 	ret

08131130 <altera_nios2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_irq_init(void) 
{
 8131130:	deffff04 	addi	sp,sp,-4
 8131134:	df000015 	stw	fp,0(sp)
 8131138:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 813113c:	000170fa 	wrctl	ienable,zero
}
 8131140:	e037883a 	mov	sp,fp
 8131144:	df000017 	ldw	fp,0(sp)
 8131148:	dec00104 	addi	sp,sp,4
 813114c:	f800283a 	ret

08131150 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 8131150:	defffa04 	addi	sp,sp,-24
 8131154:	dfc00515 	stw	ra,20(sp)
 8131158:	df000415 	stw	fp,16(sp)
 813115c:	df000404 	addi	fp,sp,16
 8131160:	e13ffe15 	stw	r4,-8(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 8131164:	008204f4 	movhi	r2,2067
 8131168:	108e5804 	addi	r2,r2,14688
 813116c:	10800017 	ldw	r2,0(r2)
 8131170:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 8131174:	00003306 	br	8131244 <alt_find_file+0xf4>
  {
    len = strlen(next->name);
 8131178:	e0bffd17 	ldw	r2,-12(fp)
 813117c:	11000217 	ldw	r4,8(r2)
 8131180:	8124e480 	call	8124e48 <strlen>
 8131184:	e0bffc15 	stw	r2,-16(fp)
    
    if (next->name[len-1] == '/')
 8131188:	e0bffd17 	ldw	r2,-12(fp)
 813118c:	10c00217 	ldw	r3,8(r2)
 8131190:	e0bffc17 	ldw	r2,-16(fp)
 8131194:	1885883a 	add	r2,r3,r2
 8131198:	10bfffc4 	addi	r2,r2,-1
 813119c:	10800003 	ldbu	r2,0(r2)
 81311a0:	10803fcc 	andi	r2,r2,255
 81311a4:	1080201c 	xori	r2,r2,128
 81311a8:	10bfe004 	addi	r2,r2,-128
 81311ac:	10800bd8 	cmpnei	r2,r2,47
 81311b0:	1000031e 	bne	r2,zero,81311c0 <alt_find_file+0x70>
    {
      len -= 1;
 81311b4:	e0bffc17 	ldw	r2,-16(fp)
 81311b8:	10bfffc4 	addi	r2,r2,-1
 81311bc:	e0bffc15 	stw	r2,-16(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 81311c0:	e0bffc17 	ldw	r2,-16(fp)
 81311c4:	1007883a 	mov	r3,r2
 81311c8:	e0bffe17 	ldw	r2,-8(fp)
 81311cc:	1885883a 	add	r2,r3,r2
 81311d0:	10800003 	ldbu	r2,0(r2)
 81311d4:	10803fcc 	andi	r2,r2,255
 81311d8:	1080201c 	xori	r2,r2,128
 81311dc:	10bfe004 	addi	r2,r2,-128
 81311e0:	10800be0 	cmpeqi	r2,r2,47
 81311e4:	10000a1e 	bne	r2,zero,8131210 <alt_find_file+0xc0>
 81311e8:	e0bffc17 	ldw	r2,-16(fp)
 81311ec:	1007883a 	mov	r3,r2
 81311f0:	e0bffe17 	ldw	r2,-8(fp)
 81311f4:	1885883a 	add	r2,r3,r2
 81311f8:	10800003 	ldbu	r2,0(r2)
 81311fc:	10803fcc 	andi	r2,r2,255
 8131200:	1080201c 	xori	r2,r2,128
 8131204:	10bfe004 	addi	r2,r2,-128
 8131208:	1004c03a 	cmpne	r2,r2,zero
 813120c:	10000a1e 	bne	r2,zero,8131238 <alt_find_file+0xe8>
 8131210:	e0bffd17 	ldw	r2,-12(fp)
 8131214:	11000217 	ldw	r4,8(r2)
 8131218:	e1bffc17 	ldw	r6,-16(fp)
 813121c:	e17ffe17 	ldw	r5,-8(fp)
 8131220:	81314040 	call	8131404 <memcmp>
 8131224:	1004c03a 	cmpne	r2,r2,zero
 8131228:	1000031e 	bne	r2,zero,8131238 <alt_find_file+0xe8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
 813122c:	e0bffd17 	ldw	r2,-12(fp)
 8131230:	e0bfff15 	stw	r2,-4(fp)
 8131234:	00000806 	br	8131258 <alt_find_file+0x108>
    }
    next = (alt_dev*) next->llist.next;
 8131238:	e0bffd17 	ldw	r2,-12(fp)
 813123c:	10800017 	ldw	r2,0(r2)
 8131240:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 8131244:	00c204f4 	movhi	r3,2067
 8131248:	18ce5804 	addi	r3,r3,14688
 813124c:	e0bffd17 	ldw	r2,-12(fp)
 8131250:	10ffc91e 	bne	r2,r3,8131178 <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
 8131254:	e03fff15 	stw	zero,-4(fp)
 8131258:	e0bfff17 	ldw	r2,-4(fp)
}
 813125c:	e037883a 	mov	sp,fp
 8131260:	dfc00117 	ldw	ra,4(sp)
 8131264:	df000017 	ldw	fp,0(sp)
 8131268:	dec00204 	addi	sp,sp,8
 813126c:	f800283a 	ret

08131270 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 8131270:	defffc04 	addi	sp,sp,-16
 8131274:	df000315 	stw	fp,12(sp)
 8131278:	df000304 	addi	fp,sp,12
 813127c:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
 8131280:	00bffa04 	movi	r2,-24
 8131284:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 8131288:	e03ffe15 	stw	zero,-8(fp)
 813128c:	00001e06 	br	8131308 <alt_get_fd+0x98>
  {
    if (!alt_fd_list[i].dev)
 8131290:	e0bffe17 	ldw	r2,-8(fp)
 8131294:	00c204f4 	movhi	r3,2067
 8131298:	18c98504 	addi	r3,r3,9748
 813129c:	10800324 	muli	r2,r2,12
 81312a0:	10c5883a 	add	r2,r2,r3
 81312a4:	10800017 	ldw	r2,0(r2)
 81312a8:	1004c03a 	cmpne	r2,r2,zero
 81312ac:	1000131e 	bne	r2,zero,81312fc <alt_get_fd+0x8c>
    {
      alt_fd_list[i].dev = dev;
 81312b0:	e0bffe17 	ldw	r2,-8(fp)
 81312b4:	00c204f4 	movhi	r3,2067
 81312b8:	18c98504 	addi	r3,r3,9748
 81312bc:	10800324 	muli	r2,r2,12
 81312c0:	10c7883a 	add	r3,r2,r3
 81312c4:	e0bfff17 	ldw	r2,-4(fp)
 81312c8:	18800015 	stw	r2,0(r3)
      if (i > alt_max_fd)
 81312cc:	008204f4 	movhi	r2,2067
 81312d0:	108e5c04 	addi	r2,r2,14704
 81312d4:	10c00017 	ldw	r3,0(r2)
 81312d8:	e0bffe17 	ldw	r2,-8(fp)
 81312dc:	1880040e 	bge	r3,r2,81312f0 <alt_get_fd+0x80>
      {
        alt_max_fd = i;
 81312e0:	00c204f4 	movhi	r3,2067
 81312e4:	18ce5c04 	addi	r3,r3,14704
 81312e8:	e0bffe17 	ldw	r2,-8(fp)
 81312ec:	18800015 	stw	r2,0(r3)
      }
      rc = i;
 81312f0:	e0bffe17 	ldw	r2,-8(fp)
 81312f4:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
 81312f8:	00000606 	br	8131314 <alt_get_fd+0xa4>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 81312fc:	e0bffe17 	ldw	r2,-8(fp)
 8131300:	10800044 	addi	r2,r2,1
 8131304:	e0bffe15 	stw	r2,-8(fp)
 8131308:	e0bffe17 	ldw	r2,-8(fp)
 813130c:	10800810 	cmplti	r2,r2,32
 8131310:	103fdf1e 	bne	r2,zero,8131290 <alt_get_fd+0x20>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
 8131314:	e0bffd17 	ldw	r2,-12(fp)
}
 8131318:	e037883a 	mov	sp,fp
 813131c:	df000017 	ldw	fp,0(sp)
 8131320:	dec00104 	addi	sp,sp,4
 8131324:	f800283a 	ret

08131328 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
 8131328:	defffb04 	addi	sp,sp,-20
 813132c:	df000415 	stw	fp,16(sp)
 8131330:	df000404 	addi	fp,sp,16
 8131334:	e13ffe15 	stw	r4,-8(fp)
 8131338:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
 813133c:	e0bfff17 	ldw	r2,-4(fp)
 8131340:	10840070 	cmpltui	r2,r2,4097
 8131344:	1000021e 	bne	r2,zero,8131350 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
 8131348:	00840004 	movi	r2,4096
 813134c:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
 8131350:	e0fffe17 	ldw	r3,-8(fp)
 8131354:	e0bfff17 	ldw	r2,-4(fp)
 8131358:	1885883a 	add	r2,r3,r2
 813135c:	e0bffc15 	stw	r2,-16(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 8131360:	e0bffe17 	ldw	r2,-8(fp)
 8131364:	e0bffd15 	stw	r2,-12(fp)
 8131368:	00000506 	br	8131380 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
 813136c:	e0bffd17 	ldw	r2,-12(fp)
 8131370:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 8131374:	e0bffd17 	ldw	r2,-12(fp)
 8131378:	10800804 	addi	r2,r2,32
 813137c:	e0bffd15 	stw	r2,-12(fp)
 8131380:	e0fffd17 	ldw	r3,-12(fp)
 8131384:	e0bffc17 	ldw	r2,-16(fp)
 8131388:	18bff836 	bltu	r3,r2,813136c <alt_icache_flush+0x44>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
 813138c:	e0bffe17 	ldw	r2,-8(fp)
 8131390:	108007cc 	andi	r2,r2,31
 8131394:	1005003a 	cmpeq	r2,r2,zero
 8131398:	1000021e 	bne	r2,zero,81313a4 <alt_icache_flush+0x7c>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
 813139c:	e0bffd17 	ldw	r2,-12(fp)
 81313a0:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
 81313a4:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
 81313a8:	e037883a 	mov	sp,fp
 81313ac:	df000017 	ldw	fp,0(sp)
 81313b0:	dec00104 	addi	sp,sp,4
 81313b4:	f800283a 	ret

081313b8 <atexit>:
 81313b8:	200b883a 	mov	r5,r4
 81313bc:	000d883a 	mov	r6,zero
 81313c0:	0009883a 	mov	r4,zero
 81313c4:	000f883a 	mov	r7,zero
 81313c8:	81314781 	jmpi	8131478 <__register_exitproc>

081313cc <exit>:
 81313cc:	defffe04 	addi	sp,sp,-8
 81313d0:	000b883a 	mov	r5,zero
 81313d4:	dc000015 	stw	r16,0(sp)
 81313d8:	dfc00115 	stw	ra,4(sp)
 81313dc:	2021883a 	mov	r16,r4
 81313e0:	81315b00 	call	81315b0 <__call_exitprocs>
 81313e4:	008204f4 	movhi	r2,2067
 81313e8:	108e5304 	addi	r2,r2,14668
 81313ec:	11000017 	ldw	r4,0(r2)
 81313f0:	20800f17 	ldw	r2,60(r4)
 81313f4:	10000126 	beq	r2,zero,81313fc <exit+0x30>
 81313f8:	103ee83a 	callr	r2
 81313fc:	8009883a 	mov	r4,r16
 8131400:	81317a00 	call	81317a0 <_exit>

08131404 <memcmp>:
 8131404:	00c000c4 	movi	r3,3
 8131408:	1980032e 	bgeu	r3,r6,8131418 <memcmp+0x14>
 813140c:	2144b03a 	or	r2,r4,r5
 8131410:	10c4703a 	and	r2,r2,r3
 8131414:	10000f26 	beq	r2,zero,8131454 <memcmp+0x50>
 8131418:	31ffffc4 	addi	r7,r6,-1
 813141c:	3000061e 	bne	r6,zero,8131438 <memcmp+0x34>
 8131420:	00000a06 	br	813144c <memcmp+0x48>
 8131424:	39ffffc4 	addi	r7,r7,-1
 8131428:	00bfffc4 	movi	r2,-1
 813142c:	21000044 	addi	r4,r4,1
 8131430:	29400044 	addi	r5,r5,1
 8131434:	38800526 	beq	r7,r2,813144c <memcmp+0x48>
 8131438:	20c00003 	ldbu	r3,0(r4)
 813143c:	28800003 	ldbu	r2,0(r5)
 8131440:	18bff826 	beq	r3,r2,8131424 <memcmp+0x20>
 8131444:	1885c83a 	sub	r2,r3,r2
 8131448:	f800283a 	ret
 813144c:	0005883a 	mov	r2,zero
 8131450:	f800283a 	ret
 8131454:	180f883a 	mov	r7,r3
 8131458:	20c00017 	ldw	r3,0(r4)
 813145c:	28800017 	ldw	r2,0(r5)
 8131460:	18bfed1e 	bne	r3,r2,8131418 <memcmp+0x14>
 8131464:	31bfff04 	addi	r6,r6,-4
 8131468:	21000104 	addi	r4,r4,4
 813146c:	29400104 	addi	r5,r5,4
 8131470:	39bff936 	bltu	r7,r6,8131458 <memcmp+0x54>
 8131474:	003fe806 	br	8131418 <memcmp+0x14>

08131478 <__register_exitproc>:
 8131478:	defffa04 	addi	sp,sp,-24
 813147c:	008204f4 	movhi	r2,2067
 8131480:	108e5304 	addi	r2,r2,14668
 8131484:	dc000015 	stw	r16,0(sp)
 8131488:	14000017 	ldw	r16,0(r2)
 813148c:	dd000415 	stw	r20,16(sp)
 8131490:	2829883a 	mov	r20,r5
 8131494:	81405217 	ldw	r5,328(r16)
 8131498:	dcc00315 	stw	r19,12(sp)
 813149c:	dc800215 	stw	r18,8(sp)
 81314a0:	dc400115 	stw	r17,4(sp)
 81314a4:	dfc00515 	stw	ra,20(sp)
 81314a8:	2023883a 	mov	r17,r4
 81314ac:	3027883a 	mov	r19,r6
 81314b0:	3825883a 	mov	r18,r7
 81314b4:	28002526 	beq	r5,zero,813154c <__register_exitproc+0xd4>
 81314b8:	29000117 	ldw	r4,4(r5)
 81314bc:	008007c4 	movi	r2,31
 81314c0:	11002716 	blt	r2,r4,8131560 <__register_exitproc+0xe8>
 81314c4:	8800101e 	bne	r17,zero,8131508 <__register_exitproc+0x90>
 81314c8:	2105883a 	add	r2,r4,r4
 81314cc:	1085883a 	add	r2,r2,r2
 81314d0:	20c00044 	addi	r3,r4,1
 81314d4:	1145883a 	add	r2,r2,r5
 81314d8:	0009883a 	mov	r4,zero
 81314dc:	15000215 	stw	r20,8(r2)
 81314e0:	28c00115 	stw	r3,4(r5)
 81314e4:	2005883a 	mov	r2,r4
 81314e8:	dfc00517 	ldw	ra,20(sp)
 81314ec:	dd000417 	ldw	r20,16(sp)
 81314f0:	dcc00317 	ldw	r19,12(sp)
 81314f4:	dc800217 	ldw	r18,8(sp)
 81314f8:	dc400117 	ldw	r17,4(sp)
 81314fc:	dc000017 	ldw	r16,0(sp)
 8131500:	dec00604 	addi	sp,sp,24
 8131504:	f800283a 	ret
 8131508:	29802204 	addi	r6,r5,136
 813150c:	00800044 	movi	r2,1
 8131510:	110e983a 	sll	r7,r2,r4
 8131514:	30c04017 	ldw	r3,256(r6)
 8131518:	2105883a 	add	r2,r4,r4
 813151c:	1085883a 	add	r2,r2,r2
 8131520:	1185883a 	add	r2,r2,r6
 8131524:	19c6b03a 	or	r3,r3,r7
 8131528:	14802015 	stw	r18,128(r2)
 813152c:	14c00015 	stw	r19,0(r2)
 8131530:	00800084 	movi	r2,2
 8131534:	30c04015 	stw	r3,256(r6)
 8131538:	88bfe31e 	bne	r17,r2,81314c8 <__register_exitproc+0x50>
 813153c:	30804117 	ldw	r2,260(r6)
 8131540:	11c4b03a 	or	r2,r2,r7
 8131544:	30804115 	stw	r2,260(r6)
 8131548:	003fdf06 	br	81314c8 <__register_exitproc+0x50>
 813154c:	008204f4 	movhi	r2,2067
 8131550:	1095b504 	addi	r2,r2,22228
 8131554:	100b883a 	mov	r5,r2
 8131558:	80805215 	stw	r2,328(r16)
 813155c:	003fd606 	br	81314b8 <__register_exitproc+0x40>
 8131560:	00800034 	movhi	r2,0
 8131564:	10800004 	addi	r2,r2,0
 8131568:	1000021e 	bne	r2,zero,8131574 <__register_exitproc+0xfc>
 813156c:	013fffc4 	movi	r4,-1
 8131570:	003fdc06 	br	81314e4 <__register_exitproc+0x6c>
 8131574:	01006404 	movi	r4,400
 8131578:	103ee83a 	callr	r2
 813157c:	1007883a 	mov	r3,r2
 8131580:	103ffa26 	beq	r2,zero,813156c <__register_exitproc+0xf4>
 8131584:	80805217 	ldw	r2,328(r16)
 8131588:	180b883a 	mov	r5,r3
 813158c:	18000115 	stw	zero,4(r3)
 8131590:	18800015 	stw	r2,0(r3)
 8131594:	80c05215 	stw	r3,328(r16)
 8131598:	18006215 	stw	zero,392(r3)
 813159c:	18006315 	stw	zero,396(r3)
 81315a0:	0009883a 	mov	r4,zero
 81315a4:	883fc826 	beq	r17,zero,81314c8 <__register_exitproc+0x50>
 81315a8:	003fd706 	br	8131508 <__register_exitproc+0x90>

081315ac <register_fini>:
 81315ac:	f800283a 	ret

081315b0 <__call_exitprocs>:
 81315b0:	008204f4 	movhi	r2,2067
 81315b4:	108e5304 	addi	r2,r2,14668
 81315b8:	10800017 	ldw	r2,0(r2)
 81315bc:	defff304 	addi	sp,sp,-52
 81315c0:	df000b15 	stw	fp,44(sp)
 81315c4:	d8800115 	stw	r2,4(sp)
 81315c8:	00800034 	movhi	r2,0
 81315cc:	10800004 	addi	r2,r2,0
 81315d0:	1005003a 	cmpeq	r2,r2,zero
 81315d4:	d8800215 	stw	r2,8(sp)
 81315d8:	d8800117 	ldw	r2,4(sp)
 81315dc:	dd400815 	stw	r21,32(sp)
 81315e0:	dd000715 	stw	r20,28(sp)
 81315e4:	10805204 	addi	r2,r2,328
 81315e8:	dfc00c15 	stw	ra,48(sp)
 81315ec:	ddc00a15 	stw	r23,40(sp)
 81315f0:	dd800915 	stw	r22,36(sp)
 81315f4:	dcc00615 	stw	r19,24(sp)
 81315f8:	dc800515 	stw	r18,20(sp)
 81315fc:	dc400415 	stw	r17,16(sp)
 8131600:	dc000315 	stw	r16,12(sp)
 8131604:	282b883a 	mov	r21,r5
 8131608:	2039883a 	mov	fp,r4
 813160c:	d8800015 	stw	r2,0(sp)
 8131610:	2829003a 	cmpeq	r20,r5,zero
 8131614:	d8800117 	ldw	r2,4(sp)
 8131618:	14405217 	ldw	r17,328(r2)
 813161c:	88001026 	beq	r17,zero,8131660 <__call_exitprocs+0xb0>
 8131620:	ddc00017 	ldw	r23,0(sp)
 8131624:	88800117 	ldw	r2,4(r17)
 8131628:	8c802204 	addi	r18,r17,136
 813162c:	143fffc4 	addi	r16,r2,-1
 8131630:	80000916 	blt	r16,zero,8131658 <__call_exitprocs+0xa8>
 8131634:	05bfffc4 	movi	r22,-1
 8131638:	a000151e 	bne	r20,zero,8131690 <__call_exitprocs+0xe0>
 813163c:	8409883a 	add	r4,r16,r16
 8131640:	2105883a 	add	r2,r4,r4
 8131644:	1485883a 	add	r2,r2,r18
 8131648:	10c02017 	ldw	r3,128(r2)
 813164c:	a8c01126 	beq	r21,r3,8131694 <__call_exitprocs+0xe4>
 8131650:	843fffc4 	addi	r16,r16,-1
 8131654:	85bff81e 	bne	r16,r22,8131638 <__call_exitprocs+0x88>
 8131658:	d8800217 	ldw	r2,8(sp)
 813165c:	10003126 	beq	r2,zero,8131724 <__call_exitprocs+0x174>
 8131660:	dfc00c17 	ldw	ra,48(sp)
 8131664:	df000b17 	ldw	fp,44(sp)
 8131668:	ddc00a17 	ldw	r23,40(sp)
 813166c:	dd800917 	ldw	r22,36(sp)
 8131670:	dd400817 	ldw	r21,32(sp)
 8131674:	dd000717 	ldw	r20,28(sp)
 8131678:	dcc00617 	ldw	r19,24(sp)
 813167c:	dc800517 	ldw	r18,20(sp)
 8131680:	dc400417 	ldw	r17,16(sp)
 8131684:	dc000317 	ldw	r16,12(sp)
 8131688:	dec00d04 	addi	sp,sp,52
 813168c:	f800283a 	ret
 8131690:	8409883a 	add	r4,r16,r16
 8131694:	88c00117 	ldw	r3,4(r17)
 8131698:	2105883a 	add	r2,r4,r4
 813169c:	1445883a 	add	r2,r2,r17
 81316a0:	18ffffc4 	addi	r3,r3,-1
 81316a4:	11800217 	ldw	r6,8(r2)
 81316a8:	1c001526 	beq	r3,r16,8131700 <__call_exitprocs+0x150>
 81316ac:	10000215 	stw	zero,8(r2)
 81316b0:	303fe726 	beq	r6,zero,8131650 <__call_exitprocs+0xa0>
 81316b4:	00c00044 	movi	r3,1
 81316b8:	1c06983a 	sll	r3,r3,r16
 81316bc:	90804017 	ldw	r2,256(r18)
 81316c0:	8cc00117 	ldw	r19,4(r17)
 81316c4:	1884703a 	and	r2,r3,r2
 81316c8:	10001426 	beq	r2,zero,813171c <__call_exitprocs+0x16c>
 81316cc:	90804117 	ldw	r2,260(r18)
 81316d0:	1884703a 	and	r2,r3,r2
 81316d4:	10000c1e 	bne	r2,zero,8131708 <__call_exitprocs+0x158>
 81316d8:	2105883a 	add	r2,r4,r4
 81316dc:	1485883a 	add	r2,r2,r18
 81316e0:	11400017 	ldw	r5,0(r2)
 81316e4:	e009883a 	mov	r4,fp
 81316e8:	303ee83a 	callr	r6
 81316ec:	88800117 	ldw	r2,4(r17)
 81316f0:	98bfc81e 	bne	r19,r2,8131614 <__call_exitprocs+0x64>
 81316f4:	b8800017 	ldw	r2,0(r23)
 81316f8:	147fd526 	beq	r2,r17,8131650 <__call_exitprocs+0xa0>
 81316fc:	003fc506 	br	8131614 <__call_exitprocs+0x64>
 8131700:	8c000115 	stw	r16,4(r17)
 8131704:	003fea06 	br	81316b0 <__call_exitprocs+0x100>
 8131708:	2105883a 	add	r2,r4,r4
 813170c:	1485883a 	add	r2,r2,r18
 8131710:	11000017 	ldw	r4,0(r2)
 8131714:	303ee83a 	callr	r6
 8131718:	003ff406 	br	81316ec <__call_exitprocs+0x13c>
 813171c:	303ee83a 	callr	r6
 8131720:	003ff206 	br	81316ec <__call_exitprocs+0x13c>
 8131724:	88800117 	ldw	r2,4(r17)
 8131728:	1000081e 	bne	r2,zero,813174c <__call_exitprocs+0x19c>
 813172c:	89000017 	ldw	r4,0(r17)
 8131730:	20000726 	beq	r4,zero,8131750 <__call_exitprocs+0x1a0>
 8131734:	b9000015 	stw	r4,0(r23)
 8131738:	8809883a 	mov	r4,r17
 813173c:	00000000 	call	0 <__alt_mem_onchip_memory2_0-0x3000>
 8131740:	bc400017 	ldw	r17,0(r23)
 8131744:	883fb71e 	bne	r17,zero,8131624 <__call_exitprocs+0x74>
 8131748:	003fc506 	br	8131660 <__call_exitprocs+0xb0>
 813174c:	89000017 	ldw	r4,0(r17)
 8131750:	882f883a 	mov	r23,r17
 8131754:	2023883a 	mov	r17,r4
 8131758:	883fb21e 	bne	r17,zero,8131624 <__call_exitprocs+0x74>
 813175c:	003fc006 	br	8131660 <__call_exitprocs+0xb0>

08131760 <alt_sim_halt>:

/*
 * Routine called on exit.
 */
static ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
 8131760:	defffd04 	addi	sp,sp,-12
 8131764:	df000215 	stw	fp,8(sp)
 8131768:	df000204 	addi	fp,sp,8
 813176c:	e13fff15 	stw	r4,-4(fp)
  int r2 = exit_code;
 8131770:	e0bfff17 	ldw	r2,-4(fp)
 8131774:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 8131778:	e0bffe17 	ldw	r2,-8(fp)
 813177c:	1005003a 	cmpeq	r2,r2,zero
 8131780:	1000021e 	bne	r2,zero,813178c <alt_sim_halt+0x2c>
    ALT_SIM_FAIL();
 8131784:	002af070 	cmpltui	zero,zero,43969
 8131788:	00000106 	br	8131790 <alt_sim_halt+0x30>
  } else {
    ALT_SIM_PASS();
 813178c:	002af0b0 	cmpltui	zero,zero,43970
  }
#endif /* DEBUG_STUB */
}
 8131790:	e037883a 	mov	sp,fp
 8131794:	df000017 	ldw	fp,0(sp)
 8131798:	dec00104 	addi	sp,sp,4
 813179c:	f800283a 	ret

081317a0 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 81317a0:	defffd04 	addi	sp,sp,-12
 81317a4:	dfc00215 	stw	ra,8(sp)
 81317a8:	df000115 	stw	fp,4(sp)
 81317ac:	df000104 	addi	fp,sp,4
 81317b0:	e13fff15 	stw	r4,-4(fp)
  ALT_OS_STOP();

  /* Provide notification to the simulator that we've stopped */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_SIM_HALT().\r\n");
  ALT_SIM_HALT(exit_code);
 81317b4:	e13fff17 	ldw	r4,-4(fp)
 81317b8:	81317600 	call	8131760 <alt_sim_halt>

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 81317bc:	003fff06 	br	81317bc <_exit+0x1c>
 81317c0:	00000010 	cmplti	zero,zero,0
 81317c4:	00000000 	call	0 <__alt_mem_onchip_memory2_0-0x3000>
 81317c8:	00527a01 	jmpi	527a0 <__alt_mem_onchip_memory2_3+0x4b7a0>
 81317cc:	011f7c01 	jmpi	11f7c0 <__alt_mem_onchip_memory2_3+0x1187c0>
 81317d0:	001b0c0b 	ldhu	zero,27696(zero)
 81317d4:	00000028 	cmpgeui	zero,zero,0
 81317d8:	00000018 	cmpnei	zero,zero,0
 81317dc:	0812c000 	call	812c00 <__alt_mem_onchip_memory2_3+0x80bc00>
 81317e0:	000005dc 	xori	zero,zero,23
 81317e4:	400e4400 	call	400e440 <__alt_mem_onchip_memory2_3+0x4007440>
 81317e8:	92099170 	cmpltui	r8,r18,9797
 81317ec:	95079308 	cmpgei	r20,r18,7756
 81317f0:	97049605 	stb	fp,4696(r18)
 81317f4:	90019f03 	ldbu	zero,1660(r18)
 81317f8:	9c06940a 	0x9c06940a
 81317fc:	00000002 	0x2
 8131800:	00000028 	cmpgeui	zero,zero,0
 8131804:	00000044 	movi	zero,1
 8131808:	0812c5dc 	xori	zero,at,19223
 813180c:	000005b0 	cmpltui	zero,zero,22
 8131810:	3c0e4400 	call	3c0e440 <__alt_mem_onchip_memory2_3+0x3c07440>
 8131814:	92099168 	cmpgeui	r8,r18,9797
 8131818:	95079308 	cmpgei	r20,r18,7756
 813181c:	9c039705 	stb	r16,3676(r19)
 8131820:	90019f02 	0x90019f02
 8131824:	9606940a 	0x9606940a
 8131828:	00000004 	movi	zero,0
 813182c:	081315ac 	andhi	zero,at,19542
