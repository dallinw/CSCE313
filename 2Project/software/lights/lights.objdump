
lights.elf:     file format elf32-littlenios2
lights.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x080001b4

Program Header:
    LOAD off    0x00001000 vaddr 0x08000000 paddr 0x08000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x08000020 paddr 0x08000020 align 2**12
         filesz 0x0000750c memsz 0x0000750c flags r-x
    LOAD off    0x0000852c vaddr 0x0800752c paddr 0x0800909c align 2**12
         filesz 0x00001b70 memsz 0x00001b70 flags rw-
    LOAD off    0x0000ac0c vaddr 0x0800ac0c paddr 0x0800ac0c align 2**12
         filesz 0x00000000 memsz 0x000002e0 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  08000000  08000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000194  08000020  08000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0000702c  080001b4  080001b4  000011b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       0000034c  080071e0  080071e0  000081e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001b70  0800752c  0800909c  0000852c  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000002e0  0800ac0c  0800ac0c  0000ac0c  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000023  00000000  00000000  0000a09c  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 000009d8  00000000  00000000  0000a0c0  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 00000ed0  00000000  00000000  0000aa98  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0001c93e  00000000  00000000  0000b968  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000584d  00000000  00000000  000282a6  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000e963  00000000  00000000  0002daf3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00001284  00000000  00000000  0003c458  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0000192f  00000000  00000000  0003d6dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000441d  00000000  00000000  0003f00b  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000060  00000000  00000000  00043428  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000360  00000000  00000000  00043488  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  00046014  2**0
                  CONTENTS, READONLY
 18 .cpu          00000005  00000000  00000000  00046017  2**0
                  CONTENTS, READONLY
 19 .simulation_enabled 00000001  00000000  00000000  0004601c  2**0
                  CONTENTS, READONLY
 20 .sysid_hash   00000004  00000000  00000000  0004601d  2**0
                  CONTENTS, READONLY
 21 .sysid_base   00000004  00000000  00000000  00046021  2**0
                  CONTENTS, READONLY
 22 .sysid_time   00000004  00000000  00000000  00046025  2**0
                  CONTENTS, READONLY
 23 .stderr_dev   00000005  00000000  00000000  00046029  2**0
                  CONTENTS, READONLY
 24 .stdin_dev    0000000b  00000000  00000000  0004602e  2**0
                  CONTENTS, READONLY
 25 .stdout_dev   0000000b  00000000  00000000  00046039  2**0
                  CONTENTS, READONLY
 26 .sopc_system_name 0000000b  00000000  00000000  00046044  2**0
                  CONTENTS, READONLY
 27 .quartus_project_dir 00000012  00000000  00000000  0004604f  2**0
                  CONTENTS, READONLY
 28 .jdi          000042c8  00000000  00000000  00046061  2**0
                  CONTENTS, READONLY
 29 .sopcinfo     00061531  00000000  00000000  0004a329  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
08000000 l    d  .entry	00000000 .entry
08000020 l    d  .exceptions	00000000 .exceptions
080001b4 l    d  .text	00000000 .text
080071e0 l    d  .rodata	00000000 .rodata
0800752c l    d  .rwdata	00000000 .rwdata
0800ac0c l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
080001fc l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
08000b30 l     F .text	0000007c udivmodsi4
00000000 l    df *ABS*	00000000 fwrite.c
00000000 l    df *ABS*	00000000 impure.c
0800752c l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 rand.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 findfp.c
08000f14 l     F .text	00000058 std
08001020 l     F .text	00000008 __fp_lock
08001028 l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
08003890 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
080038f0 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
080039f0 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
08003b10 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
08003bf0 l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
08003d4c l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
08003f78 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
08009084 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
08004244 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
08007edc l     O .rwdata	00001060 jtag_uart_0
08008f3c l     O .rwdata	00000120 lcd_0
08004334 l     F .text	00000038 alt_dev_reg
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
08004574 l     F .text	00000228 altera_avalon_jtag_uart_irq
0800479c l     F .text	000000b0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_lcd_16207.c
08009088 l     O .rwdata	00000004 colstart
08004e18 l     F .text	000000b8 lcd_write_command
08004ed0 l     F .text	000000d4 lcd_write_data
08004fa4 l     F .text	000000c4 lcd_clear_screen
08005068 l     F .text	000001ec lcd_repaint_screen
08005254 l     F .text	000000c8 lcd_scroll_up
0800531c l     F .text	000002d0 lcd_handle_escape
08005af8 l     F .text	000000cc alt_lcd_16207_timeout
00000000 l    df *ABS*	00000000 altera_avalon_lcd_16207_fd.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
080060f0 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
08006514 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
08006650 l     F .text	000000dc alt_file_locked
080068b4 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 ctype_.c
080073a9 l     O .rodata	00000180 _ctype_b
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
08006fc8 l     F .text	00000004 register_fini
00000000 l    df *ABS*	00000000 alt_exit.c
0800717c l     F .text	00000040 alt_sim_halt
0800368c g     F .text	00000070 _isatty_r
08003dac g     F .text	0000006c alt_main
08000d58 g     F .text	000000a0 _puts_r
0800ac5c g     O .bss	00000100 alt_irq
08003394 g     F .text	00000078 _lseek_r
0800909c g       *ABS*	00000000 __flash_rwdata_start
0800aeec g       *ABS*	00000000 __alt_heap_start
08002898 g     F .text	00000068 __sseek
08000f7c g     F .text	000000a4 __sinit
0800107c g     F .text	00000068 __sfmoreglue
08003e38 g     F .text	00000020 __malloc_unlock
080020b4 g     F .text	000000e0 memmove
0800106c g     F .text	00000010 _cleanup
00000000  w      *UND*	00000000 __errno
08000000 g     F .entry	0000001c __reset
08000020 g       *ABS*	00000000 __flash_exceptions_start
08003618 g     F .text	00000074 _fstat_r
0800ac18 g     O .bss	00000004 errno
0800ac20 g     O .bss	00000004 alt_argv
0801105c g       *ABS*	00000000 _gp
080040f4 g     F .text	00000030 usleep
08007d5c g     O .rwdata	00000180 alt_fd_list
08006ad8 g     F .text	00000094 alt_find_dev
08002014 g     F .text	000000a0 memcpy
08001060 g     F .text	0000000c _cleanup_r
080065d8 g     F .text	00000078 alt_io_redirect
080071e0 g       *ABS*	00000000 __DTOR_END__
08000df8 g     F .text	00000014 puts
08006ab8 g     F .text	00000020 altera_nios2_irq_init
080049b4 g     F .text	00000224 altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
08000c6c g     F .text	00000008 __udivsi3
08003a50 g     F .text	000000c0 isatty
08006d44 g     F .text	00000090 alt_icache_flush
0800ac0c g     O .bss	00000004 __malloc_top_pad
080011d4 g     F .text	0000049c __sfvwrite_r
08002820 g     F .text	00000070 _sbrk_r
080035a0 g     F .text	00000078 _read_r
0800907c g     O .rwdata	00000004 alt_max_fd
08002c00 g     F .text	00000110 _fclose_r
08002f20 g     F .text	00000034 fflush
0800ac10 g     O .bss	00000004 __malloc_max_sbrked_mem
08003c5c g     F .text	000000f0 lseek
08009060 g     O .rwdata	00000004 _global_impure_ptr
0800222c g     F .text	000005f4 _realloc_r
0800aeec g       *ABS*	00000000 __bss_end
0800641c g     F .text	000000f8 alt_iic_isr_register
080069ac g     F .text	0000010c alt_tick
08009098 g     O .rwdata	00000004 __ctype_ptr
08001048 g     F .text	00000018 __fp_lock_all
080063d4 g     F .text	00000048 alt_ic_irq_enabled
08006914 g     F .text	00000098 alt_alarm_stop
0800ac28 g     O .bss	00000004 alt_irq_active
080000ec g     F .exceptions	000000c8 alt_irq_handler
08007d34 g     O .rwdata	00000028 alt_dev_null
08005ff8 g     F .text	00000044 alt_dcache_flush_all
0800909c g       *ABS*	00000000 __ram_rwdata_end
08009074 g     O .rwdata	00000008 alt_dev_list
08004124 g     F .text	00000120 write
0800752c g       *ABS*	00000000 __ram_rodata_end
0800391c g     F .text	000000d4 fstat
08000c74 g     F .text	00000008 __umodsi3
0800aeec g       *ABS*	00000000 end
080055ec g     F .text	0000050c altera_avalon_lcd_16207_write
080044b4 g     F .text	000000c0 altera_avalon_jtag_uart_init
080071dc g       *ABS*	00000000 __CTOR_LIST__
10000000 g       *ABS*	00000000 __alt_stack_pointer
08004bd8 g     F .text	00000240 altera_avalon_jtag_uart_write
08000f6c g     F .text	00000004 __sfp_lock_acquire
08001f30 g     F .text	000000e4 memchr
08003080 g     F .text	00000314 _free_r
08006fcc g     F .text	000001b0 __call_exitprocs
08009068 g     O .rwdata	00000004 __malloc_sbrk_base
080001b4 g     F .text	0000004c _start
0800ac2c g     O .bss	00000004 _alt_tick_rate
08000e28 g     F .text	00000078 rand
0800ac30 g     O .bss	00000004 _alt_nticks
08003e58 g     F .text	00000120 read
080042d8 g     F .text	0000005c alt_sys_init
08006e94 g     F .text	00000134 __register_exitproc
0800484c g     F .text	00000074 altera_avalon_jtag_uart_close
0800752c g       *ABS*	00000000 __ram_rwdata_start
080071e0 g       *ABS*	00000000 __ram_rodata_start
0800ac34 g     O .bss	00000028 __malloc_current_mallinfo
0800436c g     F .text	00000058 altera_avalon_jtag_uart_read_fd
08006c8c g     F .text	000000b8 alt_get_fd
08005eac g     F .text	0000014c alt_busy_sleep
08002b90 g     F .text	00000070 _close_r
08006e20 g     F .text	00000074 memcmp
0800441c g     F .text	00000048 altera_avalon_jtag_uart_close_fd
0800aeec g       *ABS*	00000000 __alt_stack_base
08004464 g     F .text	00000050 altera_avalon_jtag_uart_ioctl_fd
08000c7c g     F .text	0000009c _fwrite_r
08002a54 g     F .text	0000013c __swsetup_r
080010e4 g     F .text	000000f0 __sfp
0800792c g     O .rwdata	00000408 __malloc_av_
08000f78 g     F .text	00000004 __sinit_lock_release
0800297c g     F .text	00000060 __sread
08006b6c g     F .text	00000120 alt_find_file
0800603c g     F .text	000000b4 alt_dev_llist_insert
08003e18 g     F .text	00000020 __malloc_lock
08004038 g     F .text	000000bc sbrk
08002d24 g     F .text	000001fc _fflush_r
0800ac0c g       *ABS*	00000000 __bss_start
08002194 g     F .text	00000098 memset
08000200 g     F .text	00000930 main
0800ac24 g     O .bss	00000004 alt_envp
0800ac14 g     O .bss	00000004 __malloc_max_total_mem
080043c4 g     F .text	00000058 altera_avalon_jtag_uart_write_fd
08000e0c g     F .text	0000001c srand
08005bc4 g     F .text	0000013c altera_avalon_lcd_16207_init
08002890 g     F .text	00000008 __sclose
10000000 g       *ABS*	00000000 __alt_heap_limit
08002d10 g     F .text	00000014 fclose
0800ad5c g     O .bss	00000190 _atexit0
080017f0 g     F .text	00000740 _malloc_r
08009080 g     O .rwdata	00000004 alt_errno
08001738 g     F .text	000000b8 _fwalk
08000bac g     F .text	00000060 __divsi3
08002f54 g     F .text	0000012c _malloc_trim_r
080071e0 g       *ABS*	00000000 __CTOR_END__
080071e0 g       *ABS*	00000000 __flash_rodata_start
080071e0 g       *ABS*	00000000 __DTOR_LIST__
080042a4 g     F .text	00000034 alt_irq_init
08003fd8 g     F .text	00000060 alt_release_fd
08006dd4 g     F .text	00000014 atexit
080029dc g     F .text	00000078 _write_r
0800905c g     O .rwdata	00000004 _impure_ptr
0800ac1c g     O .bss	00000004 alt_argc
080061b4 g     F .text	00000064 _do_dtors
08000000 g       *ABS*	00000000 __alt_mem_sdram_0
08000020 g       .exceptions	00000000 alt_irq_entry
08001030 g     F .text	00000018 __fp_unlock_all
08005d00 g     F .text	00000058 altera_avalon_lcd_16207_write_fd
0800906c g     O .rwdata	00000008 alt_fs_list
08000020 g       *ABS*	00000000 __ram_exceptions_start
08006248 g     F .text	00000050 alt_ic_isr_register
08000d18 g     F .text	00000040 fwrite
0800909c g       *ABS*	00000000 _edata
0800aeec g       *ABS*	00000000 _end
080001b4 g       *ABS*	00000000 __ram_exceptions_end
080048c0 g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
08006334 g     F .text	000000a0 alt_ic_irq_disable
08002900 g     F .text	0000007c __swrite
08009064 g     O .rwdata	00000004 __malloc_trim_threshold
08006de8 g     F .text	00000038 exit
08001670 g     F .text	000000c8 _fwalk_reent
08000c0c g     F .text	00000060 __modsi3
10000000 g       *ABS*	00000000 __alt_data_end
08000020 g     F .exceptions	00000000 alt_exception
08000f70 g     F .text	00000004 __sfp_lock_release
080072a8 g     O .rodata	00000101 _ctype_
080071bc g     F .text	00000020 _exit
08005d58 g     F .text	00000154 alt_alarm_start
080036fc g     F .text	00000098 __muldi3
0800340c g     F .text	00000194 __smakebuf_r
08000ea0 g     F .text	00000074 strlen
0800672c g     F .text	00000188 open
08006218 g     F .text	00000030 alt_icache_flush_all
0800908c g     O .rwdata	00000004 alt_priority_mask
08006298 g     F .text	0000009c alt_ic_irq_enable
08009090 g     O .rwdata	00000008 alt_alarm_list
08006150 g     F .text	00000064 _do_ctors
08003794 g     F .text	000000fc close
08003b70 g     F .text	00000080 alt_load
00000000  w      *UND*	00000000 free
08000f74 g     F .text	00000004 __sinit_lock_acquire



Disassembly of section .entry:

08000000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && !defined(ALT_SIM_OPTIMIZE)
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
 8000000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
 8000004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
 8000008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
 800000c:	00bffd16 	blt	zero,r2,8000004 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 8000010:	00420034 	movhi	at,2048
    ori r1, r1, %lo(_start)
 8000014:	08406d14 	ori	at,at,436
    jmp r1
 8000018:	0800683a 	jmp	at
 800001c:	00000000 	call	0 <__alt_mem_sdram_0-0x8000000>

Disassembly of section .exceptions:

08000020 <alt_exception>:
         * Process an exception.  For all exceptions we must preserve all
         * caller saved registers on the stack (See the Nios2 ABI
         * documentation for details).
         */

        addi  sp, sp, -76
 8000020:	deffed04 	addi	sp,sp,-76

#endif

#endif

        stw   ra,  0(sp)
 8000024:	dfc00015 	stw	ra,0(sp)
        /*
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */

        stw   r1,   8(sp)
 8000028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 800002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 8000030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 8000034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 8000038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 800003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 8000040:	d9c00815 	stw	r7,32(sp)

        rdctl r5, estatus
 8000044:	000b307a 	rdctl	r5,estatus

        stw   r8,  36(sp)
 8000048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 800004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 8000050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 8000054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 8000058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 800005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 8000060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 8000064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 8000068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 800006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 8000070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 8000074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 8000078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 800007c:	10000326 	beq	r2,zero,800008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 8000080:	20000226 	beq	r4,zero,800008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 8000084:	80000ec0 	call	80000ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 8000088:	00000306 	br	8000098 <alt_exception+0x78>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
 800008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
 8000090:	e8bfff17 	ldw	r2,-4(ea)
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
 8000094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 8000098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 800009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 80000a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 80000a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 80000a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 80000ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 80000b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 80000b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 80000b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 80000bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 80000c0:	d9c00817 	ldw	r7,32(sp)
#ifdef ALT_STACK_CHECK
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif
#endif

        ldw   r8,  36(sp)
 80000c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 80000c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 80000cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 80000d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 80000d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 80000d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 80000dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 80000e0:	dbc01017 	ldw	r15,64(sp)
#endif

        ldw   sp,  76(sp)

#else
        addi  sp, sp, 76
 80000e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 80000e8:	ef80083a 	eret

080000ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 80000ec:	defff904 	addi	sp,sp,-28
 80000f0:	dfc00615 	stw	ra,24(sp)
 80000f4:	df000515 	stw	fp,20(sp)
 80000f8:	df000504 	addi	fp,sp,20
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 80000fc:	0005313a 	rdctl	r2,ipending
 8000100:	e0bffc15 	stw	r2,-16(fp)

  return active;
 8000104:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 8000108:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
 800010c:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 8000110:	00800044 	movi	r2,1
 8000114:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 8000118:	e0ffff17 	ldw	r3,-4(fp)
 800011c:	e0bffe17 	ldw	r2,-8(fp)
 8000120:	1884703a 	and	r2,r3,r2
 8000124:	1005003a 	cmpeq	r2,r2,zero
 8000128:	1000161e 	bne	r2,zero,8000184 <alt_irq_handler+0x98>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 800012c:	e0bffd17 	ldw	r2,-12(fp)
 8000130:	00c20074 	movhi	r3,2049
 8000134:	18eb1704 	addi	r3,r3,-21412
 8000138:	100490fa 	slli	r2,r2,3
 800013c:	10c5883a 	add	r2,r2,r3
 8000140:	11400017 	ldw	r5,0(r2)
 8000144:	e0bffd17 	ldw	r2,-12(fp)
 8000148:	00c20074 	movhi	r3,2049
 800014c:	18eb1704 	addi	r3,r3,-21412
 8000150:	100490fa 	slli	r2,r2,3
 8000154:	10c5883a 	add	r2,r2,r3
 8000158:	10800104 	addi	r2,r2,4
 800015c:	11000017 	ldw	r4,0(r2)
 8000160:	283ee83a 	callr	r5
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 8000164:	0005313a 	rdctl	r2,ipending
 8000168:	e0bffb15 	stw	r2,-20(fp)

  return active;
 800016c:	e0bffb17 	ldw	r2,-20(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
 8000170:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
 8000174:	e0bfff17 	ldw	r2,-4(fp)
 8000178:	1004c03a 	cmpne	r2,r2,zero
 800017c:	103fe31e 	bne	r2,zero,800010c <alt_irq_handler+0x20>
 8000180:	00000706 	br	80001a0 <alt_irq_handler+0xb4>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
 8000184:	e0bffe17 	ldw	r2,-8(fp)
 8000188:	1085883a 	add	r2,r2,r2
 800018c:	e0bffe15 	stw	r2,-8(fp)
      i++;
 8000190:	e0bffd17 	ldw	r2,-12(fp)
 8000194:	10800044 	addi	r2,r2,1
 8000198:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 800019c:	003fde06 	br	8000118 <alt_irq_handler+0x2c>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
 80001a0:	e037883a 	mov	sp,fp
 80001a4:	dfc00117 	ldw	ra,4(sp)
 80001a8:	df000017 	ldw	fp,0(sp)
 80001ac:	dec00204 	addi	sp,sp,8
 80001b0:	f800283a 	ret

Disassembly of section .text:

080001b4 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
 80001b4:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
 80001b8:	10000033 	initd	0(r2)
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
 80001bc:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
 80001c0:	00bffd16 	blt	zero,r2,80001b8 <_start+0x4>
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 80001c4:	06c40034 	movhi	sp,4096
    ori sp, sp, %lo(__alt_stack_pointer)
 80001c8:	dec00014 	ori	sp,sp,0

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
 80001cc:	06820074 	movhi	gp,2049
    ori gp, gp, %lo(_gp)
 80001d0:	d6841714 	ori	gp,gp,4188
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 80001d4:	00820034 	movhi	r2,2048
    ori r2, r2, %lo(__bss_start)
 80001d8:	10ab0314 	ori	r2,r2,44044

    movhi r3, %hi(__bss_end)
 80001dc:	00c20034 	movhi	r3,2048
    ori r3, r3, %lo(__bss_end)
 80001e0:	18ebbb14 	ori	r3,r3,44780

    beq r2, r3, 1f
 80001e4:	10c00326 	beq	r2,r3,80001f4 <_start+0x40>

0:
    stw zero, (r2)
 80001e8:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 80001ec:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 80001f0:	10fffd36 	bltu	r2,r3,80001e8 <_start+0x34>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 80001f4:	8003b700 	call	8003b70 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 80001f8:	8003dac0 	call	8003dac <alt_main>

080001fc <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 80001fc:	003fff06 	br	80001fc <alt_after_alt_main>

08000200 <main>:
#include "system.h"
#include "altera_avalon_pio_regs.h"
#include "alt_types.h"

int main()
{
 8000200:	deffdc04 	addi	sp,sp,-144
 8000204:	dfc02315 	stw	ra,140(sp)
 8000208:	df002215 	stw	fp,136(sp)
 800020c:	df002204 	addi	fp,sp,136
	alt_u32 current_value;
	alt_u32 current_state;
	alt_u8 current_direction;
	alt_u32 keys;
	current_state=3;
 8000210:	008000c4 	movi	r2,3
 8000214:	e0bff415 	stw	r2,-48(fp)
	current_value=1;
 8000218:	00800044 	movi	r2,1
 800021c:	e0bff515 	stw	r2,-44(fp)
	current_direction=0;
 8000220:	e03ff305 	stb	zero,-52(fp)
	printf("Program running (UART)...\n");
 8000224:	01020034 	movhi	r4,2048
 8000228:	211c7804 	addi	r4,r4,29152
 800022c:	8000df80 	call	8000df8 <puts>
	fprintf(stderr,"Program running (LCD)...\n");
 8000230:	00820074 	movhi	r2,2049
 8000234:	10a41704 	addi	r2,r2,-28580
 8000238:	10800017 	ldw	r2,0(r2)
 800023c:	11c00317 	ldw	r7,12(r2)
 8000240:	01020034 	movhi	r4,2048
 8000244:	211c7f04 	addi	r4,r4,29180
 8000248:	01400044 	movi	r5,1
 800024c:	01800644 	movi	r6,25
 8000250:	8000d180 	call	8000d18 <fwrite>
 8000254:	00000006 	br	8000258 <main+0x58>
	IOWR_ALTERA_AVALON_PIO_DATA(HEX5_BASE,56);
	IOWR_ALTERA_AVALON_PIO_DATA(HEX6_BASE,87);
	IOWR_ALTERA_AVALON_PIO_DATA(HEX7_BASE,127);
	*/
	// read the current state of the keys
	keys=IORD_ALTERA_AVALON_PIO_DATA(KEYS_BASE);
 8000258:	00840034 	movhi	r2,4096
 800025c:	10840404 	addi	r2,r2,4112
 8000260:	10800037 	ldwio	r2,0(r2)
 8000264:	e0bff215 	stw	r2,-56(fp)
	// switch speed if necessary
	if ((keys != 7) && (keys != current_state)) {
 8000268:	e0bff217 	ldw	r2,-56(fp)
 800026c:	108001e0 	cmpeqi	r2,r2,7
 8000270:	1000191e 	bne	r2,zero,80002d8 <main+0xd8>
 8000274:	e0fff217 	ldw	r3,-56(fp)
 8000278:	e0bff417 	ldw	r2,-48(fp)
 800027c:	18801626 	beq	r3,r2,80002d8 <main+0xd8>
		if (keys == 3)  printf("speed set to 250 ms\n");
 8000280:	e0bff217 	ldw	r2,-56(fp)
 8000284:	108000d8 	cmpnei	r2,r2,3
 8000288:	1000041e 	bne	r2,zero,800029c <main+0x9c>
 800028c:	01020034 	movhi	r4,2048
 8000290:	211c8604 	addi	r4,r4,29208
 8000294:	8000df80 	call	8000df8 <puts>
 8000298:	00000d06 	br	80002d0 <main+0xd0>
		else if (keys == 5)
 800029c:	e0bff217 	ldw	r2,-56(fp)
 80002a0:	10800158 	cmpnei	r2,r2,5
 80002a4:	1000041e 	bne	r2,zero,80002b8 <main+0xb8>
			printf("speed set to 150 ms\n");
 80002a8:	01020034 	movhi	r4,2048
 80002ac:	211c8b04 	addi	r4,r4,29228
 80002b0:	8000df80 	call	8000df8 <puts>
 80002b4:	00000606 	br	80002d0 <main+0xd0>
		else if (keys == 6)
 80002b8:	e0bff217 	ldw	r2,-56(fp)
 80002bc:	10800198 	cmpnei	r2,r2,6
 80002c0:	1000031e 	bne	r2,zero,80002d0 <main+0xd0>
			printf("speed set to 50 ms\n");
 80002c4:	01020034 	movhi	r4,2048
 80002c8:	211c9004 	addi	r4,r4,29248
 80002cc:	8000df80 	call	8000df8 <puts>
		current_state=keys;
 80002d0:	e0bff217 	ldw	r2,-56(fp)
 80002d4:	e0bff415 	stw	r2,-48(fp)
	}


	if (current_state == 3) {
 80002d8:	e0bff417 	ldw	r2,-48(fp)
 80002dc:	108000d8 	cmpnei	r2,r2,3
 80002e0:	1000391e 	bne	r2,zero,80003c8 <main+0x1c8>
		//assign configurations of 7-segment displays randomly
		IOWR_ALTERA_AVALON_PIO_DATA(HEX0_BASE,rand() % 127);
 80002e4:	8000e280 	call	8000e28 <rand>
 80002e8:	1009883a 	mov	r4,r2
 80002ec:	01401fc4 	movi	r5,127
 80002f0:	8000c0c0 	call	8000c0c <__modsi3>
 80002f4:	1007883a 	mov	r3,r2
 80002f8:	0005883a 	mov	r2,zero
 80002fc:	10c00035 	stwio	r3,0(r2)
		IOWR_ALTERA_AVALON_PIO_DATA(HEX1_BASE,rand() % 127);
 8000300:	8000e280 	call	8000e28 <rand>
 8000304:	1009883a 	mov	r4,r2
 8000308:	01401fc4 	movi	r5,127
 800030c:	8000c0c0 	call	8000c0c <__modsi3>
 8000310:	1007883a 	mov	r3,r2
 8000314:	00800404 	movi	r2,16
 8000318:	10c00035 	stwio	r3,0(r2)
		IOWR_ALTERA_AVALON_PIO_DATA(HEX2_BASE,rand() % 127);
 800031c:	8000e280 	call	8000e28 <rand>
 8000320:	1009883a 	mov	r4,r2
 8000324:	01401fc4 	movi	r5,127
 8000328:	8000c0c0 	call	8000c0c <__modsi3>
 800032c:	1007883a 	mov	r3,r2
 8000330:	00800804 	movi	r2,32
 8000334:	10c00035 	stwio	r3,0(r2)
		IOWR_ALTERA_AVALON_PIO_DATA(HEX3_BASE,rand() % 127);
 8000338:	8000e280 	call	8000e28 <rand>
 800033c:	1009883a 	mov	r4,r2
 8000340:	01401fc4 	movi	r5,127
 8000344:	8000c0c0 	call	8000c0c <__modsi3>
 8000348:	1007883a 	mov	r3,r2
 800034c:	00800c04 	movi	r2,48
 8000350:	10c00035 	stwio	r3,0(r2)
		IOWR_ALTERA_AVALON_PIO_DATA(HEX4_BASE,rand() % 127);
 8000354:	8000e280 	call	8000e28 <rand>
 8000358:	1009883a 	mov	r4,r2
 800035c:	01401fc4 	movi	r5,127
 8000360:	8000c0c0 	call	8000c0c <__modsi3>
 8000364:	1007883a 	mov	r3,r2
 8000368:	00801004 	movi	r2,64
 800036c:	10c00035 	stwio	r3,0(r2)
		IOWR_ALTERA_AVALON_PIO_DATA(HEX5_BASE,rand() % 127);
 8000370:	8000e280 	call	8000e28 <rand>
 8000374:	1009883a 	mov	r4,r2
 8000378:	01401fc4 	movi	r5,127
 800037c:	8000c0c0 	call	8000c0c <__modsi3>
 8000380:	1007883a 	mov	r3,r2
 8000384:	00801404 	movi	r2,80
 8000388:	10c00035 	stwio	r3,0(r2)
		IOWR_ALTERA_AVALON_PIO_DATA(HEX6_BASE,rand() % 127);
 800038c:	8000e280 	call	8000e28 <rand>
 8000390:	1009883a 	mov	r4,r2
 8000394:	01401fc4 	movi	r5,127
 8000398:	8000c0c0 	call	8000c0c <__modsi3>
 800039c:	1007883a 	mov	r3,r2
 80003a0:	00801804 	movi	r2,96
 80003a4:	10c00035 	stwio	r3,0(r2)
		IOWR_ALTERA_AVALON_PIO_DATA(HEX7_BASE,rand() % 127);
 80003a8:	8000e280 	call	8000e28 <rand>
 80003ac:	1009883a 	mov	r4,r2
 80003b0:	01401fc4 	movi	r5,127
 80003b4:	8000c0c0 	call	8000c0c <__modsi3>
 80003b8:	1007883a 	mov	r3,r2
 80003bc:	00801c04 	movi	r2,112
 80003c0:	10c00035 	stwio	r3,0(r2)
 80003c4:	0001aa06 	br	8000a70 <main+0x870>

	} else if (current_state == 5) {
 80003c8:	e0bff417 	ldw	r2,-48(fp)
 80003cc:	10800158 	cmpnei	r2,r2,5
 80003d0:	1000a51e 	bne	r2,zero,8000668 <main+0x468>
		//create a clockwise rotation of a single outer segment along the 8 7-segment displays
		int i;
		for(i = 0; i < 20; ++i) {
 80003d4:	e03ff115 	stw	zero,-60(fp)
 80003d8:	00009f06 	br	8000658 <main+0x458>
			usleep (20000);
 80003dc:	01138804 	movi	r4,20000
 80003e0:	80040f40 	call	80040f4 <usleep>
			//check each iteration to determine whether a different button has been pressed
			keys = keys=IORD_ALTERA_AVALON_PIO_DATA(KEYS_BASE);
 80003e4:	00840034 	movhi	r2,4096
 80003e8:	10840404 	addi	r2,r2,4112
 80003ec:	10800037 	ldwio	r2,0(r2)
 80003f0:	e0bff215 	stw	r2,-56(fp)
			if (keys != 7 && keys != 5) {
 80003f4:	e0bff217 	ldw	r2,-56(fp)
 80003f8:	108001e0 	cmpeqi	r2,r2,7
 80003fc:	1000031e 	bne	r2,zero,800040c <main+0x20c>
 8000400:	e0bff217 	ldw	r2,-56(fp)
 8000404:	10800158 	cmpnei	r2,r2,5
 8000408:	1001991e 	bne	r2,zero,8000a70 <main+0x870>
				break;
			}
			IOWR_ALTERA_AVALON_PIO_DATA(HEX0_BASE,127);
 800040c:	0007883a 	mov	r3,zero
 8000410:	00801fc4 	movi	r2,127
 8000414:	18800035 	stwio	r2,0(r3)
			IOWR_ALTERA_AVALON_PIO_DATA(HEX1_BASE,127);
 8000418:	00c00404 	movi	r3,16
 800041c:	00801fc4 	movi	r2,127
 8000420:	18800035 	stwio	r2,0(r3)
			IOWR_ALTERA_AVALON_PIO_DATA(HEX2_BASE,127);
 8000424:	00c00804 	movi	r3,32
 8000428:	00801fc4 	movi	r2,127
 800042c:	18800035 	stwio	r2,0(r3)
			IOWR_ALTERA_AVALON_PIO_DATA(HEX3_BASE,127);
 8000430:	00c00c04 	movi	r3,48
 8000434:	00801fc4 	movi	r2,127
 8000438:	18800035 	stwio	r2,0(r3)
			IOWR_ALTERA_AVALON_PIO_DATA(HEX4_BASE,127);
 800043c:	00c01004 	movi	r3,64
 8000440:	00801fc4 	movi	r2,127
 8000444:	18800035 	stwio	r2,0(r3)
			IOWR_ALTERA_AVALON_PIO_DATA(HEX5_BASE,127);
 8000448:	00c01404 	movi	r3,80
 800044c:	00801fc4 	movi	r2,127
 8000450:	18800035 	stwio	r2,0(r3)
			IOWR_ALTERA_AVALON_PIO_DATA(HEX6_BASE,127);
 8000454:	00c01804 	movi	r3,96
 8000458:	00801fc4 	movi	r2,127
 800045c:	18800035 	stwio	r2,0(r3)
			IOWR_ALTERA_AVALON_PIO_DATA(HEX7_BASE,127);
 8000460:	00c01c04 	movi	r3,112
 8000464:	00801fc4 	movi	r2,127
 8000468:	18800035 	stwio	r2,0(r3)

			if(i == 0) {
 800046c:	e0bff117 	ldw	r2,-60(fp)
 8000470:	1004c03a 	cmpne	r2,r2,zero
 8000474:	1000031e 	bne	r2,zero,8000484 <main+0x284>
				IOWR_ALTERA_AVALON_PIO_DATA(HEX0_BASE,126);
 8000478:	0007883a 	mov	r3,zero
 800047c:	00801f84 	movi	r2,126
 8000480:	18800035 	stwio	r2,0(r3)
			}
			if(i == 1) {
 8000484:	e0bff117 	ldw	r2,-60(fp)
 8000488:	10800058 	cmpnei	r2,r2,1
 800048c:	1000031e 	bne	r2,zero,800049c <main+0x29c>
				IOWR_ALTERA_AVALON_PIO_DATA(HEX0_BASE,125);
 8000490:	0007883a 	mov	r3,zero
 8000494:	00801f44 	movi	r2,125
 8000498:	18800035 	stwio	r2,0(r3)
			}
			if(i == 2) {
 800049c:	e0bff117 	ldw	r2,-60(fp)
 80004a0:	10800098 	cmpnei	r2,r2,2
 80004a4:	1000031e 	bne	r2,zero,80004b4 <main+0x2b4>
				IOWR_ALTERA_AVALON_PIO_DATA(HEX0_BASE,123);
 80004a8:	0007883a 	mov	r3,zero
 80004ac:	00801ec4 	movi	r2,123
 80004b0:	18800035 	stwio	r2,0(r3)
			}
			if(i == 3) {
 80004b4:	e0bff117 	ldw	r2,-60(fp)
 80004b8:	108000d8 	cmpnei	r2,r2,3
 80004bc:	1000031e 	bne	r2,zero,80004cc <main+0x2cc>
				IOWR_ALTERA_AVALON_PIO_DATA(HEX0_BASE,119);
 80004c0:	0007883a 	mov	r3,zero
 80004c4:	00801dc4 	movi	r2,119
 80004c8:	18800035 	stwio	r2,0(r3)
			}
			if(i == 4) {
 80004cc:	e0bff117 	ldw	r2,-60(fp)
 80004d0:	10800118 	cmpnei	r2,r2,4
 80004d4:	1000031e 	bne	r2,zero,80004e4 <main+0x2e4>
				IOWR_ALTERA_AVALON_PIO_DATA(HEX1_BASE,119);
 80004d8:	00c00404 	movi	r3,16
 80004dc:	00801dc4 	movi	r2,119
 80004e0:	18800035 	stwio	r2,0(r3)
			}
			if(i == 5) {
 80004e4:	e0bff117 	ldw	r2,-60(fp)
 80004e8:	10800158 	cmpnei	r2,r2,5
 80004ec:	1000031e 	bne	r2,zero,80004fc <main+0x2fc>
				IOWR_ALTERA_AVALON_PIO_DATA(HEX2_BASE,119);
 80004f0:	00c00804 	movi	r3,32
 80004f4:	00801dc4 	movi	r2,119
 80004f8:	18800035 	stwio	r2,0(r3)
			}
			if(i == 6) {
 80004fc:	e0bff117 	ldw	r2,-60(fp)
 8000500:	10800198 	cmpnei	r2,r2,6
 8000504:	1000031e 	bne	r2,zero,8000514 <main+0x314>
				IOWR_ALTERA_AVALON_PIO_DATA(HEX3_BASE,119);
 8000508:	00c00c04 	movi	r3,48
 800050c:	00801dc4 	movi	r2,119
 8000510:	18800035 	stwio	r2,0(r3)
			}
			if(i == 7) {
 8000514:	e0bff117 	ldw	r2,-60(fp)
 8000518:	108001d8 	cmpnei	r2,r2,7
 800051c:	1000031e 	bne	r2,zero,800052c <main+0x32c>
				IOWR_ALTERA_AVALON_PIO_DATA(HEX4_BASE,119);
 8000520:	00c01004 	movi	r3,64
 8000524:	00801dc4 	movi	r2,119
 8000528:	18800035 	stwio	r2,0(r3)
			}
			if(i == 8) {
 800052c:	e0bff117 	ldw	r2,-60(fp)
 8000530:	10800218 	cmpnei	r2,r2,8
 8000534:	1000031e 	bne	r2,zero,8000544 <main+0x344>
				IOWR_ALTERA_AVALON_PIO_DATA(HEX5_BASE,119);
 8000538:	00c01404 	movi	r3,80
 800053c:	00801dc4 	movi	r2,119
 8000540:	18800035 	stwio	r2,0(r3)
			}
			if(i == 9) {
 8000544:	e0bff117 	ldw	r2,-60(fp)
 8000548:	10800258 	cmpnei	r2,r2,9
 800054c:	1000031e 	bne	r2,zero,800055c <main+0x35c>
				IOWR_ALTERA_AVALON_PIO_DATA(HEX6_BASE,119);
 8000550:	00c01804 	movi	r3,96
 8000554:	00801dc4 	movi	r2,119
 8000558:	18800035 	stwio	r2,0(r3)
			}
			if(i == 10) {
 800055c:	e0bff117 	ldw	r2,-60(fp)
 8000560:	10800298 	cmpnei	r2,r2,10
 8000564:	1000031e 	bne	r2,zero,8000574 <main+0x374>
				IOWR_ALTERA_AVALON_PIO_DATA(HEX7_BASE,119);
 8000568:	00c01c04 	movi	r3,112
 800056c:	00801dc4 	movi	r2,119
 8000570:	18800035 	stwio	r2,0(r3)
			}
			if(i == 11) {
 8000574:	e0bff117 	ldw	r2,-60(fp)
 8000578:	108002d8 	cmpnei	r2,r2,11
 800057c:	1000031e 	bne	r2,zero,800058c <main+0x38c>
				IOWR_ALTERA_AVALON_PIO_DATA(HEX7_BASE,111);
 8000580:	00c01c04 	movi	r3,112
 8000584:	00801bc4 	movi	r2,111
 8000588:	18800035 	stwio	r2,0(r3)
			}
			if(i == 12) {
 800058c:	e0bff117 	ldw	r2,-60(fp)
 8000590:	10800318 	cmpnei	r2,r2,12
 8000594:	1000031e 	bne	r2,zero,80005a4 <main+0x3a4>
				IOWR_ALTERA_AVALON_PIO_DATA(HEX7_BASE,95);
 8000598:	00c01c04 	movi	r3,112
 800059c:	008017c4 	movi	r2,95
 80005a0:	18800035 	stwio	r2,0(r3)
			}
			if(i == 13) {
 80005a4:	e0bff117 	ldw	r2,-60(fp)
 80005a8:	10800358 	cmpnei	r2,r2,13
 80005ac:	1000031e 	bne	r2,zero,80005bc <main+0x3bc>
				IOWR_ALTERA_AVALON_PIO_DATA(HEX7_BASE,126);
 80005b0:	00c01c04 	movi	r3,112
 80005b4:	00801f84 	movi	r2,126
 80005b8:	18800035 	stwio	r2,0(r3)
			}
			if(i == 14) {
 80005bc:	e0bff117 	ldw	r2,-60(fp)
 80005c0:	10800398 	cmpnei	r2,r2,14
 80005c4:	1000031e 	bne	r2,zero,80005d4 <main+0x3d4>
				IOWR_ALTERA_AVALON_PIO_DATA(HEX6_BASE,126);
 80005c8:	00c01804 	movi	r3,96
 80005cc:	00801f84 	movi	r2,126
 80005d0:	18800035 	stwio	r2,0(r3)
			}
			if(i == 15) {
 80005d4:	e0bff117 	ldw	r2,-60(fp)
 80005d8:	108003d8 	cmpnei	r2,r2,15
 80005dc:	1000031e 	bne	r2,zero,80005ec <main+0x3ec>
				IOWR_ALTERA_AVALON_PIO_DATA(HEX5_BASE,126);
 80005e0:	00c01404 	movi	r3,80
 80005e4:	00801f84 	movi	r2,126
 80005e8:	18800035 	stwio	r2,0(r3)
			}
			if(i == 16) {
 80005ec:	e0bff117 	ldw	r2,-60(fp)
 80005f0:	10800418 	cmpnei	r2,r2,16
 80005f4:	1000031e 	bne	r2,zero,8000604 <main+0x404>
				IOWR_ALTERA_AVALON_PIO_DATA(HEX4_BASE,126);
 80005f8:	00c01004 	movi	r3,64
 80005fc:	00801f84 	movi	r2,126
 8000600:	18800035 	stwio	r2,0(r3)
			}
			if(i == 17) {
 8000604:	e0bff117 	ldw	r2,-60(fp)
 8000608:	10800458 	cmpnei	r2,r2,17
 800060c:	1000031e 	bne	r2,zero,800061c <main+0x41c>
				IOWR_ALTERA_AVALON_PIO_DATA(HEX3_BASE,126);
 8000610:	00c00c04 	movi	r3,48
 8000614:	00801f84 	movi	r2,126
 8000618:	18800035 	stwio	r2,0(r3)
			}
			if(i == 18) {
 800061c:	e0bff117 	ldw	r2,-60(fp)
 8000620:	10800498 	cmpnei	r2,r2,18
 8000624:	1000031e 	bne	r2,zero,8000634 <main+0x434>
				IOWR_ALTERA_AVALON_PIO_DATA(HEX2_BASE,126);
 8000628:	00c00804 	movi	r3,32
 800062c:	00801f84 	movi	r2,126
 8000630:	18800035 	stwio	r2,0(r3)
			}
			if(i == 19) {
 8000634:	e0bff117 	ldw	r2,-60(fp)
 8000638:	108004d8 	cmpnei	r2,r2,19
 800063c:	1000031e 	bne	r2,zero,800064c <main+0x44c>
				IOWR_ALTERA_AVALON_PIO_DATA(HEX1_BASE,126);
 8000640:	00c00404 	movi	r3,16
 8000644:	00801f84 	movi	r2,126
 8000648:	18800035 	stwio	r2,0(r3)
		IOWR_ALTERA_AVALON_PIO_DATA(HEX7_BASE,rand() % 127);

	} else if (current_state == 5) {
		//create a clockwise rotation of a single outer segment along the 8 7-segment displays
		int i;
		for(i = 0; i < 20; ++i) {
 800064c:	e0bff117 	ldw	r2,-60(fp)
 8000650:	10800044 	addi	r2,r2,1
 8000654:	e0bff115 	stw	r2,-60(fp)
 8000658:	e0bff117 	ldw	r2,-60(fp)
 800065c:	10800510 	cmplti	r2,r2,20
 8000660:	103f5e1e 	bne	r2,zero,80003dc <main+0x1dc>
 8000664:	00010206 	br	8000a70 <main+0x870>
				IOWR_ALTERA_AVALON_PIO_DATA(HEX1_BASE,126);
				}

		}

	} else if (current_state == 6) {
 8000668:	e0bff417 	ldw	r2,-48(fp)
 800066c:	10800198 	cmpnei	r2,r2,6
 8000670:	1000ff1e 	bne	r2,zero,8000a70 <main+0x870>
		//printf("speed set to 50 ms\n");
		int zero = 64, one = 121, two = 36, three = 48, four = 25, five = 18, six = 2, seven = 120, eight = 0, nine = 16;
 8000674:	00801004 	movi	r2,64
 8000678:	e0bff015 	stw	r2,-64(fp)
 800067c:	00801e44 	movi	r2,121
 8000680:	e0bfef15 	stw	r2,-68(fp)
 8000684:	00800904 	movi	r2,36
 8000688:	e0bfee15 	stw	r2,-72(fp)
 800068c:	00800c04 	movi	r2,48
 8000690:	e0bfed15 	stw	r2,-76(fp)
 8000694:	00800644 	movi	r2,25
 8000698:	e0bfec15 	stw	r2,-80(fp)
 800069c:	00800484 	movi	r2,18
 80006a0:	e0bfeb15 	stw	r2,-84(fp)
 80006a4:	00800084 	movi	r2,2
 80006a8:	e0bfea15 	stw	r2,-88(fp)
 80006ac:	00801e04 	movi	r2,120
 80006b0:	e0bfe915 	stw	r2,-92(fp)
 80006b4:	e03fe815 	stw	zero,-96(fp)
 80006b8:	00800404 	movi	r2,16
 80006bc:	e0bfe715 	stw	r2,-100(fp)
		int decimalArr[] = {zero, one, two, three, four, five, six, seven, eight, nine};
 80006c0:	e0bff017 	ldw	r2,-64(fp)
 80006c4:	e0bff615 	stw	r2,-40(fp)
 80006c8:	e0bfef17 	ldw	r2,-68(fp)
 80006cc:	e0bff715 	stw	r2,-36(fp)
 80006d0:	e0bfee17 	ldw	r2,-72(fp)
 80006d4:	e0bff815 	stw	r2,-32(fp)
 80006d8:	e0bfed17 	ldw	r2,-76(fp)
 80006dc:	e0bff915 	stw	r2,-28(fp)
 80006e0:	e0bfec17 	ldw	r2,-80(fp)
 80006e4:	e0bffa15 	stw	r2,-24(fp)
 80006e8:	e0bfeb17 	ldw	r2,-84(fp)
 80006ec:	e0bffb15 	stw	r2,-20(fp)
 80006f0:	e0bfea17 	ldw	r2,-88(fp)
 80006f4:	e0bffc15 	stw	r2,-16(fp)
 80006f8:	e0bfe917 	ldw	r2,-92(fp)
 80006fc:	e0bffd15 	stw	r2,-12(fp)
 8000700:	e0bfe817 	ldw	r2,-96(fp)
 8000704:	e0bffe15 	stw	r2,-8(fp)
 8000708:	e0bfe717 	ldw	r2,-100(fp)
 800070c:	e0bfff15 	stw	r2,-4(fp)
		int sleepTime = 15000;
 8000710:	008ea604 	movi	r2,15000
 8000714:	e0bfe615 	stw	r2,-104(fp)
		int a, b, c, d, e, f, g, h;
		IOWR_ALTERA_AVALON_PIO_DATA(HEX0_BASE,zero);
 8000718:	0007883a 	mov	r3,zero
 800071c:	e0bff017 	ldw	r2,-64(fp)
 8000720:	18800035 	stwio	r2,0(r3)
		IOWR_ALTERA_AVALON_PIO_DATA(HEX1_BASE,zero);
 8000724:	00c00404 	movi	r3,16
 8000728:	e0bff017 	ldw	r2,-64(fp)
 800072c:	18800035 	stwio	r2,0(r3)
		IOWR_ALTERA_AVALON_PIO_DATA(HEX2_BASE,zero);
 8000730:	00c00804 	movi	r3,32
 8000734:	e0bff017 	ldw	r2,-64(fp)
 8000738:	18800035 	stwio	r2,0(r3)
		IOWR_ALTERA_AVALON_PIO_DATA(HEX3_BASE,zero);
 800073c:	00c00c04 	movi	r3,48
 8000740:	e0bff017 	ldw	r2,-64(fp)
 8000744:	18800035 	stwio	r2,0(r3)
		IOWR_ALTERA_AVALON_PIO_DATA(HEX4_BASE,zero);
 8000748:	00c01004 	movi	r3,64
 800074c:	e0bff017 	ldw	r2,-64(fp)
 8000750:	18800035 	stwio	r2,0(r3)
		IOWR_ALTERA_AVALON_PIO_DATA(HEX5_BASE,zero);
 8000754:	00c01404 	movi	r3,80
 8000758:	e0bff017 	ldw	r2,-64(fp)
 800075c:	18800035 	stwio	r2,0(r3)
		IOWR_ALTERA_AVALON_PIO_DATA(HEX6_BASE,zero);
 8000760:	00c01804 	movi	r3,96
 8000764:	e0bff017 	ldw	r2,-64(fp)
 8000768:	18800035 	stwio	r2,0(r3)
		IOWR_ALTERA_AVALON_PIO_DATA(HEX7_BASE,zero);
 800076c:	00c01c04 	movi	r3,112
 8000770:	e0bff017 	ldw	r2,-64(fp)
 8000774:	18800035 	stwio	r2,0(r3)


		for (a = 0; a < 10; ++a) {
 8000778:	e03fe515 	stw	zero,-108(fp)
 800077c:	0000b906 	br	8000a64 <main+0x864>
			usleep(sleepTime);
 8000780:	e13fe617 	ldw	r4,-104(fp)
 8000784:	80040f40 	call	80040f4 <usleep>
			for (b = 1; b < 10; ++b) {
 8000788:	00800044 	movi	r2,1
 800078c:	e0bfe415 	stw	r2,-112(fp)
 8000790:	0000a206 	br	8000a1c <main+0x81c>
				usleep(sleepTime);
 8000794:	e13fe617 	ldw	r4,-104(fp)
 8000798:	80040f40 	call	80040f4 <usleep>
				for (c = 1; c < 10; ++c) {
 800079c:	00800044 	movi	r2,1
 80007a0:	e0bfe315 	stw	r2,-116(fp)
 80007a4:	00008b06 	br	80009d4 <main+0x7d4>
					usleep(sleepTime);
 80007a8:	e13fe617 	ldw	r4,-104(fp)
 80007ac:	80040f40 	call	80040f4 <usleep>
					for (d = 1; d < 10; ++d) {
 80007b0:	00800044 	movi	r2,1
 80007b4:	e0bfe215 	stw	r2,-120(fp)
 80007b8:	00007406 	br	800098c <main+0x78c>
						usleep(sleepTime);
 80007bc:	e13fe617 	ldw	r4,-104(fp)
 80007c0:	80040f40 	call	80040f4 <usleep>
						for (e = 1; e < 10; ++e) {
 80007c4:	00800044 	movi	r2,1
 80007c8:	e0bfe115 	stw	r2,-124(fp)
 80007cc:	00005d06 	br	8000944 <main+0x744>
							usleep(sleepTime);
 80007d0:	e13fe617 	ldw	r4,-104(fp)
 80007d4:	80040f40 	call	80040f4 <usleep>
							for(f = 1; f < 10; ++f) {
 80007d8:	00800044 	movi	r2,1
 80007dc:	e0bfe015 	stw	r2,-128(fp)
 80007e0:	00004606 	br	80008fc <main+0x6fc>
								usleep(sleepTime);
 80007e4:	e13fe617 	ldw	r4,-104(fp)
 80007e8:	80040f40 	call	80040f4 <usleep>
								for(g = 1; g < 10; ++g) {
 80007ec:	00800044 	movi	r2,1
 80007f0:	e0bfdf15 	stw	r2,-132(fp)
 80007f4:	00002f06 	br	80008b4 <main+0x6b4>
									usleep(sleepTime);
 80007f8:	e13fe617 	ldw	r4,-104(fp)
 80007fc:	80040f40 	call	80040f4 <usleep>
									for(h = 1; h < 10; ++h) {
 8000800:	00800044 	movi	r2,1
 8000804:	e0bfde15 	stw	r2,-136(fp)
 8000808:	00001806 	br	800086c <main+0x66c>
										usleep(sleepTime);
 800080c:	e13fe617 	ldw	r4,-104(fp)
 8000810:	80040f40 	call	80040f4 <usleep>
										//check to make sure a different  button has been pushed, if so exit the nested loop structure
										keys = keys=IORD_ALTERA_AVALON_PIO_DATA(KEYS_BASE);
 8000814:	00840034 	movhi	r2,4096
 8000818:	10840404 	addi	r2,r2,4112
 800081c:	10800037 	ldwio	r2,0(r2)
 8000820:	e0bff215 	stw	r2,-56(fp)
										if (keys != 7 && keys != 6) {
 8000824:	e0bff217 	ldw	r2,-56(fp)
 8000828:	108001e0 	cmpeqi	r2,r2,7
 800082c:	1000031e 	bne	r2,zero,800083c <main+0x63c>
 8000830:	e0bff217 	ldw	r2,-56(fp)
 8000834:	10800198 	cmpnei	r2,r2,6
 8000838:	10008d1e 	bne	r2,zero,8000a70 <main+0x870>
											goto EXIT;
										}
										IOWR_ALTERA_AVALON_PIO_DATA(HEX0_BASE,decimalArr[h]);
 800083c:	e0bfde17 	ldw	r2,-136(fp)
 8000840:	1085883a 	add	r2,r2,r2
 8000844:	1085883a 	add	r2,r2,r2
 8000848:	e0ffde04 	addi	r3,fp,-136
 800084c:	10c5883a 	add	r2,r2,r3
 8000850:	10801804 	addi	r2,r2,96
 8000854:	10c00017 	ldw	r3,0(r2)
 8000858:	0005883a 	mov	r2,zero
 800085c:	10c00035 	stwio	r3,0(r2)
							usleep(sleepTime);
							for(f = 1; f < 10; ++f) {
								usleep(sleepTime);
								for(g = 1; g < 10; ++g) {
									usleep(sleepTime);
									for(h = 1; h < 10; ++h) {
 8000860:	e0bfde17 	ldw	r2,-136(fp)
 8000864:	10800044 	addi	r2,r2,1
 8000868:	e0bfde15 	stw	r2,-136(fp)
 800086c:	e0bfde17 	ldw	r2,-136(fp)
 8000870:	10800290 	cmplti	r2,r2,10
 8000874:	103fe51e 	bne	r2,zero,800080c <main+0x60c>
										}
										IOWR_ALTERA_AVALON_PIO_DATA(HEX0_BASE,decimalArr[h]);
									}
									//after each inner for loop has run through 9, that particular display needs to be set
									//back to zero
									IOWR_ALTERA_AVALON_PIO_DATA(HEX0_BASE,zero);
 8000878:	0007883a 	mov	r3,zero
 800087c:	e0bff017 	ldw	r2,-64(fp)
 8000880:	18800035 	stwio	r2,0(r3)
									IOWR_ALTERA_AVALON_PIO_DATA(HEX1_BASE,decimalArr[g]);
 8000884:	e0bfdf17 	ldw	r2,-132(fp)
 8000888:	1085883a 	add	r2,r2,r2
 800088c:	1085883a 	add	r2,r2,r2
 8000890:	e0ffde04 	addi	r3,fp,-136
 8000894:	10c5883a 	add	r2,r2,r3
 8000898:	10801804 	addi	r2,r2,96
 800089c:	10c00017 	ldw	r3,0(r2)
 80008a0:	00800404 	movi	r2,16
 80008a4:	10c00035 	stwio	r3,0(r2)
						usleep(sleepTime);
						for (e = 1; e < 10; ++e) {
							usleep(sleepTime);
							for(f = 1; f < 10; ++f) {
								usleep(sleepTime);
								for(g = 1; g < 10; ++g) {
 80008a8:	e0bfdf17 	ldw	r2,-132(fp)
 80008ac:	10800044 	addi	r2,r2,1
 80008b0:	e0bfdf15 	stw	r2,-132(fp)
 80008b4:	e0bfdf17 	ldw	r2,-132(fp)
 80008b8:	10800290 	cmplti	r2,r2,10
 80008bc:	103fce1e 	bne	r2,zero,80007f8 <main+0x5f8>
									//after each inner for loop has run through 9, that particular display needs to be set
									//back to zero
									IOWR_ALTERA_AVALON_PIO_DATA(HEX0_BASE,zero);
									IOWR_ALTERA_AVALON_PIO_DATA(HEX1_BASE,decimalArr[g]);
								}
								IOWR_ALTERA_AVALON_PIO_DATA(HEX1_BASE,zero);
 80008c0:	00c00404 	movi	r3,16
 80008c4:	e0bff017 	ldw	r2,-64(fp)
 80008c8:	18800035 	stwio	r2,0(r3)
								IOWR_ALTERA_AVALON_PIO_DATA(HEX2_BASE,decimalArr[f]);
 80008cc:	e0bfe017 	ldw	r2,-128(fp)
 80008d0:	1085883a 	add	r2,r2,r2
 80008d4:	1085883a 	add	r2,r2,r2
 80008d8:	e0ffde04 	addi	r3,fp,-136
 80008dc:	10c5883a 	add	r2,r2,r3
 80008e0:	10801804 	addi	r2,r2,96
 80008e4:	10c00017 	ldw	r3,0(r2)
 80008e8:	00800804 	movi	r2,32
 80008ec:	10c00035 	stwio	r3,0(r2)
					usleep(sleepTime);
					for (d = 1; d < 10; ++d) {
						usleep(sleepTime);
						for (e = 1; e < 10; ++e) {
							usleep(sleepTime);
							for(f = 1; f < 10; ++f) {
 80008f0:	e0bfe017 	ldw	r2,-128(fp)
 80008f4:	10800044 	addi	r2,r2,1
 80008f8:	e0bfe015 	stw	r2,-128(fp)
 80008fc:	e0bfe017 	ldw	r2,-128(fp)
 8000900:	10800290 	cmplti	r2,r2,10
 8000904:	103fb71e 	bne	r2,zero,80007e4 <main+0x5e4>
									IOWR_ALTERA_AVALON_PIO_DATA(HEX1_BASE,decimalArr[g]);
								}
								IOWR_ALTERA_AVALON_PIO_DATA(HEX1_BASE,zero);
								IOWR_ALTERA_AVALON_PIO_DATA(HEX2_BASE,decimalArr[f]);
							}
							IOWR_ALTERA_AVALON_PIO_DATA(HEX2_BASE,zero);
 8000908:	00c00804 	movi	r3,32
 800090c:	e0bff017 	ldw	r2,-64(fp)
 8000910:	18800035 	stwio	r2,0(r3)
							IOWR_ALTERA_AVALON_PIO_DATA(HEX3_BASE,decimalArr[e]);
 8000914:	e0bfe117 	ldw	r2,-124(fp)
 8000918:	1085883a 	add	r2,r2,r2
 800091c:	1085883a 	add	r2,r2,r2
 8000920:	e0ffde04 	addi	r3,fp,-136
 8000924:	10c5883a 	add	r2,r2,r3
 8000928:	10801804 	addi	r2,r2,96
 800092c:	10c00017 	ldw	r3,0(r2)
 8000930:	00800c04 	movi	r2,48
 8000934:	10c00035 	stwio	r3,0(r2)
				usleep(sleepTime);
				for (c = 1; c < 10; ++c) {
					usleep(sleepTime);
					for (d = 1; d < 10; ++d) {
						usleep(sleepTime);
						for (e = 1; e < 10; ++e) {
 8000938:	e0bfe117 	ldw	r2,-124(fp)
 800093c:	10800044 	addi	r2,r2,1
 8000940:	e0bfe115 	stw	r2,-124(fp)
 8000944:	e0bfe117 	ldw	r2,-124(fp)
 8000948:	10800290 	cmplti	r2,r2,10
 800094c:	103fa01e 	bne	r2,zero,80007d0 <main+0x5d0>
								IOWR_ALTERA_AVALON_PIO_DATA(HEX2_BASE,decimalArr[f]);
							}
							IOWR_ALTERA_AVALON_PIO_DATA(HEX2_BASE,zero);
							IOWR_ALTERA_AVALON_PIO_DATA(HEX3_BASE,decimalArr[e]);
						}
						IOWR_ALTERA_AVALON_PIO_DATA(HEX3_BASE,zero);
 8000950:	00c00c04 	movi	r3,48
 8000954:	e0bff017 	ldw	r2,-64(fp)
 8000958:	18800035 	stwio	r2,0(r3)
						IOWR_ALTERA_AVALON_PIO_DATA(HEX4_BASE,decimalArr[d]);
 800095c:	e0bfe217 	ldw	r2,-120(fp)
 8000960:	1085883a 	add	r2,r2,r2
 8000964:	1085883a 	add	r2,r2,r2
 8000968:	e0ffde04 	addi	r3,fp,-136
 800096c:	10c5883a 	add	r2,r2,r3
 8000970:	10801804 	addi	r2,r2,96
 8000974:	10c00017 	ldw	r3,0(r2)
 8000978:	00801004 	movi	r2,64
 800097c:	10c00035 	stwio	r3,0(r2)
			usleep(sleepTime);
			for (b = 1; b < 10; ++b) {
				usleep(sleepTime);
				for (c = 1; c < 10; ++c) {
					usleep(sleepTime);
					for (d = 1; d < 10; ++d) {
 8000980:	e0bfe217 	ldw	r2,-120(fp)
 8000984:	10800044 	addi	r2,r2,1
 8000988:	e0bfe215 	stw	r2,-120(fp)
 800098c:	e0bfe217 	ldw	r2,-120(fp)
 8000990:	10800290 	cmplti	r2,r2,10
 8000994:	103f891e 	bne	r2,zero,80007bc <main+0x5bc>
							IOWR_ALTERA_AVALON_PIO_DATA(HEX3_BASE,decimalArr[e]);
						}
						IOWR_ALTERA_AVALON_PIO_DATA(HEX3_BASE,zero);
						IOWR_ALTERA_AVALON_PIO_DATA(HEX4_BASE,decimalArr[d]);
					}
					IOWR_ALTERA_AVALON_PIO_DATA(HEX4_BASE,zero);
 8000998:	00c01004 	movi	r3,64
 800099c:	e0bff017 	ldw	r2,-64(fp)
 80009a0:	18800035 	stwio	r2,0(r3)
					IOWR_ALTERA_AVALON_PIO_DATA(HEX5_BASE,decimalArr[c]);
 80009a4:	e0bfe317 	ldw	r2,-116(fp)
 80009a8:	1085883a 	add	r2,r2,r2
 80009ac:	1085883a 	add	r2,r2,r2
 80009b0:	e0ffde04 	addi	r3,fp,-136
 80009b4:	10c5883a 	add	r2,r2,r3
 80009b8:	10801804 	addi	r2,r2,96
 80009bc:	10c00017 	ldw	r3,0(r2)
 80009c0:	00801404 	movi	r2,80
 80009c4:	10c00035 	stwio	r3,0(r2)

		for (a = 0; a < 10; ++a) {
			usleep(sleepTime);
			for (b = 1; b < 10; ++b) {
				usleep(sleepTime);
				for (c = 1; c < 10; ++c) {
 80009c8:	e0bfe317 	ldw	r2,-116(fp)
 80009cc:	10800044 	addi	r2,r2,1
 80009d0:	e0bfe315 	stw	r2,-116(fp)
 80009d4:	e0bfe317 	ldw	r2,-116(fp)
 80009d8:	10800290 	cmplti	r2,r2,10
 80009dc:	103f721e 	bne	r2,zero,80007a8 <main+0x5a8>
						IOWR_ALTERA_AVALON_PIO_DATA(HEX4_BASE,decimalArr[d]);
					}
					IOWR_ALTERA_AVALON_PIO_DATA(HEX4_BASE,zero);
					IOWR_ALTERA_AVALON_PIO_DATA(HEX5_BASE,decimalArr[c]);
				}
				IOWR_ALTERA_AVALON_PIO_DATA(HEX5_BASE,zero);
 80009e0:	00c01404 	movi	r3,80
 80009e4:	e0bff017 	ldw	r2,-64(fp)
 80009e8:	18800035 	stwio	r2,0(r3)
				IOWR_ALTERA_AVALON_PIO_DATA(HEX6_BASE,decimalArr[b]);
 80009ec:	e0bfe417 	ldw	r2,-112(fp)
 80009f0:	1085883a 	add	r2,r2,r2
 80009f4:	1085883a 	add	r2,r2,r2
 80009f8:	e0ffde04 	addi	r3,fp,-136
 80009fc:	10c5883a 	add	r2,r2,r3
 8000a00:	10801804 	addi	r2,r2,96
 8000a04:	10c00017 	ldw	r3,0(r2)
 8000a08:	00801804 	movi	r2,96
 8000a0c:	10c00035 	stwio	r3,0(r2)
		IOWR_ALTERA_AVALON_PIO_DATA(HEX7_BASE,zero);


		for (a = 0; a < 10; ++a) {
			usleep(sleepTime);
			for (b = 1; b < 10; ++b) {
 8000a10:	e0bfe417 	ldw	r2,-112(fp)
 8000a14:	10800044 	addi	r2,r2,1
 8000a18:	e0bfe415 	stw	r2,-112(fp)
 8000a1c:	e0bfe417 	ldw	r2,-112(fp)
 8000a20:	10800290 	cmplti	r2,r2,10
 8000a24:	103f5b1e 	bne	r2,zero,8000794 <main+0x594>
					IOWR_ALTERA_AVALON_PIO_DATA(HEX5_BASE,decimalArr[c]);
				}
				IOWR_ALTERA_AVALON_PIO_DATA(HEX5_BASE,zero);
				IOWR_ALTERA_AVALON_PIO_DATA(HEX6_BASE,decimalArr[b]);
			}
			IOWR_ALTERA_AVALON_PIO_DATA(HEX6_BASE,zero);
 8000a28:	00c01804 	movi	r3,96
 8000a2c:	e0bff017 	ldw	r2,-64(fp)
 8000a30:	18800035 	stwio	r2,0(r3)
			IOWR_ALTERA_AVALON_PIO_DATA(HEX7_BASE,decimalArr[a]);
 8000a34:	e0bfe517 	ldw	r2,-108(fp)
 8000a38:	1085883a 	add	r2,r2,r2
 8000a3c:	1085883a 	add	r2,r2,r2
 8000a40:	e0ffde04 	addi	r3,fp,-136
 8000a44:	10c5883a 	add	r2,r2,r3
 8000a48:	10801804 	addi	r2,r2,96
 8000a4c:	10c00017 	ldw	r3,0(r2)
 8000a50:	00801c04 	movi	r2,112
 8000a54:	10c00035 	stwio	r3,0(r2)
		IOWR_ALTERA_AVALON_PIO_DATA(HEX5_BASE,zero);
		IOWR_ALTERA_AVALON_PIO_DATA(HEX6_BASE,zero);
		IOWR_ALTERA_AVALON_PIO_DATA(HEX7_BASE,zero);


		for (a = 0; a < 10; ++a) {
 8000a58:	e0bfe517 	ldw	r2,-108(fp)
 8000a5c:	10800044 	addi	r2,r2,1
 8000a60:	e0bfe515 	stw	r2,-108(fp)
 8000a64:	e0bfe517 	ldw	r2,-108(fp)
 8000a68:	10800290 	cmplti	r2,r2,10
 8000a6c:	103f441e 	bne	r2,zero,8000780 <main+0x580>




	// switch direction if necessary
	if ((current_direction==0) && (current_value==(1 << 25)))
 8000a70:	e0bff303 	ldbu	r2,-52(fp)
 8000a74:	1004c03a 	cmpne	r2,r2,zero
 8000a78:	1000061e 	bne	r2,zero,8000a94 <main+0x894>
 8000a7c:	e0fff517 	ldw	r3,-44(fp)
 8000a80:	00808034 	movhi	r2,512
 8000a84:	1880031e 	bne	r3,r2,8000a94 <main+0x894>
		current_direction=1;
 8000a88:	00800044 	movi	r2,1
 8000a8c:	e0bff305 	stb	r2,-52(fp)




	// switch direction if necessary
	if ((current_direction==0) && (current_value==(1 << 25)))
 8000a90:	00001206 	br	8000adc <main+0x8dc>
		current_direction=1;
	else if ((current_direction==1) && (current_value==1))
 8000a94:	e0bff303 	ldbu	r2,-52(fp)
 8000a98:	10800058 	cmpnei	r2,r2,1
 8000a9c:	1000051e 	bne	r2,zero,8000ab4 <main+0x8b4>
 8000aa0:	e0bff517 	ldw	r2,-44(fp)
 8000aa4:	10800058 	cmpnei	r2,r2,1
 8000aa8:	1000021e 	bne	r2,zero,8000ab4 <main+0x8b4>
		current_direction=0;
 8000aac:	e03ff305 	stb	zero,-52(fp)


	// switch direction if necessary
	if ((current_direction==0) && (current_value==(1 << 25)))
		current_direction=1;
	else if ((current_direction==1) && (current_value==1))
 8000ab0:	00000a06 	br	8000adc <main+0x8dc>
		current_direction=0;
	// move light
	else if (current_direction==0)
 8000ab4:	e0bff303 	ldbu	r2,-52(fp)
 8000ab8:	1004c03a 	cmpne	r2,r2,zero
 8000abc:	1000041e 	bne	r2,zero,8000ad0 <main+0x8d0>
		current_value = current_value << 1;
 8000ac0:	e0bff517 	ldw	r2,-44(fp)
 8000ac4:	1085883a 	add	r2,r2,r2
 8000ac8:	e0bff515 	stw	r2,-44(fp)
 8000acc:	00000306 	br	8000adc <main+0x8dc>
	else
		current_value = current_value >> 1;
 8000ad0:	e0bff517 	ldw	r2,-44(fp)
 8000ad4:	1004d07a 	srli	r2,r2,1
 8000ad8:	e0bff515 	stw	r2,-44(fp)
	// update lights
	IOWR_ALTERA_AVALON_PIO_DATA(LEDS_BASE,current_value);
 8000adc:	e0fff517 	ldw	r3,-44(fp)
 8000ae0:	00840034 	movhi	r2,4096
 8000ae4:	10840004 	addi	r2,r2,4096
 8000ae8:	10c00035 	stwio	r3,0(r2)
	// wait

	if (current_state==3) {
 8000aec:	e0bff417 	ldw	r2,-48(fp)
 8000af0:	108000d8 	cmpnei	r2,r2,3
 8000af4:	1000041e 	bne	r2,zero,8000b08 <main+0x908>
		usleep(250000);
 8000af8:	01000134 	movhi	r4,4
 8000afc:	21342404 	addi	r4,r4,-12144
 8000b00:	80040f40 	call	80040f4 <usleep>
 8000b04:	003dd406 	br	8000258 <main+0x58>
	}
	else if (current_state==5) {
 8000b08:	e0bff417 	ldw	r2,-48(fp)
 8000b0c:	10800158 	cmpnei	r2,r2,5
 8000b10:	1000041e 	bne	r2,zero,8000b24 <main+0x924>
		usleep(125000);
 8000b14:	010000b4 	movhi	r4,2
 8000b18:	213a1204 	addi	r4,r4,-6072
 8000b1c:	80040f40 	call	80040f4 <usleep>
 8000b20:	003dcd06 	br	8000258 <main+0x58>
	}
	else {
		usleep (50000);}
 8000b24:	0130d414 	movui	r4,50000
 8000b28:	80040f40 	call	80040f4 <usleep>
	}
 8000b2c:	003dca06 	br	8000258 <main+0x58>

08000b30 <udivmodsi4>:
 8000b30:	29001b2e 	bgeu	r5,r4,8000ba0 <udivmodsi4+0x70>
 8000b34:	28001a16 	blt	r5,zero,8000ba0 <udivmodsi4+0x70>
 8000b38:	00800044 	movi	r2,1
 8000b3c:	0007883a 	mov	r3,zero
 8000b40:	01c007c4 	movi	r7,31
 8000b44:	00000306 	br	8000b54 <udivmodsi4+0x24>
 8000b48:	19c01326 	beq	r3,r7,8000b98 <udivmodsi4+0x68>
 8000b4c:	18c00044 	addi	r3,r3,1
 8000b50:	28000416 	blt	r5,zero,8000b64 <udivmodsi4+0x34>
 8000b54:	294b883a 	add	r5,r5,r5
 8000b58:	1085883a 	add	r2,r2,r2
 8000b5c:	293ffa36 	bltu	r5,r4,8000b48 <udivmodsi4+0x18>
 8000b60:	10000d26 	beq	r2,zero,8000b98 <udivmodsi4+0x68>
 8000b64:	0007883a 	mov	r3,zero
 8000b68:	21400236 	bltu	r4,r5,8000b74 <udivmodsi4+0x44>
 8000b6c:	2149c83a 	sub	r4,r4,r5
 8000b70:	1886b03a 	or	r3,r3,r2
 8000b74:	1004d07a 	srli	r2,r2,1
 8000b78:	280ad07a 	srli	r5,r5,1
 8000b7c:	103ffa1e 	bne	r2,zero,8000b68 <udivmodsi4+0x38>
 8000b80:	30000226 	beq	r6,zero,8000b8c <udivmodsi4+0x5c>
 8000b84:	2005883a 	mov	r2,r4
 8000b88:	f800283a 	ret
 8000b8c:	1809883a 	mov	r4,r3
 8000b90:	2005883a 	mov	r2,r4
 8000b94:	f800283a 	ret
 8000b98:	0007883a 	mov	r3,zero
 8000b9c:	003ff806 	br	8000b80 <udivmodsi4+0x50>
 8000ba0:	00800044 	movi	r2,1
 8000ba4:	0007883a 	mov	r3,zero
 8000ba8:	003fef06 	br	8000b68 <udivmodsi4+0x38>

08000bac <__divsi3>:
 8000bac:	defffe04 	addi	sp,sp,-8
 8000bb0:	dc000015 	stw	r16,0(sp)
 8000bb4:	dfc00115 	stw	ra,4(sp)
 8000bb8:	0021883a 	mov	r16,zero
 8000bbc:	20000c16 	blt	r4,zero,8000bf0 <__divsi3+0x44>
 8000bc0:	000d883a 	mov	r6,zero
 8000bc4:	28000e16 	blt	r5,zero,8000c00 <__divsi3+0x54>
 8000bc8:	8000b300 	call	8000b30 <udivmodsi4>
 8000bcc:	1007883a 	mov	r3,r2
 8000bd0:	8005003a 	cmpeq	r2,r16,zero
 8000bd4:	1000011e 	bne	r2,zero,8000bdc <__divsi3+0x30>
 8000bd8:	00c7c83a 	sub	r3,zero,r3
 8000bdc:	1805883a 	mov	r2,r3
 8000be0:	dfc00117 	ldw	ra,4(sp)
 8000be4:	dc000017 	ldw	r16,0(sp)
 8000be8:	dec00204 	addi	sp,sp,8
 8000bec:	f800283a 	ret
 8000bf0:	0109c83a 	sub	r4,zero,r4
 8000bf4:	04000044 	movi	r16,1
 8000bf8:	000d883a 	mov	r6,zero
 8000bfc:	283ff20e 	bge	r5,zero,8000bc8 <__divsi3+0x1c>
 8000c00:	014bc83a 	sub	r5,zero,r5
 8000c04:	8021003a 	cmpeq	r16,r16,zero
 8000c08:	003fef06 	br	8000bc8 <__divsi3+0x1c>

08000c0c <__modsi3>:
 8000c0c:	deffff04 	addi	sp,sp,-4
 8000c10:	dfc00015 	stw	ra,0(sp)
 8000c14:	01800044 	movi	r6,1
 8000c18:	2807883a 	mov	r3,r5
 8000c1c:	20000416 	blt	r4,zero,8000c30 <__modsi3+0x24>
 8000c20:	28000c16 	blt	r5,zero,8000c54 <__modsi3+0x48>
 8000c24:	dfc00017 	ldw	ra,0(sp)
 8000c28:	dec00104 	addi	sp,sp,4
 8000c2c:	8000b301 	jmpi	8000b30 <udivmodsi4>
 8000c30:	0109c83a 	sub	r4,zero,r4
 8000c34:	28000b16 	blt	r5,zero,8000c64 <__modsi3+0x58>
 8000c38:	180b883a 	mov	r5,r3
 8000c3c:	01800044 	movi	r6,1
 8000c40:	8000b300 	call	8000b30 <udivmodsi4>
 8000c44:	0085c83a 	sub	r2,zero,r2
 8000c48:	dfc00017 	ldw	ra,0(sp)
 8000c4c:	dec00104 	addi	sp,sp,4
 8000c50:	f800283a 	ret
 8000c54:	014bc83a 	sub	r5,zero,r5
 8000c58:	dfc00017 	ldw	ra,0(sp)
 8000c5c:	dec00104 	addi	sp,sp,4
 8000c60:	8000b301 	jmpi	8000b30 <udivmodsi4>
 8000c64:	0147c83a 	sub	r3,zero,r5
 8000c68:	003ff306 	br	8000c38 <__modsi3+0x2c>

08000c6c <__udivsi3>:
 8000c6c:	000d883a 	mov	r6,zero
 8000c70:	8000b301 	jmpi	8000b30 <udivmodsi4>

08000c74 <__umodsi3>:
 8000c74:	01800044 	movi	r6,1
 8000c78:	8000b301 	jmpi	8000b30 <udivmodsi4>

08000c7c <_fwrite_r>:
 8000c7c:	defff604 	addi	sp,sp,-40
 8000c80:	dc400615 	stw	r17,24(sp)
 8000c84:	39a3383a 	mul	r17,r7,r6
 8000c88:	00800044 	movi	r2,1
 8000c8c:	dcc00815 	stw	r19,32(sp)
 8000c90:	dc800715 	stw	r18,28(sp)
 8000c94:	dc000515 	stw	r16,20(sp)
 8000c98:	dfc00915 	stw	ra,36(sp)
 8000c9c:	3825883a 	mov	r18,r7
 8000ca0:	3027883a 	mov	r19,r6
 8000ca4:	2021883a 	mov	r16,r4
 8000ca8:	d9400015 	stw	r5,0(sp)
 8000cac:	d8800315 	stw	r2,12(sp)
 8000cb0:	dc400115 	stw	r17,4(sp)
 8000cb4:	dc400415 	stw	r17,16(sp)
 8000cb8:	dec00215 	stw	sp,8(sp)
 8000cbc:	20000226 	beq	r4,zero,8000cc8 <_fwrite_r+0x4c>
 8000cc0:	20800e17 	ldw	r2,56(r4)
 8000cc4:	10001226 	beq	r2,zero,8000d10 <_fwrite_r+0x94>
 8000cc8:	d9400a17 	ldw	r5,40(sp)
 8000ccc:	8009883a 	mov	r4,r16
 8000cd0:	d9800204 	addi	r6,sp,8
 8000cd4:	80011d40 	call	80011d4 <__sfvwrite_r>
 8000cd8:	980b883a 	mov	r5,r19
 8000cdc:	10000426 	beq	r2,zero,8000cf0 <_fwrite_r+0x74>
 8000ce0:	d9000417 	ldw	r4,16(sp)
 8000ce4:	8909c83a 	sub	r4,r17,r4
 8000ce8:	8000c6c0 	call	8000c6c <__udivsi3>
 8000cec:	1025883a 	mov	r18,r2
 8000cf0:	9005883a 	mov	r2,r18
 8000cf4:	dfc00917 	ldw	ra,36(sp)
 8000cf8:	dcc00817 	ldw	r19,32(sp)
 8000cfc:	dc800717 	ldw	r18,28(sp)
 8000d00:	dc400617 	ldw	r17,24(sp)
 8000d04:	dc000517 	ldw	r16,20(sp)
 8000d08:	dec00a04 	addi	sp,sp,40
 8000d0c:	f800283a 	ret
 8000d10:	8000f7c0 	call	8000f7c <__sinit>
 8000d14:	003fec06 	br	8000cc8 <_fwrite_r+0x4c>

08000d18 <fwrite>:
 8000d18:	00820074 	movhi	r2,2049
 8000d1c:	10a41704 	addi	r2,r2,-28580
 8000d20:	2017883a 	mov	r11,r4
 8000d24:	11000017 	ldw	r4,0(r2)
 8000d28:	defffe04 	addi	sp,sp,-8
 8000d2c:	3013883a 	mov	r9,r6
 8000d30:	2805883a 	mov	r2,r5
 8000d34:	d9c00015 	stw	r7,0(sp)
 8000d38:	580b883a 	mov	r5,r11
 8000d3c:	100d883a 	mov	r6,r2
 8000d40:	480f883a 	mov	r7,r9
 8000d44:	dfc00115 	stw	ra,4(sp)
 8000d48:	8000c7c0 	call	8000c7c <_fwrite_r>
 8000d4c:	dfc00117 	ldw	ra,4(sp)
 8000d50:	dec00204 	addi	sp,sp,8
 8000d54:	f800283a 	ret

08000d58 <_puts_r>:
 8000d58:	defff604 	addi	sp,sp,-40
 8000d5c:	dc400715 	stw	r17,28(sp)
 8000d60:	2023883a 	mov	r17,r4
 8000d64:	2809883a 	mov	r4,r5
 8000d68:	dfc00915 	stw	ra,36(sp)
 8000d6c:	dcc00815 	stw	r19,32(sp)
 8000d70:	2827883a 	mov	r19,r5
 8000d74:	8000ea00 	call	8000ea0 <strlen>
 8000d78:	89400217 	ldw	r5,8(r17)
 8000d7c:	00c20034 	movhi	r3,2048
 8000d80:	18dc9604 	addi	r3,r3,29272
 8000d84:	01c00044 	movi	r7,1
 8000d88:	12000044 	addi	r8,r2,1
 8000d8c:	d8c00515 	stw	r3,20(sp)
 8000d90:	d9c00615 	stw	r7,24(sp)
 8000d94:	d8c00304 	addi	r3,sp,12
 8000d98:	01c00084 	movi	r7,2
 8000d9c:	8809883a 	mov	r4,r17
 8000da0:	d80d883a 	mov	r6,sp
 8000da4:	d8c00015 	stw	r3,0(sp)
 8000da8:	dcc00315 	stw	r19,12(sp)
 8000dac:	da000215 	stw	r8,8(sp)
 8000db0:	d9c00115 	stw	r7,4(sp)
 8000db4:	d8800415 	stw	r2,16(sp)
 8000db8:	80011d40 	call	80011d4 <__sfvwrite_r>
 8000dbc:	00ffffc4 	movi	r3,-1
 8000dc0:	10000626 	beq	r2,zero,8000ddc <_puts_r+0x84>
 8000dc4:	1805883a 	mov	r2,r3
 8000dc8:	dfc00917 	ldw	ra,36(sp)
 8000dcc:	dcc00817 	ldw	r19,32(sp)
 8000dd0:	dc400717 	ldw	r17,28(sp)
 8000dd4:	dec00a04 	addi	sp,sp,40
 8000dd8:	f800283a 	ret
 8000ddc:	00c00284 	movi	r3,10
 8000de0:	1805883a 	mov	r2,r3
 8000de4:	dfc00917 	ldw	ra,36(sp)
 8000de8:	dcc00817 	ldw	r19,32(sp)
 8000dec:	dc400717 	ldw	r17,28(sp)
 8000df0:	dec00a04 	addi	sp,sp,40
 8000df4:	f800283a 	ret

08000df8 <puts>:
 8000df8:	00820074 	movhi	r2,2049
 8000dfc:	10a41704 	addi	r2,r2,-28580
 8000e00:	200b883a 	mov	r5,r4
 8000e04:	11000017 	ldw	r4,0(r2)
 8000e08:	8000d581 	jmpi	8000d58 <_puts_r>

08000e0c <srand>:
 8000e0c:	00820074 	movhi	r2,2049
 8000e10:	10a41704 	addi	r2,r2,-28580
 8000e14:	11400017 	ldw	r5,0(r2)
 8000e18:	0007883a 	mov	r3,zero
 8000e1c:	28c02a15 	stw	r3,168(r5)
 8000e20:	29002915 	stw	r4,164(r5)
 8000e24:	f800283a 	ret

08000e28 <rand>:
 8000e28:	defffe04 	addi	sp,sp,-8
 8000e2c:	00820074 	movhi	r2,2049
 8000e30:	10a41704 	addi	r2,r2,-28580
 8000e34:	dc000015 	stw	r16,0(sp)
 8000e38:	14000017 	ldw	r16,0(r2)
 8000e3c:	dfc00115 	stw	ra,4(sp)
 8000e40:	00932574 	movhi	r2,19605
 8000e44:	109fcb44 	addi	r2,r2,32557
 8000e48:	82002917 	ldw	r8,164(r16)
 8000e4c:	82402a17 	ldw	r9,168(r16)
 8000e50:	00d614b4 	movhi	r3,22610
 8000e54:	18fd0b44 	addi	r3,r3,-3027
 8000e58:	4009883a 	mov	r4,r8
 8000e5c:	180f883a 	mov	r7,r3
 8000e60:	100d883a 	mov	r6,r2
 8000e64:	480b883a 	mov	r5,r9
 8000e68:	80036fc0 	call	80036fc <__muldi3>
 8000e6c:	02000044 	movi	r8,1
 8000e70:	1209883a 	add	r4,r2,r8
 8000e74:	2095803a 	cmpltu	r10,r4,r2
 8000e78:	50d5883a 	add	r10,r10,r3
 8000e7c:	81002915 	stw	r4,164(r16)
 8000e80:	01200034 	movhi	r4,32768
 8000e84:	213fffc4 	addi	r4,r4,-1
 8000e88:	2284703a 	and	r2,r4,r10
 8000e8c:	82802a15 	stw	r10,168(r16)
 8000e90:	dfc00117 	ldw	ra,4(sp)
 8000e94:	dc000017 	ldw	r16,0(sp)
 8000e98:	dec00204 	addi	sp,sp,8
 8000e9c:	f800283a 	ret

08000ea0 <strlen>:
 8000ea0:	208000cc 	andi	r2,r4,3
 8000ea4:	2011883a 	mov	r8,r4
 8000ea8:	1000161e 	bne	r2,zero,8000f04 <strlen+0x64>
 8000eac:	20c00017 	ldw	r3,0(r4)
 8000eb0:	017fbff4 	movhi	r5,65279
 8000eb4:	297fbfc4 	addi	r5,r5,-257
 8000eb8:	01e02074 	movhi	r7,32897
 8000ebc:	39e02004 	addi	r7,r7,-32640
 8000ec0:	1945883a 	add	r2,r3,r5
 8000ec4:	11c4703a 	and	r2,r2,r7
 8000ec8:	00c6303a 	nor	r3,zero,r3
 8000ecc:	1886703a 	and	r3,r3,r2
 8000ed0:	18000c1e 	bne	r3,zero,8000f04 <strlen+0x64>
 8000ed4:	280d883a 	mov	r6,r5
 8000ed8:	380b883a 	mov	r5,r7
 8000edc:	21000104 	addi	r4,r4,4
 8000ee0:	20800017 	ldw	r2,0(r4)
 8000ee4:	1187883a 	add	r3,r2,r6
 8000ee8:	1946703a 	and	r3,r3,r5
 8000eec:	0084303a 	nor	r2,zero,r2
 8000ef0:	10c4703a 	and	r2,r2,r3
 8000ef4:	103ff926 	beq	r2,zero,8000edc <strlen+0x3c>
 8000ef8:	20800007 	ldb	r2,0(r4)
 8000efc:	10000326 	beq	r2,zero,8000f0c <strlen+0x6c>
 8000f00:	21000044 	addi	r4,r4,1
 8000f04:	20800007 	ldb	r2,0(r4)
 8000f08:	103ffd1e 	bne	r2,zero,8000f00 <strlen+0x60>
 8000f0c:	2205c83a 	sub	r2,r4,r8
 8000f10:	f800283a 	ret

08000f14 <std>:
 8000f14:	00820034 	movhi	r2,2048
 8000f18:	108a2404 	addi	r2,r2,10384
 8000f1c:	20800b15 	stw	r2,44(r4)
 8000f20:	00820034 	movhi	r2,2048
 8000f24:	108a5f04 	addi	r2,r2,10620
 8000f28:	20800815 	stw	r2,32(r4)
 8000f2c:	00c20034 	movhi	r3,2048
 8000f30:	18ca4004 	addi	r3,r3,10496
 8000f34:	00820034 	movhi	r2,2048
 8000f38:	108a2604 	addi	r2,r2,10392
 8000f3c:	2140030d 	sth	r5,12(r4)
 8000f40:	2180038d 	sth	r6,14(r4)
 8000f44:	20c00915 	stw	r3,36(r4)
 8000f48:	20800a15 	stw	r2,40(r4)
 8000f4c:	20000015 	stw	zero,0(r4)
 8000f50:	20000115 	stw	zero,4(r4)
 8000f54:	20000215 	stw	zero,8(r4)
 8000f58:	20000415 	stw	zero,16(r4)
 8000f5c:	20000515 	stw	zero,20(r4)
 8000f60:	20000615 	stw	zero,24(r4)
 8000f64:	21000715 	stw	r4,28(r4)
 8000f68:	f800283a 	ret

08000f6c <__sfp_lock_acquire>:
 8000f6c:	f800283a 	ret

08000f70 <__sfp_lock_release>:
 8000f70:	f800283a 	ret

08000f74 <__sinit_lock_acquire>:
 8000f74:	f800283a 	ret

08000f78 <__sinit_lock_release>:
 8000f78:	f800283a 	ret

08000f7c <__sinit>:
 8000f7c:	20800e17 	ldw	r2,56(r4)
 8000f80:	defffd04 	addi	sp,sp,-12
 8000f84:	dc400115 	stw	r17,4(sp)
 8000f88:	dc000015 	stw	r16,0(sp)
 8000f8c:	dfc00215 	stw	ra,8(sp)
 8000f90:	04400044 	movi	r17,1
 8000f94:	01400104 	movi	r5,4
 8000f98:	000d883a 	mov	r6,zero
 8000f9c:	2021883a 	mov	r16,r4
 8000fa0:	2200bb04 	addi	r8,r4,748
 8000fa4:	200f883a 	mov	r7,r4
 8000fa8:	10000526 	beq	r2,zero,8000fc0 <__sinit+0x44>
 8000fac:	dfc00217 	ldw	ra,8(sp)
 8000fb0:	dc400117 	ldw	r17,4(sp)
 8000fb4:	dc000017 	ldw	r16,0(sp)
 8000fb8:	dec00304 	addi	sp,sp,12
 8000fbc:	f800283a 	ret
 8000fc0:	21000117 	ldw	r4,4(r4)
 8000fc4:	00820034 	movhi	r2,2048
 8000fc8:	10841804 	addi	r2,r2,4192
 8000fcc:	00c000c4 	movi	r3,3
 8000fd0:	80800f15 	stw	r2,60(r16)
 8000fd4:	80c0b915 	stw	r3,740(r16)
 8000fd8:	8200ba15 	stw	r8,744(r16)
 8000fdc:	84400e15 	stw	r17,56(r16)
 8000fe0:	8000b815 	stw	zero,736(r16)
 8000fe4:	8000f140 	call	8000f14 <std>
 8000fe8:	81000217 	ldw	r4,8(r16)
 8000fec:	880d883a 	mov	r6,r17
 8000ff0:	800f883a 	mov	r7,r16
 8000ff4:	01400284 	movi	r5,10
 8000ff8:	8000f140 	call	8000f14 <std>
 8000ffc:	81000317 	ldw	r4,12(r16)
 8001000:	800f883a 	mov	r7,r16
 8001004:	01400484 	movi	r5,18
 8001008:	01800084 	movi	r6,2
 800100c:	dfc00217 	ldw	ra,8(sp)
 8001010:	dc400117 	ldw	r17,4(sp)
 8001014:	dc000017 	ldw	r16,0(sp)
 8001018:	dec00304 	addi	sp,sp,12
 800101c:	8000f141 	jmpi	8000f14 <std>

08001020 <__fp_lock>:
 8001020:	0005883a 	mov	r2,zero
 8001024:	f800283a 	ret

08001028 <__fp_unlock>:
 8001028:	0005883a 	mov	r2,zero
 800102c:	f800283a 	ret

08001030 <__fp_unlock_all>:
 8001030:	00820074 	movhi	r2,2049
 8001034:	10a41704 	addi	r2,r2,-28580
 8001038:	11000017 	ldw	r4,0(r2)
 800103c:	01420034 	movhi	r5,2048
 8001040:	29440a04 	addi	r5,r5,4136
 8001044:	80017381 	jmpi	8001738 <_fwalk>

08001048 <__fp_lock_all>:
 8001048:	00820074 	movhi	r2,2049
 800104c:	10a41704 	addi	r2,r2,-28580
 8001050:	11000017 	ldw	r4,0(r2)
 8001054:	01420034 	movhi	r5,2048
 8001058:	29440804 	addi	r5,r5,4128
 800105c:	80017381 	jmpi	8001738 <_fwalk>

08001060 <_cleanup_r>:
 8001060:	01420034 	movhi	r5,2048
 8001064:	294b4404 	addi	r5,r5,11536
 8001068:	80017381 	jmpi	8001738 <_fwalk>

0800106c <_cleanup>:
 800106c:	00820074 	movhi	r2,2049
 8001070:	10a41804 	addi	r2,r2,-28576
 8001074:	11000017 	ldw	r4,0(r2)
 8001078:	80010601 	jmpi	8001060 <_cleanup_r>

0800107c <__sfmoreglue>:
 800107c:	defffc04 	addi	sp,sp,-16
 8001080:	dc400115 	stw	r17,4(sp)
 8001084:	2c401724 	muli	r17,r5,92
 8001088:	dc800215 	stw	r18,8(sp)
 800108c:	2825883a 	mov	r18,r5
 8001090:	89400304 	addi	r5,r17,12
 8001094:	dc000015 	stw	r16,0(sp)
 8001098:	dfc00315 	stw	ra,12(sp)
 800109c:	80017f00 	call	80017f0 <_malloc_r>
 80010a0:	0021883a 	mov	r16,zero
 80010a4:	880d883a 	mov	r6,r17
 80010a8:	000b883a 	mov	r5,zero
 80010ac:	10000626 	beq	r2,zero,80010c8 <__sfmoreglue+0x4c>
 80010b0:	11000304 	addi	r4,r2,12
 80010b4:	14800115 	stw	r18,4(r2)
 80010b8:	10000015 	stw	zero,0(r2)
 80010bc:	11000215 	stw	r4,8(r2)
 80010c0:	1021883a 	mov	r16,r2
 80010c4:	80021940 	call	8002194 <memset>
 80010c8:	8005883a 	mov	r2,r16
 80010cc:	dfc00317 	ldw	ra,12(sp)
 80010d0:	dc800217 	ldw	r18,8(sp)
 80010d4:	dc400117 	ldw	r17,4(sp)
 80010d8:	dc000017 	ldw	r16,0(sp)
 80010dc:	dec00404 	addi	sp,sp,16
 80010e0:	f800283a 	ret

080010e4 <__sfp>:
 80010e4:	defffd04 	addi	sp,sp,-12
 80010e8:	00820074 	movhi	r2,2049
 80010ec:	10a41804 	addi	r2,r2,-28576
 80010f0:	dc000015 	stw	r16,0(sp)
 80010f4:	14000017 	ldw	r16,0(r2)
 80010f8:	dc400115 	stw	r17,4(sp)
 80010fc:	dfc00215 	stw	ra,8(sp)
 8001100:	80800e17 	ldw	r2,56(r16)
 8001104:	2023883a 	mov	r17,r4
 8001108:	10002626 	beq	r2,zero,80011a4 <__sfp+0xc0>
 800110c:	8400b804 	addi	r16,r16,736
 8001110:	80800117 	ldw	r2,4(r16)
 8001114:	81000217 	ldw	r4,8(r16)
 8001118:	10ffffc4 	addi	r3,r2,-1
 800111c:	18000916 	blt	r3,zero,8001144 <__sfp+0x60>
 8001120:	2080030f 	ldh	r2,12(r4)
 8001124:	10000b26 	beq	r2,zero,8001154 <__sfp+0x70>
 8001128:	017fffc4 	movi	r5,-1
 800112c:	00000206 	br	8001138 <__sfp+0x54>
 8001130:	2080030f 	ldh	r2,12(r4)
 8001134:	10000726 	beq	r2,zero,8001154 <__sfp+0x70>
 8001138:	18ffffc4 	addi	r3,r3,-1
 800113c:	21001704 	addi	r4,r4,92
 8001140:	197ffb1e 	bne	r3,r5,8001130 <__sfp+0x4c>
 8001144:	80800017 	ldw	r2,0(r16)
 8001148:	10001926 	beq	r2,zero,80011b0 <__sfp+0xcc>
 800114c:	1021883a 	mov	r16,r2
 8001150:	003fef06 	br	8001110 <__sfp+0x2c>
 8001154:	00bfffc4 	movi	r2,-1
 8001158:	00c00044 	movi	r3,1
 800115c:	2080038d 	sth	r2,14(r4)
 8001160:	20c0030d 	sth	r3,12(r4)
 8001164:	20000015 	stw	zero,0(r4)
 8001168:	20000215 	stw	zero,8(r4)
 800116c:	20000115 	stw	zero,4(r4)
 8001170:	20000415 	stw	zero,16(r4)
 8001174:	20000515 	stw	zero,20(r4)
 8001178:	20000615 	stw	zero,24(r4)
 800117c:	20000c15 	stw	zero,48(r4)
 8001180:	20000d15 	stw	zero,52(r4)
 8001184:	20001115 	stw	zero,68(r4)
 8001188:	20001215 	stw	zero,72(r4)
 800118c:	2005883a 	mov	r2,r4
 8001190:	dfc00217 	ldw	ra,8(sp)
 8001194:	dc400117 	ldw	r17,4(sp)
 8001198:	dc000017 	ldw	r16,0(sp)
 800119c:	dec00304 	addi	sp,sp,12
 80011a0:	f800283a 	ret
 80011a4:	8009883a 	mov	r4,r16
 80011a8:	8000f7c0 	call	8000f7c <__sinit>
 80011ac:	003fd706 	br	800110c <__sfp+0x28>
 80011b0:	8809883a 	mov	r4,r17
 80011b4:	01400104 	movi	r5,4
 80011b8:	800107c0 	call	800107c <__sfmoreglue>
 80011bc:	80800015 	stw	r2,0(r16)
 80011c0:	103fe21e 	bne	r2,zero,800114c <__sfp+0x68>
 80011c4:	00800304 	movi	r2,12
 80011c8:	0009883a 	mov	r4,zero
 80011cc:	88800015 	stw	r2,0(r17)
 80011d0:	003fee06 	br	800118c <__sfp+0xa8>

080011d4 <__sfvwrite_r>:
 80011d4:	30800217 	ldw	r2,8(r6)
 80011d8:	defff504 	addi	sp,sp,-44
 80011dc:	df000915 	stw	fp,36(sp)
 80011e0:	dd800715 	stw	r22,28(sp)
 80011e4:	dc800315 	stw	r18,12(sp)
 80011e8:	dfc00a15 	stw	ra,40(sp)
 80011ec:	ddc00815 	stw	r23,32(sp)
 80011f0:	dd400615 	stw	r21,24(sp)
 80011f4:	dd000515 	stw	r20,20(sp)
 80011f8:	dcc00415 	stw	r19,16(sp)
 80011fc:	dc400215 	stw	r17,8(sp)
 8001200:	dc000115 	stw	r16,4(sp)
 8001204:	302d883a 	mov	r22,r6
 8001208:	2039883a 	mov	fp,r4
 800120c:	2825883a 	mov	r18,r5
 8001210:	10001c26 	beq	r2,zero,8001284 <__sfvwrite_r+0xb0>
 8001214:	29c0030b 	ldhu	r7,12(r5)
 8001218:	3880020c 	andi	r2,r7,8
 800121c:	10002726 	beq	r2,zero,80012bc <__sfvwrite_r+0xe8>
 8001220:	28800417 	ldw	r2,16(r5)
 8001224:	10002526 	beq	r2,zero,80012bc <__sfvwrite_r+0xe8>
 8001228:	3880008c 	andi	r2,r7,2
 800122c:	b5400017 	ldw	r21,0(r22)
 8001230:	10002826 	beq	r2,zero,80012d4 <__sfvwrite_r+0x100>
 8001234:	0021883a 	mov	r16,zero
 8001238:	0023883a 	mov	r17,zero
 800123c:	880d883a 	mov	r6,r17
 8001240:	e009883a 	mov	r4,fp
 8001244:	00810004 	movi	r2,1024
 8001248:	80006e26 	beq	r16,zero,8001404 <__sfvwrite_r+0x230>
 800124c:	800f883a 	mov	r7,r16
 8001250:	91400717 	ldw	r5,28(r18)
 8001254:	1400012e 	bgeu	r2,r16,800125c <__sfvwrite_r+0x88>
 8001258:	100f883a 	mov	r7,r2
 800125c:	90c00917 	ldw	r3,36(r18)
 8001260:	183ee83a 	callr	r3
 8001264:	1007883a 	mov	r3,r2
 8001268:	80a1c83a 	sub	r16,r16,r2
 800126c:	88a3883a 	add	r17,r17,r2
 8001270:	00806d0e 	bge	zero,r2,8001428 <__sfvwrite_r+0x254>
 8001274:	b0800217 	ldw	r2,8(r22)
 8001278:	10c5c83a 	sub	r2,r2,r3
 800127c:	b0800215 	stw	r2,8(r22)
 8001280:	103fee1e 	bne	r2,zero,800123c <__sfvwrite_r+0x68>
 8001284:	0009883a 	mov	r4,zero
 8001288:	2005883a 	mov	r2,r4
 800128c:	dfc00a17 	ldw	ra,40(sp)
 8001290:	df000917 	ldw	fp,36(sp)
 8001294:	ddc00817 	ldw	r23,32(sp)
 8001298:	dd800717 	ldw	r22,28(sp)
 800129c:	dd400617 	ldw	r21,24(sp)
 80012a0:	dd000517 	ldw	r20,20(sp)
 80012a4:	dcc00417 	ldw	r19,16(sp)
 80012a8:	dc800317 	ldw	r18,12(sp)
 80012ac:	dc400217 	ldw	r17,8(sp)
 80012b0:	dc000117 	ldw	r16,4(sp)
 80012b4:	dec00b04 	addi	sp,sp,44
 80012b8:	f800283a 	ret
 80012bc:	8002a540 	call	8002a54 <__swsetup_r>
 80012c0:	1000e41e 	bne	r2,zero,8001654 <__sfvwrite_r+0x480>
 80012c4:	91c0030b 	ldhu	r7,12(r18)
 80012c8:	b5400017 	ldw	r21,0(r22)
 80012cc:	3880008c 	andi	r2,r7,2
 80012d0:	103fd81e 	bne	r2,zero,8001234 <__sfvwrite_r+0x60>
 80012d4:	3880004c 	andi	r2,r7,1
 80012d8:	1005003a 	cmpeq	r2,r2,zero
 80012dc:	10005726 	beq	r2,zero,800143c <__sfvwrite_r+0x268>
 80012e0:	0029883a 	mov	r20,zero
 80012e4:	002f883a 	mov	r23,zero
 80012e8:	a0004226 	beq	r20,zero,80013f4 <__sfvwrite_r+0x220>
 80012ec:	3880800c 	andi	r2,r7,512
 80012f0:	94000217 	ldw	r16,8(r18)
 80012f4:	10008b26 	beq	r2,zero,8001524 <__sfvwrite_r+0x350>
 80012f8:	800d883a 	mov	r6,r16
 80012fc:	a400a536 	bltu	r20,r16,8001594 <__sfvwrite_r+0x3c0>
 8001300:	3881200c 	andi	r2,r7,1152
 8001304:	10002726 	beq	r2,zero,80013a4 <__sfvwrite_r+0x1d0>
 8001308:	90800517 	ldw	r2,20(r18)
 800130c:	92000417 	ldw	r8,16(r18)
 8001310:	91400017 	ldw	r5,0(r18)
 8001314:	1087883a 	add	r3,r2,r2
 8001318:	1887883a 	add	r3,r3,r2
 800131c:	1808d7fa 	srli	r4,r3,31
 8001320:	2a21c83a 	sub	r16,r5,r8
 8001324:	80800044 	addi	r2,r16,1
 8001328:	20c9883a 	add	r4,r4,r3
 800132c:	2027d07a 	srai	r19,r4,1
 8001330:	a085883a 	add	r2,r20,r2
 8001334:	980d883a 	mov	r6,r19
 8001338:	9880022e 	bgeu	r19,r2,8001344 <__sfvwrite_r+0x170>
 800133c:	1027883a 	mov	r19,r2
 8001340:	100d883a 	mov	r6,r2
 8001344:	3881000c 	andi	r2,r7,1024
 8001348:	1000b826 	beq	r2,zero,800162c <__sfvwrite_r+0x458>
 800134c:	300b883a 	mov	r5,r6
 8001350:	e009883a 	mov	r4,fp
 8001354:	80017f00 	call	80017f0 <_malloc_r>
 8001358:	10003126 	beq	r2,zero,8001420 <__sfvwrite_r+0x24c>
 800135c:	91400417 	ldw	r5,16(r18)
 8001360:	1009883a 	mov	r4,r2
 8001364:	800d883a 	mov	r6,r16
 8001368:	1023883a 	mov	r17,r2
 800136c:	80020140 	call	8002014 <memcpy>
 8001370:	90c0030b 	ldhu	r3,12(r18)
 8001374:	00beffc4 	movi	r2,-1025
 8001378:	1886703a 	and	r3,r3,r2
 800137c:	18c02014 	ori	r3,r3,128
 8001380:	90c0030d 	sth	r3,12(r18)
 8001384:	9c07c83a 	sub	r3,r19,r16
 8001388:	8c05883a 	add	r2,r17,r16
 800138c:	a00d883a 	mov	r6,r20
 8001390:	a021883a 	mov	r16,r20
 8001394:	90800015 	stw	r2,0(r18)
 8001398:	90c00215 	stw	r3,8(r18)
 800139c:	94400415 	stw	r17,16(r18)
 80013a0:	94c00515 	stw	r19,20(r18)
 80013a4:	91000017 	ldw	r4,0(r18)
 80013a8:	b80b883a 	mov	r5,r23
 80013ac:	a023883a 	mov	r17,r20
 80013b0:	80020b40 	call	80020b4 <memmove>
 80013b4:	90c00217 	ldw	r3,8(r18)
 80013b8:	90800017 	ldw	r2,0(r18)
 80013bc:	a027883a 	mov	r19,r20
 80013c0:	1c07c83a 	sub	r3,r3,r16
 80013c4:	1405883a 	add	r2,r2,r16
 80013c8:	90c00215 	stw	r3,8(r18)
 80013cc:	a021883a 	mov	r16,r20
 80013d0:	90800015 	stw	r2,0(r18)
 80013d4:	b0800217 	ldw	r2,8(r22)
 80013d8:	1405c83a 	sub	r2,r2,r16
 80013dc:	b0800215 	stw	r2,8(r22)
 80013e0:	103fa826 	beq	r2,zero,8001284 <__sfvwrite_r+0xb0>
 80013e4:	a469c83a 	sub	r20,r20,r17
 80013e8:	91c0030b 	ldhu	r7,12(r18)
 80013ec:	bcef883a 	add	r23,r23,r19
 80013f0:	a03fbe1e 	bne	r20,zero,80012ec <__sfvwrite_r+0x118>
 80013f4:	adc00017 	ldw	r23,0(r21)
 80013f8:	ad000117 	ldw	r20,4(r21)
 80013fc:	ad400204 	addi	r21,r21,8
 8001400:	003fb906 	br	80012e8 <__sfvwrite_r+0x114>
 8001404:	ac400017 	ldw	r17,0(r21)
 8001408:	ac000117 	ldw	r16,4(r21)
 800140c:	ad400204 	addi	r21,r21,8
 8001410:	003f8a06 	br	800123c <__sfvwrite_r+0x68>
 8001414:	91400417 	ldw	r5,16(r18)
 8001418:	e009883a 	mov	r4,fp
 800141c:	80030800 	call	8003080 <_free_r>
 8001420:	00800304 	movi	r2,12
 8001424:	e0800015 	stw	r2,0(fp)
 8001428:	9080030b 	ldhu	r2,12(r18)
 800142c:	013fffc4 	movi	r4,-1
 8001430:	10801014 	ori	r2,r2,64
 8001434:	9080030d 	sth	r2,12(r18)
 8001438:	003f9306 	br	8001288 <__sfvwrite_r+0xb4>
 800143c:	0027883a 	mov	r19,zero
 8001440:	002f883a 	mov	r23,zero
 8001444:	d8000015 	stw	zero,0(sp)
 8001448:	0029883a 	mov	r20,zero
 800144c:	98001e26 	beq	r19,zero,80014c8 <__sfvwrite_r+0x2f4>
 8001450:	d8c00017 	ldw	r3,0(sp)
 8001454:	1804c03a 	cmpne	r2,r3,zero
 8001458:	10005e26 	beq	r2,zero,80015d4 <__sfvwrite_r+0x400>
 800145c:	9821883a 	mov	r16,r19
 8001460:	a4c0012e 	bgeu	r20,r19,8001468 <__sfvwrite_r+0x294>
 8001464:	a021883a 	mov	r16,r20
 8001468:	91000017 	ldw	r4,0(r18)
 800146c:	90800417 	ldw	r2,16(r18)
 8001470:	91800217 	ldw	r6,8(r18)
 8001474:	91c00517 	ldw	r7,20(r18)
 8001478:	1100022e 	bgeu	r2,r4,8001484 <__sfvwrite_r+0x2b0>
 800147c:	31e3883a 	add	r17,r6,r7
 8001480:	8c001616 	blt	r17,r16,80014dc <__sfvwrite_r+0x308>
 8001484:	81c03816 	blt	r16,r7,8001568 <__sfvwrite_r+0x394>
 8001488:	90c00917 	ldw	r3,36(r18)
 800148c:	91400717 	ldw	r5,28(r18)
 8001490:	e009883a 	mov	r4,fp
 8001494:	b80d883a 	mov	r6,r23
 8001498:	183ee83a 	callr	r3
 800149c:	1023883a 	mov	r17,r2
 80014a0:	00bfe10e 	bge	zero,r2,8001428 <__sfvwrite_r+0x254>
 80014a4:	a469c83a 	sub	r20,r20,r17
 80014a8:	a0001826 	beq	r20,zero,800150c <__sfvwrite_r+0x338>
 80014ac:	b0800217 	ldw	r2,8(r22)
 80014b0:	1445c83a 	sub	r2,r2,r17
 80014b4:	b0800215 	stw	r2,8(r22)
 80014b8:	103f7226 	beq	r2,zero,8001284 <__sfvwrite_r+0xb0>
 80014bc:	9c67c83a 	sub	r19,r19,r17
 80014c0:	bc6f883a 	add	r23,r23,r17
 80014c4:	983fe21e 	bne	r19,zero,8001450 <__sfvwrite_r+0x27c>
 80014c8:	adc00017 	ldw	r23,0(r21)
 80014cc:	acc00117 	ldw	r19,4(r21)
 80014d0:	ad400204 	addi	r21,r21,8
 80014d4:	d8000015 	stw	zero,0(sp)
 80014d8:	003fdc06 	br	800144c <__sfvwrite_r+0x278>
 80014dc:	b80b883a 	mov	r5,r23
 80014e0:	880d883a 	mov	r6,r17
 80014e4:	80020b40 	call	80020b4 <memmove>
 80014e8:	90c00017 	ldw	r3,0(r18)
 80014ec:	e009883a 	mov	r4,fp
 80014f0:	900b883a 	mov	r5,r18
 80014f4:	1c47883a 	add	r3,r3,r17
 80014f8:	90c00015 	stw	r3,0(r18)
 80014fc:	8002d240 	call	8002d24 <_fflush_r>
 8001500:	103fc91e 	bne	r2,zero,8001428 <__sfvwrite_r+0x254>
 8001504:	a469c83a 	sub	r20,r20,r17
 8001508:	a03fe81e 	bne	r20,zero,80014ac <__sfvwrite_r+0x2d8>
 800150c:	e009883a 	mov	r4,fp
 8001510:	900b883a 	mov	r5,r18
 8001514:	8002d240 	call	8002d24 <_fflush_r>
 8001518:	103fc31e 	bne	r2,zero,8001428 <__sfvwrite_r+0x254>
 800151c:	d8000015 	stw	zero,0(sp)
 8001520:	003fe206 	br	80014ac <__sfvwrite_r+0x2d8>
 8001524:	91000017 	ldw	r4,0(r18)
 8001528:	90800417 	ldw	r2,16(r18)
 800152c:	1100022e 	bgeu	r2,r4,8001538 <__sfvwrite_r+0x364>
 8001530:	8023883a 	mov	r17,r16
 8001534:	85003136 	bltu	r16,r20,80015fc <__sfvwrite_r+0x428>
 8001538:	91c00517 	ldw	r7,20(r18)
 800153c:	a1c01836 	bltu	r20,r7,80015a0 <__sfvwrite_r+0x3cc>
 8001540:	90c00917 	ldw	r3,36(r18)
 8001544:	91400717 	ldw	r5,28(r18)
 8001548:	e009883a 	mov	r4,fp
 800154c:	b80d883a 	mov	r6,r23
 8001550:	183ee83a 	callr	r3
 8001554:	1021883a 	mov	r16,r2
 8001558:	00bfb30e 	bge	zero,r2,8001428 <__sfvwrite_r+0x254>
 800155c:	1023883a 	mov	r17,r2
 8001560:	1027883a 	mov	r19,r2
 8001564:	003f9b06 	br	80013d4 <__sfvwrite_r+0x200>
 8001568:	b80b883a 	mov	r5,r23
 800156c:	800d883a 	mov	r6,r16
 8001570:	80020b40 	call	80020b4 <memmove>
 8001574:	90c00217 	ldw	r3,8(r18)
 8001578:	90800017 	ldw	r2,0(r18)
 800157c:	8023883a 	mov	r17,r16
 8001580:	1c07c83a 	sub	r3,r3,r16
 8001584:	1405883a 	add	r2,r2,r16
 8001588:	90c00215 	stw	r3,8(r18)
 800158c:	90800015 	stw	r2,0(r18)
 8001590:	003fc406 	br	80014a4 <__sfvwrite_r+0x2d0>
 8001594:	a00d883a 	mov	r6,r20
 8001598:	a021883a 	mov	r16,r20
 800159c:	003f8106 	br	80013a4 <__sfvwrite_r+0x1d0>
 80015a0:	b80b883a 	mov	r5,r23
 80015a4:	a00d883a 	mov	r6,r20
 80015a8:	80020b40 	call	80020b4 <memmove>
 80015ac:	90c00217 	ldw	r3,8(r18)
 80015b0:	90800017 	ldw	r2,0(r18)
 80015b4:	a021883a 	mov	r16,r20
 80015b8:	1d07c83a 	sub	r3,r3,r20
 80015bc:	1505883a 	add	r2,r2,r20
 80015c0:	a023883a 	mov	r17,r20
 80015c4:	a027883a 	mov	r19,r20
 80015c8:	90c00215 	stw	r3,8(r18)
 80015cc:	90800015 	stw	r2,0(r18)
 80015d0:	003f8006 	br	80013d4 <__sfvwrite_r+0x200>
 80015d4:	b809883a 	mov	r4,r23
 80015d8:	01400284 	movi	r5,10
 80015dc:	980d883a 	mov	r6,r19
 80015e0:	8001f300 	call	8001f30 <memchr>
 80015e4:	10001726 	beq	r2,zero,8001644 <__sfvwrite_r+0x470>
 80015e8:	15c5c83a 	sub	r2,r2,r23
 80015ec:	15000044 	addi	r20,r2,1
 80015f0:	00800044 	movi	r2,1
 80015f4:	d8800015 	stw	r2,0(sp)
 80015f8:	003f9806 	br	800145c <__sfvwrite_r+0x288>
 80015fc:	b80b883a 	mov	r5,r23
 8001600:	800d883a 	mov	r6,r16
 8001604:	80020b40 	call	80020b4 <memmove>
 8001608:	90c00017 	ldw	r3,0(r18)
 800160c:	e009883a 	mov	r4,fp
 8001610:	900b883a 	mov	r5,r18
 8001614:	1c07883a 	add	r3,r3,r16
 8001618:	90c00015 	stw	r3,0(r18)
 800161c:	8027883a 	mov	r19,r16
 8001620:	8002d240 	call	8002d24 <_fflush_r>
 8001624:	103f6b26 	beq	r2,zero,80013d4 <__sfvwrite_r+0x200>
 8001628:	003f7f06 	br	8001428 <__sfvwrite_r+0x254>
 800162c:	400b883a 	mov	r5,r8
 8001630:	e009883a 	mov	r4,fp
 8001634:	800222c0 	call	800222c <_realloc_r>
 8001638:	103f7626 	beq	r2,zero,8001414 <__sfvwrite_r+0x240>
 800163c:	1023883a 	mov	r17,r2
 8001640:	003f5006 	br	8001384 <__sfvwrite_r+0x1b0>
 8001644:	00c00044 	movi	r3,1
 8001648:	9d000044 	addi	r20,r19,1
 800164c:	d8c00015 	stw	r3,0(sp)
 8001650:	003f8206 	br	800145c <__sfvwrite_r+0x288>
 8001654:	9080030b 	ldhu	r2,12(r18)
 8001658:	00c00244 	movi	r3,9
 800165c:	013fffc4 	movi	r4,-1
 8001660:	10801014 	ori	r2,r2,64
 8001664:	9080030d 	sth	r2,12(r18)
 8001668:	e0c00015 	stw	r3,0(fp)
 800166c:	003f0606 	br	8001288 <__sfvwrite_r+0xb4>

08001670 <_fwalk_reent>:
 8001670:	defff704 	addi	sp,sp,-36
 8001674:	dcc00315 	stw	r19,12(sp)
 8001678:	24c0b804 	addi	r19,r4,736
 800167c:	dd800615 	stw	r22,24(sp)
 8001680:	dd400515 	stw	r21,20(sp)
 8001684:	dfc00815 	stw	ra,32(sp)
 8001688:	ddc00715 	stw	r23,28(sp)
 800168c:	dd000415 	stw	r20,16(sp)
 8001690:	dc800215 	stw	r18,8(sp)
 8001694:	dc400115 	stw	r17,4(sp)
 8001698:	dc000015 	stw	r16,0(sp)
 800169c:	202b883a 	mov	r21,r4
 80016a0:	282d883a 	mov	r22,r5
 80016a4:	8000f6c0 	call	8000f6c <__sfp_lock_acquire>
 80016a8:	98002126 	beq	r19,zero,8001730 <_fwalk_reent+0xc0>
 80016ac:	002f883a 	mov	r23,zero
 80016b0:	9c800117 	ldw	r18,4(r19)
 80016b4:	9c000217 	ldw	r16,8(r19)
 80016b8:	90bfffc4 	addi	r2,r18,-1
 80016bc:	10000d16 	blt	r2,zero,80016f4 <_fwalk_reent+0x84>
 80016c0:	0023883a 	mov	r17,zero
 80016c4:	053fffc4 	movi	r20,-1
 80016c8:	8080030f 	ldh	r2,12(r16)
 80016cc:	8c400044 	addi	r17,r17,1
 80016d0:	10000626 	beq	r2,zero,80016ec <_fwalk_reent+0x7c>
 80016d4:	8080038f 	ldh	r2,14(r16)
 80016d8:	800b883a 	mov	r5,r16
 80016dc:	a809883a 	mov	r4,r21
 80016e0:	15000226 	beq	r2,r20,80016ec <_fwalk_reent+0x7c>
 80016e4:	b03ee83a 	callr	r22
 80016e8:	b8aeb03a 	or	r23,r23,r2
 80016ec:	84001704 	addi	r16,r16,92
 80016f0:	947ff51e 	bne	r18,r17,80016c8 <_fwalk_reent+0x58>
 80016f4:	9cc00017 	ldw	r19,0(r19)
 80016f8:	983fed1e 	bne	r19,zero,80016b0 <_fwalk_reent+0x40>
 80016fc:	8000f700 	call	8000f70 <__sfp_lock_release>
 8001700:	b805883a 	mov	r2,r23
 8001704:	dfc00817 	ldw	ra,32(sp)
 8001708:	ddc00717 	ldw	r23,28(sp)
 800170c:	dd800617 	ldw	r22,24(sp)
 8001710:	dd400517 	ldw	r21,20(sp)
 8001714:	dd000417 	ldw	r20,16(sp)
 8001718:	dcc00317 	ldw	r19,12(sp)
 800171c:	dc800217 	ldw	r18,8(sp)
 8001720:	dc400117 	ldw	r17,4(sp)
 8001724:	dc000017 	ldw	r16,0(sp)
 8001728:	dec00904 	addi	sp,sp,36
 800172c:	f800283a 	ret
 8001730:	002f883a 	mov	r23,zero
 8001734:	003ff106 	br	80016fc <_fwalk_reent+0x8c>

08001738 <_fwalk>:
 8001738:	defff804 	addi	sp,sp,-32
 800173c:	dcc00315 	stw	r19,12(sp)
 8001740:	24c0b804 	addi	r19,r4,736
 8001744:	dd400515 	stw	r21,20(sp)
 8001748:	dfc00715 	stw	ra,28(sp)
 800174c:	dd800615 	stw	r22,24(sp)
 8001750:	dd000415 	stw	r20,16(sp)
 8001754:	dc800215 	stw	r18,8(sp)
 8001758:	dc400115 	stw	r17,4(sp)
 800175c:	dc000015 	stw	r16,0(sp)
 8001760:	282b883a 	mov	r21,r5
 8001764:	8000f6c0 	call	8000f6c <__sfp_lock_acquire>
 8001768:	98001f26 	beq	r19,zero,80017e8 <_fwalk+0xb0>
 800176c:	002d883a 	mov	r22,zero
 8001770:	9c800117 	ldw	r18,4(r19)
 8001774:	9c000217 	ldw	r16,8(r19)
 8001778:	90bfffc4 	addi	r2,r18,-1
 800177c:	10000c16 	blt	r2,zero,80017b0 <_fwalk+0x78>
 8001780:	0023883a 	mov	r17,zero
 8001784:	053fffc4 	movi	r20,-1
 8001788:	8080030f 	ldh	r2,12(r16)
 800178c:	8c400044 	addi	r17,r17,1
 8001790:	10000526 	beq	r2,zero,80017a8 <_fwalk+0x70>
 8001794:	8080038f 	ldh	r2,14(r16)
 8001798:	8009883a 	mov	r4,r16
 800179c:	15000226 	beq	r2,r20,80017a8 <_fwalk+0x70>
 80017a0:	a83ee83a 	callr	r21
 80017a4:	b0acb03a 	or	r22,r22,r2
 80017a8:	84001704 	addi	r16,r16,92
 80017ac:	947ff61e 	bne	r18,r17,8001788 <_fwalk+0x50>
 80017b0:	9cc00017 	ldw	r19,0(r19)
 80017b4:	983fee1e 	bne	r19,zero,8001770 <_fwalk+0x38>
 80017b8:	8000f700 	call	8000f70 <__sfp_lock_release>
 80017bc:	b005883a 	mov	r2,r22
 80017c0:	dfc00717 	ldw	ra,28(sp)
 80017c4:	dd800617 	ldw	r22,24(sp)
 80017c8:	dd400517 	ldw	r21,20(sp)
 80017cc:	dd000417 	ldw	r20,16(sp)
 80017d0:	dcc00317 	ldw	r19,12(sp)
 80017d4:	dc800217 	ldw	r18,8(sp)
 80017d8:	dc400117 	ldw	r17,4(sp)
 80017dc:	dc000017 	ldw	r16,0(sp)
 80017e0:	dec00804 	addi	sp,sp,32
 80017e4:	f800283a 	ret
 80017e8:	002d883a 	mov	r22,zero
 80017ec:	003ff206 	br	80017b8 <_fwalk+0x80>

080017f0 <_malloc_r>:
 80017f0:	defff604 	addi	sp,sp,-40
 80017f4:	28c002c4 	addi	r3,r5,11
 80017f8:	00800584 	movi	r2,22
 80017fc:	dc800215 	stw	r18,8(sp)
 8001800:	dfc00915 	stw	ra,36(sp)
 8001804:	df000815 	stw	fp,32(sp)
 8001808:	ddc00715 	stw	r23,28(sp)
 800180c:	dd800615 	stw	r22,24(sp)
 8001810:	dd400515 	stw	r21,20(sp)
 8001814:	dd000415 	stw	r20,16(sp)
 8001818:	dcc00315 	stw	r19,12(sp)
 800181c:	dc400115 	stw	r17,4(sp)
 8001820:	dc000015 	stw	r16,0(sp)
 8001824:	2025883a 	mov	r18,r4
 8001828:	10c01236 	bltu	r2,r3,8001874 <_malloc_r+0x84>
 800182c:	04400404 	movi	r17,16
 8001830:	8940142e 	bgeu	r17,r5,8001884 <_malloc_r+0x94>
 8001834:	00800304 	movi	r2,12
 8001838:	0007883a 	mov	r3,zero
 800183c:	90800015 	stw	r2,0(r18)
 8001840:	1805883a 	mov	r2,r3
 8001844:	dfc00917 	ldw	ra,36(sp)
 8001848:	df000817 	ldw	fp,32(sp)
 800184c:	ddc00717 	ldw	r23,28(sp)
 8001850:	dd800617 	ldw	r22,24(sp)
 8001854:	dd400517 	ldw	r21,20(sp)
 8001858:	dd000417 	ldw	r20,16(sp)
 800185c:	dcc00317 	ldw	r19,12(sp)
 8001860:	dc800217 	ldw	r18,8(sp)
 8001864:	dc400117 	ldw	r17,4(sp)
 8001868:	dc000017 	ldw	r16,0(sp)
 800186c:	dec00a04 	addi	sp,sp,40
 8001870:	f800283a 	ret
 8001874:	00bffe04 	movi	r2,-8
 8001878:	18a2703a 	and	r17,r3,r2
 800187c:	883fed16 	blt	r17,zero,8001834 <_malloc_r+0x44>
 8001880:	897fec36 	bltu	r17,r5,8001834 <_malloc_r+0x44>
 8001884:	9009883a 	mov	r4,r18
 8001888:	8003e180 	call	8003e18 <__malloc_lock>
 800188c:	00807dc4 	movi	r2,503
 8001890:	14402b2e 	bgeu	r2,r17,8001940 <_malloc_r+0x150>
 8001894:	8806d27a 	srli	r3,r17,9
 8001898:	18003f1e 	bne	r3,zero,8001998 <_malloc_r+0x1a8>
 800189c:	880cd0fa 	srli	r6,r17,3
 80018a0:	300490fa 	slli	r2,r6,3
 80018a4:	02c20034 	movhi	r11,2048
 80018a8:	5ade4b04 	addi	r11,r11,31020
 80018ac:	12cb883a 	add	r5,r2,r11
 80018b0:	2c000317 	ldw	r16,12(r5)
 80018b4:	580f883a 	mov	r7,r11
 80018b8:	2c00041e 	bne	r5,r16,80018cc <_malloc_r+0xdc>
 80018bc:	00000a06 	br	80018e8 <_malloc_r+0xf8>
 80018c0:	1800860e 	bge	r3,zero,8001adc <_malloc_r+0x2ec>
 80018c4:	84000317 	ldw	r16,12(r16)
 80018c8:	2c000726 	beq	r5,r16,80018e8 <_malloc_r+0xf8>
 80018cc:	80800117 	ldw	r2,4(r16)
 80018d0:	00ffff04 	movi	r3,-4
 80018d4:	10c8703a 	and	r4,r2,r3
 80018d8:	2447c83a 	sub	r3,r4,r17
 80018dc:	008003c4 	movi	r2,15
 80018e0:	10fff70e 	bge	r2,r3,80018c0 <_malloc_r+0xd0>
 80018e4:	31bfffc4 	addi	r6,r6,-1
 80018e8:	32400044 	addi	r9,r6,1
 80018ec:	02820034 	movhi	r10,2048
 80018f0:	529e4d04 	addi	r10,r10,31028
 80018f4:	54000217 	ldw	r16,8(r10)
 80018f8:	8280a026 	beq	r16,r10,8001b7c <_malloc_r+0x38c>
 80018fc:	80800117 	ldw	r2,4(r16)
 8001900:	00ffff04 	movi	r3,-4
 8001904:	10ca703a 	and	r5,r2,r3
 8001908:	2c4dc83a 	sub	r6,r5,r17
 800190c:	008003c4 	movi	r2,15
 8001910:	11808316 	blt	r2,r6,8001b20 <_malloc_r+0x330>
 8001914:	52800315 	stw	r10,12(r10)
 8001918:	52800215 	stw	r10,8(r10)
 800191c:	30002916 	blt	r6,zero,80019c4 <_malloc_r+0x1d4>
 8001920:	8147883a 	add	r3,r16,r5
 8001924:	18800117 	ldw	r2,4(r3)
 8001928:	9009883a 	mov	r4,r18
 800192c:	10800054 	ori	r2,r2,1
 8001930:	18800115 	stw	r2,4(r3)
 8001934:	8003e380 	call	8003e38 <__malloc_unlock>
 8001938:	80c00204 	addi	r3,r16,8
 800193c:	003fc006 	br	8001840 <_malloc_r+0x50>
 8001940:	02c20034 	movhi	r11,2048
 8001944:	5ade4b04 	addi	r11,r11,31020
 8001948:	8ac5883a 	add	r2,r17,r11
 800194c:	14000317 	ldw	r16,12(r2)
 8001950:	580f883a 	mov	r7,r11
 8001954:	8806d0fa 	srli	r3,r17,3
 8001958:	14006c26 	beq	r2,r16,8001b0c <_malloc_r+0x31c>
 800195c:	80c00117 	ldw	r3,4(r16)
 8001960:	00bfff04 	movi	r2,-4
 8001964:	81800317 	ldw	r6,12(r16)
 8001968:	1886703a 	and	r3,r3,r2
 800196c:	80c7883a 	add	r3,r16,r3
 8001970:	18800117 	ldw	r2,4(r3)
 8001974:	81400217 	ldw	r5,8(r16)
 8001978:	9009883a 	mov	r4,r18
 800197c:	10800054 	ori	r2,r2,1
 8001980:	18800115 	stw	r2,4(r3)
 8001984:	31400215 	stw	r5,8(r6)
 8001988:	29800315 	stw	r6,12(r5)
 800198c:	8003e380 	call	8003e38 <__malloc_unlock>
 8001990:	80c00204 	addi	r3,r16,8
 8001994:	003faa06 	br	8001840 <_malloc_r+0x50>
 8001998:	00800104 	movi	r2,4
 800199c:	10c0052e 	bgeu	r2,r3,80019b4 <_malloc_r+0x1c4>
 80019a0:	00800504 	movi	r2,20
 80019a4:	10c07836 	bltu	r2,r3,8001b88 <_malloc_r+0x398>
 80019a8:	198016c4 	addi	r6,r3,91
 80019ac:	300490fa 	slli	r2,r6,3
 80019b0:	003fbc06 	br	80018a4 <_malloc_r+0xb4>
 80019b4:	8804d1ba 	srli	r2,r17,6
 80019b8:	11800e04 	addi	r6,r2,56
 80019bc:	300490fa 	slli	r2,r6,3
 80019c0:	003fb806 	br	80018a4 <_malloc_r+0xb4>
 80019c4:	00807fc4 	movi	r2,511
 80019c8:	1140bb36 	bltu	r2,r5,8001cb8 <_malloc_r+0x4c8>
 80019cc:	2806d0fa 	srli	r3,r5,3
 80019d0:	573ffe04 	addi	fp,r10,-8
 80019d4:	00800044 	movi	r2,1
 80019d8:	180890fa 	slli	r4,r3,3
 80019dc:	1807d0ba 	srai	r3,r3,2
 80019e0:	e1c00117 	ldw	r7,4(fp)
 80019e4:	5909883a 	add	r4,r11,r4
 80019e8:	21400217 	ldw	r5,8(r4)
 80019ec:	10c4983a 	sll	r2,r2,r3
 80019f0:	81000315 	stw	r4,12(r16)
 80019f4:	81400215 	stw	r5,8(r16)
 80019f8:	388eb03a 	or	r7,r7,r2
 80019fc:	2c000315 	stw	r16,12(r5)
 8001a00:	24000215 	stw	r16,8(r4)
 8001a04:	e1c00115 	stw	r7,4(fp)
 8001a08:	4807883a 	mov	r3,r9
 8001a0c:	4800cd16 	blt	r9,zero,8001d44 <_malloc_r+0x554>
 8001a10:	1807d0ba 	srai	r3,r3,2
 8001a14:	00800044 	movi	r2,1
 8001a18:	10c8983a 	sll	r4,r2,r3
 8001a1c:	39004436 	bltu	r7,r4,8001b30 <_malloc_r+0x340>
 8001a20:	21c4703a 	and	r2,r4,r7
 8001a24:	10000a1e 	bne	r2,zero,8001a50 <_malloc_r+0x260>
 8001a28:	2109883a 	add	r4,r4,r4
 8001a2c:	00bfff04 	movi	r2,-4
 8001a30:	4884703a 	and	r2,r9,r2
 8001a34:	3906703a 	and	r3,r7,r4
 8001a38:	12400104 	addi	r9,r2,4
 8001a3c:	1800041e 	bne	r3,zero,8001a50 <_malloc_r+0x260>
 8001a40:	2109883a 	add	r4,r4,r4
 8001a44:	3904703a 	and	r2,r7,r4
 8001a48:	4a400104 	addi	r9,r9,4
 8001a4c:	103ffc26 	beq	r2,zero,8001a40 <_malloc_r+0x250>
 8001a50:	480490fa 	slli	r2,r9,3
 8001a54:	4819883a 	mov	r12,r9
 8001a58:	023fff04 	movi	r8,-4
 8001a5c:	589b883a 	add	r13,r11,r2
 8001a60:	6807883a 	mov	r3,r13
 8001a64:	014003c4 	movi	r5,15
 8001a68:	1c000317 	ldw	r16,12(r3)
 8001a6c:	1c00041e 	bne	r3,r16,8001a80 <_malloc_r+0x290>
 8001a70:	0000a706 	br	8001d10 <_malloc_r+0x520>
 8001a74:	3000ab0e 	bge	r6,zero,8001d24 <_malloc_r+0x534>
 8001a78:	84000317 	ldw	r16,12(r16)
 8001a7c:	1c00a426 	beq	r3,r16,8001d10 <_malloc_r+0x520>
 8001a80:	80800117 	ldw	r2,4(r16)
 8001a84:	1204703a 	and	r2,r2,r8
 8001a88:	144dc83a 	sub	r6,r2,r17
 8001a8c:	29bff90e 	bge	r5,r6,8001a74 <_malloc_r+0x284>
 8001a90:	81000317 	ldw	r4,12(r16)
 8001a94:	80c00217 	ldw	r3,8(r16)
 8001a98:	89400054 	ori	r5,r17,1
 8001a9c:	8445883a 	add	r2,r16,r17
 8001aa0:	20c00215 	stw	r3,8(r4)
 8001aa4:	19000315 	stw	r4,12(r3)
 8001aa8:	81400115 	stw	r5,4(r16)
 8001aac:	1187883a 	add	r3,r2,r6
 8001ab0:	31000054 	ori	r4,r6,1
 8001ab4:	50800315 	stw	r2,12(r10)
 8001ab8:	50800215 	stw	r2,8(r10)
 8001abc:	19800015 	stw	r6,0(r3)
 8001ac0:	11000115 	stw	r4,4(r2)
 8001ac4:	12800215 	stw	r10,8(r2)
 8001ac8:	12800315 	stw	r10,12(r2)
 8001acc:	9009883a 	mov	r4,r18
 8001ad0:	8003e380 	call	8003e38 <__malloc_unlock>
 8001ad4:	80c00204 	addi	r3,r16,8
 8001ad8:	003f5906 	br	8001840 <_malloc_r+0x50>
 8001adc:	8109883a 	add	r4,r16,r4
 8001ae0:	20800117 	ldw	r2,4(r4)
 8001ae4:	80c00217 	ldw	r3,8(r16)
 8001ae8:	81400317 	ldw	r5,12(r16)
 8001aec:	10800054 	ori	r2,r2,1
 8001af0:	20800115 	stw	r2,4(r4)
 8001af4:	28c00215 	stw	r3,8(r5)
 8001af8:	19400315 	stw	r5,12(r3)
 8001afc:	9009883a 	mov	r4,r18
 8001b00:	8003e380 	call	8003e38 <__malloc_unlock>
 8001b04:	80c00204 	addi	r3,r16,8
 8001b08:	003f4d06 	br	8001840 <_malloc_r+0x50>
 8001b0c:	80800204 	addi	r2,r16,8
 8001b10:	14000317 	ldw	r16,12(r2)
 8001b14:	143f911e 	bne	r2,r16,800195c <_malloc_r+0x16c>
 8001b18:	1a400084 	addi	r9,r3,2
 8001b1c:	003f7306 	br	80018ec <_malloc_r+0xfc>
 8001b20:	88c00054 	ori	r3,r17,1
 8001b24:	8445883a 	add	r2,r16,r17
 8001b28:	80c00115 	stw	r3,4(r16)
 8001b2c:	003fdf06 	br	8001aac <_malloc_r+0x2bc>
 8001b30:	e4000217 	ldw	r16,8(fp)
 8001b34:	00bfff04 	movi	r2,-4
 8001b38:	80c00117 	ldw	r3,4(r16)
 8001b3c:	802d883a 	mov	r22,r16
 8001b40:	18aa703a 	and	r21,r3,r2
 8001b44:	ac401636 	bltu	r21,r17,8001ba0 <_malloc_r+0x3b0>
 8001b48:	ac49c83a 	sub	r4,r21,r17
 8001b4c:	008003c4 	movi	r2,15
 8001b50:	1100130e 	bge	r2,r4,8001ba0 <_malloc_r+0x3b0>
 8001b54:	88800054 	ori	r2,r17,1
 8001b58:	8447883a 	add	r3,r16,r17
 8001b5c:	80800115 	stw	r2,4(r16)
 8001b60:	20800054 	ori	r2,r4,1
 8001b64:	18800115 	stw	r2,4(r3)
 8001b68:	e0c00215 	stw	r3,8(fp)
 8001b6c:	9009883a 	mov	r4,r18
 8001b70:	8003e380 	call	8003e38 <__malloc_unlock>
 8001b74:	80c00204 	addi	r3,r16,8
 8001b78:	003f3106 	br	8001840 <_malloc_r+0x50>
 8001b7c:	39c00117 	ldw	r7,4(r7)
 8001b80:	573ffe04 	addi	fp,r10,-8
 8001b84:	003fa006 	br	8001a08 <_malloc_r+0x218>
 8001b88:	00801504 	movi	r2,84
 8001b8c:	10c06736 	bltu	r2,r3,8001d2c <_malloc_r+0x53c>
 8001b90:	8804d33a 	srli	r2,r17,12
 8001b94:	11801b84 	addi	r6,r2,110
 8001b98:	300490fa 	slli	r2,r6,3
 8001b9c:	003f4106 	br	80018a4 <_malloc_r+0xb4>
 8001ba0:	d0a6ec17 	ldw	r2,-25680(gp)
 8001ba4:	d0e00317 	ldw	r3,-32756(gp)
 8001ba8:	053fffc4 	movi	r20,-1
 8001bac:	10800404 	addi	r2,r2,16
 8001bb0:	88a7883a 	add	r19,r17,r2
 8001bb4:	1d000326 	beq	r3,r20,8001bc4 <_malloc_r+0x3d4>
 8001bb8:	98c3ffc4 	addi	r3,r19,4095
 8001bbc:	00bc0004 	movi	r2,-4096
 8001bc0:	18a6703a 	and	r19,r3,r2
 8001bc4:	9009883a 	mov	r4,r18
 8001bc8:	980b883a 	mov	r5,r19
 8001bcc:	80028200 	call	8002820 <_sbrk_r>
 8001bd0:	1009883a 	mov	r4,r2
 8001bd4:	15000426 	beq	r2,r20,8001be8 <_malloc_r+0x3f8>
 8001bd8:	854b883a 	add	r5,r16,r21
 8001bdc:	1029883a 	mov	r20,r2
 8001be0:	11405a2e 	bgeu	r2,r5,8001d4c <_malloc_r+0x55c>
 8001be4:	87000c26 	beq	r16,fp,8001c18 <_malloc_r+0x428>
 8001be8:	e4000217 	ldw	r16,8(fp)
 8001bec:	80c00117 	ldw	r3,4(r16)
 8001bf0:	00bfff04 	movi	r2,-4
 8001bf4:	1884703a 	and	r2,r3,r2
 8001bf8:	14400336 	bltu	r2,r17,8001c08 <_malloc_r+0x418>
 8001bfc:	1449c83a 	sub	r4,r2,r17
 8001c00:	008003c4 	movi	r2,15
 8001c04:	113fd316 	blt	r2,r4,8001b54 <_malloc_r+0x364>
 8001c08:	9009883a 	mov	r4,r18
 8001c0c:	8003e380 	call	8003e38 <__malloc_unlock>
 8001c10:	0007883a 	mov	r3,zero
 8001c14:	003f0a06 	br	8001840 <_malloc_r+0x50>
 8001c18:	05c20074 	movhi	r23,2049
 8001c1c:	bdeb0d04 	addi	r23,r23,-21452
 8001c20:	b8800017 	ldw	r2,0(r23)
 8001c24:	988d883a 	add	r6,r19,r2
 8001c28:	b9800015 	stw	r6,0(r23)
 8001c2c:	d0e00317 	ldw	r3,-32756(gp)
 8001c30:	00bfffc4 	movi	r2,-1
 8001c34:	18808e26 	beq	r3,r2,8001e70 <_malloc_r+0x680>
 8001c38:	2145c83a 	sub	r2,r4,r5
 8001c3c:	3085883a 	add	r2,r6,r2
 8001c40:	b8800015 	stw	r2,0(r23)
 8001c44:	20c001cc 	andi	r3,r4,7
 8001c48:	18005f1e 	bne	r3,zero,8001dc8 <_malloc_r+0x5d8>
 8001c4c:	000b883a 	mov	r5,zero
 8001c50:	a4c5883a 	add	r2,r20,r19
 8001c54:	1083ffcc 	andi	r2,r2,4095
 8001c58:	00c40004 	movi	r3,4096
 8001c5c:	1887c83a 	sub	r3,r3,r2
 8001c60:	28e7883a 	add	r19,r5,r3
 8001c64:	9009883a 	mov	r4,r18
 8001c68:	980b883a 	mov	r5,r19
 8001c6c:	80028200 	call	8002820 <_sbrk_r>
 8001c70:	1007883a 	mov	r3,r2
 8001c74:	00bfffc4 	movi	r2,-1
 8001c78:	18807a26 	beq	r3,r2,8001e64 <_malloc_r+0x674>
 8001c7c:	1d05c83a 	sub	r2,r3,r20
 8001c80:	9885883a 	add	r2,r19,r2
 8001c84:	10c00054 	ori	r3,r2,1
 8001c88:	b8800017 	ldw	r2,0(r23)
 8001c8c:	a021883a 	mov	r16,r20
 8001c90:	a0c00115 	stw	r3,4(r20)
 8001c94:	9885883a 	add	r2,r19,r2
 8001c98:	b8800015 	stw	r2,0(r23)
 8001c9c:	e5000215 	stw	r20,8(fp)
 8001ca0:	b7003626 	beq	r22,fp,8001d7c <_malloc_r+0x58c>
 8001ca4:	018003c4 	movi	r6,15
 8001ca8:	35404b36 	bltu	r6,r21,8001dd8 <_malloc_r+0x5e8>
 8001cac:	00800044 	movi	r2,1
 8001cb0:	a0800115 	stw	r2,4(r20)
 8001cb4:	003fcd06 	br	8001bec <_malloc_r+0x3fc>
 8001cb8:	2808d27a 	srli	r4,r5,9
 8001cbc:	2000371e 	bne	r4,zero,8001d9c <_malloc_r+0x5ac>
 8001cc0:	2808d0fa 	srli	r4,r5,3
 8001cc4:	200690fa 	slli	r3,r4,3
 8001cc8:	1ad1883a 	add	r8,r3,r11
 8001ccc:	41800217 	ldw	r6,8(r8)
 8001cd0:	41805b26 	beq	r8,r6,8001e40 <_malloc_r+0x650>
 8001cd4:	30800117 	ldw	r2,4(r6)
 8001cd8:	00ffff04 	movi	r3,-4
 8001cdc:	10c4703a 	and	r2,r2,r3
 8001ce0:	2880022e 	bgeu	r5,r2,8001cec <_malloc_r+0x4fc>
 8001ce4:	31800217 	ldw	r6,8(r6)
 8001ce8:	41bffa1e 	bne	r8,r6,8001cd4 <_malloc_r+0x4e4>
 8001cec:	32000317 	ldw	r8,12(r6)
 8001cf0:	39c00117 	ldw	r7,4(r7)
 8001cf4:	82000315 	stw	r8,12(r16)
 8001cf8:	81800215 	stw	r6,8(r16)
 8001cfc:	07020034 	movhi	fp,2048
 8001d00:	e71e4b04 	addi	fp,fp,31020
 8001d04:	34000315 	stw	r16,12(r6)
 8001d08:	44000215 	stw	r16,8(r8)
 8001d0c:	003f3e06 	br	8001a08 <_malloc_r+0x218>
 8001d10:	63000044 	addi	r12,r12,1
 8001d14:	608000cc 	andi	r2,r12,3
 8001d18:	10005d26 	beq	r2,zero,8001e90 <_malloc_r+0x6a0>
 8001d1c:	18c00204 	addi	r3,r3,8
 8001d20:	003f5106 	br	8001a68 <_malloc_r+0x278>
 8001d24:	8089883a 	add	r4,r16,r2
 8001d28:	003f6d06 	br	8001ae0 <_malloc_r+0x2f0>
 8001d2c:	00805504 	movi	r2,340
 8001d30:	10c02036 	bltu	r2,r3,8001db4 <_malloc_r+0x5c4>
 8001d34:	8804d3fa 	srli	r2,r17,15
 8001d38:	11801dc4 	addi	r6,r2,119
 8001d3c:	300490fa 	slli	r2,r6,3
 8001d40:	003ed806 	br	80018a4 <_malloc_r+0xb4>
 8001d44:	48c000c4 	addi	r3,r9,3
 8001d48:	003f3106 	br	8001a10 <_malloc_r+0x220>
 8001d4c:	05c20074 	movhi	r23,2049
 8001d50:	bdeb0d04 	addi	r23,r23,-21452
 8001d54:	b8800017 	ldw	r2,0(r23)
 8001d58:	988d883a 	add	r6,r19,r2
 8001d5c:	b9800015 	stw	r6,0(r23)
 8001d60:	293fb21e 	bne	r5,r4,8001c2c <_malloc_r+0x43c>
 8001d64:	2083ffcc 	andi	r2,r4,4095
 8001d68:	103fb01e 	bne	r2,zero,8001c2c <_malloc_r+0x43c>
 8001d6c:	e4000217 	ldw	r16,8(fp)
 8001d70:	9d45883a 	add	r2,r19,r21
 8001d74:	10800054 	ori	r2,r2,1
 8001d78:	80800115 	stw	r2,4(r16)
 8001d7c:	b8c00017 	ldw	r3,0(r23)
 8001d80:	d0a6ed17 	ldw	r2,-25676(gp)
 8001d84:	10c0012e 	bgeu	r2,r3,8001d8c <_malloc_r+0x59c>
 8001d88:	d0e6ed15 	stw	r3,-25676(gp)
 8001d8c:	d0a6ee17 	ldw	r2,-25672(gp)
 8001d90:	10ff962e 	bgeu	r2,r3,8001bec <_malloc_r+0x3fc>
 8001d94:	d0e6ee15 	stw	r3,-25672(gp)
 8001d98:	003f9406 	br	8001bec <_malloc_r+0x3fc>
 8001d9c:	00800104 	movi	r2,4
 8001da0:	11001e36 	bltu	r2,r4,8001e1c <_malloc_r+0x62c>
 8001da4:	2804d1ba 	srli	r2,r5,6
 8001da8:	11000e04 	addi	r4,r2,56
 8001dac:	200690fa 	slli	r3,r4,3
 8001db0:	003fc506 	br	8001cc8 <_malloc_r+0x4d8>
 8001db4:	00815504 	movi	r2,1364
 8001db8:	10c01d2e 	bgeu	r2,r3,8001e30 <_malloc_r+0x640>
 8001dbc:	01801f84 	movi	r6,126
 8001dc0:	0080fc04 	movi	r2,1008
 8001dc4:	003eb706 	br	80018a4 <_malloc_r+0xb4>
 8001dc8:	00800204 	movi	r2,8
 8001dcc:	10cbc83a 	sub	r5,r2,r3
 8001dd0:	2169883a 	add	r20,r4,r5
 8001dd4:	003f9e06 	br	8001c50 <_malloc_r+0x460>
 8001dd8:	00bffe04 	movi	r2,-8
 8001ddc:	a93ffd04 	addi	r4,r21,-12
 8001de0:	2088703a 	and	r4,r4,r2
 8001de4:	b10b883a 	add	r5,r22,r4
 8001de8:	00c00144 	movi	r3,5
 8001dec:	28c00215 	stw	r3,8(r5)
 8001df0:	28c00115 	stw	r3,4(r5)
 8001df4:	b0800117 	ldw	r2,4(r22)
 8001df8:	1080004c 	andi	r2,r2,1
 8001dfc:	2084b03a 	or	r2,r4,r2
 8001e00:	b0800115 	stw	r2,4(r22)
 8001e04:	313fdd2e 	bgeu	r6,r4,8001d7c <_malloc_r+0x58c>
 8001e08:	b1400204 	addi	r5,r22,8
 8001e0c:	9009883a 	mov	r4,r18
 8001e10:	80030800 	call	8003080 <_free_r>
 8001e14:	e4000217 	ldw	r16,8(fp)
 8001e18:	003fd806 	br	8001d7c <_malloc_r+0x58c>
 8001e1c:	00800504 	movi	r2,20
 8001e20:	11001536 	bltu	r2,r4,8001e78 <_malloc_r+0x688>
 8001e24:	210016c4 	addi	r4,r4,91
 8001e28:	200690fa 	slli	r3,r4,3
 8001e2c:	003fa606 	br	8001cc8 <_malloc_r+0x4d8>
 8001e30:	8804d4ba 	srli	r2,r17,18
 8001e34:	11801f04 	addi	r6,r2,124
 8001e38:	300490fa 	slli	r2,r6,3
 8001e3c:	003e9906 	br	80018a4 <_malloc_r+0xb4>
 8001e40:	2009d0ba 	srai	r4,r4,2
 8001e44:	01420034 	movhi	r5,2048
 8001e48:	295e4b04 	addi	r5,r5,31020
 8001e4c:	00c00044 	movi	r3,1
 8001e50:	28800117 	ldw	r2,4(r5)
 8001e54:	1906983a 	sll	r3,r3,r4
 8001e58:	10c4b03a 	or	r2,r2,r3
 8001e5c:	28800115 	stw	r2,4(r5)
 8001e60:	003fa306 	br	8001cf0 <_malloc_r+0x500>
 8001e64:	0027883a 	mov	r19,zero
 8001e68:	00c00044 	movi	r3,1
 8001e6c:	003f8606 	br	8001c88 <_malloc_r+0x498>
 8001e70:	d1200315 	stw	r4,-32756(gp)
 8001e74:	003f7306 	br	8001c44 <_malloc_r+0x454>
 8001e78:	00801504 	movi	r2,84
 8001e7c:	11001936 	bltu	r2,r4,8001ee4 <_malloc_r+0x6f4>
 8001e80:	2804d33a 	srli	r2,r5,12
 8001e84:	11001b84 	addi	r4,r2,110
 8001e88:	200690fa 	slli	r3,r4,3
 8001e8c:	003f8e06 	br	8001cc8 <_malloc_r+0x4d8>
 8001e90:	480b883a 	mov	r5,r9
 8001e94:	6807883a 	mov	r3,r13
 8001e98:	288000cc 	andi	r2,r5,3
 8001e9c:	18fffe04 	addi	r3,r3,-8
 8001ea0:	297fffc4 	addi	r5,r5,-1
 8001ea4:	10001526 	beq	r2,zero,8001efc <_malloc_r+0x70c>
 8001ea8:	18800217 	ldw	r2,8(r3)
 8001eac:	10fffa26 	beq	r2,r3,8001e98 <_malloc_r+0x6a8>
 8001eb0:	2109883a 	add	r4,r4,r4
 8001eb4:	393f1e36 	bltu	r7,r4,8001b30 <_malloc_r+0x340>
 8001eb8:	203f1d26 	beq	r4,zero,8001b30 <_malloc_r+0x340>
 8001ebc:	21c4703a 	and	r2,r4,r7
 8001ec0:	10000226 	beq	r2,zero,8001ecc <_malloc_r+0x6dc>
 8001ec4:	6013883a 	mov	r9,r12
 8001ec8:	003ee106 	br	8001a50 <_malloc_r+0x260>
 8001ecc:	2109883a 	add	r4,r4,r4
 8001ed0:	3904703a 	and	r2,r7,r4
 8001ed4:	63000104 	addi	r12,r12,4
 8001ed8:	103ffc26 	beq	r2,zero,8001ecc <_malloc_r+0x6dc>
 8001edc:	6013883a 	mov	r9,r12
 8001ee0:	003edb06 	br	8001a50 <_malloc_r+0x260>
 8001ee4:	00805504 	movi	r2,340
 8001ee8:	11000836 	bltu	r2,r4,8001f0c <_malloc_r+0x71c>
 8001eec:	2804d3fa 	srli	r2,r5,15
 8001ef0:	11001dc4 	addi	r4,r2,119
 8001ef4:	200690fa 	slli	r3,r4,3
 8001ef8:	003f7306 	br	8001cc8 <_malloc_r+0x4d8>
 8001efc:	0104303a 	nor	r2,zero,r4
 8001f00:	388e703a 	and	r7,r7,r2
 8001f04:	e1c00115 	stw	r7,4(fp)
 8001f08:	003fe906 	br	8001eb0 <_malloc_r+0x6c0>
 8001f0c:	00815504 	movi	r2,1364
 8001f10:	1100032e 	bgeu	r2,r4,8001f20 <_malloc_r+0x730>
 8001f14:	01001f84 	movi	r4,126
 8001f18:	00c0fc04 	movi	r3,1008
 8001f1c:	003f6a06 	br	8001cc8 <_malloc_r+0x4d8>
 8001f20:	2804d4ba 	srli	r2,r5,18
 8001f24:	11001f04 	addi	r4,r2,124
 8001f28:	200690fa 	slli	r3,r4,3
 8001f2c:	003f6606 	br	8001cc8 <_malloc_r+0x4d8>

08001f30 <memchr>:
 8001f30:	008000c4 	movi	r2,3
 8001f34:	29403fcc 	andi	r5,r5,255
 8001f38:	2007883a 	mov	r3,r4
 8001f3c:	1180022e 	bgeu	r2,r6,8001f48 <memchr+0x18>
 8001f40:	2084703a 	and	r2,r4,r2
 8001f44:	10000b26 	beq	r2,zero,8001f74 <memchr+0x44>
 8001f48:	313fffc4 	addi	r4,r6,-1
 8001f4c:	3000051e 	bne	r6,zero,8001f64 <memchr+0x34>
 8001f50:	00002c06 	br	8002004 <memchr+0xd4>
 8001f54:	213fffc4 	addi	r4,r4,-1
 8001f58:	00bfffc4 	movi	r2,-1
 8001f5c:	18c00044 	addi	r3,r3,1
 8001f60:	20802826 	beq	r4,r2,8002004 <memchr+0xd4>
 8001f64:	18800003 	ldbu	r2,0(r3)
 8001f68:	28bffa1e 	bne	r5,r2,8001f54 <memchr+0x24>
 8001f6c:	1805883a 	mov	r2,r3
 8001f70:	f800283a 	ret
 8001f74:	0011883a 	mov	r8,zero
 8001f78:	0007883a 	mov	r3,zero
 8001f7c:	01c00104 	movi	r7,4
 8001f80:	4004923a 	slli	r2,r8,8
 8001f84:	18c00044 	addi	r3,r3,1
 8001f88:	1151883a 	add	r8,r2,r5
 8001f8c:	19fffc1e 	bne	r3,r7,8001f80 <memchr+0x50>
 8001f90:	02bfbff4 	movhi	r10,65279
 8001f94:	52bfbfc4 	addi	r10,r10,-257
 8001f98:	02602074 	movhi	r9,32897
 8001f9c:	4a602004 	addi	r9,r9,-32640
 8001fa0:	02c000c4 	movi	r11,3
 8001fa4:	20800017 	ldw	r2,0(r4)
 8001fa8:	31bfff04 	addi	r6,r6,-4
 8001fac:	200f883a 	mov	r7,r4
 8001fb0:	1204f03a 	xor	r2,r2,r8
 8001fb4:	1287883a 	add	r3,r2,r10
 8001fb8:	1a46703a 	and	r3,r3,r9
 8001fbc:	0084303a 	nor	r2,zero,r2
 8001fc0:	10c4703a 	and	r2,r2,r3
 8001fc4:	10000b26 	beq	r2,zero,8001ff4 <memchr+0xc4>
 8001fc8:	20800003 	ldbu	r2,0(r4)
 8001fcc:	28800f26 	beq	r5,r2,800200c <memchr+0xdc>
 8001fd0:	20800043 	ldbu	r2,1(r4)
 8001fd4:	21c00044 	addi	r7,r4,1
 8001fd8:	28800c26 	beq	r5,r2,800200c <memchr+0xdc>
 8001fdc:	20800083 	ldbu	r2,2(r4)
 8001fe0:	21c00084 	addi	r7,r4,2
 8001fe4:	28800926 	beq	r5,r2,800200c <memchr+0xdc>
 8001fe8:	208000c3 	ldbu	r2,3(r4)
 8001fec:	21c000c4 	addi	r7,r4,3
 8001ff0:	28800626 	beq	r5,r2,800200c <memchr+0xdc>
 8001ff4:	21000104 	addi	r4,r4,4
 8001ff8:	59bfea36 	bltu	r11,r6,8001fa4 <memchr+0x74>
 8001ffc:	2007883a 	mov	r3,r4
 8002000:	003fd106 	br	8001f48 <memchr+0x18>
 8002004:	0005883a 	mov	r2,zero
 8002008:	f800283a 	ret
 800200c:	3805883a 	mov	r2,r7
 8002010:	f800283a 	ret

08002014 <memcpy>:
 8002014:	01c003c4 	movi	r7,15
 8002018:	2007883a 	mov	r3,r4
 800201c:	3980032e 	bgeu	r7,r6,800202c <memcpy+0x18>
 8002020:	2904b03a 	or	r2,r5,r4
 8002024:	108000cc 	andi	r2,r2,3
 8002028:	10000926 	beq	r2,zero,8002050 <memcpy+0x3c>
 800202c:	30000626 	beq	r6,zero,8002048 <memcpy+0x34>
 8002030:	30cd883a 	add	r6,r6,r3
 8002034:	28800003 	ldbu	r2,0(r5)
 8002038:	29400044 	addi	r5,r5,1
 800203c:	18800005 	stb	r2,0(r3)
 8002040:	18c00044 	addi	r3,r3,1
 8002044:	30fffb1e 	bne	r6,r3,8002034 <memcpy+0x20>
 8002048:	2005883a 	mov	r2,r4
 800204c:	f800283a 	ret
 8002050:	3811883a 	mov	r8,r7
 8002054:	200f883a 	mov	r7,r4
 8002058:	28c00017 	ldw	r3,0(r5)
 800205c:	31bffc04 	addi	r6,r6,-16
 8002060:	38c00015 	stw	r3,0(r7)
 8002064:	28800117 	ldw	r2,4(r5)
 8002068:	38800115 	stw	r2,4(r7)
 800206c:	28c00217 	ldw	r3,8(r5)
 8002070:	38c00215 	stw	r3,8(r7)
 8002074:	28800317 	ldw	r2,12(r5)
 8002078:	29400404 	addi	r5,r5,16
 800207c:	38800315 	stw	r2,12(r7)
 8002080:	39c00404 	addi	r7,r7,16
 8002084:	41bff436 	bltu	r8,r6,8002058 <memcpy+0x44>
 8002088:	008000c4 	movi	r2,3
 800208c:	1180072e 	bgeu	r2,r6,80020ac <memcpy+0x98>
 8002090:	1007883a 	mov	r3,r2
 8002094:	28800017 	ldw	r2,0(r5)
 8002098:	31bfff04 	addi	r6,r6,-4
 800209c:	29400104 	addi	r5,r5,4
 80020a0:	38800015 	stw	r2,0(r7)
 80020a4:	39c00104 	addi	r7,r7,4
 80020a8:	19bffa36 	bltu	r3,r6,8002094 <memcpy+0x80>
 80020ac:	3807883a 	mov	r3,r7
 80020b0:	003fde06 	br	800202c <memcpy+0x18>

080020b4 <memmove>:
 80020b4:	2807883a 	mov	r3,r5
 80020b8:	2011883a 	mov	r8,r4
 80020bc:	29000c2e 	bgeu	r5,r4,80020f0 <memmove+0x3c>
 80020c0:	298f883a 	add	r7,r5,r6
 80020c4:	21c00a2e 	bgeu	r4,r7,80020f0 <memmove+0x3c>
 80020c8:	30000726 	beq	r6,zero,80020e8 <memmove+0x34>
 80020cc:	2187883a 	add	r3,r4,r6
 80020d0:	198dc83a 	sub	r6,r3,r6
 80020d4:	39ffffc4 	addi	r7,r7,-1
 80020d8:	38800003 	ldbu	r2,0(r7)
 80020dc:	18ffffc4 	addi	r3,r3,-1
 80020e0:	18800005 	stb	r2,0(r3)
 80020e4:	19bffb1e 	bne	r3,r6,80020d4 <memmove+0x20>
 80020e8:	2005883a 	mov	r2,r4
 80020ec:	f800283a 	ret
 80020f0:	01c003c4 	movi	r7,15
 80020f4:	39800a36 	bltu	r7,r6,8002120 <memmove+0x6c>
 80020f8:	303ffb26 	beq	r6,zero,80020e8 <memmove+0x34>
 80020fc:	400f883a 	mov	r7,r8
 8002100:	320d883a 	add	r6,r6,r8
 8002104:	28800003 	ldbu	r2,0(r5)
 8002108:	29400044 	addi	r5,r5,1
 800210c:	38800005 	stb	r2,0(r7)
 8002110:	39c00044 	addi	r7,r7,1
 8002114:	39bffb1e 	bne	r7,r6,8002104 <memmove+0x50>
 8002118:	2005883a 	mov	r2,r4
 800211c:	f800283a 	ret
 8002120:	1904b03a 	or	r2,r3,r4
 8002124:	108000cc 	andi	r2,r2,3
 8002128:	103ff31e 	bne	r2,zero,80020f8 <memmove+0x44>
 800212c:	3811883a 	mov	r8,r7
 8002130:	180b883a 	mov	r5,r3
 8002134:	200f883a 	mov	r7,r4
 8002138:	28c00017 	ldw	r3,0(r5)
 800213c:	31bffc04 	addi	r6,r6,-16
 8002140:	38c00015 	stw	r3,0(r7)
 8002144:	28800117 	ldw	r2,4(r5)
 8002148:	38800115 	stw	r2,4(r7)
 800214c:	28c00217 	ldw	r3,8(r5)
 8002150:	38c00215 	stw	r3,8(r7)
 8002154:	28800317 	ldw	r2,12(r5)
 8002158:	29400404 	addi	r5,r5,16
 800215c:	38800315 	stw	r2,12(r7)
 8002160:	39c00404 	addi	r7,r7,16
 8002164:	41bff436 	bltu	r8,r6,8002138 <memmove+0x84>
 8002168:	008000c4 	movi	r2,3
 800216c:	1180072e 	bgeu	r2,r6,800218c <memmove+0xd8>
 8002170:	1007883a 	mov	r3,r2
 8002174:	28800017 	ldw	r2,0(r5)
 8002178:	31bfff04 	addi	r6,r6,-4
 800217c:	29400104 	addi	r5,r5,4
 8002180:	38800015 	stw	r2,0(r7)
 8002184:	39c00104 	addi	r7,r7,4
 8002188:	19bffa36 	bltu	r3,r6,8002174 <memmove+0xc0>
 800218c:	3811883a 	mov	r8,r7
 8002190:	003fd906 	br	80020f8 <memmove+0x44>

08002194 <memset>:
 8002194:	008000c4 	movi	r2,3
 8002198:	29403fcc 	andi	r5,r5,255
 800219c:	2007883a 	mov	r3,r4
 80021a0:	1180022e 	bgeu	r2,r6,80021ac <memset+0x18>
 80021a4:	2084703a 	and	r2,r4,r2
 80021a8:	10000826 	beq	r2,zero,80021cc <memset+0x38>
 80021ac:	30000526 	beq	r6,zero,80021c4 <memset+0x30>
 80021b0:	2805883a 	mov	r2,r5
 80021b4:	30cd883a 	add	r6,r6,r3
 80021b8:	18800005 	stb	r2,0(r3)
 80021bc:	18c00044 	addi	r3,r3,1
 80021c0:	19bffd1e 	bne	r3,r6,80021b8 <memset+0x24>
 80021c4:	2005883a 	mov	r2,r4
 80021c8:	f800283a 	ret
 80021cc:	2804923a 	slli	r2,r5,8
 80021d0:	020003c4 	movi	r8,15
 80021d4:	200f883a 	mov	r7,r4
 80021d8:	2884b03a 	or	r2,r5,r2
 80021dc:	1006943a 	slli	r3,r2,16
 80021e0:	10c6b03a 	or	r3,r2,r3
 80021e4:	41800a2e 	bgeu	r8,r6,8002210 <memset+0x7c>
 80021e8:	4005883a 	mov	r2,r8
 80021ec:	31bffc04 	addi	r6,r6,-16
 80021f0:	38c00015 	stw	r3,0(r7)
 80021f4:	38c00115 	stw	r3,4(r7)
 80021f8:	38c00215 	stw	r3,8(r7)
 80021fc:	38c00315 	stw	r3,12(r7)
 8002200:	39c00404 	addi	r7,r7,16
 8002204:	11bff936 	bltu	r2,r6,80021ec <memset+0x58>
 8002208:	008000c4 	movi	r2,3
 800220c:	1180052e 	bgeu	r2,r6,8002224 <memset+0x90>
 8002210:	31bfff04 	addi	r6,r6,-4
 8002214:	008000c4 	movi	r2,3
 8002218:	38c00015 	stw	r3,0(r7)
 800221c:	39c00104 	addi	r7,r7,4
 8002220:	11bffb36 	bltu	r2,r6,8002210 <memset+0x7c>
 8002224:	3807883a 	mov	r3,r7
 8002228:	003fe006 	br	80021ac <memset+0x18>

0800222c <_realloc_r>:
 800222c:	defff404 	addi	sp,sp,-48
 8002230:	dd800815 	stw	r22,32(sp)
 8002234:	dc800415 	stw	r18,16(sp)
 8002238:	dc400315 	stw	r17,12(sp)
 800223c:	dfc00b15 	stw	ra,44(sp)
 8002240:	df000a15 	stw	fp,40(sp)
 8002244:	ddc00915 	stw	r23,36(sp)
 8002248:	dd400715 	stw	r21,28(sp)
 800224c:	dd000615 	stw	r20,24(sp)
 8002250:	dcc00515 	stw	r19,20(sp)
 8002254:	dc000215 	stw	r16,8(sp)
 8002258:	2825883a 	mov	r18,r5
 800225c:	3023883a 	mov	r17,r6
 8002260:	202d883a 	mov	r22,r4
 8002264:	2800c926 	beq	r5,zero,800258c <_realloc_r+0x360>
 8002268:	8003e180 	call	8003e18 <__malloc_lock>
 800226c:	943ffe04 	addi	r16,r18,-8
 8002270:	88c002c4 	addi	r3,r17,11
 8002274:	00800584 	movi	r2,22
 8002278:	82000117 	ldw	r8,4(r16)
 800227c:	10c01b2e 	bgeu	r2,r3,80022ec <_realloc_r+0xc0>
 8002280:	00bffe04 	movi	r2,-8
 8002284:	188e703a 	and	r7,r3,r2
 8002288:	3839883a 	mov	fp,r7
 800228c:	38001a16 	blt	r7,zero,80022f8 <_realloc_r+0xcc>
 8002290:	e4401936 	bltu	fp,r17,80022f8 <_realloc_r+0xcc>
 8002294:	013fff04 	movi	r4,-4
 8002298:	4126703a 	and	r19,r8,r4
 800229c:	99c02616 	blt	r19,r7,8002338 <_realloc_r+0x10c>
 80022a0:	802b883a 	mov	r21,r16
 80022a4:	9829883a 	mov	r20,r19
 80022a8:	84000204 	addi	r16,r16,8
 80022ac:	a80f883a 	mov	r7,r21
 80022b0:	a70dc83a 	sub	r6,r20,fp
 80022b4:	008003c4 	movi	r2,15
 80022b8:	1180c136 	bltu	r2,r6,80025c0 <_realloc_r+0x394>
 80022bc:	38800117 	ldw	r2,4(r7)
 80022c0:	a549883a 	add	r4,r20,r21
 80022c4:	1080004c 	andi	r2,r2,1
 80022c8:	a084b03a 	or	r2,r20,r2
 80022cc:	38800115 	stw	r2,4(r7)
 80022d0:	20c00117 	ldw	r3,4(r4)
 80022d4:	18c00054 	ori	r3,r3,1
 80022d8:	20c00115 	stw	r3,4(r4)
 80022dc:	b009883a 	mov	r4,r22
 80022e0:	8003e380 	call	8003e38 <__malloc_unlock>
 80022e4:	8023883a 	mov	r17,r16
 80022e8:	00000606 	br	8002304 <_realloc_r+0xd8>
 80022ec:	01c00404 	movi	r7,16
 80022f0:	3839883a 	mov	fp,r7
 80022f4:	e47fe72e 	bgeu	fp,r17,8002294 <_realloc_r+0x68>
 80022f8:	00800304 	movi	r2,12
 80022fc:	0023883a 	mov	r17,zero
 8002300:	b0800015 	stw	r2,0(r22)
 8002304:	8805883a 	mov	r2,r17
 8002308:	dfc00b17 	ldw	ra,44(sp)
 800230c:	df000a17 	ldw	fp,40(sp)
 8002310:	ddc00917 	ldw	r23,36(sp)
 8002314:	dd800817 	ldw	r22,32(sp)
 8002318:	dd400717 	ldw	r21,28(sp)
 800231c:	dd000617 	ldw	r20,24(sp)
 8002320:	dcc00517 	ldw	r19,20(sp)
 8002324:	dc800417 	ldw	r18,16(sp)
 8002328:	dc400317 	ldw	r17,12(sp)
 800232c:	dc000217 	ldw	r16,8(sp)
 8002330:	dec00c04 	addi	sp,sp,48
 8002334:	f800283a 	ret
 8002338:	00820034 	movhi	r2,2048
 800233c:	109e4b04 	addi	r2,r2,31020
 8002340:	12400217 	ldw	r9,8(r2)
 8002344:	84cd883a 	add	r6,r16,r19
 8002348:	802b883a 	mov	r21,r16
 800234c:	3240b926 	beq	r6,r9,8002634 <_realloc_r+0x408>
 8002350:	31400117 	ldw	r5,4(r6)
 8002354:	00bfff84 	movi	r2,-2
 8002358:	2884703a 	and	r2,r5,r2
 800235c:	1185883a 	add	r2,r2,r6
 8002360:	10c00117 	ldw	r3,4(r2)
 8002364:	18c0004c 	andi	r3,r3,1
 8002368:	1807003a 	cmpeq	r3,r3,zero
 800236c:	1800a326 	beq	r3,zero,80025fc <_realloc_r+0x3d0>
 8002370:	2908703a 	and	r4,r5,r4
 8002374:	9929883a 	add	r20,r19,r4
 8002378:	a1c0a30e 	bge	r20,r7,8002608 <_realloc_r+0x3dc>
 800237c:	4080004c 	andi	r2,r8,1
 8002380:	1000551e 	bne	r2,zero,80024d8 <_realloc_r+0x2ac>
 8002384:	80800017 	ldw	r2,0(r16)
 8002388:	80afc83a 	sub	r23,r16,r2
 800238c:	b8c00117 	ldw	r3,4(r23)
 8002390:	00bfff04 	movi	r2,-4
 8002394:	1884703a 	and	r2,r3,r2
 8002398:	30002e26 	beq	r6,zero,8002454 <_realloc_r+0x228>
 800239c:	3240b926 	beq	r6,r9,8002684 <_realloc_r+0x458>
 80023a0:	98a9883a 	add	r20,r19,r2
 80023a4:	2509883a 	add	r4,r4,r20
 80023a8:	d9000015 	stw	r4,0(sp)
 80023ac:	21c02a16 	blt	r4,r7,8002458 <_realloc_r+0x22c>
 80023b0:	30800317 	ldw	r2,12(r6)
 80023b4:	30c00217 	ldw	r3,8(r6)
 80023b8:	01400904 	movi	r5,36
 80023bc:	99bfff04 	addi	r6,r19,-4
 80023c0:	18800315 	stw	r2,12(r3)
 80023c4:	10c00215 	stw	r3,8(r2)
 80023c8:	b9000317 	ldw	r4,12(r23)
 80023cc:	b8800217 	ldw	r2,8(r23)
 80023d0:	b82b883a 	mov	r21,r23
 80023d4:	bc000204 	addi	r16,r23,8
 80023d8:	20800215 	stw	r2,8(r4)
 80023dc:	11000315 	stw	r4,12(r2)
 80023e0:	2980e436 	bltu	r5,r6,8002774 <_realloc_r+0x548>
 80023e4:	008004c4 	movi	r2,19
 80023e8:	9009883a 	mov	r4,r18
 80023ec:	8011883a 	mov	r8,r16
 80023f0:	11800f2e 	bgeu	r2,r6,8002430 <_realloc_r+0x204>
 80023f4:	90800017 	ldw	r2,0(r18)
 80023f8:	ba000404 	addi	r8,r23,16
 80023fc:	91000204 	addi	r4,r18,8
 8002400:	b8800215 	stw	r2,8(r23)
 8002404:	90c00117 	ldw	r3,4(r18)
 8002408:	008006c4 	movi	r2,27
 800240c:	b8c00315 	stw	r3,12(r23)
 8002410:	1180072e 	bgeu	r2,r6,8002430 <_realloc_r+0x204>
 8002414:	90c00217 	ldw	r3,8(r18)
 8002418:	ba000604 	addi	r8,r23,24
 800241c:	91000404 	addi	r4,r18,16
 8002420:	b8c00415 	stw	r3,16(r23)
 8002424:	90800317 	ldw	r2,12(r18)
 8002428:	b8800515 	stw	r2,20(r23)
 800242c:	3140e726 	beq	r6,r5,80027cc <_realloc_r+0x5a0>
 8002430:	20800017 	ldw	r2,0(r4)
 8002434:	dd000017 	ldw	r20,0(sp)
 8002438:	b80f883a 	mov	r7,r23
 800243c:	40800015 	stw	r2,0(r8)
 8002440:	20c00117 	ldw	r3,4(r4)
 8002444:	40c00115 	stw	r3,4(r8)
 8002448:	20800217 	ldw	r2,8(r4)
 800244c:	40800215 	stw	r2,8(r8)
 8002450:	003f9706 	br	80022b0 <_realloc_r+0x84>
 8002454:	98a9883a 	add	r20,r19,r2
 8002458:	a1c01f16 	blt	r20,r7,80024d8 <_realloc_r+0x2ac>
 800245c:	b8c00317 	ldw	r3,12(r23)
 8002460:	b8800217 	ldw	r2,8(r23)
 8002464:	99bfff04 	addi	r6,r19,-4
 8002468:	01400904 	movi	r5,36
 800246c:	b82b883a 	mov	r21,r23
 8002470:	18800215 	stw	r2,8(r3)
 8002474:	10c00315 	stw	r3,12(r2)
 8002478:	bc000204 	addi	r16,r23,8
 800247c:	2980c336 	bltu	r5,r6,800278c <_realloc_r+0x560>
 8002480:	008004c4 	movi	r2,19
 8002484:	9009883a 	mov	r4,r18
 8002488:	8011883a 	mov	r8,r16
 800248c:	11800f2e 	bgeu	r2,r6,80024cc <_realloc_r+0x2a0>
 8002490:	90800017 	ldw	r2,0(r18)
 8002494:	ba000404 	addi	r8,r23,16
 8002498:	91000204 	addi	r4,r18,8
 800249c:	b8800215 	stw	r2,8(r23)
 80024a0:	90c00117 	ldw	r3,4(r18)
 80024a4:	008006c4 	movi	r2,27
 80024a8:	b8c00315 	stw	r3,12(r23)
 80024ac:	1180072e 	bgeu	r2,r6,80024cc <_realloc_r+0x2a0>
 80024b0:	90c00217 	ldw	r3,8(r18)
 80024b4:	ba000604 	addi	r8,r23,24
 80024b8:	91000404 	addi	r4,r18,16
 80024bc:	b8c00415 	stw	r3,16(r23)
 80024c0:	90800317 	ldw	r2,12(r18)
 80024c4:	b8800515 	stw	r2,20(r23)
 80024c8:	3140c726 	beq	r6,r5,80027e8 <_realloc_r+0x5bc>
 80024cc:	20800017 	ldw	r2,0(r4)
 80024d0:	b80f883a 	mov	r7,r23
 80024d4:	003fd906 	br	800243c <_realloc_r+0x210>
 80024d8:	880b883a 	mov	r5,r17
 80024dc:	b009883a 	mov	r4,r22
 80024e0:	80017f00 	call	80017f0 <_malloc_r>
 80024e4:	1023883a 	mov	r17,r2
 80024e8:	10002526 	beq	r2,zero,8002580 <_realloc_r+0x354>
 80024ec:	80800117 	ldw	r2,4(r16)
 80024f0:	00ffff84 	movi	r3,-2
 80024f4:	893ffe04 	addi	r4,r17,-8
 80024f8:	10c4703a 	and	r2,r2,r3
 80024fc:	8085883a 	add	r2,r16,r2
 8002500:	20809526 	beq	r4,r2,8002758 <_realloc_r+0x52c>
 8002504:	99bfff04 	addi	r6,r19,-4
 8002508:	01c00904 	movi	r7,36
 800250c:	39804536 	bltu	r7,r6,8002624 <_realloc_r+0x3f8>
 8002510:	008004c4 	movi	r2,19
 8002514:	9009883a 	mov	r4,r18
 8002518:	880b883a 	mov	r5,r17
 800251c:	11800f2e 	bgeu	r2,r6,800255c <_realloc_r+0x330>
 8002520:	90800017 	ldw	r2,0(r18)
 8002524:	89400204 	addi	r5,r17,8
 8002528:	91000204 	addi	r4,r18,8
 800252c:	88800015 	stw	r2,0(r17)
 8002530:	90c00117 	ldw	r3,4(r18)
 8002534:	008006c4 	movi	r2,27
 8002538:	88c00115 	stw	r3,4(r17)
 800253c:	1180072e 	bgeu	r2,r6,800255c <_realloc_r+0x330>
 8002540:	90c00217 	ldw	r3,8(r18)
 8002544:	89400404 	addi	r5,r17,16
 8002548:	91000404 	addi	r4,r18,16
 800254c:	88c00215 	stw	r3,8(r17)
 8002550:	90800317 	ldw	r2,12(r18)
 8002554:	88800315 	stw	r2,12(r17)
 8002558:	31c09126 	beq	r6,r7,80027a0 <_realloc_r+0x574>
 800255c:	20800017 	ldw	r2,0(r4)
 8002560:	28800015 	stw	r2,0(r5)
 8002564:	20c00117 	ldw	r3,4(r4)
 8002568:	28c00115 	stw	r3,4(r5)
 800256c:	20800217 	ldw	r2,8(r4)
 8002570:	28800215 	stw	r2,8(r5)
 8002574:	900b883a 	mov	r5,r18
 8002578:	b009883a 	mov	r4,r22
 800257c:	80030800 	call	8003080 <_free_r>
 8002580:	b009883a 	mov	r4,r22
 8002584:	8003e380 	call	8003e38 <__malloc_unlock>
 8002588:	003f5e06 	br	8002304 <_realloc_r+0xd8>
 800258c:	300b883a 	mov	r5,r6
 8002590:	dfc00b17 	ldw	ra,44(sp)
 8002594:	df000a17 	ldw	fp,40(sp)
 8002598:	ddc00917 	ldw	r23,36(sp)
 800259c:	dd800817 	ldw	r22,32(sp)
 80025a0:	dd400717 	ldw	r21,28(sp)
 80025a4:	dd000617 	ldw	r20,24(sp)
 80025a8:	dcc00517 	ldw	r19,20(sp)
 80025ac:	dc800417 	ldw	r18,16(sp)
 80025b0:	dc400317 	ldw	r17,12(sp)
 80025b4:	dc000217 	ldw	r16,8(sp)
 80025b8:	dec00c04 	addi	sp,sp,48
 80025bc:	80017f01 	jmpi	80017f0 <_malloc_r>
 80025c0:	38800117 	ldw	r2,4(r7)
 80025c4:	e54b883a 	add	r5,fp,r21
 80025c8:	31000054 	ori	r4,r6,1
 80025cc:	1080004c 	andi	r2,r2,1
 80025d0:	1704b03a 	or	r2,r2,fp
 80025d4:	38800115 	stw	r2,4(r7)
 80025d8:	29000115 	stw	r4,4(r5)
 80025dc:	2987883a 	add	r3,r5,r6
 80025e0:	18800117 	ldw	r2,4(r3)
 80025e4:	29400204 	addi	r5,r5,8
 80025e8:	b009883a 	mov	r4,r22
 80025ec:	10800054 	ori	r2,r2,1
 80025f0:	18800115 	stw	r2,4(r3)
 80025f4:	80030800 	call	8003080 <_free_r>
 80025f8:	003f3806 	br	80022dc <_realloc_r+0xb0>
 80025fc:	000d883a 	mov	r6,zero
 8002600:	0009883a 	mov	r4,zero
 8002604:	003f5d06 	br	800237c <_realloc_r+0x150>
 8002608:	30c00217 	ldw	r3,8(r6)
 800260c:	30800317 	ldw	r2,12(r6)
 8002610:	800f883a 	mov	r7,r16
 8002614:	84000204 	addi	r16,r16,8
 8002618:	10c00215 	stw	r3,8(r2)
 800261c:	18800315 	stw	r2,12(r3)
 8002620:	003f2306 	br	80022b0 <_realloc_r+0x84>
 8002624:	8809883a 	mov	r4,r17
 8002628:	900b883a 	mov	r5,r18
 800262c:	80020b40 	call	80020b4 <memmove>
 8002630:	003fd006 	br	8002574 <_realloc_r+0x348>
 8002634:	30800117 	ldw	r2,4(r6)
 8002638:	e0c00404 	addi	r3,fp,16
 800263c:	1108703a 	and	r4,r2,r4
 8002640:	9905883a 	add	r2,r19,r4
 8002644:	10ff4d16 	blt	r2,r3,800237c <_realloc_r+0x150>
 8002648:	1705c83a 	sub	r2,r2,fp
 800264c:	870b883a 	add	r5,r16,fp
 8002650:	10800054 	ori	r2,r2,1
 8002654:	28800115 	stw	r2,4(r5)
 8002658:	80c00117 	ldw	r3,4(r16)
 800265c:	00820034 	movhi	r2,2048
 8002660:	109e4b04 	addi	r2,r2,31020
 8002664:	b009883a 	mov	r4,r22
 8002668:	18c0004c 	andi	r3,r3,1
 800266c:	e0c6b03a 	or	r3,fp,r3
 8002670:	11400215 	stw	r5,8(r2)
 8002674:	80c00115 	stw	r3,4(r16)
 8002678:	8003e380 	call	8003e38 <__malloc_unlock>
 800267c:	84400204 	addi	r17,r16,8
 8002680:	003f2006 	br	8002304 <_realloc_r+0xd8>
 8002684:	98a9883a 	add	r20,r19,r2
 8002688:	2509883a 	add	r4,r4,r20
 800268c:	e0800404 	addi	r2,fp,16
 8002690:	d9000115 	stw	r4,4(sp)
 8002694:	20bf7016 	blt	r4,r2,8002458 <_realloc_r+0x22c>
 8002698:	b8c00317 	ldw	r3,12(r23)
 800269c:	b8800217 	ldw	r2,8(r23)
 80026a0:	99bfff04 	addi	r6,r19,-4
 80026a4:	01400904 	movi	r5,36
 80026a8:	18800215 	stw	r2,8(r3)
 80026ac:	10c00315 	stw	r3,12(r2)
 80026b0:	bc400204 	addi	r17,r23,8
 80026b4:	29804136 	bltu	r5,r6,80027bc <_realloc_r+0x590>
 80026b8:	008004c4 	movi	r2,19
 80026bc:	9009883a 	mov	r4,r18
 80026c0:	880f883a 	mov	r7,r17
 80026c4:	11800f2e 	bgeu	r2,r6,8002704 <_realloc_r+0x4d8>
 80026c8:	90800017 	ldw	r2,0(r18)
 80026cc:	b9c00404 	addi	r7,r23,16
 80026d0:	91000204 	addi	r4,r18,8
 80026d4:	b8800215 	stw	r2,8(r23)
 80026d8:	90c00117 	ldw	r3,4(r18)
 80026dc:	008006c4 	movi	r2,27
 80026e0:	b8c00315 	stw	r3,12(r23)
 80026e4:	1180072e 	bgeu	r2,r6,8002704 <_realloc_r+0x4d8>
 80026e8:	90c00217 	ldw	r3,8(r18)
 80026ec:	b9c00604 	addi	r7,r23,24
 80026f0:	91000404 	addi	r4,r18,16
 80026f4:	b8c00415 	stw	r3,16(r23)
 80026f8:	90800317 	ldw	r2,12(r18)
 80026fc:	b8800515 	stw	r2,20(r23)
 8002700:	31404026 	beq	r6,r5,8002804 <_realloc_r+0x5d8>
 8002704:	20800017 	ldw	r2,0(r4)
 8002708:	38800015 	stw	r2,0(r7)
 800270c:	20c00117 	ldw	r3,4(r4)
 8002710:	38c00115 	stw	r3,4(r7)
 8002714:	20800217 	ldw	r2,8(r4)
 8002718:	38800215 	stw	r2,8(r7)
 800271c:	d8c00117 	ldw	r3,4(sp)
 8002720:	bf0b883a 	add	r5,r23,fp
 8002724:	b009883a 	mov	r4,r22
 8002728:	1f05c83a 	sub	r2,r3,fp
 800272c:	10800054 	ori	r2,r2,1
 8002730:	28800115 	stw	r2,4(r5)
 8002734:	b8c00117 	ldw	r3,4(r23)
 8002738:	00820034 	movhi	r2,2048
 800273c:	109e4b04 	addi	r2,r2,31020
 8002740:	11400215 	stw	r5,8(r2)
 8002744:	18c0004c 	andi	r3,r3,1
 8002748:	e0c6b03a 	or	r3,fp,r3
 800274c:	b8c00115 	stw	r3,4(r23)
 8002750:	8003e380 	call	8003e38 <__malloc_unlock>
 8002754:	003eeb06 	br	8002304 <_realloc_r+0xd8>
 8002758:	20800117 	ldw	r2,4(r4)
 800275c:	00ffff04 	movi	r3,-4
 8002760:	800f883a 	mov	r7,r16
 8002764:	10c4703a 	and	r2,r2,r3
 8002768:	98a9883a 	add	r20,r19,r2
 800276c:	84000204 	addi	r16,r16,8
 8002770:	003ecf06 	br	80022b0 <_realloc_r+0x84>
 8002774:	900b883a 	mov	r5,r18
 8002778:	8009883a 	mov	r4,r16
 800277c:	80020b40 	call	80020b4 <memmove>
 8002780:	dd000017 	ldw	r20,0(sp)
 8002784:	b80f883a 	mov	r7,r23
 8002788:	003ec906 	br	80022b0 <_realloc_r+0x84>
 800278c:	900b883a 	mov	r5,r18
 8002790:	8009883a 	mov	r4,r16
 8002794:	80020b40 	call	80020b4 <memmove>
 8002798:	b80f883a 	mov	r7,r23
 800279c:	003ec406 	br	80022b0 <_realloc_r+0x84>
 80027a0:	90c00417 	ldw	r3,16(r18)
 80027a4:	89400604 	addi	r5,r17,24
 80027a8:	91000604 	addi	r4,r18,24
 80027ac:	88c00415 	stw	r3,16(r17)
 80027b0:	90800517 	ldw	r2,20(r18)
 80027b4:	88800515 	stw	r2,20(r17)
 80027b8:	003f6806 	br	800255c <_realloc_r+0x330>
 80027bc:	900b883a 	mov	r5,r18
 80027c0:	8809883a 	mov	r4,r17
 80027c4:	80020b40 	call	80020b4 <memmove>
 80027c8:	003fd406 	br	800271c <_realloc_r+0x4f0>
 80027cc:	90c00417 	ldw	r3,16(r18)
 80027d0:	91000604 	addi	r4,r18,24
 80027d4:	ba000804 	addi	r8,r23,32
 80027d8:	b8c00615 	stw	r3,24(r23)
 80027dc:	90800517 	ldw	r2,20(r18)
 80027e0:	b8800715 	stw	r2,28(r23)
 80027e4:	003f1206 	br	8002430 <_realloc_r+0x204>
 80027e8:	90c00417 	ldw	r3,16(r18)
 80027ec:	91000604 	addi	r4,r18,24
 80027f0:	ba000804 	addi	r8,r23,32
 80027f4:	b8c00615 	stw	r3,24(r23)
 80027f8:	90800517 	ldw	r2,20(r18)
 80027fc:	b8800715 	stw	r2,28(r23)
 8002800:	003f3206 	br	80024cc <_realloc_r+0x2a0>
 8002804:	90c00417 	ldw	r3,16(r18)
 8002808:	91000604 	addi	r4,r18,24
 800280c:	b9c00804 	addi	r7,r23,32
 8002810:	b8c00615 	stw	r3,24(r23)
 8002814:	90800517 	ldw	r2,20(r18)
 8002818:	b8800715 	stw	r2,28(r23)
 800281c:	003fb906 	br	8002704 <_realloc_r+0x4d8>

08002820 <_sbrk_r>:
 8002820:	defffd04 	addi	sp,sp,-12
 8002824:	dc000015 	stw	r16,0(sp)
 8002828:	04020074 	movhi	r16,2049
 800282c:	842b0604 	addi	r16,r16,-21480
 8002830:	dc400115 	stw	r17,4(sp)
 8002834:	80000015 	stw	zero,0(r16)
 8002838:	2023883a 	mov	r17,r4
 800283c:	2809883a 	mov	r4,r5
 8002840:	dfc00215 	stw	ra,8(sp)
 8002844:	80040380 	call	8004038 <sbrk>
 8002848:	1007883a 	mov	r3,r2
 800284c:	00bfffc4 	movi	r2,-1
 8002850:	18800626 	beq	r3,r2,800286c <_sbrk_r+0x4c>
 8002854:	1805883a 	mov	r2,r3
 8002858:	dfc00217 	ldw	ra,8(sp)
 800285c:	dc400117 	ldw	r17,4(sp)
 8002860:	dc000017 	ldw	r16,0(sp)
 8002864:	dec00304 	addi	sp,sp,12
 8002868:	f800283a 	ret
 800286c:	80800017 	ldw	r2,0(r16)
 8002870:	103ff826 	beq	r2,zero,8002854 <_sbrk_r+0x34>
 8002874:	88800015 	stw	r2,0(r17)
 8002878:	1805883a 	mov	r2,r3
 800287c:	dfc00217 	ldw	ra,8(sp)
 8002880:	dc400117 	ldw	r17,4(sp)
 8002884:	dc000017 	ldw	r16,0(sp)
 8002888:	dec00304 	addi	sp,sp,12
 800288c:	f800283a 	ret

08002890 <__sclose>:
 8002890:	2940038f 	ldh	r5,14(r5)
 8002894:	8002b901 	jmpi	8002b90 <_close_r>

08002898 <__sseek>:
 8002898:	defffe04 	addi	sp,sp,-8
 800289c:	dc000015 	stw	r16,0(sp)
 80028a0:	2821883a 	mov	r16,r5
 80028a4:	2940038f 	ldh	r5,14(r5)
 80028a8:	dfc00115 	stw	ra,4(sp)
 80028ac:	80033940 	call	8003394 <_lseek_r>
 80028b0:	1007883a 	mov	r3,r2
 80028b4:	00bfffc4 	movi	r2,-1
 80028b8:	18800926 	beq	r3,r2,80028e0 <__sseek+0x48>
 80028bc:	8080030b 	ldhu	r2,12(r16)
 80028c0:	80c01415 	stw	r3,80(r16)
 80028c4:	10840014 	ori	r2,r2,4096
 80028c8:	8080030d 	sth	r2,12(r16)
 80028cc:	1805883a 	mov	r2,r3
 80028d0:	dfc00117 	ldw	ra,4(sp)
 80028d4:	dc000017 	ldw	r16,0(sp)
 80028d8:	dec00204 	addi	sp,sp,8
 80028dc:	f800283a 	ret
 80028e0:	8080030b 	ldhu	r2,12(r16)
 80028e4:	10bbffcc 	andi	r2,r2,61439
 80028e8:	8080030d 	sth	r2,12(r16)
 80028ec:	1805883a 	mov	r2,r3
 80028f0:	dfc00117 	ldw	ra,4(sp)
 80028f4:	dc000017 	ldw	r16,0(sp)
 80028f8:	dec00204 	addi	sp,sp,8
 80028fc:	f800283a 	ret

08002900 <__swrite>:
 8002900:	2880030b 	ldhu	r2,12(r5)
 8002904:	defffb04 	addi	sp,sp,-20
 8002908:	dcc00315 	stw	r19,12(sp)
 800290c:	1080400c 	andi	r2,r2,256
 8002910:	dc800215 	stw	r18,8(sp)
 8002914:	dc400115 	stw	r17,4(sp)
 8002918:	dc000015 	stw	r16,0(sp)
 800291c:	3027883a 	mov	r19,r6
 8002920:	3825883a 	mov	r18,r7
 8002924:	dfc00415 	stw	ra,16(sp)
 8002928:	2821883a 	mov	r16,r5
 800292c:	000d883a 	mov	r6,zero
 8002930:	01c00084 	movi	r7,2
 8002934:	2023883a 	mov	r17,r4
 8002938:	10000226 	beq	r2,zero,8002944 <__swrite+0x44>
 800293c:	2940038f 	ldh	r5,14(r5)
 8002940:	80033940 	call	8003394 <_lseek_r>
 8002944:	8080030b 	ldhu	r2,12(r16)
 8002948:	8140038f 	ldh	r5,14(r16)
 800294c:	8809883a 	mov	r4,r17
 8002950:	10bbffcc 	andi	r2,r2,61439
 8002954:	980d883a 	mov	r6,r19
 8002958:	900f883a 	mov	r7,r18
 800295c:	8080030d 	sth	r2,12(r16)
 8002960:	dfc00417 	ldw	ra,16(sp)
 8002964:	dcc00317 	ldw	r19,12(sp)
 8002968:	dc800217 	ldw	r18,8(sp)
 800296c:	dc400117 	ldw	r17,4(sp)
 8002970:	dc000017 	ldw	r16,0(sp)
 8002974:	dec00504 	addi	sp,sp,20
 8002978:	80029dc1 	jmpi	80029dc <_write_r>

0800297c <__sread>:
 800297c:	defffe04 	addi	sp,sp,-8
 8002980:	dc000015 	stw	r16,0(sp)
 8002984:	2821883a 	mov	r16,r5
 8002988:	2940038f 	ldh	r5,14(r5)
 800298c:	dfc00115 	stw	ra,4(sp)
 8002990:	80035a00 	call	80035a0 <_read_r>
 8002994:	1007883a 	mov	r3,r2
 8002998:	10000816 	blt	r2,zero,80029bc <__sread+0x40>
 800299c:	80801417 	ldw	r2,80(r16)
 80029a0:	10c5883a 	add	r2,r2,r3
 80029a4:	80801415 	stw	r2,80(r16)
 80029a8:	1805883a 	mov	r2,r3
 80029ac:	dfc00117 	ldw	ra,4(sp)
 80029b0:	dc000017 	ldw	r16,0(sp)
 80029b4:	dec00204 	addi	sp,sp,8
 80029b8:	f800283a 	ret
 80029bc:	8080030b 	ldhu	r2,12(r16)
 80029c0:	10bbffcc 	andi	r2,r2,61439
 80029c4:	8080030d 	sth	r2,12(r16)
 80029c8:	1805883a 	mov	r2,r3
 80029cc:	dfc00117 	ldw	ra,4(sp)
 80029d0:	dc000017 	ldw	r16,0(sp)
 80029d4:	dec00204 	addi	sp,sp,8
 80029d8:	f800283a 	ret

080029dc <_write_r>:
 80029dc:	defffd04 	addi	sp,sp,-12
 80029e0:	dc000015 	stw	r16,0(sp)
 80029e4:	04020074 	movhi	r16,2049
 80029e8:	842b0604 	addi	r16,r16,-21480
 80029ec:	dc400115 	stw	r17,4(sp)
 80029f0:	80000015 	stw	zero,0(r16)
 80029f4:	2023883a 	mov	r17,r4
 80029f8:	2809883a 	mov	r4,r5
 80029fc:	300b883a 	mov	r5,r6
 8002a00:	380d883a 	mov	r6,r7
 8002a04:	dfc00215 	stw	ra,8(sp)
 8002a08:	80041240 	call	8004124 <write>
 8002a0c:	1007883a 	mov	r3,r2
 8002a10:	00bfffc4 	movi	r2,-1
 8002a14:	18800626 	beq	r3,r2,8002a30 <_write_r+0x54>
 8002a18:	1805883a 	mov	r2,r3
 8002a1c:	dfc00217 	ldw	ra,8(sp)
 8002a20:	dc400117 	ldw	r17,4(sp)
 8002a24:	dc000017 	ldw	r16,0(sp)
 8002a28:	dec00304 	addi	sp,sp,12
 8002a2c:	f800283a 	ret
 8002a30:	80800017 	ldw	r2,0(r16)
 8002a34:	103ff826 	beq	r2,zero,8002a18 <_write_r+0x3c>
 8002a38:	88800015 	stw	r2,0(r17)
 8002a3c:	1805883a 	mov	r2,r3
 8002a40:	dfc00217 	ldw	ra,8(sp)
 8002a44:	dc400117 	ldw	r17,4(sp)
 8002a48:	dc000017 	ldw	r16,0(sp)
 8002a4c:	dec00304 	addi	sp,sp,12
 8002a50:	f800283a 	ret

08002a54 <__swsetup_r>:
 8002a54:	00820074 	movhi	r2,2049
 8002a58:	10a41704 	addi	r2,r2,-28580
 8002a5c:	10c00017 	ldw	r3,0(r2)
 8002a60:	defffd04 	addi	sp,sp,-12
 8002a64:	dc400115 	stw	r17,4(sp)
 8002a68:	dc000015 	stw	r16,0(sp)
 8002a6c:	dfc00215 	stw	ra,8(sp)
 8002a70:	2023883a 	mov	r17,r4
 8002a74:	2821883a 	mov	r16,r5
 8002a78:	18000226 	beq	r3,zero,8002a84 <__swsetup_r+0x30>
 8002a7c:	18800e17 	ldw	r2,56(r3)
 8002a80:	10001f26 	beq	r2,zero,8002b00 <__swsetup_r+0xac>
 8002a84:	8100030b 	ldhu	r4,12(r16)
 8002a88:	2080020c 	andi	r2,r4,8
 8002a8c:	10002826 	beq	r2,zero,8002b30 <__swsetup_r+0xdc>
 8002a90:	81400417 	ldw	r5,16(r16)
 8002a94:	28001d26 	beq	r5,zero,8002b0c <__swsetup_r+0xb8>
 8002a98:	2080004c 	andi	r2,r4,1
 8002a9c:	1005003a 	cmpeq	r2,r2,zero
 8002aa0:	10000b26 	beq	r2,zero,8002ad0 <__swsetup_r+0x7c>
 8002aa4:	2080008c 	andi	r2,r4,2
 8002aa8:	10001226 	beq	r2,zero,8002af4 <__swsetup_r+0xa0>
 8002aac:	0005883a 	mov	r2,zero
 8002ab0:	80800215 	stw	r2,8(r16)
 8002ab4:	28000b26 	beq	r5,zero,8002ae4 <__swsetup_r+0x90>
 8002ab8:	0005883a 	mov	r2,zero
 8002abc:	dfc00217 	ldw	ra,8(sp)
 8002ac0:	dc400117 	ldw	r17,4(sp)
 8002ac4:	dc000017 	ldw	r16,0(sp)
 8002ac8:	dec00304 	addi	sp,sp,12
 8002acc:	f800283a 	ret
 8002ad0:	80800517 	ldw	r2,20(r16)
 8002ad4:	80000215 	stw	zero,8(r16)
 8002ad8:	0085c83a 	sub	r2,zero,r2
 8002adc:	80800615 	stw	r2,24(r16)
 8002ae0:	283ff51e 	bne	r5,zero,8002ab8 <__swsetup_r+0x64>
 8002ae4:	2080200c 	andi	r2,r4,128
 8002ae8:	103ff326 	beq	r2,zero,8002ab8 <__swsetup_r+0x64>
 8002aec:	00bfffc4 	movi	r2,-1
 8002af0:	003ff206 	br	8002abc <__swsetup_r+0x68>
 8002af4:	80800517 	ldw	r2,20(r16)
 8002af8:	80800215 	stw	r2,8(r16)
 8002afc:	003fed06 	br	8002ab4 <__swsetup_r+0x60>
 8002b00:	1809883a 	mov	r4,r3
 8002b04:	8000f7c0 	call	8000f7c <__sinit>
 8002b08:	003fde06 	br	8002a84 <__swsetup_r+0x30>
 8002b0c:	20c0a00c 	andi	r3,r4,640
 8002b10:	00808004 	movi	r2,512
 8002b14:	18bfe026 	beq	r3,r2,8002a98 <__swsetup_r+0x44>
 8002b18:	8809883a 	mov	r4,r17
 8002b1c:	800b883a 	mov	r5,r16
 8002b20:	800340c0 	call	800340c <__smakebuf_r>
 8002b24:	8100030b 	ldhu	r4,12(r16)
 8002b28:	81400417 	ldw	r5,16(r16)
 8002b2c:	003fda06 	br	8002a98 <__swsetup_r+0x44>
 8002b30:	2080040c 	andi	r2,r4,16
 8002b34:	103fed26 	beq	r2,zero,8002aec <__swsetup_r+0x98>
 8002b38:	2080010c 	andi	r2,r4,4
 8002b3c:	10001226 	beq	r2,zero,8002b88 <__swsetup_r+0x134>
 8002b40:	81400c17 	ldw	r5,48(r16)
 8002b44:	28000526 	beq	r5,zero,8002b5c <__swsetup_r+0x108>
 8002b48:	80801004 	addi	r2,r16,64
 8002b4c:	28800226 	beq	r5,r2,8002b58 <__swsetup_r+0x104>
 8002b50:	8809883a 	mov	r4,r17
 8002b54:	80030800 	call	8003080 <_free_r>
 8002b58:	80000c15 	stw	zero,48(r16)
 8002b5c:	8080030b 	ldhu	r2,12(r16)
 8002b60:	81400417 	ldw	r5,16(r16)
 8002b64:	80000115 	stw	zero,4(r16)
 8002b68:	10bff6cc 	andi	r2,r2,65499
 8002b6c:	8080030d 	sth	r2,12(r16)
 8002b70:	81400015 	stw	r5,0(r16)
 8002b74:	8080030b 	ldhu	r2,12(r16)
 8002b78:	10800214 	ori	r2,r2,8
 8002b7c:	113fffcc 	andi	r4,r2,65535
 8002b80:	8080030d 	sth	r2,12(r16)
 8002b84:	003fc306 	br	8002a94 <__swsetup_r+0x40>
 8002b88:	81400417 	ldw	r5,16(r16)
 8002b8c:	003ff906 	br	8002b74 <__swsetup_r+0x120>

08002b90 <_close_r>:
 8002b90:	defffd04 	addi	sp,sp,-12
 8002b94:	dc000015 	stw	r16,0(sp)
 8002b98:	04020074 	movhi	r16,2049
 8002b9c:	842b0604 	addi	r16,r16,-21480
 8002ba0:	dc400115 	stw	r17,4(sp)
 8002ba4:	80000015 	stw	zero,0(r16)
 8002ba8:	2023883a 	mov	r17,r4
 8002bac:	2809883a 	mov	r4,r5
 8002bb0:	dfc00215 	stw	ra,8(sp)
 8002bb4:	80037940 	call	8003794 <close>
 8002bb8:	1007883a 	mov	r3,r2
 8002bbc:	00bfffc4 	movi	r2,-1
 8002bc0:	18800626 	beq	r3,r2,8002bdc <_close_r+0x4c>
 8002bc4:	1805883a 	mov	r2,r3
 8002bc8:	dfc00217 	ldw	ra,8(sp)
 8002bcc:	dc400117 	ldw	r17,4(sp)
 8002bd0:	dc000017 	ldw	r16,0(sp)
 8002bd4:	dec00304 	addi	sp,sp,12
 8002bd8:	f800283a 	ret
 8002bdc:	80800017 	ldw	r2,0(r16)
 8002be0:	103ff826 	beq	r2,zero,8002bc4 <_close_r+0x34>
 8002be4:	88800015 	stw	r2,0(r17)
 8002be8:	1805883a 	mov	r2,r3
 8002bec:	dfc00217 	ldw	ra,8(sp)
 8002bf0:	dc400117 	ldw	r17,4(sp)
 8002bf4:	dc000017 	ldw	r16,0(sp)
 8002bf8:	dec00304 	addi	sp,sp,12
 8002bfc:	f800283a 	ret

08002c00 <_fclose_r>:
 8002c00:	defffc04 	addi	sp,sp,-16
 8002c04:	dc400115 	stw	r17,4(sp)
 8002c08:	dc000015 	stw	r16,0(sp)
 8002c0c:	dfc00315 	stw	ra,12(sp)
 8002c10:	dc800215 	stw	r18,8(sp)
 8002c14:	2821883a 	mov	r16,r5
 8002c18:	2023883a 	mov	r17,r4
 8002c1c:	28002926 	beq	r5,zero,8002cc4 <_fclose_r+0xc4>
 8002c20:	8000f6c0 	call	8000f6c <__sfp_lock_acquire>
 8002c24:	88000226 	beq	r17,zero,8002c30 <_fclose_r+0x30>
 8002c28:	88800e17 	ldw	r2,56(r17)
 8002c2c:	10002d26 	beq	r2,zero,8002ce4 <_fclose_r+0xe4>
 8002c30:	8080030f 	ldh	r2,12(r16)
 8002c34:	10002226 	beq	r2,zero,8002cc0 <_fclose_r+0xc0>
 8002c38:	8809883a 	mov	r4,r17
 8002c3c:	800b883a 	mov	r5,r16
 8002c40:	8002d240 	call	8002d24 <_fflush_r>
 8002c44:	1025883a 	mov	r18,r2
 8002c48:	80800b17 	ldw	r2,44(r16)
 8002c4c:	10000426 	beq	r2,zero,8002c60 <_fclose_r+0x60>
 8002c50:	81400717 	ldw	r5,28(r16)
 8002c54:	8809883a 	mov	r4,r17
 8002c58:	103ee83a 	callr	r2
 8002c5c:	10002a16 	blt	r2,zero,8002d08 <_fclose_r+0x108>
 8002c60:	8080030b 	ldhu	r2,12(r16)
 8002c64:	1080200c 	andi	r2,r2,128
 8002c68:	1000231e 	bne	r2,zero,8002cf8 <_fclose_r+0xf8>
 8002c6c:	81400c17 	ldw	r5,48(r16)
 8002c70:	28000526 	beq	r5,zero,8002c88 <_fclose_r+0x88>
 8002c74:	80801004 	addi	r2,r16,64
 8002c78:	28800226 	beq	r5,r2,8002c84 <_fclose_r+0x84>
 8002c7c:	8809883a 	mov	r4,r17
 8002c80:	80030800 	call	8003080 <_free_r>
 8002c84:	80000c15 	stw	zero,48(r16)
 8002c88:	81401117 	ldw	r5,68(r16)
 8002c8c:	28000326 	beq	r5,zero,8002c9c <_fclose_r+0x9c>
 8002c90:	8809883a 	mov	r4,r17
 8002c94:	80030800 	call	8003080 <_free_r>
 8002c98:	80001115 	stw	zero,68(r16)
 8002c9c:	8000030d 	sth	zero,12(r16)
 8002ca0:	8000f700 	call	8000f70 <__sfp_lock_release>
 8002ca4:	9005883a 	mov	r2,r18
 8002ca8:	dfc00317 	ldw	ra,12(sp)
 8002cac:	dc800217 	ldw	r18,8(sp)
 8002cb0:	dc400117 	ldw	r17,4(sp)
 8002cb4:	dc000017 	ldw	r16,0(sp)
 8002cb8:	dec00404 	addi	sp,sp,16
 8002cbc:	f800283a 	ret
 8002cc0:	8000f700 	call	8000f70 <__sfp_lock_release>
 8002cc4:	0025883a 	mov	r18,zero
 8002cc8:	9005883a 	mov	r2,r18
 8002ccc:	dfc00317 	ldw	ra,12(sp)
 8002cd0:	dc800217 	ldw	r18,8(sp)
 8002cd4:	dc400117 	ldw	r17,4(sp)
 8002cd8:	dc000017 	ldw	r16,0(sp)
 8002cdc:	dec00404 	addi	sp,sp,16
 8002ce0:	f800283a 	ret
 8002ce4:	8809883a 	mov	r4,r17
 8002ce8:	8000f7c0 	call	8000f7c <__sinit>
 8002cec:	8080030f 	ldh	r2,12(r16)
 8002cf0:	103fd11e 	bne	r2,zero,8002c38 <_fclose_r+0x38>
 8002cf4:	003ff206 	br	8002cc0 <_fclose_r+0xc0>
 8002cf8:	81400417 	ldw	r5,16(r16)
 8002cfc:	8809883a 	mov	r4,r17
 8002d00:	80030800 	call	8003080 <_free_r>
 8002d04:	003fd906 	br	8002c6c <_fclose_r+0x6c>
 8002d08:	04bfffc4 	movi	r18,-1
 8002d0c:	003fd406 	br	8002c60 <_fclose_r+0x60>

08002d10 <fclose>:
 8002d10:	00820074 	movhi	r2,2049
 8002d14:	10a41704 	addi	r2,r2,-28580
 8002d18:	200b883a 	mov	r5,r4
 8002d1c:	11000017 	ldw	r4,0(r2)
 8002d20:	8002c001 	jmpi	8002c00 <_fclose_r>

08002d24 <_fflush_r>:
 8002d24:	defffb04 	addi	sp,sp,-20
 8002d28:	dcc00315 	stw	r19,12(sp)
 8002d2c:	dc800215 	stw	r18,8(sp)
 8002d30:	dfc00415 	stw	ra,16(sp)
 8002d34:	dc400115 	stw	r17,4(sp)
 8002d38:	dc000015 	stw	r16,0(sp)
 8002d3c:	2027883a 	mov	r19,r4
 8002d40:	2825883a 	mov	r18,r5
 8002d44:	20000226 	beq	r4,zero,8002d50 <_fflush_r+0x2c>
 8002d48:	20800e17 	ldw	r2,56(r4)
 8002d4c:	10005626 	beq	r2,zero,8002ea8 <_fflush_r+0x184>
 8002d50:	9100030b 	ldhu	r4,12(r18)
 8002d54:	20ffffcc 	andi	r3,r4,65535
 8002d58:	18e0001c 	xori	r3,r3,32768
 8002d5c:	18e00004 	addi	r3,r3,-32768
 8002d60:	1880020c 	andi	r2,r3,8
 8002d64:	1000261e 	bne	r2,zero,8002e00 <_fflush_r+0xdc>
 8002d68:	90c00117 	ldw	r3,4(r18)
 8002d6c:	20820014 	ori	r2,r4,2048
 8002d70:	9080030d 	sth	r2,12(r18)
 8002d74:	1009883a 	mov	r4,r2
 8002d78:	00c0400e 	bge	zero,r3,8002e7c <_fflush_r+0x158>
 8002d7c:	92000a17 	ldw	r8,40(r18)
 8002d80:	40004026 	beq	r8,zero,8002e84 <_fflush_r+0x160>
 8002d84:	2084000c 	andi	r2,r4,4096
 8002d88:	10005326 	beq	r2,zero,8002ed8 <_fflush_r+0x1b4>
 8002d8c:	94001417 	ldw	r16,80(r18)
 8002d90:	9080030b 	ldhu	r2,12(r18)
 8002d94:	1080010c 	andi	r2,r2,4
 8002d98:	1000481e 	bne	r2,zero,8002ebc <_fflush_r+0x198>
 8002d9c:	91400717 	ldw	r5,28(r18)
 8002da0:	9809883a 	mov	r4,r19
 8002da4:	800d883a 	mov	r6,r16
 8002da8:	000f883a 	mov	r7,zero
 8002dac:	403ee83a 	callr	r8
 8002db0:	8080261e 	bne	r16,r2,8002e4c <_fflush_r+0x128>
 8002db4:	9080030b 	ldhu	r2,12(r18)
 8002db8:	91000417 	ldw	r4,16(r18)
 8002dbc:	90000115 	stw	zero,4(r18)
 8002dc0:	10bdffcc 	andi	r2,r2,63487
 8002dc4:	10ffffcc 	andi	r3,r2,65535
 8002dc8:	18c4000c 	andi	r3,r3,4096
 8002dcc:	9080030d 	sth	r2,12(r18)
 8002dd0:	91000015 	stw	r4,0(r18)
 8002dd4:	18002b26 	beq	r3,zero,8002e84 <_fflush_r+0x160>
 8002dd8:	0007883a 	mov	r3,zero
 8002ddc:	1805883a 	mov	r2,r3
 8002de0:	94001415 	stw	r16,80(r18)
 8002de4:	dfc00417 	ldw	ra,16(sp)
 8002de8:	dcc00317 	ldw	r19,12(sp)
 8002dec:	dc800217 	ldw	r18,8(sp)
 8002df0:	dc400117 	ldw	r17,4(sp)
 8002df4:	dc000017 	ldw	r16,0(sp)
 8002df8:	dec00504 	addi	sp,sp,20
 8002dfc:	f800283a 	ret
 8002e00:	94400417 	ldw	r17,16(r18)
 8002e04:	88001f26 	beq	r17,zero,8002e84 <_fflush_r+0x160>
 8002e08:	90800017 	ldw	r2,0(r18)
 8002e0c:	18c000cc 	andi	r3,r3,3
 8002e10:	94400015 	stw	r17,0(r18)
 8002e14:	1461c83a 	sub	r16,r2,r17
 8002e18:	18002526 	beq	r3,zero,8002eb0 <_fflush_r+0x18c>
 8002e1c:	0005883a 	mov	r2,zero
 8002e20:	90800215 	stw	r2,8(r18)
 8002e24:	0400170e 	bge	zero,r16,8002e84 <_fflush_r+0x160>
 8002e28:	90c00917 	ldw	r3,36(r18)
 8002e2c:	91400717 	ldw	r5,28(r18)
 8002e30:	880d883a 	mov	r6,r17
 8002e34:	800f883a 	mov	r7,r16
 8002e38:	9809883a 	mov	r4,r19
 8002e3c:	183ee83a 	callr	r3
 8002e40:	88a3883a 	add	r17,r17,r2
 8002e44:	80a1c83a 	sub	r16,r16,r2
 8002e48:	00bff616 	blt	zero,r2,8002e24 <_fflush_r+0x100>
 8002e4c:	9080030b 	ldhu	r2,12(r18)
 8002e50:	00ffffc4 	movi	r3,-1
 8002e54:	10801014 	ori	r2,r2,64
 8002e58:	9080030d 	sth	r2,12(r18)
 8002e5c:	1805883a 	mov	r2,r3
 8002e60:	dfc00417 	ldw	ra,16(sp)
 8002e64:	dcc00317 	ldw	r19,12(sp)
 8002e68:	dc800217 	ldw	r18,8(sp)
 8002e6c:	dc400117 	ldw	r17,4(sp)
 8002e70:	dc000017 	ldw	r16,0(sp)
 8002e74:	dec00504 	addi	sp,sp,20
 8002e78:	f800283a 	ret
 8002e7c:	90800f17 	ldw	r2,60(r18)
 8002e80:	00bfbe16 	blt	zero,r2,8002d7c <_fflush_r+0x58>
 8002e84:	0007883a 	mov	r3,zero
 8002e88:	1805883a 	mov	r2,r3
 8002e8c:	dfc00417 	ldw	ra,16(sp)
 8002e90:	dcc00317 	ldw	r19,12(sp)
 8002e94:	dc800217 	ldw	r18,8(sp)
 8002e98:	dc400117 	ldw	r17,4(sp)
 8002e9c:	dc000017 	ldw	r16,0(sp)
 8002ea0:	dec00504 	addi	sp,sp,20
 8002ea4:	f800283a 	ret
 8002ea8:	8000f7c0 	call	8000f7c <__sinit>
 8002eac:	003fa806 	br	8002d50 <_fflush_r+0x2c>
 8002eb0:	90800517 	ldw	r2,20(r18)
 8002eb4:	90800215 	stw	r2,8(r18)
 8002eb8:	003fda06 	br	8002e24 <_fflush_r+0x100>
 8002ebc:	90800117 	ldw	r2,4(r18)
 8002ec0:	90c00c17 	ldw	r3,48(r18)
 8002ec4:	80a1c83a 	sub	r16,r16,r2
 8002ec8:	183fb426 	beq	r3,zero,8002d9c <_fflush_r+0x78>
 8002ecc:	90800f17 	ldw	r2,60(r18)
 8002ed0:	80a1c83a 	sub	r16,r16,r2
 8002ed4:	003fb106 	br	8002d9c <_fflush_r+0x78>
 8002ed8:	91400717 	ldw	r5,28(r18)
 8002edc:	9809883a 	mov	r4,r19
 8002ee0:	000d883a 	mov	r6,zero
 8002ee4:	01c00044 	movi	r7,1
 8002ee8:	403ee83a 	callr	r8
 8002eec:	1021883a 	mov	r16,r2
 8002ef0:	00bfffc4 	movi	r2,-1
 8002ef4:	80800226 	beq	r16,r2,8002f00 <_fflush_r+0x1dc>
 8002ef8:	92000a17 	ldw	r8,40(r18)
 8002efc:	003fa406 	br	8002d90 <_fflush_r+0x6c>
 8002f00:	98c00017 	ldw	r3,0(r19)
 8002f04:	00800744 	movi	r2,29
 8002f08:	18bfde26 	beq	r3,r2,8002e84 <_fflush_r+0x160>
 8002f0c:	9080030b 	ldhu	r2,12(r18)
 8002f10:	8007883a 	mov	r3,r16
 8002f14:	10801014 	ori	r2,r2,64
 8002f18:	9080030d 	sth	r2,12(r18)
 8002f1c:	003fcf06 	br	8002e5c <_fflush_r+0x138>

08002f20 <fflush>:
 8002f20:	01420034 	movhi	r5,2048
 8002f24:	294b4904 	addi	r5,r5,11556
 8002f28:	2007883a 	mov	r3,r4
 8002f2c:	20000526 	beq	r4,zero,8002f44 <fflush+0x24>
 8002f30:	00820074 	movhi	r2,2049
 8002f34:	10a41704 	addi	r2,r2,-28580
 8002f38:	11000017 	ldw	r4,0(r2)
 8002f3c:	180b883a 	mov	r5,r3
 8002f40:	8002d241 	jmpi	8002d24 <_fflush_r>
 8002f44:	00820074 	movhi	r2,2049
 8002f48:	10a41804 	addi	r2,r2,-28576
 8002f4c:	11000017 	ldw	r4,0(r2)
 8002f50:	80016701 	jmpi	8001670 <_fwalk_reent>

08002f54 <_malloc_trim_r>:
 8002f54:	defffb04 	addi	sp,sp,-20
 8002f58:	dcc00315 	stw	r19,12(sp)
 8002f5c:	04c20034 	movhi	r19,2048
 8002f60:	9cde4b04 	addi	r19,r19,31020
 8002f64:	dc800215 	stw	r18,8(sp)
 8002f68:	dc400115 	stw	r17,4(sp)
 8002f6c:	dc000015 	stw	r16,0(sp)
 8002f70:	2823883a 	mov	r17,r5
 8002f74:	2025883a 	mov	r18,r4
 8002f78:	dfc00415 	stw	ra,16(sp)
 8002f7c:	8003e180 	call	8003e18 <__malloc_lock>
 8002f80:	98800217 	ldw	r2,8(r19)
 8002f84:	9009883a 	mov	r4,r18
 8002f88:	000b883a 	mov	r5,zero
 8002f8c:	10c00117 	ldw	r3,4(r2)
 8002f90:	00bfff04 	movi	r2,-4
 8002f94:	18a0703a 	and	r16,r3,r2
 8002f98:	8463c83a 	sub	r17,r16,r17
 8002f9c:	8c43fbc4 	addi	r17,r17,4079
 8002fa0:	8822d33a 	srli	r17,r17,12
 8002fa4:	0083ffc4 	movi	r2,4095
 8002fa8:	8c7fffc4 	addi	r17,r17,-1
 8002fac:	8822933a 	slli	r17,r17,12
 8002fb0:	1440060e 	bge	r2,r17,8002fcc <_malloc_trim_r+0x78>
 8002fb4:	80028200 	call	8002820 <_sbrk_r>
 8002fb8:	98c00217 	ldw	r3,8(r19)
 8002fbc:	9009883a 	mov	r4,r18
 8002fc0:	044bc83a 	sub	r5,zero,r17
 8002fc4:	80c7883a 	add	r3,r16,r3
 8002fc8:	10c00926 	beq	r2,r3,8002ff0 <_malloc_trim_r+0x9c>
 8002fcc:	8003e380 	call	8003e38 <__malloc_unlock>
 8002fd0:	0005883a 	mov	r2,zero
 8002fd4:	dfc00417 	ldw	ra,16(sp)
 8002fd8:	dcc00317 	ldw	r19,12(sp)
 8002fdc:	dc800217 	ldw	r18,8(sp)
 8002fe0:	dc400117 	ldw	r17,4(sp)
 8002fe4:	dc000017 	ldw	r16,0(sp)
 8002fe8:	dec00504 	addi	sp,sp,20
 8002fec:	f800283a 	ret
 8002ff0:	9009883a 	mov	r4,r18
 8002ff4:	80028200 	call	8002820 <_sbrk_r>
 8002ff8:	844dc83a 	sub	r6,r16,r17
 8002ffc:	00ffffc4 	movi	r3,-1
 8003000:	9009883a 	mov	r4,r18
 8003004:	000b883a 	mov	r5,zero
 8003008:	01c20074 	movhi	r7,2049
 800300c:	39eb0d04 	addi	r7,r7,-21452
 8003010:	31800054 	ori	r6,r6,1
 8003014:	10c00926 	beq	r2,r3,800303c <_malloc_trim_r+0xe8>
 8003018:	38800017 	ldw	r2,0(r7)
 800301c:	98c00217 	ldw	r3,8(r19)
 8003020:	9009883a 	mov	r4,r18
 8003024:	1445c83a 	sub	r2,r2,r17
 8003028:	38800015 	stw	r2,0(r7)
 800302c:	19800115 	stw	r6,4(r3)
 8003030:	8003e380 	call	8003e38 <__malloc_unlock>
 8003034:	00800044 	movi	r2,1
 8003038:	003fe606 	br	8002fd4 <_malloc_trim_r+0x80>
 800303c:	80028200 	call	8002820 <_sbrk_r>
 8003040:	99800217 	ldw	r6,8(r19)
 8003044:	100f883a 	mov	r7,r2
 8003048:	9009883a 	mov	r4,r18
 800304c:	1187c83a 	sub	r3,r2,r6
 8003050:	008003c4 	movi	r2,15
 8003054:	19400054 	ori	r5,r3,1
 8003058:	10ffdc0e 	bge	r2,r3,8002fcc <_malloc_trim_r+0x78>
 800305c:	00820074 	movhi	r2,2049
 8003060:	10a41a04 	addi	r2,r2,-28568
 8003064:	10c00017 	ldw	r3,0(r2)
 8003068:	00820074 	movhi	r2,2049
 800306c:	10ab0d04 	addi	r2,r2,-21452
 8003070:	31400115 	stw	r5,4(r6)
 8003074:	38c7c83a 	sub	r3,r7,r3
 8003078:	10c00015 	stw	r3,0(r2)
 800307c:	003fd306 	br	8002fcc <_malloc_trim_r+0x78>

08003080 <_free_r>:
 8003080:	defffd04 	addi	sp,sp,-12
 8003084:	dc400115 	stw	r17,4(sp)
 8003088:	dc000015 	stw	r16,0(sp)
 800308c:	dfc00215 	stw	ra,8(sp)
 8003090:	2821883a 	mov	r16,r5
 8003094:	2023883a 	mov	r17,r4
 8003098:	28005a26 	beq	r5,zero,8003204 <_free_r+0x184>
 800309c:	8003e180 	call	8003e18 <__malloc_lock>
 80030a0:	823ffe04 	addi	r8,r16,-8
 80030a4:	41400117 	ldw	r5,4(r8)
 80030a8:	00bfff84 	movi	r2,-2
 80030ac:	02820034 	movhi	r10,2048
 80030b0:	529e4b04 	addi	r10,r10,31020
 80030b4:	288e703a 	and	r7,r5,r2
 80030b8:	41cd883a 	add	r6,r8,r7
 80030bc:	30c00117 	ldw	r3,4(r6)
 80030c0:	51000217 	ldw	r4,8(r10)
 80030c4:	00bfff04 	movi	r2,-4
 80030c8:	1892703a 	and	r9,r3,r2
 80030cc:	5017883a 	mov	r11,r10
 80030d0:	31006726 	beq	r6,r4,8003270 <_free_r+0x1f0>
 80030d4:	2880004c 	andi	r2,r5,1
 80030d8:	1005003a 	cmpeq	r2,r2,zero
 80030dc:	32400115 	stw	r9,4(r6)
 80030e0:	10001a1e 	bne	r2,zero,800314c <_free_r+0xcc>
 80030e4:	000b883a 	mov	r5,zero
 80030e8:	3247883a 	add	r3,r6,r9
 80030ec:	18800117 	ldw	r2,4(r3)
 80030f0:	1080004c 	andi	r2,r2,1
 80030f4:	1000231e 	bne	r2,zero,8003184 <_free_r+0x104>
 80030f8:	280ac03a 	cmpne	r5,r5,zero
 80030fc:	3a4f883a 	add	r7,r7,r9
 8003100:	2800451e 	bne	r5,zero,8003218 <_free_r+0x198>
 8003104:	31000217 	ldw	r4,8(r6)
 8003108:	00820034 	movhi	r2,2048
 800310c:	109e4d04 	addi	r2,r2,31028
 8003110:	20807b26 	beq	r4,r2,8003300 <_free_r+0x280>
 8003114:	30800317 	ldw	r2,12(r6)
 8003118:	3a07883a 	add	r3,r7,r8
 800311c:	19c00015 	stw	r7,0(r3)
 8003120:	11000215 	stw	r4,8(r2)
 8003124:	20800315 	stw	r2,12(r4)
 8003128:	38800054 	ori	r2,r7,1
 800312c:	40800115 	stw	r2,4(r8)
 8003130:	28001a26 	beq	r5,zero,800319c <_free_r+0x11c>
 8003134:	8809883a 	mov	r4,r17
 8003138:	dfc00217 	ldw	ra,8(sp)
 800313c:	dc400117 	ldw	r17,4(sp)
 8003140:	dc000017 	ldw	r16,0(sp)
 8003144:	dec00304 	addi	sp,sp,12
 8003148:	8003e381 	jmpi	8003e38 <__malloc_unlock>
 800314c:	80bffe17 	ldw	r2,-8(r16)
 8003150:	50c00204 	addi	r3,r10,8
 8003154:	4091c83a 	sub	r8,r8,r2
 8003158:	41000217 	ldw	r4,8(r8)
 800315c:	388f883a 	add	r7,r7,r2
 8003160:	20c06126 	beq	r4,r3,80032e8 <_free_r+0x268>
 8003164:	40800317 	ldw	r2,12(r8)
 8003168:	3247883a 	add	r3,r6,r9
 800316c:	000b883a 	mov	r5,zero
 8003170:	11000215 	stw	r4,8(r2)
 8003174:	20800315 	stw	r2,12(r4)
 8003178:	18800117 	ldw	r2,4(r3)
 800317c:	1080004c 	andi	r2,r2,1
 8003180:	103fdd26 	beq	r2,zero,80030f8 <_free_r+0x78>
 8003184:	38800054 	ori	r2,r7,1
 8003188:	3a07883a 	add	r3,r7,r8
 800318c:	280ac03a 	cmpne	r5,r5,zero
 8003190:	40800115 	stw	r2,4(r8)
 8003194:	19c00015 	stw	r7,0(r3)
 8003198:	283fe61e 	bne	r5,zero,8003134 <_free_r+0xb4>
 800319c:	00807fc4 	movi	r2,511
 80031a0:	11c01f2e 	bgeu	r2,r7,8003220 <_free_r+0x1a0>
 80031a4:	3806d27a 	srli	r3,r7,9
 80031a8:	1800481e 	bne	r3,zero,80032cc <_free_r+0x24c>
 80031ac:	3804d0fa 	srli	r2,r7,3
 80031b0:	100690fa 	slli	r3,r2,3
 80031b4:	1acd883a 	add	r6,r3,r11
 80031b8:	31400217 	ldw	r5,8(r6)
 80031bc:	31405926 	beq	r6,r5,8003324 <_free_r+0x2a4>
 80031c0:	28800117 	ldw	r2,4(r5)
 80031c4:	00ffff04 	movi	r3,-4
 80031c8:	10c4703a 	and	r2,r2,r3
 80031cc:	3880022e 	bgeu	r7,r2,80031d8 <_free_r+0x158>
 80031d0:	29400217 	ldw	r5,8(r5)
 80031d4:	317ffa1e 	bne	r6,r5,80031c0 <_free_r+0x140>
 80031d8:	29800317 	ldw	r6,12(r5)
 80031dc:	41800315 	stw	r6,12(r8)
 80031e0:	41400215 	stw	r5,8(r8)
 80031e4:	8809883a 	mov	r4,r17
 80031e8:	2a000315 	stw	r8,12(r5)
 80031ec:	32000215 	stw	r8,8(r6)
 80031f0:	dfc00217 	ldw	ra,8(sp)
 80031f4:	dc400117 	ldw	r17,4(sp)
 80031f8:	dc000017 	ldw	r16,0(sp)
 80031fc:	dec00304 	addi	sp,sp,12
 8003200:	8003e381 	jmpi	8003e38 <__malloc_unlock>
 8003204:	dfc00217 	ldw	ra,8(sp)
 8003208:	dc400117 	ldw	r17,4(sp)
 800320c:	dc000017 	ldw	r16,0(sp)
 8003210:	dec00304 	addi	sp,sp,12
 8003214:	f800283a 	ret
 8003218:	31000217 	ldw	r4,8(r6)
 800321c:	003fbd06 	br	8003114 <_free_r+0x94>
 8003220:	3806d0fa 	srli	r3,r7,3
 8003224:	00800044 	movi	r2,1
 8003228:	51400117 	ldw	r5,4(r10)
 800322c:	180890fa 	slli	r4,r3,3
 8003230:	1807d0ba 	srai	r3,r3,2
 8003234:	22c9883a 	add	r4,r4,r11
 8003238:	21800217 	ldw	r6,8(r4)
 800323c:	10c4983a 	sll	r2,r2,r3
 8003240:	41000315 	stw	r4,12(r8)
 8003244:	41800215 	stw	r6,8(r8)
 8003248:	288ab03a 	or	r5,r5,r2
 800324c:	22000215 	stw	r8,8(r4)
 8003250:	8809883a 	mov	r4,r17
 8003254:	51400115 	stw	r5,4(r10)
 8003258:	32000315 	stw	r8,12(r6)
 800325c:	dfc00217 	ldw	ra,8(sp)
 8003260:	dc400117 	ldw	r17,4(sp)
 8003264:	dc000017 	ldw	r16,0(sp)
 8003268:	dec00304 	addi	sp,sp,12
 800326c:	8003e381 	jmpi	8003e38 <__malloc_unlock>
 8003270:	2880004c 	andi	r2,r5,1
 8003274:	3a4d883a 	add	r6,r7,r9
 8003278:	1000071e 	bne	r2,zero,8003298 <_free_r+0x218>
 800327c:	80bffe17 	ldw	r2,-8(r16)
 8003280:	4091c83a 	sub	r8,r8,r2
 8003284:	41000317 	ldw	r4,12(r8)
 8003288:	40c00217 	ldw	r3,8(r8)
 800328c:	308d883a 	add	r6,r6,r2
 8003290:	20c00215 	stw	r3,8(r4)
 8003294:	19000315 	stw	r4,12(r3)
 8003298:	00820074 	movhi	r2,2049
 800329c:	10a41904 	addi	r2,r2,-28572
 80032a0:	11000017 	ldw	r4,0(r2)
 80032a4:	30c00054 	ori	r3,r6,1
 80032a8:	52000215 	stw	r8,8(r10)
 80032ac:	40c00115 	stw	r3,4(r8)
 80032b0:	313fa036 	bltu	r6,r4,8003134 <_free_r+0xb4>
 80032b4:	00820074 	movhi	r2,2049
 80032b8:	10ab0304 	addi	r2,r2,-21492
 80032bc:	11400017 	ldw	r5,0(r2)
 80032c0:	8809883a 	mov	r4,r17
 80032c4:	8002f540 	call	8002f54 <_malloc_trim_r>
 80032c8:	003f9a06 	br	8003134 <_free_r+0xb4>
 80032cc:	00800104 	movi	r2,4
 80032d0:	10c0072e 	bgeu	r2,r3,80032f0 <_free_r+0x270>
 80032d4:	00800504 	movi	r2,20
 80032d8:	10c01936 	bltu	r2,r3,8003340 <_free_r+0x2c0>
 80032dc:	188016c4 	addi	r2,r3,91
 80032e0:	100690fa 	slli	r3,r2,3
 80032e4:	003fb306 	br	80031b4 <_free_r+0x134>
 80032e8:	01400044 	movi	r5,1
 80032ec:	003f7e06 	br	80030e8 <_free_r+0x68>
 80032f0:	3804d1ba 	srli	r2,r7,6
 80032f4:	10800e04 	addi	r2,r2,56
 80032f8:	100690fa 	slli	r3,r2,3
 80032fc:	003fad06 	br	80031b4 <_free_r+0x134>
 8003300:	22000315 	stw	r8,12(r4)
 8003304:	22000215 	stw	r8,8(r4)
 8003308:	3a05883a 	add	r2,r7,r8
 800330c:	38c00054 	ori	r3,r7,1
 8003310:	11c00015 	stw	r7,0(r2)
 8003314:	41000215 	stw	r4,8(r8)
 8003318:	40c00115 	stw	r3,4(r8)
 800331c:	41000315 	stw	r4,12(r8)
 8003320:	003f8406 	br	8003134 <_free_r+0xb4>
 8003324:	1005d0ba 	srai	r2,r2,2
 8003328:	00c00044 	movi	r3,1
 800332c:	51000117 	ldw	r4,4(r10)
 8003330:	1886983a 	sll	r3,r3,r2
 8003334:	20c8b03a 	or	r4,r4,r3
 8003338:	51000115 	stw	r4,4(r10)
 800333c:	003fa706 	br	80031dc <_free_r+0x15c>
 8003340:	00801504 	movi	r2,84
 8003344:	10c00436 	bltu	r2,r3,8003358 <_free_r+0x2d8>
 8003348:	3804d33a 	srli	r2,r7,12
 800334c:	10801b84 	addi	r2,r2,110
 8003350:	100690fa 	slli	r3,r2,3
 8003354:	003f9706 	br	80031b4 <_free_r+0x134>
 8003358:	00805504 	movi	r2,340
 800335c:	10c00436 	bltu	r2,r3,8003370 <_free_r+0x2f0>
 8003360:	3804d3fa 	srli	r2,r7,15
 8003364:	10801dc4 	addi	r2,r2,119
 8003368:	100690fa 	slli	r3,r2,3
 800336c:	003f9106 	br	80031b4 <_free_r+0x134>
 8003370:	00815504 	movi	r2,1364
 8003374:	10c0032e 	bgeu	r2,r3,8003384 <_free_r+0x304>
 8003378:	00801f84 	movi	r2,126
 800337c:	00c0fc04 	movi	r3,1008
 8003380:	003f8c06 	br	80031b4 <_free_r+0x134>
 8003384:	3804d4ba 	srli	r2,r7,18
 8003388:	10801f04 	addi	r2,r2,124
 800338c:	100690fa 	slli	r3,r2,3
 8003390:	003f8806 	br	80031b4 <_free_r+0x134>

08003394 <_lseek_r>:
 8003394:	defffd04 	addi	sp,sp,-12
 8003398:	dc000015 	stw	r16,0(sp)
 800339c:	04020074 	movhi	r16,2049
 80033a0:	842b0604 	addi	r16,r16,-21480
 80033a4:	dc400115 	stw	r17,4(sp)
 80033a8:	80000015 	stw	zero,0(r16)
 80033ac:	2023883a 	mov	r17,r4
 80033b0:	2809883a 	mov	r4,r5
 80033b4:	300b883a 	mov	r5,r6
 80033b8:	380d883a 	mov	r6,r7
 80033bc:	dfc00215 	stw	ra,8(sp)
 80033c0:	8003c5c0 	call	8003c5c <lseek>
 80033c4:	1007883a 	mov	r3,r2
 80033c8:	00bfffc4 	movi	r2,-1
 80033cc:	18800626 	beq	r3,r2,80033e8 <_lseek_r+0x54>
 80033d0:	1805883a 	mov	r2,r3
 80033d4:	dfc00217 	ldw	ra,8(sp)
 80033d8:	dc400117 	ldw	r17,4(sp)
 80033dc:	dc000017 	ldw	r16,0(sp)
 80033e0:	dec00304 	addi	sp,sp,12
 80033e4:	f800283a 	ret
 80033e8:	80800017 	ldw	r2,0(r16)
 80033ec:	103ff826 	beq	r2,zero,80033d0 <_lseek_r+0x3c>
 80033f0:	88800015 	stw	r2,0(r17)
 80033f4:	1805883a 	mov	r2,r3
 80033f8:	dfc00217 	ldw	ra,8(sp)
 80033fc:	dc400117 	ldw	r17,4(sp)
 8003400:	dc000017 	ldw	r16,0(sp)
 8003404:	dec00304 	addi	sp,sp,12
 8003408:	f800283a 	ret

0800340c <__smakebuf_r>:
 800340c:	2880030b 	ldhu	r2,12(r5)
 8003410:	deffed04 	addi	sp,sp,-76
 8003414:	dc401015 	stw	r17,64(sp)
 8003418:	1080008c 	andi	r2,r2,2
 800341c:	dc000f15 	stw	r16,60(sp)
 8003420:	dfc01215 	stw	ra,72(sp)
 8003424:	dc801115 	stw	r18,68(sp)
 8003428:	2821883a 	mov	r16,r5
 800342c:	2023883a 	mov	r17,r4
 8003430:	10000b26 	beq	r2,zero,8003460 <__smakebuf_r+0x54>
 8003434:	28c010c4 	addi	r3,r5,67
 8003438:	00800044 	movi	r2,1
 800343c:	28800515 	stw	r2,20(r5)
 8003440:	28c00415 	stw	r3,16(r5)
 8003444:	28c00015 	stw	r3,0(r5)
 8003448:	dfc01217 	ldw	ra,72(sp)
 800344c:	dc801117 	ldw	r18,68(sp)
 8003450:	dc401017 	ldw	r17,64(sp)
 8003454:	dc000f17 	ldw	r16,60(sp)
 8003458:	dec01304 	addi	sp,sp,76
 800345c:	f800283a 	ret
 8003460:	2940038f 	ldh	r5,14(r5)
 8003464:	28002116 	blt	r5,zero,80034ec <__smakebuf_r+0xe0>
 8003468:	d80d883a 	mov	r6,sp
 800346c:	80036180 	call	8003618 <_fstat_r>
 8003470:	10001e16 	blt	r2,zero,80034ec <__smakebuf_r+0xe0>
 8003474:	d8800117 	ldw	r2,4(sp)
 8003478:	00e00014 	movui	r3,32768
 800347c:	113c000c 	andi	r4,r2,61440
 8003480:	20c03126 	beq	r4,r3,8003548 <__smakebuf_r+0x13c>
 8003484:	8080030b 	ldhu	r2,12(r16)
 8003488:	00c80004 	movi	r3,8192
 800348c:	10820014 	ori	r2,r2,2048
 8003490:	8080030d 	sth	r2,12(r16)
 8003494:	20c01e26 	beq	r4,r3,8003510 <__smakebuf_r+0x104>
 8003498:	04810004 	movi	r18,1024
 800349c:	8809883a 	mov	r4,r17
 80034a0:	900b883a 	mov	r5,r18
 80034a4:	80017f00 	call	80017f0 <_malloc_r>
 80034a8:	1009883a 	mov	r4,r2
 80034ac:	10003126 	beq	r2,zero,8003574 <__smakebuf_r+0x168>
 80034b0:	80c0030b 	ldhu	r3,12(r16)
 80034b4:	00820034 	movhi	r2,2048
 80034b8:	10841804 	addi	r2,r2,4192
 80034bc:	88800f15 	stw	r2,60(r17)
 80034c0:	18c02014 	ori	r3,r3,128
 80034c4:	84800515 	stw	r18,20(r16)
 80034c8:	80c0030d 	sth	r3,12(r16)
 80034cc:	81000415 	stw	r4,16(r16)
 80034d0:	81000015 	stw	r4,0(r16)
 80034d4:	dfc01217 	ldw	ra,72(sp)
 80034d8:	dc801117 	ldw	r18,68(sp)
 80034dc:	dc401017 	ldw	r17,64(sp)
 80034e0:	dc000f17 	ldw	r16,60(sp)
 80034e4:	dec01304 	addi	sp,sp,76
 80034e8:	f800283a 	ret
 80034ec:	80c0030b 	ldhu	r3,12(r16)
 80034f0:	1880200c 	andi	r2,r3,128
 80034f4:	10000426 	beq	r2,zero,8003508 <__smakebuf_r+0xfc>
 80034f8:	04801004 	movi	r18,64
 80034fc:	18820014 	ori	r2,r3,2048
 8003500:	8080030d 	sth	r2,12(r16)
 8003504:	003fe506 	br	800349c <__smakebuf_r+0x90>
 8003508:	04810004 	movi	r18,1024
 800350c:	003ffb06 	br	80034fc <__smakebuf_r+0xf0>
 8003510:	8140038f 	ldh	r5,14(r16)
 8003514:	8809883a 	mov	r4,r17
 8003518:	800368c0 	call	800368c <_isatty_r>
 800351c:	103fde26 	beq	r2,zero,8003498 <__smakebuf_r+0x8c>
 8003520:	8080030b 	ldhu	r2,12(r16)
 8003524:	80c010c4 	addi	r3,r16,67
 8003528:	04810004 	movi	r18,1024
 800352c:	10800054 	ori	r2,r2,1
 8003530:	8080030d 	sth	r2,12(r16)
 8003534:	00800044 	movi	r2,1
 8003538:	80c00415 	stw	r3,16(r16)
 800353c:	80800515 	stw	r2,20(r16)
 8003540:	80c00015 	stw	r3,0(r16)
 8003544:	003fd506 	br	800349c <__smakebuf_r+0x90>
 8003548:	80c00a17 	ldw	r3,40(r16)
 800354c:	00820034 	movhi	r2,2048
 8003550:	108a2604 	addi	r2,r2,10392
 8003554:	18bfcb1e 	bne	r3,r2,8003484 <__smakebuf_r+0x78>
 8003558:	8080030b 	ldhu	r2,12(r16)
 800355c:	00c10004 	movi	r3,1024
 8003560:	1825883a 	mov	r18,r3
 8003564:	10c4b03a 	or	r2,r2,r3
 8003568:	8080030d 	sth	r2,12(r16)
 800356c:	80c01315 	stw	r3,76(r16)
 8003570:	003fca06 	br	800349c <__smakebuf_r+0x90>
 8003574:	8100030b 	ldhu	r4,12(r16)
 8003578:	2080800c 	andi	r2,r4,512
 800357c:	103fb21e 	bne	r2,zero,8003448 <__smakebuf_r+0x3c>
 8003580:	80c010c4 	addi	r3,r16,67
 8003584:	21000094 	ori	r4,r4,2
 8003588:	00800044 	movi	r2,1
 800358c:	80800515 	stw	r2,20(r16)
 8003590:	8100030d 	sth	r4,12(r16)
 8003594:	80c00415 	stw	r3,16(r16)
 8003598:	80c00015 	stw	r3,0(r16)
 800359c:	003faa06 	br	8003448 <__smakebuf_r+0x3c>

080035a0 <_read_r>:
 80035a0:	defffd04 	addi	sp,sp,-12
 80035a4:	dc000015 	stw	r16,0(sp)
 80035a8:	04020074 	movhi	r16,2049
 80035ac:	842b0604 	addi	r16,r16,-21480
 80035b0:	dc400115 	stw	r17,4(sp)
 80035b4:	80000015 	stw	zero,0(r16)
 80035b8:	2023883a 	mov	r17,r4
 80035bc:	2809883a 	mov	r4,r5
 80035c0:	300b883a 	mov	r5,r6
 80035c4:	380d883a 	mov	r6,r7
 80035c8:	dfc00215 	stw	ra,8(sp)
 80035cc:	8003e580 	call	8003e58 <read>
 80035d0:	1007883a 	mov	r3,r2
 80035d4:	00bfffc4 	movi	r2,-1
 80035d8:	18800626 	beq	r3,r2,80035f4 <_read_r+0x54>
 80035dc:	1805883a 	mov	r2,r3
 80035e0:	dfc00217 	ldw	ra,8(sp)
 80035e4:	dc400117 	ldw	r17,4(sp)
 80035e8:	dc000017 	ldw	r16,0(sp)
 80035ec:	dec00304 	addi	sp,sp,12
 80035f0:	f800283a 	ret
 80035f4:	80800017 	ldw	r2,0(r16)
 80035f8:	103ff826 	beq	r2,zero,80035dc <_read_r+0x3c>
 80035fc:	88800015 	stw	r2,0(r17)
 8003600:	1805883a 	mov	r2,r3
 8003604:	dfc00217 	ldw	ra,8(sp)
 8003608:	dc400117 	ldw	r17,4(sp)
 800360c:	dc000017 	ldw	r16,0(sp)
 8003610:	dec00304 	addi	sp,sp,12
 8003614:	f800283a 	ret

08003618 <_fstat_r>:
 8003618:	defffd04 	addi	sp,sp,-12
 800361c:	dc000015 	stw	r16,0(sp)
 8003620:	04020074 	movhi	r16,2049
 8003624:	842b0604 	addi	r16,r16,-21480
 8003628:	dc400115 	stw	r17,4(sp)
 800362c:	80000015 	stw	zero,0(r16)
 8003630:	2023883a 	mov	r17,r4
 8003634:	2809883a 	mov	r4,r5
 8003638:	300b883a 	mov	r5,r6
 800363c:	dfc00215 	stw	ra,8(sp)
 8003640:	800391c0 	call	800391c <fstat>
 8003644:	1007883a 	mov	r3,r2
 8003648:	00bfffc4 	movi	r2,-1
 800364c:	18800626 	beq	r3,r2,8003668 <_fstat_r+0x50>
 8003650:	1805883a 	mov	r2,r3
 8003654:	dfc00217 	ldw	ra,8(sp)
 8003658:	dc400117 	ldw	r17,4(sp)
 800365c:	dc000017 	ldw	r16,0(sp)
 8003660:	dec00304 	addi	sp,sp,12
 8003664:	f800283a 	ret
 8003668:	80800017 	ldw	r2,0(r16)
 800366c:	103ff826 	beq	r2,zero,8003650 <_fstat_r+0x38>
 8003670:	88800015 	stw	r2,0(r17)
 8003674:	1805883a 	mov	r2,r3
 8003678:	dfc00217 	ldw	ra,8(sp)
 800367c:	dc400117 	ldw	r17,4(sp)
 8003680:	dc000017 	ldw	r16,0(sp)
 8003684:	dec00304 	addi	sp,sp,12
 8003688:	f800283a 	ret

0800368c <_isatty_r>:
 800368c:	defffd04 	addi	sp,sp,-12
 8003690:	dc000015 	stw	r16,0(sp)
 8003694:	04020074 	movhi	r16,2049
 8003698:	842b0604 	addi	r16,r16,-21480
 800369c:	dc400115 	stw	r17,4(sp)
 80036a0:	80000015 	stw	zero,0(r16)
 80036a4:	2023883a 	mov	r17,r4
 80036a8:	2809883a 	mov	r4,r5
 80036ac:	dfc00215 	stw	ra,8(sp)
 80036b0:	8003a500 	call	8003a50 <isatty>
 80036b4:	1007883a 	mov	r3,r2
 80036b8:	00bfffc4 	movi	r2,-1
 80036bc:	18800626 	beq	r3,r2,80036d8 <_isatty_r+0x4c>
 80036c0:	1805883a 	mov	r2,r3
 80036c4:	dfc00217 	ldw	ra,8(sp)
 80036c8:	dc400117 	ldw	r17,4(sp)
 80036cc:	dc000017 	ldw	r16,0(sp)
 80036d0:	dec00304 	addi	sp,sp,12
 80036d4:	f800283a 	ret
 80036d8:	80800017 	ldw	r2,0(r16)
 80036dc:	103ff826 	beq	r2,zero,80036c0 <_isatty_r+0x34>
 80036e0:	88800015 	stw	r2,0(r17)
 80036e4:	1805883a 	mov	r2,r3
 80036e8:	dfc00217 	ldw	ra,8(sp)
 80036ec:	dc400117 	ldw	r17,4(sp)
 80036f0:	dc000017 	ldw	r16,0(sp)
 80036f4:	dec00304 	addi	sp,sp,12
 80036f8:	f800283a 	ret

080036fc <__muldi3>:
 80036fc:	2011883a 	mov	r8,r4
 8003700:	427fffcc 	andi	r9,r8,65535
 8003704:	4018d43a 	srli	r12,r8,16
 8003708:	32bfffcc 	andi	r10,r6,65535
 800370c:	3016d43a 	srli	r11,r6,16
 8003710:	4a85383a 	mul	r2,r9,r10
 8003714:	6295383a 	mul	r10,r12,r10
 8003718:	4ad3383a 	mul	r9,r9,r11
 800371c:	113fffcc 	andi	r4,r2,65535
 8003720:	1004d43a 	srli	r2,r2,16
 8003724:	4a93883a 	add	r9,r9,r10
 8003728:	3807883a 	mov	r3,r7
 800372c:	1245883a 	add	r2,r2,r9
 8003730:	280f883a 	mov	r7,r5
 8003734:	180b883a 	mov	r5,r3
 8003738:	1006943a 	slli	r3,r2,16
 800373c:	defffd04 	addi	sp,sp,-12
 8003740:	dc800215 	stw	r18,8(sp)
 8003744:	1907883a 	add	r3,r3,r4
 8003748:	dc400115 	stw	r17,4(sp)
 800374c:	dc000015 	stw	r16,0(sp)
 8003750:	4165383a 	mul	r18,r8,r5
 8003754:	31e3383a 	mul	r17,r6,r7
 8003758:	1012d43a 	srli	r9,r2,16
 800375c:	62d9383a 	mul	r12,r12,r11
 8003760:	181f883a 	mov	r15,r3
 8003764:	1280022e 	bgeu	r2,r10,8003770 <__muldi3+0x74>
 8003768:	00800074 	movhi	r2,1
 800376c:	6099883a 	add	r12,r12,r2
 8003770:	624d883a 	add	r6,r12,r9
 8003774:	9187883a 	add	r3,r18,r6
 8003778:	88c7883a 	add	r3,r17,r3
 800377c:	7805883a 	mov	r2,r15
 8003780:	dc800217 	ldw	r18,8(sp)
 8003784:	dc400117 	ldw	r17,4(sp)
 8003788:	dc000017 	ldw	r16,0(sp)
 800378c:	dec00304 	addi	sp,sp,12
 8003790:	f800283a 	ret

08003794 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 8003794:	defff804 	addi	sp,sp,-32
 8003798:	dfc00715 	stw	ra,28(sp)
 800379c:	df000615 	stw	fp,24(sp)
 80037a0:	df000604 	addi	fp,sp,24
 80037a4:	e13ffc15 	stw	r4,-16(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 80037a8:	e0bffc17 	ldw	r2,-16(fp)
 80037ac:	1004803a 	cmplt	r2,r2,zero
 80037b0:	1000081e 	bne	r2,zero,80037d4 <close+0x40>
 80037b4:	e0bffc17 	ldw	r2,-16(fp)
 80037b8:	10800324 	muli	r2,r2,12
 80037bc:	1007883a 	mov	r3,r2
 80037c0:	00820034 	movhi	r2,2048
 80037c4:	109f5704 	addi	r2,r2,32092
 80037c8:	1887883a 	add	r3,r3,r2
 80037cc:	e0ffff15 	stw	r3,-4(fp)
 80037d0:	00000106 	br	80037d8 <close+0x44>
 80037d4:	e03fff15 	stw	zero,-4(fp)
 80037d8:	e0bfff17 	ldw	r2,-4(fp)
 80037dc:	e0bffb15 	stw	r2,-20(fp)

  if (fd)
 80037e0:	e0bffb17 	ldw	r2,-20(fp)
 80037e4:	1005003a 	cmpeq	r2,r2,zero
 80037e8:	10001d1e 	bne	r2,zero,8003860 <close+0xcc>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 80037ec:	e0bffb17 	ldw	r2,-20(fp)
 80037f0:	10800017 	ldw	r2,0(r2)
 80037f4:	10800417 	ldw	r2,16(r2)
 80037f8:	1005003a 	cmpeq	r2,r2,zero
 80037fc:	1000071e 	bne	r2,zero,800381c <close+0x88>
 8003800:	e0bffb17 	ldw	r2,-20(fp)
 8003804:	10800017 	ldw	r2,0(r2)
 8003808:	10800417 	ldw	r2,16(r2)
 800380c:	e13ffb17 	ldw	r4,-20(fp)
 8003810:	103ee83a 	callr	r2
 8003814:	e0bffe15 	stw	r2,-8(fp)
 8003818:	00000106 	br	8003820 <close+0x8c>
 800381c:	e03ffe15 	stw	zero,-8(fp)
 8003820:	e0bffe17 	ldw	r2,-8(fp)
 8003824:	e0bffa15 	stw	r2,-24(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 8003828:	e13ffc17 	ldw	r4,-16(fp)
 800382c:	8003fd80 	call	8003fd8 <alt_release_fd>
    if (rval < 0)
 8003830:	e0bffa17 	ldw	r2,-24(fp)
 8003834:	1004403a 	cmpge	r2,r2,zero
 8003838:	1000071e 	bne	r2,zero,8003858 <close+0xc4>
    {
      ALT_ERRNO = -rval;
 800383c:	80038900 	call	8003890 <alt_get_errno>
 8003840:	e0fffa17 	ldw	r3,-24(fp)
 8003844:	00c7c83a 	sub	r3,zero,r3
 8003848:	10c00015 	stw	r3,0(r2)
      return -1;
 800384c:	00bfffc4 	movi	r2,-1
 8003850:	e0bffd15 	stw	r2,-12(fp)
 8003854:	00000806 	br	8003878 <close+0xe4>
    }
    return 0;
 8003858:	e03ffd15 	stw	zero,-12(fp)
 800385c:	00000606 	br	8003878 <close+0xe4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 8003860:	80038900 	call	8003890 <alt_get_errno>
 8003864:	1007883a 	mov	r3,r2
 8003868:	00801444 	movi	r2,81
 800386c:	18800015 	stw	r2,0(r3)
    return -1;
 8003870:	00bfffc4 	movi	r2,-1
 8003874:	e0bffd15 	stw	r2,-12(fp)
 8003878:	e0bffd17 	ldw	r2,-12(fp)
  }
}
 800387c:	e037883a 	mov	sp,fp
 8003880:	dfc00117 	ldw	ra,4(sp)
 8003884:	df000017 	ldw	fp,0(sp)
 8003888:	dec00204 	addi	sp,sp,8
 800388c:	f800283a 	ret

08003890 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 8003890:	defffd04 	addi	sp,sp,-12
 8003894:	dfc00215 	stw	ra,8(sp)
 8003898:	df000115 	stw	fp,4(sp)
 800389c:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 80038a0:	00820074 	movhi	r2,2049
 80038a4:	10a42004 	addi	r2,r2,-28544
 80038a8:	10800017 	ldw	r2,0(r2)
 80038ac:	1005003a 	cmpeq	r2,r2,zero
 80038b0:	1000061e 	bne	r2,zero,80038cc <alt_get_errno+0x3c>
 80038b4:	00820074 	movhi	r2,2049
 80038b8:	10a42004 	addi	r2,r2,-28544
 80038bc:	10800017 	ldw	r2,0(r2)
 80038c0:	103ee83a 	callr	r2
 80038c4:	e0bfff15 	stw	r2,-4(fp)
 80038c8:	00000306 	br	80038d8 <alt_get_errno+0x48>
 80038cc:	00820074 	movhi	r2,2049
 80038d0:	10ab0604 	addi	r2,r2,-21480
 80038d4:	e0bfff15 	stw	r2,-4(fp)
 80038d8:	e0bfff17 	ldw	r2,-4(fp)
}
 80038dc:	e037883a 	mov	sp,fp
 80038e0:	dfc00117 	ldw	ra,4(sp)
 80038e4:	df000017 	ldw	fp,0(sp)
 80038e8:	dec00204 	addi	sp,sp,8
 80038ec:	f800283a 	ret

080038f0 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 80038f0:	defffc04 	addi	sp,sp,-16
 80038f4:	df000315 	stw	fp,12(sp)
 80038f8:	df000304 	addi	fp,sp,12
 80038fc:	e13ffd15 	stw	r4,-12(fp)
 8003900:	e17ffe15 	stw	r5,-8(fp)
 8003904:	e1bfff15 	stw	r6,-4(fp)
  return len;
 8003908:	e0bfff17 	ldw	r2,-4(fp)
}
 800390c:	e037883a 	mov	sp,fp
 8003910:	df000017 	ldw	fp,0(sp)
 8003914:	dec00104 	addi	sp,sp,4
 8003918:	f800283a 	ret

0800391c <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
 800391c:	defff904 	addi	sp,sp,-28
 8003920:	dfc00615 	stw	ra,24(sp)
 8003924:	df000515 	stw	fp,20(sp)
 8003928:	df000504 	addi	fp,sp,20
 800392c:	e13ffc15 	stw	r4,-16(fp)
 8003930:	e17ffd15 	stw	r5,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 8003934:	e0bffc17 	ldw	r2,-16(fp)
 8003938:	1004803a 	cmplt	r2,r2,zero
 800393c:	1000081e 	bne	r2,zero,8003960 <fstat+0x44>
 8003940:	e0bffc17 	ldw	r2,-16(fp)
 8003944:	10800324 	muli	r2,r2,12
 8003948:	1007883a 	mov	r3,r2
 800394c:	00820034 	movhi	r2,2048
 8003950:	109f5704 	addi	r2,r2,32092
 8003954:	1887883a 	add	r3,r3,r2
 8003958:	e0ffff15 	stw	r3,-4(fp)
 800395c:	00000106 	br	8003964 <fstat+0x48>
 8003960:	e03fff15 	stw	zero,-4(fp)
 8003964:	e0bfff17 	ldw	r2,-4(fp)
 8003968:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 800396c:	e0bffb17 	ldw	r2,-20(fp)
 8003970:	1005003a 	cmpeq	r2,r2,zero
 8003974:	1000121e 	bne	r2,zero,80039c0 <fstat+0xa4>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
 8003978:	e0bffb17 	ldw	r2,-20(fp)
 800397c:	10800017 	ldw	r2,0(r2)
 8003980:	10800817 	ldw	r2,32(r2)
 8003984:	1005003a 	cmpeq	r2,r2,zero
 8003988:	1000081e 	bne	r2,zero,80039ac <fstat+0x90>
    {
      return fd->dev->fstat(fd, st);
 800398c:	e0bffb17 	ldw	r2,-20(fp)
 8003990:	10800017 	ldw	r2,0(r2)
 8003994:	10800817 	ldw	r2,32(r2)
 8003998:	e13ffb17 	ldw	r4,-20(fp)
 800399c:	e17ffd17 	ldw	r5,-12(fp)
 80039a0:	103ee83a 	callr	r2
 80039a4:	e0bffe15 	stw	r2,-8(fp)
 80039a8:	00000b06 	br	80039d8 <fstat+0xbc>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
 80039ac:	e0fffd17 	ldw	r3,-12(fp)
 80039b0:	00880004 	movi	r2,8192
 80039b4:	18800115 	stw	r2,4(r3)
      return 0;
 80039b8:	e03ffe15 	stw	zero,-8(fp)
 80039bc:	00000606 	br	80039d8 <fstat+0xbc>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 80039c0:	80039f00 	call	80039f0 <alt_get_errno>
 80039c4:	1007883a 	mov	r3,r2
 80039c8:	00801444 	movi	r2,81
 80039cc:	18800015 	stw	r2,0(r3)
    return -1;
 80039d0:	00bfffc4 	movi	r2,-1
 80039d4:	e0bffe15 	stw	r2,-8(fp)
 80039d8:	e0bffe17 	ldw	r2,-8(fp)
  }
}
 80039dc:	e037883a 	mov	sp,fp
 80039e0:	dfc00117 	ldw	ra,4(sp)
 80039e4:	df000017 	ldw	fp,0(sp)
 80039e8:	dec00204 	addi	sp,sp,8
 80039ec:	f800283a 	ret

080039f0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 80039f0:	defffd04 	addi	sp,sp,-12
 80039f4:	dfc00215 	stw	ra,8(sp)
 80039f8:	df000115 	stw	fp,4(sp)
 80039fc:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 8003a00:	00820074 	movhi	r2,2049
 8003a04:	10a42004 	addi	r2,r2,-28544
 8003a08:	10800017 	ldw	r2,0(r2)
 8003a0c:	1005003a 	cmpeq	r2,r2,zero
 8003a10:	1000061e 	bne	r2,zero,8003a2c <alt_get_errno+0x3c>
 8003a14:	00820074 	movhi	r2,2049
 8003a18:	10a42004 	addi	r2,r2,-28544
 8003a1c:	10800017 	ldw	r2,0(r2)
 8003a20:	103ee83a 	callr	r2
 8003a24:	e0bfff15 	stw	r2,-4(fp)
 8003a28:	00000306 	br	8003a38 <alt_get_errno+0x48>
 8003a2c:	00820074 	movhi	r2,2049
 8003a30:	10ab0604 	addi	r2,r2,-21480
 8003a34:	e0bfff15 	stw	r2,-4(fp)
 8003a38:	e0bfff17 	ldw	r2,-4(fp)
}
 8003a3c:	e037883a 	mov	sp,fp
 8003a40:	dfc00117 	ldw	ra,4(sp)
 8003a44:	df000017 	ldw	fp,0(sp)
 8003a48:	dec00204 	addi	sp,sp,8
 8003a4c:	f800283a 	ret

08003a50 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
 8003a50:	deffeb04 	addi	sp,sp,-84
 8003a54:	dfc01415 	stw	ra,80(sp)
 8003a58:	df001315 	stw	fp,76(sp)
 8003a5c:	df001304 	addi	fp,sp,76
 8003a60:	e13ffd15 	stw	r4,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 8003a64:	e0bffd17 	ldw	r2,-12(fp)
 8003a68:	1004803a 	cmplt	r2,r2,zero
 8003a6c:	1000081e 	bne	r2,zero,8003a90 <isatty+0x40>
 8003a70:	e0bffd17 	ldw	r2,-12(fp)
 8003a74:	10800324 	muli	r2,r2,12
 8003a78:	1007883a 	mov	r3,r2
 8003a7c:	00820034 	movhi	r2,2048
 8003a80:	109f5704 	addi	r2,r2,32092
 8003a84:	1887883a 	add	r3,r3,r2
 8003a88:	e0ffff15 	stw	r3,-4(fp)
 8003a8c:	00000106 	br	8003a94 <isatty+0x44>
 8003a90:	e03fff15 	stw	zero,-4(fp)
 8003a94:	e0bfff17 	ldw	r2,-4(fp)
 8003a98:	e0bfed15 	stw	r2,-76(fp)
  
  if (fd)
 8003a9c:	e0bfed17 	ldw	r2,-76(fp)
 8003aa0:	1005003a 	cmpeq	r2,r2,zero
 8003aa4:	10000f1e 	bne	r2,zero,8003ae4 <isatty+0x94>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
 8003aa8:	e0bfed17 	ldw	r2,-76(fp)
 8003aac:	10800017 	ldw	r2,0(r2)
 8003ab0:	10800817 	ldw	r2,32(r2)
 8003ab4:	1004c03a 	cmpne	r2,r2,zero
 8003ab8:	1000031e 	bne	r2,zero,8003ac8 <isatty+0x78>
    {
      return 1;
 8003abc:	00800044 	movi	r2,1
 8003ac0:	e0bffe15 	stw	r2,-8(fp)
 8003ac4:	00000c06 	br	8003af8 <isatty+0xa8>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
 8003ac8:	e17fee04 	addi	r5,fp,-72
 8003acc:	e13ffd17 	ldw	r4,-12(fp)
 8003ad0:	800391c0 	call	800391c <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
 8003ad4:	e0bfef17 	ldw	r2,-68(fp)
 8003ad8:	10880020 	cmpeqi	r2,r2,8192
 8003adc:	e0bffe15 	stw	r2,-8(fp)
 8003ae0:	00000506 	br	8003af8 <isatty+0xa8>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 8003ae4:	8003b100 	call	8003b10 <alt_get_errno>
 8003ae8:	1007883a 	mov	r3,r2
 8003aec:	00801444 	movi	r2,81
 8003af0:	18800015 	stw	r2,0(r3)
    return 0;
 8003af4:	e03ffe15 	stw	zero,-8(fp)
 8003af8:	e0bffe17 	ldw	r2,-8(fp)
  }
}
 8003afc:	e037883a 	mov	sp,fp
 8003b00:	dfc00117 	ldw	ra,4(sp)
 8003b04:	df000017 	ldw	fp,0(sp)
 8003b08:	dec00204 	addi	sp,sp,8
 8003b0c:	f800283a 	ret

08003b10 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 8003b10:	defffd04 	addi	sp,sp,-12
 8003b14:	dfc00215 	stw	ra,8(sp)
 8003b18:	df000115 	stw	fp,4(sp)
 8003b1c:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 8003b20:	00820074 	movhi	r2,2049
 8003b24:	10a42004 	addi	r2,r2,-28544
 8003b28:	10800017 	ldw	r2,0(r2)
 8003b2c:	1005003a 	cmpeq	r2,r2,zero
 8003b30:	1000061e 	bne	r2,zero,8003b4c <alt_get_errno+0x3c>
 8003b34:	00820074 	movhi	r2,2049
 8003b38:	10a42004 	addi	r2,r2,-28544
 8003b3c:	10800017 	ldw	r2,0(r2)
 8003b40:	103ee83a 	callr	r2
 8003b44:	e0bfff15 	stw	r2,-4(fp)
 8003b48:	00000306 	br	8003b58 <alt_get_errno+0x48>
 8003b4c:	00820074 	movhi	r2,2049
 8003b50:	10ab0604 	addi	r2,r2,-21480
 8003b54:	e0bfff15 	stw	r2,-4(fp)
 8003b58:	e0bfff17 	ldw	r2,-4(fp)
}
 8003b5c:	e037883a 	mov	sp,fp
 8003b60:	dfc00117 	ldw	ra,4(sp)
 8003b64:	df000017 	ldw	fp,0(sp)
 8003b68:	dec00204 	addi	sp,sp,8
 8003b6c:	f800283a 	ret

08003b70 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 8003b70:	defffe04 	addi	sp,sp,-8
 8003b74:	dfc00115 	stw	ra,4(sp)
 8003b78:	df000015 	stw	fp,0(sp)
 8003b7c:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
 8003b80:	01020074 	movhi	r4,2049
 8003b84:	21242704 	addi	r4,r4,-28516
 8003b88:	01420034 	movhi	r5,2048
 8003b8c:	295d4b04 	addi	r5,r5,29996
 8003b90:	01820074 	movhi	r6,2049
 8003b94:	31a42704 	addi	r6,r6,-28516
 8003b98:	8003bf00 	call	8003bf0 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
 8003b9c:	01020034 	movhi	r4,2048
 8003ba0:	21000804 	addi	r4,r4,32
 8003ba4:	01420034 	movhi	r5,2048
 8003ba8:	29400804 	addi	r5,r5,32
 8003bac:	01820034 	movhi	r6,2048
 8003bb0:	31806d04 	addi	r6,r6,436
 8003bb4:	8003bf00 	call	8003bf0 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
 8003bb8:	01020034 	movhi	r4,2048
 8003bbc:	211c7804 	addi	r4,r4,29152
 8003bc0:	01420034 	movhi	r5,2048
 8003bc4:	295c7804 	addi	r5,r5,29152
 8003bc8:	01820034 	movhi	r6,2048
 8003bcc:	319d4b04 	addi	r6,r6,29996
 8003bd0:	8003bf00 	call	8003bf0 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 8003bd4:	8005ff80 	call	8005ff8 <alt_dcache_flush_all>
  alt_icache_flush_all();
 8003bd8:	80062180 	call	8006218 <alt_icache_flush_all>
}
 8003bdc:	e037883a 	mov	sp,fp
 8003be0:	dfc00117 	ldw	ra,4(sp)
 8003be4:	df000017 	ldw	fp,0(sp)
 8003be8:	dec00204 	addi	sp,sp,8
 8003bec:	f800283a 	ret

08003bf0 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
 8003bf0:	defffc04 	addi	sp,sp,-16
 8003bf4:	df000315 	stw	fp,12(sp)
 8003bf8:	df000304 	addi	fp,sp,12
 8003bfc:	e13ffd15 	stw	r4,-12(fp)
 8003c00:	e17ffe15 	stw	r5,-8(fp)
 8003c04:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
 8003c08:	e0fffe17 	ldw	r3,-8(fp)
 8003c0c:	e0bffd17 	ldw	r2,-12(fp)
 8003c10:	18800e26 	beq	r3,r2,8003c4c <alt_load_section+0x5c>
  {
    while( to != end )
 8003c14:	00000a06 	br	8003c40 <alt_load_section+0x50>
    {
      *to++ = *from++;
 8003c18:	e0bffd17 	ldw	r2,-12(fp)
 8003c1c:	10c00017 	ldw	r3,0(r2)
 8003c20:	e0bffe17 	ldw	r2,-8(fp)
 8003c24:	10c00015 	stw	r3,0(r2)
 8003c28:	e0bffe17 	ldw	r2,-8(fp)
 8003c2c:	10800104 	addi	r2,r2,4
 8003c30:	e0bffe15 	stw	r2,-8(fp)
 8003c34:	e0bffd17 	ldw	r2,-12(fp)
 8003c38:	10800104 	addi	r2,r2,4
 8003c3c:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
 8003c40:	e0fffe17 	ldw	r3,-8(fp)
 8003c44:	e0bfff17 	ldw	r2,-4(fp)
 8003c48:	18bff31e 	bne	r3,r2,8003c18 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
 8003c4c:	e037883a 	mov	sp,fp
 8003c50:	df000017 	ldw	fp,0(sp)
 8003c54:	dec00104 	addi	sp,sp,4
 8003c58:	f800283a 	ret

08003c5c <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
 8003c5c:	defff804 	addi	sp,sp,-32
 8003c60:	dfc00715 	stw	ra,28(sp)
 8003c64:	df000615 	stw	fp,24(sp)
 8003c68:	df000604 	addi	fp,sp,24
 8003c6c:	e13ffc15 	stw	r4,-16(fp)
 8003c70:	e17ffd15 	stw	r5,-12(fp)
 8003c74:	e1bffe15 	stw	r6,-8(fp)
  alt_fd* fd;
  off_t   rc = 0; 
 8003c78:	e03ffa15 	stw	zero,-24(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 8003c7c:	e0bffc17 	ldw	r2,-16(fp)
 8003c80:	1004803a 	cmplt	r2,r2,zero
 8003c84:	1000081e 	bne	r2,zero,8003ca8 <lseek+0x4c>
 8003c88:	e0bffc17 	ldw	r2,-16(fp)
 8003c8c:	10800324 	muli	r2,r2,12
 8003c90:	1007883a 	mov	r3,r2
 8003c94:	00820034 	movhi	r2,2048
 8003c98:	109f5704 	addi	r2,r2,32092
 8003c9c:	1887883a 	add	r3,r3,r2
 8003ca0:	e0ffff15 	stw	r3,-4(fp)
 8003ca4:	00000106 	br	8003cac <lseek+0x50>
 8003ca8:	e03fff15 	stw	zero,-4(fp)
 8003cac:	e0bfff17 	ldw	r2,-4(fp)
 8003cb0:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd) 
 8003cb4:	e0bffb17 	ldw	r2,-20(fp)
 8003cb8:	1005003a 	cmpeq	r2,r2,zero
 8003cbc:	1000111e 	bne	r2,zero,8003d04 <lseek+0xa8>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
 8003cc0:	e0bffb17 	ldw	r2,-20(fp)
 8003cc4:	10800017 	ldw	r2,0(r2)
 8003cc8:	10800717 	ldw	r2,28(r2)
 8003ccc:	1005003a 	cmpeq	r2,r2,zero
 8003cd0:	1000091e 	bne	r2,zero,8003cf8 <lseek+0x9c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
 8003cd4:	e0bffb17 	ldw	r2,-20(fp)
 8003cd8:	10800017 	ldw	r2,0(r2)
 8003cdc:	10800717 	ldw	r2,28(r2)
 8003ce0:	e13ffb17 	ldw	r4,-20(fp)
 8003ce4:	e17ffd17 	ldw	r5,-12(fp)
 8003ce8:	e1bffe17 	ldw	r6,-8(fp)
 8003cec:	103ee83a 	callr	r2
 8003cf0:	e0bffa15 	stw	r2,-24(fp)
 8003cf4:	00000506 	br	8003d0c <lseek+0xb0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
 8003cf8:	00bfde84 	movi	r2,-134
 8003cfc:	e0bffa15 	stw	r2,-24(fp)
 8003d00:	00000206 	br	8003d0c <lseek+0xb0>
    }
  }
  else  
  {
    rc = -EBADFD;
 8003d04:	00bfebc4 	movi	r2,-81
 8003d08:	e0bffa15 	stw	r2,-24(fp)
  }

  if (rc < 0)
 8003d0c:	e0bffa17 	ldw	r2,-24(fp)
 8003d10:	1004403a 	cmpge	r2,r2,zero
 8003d14:	1000071e 	bne	r2,zero,8003d34 <lseek+0xd8>
  {
    ALT_ERRNO = -rc;
 8003d18:	8003d4c0 	call	8003d4c <alt_get_errno>
 8003d1c:	1007883a 	mov	r3,r2
 8003d20:	e0bffa17 	ldw	r2,-24(fp)
 8003d24:	0085c83a 	sub	r2,zero,r2
 8003d28:	18800015 	stw	r2,0(r3)
    rc = -1;
 8003d2c:	00bfffc4 	movi	r2,-1
 8003d30:	e0bffa15 	stw	r2,-24(fp)
  }

  return rc;
 8003d34:	e0bffa17 	ldw	r2,-24(fp)
}
 8003d38:	e037883a 	mov	sp,fp
 8003d3c:	dfc00117 	ldw	ra,4(sp)
 8003d40:	df000017 	ldw	fp,0(sp)
 8003d44:	dec00204 	addi	sp,sp,8
 8003d48:	f800283a 	ret

08003d4c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 8003d4c:	defffd04 	addi	sp,sp,-12
 8003d50:	dfc00215 	stw	ra,8(sp)
 8003d54:	df000115 	stw	fp,4(sp)
 8003d58:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 8003d5c:	00820074 	movhi	r2,2049
 8003d60:	10a42004 	addi	r2,r2,-28544
 8003d64:	10800017 	ldw	r2,0(r2)
 8003d68:	1005003a 	cmpeq	r2,r2,zero
 8003d6c:	1000061e 	bne	r2,zero,8003d88 <alt_get_errno+0x3c>
 8003d70:	00820074 	movhi	r2,2049
 8003d74:	10a42004 	addi	r2,r2,-28544
 8003d78:	10800017 	ldw	r2,0(r2)
 8003d7c:	103ee83a 	callr	r2
 8003d80:	e0bfff15 	stw	r2,-4(fp)
 8003d84:	00000306 	br	8003d94 <alt_get_errno+0x48>
 8003d88:	00820074 	movhi	r2,2049
 8003d8c:	10ab0604 	addi	r2,r2,-21480
 8003d90:	e0bfff15 	stw	r2,-4(fp)
 8003d94:	e0bfff17 	ldw	r2,-4(fp)
}
 8003d98:	e037883a 	mov	sp,fp
 8003d9c:	dfc00117 	ldw	ra,4(sp)
 8003da0:	df000017 	ldw	fp,0(sp)
 8003da4:	dec00204 	addi	sp,sp,8
 8003da8:	f800283a 	ret

08003dac <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 8003dac:	defffd04 	addi	sp,sp,-12
 8003db0:	dfc00215 	stw	ra,8(sp)
 8003db4:	df000115 	stw	fp,4(sp)
 8003db8:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 8003dbc:	0009883a 	mov	r4,zero
 8003dc0:	80042a40 	call	80042a4 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 8003dc4:	80042d80 	call	80042d8 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 8003dc8:	01020034 	movhi	r4,2048
 8003dcc:	211c9a04 	addi	r4,r4,29288
 8003dd0:	01420034 	movhi	r5,2048
 8003dd4:	295c9a04 	addi	r5,r5,29288
 8003dd8:	01820034 	movhi	r6,2048
 8003ddc:	319c9f04 	addi	r6,r6,29308
 8003de0:	80065d80 	call	80065d8 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
 8003de4:	80061500 	call	8006150 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
 8003de8:	01020034 	movhi	r4,2048
 8003dec:	21186d04 	addi	r4,r4,25012
 8003df0:	8006dd40 	call	8006dd4 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 8003df4:	d126f017 	ldw	r4,-25664(gp)
 8003df8:	d166f117 	ldw	r5,-25660(gp)
 8003dfc:	d1a6f217 	ldw	r6,-25656(gp)
 8003e00:	80002000 	call	8000200 <main>
 8003e04:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
 8003e08:	01000044 	movi	r4,1
 8003e0c:	80037940 	call	8003794 <close>
  exit (result);
 8003e10:	e13fff17 	ldw	r4,-4(fp)
 8003e14:	8006de80 	call	8006de8 <exit>

08003e18 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
 8003e18:	defffe04 	addi	sp,sp,-8
 8003e1c:	df000115 	stw	fp,4(sp)
 8003e20:	df000104 	addi	fp,sp,4
 8003e24:	e13fff15 	stw	r4,-4(fp)
}
 8003e28:	e037883a 	mov	sp,fp
 8003e2c:	df000017 	ldw	fp,0(sp)
 8003e30:	dec00104 	addi	sp,sp,4
 8003e34:	f800283a 	ret

08003e38 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
 8003e38:	defffe04 	addi	sp,sp,-8
 8003e3c:	df000115 	stw	fp,4(sp)
 8003e40:	df000104 	addi	fp,sp,4
 8003e44:	e13fff15 	stw	r4,-4(fp)
}
 8003e48:	e037883a 	mov	sp,fp
 8003e4c:	df000017 	ldw	fp,0(sp)
 8003e50:	dec00104 	addi	sp,sp,4
 8003e54:	f800283a 	ret

08003e58 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
 8003e58:	defff704 	addi	sp,sp,-36
 8003e5c:	dfc00815 	stw	ra,32(sp)
 8003e60:	df000715 	stw	fp,28(sp)
 8003e64:	df000704 	addi	fp,sp,28
 8003e68:	e13ffb15 	stw	r4,-20(fp)
 8003e6c:	e17ffc15 	stw	r5,-16(fp)
 8003e70:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 8003e74:	e0bffb17 	ldw	r2,-20(fp)
 8003e78:	1004803a 	cmplt	r2,r2,zero
 8003e7c:	1000081e 	bne	r2,zero,8003ea0 <read+0x48>
 8003e80:	e0bffb17 	ldw	r2,-20(fp)
 8003e84:	10800324 	muli	r2,r2,12
 8003e88:	1007883a 	mov	r3,r2
 8003e8c:	00820034 	movhi	r2,2048
 8003e90:	109f5704 	addi	r2,r2,32092
 8003e94:	1887883a 	add	r3,r3,r2
 8003e98:	e0ffff15 	stw	r3,-4(fp)
 8003e9c:	00000106 	br	8003ea4 <read+0x4c>
 8003ea0:	e03fff15 	stw	zero,-4(fp)
 8003ea4:	e0bfff17 	ldw	r2,-4(fp)
 8003ea8:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
 8003eac:	e0bffa17 	ldw	r2,-24(fp)
 8003eb0:	1005003a 	cmpeq	r2,r2,zero
 8003eb4:	1000241e 	bne	r2,zero,8003f48 <read+0xf0>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 8003eb8:	e0bffa17 	ldw	r2,-24(fp)
 8003ebc:	10800217 	ldw	r2,8(r2)
 8003ec0:	108000cc 	andi	r2,r2,3
 8003ec4:	10800060 	cmpeqi	r2,r2,1
 8003ec8:	10001a1e 	bne	r2,zero,8003f34 <read+0xdc>
 8003ecc:	e0bffa17 	ldw	r2,-24(fp)
 8003ed0:	10800017 	ldw	r2,0(r2)
 8003ed4:	10800517 	ldw	r2,20(r2)
 8003ed8:	1005003a 	cmpeq	r2,r2,zero
 8003edc:	1000151e 	bne	r2,zero,8003f34 <read+0xdc>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
 8003ee0:	e0bffa17 	ldw	r2,-24(fp)
 8003ee4:	10800017 	ldw	r2,0(r2)
 8003ee8:	10800517 	ldw	r2,20(r2)
 8003eec:	e17ffc17 	ldw	r5,-16(fp)
 8003ef0:	e1bffd17 	ldw	r6,-12(fp)
 8003ef4:	e13ffa17 	ldw	r4,-24(fp)
 8003ef8:	103ee83a 	callr	r2
 8003efc:	e0bff915 	stw	r2,-28(fp)
 8003f00:	e0bff917 	ldw	r2,-28(fp)
 8003f04:	1004403a 	cmpge	r2,r2,zero
 8003f08:	1000071e 	bne	r2,zero,8003f28 <read+0xd0>
        {
          ALT_ERRNO = -rval;
 8003f0c:	8003f780 	call	8003f78 <alt_get_errno>
 8003f10:	e0fff917 	ldw	r3,-28(fp)
 8003f14:	00c7c83a 	sub	r3,zero,r3
 8003f18:	10c00015 	stw	r3,0(r2)
          return -1;
 8003f1c:	00bfffc4 	movi	r2,-1
 8003f20:	e0bffe15 	stw	r2,-8(fp)
 8003f24:	00000e06 	br	8003f60 <read+0x108>
        }
        return rval;
 8003f28:	e0bff917 	ldw	r2,-28(fp)
 8003f2c:	e0bffe15 	stw	r2,-8(fp)
 8003f30:	00000b06 	br	8003f60 <read+0x108>
      }
      else
      {
        ALT_ERRNO = EACCES;
 8003f34:	8003f780 	call	8003f78 <alt_get_errno>
 8003f38:	1007883a 	mov	r3,r2
 8003f3c:	00800344 	movi	r2,13
 8003f40:	18800015 	stw	r2,0(r3)
 8003f44:	00000406 	br	8003f58 <read+0x100>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
 8003f48:	8003f780 	call	8003f78 <alt_get_errno>
 8003f4c:	1007883a 	mov	r3,r2
 8003f50:	00801444 	movi	r2,81
 8003f54:	18800015 	stw	r2,0(r3)
  }
  return -1;
 8003f58:	00bfffc4 	movi	r2,-1
 8003f5c:	e0bffe15 	stw	r2,-8(fp)
 8003f60:	e0bffe17 	ldw	r2,-8(fp)
}
 8003f64:	e037883a 	mov	sp,fp
 8003f68:	dfc00117 	ldw	ra,4(sp)
 8003f6c:	df000017 	ldw	fp,0(sp)
 8003f70:	dec00204 	addi	sp,sp,8
 8003f74:	f800283a 	ret

08003f78 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 8003f78:	defffd04 	addi	sp,sp,-12
 8003f7c:	dfc00215 	stw	ra,8(sp)
 8003f80:	df000115 	stw	fp,4(sp)
 8003f84:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 8003f88:	00820074 	movhi	r2,2049
 8003f8c:	10a42004 	addi	r2,r2,-28544
 8003f90:	10800017 	ldw	r2,0(r2)
 8003f94:	1005003a 	cmpeq	r2,r2,zero
 8003f98:	1000061e 	bne	r2,zero,8003fb4 <alt_get_errno+0x3c>
 8003f9c:	00820074 	movhi	r2,2049
 8003fa0:	10a42004 	addi	r2,r2,-28544
 8003fa4:	10800017 	ldw	r2,0(r2)
 8003fa8:	103ee83a 	callr	r2
 8003fac:	e0bfff15 	stw	r2,-4(fp)
 8003fb0:	00000306 	br	8003fc0 <alt_get_errno+0x48>
 8003fb4:	00820074 	movhi	r2,2049
 8003fb8:	10ab0604 	addi	r2,r2,-21480
 8003fbc:	e0bfff15 	stw	r2,-4(fp)
 8003fc0:	e0bfff17 	ldw	r2,-4(fp)
}
 8003fc4:	e037883a 	mov	sp,fp
 8003fc8:	dfc00117 	ldw	ra,4(sp)
 8003fcc:	df000017 	ldw	fp,0(sp)
 8003fd0:	dec00204 	addi	sp,sp,8
 8003fd4:	f800283a 	ret

08003fd8 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 8003fd8:	defffe04 	addi	sp,sp,-8
 8003fdc:	df000115 	stw	fp,4(sp)
 8003fe0:	df000104 	addi	fp,sp,4
 8003fe4:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
 8003fe8:	e0bfff17 	ldw	r2,-4(fp)
 8003fec:	108000d0 	cmplti	r2,r2,3
 8003ff0:	10000d1e 	bne	r2,zero,8004028 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
 8003ff4:	e0bfff17 	ldw	r2,-4(fp)
 8003ff8:	00c20034 	movhi	r3,2048
 8003ffc:	18df5704 	addi	r3,r3,32092
 8004000:	10800324 	muli	r2,r2,12
 8004004:	10c5883a 	add	r2,r2,r3
 8004008:	10800204 	addi	r2,r2,8
 800400c:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
 8004010:	e0bfff17 	ldw	r2,-4(fp)
 8004014:	00c20034 	movhi	r3,2048
 8004018:	18df5704 	addi	r3,r3,32092
 800401c:	10800324 	muli	r2,r2,12
 8004020:	10c5883a 	add	r2,r2,r3
 8004024:	10000015 	stw	zero,0(r2)
  }
}
 8004028:	e037883a 	mov	sp,fp
 800402c:	df000017 	ldw	fp,0(sp)
 8004030:	dec00104 	addi	sp,sp,4
 8004034:	f800283a 	ret

08004038 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
 8004038:	defff804 	addi	sp,sp,-32
 800403c:	df000715 	stw	fp,28(sp)
 8004040:	df000704 	addi	fp,sp,28
 8004044:	e13ffe15 	stw	r4,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8004048:	0005303a 	rdctl	r2,status
 800404c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8004050:	e0fffb17 	ldw	r3,-20(fp)
 8004054:	00bfff84 	movi	r2,-2
 8004058:	1884703a 	and	r2,r3,r2
 800405c:	1001703a 	wrctl	status,r2
  
  return context;
 8004060:	e0bffb17 	ldw	r2,-20(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
 8004064:	e0bffd15 	stw	r2,-12(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
 8004068:	d0a00a17 	ldw	r2,-32728(gp)
 800406c:	10c000c4 	addi	r3,r2,3
 8004070:	00bfff04 	movi	r2,-4
 8004074:	1884703a 	and	r2,r3,r2
 8004078:	d0a00a15 	stw	r2,-32728(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
 800407c:	d0e00a17 	ldw	r3,-32728(gp)
 8004080:	e0bffe17 	ldw	r2,-8(fp)
 8004084:	1887883a 	add	r3,r3,r2
 8004088:	00840034 	movhi	r2,4096
 800408c:	10800004 	addi	r2,r2,0
 8004090:	10c0072e 	bgeu	r2,r3,80040b0 <sbrk+0x78>
 8004094:	e0bffd17 	ldw	r2,-12(fp)
 8004098:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 800409c:	e0bffa17 	ldw	r2,-24(fp)
 80040a0:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
 80040a4:	00bfffc4 	movi	r2,-1
 80040a8:	e0bfff15 	stw	r2,-4(fp)
 80040ac:	00000c06 	br	80040e0 <sbrk+0xa8>
  }
#endif

  prev_heap_end = heap_end; 
 80040b0:	d0a00a17 	ldw	r2,-32728(gp)
 80040b4:	e0bffc15 	stw	r2,-16(fp)
  heap_end += incr; 
 80040b8:	d0e00a17 	ldw	r3,-32728(gp)
 80040bc:	e0bffe17 	ldw	r2,-8(fp)
 80040c0:	1885883a 	add	r2,r3,r2
 80040c4:	d0a00a15 	stw	r2,-32728(gp)
 80040c8:	e0bffd17 	ldw	r2,-12(fp)
 80040cc:	e0bff915 	stw	r2,-28(fp)
 80040d0:	e0bff917 	ldw	r2,-28(fp)
 80040d4:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
 80040d8:	e0bffc17 	ldw	r2,-16(fp)
 80040dc:	e0bfff15 	stw	r2,-4(fp)
 80040e0:	e0bfff17 	ldw	r2,-4(fp)
} 
 80040e4:	e037883a 	mov	sp,fp
 80040e8:	df000017 	ldw	fp,0(sp)
 80040ec:	dec00104 	addi	sp,sp,4
 80040f0:	f800283a 	ret

080040f4 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
 80040f4:	defffd04 	addi	sp,sp,-12
 80040f8:	dfc00215 	stw	ra,8(sp)
 80040fc:	df000115 	stw	fp,4(sp)
 8004100:	df000104 	addi	fp,sp,4
 8004104:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
 8004108:	e13fff17 	ldw	r4,-4(fp)
 800410c:	8005eac0 	call	8005eac <alt_busy_sleep>
}
 8004110:	e037883a 	mov	sp,fp
 8004114:	dfc00117 	ldw	ra,4(sp)
 8004118:	df000017 	ldw	fp,0(sp)
 800411c:	dec00204 	addi	sp,sp,8
 8004120:	f800283a 	ret

08004124 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
 8004124:	defff704 	addi	sp,sp,-36
 8004128:	dfc00815 	stw	ra,32(sp)
 800412c:	df000715 	stw	fp,28(sp)
 8004130:	df000704 	addi	fp,sp,28
 8004134:	e13ffb15 	stw	r4,-20(fp)
 8004138:	e17ffc15 	stw	r5,-16(fp)
 800413c:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 8004140:	e0bffb17 	ldw	r2,-20(fp)
 8004144:	1004803a 	cmplt	r2,r2,zero
 8004148:	1000081e 	bne	r2,zero,800416c <write+0x48>
 800414c:	e0bffb17 	ldw	r2,-20(fp)
 8004150:	10800324 	muli	r2,r2,12
 8004154:	1007883a 	mov	r3,r2
 8004158:	00820034 	movhi	r2,2048
 800415c:	109f5704 	addi	r2,r2,32092
 8004160:	1887883a 	add	r3,r3,r2
 8004164:	e0ffff15 	stw	r3,-4(fp)
 8004168:	00000106 	br	8004170 <write+0x4c>
 800416c:	e03fff15 	stw	zero,-4(fp)
 8004170:	e0bfff17 	ldw	r2,-4(fp)
 8004174:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
 8004178:	e0bffa17 	ldw	r2,-24(fp)
 800417c:	1005003a 	cmpeq	r2,r2,zero
 8004180:	1000241e 	bne	r2,zero,8004214 <write+0xf0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
 8004184:	e0bffa17 	ldw	r2,-24(fp)
 8004188:	10800217 	ldw	r2,8(r2)
 800418c:	108000cc 	andi	r2,r2,3
 8004190:	1005003a 	cmpeq	r2,r2,zero
 8004194:	10001a1e 	bne	r2,zero,8004200 <write+0xdc>
 8004198:	e0bffa17 	ldw	r2,-24(fp)
 800419c:	10800017 	ldw	r2,0(r2)
 80041a0:	10800617 	ldw	r2,24(r2)
 80041a4:	1005003a 	cmpeq	r2,r2,zero
 80041a8:	1000151e 	bne	r2,zero,8004200 <write+0xdc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
 80041ac:	e0bffa17 	ldw	r2,-24(fp)
 80041b0:	10800017 	ldw	r2,0(r2)
 80041b4:	10800617 	ldw	r2,24(r2)
 80041b8:	e17ffc17 	ldw	r5,-16(fp)
 80041bc:	e1bffd17 	ldw	r6,-12(fp)
 80041c0:	e13ffa17 	ldw	r4,-24(fp)
 80041c4:	103ee83a 	callr	r2
 80041c8:	e0bff915 	stw	r2,-28(fp)
 80041cc:	e0bff917 	ldw	r2,-28(fp)
 80041d0:	1004403a 	cmpge	r2,r2,zero
 80041d4:	1000071e 	bne	r2,zero,80041f4 <write+0xd0>
      {
        ALT_ERRNO = -rval;
 80041d8:	80042440 	call	8004244 <alt_get_errno>
 80041dc:	e0fff917 	ldw	r3,-28(fp)
 80041e0:	00c7c83a 	sub	r3,zero,r3
 80041e4:	10c00015 	stw	r3,0(r2)
        return -1;
 80041e8:	00bfffc4 	movi	r2,-1
 80041ec:	e0bffe15 	stw	r2,-8(fp)
 80041f0:	00000e06 	br	800422c <write+0x108>
      }
      return rval;
 80041f4:	e0bff917 	ldw	r2,-28(fp)
 80041f8:	e0bffe15 	stw	r2,-8(fp)
 80041fc:	00000b06 	br	800422c <write+0x108>
    }
    else
    {
      ALT_ERRNO = EACCES;
 8004200:	80042440 	call	8004244 <alt_get_errno>
 8004204:	1007883a 	mov	r3,r2
 8004208:	00800344 	movi	r2,13
 800420c:	18800015 	stw	r2,0(r3)
 8004210:	00000406 	br	8004224 <write+0x100>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
 8004214:	80042440 	call	8004244 <alt_get_errno>
 8004218:	1007883a 	mov	r3,r2
 800421c:	00801444 	movi	r2,81
 8004220:	18800015 	stw	r2,0(r3)
  }
  return -1;
 8004224:	00bfffc4 	movi	r2,-1
 8004228:	e0bffe15 	stw	r2,-8(fp)
 800422c:	e0bffe17 	ldw	r2,-8(fp)
}
 8004230:	e037883a 	mov	sp,fp
 8004234:	dfc00117 	ldw	ra,4(sp)
 8004238:	df000017 	ldw	fp,0(sp)
 800423c:	dec00204 	addi	sp,sp,8
 8004240:	f800283a 	ret

08004244 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 8004244:	defffd04 	addi	sp,sp,-12
 8004248:	dfc00215 	stw	ra,8(sp)
 800424c:	df000115 	stw	fp,4(sp)
 8004250:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 8004254:	00820074 	movhi	r2,2049
 8004258:	10a42004 	addi	r2,r2,-28544
 800425c:	10800017 	ldw	r2,0(r2)
 8004260:	1005003a 	cmpeq	r2,r2,zero
 8004264:	1000061e 	bne	r2,zero,8004280 <alt_get_errno+0x3c>
 8004268:	00820074 	movhi	r2,2049
 800426c:	10a42004 	addi	r2,r2,-28544
 8004270:	10800017 	ldw	r2,0(r2)
 8004274:	103ee83a 	callr	r2
 8004278:	e0bfff15 	stw	r2,-4(fp)
 800427c:	00000306 	br	800428c <alt_get_errno+0x48>
 8004280:	00820074 	movhi	r2,2049
 8004284:	10ab0604 	addi	r2,r2,-21480
 8004288:	e0bfff15 	stw	r2,-4(fp)
 800428c:	e0bfff17 	ldw	r2,-4(fp)
}
 8004290:	e037883a 	mov	sp,fp
 8004294:	dfc00117 	ldw	ra,4(sp)
 8004298:	df000017 	ldw	fp,0(sp)
 800429c:	dec00204 	addi	sp,sp,8
 80042a0:	f800283a 	ret

080042a4 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 80042a4:	defffd04 	addi	sp,sp,-12
 80042a8:	dfc00215 	stw	ra,8(sp)
 80042ac:	df000115 	stw	fp,4(sp)
 80042b0:	df000104 	addi	fp,sp,4
 80042b4:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_IRQ_INIT ( CPU_0, cpu_0);
 80042b8:	8006ab80 	call	8006ab8 <altera_nios2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 80042bc:	00800044 	movi	r2,1
 80042c0:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 80042c4:	e037883a 	mov	sp,fp
 80042c8:	dfc00117 	ldw	ra,4(sp)
 80042cc:	df000017 	ldw	fp,0(sp)
 80042d0:	dec00204 	addi	sp,sp,8
 80042d4:	f800283a 	ret

080042d8 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 80042d8:	defffe04 	addi	sp,sp,-8
 80042dc:	dfc00115 	stw	ra,4(sp)
 80042e0:	df000015 	stw	fp,0(sp)
 80042e4:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
 80042e8:	01020034 	movhi	r4,2048
 80042ec:	211fc104 	addi	r4,r4,32516
 80042f0:	000b883a 	mov	r5,zero
 80042f4:	000d883a 	mov	r6,zero
 80042f8:	80044b40 	call	80044b4 <altera_avalon_jtag_uart_init>
 80042fc:	01020034 	movhi	r4,2048
 8004300:	211fb704 	addi	r4,r4,32476
 8004304:	80043340 	call	8004334 <alt_dev_reg>
    ALTERA_AVALON_LCD_16207_INIT ( LCD_0, lcd_0);
 8004308:	01020074 	movhi	r4,2049
 800430c:	2123d904 	addi	r4,r4,-28828
 8004310:	8005bc40 	call	8005bc4 <altera_avalon_lcd_16207_init>
 8004314:	01020074 	movhi	r4,2049
 8004318:	2123cf04 	addi	r4,r4,-28868
 800431c:	80043340 	call	8004334 <alt_dev_reg>
    ALTERA_AVALON_SYSID_INIT ( SYSID, sysid);
}
 8004320:	e037883a 	mov	sp,fp
 8004324:	dfc00117 	ldw	ra,4(sp)
 8004328:	df000017 	ldw	fp,0(sp)
 800432c:	dec00204 	addi	sp,sp,8
 8004330:	f800283a 	ret

08004334 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
 8004334:	defffd04 	addi	sp,sp,-12
 8004338:	dfc00215 	stw	ra,8(sp)
 800433c:	df000115 	stw	fp,4(sp)
 8004340:	df000104 	addi	fp,sp,4
 8004344:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 8004348:	e13fff17 	ldw	r4,-4(fp)
 800434c:	01420074 	movhi	r5,2049
 8004350:	29641d04 	addi	r5,r5,-28556
 8004354:	800603c0 	call	800603c <alt_dev_llist_insert>
}
 8004358:	e037883a 	mov	sp,fp
 800435c:	dfc00117 	ldw	ra,4(sp)
 8004360:	df000017 	ldw	fp,0(sp)
 8004364:	dec00204 	addi	sp,sp,8
 8004368:	f800283a 	ret

0800436c <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 800436c:	defffa04 	addi	sp,sp,-24
 8004370:	dfc00515 	stw	ra,20(sp)
 8004374:	df000415 	stw	fp,16(sp)
 8004378:	df000404 	addi	fp,sp,16
 800437c:	e13ffd15 	stw	r4,-12(fp)
 8004380:	e17ffe15 	stw	r5,-8(fp)
 8004384:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 8004388:	e0bffd17 	ldw	r2,-12(fp)
 800438c:	10800017 	ldw	r2,0(r2)
 8004390:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 8004394:	e0bffc17 	ldw	r2,-16(fp)
 8004398:	11000a04 	addi	r4,r2,40
 800439c:	e0bffd17 	ldw	r2,-12(fp)
 80043a0:	11c00217 	ldw	r7,8(r2)
 80043a4:	e17ffe17 	ldw	r5,-8(fp)
 80043a8:	e1bfff17 	ldw	r6,-4(fp)
 80043ac:	80049b40 	call	80049b4 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
 80043b0:	e037883a 	mov	sp,fp
 80043b4:	dfc00117 	ldw	ra,4(sp)
 80043b8:	df000017 	ldw	fp,0(sp)
 80043bc:	dec00204 	addi	sp,sp,8
 80043c0:	f800283a 	ret

080043c4 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 80043c4:	defffa04 	addi	sp,sp,-24
 80043c8:	dfc00515 	stw	ra,20(sp)
 80043cc:	df000415 	stw	fp,16(sp)
 80043d0:	df000404 	addi	fp,sp,16
 80043d4:	e13ffd15 	stw	r4,-12(fp)
 80043d8:	e17ffe15 	stw	r5,-8(fp)
 80043dc:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 80043e0:	e0bffd17 	ldw	r2,-12(fp)
 80043e4:	10800017 	ldw	r2,0(r2)
 80043e8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 80043ec:	e0bffc17 	ldw	r2,-16(fp)
 80043f0:	11000a04 	addi	r4,r2,40
 80043f4:	e0bffd17 	ldw	r2,-12(fp)
 80043f8:	11c00217 	ldw	r7,8(r2)
 80043fc:	e17ffe17 	ldw	r5,-8(fp)
 8004400:	e1bfff17 	ldw	r6,-4(fp)
 8004404:	8004bd80 	call	8004bd8 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
 8004408:	e037883a 	mov	sp,fp
 800440c:	dfc00117 	ldw	ra,4(sp)
 8004410:	df000017 	ldw	fp,0(sp)
 8004414:	dec00204 	addi	sp,sp,8
 8004418:	f800283a 	ret

0800441c <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
 800441c:	defffc04 	addi	sp,sp,-16
 8004420:	dfc00315 	stw	ra,12(sp)
 8004424:	df000215 	stw	fp,8(sp)
 8004428:	df000204 	addi	fp,sp,8
 800442c:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 8004430:	e0bfff17 	ldw	r2,-4(fp)
 8004434:	10800017 	ldw	r2,0(r2)
 8004438:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
 800443c:	e0bffe17 	ldw	r2,-8(fp)
 8004440:	11000a04 	addi	r4,r2,40
 8004444:	e0bfff17 	ldw	r2,-4(fp)
 8004448:	11400217 	ldw	r5,8(r2)
 800444c:	800484c0 	call	800484c <altera_avalon_jtag_uart_close>
}
 8004450:	e037883a 	mov	sp,fp
 8004454:	dfc00117 	ldw	ra,4(sp)
 8004458:	df000017 	ldw	fp,0(sp)
 800445c:	dec00204 	addi	sp,sp,8
 8004460:	f800283a 	ret

08004464 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
 8004464:	defffa04 	addi	sp,sp,-24
 8004468:	dfc00515 	stw	ra,20(sp)
 800446c:	df000415 	stw	fp,16(sp)
 8004470:	df000404 	addi	fp,sp,16
 8004474:	e13ffd15 	stw	r4,-12(fp)
 8004478:	e17ffe15 	stw	r5,-8(fp)
 800447c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
 8004480:	e0bffd17 	ldw	r2,-12(fp)
 8004484:	10800017 	ldw	r2,0(r2)
 8004488:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
 800448c:	e0bffc17 	ldw	r2,-16(fp)
 8004490:	11000a04 	addi	r4,r2,40
 8004494:	e17ffe17 	ldw	r5,-8(fp)
 8004498:	e1bfff17 	ldw	r6,-4(fp)
 800449c:	80048c00 	call	80048c0 <altera_avalon_jtag_uart_ioctl>
}
 80044a0:	e037883a 	mov	sp,fp
 80044a4:	dfc00117 	ldw	ra,4(sp)
 80044a8:	df000017 	ldw	fp,0(sp)
 80044ac:	dec00204 	addi	sp,sp,8
 80044b0:	f800283a 	ret

080044b4 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
 80044b4:	defffa04 	addi	sp,sp,-24
 80044b8:	dfc00515 	stw	ra,20(sp)
 80044bc:	df000415 	stw	fp,16(sp)
 80044c0:	df000404 	addi	fp,sp,16
 80044c4:	e13ffd15 	stw	r4,-12(fp)
 80044c8:	e17ffe15 	stw	r5,-8(fp)
 80044cc:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 80044d0:	e0fffd17 	ldw	r3,-12(fp)
 80044d4:	00800044 	movi	r2,1
 80044d8:	18800815 	stw	r2,32(r3)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
 80044dc:	e0bffd17 	ldw	r2,-12(fp)
 80044e0:	10800017 	ldw	r2,0(r2)
 80044e4:	11000104 	addi	r4,r2,4
 80044e8:	e0bffd17 	ldw	r2,-12(fp)
 80044ec:	10800817 	ldw	r2,32(r2)
 80044f0:	1007883a 	mov	r3,r2
 80044f4:	2005883a 	mov	r2,r4
 80044f8:	10c00035 	stwio	r3,0(r2)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
 80044fc:	e13ffe17 	ldw	r4,-8(fp)
 8004500:	e17fff17 	ldw	r5,-4(fp)
 8004504:	d8000015 	stw	zero,0(sp)
 8004508:	01820034 	movhi	r6,2048
 800450c:	31915d04 	addi	r6,r6,17780
 8004510:	e1fffd17 	ldw	r7,-12(fp)
 8004514:	80062480 	call	8006248 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
 8004518:	e0bffd17 	ldw	r2,-12(fp)
 800451c:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
 8004520:	e0bffd17 	ldw	r2,-12(fp)
 8004524:	11000204 	addi	r4,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 8004528:	00820074 	movhi	r2,2049
 800452c:	10ab0b04 	addi	r2,r2,-21460
 8004530:	10800017 	ldw	r2,0(r2)
 8004534:	100b883a 	mov	r5,r2
 8004538:	01820034 	movhi	r6,2048
 800453c:	3191e704 	addi	r6,r6,18332
 8004540:	e1fffd17 	ldw	r7,-12(fp)
 8004544:	8005d580 	call	8005d58 <alt_alarm_start>
 8004548:	1004403a 	cmpge	r2,r2,zero
 800454c:	1000041e 	bne	r2,zero,8004560 <altera_avalon_jtag_uart_init+0xac>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
 8004550:	e0fffd17 	ldw	r3,-12(fp)
 8004554:	00a00034 	movhi	r2,32768
 8004558:	10bfffc4 	addi	r2,r2,-1
 800455c:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
 8004560:	e037883a 	mov	sp,fp
 8004564:	dfc00117 	ldw	ra,4(sp)
 8004568:	df000017 	ldw	fp,0(sp)
 800456c:	dec00204 	addi	sp,sp,8
 8004570:	f800283a 	ret

08004574 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
 8004574:	defff804 	addi	sp,sp,-32
 8004578:	df000715 	stw	fp,28(sp)
 800457c:	df000704 	addi	fp,sp,28
 8004580:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
 8004584:	e0bfff17 	ldw	r2,-4(fp)
 8004588:	e0bffe15 	stw	r2,-8(fp)
  unsigned int base = sp->base;
 800458c:	e0bffe17 	ldw	r2,-8(fp)
 8004590:	10800017 	ldw	r2,0(r2)
 8004594:	e0bffd15 	stw	r2,-12(fp)
 8004598:	00000006 	br	800459c <altera_avalon_jtag_uart_irq+0x28>
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 800459c:	e0bffd17 	ldw	r2,-12(fp)
 80045a0:	10800104 	addi	r2,r2,4
 80045a4:	10800037 	ldwio	r2,0(r2)
 80045a8:	e0bffc15 	stw	r2,-16(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
 80045ac:	e0bffc17 	ldw	r2,-16(fp)
 80045b0:	1080c00c 	andi	r2,r2,768
 80045b4:	1005003a 	cmpeq	r2,r2,zero
 80045b8:	1000741e 	bne	r2,zero,800478c <altera_avalon_jtag_uart_irq+0x218>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
 80045bc:	e0bffc17 	ldw	r2,-16(fp)
 80045c0:	1080400c 	andi	r2,r2,256
 80045c4:	1005003a 	cmpeq	r2,r2,zero
 80045c8:	1000351e 	bne	r2,zero,80046a0 <altera_avalon_jtag_uart_irq+0x12c>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
 80045cc:	00800074 	movhi	r2,1
 80045d0:	e0bffb15 	stw	r2,-20(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 80045d4:	e0bffe17 	ldw	r2,-8(fp)
 80045d8:	10800a17 	ldw	r2,40(r2)
 80045dc:	10800044 	addi	r2,r2,1
 80045e0:	1081ffcc 	andi	r2,r2,2047
 80045e4:	e0bffa15 	stw	r2,-24(fp)
        if (next == sp->rx_out)
 80045e8:	e0bffe17 	ldw	r2,-8(fp)
 80045ec:	10c00b17 	ldw	r3,44(r2)
 80045f0:	e0bffa17 	ldw	r2,-24(fp)
 80045f4:	18801626 	beq	r3,r2,8004650 <altera_avalon_jtag_uart_irq+0xdc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 80045f8:	e0bffd17 	ldw	r2,-12(fp)
 80045fc:	10800037 	ldwio	r2,0(r2)
 8004600:	e0bffb15 	stw	r2,-20(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
 8004604:	e0bffb17 	ldw	r2,-20(fp)
 8004608:	10a0000c 	andi	r2,r2,32768
 800460c:	1005003a 	cmpeq	r2,r2,zero
 8004610:	10000f1e 	bne	r2,zero,8004650 <altera_avalon_jtag_uart_irq+0xdc>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 8004614:	e0bffe17 	ldw	r2,-8(fp)
 8004618:	10c00a17 	ldw	r3,40(r2)
 800461c:	e0bffb17 	ldw	r2,-20(fp)
 8004620:	1009883a 	mov	r4,r2
 8004624:	e0bffe17 	ldw	r2,-8(fp)
 8004628:	1885883a 	add	r2,r3,r2
 800462c:	10800e04 	addi	r2,r2,56
 8004630:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 8004634:	e0bffe17 	ldw	r2,-8(fp)
 8004638:	10800a17 	ldw	r2,40(r2)
 800463c:	10800044 	addi	r2,r2,1
 8004640:	10c1ffcc 	andi	r3,r2,2047
 8004644:	e0bffe17 	ldw	r2,-8(fp)
 8004648:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
 800464c:	003fe106 	br	80045d4 <altera_avalon_jtag_uart_irq+0x60>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
 8004650:	e0bffb17 	ldw	r2,-20(fp)
 8004654:	10bfffec 	andhi	r2,r2,65535
 8004658:	1005003a 	cmpeq	r2,r2,zero
 800465c:	1000101e 	bne	r2,zero,80046a0 <altera_avalon_jtag_uart_irq+0x12c>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 8004660:	e0bffe17 	ldw	r2,-8(fp)
 8004664:	10c00817 	ldw	r3,32(r2)
 8004668:	00bfff84 	movi	r2,-2
 800466c:	1886703a 	and	r3,r3,r2
 8004670:	e0bffe17 	ldw	r2,-8(fp)
 8004674:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
 8004678:	e0bffd17 	ldw	r2,-12(fp)
 800467c:	11000104 	addi	r4,r2,4
 8004680:	e0bffe17 	ldw	r2,-8(fp)
 8004684:	10800817 	ldw	r2,32(r2)
 8004688:	1007883a 	mov	r3,r2
 800468c:	2005883a 	mov	r2,r4
 8004690:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 8004694:	e0bffd17 	ldw	r2,-12(fp)
 8004698:	10800104 	addi	r2,r2,4
 800469c:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
 80046a0:	e0bffc17 	ldw	r2,-16(fp)
 80046a4:	1080800c 	andi	r2,r2,512
 80046a8:	1005003a 	cmpeq	r2,r2,zero
 80046ac:	103fbb1e 	bne	r2,zero,800459c <altera_avalon_jtag_uart_irq+0x28>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
 80046b0:	e0bffc17 	ldw	r2,-16(fp)
 80046b4:	10bfffec 	andhi	r2,r2,65535
 80046b8:	1004d43a 	srli	r2,r2,16
 80046bc:	e0bff915 	stw	r2,-28(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
 80046c0:	00001506 	br	8004718 <altera_avalon_jtag_uart_irq+0x1a4>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
 80046c4:	e13ffd17 	ldw	r4,-12(fp)
 80046c8:	e0bffe17 	ldw	r2,-8(fp)
 80046cc:	10c00d17 	ldw	r3,52(r2)
 80046d0:	e0bffe17 	ldw	r2,-8(fp)
 80046d4:	1885883a 	add	r2,r3,r2
 80046d8:	10820e04 	addi	r2,r2,2104
 80046dc:	10800003 	ldbu	r2,0(r2)
 80046e0:	10c03fcc 	andi	r3,r2,255
 80046e4:	18c0201c 	xori	r3,r3,128
 80046e8:	18ffe004 	addi	r3,r3,-128
 80046ec:	2005883a 	mov	r2,r4
 80046f0:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 80046f4:	e0bffe17 	ldw	r2,-8(fp)
 80046f8:	10800d17 	ldw	r2,52(r2)
 80046fc:	10800044 	addi	r2,r2,1
 8004700:	10c1ffcc 	andi	r3,r2,2047
 8004704:	e0bffe17 	ldw	r2,-8(fp)
 8004708:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
 800470c:	e0bff917 	ldw	r2,-28(fp)
 8004710:	10bfffc4 	addi	r2,r2,-1
 8004714:	e0bff915 	stw	r2,-28(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
 8004718:	e0bff917 	ldw	r2,-28(fp)
 800471c:	1005003a 	cmpeq	r2,r2,zero
 8004720:	1000051e 	bne	r2,zero,8004738 <altera_avalon_jtag_uart_irq+0x1c4>
 8004724:	e0bffe17 	ldw	r2,-8(fp)
 8004728:	10c00d17 	ldw	r3,52(r2)
 800472c:	e0bffe17 	ldw	r2,-8(fp)
 8004730:	10800c17 	ldw	r2,48(r2)
 8004734:	18bfe31e 	bne	r3,r2,80046c4 <altera_avalon_jtag_uart_irq+0x150>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
 8004738:	e0bff917 	ldw	r2,-28(fp)
 800473c:	1005003a 	cmpeq	r2,r2,zero
 8004740:	103f961e 	bne	r2,zero,800459c <altera_avalon_jtag_uart_irq+0x28>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 8004744:	e0bffe17 	ldw	r2,-8(fp)
 8004748:	10c00817 	ldw	r3,32(r2)
 800474c:	00bfff44 	movi	r2,-3
 8004750:	1886703a 	and	r3,r3,r2
 8004754:	e0bffe17 	ldw	r2,-8(fp)
 8004758:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 800475c:	e0bffe17 	ldw	r2,-8(fp)
 8004760:	10800017 	ldw	r2,0(r2)
 8004764:	11000104 	addi	r4,r2,4
 8004768:	e0bffe17 	ldw	r2,-8(fp)
 800476c:	10800817 	ldw	r2,32(r2)
 8004770:	1007883a 	mov	r3,r2
 8004774:	2005883a 	mov	r2,r4
 8004778:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 800477c:	e0bffd17 	ldw	r2,-12(fp)
 8004780:	10800104 	addi	r2,r2,4
 8004784:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
 8004788:	003f8406 	br	800459c <altera_avalon_jtag_uart_irq+0x28>
}
 800478c:	e037883a 	mov	sp,fp
 8004790:	df000017 	ldw	fp,0(sp)
 8004794:	dec00104 	addi	sp,sp,4
 8004798:	f800283a 	ret

0800479c <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
 800479c:	defffc04 	addi	sp,sp,-16
 80047a0:	df000315 	stw	fp,12(sp)
 80047a4:	df000304 	addi	fp,sp,12
 80047a8:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
 80047ac:	e0bfff17 	ldw	r2,-4(fp)
 80047b0:	e0bffe15 	stw	r2,-8(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
 80047b4:	e0bffe17 	ldw	r2,-8(fp)
 80047b8:	10800017 	ldw	r2,0(r2)
 80047bc:	10800104 	addi	r2,r2,4
 80047c0:	10800037 	ldwio	r2,0(r2)
 80047c4:	e0bffd15 	stw	r2,-12(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
 80047c8:	e0bffd17 	ldw	r2,-12(fp)
 80047cc:	1081000c 	andi	r2,r2,1024
 80047d0:	1005003a 	cmpeq	r2,r2,zero
 80047d4:	10000c1e 	bne	r2,zero,8004808 <altera_avalon_jtag_uart_timeout+0x6c>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
 80047d8:	e0bffe17 	ldw	r2,-8(fp)
 80047dc:	10800017 	ldw	r2,0(r2)
 80047e0:	11000104 	addi	r4,r2,4
 80047e4:	e0bffe17 	ldw	r2,-8(fp)
 80047e8:	10800817 	ldw	r2,32(r2)
 80047ec:	10810014 	ori	r2,r2,1024
 80047f0:	1007883a 	mov	r3,r2
 80047f4:	2005883a 	mov	r2,r4
 80047f8:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
 80047fc:	e0bffe17 	ldw	r2,-8(fp)
 8004800:	10000915 	stw	zero,36(r2)
 8004804:	00000a06 	br	8004830 <altera_avalon_jtag_uart_timeout+0x94>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
 8004808:	e0bffe17 	ldw	r2,-8(fp)
 800480c:	10c00917 	ldw	r3,36(r2)
 8004810:	00a00034 	movhi	r2,32768
 8004814:	10bfff04 	addi	r2,r2,-4
 8004818:	10c00536 	bltu	r2,r3,8004830 <altera_avalon_jtag_uart_timeout+0x94>
    sp->host_inactive++;
 800481c:	e0bffe17 	ldw	r2,-8(fp)
 8004820:	10800917 	ldw	r2,36(r2)
 8004824:	10c00044 	addi	r3,r2,1
 8004828:	e0bffe17 	ldw	r2,-8(fp)
 800482c:	10c00915 	stw	r3,36(r2)
 8004830:	00820074 	movhi	r2,2049
 8004834:	10ab0b04 	addi	r2,r2,-21460
 8004838:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
 800483c:	e037883a 	mov	sp,fp
 8004840:	df000017 	ldw	fp,0(sp)
 8004844:	dec00104 	addi	sp,sp,4
 8004848:	f800283a 	ret

0800484c <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
 800484c:	defffc04 	addi	sp,sp,-16
 8004850:	df000315 	stw	fp,12(sp)
 8004854:	df000304 	addi	fp,sp,12
 8004858:	e13ffd15 	stw	r4,-12(fp)
 800485c:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 8004860:	00000706 	br	8004880 <altera_avalon_jtag_uart_close+0x34>
    if (flags & O_NONBLOCK) {
 8004864:	e0bffe17 	ldw	r2,-8(fp)
 8004868:	1090000c 	andi	r2,r2,16384
 800486c:	1005003a 	cmpeq	r2,r2,zero
 8004870:	1000031e 	bne	r2,zero,8004880 <altera_avalon_jtag_uart_close+0x34>
      return -EWOULDBLOCK; 
 8004874:	00bffd44 	movi	r2,-11
 8004878:	e0bfff15 	stw	r2,-4(fp)
 800487c:	00000b06 	br	80048ac <altera_avalon_jtag_uart_close+0x60>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 8004880:	e0bffd17 	ldw	r2,-12(fp)
 8004884:	10c00d17 	ldw	r3,52(r2)
 8004888:	e0bffd17 	ldw	r2,-12(fp)
 800488c:	10800c17 	ldw	r2,48(r2)
 8004890:	18800526 	beq	r3,r2,80048a8 <altera_avalon_jtag_uart_close+0x5c>
 8004894:	e0bffd17 	ldw	r2,-12(fp)
 8004898:	10c00917 	ldw	r3,36(r2)
 800489c:	e0bffd17 	ldw	r2,-12(fp)
 80048a0:	10800117 	ldw	r2,4(r2)
 80048a4:	18bfef36 	bltu	r3,r2,8004864 <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
 80048a8:	e03fff15 	stw	zero,-4(fp)
 80048ac:	e0bfff17 	ldw	r2,-4(fp)
}
 80048b0:	e037883a 	mov	sp,fp
 80048b4:	df000017 	ldw	fp,0(sp)
 80048b8:	dec00104 	addi	sp,sp,4
 80048bc:	f800283a 	ret

080048c0 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
 80048c0:	defff804 	addi	sp,sp,-32
 80048c4:	df000715 	stw	fp,28(sp)
 80048c8:	df000704 	addi	fp,sp,28
 80048cc:	e13ffb15 	stw	r4,-20(fp)
 80048d0:	e17ffc15 	stw	r5,-16(fp)
 80048d4:	e1bffd15 	stw	r6,-12(fp)
  int rc = -ENOTTY;
 80048d8:	00bff9c4 	movi	r2,-25
 80048dc:	e0bffa15 	stw	r2,-24(fp)

  switch (req)
 80048e0:	e0bffc17 	ldw	r2,-16(fp)
 80048e4:	e0bfff15 	stw	r2,-4(fp)
 80048e8:	e0ffff17 	ldw	r3,-4(fp)
 80048ec:	189a8060 	cmpeqi	r2,r3,27137
 80048f0:	1000041e 	bne	r2,zero,8004904 <altera_avalon_jtag_uart_ioctl+0x44>
 80048f4:	e0ffff17 	ldw	r3,-4(fp)
 80048f8:	189a80a0 	cmpeqi	r2,r3,27138
 80048fc:	10001b1e 	bne	r2,zero,800496c <altera_avalon_jtag_uart_ioctl+0xac>
 8004900:	00002706 	br	80049a0 <altera_avalon_jtag_uart_ioctl+0xe0>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
 8004904:	e0bffb17 	ldw	r2,-20(fp)
 8004908:	10c00117 	ldw	r3,4(r2)
 800490c:	00a00034 	movhi	r2,32768
 8004910:	10bfffc4 	addi	r2,r2,-1
 8004914:	18802226 	beq	r3,r2,80049a0 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
 8004918:	e0bffd17 	ldw	r2,-12(fp)
 800491c:	10800017 	ldw	r2,0(r2)
 8004920:	e0bff915 	stw	r2,-28(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
 8004924:	e0bff917 	ldw	r2,-28(fp)
 8004928:	10800090 	cmplti	r2,r2,2
 800492c:	1000071e 	bne	r2,zero,800494c <altera_avalon_jtag_uart_ioctl+0x8c>
 8004930:	e0fff917 	ldw	r3,-28(fp)
 8004934:	00a00034 	movhi	r2,32768
 8004938:	10bfffc4 	addi	r2,r2,-1
 800493c:	18800326 	beq	r3,r2,800494c <altera_avalon_jtag_uart_ioctl+0x8c>
 8004940:	e0bff917 	ldw	r2,-28(fp)
 8004944:	e0bffe15 	stw	r2,-8(fp)
 8004948:	00000306 	br	8004958 <altera_avalon_jtag_uart_ioctl+0x98>
 800494c:	00e00034 	movhi	r3,32768
 8004950:	18ffff84 	addi	r3,r3,-2
 8004954:	e0fffe15 	stw	r3,-8(fp)
 8004958:	e0bffb17 	ldw	r2,-20(fp)
 800495c:	e0fffe17 	ldw	r3,-8(fp)
 8004960:	10c00115 	stw	r3,4(r2)
      rc = 0;
 8004964:	e03ffa15 	stw	zero,-24(fp)
    }
    break;
 8004968:	00000d06 	br	80049a0 <altera_avalon_jtag_uart_ioctl+0xe0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
 800496c:	e0bffb17 	ldw	r2,-20(fp)
 8004970:	10c00117 	ldw	r3,4(r2)
 8004974:	00a00034 	movhi	r2,32768
 8004978:	10bfffc4 	addi	r2,r2,-1
 800497c:	18800826 	beq	r3,r2,80049a0 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
 8004980:	e13ffd17 	ldw	r4,-12(fp)
 8004984:	e0bffb17 	ldw	r2,-20(fp)
 8004988:	10c00917 	ldw	r3,36(r2)
 800498c:	e0bffb17 	ldw	r2,-20(fp)
 8004990:	10800117 	ldw	r2,4(r2)
 8004994:	1885803a 	cmpltu	r2,r3,r2
 8004998:	20800015 	stw	r2,0(r4)
      rc = 0;
 800499c:	e03ffa15 	stw	zero,-24(fp)

  default:
    break;
  }

  return rc;
 80049a0:	e0bffa17 	ldw	r2,-24(fp)
}
 80049a4:	e037883a 	mov	sp,fp
 80049a8:	df000017 	ldw	fp,0(sp)
 80049ac:	dec00104 	addi	sp,sp,4
 80049b0:	f800283a 	ret

080049b4 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
 80049b4:	defff204 	addi	sp,sp,-56
 80049b8:	dfc00d15 	stw	ra,52(sp)
 80049bc:	df000c15 	stw	fp,48(sp)
 80049c0:	df000c04 	addi	fp,sp,48
 80049c4:	e13ffb15 	stw	r4,-20(fp)
 80049c8:	e17ffc15 	stw	r5,-16(fp)
 80049cc:	e1bffd15 	stw	r6,-12(fp)
 80049d0:	e1fffe15 	stw	r7,-8(fp)
  char * ptr = buffer;
 80049d4:	e0bffc17 	ldw	r2,-16(fp)
 80049d8:	e0bffa15 	stw	r2,-24(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 80049dc:	00004806 	br	8004b00 <altera_avalon_jtag_uart_read+0x14c>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
 80049e0:	e0bffb17 	ldw	r2,-20(fp)
 80049e4:	10800a17 	ldw	r2,40(r2)
 80049e8:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
 80049ec:	e0bffb17 	ldw	r2,-20(fp)
 80049f0:	10800b17 	ldw	r2,44(r2)
 80049f4:	e0bff615 	stw	r2,-40(fp)

      if (in >= out)
 80049f8:	e0fff717 	ldw	r3,-36(fp)
 80049fc:	e0bff617 	ldw	r2,-40(fp)
 8004a00:	18800536 	bltu	r3,r2,8004a18 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
 8004a04:	e0bff717 	ldw	r2,-36(fp)
 8004a08:	e0fff617 	ldw	r3,-40(fp)
 8004a0c:	10c5c83a 	sub	r2,r2,r3
 8004a10:	e0bff815 	stw	r2,-32(fp)
 8004a14:	00000406 	br	8004a28 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
 8004a18:	00820004 	movi	r2,2048
 8004a1c:	e0fff617 	ldw	r3,-40(fp)
 8004a20:	10c5c83a 	sub	r2,r2,r3
 8004a24:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
 8004a28:	e0bff817 	ldw	r2,-32(fp)
 8004a2c:	1005003a 	cmpeq	r2,r2,zero
 8004a30:	10001f1e 	bne	r2,zero,8004ab0 <altera_avalon_jtag_uart_read+0xfc>
        break; /* No more data available */

      if (n > space)
 8004a34:	e0fffd17 	ldw	r3,-12(fp)
 8004a38:	e0bff817 	ldw	r2,-32(fp)
 8004a3c:	1880022e 	bgeu	r3,r2,8004a48 <altera_avalon_jtag_uart_read+0x94>
        n = space;
 8004a40:	e0bffd17 	ldw	r2,-12(fp)
 8004a44:	e0bff815 	stw	r2,-32(fp)

      memcpy(ptr, sp->rx_buf + out, n);
 8004a48:	e0bffb17 	ldw	r2,-20(fp)
 8004a4c:	10c00e04 	addi	r3,r2,56
 8004a50:	e0bff617 	ldw	r2,-40(fp)
 8004a54:	1887883a 	add	r3,r3,r2
 8004a58:	e0bffa17 	ldw	r2,-24(fp)
 8004a5c:	1009883a 	mov	r4,r2
 8004a60:	180b883a 	mov	r5,r3
 8004a64:	e1bff817 	ldw	r6,-32(fp)
 8004a68:	80020140 	call	8002014 <memcpy>
      ptr   += n;
 8004a6c:	e0fff817 	ldw	r3,-32(fp)
 8004a70:	e0bffa17 	ldw	r2,-24(fp)
 8004a74:	10c5883a 	add	r2,r2,r3
 8004a78:	e0bffa15 	stw	r2,-24(fp)
      space -= n;
 8004a7c:	e0fffd17 	ldw	r3,-12(fp)
 8004a80:	e0bff817 	ldw	r2,-32(fp)
 8004a84:	1885c83a 	sub	r2,r3,r2
 8004a88:	e0bffd15 	stw	r2,-12(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 8004a8c:	e0fff617 	ldw	r3,-40(fp)
 8004a90:	e0bff817 	ldw	r2,-32(fp)
 8004a94:	1885883a 	add	r2,r3,r2
 8004a98:	10c1ffcc 	andi	r3,r2,2047
 8004a9c:	e0bffb17 	ldw	r2,-20(fp)
 8004aa0:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
 8004aa4:	e0bffd17 	ldw	r2,-12(fp)
 8004aa8:	10800048 	cmpgei	r2,r2,1
 8004aac:	103fcc1e 	bne	r2,zero,80049e0 <altera_avalon_jtag_uart_read+0x2c>

    /* If we read any data then return it */
    if (ptr != buffer)
 8004ab0:	e0fffa17 	ldw	r3,-24(fp)
 8004ab4:	e0bffc17 	ldw	r2,-16(fp)
 8004ab8:	1880141e 	bne	r3,r2,8004b0c <altera_avalon_jtag_uart_read+0x158>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
 8004abc:	e0bffe17 	ldw	r2,-8(fp)
 8004ac0:	1090000c 	andi	r2,r2,16384
 8004ac4:	1004c03a 	cmpne	r2,r2,zero
 8004ac8:	1000101e 	bne	r2,zero,8004b0c <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
 8004acc:	e0bffb17 	ldw	r2,-20(fp)
 8004ad0:	10c00a17 	ldw	r3,40(r2)
 8004ad4:	e0bff717 	ldw	r2,-36(fp)
 8004ad8:	1880051e 	bne	r3,r2,8004af0 <altera_avalon_jtag_uart_read+0x13c>
 8004adc:	e0bffb17 	ldw	r2,-20(fp)
 8004ae0:	10c00917 	ldw	r3,36(r2)
 8004ae4:	e0bffb17 	ldw	r2,-20(fp)
 8004ae8:	10800117 	ldw	r2,4(r2)
 8004aec:	18bff736 	bltu	r3,r2,8004acc <altera_avalon_jtag_uart_read+0x118>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
 8004af0:	e0bffb17 	ldw	r2,-20(fp)
 8004af4:	10c00a17 	ldw	r3,40(r2)
 8004af8:	e0bff717 	ldw	r2,-36(fp)
 8004afc:	18800326 	beq	r3,r2,8004b0c <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 8004b00:	e0bffd17 	ldw	r2,-12(fp)
 8004b04:	10800048 	cmpgei	r2,r2,1
 8004b08:	103fb51e 	bne	r2,zero,80049e0 <altera_avalon_jtag_uart_read+0x2c>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
 8004b0c:	e0fffa17 	ldw	r3,-24(fp)
 8004b10:	e0bffc17 	ldw	r2,-16(fp)
 8004b14:	18801926 	beq	r3,r2,8004b7c <altera_avalon_jtag_uart_read+0x1c8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8004b18:	0005303a 	rdctl	r2,status
 8004b1c:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8004b20:	e0fff517 	ldw	r3,-44(fp)
 8004b24:	00bfff84 	movi	r2,-2
 8004b28:	1884703a 	and	r2,r3,r2
 8004b2c:	1001703a 	wrctl	status,r2
  
  return context;
 8004b30:	e0bff517 	ldw	r2,-44(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
 8004b34:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 8004b38:	e0bffb17 	ldw	r2,-20(fp)
 8004b3c:	10800817 	ldw	r2,32(r2)
 8004b40:	10c00054 	ori	r3,r2,1
 8004b44:	e0bffb17 	ldw	r2,-20(fp)
 8004b48:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 8004b4c:	e0bffb17 	ldw	r2,-20(fp)
 8004b50:	10800017 	ldw	r2,0(r2)
 8004b54:	11000104 	addi	r4,r2,4
 8004b58:	e0bffb17 	ldw	r2,-20(fp)
 8004b5c:	10800817 	ldw	r2,32(r2)
 8004b60:	1007883a 	mov	r3,r2
 8004b64:	2005883a 	mov	r2,r4
 8004b68:	10c00035 	stwio	r3,0(r2)
 8004b6c:	e0bff917 	ldw	r2,-28(fp)
 8004b70:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8004b74:	e0bff417 	ldw	r2,-48(fp)
 8004b78:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
 8004b7c:	e0fffa17 	ldw	r3,-24(fp)
 8004b80:	e0bffc17 	ldw	r2,-16(fp)
 8004b84:	18800526 	beq	r3,r2,8004b9c <altera_avalon_jtag_uart_read+0x1e8>
    return ptr - buffer;
 8004b88:	e0fffa17 	ldw	r3,-24(fp)
 8004b8c:	e0bffc17 	ldw	r2,-16(fp)
 8004b90:	1887c83a 	sub	r3,r3,r2
 8004b94:	e0ffff15 	stw	r3,-4(fp)
 8004b98:	00000906 	br	8004bc0 <altera_avalon_jtag_uart_read+0x20c>
  else if (flags & O_NONBLOCK)
 8004b9c:	e0bffe17 	ldw	r2,-8(fp)
 8004ba0:	1090000c 	andi	r2,r2,16384
 8004ba4:	1005003a 	cmpeq	r2,r2,zero
 8004ba8:	1000031e 	bne	r2,zero,8004bb8 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
 8004bac:	00bffd44 	movi	r2,-11
 8004bb0:	e0bfff15 	stw	r2,-4(fp)
 8004bb4:	00000206 	br	8004bc0 <altera_avalon_jtag_uart_read+0x20c>
  else
    return -EIO;
 8004bb8:	00bffec4 	movi	r2,-5
 8004bbc:	e0bfff15 	stw	r2,-4(fp)
 8004bc0:	e0bfff17 	ldw	r2,-4(fp)
}
 8004bc4:	e037883a 	mov	sp,fp
 8004bc8:	dfc00117 	ldw	ra,4(sp)
 8004bcc:	df000017 	ldw	fp,0(sp)
 8004bd0:	dec00204 	addi	sp,sp,8
 8004bd4:	f800283a 	ret

08004bd8 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 8004bd8:	defff204 	addi	sp,sp,-56
 8004bdc:	dfc00d15 	stw	ra,52(sp)
 8004be0:	df000c15 	stw	fp,48(sp)
 8004be4:	df000c04 	addi	fp,sp,48
 8004be8:	e13ffb15 	stw	r4,-20(fp)
 8004bec:	e17ffc15 	stw	r5,-16(fp)
 8004bf0:	e1bffd15 	stw	r6,-12(fp)
 8004bf4:	e1fffe15 	stw	r7,-8(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
 8004bf8:	e03ff915 	stw	zero,-28(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
 8004bfc:	e0bffc17 	ldw	r2,-16(fp)
 8004c00:	e0bff615 	stw	r2,-40(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 8004c04:	00003a06 	br	8004cf0 <altera_avalon_jtag_uart_write+0x118>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
 8004c08:	e0bffb17 	ldw	r2,-20(fp)
 8004c0c:	10800c17 	ldw	r2,48(r2)
 8004c10:	e0bffa15 	stw	r2,-24(fp)
      out = sp->tx_out;
 8004c14:	e0bffb17 	ldw	r2,-20(fp)
 8004c18:	10800d17 	ldw	r2,52(r2)
 8004c1c:	e0bff915 	stw	r2,-28(fp)

      if (in < out)
 8004c20:	e0fffa17 	ldw	r3,-24(fp)
 8004c24:	e0bff917 	ldw	r2,-28(fp)
 8004c28:	1880062e 	bgeu	r3,r2,8004c44 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
 8004c2c:	e0fff917 	ldw	r3,-28(fp)
 8004c30:	e0bffa17 	ldw	r2,-24(fp)
 8004c34:	1885c83a 	sub	r2,r3,r2
 8004c38:	10bfffc4 	addi	r2,r2,-1
 8004c3c:	e0bff815 	stw	r2,-32(fp)
 8004c40:	00000c06 	br	8004c74 <altera_avalon_jtag_uart_write+0x9c>
      else if (out > 0)
 8004c44:	e0bff917 	ldw	r2,-28(fp)
 8004c48:	1005003a 	cmpeq	r2,r2,zero
 8004c4c:	1000051e 	bne	r2,zero,8004c64 <altera_avalon_jtag_uart_write+0x8c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
 8004c50:	00820004 	movi	r2,2048
 8004c54:	e0fffa17 	ldw	r3,-24(fp)
 8004c58:	10c5c83a 	sub	r2,r2,r3
 8004c5c:	e0bff815 	stw	r2,-32(fp)
 8004c60:	00000406 	br	8004c74 <altera_avalon_jtag_uart_write+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
 8004c64:	0081ffc4 	movi	r2,2047
 8004c68:	e0fffa17 	ldw	r3,-24(fp)
 8004c6c:	10c5c83a 	sub	r2,r2,r3
 8004c70:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
 8004c74:	e0bff817 	ldw	r2,-32(fp)
 8004c78:	1005003a 	cmpeq	r2,r2,zero
 8004c7c:	10001f1e 	bne	r2,zero,8004cfc <altera_avalon_jtag_uart_write+0x124>
        break;

      if (n > count)
 8004c80:	e0fffd17 	ldw	r3,-12(fp)
 8004c84:	e0bff817 	ldw	r2,-32(fp)
 8004c88:	1880022e 	bgeu	r3,r2,8004c94 <altera_avalon_jtag_uart_write+0xbc>
        n = count;
 8004c8c:	e0bffd17 	ldw	r2,-12(fp)
 8004c90:	e0bff815 	stw	r2,-32(fp)

      memcpy(sp->tx_buf + in, ptr, n);
 8004c94:	e0bffb17 	ldw	r2,-20(fp)
 8004c98:	10c20e04 	addi	r3,r2,2104
 8004c9c:	e0bffa17 	ldw	r2,-24(fp)
 8004ca0:	1885883a 	add	r2,r3,r2
 8004ca4:	e0fffc17 	ldw	r3,-16(fp)
 8004ca8:	1009883a 	mov	r4,r2
 8004cac:	180b883a 	mov	r5,r3
 8004cb0:	e1bff817 	ldw	r6,-32(fp)
 8004cb4:	80020140 	call	8002014 <memcpy>
      ptr   += n;
 8004cb8:	e0fff817 	ldw	r3,-32(fp)
 8004cbc:	e0bffc17 	ldw	r2,-16(fp)
 8004cc0:	10c5883a 	add	r2,r2,r3
 8004cc4:	e0bffc15 	stw	r2,-16(fp)
      count -= n;
 8004cc8:	e0fffd17 	ldw	r3,-12(fp)
 8004ccc:	e0bff817 	ldw	r2,-32(fp)
 8004cd0:	1885c83a 	sub	r2,r3,r2
 8004cd4:	e0bffd15 	stw	r2,-12(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 8004cd8:	e0fffa17 	ldw	r3,-24(fp)
 8004cdc:	e0bff817 	ldw	r2,-32(fp)
 8004ce0:	1885883a 	add	r2,r3,r2
 8004ce4:	10c1ffcc 	andi	r3,r2,2047
 8004ce8:	e0bffb17 	ldw	r2,-20(fp)
 8004cec:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 8004cf0:	e0bffd17 	ldw	r2,-12(fp)
 8004cf4:	10800048 	cmpgei	r2,r2,1
 8004cf8:	103fc31e 	bne	r2,zero,8004c08 <altera_avalon_jtag_uart_write+0x30>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8004cfc:	0005303a 	rdctl	r2,status
 8004d00:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8004d04:	e0fff517 	ldw	r3,-44(fp)
 8004d08:	00bfff84 	movi	r2,-2
 8004d0c:	1884703a 	and	r2,r3,r2
 8004d10:	1001703a 	wrctl	status,r2
  
  return context;
 8004d14:	e0bff517 	ldw	r2,-44(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
 8004d18:	e0bff715 	stw	r2,-36(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 8004d1c:	e0bffb17 	ldw	r2,-20(fp)
 8004d20:	10800817 	ldw	r2,32(r2)
 8004d24:	10c00094 	ori	r3,r2,2
 8004d28:	e0bffb17 	ldw	r2,-20(fp)
 8004d2c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 8004d30:	e0bffb17 	ldw	r2,-20(fp)
 8004d34:	10800017 	ldw	r2,0(r2)
 8004d38:	11000104 	addi	r4,r2,4
 8004d3c:	e0bffb17 	ldw	r2,-20(fp)
 8004d40:	10800817 	ldw	r2,32(r2)
 8004d44:	1007883a 	mov	r3,r2
 8004d48:	2005883a 	mov	r2,r4
 8004d4c:	10c00035 	stwio	r3,0(r2)
 8004d50:	e0bff717 	ldw	r2,-36(fp)
 8004d54:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8004d58:	e0bff417 	ldw	r2,-48(fp)
 8004d5c:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
 8004d60:	e0bffd17 	ldw	r2,-12(fp)
 8004d64:	10800050 	cmplti	r2,r2,1
 8004d68:	1000111e 	bne	r2,zero,8004db0 <altera_avalon_jtag_uart_write+0x1d8>
    {
      if (flags & O_NONBLOCK)
 8004d6c:	e0bffe17 	ldw	r2,-8(fp)
 8004d70:	1090000c 	andi	r2,r2,16384
 8004d74:	1004c03a 	cmpne	r2,r2,zero
 8004d78:	1000101e 	bne	r2,zero,8004dbc <altera_avalon_jtag_uart_write+0x1e4>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
 8004d7c:	e0bffb17 	ldw	r2,-20(fp)
 8004d80:	10c00d17 	ldw	r3,52(r2)
 8004d84:	e0bff917 	ldw	r2,-28(fp)
 8004d88:	1880051e 	bne	r3,r2,8004da0 <altera_avalon_jtag_uart_write+0x1c8>
 8004d8c:	e0bffb17 	ldw	r2,-20(fp)
 8004d90:	10c00917 	ldw	r3,36(r2)
 8004d94:	e0bffb17 	ldw	r2,-20(fp)
 8004d98:	10800117 	ldw	r2,4(r2)
 8004d9c:	18bff736 	bltu	r3,r2,8004d7c <altera_avalon_jtag_uart_write+0x1a4>
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
 8004da0:	e0bffb17 	ldw	r2,-20(fp)
 8004da4:	10c00d17 	ldw	r3,52(r2)
 8004da8:	e0bff917 	ldw	r2,-28(fp)
 8004dac:	18800326 	beq	r3,r2,8004dbc <altera_avalon_jtag_uart_write+0x1e4>
        break;
    }
  }
  while (count > 0);
 8004db0:	e0bffd17 	ldw	r2,-12(fp)
 8004db4:	10800048 	cmpgei	r2,r2,1
 8004db8:	103fcd1e 	bne	r2,zero,8004cf0 <altera_avalon_jtag_uart_write+0x118>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
 8004dbc:	e0fffc17 	ldw	r3,-16(fp)
 8004dc0:	e0bff617 	ldw	r2,-40(fp)
 8004dc4:	18800526 	beq	r3,r2,8004ddc <altera_avalon_jtag_uart_write+0x204>
    return ptr - start;
 8004dc8:	e0fffc17 	ldw	r3,-16(fp)
 8004dcc:	e0bff617 	ldw	r2,-40(fp)
 8004dd0:	1887c83a 	sub	r3,r3,r2
 8004dd4:	e0ffff15 	stw	r3,-4(fp)
 8004dd8:	00000906 	br	8004e00 <altera_avalon_jtag_uart_write+0x228>
  else if (flags & O_NONBLOCK)
 8004ddc:	e0bffe17 	ldw	r2,-8(fp)
 8004de0:	1090000c 	andi	r2,r2,16384
 8004de4:	1005003a 	cmpeq	r2,r2,zero
 8004de8:	1000031e 	bne	r2,zero,8004df8 <altera_avalon_jtag_uart_write+0x220>
    return -EWOULDBLOCK;
 8004dec:	00bffd44 	movi	r2,-11
 8004df0:	e0bfff15 	stw	r2,-4(fp)
 8004df4:	00000206 	br	8004e00 <altera_avalon_jtag_uart_write+0x228>
  else
    return -EIO; /* Host not connected */
 8004df8:	00bffec4 	movi	r2,-5
 8004dfc:	e0bfff15 	stw	r2,-4(fp)
 8004e00:	e0bfff17 	ldw	r2,-4(fp)
}
 8004e04:	e037883a 	mov	sp,fp
 8004e08:	dfc00117 	ldw	ra,4(sp)
 8004e0c:	df000017 	ldw	fp,0(sp)
 8004e10:	dec00204 	addi	sp,sp,8
 8004e14:	f800283a 	ret

08004e18 <lcd_write_command>:

/* --------------------------------------------------------------------- */

static void lcd_write_command(altera_avalon_lcd_16207_state* sp, 
  unsigned char command)
{
 8004e18:	defffa04 	addi	sp,sp,-24
 8004e1c:	dfc00515 	stw	ra,20(sp)
 8004e20:	df000415 	stw	fp,16(sp)
 8004e24:	df000404 	addi	fp,sp,16
 8004e28:	e13ffe15 	stw	r4,-8(fp)
 8004e2c:	e17fff05 	stb	r5,-4(fp)
  unsigned int base = sp->base;
 8004e30:	e0bffe17 	ldw	r2,-8(fp)
 8004e34:	10800017 	ldw	r2,0(r2)
 8004e38:	e0bffd15 	stw	r2,-12(fp)
  /* We impose a timeout on the driver in case the LCD panel isn't connected.
   * The first time we call this function the timeout is approx 25ms 
   * (assuming 5 cycles per loop and a 200MHz clock).  Obviously systems
   * with slower clocks, or debug builds, or slower memory will take longer.
   */
  int i = 1000000;
 8004e3c:	008003f4 	movhi	r2,15
 8004e40:	10909004 	addi	r2,r2,16960
 8004e44:	e0bffc15 	stw	r2,-16(fp)

  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
 8004e48:	e0bffe17 	ldw	r2,-8(fp)
 8004e4c:	10800803 	ldbu	r2,32(r2)
 8004e50:	10803fcc 	andi	r2,r2,255
 8004e54:	1080201c 	xori	r2,r2,128
 8004e58:	10bfe004 	addi	r2,r2,-128
 8004e5c:	1004c03a 	cmpne	r2,r2,zero
 8004e60:	1000161e 	bne	r2,zero,8004ebc <lcd_write_command+0xa4>
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
 8004e64:	00000a06 	br	8004e90 <lcd_write_command+0x78>
    if (--i == 0)
 8004e68:	e0bffc17 	ldw	r2,-16(fp)
 8004e6c:	10bfffc4 	addi	r2,r2,-1
 8004e70:	e0bffc15 	stw	r2,-16(fp)
 8004e74:	e0bffc17 	ldw	r2,-16(fp)
 8004e78:	1004c03a 	cmpne	r2,r2,zero
 8004e7c:	1000041e 	bne	r2,zero,8004e90 <lcd_write_command+0x78>
    {
      sp->broken = 1;
 8004e80:	e0fffe17 	ldw	r3,-8(fp)
 8004e84:	00800044 	movi	r2,1
 8004e88:	18800805 	stb	r2,32(r3)
      return;
 8004e8c:	00000b06 	br	8004ebc <lcd_write_command+0xa4>
  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
 8004e90:	e0bffd17 	ldw	r2,-12(fp)
 8004e94:	10800104 	addi	r2,r2,4
 8004e98:	10800037 	ldwio	r2,0(r2)
 8004e9c:	1080200c 	andi	r2,r2,128
 8004ea0:	1004c03a 	cmpne	r2,r2,zero
 8004ea4:	103ff01e 	bne	r2,zero,8004e68 <lcd_write_command+0x50>
    }

  /* Despite what it says in the datasheet, the LCD isn't ready to accept
   * a write immediately after it returns BUSY=0.  Wait for 100us more.
   */
  usleep(100);
 8004ea8:	01001904 	movi	r4,100
 8004eac:	80040f40 	call	80040f4 <usleep>

  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, command);
 8004eb0:	e0bffd17 	ldw	r2,-12(fp)
 8004eb4:	e0ffff03 	ldbu	r3,-4(fp)
 8004eb8:	10c00035 	stwio	r3,0(r2)
}
 8004ebc:	e037883a 	mov	sp,fp
 8004ec0:	dfc00117 	ldw	ra,4(sp)
 8004ec4:	df000017 	ldw	fp,0(sp)
 8004ec8:	dec00204 	addi	sp,sp,8
 8004ecc:	f800283a 	ret

08004ed0 <lcd_write_data>:

/* --------------------------------------------------------------------- */

static void lcd_write_data(altera_avalon_lcd_16207_state* sp, 
  unsigned char data)
{
 8004ed0:	defffa04 	addi	sp,sp,-24
 8004ed4:	dfc00515 	stw	ra,20(sp)
 8004ed8:	df000415 	stw	fp,16(sp)
 8004edc:	df000404 	addi	fp,sp,16
 8004ee0:	e13ffe15 	stw	r4,-8(fp)
 8004ee4:	e17fff05 	stb	r5,-4(fp)
  unsigned int base = sp->base;
 8004ee8:	e0bffe17 	ldw	r2,-8(fp)
 8004eec:	10800017 	ldw	r2,0(r2)
 8004ef0:	e0bffd15 	stw	r2,-12(fp)
  /* We impose a timeout on the driver in case the LCD panel isn't connected.
   * The first time we call this function the timeout is approx 25ms 
   * (assuming 5 cycles per loop and a 200MHz clock).  Obviously systems
   * with slower clocks, or debug builds, or slower memory will take longer.
   */
  int i = 1000000;
 8004ef4:	008003f4 	movhi	r2,15
 8004ef8:	10909004 	addi	r2,r2,16960
 8004efc:	e0bffc15 	stw	r2,-16(fp)

  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
 8004f00:	e0bffe17 	ldw	r2,-8(fp)
 8004f04:	10800803 	ldbu	r2,32(r2)
 8004f08:	10803fcc 	andi	r2,r2,255
 8004f0c:	1080201c 	xori	r2,r2,128
 8004f10:	10bfe004 	addi	r2,r2,-128
 8004f14:	1004c03a 	cmpne	r2,r2,zero
 8004f18:	10001d1e 	bne	r2,zero,8004f90 <lcd_write_data+0xc0>
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
 8004f1c:	00000a06 	br	8004f48 <lcd_write_data+0x78>
    if (--i == 0)
 8004f20:	e0bffc17 	ldw	r2,-16(fp)
 8004f24:	10bfffc4 	addi	r2,r2,-1
 8004f28:	e0bffc15 	stw	r2,-16(fp)
 8004f2c:	e0bffc17 	ldw	r2,-16(fp)
 8004f30:	1004c03a 	cmpne	r2,r2,zero
 8004f34:	1000041e 	bne	r2,zero,8004f48 <lcd_write_data+0x78>
    {
      sp->broken = 1;
 8004f38:	e0fffe17 	ldw	r3,-8(fp)
 8004f3c:	00800044 	movi	r2,1
 8004f40:	18800805 	stb	r2,32(r3)
      return;
 8004f44:	00001206 	br	8004f90 <lcd_write_data+0xc0>
  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
 8004f48:	e0bffd17 	ldw	r2,-12(fp)
 8004f4c:	10800104 	addi	r2,r2,4
 8004f50:	10800037 	ldwio	r2,0(r2)
 8004f54:	1080200c 	andi	r2,r2,128
 8004f58:	1004c03a 	cmpne	r2,r2,zero
 8004f5c:	103ff01e 	bne	r2,zero,8004f20 <lcd_write_data+0x50>
    }

  /* Despite what it says in the datasheet, the LCD isn't ready to accept
   * a write immediately after it returns BUSY=0.  Wait for 100us more.
   */
  usleep(100);
 8004f60:	01001904 	movi	r4,100
 8004f64:	80040f40 	call	80040f4 <usleep>

  IOWR_ALTERA_AVALON_LCD_16207_DATA(base, data);
 8004f68:	e0bffd17 	ldw	r2,-12(fp)
 8004f6c:	10800204 	addi	r2,r2,8
 8004f70:	e0ffff03 	ldbu	r3,-4(fp)
 8004f74:	10c00035 	stwio	r3,0(r2)

  sp->address++;
 8004f78:	e0bffe17 	ldw	r2,-8(fp)
 8004f7c:	108008c3 	ldbu	r2,35(r2)
 8004f80:	10800044 	addi	r2,r2,1
 8004f84:	1007883a 	mov	r3,r2
 8004f88:	e0bffe17 	ldw	r2,-8(fp)
 8004f8c:	10c008c5 	stb	r3,35(r2)
}
 8004f90:	e037883a 	mov	sp,fp
 8004f94:	dfc00117 	ldw	ra,4(sp)
 8004f98:	df000017 	ldw	fp,0(sp)
 8004f9c:	dec00204 	addi	sp,sp,8
 8004fa0:	f800283a 	ret

08004fa4 <lcd_clear_screen>:

/* --------------------------------------------------------------------- */

static void lcd_clear_screen(altera_avalon_lcd_16207_state* sp)
{
 8004fa4:	defffc04 	addi	sp,sp,-16
 8004fa8:	dfc00315 	stw	ra,12(sp)
 8004fac:	df000215 	stw	fp,8(sp)
 8004fb0:	df000204 	addi	fp,sp,8
 8004fb4:	e13fff15 	stw	r4,-4(fp)
  int y;

  lcd_write_command(sp, LCD_CMD_CLEAR);
 8004fb8:	e13fff17 	ldw	r4,-4(fp)
 8004fbc:	01400044 	movi	r5,1
 8004fc0:	8004e180 	call	8004e18 <lcd_write_command>

  sp->x = 0;
 8004fc4:	e0bfff17 	ldw	r2,-4(fp)
 8004fc8:	10000845 	stb	zero,33(r2)
  sp->y = 0;
 8004fcc:	e0bfff17 	ldw	r2,-4(fp)
 8004fd0:	10000885 	stb	zero,34(r2)
  sp->address = 0;
 8004fd4:	e0bfff17 	ldw	r2,-4(fp)
 8004fd8:	100008c5 	stb	zero,35(r2)

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
 8004fdc:	e03ffe15 	stw	zero,-8(fp)
 8004fe0:	00001906 	br	8005048 <lcd_clear_screen+0xa4>
  {
    memset(sp->line[y].data, ' ', sizeof(sp->line[0].data));
 8004fe4:	e0bffe17 	ldw	r2,-8(fp)
 8004fe8:	108018e4 	muli	r2,r2,99
 8004fec:	10c01004 	addi	r3,r2,64
 8004ff0:	e0bfff17 	ldw	r2,-4(fp)
 8004ff4:	1889883a 	add	r4,r3,r2
 8004ff8:	01400804 	movi	r5,32
 8004ffc:	01801444 	movi	r6,81
 8005000:	80021940 	call	8002194 <memset>
    memset(sp->line[y].visible, ' ', sizeof(sp->line[0].visible));
 8005004:	e0bffe17 	ldw	r2,-8(fp)
 8005008:	108018e4 	muli	r2,r2,99
 800500c:	10c00c04 	addi	r3,r2,48
 8005010:	e0bfff17 	ldw	r2,-4(fp)
 8005014:	1889883a 	add	r4,r3,r2
 8005018:	01400804 	movi	r5,32
 800501c:	01800404 	movi	r6,16
 8005020:	80021940 	call	8002194 <memset>
    sp->line[y].width = 0;
 8005024:	e0bffe17 	ldw	r2,-8(fp)
 8005028:	e0ffff17 	ldw	r3,-4(fp)
 800502c:	108018e4 	muli	r2,r2,99
 8005030:	10c5883a 	add	r2,r2,r3
 8005034:	10802404 	addi	r2,r2,144
 8005038:	10000045 	stb	zero,1(r2)

  sp->x = 0;
  sp->y = 0;
  sp->address = 0;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
 800503c:	e0bffe17 	ldw	r2,-8(fp)
 8005040:	10800044 	addi	r2,r2,1
 8005044:	e0bffe15 	stw	r2,-8(fp)
 8005048:	e0bffe17 	ldw	r2,-8(fp)
 800504c:	10800090 	cmplti	r2,r2,2
 8005050:	103fe41e 	bne	r2,zero,8004fe4 <lcd_clear_screen+0x40>
  {
    memset(sp->line[y].data, ' ', sizeof(sp->line[0].data));
    memset(sp->line[y].visible, ' ', sizeof(sp->line[0].visible));
    sp->line[y].width = 0;
  }
}
 8005054:	e037883a 	mov	sp,fp
 8005058:	dfc00117 	ldw	ra,4(sp)
 800505c:	df000017 	ldw	fp,0(sp)
 8005060:	dec00204 	addi	sp,sp,8
 8005064:	f800283a 	ret

08005068 <lcd_repaint_screen>:

/* --------------------------------------------------------------------- */

static void lcd_repaint_screen(altera_avalon_lcd_16207_state* sp)
{
 8005068:	defff604 	addi	sp,sp,-40
 800506c:	dfc00915 	stw	ra,36(sp)
 8005070:	df000815 	stw	fp,32(sp)
 8005074:	dc000715 	stw	r16,28(sp)
 8005078:	df000704 	addi	fp,sp,28
 800507c:	e13fff15 	stw	r4,-4(fp)
  /* scrollpos controls how much the lines have scrolled round.  The speed
   * each line scrolls at is controlled by its speed variable - while
   * scrolline lines will wrap at the position set by width
   */

  int scrollpos = sp->scrollpos;
 8005080:	e0bfff17 	ldw	r2,-4(fp)
 8005084:	10800943 	ldbu	r2,37(r2)
 8005088:	10803fcc 	andi	r2,r2,255
 800508c:	1080201c 	xori	r2,r2,128
 8005090:	10bfe004 	addi	r2,r2,-128
 8005094:	e0bffc15 	stw	r2,-16(fp)

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
 8005098:	e03ffe15 	stw	zero,-8(fp)
 800509c:	00006406 	br	8005230 <lcd_repaint_screen+0x1c8>
  {
    int width  = sp->line[y].width;
 80050a0:	e0bffe17 	ldw	r2,-8(fp)
 80050a4:	e0ffff17 	ldw	r3,-4(fp)
 80050a8:	108018e4 	muli	r2,r2,99
 80050ac:	10c5883a 	add	r2,r2,r3
 80050b0:	10802404 	addi	r2,r2,144
 80050b4:	10800043 	ldbu	r2,1(r2)
 80050b8:	10803fcc 	andi	r2,r2,255
 80050bc:	1080201c 	xori	r2,r2,128
 80050c0:	10bfe004 	addi	r2,r2,-128
 80050c4:	e0bffb15 	stw	r2,-20(fp)
    int offset = (scrollpos * sp->line[y].speed) >> 8;
 80050c8:	e0bffe17 	ldw	r2,-8(fp)
 80050cc:	e0ffff17 	ldw	r3,-4(fp)
 80050d0:	108018e4 	muli	r2,r2,99
 80050d4:	10c5883a 	add	r2,r2,r3
 80050d8:	10802404 	addi	r2,r2,144
 80050dc:	10800083 	ldbu	r2,2(r2)
 80050e0:	10c03fcc 	andi	r3,r2,255
 80050e4:	e0bffc17 	ldw	r2,-16(fp)
 80050e8:	1885383a 	mul	r2,r3,r2
 80050ec:	1005d23a 	srai	r2,r2,8
 80050f0:	e0bffa15 	stw	r2,-24(fp)
    if (offset >= width)
 80050f4:	e0fffa17 	ldw	r3,-24(fp)
 80050f8:	e0bffb17 	ldw	r2,-20(fp)
 80050fc:	18800116 	blt	r3,r2,8005104 <lcd_repaint_screen+0x9c>
      offset = 0;
 8005100:	e03ffa15 	stw	zero,-24(fp)

    for (x = 0 ; x < ALT_LCD_WIDTH ; x++)
 8005104:	e03ffd15 	stw	zero,-12(fp)
 8005108:	00004306 	br	8005218 <lcd_repaint_screen+0x1b0>
    {
      char c = sp->line[y].data[(x + offset) % width];
 800510c:	e43ffe17 	ldw	r16,-8(fp)
 8005110:	e0fffd17 	ldw	r3,-12(fp)
 8005114:	e0bffa17 	ldw	r2,-24(fp)
 8005118:	1889883a 	add	r4,r3,r2
 800511c:	e17ffb17 	ldw	r5,-20(fp)
 8005120:	8000c0c0 	call	8000c0c <__modsi3>
 8005124:	1009883a 	mov	r4,r2
 8005128:	e0ffff17 	ldw	r3,-4(fp)
 800512c:	808018e4 	muli	r2,r16,99
 8005130:	10c5883a 	add	r2,r2,r3
 8005134:	1105883a 	add	r2,r2,r4
 8005138:	10801004 	addi	r2,r2,64
 800513c:	10800003 	ldbu	r2,0(r2)
 8005140:	e0bff945 	stb	r2,-27(fp)

      /* Writing data takes 40us, so don't do it unless required */
      if (sp->line[y].visible[x] != c)
 8005144:	e0bffe17 	ldw	r2,-8(fp)
 8005148:	e13ffd17 	ldw	r4,-12(fp)
 800514c:	e0ffff17 	ldw	r3,-4(fp)
 8005150:	108018e4 	muli	r2,r2,99
 8005154:	10c5883a 	add	r2,r2,r3
 8005158:	1105883a 	add	r2,r2,r4
 800515c:	10800c04 	addi	r2,r2,48
 8005160:	10800003 	ldbu	r2,0(r2)
 8005164:	10c03fcc 	andi	r3,r2,255
 8005168:	18c0201c 	xori	r3,r3,128
 800516c:	18ffe004 	addi	r3,r3,-128
 8005170:	e0bff947 	ldb	r2,-27(fp)
 8005174:	18802526 	beq	r3,r2,800520c <lcd_repaint_screen+0x1a4>
      {
        unsigned char address = x + colstart[y];
 8005178:	e0fffe17 	ldw	r3,-8(fp)
 800517c:	d0a00b04 	addi	r2,gp,-32724
 8005180:	1885883a 	add	r2,r3,r2
 8005184:	10800003 	ldbu	r2,0(r2)
 8005188:	1007883a 	mov	r3,r2
 800518c:	e0bffd17 	ldw	r2,-12(fp)
 8005190:	1885883a 	add	r2,r3,r2
 8005194:	e0bff905 	stb	r2,-28(fp)

        if (address != sp->address)
 8005198:	e0fff903 	ldbu	r3,-28(fp)
 800519c:	e0bfff17 	ldw	r2,-4(fp)
 80051a0:	108008c3 	ldbu	r2,35(r2)
 80051a4:	10803fcc 	andi	r2,r2,255
 80051a8:	1080201c 	xori	r2,r2,128
 80051ac:	10bfe004 	addi	r2,r2,-128
 80051b0:	18800926 	beq	r3,r2,80051d8 <lcd_repaint_screen+0x170>
        {
          lcd_write_command(sp, LCD_CMD_WRITE_DATA | address);
 80051b4:	e0fff903 	ldbu	r3,-28(fp)
 80051b8:	00bfe004 	movi	r2,-128
 80051bc:	1884b03a 	or	r2,r3,r2
 80051c0:	11403fcc 	andi	r5,r2,255
 80051c4:	e13fff17 	ldw	r4,-4(fp)
 80051c8:	8004e180 	call	8004e18 <lcd_write_command>
          sp->address = address;
 80051cc:	e0fff903 	ldbu	r3,-28(fp)
 80051d0:	e0bfff17 	ldw	r2,-4(fp)
 80051d4:	10c008c5 	stb	r3,35(r2)
        }

        lcd_write_data(sp, c);
 80051d8:	e0bff943 	ldbu	r2,-27(fp)
 80051dc:	11403fcc 	andi	r5,r2,255
 80051e0:	e13fff17 	ldw	r4,-4(fp)
 80051e4:	8004ed00 	call	8004ed0 <lcd_write_data>
        sp->line[y].visible[x] = c;
 80051e8:	e0bffe17 	ldw	r2,-8(fp)
 80051ec:	e13ffd17 	ldw	r4,-12(fp)
 80051f0:	e0ffff17 	ldw	r3,-4(fp)
 80051f4:	108018e4 	muli	r2,r2,99
 80051f8:	10c5883a 	add	r2,r2,r3
 80051fc:	1105883a 	add	r2,r2,r4
 8005200:	10c00c04 	addi	r3,r2,48
 8005204:	e0bff943 	ldbu	r2,-27(fp)
 8005208:	18800005 	stb	r2,0(r3)
    int width  = sp->line[y].width;
    int offset = (scrollpos * sp->line[y].speed) >> 8;
    if (offset >= width)
      offset = 0;

    for (x = 0 ; x < ALT_LCD_WIDTH ; x++)
 800520c:	e0bffd17 	ldw	r2,-12(fp)
 8005210:	10800044 	addi	r2,r2,1
 8005214:	e0bffd15 	stw	r2,-12(fp)
 8005218:	e0bffd17 	ldw	r2,-12(fp)
 800521c:	10800410 	cmplti	r2,r2,16
 8005220:	103fba1e 	bne	r2,zero,800510c <lcd_repaint_screen+0xa4>
   * scrolline lines will wrap at the position set by width
   */

  int scrollpos = sp->scrollpos;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
 8005224:	e0bffe17 	ldw	r2,-8(fp)
 8005228:	10800044 	addi	r2,r2,1
 800522c:	e0bffe15 	stw	r2,-8(fp)
 8005230:	e0bffe17 	ldw	r2,-8(fp)
 8005234:	10800090 	cmplti	r2,r2,2
 8005238:	103f991e 	bne	r2,zero,80050a0 <lcd_repaint_screen+0x38>
        lcd_write_data(sp, c);
        sp->line[y].visible[x] = c;
      }
    }
  }
}
 800523c:	e037883a 	mov	sp,fp
 8005240:	dfc00217 	ldw	ra,8(sp)
 8005244:	df000117 	ldw	fp,4(sp)
 8005248:	dc000017 	ldw	r16,0(sp)
 800524c:	dec00304 	addi	sp,sp,12
 8005250:	f800283a 	ret

08005254 <lcd_scroll_up>:

/* --------------------------------------------------------------------- */

static void lcd_scroll_up(altera_avalon_lcd_16207_state* sp)
{
 8005254:	defffc04 	addi	sp,sp,-16
 8005258:	dfc00315 	stw	ra,12(sp)
 800525c:	df000215 	stw	fp,8(sp)
 8005260:	df000204 	addi	fp,sp,8
 8005264:	e13fff15 	stw	r4,-4(fp)
  int y;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
 8005268:	e03ffe15 	stw	zero,-8(fp)
 800526c:	00001d06 	br	80052e4 <lcd_scroll_up+0x90>
  {
    if (y < ALT_LCD_HEIGHT-1)
 8005270:	e0bffe17 	ldw	r2,-8(fp)
 8005274:	10800048 	cmpgei	r2,r2,1
 8005278:	10000f1e 	bne	r2,zero,80052b8 <lcd_scroll_up+0x64>
      memcpy(sp->line[y].data, sp->line[y+1].data, ALT_LCD_VIRTUAL_WIDTH);
 800527c:	e0bffe17 	ldw	r2,-8(fp)
 8005280:	108018e4 	muli	r2,r2,99
 8005284:	10c01004 	addi	r3,r2,64
 8005288:	e0bfff17 	ldw	r2,-4(fp)
 800528c:	1889883a 	add	r4,r3,r2
 8005290:	e0bffe17 	ldw	r2,-8(fp)
 8005294:	10800044 	addi	r2,r2,1
 8005298:	108018e4 	muli	r2,r2,99
 800529c:	10c01004 	addi	r3,r2,64
 80052a0:	e0bfff17 	ldw	r2,-4(fp)
 80052a4:	1885883a 	add	r2,r3,r2
 80052a8:	100b883a 	mov	r5,r2
 80052ac:	01801404 	movi	r6,80
 80052b0:	80020140 	call	8002014 <memcpy>
 80052b4:	00000806 	br	80052d8 <lcd_scroll_up+0x84>
    else
      memset(sp->line[y].data, ' ', ALT_LCD_VIRTUAL_WIDTH);
 80052b8:	e0bffe17 	ldw	r2,-8(fp)
 80052bc:	108018e4 	muli	r2,r2,99
 80052c0:	10c01004 	addi	r3,r2,64
 80052c4:	e0bfff17 	ldw	r2,-4(fp)
 80052c8:	1889883a 	add	r4,r3,r2
 80052cc:	01400804 	movi	r5,32
 80052d0:	01801404 	movi	r6,80
 80052d4:	80021940 	call	8002194 <memset>

static void lcd_scroll_up(altera_avalon_lcd_16207_state* sp)
{
  int y;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
 80052d8:	e0bffe17 	ldw	r2,-8(fp)
 80052dc:	10800044 	addi	r2,r2,1
 80052e0:	e0bffe15 	stw	r2,-8(fp)
 80052e4:	e0bffe17 	ldw	r2,-8(fp)
 80052e8:	10800090 	cmplti	r2,r2,2
 80052ec:	103fe01e 	bne	r2,zero,8005270 <lcd_scroll_up+0x1c>
      memcpy(sp->line[y].data, sp->line[y+1].data, ALT_LCD_VIRTUAL_WIDTH);
    else
      memset(sp->line[y].data, ' ', ALT_LCD_VIRTUAL_WIDTH);
  }

  sp->y--;
 80052f0:	e0bfff17 	ldw	r2,-4(fp)
 80052f4:	10800883 	ldbu	r2,34(r2)
 80052f8:	10bfffc4 	addi	r2,r2,-1
 80052fc:	1007883a 	mov	r3,r2
 8005300:	e0bfff17 	ldw	r2,-4(fp)
 8005304:	10c00885 	stb	r3,34(r2)
}
 8005308:	e037883a 	mov	sp,fp
 800530c:	dfc00117 	ldw	ra,4(sp)
 8005310:	df000017 	ldw	fp,0(sp)
 8005314:	dec00204 	addi	sp,sp,8
 8005318:	f800283a 	ret

0800531c <lcd_handle_escape>:

/* --------------------------------------------------------------------- */

static void lcd_handle_escape(altera_avalon_lcd_16207_state* sp, char c)
{
 800531c:	defff804 	addi	sp,sp,-32
 8005320:	dfc00715 	stw	ra,28(sp)
 8005324:	df000615 	stw	fp,24(sp)
 8005328:	df000604 	addi	fp,sp,24
 800532c:	e13ffd15 	stw	r4,-12(fp)
 8005330:	e17ffe05 	stb	r5,-8(fp)
  int parm1 = 0, parm2 = 0;
 8005334:	e03ffc15 	stw	zero,-16(fp)
 8005338:	e03ffb15 	stw	zero,-20(fp)

  if (sp->escape[0] == '[')
 800533c:	e0bffd17 	ldw	r2,-12(fp)
 8005340:	10800a03 	ldbu	r2,40(r2)
 8005344:	10803fcc 	andi	r2,r2,255
 8005348:	1080201c 	xori	r2,r2,128
 800534c:	10bfe004 	addi	r2,r2,-128
 8005350:	108016d8 	cmpnei	r2,r2,91
 8005354:	1000491e 	bne	r2,zero,800547c <lcd_handle_escape+0x160>
  {
    char * ptr = sp->escape+1;
 8005358:	e0bffd17 	ldw	r2,-12(fp)
 800535c:	10800a04 	addi	r2,r2,40
 8005360:	10800044 	addi	r2,r2,1
 8005364:	e0bffa15 	stw	r2,-24(fp)
    while (isdigit(*ptr))
 8005368:	00000d06 	br	80053a0 <lcd_handle_escape+0x84>
      parm1 = (parm1 * 10) + (*ptr++ - '0');
 800536c:	e0bffc17 	ldw	r2,-16(fp)
 8005370:	10c002a4 	muli	r3,r2,10
 8005374:	e0bffa17 	ldw	r2,-24(fp)
 8005378:	10800003 	ldbu	r2,0(r2)
 800537c:	10803fcc 	andi	r2,r2,255
 8005380:	1080201c 	xori	r2,r2,128
 8005384:	10bfe004 	addi	r2,r2,-128
 8005388:	1885883a 	add	r2,r3,r2
 800538c:	10bff404 	addi	r2,r2,-48
 8005390:	e0bffc15 	stw	r2,-16(fp)
 8005394:	e0bffa17 	ldw	r2,-24(fp)
 8005398:	10800044 	addi	r2,r2,1
 800539c:	e0bffa15 	stw	r2,-24(fp)
  int parm1 = 0, parm2 = 0;

  if (sp->escape[0] == '[')
  {
    char * ptr = sp->escape+1;
    while (isdigit(*ptr))
 80053a0:	e0bffa17 	ldw	r2,-24(fp)
 80053a4:	10800003 	ldbu	r2,0(r2)
 80053a8:	10803fcc 	andi	r2,r2,255
 80053ac:	1080201c 	xori	r2,r2,128
 80053b0:	10bfe004 	addi	r2,r2,-128
 80053b4:	1007883a 	mov	r3,r2
 80053b8:	00820074 	movhi	r2,2049
 80053bc:	10a42604 	addi	r2,r2,-28520
 80053c0:	10800017 	ldw	r2,0(r2)
 80053c4:	1885883a 	add	r2,r3,r2
 80053c8:	10800003 	ldbu	r2,0(r2)
 80053cc:	10803fcc 	andi	r2,r2,255
 80053d0:	1080010c 	andi	r2,r2,4
 80053d4:	1004c03a 	cmpne	r2,r2,zero
 80053d8:	103fe41e 	bne	r2,zero,800536c <lcd_handle_escape+0x50>
      parm1 = (parm1 * 10) + (*ptr++ - '0');

    if (*ptr == ';')
 80053dc:	e0bffa17 	ldw	r2,-24(fp)
 80053e0:	10800003 	ldbu	r2,0(r2)
 80053e4:	10803fcc 	andi	r2,r2,255
 80053e8:	1080201c 	xori	r2,r2,128
 80053ec:	10bfe004 	addi	r2,r2,-128
 80053f0:	10800ed8 	cmpnei	r2,r2,59
 80053f4:	1000231e 	bne	r2,zero,8005484 <lcd_handle_escape+0x168>
    {
      ptr++;
 80053f8:	e0bffa17 	ldw	r2,-24(fp)
 80053fc:	10800044 	addi	r2,r2,1
 8005400:	e0bffa15 	stw	r2,-24(fp)
      while (isdigit(*ptr))
 8005404:	00000d06 	br	800543c <lcd_handle_escape+0x120>
        parm2 = (parm2 * 10) + (*ptr++ - '0');
 8005408:	e0bffb17 	ldw	r2,-20(fp)
 800540c:	10c002a4 	muli	r3,r2,10
 8005410:	e0bffa17 	ldw	r2,-24(fp)
 8005414:	10800003 	ldbu	r2,0(r2)
 8005418:	10803fcc 	andi	r2,r2,255
 800541c:	1080201c 	xori	r2,r2,128
 8005420:	10bfe004 	addi	r2,r2,-128
 8005424:	1885883a 	add	r2,r3,r2
 8005428:	10bff404 	addi	r2,r2,-48
 800542c:	e0bffb15 	stw	r2,-20(fp)
 8005430:	e0bffa17 	ldw	r2,-24(fp)
 8005434:	10800044 	addi	r2,r2,1
 8005438:	e0bffa15 	stw	r2,-24(fp)
      parm1 = (parm1 * 10) + (*ptr++ - '0');

    if (*ptr == ';')
    {
      ptr++;
      while (isdigit(*ptr))
 800543c:	e0bffa17 	ldw	r2,-24(fp)
 8005440:	10800003 	ldbu	r2,0(r2)
 8005444:	10803fcc 	andi	r2,r2,255
 8005448:	1080201c 	xori	r2,r2,128
 800544c:	10bfe004 	addi	r2,r2,-128
 8005450:	1007883a 	mov	r3,r2
 8005454:	00820074 	movhi	r2,2049
 8005458:	10a42604 	addi	r2,r2,-28520
 800545c:	10800017 	ldw	r2,0(r2)
 8005460:	1885883a 	add	r2,r3,r2
 8005464:	10800003 	ldbu	r2,0(r2)
 8005468:	10803fcc 	andi	r2,r2,255
 800546c:	1080010c 	andi	r2,r2,4
 8005470:	1004c03a 	cmpne	r2,r2,zero
 8005474:	103fe41e 	bne	r2,zero,8005408 <lcd_handle_escape+0xec>
 8005478:	00000206 	br	8005484 <lcd_handle_escape+0x168>
        parm2 = (parm2 * 10) + (*ptr++ - '0');
    }
  }
  else
    parm1 = -1;
 800547c:	00bfffc4 	movi	r2,-1
 8005480:	e0bffc15 	stw	r2,-16(fp)

  switch (c)
 8005484:	e0bffe07 	ldb	r2,-8(fp)
 8005488:	e0bfff15 	stw	r2,-4(fp)
 800548c:	e0ffff17 	ldw	r3,-4(fp)
 8005490:	188012a0 	cmpeqi	r2,r3,74
 8005494:	10002f1e 	bne	r2,zero,8005554 <lcd_handle_escape+0x238>
 8005498:	e0ffff17 	ldw	r3,-4(fp)
 800549c:	188012c8 	cmpgei	r2,r3,75
 80054a0:	1000041e 	bne	r2,zero,80054b4 <lcd_handle_escape+0x198>
 80054a4:	e0ffff17 	ldw	r3,-4(fp)
 80054a8:	18801220 	cmpeqi	r2,r3,72
 80054ac:	1000081e 	bne	r2,zero,80054d0 <lcd_handle_escape+0x1b4>
 80054b0:	00004906 	br	80055d8 <lcd_handle_escape+0x2bc>
 80054b4:	e0ffff17 	ldw	r3,-4(fp)
 80054b8:	188012e0 	cmpeqi	r2,r3,75
 80054bc:	10002b1e 	bne	r2,zero,800556c <lcd_handle_escape+0x250>
 80054c0:	e0ffff17 	ldw	r3,-4(fp)
 80054c4:	188019a0 	cmpeqi	r2,r3,102
 80054c8:	1000011e 	bne	r2,zero,80054d0 <lcd_handle_escape+0x1b4>
 80054cc:	00004206 	br	80055d8 <lcd_handle_escape+0x2bc>
  {
  case 'H': /* ESC '[' <y> ';' <x> 'H'  : Move cursor to location */
  case 'f': /* Same as above */
    if (parm2 > 0)
 80054d0:	e0bffb17 	ldw	r2,-20(fp)
 80054d4:	10800050 	cmplti	r2,r2,1
 80054d8:	1000051e 	bne	r2,zero,80054f0 <lcd_handle_escape+0x1d4>
      sp->x = parm2 - 1;
 80054dc:	e0bffb17 	ldw	r2,-20(fp)
 80054e0:	10bfffc4 	addi	r2,r2,-1
 80054e4:	1007883a 	mov	r3,r2
 80054e8:	e0bffd17 	ldw	r2,-12(fp)
 80054ec:	10c00845 	stb	r3,33(r2)
    if (parm1 > 0)
 80054f0:	e0bffc17 	ldw	r2,-16(fp)
 80054f4:	10800050 	cmplti	r2,r2,1
 80054f8:	1000371e 	bne	r2,zero,80055d8 <lcd_handle_escape+0x2bc>
    {
      sp->y = parm1 - 1;
 80054fc:	e0bffc17 	ldw	r2,-16(fp)
 8005500:	10bfffc4 	addi	r2,r2,-1
 8005504:	1007883a 	mov	r3,r2
 8005508:	e0bffd17 	ldw	r2,-12(fp)
 800550c:	10c00885 	stb	r3,34(r2)
      if (sp->y > ALT_LCD_HEIGHT * 2)
 8005510:	e0bffd17 	ldw	r2,-12(fp)
 8005514:	10800883 	ldbu	r2,34(r2)
 8005518:	10803fcc 	andi	r2,r2,255
 800551c:	10800170 	cmpltui	r2,r2,5
 8005520:	1000061e 	bne	r2,zero,800553c <lcd_handle_escape+0x220>
        sp->y = ALT_LCD_HEIGHT * 2;
 8005524:	e0fffd17 	ldw	r3,-12(fp)
 8005528:	00800104 	movi	r2,4
 800552c:	18800885 	stb	r2,34(r3)
      while (sp->y > ALT_LCD_HEIGHT)
 8005530:	00000206 	br	800553c <lcd_handle_escape+0x220>
        lcd_scroll_up(sp);
 8005534:	e13ffd17 	ldw	r4,-12(fp)
 8005538:	80052540 	call	8005254 <lcd_scroll_up>
    if (parm1 > 0)
    {
      sp->y = parm1 - 1;
      if (sp->y > ALT_LCD_HEIGHT * 2)
        sp->y = ALT_LCD_HEIGHT * 2;
      while (sp->y > ALT_LCD_HEIGHT)
 800553c:	e0bffd17 	ldw	r2,-12(fp)
 8005540:	10800883 	ldbu	r2,34(r2)
 8005544:	10803fcc 	andi	r2,r2,255
 8005548:	108000e8 	cmpgeui	r2,r2,3
 800554c:	103ff91e 	bne	r2,zero,8005534 <lcd_handle_escape+0x218>
        lcd_scroll_up(sp);
    }
    break;
 8005550:	00002106 	br	80055d8 <lcd_handle_escape+0x2bc>
    /*   ESC J      is clear to beginning of line    [unimplemented]
     *   ESC [ 0 J  is clear to bottom of screen     [unimplemented]
     *   ESC [ 1 J  is clear to beginning of screen  [unimplemented]
     *   ESC [ 2 J  is clear screen
     */
    if (parm1 == 2)
 8005554:	e0bffc17 	ldw	r2,-16(fp)
 8005558:	10800098 	cmpnei	r2,r2,2
 800555c:	10001e1e 	bne	r2,zero,80055d8 <lcd_handle_escape+0x2bc>
      lcd_clear_screen(sp);
 8005560:	e13ffd17 	ldw	r4,-12(fp)
 8005564:	8004fa40 	call	8004fa4 <lcd_clear_screen>
    break;
 8005568:	00001b06 	br	80055d8 <lcd_handle_escape+0x2bc>
    /*   ESC K      is clear to end of line
     *   ESC [ 0 K  is clear to end of line
     *   ESC [ 1 K  is clear to beginning of line    [unimplemented]
     *   ESC [ 2 K  is clear line                    [unimplemented]
     */
    if (parm1 < 1)
 800556c:	e0bffc17 	ldw	r2,-16(fp)
 8005570:	10800048 	cmpgei	r2,r2,1
 8005574:	1000181e 	bne	r2,zero,80055d8 <lcd_handle_escape+0x2bc>
    {
      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
 8005578:	e0bffd17 	ldw	r2,-12(fp)
 800557c:	10800843 	ldbu	r2,33(r2)
 8005580:	10803fcc 	andi	r2,r2,255
 8005584:	10801428 	cmpgeui	r2,r2,80
 8005588:	1000131e 	bne	r2,zero,80055d8 <lcd_handle_escape+0x2bc>
        memset(sp->line[sp->y].data + sp->x, ' ', ALT_LCD_VIRTUAL_WIDTH - sp->x);
 800558c:	e0bffd17 	ldw	r2,-12(fp)
 8005590:	10800883 	ldbu	r2,34(r2)
 8005594:	10803fcc 	andi	r2,r2,255
 8005598:	108018e4 	muli	r2,r2,99
 800559c:	10c01004 	addi	r3,r2,64
 80055a0:	e0bffd17 	ldw	r2,-12(fp)
 80055a4:	1887883a 	add	r3,r3,r2
 80055a8:	e0bffd17 	ldw	r2,-12(fp)
 80055ac:	10800843 	ldbu	r2,33(r2)
 80055b0:	10803fcc 	andi	r2,r2,255
 80055b4:	1889883a 	add	r4,r3,r2
 80055b8:	e0bffd17 	ldw	r2,-12(fp)
 80055bc:	10800843 	ldbu	r2,33(r2)
 80055c0:	10c03fcc 	andi	r3,r2,255
 80055c4:	00801404 	movi	r2,80
 80055c8:	10c5c83a 	sub	r2,r2,r3
 80055cc:	100d883a 	mov	r6,r2
 80055d0:	01400804 	movi	r5,32
 80055d4:	80021940 	call	8002194 <memset>
    }
    break;
  }
}
 80055d8:	e037883a 	mov	sp,fp
 80055dc:	dfc00117 	ldw	ra,4(sp)
 80055e0:	df000017 	ldw	fp,0(sp)
 80055e4:	dec00204 	addi	sp,sp,8
 80055e8:	f800283a 	ret

080055ec <altera_avalon_lcd_16207_write>:

/* --------------------------------------------------------------------- */

int altera_avalon_lcd_16207_write(altera_avalon_lcd_16207_state* sp, 
  const char* ptr, int len, int flags)
{
 80055ec:	defff204 	addi	sp,sp,-56
 80055f0:	dfc00d15 	stw	ra,52(sp)
 80055f4:	df000c15 	stw	fp,48(sp)
 80055f8:	dc000b15 	stw	r16,44(sp)
 80055fc:	df000b04 	addi	fp,sp,44
 8005600:	e13ffc15 	stw	r4,-16(fp)
 8005604:	e17ffd15 	stw	r5,-12(fp)
 8005608:	e1bffe15 	stw	r6,-8(fp)
 800560c:	e1ffff15 	stw	r7,-4(fp)
  const char* end = ptr + len;
 8005610:	e0bffe17 	ldw	r2,-8(fp)
 8005614:	1007883a 	mov	r3,r2
 8005618:	e0bffd17 	ldw	r2,-12(fp)
 800561c:	10c5883a 	add	r2,r2,r3
 8005620:	e0bffb15 	stw	r2,-20(fp)

  ALT_SEM_PEND (sp->write_lock, 0);

  /* Tell the routine which is called off the timer interrupt that the
   * foreground routines are active so it must not repaint the display. */
  sp->active = 1;
 8005624:	e0fffc17 	ldw	r3,-16(fp)
 8005628:	00800044 	movi	r2,1
 800562c:	188009c5 	stb	r2,39(r3)

  for ( ; ptr < end ; ptr++)
 8005630:	0000a206 	br	80058bc <altera_avalon_lcd_16207_write+0x2d0>
  {
    char c = *ptr;
 8005634:	e0bffd17 	ldw	r2,-12(fp)
 8005638:	10800003 	ldbu	r2,0(r2)
 800563c:	e0bff805 	stb	r2,-32(fp)

    if (sp->esccount >= 0)
 8005640:	e0bffc17 	ldw	r2,-16(fp)
 8005644:	10800903 	ldbu	r2,36(r2)
 8005648:	10803fcc 	andi	r2,r2,255
 800564c:	1080201c 	xori	r2,r2,128
 8005650:	10bfe004 	addi	r2,r2,-128
 8005654:	1004803a 	cmplt	r2,r2,zero
 8005658:	10003b1e 	bne	r2,zero,8005748 <altera_avalon_lcd_16207_write+0x15c>
    {
      unsigned int esccount = sp->esccount;
 800565c:	e0bffc17 	ldw	r2,-16(fp)
 8005660:	10800903 	ldbu	r2,36(r2)
 8005664:	10803fcc 	andi	r2,r2,255
 8005668:	1080201c 	xori	r2,r2,128
 800566c:	10bfe004 	addi	r2,r2,-128
 8005670:	e0bff715 	stw	r2,-36(fp)

      /* Single character escape sequences can end with any character
       * Multi character escape sequences start with '[' and contain
       * digits and semicolons before terminating
       */
      if ((esccount == 0 && c != '[') ||
 8005674:	e0bff717 	ldw	r2,-36(fp)
 8005678:	1004c03a 	cmpne	r2,r2,zero
 800567c:	1000031e 	bne	r2,zero,800568c <altera_avalon_lcd_16207_write+0xa0>
 8005680:	e0bff807 	ldb	r2,-32(fp)
 8005684:	108016d8 	cmpnei	r2,r2,91
 8005688:	1000111e 	bne	r2,zero,80056d0 <altera_avalon_lcd_16207_write+0xe4>
 800568c:	e0bff717 	ldw	r2,-36(fp)
 8005690:	1005003a 	cmpeq	r2,r2,zero
 8005694:	10001a1e 	bne	r2,zero,8005700 <altera_avalon_lcd_16207_write+0x114>
 8005698:	e0bff807 	ldb	r2,-32(fp)
 800569c:	1007883a 	mov	r3,r2
 80056a0:	00820074 	movhi	r2,2049
 80056a4:	10a42604 	addi	r2,r2,-28520
 80056a8:	10800017 	ldw	r2,0(r2)
 80056ac:	1885883a 	add	r2,r3,r2
 80056b0:	10800003 	ldbu	r2,0(r2)
 80056b4:	10803fcc 	andi	r2,r2,255
 80056b8:	1080010c 	andi	r2,r2,4
 80056bc:	1004c03a 	cmpne	r2,r2,zero
 80056c0:	10000f1e 	bne	r2,zero,8005700 <altera_avalon_lcd_16207_write+0x114>
 80056c4:	e0bff807 	ldb	r2,-32(fp)
 80056c8:	10800ee0 	cmpeqi	r2,r2,59
 80056cc:	10000c1e 	bne	r2,zero,8005700 <altera_avalon_lcd_16207_write+0x114>
          (esccount > 0 && !isdigit(c) && c != ';'))
      {
        sp->escape[esccount] = 0;
 80056d0:	e0fff717 	ldw	r3,-36(fp)
 80056d4:	e0bffc17 	ldw	r2,-16(fp)
 80056d8:	1885883a 	add	r2,r3,r2
 80056dc:	10800a04 	addi	r2,r2,40
 80056e0:	10000005 	stb	zero,0(r2)

        lcd_handle_escape(sp, c);
 80056e4:	e17ff807 	ldb	r5,-32(fp)
 80056e8:	e13ffc17 	ldw	r4,-16(fp)
 80056ec:	800531c0 	call	800531c <lcd_handle_escape>

        sp->esccount = -1;
 80056f0:	e0fffc17 	ldw	r3,-16(fp)
 80056f4:	00bfffc4 	movi	r2,-1
 80056f8:	18800905 	stb	r2,36(r3)

      /* Single character escape sequences can end with any character
       * Multi character escape sequences start with '[' and contain
       * digits and semicolons before terminating
       */
      if ((esccount == 0 && c != '[') ||
 80056fc:	00006c06 	br	80058b0 <altera_avalon_lcd_16207_write+0x2c4>

        lcd_handle_escape(sp, c);

        sp->esccount = -1;
      }
      else if (sp->esccount < sizeof(sp->escape)-1)
 8005700:	e0bffc17 	ldw	r2,-16(fp)
 8005704:	10800903 	ldbu	r2,36(r2)
 8005708:	10803fcc 	andi	r2,r2,255
 800570c:	108001e8 	cmpgeui	r2,r2,7
 8005710:	1000671e 	bne	r2,zero,80058b0 <altera_avalon_lcd_16207_write+0x2c4>
      {
        sp->escape[esccount] = c;
 8005714:	e0fff717 	ldw	r3,-36(fp)
 8005718:	e0bffc17 	ldw	r2,-16(fp)
 800571c:	1885883a 	add	r2,r3,r2
 8005720:	10c00a04 	addi	r3,r2,40
 8005724:	e0bff803 	ldbu	r2,-32(fp)
 8005728:	18800005 	stb	r2,0(r3)
        sp->esccount++;
 800572c:	e0bffc17 	ldw	r2,-16(fp)
 8005730:	10800903 	ldbu	r2,36(r2)
 8005734:	10800044 	addi	r2,r2,1
 8005738:	1007883a 	mov	r3,r2
 800573c:	e0bffc17 	ldw	r2,-16(fp)
 8005740:	10c00905 	stb	r3,36(r2)
 8005744:	00005a06 	br	80058b0 <altera_avalon_lcd_16207_write+0x2c4>
      }
    }
    else if (c == 27) /* ESC */
 8005748:	e0bff807 	ldb	r2,-32(fp)
 800574c:	108006d8 	cmpnei	r2,r2,27
 8005750:	1000031e 	bne	r2,zero,8005760 <altera_avalon_lcd_16207_write+0x174>
    {
      sp->esccount = 0;
 8005754:	e0bffc17 	ldw	r2,-16(fp)
 8005758:	10000905 	stb	zero,36(r2)
 800575c:	00005406 	br	80058b0 <altera_avalon_lcd_16207_write+0x2c4>
    }
    else if (c == '\r')
 8005760:	e0bff807 	ldb	r2,-32(fp)
 8005764:	10800358 	cmpnei	r2,r2,13
 8005768:	1000031e 	bne	r2,zero,8005778 <altera_avalon_lcd_16207_write+0x18c>
    {
      sp->x = 0;
 800576c:	e0bffc17 	ldw	r2,-16(fp)
 8005770:	10000845 	stb	zero,33(r2)
 8005774:	00004e06 	br	80058b0 <altera_avalon_lcd_16207_write+0x2c4>
    }
    else if (c == '\n')
 8005778:	e0bff807 	ldb	r2,-32(fp)
 800577c:	10800298 	cmpnei	r2,r2,10
 8005780:	1000101e 	bne	r2,zero,80057c4 <altera_avalon_lcd_16207_write+0x1d8>
    {
      sp->x = 0;
 8005784:	e0bffc17 	ldw	r2,-16(fp)
 8005788:	10000845 	stb	zero,33(r2)
      sp->y++;
 800578c:	e0bffc17 	ldw	r2,-16(fp)
 8005790:	10800883 	ldbu	r2,34(r2)
 8005794:	10800044 	addi	r2,r2,1
 8005798:	1007883a 	mov	r3,r2
 800579c:	e0bffc17 	ldw	r2,-16(fp)
 80057a0:	10c00885 	stb	r3,34(r2)

      /* Let the cursor sit at X=0, Y=HEIGHT without scrolling so the user
       * can print two lines of data without losing one.
       */
      if (sp->y > ALT_LCD_HEIGHT)
 80057a4:	e0bffc17 	ldw	r2,-16(fp)
 80057a8:	10800883 	ldbu	r2,34(r2)
 80057ac:	10803fcc 	andi	r2,r2,255
 80057b0:	108000f0 	cmpltui	r2,r2,3
 80057b4:	10003e1e 	bne	r2,zero,80058b0 <altera_avalon_lcd_16207_write+0x2c4>
        lcd_scroll_up(sp);
 80057b8:	e13ffc17 	ldw	r4,-16(fp)
 80057bc:	80052540 	call	8005254 <lcd_scroll_up>
 80057c0:	00003b06 	br	80058b0 <altera_avalon_lcd_16207_write+0x2c4>
    }
    else if (c == '\b')
 80057c4:	e0bff807 	ldb	r2,-32(fp)
 80057c8:	10800218 	cmpnei	r2,r2,8
 80057cc:	10000c1e 	bne	r2,zero,8005800 <altera_avalon_lcd_16207_write+0x214>
    {
      if (sp->x > 0)
 80057d0:	e0bffc17 	ldw	r2,-16(fp)
 80057d4:	10800843 	ldbu	r2,33(r2)
 80057d8:	10803fcc 	andi	r2,r2,255
 80057dc:	1005003a 	cmpeq	r2,r2,zero
 80057e0:	1000331e 	bne	r2,zero,80058b0 <altera_avalon_lcd_16207_write+0x2c4>
        sp->x--;
 80057e4:	e0bffc17 	ldw	r2,-16(fp)
 80057e8:	10800843 	ldbu	r2,33(r2)
 80057ec:	10bfffc4 	addi	r2,r2,-1
 80057f0:	1007883a 	mov	r3,r2
 80057f4:	e0bffc17 	ldw	r2,-16(fp)
 80057f8:	10c00845 	stb	r3,33(r2)
 80057fc:	00002c06 	br	80058b0 <altera_avalon_lcd_16207_write+0x2c4>
    }
    else if (isprint(c))
 8005800:	e0bff807 	ldb	r2,-32(fp)
 8005804:	1007883a 	mov	r3,r2
 8005808:	00820074 	movhi	r2,2049
 800580c:	10a42604 	addi	r2,r2,-28520
 8005810:	10800017 	ldw	r2,0(r2)
 8005814:	1885883a 	add	r2,r3,r2
 8005818:	10800003 	ldbu	r2,0(r2)
 800581c:	10803fcc 	andi	r2,r2,255
 8005820:	1080201c 	xori	r2,r2,128
 8005824:	10bfe004 	addi	r2,r2,-128
 8005828:	108025cc 	andi	r2,r2,151
 800582c:	1005003a 	cmpeq	r2,r2,zero
 8005830:	10001f1e 	bne	r2,zero,80058b0 <altera_avalon_lcd_16207_write+0x2c4>
    {
      /* If we didn't scroll on the last linefeed then we might need to do
       * it now. */
      if (sp->y >= ALT_LCD_HEIGHT)
 8005834:	e0bffc17 	ldw	r2,-16(fp)
 8005838:	10800883 	ldbu	r2,34(r2)
 800583c:	10803fcc 	andi	r2,r2,255
 8005840:	108000b0 	cmpltui	r2,r2,2
 8005844:	1000021e 	bne	r2,zero,8005850 <altera_avalon_lcd_16207_write+0x264>
        lcd_scroll_up(sp);
 8005848:	e13ffc17 	ldw	r4,-16(fp)
 800584c:	80052540 	call	8005254 <lcd_scroll_up>

      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
 8005850:	e0bffc17 	ldw	r2,-16(fp)
 8005854:	10800843 	ldbu	r2,33(r2)
 8005858:	10803fcc 	andi	r2,r2,255
 800585c:	10801428 	cmpgeui	r2,r2,80
 8005860:	10000d1e 	bne	r2,zero,8005898 <altera_avalon_lcd_16207_write+0x2ac>
        sp->line[sp->y].data[sp->x] = c;
 8005864:	e0bffc17 	ldw	r2,-16(fp)
 8005868:	10800883 	ldbu	r2,34(r2)
 800586c:	11003fcc 	andi	r4,r2,255
 8005870:	e0bffc17 	ldw	r2,-16(fp)
 8005874:	10800843 	ldbu	r2,33(r2)
 8005878:	11403fcc 	andi	r5,r2,255
 800587c:	e0fffc17 	ldw	r3,-16(fp)
 8005880:	208018e4 	muli	r2,r4,99
 8005884:	10c5883a 	add	r2,r2,r3
 8005888:	1145883a 	add	r2,r2,r5
 800588c:	10c01004 	addi	r3,r2,64
 8005890:	e0bff803 	ldbu	r2,-32(fp)
 8005894:	18800005 	stb	r2,0(r3)

      sp->x++;
 8005898:	e0bffc17 	ldw	r2,-16(fp)
 800589c:	10800843 	ldbu	r2,33(r2)
 80058a0:	10800044 	addi	r2,r2,1
 80058a4:	1007883a 	mov	r3,r2
 80058a8:	e0bffc17 	ldw	r2,-16(fp)
 80058ac:	10c00845 	stb	r3,33(r2)

  /* Tell the routine which is called off the timer interrupt that the
   * foreground routines are active so it must not repaint the display. */
  sp->active = 1;

  for ( ; ptr < end ; ptr++)
 80058b0:	e0bffd17 	ldw	r2,-12(fp)
 80058b4:	10800044 	addi	r2,r2,1
 80058b8:	e0bffd15 	stw	r2,-12(fp)
 80058bc:	e0fffd17 	ldw	r3,-12(fp)
 80058c0:	e0bffb17 	ldw	r2,-20(fp)
 80058c4:	18bf5b36 	bltu	r3,r2,8005634 <altera_avalon_lcd_16207_write+0x48>
      sp->x++;
    }
  }

  /* Recalculate the scrolling parameters */
  widthmax = ALT_LCD_WIDTH;
 80058c8:	00800404 	movi	r2,16
 80058cc:	e0bff915 	stw	r2,-28(fp)
  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
 80058d0:	e03ffa15 	stw	zero,-24(fp)
 80058d4:	00003606 	br	80059b0 <altera_avalon_lcd_16207_write+0x3c4>
  {
    int width;
    for (width = ALT_LCD_VIRTUAL_WIDTH ; width > 0 ; width--)
 80058d8:	00801404 	movi	r2,80
 80058dc:	e0bff615 	stw	r2,-40(fp)
 80058e0:	00001106 	br	8005928 <altera_avalon_lcd_16207_write+0x33c>
      if (sp->line[y].data[width-1] != ' ')
 80058e4:	e13ffa17 	ldw	r4,-24(fp)
 80058e8:	e0bff617 	ldw	r2,-40(fp)
 80058ec:	117fffc4 	addi	r5,r2,-1
 80058f0:	e0fffc17 	ldw	r3,-16(fp)
 80058f4:	208018e4 	muli	r2,r4,99
 80058f8:	10c5883a 	add	r2,r2,r3
 80058fc:	1145883a 	add	r2,r2,r5
 8005900:	10801004 	addi	r2,r2,64
 8005904:	10800003 	ldbu	r2,0(r2)
 8005908:	10803fcc 	andi	r2,r2,255
 800590c:	1080201c 	xori	r2,r2,128
 8005910:	10bfe004 	addi	r2,r2,-128
 8005914:	10800818 	cmpnei	r2,r2,32
 8005918:	1000061e 	bne	r2,zero,8005934 <altera_avalon_lcd_16207_write+0x348>
  /* Recalculate the scrolling parameters */
  widthmax = ALT_LCD_WIDTH;
  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  {
    int width;
    for (width = ALT_LCD_VIRTUAL_WIDTH ; width > 0 ; width--)
 800591c:	e0bff617 	ldw	r2,-40(fp)
 8005920:	10bfffc4 	addi	r2,r2,-1
 8005924:	e0bff615 	stw	r2,-40(fp)
 8005928:	e0bff617 	ldw	r2,-40(fp)
 800592c:	10800048 	cmpgei	r2,r2,1
 8005930:	103fec1e 	bne	r2,zero,80058e4 <altera_avalon_lcd_16207_write+0x2f8>

    /* The minimum width is the size of the LCD panel.  If the real width
     * is long enough to require scrolling then add an extra space so the
     * end of the message doesn't run into the beginning of it.
     */
    if (width <= ALT_LCD_WIDTH)
 8005934:	e0bff617 	ldw	r2,-40(fp)
 8005938:	10800448 	cmpgei	r2,r2,17
 800593c:	1000031e 	bne	r2,zero,800594c <altera_avalon_lcd_16207_write+0x360>
      width = ALT_LCD_WIDTH;
 8005940:	00800404 	movi	r2,16
 8005944:	e0bff615 	stw	r2,-40(fp)
 8005948:	00000306 	br	8005958 <altera_avalon_lcd_16207_write+0x36c>
    else
      width++;
 800594c:	e0bff617 	ldw	r2,-40(fp)
 8005950:	10800044 	addi	r2,r2,1
 8005954:	e0bff615 	stw	r2,-40(fp)

    sp->line[y].width = width;
 8005958:	e13ffa17 	ldw	r4,-24(fp)
 800595c:	e0bff617 	ldw	r2,-40(fp)
 8005960:	100b883a 	mov	r5,r2
 8005964:	e0fffc17 	ldw	r3,-16(fp)
 8005968:	208018e4 	muli	r2,r4,99
 800596c:	10c5883a 	add	r2,r2,r3
 8005970:	10802404 	addi	r2,r2,144
 8005974:	11400045 	stb	r5,1(r2)
    if (widthmax < width)
 8005978:	e0fff917 	ldw	r3,-28(fp)
 800597c:	e0bff617 	ldw	r2,-40(fp)
 8005980:	1880020e 	bge	r3,r2,800598c <altera_avalon_lcd_16207_write+0x3a0>
      widthmax = width;
 8005984:	e0bff617 	ldw	r2,-40(fp)
 8005988:	e0bff915 	stw	r2,-28(fp)
    sp->line[y].speed = 0; /* By default lines don't scroll */
 800598c:	e0bffa17 	ldw	r2,-24(fp)
 8005990:	e0fffc17 	ldw	r3,-16(fp)
 8005994:	108018e4 	muli	r2,r2,99
 8005998:	10c5883a 	add	r2,r2,r3
 800599c:	10802404 	addi	r2,r2,144
 80059a0:	10000085 	stb	zero,2(r2)
    }
  }

  /* Recalculate the scrolling parameters */
  widthmax = ALT_LCD_WIDTH;
  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
 80059a4:	e0bffa17 	ldw	r2,-24(fp)
 80059a8:	10800044 	addi	r2,r2,1
 80059ac:	e0bffa15 	stw	r2,-24(fp)
 80059b0:	e0bffa17 	ldw	r2,-24(fp)
 80059b4:	10800090 	cmplti	r2,r2,2
 80059b8:	103fc71e 	bne	r2,zero,80058d8 <altera_avalon_lcd_16207_write+0x2ec>
    if (widthmax < width)
      widthmax = width;
    sp->line[y].speed = 0; /* By default lines don't scroll */
  }

  if (widthmax <= ALT_LCD_WIDTH)
 80059bc:	e0bff917 	ldw	r2,-28(fp)
 80059c0:	10800448 	cmpgei	r2,r2,17
 80059c4:	1000031e 	bne	r2,zero,80059d4 <altera_avalon_lcd_16207_write+0x3e8>
    sp->scrollmax = 0;
 80059c8:	e0bffc17 	ldw	r2,-16(fp)
 80059cc:	10000985 	stb	zero,38(r2)
 80059d0:	00002d06 	br	8005a88 <altera_avalon_lcd_16207_write+0x49c>
  else
  {
    widthmax *= 2;
 80059d4:	e0bff917 	ldw	r2,-28(fp)
 80059d8:	1085883a 	add	r2,r2,r2
 80059dc:	e0bff915 	stw	r2,-28(fp)
    sp->scrollmax = widthmax;
 80059e0:	e0bff917 	ldw	r2,-28(fp)
 80059e4:	1007883a 	mov	r3,r2
 80059e8:	e0bffc17 	ldw	r2,-16(fp)
 80059ec:	10c00985 	stb	r3,38(r2)

    /* Now calculate how fast each of the other lines should go */
    for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
 80059f0:	e03ffa15 	stw	zero,-24(fp)
 80059f4:	00002106 	br	8005a7c <altera_avalon_lcd_16207_write+0x490>
      if (sp->line[y].width > ALT_LCD_WIDTH)
 80059f8:	e0bffa17 	ldw	r2,-24(fp)
 80059fc:	e0fffc17 	ldw	r3,-16(fp)
 8005a00:	108018e4 	muli	r2,r2,99
 8005a04:	10c5883a 	add	r2,r2,r3
 8005a08:	10802404 	addi	r2,r2,144
 8005a0c:	10800043 	ldbu	r2,1(r2)
 8005a10:	10803fcc 	andi	r2,r2,255
 8005a14:	1080201c 	xori	r2,r2,128
 8005a18:	10bfe004 	addi	r2,r2,-128
 8005a1c:	10800450 	cmplti	r2,r2,17
 8005a20:	1000131e 	bne	r2,zero,8005a70 <altera_avalon_lcd_16207_write+0x484>
         */
#if 1
        /* This option makes all the lines scroll round at different speeds
         * which are chosen so that all the scrolls finish at the same time.
         */
        sp->line[y].speed = 256 * sp->line[y].width / widthmax;
 8005a24:	e43ffa17 	ldw	r16,-24(fp)
 8005a28:	e0bffa17 	ldw	r2,-24(fp)
 8005a2c:	e0fffc17 	ldw	r3,-16(fp)
 8005a30:	108018e4 	muli	r2,r2,99
 8005a34:	10c5883a 	add	r2,r2,r3
 8005a38:	10802404 	addi	r2,r2,144
 8005a3c:	10800043 	ldbu	r2,1(r2)
 8005a40:	10803fcc 	andi	r2,r2,255
 8005a44:	1080201c 	xori	r2,r2,128
 8005a48:	10bfe004 	addi	r2,r2,-128
 8005a4c:	1008923a 	slli	r4,r2,8
 8005a50:	e17ff917 	ldw	r5,-28(fp)
 8005a54:	8000bac0 	call	8000bac <__divsi3>
 8005a58:	1009883a 	mov	r4,r2
 8005a5c:	e0fffc17 	ldw	r3,-16(fp)
 8005a60:	808018e4 	muli	r2,r16,99
 8005a64:	10c5883a 	add	r2,r2,r3
 8005a68:	10802404 	addi	r2,r2,144
 8005a6c:	11000085 	stb	r4,2(r2)
  {
    widthmax *= 2;
    sp->scrollmax = widthmax;

    /* Now calculate how fast each of the other lines should go */
    for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
 8005a70:	e0bffa17 	ldw	r2,-24(fp)
 8005a74:	10800044 	addi	r2,r2,1
 8005a78:	e0bffa15 	stw	r2,-24(fp)
 8005a7c:	e0bffa17 	ldw	r2,-24(fp)
 8005a80:	10800090 	cmplti	r2,r2,2
 8005a84:	103fdc1e 	bne	r2,zero,80059f8 <altera_avalon_lcd_16207_write+0x40c>
   * (because active was set when the timer interrupt occurred).  If there
   * has been a missed repaint then paint again.  And again.  etc.
   */
  for ( ; ; )
  {
    int old_scrollpos = sp->scrollpos;
 8005a88:	e0bffc17 	ldw	r2,-16(fp)
 8005a8c:	10800943 	ldbu	r2,37(r2)
 8005a90:	10803fcc 	andi	r2,r2,255
 8005a94:	1080201c 	xori	r2,r2,128
 8005a98:	10bfe004 	addi	r2,r2,-128
 8005a9c:	e0bff515 	stw	r2,-44(fp)

    lcd_repaint_screen(sp);
 8005aa0:	e13ffc17 	ldw	r4,-16(fp)
 8005aa4:	80050680 	call	8005068 <lcd_repaint_screen>

    /* Let the timer routines repaint the display again */
    sp->active = 0;
 8005aa8:	e0bffc17 	ldw	r2,-16(fp)
 8005aac:	100009c5 	stb	zero,39(r2)

    /* Have the timer routines tried to scroll while we were painting?
     * If not then we can exit */
    if (sp->scrollpos == old_scrollpos)
 8005ab0:	e0bffc17 	ldw	r2,-16(fp)
 8005ab4:	10800943 	ldbu	r2,37(r2)
 8005ab8:	10c03fcc 	andi	r3,r2,255
 8005abc:	18c0201c 	xori	r3,r3,128
 8005ac0:	18ffe004 	addi	r3,r3,-128
 8005ac4:	e0bff517 	ldw	r2,-44(fp)
 8005ac8:	18800426 	beq	r3,r2,8005adc <altera_avalon_lcd_16207_write+0x4f0>
      break;

    /* We need to repaint again since the display scrolled while we were
     * painting last time */
    sp->active = 1;
 8005acc:	e0fffc17 	ldw	r3,-16(fp)
 8005ad0:	00800044 	movi	r2,1
 8005ad4:	188009c5 	stb	r2,39(r3)
  }
 8005ad8:	003feb06 	br	8005a88 <altera_avalon_lcd_16207_write+0x49c>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->write_lock);

  return len;
 8005adc:	e0bffe17 	ldw	r2,-8(fp)
}
 8005ae0:	e037883a 	mov	sp,fp
 8005ae4:	dfc00217 	ldw	ra,8(sp)
 8005ae8:	df000117 	ldw	fp,4(sp)
 8005aec:	dc000017 	ldw	r16,0(sp)
 8005af0:	dec00304 	addi	sp,sp,12
 8005af4:	f800283a 	ret

08005af8 <alt_lcd_16207_timeout>:
/*
 * Timeout routine is called every second
 */

static alt_u32 alt_lcd_16207_timeout(void* context) 
{
 8005af8:	defffc04 	addi	sp,sp,-16
 8005afc:	dfc00315 	stw	ra,12(sp)
 8005b00:	df000215 	stw	fp,8(sp)
 8005b04:	df000204 	addi	fp,sp,8
 8005b08:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_lcd_16207_state* sp = (altera_avalon_lcd_16207_state*)context;
 8005b0c:	e0bfff17 	ldw	r2,-4(fp)
 8005b10:	e0bffe15 	stw	r2,-8(fp)

  /* Update the scrolling position */
  if (sp->scrollpos + 1 >= sp->scrollmax)
 8005b14:	e0bffe17 	ldw	r2,-8(fp)
 8005b18:	10800943 	ldbu	r2,37(r2)
 8005b1c:	10803fcc 	andi	r2,r2,255
 8005b20:	1080201c 	xori	r2,r2,128
 8005b24:	10bfe004 	addi	r2,r2,-128
 8005b28:	10c00044 	addi	r3,r2,1
 8005b2c:	e0bffe17 	ldw	r2,-8(fp)
 8005b30:	10800983 	ldbu	r2,38(r2)
 8005b34:	10803fcc 	andi	r2,r2,255
 8005b38:	1080201c 	xori	r2,r2,128
 8005b3c:	10bfe004 	addi	r2,r2,-128
 8005b40:	18800316 	blt	r3,r2,8005b50 <alt_lcd_16207_timeout+0x58>
    sp->scrollpos = 0;
 8005b44:	e0bffe17 	ldw	r2,-8(fp)
 8005b48:	10000945 	stb	zero,37(r2)
 8005b4c:	00000606 	br	8005b68 <alt_lcd_16207_timeout+0x70>
  else
    sp->scrollpos = sp->scrollpos + 1;
 8005b50:	e0bffe17 	ldw	r2,-8(fp)
 8005b54:	10800943 	ldbu	r2,37(r2)
 8005b58:	10800044 	addi	r2,r2,1
 8005b5c:	1007883a 	mov	r3,r2
 8005b60:	e0bffe17 	ldw	r2,-8(fp)
 8005b64:	10c00945 	stb	r3,37(r2)

  /* Repaint the panel unless the foreground will do it again soon */
  if (sp->scrollmax > 0 && !sp->active)
 8005b68:	e0bffe17 	ldw	r2,-8(fp)
 8005b6c:	10800983 	ldbu	r2,38(r2)
 8005b70:	10803fcc 	andi	r2,r2,255
 8005b74:	1080201c 	xori	r2,r2,128
 8005b78:	10bfe004 	addi	r2,r2,-128
 8005b7c:	10800050 	cmplti	r2,r2,1
 8005b80:	1000091e 	bne	r2,zero,8005ba8 <alt_lcd_16207_timeout+0xb0>
 8005b84:	e0bffe17 	ldw	r2,-8(fp)
 8005b88:	108009c3 	ldbu	r2,39(r2)
 8005b8c:	10803fcc 	andi	r2,r2,255
 8005b90:	1080201c 	xori	r2,r2,128
 8005b94:	10bfe004 	addi	r2,r2,-128
 8005b98:	1004c03a 	cmpne	r2,r2,zero
 8005b9c:	1000021e 	bne	r2,zero,8005ba8 <alt_lcd_16207_timeout+0xb0>
    lcd_repaint_screen(sp);
 8005ba0:	e13ffe17 	ldw	r4,-8(fp)
 8005ba4:	80050680 	call	8005068 <lcd_repaint_screen>

  return sp->period;
 8005ba8:	e0bffe17 	ldw	r2,-8(fp)
 8005bac:	10800717 	ldw	r2,28(r2)
}
 8005bb0:	e037883a 	mov	sp,fp
 8005bb4:	dfc00117 	ldw	ra,4(sp)
 8005bb8:	df000017 	ldw	fp,0(sp)
 8005bbc:	dec00204 	addi	sp,sp,8
 8005bc0:	f800283a 	ret

08005bc4 <altera_avalon_lcd_16207_init>:

/*
 * Called at boot time to initialise the LCD driver
 */
void altera_avalon_lcd_16207_init(altera_avalon_lcd_16207_state* sp)
{
 8005bc4:	defffc04 	addi	sp,sp,-16
 8005bc8:	dfc00315 	stw	ra,12(sp)
 8005bcc:	df000215 	stw	fp,8(sp)
 8005bd0:	df000204 	addi	fp,sp,8
 8005bd4:	e13fff15 	stw	r4,-4(fp)
  unsigned int base = sp->base;
 8005bd8:	e0bfff17 	ldw	r2,-4(fp)
 8005bdc:	10800017 	ldw	r2,0(r2)
 8005be0:	e0bffe15 	stw	r2,-8(fp)

  /* Mark the device as functional */
  sp->broken = 0;
 8005be4:	e0bfff17 	ldw	r2,-4(fp)
 8005be8:	10000805 	stb	zero,32(r2)
   * the BUSY bit in the status register doesn't work until the display
   * has been reset three times.
   */

  /* Wait for 15 ms then reset */
  usleep(15000);
 8005bec:	010ea604 	movi	r4,15000
 8005bf0:	80040f40 	call	80040f4 <usleep>
  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT);
 8005bf4:	e0bffe17 	ldw	r2,-8(fp)
 8005bf8:	1007883a 	mov	r3,r2
 8005bfc:	00800c04 	movi	r2,48
 8005c00:	18800035 	stwio	r2,0(r3)

  /* Wait for another 4.1ms and reset again */
  usleep(4100);  
 8005c04:	01040104 	movi	r4,4100
 8005c08:	80040f40 	call	80040f4 <usleep>
  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT);
 8005c0c:	e0bffe17 	ldw	r2,-8(fp)
 8005c10:	1007883a 	mov	r3,r2
 8005c14:	00800c04 	movi	r2,48
 8005c18:	18800035 	stwio	r2,0(r3)

  /* Wait a further 1 ms and reset a third time */
  usleep(1000);
 8005c1c:	0100fa04 	movi	r4,1000
 8005c20:	80040f40 	call	80040f4 <usleep>
  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT);
 8005c24:	e0bffe17 	ldw	r2,-8(fp)
 8005c28:	1007883a 	mov	r3,r2
 8005c2c:	00800c04 	movi	r2,48
 8005c30:	18800035 	stwio	r2,0(r3)

  /* Setup interface parameters: 8 bit bus, 2 rows, 5x7 font */
  lcd_write_command(sp, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT | LCD_CMD_TWO_LINE);
 8005c34:	e13fff17 	ldw	r4,-4(fp)
 8005c38:	01400e04 	movi	r5,56
 8005c3c:	8004e180 	call	8004e18 <lcd_write_command>
  
  /* Turn display off */
  lcd_write_command(sp, LCD_CMD_ONOFF);
 8005c40:	e13fff17 	ldw	r4,-4(fp)
 8005c44:	01400204 	movi	r5,8
 8005c48:	8004e180 	call	8004e18 <lcd_write_command>

  /* Clear display */
  lcd_clear_screen(sp);
 8005c4c:	e13fff17 	ldw	r4,-4(fp)
 8005c50:	8004fa40 	call	8004fa4 <lcd_clear_screen>
  
  /* Set mode: increment after writing, don't shift display */
  lcd_write_command(sp, LCD_CMD_MODES | LCD_CMD_MODE_INC);
 8005c54:	e13fff17 	ldw	r4,-4(fp)
 8005c58:	01400184 	movi	r5,6
 8005c5c:	8004e180 	call	8004e18 <lcd_write_command>

  /* Turn display on */
  lcd_write_command(sp, LCD_CMD_ONOFF | LCD_CMD_ENABLE_DISP);
 8005c60:	e13fff17 	ldw	r4,-4(fp)
 8005c64:	01400304 	movi	r5,12
 8005c68:	8004e180 	call	8004e18 <lcd_write_command>

  sp->esccount = -1;
 8005c6c:	e0ffff17 	ldw	r3,-4(fp)
 8005c70:	00bfffc4 	movi	r2,-1
 8005c74:	18800905 	stb	r2,36(r3)
  memset(sp->escape, 0, sizeof(sp->escape));
 8005c78:	e0bfff17 	ldw	r2,-4(fp)
 8005c7c:	11000a04 	addi	r4,r2,40
 8005c80:	000b883a 	mov	r5,zero
 8005c84:	01800204 	movi	r6,8
 8005c88:	80021940 	call	8002194 <memset>

  sp->scrollpos = 0;
 8005c8c:	e0bfff17 	ldw	r2,-4(fp)
 8005c90:	10000945 	stb	zero,37(r2)
  sp->scrollmax = 0;
 8005c94:	e0bfff17 	ldw	r2,-4(fp)
 8005c98:	10000985 	stb	zero,38(r2)
  sp->active = 0;
 8005c9c:	e0bfff17 	ldw	r2,-4(fp)
 8005ca0:	100009c5 	stb	zero,39(r2)
 8005ca4:	00820074 	movhi	r2,2049
 8005ca8:	10ab0b04 	addi	r2,r2,-21460
 8005cac:	10800017 	ldw	r2,0(r2)
 8005cb0:	1009883a 	mov	r4,r2

  sp->period = alt_ticks_per_second() / 10; /* Call every 100ms */
 8005cb4:	01400284 	movi	r5,10
 8005cb8:	8000c6c0 	call	8000c6c <__udivsi3>
 8005cbc:	1007883a 	mov	r3,r2
 8005cc0:	e0bfff17 	ldw	r2,-4(fp)
 8005cc4:	10c00715 	stw	r3,28(r2)

  alt_alarm_start(&sp->alarm, sp->period, &alt_lcd_16207_timeout, sp);
 8005cc8:	e0bfff17 	ldw	r2,-4(fp)
 8005ccc:	11000104 	addi	r4,r2,4
 8005cd0:	e0bfff17 	ldw	r2,-4(fp)
 8005cd4:	10800717 	ldw	r2,28(r2)
 8005cd8:	100b883a 	mov	r5,r2
 8005cdc:	01820034 	movhi	r6,2048
 8005ce0:	3196be04 	addi	r6,r6,23288
 8005ce4:	e1ffff17 	ldw	r7,-4(fp)
 8005ce8:	8005d580 	call	8005d58 <alt_alarm_start>
}
 8005cec:	e037883a 	mov	sp,fp
 8005cf0:	dfc00117 	ldw	ra,4(sp)
 8005cf4:	df000017 	ldw	fp,0(sp)
 8005cf8:	dec00204 	addi	sp,sp,8
 8005cfc:	f800283a 	ret

08005d00 <altera_avalon_lcd_16207_write_fd>:
extern int altera_avalon_lcd_16207_write(altera_avalon_lcd_16207_state* sp,
  const char* ptr, int count, int flags);

int 
altera_avalon_lcd_16207_write_fd(alt_fd* fd, const char* buffer, int space)
{
 8005d00:	defffa04 	addi	sp,sp,-24
 8005d04:	dfc00515 	stw	ra,20(sp)
 8005d08:	df000415 	stw	fp,16(sp)
 8005d0c:	df000404 	addi	fp,sp,16
 8005d10:	e13ffd15 	stw	r4,-12(fp)
 8005d14:	e17ffe15 	stw	r5,-8(fp)
 8005d18:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_lcd_16207_dev* dev = (altera_avalon_lcd_16207_dev*) fd->dev; 
 8005d1c:	e0bffd17 	ldw	r2,-12(fp)
 8005d20:	10800017 	ldw	r2,0(r2)
 8005d24:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_lcd_16207_write(&dev->state, buffer, space,
 8005d28:	e0bffc17 	ldw	r2,-16(fp)
 8005d2c:	11000a04 	addi	r4,r2,40
 8005d30:	e0bffd17 	ldw	r2,-12(fp)
 8005d34:	11c00217 	ldw	r7,8(r2)
 8005d38:	e17ffe17 	ldw	r5,-8(fp)
 8005d3c:	e1bfff17 	ldw	r6,-4(fp)
 8005d40:	80055ec0 	call	80055ec <altera_avalon_lcd_16207_write>
      fd->fd_flags);
}
 8005d44:	e037883a 	mov	sp,fp
 8005d48:	dfc00117 	ldw	ra,4(sp)
 8005d4c:	df000017 	ldw	fp,0(sp)
 8005d50:	dec00204 	addi	sp,sp,8
 8005d54:	f800283a 	ret

08005d58 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
 8005d58:	defff404 	addi	sp,sp,-48
 8005d5c:	df000b15 	stw	fp,44(sp)
 8005d60:	df000b04 	addi	fp,sp,44
 8005d64:	e13ffb15 	stw	r4,-20(fp)
 8005d68:	e17ffc15 	stw	r5,-16(fp)
 8005d6c:	e1bffd15 	stw	r6,-12(fp)
 8005d70:	e1fffe15 	stw	r7,-8(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
 8005d74:	e03ff915 	stw	zero,-28(fp)
 8005d78:	00820074 	movhi	r2,2049
 8005d7c:	10ab0b04 	addi	r2,r2,-21460
 8005d80:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
 8005d84:	1005003a 	cmpeq	r2,r2,zero
 8005d88:	1000411e 	bne	r2,zero,8005e90 <alt_alarm_start+0x138>
  {
    if (alarm)
 8005d8c:	e0bffb17 	ldw	r2,-20(fp)
 8005d90:	1005003a 	cmpeq	r2,r2,zero
 8005d94:	10003b1e 	bne	r2,zero,8005e84 <alt_alarm_start+0x12c>
    {
      alarm->callback = callback;
 8005d98:	e0fffb17 	ldw	r3,-20(fp)
 8005d9c:	e0bffd17 	ldw	r2,-12(fp)
 8005da0:	18800315 	stw	r2,12(r3)
      alarm->context  = context;
 8005da4:	e0fffb17 	ldw	r3,-20(fp)
 8005da8:	e0bffe17 	ldw	r2,-8(fp)
 8005dac:	18800515 	stw	r2,20(r3)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8005db0:	0005303a 	rdctl	r2,status
 8005db4:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8005db8:	e0fff817 	ldw	r3,-32(fp)
 8005dbc:	00bfff84 	movi	r2,-2
 8005dc0:	1884703a 	and	r2,r3,r2
 8005dc4:	1001703a 	wrctl	status,r2
  
  return context;
 8005dc8:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
 8005dcc:	e0bffa15 	stw	r2,-24(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 8005dd0:	00820074 	movhi	r2,2049
 8005dd4:	10ab0c04 	addi	r2,r2,-21456
 8005dd8:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
 8005ddc:	e0bff915 	stw	r2,-28(fp)
      
      alarm->time = nticks + current_nticks + 1; 
 8005de0:	e0fffc17 	ldw	r3,-16(fp)
 8005de4:	e0bff917 	ldw	r2,-28(fp)
 8005de8:	1885883a 	add	r2,r3,r2
 8005dec:	10c00044 	addi	r3,r2,1
 8005df0:	e0bffb17 	ldw	r2,-20(fp)
 8005df4:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
 8005df8:	e0bffb17 	ldw	r2,-20(fp)
 8005dfc:	10c00217 	ldw	r3,8(r2)
 8005e00:	e0bff917 	ldw	r2,-28(fp)
 8005e04:	1880042e 	bgeu	r3,r2,8005e18 <alt_alarm_start+0xc0>
      {
        alarm->rollover = 1;
 8005e08:	e0fffb17 	ldw	r3,-20(fp)
 8005e0c:	00800044 	movi	r2,1
 8005e10:	18800405 	stb	r2,16(r3)
 8005e14:	00000206 	br	8005e20 <alt_alarm_start+0xc8>
      }
      else
      {
        alarm->rollover = 0;
 8005e18:	e0bffb17 	ldw	r2,-20(fp)
 8005e1c:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
 8005e20:	e0fffb17 	ldw	r3,-20(fp)
 8005e24:	00820074 	movhi	r2,2049
 8005e28:	10a42404 	addi	r2,r2,-28528
 8005e2c:	e0bff615 	stw	r2,-40(fp)
 8005e30:	e0fff715 	stw	r3,-36(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 8005e34:	e0fff717 	ldw	r3,-36(fp)
 8005e38:	e0bff617 	ldw	r2,-40(fp)
 8005e3c:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
 8005e40:	e0bff617 	ldw	r2,-40(fp)
 8005e44:	10c00017 	ldw	r3,0(r2)
 8005e48:	e0bff717 	ldw	r2,-36(fp)
 8005e4c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 8005e50:	e0bff617 	ldw	r2,-40(fp)
 8005e54:	10c00017 	ldw	r3,0(r2)
 8005e58:	e0bff717 	ldw	r2,-36(fp)
 8005e5c:	18800115 	stw	r2,4(r3)
  list->next           = entry;
 8005e60:	e0fff617 	ldw	r3,-40(fp)
 8005e64:	e0bff717 	ldw	r2,-36(fp)
 8005e68:	18800015 	stw	r2,0(r3)
 8005e6c:	e0bffa17 	ldw	r2,-24(fp)
 8005e70:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8005e74:	e0bff517 	ldw	r2,-44(fp)
 8005e78:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
 8005e7c:	e03fff15 	stw	zero,-4(fp)
 8005e80:	00000506 	br	8005e98 <alt_alarm_start+0x140>
    }
    else
    {
      return -EINVAL;
 8005e84:	00bffa84 	movi	r2,-22
 8005e88:	e0bfff15 	stw	r2,-4(fp)
 8005e8c:	00000206 	br	8005e98 <alt_alarm_start+0x140>
    }
  }
  else
  {
    return -ENOTSUP;
 8005e90:	00bfde84 	movi	r2,-134
 8005e94:	e0bfff15 	stw	r2,-4(fp)
 8005e98:	e0bfff17 	ldw	r2,-4(fp)
  }
}
 8005e9c:	e037883a 	mov	sp,fp
 8005ea0:	df000017 	ldw	fp,0(sp)
 8005ea4:	dec00104 	addi	sp,sp,4
 8005ea8:	f800283a 	ret

08005eac <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
 8005eac:	defffa04 	addi	sp,sp,-24
 8005eb0:	dfc00515 	stw	ra,20(sp)
 8005eb4:	df000415 	stw	fp,16(sp)
 8005eb8:	df000404 	addi	fp,sp,16
 8005ebc:	e13fff15 	stw	r4,-4(fp)
  {
    cycles_per_loop = 9;
  }
  else  
  {
    cycles_per_loop = 3;
 8005ec0:	008000c4 	movi	r2,3
 8005ec4:	e0bffc15 	stw	r2,-16(fp)
  }
  

  big_loops = us / (INT_MAX/
 8005ec8:	e0fffc17 	ldw	r3,-16(fp)
 8005ecc:	008003f4 	movhi	r2,15
 8005ed0:	10909004 	addi	r2,r2,16960
 8005ed4:	188b383a 	mul	r5,r3,r2
 8005ed8:	0100bef4 	movhi	r4,763
 8005edc:	213c2004 	addi	r4,r4,-3968
 8005ee0:	8000c6c0 	call	8000c6c <__udivsi3>
 8005ee4:	100b883a 	mov	r5,r2
 8005ee8:	01200034 	movhi	r4,32768
 8005eec:	213fffc4 	addi	r4,r4,-1
 8005ef0:	8000c6c0 	call	8000c6c <__udivsi3>
 8005ef4:	100b883a 	mov	r5,r2
 8005ef8:	e13fff17 	ldw	r4,-4(fp)
 8005efc:	8000c6c0 	call	8000c6c <__udivsi3>
 8005f00:	e0bffd15 	stw	r2,-12(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
 8005f04:	e0bffd17 	ldw	r2,-12(fp)
 8005f08:	1005003a 	cmpeq	r2,r2,zero
 8005f0c:	1000281e 	bne	r2,zero,8005fb0 <alt_busy_sleep+0x104>
  {
    for(i=0;i<big_loops;i++)
 8005f10:	e03ffe15 	stw	zero,-8(fp)
 8005f14:	00001606 	br	8005f70 <alt_busy_sleep+0xc4>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
 8005f18:	00a00034 	movhi	r2,32768
 8005f1c:	10bfffc4 	addi	r2,r2,-1
 8005f20:	10bfffc4 	addi	r2,r2,-1
 8005f24:	103ffe1e 	bne	r2,zero,8005f20 <alt_busy_sleep+0x74>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
 8005f28:	e0fffc17 	ldw	r3,-16(fp)
 8005f2c:	008003f4 	movhi	r2,15
 8005f30:	10909004 	addi	r2,r2,16960
 8005f34:	188b383a 	mul	r5,r3,r2
 8005f38:	0100bef4 	movhi	r4,763
 8005f3c:	213c2004 	addi	r4,r4,-3968
 8005f40:	8000c6c0 	call	8000c6c <__udivsi3>
 8005f44:	100b883a 	mov	r5,r2
 8005f48:	01200034 	movhi	r4,32768
 8005f4c:	213fffc4 	addi	r4,r4,-1
 8005f50:	8000c6c0 	call	8000c6c <__udivsi3>
 8005f54:	1007883a 	mov	r3,r2
 8005f58:	e0bfff17 	ldw	r2,-4(fp)
 8005f5c:	10c5c83a 	sub	r2,r2,r3
 8005f60:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
 8005f64:	e0bffe17 	ldw	r2,-8(fp)
 8005f68:	10800044 	addi	r2,r2,1
 8005f6c:	e0bffe15 	stw	r2,-8(fp)
 8005f70:	e0fffe17 	ldw	r3,-8(fp)
 8005f74:	e0bffd17 	ldw	r2,-12(fp)
 8005f78:	18bfe716 	blt	r3,r2,8005f18 <alt_busy_sleep+0x6c>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 8005f7c:	e0fffc17 	ldw	r3,-16(fp)
 8005f80:	008003f4 	movhi	r2,15
 8005f84:	10909004 	addi	r2,r2,16960
 8005f88:	188b383a 	mul	r5,r3,r2
 8005f8c:	0100bef4 	movhi	r4,763
 8005f90:	213c2004 	addi	r4,r4,-3968
 8005f94:	8000c6c0 	call	8000c6c <__udivsi3>
 8005f98:	1007883a 	mov	r3,r2
 8005f9c:	e0bfff17 	ldw	r2,-4(fp)
 8005fa0:	1885383a 	mul	r2,r3,r2
 8005fa4:	10bfffc4 	addi	r2,r2,-1
 8005fa8:	103ffe1e 	bne	r2,zero,8005fa4 <alt_busy_sleep+0xf8>
 8005fac:	00000c06 	br	8005fe0 <alt_busy_sleep+0x134>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 8005fb0:	e0fffc17 	ldw	r3,-16(fp)
 8005fb4:	008003f4 	movhi	r2,15
 8005fb8:	10909004 	addi	r2,r2,16960
 8005fbc:	188b383a 	mul	r5,r3,r2
 8005fc0:	0100bef4 	movhi	r4,763
 8005fc4:	213c2004 	addi	r4,r4,-3968
 8005fc8:	8000c6c0 	call	8000c6c <__udivsi3>
 8005fcc:	1007883a 	mov	r3,r2
 8005fd0:	e0bfff17 	ldw	r2,-4(fp)
 8005fd4:	1885383a 	mul	r2,r3,r2
 8005fd8:	10bfffc4 	addi	r2,r2,-1
 8005fdc:	00bffe16 	blt	zero,r2,8005fd8 <alt_busy_sleep+0x12c>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
 8005fe0:	0005883a 	mov	r2,zero
}
 8005fe4:	e037883a 	mov	sp,fp
 8005fe8:	dfc00117 	ldw	ra,4(sp)
 8005fec:	df000017 	ldw	fp,0(sp)
 8005ff0:	dec00204 	addi	sp,sp,8
 8005ff4:	f800283a 	ret

08005ff8 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 8005ff8:	defffe04 	addi	sp,sp,-8
 8005ffc:	df000115 	stw	fp,4(sp)
 8006000:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
 8006004:	e03fff15 	stw	zero,-4(fp)
 8006008:	00000506 	br	8006020 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
 800600c:	e0bfff17 	ldw	r2,-4(fp)
 8006010:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
 8006014:	e0bfff17 	ldw	r2,-4(fp)
 8006018:	10800804 	addi	r2,r2,32
 800601c:	e0bfff15 	stw	r2,-4(fp)
 8006020:	e0bfff17 	ldw	r2,-4(fp)
 8006024:	10820030 	cmpltui	r2,r2,2048
 8006028:	103ff81e 	bne	r2,zero,800600c <alt_dcache_flush_all+0x14>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 800602c:	e037883a 	mov	sp,fp
 8006030:	df000017 	ldw	fp,0(sp)
 8006034:	dec00104 	addi	sp,sp,4
 8006038:	f800283a 	ret

0800603c <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
 800603c:	defff904 	addi	sp,sp,-28
 8006040:	dfc00615 	stw	ra,24(sp)
 8006044:	df000515 	stw	fp,20(sp)
 8006048:	df000504 	addi	fp,sp,20
 800604c:	e13ffd15 	stw	r4,-12(fp)
 8006050:	e17ffe15 	stw	r5,-8(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
 8006054:	e0bffd17 	ldw	r2,-12(fp)
 8006058:	1005003a 	cmpeq	r2,r2,zero
 800605c:	1000041e 	bne	r2,zero,8006070 <alt_dev_llist_insert+0x34>
 8006060:	e0bffd17 	ldw	r2,-12(fp)
 8006064:	10800217 	ldw	r2,8(r2)
 8006068:	1004c03a 	cmpne	r2,r2,zero
 800606c:	1000071e 	bne	r2,zero,800608c <alt_dev_llist_insert+0x50>
  {
    ALT_ERRNO = EINVAL;
 8006070:	80060f00 	call	80060f0 <alt_get_errno>
 8006074:	1007883a 	mov	r3,r2
 8006078:	00800584 	movi	r2,22
 800607c:	18800015 	stw	r2,0(r3)
    return -EINVAL;
 8006080:	00bffa84 	movi	r2,-22
 8006084:	e0bfff15 	stw	r2,-4(fp)
 8006088:	00001306 	br	80060d8 <alt_dev_llist_insert+0x9c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
 800608c:	e0fffd17 	ldw	r3,-12(fp)
 8006090:	e0bffe17 	ldw	r2,-8(fp)
 8006094:	e0bffb15 	stw	r2,-20(fp)
 8006098:	e0fffc15 	stw	r3,-16(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 800609c:	e0fffc17 	ldw	r3,-16(fp)
 80060a0:	e0bffb17 	ldw	r2,-20(fp)
 80060a4:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
 80060a8:	e0bffb17 	ldw	r2,-20(fp)
 80060ac:	10c00017 	ldw	r3,0(r2)
 80060b0:	e0bffc17 	ldw	r2,-16(fp)
 80060b4:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 80060b8:	e0bffb17 	ldw	r2,-20(fp)
 80060bc:	10c00017 	ldw	r3,0(r2)
 80060c0:	e0bffc17 	ldw	r2,-16(fp)
 80060c4:	18800115 	stw	r2,4(r3)
  list->next           = entry;
 80060c8:	e0fffb17 	ldw	r3,-20(fp)
 80060cc:	e0bffc17 	ldw	r2,-16(fp)
 80060d0:	18800015 	stw	r2,0(r3)

  return 0;  
 80060d4:	e03fff15 	stw	zero,-4(fp)
 80060d8:	e0bfff17 	ldw	r2,-4(fp)
}
 80060dc:	e037883a 	mov	sp,fp
 80060e0:	dfc00117 	ldw	ra,4(sp)
 80060e4:	df000017 	ldw	fp,0(sp)
 80060e8:	dec00204 	addi	sp,sp,8
 80060ec:	f800283a 	ret

080060f0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 80060f0:	defffd04 	addi	sp,sp,-12
 80060f4:	dfc00215 	stw	ra,8(sp)
 80060f8:	df000115 	stw	fp,4(sp)
 80060fc:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 8006100:	00820074 	movhi	r2,2049
 8006104:	10a42004 	addi	r2,r2,-28544
 8006108:	10800017 	ldw	r2,0(r2)
 800610c:	1005003a 	cmpeq	r2,r2,zero
 8006110:	1000061e 	bne	r2,zero,800612c <alt_get_errno+0x3c>
 8006114:	00820074 	movhi	r2,2049
 8006118:	10a42004 	addi	r2,r2,-28544
 800611c:	10800017 	ldw	r2,0(r2)
 8006120:	103ee83a 	callr	r2
 8006124:	e0bfff15 	stw	r2,-4(fp)
 8006128:	00000306 	br	8006138 <alt_get_errno+0x48>
 800612c:	00820074 	movhi	r2,2049
 8006130:	10ab0604 	addi	r2,r2,-21480
 8006134:	e0bfff15 	stw	r2,-4(fp)
 8006138:	e0bfff17 	ldw	r2,-4(fp)
}
 800613c:	e037883a 	mov	sp,fp
 8006140:	dfc00117 	ldw	ra,4(sp)
 8006144:	df000017 	ldw	fp,0(sp)
 8006148:	dec00204 	addi	sp,sp,8
 800614c:	f800283a 	ret

08006150 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
 8006150:	defffd04 	addi	sp,sp,-12
 8006154:	dfc00215 	stw	ra,8(sp)
 8006158:	df000115 	stw	fp,4(sp)
 800615c:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 8006160:	00bfff04 	movi	r2,-4
 8006164:	00c20034 	movhi	r3,2048
 8006168:	18dc7804 	addi	r3,r3,29152
 800616c:	1885883a 	add	r2,r3,r2
 8006170:	e0bfff15 	stw	r2,-4(fp)
 8006174:	00000606 	br	8006190 <_do_ctors+0x40>
        (*ctor) (); 
 8006178:	e0bfff17 	ldw	r2,-4(fp)
 800617c:	10800017 	ldw	r2,0(r2)
 8006180:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 8006184:	e0bfff17 	ldw	r2,-4(fp)
 8006188:	10bfff04 	addi	r2,r2,-4
 800618c:	e0bfff15 	stw	r2,-4(fp)
 8006190:	e0ffff17 	ldw	r3,-4(fp)
 8006194:	00820034 	movhi	r2,2048
 8006198:	109c7704 	addi	r2,r2,29148
 800619c:	18bff62e 	bgeu	r3,r2,8006178 <_do_ctors+0x28>
        (*ctor) (); 
}
 80061a0:	e037883a 	mov	sp,fp
 80061a4:	dfc00117 	ldw	ra,4(sp)
 80061a8:	df000017 	ldw	fp,0(sp)
 80061ac:	dec00204 	addi	sp,sp,8
 80061b0:	f800283a 	ret

080061b4 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
 80061b4:	defffd04 	addi	sp,sp,-12
 80061b8:	dfc00215 	stw	ra,8(sp)
 80061bc:	df000115 	stw	fp,4(sp)
 80061c0:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 80061c4:	00bfff04 	movi	r2,-4
 80061c8:	00c20034 	movhi	r3,2048
 80061cc:	18dc7804 	addi	r3,r3,29152
 80061d0:	1885883a 	add	r2,r3,r2
 80061d4:	e0bfff15 	stw	r2,-4(fp)
 80061d8:	00000606 	br	80061f4 <_do_dtors+0x40>
        (*dtor) (); 
 80061dc:	e0bfff17 	ldw	r2,-4(fp)
 80061e0:	10800017 	ldw	r2,0(r2)
 80061e4:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 80061e8:	e0bfff17 	ldw	r2,-4(fp)
 80061ec:	10bfff04 	addi	r2,r2,-4
 80061f0:	e0bfff15 	stw	r2,-4(fp)
 80061f4:	e0ffff17 	ldw	r3,-4(fp)
 80061f8:	00820034 	movhi	r2,2048
 80061fc:	109c7804 	addi	r2,r2,29152
 8006200:	18bff62e 	bgeu	r3,r2,80061dc <_do_dtors+0x28>
        (*dtor) (); 
}
 8006204:	e037883a 	mov	sp,fp
 8006208:	dfc00117 	ldw	ra,4(sp)
 800620c:	df000017 	ldw	fp,0(sp)
 8006210:	dec00204 	addi	sp,sp,8
 8006214:	f800283a 	ret

08006218 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 8006218:	defffe04 	addi	sp,sp,-8
 800621c:	dfc00115 	stw	ra,4(sp)
 8006220:	df000015 	stw	fp,0(sp)
 8006224:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
 8006228:	0009883a 	mov	r4,zero
 800622c:	01440004 	movi	r5,4096
 8006230:	8006d440 	call	8006d44 <alt_icache_flush>
#endif
}
 8006234:	e037883a 	mov	sp,fp
 8006238:	dfc00117 	ldw	ra,4(sp)
 800623c:	df000017 	ldw	fp,0(sp)
 8006240:	dec00204 	addi	sp,sp,8
 8006244:	f800283a 	ret

08006248 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 8006248:	defff904 	addi	sp,sp,-28
 800624c:	dfc00615 	stw	ra,24(sp)
 8006250:	df000515 	stw	fp,20(sp)
 8006254:	df000504 	addi	fp,sp,20
 8006258:	e13ffc15 	stw	r4,-16(fp)
 800625c:	e17ffd15 	stw	r5,-12(fp)
 8006260:	e1bffe15 	stw	r6,-8(fp)
 8006264:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
 8006268:	e0800217 	ldw	r2,8(fp)
 800626c:	d8800015 	stw	r2,0(sp)
 8006270:	e13ffc17 	ldw	r4,-16(fp)
 8006274:	e17ffd17 	ldw	r5,-12(fp)
 8006278:	e1bffe17 	ldw	r6,-8(fp)
 800627c:	e1ffff17 	ldw	r7,-4(fp)
 8006280:	800641c0 	call	800641c <alt_iic_isr_register>
}  
 8006284:	e037883a 	mov	sp,fp
 8006288:	dfc00117 	ldw	ra,4(sp)
 800628c:	df000017 	ldw	fp,0(sp)
 8006290:	dec00204 	addi	sp,sp,8
 8006294:	f800283a 	ret

08006298 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
 8006298:	defff904 	addi	sp,sp,-28
 800629c:	df000615 	stw	fp,24(sp)
 80062a0:	df000604 	addi	fp,sp,24
 80062a4:	e13ffe15 	stw	r4,-8(fp)
 80062a8:	e17fff15 	stw	r5,-4(fp)
 80062ac:	e0bfff17 	ldw	r2,-4(fp)
 80062b0:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 80062b4:	0005303a 	rdctl	r2,status
 80062b8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 80062bc:	e0fffb17 	ldw	r3,-20(fp)
 80062c0:	00bfff84 	movi	r2,-2
 80062c4:	1884703a 	and	r2,r3,r2
 80062c8:	1001703a 	wrctl	status,r2
  
  return context;
 80062cc:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 80062d0:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active |= (1 << id);
 80062d4:	e0fffc17 	ldw	r3,-16(fp)
 80062d8:	00800044 	movi	r2,1
 80062dc:	10c4983a 	sll	r2,r2,r3
 80062e0:	1007883a 	mov	r3,r2
 80062e4:	00820074 	movhi	r2,2049
 80062e8:	10ab0a04 	addi	r2,r2,-21464
 80062ec:	10800017 	ldw	r2,0(r2)
 80062f0:	1886b03a 	or	r3,r3,r2
 80062f4:	00820074 	movhi	r2,2049
 80062f8:	10ab0a04 	addi	r2,r2,-21464
 80062fc:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 8006300:	00820074 	movhi	r2,2049
 8006304:	10ab0a04 	addi	r2,r2,-21464
 8006308:	10800017 	ldw	r2,0(r2)
 800630c:	100170fa 	wrctl	ienable,r2
 8006310:	e0bffd17 	ldw	r2,-12(fp)
 8006314:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8006318:	e0bffa17 	ldw	r2,-24(fp)
 800631c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 8006320:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
 8006324:	e037883a 	mov	sp,fp
 8006328:	df000017 	ldw	fp,0(sp)
 800632c:	dec00104 	addi	sp,sp,4
 8006330:	f800283a 	ret

08006334 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
 8006334:	defff904 	addi	sp,sp,-28
 8006338:	df000615 	stw	fp,24(sp)
 800633c:	df000604 	addi	fp,sp,24
 8006340:	e13ffe15 	stw	r4,-8(fp)
 8006344:	e17fff15 	stw	r5,-4(fp)
 8006348:	e0bfff17 	ldw	r2,-4(fp)
 800634c:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8006350:	0005303a 	rdctl	r2,status
 8006354:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8006358:	e0fffb17 	ldw	r3,-20(fp)
 800635c:	00bfff84 	movi	r2,-2
 8006360:	1884703a 	and	r2,r3,r2
 8006364:	1001703a 	wrctl	status,r2
  
  return context;
 8006368:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 800636c:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active &= ~(1 << id);
 8006370:	e0fffc17 	ldw	r3,-16(fp)
 8006374:	00800044 	movi	r2,1
 8006378:	10c4983a 	sll	r2,r2,r3
 800637c:	0084303a 	nor	r2,zero,r2
 8006380:	1007883a 	mov	r3,r2
 8006384:	00820074 	movhi	r2,2049
 8006388:	10ab0a04 	addi	r2,r2,-21464
 800638c:	10800017 	ldw	r2,0(r2)
 8006390:	1886703a 	and	r3,r3,r2
 8006394:	00820074 	movhi	r2,2049
 8006398:	10ab0a04 	addi	r2,r2,-21464
 800639c:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 80063a0:	00820074 	movhi	r2,2049
 80063a4:	10ab0a04 	addi	r2,r2,-21464
 80063a8:	10800017 	ldw	r2,0(r2)
 80063ac:	100170fa 	wrctl	ienable,r2
 80063b0:	e0bffd17 	ldw	r2,-12(fp)
 80063b4:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 80063b8:	e0bffa17 	ldw	r2,-24(fp)
 80063bc:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 80063c0:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
 80063c4:	e037883a 	mov	sp,fp
 80063c8:	df000017 	ldw	fp,0(sp)
 80063cc:	dec00104 	addi	sp,sp,4
 80063d0:	f800283a 	ret

080063d4 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
 80063d4:	defffc04 	addi	sp,sp,-16
 80063d8:	df000315 	stw	fp,12(sp)
 80063dc:	df000304 	addi	fp,sp,12
 80063e0:	e13ffe15 	stw	r4,-8(fp)
 80063e4:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
 80063e8:	000530fa 	rdctl	r2,ienable
 80063ec:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
 80063f0:	e0ffff17 	ldw	r3,-4(fp)
 80063f4:	00800044 	movi	r2,1
 80063f8:	10c4983a 	sll	r2,r2,r3
 80063fc:	1007883a 	mov	r3,r2
 8006400:	e0bffd17 	ldw	r2,-12(fp)
 8006404:	1884703a 	and	r2,r3,r2
 8006408:	1004c03a 	cmpne	r2,r2,zero
}
 800640c:	e037883a 	mov	sp,fp
 8006410:	df000017 	ldw	fp,0(sp)
 8006414:	dec00104 	addi	sp,sp,4
 8006418:	f800283a 	ret

0800641c <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 800641c:	defff404 	addi	sp,sp,-48
 8006420:	dfc00b15 	stw	ra,44(sp)
 8006424:	df000a15 	stw	fp,40(sp)
 8006428:	df000a04 	addi	fp,sp,40
 800642c:	e13ffb15 	stw	r4,-20(fp)
 8006430:	e17ffc15 	stw	r5,-16(fp)
 8006434:	e1bffd15 	stw	r6,-12(fp)
 8006438:	e1fffe15 	stw	r7,-8(fp)
  int rc = -EINVAL;  
 800643c:	00bffa84 	movi	r2,-22
 8006440:	e0bffa15 	stw	r2,-24(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
 8006444:	e0bffc17 	ldw	r2,-16(fp)
 8006448:	e0bff915 	stw	r2,-28(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 800644c:	e0bff917 	ldw	r2,-28(fp)
 8006450:	10800808 	cmpgei	r2,r2,32
 8006454:	1000291e 	bne	r2,zero,80064fc <alt_iic_isr_register+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8006458:	0005303a 	rdctl	r2,status
 800645c:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8006460:	e0fff717 	ldw	r3,-36(fp)
 8006464:	00bfff84 	movi	r2,-2
 8006468:	1884703a 	and	r2,r3,r2
 800646c:	1001703a 	wrctl	status,r2
  
  return context;
 8006470:	e0bff717 	ldw	r2,-36(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
 8006474:	e0bff815 	stw	r2,-32(fp)

    alt_irq[id].handler = isr;
 8006478:	e0bff917 	ldw	r2,-28(fp)
 800647c:	00c20074 	movhi	r3,2049
 8006480:	18eb1704 	addi	r3,r3,-21412
 8006484:	100490fa 	slli	r2,r2,3
 8006488:	10c7883a 	add	r3,r2,r3
 800648c:	e0bffd17 	ldw	r2,-12(fp)
 8006490:	18800015 	stw	r2,0(r3)
    alt_irq[id].context = isr_context;
 8006494:	e0bff917 	ldw	r2,-28(fp)
 8006498:	00c20074 	movhi	r3,2049
 800649c:	18eb1704 	addi	r3,r3,-21412
 80064a0:	100490fa 	slli	r2,r2,3
 80064a4:	10c5883a 	add	r2,r2,r3
 80064a8:	10c00104 	addi	r3,r2,4
 80064ac:	e0bffe17 	ldw	r2,-8(fp)
 80064b0:	18800015 	stw	r2,0(r3)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
 80064b4:	e0bffd17 	ldw	r2,-12(fp)
 80064b8:	1005003a 	cmpeq	r2,r2,zero
 80064bc:	1000051e 	bne	r2,zero,80064d4 <alt_iic_isr_register+0xb8>
 80064c0:	e17ff917 	ldw	r5,-28(fp)
 80064c4:	e13ffb17 	ldw	r4,-20(fp)
 80064c8:	80062980 	call	8006298 <alt_ic_irq_enable>
 80064cc:	e0bfff15 	stw	r2,-4(fp)
 80064d0:	00000406 	br	80064e4 <alt_iic_isr_register+0xc8>
 80064d4:	e17ff917 	ldw	r5,-28(fp)
 80064d8:	e13ffb17 	ldw	r4,-20(fp)
 80064dc:	80063340 	call	8006334 <alt_ic_irq_disable>
 80064e0:	e0bfff15 	stw	r2,-4(fp)
 80064e4:	e0bfff17 	ldw	r2,-4(fp)
 80064e8:	e0bffa15 	stw	r2,-24(fp)
 80064ec:	e0bff817 	ldw	r2,-32(fp)
 80064f0:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 80064f4:	e0bff617 	ldw	r2,-40(fp)
 80064f8:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
 80064fc:	e0bffa17 	ldw	r2,-24(fp)
}
 8006500:	e037883a 	mov	sp,fp
 8006504:	dfc00117 	ldw	ra,4(sp)
 8006508:	df000017 	ldw	fp,0(sp)
 800650c:	dec00204 	addi	sp,sp,8
 8006510:	f800283a 	ret

08006514 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
 8006514:	defff904 	addi	sp,sp,-28
 8006518:	dfc00615 	stw	ra,24(sp)
 800651c:	df000515 	stw	fp,20(sp)
 8006520:	df000504 	addi	fp,sp,20
 8006524:	e13ffc15 	stw	r4,-16(fp)
 8006528:	e17ffd15 	stw	r5,-12(fp)
 800652c:	e1bffe15 	stw	r6,-8(fp)
 8006530:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
 8006534:	e13ffd17 	ldw	r4,-12(fp)
 8006538:	e17ffe17 	ldw	r5,-8(fp)
 800653c:	e1bfff17 	ldw	r6,-4(fp)
 8006540:	800672c0 	call	800672c <open>
 8006544:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
 8006548:	e0bffb17 	ldw	r2,-20(fp)
 800654c:	1004803a 	cmplt	r2,r2,zero
 8006550:	10001c1e 	bne	r2,zero,80065c4 <alt_open_fd+0xb0>
  {
    fd->dev      = alt_fd_list[old].dev;
 8006554:	e0bffb17 	ldw	r2,-20(fp)
 8006558:	00c20034 	movhi	r3,2048
 800655c:	18df5704 	addi	r3,r3,32092
 8006560:	10800324 	muli	r2,r2,12
 8006564:	10c5883a 	add	r2,r2,r3
 8006568:	10c00017 	ldw	r3,0(r2)
 800656c:	e0bffc17 	ldw	r2,-16(fp)
 8006570:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
 8006574:	e0bffb17 	ldw	r2,-20(fp)
 8006578:	00c20034 	movhi	r3,2048
 800657c:	18df5704 	addi	r3,r3,32092
 8006580:	10800324 	muli	r2,r2,12
 8006584:	10c5883a 	add	r2,r2,r3
 8006588:	10800104 	addi	r2,r2,4
 800658c:	10c00017 	ldw	r3,0(r2)
 8006590:	e0bffc17 	ldw	r2,-16(fp)
 8006594:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 8006598:	e0bffb17 	ldw	r2,-20(fp)
 800659c:	00c20034 	movhi	r3,2048
 80065a0:	18df5704 	addi	r3,r3,32092
 80065a4:	10800324 	muli	r2,r2,12
 80065a8:	10c5883a 	add	r2,r2,r3
 80065ac:	10800204 	addi	r2,r2,8
 80065b0:	10c00017 	ldw	r3,0(r2)
 80065b4:	e0bffc17 	ldw	r2,-16(fp)
 80065b8:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
 80065bc:	e13ffb17 	ldw	r4,-20(fp)
 80065c0:	8003fd80 	call	8003fd8 <alt_release_fd>
  }
} 
 80065c4:	e037883a 	mov	sp,fp
 80065c8:	dfc00117 	ldw	ra,4(sp)
 80065cc:	df000017 	ldw	fp,0(sp)
 80065d0:	dec00204 	addi	sp,sp,8
 80065d4:	f800283a 	ret

080065d8 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 80065d8:	defffb04 	addi	sp,sp,-20
 80065dc:	dfc00415 	stw	ra,16(sp)
 80065e0:	df000315 	stw	fp,12(sp)
 80065e4:	df000304 	addi	fp,sp,12
 80065e8:	e13ffd15 	stw	r4,-12(fp)
 80065ec:	e17ffe15 	stw	r5,-8(fp)
 80065f0:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 80065f4:	01020034 	movhi	r4,2048
 80065f8:	211f5a04 	addi	r4,r4,32104
 80065fc:	e17ffd17 	ldw	r5,-12(fp)
 8006600:	01800044 	movi	r6,1
 8006604:	01c07fc4 	movi	r7,511
 8006608:	80065140 	call	8006514 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 800660c:	01020034 	movhi	r4,2048
 8006610:	211f5704 	addi	r4,r4,32092
 8006614:	e17ffe17 	ldw	r5,-8(fp)
 8006618:	000d883a 	mov	r6,zero
 800661c:	01c07fc4 	movi	r7,511
 8006620:	80065140 	call	8006514 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 8006624:	01020034 	movhi	r4,2048
 8006628:	211f5d04 	addi	r4,r4,32116
 800662c:	e17fff17 	ldw	r5,-4(fp)
 8006630:	01800044 	movi	r6,1
 8006634:	01c07fc4 	movi	r7,511
 8006638:	80065140 	call	8006514 <alt_open_fd>
}  
 800663c:	e037883a 	mov	sp,fp
 8006640:	dfc00117 	ldw	ra,4(sp)
 8006644:	df000017 	ldw	fp,0(sp)
 8006648:	dec00204 	addi	sp,sp,8
 800664c:	f800283a 	ret

08006650 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
 8006650:	defffc04 	addi	sp,sp,-16
 8006654:	df000315 	stw	fp,12(sp)
 8006658:	df000304 	addi	fp,sp,12
 800665c:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 8006660:	e0bffe17 	ldw	r2,-8(fp)
 8006664:	10800217 	ldw	r2,8(r2)
 8006668:	10d00034 	orhi	r3,r2,16384
 800666c:	e0bffe17 	ldw	r2,-8(fp)
 8006670:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 8006674:	e03ffd15 	stw	zero,-12(fp)
 8006678:	00002006 	br	80066fc <alt_file_locked+0xac>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 800667c:	e0bffd17 	ldw	r2,-12(fp)
 8006680:	00c20034 	movhi	r3,2048
 8006684:	18df5704 	addi	r3,r3,32092
 8006688:	10800324 	muli	r2,r2,12
 800668c:	10c5883a 	add	r2,r2,r3
 8006690:	10c00017 	ldw	r3,0(r2)
 8006694:	e0bffe17 	ldw	r2,-8(fp)
 8006698:	10800017 	ldw	r2,0(r2)
 800669c:	1880141e 	bne	r3,r2,80066f0 <alt_file_locked+0xa0>
 80066a0:	e0bffd17 	ldw	r2,-12(fp)
 80066a4:	00c20034 	movhi	r3,2048
 80066a8:	18df5704 	addi	r3,r3,32092
 80066ac:	10800324 	muli	r2,r2,12
 80066b0:	10c5883a 	add	r2,r2,r3
 80066b4:	10800204 	addi	r2,r2,8
 80066b8:	10800017 	ldw	r2,0(r2)
 80066bc:	1004403a 	cmpge	r2,r2,zero
 80066c0:	10000b1e 	bne	r2,zero,80066f0 <alt_file_locked+0xa0>
 80066c4:	e0bffd17 	ldw	r2,-12(fp)
 80066c8:	10800324 	muli	r2,r2,12
 80066cc:	1007883a 	mov	r3,r2
 80066d0:	00820034 	movhi	r2,2048
 80066d4:	109f5704 	addi	r2,r2,32092
 80066d8:	1887883a 	add	r3,r3,r2
 80066dc:	e0bffe17 	ldw	r2,-8(fp)
 80066e0:	18800326 	beq	r3,r2,80066f0 <alt_file_locked+0xa0>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
 80066e4:	00bffcc4 	movi	r2,-13
 80066e8:	e0bfff15 	stw	r2,-4(fp)
 80066ec:	00000a06 	br	8006718 <alt_file_locked+0xc8>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 80066f0:	e0bffd17 	ldw	r2,-12(fp)
 80066f4:	10800044 	addi	r2,r2,1
 80066f8:	e0bffd15 	stw	r2,-12(fp)
 80066fc:	00820074 	movhi	r2,2049
 8006700:	10a41f04 	addi	r2,r2,-28548
 8006704:	10800017 	ldw	r2,0(r2)
 8006708:	1007883a 	mov	r3,r2
 800670c:	e0bffd17 	ldw	r2,-12(fp)
 8006710:	18bfda2e 	bgeu	r3,r2,800667c <alt_file_locked+0x2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
 8006714:	e03fff15 	stw	zero,-4(fp)
 8006718:	e0bfff17 	ldw	r2,-4(fp)
}
 800671c:	e037883a 	mov	sp,fp
 8006720:	df000017 	ldw	fp,0(sp)
 8006724:	dec00104 	addi	sp,sp,4
 8006728:	f800283a 	ret

0800672c <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 800672c:	defff404 	addi	sp,sp,-48
 8006730:	dfc00b15 	stw	ra,44(sp)
 8006734:	df000a15 	stw	fp,40(sp)
 8006738:	df000a04 	addi	fp,sp,40
 800673c:	e13ffb15 	stw	r4,-20(fp)
 8006740:	e17ffc15 	stw	r5,-16(fp)
 8006744:	e1bffd15 	stw	r6,-12(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
 8006748:	00bfffc4 	movi	r2,-1
 800674c:	e0bff815 	stw	r2,-32(fp)
  int status = -ENODEV;
 8006750:	00bffb44 	movi	r2,-19
 8006754:	e0bff715 	stw	r2,-36(fp)
  int isafs = 0;
 8006758:	e03ff615 	stw	zero,-40(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 800675c:	e13ffb17 	ldw	r4,-20(fp)
 8006760:	01420074 	movhi	r5,2049
 8006764:	29641d04 	addi	r5,r5,-28556
 8006768:	8006ad80 	call	8006ad8 <alt_find_dev>
 800676c:	e0bffa15 	stw	r2,-24(fp)
 8006770:	e0bffa17 	ldw	r2,-24(fp)
 8006774:	1004c03a 	cmpne	r2,r2,zero
 8006778:	1000051e 	bne	r2,zero,8006790 <open+0x64>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 800677c:	e13ffb17 	ldw	r4,-20(fp)
 8006780:	8006b6c0 	call	8006b6c <alt_find_file>
 8006784:	e0bffa15 	stw	r2,-24(fp)
    isafs = 1;
 8006788:	00800044 	movi	r2,1
 800678c:	e0bff615 	stw	r2,-40(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 8006790:	e0bffa17 	ldw	r2,-24(fp)
 8006794:	1005003a 	cmpeq	r2,r2,zero
 8006798:	1000301e 	bne	r2,zero,800685c <open+0x130>
  {
    if ((index = alt_get_fd (dev)) < 0)
 800679c:	e13ffa17 	ldw	r4,-24(fp)
 80067a0:	8006c8c0 	call	8006c8c <alt_get_fd>
 80067a4:	e0bff815 	stw	r2,-32(fp)
 80067a8:	e0bff817 	ldw	r2,-32(fp)
 80067ac:	1004403a 	cmpge	r2,r2,zero
 80067b0:	1000031e 	bne	r2,zero,80067c0 <open+0x94>
    {
      status = index;
 80067b4:	e0bff817 	ldw	r2,-32(fp)
 80067b8:	e0bff715 	stw	r2,-36(fp)
 80067bc:	00002906 	br	8006864 <open+0x138>
    }
    else
    {
      fd = &alt_fd_list[index];
 80067c0:	e0bff817 	ldw	r2,-32(fp)
 80067c4:	10800324 	muli	r2,r2,12
 80067c8:	1007883a 	mov	r3,r2
 80067cc:	00820034 	movhi	r2,2048
 80067d0:	109f5704 	addi	r2,r2,32092
 80067d4:	1885883a 	add	r2,r3,r2
 80067d8:	e0bff915 	stw	r2,-28(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 80067dc:	e0fffc17 	ldw	r3,-16(fp)
 80067e0:	00900034 	movhi	r2,16384
 80067e4:	10bfffc4 	addi	r2,r2,-1
 80067e8:	1886703a 	and	r3,r3,r2
 80067ec:	e0bff917 	ldw	r2,-28(fp)
 80067f0:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
 80067f4:	e0bff617 	ldw	r2,-40(fp)
 80067f8:	1004c03a 	cmpne	r2,r2,zero
 80067fc:	1000061e 	bne	r2,zero,8006818 <open+0xec>
 8006800:	e13ff917 	ldw	r4,-28(fp)
 8006804:	80066500 	call	8006650 <alt_file_locked>
 8006808:	e0bff715 	stw	r2,-36(fp)
 800680c:	e0bff717 	ldw	r2,-36(fp)
 8006810:	1004803a 	cmplt	r2,r2,zero
 8006814:	1000131e 	bne	r2,zero,8006864 <open+0x138>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 8006818:	e0bffa17 	ldw	r2,-24(fp)
 800681c:	10800317 	ldw	r2,12(r2)
 8006820:	1005003a 	cmpeq	r2,r2,zero
 8006824:	1000091e 	bne	r2,zero,800684c <open+0x120>
 8006828:	e0bffa17 	ldw	r2,-24(fp)
 800682c:	10800317 	ldw	r2,12(r2)
 8006830:	e13ff917 	ldw	r4,-28(fp)
 8006834:	e17ffb17 	ldw	r5,-20(fp)
 8006838:	e1bffc17 	ldw	r6,-16(fp)
 800683c:	e1fffd17 	ldw	r7,-12(fp)
 8006840:	103ee83a 	callr	r2
 8006844:	e0bfff15 	stw	r2,-4(fp)
 8006848:	00000106 	br	8006850 <open+0x124>
 800684c:	e03fff15 	stw	zero,-4(fp)
 8006850:	e0bfff17 	ldw	r2,-4(fp)
 8006854:	e0bff715 	stw	r2,-36(fp)
 8006858:	00000206 	br	8006864 <open+0x138>
      }
    }
  }
  else
  {
    status = -ENODEV;
 800685c:	00bffb44 	movi	r2,-19
 8006860:	e0bff715 	stw	r2,-36(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 8006864:	e0bff717 	ldw	r2,-36(fp)
 8006868:	1004403a 	cmpge	r2,r2,zero
 800686c:	1000091e 	bne	r2,zero,8006894 <open+0x168>
  {
    alt_release_fd (index);  
 8006870:	e13ff817 	ldw	r4,-32(fp)
 8006874:	8003fd80 	call	8003fd8 <alt_release_fd>
    ALT_ERRNO = -status;
 8006878:	80068b40 	call	80068b4 <alt_get_errno>
 800687c:	e0fff717 	ldw	r3,-36(fp)
 8006880:	00c7c83a 	sub	r3,zero,r3
 8006884:	10c00015 	stw	r3,0(r2)
    return -1;
 8006888:	00bfffc4 	movi	r2,-1
 800688c:	e0bffe15 	stw	r2,-8(fp)
 8006890:	00000206 	br	800689c <open+0x170>
  }
  
  /* return the reference upon success */

  return index;
 8006894:	e0bff817 	ldw	r2,-32(fp)
 8006898:	e0bffe15 	stw	r2,-8(fp)
 800689c:	e0bffe17 	ldw	r2,-8(fp)
}
 80068a0:	e037883a 	mov	sp,fp
 80068a4:	dfc00117 	ldw	ra,4(sp)
 80068a8:	df000017 	ldw	fp,0(sp)
 80068ac:	dec00204 	addi	sp,sp,8
 80068b0:	f800283a 	ret

080068b4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 80068b4:	defffd04 	addi	sp,sp,-12
 80068b8:	dfc00215 	stw	ra,8(sp)
 80068bc:	df000115 	stw	fp,4(sp)
 80068c0:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 80068c4:	00820074 	movhi	r2,2049
 80068c8:	10a42004 	addi	r2,r2,-28544
 80068cc:	10800017 	ldw	r2,0(r2)
 80068d0:	1005003a 	cmpeq	r2,r2,zero
 80068d4:	1000061e 	bne	r2,zero,80068f0 <alt_get_errno+0x3c>
 80068d8:	00820074 	movhi	r2,2049
 80068dc:	10a42004 	addi	r2,r2,-28544
 80068e0:	10800017 	ldw	r2,0(r2)
 80068e4:	103ee83a 	callr	r2
 80068e8:	e0bfff15 	stw	r2,-4(fp)
 80068ec:	00000306 	br	80068fc <alt_get_errno+0x48>
 80068f0:	00820074 	movhi	r2,2049
 80068f4:	10ab0604 	addi	r2,r2,-21480
 80068f8:	e0bfff15 	stw	r2,-4(fp)
 80068fc:	e0bfff17 	ldw	r2,-4(fp)
}
 8006900:	e037883a 	mov	sp,fp
 8006904:	dfc00117 	ldw	ra,4(sp)
 8006908:	df000017 	ldw	fp,0(sp)
 800690c:	dec00204 	addi	sp,sp,8
 8006910:	f800283a 	ret

08006914 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
 8006914:	defffa04 	addi	sp,sp,-24
 8006918:	df000515 	stw	fp,20(sp)
 800691c:	df000504 	addi	fp,sp,20
 8006920:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8006924:	0005303a 	rdctl	r2,status
 8006928:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 800692c:	e0fffd17 	ldw	r3,-12(fp)
 8006930:	00bfff84 	movi	r2,-2
 8006934:	1884703a 	and	r2,r3,r2
 8006938:	1001703a 	wrctl	status,r2
  
  return context;
 800693c:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
 8006940:	e0bffe15 	stw	r2,-8(fp)
  alt_llist_remove (&alarm->llist);
 8006944:	e0bfff17 	ldw	r2,-4(fp)
 8006948:	e0bffc15 	stw	r2,-16(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 800694c:	e0bffc17 	ldw	r2,-16(fp)
 8006950:	10c00017 	ldw	r3,0(r2)
 8006954:	e0bffc17 	ldw	r2,-16(fp)
 8006958:	10800117 	ldw	r2,4(r2)
 800695c:	18800115 	stw	r2,4(r3)
  entry->previous->next = entry->next;
 8006960:	e0bffc17 	ldw	r2,-16(fp)
 8006964:	10c00117 	ldw	r3,4(r2)
 8006968:	e0bffc17 	ldw	r2,-16(fp)
 800696c:	10800017 	ldw	r2,0(r2)
 8006970:	18800015 	stw	r2,0(r3)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 8006974:	e0fffc17 	ldw	r3,-16(fp)
 8006978:	e0bffc17 	ldw	r2,-16(fp)
 800697c:	18800115 	stw	r2,4(r3)
  entry->next     = entry;
 8006980:	e0fffc17 	ldw	r3,-16(fp)
 8006984:	e0bffc17 	ldw	r2,-16(fp)
 8006988:	18800015 	stw	r2,0(r3)
 800698c:	e0bffe17 	ldw	r2,-8(fp)
 8006990:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8006994:	e0bffb17 	ldw	r2,-20(fp)
 8006998:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
 800699c:	e037883a 	mov	sp,fp
 80069a0:	df000017 	ldw	fp,0(sp)
 80069a4:	dec00104 	addi	sp,sp,4
 80069a8:	f800283a 	ret

080069ac <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 80069ac:	defffb04 	addi	sp,sp,-20
 80069b0:	dfc00415 	stw	ra,16(sp)
 80069b4:	df000315 	stw	fp,12(sp)
 80069b8:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 80069bc:	d0a00d17 	ldw	r2,-32716(gp)
 80069c0:	e0bffe15 	stw	r2,-8(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 80069c4:	d0a6f517 	ldw	r2,-25644(gp)
 80069c8:	10800044 	addi	r2,r2,1
 80069cc:	d0a6f515 	stw	r2,-25644(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 80069d0:	00003106 	br	8006a98 <alt_tick+0xec>
  {
    next = (alt_alarm*) alarm->llist.next;
 80069d4:	e0bffe17 	ldw	r2,-8(fp)
 80069d8:	10800017 	ldw	r2,0(r2)
 80069dc:	e0bfff15 	stw	r2,-4(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 80069e0:	e0bffe17 	ldw	r2,-8(fp)
 80069e4:	10800403 	ldbu	r2,16(r2)
 80069e8:	10803fcc 	andi	r2,r2,255
 80069ec:	1005003a 	cmpeq	r2,r2,zero
 80069f0:	1000051e 	bne	r2,zero,8006a08 <alt_tick+0x5c>
 80069f4:	d0a6f517 	ldw	r2,-25644(gp)
 80069f8:	1004c03a 	cmpne	r2,r2,zero
 80069fc:	1000021e 	bne	r2,zero,8006a08 <alt_tick+0x5c>
    {
      alarm->rollover = 0;
 8006a00:	e0bffe17 	ldw	r2,-8(fp)
 8006a04:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 8006a08:	e0bffe17 	ldw	r2,-8(fp)
 8006a0c:	10c00217 	ldw	r3,8(r2)
 8006a10:	d0a6f517 	ldw	r2,-25644(gp)
 8006a14:	10c01e36 	bltu	r2,r3,8006a90 <alt_tick+0xe4>
 8006a18:	e0bffe17 	ldw	r2,-8(fp)
 8006a1c:	10800403 	ldbu	r2,16(r2)
 8006a20:	10803fcc 	andi	r2,r2,255
 8006a24:	1004c03a 	cmpne	r2,r2,zero
 8006a28:	1000191e 	bne	r2,zero,8006a90 <alt_tick+0xe4>
    {
      next_callback = alarm->callback (alarm->context);
 8006a2c:	e0bffe17 	ldw	r2,-8(fp)
 8006a30:	10c00317 	ldw	r3,12(r2)
 8006a34:	e0bffe17 	ldw	r2,-8(fp)
 8006a38:	11000517 	ldw	r4,20(r2)
 8006a3c:	183ee83a 	callr	r3
 8006a40:	e0bffd15 	stw	r2,-12(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 8006a44:	e0bffd17 	ldw	r2,-12(fp)
 8006a48:	1004c03a 	cmpne	r2,r2,zero
 8006a4c:	1000031e 	bne	r2,zero,8006a5c <alt_tick+0xb0>
      {
        alt_alarm_stop (alarm);
 8006a50:	e13ffe17 	ldw	r4,-8(fp)
 8006a54:	80069140 	call	8006914 <alt_alarm_stop>
 8006a58:	00000d06 	br	8006a90 <alt_tick+0xe4>
      }
      else
      {
        alarm->time += next_callback;
 8006a5c:	e0bffe17 	ldw	r2,-8(fp)
 8006a60:	10c00217 	ldw	r3,8(r2)
 8006a64:	e0bffd17 	ldw	r2,-12(fp)
 8006a68:	1887883a 	add	r3,r3,r2
 8006a6c:	e0bffe17 	ldw	r2,-8(fp)
 8006a70:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 8006a74:	e0bffe17 	ldw	r2,-8(fp)
 8006a78:	10c00217 	ldw	r3,8(r2)
 8006a7c:	d0a6f517 	ldw	r2,-25644(gp)
 8006a80:	1880032e 	bgeu	r3,r2,8006a90 <alt_tick+0xe4>
        {
          alarm->rollover = 1;
 8006a84:	e0fffe17 	ldw	r3,-8(fp)
 8006a88:	00800044 	movi	r2,1
 8006a8c:	18800405 	stb	r2,16(r3)
        }
      }
    }
    alarm = next;
 8006a90:	e0bfff17 	ldw	r2,-4(fp)
 8006a94:	e0bffe15 	stw	r2,-8(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 8006a98:	d0e00d04 	addi	r3,gp,-32716
 8006a9c:	e0bffe17 	ldw	r2,-8(fp)
 8006aa0:	10ffcc1e 	bne	r2,r3,80069d4 <alt_tick+0x28>
  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
}
 8006aa4:	e037883a 	mov	sp,fp
 8006aa8:	dfc00117 	ldw	ra,4(sp)
 8006aac:	df000017 	ldw	fp,0(sp)
 8006ab0:	dec00204 	addi	sp,sp,8
 8006ab4:	f800283a 	ret

08006ab8 <altera_nios2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_irq_init(void) 
{
 8006ab8:	deffff04 	addi	sp,sp,-4
 8006abc:	df000015 	stw	fp,0(sp)
 8006ac0:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 8006ac4:	000170fa 	wrctl	ienable,zero
}
 8006ac8:	e037883a 	mov	sp,fp
 8006acc:	df000017 	ldw	fp,0(sp)
 8006ad0:	dec00104 	addi	sp,sp,4
 8006ad4:	f800283a 	ret

08006ad8 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 8006ad8:	defff904 	addi	sp,sp,-28
 8006adc:	dfc00615 	stw	ra,24(sp)
 8006ae0:	df000515 	stw	fp,20(sp)
 8006ae4:	df000504 	addi	fp,sp,20
 8006ae8:	e13ffd15 	stw	r4,-12(fp)
 8006aec:	e17ffe15 	stw	r5,-8(fp)
  alt_dev* next = (alt_dev*) llist->next;
 8006af0:	e0bffe17 	ldw	r2,-8(fp)
 8006af4:	10800017 	ldw	r2,0(r2)
 8006af8:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
 8006afc:	e13ffd17 	ldw	r4,-12(fp)
 8006b00:	8000ea00 	call	8000ea0 <strlen>
 8006b04:	10800044 	addi	r2,r2,1
 8006b08:	e0bffb15 	stw	r2,-20(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 8006b0c:	00000d06 	br	8006b44 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 8006b10:	e0bffc17 	ldw	r2,-16(fp)
 8006b14:	11000217 	ldw	r4,8(r2)
 8006b18:	e1bffb17 	ldw	r6,-20(fp)
 8006b1c:	e17ffd17 	ldw	r5,-12(fp)
 8006b20:	8006e200 	call	8006e20 <memcmp>
 8006b24:	1004c03a 	cmpne	r2,r2,zero
 8006b28:	1000031e 	bne	r2,zero,8006b38 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
 8006b2c:	e0bffc17 	ldw	r2,-16(fp)
 8006b30:	e0bfff15 	stw	r2,-4(fp)
 8006b34:	00000706 	br	8006b54 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
 8006b38:	e0bffc17 	ldw	r2,-16(fp)
 8006b3c:	10800017 	ldw	r2,0(r2)
 8006b40:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 8006b44:	e0fffe17 	ldw	r3,-8(fp)
 8006b48:	e0bffc17 	ldw	r2,-16(fp)
 8006b4c:	10fff01e 	bne	r2,r3,8006b10 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
 8006b50:	e03fff15 	stw	zero,-4(fp)
 8006b54:	e0bfff17 	ldw	r2,-4(fp)
}
 8006b58:	e037883a 	mov	sp,fp
 8006b5c:	dfc00117 	ldw	ra,4(sp)
 8006b60:	df000017 	ldw	fp,0(sp)
 8006b64:	dec00204 	addi	sp,sp,8
 8006b68:	f800283a 	ret

08006b6c <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 8006b6c:	defffa04 	addi	sp,sp,-24
 8006b70:	dfc00515 	stw	ra,20(sp)
 8006b74:	df000415 	stw	fp,16(sp)
 8006b78:	df000404 	addi	fp,sp,16
 8006b7c:	e13ffe15 	stw	r4,-8(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 8006b80:	00820074 	movhi	r2,2049
 8006b84:	10a41b04 	addi	r2,r2,-28564
 8006b88:	10800017 	ldw	r2,0(r2)
 8006b8c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 8006b90:	00003306 	br	8006c60 <alt_find_file+0xf4>
  {
    len = strlen(next->name);
 8006b94:	e0bffd17 	ldw	r2,-12(fp)
 8006b98:	11000217 	ldw	r4,8(r2)
 8006b9c:	8000ea00 	call	8000ea0 <strlen>
 8006ba0:	e0bffc15 	stw	r2,-16(fp)
    
    if (next->name[len-1] == '/')
 8006ba4:	e0bffd17 	ldw	r2,-12(fp)
 8006ba8:	10c00217 	ldw	r3,8(r2)
 8006bac:	e0bffc17 	ldw	r2,-16(fp)
 8006bb0:	1885883a 	add	r2,r3,r2
 8006bb4:	10bfffc4 	addi	r2,r2,-1
 8006bb8:	10800003 	ldbu	r2,0(r2)
 8006bbc:	10803fcc 	andi	r2,r2,255
 8006bc0:	1080201c 	xori	r2,r2,128
 8006bc4:	10bfe004 	addi	r2,r2,-128
 8006bc8:	10800bd8 	cmpnei	r2,r2,47
 8006bcc:	1000031e 	bne	r2,zero,8006bdc <alt_find_file+0x70>
    {
      len -= 1;
 8006bd0:	e0bffc17 	ldw	r2,-16(fp)
 8006bd4:	10bfffc4 	addi	r2,r2,-1
 8006bd8:	e0bffc15 	stw	r2,-16(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 8006bdc:	e0bffc17 	ldw	r2,-16(fp)
 8006be0:	1007883a 	mov	r3,r2
 8006be4:	e0bffe17 	ldw	r2,-8(fp)
 8006be8:	1885883a 	add	r2,r3,r2
 8006bec:	10800003 	ldbu	r2,0(r2)
 8006bf0:	10803fcc 	andi	r2,r2,255
 8006bf4:	1080201c 	xori	r2,r2,128
 8006bf8:	10bfe004 	addi	r2,r2,-128
 8006bfc:	10800be0 	cmpeqi	r2,r2,47
 8006c00:	10000a1e 	bne	r2,zero,8006c2c <alt_find_file+0xc0>
 8006c04:	e0bffc17 	ldw	r2,-16(fp)
 8006c08:	1007883a 	mov	r3,r2
 8006c0c:	e0bffe17 	ldw	r2,-8(fp)
 8006c10:	1885883a 	add	r2,r3,r2
 8006c14:	10800003 	ldbu	r2,0(r2)
 8006c18:	10803fcc 	andi	r2,r2,255
 8006c1c:	1080201c 	xori	r2,r2,128
 8006c20:	10bfe004 	addi	r2,r2,-128
 8006c24:	1004c03a 	cmpne	r2,r2,zero
 8006c28:	10000a1e 	bne	r2,zero,8006c54 <alt_find_file+0xe8>
 8006c2c:	e0bffd17 	ldw	r2,-12(fp)
 8006c30:	11000217 	ldw	r4,8(r2)
 8006c34:	e1bffc17 	ldw	r6,-16(fp)
 8006c38:	e17ffe17 	ldw	r5,-8(fp)
 8006c3c:	8006e200 	call	8006e20 <memcmp>
 8006c40:	1004c03a 	cmpne	r2,r2,zero
 8006c44:	1000031e 	bne	r2,zero,8006c54 <alt_find_file+0xe8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
 8006c48:	e0bffd17 	ldw	r2,-12(fp)
 8006c4c:	e0bfff15 	stw	r2,-4(fp)
 8006c50:	00000806 	br	8006c74 <alt_find_file+0x108>
    }
    next = (alt_dev*) next->llist.next;
 8006c54:	e0bffd17 	ldw	r2,-12(fp)
 8006c58:	10800017 	ldw	r2,0(r2)
 8006c5c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 8006c60:	00c20074 	movhi	r3,2049
 8006c64:	18e41b04 	addi	r3,r3,-28564
 8006c68:	e0bffd17 	ldw	r2,-12(fp)
 8006c6c:	10ffc91e 	bne	r2,r3,8006b94 <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
 8006c70:	e03fff15 	stw	zero,-4(fp)
 8006c74:	e0bfff17 	ldw	r2,-4(fp)
}
 8006c78:	e037883a 	mov	sp,fp
 8006c7c:	dfc00117 	ldw	ra,4(sp)
 8006c80:	df000017 	ldw	fp,0(sp)
 8006c84:	dec00204 	addi	sp,sp,8
 8006c88:	f800283a 	ret

08006c8c <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 8006c8c:	defffc04 	addi	sp,sp,-16
 8006c90:	df000315 	stw	fp,12(sp)
 8006c94:	df000304 	addi	fp,sp,12
 8006c98:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
 8006c9c:	00bffa04 	movi	r2,-24
 8006ca0:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 8006ca4:	e03ffe15 	stw	zero,-8(fp)
 8006ca8:	00001e06 	br	8006d24 <alt_get_fd+0x98>
  {
    if (!alt_fd_list[i].dev)
 8006cac:	e0bffe17 	ldw	r2,-8(fp)
 8006cb0:	00c20034 	movhi	r3,2048
 8006cb4:	18df5704 	addi	r3,r3,32092
 8006cb8:	10800324 	muli	r2,r2,12
 8006cbc:	10c5883a 	add	r2,r2,r3
 8006cc0:	10800017 	ldw	r2,0(r2)
 8006cc4:	1004c03a 	cmpne	r2,r2,zero
 8006cc8:	1000131e 	bne	r2,zero,8006d18 <alt_get_fd+0x8c>
    {
      alt_fd_list[i].dev = dev;
 8006ccc:	e0bffe17 	ldw	r2,-8(fp)
 8006cd0:	00c20034 	movhi	r3,2048
 8006cd4:	18df5704 	addi	r3,r3,32092
 8006cd8:	10800324 	muli	r2,r2,12
 8006cdc:	10c7883a 	add	r3,r2,r3
 8006ce0:	e0bfff17 	ldw	r2,-4(fp)
 8006ce4:	18800015 	stw	r2,0(r3)
      if (i > alt_max_fd)
 8006ce8:	00820074 	movhi	r2,2049
 8006cec:	10a41f04 	addi	r2,r2,-28548
 8006cf0:	10c00017 	ldw	r3,0(r2)
 8006cf4:	e0bffe17 	ldw	r2,-8(fp)
 8006cf8:	1880040e 	bge	r3,r2,8006d0c <alt_get_fd+0x80>
      {
        alt_max_fd = i;
 8006cfc:	00c20074 	movhi	r3,2049
 8006d00:	18e41f04 	addi	r3,r3,-28548
 8006d04:	e0bffe17 	ldw	r2,-8(fp)
 8006d08:	18800015 	stw	r2,0(r3)
      }
      rc = i;
 8006d0c:	e0bffe17 	ldw	r2,-8(fp)
 8006d10:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
 8006d14:	00000606 	br	8006d30 <alt_get_fd+0xa4>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 8006d18:	e0bffe17 	ldw	r2,-8(fp)
 8006d1c:	10800044 	addi	r2,r2,1
 8006d20:	e0bffe15 	stw	r2,-8(fp)
 8006d24:	e0bffe17 	ldw	r2,-8(fp)
 8006d28:	10800810 	cmplti	r2,r2,32
 8006d2c:	103fdf1e 	bne	r2,zero,8006cac <alt_get_fd+0x20>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
 8006d30:	e0bffd17 	ldw	r2,-12(fp)
}
 8006d34:	e037883a 	mov	sp,fp
 8006d38:	df000017 	ldw	fp,0(sp)
 8006d3c:	dec00104 	addi	sp,sp,4
 8006d40:	f800283a 	ret

08006d44 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
 8006d44:	defffb04 	addi	sp,sp,-20
 8006d48:	df000415 	stw	fp,16(sp)
 8006d4c:	df000404 	addi	fp,sp,16
 8006d50:	e13ffe15 	stw	r4,-8(fp)
 8006d54:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
 8006d58:	e0bfff17 	ldw	r2,-4(fp)
 8006d5c:	10840070 	cmpltui	r2,r2,4097
 8006d60:	1000021e 	bne	r2,zero,8006d6c <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
 8006d64:	00840004 	movi	r2,4096
 8006d68:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
 8006d6c:	e0fffe17 	ldw	r3,-8(fp)
 8006d70:	e0bfff17 	ldw	r2,-4(fp)
 8006d74:	1885883a 	add	r2,r3,r2
 8006d78:	e0bffc15 	stw	r2,-16(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 8006d7c:	e0bffe17 	ldw	r2,-8(fp)
 8006d80:	e0bffd15 	stw	r2,-12(fp)
 8006d84:	00000506 	br	8006d9c <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
 8006d88:	e0bffd17 	ldw	r2,-12(fp)
 8006d8c:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 8006d90:	e0bffd17 	ldw	r2,-12(fp)
 8006d94:	10800804 	addi	r2,r2,32
 8006d98:	e0bffd15 	stw	r2,-12(fp)
 8006d9c:	e0fffd17 	ldw	r3,-12(fp)
 8006da0:	e0bffc17 	ldw	r2,-16(fp)
 8006da4:	18bff836 	bltu	r3,r2,8006d88 <alt_icache_flush+0x44>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
 8006da8:	e0bffe17 	ldw	r2,-8(fp)
 8006dac:	108007cc 	andi	r2,r2,31
 8006db0:	1005003a 	cmpeq	r2,r2,zero
 8006db4:	1000021e 	bne	r2,zero,8006dc0 <alt_icache_flush+0x7c>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
 8006db8:	e0bffd17 	ldw	r2,-12(fp)
 8006dbc:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
 8006dc0:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
 8006dc4:	e037883a 	mov	sp,fp
 8006dc8:	df000017 	ldw	fp,0(sp)
 8006dcc:	dec00104 	addi	sp,sp,4
 8006dd0:	f800283a 	ret

08006dd4 <atexit>:
 8006dd4:	200b883a 	mov	r5,r4
 8006dd8:	000d883a 	mov	r6,zero
 8006ddc:	0009883a 	mov	r4,zero
 8006de0:	000f883a 	mov	r7,zero
 8006de4:	8006e941 	jmpi	8006e94 <__register_exitproc>

08006de8 <exit>:
 8006de8:	defffe04 	addi	sp,sp,-8
 8006dec:	000b883a 	mov	r5,zero
 8006df0:	dc000015 	stw	r16,0(sp)
 8006df4:	dfc00115 	stw	ra,4(sp)
 8006df8:	2021883a 	mov	r16,r4
 8006dfc:	8006fcc0 	call	8006fcc <__call_exitprocs>
 8006e00:	00820074 	movhi	r2,2049
 8006e04:	10a41804 	addi	r2,r2,-28576
 8006e08:	11000017 	ldw	r4,0(r2)
 8006e0c:	20800f17 	ldw	r2,60(r4)
 8006e10:	10000126 	beq	r2,zero,8006e18 <exit+0x30>
 8006e14:	103ee83a 	callr	r2
 8006e18:	8009883a 	mov	r4,r16
 8006e1c:	80071bc0 	call	80071bc <_exit>

08006e20 <memcmp>:
 8006e20:	00c000c4 	movi	r3,3
 8006e24:	1980032e 	bgeu	r3,r6,8006e34 <memcmp+0x14>
 8006e28:	2144b03a 	or	r2,r4,r5
 8006e2c:	10c4703a 	and	r2,r2,r3
 8006e30:	10000f26 	beq	r2,zero,8006e70 <memcmp+0x50>
 8006e34:	31ffffc4 	addi	r7,r6,-1
 8006e38:	3000061e 	bne	r6,zero,8006e54 <memcmp+0x34>
 8006e3c:	00000a06 	br	8006e68 <memcmp+0x48>
 8006e40:	39ffffc4 	addi	r7,r7,-1
 8006e44:	00bfffc4 	movi	r2,-1
 8006e48:	21000044 	addi	r4,r4,1
 8006e4c:	29400044 	addi	r5,r5,1
 8006e50:	38800526 	beq	r7,r2,8006e68 <memcmp+0x48>
 8006e54:	20c00003 	ldbu	r3,0(r4)
 8006e58:	28800003 	ldbu	r2,0(r5)
 8006e5c:	18bff826 	beq	r3,r2,8006e40 <memcmp+0x20>
 8006e60:	1885c83a 	sub	r2,r3,r2
 8006e64:	f800283a 	ret
 8006e68:	0005883a 	mov	r2,zero
 8006e6c:	f800283a 	ret
 8006e70:	180f883a 	mov	r7,r3
 8006e74:	20c00017 	ldw	r3,0(r4)
 8006e78:	28800017 	ldw	r2,0(r5)
 8006e7c:	18bfed1e 	bne	r3,r2,8006e34 <memcmp+0x14>
 8006e80:	31bfff04 	addi	r6,r6,-4
 8006e84:	21000104 	addi	r4,r4,4
 8006e88:	29400104 	addi	r5,r5,4
 8006e8c:	39bff936 	bltu	r7,r6,8006e74 <memcmp+0x54>
 8006e90:	003fe806 	br	8006e34 <memcmp+0x14>

08006e94 <__register_exitproc>:
 8006e94:	defffa04 	addi	sp,sp,-24
 8006e98:	00820074 	movhi	r2,2049
 8006e9c:	10a41804 	addi	r2,r2,-28576
 8006ea0:	dc000015 	stw	r16,0(sp)
 8006ea4:	14000017 	ldw	r16,0(r2)
 8006ea8:	dd000415 	stw	r20,16(sp)
 8006eac:	2829883a 	mov	r20,r5
 8006eb0:	81405217 	ldw	r5,328(r16)
 8006eb4:	dcc00315 	stw	r19,12(sp)
 8006eb8:	dc800215 	stw	r18,8(sp)
 8006ebc:	dc400115 	stw	r17,4(sp)
 8006ec0:	dfc00515 	stw	ra,20(sp)
 8006ec4:	2023883a 	mov	r17,r4
 8006ec8:	3027883a 	mov	r19,r6
 8006ecc:	3825883a 	mov	r18,r7
 8006ed0:	28002526 	beq	r5,zero,8006f68 <__register_exitproc+0xd4>
 8006ed4:	29000117 	ldw	r4,4(r5)
 8006ed8:	008007c4 	movi	r2,31
 8006edc:	11002716 	blt	r2,r4,8006f7c <__register_exitproc+0xe8>
 8006ee0:	8800101e 	bne	r17,zero,8006f24 <__register_exitproc+0x90>
 8006ee4:	2105883a 	add	r2,r4,r4
 8006ee8:	1085883a 	add	r2,r2,r2
 8006eec:	20c00044 	addi	r3,r4,1
 8006ef0:	1145883a 	add	r2,r2,r5
 8006ef4:	0009883a 	mov	r4,zero
 8006ef8:	15000215 	stw	r20,8(r2)
 8006efc:	28c00115 	stw	r3,4(r5)
 8006f00:	2005883a 	mov	r2,r4
 8006f04:	dfc00517 	ldw	ra,20(sp)
 8006f08:	dd000417 	ldw	r20,16(sp)
 8006f0c:	dcc00317 	ldw	r19,12(sp)
 8006f10:	dc800217 	ldw	r18,8(sp)
 8006f14:	dc400117 	ldw	r17,4(sp)
 8006f18:	dc000017 	ldw	r16,0(sp)
 8006f1c:	dec00604 	addi	sp,sp,24
 8006f20:	f800283a 	ret
 8006f24:	29802204 	addi	r6,r5,136
 8006f28:	00800044 	movi	r2,1
 8006f2c:	110e983a 	sll	r7,r2,r4
 8006f30:	30c04017 	ldw	r3,256(r6)
 8006f34:	2105883a 	add	r2,r4,r4
 8006f38:	1085883a 	add	r2,r2,r2
 8006f3c:	1185883a 	add	r2,r2,r6
 8006f40:	19c6b03a 	or	r3,r3,r7
 8006f44:	14802015 	stw	r18,128(r2)
 8006f48:	14c00015 	stw	r19,0(r2)
 8006f4c:	00800084 	movi	r2,2
 8006f50:	30c04015 	stw	r3,256(r6)
 8006f54:	88bfe31e 	bne	r17,r2,8006ee4 <__register_exitproc+0x50>
 8006f58:	30804117 	ldw	r2,260(r6)
 8006f5c:	11c4b03a 	or	r2,r2,r7
 8006f60:	30804115 	stw	r2,260(r6)
 8006f64:	003fdf06 	br	8006ee4 <__register_exitproc+0x50>
 8006f68:	00820074 	movhi	r2,2049
 8006f6c:	10ab5704 	addi	r2,r2,-21156
 8006f70:	100b883a 	mov	r5,r2
 8006f74:	80805215 	stw	r2,328(r16)
 8006f78:	003fd606 	br	8006ed4 <__register_exitproc+0x40>
 8006f7c:	00800034 	movhi	r2,0
 8006f80:	10800004 	addi	r2,r2,0
 8006f84:	1000021e 	bne	r2,zero,8006f90 <__register_exitproc+0xfc>
 8006f88:	013fffc4 	movi	r4,-1
 8006f8c:	003fdc06 	br	8006f00 <__register_exitproc+0x6c>
 8006f90:	01006404 	movi	r4,400
 8006f94:	103ee83a 	callr	r2
 8006f98:	1007883a 	mov	r3,r2
 8006f9c:	103ffa26 	beq	r2,zero,8006f88 <__register_exitproc+0xf4>
 8006fa0:	80805217 	ldw	r2,328(r16)
 8006fa4:	180b883a 	mov	r5,r3
 8006fa8:	18000115 	stw	zero,4(r3)
 8006fac:	18800015 	stw	r2,0(r3)
 8006fb0:	80c05215 	stw	r3,328(r16)
 8006fb4:	18006215 	stw	zero,392(r3)
 8006fb8:	18006315 	stw	zero,396(r3)
 8006fbc:	0009883a 	mov	r4,zero
 8006fc0:	883fc826 	beq	r17,zero,8006ee4 <__register_exitproc+0x50>
 8006fc4:	003fd706 	br	8006f24 <__register_exitproc+0x90>

08006fc8 <register_fini>:
 8006fc8:	f800283a 	ret

08006fcc <__call_exitprocs>:
 8006fcc:	00820074 	movhi	r2,2049
 8006fd0:	10a41804 	addi	r2,r2,-28576
 8006fd4:	10800017 	ldw	r2,0(r2)
 8006fd8:	defff304 	addi	sp,sp,-52
 8006fdc:	df000b15 	stw	fp,44(sp)
 8006fe0:	d8800115 	stw	r2,4(sp)
 8006fe4:	00800034 	movhi	r2,0
 8006fe8:	10800004 	addi	r2,r2,0
 8006fec:	1005003a 	cmpeq	r2,r2,zero
 8006ff0:	d8800215 	stw	r2,8(sp)
 8006ff4:	d8800117 	ldw	r2,4(sp)
 8006ff8:	dd400815 	stw	r21,32(sp)
 8006ffc:	dd000715 	stw	r20,28(sp)
 8007000:	10805204 	addi	r2,r2,328
 8007004:	dfc00c15 	stw	ra,48(sp)
 8007008:	ddc00a15 	stw	r23,40(sp)
 800700c:	dd800915 	stw	r22,36(sp)
 8007010:	dcc00615 	stw	r19,24(sp)
 8007014:	dc800515 	stw	r18,20(sp)
 8007018:	dc400415 	stw	r17,16(sp)
 800701c:	dc000315 	stw	r16,12(sp)
 8007020:	282b883a 	mov	r21,r5
 8007024:	2039883a 	mov	fp,r4
 8007028:	d8800015 	stw	r2,0(sp)
 800702c:	2829003a 	cmpeq	r20,r5,zero
 8007030:	d8800117 	ldw	r2,4(sp)
 8007034:	14405217 	ldw	r17,328(r2)
 8007038:	88001026 	beq	r17,zero,800707c <__call_exitprocs+0xb0>
 800703c:	ddc00017 	ldw	r23,0(sp)
 8007040:	88800117 	ldw	r2,4(r17)
 8007044:	8c802204 	addi	r18,r17,136
 8007048:	143fffc4 	addi	r16,r2,-1
 800704c:	80000916 	blt	r16,zero,8007074 <__call_exitprocs+0xa8>
 8007050:	05bfffc4 	movi	r22,-1
 8007054:	a000151e 	bne	r20,zero,80070ac <__call_exitprocs+0xe0>
 8007058:	8409883a 	add	r4,r16,r16
 800705c:	2105883a 	add	r2,r4,r4
 8007060:	1485883a 	add	r2,r2,r18
 8007064:	10c02017 	ldw	r3,128(r2)
 8007068:	a8c01126 	beq	r21,r3,80070b0 <__call_exitprocs+0xe4>
 800706c:	843fffc4 	addi	r16,r16,-1
 8007070:	85bff81e 	bne	r16,r22,8007054 <__call_exitprocs+0x88>
 8007074:	d8800217 	ldw	r2,8(sp)
 8007078:	10003126 	beq	r2,zero,8007140 <__call_exitprocs+0x174>
 800707c:	dfc00c17 	ldw	ra,48(sp)
 8007080:	df000b17 	ldw	fp,44(sp)
 8007084:	ddc00a17 	ldw	r23,40(sp)
 8007088:	dd800917 	ldw	r22,36(sp)
 800708c:	dd400817 	ldw	r21,32(sp)
 8007090:	dd000717 	ldw	r20,28(sp)
 8007094:	dcc00617 	ldw	r19,24(sp)
 8007098:	dc800517 	ldw	r18,20(sp)
 800709c:	dc400417 	ldw	r17,16(sp)
 80070a0:	dc000317 	ldw	r16,12(sp)
 80070a4:	dec00d04 	addi	sp,sp,52
 80070a8:	f800283a 	ret
 80070ac:	8409883a 	add	r4,r16,r16
 80070b0:	88c00117 	ldw	r3,4(r17)
 80070b4:	2105883a 	add	r2,r4,r4
 80070b8:	1445883a 	add	r2,r2,r17
 80070bc:	18ffffc4 	addi	r3,r3,-1
 80070c0:	11800217 	ldw	r6,8(r2)
 80070c4:	1c001526 	beq	r3,r16,800711c <__call_exitprocs+0x150>
 80070c8:	10000215 	stw	zero,8(r2)
 80070cc:	303fe726 	beq	r6,zero,800706c <__call_exitprocs+0xa0>
 80070d0:	00c00044 	movi	r3,1
 80070d4:	1c06983a 	sll	r3,r3,r16
 80070d8:	90804017 	ldw	r2,256(r18)
 80070dc:	8cc00117 	ldw	r19,4(r17)
 80070e0:	1884703a 	and	r2,r3,r2
 80070e4:	10001426 	beq	r2,zero,8007138 <__call_exitprocs+0x16c>
 80070e8:	90804117 	ldw	r2,260(r18)
 80070ec:	1884703a 	and	r2,r3,r2
 80070f0:	10000c1e 	bne	r2,zero,8007124 <__call_exitprocs+0x158>
 80070f4:	2105883a 	add	r2,r4,r4
 80070f8:	1485883a 	add	r2,r2,r18
 80070fc:	11400017 	ldw	r5,0(r2)
 8007100:	e009883a 	mov	r4,fp
 8007104:	303ee83a 	callr	r6
 8007108:	88800117 	ldw	r2,4(r17)
 800710c:	98bfc81e 	bne	r19,r2,8007030 <__call_exitprocs+0x64>
 8007110:	b8800017 	ldw	r2,0(r23)
 8007114:	147fd526 	beq	r2,r17,800706c <__call_exitprocs+0xa0>
 8007118:	003fc506 	br	8007030 <__call_exitprocs+0x64>
 800711c:	8c000115 	stw	r16,4(r17)
 8007120:	003fea06 	br	80070cc <__call_exitprocs+0x100>
 8007124:	2105883a 	add	r2,r4,r4
 8007128:	1485883a 	add	r2,r2,r18
 800712c:	11000017 	ldw	r4,0(r2)
 8007130:	303ee83a 	callr	r6
 8007134:	003ff406 	br	8007108 <__call_exitprocs+0x13c>
 8007138:	303ee83a 	callr	r6
 800713c:	003ff206 	br	8007108 <__call_exitprocs+0x13c>
 8007140:	88800117 	ldw	r2,4(r17)
 8007144:	1000081e 	bne	r2,zero,8007168 <__call_exitprocs+0x19c>
 8007148:	89000017 	ldw	r4,0(r17)
 800714c:	20000726 	beq	r4,zero,800716c <__call_exitprocs+0x1a0>
 8007150:	b9000015 	stw	r4,0(r23)
 8007154:	8809883a 	mov	r4,r17
 8007158:	00000000 	call	0 <__alt_mem_sdram_0-0x8000000>
 800715c:	bc400017 	ldw	r17,0(r23)
 8007160:	883fb71e 	bne	r17,zero,8007040 <__call_exitprocs+0x74>
 8007164:	003fc506 	br	800707c <__call_exitprocs+0xb0>
 8007168:	89000017 	ldw	r4,0(r17)
 800716c:	882f883a 	mov	r23,r17
 8007170:	2023883a 	mov	r17,r4
 8007174:	883fb21e 	bne	r17,zero,8007040 <__call_exitprocs+0x74>
 8007178:	003fc006 	br	800707c <__call_exitprocs+0xb0>

0800717c <alt_sim_halt>:

/*
 * Routine called on exit.
 */
static ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
 800717c:	defffd04 	addi	sp,sp,-12
 8007180:	df000215 	stw	fp,8(sp)
 8007184:	df000204 	addi	fp,sp,8
 8007188:	e13fff15 	stw	r4,-4(fp)
  int r2 = exit_code;
 800718c:	e0bfff17 	ldw	r2,-4(fp)
 8007190:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 8007194:	e0bffe17 	ldw	r2,-8(fp)
 8007198:	1005003a 	cmpeq	r2,r2,zero
 800719c:	1000021e 	bne	r2,zero,80071a8 <alt_sim_halt+0x2c>
    ALT_SIM_FAIL();
 80071a0:	002af070 	cmpltui	zero,zero,43969
 80071a4:	00000106 	br	80071ac <alt_sim_halt+0x30>
  } else {
    ALT_SIM_PASS();
 80071a8:	002af0b0 	cmpltui	zero,zero,43970
  }
#endif /* DEBUG_STUB */
}
 80071ac:	e037883a 	mov	sp,fp
 80071b0:	df000017 	ldw	fp,0(sp)
 80071b4:	dec00104 	addi	sp,sp,4
 80071b8:	f800283a 	ret

080071bc <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 80071bc:	defffd04 	addi	sp,sp,-12
 80071c0:	dfc00215 	stw	ra,8(sp)
 80071c4:	df000115 	stw	fp,4(sp)
 80071c8:	df000104 	addi	fp,sp,4
 80071cc:	e13fff15 	stw	r4,-4(fp)
  ALT_OS_STOP();

  /* Provide notification to the simulator that we've stopped */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_SIM_HALT().\r\n");
  ALT_SIM_HALT(exit_code);
 80071d0:	e13fff17 	ldw	r4,-4(fp)
 80071d4:	800717c0 	call	800717c <alt_sim_halt>

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 80071d8:	003fff06 	br	80071d8 <_exit+0x1c>
 80071dc:	08006fc8 	cmpgei	zero,at,447
